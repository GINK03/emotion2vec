{"context": "\n\u4ee5\u4e0b\u306e\u3053\u3068\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3002\n\u2460TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u81ea\u5206\u306e\u66f8\u3044\u305f\u6570\u5b57\u3067\u8a66\u3059\u65b9\u6cd5\n\u2461Windows7\u3060\u3051\u3069Linux(Ubuntu)\u3067TensorFlow\u306e\u958b\u767a\u3092\u3059\u308b\u65b9\u6cd5\n\u3000\u30fcTensorFlow\u306fUbuntu\u3067\u958b\u767a\u3057\u305f\u307b\u3046\u304c\u3044\u308d\u3044\u308d\u826f\u3044\u70b9\u304c\u3042\u308b\u306a\u30fc\u3068\u601d\u3063\u305f\n\u3000\u3000\u30fbGUI\u5468\u308a\u304c\u3057\u3063\u304b\u308a\u3068\u4f5c\u308a\u3053\u307e\u308c\u3066\u3044\u308b\n\u3000\u3000\u3000\u30fcTensorBoard\uff08\u30b0\u30e9\u30d5\u306e\u53ef\u8996\u5316\u6a5f\u80fd\uff09\u304c\u7c21\u5358\u306b\u4f7f\u3048\u308b\n\u3000\u3000\u3000\u30fcGUI\u30a2\u30d7\u30ea\u958b\u767a\u304c\u7c21\u5358\n\u3000\u3000\u30fbapt-get\u3067\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u3092\u7c21\u5358\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\n\u3000\u3000\u3000\u30fc\u5143\u3005Ubuntu\u306e\u6a5f\u80fd\u3067\u3042\u308b\u3060\u3051\u3042\u3063\u3066\u3064\u307e\u3065\u304f\u3053\u3068\u304c\u5c11\u306a\u3044\n\u3000\u3000\u30fbPython\u3067\u97f3\u3092\u51fa\u305b\u308b\n\u3000\u3000\u3000\u30fc\u3053\u308c\u3067\u97f3\u58f0\u51e6\u7406\u304c\u306f\u304b\u3069\u308b\n\u3000\u3000\u3000\u30fcPyAudio\u3092\u4f7f\u3046\n\u3000\u3000\u3000\u30fcWindow\u306eDocker\u74b0\u5883\u3067\u97f3\u51fa\u3059\u306e\u306f\u3042\u304d\u3089\u3081\u307e\u3057\u305f\n\u3000\u30fc\u3053\u306e\u6a5f\u4f1a\u306bWindows7\u3068Ubuntu\u306e\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\u2462Linux\u3067GUI\u958b\u767a\u3092\u3059\u308b\u65b9\u6cd5\n\u3000\u30fc\u30b3\u30de\u30f3\u30c9\u3067\u7d50\u679c\u898b\u305b\u3089\u308c\u3066\u3082\u6df1\u5c64\u5b66\u7fd2\u306e\u51c4\u3055\u304c\u4f1d\u308f\u308a\u3065\u3089\u3044\n\u3000\u30fc\u308f\u304b\u308a\u3084\u3059\u3044GUI\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\n\u958b\u767a\u74b0\u5883(Ubuntu)\uff1a\nOS:Ubuntu 16.04 LTS 64bit\nCPU:Core i7-5500U @ 2.40GHz \u00d7 4\nGPU:\u6a19\u6e96Intel HD Graphics 5500\n\u30e1\u30e2\u30ea:8GB\n\u8a00\u8a9e:Python 2.7.12\n\u4ee5\u4e0b\u306e\u69cb\u6210\u3067\u8a18\u8ff0\u3059\u308b\u3002\n\uff11\uff0e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9\n\uff12\uff0e\u6210\u679c\u7269\n\uff13\uff0e\u65b9\u6cd5\u306e\u89e3\u8aac\n\uff14\uff0e\u5b9f\u9a13\n\uff15\uff0e\u8003\u5bdf\n\uff16\uff0e\u307e\u3068\u3081\n\uff11\uff0e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n1-1.Windows7\u3068Ubuntu\u306e\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u74b0\u5883\u3092\u69cb\u7bc9\n\u3000Windows7\u306bUbuntu\u3092\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u3067\u5165\u308c\u308b\u306b\u306fWubi\u3068\u3044\u3046\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u3060\u3002Wubi\u306fWindows\u30e6\u30fc\u30b6\u306e\u305f\u3081\u306eUbuntu\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3067\u3042\u308b\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u4ed6\u306eWindows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u3058\u3088\u3046\u306bUbuntu\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u308a\u3001\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u304a\u307e\u3051\u306bWindows\u3068\u306e\u5171\u6709\u30d5\u30a9\u30eb\u30c0\u3082\u3042\u3063\u3066\u4fbf\u5229\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttps://wiki.ubuntulinux.jp/UbuntuTips/Install/WubiGuide\n1-2.TensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000Python\u306f\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bTensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\u4eca\u56deGPU\u306f\u4f7f\u308f\u305a\u306bCPU\u306e\u307f\u306e\u65b9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttp://qiita.com/yudsuzuk/items/092c38fee18e4484ece9\n\u3000\u4f1a\u793e\u306ePC\u306a\u3069\u306e\u5834\u5408\u3001\u6bce\u5ea6\u306e\u3053\u3068\u3060\u304c\u3001\u3053\u306e\u8fba\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3067\u3064\u307e\u3065\u304f\u3053\u3068\u306b\u306a\u308b\u3002\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u8a2d\u5b9a\u3059\u308b\u3002export\u3059\u308b\u3068\u304b\u3001sudo\u306e\u3042\u3068\u306b-E\u3064\u3051\u308b\u3068\u304b\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttp://qiita.com/showsuzu/items/9ee031208d38ff8ac889\n\u3000Ubuntu\u306eSystem Settings\u753b\u9762\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u306e\u8a2d\u5b9a\u3082\u3059\u308b\u3002\n1-3.\u305d\u306e\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092apt-get\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\u52a0\u3048\u3066\u3001\u5f8c\u3067\u4f7f\u3044\u305d\u3046\u306a\u306e\u3067\u5165\u308c\u3066\u304a\u304f\u3082\u306e\u3084\u3001\u6700\u521d\u304b\u3089\u5165\u3063\u3066\u308b\u304c\u4e00\u5fdc\u78ba\u304b\u3081\u3066\u304a\u304f\u3082\u306e\u3082\u793a\u3059\u3002(\u3053\u308c\u3067\u5168\u90e8\u3060\u3068\u3044\u3044\u3051\u3069...)\nsudo apt-get install libopencv-dev\nsudo apt-get install python-opencv\nsudo apt-get install python-scipy\nsudo apt-get install python-matplotlib\nsudo apt-get install python-numpy\n1-4.GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30c4\u30fc\u30eb\n\u3000PyQt4\u3068GUI\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30ebQt Designer\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u6574\u3048\u308b\u3002\nsudo apt-get install python-qt4\nsudo apt-get install qt4-designer\n\uff12\uff0e\u6210\u679c\u7269\n\u3000\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fGitHub\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u3044\u308b\u3002git\u3092\u4f7f\u3048\u308b\u4eba\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\nsudo git clone https://github.com/jintaka1989/DeepMnistGuiApp.git\n\u3000Ubuntu\u3068OSX\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u305f\u3002\u305f\u3060\u3057\u3001OSX\u306f\u4e0a\u8a18\u306e\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u5c11\u3005\u624b\u9593\u53d6\u3063\u305f\u3002apt-get\u304c\u306a\u3044\u306e\u3067brew\u3068\u304bpip\u306a\u3069\u3092\u4f7f\u3063\u305f\u3002\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u3060\u3051\u306a\u3089qt4-designer\u306f\u5fc5\u8981\u306a\u3044\u3002\u6c17\u304c\u5411\u3044\u305f\u3089OSX\u7528\u306b\u5225\u306b\u8aac\u660e\u3092\u3059\u308b\u3002\n\u3000\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u7d50\u679c\u3092\u56f3\uff11\u306b\u793a\u3059\u3002\n\n\u56f3\uff11\u3000DeepMnistGuiApp\u306e\u5b9f\u884c\u7d50\u679c\n2-1.\u52d5\u4f5c\u306e\u8aac\u660e\n\u3000\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u3000sudo python main.py\n\u3000a.\u300c\u63cf\u753b\u753b\u9762\u3092\u8d77\u52d5\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\u3000b.\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u306b\u30de\u30a6\u30b9\u3067\u6570\u5b57\u3092\u66f8\u304f\n\u3000c.\u300c\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u63cf\u753b\u753b\u9762\u3068\u8a8d\u8b58\u306e\u305f\u3081\u3092\u306e\u524d\u51e6\u7406\u306e\u7d50\u679c\u306e\u753b\u50cf\u304c\u4fdd\u5b58\u3055\u308c\u308b\n\u3000\u3000\u30fb\u5de6\u5074\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u624b\u66f8\u304d\u6570\u5b57\u3092\u8a8d\u8b58\u3057\u305f\u7d50\u679c(0~9)\u304c\u8868\u793a\u3055\u308c\u308b\n\u3000d.\u300c\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u30af\u30ea\u30a2\u3055\u308c\u308b\n\u3000\u3000\u30fb\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u304c\u518d\u8868\u793a\u3055\u308c\u308b\n\u3000\u3000\u30fb(b.\u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b)\n\u3000e.\u300c\u63cf\u753b\u753b\u9762\u3092\u4fdd\u5b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u63cf\u753b\u753b\u9762\u3068\u8a8d\u8b58\u306e\u305f\u3081\u306e\u524d\u51e6\u7406\u306e\u7d50\u679c\u306e\u753b\u50cf\u304c\u4fdd\u5b58\u3055\u308c\u308b\n\u3000f.\u300c\u30a2\u30d7\u30ea\u3092\u7d42\u4e86\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fbTensorFlow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u9589\u3058\u3089\u308c\u308b\n\u3000\u3000\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3059\u308b\n2-2.\u6ce8\u610f\u4e8b\u9805\n\u30002-2-1.\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\n\u3000\u3000\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u305f\u3073\u306b\u6a5f\u68b0\u5b66\u7fd2\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3042\u3089\u304b\u3058\u308110000step\u307b\u3069\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u5b66\u7fd2\u3057\u306a\u304c\u3089\u3060\u3068\u51e6\u7406\u304c\u91cd\u3044\u305f\u3081\u3067\u3042\u308b\u3002\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300cdouble_layer_model_creator.py\u300d\u3067\u3042\u308b\u300220000step\u306e\u5b66\u7fd2\u306a\u3069\u3092\u3057\u3066\u3082\u3063\u3068\u7cbe\u5ea6\u3092\u9ad8\u3081\u305f\u3044\u5834\u5408\u306f\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066ckpt\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3002\n\u3000\u300010000step\u307b\u3069\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306e\u8a8d\u8b58\u7387\u306fMNIST\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306799.11%\u3060\u304c\u3001\u81ea\u5206\u306e\u66f8\u3044\u305f\u6587\u5b57\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u3084\u306f\u308a\u8a8d\u8b58\u7387\u304c\u4f4e\u304f\u306a\u308b\u3088\u3046\u3060\u3002\n\u30002-2-2.\u67a0\u3092\u306f\u307f\u51fa\u308b\u3068\u30c0\u30e1\n\u3000\u3000\u67a0\u3092\u306f\u307f\u51fa\u3066\u6570\u5b57\u3092\u66f8\u304f\u3068\u30a8\u30e9\u30fc\u306a\u306e\u3067\u300c\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u66f8\u304d\u76f4\u3059\u3002\n\uff13\uff0e\u65b9\u6cd5\u306e\u89e3\u8aac\n3-1.\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\n\u3000TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u53c2\u8003\u306bdouble_layer_model_creator.py\u3092\u4f5c\u6210\u3057\u305f\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308bckpt\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\ndouble_layer_model_creator.py\n#from __future__ import absolute_import, unicode_literals\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nimport tensorflow as tf\n\nsess = tf.InteractiveSession()\n\nx = tf.placeholder(tf.float32,[None,784])\nW = tf.Variable(tf.zeros([784,10]), name = \"W\")\n# b = tf.Variable(tf.zeros([10]), name = \"b\")\ny_ = tf.placeholder(tf.float32,[None,10])\n#sess.run(tf.initialize_all_variables())\n# y = tf.nn.softmax(tf.matmul(x,W)+b)\n# cross_entropy = -tf.reduce_sum(y_*tf.log(y))\n#\n# train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n\n#for i in range(1000):\n   #batch = mnist.train.next_batch(50)\n   #train_step.run(feed_dict={x: batch[0], y_: batch[1]})\n   ##print tf.argmax(y, 1)\n\n#correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\n#accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\n#print accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels})\n\ndef weight_variable(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1,2,2,1],strides=[1,2,2,1], padding='SAME')\n\n#first layer\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\nx_image = tf.reshape(x, [-1,28,28,1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n#second layer\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n#\nW_fc1 = weight_variable([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n#Drop out\nkeep_prob = tf.placeholder(\"float\")\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\nW_fc2 = weight_variable([1024,10])\nb_fc2 = bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nsaver = tf.train.Saver()\n\nsess.run(tf.initialize_all_variables())\n#original = 20000\nfor i in range(20000):\n    batch = mnist.train.next_batch(50)\n    if i%100 == 0:\n        train_accuracy = accuracy.eval(feed_dict={\n            x:batch[0], y_: batch[1], keep_prob: 1.0})\n        print \"step %d, training accuracy %g\"%(i, train_accuracy)\n    train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\nprint \"test accuracy %g\"%accuracy.eval(feed_dict={\n    x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n\nsaver.save(sess, \"double_layer_model.ckpt\")\n\nsess.close()\n\n\n\n3-2.\u753b\u9762\u3092\u4f5c\u308b\n\u3000PyQt4\u3068Qt Desingner\u3092\u4f7f\u3063\u3066\u753b\u9762\u3092\u4f5c\u308b\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\npython + PyQt4 + Qt Designer\u3067GUI\u30a2\u30d7\u30ea\uff1ahttp://domnikki.hateblo.jp/entry/2016/04/07/005006\n\u3000\u753b\u9762deep_minist.ui\u3092\u4f5c\u3063\u305f\u3042\u3068\u3001convert_qt.py\u3092\u5b9f\u884c\u3057\u3066\u3001deep_mnist.py\u3092\u751f\u6210\u3057\u3001Python\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\nconvert_qt.py\n# -*- coding: utf-8 -*-\nfrom PyQt4 import uic\n\nfin = open('deep_mnist.ui', 'r')\nfout = open('deep_mnist.py', 'w')\nuic.compileUi(fin,fout,execute=False)\nfin.close()\nfout.close()\n\n\n\ndeep_mnist.py\n# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'deep_mnist.ui'\n#\n# Created by: PyQt4 UI code generator 4.11.4\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt4 import QtCore, QtGui\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(_fromUtf8(\"MainWindow\"))\n        MainWindow.resize(640, 480)\n        self.centralwidget = QtGui.QWidget(MainWindow)\n        self.centralwidget.setObjectName(_fromUtf8(\"centralwidget\"))\n        self.button_exit = QtGui.QPushButton(self.centralwidget)\n        self.button_exit.setGeometry(QtCore.QRect(450, 390, 181, 27))\n        self.button_exit.setObjectName(_fromUtf8(\"button_exit\"))\n        self.pushButtonPaintImage = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonPaintImage.setGeometry(QtCore.QRect(450, 170, 181, 27))\n        self.pushButtonPaintImage.setObjectName(_fromUtf8(\"pushButtonPaintImage\"))\n        self.pushButtonSaveImage = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonSaveImage.setGeometry(QtCore.QRect(450, 360, 181, 27))\n        self.pushButtonSaveImage.setObjectName(_fromUtf8(\"pushButtonSaveImage\"))\n        self.textEdit = QtGui.QTextEdit(self.centralwidget)\n        self.textEdit.setGeometry(QtCore.QRect(20, 30, 421, 391))\n        self.textEdit.setObjectName(_fromUtf8(\"textEdit\"))\n        self.widget = QtGui.QWidget(self.centralwidget)\n        self.widget.setGeometry(QtCore.QRect(520, 30, 81, 131))\n        self.widget.setObjectName(_fromUtf8(\"widget\"))\n        self.pushButtonClear = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonClear.setGeometry(QtCore.QRect(450, 270, 181, 27))\n        self.pushButtonClear.setObjectName(_fromUtf8(\"pushButtonClear\"))\n        self.pushButtonRecognizeNumber = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonRecognizeNumber.setGeometry(QtCore.QRect(450, 240, 181, 27))\n        self.pushButtonRecognizeNumber.setObjectName(_fromUtf8(\"pushButtonRecognizeNumber\"))\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtGui.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 25))\n        self.menubar.setObjectName(_fromUtf8(\"menubar\"))\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtGui.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(_fromUtf8(\"statusbar\"))\n        MainWindow.setStatusBar(self.statusbar)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"MainWindow\", None))\n        self.button_exit.setText(_translate(\"MainWindow\", \"\u30a2\u30d7\u30ea\u3092\u7d42\u4e86\u3059\u308b\", None))\n        self.pushButtonPaintImage.setText(_translate(\"MainWindow\", \"\u63cf\u753b\u753b\u9762\u3092\u8d77\u52d5\", None))\n        self.pushButtonSaveImage.setText(_translate(\"MainWindow\", \"\u63cf\u753b\u753b\u9762\u3092\u4fdd\u5b58\u3059\u308b\", None))\n        self.pushButtonClear.setText(_translate(\"MainWindow\", \"\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\", None))\n        self.pushButtonRecognizeNumber.setText(_translate(\"MainWindow\", \"\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\", None))\n\n\n\n3-3.\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u76f4\u63a5\u63cf\u753b\u3067\u304d\u308b\u753b\u9762\u3092\u4f5c\u308b\n\u3000\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bQWidget\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u305f\u63cf\u753b\u753b\u9762\u3092\u4f5c\u308b\u3002\nPyQt\u3067\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 \u305d\u306e1 (QWidget\u306b\u76f4\u63a5\u63cf\u753b\u3059\u308b)\uff1ahttp://bravo.hatenablog.jp/entry/2016/02/07/084048\n\u3000\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30ebwidget_painted.py\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\nwidget_painted.py\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nimport sys\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nimport cv2\nimport numpy\nimport pdb\nimport scipy\n\nclass PaintedWidget(QWidget):\n    def __init__(self, parent=None):\n        QWidget.__init__(self, parent)\n        self.px = None\n        self.py = None\n        self.points = []\n        self.psets = []\n        self.points_saved = []\n\n    def mousePressEvent(self, event):\n        self.points.append(event.pos())\n        self.update()\n\n    def mouseMoveEvent(self, event):\n        self.points.append(event.pos())\n        self.update()\n\n    def mouseReleaseEvent(self, event):\n        self.pressed = False\n        self.psets.append(self.points)\n        self.points_saved.extend(self.points)\n        self.points = []\n        self.update()\n\n    def paintEvent(self, event):\n        painter = QPainter(self)\n        painter.setPen(Qt.NoPen)\n        painter.setBrush(Qt.white)\n        painter.drawRect(self.rect())\n\n        painter.setPen(Qt.black)\n\n        # draw historical points\n        for points in self.psets:\n            painter.drawPolyline(*points)\n\n        # draw current points\n        if self.points:\n            painter.drawPolyline(*self.points)\n\n\n\n3-4.TensorFlow\u3092\u7528\u3044\u3066\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u308b\n\u3000double_layer_model_creator.py\u3092\u53c2\u8003\u306b\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u308b\u3002\u4f5c\u6210\u3057\u305fmnist_recognizer.py\u30e2\u30b8\u30e5\u30fc\u30eb\u306fimport\u3055\u308c\u305f\u6642\u70b9\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u4f5c\u3089\u308c\u305f\u30e2\u30c7\u30eb(ckpt\u30d5\u30a1\u30a4\u30eb)\u3092\u8aad\u307f\u8fbc\u3080\u3002\u305d\u3057\u3066\u300128*28\u753b\u50cf\u3092\u5f15\u6570\u306bmnist_recognizer()\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8b58\u3057\u305f\u6570\u5b57\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3000\u4ee5\u4e0b\u306bmnist_recognizer.py\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\nmnist_recognizer.py\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nimport tensorflow as tf\nfrom PIL import Image\nimport numpy as np\nimport cv2\n\nimport pdb\n\nsess = tf.InteractiveSession()\n\nx = tf.placeholder(tf.float32,[None,784])\nW = tf.Variable(tf.zeros([784,10]), name = \"W\")\n# b = tf.Variable(tf.zeros([10]), name = \"b\")\ny_ = tf.placeholder(tf.float32,[None,10])\n\ndef weight_variable(shape):\n    initial = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(initial)\n\ndef bias_variable(shape):\n    initial = tf.constant(0.1, shape=shape)\n    return tf.Variable(initial)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef max_pool_2x2(x):\n    return tf.nn.max_pool(x, ksize=[1,2,2,1],strides=[1,2,2,1], padding='SAME')\n\n#first layer\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\nx_image = tf.reshape(x, [-1,28,28,1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n#second layer\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n#\nW_fc1 = weight_variable([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n#Drop out\nkeep_prob = tf.placeholder(\"float\")\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\nW_fc2 = weight_variable([1024,10])\nb_fc2 = bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nsess.run(tf.initialize_all_variables())\n\nsaver = tf.train.Saver()\n\nsaver.restore(sess, \"double_layer_model.ckpt\")\n\ndef mnist_recognizer(image):\n    image = 1.0 - np.asarray(image, dtype=\"float32\") / 255\n    image = image.reshape((1,784))\n\n    answer = tf.argmax(y_conv,1)\n    result = sess.run(answer, feed_dict={x: image, keep_prob: 1.0})\n\n    return result\n\ndef close():\n    sess.close()\n\n\n\n3-5.\u3053\u308c\u307e\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3059\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\u3000\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\u300c\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u308b\u3068MainWindow\u30af\u30e9\u30b9\u306erecognize_number()\u95a2\u6570\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3002\u307e\u305a\u3001\u30da\u30a4\u30f3\u30c8\u3057\u305f\u753b\u50cf\u3092MNIST\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u3001\u7e2e\u5c0f\u3059\u308b\u524d\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u51e6\u7406\u3067\u306f\u30e2\u30c7\u30eb\u304c\u8a8d\u8b58\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u753b\u50cf\u3092\u52a0\u5de5\u3059\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u308b\u3002\u4eca\u56de\u306f\u3001\u81a8\u5f35\u51e6\u7406\u3001\u7e2e\u5c0f\u51e6\u7406\u3001\uff12\u5024\u5316\u306b\u3088\u308b\u5f37\u8abf\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\u3000\u4ee5\u4e0b\u306bmain.py\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\nmain.py\n# -*- coding: utf-8 -*-\n\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nimport sys\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport scipy\nimport deep_mnist\nimport mnist_recognizer\n\nfrom widget_painted import *\nfrom PyQt4 import QtCore, QtGui\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nfrom scipy import ndimage\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nwidth = 1200\nheight = 200\npaint_width = 360\npaint_height = 360\nmnist_width = 28\nmnist_height = 28\nmnist_size = (mnist_width, mnist_height)\n\n# 16*16\u8fd1\u508d\u306e\u5b9a\u7fa9\nkernel = np.ones((16, 16), np.uint8)\n\nclass MainWindow(QtGui.QMainWindow, deep_mnist.Ui_MainWindow):\n    def __init__(self):\n        super(self. __class__, self).__init__()\n        self.setupUi(self)\n        self.move(width,height)\n        self.textEdit.setText(\"Deep MNIST for Experts\")\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n    def paint_image(self):\n        self.textEdit.append(\"open paint window...\")\n        view_paint.show()\n\n        # TODO:Input\u753b\u50cf(28*28)\u3092\u8868\u793a\n        # view_result.show()\n\n    def saved(self):\n        self.textEdit.append(\"saving...\")\n\n        for point in view_paint.points_saved:\n            self.image[point.x(), point.y()] = 255\n\n        # \u4e0a\u4e0b\u53cd\u8ee2\n        self.image = cv2.flip(self.image, 0)\n        # \u6642\u8a08\u56de\u308a\u56de\u8ee2\n        self.image = ndimage.rotate(self.image, 270)\n        # cv2.imwrite(\"out_put.bmp\", self.image)\n        # \u81a8\u5f35\u51e6\u7406\n        image_dilation = cv2.dilate(self.image, kernel, iterations = 1)\n        cv2.imwrite(\"dilation.bmp\", image_dilation)\n        # \u7e2e\u5c0f\u51e6\u7406\n        self.mnist_image = cv2.resize(image_dilation, mnist_size)\n        cv2.imwrite(\"mnist.bmp\", self.mnist_image)\n        # 2\u5024\u5316\u3067\u5f37\u8abf\u3001BINARY_INV\u3067\u53cd\u8ee2\u3057\u3001\u767d\u80cc\u666f\u3067\u9ed2\u6587\u5b57\u306b\u3059\u308b\n        ret,thre_image = cv2.threshold(self.mnist_image, 5, 255, cv2.THRESH_BINARY_INV)\n        cv2.imwrite(\"thre_image.bmp\",thre_image)\n\n        self.textEdit.append(\"finished to save...\")\n\n    def recognize_number(self):\n        self.textEdit.append(\"saving...\")\n\n        for point in view_paint.points_saved:\n            self.image[point.x(), point.y()] = 255\n\n        # \u4e0a\u4e0b\u53cd\u8ee2\n        self.image = cv2.flip(self.image, 0)\n        # \u6642\u8a08\u56de\u308a\u56de\u8ee2\n        self.image = ndimage.rotate(self.image, 270)\n        # cv2.imwrite(\"out_put.bmp\", self.image)\n        # \u81a8\u5f35\u51e6\u7406\n        image_dilation = cv2.dilate(self.image, kernel, iterations = 1)\n        cv2.imwrite(\"dilation.bmp\", image_dilation)\n        # \u7e2e\u5c0f\u51e6\u7406\n        self.mnist_image = cv2.resize(image_dilation, mnist_size)\n        cv2.imwrite(\"mnist.bmp\", self.mnist_image)\n        # 2\u5024\u5316\u3067\u5f37\u8abf\u3001BINARY_INV\u3067\u53cd\u8ee2\u3057\u3001\u767d\u80cc\u666f\u3067\u9ed2\u6587\u5b57\u306b\u3059\u308b\n        ret,thre_image = cv2.threshold(self.mnist_image, 5, 255, cv2.THRESH_BINARY_INV)\n        cv2.imwrite(\"thre_image.bmp\",thre_image)\n\n        self.textEdit.append(\"finished to save...\")\n\n        self.textEdit.append(\"recognize...\")\n        self.textEdit.append(\"result=\")\n\n        result = mnist_recognizer.mnist_recognizer(thre_image)\n        self.textEdit.append(str(result))\n\n        # \u30b9\u30af\u30ed\u30fc\u30eb\u3092\u4e0b\u306b\u79fb\u52d5\n        self.textEdit.verticalScrollBar().triggerAction(QtGui.QAbstractSlider.SliderToMaximum)\n\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n    def clear_points(self):\n        self.textEdit.append(\"clear image...\")\n        view_paint.close()\n        view_paint.__init__()\n        view_paint.move(width,height+500)\n        view_paint.setWindowTitle(_translate(\"\", \"\u2460\u6570\u5b57\u3092\u66f8\u304f\", None))\n        view_paint.setFixedSize(QSize(360,360))\n        view_paint.show()\n\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n        self.textEdit.verticalScrollBar().triggerAction(QtGui.QAbstractSlider.SliderToMaximum)\n\n    def  quit(self):\n        print \"close...\"\n        mnist_recognizer.close()\n\nif __name__ == \"__main__\":\n    app = QtGui.QApplication(sys.argv)\n    form = MainWindow()\n    form.show()\n    view_paint = PaintedWidget()\n    view_paint.move(width,height+500)\n    view_paint.setWindowTitle(_translate(\"\", \"\u2460\u6570\u5b57\u3092\u66f8\u304f\", None))\n    view_paint.setFixedSize(QSize(360,360))\n    view_result = QWidget()\n    view_result.move(width+360,height+500)\n    view_result.setWindowTitle(_translate(\"\", \"MNIST\u7528\u753b\u50cf\u306b\u5909\u63db\", None))\n    view_result.setFixedSize(QSize(mnist_width,mnist_height))\n\n    form.pushButtonPaintImage.clicked.connect(lambda: form.paint_image())\n    form.pushButtonSaveImage.clicked.connect(lambda: form.saved())\n    form.pushButtonRecognizeNumber.clicked.connect(lambda: form.recognize_number())\n    form.pushButtonClear.clicked.connect(lambda: form.clear_points())\n    form.button_exit.clicked.connect(app.quit)\n    form.button_exit.clicked.connect(lambda: form.quit())\n\n    app.exec_()\n\n\n\n3-3.\u5b9f\u884c\u3057\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\u3000\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\u3000sudo python main.py\n\uff14\uff0e\u5b9f\u9a13\n\u3000\u5b9f\u969b\u306b1\u304b\u30895\u307e\u3067\u306e\u6570\u5b57\u3092\u5165\u308c\u3066\u8a8d\u8b58\u3055\u305b\u308b\u3002\n\n\u56f3\uff12 \u5b9f\u9a13\u7d50\u679c\n\u3000\u6982\u306d\u6b63\u89e3\u3068\u3044\u3046\u3068\u3053\u308d\u3002\n\u3000\u5931\u6557\u304c\u3042\u308b\u3082\u306e\u3082\u4f8b\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u30028\u30019\u30010\u3042\u305f\u308a\u306e\u8a8d\u8b58\u7387\u304c\u4ed6\u306e\u6570\u5b57\u3088\u308a\u3082\u4f4e\u3044\u6c17\u304c\u3059\u308b\u3002\n\n\u56f3\uff13 \u5931\u6557\u4f8b\n\uff15\uff0e\u8003\u5bdf\n\u3000\u4ee5\u4e0a\u306e\u7d50\u679c\u3092\u8e0f\u307e\u3048\u3066\u3001\u6c17\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3084\u6539\u5584\u3057\u305f\u3044\u70b9\u306a\u3069\u3092\u8003\u5bdf\u3059\u308b\u3002\n5-1.\u5229\u70b9\u3068\u6b20\u70b9\n\u3000\u307e\u305a\u306f\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u5229\u70b9\u3068\u6b20\u70b9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\u5229\u70b9\uff1a\n\u25a0\u898b\u305f\u76ee\u306b\u308f\u304b\u308a\u3084\u3059\u3044\n\u25a0\u4f5c\u308b\u306e\u304c\u697d\u3057\u304b\u3063\u305f\u3001GUI\u6700\u9ad8\u3002\n\u25a0\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u65e9\u3044\n\u25a0OSX\u3067\u3082\u52d5\u3044\u305f\n\u3000\u30fc\u305f\u3060\u3057\u3001\u305d\u308c\u306a\u308a\u306b\u74b0\u5883\u3092\u6574\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\u6b20\u70b9\uff1a\n\u25a0\u958b\u767a\u74b0\u5883\u6574\u3048\u308b\u306e\u306f\u9762\u5012\n\u3000\u30fc\u3067\u3082Ubuntu\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u3082\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u3068\u601d\u3046\u3002Ubuntu\u6700\u9ad8\u3002\n\u25a0\u9069\u5b9c\u5b66\u7fd2\u306f\u3057\u306a\u3044\n\u3000\u30fc\u9593\u9055\u3048\u305f\u6642\u306b\u5b66\u7fd2\u3055\u305b\u308b\u3068\u304b\u3059\u308b\u3068\u3044\u3044\u304b\u3082\n\u25a0Windows\u3067\u52d5\u304f\u306e\u304b\uff1f\n\u3000\u30fc\u77e5\u308a\u307e\u305b\u3093\n\u3000\u30fc\u307f\u3093\u306a\u306b\u8a66\u3057\u3066\u3082\u3089\u3046\u306a\u3089Web\u30a2\u30d7\u30ea\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\n5-2.\u6c17\u306b\u306a\u3063\u305f\u70b9\n\u3000\u3053\u306e\u30a2\u30d7\u30ea\u3092\u52d5\u304b\u3057\u3066\u307f\u3066\u6c17\u306b\u306a\u3063\u305f\u70b9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\u25a0\u8a8d\u8b58\u3057\u306b\u304f\u3044\u6570\u5b57\n\u3000\u30fc0\u3092\u8a8d\u8b58\u3057\u306b\u304f\u3044\n\u3000\u3000\u30fb\u610f\u5916\u306b\u30820\u306e\u8a8d\u8b58\u7387\u304c\u4f4e\u3044\u3088\u3046\u306b\u611f\u3058\u305f\n\u3000\u3000\u3000\u30fc\u5358\u7d14\u3059\u304e\u3066\u7279\u5fb4\u304c\u5c11\u306a\u3044\u304b\u3089\uff1f\n\u3000\u30fc9\u306f\u66f8\u304d\u9806\u3067\u8a8d\u8b58\u7387\u304c\u9055\u3046\u3088\u3046\u306b\u611f\u3058\u305f\n\u3000\u3000\u30fb\u56f3\uff13\u306e\u6210\u529f\u4f8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u66f8\u304f\u3068\u8a8d\u8b58\u3057\u3084\u3059\u3044\n\u3000\u3000\u30fb\u56f3\uff13\u306e\u5931\u6557\u4f8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u66f8\u304f\u3068\u8a8d\u8b58\u3057\u3065\u3089\u3044\n\u3000\u3000\u3000\u30fcMNIST\u306e9\u306e\u66f8\u304d\u9806\u304c\u524d\u8005\u306e\u307b\u3046\u304c\u591a\u3044\u304b\u3089\u3060\u308d\u3046\u304b\n\u3000\u3000\u3000\u3000\u30fb\u5143\u30c7\u30fc\u30bf\u3092\u773a\u3081\u3066\u307f\u306a\u304d\u3083\u304b\u3041...\n\u3000\u30fc8,6\u306a\u3069\n\u3000\u3000\u30fb\u4e88\u60f3\u901a\u308a\u8a8d\u8b58\u3057\u3065\u3089\u3044\n\u3000\u3000\u3000\u30fc8\u306f\u8907\u96d1\n\u3000\u3000\u3000\u30fc6\u306f\u4e38\u304c\u3042\u308b\u3068\u3044\u3046\u70b9\u30670\u306b\u30828\u306b\u3082\u4f3c\u3066\u3044\u308b\u3001\u307f\u3088\u3046\u306b\u3088\u3063\u3066\u306f5\u306b\u3082\u4f3c\u3066\u3044\u308b\n\u25a0\u8a8d\u8b58\u3057\u3084\u3059\u3044\u6570\u5b57\n\u3000\u30fc\uff12\u3001\uff13\n\u3000\u3000\u30fb\u6b63\u7b54\u7387\u9ad8\u3044\u5370\u8c61\n\uff16\uff0e\u307e\u3068\u3081\n\u3000TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u81ea\u5206\u306e\u66f8\u3044\u305f\u6570\u5b57\u3067\u8a66\u3059GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u305f\u3002\n\u3000\u3084\u3063\u3071\u308a\u81ea\u5206\u3067\u66f8\u3044\u305f\u6570\u5b57\u3060\u3068\u8a8d\u8b58\u7387\u304c\u4e0b\u304c\u308b\u3002\u3067\u3082\u3001\u3053\u3093\u306a\u306b\u7c21\u5358\u306b\u4f5c\u308c\u308b\u8b58\u5225\u5668\u3067\u3053\u306e\u30ec\u30d9\u30eb\u306e\u3082\u306e\u306f\u306a\u304b\u306a\u304b\u306a\u3044\u306e\u304b\u306a\u30fc\u3068\u3082\u601d\u3063\u305f\u308a\u3002\n\u3000\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u306a\u3093\u3061\u3083\u3089\u3092\u5c11\u3057\u52c9\u5f37\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u30b3\u30fc\u30c9\u306b\u306a\u3093\u3068\u306a\u304fTensorFlow\u3068\u540c\u3058Apache 2.0\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u8a18\u8ff0\u3092\u3057\u3066\u307f\u305f\u3002\u30e9\u30a4\u30bb\u30f3\u30b9\u8a18\u8ff0\u65b9\u6cd5\u306e\u52c9\u5f37\u306b\u306a\u3063\u305f\u3002\n\u3000\u3053\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3001TensorFlow\u3068\u3044\u3046\u3088\u308a\u3001Linux\u958b\u767a\u74b0\u5883\u5468\u308a\u306b\u5f37\u304f\u306a\u3063\u305f\u3068\u611f\u3058\u3066\u3044\u308b\u3002\u4eca\u5f8c\u3001Python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a66\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3068\u304d\u306fGUI\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\u3000\u6b21\u306f\u81ea\u5206\u3067TensorFlow\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066GUI\u306b\u5b9f\u88c5\u3057\u305f\u3044\u3002\u9854\u8a8d\u8b58\u306a\u3069\u306e\u753b\u50cf\u51e6\u7406\u3068\u304b\u3001\u97f3\u97ff\u51e6\u7406\u304c\u3084\u308a\u305f\u3044\u3002\n\u4ee5\u4e0a\n![result.gif](https://qiita-image-store.s3.amazonaws.com/0/131965/d33914e4-24b5-1d31-8e78-9dc10836256b.gif)\n\n\n\n\u4ee5\u4e0b\u306e\u3053\u3068\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3002\n\n\u2460TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u81ea\u5206\u306e\u66f8\u3044\u305f\u6570\u5b57\u3067\u8a66\u3059\u65b9\u6cd5\n\u2461Windows7\u3060\u3051\u3069Linux(Ubuntu)\u3067TensorFlow\u306e\u958b\u767a\u3092\u3059\u308b\u65b9\u6cd5\n\u3000\u30fcTensorFlow\u306fUbuntu\u3067\u958b\u767a\u3057\u305f\u307b\u3046\u304c\u3044\u308d\u3044\u308d\u826f\u3044\u70b9\u304c\u3042\u308b\u306a\u30fc\u3068\u601d\u3063\u305f\n\u3000\u3000\u30fbGUI\u5468\u308a\u304c\u3057\u3063\u304b\u308a\u3068\u4f5c\u308a\u3053\u307e\u308c\u3066\u3044\u308b\n\u3000\u3000\u3000\u30fcTensorBoard\uff08\u30b0\u30e9\u30d5\u306e\u53ef\u8996\u5316\u6a5f\u80fd\uff09\u304c\u7c21\u5358\u306b\u4f7f\u3048\u308b\n\u3000\u3000\u3000\u30fcGUI\u30a2\u30d7\u30ea\u958b\u767a\u304c\u7c21\u5358\n\u3000\u3000\u30fbapt-get\u3067\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u3092\u7c21\u5358\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b\n\u3000\u3000\u3000\u30fc\u5143\u3005Ubuntu\u306e\u6a5f\u80fd\u3067\u3042\u308b\u3060\u3051\u3042\u3063\u3066\u3064\u307e\u3065\u304f\u3053\u3068\u304c\u5c11\u306a\u3044\n\u3000\u3000\u30fbPython\u3067\u97f3\u3092\u51fa\u305b\u308b\n\u3000\u3000\u3000\u30fc\u3053\u308c\u3067\u97f3\u58f0\u51e6\u7406\u304c\u306f\u304b\u3069\u308b\n\u3000\u3000\u3000\u30fcPyAudio\u3092\u4f7f\u3046\n\u3000\u3000\u3000\u30fcWindow\u306eDocker\u74b0\u5883\u3067\u97f3\u51fa\u3059\u306e\u306f\u3042\u304d\u3089\u3081\u307e\u3057\u305f\n\u3000\u30fc\u3053\u306e\u6a5f\u4f1a\u306bWindows7\u3068Ubuntu\u306e\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\u2462Linux\u3067GUI\u958b\u767a\u3092\u3059\u308b\u65b9\u6cd5\n\u3000\u30fc\u30b3\u30de\u30f3\u30c9\u3067\u7d50\u679c\u898b\u305b\u3089\u308c\u3066\u3082\u6df1\u5c64\u5b66\u7fd2\u306e\u51c4\u3055\u304c\u4f1d\u308f\u308a\u3065\u3089\u3044\n\u3000\u30fc\u308f\u304b\u308a\u3084\u3059\u3044GUI\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\n\n\u958b\u767a\u74b0\u5883(Ubuntu)\uff1a\nOS:Ubuntu 16.04 LTS 64bit\nCPU:Core i7-5500U @ 2.40GHz \u00d7 4\nGPU:\u6a19\u6e96Intel HD Graphics 5500\n\u30e1\u30e2\u30ea:8GB\n\u8a00\u8a9e:Python 2.7.12\n\n\u4ee5\u4e0b\u306e\u69cb\u6210\u3067\u8a18\u8ff0\u3059\u308b\u3002\n\n\uff11\uff0e\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9\n\uff12\uff0e\u6210\u679c\u7269\n\uff13\uff0e\u65b9\u6cd5\u306e\u89e3\u8aac\n\uff14\uff0e\u5b9f\u9a13\n\uff15\uff0e\u8003\u5bdf\n\uff16\uff0e\u307e\u3068\u3081\n\n\n\uff11\uff0e\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n1-1.Windows7\u3068Ubuntu\u306e\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u74b0\u5883\u3092\u69cb\u7bc9\n\u3000Windows7\u306bUbuntu\u3092\u30c7\u30e5\u30a2\u30eb\u30d6\u30fc\u30c8\u3067\u5165\u308c\u308b\u306b\u306fWubi\u3068\u3044\u3046\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u3060\u3002Wubi\u306fWindows\u30e6\u30fc\u30b6\u306e\u305f\u3081\u306eUbuntu\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3067\u3042\u308b\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u4ed6\u306eWindows\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u3058\u3088\u3046\u306bUbuntu\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u308a\u3001\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u304a\u307e\u3051\u306bWindows\u3068\u306e\u5171\u6709\u30d5\u30a9\u30eb\u30c0\u3082\u3042\u3063\u3066\u4fbf\u5229\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttps://wiki.ubuntulinux.jp/UbuntuTips/Install/WubiGuide\n\n1-2.TensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000Python\u306f\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bTensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\u4eca\u56deGPU\u306f\u4f7f\u308f\u305a\u306bCPU\u306e\u307f\u306e\u65b9\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttp://qiita.com/yudsuzuk/items/092c38fee18e4484ece9\n\n\u3000\u4f1a\u793e\u306ePC\u306a\u3069\u306e\u5834\u5408\u3001\u6bce\u5ea6\u306e\u3053\u3068\u3060\u304c\u3001\u3053\u306e\u8fba\u304b\u3089\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u3067\u3064\u307e\u3065\u304f\u3053\u3068\u306b\u306a\u308b\u3002\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u8a2d\u5b9a\u3059\u308b\u3002export\u3059\u308b\u3068\u304b\u3001sudo\u306e\u3042\u3068\u306b-E\u3064\u3051\u308b\u3068\u304b\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\uff1ahttp://qiita.com/showsuzu/items/9ee031208d38ff8ac889\n\n\u3000Ubuntu\u306eSystem Settings\u753b\u9762\u3067\u306e\u30d7\u30ed\u30ad\u30b7\u306e\u8a2d\u5b9a\u3082\u3059\u308b\u3002\n\n1-3.\u305d\u306e\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092apt-get\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\u52a0\u3048\u3066\u3001\u5f8c\u3067\u4f7f\u3044\u305d\u3046\u306a\u306e\u3067\u5165\u308c\u3066\u304a\u304f\u3082\u306e\u3084\u3001\u6700\u521d\u304b\u3089\u5165\u3063\u3066\u308b\u304c\u4e00\u5fdc\u78ba\u304b\u3081\u3066\u304a\u304f\u3082\u306e\u3082\u793a\u3059\u3002(\u3053\u308c\u3067\u5168\u90e8\u3060\u3068\u3044\u3044\u3051\u3069...)\n\nsudo apt-get install libopencv-dev\nsudo apt-get install python-opencv\nsudo apt-get install python-scipy\nsudo apt-get install python-matplotlib\nsudo apt-get install python-numpy\n\n1-4.GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30c4\u30fc\u30eb\n\u3000PyQt4\u3068GUI\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30ebQt Designer\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u74b0\u5883\u3092\u6574\u3048\u308b\u3002\n\nsudo apt-get install python-qt4\nsudo apt-get install qt4-designer\n\n\uff12\uff0e\u6210\u679c\u7269\n\u3000\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fGitHub\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u3044\u308b\u3002git\u3092\u4f7f\u3048\u308b\u4eba\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\n\nsudo git clone https://github.com/jintaka1989/DeepMnistGuiApp.git\n\n\u3000Ubuntu\u3068OSX\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u305f\u3002\u305f\u3060\u3057\u3001OSX\u306f\u4e0a\u8a18\u306e\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u5c11\u3005\u624b\u9593\u53d6\u3063\u305f\u3002apt-get\u304c\u306a\u3044\u306e\u3067brew\u3068\u304bpip\u306a\u3069\u3092\u4f7f\u3063\u305f\u3002\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u3060\u3051\u306a\u3089qt4-designer\u306f\u5fc5\u8981\u306a\u3044\u3002\u6c17\u304c\u5411\u3044\u305f\u3089OSX\u7528\u306b\u5225\u306b\u8aac\u660e\u3092\u3059\u308b\u3002\n\n\u3000\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u7d50\u679c\u3092\u56f3\uff11\u306b\u793a\u3059\u3002\n\n![image000.png](https://qiita-image-store.s3.amazonaws.com/0/131965/f6c57560-fc1e-741e-4649-a3395105eb26.png)\n\u56f3\uff11\u3000DeepMnistGuiApp\u306e\u5b9f\u884c\u7d50\u679c\n\n2-1.\u52d5\u4f5c\u306e\u8aac\u660e\n\u3000\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n\u3000sudo python main.py\n\n\u3000a.\u300c\u63cf\u753b\u753b\u9762\u3092\u8d77\u52d5\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\n\u3000b.\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u306b\u30de\u30a6\u30b9\u3067\u6570\u5b57\u3092\u66f8\u304f\n\n\u3000c.\u300c\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u63cf\u753b\u753b\u9762\u3068\u8a8d\u8b58\u306e\u305f\u3081\u3092\u306e\u524d\u51e6\u7406\u306e\u7d50\u679c\u306e\u753b\u50cf\u304c\u4fdd\u5b58\u3055\u308c\u308b\n\u3000\u3000\u30fb\u5de6\u5074\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u624b\u66f8\u304d\u6570\u5b57\u3092\u8a8d\u8b58\u3057\u305f\u7d50\u679c(0~9)\u304c\u8868\u793a\u3055\u308c\u308b\n\n\u3000d.\u300c\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u30af\u30ea\u30a2\u3055\u308c\u308b\n\u3000\u3000\u30fb\u300c\u2460\u6570\u5b57\u3092\u66f8\u304f\u300d\u753b\u9762\u304c\u518d\u8868\u793a\u3055\u308c\u308b\n\u3000\u3000\u30fb(b.\u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b)\n\n\u3000e.\u300c\u63cf\u753b\u753b\u9762\u3092\u4fdd\u5b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fb\u63cf\u753b\u753b\u9762\u3068\u8a8d\u8b58\u306e\u305f\u3081\u306e\u524d\u51e6\u7406\u306e\u7d50\u679c\u306e\u753b\u50cf\u304c\u4fdd\u5b58\u3055\u308c\u308b\n\n\u3000f.\u300c\u30a2\u30d7\u30ea\u3092\u7d42\u4e86\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\u3000\u3000\u30fbTensorFlow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u9589\u3058\u3089\u308c\u308b\n\u3000\u3000\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3059\u308b\n\n2-2.\u6ce8\u610f\u4e8b\u9805\n\n\u30002-2-1.\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\n\u3000\u3000\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u305f\u3073\u306b\u6a5f\u68b0\u5b66\u7fd2\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3042\u3089\u304b\u3058\u308110000step\u307b\u3069\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u5b66\u7fd2\u3057\u306a\u304c\u3089\u3060\u3068\u51e6\u7406\u304c\u91cd\u3044\u305f\u3081\u3067\u3042\u308b\u3002\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u300cdouble_layer_model_creator.py\u300d\u3067\u3042\u308b\u300220000step\u306e\u5b66\u7fd2\u306a\u3069\u3092\u3057\u3066\u3082\u3063\u3068\u7cbe\u5ea6\u3092\u9ad8\u3081\u305f\u3044\u5834\u5408\u306f\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066ckpt\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3002\n\u3000\u300010000step\u307b\u3069\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306e\u8a8d\u8b58\u7387\u306fMNIST\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306799.11%\u3060\u304c\u3001\u81ea\u5206\u306e\u66f8\u3044\u305f\u6587\u5b57\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u3084\u306f\u308a\u8a8d\u8b58\u7387\u304c\u4f4e\u304f\u306a\u308b\u3088\u3046\u3060\u3002\n\n\u30002-2-2.\u67a0\u3092\u306f\u307f\u51fa\u308b\u3068\u30c0\u30e1\n\u3000\u3000\u67a0\u3092\u306f\u307f\u51fa\u3066\u6570\u5b57\u3092\u66f8\u304f\u3068\u30a8\u30e9\u30fc\u306a\u306e\u3067\u300c\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u66f8\u304d\u76f4\u3059\u3002\n\n\uff13\uff0e\u65b9\u6cd5\u306e\u89e3\u8aac\n\n3-1.\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\n\u3000TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u53c2\u8003\u306bdouble_layer_model_creator.py\u3092\u4f5c\u6210\u3057\u305f\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308bckpt\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n```py:double_layer_model_creator.py\n#from __future__ import absolute_import, unicode_literals\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nimport tensorflow as tf\n\nsess = tf.InteractiveSession()\n\nx = tf.placeholder(tf.float32,[None,784])\nW = tf.Variable(tf.zeros([784,10]), name = \"W\")\n# b = tf.Variable(tf.zeros([10]), name = \"b\")\ny_ = tf.placeholder(tf.float32,[None,10])\n#sess.run(tf.initialize_all_variables())\n# y = tf.nn.softmax(tf.matmul(x,W)+b)\n# cross_entropy = -tf.reduce_sum(y_*tf.log(y))\n#\n# train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n\n#for i in range(1000):\n   #batch = mnist.train.next_batch(50)\n   #train_step.run(feed_dict={x: batch[0], y_: batch[1]})\n   ##print tf.argmax(y, 1)\n\n#correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(y_,1))\n#accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\n#print accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels})\n\ndef weight_variable(shape):\n\tinitial = tf.truncated_normal(shape, stddev=0.1)\n\treturn tf.Variable(initial)\n\ndef bias_variable(shape):\n\tinitial = tf.constant(0.1, shape=shape)\n\treturn tf.Variable(initial)\n\ndef conv2d(x, W):\n\treturn tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef max_pool_2x2(x):\n\treturn tf.nn.max_pool(x, ksize=[1,2,2,1],strides=[1,2,2,1], padding='SAME')\n\n#first layer\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\nx_image = tf.reshape(x, [-1,28,28,1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n#second layer\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n#\nW_fc1 = weight_variable([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n#Drop out\nkeep_prob = tf.placeholder(\"float\")\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\nW_fc2 = weight_variable([1024,10])\nb_fc2 = bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nsaver = tf.train.Saver()\n\nsess.run(tf.initialize_all_variables())\n#original = 20000\nfor i in range(20000):\n\tbatch = mnist.train.next_batch(50)\n\tif i%100 == 0:\n\t\ttrain_accuracy = accuracy.eval(feed_dict={\n\t\t\tx:batch[0], y_: batch[1], keep_prob: 1.0})\n\t\tprint \"step %d, training accuracy %g\"%(i, train_accuracy)\n\ttrain_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\nprint \"test accuracy %g\"%accuracy.eval(feed_dict={\n\tx: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n\nsaver.save(sess, \"double_layer_model.ckpt\")\n\nsess.close()\n\n```\n\n3-2.\u753b\u9762\u3092\u4f5c\u308b\n\u3000PyQt4\u3068Qt Desingner\u3092\u4f7f\u3063\u3066\u753b\u9762\u3092\u4f5c\u308b\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\npython + PyQt4 + Qt Designer\u3067GUI\u30a2\u30d7\u30ea\uff1ahttp://domnikki.hateblo.jp/entry/2016/04/07/005006\n\n\u3000\u753b\u9762deep_minist.ui\u3092\u4f5c\u3063\u305f\u3042\u3068\u3001convert_qt.py\u3092\u5b9f\u884c\u3057\u3066\u3001deep_mnist.py\u3092\u751f\u6210\u3057\u3001Python\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n```py:convert_qt.py\n# -*- coding: utf-8 -*-\nfrom PyQt4 import uic\n\nfin = open('deep_mnist.ui', 'r')\nfout = open('deep_mnist.py', 'w')\nuic.compileUi(fin,fout,execute=False)\nfin.close()\nfout.close()\n```\n\n\n```py:deep_mnist.py\n# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'deep_mnist.ui'\n#\n# Created by: PyQt4 UI code generator 4.11.4\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt4 import QtCore, QtGui\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(_fromUtf8(\"MainWindow\"))\n        MainWindow.resize(640, 480)\n        self.centralwidget = QtGui.QWidget(MainWindow)\n        self.centralwidget.setObjectName(_fromUtf8(\"centralwidget\"))\n        self.button_exit = QtGui.QPushButton(self.centralwidget)\n        self.button_exit.setGeometry(QtCore.QRect(450, 390, 181, 27))\n        self.button_exit.setObjectName(_fromUtf8(\"button_exit\"))\n        self.pushButtonPaintImage = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonPaintImage.setGeometry(QtCore.QRect(450, 170, 181, 27))\n        self.pushButtonPaintImage.setObjectName(_fromUtf8(\"pushButtonPaintImage\"))\n        self.pushButtonSaveImage = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonSaveImage.setGeometry(QtCore.QRect(450, 360, 181, 27))\n        self.pushButtonSaveImage.setObjectName(_fromUtf8(\"pushButtonSaveImage\"))\n        self.textEdit = QtGui.QTextEdit(self.centralwidget)\n        self.textEdit.setGeometry(QtCore.QRect(20, 30, 421, 391))\n        self.textEdit.setObjectName(_fromUtf8(\"textEdit\"))\n        self.widget = QtGui.QWidget(self.centralwidget)\n        self.widget.setGeometry(QtCore.QRect(520, 30, 81, 131))\n        self.widget.setObjectName(_fromUtf8(\"widget\"))\n        self.pushButtonClear = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonClear.setGeometry(QtCore.QRect(450, 270, 181, 27))\n        self.pushButtonClear.setObjectName(_fromUtf8(\"pushButtonClear\"))\n        self.pushButtonRecognizeNumber = QtGui.QPushButton(self.centralwidget)\n        self.pushButtonRecognizeNumber.setGeometry(QtCore.QRect(450, 240, 181, 27))\n        self.pushButtonRecognizeNumber.setObjectName(_fromUtf8(\"pushButtonRecognizeNumber\"))\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtGui.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 25))\n        self.menubar.setObjectName(_fromUtf8(\"menubar\"))\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtGui.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(_fromUtf8(\"statusbar\"))\n        MainWindow.setStatusBar(self.statusbar)\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"MainWindow\", None))\n        self.button_exit.setText(_translate(\"MainWindow\", \"\u30a2\u30d7\u30ea\u3092\u7d42\u4e86\u3059\u308b\", None))\n        self.pushButtonPaintImage.setText(_translate(\"MainWindow\", \"\u63cf\u753b\u753b\u9762\u3092\u8d77\u52d5\", None))\n        self.pushButtonSaveImage.setText(_translate(\"MainWindow\", \"\u63cf\u753b\u753b\u9762\u3092\u4fdd\u5b58\u3059\u308b\", None))\n        self.pushButtonClear.setText(_translate(\"MainWindow\", \"\u2462\u63cf\u753b\u3092\u30af\u30ea\u30a2\u3059\u308b\", None))\n        self.pushButtonRecognizeNumber.setText(_translate(\"MainWindow\", \"\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\", None))\n\n```\n\n3-3.\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u76f4\u63a5\u63cf\u753b\u3067\u304d\u308b\u753b\u9762\u3092\u4f5c\u308b\n\u3000\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bQWidget\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u305f\u63cf\u753b\u753b\u9762\u3092\u4f5c\u308b\u3002\n\nPyQt\u3067\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9 \u305d\u306e1 (QWidget\u306b\u76f4\u63a5\u63cf\u753b\u3059\u308b)\uff1ahttp://bravo.hatenablog.jp/entry/2016/02/07/084048\n\n\u3000\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30ebwidget_painted.py\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n```py:widget_painted.py\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nimport sys\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nimport cv2\nimport numpy\nimport pdb\nimport scipy\n\nclass PaintedWidget(QWidget):\n    def __init__(self, parent=None):\n        QWidget.__init__(self, parent)\n        self.px = None\n        self.py = None\n        self.points = []\n        self.psets = []\n        self.points_saved = []\n\n    def mousePressEvent(self, event):\n        self.points.append(event.pos())\n        self.update()\n\n    def mouseMoveEvent(self, event):\n        self.points.append(event.pos())\n        self.update()\n\n    def mouseReleaseEvent(self, event):\n        self.pressed = False\n        self.psets.append(self.points)\n        self.points_saved.extend(self.points)\n        self.points = []\n        self.update()\n\n    def paintEvent(self, event):\n        painter = QPainter(self)\n        painter.setPen(Qt.NoPen)\n        painter.setBrush(Qt.white)\n        painter.drawRect(self.rect())\n\n        painter.setPen(Qt.black)\n\n        # draw historical points\n        for points in self.psets:\n            painter.drawPolyline(*points)\n\n        # draw current points\n        if self.points:\n            painter.drawPolyline(*self.points)\n\n```\n\n3-4.TensorFlow\u3092\u7528\u3044\u3066\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u308b\n\u3000double_layer_model_creator.py\u3092\u53c2\u8003\u306b\u624b\u66f8\u304d\u6570\u5b57\u306e\u8a8d\u8b58\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u308b\u3002\u4f5c\u6210\u3057\u305fmnist_recognizer.py\u30e2\u30b8\u30e5\u30fc\u30eb\u306fimport\u3055\u308c\u305f\u6642\u70b9\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u4f5c\u3089\u308c\u305f\u30e2\u30c7\u30eb(ckpt\u30d5\u30a1\u30a4\u30eb)\u3092\u8aad\u307f\u8fbc\u3080\u3002\u305d\u3057\u3066\u300128*28\u753b\u50cf\u3092\u5f15\u6570\u306bmnist_recognizer()\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u8a8d\u8b58\u3057\u305f\u6570\u5b57\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3000\u4ee5\u4e0b\u306bmnist_recognizer.py\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\n```py:mnist_recognizer.py\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nimport tensorflow as tf\nfrom PIL import Image\nimport numpy as np\nimport cv2\n\nimport pdb\n\nsess = tf.InteractiveSession()\n\nx = tf.placeholder(tf.float32,[None,784])\nW = tf.Variable(tf.zeros([784,10]), name = \"W\")\n# b = tf.Variable(tf.zeros([10]), name = \"b\")\ny_ = tf.placeholder(tf.float32,[None,10])\n\ndef weight_variable(shape):\n\tinitial = tf.truncated_normal(shape, stddev=0.1)\n\treturn tf.Variable(initial)\n\ndef bias_variable(shape):\n\tinitial = tf.constant(0.1, shape=shape)\n\treturn tf.Variable(initial)\n\ndef conv2d(x, W):\n\treturn tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef max_pool_2x2(x):\n\treturn tf.nn.max_pool(x, ksize=[1,2,2,1],strides=[1,2,2,1], padding='SAME')\n\n#first layer\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\nx_image = tf.reshape(x, [-1,28,28,1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\n#second layer\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\n#\nW_fc1 = weight_variable([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n#Drop out\nkeep_prob = tf.placeholder(\"float\")\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\nW_fc2 = weight_variable([1024,10])\nb_fc2 = bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nsess.run(tf.initialize_all_variables())\n\nsaver = tf.train.Saver()\n\nsaver.restore(sess, \"double_layer_model.ckpt\")\n\ndef mnist_recognizer(image):\n\timage = 1.0 - np.asarray(image, dtype=\"float32\") / 255\n\timage = image.reshape((1,784))\n\n\tanswer = tf.argmax(y_conv,1)\n\tresult = sess.run(answer, feed_dict={x: image, keep_prob: 1.0})\n\n\treturn result\n\ndef close():\n\tsess.close()\n\n```\n\n3-5.\u3053\u308c\u307e\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3059\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\u3000\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\u300c\u2461\u6570\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u300d\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u308b\u3068MainWindow\u30af\u30e9\u30b9\u306erecognize_number()\u95a2\u6570\u306e\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3002\u307e\u305a\u3001\u30da\u30a4\u30f3\u30c8\u3057\u305f\u753b\u50cf\u3092MNIST\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u3001\u7e2e\u5c0f\u3059\u308b\u524d\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u51e6\u7406\u3067\u306f\u30e2\u30c7\u30eb\u304c\u8a8d\u8b58\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u753b\u50cf\u3092\u52a0\u5de5\u3059\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u308b\u3002\u4eca\u56de\u306f\u3001\u81a8\u5f35\u51e6\u7406\u3001\u7e2e\u5c0f\u51e6\u7406\u3001\uff12\u5024\u5316\u306b\u3088\u308b\u5f37\u8abf\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\u3000\u4ee5\u4e0b\u306bmain.py\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3002\n\n```py:main.py\n# -*- coding: utf-8 -*-\n\n   # Copyright 2016 Satoshi TAKAGI <jintaka198912@gmail.com>\n   #\n   # Licensed under the Apache License, Version 2.0 (the \"License\");\n   # you may not use this file except in compliance with the License.\n   # You may obtain a copy of the License at\n   #\n   #     http://www.apache.org/licenses/LICENSE-2.0\n   #\n   # Unless required by applicable law or agreed to in writing, software\n   # distributed under the License is distributed on an \"AS IS\" BASIS,\n   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   # See the License for the specific language governing permissions and\n   # limitations under the License.\n\nimport sys\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport scipy\nimport deep_mnist\nimport mnist_recognizer\n\nfrom widget_painted import *\nfrom PyQt4 import QtCore, QtGui\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nfrom scipy import ndimage\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nwidth = 1200\nheight = 200\npaint_width = 360\npaint_height = 360\nmnist_width = 28\nmnist_height = 28\nmnist_size = (mnist_width, mnist_height)\n\n# 16*16\u8fd1\u508d\u306e\u5b9a\u7fa9\nkernel = np.ones((16, 16), np.uint8)\n\nclass MainWindow(QtGui.QMainWindow, deep_mnist.Ui_MainWindow):\n    def __init__(self):\n        super(self. __class__, self).__init__()\n        self.setupUi(self)\n        self.move(width,height)\n        self.textEdit.setText(\"Deep MNIST for Experts\")\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n    def paint_image(self):\n        self.textEdit.append(\"open paint window...\")\n        view_paint.show()\n\n        # TODO:Input\u753b\u50cf(28*28)\u3092\u8868\u793a\n        # view_result.show()\n\n    def saved(self):\n        self.textEdit.append(\"saving...\")\n\n        for point in view_paint.points_saved:\n            self.image[point.x(), point.y()] = 255\n\n        # \u4e0a\u4e0b\u53cd\u8ee2\n        self.image = cv2.flip(self.image, 0)\n        # \u6642\u8a08\u56de\u308a\u56de\u8ee2\n        self.image = ndimage.rotate(self.image, 270)\n        # cv2.imwrite(\"out_put.bmp\", self.image)\n        # \u81a8\u5f35\u51e6\u7406\n        image_dilation = cv2.dilate(self.image, kernel, iterations = 1)\n        cv2.imwrite(\"dilation.bmp\", image_dilation)\n        # \u7e2e\u5c0f\u51e6\u7406\n        self.mnist_image = cv2.resize(image_dilation, mnist_size)\n        cv2.imwrite(\"mnist.bmp\", self.mnist_image)\n        # 2\u5024\u5316\u3067\u5f37\u8abf\u3001BINARY_INV\u3067\u53cd\u8ee2\u3057\u3001\u767d\u80cc\u666f\u3067\u9ed2\u6587\u5b57\u306b\u3059\u308b\n        ret,thre_image = cv2.threshold(self.mnist_image, 5, 255, cv2.THRESH_BINARY_INV)\n        cv2.imwrite(\"thre_image.bmp\",thre_image)\n\n        self.textEdit.append(\"finished to save...\")\n\n    def recognize_number(self):\n        self.textEdit.append(\"saving...\")\n\n        for point in view_paint.points_saved:\n            self.image[point.x(), point.y()] = 255\n\n        # \u4e0a\u4e0b\u53cd\u8ee2\n        self.image = cv2.flip(self.image, 0)\n        # \u6642\u8a08\u56de\u308a\u56de\u8ee2\n        self.image = ndimage.rotate(self.image, 270)\n        # cv2.imwrite(\"out_put.bmp\", self.image)\n        # \u81a8\u5f35\u51e6\u7406\n        image_dilation = cv2.dilate(self.image, kernel, iterations = 1)\n        cv2.imwrite(\"dilation.bmp\", image_dilation)\n        # \u7e2e\u5c0f\u51e6\u7406\n        self.mnist_image = cv2.resize(image_dilation, mnist_size)\n        cv2.imwrite(\"mnist.bmp\", self.mnist_image)\n        # 2\u5024\u5316\u3067\u5f37\u8abf\u3001BINARY_INV\u3067\u53cd\u8ee2\u3057\u3001\u767d\u80cc\u666f\u3067\u9ed2\u6587\u5b57\u306b\u3059\u308b\n        ret,thre_image = cv2.threshold(self.mnist_image, 5, 255, cv2.THRESH_BINARY_INV)\n        cv2.imwrite(\"thre_image.bmp\",thre_image)\n\n        self.textEdit.append(\"finished to save...\")\n\n        self.textEdit.append(\"recognize...\")\n        self.textEdit.append(\"result=\")\n\n        result = mnist_recognizer.mnist_recognizer(thre_image)\n        self.textEdit.append(str(result))\n\n        # \u30b9\u30af\u30ed\u30fc\u30eb\u3092\u4e0b\u306b\u79fb\u52d5\n        self.textEdit.verticalScrollBar().triggerAction(QtGui.QAbstractSlider.SliderToMaximum)\n\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n    def clear_points(self):\n        self.textEdit.append(\"clear image...\")\n        view_paint.close()\n        view_paint.__init__()\n        view_paint.move(width,height+500)\n        view_paint.setWindowTitle(_translate(\"\", \"\u2460\u6570\u5b57\u3092\u66f8\u304f\", None))\n        view_paint.setFixedSize(QSize(360,360))\n        view_paint.show()\n\n        self.image = np.zeros((paint_width, paint_height,3), np.uint8)\n        self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)\n        self.mnist_image = np.zeros((mnist_width, mnist_height,3), np.uint8)\n        self.mnist_image = cv2.cvtColor(self.mnist_image, cv2.COLOR_RGB2GRAY)\n\n        self.textEdit.verticalScrollBar().triggerAction(QtGui.QAbstractSlider.SliderToMaximum)\n\n    def  quit(self):\n        print \"close...\"\n        mnist_recognizer.close()\n\nif __name__ == \"__main__\":\n    app = QtGui.QApplication(sys.argv)\n    form = MainWindow()\n    form.show()\n    view_paint = PaintedWidget()\n    view_paint.move(width,height+500)\n    view_paint.setWindowTitle(_translate(\"\", \"\u2460\u6570\u5b57\u3092\u66f8\u304f\", None))\n    view_paint.setFixedSize(QSize(360,360))\n    view_result = QWidget()\n    view_result.move(width+360,height+500)\n    view_result.setWindowTitle(_translate(\"\", \"MNIST\u7528\u753b\u50cf\u306b\u5909\u63db\", None))\n    view_result.setFixedSize(QSize(mnist_width,mnist_height))\n\n    form.pushButtonPaintImage.clicked.connect(lambda: form.paint_image())\n    form.pushButtonSaveImage.clicked.connect(lambda: form.saved())\n    form.pushButtonRecognizeNumber.clicked.connect(lambda: form.recognize_number())\n    form.pushButtonClear.clicked.connect(lambda: form.clear_points())\n    form.button_exit.clicked.connect(app.quit)\n    form.button_exit.clicked.connect(lambda: form.quit())\n\n    app.exec_()\n\n```\n\n3-3.\u5b9f\u884c\u3057\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\u3000\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n\u3000sudo python main.py\n\n\uff14\uff0e\u5b9f\u9a13\n\u3000\u5b9f\u969b\u306b1\u304b\u30895\u307e\u3067\u306e\u6570\u5b57\u3092\u5165\u308c\u3066\u8a8d\u8b58\u3055\u305b\u308b\u3002\n\n![result (copy).gif](https://qiita-image-store.s3.amazonaws.com/0/131965/0955ff97-b332-f49a-49a8-61e29135dfe0.gif)\n\u56f3\uff12 \u5b9f\u9a13\u7d50\u679c\n\n\u3000\u6982\u306d\u6b63\u89e3\u3068\u3044\u3046\u3068\u3053\u308d\u3002\n\u3000\u5931\u6557\u304c\u3042\u308b\u3082\u306e\u3082\u4f8b\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u30028\u30019\u30010\u3042\u305f\u308a\u306e\u8a8d\u8b58\u7387\u304c\u4ed6\u306e\u6570\u5b57\u3088\u308a\u3082\u4f4e\u3044\u6c17\u304c\u3059\u308b\u3002\n\n![result_NG.gif](https://qiita-image-store.s3.amazonaws.com/0/131965/983b0cea-ccd4-4104-2b29-5a5f6a7f966a.gif)\n\u56f3\uff13 \u5931\u6557\u4f8b\n\n\uff15\uff0e\u8003\u5bdf\n\u3000\u4ee5\u4e0a\u306e\u7d50\u679c\u3092\u8e0f\u307e\u3048\u3066\u3001\u6c17\u306b\u306a\u3063\u305f\u3068\u3053\u308d\u3084\u6539\u5584\u3057\u305f\u3044\u70b9\u306a\u3069\u3092\u8003\u5bdf\u3059\u308b\u3002\n5-1.\u5229\u70b9\u3068\u6b20\u70b9\n\u3000\u307e\u305a\u306f\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u5229\u70b9\u3068\u6b20\u70b9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n\u5229\u70b9\uff1a\n\u25a0\u898b\u305f\u76ee\u306b\u308f\u304b\u308a\u3084\u3059\u3044\n\u25a0\u4f5c\u308b\u306e\u304c\u697d\u3057\u304b\u3063\u305f\u3001GUI\u6700\u9ad8\u3002\n\u25a0\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u65e9\u3044\n\u25a0OSX\u3067\u3082\u52d5\u3044\u305f\n\u3000\u30fc\u305f\u3060\u3057\u3001\u305d\u308c\u306a\u308a\u306b\u74b0\u5883\u3092\u6574\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n\u6b20\u70b9\uff1a\n\u25a0\u958b\u767a\u74b0\u5883\u6574\u3048\u308b\u306e\u306f\u9762\u5012\n\u3000\u30fc\u3067\u3082Ubuntu\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u3082\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u3068\u601d\u3046\u3002Ubuntu\u6700\u9ad8\u3002\n\u25a0\u9069\u5b9c\u5b66\u7fd2\u306f\u3057\u306a\u3044\n\u3000\u30fc\u9593\u9055\u3048\u305f\u6642\u306b\u5b66\u7fd2\u3055\u305b\u308b\u3068\u304b\u3059\u308b\u3068\u3044\u3044\u304b\u3082\n\u25a0Windows\u3067\u52d5\u304f\u306e\u304b\uff1f\n\u3000\u30fc\u77e5\u308a\u307e\u305b\u3093\n\u3000\u30fc\u307f\u3093\u306a\u306b\u8a66\u3057\u3066\u3082\u3089\u3046\u306a\u3089Web\u30a2\u30d7\u30ea\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\n\n5-2.\u6c17\u306b\u306a\u3063\u305f\u70b9\n\u3000\u3053\u306e\u30a2\u30d7\u30ea\u3092\u52d5\u304b\u3057\u3066\u307f\u3066\u6c17\u306b\u306a\u3063\u305f\u70b9\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n\u25a0\u8a8d\u8b58\u3057\u306b\u304f\u3044\u6570\u5b57\n\u3000\u30fc0\u3092\u8a8d\u8b58\u3057\u306b\u304f\u3044\n\u3000\u3000\u30fb\u610f\u5916\u306b\u30820\u306e\u8a8d\u8b58\u7387\u304c\u4f4e\u3044\u3088\u3046\u306b\u611f\u3058\u305f\n\u3000\u3000\u3000\u30fc\u5358\u7d14\u3059\u304e\u3066\u7279\u5fb4\u304c\u5c11\u306a\u3044\u304b\u3089\uff1f\n\u3000\u30fc9\u306f\u66f8\u304d\u9806\u3067\u8a8d\u8b58\u7387\u304c\u9055\u3046\u3088\u3046\u306b\u611f\u3058\u305f\n\u3000\u3000\u30fb\u56f3\uff13\u306e\u6210\u529f\u4f8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u66f8\u304f\u3068\u8a8d\u8b58\u3057\u3084\u3059\u3044\n\u3000\u3000\u30fb\u56f3\uff13\u306e\u5931\u6557\u4f8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u66f8\u304f\u3068\u8a8d\u8b58\u3057\u3065\u3089\u3044\n\u3000\u3000\u3000\u30fcMNIST\u306e9\u306e\u66f8\u304d\u9806\u304c\u524d\u8005\u306e\u307b\u3046\u304c\u591a\u3044\u304b\u3089\u3060\u308d\u3046\u304b\n\u3000\u3000\u3000\u3000\u30fb\u5143\u30c7\u30fc\u30bf\u3092\u773a\u3081\u3066\u307f\u306a\u304d\u3083\u304b\u3041...\n\u3000\u30fc8,6\u306a\u3069\n\u3000\u3000\u30fb\u4e88\u60f3\u901a\u308a\u8a8d\u8b58\u3057\u3065\u3089\u3044\n\u3000\u3000\u3000\u30fc8\u306f\u8907\u96d1\n\u3000\u3000\u3000\u30fc6\u306f\u4e38\u304c\u3042\u308b\u3068\u3044\u3046\u70b9\u30670\u306b\u30828\u306b\u3082\u4f3c\u3066\u3044\u308b\u3001\u307f\u3088\u3046\u306b\u3088\u3063\u3066\u306f5\u306b\u3082\u4f3c\u3066\u3044\u308b\n\n\u25a0\u8a8d\u8b58\u3057\u3084\u3059\u3044\u6570\u5b57\n\u3000\u30fc\uff12\u3001\uff13\n\u3000\u3000\u30fb\u6b63\u7b54\u7387\u9ad8\u3044\u5370\u8c61\n\n\uff16\uff0e\u307e\u3068\u3081\n\u3000TensorFlow\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(Deep MNIST for Experts)\u3092\u81ea\u5206\u306e\u66f8\u3044\u305f\u6570\u5b57\u3067\u8a66\u3059GUI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u305f\u3002\n\u3000\u3084\u3063\u3071\u308a\u81ea\u5206\u3067\u66f8\u3044\u305f\u6570\u5b57\u3060\u3068\u8a8d\u8b58\u7387\u304c\u4e0b\u304c\u308b\u3002\u3067\u3082\u3001\u3053\u3093\u306a\u306b\u7c21\u5358\u306b\u4f5c\u308c\u308b\u8b58\u5225\u5668\u3067\u3053\u306e\u30ec\u30d9\u30eb\u306e\u3082\u306e\u306f\u306a\u304b\u306a\u304b\u306a\u3044\u306e\u304b\u306a\u30fc\u3068\u3082\u601d\u3063\u305f\u308a\u3002\n\u3000\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u306a\u3093\u3061\u3083\u3089\u3092\u5c11\u3057\u52c9\u5f37\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u30b3\u30fc\u30c9\u306b\u306a\u3093\u3068\u306a\u304fTensorFlow\u3068\u540c\u3058Apache 2.0\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u8a18\u8ff0\u3092\u3057\u3066\u307f\u305f\u3002\u30e9\u30a4\u30bb\u30f3\u30b9\u8a18\u8ff0\u65b9\u6cd5\u306e\u52c9\u5f37\u306b\u306a\u3063\u305f\u3002\n\u3000\u3053\u306e\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3001TensorFlow\u3068\u3044\u3046\u3088\u308a\u3001Linux\u958b\u767a\u74b0\u5883\u5468\u308a\u306b\u5f37\u304f\u306a\u3063\u305f\u3068\u611f\u3058\u3066\u3044\u308b\u3002\u4eca\u5f8c\u3001Python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a66\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3068\u304d\u306fGUI\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\u3000\u6b21\u306f\u81ea\u5206\u3067TensorFlow\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066GUI\u306b\u5b9f\u88c5\u3057\u305f\u3044\u3002\u9854\u8a8d\u8b58\u306a\u3069\u306e\u753b\u50cf\u51e6\u7406\u3068\u304b\u3001\u97f3\u97ff\u51e6\u7406\u304c\u3084\u308a\u305f\u3044\u3002\n\n\u4ee5\u4e0a\n", "tags": ["TensorFlow", "\u4eba\u5de5\u77e5\u80fd", "\u6df1\u5c64\u5b66\u7fd2", "GUI", "Ubuntu"]}