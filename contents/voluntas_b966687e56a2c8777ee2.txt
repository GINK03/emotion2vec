{"context": "Python \u306e JSON Schema \u30e9\u30a4\u30d6\u30e9\u30ea \u3092\u4f7f\u3063\u305f\u3089\u306a\u304b\u306a\u304b\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067 Erlang \u7248\u3092\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002\nfor-GET/jesse: jesse (JSon Schema Erlang) is an implementation of a JSON Schema validator for Erlang. \n\nJSON Scheam \u30e9\u30a4\u30d6\u30e9\u30ea\n\n\nhttps://github.com/for-GET/jesse\n\n\nJSON \u30e9\u30a4\u30d6\u30e9\u30ea\n\n\nhttps://github.com/sile/jsone\n\n\n\njesse \u306f Draft \u30d0\u30fc\u30b8\u30e7\u30f3 4 \u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f rebar.config \u306e deps \u306b jsone \u3068 jesse \u3092\u6307\u5b9a\u3057\u307e\u3059\n{deps,\n  [\n   {jsone,\n    \".*\", {git, \"git@github.com:sile/jsone.git\", {branch, \"master\"}}},\n\n   {jesse,\n    \".*\", {git, \"git@github.com:klarna/jesse.git\", {branch, \"master\"}}}\n  ]\n}.\n\n\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f Schema \u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3001\u3042\u3068\u306f\u305d\u308c\u306b JSON \u3092\u98df\u3079\u3055\u305b\u308b\u3060\u3051\u3067\u3059\u3002\n\n%% \u30b9\u30ad\u30fc\u30de\u306e\u5b9a\u7fa9\n> Schema = jsone:encode([{<<\"properties\">>, [{<<\"a\">>, [{<<\"type\">>, <<\"integer\">>}]}, {<<\"b\">>, [{<<\"type\">>, <<\"string\">>}]}, {<<\"c\">>, [{<<\"type\">>, <<\"boolean\">>}]}]}]).\n<<\"{\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\"},\\\"b\\\":{\\\"type\\\":\\\"string\\\"},\\\"c\\\":{\\\"type\\\":\\\"boolean\\\"}}}\">>\n\n%% \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\n> jesse:validate_with_schema(Schema, <<\"{\\\"a\\\": 1, \\\"b\\\": \\\"b\\\", \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{ok,[{<<\"a\">>,1},{<<\"b\">>,<<\"b\">>},{<<\"c\">>,true}]}\n\n%% b \u304c string \u3067\u306f\u306a\u304f\u3066 integer \u306a\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\n> jesse:validate_with_schema(Schema, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,[{data_invalid,[{<<\"type\">>,<<\"string\">>}],\n                      wrong_type,1}]}\n\n\u9762\u5012\u306a JSON \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u3053\u308c\u3067\u5c11\u3057\u306f\u697d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f jesse \u306f JSON Schema \u306e\u7ba1\u7406\u6a5f\u80fd\u3082\u4ed8\u3044\u3066\u3044\u307e\u3059\u3002\n\n%% Schema \u3092\u8a2d\u5b9a\u3059\u308b\n> Schema = jsone:encode([{<<\"properties\">>, [{<<\"a\">>, [{<<\"type\">>, <<\"integer\">>}]}, {<<\"b\">>, [{<<\"type\">>, <<\"string\">>}]}, {<<\"c\">>, [{<<\"type\">>, <<\"boolean\">>}]}]}]).\n<<\"{\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\"},\\\"b\\\":{\\\"type\\\":\\\"string\\\"},\\\"c\\\":{\\\"type\\\":\\\"boolean\\\"}}}\">>\n\n%% \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4ed8\u304d\u3067 Schema \u3092\u767b\u9332\u3059\u308b\n> jesse:add_schema(spam, Schema, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nok\n\n%% \u30b9\u30ad\u30fc\u30de\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u3059\u308b\n> jesse:validate(spam, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,[{data_invalid,[{<<\"type\">>,<<\"string\">>}],\n                      wrong_type,1,\n                      [<<\"b\">>]}]}\n\n%% \u5b58\u5728\u3057\u306a\u3044\u30b9\u30ad\u30fc\u30de\u3092\u547c\u3073\u51fa\u3057\u305f\u3068\u304d\u306e\u30a8\u30e9\u30fc\n> jesse:validate(egg, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,{database_error,egg,schema_not_found}}\n\n\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u30b9\u30ad\u30fc\u30de\u3092\u5168\u3066\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u5f8c\u306f jesse:validate/2 \u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u8907\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\n\u623b\u308a\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u4e8c\u7a2e\u985e\u3042\u308b\u5834\u5408\u306b\u4f7f\u3046\n1> Schema = jsone:encode([{type, [<<\"null\">>, <<\"object\">>]}, {properties, [{a, [{type, <<\"integer\">>}, {required, true}]}]}]).\n<<\"{\\\"type\\\":[\\\"null\\\",\\\"object\\\"],\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\",\\\"required\\\":true}}}\">>\n2> jesse:validate_with_schema(Schema, jsone:encode(null), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = null\n{ok,null}\n3> jesse:validate_with_schema(Schema, jsone:encode([{a, 10}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"a\">>,10}]\n{ok,[{<<\"a\">>,10}]}\n4> jesse:validate_with_schema(Schema, jsone:encode([{b, 10}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"b\">>,10}]\n{error,[{data_invalid,[{<<\"type\">>,\n                        [<<\"null\">>,<<\"object\">>]},\n                       {<<\"properties\">>,\n                        [{<<\"a\">>,\n                          [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}],\n                      {missing_required_property,<<\"a\">>},\n                      [{<<\"b\">>,10}],\n                      []}]}\n5> jesse:validate_with_schema(Schema, jsone:encode([{a, <<\"abc\">>}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"a\">>,<<\"abc\">>}]\n{error,[{data_invalid,[{<<\"type\">>,<<\"integer\">>},\n                       {<<\"required\">>,true}],\n                      wrong_type,<<\"abc\">>,\n                      [<<\"a\">>]}]}\n\nPython \u306e JSON Schema \u30e9\u30a4\u30d6\u30e9\u30ea \u3092\u4f7f\u3063\u305f\u3089\u306a\u304b\u306a\u304b\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067 Erlang \u7248\u3092\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002\n\nfor-GET/jesse: jesse (JSon Schema Erlang) is an implementation of a JSON Schema validator for Erlang. \n\n- JSON Scheam \u30e9\u30a4\u30d6\u30e9\u30ea\n    - https://github.com/for-GET/jesse\n- JSON \u30e9\u30a4\u30d6\u30e9\u30ea\n    - https://github.com/sile/jsone\n\njesse \u306f Draft \u30d0\u30fc\u30b8\u30e7\u30f3 4 \u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u306f rebar.config \u306e deps \u306b jsone \u3068 jesse \u3092\u6307\u5b9a\u3057\u307e\u3059\n\n```erlang\n{deps,\n  [\n   {jsone,\n    \".*\", {git, \"git@github.com:sile/jsone.git\", {branch, \"master\"}}},\n\n   {jesse,\n    \".*\", {git, \"git@github.com:klarna/jesse.git\", {branch, \"master\"}}}\n  ]\n}.\n```\n\n\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f Schema \u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3001\u3042\u3068\u306f\u305d\u308c\u306b JSON \u3092\u98df\u3079\u3055\u305b\u308b\u3060\u3051\u3067\u3059\u3002\n\n```erlang\n\n%% \u30b9\u30ad\u30fc\u30de\u306e\u5b9a\u7fa9\n> Schema = jsone:encode([{<<\"properties\">>, [{<<\"a\">>, [{<<\"type\">>, <<\"integer\">>}]}, {<<\"b\">>, [{<<\"type\">>, <<\"string\">>}]}, {<<\"c\">>, [{<<\"type\">>, <<\"boolean\">>}]}]}]).\n<<\"{\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\"},\\\"b\\\":{\\\"type\\\":\\\"string\\\"},\\\"c\\\":{\\\"type\\\":\\\"boolean\\\"}}}\">>\n\n%% \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\n> jesse:validate_with_schema(Schema, <<\"{\\\"a\\\": 1, \\\"b\\\": \\\"b\\\", \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{ok,[{<<\"a\">>,1},{<<\"b\">>,<<\"b\">>},{<<\"c\">>,true}]}\n\n%% b \u304c string \u3067\u306f\u306a\u304f\u3066 integer \u306a\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\n> jesse:validate_with_schema(Schema, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,[{data_invalid,[{<<\"type\">>,<<\"string\">>}],\n                      wrong_type,1}]}\n```\n\n\u9762\u5012\u306a JSON \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u3053\u308c\u3067\u5c11\u3057\u306f\u697d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305f jesse \u306f JSON Schema \u306e\u7ba1\u7406\u6a5f\u80fd\u3082\u4ed8\u3044\u3066\u3044\u307e\u3059\u3002\n\n```erlang\n\n%% Schema \u3092\u8a2d\u5b9a\u3059\u308b\n> Schema = jsone:encode([{<<\"properties\">>, [{<<\"a\">>, [{<<\"type\">>, <<\"integer\">>}]}, {<<\"b\">>, [{<<\"type\">>, <<\"string\">>}]}, {<<\"c\">>, [{<<\"type\">>, <<\"boolean\">>}]}]}]).\n<<\"{\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\"},\\\"b\\\":{\\\"type\\\":\\\"string\\\"},\\\"c\\\":{\\\"type\\\":\\\"boolean\\\"}}}\">>\n\n%% \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u4ed8\u304d\u3067 Schema \u3092\u767b\u9332\u3059\u308b\n> jesse:add_schema(spam, Schema, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nok\n\n%% \u30b9\u30ad\u30fc\u30de\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u3059\u308b\n> jesse:validate(spam, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,[{data_invalid,[{<<\"type\">>,<<\"string\">>}],\n                      wrong_type,1,\n                      [<<\"b\">>]}]}\n\n%% \u5b58\u5728\u3057\u306a\u3044\u30b9\u30ad\u30fc\u30de\u3092\u547c\u3073\u51fa\u3057\u305f\u3068\u304d\u306e\u30a8\u30e9\u30fc\n> jesse:validate(egg, <<\"{\\\"a\\\": 1, \\\"b\\\": 1, \\\"c\\\": true}\">>, [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\n{error,{database_error,egg,schema_not_found}}\n```\n\n\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u30b9\u30ad\u30fc\u30de\u3092\u5168\u3066\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u5f8c\u306f jesse:validate/2 \u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u8907\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u623b\u308a\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u4e8c\u7a2e\u985e\u3042\u308b\u5834\u5408\u306b\u4f7f\u3046\n\n```erlang\n1> Schema = jsone:encode([{type, [<<\"null\">>, <<\"object\">>]}, {properties, [{a, [{type, <<\"integer\">>}, {required, true}]}]}]).\n<<\"{\\\"type\\\":[\\\"null\\\",\\\"object\\\"],\\\"properties\\\":{\\\"a\\\":{\\\"type\\\":\\\"integer\\\",\\\"required\\\":true}}}\">>\n2> jesse:validate_with_schema(Schema, jsone:encode(null), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = null\n{ok,null}\n3> jesse:validate_with_schema(Schema, jsone:encode([{a, 10}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"a\">>,10}]\n{ok,[{<<\"a\">>,10}]}\n4> jesse:validate_with_schema(Schema, jsone:encode([{b, 10}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"b\">>,10}]\n{error,[{data_invalid,[{<<\"type\">>,\n                        [<<\"null\">>,<<\"object\">>]},\n                       {<<\"properties\">>,\n                        [{<<\"a\">>,\n                          [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}],\n                      {missing_required_property,<<\"a\">>},\n                      [{<<\"b\">>,10}],\n                      []}]}\n5> jesse:validate_with_schema(Schema, jsone:encode([{a, <<\"abc\">>}]), [{parser_fun, fun(Binary) -> jsone:decode(Binary, [{format, proplist}]) end}]).\nsrc/jesse.erl:207:<0.32.0>: ParsedSchema = [{<<\"type\">>,[<<\"null\">>,<<\"object\">>]},\n                {<<\"properties\">>,\n                 [{<<\"a\">>,\n                   [{<<\"type\">>,<<\"integer\">>},{<<\"required\">>,true}]}]}]\nsrc/jesse.erl:208:<0.32.0>: ParsedData = [{<<\"a\">>,<<\"abc\">>}]\n{error,[{data_invalid,[{<<\"type\">>,<<\"integer\">>},\n                       {<<\"required\">>,true}],\n                      wrong_type,<<\"abc\">>,\n                      [<<\"a\">>]}]}\n```\n\n", "tags": ["JSON", "jsonschema", "Erlang"]}