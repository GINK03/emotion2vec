{"context": " More than 1 year has passed since last update.\u5358\u7d14\u306b\u8a3c\u660e\u66f8\u306e\u30c1\u30a7\u30c3\u30af\u3092\u7121\u52b9\u5316\u3055\u305b\u308b\n\nDefaultHttpClient\n/*\n * \u8a3c\u660e\u66f8\u306e\u30c1\u30a7\u30c3\u30af\u51e6\u7406\u3092\u7121\u52b9\u5316\u3059\u308b\n */\nSSLContext sslContext = SSLContext.getInstance(\"SSL\");\nsslContext.init(null, new TrustManager[]{new X509TrustManager() {\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] certs, String authType) {\n        // \u4f55\u3082\u3057\u306a\u3044\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] certs, String authType) {\n        // \u4f55\u3082\u3057\u306a\u3044\n    }\n}}, new SecureRandom());\n\nScheme sch = new Scheme(\"https\", new SSLSocketFactory(sslContext), 443);\n\nDefaultHttpClient httpClient = new DefaultHttpClient();\nhttpClient.getConnectionManager().getSchemeRegistry().register(sch);\n\n\n\nHttpsURLConnection\nSSLContext sslContext = SSLContext.getInstance(\"SSL\");\nTrustManager tm = new X509TrustManager() {\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\n    }\n};\nsslContext.init(null, new TrustManager[]{tm}, null);\nSSLSocketFactory socketFactory = sslContext.getSocketFactory();\n\nHttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);\nClient client = Client.create();\n\n\n\u5358\u7d14\u306b\u8a3c\u660e\u66f8\u306e\u30c1\u30a7\u30c3\u30af\u3092\u7121\u52b9\u5316\u3055\u305b\u308b\n\n```Java:DefaultHttpClient\n/*\n * \u8a3c\u660e\u66f8\u306e\u30c1\u30a7\u30c3\u30af\u51e6\u7406\u3092\u7121\u52b9\u5316\u3059\u308b\n */\nSSLContext sslContext = SSLContext.getInstance(\"SSL\");\nsslContext.init(null, new TrustManager[]{new X509TrustManager() {\n        \n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n    \n    @Override\n    public void checkClientTrusted(X509Certificate[] certs, String authType) {\n        // \u4f55\u3082\u3057\u306a\u3044\n    }\n    \n    @Override\n    public void checkServerTrusted(X509Certificate[] certs, String authType) {\n        // \u4f55\u3082\u3057\u306a\u3044\n    }\n}}, new SecureRandom());\n\nScheme sch = new Scheme(\"https\", new SSLSocketFactory(sslContext), 443);\n\nDefaultHttpClient httpClient = new DefaultHttpClient();\nhttpClient.getConnectionManager().getSchemeRegistry().register(sch);\n```\n\n\n\n```Java:HttpsURLConnection\nSSLContext sslContext = SSLContext.getInstance(\"SSL\");\nTrustManager tm = new X509TrustManager() {\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\n    }\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\n    }\n};\nsslContext.init(null, new TrustManager[]{tm}, null);\nSSLSocketFactory socketFactory = sslContext.getSocketFactory();\n\nHttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);\nClient client = Client.create();\n```\n", "tags": ["Java", "HttpClient", "SSL", "\u8a3c\u660e\u66f8", "HttpsURLConnection"]}