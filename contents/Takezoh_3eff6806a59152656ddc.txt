{"context": "2016\u5e74\u672b\u304b\u3089 iOS \u306e ATS \u5fc5\u9808\u5316\u304c\u59cb\u307e\u308a\u307e\u3059\u304c\u3001\u7686\u69d8 HTTPS \u3078\u306e\u5bfe\u5fdc\u306f\u304a\u6e08\u307f\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u306f\u3001Unity/C#(mono) \u3067 HTTPS \u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306e\u6ce8\u610f\u70b9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\nmono \u306b\u306f\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u5165\u3063\u3066\u3044\u306a\u3044\uff08\u91cd\u8981\uff01\uff09\nmono \u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u5168\u3066\u306e SSL \u901a\u4fe1\u306f\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u304c\u3067\u304d\u305a\u306b\u5931\u6557\u3057\u307e\u3059\u3002\n\nMono - FAQ: Security\nNote that a default installation of Mono doesn\u2019t trust anyone!\n\n\u5168\u3066\u306e\u8a3c\u660e\u66f8\u3092\u7121\u6761\u4ef6\u3067\u4fe1\u983c\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3044\u308f\u3086\u308b\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3067\u3042\u3063\u3066\u3082\u7121\u4e8b\u306b SSL \u3067\u901a\u4fe1\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30aa\u30ec\u30aa\u30ec\u8a50\u6b3a\u306b\u3042\u3063\u3055\u308a\u3068\u5f15\u3063\u304b\u304b\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u6298\u89d2\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 SSL \u3067\u6697\u53f7\u5316\u3057\u3066\u3082\u3001\u76f8\u624b\u304c\u8a50\u6b3a\u5e2b\u3067\u306f\u3001\u307e\u3063\u305f\u304f\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3067\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b\n\u6b63\u3057\u304f\u691c\u8a3c\u3092\u884c\u3046\u306b\u306f\u3001 UnityEngine.WWW \u53c8\u306f UnityEngine.Networking.UnityWebRequest \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u308c\u3089\u306e API \u306f OS \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u3067\u691c\u8a3c\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u305d\u308c\u3067\u3082\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u306b\u3088\u308a C# \u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u3042\u307e\u308a\u30aa\u30b9\u30b9\u30e1\u306f\u51fa\u6765\u306a\u3044\u304c\u6b21\u306e\u3088\u3046\u306a\u624b\u6bb5\u304c\u8003\u3048\u3089\u308c\u308b\u3002\n\nexample\nusing System.Collections.Generic;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\n\nclass ExampleClass\n{\n    void Example()\n    {\n        System.Net.ServicePointManager.ServerCertificateValidationCallback = OnRemoteCertificateValidationCallback;\n\n        var request = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(\"https://api.example.com\");\n        request.Method = \"GET\";\n\n        var response = (System.Net.HttpWebResponse)request.GetResponse();\n        var statusCode = (int)response.StatusCode;\n        response.Close();\n\n        Debug.Log(\"status: \" + statusCode);\n    }\n\n\n    // \u4fe1\u983c\u3059\u308b\u8a3c\u660e\u66f8\u306e\u30cf\u30c3\u30b7\u30e5\u30ea\u30b9\u30c8\n    readonly List<string> TrustedThumbprints = new List<string>()\n    {\n        \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    };\n\n    // \u7121\u8996\u3059\u308b X509 \u30c1\u30a7\u30fc\u30f3\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5b9a\u7fa9\n    const X509ChainStatusFlags IgnoreChainStatus = \n            X509ChainStatusFlags.RevocationStatusUnknown |  // \u8a3c\u660e\u66f8\u304c\u5931\u52b9\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3067\u304d\u306a\u3044\n            X509ChainStatusFlags.OfflineRevocation |  // \u8a3c\u660e\u66f8\u5931\u52b9\u30ea\u30b9\u30c8\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n            X509ChainStatusFlags.PartialChain |  // X509\u30c1\u30a7\u30fc\u30f3\u3092\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u306b\u69cb\u7bc9\u3067\u304d\u306a\u304b\u3063\u305f\n            X509ChainStatusFlags.UntrustedRoot;  // \u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\n\n    private bool OnRemoteCertificateValidationCallback(\n      object sender,\n      X509Certificate certificate,\n      X509Chain chain,\n      SslPolicyErrors sslPolicyErrors)\n    {\n        // \u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070 OK\n        if (sslPolicyErrors == SslPolicyErrors.None)\n        {\n            return true;\n        }\n\n        // \u4fe1\u983c\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u30ea\u30b9\u30c8\u3068\u6bd4\u8f03\u3057\u3001\u4e00\u81f4\u3059\u308b\u306a\u3089 OK\n        if (TrustedThumbprints.Contains(((X509Certificate2)certificate).Thumbprint))\n        {\n            return true;\n        }\n\n        // SslPolicyError.RemoteCertificateChainErrors \u4ee5\u5916\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308b\u306a\u3089 NG\n        if ((sslPolicyErrors & ~SslPolicyErrors.RemoteCertificateChainErrors) != 0)\n        {\n            return false;\n        }\n\n        // IgnoreChainStatus \u4ee5\u5916\u306e\u30c1\u30a7\u30fc\u30f3\u30a8\u30e9\u30fc\u304c\u3042\u308b\u306a\u3089 NG\n        for (int i = 0; i < chain.ChainStatus.Length; ++i)\n        {\n            if ((chain.ChainStatus[i].Status & ~IgnoreChainStatus) != 0)\n            {\n                return false;\n            }\n        }\n\n        // \u8a3c\u660e\u66f8\u30c1\u30a7\u30fc\u30f3\u5185\u306b\u4fe1\u983c\u3059\u308b\u8a3c\u660e\u66f8\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u3042\u308c\u3070 OK \u3068\u3059\u308b\n        for (int i = 0; i < chain.ChainElements.Count; ++i)\n        {\n            var element = chain.ChainElements[i];\n            if (TrustedThumbprints.Contains(element.Certificate.Thumbprint))\n            {\n                TrustedThumbprints.Add(element.Certificate.Thumbprint);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u304c\u3042\u308b\u3002\n\n\u63a5\u7d9a\u3057\u3046\u308b\u30c9\u30e1\u30a4\u30f3\u30cd\u30fc\u30e0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u4fe1\u983c\u3067\u304d\u308b\nTrustedThumbprints \u3068\u4e00\u81f4\u3059\u308b\u8a3c\u660e\u66f8\u3068\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u9593\u306e\u4e2d\u9593\u8a3c\u660e\u66f8\u3092\u4fe1\u983c\u3067\u304d\u308b\n\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u306e CA \u8a3c\u660e\u66f8\u304c\u5909\u66f4\u306b\u306a\u308b\u5834\u5408\u306f\u4e8b\u524d\u306b\u5bfe\u7b56\u304c\u5fc5\u8981\n\n\n\u5229\u7528\u3057\u3066\u3044\u308b HTTP \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3088\u3046\nUnity \u6a19\u6e96\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5229\u7528\u3057\u3066\u3044\u308b HTTP \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3069\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Asset Store \u3067\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b UniWeb \u3068\u3044\u3046\u30a2\u30bb\u30c3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nRequest.cs\n#if USE_SSL\n        static bool ValidateServerCertificate (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)\n        {\n            //This is where you implement logic to determine if you trust the certificate.\n            //By default, we trust all certificates.\n            return true;\n        }\n#endif\n\n\n\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5229\u7528\u8005\u304c\u5b9f\u88c5\u3059\u308b\u5f62\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5168\u3066\u306e\u8a3c\u660e\u66f8\u3092\u4fe1\u983c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nATS \u3068\u306e\u95a2\u4fc2\niOS \u306e ATS \u304c\u6709\u52b9\u306b\u306a\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u975e\u30bb\u30ad\u30e5\u30a2\u306a HTTP \u901a\u4fe1\u306f\u4f7f\u3048\u306a\u304f\u306a\u308a\u307e\u3059\u304c\u3001ATS \u306e\u5236\u9650\u306e\u5bfe\u8c61\u306b\u306a\u308b\u306e\u306f NSURLSession \u3084 NSURLConnection \u7b49\u306e API \u3067\u3042\u308a\u3001System.Net.HttpWebRequest \u306e\u5b9f\u88c5\u306f\u3053\u308c\u3089\u306e API \u3092\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u5236\u9650\u306e\u5bfe\u8c61\u5916\u3068\u306a\u308a\u307e\u3059\u3002\n\nCocoa Keys - Using ATS in Apple Frameworks\nApp Transport Security (ATS) is enforced by the NSURLSession class and all APIs that use it. ATS is automatically enabled when you link your app against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later. (The older NSURLConnection class also enforces ATS when you link against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later.) ATS protections are not available when using lower-level networking APIs provided by Apple, or when using third-party networking libraries.\n\n\n\u3055\u3044\u3054\u306b\nApple \u306e ATS \u5fc5\u9808\u5316\u306f\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u306b\u3068\u3063\u3066\u306f\u3001\u9762\u5012\u304f\u3055\u3044\u5bfe\u5fdc\u3054\u3068\u304c\u5897\u3048\u305f\u3068\u3044\u3046\u5370\u8c61\u306b\u3068\u3089\u3048\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u306e\u5b89\u6613\u306a HTTP \u306e\u5229\u7528\u3092\u6291\u5236\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30c7\u30fc\u30bf\u901a\u4fe1\u306e\u5b89\u5168\u6027\u3092\u5411\u4e0a\u3055\u305b\u308b\u610f\u56f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u5b88\u308b\u305f\u3081\u3001\u81ea\u793e\u30b5\u30fc\u30d3\u30b9\u3092\u5b88\u308b\u305f\u3081\u3001\u9069\u5207\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u9078\u629e\u3057\u307e\u3057\u3087\u3046\u3002\n2016\u5e74\u672b\u304b\u3089 iOS \u306e ATS \u5fc5\u9808\u5316\u304c\u59cb\u307e\u308a\u307e\u3059\u304c\u3001\u7686\u69d8 HTTPS \u3078\u306e\u5bfe\u5fdc\u306f\u304a\u6e08\u307f\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u4eca\u56de\u306f\u3001Unity/C#(mono) \u3067 HTTPS \u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306e\u6ce8\u610f\u70b9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n## mono \u306b\u306f\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u5165\u3063\u3066\u3044\u306a\u3044\uff08\u91cd\u8981\uff01\uff09\n\nmono \u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u5168\u3066\u306e SSL \u901a\u4fe1\u306f\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u304c\u3067\u304d\u305a\u306b\u5931\u6557\u3057\u307e\u3059\u3002\n\n> ***[Mono - FAQ: Security](http://www.mono-project.com/docs/faq/security/)***\nNote that a default installation of Mono doesn\u2019t trust anyone!\n\n\u5168\u3066\u306e\u8a3c\u660e\u66f8\u3092\u7121\u6761\u4ef6\u3067\u4fe1\u983c\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3044\u308f\u3086\u308b\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3067\u3042\u3063\u3066\u3082\u7121\u4e8b\u306b SSL \u3067\u901a\u4fe1\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30aa\u30ec\u30aa\u30ec\u8a50\u6b3a\u306b\u3042\u3063\u3055\u308a\u3068\u5f15\u3063\u304b\u304b\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u6298\u89d2\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 SSL \u3067\u6697\u53f7\u5316\u3057\u3066\u3082\u3001\u76f8\u624b\u304c\u8a50\u6b3a\u5e2b\u3067\u306f\u3001\u307e\u3063\u305f\u304f\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u3067\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b\n\n\u6b63\u3057\u304f\u691c\u8a3c\u3092\u884c\u3046\u306b\u306f\u3001 ```UnityEngine.WWW``` \u53c8\u306f ```UnityEngine.Networking.UnityWebRequest``` \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u308c\u3089\u306e API \u306f OS \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u3067\u691c\u8a3c\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u3082\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u306b\u3088\u308a C# \u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u3042\u307e\u308a\u30aa\u30b9\u30b9\u30e1\u306f\u51fa\u6765\u306a\u3044\u304c\u6b21\u306e\u3088\u3046\u306a\u624b\u6bb5\u304c\u8003\u3048\u3089\u308c\u308b\u3002\n\n```csharp:example\nusing System.Collections.Generic;\nusing System.Net.Security;\nusing System.Security.Cryptography.X509Certificates;\n\nclass ExampleClass\n{\n    void Example()\n    {\n        System.Net.ServicePointManager.ServerCertificateValidationCallback = OnRemoteCertificateValidationCallback;\n\n        var request = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(\"https://api.example.com\");\n        request.Method = \"GET\";\n\n        var response = (System.Net.HttpWebResponse)request.GetResponse();\n        var statusCode = (int)response.StatusCode;\n        response.Close();\n\n        Debug.Log(\"status: \" + statusCode);\n    }\n\n\n    // \u4fe1\u983c\u3059\u308b\u8a3c\u660e\u66f8\u306e\u30cf\u30c3\u30b7\u30e5\u30ea\u30b9\u30c8\n    readonly List<string> TrustedThumbprints = new List<string>()\n    {\n        \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    };\n\n    // \u7121\u8996\u3059\u308b X509 \u30c1\u30a7\u30fc\u30f3\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5b9a\u7fa9\n    const X509ChainStatusFlags IgnoreChainStatus = \n            X509ChainStatusFlags.RevocationStatusUnknown |  // \u8a3c\u660e\u66f8\u304c\u5931\u52b9\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3067\u304d\u306a\u3044\n            X509ChainStatusFlags.OfflineRevocation |  // \u8a3c\u660e\u66f8\u5931\u52b9\u30ea\u30b9\u30c8\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n            X509ChainStatusFlags.PartialChain |  // X509\u30c1\u30a7\u30fc\u30f3\u3092\u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u306b\u69cb\u7bc9\u3067\u304d\u306a\u304b\u3063\u305f\n            X509ChainStatusFlags.UntrustedRoot;  // \u30eb\u30fc\u30c8\u8a3c\u660e\u66f8\u304c\u4fe1\u983c\u3055\u308c\u3066\u3044\u306a\u3044\n\n    private bool OnRemoteCertificateValidationCallback(\n      object sender,\n      X509Certificate certificate,\n      X509Chain chain,\n      SslPolicyErrors sslPolicyErrors)\n    {\n        // \u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070 OK\n        if (sslPolicyErrors == SslPolicyErrors.None)\n        {\n            return true;\n        }\n\n        // \u4fe1\u983c\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u30ea\u30b9\u30c8\u3068\u6bd4\u8f03\u3057\u3001\u4e00\u81f4\u3059\u308b\u306a\u3089 OK\n        if (TrustedThumbprints.Contains(((X509Certificate2)certificate).Thumbprint))\n        {\n            return true;\n        }\n\n        // SslPolicyError.RemoteCertificateChainErrors \u4ee5\u5916\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308b\u306a\u3089 NG\n        if ((sslPolicyErrors & ~SslPolicyErrors.RemoteCertificateChainErrors) != 0)\n        {\n            return false;\n        }\n\n        // IgnoreChainStatus \u4ee5\u5916\u306e\u30c1\u30a7\u30fc\u30f3\u30a8\u30e9\u30fc\u304c\u3042\u308b\u306a\u3089 NG\n        for (int i = 0; i < chain.ChainStatus.Length; ++i)\n        {\n            if ((chain.ChainStatus[i].Status & ~IgnoreChainStatus) != 0)\n            {\n                return false;\n            }\n        }\n\n        // \u8a3c\u660e\u66f8\u30c1\u30a7\u30fc\u30f3\u5185\u306b\u4fe1\u983c\u3059\u308b\u8a3c\u660e\u66f8\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u3042\u308c\u3070 OK \u3068\u3059\u308b\n        for (int i = 0; i < chain.ChainElements.Count; ++i)\n        {\n            var element = chain.ChainElements[i];\n            if (TrustedThumbprints.Contains(element.Certificate.Thumbprint))\n            {\n                TrustedThumbprints.Add(element.Certificate.Thumbprint);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u304c\u3042\u308b\u3002\n\n- \u63a5\u7d9a\u3057\u3046\u308b\u30c9\u30e1\u30a4\u30f3\u30cd\u30fc\u30e0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u308b\u30b5\u30fc\u30d3\u30b9\u3092\u4fe1\u983c\u3067\u304d\u308b\n- TrustedThumbprints \u3068\u4e00\u81f4\u3059\u308b\u8a3c\u660e\u66f8\u3068\u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u9593\u306e\u4e2d\u9593\u8a3c\u660e\u66f8\u3092\u4fe1\u983c\u3067\u304d\u308b\n- \u30b5\u30fc\u30d0\u30fc\u8a3c\u660e\u66f8\u306e CA \u8a3c\u660e\u66f8\u304c\u5909\u66f4\u306b\u306a\u308b\u5834\u5408\u306f\u4e8b\u524d\u306b\u5bfe\u7b56\u304c\u5fc5\u8981\n\n\n## \u5229\u7528\u3057\u3066\u3044\u308b HTTP \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3088\u3046\n\nUnity \u6a19\u6e96\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5229\u7528\u3057\u3066\u3044\u308b HTTP \u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3069\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 *Asset Store* \u3067\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b **UniWeb** \u3068\u3044\u3046\u30a2\u30bb\u30c3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```csharp:Request.cs\n#if USE_SSL\n        static bool ValidateServerCertificate (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)\n        {\n            //This is where you implement logic to determine if you trust the certificate.\n            //By default, we trust all certificates.\n            return true;\n        }\n#endif\n```\n\n\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5229\u7528\u8005\u304c\u5b9f\u88c5\u3059\u308b\u5f62\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5168\u3066\u306e\u8a3c\u660e\u66f8\u3092\u4fe1\u983c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## ATS \u3068\u306e\u95a2\u4fc2\n\niOS \u306e ATS \u304c\u6709\u52b9\u306b\u306a\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u975e\u30bb\u30ad\u30e5\u30a2\u306a HTTP \u901a\u4fe1\u306f\u4f7f\u3048\u306a\u304f\u306a\u308a\u307e\u3059\u304c\u3001ATS \u306e\u5236\u9650\u306e\u5bfe\u8c61\u306b\u306a\u308b\u306e\u306f ***NSURLSession*** \u3084 ***NSURLConnection*** \u7b49\u306e API \u3067\u3042\u308a\u3001***System.Net.HttpWebRequest*** \u306e\u5b9f\u88c5\u306f\u3053\u308c\u3089\u306e API \u3092\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u5236\u9650\u306e\u5bfe\u8c61\u5916\u3068\u306a\u308a\u307e\u3059\u3002\n\n> ***[Cocoa Keys](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html) - Using ATS in Apple Frameworks***\nApp Transport Security (ATS) is enforced by the NSURLSession class and all APIs that use it. ATS is automatically enabled when you link your app against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later. (The older NSURLConnection class also enforces ATS when you link against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later.) ATS protections are not available when using lower-level networking APIs provided by Apple, or when using third-party networking libraries.\n\n\n## \u3055\u3044\u3054\u306b\n\nApple \u306e ATS \u5fc5\u9808\u5316\u306f\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u306b\u3068\u3063\u3066\u306f\u3001\u9762\u5012\u304f\u3055\u3044\u5bfe\u5fdc\u3054\u3068\u304c\u5897\u3048\u305f\u3068\u3044\u3046\u5370\u8c61\u306b\u3068\u3089\u3048\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c7\u30d9\u30ed\u30c3\u30d1\u30fc\u306e\u5b89\u6613\u306a HTTP \u306e\u5229\u7528\u3092\u6291\u5236\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30c7\u30fc\u30bf\u901a\u4fe1\u306e\u5b89\u5168\u6027\u3092\u5411\u4e0a\u3055\u305b\u308b\u610f\u56f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u5b88\u308b\u305f\u3081\u3001\u81ea\u793e\u30b5\u30fc\u30d3\u30b9\u3092\u5b88\u308b\u305f\u3081\u3001\u9069\u5207\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u9078\u629e\u3057\u307e\u3057\u3087\u3046\u3002\n", "tags": ["Unity", "iOS", "mono", "C#", "HTTPS"]}