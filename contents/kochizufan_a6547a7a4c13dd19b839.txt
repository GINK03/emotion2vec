{"context": "200\u4e07\u884c\u8fd1\u3044Shapefile\u304c\u3042\u308b\u3058\u3083\u308d\uff1f\nNode.js\u3067\u51e6\u7406\u3057\u3088\u3046\u3068\u601d\u3048\u3070\u3001Shapefile \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3058\u3083\u308d\uff1f\n\u3067\u3001\u5358\u7d14\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u306b\u7b49\u3057\u3044\u51e6\u7406\u3092\u307e\u308f\u3059\u3068...\n\nshapefile\u5358\u7d14\u3076\u3093\u307e\u308f\u3057\nvar shapefile = require(\"shapefile\");\n\nvar count = 0;   \nshapefile.open(\"example.shp\")\n    .then(source => source.read()\n    .then(function log(result) {\n      if (result.done) return;\n      count = count + 1;\n      if (count % 10000 == 0) console.log(count); \n      return source.read().then(log);\n    }))\n  .catch(error => console.error(error.stack));\n\n\n160\u4e07\u884c\u76ee\u304f\u3089\u3044\u3067\u3001\u3053\u3046\u3058\u3083\uff01\n\nWindows\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\n<--- Last few GCs --->\n\n 1775279 ms: Scavenge 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 0.3 / 0 ms (+ 0.0 m\ns in 1 steps since last GC) [allocation failure] [incremental marking delaying m\nark-sweep].\n 1776507 ms: Mark-sweep 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 1227.5 / 0 ms (+\n0.0 ms in 2 steps since start of marking, biggest step 0.0 ms) [last resort gc].\n\n 1777674 ms: Mark-sweep 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 1178.9 / 0 ms [la\nst resort gc].\n\n\n<--- JS stacktrace --->\n\n==== JS stack trace =========================================\n\nSecurity context: 00000114947E3AD1 <JS Object>\n    2: decode [D:\\Works\\XXXXXX XXX\\XXXX\\node_modules\\text-encoding\\lib\\encoding.\njs:1128] [pc=00000318CB0F1257] (this=0000024543C241C9 <a TextDecoder with map 00\n0001CBC3223059>,input=0000015E2DF8DE69 <an Uint8Array with map 0000035139609CC9>\n,options=0000015E2DF8DE31 <an Object with map 00000351396095E9>)\n    3: arguments adaptor frame: 1->2\n    7: _decode [native v8natives.js:1213] [pc=0000031...\n\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n\n\n\u3053\u308c\u4ee5\u4e0a\u306f\u77e5\u8b58\u306a\u3055\u904e\u304e\u3066\u3001Promise\u30cd\u30b9\u30c8\u304b\u518d\u5e30\u30cd\u30b9\u30c8\u304b\u3069\u3063\u3061\u304c\u554f\u984c\u306a\u3093\u304b\u3088\u3046\u308f\u304b\u3089\u3078\u3093\u3051\u3069\u3001160\u4e07\u968e\u5c64\u3082\u30cd\u30b9\u30c8\u3059\u308c\u3070\u307e\u3042\u4f55\u304b\u3057\u3089\u554f\u984c\u3042\u308b\u3093\u3084\u308d\u306a\u3042...\n200\u4e07\u884c\u8fd1\u3044Shapefile\u304c\u3042\u308b\u3058\u3083\u308d\uff1f\n\nNode.js\u3067\u51e6\u7406\u3057\u3088\u3046\u3068\u601d\u3048\u3070\u3001[Shapefile](https://www.npmjs.com/package/shapefile) \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3058\u3083\u308d\uff1f\n\n\u3067\u3001\u5358\u7d14\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u306b\u7b49\u3057\u3044\u51e6\u7406\u3092\u307e\u308f\u3059\u3068...\n\n```js:shapefile\u5358\u7d14\u3076\u3093\u307e\u308f\u3057\nvar shapefile = require(\"shapefile\");\n\nvar count = 0;   \nshapefile.open(\"example.shp\")\n    .then(source => source.read()\n    .then(function log(result) {\n      if (result.done) return;\n      count = count + 1;\n      if (count % 10000 == 0) console.log(count); \n      return source.read().then(log);\n    }))\n  .catch(error => console.error(error.stack));\n```\n\n160\u4e07\u884c\u76ee\u304f\u3089\u3044\u3067\u3001\u3053\u3046\u3058\u3083\uff01\n\n```shell-session:Windows\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\n<--- Last few GCs --->\n\n 1775279 ms: Scavenge 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 0.3 / 0 ms (+ 0.0 m\ns in 1 steps since last GC) [allocation failure] [incremental marking delaying m\nark-sweep].\n 1776507 ms: Mark-sweep 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 1227.5 / 0 ms (+\n0.0 ms in 2 steps since start of marking, biggest step 0.0 ms) [last resort gc].\n\n 1777674 ms: Mark-sweep 1398.3 (1458.1) -> 1398.3 (1458.1) MB, 1178.9 / 0 ms [la\nst resort gc].\n\n\n<--- JS stacktrace --->\n\n==== JS stack trace =========================================\n\nSecurity context: 00000114947E3AD1 <JS Object>\n    2: decode [D:\\Works\\XXXXXX XXX\\XXXX\\node_modules\\text-encoding\\lib\\encoding.\njs:1128] [pc=00000318CB0F1257] (this=0000024543C241C9 <a TextDecoder with map 00\n0001CBC3223059>,input=0000015E2DF8DE69 <an Uint8Array with map 0000035139609CC9>\n,options=0000015E2DF8DE31 <an Object with map 00000351396095E9>)\n    3: arguments adaptor frame: 1->2\n    7: _decode [native v8natives.js:1213] [pc=0000031...\n\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n```\n\n\u3053\u308c\u4ee5\u4e0a\u306f\u77e5\u8b58\u306a\u3055\u904e\u304e\u3066\u3001Promise\u30cd\u30b9\u30c8\u304b\u518d\u5e30\u30cd\u30b9\u30c8\u304b\u3069\u3063\u3061\u304c\u554f\u984c\u306a\u3093\u304b\u3088\u3046\u308f\u304b\u3089\u3078\u3093\u3051\u3069\u3001160\u4e07\u968e\u5c64\u3082\u30cd\u30b9\u30c8\u3059\u308c\u3070\u307e\u3042\u4f55\u304b\u3057\u3089\u554f\u984c\u3042\u308b\u3093\u3084\u308d\u306a\u3042...\n", "tags": ["JavaScript", "Node.js", "promise"]}