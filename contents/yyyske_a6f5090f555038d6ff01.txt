{"tags": ["PlayFramework2.2.3", "Java", "websocket"], "context": " More than 1 year has passed since last update.\u524d\u56de\u304b\u3089\u306e\u7d9a\u304d\u3002Actor\u304c\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u52d5\u304d\u3092\u898b\u3066\u3044\u304f\u3002\u30e1\u30a4\u30f3\u3068\u306a\u308b\u306e\u306fUntypedActor\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9onReceive\u306e\u5b9f\u88c5\u3067\u3042\u308b\u3002\n\nChatRoom.java\n\nChatRoom.java\npackage models;\n\nimport play.mvc.*;\nimport play.libs.*;\nimport play.libs.F.*;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.*;\nimport static akka.pattern.Patterns.ask;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\n\n\nimport java.util.*;\n\nimport static java.util.concurrent.TimeUnit.*;\n\n/**\n * A chat room is an Actor.\n */\npublic class ChatRoom extends UntypedActor {\n\n    // Default room.\n    static ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n\n    // Create a Robot, just for fun.\n    static {\n        new Robot(defaultRoom);\n    }\n\n    /**\n     * Join the default room.\n     */\n    public static void join(final String username, WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out) throws Exception{\n\n        // Send the Join message to the room\n        String result = null;\n        result = (String)Await.result(ask(defaultRoom,new Join(username, out), 1000), Duration.create(1, SECONDS));\n\n        if(\"OK\".equals(result)) {\n\n            // For each event received on the socket,\n            in.onMessage(new Callback<JsonNode>() {\n               public void invoke(JsonNode event) {\n\n                   // Send a Talk message to the room.\n                   defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n\n               } \n            });\n\n            // When the socket is closed.\n            in.onClose(new Callback0() {\n               public void invoke() {\n\n                   // Send a Quit message to the room.\n                   defaultRoom.tell(new Quit(username), null);\n\n               }\n            });\n\n        } else {\n\n            // Cannot connect, create a Json error.\n            ObjectNode error = Json.newObject();\n            error.put(\"error\", result);\n\n            // Send the error to the socket.\n            out.write(error);\n\n        }\n\n    }\n\n    // Members of this room.\n    Map<String, WebSocket.Out<JsonNode>> members = new HashMap<String, WebSocket.Out<JsonNode>>();\n\n    public void onReceive(Object message) throws Exception {\n\n        if(message instanceof Join) {\n\n            // Received a Join message\n            Join join = (Join)message;\n\n            // Check if this username is free.\n            if(members.containsKey(join.username)) {\n                getSender().tell(\"This username is already used\", getSelf());\n            } else {\n                members.put(join.username, join.channel);\n                notifyAll(\"join\", join.username, \"has entered the room\");\n                getSender().tell(\"OK\", getSelf());\n            }\n\n        } else if(message instanceof Talk)  {\n\n            // Received a Talk message\n            Talk talk = (Talk)message;\n\n            notifyAll(\"talk\", talk.username, talk.text);\n\n        } else if(message instanceof Quit)  {\n\n            // Received a Quit message\n            Quit quit = (Quit)message;\n\n            members.remove(quit.username);\n\n            notifyAll(\"quit\", quit.username, \"has left the room\");\n\n        } else {\n            unhandled(message);\n        }\n\n    }\n\n    // Send a Json event to all members\n    public void notifyAll(String kind, String user, String text) {\n        for(WebSocket.Out<JsonNode> channel: members.values()) {\n\n            ObjectNode event = Json.newObject();\n            event.put(\"kind\", kind);\n            event.put(\"user\", user);\n            event.put(\"message\", text);\n\n            ArrayNode m = event.putArray(\"members\");\n            for(String u: members.keySet()) {\n                m.add(u);\n            }\n\n            channel.write(event);\n        }\n    }\n\n    // -- Messages\n\n    public static class Join {\n\n        final String username;\n        final WebSocket.Out<JsonNode> channel;\n\n        public Join(String username, WebSocket.Out<JsonNode> channel) {\n            this.username = username;\n            this.channel = channel;\n        }\n\n    }\n\n    public static class Talk {\n\n        final String username;\n        final String text;\n\n        public Talk(String username, String text) {\n            this.username = username;\n            this.text = text;\n        }\n\n    }\n\n    public static class Quit {\n\n        final String username;\n\n        public Quit(String username) {\n            this.username = username;\n        }\n\n    }\n\n}\n\n\n\nonReceive\u30e1\u30bd\u30c3\u30c9\n\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u3002\n\nJoin\nTalk\nQuit\n\n\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u304c\u4e88\u3081\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u3069\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6e21\u3055\u308c\u305f\u304b\u3092\u5224\u65ad\u3057\u3001\u5206\u5c90\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\nJoin\u306e\u5834\u5408\n\u6e21\u3055\u308c\u305f\u30e6\u30fc\u30b6\u540d\u304c\u65e2\u306bRoom\u5185\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u5834\u5408\u306f\u3001Join\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u308a\u4e3b(getSender()\u3067\u53d6\u5f97\u3002\u3053\u306e\u5834\u5408\u306fask\u3067\u4f5c\u6210\u3055\u308c\u305fPromiseActorRef)\u306b\u3001\u300c\u65e2\u306b\u3042\u308b\u3088\u300d\u3068\u3044\u3046\u65e8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u81ea\u5206\u81ea\u8eab(defaultRoom)\u306e\u53c2\u7167\u3092\u6e21\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u3002\n\u65b0\u898f\u30e6\u30fc\u30b6\u3060\u3063\u305f\u5834\u5408\u306f\u3001defaultRoom\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u305d\u306e\u30e6\u30fc\u30b6\u540d\u3092\u8ffd\u52a0\u3059\u308b\u3002\u307e\u305f\u3001notifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u53c2\u52a0\u3057\u305f\u300d\u65e8\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u300c\u8ab0\u3005\u304c\u5165\u3063\u3066\u304d\u305f\u3088\u300d\u3068\u8868\u793a\u304c\u66f4\u65b0\u3055\u308c\u308b\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u308a\u4e3b\u306eask(PromiseActorRef)\u306b\u306f\u300c\u5165\u5ba4OK\u300d\u306e\u65e8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u3002\u4ee5\u964d\u306e\u6d41\u308c\u306f\u524d\u56de\u898b\u305f\u901a\u308a\u3067\u3042\u308b\u3002\n\nTalk\u306e\u5834\u5408\nnotifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u767a\u8a00\u300d\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u767a\u8a00\u8005\u3068\u767a\u8a00\u5185\u5bb9\u304c\u30bb\u30c3\u30c8\u3067\u66f4\u65b0\u3055\u308c\u308b\u3002\n\nQuit\u306e\u5834\u5408\ndefaultRoom\u306e\u30e1\u30f3\u30d0\u30fc\u4e00\u89a7\u304b\u3089\u30e6\u30fc\u30b6\u540d\u3092\u9664\u53bb\u3002notifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u9000\u51fa\u3057\u305f\u300d\u65e8\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u300c\u8ab0\u3005\u304c\u9000\u51fa\u3057\u305f\u3088\u300d\u3068\u8868\u793a\u304c\u66f4\u65b0\u3055\u308c\u308b\u3002\n\nRobot.java\n\u3072\u3068\u901a\u308a\u898b\u7d42\u308f\u3063\u305f\u3002\u6700\u5f8c\u306bRobot.java\u3092\u898b\u3066\u307f\u308b\u3002Room\u5185\u3067\u5b9a\u671f\u7684\u306b\u3064\u3076\u3084\u3044\u3066\u3044\u308bbot\u3067\u3042\u308b\u3002\n\nRobot.java\npackage models;\n\nimport play.*;\nimport play.mvc.*;\nimport play.libs.*;\n\nimport scala.concurrent.duration.*;\nimport akka.actor.*;\n\nimport com.fasterxml.jackson.databind.JsonNode;\n\nimport static java.util.concurrent.TimeUnit.*;\n\npublic class Robot {\n\n    public Robot(ActorRef chatRoom) {\n\n        // Create a Fake socket out for the robot that log events to the console.\n        WebSocket.Out<JsonNode> robotChannel = new WebSocket.Out<JsonNode>() {\n\n            public void write(JsonNode frame) {\n                Logger.of(\"robot\").info(Json.stringify(frame));\n            }\n\n            public void close() {}\n\n        };\n\n        // Join the room\n        chatRoom.tell(new ChatRoom.Join(\"Robot\", robotChannel), null);\n\n        // Make the robot talk every 30 seconds\n        Akka.system().scheduler().schedule(\n            Duration.create(30, SECONDS),\n            Duration.create(30, SECONDS),\n            chatRoom,\n            new ChatRoom.Talk(\"Robot\", \"I'm still alive\"),\n            Akka.system().dispatcher(),\n            /** sender **/ null\n        );\n\n    }\n\n}\n\n\nChatRoom.java\u306e\u5192\u982d\u3001static\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\ndefaultRoom\u306bJoin\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u5165\u5ba4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u3067Join\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d5\u30a7\u30a4\u30af\u306eWebSocket\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6e21\u3057\u3066\u3044\u308b\u3002bot\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u51fa\u529b\u4f9d\u983c\u304c\u6765\u308b\u3068\u3001\u30ed\u30ac\u30fc\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3059\u3088\u3046\u3001\u51e6\u7406\u3092Override\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3042\u308b\u3002\u3053\u306e\u5834\u5408WebSocket\u672c\u6765\u306eWebSocket\u901a\u4fe1\u306f\u5168\u304f\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u3002\u3061\u3087\u3063\u3068\u5f37\u5f15\u3084\u306a\u3002\n\u540c\u69d8\u306b\u3001\u30eb\u30fc\u30e0\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3082\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304b\u3089\u306eWebSocket\u901a\u4fe1\u3067\u306f\u306a\u304f\u3001\u30b5\u30fc\u30d0\u3067Akka\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f7f\u3063\u3066\u5b9a\u671f\u7684\u306bdefaultRoom\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n\u307e\u3068\u3081\nPlayframework\u4ed8\u5c5e\u306e'websocket-chat'\u30924\u56de\u306b\u6e21\u3063\u3066\u898b\u3066\u6765\u305f\u3002\n\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u305f\u304c\u3001WebSocket\u3068Akka\u306eActor\u3092\u5de7\u307f\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u9593\u3067\u306fWebSocket\u306ein\u3068out\u3067\u901a\u4fe1\u3001\u30b5\u30fc\u30d0\u5185\u3067\u306fAkka\u306eActor\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u3001ask\u3001tell\u3067\u9001\u3063\u3066onReceive\u3067\u53d7\u3051\u53d6\u308b\u3001\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u3068\u308a\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\u6839\u5e79\u90e8\u5206\u304c\u7406\u89e3\u3067\u304d\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u81ea\u5206\u306a\u308a\u306b\u62e1\u5f35\u3057\u3066\u3082\u3063\u3068\u305d\u308c\u3089\u3057\u3044\u30c1\u30e3\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046\uff01\n\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(1/4)\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(2/4)\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(3/4)\n[\u524d\u56de](http://qiita.com/yyyske/items/87c49e925237a208373e)\u304b\u3089\u306e\u7d9a\u304d\u3002Actor\u304c\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u52d5\u304d\u3092\u898b\u3066\u3044\u304f\u3002\u30e1\u30a4\u30f3\u3068\u306a\u308b\u306e\u306fUntypedActor\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9onReceive\u306e\u5b9f\u88c5\u3067\u3042\u308b\u3002\n\n#ChatRoom.java\n\n```java:ChatRoom.java\npackage models;\n\nimport play.mvc.*;\nimport play.libs.*;\nimport play.libs.F.*;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.*;\nimport static akka.pattern.Patterns.ask;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\n\n\nimport java.util.*;\n\nimport static java.util.concurrent.TimeUnit.*;\n\n/**\n * A chat room is an Actor.\n */\npublic class ChatRoom extends UntypedActor {\n    \n    // Default room.\n    static ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n    \n    // Create a Robot, just for fun.\n    static {\n        new Robot(defaultRoom);\n    }\n    \n    /**\n     * Join the default room.\n     */\n    public static void join(final String username, WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out) throws Exception{\n        \n        // Send the Join message to the room\n    \tString result = null;\n        result = (String)Await.result(ask(defaultRoom,new Join(username, out), 1000), Duration.create(1, SECONDS));\n        \n        if(\"OK\".equals(result)) {\n            \n            // For each event received on the socket,\n            in.onMessage(new Callback<JsonNode>() {\n               public void invoke(JsonNode event) {\n                   \n                   // Send a Talk message to the room.\n                   defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n                   \n               } \n            });\n            \n            // When the socket is closed.\n            in.onClose(new Callback0() {\n               public void invoke() {\n                   \n                   // Send a Quit message to the room.\n                   defaultRoom.tell(new Quit(username), null);\n                   \n               }\n            });\n            \n        } else {\n            \n            // Cannot connect, create a Json error.\n            ObjectNode error = Json.newObject();\n            error.put(\"error\", result);\n            \n            // Send the error to the socket.\n            out.write(error);\n            \n        }\n        \n    }\n    \n    // Members of this room.\n    Map<String, WebSocket.Out<JsonNode>> members = new HashMap<String, WebSocket.Out<JsonNode>>();\n    \n    public void onReceive(Object message) throws Exception {\n        \n        if(message instanceof Join) {\n            \n            // Received a Join message\n            Join join = (Join)message;\n            \n            // Check if this username is free.\n            if(members.containsKey(join.username)) {\n                getSender().tell(\"This username is already used\", getSelf());\n            } else {\n                members.put(join.username, join.channel);\n                notifyAll(\"join\", join.username, \"has entered the room\");\n                getSender().tell(\"OK\", getSelf());\n            }\n            \n        } else if(message instanceof Talk)  {\n            \n            // Received a Talk message\n            Talk talk = (Talk)message;\n            \n            notifyAll(\"talk\", talk.username, talk.text);\n            \n        } else if(message instanceof Quit)  {\n            \n            // Received a Quit message\n            Quit quit = (Quit)message;\n            \n            members.remove(quit.username);\n            \n            notifyAll(\"quit\", quit.username, \"has left the room\");\n        \n        } else {\n            unhandled(message);\n        }\n        \n    }\n    \n    // Send a Json event to all members\n    public void notifyAll(String kind, String user, String text) {\n        for(WebSocket.Out<JsonNode> channel: members.values()) {\n            \n            ObjectNode event = Json.newObject();\n            event.put(\"kind\", kind);\n            event.put(\"user\", user);\n            event.put(\"message\", text);\n            \n            ArrayNode m = event.putArray(\"members\");\n            for(String u: members.keySet()) {\n                m.add(u);\n            }\n            \n            channel.write(event);\n        }\n    }\n    \n    // -- Messages\n    \n    public static class Join {\n        \n        final String username;\n        final WebSocket.Out<JsonNode> channel;\n        \n        public Join(String username, WebSocket.Out<JsonNode> channel) {\n            this.username = username;\n            this.channel = channel;\n        }\n        \n    }\n    \n    public static class Talk {\n        \n        final String username;\n        final String text;\n        \n        public Talk(String username, String text) {\n            this.username = username;\n            this.text = text;\n        }\n        \n    }\n    \n    public static class Quit {\n        \n        final String username;\n        \n        public Quit(String username) {\n            this.username = username;\n        }\n        \n    }\n    \n}\n```\n\n##onReceive\u30e1\u30bd\u30c3\u30c9\n\u30e1\u30c3\u30bb\u30fc\u30b8\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u3002\n\n* Join\n* Talk\n* Quit\n\n\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u304c\u4e88\u3081\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u3069\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6e21\u3055\u308c\u305f\u304b\u3092\u5224\u65ad\u3057\u3001\u5206\u5c90\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\n###Join\u306e\u5834\u5408\n\u6e21\u3055\u308c\u305f\u30e6\u30fc\u30b6\u540d\u304c\u65e2\u306bRoom\u5185\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u5834\u5408\u306f\u3001Join\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u308a\u4e3b(getSender()\u3067\u53d6\u5f97\u3002\u3053\u306e\u5834\u5408\u306fask\u3067\u4f5c\u6210\u3055\u308c\u305fPromiseActorRef)\u306b\u3001\u300c\u65e2\u306b\u3042\u308b\u3088\u300d\u3068\u3044\u3046\u65e8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u81ea\u5206\u81ea\u8eab(defaultRoom)\u306e\u53c2\u7167\u3092\u6e21\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u3002\n\n\u65b0\u898f\u30e6\u30fc\u30b6\u3060\u3063\u305f\u5834\u5408\u306f\u3001defaultRoom\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u305d\u306e\u30e6\u30fc\u30b6\u540d\u3092\u8ffd\u52a0\u3059\u308b\u3002\u307e\u305f\u3001notifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u53c2\u52a0\u3057\u305f\u300d\u65e8\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u300c\u8ab0\u3005\u304c\u5165\u3063\u3066\u304d\u305f\u3088\u300d\u3068\u8868\u793a\u304c\u66f4\u65b0\u3055\u308c\u308b\u3002\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u308a\u4e3b\u306eask(PromiseActorRef)\u306b\u306f\u300c\u5165\u5ba4OK\u300d\u306e\u65e8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u3002\u4ee5\u964d\u306e\u6d41\u308c\u306f[\u524d\u56de](http://qiita.com/yyyske/items/87c49e925237a208373e)\u898b\u305f\u901a\u308a\u3067\u3042\u308b\u3002\n\n###Talk\u306e\u5834\u5408\nnotifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u767a\u8a00\u300d\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u767a\u8a00\u8005\u3068\u767a\u8a00\u5185\u5bb9\u304c\u30bb\u30c3\u30c8\u3067\u66f4\u65b0\u3055\u308c\u308b\u3002\n\n###Quit\u306e\u5834\u5408\ndefaultRoom\u306e\u30e1\u30f3\u30d0\u30fc\u4e00\u89a7\u304b\u3089\u30e6\u30fc\u30b6\u540d\u3092\u9664\u53bb\u3002notifyAll\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u30eb\u30fc\u30e0\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306eWebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3001\u300c\u9000\u51fa\u3057\u305f\u300d\u65e8\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eonMessage\u304c\u53cd\u5fdc\u3057\u3001\u300c\u8ab0\u3005\u304c\u9000\u51fa\u3057\u305f\u3088\u300d\u3068\u8868\u793a\u304c\u66f4\u65b0\u3055\u308c\u308b\u3002\n\n#Robot.java\n\u3072\u3068\u901a\u308a\u898b\u7d42\u308f\u3063\u305f\u3002\u6700\u5f8c\u306bRobot.java\u3092\u898b\u3066\u307f\u308b\u3002Room\u5185\u3067\u5b9a\u671f\u7684\u306b\u3064\u3076\u3084\u3044\u3066\u3044\u308bbot\u3067\u3042\u308b\u3002\n\n```java:Robot.java\npackage models;\n\nimport play.*;\nimport play.mvc.*;\nimport play.libs.*;\n\nimport scala.concurrent.duration.*;\nimport akka.actor.*;\n\nimport com.fasterxml.jackson.databind.JsonNode;\n\nimport static java.util.concurrent.TimeUnit.*;\n\npublic class Robot {\n    \n    public Robot(ActorRef chatRoom) {\n        \n        // Create a Fake socket out for the robot that log events to the console.\n        WebSocket.Out<JsonNode> robotChannel = new WebSocket.Out<JsonNode>() {\n            \n            public void write(JsonNode frame) {\n                Logger.of(\"robot\").info(Json.stringify(frame));\n            }\n            \n            public void close() {}\n            \n        };\n        \n        // Join the room\n        chatRoom.tell(new ChatRoom.Join(\"Robot\", robotChannel), null);\n        \n        // Make the robot talk every 30 seconds\n        Akka.system().scheduler().schedule(\n            Duration.create(30, SECONDS),\n            Duration.create(30, SECONDS),\n            chatRoom,\n            new ChatRoom.Talk(\"Robot\", \"I'm still alive\"),\n            Akka.system().dispatcher(),\n            /** sender **/ null\n        );\n        \n    }\n    \n}\n```\nChatRoom.java\u306e\u5192\u982d\u3001static\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\ndefaultRoom\u306bJoin\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u5165\u5ba4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u3053\u3067Join\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d5\u30a7\u30a4\u30af\u306eWebSocket\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u6e21\u3057\u3066\u3044\u308b\u3002bot\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u51fa\u529b\u4f9d\u983c\u304c\u6765\u308b\u3068\u3001\u30ed\u30ac\u30fc\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3059\u3088\u3046\u3001\u51e6\u7406\u3092Override\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3042\u308b\u3002\u3053\u306e\u5834\u5408WebSocket\u672c\u6765\u306eWebSocket\u901a\u4fe1\u306f\u5168\u304f\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u3002\u3061\u3087\u3063\u3068\u5f37\u5f15\u3084\u306a\u3002\n\n\u540c\u69d8\u306b\u3001\u30eb\u30fc\u30e0\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3082\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304b\u3089\u306eWebSocket\u901a\u4fe1\u3067\u306f\u306a\u304f\u3001\u30b5\u30fc\u30d0\u3067Akka\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f7f\u3063\u3066\u5b9a\u671f\u7684\u306bdefaultRoom\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n\n\n#\u307e\u3068\u3081\nPlayframework\u4ed8\u5c5e\u306e'websocket-chat'\u30924\u56de\u306b\u6e21\u3063\u3066\u898b\u3066\u6765\u305f\u3002\n\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u305f\u304c\u3001WebSocket\u3068Akka\u306eActor\u3092\u5de7\u307f\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u51e6\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u9593\u3067\u306fWebSocket\u306ein\u3068out\u3067\u901a\u4fe1\u3001\u30b5\u30fc\u30d0\u5185\u3067\u306fAkka\u306eActor\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u3001ask\u3001tell\u3067\u9001\u3063\u3066onReceive\u3067\u53d7\u3051\u53d6\u308b\u3001\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u3068\u308a\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\n\u6839\u5e79\u90e8\u5206\u304c\u7406\u89e3\u3067\u304d\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u81ea\u5206\u306a\u308a\u306b\u62e1\u5f35\u3057\u3066\u3082\u3063\u3068\u305d\u308c\u3089\u3057\u3044\u30c1\u30e3\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046\uff01\n\n---\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(1/4)](http://qiita.com/yyyske/items/d9e3cf69f7a6f5fb732b)\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(2/4)](http://qiita.com/yyyske/items/0d00e5e352b7078a501e)\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(3/4)](http://qiita.com/yyyske/items/87c49e925237a208373e)\n"}