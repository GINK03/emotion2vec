{"context": "\n\n\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u7bc4\u56f2\n\u30b7\u30f3\u30dc\u30eb\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\u30b3\u30fc\u30c9\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n\n;;; \u95a2\u6570 (SYMBOLP obj) --> boolean\n;;;\n(test (symbolp 'a) t)\n(test (symbolp \"a\") nil)\n(test (symbolp #\\a) nil)\n(test (symbolp 't) t)\n(test (symbolp t) t)\n(test (symbolp 'nil) t)\n(test (symbolp nil) t)\n(test (symbolp '()) t)\n(test (symbolp '*pi*) t)\n(test (symbolp *pi*) nil)\n;;;\n;;;\n;;; \u95a2\u6570 (PROPERTY symbol property-name [obj]) --> <object>\n;;;\n(test (property 'aaa 'bbb) nil)\n(test (property 'aaa 'bbb 'zzz) zzz)\n\n;;;\n;;; \u95a2\u6570 (SET-PROPERTY obj symbol property-name) --> <object>\n;;;\n(test (setf (property 'zeus 'daughter) 'athena) athena)\n(test (set-property 'athena 'zeus 'daughter) athena)\n(test (property 'zeus 'daughter) athena)\n;;;\n(test (list (setf (property 'aaa 'bbb) 'ccc) (property 'aaa 'bbb 'zzz)) \n (ccc ccc) equal)\n(test (list (set-property 'ccc 'aaa 'bbb) (property 'aaa 'bbb 'zzz)) \n (ccc ccc) equal)\n\n;;;\n;;; \u95a2\u6570 (REMOVE-PROPERTY symbol property-name) --> <object>\n;;;\n\n(test (remove-property 'zeus 'daughter) athena)\n;;;\n;;;\n(test (list (remove-property 'aaa 'bbb) (property 'aaa 'bbb 'zzz)) \n (ccc zzz) equal)\n\n;;;\n(defmacro twice (x)\n         (let ((v (gensym)))\n           `(let ((,v ,x)) (+ ,v ,v))))\n(test (twice 5) 10 eql)\n;;;\n;;;\n(test (symbolp (gensym)) t)\n\n\n#\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n#\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n#\u7bc4\u56f2\n\u30b7\u30f3\u30dc\u30eb\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n#\u30b3\u30fc\u30c9\n\n```\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n\n;;; \u95a2\u6570 (SYMBOLP obj) --> boolean\n;;;\n(test (symbolp 'a) t)\n(test (symbolp \"a\") nil)\n(test (symbolp #\\a) nil)\n(test (symbolp 't) t)\n(test (symbolp t) t)\n(test (symbolp 'nil) t)\n(test (symbolp nil) t)\n(test (symbolp '()) t)\n(test (symbolp '*pi*) t)\n(test (symbolp *pi*) nil)\n;;;\n;;;\n;;; \u95a2\u6570 (PROPERTY symbol property-name [obj]) --> <object>\n;;;\n(test (property 'aaa 'bbb) nil)\n(test (property 'aaa 'bbb 'zzz) zzz)\n\n;;;\n;;; \u95a2\u6570 (SET-PROPERTY obj symbol property-name) --> <object>\n;;;\n(test (setf (property 'zeus 'daughter) 'athena) athena)\n(test (set-property 'athena 'zeus 'daughter) athena)\n(test (property 'zeus 'daughter) athena)\n;;;\n(test (list (setf (property 'aaa 'bbb) 'ccc) (property 'aaa 'bbb 'zzz)) \n (ccc ccc) equal)\n(test (list (set-property 'ccc 'aaa 'bbb) (property 'aaa 'bbb 'zzz)) \n (ccc ccc) equal)\n\n;;;\n;;; \u95a2\u6570 (REMOVE-PROPERTY symbol property-name) --> <object>\n;;;\n\n(test (remove-property 'zeus 'daughter) athena)\n;;;\n;;;\n(test (list (remove-property 'aaa 'bbb) (property 'aaa 'bbb 'zzz)) \n (ccc zzz) equal)\n\n;;;\n(defmacro twice (x)\n         (let ((v (gensym)))\n           `(let ((,v ,x)) (+ ,v ,v))))\n(test (twice 5) 10 eql)\n;;;\n;;;\n(test (symbolp (gensym)) t)\n\n```\n", "tags": ["ISLisp", "lisp"]}