{"context": "\u7121\u6599\u30a2\u30ab\u30a6\u30f3\u30c8\u3067 LINE Developer \u306b60\u65e5\u9593\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u3001\u958b\u767a\u8005\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u6709\u52b9\u671f\u9650\u5207\u308c\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3001 \"[WARNING] RE-AUTHENTICATION for LINE developers site\" \u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u306e\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u307f\u305f\u3044\u3002\u3002\n\u30e1\u30fc\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f URL \u3092\u53e9\u304f\u3060\u3051\u3067\u6709\u52b9\u671f\u9650\u304c\u4f38\u3073\u308b\u3093\u3060\u3051\u3069\u30012-3\u56de\u5c4a\u304f\u3063\u307d\u3044\u30e1\u30fc\u30eb\u3092\u898b\u9003\u3057\u305f\u3089\u3001\u7d42\u308f\u308a\u3060\u3088\u306d\u30fb\u30fb\u30fb\u3063\u3066\u3053\u3068\u3067\u3001\u3061\u3087\u3046\u3069 Gmail \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001 Google Apps Script \u3067\u78ba\u5b9f\u306b\u6709\u52b9\u671f\u9650\u3092\u4f38\u3070\u3059\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\nGoogle Drive \u3067 [\u65b0\u898f] > [\u305d\u306e\u4ed6] > [Google Apps Script] \u3092\u4f5c\u6210\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u307e\u308b\u3063\u3068\u30b3\u30d4\u3063\u3066\u3001 SLACK_POST_URL \u306e\u5024\u3067\u3042\u308b Slack \u306e webhook token \u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002 (Slack \u901a\u77e5\u3057\u306a\u3044\u5834\u5408\u306f\u3001 postToSlack \u3092\u547c\u3093\u3067\u3044\u308b\u3068\u3053\u308d\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u3082ok)\n\u305d\u308c\u3067\u3001\u4e00\u65e6 [\u5b9f\u884c] > [triggerMonitor] \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u8a8d\u53ef\u3092\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u3001\u304a\uff4b\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001 [\u30ea\u30bd\u30fc\u30b9] > [\u73fe\u5728\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c8\u30ea\u30ac] \u3067\u65b0\u898f\u30c8\u30ea\u30ac\u3068\u3057\u3066\u3001\u30c7\u30a4\u30ea\u30fc\u3067\u3069\u306e\u6642\u9593\u5e2f\u3067\u3082\u3044\u3044\u306e\u3067 [triggerMonitor] \u3092\u547c\u3076\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3053\u308c\u3067\u5b89\u5fc3\u3057\u3066\u591c\u3082\u5bdd\u308c\u307e\u3059\u3002(\uff40\uff65\u03c9\uff65\u00b4)\n//\n// re-authenticate_line_developer.gs\n//\n// Extend the expiration date of the LINE developer by accessing URL of a notification mail.\n//\n// @author tearoom6 2016/12/15-\n//\n\nvar SLACK_POST_URL = 'https://hooks.slack.com/services/xxxxxx/xxxxxxxxxxxxxxxxxxxx';\nvar SLACK_NOTIFY_CHANNEL = '#general';\nvar SLACK_NOTIFY_FROM_USER = 'Gmail';\nvar SLACK_NOTIFY_TO_USERS = ['tomohiro'];\n\n/**\n * triggerMonitor()\n */\nfunction triggerMonitor() {\n  monitorMails();\n}\n\n/**\n * monitorMails\n */\nfunction monitorMails() {\n  var threads = GmailApp.search('is:unread from:(do_not_reply@line.me) subject:(RE-AUTHENTICATION)');\n  for (var i = 0; i < threads.length; i++) {\n    var messages = threads[i].getMessages();\n    for (var j = 0; j < messages.length; j++) {\n      if (! messages[j].isUnread()) {\n        continue;\n      }\n      var subject = messages[j].getSubject();\n      var messageBody = messages[j].getPlainBody();\n      var receiveDate = messages[j].getDate();\n      var datetime = receiveDate.getFullYear() + '/' + (receiveDate.getMonth() + 1) + '/' + receiveDate.getDate()\n        + ' ' + receiveDate.getHours() + ':' + receiveDate.getMinutes() + ':' + receiveDate.getSeconds();\n      Logger.log(datetime + ' Subject: ' + subject);\n      Logger.log('Body: ' + messageBody);\n\n      var foundUrls = findUrlsInText(messageBody);\n      var extendLink = null;\n      for (var k = 0; k < foundUrls.length; k++) {\n        Logger.log('Found url: ' + foundUrls[k]);\n        if (foundUrls[k].indexOf('re-authenticate') >= 0) {\n          var extendLink = foundUrls[k];\n        }\n      }\n      if (extendLink) {\n        Logger.log('Extend url: ' + extendLink);\n        UrlFetchApp.fetch(extendLink);\n      }\n\n      messages[j].markRead();\n      postToSlack(\"Extend the expiration date of the LINE developer:\\nmail:\" + threads[i].getPermalink(), SLACK_NOTIFY_CHANNEL, SLACK_NOTIFY_FROM_USER, SLACK_NOTIFY_TO_USERS);\n    }\n  }\n}\n\n/**\n * A utility function to find all URLs - FTP, HTTP(S) and Email - in a text string\n * and return them in an array.  Note, the URLs returned are exactly as found in the text.\n * http://stackoverflow.com/questions/4504853/\n *\n * @param {string} text - the text to be searched.\n * @return {array} an array of URLs.\n */\nfunction findUrlsInText(text) {\n  var source = (text || '').toString();\n  var foundUrls = [];\n  var matchArray;\n\n  // Regular expression to find FTP, HTTP(S) and email URLs.\n  var regexToken = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]+@([\\w][\\w\\-]+\\.)+[a-zA-Z]{2,3})/g;\n  // Iterate through any URLs in the text.\n  while( (matchArray = regexToken.exec( source )) !== null ) {\n    var token = matchArray[0];\n    foundUrls.push(token);\n  }\n\n  return foundUrls;\n}\n\n/**\n * postToSlack(message, channel, fromUserName, toUserNames)\n *\n * @param {string} message - the messaage to be post.\n * @param {string} channel - the channel to post message to.\n * @param {string} fromUserName - the user name to be displayed as the sender.\n * @param {array} toUserNames - the user names to notify to.\n */\nfunction postToSlack(message, channel, fromUserName, toUserNames) {\n  var toAnnotations = '';\n  for (var i = 0; i < toUserNames.length; i++) {\n    toAnnotations += ('@' + toUserNames[i] + ' ');\n  }\n  var jsonData = {\n    'channel' : channel,\n    'username' : fromUserName,\n    'text' : toAnnotations + message\n  };\n  var payload = JSON.stringify(jsonData);\n\n  var options = {\n    'method' : 'post',\n    'contentType' : 'application/json',\n    'payload' : payload\n  };\n  UrlFetchApp.fetch(SLACK_POST_URL, options);\n}\n\n\n\u7121\u6599\u30a2\u30ab\u30a6\u30f3\u30c8\u3067 LINE Developer \u306b60\u65e5\u9593\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u3001\u958b\u767a\u8005\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u6709\u52b9\u671f\u9650\u5207\u308c\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3001 \"[WARNING] RE-AUTHENTICATION for LINE developers site\" \u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u306e\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u307f\u305f\u3044\u3002\u3002\n\n\u30e1\u30fc\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f URL \u3092\u53e9\u304f\u3060\u3051\u3067\u6709\u52b9\u671f\u9650\u304c\u4f38\u3073\u308b\u3093\u3060\u3051\u3069\u30012-3\u56de\u5c4a\u304f\u3063\u307d\u3044\u30e1\u30fc\u30eb\u3092\u898b\u9003\u3057\u305f\u3089\u3001\u7d42\u308f\u308a\u3060\u3088\u306d\u30fb\u30fb\u30fb\u3063\u3066\u3053\u3068\u3067\u3001\u3061\u3087\u3046\u3069 Gmail \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001 Google Apps Script \u3067\u78ba\u5b9f\u306b\u6709\u52b9\u671f\u9650\u3092\u4f38\u3070\u3059\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\nGoogle Drive \u3067 [\u65b0\u898f] > [\u305d\u306e\u4ed6] > [Google Apps Script] \u3092\u4f5c\u6210\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u307e\u308b\u3063\u3068\u30b3\u30d4\u3063\u3066\u3001 `SLACK_POST_URL` \u306e\u5024\u3067\u3042\u308b Slack \u306e webhook token \u3092\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002 (Slack \u901a\u77e5\u3057\u306a\u3044\u5834\u5408\u306f\u3001 `postToSlack` \u3092\u547c\u3093\u3067\u3044\u308b\u3068\u3053\u308d\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u3082ok)\n\n\u305d\u308c\u3067\u3001\u4e00\u65e6 [\u5b9f\u884c] > [triggerMonitor] \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u8a8d\u53ef\u3092\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u3001\u304a\uff4b\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001 [\u30ea\u30bd\u30fc\u30b9] > [\u73fe\u5728\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c8\u30ea\u30ac] \u3067\u65b0\u898f\u30c8\u30ea\u30ac\u3068\u3057\u3066\u3001\u30c7\u30a4\u30ea\u30fc\u3067\u3069\u306e\u6642\u9593\u5e2f\u3067\u3082\u3044\u3044\u306e\u3067 [triggerMonitor] \u3092\u547c\u3076\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3053\u308c\u3067\u5b89\u5fc3\u3057\u3066\u591c\u3082\u5bdd\u308c\u307e\u3059\u3002(\uff40\uff65\u03c9\uff65\u00b4)\n\n```javascript\n//\n// re-authenticate_line_developer.gs\n//\n// Extend the expiration date of the LINE developer by accessing URL of a notification mail.\n//\n// @author tearoom6 2016/12/15-\n//\n\nvar SLACK_POST_URL = 'https://hooks.slack.com/services/xxxxxx/xxxxxxxxxxxxxxxxxxxx';\nvar SLACK_NOTIFY_CHANNEL = '#general';\nvar SLACK_NOTIFY_FROM_USER = 'Gmail';\nvar SLACK_NOTIFY_TO_USERS = ['tomohiro'];\n\n/**\n * triggerMonitor()\n */\nfunction triggerMonitor() {\n  monitorMails();\n}\n\n/**\n * monitorMails\n */\nfunction monitorMails() {\n  var threads = GmailApp.search('is:unread from:(do_not_reply@line.me) subject:(RE-AUTHENTICATION)');\n  for (var i = 0; i < threads.length; i++) {\n    var messages = threads[i].getMessages();\n    for (var j = 0; j < messages.length; j++) {\n      if (! messages[j].isUnread()) {\n        continue;\n      }\n      var subject = messages[j].getSubject();\n      var messageBody = messages[j].getPlainBody();\n      var receiveDate = messages[j].getDate();\n      var datetime = receiveDate.getFullYear() + '/' + (receiveDate.getMonth() + 1) + '/' + receiveDate.getDate()\n        + ' ' + receiveDate.getHours() + ':' + receiveDate.getMinutes() + ':' + receiveDate.getSeconds();\n      Logger.log(datetime + ' Subject: ' + subject);\n      Logger.log('Body: ' + messageBody);\n\n      var foundUrls = findUrlsInText(messageBody);\n      var extendLink = null;\n      for (var k = 0; k < foundUrls.length; k++) {\n        Logger.log('Found url: ' + foundUrls[k]);\n        if (foundUrls[k].indexOf('re-authenticate') >= 0) {\n          var extendLink = foundUrls[k];\n        }\n      }\n      if (extendLink) {\n        Logger.log('Extend url: ' + extendLink);\n        UrlFetchApp.fetch(extendLink);\n      }\n\n      messages[j].markRead();\n      postToSlack(\"Extend the expiration date of the LINE developer:\\nmail:\" + threads[i].getPermalink(), SLACK_NOTIFY_CHANNEL, SLACK_NOTIFY_FROM_USER, SLACK_NOTIFY_TO_USERS);\n    }\n  }\n}\n\n/**\n * A utility function to find all URLs - FTP, HTTP(S) and Email - in a text string\n * and return them in an array.  Note, the URLs returned are exactly as found in the text.\n * http://stackoverflow.com/questions/4504853/\n *\n * @param {string} text - the text to be searched.\n * @return {array} an array of URLs.\n */\nfunction findUrlsInText(text) {\n  var source = (text || '').toString();\n  var foundUrls = [];\n  var matchArray;\n\n  // Regular expression to find FTP, HTTP(S) and email URLs.\n  var regexToken = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]+@([\\w][\\w\\-]+\\.)+[a-zA-Z]{2,3})/g;\n  // Iterate through any URLs in the text.\n  while( (matchArray = regexToken.exec( source )) !== null ) {\n    var token = matchArray[0];\n    foundUrls.push(token);\n  }\n\n  return foundUrls;\n}\n\n/**\n * postToSlack(message, channel, fromUserName, toUserNames)\n *\n * @param {string} message - the messaage to be post.\n * @param {string} channel - the channel to post message to.\n * @param {string} fromUserName - the user name to be displayed as the sender.\n * @param {array} toUserNames - the user names to notify to.\n */\nfunction postToSlack(message, channel, fromUserName, toUserNames) {\n  var toAnnotations = '';\n  for (var i = 0; i < toUserNames.length; i++) {\n    toAnnotations += ('@' + toUserNames[i] + ' ');\n  }\n  var jsonData = {\n    'channel' : channel,\n    'username' : fromUserName,\n    'text' : toAnnotations + message\n  };\n  var payload = JSON.stringify(jsonData);\n\n  var options = {\n    'method' : 'post',\n    'contentType' : 'application/json',\n    'payload' : payload\n  };\n  UrlFetchApp.fetch(SLACK_POST_URL, options);\n}\n```\n\n", "tags": ["GoogleAppsScript", "Line"]}