{"context": "\n\nAction\u3092\u4f7f\u3063\u3066\u5feb\u9069\u306aViewModel\u751f\u6d3b\u3092\ud83c\udfc4\n\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3057\u3066\u308b\u4e0a\u3067API\u901a\u4fe1\u306f\u6b20\u304b\u305b\u307e\u305b\u3093\u304c\u3001RxSwift\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u5834\u5408\nAPI\u901a\u4fe1\u3067\u8d77\u3053\u308b\u30a8\u30e9\u30fc\u3092\u6b63\u3057\u304f\u51e6\u7406\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff01\nObservable\u306e\u4ee3\u308f\u308a\u306bDriver\u3092\u4f7f\u3046\u306e\u3082\u4e00\u624b\u3067\u3059\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u304c\u5145\u5b9f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u56f0\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306fAction\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u3066API\u901a\u4fe1\u30fb\u30a8\u30e9\u30fc\u306e\u51e6\u7406\u3092\u884c\u3046\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3059\u3002\n\nRxSwift\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\n\u4f8b\u3048\u3070ViewModel\u3067API\u304b\u3089Foo\u306e\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u3001\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nclass FooViewModel {\n\n    let refreshTrigger = PublishSubject<Void>()\n    let foos = PublishSubject<[Foo]>()\n\n    init() {\n        refreshTrigger\n            .flatMap { APIClient.shared.responseFrom(request) }\n            .bindTo(foos)\n            .addDisposeBag(disposeBag)\n    }\n}\n\n\n\u3057\u304b\u3057\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u3042\u308a\u307e\u3059\n\nResponse\u304c\u30a8\u30e9\u30fc\u3060\u3063\u305f\u5834\u5408\u306bfoos\u306b.error\u304c\u6d41\u308c\u3066\u3057\u307e\u3044UI\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5207\u308c\u3066\u3057\u307e\u3046\u3002\n\nfoos\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc\u304cViewController\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3066\u3057\u307e\u3046\u3002(ReadOnly\u306b\u3059\u308b\u3079\u304d)\n\n\n\u4e0a\u8a18\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass FooViewModel {\n\n    let refreshTrigger = PublishSubject<Void>()\n\n    var foos: Observable<[Foo]> {\n        return foosSubject\n    }\n\n    var error: Observable<Error> {\n        return errorSubject\n    }\n\n    private let foosSubject = PublishSubject<[Foo]>()\n    private let errorSubject = PublishSubject<Error>()\n\n    init() {\n        refreshTrigger\n            .flatMap { [weak self] _ in \n                return APIClient.shared.responseFrom(request)\n                    .catchError { _ in .empty } // catchErrorJustReturn([])\u3082\u53ef\u80fd\n                    .do(onError: { [weak self] error in \n                        self?.errorSubject.onNext(error)\n                    })\n            }\n            .bindTo(foosSubject)\n            .addDisposeBag(disposeBag)\n    }\n}\n\n\nResponse\u304c.error\u306e\u5834\u5408\u306b.empty\u3092\u8fd4\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7dad\u6301\u3059\u308b\nViewModel\u304b\u3089\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092Computed Property\u306b\u3057\u3066\u5916\u90e8\u304b\u3089\u5909\u66f4\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\u30a8\u30e9\u30fc\u3092ViewController\u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\nRxSwift\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u5834\u5408\u3001ViewModel\u306f\u5927\u4f53\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3046\uff01\n\nAction\u3092\u5c0e\u5165\u3059\u308b\ud83c\udfc4\n\nAction\u3063\u3066\u306a\u306b\uff1f\uff1f\n\nGithub\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u30fc\u306f\u3053\u3061\u3089\n\n\n\nReadMe\u306b\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\n\nAn action is a way to say \"hey, later I'll need you to subscribe to this thing.\" It's actually a lot more >involved than that.\nActions accept a workFactory: a closure that takes some input and produces an observable. When execute() is called, it passes its parameter to this closure and subscribes to the work.\n\nCan only be executed while \"enabled\" (true if unspecified).\nOnly execute one thing at a time.\nAggregates next/error events across individual executions.\n\n\n\n\u307e\u3068\u3081\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n\u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308bInput\u3092\u53d7\u3051\u53d6\u308a\u3001workFactory\u3068\u3044\u3046\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u5b9f\u884c\u3057\u3001Output\u3092Observable\u3067\u5410\u304d\u51fa\u3059\u3002\n\u4e00\u5ea6\u306b\u5b9f\u884c\u3067\u304d\u308b\u306e\u306f\uff11\u500b\u3060\u3051(\u76f4\u5217\u51e6\u7406)\n\n.next\u3068.error\u3092\u5225\u3005\u306b\u6271\u3046\n\n\nAction\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\nAction\u306e\u4e2d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\npublic final class Action<Input, Element> {\n    public typealias WorkFactory = (Input) -> Observable<Element>\n    public let workFactory: WorkFactory\n\n    public let inputs = PublishSubject<Input>()\n    public let errors: Observable<ActionError>\n    public let elements: Observable<Element>\n}\n\n\n\u5b9f\u884c\u3055\u308c\u308b\u9806\u5e8f\n\n\ninputs\u3092onNext\u3059\u308b\u306e\u3092\u30c8\u30ea\u30ac\u30fc\u306bworkFactory\u304c\u5b9f\u884c\u3055\u308c\u308b\n\nworkFactory\u306e\u7d50\u679c\u304celements\u306b\u6d41\u308c\u3066\u304f\u308b(\u3053\u308c\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8)\n\u3082\u3057workFactory\u306e\u4e2d\u3067.error\u304c\u8d77\u304d\u305f\u3089errors\u306b\u6d41\u308c\u308b\u3002\n\n\n\u3064\u307e\u308a\u3069\u3046\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304b\uff01\ud83d\udc40\nAction\u3092\u4f7f\u3063\u3066\u4e0a\u306eViewModel\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01\nclass FooViewModel {\n\n    let refreshTrigger = PublishSubject<Void>()\n\n    var foos: Observable<[Foo]> {\n        return refreshAction.elements\n    }\n\n    var error: Observable<Error> {\n        return refreshAction.errors\n            .flatMap { actionError -> Observable<Error> in\n                if case .underlayingError(let error) = actionError {\n                    return Observable.of(error)\n                } else {\n                    return .empty()\n                }\n            }\n    }\n\n    private let refreshAction = Action<Void, [Foo]> { _ in\n        return APIClient.shared.responseFrom(request)\n    }\n\n    init() {\n        refreshTrigger\n            .bindTo(refreshAction.inputs)\n            .addDisposeBag(disposeBag)\n    }\n}\n\n\n\nrefreshAction\u306eInput\u306fVoid\u306a\u306e\u3067refreshTrigger\u3092action\u306einputs\u306b\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u308b\u3002\n\nrefreshTrigger\u304conNext\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067action\u5185\u3067API\u901a\u4fe1\u304c\u884c\u308f\u308c\u308b\u3002\nResponse\u304c\u6307\u5b9a\u3057\u305f\u578b(\u3053\u306e\u5834\u5408\u306f[Foo])\u3067elements\u306b\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u305d\u306e\u307e\u307eComputed Property\u306e\u5024\u306b\u4f7f\u3046\u3002\nError\u306e\u5834\u5408\u306faction\u306eerrors\u306b\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u3053\u308c\u3082\u305d\u306e\u307e\u307eComputed Property\u306e\u5024\u306b\u4f7f\u3046\u3002\n\n\n\u307e\u3068\u3081\n\nAction\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\n\nAPI\u306e\u51e6\u7406\u3092\u5207\u308a\u51fa\u3057\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nError\u304c\u6d41\u308c\u3066\u3057\u307e\u3063\u3066UI\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5207\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u3002\nViewModel\u304b\u3089\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092Computed Property\u3067\u5b9a\u7fa9\u3059\u308b\u6642\u306bPublishSubject\u306a\u3069\u3092\u7d4c\u7531\u3057\u306a\u304f\u3066\u826f\u3044\u3002\n\n\u662f\u975e\u4e00\u5ea6\u30ec\u30dd\u30b8\u30c8\u30ea\u30fc\u3092\u306e\u305e\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ud83d\ude80\n# Action\u3092\u4f7f\u3063\u3066\u5feb\u9069\u306aViewModel\u751f\u6d3b\u3092\ud83c\udfc4\n\n\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3057\u3066\u308b\u4e0a\u3067API\u901a\u4fe1\u306f\u6b20\u304b\u305b\u307e\u305b\u3093\u304c\u3001RxSwift\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u5834\u5408\nAPI\u901a\u4fe1\u3067\u8d77\u3053\u308b\u30a8\u30e9\u30fc\u3092\u6b63\u3057\u304f\u51e6\u7406\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff01\n\n`Observable`\u306e\u4ee3\u308f\u308a\u306b`Driver`\u3092\u4f7f\u3046\u306e\u3082\u4e00\u624b\u3067\u3059\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u304c\u5145\u5b9f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u56f0\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n#### \u4eca\u56de\u306fAction\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u3066API\u901a\u4fe1\u30fb\u30a8\u30e9\u30fc\u306e\u51e6\u7406\u3092\u884c\u3046\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3059\u3002\n\n## RxSwift\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\n\n\u4f8b\u3048\u3070ViewModel\u3067API\u304b\u3089`Foo`\u306e\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u3001\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```swift\nclass FooViewModel {\n    \n    let refreshTrigger = PublishSubject<Void>()\n    let foos = PublishSubject<[Foo]>()\n    \n    init() {\n        refreshTrigger\n            .flatMap { APIClient.shared.responseFrom(request) }\n            .bindTo(foos)\n            .addDisposeBag(disposeBag)\n    }\n}\n```\n\n#### \u3057\u304b\u3057\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u3042\u308a\u307e\u3059\n\n- Response\u304c\u30a8\u30e9\u30fc\u3060\u3063\u305f\u5834\u5408\u306b`foos`\u306b`.error`\u304c\u6d41\u308c\u3066\u3057\u307e\u3044UI\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5207\u308c\u3066\u3057\u307e\u3046\u3002\n- `foos`\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc\u304cViewController\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3066\u3057\u307e\u3046\u3002(ReadOnly\u306b\u3059\u308b\u3079\u304d)\n\n#### \u4e0a\u8a18\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```swift\nclass FooViewModel {\n    \n    let refreshTrigger = PublishSubject<Void>()\n    \n    var foos: Observable<[Foo]> {\n        return foosSubject\n    }\n\n    var error: Observable<Error> {\n        return errorSubject\n    }\n\n    private let foosSubject = PublishSubject<[Foo]>()\n    private let errorSubject = PublishSubject<Error>()\n    \n    init() {\n        refreshTrigger\n            .flatMap { [weak self] _ in \n                return APIClient.shared.responseFrom(request)\n                    .catchError { _ in .empty } // catchErrorJustReturn([])\u3082\u53ef\u80fd\n                    .do(onError: { [weak self] error in \n                        self?.errorSubject.onNext(error)\n                    })\n            }\n            .bindTo(foosSubject)\n            .addDisposeBag(disposeBag)\n    }\n}\n```\n\n- Response\u304c`.error`\u306e\u5834\u5408\u306b`.empty`\u3092\u8fd4\u3057\u3066\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7dad\u6301\u3059\u308b\n- ViewModel\u304b\u3089\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092Computed Property\u306b\u3057\u3066\u5916\u90e8\u304b\u3089\u5909\u66f4\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n- \u30a8\u30e9\u30fc\u3092ViewController\u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n#### RxSwift\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u5834\u5408\u3001ViewModel\u306f\u5927\u4f53\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3046\uff01\n\n## Action\u3092\u5c0e\u5165\u3059\u308b\ud83c\udfc4\n\n### Action\u3063\u3066\u306a\u306b\uff1f\uff1f\n\n- Github\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u30fc\u306f[\u3053\u3061\u3089](https://github.com/RxSwiftCommunity/Action)\n\n\n#### ReadMe\u306b\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\n\n> An action is a way to say \"hey, later I'll need you to subscribe to this thing.\" It's actually a lot more >involved than that.\n>\n>Actions accept a workFactory: a closure that takes some input and produces an observable. When execute() is called, it passes its parameter to this closure and subscribes to the work.\n>\n> - Can only be executed while \"enabled\" (true if unspecified).\n> - Only execute one thing at a time.\n> - Aggregates next/error events across individual executions.\n\n#### \u307e\u3068\u3081\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n- \u30c8\u30ea\u30ac\u30fc\u3068\u306a\u308b`Input`\u3092\u53d7\u3051\u53d6\u308a\u3001`workFactory`\u3068\u3044\u3046\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u5b9f\u884c\u3057\u3001`Output`\u3092`Observable`\u3067\u5410\u304d\u51fa\u3059\u3002\n- \u4e00\u5ea6\u306b\u5b9f\u884c\u3067\u304d\u308b\u306e\u306f\uff11\u500b\u3060\u3051(\u76f4\u5217\u51e6\u7406)\n- `.next`\u3068`.error`\u3092\u5225\u3005\u306b\u6271\u3046\n\n#### Action\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\n\nAction\u306e\u4e2d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n```swift\npublic final class Action<Input, Element> {\n    public typealias WorkFactory = (Input) -> Observable<Element>\n    public let workFactory: WorkFactory\n\n    public let inputs = PublishSubject<Input>()\n    public let errors: Observable<ActionError>\n    public let elements: Observable<Element>\n}\n```\n\n#### \u5b9f\u884c\u3055\u308c\u308b\u9806\u5e8f\n\n1. `inputs`\u3092`onNext`\u3059\u308b\u306e\u3092\u30c8\u30ea\u30ac\u30fc\u306b`workFactory`\u304c\u5b9f\u884c\u3055\u308c\u308b\n2. `workFactory`\u306e\u7d50\u679c\u304c`elements`\u306b\u6d41\u308c\u3066\u304f\u308b(\u3053\u308c\u304c\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8)\n3. \u3082\u3057`workFactory`\u306e\u4e2d\u3067`.error`\u304c\u8d77\u304d\u305f\u3089`errors`\u306b\u6d41\u308c\u308b\u3002\n\n\n### \u3064\u307e\u308a\u3069\u3046\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304b\uff01\ud83d\udc40\n\nAction\u3092\u4f7f\u3063\u3066\u4e0a\u306eViewModel\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01\n\n```swift\nclass FooViewModel {\n    \n    let refreshTrigger = PublishSubject<Void>()\n    \n    var foos: Observable<[Foo]> {\n        return refreshAction.elements\n    }\n    \n    var error: Observable<Error> {\n        return refreshAction.errors\n            .flatMap { actionError -> Observable<Error> in\n                if case .underlayingError(let error) = actionError {\n                    return Observable.of(error)\n                } else {\n                    return .empty()\n                }\n            }\n    }\n    \n    private let refreshAction = Action<Void, [Foo]> { _ in\n        return APIClient.shared.responseFrom(request)\n    }\n    \n    init() {\n        refreshTrigger\n            .bindTo(refreshAction.inputs)\n            .addDisposeBag(disposeBag)\n    }\n}\n```\n\n- `refreshAction`\u306e`Input`\u306f`Void`\u306a\u306e\u3067`refreshTrigger`\u3092`action`\u306e`inputs`\u306b\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u308b\u3002\n- `refreshTrigger`\u304c`onNext`\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067`action`\u5185\u3067API\u901a\u4fe1\u304c\u884c\u308f\u308c\u308b\u3002\n- Response\u304c\u6307\u5b9a\u3057\u305f\u578b(\u3053\u306e\u5834\u5408\u306f`[Foo]`)\u3067`elements`\u306b\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u305d\u306e\u307e\u307eComputed Property\u306e\u5024\u306b\u4f7f\u3046\u3002\n- Error\u306e\u5834\u5408\u306faction\u306e`errors`\u306b\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u3053\u308c\u3082\u305d\u306e\u307e\u307eComputed Property\u306e\u5024\u306b\u4f7f\u3046\u3002\n\n\n### \u307e\u3068\u3081\n\n#### Action\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\n\n- API\u306e\u51e6\u7406\u3092\u5207\u308a\u51fa\u3057\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- Error\u304c\u6d41\u308c\u3066\u3057\u307e\u3063\u3066UI\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5207\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u3002\n- ViewModel\u304b\u3089\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092Computed Property\u3067\u5b9a\u7fa9\u3059\u308b\u6642\u306b`PublishSubject`\u306a\u3069\u3092\u7d4c\u7531\u3057\u306a\u304f\u3066\u826f\u3044\u3002\n\n\u662f\u975e\u4e00\u5ea6\u30ec\u30dd\u30b8\u30c8\u30ea\u30fc\u3092\u306e\u305e\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\ud83d\ude80\n", "tags": ["RxSwift", "Swift", "iOS", "ReactiveX"]}