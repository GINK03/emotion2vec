{"context": "\u95a2\u9023 http://qiita.com/7of9/items/de6c27373f8fe3e9cd92\n\u95a2\u9023 http://qiita.com/7of9/items/42a5a25afdd485d28fb2\n\n\u4ed5\u69d8\n\n\u958b\u59cb\u65e5\u6642: yyyy/mm/dd hh:nn\n\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(hour): \u4f8b 6\n\u73fe\u5728\u6642\u523b: yyyy/mm/dd hh:nn\n\n\u4e0a\u8a18\u306e\u8a2d\u5b9a\u5024\u304b\u3089\u6b21\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3068\u306a\u308b\u65e5\u6642\u3092\u53d6\u5f97\u3059\u308b\u3002\nC\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3002\n\n\u65b9\u6cd51 (now\u304b\u3089\u79d2\u3092\u5897\u3084\u3057\u3066\u3044\u304f\u4f5c\u6226)\n\u5b89\u6613\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001\u73fe\u5728\u6642\u523b\u304b\u3089\u79d2\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304d\u3001[\u958b\u59cb\u65e5\u6642 + N*\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb]\u306e\u65e5\u6642\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u3002\n\ncode\n\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n\nhttp://ideone.com/uD04iM\nloop\u306fideone\u306b\u8ff7\u60d1\u3092\u304b\u3051\u306a\u3044\u305f\u3081\u306e\u4e0a\u9650\u8a2d\u5b9a\u306b\u4f7f\u7528\u3002\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n    struct tm workdt;\n    workdt.tm_isdst = -1; // summer time flag\n    workdt.tm_year = yyyy - 1900;\n    workdt.tm_mon = mm;\n    workdt.tm_mday = dd;\n    workdt.tm_hour = hh;\n    workdt.tm_min = nn;\n    workdt.tm_sec = 0;\n    return mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n    if (dstPtr == NULL) {\n        return; // error\n    }\n    struct tm *workdt;\n    workdt = localtime(&srcdt); \n    workdt->tm_year = workdt->tm_year + 1900;\n    sprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n        workdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n\n    work_sec = now_sec;\n\n//  printf(\"%u\\n\", work_sec);\n//  printf(\"%u\\n\", start_sec + itvl_sec);\n\n    loop = 0;\n    while(loop < 100000) {\n        if ((work_sec - start_sec) % itvl_sec == 0) {\n            break;\n        }\n        work_sec++;\n        loop++;\n    }\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\nint main(void) {\n    time_t start_sec;\n    time_t now_sec;\n    int itvl_hr = 6; // interval in hour\n\n    start_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n    now_sec = getElapsedSecond(2016, 3, 28, 5, 12);\n\n    printNextDateTime_loop(start_sec, now_sec, itvl_hr);\n\n    return 0;\n}\n\n\n\u7d50\u679c\nSuccess time: 0 memory: 2288 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 06:30\n\n\n\n\u65b9\u6cd52 (start\u304b\u3089\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u79d2\u5897\u3084\u3057\u3066\u3044\u304f\u4f5c\u6226)\n\ncode\n\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n\nhttp://ideone.com/ahswrm\nprintNextDateTime_intervalStepLoop()\u3092\u5b9f\u88c5\u3002\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n    struct tm workdt;\n    workdt.tm_isdst = -1; // summer time flag\n    workdt.tm_year = yyyy - 1900;\n    workdt.tm_mon = mm;\n    workdt.tm_mday = dd;\n    workdt.tm_hour = hh;\n    workdt.tm_min = nn;\n    workdt.tm_sec = 0;\n    return mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n    if (dstPtr == NULL) {\n        return; // error\n    }\n    struct tm *workdt;\n    workdt = localtime(&srcdt); \n    workdt->tm_year = workdt->tm_year + 1900;\n    sprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n        workdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n\n    work_sec = now_sec;\n\n//  printf(\"%u\\n\", work_sec);\n//  printf(\"%u\\n\", start_sec + itvl_sec);\n\n    loop = 0;\n    while(loop < 100000) {\n        if ((work_sec - start_sec) % itvl_sec == 0) {\n            break;\n        }\n        work_sec++;\n        loop++;\n    }\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_intervalStepLoop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n\n    work_sec = now_sec;\n\n//  printf(\"%u\\n\", work_sec);\n//  printf(\"%u\\n\", start_sec + itvl_sec);\n\n    loop = 0;\n    work_sec = start_sec;\n    while(loop < 100) {\n        if (work_sec >= now_sec) {\n            break;\n        }\n        work_sec += itvl_sec;\n        loop++;\n    }\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\n\nint main(void) {\n    time_t start_sec;\n    time_t now_sec;\n    int itvl_hr = 6; // interval in hour\n\n    start_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n    now_sec = getElapsedSecond(2016, 3, 28, 0, 30);\n\n    printNextDateTime_loop(start_sec, now_sec, itvl_hr);\n    printNextDateTime_intervalStepLoop(start_sec, now_sec, itvl_hr);\n\n    return 0;\n}\n\n\n\u7d50\u679c\nSuccess time: 0 memory: 2288 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\n\n\nnow\u304cstart + N*\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u4e01\u5ea6\u3067\u306e\u7d50\u679c\u3002\u4e01\u5ea6\u3067\u306a\u3044\u5834\u5408\u3082\u78ba\u8a8d\u3057\u305f\u3002\n\n\u65b9\u6cd53 (N\u500d\u3092\u8a08\u7b97\u3059\u308b)\n\n\u65b9\u6cd5\n\n\u3042\u308b\u3044\u306f\n\n\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u3002\nint\u578b\u3067\u306e\u5272\u308a\u7b97\u306f\u5c0f\u3055\u3044\u65b9\u306e\u6570\u5024\u306b\u306a\u308b\uff08\u306f\u305a\uff09\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306e2\u30b1\u30fc\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\uff08\u306f\u305a\uff09\u3002\nntimes = (int)(now_sec - start_sec) / itvl_sec;\nwork_sec = start_sec + ntimes * itvl_sec;\n\n\ncode\n\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n\nhttp://ideone.com/mcod6d\nprintNextDateTime_calcNtimes()\u3068\u3057\u3066\u5b9f\u88c5\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n    struct tm workdt;\n    workdt.tm_isdst = -1; // summer time flag\n    workdt.tm_year = yyyy - 1900;\n    workdt.tm_mon = mm;\n    workdt.tm_mday = dd;\n    workdt.tm_hour = hh;\n    workdt.tm_min = nn;\n    workdt.tm_sec = 0;\n    return mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n    if (dstPtr == NULL) {\n        return; // error\n    }\n    struct tm *workdt;\n    workdt = localtime(&srcdt); \n    workdt->tm_year = workdt->tm_year + 1900;\n    sprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n        workdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n\n    work_sec = now_sec;\n\n//  printf(\"%u\\n\", work_sec);\n//  printf(\"%u\\n\", start_sec + itvl_sec);\n\n    loop = 0;\n    while(loop < 100000) {\n        if ((work_sec - start_sec) % itvl_sec == 0) {\n            break;\n        }\n        work_sec++;\n        loop++;\n    }\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_intervalStepLoop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n\n    work_sec = now_sec;\n\n//  printf(\"%u\\n\", work_sec);\n//  printf(\"%u\\n\", start_sec + itvl_sec);\n\n    loop = 0;\n    work_sec = start_sec;\n    while(loop < 100) {\n        if (work_sec >= now_sec) {\n            break;\n        }\n        work_sec += itvl_sec;\n        loop++;\n    }\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_calcNtimes(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n    char szBuf[100];\n    time_t work_sec;\n    time_t loop;\n    time_t itvl_sec = itvl_hr * 60 * 60;\n    int ntimes;\n\n    work_sec = now_sec;\n\n    ntimes = (int)(now_sec - start_sec) / itvl_sec;\n    work_sec = start_sec + ntimes * itvl_sec;\n\n// //   printf(\"%u\\n\", work_sec);\n// //   printf(\"%u\\n\", start_sec + itvl_sec);\n\n    printf(\"interval(hour)=%d\\n\", itvl_hr);\n    getDateTimeString(start_sec, szBuf);\n    printf(\"start:%s\\n\", szBuf);\n    getDateTimeString(work_sec, szBuf);\n    printf(\"next :%s\\n\", szBuf);\n}\n\n\n\nint main(void) {\n    time_t start_sec;\n    time_t now_sec;\n    int itvl_hr = 6; // interval in hour\n\n    start_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n    now_sec = getElapsedSecond(2016, 3, 28, 0, 30);\n\n    printNextDateTime_loop(start_sec, now_sec, itvl_hr);\n    printNextDateTime_calcNtimes(start_sec, now_sec, itvl_hr);\n\n    return 0;\n}\n\n\n\u7d50\u679c\nSuccess time: 0 memory: 2244 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\n\n\n\nNow\u3068Next\u306e\u91cd\u306a\u308a\nNow\u3068Next\u304c\u91cd\u306a\u3063\u305f\u3068\u304d\u306bNext\u3092Now + itvl_sec\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u5225\u9014\u3001\u8981\u691c\u8a0e\u3002\n\u95a2\u9023 http://qiita.com/7of9/items/de6c27373f8fe3e9cd92\n\u95a2\u9023 http://qiita.com/7of9/items/42a5a25afdd485d28fb2\n\n## \u4ed5\u69d8\n\n- \u958b\u59cb\u65e5\u6642: yyyy/mm/dd hh:nn\n- \u30a4\u30f3\u30bf\u30fc\u30d0\u30eb(hour): \u4f8b 6\n- \u73fe\u5728\u6642\u523b: yyyy/mm/dd hh:nn\n\n\u4e0a\u8a18\u306e\u8a2d\u5b9a\u5024\u304b\u3089\u6b21\u306e\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u3068\u306a\u308b\u65e5\u6642\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nC\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3002\n\n\n## \u65b9\u6cd51 (now\u304b\u3089\u79d2\u3092\u5897\u3084\u3057\u3066\u3044\u304f\u4f5c\u6226)\n\n\u5b89\u6613\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001\u73fe\u5728\u6642\u523b\u304b\u3089\u79d2\u6570\u3092\u52a0\u7b97\u3057\u3066\u3044\u304d\u3001[\u958b\u59cb\u65e5\u6642 + N*\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb]\u306e\u65e5\u6642\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u3002\n\n\n### code\n\n<font color=red>\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n</font>\n\n\nhttp://ideone.com/uD04iM\n\nloop\u306fideone\u306b\u8ff7\u60d1\u3092\u304b\u3051\u306a\u3044\u305f\u3081\u306e\u4e0a\u9650\u8a2d\u5b9a\u306b\u4f7f\u7528\u3002\n\n```\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n\tstruct tm workdt;\n\tworkdt.tm_isdst = -1; // summer time flag\n\tworkdt.tm_year = yyyy - 1900;\n\tworkdt.tm_mon = mm;\n\tworkdt.tm_mday = dd;\n\tworkdt.tm_hour = hh;\n\tworkdt.tm_min = nn;\n\tworkdt.tm_sec = 0;\n\treturn mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n\tif (dstPtr == NULL) {\n\t\treturn; // error\n\t}\n\tstruct tm *workdt;\n\tworkdt = localtime(&srcdt);\t\n\tworkdt->tm_year = workdt->tm_year + 1900;\n\tsprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n\t\tworkdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\n\twork_sec = now_sec;\n\n//\tprintf(\"%u\\n\", work_sec);\n//\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tloop = 0;\n\twhile(loop < 100000) {\n\t\tif ((work_sec - start_sec) % itvl_sec == 0) {\n\t\t\tbreak;\n\t\t}\n\t\twork_sec++;\n\t\tloop++;\n\t}\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\nint main(void) {\n\ttime_t start_sec;\n\ttime_t now_sec;\n\tint itvl_hr = 6; // interval in hour\n\t\n\tstart_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n\tnow_sec = getElapsedSecond(2016, 3, 28, 5, 12);\n\t\n\tprintNextDateTime_loop(start_sec, now_sec, itvl_hr);\n\t\n\treturn 0;\n}\n```\n\n```txt:\u7d50\u679c\nSuccess\ttime: 0 memory: 2288 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 06:30\n```\n\n## \u65b9\u6cd52 (start\u304b\u3089\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u79d2\u5897\u3084\u3057\u3066\u3044\u304f\u4f5c\u6226)\n\n### code\n\n<font color=red>\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n</font>\n\nhttp://ideone.com/ahswrm\n\nprintNextDateTime_intervalStepLoop()\u3092\u5b9f\u88c5\u3002\n\n```\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n\tstruct tm workdt;\n\tworkdt.tm_isdst = -1; // summer time flag\n\tworkdt.tm_year = yyyy - 1900;\n\tworkdt.tm_mon = mm;\n\tworkdt.tm_mday = dd;\n\tworkdt.tm_hour = hh;\n\tworkdt.tm_min = nn;\n\tworkdt.tm_sec = 0;\n\treturn mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n\tif (dstPtr == NULL) {\n\t\treturn; // error\n\t}\n\tstruct tm *workdt;\n\tworkdt = localtime(&srcdt);\t\n\tworkdt->tm_year = workdt->tm_year + 1900;\n\tsprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n\t\tworkdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\n\twork_sec = now_sec;\n\n//\tprintf(\"%u\\n\", work_sec);\n//\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tloop = 0;\n\twhile(loop < 100000) {\n\t\tif ((work_sec - start_sec) % itvl_sec == 0) {\n\t\t\tbreak;\n\t\t}\n\t\twork_sec++;\n\t\tloop++;\n\t}\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_intervalStepLoop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\n\twork_sec = now_sec;\n\n//\tprintf(\"%u\\n\", work_sec);\n//\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tloop = 0;\n\twork_sec = start_sec;\n\twhile(loop < 100) {\n\t\tif (work_sec >= now_sec) {\n\t\t\tbreak;\n\t\t}\n\t\twork_sec += itvl_sec;\n\t\tloop++;\n\t}\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\n\nint main(void) {\n\ttime_t start_sec;\n\ttime_t now_sec;\n\tint itvl_hr = 6; // interval in hour\n\t\n\tstart_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n\tnow_sec = getElapsedSecond(2016, 3, 28, 0, 30);\n\t\n\tprintNextDateTime_loop(start_sec, now_sec, itvl_hr);\n\tprintNextDateTime_intervalStepLoop(start_sec, now_sec, itvl_hr);\n\t\n\treturn 0;\n}\n```\n\n```txt:\u7d50\u679c\nSuccess\ttime: 0 memory: 2288 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\n```\n\nnow\u304c`start + N*\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb`\u4e01\u5ea6\u3067\u306e\u7d50\u679c\u3002\u4e01\u5ea6\u3067\u306a\u3044\u5834\u5408\u3082\u78ba\u8a8d\u3057\u305f\u3002\n\n## \u65b9\u6cd53 (N\u500d\u3092\u8a08\u7b97\u3059\u308b)\n\n### \u65b9\u6cd5\n\n![](http://yuml.me/diagram/class/[Start]-->[1 x itvl], [1 x itvl]-Now->[Next(2 x itvl)])\n\n\u3042\u308b\u3044\u306f\n\n![](http://yuml.me/diagram/class/[Start]-->[1 x itvl], [1 x itvl]-->[Now|Next(2 x itvl)])\n\n\n\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u3002\nint\u578b\u3067\u306e\u5272\u308a\u7b97\u306f\u5c0f\u3055\u3044\u65b9\u306e\u6570\u5024\u306b\u306a\u308b\uff08\u306f\u305a\uff09\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306e2\u30b1\u30fc\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\uff08\u306f\u305a\uff09\u3002\n\n```\nntimes = (int)(now_sec - start_sec) / itvl_sec;\nwork_sec = start_sec + ntimes * itvl_sec;\n```\n\n\n### code\n\n<font color=red>\n(\u8ffd\u8a18 2016/03/31)\nworkdt.tm_mon = mm;\u306f\u9593\u9055\u3044\u306e\u3088\u3046\u3067\u3059\u3002\nworkdt.tm_mon = mm - 1; // \u6708\uff08 1\u6708\uff1d0 \uff09\n</font>\n\nhttp://ideone.com/mcod6d\n\nprintNextDateTime_calcNtimes()\u3068\u3057\u3066\u5b9f\u88c5\n\n```\n#include <stdio.h>\n#include <time.h> // \u8a66\u9a13\u7528\u306e\u79d2\u3092\u5f97\u308b\u305f\u3081\u306b\u4f7f\u7528. \u958b\u767a\u74b0\u5883\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\n\ntime_t getElapsedSecond(int yyyy, int mm, int dd, int hh, int nn){\n\tstruct tm workdt;\n\tworkdt.tm_isdst = -1; // summer time flag\n\tworkdt.tm_year = yyyy - 1900;\n\tworkdt.tm_mon = mm;\n\tworkdt.tm_mday = dd;\n\tworkdt.tm_hour = hh;\n\tworkdt.tm_min = nn;\n\tworkdt.tm_sec = 0;\n\treturn mktime(&workdt);\n}\n\nvoid getDateTimeString(time_t srcdt, char *dstPtr)\n{\n\tif (dstPtr == NULL) {\n\t\treturn; // error\n\t}\n\tstruct tm *workdt;\n\tworkdt = localtime(&srcdt);\t\n\tworkdt->tm_year = workdt->tm_year + 1900;\n\tsprintf(dstPtr, \"%04d/%02d/%02d %02d:%02d\", workdt->tm_year, workdt->tm_mon, workdt->tm_mday, \n\t\tworkdt->tm_hour, workdt->tm_min);\n}\n\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0a\u306f\u958b\u767a\u74b0\u5883\u306b\u306a\u3044\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u30022\u3064\u306e\u65e5\u6642\u306e\u79d2\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u7528\n//\n//----- \u3053\u3061\u3089\u304b\u3089\u4e0b\u306b\u8a66\u9a13\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9f\u88c5\n\nvoid printNextDateTime_loop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\n\twork_sec = now_sec;\n\n//\tprintf(\"%u\\n\", work_sec);\n//\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tloop = 0;\n\twhile(loop < 100000) {\n\t\tif ((work_sec - start_sec) % itvl_sec == 0) {\n\t\t\tbreak;\n\t\t}\n\t\twork_sec++;\n\t\tloop++;\n\t}\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_intervalStepLoop(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\n\twork_sec = now_sec;\n\n//\tprintf(\"%u\\n\", work_sec);\n//\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tloop = 0;\n\twork_sec = start_sec;\n\twhile(loop < 100) {\n\t\tif (work_sec >= now_sec) {\n\t\t\tbreak;\n\t\t}\n\t\twork_sec += itvl_sec;\n\t\tloop++;\n\t}\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\nvoid printNextDateTime_calcNtimes(time_t start_sec, time_t now_sec, int itvl_hr)\n{\n\tchar szBuf[100];\n\ttime_t work_sec;\n\ttime_t loop;\n\ttime_t itvl_sec = itvl_hr * 60 * 60;\n\tint ntimes;\n\n\twork_sec = now_sec;\n\t\n\tntimes = (int)(now_sec - start_sec) / itvl_sec;\n\twork_sec = start_sec + ntimes * itvl_sec;\n\n// //\tprintf(\"%u\\n\", work_sec);\n// //\tprintf(\"%u\\n\", start_sec + itvl_sec);\n\n\tprintf(\"interval(hour)=%d\\n\", itvl_hr);\n\tgetDateTimeString(start_sec, szBuf);\n\tprintf(\"start:%s\\n\", szBuf);\n\tgetDateTimeString(work_sec, szBuf);\n\tprintf(\"next :%s\\n\", szBuf);\n}\n\n\n\nint main(void) {\n\ttime_t start_sec;\n\ttime_t now_sec;\n\tint itvl_hr = 6; // interval in hour\n\t\n\tstart_sec = getElapsedSecond(2016, 3, 27, 18, 30);\n\tnow_sec = getElapsedSecond(2016, 3, 28, 0, 30);\n\t\n\tprintNextDateTime_loop(start_sec, now_sec, itvl_hr);\n\tprintNextDateTime_calcNtimes(start_sec, now_sec, itvl_hr);\n\t\n\treturn 0;\n}\n```\n\n```txt:\u7d50\u679c\nSuccess\ttime: 0 memory: 2244 signal:0\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\ninterval(hour)=6\nstart:2016/03/27 18:30\nnext :2016/03/28 00:30\n```\n\n\n## Now\u3068Next\u306e\u91cd\u306a\u308a\n\nNow\u3068Next\u304c\u91cd\u306a\u3063\u305f\u3068\u304d\u306bNext\u3092`Now + itvl_sec`\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u5225\u9014\u3001\u8981\u691c\u8a0e\u3002\n\n\n", "tags": ["C", "time.h", "datetime"]}