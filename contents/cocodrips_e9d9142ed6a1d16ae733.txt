{"context": "\u3064\u3044\u306b\u30ea\u30b9\u30c8\u304c\u4f7f\u3048\u308b\uff01\nSICP/2.2.1.scm at master \u00b7 cocodrips/SICP\n\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #17 (2.2 ~ 2.2.1) - connpass\n;; list\n(define l (list 1 2 3 4))\n\n(display l) ;(1 2 3 4)\n(newline)\n\n(display (cdr l)) ;(2 3 4)\n(newline)\n\n;; n\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\n(display \"=====list-ref n\u756a\u76ee\u306e\u8981\u7d20=====\")\n(newline)\n(define (list-ref items n)\n    (if (= n 0)\n        (car items)\n        (list-ref (cdr items) (- n 1))))\n(define squares (list 1 4 9 16 25))\n(display squares)\n(newline)\n(display \"list-ref 3: \")\n(display (list-ref squares 3))\n(newline)\n;(1 4 9 16 25)\n;list-ref 3: 16\n\n;; \u9577\u3055\n(display \"=====length=====\")\n(newline)\n(define (len items)\n    (if (null? items)\n        0\n        (+ 1 (len (cdr items)))))\n(display \"Length: \")\n(display (len squares))\n(newline)\n;; length\u306f\u5b9a\u7fa9\u6e08\u307f\u3060\u3063\u305f\u306e\u3067 len\u3092\u5b9a\u7fa9\n\n\n;; \u30ea\u30b9\u30c8\u306e\u5408\u6210\n(display \"=====append \u30ea\u30b9\u30c8\u306e\u5408\u6210=====\")\n(newline)\n(define (append list1 list2)\n    (if (null? list1)\n        list2\n        (cons (car list1) (append (cdr list1) list2)) ) )\n\n(define l2 (list 1 2 3))\n(display l2)\n(display \" + \")\n(display squares)\n(display \" = \")\n(display (append l2 squares))\n(newline)\n;(1 2 3) + (1 4 9 16 25) = (1 2 3 1 4 9 16 25)\n\n\nEx 2.17\nlist\u306e\u6700\u5f8c\u306e\u8981\u7d20\n(display \"=====Ex 2.17=====\")\n(newline)\n;; \u6700\u5f8c\u306e\u8981\u7d20\u3092\u8fd4\u3059last-pair\u3092\u5b9a\u7fa9\n\n(define (last-pair items)\n    (if (null? (cdr items))\n        items\n        (last-pair (cdr items))))\n\n(display (last-pair squares))\n(newline)\n;(25)\n\n\nEx 2.18\n(display \"=====Ex 2.18=====\")\n(newline)\n;; \u30ea\u30b9\u30c8\u3092\u9006\u9806\u306b\u8fd4\u3059\n\n(define (reverse items)\n    (define (itr src dist)\n        (if (null? src)\n            dist\n            (itr (cdr src) (cons (car src) dist))))\n    (itr items (list)))\n\n(display (reverse squares))\n;(25 16 9 4 1)\n(newline)\n\n\nEx 2.19\n(display \"=====Ex 2.19=====\")\n(newline)\n(define us-coins (list 50 25 10 5 1))\n(define uk-coins (list 100 50 20 10 5 2 1 0.5))\n\n\n(define (cc amount coin-values)\n    (cond \n        ((= amount 0) 1)\n        ((or (< amount 0) (no-more? coin-values)) 0)\n        (else\n            (+ \n                (cc amount (except-first-denomination coin-values))\n                (cc (- amount (first-denomination coin-values)) coin-values ))\n        )))\n(define (no-more? l) (null? l))\n(define (except-first-denomination l) (cdr l))\n(define (first-denomination l) (car l))\n\n(display (cc 100 us-coins)) ;292\n(newline)\n\n\nEx 2.20\n(display \"=====Ex 2.20=====\")\n(newline)\n\n(define (same-parity . l)\n    (define (itr base src dist)\n        (if (null? src)\n            dist\n            (if (= (remainder (car src) 2) base)\n                (itr base (cdr src) (append dist (list (car src))))\n                (itr base (cdr src) dist))))\n    (itr (remainder (car l) 2) l (list)))\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n\n\nEx 2.20 \u5225\u89e3\u6cd5 filter\n;; Filter\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u3063\u307d\u3044\uff01\n(define (filter l f)\n    (cond \n        ((null? l) (list))\n        ((f (car l)) (cons (car l) (filter (cdr l) f)))\n    (else (filter (cdr l) f))))\n\n(define (same-parity . l)\n    (filter l (lambda (x) (= (remainder x 2) (remainder (car l) 2)))))\n\n\n(display \"=====Ex 2.20 filter=====\")\n(newline)\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n\n\n\u5225\u89e3\u653e filter && reverse\u3067stack\u7bc0\u7d04\n(display \"=====Ex 2.20 reverse=====\")\n(newline)\n\n;; reverse\u5f8c\u304b\u3089\u3059\u308b\u3053\u3068\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u6d88\u8cbb\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\uff1f\n(define (filter l f)\n    (define (filter-itr l f dist)\n        (cond \n            ((null? l) dist)\n            ((f (car l)) (filter-itr (cdr l) f (cons (car l) dist)))\n        (else (filter-itr (cdr l) f dist))))\n    (reverse (filter-itr l f (list))))\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n\n\n\u3064\u3044\u306b\u30ea\u30b9\u30c8\u304c\u4f7f\u3048\u308b\uff01\n[SICP/2.2.1.scm at master \u00b7 cocodrips/SICP](https://github.com/cocodrips/SICP/blob/master/2.1/2.2.1.scm)\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #17 (2.2 ~ 2.2.1) - connpass](http://ladiespp.connpass.com/event/36381/)\n\n```lisp\n;; list\n(define l (list 1 2 3 4))\n\n(display l) ;(1 2 3 4)\n(newline)\n\n(display (cdr l)) ;(2 3 4)\n(newline)\n\n;; n\u756a\u76ee\u306e\u8981\u7d20\u3092\u8fd4\u3059\n(display \"=====list-ref n\u756a\u76ee\u306e\u8981\u7d20=====\")\n(newline)\n(define (list-ref items n)\n    (if (= n 0)\n        (car items)\n        (list-ref (cdr items) (- n 1))))\n(define squares (list 1 4 9 16 25))\n(display squares)\n(newline)\n(display \"list-ref 3: \")\n(display (list-ref squares 3))\n(newline)\n;(1 4 9 16 25)\n;list-ref 3: 16\n\n;; \u9577\u3055\n(display \"=====length=====\")\n(newline)\n(define (len items)\n    (if (null? items)\n        0\n        (+ 1 (len (cdr items)))))\n(display \"Length: \")\n(display (len squares))\n(newline)\n;; length\u306f\u5b9a\u7fa9\u6e08\u307f\u3060\u3063\u305f\u306e\u3067 len\u3092\u5b9a\u7fa9\n\n\n;; \u30ea\u30b9\u30c8\u306e\u5408\u6210\n(display \"=====append \u30ea\u30b9\u30c8\u306e\u5408\u6210=====\")\n(newline)\n(define (append list1 list2)\n    (if (null? list1)\n        list2\n        (cons (car list1) (append (cdr list1) list2)) ) )\n\n(define l2 (list 1 2 3))\n(display l2)\n(display \" + \")\n(display squares)\n(display \" = \")\n(display (append l2 squares))\n(newline)\n;(1 2 3) + (1 4 9 16 25) = (1 2 3 1 4 9 16 25)\n```\n\n\n## Ex 2.17\n\nlist\u306e\u6700\u5f8c\u306e\u8981\u7d20\n\n```lisp\n(display \"=====Ex 2.17=====\")\n(newline)\n;; \u6700\u5f8c\u306e\u8981\u7d20\u3092\u8fd4\u3059last-pair\u3092\u5b9a\u7fa9\n\n(define (last-pair items)\n    (if (null? (cdr items))\n        items\n        (last-pair (cdr items))))\n\n(display (last-pair squares))\n(newline)\n;(25)\n```\n## Ex 2.18\n\n```lisp\n(display \"=====Ex 2.18=====\")\n(newline)\n;; \u30ea\u30b9\u30c8\u3092\u9006\u9806\u306b\u8fd4\u3059\n\n(define (reverse items)\n    (define (itr src dist)\n        (if (null? src)\n            dist\n            (itr (cdr src) (cons (car src) dist))))\n    (itr items (list)))\n\n(display (reverse squares))\n;(25 16 9 4 1)\n(newline)\n```\n\n## Ex 2.19\n\n```lisp\n(display \"=====Ex 2.19=====\")\n(newline)\n(define us-coins (list 50 25 10 5 1))\n(define uk-coins (list 100 50 20 10 5 2 1 0.5))\n\n\n(define (cc amount coin-values)\n    (cond \n        ((= amount 0) 1)\n        ((or (< amount 0) (no-more? coin-values)) 0)\n        (else\n            (+ \n                (cc amount (except-first-denomination coin-values))\n                (cc (- amount (first-denomination coin-values)) coin-values ))\n        )))\n(define (no-more? l) (null? l))\n(define (except-first-denomination l) (cdr l))\n(define (first-denomination l) (car l))\n\n(display (cc 100 us-coins)) ;292\n(newline)\n```\n\n## Ex 2.20\n\n```lisp\n(display \"=====Ex 2.20=====\")\n(newline)\n\n(define (same-parity . l)\n    (define (itr base src dist)\n        (if (null? src)\n            dist\n            (if (= (remainder (car src) 2) base)\n                (itr base (cdr src) (append dist (list (car src))))\n                (itr base (cdr src) dist))))\n    (itr (remainder (car l) 2) l (list)))\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n```\n\n### Ex 2.20 \u5225\u89e3\u6cd5 filter\n\n```lisp\n;; Filter\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u3063\u307d\u3044\uff01\n(define (filter l f)\n    (cond \n        ((null? l) (list))\n        ((f (car l)) (cons (car l) (filter (cdr l) f)))\n    (else (filter (cdr l) f))))\n\n(define (same-parity . l)\n    (filter l (lambda (x) (= (remainder x 2) (remainder (car l) 2)))))\n\n\n(display \"=====Ex 2.20 filter=====\")\n(newline)\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n```\n\n### \u5225\u89e3\u653e filter && reverse\u3067stack\u7bc0\u7d04\n\n```lisp\n(display \"=====Ex 2.20 reverse=====\")\n(newline)\n\n;; reverse\u5f8c\u304b\u3089\u3059\u308b\u3053\u3068\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u6d88\u8cbb\u3057\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\uff1f\n(define (filter l f)\n    (define (filter-itr l f dist)\n        (cond \n            ((null? l) dist)\n            ((f (car l)) (filter-itr (cdr l) f (cons (car l) dist)))\n        (else (filter-itr (cdr l) f dist))))\n    (reverse (filter-itr l f (list))))\n\n(display (same-parity 1 2 3 4 5)) \n(newline)\n;(1 3 5)\n\n(display (same-parity 2 3 4 5 6 10))\n(newline)\n;(2 4 6 10)\n```\n", "tags": ["SICP"]}