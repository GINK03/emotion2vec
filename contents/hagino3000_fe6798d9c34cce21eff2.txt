{"context": " More than 1 year has passed since last update.\u5b9f\u6226\u3067\u4f7f\u3044\u59cb\u3081\u30661\u9031\u9593\u3067\u3059\u304cfluentd\u3068\u3066\u3082\u4fbf\u5229\u3002\u305d\u3057\u3066exec Output Plugin\u3067Python\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u307f\u308b\u3002\n\n\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308bPython\u306e\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3002\n\ntd-agent.conf\n<match fizzbuzz>\n  type exec\n  command python /path/to/fizzbuzz.py\n  buffer_path    /path/to/buffer_path\n  format tsv\n  keys fizzbuzz\n  flush_interval 5s # for debugging/checking\n</match>\n\n\n\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u6642\u306fvirtualenv\u3067\u5165\u308c\u305fPython\u3092\u6307\u5b9a\u3057\u305f\u3044\u3057\u3001PYTHONPATH\u3069\u3046\u306a\u308b\u306e\u3053\u308c\u3001\u3068\u3044\u3046\u7591\u554f\u3082\u3042\u3063\u305f\u306e\u3067command\u306e\u6307\u5b9a\u306f\u3053\u3046\u3057\u3066\u307f\u305f\u3002\n\ntd-agent.conf\n  # python\u306fvirtualenv\u3067\u5165\u308c\u305f\u7269\u3092\u6307\u5b9a\n  # \u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308bmyapp\u306fsetup.py\u3092\u66f8\u3044\u3066\u4e88\u3081\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\n  command /path/to/myapp/bin/python \u2212m myapp.command.xxxx arg1\n\n\n\u3053\u308c\u3067PYTHONPATH\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u826f\u3044\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u9577\u3005\u3068\u66f8\u304b\u306a\u304f\u3066\u3082\u6e08\u3080\u3002setup.py\u306f\u9762\u5012\u304f\u3055\u304c\u3089\u305a\u306b\u66f8\u3053\u3046\u3002\n\u74b0\u5883\u5909\u6570\u3092\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3068\u3057\u3066\n\ntd-agent.conf\n  # \u74b0\u5883\u5909\u6570\u3092\u6307\u5b9a (\u30a8\u30e9\u30fc\u306b\u306a\u308b)\n  command HOGE=FUGA /path/to/myapp/bin/python -m myapp.command.xxx arg1\n\n\n\u3068\u3059\u308b\u3068\u6b21\u306e\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u4f55\u304b\u6e21\u3057\u305f\u3044\u6642\u306f\u5f15\u6570\u3092\u4f7f\u3048\u3068\u300232512\u306a\u3093\u3066\u521d\u3081\u3066\u898b\u305f\u3002\n\ntd-agent.log\n2014-08-03 17:59:54 +0900 [warn]: temporarily failed to flush the buffer. next_retry=2014-08-03 17:59:57 +0900 error_class=\"RuntimeError\" error=\"command returns 32512: HOGE=FUGA /path/to/myapp/bin/python /path/to/myapp/myapp/command/xxx.py /path/to/buffer_path/.20140803.q4ffb5d85bf81f0d4.log\"\n\n\n\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\n\u5f15\u6570\u306e\u6700\u671f\u306b\u30d0\u30c3\u30d5\u30a1\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u304c\u6e21\u3055\u308c\u308b\u30021\u884c\u305a\u3064\u8aad\u3093\u3067\u51e6\u7406\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u5404\u51e6\u7406\u3092\u547c\u3073\u305f\u3044\u5834\u5408\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u5206\u3051\u3066\u304a\u304f\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u304b\u3089\u6700\u5f8c\u306e\u51e6\u7406\u307e\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u306b\u3057\u3066\u3042\u3052\u308b\u3068\u7dba\u9e97\u306b\u66f8\u3051\u308b\u306e\u3068\u3001PyMongo\u3067\u3042\u308c\u3070\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u305d\u306e\u307e\u307eCollection\u306einsert\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u305b\u308b\u306e\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u826f\u3044\u3002\n\n/path/to/myapp/myapp/command/xxx.py\n# coding=utf-8\n\nimport json\nimport logging\nimport logging.config\nimport traceback\n\nlogging.config.fileConfig('logging.conf')\nlogger = logging.getLogger('fluent-exec-out')\n\ndef main():\n    file_path = parse_args()\n    do_something(exclude_error_row(parse(readline(file_path))))\n\ndef parse_args():\n    return sys.argv[-1]\n\ndef readline(file_path):\n    with file(file_path) as input:\n        for line in input:\n            yield line\n\ndef parse(lines):\n    # \u5165\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092json\u3068\u3057\u305f\u5834\u5408\n    for line in lines:\n        yield json.loads(line)\n\ndef exclude_error_row(rows):\n    for row in rows:\n        # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u30ed\u30b0\u51fa\u529b\n        if xxxxxx:\n            logger.warn(\"Invalid line found %s\", row)\n            continue\n       yield row\n\ndef do_something(rows):\n    # \u306a\u306b\u304b\u3084\u308b\n\n\nif __name__ == '__main__':\n    logger.info('Start')\n    try:\n        main()\n    except:\n        logger.error(traceback.format_exc())\n    logger.info('End')\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nmain\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306ffluentd\u304b\u3089\u6e21\u3055\u308c\u308b\u30d0\u30c3\u30d5\u30a1\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u3001\u5f15\u6570\u306b\u6e21\u305b\u3070\u826f\u3044\u3002\n\ntest_xxx.py\n# coding=utf-8\n\nfrom nose.tools import ok_, eq_\n\nfrom myapp.command import xxx\n\noriginal_argv = sys.argv\n\nclass TestAll(object):\n    def teardown(self):\n        sys.argv = original_argv\n\n    def test_main(self):\n        sys.argv.append('./tests/data/fluentd_buffer.log')\n        xxx.main()\n        # \u4f55\u304b\u30c6\u30b9\u30c8\u3059\u308b\n\n    def test_readline(self):\n        gen = xxx.readline('./tests/data/fluentd_buffer.log'):\n        # \u4f55\u304b\u30c6\u30b9\u30c8\u3059\u308b\n\n\n\n\u30ed\u30b0\u51fa\u529b\nfluent-logger-python\u306a\u3093\u304b\u3092\u4f7f\u3063\u3066\u3001\u3055\u3089\u306b\u30ed\u30b0\u3092fluentd\u306b\u6e21\u3059\u3068\u304b\u3063\u3053\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3082\u3084\u3063\u3066\u3044\u308b\u304c\u3001exec_filter Output Plugin\u3092\u4f7f\u3063\u3066\u4e00\u3064\u524d\u306ematch\u3067\u3084\u308b\u306e\u304cfluentd\u7684\u306b\u306f\u7dba\u9e97\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3069\u3063\u3061\u3067\u3082\u51fa\u6765\u308b\u306e\u3067\u597d\u307f\u306e\u554f\u984c\u304b\u306a\u3002\n\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u7a0b\u5ea6\u306a\u3089\u4e00\u3064\u306eexec Output\u3067\u307e\u3068\u3081\u3066\u3084\u3063\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u304c\u3001\u3044\u304f\u3064\u3082\u306e\u51e6\u7406\u3092\u8a70\u3081\u8fbc\u307f\u3059\u304e\u308b\u3068\u9014\u4e2d\u3067\u51e6\u7406\u304c\u30b3\u30b1\u305f\u3089\u3069\u3046\u3059\u308b\u306e\u3001\u3068\u3044\u3046\u5fc3\u914d\u6bce\u304c\u5897\u3048\u308b\u3002exec Output\u3092\u5206\u3051\u3066\u5225\u3005\u306e\u30b3\u30fc\u30c9\u547c\u3073\u51fa\u3057\u306b\u3057\u305f\u65b9\u304c\u826f\u3044\u3060\u308d\u3046\u3002\n\n\n\u5b9f\u6226\u3067\u4f7f\u3044\u59cb\u3081\u30661\u9031\u9593\u3067\u3059\u304cfluentd\u3068\u3066\u3082\u4fbf\u5229\u3002\u305d\u3057\u3066exec Output Plugin\u3067Python\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u307f\u308b\u3002\n\n## \u8d77\u52d5\u30b3\u30de\u30f3\u30c9\n\n[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.fluentd.org/articles/out_exec)\u306b\u3042\u308bPython\u306e\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3002\n\n```td-agent.conf\n<match fizzbuzz>\n  type exec\n  command python /path/to/fizzbuzz.py\n  buffer_path    /path/to/buffer_path\n  format tsv\n  keys fizzbuzz\n  flush_interval 5s # for debugging/checking\n</match>\n```\n\n\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u6642\u306fvirtualenv\u3067\u5165\u308c\u305fPython\u3092\u6307\u5b9a\u3057\u305f\u3044\u3057\u3001PYTHONPATH\u3069\u3046\u306a\u308b\u306e\u3053\u308c\u3001\u3068\u3044\u3046\u7591\u554f\u3082\u3042\u3063\u305f\u306e\u3067```command```\u306e\u6307\u5b9a\u306f\u3053\u3046\u3057\u3066\u307f\u305f\u3002\n\n```td-agent.conf\n  # python\u306fvirtualenv\u3067\u5165\u308c\u305f\u7269\u3092\u6307\u5b9a\n  # \u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308bmyapp\u306fsetup.py\u3092\u66f8\u3044\u3066\u4e88\u3081\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\n  command /path/to/myapp/bin/python \u2212m myapp.command.xxxx arg1\n```\n\n\u3053\u308c\u3067PYTHONPATH\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u826f\u3044\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u9577\u3005\u3068\u66f8\u304b\u306a\u304f\u3066\u3082\u6e08\u3080\u3002setup.py\u306f\u9762\u5012\u304f\u3055\u304c\u3089\u305a\u306b\u66f8\u3053\u3046\u3002\n\n\u74b0\u5883\u5909\u6570\u3092\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3068\u3057\u3066\n\n\n```td-agent.conf\n  # \u74b0\u5883\u5909\u6570\u3092\u6307\u5b9a (\u30a8\u30e9\u30fc\u306b\u306a\u308b)\n  command HOGE=FUGA /path/to/myapp/bin/python -m myapp.command.xxx arg1\n```\n\n\u3068\u3059\u308b\u3068\u6b21\u306e\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u4f55\u304b\u6e21\u3057\u305f\u3044\u6642\u306f\u5f15\u6570\u3092\u4f7f\u3048\u3068\u300232512\u306a\u3093\u3066\u521d\u3081\u3066\u898b\u305f\u3002\n\n```td-agent.log\n2014-08-03 17:59:54 +0900 [warn]: temporarily failed to flush the buffer. next_retry=2014-08-03 17:59:57 +0900 error_class=\"RuntimeError\" error=\"command returns 32512: HOGE=FUGA /path/to/myapp/bin/python /path/to/myapp/myapp/command/xxx.py /path/to/buffer_path/.20140803.q4ffb5d85bf81f0d4.log\"\n```\n\n## \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\n\n\u5f15\u6570\u306e\u6700\u671f\u306b\u30d0\u30c3\u30d5\u30a1\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u304c\u6e21\u3055\u308c\u308b\u30021\u884c\u305a\u3064\u8aad\u3093\u3067\u51e6\u7406\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u5404\u51e6\u7406\u3092\u547c\u3073\u305f\u3044\u5834\u5408\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u5206\u3051\u3066\u304a\u304f\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u304b\u3089\u6700\u5f8c\u306e\u51e6\u7406\u307e\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u306b\u3057\u3066\u3042\u3052\u308b\u3068\u7dba\u9e97\u306b\u66f8\u3051\u308b\u306e\u3068\u3001PyMongo\u3067\u3042\u308c\u3070\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u305d\u306e\u307e\u307eCollection\u306einsert\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u305b\u308b\u306e\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u826f\u3044\u3002\n\n```python:/path/to/myapp/myapp/command/xxx.py\n# coding=utf-8\n\nimport json\nimport logging\nimport logging.config\nimport traceback\n\nlogging.config.fileConfig('logging.conf')\nlogger = logging.getLogger('fluent-exec-out')\n\ndef main():\n\tfile_path = parse_args()\n    do_something(exclude_error_row(parse(readline(file_path))))\n\ndef parse_args():\n\treturn sys.argv[-1]\n\ndef readline(file_path):\n    with file(file_path) as input:\n        for line in input:\n            yield line\n\ndef parse(lines):\n\t# \u5165\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092json\u3068\u3057\u305f\u5834\u5408\n    for line in lines:\n        yield json.loads(line)\n\ndef exclude_error_row(rows):\n    for row in rows:\n        # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u30ed\u30b0\u51fa\u529b\n        if xxxxxx:\n\t\t\tlogger.warn(\"Invalid line found %s\", row)\n\t\t\tcontinue\n       yield row\n\ndef do_something(rows):\n\t# \u306a\u306b\u304b\u3084\u308b\n\n\nif __name__ == '__main__':\n\tlogger.info('Start')\n\ttry:\n\t\tmain()\n\texcept:\n\t\tlogger.error(traceback.format_exc())\n\tlogger.info('End')\n```\n\n### \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nmain\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306ffluentd\u304b\u3089\u6e21\u3055\u308c\u308b\u30d0\u30c3\u30d5\u30a1\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u3001\u5f15\u6570\u306b\u6e21\u305b\u3070\u826f\u3044\u3002\n\n```python:test_xxx.py\n# coding=utf-8\n\nfrom nose.tools import ok_, eq_\n\nfrom myapp.command import xxx\n\noriginal_argv = sys.argv\n\nclass TestAll(object):\n\tdef teardown(self):\n\t\tsys.argv = original_argv\n\n\tdef test_main(self):\n\t\tsys.argv.append('./tests/data/fluentd_buffer.log')\n\t\txxx.main()\n\t\t# \u4f55\u304b\u30c6\u30b9\u30c8\u3059\u308b\n\n\tdef test_readline(self):\n\t\tgen = xxx.readline('./tests/data/fluentd_buffer.log'):\n\t\t# \u4f55\u304b\u30c6\u30b9\u30c8\u3059\u308b\n```\n\n### \u30ed\u30b0\u51fa\u529b\n\n[fluent-logger-python](https://github.com/fluent/fluent-logger-python)\u306a\u3093\u304b\u3092\u4f7f\u3063\u3066\u3001\u3055\u3089\u306b\u30ed\u30b0\u3092fluentd\u306b\u6e21\u3059\u3068\u304b\u3063\u3053\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n### \u30d5\u30a3\u30eb\u30bf\u51e6\u7406\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3082\u3084\u3063\u3066\u3044\u308b\u304c\u3001exec_filter Output Plugin\u3092\u4f7f\u3063\u3066\u4e00\u3064\u524d\u306ematch\u3067\u3084\u308b\u306e\u304cfluentd\u7684\u306b\u306f\u7dba\u9e97\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3069\u3063\u3061\u3067\u3082\u51fa\u6765\u308b\u306e\u3067\u597d\u307f\u306e\u554f\u984c\u304b\u306a\u3002\n\n\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u7a0b\u5ea6\u306a\u3089\u4e00\u3064\u306eexec Output\u3067\u307e\u3068\u3081\u3066\u3084\u3063\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u304c\u3001\u3044\u304f\u3064\u3082\u306e\u51e6\u7406\u3092\u8a70\u3081\u8fbc\u307f\u3059\u304e\u308b\u3068\u9014\u4e2d\u3067\u51e6\u7406\u304c\u30b3\u30b1\u305f\u3089\u3069\u3046\u3059\u308b\u306e\u3001\u3068\u3044\u3046\u5fc3\u914d\u6bce\u304c\u5897\u3048\u308b\u3002exec Output\u3092\u5206\u3051\u3066\u5225\u3005\u306e\u30b3\u30fc\u30c9\u547c\u3073\u51fa\u3057\u306b\u3057\u305f\u65b9\u304c\u826f\u3044\u3060\u308d\u3046\u3002\n\n\n", "tags": ["Python", "fluentd"]}