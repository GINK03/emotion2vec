{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\n\u7b2c16\u56de(12\u67087\u65e5)  http://atnd.org/events/45016\n\u306e\u3001\u53c2\u8003\u554f\u984c\u300cL\u88ab\u8986\u300d\nhttp://nabetani.sakura.ne.jp/hena/ord16lcove/\n\u306e\u5b9f\u88c5\u4f8b\u3002\nruby\u3067\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/7be4bc2a3514bbfbfc15\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\u3067\u3002\n# tested with ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n\ndef product( a, b )\n  a.to_a.product( b.to_a )\nend\n\ndef solve_core( points )\n  s=( product 0..9, 0..9 ).map{ |cx, cy|\n      ( product 0..cx, 0...cy ).map{ | ax, ay |\n        ( product 0...ax, (ay+1)..cy ).map{ | bx, by |\n          points.all?{ |x,y|\n            ( (ax..cx)===x && (ay..cy)===y ) || ( (bx..cx)===x && (by..cy)===y )\n          } ? (cx-ax+1)*(cy-ay+1) + (ax-bx)*(cy-by+1) : nil\n        }.compact.min\n      }.compact.min\n  }.compact.min\nend\n\ndef solve(src)\n  points = src.split(\",\").map{ |xy| xy.to_i.divmod(10) }\n  ( 4.times.map{\n    points.map!{ |x,y| [y,9-x] }\n    solve_core( points )\n  }.compact.min || \"-\" ).to_s\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split( /\\s+/ )\n  next true unless expected\n  actual = solve( src )\n  ok = actual==expected;\n  puts \"%s %s->%s ( %s )\" % [ ok ? \"ok\" : \"***NG***\", src, actual, expected ]\n  ok\nend.all?.tap{ |ok| p ok }\n\n__END__\n0 41,33,26,55,74,58,68  39  \n1 00,99,09,90 - \n2 09  3 \n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u6700\u521d\u306b\u66f8\u3044\u305f\u306e\u306f nidouchi \u3055\u3093\u306e http://qiita.com/nidouchi/items/b8552133e5f5d636368a \u3068\u540c\u3058\u6d41\u308c\u3060\u3063\u305f\u306e\u3067\u3001\u9055\u3046\u306e\u3092\u66f8\u3044\u305f\u307b\u3046\u304c\u9762\u767d\u3044\u3068\u601d\u3063\u3066\u66f8\u304d\u306a\u304a\u3057\u305f\u3002\n\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u306f\u300e\u300c\u3072\u3068\u30de\u30b9\u3057\u304b\u5857\u3063\u3066\u306a\u3044\u6642\u306b\u306f3\u300d\u3092\u7279\u5225\u6271\u3044\u3057\u306a\u3044\u300f\u3068\u3044\u3046\u3053\u3068\u3002\n\u306a\u304a\u3002\n\u5b9f\u884c\u901f\u5ea6\u306f\u7d76\u671b\u7684\u306b\u9045\u304f\u300150\u4ef6\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306b 10\u79d2\u4ee5\u4e0a\u304b\u304b\u308b\u3002\n\u5b9f\u88c5\u6226\u7565\u306f\n\u300c\u5168\u90e8\u306eL\u5b57\u3092\u5217\u6319\u3059\u308b\u300d\n\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u3056\u3063\u3068100\u4e07\u56de\u3050\u3089\u3044\u56de\u3063\u3066\u3044\u308b\u3002\u679d\u306f\u4e00\u5207\u5208\u3063\u3066\u306a\u3044\u3002\ncompact.min \u4e09\u9023\u767a\u304c\u307f\u3063\u3068\u3082\u306a\u3044\u611f\u3058\u3002\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\n\u7b2c16\u56de(12\u67087\u65e5)  http://atnd.org/events/45016\n\u306e\u3001\u53c2\u8003\u554f\u984c\u300cL\u88ab\u8986\u300d\nhttp://nabetani.sakura.ne.jp/hena/ord16lcove/\n\u306e\u5b9f\u88c5\u4f8b\u3002\n\nruby\u3067\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/7be4bc2a3514bbfbfc15\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n\u3067\u3002\n\n```ruby\n# tested with ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\n\ndef product( a, b )\n  a.to_a.product( b.to_a )\nend\n\ndef solve_core( points )\n  s=( product 0..9, 0..9 ).map{ |cx, cy|\n      ( product 0..cx, 0...cy ).map{ | ax, ay |\n        ( product 0...ax, (ay+1)..cy ).map{ | bx, by |\n          points.all?{ |x,y|\n            ( (ax..cx)===x && (ay..cy)===y ) || ( (bx..cx)===x && (by..cy)===y )\n          } ? (cx-ax+1)*(cy-ay+1) + (ax-bx)*(cy-by+1) : nil\n        }.compact.min\n      }.compact.min\n  }.compact.min\nend\n\ndef solve(src)\n  points = src.split(\",\").map{ |xy| xy.to_i.divmod(10) }\n  ( 4.times.map{\n    points.map!{ |x,y| [y,9-x] }\n    solve_core( points )\n  }.compact.min || \"-\" ).to_s\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  num, src, expected = line.split( /\\s+/ )\n  next true unless expected\n  actual = solve( src )\n  ok = actual==expected;\n  puts \"%s %s->%s ( %s )\" % [ ok ? \"ok\" : \"***NG***\", src, actual, expected ]\n  ok\nend.all?.tap{ |ok| p ok }\n\n__END__\n0 41,33,26,55,74,58,68  39  \n1 00,99,09,90 - \n2 09  3 \n```\n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u6700\u521d\u306b\u66f8\u3044\u305f\u306e\u306f nidouchi \u3055\u3093\u306e http://qiita.com/nidouchi/items/b8552133e5f5d636368a \u3068\u540c\u3058\u6d41\u308c\u3060\u3063\u305f\u306e\u3067\u3001\u9055\u3046\u306e\u3092\u66f8\u3044\u305f\u307b\u3046\u304c\u9762\u767d\u3044\u3068\u601d\u3063\u3066\u66f8\u304d\u306a\u304a\u3057\u305f\u3002\n\n\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u306f\u300e\u300c\u3072\u3068\u30de\u30b9\u3057\u304b\u5857\u3063\u3066\u306a\u3044\u6642\u306b\u306f3\u300d\u3092\u7279\u5225\u6271\u3044\u3057\u306a\u3044\u300f\u3068\u3044\u3046\u3053\u3068\u3002\n\n\u306a\u304a\u3002\n\u5b9f\u884c\u901f\u5ea6\u306f\u7d76\u671b\u7684\u306b\u9045\u304f\u300150\u4ef6\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306b 10\u79d2\u4ee5\u4e0a\u304b\u304b\u308b\u3002\n\n\u5b9f\u88c5\u6226\u7565\u306f\n\u300c\u5168\u90e8\u306eL\u5b57\u3092\u5217\u6319\u3059\u308b\u300d\n\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u3056\u3063\u3068100\u4e07\u56de\u3050\u3089\u3044\u56de\u3063\u3066\u3044\u308b\u3002\u679d\u306f\u4e00\u5207\u5208\u3063\u3066\u306a\u3044\u3002\n\n`compact.min` \u4e09\u9023\u767a\u304c\u307f\u3063\u3068\u3082\u306a\u3044\u611f\u3058\u3002", "tags": ["\u3069\u3046\u66f8\u304f", "Ruby", "yhpg"]}