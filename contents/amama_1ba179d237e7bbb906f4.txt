{"tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"], "context": "\n\n20\u65e5\u76ee\n\u3084\u3063\u3068\u7b97\u8853\u6f14\u7b97\u3092\u5b9f\u88c5\u3059\u308b.\n\u6642\u9593\u3092\u304b\u3051\u3066\u8aad\u3093\u3067\u308b\u304b\u3089\u3053\u3053\u307e\u3067\u6765\u308b\u306e\u304c\u3059\u3054\u3044\u6642\u9593\u304b\u304b\u3063\u305f.\n\n2.6 Mark 4: Adding arithmetic\ndump\u3092\u4f7f\u3046\u521d\u3081\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3.\n\n2.6.1 Transition rules for arithmetic\n\u7b97\u8853\u6f14\u7b97\u306e\u305f\u3081\u306e\u72b6\u614b\u9077\u79fb\u3092\u8003\u3048\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u308b.\n\u307e\u305a,\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306a\u5358\u9805\u6f14\u7b97\u5b50\u306e\u7b26\u53f7\u53cd\u8ee2\u304b\u3089\u8003\u3048\u308b.\n\u305d\u306e\u4ed6\u306e\u7b97\u8853\u6f14\u7b97\u5b50\u3082\u540c\u69d8.\n\n\n\na : a1 : []\nd\nh\nf\n\n\n\n\na1 : []\nd\nh'\nf\n\n\n\n\n\n\nh\n\n\n\n\n\na\nNPrim Neg\n\n\na1\n\nNAp  a b\n\n\nb\n\nNNum n\n\n\n\n\n\n\nh'\n\n\n\n\n\na1\n\nNNum (-n)\n\n\n\n\u3068,\u306a\u308a\u305d\u3046.\n\u3053\u308c\u306f,\u4eca\u30b9\u30bf\u30c3\u30af\u306b\u306f\u7b26\u53f7\u53cd\u8ee2\u3068\u305d\u306e\u5f15\u6570\u3057\u304b\u7a4d\u307e\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f.\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b.\n\u5f15\u6570\u304c(NNum\u3067\u306f\u306a\u304f)\u307e\u3060\u8a55\u4fa1\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u3057\u305f\u3089,\u4e00\u4f53\u4f55\u304c\u8d77\u3053\u308b\u3060\u308d\u3046\u304b?\n\u5f15\u6570\u3092(\u3053\u308c\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u3068\u6df7\u540c\u3057\u306a\u3044\u305f\u3081\u306b)\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u306b\u7a4d\u3093\u3067\u8a55\u4fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a,\u3053\u308c\u304c\u7d42\u4e86\u3057\u305f\u3089,\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3057\u3066\u518d\u3073\u7b26\u53f7\u53cd\u8ee2\u306b\u6311\u6226\u3059\u308b.\n\u3053\u308c\u306b\u306f\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u3069\u3046\u306b\u304b\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067,dump\u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3088\u3046.\ndump\u306f\u5358\u306a\u308b,\u300c\u30b9\u30bf\u30c3\u30af\u304c\u8981\u7d20\u3068\u306a\u308b\u300d\u30b9\u30bf\u30c3\u30af\u3067\u3042\u308b.\nNeg\u3092\u8a55\u4fa1\u3059\u308b\u3068\u304d\u306e\u30eb\u30fc\u30eb\u306f,\u6b21\u306e\u3088\u3046\u306b\u306a\u308b:\n\n\n\na : a1 : []\nd\nh\nf\n\n\n\n\nb : []\n(a : a1 : []) : d\nh\nf\n\n\n\n\u3053\u308c\u306f,b\u304cNNum\u3067\u306f\u306a\u3044\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b.\n\u8a55\u4fa1\u304c\u7d42\u4e86\u3059\u308b\u3068,\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3059\u5fc5\u8981\u304c\u3042\u308b:\n\n\n\na : []\ns : d\nh[a : NNum n]\nf\n\n\n\n\ns\nd\nh\nf\n\n\n\n\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3059\u3068,\u307e\u305f\u7b26\u53f7\u53cd\u8ee2\u6f14\u7b97\u5b50\u304c\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\u306b\u898b\u3064\u304b\u308b\u304c,\u4eca\u5ea6\u306f\u6b63\u898f\u5f62\u306b\u306a\u3063\u3066\u3044\u308b.\n\u3060\u3051\u3069\u6ce8\u610f\u3057\u3088\u3046!\n\u78ba\u304b\u306b\u7b26\u53f7\u53cd\u8ee2\u306e\u5f15\u6570\u306f\u6b63\u898f\u5f62\u306b\u306a\u3063\u305f\u304c,\u5f15\u6570\u306e\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u306e\u3067,\u4eca\u3084\u305d\u308c\u306f\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b.\n\u5373\u3061,Neg\u306e\u6700\u521d\u306e\u30eb\u30fc\u30eb\u306fNNum\u30ce\u30fc\u30c9\u3092\u76f4\u63a5\u306f\u898b\u3064\u3051\u3089\u308c\u306a\u3044\u306e\u3060((negate (id 3))\u3092\u8003\u3048\u3088).\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f,\u9069\u7528\u30ce\u30fc\u30c9\u3092unwind\u3059\u308b\u30eb\u30fc\u30eb(Rule 2.1)\u306e\u76f4\u524d\u306b\u65b0\u305f\u306a\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3060.\n\u9069\u7528\u3055\u308c\u308b\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6b8a\u306a\u5834\u5408\u306b,\u3053\u306e\u30eb\u30fc\u30eb\u306f,\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u306e\u53c2\u7167\u5148\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u9069\u7528\u30ce\u30fc\u30c9\u306b\u66f4\u65b0\u3059\u308b.\n\n\n\na : s\nd\nh[a : NAp a1 a2, a2 : NInd a3]\nf\n\n\n\n\na : s\nd\nh[a : NAp a1 a3]\nf\n\n\n\n\u3053\u306e\u30eb\u30fc\u30eb\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b,\u307e\u305f,\u8a55\u4fa1\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u306bredex\u306e\u30eb\u30fc\u30c8\u304b\u3089\u65b0\u305f\u306bunwind\u3059\u308b\u305f\u3081\u306b,Rule 2.6\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b:\n(\u8a33\u306b\u81ea\u4fe1\u306a\u3057.In order to bring this rule into play, we need to modify Rule 2.6 so that it unwinds anew from the root of the redex after the evaluation is completed:)\n\u610f\u5473\u7684\u306b\u306f,NPrim Neg\u30ce\u30fc\u30c9\u3092\u53d6\u3063\u3066,NAp\u306e\u9069\u7528\u3092\u8a55\u4fa1\u3059\u308c\u3070,\u8a08\u7b97\u304c\u7d9a\u884c\u3059\u308b.\u3060\u3068\u601d\u3046.\n\n\n\na : a1 : []\nd\nh\nf\n\n\n\n\nb : []\n(a1 : []) : d\nh\nf\n\n\n\n\u3053\u308c\u306f\u5c11\u3005\u9762\u5012\u3067\u3042\u308a,\u7d9a\u304f\u30c1\u30e3\u30d7\u30bf\u30fc\u3067\u884c\u3046\u5b9f\u88c5\u3067\u306f\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b.\n(\u3058\u3083\u3042\u521d\u3081\u3063\u304b\u3089\u305d\u308c\u3092\u7d39\u4ecb\u3057\u308d\u3088,\u3068\u601d\u3044\u307e\u3057\u305f\u307e\u308b)\n\nExercise 2.15\n\u52a0\u7b97\u306e\u305f\u3081\u306e\u9077\u79fb\u30eb\u30fc\u30eb\u3092\u66f8\u304d\u4e0b\u305b.(\u4ed6\u306e\u4e8c\u9805\u7b97\u8853\u6f14\u7b97\u5b50\u3082\u5b9f\u8cea\u7684\u306b\u540c\u69d8\u3067\u3042\u308b)\n\n\n\na : a1 : a2 : []\nd\nh\nf\n\n\n\n\na1 : []\nd\nh'\nf\n\n\n\n\n\n\nh\n\n\n\n\n\na\nNPrim Add\n\n\na1\n\nNAp  a b1\n\n\na2\n\nNAp  a1 b2\n\n\nb1\n\nNNum n\n\n\nb2\n\nNNum m\n\n\n\n\n\n\nh'\n\n\n\n\n\na1\n\nNNum (n + m)\n\n\n\n\u3068\u306a\u308b.\u4ed6\u306e\u6f14\u7b97\u5b50\u3082\u540c\u69d8.\nb1,b2\u304cNNum\u3058\u3083\u306a\u3044\u3068\u304d\u306fdump\u3092\u4f7f\u3046\u306e\u304b?\n\u305d\u306e\u6642,b1\u3068b2\u3092\u4e21\u65b9\u8a55\u4fa1\u3059\u308b\u306e\u304b\u306a.\u3088\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u6b21\u3042\u305f\u308a\u306b\u66f8\u3044\u3066\u305d\u3046.\n\n2.6.2 Implementing arithmetic\n\u7b97\u8853\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u591a\u5c11\u624b\u3092\u52a0\u3048\u308b\u3068\u3053\u308d\u304c\u51fa\u3066\u304f\u308b.\n\u6700\u521d\u306bTiDump\u3092\u5909\u66f4\u3059\u308b.\n\u540d\u524d\u304cn\u3067\u5024\u304cp\u3067\u3042\u308b\u3088\u3046\u306aNPrim n p\u30ce\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b.\n\u5024\u306fdata Primitive = Neg | Add | Sub | Mul | Div\u306e\u3044\u305a\u308c\u304b.\nNSupercomb\u306e\u6642\u3068\u540c\u69d8\u306b,\u540d\u524d\u306f\u30c7\u30d0\u30c3\u30b0\u7528\u306b\u306e\u307f\u7528\u3044\u308b.\nshowNode\u3082\u3053\u308c\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u305d\u308c\u3067\u306f,\u305d\u308c\u305e\u308c\u306esupercombinator\u306b\u5bfe\u3057\u3066NSupercomb\u3092\u30d2\u30fc\u30d7\u306b\u78ba\u4fdd\u3057\u305f\u306e\u3068\u540c\u69d8\u306b,\u305d\u308c\u305e\u308c\u306eprimitive\u306b\u5bfe\u3057\u3066NPrim\u30ce\u30fc\u30c9\u3092\u30d2\u30fc\u30d7\u306b\u78ba\u4fdd\u3059\u308b.\n\u65b0\u305f\u306a,\u305d\u308c\u305e\u308c\u306eprimitive\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3078\u306e\u675f\u7e1b\u3092,supercombinator\u306e\u3068\u304d\u3068\u540c\u69d8\u306b,\u30de\u30b7\u30f3\u306e\u72b6\u614b\u3092\u69cb\u6210\u3059\u308bglobals\u306b\u8ffd\u52a0\u3059\u308b.\n\u3053\u308c\u306f,buildInitialHeap\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u7c21\u5358\u306b\u884c\u3048\u308b.\n\u307e\u305f,\u3055\u3089\u306a\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306f,Primitive\u30bf\u30a4\u30d7\u3068primitives\u3092\u5909\u66f4\u3059\u308c\u3070\u826f\u3044.\nallocateSc\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u308ballocatePrim\u3092\u5b9a\u7fa9\u3059\u308b.\n\u6b21\u306b,step\u306e\u4e2d\u306edispatch\u95a2\u6570\u304c,NPrim\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u305f\u3068\u304d\u306bprimStep\u3092\u547c\u3076\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\nprimStep\u306f\u4f7f\u308f\u308c\u305f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u5bfe\u3057case\u3067\u5206\u5c90\u3057,primNeg\u3084primAdd\u306e\u3088\u3046\u306a\u5b9f\u969b\u306b\u6f14\u7b97\u3092\u3059\u308b\u88dc\u52a9\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059.\n\u3055\u3057\u3042\u305f\u308aprimStep\u306f\u7b26\u53f7\u53cd\u8ee2\u3060\u3051\u3092\u542b\u3080\u3053\u3068\u3068\u3059\u308b.\nprimNeg\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b:\n\ngetArgs\u3092\u7528\u3044\u30b9\u30bf\u30c3\u30af\u4e0a\u304b\u3089\u5f15\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5c55\u958b\u3057,hLookup\u3092\u7528\u3044\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3088\u3063\u3066\u6307\u3057\u793a\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u3092\u5f97\u308b.\n\u5f15\u6570\u304c\u8a55\u4fa1\u6e08\u307f\u304b\u3069\u3046\u304b\u3092\u88dc\u52a9\u95a2\u6570\u306eisDataNode\u3092\u4f7f\u3044\u8abf\u3079\u308b.\n\u672a\u8a55\u4fa1\u306a\u3089\u3070,Rule 2.9\u306b\u3088\u308a\u305d\u306e\u5f15\u6570\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u6e96\u5099\u3059\u308b.\n\u3053\u308c\u306f\u73fe\u5728\u306e\u30b9\u30bf\u30c3\u30af\u3092dump\u306b\u30d7\u30c3\u30b7\u30e5\u3057,negate\u306e\u5f15\u6570\u3060\u3051\u3092\u8981\u7d20\u306b\u6301\u3064\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u308b\u3053\u3068\u3092\u5fc5\u8981\u3068\u3059\u308b.\n\u8a55\u4fa1\u6e08\u307f\u306a\u3089\u3070,hUpdate\u3092\u4f7f\u3044redex\u306e\u30eb\u30fc\u30c8\u3092\u7d50\u679c\u304c\u5165\u3063\u3066\u3044\u308bNNum\u30ce\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057,\u30b9\u30bf\u30c3\u30af\u3092\u9069\u5207\u306b\u64cd\u4f5c\u3057\u305f\u4e0a\u3067\u5236\u5fa1\u3092\u8fd4\u3059.\n\n\u6b21\u306b,\u6570\u5024\u3092unwind\u3059\u308b\u305f\u3081\u306b\u65b0\u3057\u3044\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306bnumStep\u306e\u5b9a\u7fa9\u306f\u5909\u66f4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u3082\u3057\u30b9\u30bf\u30c3\u30af\u304c\u305f\u3060\u4e00\u3064\u306e\u8981\u7d20\u3060\u3051\u3067,\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u304cNNum\u30ce\u30fc\u30c9\u3067\u3042\u308a,\u304b\u3064dump\u304c\u7a7a\u3067\u306a\u3044\u306a\u3089\u3070,dump\u306e\u5148\u982d\u306e\u8981\u7d20\u3092\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u306b\u3059\u308b.\n\u3053\u308c\u3089\u306e\u72b6\u6cc1\u3067\u306a\u3051\u308c\u3070,\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b.\n\u540c\u69d8\u306b,apStep\u306e\u5b9a\u7fa9\u3082\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5909\u66f4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u3053\u308c\u306f\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057,hUpdate\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3067\u304d\u308b.\n\u6700\u5f8c\u306b,TiFinal\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u73fe\u5728\u306f\u30b9\u30bf\u30c3\u30af\u306bNNum\u3057\u304b\u542b\u307e\u306a\u3044\u3068\u304d\u306b\u5b9f\u884c\u3092\u505c\u6b62\u3059\u308b\u304c,\u3053\u306e\u52d5\u4f5c\u306fdump\u304c\u7a7a\u306e\u3068\u304d\u306b\u306e\u307f\u5b9f\u884c\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u305d\u3046\u3067\u306a\u3044\u3068\u65b0\u3057\u3044\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u884c\u3059\u308b\u6a5f\u4f1a\u304c\u306a\u3044\u304b\u3089\u306d!\n\nExercise 2.16\n\u3053\u308c\u3089\u306e\u5909\u66f4\u3092\u5b9f\u88c5\u3057,main = negate (I 3)\u306a\u3069\u3068\u3057\u3066\u6b63\u3057\u304f\u52d5\u304f\u304b\u8a66\u305b.\n\u2192\u3084\u3063\u305f.\u52d5\u3044\u305f.\n\u3053\u306e\u660e\u3089\u304b\u306a\u62e1\u5f35\u306f\u4eca\u3084\u52a0\u6e1b\u4e57\u9664\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3042\u308b.\n\u3053\u308c\u3089\u306f\u307b\u307c\u540c\u3058\u306a\u306e\u3067PrimArith\u3068\u3044\u3046\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5bfe\u5fdc\u3059\u308b\u4e8b\u306b\u3088\u308a,\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b.\n\nExercise 2.17\nPrimArith\u3092\u5b9f\u88c5\u3057\u3066\u52d5\u304b\u305b.\n\u3068\u3044\u3046\u304b\u3053\u306e\u672c\u308f\u308a\u3068\u8aad\u8005\u306b\u3076\u3093\u6295\u3052\u904e\u304e\u3058\u3083\u306a\u3044?\n\u4e8c\u9805\u6f14\u7b97\u306eb1,b2\u306e\u8a55\u4fa1\u3082\u81ea\u5206\u3067\u8003\u3048\u308d\u3063\u3066\u3053\u3068\u3067\u3059\u304b.\n\nb1,b2\u306e\u30a2\u30c9\u30ec\u30b9\u3092getargs\u3067\u53d6\u5f97\n\u6307\u3057\u793a\u3059\u30ce\u30fc\u30c9\u304c\u4e21\u65b9NNum\u304b\u3069\u3046\u304b\u78ba\u8a8d\n\u9055\u3063\u305f\u3089\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u3063\u3066\u8a55\u4fa1\n\u4e21\u65b9NNum\u306a\u3089\u7b97\u8853\u6f14\u7b97\u3092\u5b9f\u884c\n\n\u3067\u3067\u304d\u308b\u304b\u306a?\n\u9014\u4e2d,Language\u306epOneOrMore\u304c\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u305f.\n\u5b9f\u969b\u3053\u3053\u306f\u30c1\u30fc\u30c8\u3057\u3066(\u30cd\u30c3\u30c8\u3067\u5b9f\u88c5\u3092\u898b\u3064\u3051\u3066)\u66f8\u3044\u305f\u5834\u6240\u3060\u3063\u305f\u306e\u3067\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u304b\u3063\u305f.\n\u6b63\u3057\u3044\u95a2\u6570\u306b\u76f4\u305b\u3066\u3088\u304b\u3063\u305f.\n\u7d50\u679c,main = (3 * negate (I 3) + (15 / 3) - 7 * 3) + (8 / 2) + 4 * 4\u307f\u305f\u3044\u306a\u306e\u304c\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f.\n\u3053\u306e\u8a00\u8a9e\u306e-\u3084/\u306f1-2-3\u307f\u305f\u3044\u306b\u3067\u304d\u306a\u3044\u306e\u3067,\u3044\u3061\u3044\u3061\u62ec\u5f27\u304c\u5fc5\u8981.\n\u6642\u9593\u304c\u3042\u3063\u305f\u3089\u76f4\u305d\u3046.\n2.6\u304c\u7d42\u308f\u308a.\u7b97\u8853\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304c,\u50d5\u306e\u6020\u6162\u306e\u3064\u3051\u3092\u6255\u3046\u3053\u3068\u306b\u306a\u3063\u305f.\u3084\u3063\u3071\u308a\u7406\u89e3\u3057\u306a\u3044\u3067\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u308b\u306e\u306f\u826f\u304f\u306a\u3044\u306d.\ndiff\u3068\u3063\u305f\u3084\u30fc\u3064\n\nLanguage.hs\ndiff --git a/Language.hs b/Language.hs\nindex 7f81355..eea8689 100644\n--- a/Language.hs\n+++ b/Language.hs\n@@ -224,13 +224,13 @@ pEmpty :: a -> Parser a\n pEmpty s toks = [(s, toks)]\n\n pOneOrMore :: Parser a -> Parser [a]\n-pOneOrMore p = (take 1) . (pThen (:) p (pZeroOrMore p))\n+pOneOrMore p = (pThen (:) p (pZeroOrMore p))\n\n pApply :: Parser a -> (a -> b) -> Parser b\n pApply a f toks = [(f b, tokens) | (b, tokens) <- a toks]\n\n pOneOrMoreWithSep :: Parser a -> Parser b -> Parser [a]\n-pOneOrMoreWithSep a b = (take 1) . (pThen (:) a ((pThen (\\_ x -> x) b (pOneOrMoreWithSep a b)) `pAlt` (pEmpty [])))\n+pOneOrMoreWithSep a b = (pThen (:) a ((pThen (\\_ x -> x) b (pOneOrMoreWithSep a b)) `pAlt` (pEmpty [])))\n\n pSat :: (String -> Bool) -> Parser String\n pSat pd = pSatpred\n\n\n\nMain.hs\ndiff --git a/Main.hs b/Main.hs\nindex 651f971..9ee601c 100644\n--- a/Main.hs\n+++ b/Main.hs\n@@ -8,13 +8,16 @@ runProg = showResults . eval . compile . parse\n\n type TiState = (TiStack, TiDump, TiHeap, TiGlobals, TiStats)\n type TiStack = [Addr]\n-data TiDump = DummyTiDump\n-initialTiDump = DummyTiDump\n+type TiDump = [TiStack]\n+initialTiDump = []\n type TiHeap = Heap Node\n data Node = NAp Addr Addr -- Application\n     | NSupercomb Name [Name] CoreExpr -- Supercombinator\n     | NNum Int -- Number\n     | NInd Addr -- Indirection\n+    | NPrim Name Primitive -- Primitive\n+\n+data Primitive = Neg | Add | Sub | Mul | Div\n\n type TiGlobals = ASSOC Name Addr\n tiStatInitial :: TiStats\n@@ -41,13 +44,24 @@ compile program = (initial_stack, initialTiDump, initial_heap, globals, tiStatIn\n extraPreludeDefs = []\n\n buildInitialHeap :: [CoreScDefn] -> (TiHeap, TiGlobals)\n-buildInitialHeap sc_defs = mapAccuml allocateSc hInitial sc_defs\n+buildInitialHeap sc_defs = (heap2, sc_addrs ++ prim_addrs)\n+    where\n+    (heap1, sc_addrs) = mapAccuml allocateSc hInitial sc_defs\n+    (heap2, prim_addrs) = mapAccuml allocatePrim heap1 primitives\n+\n+primitives :: ASSOC Name Primitive\n+primitives = [ (\"negate\", Neg), (\"+\", Add), (\"-\", Sub), (\"*\", Mul), (\"/\", Div) ]\n\n allocateSc :: TiHeap -> CoreScDefn -> (TiHeap, (Name, Addr))\n allocateSc heap (name, args, body) = (heap', (name, addr))\n     where\n     (heap', addr) = hAlloc heap (NSupercomb name args body)\n\n+allocatePrim :: TiHeap -> (Name, Primitive) -> (TiHeap, (Name, Addr))\n+allocatePrim heap (name, prim) = (heap', (name, addr))\n+    where\n+    (heap', addr) = hAlloc heap (NPrim name prim)\n+\n eval :: TiState -> [TiState]\n eval state = state : rest_states\n --eval state | tiFinal state = [state]\n@@ -61,7 +75,7 @@ doAdmin :: TiState -> TiState\n doAdmin state = applyToStats tiStatIncSteps state\n\n tiFinal :: TiState -> Bool\n-tiFinal ([sole_addr], dump, heap, globals, stats) = isDataNode (hLookup heap sole_addr)\n+tiFinal ([sole_addr], [], heap, globals, stats) = isDataNode (hLookup heap sole_addr)\n tiFinal ([], dump, heap, globals, stats) = error \"Empty stack!\"\n tiFinal state = False -- Stack contains more than one item\n\n@@ -77,22 +91,30 @@ step state = dispatch (hLookup heap (hd stack))\n     dispatch (NAp a1 a2) = apStep state a1 a2\n     dispatch (NSupercomb sc args body) = scStep state sc args body\n     dispatch (NInd addr) = indStep state addr\n+    dispatch (NPrim n p) = primStep state n p\n\n numStep :: TiState -> Int -> TiState\n-numStep state n = error \"Number applied as a function!\"\n+numStep (stack, dump, heap, globals, stats) n\n+    = if length stack > 1 || null dump\n+        then error \"Number applied as a function!\"\n+        else (head dump, tail dump, heap, globals, stats)\n\n-apStep :: TiState -> Addr -> Addr -> TiState\n-apStep (stack, dump, heap, globals, stats) a1 a2 = (a1 : stack, dump, heap, globals, (s, r, if d < length stack + 1 then d + 1 else d)) where (s, r, d) = stats\n\n-indStep :: TiState -> Addr -> TiState\n-indStep (stack, dump, heap, globals, stats) addr = (addr : (tail stack), dump, heap, globals, stats)\n+apStep :: TiState -> Addr -> Addr -> TiState\n+apStep (stack, dump, heap, globals, stats) a1 a2\n+    = case hLookup heap a2 of\n+        (NInd a3) -> (stack, dump, hUpdate heap (head stack) (NAp a1 a3), globals, stats)\n+        _         -> (a1 : stack, dump, heap, globals, (s, r, new_d))\n+    where\n+    (s, r, d) = stats\n+    new_d = if d < length stack + 1 then d + 1 else d\n\n scStep :: TiState -> Name -> [Name] -> CoreExpr -> TiState\n scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n     = (new_stack, dump, new_heap, globals, new_stats)\n     where\n     new_stack = if length arg_names + 1 <= length stack then result_addr : (drop (length arg_names + 1) stack) else error \"too few arguments\"\n-    upd_addr = head (drop (length arg_names) stack) -- stack[n] == a_n for p65 (2.3)\n+    upd_addr = stack !! (length arg_names) -- stack[n] == a_n for p65 (2.3)\n     --(new_heap, result_addr) = instantiate body heap env\n     new_heap = instantiateAndUpdate body upd_addr heap env\n     result_addr = upd_addr\n@@ -103,7 +125,43 @@ scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n -- now getargs since getArgs conflicts with Gofer standard.prelude\n getargs :: TiHeap -> TiStack -> [Addr]\n getargs heap (sc:stack) = map get_arg stack\n-    where get_arg addr = arg where (NAp fun arg) = hLookup heap addr\n+    where get_arg addr = arg where (NAp _ arg) = hLookup heap addr\n+\n+indStep :: TiState -> Addr -> TiState\n+indStep (stack, dump, heap, globals, stats) addr = (addr : (tail stack), dump, heap, globals, stats)\n+\n+primStep :: TiState -> Name -> Primitive -> TiState\n+primStep state _ Neg = primNeg state\n+primStep state _ Add = primArith state (+)\n+primStep state _ Sub = primArith state (-)\n+primStep state _ Mul = primArith state (*)\n+primStep state _ Div = primArith state div\n+\n+primNeg :: TiState -> TiState\n+primNeg (stack, dump, heap, globals, stats) = new_state\n+    where\n+    arg_addr = head (getargs heap stack)\n+    node = hLookup heap arg_addr\n+    (NNum n) = node\n+    (s, (rsc, rp), d) = stats\n+    new_state = if isDataNode node\n+                    then (tail stack, dump, hUpdate heap (stack !! 1) (NNum (-n)), globals, (s, (rsc, rp + 1), d))\n+                    else (arg_addr : [], (tail stack) : dump, heap, globals, stats)\n+\n+primArith :: TiState -> (Int -> Int -> Int) -> TiState\n+primArith (stack, dump, heap, globals, stats) op = new_state\n+    where\n+    arg_addrs = take 2 (getargs heap stack)\n+    lnode = hLookup heap (arg_addrs !! 0)\n+    rnode = hLookup heap (arg_addrs !! 1)\n+    (NNum n) = lnode\n+    (NNum m) = rnode\n+    (s, (rsc, rp), d) = stats\n+    new_state = if isDataNode lnode\n+                    then if isDataNode rnode\n+                            then (drop 2 stack, dump, hUpdate heap (stack !! 2) (NNum (op n m)), globals, (s, (rsc, rp + 1), d))\n+                            else (arg_addrs !! 1 : [], (drop 2 stack) : dump, heap, globals, stats)\n+                    else (arg_addrs !! 0 : [], (drop 1 stack) : dump, heap, globals, stats)\n\n instantiate\n     :: CoreExpr -- Body of supercombinator\n@@ -180,8 +238,8 @@ showResults states = iDisplay ( iConcat [ showState (last states), showStats (la\n showState :: TiState -> Iseq\n showState (stack, dump, heap, globals, stats)\n     = iConcat [\n-        showStack heap stack, iNewline --,\n- --       showHeap heap, iNewline\n+        showStack heap stack, iNewline ,\n+        showHeap heap, iNewline\n     ]\n\n showHeap :: TiHeap -> Iseq\n@@ -232,6 +290,7 @@ showNode (NAp a1 a2)\n showNode (NSupercomb name args body) = iStr (\"NSupercomb \" ++ name)\n showNode (NNum n) = (iStr \"NNum \") `iAppend` (iNum n)\n showNode (NInd addr) = (iStr \"NInd \") `iAppend` (showAddr addr)\n+showNode (NPrim n p) = (iStr (\"NPrim name:[\" ++ n ++ \"] \")) `iAppend` (showPrim p)\n\n showAddr :: Addr -> Iseq\n showAddr addr = iStr (show addr)\n@@ -241,6 +300,13 @@ showFWAddr addr = iStr (space (4 - length str) ++ str)\n     where\n     str = show addr\n\n+showPrim :: Primitive -> Iseq\n+showPrim Neg = iStr \"Neg\"\n+showPrim Add = iStr \"Add\"\n+showPrim Sub = iStr \"Sub\"\n+showPrim Mul = iStr \"Mul\"\n+showPrim Div = iStr \"Div\"\n+\n showStats :: TiState -> Iseq\n showStats (stack, dump, heap, globals, stats)\n     = iConcat [\n@@ -253,6 +319,8 @@ showStats (stack, dump, heap, globals, stats)\n     ]\n\n main :: IO ()\n-main = putStrLn $ runProg $ \"main = W C (W C) (W C) (W C) I 3\"\n+--main = putStrLn $ runProg $ \"main = negate (I 3)\"\n+main = putStrLn $ runProg $ \"main = (3 * negate (I 3) + (15 / 3) - 7 * 3) + (8 / 2) + 4 * 4\"\n+--main = putStrLn $ runProg $ \"main = W C (W C) (W C) (W C) I 3\"\n --main = putStrLn $ runProg $ \"main = letrec x = x f in x; x = 5; two = S C I; inc = S C; three = inc two; add = C S (C C); mul = C\"\n---main = putStrLn $ runProg $ \"pair x y f =f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n+--main = putStrLn $ runProg $ \"pair x y f = f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n\n\n# 20\u65e5\u76ee\n\u3084\u3063\u3068\u7b97\u8853\u6f14\u7b97\u3092\u5b9f\u88c5\u3059\u308b.\n\u6642\u9593\u3092\u304b\u3051\u3066\u8aad\u3093\u3067\u308b\u304b\u3089\u3053\u3053\u307e\u3067\u6765\u308b\u306e\u304c\u3059\u3054\u3044\u6642\u9593\u304b\u304b\u3063\u305f.\n\n## 2.6 Mark 4: Adding arithmetic\ndump\u3092\u4f7f\u3046\u521d\u3081\u3066\u306e\u30bb\u30af\u30b7\u30e7\u30f3.\n\n### 2.6.1 Transition rules for arithmetic\n\u7b97\u8853\u6f14\u7b97\u306e\u305f\u3081\u306e\u72b6\u614b\u9077\u79fb\u3092\u8003\u3048\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u308b.\n\u307e\u305a,\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306a\u5358\u9805\u6f14\u7b97\u5b50\u306e\u7b26\u53f7\u53cd\u8ee2\u304b\u3089\u8003\u3048\u308b.\n\u305d\u306e\u4ed6\u306e\u7b97\u8853\u6f14\u7b97\u5b50\u3082\u540c\u69d8.\n\n| a : a1 : [] | d | h | f |\n|:-:|:-:|:-:|:-:|\n| a1 : [] | d | h' | f |\n\n| h |   |\n|:-:|:-:|\n| a | **NPrim Neg** |\n| a1 | **NAp**  a b |\n| b | **NNum** n |\n\n| h' |   |\n|:-:|:-:|\n| a1 | **NNum** (-n) |\n\n\u3068,\u306a\u308a\u305d\u3046.\n\n\u3053\u308c\u306f,\u4eca\u30b9\u30bf\u30c3\u30af\u306b\u306f\u7b26\u53f7\u53cd\u8ee2\u3068\u305d\u306e\u5f15\u6570\u3057\u304b\u7a4d\u307e\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f.\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b.\n\n\u5f15\u6570\u304c(**NNum**\u3067\u306f\u306a\u304f)\u307e\u3060\u8a55\u4fa1\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u3057\u305f\u3089,\u4e00\u4f53\u4f55\u304c\u8d77\u3053\u308b\u3060\u308d\u3046\u304b?\n\u5f15\u6570\u3092(\u3053\u308c\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u3068\u6df7\u540c\u3057\u306a\u3044\u305f\u3081\u306b)\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u306b\u7a4d\u3093\u3067\u8a55\u4fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a,\u3053\u308c\u304c\u7d42\u4e86\u3057\u305f\u3089,\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3057\u3066\u518d\u3073\u7b26\u53f7\u53cd\u8ee2\u306b\u6311\u6226\u3059\u308b.\n\u3053\u308c\u306b\u306f\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u3069\u3046\u306b\u304b\u3057\u3066\u4fdd\u5b58\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067,dump\u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3088\u3046.\ndump\u306f\u5358\u306a\u308b,\u300c\u30b9\u30bf\u30c3\u30af\u304c\u8981\u7d20\u3068\u306a\u308b\u300d\u30b9\u30bf\u30c3\u30af\u3067\u3042\u308b.\n\n**Neg**\u3092\u8a55\u4fa1\u3059\u308b\u3068\u304d\u306e\u30eb\u30fc\u30eb\u306f,\u6b21\u306e\u3088\u3046\u306b\u306a\u308b:\n\n| a : a1 : [] | d | h | f |\n|:-:|:-:|:-:|:-:|\n| b : [] | (a : a1 : []) : d | h | f |\n\n\u3053\u308c\u306f,b\u304c**NNum**\u3067\u306f\u306a\u3044\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b.\n\n\u8a55\u4fa1\u304c\u7d42\u4e86\u3059\u308b\u3068,\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3059\u5fc5\u8981\u304c\u3042\u308b:\n\n| a : [] | s : d | h[a : NNum n] | f |\n|:-:|:-:|:-:|:-:|\n| s | d | h | f |\n\n\u53e4\u3044\u30b9\u30bf\u30c3\u30af\u3092\u623b\u3059\u3068,\u307e\u305f\u7b26\u53f7\u53cd\u8ee2\u6f14\u7b97\u5b50\u304c\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\u306b\u898b\u3064\u304b\u308b\u304c,\u4eca\u5ea6\u306f\u6b63\u898f\u5f62\u306b\u306a\u3063\u3066\u3044\u308b.\n\n\u3060\u3051\u3069\u6ce8\u610f\u3057\u3088\u3046!\n\u78ba\u304b\u306b\u7b26\u53f7\u53cd\u8ee2\u306e\u5f15\u6570\u306f\u6b63\u898f\u5f62\u306b\u306a\u3063\u305f\u304c,\u5f15\u6570\u306e\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u306e\u3067,*\u4eca\u3084\u305d\u308c\u306f\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b*.\n\u5373\u3061,**Neg**\u306e\u6700\u521d\u306e\u30eb\u30fc\u30eb\u306f**NNum**\u30ce\u30fc\u30c9\u3092\u76f4\u63a5\u306f\u898b\u3064\u3051\u3089\u308c\u306a\u3044\u306e\u3060((negate (id 3))\u3092\u8003\u3048\u3088).\n\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f,\u9069\u7528\u30ce\u30fc\u30c9\u3092unwind\u3059\u308b\u30eb\u30fc\u30eb(Rule 2.1)\u306e\u76f4\u524d\u306b\u65b0\u305f\u306a\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3060.\n\u9069\u7528\u3055\u308c\u308b\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6b8a\u306a\u5834\u5408\u306b,\u3053\u306e\u30eb\u30fc\u30eb\u306f,\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u306e\u53c2\u7167\u5148\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u9069\u7528\u30ce\u30fc\u30c9\u306b\u66f4\u65b0\u3059\u308b.\n\n| a : s | d | h[a : NAp a1 a2, a2 : NInd a3] | f |\n|:-:|:-:|:-:|:-:|\n| a : s | d | h[a : NAp a1 a3] | f |\n\n\u3053\u306e\u30eb\u30fc\u30eb\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b,\u307e\u305f,\u8a55\u4fa1\u304c\u7d42\u4e86\u3057\u305f\u5f8c\u306bredex\u306e\u30eb\u30fc\u30c8\u304b\u3089\u65b0\u305f\u306bunwind\u3059\u308b\u305f\u3081\u306b,Rule 2.6\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b:\n(\u8a33\u306b\u81ea\u4fe1\u306a\u3057.In order to bring this rule into play, we need to modify Rule 2.6 so that it unwinds anew from the root of the redex after the evaluation is completed:)\n\u610f\u5473\u7684\u306b\u306f,NPrim Neg\u30ce\u30fc\u30c9\u3092\u53d6\u3063\u3066,NAp\u306e\u9069\u7528\u3092\u8a55\u4fa1\u3059\u308c\u3070,\u8a08\u7b97\u304c\u7d9a\u884c\u3059\u308b.\u3060\u3068\u601d\u3046.\n\n| a : a1 : [] | d | h | f |\n|:-:|:-:|:-:|:-:|\n| b : [] | (a1 : []) : d | h | f |\n\n\u3053\u308c\u306f\u5c11\u3005\u9762\u5012\u3067\u3042\u308a,\u7d9a\u304f\u30c1\u30e3\u30d7\u30bf\u30fc\u3067\u884c\u3046\u5b9f\u88c5\u3067\u306f\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b.\n(\u3058\u3083\u3042\u521d\u3081\u3063\u304b\u3089\u305d\u308c\u3092\u7d39\u4ecb\u3057\u308d\u3088,\u3068\u601d\u3044\u307e\u3057\u305f\u307e\u308b)\n\n#### Exercise 2.15\n\u52a0\u7b97\u306e\u305f\u3081\u306e\u9077\u79fb\u30eb\u30fc\u30eb\u3092\u66f8\u304d\u4e0b\u305b.(\u4ed6\u306e\u4e8c\u9805\u7b97\u8853\u6f14\u7b97\u5b50\u3082\u5b9f\u8cea\u7684\u306b\u540c\u69d8\u3067\u3042\u308b)\n\n| a : a1 : a2 : [] | d | h | f |\n|:-:|:-:|:-:|:-:|\n| a1 : [] | d | h' | f |\n\n| h |   |\n|:-:|:-:|\n| a | **NPrim Add** |\n| a1 | **NAp**  a b1 |\n| a2 | **NAp**  a1 b2 |\n| b1 | **NNum** n |\n| b2 | **NNum** m |\n\n\n| h' |   |\n|:-:|:-:|\n| a1 | **NNum** (n + m) |\n\n\u3068\u306a\u308b.\u4ed6\u306e\u6f14\u7b97\u5b50\u3082\u540c\u69d8.\n\nb1,b2\u304cNNum\u3058\u3083\u306a\u3044\u3068\u304d\u306fdump\u3092\u4f7f\u3046\u306e\u304b?\n\u305d\u306e\u6642,b1\u3068b2\u3092\u4e21\u65b9\u8a55\u4fa1\u3059\u308b\u306e\u304b\u306a.\u3088\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u6b21\u3042\u305f\u308a\u306b\u66f8\u3044\u3066\u305d\u3046.\n\n### 2.6.2 Implementing arithmetic\n\u7b97\u8853\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u591a\u5c11\u624b\u3092\u52a0\u3048\u308b\u3068\u3053\u308d\u304c\u51fa\u3066\u304f\u308b.\n\u6700\u521d\u306bTiDump\u3092\u5909\u66f4\u3059\u308b.\n\n\u540d\u524d\u304cn\u3067\u5024\u304cp\u3067\u3042\u308b\u3088\u3046\u306aNPrim n p\u30ce\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b.\n\u5024\u306f`data Primitive = Neg | Add | Sub | Mul | Div`\u306e\u3044\u305a\u308c\u304b.\nNSupercomb\u306e\u6642\u3068\u540c\u69d8\u306b,\u540d\u524d\u306f\u30c7\u30d0\u30c3\u30b0\u7528\u306b\u306e\u307f\u7528\u3044\u308b.\n\nshowNode\u3082\u3053\u308c\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\n\u305d\u308c\u3067\u306f,\u305d\u308c\u305e\u308c\u306esupercombinator\u306b\u5bfe\u3057\u3066NSupercomb\u3092\u30d2\u30fc\u30d7\u306b\u78ba\u4fdd\u3057\u305f\u306e\u3068\u540c\u69d8\u306b,\u305d\u308c\u305e\u308c\u306eprimitive\u306b\u5bfe\u3057\u3066NPrim\u30ce\u30fc\u30c9\u3092\u30d2\u30fc\u30d7\u306b\u78ba\u4fdd\u3059\u308b.\n\u65b0\u305f\u306a,\u305d\u308c\u305e\u308c\u306eprimitive\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3078\u306e\u675f\u7e1b\u3092,supercombinator\u306e\u3068\u304d\u3068\u540c\u69d8\u306b,\u30de\u30b7\u30f3\u306e\u72b6\u614b\u3092\u69cb\u6210\u3059\u308bglobals\u306b\u8ffd\u52a0\u3059\u308b.\n\u3053\u308c\u306f,buildInitialHeap\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u7c21\u5358\u306b\u884c\u3048\u308b.\n\n\u307e\u305f,\u3055\u3089\u306a\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3092\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306f,Primitive\u30bf\u30a4\u30d7\u3068primitives\u3092\u5909\u66f4\u3059\u308c\u3070\u826f\u3044.\n\nallocateSc\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u308ballocatePrim\u3092\u5b9a\u7fa9\u3059\u308b.\n\n\u6b21\u306b,step\u306e\u4e2d\u306edispatch\u95a2\u6570\u304c,NPrim\u30ce\u30fc\u30c9\u3092\u898b\u3064\u3051\u305f\u3068\u304d\u306bprimStep\u3092\u547c\u3076\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\nprimStep\u306f\u4f7f\u308f\u308c\u305f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u5bfe\u3057case\u3067\u5206\u5c90\u3057,primNeg\u3084primAdd\u306e\u3088\u3046\u306a\u5b9f\u969b\u306b\u6f14\u7b97\u3092\u3059\u308b\u88dc\u52a9\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059.\n\u3055\u3057\u3042\u305f\u308aprimStep\u306f\u7b26\u53f7\u53cd\u8ee2\u3060\u3051\u3092\u542b\u3080\u3053\u3068\u3068\u3059\u308b.\n\nprimNeg\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b:\n\n- getArgs\u3092\u7528\u3044\u30b9\u30bf\u30c3\u30af\u4e0a\u304b\u3089\u5f15\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5c55\u958b\u3057,hLookup\u3092\u7528\u3044\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u3088\u3063\u3066\u6307\u3057\u793a\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u3092\u5f97\u308b.\n- \u5f15\u6570\u304c\u8a55\u4fa1\u6e08\u307f\u304b\u3069\u3046\u304b\u3092\u88dc\u52a9\u95a2\u6570\u306eisDataNode\u3092\u4f7f\u3044\u8abf\u3079\u308b.\n- \u672a\u8a55\u4fa1\u306a\u3089\u3070,Rule 2.9\u306b\u3088\u308a\u305d\u306e\u5f15\u6570\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u6e96\u5099\u3059\u308b.\n  \u3053\u308c\u306f\u73fe\u5728\u306e\u30b9\u30bf\u30c3\u30af\u3092dump\u306b\u30d7\u30c3\u30b7\u30e5\u3057,negate\u306e\u5f15\u6570\u3060\u3051\u3092\u8981\u7d20\u306b\u6301\u3064\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u308b\u3053\u3068\u3092\u5fc5\u8981\u3068\u3059\u308b.\n- \u8a55\u4fa1\u6e08\u307f\u306a\u3089\u3070,hUpdate\u3092\u4f7f\u3044redex\u306e\u30eb\u30fc\u30c8\u3092\u7d50\u679c\u304c\u5165\u3063\u3066\u3044\u308bNNum\u30ce\u30fc\u30c9\u3067\u4e0a\u66f8\u304d\u3057,\u30b9\u30bf\u30c3\u30af\u3092\u9069\u5207\u306b\u64cd\u4f5c\u3057\u305f\u4e0a\u3067\u5236\u5fa1\u3092\u8fd4\u3059.\n\n\u6b21\u306b,\u6570\u5024\u3092unwind\u3059\u308b\u305f\u3081\u306b\u65b0\u3057\u3044\u30eb\u30fc\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306bnumStep\u306e\u5b9a\u7fa9\u306f\u5909\u66f4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u3082\u3057\u30b9\u30bf\u30c3\u30af\u304c\u305f\u3060\u4e00\u3064\u306e\u8981\u7d20\u3060\u3051\u3067,\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u304cNNum\u30ce\u30fc\u30c9\u3067\u3042\u308a,\u304b\u3064dump\u304c\u7a7a\u3067\u306a\u3044\u306a\u3089\u3070,dump\u306e\u5148\u982d\u306e\u8981\u7d20\u3092\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u306b\u3059\u308b.\n\u3053\u308c\u3089\u306e\u72b6\u6cc1\u3067\u306a\u3051\u308c\u3070,\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b.\n\u540c\u69d8\u306b,apStep\u306e\u5b9a\u7fa9\u3082\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5909\u66f4\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u3053\u308c\u306f\u5f15\u6570\u304c\u9593\u63a5\u53c2\u7167\u30ce\u30fc\u30c9\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057,hUpdate\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3067\u304d\u308b.\n\n\u6700\u5f8c\u306b,TiFinal\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u73fe\u5728\u306f\u30b9\u30bf\u30c3\u30af\u306bNNum\u3057\u304b\u542b\u307e\u306a\u3044\u3068\u304d\u306b\u5b9f\u884c\u3092\u505c\u6b62\u3059\u308b\u304c,*\u3053\u306e\u52d5\u4f5c\u306fdump\u304c\u7a7a\u306e\u3068\u304d\u306b\u306e\u307f\u5b9f\u884c\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.*\n\u305d\u3046\u3067\u306a\u3044\u3068\u65b0\u3057\u3044\u30eb\u30fc\u30eb2.7\u3092\u5b9f\u884c\u3059\u308b\u6a5f\u4f1a\u304c\u306a\u3044\u304b\u3089\u306d!\n\n#### Exercise 2.16\n\u3053\u308c\u3089\u306e\u5909\u66f4\u3092\u5b9f\u88c5\u3057,`main = negate (I 3)`\u306a\u3069\u3068\u3057\u3066\u6b63\u3057\u304f\u52d5\u304f\u304b\u8a66\u305b.\n\u2192\u3084\u3063\u305f.\u52d5\u3044\u305f.\n\n\u3053\u306e\u660e\u3089\u304b\u306a\u62e1\u5f35\u306f\u4eca\u3084\u52a0\u6e1b\u4e57\u9664\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3042\u308b.\n\u3053\u308c\u3089\u306f\u307b\u307c\u540c\u3058\u306a\u306e\u3067PrimArith\u3068\u3044\u3046\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5bfe\u5fdc\u3059\u308b\u4e8b\u306b\u3088\u308a,\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b.\n\n#### Exercise 2.17\nPrimArith\u3092\u5b9f\u88c5\u3057\u3066\u52d5\u304b\u305b.\n\n\u3068\u3044\u3046\u304b\u3053\u306e\u672c\u308f\u308a\u3068\u8aad\u8005\u306b\u3076\u3093\u6295\u3052\u904e\u304e\u3058\u3083\u306a\u3044?\n\u4e8c\u9805\u6f14\u7b97\u306eb1,b2\u306e\u8a55\u4fa1\u3082\u81ea\u5206\u3067\u8003\u3048\u308d\u3063\u3066\u3053\u3068\u3067\u3059\u304b.\n\n- b1,b2\u306e\u30a2\u30c9\u30ec\u30b9\u3092getargs\u3067\u53d6\u5f97\n- \u6307\u3057\u793a\u3059\u30ce\u30fc\u30c9\u304c\u4e21\u65b9NNum\u304b\u3069\u3046\u304b\u78ba\u8a8d\n- \u9055\u3063\u305f\u3089\u65b0\u3057\u3044\u30b9\u30bf\u30c3\u30af\u3092\u4f5c\u3063\u3066\u8a55\u4fa1\n- \u4e21\u65b9NNum\u306a\u3089\u7b97\u8853\u6f14\u7b97\u3092\u5b9f\u884c\n\n\u3067\u3067\u304d\u308b\u304b\u306a?\n\n\u9014\u4e2d,Language\u306epOneOrMore\u304c\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u305f.\n\u5b9f\u969b\u3053\u3053\u306f\u30c1\u30fc\u30c8\u3057\u3066(\u30cd\u30c3\u30c8\u3067\u5b9f\u88c5\u3092\u898b\u3064\u3051\u3066)\u66f8\u3044\u305f\u5834\u6240\u3060\u3063\u305f\u306e\u3067\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u304b\u3063\u305f.\n\u6b63\u3057\u3044\u95a2\u6570\u306b\u76f4\u305b\u3066\u3088\u304b\u3063\u305f.\n\n\u7d50\u679c,`main = (3 * negate (I 3) + (15 / 3) - 7 * 3) + (8 / 2) + 4 * 4`\u307f\u305f\u3044\u306a\u306e\u304c\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f.\n\u3053\u306e\u8a00\u8a9e\u306e`-`\u3084`/`\u306f`1-2-3`\u307f\u305f\u3044\u306b\u3067\u304d\u306a\u3044\u306e\u3067,\u3044\u3061\u3044\u3061\u62ec\u5f27\u304c\u5fc5\u8981.\n\u6642\u9593\u304c\u3042\u3063\u305f\u3089\u76f4\u305d\u3046.\n\n***2.6\u304c\u7d42\u308f\u308a.\u7b97\u8853\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304c,\u50d5\u306e\u6020\u6162\u306e\u3064\u3051\u3092\u6255\u3046\u3053\u3068\u306b\u306a\u3063\u305f.\u3084\u3063\u3071\u308a\u7406\u89e3\u3057\u306a\u3044\u3067\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u308b\u306e\u306f\u826f\u304f\u306a\u3044\u306d.***\n\ndiff\u3068\u3063\u305f\u3084\u30fc\u3064\n\n```hs:Language.hs\ndiff --git a/Language.hs b/Language.hs\nindex 7f81355..eea8689 100644\n--- a/Language.hs\n+++ b/Language.hs\n@@ -224,13 +224,13 @@ pEmpty :: a -> Parser a\n pEmpty s toks = [(s, toks)]\n \n pOneOrMore :: Parser a -> Parser [a]\n-pOneOrMore p = (take 1) . (pThen (:) p (pZeroOrMore p))\n+pOneOrMore p = (pThen (:) p (pZeroOrMore p))\n \n pApply :: Parser a -> (a -> b) -> Parser b\n pApply a f toks = [(f b, tokens) | (b, tokens) <- a toks]\n \n pOneOrMoreWithSep :: Parser a -> Parser b -> Parser [a]\n-pOneOrMoreWithSep a b = (take 1) . (pThen (:) a ((pThen (\\_ x -> x) b (pOneOrMoreWithSep a b)) `pAlt` (pEmpty [])))\n+pOneOrMoreWithSep a b = (pThen (:) a ((pThen (\\_ x -> x) b (pOneOrMoreWithSep a b)) `pAlt` (pEmpty [])))\n \n pSat :: (String -> Bool) -> Parser String\n pSat pd = pSatpred\n```\n\n```hs:Main.hs\ndiff --git a/Main.hs b/Main.hs\nindex 651f971..9ee601c 100644\n--- a/Main.hs\n+++ b/Main.hs\n@@ -8,13 +8,16 @@ runProg = showResults . eval . compile . parse\n \n type TiState = (TiStack, TiDump, TiHeap, TiGlobals, TiStats)\n type TiStack = [Addr]\n-data TiDump = DummyTiDump\n-initialTiDump = DummyTiDump\n+type TiDump = [TiStack]\n+initialTiDump = []\n type TiHeap = Heap Node\n data Node = NAp Addr Addr -- Application\n     | NSupercomb Name [Name] CoreExpr -- Supercombinator\n     | NNum Int -- Number\n     | NInd Addr -- Indirection\n+    | NPrim Name Primitive -- Primitive\n+\n+data Primitive = Neg | Add | Sub | Mul | Div\n \n type TiGlobals = ASSOC Name Addr\n tiStatInitial :: TiStats\n@@ -41,13 +44,24 @@ compile program = (initial_stack, initialTiDump, initial_heap, globals, tiStatIn\n extraPreludeDefs = []\n \n buildInitialHeap :: [CoreScDefn] -> (TiHeap, TiGlobals)\n-buildInitialHeap sc_defs = mapAccuml allocateSc hInitial sc_defs\n+buildInitialHeap sc_defs = (heap2, sc_addrs ++ prim_addrs)\n+    where\n+    (heap1, sc_addrs) = mapAccuml allocateSc hInitial sc_defs\n+    (heap2, prim_addrs) = mapAccuml allocatePrim heap1 primitives\n+\n+primitives :: ASSOC Name Primitive\n+primitives = [ (\"negate\", Neg), (\"+\", Add), (\"-\", Sub), (\"*\", Mul), (\"/\", Div) ]\n \n allocateSc :: TiHeap -> CoreScDefn -> (TiHeap, (Name, Addr))\n allocateSc heap (name, args, body) = (heap', (name, addr))\n     where\n     (heap', addr) = hAlloc heap (NSupercomb name args body)\n \n+allocatePrim :: TiHeap -> (Name, Primitive) -> (TiHeap, (Name, Addr))\n+allocatePrim heap (name, prim) = (heap', (name, addr))\n+    where\n+    (heap', addr) = hAlloc heap (NPrim name prim)\n+\n eval :: TiState -> [TiState]\n eval state = state : rest_states\n --eval state | tiFinal state = [state]\n@@ -61,7 +75,7 @@ doAdmin :: TiState -> TiState\n doAdmin state = applyToStats tiStatIncSteps state\n \n tiFinal :: TiState -> Bool\n-tiFinal ([sole_addr], dump, heap, globals, stats) = isDataNode (hLookup heap sole_addr)\n+tiFinal ([sole_addr], [], heap, globals, stats) = isDataNode (hLookup heap sole_addr)\n tiFinal ([], dump, heap, globals, stats) = error \"Empty stack!\"\n tiFinal state = False -- Stack contains more than one item\n \n@@ -77,22 +91,30 @@ step state = dispatch (hLookup heap (hd stack))\n     dispatch (NAp a1 a2) = apStep state a1 a2\n     dispatch (NSupercomb sc args body) = scStep state sc args body\n     dispatch (NInd addr) = indStep state addr\n+    dispatch (NPrim n p) = primStep state n p\n \n numStep :: TiState -> Int -> TiState\n-numStep state n = error \"Number applied as a function!\"\n+numStep (stack, dump, heap, globals, stats) n\n+    = if length stack > 1 || null dump\n+        then error \"Number applied as a function!\"\n+        else (head dump, tail dump, heap, globals, stats)\n \n-apStep :: TiState -> Addr -> Addr -> TiState\n-apStep (stack, dump, heap, globals, stats) a1 a2 = (a1 : stack, dump, heap, globals, (s, r, if d < length stack + 1 then d + 1 else d)) where (s, r, d) = stats\n \n-indStep :: TiState -> Addr -> TiState\n-indStep (stack, dump, heap, globals, stats) addr = (addr : (tail stack), dump, heap, globals, stats)\n+apStep :: TiState -> Addr -> Addr -> TiState\n+apStep (stack, dump, heap, globals, stats) a1 a2\n+    = case hLookup heap a2 of\n+        (NInd a3) -> (stack, dump, hUpdate heap (head stack) (NAp a1 a3), globals, stats)\n+        _         -> (a1 : stack, dump, heap, globals, (s, r, new_d))\n+    where\n+    (s, r, d) = stats\n+    new_d = if d < length stack + 1 then d + 1 else d\n \n scStep :: TiState -> Name -> [Name] -> CoreExpr -> TiState\n scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n     = (new_stack, dump, new_heap, globals, new_stats)\n     where\n     new_stack = if length arg_names + 1 <= length stack then result_addr : (drop (length arg_names + 1) stack) else error \"too few arguments\"\n-    upd_addr = head (drop (length arg_names) stack) -- stack[n] == a_n for p65 (2.3)\n+    upd_addr = stack !! (length arg_names) -- stack[n] == a_n for p65 (2.3)\n     --(new_heap, result_addr) = instantiate body heap env\n     new_heap = instantiateAndUpdate body upd_addr heap env\n     result_addr = upd_addr\n@@ -103,7 +125,43 @@ scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n -- now getargs since getArgs conflicts with Gofer standard.prelude\n getargs :: TiHeap -> TiStack -> [Addr]\n getargs heap (sc:stack) = map get_arg stack\n-    where get_arg addr = arg where (NAp fun arg) = hLookup heap addr\n+    where get_arg addr = arg where (NAp _ arg) = hLookup heap addr\n+\n+indStep :: TiState -> Addr -> TiState\n+indStep (stack, dump, heap, globals, stats) addr = (addr : (tail stack), dump, heap, globals, stats)\n+\n+primStep :: TiState -> Name -> Primitive -> TiState\n+primStep state _ Neg = primNeg state\n+primStep state _ Add = primArith state (+)\n+primStep state _ Sub = primArith state (-)\n+primStep state _ Mul = primArith state (*)\n+primStep state _ Div = primArith state div\n+\n+primNeg :: TiState -> TiState\n+primNeg (stack, dump, heap, globals, stats) = new_state\n+    where\n+    arg_addr = head (getargs heap stack)\n+    node = hLookup heap arg_addr\n+    (NNum n) = node\n+    (s, (rsc, rp), d) = stats\n+    new_state = if isDataNode node\n+                    then (tail stack, dump, hUpdate heap (stack !! 1) (NNum (-n)), globals, (s, (rsc, rp + 1), d))\n+                    else (arg_addr : [], (tail stack) : dump, heap, globals, stats)\n+\n+primArith :: TiState -> (Int -> Int -> Int) -> TiState\n+primArith (stack, dump, heap, globals, stats) op = new_state\n+    where\n+    arg_addrs = take 2 (getargs heap stack)\n+    lnode = hLookup heap (arg_addrs !! 0)\n+    rnode = hLookup heap (arg_addrs !! 1)\n+    (NNum n) = lnode\n+    (NNum m) = rnode\n+    (s, (rsc, rp), d) = stats\n+    new_state = if isDataNode lnode\n+                    then if isDataNode rnode\n+                            then (drop 2 stack, dump, hUpdate heap (stack !! 2) (NNum (op n m)), globals, (s, (rsc, rp + 1), d))\n+                            else (arg_addrs !! 1 : [], (drop 2 stack) : dump, heap, globals, stats)\n+                    else (arg_addrs !! 0 : [], (drop 1 stack) : dump, heap, globals, stats)\n \n instantiate\n     :: CoreExpr -- Body of supercombinator\n@@ -180,8 +238,8 @@ showResults states = iDisplay ( iConcat [ showState (last states), showStats (la\n showState :: TiState -> Iseq\n showState (stack, dump, heap, globals, stats)\n     = iConcat [\n-        showStack heap stack, iNewline --,\n- --       showHeap heap, iNewline\n+        showStack heap stack, iNewline ,\n+        showHeap heap, iNewline\n     ]\n \n showHeap :: TiHeap -> Iseq\n@@ -232,6 +290,7 @@ showNode (NAp a1 a2)\n showNode (NSupercomb name args body) = iStr (\"NSupercomb \" ++ name)\n showNode (NNum n) = (iStr \"NNum \") `iAppend` (iNum n)\n showNode (NInd addr) = (iStr \"NInd \") `iAppend` (showAddr addr)\n+showNode (NPrim n p) = (iStr (\"NPrim name:[\" ++ n ++ \"] \")) `iAppend` (showPrim p)\n \n showAddr :: Addr -> Iseq\n showAddr addr = iStr (show addr)\n@@ -241,6 +300,13 @@ showFWAddr addr = iStr (space (4 - length str) ++ str)\n     where\n     str = show addr\n \n+showPrim :: Primitive -> Iseq\n+showPrim Neg = iStr \"Neg\"\n+showPrim Add = iStr \"Add\"\n+showPrim Sub = iStr \"Sub\"\n+showPrim Mul = iStr \"Mul\"\n+showPrim Div = iStr \"Div\"\n+\n showStats :: TiState -> Iseq\n showStats (stack, dump, heap, globals, stats)\n     = iConcat [\n@@ -253,6 +319,8 @@ showStats (stack, dump, heap, globals, stats)\n     ]\n \n main :: IO ()\n-main = putStrLn $ runProg $ \"main = W C (W C) (W C) (W C) I 3\"\n+--main = putStrLn $ runProg $ \"main = negate (I 3)\"\n+main = putStrLn $ runProg $ \"main = (3 * negate (I 3) + (15 / 3) - 7 * 3) + (8 / 2) + 4 * 4\"\n+--main = putStrLn $ runProg $ \"main = W C (W C) (W C) (W C) I 3\"\n --main = putStrLn $ runProg $ \"main = letrec x = x f in x; x = 5; two = S C I; inc = S C; three = inc two; add = C S (C C); mul = C\"\n---main = putStrLn $ runProg $ \"pair x y f =f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n+--main = putStrLn $ runProg $ \"pair x y f = f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n```\n"}