{"context": "\u8af8\u4e8b\u60c5\u3067OpenCV\u306e\u52c9\u5f37\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u304f\u306a\u308a\u3001\u8272\u3005\u8abf\u3079\u308b\u3068OpenCV\u3067\u7c21\u5358\u306b\u9854\u691c\u51fa\u3067\u304d\u308b\u3068\u3044\u3046\u306e\u3092\u898b\u304b\u3051\u305f\u306e\u3067\u5b9f\u8df5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4f3c\u305f\u3088\u3046\u306a\u8a18\u4e8b\u306f\u6ca2\u5c71\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3002\n\u4f8b\u3068\u3057\u3066\u3001\u691c\u51fa\u3057\u305f\u9854\u9818\u57df\u306b\u3053\u308c\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8cbc\u308a\u4ed8\u3051\u30a4\u30e1\u30fc\u30b8\u306e\u4f5c\u6210\nimage: \u8cbc\u308a\u4ed8\u3051\u5148\u306e\u753b\u50cf\nleft, top: \u8cbc\u308a\u4ed8\u3051\u4f4d\u7f6e\u3002\u9854\u691c\u51fa\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nsize: \u9854\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3002\u3053\u308c\u3082\u9854\u691c\u51fa\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\ndef kurumirize(image, left, top, size):\n    # \u30af\u30eb\u30df\u30eb\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\n    image_kuru = cv2.imread('kuru.png', cv2.IMREAD_UNCHANGED)\n    # \u30af\u30eb\u30df\u30eb\u753b\u50cf\u3092\u9854\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b5\u30a4\u30ba\u5909\u66f4\n    image_kuru = cv2.resize(image_kuru, (size, size)) \n    # \u5909\u66f4\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u308a\u51fa\u3059\uff08size\u3068\u540c\u3058\uff09\n    width, height = image_kuru.shape[:2]\n    # \u753b\u50cf\u306e\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u3060\u3051\u53d6\u308a\u51fa\u3059\n    mask_ = image_kuru[:,:,3]\n    # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u3092BGR\u306b\u683c\u7d0d\u3057\u305fndarray\u3092\u4f5c\u308b\n    mask = np.ones((width, height, 3))\n    for i in range(len(mask)):\n        for j in range(len(mask[0])):\n            mask[i][j] = np.ones(3) * mask_[i][j]\n    # 0~1\u306b\u306a\u308b\u3088\u3046\u306b\u898f\u683c\u5316\n    mask = mask / 255.0\n    # \u5024\u3092float\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304f\u3002\n    image = image.astype('float64')\n    # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306f\u3082\u3046\u3044\u3089\u306a\u3044\u306e\u3067\u305d\u308c\u4ee5\u5916\u3092\u53d6\u308a\u51fa\u3059\n    image_kuru = image_kuru[:,:,:3]\n    # \u6307\u5b9a\u306e\u4f4d\u7f6e\u306b\u753b\u50cf\u3092\u8cbc\u308a\u8fbc\u3093\u3067\u8fd4\u3059\n    image[top:top+height, left:left+width] *= 1 - mask\n    image[top:top+height, left:left+width] += mask * image_kuru\n    return image\n\n\u30b3\u30fc\u30c9\u306e\u5927\u90e8\u5206\u306f\npython/OpenCV\u3067\u900f\u904epng\u3092\u30aa\u30fc\u30d0\u30ec\u30a4\u3059\u308b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u81ea\u5206\u306e\u74b0\u5883\u3060\u3068\u306a\u305c\u304bcv2.cv\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u30923\u3064\u91cd\u306d\u305f\u914d\u5217\u3092\u4f5c\u308b\u3068\u304d\u306b\u9762\u5012\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u9854\u691c\u51fa\n# \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\nimage = cv2.imread('image.jpg')\n# \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\nimage_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n# \u51fa\u6765\u5408\u3044\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u3092\u8aad\u307f\u8fbc\u3080\ncascade_path = \"haarcascade_frontalface_default.xml\"\ncascade = cv2.CascadeClassifier(cascade_path)\n# \u9854\u3092\u691c\u51fa\u3057\u3066\u9854\u9818\u57df\u306e\u6b63\u65b9\u5f62\u3092\u53d6\u5f97\nfacerect = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=1, minSize=(1, 1))\nif len(facerect) > 0:\n    #\u691c\u51fa\u3057\u305f\u9854\u3092\u56f2\u3080\u77e9\u5f62\u306b\u30af\u30eb\u30df\u30eb\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n    for rect in facerect:\n        image = kurumirize(image, rect[0], rect[1], rect[2])\n    #\u8a8d\u8b58\u7d50\u679c\u306e\u4fdd\u5b58\n    cv2.imwrite(\"out.png\", image)\n\n\u3053\u3061\u3089\u306f\u305d\u308c\u3053\u305d\u4f55\u3082\u8003\u3048\u308b\u5fc5\u8981\u304c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u62fe\u3063\u3066\u304d\u305f\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u3092cv2.CascadeClassifier\u306b\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3060\u3051\u3002\n\u3053\u306e\u5206\u985e\u5668\u306f\u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u307e\u3093\u307e\u3067\u30b0\u30b0\u308b\u3068\u51fa\u3066\u304d\u307e\u3059\u3002\n(2016/7/20\u8ffd\u8a18: \u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\u3092\u66f8\u304d\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\npython+OpenCV\u3067\u9854\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u308b)\n\u3093\u3067\u6700\u7d42\u7d50\u679c\u306f\u3053\u3061\u3089\n\u4e00\u5fdc\u3053\u306e\u753b\u50cf\u3067\u306f\u4e0a\u624b\u304f\u3044\u3063\u3066\u307e\u3059\u304c\u3001\n\u3053\u308c\u3084\u3053\u308c\u3092\u898b\u308b\u3068\u3069\u3046\u3082\u8aa4\u691c\u51fa\u304c\u591a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\u3082\u3063\u3068\u5225\u306e\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306b\u6539\u3081\u3066\u8272\u3005\u305f\u3081\u3057\u3066\u307f\u308b\u3064\u3082\u308a\u3067\u3059\u3002\n\u8af8\u4e8b\u60c5\u3067OpenCV\u306e\u52c9\u5f37\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u304f\u306a\u308a\u3001\u8272\u3005\u8abf\u3079\u308b\u3068OpenCV\u3067\u7c21\u5358\u306b\u9854\u691c\u51fa\u3067\u304d\u308b\u3068\u3044\u3046\u306e\u3092\u898b\u304b\u3051\u305f\u306e\u3067\u5b9f\u8df5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4f3c\u305f\u3088\u3046\u306a\u8a18\u4e8b\u306f\u6ca2\u5c71\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3002\n\u4f8b\u3068\u3057\u3066\u3001\u691c\u51fa\u3057\u305f\u9854\u9818\u57df\u306b[\u3053\u308c](https://qiita-image-store.s3.amazonaws.com/0/134222/4fa9cdf1-ebd4-cf9d-e367-85293969e5b1.png)\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n#\u8cbc\u308a\u4ed8\u3051\u30a4\u30e1\u30fc\u30b8\u306e\u4f5c\u6210\n\n```\nimage: \u8cbc\u308a\u4ed8\u3051\u5148\u306e\u753b\u50cf\nleft, top: \u8cbc\u308a\u4ed8\u3051\u4f4d\u7f6e\u3002\u9854\u691c\u51fa\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nsize: \u9854\u9818\u57df\u306e\u30b5\u30a4\u30ba\u3002\u3053\u308c\u3082\u9854\u691c\u51fa\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\ndef kurumirize(image, left, top, size):\n    # \u30af\u30eb\u30df\u30eb\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\n    image_kuru = cv2.imread('kuru.png', cv2.IMREAD_UNCHANGED)\n    # \u30af\u30eb\u30df\u30eb\u753b\u50cf\u3092\u9854\u9818\u57df\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u30b5\u30a4\u30ba\u5909\u66f4\n    image_kuru = cv2.resize(image_kuru, (size, size)) \n    # \u5909\u66f4\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u308a\u51fa\u3059\uff08size\u3068\u540c\u3058\uff09\n    width, height = image_kuru.shape[:2]\n    # \u753b\u50cf\u306e\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u3060\u3051\u53d6\u308a\u51fa\u3059\n    mask_ = image_kuru[:,:,3]\n    # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u3092BGR\u306b\u683c\u7d0d\u3057\u305fndarray\u3092\u4f5c\u308b\n    mask = np.ones((width, height, 3))\n    for i in range(len(mask)):\n        for j in range(len(mask[0])):\n            mask[i][j] = np.ones(3) * mask_[i][j]\n    # 0~1\u306b\u306a\u308b\u3088\u3046\u306b\u898f\u683c\u5316\n    mask = mask / 255.0\n    # \u5024\u3092float\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304f\u3002\n    image = image.astype('float64')\n    # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306f\u3082\u3046\u3044\u3089\u306a\u3044\u306e\u3067\u305d\u308c\u4ee5\u5916\u3092\u53d6\u308a\u51fa\u3059\n    image_kuru = image_kuru[:,:,:3]\n    # \u6307\u5b9a\u306e\u4f4d\u7f6e\u306b\u753b\u50cf\u3092\u8cbc\u308a\u8fbc\u3093\u3067\u8fd4\u3059\n    image[top:top+height, left:left+width] *= 1 - mask\n    image[top:top+height, left:left+width] += mask * image_kuru\n    return image\n```\n\n\u30b3\u30fc\u30c9\u306e\u5927\u90e8\u5206\u306f\n[python/OpenCV\u3067\u900f\u904epng\u3092\u30aa\u30fc\u30d0\u30ec\u30a4\u3059\u308b](http://blanktar.jp/blog/2015/02/python-opencv-overlay.html)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u81ea\u5206\u306e\u74b0\u5883\u3060\u3068\u306a\u305c\u304bcv2.cv\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5024\u30923\u3064\u91cd\u306d\u305f\u914d\u5217\u3092\u4f5c\u308b\u3068\u304d\u306b\u9762\u5012\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u9854\u691c\u51fa\n```\n# \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\nimage = cv2.imread('image.jpg')\n# \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\nimage_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n# \u51fa\u6765\u5408\u3044\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u3092\u8aad\u307f\u8fbc\u3080\ncascade_path = \"haarcascade_frontalface_default.xml\"\ncascade = cv2.CascadeClassifier(cascade_path)\n# \u9854\u3092\u691c\u51fa\u3057\u3066\u9854\u9818\u57df\u306e\u6b63\u65b9\u5f62\u3092\u53d6\u5f97\nfacerect = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=1, minSize=(1, 1))\nif len(facerect) > 0:\n    #\u691c\u51fa\u3057\u305f\u9854\u3092\u56f2\u3080\u77e9\u5f62\u306b\u30af\u30eb\u30df\u30eb\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n    for rect in facerect:\n        image = kurumirize(image, rect[0], rect[1], rect[2])\n    #\u8a8d\u8b58\u7d50\u679c\u306e\u4fdd\u5b58\n    cv2.imwrite(\"out.png\", image)\n```\n\n\u3053\u3061\u3089\u306f\u305d\u308c\u3053\u305d\u4f55\u3082\u8003\u3048\u308b\u5fc5\u8981\u304c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u62fe\u3063\u3066\u304d\u305f\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u3092cv2.CascadeClassifier\u306b\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3060\u3051\u3002\n\u3053\u306e\u5206\u985e\u5668\u306f\u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u307e\u3093\u307e\u3067\u30b0\u30b0\u308b\u3068\u51fa\u3066\u304d\u307e\u3059\u3002\n(2016/7/20\u8ffd\u8a18: \u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\u3092\u66f8\u304d\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n[python+OpenCV\u3067\u9854\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u308b](http://qiita.com/wwacky/items/98d8be2844fa1b778323))\n\n\u3093\u3067\u6700\u7d42\u7d50\u679c\u306f[\u3053\u3061\u3089](https://qiita-image-store.s3.amazonaws.com/0/134222/f5463e4f-fe8d-6607-f83e-97e1483e4a90.png)\n\u4e00\u5fdc\u3053\u306e\u753b\u50cf\u3067\u306f\u4e0a\u624b\u304f\u3044\u3063\u3066\u307e\u3059\u304c\u3001\n[\u3053\u308c](https://qiita-image-store.s3.amazonaws.com/0/134222/b5842a17-35b5-dbc1-9f6a-2c67ec0af5a8.png)\u3084[\u3053\u308c](https://qiita-image-store.s3.amazonaws.com/0/134222/6c0ce808-c016-c6ea-d97b-fcfa118159b3.png)\u3092\u898b\u308b\u3068\u3069\u3046\u3082\u8aa4\u691c\u51fa\u304c\u591a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\u3082\u3063\u3068\u5225\u306e\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306b\u6539\u3081\u3066\u8272\u3005\u305f\u3081\u3057\u3066\u307f\u308b\u3064\u3082\u308a\u3067\u3059\u3002\n\n\n", "tags": ["python3", "OpenCV"]}