{"context": " More than 1 year has passed since last update.\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3092SQLAlchemy\u3092\u4f7f\u3063\u3066\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\n\u30bf\u30a4\u30c8\u30eb\u306e\u3053\u3068\u3092\u3084\u308a\u305f\u3044\uff01\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306etype\u3092\u4f7f\u3063\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3084\u308c\u3070OK\u3002\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u66f8\u304f\u3002\nengine = create_engine(\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9URL, echo=True, encoding='utf-8')\nbase = declarative_base(engine)\n\ndic = {\n    '__tablename__': \u30c6\u30fc\u30d6\u30eb\u540d,\n    '__table_args__': {'autoload': True}}}\nobj = type('MyObject', (base,), dic)\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\u65e2\u5b58\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f5c\u308bautoload = True\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nsql_sample.py\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\n\nschema = 'sqlite:///test.db'\n\nengine = create_engine(schema, echo=False, encoding='utf-8')\nbase = declarative_base(engine)\nsession = sessionmaker(bind=engine)()\n\nmanagement_dic = {\n    '__tablename__': 'management',\n    '__table_args__': {'autoload': True}}\nmanagement_object = type('management_object', (base,), management_dic)\nfetch_management = session.query(management_object).all()\n\nfor management_row_object in fetch_management:\n    folder_table_dic = {\n        '__tablename__': management_row_object.folder_table_name,\n        '__table_args__': {'autoload': True}}\n    folder_object_name = management_row_object.folder_table_name.encode('utf-8')\n    folder_object = type(folder_object_name, (base,), folder_table_dic)\n    fetch_folder = session.query(folder_object).all()\n\n    print \"-\" * 32\n    print \"table_name: %s\" % folder_object_name\n    print \"-\" * 32\n    for row in fetch_folder:\n        print \"  fid: %s,  file_name: %s\" % (row.fid, row.file_name)\n    print\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\n\n\u52d5\u7684\u306b\u4f5c\u6210\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u7ba1\u7406\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08management\uff09\n\n\n\ntid\nfolder_table_id\n\n\n\n\n0\nfolder_0000\n\n\n1\nfolder_0001\n\n\n\n\nmanagement.sql\nCREATE TABLE management(\n    tid INTEGER NOT NULL PRIMARY KEY,\n    folder_table_name TEXT NOT NULL);\nINSERT INTO management(tid, folder_table_name) VALUES (0,'folder_0000');\nINSERT INTO management(tid, folder_table_name) VALUES (1,'folder_0001');\n\n\n\n\n\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb(folder_0000)\n\n\n\nfid\nfile_name\n\n\n\n\n0\nham.txt\n\n\n1\nspam.txt\n\n\n2\negg.txt\n\n\n\n\nfolder_0000.sql\nCREATE TABLE folder_0000(\n    fid INTEGER NOT NULL PRIMARY KEY,\n    file_name TEXT NOT NULL\n);\nINSERT INTO folder_0000(fid, file_name) VALUES (0,'ham.txt');\nINSERT INTO folder_0000(fid, file_name) VALUES (1,'spam.txt');\nINSERT INTO folder_0000(fid, file_name) VALUES (2,'egg.txt');\n\n\n\n\n\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb(folder_0001)\n\n\n\nfid\nfile_name\n\n\n\n\n0\nfoo.txt\n\n\n1\nbar.txt\n\n\n\n\nfolder_0001.sql\nCREATE TABLE folder_0001(\n    fid INTEGER NOT NULL PRIMARY KEY,\n    file_name TEXT NOT NULL\n);\nINSERT INTO folder_0001(fid, file_name) VALUES (0,'foo.txt');\nINSERT INTO folder_0001(fid, file_name) VALUES (1,'bar.txt');\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\nsqlite3 test.db < management.sql\nsqlite3 test.db < folder_0000.sql\nsqlite3 test.db < folder_0001.sql\npython sql_sample.py\n\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\u7d50\u679c\n--------------------------------\ntable_name: folder_0000\n--------------------------------\n  fid: 0,  file_name: ham.txt\n  fid: 1,  file_name: spam.txt\n  fid: 2,  file_name: egg.txt\n\n--------------------------------\ntable_name: folder_0001\n--------------------------------\n  fid: 0,  file_name: foo.txt\n  fid: 1,  file_name: bar.txt\n\n\n\n\u53c2\u8003\nPython > Documentation > Python\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea > 2.\u7d44\u307f\u8fbc\u307f\u95a2\u6570\nDynamically setting _tablename_ for sharding in SQLAlchemy?\n\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3092SQLAlchemy\u3092\u4f7f\u3063\u3066\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\n\n\u30bf\u30a4\u30c8\u30eb\u306e\u3053\u3068\u3092\u3084\u308a\u305f\u3044\uff01\u3068\u601d\u3063\u3066\u8abf\u3079\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306etype\u3092\u4f7f\u3063\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3084\u308c\u3070OK\u3002\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u66f8\u304f\u3002\n\n```python\nengine = create_engine(\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9URL, echo=True, encoding='utf-8')\nbase = declarative_base(engine)\n\ndic = {\n    '__tablename__': \u30c6\u30fc\u30d6\u30eb\u540d,\n    '__table_args__': {'autoload': True}}}\nobj = type('MyObject', (base,), dic)\n```\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\u65e2\u5b58\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f5c\u308b```autoload = True```\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3002\n\n\n\n# \u30b5\u30f3\u30d7\u30eb\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```python:sql_sample.py\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\n\nschema = 'sqlite:///test.db'\n\nengine = create_engine(schema, echo=False, encoding='utf-8')\nbase = declarative_base(engine)\nsession = sessionmaker(bind=engine)()\n\nmanagement_dic = {\n    '__tablename__': 'management',\n    '__table_args__': {'autoload': True}}\nmanagement_object = type('management_object', (base,), management_dic)\nfetch_management = session.query(management_object).all()\n\nfor management_row_object in fetch_management:\n    folder_table_dic = {\n        '__tablename__': management_row_object.folder_table_name,\n        '__table_args__': {'autoload': True}}\n    folder_object_name = management_row_object.folder_table_name.encode('utf-8')\n    folder_object = type(folder_object_name, (base,), folder_table_dic)\n    fetch_folder = session.query(folder_object).all()\n\n    print \"-\" * 32\n    print \"table_name: %s\" % folder_object_name\n    print \"-\" * 32\n    for row in fetch_folder:\n        print \"  fid: %s,  file_name: %s\" % (row.fid, row.file_name)\n    print\n```\n\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\n### \u52d5\u7684\u306b\u4f5c\u6210\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u3092\u7ba1\u7406\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08management\uff09\ntid|folder_table_id\n---- | ----\n0 | folder_0000\n1 | folder_0001\n\n```sql:management.sql\nCREATE TABLE management(\n    tid INTEGER NOT NULL PRIMARY KEY,\n    folder_table_name TEXT NOT NULL);\nINSERT INTO management(tid, folder_table_name) VALUES (0,'folder_0000');\nINSERT INTO management(tid, folder_table_name) VALUES (1,'folder_0001');\n\n```\n\n### \u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb(folder_0000)\nfid | file_name\n---- | ---- \n0 | ham.txt\n1 | spam.txt\n2 | egg.txt\n\n```sql:folder_0000.sql\nCREATE TABLE folder_0000(\n    fid INTEGER NOT NULL PRIMARY KEY,\n    file_name TEXT NOT NULL\n);\nINSERT INTO folder_0000(fid, file_name) VALUES (0,'ham.txt');\nINSERT INTO folder_0000(fid, file_name) VALUES (1,'spam.txt');\nINSERT INTO folder_0000(fid, file_name) VALUES (2,'egg.txt');\n\n```\n\n### \u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb(folder_0001)\nfid | file_name \n---- | ---- \n0 | foo.txt\n1 | bar.txt\n\n```sql:folder_0001.sql\nCREATE TABLE folder_0001(\n    fid INTEGER NOT NULL PRIMARY KEY,\n    file_name TEXT NOT NULL\n);\nINSERT INTO folder_0001(fid, file_name) VALUES (0,'foo.txt');\nINSERT INTO folder_0001(fid, file_name) VALUES (1,'bar.txt');\n```\n\n## \u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\n```bash\nsqlite3 test.db < management.sql\nsqlite3 test.db < folder_0000.sql\nsqlite3 test.db < folder_0001.sql\npython sql_sample.py\n```\n\n## \u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\u7d50\u679c\n```\n--------------------------------\ntable_name: folder_0000\n--------------------------------\n  fid: 0,  file_name: ham.txt\n  fid: 1,  file_name: spam.txt\n  fid: 2,  file_name: egg.txt\n\n--------------------------------\ntable_name: folder_0001\n--------------------------------\n  fid: 0,  file_name: foo.txt\n  fid: 1,  file_name: bar.txt\n\n```\n\n# \n# \u53c2\u8003\n[Python > Documentation > Python\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea > 2.\u7d44\u307f\u8fbc\u307f\u95a2\u6570](http://docs.python.jp/2/library/functions.html#type)\n[Dynamically setting \\__tablename__ for sharding in SQLAlchemy?](http://stackoverflow.com/questions/19163911/dynamically-setting-tablename-for-sharding-in-sqlalchemy)\n", "tags": ["Python", "sqlalchemy"]}