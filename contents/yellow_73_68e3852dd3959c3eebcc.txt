{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nhttp://qiita.com/yellow_73/items/abfca17297124785fe28 \u3092\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u8da3\u5473\u306a\u304b\u3093\u3058\u306b\u6539\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u95a2\u6570\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\u5f15\u6570\u306f\u3001\u8907\u5408\u578bVoronoiArgument\u306e\u914d\u5217\u3001\u8fd4\u308a\u5024\u306f\u3001\u8907\u5408\u578bVoronoiResult\u306e\u914d\u5217\u3068\u3057\u307e\u3057\u305f\u3002\n\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u3001\u534a\u76f4\u7dda\u306b\u306a\u308b\u30dc\u30ed\u30ce\u30a4\u8fba\u3092\u3001\u30dc\u30ed\u30ce\u30a4\u70b9\u304b\u3089\u5171\u6709\u3055\u308c\u3066\u3044\u306a\u3044\u30c9\u30ed\u30cd\u30fc\u8fba\u307e\u3067\u306e\u8ddd\u96e2\u306e2\u500d\u307e\u3067\u5f15\u304f\u3088\u3046\u306b\u3057\u3001\u9589\u3058\u3066\u3044\u306a\u3044\u30dc\u30ed\u30ce\u30a4\u30dd\u30ea\u30b4\u30f3\u306e\u305f\u3081\u306b\u5168\u4f53\u306e\u51f8\u5305\u3092\u4f5c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u306f\u77e9\u5f62\u3067\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\u77e9\u5f62\u306f\u3001\u6bcd\u70b9\u3068\u30dc\u30ed\u30ce\u30a4\u70b9\u306e\u30a8\u30f3\u30d9\u30ed\u30fc\u30d7\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5f15\u6570minbox\u3092\u6307\u5b9a\u3059\u308b\u3068\u6700\u5c0f\u306e\u77e9\u5f62\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\n\u6bcd\u70b9\u306eGID\u3092\u30dc\u30ed\u30ce\u30a4\u30dd\u30ea\u30b4\u30f3\u3068\u5bfe\u5fdc\u3065\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u6bcd\u70b9\u304c\u91cd\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u305f\u3081\u306b\u3001\u914d\u5217\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nSQL\n\u8907\u5408\u578b\u30922\u3064(VoronoiArgument, VoronoiResult)\u3068\u3001\u95a2\u6570MakeVoronoi\u30921\u3064\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\nCREATE TYPE VoronoiArgument AS (\n  gid INT,\n  geom GEOMETRY\n);\n\nCREATE TYPE VoronoiResult AS (\n  gids INT[],\n  geom GEOMETRY\n);\n\n-- Create Voronoi from VoronoiArgument[]\n-- Returns VoronoiResult[], NOT SETOF VoronoiResult\nCREATE OR REPLACE FUNCTION MakeVoronoi(\n  args VoronoiArgument[],\n  minbox GEOMETRY\n)\nRETURNS VoronoiResult[]\nAS $$\n  WITH\n  QPOINTS AS (\n    SELECT (arg).gid AS gid, (arg).geom AS geom FROM (\n      SELECT UNNEST(args) AS arg\n    ) AS QPOINTS1\n  ),\n  QALL AS (\n    SELECT\n      UNNEST(ARRAY[gid_triangle*3,gid_triangle*3+1,gid_triangle*3+2]) AS gid,\n      ST_Centroid(ST_ConvexHull(ST_Union(\n        ST_CurveToLine(REPLACE(ST_AsText(ST_LineMerge(ST_Union(ST_MakeLine(p1,p2),ST_MakeLine(p2,p3)))),'LINE','CIRCULAR'),15),\n        ST_CurveToLine(REPLACE(ST_AsText(ST_LineMerge(ST_Union(ST_MakeLine(p2,p3),ST_MakeLine(p3,p1)))),'LINE','CIRCULAR'),15)\n      ))) AS centroid,\n      UNNEST(ARRAY[ST_MakeLine(p1,p2),ST_MakeLine(p2,p3),ST_MakeLine(p3,p1)]) AS edge\n    FROM (\n      SELECT\n        gid_triangle,\n        ST_PointN(geom,1) AS p1,\n        ST_PointN(geom, 2) AS p2,\n        ST_PointN(geom,3) AS p3\n      FROM (\n        SELECT\n          (dumped).path[1] AS gid_triangle,\n          ST_ExteriorRing((dumped).geom) AS geom\n        FROM (\n          SELECT\n            ST_Dump(ST_DelaunayTriangles(multi)) AS dumped\n          FROM (\n            SELECT ST_Collect(geom) AS multi FROM QPOINTS\n          ) AS Q1\n        ) AS Q2\n      ) AS Q3\n    ) AS Q4\n  ),\n  QBOX AS (\n    SELECT\n      box,\n      SQRT(POW(ST_XMax(box)-ST_XMin(box),2)+POW(ST_YMax(box)-ST_YMin(box),2)) AS dia\n    FROM (\n      SELECT ST_Envelope(ST_Collect(geom)) AS box\n      FROM (\n        SELECT centroid AS geom FROM QALL\n        UNION\n        SELECT geom AS geom FROM QPOINTS\n        UNION\n        SELECT minbox\n      ) AS Q1\n    ) AS Q2\n  ),\n  QRESULTS AS (\n    SELECT (\n      ARRAY(SELECT QPOINTS.gid FROM QPOINTS WHERE ST_Intersects(QPOINTS.geom, Q2.geom)),\n      Q2.geom\n    )::VoronoiResult AS result\n    FROM (\n      SELECT\n        (ST_Dump(\n          ST_Polygonize(\n            ST_Node(\n              ST_LineMerge(\n                ST_Union(\n                  vedge,\n                  ST_ExteriorRing(\n                    (SELECT box FROM QBOX)\n                  )\n                )\n              )\n            )\n          )\n        )).geom AS geom\n      FROM (\n        SELECT\n          ST_Intersection(\n            (SELECT box FROm QBOX),\n            ST_LineMerge(\n              ST_Union(\n                ST_MakeLine(\n                  QALL1.centroid,\n                  (\n                    CASE WHEN QALL2.gid IS NULL THEN\n                      CASE WHEN\n                        ST_WithIn(\n                          QALL1.centroid,\n                          (SELECT box FROM QBOX)\n                        )\n                      THEN\n                        ST_MakePoint(\n                          ST_X(QALL1.centroid)+(ST_X(ST_Centroid(QALL1.edge))-ST_X(QALL1.centroid))*(SELECT dia FROM QBOX)/ST_Distance(ST_Centroid(QALL1.edge),QALL1.centroid),\n                          ST_Y(QALL1.centroid)+(ST_Y(ST_Centroid(QALL1.edge))-ST_Y(QALL1.centroid))*(SELECT dia FROM QBOX)/ST_Distance(ST_Centroid(QALL1.edge),QALL1.centroid)\n                        )\n                      END\n                    ELSE\n                      QALL2.centroid\n                    END\n                  )\n                )\n              )\n            )\n          )AS vedge\n        FROM QALL AS QALL1\n        LEFT JOIN QALL AS QALL2 ON QALL1.gid <> QALL2.gid AND ST_Equals(QALL1.edge, QALL2.edge)\n      ) AS Q1\n    ) AS Q2\n  )\n  SELECT ARRAY(SELECT result FROM QRESULTS)\n$$ LANGUAGE SQL;\n\nQGIS\u3067\u898b\u308b\u306b\u306f\u3001\u305f\u3076\u3093gid\u304c\u5fc5\u8981\u3068\u306a\u308b\u306e\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u633f\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ndb=# CREATE TABLE t_voronoiresult (\n  gid SERIAL PRIMARY KEY,\n  gids INT[],\n  geom GEOMETRY(POLYGON,0)\n);\n\ndb=# INSERT INTO t_voronoiresult (gids, geom)\nSELECT (result).gids, (result).geom FROM (\n  SELECT UNNEST(\n    MakeVoronoi(\n      ARRAY[\n        (1, 'POINT(0 0)'::GEOMETRY)::VoronoiArgument,\n        (2, 'POINT(10 0)'::GEOMETRY)::VoronoiArgument,\n        (3, 'POINT(10 10)'::GEOMETRY)::VoronoiArgument,\n        (4, 'POINT(0 10)'::GEOMETRY)::VoronoiArgument\n      ],\n      'POLYGON((-10 -10, 20 -10, 20 20, -10 20, -10 -10))'::geometry\n    )\n  ) AS result\n) AS Q1;\n\n\u53e9\u304d\u8fbc\u3093\u3060\u5148\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u3066\u307f\u307e\u3059\u3002\ndb=# SELECT gid, gids, ST_AsText(geom) FROM t_voronoiresult;\n gid | gids |                                    st_astext\n-----+------+----------------------------------------------------------------------------------\n   1 | {4}  | POLYGON((5 5,-10 5,-10 20,4.99999999999999 20,5 5,5 5))\n   2 | {1}  | POLYGON((-10 5,5 5,5 -10,-10 -10,-10 5))\n   3 | {3}  | POLYGON((4.99999999999999 20,20 20,20 4.99999999999999,5 5,4.99999999999999 20))\n   4 | {2}  | POLYGON((20 4.99999999999999,20 -10,5 -10,5 5,5 5,20 4.99999999999999))\n(4 \u884c)\n\nQGIS\u3067\u898b\u3066\u307f\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\u304a\u308f\u308a\u306b\n\u30dc\u30ed\u30ce\u30a4\u56f3\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u30ef\u30fc\u30eb\u30c9\u3092\u77e9\u5f62\u306b\u3057\u3066\u3044\u308b\u306e\u3068\u3001\u5f15\u6570minbox\u3092\u5c0e\u5165\u3057\u305f\u3053\u3068\u304c\u7279\u8272\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u5e02\u533a\u753a\u6751\u3054\u3068\u306b\u30dc\u30ed\u30ce\u30a4\u56f3\u3092\u4f5c\u308b\u969b\u306bminnbox\u306bST_Envelope(<\u5e02\u533a\u753a\u6751\u30dd\u30ea\u30b4\u30f3>)\u3092\u4e0e\u3048\u3066\u3001\u7d50\u679c\u306b\u5bfe\u3057\u3066``ST_Intersection(<\u7d50\u679c\u30dd\u30ea\u30b4\u30f3>,<\u5e02\u533a\u753a\u6751\u30dd\u30ea\u30b4\u30f3>)''\u3068\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\u672c\u5f53\u306b\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u306e\u691c\u8a3c\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u7279\u306b\u901f\u5ea6\u9762\u3067\u5b9f\u7528\u7684\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n#\u306f\u3058\u3081\u306b\n\nhttp://qiita.com/yellow_73/items/abfca17297124785fe28 \u3092\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u8da3\u5473\u306a\u304b\u3093\u3058\u306b\u6539\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n* \u95a2\u6570\u306b\u3057\u307e\u3057\u305f\u3002\n  * \u5f15\u6570\u306f\u3001\u8907\u5408\u578b``VoronoiArgument``\u306e\u914d\u5217\u3001\u8fd4\u308a\u5024\u306f\u3001\u8907\u5408\u578b``VoronoiResult``\u306e\u914d\u5217\u3068\u3057\u307e\u3057\u305f\u3002\n* \u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u3001\u534a\u76f4\u7dda\u306b\u306a\u308b\u30dc\u30ed\u30ce\u30a4\u8fba\u3092\u3001\u30dc\u30ed\u30ce\u30a4\u70b9\u304b\u3089\u5171\u6709\u3055\u308c\u3066\u3044\u306a\u3044\u30c9\u30ed\u30cd\u30fc\u8fba\u307e\u3067\u306e\u8ddd\u96e2\u306e2\u500d\u307e\u3067\u5f15\u304f\u3088\u3046\u306b\u3057\u3001\u9589\u3058\u3066\u3044\u306a\u3044\u30dc\u30ed\u30ce\u30a4\u30dd\u30ea\u30b4\u30f3\u306e\u305f\u3081\u306b\u5168\u4f53\u306e\u51f8\u5305\u3092\u4f5c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u306f\u77e9\u5f62\u3067\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n    * \u77e9\u5f62\u306f\u3001\u6bcd\u70b9\u3068\u30dc\u30ed\u30ce\u30a4\u70b9\u306e\u30a8\u30f3\u30d9\u30ed\u30fc\u30d7\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5f15\u6570``minbox``\u3092\u6307\u5b9a\u3059\u308b\u3068\u6700\u5c0f\u306e\u77e9\u5f62\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n* \u6bcd\u70b9\u306eGID\u3092\u30dc\u30ed\u30ce\u30a4\u30dd\u30ea\u30b4\u30f3\u3068\u5bfe\u5fdc\u3065\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u6bcd\u70b9\u304c\u91cd\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u305f\u3081\u306b\u3001\u914d\u5217\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n# SQL\n\n\u8907\u5408\u578b\u30922\u3064(``VoronoiArgument``, ``VoronoiResult``)\u3068\u3001\u95a2\u6570``MakeVoronoi``\u30921\u3064\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```postgres\nCREATE TYPE VoronoiArgument AS (\n  gid INT,\n  geom GEOMETRY\n);\n\nCREATE TYPE VoronoiResult AS (\n  gids INT[],\n  geom GEOMETRY\n);\n\n-- Create Voronoi from VoronoiArgument[]\n-- Returns VoronoiResult[], NOT SETOF VoronoiResult\nCREATE OR REPLACE FUNCTION MakeVoronoi(\n  args VoronoiArgument[],\n  minbox GEOMETRY\n)\nRETURNS VoronoiResult[]\nAS $$\n  WITH\n  QPOINTS AS (\n    SELECT (arg).gid AS gid, (arg).geom AS geom FROM (\n      SELECT UNNEST(args) AS arg\n    ) AS QPOINTS1\n  ),\n  QALL AS (\n    SELECT\n      UNNEST(ARRAY[gid_triangle*3,gid_triangle*3+1,gid_triangle*3+2]) AS gid,\n      ST_Centroid(ST_ConvexHull(ST_Union(\n        ST_CurveToLine(REPLACE(ST_AsText(ST_LineMerge(ST_Union(ST_MakeLine(p1,p2),ST_MakeLine(p2,p3)))),'LINE','CIRCULAR'),15),\n        ST_CurveToLine(REPLACE(ST_AsText(ST_LineMerge(ST_Union(ST_MakeLine(p2,p3),ST_MakeLine(p3,p1)))),'LINE','CIRCULAR'),15)\n      ))) AS centroid,\n      UNNEST(ARRAY[ST_MakeLine(p1,p2),ST_MakeLine(p2,p3),ST_MakeLine(p3,p1)]) AS edge\n    FROM (\n      SELECT\n        gid_triangle,\n        ST_PointN(geom,1) AS p1,\n        ST_PointN(geom, 2) AS p2,\n        ST_PointN(geom,3) AS p3\n      FROM (\n        SELECT\n          (dumped).path[1] AS gid_triangle,\n          ST_ExteriorRing((dumped).geom) AS geom\n        FROM (\n          SELECT\n            ST_Dump(ST_DelaunayTriangles(multi)) AS dumped\n          FROM (\n            SELECT ST_Collect(geom) AS multi FROM QPOINTS\n          ) AS Q1\n        ) AS Q2\n      ) AS Q3\n    ) AS Q4\n  ),\n  QBOX AS (\n    SELECT\n      box,\n      SQRT(POW(ST_XMax(box)-ST_XMin(box),2)+POW(ST_YMax(box)-ST_YMin(box),2)) AS dia\n    FROM (\n      SELECT ST_Envelope(ST_Collect(geom)) AS box\n      FROM (\n        SELECT centroid AS geom FROM QALL\n        UNION\n        SELECT geom AS geom FROM QPOINTS\n        UNION\n        SELECT minbox\n      ) AS Q1\n    ) AS Q2\n  ),\n  QRESULTS AS (\n    SELECT (\n      ARRAY(SELECT QPOINTS.gid FROM QPOINTS WHERE ST_Intersects(QPOINTS.geom, Q2.geom)),\n      Q2.geom\n    )::VoronoiResult AS result\n    FROM (\n      SELECT\n        (ST_Dump(\n          ST_Polygonize(\n            ST_Node(\n              ST_LineMerge(\n                ST_Union(\n                  vedge,\n                  ST_ExteriorRing(\n                    (SELECT box FROM QBOX)\n                  )\n                )\n              )\n            )\n          )\n        )).geom AS geom\n      FROM (\n        SELECT\n          ST_Intersection(\n            (SELECT box FROm QBOX),\n            ST_LineMerge(\n              ST_Union(\n                ST_MakeLine(\n                  QALL1.centroid,\n                  (\n                    CASE WHEN QALL2.gid IS NULL THEN\n                      CASE WHEN\n                        ST_WithIn(\n                          QALL1.centroid,\n                          (SELECT box FROM QBOX)\n                        )\n                      THEN\n                        ST_MakePoint(\n                          ST_X(QALL1.centroid)+(ST_X(ST_Centroid(QALL1.edge))-ST_X(QALL1.centroid))*(SELECT dia FROM QBOX)/ST_Distance(ST_Centroid(QALL1.edge),QALL1.centroid),\n                          ST_Y(QALL1.centroid)+(ST_Y(ST_Centroid(QALL1.edge))-ST_Y(QALL1.centroid))*(SELECT dia FROM QBOX)/ST_Distance(ST_Centroid(QALL1.edge),QALL1.centroid)\n                        )\n                      END\n                    ELSE\n                      QALL2.centroid\n                    END\n                  )\n                )\n              )\n            )\n          )AS vedge\n        FROM QALL AS QALL1\n        LEFT JOIN QALL AS QALL2 ON QALL1.gid <> QALL2.gid AND ST_Equals(QALL1.edge, QALL2.edge)\n      ) AS Q1\n    ) AS Q2\n  )\n  SELECT ARRAY(SELECT result FROM QRESULTS)\n$$ LANGUAGE SQL;\n```\n\nQGIS\u3067\u898b\u308b\u306b\u306f\u3001\u305f\u3076\u3093gid\u304c\u5fc5\u8981\u3068\u306a\u308b\u306e\u3067\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u633f\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```psql\ndb=# CREATE TABLE t_voronoiresult (\n  gid SERIAL PRIMARY KEY,\n  gids INT[],\n  geom GEOMETRY(POLYGON,0)\n);\n\ndb=# INSERT INTO t_voronoiresult (gids, geom)\nSELECT (result).gids, (result).geom FROM (\n  SELECT UNNEST(\n    MakeVoronoi(\n      ARRAY[\n        (1, 'POINT(0 0)'::GEOMETRY)::VoronoiArgument,\n        (2, 'POINT(10 0)'::GEOMETRY)::VoronoiArgument,\n        (3, 'POINT(10 10)'::GEOMETRY)::VoronoiArgument,\n        (4, 'POINT(0 10)'::GEOMETRY)::VoronoiArgument\n      ],\n      'POLYGON((-10 -10, 20 -10, 20 20, -10 20, -10 -10))'::geometry\n    )\n  ) AS result\n) AS Q1;\n```\n\n\u53e9\u304d\u8fbc\u3093\u3060\u5148\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```psql\ndb=# SELECT gid, gids, ST_AsText(geom) FROM t_voronoiresult;\n gid | gids |                                    st_astext\n-----+------+----------------------------------------------------------------------------------\n   1 | {4}  | POLYGON((5 5,-10 5,-10 20,4.99999999999999 20,5 5,5 5))\n   2 | {1}  | POLYGON((-10 5,5 5,5 -10,-10 -10,-10 5))\n   3 | {3}  | POLYGON((4.99999999999999 20,20 20,20 4.99999999999999,5 5,4.99999999999999 20))\n   4 | {2}  | POLYGON((20 4.99999999999999,20 -10,5 -10,5 5,5 5,20 4.99999999999999))\n(4 \u884c)\n```\n\nQGIS\u3067\u898b\u3066\u307f\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![test1.png](https://qiita-image-store.s3.amazonaws.com/0/51701/644c1cc0-ee41-f5ef-a6b9-46518a6c46fa.png)\n\n# \u304a\u308f\u308a\u306b\n\n\u30dc\u30ed\u30ce\u30a4\u56f3\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30ef\u30fc\u30eb\u30c9\u3092\u77e9\u5f62\u306b\u3057\u3066\u3044\u308b\u306e\u3068\u3001\u5f15\u6570``minbox``\u3092\u5c0e\u5165\u3057\u305f\u3053\u3068\u304c\u7279\u8272\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u5e02\u533a\u753a\u6751\u3054\u3068\u306b\u30dc\u30ed\u30ce\u30a4\u56f3\u3092\u4f5c\u308b\u969b\u306b``minnbox``\u306b``ST_Envelope(<\u5e02\u533a\u753a\u6751\u30dd\u30ea\u30b4\u30f3>)``\u3092\u4e0e\u3048\u3066\u3001\u7d50\u679c\u306b\u5bfe\u3057\u3066``ST_Intersection(<\u7d50\u679c\u30dd\u30ea\u30b4\u30f3>,<\u5e02\u533a\u753a\u6751\u30dd\u30ea\u30b4\u30f3>)''\u3068\u3059\u308b\u3053\u3068\u3067\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u672c\u5f53\u306b\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u306e\u691c\u8a3c\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u7279\u306b\u901f\u5ea6\u9762\u3067\u5b9f\u7528\u7684\u304b\u3069\u3046\u304b\u306f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n", "tags": ["PostGIS"]}