{"context": " More than 1 year has passed since last update.XCode7\u3067Swift\u3067\u3082OpenGLES\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u56db\u89d2\u5f62\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\n\n1.XCode\u3067iOS->Application->Game\u3067Swift\u3068OpenGLES\u3092\u9078\u3093\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002\n2.GameViewController.swift\u306b\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4e0a\u66f8\u304d\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u306e\u4e2d\u8eab\u306f http://enamelsystems.com/0017/ \u3068\u304b\u306bObjective-C\u306e\u5834\u5408\u306e\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\n\nGameViewController.swift\n\nimport GLKit\nimport OpenGLES\n\nlet gVertices: [GLfloat] = [\n  -0.5, -0.5, 0.0,\n  -0.5, 0.5, 0.0,\n  0.5, -0.5, 0.0,\n  0.5, 0.5, 0.0,\n]\n\nlet gIndices: [GLubyte] = [\n  0,1,2,3\n]\n\nlet gColors: [GLfloat] = [\n  1.0, 0.0, 0.0, 1.0,\n  0.0, 1.0, 0.0, 1.0,\n  0.0, 0.0, 1.0, 1.0,\n  1.0, 1.0, 1.0, 1.0\n]\n\nfunc BUFFER_OFFSET(i: Int) -> UnsafePointer<Void> {\n    let p: UnsafePointer<Void> = nil\n    return p.advancedBy(i)\n}\n\n\nclass GameViewController: GLKViewController {\n\n    var vertexBuffer: GLuint = 0\n    var indexBuffer: GLuint = 0;\n    var colorBuffer: GLuint = 0;\n\n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n\n    deinit {\n        self.tearDownGL()\n\n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.context = EAGLContext(API: .OpenGLES2)\n\n        if !(self.context != nil) {\n            print(\"Failed to create ES context\")\n        }\n\n        let view = self.view as! GLKView\n        view.context = self.context!\n        view.drawableDepthFormat = .Format24\n\n        self.setupGL()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n\n        if self.isViewLoaded() && (self.view.window != nil) {\n            self.view = nil\n\n            self.tearDownGL()\n\n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        self.effect = GLKBaseEffect()\n        self.effect?.colorMaterialEnabled = GLboolean(GL_TRUE)\n\n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(GLenum(GL_ARRAY_BUFFER), vertexBuffer)\n        glBufferData(GLenum(GL_ARRAY_BUFFER), GLsizeiptr(sizeof(GLfloat) * gVertices.count), gVertices, GLenum(GL_STATIC_DRAW))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Position.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), 3, GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(sizeof(GLfloat) * 3), BUFFER_OFFSET(0))\n\n        glGenBuffers(1, &colorBuffer)\n        glBindBuffer(GLenum(GL_ARRAY_BUFFER), colorBuffer)\n        glBufferData(GLenum(GL_ARRAY_BUFFER), GLsizeiptr(sizeof(GLfloat) * gColors.count), gColors, GLenum(GL_STATIC_DRAW))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Color.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Color.rawValue), 4, GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(sizeof(GLfloat) * 4), BUFFER_OFFSET(0))\n\n        glGenBuffers(1, &indexBuffer)\n        glBindBuffer(GLenum(GL_ELEMENT_ARRAY_BUFFER),indexBuffer)\n        glBufferData(GLenum(GL_ELEMENT_ARRAY_BUFFER),GLsizeiptr(sizeof(GLuint) * gIndices.count),gIndices,GLenum(GL_STATIC_DRAW))\n\n    }\n\n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteBuffers(1, &indexBuffer)\n        glDeleteBuffers(1, &colorBuffer)\n\n    }\n\n    // MARK: - GLKView and GLKViewController delegate methods\n\n    func update() {\n    }\n\n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(GLbitfield(GL_COLOR_BUFFER_BIT))\n\n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n\n        glDrawElements(GLenum(GL_TRIANGLE_STRIP),GLsizei(gIndices.count),GLenum(GL_UNSIGNED_BYTE),BUFFER_OFFSET(0))\n    }\n\n}\n\n\n\nXCode7\u3067Swift\u3067\u3082OpenGLES\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u56db\u89d2\u5f62\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\n![Screen Shot 2015-10-05 at 3.06.31 AM.png](https://qiita-image-store.s3.amazonaws.com/0/19541/d45ed32f-f57c-eea4-2983-ce551d3fafe3.png)\n\n1.XCode\u3067iOS->Application->Game\u3067Swift\u3068OpenGLES\u3092\u9078\u3093\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002\n2.GameViewController.swift\u306b\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4e0a\u66f8\u304d\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u306e\u4e2d\u8eab\u306f <http://enamelsystems.com/0017/> \u3068\u304b\u306bObjective-C\u306e\u5834\u5408\u306e\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002\n\n```swift:GameViewController.swift\n\nimport GLKit\nimport OpenGLES\n\nlet gVertices: [GLfloat] = [\n  -0.5, -0.5, 0.0,\n  -0.5, 0.5, 0.0,\n  0.5, -0.5, 0.0,\n  0.5, 0.5, 0.0,\n]\n\nlet gIndices: [GLubyte] = [\n  0,1,2,3\n]\n\nlet gColors: [GLfloat] = [\n  1.0, 0.0, 0.0, 1.0,\n  0.0, 1.0, 0.0, 1.0,\n  0.0, 0.0, 1.0, 1.0,\n  1.0, 1.0, 1.0, 1.0\n]\n\nfunc BUFFER_OFFSET(i: Int) -> UnsafePointer<Void> {\n    let p: UnsafePointer<Void> = nil\n    return p.advancedBy(i)\n}\n\n\nclass GameViewController: GLKViewController {\n    \n    var vertexBuffer: GLuint = 0\n    var indexBuffer: GLuint = 0;\n    var colorBuffer: GLuint = 0;\n  \n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n    \n    deinit {\n        self.tearDownGL()\n        \n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.context = EAGLContext(API: .OpenGLES2)\n        \n        if !(self.context != nil) {\n            print(\"Failed to create ES context\")\n        }\n        \n        let view = self.view as! GLKView\n        view.context = self.context!\n        view.drawableDepthFormat = .Format24\n      \n        self.setupGL()\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        \n        if self.isViewLoaded() && (self.view.window != nil) {\n            self.view = nil\n            \n            self.tearDownGL()\n            \n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n        \n        self.effect = GLKBaseEffect()\n        self.effect?.colorMaterialEnabled = GLboolean(GL_TRUE)\n      \n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(GLenum(GL_ARRAY_BUFFER), vertexBuffer)\n        glBufferData(GLenum(GL_ARRAY_BUFFER), GLsizeiptr(sizeof(GLfloat) * gVertices.count), gVertices, GLenum(GL_STATIC_DRAW))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Position.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), 3, GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(sizeof(GLfloat) * 3), BUFFER_OFFSET(0))\n      \n        glGenBuffers(1, &colorBuffer)\n        glBindBuffer(GLenum(GL_ARRAY_BUFFER), colorBuffer)\n        glBufferData(GLenum(GL_ARRAY_BUFFER), GLsizeiptr(sizeof(GLfloat) * gColors.count), gColors, GLenum(GL_STATIC_DRAW))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Color.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Color.rawValue), 4, GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(sizeof(GLfloat) * 4), BUFFER_OFFSET(0))\n      \n        glGenBuffers(1, &indexBuffer)\n        glBindBuffer(GLenum(GL_ELEMENT_ARRAY_BUFFER),indexBuffer)\n        glBufferData(GLenum(GL_ELEMENT_ARRAY_BUFFER),GLsizeiptr(sizeof(GLuint) * gIndices.count),gIndices,GLenum(GL_STATIC_DRAW))\n      \n    }\n    \n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n        \n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteBuffers(1, &indexBuffer)\n        glDeleteBuffers(1, &colorBuffer)\n      \n    }\n    \n    // MARK: - GLKView and GLKViewController delegate methods\n    \n    func update() {\n    }\n    \n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(GLbitfield(GL_COLOR_BUFFER_BIT))\n        \n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n        \n        glDrawElements(GLenum(GL_TRIANGLE_STRIP),GLsizei(gIndices.count),GLenum(GL_UNSIGNED_BYTE),BUFFER_OFFSET(0))\n    }\n\n}\n\n```\n", "tags": ["Swift", "Swift2", "OpenGLES", "XCode7", "\u56db\u306e\u4e94\u306e\u8a00\u308f\u305a\u306b\u59cb\u3081\u308b"]}