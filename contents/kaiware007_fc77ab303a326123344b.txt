{"context": "\u3053\u306e\u8a18\u4e8b\u306f\u3001Unity 2 Advent Calendar 2016 \u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n9\u65e5\u76ee\u306e\u8a18\u4e8b\u306f@Marimoiro\u3055\u3093\u306e Unity\u3067\u30c6\u30b9\u30c8\u7528\u306b\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u4e0a\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u30dc\u30bf\u30f3\u3092\u4f5c\u308d\u3046 \u3067\u3057\u305f\u3002\n\u2193\u52d5\u753b\uff08\u30af\u30ea\u30c3\u30af\u3067Youtube\u3078\uff09\n\n\u4eca\u56de\u306f\u3001AppendStructuredBuffer/ConsumeStructuredBuffer\u3092\u4f7f\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nComputeBuffer.CopyCount\u306f\u3001Unity5.3\u4ee5\u524d\u3067\u306f\u30d0\u30b0\u3063\u3066\u3044\u3066\u6b63\u5e38\u306b\u30ab\u30a6\u30f3\u30c8\u304c\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u70ba\u3001AppendStructuredBuffer/ConsumeStructuredBuffer\u3092\u4f7f\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u4f5c\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n5.4\u306b\u306a\u3063\u3066\u304b\u3089\u3088\u3046\u3084\u304f\u30d0\u30b0\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002\n\u958b\u767a\u74b0\u5883\u306f\u3001Unity5.5\u3001Windows10\u3067\u3059\u3002\n\u4eca\u306e\u3068\u3053\u308dUnity\u306eComputeShader\u306fMac\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n\u4eca\u56de\u4f5c\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3053\u3061\u3089\u306b\u30a2\u30c3\u30d7\u3057\u3066\u304a\u308a\u307e\u3059\u3002\nhttps://github.com/kaiware007/UnityGPUParticleSample\n\nComputeShader\u3068\u306f\nGPU\u3092\u4f7f\u3063\u3066\u63cf\u753b\u4ee5\u5916\u306b\u6c4e\u7528\u7684\u306a\u51e6\u7406\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\nGPU\u3092\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u306f\u3001\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4e26\u5217\u3067\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u308b\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\nComputeShader\u306e\u8a73\u7d30\u306f\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\nUnity : ComputeShader \u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30b5\u30f3\u30d7\u30eb(1)\n\nAppendStructuredBuffer/ConsumeStructuredBuffer\u3068\u306f\nComputeBuffer\u3068\u306f\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068GPU\u4e0a\u306b\u7f6e\u3051\u308b\u30c7\u30fc\u30bf\u306e\u914d\u5217\u3067\u3059\u3002\n\u3044\u308d\u3093\u306a\u578b\u304c\u6307\u5b9a\u3067\u304d\u3001int\u3084float\u3060\u3051\u3058\u3083\u306a\u304f\u81ea\u4f5c\u306e\u69cb\u9020\u4f53\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u901a\u5e38\u306eComputeBuffer\u306f\u3001RWStructuredBuffer(RW\u306fReadWrite\u306e\u7565)\u306a\u3069\u3068\u3057\u3066\u4f7f\u3046\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nAppendStructuredBuffer\u306f\u3001Append()\u95a2\u6570\u3067\u672b\u5c3e\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002\u9006\u306b\u8a00\u3046\u3068\u8ffd\u52a0\u3057\u304b\u51fa\u6765\u307e\u305b\u3093\u3002\nConsumeStructuredBuffer\u306f\u3001Consume()\u95a2\u6570\u3067\u672b\u5c3e\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u9006\u306b\u8a00\u3046\u3068\u53d6\u308a\u51fa\u3059\u3053\u3068\u3057\u304b\u51fa\u6765\u307e\u305b\u3093\u3002\n\u540c\u3058ComputeBuffer\u3092AppendStructuredBuffer\u3068ConsumeStructuredBuffer\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001LIFO\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4eca\u56de\u306eGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u4ed5\u7d44\u307f\n\u4eca\u56de\u306eGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u524d\u8ff0\u306eAppendStructuredBuffer\u3068ConsumeStructuredBuffer\u3092\u4f7f\u3063\u3066\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u751f\u6b7b\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u7121\u52b9\u306b\u306a\u3063\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092AppendStructuredBuffer\u306b\u8ffd\u52a0\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u304d\u306fConsumeStreucturedBuffer\u304b\u3089\u53d6\u5f97\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\u753b\u9762\u4e0a\u3067\u30de\u30a6\u30b9\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u4e00\u5ea6\u306b256\u500b\u305a\u3064\u653e\u51fa\u3055\u308c\u307e\u3059\u3002\n\u653e\u51fa\u3055\u308c\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u79fb\u52d5\u3057\u306a\u304c\u3089\u6697\u304f\u306a\u3063\u3066\u884c\u304d\u300110\u79d2\u3067\u5b8c\u5168\u306b\u898b\u3048\u306a\u304f\u306a\u3063\u3066\u6d88\u3048\u307e\u3059\u3002\n\nC#\u5074\u30b3\u30fc\u30c9\u8aac\u660e\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u5b9a\u7fa9\n\u540c\u4e00\u306e\u3082\u306e\u3092ComputeShader\u3084\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306eShader\u306b\u3082\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n    struct ParticleData\n    {\n        public bool isActive;       // \u6709\u52b9\u30d5\u30e9\u30b0\n        public Vector3 position;    // \u5ea7\u6a19\n        public Vector3 velocity;    // \u52a0\u901f\u5ea6\n        public Color color;         // \u8272\n        public float duration;      // \u751f\u5b58\u6642\u9593\n        public float scale;         // \u30b5\u30a4\u30ba\n    }\n\n\n\u5404\u7a2e\u521d\u671f\u5316\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306eComputeBuffer\u7b49\u3092\u521d\u671f\u5316\n    /// <summary>\n    /// \u521d\u671f\u5316\n    /// </summary>\n    void Initialize()\n    {\n        // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u4e0a\u9650\u306e\u8a08\u7b97\u3001ComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u500d\u6570\u306b\u3057\u3066\u3044\u308b\n        particleNum = (particleMax / THREAD_NUM_X) * THREAD_NUM_X;\n\n        // \u4e00\u5ea6\u306b\u751f\u6210\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u8a08\u7b97\n        emitNum = (emitMax / THREAD_NUM_X) * THREAD_NUM_X;\n        Debug.Log(\"particleNum \" + particleNum + \" emitNum \" + emitNum + \" THREAD_NUM_X \" + THREAD_NUM_X);\n\n        // ComputeBuffer\u306e\u521d\u671f\u5316\u3001\u914d\u5217\u6570\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u5206\n        particleBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(ParticleData)), ComputeBufferType.Default);\n\n        // AppendStructuredBuffer \u3068 ConsumeStreucturedBuffer\u5171\u7528\u306eComputeBuffer\u306e\u521d\u671f\u5316\n        particlePoolBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(int)), ComputeBufferType.Append);\n        particlePoolBuffer.SetCounterValue(0);\n\n        // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306eComputeBuffer\u306e\u521d\u671f\u5316\n        particleCountBuffer = new ComputeBuffer(4, Marshal.SizeOf(typeof(int)), ComputeBufferType.IndirectArguments);\n        particleCounts = new int[]{ 0, 1, 0, 0 };\n        particleCountBuffer.SetData(particleCounts);\n\n        // ComputeShader\u306e\u30ab\u30fc\u30cd\u30eb(\u95a2\u6570)\u756a\u53f7\u3092\u53d6\u5f97\n        initKernel = cs.FindKernel(\"Init\");\n        emitKernel = cs.FindKernel(\"Emit\");\n        updateKernel = cs.FindKernel(\"Update\");\n\n        Debug.Log(\"initKernel \" + initKernel + \" emitKernel \" + emitKernel + \" updateKernel \" + updateKernel);\n\n        InitParticle();\n    }\n\n    void Start () {\n        Initialize();\n    }\n\nTHREAD_NUM_X\u306fComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u3068\u540c\u3058\u5024\u3067\u3059\u3002\n// ComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\n    const int THREAD_NUM_X = 16;\n\nInitParticle()\u306e\u4e2d\u8eab\u306f\u4e0b\u8a18\u3067\u3059\u3002\nComputeShader\u5074\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\n    /// </summary>\n    void InitParticle()\n    {\n        cs.SetBuffer(initKernel, \"_Particles\", particleBuffer);\n        cs.SetBuffer(initKernel, \"_DeadList\", particlePoolBuffer);\n        cs.Dispatch(initKernel, particleNum / THREAD_NUM_X, 1, 1);\n    }\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\u51e6\u7406\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\n    /// </summary>\n    void UpdateParticle()\n    {\n        cs.SetFloat(\"_DT\", Time.deltaTime);\n        cs.SetFloat(\"_LifeTime\", lifeTime);\n        cs.SetFloat(\"_Gravity\", gravity);\n        cs.SetBuffer(updateKernel, \"_Particles\", particleBuffer);\n        cs.SetBuffer(updateKernel, \"_DeadList\", particlePoolBuffer);\n\n        cs.Dispatch(updateKernel, particleNum / THREAD_NUM_X, 1, 1);\n    }\n\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\n    /// THREAD_NUM_X\u5206\u767a\u751f\n    /// </summary>\n    /// <param name=\"position\"></param>\n    void EmitParticle(Vector3 position)\n    {\n        // ConsumeStructuredBuffer\u5185\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u6b8b\u6570\u3092\u53d6\u5f97\u3059\u308b\n        particleCountBuffer.SetData(particleCounts);\n        ComputeBuffer.CopyCount(particlePoolBuffer, particleCountBuffer, 0);\n        particleCountBuffer.GetData(particleCounts);\n\n        particlePoolNum = particleCounts[0];\n\n        if (particleCounts[0] < emitNum) return;   // \u6b8b\u6570\u304cemitNum\u672a\u6e80\u306a\u3089\u767a\u751f\u3055\u305b\u306a\u3044\n\n        cs.SetVector(\"_EmitPosition\", position);\n        cs.SetFloat(\"_VelocityMax\", velocityMax);\n        cs.SetFloat(\"_LifeTime\", lifeTime);\n        cs.SetFloat(\"_ScaleMin\", scaleMin);\n        cs.SetFloat(\"_ScaleMax\", scaleMax);\n        cs.SetFloat(\"_Sai\", sai);\n        cs.SetFloat(\"_Val\", val);\n        cs.SetFloat(\"_Time\", Time.time);\n        cs.SetBuffer(emitKernel, \"_ParticlePool\", particlePoolBuffer);\n        cs.SetBuffer(emitKernel, \"_Particles\", particleBuffer);\n\n        cs.Dispatch(emitKernel, emitNum / THREAD_NUM_X, 1, 1);   // emitNum\u306e\u6570\u3060\u3051\u767a\u751f\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // \u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u304b\u3089\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u6210\u3059\u308b\n        if (Input.GetMouseButton(0))\n        {\n            Vector3 mpos = Input.mousePosition;\n            mpos.z = 10;\n            Vector3 pos = camera.ScreenToWorldPoint(mpos);\n            EmitParticle(pos);\n        }\n        UpdateParticle();\n    }\n\n\n\u7d42\u4e86\u6642\u306eComputeBuffer\u306e\u89e3\u653e\n\u7d42\u4e86\u6642\u306bComputeBuffer\u3092\u660e\u793a\u7684\u306b\u89e3\u653e\u3057\u306a\u3044\u3068\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\n    /// <summary>\n    /// ComputeBuffer\u306e\u89e3\u653e\n    /// </summary>\n    void ReleaseBuffer() {\n        if (particlePoolBuffer != null)\n        {\n            particlePoolBuffer.Release();\n        }\n        if (particleBuffer != null)\n        {\n            particleBuffer.Release();\n        }\n        if(particleCountBuffer != null)\n        {\n            particleCountBuffer.Release();\n        }\n    }\n\n    void OnDestroy()\n    {\n        ReleaseBuffer();\n    }\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u51e6\u7406\n    void OnRenderObject()\n    {\n        material.SetBuffer(\"_Particles\", particleBuffer);\n        material.SetPass(0);\n\n        Graphics.DrawProcedural(MeshTopology.Points, particleNum);\n    }\n\n\nComputeShader\u5074\u30b3\u30fc\u30c9\u8aac\u660e\n\n\u30ab\u30fc\u30cd\u30eb(\u95a2\u6570)\u306e\u5b9a\u7fa9\n#pragma kernel Init\n#pragma kernel Emit\n#pragma kernel Update\n\nComputeBufer.FindKernel\u3067\u691c\u7d22\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30ebID\u306f\u4e0a\u8ff0\u306e\u9806\u756a0,1,2\u3068\u3044\u3046\u611f\u3058\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\nC# \u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nVector3\u304cfloat3\u3001Color\u304cfloat4\u306a\u3069\u5fae\u5999\u306b\u578b\u304c\u5909\u308f\u3063\u3066\u307e\u3059\u304c\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\u7684\u306b\u306f\u540c\u3058\u3067\u3059\u3002\n struct ParticleData\n {\n    bool isActive;      // \u6709\u52b9\u30d5\u30e9\u30b0\n    float3 position;    // \u5ea7\u6a19\n    float3 velocity;    // \u52a0\u901f\u5ea6\n    float4 color;       // \u8272\n    float duration;     // \u751f\u5b58\u6642\u9593\n    float scale;        // \u30b5\u30a4\u30ba\n};\n\n\nComputeBuffer\u306e\u5b9a\u7fa9\nParticles\u304c\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n_DeadList\u3068_ParticlePool\u306f\u3001\u305d\u308c\u305e\u308cAppend\uff5e\u3068Consume\uff5e\u306e\u30d0\u30c3\u30d5\u30a1\u3067\u3059\u304c\u3001\u540c\u4e00\u306eComputeBuffer\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\nuint\u306a\u306e\u306f\u3001Particles\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3067\u3059\u3002\nRWStructuredBuffer<ParticleData> _Particles;\nAppendStructuredBuffer<uint> _DeadList;\nConsumeStructuredBuffer<uint> _ParticlePool;\n\n\n\n\u521d\u671f\u5316\nTHREAD_NUM_X\u306fnumthreads\u306e\u5024\u3068\u3057\u3066\u4f7f\u3063\u3066\u307e\u3059\u3002C#\u5074\u3067\u3082\u540c\u3058\u5024\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nnumthreads\u306e\u6570\u5206\u4e26\u5217\u306b\u51e6\u7406\u304c\u8d70\u308b\u305f\u3081\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u7dcf\u6570\u3092THREAD_NUM_X\u306e\u500d\u6570\u306b\u3059\u308b\u3053\u3068\u3067\u51e6\u7406\u3055\u308c\u306a\u3044\u4f59\u308a\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n#define THREAD_NUM_X 16\n\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Init (uint3 id : SV_DispatchThreadID)\n{\n    uint no = id.x;\n\n    _Particles[no].isActive = false;\n    _DeadList.Append(no); // \u672a\u4f7f\u7528\u30ea\u30b9\u30c8(AppendStructuredBuffer)\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\n}\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Emit ()\n{\n    uint no = _ParticlePool.Consume(); // \u672a\u4f7f\u7528\u30ea\u30b9\u30c8(ConsumeStructuredBuffer)\u306e\u672b\u5c3e\u304b\u3089\u672a\u4f7f\u7528\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n\n    float2 seed = float2(no + _Time, no + 1.583 + _Time);\n    float speed = rnd(seed) * _VelocityMax;\n    float scale = (rnd(seed + 3) - 0.5) * 2.0 * (_ScaleMax - _ScaleMin) + _ScaleMin;\n    float h = rnd(seed + 5);    // color\n\n    _Particles[no].isActive = true; // \u6709\u52b9\u306b\u3059\u308b\n    _Particles[no].position = _EmitPosition;\n    _Particles[no].velocity = (rnd3(seed + 3.15)) * speed;\n    _Particles[no].color = float4(hsv_to_rgb(float3(h, _Sai, _Val)),1);\n    _Particles[no].duration = _LifeTime;\n    _Particles[no].scale = scale;\n}\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Update (uint3 id : SV_DispatchThreadID)\n{\n    uint no = id.x;\n\n    // \u6709\u52b9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3051\u51e6\u7406\n    if(_Particles[no].isActive) {\n        _Particles[no].velocity.y -= _Gravity * _DT;\n        _Particles[no].position += _Particles[no].velocity * _DT;\n        _Particles[no].duration -= _DT;\n        _Particles[no].color.a = max(_Particles[no].duration / _LifeTime, 0);\n        if(_Particles[no].duration <= 0) {\n            _Particles[no].isActive = false;\n            _DeadList.Append(no); // \u5bff\u547d\u304c\u4ed8\u304d\u305f\u3089\u672a\u4f7f\u7528\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n        }\n    }\n\n}\n\n\n\u63cf\u753b\u7528\u306eShader\u51e6\u7406\u30b3\u30fc\u30c9\u8aac\u660e\n\n\u5404\u7a2e\u5b9a\u7fa9\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306eShader\u3067ComputeBuffer\u3092\u4f7f\u3046\u3068\u304d\u306f\u3001\n#pragma target 5.0\n\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u3061\u3089\u3067\u3082\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u9762\u5012\u304f\u3055\u3044\u5834\u5408\u306f.cginc\u306a\u3069\u3067\u307e\u3068\u3081\u3066include\u3059\u308b\u3068\u3044\u3044\u304b\u3082\uff1f\nstruct ParticleData\n{\n    bool isActive;      // \u6709\u52b9\u30d5\u30e9\u30b0\n    float3 position;    // \u5ea7\u6a19\n    float3 velocity;    // \u52a0\u901f\u5ea6\n    float4 color;       // \u8272\n    float duration;     // \u751f\u5b58\u6642\u9593\n    float scale;        // \u30b5\u30a4\u30ba\n};\n\n\u3053\u3061\u3089\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306f\u3001Read\u306e\u307f\u306a\u306e\u3067\u901a\u5e38\u306eStreucturedBuffer\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nStructuredBuffer<ParticleData> _Particles;\n\n\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\nComputeBuffer\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u6570\u304c\u9802\u70b9\u6570\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u306b\u6d41\u308c\u3066\u304d\u307e\u3059\u3002\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3067\u306f\u3001SV_VertexID\u304b\u3089\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3092\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u6709\u52b9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u306a\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u30b5\u30a4\u30ba\u3092\uff10\u306b\u3057\u3066\u63cf\u753b\u51e6\u7406\u306f\u8d70\u3063\u3066\u3044\u308b\u3051\u3069\u5b9f\u8cea\u898b\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nv2f vert (uint id : SV_VertexID)\n{\n    v2f o;\n    o.pos = float4(_Particles[id].position, 1);\n    o.uv = float2(0,0);\n    o.col = _Particles[id].color;\n    o.scale = _Particles[id].isActive ? _Particles[id].scale : 0; // \u6709\u52b9\u51fa\u306a\u3044\u3068\u304d\u306f\u30b5\u30a4\u30ba\u30920\u306b\u3059\u308b\n\n    return o;\n}\n\n\n\u30b8\u30aa\u30e1\u30c8\u30ea\u30b7\u30a7\u30fc\u30c0\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u306e\u30c7\u30fc\u30bf\u306f\u305f\u3060\u306e\u9802\u70b9\u306a\u306e\u3067\u3001\u9802\u70b9\u5ea7\u6a19\u306e\u5468\u56f2\u306b\u9802\u70b9\u3092\u8ffd\u52a0\u3057\u3066\u30d3\u30eb\u30dc\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n// \u30b8\u30aa\u30e1\u30c8\u30ea\u30b7\u30a7\u30fc\u30c0\n[maxvertexcount(4)]\nvoid geom(point v2f input[1], inout TriangleStream<v2f> outStream)\n{\n    v2f o;\n\n    // \u5168\u3066\u306e\u9802\u70b9\u3067\u5171\u901a\u306e\u5024\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\n    float4 pos = input[0].pos;\n    float4 col = input[0].col;\n    o.scale = 0;\n\n    // \u56db\u89d2\u5f62\u306b\u306a\u308b\u3088\u3046\u306b\u9802\u70b9\u3092\u751f\u7523\n    for (int x = 0; x < 2; x++)\n    {\n        for (int y = 0; y < 2; y++)\n        {\n            // \u30d3\u30eb\u30dc\u30fc\u30c9\u7528\u306e\u884c\u5217\n            float4x4 billboardMatrix = UNITY_MATRIX_V;\n            billboardMatrix._m03 = billboardMatrix._m13 = billboardMatrix._m23 = billboardMatrix._m33 = 0;\n\n            // \u30c6\u30af\u30b9\u30c1\u30e3\u5ea7\u6a19\n            float2 uv = float2(x, y);\n            o.uv = uv;\n\n            // \u9802\u70b9\u4f4d\u7f6e\u3092\u8a08\u7b97\n            o.pos = pos + mul(float4((uv * 2 - float2(1, 1)) * input[0].scale, 0, 1), billboardMatrix);\n            o.pos = mul(UNITY_MATRIX_VP, o.pos);\n\n            // \u8272\n            o.col = col;\n\n            // \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u9802\u70b9\u3092\u8ffd\u52a0\n            outStream.Append(o);\n        }\n    }\n\n    // \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u30b9\u30c8\u30ea\u30c3\u30d7\u3092\u7d42\u4e86\n    outStream.RestartStrip();\n}\n\n\n\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\nfixed4 frag (v2f i) : SV_Target\n{\n    // sample the texture\n    fixed4 col = tex2D(_MainTex, i.uv) * i.col;\n    return col;\n}\n\n\n\u53c2\u8003\nUnity : ComputeShader \u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30b5\u30f3\u30d7\u30eb(1)\n[Unity]\u30b3\u30f3\u30d4\u30e5\u30fc\u30c8\u30b7\u30a7\u30fc\u30c0(GPGPU)\u30671\u4e07\u500b\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52d5\u304b\u3059\nUnity \u3067 Compute Shader \u3092\u4f7f\u3063\u305f\u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u885d\u7a81\u6709\u308a\u306e GPU \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Unity 2 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/unity2) \u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n9\u65e5\u76ee\u306e\u8a18\u4e8b\u306f@Marimoiro\u3055\u3093\u306e [Unity\u3067\u30c6\u30b9\u30c8\u7528\u306b\u30a4\u30f3\u30b9\u30da\u30af\u30bf\u4e0a\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u30dc\u30bf\u30f3\u3092\u4f5c\u308d\u3046](http://qiita.com/Marimoiro/items/8c8676feffb3ebbc0ddb) \u3067\u3057\u305f\u3002\n\n\u2193\u52d5\u753b\uff08\u30af\u30ea\u30c3\u30af\u3067Youtube\u3078\uff09\n[![\u52d5\u753b](http://img.youtube.com/vi/o7MXVOi_XWw/0.jpg)](http://www.youtube.com/watch?v=o7MXVOi_XWw)\n\n\u4eca\u56de\u306f\u3001AppendStructuredBuffer/ConsumeStructuredBuffer\u3092\u4f7f\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nComputeBuffer.CopyCount\u306f\u3001Unity5.3\u4ee5\u524d\u3067\u306f\u30d0\u30b0\u3063\u3066\u3044\u3066\u6b63\u5e38\u306b\u30ab\u30a6\u30f3\u30c8\u304c\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u70ba\u3001AppendStructuredBuffer/ConsumeStructuredBuffer\u3092\u4f7f\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u4f5c\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n5.4\u306b\u306a\u3063\u3066\u304b\u3089\u3088\u3046\u3084\u304f\u30d0\u30b0\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002\n\u958b\u767a\u74b0\u5883\u306f\u3001Unity5.5\u3001Windows10\u3067\u3059\u3002\n\u4eca\u306e\u3068\u3053\u308dUnity\u306eComputeShader\u306fMac\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u4f5c\u3063\u305fGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3053\u3061\u3089\u306b\u30a2\u30c3\u30d7\u3057\u3066\u304a\u308a\u307e\u3059\u3002\nhttps://github.com/kaiware007/UnityGPUParticleSample\n\n# ComputeShader\u3068\u306f\nGPU\u3092\u4f7f\u3063\u3066\u63cf\u753b\u4ee5\u5916\u306b\u6c4e\u7528\u7684\u306a\u51e6\u7406\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\nGPU\u3092\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u306f\u3001\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u4e26\u5217\u3067\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u308b\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\nComputeShader\u306e\u8a73\u7d30\u306f\u3001\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n[Unity : ComputeShader \u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30b5\u30f3\u30d7\u30eb(1)](http://neareal.com/2601/)\n\n# AppendStructuredBuffer/ConsumeStructuredBuffer\u3068\u306f\nComputeBuffer\u3068\u306f\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068GPU\u4e0a\u306b\u7f6e\u3051\u308b\u30c7\u30fc\u30bf\u306e\u914d\u5217\u3067\u3059\u3002\n\u3044\u308d\u3093\u306a\u578b\u304c\u6307\u5b9a\u3067\u304d\u3001int\u3084float\u3060\u3051\u3058\u3083\u306a\u304f\u81ea\u4f5c\u306e\u69cb\u9020\u4f53\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u901a\u5e38\u306eComputeBuffer\u306f\u3001RWStructuredBuffer(RW\u306fReadWrite\u306e\u7565)\u306a\u3069\u3068\u3057\u3066\u4f7f\u3046\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nAppendStructuredBuffer\u306f\u3001Append()\u95a2\u6570\u3067\u672b\u5c3e\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002\u9006\u306b\u8a00\u3046\u3068\u8ffd\u52a0\u3057\u304b\u51fa\u6765\u307e\u305b\u3093\u3002\nConsumeStructuredBuffer\u306f\u3001Consume()\u95a2\u6570\u3067\u672b\u5c3e\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u9006\u306b\u8a00\u3046\u3068\u53d6\u308a\u51fa\u3059\u3053\u3068\u3057\u304b\u51fa\u6765\u307e\u305b\u3093\u3002\n\u540c\u3058ComputeBuffer\u3092AppendStructuredBuffer\u3068ConsumeStructuredBuffer\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001LIFO\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n# \u4eca\u56de\u306eGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u4ed5\u7d44\u307f\n\u4eca\u56de\u306eGPU\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u524d\u8ff0\u306eAppendStructuredBuffer\u3068ConsumeStructuredBuffer\u3092\u4f7f\u3063\u3066\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u751f\u6b7b\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\u7121\u52b9\u306b\u306a\u3063\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092AppendStructuredBuffer\u306b\u8ffd\u52a0\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u767a\u751f\u3055\u305b\u308b\u3068\u304d\u306fConsumeStreucturedBuffer\u304b\u3089\u53d6\u5f97\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\u753b\u9762\u4e0a\u3067\u30de\u30a6\u30b9\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u4f4d\u7f6e\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u4e00\u5ea6\u306b256\u500b\u305a\u3064\u653e\u51fa\u3055\u308c\u307e\u3059\u3002\n\u653e\u51fa\u3055\u308c\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u79fb\u52d5\u3057\u306a\u304c\u3089\u6697\u304f\u306a\u3063\u3066\u884c\u304d\u300110\u79d2\u3067\u5b8c\u5168\u306b\u898b\u3048\u306a\u304f\u306a\u3063\u3066\u6d88\u3048\u307e\u3059\u3002\n\n# C#\u5074\u30b3\u30fc\u30c9\u8aac\u660e\n\n### \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u5b9a\u7fa9\n\u540c\u4e00\u306e\u3082\u306e\u3092ComputeShader\u3084\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306eShader\u306b\u3082\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```C#\n    struct ParticleData\n    {\n        public bool isActive;       // \u6709\u52b9\u30d5\u30e9\u30b0\n        public Vector3 position;    // \u5ea7\u6a19\n        public Vector3 velocity;    // \u52a0\u901f\u5ea6\n        public Color color;         // \u8272\n        public float duration;      // \u751f\u5b58\u6642\u9593\n        public float scale;         // \u30b5\u30a4\u30ba\n    }\n```\n\n\n### \u5404\u7a2e\u521d\u671f\u5316\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306eComputeBuffer\u7b49\u3092\u521d\u671f\u5316\n\n```C#\n    /// <summary>\n    /// \u521d\u671f\u5316\n    /// </summary>\n    void Initialize()\n    {\n        // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u4e0a\u9650\u306e\u8a08\u7b97\u3001ComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u500d\u6570\u306b\u3057\u3066\u3044\u308b\n        particleNum = (particleMax / THREAD_NUM_X) * THREAD_NUM_X;\n        \n        // \u4e00\u5ea6\u306b\u751f\u6210\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u8a08\u7b97\n        emitNum = (emitMax / THREAD_NUM_X) * THREAD_NUM_X;\n        Debug.Log(\"particleNum \" + particleNum + \" emitNum \" + emitNum + \" THREAD_NUM_X \" + THREAD_NUM_X);\n\n        // ComputeBuffer\u306e\u521d\u671f\u5316\u3001\u914d\u5217\u6570\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u5206\n        particleBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(ParticleData)), ComputeBufferType.Default);\n        \n        // AppendStructuredBuffer \u3068 ConsumeStreucturedBuffer\u5171\u7528\u306eComputeBuffer\u306e\u521d\u671f\u5316\n        particlePoolBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(int)), ComputeBufferType.Append);\n        particlePoolBuffer.SetCounterValue(0);\n\n        // \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306eComputeBuffer\u306e\u521d\u671f\u5316\n        particleCountBuffer = new ComputeBuffer(4, Marshal.SizeOf(typeof(int)), ComputeBufferType.IndirectArguments);\n        particleCounts = new int[]{ 0, 1, 0, 0 };\n        particleCountBuffer.SetData(particleCounts);\n\n        // ComputeShader\u306e\u30ab\u30fc\u30cd\u30eb(\u95a2\u6570)\u756a\u53f7\u3092\u53d6\u5f97\n        initKernel = cs.FindKernel(\"Init\");\n        emitKernel = cs.FindKernel(\"Emit\");\n        updateKernel = cs.FindKernel(\"Update\");\n\n        Debug.Log(\"initKernel \" + initKernel + \" emitKernel \" + emitKernel + \" updateKernel \" + updateKernel);\n\n        InitParticle();\n    }\n\n    void Start () {\n        Initialize();\n    }\n```\n\nTHREAD_NUM_X\u306fComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u3068\u540c\u3058\u5024\u3067\u3059\u3002\n\n```C#\n// ComputeShader\u306e\u30b9\u30ec\u30c3\u30c9\u6570\n    const int THREAD_NUM_X = 16;\n```\nInitParticle()\u306e\u4e2d\u8eab\u306f\u4e0b\u8a18\u3067\u3059\u3002\nComputeShader\u5074\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n```C#\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\n    /// </summary>\n    void InitParticle()\n    {\n        cs.SetBuffer(initKernel, \"_Particles\", particleBuffer);\n        cs.SetBuffer(initKernel, \"_DeadList\", particlePoolBuffer);\n        cs.Dispatch(initKernel, particleNum / THREAD_NUM_X, 1, 1);\n    }\n```\n\n### \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\u51e6\u7406\n\n```C#\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\n    /// </summary>\n    void UpdateParticle()\n    {\n        cs.SetFloat(\"_DT\", Time.deltaTime);\n        cs.SetFloat(\"_LifeTime\", lifeTime);\n        cs.SetFloat(\"_Gravity\", gravity);\n        cs.SetBuffer(updateKernel, \"_Particles\", particleBuffer);\n        cs.SetBuffer(updateKernel, \"_DeadList\", particlePoolBuffer);\n        \n        cs.Dispatch(updateKernel, particleNum / THREAD_NUM_X, 1, 1);\n    }\n\n    /// <summary>\n    /// \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\n    /// THREAD_NUM_X\u5206\u767a\u751f\n    /// </summary>\n    /// <param name=\"position\"></param>\n    void EmitParticle(Vector3 position)\n    {\n        // ConsumeStructuredBuffer\u5185\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6570\u306e\u6b8b\u6570\u3092\u53d6\u5f97\u3059\u308b\n        particleCountBuffer.SetData(particleCounts);\n        ComputeBuffer.CopyCount(particlePoolBuffer, particleCountBuffer, 0);\n        particleCountBuffer.GetData(particleCounts);\n        \n        particlePoolNum = particleCounts[0];\n\n        if (particleCounts[0] < emitNum) return;   // \u6b8b\u6570\u304cemitNum\u672a\u6e80\u306a\u3089\u767a\u751f\u3055\u305b\u306a\u3044\n\n        cs.SetVector(\"_EmitPosition\", position);\n        cs.SetFloat(\"_VelocityMax\", velocityMax);\n        cs.SetFloat(\"_LifeTime\", lifeTime);\n        cs.SetFloat(\"_ScaleMin\", scaleMin);\n        cs.SetFloat(\"_ScaleMax\", scaleMax);\n        cs.SetFloat(\"_Sai\", sai);\n        cs.SetFloat(\"_Val\", val);\n        cs.SetFloat(\"_Time\", Time.time);\n        cs.SetBuffer(emitKernel, \"_ParticlePool\", particlePoolBuffer);\n        cs.SetBuffer(emitKernel, \"_Particles\", particleBuffer);\n\n        cs.Dispatch(emitKernel, emitNum / THREAD_NUM_X, 1, 1);   // emitNum\u306e\u6570\u3060\u3051\u767a\u751f\n    }\n\n    // Update is called once per frame\n    void Update () {\n        // \u30de\u30a6\u30b9\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u3089\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u304b\u3089\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u6210\u3059\u308b\n        if (Input.GetMouseButton(0))\n        {\n            Vector3 mpos = Input.mousePosition;\n            mpos.z = 10;\n            Vector3 pos = camera.ScreenToWorldPoint(mpos);\n            EmitParticle(pos);\n        }\n        UpdateParticle();\n    }\n```\n\n### \u7d42\u4e86\u6642\u306eComputeBuffer\u306e\u89e3\u653e\n\u7d42\u4e86\u6642\u306bComputeBuffer\u3092\u660e\u793a\u7684\u306b\u89e3\u653e\u3057\u306a\u3044\u3068\u30ea\u30fc\u30af\u3057\u307e\u3059\u3002\n\n```C#\n    /// <summary>\n    /// ComputeBuffer\u306e\u89e3\u653e\n    /// </summary>\n    void ReleaseBuffer() {\n        if (particlePoolBuffer != null)\n        {\n            particlePoolBuffer.Release();\n        }\n        if (particleBuffer != null)\n        {\n            particleBuffer.Release();\n        }\n        if(particleCountBuffer != null)\n        {\n            particleCountBuffer.Release();\n        }\n    }\n    \n    void OnDestroy()\n    {\n        ReleaseBuffer();\n    }\n```\n\n### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u51e6\u7406\n\n```C#\n    void OnRenderObject()\n    {\n        material.SetBuffer(\"_Particles\", particleBuffer);\n        material.SetPass(0);\n\n        Graphics.DrawProcedural(MeshTopology.Points, particleNum);\n    }\n```\n# ComputeShader\u5074\u30b3\u30fc\u30c9\u8aac\u660e\n\n### \u30ab\u30fc\u30cd\u30eb(\u95a2\u6570)\u306e\u5b9a\u7fa9\n\n```HLSL\n#pragma kernel Init\n#pragma kernel Emit\n#pragma kernel Update\n```\nComputeBufer.FindKernel\u3067\u691c\u7d22\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30ebID\u306f\u4e0a\u8ff0\u306e\u9806\u756a0,1,2\u3068\u3044\u3046\u611f\u3058\u3067\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n### \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\n\nC# \u306e\u30b3\u30fc\u30c9\u3068\u540c\u3058\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nVector3\u304cfloat3\u3001Color\u304cfloat4\u306a\u3069\u5fae\u5999\u306b\u578b\u304c\u5909\u308f\u3063\u3066\u307e\u3059\u304c\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30c8\u6570\u7684\u306b\u306f\u540c\u3058\u3067\u3059\u3002\n\n```HLSL\n struct ParticleData\n {\n\tbool isActive;      // \u6709\u52b9\u30d5\u30e9\u30b0\n\tfloat3 position;    // \u5ea7\u6a19\n    float3 velocity;    // \u52a0\u901f\u5ea6\n    float4 color;       // \u8272\n    float duration;     // \u751f\u5b58\u6642\u9593\n\tfloat scale;        // \u30b5\u30a4\u30ba\n};\n```\n\n### ComputeBuffer\u306e\u5b9a\u7fa9\n_Particles\u304c\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n_DeadList\u3068_ParticlePool\u306f\u3001\u305d\u308c\u305e\u308cAppend\uff5e\u3068Consume\uff5e\u306e\u30d0\u30c3\u30d5\u30a1\u3067\u3059\u304c\u3001\u540c\u4e00\u306eComputeBuffer\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\nuint\u306a\u306e\u306f\u3001_Particles\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\n``` HLSL\nRWStructuredBuffer<ParticleData> _Particles;\nAppendStructuredBuffer<uint> _DeadList;\nConsumeStructuredBuffer<uint> _ParticlePool;\n\n```\n\n### \u521d\u671f\u5316\nTHREAD_NUM_X\u306fnumthreads\u306e\u5024\u3068\u3057\u3066\u4f7f\u3063\u3066\u307e\u3059\u3002C#\u5074\u3067\u3082\u540c\u3058\u5024\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nnumthreads\u306e\u6570\u5206\u4e26\u5217\u306b\u51e6\u7406\u304c\u8d70\u308b\u305f\u3081\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u7dcf\u6570\u3092THREAD_NUM_X\u306e\u500d\u6570\u306b\u3059\u308b\u3053\u3068\u3067\u51e6\u7406\u3055\u308c\u306a\u3044\u4f59\u308a\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```HLSL\n#define THREAD_NUM_X 16\n\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Init (uint3 id : SV_DispatchThreadID)\n{\n\tuint no = id.x;\n\n\t_Particles[no].isActive = false;\n\t_DeadList.Append(no); // \u672a\u4f7f\u7528\u30ea\u30b9\u30c8(AppendStructuredBuffer)\u306e\u672b\u5c3e\u306b\u8ffd\u52a0\n}\n```\n\n### \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u767a\u751f\n```HLSL\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Emit ()\n{\n\tuint no = _ParticlePool.Consume(); // \u672a\u4f7f\u7528\u30ea\u30b9\u30c8(ConsumeStructuredBuffer)\u306e\u672b\u5c3e\u304b\u3089\u672a\u4f7f\u7528\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n\n\tfloat2 seed = float2(no + _Time, no + 1.583 + _Time);\n\tfloat speed = rnd(seed) * _VelocityMax;\n\tfloat scale = (rnd(seed + 3) - 0.5) * 2.0 * (_ScaleMax - _ScaleMin) + _ScaleMin;\n\tfloat h = rnd(seed + 5);\t// color\n\n\t_Particles[no].isActive = true; // \u6709\u52b9\u306b\u3059\u308b\n\t_Particles[no].position = _EmitPosition;\n\t_Particles[no].velocity = (rnd3(seed + 3.15)) * speed;\n\t_Particles[no].color = float4(hsv_to_rgb(float3(h, _Sai, _Val)),1);\n\t_Particles[no].duration = _LifeTime;\n\t_Particles[no].scale = scale;\n}\n```\n\n### \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u66f4\u65b0\n```HLSL\n[numthreads(THREAD_NUM_X, 1, 1)]\nvoid Update (uint3 id : SV_DispatchThreadID)\n{\n\tuint no = id.x;\n\n\t// \u6709\u52b9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u3082\u306e\u3060\u3051\u51e6\u7406\n\tif(_Particles[no].isActive) {\n\t\t_Particles[no].velocity.y -= _Gravity * _DT;\n\t\t_Particles[no].position += _Particles[no].velocity * _DT;\n\t\t_Particles[no].duration -= _DT;\n\t\t_Particles[no].color.a = max(_Particles[no].duration / _LifeTime, 0);\n\t\tif(_Particles[no].duration <= 0) {\n\t\t\t_Particles[no].isActive = false;\n\t\t\t_DeadList.Append(no); // \u5bff\u547d\u304c\u4ed8\u304d\u305f\u3089\u672a\u4f7f\u7528\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t}\n\t}\n\n}\n```\n\n# \u63cf\u753b\u7528\u306eShader\u51e6\u7406\u30b3\u30fc\u30c9\u8aac\u660e\n\n### \u5404\u7a2e\u5b9a\u7fa9\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306eShader\u3067ComputeBuffer\u3092\u4f7f\u3046\u3068\u304d\u306f\u3001\n\n```HLSL\n#pragma target 5.0\n```\n\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u3067\u3082\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u9762\u5012\u304f\u3055\u3044\u5834\u5408\u306f.cginc\u306a\u3069\u3067\u307e\u3068\u3081\u3066include\u3059\u308b\u3068\u3044\u3044\u304b\u3082\uff1f\n\n```HLSL\nstruct ParticleData\n{\n\tbool isActive;      // \u6709\u52b9\u30d5\u30e9\u30b0\n\tfloat3 position;    // \u5ea7\u6a19\n\tfloat3 velocity;    // \u52a0\u901f\u5ea6\n\tfloat4 color;       // \u8272\n\tfloat duration;     // \u751f\u5b58\u6642\u9593\n\tfloat scale;        // \u30b5\u30a4\u30ba\n};\n```\n\n\u3053\u3061\u3089\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306f\u3001Read\u306e\u307f\u306a\u306e\u3067\u901a\u5e38\u306eStreucturedBuffer\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```HLSL\nStructuredBuffer<ParticleData> _Particles;\n```\n\n### \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\n\nComputeBuffer\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u6570\u304c\u9802\u70b9\u6570\u3068\u3057\u3066\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u306b\u6d41\u308c\u3066\u304d\u307e\u3059\u3002\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u3067\u306f\u3001SV_VertexID\u304b\u3089\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3092\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u6709\u52b9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u306a\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001\u30b5\u30a4\u30ba\u3092\uff10\u306b\u3057\u3066\u63cf\u753b\u51e6\u7406\u306f\u8d70\u3063\u3066\u3044\u308b\u3051\u3069\u5b9f\u8cea\u898b\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```HLSL\nv2f vert (uint id : SV_VertexID)\n{\n\tv2f o;\n\to.pos = float4(_Particles[id].position, 1);\n\to.uv = float2(0,0);\n\to.col = _Particles[id].color;\n\to.scale = _Particles[id].isActive ? _Particles[id].scale : 0; // \u6709\u52b9\u51fa\u306a\u3044\u3068\u304d\u306f\u30b5\u30a4\u30ba\u30920\u306b\u3059\u308b\n\n\treturn o;\n}\n```\n\n### \u30b8\u30aa\u30e1\u30c8\u30ea\u30b7\u30a7\u30fc\u30c0\n\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u304b\u3089\u306e\u30c7\u30fc\u30bf\u306f\u305f\u3060\u306e\u9802\u70b9\u306a\u306e\u3067\u3001\u9802\u70b9\u5ea7\u6a19\u306e\u5468\u56f2\u306b\u9802\u70b9\u3092\u8ffd\u52a0\u3057\u3066\u30d3\u30eb\u30dc\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```HLSL\t\t\t\n// \u30b8\u30aa\u30e1\u30c8\u30ea\u30b7\u30a7\u30fc\u30c0\n[maxvertexcount(4)]\nvoid geom(point v2f input[1], inout TriangleStream<v2f> outStream)\n{\n\tv2f o;\n\n\t// \u5168\u3066\u306e\u9802\u70b9\u3067\u5171\u901a\u306e\u5024\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\n\tfloat4 pos = input[0].pos;\n\tfloat4 col = input[0].col;\n\to.scale = 0;\n\n\t// \u56db\u89d2\u5f62\u306b\u306a\u308b\u3088\u3046\u306b\u9802\u70b9\u3092\u751f\u7523\n\tfor (int x = 0; x < 2; x++)\n\t{\n\t\tfor (int y = 0; y < 2; y++)\n\t\t{\n\t\t\t// \u30d3\u30eb\u30dc\u30fc\u30c9\u7528\u306e\u884c\u5217\n\t\t\tfloat4x4 billboardMatrix = UNITY_MATRIX_V;\n\t\t\tbillboardMatrix._m03 = billboardMatrix._m13 = billboardMatrix._m23 = billboardMatrix._m33 = 0;\n\n\t\t\t// \u30c6\u30af\u30b9\u30c1\u30e3\u5ea7\u6a19\n\t\t\tfloat2 uv = float2(x, y);\n\t\t\to.uv = uv;\n\n\t\t\t// \u9802\u70b9\u4f4d\u7f6e\u3092\u8a08\u7b97\n\t\t\to.pos = pos + mul(float4((uv * 2 - float2(1, 1)) * input[0].scale, 0, 1), billboardMatrix);\n\t\t\to.pos = mul(UNITY_MATRIX_VP, o.pos);\n\n\t\t\t// \u8272\n\t\t\to.col = col;\n\n\t\t\t// \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u9802\u70b9\u3092\u8ffd\u52a0\n\t\t\toutStream.Append(o);\n\t\t}\n\t}\n\n\t// \u30c8\u30e9\u30a4\u30a2\u30f3\u30b0\u30eb\u30b9\u30c8\u30ea\u30c3\u30d7\u3092\u7d42\u4e86\n\toutStream.RestartStrip();\n}\n```\n\n### \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\n\n```HLSL\nfixed4 frag (v2f i) : SV_Target\n{\n\t// sample the texture\n\tfixed4 col = tex2D(_MainTex, i.uv) * i.col;\n\treturn col;\n}\n```\n\n# \u53c2\u8003\n\n[Unity : ComputeShader \u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30b5\u30f3\u30d7\u30eb(1)](http://neareal.com/2601/)\n[[Unity]\u30b3\u30f3\u30d4\u30e5\u30fc\u30c8\u30b7\u30a7\u30fc\u30c0(GPGPU)\u30671\u4e07\u500b\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u52d5\u304b\u3059](http://notargs.com/blog/blog/2015/01/27/unity%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%88%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B7%E3%83%B3%E3%82%B0%E3%81%A71%E4%B8%87/)\n[Unity \u3067 Compute Shader \u3092\u4f7f\u3063\u305f\u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u885d\u7a81\u6709\u308a\u306e GPU \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f](\nhttp://tips.hecomi.com/entry/2016/05/08/160626)\n", "tags": ["Unity", "C#", "HLSL", "Shader"]}