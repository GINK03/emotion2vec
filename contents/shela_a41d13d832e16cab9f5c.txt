{"tags": ["ExcelVBA"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nWindows\u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308bCryptAPI\u3092\u5229\u7528\u3057\u3066AES 128bit\u306b\u3088\u308b\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\u8a66\u3057\u3066\u3044\u306a\u3044\u304c\u3001192bit\u3001256bit\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3064\u3082\u308a\u3002\u4f8b\u306b\u3088\u3063\u3066x64\u7248\u306eExcel\u306b\u3082\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u305f\u3002\nCryptAPI\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306fAES\u306f\u672a\u30b5\u30dd\u30fc\u30c8\u306e\u5834\u5408\u304c\u3042\u308b\u3088\u3046\u3060\u304c\u3001Windows XP\u4ee5\u964d\u306a\u3089AES\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n\u306a\u304a\u3001Windows Vista\u4ee5\u964d\u306a\u3089\u3001CNG(Cryptography API: Next Generation)\u3082\u5229\u7528\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\n\u53c2\u8003\nCryptAPI\u306b\u3064\u3044\u3066\u306f\u3001\u30c8\u30e9\u30b9\u30c8\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30fb\u30b7\u30b9\u30c6\u30e0\u306e\u6697\u53f7\u5316\u3068\u96fb\u5b50\u7f72\u540d\u30a2\u30d7\u30ea\u306e\u89e3\u8aac\u304c\u8a73\u3057\u3044\u3002\n\u89e3\u8aac\u306bCryptCreateHash\u3067\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u3092\u9375\u306b\u4f7f\u7528\u3059\u308b\u3001\u3068\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u3042\u304f\u307e\u3067\u30cf\u30c3\u30b7\u30e5\u751f\u6210\u95a2\u6570\u3092\u7528\u3044\u3066\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u9375\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u3067\u3042\u308a\u3001\u7279\u5b9a\u6587\u5b57\u5217\u3092\u9375\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u30cf\u30c3\u30b7\u30e5\u3067\u306f\u306a\u304fCryptImportKey\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3002\n(\u3082\u3061\u308d\u3093\u3001\u6697\u53f7\u5316\u5f37\u5ea6\u306e\u70b9\u3067\u306f\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7528\u3044\u305f\u65b9\u304c\u3088\u308a\u826f\u3044\u3068\u306f\u601d\u3046\u304c\u3002)\n\u306a\u304a\u3001CryptImportKey\u306f\u3001PUBLICKEYSTRUC BLOB\u306b\u7d9a\u3044\u3066\u6697\u53f7\u5316\u9375\u30c7\u30fc\u30bf\u3092\u3082\u3064\u30d0\u30a4\u30c8\u578b\u306e\u914d\u5217\u3092\u5f15\u6570\u306b\u53d6\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u3002\nMSDN\u306e\u8aac\u660e\u306b\u306fCryptExportKey\u3067\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u9375\u3068\u3042\u308b\u304c\u3001\u5f62\u5f0f\u3060\u3051\u5408\u308f\u305b\u3066\u81ea\u5206\u3067\u751f\u6210\u3057\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u3002\n\n\u30b3\u30fc\u30c9\nAES\u306b\u3088\u308b\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u306e\u30e1\u30a4\u30f3\u3068\u306a\u308b\u30af\u30e9\u30b9\u3092\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5b9a\u7fa9\u3002\n\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3057\u305f\u7406\u7531\u306f\u7279\u306b\u306a\u3057\u3002\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3082\u69cb\u308f\u306a\u3044\u3002\n\nCipher\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\n'CryptAPI\u3092\u5229\u7528\u3057\u305fAES\u6697\u53f7\u5316/\u5fa9\u53f7\u30af\u30e9\u30b9\n\nOption Explicit\n\n'CryptAPI\u7528\u5b9a\u6570\u5b9a\u7fa9\nPrivate Const CRYPT_VERIFYCONTEXT As Long = &HF0000000\nPrivate Const ALG_TYPE_BLOCK As Long = 1536\nPrivate Const ALG_CLASS_DATA_ENCRYPT As Long = 24576\nPrivate Const ALG_SID_AES_128 As Long = 14\nPrivate Const ALG_SID_AES_192 As Long = 15\nPrivate Const ALG_SID_AES_256 As Long = 16\nPrivate Const PROV_RSA_AES As Long = 24\nPrivate Const CALG_AES_128 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_128\nPrivate Const CALG_AES_192 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_192\nPrivate Const CALG_AES_256 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_256\nPrivate Const KP_IV As Long = 1\nPrivate Const KP_PADDING As Long = 3\nPrivate Const KP_MODE As Long = 4\nPrivate Const PKCS5_PADDING As Long = 1\nPrivate Const CRYPT_MODE_CBC As Long = 1\nPrivate Const PLAINTEXTKEYBLOB As Long = 8\nPrivate Const CUR_BLOB_VERSION As Long = 2\n\n'WindowsAPI\u7528\u5b9a\u6570\u5b9a\u7fa9\nPrivate Const FORMAT_MESSAGE_ALLOCATE_BUFFER As Long = &H100\nPrivate Const FORMAT_MESSAGE_IGNORE_INSERTS As Long = &H200\nPrivate Const FORMAT_MESSAGE_FROM_STRING As Long = &H400\nPrivate Const FORMAT_MESSAGE_FROM_HMODULE As Long = &H800\nPrivate Const FORMAT_MESSAGE_FROM_SYSTEM As Long = &H1000\nPrivate Const FORMAT_MESSAGE_ARGUMENT_ARRAY As Long = 8192\nPrivate Const FORMAT_MESSAGE_MAX_WIDTH_MASK As Long = 255\nPrivate Const LANG_NEUTRAL As Long = &H0\nPrivate Const SUBLANG_DEFAULT As Long = &H1\n\n\n'CryptoAPI\u5b9a\u7fa9\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" ( _\n    ByRef phProv As LongPtr, ByVal pszContainer As String, ByVal pszProvider As String, _\n    ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptReleaseContext Lib \"advapi32.dll\" ( _\n    ByVal hProv As LongPtr, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptImportKey Lib \"advapi32.dll\" ( _\n    ByVal hProv As LongPtr, ByRef pbData As Any, ByVal dwDataLen As Long, _\n    ByVal hPubKey As Long, ByVal dwFlags As Long, ByRef phKey As LongPtr) As Long\nPrivate Declare PtrSafe Function CryptDestroyKey Lib \"advapi32.dll\" (ByVal hKey As LongPtr) As Long\nPrivate Declare PtrSafe Function CryptSetKeyParam Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal dwParam As Long, ByRef pbData As Any, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptDecrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long) As Long\nPrivate Declare PtrSafe Function CryptEncrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long, _\n    ByVal dwBufLen As Long) As Long\n\n#Else\n\nPrivate Declare Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" ( _\n    ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, _\n    ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptReleaseContext Lib \"advapi32.dll\" ( _\n    ByVal hProv As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptImportKey Lib \"advapi32.dll\" ( _\n    ByVal hProv As Long, ByRef pbData As Any, ByVal dwDataLen As Long, _\n    ByVal hPubKey As Long, ByVal dwFlags As Long, ByRef phKey As Long) As Long\nPrivate Declare Function CryptDestroyKey Lib \"advapi32.dll\" (ByVal hKey As Long) As Long\nPrivate Declare Function CryptSetKeyParam Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal dwParam As Long, ByRef pbData As Any, _\n    ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptDecrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long) As Long\nPrivate Declare Function CryptEncrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long, _\n    ByVal dwBufLen As Long) As Long\n\n#End If\n\n\n'WindowsAPI\u5b9a\u7fa9\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)\nPrivate Declare PtrSafe Function FormatMessage Lib \"kernel32.dll\" Alias \"FormatMessageW\" ( _\n    ByVal dwFlags As Long, ByRef lpSource As Any, ByVal dwMessageId As Long, _\n    ByVal dwLanguageId As Long, ByRef lpBuffer As LongPtr, ByVal nSize As Long, _\n    ByRef Arguments As Any) As Long\nPrivate Declare PtrSafe Function lstrcpy Lib \"kernel32.dll\" Alias \"lstrcpyW\" ( _\n    ByVal lpString1 As LongPtr, ByVal lpString2 As LongPtr) As Long\nPrivate Declare PtrSafe Function LocalFree Lib \"kernel32.dll\" (ByVal hMem As LongPtr) As Long\n\n#Else\n\nPrivate Declare Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)\nPrivate Declare Function FormatMessage Lib \"kernel32.dll\" Alias \"FormatMessageW\" ( _\n    ByVal dwFlags As Long, ByRef lpSource As Any, ByVal dwMessageId As Long, _\n    ByVal dwLanguageId As Long, ByRef lpBuffer As Long, ByVal nSize As Long, _\n    ByRef Arguments As Any) As Long\nPrivate Declare Function lstrcpy Lib \"kernel32.dll\" Alias \"lstrcpyW\" ( _\n    ByVal lpString1 As Long, ByVal lpString2 As Long) As Long\nPrivate Declare Function LocalFree Lib \"kernel32.dll\" (ByVal hMem As Long) As Long\n\n#End If\n\n\n'BLOBHEADER\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\nPrivate Type BLOBHEADER\n    bType As Byte\n    bVersion As Byte\n    reserved As Integer\n    aiKeyAlg As Long\nEnd Type\n\n'\u30a4\u30f3\u30dd\u30fc\u30c8\u7528\u306e\u9375\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\n'\n'PUBLICKEYSTRUC BLOB\u30d8\u30c3\u30c0\u306b\u7d9a\u3044\u3066\u3001\u9375\u30b5\u30a4\u30ba\u3001\u9375\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3060\u304c\u3001\n'\u9375\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u9375\u30b5\u30a4\u30ba\u306b\u3088\u3063\u3066\u914d\u5217\u30b5\u30a4\u30ba\u304c\u5909\u308f\u308b\u305f\u3081\u3001\n'\u30ed\u30b8\u30c3\u30af\u4e2d\u3067\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u3088\u3046\u306b\u3057\u3001\u3053\u3053\u3067\u306f\u672a\u5b9a\u7fa9\u3068\u3059\u308b\nPrivate Type keyBlob\n    hdr As BLOBHEADER\n    keySize As Long\n'    keyData() As Byte\nEnd Type\n\n'\u9375\u9577\u5b9a\u6570\u5b9a\u7fa9\nPublic Enum AESKeyBits\n    AES_KEY128 = 128\n    AES_KEY192 = 192\n    AES_KEY256 = 256\nEnd Enum\n\n'\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u5b9a\u7fa9\nPrivate Const ERR_CRYPT_API = vbObjectError + 513   'CryptAPI\u30a8\u30e9\u30fc\nPrivate Const ERR_KEY_LENGTH = vbObjectError + 514  '\u9375\u9577\u30a8\u30e9\u30fc\nPrivate Const ERR_IV_LENGTH = vbObjectError + 515   'IV\u9577\u30a8\u30e9\u30fc\n\n'AES/CBC/PKCS5Padding\u5fa9\u53f7\u51e6\u7406\n'\n'\u5f15\u6570:\n'   [in]         key: \u9375\u30d0\u30a4\u30c8\u5217\n'   [in]          iv: IV\u30d0\u30a4\u30c8\u5217\n'   [in,out]    data: [in]\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217/[out]\u5fa9\u53f7\u30d0\u30a4\u30c8\u5217\n'   [in]     keyBits: \u9375\u30d3\u30c3\u30c8\u9577(\u30c7\u30d5\u30a9\u30eb\u30c8128bit)\n'\n'\u623b\u308a\u5024:\n'   \u306a\u3057\nPublic Sub decrypt(ByRef key() As Byte, ByRef iv() As Byte, ByRef data() As Byte, Optional ByVal keyBits As AESKeyBits = AES_KEY128)\n#If VBA7 And Win64 Then\n    Dim hProv As LongPtr   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As LongPtr    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#Else\n    Dim hProv As Long   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As Long    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#End If\n    Dim algid As Long   '\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n    On Error GoTo ErrorHandler\n\n    'AES\u306e\u9375\u9577\u304b\u3089\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0ID\u3092\u8a2d\u5b9a\n    Select Case keyBits\n        Case AES_KEY128\n            algid = CALG_AES_128\n        Case AES_KEY192\n            algid = CALG_AES_192\n        Case AES_KEY256\n            algid = CALG_AES_256\n    End Select\n\n    Dim keyLength As Long   '\u9375\u30d0\u30a4\u30c8\u9577\n    keyLength = keyBits / 8 '\u30d3\u30c3\u30c8->\u30d0\u30a4\u30c8\u5909\u63db\n\n    '\u9375\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(key) + 1 <> keyLength Then\n        Err.Raise ERR_KEY_LENGTH, \"decrypt()\", \"\u9375\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(key) + 1 & \"byte\"\n    End If\n\n    'IV\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(iv) + 1 <> 16 Then\n        Err.Raise ERR_IV_LENGTH, \"decrypt()\", \"IV\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(iv) + 1 & \"byte\"\n    End If\n\n    'CSP(Cryptographic Service Provider)\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n    If Not CBool(CryptAcquireContext(hProv, vbNullString, vbNullString, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptAcquireContext()\", Err.LastDllError\n    End If\n\n    Dim blob As keyBlob '\u9375\u30c7\u30fc\u30bf(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b)\n    Dim keyData() As Byte   '\u9375\u30c7\u30fc\u30bf(\u30d0\u30a4\u30c8\u5217)\n\n    '\u9375\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    'keyBlob\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u306b\u9375\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7121\u7406\u3084\u308a\u4f5c\u6210\u3059\u308b\n    blob.hdr.bType = PLAINTEXTKEYBLOB\n    blob.hdr.bVersion = CUR_BLOB_VERSION\n    blob.hdr.reserved = 0\n    blob.hdr.aiKeyAlg = algid\n    blob.keySize = keyLength\n    ReDim keyData(LenB(blob) + blob.keySize - 1)\n    Call CopyMemory(keyData(0), blob, LenB(blob))\n    Call CopyMemory(keyData(LenB(blob)), key(0), keyLength)\n\n    '\u9375\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n    If Not CBool(CryptImportKey(hProv, keyData(0), UBound(keyData) + 1, 0, 0, hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptImportKey()\", Err.LastDllError\n    End If\n\n    '\u30d1\u30c7\u30a3\u30f3\u30b0\u65b9\u5f0f\u306e\u8a2d\u5b9a(PKCS#5)\n    If Not CBool(CryptSetKeyParam(hKey, KP_PADDING, PKCS5_PADDING, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_PADDING\", Err.LastDllError\n    End If\n\n    'IV(Initialization Vector)\u306e\u8a2d\u5b9a\n    If Not CBool(CryptSetKeyParam(hKey, KP_IV, iv(0), 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_IV\", Err.LastDllError\n    End If\n\n    '\u6697\u53f7\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9)\n    If Not CBool(CryptSetKeyParam(hKey, KP_MODE, CRYPT_MODE_CBC, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_MODE\", Err.LastDllError\n    End If\n\n    '\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwDataLen As Long\n    dwDataLen = UBound(data) + 1\n\n    'CryptDecrypt\u306f\u3001\u5f15\u6570\u306e\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u306b\u5fa9\u53f7\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u623b\u3059\u4ed5\u69d8\u306e\u305f\u3081\n    '\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u7528\u3059\u308b\n    Dim pbData() As Byte\n    ReDim pbData(dwDataLen - 1)\n    Call CopyMemory(pbData(0), data(0), UBound(data) + 1)\n\n    '\u5fa9\u53f7\u51e6\u7406\n    If Not CBool(CryptDecrypt(hKey, 0, True, 0, pbData(0), dwDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDecrypt()\", Err.LastDllError\n    End If\n\n    ReDim Preserve pbData(dwDataLen - 1)\n    data = pbData\n\n    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptDestroyKey(hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDestroyKey()\", Err.LastDllError\n    End If\n\n    'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptReleaseContext(hProv, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptReleaseContext()\", Err.LastDllError\n    End If\n\n    Exit Sub\n\nErrorHandler:\n    Dim errNumber As Long\n    Dim errSource As String\n    Dim errMessage As String\n\n    errMessage = \"\"\n\n    If Err.Number <> 0 Then\n        If Err.Number = ERR_CRYPT_API Then\n            errNumber = Err.Description\n            errSource = Err.Source\n            errMessage = GetErrorText(Err.Description)\n        Else\n            errNumber = Err.Number\n            errSource = Err.Source\n            errMessage = Err.Description\n        End If\n    End If\n\n    Err.Clear\n\n    If Not hKey <> 0 Then\n        '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptDestroyKey(hKey)\n    End If\n\n    If Not hProv <> 0 Then\n        'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptReleaseContext(hProv, 0)\n    End If\n\n    On Error GoTo 0\n    If errMessage <> \"\" Then\n        Err.Raise Number:=errNumber, Source:=errSource, Description:=errMessage\n    End If\nEnd Sub\n\n'AES/CBC/PKCS5Padding\u6697\u53f7\u5316\u51e6\u7406\n'\n'\u5f15\u6570:\n'   [in]         key: \u9375\u30d0\u30a4\u30c8\u5217\n'   [in]          iv: IV\u30d0\u30a4\u30c8\u5217\n'   [in,out]    data: [in]\u5e73\u6587\u30d0\u30a4\u30c8\u5217/[out]\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\n'   [in]     keyBits: \u9375\u30d3\u30c3\u30c8\u9577(\u30c7\u30d5\u30a9\u30eb\u30c8128bit)\n'\n'\u623b\u308a\u5024:\n'   \u306a\u3057\nPublic Sub encrypt(ByRef key() As Byte, ByRef iv() As Byte, ByRef data() As Byte, Optional ByVal keyBits As AESKeyBits = AES_KEY128)\n#If VBA7 And Win64 Then\n    Dim hProv As LongPtr   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As LongPtr    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#Else\n    Dim hProv As Long   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As Long    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#End If\n    Dim algid As Long   '\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n    On Error GoTo ErrorHandler\n\n    'AES\u306e\u9375\u9577\u304b\u3089\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0ID\u3092\u8a2d\u5b9a\n    Select Case keyBits\n        Case AES_KEY128\n            algid = CALG_AES_128\n        Case AES_KEY192\n            algid = CALG_AES_192\n        Case AES_KEY256\n            algid = CALG_AES_256\n    End Select\n\n    Dim keyLength As Long   '\u9375\u30d0\u30a4\u30c8\u9577\n    keyLength = keyBits / 8 '\u30d3\u30c3\u30c8->\u30d0\u30a4\u30c8\u5909\u63db\n\n    '\u9375\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(key) + 1 <> keyLength Then\n        Err.Raise ERR_KEY_LENGTH, \"decrypt()\", \"\u9375\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(key) + 1 & \"byte\"\n    End If\n\n    'IV\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(iv) + 1 <> 16 Then\n        Err.Raise ERR_IV_LENGTH, \"decrypt()\", \"IV\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(iv) + 1 & \"byte\"\n    End If\n\n    'CSP(Cryptographic Service Provider)\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n    If Not CBool(CryptAcquireContext(hProv, vbNullString, vbNullString, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptAcquireContext()\", Err.LastDllError\n    End If\n\n    Dim blob As keyBlob '\u9375\u30c7\u30fc\u30bf(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b)\n    Dim keyData() As Byte   '\u9375\u30c7\u30fc\u30bf(\u30d0\u30a4\u30c8\u5217)\n\n    '\u9375\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    'keyBlob\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u306b\u9375\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7121\u7406\u3084\u308a\u4f5c\u6210\u3059\u308b\n    blob.hdr.bType = PLAINTEXTKEYBLOB\n    blob.hdr.bVersion = CUR_BLOB_VERSION\n    blob.hdr.reserved = 0\n    blob.hdr.aiKeyAlg = algid\n    blob.keySize = keyLength\n    ReDim keyData(LenB(blob) + blob.keySize - 1)\n    Call CopyMemory(keyData(0), blob, LenB(blob))\n    Call CopyMemory(keyData(LenB(blob)), key(0), keyLength)\n\n    '\u9375\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n    If Not CBool(CryptImportKey(hProv, keyData(0), UBound(keyData) + 1, 0, 0, hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptImportKey()\", Err.LastDllError\n    End If\n\n    '\u30d1\u30c7\u30a3\u30f3\u30b0\u65b9\u5f0f\u306e\u8a2d\u5b9a(PKCS#5)\n    If Not CBool(CryptSetKeyParam(hKey, KP_PADDING, PKCS5_PADDING, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_PADDING\", Err.LastDllError\n    End If\n\n    'IV(Initialization Vector)\u306e\u8a2d\u5b9a\n    If Not CBool(CryptSetKeyParam(hKey, KP_IV, iv(0), 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_IV\", Err.LastDllError\n    End If\n\n    '\u6697\u53f7\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9)\n    If Not CBool(CryptSetKeyParam(hKey, KP_MODE, CRYPT_MODE_CBC, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_MODE\", Err.LastDllError\n    End If\n\n    '\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwPlainDataLen As Long\n    dwPlainDataLen = UBound(data) + 1\n\n    '\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwCryptDataLen As Long\n    dwCryptDataLen = dwPlainDataLen\n\n    'CryptEncrypt\u306f\u3001\u5f15\u6570\u306e\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u306b\u6697\u53f7\u5316\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u623b\u3059\u4ed5\u69d8\u306e\u305f\u3081\n    '\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u7528\u3059\u308b\n    Dim pbData() As Byte\n    ReDim pbData(dwPlainDataLen - 1)\n    Call CopyMemory(pbData(0), data(0), dwPlainDataLen)\n\n    '\u6697\u53f7\u5316\u51e6\u7406\n    '\u6697\u53f7\u5316\u5f8c\u306e\u30d0\u30a4\u30c8\u5217\u9577\u3092\u3042\u3089\u304b\u3058\u3081\u554f\u3044\u5408\u308f\u305b\u3066\u30d0\u30c3\u30d5\u30a1\u3092\u62e1\u5f35\u3057\u3066\u304a\u304f\n    If Not CBool(CryptEncrypt(hKey, 0, True, 0, ByVal 0&, dwCryptDataLen, dwPlainDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptEncrypt()\", Err.LastDllError\n    End If\n    If dwCryptDataLen > dwPlainDataLen Then\n        ReDim Preserve pbData(dwCryptDataLen - 1)\n    End If\n    If Not CBool(CryptEncrypt(hKey, 0, True, 0, pbData(0), dwPlainDataLen, dwCryptDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptEncrypt()\", Err.LastDllError\n    End If\n\n    data = LeftB(pbData, dwCryptDataLen)\n\n    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptDestroyKey(hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDestroyKey()\", Err.LastDllError\n    End If\n\n    'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptReleaseContext(hProv, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptReleaseContext()\", Err.LastDllError\n    End If\n\n    Exit Sub\n\nErrorHandler:\n    Dim errNumber As Long\n    Dim errSource As String\n    Dim errMessage As String\n\n    errMessage = \"\"\n\n    If Err.Number <> 0 Then\n        If Err.Number = ERR_CRYPT_API Then\n            errNumber = Err.Description\n            errSource = Err.Source\n            errMessage = GetErrorText(Err.Description)\n        Else\n            errNumber = Err.Number\n            errSource = Err.Source\n            errMessage = Err.Description\n        End If\n    End If\n\n    Err.Clear\n\n    If Not hKey <> 0 Then\n        '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptDestroyKey(hKey)\n    End If\n\n    If Not hProv <> 0 Then\n        'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptReleaseContext(hProv, 0)\n    End If\n\n    On Error GoTo 0\n    If errMessage <> \"\" Then\n        Err.Raise Number:=errNumber, Source:=errSource, Description:=errMessage\n    End If\nEnd Sub\n\n'MAKELANGID\u30de\u30af\u30ed\u306e\u30e1\u30bd\u30c3\u30c9\u5316\u306b\u3088\u308b\u5b9f\u88c5\nPrivate Function MAKELANGID(ByVal p As Long, ByVal s As Long) As Long\n    MAKELANGID = (CLng(CInt(s)) * 1024) Or CLng(CInt(p))\nEnd Function\n\n'\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u304b\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\nPrivate Function GetErrorText(ByVal ErrorCode As Long) As String\n#If VBA7 And Win64 Then\n    Dim lpBuffer As LongPtr\n#Else\n    Dim lpBuffer As Long\n#End If\n    Dim messageLength As Long\n\n    messageLength = FormatMessage( _\n        FORMAT_MESSAGE_ALLOCATE_BUFFER Or FORMAT_MESSAGE_FROM_SYSTEM Or FORMAT_MESSAGE_IGNORE_INSERTS, _\n        0, ErrorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), _\n        lpBuffer, 0, 0)\n\n    If messageLength = 0 Then\n        GetErrorText = \"\"\n    Else\n        GetErrorText = Space$(messageLength)\n        Call lstrcpy(ByVal StrPtr(GetErrorText), ByVal lpBuffer)\n        Call LocalFree(lpBuffer)\n    End If\nEnd Function\n\n\n\u7d9a\u3044\u3066\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9\u3092\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5b9f\u88c5\u3002\n\u9375\u3084IV\u306e\u5b9a\u7fa9\u6642\u3001\u6697\u53f7\u30fb\u5fa9\u53f7\u6587\u5b57\u5217\u306e\u51fa\u529b\u6642\u306b\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n\nBase64\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\n'Base64\u30a8\u30f3\u30b3\u30fc\u30c0/\u30c7\u30b3\u30fc\u30c0\n\nOption Explicit\n\n'Base64\u6587\u5b57\u5217\u3092\u30d0\u30a4\u30c8\u5217\u306b\u30c7\u30b3\u30fc\u30c9\u3059\u308b\nPublic Function decode(ByVal strData As String) As Byte()\n    Dim objBase64 As Object\n\n    Set objBase64 = CreateObject(\"MSXML2.DOMDocument\").createElement(\"b64\")\n    objBase64.DataType = \"bin.base64\"\n    objBase64.Text = strData\n    decode = objBase64.nodeTypedValue\n\n    Set objBase64 = Nothing\nEnd Function\n\n'\u30d0\u30a4\u30c8\u5217\u3092Base64\u6587\u5b57\u5217\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nPublic Function encode(ByRef byteData() As Byte) As String\n    Dim objBase64 As Object\n\n    Set objBase64 = CreateObject(\"MSXML2.DOMDocument\").createElement(\"b64\")\n    objBase64.DataType = \"bin.base64\"\n    objBase64.nodeTypedValue = byteData\n    encode = objBase64.Text\n\n    Set objBase64 = Nothing\nEnd Function\n\n\n\nStringUtility\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\n'\u6587\u5b57\u5217<->\u30d0\u30a4\u30c8\u5217\u5909\u63db\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n\nOption Explicit\n\nPrivate Const adTypeBinary As Integer = 1\nPrivate Const adTypeText As Integer = 2\nPrivate Const adStateOpen = 1\n\n'\u30d0\u30a4\u30c8\u5217\u3092Shift-JIS\u3067\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\nPublic Function byteToString(ByRef byteData() As Byte) As String\n    Dim objStream As Object\n\n    On Error GoTo ErrorHandler\n    Set objStream = CreateObject(\"ADODB.Stream\")\n\n    objStream.Open\n    objStream.Type = adTypeBinary\n    objStream.Write byteData\n\n    objStream.Position = 0\n    objStream.Type = adTypeText\n    objStream.Charset = \"shift-jis\"\n\n    byteToString = objStream.ReadText\n    Exit Function\n\nErrorHandler:\n    If Not objStream Is Nothing Then\n        If (objStream.State And adStateOpen) = adStateOpen Then\n            objStream.Close\n        End If\n    End If\n    Set objStream = Nothing\n    MsgBox \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9:\" & Err.Number & vbCrLf & Err.Description\nEnd Function\n\n'\u6587\u5b57\u5217\u3092Shift-JIS\u3067\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\nPublic Function stringToByte(ByVal strData As String) As Byte()\n    Dim objStream As Object\n\n    On Error GoTo ErrorHandler\n    Set objStream = CreateObject(\"ADODB.Stream\")\n\n    objStream.Open\n    objStream.Type = adTypeText\n    objStream.Charset = \"shift-jis\"\n    objStream.WriteText strData\n\n    objStream.Position = 0\n    objStream.Type = adTypeBinary\n\n    stringToByte = objStream.Read\n    Exit Function\n\nErrorHandler:\n    If Not objStream Is Nothing Then\n        If (objStream.State And adStateOpen) = adStateOpen Then\n            objStream.Close\n        End If\n    End If\n    Set objStream = Nothing\n    MsgBox \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9:\" & Err.Number & vbCrLf & Err.Description\nEnd Function\n\n\n\u5f8c\u306f\u547c\u3073\u51fa\u3057\u90e8\u3092\u4efb\u610f\u306e\u30b7\u30fc\u30c8\u306b\u5b9a\u7fa9\u3002\n\nSheet1\nPublic Sub main()\n    Dim key() As Byte\n    Dim iv() As Byte\n    Dim data() As Byte\n    Dim objCipher As Cipher\n\n    key = StringUtility.stringToByte(\"12345678abcdefgh\")\n    iv = StringUtility.stringToByte(\"hgfedcba87654321\")\n    data = StringUtility.stringToByte(\"\u6697\u53f7\u5316\u3057\u305f\u3044\u6587\u5b57\u5217\u3092\u3053\u3053\u306b\u8a2d\u5b9a\")\n\n    On Error GoTo ErrorHandler\n    Set objCipher = New Cipher\n\n    Call objCipher.encrypt(key, iv, data)\n    Debug.Print Base64.encode(data)\n\n    Call objCipher.decrypt(key, iv, data)\n    Debug.Print StringUtility.byteToString(data)\n\n    Exit Sub\n\nErrorHandler:\n    Dim message As String\n\n    message = \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9: &H\" & Hex(Err.Number) & vbCrLf & _\n        \"\u30bd\u30fc\u30b9: \" & Err.Source & vbCrLf & Err.Description\n        MsgBox message, vbCritical\nEnd Sub\n\n\n\n## \u6982\u8981\n\nWindows\u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308bCryptAPI\u3092\u5229\u7528\u3057\u3066AES 128bit\u306b\u3088\u308b\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\u8a66\u3057\u3066\u3044\u306a\u3044\u304c\u3001192bit\u3001256bit\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3064\u3082\u308a\u3002\u4f8b\u306b\u3088\u3063\u3066x64\u7248\u306eExcel\u306b\u3082\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u305f\u3002\nCryptAPI\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306fAES\u306f\u672a\u30b5\u30dd\u30fc\u30c8\u306e\u5834\u5408\u304c\u3042\u308b\u3088\u3046\u3060\u304c\u3001Windows XP\u4ee5\u964d\u306a\u3089AES\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n\u306a\u304a\u3001Windows Vista\u4ee5\u964d\u306a\u3089\u3001CNG(Cryptography API: Next Generation)\u3082\u5229\u7528\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\n## \u53c2\u8003\n\nCryptAPI\u306b\u3064\u3044\u3066\u306f\u3001\u30c8\u30e9\u30b9\u30c8\u30fb\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30fb\u30b7\u30b9\u30c6\u30e0\u306e[\u6697\u53f7\u5316\u3068\u96fb\u5b50\u7f72\u540d\u30a2\u30d7\u30ea\u306e\u89e3\u8aac](http://www.trustss.co.jp/smnCrypt000.html)\u304c\u8a73\u3057\u3044\u3002\n\u89e3\u8aac\u306bCryptCreateHash\u3067\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u3092\u9375\u306b\u4f7f\u7528\u3059\u308b\u3001\u3068\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u3042\u304f\u307e\u3067\u30cf\u30c3\u30b7\u30e5\u751f\u6210\u95a2\u6570\u3092\u7528\u3044\u3066\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u9375\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u3067\u3042\u308a\u3001\u7279\u5b9a\u6587\u5b57\u5217\u3092\u9375\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u30cf\u30c3\u30b7\u30e5\u3067\u306f\u306a\u304fCryptImportKey\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3002\n(\u3082\u3061\u308d\u3093\u3001\u6697\u53f7\u5316\u5f37\u5ea6\u306e\u70b9\u3067\u306f\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7528\u3044\u305f\u65b9\u304c\u3088\u308a\u826f\u3044\u3068\u306f\u601d\u3046\u304c\u3002)\n\u306a\u304a\u3001[CryptImportKey](http://msdn.microsoft.com/en-us/library/windows/desktop/aa380207%28v=vs.85%29.aspx)\u306f\u3001PUBLICKEYSTRUC BLOB\u306b\u7d9a\u3044\u3066\u6697\u53f7\u5316\u9375\u30c7\u30fc\u30bf\u3092\u3082\u3064\u30d0\u30a4\u30c8\u578b\u306e\u914d\u5217\u3092\u5f15\u6570\u306b\u53d6\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u3042\u3089\u304b\u3058\u3081\u751f\u6210\u3057\u3066\u304a\u304f\u3002\nMSDN\u306e\u8aac\u660e\u306b\u306fCryptExportKey\u3067\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u9375\u3068\u3042\u308b\u304c\u3001\u5f62\u5f0f\u3060\u3051\u5408\u308f\u305b\u3066\u81ea\u5206\u3067\u751f\u6210\u3057\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u3002\n\n## \u30b3\u30fc\u30c9\n\nAES\u306b\u3088\u308b\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u306e\u30e1\u30a4\u30f3\u3068\u306a\u308b\u30af\u30e9\u30b9\u3092\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5b9a\u7fa9\u3002\n\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3057\u305f\u7406\u7531\u306f\u7279\u306b\u306a\u3057\u3002\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3082\u69cb\u308f\u306a\u3044\u3002\n\n```vbnet:Cipher\u30af\u30e9\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\n'CryptAPI\u3092\u5229\u7528\u3057\u305fAES\u6697\u53f7\u5316/\u5fa9\u53f7\u30af\u30e9\u30b9\n\nOption Explicit\n\n'CryptAPI\u7528\u5b9a\u6570\u5b9a\u7fa9\nPrivate Const CRYPT_VERIFYCONTEXT As Long = &HF0000000\nPrivate Const ALG_TYPE_BLOCK As Long = 1536\nPrivate Const ALG_CLASS_DATA_ENCRYPT As Long = 24576\nPrivate Const ALG_SID_AES_128 As Long = 14\nPrivate Const ALG_SID_AES_192 As Long = 15\nPrivate Const ALG_SID_AES_256 As Long = 16\nPrivate Const PROV_RSA_AES As Long = 24\nPrivate Const CALG_AES_128 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_128\nPrivate Const CALG_AES_192 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_192\nPrivate Const CALG_AES_256 As Long = ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_AES_256\nPrivate Const KP_IV As Long = 1\nPrivate Const KP_PADDING As Long = 3\nPrivate Const KP_MODE As Long = 4\nPrivate Const PKCS5_PADDING As Long = 1\nPrivate Const CRYPT_MODE_CBC As Long = 1\nPrivate Const PLAINTEXTKEYBLOB As Long = 8\nPrivate Const CUR_BLOB_VERSION As Long = 2\n\n'WindowsAPI\u7528\u5b9a\u6570\u5b9a\u7fa9\nPrivate Const FORMAT_MESSAGE_ALLOCATE_BUFFER As Long = &H100\nPrivate Const FORMAT_MESSAGE_IGNORE_INSERTS As Long = &H200\nPrivate Const FORMAT_MESSAGE_FROM_STRING As Long = &H400\nPrivate Const FORMAT_MESSAGE_FROM_HMODULE As Long = &H800\nPrivate Const FORMAT_MESSAGE_FROM_SYSTEM As Long = &H1000\nPrivate Const FORMAT_MESSAGE_ARGUMENT_ARRAY As Long = 8192\nPrivate Const FORMAT_MESSAGE_MAX_WIDTH_MASK As Long = 255\nPrivate Const LANG_NEUTRAL As Long = &H0\nPrivate Const SUBLANG_DEFAULT As Long = &H1\n\n\n'CryptoAPI\u5b9a\u7fa9\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" ( _\n    ByRef phProv As LongPtr, ByVal pszContainer As String, ByVal pszProvider As String, _\n    ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptReleaseContext Lib \"advapi32.dll\" ( _\n    ByVal hProv As LongPtr, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptImportKey Lib \"advapi32.dll\" ( _\n    ByVal hProv As LongPtr, ByRef pbData As Any, ByVal dwDataLen As Long, _\n    ByVal hPubKey As Long, ByVal dwFlags As Long, ByRef phKey As LongPtr) As Long\nPrivate Declare PtrSafe Function CryptDestroyKey Lib \"advapi32.dll\" (ByVal hKey As LongPtr) As Long\nPrivate Declare PtrSafe Function CryptSetKeyParam Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal dwParam As Long, ByRef pbData As Any, ByVal dwFlags As Long) As Long\nPrivate Declare PtrSafe Function CryptDecrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long) As Long\nPrivate Declare PtrSafe Function CryptEncrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As LongPtr, ByVal hHash As LongPtr, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long, _\n    ByVal dwBufLen As Long) As Long\n\n#Else\n\nPrivate Declare Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" ( _\n    ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, _\n    ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptReleaseContext Lib \"advapi32.dll\" ( _\n    ByVal hProv As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptImportKey Lib \"advapi32.dll\" ( _\n    ByVal hProv As Long, ByRef pbData As Any, ByVal dwDataLen As Long, _\n    ByVal hPubKey As Long, ByVal dwFlags As Long, ByRef phKey As Long) As Long\nPrivate Declare Function CryptDestroyKey Lib \"advapi32.dll\" (ByVal hKey As Long) As Long\nPrivate Declare Function CryptSetKeyParam Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal dwParam As Long, ByRef pbData As Any, _\n    ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptDecrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long) As Long\nPrivate Declare Function CryptEncrypt Lib \"advapi32.dll\" ( _\n    ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, _\n    ByVal dwFlags As Long, ByRef pbData As Any, ByRef pdwDataLen As Long, _\n    ByVal dwBufLen As Long) As Long\n\n#End If\n\n\n'WindowsAPI\u5b9a\u7fa9\n#If VBA7 And Win64 Then\n\nPrivate Declare PtrSafe Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)\nPrivate Declare PtrSafe Function FormatMessage Lib \"kernel32.dll\" Alias \"FormatMessageW\" ( _\n    ByVal dwFlags As Long, ByRef lpSource As Any, ByVal dwMessageId As Long, _\n    ByVal dwLanguageId As Long, ByRef lpBuffer As LongPtr, ByVal nSize As Long, _\n    ByRef Arguments As Any) As Long\nPrivate Declare PtrSafe Function lstrcpy Lib \"kernel32.dll\" Alias \"lstrcpyW\" ( _\n    ByVal lpString1 As LongPtr, ByVal lpString2 As LongPtr) As Long\nPrivate Declare PtrSafe Function LocalFree Lib \"kernel32.dll\" (ByVal hMem As LongPtr) As Long\n\n#Else\n\nPrivate Declare Sub CopyMemory Lib \"kernel32.dll\" Alias \"RtlMoveMemory\" ( _\n    ByRef Destination As Any, ByRef Source As Any, ByVal Length As Long)\nPrivate Declare Function FormatMessage Lib \"kernel32.dll\" Alias \"FormatMessageW\" ( _\n    ByVal dwFlags As Long, ByRef lpSource As Any, ByVal dwMessageId As Long, _\n    ByVal dwLanguageId As Long, ByRef lpBuffer As Long, ByVal nSize As Long, _\n    ByRef Arguments As Any) As Long\nPrivate Declare Function lstrcpy Lib \"kernel32.dll\" Alias \"lstrcpyW\" ( _\n    ByVal lpString1 As Long, ByVal lpString2 As Long) As Long\nPrivate Declare Function LocalFree Lib \"kernel32.dll\" (ByVal hMem As Long) As Long\n\n#End If\n\n\n'BLOBHEADER\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\nPrivate Type BLOBHEADER\n    bType As Byte\n    bVersion As Byte\n    reserved As Integer\n    aiKeyAlg As Long\nEnd Type\n\n'\u30a4\u30f3\u30dd\u30fc\u30c8\u7528\u306e\u9375\u30c7\u30fc\u30bf\u306e\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\n'\n'PUBLICKEYSTRUC BLOB\u30d8\u30c3\u30c0\u306b\u7d9a\u3044\u3066\u3001\u9375\u30b5\u30a4\u30ba\u3001\u9375\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3060\u304c\u3001\n'\u9375\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u9375\u30b5\u30a4\u30ba\u306b\u3088\u3063\u3066\u914d\u5217\u30b5\u30a4\u30ba\u304c\u5909\u308f\u308b\u305f\u3081\u3001\n'\u30ed\u30b8\u30c3\u30af\u4e2d\u3067\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3059\u308b\u3088\u3046\u306b\u3057\u3001\u3053\u3053\u3067\u306f\u672a\u5b9a\u7fa9\u3068\u3059\u308b\nPrivate Type keyBlob\n    hdr As BLOBHEADER\n    keySize As Long\n'    keyData() As Byte\nEnd Type\n\n'\u9375\u9577\u5b9a\u6570\u5b9a\u7fa9\nPublic Enum AESKeyBits\n    AES_KEY128 = 128\n    AES_KEY192 = 192\n    AES_KEY256 = 256\nEnd Enum\n\n'\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u5b9a\u7fa9\nPrivate Const ERR_CRYPT_API = vbObjectError + 513   'CryptAPI\u30a8\u30e9\u30fc\nPrivate Const ERR_KEY_LENGTH = vbObjectError + 514  '\u9375\u9577\u30a8\u30e9\u30fc\nPrivate Const ERR_IV_LENGTH = vbObjectError + 515   'IV\u9577\u30a8\u30e9\u30fc\n\n'AES/CBC/PKCS5Padding\u5fa9\u53f7\u51e6\u7406\n'\n'\u5f15\u6570:\n'   [in]         key: \u9375\u30d0\u30a4\u30c8\u5217\n'   [in]          iv: IV\u30d0\u30a4\u30c8\u5217\n'   [in,out]    data: [in]\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217/[out]\u5fa9\u53f7\u30d0\u30a4\u30c8\u5217\n'   [in]     keyBits: \u9375\u30d3\u30c3\u30c8\u9577(\u30c7\u30d5\u30a9\u30eb\u30c8128bit)\n'\n'\u623b\u308a\u5024:\n'   \u306a\u3057\nPublic Sub decrypt(ByRef key() As Byte, ByRef iv() As Byte, ByRef data() As Byte, Optional ByVal keyBits As AESKeyBits = AES_KEY128)\n#If VBA7 And Win64 Then\n    Dim hProv As LongPtr   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As LongPtr    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#Else\n    Dim hProv As Long   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As Long    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#End If\n    Dim algid As Long   '\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n    \n    On Error GoTo ErrorHandler\n    \n    'AES\u306e\u9375\u9577\u304b\u3089\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0ID\u3092\u8a2d\u5b9a\n    Select Case keyBits\n        Case AES_KEY128\n            algid = CALG_AES_128\n        Case AES_KEY192\n            algid = CALG_AES_192\n        Case AES_KEY256\n            algid = CALG_AES_256\n    End Select\n    \n    Dim keyLength As Long   '\u9375\u30d0\u30a4\u30c8\u9577\n    keyLength = keyBits / 8 '\u30d3\u30c3\u30c8->\u30d0\u30a4\u30c8\u5909\u63db\n    \n    '\u9375\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(key) + 1 <> keyLength Then\n        Err.Raise ERR_KEY_LENGTH, \"decrypt()\", \"\u9375\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(key) + 1 & \"byte\"\n    End If\n    \n    'IV\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(iv) + 1 <> 16 Then\n        Err.Raise ERR_IV_LENGTH, \"decrypt()\", \"IV\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(iv) + 1 & \"byte\"\n    End If\n    \n    'CSP(Cryptographic Service Provider)\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n    If Not CBool(CryptAcquireContext(hProv, vbNullString, vbNullString, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptAcquireContext()\", Err.LastDllError\n    End If\n    \n    Dim blob As keyBlob '\u9375\u30c7\u30fc\u30bf(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b)\n    Dim keyData() As Byte   '\u9375\u30c7\u30fc\u30bf(\u30d0\u30a4\u30c8\u5217)\n    \n    '\u9375\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    'keyBlob\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u306b\u9375\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7121\u7406\u3084\u308a\u4f5c\u6210\u3059\u308b\n    blob.hdr.bType = PLAINTEXTKEYBLOB\n    blob.hdr.bVersion = CUR_BLOB_VERSION\n    blob.hdr.reserved = 0\n    blob.hdr.aiKeyAlg = algid\n    blob.keySize = keyLength\n    ReDim keyData(LenB(blob) + blob.keySize - 1)\n    Call CopyMemory(keyData(0), blob, LenB(blob))\n    Call CopyMemory(keyData(LenB(blob)), key(0), keyLength)\n    \n    '\u9375\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n    If Not CBool(CryptImportKey(hProv, keyData(0), UBound(keyData) + 1, 0, 0, hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptImportKey()\", Err.LastDllError\n    End If\n    \n    '\u30d1\u30c7\u30a3\u30f3\u30b0\u65b9\u5f0f\u306e\u8a2d\u5b9a(PKCS#5)\n    If Not CBool(CryptSetKeyParam(hKey, KP_PADDING, PKCS5_PADDING, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_PADDING\", Err.LastDllError\n    End If\n    \n    'IV(Initialization Vector)\u306e\u8a2d\u5b9a\n    If Not CBool(CryptSetKeyParam(hKey, KP_IV, iv(0), 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_IV\", Err.LastDllError\n    End If\n    \n    '\u6697\u53f7\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9)\n    If Not CBool(CryptSetKeyParam(hKey, KP_MODE, CRYPT_MODE_CBC, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_MODE\", Err.LastDllError\n    End If\n    \n    '\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwDataLen As Long\n    dwDataLen = UBound(data) + 1\n    \n    'CryptDecrypt\u306f\u3001\u5f15\u6570\u306e\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u306b\u5fa9\u53f7\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u623b\u3059\u4ed5\u69d8\u306e\u305f\u3081\n    '\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u7528\u3059\u308b\n    Dim pbData() As Byte\n    ReDim pbData(dwDataLen - 1)\n    Call CopyMemory(pbData(0), data(0), UBound(data) + 1)\n    \n    '\u5fa9\u53f7\u51e6\u7406\n    If Not CBool(CryptDecrypt(hKey, 0, True, 0, pbData(0), dwDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDecrypt()\", Err.LastDllError\n    End If\n    \n    ReDim Preserve pbData(dwDataLen - 1)\n    data = pbData\n    \n    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptDestroyKey(hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDestroyKey()\", Err.LastDllError\n    End If\n    \n    'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptReleaseContext(hProv, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptReleaseContext()\", Err.LastDllError\n    End If\n    \n    Exit Sub\n\nErrorHandler:\n    Dim errNumber As Long\n    Dim errSource As String\n    Dim errMessage As String\n    \n    errMessage = \"\"\n\n    If Err.Number <> 0 Then\n        If Err.Number = ERR_CRYPT_API Then\n            errNumber = Err.Description\n            errSource = Err.Source\n            errMessage = GetErrorText(Err.Description)\n        Else\n            errNumber = Err.Number\n            errSource = Err.Source\n            errMessage = Err.Description\n        End If\n    End If\n    \n    Err.Clear\n    \n    If Not hKey <> 0 Then\n        '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptDestroyKey(hKey)\n    End If\n    \n    If Not hProv <> 0 Then\n        'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptReleaseContext(hProv, 0)\n    End If\n    \n    On Error GoTo 0\n    If errMessage <> \"\" Then\n        Err.Raise Number:=errNumber, Source:=errSource, Description:=errMessage\n    End If\nEnd Sub\n\n'AES/CBC/PKCS5Padding\u6697\u53f7\u5316\u51e6\u7406\n'\n'\u5f15\u6570:\n'   [in]         key: \u9375\u30d0\u30a4\u30c8\u5217\n'   [in]          iv: IV\u30d0\u30a4\u30c8\u5217\n'   [in,out]    data: [in]\u5e73\u6587\u30d0\u30a4\u30c8\u5217/[out]\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\n'   [in]     keyBits: \u9375\u30d3\u30c3\u30c8\u9577(\u30c7\u30d5\u30a9\u30eb\u30c8128bit)\n'\n'\u623b\u308a\u5024:\n'   \u306a\u3057\nPublic Sub encrypt(ByRef key() As Byte, ByRef iv() As Byte, ByRef data() As Byte, Optional ByVal keyBits As AESKeyBits = AES_KEY128)\n#If VBA7 And Win64 Then\n    Dim hProv As LongPtr   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As LongPtr    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#Else\n    Dim hProv As Long   'CSP\u30cf\u30f3\u30c9\u30e9\n    Dim hKey As Long    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\n#End If\n    Dim algid As Long   '\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n    \n    On Error GoTo ErrorHandler\n    \n    'AES\u306e\u9375\u9577\u304b\u3089\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0ID\u3092\u8a2d\u5b9a\n    Select Case keyBits\n        Case AES_KEY128\n            algid = CALG_AES_128\n        Case AES_KEY192\n            algid = CALG_AES_192\n        Case AES_KEY256\n            algid = CALG_AES_256\n    End Select\n    \n    Dim keyLength As Long   '\u9375\u30d0\u30a4\u30c8\u9577\n    keyLength = keyBits / 8 '\u30d3\u30c3\u30c8->\u30d0\u30a4\u30c8\u5909\u63db\n    \n    '\u9375\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(key) + 1 <> keyLength Then\n        Err.Raise ERR_KEY_LENGTH, \"decrypt()\", \"\u9375\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(key) + 1 & \"byte\"\n    End If\n    \n    'IV\u9577\u306e\u30c1\u30a7\u30c3\u30af\n    If UBound(iv) + 1 <> 16 Then\n        Err.Raise ERR_IV_LENGTH, \"decrypt()\", \"IV\u9577\u304c\u4e0d\u6b63\u3067\u3059: \" & UBound(iv) + 1 & \"byte\"\n    End If\n    \n    'CSP(Cryptographic Service Provider)\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n    If Not CBool(CryptAcquireContext(hProv, vbNullString, vbNullString, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptAcquireContext()\", Err.LastDllError\n    End If\n    \n    Dim blob As keyBlob '\u9375\u30c7\u30fc\u30bf(\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b)\n    Dim keyData() As Byte   '\u9375\u30c7\u30fc\u30bf(\u30d0\u30a4\u30c8\u5217)\n    \n    '\u9375\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    'keyBlob\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u306b\u9375\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u7121\u7406\u3084\u308a\u4f5c\u6210\u3059\u308b\n    blob.hdr.bType = PLAINTEXTKEYBLOB\n    blob.hdr.bVersion = CUR_BLOB_VERSION\n    blob.hdr.reserved = 0\n    blob.hdr.aiKeyAlg = algid\n    blob.keySize = keyLength\n    ReDim keyData(LenB(blob) + blob.keySize - 1)\n    Call CopyMemory(keyData(0), blob, LenB(blob))\n    Call CopyMemory(keyData(LenB(blob)), key(0), keyLength)\n    \n    '\u9375\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n    If Not CBool(CryptImportKey(hProv, keyData(0), UBound(keyData) + 1, 0, 0, hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptImportKey()\", Err.LastDllError\n    End If\n    \n    '\u30d1\u30c7\u30a3\u30f3\u30b0\u65b9\u5f0f\u306e\u8a2d\u5b9a(PKCS#5)\n    If Not CBool(CryptSetKeyParam(hKey, KP_PADDING, PKCS5_PADDING, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_PADDING\", Err.LastDllError\n    End If\n    \n    'IV(Initialization Vector)\u306e\u8a2d\u5b9a\n    If Not CBool(CryptSetKeyParam(hKey, KP_IV, iv(0), 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_IV\", Err.LastDllError\n    End If\n    \n    '\u6697\u53f7\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9)\n    If Not CBool(CryptSetKeyParam(hKey, KP_MODE, CRYPT_MODE_CBC, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptSetKeyParam():KP_MODE\", Err.LastDllError\n    End If\n    \n    '\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwPlainDataLen As Long\n    dwPlainDataLen = UBound(data) + 1\n    \n    '\u6697\u53f7\u5316\u30d0\u30a4\u30c8\u5217\u9577\n    Dim dwCryptDataLen As Long\n    dwCryptDataLen = dwPlainDataLen\n    \n    'CryptEncrypt\u306f\u3001\u5f15\u6570\u306e\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u306b\u6697\u53f7\u5316\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u623b\u3059\u4ed5\u69d8\u306e\u305f\u3081\n    '\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306e\u5e73\u6587\u30d0\u30a4\u30c8\u5217\u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3066\u4f7f\u7528\u3059\u308b\n    Dim pbData() As Byte\n    ReDim pbData(dwPlainDataLen - 1)\n    Call CopyMemory(pbData(0), data(0), dwPlainDataLen)\n    \n    '\u6697\u53f7\u5316\u51e6\u7406\n    '\u6697\u53f7\u5316\u5f8c\u306e\u30d0\u30a4\u30c8\u5217\u9577\u3092\u3042\u3089\u304b\u3058\u3081\u554f\u3044\u5408\u308f\u305b\u3066\u30d0\u30c3\u30d5\u30a1\u3092\u62e1\u5f35\u3057\u3066\u304a\u304f\n    If Not CBool(CryptEncrypt(hKey, 0, True, 0, ByVal 0&, dwCryptDataLen, dwPlainDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptEncrypt()\", Err.LastDllError\n    End If\n    If dwCryptDataLen > dwPlainDataLen Then\n        ReDim Preserve pbData(dwCryptDataLen - 1)\n    End If\n    If Not CBool(CryptEncrypt(hKey, 0, True, 0, pbData(0), dwPlainDataLen, dwCryptDataLen)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptEncrypt()\", Err.LastDllError\n    End If\n    \n    data = LeftB(pbData, dwCryptDataLen)\n    \n    '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptDestroyKey(hKey)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptDestroyKey()\", Err.LastDllError\n    End If\n    \n    'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n    If Not CBool(CryptReleaseContext(hProv, 0)) Then\n        Err.Raise ERR_CRYPT_API, \"decrypt()->CryptReleaseContext()\", Err.LastDllError\n    End If\n    \n    Exit Sub\n\nErrorHandler:\n    Dim errNumber As Long\n    Dim errSource As String\n    Dim errMessage As String\n    \n    errMessage = \"\"\n\n    If Err.Number <> 0 Then\n        If Err.Number = ERR_CRYPT_API Then\n            errNumber = Err.Description\n            errSource = Err.Source\n            errMessage = GetErrorText(Err.Description)\n        Else\n            errNumber = Err.Number\n            errSource = Err.Source\n            errMessage = Err.Description\n        End If\n    End If\n    \n    Err.Clear\n    \n    If Not hKey <> 0 Then\n        '\u6697\u53f7\u9375\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptDestroyKey(hKey)\n    End If\n    \n    If Not hProv <> 0 Then\n        'CSP\u30cf\u30f3\u30c9\u30e9\u306e\u958b\u653e\n        Call CryptReleaseContext(hProv, 0)\n    End If\n    \n    On Error GoTo 0\n    If errMessage <> \"\" Then\n        Err.Raise Number:=errNumber, Source:=errSource, Description:=errMessage\n    End If\nEnd Sub\n\n'MAKELANGID\u30de\u30af\u30ed\u306e\u30e1\u30bd\u30c3\u30c9\u5316\u306b\u3088\u308b\u5b9f\u88c5\nPrivate Function MAKELANGID(ByVal p As Long, ByVal s As Long) As Long\n    MAKELANGID = (CLng(CInt(s)) * 1024) Or CLng(CInt(p))\nEnd Function\n\n'\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u304b\u3089\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\nPrivate Function GetErrorText(ByVal ErrorCode As Long) As String\n#If VBA7 And Win64 Then\n    Dim lpBuffer As LongPtr\n#Else\n    Dim lpBuffer As Long\n#End If\n    Dim messageLength As Long\n\n    messageLength = FormatMessage( _\n        FORMAT_MESSAGE_ALLOCATE_BUFFER Or FORMAT_MESSAGE_FROM_SYSTEM Or FORMAT_MESSAGE_IGNORE_INSERTS, _\n        0, ErrorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), _\n        lpBuffer, 0, 0)\n    \n    If messageLength = 0 Then\n        GetErrorText = \"\"\n    Else\n        GetErrorText = Space$(messageLength)\n        Call lstrcpy(ByVal StrPtr(GetErrorText), ByVal lpBuffer)\n        Call LocalFree(lpBuffer)\n    End If\nEnd Function\n```\n\n\u7d9a\u3044\u3066\u6c4e\u7528\u30e1\u30bd\u30c3\u30c9\u3092\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5b9f\u88c5\u3002\n\u9375\u3084IV\u306e\u5b9a\u7fa9\u6642\u3001\u6697\u53f7\u30fb\u5fa9\u53f7\u6587\u5b57\u5217\u306e\u51fa\u529b\u6642\u306b\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3002\n\n```vbnet:Base64\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\n'Base64\u30a8\u30f3\u30b3\u30fc\u30c0/\u30c7\u30b3\u30fc\u30c0\n\nOption Explicit\n\n'Base64\u6587\u5b57\u5217\u3092\u30d0\u30a4\u30c8\u5217\u306b\u30c7\u30b3\u30fc\u30c9\u3059\u308b\nPublic Function decode(ByVal strData As String) As Byte()\n    Dim objBase64 As Object\n    \n    Set objBase64 = CreateObject(\"MSXML2.DOMDocument\").createElement(\"b64\")\n    objBase64.DataType = \"bin.base64\"\n    objBase64.Text = strData\n    decode = objBase64.nodeTypedValue\n    \n    Set objBase64 = Nothing\nEnd Function\n\n'\u30d0\u30a4\u30c8\u5217\u3092Base64\u6587\u5b57\u5217\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nPublic Function encode(ByRef byteData() As Byte) As String\n    Dim objBase64 As Object\n    \n    Set objBase64 = CreateObject(\"MSXML2.DOMDocument\").createElement(\"b64\")\n    objBase64.DataType = \"bin.base64\"\n    objBase64.nodeTypedValue = byteData\n    encode = objBase64.Text\n    \n    Set objBase64 = Nothing\nEnd Function\n```\n\n```vbnet:StringUtility\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\n'\u6587\u5b57\u5217<->\u30d0\u30a4\u30c8\u5217\u5909\u63db\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n\nOption Explicit\n\nPrivate Const adTypeBinary As Integer = 1\nPrivate Const adTypeText As Integer = 2\nPrivate Const adStateOpen = 1\n\n'\u30d0\u30a4\u30c8\u5217\u3092Shift-JIS\u3067\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\nPublic Function byteToString(ByRef byteData() As Byte) As String\n    Dim objStream As Object\n    \n    On Error GoTo ErrorHandler\n    Set objStream = CreateObject(\"ADODB.Stream\")\n    \n    objStream.Open\n    objStream.Type = adTypeBinary\n    objStream.Write byteData\n    \n    objStream.Position = 0\n    objStream.Type = adTypeText\n    objStream.Charset = \"shift-jis\"\n    \n    byteToString = objStream.ReadText\n    Exit Function\n    \nErrorHandler:\n    If Not objStream Is Nothing Then\n        If (objStream.State And adStateOpen) = adStateOpen Then\n            objStream.Close\n        End If\n    End If\n    Set objStream = Nothing\n    MsgBox \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9:\" & Err.Number & vbCrLf & Err.Description\nEnd Function\n\n'\u6587\u5b57\u5217\u3092Shift-JIS\u3067\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\nPublic Function stringToByte(ByVal strData As String) As Byte()\n    Dim objStream As Object\n    \n    On Error GoTo ErrorHandler\n    Set objStream = CreateObject(\"ADODB.Stream\")\n    \n    objStream.Open\n    objStream.Type = adTypeText\n    objStream.Charset = \"shift-jis\"\n    objStream.WriteText strData\n    \n    objStream.Position = 0\n    objStream.Type = adTypeBinary\n    \n    stringToByte = objStream.Read\n    Exit Function\n    \nErrorHandler:\n    If Not objStream Is Nothing Then\n        If (objStream.State And adStateOpen) = adStateOpen Then\n            objStream.Close\n        End If\n    End If\n    Set objStream = Nothing\n    MsgBox \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9:\" & Err.Number & vbCrLf & Err.Description\nEnd Function\n```\n\n\u5f8c\u306f\u547c\u3073\u51fa\u3057\u90e8\u3092\u4efb\u610f\u306e\u30b7\u30fc\u30c8\u306b\u5b9a\u7fa9\u3002\n\n```vbnet:Sheet1\nPublic Sub main()\n    Dim key() As Byte\n    Dim iv() As Byte\n    Dim data() As Byte\n    Dim objCipher As Cipher\n    \n    key = StringUtility.stringToByte(\"12345678abcdefgh\")\n    iv = StringUtility.stringToByte(\"hgfedcba87654321\")\n    data = StringUtility.stringToByte(\"\u6697\u53f7\u5316\u3057\u305f\u3044\u6587\u5b57\u5217\u3092\u3053\u3053\u306b\u8a2d\u5b9a\")\n    \n    On Error GoTo ErrorHandler\n    Set objCipher = New Cipher\n    \n    Call objCipher.encrypt(key, iv, data)\n    Debug.Print Base64.encode(data)\n    \n    Call objCipher.decrypt(key, iv, data)\n    Debug.Print StringUtility.byteToString(data)\n    \n    Exit Sub\n    \nErrorHandler:\n    Dim message As String\n    \n    message = \"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9: &H\" & Hex(Err.Number) & vbCrLf & _\n        \"\u30bd\u30fc\u30b9: \" & Err.Source & vbCrLf & Err.Description\n        MsgBox message, vbCritical\nEnd Sub\n```\n"}