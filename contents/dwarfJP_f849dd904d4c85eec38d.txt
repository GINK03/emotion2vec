{"context": "\n\nOpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u30cf\u30c3\u30b7\u30e5\u751f\u6210\u3001\u6697\u53f7\u5316(RSA, AES)\u3001\u5fa9\u53f7\u51e6\u7406(RSA, AES)\u3001\u7f72\u540d\u751f\u6210(RSA)\u3001\u7f72\u540d\u691c\u8a3c(RSA)\nOpenSSL \u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u7528\u65b9\u6cd5\u89e3\u8aac\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u304c\u3001OpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u65b9\u6cd5\u306f\u610f\u5916\u3068\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\u306e\u3067\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\nOpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u6b21\u306e\u51e6\u7406\u3092\u884c\u306a\u3046\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n  \u30cf\u30c3\u30b7\u30e5\u751f\u6210\n  \u6697\u53f7\u5316\n  \u5fa9\u53f7\u51e6\u7406\n  \u7f72\u540d\u751f\u6210\n  \u7f72\u540d\u691c\u8a3c\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3060\u3051\u51fa\u6765\u308c\u3070\u3001\u30c7\u30fc\u30bf\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u51e6\u7406\u306b\u306f\u56f0\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nBIO\n\u6697\u53f7\u7cfb\u306e\u51e6\u7406\u306e\u8aac\u660e\u3092\u3059\u308b\u524d\u306b BIO \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\nOpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001FILE \u3084 MEMORY\u3001 SOCKET \u7b49\u306e IO \u3092 BIO \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u308b\u7d71\u4e00\u3057\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002OpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e \u6697\u53f7\u7b49\u306e API \u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u4fbf\u5229\u3067\u3059\u3002\nBIO *BIO_new(BIO_METHOD *type);\nBIO *BIO_new_mem_buf(const void *buf, int len);\nBIO *BIO_new_fp(FILE *stream, int close_flag);\nBIO *BIO_new_fd(int fd, int close_flag);\nint BIO_read(BIO *b, void *data, int len);\nint BIO_write(BIO *b, const void *data, int len);\nint BIO_free(BIO *a);\n\n\n\u4f7f\u7528\u65b9\u6cd5(\u57fa\u672c)\n\n BIO_new() \u3084\u3001 BIO_new_mem_buf() \u7b49\u306e BIO_new \u7cfb\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u76ee\u7684\u306e IO \u3092\u6271\u3046\u305f\u3081\u306e BIO \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n BIO_read(), BIO_write() \u3067\u76ee\u7684\u306e IO \u51e6\u7406\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n BIO_free() \u3067\u89e3\u653e\u3057\u307e\u3059\u3002\n\n\n\u30b5\u30f3\u30d7\u30eb\nvoid copy( BIO * pSrcBio, BIO * pDstBio )\n{\n    while ( TRUE ) {\n        char buf[ 100 ];\n        int size = BIO_read( pSrcBio, buf, sizeof( buf ) );\n        if ( size <= 0 ) {\n            break;\n        }\n        BIO_write( pDstBio, buf, size );\n    }\n}\nvoid func()\n{\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( fopen( \"hoge\", \"w\" ), 1 );\n\n    copy( pSrcBio, pDstBio );\n\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n\n\u4e0a\u8a18\u306f\u3001 BIO \u3092\u5229\u7528\u3057\u3066 hoge \u30d5\u30a1\u30a4\u30eb\u306b \"123\" \u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002void copy( BIO * pSrcBio, BIO * pDstBio ) \u95a2\u6570\u306f\u3001BIO \u3092\u901a\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002BIO \u3092\u901a\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u3001\u5bfe\u8c61\u304c\u6587\u5b57\u5217\u306a\u306e\u304b\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u304b\u3092\u610f\u8b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f7f\u7528\u65b9\u6cd5(\u30d5\u30a3\u30eb\u30bf)\nBIO \u306f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u631f\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u631f\u3080\u3053\u3068\u3067\u3001\u7c21\u5358\u306b IO \u51e6\u7406\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\n\u30d5\u30a3\u30eb\u30bf\u3092\u631f\u3080\u306b\u306f BIO_push() \u3092\u5229\u7528\u3057\u307e\u3059\u3002\nBIO *BIO_push(BIO *b, BIO *append);\n\n\n\u30b5\u30f3\u30d7\u30eb\nvoid sub( BIO * pBio )\n{\n    BIO_write( pBio, \"123\", 3 );\n    BIO_write( pBio, \"456\", 3 );\n    BIO_write( pBio, \"789\", 3 );\n}\nvoid dumpBase64( const char * pPrefix, const void * pBuf, int size )\n{\n    BUF_MEM * pFileBio = BIO_new_fp( fopen( \"data.txt\", \"w\" ), 1 );\n    sub( pFileBio );\n\n    BIO * pBio = BIO_new( BIO_f_base64() );\n    BIO * pB64FileBio = BIO_new_fp( fopen( \"data.b64\", \"w\" ), 1 );\n    BIO * pWorkBio;\n\n    pWorkBio = BIO_push( pBio, pB64FileBio );\n    sub( pWorkBio );\n    BIO_ctrl( pWorkBio, BIO_CTRL_FLUSH, 0, NULL );\n\n    BIO_free( pBio );\n    BIO_free( pB64FileBio );\n    BIO_free( pFileBio );\n}\n\n\u4e0a\u8a18\u306f data.txt \u306b \"123456789\" \u304c\u51fa\u529b\u3055\u308c\u3001data.b64 \u306b \"123456789\" \u3092 base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u7d50\u679c\u304c\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u751f\u6210\u3001\u6697\u53f7\u5316(RSA, AES)\u3001\u5fa9\u53f7\u51e6\u7406(RSA, AES)\u3001\u7f72\u540d\u751f\u6210(RSA)\u3001\u7f72\u540d\u691c\u8a3c(RSA)\n\u3067\u306f\u672c\u984c\u306b\u5165\u308a\u307e\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u751f\u6210\n\u30cf\u30c3\u30b7\u30e5 (Message Digest) \u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u751f\u6210\u3057\u307e\u3059\u3002\n\n EVP_MD_CTX_init() \u3067 EVP_MD_CTX \u3092\u521d\u671f\u5316\u3002\n EVP_DigestInit_ex() \u3067 Message Digest \u751f\u6210\u51e6\u7406\u3092\u521d\u671f\u5316\u3002\n EVP_DigestUpdate() \u3067 Message Digest \u306e\u5bfe\u8c61\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3002\n\n\n EVP_DigestUpdate() \u306f\u3001Message Digest \u306e\u5bfe\u8c61\u30c7\u30fc\u30bf\u5206\u30b3\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\n EVP_DigestFinal_ex() \u3067 Message Digest \u3092\u53d6\u5f97\u3002\n EVP_MD_CTX_init() \u3067 EVP_MD_CTX \u306e\u5f8c\u51e6\u7406\u3002\n\n\n\u30b5\u30f3\u30d7\u30eb\n\u6587\u5b57\u5217 \"123\" \u304b\u3089 SHA256 \u3092 stdout \u306b\u51fa\u529b\u3059\u308b\u51e6\u7406\u3092\u793a\u3057\u307e\u3059\u3002\nint MessageDigest( const EVP_MD * pEvpMd, BIO * pSrcBio, BIO * pOutBio )\n{\n    EVP_MD_CTX mctx;\n    int mdsize = EVP_MD_size( pEvpMd );\n    unsigned char * pMDBuf = (unsigned char *)malloc( mdsize );\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_DigestInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_DigestUpdate( &mctx, pBuf, readSize );\n        }\n        EVP_DigestFinal_ex(&mctx, pMDBuf, NULL );\n        BIO_write( pOutBio, pMDBuf, mdsize );\n    }\n    free( pMDBuf );\n    free( pBuf );\n\n    EVP_MD_CTX_cleanup( &mctx );\n\n    return result;\n}\n\nvoid func()\n{\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( stdout, 0 );\n    MessageDigest( EVP_sha256(), pSrcBio, pDstBio );\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n\n\n\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\n\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u51e6\u7406\u3057\u307e\u3059\u3002RSA \u306e\u6697\u53f7\u3001\u5fa9\u53f7\u51e6\u7406\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n EVP_CIPHER_CTX_init() \u3067 ~EVPCIPHERCTXY \u3092\u521d\u671f\u5316\n  \u6697\u53f7\u5316\u306e\u5834\u5408\n\n\n EVP_EncryptInit_ex() \u3067\u3001\u6697\u53f7\u51e6\u7406\u306e\u521d\u671f\u5316\n EVP_EncryptUpdate() \u3067\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u3057\u3001\u6697\u53f7\u5316\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n\n EVP_EncryptUpdate() \u306f\u3001\u6697\u53f7\u5316\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u51e6\u7406\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\n\n\n EVP_EncryptFinal_ex() \u3067\u3001\u6697\u53f7\u5316\u51e6\u7406\u3092\u7d42\u4e86\u3057\u3001\u672b\u5c3e\u306e\u6697\u53f7\u5316\u5f8c\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\n\n  \u5fa9\u53f7\u306e\u5834\u5408\n\n\n EVP_DecryptInit_ex() \u3067\u3001\u5fa9\u53f7\u51e6\u7406\u306e\u521d\u671f\u5316\n EVP_DecryptUpdate() \u3067\u30c7\u30fc\u30bf\u3092\u5fa9\u53f7\u3057\u3001\u5fa9\u53f7\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n\n EVP_DecryptUpdate() \u306f\u3001\u5fa9\u53f7\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u51e6\u7406\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\n\n\n EVP_DecryptFinal_ex() \u3067\u3001\u5fa9\u53f7\u51e6\u7406\u3092\u7d42\u4e86\u3057\u3001\u672b\u5c3e\u306e\u5fa9\u53f7\u5f8c\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\n\n EVP_CIPHER_CTX_cleanup(&en) \u3067 EVP_CIPHER_CTX \u306e\u5f8c\u51e6\u7406\n\n\n\u30b5\u30f3\u30d7\u30eb\n\u6b21\u306f \u6587\u5b57\u5217 \"123\" \u3092 AES256 GCM \u3067\u6697\u53f7\u5316\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\nvoid Encrypt( EVP_CIPHER * pCipher, unsigned char * pKey, unsigned char * pIV,\n              BIO * pSrcBio, BIO * pDstBIO )\n{\n    EVP_CIPHER_CTX en;\n    EVP_CIPHER_CTX_init( &en );\n    EVP_EncryptInit_ex( &en, pCipher, NULL, pKey, pIV );\n\n    char out[ EVP_MAX_BLOCK_LENGTH ];\n    int outSize = 0;\n\n    while ( 1 ) {\n        char src[ EVP_MAX_BLOCK_LENGTH ];\n        int srcSize = BIO_read( pSrcBio, src, sizeof( EVP_MAX_BLOCK_LENGTH ) );\n        if ( srcSize <= 0 ) {\n            break;\n        }\n\n        EVP_EncryptUpdate( &en, out, &outSize, src, srcSize );\n        BIO_write( pDstBio, out, outSize );\n    }\n\n    EVP_EncryptFinal_ex( &en, out, &outSize );\n    BIO_write( pDstBio, out, outSize );\n\n    EVP_CIPHER_CTX_cleanup(&en);\n}\nvoid func()\n{\n    unsigned char iv[16] = {0};\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( fopen( \"hoge\", \"w\" ), 1 );\n    Encrypt( EVP_aes_256_gcm(), \"12345678901234567890123456789012\",\n                 iv, pSrcBio, pDstBio );\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n\n\nRSA \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\nRSA \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u884c\u306a\u3044\u307e\u3059\u3002\n\n  RSA \u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u3080\n\n\n PEM_read_bio_RSAPublicKey()\n\n PEM_read_bio_RSAPrivateKey()\n\n\n\n  \u6697\u53f7\u5316\u3001\u5fa9\u53f7\u51e6\u7406\n\n\n RSA_public_encrypt()\n\n RSA_private_decrypt()\n\n\n\n RSA_free() \u3067 RSA \u30ad\u30fc\u3092\u89e3\u653e\n\nRSA \u6697\u53f7\u5316\u3001\u5fa9\u53f7\u5316\u306f\u3001 \u6271\u3048\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306b\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306f\u9375\u30b5\u30a4\u30ba\u3088\u308a\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\u3002\n\u9375\u30b5\u30a4\u30ba\u306f\u3001 RSA_size() \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nPEM_read_bio_RSAPublicKey(), PEM_read_bio_RSAPrivateKey() \u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a PEM \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u304b\u3089\u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u6587\u5b57\u5217 \"123\" \u3092 RSA \u6697\u53f7\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nstatic int RsaEncrypt(\n    BIO * pKeyBio, const unsigned char * pData, int dataSize, BIO * pOutBio )\n{\n    RSA * pKey = PEM_read_bio_RSAPublicKey( pKeyBio, NULL, NULL, NULL );\n    unsigned char * pOutBuf = (unsigned char *)malloc( RSA_size( pKey ) );\n    int outSize = RSA_public_encrypt(\n            dataSize, pData, pOutBuf, pKey, RSA_PKCS1_PADDING );\n    BIO_write( pOutBio, pOutBuf, outSize );\n    free( pOutBuf );\n    RSA_free( pKey );\n    return outSize;\n}\n\nvoid func()\n{\n    BIO * pKeyBio = BIO_new_fp( fopen( \"pub.pem\", \"r\" ), 1 );\n    BIO * pDecBio = BIO_new_fp( fopen( \"data.enc\", \"w\" ), 1 );\n    const char * pData = \"123\";\n\n    int rawDataSize = RsaEncrypt(\n        pKeyBio, pData, strlen( pData ), pDecBio );\n    BIO_free( pKeyBio );\n    BIO_free( pDecBio );\n}\n\n\nRSA \u7f72\u540d\u751f\u6210\u3001RSA \u7f72\u540d\u691c\u8a3c\nRSA \u7f72\u540d\u751f\u6210\u3001RSA \u7f72\u540d\u691c\u8a3c\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u884c\u306a\u3044\u307e\u3059\u3002\n\n  RSA \u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u3080\n\n\n PEM_read_bio_RSAPublicKey()\n\n PEM_read_bio_RSAPrivateKey()\n\n\n\n  RSA \u30ad\u30fc\u304b\u3089 EVP_PKEY \u3092\u751f\u6210\n\n\n EVP_PKEY_new()\n\n EVP_PKEY_set1_RSA()\n\n\n\n EVP_MD_CTX_init() \u3067 EVP_MD_CTX \u3092\u521d\u671f\u5316\n  \u7f72\u540d\u751f\u6210\u306e\u5834\u5408\n\n\n EVP_SignInit_ex() \u3067\u7f72\u540d\u751f\u6210\u306e\u521d\u671f\u5316\n EVP_SignUpdate() \u3067\u3001\u7f72\u540d\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n EVP_SignFinal() \u3067\u3001\u7f72\u540d\u3092\u53d6\u5f97\n\n\n\n\u7f72\u540d\u691c\u8a3c\u306e\u5834\u5408  \n\n EVP_VerifyInit_ex() \u3067\u3001\u7f72\u540d\u691c\u8a3c\u51e6\u7406\u306e\u521d\u671f\u5316\n EVP_VerifyUpdate() \u3067\u3001\u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u691c\u8a3c\u51e6\u7406\n EVP_VerifyFinal() \u3067\u3001\u7f72\u540d\u691c\u8a3c\u5224\u5b9a\n\n\nEVP_PKEY_free() EVP_PKEY \u3092\u89e3\u653e\nEVP_MD_CTX_cleanup() \u3067 EVP_MD_CTX \u306e\u5f8c\u51e6\u7406\n\n\n\u30b5\u30f3\u30d7\u30eb\n\u6587\u5b57\u5217 \"123\" \u3092 RSA \u6697\u53f7\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nstatic void RsaSign(\n    const EVP_MD * pEvpMd, BIO * pKeyBio, BIO * pSrcBio, BIO * pSignBio )\n{\n    EVP_MD_CTX mctx;\n    RSA * pRsa = PEM_read_bio_RSAPrivateKey( pKeyBio, NULL, NULL, NULL );\n    EVP_PKEY * pKey = EVP_PKEY_new();\n    EVP_PKEY_set1_RSA( pKey, pRsa );\n\n    int sigSize = EVP_PKEY_size( pKey );\n    unsigned char * pSignBuf = (unsigned char *)malloc( sigSize );\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_SignInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_SignUpdate( &mctx, pBuf, readSize );\n        }\n        EVP_SignFinal(&mctx, pSignBuf, &sigSize, pKey );\n        BIO_write( pSignBio, pSignBuf, sigSize );\n    }\n    free( pBuf );\n    free( pSignBuf );\n    RSA_free( pRsa );\n    EVP_PKEY_free( pKey );\n\n    EVP_MD_CTX_cleanup( &mctx );\n}\n\nstatic void RsaVerify(\n    const EVP_MD * pEvpMd, BIO * pKeyBio, BIO * pSrcBio, BIO * pSignBio )\n{\n    EVP_MD_CTX mctx;\n    RSA * pRsa = PEM_read_bio_RSAPublicKey( pKeyBio, NULL, NULL, NULL );\n    EVP_PKEY * pKey = EVP_PKEY_new();\n    EVP_PKEY_set1_RSA( pKey, pRsa );\n\n    int sigSize = EVP_PKEY_size( pKey );\n    unsigned char * pSignBuf = (unsigned char *)malloc( sigSize );\n    BIO_read( pSignBio, pSignBuf, sigSize );\n\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n    int result = -1;\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_VerifyInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_VerifyUpdate( &mctx, pBuf, readSize );\n        }\n        if ( EVP_VerifyFinal(&mctx, pSignBuf, sigSize, pKey ) ) {\n           result = 0;\n        }\n    }\n    free( pBuf );\n    free( pSignBuf );\n    RSA_free( pRsa );\n    EVP_PKEY_free( pKey );\n\n    EVP_MD_CTX_cleanup( &mctx );\n    return result;\n}\n\nvoid func()\n{\n    BIO * pPubKeyBio = BIO_new_fp( fopen( \"pub.pem\", \"r\" ), 1 );\n    BIO * pPriKeyBio = BIO_new_fp( fopen( \"pri.pem\", \"r\" ), 1 );\n    const char * pData = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pData, strlen( pData ) ) ;\n    BIO * pSignBio = BIO_new( BIO_s_mem() );\n\n    RsaSign( EVP_sha256(), pPriKeyBio, pSrcBio, pSignBio );\n\n    BIO_ctrl( pSrcBio, BIO_CTRL_RESET, 0, NULL );\n\n    if ( RsaVerify( EVP_sha256(), pPubKeyBio, pSrcBio, pSignBio ) == 0 ) {\n      printf( \"verify ok.\" );\n    }\n    else {\n      printf( \"verify ng.\" );\n    }\n\n    BIO_free( pPubKeyBio );\n    BIO_free( pPriKeyBio );\n    BIO_free( pSrcBio );\n    BIO_free( pSignBio );\n}\n\n# OpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u30cf\u30c3\u30b7\u30e5\u751f\u6210\u3001\u6697\u53f7\u5316(RSA, AES)\u3001\u5fa9\u53f7\u51e6\u7406(RSA, AES)\u3001\u7f72\u540d\u751f\u6210(RSA)\u3001\u7f72\u540d\u691c\u8a3c(RSA)\n\nOpenSSL \u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u7528\u65b9\u6cd5\u89e3\u8aac\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u304c\u3001OpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u65b9\u6cd5\u306f\u610f\u5916\u3068\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\u306e\u3067\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\nOpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u6b21\u306e\u51e6\u7406\u3092\u884c\u306a\u3046\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n-   \u30cf\u30c3\u30b7\u30e5\u751f\u6210\n-   \u6697\u53f7\u5316\n-   \u5fa9\u53f7\u51e6\u7406\n-   \u7f72\u540d\u751f\u6210\n-   \u7f72\u540d\u691c\u8a3c\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3060\u3051\u51fa\u6765\u308c\u3070\u3001\u30c7\u30fc\u30bf\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u51e6\u7406\u306b\u306f\u56f0\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## BIO\n\n\u6697\u53f7\u7cfb\u306e\u51e6\u7406\u306e\u8aac\u660e\u3092\u3059\u308b\u524d\u306b BIO \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\nOpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001FILE \u3084 MEMORY\u3001 SOCKET \u7b49\u306e IO \u3092 BIO \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u308b\u7d71\u4e00\u3057\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002OpenSSL \u30e9\u30a4\u30d6\u30e9\u30ea\u306e \u6697\u53f7\u7b49\u306e API \u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n```c\nBIO *BIO_new(BIO_METHOD *type);\nBIO *BIO_new_mem_buf(const void *buf, int len);\nBIO *BIO_new_fp(FILE *stream, int close_flag);\nBIO *BIO_new_fd(int fd, int close_flag);\nint BIO_read(BIO *b, void *data, int len);\nint BIO_write(BIO *b, const void *data, int len);\nint BIO_free(BIO *a);\n```\n\n### \u4f7f\u7528\u65b9\u6cd5(\u57fa\u672c)\n\n-   `BIO_new()` \u3084\u3001 `BIO_new_mem_buf()` \u7b49\u306e `BIO_new` \u7cfb\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u76ee\u7684\u306e IO \u3092\u6271\u3046\u305f\u3081\u306e BIO \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n-   `BIO_read()`, `BIO_write()` \u3067\u76ee\u7684\u306e IO \u51e6\u7406\u3092\u884c\u306a\u3044\u307e\u3059\u3002\n-   `BIO_free()` \u3067\u89e3\u653e\u3057\u307e\u3059\u3002\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n```c\nvoid copy( BIO * pSrcBio, BIO * pDstBio )\n{\n    while ( TRUE ) {\n        char buf[ 100 ];\n        int size = BIO_read( pSrcBio, buf, sizeof( buf ) );\n        if ( size <= 0 ) {\n            break;\n        }\n        BIO_write( pDstBio, buf, size );\n    }\n}\nvoid func()\n{\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( fopen( \"hoge\", \"w\" ), 1 );\n\n    copy( pSrcBio, pDstBio );\n\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n```\n\n\u4e0a\u8a18\u306f\u3001 BIO \u3092\u5229\u7528\u3057\u3066 hoge \u30d5\u30a1\u30a4\u30eb\u306b \"123\" \u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002void copy( BIO \\* pSrcBio, BIO \\* pDstBio ) \u95a2\u6570\u306f\u3001BIO \u3092\u901a\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002BIO \u3092\u901a\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u3001\u5bfe\u8c61\u304c\u6587\u5b57\u5217\u306a\u306e\u304b\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u304b\u3092\u610f\u8b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### \u4f7f\u7528\u65b9\u6cd5(\u30d5\u30a3\u30eb\u30bf)\n\nBIO \u306f\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u631f\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u631f\u3080\u3053\u3068\u3067\u3001\u7c21\u5358\u306b IO \u51e6\u7406\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\n\n\u30d5\u30a3\u30eb\u30bf\u3092\u631f\u3080\u306b\u306f `BIO_push()` \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```c\nBIO *BIO_push(BIO *b, BIO *append);\n```\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n```c\nvoid sub( BIO * pBio )\n{\n    BIO_write( pBio, \"123\", 3 );\n    BIO_write( pBio, \"456\", 3 );\n    BIO_write( pBio, \"789\", 3 );\n}\nvoid dumpBase64( const char * pPrefix, const void * pBuf, int size )\n{\n    BUF_MEM * pFileBio = BIO_new_fp( fopen( \"data.txt\", \"w\" ), 1 );\n    sub( pFileBio );\n\n    BIO * pBio = BIO_new( BIO_f_base64() );\n    BIO * pB64FileBio = BIO_new_fp( fopen( \"data.b64\", \"w\" ), 1 );\n    BIO * pWorkBio;\n\n    pWorkBio = BIO_push( pBio, pB64FileBio );\n    sub( pWorkBio );\n    BIO_ctrl( pWorkBio, BIO_CTRL_FLUSH, 0, NULL );\n\n    BIO_free( pBio );\n    BIO_free( pB64FileBio );\n    BIO_free( pFileBio );\n}\n```\n\n\u4e0a\u8a18\u306f data.txt \u306b \"123456789\" \u304c\u51fa\u529b\u3055\u308c\u3001data.b64 \u306b \"123456789\" \u3092 base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u7d50\u679c\u304c\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n## \u30cf\u30c3\u30b7\u30e5\u751f\u6210\u3001\u6697\u53f7\u5316(RSA, AES)\u3001\u5fa9\u53f7\u51e6\u7406(RSA, AES)\u3001\u7f72\u540d\u751f\u6210(RSA)\u3001\u7f72\u540d\u691c\u8a3c(RSA)\n\n\u3067\u306f\u672c\u984c\u306b\u5165\u308a\u307e\u3059\u3002\n\n### \u30cf\u30c3\u30b7\u30e5\u751f\u6210\n\n\u30cf\u30c3\u30b7\u30e5 (Message Digest) \u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u751f\u6210\u3057\u307e\u3059\u3002\n\n-   `EVP_MD_CTX_init()` \u3067 `EVP_MD_CTX` \u3092\u521d\u671f\u5316\u3002\n-   `EVP_DigestInit_ex()` \u3067 Message Digest \u751f\u6210\u51e6\u7406\u3092\u521d\u671f\u5316\u3002\n-   `EVP_DigestUpdate()` \u3067 Message Digest \u306e\u5bfe\u8c61\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3002\n    -   `EVP_DigestUpdate()` \u306f\u3001Message Digest \u306e\u5bfe\u8c61\u30c7\u30fc\u30bf\u5206\u30b3\u30fc\u30eb\u3057\u307e\u3059\u3002\n-   `EVP_DigestFinal_ex()` \u3067 Message Digest \u3092\u53d6\u5f97\u3002\n-   `EVP_MD_CTX_init()` \u3067 `EVP_MD_CTX` \u306e\u5f8c\u51e6\u7406\u3002\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n\u6587\u5b57\u5217 \"123\" \u304b\u3089 SHA256 \u3092 stdout \u306b\u51fa\u529b\u3059\u308b\u51e6\u7406\u3092\u793a\u3057\u307e\u3059\u3002\n\n```c\nint MessageDigest( const EVP_MD * pEvpMd, BIO * pSrcBio, BIO * pOutBio )\n{\n    EVP_MD_CTX mctx;\n    int mdsize = EVP_MD_size( pEvpMd );\n    unsigned char * pMDBuf = (unsigned char *)malloc( mdsize );\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_DigestInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_DigestUpdate( &mctx, pBuf, readSize );\n        }\n        EVP_DigestFinal_ex(&mctx, pMDBuf, NULL );\n        BIO_write( pOutBio, pMDBuf, mdsize );\n    }\n    free( pMDBuf );\n    free( pBuf );\n\n    EVP_MD_CTX_cleanup( &mctx );\n\n    return result;\n}\n\nvoid func()\n{\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( stdout, 0 );\n    MessageDigest( EVP_sha256(), pSrcBio, pDstBio );\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n```\n\n### \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\n\n\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u51e6\u7406\u3057\u307e\u3059\u3002RSA \u306e\u6697\u53f7\u3001\u5fa9\u53f7\u51e6\u7406\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n-   `EVP_CIPHER_CTX_init()` \u3067 ~EVP<sub>CIPHER</sub><sub>CTXY</sub> \u3092\u521d\u671f\u5316\n-   \u6697\u53f7\u5316\u306e\u5834\u5408\n    -   `EVP_EncryptInit_ex()` \u3067\u3001\u6697\u53f7\u51e6\u7406\u306e\u521d\u671f\u5316\n    -   `EVP_EncryptUpdate()` \u3067\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u3057\u3001\u6697\u53f7\u5316\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        -   `EVP_EncryptUpdate()` \u306f\u3001\u6697\u53f7\u5316\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u51e6\u7406\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\n    -   `EVP_EncryptFinal_ex()` \u3067\u3001\u6697\u53f7\u5316\u51e6\u7406\u3092\u7d42\u4e86\u3057\u3001\u672b\u5c3e\u306e\u6697\u53f7\u5316\u5f8c\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n-   \u5fa9\u53f7\u306e\u5834\u5408\n    -   `EVP_DecryptInit_ex()` \u3067\u3001\u5fa9\u53f7\u51e6\u7406\u306e\u521d\u671f\u5316\n    -   `EVP_DecryptUpdate()` \u3067\u30c7\u30fc\u30bf\u3092\u5fa9\u53f7\u3057\u3001\u5fa9\u53f7\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        -   `EVP_DecryptUpdate()` \u306f\u3001\u5fa9\u53f7\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u3092\u5168\u3066\u51e6\u7406\u3059\u308b\u307e\u3067\u5b9f\u884c\u3059\u308b\n    -   `EVP_DecryptFinal_ex()` \u3067\u3001\u5fa9\u53f7\u51e6\u7406\u3092\u7d42\u4e86\u3057\u3001\u672b\u5c3e\u306e\u5fa9\u53f7\u5f8c\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n-   `EVP_CIPHER_CTX_cleanup(&en)` \u3067 `EVP_CIPHER_CTX` \u306e\u5f8c\u51e6\u7406\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n\u6b21\u306f \u6587\u5b57\u5217 \"123\" \u3092 AES256 GCM \u3067\u6697\u53f7\u5316\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```c\nvoid Encrypt( EVP_CIPHER * pCipher, unsigned char * pKey, unsigned char * pIV,\n              BIO * pSrcBio, BIO * pDstBIO )\n{\n    EVP_CIPHER_CTX en;\n    EVP_CIPHER_CTX_init( &en );\n    EVP_EncryptInit_ex( &en, pCipher, NULL, pKey, pIV );\n\n    char out[ EVP_MAX_BLOCK_LENGTH ];\n    int outSize = 0;\n\n    while ( 1 ) {\n        char src[ EVP_MAX_BLOCK_LENGTH ];\n        int srcSize = BIO_read( pSrcBio, src, sizeof( EVP_MAX_BLOCK_LENGTH ) );\n        if ( srcSize <= 0 ) {\n            break;\n        }\n\n        EVP_EncryptUpdate( &en, out, &outSize, src, srcSize );\n        BIO_write( pDstBio, out, outSize );\n    }\n\n    EVP_EncryptFinal_ex( &en, out, &outSize );\n    BIO_write( pDstBio, out, outSize );\n\n    EVP_CIPHER_CTX_cleanup(&en);\n}\nvoid func()\n{\n    unsigned char iv[16] = {0};\n    const char * pSrc = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pSrc, strlen( pSrc ) );\n    BIO * pDstBio = BIO_new_fp( fopen( \"hoge\", \"w\" ), 1 );\n    Encrypt( EVP_aes_256_gcm(), \"12345678901234567890123456789012\",\n                 iv, pSrcBio, pDstBio );\n    BIO_free( pSrcBio );\n    BIO_free( pDstBio );\n}\n```\n\n### RSA \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\n\nRSA \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u51e6\u7406\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u884c\u306a\u3044\u307e\u3059\u3002\n\n-   RSA \u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u3080\n    -   `PEM_read_bio_RSAPublicKey()`\n    -   `PEM_read_bio_RSAPrivateKey()`\n-   \u6697\u53f7\u5316\u3001\u5fa9\u53f7\u51e6\u7406\n    -   `RSA_public_encrypt()`\n    -   `RSA_private_decrypt()`\n-   `RSA_free()` \u3067 RSA \u30ad\u30fc\u3092\u89e3\u653e\n\nRSA \u6697\u53f7\u5316\u3001\u5fa9\u53f7\u5316\u306f\u3001 \u6271\u3048\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306b\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306f\u9375\u30b5\u30a4\u30ba\u3088\u308a\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u9375\u30b5\u30a4\u30ba\u306f\u3001 `RSA_size()` \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n`PEM_read_bio_RSAPublicKey()`, `PEM_read_bio_RSAPrivateKey()` \u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a PEM \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u304b\u3089\u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n\u6587\u5b57\u5217 \"123\" \u3092 RSA \u6697\u53f7\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```c\nstatic int RsaEncrypt(\n    BIO * pKeyBio, const unsigned char * pData, int dataSize, BIO * pOutBio )\n{\n    RSA * pKey = PEM_read_bio_RSAPublicKey( pKeyBio, NULL, NULL, NULL );\n    unsigned char * pOutBuf = (unsigned char *)malloc( RSA_size( pKey ) );\n    int outSize = RSA_public_encrypt(\n            dataSize, pData, pOutBuf, pKey, RSA_PKCS1_PADDING );\n    BIO_write( pOutBio, pOutBuf, outSize );\n    free( pOutBuf );\n    RSA_free( pKey );\n    return outSize;\n}\n\nvoid func()\n{\n    BIO * pKeyBio = BIO_new_fp( fopen( \"pub.pem\", \"r\" ), 1 );\n    BIO * pDecBio = BIO_new_fp( fopen( \"data.enc\", \"w\" ), 1 );\n    const char * pData = \"123\";\n\n    int rawDataSize = RsaEncrypt(\n        pKeyBio, pData, strlen( pData ), pDecBio );\n    BIO_free( pKeyBio );\n    BIO_free( pDecBio );\n}\n```\n\n### RSA \u7f72\u540d\u751f\u6210\u3001RSA \u7f72\u540d\u691c\u8a3c\n\nRSA \u7f72\u540d\u751f\u6210\u3001RSA \u7f72\u540d\u691c\u8a3c\u306f\u3001\u6b21\u306e\u624b\u9806\u3067\u884c\u306a\u3044\u307e\u3059\u3002\n\n-   RSA \u30ad\u30fc\u3092\u8aad\u307f\u8fbc\u3080\n    -   `PEM_read_bio_RSAPublicKey()`\n    -   `PEM_read_bio_RSAPrivateKey()`\n-   RSA \u30ad\u30fc\u304b\u3089 `EVP_PKEY` \u3092\u751f\u6210\n    -   `EVP_PKEY_new()`\n    -   `EVP_PKEY_set1_RSA()`\n-   `EVP_MD_CTX_init()` \u3067 `EVP_MD_CTX` \u3092\u521d\u671f\u5316\n-   \u7f72\u540d\u751f\u6210\u306e\u5834\u5408\n    -   `EVP_SignInit_ex()` \u3067\u7f72\u540d\u751f\u6210\u306e\u521d\u671f\u5316\n    -   `EVP_SignUpdate()` \u3067\u3001\u7f72\u540d\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n    -   `EVP_SignFinal()` \u3067\u3001\u7f72\u540d\u3092\u53d6\u5f97\n-   \u7f72\u540d\u691c\u8a3c\u306e\u5834\u5408  \n    \n    -   `EVP_VerifyInit_ex()` \u3067\u3001\u7f72\u540d\u691c\u8a3c\u51e6\u7406\u306e\u521d\u671f\u5316\n    -   `EVP_VerifyUpdate()` \u3067\u3001\u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u691c\u8a3c\u51e6\u7406\n    -   `EVP_VerifyFinal()` \u3067\u3001\u7f72\u540d\u691c\u8a3c\u5224\u5b9a\n-   `EVP_PKEY_free()` `EVP_PKEY` \u3092\u89e3\u653e\n-   `EVP_MD_CTX_cleanup()` \u3067 `EVP_MD_CTX` \u306e\u5f8c\u51e6\u7406\n\n#### \u30b5\u30f3\u30d7\u30eb\n\n\u6587\u5b57\u5217 \"123\" \u3092 RSA \u6697\u53f7\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```c\nstatic void RsaSign(\n    const EVP_MD * pEvpMd, BIO * pKeyBio, BIO * pSrcBio, BIO * pSignBio )\n{\n    EVP_MD_CTX mctx;\n    RSA * pRsa = PEM_read_bio_RSAPrivateKey( pKeyBio, NULL, NULL, NULL );\n    EVP_PKEY * pKey = EVP_PKEY_new();\n    EVP_PKEY_set1_RSA( pKey, pRsa );\n\n    int sigSize = EVP_PKEY_size( pKey );\n    unsigned char * pSignBuf = (unsigned char *)malloc( sigSize );\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_SignInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_SignUpdate( &mctx, pBuf, readSize );\n        }\n        EVP_SignFinal(&mctx, pSignBuf, &sigSize, pKey );\n        BIO_write( pSignBio, pSignBuf, sigSize );\n    }\n    free( pBuf );\n    free( pSignBuf );\n    RSA_free( pRsa );\n    EVP_PKEY_free( pKey );\n\n    EVP_MD_CTX_cleanup( &mctx );\n}\n\nstatic void RsaVerify(\n    const EVP_MD * pEvpMd, BIO * pKeyBio, BIO * pSrcBio, BIO * pSignBio )\n{\n    EVP_MD_CTX mctx;\n    RSA * pRsa = PEM_read_bio_RSAPublicKey( pKeyBio, NULL, NULL, NULL );\n    EVP_PKEY * pKey = EVP_PKEY_new();\n    EVP_PKEY_set1_RSA( pKey, pRsa );\n\n    int sigSize = EVP_PKEY_size( pKey );\n    unsigned char * pSignBuf = (unsigned char *)malloc( sigSize );\n    BIO_read( pSignBio, pSignBuf, sigSize );\n\n    int bufferSize = 1024;\n    char * pBuf = (char *)malloc( bufferSize );\n    int result = -1;\n\n    EVP_MD_CTX_init( &mctx );\n\n    if ( EVP_VerifyInit_ex( &mctx, pEvpMd, NULL) ) {\n        while ( 1 ) {\n            int readSize = BIO_read( pSrcBio, pBuf, bufferSize );\n            if ( readSize <= 0 ) {\n                break;\n            }\n            EVP_VerifyUpdate( &mctx, pBuf, readSize );\n        }\n        if ( EVP_VerifyFinal(&mctx, pSignBuf, sigSize, pKey ) ) {\n           result = 0;\n        }\n    }\n    free( pBuf );\n    free( pSignBuf );\n    RSA_free( pRsa );\n    EVP_PKEY_free( pKey );\n\n    EVP_MD_CTX_cleanup( &mctx );\n    return result;\n}\n\nvoid func()\n{\n    BIO * pPubKeyBio = BIO_new_fp( fopen( \"pub.pem\", \"r\" ), 1 );\n    BIO * pPriKeyBio = BIO_new_fp( fopen( \"pri.pem\", \"r\" ), 1 );\n    const char * pData = \"123\";\n    BIO * pSrcBio = BIO_new_mem_buf( pData, strlen( pData ) ) ;\n    BIO * pSignBio = BIO_new( BIO_s_mem() );\n\n    RsaSign( EVP_sha256(), pPriKeyBio, pSrcBio, pSignBio );\n\n    BIO_ctrl( pSrcBio, BIO_CTRL_RESET, 0, NULL );\n\n    if ( RsaVerify( EVP_sha256(), pPubKeyBio, pSrcBio, pSignBio ) == 0 ) {\n      printf( \"verify ok.\" );\n    }\n    else {\n      printf( \"verify ng.\" );\n    }\n\n    BIO_free( pPubKeyBio );\n    BIO_free( pPriKeyBio );\n    BIO_free( pSrcBio );\n    BIO_free( pSignBio );\n}\n```\n", "tags": ["openssl", "RSA", "aes", "\u7f72\u540d", "\u7f72\u540d\u691c\u8a3c"]}