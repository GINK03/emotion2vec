{"tags": ["laravel", "DataTables", "bootstrap"], "context": "\n\nI. What is bootstrap datatable\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. The more details and examples can be found at the following URL : https://datatables.net/\n\nII. How to mix them up\n\na. Creating a new laravel project\nProject creation will not be described here but basic steps can be found easily at Laravel's home page's installation section :\nURL :  https://laravel.com/docs/master/\nI myself prefred the installation via composer\n\ncomposer create-project --prefer-dist laravel/laravel MyProject\n\n\nb. Install datatables bootstrap :\nThe fastest way to get started with DataTables is to use the download builder. With this tool you can build a customised DataTables package, selecting the software that you wish to use in various combinations of styling and related packages to suit your needs.\nURL : https://datatables.net/download/index\nLibrary size is important in web applications - the more code there is, the longer it takes to download and parse for the end user's browser. As such, only libraries that you actually need should be selected (this is why there is no \"select all\" option!).\nDownloaded library will be put into project folder like below \n\n\nc. Library inclusion\nWe need to link the downloaded library to our view (blade file) :\n\nCSS part\n\n<head>\n  <!-- DataTables -->\n  <link rel=\"stylesheet\" href=\"{{ asset('/plugins/datatables/jquery.dataTables.css')}}\">\n</head>\n\n\nJavascript part\n\n<!-- DataTables -->\n<script src=\"{{ asset('/plugins/datatables/jquery.dataTables.min.js')}}\"></script>\n\n\nd. Plugin Initialization\nBasically we will draw the wireframe of our table first using HTML like below\n\n<div class=\"row\">\n    <div class= \"col-md-12\">\n        <div class=\"box box-info\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\">Users List'</h3>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"table-responsive\">\n                    <table class=\"display\" cellspacing=\"0\" width=\"100%\" id = \"dataTable\" name =\"dataTable\">\n                        <thead>\n                            <tr>\n                                <th>User Name</th>\n                                <th>Email</th>\n                                <th>DOB</th>\n                                <th>UserID</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                        </tbody>\n                    </table>\n                </div>\n                <!-- /.table-responsive -->\n            </div>\n            <!-- /.box-body -->\n        </div>              \n    </div>\n</div>\n\n\nNote that we left the <tbody> part to be blank and data will be filled later by serverside. The last column named UserID will be added to demonstrate the ability of having hidden column. What we are going to do is to load the user's list which has specified Group ID (input text group_id ) . Plugin's initialization will be like below:\n\nvar dataTable = $('#dataTable').DataTable(\n    {\n        \"paging\": true, // Allow data to be paged\n         \"lengthChange\": false,\n        \"searching\": true, // Search box and search function will be actived\n        \"ordering\": true,\n        \"info\": true,\n        \"autoWidth\": true,\n         \"processing\": true,  // Show processing \n         \"serverSide\": true,  // Server side processing\n          \"deferLoading\": 0, // In this case we want the table load on request so initial automatical load is not desired\n          \"pageLength\": 5,    // 5 rows per page\n                \"ajax\":{\n              url :  '',\n                    type : \"POST\",\n                    dataType: 'json',\n                    error: function(data){\n                        console.log(data);\n                    }\n                },\n                // aoColumnDefs allow us to specify which column we want to make\n                // sortable or column's alignment\n                \"aoColumnDefs\": [\n                { 'bSortable': false, 'aTargets': [0,1] }   ,\n                { className: \"dt-center\", \"aTargets\": [0,1,2,3] },\n            ],\n            \"columns\": [\n                    null,\n                    null,\n                    null,               \n                    { \"visible\": false }, //The last column will be invisible\n                ],\n\n    });\n    $('#button').on('click',  function () {\n    var resourceURL = \"{{route('user.datatables',['group_id'=>':group_id'])}}\";\n    var group_id = 1; //Default group id\n    group_id = $('#group_id').val(); //Get the value of input text \n    resourceURL = resourceURL.replace(\":group_id\", group_id); // Build the route\n\n    /*\n    * Change the URL of dataTable and call ajax to load new data\n    */\n    dataTable.ajax.url(targetUrl).load();\n    dataTable.draw();\n} );\n\n\nNote the technique that we used replace function to build the route dynamically. \n\nIII. Route definition\n\nRoute::post('user/{group_id}/datatables', ['as' => 'user.datatables','uses'=>'UserController@usersByGroupDatatables']);\n\n\nThe route we used as datatables's ajax url is defined above telling that function usersByGroupDatatables of UserController will be called to fetch datatable. \n\nVI. Serverside logic\nIn this part, we will write logic code to handle fetching data from serverside:\n\npublic function usersByGroupDatatables(Request $request, $type, $group_id){\n        // The columns variable is used for sorting\n        $columns = array (\n                // datatable column index => database column name\n                0 =>'user_name',\n                1 =>'email',\n                2 =>'dob',\n                3 =>'id',\n        );\n        //Getting the data\n        $users = DB::table ( 'users' )\n        ->where('users.group_id','=',$group_id)\n        ->select ( 'users.id',\n            'users.user_name',\n            'users.email',\n            'users.dob',\n        );\n        $totalData = $users->count ();            //Total record\n        $totalFiltered = $totalData;      // No filter at first so we can assign like this\n        // Here are the parameters sent from client for paging \n        $start = $request->input ( 'start' );           // Skip first start records\n        $length = $request->input ( 'length' );   //  Get length record from start\n        /*\n         * Where Clause\n         */\n        if ($request->has ( 'search' )) {\n            if ($request->input ( 'search.value' ) != '') {\n                $searchTerm = $request->input ( 'search.value' );\n                /*\n                * Seach clause : we only allow to search on user_name field\n                */\n                $candidates->where ( 'users.user_name', 'Like', '%' . $searchTerm . '%' );\n            }\n        }\n        /*\n         * Order By\n         */\n        if ($request->has ( 'order' )) {\n            if ($request->input ( 'order.0.column' ) != '') {\n                $orderColumn = $request->input ( 'order.0.column' );\n                $orderDirection = $request->input ( 'order.0.dir' );\n                $jobs->orderBy ( $columns [intval ( $orderColumn )], $orderDirection );\n            }\n        }\n        // Get the real count after being filtered by Where Clause\n        $totalFiltered = $users->count ();\n        // Data to client\n        $jobs = $users->skip ( $start )->take ( $length );\n\n        /*\n         * Execute the query\n         */\n        $users = $users->get ();\n        /*\n        * We built the structure required by BootStrap datatables\n        */\n        $data = array ();\n        foreach ( $users as $user ) {\n            $nestedData = array ();\n            $nestedData [0] = $user->user_name;\n            $nestedData [1] = $job->email;\n            $nestedData [2] = $job->dob;\n            $nestedData [3] = $job->id;\n            $data [] = $nestedData;\n        }\n        /*\n        * This below structure is required by Datatables\n        */ \n        $tableContent = array (\n                \"draw\" => intval ( $request->input ( 'draw' ) ), // for every request/draw by clientside , they send a number as a parameter, when they recieve a response/data they first check the draw number, so we are sending same number in draw.\n                \"recordsTotal\" => intval ( $totalData ), // total number of records\n                \"recordsFiltered\" => intval ( $totalFiltered ), // total number of records after searching, if there is no searching then totalFiltered = totalData\n                \"data\" => $data\n        );\n        return $tableContent;\n    }\n\n\n\nV. Conclusion\nWe created an example of using Bootstrap datatables with most used functions above. The css of each cell can be changed on serverside by specifying directly in nestData[]. For example :\n\n$nestedData [1] = '<small class=\"label bg-' . $user->display . '\">' .  $user->email . '</small>';\n\n\nThis will display email in label format  coresponding display option used for email ( bg-green for example). \nThis is a very simple example but might help who want to work with Boostrap table at first.\n# I. What is bootstrap datatable\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. The more details and examples can be found at the following URL : [https://datatables.net/](http://)\n# II. How to mix them up \n## a. Creating a new laravel project \nProject creation will not be described here but basic steps can be found easily at Laravel's home page's installation section :\nURL :  [https://laravel.com/docs/master/](http://)\nI myself prefred the installation via composer\n```\ncomposer create-project --prefer-dist laravel/laravel MyProject\n```\n## b. Install datatables bootstrap : \nThe fastest way to get started with DataTables is to use the download builder. With this tool you can build a customised DataTables package, selecting the software that you wish to use in various combinations of styling and related packages to suit your needs.\nURL : [https://datatables.net/download/index](http://)\nLibrary size is important in web applications - the more code there is, the longer it takes to download and parse for the end user's browser. As such, only libraries that you actually need should be selected (this is why there is no \"select all\" option!).\n\nDownloaded library will be put into project folder like below \n![](https://cdn.scotch.io/3567/x0RWxV97Q8assPjKSFcg_%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202016-08-31%2010.53.12.png)\n\n## c. Library inclusion\nWe need to link the downloaded library to our view (blade file) :\n\n* CSS part\n\n```HTML/CSS\n<head>\n  <!-- DataTables -->\n  <link rel=\"stylesheet\" href=\"{{ asset('/plugins/datatables/jquery.dataTables.css')}}\">\n</head>\n```\n* Javascript part\n\n```javascript\n<!-- DataTables -->\n<script src=\"{{ asset('/plugins/datatables/jquery.dataTables.min.js')}}\"></script>\n```\n## d. Plugin Initialization\nBasically we will draw the wireframe of our table first using HTML like below\n\n```html\n\n<div class=\"row\">\n\t<div class= \"col-md-12\">\n\t\t<div class=\"box box-info\">\n\t\t\t<div class=\"box-header with-border\">\n\t\t\t\t<h3 class=\"box-title\">Users List'</h3>\n\t\t\t</div>\n\t\t\t<!-- /.box-header -->\n\t\t\t<div class=\"box-body\">\n\t\t\t\t<div class=\"table-responsive\">\n\t\t\t\t\t<table class=\"display\" cellspacing=\"0\" width=\"100%\" id = \"dataTable\" name =\"dataTable\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>User Name</th>\n\t\t\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t\t\t<th>DOB</th>\n\t\t\t\t\t\t\t\t<th>UserID</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<!-- /.table-responsive -->\n\t\t\t</div>\n\t\t\t<!-- /.box-body -->\n\t\t</div>\t\t\t\t\n\t</div>\n</div>\n\n```\n\nNote that we left the `<tbody>` part to be blank and data will be filled later by serverside. The last column named UserID will be added to demonstrate the ability of having hidden column. What we are going to do is to load the user's list which has specified Group ID (input text group_id ) . Plugin's initialization will be like below:\n\n```js\n\nvar dataTable = $('#dataTable').DataTable(\n\t{\n\t\t\"paging\": true, // Allow data to be paged\n\t\t \"lengthChange\": false,\n\t\t\"searching\": true, // Search box and search function will be actived\n\t\t\"ordering\": true,\n\t\t\"info\": true,\n\t\t\"autoWidth\": true,\n\t\t \"processing\": true,  // Show processing \n\t\t \"serverSide\": true,  // Server side processing\n\t\t  \"deferLoading\": 0, // In this case we want the table load on request so initial automatical load is not desired\n\t\t  \"pageLength\": 5,    // 5 rows per page\n\t\t        \"ajax\":{\n\t\t\t  url :  '',\n\t\t            type : \"POST\",\n\t\t            dataType: 'json',\n\t\t            error: function(data){\n\t\t                console.log(data);\n\t\t            }\n\t\t        },\n\t\t        // aoColumnDefs allow us to specify which column we want to make\n\t\t        // sortable or column's alignment\n\t\t        \"aoColumnDefs\": [\n\t\t\t\t{ 'bSortable': false, 'aTargets': [0,1] }\t,\n\t\t\t\t{ className: \"dt-center\", \"aTargets\": [0,1,2,3] },\n\t\t\t],\n\t\t\t\"columns\": [\n\t\t\t\t    null,\n\t\t\t\t    null,\n\t\t\t\t    null,\t\t\t\t\n\t\t\t\t    { \"visible\": false }, //The last column will be invisible\n\t\t\t\t],\n\t\t\t\t\n\t});\n\t$('#button').on('click',  function () {\n\tvar resourceURL = \"{{route('user.datatables',['group_id'=>':group_id'])}}\";\n\tvar group_id = 1; //Default group id\n\tgroup_id = $('#group_id').val(); //Get the value of input text \n\tresourceURL = resourceURL.replace(\":group_id\", group_id); // Build the route\n\t\n\t/*\n\t* Change the URL of dataTable and call ajax to load new data\n\t*/\n\tdataTable.ajax.url(targetUrl).load();\n\tdataTable.draw();\n} );\n\n```\n\nNote the technique that we used replace function to build the route dynamically. \n\n# III. Route definition \n\n```php\n\nRoute::post('user/{group_id}/datatables', ['as' => 'user.datatables','uses'=>'UserController@usersByGroupDatatables']);\n\n```\nThe route we used as datatables's ajax url is defined above telling that function usersByGroupDatatables of UserController will be called to fetch datatable. \n\n# VI. Serverside logic\n\nIn this part, we will write logic code to handle fetching data from serverside:\n\n```php\n\npublic function usersByGroupDatatables(Request $request, $type, $group_id){\n\t\t// The columns variable is used for sorting\n\t\t$columns = array (\n\t\t\t\t// datatable column index => database column name\n\t\t\t\t0 =>'user_name',\n\t\t\t\t1 =>'email',\n\t\t\t\t2 =>'dob',\n\t\t\t\t3 =>'id',\n\t\t);\n\t\t//Getting the data\n\t\t$users = DB::table ( 'users' )\n\t\t->where('users.group_id','=',$group_id)\n\t\t->select ( 'users.id',\n\t\t\t'users.user_name',\n\t\t\t'users.email',\n\t\t\t'users.dob',\n\t\t);\n\t\t$totalData = $users->count ();            //Total record\n\t\t$totalFiltered = $totalData;      // No filter at first so we can assign like this\n\t\t// Here are the parameters sent from client for paging \n\t\t$start = $request->input ( 'start' );           // Skip first start records\n\t\t$length = $request->input ( 'length' );   //  Get length record from start\n\t\t/*\n\t\t * Where Clause\n\t\t */\n\t\tif ($request->has ( 'search' )) {\n\t\t\tif ($request->input ( 'search.value' ) != '') {\n\t\t\t\t$searchTerm = $request->input ( 'search.value' );\n\t\t\t\t/*\n\t\t\t\t* Seach clause : we only allow to search on user_name field\n\t\t\t\t*/\n\t\t\t\t$candidates->where ( 'users.user_name', 'Like', '%' . $searchTerm . '%' );\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * Order By\n\t\t */\n\t\tif ($request->has ( 'order' )) {\n\t\t\tif ($request->input ( 'order.0.column' ) != '') {\n\t\t\t\t$orderColumn = $request->input ( 'order.0.column' );\n\t\t\t\t$orderDirection = $request->input ( 'order.0.dir' );\n\t\t\t\t$jobs->orderBy ( $columns [intval ( $orderColumn )], $orderDirection );\n\t\t\t}\n\t\t}\n\t\t// Get the real count after being filtered by Where Clause\n\t\t$totalFiltered = $users->count ();\n\t\t// Data to client\n\t\t$jobs = $users->skip ( $start )->take ( $length );\n\t\t\n\t\t/*\n\t\t * Execute the query\n\t\t */\n\t\t$users = $users->get ();\n\t\t/*\n\t\t* We built the structure required by BootStrap datatables\n\t\t*/\n\t\t$data = array ();\n\t\tforeach ( $users as $user ) {\n\t\t\t$nestedData = array ();\n\t\t\t$nestedData [0] = $user->user_name;\n\t\t\t$nestedData [1] = $job->email;\n\t\t\t$nestedData [2] = $job->dob;\n\t\t\t$nestedData [3] = $job->id;\n\t\t\t$data [] = $nestedData;\n\t\t}\n\t\t/*\n\t\t* This below structure is required by Datatables\n\t\t*/ \n\t\t$tableContent = array (\n\t\t\t\t\"draw\" => intval ( $request->input ( 'draw' ) ), // for every request/draw by clientside , they send a number as a parameter, when they recieve a response/data they first check the draw number, so we are sending same number in draw.\n\t\t\t\t\"recordsTotal\" => intval ( $totalData ), // total number of records\n\t\t\t\t\"recordsFiltered\" => intval ( $totalFiltered ), // total number of records after searching, if there is no searching then totalFiltered = totalData\n\t\t\t\t\"data\" => $data\n\t\t);\n\t\treturn $tableContent;\n\t}\n\n```\n# V. Conclusion\nWe created an example of using Bootstrap datatables with most used functions above. The css of each cell can be changed on serverside by specifying directly in nestData[]. For example :\n\n```php\n\n$nestedData [1] = '<small class=\"label bg-' . $user->display . '\">' .  $user->email . '</small>';\n\n```\nThis will display email in label format  coresponding display option used for email ( bg-green for example). \n\nThis is a very simple example but might help who want to work with Boostrap table at first.\n"}