{"tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"], "context": " More than 1 year has passed since last update.Tree Edit Distance \u3068\u306f\u6728\u69cb\u9020\u540c\u58eb\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3084html\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020, URL \u306a\u3069\u6728\u69cb\u9020\u3068\u3057\u3066\u8868\u305b\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u591a\u304f\u3001\u305d\u308c\u3089\u306e\u69cb\u9020\u304c\u3069\u306e\u304f\u3089\u3044\u8fd1\u3044\u304b\u8ddd\u96e2\u3092\u6c42\u3081\u305f\u3044\u6642\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7684\u306ahtml\u30da\u30fc\u30b8\u3092\u81ea\u52d5\u7684\u306b\u5224\u65ad\u3057\u3066\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b Tree Edit Distance \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ngoogle \u306e\u691c\u7d22\u7d50\u679c\u3084\u3050\u308b\u30ca\u30d3\u306e\u8a73\u7d30\u30da\u30fc\u30b8\u306a\u3069\u3042\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5143\u306b\u3057\u305f\u30da\u30fc\u30b8\u306e\u307f\u3092\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u78ba\u304b\u306b\u500b\u5225\u306b\u305d\u308c\u3089\u306e\u30da\u30fc\u30b8\u3092\u6b63\u898f\u8868\u73fe\u306a\u3069\u3067\u5224\u65ad\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u76ee\u7684\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30da\u30fc\u30b8\u3068\u30ea\u30f3\u30af\u5148\u306ehtml\u306e\u6728\u69cb\u9020\u304c\u3069\u306e\u304f\u3089\u3044\u8fd1\u3044\u304b\u3092\u6bd4\u3079\u308b\u3053\u3068\u3067\u6c4e\u7528\u7684\u304b\u3064\u52b9\u7387\u7684\u306b\u5224\u65ad\u3067\u304d\u305d\u3046\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3070\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u751f\u6210\u3055\u308c\u305f\u30da\u30fc\u30b8\u306fhtml\u30ce\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u8eab\u306f\u9055\u3048\u3069 html \u306e\u69cb\u9020\u81ea\u4f53\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3053\u3068\u304c\u591a\u3044\u304b\u3089\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u6728\u69cb\u9020\u306e\u8ddd\u96e2\u540c\u58eb\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c6\u30ad\u30b9\u30c8\u306e\u7cfb\u5217\u3092\u6bd4\u8f03\u3059\u308b EditDistanceEditDistance Edit Distance  \u306e\u6728\u69cb\u9020\u304c\u7248\u304c\u3042\u308c\u3070\u4e0a\u624b\u304f\u3044\u304f\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\u3092\u8abf\u3079\u305f\u3089\u4e01\u5ea6\u3044\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u8a08\u7b97\u65b9\u6cd5\n\u57fa\u672c\u7684\u306b\u306f PFI \u306e\u6280\u8853\u30d6\u30ed\u30b0\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u624b\u6cd5 \u3092\u8e0f\u8972\u3057\u307e\u3059\u3002Klein \u306e\u65b9\u6cd5\u3068\u3044\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f\u4e0a\u8a18\u306e\u6280\u8853\u30d6\u30ed\u30b0\u3092\u8aad\u8005\u304c\u8aad\u3093\u3060\u524d\u63d0\u3067\u3001\u81ea\u5206\u304c\u5de5\u592b\u3057\u305f\u70b9\u3092\u4e2d\u5fc3\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7c21\u6f54\u306b\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u306f\u5c11\u3057\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u68ee\u3092\u8868\u3059\u305f\u3081\u306b\u5de6\u3068\u53f3\u306e\u7bc4\u56f2\u3092\u8868\u30592\u3064\u306e\u6570\u5024\u3092\u8a18\u61b6\u3055\u305b\u3066\u518d\u5e30\u7684\u306b\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u4e8c\u3064\u306e\u8ddd\u96e2\u3092\u9589\u533a\u9593\u3067\u306f\u306a\u304f\u534a\u9589\u533a\u9593\u3068\u3057\u3066\u8a18\u61b6\u3059\u308b\u3068\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u6570\u5024\u3092\n[A,B][A,B] \n[A, B] \n\n\u3067\u306f\u306a\u304f\n[A,B)[A,B) \n[A, B) \n\n\u3068\u3057\u3066\u8a18\u61b6\u3055\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u8a18\u61b6\u3055\u305b\u308b\u7406\u7531\u306f [A,B)[A,B) [A, B)  \u3092\u305d\u306e\u9593\u306e\u5024 CC C  \u306b\u5206\u3051\u3066\u8a18\u8ff0\u3059\u308b\u969b\n[A,B)=[A,C)\u222a[C,B)[A,B)=[A,C)\u222a[C,B) \n[A, B) = [A, C) \\cup [C, B) \n\n\u3068\u540c\u3058\u534a\u9589\u533a\u9593\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u30642\u3064\u306e\u96c6\u5408\u306b\u5206\u5272\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\u518d\u5e30\u7684\u306b\u8a18\u8ff0\u3059\u308b\u969b\u306b\u306f\u3053\u306e\u3088\u3046\u306b2\u3064\u306e\u540c\u3058\u5c5e\u6027\u3092\u3082\u3063\u305f\u96c6\u5408\u306b\u5206\u5272\u3067\u304d\u308b\u3068\u4f8b\u5916\u3092\u8a18\u8ff0\u3057\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\u30022\u5206\u63a2\u7d22\u306a\u3069\u3092\u534a\u9589\u533a\u9593\u3067\u5b9f\u88c5\u3059\u308b\u3068\u7c21\u6f54\u306b\u66f8\u3051\u308b\u306e\u306f\u3053\u308c\u3068\u540c\u3058\u7406\u7531\u3067\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5165\u308b\u524d\u306b\u3044\u304f\u3064\u304b\u7528\u8a9e\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u68ee\u306e\u305d\u308c\u305e\u308c\u306e\u6728\u3092 T1,T2,...TnT1,T2,...Tn T_1, T_2, ... T_n  \u3068\u3057\u305f\u6642\u306b\u518d\u5e30\u7684\u306b\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u5fc5\u8981\u3068\u306a\u308b\u306e\u306f TnTn T_n  \u306e\u7bc4\u56f2\u3060\u3051\u3067\u3059\u3002\u305d\u3053\u3067\u68ee F={T1,...,Tn}F={T1,...,Tn} F = \\{T_1, ..., T_n\\}  \u3092\u5165\u529b\u3068\u3057\u3066\u6700\u3082\u53f3\u7aef\u306e\u6728\u3067\u30eb\u30fc\u30c8\u3092\u9664\u3044\u305f\u68ee\u3092\u8fd4\u3059\u95a2\u6570\u3092 Rtf(F)Rtf(F) Rtf(F)  \u3068\u3057\u307e\u3059\u3002 RtfRtf Rtf  \u306f RightmostForestRightmostForest RightmostForest  \u306e\u7565\u79f0\u3067\u3059\u3002\u307e\u305f\u68ee\u306f\u5e30\u308a\u304c\u3051\u3067\u756a\u53f7\u3092\u632f\u308b\u30682\u3064\u306e\u7bc4\u56f2\u3060\u3051\u3092\u8a18\u61b6\u3057\u3066\u304a\u3051\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u308c\u3092 [F.L,F.R)[F.L,F.R) [F.L, F.R)  \u3067\u305d\u308c\u305e\u308c\u7bc4\u56f2\u3092\u8868\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u4eca\u56de\u5fc5\u8981\u306a\u306e\u306f F,Rtf(F)F,Rtf(F) F, Rtf(F)  \u304b\u3089\u4ee5\u4e0b\u306e\u6570\u5024\u306e\u7bc4\u56f2\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u6700\u3082\u53f3\u7aef\u306e\u6728\u306e\u5b50\u4f9b\u306e\u90e8\u5206 Children(Tn)Children(Tn) Children(T_n)  \n\u53f3\u7aef\u306e\u6728\u3092\u9664\u3044\u305f {T1,...,Tn\u22121}{T1,...,Tn\u22121} \\{T_1, ..., T_{n-1} \\} \n\u53f3\u7aef\u306e\u6728\u306e\u30eb\u30fc\u30c8\u90e8\u5206\u306e\u307f\u3092\u9664\u3044\u305f {T1,...,Tn\u22121,Children(Tn)}{T1,...,Tn\u22121,Children(Tn)} \\{T_1, ..., T_{n-1}, Children(T_n)\\} \n\n\u3053\u308c\u3089\u306f\u5168\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b 2 \u3064\u306e\u6570\u5024\u306e\u7bc4\u56f2\u3067\u8868\u305b\u307e\u3059\u3002\n\n\u6700\u3082\u53f3\u7aef\u306e\u6728\u306e\u5b50\u4f9b\u306e\u90e8\u5206 Children(Tn)Children(Tn) Children(T_n)  \u306f  [Rtf(F).L,\u00a0Rt(F).R)[Rtf(F).L,\u00a0Rt(F).R) [Rtf(F).L,~ Rt(F).R) \n{T1,...,Tn\u22121}{T1,...,Tn\u22121} \\{T_1, ..., T_{n-1}\\}  \u306f [F.L,\u00a0Rtf(F).R)[F.L,\u00a0Rtf(F).R) [F.L,~Rtf(F).R) \n\u53f3\u7aef\u306e\u6728\u306e\u30eb\u30fc\u30c8\u3092\u9664\u3044\u305f\u90e8\u5206 F={T1,...,Tn\u22121,Children(Tn)}F={T1,...,Tn\u22121,Children(Tn)} F = \\{T_1, ..., T_{n-1}, Children(T_n) \\}  \u306f [F.L,\u00a0Rtf(F).R)[F.L,\u00a0Rtf(F).R) [F.L,~Rtf(F).R) \n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u5143\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f \nchilddistancetailforestdistanced(F1,F2)d(F1,{})d({},F2)=====d({Rtf(F1).L,\u00a0Rtf(F1).R},\u00a0{Rtf(F2).L,\u00a0Rtf(F2).R})d({F1.L,\u00a0Rtf(F1).L},\u00a0{F2.L,\u00a0Rtf(F2).L})min{childdistance+tailforestdistance+1,d({F1.L,\u00a0Rtf(F1).R},\u00a0F2),d(F1,\u00a0{F2.L,\u00a0Rtf(F2).R})}F1.R\u2212F1.LF2.R\u2212F2.Lchilddistance=d({Rtf(F1).L,\u00a0Rtf(F1).R},\u00a0{Rtf(F2).L,\u00a0Rtf(F2).R})tailforestdistance=d({F1.L,\u00a0Rtf(F1).L},\u00a0{F2.L,\u00a0Rtf(F2).L})d(F1,F2)=min{childdistance+tailforestdistance+1,d({F1.L,\u00a0Rtf(F1).R},\u00a0F2),d(F1,\u00a0{F2.L,\u00a0Rtf(F2).R})}d(F1,{})=F1.R\u2212F1.Ld({},F2)=F2.R\u2212F2.L \n\\begin{eqnarray} \nchild_{distance} & = & d(\\{Rtf(F1).L,~ Rtf(F1).R\\},~ \\{Rtf(F2).L,~ Rtf(F2).R\\}) \\\\ \ntailforest_{distance} & = & d(\\{F1.L,~ Rtf(F1).L\\},~ \\{F2.L,~ Rtf(F2).L\\}) \\\\ \nd(F1, F2) & = & min \\{ child_{distance} + tailforest_{distance} + 1, \\\\ \n& & d(\\{F1.L,~ Rtf(F1).R\\},~ F2), \\\\ \n& & d(F1,~ \\{F2.L,~ Rtf(F2).R\\}) \\} \\\\ \nd(F1, \\{\\}) & = & F1.R - F1.L \\\\ \nd(\\{\\}, F2) & = & F2.R - F2.L \\\\ \n\\end{eqnarray} \n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u8a08\u7b97\u3055\u305b\u308b\u969b\u306f (F1.R,F1.L,F2.L,F2.R)(F1.R,F1.L,F2.L,F2.R) (F1.R, F1.L, F2.L, F2.R)  \u306b\u5bfe\u3057\u3066\u30e1\u30e2\u5316\u3092\u884c\u308f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u53c2\u8003\u307e\u3067\u306b ruby \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002 \u6728\u69cb\u9020\u306f hash \u3067\u8868\u3057\u3001\u8449\u304b\u3069\u3046\u304b\u306f\u6700\u5f8c\u306b :end:end :end  \u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\n# coding: utf-8\nrequire 'digest/md5'\n\ndef intern(a, b)\n  Digest::MD5.hexdigest(\"#{a}:#{b}\")\nend\n\nclass Node\n  attr_accessor :children, :parent, :v\n  def initialize(v, children)\n    @v = v\n    @children = children\n    @parent = self\n  end\n  def allnodes\n    [@parent] + @children\n  end\n  def count\n    return 1 if self.children == []\n    return @children.map {|x| x.count }.reduce(&:+) + 1\n  end\n  def dfs\n    return self.v if self.children == []\n    return self.children[0].dfs\n  end\n  def to_s\n    v = \"#{self.v[:index]}-#{self.v[:value]}\"\n    return v if self.children == []\n    return \"(#{v} [\" + self.children.map {|x| x.to_s}.join(\" \") + \"])\"\n  end\nend\n\ndef makeNode(parent)\n  return [] if parent == :end\n  parent.map do |k, child|\n    Node.new(k, makeNode(child))\n  end\nend\n\ndef linkParent(node)\n  return if node.children == :end\n  node.children.each do |child|\n    child.parent = node\n    linkParent(child)\n  end\nend\n\ndef index(tree)\n  @index_to_tree = []\n  def inner(subtree, index)\n    return index if subtree.children == :end\n    subtree.children.each do |x|\n      index = inner(x, index)\n    end\n    name = subtree.v\n    subtree.v = {}\n    subtree.v[:value] = name\n    subtree.v[:index] = index\n    @index_to_tree[index] = subtree\n    return index + 1\n  end\n  inner(tree, 0)\n  return tree, @index_to_tree\nend\n\ndef makeTree(node)\n  t, index = index(makeNode(node)[0])\n  linkParent(t)\n  return t, index\nend\n\nclass Forest\n  attr_accessor :index, :r, :l\n  def initialize(l:, r:, index:)\n    raise \"error: l:#{l} > r:#{r}\" if l > r\n    @l = l\n    @r = r\n    @index = index\n  end\n  def rightmost_forest\n    r = @r - 1\n    trace = {r => true}\n    t = r - 1\n    loop do\n      if t == -1\n        break\n      end\n      parent = index[t].parent.v[:index]\n      if trace.include? parent\n        trace[t] = true\n      else\n        break\n      end\n      t -= 1\n    end\n    return {:l => (t + 1), :r => r}\n  end\n  def root\n    @index[@r-1].v\n  end\n  def count\n    @r - @l\n  end\n  def empty?\n    @l == @r\n  end\nend\n\n# xforest = [A, B)\ndef calc_ted_distance(xforest, yforest)\n  x = intern(xforest.l, xforest.r)\n  y = intern(yforest.l, yforest.r)\n\n  @memo ||= {}\n  @memo[x] ||= {}\n  return @memo[x][y] if @memo[x].include? y\n\n  return yforest.count if xforest.empty?\n  return xforest.count if yforest.empty?\n\n  xrtree = xforest.rightmost_forest\n  yrtree = yforest.rightmost_forest\n\n  a = calc_ted_distance(\n    Forest.new(l: xrtree[:l],\n               r: xrtree[:r],\n               index: xforest.index),\n    Forest.new(l: yrtree[:l],\n               r: yrtree[:r],\n               index: yforest.index)) # child \n  b = calc_ted_distance(\n    Forest.new(l: xforest.l,\n               r: xrtree[:l],\n               index: xforest.index),\n    Forest.new(l: yforest.l,\n               r: yrtree[:l],\n               index: yforest.index)) # neighbor\n  p = if xforest.root[:value] == yforest.root[:value] then 0 else 1 end\n  v1 = a + b + p\n  v2 = calc_ted_distance(\n    xforest,\n    Forest.new(l: yforest.l,\n               r: yrtree[:r],\n               index: yforest.index)) + 1 # remove\n  v3 = calc_ted_distance(\n    Forest.new(l: xforest.l,\n               r: xrtree[:r],\n               index: xforest.index), # add\n    yforest) + 1\n  v = [v1, v2, v3].min\n  p \"(#{xforest.root[:value]} #{yforest.root[:value]})\" +\n    \" #{xforest.l}:#{xforest.r}\" +\n    \" #{yforest.l}:#{yforest.r}\" +\n    \" #{v} [#{v1} #{v2} #{v3}] [#{a} #{b} #{p}]\"\n  return @memo[x][y] = v\nend\n\ndef calc_ted(tree1, tree2)\n  t1, i1 = makeTree(tree1)\n  t2, i2 = makeTree(tree2)\n  calc_ted_distance(\n    Forest.new(l: 0, r: t1.count, index: i1),\n    Forest.new(l: 0, r: t2.count, index: i2))\nend\n\ntree1 = {:a =>\n         {:b =>\n          {:d => {:l => {:m => :end, :n => :end}},\n           :f => :end,\n           :e => {:i => :end, :j => :end}},\n          :c => {\n            :g => {:o => {:p => {:q => :end}}, :r => :end},\n            :s => :end,\n            :h => {:k => :end,\n                   :t => {:u => :end}}}}}\n\ntree2 = {:a =>\n         {:b =>\n          {:d => :end,\n           :f => :end,\n           :x => :end,\n           :e => {:i => :end, :j => :end}},\n          :c => {\n            :g => :end,\n            :h => {:k => :end}}}}\np calc_ted(tree1, tree2)\n\n\n\nTree Edit Distance \u3068\u306f\u6728\u69cb\u9020\u540c\u58eb\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3084html\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020, URL \u306a\u3069\u6728\u69cb\u9020\u3068\u3057\u3066\u8868\u305b\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u591a\u304f\u3001\u305d\u308c\u3089\u306e\u69cb\u9020\u304c\u3069\u306e\u304f\u3089\u3044\u8fd1\u3044\u304b\u8ddd\u96e2\u3092\u6c42\u3081\u305f\u3044\u6642\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7684\u306ahtml\u30da\u30fc\u30b8\u3092\u81ea\u52d5\u7684\u306b\u5224\u65ad\u3057\u3066\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b Tree Edit Distance \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\ngoogle \u306e\u691c\u7d22\u7d50\u679c\u3084\u3050\u308b\u30ca\u30d3\u306e\u8a73\u7d30\u30da\u30fc\u30b8\u306a\u3069\u3042\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5143\u306b\u3057\u305f\u30da\u30fc\u30b8\u306e\u307f\u3092\u30af\u30ed\u30fc\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u78ba\u304b\u306b\u500b\u5225\u306b\u305d\u308c\u3089\u306e\u30da\u30fc\u30b8\u3092\u6b63\u898f\u8868\u73fe\u306a\u3069\u3067\u5224\u65ad\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001**\u76ee\u7684\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30da\u30fc\u30b8\u3068\u30ea\u30f3\u30af\u5148\u306ehtml\u306e\u6728\u69cb\u9020\u304c\u3069\u306e\u304f\u3089\u3044\u8fd1\u3044\u304b\u3092\u6bd4\u3079\u308b\u3053\u3068\u3067\u6c4e\u7528\u7684\u304b\u3064\u52b9\u7387\u7684\u306b\u5224\u65ad\u3067\u304d\u305d\u3046\u3067\u3059\u3002**\u306a\u305c\u306a\u3089\u3070\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u751f\u6210\u3055\u308c\u305f\u30da\u30fc\u30b8\u306fhtml\u30ce\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u4e2d\u8eab\u306f\u9055\u3048\u3069 html \u306e\u69cb\u9020\u81ea\u4f53\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3053\u3068\u304c\u591a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u6728\u69cb\u9020\u306e\u8ddd\u96e2\u540c\u58eb\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u306e\u7cfb\u5217\u3092\u6bd4\u8f03\u3059\u308b $ Edit Distance $ \u306e\u6728\u69cb\u9020\u304c\u7248\u304c\u3042\u308c\u3070\u4e0a\u624b\u304f\u3044\u304f\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\u3092\u8abf\u3079\u305f\u3089\u4e01\u5ea6\u3044\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## \u8a08\u7b97\u65b9\u6cd5\n\u57fa\u672c\u7684\u306b\u306f [PFI \u306e\u6280\u8853\u30d6\u30ed\u30b0\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u624b\u6cd5](https://research.preferred.jp/2012/02/tree-edit-distance/) \u3092\u8e0f\u8972\u3057\u307e\u3059\u3002Klein \u306e\u65b9\u6cd5\u3068\u3044\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u3067\u306f\u4e0a\u8a18\u306e\u6280\u8853\u30d6\u30ed\u30b0\u3092\u8aad\u8005\u304c\u8aad\u3093\u3060\u524d\u63d0\u3067\u3001\u81ea\u5206\u304c\u5de5\u592b\u3057\u305f\u70b9\u3092\u4e2d\u5fc3\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7c21\u6f54\u306b\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u306f\u5c11\u3057\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u68ee\u3092\u8868\u3059\u305f\u3081\u306b\u5de6\u3068\u53f3\u306e\u7bc4\u56f2\u3092\u8868\u30592\u3064\u306e\u6570\u5024\u3092\u8a18\u61b6\u3055\u305b\u3066\u518d\u5e30\u7684\u306b\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u306e\u3067\u3059\u304c\u3001**\u3053\u306e\u4e8c\u3064\u306e\u8ddd\u96e2\u3092\u9589\u533a\u9593\u3067\u306f\u306a\u304f\u534a\u9589\u533a\u9593\u3068\u3057\u3066\u8a18\u61b6\u3059\u308b**\u3068\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u6570\u5024\u3092\n\n$$\n[A, B]\n$$\n\n\u3067\u306f\u306a\u304f\n\n$$\n[A, B)\n$$\n\n\u3068\u3057\u3066\u8a18\u61b6\u3055\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u8a18\u61b6\u3055\u305b\u308b\u7406\u7531\u306f $ [A, B) $ \u3092\u305d\u306e\u9593\u306e\u5024 $ C $ \u306b\u5206\u3051\u3066\u8a18\u8ff0\u3059\u308b\u969b\n\n$$\n[A, B) = [A, C) \\cup [C, B)\n$$\n\n\u3068\u540c\u3058\u534a\u9589\u533a\u9593\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u30642\u3064\u306e\u96c6\u5408\u306b\u5206\u5272\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002**\u518d\u5e30\u7684\u306b\u8a18\u8ff0\u3059\u308b\u969b\u306b\u306f\u3053\u306e\u3088\u3046\u306b2\u3064\u306e\u540c\u3058\u5c5e\u6027\u3092\u3082\u3063\u305f\u96c6\u5408\u306b\u5206\u5272\u3067\u304d\u308b\u3068\u4f8b\u5916\u3092\u8a18\u8ff0\u3057\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\u3002**2\u5206\u63a2\u7d22\u306a\u3069\u3092\u534a\u9589\u533a\u9593\u3067\u5b9f\u88c5\u3059\u308b\u3068\u7c21\u6f54\u306b\u66f8\u3051\u308b\u306e\u306f\u3053\u308c\u3068\u540c\u3058\u7406\u7531\u3067\u3059\u3002\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5165\u308b\u524d\u306b\u3044\u304f\u3064\u304b\u7528\u8a9e\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u68ee\u306e\u305d\u308c\u305e\u308c\u306e\u6728\u3092 $ T_1, T_2, ... T_n $ \u3068\u3057\u305f\u6642\u306b\u518d\u5e30\u7684\u306b\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u5fc5\u8981\u3068\u306a\u308b\u306e\u306f $ T_n $ \u306e\u7bc4\u56f2\u3060\u3051\u3067\u3059\u3002\u305d\u3053\u3067\u68ee $ F = \\\\{T_1, ..., T_n\\\\} $ \u3092\u5165\u529b\u3068\u3057\u3066\u6700\u3082\u53f3\u7aef\u306e\u6728\u3067\u30eb\u30fc\u30c8\u3092\u9664\u3044\u305f\u68ee\u3092\u8fd4\u3059\u95a2\u6570\u3092 $ Rtf(F) $ \u3068\u3057\u307e\u3059\u3002 $ Rtf $ \u306f $ RightmostForest $ \u306e\u7565\u79f0\u3067\u3059\u3002\u307e\u305f\u68ee\u306f\u5e30\u308a\u304c\u3051\u3067\u756a\u53f7\u3092\u632f\u308b\u30682\u3064\u306e\u7bc4\u56f2\u3060\u3051\u3092\u8a18\u61b6\u3057\u3066\u304a\u3051\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u308c\u3092 $ [F.L, F.R) $ \u3067\u305d\u308c\u305e\u308c\u7bc4\u56f2\u3092\u8868\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u5fc5\u8981\u306a\u306e\u306f $ F, Rtf(F) $ \u304b\u3089\u4ee5\u4e0b\u306e\u6570\u5024\u306e\u7bc4\u56f2\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002\n\n- \u6700\u3082\u53f3\u7aef\u306e\u6728\u306e\u5b50\u4f9b\u306e\u90e8\u5206 $ Children(T_n) $ \n- \u53f3\u7aef\u306e\u6728\u3092\u9664\u3044\u305f $ \\\\{T_1, ..., T_{n-1} \\\\} $\n- \u53f3\u7aef\u306e\u6728\u306e\u30eb\u30fc\u30c8\u90e8\u5206\u306e\u307f\u3092\u9664\u3044\u305f $ \\\\{T_1, ..., T_{n-1}, Children(T_n)\\\\} $\n\n\u3053\u308c\u3089\u306f\u5168\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b 2 \u3064\u306e\u6570\u5024\u306e\u7bc4\u56f2\u3067\u8868\u305b\u307e\u3059\u3002\n\n- \u6700\u3082\u53f3\u7aef\u306e\u6728\u306e\u5b50\u4f9b\u306e\u90e8\u5206 $ Children(T_n) $ \u306f  $ [Rtf(F).L,~ Rt(F).R) $\n- $ \\\\{T_1, ..., T_{n-1}\\\\} $ \u306f $ [F.L,~Rtf(F).R) $\n- \u53f3\u7aef\u306e\u6728\u306e\u30eb\u30fc\u30c8\u3092\u9664\u3044\u305f\u90e8\u5206 $ F = \\\\{T_1, ..., T_{n-1}, Children(T_n) \\\\} $ \u306f $ [F.L,~Rtf(F).R) $\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u5143\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f \n\n$$\n\\begin{eqnarray}\nchild_{distance} & = & d(\\\\{Rtf(F1).L,~ Rtf(F1).R\\\\},~ \\\\{Rtf(F2).L,~ Rtf(F2).R\\\\}) \\\\\\\ntailforest_{distance} & = & d(\\\\{F1.L,~ Rtf(F1).L\\\\},~ \\\\{F2.L,~ Rtf(F2).L\\\\}) \\\\\\\nd(F1, F2) & = & min \\\\{ child_{distance} + tailforest_{distance} + 1, \\\\\\\n& & d(\\\\{F1.L,~ Rtf(F1).R\\\\},~ F2), \\\\\\\n& & d(F1,~ \\\\{F2.L,~ Rtf(F2).R\\\\}) \\\\} \\\\\\\nd(F1, \\\\{\\\\}) & = & F1.R - F1.L \\\\\\\nd(\\\\{\\\\}, F2) & = & F2.R - F2.L \\\\\\\n\\end{eqnarray}\n$$\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u8a08\u7b97\u3055\u305b\u308b\u969b\u306f $ (F1.R, F1.L, F2.L, F2.R) $ \u306b\u5bfe\u3057\u3066\u30e1\u30e2\u5316\u3092\u884c\u308f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u53c2\u8003\u307e\u3067\u306b ruby \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002 \u6728\u69cb\u9020\u306f hash \u3067\u8868\u3057\u3001\u8449\u304b\u3069\u3046\u304b\u306f\u6700\u5f8c\u306b $ :end $ \u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\n\n```ruby\n# coding: utf-8\nrequire 'digest/md5'\n\ndef intern(a, b)\n  Digest::MD5.hexdigest(\"#{a}:#{b}\")\nend\n\nclass Node\n  attr_accessor :children, :parent, :v\n  def initialize(v, children)\n    @v = v\n    @children = children\n    @parent = self\n  end\n  def allnodes\n    [@parent] + @children\n  end\n  def count\n    return 1 if self.children == []\n    return @children.map {|x| x.count }.reduce(&:+) + 1\n  end\n  def dfs\n    return self.v if self.children == []\n    return self.children[0].dfs\n  end\n  def to_s\n    v = \"#{self.v[:index]}-#{self.v[:value]}\"\n    return v if self.children == []\n    return \"(#{v} [\" + self.children.map {|x| x.to_s}.join(\" \") + \"])\"\n  end\nend\n\ndef makeNode(parent)\n  return [] if parent == :end\n  parent.map do |k, child|\n    Node.new(k, makeNode(child))\n  end\nend\n\ndef linkParent(node)\n  return if node.children == :end\n  node.children.each do |child|\n    child.parent = node\n    linkParent(child)\n  end\nend\n\ndef index(tree)\n  @index_to_tree = []\n  def inner(subtree, index)\n    return index if subtree.children == :end\n    subtree.children.each do |x|\n      index = inner(x, index)\n    end\n    name = subtree.v\n    subtree.v = {}\n    subtree.v[:value] = name\n    subtree.v[:index] = index\n    @index_to_tree[index] = subtree\n    return index + 1\n  end\n  inner(tree, 0)\n  return tree, @index_to_tree\nend\n\ndef makeTree(node)\n  t, index = index(makeNode(node)[0])\n  linkParent(t)\n  return t, index\nend\n\nclass Forest\n  attr_accessor :index, :r, :l\n  def initialize(l:, r:, index:)\n    raise \"error: l:#{l} > r:#{r}\" if l > r\n    @l = l\n    @r = r\n    @index = index\n  end\n  def rightmost_forest\n    r = @r - 1\n    trace = {r => true}\n    t = r - 1\n    loop do\n      if t == -1\n        break\n      end\n      parent = index[t].parent.v[:index]\n      if trace.include? parent\n        trace[t] = true\n      else\n        break\n      end\n      t -= 1\n    end\n    return {:l => (t + 1), :r => r}\n  end\n  def root\n    @index[@r-1].v\n  end\n  def count\n    @r - @l\n  end\n  def empty?\n    @l == @r\n  end\nend\n\n# xforest = [A, B)\ndef calc_ted_distance(xforest, yforest)\n  x = intern(xforest.l, xforest.r)\n  y = intern(yforest.l, yforest.r)\n\n  @memo ||= {}\n  @memo[x] ||= {}\n  return @memo[x][y] if @memo[x].include? y\n  \n  return yforest.count if xforest.empty?\n  return xforest.count if yforest.empty?\n\n  xrtree = xforest.rightmost_forest\n  yrtree = yforest.rightmost_forest\n  \n  a = calc_ted_distance(\n    Forest.new(l: xrtree[:l],\n               r: xrtree[:r],\n               index: xforest.index),\n    Forest.new(l: yrtree[:l],\n               r: yrtree[:r],\n               index: yforest.index)) # child \n  b = calc_ted_distance(\n    Forest.new(l: xforest.l,\n               r: xrtree[:l],\n               index: xforest.index),\n    Forest.new(l: yforest.l,\n               r: yrtree[:l],\n               index: yforest.index)) # neighbor\n  p = if xforest.root[:value] == yforest.root[:value] then 0 else 1 end\n  v1 = a + b + p\n  v2 = calc_ted_distance(\n    xforest,\n    Forest.new(l: yforest.l,\n               r: yrtree[:r],\n               index: yforest.index)) + 1 # remove\n  v3 = calc_ted_distance(\n    Forest.new(l: xforest.l,\n               r: xrtree[:r],\n               index: xforest.index), # add\n    yforest) + 1\n  v = [v1, v2, v3].min\n  p \"(#{xforest.root[:value]} #{yforest.root[:value]})\" +\n    \" #{xforest.l}:#{xforest.r}\" +\n    \" #{yforest.l}:#{yforest.r}\" +\n    \" #{v} [#{v1} #{v2} #{v3}] [#{a} #{b} #{p}]\"\n  return @memo[x][y] = v\nend\n\ndef calc_ted(tree1, tree2)\n  t1, i1 = makeTree(tree1)\n  t2, i2 = makeTree(tree2)\n  calc_ted_distance(\n    Forest.new(l: 0, r: t1.count, index: i1),\n    Forest.new(l: 0, r: t2.count, index: i2))\nend\n\ntree1 = {:a =>\n         {:b =>\n          {:d => {:l => {:m => :end, :n => :end}},\n           :f => :end,\n           :e => {:i => :end, :j => :end}},\n          :c => {\n            :g => {:o => {:p => {:q => :end}}, :r => :end},\n            :s => :end,\n            :h => {:k => :end,\n                   :t => {:u => :end}}}}}\n\ntree2 = {:a =>\n         {:b =>\n          {:d => :end,\n           :f => :end,\n           :x => :end,\n           :e => {:i => :end, :j => :end}},\n          :c => {\n            :g => :end,\n            :h => {:k => :end}}}}\np calc_ted(tree1, tree2)\n\n```\n\n"}