{"context": "\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nDynamoDB\u306b\u5bfe\u3057\u3066batchWriteItem\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0/\u66f4\u65b0\u3002\n\n\u6ce8\u610f\u70b9\n1\u30ea\u30af\u30a8\u30b9\u30c8\u306725\u4ef6\u307e\u3067\n25\u4ef6\u306e\u767b\u9332\u306e\u4e00\u90e8\u304c\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001UnprocessedItems\u306b\u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u308b\u306e\u3067\u30ea\u30c8\u30e9\u30a4\u304c\u5fc5\u8981\u3002\n\n\u5b9f\u88c5\n'use strict';\n\nlet util = require('util');\nlet aws = require('aws-sdk');\n\naws.config.loadFromPath('./config/credentials.json');\nlet dynamodb = new aws.DynamoDB({apiVersion: '2012-08-10'});\n\n// \u683c\u7d0d\u30c7\u30fc\u30bf\u4f5c\u6210\nlet writeFuncs = new Array();\nfor (let i = 0; i < 5; i++) {\n    let putRequests = [];\n    for (let l = 0; l < 5; l++) {\n        let id = (i + 1) * l;\n        putRequests[l] = {\n            PutRequest : {\n                Item : {\n                    'id' : {'S' : id.toString()},\n                    'name' : {'S' : 'name' + id}\n                }\n            }\n        }\n    }\n\n    function doWriteItemCall() {\n        return doWriteItem({\n                RequestItems : {\n                    \"users\" : putRequests\n                }\n            });\n    }\n\n    writeFuncs[i] = doWriteItemCall;\n}\nwriteFuncs[5] = function () {\n    console.log('end');\n}\n// \u30c7\u30fc\u30bf\u8ffd\u52a0/\u66f4\u65b0\nconsole.log('start');\nsequenceTasks(writeFuncs);\n\nfunction doWriteItem(params) {\n    console.log('doWriteItem call');\n\n    return new Promise(function (resolve, reject) {\n        let callback = batchWriteItemCallback.bind(null, resolve, reject);\n        dynamodb\n            .batchWriteItem(params)\n            .on('complete', callback)\n            .send();\n    });\n}\n\n\nfunction batchWriteItemCallback(resolve, reject, response) {\n    let error = response.error;\n    let data = response.data;\n    console.log(error, data);\n    let callback = batchWriteItemCallback.bind(null, resolve,reject);\n\n    if (error) {\n        if (error.retryable) {\n            dynamodb\n                .batchWriteItem(response.request.param)\n                .on('complete', callback)\n                .send();\n        } else {\n            reject(error);\n        }\n    } else if('users' in data.UnprocessedItems) {\n        let params = {};\n        params.RequestItems = data.UnprocessedItems;\n        dynamodb\n            .batchWriteItem(params)\n            .on('complete', callback)\n            .send();\n    } else {\n        resolve();\n    }\n}\n\nfunction sequenceTasks(tasks) {\n    function recordValue(results, value) {\n        results.push(value);\n        return results;\n    }\n    // let pushValue = recordValue.bind(null, []);\n    return tasks.reduce(function (promise, task) {\n        console.log('reduce call');\n        return promise\n            .then(task)\n            // .then(pushValue)\n            ;\n    }, Promise.resolve());\n}\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\nDynamoDB\u306b\u5bfe\u3057\u3066batchWriteItem\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0/\u66f4\u65b0\u3002\n\n\n# \u6ce8\u610f\u70b9\n1\u30ea\u30af\u30a8\u30b9\u30c8\u306725\u4ef6\u307e\u3067\n25\u4ef6\u306e\u767b\u9332\u306e\u4e00\u90e8\u304c\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001UnprocessedItems\u306b\u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u308b\u306e\u3067\u30ea\u30c8\u30e9\u30a4\u304c\u5fc5\u8981\u3002\n\n# \u5b9f\u88c5\n``` javascript\n'use strict';\n\nlet util = require('util');\nlet aws = require('aws-sdk');\n\naws.config.loadFromPath('./config/credentials.json');\nlet dynamodb = new aws.DynamoDB({apiVersion: '2012-08-10'});\n\n// \u683c\u7d0d\u30c7\u30fc\u30bf\u4f5c\u6210\nlet writeFuncs = new Array();\nfor (let i = 0; i < 5; i++) {\n    let putRequests = [];\n    for (let l = 0; l < 5; l++) {\n        let id = (i + 1) * l;\n        putRequests[l] = {\n            PutRequest : {\n                Item : {\n                    'id' : {'S' : id.toString()},\n                    'name' : {'S' : 'name' + id}\n                }\n            }\n        }\n    }\n\n    function doWriteItemCall() {\n        return doWriteItem({\n                RequestItems : {\n                    \"users\" : putRequests\n                }\n            });\n    }\n\n    writeFuncs[i] = doWriteItemCall;\n}\nwriteFuncs[5] = function () {\n    console.log('end');\n}\n// \u30c7\u30fc\u30bf\u8ffd\u52a0/\u66f4\u65b0\nconsole.log('start');\nsequenceTasks(writeFuncs);\n\nfunction doWriteItem(params) {\n    console.log('doWriteItem call');\n\n    return new Promise(function (resolve, reject) {\n        let callback = batchWriteItemCallback.bind(null, resolve, reject);\n        dynamodb\n            .batchWriteItem(params)\n            .on('complete', callback)\n            .send();\n    });\n}\n\n\nfunction batchWriteItemCallback(resolve, reject, response) {\n    let error = response.error;\n    let data = response.data;\n    console.log(error, data);\n    let callback = batchWriteItemCallback.bind(null, resolve,reject);\n\n    if (error) {\n        if (error.retryable) {\n            dynamodb\n                .batchWriteItem(response.request.param)\n                .on('complete', callback)\n                .send();\n        } else {\n            reject(error);\n        }\n    } else if('users' in data.UnprocessedItems) {\n        let params = {};\n        params.RequestItems = data.UnprocessedItems;\n        dynamodb\n            .batchWriteItem(params)\n            .on('complete', callback)\n            .send();\n    } else {\n        resolve();\n    }\n}\n\nfunction sequenceTasks(tasks) {\n    function recordValue(results, value) {\n        results.push(value);\n        return results;\n    }\n    // let pushValue = recordValue.bind(null, []);\n    return tasks.reduce(function (promise, task) {\n        console.log('reduce call');\n        return promise\n            .then(task)\n            // .then(pushValue)\n            ;\n    }, Promise.resolve());\n}\n```\n", "tags": ["Node.js", "AWS", "DynamoDB"]}