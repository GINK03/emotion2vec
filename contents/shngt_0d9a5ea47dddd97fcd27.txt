{"context": "\n\nKeras\u3067MNIST\uff08DCNN\uff09\n\nKeras\u3068\u306f\nTheano\u3084TensorFlow\u3092\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\nKeras\n\n\u5b9f\u884c\u74b0\u5883\nEC2\uff08AWS\uff09\u306eg2.2xlarge\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u30aa\u30ec\u30b4\u30f3 = \u7c73\u56fd\u897f\u90e8\uff09\nPython 2.7.6\nTensorFlow 0.8.0\nAWS\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u4ed6\u4eba\u306eAMI\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3057\u305f\u304c\u3001\u81ea\u5206\u3067\u5c0e\u5165\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\nEC2\u306eGPU instance\u3067TensorFlow\u52d5\u304b\u3059\u306e\u306b\u3082\u3046\u30bd\u30fc\u30b9\u304b\u3089\u306e\u30d3\u30eb\u30c9\u306f\u5fc5\u8981\u306a\u3044\u3063\u307d\u3044\uff1f\n\nKeras\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u901a\u308a\u306b\u3084\u308b\nTensorFlow\u304c\u65e2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3060\u3068\u3057\u3066\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066'sudo'\u3064\u3051\u3066\npip install scipy\npip install scikit-learn\npip install pyyaml\napt-get install libhdf5-dev\npip install h5py\npip install keras\n\npython\u304b\u30891\u5ea6\nimport keras\n\n\u3068\u3057\u3066Keras\u3092\u5b9f\u884c\u3057\u3001'~/.keras/keras.json'\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7de8\u96c6\n\"backend\": \"theano\"\n\n\u2193\n\n\"backend\": \"tensorflow\"\n\n\n\u30b3\u30fc\u30c9\n\nmnist.py\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dense\nfrom keras.callbacks import EarlyStopping\n\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\nnb_classes = 10\n\nX_train = X_train.reshape(-1, 1, 28, 28).astype('float32')\nX_test = X_test.reshape(-1, 1, 28, 28).astype('float32')\nX_train /= 255\nX_test /= 255\ny_train = np_utils.to_categorical(y_train, nb_classes)\ny_test = np_utils.to_categorical(y_test, nb_classes)\n\nmodel = Sequential()\n\nmodel.add(Convolution2D(nb_filter = 16, nb_row = 3, nb_col = 3, border_mode = 'same', input_shape = (1, 28, 28)))\nmodel.add(Activation('relu'))\n\nmodel.add(Convolution2D(nb_filter = 32, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2), border_mode = 'same'))\n\nmodel.add(Convolution2D(nb_filter = 64, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(Convolution2D(nb_filter = 128, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2), border_mode = 'same'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1024))\nmodel.add(Activation('relu'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax'))\n\nearly_stopping = EarlyStopping(monitor = 'val_loss', patience = 2)\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nmodel.fit(X_train, y_train, nb_epoch = 5, batch_size = 100, callbacks = [early_stopping])\nscore = model.evaluate(X_test, y_test)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n\n\n\u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\n\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea Keras\nKeras Documentation\n# Keras\u3067MNIST\uff08DCNN\uff09\n\n## Keras\u3068\u306f\n\nTheano\u3084TensorFlow\u3092\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n[Keras](http://keras.io/)\n\n## \u5b9f\u884c\u74b0\u5883\n\nEC2\uff08AWS\uff09\u306eg2.2xlarge\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u30aa\u30ec\u30b4\u30f3 = \u7c73\u56fd\u897f\u90e8\uff09\nPython 2.7.6\nTensorFlow 0.8.0\n\nAWS\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u4ed6\u4eba\u306eAMI\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3057\u305f\u304c\u3001\u81ea\u5206\u3067\u5c0e\u5165\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\n\n[EC2\u306eGPU instance\u3067TensorFlow\u52d5\u304b\u3059\u306e\u306b\u3082\u3046\u30bd\u30fc\u30b9\u304b\u3089\u306e\u30d3\u30eb\u30c9\u306f\u5fc5\u8981\u306a\u3044\u3063\u307d\u3044\uff1f](http://memo.sugyan.com/entry/2016/06/24/003530)\n\n## Keras\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://keras.io/#installation)\u306e\u901a\u308a\u306b\u3084\u308b\nTensorFlow\u304c\u65e2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3060\u3068\u3057\u3066\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066'sudo'\u3064\u3051\u3066\n\n```\npip install scipy\npip install scikit-learn\npip install pyyaml\napt-get install libhdf5-dev\npip install h5py\npip install keras\n```\n\npython\u304b\u30891\u5ea6\n\n```\nimport keras\n```\n\n\u3068\u3057\u3066Keras\u3092\u5b9f\u884c\u3057\u3001'~/.keras/keras.json'\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7de8\u96c6\n\n```\n\"backend\": \"theano\"\n```\n\u2193\n```\n\"backend\": \"tensorflow\"\n```\n\n## \u30b3\u30fc\u30c9\n\n```python:mnist.py\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom keras.datasets import mnist\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dense\nfrom keras.callbacks import EarlyStopping\n\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\nnb_classes = 10\n\nX_train = X_train.reshape(-1, 1, 28, 28).astype('float32')\nX_test = X_test.reshape(-1, 1, 28, 28).astype('float32')\nX_train /= 255\nX_test /= 255\ny_train = np_utils.to_categorical(y_train, nb_classes)\ny_test = np_utils.to_categorical(y_test, nb_classes)\n\nmodel = Sequential()\n\nmodel.add(Convolution2D(nb_filter = 16, nb_row = 3, nb_col = 3, border_mode = 'same', input_shape = (1, 28, 28)))\nmodel.add(Activation('relu'))\n\nmodel.add(Convolution2D(nb_filter = 32, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2), border_mode = 'same'))\n\nmodel.add(Convolution2D(nb_filter = 64, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(Convolution2D(nb_filter = 128, nb_row = 3, nb_col = 3, border_mode = 'same'))\nmodel.add(Activation('relu'))\n\nmodel.add(MaxPooling2D(pool_size = (2, 2), border_mode = 'same'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1024))\nmodel.add(Activation('relu'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax'))\n\nearly_stopping = EarlyStopping(monitor = 'val_loss', patience = 2)\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nmodel.fit(X_train, y_train, nb_epoch = 5, batch_size = 100, callbacks = [early_stopping])\nscore = model.evaluate(X_test, y_test)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n```\n\n## \u53c2\u8003\u306b\u3057\u305f\u30da\u30fc\u30b8\n\n[\u6df1\u5c64\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea Keras](http://aidiary.hatenablog.com/entry/20160328/1459174455)\n[Keras Documentation](http://keras.io/)\n", "tags": ["DeepLearning", "Keras", "TensorFlow", "Python", "DCNN"]}