{"context": "\n\nPython\u3067\u6570\u72ec\n\u3061\u3083\u3061\u3083\u3063\u3068\u89e3\u304d\u305f\u3044\u5834\u5408\u3002\n\npython\nfrom ortoolpy import sudoku\nsudoku(\"\"\"\\\n. . . |. . 6 |. . . \n. 5 9 |. . . |. . 8 \n2 . . |. . 8 |. . . \n------+------+------\n. 4 5 |. . . |. . . \n. . 3 |. . . |. . . \n. . 6 |. . 3 |. 5 4 \n------+------+------\n. . . |3 2 5 |. . 6 \n. . . |. . . |. . . \n. . . |. . . |. . . \"\"\")\n>>>\n[[7, 8, 4, 5, 9, 6, 3, 1, 2],\n [3, 5, 9, 2, 7, 1, 4, 6, 8],\n [2, 6, 1, 4, 3, 8, 5, 9, 7],\n [1, 4, 5, 7, 6, 2, 8, 3, 9],\n [8, 7, 3, 9, 5, 4, 6, 2, 1],\n [9, 2, 6, 1, 8, 3, 7, 5, 4],\n [4, 9, 7, 3, 2, 5, 1, 8, 6],\n [5, 1, 8, 6, 4, 9, 2, 7, 3],\n [6, 3, 2, 8, 1, 7, 9, 4, 5]]\n\n\n\u4e2d\u5473\u3002\n\npython\ndef sudoku(s):\n    import re, numpy as np\n    from pulp import *\n    s = re.sub(r'[^\\d.]','',s)\n    assert(len(s) == 81)\n    m = LpProblem()\n    x = np.array(addvars(9, 9, 9, cat=LpBinary))\n    for i in range(9):\n        for j in range(9):\n            m += lpSum(x[:,i,j]) == 1 # row\n            m += lpSum(x[i,:,j]) == 1 # num\n            m += lpSum(x[i,j,:]) == 1 # col\n            k, l = i//3*3, i%3*3\n            m += lpSum(x[k:k+3,j,l:l+3]) == 1 # 3x3\n            c = s[i*9+j]\n            if str.isnumeric(c):\n                m += x[i,int(c)-1,j] == 1 # fix\n    m.solve()\n    return (np.arange(1, 10) @ np.vectorize(value)\n            (x).astype(int)).tolist()\n\n\n\u4ee5\u4e0a\n# Python\u3067\u6570\u72ec\n\u3061\u3083\u3061\u3083\u3063\u3068\u89e3\u304d\u305f\u3044\u5834\u5408\u3002\n\n```py3:python\nfrom ortoolpy import sudoku\nsudoku(\"\"\"\\\n. . . |. . 6 |. . . \n. 5 9 |. . . |. . 8 \n2 . . |. . 8 |. . . \n------+------+------\n. 4 5 |. . . |. . . \n. . 3 |. . . |. . . \n. . 6 |. . 3 |. 5 4 \n------+------+------\n. . . |3 2 5 |. . 6 \n. . . |. . . |. . . \n. . . |. . . |. . . \"\"\")\n>>>\n[[7, 8, 4, 5, 9, 6, 3, 1, 2],\n [3, 5, 9, 2, 7, 1, 4, 6, 8],\n [2, 6, 1, 4, 3, 8, 5, 9, 7],\n [1, 4, 5, 7, 6, 2, 8, 3, 9],\n [8, 7, 3, 9, 5, 4, 6, 2, 1],\n [9, 2, 6, 1, 8, 3, 7, 5, 4],\n [4, 9, 7, 3, 2, 5, 1, 8, 6],\n [5, 1, 8, 6, 4, 9, 2, 7, 3],\n [6, 3, 2, 8, 1, 7, 9, 4, 5]]\n```\n\n\u4e2d\u5473\u3002\n\n```py3:python\ndef sudoku(s):\n    import re, numpy as np\n    from pulp import *\n    s = re.sub(r'[^\\d.]','',s)\n    assert(len(s) == 81)\n    m = LpProblem()\n    x = np.array(addvars(9, 9, 9, cat=LpBinary))\n    for i in range(9):\n        for j in range(9):\n            m += lpSum(x[:,i,j]) == 1 # row\n            m += lpSum(x[i,:,j]) == 1 # num\n            m += lpSum(x[i,j,:]) == 1 # col\n            k, l = i//3*3, i%3*3\n            m += lpSum(x[k:k+3,j,l:l+3]) == 1 # 3x3\n            c = s[i*9+j]\n            if str.isnumeric(c):\n                m += x[i,int(c)-1,j] == 1 # fix\n    m.solve()\n    return (np.arange(1, 10) @ np.vectorize(value)\n            (x).astype(int)).tolist()\n```\n\n\u4ee5\u4e0a\n", "tags": ["Python", "\u6570\u72ec", "\u6570\u5b66", "\u7d44\u5408\u305b\u6700\u9069\u5316", "\u30d1\u30ba\u30eb"]}