{"context": " More than 1 year has passed since last update.\nopenpyxl\n\n\nExportQuerySet\nfrom django.db import models\nfrom django.db.models.fields import FieldDoesNotExist\nfrom django.db.models.base import ModelBase\n\nfrom openpyxl import Workbook\nfrom openpyxl.cell import get_column_letter\nfrom openpyxl.writer import excel\n\nclass ExportQuerySet(models.QuerySet):\n\n    def resolve_field_data(self, instance, field):\n        path = field.split('.', 1)\n        val = getattr(instance, path[0])\n\n        if len(path) > 1 and path[1] != '':\n            return self.resolve_field_data(val, path[1])\n\n        try:\n            return instance._get_FIELD_display(\n                instance._meta.get_field(path[0]))\n        except:\n            return unicode(val)\n\n    def resolve_field_header(self, model, field, name=''):\n        '''\n            :param Model model: Model Class\n            :param str field: field name path ( i.e) profile.user.username )\n            :param unicode name: resolved name path prefix\n        '''\n        path = field.split('.', 1)\n        try:\n            field = model._meta.get_field(path[0])\n            name = (name and name + '.' or '') + unicode(\n                field.verbose_name)\n        except FieldDoesNotExist:\n            field = getattr(model, path[0]).related.model\n            name = (name and name + '.' or '') + unicode(\n                field._meta.verbose_name)\n\n        if len(path) > 1 and path[1] != '':\n            next_model = issubclass(\n                type(field), ModelBase\n            ) and field or field.rel.to\n            return self.resolve_field_header(next_model, path[1], name)\n\n        return name\n\n    def create_xlsx(self, wb=None, excludes=[], relations=[]):\n        wb = wb or Workbook()\n        ws = wb.create_sheet(0)\n\n        ws.title = unicode(self.model._meta.verbose_name)\n\n        names = tuple(\n            (field.name, ugettext(field.verbose_name))\n            for field in self.model._meta.fields\n            if field.name not in excludes\n        ) + tuple(\n            (field, self.resolve_field_header(self.model, field))\n            for field in relations\n        )\n\n        # Header\n        row = 1\n        for col in xrange(1, len(names) + 1):\n            value = names[col - 1][1]\n            cl = get_column_letter(col)\n            ws.cell('%s%d' % (cl, row)).value = value\n\n        # Records\n        for obj in self.filter():\n            row = row + 1\n            for col in xrange(1, len(names) + 1):\n                colname = names[col - 1][0]\n                if colname.find('.') >= 0:\n                    value = self.resolve_field_data(obj, colname)\n                else:\n                    value = obj._get_FIELD_display(\n                        obj._meta.get_field(colname))\n\n                if isinstance(value, unicode) and len(value) > 0:\n                    value = gettext(value)\n\n                cl = get_column_letter(col)\n                ws.cell('%s%d' % (cl, row)).value = value\n\n        return wb\n\n    def export_xlsx(self, output=None, wb=None, excludes=[], relations=[],\n                    *args, **kwargs):\n\n        xlsx = self.create_xlsx(wb, excludes=excludes, relations=relations)\n\n        if output is None:\n            return xlsx\n\n        if isinstance(output, basestring):\n            return excel.save_workbook(xlsx, output)\n\n        if issubclass(output, HttpResponse):\n            res = output(excel.save_virtual_workbook(xlsx),\n                         content_type='application/vnd.ms-excel',\n                         *args, **kwargs)\n            res['Content-Disposition'] = \\\n                'attachment; filename={0}.xlsx'.format(\n                    self.model._meta.verbose_name.encode('utf8'))\n            return res\n\n        return xlsx\n\n\nOrder\n\nclass Order(models.Model):\n    ticket = models.ForeignKey(Ticket, verbose_name=_('Ticket'))\n    user = models.ForeignKey(User, verbose_name=_('User'))\n\n    # Managers\n    objects = OrderManager()\n    exports = ExportQuerySet.as_manager()\n\n\n\norder_download\n\n\u6307\u5b9a\u3055\u308c\u305fTicket\u306e\u6307\u5b9a\u3055\u308c\u305f\u671f\u9593\u306b\u6ce8\u6587\u3055\u308c\u305fOrder\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\n@staff_member_required\ndef order_download(request, id, status=None):\n    ticket = Ticket.objects.get(id=id)\n\n    q = {}    \n    df = request.GET.get('df', None)\n    dt = request.GET.get('dt', None)\n    _tz = get_default_timezone()\n    if df: \n        q['created_at__gte'] = make_aware(\n            datetime.strptime(df, '%Y-%m-%d'), _tz)\n    if dt: \n        q['created_at__lte'] = make_aware(\n            datetime.strptime(dt, '%Y-%m-%d'), _tz)\n\n    return ticket.order_set(\n        manager='exports'\n    ).filter(**q).export_xlsx(\n        HttpResponse,\n        excludes=['signature'],\n        relations=['user.profile'],\n    ) \n\n\n- [openpyxl](https://pypi.python.org/pypi/openpyxl)\n\n## ExportQuerySet\n\n~~~~py\nfrom django.db import models\nfrom django.db.models.fields import FieldDoesNotExist\nfrom django.db.models.base import ModelBase\n\nfrom openpyxl import Workbook\nfrom openpyxl.cell import get_column_letter\nfrom openpyxl.writer import excel\n\nclass ExportQuerySet(models.QuerySet):\n\n    def resolve_field_data(self, instance, field):\n        path = field.split('.', 1)\n        val = getattr(instance, path[0])\n\n        if len(path) > 1 and path[1] != '':\n            return self.resolve_field_data(val, path[1])\n\n        try:\n            return instance._get_FIELD_display(\n                instance._meta.get_field(path[0]))\n        except:\n            return unicode(val)\n\n    def resolve_field_header(self, model, field, name=''):\n        '''\n            :param Model model: Model Class\n            :param str field: field name path ( i.e) profile.user.username )\n            :param unicode name: resolved name path prefix\n        '''\n        path = field.split('.', 1)\n        try:\n            field = model._meta.get_field(path[0])\n            name = (name and name + '.' or '') + unicode(\n                field.verbose_name)\n        except FieldDoesNotExist:\n            field = getattr(model, path[0]).related.model\n            name = (name and name + '.' or '') + unicode(\n                field._meta.verbose_name)\n\n        if len(path) > 1 and path[1] != '':\n            next_model = issubclass(\n                type(field), ModelBase\n            ) and field or field.rel.to\n            return self.resolve_field_header(next_model, path[1], name)\n\n        return name\n\n    def create_xlsx(self, wb=None, excludes=[], relations=[]):\n        wb = wb or Workbook()\n        ws = wb.create_sheet(0)\n\n        ws.title = unicode(self.model._meta.verbose_name)\n\n        names = tuple(\n            (field.name, ugettext(field.verbose_name))\n            for field in self.model._meta.fields\n            if field.name not in excludes\n        ) + tuple(\n            (field, self.resolve_field_header(self.model, field))\n            for field in relations\n        )\n\n        # Header\n        row = 1\n        for col in xrange(1, len(names) + 1):\n            value = names[col - 1][1]\n            cl = get_column_letter(col)\n            ws.cell('%s%d' % (cl, row)).value = value\n            \n        # Records\n        for obj in self.filter():\n            row = row + 1\n            for col in xrange(1, len(names) + 1):\n                colname = names[col - 1][0]\n                if colname.find('.') >= 0:\n                    value = self.resolve_field_data(obj, colname)\n                else:\n                    value = obj._get_FIELD_display(\n                        obj._meta.get_field(colname))\n\n                if isinstance(value, unicode) and len(value) > 0:\n                    value = gettext(value)\n\n                cl = get_column_letter(col)\n                ws.cell('%s%d' % (cl, row)).value = value\n\n        return wb\n\n    def export_xlsx(self, output=None, wb=None, excludes=[], relations=[],\n                    *args, **kwargs):\n\n        xlsx = self.create_xlsx(wb, excludes=excludes, relations=relations)\n\n        if output is None:\n            return xlsx\n\n        if isinstance(output, basestring):\n            return excel.save_workbook(xlsx, output)\n\n        if issubclass(output, HttpResponse):\n            res = output(excel.save_virtual_workbook(xlsx),\n                         content_type='application/vnd.ms-excel',\n                         *args, **kwargs)\n            res['Content-Disposition'] = \\\n                'attachment; filename={0}.xlsx'.format(\n                    self.model._meta.verbose_name.encode('utf8'))\n            return res\n\n        return xlsx\n~~~\n\n## Order\n\n~~~py\n\nclass Order(models.Model):\n\tticket = models.ForeignKey(Ticket, verbose_name=_('Ticket'))\n\tuser = models.ForeignKey(User, verbose_name=_('User'))\n\t\n    # Managers\n    objects = OrderManager()\n    exports = ExportQuerySet.as_manager()\n\n~~~\n\n## order_download\n\n- \u6307\u5b9a\u3055\u308c\u305fTicket\u306e\u6307\u5b9a\u3055\u308c\u305f\u671f\u9593\u306b\u6ce8\u6587\u3055\u308c\u305fOrder\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\n~~~py\n@staff_member_required\ndef order_download(request, id, status=None):\n    ticket = Ticket.objects.get(id=id)\n    \n    q = {}    \n    df = request.GET.get('df', None)\n    dt = request.GET.get('dt', None)\n    _tz = get_default_timezone()\n    if df: \n        q['created_at__gte'] = make_aware(\n            datetime.strptime(df, '%Y-%m-%d'), _tz)\n    if dt: \n        q['created_at__lte'] = make_aware(\n            datetime.strptime(dt, '%Y-%m-%d'), _tz)\n\n    return ticket.order_set(\n        manager='exports'\n    ).filter(**q).export_xlsx(\n        HttpResponse,\n        excludes=['signature'],\n        relations=['user.profile'],\n    ) \n~~~    \n", "tags": ["Django", "Excel", "Openpyxl"]}