{"context": " More than 1 year has passed since last update.\u30c6\u30b9\u30c8\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3057\u305f\u308a\u3001\n\u4f1a\u54e1\u767b\u9332\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3057\u305f\u308a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306b\u3001\n\u30e1\u30fc\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u4e00\u6642\u7684\u306a\u30e1\u30fc\u30eb\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u305f\u304f\u306a\u308b\u3002\n\u53d7\u4fe1\u3057\u305f\u30e1\u30fc\u30eb\u306e\u5185\u5bb9\u3082\u30c6\u30b9\u30c8\u3057\u305f\u3044\u3002\nTest::TCP\u306e\u30b5\u30fc\u30d0\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3001\nNet::Server::Mail::SMTP\u3092\u5229\u7528\u3057\u3066\u3001\n\u30e1\u30fc\u30eb\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u308b\u65b9\u6cd5\u3092\u3068\u3063\u305f\u3002\n\nbasic.t\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::TCP;\nuse Net::Server::Mail::SMTP;\nuse Net::SMTP;\nuse Email::MIME;\nuse Email::MIME::MobileJP::Parser;\n\nmy $from = 'test-from@example.com';\nmy $to   = 'test-to@example.com';\nmy $body = 'test-body';\nmy $subject = 'test-subject';\n\n\n### \u30b5\u30fc\u30d0\u306e\u8a2d\u5b9a\n\nmy $server = Test::TCP->new(\n    code => sub {\n        my $port = shift;\n\n        my $sock = IO::Socket::INET->new(\n            LocalAddr => '127.0.0.1',\n            LocalPort => $port,\n            Proto     => 'tcp',\n            Listen    => 1,\n        ) or die \"Cannot open server socket: $!\";\n\n        # \u30b5\u30fc\u30d0\u8d77\u52d5\u30c1\u30a7\u30c3\u30af\u7528\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u308b\u306e\u3067\u30b9\u30eb\u30fc\u3059\u308b\n        $sock->accept();\n\n        while (my $remote = $sock->accept()) {\n            eval {\n                my $smtp = Net::Server::Mail::SMTP->new('socket' => $remote);\n\n                $smtp->set_callback(\n                    'RCPT' => sub {\n                        my $sess = shift;\n                        my $rcpt = shift;\n\n                        my ($email) = Email::Address::Loose->parse($rcpt);\n                        my $domain = $email->host;\n\n                        return (0, 513, 'Syntax error.') unless $domain;\n\n                        return 1;\n                    }\n                );\n\n                $smtp->set_callback(\n                    'DATA' => sub {\n                        my $sess = shift;\n                        my $data = shift;\n\n                        my $mail = Email::MIME::MobileJP::Parser->new($data);\n\n                        my $from = $mail->from();\n                        my $body = $mail->mail->body;\n\n                        # $mail->get_texts(qr{^text/plain});\n                        # $mail->get_texts(qr{^text/html});\n\n                        is $from->address, 'test-from@example.com';\n                        like $body, qr/test-body/;\n\n                        return (1, 250, 'message queued');\n                    }\n                );\n                $smtp->process();\n            };\n\n            if ($@) {\n                warn $@;\n                $remote->close();\n            }\n        }\n    }\n);\n\n\n### \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u8a2d\u5b9a\n\nmy $mime = Email::MIME->create(\n    header => [\n        From => $from,\n        To   => $to,\n        Subject => $subject,\n    ],\n    attributes => {\n        content_type => 'text/plain',\n        charset      => 'ISO-2022-JP',\n        encoding     => '7bit',\n    },\n    body => $body,\n);\n\n\nmy $port = $server->port;\n\nmy $smtp = Net::SMTP->new(\n    Host => '127.0.0.1',\n    Port => $port,\n    Hello => '[127.0.0.1]',\n);\n\n$smtp->mail($from);\n$smtp->to($to);\n$smtp->data();\n$smtp->datasend($mime->as_string);\n$smtp->quit;\n\nundef $server;\n\ndone_testing;\n\n\nNet::Server::Mail::SMTP\u306f\u3001\n\u5404SMTP\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u51e6\u7406\u3092\u304b\u3051\u308b\u306e\u3067\u3068\u3066\u3082\u4fbf\u5229\u3002\n\nsample\n$smtp->set_callback(\n    'DATA' => sub {\n        my $sess = shift;\n        my $data = shift;\n\n        my $mail = Email::MIME::MobileJP::Parser->new($data);\n\n        my $from = $mail->from();\n        my $body = $mail->mail->body;\n\n        # $mail->get_texts(qr{^text/plain});\n        # $mail->get_texts(qr{^text/html});\n\n        is $from->address, 'test-from@example.com';\n        like $body, qr/test-body/;\n\n        return (1, 250, 'message queued');\n    }\n);\n\n\n\u3053\u3053\u306e\u3068\u3053\u308d\u3067\u3001\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n\n\u30c6\u30b9\u30c8\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3057\u305f\u308a\u3001\n\u4f1a\u54e1\u767b\u9332\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3057\u305f\u308a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306b\u3001\n\u30e1\u30fc\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u4e00\u6642\u7684\u306a\u30e1\u30fc\u30eb\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u305f\u304f\u306a\u308b\u3002\n\u53d7\u4fe1\u3057\u305f\u30e1\u30fc\u30eb\u306e\u5185\u5bb9\u3082\u30c6\u30b9\u30c8\u3057\u305f\u3044\u3002\n\nTest::TCP\u306e\u30b5\u30fc\u30d0\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3001\nNet::Server::Mail::SMTP\u3092\u5229\u7528\u3057\u3066\u3001\n\u30e1\u30fc\u30eb\u30b5\u30fc\u30d0\u3092\u7acb\u3061\u4e0a\u3052\u308b\u65b9\u6cd5\u3092\u3068\u3063\u305f\u3002\n\n```perl:basic.t\nuse strict;\nuse warnings;\n\nuse Test::More;\nuse Test::TCP;\nuse Net::Server::Mail::SMTP;\nuse Net::SMTP;\nuse Email::MIME;\nuse Email::MIME::MobileJP::Parser;\n\nmy $from = 'test-from@example.com';\nmy $to   = 'test-to@example.com';\nmy $body = 'test-body';\nmy $subject = 'test-subject';\n\n\n### \u30b5\u30fc\u30d0\u306e\u8a2d\u5b9a\n\nmy $server = Test::TCP->new(\n    code => sub {\n        my $port = shift;\n\n        my $sock = IO::Socket::INET->new(\n            LocalAddr => '127.0.0.1',\n            LocalPort => $port,\n            Proto     => 'tcp',\n            Listen    => 1,\n        ) or die \"Cannot open server socket: $!\";\n\n        # \u30b5\u30fc\u30d0\u8d77\u52d5\u30c1\u30a7\u30c3\u30af\u7528\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u308b\u306e\u3067\u30b9\u30eb\u30fc\u3059\u308b\n        $sock->accept();\n\n        while (my $remote = $sock->accept()) {\n            eval {\n                my $smtp = Net::Server::Mail::SMTP->new('socket' => $remote);\n\n                $smtp->set_callback(\n                    'RCPT' => sub {\n                        my $sess = shift;\n                        my $rcpt = shift;\n\n                        my ($email) = Email::Address::Loose->parse($rcpt);\n                        my $domain = $email->host;\n\n                        return (0, 513, 'Syntax error.') unless $domain;\n\n                        return 1;\n                    }\n                );\n\n                $smtp->set_callback(\n                    'DATA' => sub {\n                        my $sess = shift;\n                        my $data = shift;\n\n                        my $mail = Email::MIME::MobileJP::Parser->new($data);\n\n                        my $from = $mail->from();\n                        my $body = $mail->mail->body;\n\n                        # $mail->get_texts(qr{^text/plain});\n                        # $mail->get_texts(qr{^text/html});\n\n                        is $from->address, 'test-from@example.com';\n                        like $body, qr/test-body/;\n\n                        return (1, 250, 'message queued');\n                    }\n                );\n                $smtp->process();\n            };\n\n            if ($@) {\n                warn $@;\n                $remote->close();\n            }\n        }\n    }\n);\n\n\n### \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u8a2d\u5b9a\n\nmy $mime = Email::MIME->create(\n    header => [\n        From => $from,\n        To   => $to,\n        Subject => $subject,\n    ],\n    attributes => {\n        content_type => 'text/plain',\n        charset      => 'ISO-2022-JP',\n        encoding     => '7bit',\n    },\n    body => $body,\n);\n\n\nmy $port = $server->port;\n\nmy $smtp = Net::SMTP->new(\n    Host => '127.0.0.1',\n    Port => $port,\n    Hello => '[127.0.0.1]',\n);\n\n$smtp->mail($from);\n$smtp->to($to);\n$smtp->data();\n$smtp->datasend($mime->as_string);\n$smtp->quit;\n\nundef $server;\n\ndone_testing;\n```\n\n\nNet::Server::Mail::SMTP\u306f\u3001\n\u5404SMTP\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u3057\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u51e6\u7406\u3092\u304b\u3051\u308b\u306e\u3067\u3068\u3066\u3082\u4fbf\u5229\u3002\n\n```perl:sample\n$smtp->set_callback(\n    'DATA' => sub {\n        my $sess = shift;\n        my $data = shift;\n\n        my $mail = Email::MIME::MobileJP::Parser->new($data);\n\n        my $from = $mail->from();\n        my $body = $mail->mail->body;\n\n        # $mail->get_texts(qr{^text/plain});\n        # $mail->get_texts(qr{^text/html});\n\n        is $from->address, 'test-from@example.com';\n        like $body, qr/test-body/;\n\n        return (1, 250, 'message queued');\n    }\n);\n```\n\n\u3053\u3053\u306e\u3068\u3053\u308d\u3067\u3001\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n", "tags": ["mail", "Perl"]}