{"context": " More than 1 year has passed since last update.\u3075\u3068 unique \u306a key \u3092\u4f5c\u308b\u306e\u306b django \u306f\u3069\u3046\u3057\u3066\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u96a3\u306e\u4eba\u3068\u4e00\u7dd2\u306b\u8abf\u3079\u305f\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306e\u4f5c\u308a\u65b9 - \u30b9\u30b3\u30c8\u30d7\u30ea\u30b4\u30cb\u30a8\u30d5\u30b9\u30af\u901a\u4fe1\n\u624b\u5143\u306e 1.4.2 \u3060\u3068 OS \u306e pid \u3092\u53d6\u3063\u3066\u308b\u30b3\u30fc\u30c9\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u3002\ndjango.contrib.sessions.base.SessionBase \u306b get_new_session_key() \u3066\u30e1\u30bd\u30c3\u30c9\u304c\u751f\u3048\u3066\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u306e\u4e2d\u3067\u306f django.utils.crypto \u306b\u3042\u308b getrandom_string() \u304c\u4f7f\u308f\u308c\u3066\u3066\u591a\u5206\u305d\u308c\u304c\u30ad\u30fc\u751f\u6210\u3057\u3066\u308b\u95a2\u6570\u3002\n\ncrypto.py\ndef get_random_string(length=12,\n                      allowed_chars='abcdefghijklmnopqrstuvwxyz'\n                                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):\n    \"\"\"\n    Returns a securely generated random string.\n\n    The default length of 12 with the a-z, A-Z, 0-9 character set returns\n    a 71-bit value. log_2((26+26+10)^12) =~ 71 bits\n    \"\"\"\n    if not using_sysrandom:\n        # This is ugly, and a hack, but it makes things better than\n        # the alternative of predictability. This re-seeds the PRNG\n        # using a value that is hard for an attacker to predict, every\n        # time a random string is required. This may change the\n        # properties of the chosen random sequence slightly, but this\n        # is better than absolute predictability.\n        random.seed(\n            hashlib.sha256(\n        \"%s%s%s\" % (\n                    random.getstate(),\n                    time.time(),\n                    settings.SECRET_KEY)\n                ).digest())\n    return ''.join([random.choice(allowed_chars) for i in range(length)])\n\n\nuseng_sysramdom \u304c False \u306e\u6642\u306f\nrandom.getstate() \u3068 time.time() \u3068 settings.SECRET_KEY \u3092 SHA256 \u306b\u304b\u3051\u305f\u5024\u3092\u7a2e\u306b\u3057\u3066\u308b\u306d\u3002\nusing_sysramdom \u30d5\u30e9\u30b0\u306f crypto.py \u306e\u4e2d\u3067 random.SysRandom \u304c\u4f7f\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u3066\u308b\u3002\n\u3053\u3053\u306f\u4e0a\u306e blog \u306e\u5185\u5bb9\u3068\u540c\u3058\u3002\n\ncrypto.py\nimport random\ntry:\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:\n    import warnings\n    warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n    using_sysrandom = False\n\n\n\u3053\u308c\u306f\u3001\u6700\u7d42\u7684\u306b\u306f ramdom \u306a\u5024\u306a\u306e\u3067\u3001 unique \u306a\u30ad\u30fc\u3068\u3057\u3066\u306f\u3069\u3046\u306a\u306e\u304b\u306a\u3041\u3001\u3068\u3044\u3046\u7591\u554f\u304c\u5c11\u3057\u6b8b\u3063\u3066\u308b\u3051\u3069\u3001\u307e\u3041\u3053\u3093\u306a\u3082\u3093\u304b\u306a\u3041\u3002\n\u3061\u306a\u307f\u306b\u81ea\u5206\u304c\u6614 unique \u306a\u5024\u4f5c\u308d\u3046\u3068\u3057\u3066\u3084\u3063\u305f\u6642\u306f Catalyst::Plugin::Session (perl) \u306e\u3092\u62dd\u501f\u3057\u3066\u305f\u3002\n\nSession.pm\nmy $counter;\n\nsub session_hash_seed {\n    my $c = shift;\n\n    return join( \"\", ++$counter, time, rand, $$, {}, overload::StrVal($c), );\n}\n\n# ~~ snip ~~\n\nsub generate_session_id {\n    my $c = shift;\n\n    my $digest = $c->_find_digest();\n    $digest->add( $c->session_hash_seed() );\n    return $digest->hexdigest;\n}\n\n\n\u6700\u5f8c\u306b ramdom \u304b\u3051\u3066\u306a\u3044\u306e\u3067\u3001\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u4e00\u610f\u306a\u6c17\u306f\u3059\u308b\u3093\u3060\u3051\u3069\u308f\u304b\u3089\u3093\u3002\n\n\u3075\u3068 unique \u306a key \u3092\u4f5c\u308b\u306e\u306b django \u306f\u3069\u3046\u3057\u3066\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u96a3\u306e\u4eba\u3068\u4e00\u7dd2\u306b\u8abf\u3079\u305f\u3002\n\n[\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306e\u4f5c\u308a\u65b9 - \u30b9\u30b3\u30c8\u30d7\u30ea\u30b4\u30cb\u30a8\u30d5\u30b9\u30af\u901a\u4fe1](http://d.hatena.ne.jp/perezvon/20110111/1294742153)\n\n\u624b\u5143\u306e 1.4.2 \u3060\u3068 OS \u306e pid \u3092\u53d6\u3063\u3066\u308b\u30b3\u30fc\u30c9\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u3002\n\ndjango.contrib.sessions.base.SessionBase \u306b _get_new_session_key() \u3066\u30e1\u30bd\u30c3\u30c9\u304c\u751f\u3048\u3066\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u306e\u4e2d\u3067\u306f django.utils.crypto \u306b\u3042\u308b get_random_string() \u304c\u4f7f\u308f\u308c\u3066\u3066\u591a\u5206\u305d\u308c\u304c\u30ad\u30fc\u751f\u6210\u3057\u3066\u308b\u95a2\u6570\u3002\n\n```crypto.py\ndef get_random_string(length=12,\n                      allowed_chars='abcdefghijklmnopqrstuvwxyz'\n                                    'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'):\n    \"\"\"\n    Returns a securely generated random string.\n\n    The default length of 12 with the a-z, A-Z, 0-9 character set returns\n    a 71-bit value. log_2((26+26+10)^12) =~ 71 bits\n    \"\"\"\n    if not using_sysrandom:\n        # This is ugly, and a hack, but it makes things better than\n        # the alternative of predictability. This re-seeds the PRNG\n        # using a value that is hard for an attacker to predict, every\n        # time a random string is required. This may change the\n        # properties of the chosen random sequence slightly, but this\n        # is better than absolute predictability.\n        random.seed(\n            hashlib.sha256(\n\t\t\"%s%s%s\" % (\n                    random.getstate(),\n                    time.time(),\n                    settings.SECRET_KEY)\n                ).digest())\n    return ''.join([random.choice(allowed_chars) for i in range(length)])\n```\n\nuseng_sysramdom \u304c False \u306e\u6642\u306f\nrandom.getstate() \u3068 time.time() \u3068 settings.SECRET_KEY \u3092 SHA256 \u306b\u304b\u3051\u305f\u5024\u3092\u7a2e\u306b\u3057\u3066\u308b\u306d\u3002\n\nusing_sysramdom \u30d5\u30e9\u30b0\u306f crypto.py \u306e\u4e2d\u3067 random.SysRandom \u304c\u4f7f\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u3066\u308b\u3002\n\u3053\u3053\u306f\u4e0a\u306e blog \u306e\u5185\u5bb9\u3068\u540c\u3058\u3002\n\n```crypto.py\nimport random\ntry:\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:\n    import warnings\n    warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n    using_sysrandom = False\n```\n\n\u3053\u308c\u306f\u3001\u6700\u7d42\u7684\u306b\u306f ramdom \u306a\u5024\u306a\u306e\u3067\u3001 unique \u306a\u30ad\u30fc\u3068\u3057\u3066\u306f\u3069\u3046\u306a\u306e\u304b\u306a\u3041\u3001\u3068\u3044\u3046\u7591\u554f\u304c\u5c11\u3057\u6b8b\u3063\u3066\u308b\u3051\u3069\u3001\u307e\u3041\u3053\u3093\u306a\u3082\u3093\u304b\u306a\u3041\u3002\n\n\u3061\u306a\u307f\u306b\u81ea\u5206\u304c\u6614 unique \u306a\u5024\u4f5c\u308d\u3046\u3068\u3057\u3066\u3084\u3063\u305f\u6642\u306f [Catalyst::Plugin::Session](http://cpansearch.perl.org/src/BOBTFISH/Catalyst-Plugin-Session-0.37/lib/Catalyst/Plugin/Session.pm) (perl) \u306e\u3092\u62dd\u501f\u3057\u3066\u305f\u3002\n\n```Session.pm\nmy $counter;\n\nsub session_hash_seed {\n    my $c = shift;\n\n    return join( \"\", ++$counter, time, rand, $$, {}, overload::StrVal($c), );\n}\n\n# ~~ snip ~~\n\nsub generate_session_id {\n    my $c = shift;\n\n    my $digest = $c->_find_digest();\n    $digest->add( $c->session_hash_seed() );\n    return $digest->hexdigest;\n}\n```\n\n\u6700\u5f8c\u306b ramdom \u304b\u3051\u3066\u306a\u3044\u306e\u3067\u3001\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u4e00\u610f\u306a\u6c17\u306f\u3059\u308b\u3093\u3060\u3051\u3069\u308f\u304b\u3089\u3093\u3002\n", "tags": ["Python", "Django", "Perl"]}