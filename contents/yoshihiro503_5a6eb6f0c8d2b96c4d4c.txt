{"context": " More than 1 year has passed since last update.\nassign_equiv.v\n(** **** \u7df4\u7fd2\u554f\u984c: \u2605\u2605, recommended (assign_aequiv) *)\nTheorem assign_aequiv : forall X e,\n  aequiv (AId X) e ->\n  cequiv SKIP (X ::= e).\nProof.\n move=> X e H. split => HH.\n - inversion HH. subst.\n   assert (st' = update st' X (st' X)).\n   - apply functional_extensionality => x.\n     by rewrite update_same; reflexivity.\n\n   - set (Hass := E_Ass st' e (st' X) X).\n     rewrite <- H0 in Hass. apply Hass.\n     rewrite <- (H st'). reflexivity.\n\n - inversion HH. subst.\n   replace (update st X (aeval st e)) with st.\n   - constructor.\n\n   - apply functional_extensionality => x.\n     rewrite <- (H st).\n     rewrite update_same; reflexivity.\nQed.\n\n\n```coq:assign_equiv.v\n(** **** \u7df4\u7fd2\u554f\u984c: \u2605\u2605, recommended (assign_aequiv) *)\nTheorem assign_aequiv : forall X e,\n  aequiv (AId X) e ->\n  cequiv SKIP (X ::= e).\nProof.\n move=> X e H. split => HH.\n - inversion HH. subst.\n   assert (st' = update st' X (st' X)).\n   - apply functional_extensionality => x.\n     by rewrite update_same; reflexivity.\n\n   - set (Hass := E_Ass st' e (st' X) X).\n     rewrite <- H0 in Hass. apply Hass.\n     rewrite <- (H st'). reflexivity.\n\n - inversion HH. subst.\n   replace (update st X (aeval st e)) with st.\n   - constructor.\n\n   - apply functional_extensionality => x.\n     rewrite <- (H st).\n     rewrite update_same; reflexivity.\nQed.\n```", "tags": ["Coq8.4pl2", "ssreflect1.4", "ProofCafe", "Softwarefoundations"]}