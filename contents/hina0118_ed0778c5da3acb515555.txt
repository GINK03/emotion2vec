{"context": " More than 1 year has passed since last update.\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30d8\u30c3\u30c0\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u3063\u3066\u306a\u304b\u3063\u305f\u306e\u3092\u4fee\u6b63\n\njson_client.groovy\nimport groovy.swing.SwingBuilder\nimport groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\nimport groovy.beans.Bindable\nimport javax.swing.*\nimport javax.swing.tree.DefaultMutableTreeNode as TreeNode\nimport java.awt.*\nimport java.net.*\n\ndef manager = new CookieManager()\nmanager.cookiePolicy = CookiePolicy.ACCEPT_ALL\nCookieHandler.default = manager\n\n@Bindable\nclass Model {\n    String method = 'GET'\n    String url = ''\n    String params = ''\n    String header = ''\n    String json = ''\n}\ndef model = new Model()\n\ndef tabPane\ndef jsonTree\n\nclass TreeUtil {\n    def clearTree = { jsonTree ->\n        jsonTree.model.root.removeAllChildren()\n        jsonTree.model.reload(jsonTree.model.root)\n    }\n\n    def reloadTree = { jsonTree, json ->\n        clearTree(jsonTree)\n        createNode(jsonTree.model.root, json)\n        jsonTree.model.reload(jsonTree.model.root)\n    }\n\n    def createNode = { node, json ->\n        if (json instanceof HashMap) {\n            json.each { key, value ->\n                def childNode = new TreeNode(key)\n                node.add(childNode)\n                createNode(childNode, value)\n            }\n        } else if (json instanceof ArrayList) {\n            json.eachWithIndex { child, index ->\n                def childNode = new TreeNode(index + 1)\n                node.add(childNode)\n                createNode(childNode, child)\n            }\n        } else {\n            node.add(new TreeNode(json))\n        }\n    }\n}\ndef treeUtil = new TreeUtil()\n\ndef prettyPrint = { text ->\n    def result = JsonOutput.prettyPrint(text)\n    (result =~ /\\\\u[0-9a-zA-Z]{4}/).each { match ->\n        def code = match[2..5]\n        def encTxt = new String([Integer.parseInt(code, 16)] as int[], 0, 1)\n        result = result.replaceAll(/\\\\u${code}/, encTxt)\n    }\n    result\n}\n\ndef sendRequest = {\n    model.header = ''\n    model.json = ''\n\n    def method = model.method\n    def url = model.url\n    def params = URLEncoder.encode(model.params, 'utf-8').replaceAll('%3D', '=').replaceAll('%26', '&')\n    if (method == 'GET') {\n        url = \"${url}?${params}\"\n    }\n\n    def conn = url.toURL().openConnection()\n    conn.requestMethod = method\n    if (method == 'POST') {\n        conn.doOutput = true\n        conn.outputStream << params\n    }\n\n    def header = new StringBuilder()\n    conn.headerFields.each { key, fields ->\n        fields.each { field ->\n            header << \"${key ? key + ':' : ''}${field}\\n\"\n        }\n    }\n    model.header = header.toString()\n\n    model.json = prettyPrint(conn.inputStream.getText('utf-8'))\n\n    def json = new JsonSlurper().parseText(model.json)\n    treeUtil.reloadTree(jsonTree, json)\n\n    tabPane.selectedIndex = 2\n\n    conn.disconnect()\n}\n\nnew SwingBuilder().frame(title:'json\u3092\u53d6\u5f97\u3001\u8868\u793a\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3', defaultCloseOperation:JFrame.EXIT_ON_CLOSE,\n                        size: [800, 600], show:true) {\n    lookAndFeel('nimbus')\n    borderLayout()\n    hbox(constraints: BorderLayout.NORTH) {\n        comboBox(items:['GET', 'POST'], selectedItem:bind(source: model, sourceProperty: 'method', mutual: true))\n        textField(text:bind(source: model, sourceProperty: 'url', mutual: true))\n        button(text:'\u9001\u4fe1', actionPerformed:sendRequest)\n    }\n    tabPane = tabbedPane(constraints: BorderLayout.CENTER) {\n        scrollPane(name:'\u30d1\u30e9\u30e1\u30fc\u30bf') {\n            textArea(text:bind(source: model, sourceProperty: 'params', mutual: true))\n        }\n        scrollPane(name:'\u30d8\u30c3\u30c0') {\n            textArea(editable:false, text:bind {model.header})\n        }\n        scrollPane(name:'\u30ec\u30b9\u30dd\u30f3\u30b9\uff08\u30c6\u30ad\u30b9\u30c8\uff09') {\n            textArea(editable:false, text:bind {model.json})\n        }\n        scrollPane(name:'\u30ec\u30b9\u30dd\u30f3\u30b9\uff08\u30c4\u30ea\u30fc\uff09') {\n            jsonTree = tree(rootVisible: false)\n            treeUtil.clearTree(jsonTree)\n        }\n    }\n}\n\n\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30d8\u30c3\u30c0\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5207\u3063\u3066\u306a\u304b\u3063\u305f\u306e\u3092\u4fee\u6b63\n\n```groovy:json_client.groovy\nimport groovy.swing.SwingBuilder\nimport groovy.json.JsonOutput\nimport groovy.json.JsonSlurper\nimport groovy.beans.Bindable\nimport javax.swing.*\nimport javax.swing.tree.DefaultMutableTreeNode as TreeNode\nimport java.awt.*\nimport java.net.*\n\ndef manager = new CookieManager()\nmanager.cookiePolicy = CookiePolicy.ACCEPT_ALL\nCookieHandler.default = manager\n\n@Bindable\nclass Model {\n\tString method = 'GET'\n\tString url = ''\n\tString params = ''\n\tString header = ''\n\tString json = ''\n}\ndef model = new Model()\n\ndef tabPane\ndef jsonTree\n\nclass TreeUtil {\n\tdef clearTree = { jsonTree ->\n\t\tjsonTree.model.root.removeAllChildren()\n\t\tjsonTree.model.reload(jsonTree.model.root)\n\t}\n\t\n\tdef reloadTree = { jsonTree, json ->\n\t\tclearTree(jsonTree)\n\t\tcreateNode(jsonTree.model.root, json)\n\t\tjsonTree.model.reload(jsonTree.model.root)\n\t}\n\t\n\tdef createNode = { node, json ->\n\t\tif (json instanceof HashMap) {\n\t\t\tjson.each { key, value ->\n\t\t\t\tdef childNode = new TreeNode(key)\n\t\t\t\tnode.add(childNode)\n\t\t\t\tcreateNode(childNode, value)\n\t\t\t}\n \t\t} else if (json instanceof ArrayList) {\n\t\t\tjson.eachWithIndex { child, index ->\n\t\t\t\tdef childNode = new TreeNode(index + 1)\n\t\t\t\tnode.add(childNode)\n\t\t\t\tcreateNode(childNode, child)\n\t\t\t}\n\t\t} else {\n\t\t\tnode.add(new TreeNode(json))\n\t\t}\n\t}\n}\ndef treeUtil = new TreeUtil()\n\ndef prettyPrint = { text ->\n\tdef result = JsonOutput.prettyPrint(text)\n\t(result =~ /\\\\u[0-9a-zA-Z]{4}/).each { match ->\n\t\tdef code = match[2..5]\n\t\tdef encTxt = new String([Integer.parseInt(code, 16)] as int[], 0, 1)\n\t\tresult = result.replaceAll(/\\\\u${code}/, encTxt)\n\t}\n\tresult\n}\n\ndef sendRequest = {\n\tmodel.header = ''\n\tmodel.json = ''\n\t\n\tdef method = model.method\n\tdef url = model.url\n\tdef params = URLEncoder.encode(model.params, 'utf-8').replaceAll('%3D', '=').replaceAll('%26', '&')\n\tif (method == 'GET') {\n\t\turl = \"${url}?${params}\"\n\t}\n\t\n\tdef conn = url.toURL().openConnection()\n\tconn.requestMethod = method\n\tif (method == 'POST') {\n\t\tconn.doOutput = true\n\t\tconn.outputStream << params\n\t}\n\t\n\tdef header = new StringBuilder()\n\tconn.headerFields.each { key, fields ->\n\t\tfields.each { field ->\n\t\t\theader << \"${key ? key + ':' : ''}${field}\\n\"\n\t\t}\n\t}\n\tmodel.header = header.toString()\n\t\n\tmodel.json = prettyPrint(conn.inputStream.getText('utf-8'))\n\t\n\tdef json = new JsonSlurper().parseText(model.json)\n\ttreeUtil.reloadTree(jsonTree, json)\n\t\n\ttabPane.selectedIndex = 2\n\t\n\tconn.disconnect()\n}\n\nnew SwingBuilder().frame(title:'json\u3092\u53d6\u5f97\u3001\u8868\u793a\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3', defaultCloseOperation:JFrame.EXIT_ON_CLOSE,\n\t\t\t\t\t\tsize: [800, 600], show:true) {\n\tlookAndFeel('nimbus')\n\tborderLayout()\n\thbox(constraints: BorderLayout.NORTH) {\n\t\tcomboBox(items:['GET', 'POST'], selectedItem:bind(source: model, sourceProperty: 'method', mutual: true))\n\t\ttextField(text:bind(source: model, sourceProperty: 'url', mutual: true))\n\t\tbutton(text:'\u9001\u4fe1', actionPerformed:sendRequest)\n\t}\n\ttabPane = tabbedPane(constraints: BorderLayout.CENTER) {\n\t\tscrollPane(name:'\u30d1\u30e9\u30e1\u30fc\u30bf') {\n\t\t\ttextArea(text:bind(source: model, sourceProperty: 'params', mutual: true))\n\t\t}\n\t\tscrollPane(name:'\u30d8\u30c3\u30c0') {\n\t\t\ttextArea(editable:false, text:bind {model.header})\n\t\t}\n\t\tscrollPane(name:'\u30ec\u30b9\u30dd\u30f3\u30b9\uff08\u30c6\u30ad\u30b9\u30c8\uff09') {\n\t\t\ttextArea(editable:false, text:bind {model.json})\n\t\t}\n\t\tscrollPane(name:'\u30ec\u30b9\u30dd\u30f3\u30b9\uff08\u30c4\u30ea\u30fc\uff09') {\n\t\t\tjsonTree = tree(rootVisible: false)\n\t\t\ttreeUtil.clearTree(jsonTree)\n\t\t}\n\t}\n}\n```\n\n![qiita-010.png](https://qiita-image-store.s3.amazonaws.com/0/17179/6e72d568-a955-d317-3e26-017e67fd8730.png)", "tags": ["Groovy"]}