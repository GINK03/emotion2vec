{"tags": ["C++", "C++11"], "context": " More than 1 year has passed since last update.\u904e\u53bb\u306e\u8a18\u4e8b\u3067\u9759\u7684\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306b\u89e6\u308c\u305f\u969b\u306b\u3001\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u4f8b\u3092\u6319\u3052\u3066\u3044\u305f\u3002\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\u4e00\u3064\u8aa4\u89e3\u304c\u751f\u3058\u5f97\u306a\u3044\u305f\u3081\u306b\u4fee\u6b63\u3092\u8003\u3048\u3066\u3044\u305f\u304c\u3001\u30c6\u30fc\u30de\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u305f\u3081\u306b\u72ec\u7acb\u3057\u3066\u8a18\u4e8b\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\nCRTP\u306b\u3088\u308b\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3068\u306f\nCRTP\uff08Curiously Reccursive/Reccuring Template Pattern\uff09\u3068\u306f\u3001\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u308bC++Idiom\u306e\u4e00\u7a2e\u3067\u3042\u308b\u3002\n\u57fa\u672c\u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u578b\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u5b9f\u88c5\u3092\u6307\u3059\u3002\n\ntemplate<class T>\nclass Base;\n\nclass Derived : Base<Derived>;\n\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u904e\u53bb\u306e\u8a18\u4e8b\u3067\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u4f8b\u3092\u793a\u3057\u305f\u3002\n\u9759\u7684\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306e\u5b89\u5168\u3067\u7c21\u5358\u306a\u5b9f\u88c5 -\u52d5\u7684\u304b\u3089\u9759\u7684\u306b\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a-\n\u30ea\u30f3\u30af\u3092\u308f\u3056\u308f\u3056\u8e0f\u3093\u3067\u3044\u305f\u3060\u304f\u306e\u3082\u7533\u3057\u8a33\u306a\u3044\u306e\u3067\u3001\u7c21\u5358\u306b\u3057\u305f\u3082\u306e\u3092\u518d\u63b2\u3059\u308b\u3002\ntemplate<class T>\nclass Interface{\npublic:\n   void function(){ static_cast<T&>(this)->function(); }\n};\n\nclass Derived1 : Interface<Derived1>{\npublic:\n    void function(){ std::cout << \"Derived1\" << std::endl; }\n};\n\nclass Derived2 : Interface<Derived2>{\npublic:\n};\n\n\u898b\u3066\u9802\u3044\u305f\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u3001this\u30dd\u30a4\u30f3\u30bf\u3092\u9759\u7684\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u76ee\u7684\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u6210\u529f\u53ef\u5426\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u3002\n\u3053\u308c\u306f\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3092\u7528\u3044\u305f\u5834\u5408\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\nclass Interface{\npublic:\n   virtual void function()=0;\n   virtual ~Interface()=default;\n};\n\nclass Derived1 : Interface{\npublic:\n    void function(){ std::cout << \"Derived1\" << std::endl; }\n};\n\nclass Derived2 : Interface{\npublic:\n};\n\n\u3053\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30c9\u306e\u610f\u5473\u306f\"\u307b\u307c\"\u540c\u4e00\u3060\u304c\u3001\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307e\u308b\u3067\u9055\u3046\u3002\u305d\u308c\u306f\u3001\u524d\u56de\u8aac\u660e\u3057\u305f\u306e\u3067\u5272\u611b\u3059\u308b\u3068\u3057\u3066\n\"\u307b\u307c\"\u3068\u8868\u73fe\u3057\u305f\u610f\u5473\u3092\u8aac\u660e\u3057\u3066\u3044\u304f\u3002\n\n\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30a8\u30e9\u30fc\u306e\u6027\u8cea\n\u3053\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30c9\u3092\u305d\u308c\u305e\u308c\u4f7f\u3044\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u3088\u3046\u3002\nint main(){\n    Derived1 a;\n    Derived2 b;\n\n    a.function();\n    b.function();\n    return 0;\n}\n\n\u52d5\u7684\u5b9f\u88c5\u306e\u65b9\u304b\u3089\u30a8\u30e9\u30fc\u3092\u898b\u3066\u3044\u304f\u3002\nmain.cpp:35:15: error: variable type 'Derived22' is an abstract class\n    Derived22 b;\n              ^\nmain.cpp:20:17: note: unimplemented pure virtual method 'function' in 'Derived22'\n   virtual void function()=0;\n\n\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u7c21\u6f54\u306b\u793a\u3057\u3066\u3044\u3066\u8aad\u307f\u3084\u3059\u3044\u3002\n\u6b21\u306b\u9759\u7684\u5b9f\u88c5\u306e\u65b9\u306e\u30a8\u30e9\u30fc\u3092\u898b\u308b\u3002\nmain.cpp:6:21: error: non-const lvalue reference to type 'Derived2' cannot bind to a temporary of type 'Interface<Derived2> *'\n   void function(){ static_cast<T&>(this)->function(); }\n                    ^               ~~~~\nmain.cpp:23:7: note: in instantiation of member function 'Interface<Derived2>::function' requested here\n    b.function();\n      ^\nmain.cpp:6:42: error: member reference type 'Derived2' is not a pointer; maybe you meant to use '.'?\n   void function(){ static_cast<T&>(this)->function(); }\n\n\u3055\u3066\u3001\u5148\u307b\u3069\u306b\u6bd4\u3079\u3066\u898b\u8f9b\u3044\u30a8\u30e9\u30fc\u3060\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30a8\u30e9\u30fc\u306b\u3057\u3066\u306f\u826f\u5fc3\u7684\u3060\u3057\u3001\u8ab0\u3067\u3082function\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6012\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u306f\u308f\u304b\u308b\u3060\u308d\u3046\u3002\n\u3053\u3053\u307e\u3067\u306f\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u3002\n\u3060\u304c\u3001\u3053\u3053\u3067\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u3088\u3046\u3002\nint main(){\n    Derived1 a;\n    Derived2 b;\n\n    a.function();\n    //b.function();\n    return 0;\n}\n\n\u4e0d\u5b8c\u5168\u306a\u578b\u3067\u3042\u308bb\u306efunction\u3092\u547c\u3070\u306a\u3044\u3053\u3068\u306b\u3057\u305f\u3002\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u52d5\u7684\u5b9f\u88c5\u306e\u30a8\u30e9\u30fc\u306f\u5909\u308f\u308a\u306a\u304ffunction\u672a\u5b9a\u7fa9\u306e\u30a8\u30e9\u30fc\u3092\u5410\u304f\u304c...\n\u9759\u7684\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304b\u306a\u3044\u3002\n\n\u30ad\u30e3\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u306f\u305a\u306a\u306e\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u7406\u7531\nC++draft\u306a\u3069\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u304c\nN3337\nN3337(Ezoe\u6c0f\u306b\u3088\u308b\u548c\u8a33)\n14.6\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u4f53\u5316\u306e\u8a18\u8ff0\u3042\u305f\u308a\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u304c\n\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4f7f\u308f\u308c\u306a\u3044\u30e1\u30f3\u30d0\u306f\u5b9f\u4f53\u5316\u3057\u306a\u3044\u3002\n\u4eca\u56de\u306e\u5834\u5408\u3001\u4e0d\u5b8c\u5168\u306a\u578bDerived2\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u969b\u3001\u305d\u308c\u306b\u4f34\u3046Interface<Derived2>\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u30e1\u30f3\u30d0\u95a2\u6570function\u306f\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u306b\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u3002\n\u3053\u308c\u306f\u898f\u683c\u3067\u5b9a\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u8981\u7d20\u304c\u80a5\u5927\u5316\u3055\u308c\u306a\u3044\u305f\u3081\u306e\u51e6\u7406\u3067\u3042\u308b\u3002\n\u5f8c\u8005\u306e\u30b3\u30fc\u30c9\u3067\u9759\u7684\u5b9f\u88c5\u304c\u30a8\u30e9\u30fc\u3092\u5410\u304f\u305f\u3081\u306b\u306f\n1.\u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n2.-Ja\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n\u306a\u3069\u304c\u8003\u3048\u3089\u308c\u308b\u304c\u3001\u5171\u306b\u4e0d\u9069\u5207\u3067\u3042\u308b\u3002\ntemplate class Interface<Derived2>;\n\u306e\u3088\u3046\u306b\u660e\u793a\u7684\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u884c\u3046\u306e\u306f\u3042\u304f\u307e\u3067\u30e6\u30fc\u30b6\u30fc\u5074\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8cac\u4efb\u7bc4\u56f2\u3092\u4fb5\u98df\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u4e0a\u3001\u5f8c\u8005\u306f\u305d\u3082\u305d\u3082\u3053\u306e\u4ed5\u69d8\u304c\u975e\u5e38\u306b\u5f37\u529b\u306a\u3082\u306e\u3067\u3042\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u7121\u52b9\u5316\u3059\u308b\u306e\u306f\u8ad6\u5916\u306a\u306e\u3067\u3042\u308b\u3002\n\n\u89e3\u6c7a\u6cd5\n\u5148\u306b\u8a00\u3044\u8a33\u3059\u308b\u3068\u30af\u30bd\u9069\u5f53\u3067\u3042\u308b\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u578b\u7279\u6027\u3092\u8a55\u4fa1\u3057\u305f\u3044\u306e\u306a\u3089\u3001static_assert\u3092\u4f7f\u3048\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u767a\u60f3\n\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u610f\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\ntemplate<class T>\nclass Interface{\npublic:\n    Interface(){\n        static_assert(std::is_same<decltype(std::declval<T>().function()),void>::value,\"function is not defined\");\n    }\n};\n\n\u4e00\u822c\u5316\u3059\u308b\u3068\nstatic_assert(std::is_same<decltype(std::is_same<std::declval<T>().\u95a2\u6570\u540d(std::declval<\u5f15\u65701>(),\n                                                                         ...,\n                                                                         std::declval<\u5f15\u6570n>()),\n                                                 \u8fd4\u308a\u5024\u306e\u578b>::value,\n              \"\u8feb\u771f\u6012\u308a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\");\n\n\n\u3053\u308c\u3067\u9759\u7684\u306b\u30b7\u30b0\u30cb\u30c1\u30e3\u304c\u5b8c\u5168\u304b\u3069\u3046\u304b\u691c\u67fb\u3067\u304d\u308b\u3002\n\u305f\u3068\u3048\u3070\u30a8\u30e9\u30fc\u3092\u5410\u304f\u30b1\u30fc\u30b9\u3068\u3057\u3066\u8fd4\u308a\u5024\u304c\u9055\u3046\u4f8b\u3092\u793a\u3059\u3002\n\n#include<iostream>\n#include<utility>\n\ntemplate<class T>\nclass Interface{\npublic:\n    Interface(){\n        static_assert(std::is_same<decltype(std::declval<T>().add(std::declval<int>(),std::declval<int>())),int>::value,\"add is not defined\");\n    }\n};\n\nclass Derived1 : Interface<Derived1>{\npublic:\n    double add(int a,int b){return a+b;}\n};\n\nint main(){\n    Derived1 a;\n    return 0;\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u304c\u8981\u6c42\u3057\u3066\u3044\u308b\u30b7\u30b0\u30cb\u30c1\u30e3\u306fint(int,int)\u306a\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u5b9f\u88c5\u304cdouble\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nmain.cpp:8:9: error: static_assert failed \"add is not defined\"\n        static_assert(std::is_same<decltype(std::declval<T>().add(std::declval<int>(),std::declval<int>())),int>::value,\"ad...\n        ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmain.cpp:12:7: note: in instantiation of member function 'Interface<Derived1>::Interface' requested here\nclass Derived1 : public Interface<Derived1>{\n\n\n\u4f9d\u7136\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u81ea\u4f53\u306f\u5b9f\u4f53\u5316\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u554f\u984c\u304c\u6b8b\u3063\u3066\u3044\u308b\u304c\u3001\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u307f\u306a\u304f\u3066\u306f\u578b\u691c\u67fb\u3067\u304d\u306a\u304b\u3063\u305f\u9803\u306b\u6bd4\u3079\u308c\u3070\u3060\u3044\u3076\u30de\u30b7\u306b\u306a\u3063\u305f\u65b9\u3067\u3042\u308d\u3046\u3002\n\u3061\u306a\u307f\u306b\u3044\u3089\u3093\u30af\u30e9\u30b9\u4f5c\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5927\u4e08\u592b\u306a\u306e\u304b\u3001\u3068\u3044\u3046\u4eba\u3082\u3044\u308b\u3060\u308d\u3046\u3002\n\u6700\u9069\u5316\u3092\u4e00\u5207\u304b\u3051\u306a\u3051\u308c\u3070\u5f53\u7136Interface\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3070\u308c\u3001\u5c11\u3057\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u751f\u3080\u3053\u3068\u306b\u306a\u308b\u3002\n\u3060\u304c\u3001\u6700\u9069\u5316\u3092\u304b\u3051\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u3088\u3046\u3002\nclass Derived1 : Interface<Derived1>{\npublic:\n    int _a;\n    Derived1(){ std::cin >> _a; }\n    int add(int a, int b){ return a + b; }\n};\n\n\u3061\u3087\u3053\u3063\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306a\u3093\u304b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\nint main(){\n002A12A0  push        ebp  \n002A12A1  mov         ebp,esp  \n002A12A3  sub         esp,8  \n002A12A6  mov         eax,dword ptr ds:[002A4000h]  \n002A12AB  xor         eax,ebp  \n002A12AD  mov         dword ptr [ebp-4],eax  \n    Derived1 a;\n002A12B0  mov         ecx,dword ptr ds:[2A3030h]  \n002A12B6  lea         eax,[a]  \n002A12B9  push        eax  \n002A12BA  call        dword ptr ds:[2A3038h]  \n    a.add(1, 1);\n    return 0;\n}\n\nInterface\u306f\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u554f\u984c\u306a\u3044\u3068\u8a00\u3048\u308b\u3001\u3068\u601d\u308f\u308c\u308b\u3002\n\u904e\u53bb\u306e\u8a18\u4e8b\u3067\u9759\u7684\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306b\u89e6\u308c\u305f\u969b\u306b\u3001\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u4f8b\u3092\u6319\u3052\u3066\u3044\u305f\u3002\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\u4e00\u3064\u8aa4\u89e3\u304c\u751f\u3058\u5f97\u306a\u3044\u305f\u3081\u306b\u4fee\u6b63\u3092\u8003\u3048\u3066\u3044\u305f\u304c\u3001\u30c6\u30fc\u30de\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u305f\u3081\u306b\u72ec\u7acb\u3057\u3066\u8a18\u4e8b\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n#CRTP\u306b\u3088\u308b\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3068\u306f\n\nCRTP\uff08Curiously Reccursive/Reccuring Template Pattern\uff09\u3068\u306f\u3001\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u308bC++Idiom\u306e\u4e00\u7a2e\u3067\u3042\u308b\u3002\n\n\u57fa\u672c\u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u578b\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u5b9f\u88c5\u3092\u6307\u3059\u3002\n\n```cpp\n\ntemplate<class T>\nclass Base;\n\nclass Derived : Base<Derived>;\n\n```\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u904e\u53bb\u306e\u8a18\u4e8b\u3067\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u4f8b\u3092\u793a\u3057\u305f\u3002\n[\u9759\u7684\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306e\u5b89\u5168\u3067\u7c21\u5358\u306a\u5b9f\u88c5 -\u52d5\u7684\u304b\u3089\u9759\u7684\u306b\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a-](http://qiita.com/Riyaaaa_a/items/887f6190e710c6410994)\n\n\u30ea\u30f3\u30af\u3092\u308f\u3056\u308f\u3056\u8e0f\u3093\u3067\u3044\u305f\u3060\u304f\u306e\u3082\u7533\u3057\u8a33\u306a\u3044\u306e\u3067\u3001\u7c21\u5358\u306b\u3057\u305f\u3082\u306e\u3092\u518d\u63b2\u3059\u308b\u3002\n\n```cpp\ntemplate<class T>\nclass Interface{\npublic:\n   void function(){ static_cast<T&>(this)->function(); }\n};\n\nclass Derived1 : Interface<Derived1>{\npublic:\n    void function(){ std::cout << \"Derived1\" << std::endl; }\n};\n\nclass Derived2 : Interface<Derived2>{\npublic:\n};\n```\n\n\u898b\u3066\u9802\u3044\u305f\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u3001this\u30dd\u30a4\u30f3\u30bf\u3092\u9759\u7684\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u76ee\u7684\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u6210\u529f\u53ef\u5426\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u3002\n\n\u3053\u308c\u306f\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3092\u7528\u3044\u305f\u5834\u5408\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\n```cpp\nclass Interface{\npublic:\n   virtual void function()=0;\n   virtual ~Interface()=default;\n};\n\nclass Derived1 : Interface{\npublic:\n    void function(){ std::cout << \"Derived1\" << std::endl; }\n};\n\nclass Derived2 : Interface{\npublic:\n};\n```\n\n\u3053\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30c9\u306e\u610f\u5473\u306f\"\u307b\u307c\"\u540c\u4e00\u3060\u304c\u3001\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307e\u308b\u3067\u9055\u3046\u3002\u305d\u308c\u306f\u3001\u524d\u56de\u8aac\u660e\u3057\u305f\u306e\u3067\u5272\u611b\u3059\u308b\u3068\u3057\u3066\n\n\"\u307b\u307c\"\u3068\u8868\u73fe\u3057\u305f\u610f\u5473\u3092\u8aac\u660e\u3057\u3066\u3044\u304f\u3002\n\n\n#\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30a8\u30e9\u30fc\u306e\u6027\u8cea\n\n\u3053\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30c9\u3092\u305d\u308c\u305e\u308c\u4f7f\u3044\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u3088\u3046\u3002\n\n```cpp\nint main(){\n    Derived1 a;\n    Derived2 b;\n\n    a.function();\n    b.function();\n    return 0;\n}\n```\n\n\u52d5\u7684\u5b9f\u88c5\u306e\u65b9\u304b\u3089\u30a8\u30e9\u30fc\u3092\u898b\u3066\u3044\u304f\u3002\n\n```\nmain.cpp:35:15: error: variable type 'Derived22' is an abstract class\n    Derived22 b;\n              ^\nmain.cpp:20:17: note: unimplemented pure virtual method 'function' in 'Derived22'\n   virtual void function()=0;\n```\n\n\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u7c21\u6f54\u306b\u793a\u3057\u3066\u3044\u3066\u8aad\u307f\u3084\u3059\u3044\u3002\n\n\u6b21\u306b\u9759\u7684\u5b9f\u88c5\u306e\u65b9\u306e\u30a8\u30e9\u30fc\u3092\u898b\u308b\u3002\n\n```\nmain.cpp:6:21: error: non-const lvalue reference to type 'Derived2' cannot bind to a temporary of type 'Interface<Derived2> *'\n   void function(){ static_cast<T&>(this)->function(); }\n                    ^               ~~~~\nmain.cpp:23:7: note: in instantiation of member function 'Interface<Derived2>::function' requested here\n    b.function();\n      ^\nmain.cpp:6:42: error: member reference type 'Derived2' is not a pointer; maybe you meant to use '.'?\n   void function(){ static_cast<T&>(this)->function(); }\n```\n\n\n\u3055\u3066\u3001\u5148\u307b\u3069\u306b\u6bd4\u3079\u3066\u898b\u8f9b\u3044\u30a8\u30e9\u30fc\u3060\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30a8\u30e9\u30fc\u306b\u3057\u3066\u306f\u826f\u5fc3\u7684\u3060\u3057\u3001\u8ab0\u3067\u3082function\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6012\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u306f\u308f\u304b\u308b\u3060\u308d\u3046\u3002\n\n\u3053\u3053\u307e\u3067\u306f\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u3002\n\u3060\u304c\u3001\u3053\u3053\u3067\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u3088\u3046\u3002\n\n\n```cpp\nint main(){\n    Derived1 a;\n    Derived2 b;\n\n    a.function();\n    //b.function();\n    return 0;\n}\n```\n\n\u4e0d\u5b8c\u5168\u306a\u578b\u3067\u3042\u308bb\u306efunction\u3092\u547c\u3070\u306a\u3044\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u52d5\u7684\u5b9f\u88c5\u306e\u30a8\u30e9\u30fc\u306f\u5909\u308f\u308a\u306a\u304ffunction\u672a\u5b9a\u7fa9\u306e\u30a8\u30e9\u30fc\u3092\u5410\u304f\u304c...\n\n**\u9759\u7684\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u306f\u30a8\u30e9\u30fc\u3092\u5410\u304b\u306a\u3044\u3002**\n\n\n#\u30ad\u30e3\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u306f\u305a\u306a\u306e\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u7406\u7531\n\nC++draft\u306a\u3069\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u304c\n[N3337](https://github.com/cplusplus/draft/blob/master/papers/n3337.pdf)\n[N3337(Ezoe\u6c0f\u306b\u3088\u308b\u548c\u8a33)](https://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#temp.inst)\n\n14.6\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u4f53\u5316\u306e\u8a18\u8ff0\u3042\u305f\u308a\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u304c\n\n**\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4f7f\u308f\u308c\u306a\u3044\u30e1\u30f3\u30d0\u306f\u5b9f\u4f53\u5316\u3057\u306a\u3044\u3002**\n\n\u4eca\u56de\u306e\u5834\u5408\u3001\u4e0d\u5b8c\u5168\u306a\u578b`Derived2`\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u969b\u3001\u305d\u308c\u306b\u4f34\u3046`Interface<Derived2>`\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u30e1\u30f3\u30d0\u95a2\u6570function\u306f\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u306b\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u3002\n\n\u3053\u308c\u306f\u898f\u683c\u3067\u5b9a\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u8981\u7d20\u304c\u80a5\u5927\u5316\u3055\u308c\u306a\u3044\u305f\u3081\u306e\u51e6\u7406\u3067\u3042\u308b\u3002\n\n\u5f8c\u8005\u306e\u30b3\u30fc\u30c9\u3067\u9759\u7684\u5b9f\u88c5\u304c\u30a8\u30e9\u30fc\u3092\u5410\u304f\u305f\u3081\u306b\u306f\n\n1.\u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n2.-Ja\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n\n\u306a\u3069\u304c\u8003\u3048\u3089\u308c\u308b\u304c\u3001\u5171\u306b\u4e0d\u9069\u5207\u3067\u3042\u308b\u3002\n`template class Interface<Derived2>;`\n\u306e\u3088\u3046\u306b\u660e\u793a\u7684\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u884c\u3046\u306e\u306f\u3042\u304f\u307e\u3067\u30e6\u30fc\u30b6\u30fc\u5074\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8cac\u4efb\u7bc4\u56f2\u3092\u4fb5\u98df\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u4e0a\u3001\u5f8c\u8005\u306f\u305d\u3082\u305d\u3082\u3053\u306e\u4ed5\u69d8\u304c\u975e\u5e38\u306b\u5f37\u529b\u306a\u3082\u306e\u3067\u3042\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u7121\u52b9\u5316\u3059\u308b\u306e\u306f\u8ad6\u5916\u306a\u306e\u3067\u3042\u308b\u3002\n\n#\u89e3\u6c7a\u6cd5\n\n**\u5148\u306b\u8a00\u3044\u8a33\u3059\u308b\u3068\u30af\u30bd\u9069\u5f53\u3067\u3042\u308b**\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u578b\u7279\u6027\u3092\u8a55\u4fa1\u3057\u305f\u3044\u306e\u306a\u3089\u3001static_assert\u3092\u4f7f\u3048\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u767a\u60f3\n\n\u9759\u7684\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u610f\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\n\n```cpp\ntemplate<class T>\nclass Interface{\npublic:\n    Interface(){\n        static_assert(std::is_same<decltype(std::declval<T>().function()),void>::value,\"function is not defined\");\n    }\n};\n```\n\n\u4e00\u822c\u5316\u3059\u308b\u3068\n\n```\nstatic_assert(std::is_same<decltype(std::is_same<std::declval<T>().\u95a2\u6570\u540d(std::declval<\u5f15\u65701>(),\n                                                                         ...,\n                                                                         std::declval<\u5f15\u6570n>()),\n                                                 \u8fd4\u308a\u5024\u306e\u578b>::value,\n              \"\u8feb\u771f\u6012\u308a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\");\n\n```\n\n\u3053\u308c\u3067\u9759\u7684\u306b\u30b7\u30b0\u30cb\u30c1\u30e3\u304c\u5b8c\u5168\u304b\u3069\u3046\u304b\u691c\u67fb\u3067\u304d\u308b\u3002\n\n\u305f\u3068\u3048\u3070\u30a8\u30e9\u30fc\u3092\u5410\u304f\u30b1\u30fc\u30b9\u3068\u3057\u3066\u8fd4\u308a\u5024\u304c\u9055\u3046\u4f8b\u3092\u793a\u3059\u3002\n\n```cpp\n\n#include<iostream>\n#include<utility>\n\ntemplate<class T>\nclass Interface{\npublic:\n    Interface(){\n        static_assert(std::is_same<decltype(std::declval<T>().add(std::declval<int>(),std::declval<int>())),int>::value,\"add is not defined\");\n    }\n};\n\nclass Derived1 : Interface<Derived1>{\npublic:\n    double add(int a,int b){return a+b;}\n};\n\nint main(){\n    Derived1 a;\n    return 0;\n}\n\n```\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u304c\u8981\u6c42\u3057\u3066\u3044\u308b\u30b7\u30b0\u30cb\u30c1\u30e3\u306fint(int,int)\u306a\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u5b9f\u88c5\u304cdouble\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```\nmain.cpp:8:9: error: static_assert failed \"add is not defined\"\n        static_assert(std::is_same<decltype(std::declval<T>().add(std::declval<int>(),std::declval<int>())),int>::value,\"ad...\n        ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmain.cpp:12:7: note: in instantiation of member function 'Interface<Derived1>::Interface' requested here\nclass Derived1 : public Interface<Derived1>{\n\n```\n\n**\u4f9d\u7136\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u81ea\u4f53\u306f\u5b9f\u4f53\u5316\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u554f\u984c\u304c\u6b8b\u3063\u3066\u3044\u308b**\u304c\u3001\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u307f\u306a\u304f\u3066\u306f\u578b\u691c\u67fb\u3067\u304d\u306a\u304b\u3063\u305f\u9803\u306b\u6bd4\u3079\u308c\u3070\u3060\u3044\u3076\u30de\u30b7\u306b\u306a\u3063\u305f\u65b9\u3067\u3042\u308d\u3046\u3002\n\n\n\u3061\u306a\u307f\u306b\u3044\u3089\u3093\u30af\u30e9\u30b9\u4f5c\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5927\u4e08\u592b\u306a\u306e\u304b\u3001\u3068\u3044\u3046\u4eba\u3082\u3044\u308b\u3060\u308d\u3046\u3002\n\n\u6700\u9069\u5316\u3092\u4e00\u5207\u304b\u3051\u306a\u3051\u308c\u3070\u5f53\u7136Interface\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3070\u308c\u3001\u5c11\u3057\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u751f\u3080\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u3060\u304c\u3001\u6700\u9069\u5316\u3092\u304b\u3051\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\n```cpp\nclass Derived1 : Interface<Derived1>{\npublic:\n\tint _a;\n\tDerived1(){ std::cin >> _a; }\n\tint add(int a, int b){ return a + b; }\n};\n```\n\n\u3061\u3087\u3053\u3063\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306a\u3093\u304b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u308b\u3068\n\n```\nint main(){\n002A12A0  push        ebp  \n002A12A1  mov         ebp,esp  \n002A12A3  sub         esp,8  \n002A12A6  mov         eax,dword ptr ds:[002A4000h]  \n002A12AB  xor         eax,ebp  \n002A12AD  mov         dword ptr [ebp-4],eax  \n\tDerived1 a;\n002A12B0  mov         ecx,dword ptr ds:[2A3030h]  \n002A12B6  lea         eax,[a]  \n002A12B9  push        eax  \n002A12BA  call        dword ptr ds:[2A3038h]  \n\ta.add(1, 1);\n\treturn 0;\n}\n```\n\nInterface\u306f\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u554f\u984c\u306a\u3044\u3068\u8a00\u3048\u308b\u3001\u3068\u601d\u308f\u308c\u308b\u3002\n\n"}