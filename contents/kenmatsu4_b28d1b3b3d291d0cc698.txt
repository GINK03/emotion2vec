{"tags": ["\u7d71\u8a08\u5b66", "statistics", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"], "context": " More than 1 year has passed since last update.\u7d71\u8a08\u5b66\u3084\u6a5f\u68b0\u5b66\u7fd2\u3092\u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u3068\u300c\u5c24\u5ea6\u300d\u3068\u3044\u3046\u6982\u5ff5\u306b\u51fa\u4f1a\u3044\u307e\u3059\u3002\u307e\u305a\u8aad\u3081\u306a\u3044\u3068\u3044\u3046\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u304f\u3064\u304b\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u304c\u3001\u300c\u5c24\u5ea6\uff08\u3086\u3046\u3069\uff09\u300d\u3067\u3059\u3002\u300c\u5c24\u3082\u3089\u3057\u3044\uff08\u3082\u3063\u3068\u3082\u3089\u3057\u3044\uff09\u300d\u306e\u300c\u5c24\u300d\u3067\u3059\u306d\u3002\u72ac \u3058\u3083\u3042\u308a\u307e\u305b\u3093w \n\u78ba\u7387\u95a2\u6570\u3084\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u3092\u7406\u89e3\u3057\u3066\u3044\u308c\u3070\u6570\u5f0f\u7684\u306b\u306f\u3053\u306e\u5c24\u5ea6\u3092\u51e6\u7406\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u5c11\u3057\u76f4\u611f\u7684\u306a\u7406\u89e3\u306e\u305f\u3081\u306b\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306b\u89e3\u8aac\u3092\u8a66\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306e\u5168\u6587\u306fGithub( https://github.com/matsuken92/Qiita_Contents/blob/master/General/Likelihood.ipynb )\u306b\u3082\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u6b63\u898f\u5206\u5e03\u3092\u4f8b\u306b\u3068\u3063\u3066\n\u6b63\u898f\u5206\u5e03\u306e\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u306f\nf(x)={1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x-\\mu)^2 \\over \\sigma^2} \\right)\nf(x)=1\u221a2\u03c0\u03c32exp(\u221212(x\u2212\u03bc)2\u03c32)f(x)=12\u03c0\u03c32\u2212\u2212\u2212\u2212\u221aexp(\u221212(x\u2212\u03bc)2\u03c32){f(x)={1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x-\\mu)^2 \\over \\sigma^2} \\right)\n}\n\u3068\u8868\u305b\u307e\u3059\u3002\u30b0\u30e9\u30d5\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\n\uff08\u5e73\u574710, \u6a19\u6e96\u504f\u5dee3\u306e\u6b63\u898f\u5206\u5e03\u306e\u56f3\uff09\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\nimport seaborn as sns\nimport numpy.random as rd\n\nm = 10\ns = 3\n\nmin_x = m-4*s\nmax_x = m+4*s\n\nx = np.linspace(min_x, max_x, 201)\ny = (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(x-m)**2/s**2)\n\nplt.figure(figsize=(8,5))\nplt.xlim(min_x, max_x)\nplt.ylim(0,max(y)*1.1)\nplt.plot(x,y)\nplt.show()\n\n\u3053\u306e\u56f3\u306f\u3001\u5e73\u5747\u03bc\u03bc\\mu\u3001\u6a19\u6e96\u504f\u5dee\u03c3\\sigma\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u304c\u78ba\u5b9a\u3057\u3066\u304a\u308a(\u4e0a\u56f3\u306e\u5834\u5408\u306f\u5e73\u5747\u03bc=10\\mu=10\u3001\u6a19\u6e96\u504f\u5dee\u03c3=3\\sigma=3)\u3001xx\u3092\u5909\u6570\u3068\u3057\u3066\u6a2a\u8ef8\u306b\u53d6\u3063\u3066\u3044\u308b\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3068\u3057\u3066\u306e\u7e26\u8ef8\u306f\u78ba\u7387\u5bc6\u5ea6f(x)f(x)\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5c24\u5ea6\u95a2\u6570\u306e\u57fa\u672c\u6982\u5ff5\u306f\u3001\u300c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u30c7\u30fc\u30bf\u304c\u89b3\u6e2c\u3055\u308c\u305f\u5f8c\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306f\u5143\u3005\u3069\u3046\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6301\u3064\u78ba\u7387\u5206\u5e03\u304b\u3089\u751f\u307e\u308c\u305f\u3082\u306e\u3060\u3063\u305f\u304b\uff1f\u300d\u3068\u8a00\u3046\u554f\u3044\u306b\u7b54\u3048\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u9006\u78ba\u7387\u7684\u306a\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3063\u307d\u3055\u304c\u3042\u308b\u3068\u81ea\u5206\u306f\u601d\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u5b9f\u969b\u3001\u5c24\u5ea6\u306f\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u69cb\u6210\u3059\u308b\uff11\u8981\u7d20\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff09\n\uff08\u4ee5\u4e0b\u3001\u3053\u3053\u3067\u30c7\u30fc\u30bf\u3068\u8a00\u3063\u3066\u3044\u305f\u7528\u8a9e\u306f\u6a19\u672c\u3068\u8a18\u3057\u307e\u3059\uff09\n\u3053\u3053\u3067\u3001\u6a19\u672c\u304c\uff11\uff10\u500b\u624b\u306b\u5165\u308a( x=(x1,x2,\u22ef,x10){\\bf x} = (x_1, x_2,\\cdots, x_{10}) )\u3001\u305d\u308c\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u3053\u3068\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u304c\u3001\u5e73\u5747\u03bc\\mu\u3001\u6a19\u6e96\u504f\u5dee\u03c3\\sigma\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u304c\u3069\u308c\u304f\u3089\u3044\u306a\u306e\u304b\u4e0d\u660e\u3067\u3042\u308b\u3068\u8a00\u3046\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\n\nplt.figure(figsize=(8,2))\nrd.seed(7)\ndata = rd.normal(10, 3, 10, )\nplt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n\n\u300c10\u500b\u306e\u6a19\u672c\u304c\u3053\u306e\u5024\u3068\u306a\u3063\u305f\u540c\u6642\u5206\u5e03\u300d\u3092\u307e\u305a\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e10\u500b\u306e\u6a19\u672c\u306fiid(\u72ec\u7acb\u540c\u4e00\u5206\u5e03\uff1a\u540c\u3058\u5206\u5e03\u304b\u3089\u72ec\u7acb\u306b\u53d6\u3089\u308c\u305f\u6a19\u672c\uff09\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\u72ec\u7acb\u306a\u306e\u3067\u305d\u308c\u305e\u308c\u306e\u78ba\u7387\u5bc6\u5ea6\u306e\u7a4d\u3068\u3057\u3066\u8868\u305b\u308b\u306e\u3067\u3001\nP(x_1, x_2,\\cdots,x_{10}) = P(x_1)P(x_2)\\cdots P(x_{10}) \nP(x1,x2,\u22ef,x10)=P(x1)P(x2)\u22efP(x10){P(x_1, x_2,\\cdots,x_{10}) = P(x_1)P(x_2)\\cdots P(x_{10}) \n}\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067P(xi)P(x_i)\u306f\u5168\u3066\u6b63\u898f\u5206\u5e03\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u3001\nP(x_1, x_2,\\cdots,x_{10}) = f(x_1)f(x_2)\\cdots f(x_{10}) \nP(x1,x2,\u22ef,x10)=f(x1)f(x2)\u22eff(x10){P(x_1, x_2,\\cdots,x_{10}) = f(x_1)f(x_2)\\cdots f(x_{10}) \n}\n\u3068\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u3092\u3055\u3089\u306b\u5c55\u958b\u3057\u3066\u66f8\u304f\u3068\nP(x_1, x_2,\\cdots,x_{10}) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\nP(x1,x2,\u22ef,x10)=10\u220fi=11\u221a2\u03c0\u03c32exp(\u221212(xi\u2212\u03bc)2\u03c32){P(x_1, x_2,\\cdots,x_{10}) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\n}\n\u3067\u3059\u3002\u6a19\u672cxix_i\u306fexp(\u22c5)\\exp(\\cdot)\u306e\u4e2d\u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067\u6a19\u672c10\u500b\u306e\u540c\u6642\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3044\u307e\u6a19\u672c\u306f\u5b9f\u73fe\u5024\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3082\u306f\u3084\u4e0d\u78ba\u5b9a\u306a\u78ba\u7387\u7684\u306a\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u78ba\u5b9a\u5024\u3067\u3059\u3002\u3080\u3057\u308d\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u306f\u5e73\u5747\u03bc\\mu\u3001\u6a19\u6e96\u504f\u5dee\u03c3\\sigma\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3057\u305f\u3002\u306a\u306e\u3067\u3001xix_i\u306f\u5b9a\u6570\u3068\u8003\u3048\u3001\u03bc\\mu\u3001\u03c3\\sigma\u304c\u5909\u6570\u3067\u3042\u308b\u3068\u8a00\u3046\u98a8\u306b\u767a\u60f3\u3092\u8ee2\u63db\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306e\u5f62\u306f\u5168\u304f\u540c\u3058\u3067\u3001\u5909\u6570\u3092\u03bc\\mu\u3001\u03c3\\sigma\u3067\u3042\u308b\u3068\u5ba3\u8a00\u3057\u76f4\u3057\u305f\u3082\u306e\u3092\u5c24\u5ea6(Likelihood)\u3068\u5b9a\u7fa9\u3057\nL(\\mu, \\sigma) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\nL(\u03bc,\u03c3)=10\u220fi=11\u221a2\u03c0\u03c32exp(\u221212(xi\u2212\u03bc)2\u03c32){L(\\mu, \\sigma) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\n}\n\u3068\u3057\u307e\u3059\u3002\u53f3\u8fba\u306e\u5f62\u306f\u5168\u304f\u5909\u308f\u308a\u307e\u305b\u3093\u306d\u3002\u3067\u3082\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u3053\u308c\u3092\u30b0\u30e9\u30d5\u306b\u3057\u3066\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u7406\u89e3\u3059\u308b\n\u03bc\\mu\u3001\u03c3\\sigma\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eee\u306b\u03bc=0\\mu=0\u3001\u03c3=1\\sigma=1\u3060\u3068\u601d\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u3068\u3001\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u307e\u3063\u305f\u304f\u3082\u3063\u3066\u5916\u3057\u3066\u308b\u611f\u3058\u3067\u3059\u306d\u3002\u3053\u306e\u6642\u3001\u5c24\u5ea6\u3082\u5024\u304c\u5c0f\u3055\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n(\u5c24\u5ea6\u306f\u78ba\u7387\uff08\u5bc6\u5ea6\uff09\u3092\u6a19\u672c\u500b\u6570\u5206\u3060\u3051\u639b\u3051\u3066\u3067\u304d\u305f\u3082\u306e\u306a\u306e\u3067\u30010\u301c1\u306e\u9593\u306e\u6570\u3067\u4f55\u56de\u3082\u304b\u3051\u7b97\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u304b\u306a\u308a\u5c0f\u3055\u3044\u6570\u3001\u307b\u307c\uff10\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\u304b\u3051\u7b97\u304c\u8db3\u3057\u7b97\u306b\u3067\u304d\u308b\u8a08\u7b97\u306e\u3057\u3084\u3059\u3055\u3082\u3042\u308a\u5bfe\u6570\u5c24\u5ea6\u3068\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u305d\u306e\u5834\u5408\u3001\u4e0a\u8a18\u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u6570\u5024\u3092\u898b\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u6570\u5024\u3068\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\uff09\nm = 0\ns = 1\n\n\nmin_x = m-4*s\nmax_x = m+4*s\n\ndef norm_dens(val):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n\nx = np.linspace(min_x, max_x, 201)\ny = norm_dens(x)\n\nL = np.prod([norm_dens(x_i) for x_i in data])\nl = np.log(L)\n\nplt.figure(figsize=(8,5))\nplt.xlim(min_x, 16)\nplt.ylim(-0.01,max(y)*1.1)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\nplt.plot(x,y)\n\n# \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\nplt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\nfor d in data:\n    plt.plot([d, d], [0, norm_dens(d)], \"k--\", lw=1)\n\nplt.title(\"Likelihood:{0:.5f}, log Likelihood:{1:.5f}\".format(L, l))\n\nplt.show()\n\n\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u307b\u3068\u3093\u3069\uff10\u306e\u6240\u3070\u304b\u308a\u306b\u6a19\u672c\u304c\u3042\u308b\u306e\u3067\u3001L(\u03bc,\u03c3)L(\\mu, \\sigma)\u3082\u304b\u306a\u308a\u5c0f\u3055\u3044\u5c24\u5ea6\u3068\u306a\u308a\u307e\u3059\uff08\u5bfe\u6570\u5c24\u5ea6: \u7d04-568\uff09\n\u8a66\u3057\u306b\u4eca\u5ea6\u306f\u3001\u03bc=5\\mu=5\u3001\u03c3=4\\sigma=4\u304f\u3089\u3044\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\uff08\u30b3\u30fc\u30c9\u306f\u5148\u307b\u3069\u306e\u3082\u306e\u306b\u03bc=5\\mu=5\u3001\u03c3=4\\sigma=4\u306e\u3068\u3053\u308d\u3060\u3051\u5909\u66f4\u3057\u305f\u3082\u306e\uff09\n\u70b9\u7dda\u3067\u793a\u3057\u305f\u3068\u3053\u308d\u304c\u3001\u5404\u6a19\u672c\u306b\u5bfe\u5fdc\u3059\u308b\u5c24\u5ea6\u3067\u3059\u3002\u3055\u3063\u304d\u3088\u308a\u3061\u3087\u3063\u3068\u3042\u305f\u3063\u3066\u304d\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u3002\u4eca\u56de\u306f\u5bfe\u6570\u5c24\u5ea6\u306f\u7d04-20\u3068\u3060\u3044\u3076\u5927\u304d\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u3082\u3063\u3068\u76f4\u611f\u7684\u306b\n\u03bc\\mu\u304c\u5909\u5316\u3057\u3066\u3044\u304f\u3068\u304d\u306b\u5c24\u5ea6\u304c\u3069\u3046\u5909\u308f\u3063\u3066\u3044\u304f\u304b\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u03bc=10\\mu=10\u3067\u5bfe\u6570\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d  \n\nfrom matplotlib import animation as ani\n\nnum_frame = 30\n\nmin_x = -11\nmax_x = 21\n\nx = np.linspace(min_x, max_x, 201)\n\n\ndef norm_dens(val, m, s):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n\ndef animate(nframe):\n    global num_frame\n    plt.clf()\n\n    m = nframe/float(num_frame) * 15\n    s = 3\n    y = norm_dens(x, m, s)\n\n    L = np.prod([norm_dens(x_i, m, s) for x_i in data])\n    l = np.log(L)\n\n    plt.xlim(min_x, 16)\n    plt.ylim(-0.01,max(y)*1.1)\n\n    # \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\n    plt.plot(x,y)\n\n    # \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\n    plt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n    for d in data:\n        plt.plot([d, d], [0, norm_dens(d, m, s)], \"k--\", lw=1)\n\n    plt.title(\"mu:{0}, Likelihood:{1:.5f}, log Likelihood:{2:.5f}\".format(m, L, l))\n\n    #plt.show()\n\nfig = plt.figure(figsize=(10,7))\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('likelihood.gif', writer='imagemagick', fps=1, dpi=64)\n\n\n\n\u03c3\\sigma\u304c\u5909\u308f\u3063\u3066\u3044\u304f\u3068\u304d\u306f\u3001\u03c3=2.7\\sigma=2.7\u304f\u3089\u3044\u306e\u3068\u304d\u306b\u5bfe\u6570\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u5143\u3005\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u305f\u3068\u304d\u306f\u03c3=3\\sigma=3\u3060\u3063\u305f\u306e\u3067\u3001\u5c11\u3057\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u8fd1\u3057\u3044\u5024\u304c\u53d6\u308c\u3066\u3044\u307e\u3059\u306d  \n\nnum_frame = 30\n\nmin_x = -11\nmax_x = 21\n\nx = np.linspace(min_x, max_x, 201)\n\ndef norm_dens(val, m, s):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n\ndef animate(nframe):\n    global num_frame\n    plt.clf()\n\n    m = 10\n    s = nframe/float(num_frame) * 5\n    y = norm_dens(x, m, s)\n\n    L = np.prod([norm_dens(x_i, m, s) for x_i in data])\n    l = np.log(L)\n\n    plt.xlim(min_x, 16)\n    plt.ylim(-0.01,.6)\n\n    # \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\n    plt.plot(x,y)\n\n    # \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\n    plt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n    for d in data:\n        plt.plot([d, d], [0, norm_dens(d, m, s)], \"k--\", lw=1)\n\n    plt.title(\"sd:{0:.3f}, Likelihood:{1:.5f}, log Likelihood:{2:.5f}\".format(s, L, l))\n\n    #plt.show()\n\nfig = plt.figure(figsize=(10,7))\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('likelihood_s.gif', writer='imagemagick', fps=1, dpi=64)\n\n\n\u6700\u5c24\u63a8\u5b9a\n\u03bc\\mu\u3092\u5909\u5316\u3055\u305b\u305f\u3068\u304d\u306e\u5bfe\u6570\u5c24\u5ea6\u306e\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\u5c24\u5ea6\u3092\u03bc\\mu\u3067\u5fae\u5206\u3057\u30660\u3068\u3057\u305f\u3068\u304d\u306e\u03bc\\mu\u306e\u5024\u304c10\u3042\u305f\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3060\u308d\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u6700\u5c24\u63a8\u5b9a\u3067\u3059\u306d\u3002\uff08\u3068\u308a\u3042\u3048\u305a\u306fs\u304c\u56fa\u5b9a\u3060\u3068\u3057\u3066\uff09\n\n# m\u3092\u5909\u5316\u3055\u305b\u308b\n\nlist_L = []\ns = 3\n\nmm = np.linspace(0, 20,300)\nfor m in mm:\n    list_L.append(np.prod([norm_dens(x_i, m, s) for x_i in data]))\n\n\nplt.figure(figsize=(8,5))\nplt.xlim(min(mm), max(mm))\nplt.plot(xx, (list_L))\nplt.title(\"Likelihood curve\")\nplt.xlabel(\"mu\")\n\n\u540c\u3058\u304fss\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u5c24\u5ea6\u306e\u5909\u5316\u30b0\u30e9\u30d5\u3067\u3059\u3002s=3s=3\u3042\u305f\u308a\u306b\u6700\u5927\u5024\u304c\u3042\u308a\u305d\u3046\u306a\u3053\u3068\u304c\u3084\u306f\u308a\u898b\u3066\u308f\u304b\u308a\u307e\u3059\u3002\n\n# s\u3092\u5909\u5316\u3055\u305b\u308b\n\nlist_L = []\nm = 10\n\nss = np.linspace(0, 20,300)\nfor s in ss:\n    list_L.append(np.prod([norm_dens(x_i, m, s) for x_i in data]))\n\nplt.figure(figsize=(8,5))\nplt.xlim(min(ss), max(ss))\nplt.plot(ss, (list_L))\nplt.title(\"Likelihood curve\")\nplt.xlabel(\"s\")\n\n\u6700\u5f8c\u306b\u03bc\\mu\u3068\u03c3\\sigma \u540c\u6642\u306b\u898b\u3066\u307f\u308b\u3068\u3001\u03bc\\mu\u306f10\u3061\u3087\u3063\u3068\u591a\u3081\u3001\u03c3\\sigma\u306f\u3061\u3087\u3063\u3068\u5c11\u306a\u3081\u304f\u3089\u3044\u306e\u3068\u3053\u308d\u306b\u6700\u5c24\u63a8\u5b9a\u3057\u3066\u5f97\u3089\u308c\u308b\u03bc\\mu\u3068\u03c3\\sigma\u306e\u5024\u304c\u3042\u308a\u305d\u3046\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059  \n\n# \u7b49\u9ad8\u7dda\n\nplt.figure(figsize=(8,5))\nmu = np.linspace(5, 15, 200)\ns = np.linspace(0, 5, 200)\nMU, S = np.meshgrid(mu, s)\n\nZ = np.array([(np.prod([norm_dens(x_i, a, b) for x_i in data])) for a, b in zip(MU.flatten(), S.flatten())])\nplt.contour(MU, S, Z.reshape(MU.shape), cmap=cm.Blues)\nplt.xlabel(\"mu\")\nplt.ylabel(\"s\")\n\n\u7d71\u8a08\u5b66\u3084\u6a5f\u68b0\u5b66\u7fd2\u3092\u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u3068\u300c\u5c24\u5ea6\u300d\u3068\u3044\u3046\u6982\u5ff5\u306b\u51fa\u4f1a\u3044\u307e\u3059\u3002\u307e\u305a\u8aad\u3081\u306a\u3044\u3068\u3044\u3046\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u304f\u3064\u304b\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u304c\u3001\u300c\u5c24\u5ea6\uff08\u3086\u3046\u3069\uff09\u300d\u3067\u3059\u3002\u300c\u5c24\u3082\u3089\u3057\u3044\uff08\u3082\u3063\u3068\u3082\u3089\u3057\u3044\uff09\u300d\u306e\u300c\u5c24\u300d\u3067\u3059\u306d\u3002\u72ac:dog: \u3058\u3083\u3042\u308a\u307e\u305b\u3093w \n\u78ba\u7387\u95a2\u6570\u3084\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u3092\u7406\u89e3\u3057\u3066\u3044\u308c\u3070\u6570\u5f0f\u7684\u306b\u306f\u3053\u306e\u5c24\u5ea6\u3092\u51e6\u7406\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u5c11\u3057\u76f4\u611f\u7684\u306a\u7406\u89e3\u306e\u305f\u3081\u306b\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306b\u89e3\u8aac\u3092\u8a66\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306e\u5168\u6587\u306fGithub( https://github.com/matsuken92/Qiita_Contents/blob/master/General/Likelihood.ipynb )\u306b\u3082\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n# \u6b63\u898f\u5206\u5e03\u3092\u4f8b\u306b\u3068\u3063\u3066\n\n\u6b63\u898f\u5206\u5e03\u306e\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u306f\n\n```math\nf(x)={1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x-\\mu)^2 \\over \\sigma^2} \\right)\n```\n\n\u3068\u8868\u305b\u307e\u3059\u3002\u30b0\u30e9\u30d5\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\n![normdist.png](https://qiita-image-store.s3.amazonaws.com/0/50670/c0ae2048-1432-f6c8-e871-49da757055bf.png)\n\n\uff08\u5e73\u574710, \u6a19\u6e96\u504f\u5dee3\u306e\u6b63\u898f\u5206\u5e03\u306e\u56f3\uff09\n\n```py\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\nimport seaborn as sns\nimport numpy.random as rd\n\nm = 10\ns = 3\n\nmin_x = m-4*s\nmax_x = m+4*s\n\nx = np.linspace(min_x, max_x, 201)\ny = (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(x-m)**2/s**2)\n\nplt.figure(figsize=(8,5))\nplt.xlim(min_x, max_x)\nplt.ylim(0,max(y)*1.1)\nplt.plot(x,y)\nplt.show()\n```\n\n\n\n\u3053\u306e\u56f3\u306f\u3001\u5e73\u5747$\\mu$\u3001\u6a19\u6e96\u504f\u5dee$\\sigma$\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u304c\u78ba\u5b9a\u3057\u3066\u304a\u308a(\u4e0a\u56f3\u306e\u5834\u5408\u306f\u5e73\u5747$\\mu=10$\u3001\u6a19\u6e96\u504f\u5dee$\\sigma=3$)\u3001$x$\u3092\u5909\u6570\u3068\u3057\u3066\u6a2a\u8ef8\u306b\u53d6\u3063\u3066\u3044\u308b\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3068\u3057\u3066\u306e\u7e26\u8ef8\u306f\u78ba\u7387\u5bc6\u5ea6$f(x)$\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5c24\u5ea6\u95a2\u6570\u306e\u57fa\u672c\u6982\u5ff5\u306f\u3001\u300c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u30c7\u30fc\u30bf\u304c\u89b3\u6e2c\u3055\u308c\u305f\u5f8c\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306f\u5143\u3005\u3069\u3046\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6301\u3064\u78ba\u7387\u5206\u5e03\u304b\u3089\u751f\u307e\u308c\u305f\u3082\u306e\u3060\u3063\u305f\u304b\uff1f\u300d\u3068\u8a00\u3046\u554f\u3044\u306b\u7b54\u3048\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u9006\u78ba\u7387\u7684\u306a\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3063\u307d\u3055\u304c\u3042\u308b\u3068\u81ea\u5206\u306f\u601d\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u5b9f\u969b\u3001\u5c24\u5ea6\u306f\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u69cb\u6210\u3059\u308b\uff11\u8981\u7d20\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff09\n\n\uff08\u4ee5\u4e0b\u3001\u3053\u3053\u3067\u30c7\u30fc\u30bf\u3068\u8a00\u3063\u3066\u3044\u305f\u7528\u8a9e\u306f\u6a19\u672c\u3068\u8a18\u3057\u307e\u3059\uff09\n\n\u3053\u3053\u3067\u3001\u6a19\u672c\u304c\uff11\uff10\u500b\u624b\u306b\u5165\u308a( ${\\bf x} = (x_1, x_2,\\cdots, x_{10})$ )\u3001\u305d\u308c\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u3053\u3068\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u304c\u3001\u5e73\u5747$\\mu$\u3001\u6a19\u6e96\u504f\u5dee$\\sigma$\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u304c\u3069\u308c\u304f\u3089\u3044\u306a\u306e\u304b\u4e0d\u660e\u3067\u3042\u308b\u3068\u8a00\u3046\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\n\n![data.png](https://qiita-image-store.s3.amazonaws.com/0/50670/74835b4e-c740-8cd4-32d0-5f968bb3cbe0.png)\n\n```py\nplt.figure(figsize=(8,2))\nrd.seed(7)\ndata = rd.normal(10, 3, 10, )\nplt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n```\n\n\u300c10\u500b\u306e\u6a19\u672c\u304c\u3053\u306e\u5024\u3068\u306a\u3063\u305f\u540c\u6642\u5206\u5e03\u300d\u3092\u307e\u305a\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e10\u500b\u306e\u6a19\u672c\u306fiid(\u72ec\u7acb\u540c\u4e00\u5206\u5e03\uff1a\u540c\u3058\u5206\u5e03\u304b\u3089\u72ec\u7acb\u306b\u53d6\u3089\u308c\u305f\u6a19\u672c\uff09\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\u72ec\u7acb\u306a\u306e\u3067\u305d\u308c\u305e\u308c\u306e\u78ba\u7387\u5bc6\u5ea6\u306e\u7a4d\u3068\u3057\u3066\u8868\u305b\u308b\u306e\u3067\u3001\n\n```math\nP(x_1, x_2,\\cdots,x_{10}) = P(x_1)P(x_2)\\cdots P(x_{10}) \n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067$P(x_i)$\u306f\u5168\u3066\u6b63\u898f\u5206\u5e03\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u3001\n\n```math\nP(x_1, x_2,\\cdots,x_{10}) = f(x_1)f(x_2)\\cdots f(x_{10}) \n```\n\n\u3068\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u3092\u3055\u3089\u306b\u5c55\u958b\u3057\u3066\u66f8\u304f\u3068\n\n```math\nP(x_1, x_2,\\cdots,x_{10}) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\n```\n\n\u3067\u3059\u3002\u6a19\u672c$x_i$\u306f$\\exp(\\cdot)$\u306e\u4e2d\u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3067\u6a19\u672c10\u500b\u306e\u540c\u6642\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3044\u307e\u6a19\u672c\u306f\u5b9f\u73fe\u5024\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3082\u306f\u3084\u4e0d\u78ba\u5b9a\u306a\u78ba\u7387\u7684\u306a\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u78ba\u5b9a\u5024\u3067\u3059\u3002\u3080\u3057\u308d\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u306f\u5e73\u5747$\\mu$\u3001\u6a19\u6e96\u504f\u5dee$\\sigma$\u306e\uff12\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3057\u305f\u3002\u306a\u306e\u3067\u3001$x_i$\u306f\u5b9a\u6570\u3068\u8003\u3048\u3001$\\mu$\u3001$\\sigma$\u304c\u5909\u6570\u3067\u3042\u308b\u3068\u8a00\u3046\u98a8\u306b\u767a\u60f3\u3092\u8ee2\u63db\u3057\u307e\u3059\u3002\n\n\u95a2\u6570\u306e\u5f62\u306f\u5168\u304f\u540c\u3058\u3067\u3001\u5909\u6570\u3092$\\mu$\u3001$\\sigma$\u3067\u3042\u308b\u3068\u5ba3\u8a00\u3057\u76f4\u3057\u305f\u3082\u306e\u3092\u5c24\u5ea6(Likelihood)\u3068\u5b9a\u7fa9\u3057\n\n```math\nL(\\mu, \\sigma) = \\prod_{i=1}^{10} {1 \\over \\sqrt{2\\pi\\sigma^{2}}} \\exp \\left(-{1 \\over 2}{(x_i-\\mu)^2 \\over \\sigma^2} \\right)\n```\n\n\u3068\u3057\u307e\u3059\u3002\u53f3\u8fba\u306e\u5f62\u306f\u5168\u304f\u5909\u308f\u308a\u307e\u305b\u3093\u306d\u3002\u3067\u3082\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\n\u3053\u308c\u3092\u30b0\u30e9\u30d5\u306b\u3057\u3066\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n#\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u7406\u89e3\u3059\u308b\n$\\mu$\u3001$\\sigma$\u304c\u4e0d\u660e\u306a\u306e\u3067\u3001\u4eee\u306b$\\mu=0$\u3001$\\sigma=1$\u3060\u3068\u601d\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u3068\u3001\n\n![data_dens01.png](https://qiita-image-store.s3.amazonaws.com/0/50670/72c268a2-3e9e-bdf7-3295-7a54e756bb3a.png)\n\u3068\u306a\u308a\u307e\u3059\u3002\u307e\u3063\u305f\u304f\u3082\u3063\u3066\u5916\u3057\u3066\u308b\u611f\u3058\u3067\u3059\u306d\u3002\u3053\u306e\u6642\u3001\u5c24\u5ea6\u3082\u5024\u304c\u5c0f\u3055\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n(\u5c24\u5ea6\u306f\u78ba\u7387\uff08\u5bc6\u5ea6\uff09\u3092\u6a19\u672c\u500b\u6570\u5206\u3060\u3051\u639b\u3051\u3066\u3067\u304d\u305f\u3082\u306e\u306a\u306e\u3067\u30010\u301c1\u306e\u9593\u306e\u6570\u3067\u4f55\u56de\u3082\u304b\u3051\u7b97\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u304b\u306a\u308a\u5c0f\u3055\u3044\u6570\u3001\u307b\u307c\uff10\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\u304b\u3051\u7b97\u304c\u8db3\u3057\u7b97\u306b\u3067\u304d\u308b\u8a08\u7b97\u306e\u3057\u3084\u3059\u3055\u3082\u3042\u308a\u5bfe\u6570\u5c24\u5ea6\u3068\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u305d\u306e\u5834\u5408\u3001\u4e0a\u8a18\u30b0\u30e9\u30d5\u306e\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308b\u6570\u5024\u3092\u898b\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u6570\u5024\u3068\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\uff09\n\n```py\nm = 0\ns = 1\n\n\nmin_x = m-4*s\nmax_x = m+4*s\n\ndef norm_dens(val):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n                                      \nx = np.linspace(min_x, max_x, 201)\ny = norm_dens(x)\n\nL = np.prod([norm_dens(x_i) for x_i in data])\nl = np.log(L)\n\nplt.figure(figsize=(8,5))\nplt.xlim(min_x, 16)\nplt.ylim(-0.01,max(y)*1.1)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\nplt.plot(x,y)\n\n# \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\nplt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\nfor d in data:\n    plt.plot([d, d], [0, norm_dens(d)], \"k--\", lw=1)\n    \nplt.title(\"Likelihood:{0:.5f}, log Likelihood:{1:.5f}\".format(L, l))\n\nplt.show()\n```\n\n\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u307b\u3068\u3093\u3069\uff10\u306e\u6240\u3070\u304b\u308a\u306b\u6a19\u672c\u304c\u3042\u308b\u306e\u3067\u3001$L(\\mu, \\sigma)$\u3082\u304b\u306a\u308a\u5c0f\u3055\u3044\u5c24\u5ea6\u3068\u306a\u308a\u307e\u3059\uff08\u5bfe\u6570\u5c24\u5ea6: \u7d04-568\uff09\n\n\u8a66\u3057\u306b\u4eca\u5ea6\u306f\u3001$\\mu=5$\u3001$\\sigma=4$\u304f\u3089\u3044\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n![data_dens02.png](https://qiita-image-store.s3.amazonaws.com/0/50670/177a1816-a198-545e-8504-6c0f8985c299.png)\n\uff08\u30b3\u30fc\u30c9\u306f\u5148\u307b\u3069\u306e\u3082\u306e\u306b$\\mu=5$\u3001$\\sigma=4$\u306e\u3068\u3053\u308d\u3060\u3051\u5909\u66f4\u3057\u305f\u3082\u306e\uff09\n\n\u70b9\u7dda\u3067\u793a\u3057\u305f\u3068\u3053\u308d\u304c\u3001\u5404\u6a19\u672c\u306b\u5bfe\u5fdc\u3059\u308b\u5c24\u5ea6\u3067\u3059\u3002\u3055\u3063\u304d\u3088\u308a\u3061\u3087\u3063\u3068\u3042\u305f\u3063\u3066\u304d\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u3002\u4eca\u56de\u306f\u5bfe\u6570\u5c24\u5ea6\u306f\u7d04-20\u3068\u3060\u3044\u3076\u5927\u304d\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n# \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u3082\u3063\u3068\u76f4\u611f\u7684\u306b\n\n$\\mu$\u304c\u5909\u5316\u3057\u3066\u3044\u304f\u3068\u304d\u306b\u5c24\u5ea6\u304c\u3069\u3046\u5909\u308f\u3063\u3066\u3044\u304f\u304b\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002$\\mu=10$\u3067\u5bfe\u6570\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d :grin: \n\n![likelihood.gif](https://qiita-image-store.s3.amazonaws.com/0/50670/47dcbd73-f540-ecb8-de72-072ff85dc3eb.gif)\n\n\n\n\n```py\nfrom matplotlib import animation as ani\n\nnum_frame = 30\n\nmin_x = -11\nmax_x = 21\n\nx = np.linspace(min_x, max_x, 201)\n\n    \ndef norm_dens(val, m, s):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n    \ndef animate(nframe):\n    global num_frame\n    plt.clf()\n    \n    m = nframe/float(num_frame) * 15\n    s = 3\n    y = norm_dens(x, m, s)\n    \n    L = np.prod([norm_dens(x_i, m, s) for x_i in data])\n    l = np.log(L)\n\n    plt.xlim(min_x, 16)\n    plt.ylim(-0.01,max(y)*1.1)\n\n    # \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\n    plt.plot(x,y)\n\n    # \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\n    plt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n    for d in data:\n        plt.plot([d, d], [0, norm_dens(d, m, s)], \"k--\", lw=1)\n\n    plt.title(\"mu:{0}, Likelihood:{1:.5f}, log Likelihood:{2:.5f}\".format(m, L, l))\n\n    #plt.show()\n    \nfig = plt.figure(figsize=(10,7))\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('likelihood.gif', writer='imagemagick', fps=1, dpi=64)\n\n\n```\n\n$\\sigma$\u304c\u5909\u308f\u3063\u3066\u3044\u304f\u3068\u304d\u306f\u3001$\\sigma=2.7$\u304f\u3089\u3044\u306e\u3068\u304d\u306b\u5bfe\u6570\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u5143\u3005\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u305f\u3068\u304d\u306f$\\sigma=3$\u3060\u3063\u305f\u306e\u3067\u3001\u5c11\u3057\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u8fd1\u3057\u3044\u5024\u304c\u53d6\u308c\u3066\u3044\u307e\u3059\u306d :kissing_closed_eyes: \n\n![likelihood_s.gif](https://qiita-image-store.s3.amazonaws.com/0/50670/6fc1ad13-4d34-8cdc-33e0-14811f6617bc.gif)\n\n```py\nnum_frame = 30\n\nmin_x = -11\nmax_x = 21\n\nx = np.linspace(min_x, max_x, 201)\n    \ndef norm_dens(val, m, s):\n    return (1/np.sqrt(2*np.pi*s**2))*np.exp(-0.5*(val-m)**2/s**2)\n    \ndef animate(nframe):\n    global num_frame\n    plt.clf()\n    \n    m = 10\n    s = nframe/float(num_frame) * 5\n    y = norm_dens(x, m, s)\n    \n    L = np.prod([norm_dens(x_i, m, s) for x_i in data])\n    l = np.log(L)\n\n    plt.xlim(min_x, 16)\n    plt.ylim(-0.01,.6)\n\n    # \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u306e\u63cf\u753b\n    plt.plot(x,y)\n\n    # \u30c7\u30fc\u30bf\u70b9\u306e\u63cf\u753b\n    plt.scatter(data, np.zeros_like(data), c=\"r\", s=50)\n    for d in data:\n        plt.plot([d, d], [0, norm_dens(d, m, s)], \"k--\", lw=1)\n\n    plt.title(\"sd:{0:.3f}, Likelihood:{1:.5f}, log Likelihood:{2:.5f}\".format(s, L, l))\n\n    #plt.show()\n    \nfig = plt.figure(figsize=(10,7))\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('likelihood_s.gif', writer='imagemagick', fps=1, dpi=64)\n```\n\n\n#\u6700\u5c24\u63a8\u5b9a\n\n$\\mu$\u3092\u5909\u5316\u3055\u305b\u305f\u3068\u304d\u306e\u5bfe\u6570\u5c24\u5ea6\u306e\u5909\u5316\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\u5c24\u5ea6\u3092$\\mu$\u3067\u5fae\u5206\u3057\u30660\u3068\u3057\u305f\u3068\u304d\u306e$\\mu$\u306e\u5024\u304c10\u3042\u305f\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3060\u308d\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u6700\u5c24\u63a8\u5b9a\u3067\u3059\u306d\u3002\uff08\u3068\u308a\u3042\u3048\u305a\u306fs\u304c\u56fa\u5b9a\u3060\u3068\u3057\u3066\uff09\n\n![likelihood_mu.png](https://qiita-image-store.s3.amazonaws.com/0/50670/dec522ec-2a0e-b662-5fa9-2a5cca001d74.png)\n\n\n```py\n# m\u3092\u5909\u5316\u3055\u305b\u308b\n\nlist_L = []\ns = 3\n\nmm = np.linspace(0, 20,300)\nfor m in mm:\n    list_L.append(np.prod([norm_dens(x_i, m, s) for x_i in data]))\n    \n\nplt.figure(figsize=(8,5))\nplt.xlim(min(mm), max(mm))\nplt.plot(xx, (list_L))\nplt.title(\"Likelihood curve\")\nplt.xlabel(\"mu\")\n```\n\n\u540c\u3058\u304f$s$\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u5c24\u5ea6\u306e\u5909\u5316\u30b0\u30e9\u30d5\u3067\u3059\u3002$s=3$\u3042\u305f\u308a\u306b\u6700\u5927\u5024\u304c\u3042\u308a\u305d\u3046\u306a\u3053\u3068\u304c\u3084\u306f\u308a\u898b\u3066\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n![likelihood_s.png](https://qiita-image-store.s3.amazonaws.com/0/50670/f01615cc-6096-954f-d60f-9f0c24593899.png)\n\n\n\n```py\n# s\u3092\u5909\u5316\u3055\u305b\u308b\n\nlist_L = []\nm = 10\n\nss = np.linspace(0, 20,300)\nfor s in ss:\n    list_L.append(np.prod([norm_dens(x_i, m, s) for x_i in data]))\n    \nplt.figure(figsize=(8,5))\nplt.xlim(min(ss), max(ss))\nplt.plot(ss, (list_L))\nplt.title(\"Likelihood curve\")\nplt.xlabel(\"s\")\n```\n\n\u6700\u5f8c\u306b$\\mu$\u3068$\\sigma$ \u540c\u6642\u306b\u898b\u3066\u307f\u308b\u3068\u3001$\\mu$\u306f10\u3061\u3087\u3063\u3068\u591a\u3081\u3001$\\sigma$\u306f\u3061\u3087\u3063\u3068\u5c11\u306a\u3081\u304f\u3089\u3044\u306e\u3068\u3053\u308d\u306b\u6700\u5c24\u63a8\u5b9a\u3057\u3066\u5f97\u3089\u308c\u308b$\\mu$\u3068$\\sigma$\u306e\u5024\u304c\u3042\u308a\u305d\u3046\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059 :satisfied: \n\n![likelihood_contour.png](https://qiita-image-store.s3.amazonaws.com/0/50670/8aa00470-e327-3151-03d4-f0fd39fc0f68.png)\n\n\n```py\n# \u7b49\u9ad8\u7dda\n\nplt.figure(figsize=(8,5))\nmu = np.linspace(5, 15, 200)\ns = np.linspace(0, 5, 200)\nMU, S = np.meshgrid(mu, s)\n\nZ = np.array([(np.prod([norm_dens(x_i, a, b) for x_i in data])) for a, b in zip(MU.flatten(), S.flatten())])\nplt.contour(MU, S, Z.reshape(MU.shape), cmap=cm.Blues)\nplt.xlabel(\"mu\")\nplt.ylabel(\"s\")\n```\n"}