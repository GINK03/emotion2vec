{"context": "\n\n\u6ce8\u610f!\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u53e4\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u3082\u306e\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nDirectX12\u30673D\u63cf\u753b\n\n\u524d\u56de\u306b\u5f15\u304d\u7d9a\u304dDirectX12\u3067\u3059\uff0e\u4eca\u56de\u306f\u63cf\u753b\u5468\u308a\u3092\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u4f8b\u306b\u3088\u3063\u3066\u9593\u9055\u3044\u3092\u591a\u304f\u542b\u3080\u6050\u308c\u304c\u3042\u308b\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\uff0e\nDirectX12\u3067\u306f\uff0c\n\u2160. CommandList\u306b\u30b3\u30de\u30f3\u30c9\u3092\u7a4d\u3080\n\u2161. CommandList\u3092Close\n\u2162. CommandQueue\u306bCommandlist\u3092\u6e21\u3057\u3066\u5b9f\u884c\n\u2163. CommandAllocator\u3092Reset\n\u2164. CommandList\u3092Reset\n\u3068\u3044\u3046\u9806\u5e8f\u3067\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\uff0eCommandList\u3092Close\u3057\u305f\u3068\u304d\u306b\u30b3\u30de\u30f3\u30c9\u304c\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u5909\u63db\u3055\u308c\u3066CommandAllocator\u306b\u84c4\u3048\u3089\u308c\u307e\u3059\uff0e\u305d\u3057\u3066CommandList\u3092CommandQueue\u306b\u6e21\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\uff0eDirextX12\u306e\u30b3\u30de\u30f3\u30c9\u306f\u9045\u5ef6\u5b9f\u884c\u306a\u306e\u3067\uff0cCommandQueue\u3092\u629c\u3051\u3066\u304d\u305f\u3068\u3057\u3066\u3082\u63cf\u753b\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\uff0e\u63cf\u753b\u304c\u7d42\u308f\u3063\u305f\u3089CommandAllocator\u3092Reset\u3057\u307e\u3059\uff0e\u3053\u306e\u6642\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u3059\u3079\u3066\u306eCommandList\u304cClose\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u63cf\u753b\u304c\u884c\u308f\u308c\u3066\u304a\u3089\u305a\uff0cGPU\u304b\u3089\u53c2\u7167\u3055\u308c\u3066\u3044\u306a\u3044\u5fc5\u8981\u3082\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u5f8cCommandList\u3092Reset\u3057\u307e\u3059\uff0e\u3053\u306e\u6642\uff0c\u4e00\u3064\u306eCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(PSO\u3082\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f\u3057\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059)\uff0e\n\n1. ViewPort\uff0cScissorRect\u306e\u8a2d\u5b9a\n\u30f4\u30e5\u30fc\u30dd\u30fc\u30c8\u3068\u30b7\u30b6\u30fc\u77e9\u5f62\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff0e\nViewport.TopLeftX = 0.f; \nViewport.TopLeftY = 0.f;\nViewport.Width    = (FLOAT)m_iWindowWidth;\nViewport.Height   = (FLOAT)m_iWindowHeight;\nViewport.MinDepth = 0.f;\nViewport.MaxDepth = 1.f;\n\nRectScissor.top    = 0;\nRectScissor.left   = 0;\nRectScissor.right  = m_iWindowWidth;\nRectScissor.bottom = m_iWindowHeight;\n\n\n2. \u63cf\u753b\u7d42\u4e86\u5f85\u3061\u95a2\u6570\nDirectX12\u304b\u3089\u306f\u30b3\u30de\u30f3\u30c9\u304c\u3059\u3079\u3066\u9045\u5ef6\u5b9f\u884c\u306b\u306a\u3063\u305f\u305f\u3081\uff0c\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3082\u305d\u308c\u304c\u7d42\u4e86\u3057\u305f\u304b\u308f\u304b\u308a\u307e\u305b\u3093\uff0e\u305d\u3057\u3066\uff0cCommandAllocator\u306f\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u4e2d\u306b\u53c2\u7167\u3055\u308c\u308b\u306e\u3067\uff0c\u63cf\u753b\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067Reset\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\uff0e\u306a\u306e\u3067\uff0c\u2162.\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3059\u308b\u306e\u3092\u5f85\u3064\u95a2\u6570\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u3053\u3067CommandQueue\u3068\u4e00\u7dd2\u306b\u4f5c\u6210\u3057\u305fFence\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\nWaitForPreviousFrame\nint D3D12Manager::WaitForPreviousFrame(){\n    HRESULT hr;\n\n    const UINT64 fence = Frames;\n    hr = pComandQueue->Signal(pQueueFence, fence);\n    if(FAILED(hr)){\n        return -1; \n    }\n    ++Frames;\n\n    if (pQueueFence->GetCompletedValue() < fence){\n        hr = pQueueFence->SetEventOnCompletion(fence, handleFenceEvent);\n        if(FAILED(hr)){\n            return -1; \n        }\n        WaitForSingleObject(handleFenceEvent, INFINITE);\n    }\n    return 0;\n}\n\n\nCommandQueue\u306e\u7d42\u4e86\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u6570\u304cFrame\u3088\u308a\u5c11\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86\u3092\u5f85\u3064\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\uff0e\n\n3. \u30dd\u30ea\u30b4\u30f3\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\uff0c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\uff0c\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u9802\u70b9\uff0c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u4e00\u56de\u3067\u3044\u3044\u306f\u305a\u3067\u3059\uff0e\n\nSetPlaneData\nint D3D12Manager::SetPlaneData(){\n    HRESULT hr;\n    void *Mapped;\n\n    //\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u66f8\u304d\u8fbc\u307f\n    ConstantBufferData Buf;\n    XMMATRIX Projection = XMMatrixPerspectiveFovLH(\n        XMConvertToRadians(60.0f),\n        (float)m_iWindowWidth / (float)m_iWindowHeight,\n        1.0f,\n        20.0f);\n\n    XMVECTORF32 eyePosition   = { 0.0f,  0.0f, -3.0f, 0.0f};\n    XMVECTORF32 FocusPosition = { 0.0f,  0.0f,  0.0f, 0.0f};\n    XMVECTORF32 upDirection   = { 0.0f,  1.0f,  0.0f, 0.0f};\n    XMMATRIX View = XMMatrixLookAtLH(eyePosition, FocusPosition, upDirection);\n    XMStoreFloat4(&Buf.EyePos, eyePosition);\n\n    XMMATRIX World;\n    FLOAT rotate = 0.f;//(FLOAT)(XM_PI * (Frames % 1600)) / 800.0f;\n    World = XMMatrixRotationY(rotate);\n\n    XMStoreFloat4x4(&Buf.World, XMMatrixTranspose(World));\n\n    XMMATRIX WVP = XMMatrixTranspose(World * View * Projection);\n    XMStoreFloat4x4(&Buf.WVP, WVP);\n\n    hr = pConstantBuffer->Map(0, nullptr, &Mapped);\n    if(SUCCEEDED(hr)){\n        CopyMemory(Mapped, &Buf, sizeof(Buf));\n        pConstantBuffer->Unmap(0, nullptr);\n        Mapped = nullptr;\n    }else{\n        return -1;\n    }\n\n    return 0;\n}\n\n\n\n4. \u63cf\u753b\u30b3\u30de\u30f3\u30c9\u306e\u8a2d\u5b9a\n\u30c7\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u305f\u306e\u3067\uff0c\u63cf\u753b\u30b3\u30de\u30f3\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\nPopulateCommandList\nint D3D12Manager::SetResourceBarrier(D3D12_RESOURCE_STATES BeforeState, D3D12_RESOURCE_STATES AfterState){\n    D3D12_RESOURCE_BARRIER ResourceBarrier;\n    ZeroMemory(&ResourceBarrier, sizeof(ResourceBarrier));\n    ResourceBarrier.Type  = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n    ResourceBarrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n    ResourceBarrier.Transition.pResource   = pRenderTarget[RTVIdx];\n    ResourceBarrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n    ResourceBarrier.Transition.StateBefore = BeforeState;\n    ResourceBarrier.Transition.StateAfter  = AfterState;\n\n    pCommandList->ResourceBarrier(1, &ResourceBarrier);\n    return 0;\n}\n\nint D3D12Manager::PopulateCommandList(){\n    HRESULT hr;\n\n    FLOAT ClearColor[4] = {0.0f, 0.0f, 0.0f, 1.0f};\n\n    SetResourceBarrier(D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET);\n\n    pCommandList->ClearDepthStencilView(handleDSV, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, nullptr);\n    pCommandList->ClearRenderTargetView(handleRTV[RTVIdx], ClearColor, 0, nullptr);\n\n    pCommandList->SetGraphicsRootSignature(pRootSignature);\n    pCommandList->SetPipelineState(pPipelineState);\n    pCommandList->SetGraphicsRootConstantBufferView(0, pConstantBuffer->GetGPUVirtualAddress());\n\n    pCommandList->RSSetViewports(1, &Viewport);\n    pCommandList->RSSetScissorRects(1, &RectScissor);\n\n    pCommandList->OMSetRenderTargets(1, &handleRTV[RTVIdx], TRUE, &handleDSV);\n\n    pCommandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);\n    pCommandList->IASetVertexBuffers(0, 1, &VertexView);\n    pCommandList->IASetIndexBuffer(&IndexView);\n\n    pCommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);\n\n    SetResourceBarrier(D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT);\n\n    hr = pCommandList->Close();\n    if(FAILED(hr)){\n        return -1;\n    }\n\n    return 0;\n}\n\n\n\n5. Present\n\u63cf\u753b\u306e\u7d42\u4e86\u5f85\u3061\u3092\u3057\u3066Present\u3092\u3059\u308b\u3068\u753b\u9762\u306b\u30dd\u30ea\u30b4\u30f3\u304c\u6620\u3055\u308c\u307e\u3059\uff0e\nint D3D12Manager::Render(){\n    HRESULT hr;\n\n    SetPlaneData();\n\n    PopulateCommandList();\n\n    ID3D12CommandList *const ppCommandList = pCommandList;\n    pComandQueue->ExecuteCommandLists(1, &ppCommandList);\n\n    WaitForPreviousFrame();\n\n    hr = pCmdAllocator->Reset();\n    if(FAILED(hr)){\n        return -1; \n    }\n\n    hr = pCommandList->Reset(pCmdAllocator, nullptr);\n    if(FAILED(hr)){\n        return -1; \n    }\n\n    hr = pSwapChain->Present(1, 0);\n    if(FAILED(hr)){\n        return -1;\n    }\n\n    RTVIdx = pSwapChain->GetCurrentBackBufferIndex();\n\n    return 0;\n}\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u30dd\u30ea\u30b4\u30f3\u304c\uff11\u679a\u63cf\u753b\u3055\u308c\u307e\u3057\u305f\uff0e\u9577\u304b\u3063\u305f......\u6050\u308b\u3079\u3057DirectX12\uff0e\u4f55\u306f\u3068\u3082\u3042\u308c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u5f85\u6a5f\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\uff0cCommandList\u306fReset\u3059\u308b\u3068\u304d\u306b\u4eca\u307e\u3067\u3068\u306f\u5225\u306eCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3082\u3044\u3044\u306e\u3067\uff0cCommandAllocator\u3084GPU\u304b\u3089\u53c2\u7167\u3055\u308c\u308b\u30d0\u30c3\u30d5\u30a1\u985e\u30922\u3064\u4ee5\u4e0a\u4f5c\u3063\u3066\uff0c\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u3092\u3057\u305f\u3089\u7d42\u4e86\u3092\u5f85\u305f\u305a\u306b\uff0c\u5225\u306e\u7a7a\u3044\u3066\u3044\u308bCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u3092\u3059\u308b\u3068\u3044\u3046\u3075\u3046\u306b\u3059\u308b\u3068\u826f\u3044\uff1f\n\u4eca\u56de\u306f\u3053\u308c\u3067\u7d42\u4e86\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u3060\u307e\u3060\u52c9\u5f37\u4e0d\u8db3\u306a\u306e\u3067\u9811\u5f35\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u9593\u9055\u3044\u306a\u3069\u6709\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059(\u304a\u624b\u67d4\u3089\u304b\u306b\u304a\u9858\u3044\u3057\u307e\u3059m(_ _)m)\uff0e\n\u6b21\u56de\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n#\u6ce8\u610f!\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u53e4\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u3082\u306e\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n[DirectX12\u30673D\u63cf\u753b](http://qiita.com/em7dfggbcadd9/items/a73b79ef9cd949de8926)\n\n***\n\n[\u524d\u56de](http://qiita.com/em7dfggbcadd9/items/483c60fa066f10f510d7)\u306b\u5f15\u304d\u7d9a\u304dDirectX12\u3067\u3059\uff0e\u4eca\u56de\u306f\u63cf\u753b\u5468\u308a\u3092\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u4f8b\u306b\u3088\u3063\u3066\u9593\u9055\u3044\u3092\u591a\u304f\u542b\u3080\u6050\u308c\u304c\u3042\u308b\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\uff0e\nDirectX12\u3067\u306f\uff0c\n\u2160. CommandList\u306b\u30b3\u30de\u30f3\u30c9\u3092\u7a4d\u3080\n\u2161. CommandList\u3092Close\n\u2162. CommandQueue\u306bCommandlist\u3092\u6e21\u3057\u3066\u5b9f\u884c\n\u2163. CommandAllocator\u3092Reset\n\u2164. CommandList\u3092Reset\n\u3068\u3044\u3046\u9806\u5e8f\u3067\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\uff0eCommandList\u3092Close\u3057\u305f\u3068\u304d\u306b\u30b3\u30de\u30f3\u30c9\u304c\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u5909\u63db\u3055\u308c\u3066CommandAllocator\u306b\u84c4\u3048\u3089\u308c\u307e\u3059\uff0e\u305d\u3057\u3066CommandList\u3092CommandQueue\u306b\u6e21\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\uff0eDirextX12\u306e\u30b3\u30de\u30f3\u30c9\u306f\u9045\u5ef6\u5b9f\u884c\u306a\u306e\u3067\uff0cCommandQueue\u3092\u629c\u3051\u3066\u304d\u305f\u3068\u3057\u3066\u3082\u63cf\u753b\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\uff0e\u63cf\u753b\u304c\u7d42\u308f\u3063\u305f\u3089CommandAllocator\u3092Reset\u3057\u307e\u3059\uff0e\u3053\u306e\u6642\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u3059\u3079\u3066\u306eCommandList\u304cClose\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u63cf\u753b\u304c\u884c\u308f\u308c\u3066\u304a\u3089\u305a\uff0cGPU\u304b\u3089\u53c2\u7167\u3055\u308c\u3066\u3044\u306a\u3044\u5fc5\u8981\u3082\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u5f8cCommandList\u3092Reset\u3057\u307e\u3059\uff0e\u3053\u306e\u6642\uff0c\u4e00\u3064\u306eCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059(PSO\u3082\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306f\u3057\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059)\uff0e\n\n# 1. ViewPort\uff0cScissorRect\u306e\u8a2d\u5b9a\n\u30f4\u30e5\u30fc\u30dd\u30fc\u30c8\u3068\u30b7\u30b6\u30fc\u77e9\u5f62\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff0e\n\n```cpp:\nViewport.TopLeftX = 0.f; \nViewport.TopLeftY = 0.f;\nViewport.Width    = (FLOAT)m_iWindowWidth;\nViewport.Height   = (FLOAT)m_iWindowHeight;\nViewport.MinDepth = 0.f;\nViewport.MaxDepth = 1.f;\n\nRectScissor.top    = 0;\nRectScissor.left   = 0;\nRectScissor.right  = m_iWindowWidth;\nRectScissor.bottom = m_iWindowHeight;\n```\n# 2. \u63cf\u753b\u7d42\u4e86\u5f85\u3061\u95a2\u6570\nDirectX12\u304b\u3089\u306f\u30b3\u30de\u30f3\u30c9\u304c\u3059\u3079\u3066\u9045\u5ef6\u5b9f\u884c\u306b\u306a\u3063\u305f\u305f\u3081\uff0c\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3082\u305d\u308c\u304c\u7d42\u4e86\u3057\u305f\u304b\u308f\u304b\u308a\u307e\u305b\u3093\uff0e\u305d\u3057\u3066\uff0cCommandAllocator\u306f\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u4e2d\u306b\u53c2\u7167\u3055\u308c\u308b\u306e\u3067\uff0c\u63cf\u753b\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067Reset\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\uff0e\u306a\u306e\u3067\uff0c\u2162.\u306e\u5b9f\u884c\u304c\u7d42\u4e86\u3059\u308b\u306e\u3092\u5f85\u3064\u95a2\u6570\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u3053\u3067CommandQueue\u3068\u4e00\u7dd2\u306b\u4f5c\u6210\u3057\u305fFence\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\n```cpp:WaitForPreviousFrame\nint D3D12Manager::WaitForPreviousFrame(){\n\tHRESULT hr;\n\t\n\tconst UINT64 fence = Frames;\n\thr = pComandQueue->Signal(pQueueFence, fence);\n\tif(FAILED(hr)){\n\t\treturn -1; \n\t}\n\t++Frames;\n\n\tif (pQueueFence->GetCompletedValue() < fence){\n\t\thr = pQueueFence->SetEventOnCompletion(fence, handleFenceEvent);\n\t\tif(FAILED(hr)){\n\t\t\treturn -1; \n\t\t}\n\t\tWaitForSingleObject(handleFenceEvent, INFINITE);\n\t}\n\treturn 0;\n}\n```\nCommandQueue\u306e\u7d42\u4e86\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u6570\u304cFrame\u3088\u308a\u5c11\u306a\u304b\u3063\u305f\u3089\u7d42\u4e86\u3092\u5f85\u3064\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\uff0e\n\n# 3. \u30dd\u30ea\u30b4\u30f3\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u9802\u70b9\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\uff0c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\uff0c\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\u6bce\u30d5\u30ec\u30fc\u30e0\u547c\u3073\u51fa\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u9802\u70b9\uff0c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u4e00\u56de\u3067\u3044\u3044\u306f\u305a\u3067\u3059\uff0e\n\n```cpp:SetPlaneData\nint D3D12Manager::SetPlaneData(){\n\tHRESULT hr;\n\tvoid *Mapped;\n\n\t//\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306e\u66f8\u304d\u8fbc\u307f\n\tConstantBufferData Buf;\n\tXMMATRIX Projection = XMMatrixPerspectiveFovLH(\n\t\tXMConvertToRadians(60.0f),\n\t\t(float)m_iWindowWidth / (float)m_iWindowHeight,\n\t\t1.0f,\n\t\t20.0f);\n\n\tXMVECTORF32 eyePosition   = { 0.0f,  0.0f, -3.0f, 0.0f};\n\tXMVECTORF32 FocusPosition = { 0.0f,  0.0f,  0.0f, 0.0f};\n\tXMVECTORF32 upDirection   = { 0.0f,  1.0f,  0.0f, 0.0f};\n\tXMMATRIX View = XMMatrixLookAtLH(eyePosition, FocusPosition, upDirection);\n\tXMStoreFloat4(&Buf.EyePos, eyePosition);\n\n\tXMMATRIX World;\n\tFLOAT rotate = 0.f;//(FLOAT)(XM_PI * (Frames % 1600)) / 800.0f;\n\tWorld = XMMatrixRotationY(rotate);\n\n\tXMStoreFloat4x4(&Buf.World, XMMatrixTranspose(World));\n\n\tXMMATRIX WVP = XMMatrixTranspose(World * View * Projection);\n\tXMStoreFloat4x4(&Buf.WVP, WVP);\n\n\thr = pConstantBuffer->Map(0, nullptr, &Mapped);\n\tif(SUCCEEDED(hr)){\n\t\tCopyMemory(Mapped, &Buf, sizeof(Buf));\n\t\tpConstantBuffer->Unmap(0, nullptr);\n\t\tMapped = nullptr;\n\t}else{\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n```\n\n# 4. \u63cf\u753b\u30b3\u30de\u30f3\u30c9\u306e\u8a2d\u5b9a\n\u30c7\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u305f\u306e\u3067\uff0c\u63cf\u753b\u30b3\u30de\u30f3\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff0e\n\n```cpp:PopulateCommandList\nint D3D12Manager::SetResourceBarrier(D3D12_RESOURCE_STATES BeforeState, D3D12_RESOURCE_STATES AfterState){\n\tD3D12_RESOURCE_BARRIER ResourceBarrier;\n\tZeroMemory(&ResourceBarrier, sizeof(ResourceBarrier));\n\tResourceBarrier.Type  = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n\tResourceBarrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n\tResourceBarrier.Transition.pResource   = pRenderTarget[RTVIdx];\n\tResourceBarrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n\tResourceBarrier.Transition.StateBefore = BeforeState;\n\tResourceBarrier.Transition.StateAfter  = AfterState;\n\n\tpCommandList->ResourceBarrier(1, &ResourceBarrier);\n\treturn 0;\n}\n\nint D3D12Manager::PopulateCommandList(){\n\tHRESULT hr;\n\t\n\tFLOAT ClearColor[4] = {0.0f, 0.0f, 0.0f, 1.0f};\n\n\tSetResourceBarrier(D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET);\n\n\tpCommandList->ClearDepthStencilView(handleDSV, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, nullptr);\n\tpCommandList->ClearRenderTargetView(handleRTV[RTVIdx], ClearColor, 0, nullptr);\n\n\tpCommandList->SetGraphicsRootSignature(pRootSignature);\n\tpCommandList->SetPipelineState(pPipelineState);\n\tpCommandList->SetGraphicsRootConstantBufferView(0, pConstantBuffer->GetGPUVirtualAddress());\n\n\tpCommandList->RSSetViewports(1, &Viewport);\n\tpCommandList->RSSetScissorRects(1, &RectScissor);\n\n\tpCommandList->OMSetRenderTargets(1, &handleRTV[RTVIdx], TRUE, &handleDSV);\n\n\tpCommandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);\n\tpCommandList->IASetVertexBuffers(0, 1, &VertexView);\n\tpCommandList->IASetIndexBuffer(&IndexView);\n\n\tpCommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);\n\n\tSetResourceBarrier(D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT);\n\n\thr = pCommandList->Close();\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n```\n\n# 5. Present\n\u63cf\u753b\u306e\u7d42\u4e86\u5f85\u3061\u3092\u3057\u3066Present\u3092\u3059\u308b\u3068\u753b\u9762\u306b\u30dd\u30ea\u30b4\u30f3\u304c\u6620\u3055\u308c\u307e\u3059\uff0e\n\n```cpp:\nint D3D12Manager::Render(){\n\tHRESULT hr;\n\n\tSetPlaneData();\n\n\tPopulateCommandList();\n\n\tID3D12CommandList *const ppCommandList = pCommandList;\n\tpComandQueue->ExecuteCommandLists(1, &ppCommandList);\n\n\tWaitForPreviousFrame();\n\n\thr = pCmdAllocator->Reset();\n\tif(FAILED(hr)){\n\t\treturn -1; \n\t}\n\t\n\thr = pCommandList->Reset(pCmdAllocator, nullptr);\n\tif(FAILED(hr)){\n\t\treturn -1; \n\t}\n\n\thr = pSwapChain->Present(1, 0);\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\n\tRTVIdx = pSwapChain->GetCurrentBackBufferIndex();\n\n\treturn 0;\n}\n```\n\u3053\u308c\u3067\u3084\u3063\u3068\u30dd\u30ea\u30b4\u30f3\u304c\uff11\u679a\u63cf\u753b\u3055\u308c\u307e\u3057\u305f\uff0e\u9577\u304b\u3063\u305f......\u6050\u308b\u3079\u3057DirectX12\uff0e\u4f55\u306f\u3068\u3082\u3042\u308c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u63cf\u753b\u3092\u884c\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u5f85\u6a5f\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\uff0cCommandList\u306fReset\u3059\u308b\u3068\u304d\u306b\u4eca\u307e\u3067\u3068\u306f\u5225\u306eCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3082\u3044\u3044\u306e\u3067\uff0cCommandAllocator\u3084GPU\u304b\u3089\u53c2\u7167\u3055\u308c\u308b\u30d0\u30c3\u30d5\u30a1\u985e\u30922\u3064\u4ee5\u4e0a\u4f5c\u3063\u3066\uff0c\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u3092\u3057\u305f\u3089\u7d42\u4e86\u3092\u5f85\u305f\u305a\u306b\uff0c\u5225\u306e\u7a7a\u3044\u3066\u3044\u308bCommandAllocator\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u3092\u3059\u308b\u3068\u3044\u3046\u3075\u3046\u306b\u3059\u308b\u3068\u826f\u3044\uff1f\n\n\n\n\u4eca\u56de\u306f\u3053\u308c\u3067\u7d42\u4e86\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u3060\u307e\u3060\u52c9\u5f37\u4e0d\u8db3\u306a\u306e\u3067\u9811\u5f35\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u9593\u9055\u3044\u306a\u3069\u6709\u308a\u307e\u3057\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059(\u304a\u624b\u67d4\u3089\u304b\u306b\u304a\u9858\u3044\u3057\u307e\u3059m(_ _)m)\uff0e\n\n[\u6b21\u56de](http://qiita.com/em7dfggbcadd9/items/b5a9b71a6ae29d86da50)\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u63cf\u753b\u3092\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n", "tags": ["DirectX12", "DirectX"]}