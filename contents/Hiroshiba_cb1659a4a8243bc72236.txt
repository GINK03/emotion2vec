{"context": "\u3000\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001chainer\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u3001Keras.js\u3092\u4f7f\u3063\u3066\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3000\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u305f\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308b\u305f\u3081\u306b\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308bAPI\u3092\u7528\u610f\u3059\u308b\u304b\u3001\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u76f4\u63a5\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3000\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u5927\u304d\u306a\u5229\u70b9\u306f\u8a08\u7b97\u6a5f\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u306a\u3044\u70b9\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u30b5\u30fc\u30d0\u3060\u3051\u7528\u610f\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u5c0f\u3055\u306a\u30c7\u30e2\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u4fbf\u5229\u3067\u3059\u3002\u9006\u306b\u6b20\u70b9\u3068\u3057\u3066javascript\u3067\u518d\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057Keras.js\u3092\u4f7f\u3048\u3070\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092JS\u3067\u66f8\u304d\u76f4\u3059\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u975e\u5e38\u306b\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\u3061\u306a\u307f\u306bGirl Friend Factory - \u6a5f\u68b0\u5b66\u7fd2\u3067\u5f7c\u5973\u3092\u5275\u308b -\u3067\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3092\u7528\u3044\u305f\u30c7\u30e2\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u8a18\u4e8b\u306e\u6d41\u308c\n\nKeras\u3068Keras.js\nchainer\u30e2\u30c7\u30eb\u304b\u3089Keras\u30e2\u30c7\u30eb\u3078\nKeras\u30e2\u30c7\u30eb\u304b\u3089Keras.js\u30e2\u30c7\u30eb\u3078\njavascript\u3067\u9806\u4f1d\u64ad\n\uff08\u767a\u5c55\uff09\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5bb9\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u8a66\u884c\u932f\u8aa4\n\u611f\u60f3\n\n\n1. Keras.js\u3068\u306f\n\u3000Keras.js\u306f\u3001Keras\u30e2\u30c7\u30eb\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u3001GPU\u3092\u4f7f\u3063\u3066\u52d5\u304b\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3061\u306a\u307f\u306bKeras\u306f\u3001TensorFlow\u30fbTheano\u306a\u3069\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u3000chainer\u30e2\u30c7\u30eb\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u4f7f\u3046\u65b9\u6cd5\u306f\u4ed6\u306b\u3082\u3001ConvNetJS\u3092\u4f7f\u3046\u624b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306fjavascript\u3067\u540c\u7b49\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001\u5229\u7528\u3057\u305f\u3044NN\u5c64\u304c\u7121\u304b\u3063\u305f\u308a\u3068\u3001\u5c11\u3057\u4f7f\u3044\u3065\u3089\u3044\u3067\u3059\u3002\n\u3000chainer\u30e2\u30c7\u30eb\u3092Keras.js\u3067\u5229\u7528\u3059\u308b\u306b\u306f\u3001\u307e\u305achainer\u30e2\u30c7\u30eb\u3092Keras\u30e2\u30c7\u30eb\u306b\u5909\u63db\u3057\u3001Keras\u30e2\u30c7\u30eb\u3092Keras.js\u30e2\u30c7\u30eb\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5f8c\u8005\u306f\u5c02\u7528\u306e\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u524d\u8005\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n2. chainer\u30e2\u30c7\u30eb\u304b\u3089Keras\u30e2\u30c7\u30eb\u3078\n\u3000\u4eca\u56de\u306f\u8a66\u3057\u306b\u3001Deconvolution\u3057\u3066BatchNormalization\u3057\u3066Convolution\u3059\u308b\u3060\u3051\u306e\u30e2\u30c7\u30eb\u3092\u5909\u63db\u3057\u307e\u3059\u3002\nimport chainer\n\nbatchsize = 1\nsize = 2\nn_in = 3\nn_middle = 2\nn_out = 1\nksize = 2\n\n\nclass ChainerModel(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            deconv=chainer.links.Deconvolution2D(n_in, n_middle, ksize=ksize, stride=ksize),\n            bn=chainer.links.BatchNormalization(n_middle),\n            conv=chainer.links.Convolution2D(n_middle, n_out, ksize=ksize, stride=ksize),\n        )\n\n    def __call__(self, x, test):\n        return self.conv(self.bn(self.deconv(x), test=test))\n\n\nchainer_model = ChainerModel()\n\n\u3000\u30e2\u30c7\u30eb\u3092\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3060\u308d\u3046\u3068\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3000\u307e\u305a\u3001\u7b49\u4fa1\u306aKeras\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\u30b3\u30c4\u3068\u3057\u307e\u3057\u3066\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u6b21\u5143\u306e\u9806\u5e8fdim_ordering\u306f\u3001TensorFlow\u30e2\u30fc\u30c9tf\u3092\u5229\u7528\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\uff08Theano\u30e2\u30fc\u30c9th\u3060\u3068Keras.js\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u305f\u3081\u3002\uff09\n\u3000Convolution\u3084Deconvolution\u306f\u3001\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u521d\u671f\u5024\u3084\u5f15\u6570\u306e\u4ed5\u69d8\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u540c\u3058\u5f62\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f5c\u308b\u306e\u306b\u7d50\u69cb\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u3000Keras\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u304c\u3001\u5c64\u3092add\u3057\u3066\u3044\u304f\u3088\u308a\u3082\u3001\u9806\u4f1d\u642c\u3092\u81ea\u5206\u3067\u66f8\u304f\u307b\u3046\u304cchainer\u3092\u4f7f\u3046\u4eba\u306b\u306f\u76f4\u611f\u7684\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nimport keras\n\ninput_keras = keras.layers.Input(shape=(size, size, n_in), name='input')\n\nh = input_keras\nh = keras.layers.convolutional.Deconvolution2D(\n    n_middle, ksize, ksize, name='deconv',\n    output_shape=(batchsize, size * ksize, size * ksize, n_middle),\n    dim_ordering='tf', subsample=(ksize, ksize),\n)(h)\nh = keras.layers.normalization.BatchNormalization(\n    epsilon=2e-5, momentum=0.9, axis=3, name='bn',\n)(h)\nh = keras.layers.convolutional.Convolution2D(\n    n_out, ksize, ksize, name='conv',\n    dim_ordering='tf', subsample=(ksize, ksize),\n)(h)\n\nkeras_model = keras.models.Model(input_keras, h)\n\n\u3000\u4e00\u65e6\u3053\u306e\u307e\u307e\u9069\u5f53\u306a\u30d9\u30af\u30c8\u30eb\u3092\u9806\u4f1d\u642c\u3055\u305b\u3066\u307f\u307e\u3059\u3002chainer\u306eBatchNormalization\u306f\u4f55\u304b\u5b66\u7fd2\u3055\u305b\u306a\u3044\u3068test=True\u3067\u9806\u4f1d\u642c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u6700\u521d\u306b\u9069\u5f53\u306a\u5b66\u7fd2\u3092\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nimport numpy\nx = numpy.random.randn(batchsize, n_in, size, size).astype(numpy.float32)\n\n# \u9069\u5f53\u306b\u5b66\u7fd2\u3055\u305b\u308b\noptimize = chainer.optimizers.Adam()\noptimize.setup(chainer_model)\ny = numpy.zeros(shape=(batchsize, n_out, size, size), dtype=numpy.float32)\nfor _ in range(10):\n    optimize.zero_grads()\n    loss = chainer.functions.mean_squared_error(chainer_model(x, test=False), y)\n    loss.backward()\n    optimize.update()\n\n# chainer \u9806\u4f1d\u642c\noutput_chainer = chainer_model(x, test=True).data\n\n# Keras \u9806\u4f1d\u642c\n# `(samples, rows, cols, channels)` if dim_ordering='tf'\noutput_keras = keras_model.predict(x.transpose(0, 2, 3, 1)).transpose(0, 3, 1, 2)\n\n# \u4e88\u6e2c\u306e\u5dee\nprint('diff: ', numpy.abs(output_chainer - output_keras).sum())  # diff: 3.54881\n\n\u3000\u91cd\u307f\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4e88\u6e2c\u5024\u306b\u5927\u304d\u306a\u5dee\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u306f\u6700\u5f8c\u306b\u3001\u91cd\u307f\u3092\u30b3\u30d4\u30fc\u3057\u3066\u307f\u307e\u3059\u3002\uff08\u30b3\u30fc\u30c9\u306f\u9069\u5f53\u306b\u3053\u306eGist\u306b\u4e0a\u3052\u307e\u3057\u305f\u306e\u3067\u3001\u4ed6\u306e\u30ec\u30a4\u30e4\u30fc\u3082\u5b9f\u88c5\u3057\u305f\u969b\u306f\u305c\u3072\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\ndef copy_weights_deconvolution(chainer_model, keras_model, layer_name):\n    deconv_chainer = chainer_model[layer_name]\n    W, b = (deconv_chainer.W.data, deconv_chainer.b.data)\n    keras_model.get_layer(layer_name).set_weights([numpy.transpose(W, (2, 3, 0, 1)), b])\n\n\ndef copy_weights_convolution(chainer_model, keras_model, layer_name):\n    conv_chainer = chainer_model[layer_name]\n    W, b = (conv_chainer.W.data, conv_chainer.b.data)\n    keras_model.get_layer(layer_name).set_weights([numpy.transpose(W, (2, 3, 1, 0)), b])\n\n\ndef copy_weights_bn(chainer_model, keras_model, layer_name):\n    bn_chainer = chainer_model[layer_name]\n    w = [bn_chainer.gamma.data, bn_chainer.beta.data, bn_chainer.avg_mean, bn_chainer.avg_var]\n    keras_model.get_layer(layer_name).set_weights(w)\n\ncopy_weights_deconvolution(chainer_model, keras_model, 'deconv')\ncopy_weights_convolution(chainer_model, keras_model, 'conv')\ncopy_weights_bn(chainer_model, keras_model, 'bn')\n\noutput_keras = keras_model.predict(x.transpose(0, 2, 3, 1)).transpose(0, 3, 1, 2)\nprint('diff: ', numpy.abs(output_chainer - output_keras).sum())  # diff: 0.000445604\n\n\u3000\u5dee\u304c3.54881\u304b\u30890.00044\u307e\u3067\u7e2e\u307e\u308a\u307e\u3057\u305f\u3002\u306a\u3093\u304b\u307e\u3060\u5fae\u5999\u306b\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3041\u30fb\u30fb\u30fb\n\n3. Keras\u30e2\u30c7\u30eb\u304b\u3089Keras.js\u30e2\u30c7\u30eb\u3078\n\u3000\u3053\u3053\u304b\u3089\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3001Keras\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u305f\u3042\u3068\u3001Keras.js\u304c\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308c\u3070\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n# save Keras model\nwith open('keras_model_arch.json', 'w') as f:\n    f.write(keras_model.to_json())\n\nkeras_model.save('keras_model.h5')\n\n# https://github.com/transcranial/keras-js/blob/master/encoder.py\npython3 encoder.py keras_model.h5\n\n\u3000\u3053\u308c\u3067\n\nkeras_model.h5\nkeras_model_arch.json\nkeras_model_weights.buf\nkeras_model_metadata.json\n\n\u306e4\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u306e\u3046\u3061\u4e0b\uff13\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092Keras.js\u3067\u5229\u7528\u3057\u307e\u3059\u3002\n\n4. javascript\u3067\u9806\u4f1d\u64ad\n\u3000\u3042\u3068\u306fKeras.js\u306e\u4f7f\u3044\u65b9\u306b\u5f93\u3063\u3066\u4f7f\u3046\u3060\u3051\u3067\u3059\u3002\nconst model = new KerasJS.Model({\n  filepaths: {\n    model: 'keras_model_arch.json',\n    weights: 'keras_model_metadata.json',\n    metadata: 'keras_model_weights.buf'\n  },\n  gpu: true\n})\n\ntry {\n  await model.ready()\n  const inputData = {\n    'input': new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1])\n  }\n  const outputData = await model.predict(inputData)\n} catch (err) {\n  // handle error\n}\n\n\u3000\u3042\u3068\u306foutputData\u306b\u4e88\u6e2c\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001canvas\u3067\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\n\n5. \uff08\u767a\u5c55\uff09\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5bb9\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u8a66\u884c\u932f\u8aa4\n\u3000\u6700\u521d\u306b\u7d39\u4ecb\u3057\u305f\u30c7\u30e2\u306fDCGAN\u3067\u5b66\u7fd2\u6e08\u307f\u306e\u753b\u50cf\u751f\u6210\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u304a\u308a\u3001\u305d\u306ebuffer\u30d5\u30a1\u30a4\u30eb\u304c70MB\u3092\u8d85\u3048\u307e\u3057\u305f\u3002\u753b\u50cf\u306e\u751f\u6210\u306bfloat32\u306e\u7cbe\u5ea6\u306f\u4e0d\u8981\u306a\u306e\u3067\u3001float16\u306b\u3057\u3066\u30e2\u30c7\u30eb\u306e\u8efd\u91cf\u5316\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\u3000Keras\u30e2\u30c7\u30eb\u306e\u65b9\u306fencoder.py\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067numpy.float16\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u306f\u5bb9\u6613\u3067\u3057\u305f\u304c\u3001\u3069\u3046\u3084\u3089javascript\u306e\u65b9\u306fFloat32Array\u306f\u3042\u308b\u3082\u306e\u306efloat16\uff08\u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u304c\u7121\u3044\u3089\u3057\u304f\u3001\u65ad\u5ff5\u3057\u307e\u3057\u305f\u3002\n\u3000\u3082\u3057\u9811\u5f35\u308b\u306a\u3089\u3001\u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u30d0\u30a4\u30ca\u30ea\u304b\u3089\u5b9f\u6570\u5024\u3092\u5f97\u308b\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u3088\u3046\u306bKeras.js\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n6. \u611f\u60f3\n\nKeras.js\u3068ConvNetJS\u3069\u3061\u3089\u304c\u697d\u304b\n\u3000ConvNetJS\u306e\u65b9\u304c\u3048\u3089\u304f\u6614\u306e\u7269\u306a\u306e\u3068\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092javascript\u3067\u518d\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u3060\u540c\u3058Python\u3092\u4f7f\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308bKeras\u7d4c\u7531\u306eKeras.js\u5229\u7528\u306e\u65b9\u304c\u697d\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d5\u30ed\u30f3\u30c8\u5074\u3068\u30b5\u30fc\u30d0\u30fc\u5074\u3069\u3061\u3089\u3067\u9806\u4f1d\u642c\u3055\u305b\u308b\u306e\u304c\u826f\u3044\u304b\n\u3000\u65ad\u7136\u30b5\u30fc\u30d0\u30fc\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\u307e\u305a\u7b2c\u4e00\u306b\u3001\u7d50\u679c\u304c\u51fa\u308b\u307e\u3067\u306e\u6642\u9593\u304c\u5727\u5012\u7684\u306b\u77ed\u3044\u3067\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u306a\u3089\u753b\u50cf\uff11\u679a\u751f\u6210\u306b\u3064\u304d0.5\u79d2\u307b\u3069\u3067\u3057\u305f\u304c\u3001Keras.js\u5229\u7528\u306a\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6570\u5341\u79d2\u3001\u753b\u50cf1\u679a\u306b1\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\u3002Keras\u3067\u7b49\u4fa1\u306a\u30e2\u30c7\u30eb\u3092\u518d\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u7121\u3044\u4e0a\u3001\u610f\u5916\u3068\u5b9f\u88c5\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u304c\u5909\u308f\u308b\u305f\u3073\u306b\u4f5c\u308a\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3088\u308a\u4e00\u5c64\u3064\u3089\u3044\u3067\u3059\u3002\n\u3000\u3082\u3061\u308d\u3093\u8a08\u7b97\u8cc7\u6e90\u30b3\u30b9\u30c8\u306e\u554f\u984c\u3084\u3001\u30b5\u30fc\u30d0\u30fc\u5229\u7528\u95a2\u9023\u306e\u3081\u3093\u3069\u304f\u3055\u3055\u304c\u3042\u308b\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u3001\u3069\u3046\u3057\u3066\u3082\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u9806\u4f1d\u642c\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3089\u3001Keras.js\u3092\u4f7f\u3046\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u3000\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001chainer\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u3001Keras.js\u3092\u4f7f\u3063\u3066\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u3000\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u7528\u3044\u305f\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308b\u305f\u3081\u306b\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308bAPI\u3092\u7528\u610f\u3059\u308b\u304b\u3001\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u76f4\u63a5\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3000\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u5927\u304d\u306a\u5229\u70b9\u306f**\u8a08\u7b97\u6a5f\u30b3\u30b9\u30c8\u304c\u304b\u304b\u3089\u306a\u3044**\u70b9\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u30b5\u30fc\u30d0\u3060\u3051\u7528\u610f\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u5c0f\u3055\u306a\u30c7\u30e2\u3092\u516c\u958b\u3059\u308b\u969b\u306f\u4fbf\u5229\u3067\u3059\u3002\u9006\u306b\u6b20\u70b9\u3068\u3057\u3066**javascript\u3067\u518d\u5b9f\u88c5**\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057**[Keras.js](https://github.com/transcranial/keras-js)\u3092\u4f7f\u3048\u3070\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092JS\u3067\u66f8\u304d\u76f4\u3059\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b**\u305f\u3081\u3001\u975e\u5e38\u306b\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3000\u3061\u306a\u307f\u306b[Girl Friend Factory - \u6a5f\u68b0\u5b66\u7fd2\u3067\u5f7c\u5973\u3092\u5275\u308b -](http://qiita.com/Hiroshiba/items/d5749d8896613e6f0b48)\u3067\u306f\u3001\u3053\u306e\u65b9\u6cd5\u3092\u7528\u3044\u305f\u30c7\u30e2\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n## \u8a18\u4e8b\u306e\u6d41\u308c\n1. Keras\u3068Keras.js\n2. chainer\u30e2\u30c7\u30eb\u304b\u3089Keras\u30e2\u30c7\u30eb\u3078\n3. Keras\u30e2\u30c7\u30eb\u304b\u3089Keras.js\u30e2\u30c7\u30eb\u3078\n4. javascript\u3067\u9806\u4f1d\u64ad\n5. \uff08\u767a\u5c55\uff09\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5bb9\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u8a66\u884c\u932f\u8aa4\n6. \u611f\u60f3\n\n## 1. Keras.js\u3068\u306f\n\u3000[Keras.js](https://github.com/transcranial/keras-js)\u306f\u3001Keras\u30e2\u30c7\u30eb\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u3001GPU\u3092\u4f7f\u3063\u3066\u52d5\u304b\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3061\u306a\u307f\u306b[Keras](https://keras.io/ja/)\u306f\u3001TensorFlow\u30fbTheano\u306a\u3069\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u3000chainer\u30e2\u30c7\u30eb\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u4f7f\u3046\u65b9\u6cd5\u306f\u4ed6\u306b\u3082\u3001[ConvNetJS](https://github.com/karpathy/convnetjs)\u3092\u4f7f\u3046\u624b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306fjavascript\u3067\u540c\u7b49\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001\u5229\u7528\u3057\u305f\u3044NN\u5c64\u304c\u7121\u304b\u3063\u305f\u308a\u3068\u3001\u5c11\u3057\u4f7f\u3044\u3065\u3089\u3044\u3067\u3059\u3002\n\n\u3000chainer\u30e2\u30c7\u30eb\u3092Keras.js\u3067\u5229\u7528\u3059\u308b\u306b\u306f\u3001\u307e\u305achainer\u30e2\u30c7\u30eb\u3092Keras\u30e2\u30c7\u30eb\u306b\u5909\u63db\u3057\u3001Keras\u30e2\u30c7\u30eb\u3092Keras.js\u30e2\u30c7\u30eb\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5f8c\u8005\u306f\u5c02\u7528\u306e\u30b3\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u524d\u8005\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## 2. chainer\u30e2\u30c7\u30eb\u304b\u3089Keras\u30e2\u30c7\u30eb\u3078\n\u3000\u4eca\u56de\u306f\u8a66\u3057\u306b\u3001Deconvolution\u3057\u3066BatchNormalization\u3057\u3066Convolution\u3059\u308b\u3060\u3051\u306e\u30e2\u30c7\u30eb\u3092\u5909\u63db\u3057\u307e\u3059\u3002\n\n```py3\nimport chainer\n\nbatchsize = 1\nsize = 2\nn_in = 3\nn_middle = 2\nn_out = 1\nksize = 2\n\n\nclass ChainerModel(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            deconv=chainer.links.Deconvolution2D(n_in, n_middle, ksize=ksize, stride=ksize),\n            bn=chainer.links.BatchNormalization(n_middle),\n            conv=chainer.links.Convolution2D(n_middle, n_out, ksize=ksize, stride=ksize),\n        )\n\n    def __call__(self, x, test):\n        return self.conv(self.bn(self.deconv(x), test=test))\n\n\nchainer_model = ChainerModel()\n```\n\u3000\u30e2\u30c7\u30eb\u3092\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3060\u308d\u3046\u3068\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u3000\u307e\u305a\u3001\u7b49\u4fa1\u306aKeras\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\u30b3\u30c4\u3068\u3057\u307e\u3057\u3066\u3001**\u7573\u307f\u8fbc\u307f\u5c64\u306e\u6b21\u5143\u306e\u9806\u5e8f`dim_ordering`\u306f\u3001TensorFlow\u30e2\u30fc\u30c9`tf`\u3092\u5229\u7528\u3057\u305f\u65b9\u304c\u826f\u3044**\u3067\u3059\u3002_\uff08Theano\u30e2\u30fc\u30c9`th`\u3060\u3068Keras.js\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u305f\u3081\u3002\uff09_\n\n\u3000Convolution\u3084Deconvolution\u306f\u3001\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u521d\u671f\u5024\u3084\u5f15\u6570\u306e\u4ed5\u69d8\u304c\u7570\u306a\u308b\u305f\u3081\u3001\u540c\u3058\u5f62\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f5c\u308b\u306e\u306b\u7d50\u69cb\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\n\u3000Keras\u3067\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u304c\u3001\u5c64\u3092add\u3057\u3066\u3044\u304f\u3088\u308a\u3082\u3001\u9806\u4f1d\u642c\u3092\u81ea\u5206\u3067\u66f8\u304f\u307b\u3046\u304cchainer\u3092\u4f7f\u3046\u4eba\u306b\u306f\u76f4\u611f\u7684\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py3\nimport keras\n\ninput_keras = keras.layers.Input(shape=(size, size, n_in), name='input')\n\nh = input_keras\nh = keras.layers.convolutional.Deconvolution2D(\n    n_middle, ksize, ksize, name='deconv',\n    output_shape=(batchsize, size * ksize, size * ksize, n_middle),\n    dim_ordering='tf', subsample=(ksize, ksize),\n)(h)\nh = keras.layers.normalization.BatchNormalization(\n    epsilon=2e-5, momentum=0.9, axis=3, name='bn',\n)(h)\nh = keras.layers.convolutional.Convolution2D(\n    n_out, ksize, ksize, name='conv',\n    dim_ordering='tf', subsample=(ksize, ksize),\n)(h)\n\nkeras_model = keras.models.Model(input_keras, h)\n```\n\n\u3000\u4e00\u65e6\u3053\u306e\u307e\u307e\u9069\u5f53\u306a\u30d9\u30af\u30c8\u30eb\u3092\u9806\u4f1d\u642c\u3055\u305b\u3066\u307f\u307e\u3059\u3002chainer\u306eBatchNormalization\u306f\u4f55\u304b\u5b66\u7fd2\u3055\u305b\u306a\u3044\u3068`test=True`\u3067\u9806\u4f1d\u642c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u6700\u521d\u306b\u9069\u5f53\u306a\u5b66\u7fd2\u3092\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n```py3\nimport numpy\nx = numpy.random.randn(batchsize, n_in, size, size).astype(numpy.float32)\n\n# \u9069\u5f53\u306b\u5b66\u7fd2\u3055\u305b\u308b\noptimize = chainer.optimizers.Adam()\noptimize.setup(chainer_model)\ny = numpy.zeros(shape=(batchsize, n_out, size, size), dtype=numpy.float32)\nfor _ in range(10):\n    optimize.zero_grads()\n    loss = chainer.functions.mean_squared_error(chainer_model(x, test=False), y)\n    loss.backward()\n    optimize.update()\n\n# chainer \u9806\u4f1d\u642c\noutput_chainer = chainer_model(x, test=True).data\n\n# Keras \u9806\u4f1d\u642c\n# `(samples, rows, cols, channels)` if dim_ordering='tf'\noutput_keras = keras_model.predict(x.transpose(0, 2, 3, 1)).transpose(0, 3, 1, 2)\n\n# \u4e88\u6e2c\u306e\u5dee\nprint('diff: ', numpy.abs(output_chainer - output_keras).sum())  # diff: 3.54881\n```\n\n\u3000\u91cd\u307f\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4e88\u6e2c\u5024\u306b\u5927\u304d\u306a\u5dee\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u306f\u6700\u5f8c\u306b\u3001\u91cd\u307f\u3092\u30b3\u30d4\u30fc\u3057\u3066\u307f\u307e\u3059\u3002\uff08\u30b3\u30fc\u30c9\u306f\u9069\u5f53\u306b[\u3053\u306eGist](https://gist.github.com/Hiroshiba/549052c175356949cba5162151916307)\u306b\u4e0a\u3052\u307e\u3057\u305f\u306e\u3067\u3001\u4ed6\u306e\u30ec\u30a4\u30e4\u30fc\u3082\u5b9f\u88c5\u3057\u305f\u969b\u306f\u305c\u3072\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n```py3\ndef copy_weights_deconvolution(chainer_model, keras_model, layer_name):\n    deconv_chainer = chainer_model[layer_name]\n    W, b = (deconv_chainer.W.data, deconv_chainer.b.data)\n    keras_model.get_layer(layer_name).set_weights([numpy.transpose(W, (2, 3, 0, 1)), b])\n\n\ndef copy_weights_convolution(chainer_model, keras_model, layer_name):\n    conv_chainer = chainer_model[layer_name]\n    W, b = (conv_chainer.W.data, conv_chainer.b.data)\n    keras_model.get_layer(layer_name).set_weights([numpy.transpose(W, (2, 3, 1, 0)), b])\n\n\ndef copy_weights_bn(chainer_model, keras_model, layer_name):\n    bn_chainer = chainer_model[layer_name]\n    w = [bn_chainer.gamma.data, bn_chainer.beta.data, bn_chainer.avg_mean, bn_chainer.avg_var]\n    keras_model.get_layer(layer_name).set_weights(w)\n\ncopy_weights_deconvolution(chainer_model, keras_model, 'deconv')\ncopy_weights_convolution(chainer_model, keras_model, 'conv')\ncopy_weights_bn(chainer_model, keras_model, 'bn')\n\noutput_keras = keras_model.predict(x.transpose(0, 2, 3, 1)).transpose(0, 3, 1, 2)\nprint('diff: ', numpy.abs(output_chainer - output_keras).sum())  # diff: 0.000445604\n```\n\n\u3000\u5dee\u304c`3.54881`\u304b\u3089`0.00044`\u307e\u3067\u7e2e\u307e\u308a\u307e\u3057\u305f\u3002\u306a\u3093\u304b\u307e\u3060\u5fae\u5999\u306b\u8aa4\u5dee\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3041\u30fb\u30fb\u30fb\n\n## 3. Keras\u30e2\u30c7\u30eb\u304b\u3089Keras.js\u30e2\u30c7\u30eb\u3078\n\u3000\u3053\u3053\u304b\u3089\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3001Keras\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u305f\u3042\u3068\u3001Keras.js\u304c\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308c\u3070\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```py3\n# save Keras model\nwith open('keras_model_arch.json', 'w') as f:\n    f.write(keras_model.to_json())\n\nkeras_model.save('keras_model.h5')\n```\n\n```bash\n# https://github.com/transcranial/keras-js/blob/master/encoder.py\npython3 encoder.py keras_model.h5\n```\n\n\u3000\u3053\u308c\u3067\n\n* `keras_model.h5`\n* `keras_model_arch.json`\n* `keras_model_weights.buf`\n* `keras_model_metadata.json`\n\n\u306e4\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u306e\u3046\u3061\u4e0b\uff13\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092Keras.js\u3067\u5229\u7528\u3057\u307e\u3059\u3002\n\n## 4. javascript\u3067\u9806\u4f1d\u64ad\n\u3000\u3042\u3068\u306f[Keras.js\u306e\u4f7f\u3044\u65b9](https://github.com/transcranial/keras-js)\u306b\u5f93\u3063\u3066\u4f7f\u3046\u3060\u3051\u3067\u3059\u3002\n\n```js\nconst model = new KerasJS.Model({\n  filepaths: {\n    model: 'keras_model_arch.json',\n    weights: 'keras_model_metadata.json',\n    metadata: 'keras_model_weights.buf'\n  },\n  gpu: true\n})\n\ntry {\n  await model.ready()\n  const inputData = {\n    'input': new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1])\n  }\n  const outputData = await model.predict(inputData)\n} catch (err) {\n  // handle error\n}\n```\n\n\u3000\u3042\u3068\u306f`outputData`\u306b\u4e88\u6e2c\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001canvas\u3067\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\n\n## 5. \uff08\u767a\u5c55\uff09\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5bb9\u91cf\u3092\u5c0f\u3055\u304f\u3059\u308b\u8a66\u884c\u932f\u8aa4\n\u3000\u6700\u521d\u306b\u7d39\u4ecb\u3057\u305f\u30c7\u30e2\u306fDCGAN\u3067\u5b66\u7fd2\u6e08\u307f\u306e\u753b\u50cf\u751f\u6210\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u304a\u308a\u3001\u305d\u306ebuffer\u30d5\u30a1\u30a4\u30eb\u304c70MB\u3092\u8d85\u3048\u307e\u3057\u305f\u3002\u753b\u50cf\u306e\u751f\u6210\u306bfloat32\u306e\u7cbe\u5ea6\u306f\u4e0d\u8981\u306a\u306e\u3067\u3001float16\u306b\u3057\u3066\u30e2\u30c7\u30eb\u306e\u8efd\u91cf\u5316\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\n\u3000Keras\u30e2\u30c7\u30eb\u306e\u65b9\u306f[encoder.py](https://github.com/transcranial/keras-js/blob/master/encoder.py)\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067numpy.float16\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u306f\u5bb9\u6613\u3067\u3057\u305f\u304c\u3001\u3069\u3046\u3084\u3089javascript\u306e\u65b9\u306f`Float32Array`\u306f\u3042\u308b\u3082\u306e\u306efloat16\uff08\u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u304c\u7121\u3044\u3089\u3057\u304f\u3001\u65ad\u5ff5\u3057\u307e\u3057\u305f\u3002\n\n\u3000\u3082\u3057\u9811\u5f35\u308b\u306a\u3089\u3001[\u534a\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u30d0\u30a4\u30ca\u30ea\u304b\u3089\u5b9f\u6570\u5024\u3092\u5f97\u308b\u30b3\u30fc\u30c9](http://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript)\u3092\u4f7f\u3046\u3088\u3046\u306bKeras.js\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n## 6. \u611f\u60f3\n### Keras.js\u3068ConvNetJS\u3069\u3061\u3089\u304c\u697d\u304b\n\u3000ConvNetJS\u306e\u65b9\u304c\u3048\u3089\u304f\u6614\u306e\u7269\u306a\u306e\u3068\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092javascript\u3067\u518d\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u3060\u540c\u3058Python\u3092\u4f7f\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308bKeras\u7d4c\u7531\u306eKeras.js\u5229\u7528\u306e\u65b9\u304c\u697d\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u30d5\u30ed\u30f3\u30c8\u5074\u3068\u30b5\u30fc\u30d0\u30fc\u5074\u3069\u3061\u3089\u3067\u9806\u4f1d\u642c\u3055\u305b\u308b\u306e\u304c\u826f\u3044\u304b\n\u3000**\u65ad\u7136\u30b5\u30fc\u30d0\u30fc\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002**\u307e\u305a\u7b2c\u4e00\u306b\u3001\u7d50\u679c\u304c\u51fa\u308b\u307e\u3067\u306e\u6642\u9593\u304c\u5727\u5012\u7684\u306b\u77ed\u3044\u3067\u3059\u3002\u30b5\u30fc\u30d0\u30fc\u306a\u3089\u753b\u50cf\uff11\u679a\u751f\u6210\u306b\u3064\u304d0.5\u79d2\u307b\u3069\u3067\u3057\u305f\u304c\u3001Keras.js\u5229\u7528\u306a\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u6570\u5341\u79d2\u3001\u753b\u50cf1\u679a\u306b1\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\u3002Keras\u3067\u7b49\u4fa1\u306a\u30e2\u30c7\u30eb\u3092\u518d\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u7121\u3044\u4e0a\u3001\u610f\u5916\u3068\u5b9f\u88c5\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u304c\u5909\u308f\u308b\u305f\u3073\u306b\u4f5c\u308a\u5909\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3088\u308a\u4e00\u5c64\u3064\u3089\u3044\u3067\u3059\u3002\n\u3000\u3082\u3061\u308d\u3093\u8a08\u7b97\u8cc7\u6e90\u30b3\u30b9\u30c8\u306e\u554f\u984c\u3084\u3001\u30b5\u30fc\u30d0\u30fc\u5229\u7528\u95a2\u9023\u306e\u3081\u3093\u3069\u304f\u3055\u3055\u304c\u3042\u308b\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u3001\u3069\u3046\u3057\u3066\u3082\u30d5\u30ed\u30f3\u30c8\u5074\u3067\u9806\u4f1d\u642c\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3089\u3001Keras.js\u3092\u4f7f\u3046\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n", "tags": ["Chainer", "JavaScript", "Keras", "\u6a5f\u68b0\u5b66\u7fd2"]}