{"context": " More than 1 year has passed since last update.\u305f\u3060\u306e\u30e1\u30e2\u3067\u3059\u3002\n\nGeometryConverter.java\n\n/**\n * lat/lng &lt;-%gt; byte[]\n */\n@Converter(autoApply = true)\npublic class GeometryConverter implements AttributeConverter<Geometry, byte[]> {\n\n    private static final byte[] COMMON_BYTES = {\n            0, 0, 0, 0,\n            0x01,\n            0x01, 0, 0, 0\n    };\n\n    @Override\n    public byte[] convertToDatabaseColumn(Geometry attribute) {\n        if (attribute == null)\n            return null;\n\n        ByteBuffer resultBuffer = ByteBuffer.allocate(25)\n                .put(COMMON_BYTES);\n\n        ByteBuffer doubleBuffer = ByteBuffer.allocate(8);\n        putReverse(resultBuffer, doubleBuffer, attribute.latitude);\n        putReverse(resultBuffer, doubleBuffer, attribute.longitude);\n\n        return resultBuffer.array();\n    }\n\n    private void putReverse(ByteBuffer target, ByteBuffer buffer, double value) {\n        buffer.position(0);\n        byte[] data = buffer.putDouble(value).array();\n        for (int i = 0; i < 8; i++) {\n            target.put(data[7 - i]);\n        }\n    }\n\n    @Override\n    public Geometry convertToEntityAttribute(byte[] dbData) {\n        if (dbData == null)\n            return null;\n\n        ByteBuffer buffer = ByteBuffer.allocate(8);\n        Geometry geometry = new Geometry();\n        geometry.latitude = getReverse(buffer, dbData, 9);\n        geometry.longitude = getReverse(buffer, dbData, 17);\n        return geometry;\n    }\n\n    private double getReverse(ByteBuffer buffer, byte[] data, int position) {\n        buffer.position(0);\n        for (int i = position + 7; i >= position; i--) {\n            buffer.put(data[i]);\n        }\n\n        buffer.position(0);\n        return buffer.getDouble();\n    }\n}\n\n\nMySQL\u306e\u4ed5\u69d8\u3092\u898b\u308b\u9650\u308a\u3060\u3068\u3001\n\nGeometry\u30d5\u30a3\u30fc\u30eb\u30c9\u306f21\u30d0\u30a4\u30c8\n\u6700\u521d\u306e1\u30d0\u30a4\u30c8\u306fNetwork Data Representation (NDR) \u304b External Data Representation (XDR)\n\u6b21\u306e4\u30d0\u30a4\u30c8\u306fWKB\u306e\u7a2e\u5225\u30021-7\u3067\u305d\u308c\u305e\u308c Point\u3001LineString\u3001Polygon\u3001MultiPoint\u3001MultiLineString\u3001MultiPolygon\u3001aGeometryCollection\n\u6b21\u306e8\u30d0\u30a4\u30c8\u306f\u7def\u5ea6\n\u6b21\u306e8\u30d0\u30a4\u30c8\u306f\u7d4c\u5ea6\n\n\u3063\u3066\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u5b9f\u969b\u306f25\u30d0\u30a4\u30c8\u3060\u3063\u305f\u3057\uff08\u982d\u306b0\u304c4\u30d0\u30a4\u30c8\u5165\u3063\u3066\u308b\uff09\u3001double\u306f\u30d0\u30a4\u30c8\u914d\u5217\u53cd\u8ee2\u3055\u305b\u306a\u3044\u3068\u30c0\u30e1\u3067\u3057\u305f\u3002\n\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u65b9\u6cd5\u304c\u3042\u3063\u305f\u3089\u662f\u975e\u306b\u3002\n\u305f\u3060\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n\n```GeometryConverter.java\n\n/**\n * lat/lng &lt;-%gt; byte[]\n */\n@Converter(autoApply = true)\npublic class GeometryConverter implements AttributeConverter<Geometry, byte[]> {\n\n    private static final byte[] COMMON_BYTES = {\n            0, 0, 0, 0,\n            0x01,\n            0x01, 0, 0, 0\n    };\n\n    @Override\n    public byte[] convertToDatabaseColumn(Geometry attribute) {\n        if (attribute == null)\n            return null;\n\n        ByteBuffer resultBuffer = ByteBuffer.allocate(25)\n                .put(COMMON_BYTES);\n\n        ByteBuffer doubleBuffer = ByteBuffer.allocate(8);\n        putReverse(resultBuffer, doubleBuffer, attribute.latitude);\n        putReverse(resultBuffer, doubleBuffer, attribute.longitude);\n\n        return resultBuffer.array();\n    }\n\n    private void putReverse(ByteBuffer target, ByteBuffer buffer, double value) {\n        buffer.position(0);\n        byte[] data = buffer.putDouble(value).array();\n        for (int i = 0; i < 8; i++) {\n            target.put(data[7 - i]);\n        }\n    }\n\n    @Override\n    public Geometry convertToEntityAttribute(byte[] dbData) {\n        if (dbData == null)\n            return null;\n\n        ByteBuffer buffer = ByteBuffer.allocate(8);\n        Geometry geometry = new Geometry();\n        geometry.latitude = getReverse(buffer, dbData, 9);\n        geometry.longitude = getReverse(buffer, dbData, 17);\n        return geometry;\n    }\n\n    private double getReverse(ByteBuffer buffer, byte[] data, int position) {\n        buffer.position(0);\n        for (int i = position + 7; i >= position; i--) {\n            buffer.put(data[i]);\n        }\n\n        buffer.position(0);\n        return buffer.getDouble();\n    }\n}\n```\n\n\n[MySQL\u306e\u4ed5\u69d8](http://dev.mysql.com/doc/refman/5.6/en/gis-data-formats.html)\u3092\u898b\u308b\u9650\u308a\u3060\u3068\u3001\n\n* Geometry\u30d5\u30a3\u30fc\u30eb\u30c9\u306f21\u30d0\u30a4\u30c8\n* \u6700\u521d\u306e1\u30d0\u30a4\u30c8\u306fNetwork Data Representation (NDR) \u304b External Data Representation (XDR)\n* \u6b21\u306e4\u30d0\u30a4\u30c8\u306fWKB\u306e\u7a2e\u5225\u30021-7\u3067\u305d\u308c\u305e\u308c Point\u3001LineString\u3001Polygon\u3001MultiPoint\u3001MultiLineString\u3001MultiPolygon\u3001aGeometryCollection\n* \u6b21\u306e8\u30d0\u30a4\u30c8\u306f\u7def\u5ea6\n* \u6b21\u306e8\u30d0\u30a4\u30c8\u306f\u7d4c\u5ea6\n\n\u3063\u3066\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u5b9f\u969b\u306f25\u30d0\u30a4\u30c8\u3060\u3063\u305f\u3057\uff08\u982d\u306b0\u304c4\u30d0\u30a4\u30c8\u5165\u3063\u3066\u308b\uff09\u3001double\u306f\u30d0\u30a4\u30c8\u914d\u5217\u53cd\u8ee2\u3055\u305b\u306a\u3044\u3068\u30c0\u30e1\u3067\u3057\u305f\u3002\n\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u65b9\u6cd5\u304c\u3042\u3063\u305f\u3089\u662f\u975e\u306b\u3002\n", "tags": ["Java", "MySQL", "jpa"]}