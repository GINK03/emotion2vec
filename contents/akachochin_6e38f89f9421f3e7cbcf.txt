{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\n\u3069\u3046\u3082\u3067\u3059\u3002@akachochin\u3067\u3059\u3002\u98f2\u3093\u3060\u308a\u3057\u3066\u7de9\u304f\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u304a\u5143\u6c17\u3067\u3059\u304b\uff1f\n\u6587\u66f8\u66f8\u304d\u306a\u304c\u3089\u3068\u3044\u3046\u3053\u3068\u3068\u3001\u4ed6\u306b\u3082\u8ffd\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u3001\u6700\u8fd1\u5c11\u3057\u6642\u9593\u304c\u3068\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3051\u308c\u3069\u3001\u9045\u3005\u3067\u3082\u7d9a\u3051\u3066\u884c\u304d\u307e\u3059\u3002\n(\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u8aad\u3080\u306e\u306f\u3001\u7d50\u69cb\u304a\u3082\u3057\u308d\u3044\u3067\u3059\u3088\u3002\u30ab\u30fc\u30cd\u30eb\u521d\u5fc3\u8005\u306f\u3001\u307e\u305a\u6c17\u306b\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3001\u7c21\u5358\u305d\u3046\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u5c11\u3057\u305a\u3064\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\u3042\u3068\u3001Linux\u3060\u3068\u66f8\u7c4d\u3082\u7d50\u69cb\u51fa\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u53c2\u8003\u306b\u3057\u3066\u8aad\u307f\u9032\u3081\u3066\u3082\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n\u524d\u56de\u306f\u3001handle_mm_fault()\u306e\u3068\u3053\u308d\u307e\u3067\u8aad\u307f\u307e\u3057\u305f\u3002\n\u304b\u306a\u308a\u9593\u304c\u958b\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3056\u3063\u304f\u308a\u3068\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5bfe\u8c61\u3068\u306a\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n\u5c11\u3057\u53e4\u3044\u3067\u3059\u304c\u30013.15.6\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002\n\u7406\u7531\u306f\u624b\u5143\u306b\u3042\u3063\u305f\u306e\u304c\u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3060\u3051\u3067\u3059\u3002\u9aa8\u683c\u306f\u6050\u3089\u304f\u5909\u308f\u3089\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001cgroups\u306b\u95a2\u3057\u3066\u306f\u3069\u3046\u306a\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3072\u3068\u901a\u308a\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3060\u3089\u3001\u65b0\u3057\u3044cgroup\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u898b\u308b\u306e\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nhandle_mm_fault()\u3092\u8aad\u3080\n\nmm/memory.c\nint handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,\n        unsigned long address, unsigned int flags)\n{\n  int ret;\n\n  __set_current_state(TASK_RUNNING);\n\n\n\n\u3053\u308c\u306f\u3001\u73fe\u5728\u306e\u30bf\u30b9\u30af(\u30d7\u30ed\u30bb\u30b9)\u306e\u72b6\u614b\u3092TASK_RUNNING\u306b\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\ninclude/linux/sched.h\n#define __set_current_state(state_value)      \\\n  do { current->state = (state_value); } while (0)\n\n\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u8b0e\u3067\u3059\u3002\u4f55\u6545\u3063\u3066\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u30b3\u30fc\u30c9\u5b9f\u884c\u4e2d\u3067\u306a\u3044\u3068\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306f\u8d77\u304d\u5f97\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u3001\u3053\u306e\u3068\u304d\u306fTASK_RUNNING\u306a\u308f\u3051\u3067\u30fb\u30fb\u30fb\u3002\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u51e6\u7406\u3067\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306b\u767a\u751f\u3057\u305fpage fault\u3067\u306f\u3053\u3053\u306b\u305f\u3069\u308a\u7740\u304b\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u306f\u8003\u3048\u3065\u3089\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nLinux\u3067\u306f\u4f55\u304b\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3068\u308a\u3042\u3048\u305a\u63aa\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u7d71\u8a08\u60c5\u5831\n\u3055\u3066\u3001\u6b21\u306f\u5404\u7a2e\u7d71\u8a08\u60c5\u5831\u306e\u66f4\u65b0\u3002\n\nmm/memory.c\n  count_vm_event(PGFAULT);\n\n\n\u307e\u305a\u306f\u3001count_vm_event()\u3002\n\ninclude/linux/vmstat.h\n/*\n * Light weight per cpu counter implementation.\n *\n * Counters should only be incremented and no critical kernel component\n * should rely on the counter values.\n *\n * Counters are handled completely inline. On many platforms the code\n * generated will simply be the increment of a global address.\n */\n\nstruct vm_event_state {\n  unsigned long event[NR_VM_EVENT_ITEMS];\n};\n\nDECLARE_PER_CPU(struct vm_event_state, vm_event_states);\n\n/* \u7565 */\nstatic inline void count_vm_event(enum vm_event_item item)\n{\n  this_cpu_inc(vm_event_states.event[item]);\n}\n\n\n\u30ab\u30fc\u30cd\u30eb\u5185\u3067\u4f7f\u308f\u308c\u308b\u7c21\u6613\u306a\u30a4\u30d9\u30f3\u30c8\u30ab\u30a6\u30f3\u30bf\u306e\u3088\u3046\u3067\u3059\u3002\u6b21\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\nmm/memory.c\n  mem_cgroup_count_vm_event(mm, PGFAULT);\n\n\n\ncgroup\u95a2\u4fc2\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u307e\u305f\u3082\u5bc4\u308a\u9053\u3002cgroup\u3092\u3061\u3087\u3063\u3068\u3060\u3051\ncgroup\u3068\u306f\u3001\n\u4eca\u56de\u51fa\u3066\u304d\u305fmem_cgroup_count_vm_event()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\ninclude/linux/memcontrol.h\nstatic inline void mem_cgroup_count_vm_event(struct mm_struct *mm,\n               enum vm_event_item idx)\n{\n  if (mem_cgroup_disabled())\n    return;\n  __mem_cgroup_count_vm_event(mm, idx);\n}\n\n\n\nmm/memcontrol.c\nvoid __mem_cgroup_count_vm_event(struct mm_struct *mm, enum vm_event_item idx)\n{   \n  struct mem_cgroup *memcg;\n\n  rcu_read_lock();\n  memcg = mem_cgroup_from_task(rcu_dereference(mm->owner));\n  if (unlikely(!memcg))\n    goto out;\n\n  switch (idx) {\n  case PGFAULT:\n    this_cpu_inc(memcg->stat->events[MEM_CGROUP_EVENTS_PGFAULT]);\n    break;\n  case PGMAJFAULT:\n    this_cpu_inc(memcg->stat->events[MEM_CGROUP_EVENTS_PGMAJFAULT]);\n    break;\n  default:\n    BUG();\n  }\nout:\n  rcu_read_unlock();\n}\n\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001mem_cgroup\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u3066\u3001\u4e2d\u306e\u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3060\u3051\u3002\u6975\u3081\u3066\u5358\u7d14\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n\nmm/memory.c\n  /*\n   * Enable the memcg OOM handling for faults triggered in user\n   * space.  Kernel faults are handled more gracefully.\n   */\n  if (flags & FAULT_FLAG_USER)\n    mem_cgroup_oom_enable();\n\n  ret = __handle_mm_fault(mm, vma, address, flags);\n\n  if (flags & FAULT_FLAG_USER) {\n    mem_cgroup_oom_disable();\n                /*\n                 * The task may have entered a memcg OOM situation but\n                 * if the allocation error was handled gracefully (no\n                 * VM_FAULT_OOM), there is no need to kill anything.\n                 * Just clean up the OOM state peacefully.\n                 */\n                if (task_in_memcg_oom(current) && !(ret & VM_FAULT_OOM))\n                        mem_cgroup_oom_synchronize(false);\n  }\n\n  return ret;\n}\n\n\n\n\u3044\u3088\u3044\u3088__handle_mm_fault()\n\nmm/memory.c\n/*\n * By the time we get here, we already hold the mm semaphore\n */\nstatic int __handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,\n           unsigned long address, unsigned int flags)\n{\n  pgd_t *pgd;\n  pud_t *pud;\n  pmd_t *pmd;\n  pte_t *pte;\n\n  /* \u4eca\u56de\u3001HUGE TLB\u306f\u98db\u3070\u3057\u307e\u3059\u3002\u3044\u3064\u304b\u3084\u308a\u307e\u3059\u3002 */\n  if (unlikely(is_vm_hugetlb_page(vma)))\n    return hugetlb_fault(mm, vma, address, flags);\n\n\n\nmm/memory.c\n  pgd = pgd_offset(mm, address);\n  pud = pud_alloc(mm, pgd, address);\n  if (!pud)\n    return VM_FAULT_OOM;\n  pmd = pmd_alloc(mm, pud, address);\n  if (!pmd)\n    return VM_FAULT_OOM;\n\n\n\u300cLinux\u306e\u4eee\u60f3 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u6982\u8981(\u305d\u306e2)\u300d\u3067PUD\u306a\u3069\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7e70\u308a\u8fd4\u3057\u8aac\u660e\u3057\u307e\u305b\u3093\u3002\np[u|m]d_alloc()\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u306b\u3082\u8a72\u5f53\u3057\u306a\u3044\u5834\u5408\u3001NULL\u3092\u8fd4\u3059\u30de\u30af\u30ed\u3067\u3059\u3002\n(1)\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\n(2)(1)\u3067\u300c\u5b58\u5728\u3057\u306a\u3044\u300d\u5834\u5408\u3001\u65b0\u305f\u306a\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u304c\u3001\u3053\u308c\u306b\u5931\u6557\u3057\u305f\n\nmm/memory.c\n\n  if (pmd_none(*pmd) && transparent_hugepage_enabled(vma)) {\n    int ret = VM_FAULT_FALLBACK;\n    if (!vma->vm_ops)\n      ret = do_huge_pmd_anonymous_page(mm, vma, address,\n          pmd, flags);\n    if (!(ret & VM_FAULT_FALLBACK))\n      return ret;\n  } else {\n\n\npmd_none()\u306f\u3001pmd\u306e\u30a8\u30f3\u30c8\u30ea\u304c0\u3001\u3064\u307e\u308aPresent Bit(PDE\u306e bit0)\u304c\u7acb\u3063\u3066\u304a\u3089\u305a(\u3053\u306ePMD\u306b\u3042\u305f\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u308a\u5f53\u3066\u304c\u306a\u3044)\u3001\u4ed6\u306e\u30a8\u30f3\u30c8\u30ea\u3082\u7a7a\u306a\u672a\u4f7f\u7528\u306apmd\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6b21\u306e\u30de\u30af\u30ed\u306f\u3001Huge Page\u3092\u5272\u308a\u5f53\u3066\u3066\u826f\u3044\u30b1\u30fc\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\u3002\n\u53c2\u8003\u307e\u3067\u306b\u30de\u30af\u30ed\u5b9f\u88c5\u3092\u793a\u3057\u307e\u3059\u3002\n\ninclude/linux/huge_mm.h\n#define transparent_hugepage_enabled(__vma)       \\   \n  ((transparent_hugepage_flags &          \\   \n    (1<<TRANSPARENT_HUGEPAGE_FLAG) ||       \\   \n    (transparent_hugepage_flags &         \\\\\n     (1<<TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG) &&     \\   \n     ((__vma)->vm_flags & VM_HUGEPAGE))) &&     \\   \n   !((__vma)->vm_flags & VM_NOHUGEPAGE) &&      \\   \n   !is_vma_temporary_stack(__vma))\n\n\n\nHuge Page\u3068\u306f\nHuge Page\u306f\u305d\u306e\u540d\u306e\u901a\u308a\u3001\u300c\u5927\u304d\u306a\u30da\u30fc\u30b8\u300d\u3067\u3059\u3002\n\u591a\u304f\u306eCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u306f\u3001\u6a19\u6e96\u7684\u306a\u30e1\u30e2\u30ea\u30da\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u306f4KByte\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u305d\u308c\u3060\u3068\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u30e1\u30e2\u30ea\u3092\u30de\u30c3\u30d7\u3059\u308b\u3068\u304d\u306bTLB\u3092\u7121\u99c4\u9063\u3044\u3057\u305f\u308a\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30de\u30c3\u30d7\u66f8\u304d\u8fbc\u307f\u304c\u975e\u5e38\u306b\u9762\u5012\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u52b9\u3044\u3066\u304d\u307e\u3059\u3002\n4KByte\u306e\u30da\u30fc\u30b8\u3057\u304b\u8a31\u3055\u306a\u3044\u5834\u5408\u3001TLB\u306e1\u30a8\u30f3\u30c8\u30ea\u304c4kbyte\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u306e\u5909\u63db\u306b\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u3002\u6570MByte\u306e\u9023\u7d9a\u3057\u305f\u30e1\u30e2\u30ea\u7a7a\u9593\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u30014Kbyte\u3054\u3068\u306bTLB\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6d88\u8cbb\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u3082\u3046\u5c11\u3057\u5927\u304d\u306a\u7279\u4f8b\u7684\u306a\u30da\u30fc\u30b8\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u3046\u3044\u3046\u30da\u30fc\u30b8\u3092Huge Page\u3068\u304b\u8a00\u3063\u305f\u308a\u3057\u307e\u3059\u3002(\u3082\u3061\u308d\u3093CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3054\u3068\u306b\u7570\u306a\u308a\u307e\u3059\u3002\nIntel\u306e\u5834\u5408\u3001Intel SDM\u306eVol3. Chapter4\u306b\u3042\u308b\u3068\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\u306e\u30a8\u30f3\u30c8\u30ea\u306e\u8a2d\u5b9a\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n\n\n\nPaging Mode\n\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30da\u30fc\u30b8\u30b5\u30a4\u30ba\n\n\n\n\n32-bit\n4KB or 4MB\n\n\nPAE\n4KB or 2MB\n\n\nIA-32e\n4KB or 2MB or 1GB\n\n\n\n\u4eca\u56de\u3001Huge Page\u304c\u3089\u307f\u306eif\u7bc0\u306e\u8aac\u660e\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u307e\u3059\u3002\n\u304a\u305d\u3089\u304f\u591a\u304f\u306e\u5834\u5408\u3001else\u5074\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nmm/memory.c\n    pmd_t orig_pmd = *pmd;\n    int ret;\n\n    barrier();\n    if (pmd_trans_huge(orig_pmd)) {\n    /* \u5148\u306e\u7406\u7531\u306b\u3088\u308a\u3001Huge Page\u7cfb\u306f\u4eca\u56de\u7701\u304d\u307e\u3059\u3002*/\n    }\n  }\n\n  /*\n   * Use __pte_alloc instead of pte_alloc_map, because we can't\n   * run pte_offset_map on the pmd, if an huge pmd could\n   * materialize from under us from a different thread.\n   */\n  if (unlikely(pmd_none(*pmd)) &&\n      unlikely(__pte_alloc(mm, vma, pmd, address)))\n    return VM_FAULT_OOM;\n\n\n\u3053\u3053\u306f\u30014KByte\u306e\u30ce\u30fc\u30de\u30eb\u306a\u30e1\u30e2\u30ea\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u308b\u306e\u3067\u3001pmd\u3060\u3051\u3067\u306a\u304fpte\u3082\u5fc5\u8981\u3067\u3059\u3002\n\nmm/memory.c\n  /* Huge Page\u7cfb\u306e\u51e6\u7406\u306f\u7565 */\n\n  /*\n   * A regular pmd is established and it can't morph into a huge pmd\n   * from under us anymore at this point because we hold the mmap_sem\n   * read mode and khugepaged takes it in write mode. So now it's\n   * safe to run pte_offset_map().\n   */\n  pte = pte_offset_map(pmd, address);\n\n\n\npte_offset_map()\u306f\u300cpmd\u306e\u8a18\u8ff0\u5185\u5bb9\u3068\u4eca\u56de\u306e\u30de\u30c3\u30d7\u5bfe\u8c61\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u3001\u4eca\u56de\u4f7f\u3046PTE\u30a8\u30f3\u30c8\u30ea\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u300d\u3067\u3059\u3002\n\u5b9f\u88c5\u3092\u78ba\u8a8d\u3055\u308c\u305f\u3044\u5834\u5408\u3001arch/x86/include/asm/pgtable_32.h\n\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nmm/memory.c\n  return handle_pte_fault(mm, vma, address, pte, pmd, flags);\n}\n\n\n\nmm/memory.c\nstatic int handle_pte_fault(struct mm_struct *mm,\n         struct vm_area_struct *vma, unsigned long address,\n         pte_t *pte, pmd_t *pmd, unsigned int flags)\n{\n  pte_t entry;\n  spinlock_t *ptl;\n\n  entry = *pte;\n  if (!pte_present(entry)) {\n\n\n\u3053\u306e\u95a2\u6570\u306f\u5927\u304d\u304f\u5206\u3051\u308b\u3068\u3001\u4ee5\u4e0b2\u3064\u306e\u30b1\u30fc\u30b9\u3092\u634c\u304d\u307e\u3059\u3002\n(1)\u7269\u7406\u30da\u30fc\u30b8\u306e\u5272\u308a\u5f53\u3066\u306e\u306a\u3044\u7b87\u6240\u306b\u7269\u7406\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u308b\n(2)\u65e2\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u7269\u7406\u30da\u30fc\u30b8\u306e\u5c5e\u6027\u3092\u5909\u3048\u308b\u7279\u6b8a\u30b1\u30fc\u30b9\npte_present()\u306fPTE\u304c\u672a\u4f7f\u7528\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u306e\u3067\u3001\u4e0a\u8a18if\u6587\u304c\u771f\u3067\u3042\u308c\u3070(1)\u306e\u30b1\u30fc\u30b9\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f(1)\u306e\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\nmm/memory.c\n    if (pte_none(entry)) {\n\n\npte_none()\u306f\u3001\u305d\u3082\u305d\u3082PTE\u306e\u30a8\u30f3\u30c8\u30ea\u304c0(Present Bit\u3060\u3051\u3067\u306a\u304f\u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30820)\u304b\u5224\u5b9a\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u4eca\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u308a\u5f53\u3066\u304c\u306a\u3044\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u3082\u305d\u3082\u4f55\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u5224\u5b9a\u3059\u308b\u306e\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u5224\u5b9a\u3092\u3059\u308b\u7406\u7531\u306e\u4e3b\u306a\u3068\u3053\u308d\u306f\u3001swap(\u7269\u7406RAM\u306e\u5272\u308a\u5f53\u3066\u306f\u306a\u3044\u304c\u3001\u8a72\u5f53\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306f\u4f7f\u308f\u308c\u3066\u3044\u308b)\u3067\u306a\u3044\u300c\u4e00\u822c\u7684\u306a\u300d\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u3079\u304d\u304b\u5224\u65ad\u3059\u308b\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nmm/memory.c\n      if (vma->vm_ops) {\n        if (likely(vma->vm_ops->fault))\n          return do_linear_fault(mm, vma, address,\n            pte, pmd, flags, entry);\n      }\n      return do_anonymous_page(mm, vma, address,\n             pte, pmd, flags);\n\n\nAnnoymous Memory\u306b\u3064\u3044\u3066\u306f\u300ccgroups\u3068\u30e1\u30e2\u30ea\u8cc7\u6e90\u3068\u95a2\u4fc2\u3092\u52c9\u5f37\u3059\u308b\u524d\u306b\u3001Linux\u306e\u4eee\u60f3\u8a18\u61b6\u5468\u308a\u3092\u8aad\u3080...\u300d\u3092\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306e\u3042\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5272\u308a\u5f53\u3066\u3084\u30da\u30fc\u30b8\u30e3\u306b\u3064\u3044\u3066\u306f\u3001\u300cLinux\u306emmap()\u3092\u901a\u3057\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6271\u3044\u3092\u57a3\u9593\u898b\u308b\u300d\u306e\u8aac\u660e\u3092\u53c2\u7167\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\nmm/memory.c\n    }\n    if (pte_file(entry))\n      return do_nonlinear_fault(mm, vma, address,\n          pte, pmd, flags, entry);\n    return do_swap_page(mm, vma, address,\n          pte, pmd, flags, entry);\n  }\n\n\n\u4ee5\u964d\u306f\u3001(2)\u306e\u30b1\u30fc\u30b9\u3067\u65e2\u306b\u5b58\u5728\u3059\u308b\u7269\u7406\u30da\u30fc\u30b8\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u306a\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u4eca\u56de\u306f\u3053\u3053\u3067\u7de0\u3081\u3066\u3001\u6b21\u56de\u306f(2)\u306e\u30b1\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u306e\u5f8c\u306f\u5404\u95a2\u6570\u3092\u500b\u5225\u306b\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\nAppendix\n\ncgoups\u306e\u95a2\u6570\u3092\u5c11\u3057\u3060\u3051\u8997\u304f\n\u3044\u3064\u3082\u306e\u60aa\u3044\u7656\u3067\u3059\u3002\u307e\u305f\u5bc4\u308a\u9053\u3057\u307e\u3059\u3002\n\ninclude/linux/memcontrol.h\nstatic inline void mem_cgroup_oom_enable(void)\n{\n  WARN_ON(current->memcg_oom.may_oom);\n  current->memcg_oom.may_oom = 1;\n}\n\nstatic inline void mem_cgroup_oom_disable(void)\n{\n  WARN_ON(!current->memcg_oom.may_oom);\n  current->memcg_oom.may_oom = 0;\n}\n\n\n\nmm/memcontrol.c\nstatic void mem_cgroup_oom(struct mem_cgroup *memcg, gfp_t mask, int order)\n{\n  if (!current->memcg_oom.may_oom)\n    return;\n\n\n\u8981\u3059\u308b\u306b\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\u3060\u3051\u3067\u3059\u3002\u3056\u3063\u3068\u306f\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u304c\u3001OOM\u304c\u304b\u3089\u307f\u305d\u3046\u306a\u306e\u3067\u3001OOM\u306e\u3068\u3053\u308d\u3092\u5225\u9014\u8aad\u3080\u3068\u304d\u306b\u3067\u3082\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n## \u524d\u56de\n\u3069\u3046\u3082\u3067\u3059\u3002@akachochin\u3067\u3059\u3002\u98f2\u3093\u3060\u308a\u3057\u3066\u7de9\u304f\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u304a\u5143\u6c17\u3067\u3059\u304b\uff1f\n\u6587\u66f8\u66f8\u304d\u306a\u304c\u3089\u3068\u3044\u3046\u3053\u3068\u3068\u3001\u4ed6\u306b\u3082\u8ffd\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308a\u3001\u6700\u8fd1\u5c11\u3057\u6642\u9593\u304c\u3068\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3051\u308c\u3069\u3001\u9045\u3005\u3067\u3082\u7d9a\u3051\u3066\u884c\u304d\u307e\u3059\u3002\n\n(\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u8aad\u3080\u306e\u306f\u3001\u7d50\u69cb\u304a\u3082\u3057\u308d\u3044\u3067\u3059\u3088\u3002\u30ab\u30fc\u30cd\u30eb\u521d\u5fc3\u8005\u306f\u3001\u307e\u305a\u6c17\u306b\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3001\u7c21\u5358\u305d\u3046\u304b\u306a\u3001\u3068\u601d\u3063\u305f\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u5c11\u3057\u305a\u3064\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\u3042\u3068\u3001Linux\u3060\u3068\u66f8\u7c4d\u3082\u7d50\u69cb\u51fa\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u53c2\u8003\u306b\u3057\u3066\u8aad\u307f\u9032\u3081\u3066\u3082\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n\n[\u524d\u56de](http://qiita.com/akachochin/items/396f88c65fd81be1333a)\u306f\u3001handle_mm_fault()\u306e\u3068\u3053\u308d\u307e\u3067\u8aad\u307f\u307e\u3057\u305f\u3002\n\u304b\u306a\u308a\u9593\u304c\u958b\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3056\u3063\u304f\u308a\u3068\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u5bfe\u8c61\u3068\u306a\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n\u5c11\u3057\u53e4\u3044\u3067\u3059\u304c\u30013.15.6\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002\n\u7406\u7531\u306f\u624b\u5143\u306b\u3042\u3063\u305f\u306e\u304c\u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3060\u3051\u3067\u3059\u3002\u9aa8\u683c\u306f\u6050\u3089\u304f\u5909\u308f\u3089\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001cgroups\u306b\u95a2\u3057\u3066\u306f\u3069\u3046\u306a\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3072\u3068\u901a\u308a\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3060\u3089\u3001\u65b0\u3057\u3044cgroup\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u898b\u308b\u306e\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## handle_mm_fault()\u3092\u8aad\u3080\n\n```c:mm/memory.c\nint handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,\n        unsigned long address, unsigned int flags)\n{\n  int ret;\n\n  __set_current_state(TASK_RUNNING);\n\n```\n\n\u3053\u308c\u306f\u3001\u73fe\u5728\u306e\u30bf\u30b9\u30af(\u30d7\u30ed\u30bb\u30b9)\u306e\u72b6\u614b\u3092TASK_RUNNING\u306b\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```c:include/linux/sched.h\n#define __set_current_state(state_value)      \\\n  do { current->state = (state_value); } while (0)\n```\n\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u8b0e\u3067\u3059\u3002\u4f55\u6545\u3063\u3066\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u30b3\u30fc\u30c9\u5b9f\u884c\u4e2d\u3067\u306a\u3044\u3068\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306f\u8d77\u304d\u5f97\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u3001\u3053\u306e\u3068\u304d\u306fTASK_RUNNING\u306a\u308f\u3051\u3067\u30fb\u30fb\u30fb\u3002\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u51e6\u7406\u3067\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u4e2d\u306b\u767a\u751f\u3057\u305fpage fault\u3067\u306f\u3053\u3053\u306b\u305f\u3069\u308a\u7740\u304b\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u306f\u8003\u3048\u3065\u3089\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nLinux\u3067\u306f\u4f55\u304b\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3068\u308a\u3042\u3048\u305a\u63aa\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u7d71\u8a08\u60c5\u5831\n\n\u3055\u3066\u3001\u6b21\u306f\u5404\u7a2e\u7d71\u8a08\u60c5\u5831\u306e\u66f4\u65b0\u3002\n\n```c:mm/memory.c\n  count_vm_event(PGFAULT);\n```\n\n\u307e\u305a\u306f\u3001count_vm_event()\u3002\n\n```c:include/linux/vmstat.h\n/*\n * Light weight per cpu counter implementation.\n *\n * Counters should only be incremented and no critical kernel component\n * should rely on the counter values.\n *\n * Counters are handled completely inline. On many platforms the code\n * generated will simply be the increment of a global address.\n */\n\nstruct vm_event_state {\n  unsigned long event[NR_VM_EVENT_ITEMS];\n};\n\nDECLARE_PER_CPU(struct vm_event_state, vm_event_states);\n\n/* \u7565 */\nstatic inline void count_vm_event(enum vm_event_item item)\n{\n  this_cpu_inc(vm_event_states.event[item]);\n}\n```\n\n\u30ab\u30fc\u30cd\u30eb\u5185\u3067\u4f7f\u308f\u308c\u308b\u7c21\u6613\u306a\u30a4\u30d9\u30f3\u30c8\u30ab\u30a6\u30f3\u30bf\u306e\u3088\u3046\u3067\u3059\u3002\u6b21\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:mm/memory.c\n  mem_cgroup_count_vm_event(mm, PGFAULT);\n\n```\n\ncgroup\u95a2\u4fc2\u306e\u3088\u3046\u3067\u3059\u3002\n\n## \u307e\u305f\u3082\u5bc4\u308a\u9053\u3002cgroup\u3092\u3061\u3087\u3063\u3068\u3060\u3051\n\ncgroup\u3068\u306f\u3001\n\n\u4eca\u56de\u51fa\u3066\u304d\u305fmem_cgroup_count_vm_event()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```c:include/linux/memcontrol.h\nstatic inline void mem_cgroup_count_vm_event(struct mm_struct *mm,\n               enum vm_event_item idx)\n{\n  if (mem_cgroup_disabled())\n    return;\n  __mem_cgroup_count_vm_event(mm, idx);\n}\n```\n\n```c:mm/memcontrol.c\nvoid __mem_cgroup_count_vm_event(struct mm_struct *mm, enum vm_event_item idx)\n{   \n  struct mem_cgroup *memcg;\n\n  rcu_read_lock();\n  memcg = mem_cgroup_from_task(rcu_dereference(mm->owner));\n  if (unlikely(!memcg))\n    goto out;\n\n  switch (idx) {\n  case PGFAULT:\n    this_cpu_inc(memcg->stat->events[MEM_CGROUP_EVENTS_PGFAULT]);\n    break;\n  case PGMAJFAULT:\n    this_cpu_inc(memcg->stat->events[MEM_CGROUP_EVENTS_PGMAJFAULT]);\n    break;\n  default:\n    BUG();\n  }\nout:\n  rcu_read_unlock();\n}\n```\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001mem_cgroup\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u3066\u3001\u4e2d\u306e\u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3053\u3068\u3060\u3051\u3002\u6975\u3081\u3066\u5358\u7d14\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u5148\u306b\u9032\u307f\u307e\u3059\u3002\n\n\n```c:mm/memory.c\n  /*\n   * Enable the memcg OOM handling for faults triggered in user\n   * space.  Kernel faults are handled more gracefully.\n   */\n  if (flags & FAULT_FLAG_USER)\n    mem_cgroup_oom_enable();\n\n  ret = __handle_mm_fault(mm, vma, address, flags);\n\n  if (flags & FAULT_FLAG_USER) {\n    mem_cgroup_oom_disable();\n                /*\n                 * The task may have entered a memcg OOM situation but\n                 * if the allocation error was handled gracefully (no\n                 * VM_FAULT_OOM), there is no need to kill anything.\n                 * Just clean up the OOM state peacefully.\n                 */\n                if (task_in_memcg_oom(current) && !(ret & VM_FAULT_OOM))\n                        mem_cgroup_oom_synchronize(false);\n  }\n\n  return ret;\n}\n```\n\n## \u3044\u3088\u3044\u3088\\_\\_handle_mm_fault()\n\n```c:mm/memory.c\n/*\n * By the time we get here, we already hold the mm semaphore\n */\nstatic int __handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,\n           unsigned long address, unsigned int flags)\n{\n  pgd_t *pgd;\n  pud_t *pud;\n  pmd_t *pmd;\n  pte_t *pte;\n\n  /* \u4eca\u56de\u3001HUGE TLB\u306f\u98db\u3070\u3057\u307e\u3059\u3002\u3044\u3064\u304b\u3084\u308a\u307e\u3059\u3002 */\n  if (unlikely(is_vm_hugetlb_page(vma)))\n    return hugetlb_fault(mm, vma, address, flags);\n```\n\n```c:mm/memory.c\n  pgd = pgd_offset(mm, address);\n  pud = pud_alloc(mm, pgd, address);\n  if (!pud)\n    return VM_FAULT_OOM;\n  pmd = pmd_alloc(mm, pud, address);\n  if (!pmd)\n    return VM_FAULT_OOM;\n```\n\n[\u300cLinux\u306e\u4eee\u60f3 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e\u6982\u8981(\u305d\u306e2)\u300d](http://qiita.com/akachochin/items/3a6fd959a84d113f6f15)\u3067PUD\u306a\u3069\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u6982\u8981\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7e70\u308a\u8fd4\u3057\u8aac\u660e\u3057\u307e\u305b\u3093\u3002\n\np[u|m]d_alloc()\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u306b\u3082\u8a72\u5f53\u3057\u306a\u3044\u5834\u5408\u3001NULL\u3092\u8fd4\u3059\u30de\u30af\u30ed\u3067\u3059\u3002\n(1)\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\n(2)(1)\u3067\u300c\u5b58\u5728\u3057\u306a\u3044\u300d\u5834\u5408\u3001\u65b0\u305f\u306a\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u304c\u3001\u3053\u308c\u306b\u5931\u6557\u3057\u305f\n\n\n```c:mm/memory.c\n\n  if (pmd_none(*pmd) && transparent_hugepage_enabled(vma)) {\n    int ret = VM_FAULT_FALLBACK;\n    if (!vma->vm_ops)\n      ret = do_huge_pmd_anonymous_page(mm, vma, address,\n          pmd, flags);\n    if (!(ret & VM_FAULT_FALLBACK))\n      return ret;\n  } else {\n```\npmd_none()\u306f\u3001pmd\u306e\u30a8\u30f3\u30c8\u30ea\u304c0\u3001\u3064\u307e\u308aPresent Bit(PDE\u306e bit0)\u304c\u7acb\u3063\u3066\u304a\u3089\u305a(\u3053\u306ePMD\u306b\u3042\u305f\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u308a\u5f53\u3066\u304c\u306a\u3044)\u3001\u4ed6\u306e\u30a8\u30f3\u30c8\u30ea\u3082\u7a7a\u306a\u672a\u4f7f\u7528\u306apmd\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u6b21\u306e\u30de\u30af\u30ed\u306f\u3001Huge Page\u3092\u5272\u308a\u5f53\u3066\u3066\u826f\u3044\u30b1\u30fc\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\u3002\n\u53c2\u8003\u307e\u3067\u306b\u30de\u30af\u30ed\u5b9f\u88c5\u3092\u793a\u3057\u307e\u3059\u3002\n\n```c:include/linux/huge_mm.h\n#define transparent_hugepage_enabled(__vma)       \\   \n  ((transparent_hugepage_flags &          \\   \n    (1<<TRANSPARENT_HUGEPAGE_FLAG) ||       \\   \n    (transparent_hugepage_flags &         \\\\\n     (1<<TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG) &&     \\   \n     ((__vma)->vm_flags & VM_HUGEPAGE))) &&     \\   \n   !((__vma)->vm_flags & VM_NOHUGEPAGE) &&      \\   \n   !is_vma_temporary_stack(__vma))\n```\n\n## Huge Page\u3068\u306f\nHuge Page\u306f\u305d\u306e\u540d\u306e\u901a\u308a\u3001\u300c\u5927\u304d\u306a\u30da\u30fc\u30b8\u300d\u3067\u3059\u3002\n\u591a\u304f\u306eCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u306f\u3001\u6a19\u6e96\u7684\u306a\u30e1\u30e2\u30ea\u30da\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\u306f4KByte\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u305d\u308c\u3060\u3068\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u30e1\u30e2\u30ea\u3092\u30de\u30c3\u30d7\u3059\u308b\u3068\u304d\u306bTLB\u3092\u7121\u99c4\u9063\u3044\u3057\u305f\u308a\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30de\u30c3\u30d7\u66f8\u304d\u8fbc\u307f\u304c\u975e\u5e38\u306b\u9762\u5012\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u52b9\u3044\u3066\u304d\u307e\u3059\u3002\n4KByte\u306e\u30da\u30fc\u30b8\u3057\u304b\u8a31\u3055\u306a\u3044\u5834\u5408\u3001TLB\u306e1\u30a8\u30f3\u30c8\u30ea\u304c4kbyte\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u306e\u5909\u63db\u306b\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u3002\u6570MByte\u306e\u9023\u7d9a\u3057\u305f\u30e1\u30e2\u30ea\u7a7a\u9593\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u30014Kbyte\u3054\u3068\u306bTLB\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6d88\u8cbb\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u3082\u3046\u5c11\u3057\u5927\u304d\u306a\u7279\u4f8b\u7684\u306a\u30da\u30fc\u30b8\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u3046\u3044\u3046\u30da\u30fc\u30b8\u3092Huge Page\u3068\u304b\u8a00\u3063\u305f\u308a\u3057\u307e\u3059\u3002(\u3082\u3061\u308d\u3093CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3054\u3068\u306b\u7570\u306a\u308a\u307e\u3059\u3002\n\nIntel\u306e\u5834\u5408\u3001Intel SDM\u306eVol3. Chapter4\u306b\u3042\u308b\u3068\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\u306e\u30a8\u30f3\u30c8\u30ea\u306e\u8a2d\u5b9a\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n\n| Paging Mode | \u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30da\u30fc\u30b8\u30b5\u30a4\u30ba |\n|:-----|:----------------|\n| 32-bit | 4KB or 4MB |\n| PAE | 4KB or 2MB |\n| IA-32e | 4KB or 2MB or 1GB |\n\n\u4eca\u56de\u3001Huge Page\u304c\u3089\u307f\u306eif\u7bc0\u306e\u8aac\u660e\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u307e\u3059\u3002\n\u304a\u305d\u3089\u304f\u591a\u304f\u306e\u5834\u5408\u3001else\u5074\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n```c:mm/memory.c\n    pmd_t orig_pmd = *pmd;\n    int ret;\n\n    barrier();\n    if (pmd_trans_huge(orig_pmd)) {\n    /* \u5148\u306e\u7406\u7531\u306b\u3088\u308a\u3001Huge Page\u7cfb\u306f\u4eca\u56de\u7701\u304d\u307e\u3059\u3002*/\n    }\n  }\n\n  /*\n   * Use __pte_alloc instead of pte_alloc_map, because we can't\n   * run pte_offset_map on the pmd, if an huge pmd could\n   * materialize from under us from a different thread.\n   */\n  if (unlikely(pmd_none(*pmd)) &&\n      unlikely(__pte_alloc(mm, vma, pmd, address)))\n    return VM_FAULT_OOM;\n```\n\n\u3053\u3053\u306f\u30014KByte\u306e\u30ce\u30fc\u30de\u30eb\u306a\u30e1\u30e2\u30ea\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u308b\u306e\u3067\u3001pmd\u3060\u3051\u3067\u306a\u304fpte\u3082\u5fc5\u8981\u3067\u3059\u3002\n\n```c:mm/memory.c\n  /* Huge Page\u7cfb\u306e\u51e6\u7406\u306f\u7565 */\n\n  /*\n   * A regular pmd is established and it can't morph into a huge pmd\n   * from under us anymore at this point because we hold the mmap_sem\n   * read mode and khugepaged takes it in write mode. So now it's\n   * safe to run pte_offset_map().\n   */\n  pte = pte_offset_map(pmd, address);\n\n```\n\npte_offset_map()\u306f\u300cpmd\u306e\u8a18\u8ff0\u5185\u5bb9\u3068\u4eca\u56de\u306e\u30de\u30c3\u30d7\u5bfe\u8c61\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u3001\u4eca\u56de\u4f7f\u3046PTE\u30a8\u30f3\u30c8\u30ea\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u300d\u3067\u3059\u3002\n\u5b9f\u88c5\u3092\u78ba\u8a8d\u3055\u308c\u305f\u3044\u5834\u5408\u3001arch/x86/include/asm/pgtable_32.h\n\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```c:mm/memory.c\n  return handle_pte_fault(mm, vma, address, pte, pmd, flags);\n}\n```\n\n```c:mm/memory.c\nstatic int handle_pte_fault(struct mm_struct *mm,\n         struct vm_area_struct *vma, unsigned long address,\n         pte_t *pte, pmd_t *pmd, unsigned int flags)\n{\n  pte_t entry;\n  spinlock_t *ptl;\n\n  entry = *pte;\n  if (!pte_present(entry)) {\n```\n\n\u3053\u306e\u95a2\u6570\u306f\u5927\u304d\u304f\u5206\u3051\u308b\u3068\u3001\u4ee5\u4e0b2\u3064\u306e\u30b1\u30fc\u30b9\u3092\u634c\u304d\u307e\u3059\u3002\n(1)\u7269\u7406\u30da\u30fc\u30b8\u306e\u5272\u308a\u5f53\u3066\u306e\u306a\u3044\u7b87\u6240\u306b\u7269\u7406\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u308b\n(2)\u65e2\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u7269\u7406\u30da\u30fc\u30b8\u306e\u5c5e\u6027\u3092\u5909\u3048\u308b\u7279\u6b8a\u30b1\u30fc\u30b9\n\npte_present()\u306fPTE\u304c\u672a\u4f7f\u7528\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u306e\u3067\u3001\u4e0a\u8a18if\u6587\u304c\u771f\u3067\u3042\u308c\u3070(1)\u306e\u30b1\u30fc\u30b9\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f(1)\u306e\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\n```c:mm/memory.c\n    if (pte_none(entry)) {\n```\n\npte_none()\u306f\u3001\u305d\u3082\u305d\u3082PTE\u306e\u30a8\u30f3\u30c8\u30ea\u304c0(Present Bit\u3060\u3051\u3067\u306a\u304f\u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30820)\u304b\u5224\u5b9a\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u4eca\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u308a\u5f53\u3066\u304c\u306a\u3044\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u3082\u305d\u3082\u4f55\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u5224\u5b9a\u3059\u308b\u306e\u3067\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u5224\u5b9a\u3092\u3059\u308b\u7406\u7531\u306e\u4e3b\u306a\u3068\u3053\u308d\u306f\u3001swap(\u7269\u7406RAM\u306e\u5272\u308a\u5f53\u3066\u306f\u306a\u3044\u304c\u3001\u8a72\u5f53\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306f\u4f7f\u308f\u308c\u3066\u3044\u308b)\u3067\u306a\u3044\u300c\u4e00\u822c\u7684\u306a\u300d\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u3079\u304d\u304b\u5224\u65ad\u3059\u308b\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```c:mm/memory.c\n      if (vma->vm_ops) {\n        if (likely(vma->vm_ops->fault))\n          return do_linear_fault(mm, vma, address,\n            pte, pmd, flags, entry);\n      }\n      return do_anonymous_page(mm, vma, address,\n             pte, pmd, flags);\n```\n\nAnnoymous Memory\u306b\u3064\u3044\u3066\u306f[\u300ccgroups\u3068\u30e1\u30e2\u30ea\u8cc7\u6e90\u3068\u95a2\u4fc2\u3092\u52c9\u5f37\u3059\u308b\u524d\u306b\u3001Linux\u306e\u4eee\u60f3\u8a18\u61b6\u5468\u308a\u3092\u8aad\u3080...\u300d](http://qiita.com/akachochin/items/cbda5d83ec220295add5)\u3092\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306e\u3042\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5272\u308a\u5f53\u3066\u3084\u30da\u30fc\u30b8\u30e3\u306b\u3064\u3044\u3066\u306f\u3001[\u300cLinux\u306emmap()\u3092\u901a\u3057\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6271\u3044\u3092\u57a3\u9593\u898b\u308b\u300d](http://qiita.com/akachochin/items/259c865cf4ab1fcd11df)\u306e\u8aac\u660e\u3092\u53c2\u7167\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n```c:mm/memory.c\n    }\n    if (pte_file(entry))\n      return do_nonlinear_fault(mm, vma, address,\n          pte, pmd, flags, entry);\n    return do_swap_page(mm, vma, address,\n          pte, pmd, flags, entry);\n  }\n```\n\n\u4ee5\u964d\u306f\u3001(2)\u306e\u30b1\u30fc\u30b9\u3067\u65e2\u306b\u5b58\u5728\u3059\u308b\u7269\u7406\u30da\u30fc\u30b8\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u306a\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4eca\u56de\u306f\u3053\u3053\u3067\u7de0\u3081\u3066\u3001\u6b21\u56de\u306f(2)\u306e\u30b1\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u306e\u5f8c\u306f\u5404\u95a2\u6570\u3092\u500b\u5225\u306b\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\n## Appendix\n\n### cgoups\u306e\u95a2\u6570\u3092\u5c11\u3057\u3060\u3051\u8997\u304f\n\n\u3044\u3064\u3082\u306e\u60aa\u3044\u7656\u3067\u3059\u3002\u307e\u305f\u5bc4\u308a\u9053\u3057\u307e\u3059\u3002\n\n```c:include/linux/memcontrol.h\nstatic inline void mem_cgroup_oom_enable(void)\n{\n  WARN_ON(current->memcg_oom.may_oom);\n  current->memcg_oom.may_oom = 1;\n}\n\nstatic inline void mem_cgroup_oom_disable(void)\n{\n  WARN_ON(!current->memcg_oom.may_oom);\n  current->memcg_oom.may_oom = 0;\n}\n```\n\n```c:mm/memcontrol.c\nstatic void mem_cgroup_oom(struct mem_cgroup *memcg, gfp_t mask, int order)\n{\n  if (!current->memcg_oom.may_oom)\n    return;\n```\n\n\u8981\u3059\u308b\u306b\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\u3060\u3051\u3067\u3059\u3002\u3056\u3063\u3068\u306f\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u304c\u3001OOM\u304c\u304b\u3089\u307f\u305d\u3046\u306a\u306e\u3067\u3001OOM\u306e\u3068\u3053\u308d\u3092\u5225\u9014\u8aad\u3080\u3068\u304d\u306b\u3067\u3082\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Linux", "\u4eee\u60f3\u8a18\u61b6", "kernel", "kernelvm"]}