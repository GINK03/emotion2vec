{"context": "\n\n\u7a81\u7136\u306e\u30b3\u30b3\u30a2\n\u305f\u3051\u306e\u3053\u968a\u9577\u300c\u899a\u609f\u3057\u308d\uff01 \u6a29\u9020\u3055\u3093\u306e\u5005\u3088\uff01\u300d\n\u5de6\u300c\u3046\u308f\u3042\u3042\u3042\uff01\u300d\n\u6050\u308d\u3057\u3044\u95d8\u6c17\u3092\u8eab\u306b\u307e\u3068\u3063\u305f\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u3001\u4eca\u3082\u8170\u304c\u629c\u3051\u3066\u3057\u307e\u3063\u3066\u52d5\u3051\u306a\u3044\u5de6\u5229\u304d\u306b\u5411\u304b\u3063\u3066\u5bb9\u8d66\u306a\u304f\u7a81\u6483\u3057\u3066\u3044\u304f\u3002\n\u5de6\u5229\u304d\u306f\u3001\u3042\u307e\u308a\u306e\u6050\u6016\u306b\u610f\u8b58\u3092\u5931\u3044\u304b\u3051\u3066\u3044\u305f\u3002\n\u5de6\uff08\u89aa\u7236\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u601d\u3057\u304d\u3001\u3088\u304f\u308f\u304b\u3089\u3093\u4eba\u306e\u8a71\u3092\u307e\u3063\u305f\u304f\u805e\u304b\u306a\u3044\u8ecd\u4eba\u306b\u3001\u4ffa\u306f\u6bba\u3055\u308c\u308b\u306e\u304b\u2026\u2026\uff09\n\u6d88\u3048\u3066\u3057\u307e\u3044\u305d\u3046\u306b\u306a\u308b\u610f\u8b58\u306e\u7247\u9685\u306b\u3001\u307e\u308b\u3067\u8d70\u99ac\u706f\u306e\u3088\u3046\u306b\u5e7c\u3044\u9803\u306e\u601d\u3044\u51fa\u304c\u8607\u3063\u3066\u304f\u308b\u3002\n\u3068\u3066\u3082\u3064\u3089\u3044\u3053\u3068\u3060\u304c\u3001\u305d\u306e\u307b\u3068\u3093\u3069\u306f\u3001\u60b2\u3057\u3044\u3060\u3051\u306e\u601d\u3044\u51fa\u3060\u3002\n\u5de6\uff08\u82f1\u96c4\u306e\u606f\u5b50\u3068\u3057\u3066\u751f\u307e\u308c\u3001\u751f\u304d\u3066\u304d\u305f\u2026\u2026\u8003\u3048\u3066\u307f\u308c\u3070\u3001\u89aa\u7236\u304c\u4e0b\u624b\u306b\u6709\u540d\u4eba\u3060\u3063\u305f\u304c\u305f\u3081\u306b\u3001\u308d\u304f\u306a\u304d\u306e\u3053\u751f\uff08\u4eba\u751f\uff09\u3058\u3083\u306a\u304b\u3063\u305f\u305c\u2026\u2026\uff09\n\u512a\u79c0\u306a\u7236\u89aa\u3068\u6bd4\u8f03\u3055\u308c\u308b\u3001\u4e8c\u4e16\u304d\u306e\u3053\u306e\u60b2\u3057\u3055\u2026\u2026\n\u305d\u3057\u3066\u6301\u3063\u3066\u751f\u307e\u308c\u305f\u6b6a\u306a\u5de6\u5229\u304d\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u2026\u2026\n\u5de6\u5229\u304d\u306f\u3001\u8a71\u3082\u3088\u304f\u98f2\u307f\u8fbc\u3081\u306a\u3044\u307e\u307e\u3001\u305d\u306e\u77ed\u3044\u751f\u6daf\u306e\u7d42\u308f\u308a\u3092\u611f\u3058\u3066\u3044\u305f\u3002\n\u3057\u304b\u3057\u305d\u306e\u3068\u304d\u3001\u5de6\u5229\u304d\u306e\u3053\u3053\u308d\u306e\u306a\u304b\u306b\u3001\u8ab0\u304b\u306e\u56c1\u304f\u3088\u3046\u306a\u58f0\u304c\u805e\u3053\u3048\u3066\u304d\u305f\u306e\u3060\u3002\n\uff1f\uff1f\uff1f\u300c\u30c1\u30ab\u30e9\u304c\u2026\u2026\u6b32\u3057\u3044\u304b\u2026\u2026\u300d\n\u5de6\u300c\u30c3\u30c3\u30c3\u30c3\u30c3\uff01\uff1f\uff01\uff1f\uff01\uff1f\uff1f\uff01\uff1f\u300d\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n    float dist;\n    vec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat rnd(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n    vec2 v = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n    float r = mix(\n        mix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n        mix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n        u.y\n    );\n    return r * r;\n}\nfloat snoise(vec2 p){\n    float n = 0.0;\n    for(float i = 0.0; i < 6.0; ++i){\n        float v = pow(2.0, 2.0 + i);\n        float w = pow(2.0, -1.0 - i);\n        n += noise(p * v) * w;\n    }\n    return n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n    return snoise(vec2(p.x,    p.y    )) *      q.x  *      q.y  +\n           snoise(vec2(p.x,    p.y + r.y)) *        q.x  * (1.0 - q.y) +\n           snoise(vec2(p.x + r.x, p.y     )) * (1.0 - q.x) *        q.y  +\n           snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat smoothMin(float d1, float d2, float k){\n    float h = exp(-k * d1) + exp(-k * d2);\n    return -log(h) / k;\n}\nfloat dChoco(vec3 p){\n    float rad = time * 0.2;\n    mat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n    vec3 q = m * (p + vec3(0.0, -0.55, 0.0)) * vec3(1.0, 1.2, 1.0);\n    float len = sin(atan(q.z, q.x) * 7.0) * 0.01 * PI;\n    return length(q) - 1.0 + len + step(p.y, -0.4) + pow(p.y, 1.0);\n}\nfloat dCylinder(vec3 p, vec2 r){\n    float rad = time * 0.2;\n    mat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n    float s = -cos(p.y * 2.0) * 0.1 - 0.05;\n    float l = length(p + vec3(0.0, 1.25, 0.0)) - 0.4;\n    vec3 q = m * p + vec3(s, 0.5, 0.0);\n    vec2 d = abs(vec2(length(q.xz), q.y)) - r;\n    return smoothMin(min(max(d.x, d.y), 0.0), l, 32.0) + length(max(d, 0.0)) - 0.2;\n}\nIntersect distanceHub(vec3 p){\n    float choco = dChoco(p);\n    float cylin = dCylinder(p, vec2(0.1, 0.9));\n    Intersect i;\n    i.dist = min(choco, cylin);\n    i.color = choco < cylin ? cColor : kColor;\n    return i;\n}\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n        distanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n        distanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 cPos = vec3(0.0,  0.0,  3.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    float dist = 0.0;\n    float rLen = 0.0;\n    vec3  rPos = cPos;\n    Intersect intersect;\n    for(int i = 0; i < 256; ++i){\n        intersect = distanceHub(rPos);\n        rLen += intersect.dist * 0.5;\n        rPos = cPos + ray * rLen;\n    }\n\n    float tk = min(time * 0.2, 1.0);\n    float tf = min((time - 4.0) * 0.2, 1.0);\n    if(abs(intersect.dist) < 0.001){\n        float fog = smoothstep(0.0, 15.0, length(rPos - cPos));\n        vec3  normal = genNormal(rPos);\n        vec3  light = normalize(vec3(mouse + 2.0, 3.0));\n        float diff = max(dot(normal, light), 0.1);\n        vec3  eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = clamp(dot(eye, light), 0.0, 1.0);\n        vec3 specColor = pow(speculer, 20.0) + cColor;\n        gl_FragColor = vec4(vec3(diff) * intersect.color * tk - fog + specColor, 1.0);\n    }else{\n        float f = pow((0.5 + tf * 0.5) / length(p), 3.0);\n        float map = 2.0;\n        vec2 c = vec2((atan(p.y, p.x) + PI) / PI2 * 2.0, mod(length(p) * 0.25 - time, map));\n        float n = seamless(c, c / map, vec2(map));\n        gl_FragColor = vec4(vec3(0.1, 0.3, 1.0) * n * f, 1.0);\n    }\n}\n\n\uff08GLSL Editor \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n\u5de6\u300c\u3046\u304a\u304a\u304a\u304a\u3063\uff01\uff01\uff01\u300d\n\u5de6\u5229\u304d\u304c\u6b7b\u3092\u899a\u609f\u3057\u305f\u305d\u306e\u3068\u304d\u3001\u5f7c\u306e\u3053\u3053\u308d\u306e\u306a\u304b\u3067\u4f55\u304b\u304c\u5f3e\u3051\u305f\uff01\n\uff1f\uff1f\uff1f\u300c\u30c1\u30ab\u30e9\u304c\u6b32\u3057\u3044\u304b\u2026\u2026\uff01\uff01\u300d\n\u968a\u9577\u300c\u306a\uff01 \u306a\u3093\u3060\u3068\uff01\uff01\uff01\u300d\n\u7a81\u5982\u3001\u5de6\u5229\u304d\u306e\u5168\u8eab\u306b\u30c1\u30ab\u30e9\u304c\u6f32\u308a\u3001\u9752\u304d\u708e\u304c\u71c3\u3048\u4e0a\u304c\u3063\u305f\u3002\n\u305d\u306e\u30c1\u30ab\u30e9\u304c\u3069\u3053\u304b\u3089\u6e67\u3044\u3066\u304d\u305f\u306e\u304b\u3001\u5de6\u5229\u304d\u81ea\u8eab\u306b\u3055\u3048\u3082\u308f\u304b\u3089\u306a\u3044\u3002\u3060\u304c\u3053\u306e\u30c1\u30ab\u30e9\u306f\u2026\u2026\u3044\u3084\u3001\u3053\u306e\u30c1\u30ab\u30e9\u304c\u3042\u308c\u3070\u3001\u4ffa\u3082\u89aa\u7236\u306e\u3088\u3046\u306b\u6226\u3048\u308b\uff01\u3000\u751f\u307e\u308c\u3066\u3053\u306e\u65b9\u3001\u8ab0\u306b\u3082\u8a8d\u3081\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u751f\u304d\u3066\u304d\u305f\u5de6\u5229\u304d\u306e\u3001\u8511\u307e\u308c\u7d9a\u3051\u3066\u304d\u305f\u305d\u306e\u304d\u306e\u3053\u751f\u306e\u6700\u5f8c\u306e\u8f1d\u304d\u306a\u306e\u3060\u308d\u3046\u304b\u3002\n\u5de6\u5229\u304d\u306f\u4eca\u3001\u8b0e\u306e\u30c1\u30ab\u30e9\u306b\u76ee\u899a\u3081\u305f\u306e\u3060\u3063\u305f\u3002\n\u5de6\u300c\u968a\u9577\u3055\u3093\u3088\u2026\u2026\u89aa\u7236\u3068\u3069\u3093\u306a\u7e01\u304c\u3042\u308b\u3093\u3060\u304b\u77e5\u3089\u306d\u3048\u304c\u3001\u305d\u306e\u606f\u5b50\u3092\u305f\u3051\u306e\u3053\u30c9\u30ea\u30eb\u30d6\u30ec\u30a4\u30af\u3067\u8cab\u3053\u3046\u3068\u3057\u305f\u3053\u3068\u3001\u5f8c\u6094\u3055\u305b\u3066\u3084\u308b\u305c\uff01\u300d\n\u5de6\u5229\u304d\u306f\u3001\u660e\u3089\u304b\u306b\u821e\u3044\u4e0a\u304c\u3063\u3066\u3044\u305f\u3002\n\u305d\u306e\u81ed\u3059\u304e\u308b\u30bb\u30ea\u30d5\u306f\u3001\u66f8\u3044\u3066\u3044\u308b\u3053\u3061\u3089\u304c\u6065\u305a\u304b\u3057\u304f\u306a\u308b\u307b\u3069\u3060\u3002\n\u968a\u9577\u300c\u30af\u30bd\uff01 \u306a\u3093\u3060\u304b\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u3001\u3068\u306b\u304b\u304f\u304a\u524d\u306f\u3084\u306f\u308a\u5371\u967a\u3060\u3002\u3053\u306e\u5834\u3067\u6392\u9664\u3059\u308b\u300d\n\u5de6\u300c\u8b0e\u306e\u30c1\u30ab\u30e9\u3092\u624b\u306b\u3057\u305f\u4ffa\u306b\u52dd\u3066\u308b\u3068\u601d\u3046\u304b\uff01 \u3042\u3063\u305f\u304b\u30b3\u30b3\u30a2\u306b\u3057\u3066\u3084\u3093\u3088\uff01\u300d\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n    float dist;\n    vec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.7, 0.4, 0.2);\nconst vec3 kColor = vec3(0.9, 0.9, 0.9);\n\nfloat rnd(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n    vec2 v = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n    float r = mix(\n        mix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n        mix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n        u.y\n    );\n    return r * r;\n}\nfloat snoise(vec2 p){\n    float n = 0.0;\n    for(float i = 0.0; i < 6.0; ++i){\n        float v = pow(2.0, 2.0 + i);\n        float w = pow(2.0, -1.0 - i);\n        n += noise(p * v) * w;\n    }\n    return n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n    return snoise(vec2(p.x,    p.y    )) *      q.x  *      q.y  +\n           snoise(vec2(p.x,    p.y + r.y)) *        q.x  * (1.0 - q.y) +\n           snoise(vec2(p.x + r.x, p.y     )) * (1.0 - q.x) *        q.y  +\n           snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat smoothMin(float d1, float d2, float k){\n    float h = exp(-k * d1) + exp(-k * d2);\n    return -log(h) / k;\n}\nfloat dChoco(vec3 p, vec2 r){\n    float f = sin(length((p.xz + vec2(0.5, -0.5)) * 10.0) - time * 3.0) * 0.025;\n    vec2 d = abs(vec2(length(p.xz), p.y - f)) - r;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\nfloat dCylinder(vec3 p, vec2 r){\n    vec2 d = abs(vec2(length(p.xz), p.y)) - r;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.1;\n}\nfloat dTorus(vec3 p){\n    vec3 q = p * vec3(1.75, 1.25, 1.0) + vec3(-1.45, 0.0, 0.0);\n    vec2 t = vec2(0.5, 0.1);\n    vec2 r = vec2(length(q.xy) - t.x, q.z);\n    return length(r) - t.y;\n}\nIntersect distanceHub(vec3 p){\n    float choco = dChoco(p, vec2(0.5, 0.4));\n    float cylin = dCylinder(p, vec2(0.6, 0.5));\n    float hole = dCylinder(p, vec2(0.5, 0.6));\n    float torus = dTorus(p);\n    Intersect i;\n    i.dist = min(torus, min(choco, max(cylin, -hole)));\n    i.color = choco < max(cylin, -hole) ? cColor : kColor;\n    return i;\n}\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n        distanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n        distanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 cPos = vec3(0.0,  1.5,  2.0);\n    vec3 cDir = vec3(0.0, -0.6, -0.8);\n    vec3 cUp  = vec3(0.0,  0.8, -0.6);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    float dist = 0.0;\n    float rLen = 0.0;\n    vec3  rPos = cPos;\n    Intersect intersect;\n    for(int i = 0; i < 256; ++i){\n        intersect = distanceHub(rPos);\n        rLen += intersect.dist * 0.5;\n        rPos = cPos + ray * rLen;\n    }\n\n    float n = clamp(seamless(p - vec2(sin(time * 0.05), time * 0.2), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n    float m = clamp(seamless(p - vec2(sin(time * 0.2), time * 0.1), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n    float l = clamp(seamless(p - vec2(cos(time * 0.15), time * 0.15), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n    float c = max(cos(p.x * 3.0), 0.0);\n    float f = max(cos(p.x * 2.5) - (-(p.y - 0.5) * 1.5), 0.0);\n    float smoke = n * m * l * f * c * 0.35;\n    if(abs(intersect.dist) < 0.001){\n        float fog = smoothstep(0.0, 55.0, length(rPos - cPos));\n        vec3  normal = genNormal(rPos);\n        vec3  light = normalize(vec3(0.5, 2.0, 1.5));\n        float diff = max(dot(normal, light), 0.3);\n        vec3  eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = clamp(dot(eye, light), 0.0, 1.0);\n        speculer = pow(speculer, 20.0);\n        gl_FragColor = vec4(vec3(diff) * intersect.color - fog + speculer + smoke, 1.0);\n    }else{\n        gl_FragColor = vec4(vec3(smoke), 1.0);\n    }\n}\n\n\uff08GLSL Editor \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n\u7a81\u5982\u3001\u8b0e\u306e\u30c1\u30ab\u30e9\u306b\u76ee\u899a\u3081\u305f\u5de6\u5229\u304d\u2026\u2026\n\u305d\u3057\u3066\u5de6\u5229\u304d\u306e\u89aa\u7236\u3001\u3082\u306f\u3084\u305d\u306e\u5b58\u5728\u611f\u304c\u971e\u306e\u3088\u3046\u306b\u8584\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u6a29\u9020\u3055\u3093\u2026\u2026\u3068\u3001\u306a\u3093\u304b\u3057\u3089\u3093\u304c\u56e0\u7e01\u304c\u3042\u308a\u305d\u3046\u306a\u305f\u3051\u306e\u3053\u968a\u9577\u3002\n\u679c\u305f\u3057\u3066\u3075\u305f\u308a\u306e\u6226\u3044\u306f\u3069\u3093\u306a\u7d50\u672b\u3092\u8fce\u3048\u308b\u306e\u304b\uff01\n\u6b21\u56de\u3001\u7dca\u5f35\u306e\u6700\u7d42\u8a71\u3002\nto be continued!\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n## \u7a81\u7136\u306e\u30b3\u30b3\u30a2\n\n\u305f\u3051\u306e\u3053\u968a\u9577\u300c\u899a\u609f\u3057\u308d\uff01 \u6a29\u9020\u3055\u3093\u306e\u5005\u3088\uff01\u300d\n\n\u5de6\u300c\u3046\u308f\u3042\u3042\u3042\uff01\u300d\n\n\u6050\u308d\u3057\u3044\u95d8\u6c17\u3092\u8eab\u306b\u307e\u3068\u3063\u305f\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u3001\u4eca\u3082\u8170\u304c\u629c\u3051\u3066\u3057\u307e\u3063\u3066\u52d5\u3051\u306a\u3044\u5de6\u5229\u304d\u306b\u5411\u304b\u3063\u3066\u5bb9\u8d66\u306a\u304f\u7a81\u6483\u3057\u3066\u3044\u304f\u3002\n\n\u5de6\u5229\u304d\u306f\u3001\u3042\u307e\u308a\u306e\u6050\u6016\u306b\u610f\u8b58\u3092\u5931\u3044\u304b\u3051\u3066\u3044\u305f\u3002\n\n\u5de6\uff08\u89aa\u7236\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u601d\u3057\u304d\u3001\u3088\u304f\u308f\u304b\u3089\u3093\u4eba\u306e\u8a71\u3092\u307e\u3063\u305f\u304f\u805e\u304b\u306a\u3044\u8ecd\u4eba\u306b\u3001\u4ffa\u306f\u6bba\u3055\u308c\u308b\u306e\u304b\u2026\u2026\uff09\n\n\u6d88\u3048\u3066\u3057\u307e\u3044\u305d\u3046\u306b\u306a\u308b\u610f\u8b58\u306e\u7247\u9685\u306b\u3001\u307e\u308b\u3067\u8d70\u99ac\u706f\u306e\u3088\u3046\u306b\u5e7c\u3044\u9803\u306e\u601d\u3044\u51fa\u304c\u8607\u3063\u3066\u304f\u308b\u3002\n\n\u3068\u3066\u3082\u3064\u3089\u3044\u3053\u3068\u3060\u304c\u3001\u305d\u306e\u307b\u3068\u3093\u3069\u306f\u3001\u60b2\u3057\u3044\u3060\u3051\u306e\u601d\u3044\u51fa\u3060\u3002\n\n\u5de6\uff08\u82f1\u96c4\u306e\u606f\u5b50\u3068\u3057\u3066\u751f\u307e\u308c\u3001\u751f\u304d\u3066\u304d\u305f\u2026\u2026\u8003\u3048\u3066\u307f\u308c\u3070\u3001\u89aa\u7236\u304c\u4e0b\u624b\u306b\u6709\u540d\u4eba\u3060\u3063\u305f\u304c\u305f\u3081\u306b\u3001\u308d\u304f\u306a\u304d\u306e\u3053\u751f\uff08\u4eba\u751f\uff09\u3058\u3083\u306a\u304b\u3063\u305f\u305c\u2026\u2026\uff09\n\n\u512a\u79c0\u306a\u7236\u89aa\u3068\u6bd4\u8f03\u3055\u308c\u308b\u3001\u4e8c\u4e16\u304d\u306e\u3053\u306e\u60b2\u3057\u3055\u2026\u2026\n\n\u305d\u3057\u3066\u6301\u3063\u3066\u751f\u307e\u308c\u305f\u6b6a\u306a\u5de6\u5229\u304d\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u2026\u2026\n\n\u5de6\u5229\u304d\u306f\u3001\u8a71\u3082\u3088\u304f\u98f2\u307f\u8fbc\u3081\u306a\u3044\u307e\u307e\u3001\u305d\u306e\u77ed\u3044\u751f\u6daf\u306e\u7d42\u308f\u308a\u3092\u611f\u3058\u3066\u3044\u305f\u3002\n\n\u3057\u304b\u3057\u305d\u306e\u3068\u304d\u3001\u5de6\u5229\u304d\u306e\u3053\u3053\u308d\u306e\u306a\u304b\u306b\u3001\u8ab0\u304b\u306e\u56c1\u304f\u3088\u3046\u306a\u58f0\u304c\u805e\u3053\u3048\u3066\u304d\u305f\u306e\u3060\u3002\n\n\uff1f\uff1f\uff1f\u300c\u30c1\u30ab\u30e9\u304c\u2026\u2026\u6b32\u3057\u3044\u304b\u2026\u2026\u300d\n\n\u5de6\u300c\u30c3\u30c3\u30c3\u30c3\u30c3\uff01\uff1f\uff01\uff1f\uff01\uff1f\uff1f\uff01\uff1f\u300d\n\n```glsl\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n\tfloat dist;\n\tvec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat rnd(vec2 n) {\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 v = floor(p);\n\tvec2 u = fract(p);\n\tu = u * u * (3.0 - 2.0 * u);\n\tfloat r = mix(\n\t\tmix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n\t\tmix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n\t\tu.y\n\t);\n\treturn r * r;\n}\nfloat snoise(vec2 p){\n\tfloat n = 0.0;\n\tfor(float i = 0.0; i < 6.0; ++i){\n\t\tfloat v = pow(2.0, 2.0 + i);\n\t\tfloat w = pow(2.0, -1.0 - i);\n\t\tn += noise(p * v) * w;\n\t}\n\treturn n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n\treturn snoise(vec2(p.x,\t   p.y\t  )) *\t\tq.x  *\t\tq.y  +\n\t\t   snoise(vec2(p.x,\t   p.y + r.y)) *\t\tq.x  * (1.0 - q.y) +\n\t\t   snoise(vec2(p.x + r.x, p.y\t  )) * (1.0 - q.x) *\t\tq.y  +\n\t\t   snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat smoothMin(float d1, float d2, float k){\n\tfloat h = exp(-k * d1) + exp(-k * d2);\n\treturn -log(h) / k;\n}\nfloat dChoco(vec3 p){\n\tfloat rad = time * 0.2;\n\tmat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n\tvec3 q = m * (p + vec3(0.0, -0.55, 0.0)) * vec3(1.0, 1.2, 1.0);\n\tfloat len = sin(atan(q.z, q.x) * 7.0) * 0.01 * PI;\n\treturn length(q) - 1.0 + len + step(p.y, -0.4) + pow(p.y, 1.0);\n}\nfloat dCylinder(vec3 p, vec2 r){\n\tfloat rad = time * 0.2;\n\tmat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n\tfloat s = -cos(p.y * 2.0) * 0.1 - 0.05;\n\tfloat l = length(p + vec3(0.0, 1.25, 0.0)) - 0.4;\n\tvec3 q = m * p + vec3(s, 0.5, 0.0);\n\tvec2 d = abs(vec2(length(q.xz), q.y)) - r;\n\treturn smoothMin(min(max(d.x, d.y), 0.0), l, 32.0) + length(max(d, 0.0)) - 0.2;\n}\nIntersect distanceHub(vec3 p){\n\tfloat choco = dChoco(p);\n\tfloat cylin = dCylinder(p, vec2(0.1, 0.9));\n\tIntersect i;\n\ti.dist = min(choco, cylin);\n\ti.color = choco < cylin ? cColor : kColor;\n\treturn i;\n}\nvec3 genNormal(vec3 p){\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdistanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n\t));\n}\n\nvoid main(){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 cPos = vec3(0.0,  0.0,  3.0);\n\tvec3 cDir = vec3(0.0,  0.0, -1.0);\n\tvec3 cUp  = vec3(0.0,  1.0,  0.0);\n\tvec3 cSide = cross(cDir, cUp);\n\tfloat targetDepth = 1.0;\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\tfloat dist = 0.0;\n\tfloat rLen = 0.0;\n\tvec3  rPos = cPos;\n\tIntersect intersect;\n\tfor(int i = 0; i < 256; ++i){\n\t\tintersect = distanceHub(rPos);\n\t\trLen += intersect.dist * 0.5;\n\t\trPos = cPos + ray * rLen;\n\t}\n\n\tfloat tk = min(time * 0.2, 1.0);\n\tfloat tf = min((time - 4.0) * 0.2, 1.0);\n\tif(abs(intersect.dist) < 0.001){\n\t\tfloat fog = smoothstep(0.0, 15.0, length(rPos - cPos));\n\t\tvec3  normal = genNormal(rPos);\n\t\tvec3  light = normalize(vec3(mouse + 2.0, 3.0));\n\t\tfloat diff = max(dot(normal, light), 0.1);\n\t\tvec3  eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = clamp(dot(eye, light), 0.0, 1.0);\n\t\tvec3 specColor = pow(speculer, 20.0) + cColor;\n\t\tgl_FragColor = vec4(vec3(diff) * intersect.color * tk - fog + specColor, 1.0);\n\t}else{\n\t\tfloat f = pow((0.5 + tf * 0.5) / length(p), 3.0);\n\t\tfloat map = 2.0;\n\t\tvec2 c = vec2((atan(p.y, p.x) + PI) / PI2 * 2.0, mod(length(p) * 0.25 - time, map));\n\t\tfloat n = seamless(c, c / map, vec2(map));\n\t\tgl_FragColor = vec4(vec3(0.1, 0.3, 1.0) * n * f, 1.0);\n\t}\n}\n```\n\n\uff08[GLSL Editor](https://doxas.org/work/glsl_editor/) \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n![kinoco_02.jpg](https://qiita-image-store.s3.amazonaws.com/0/39638/a1a01115-ea9a-31e8-1756-d24ee94bcc02.jpeg)\n\n\u5de6\u300c\u3046\u304a\u304a\u304a\u304a\u3063\uff01\uff01\uff01\u300d\n\n\u5de6\u5229\u304d\u304c\u6b7b\u3092\u899a\u609f\u3057\u305f\u305d\u306e\u3068\u304d\u3001\u5f7c\u306e\u3053\u3053\u308d\u306e\u306a\u304b\u3067\u4f55\u304b\u304c\u5f3e\u3051\u305f\uff01\n\n\uff1f\uff1f\uff1f\u300c\u30c1\u30ab\u30e9\u304c\u6b32\u3057\u3044\u304b\u2026\u2026\uff01\uff01\u300d\n\n\u968a\u9577\u300c\u306a\uff01 \u306a\u3093\u3060\u3068\uff01\uff01\uff01\u300d\n\n\u7a81\u5982\u3001\u5de6\u5229\u304d\u306e\u5168\u8eab\u306b\u30c1\u30ab\u30e9\u304c\u6f32\u308a\u3001\u9752\u304d\u708e\u304c\u71c3\u3048\u4e0a\u304c\u3063\u305f\u3002\n\n\u305d\u306e\u30c1\u30ab\u30e9\u304c\u3069\u3053\u304b\u3089\u6e67\u3044\u3066\u304d\u305f\u306e\u304b\u3001\u5de6\u5229\u304d\u81ea\u8eab\u306b\u3055\u3048\u3082\u308f\u304b\u3089\u306a\u3044\u3002\u3060\u304c\u3053\u306e\u30c1\u30ab\u30e9\u306f\u2026\u2026\u3044\u3084\u3001\u3053\u306e\u30c1\u30ab\u30e9\u304c\u3042\u308c\u3070\u3001\u4ffa\u3082\u89aa\u7236\u306e\u3088\u3046\u306b\u6226\u3048\u308b\uff01\u3000\u751f\u307e\u308c\u3066\u3053\u306e\u65b9\u3001\u8ab0\u306b\u3082\u8a8d\u3081\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u751f\u304d\u3066\u304d\u305f\u5de6\u5229\u304d\u306e\u3001\u8511\u307e\u308c\u7d9a\u3051\u3066\u304d\u305f\u305d\u306e\u304d\u306e\u3053\u751f\u306e\u6700\u5f8c\u306e\u8f1d\u304d\u306a\u306e\u3060\u308d\u3046\u304b\u3002\n\n\u5de6\u5229\u304d\u306f\u4eca\u3001\u8b0e\u306e\u30c1\u30ab\u30e9\u306b\u76ee\u899a\u3081\u305f\u306e\u3060\u3063\u305f\u3002\n\n\u5de6\u300c\u968a\u9577\u3055\u3093\u3088\u2026\u2026\u89aa\u7236\u3068\u3069\u3093\u306a\u7e01\u304c\u3042\u308b\u3093\u3060\u304b\u77e5\u3089\u306d\u3048\u304c\u3001\u305d\u306e\u606f\u5b50\u3092\u305f\u3051\u306e\u3053\u30c9\u30ea\u30eb\u30d6\u30ec\u30a4\u30af\u3067\u8cab\u3053\u3046\u3068\u3057\u305f\u3053\u3068\u3001\u5f8c\u6094\u3055\u305b\u3066\u3084\u308b\u305c\uff01\u300d\n\n\u5de6\u5229\u304d\u306f\u3001\u660e\u3089\u304b\u306b\u821e\u3044\u4e0a\u304c\u3063\u3066\u3044\u305f\u3002\n\n\u305d\u306e\u81ed\u3059\u304e\u308b\u30bb\u30ea\u30d5\u306f\u3001\u66f8\u3044\u3066\u3044\u308b\u3053\u3061\u3089\u304c\u6065\u305a\u304b\u3057\u304f\u306a\u308b\u307b\u3069\u3060\u3002\n\n\u968a\u9577\u300c\u30af\u30bd\uff01 \u306a\u3093\u3060\u304b\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u3001\u3068\u306b\u304b\u304f\u304a\u524d\u306f\u3084\u306f\u308a\u5371\u967a\u3060\u3002\u3053\u306e\u5834\u3067\u6392\u9664\u3059\u308b\u300d\n\n\u5de6\u300c\u8b0e\u306e\u30c1\u30ab\u30e9\u3092\u624b\u306b\u3057\u305f\u4ffa\u306b\u52dd\u3066\u308b\u3068\u601d\u3046\u304b\uff01 \u3042\u3063\u305f\u304b\u30b3\u30b3\u30a2\u306b\u3057\u3066\u3084\u3093\u3088\uff01\u300d\n\n```glsl\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n\tfloat dist;\n\tvec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.7, 0.4, 0.2);\nconst vec3 kColor = vec3(0.9, 0.9, 0.9);\n\nfloat rnd(vec2 n) {\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 v = floor(p);\n\tvec2 u = fract(p);\n\tu = u * u * (3.0 - 2.0 * u);\n\tfloat r = mix(\n\t\tmix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n\t\tmix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n\t\tu.y\n\t);\n\treturn r * r;\n}\nfloat snoise(vec2 p){\n\tfloat n = 0.0;\n\tfor(float i = 0.0; i < 6.0; ++i){\n\t\tfloat v = pow(2.0, 2.0 + i);\n\t\tfloat w = pow(2.0, -1.0 - i);\n\t\tn += noise(p * v) * w;\n\t}\n\treturn n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n\treturn snoise(vec2(p.x,\t   p.y\t  )) *\t\tq.x  *\t\tq.y  +\n\t\t   snoise(vec2(p.x,\t   p.y + r.y)) *\t\tq.x  * (1.0 - q.y) +\n\t\t   snoise(vec2(p.x + r.x, p.y\t  )) * (1.0 - q.x) *\t\tq.y  +\n\t\t   snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat smoothMin(float d1, float d2, float k){\n\tfloat h = exp(-k * d1) + exp(-k * d2);\n\treturn -log(h) / k;\n}\nfloat dChoco(vec3 p, vec2 r){\n\tfloat f = sin(length((p.xz + vec2(0.5, -0.5)) * 10.0) - time * 3.0) * 0.025;\n\tvec2 d = abs(vec2(length(p.xz), p.y - f)) - r;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\nfloat dCylinder(vec3 p, vec2 r){\n\tvec2 d = abs(vec2(length(p.xz), p.y)) - r;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.1;\n}\nfloat dTorus(vec3 p){\n\tvec3 q = p * vec3(1.75, 1.25, 1.0) + vec3(-1.45, 0.0, 0.0);\n    vec2 t = vec2(0.5, 0.1);\n    vec2 r = vec2(length(q.xy) - t.x, q.z);\n    return length(r) - t.y;\n}\nIntersect distanceHub(vec3 p){\n\tfloat choco = dChoco(p, vec2(0.5, 0.4));\n\tfloat cylin = dCylinder(p, vec2(0.6, 0.5));\n\tfloat hole = dCylinder(p, vec2(0.5, 0.6));\n\tfloat torus = dTorus(p);\n\tIntersect i;\n\ti.dist = min(torus, min(choco, max(cylin, -hole)));\n\ti.color = choco < max(cylin, -hole) ? cColor : kColor;\n\treturn i;\n}\nvec3 genNormal(vec3 p){\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdistanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n\t));\n}\n\nvoid main(){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 cPos = vec3(0.0,  1.5,  2.0);\n\tvec3 cDir = vec3(0.0, -0.6, -0.8);\n\tvec3 cUp  = vec3(0.0,  0.8, -0.6);\n\tvec3 cSide = cross(cDir, cUp);\n\tfloat targetDepth = 1.0;\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\tfloat dist = 0.0;\n\tfloat rLen = 0.0;\n\tvec3  rPos = cPos;\n\tIntersect intersect;\n\tfor(int i = 0; i < 256; ++i){\n\t\tintersect = distanceHub(rPos);\n\t\trLen += intersect.dist * 0.5;\n\t\trPos = cPos + ray * rLen;\n\t}\n\n\tfloat n = clamp(seamless(p - vec2(sin(time * 0.05), time * 0.2), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n\tfloat m = clamp(seamless(p - vec2(sin(time * 0.2), time * 0.1), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n\tfloat l = clamp(seamless(p - vec2(cos(time * 0.15), time * 0.15), vec2(2.0), vec2(2.0)), 0.0, 1.0);\n\tfloat c = max(cos(p.x * 3.0), 0.0);\n    float f = max(cos(p.x * 2.5) - (-(p.y - 0.5) * 1.5), 0.0);\n\tfloat smoke = n * m * l * f * c * 0.35;\n\tif(abs(intersect.dist) < 0.001){\n\t\tfloat fog = smoothstep(0.0, 55.0, length(rPos - cPos));\n\t\tvec3  normal = genNormal(rPos);\n\t\tvec3  light = normalize(vec3(0.5, 2.0, 1.5));\n\t\tfloat diff = max(dot(normal, light), 0.3);\n\t\tvec3  eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = clamp(dot(eye, light), 0.0, 1.0);\n\t\tspeculer = pow(speculer, 20.0);\n\t\tgl_FragColor = vec4(vec3(diff) * intersect.color - fog + speculer + smoke, 1.0);\n\t}else{\n\t\tgl_FragColor = vec4(vec3(smoke), 1.0);\n\t}\n}\n```\n\n\uff08[GLSL Editor](https://doxas.org/work/glsl_editor/) \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n![cocoa.jpg](https://qiita-image-store.s3.amazonaws.com/0/39638/7ab856bc-9333-706a-f68c-3f65e458e461.jpeg)\n\n\u7a81\u5982\u3001\u8b0e\u306e\u30c1\u30ab\u30e9\u306b\u76ee\u899a\u3081\u305f\u5de6\u5229\u304d\u2026\u2026\n\n\u305d\u3057\u3066\u5de6\u5229\u304d\u306e\u89aa\u7236\u3001\u3082\u306f\u3084\u305d\u306e\u5b58\u5728\u611f\u304c\u971e\u306e\u3088\u3046\u306b\u8584\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u6a29\u9020\u3055\u3093\u2026\u2026\u3068\u3001\u306a\u3093\u304b\u3057\u3089\u3093\u304c\u56e0\u7e01\u304c\u3042\u308a\u305d\u3046\u306a\u305f\u3051\u306e\u3053\u968a\u9577\u3002\n\n\u679c\u305f\u3057\u3066\u3075\u305f\u308a\u306e\u6226\u3044\u306f\u3069\u3093\u306a\u7d50\u672b\u3092\u8fce\u3048\u308b\u306e\u304b\uff01\n\n\u6b21\u56de\u3001\u7dca\u5f35\u306e\u6700\u7d42\u8a71\u3002\n\nto be continued!\n\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n", "tags": ["WebGL", "GLSL"]}