{"tags": ["MSP430", "L6470"], "context": "\n\u52d5\u4f5c\u78ba\u8a8d\nMSP430F1232\n\n\n\uff2c\uff16\uff14\uff17\uff10\u4f7f\u7528\u3000\u30b9\u30c6\u30c3\u30d4\u30f3\u30b0\u30e2\u30fc\u30bf\u30fc\u30c9\u30e9\u30a4\u30d6\u30ad\u30c3\u30c8 @ \u79cb\u6708\n@\u30b9\u30c8\u30ed\u30d9\u30ea\u30fc\u30ea\u30ca\u30c3\u30af\u30b9\n\u53c2\u8003 http://blog.livedoor.jp/pata2make/archives/2013-03.html\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3002\n\nmain.c\n#include <msp430.h>\n\n/*\nTested for MSP430F1232\n*/\n\n#define BIT_CSB  (BIT0)\n#define BIT_MOSI (BIT1)\n#define BIT_MISO (BIT2)\n#define BIT_CLK  (BIT3)\n\n#define CMD_RUN_REVERSE  (0x50)\n#define CMD_RUN_NORMAL   (0x51)\n#define CMD_SOFT_STOP    (0xB8)\n\nstatic void delay()\n{\n    unsigned int i;\n//    i = 20000;                                // Delay\n    i = 2000;                                // Delay\n    do (i--);\n    while (i != 0);    \n}\n\nstatic void L6470_send(int cmd)\n{\n    delay();\n    while (!(IFG1 & UTXIFG0));\n    P3OUT &= ~BIT_CSB;\n    TXBUF0 = cmd;\n    delay();\n    P3OUT |= BIT_CSB;\n}                         \n\nvoid L6470_setup()\n{\n    //\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\n    L6470_send(0x00);\n    L6470_send(0x00);\n    L6470_send(0x00);\n    L6470_send(0x00);  \n    L6470_send(0xc0);\n\n    //\u6700\u5927\u56de\u8ee2\u30b9\u30d4\u30fc\u30c9\u8a2d\u5b9a\n    L6470_send(0x07);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0x20);//\u5024(10bit),\u30c7\u30d5\u30a9\u30eb\u30c80x41\n\n    //\u30e2\u30fc\u30bf\u505c\u6b62\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x09);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n\n    //\u30e2\u30fc\u30bf\u5b9a\u901f\u56de\u8ee2\u6642\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0a);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n\n    //\u52a0\u901f\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0b);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n\n    //\u6e1b\u901f\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0c);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n\n    //\u30d5\u30eb\u30b9\u30c6\u30c3\u30d7,\u30cf\u30fc\u30d5\u30b9\u30c6\u30c3\u30d7,1/4,1/8,\u2026,1/128\u30b9\u30c6\u30c3\u30d7\u306e\u8a2d\u5b9a\n    L6470_send(0x16);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0x00);//\u5024(8bit)    \n}\n\nint main(void)\n{\n    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT\n    P1OUT = 0x000;                            // Setup P1.0 for LED output\n    P1DIR |= 0x001;\n    P3SEL = ( BIT_MOSI | BIT_MISO | BIT_CLK );\n    P3OUT = BIT_CSB;\n    P3DIR = BIT_CSB;\n    U0CTL = CHAR + SYNC + MM + SWRST;         // 8-bit, SPI, Master\n    U0TCTL = CKPL + SSEL1 + STC;              // Polarity, SMCLK, 3-wire\n    U0BR0 = 0x002;                            // SPICLK = SMCLK/2\n    U0BR1 = 0x000;\n    U0MCTL = 0x000;\n    ME2 = USPIE0;                             // Module enable\n    U0CTL &= ~SWRST;                          // SPI enable\n    IE2 |= URXIE0;                            // Receive interrupt enable\n    __enable_interrupt();                     // Enable interrupts\n\n    P3OUT &= ~BIT_CSB;\n    P3OUT |= BIT_CSB;\n\n    L6470_setup();\n\n    for(int loop=0; loop<10; loop++) {\n        L6470_send(0x00);\n\n        L6470_send(CMD_RUN_NORMAL);\n        L6470_send(0x00);\n        L6470_send(0x20);\n        L6470_send(0x00);\n\n        for(int loop=0; loop<100; loop++) {\n            delay();\n        }\n        L6470_send(CMD_SOFT_STOP);\n    }\n    LPM0;\n}\n\n#pragma vector=USART0RX_VECTOR\n__interrupt void SPI0_rx (void)\n{\n\n}\n\n\n4\u5e74\u524d\u306b\u52d5\u4f5c\u3092\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u306f\u3001\u30d4\u30f3\u306e\u5272\u5f53\u9593\u9055\u3044\u3060\u3063\u305f\u3002\n\u5f53\u6642\u3001\u30aa\u30b7\u30ed\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u308c\u3070\u6c17\u3065\u3044\u305f\u3053\u3068\u3060\u304c\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u610f\u8b58\u304c\u306a\u304b\u3063\u305f\u3002\n\u540c\u6642\u306b\u6271\u3063\u3066\u3044\u305f\u5727\u529b\u30bb\u30f3\u30b5\u306e\u52d5\u4f5c\u306b\u5931\u6557\u3057\u3066\u3044\u305f\u306e\u3082\u540c\u3058\u8981\u56e0\u306e\u3088\u3046\u3060\u3002\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nMSP430F1232\n```\n\n[\uff2c\uff16\uff14\uff17\uff10\u4f7f\u7528\u3000\u30b9\u30c6\u30c3\u30d4\u30f3\u30b0\u30e2\u30fc\u30bf\u30fc\u30c9\u30e9\u30a4\u30d6\u30ad\u30c3\u30c8 @ \u79cb\u6708](http://akizukidenshi.com/catalog/g/gK-07024/)\n[@\u30b9\u30c8\u30ed\u30d9\u30ea\u30fc\u30ea\u30ca\u30c3\u30af\u30b9](https://strawberry-linux.com/pub/l6470-manual.pdf)\n\n\u53c2\u8003 http://blog.livedoor.jp/pata2make/archives/2013-03.html\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u3002\n\n```main.c\n#include <msp430.h>\n\n/*\nTested for MSP430F1232\n*/\n\n#define BIT_CSB  (BIT0)\n#define BIT_MOSI (BIT1)\n#define BIT_MISO (BIT2)\n#define BIT_CLK  (BIT3)\n\n#define CMD_RUN_REVERSE  (0x50)\n#define CMD_RUN_NORMAL   (0x51)\n#define CMD_SOFT_STOP    (0xB8)\n\nstatic void delay()\n{\n    unsigned int i;\n//    i = 20000;                                // Delay\n    i = 2000;                                // Delay\n    do (i--);\n    while (i != 0);    \n}\n\nstatic void L6470_send(int cmd)\n{\n    delay();\n    while (!(IFG1 & UTXIFG0));\n    P3OUT &= ~BIT_CSB;\n    TXBUF0 = cmd;\n    delay();\n    P3OUT |= BIT_CSB;\n}                         \n\nvoid L6470_setup()\n{\n    //\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\n    L6470_send(0x00);\n    L6470_send(0x00);\n    L6470_send(0x00);\n    L6470_send(0x00);  \n    L6470_send(0xc0);\n    \n    //\u6700\u5927\u56de\u8ee2\u30b9\u30d4\u30fc\u30c9\u8a2d\u5b9a\n    L6470_send(0x07);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0x20);//\u5024(10bit),\u30c7\u30d5\u30a9\u30eb\u30c80x41\n    \n    //\u30e2\u30fc\u30bf\u505c\u6b62\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x09);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n    \n    //\u30e2\u30fc\u30bf\u5b9a\u901f\u56de\u8ee2\u6642\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0a);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n    \n    //\u52a0\u901f\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0b);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n    \n    //\u6e1b\u901f\u4e2d\u306e\u96fb\u5727\u8a2d\u5b9a\n    L6470_send(0x0c);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0xFF);//\u5024(8bit),\u30c7\u30d5\u30a9\u30eb\u30c80x29\n    \n    //\u30d5\u30eb\u30b9\u30c6\u30c3\u30d7,\u30cf\u30fc\u30d5\u30b9\u30c6\u30c3\u30d7,1/4,1/8,\u2026,1/128\u30b9\u30c6\u30c3\u30d7\u306e\u8a2d\u5b9a\n    L6470_send(0x16);//\u30ec\u30b8\u30b9\u30bf\u30a2\u30c9\u30ec\u30b9\n    L6470_send(0x00);//\u5024(8bit)    \n}\n\nint main(void)\n{\n    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT\n    P1OUT = 0x000;                            // Setup P1.0 for LED output\n    P1DIR |= 0x001;\n    P3SEL = ( BIT_MOSI | BIT_MISO | BIT_CLK );\n    P3OUT = BIT_CSB;\n    P3DIR = BIT_CSB;\n    U0CTL = CHAR + SYNC + MM + SWRST;         // 8-bit, SPI, Master\n    U0TCTL = CKPL + SSEL1 + STC;              // Polarity, SMCLK, 3-wire\n    U0BR0 = 0x002;                            // SPICLK = SMCLK/2\n    U0BR1 = 0x000;\n    U0MCTL = 0x000;\n    ME2 = USPIE0;                             // Module enable\n    U0CTL &= ~SWRST;                          // SPI enable\n    IE2 |= URXIE0;                            // Receive interrupt enable\n    __enable_interrupt();                     // Enable interrupts\n    \n    P3OUT &= ~BIT_CSB;\n    P3OUT |= BIT_CSB;\n    \n    L6470_setup();\n          \n    for(int loop=0; loop<10; loop++) {\n        L6470_send(0x00);\n\n        L6470_send(CMD_RUN_NORMAL);\n        L6470_send(0x00);\n        L6470_send(0x20);\n        L6470_send(0x00);\n\n        for(int loop=0; loop<100; loop++) {\n            delay();\n        }\n        L6470_send(CMD_SOFT_STOP);\n    }\n    LPM0;\n}\n\n#pragma vector=USART0RX_VECTOR\n__interrupt void SPI0_rx (void)\n{\n    \n}\n```\n\n4\u5e74\u524d\u306b\u52d5\u4f5c\u3092\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u306f\u3001\u30d4\u30f3\u306e\u5272\u5f53\u9593\u9055\u3044\u3060\u3063\u305f\u3002\n\u5f53\u6642\u3001\u30aa\u30b7\u30ed\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u308c\u3070\u6c17\u3065\u3044\u305f\u3053\u3068\u3060\u304c\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u610f\u8b58\u304c\u306a\u304b\u3063\u305f\u3002\n\u540c\u6642\u306b\u6271\u3063\u3066\u3044\u305f\u5727\u529b\u30bb\u30f3\u30b5\u306e\u52d5\u4f5c\u306b\u5931\u6557\u3057\u3066\u3044\u305f\u306e\u3082\u540c\u3058\u8981\u56e0\u306e\u3088\u3046\u3060\u3002\n\n"}