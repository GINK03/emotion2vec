{"context": "\n\u672c\u8a18\u4e8b\u306fDeepLearning Advent Calendar 12\u67085\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u3067\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e00\u3064\u3067\u3042\u308bDyNet\u3092\u7c21\u5358\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u7c73\u30ab\u30fc\u30cd\u30ae\u30fc\u30e1\u30ed\u30f3\u5927\u5b66\u306e\u8a00\u8a9e\u6280\u8853\u7814\u7a76\u6240\u304c\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001\u5c11\u3057\u7e01\u304c\u3042\u3063\u3066\u81ea\u5206\u3082\u88cf\u3067\u958b\u767a\u306b\u53c2\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u56fd\u969b\u4f1a\u8b70\u3067\u3042\u308bEMNLP\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066\u3001\u3053\u3061\u3089\u3067\u3082\u5272\u3068\u4eba\u6c17\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u3002\nDyNet\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f:\n\nC++\u3068Python\u3067\u4f7f\u7528\u53ef\u80fd\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u304c\u53ef\u80fd\n\u30df\u30cb\u30d0\u30c3\u30c1\u306e\u96a0\u853d\n\n\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n2\u3064\u76ee\u306e\u7279\u5fb4\u3092\u6301\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306fPFN\u306eChainer\u306a\u3069\u3082\u6319\u3052\u3089\u308c\u3001\u4e3b\u306brecurrent/recursive neural network\u7cfb\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3068\u306a\u308b\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u7b49\u306e\u5206\u91ce\u3067\u529b\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\n3\u3064\u76ee\u306e\u7279\u5fb4\u306f\u304b\u306a\u308a\u5f37\u529b\u3067\u3001\u30e6\u30fc\u30b6\u304c\u6295\u3052\u305f\u30c7\u30fc\u30bf\u306b\u5fdc\u3058\u3066\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u3001\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3089\u30d0\u30c3\u30c1\u306e\u5927\u304d\u3055\u7b49\u3092\u81ea\u52d5\u7684\u306b\u5224\u5225\u3059\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3059\u308b\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u305d\u308c\u3092\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u8ad6\u6587\u306b\u66f8\u3044\u3066\u3042\u308b\u5f0f\u3092\u305d\u306e\u307e\u307e\u66f8\u3051\u3070\u3001\u57fa\u672c\u7684\u306b\u306f\u81ea\u52d5\u7684\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u5bfe\u5fdc\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n2016/12/29 \u8ffd\u8a18\uff1a\u73fe\u72b6\u306f\u5165\u529b\u90e8\u5206\u3060\u3051\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u4e0b\u8a18\u30b3\u30fc\u30c9\u53c2\u7167\uff09\n\u30e1\u30a4\u30f3\u306e\u5bfe\u5fdc\u8a00\u8a9e\u304cC++\u306a\u306e\u3067\u3001\u4f4e\u30ec\u30d9\u30eb\u306a\u9818\u57df\u3067\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9023\u643a\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u826f\u3044\u9078\u629e\u80a2\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002DyNet\u81ea\u4f53\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u9ad8\u5ea6\u306b\u62bd\u8c61\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u7bc9\u90e8\u5206\u306e\u898b\u901a\u3057\u306f\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u6bd4\u8f03\u3057\u3066\u3082\u905c\u8272\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6e08\u3093\u3067\u3044\u308b\u3082\u306e\u3068\u3057\u3066\u3001\u4ee5\u964d\u3067\u306fC++\u4e0a\u3067\u306eDyNet\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u521d\u671f\u5316\u30fb\u5f8c\u7247\u4ed8\u3051\nDyNet\u306f\u6700\u521d\u306b\u5185\u90e8\u3067\u6307\u5b9a\u3057\u305f\u91cf\u306e\u30e1\u30e2\u30ea\u3068\u30c7\u30d0\u30a4\u30b9\u3092\u78ba\u4fdd\u3057\u3001\u305d\u308c\u3092\u6700\u5f8c\u307e\u3067\u4f7f\u3044\u7d9a\u3051\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u6700\u521d\u306bdynet::initialize()\u3092\u547c\u3073\u51fa\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u521d\u671f\u5316\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f2\u7a2e\u985e\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u3064\u306fDynetParams\u69cb\u9020\u4f53\u306b\u5fc5\u8981\u306a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u6e21\u3059\u65b9\u6cd5\u3001\u3082\u3046\u4e00\u3064\u306fargc\u3068argv\u3092\u6e21\u3057\u3066\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092DyNet\u306b\u51e6\u7406\u3057\u3066\u3082\u3089\u3046\u65b9\u6cd5\u3067\u3059\u3002\u5f8c\u8005\u306f\u524d\u8005\u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u3067\u306f\u69cb\u9020\u4f53\u3067\u660e\u793a\u7684\u306b\u521d\u671f\u5316\u3059\u308b\u4f8b\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\n\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089dynet::cleanup()\u3092\u547c\u3073\u51fa\u3057\u3066\u5f8c\u7247\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u51e6\u7406\u306b\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u7b49\u306e\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u3001\u3053\u306e\u95a2\u6570\u306f\u547c\u3073\u51fa\u3059\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u81ea\u52d5\u7684\u306b\u5f8c\u7247\u4ed8\u3051\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n#include <vector>\n#include <dynet/init.h>\n\nint main(int argc, char *argv[]) {\n  dynet::DynetParams params;\n\n  // \u78ba\u4fdd\u3059\u308b\u30e1\u30e2\u30ea\u91cf\u30923\u3064\u6307\u5b9a\u3059\u308b(MB\u5358\u4f4d)\u3002\n  // \u305d\u308c\u305e\u308cforward-path, backward-path, \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u4f7f\u7528\u3059\u308b\u91cf\u3002\n  params.mem_descriptor = \"1024,1024,2048\";\n  // \u4e0b\u8a18\u306e\u3088\u3046\u306b1\u3064\u3060\u3051\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n  // \u305d\u306e\u5834\u5408\u306f\u5185\u90e8\u7684\u306b3\u7b49\u5206\u3057\u305f\u3082\u306e\u304c\u305d\u308c\u305e\u308c\u306b\u4f7f\u7528\u3055\u308c\u308b\u3002\n  //params.mem_descriptor = \"4096\";\n\n  params.random_seed = 0;           // \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u30020\u306a\u3089\u9069\u5f53\u306b\u521d\u671f\u5316\n  params.weight_decay = 0.0f;       // L2\u6b63\u5247\u5316\u306e\u5f37\u3055\n  params.shared_parameters = false; // \u30d1\u30e9\u30e1\u30fc\u30bf\u3092shared memory\u4e0a\u306b\u7f6e\u304f\u304b\u3069\u3046\u304b\n\n#if HAVE_CUDA\n  // \u4ee5\u4e0b\u306fCUDA\u306b\u95a2\u9023\u4ed8\u3051\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5834\u5408\u306e\u8a2d\u5b9a\u3002\n  // \u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u30e1\u30e2\u30ea\u306b\u4f59\u88d5\u304c\u3042\u308bGPU\u30921\u500b\u52dd\u624b\u306b\u9078\u3093\u3067\u4f7f\u3046\u3002\n  // \u8907\u6570GPU\u306b\u306f\u4eca\u306e\u3068\u3053\u308d\u672a\u5bfe\u5fdc\u3002\n  const unsigned MAX_GPUS = 1024; // \u9069\u5f53\u306b\u5927\u304d\u306a\u5024\u3002\u633f\u3055\u3063\u3066\u3044\u308bGPU\u306e\u679a\u6570\u4ee5\u4e0a\u306b\u3059\u308c\u3070\u3088\u3044\u3002\n  params.ngpus_requested = false;\n  params.ids_requested = false;\n  params.requested_gpus = -1;\n  params.gpus_mask = std::vector<int>(MAX_GPUS, 0);\n#endif\n\n  // \u306a\u3093\u304b\u8272\u3005\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u57fa\u672c\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002dynet/init.h\u53c2\u7167\u3002\n  // \u305f\u3060\u3057gpus_mask\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306a\u521d\u671f\u5316\u304c\u5fc5\u8981\u306a\u306e\u3067\u6ce8\u610f\u3002\n\n  // \u5b9f\u969b\u306b\u521d\u671f\u5316\u3002\n  dynet::initialize(params);\n\n  {\n    //\n    // \u3053\u3053\u306b\u3084\u308a\u305f\u3044\u51e6\u7406\u3092\u66f8\u304f\u3002\n    //\n  }\n\n  // \u5f8c\u7247\u4ed8\u3051\n  // \u3053\u306e\u6642\u70b9\u3067DyNet\u95a2\u4fc2\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5168\u3066\u6d88\u6ec5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n  // \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306b\u547c\u3073\u51fa\u3059\u3068\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308b\u3002\n  // \u7279\u306b\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070\u547c\u3073\u51fa\u3055\u306a\u304f\u3066\u3088\u3044\u3002\n  dynet::cleanup();\n\n  return 0;\n}\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f-std=c++11\u304c\u5fc5\u8981\u3067\u3059\u3002\u307e\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306fCPU\u3067\u8a08\u7b97\u3055\u305b\u308b\u5834\u5408\u306flibdynet.so\u3001CUDA\u3067\u8a08\u7b97\u3055\u305b\u308b\u5834\u5408\u306flibgdynet.so\u3068libdynetcuda.so\u306b\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5834\u5408\u306b\u3088\u3063\u3066\u306fCUDA\u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u81ea\u5206\u3067\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u7c21\u5358\u306a\u4f8b\n\u307e\u305a\u3001\u5b66\u7fd2\u306e\u5fc5\u8981\u304c\u306a\u3044\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\uff09\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f5c\u3063\u3066\u8a08\u7b97\u3055\u305b\u3066\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u306f\u5165\u529b\u5024\u30922\u500d\u3057\u30013\u3092\u8db3\u3057\u305f\u7d50\u679c\u3092DyNet\u3067\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n#include <vector>\n#include <dynet/dynet.h> // ComputationGraph\n#include <dynet/expr.h>\n#include <dynet/init.h>\n#include <dynet/tensor.h> // as_scalar, as_vector\n\nusing namespace std;\nnamespace DE = dynet::expr;\n\n// \u30d9\u30af\u30c8\u30eb\u3092print\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\nvoid print_vector(const vector<dynet::real> & values) {\n  for (const auto val : values) {\n    cout << static_cast<float>(val) << ' ';\n  }\n  cout << endl;\n}\n\nvoid run() {\n  {\n    // \u30b9\u30ab\u30e9\n    dynet::ComputationGraph cg;\n    DE::Expression input_expr = DE::input(cg, 1.0f);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    // dynet::real\u306f\u4eca\u306e\u3068\u3053\u308dfloat\u3068\u7b49\u4fa1\u3002\n    dynet::real output_value = dynet::as_scalar(cg.forward(output_expr));\n    cout << static_cast<float>(output_value) << endl;\n  }\n\n  {\n    // \u30d9\u30af\u30c8\u30eb\n    dynet::ComputationGraph cg;\n    vector<float> input_values {1.0f, 2.0f, 3.0f};\n    // \u7b2c2\u5f15\u6570\u3067\u6b21\u5143\u3092\u6307\u5b9a\u3059\u308b\u3002\n    // 1\u6b21\u5143\u306e\u5834\u5408\u306f\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308b\u3002\n    DE::Expression input_expr = DE::input(cg, {3}, input_values);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    vector<dynet::real> output_values = dynet::as_vector(cg.forward(output_expr));\n    ::print_vector(output_values);\n  }\n\n  {\n    // \u884c\u5217\u306e\u5834\u5408\u306f\u30d9\u30af\u30c8\u30eb\u306bpack\u3057\u305f\u5024\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u3002\n    // \u5024\u306f\u7e26\u65b9\u5411\u306b\u5165\u308b\u3002\u3064\u307e\u308a:\n    // [[1, 3],\n    //  [2, 4]]\n    dynet::ComputationGraph cg;\n    vector<float> input_values {1.0f, 2.0f, 3.0f, 4.0f};\n    DE::Expression input_expr = DE::input(cg, {2, 2}, input_values);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    vector<dynet::real> output_values = dynet::as_vector(cg.forward(output_expr));\n    ::print_vector(output_values);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // \u521d\u671f\u5316\n  ::run();\n  // \u5f8c\u7247\u4ed8\u3051\n}\n\nExpression\u578b\u306f\u8a08\u7b97\u60c5\u5831\u3060\u3051\u3092\u4fdd\u6301\u3057\u305f\u4eee\u60f3\u7684\u306a\u578b\u3067\u3001\u3053\u306e\u5909\u6570\u306b\u5bfe\u3057\u3066\u901a\u5e38\u306eC++\u3068\u540c\u3058\u65b9\u6cd5\u3067\u8a08\u7b97\u5f0f\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\nChainer\u3068\u306f\u7570\u306a\u308a\u3001Expression\u3092\u751f\u6210\u3057\u305f\u6bb5\u968e\u3067\u306f\u5b9f\u969b\u306e\u8a08\u7b97\u306f\u307e\u3060\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u6700\u7d42\u7684\u306b\u5fc5\u8981\u306a\u5024\u3092\u8a18\u8ff0\u3059\u308bExpression\u306b\u5bfe\u3057\u3066ComputationGraph::forward()\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5b9f\u969b\u306e\u5024\u3092\u8a08\u7b97\u3055\u305b\u307e\u3059\u3002\nodashi@lab $ g++ -std=c++11 -I/path/to/eigen -I/path/to/dynet -L/path/to/dynet/build/dynet sample.cc -ldynet\nodashi@lab $ ./a.out\n[dynet] random seed: 269777318\n[dynet] allocating memory: 1024,1024,2048MB\n[dynet] memory allocation done.\n5\n5 7 9\n5 7 9 11\n\n\u30d9\u30af\u30c8\u30eb\u3084\u884c\u5217\u540c\u58eb\u306e\u6f14\u7b97\u3082\u53ef\u80fd\u3067\u3059\u3002\u5024\u306e\u521d\u671f\u5316\u306b\u306f\u3001\u9069\u5207\u306a\u9806\u5e8f\u3067\u8981\u7d20\u306e\u5024\u3092\u683c\u7d0d\u3057\u305fvector\u3092\u6e21\u3057\u307e\u3059\u3002\nvector\u3092\u521d\u671f\u5316\u3067\u304d\u308c\u3070\u4f55\u3067\u3082\u3088\u3044\u306e\u3067\u3001initializer_list\u3092\u76f4\u63a5\u6295\u3052\u3066\u3082OK\u3067\u3059\u3002\n// ...\nvoid run() {\n  dynet::ComputationGraph cg;\n  // [[1],\n  //  [2]]\n  vector<float> in_val1 {1.0f, 2.0f};\n  auto in1 = DE::input(cg, {2}, in_val1);\n\n  // [[1, 3],\n  //  [2, 4]]\n  vector<float> in_val2 {1.0f, 2.0f, 3.0f, 4.0f};\n  auto in2 = DE::input(cg, {2, 2}, in_val2);\n\n  // [[10,   0],\n  //  [ 0, 100]]\n  auto mul = DE::input(cg, {2, 2}, {10.0f, 0.0f, 0.0f, 100.0f});\n\n  // \u884c\u5217 * \u7e26\u30d9\u30af\u30c8\u30eb\n  // [[ 10],\n  //  [200]]\n  auto out1 = mul * in1;\n  auto out_val1 = dynet::as_vector(cg.incremental_forward(out1));\n  ::print_vector(out_val1);\n\n  // \u6a2a\u30d9\u30af\u30c8\u30eb * \u884c\u5217\n  // [[10, 200]]\n  auto out2 = DE::transpose(in1) * mul;\n  auto out_val2 = dynet::as_vector(cg.incremental_forward(out2));\n  ::print_vector(out_val2);\n\n  // \u884c\u5217 * \u884c\u5217\n  // [[10, 300],\n  //  [20, 400]]\n  auto out3 = in2 * mul;\n  auto out_val3 = dynet::as_vector(cg.incremental_forward(out3));\n  ::print_vector(out_val3);\n\n  // [[ 10,  30],\n  //  [200, 400]]\n  auto out4 = mul * in2;\n  auto out_val4 = dynet::as_vector(cg.incremental_forward(out4));\n  ::print_vector(out_val4);\n\n  // [[60100, 120300],\n  //  [80200, 160600]]\n  auto out5 = out3 * out4;\n  auto out_val5 = dynet::as_vector(cg.incremental_forward(out5));\n  ::print_vector(out_val5);\n}\n// ...\n\nodashi@lab $ ./a.out\n[dynet] ...\n10 200\n10 200\n10 20 300 400\n10 200 30 400\n60100 80200 120300 160600\n\n\u3053\u3053\u3067forward()\u3067\u306f\u306a\u304fincremental_forward()\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002forward()\u306f\u4eca\u307e\u3067\u306b\u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e\u5f0f\u3092\u6bce\u56de\u8a08\u7b97\u5bfe\u8c61\u3068\u3057\u307e\u3059\u304c\u3001incremental_forward()\u3067\u306f\u65e2\u306b\u8a08\u7b97\u3055\u308c\u305f\u5024\u306b\u3064\u3044\u3066\u306f\u5185\u90e8\u306b\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u65b0\u305f\u306b\u8ffd\u52a0\u3055\u308c\u305f\u90e8\u5206\u306e\u307f\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u9010\u6b21\u7684\u306a\u51fa\u529b\u3092\u5fc5\u8981\u3068\u3059\u308b\u8a00\u8a9e\u30e2\u30c7\u30eb\u3084\u7ffb\u8a33\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\n\u3053\u3053\u307e\u3067\u3067\u793a\u3057\u305f\u306e\u306f\u5b9a\u6570\u540c\u58eb\u306e\u6f14\u7b97\u4f8b\u3067\u3059\u304c\u3001\u5b9f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306f\u5909\u66f4\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3001\u7279\u5b9a\u306e\u5b66\u7fd2\u5668\u3067\u305d\u308c\u3089\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002DyNet\u3067\u306fModel\u30af\u30e9\u30b9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5b66\u7fd2\u5668\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u9762\u5012\u3092\u898b\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u5168\u4f53\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\n\n\nModel\u306bTrainer\u3092\u767b\u9332\n\nModel\u306b\u5404\u7a2eParameter\u3092\u767b\u9332\n\nComputationGraph\u4e0a\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\n\nComputationGraph::forward()\u3001ComputationGraph::backward()\u3001Trainer::update()\n\n3.\u301c4.\u3092\u5fc5\u8981\u306a\u3060\u3051\u7e70\u308a\u8fd4\u3057\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f2\u5909\u6570XOR\u554f\u984c\u3092\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u89e3\u304f\u4f8b\u3067\u3059\u3002\n#include <vector>\n#include <dynet/dynet.h> // ComputationGraph\n#include <dynet/expr.h>\n#include <dynet/init.h>\n#include <dynet/tensor.h> // as_scalar\n#include <dynet/training.h> // \u5404\u7a2eTrainer\n#include <dynet/model.h> // Model\n\nusing namespace std;\nnamespace DE = dynet::expr;\n\nvoid run() {\n  // \u5b66\u7fd2\u5668\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  dynet::Model model;\n\n  // \u5b66\u7fd2\u306b\u666e\u901a\u306eSGD\u3092\u4f7f\u3046\n  const float e0 = 0.1;\n  const float edecay = 0.1; // eta = e0 / (1 + epoch * edecay)\n  dynet::SimpleSGDTrainer trainer(model, e0, edecay);\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\n  // auto == dynet::Parameter\n  const unsigned HIDDEN = 8;\n  auto p_xh_w = model.add_parameters({HIDDEN, 2});\n  auto p_xh_b = model.add_parameters({HIDDEN});\n  auto p_hy_w = model.add_parameters({1, HIDDEN});\n  auto p_hy_b = model.add_parameters({1});\n\n  // \u5165\u529b (dynet::real\u306f\u5185\u90e8\u7684\u306bfloat\u3068\u7b49\u4fa1)\n  vector<dynet::real> input_values {\n     1.0,  1.0,\n     1.0, -1.0,\n    -1.0,  1.0,\n    -1.0, -1.0,\n  };\n  // \u6b63\u89e3\n  vector<dynet::real> output_values {\n    -1.0,\n     1.0,\n     1.0,\n    -1.0,\n  };\n\n  dynet::ComputationGraph cg;\n\n  // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\n  // auto == DE::Expression\n  //auto x = DE::input(cg, {2}, input_values); 2016/12/29: \u3053\u3061\u3089\u306f\u9593\u9055\u3044\uff08\u4ed5\u69d8\u3067\u901a\u3063\u3066\u3057\u307e\u3046\u3002\u6ce8\u610f\uff09\n  auto x = DE::input(cg, dynet::Dim({2}, 4), input_values);  // \u5165\u529b\u5c64 (\u30df\u30cb\u30d0\u30c3\u30c1==4)\n  auto xh_w = DE::parameter(cg, p_xh_w);\n  auto xh_b = DE::parameter(cg, p_xh_b);\n  auto h = DE::tanh(xh_w * x + xh_b);         // \u96a0\u308c\u5c64\n  auto hy_w = DE::parameter(cg, p_hy_w);\n  auto hy_b = DE::parameter(cg, p_hy_b);\n  auto y = hy_w * h + hy_b;                   // \u51fa\u529b\u5c64\n  //auto t = DE::input(cg, {1}, output_values); 2016/12/29: \u3053\u3061\u3089\u306f\u9593\u9055\u3044\n  auto t = DE::input(cg, dynet::Dim({1}, 4), output_values); // \u6b63\u89e3 (\u30df\u30cb\u30d0\u30c3\u30c1==4)\n  auto loss = DE::squared_distance(t, y);     // \u3068\u306e2\u4e57\u8aa4\u5dee\n  auto sum_loss = DE::sum_batches(loss);      // \u306e\u7dcf\u548c\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\u309210\u56de\u66f4\u65b0\n  for (int i = 0; i < 10; ++i) {\n    // forward: \u5b9f\u969b\u306e\u8a08\u7b97\u7d50\u679c\u3092\u751f\u6210\n    float avg_loss = dynet::as_scalar(cg.forward(sum_loss)) / 4.0;\n    // backward: \u52fe\u914d\u306e\u8a08\u7b97\n    cg.backward(sum_loss);\n    // \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\n    trainer.update();\n    // \u4e16\u4ee3\u306e\u66f4\u65b0(edecay==0\u306a\u3089\u4e0d\u8981)\n    trainer.update_epoch();\n    cout << \"epoch=\" << (i + 1) << \", loss=\" << avg_loss << endl;\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // \u521d\u671f\u5316\n  ::run();\n  // \u5f8c\u7247\u4ed8\u3051\n}\n\nodashi@lab $ ./a.out\n[dynet] ...\nepoch=1, loss=1.13717\nepoch=2, loss=0.714576\nepoch=3, loss=0.582772\nepoch=4, loss=0.45872\nepoch=5, loss=0.354475\nepoch=6, loss=0.270747\nepoch=7, loss=0.205377\nepoch=8, loss=0.154995\nepoch=9, loss=0.116605\nepoch=10, loss=0.0876631\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u308b\uff08\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff09\u306e\u3067\u3001\u5b9f\u884c\u7d50\u679c\u306f\u6bce\u56de\u5909\u308f\u308a\u307e\u3059\u3002\n\u6ce8\u76ee\u3057\u305f\u3044\u306e\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3001input()\u304c\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u6574\u5f62\u3057\u3066\u30df\u30cb\u30d0\u30c3\u30c1\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u751f\u6210\u3055\u308c\u308bExpression\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u5b8c\u5168\u306b\u96a0\u853d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5f8c\u306e\u8a08\u7b97\u3067\u306f\u5b9f\u969b\u306e\u6570\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002\n2016/12/29 \u8ffd\u8a18\uff1a\u73fe\u72b6\u306e\u5b9f\u88c5\u3067\u306fDim\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u660e\u793a\u7684\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6e21\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6e21\u3059vector\u306e\u30b5\u30a4\u30ba\u304c\u4e00\u81f4\u3057\u306a\u304f\u3066\u3082\u53d7\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u3002\n\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u81ea\u52d5\u7684\u306b\u5224\u5225\u3059\u308b\u5b9f\u88c5\u306f\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306a\u3044\u3057\u3001\u30b5\u30a4\u30ba\u4e0d\u4e00\u81f4\u3067\u53d7\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u306f\u3061\u3087\u3063\u3068\u6016\u3044\u306e\u3067\u3001\u53ef\u80fd\u306a\u3089\u4fee\u6b63\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u4f8b\u3067\u306f\u5165\u51fa\u529b\u304c\u5e38\u306b\u540c\u3058\u306a\u306e\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30921\u5ea6\u3060\u3051\u751f\u6210\u3057\u3066\u5b66\u7fd2\u6642\u306b\u4f7f\u3044\u56de\u3057\u3066\u3044\u307e\u3059\u3002\u5165\u51fa\u529b\u304c\u5909\u5316\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u90fd\u5ea6\u65b0\u305f\u306aComputationGraph\u4e0a\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u306e\u6319\u52d5\u306fChainer\u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u3067\u3001\u30e6\u30fc\u30b6\u304c\u81ea\u5206\u306e\u597d\u304d\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u660e\u793a\u7684\u306bforward\u3059\u308b\u70b9\u306b\u5dee\u7570\u304c\u3042\u308a\u307e\u3059\u3002\n2016/12/30 \u8ffd\u8a18\uff1a\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5165\u529b\u3057\u305f\u5024\u3092\u5171\u6709\u3057\u305f\u3044\u304b\u3069\u3046\u304b\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30df\u30cb\u30d0\u30c3\u30c1\u3054\u3068\u306b\u7570\u306a\u308b\u884c\u5217\u3001\u307e\u305f\u306f\u5171\u901a\u306e\u884c\u5217\u3092\u4e57\u3058\u3066\u3044\u307e\u3059\u3002\nvoid run() {\n  dynet::ComputationGraph cg;\n\n  auto x = DE::input(cg, dynet::Dim({2}, 3), {\n      1, 2,\n      3, 4,\n      5, 6});\n\n  auto w1 = DE::input(cg, dynet::Dim({2, 2}, 3), {\n      1, 0, 0, 1,\n      0, 1, 1, 0,\n      1, 2, 1, 2});\n  auto y1 = w1 * x;\n  for (const float val : dynet::as_vector(cg.forward(y1))) {\n    cout << val << ' ';\n  }\n  cout << endl;\n\n  auto w2 = DE::input(cg, {2, 2}, {0, 1, 1, 0});\n  auto y2 = w2 * x;\n  for (const float val : dynet::as_vector(cg.forward(y2))) {\n    cout << val << ' ';\n  }\n  cout << endl;\n}\n\nodashi@lab $ ./a.out\n[dynet] ...\n1 2 4 3 11 22 \n2 1 4 3 6 5 \n\n\n\n\u305d\u306e\u4ed6\n\u4ed6\u306b\u3082RNN\u3092\u4f7f\u7528\u3059\u308b\u4f8b\u306a\u3069\u304c\u516c\u5f0f\u306eexamples\u306b\u8ee2\u304c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\u73fe\u6642\u70b9\u3067\u306f\u5927\u5206\u5f8c\u767a\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067\u3001\u5b9f\u884c\u901f\u5ea6\u3084\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u70b9\u3067\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3088\u308a\u5927\u96d1\u628a\u306a\u52d5\u304d\u65b9\u3092\u3057\u305f\u308a\u3001\u7d30\u304b\u3044\u30d0\u30b0\u304c\u6b8b\u3063\u3066\u3044\u305f\u308a\u3068\u82e5\u5e72\u306e\u96e3\u70b9\u306f\u3042\u308a\u307e\u3059\u3002\u958b\u767a\u9663\u306e\u5bfe\u5fdc\u306f\u304b\u306a\u308a\u901f\u3044\u90e8\u985e\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u4f7f\u3063\u3066\u307f\u3066\u6587\u53e5\u304c\u3042\u308c\u3070issues\u306b\u6295\u3052\u3066\u307f\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u304b\u65e5\u672c\u4eba\u3067\u30e1\u30a4\u30f3\u306b\u4f7f\u3063\u3066\u3044\u308b\u306e\u304c\u81ea\u5206\u3057\u304b\u3044\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\uff08\u6ce3\uff09\nC++\u4f7f\u3048\u308b\u4eba\u306b\u306f\u30de\u30b8\u4fbf\u5229\u306a\u306e\u3067\u4f7f\u3063\u3066\u306d\uff01\n\n\u304a\u307e\u3051\n\u4f55\u756a\u714e\u3058\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u7ffb\u8a33\u3059\u308b\u30c4\u30fc\u30eb\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304c\u5168\u90e8DyNet\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u4eca\u5ea6\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"ja\" dir=\"ltr\">DyNet\u306e\u6280\u8853\u8ad6\u6587\u304c\u51fa\u307e\u3057\u305f\u3002\u8272\u3005\u3042\u3063\u3066\u5171\u8457\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002<a href=\"https://t.co/LtYm4U0fqp\">https://t.co/LtYm4U0fqp</a></p>&mdash; Out-of-Domain Award (@odashi_t) <a href=\"https://twitter.com/odashi_t/status/821211737982574592\">January 17, 2017</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u672c\u8a18\u4e8b\u306fDeepLearning Advent Calendar 12\u67085\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u672c\u8a18\u4e8b\u3067\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e00\u3064\u3067\u3042\u308b[**DyNet**](https://github.com/clab/dynet)\u3092\u7c21\u5358\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f[\u7c73\u30ab\u30fc\u30cd\u30ae\u30fc\u30e1\u30ed\u30f3\u5927\u5b66](http://www.cmu.edu/)\u306e[\u8a00\u8a9e\u6280\u8853\u7814\u7a76\u6240](https://www.lti.cs.cmu.edu/)\u304c\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001\u5c11\u3057\u7e01\u304c\u3042\u3063\u3066\u81ea\u5206\u3082\u88cf\u3067\u958b\u767a\u306b\u53c2\u52a0\u3057\u3066\u3044\u307e\u3059\u3002[\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u56fd\u969b\u4f1a\u8b70\u3067\u3042\u308bEMNLP\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066](http://www.emnlp2016.net/tutorials.html#practical)\u3001\u3053\u3061\u3089\u3067\u3082\u5272\u3068\u4eba\u6c17\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u3002\nDyNet\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f:\n\n* C++\u3068Python\u3067\u4f7f\u7528\u53ef\u80fd\n* \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u304c\u53ef\u80fd\n* \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u96a0\u853d\n\n\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n2\u3064\u76ee\u306e\u7279\u5fb4\u3092\u6301\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306fPFN\u306e[Chainer](http://chainer.org/)\u306a\u3069\u3082\u6319\u3052\u3089\u308c\u3001\u4e3b\u306brecurrent/recursive neural network\u7cfb\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3068\u306a\u308b\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u7b49\u306e\u5206\u91ce\u3067\u529b\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\n3\u3064\u76ee\u306e\u7279\u5fb4\u306f\u304b\u306a\u308a\u5f37\u529b\u3067\u3001\u30e6\u30fc\u30b6\u304c\u6295\u3052\u305f\u30c7\u30fc\u30bf\u306b\u5fdc\u3058\u3066\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u3001\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u306a\u3089\u30d0\u30c3\u30c1\u306e\u5927\u304d\u3055\u7b49\u3092\u81ea\u52d5\u7684\u306b\u5224\u5225\u3059\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3059\u308b\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u305d\u308c\u3092\u533a\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u8ad6\u6587\u306b\u66f8\u3044\u3066\u3042\u308b\u5f0f\u3092\u305d\u306e\u307e\u307e\u66f8\u3051\u3070\u3001\u57fa\u672c\u7684\u306b\u306f\u81ea\u52d5\u7684\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u51e6\u7406\u306b\u5bfe\u5fdc\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n<font color=\"Red\">2016/12/29 \u8ffd\u8a18\uff1a\u73fe\u72b6\u306f\u5165\u529b\u90e8\u5206\u3060\u3051\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u4e0b\u8a18\u30b3\u30fc\u30c9\u53c2\u7167\uff09</font>\n\u30e1\u30a4\u30f3\u306e\u5bfe\u5fdc\u8a00\u8a9e\u304cC++\u306a\u306e\u3067\u3001\u4f4e\u30ec\u30d9\u30eb\u306a\u9818\u57df\u3067\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9023\u643a\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u826f\u3044\u9078\u629e\u80a2\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002DyNet\u81ea\u4f53\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u9ad8\u5ea6\u306b\u62bd\u8c61\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u7bc9\u90e8\u5206\u306e\u898b\u901a\u3057\u306f\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u6bd4\u8f03\u3057\u3066\u3082\u905c\u8272\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a[\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb](http://dynet.readthedocs.io/en/latest/install.html)\u306f\u6e08\u3093\u3067\u3044\u308b\u3082\u306e\u3068\u3057\u3066\u3001\u4ee5\u964d\u3067\u306fC++\u4e0a\u3067\u306eDyNet\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n## \u521d\u671f\u5316\u30fb\u5f8c\u7247\u4ed8\u3051\n\nDyNet\u306f\u6700\u521d\u306b\u5185\u90e8\u3067\u6307\u5b9a\u3057\u305f\u91cf\u306e\u30e1\u30e2\u30ea\u3068\u30c7\u30d0\u30a4\u30b9\u3092\u78ba\u4fdd\u3057\u3001\u305d\u308c\u3092\u6700\u5f8c\u307e\u3067\u4f7f\u3044\u7d9a\u3051\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u6700\u521d\u306b`dynet::initialize()`\u3092\u547c\u3073\u51fa\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u521d\u671f\u5316\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f2\u7a2e\u985e\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u3064\u306f`DynetParams`\u69cb\u9020\u4f53\u306b\u5fc5\u8981\u306a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u6e21\u3059\u65b9\u6cd5\u3001\u3082\u3046\u4e00\u3064\u306f`argc`\u3068`argv`\u3092\u6e21\u3057\u3066\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092DyNet\u306b\u51e6\u7406\u3057\u3066\u3082\u3089\u3046\u65b9\u6cd5\u3067\u3059\u3002\u5f8c\u8005\u306f\u524d\u8005\u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u3067\u306f\u69cb\u9020\u4f53\u3067\u660e\u793a\u7684\u306b\u521d\u671f\u5316\u3059\u308b\u4f8b\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3089`dynet::cleanup()`\u3092\u547c\u3073\u51fa\u3057\u3066\u5f8c\u7247\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u4ed6\u306e\u51e6\u7406\u306b\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u7b49\u306e\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u3001\u3053\u306e\u95a2\u6570\u306f\u547c\u3073\u51fa\u3059\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u81ea\u52d5\u7684\u306b\u5f8c\u7247\u4ed8\u3051\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\n```c++\n#include <vector>\n#include <dynet/init.h>\n\nint main(int argc, char *argv[]) {\n  dynet::DynetParams params;\n\n  // \u78ba\u4fdd\u3059\u308b\u30e1\u30e2\u30ea\u91cf\u30923\u3064\u6307\u5b9a\u3059\u308b(MB\u5358\u4f4d)\u3002\n  // \u305d\u308c\u305e\u308cforward-path, backward-path, \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u4f7f\u7528\u3059\u308b\u91cf\u3002\n  params.mem_descriptor = \"1024,1024,2048\";\n  // \u4e0b\u8a18\u306e\u3088\u3046\u306b1\u3064\u3060\u3051\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n  // \u305d\u306e\u5834\u5408\u306f\u5185\u90e8\u7684\u306b3\u7b49\u5206\u3057\u305f\u3082\u306e\u304c\u305d\u308c\u305e\u308c\u306b\u4f7f\u7528\u3055\u308c\u308b\u3002\n  //params.mem_descriptor = \"4096\";\n\n  params.random_seed = 0;           // \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u30020\u306a\u3089\u9069\u5f53\u306b\u521d\u671f\u5316\n  params.weight_decay = 0.0f;       // L2\u6b63\u5247\u5316\u306e\u5f37\u3055\n  params.shared_parameters = false; // \u30d1\u30e9\u30e1\u30fc\u30bf\u3092shared memory\u4e0a\u306b\u7f6e\u304f\u304b\u3069\u3046\u304b\n\n#if HAVE_CUDA\n  // \u4ee5\u4e0b\u306fCUDA\u306b\u95a2\u9023\u4ed8\u3051\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5834\u5408\u306e\u8a2d\u5b9a\u3002\n  // \u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u30e1\u30e2\u30ea\u306b\u4f59\u88d5\u304c\u3042\u308bGPU\u30921\u500b\u52dd\u624b\u306b\u9078\u3093\u3067\u4f7f\u3046\u3002\n  // \u8907\u6570GPU\u306b\u306f\u4eca\u306e\u3068\u3053\u308d\u672a\u5bfe\u5fdc\u3002\n  const unsigned MAX_GPUS = 1024; // \u9069\u5f53\u306b\u5927\u304d\u306a\u5024\u3002\u633f\u3055\u3063\u3066\u3044\u308bGPU\u306e\u679a\u6570\u4ee5\u4e0a\u306b\u3059\u308c\u3070\u3088\u3044\u3002\n  params.ngpus_requested = false;\n  params.ids_requested = false;\n  params.requested_gpus = -1;\n  params.gpus_mask = std::vector<int>(MAX_GPUS, 0);\n#endif\n\n  // \u306a\u3093\u304b\u8272\u3005\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u57fa\u672c\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3067\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002dynet/init.h\u53c2\u7167\u3002\n  // \u305f\u3060\u3057gpus_mask\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306a\u521d\u671f\u5316\u304c\u5fc5\u8981\u306a\u306e\u3067\u6ce8\u610f\u3002\n\n  // \u5b9f\u969b\u306b\u521d\u671f\u5316\u3002\n  dynet::initialize(params);\n\n  {\n    //\n    // \u3053\u3053\u306b\u3084\u308a\u305f\u3044\u51e6\u7406\u3092\u66f8\u304f\u3002\n    //\n  }\n\n  // \u5f8c\u7247\u4ed8\u3051\n  // \u3053\u306e\u6642\u70b9\u3067DyNet\u95a2\u4fc2\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5168\u3066\u6d88\u6ec5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n  // \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306b\u547c\u3073\u51fa\u3059\u3068\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308b\u3002\n  // \u7279\u306b\u5fc5\u8981\u304c\u306a\u3051\u308c\u3070\u547c\u3073\u51fa\u3055\u306a\u304f\u3066\u3088\u3044\u3002\n  dynet::cleanup();\n\n  return 0;\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f`-std=c++11`\u304c\u5fc5\u8981\u3067\u3059\u3002\u307e\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306fCPU\u3067\u8a08\u7b97\u3055\u305b\u308b\u5834\u5408\u306f`libdynet.so`\u3001CUDA\u3067\u8a08\u7b97\u3055\u305b\u308b\u5834\u5408\u306f`libgdynet.so`\u3068`libdynetcuda.so`\u306b\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5834\u5408\u306b\u3088\u3063\u3066\u306fCUDA\u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u81ea\u5206\u3067\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## \u7c21\u5358\u306a\u4f8b\n\n\u307e\u305a\u3001\u5b66\u7fd2\u306e\u5fc5\u8981\u304c\u306a\u3044\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\uff09\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f5c\u3063\u3066\u8a08\u7b97\u3055\u305b\u3066\u307f\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u306f\u5165\u529b\u5024\u30922\u500d\u3057\u30013\u3092\u8db3\u3057\u305f\u7d50\u679c\u3092DyNet\u3067\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c++\n#include <vector>\n#include <dynet/dynet.h> // ComputationGraph\n#include <dynet/expr.h>\n#include <dynet/init.h>\n#include <dynet/tensor.h> // as_scalar, as_vector\n\nusing namespace std;\nnamespace DE = dynet::expr;\n\n// \u30d9\u30af\u30c8\u30eb\u3092print\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\nvoid print_vector(const vector<dynet::real> & values) {\n  for (const auto val : values) {\n    cout << static_cast<float>(val) << ' ';\n  }\n  cout << endl;\n}\n\nvoid run() {\n  {\n    // \u30b9\u30ab\u30e9\n    dynet::ComputationGraph cg;\n    DE::Expression input_expr = DE::input(cg, 1.0f);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    // dynet::real\u306f\u4eca\u306e\u3068\u3053\u308dfloat\u3068\u7b49\u4fa1\u3002\n    dynet::real output_value = dynet::as_scalar(cg.forward(output_expr));\n    cout << static_cast<float>(output_value) << endl;\n  }\n\n  {\n    // \u30d9\u30af\u30c8\u30eb\n    dynet::ComputationGraph cg;\n    vector<float> input_values {1.0f, 2.0f, 3.0f};\n    // \u7b2c2\u5f15\u6570\u3067\u6b21\u5143\u3092\u6307\u5b9a\u3059\u308b\u3002\n    // 1\u6b21\u5143\u306e\u5834\u5408\u306f\u7e26\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308b\u3002\n    DE::Expression input_expr = DE::input(cg, {3}, input_values);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    vector<dynet::real> output_values = dynet::as_vector(cg.forward(output_expr));\n    ::print_vector(output_values);\n  }\n\n  {\n    // \u884c\u5217\u306e\u5834\u5408\u306f\u30d9\u30af\u30c8\u30eb\u306bpack\u3057\u305f\u5024\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u3002\n    // \u5024\u306f\u7e26\u65b9\u5411\u306b\u5165\u308b\u3002\u3064\u307e\u308a:\n    // [[1, 3],\n    //  [2, 4]]\n    dynet::ComputationGraph cg;\n    vector<float> input_values {1.0f, 2.0f, 3.0f, 4.0f};\n    DE::Expression input_expr = DE::input(cg, {2, 2}, input_values);\n    DE::Expression output_expr = 2.0f * input_expr + 3.0f;\n    vector<dynet::real> output_values = dynet::as_vector(cg.forward(output_expr));\n    ::print_vector(output_values);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // \u521d\u671f\u5316\n  ::run();\n  // \u5f8c\u7247\u4ed8\u3051\n}\n```\n\n`Expression`\u578b\u306f\u8a08\u7b97\u60c5\u5831\u3060\u3051\u3092\u4fdd\u6301\u3057\u305f\u4eee\u60f3\u7684\u306a\u578b\u3067\u3001\u3053\u306e\u5909\u6570\u306b\u5bfe\u3057\u3066\u901a\u5e38\u306eC++\u3068\u540c\u3058\u65b9\u6cd5\u3067\u8a08\u7b97\u5f0f\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\nChainer\u3068\u306f\u7570\u306a\u308a\u3001`Expression`\u3092\u751f\u6210\u3057\u305f\u6bb5\u968e\u3067\u306f\u5b9f\u969b\u306e\u8a08\u7b97\u306f\u307e\u3060\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u6700\u7d42\u7684\u306b\u5fc5\u8981\u306a\u5024\u3092\u8a18\u8ff0\u3059\u308b`Expression`\u306b\u5bfe\u3057\u3066`ComputationGraph::forward()`\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5b9f\u969b\u306e\u5024\u3092\u8a08\u7b97\u3055\u305b\u307e\u3059\u3002\n\n```shell-session\nodashi@lab $ g++ -std=c++11 -I/path/to/eigen -I/path/to/dynet -L/path/to/dynet/build/dynet sample.cc -ldynet\nodashi@lab $ ./a.out\n[dynet] random seed: 269777318\n[dynet] allocating memory: 1024,1024,2048MB\n[dynet] memory allocation done.\n5\n5 7 9\n5 7 9 11\n```\n\n\u30d9\u30af\u30c8\u30eb\u3084\u884c\u5217\u540c\u58eb\u306e\u6f14\u7b97\u3082\u53ef\u80fd\u3067\u3059\u3002\u5024\u306e\u521d\u671f\u5316\u306b\u306f\u3001\u9069\u5207\u306a\u9806\u5e8f\u3067\u8981\u7d20\u306e\u5024\u3092\u683c\u7d0d\u3057\u305f`vector`\u3092\u6e21\u3057\u307e\u3059\u3002\n`vector`\u3092\u521d\u671f\u5316\u3067\u304d\u308c\u3070\u4f55\u3067\u3082\u3088\u3044\u306e\u3067\u3001`initializer_list`\u3092\u76f4\u63a5\u6295\u3052\u3066\u3082OK\u3067\u3059\u3002\n\n```c++\n// ...\nvoid run() {\n  dynet::ComputationGraph cg;\n  // [[1],\n  //  [2]]\n  vector<float> in_val1 {1.0f, 2.0f};\n  auto in1 = DE::input(cg, {2}, in_val1);\n\n  // [[1, 3],\n  //  [2, 4]]\n  vector<float> in_val2 {1.0f, 2.0f, 3.0f, 4.0f};\n  auto in2 = DE::input(cg, {2, 2}, in_val2);\n\n  // [[10,   0],\n  //  [ 0, 100]]\n  auto mul = DE::input(cg, {2, 2}, {10.0f, 0.0f, 0.0f, 100.0f});\n\n  // \u884c\u5217 * \u7e26\u30d9\u30af\u30c8\u30eb\n  // [[ 10],\n  //  [200]]\n  auto out1 = mul * in1;\n  auto out_val1 = dynet::as_vector(cg.incremental_forward(out1));\n  ::print_vector(out_val1);\n\n  // \u6a2a\u30d9\u30af\u30c8\u30eb * \u884c\u5217\n  // [[10, 200]]\n  auto out2 = DE::transpose(in1) * mul;\n  auto out_val2 = dynet::as_vector(cg.incremental_forward(out2));\n  ::print_vector(out_val2);\n\n  // \u884c\u5217 * \u884c\u5217\n  // [[10, 300],\n  //  [20, 400]]\n  auto out3 = in2 * mul;\n  auto out_val3 = dynet::as_vector(cg.incremental_forward(out3));\n  ::print_vector(out_val3);\n  \n  // [[ 10,  30],\n  //  [200, 400]]\n  auto out4 = mul * in2;\n  auto out_val4 = dynet::as_vector(cg.incremental_forward(out4));\n  ::print_vector(out_val4);\n\n  // [[60100, 120300],\n  //  [80200, 160600]]\n  auto out5 = out3 * out4;\n  auto out_val5 = dynet::as_vector(cg.incremental_forward(out5));\n  ::print_vector(out_val5);\n}\n// ...\n```\n\n```shell-session\nodashi@lab $ ./a.out\n[dynet] ...\n10 200\n10 200\n10 20 300 400\n10 200 30 400\n60100 80200 120300 160600\n```\n\n\u3053\u3053\u3067`forward()`\u3067\u306f\u306a\u304f`incremental_forward()`\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002`forward()`\u306f\u4eca\u307e\u3067\u306b\u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e\u5f0f\u3092\u6bce\u56de\u8a08\u7b97\u5bfe\u8c61\u3068\u3057\u307e\u3059\u304c\u3001`incremental_forward()`\u3067\u306f\u65e2\u306b\u8a08\u7b97\u3055\u308c\u305f\u5024\u306b\u3064\u3044\u3066\u306f\u5185\u90e8\u306b\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u65b0\u305f\u306b\u8ffd\u52a0\u3055\u308c\u305f\u90e8\u5206\u306e\u307f\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u9010\u6b21\u7684\u306a\u51fa\u529b\u3092\u5fc5\u8981\u3068\u3059\u308b\u8a00\u8a9e\u30e2\u30c7\u30eb\u3084\u7ffb\u8a33\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\n## \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\n\n\u3053\u3053\u307e\u3067\u3067\u793a\u3057\u305f\u306e\u306f\u5b9a\u6570\u540c\u58eb\u306e\u6f14\u7b97\u4f8b\u3067\u3059\u304c\u3001\u5b9f\u969b\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306f\u5909\u66f4\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5b58\u5728\u3057\u3066\u3001\u7279\u5b9a\u306e\u5b66\u7fd2\u5668\u3067\u305d\u308c\u3089\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002DyNet\u3067\u306f`Model`\u30af\u30e9\u30b9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5b66\u7fd2\u5668\u306e\u5bfe\u5fdc\u4ed8\u3051\u306e\u9762\u5012\u3092\u898b\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u5168\u4f53\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\n\n1. `Model`\u306b`Trainer`\u3092\u767b\u9332\n2. `Model`\u306b\u5404\u7a2e`Parameter`\u3092\u767b\u9332\n3. `ComputationGraph`\u4e0a\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\n4. `ComputationGraph::forward()`\u3001`ComputationGraph::backward()`\u3001`Trainer::update()`\n5. 3.\u301c4.\u3092\u5fc5\u8981\u306a\u3060\u3051\u7e70\u308a\u8fd4\u3057\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f2\u5909\u6570XOR\u554f\u984c\u3092\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u89e3\u304f\u4f8b\u3067\u3059\u3002\n\n```c++\n#include <vector>\n#include <dynet/dynet.h> // ComputationGraph\n#include <dynet/expr.h>\n#include <dynet/init.h>\n#include <dynet/tensor.h> // as_scalar\n#include <dynet/training.h> // \u5404\u7a2eTrainer\n#include <dynet/model.h> // Model\n\nusing namespace std;\nnamespace DE = dynet::expr;\n\nvoid run() {\n  // \u5b66\u7fd2\u5668\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  dynet::Model model;\n\n  // \u5b66\u7fd2\u306b\u666e\u901a\u306eSGD\u3092\u4f7f\u3046\n  const float e0 = 0.1;\n  const float edecay = 0.1; // eta = e0 / (1 + epoch * edecay)\n  dynet::SimpleSGDTrainer trainer(model, e0, edecay);\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\n  // auto == dynet::Parameter\n  const unsigned HIDDEN = 8;\n  auto p_xh_w = model.add_parameters({HIDDEN, 2});\n  auto p_xh_b = model.add_parameters({HIDDEN});\n  auto p_hy_w = model.add_parameters({1, HIDDEN});\n  auto p_hy_b = model.add_parameters({1});\n\n  // \u5165\u529b (dynet::real\u306f\u5185\u90e8\u7684\u306bfloat\u3068\u7b49\u4fa1)\n  vector<dynet::real> input_values {\n     1.0,  1.0,\n     1.0, -1.0,\n    -1.0,  1.0,\n    -1.0, -1.0,\n  };\n  // \u6b63\u89e3\n  vector<dynet::real> output_values {\n    -1.0,\n     1.0,\n     1.0,\n    -1.0,\n  };\n\n  dynet::ComputationGraph cg;\n\n  // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\n  // auto == DE::Expression\n  //auto x = DE::input(cg, {2}, input_values); 2016/12/29: \u3053\u3061\u3089\u306f\u9593\u9055\u3044\uff08\u4ed5\u69d8\u3067\u901a\u3063\u3066\u3057\u307e\u3046\u3002\u6ce8\u610f\uff09\n  auto x = DE::input(cg, dynet::Dim({2}, 4), input_values);  // \u5165\u529b\u5c64 (\u30df\u30cb\u30d0\u30c3\u30c1==4)\n  auto xh_w = DE::parameter(cg, p_xh_w);\n  auto xh_b = DE::parameter(cg, p_xh_b);\n  auto h = DE::tanh(xh_w * x + xh_b);         // \u96a0\u308c\u5c64\n  auto hy_w = DE::parameter(cg, p_hy_w);\n  auto hy_b = DE::parameter(cg, p_hy_b);\n  auto y = hy_w * h + hy_b;                   // \u51fa\u529b\u5c64\n  //auto t = DE::input(cg, {1}, output_values); 2016/12/29: \u3053\u3061\u3089\u306f\u9593\u9055\u3044\n  auto t = DE::input(cg, dynet::Dim({1}, 4), output_values); // \u6b63\u89e3 (\u30df\u30cb\u30d0\u30c3\u30c1==4)\n  auto loss = DE::squared_distance(t, y);     // \u3068\u306e2\u4e57\u8aa4\u5dee\n  auto sum_loss = DE::sum_batches(loss);      // \u306e\u7dcf\u548c\n\n  // \u30d1\u30e9\u30e1\u30fc\u30bf\u309210\u56de\u66f4\u65b0\n  for (int i = 0; i < 10; ++i) {\n    // forward: \u5b9f\u969b\u306e\u8a08\u7b97\u7d50\u679c\u3092\u751f\u6210\n    float avg_loss = dynet::as_scalar(cg.forward(sum_loss)) / 4.0;\n    // backward: \u52fe\u914d\u306e\u8a08\u7b97\n    cg.backward(sum_loss);\n    // \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\n    trainer.update();\n    // \u4e16\u4ee3\u306e\u66f4\u65b0(edecay==0\u306a\u3089\u4e0d\u8981)\n    trainer.update_epoch();\n    cout << \"epoch=\" << (i + 1) << \", loss=\" << avg_loss << endl;\n  }\n}\n\nint main(int argc, char *argv[]) {\n  // \u521d\u671f\u5316\n  ::run();\n  // \u5f8c\u7247\u4ed8\u3051\n}\n```\n\n```shell-session\nodashi@lab $ ./a.out\n[dynet] ...\nepoch=1, loss=1.13717\nepoch=2, loss=0.714576\nepoch=3, loss=0.582772\nepoch=4, loss=0.45872\nepoch=5, loss=0.354475\nepoch=6, loss=0.270747\nepoch=7, loss=0.205377\nepoch=8, loss=0.154995\nepoch=9, loss=0.116605\nepoch=10, loss=0.0876631\n\n```\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u308b\uff08\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff09\u306e\u3067\u3001\u5b9f\u884c\u7d50\u679c\u306f\u6bce\u56de\u5909\u308f\u308a\u307e\u3059\u3002\n\n~~\u6ce8\u76ee\u3057\u305f\u3044\u306e\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3001`input()`\u304c\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u6574\u5f62\u3057\u3066\u30df\u30cb\u30d0\u30c3\u30c1\u5316\u3057\u3066\u3044\u307e\u3059\u3002~~\u751f\u6210\u3055\u308c\u308b`Expression`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u5b8c\u5168\u306b\u96a0\u853d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5f8c\u306e\u8a08\u7b97\u3067\u306f\u5b9f\u969b\u306e\u6570\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u5c02\u5ff5\u3067\u304d\u307e\u3059\u3002\n<font color=\"Red\">2016/12/29 \u8ffd\u8a18\uff1a\u73fe\u72b6\u306e\u5b9f\u88c5\u3067\u306fDim\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u660e\u793a\u7684\u306b\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6e21\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6e21\u3059vector\u306e\u30b5\u30a4\u30ba\u304c\u4e00\u81f4\u3057\u306a\u304f\u3066\u3082\u53d7\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u3002\n\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u81ea\u52d5\u7684\u306b\u5224\u5225\u3059\u308b\u5b9f\u88c5\u306f\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306a\u3044\u3057\u3001\u30b5\u30a4\u30ba\u4e0d\u4e00\u81f4\u3067\u53d7\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u306f\u3061\u3087\u3063\u3068\u6016\u3044\u306e\u3067\u3001\u53ef\u80fd\u306a\u3089\u4fee\u6b63\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002</font>\n\n\u307e\u305f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u4f8b\u3067\u306f\u5165\u51fa\u529b\u304c\u5e38\u306b\u540c\u3058\u306a\u306e\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30921\u5ea6\u3060\u3051\u751f\u6210\u3057\u3066\u5b66\u7fd2\u6642\u306b\u4f7f\u3044\u56de\u3057\u3066\u3044\u307e\u3059\u3002\u5165\u51fa\u529b\u304c\u5909\u5316\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u90fd\u5ea6\u65b0\u305f\u306a`ComputationGraph`\u4e0a\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u306e\u6319\u52d5\u306fChainer\u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u3067\u3001\u30e6\u30fc\u30b6\u304c\u81ea\u5206\u306e\u597d\u304d\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u660e\u793a\u7684\u306b`forward`\u3059\u308b\u70b9\u306b\u5dee\u7570\u304c\u3042\u308a\u307e\u3059\u3002\n\n<font color=\"Red\">2016/12/30 \u8ffd\u8a18\uff1a\u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5165\u529b\u3057\u305f\u5024\u3092\u5171\u6709\u3057\u305f\u3044\u304b\u3069\u3046\u304b\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30df\u30cb\u30d0\u30c3\u30c1\u3054\u3068\u306b\u7570\u306a\u308b\u884c\u5217\u3001\u307e\u305f\u306f\u5171\u901a\u306e\u884c\u5217\u3092\u4e57\u3058\u3066\u3044\u307e\u3059\u3002</font>\n\n```c++\nvoid run() {\n  dynet::ComputationGraph cg;\n\n  auto x = DE::input(cg, dynet::Dim({2}, 3), {\n      1, 2,\n      3, 4,\n      5, 6});\n\n  auto w1 = DE::input(cg, dynet::Dim({2, 2}, 3), {\n      1, 0, 0, 1,\n      0, 1, 1, 0,\n      1, 2, 1, 2});\n  auto y1 = w1 * x;\n  for (const float val : dynet::as_vector(cg.forward(y1))) {\n    cout << val << ' ';\n  }\n  cout << endl;\n\n  auto w2 = DE::input(cg, {2, 2}, {0, 1, 1, 0});\n  auto y2 = w2 * x;\n  for (const float val : dynet::as_vector(cg.forward(y2))) {\n    cout << val << ' ';\n  }\n  cout << endl;\n}\n```\n\n```shell-session\nodashi@lab $ ./a.out\n[dynet] ...\n1 2 4 3 11 22 \n2 1 4 3 6 5 \n\n```\n\n## \u305d\u306e\u4ed6\n\n\u4ed6\u306b\u3082RNN\u3092\u4f7f\u7528\u3059\u308b\u4f8b\u306a\u3069\u304c[\u516c\u5f0f\u306eexamples](https://github.com/clab/dynet/tree/master/examples)\u306b\u8ee2\u304c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\u73fe\u6642\u70b9\u3067\u306f\u5927\u5206\u5f8c\u767a\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067\u3001\u5b9f\u884c\u901f\u5ea6\u3084\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u70b9\u3067\u4ed6\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3088\u308a\u5927\u96d1\u628a\u306a\u52d5\u304d\u65b9\u3092\u3057\u305f\u308a\u3001\u7d30\u304b\u3044\u30d0\u30b0\u304c\u6b8b\u3063\u3066\u3044\u305f\u308a\u3068\u82e5\u5e72\u306e\u96e3\u70b9\u306f\u3042\u308a\u307e\u3059\u3002\u958b\u767a\u9663\u306e\u5bfe\u5fdc\u306f\u304b\u306a\u308a\u901f\u3044\u90e8\u985e\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u4f7f\u3063\u3066\u307f\u3066\u6587\u53e5\u304c\u3042\u308c\u3070[issues](https://github.com/clab/dynet/issues)\u306b\u6295\u3052\u3066\u307f\u308b\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3068\u3044\u3046\u304b\u65e5\u672c\u4eba\u3067\u30e1\u30a4\u30f3\u306b\u4f7f\u3063\u3066\u3044\u308b\u306e\u304c\u81ea\u5206\u3057\u304b\u3044\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\uff08\u6ce3\uff09\nC++\u4f7f\u3048\u308b\u4eba\u306b\u306f\u30de\u30b8\u4fbf\u5229\u306a\u306e\u3067\u4f7f\u3063\u3066\u306d\uff01\n\n## \u304a\u307e\u3051\n\n\u4f55\u756a\u714e\u3058\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001[\u30cb\u30e5\u30fc\u30e9\u30eb\u7ffb\u8a33\u3059\u308b\u30c4\u30fc\u30eb\u3092\u66f8\u304d\u307e\u3057\u305f\u3002](https://github.com/odashi/nmtkit)\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304c\u5168\u90e8DyNet\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u4eca\u5ea6\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n", "tags": ["\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af", "\u6df1\u5c64\u5b66\u7fd2", "C++", "DyNet", "DeepLearning"]}