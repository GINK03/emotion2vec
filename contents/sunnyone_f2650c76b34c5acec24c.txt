{"context": " More than 1 year has passed since last update.node_modules/{{name}}\u306b\u5165\u3063\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u578b\u3092d.ts\u3067\u5b9a\u7fa9\u3057\u3064\u3064\u3001browserify\u304c\u901a\u308b\u66f8\u304d\u65b9\u3002\n\nimport nantoka = require('{{name}}') \u3059\u308b\u3002\nd.ts\u3067\u306f\u3001declare module \"{{name}}\" \u3059\u308b(\u30af\u30aa\u30fc\u30c8\u6ce8\u610f)\u3002\n///<reference\u301c \u3067 d.ts\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n\u30b3\u30fc\u30c9\u3067\u306f\u3001\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n\nnode_modules/mymodule/dist/nantoka.js\n// npm install mymodule\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305fJavaScript\n\n\n\ndokka/mymodule.d.ts\ndeclare module MyModuleInTypeScript { // \u597d\u304d\u306a\u540d\u524d\n   ...\n}\ndeclare module \"mymodule\" { // \u3053\u3053\u304c\u91cd\u8981\uff01\u3053\u306e\u540d\u524d\u3092\u300cnode_modules/{{name}}\u306b\u5408\u308f\u305b\u308b\u3002\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c8\u306b\u6ce8\u610f\u3002\n  export = MyModuleInTypeScript; // export\u3059\u308b\u5bfe\u8c61\u304c\u4f55\u304b\u306f\u5834\u5408\u306b\u3088\u308b\n}\n\n\n\nmain.ts\n/// <reference path=\"../dokka/mymodule.d.ts\" />\nimport mymodule = require('mymodule');\n\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u89e3\u6c7a\nhttps://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript \u3088\u308a\n\nThe first is by finding a .ts file named by an import x = require(...); declaration. That file should be an implementation file with top-level import or export declarations.\nThe second is by finding a .d.ts file, similar to above, except that instead of being an implementation file, it's a declaration file (also with top-level import or export declarations).\nThe final way is by seeing an \"ambient external module declaration\", where we 'declare' a module with a matching quoted name.\n\nnode_modules/{{name}}\u306b\u5165\u3063\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u578b\u3092d.ts\u3067\u5b9a\u7fa9\u3057\u3064\u3064\u3001browserify\u304c\u901a\u308b\u66f8\u304d\u65b9\u3002\n\n* import nantoka = require('{{name}}') \u3059\u308b\u3002\n* d.ts\u3067\u306f\u3001declare module \"{{name}}\" \u3059\u308b(\u30af\u30aa\u30fc\u30c8\u6ce8\u610f)\u3002\n* ///<reference\u301c \u3067 d.ts\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n\u30b3\u30fc\u30c9\u3067\u306f\u3001\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n\n```js:node_modules/mymodule/dist/nantoka.js\n// npm install mymodule\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305fJavaScript\n```\n\n```ts:dokka/mymodule.d.ts\ndeclare module MyModuleInTypeScript { // \u597d\u304d\u306a\u540d\u524d\n   ...\n}\ndeclare module \"mymodule\" { // \u3053\u3053\u304c\u91cd\u8981\uff01\u3053\u306e\u540d\u524d\u3092\u300cnode_modules/{{name}}\u306b\u5408\u308f\u305b\u308b\u3002\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c8\u306b\u6ce8\u610f\u3002\n  export = MyModuleInTypeScript; // export\u3059\u308b\u5bfe\u8c61\u304c\u4f55\u304b\u306f\u5834\u5408\u306b\u3088\u308b\n}\n```\n\n```ts:main.ts\n/// <reference path=\"../dokka/mymodule.d.ts\" />\nimport mymodule = require('mymodule');\n```\n\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u89e3\u6c7a\n https://typescript.codeplex.com/wikipage?title=Modules%20in%20TypeScript \u3088\u308a\n> The first is by finding a .ts file named by an import x = require(...); declaration. That file should be an implementation file with top-level import or export declarations.\n> The second is by finding a .d.ts file, similar to above, except that instead of being an implementation file, it's a declaration file (also with top-level import or export declarations).\n> The final way is by seeing an \"ambient external module declaration\", where we 'declare' a module with a matching quoted name.\n", "tags": ["TypeScript1.4.1", "browserify", "JavaScript"]}