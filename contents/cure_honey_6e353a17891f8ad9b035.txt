{"context": " More than 1 year has passed since last update.\n\nMandelbrot \u56f3\u5f62\nMandelbrot \u56f3\u5f62\u306f\u3001\u5404\u5ea7\u6a19\u70b9\u3067\u306e\u8a08\u7b97\u304c\u72ec\u7acb\u306b\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3001\u4e26\u5217\u5316\u304c\u52b9\u304d\u3084\u3059\u304f\u3088\u304f\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u984c\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002Fortran \u306e\u5834\u5408\u5927\u62b5\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30b9\u30a4\u30c3\u30c1\u3055\u3048\u5165\u308c\u308c\u3070\u81ea\u52d5\u4e26\u5217\u5316\u30fb\u30d9\u30af\u30c8\u30eb\u5316\u304c\u52b9\u3044\u3066\u304f\u308c\u307e\u3059\u3002\n\nFortran\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5834\u5408\u3001Intel Fortran \u3067\u306f\u3001\u81ea\u52d5\u4e26\u5217\u5316\u30fbAVX\u5229\u7528\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001CPU\u4f7f\u7528\u6642\u9593\u306f\u5897\u3048\u307e\u3059\u304c\u3001\u5b9f\u8a08\u7b97\u6642\u9593\u306f\u7d04\u534a\u5206\u5f37\u306b\u6e1b\u308a\u307e\u3059\u3002\n\u5ba3\u8a00\u6587\u3084I/O\u3092\u9664\u3044\u305f\u3001\u5b9f\u969b\u306e\u8a08\u7b97\u3092\u3059\u308b\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3001\u307b\u307c\u6570\u5b66\u7684\u306a\u5b9a\u7fa9\u5f0f\u306e\u307e\u307e\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u53cd\u5fa9\u306e\u90e8\u5206\u306f\u30eb\u30fc\u30d7\u306b\u9806\u5e8f\u304c\u3042\u308b\u306e\u3067 DO LOOP \u3092\u7528\u3044\u307e\u3059\u3002\u4e00\u65b9\u3001\u5404\u5ea7\u6a19\u70b9\u306b\u95a2\u3059\u308b\u8a08\u7b97\u306b\u306f\u9806\u5e8f\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3001\u4e26\u5217\u6027\u3092\u610f\u5473\u3059\u308b\u5168\u914d\u5217\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u6f38\u5316\u5f0f\u306e\u90e8\u5206 z = z**2 + c \u306f\u3001\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u306e\u8a08\u7b97\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u914d\u5217\u6f14\u7b97\u3067\u30d4\u30af\u30bb\u30eb\u4e0a\u306e\u5168\u70b9\u306b\u6e21\u3063\u3066\u4e00\u5ea6\u306b\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001\u6570\u5b66\u7684\u306b\u306f\u767a\u6563\u304c\u6c7a\u307e\u3063\u305f\u70b9 (|z| > 2.0) \u306b\u3064\u3044\u3066\u306f\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u8a08\u7b97\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3001z=z*z+c \u306f WHERE \u69cb\u6587\u306e\u4e2d\u306b\u5165\u308c\u3066\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4e26\u5217\u30fb\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u3092\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u3080\u3057\u308d\u30e1\u30e2\u30ea\u30fc\u4e0a\u306e\u9023\u7d9a\u756a\u5730\u3067\u4e00\u6c17\u306b\u8a08\u7b97\u3057\u3066\u3001\u3042\u3068\u304b\u3089\u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u3092\u6368\u3066\u305f\u65b9\u304c\u52b9\u7387\u304c\u3044\u3044\u306e\u3067\u3001\u5916\u306b\u51fa\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u7121\u99c4\u306a\u8a08\u7b97\u306f\u3057\u307e\u3059\u304c\u3000\u30bf\u30fc\u30f3\u30a2\u30e9\u30a6\u30f3\u30c9\u7684\u306a\u610f\u5473\u3067\u3001\u65e9\u304f\u7d42\u308f\u308a\u307e\u3059\u3002\n ! main iteration        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        z = z * z + c\n        where (abs(z) < 2.0) niter = i\n      end do\n\n\u672c\u6765\u306e where \u69cb\u6587\u306f\u3001\uff16\uff10\u3001\uff17\uff10\u5e74\u4ee3\u306e\u4e26\u5217\u8a08\u7b97\u6a5f\u306e\u5b9f\u88c5\u306b\u57fa\u3065\u3044\u3066\u3001\u305d\u3046\u3044\u3046\u5168\u8a08\u7b97\uff0b\u30de\u30b9\u30af\u306b\u3088\u308b\u53d6\u6368\u9078\u629e\u3092\u524d\u63d0\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u305f\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001Intel Fortran \u306e\u5834\u5408\u306f\u3001\u81ea\u52d5\u4e26\u5217\u5316\u3092\u304b\u3051\u3066\u307f\u308b\u3068 WHERE \u69cb\u6587\u306e mask\n \u51e6\u7406\u306f\u305d\u306e\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n ! main iteration        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        where (abs(z) < 2.0) \n          z = z * z + c\n          niter = i\n        end where  \n      end do\n\n\u672c\u6765\u306e\u5f62\n\n\u5b9f\u884c\u7d50\u679c\n\n\u56f3\u306f BMP \u3092 PNG \u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\nBMP \u66f8\u304d\u51fa\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n ! convert to t_RGB    \n      pure elemental type(t_rgb) function to_rgb(ir, ig, ib)\n        integer, intent(in) :: ir, ig, ib\n        to_rgb = t_rgb(achar(ib), achar(ig), achar(ir))\n      end function to_rgb  \n    end module m_bmp\n\n\u30e1\u30a4\u30f3\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\n    program Mandel\n      use m_bmp\n      implicit none\n      integer, parameter :: nx = 1920, ny = 1920, maxiter = 255\n      real   , parameter :: x0 = -2.0, x1 = 1.0, y0 = -1.5, y1 = 1.5\n      complex :: c(nx, ny), z(nx, ny)\n      integer :: i, niter(nx, ny)\n!\n! make 2D-mesh :  c(:, :)\n!      \n      block\n        real  :: x(nx), y(nx)\n        integer :: i, j  \n        x = [( (x1 - x0) / (nx - 1) * (i - 1) + x0, i = 1, nx )]\n        y = [( (y1 - y0) / (ny - 1) * (i - 1) + y0, i = 1, ny )]\n        forall (i = 1:nx, j = 1:ny) c(i, j) = cmplx(x(i), y(j)) \n      end block\n !   \n ! main iteration : niter(:, :)        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        z = z * z + c\n        where (abs(z) < 2.0) niter = i\n      end do\n !\n ! make bmp file  : Mandel.bmp   \n !\n      block \n        type (t_bmp) :: bmp\n        allocate(bmp%rgb(nx, ny))\n        bmp%rgb = to_rgb(255 - niter,255 - niter, 255 - niter)\n        call bmp%wr('Mandel')\n      end block  \n      stop\n    end program Mandel\n\n##Mandelbrot \u56f3\u5f62\nMandelbrot \u56f3\u5f62\u306f\u3001\u5404\u5ea7\u6a19\u70b9\u3067\u306e\u8a08\u7b97\u304c\u72ec\u7acb\u306b\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3001\u4e26\u5217\u5316\u304c\u52b9\u304d\u3084\u3059\u304f\u3088\u304f\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u984c\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002Fortran \u306e\u5834\u5408\u5927\u62b5\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30b9\u30a4\u30c3\u30c1\u3055\u3048\u5165\u308c\u308c\u3070\u81ea\u52d5\u4e26\u5217\u5316\u30fb\u30d9\u30af\u30c8\u30eb\u5316\u304c\u52b9\u3044\u3066\u304f\u308c\u307e\u3059\u3002\n\n##Fortran\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5834\u5408\u3001Intel Fortran \u3067\u306f\u3001\u81ea\u52d5\u4e26\u5217\u5316\u30fbAVX\u5229\u7528\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001CPU\u4f7f\u7528\u6642\u9593\u306f\u5897\u3048\u307e\u3059\u304c\u3001\u5b9f\u8a08\u7b97\u6642\u9593\u306f\u7d04\u534a\u5206\u5f37\u306b\u6e1b\u308a\u307e\u3059\u3002\n\n\u5ba3\u8a00\u6587\u3084I/O\u3092\u9664\u3044\u305f\u3001\u5b9f\u969b\u306e\u8a08\u7b97\u3092\u3059\u308b\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3001\u307b\u307c\u6570\u5b66\u7684\u306a\u5b9a\u7fa9\u5f0f\u306e\u307e\u307e\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u53cd\u5fa9\u306e\u90e8\u5206\u306f\u30eb\u30fc\u30d7\u306b\u9806\u5e8f\u304c\u3042\u308b\u306e\u3067 DO LOOP \u3092\u7528\u3044\u307e\u3059\u3002\u4e00\u65b9\u3001\u5404\u5ea7\u6a19\u70b9\u306b\u95a2\u3059\u308b\u8a08\u7b97\u306b\u306f\u9806\u5e8f\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3001\u4e26\u5217\u6027\u3092\u610f\u5473\u3059\u308b\u5168\u914d\u5217\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u6f38\u5316\u5f0f\u306e\u90e8\u5206 z = z**2 + c \u306f\u3001\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u306e\u8a08\u7b97\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u914d\u5217\u6f14\u7b97\u3067\u30d4\u30af\u30bb\u30eb\u4e0a\u306e\u5168\u70b9\u306b\u6e21\u3063\u3066\u4e00\u5ea6\u306b\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3001\u6570\u5b66\u7684\u306b\u306f\u767a\u6563\u304c\u6c7a\u307e\u3063\u305f\u70b9 (|z| > 2.0) \u306b\u3064\u3044\u3066\u306f\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u8a08\u7b97\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3001z=z*z+c \u306f WHERE \u69cb\u6587\u306e\u4e2d\u306b\u5165\u308c\u3066\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4e26\u5217\u30fb\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u3092\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u3080\u3057\u308d\u30e1\u30e2\u30ea\u30fc\u4e0a\u306e\u9023\u7d9a\u756a\u5730\u3067\u4e00\u6c17\u306b\u8a08\u7b97\u3057\u3066\u3001\u3042\u3068\u304b\u3089\u4e0d\u8981\u306a\u30c7\u30fc\u30bf\u3092\u6368\u3066\u305f\u65b9\u304c\u52b9\u7387\u304c\u3044\u3044\u306e\u3067\u3001\u5916\u306b\u51fa\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u7121\u99c4\u306a\u8a08\u7b97\u306f\u3057\u307e\u3059\u304c\u3000\u30bf\u30fc\u30f3\u30a2\u30e9\u30a6\u30f3\u30c9\u7684\u306a\u610f\u5473\u3067\u3001\u65e9\u304f\u7d42\u308f\u308a\u307e\u3059\u3002\n\n```fortran\n ! main iteration        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        z = z * z + c\n        where (abs(z) < 2.0) niter = i\n      end do\n```\n\n\u672c\u6765\u306e where \u69cb\u6587\u306f\u3001\uff16\uff10\u3001\uff17\uff10\u5e74\u4ee3\u306e\u4e26\u5217\u8a08\u7b97\u6a5f\u306e\u5b9f\u88c5\u306b\u57fa\u3065\u3044\u3066\u3001\u305d\u3046\u3044\u3046\u5168\u8a08\u7b97\uff0b\u30de\u30b9\u30af\u306b\u3088\u308b\u53d6\u6368\u9078\u629e\u3092\u524d\u63d0\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u305f\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001Intel Fortran \u306e\u5834\u5408\u306f\u3001\u81ea\u52d5\u4e26\u5217\u5316\u3092\u304b\u3051\u3066\u307f\u308b\u3068 WHERE \u69cb\u6587\u306e mask\n \u51e6\u7406\u306f\u305d\u306e\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\n\n```fortran\n ! main iteration        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        where (abs(z) < 2.0) \n          z = z * z + c\n          niter = i\n        end where  \n      end do\n```\n\u672c\u6765\u306e\u5f62\n\n\n###\u5b9f\u884c\u7d50\u679c\n![Mandel.png](https://qiita-image-store.s3.amazonaws.com/0/44522/742d0f67-8a2a-ee2f-0e11-e4b4447a60d1.png)\n\u56f3\u306f BMP \u3092 PNG \u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u30d7\u30ed\u30b0\u30e9\u30e0\nBMP \u66f8\u304d\u51fa\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```fortran\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n ! convert to t_RGB    \n      pure elemental type(t_rgb) function to_rgb(ir, ig, ib)\n        integer, intent(in) :: ir, ig, ib\n        to_rgb = t_rgb(achar(ib), achar(ig), achar(ir))\n      end function to_rgb  \n    end module m_bmp\n```\n\n\u30e1\u30a4\u30f3\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```fortran\n    program Mandel\n      use m_bmp\n      implicit none\n      integer, parameter :: nx = 1920, ny = 1920, maxiter = 255\n      real   , parameter :: x0 = -2.0, x1 = 1.0, y0 = -1.5, y1 = 1.5\n      complex :: c(nx, ny), z(nx, ny)\n      integer :: i, niter(nx, ny)\n!\n! make 2D-mesh :  c(:, :)\n!      \n      block\n        real  :: x(nx), y(nx)\n        integer :: i, j  \n        x = [( (x1 - x0) / (nx - 1) * (i - 1) + x0, i = 1, nx )]\n        y = [( (y1 - y0) / (ny - 1) * (i - 1) + y0, i = 1, ny )]\n        forall (i = 1:nx, j = 1:ny) c(i, j) = cmplx(x(i), y(j)) \n      end block\n !   \n ! main iteration : niter(:, :)        \n !     \n      z = (0.0, 0.0)\n      do i = 1, maxiter\n        z = z * z + c\n        where (abs(z) < 2.0) niter = i\n      end do\n !\n ! make bmp file  : Mandel.bmp   \n !\n      block \n        type (t_bmp) :: bmp\n        allocate(bmp%rgb(nx, ny))\n        bmp%rgb = to_rgb(255 - niter,255 - niter, 255 - niter)\n        call bmp%wr('Mandel')\n      end block  \n      stop\n    end program Mandel\n```\n", "tags": ["Fortran2003", "Mandelbrot"]}