{"context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u914d\u5217\u306e\u914d\u5217\u3067\u51fa\u6765\u308b\u3053\u3068\u3084\u3001\u914d\u5217\u306e\u914d\u5217\u306e\u4f5c\u308a\u65b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\nflatten\njoinWithSeparator\nsplit\nflatMap\uff08\u8ffd\u8a18\uff09\n\n\u306e4\u3064\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nflatten\n\nextension SequenceType where Generator.Element : SequenceType {\n    /// A concatenation of the elements of `self`.\n    @warn_unused_result\n    public func flatten() -> FlattenSequence<Self>\n}\n\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u914d\u5217\u306e\u914d\u5217\u3092\u3059\u3079\u3066\u7d71\u5408\u3057\u3066\u30011\u3064\u306e\u914d\u5217\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\nflatten\u3057\u305f\u307e\u307e\u3060\u3068\u3001FlattenBidirectionalCollection\u3068\u3044\u3046\u4ef0\u3005\u3057\u3044\u578b\u306e\u307e\u307e\u306a\u306e\u3067\u3059\u304c\u3001map\u3084[T]( )\u3092\u4f7f\u3046\u3068\u671b\u307f\u306e\u578b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u305d\u306e\u307e\u307efor\u6587\u3067\u56de\u3059\u969b\u306f\u305d\u3046\u3044\u3063\u305f\u51e6\u7406\u306f\u4e0d\u8981\u3067\u3059\u3002\n\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\narrayOfArray.flatten()\n// FlattenBidirectionalCollection<Array<Array<Int>>>(_base: [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\narrayOfArray.flatten().map { $0 }\n[Int](arrayOfArray.flatten())\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\njoinWithSeparator\n\n\u305d\u306e1\n\nextension SequenceType where Generator.Element : SequenceType {\n    /// Returns a view, whose elements are the result of interposing a given\n    /// `separator` between the elements of the sequence `self`.\n    ///\n    /// For example,\n    /// `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].joinWithSeparator([-1, -2])`\n    /// yields `[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]`.\n    @warn_unused_result\n    public func joinWithSeparator<Separator : SequenceType where Separator.Generator.Element == Generator.Element.Generator.Element>(separator: Separator) -> JoinSequence<Self>\n}\n\n\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\n\u4f8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u914d\u5217\u3068\u914d\u5217\u306e\u9593\u306bSeparator\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\u6ce8\u610f\u3059\u308b\u3079\u304d\u3068\u3053\u308d\u306f\u3001Separator\u3082SequenceType\u3001\u3064\u307e\u308a\u3001\u914d\u5217\u3067\u3042\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\narrayOfArray.joinWithSeparator([-1, -2])\n// JoinSequence<Array<Array<Int>>>(_base: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], _separator: ContiguousArray([-1, -2]))\n\narrayOfArray.joinWithSeparator([-1, -2]).map { $0 }\n[Int](arrayOfArray.joinWithSeparator([-1, -2]))\n// [1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\n\n\u3053\u3061\u3089\u3082map\u3084[T]( )\u3067\u6574\u5f62\u3067\u304d\u307e\u3059\u3002\n\n\u305d\u306e2\n\nextension SequenceType where Generator.Element == String {\n    /// Interpose the `separator` between elements of `self`, then concatenate\n    /// the result.  For example:\n    ///\n    ///     [\"foo\", \"bar\", \"baz\"].joinWithSeparator(\"-|-\") // \"foo-|-bar-|-baz\"\n    @warn_unused_result\n    public func joinWithSeparator(separator: String) -> String\n}\n\n\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001[String]\u578b\u306e\u914d\u5217\u3060\u3068\u3001separator\u3067\u914d\u5217\u5185\u306e\u8981\u7d20\u3092\u7d50\u5408\u3055\u305b\u305fString\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\n\nlet strArray = [\"foo\", \"bar\", \"buz\"]\n\nstrArray.joinWithSeparator(\"-|-\")\n// \"foo-|-bar-|-buz\"\n\n\nPython\u306ejoin\u306e\u3088\u3046\u306b\u4f7f\u3044\u305f\u3051\u308c\u3070\u3001\n\nextension String {\n    func join (seq: [String]) -> String {\n        return seq.joinWithSeparator(self)\n    }\n}\n\n\u3068\u5ba3\u8a00\u3057\u3066\u3001\n\nlet strArray = [\"foo\", \"bar\", \"buz\"]\n\n\"\".join(strArray)\n// \"foobarbuz\"\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nsplit\n5\u7a2e\u985e\u307b\u3069\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066CollectionType\u306e2\u3064\u3060\u3051\u3002\u3042\u3068\u306e3\u3064\u306fSequenceType\n\nextension CollectionType where Generator.Element : Equatable {\n    /// Returns the maximal `SubSequence`s of `self`, in order, around a\n    /// `separator` element.\n    ///\n    /// - Parameter maxSplit: The maximum number of `SubSequence`s to\n    ///   return, minus 1.\n    ///   If `maxSplit + 1` `SubSequence`s are returned, the last one is\n    ///   a suffix of `self` containing the remaining elements.\n    ///   The default value is `Int.max`.\n    ///\n    /// - Parameter allowEmptySubsequences: If `true`, an empty `SubSequence`\n    ///   is produced in the result for each pair of consecutive elements\n    ///   satisfying `isSeparator`.\n    ///   The default value is `false`.\n    ///\n    /// - Requires: `maxSplit >= 0`\n    @warn_unused_result\n    public func split(separator: Self.Generator.Element, maxSplit: Int = default, allowEmptySlices: Bool = default) -> [Self.SubSequence]\n}\n\nextension CollectionType {\n    @warn_unused_result\n    public func split(maxSplit: Int = default, allowEmptySlices: Bool = default, @noescape isSeparator: (Self.Generator.Element) throws -> Bool) rethrows -> [Self.SubSequence]\n}\n\n\nmaxSplit: \u6700\u5927\u5206\u5272\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306fInt.max\uff09\nseparator: \u914d\u5217\u306e\u5207\u308c\u76ee\u3092\u6307\u5b9a\u3059\u308b\nallowEmptySlices: \u7a7a\u306e\u914d\u5217\u306e\u751f\u6210\u3082\u8a31\u5bb9\u3059\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\uff09\n\n\n\u4f7f\u3044\u65b9\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\narray.split(1)\n// [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])]\n\narray.split(1).map { $0.map { $0 } }\narray.split(1).map { [Int]($0) }\n// [[7, 2], [2], [3, 2, 3, 4], [5]]\n\n\n// *** allowEmptySlices: true\n\narray.split(1, allowEmptySlices: true)\n// [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])]\n\narray.split(1, allowEmptySlices: true).map { $0.map { $0 } }\narray.split(1, allowEmptySlices: true).map { [Int]($0) }\n// [[7, 2], [2], [], [3, 2, 3, 4], [5]]\n\n\n// *** isSeparator\u3067\u6307\u5b9a\uff08\u5076\u6570\u90e8\u5206\u3067\u5206\u5272\uff09\n\narray.split { $0 % 2 == 0 }\n// [ArraySlice([7]), ArraySlice([1]), ArraySlice([1, 1, 3]), ArraySlice([3]), ArraySlice([1, 5])]\n\narray.split { $0 % 2 == 0 }.map { $0.map { $0 } }\narray.split { $0 % 2 == 0 }.map { [Int]($0) }\n// [[7], [1], [1, 1, 3], [3], [1, 5]]\n\n\n\u4e0a\u8a18\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u51fa\u6765\u308b\u3053\u3068\n\n\u914d\u5217\u5185\u306e\u3042\u308b\u8981\u7d20\u3092\u524a\u9664\u3057\u305f\u914d\u5217\u3092\u751f\u6210\u3059\u308b\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\n// -- 1\u3092\u524a\u9664 -- array.filter { $0 != 1 }\n\narray.split(1).flatten().map { $0 }\n[Int](array.split(1).flatten())\n// [7, 2, 2, 3, 2, 3, 4, 5]\n\n// -- \u5076\u6570\u3092\u524a\u9664 -- array.filter { $0 % 2 != 0 }\n\narray.split { $0 % 2 == 0 }.flatten().map { $0 }\n[Int](array.split { $0 % 2 == 0 }.flatten())\n// [7, 1, 1, 1, 3, 3, 1, 5]\n\n\n\u914d\u5217\u5185\u306e\u3042\u308b\u8981\u7d20\u3092\u5225\u306e\u5024\u3068\u7f6e\u63db\u3059\u308b\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\n// -- 1\u30920\u306b -- array.map { $0 == 1 ? 0 : $0 }\n\narray.split(1, allowEmptySlices: true).joinWithSeparator([0])\n// JoinSequence<Array<ArraySlice<Int>>>(_base: [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])], _separator: ContiguousArray([0]))\n\narray.split(1, allowEmptySlices: true).joinWithSeparator([0]).map { $0 }\n[Int](array.split(1, allowEmptySlices: true).joinWithSeparator([0]))\n// [7, 2, 0, 2, 0, 0, 3, 2, 3, 4, 0, 5]\n\n\n\u8ffd\u8a18\n@koher \u3055\u3093\u306e\u3054\u6307\u6458\u306b\u3088\u308a\u3001[T]\u578b\u3078\u306e\u5909\u63db\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nSwift 2.0\u306e\u65b0\u3057\u3044flatMap\u304c\u4fbf\u5229\u904e\u304e\u308b\u306b\u3042\u308b\u3088\u3046\u306a\u3001nil\u306e\u6271\u3044\u4ee5\u5916\u306b\u3082flatMap\u306f\u4fbf\u5229\u904e\u304e\u3067\u3057\u305f\u3002\n\nflatMap\n\n\u305d\u306e1 - nil\u306e\u6271\u3044\u306eflatMap\n\n\nextension SequenceType {\n    /// Return an `Array` containing the non-nil results of mapping\n    /// `transform` over `self`.\n    ///\n    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`\n    ///   and *N* is the length of the result.\n    @warn_unused_result\n    public func flatMap<T>(@noescape transform: (Self.Generator.Element) throws -> T?) rethrows -> [T]\n}\n\n\n\u305d\u306e2 - \u914d\u5217\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066\u306eflatMap\n\n\nextension SequenceType {\n    /// Return an `Array` containing the concatenated results of mapping\n    /// `transform` over `self`.\n    ///\n    ///     s.flatMap(transform)\n    ///\n    /// is equivalent to\n    ///\n    ///     Array(s.map(transform).flatten())\n    ///\n    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`\n    ///   and *N* is the length of the result.\n    @warn_unused_result\n    public func flatMap<S : SequenceType>(transform: (Self.Generator.Element) throws -> S) rethrows -> [S.Generator.Element]\n}\n\n\n\u4f7f\u3044\u65b9\n\n// \u7d50\u5408\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\narrayOfArray.flatMap { $0 }\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n// 1\u306e\u524a\u9664\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\narray.split(1).flatMap { $0 }\n// [7, 2, 2, 3, 2, 3, 4, 5]\n\n\u4eca\u307e\u3067\u3001\n\narrayOfArray.flatten().map { $0 }\n[Int](arrayOfArray.flatten())\n\narray.split(1).flatten().map { $0 }\n[Int](array.split(1).flatten())\nArray(array.split(1).map { $0 }.flatten())\n\n\u3068\u3057\u3066\u3044\u305f\u306e\u3092\u968f\u5206\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\n\u914d\u5217\u306e\u914d\u5217\u3067\u51fa\u6765\u308b\u3053\u3068\u3084\u3001\u914d\u5217\u306e\u914d\u5217\u306e\u4f5c\u308a\u65b9\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n- flatten\n- joinWithSeparator\n- split\n- flatMap\uff08\u8ffd\u8a18\uff09\n\n\u306e4\u3064\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# flatten\n\n```swift\n\nextension SequenceType where Generator.Element : SequenceType {\n    /// A concatenation of the elements of `self`.\n    @warn_unused_result\n    public func flatten() -> FlattenSequence<Self>\n}\n```\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u914d\u5217\u306e\u914d\u5217\u3092\u3059\u3079\u3066\u7d71\u5408\u3057\u3066\u30011\u3064\u306e\u914d\u5217\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n## \u4f7f\u3044\u65b9\n\n`flatten`\u3057\u305f\u307e\u307e\u3060\u3068\u3001`FlattenBidirectionalCollection`\u3068\u3044\u3046\u4ef0\u3005\u3057\u3044\u578b\u306e\u307e\u307e\u306a\u306e\u3067\u3059\u304c\u3001`map`\u3084`[T]( )`\u3092\u4f7f\u3046\u3068\u671b\u307f\u306e\u578b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u305d\u306e\u307e\u307efor\u6587\u3067\u56de\u3059\u969b\u306f\u305d\u3046\u3044\u3063\u305f\u51e6\u7406\u306f\u4e0d\u8981\u3067\u3059\u3002\n\n```swift\n\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\narrayOfArray.flatten()\n// FlattenBidirectionalCollection<Array<Array<Int>>>(_base: [[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\narrayOfArray.flatten().map { $0 }\n[Int](arrayOfArray.flatten())\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n\n# joinWithSeparator\n\n##\u305d\u306e1\n\n```swift\n\nextension SequenceType where Generator.Element : SequenceType {\n    /// Returns a view, whose elements are the result of interposing a given\n    /// `separator` between the elements of the sequence `self`.\n    ///\n    /// For example,\n    /// `[[1, 2, 3], [4, 5, 6], [7, 8, 9]].joinWithSeparator([-1, -2])`\n    /// yields `[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]`.\n    @warn_unused_result\n    public func joinWithSeparator<Separator : SequenceType where Separator.Generator.Element == Generator.Element.Generator.Element>(separator: Separator) -> JoinSequence<Self>\n}\n\n```\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n###\u4f7f\u3044\u65b9\n\n\u4f8b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u914d\u5217\u3068\u914d\u5217\u306e\u9593\u306b`Separator`\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\u6ce8\u610f\u3059\u308b\u3079\u304d\u3068\u3053\u308d\u306f\u3001`Separator`\u3082`SequenceType`\u3001\u3064\u307e\u308a\u3001\u914d\u5217\u3067\u3042\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\n```swift\n\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\narrayOfArray.joinWithSeparator([-1, -2])\n// JoinSequence<Array<Array<Int>>>(_base: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], _separator: ContiguousArray([-1, -2]))\n\narrayOfArray.joinWithSeparator([-1, -2]).map { $0 }\n[Int](arrayOfArray.joinWithSeparator([-1, -2]))\n// [1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\n```\n\n\u3053\u3061\u3089\u3082`map`\u3084`[T]( )`\u3067\u6574\u5f62\u3067\u304d\u307e\u3059\u3002\n\n##\u305d\u306e2\n\n```swift\n\nextension SequenceType where Generator.Element == String {\n    /// Interpose the `separator` between elements of `self`, then concatenate\n    /// the result.  For example:\n    ///\n    ///     [\"foo\", \"bar\", \"baz\"].joinWithSeparator(\"-|-\") // \"foo-|-bar-|-baz\"\n    @warn_unused_result\n    public func joinWithSeparator(separator: String) -> String\n}\n\n```\n\n\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001`[String]`\u578b\u306e\u914d\u5217\u3060\u3068\u3001`separator`\u3067\u914d\u5217\u5185\u306e\u8981\u7d20\u3092\u7d50\u5408\u3055\u305b\u305f`String`\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n###\u4f7f\u3044\u65b9\n\n```swift\n\nlet strArray = [\"foo\", \"bar\", \"buz\"]\n\nstrArray.joinWithSeparator(\"-|-\")\n// \"foo-|-bar-|-buz\"\n```\n\n---\n\nPython\u306e`join`\u306e\u3088\u3046\u306b\u4f7f\u3044\u305f\u3051\u308c\u3070\u3001\n\n```swift\n\nextension String {\n    func join (seq: [String]) -> String {\n        return seq.joinWithSeparator(self)\n    }\n}\n```\n\u3068\u5ba3\u8a00\u3057\u3066\u3001\n\n```swift\n\nlet strArray = [\"foo\", \"bar\", \"buz\"]\n\n\"\".join(strArray)\n// \"foobarbuz\"\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n#split\n\n5\u7a2e\u985e\u307b\u3069\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066`CollectionType`\u306e2\u3064\u3060\u3051\u3002\u3042\u3068\u306e3\u3064\u306f`SequenceType`\n\n```swift\n\nextension CollectionType where Generator.Element : Equatable {\n    /// Returns the maximal `SubSequence`s of `self`, in order, around a\n    /// `separator` element.\n    ///\n    /// - Parameter maxSplit: The maximum number of `SubSequence`s to\n    ///   return, minus 1.\n    ///   If `maxSplit + 1` `SubSequence`s are returned, the last one is\n    ///   a suffix of `self` containing the remaining elements.\n    ///   The default value is `Int.max`.\n    ///\n    /// - Parameter allowEmptySubsequences: If `true`, an empty `SubSequence`\n    ///   is produced in the result for each pair of consecutive elements\n    ///   satisfying `isSeparator`.\n    ///   The default value is `false`.\n    ///\n    /// - Requires: `maxSplit >= 0`\n    @warn_unused_result\n    public func split(separator: Self.Generator.Element, maxSplit: Int = default, allowEmptySlices: Bool = default) -> [Self.SubSequence]\n}\n\nextension CollectionType {\n    @warn_unused_result\n    public func split(maxSplit: Int = default, allowEmptySlices: Bool = default, @noescape isSeparator: (Self.Generator.Element) throws -> Bool) rethrows -> [Self.SubSequence]\n}\n```\n\n- maxSplit: \u6700\u5927\u5206\u5272\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f`Int.max`\uff09\n- separator: \u914d\u5217\u306e\u5207\u308c\u76ee\u3092\u6307\u5b9a\u3059\u308b\n- allowEmptySlices: \u7a7a\u306e\u914d\u5217\u306e\u751f\u6210\u3082\u8a31\u5bb9\u3059\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f`false`\uff09\n\n##\u4f7f\u3044\u65b9\n\n```swift\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\narray.split(1)\n// [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])]\n\narray.split(1).map { $0.map { $0 } }\narray.split(1).map { [Int]($0) }\n// [[7, 2], [2], [3, 2, 3, 4], [5]]\n```\n\n```swift\n\n// *** allowEmptySlices: true\n\narray.split(1, allowEmptySlices: true)\n// [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])]\n\narray.split(1, allowEmptySlices: true).map { $0.map { $0 } }\narray.split(1, allowEmptySlices: true).map { [Int]($0) }\n// [[7, 2], [2], [], [3, 2, 3, 4], [5]]\n```\n```swift\n\n// *** isSeparator\u3067\u6307\u5b9a\uff08\u5076\u6570\u90e8\u5206\u3067\u5206\u5272\uff09\n\narray.split { $0 % 2 == 0 }\n// [ArraySlice([7]), ArraySlice([1]), ArraySlice([1, 1, 3]), ArraySlice([3]), ArraySlice([1, 5])]\n\narray.split { $0 % 2 == 0 }.map { $0.map { $0 } }\narray.split { $0 % 2 == 0 }.map { [Int]($0) }\n// [[7], [1], [1, 1, 3], [3], [1, 5]]\n```\n# \u4e0a\u8a18\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u51fa\u6765\u308b\u3053\u3068\n\n## \u914d\u5217\u5185\u306e\u3042\u308b\u8981\u7d20\u3092\u524a\u9664\u3057\u305f\u914d\u5217\u3092\u751f\u6210\u3059\u308b\n\n```swift\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\n// -- 1\u3092\u524a\u9664 -- array.filter { $0 != 1 }\n\narray.split(1).flatten().map { $0 }\n[Int](array.split(1).flatten())\n// [7, 2, 2, 3, 2, 3, 4, 5]\n\n// -- \u5076\u6570\u3092\u524a\u9664 -- array.filter { $0 % 2 != 0 }\n\narray.split { $0 % 2 == 0 }.flatten().map { $0 }\n[Int](array.split { $0 % 2 == 0 }.flatten())\n// [7, 1, 1, 1, 3, 3, 1, 5]\n```\n\n## \u914d\u5217\u5185\u306e\u3042\u308b\u8981\u7d20\u3092\u5225\u306e\u5024\u3068\u7f6e\u63db\u3059\u308b\n\n```swift\n\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\n\n// -- 1\u30920\u306b -- array.map { $0 == 1 ? 0 : $0 }\n\narray.split(1, allowEmptySlices: true).joinWithSeparator([0])\n// JoinSequence<Array<ArraySlice<Int>>>(_base: [ArraySlice([7, 2]), ArraySlice([2]), ArraySlice([]), ArraySlice([3, 2, 3, 4]), ArraySlice([5])], _separator: ContiguousArray([0]))\n\narray.split(1, allowEmptySlices: true).joinWithSeparator([0]).map { $0 }\n[Int](array.split(1, allowEmptySlices: true).joinWithSeparator([0]))\n// [7, 2, 0, 2, 0, 0, 3, 2, 3, 4, 0, 5]\n```\n\n#\u8ffd\u8a18\n\n@koher \u3055\u3093\u306e\u3054\u6307\u6458\u306b\u3088\u308a\u3001`[T]`\u578b\u3078\u306e\u5909\u63db\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n[Swift 2.0\u306e\u65b0\u3057\u3044flatMap\u304c\u4fbf\u5229\u904e\u304e\u308b](http://qiita.com/koher/items/6a95cb8edb04fb81f787)\u306b\u3042\u308b\u3088\u3046\u306a\u3001`nil`\u306e\u6271\u3044\u4ee5\u5916\u306b\u3082`flatMap`\u306f\u4fbf\u5229\u904e\u304e\u3067\u3057\u305f\u3002\n\n#flatMap\n\n##\u305d\u306e1 - `nil`\u306e\u6271\u3044\u306e`flatMap`\n\n```swift\n\nextension SequenceType {\n    /// Return an `Array` containing the non-nil results of mapping\n    /// `transform` over `self`.\n    ///\n    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`\n    ///   and *N* is the length of the result.\n    @warn_unused_result\n    public func flatMap<T>(@noescape transform: (Self.Generator.Element) throws -> T?) rethrows -> [T]\n}\n```\n\n##\u305d\u306e2 - \u914d\u5217\u306e\u914d\u5217\u306b\u5bfe\u3057\u3066\u306e`flatMap`\n\n```swift\n\nextension SequenceType {\n    /// Return an `Array` containing the concatenated results of mapping\n    /// `transform` over `self`.\n    ///\n    ///     s.flatMap(transform)\n    ///\n    /// is equivalent to\n    ///\n    ///     Array(s.map(transform).flatten())\n    ///\n    /// - Complexity: O(*M* + *N*), where *M* is the length of `self`\n    ///   and *N* is the length of the result.\n    @warn_unused_result\n    public func flatMap<S : SequenceType>(transform: (Self.Generator.Element) throws -> S) rethrows -> [S.Generator.Element]\n}\n```\n\n###\u4f7f\u3044\u65b9\n\n```swift\n\n// \u7d50\u5408\nlet arrayOfArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\narrayOfArray.flatMap { $0 }\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n// 1\u306e\u524a\u9664\nlet array = [7, 2, 1, 2, 1, 1, 3, 2, 3, 4, 1, 5]\narray.split(1).flatMap { $0 }\n// [7, 2, 2, 3, 2, 3, 4, 5]\n```\n\n\u4eca\u307e\u3067\u3001\n\n```swift\n\narrayOfArray.flatten().map { $0 }\n[Int](arrayOfArray.flatten())\n\narray.split(1).flatten().map { $0 }\n[Int](array.split(1).flatten())\nArray(array.split(1).map { $0 }.flatten())\n```\n\n\u3068\u3057\u3066\u3044\u305f\u306e\u3092\u968f\u5206\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n", "tags": ["Swift", "Swift2"]}