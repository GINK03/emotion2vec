{"context": "\n\n\u306f\u3058\u3081\u306b\n\u30fbStreamAPI\u306e\u4ee3\u8868\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3068\u3001\u57fa\u672c\u7684\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u30fbStreamAPI\u306e\u8003\u3048\u65b9\u3084\u5fdc\u7528\u4f8b\u3001\u30c6\u30af\u30cb\u30c3\u30af\u306b\u3064\u3044\u3066\u306f\u4ed6\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3078\u59d4\u8b72\u3057\u3001\u3053\u3053\u3067\u306f\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3088\u3046\u306b\u52aa\u3081\u307e\u3059\u3002\n\u30fbStream\u306f\u30e9\u30e0\u30c0\u5f0f\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4e0e\u3048\u3066\u66f8\u304f\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\u3001\u3042\u3048\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\nStreamAPI\u3068\u306f\n\u30fbSE8\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3001\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3092\u6271\u3046\u305f\u3081\u306eAPI\u3002\u4e3b\u306a\u76ee\u7684\u306f\u4e26\u5217\u51e6\u7406\u3078\u306e\u5bfe\u5fdc\u3002StreamAPI\u3092\u7528\u3044\u308b\u3068\u3001\u9806\u6b21\u51e6\u7406\u304b\u3089\u4e26\u884c\u51e6\u7406\u3078\u306e\u5207\u66ff\u3048\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002\n\u30fbjava.util.stream\u30d1\u30c3\u30b1\u30fc\u30b8\u914d\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3067\u3042\u308a\u3001java.io\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u7528\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u306f\u5225\u7269\u3002\n\u30fbjava.util.stream\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001BaseStream\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u57fa\u5e95\u3068\u3057\u3066\u3001\u53c2\u7167\u578b\u3092\u6271\u3046\u305f\u3081\u306eStream\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3092\u6271\u3046\u305f\u3081\u306e3\u3064\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002\n\u30fbStream\u306fList\u3084Map\u306a\u3069\u306e\u30c7\u30fc\u30bf\u96c6\u5408\u3092\u3082\u3068\u306b\u751f\u6210\u3057\u30010\u56de\u4ee5\u4e0a\u306e\u4e2d\u9593\u64cd\u4f5c\u3068\u30011\u56de\u306e\u7d42\u7aef\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u3092\u5f97\u308b\u3002\n\n\u3088\u308a\u8a73\u3057\u304f\nJava(tm) Platform Standard Edition 8 \u30d1\u30c3\u30b1\u30fc\u30b8 java.util.stream\nJava Stream API\u3092\u3044\u307e\u3055\u3089\u5165\u9580 - \u57fa\u672c\u7de8\nJava8 Stream\u3056\u3063\u304f\u308a\u307e\u3068\u3081\n\n\u751f\u6210\n\n\u53c2\u7167\u578bStream\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\n\n\n\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578bStream\nIntStream intStream = IntStream.of(1, 2, 3, 4, 5);\n\n\n\u914d\u5217\u304b\u3089\nint[] array = { 1, 2, 3, 4, 5 };\nIntStream intStream = Arrays.stream(array);\n\n\n\u30ec\u30f3\u30b8\u3092\u6307\u5b9a\u3057\u3066\nIntStream intStream = IntStream.range(1, 5);\n\n\n\u30d5\u30a1\u30a4\u30eb\u304b\u3089\nPath path = Paths.get(\"D:\\\\hoge.txt\");\nStream<String> fileStream = Files.lines(path)\n\n\n\u6700\u3082\u5358\u7d14\u306aStream\u64cd\u4f5c\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nstream.forEach(System.out::println);\n\nInteger\u578b\u306eStream\u3092\u751f\u6210\u3057\u3001\u4e2d\u9593\u64cd\u4f5c0\u56de\u3001\u7d42\u7aef\u64cd\u4f5c1\u56de\u3067\u3001\u6a19\u6e96\u51fa\u529b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3002\nforEach\u306f\u7d42\u7aef\u64cd\u4f5c\u3002\u7d42\u7aef\u64cd\u4f5c\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001\u3053\u308c\u306b\u4efb\u610f\u306e\u56de\u6570\u306e\u69d8\u3005\u306a\u4e2d\u9593\u64cd\u4f5c\u3068\u3001\u540c\u3058\u304f\u69d8\u3005\u306a\u7d42\u7aef\u64cd\u4f5c\u306e\u3046\u3061\u3044\u305a\u308c\u304b1\u56de\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3059\u308b\u3002\n\n\u3088\u308a\u8a73\u3057\u304f\nJava 8 Stream API \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u6d41\u3057\u3066\u307f\u308b\uff08\u751f\u6210\u7de8\uff09\n\n\u4e2d\u9593\u64cd\u4f5c\n\n\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nStream<String> stream = Stream.of(\"A\", \"B\", \"A\", \"B\", \"B\", \"A\");\nPredicate<String> isA = \"A\"::equals;\nstream.filter(isA).forEach(System.out::println);\n\nPredicate\u578b\u306eisHogeHoge\u3092\u9593\u306b\u639b\u3051\u3066False\u3092\u9593\u5f15\u304f\u30a4\u30e1\u30fc\u30b8\u3002\nPredicate\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3002\n\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n\uff13\u5206\u3067\u308f\u304b\u308b\u57fa\u672c\u306e\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n\n\u30de\u30c3\u30d4\u30f3\u30b0\nStream<Integer> stream = Stream.of(1, 2, 3, 4, 5);\nFunction<Integer, Integer> toDouble = param -> param * 2;\nstream.map(toDouble).forEach(System.out::println);\n\nStream\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u5024\u306eStream\u3092\u8fd4\u3059\u3002\n\u8981\u306f\u5909\u63db\u51e6\u7406\u307f\u305f\u3044\u306a\u3082\u306e\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u308f\u304b\u308a\u3084\u3059\u304fFunction\u3092\u4f7f\u3063\u305f\u304c\u3001\u3053\u306e\u5834\u5408\u306fUnaryOperator\u304c\u30b9\u30de\u30fc\u30c8\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\nJava8 Lambda\u306e\u6587\u6cd5\u62e1\u5f35\u307e\u3068\u3081\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u304c\u30e9\u30e0\u30c0\u306b\u306a\u308b\u307e\u3067\n\n\u30bd\u30fc\u30c8\nStream<Integer> stream = Stream.of(3, 2, 1, 5, 4);\nComparator<Integer> comparator = Comparator.reverseOrder();\nstream.sorted(comparator).forEach(System.out::println);\n\nsorted\u306bcomparator\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u9806\u5e8f\u3092\u6307\u5b9a\u3059\u308b\u3002\nComparator\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n(o1, o2) -> o1 - o2 \u306a\u3093\u3066\u546a\u6587\u306f\u3082\u3046\u3084\u3081\u3066\uff01 - Java8\u3067\u306eComparator\u306e\u4f7f\u3044\u65b9\n\n\u7d42\u7aef\u64cd\u4f5c\n\n\u30de\u30c3\u30c1\u30f3\u30b0\nStream<String> stream = Stream.of(\"George\", \"John\", \"Ringo\", \"Paul\");\nPredicate<String> isRingo = \"Ringo\"::equals;\nboolean isMatch = stream.anyMatch(isRingo);\n\nallMatch\u3001noneMatch\u306a\u3069\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3082\u3042\u308b\u3002\n\n\u30ab\u30a6\u30f3\u30c8\nStream<String> countSt = Stream.of(\"George\", \"John\", \"Ringo\", \"Paul\");\nlong result = countSt.count();\n\n\n\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nBinaryOperator<Integer> sum = Integer::sum;\nOptional<Integer> result = stream.reduce(sum);\n\n\u7573\u307f\u8fbc\u307f\u306a\u3069\u3001\u7d50\u679c\u3092\u5358\u4e00\u306e\u5024\u3078\u51e6\u7406\u3059\u308b\u3002\n\u623b\u308a\u5024\u306fOptional\u3002Optional\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\nJava 8 \"Optional\" \uff5e \u3053\u308c\u304b\u3089\u306enull\u3068\u306e\u4ed8\u304d\u5408\u3044\u65b9 \uff5e\n\n\u53ef\u5909\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nList<Integer> resultList = stream.collect(Collectors.toCollection(ArrayList::new));\nresultList.forEach(System.out::print);\n\nArrayList\u306a\u3069\u3001\u96c6\u5408\u3078\u51e6\u7406\u3059\u308b\u3002\n\n\u3088\u308a\u8a73\u3057\u304f\nJava 8 Stream API \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u6d41\u3057\u3066\u307f\u305f\uff08\u7d42\u7aef\u64cd\u4f5c\u7de8\uff09\nJava8 Stream\u306e\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u3064\u3044\u3066\n\n\u4e26\u5217\u51e6\u7406\nStream<String> stream= Stream.of(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\nstream.parallel().forEach(param -> System.out.println(param + \" thread-id: \" + Thread.currentThread().getId()));\n\n\u751f\u6210\u6642\u306bpararelStream()\u3092\u4f7f\u3046\u304b\u3001\u4e2d\u9593\u64cd\u4f5c\u3067parallel()\u3092\u565b\u307e\u305b\u308b\u3060\u3051\u3067\u4e26\u5217\u51e6\u7406\u306b\u306a\u308b\u3002\n\n\u3088\u308a\u8a73\u3057\u304f\n\u3055\u3042\u3001\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u306f\u3058\u3081\u3088\u3046\nJava8\u306eStream\u3068ParallelStream\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\nstream\u3068parallelStream\u306b\u3064\u3044\u3066\u306e\u8003\u5bdf\nJava \u305d\u308c\u305e\u308c\u66f8\u304d\u65b9\u3067\u3069\u308c\u307b\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u9055\u3046\u306e\u304b\uff1f\u8a08\u6e2c\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3002Stream\u3068\u30eb\u30fc\u30d7\u3068\u304b\n\u4e26\u5217\u51e6\u7406\u306f\u66f8\u304d\u304d\u308c\u306a\u3044\u306e\u3067\u6df1\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n#\u306f\u3058\u3081\u306b\n\u30fbStreamAPI\u306e\u4ee3\u8868\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3068\u3001\u57fa\u672c\u7684\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u30fbStreamAPI\u306e\u8003\u3048\u65b9\u3084\u5fdc\u7528\u4f8b\u3001\u30c6\u30af\u30cb\u30c3\u30af\u306b\u3064\u3044\u3066\u306f\u4ed6\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3078\u59d4\u8b72\u3057\u3001\u3053\u3053\u3067\u306f\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3088\u3046\u306b\u52aa\u3081\u307e\u3059\u3002\n\u30fbStream\u306f\u30e9\u30e0\u30c0\u5f0f\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4e0e\u3048\u3066\u66f8\u304f\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\u3001\u3042\u3048\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n\n#StreamAPI\u3068\u306f\n\u30fbSE8\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3001\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3092\u6271\u3046\u305f\u3081\u306eAPI\u3002\u4e3b\u306a\u76ee\u7684\u306f\u4e26\u5217\u51e6\u7406\u3078\u306e\u5bfe\u5fdc\u3002StreamAPI\u3092\u7528\u3044\u308b\u3068\u3001\u9806\u6b21\u51e6\u7406\u304b\u3089\u4e26\u884c\u51e6\u7406\u3078\u306e\u5207\u66ff\u3048\u304c\u5bb9\u6613\u306b\u306a\u308b\u3002\n\n\u30fbjava.util.stream\u30d1\u30c3\u30b1\u30fc\u30b8\u914d\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3067\u3042\u308a\u3001java.io\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u7528\u3044\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u306f\u5225\u7269\u3002\n\n\u30fbjava.util.stream\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001BaseStream\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u57fa\u5e95\u3068\u3057\u3066\u3001\u53c2\u7167\u578b\u3092\u6271\u3046\u305f\u3081\u306eStream\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3092\u6271\u3046\u305f\u3081\u306e3\u3064\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u308b\u3002\n\n\u30fbStream\u306fList\u3084Map\u306a\u3069\u306e\u30c7\u30fc\u30bf\u96c6\u5408\u3092\u3082\u3068\u306b\u751f\u6210\u3057\u30010\u56de\u4ee5\u4e0a\u306e\u4e2d\u9593\u64cd\u4f5c\u3068\u30011\u56de\u306e\u7d42\u7aef\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u3092\u5f97\u308b\u3002\n\n\n###\u3088\u308a\u8a73\u3057\u304f\n[Java(tm) Platform Standard Edition 8 \u30d1\u30c3\u30b1\u30fc\u30b8 java.util.stream](https://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/package-summary.html)\n[Java Stream API\u3092\u3044\u307e\u3055\u3089\u5165\u9580 - \u57fa\u672c\u7de8](http://qiita.com/potsunen/items/369dd3fcb9ccb8fcfa44)\n[Java8 Stream\u3056\u3063\u304f\u308a\u307e\u3068\u3081](http://qiita.com/frost_star/items/fb87caf05e106c46dfe4)\n\n\n#\u751f\u6210\n####\u53c2\u7167\u578bStream\n\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\n```\n\n####\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578bStream\n\n```java\nIntStream intStream = IntStream.of(1, 2, 3, 4, 5);\n```\n\n####\u914d\u5217\u304b\u3089\n\n```java\nint[] array = { 1, 2, 3, 4, 5 };\nIntStream intStream = Arrays.stream(array);\n```\n\n####\u30ec\u30f3\u30b8\u3092\u6307\u5b9a\u3057\u3066\n\n```java\nIntStream intStream = IntStream.range(1, 5);\n```\n\n####\u30d5\u30a1\u30a4\u30eb\u304b\u3089\n\n```java\nPath path = Paths.get(\"D:\\\\hoge.txt\");\nStream<String> fileStream = Files.lines(path)\n```        \n\n###\u6700\u3082\u5358\u7d14\u306aStream\u64cd\u4f5c\n\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nstream.forEach(System.out::println);\n```\n\nInteger\u578b\u306eStream\u3092\u751f\u6210\u3057\u3001\u4e2d\u9593\u64cd\u4f5c0\u56de\u3001\u7d42\u7aef\u64cd\u4f5c1\u56de\u3067\u3001\u6a19\u6e96\u51fa\u529b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u3002\nforEach\u306f\u7d42\u7aef\u64cd\u4f5c\u3002\u7d42\u7aef\u64cd\u4f5c\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001\u3053\u308c\u306b\u4efb\u610f\u306e\u56de\u6570\u306e\u69d8\u3005\u306a\u4e2d\u9593\u64cd\u4f5c\u3068\u3001\u540c\u3058\u304f\u69d8\u3005\u306a\u7d42\u7aef\u64cd\u4f5c\u306e\u3046\u3061\u3044\u305a\u308c\u304b1\u56de\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u3059\u308b\u3002\n\n###\u3088\u308a\u8a73\u3057\u304f\n\n[Java 8 Stream API \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u6d41\u3057\u3066\u307f\u308b\uff08\u751f\u6210\u7de8\uff09](http://qiita.com/kumazo/items/0876c5b251ecc131c960)\n\n#\u4e2d\u9593\u64cd\u4f5c\n####\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n\n```java\nStream<String> stream = Stream.of(\"A\", \"B\", \"A\", \"B\", \"B\", \"A\");\nPredicate<String> isA = \"A\"::equals;\nstream.filter(isA).forEach(System.out::println);\n```\n\nPredicate\u578b\u306eisHogeHoge\u3092\u9593\u306b\u639b\u3051\u3066False\u3092\u9593\u5f15\u304f\u30a4\u30e1\u30fc\u30b8\u3002\nPredicate<T>\u306f\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3002\n\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n[\uff13\u5206\u3067\u308f\u304b\u308b\u57fa\u672c\u306e\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9](http://qiita.com/Takmiy/items/2a43dbc5ca09017b831e)\n\n####\u30de\u30c3\u30d4\u30f3\u30b0\n```java\nStream<Integer> stream = Stream.of(1, 2, 3, 4, 5);\nFunction<Integer, Integer> toDouble = param -> param * 2;\nstream.map(toDouble).forEach(System.out::println);\n```\nStream\u306e\u5404\u8981\u7d20\u3092\u30ad\u30fc\u3068\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u5024\u306eStream\u3092\u8fd4\u3059\u3002\n\u8981\u306f\u5909\u63db\u51e6\u7406\u307f\u305f\u3044\u306a\u3082\u306e\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u308f\u304b\u308a\u3084\u3059\u304fFunction\u3092\u4f7f\u3063\u305f\u304c\u3001\u3053\u306e\u5834\u5408\u306fUnaryOperator\u304c\u30b9\u30de\u30fc\u30c8\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n[Java8 Lambda\u306e\u6587\u6cd5\u62e1\u5f35\u307e\u3068\u3081](http://d.hatena.ne.jp/nowokay/20130824)\n[\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u304c\u30e9\u30e0\u30c0\u306b\u306a\u308b\u307e\u3067](http://qiita.com/Takmiy/items/21e9aa675bec0dfea31b)\n\n####\u30bd\u30fc\u30c8\n```java\nStream<Integer> stream = Stream.of(3, 2, 1, 5, 4);\nComparator<Integer> comparator = Comparator.reverseOrder();\nstream.sorted(comparator).forEach(System.out::println);\n```\n\nsorted\u306bcomparator\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u9806\u5e8f\u3092\u6307\u5b9a\u3059\u308b\u3002\nComparator\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n[(o1, o2) -> o1 - o2 \u306a\u3093\u3066\u546a\u6587\u306f\u3082\u3046\u3084\u3081\u3066\uff01 - Java8\u3067\u306eComparator\u306e\u4f7f\u3044\u65b9](http://qiita.com/tag1216/items/50ecf6a7bc10218ee889)\n\n\n#\u7d42\u7aef\u64cd\u4f5c\n####\u30de\u30c3\u30c1\u30f3\u30b0\n```java\nStream<String> stream = Stream.of(\"George\", \"John\", \"Ringo\", \"Paul\");\nPredicate<String> isRingo = \"Ringo\"::equals;\nboolean isMatch = stream.anyMatch(isRingo);\n```\nallMatch\u3001noneMatch\u306a\u3069\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3082\u3042\u308b\u3002\n\n####\u30ab\u30a6\u30f3\u30c8\n```java\nStream<String> countSt = Stream.of(\"George\", \"John\", \"Ringo\", \"Paul\");\nlong result = countSt.count();\n```\n\n####\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nBinaryOperator<Integer> sum = Integer::sum;\nOptional<Integer> result = stream.reduce(sum);\n```\n\u7573\u307f\u8fbc\u307f\u306a\u3069\u3001\u7d50\u679c\u3092\u5358\u4e00\u306e\u5024\u3078\u51e6\u7406\u3059\u308b\u3002\n\u623b\u308a\u5024\u306fOptional\u3002Optional\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002\n[Java 8 \"Optional\" \uff5e \u3053\u308c\u304b\u3089\u306enull\u3068\u306e\u4ed8\u304d\u5408\u3044\u65b9 \uff5e](http://qiita.com/shindooo/items/815d651a72f568112910)\n\n####\u53ef\u5909\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\n```java\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\nStream<Integer> stream = list.stream();\nList<Integer> resultList = stream.collect(Collectors.toCollection(ArrayList::new));\nresultList.forEach(System.out::print);\n```\nArrayList\u306a\u3069\u3001\u96c6\u5408\u3078\u51e6\u7406\u3059\u308b\u3002\n\n###\u3088\u308a\u8a73\u3057\u304f\n[Java 8 Stream API \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u6d41\u3057\u3066\u307f\u305f\uff08\u7d42\u7aef\u64cd\u4f5c\u7de8\uff09](http://qiita.com/kumazo/items/284098c530fceb05805c)\n[Java8 Stream\u306e\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u3064\u3044\u3066](http://qiita.com/frost_star/items/a36e66dff419e7c07151)\n\n\n#\u4e26\u5217\u51e6\u7406\n```java\nStream<String> stream= Stream.of(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\");\nstream.parallel().forEach(param -> System.out.println(param + \" thread-id: \" + Thread.currentThread().getId()));\n```\n\n\u751f\u6210\u6642\u306bpararelStream()\u3092\u4f7f\u3046\u304b\u3001\u4e2d\u9593\u64cd\u4f5c\u3067parallel()\u3092\u565b\u307e\u305b\u308b\u3060\u3051\u3067\u4e26\u5217\u51e6\u7406\u306b\u306a\u308b\u3002\n\n###\u3088\u308a\u8a73\u3057\u304f\n[\u3055\u3042\u3001\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u306f\u3058\u3081\u3088\u3046](http://qiita.com/koduki/items/086d42b5a3c74ed8b59e)\n[Java8\u306eStream\u3068ParallelStream\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066](http://qiita.com/clomie/items/07bac6b31314486f1591)\n[stream\u3068parallelStream\u306b\u3064\u3044\u3066\u306e\u8003\u5bdf](https://togetter.com/li/638124)\n[Java \u305d\u308c\u305e\u308c\u66f8\u304d\u65b9\u3067\u3069\u308c\u307b\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u9055\u3046\u306e\u304b\uff1f\u8a08\u6e2c\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3002Stream\u3068\u30eb\u30fc\u30d7\u3068\u304b](http://qiita.com/ota-meshi/items/40d5dcb0e99574a8a368)\n\n\u4e26\u5217\u51e6\u7406\u306f\u66f8\u304d\u304d\u308c\u306a\u3044\u306e\u3067\u6df1\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n", "tags": ["Java", "java8"]}