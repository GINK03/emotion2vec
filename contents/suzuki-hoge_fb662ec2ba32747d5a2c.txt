{"tags": ["Java", "Stream", "java8"], "context": "\u3069\u3046\u3082\u3001Java8\u306eStream\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u3092\u66f8\u3044\u305f\u8005\u3067\u3059\u3002\nStream\u4f7f\u3063\u3066\u307e\u3059\u304b\uff1f\u305f\u307e\u308a\u307e\u305b\u3093\u3088\u306d\uff1f\u7279\u306bStream\u306elast\u3068\u304b\u3082\u7528\u610f\u3055\u308c\u3066\u306a\u3044\u3068\u3053\u308d\u304c\u30a4\u30ab\u308c\u3066\u307e\u3059\u3088\u306d\uff1f\nlast()\u306a\u3093\u304b\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3068\u306f\u601d\u308f\u306a\u304b\u3063\u305f\u3088\uff01\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30922\u5ea6\u898b\u3057\u3061\u3083\u3063\u305f\u3088\uff01\n\n\u524d\u7f6e\u304d\n\u524d\u56de\u306e\u6700\u5f8c\u306bCollectors#collectingAndThen\u3068\u8a00\u3046\u306e\u3092\u898b\u3064\u3051\u305f\u3093\u3060\u3051\u3069\u3001\n\u305d\u306e\u5f8c\u8272\u3005\u306a\u4e8b\u3092Stream\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u6e08\u307e\u305b\u305f\u304f\u306a\u3063\u305f\u306e\u3067ListUtil\u3063\u3066\u306e\u3092\u4f5c\u3063\u3066\u8272\u3005\u66f8\u3044\u3066\u307f\u305f\u3088\uff01\n\u4eca\u56de\u306f\u81ea\u524d\u3067Collector<T, A, R>\u306e\u5b9f\u88c5\u3092\u305b\u305a\u306b\u3001\u5168\u3066\u3092Collectors#collectingAndThen\u3067\u6e08\u307e\u305b\u308b\u65b9\u91dd\u3060\u3088\uff01\n\nListUtil\npublic class ListUtil {\n}\n\n\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u8272\u3005\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u304f\u3088\uff01\n\u30e1\u30bd\u30c3\u30c9\u306fCollector<T, A, R>\u7684\u306a\u4f55\u304b\u3092\u8fd4\u3059\u306e\u3067Stream#collect\u3067\u4f7f\u3046\u611f\u3058\u3060\u3088\uff01\n\u3061\u3087\u3063\u3068\u6d41\u308c\u306eIn/Out\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3051\u3069\u3001R\u306b\u76f8\u5f53\u3059\u308b\u90e8\u5206\u304c\u623b\u308a\u3060\u3068\u7406\u89e3\u3059\u308b\u3068\u8aad\u3081\u308b\u3088\uff01\n\ndomain\n\u4e00\u90e8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u9069\u5f53\u306a\u30af\u30e9\u30b9\u3092\u7528\u3044\u308b\u306e\u3067\u7528\u610f\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u3092\u8f09\u3063\u3051\u3066\u304a\u304f\u3088\uff01\n\uff08\u4f8b\u306b\u3088\u3063\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u7b49\u306f\u7565\u3057\u3066\u3044\u308b\u3088\uff01lombok\u3067\u3082\u4f7f\u3063\u3066\u306d\uff01\uff09\n\u9069\u5f53\u306a\u30af\u30e9\u30b9\npublic class Book {\n    private final String name;\n}\n\n\u9069\u5f53\u306a\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\npublic class BookList {\n    private final List<Book> values;\n}\n\n\u9069\u5f53\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\npublic class NamedBookList {\n    private final String listName;\n    private final List<Book> values;\n}\n\n\nList\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u5909\u63db\u3092\u884c\u3046\n\nList\u3092\u5225\u306e\u578b\u306b\u5909\u63db\u3059\u308b\nJava8\u306eStream\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u306b\u6295\u7a3f\u3057\u305f\u30b3\u30fc\u30c9\u3068\u7d50\u679c\u306f\u540c\u3058\n\nconstruct\npublic static <T, R> Collector<T, ?, R> construct(Function<List<T>, R> constructor) {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            constructor\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    BookList exp = new BookList(\n            Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n                    .collect(Collectors.toList())\n    );\n\n    BookList act = Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n            .collect(ListUtil.construct(BookList::new));\n\n    assertEquals(exp, act);\n}\n\n\nList\u3092\u5225\u306e\u578b\u306b\u5909\u63db\u3059\u308b List\u4ee5\u5916\u306e\u5f15\u6570\u3042\u308a\n\u4ed5\u4e8b\u306e\u30b3\u30fc\u30c9\u3067List\u306e\u4ed6\u306b1\u3064\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\u304c\u591a\u3044\u306e\u3067\u7528\u610f\u3057\u305f\n\nconstructWith\npublic static <Some, T, R> Collector<T, ?, R> constructWith(Some some, BiFunction<Some, List<T>, R> constructor) {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> constructor.apply(some, list)\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    NamedBookList exp = new NamedBookList(\n            \"sample books\",\n            Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n                    .collect(Collectors.toList())\n    );\n\n    NamedBookList act = Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n            .collect(ListUtil.constructWith(\"sample books\", NamedBookList::new));\n\n    assertEquals(exp, act);\n}\n\n\nList\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\n\n\u5148\u982d\uff11\u4ef6\u3092\u53d6\u5f97\n\u7a7a\u30ea\u30b9\u30c8\u3060\u3063\u305f\u5834\u5408\u306f\u5b9f\u884c\u4f8b\u5916\n\nhead\npublic static <T> Collector<T, ?, T> head() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOrThrow(list, 0)\n    );\n}\n\nprivate static <T> T getOrThrow(List<T> list, int n) {\n    if (list.size() == 0) {\n        throw new RuntimeException(\"list is empty\");\n    }\n    return list.get(n);\n}\n\n\ntest\n@Test\npublic void test() {\n    int exp = 4;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.head());\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"list is empty\");\n\n    Stream.empty()\n            .collect(ListUtil.head());\n}\n\n\n\u672b\u5c3e\uff11\u4ef6\u3092\u53d6\u5f97\n\u4f8b\u5916\u306e\u4ed5\u69d8\u3084private\u30e1\u30bd\u30c3\u30c9\u3001\u304a\u3088\u3073\u30c6\u30b9\u30c8\u306fhead\u3068\u540c\u69d8\u306e\u305f\u3081\u7701\u7565\n\nlast\npublic static <T> Collector<T, ?, T> last() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOrThrow(list, list.size() - 1)\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    int exp = 3;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.last());\n\n    assertEquals(exp, act);\n}\n\n\n\u5148\u982d\uff11\u4ef6\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u5f97\n\u306a\u305c\u304b\u3053\u308c\u3060\u3051\u306fStream#findFirst\u3068\u3057\u3066\u5b58\u5728\u3059\u308b\n\nheadOpt\npublic static <T> Collector<T, ?, Optional<T>> headOpt() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOpt(list, 0)\n    );\n}\n\nprivate static <T> Optional<T> getOpt(List<T> list, int n) {\n    if (list.size() == 0) {\n        return Optional.<T>empty();\n    } else {\n        return Optional.of(list.get(n));\n    }\n}\n\n\ntest\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(4);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.headOpt());\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.empty();\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.headOpt());\n\n    assertEquals(exp, act);\n}\n\n\n\u672b\u5c3e\uff11\u4ef6\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u5f97\n\u4f8b\u5916\u306e\u4ed5\u69d8\u3084private\u30e1\u30bd\u30c3\u30c9\u3001\u304a\u3088\u3073\u30c6\u30b9\u30c8\u306fheadOpt\u3068\u540c\u69d8\u306e\u305f\u3081\u7701\u7565\n\nlastOpt\npublic static <T> Collector<T, ?, Optional<T>> lastOpt() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOpt(list, list.size() - 1)\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(3);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.lastOpt());\n\n    assertEquals(exp, act);\n}\n\n\n\u7279\u5b9a\u306e\u5236\u7d04\u306e\u4e0b\u3067List\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\n\n\u8981\u7d20\u304c\uff11\u4ef6\u306e\u5834\u5408\u306e\u307f\u305d\u308c\u3092\u53d6\u308a\u51fa\u3059\n\u4ed5\u4e8b\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u983b\u51fa\u3059\u308b\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\n\u8907\u6570\u306e\u8981\u7d20\u3092filter\u3092\u3057\u305f\u7d50\u679c\u304c\u30ad\u30c3\u30ab\u30ea\uff11\u4ef6\u306b\u306a\u308b\u4e8b\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\n\nexactlyOne\npublic static <T, E extends RuntimeException> Collector<T, ?, T> exactlyOne(Supplier<E> sup) {\n    Function<List<T>, T> f = list -> {\n        if (list.size() != 1) {\n            throw sup.get();\n        }\n\n        return list.get(0);\n    };\n\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            f::apply\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    int exp = 3;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 3)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be just [3]\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n}\n\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be just [3]\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n}\n\n\n\u8981\u7d20\u304c\uff12\u4ef6\u672a\u6e80\u306e\u5834\u5408\u306e\u307f\u305d\u308c\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u308a\u51fa\u3059\n\u8907\u6570\u306e\u8981\u7d20\u3092filter\u3092\u3057\u305f\u7d50\u679c\u304c\uff11\u4ef6\u4ee5\u4e0b\u306b\u306a\u308b\u4e8b\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\nexactlyOne\u3068\u3042\u308f\u305b\u3066\u3001DB\u53c2\u7167\u7d50\u679c\u304c\u578b\u7684\u306b\u306fList<T>\u3067\u623b\u3063\u3066\u304f\u308b\u3051\u3069\u3001\u4ed5\u69d8\u7684\u306b2\u4ef6\u53d6\u308c\u3061\u3083\u3063\u3066\u305f\u3089\u554f\u984c\u3042\u308b\u3001\u306a\u3093\u3066\u6642\u306b\u4f7f\u3048\u308b\u304b\u306a\n\natMostOne\npublic static <T, E extends RuntimeException> Collector<T, ?, Optional<T>> atMostOne(Supplier<E> sup) {\n    Function<List<T>, Optional<T>> f = list -> {\n        if (list.size() >= 2) {\n            throw sup.get();\n        }\n\n        return getOpt(list, 0);\n    };\n\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            f::apply\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(3);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 3)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.empty();\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be [3] or []\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n}\n\n\nList\u3092\u6574\u5f62\u3059\u308b\n\n\u4efb\u610f\u306e\u5024\u3067\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\n\u30af\u30e9\u30b9\u306e\u4efb\u610f\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067List\u3092\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u53d7\u3051\u308b\n\ndistinctBy\npublic static <T, Key> Collector<T, ?, List<T>> distinctBy(Function<T, Key> toKey) {\n    return Collectors.collectingAndThen(\n            Collectors.groupingBy(toKey, LinkedHashMap::new, Collectors.toList()),\n            map -> map.values().stream().map(list -> list.get(0)).collect(Collectors.toList())\n    );\n}\n\n\ntest\n@Test\npublic void test() {\n    List<Integer> exp = Arrays.asList(4, 2, 5, 1, 3);\n\n    List<Integer> act = Stream.of(4, 4, 2, 5, 5, 5, 1, 3, 1)\n            .collect(ListUtil.distinctBy(it -> it));\n\n    assertEquals(exp, act);\n}\n\n@Test\npublic void test() {\n    List<Book> exp = Arrays.asList(new Book(\"foo\"), new Book(\"bar\"));\n\n    List<Book> act = Stream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"foo\"))\n            .collect(ListUtil.distinctBy(Book::getName));\n\n    assertEquals(exp, act);\n}\n\n\n\u305d\u3046\u3044\u3048\u3070\n\u4eca\u66f4\u8a00\u3046\u306e\u304b\u3063\u3066\u611f\u3058\u3060\u3051\u3069\u3001\u7d42\u7aef\u64cd\u4f5c\u3067\u3084\u308d\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u30cd\u30b9\u30c8\u3060\u3068\u8aad\u307f\u3065\u3089\u3044\u304b\u3089\u3067\u3059\n\u3067\u3053\u307c\u3053\u3057\u305f\u308a\u4e0a\u306e\u884c\u306b\u623b\u3063\u305f\u308a\u3068\u3001\u76ee\u7dda\u79fb\u52d5\u304c\u5909\u306b\u306a\u308b\u304b\u3089\u8aad\u307f\u3065\u3089\u3044\u3067\u3057\u3087\uff1f\nnew SomeObject(\n// 5\n    Stream.filter.map.toList\n//     1 --> 2 --> 3  -> 4\n);\n\n\u3053\u3093\u306a\u98a8\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u3082\u3046\u5927\u5909\u3060\u3088\u306d\uff1f\nheadOpt(\n        Stream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"baz\"))\n                .filter(book -> book.name.equals(\"bar\"))\n                .map(book -> new Book(book.name + \"2\"))\n                .collect(Collectors.toList())\n).map(it -> it.name);\n\n\u7d42\u7aef\u64cd\u4f5c\u306a\u3089\u7d9a\u3051\u3066\u66f8\u3051\u308b\u306e\u3067\u4e0a\u304b\u3089\u4e0b\u3078\u7d20\u76f4\u306b\u8aad\u3081\u308b\u3067\u3057\u3087\uff01\nStream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"baz\"))\n        .filter(book -> book.name.equals(\"bar\"))\n        .map(book -> new Book(book.name + \"2\"))\n        .collect(ListUtil.headOpt())\n        .map(it -> it.name);\n\n\n\u307e\u3068\u3081\n\u306a\u3093\u304b\u4f55\u3067\u3082\u66f8\u3051\u308b\u306e\u3067\u697d\u3057\u304f\u306a\u3063\u3066\u8272\u3005\u66f8\u3044\u305f\uff01\n\u554f\u984c\u306fListUtil\u3092\u898b\u305f\u6642\u306b\u30d1\u30c3\u3068\u898b\u3066\u623b\u308a\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u70b9\u304b\u306a\u3041\nCollector<T, A, R>\u306eR\u306e\u90e8\u5206\u304c\u623b\u308a\u3060\u3068\u7406\u89e3\u3059\u308c\u3070\u5927\u4e08\u592b\u306a\u306e\u3067\u3001\u6163\u308c\u6b21\u7b2c\u304b\u306a\uff1f\n\u3053\u308c\u3067\u5feb\u9069\u306aJava\u30e9\u30a4\u30d5\u304c\u9001\u308c\u308b\u306d\uff01 \u4e59\u3063\u3057\u305f\uff89\uff7c\n\n\u8ffd\u4f38\n\u3061\u306a\u307f\u306b\u5192\u982d\u3067\u89e6\u308c\u305flast\u3082\u306a\u3044\u305c\uff01\u3060\u3051\u3069\u3001\u8abf\u3079\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u4f8b\u304c\u3042\u3063\u305f\u3088\nstream.reduce((first, second) -> second);\n\n\u306a\u308b\u307b\u3069\uff01\uff01\uff01\n\n\u3069\u3046\u3082\u3001[Java8\u306eStream\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b](http://qiita.com/suzuki-hoge/items/6c5e25eaf48160c1fedf)\u3092\u66f8\u3044\u305f\u8005\u3067\u3059\u3002\n\n`Stream`\u4f7f\u3063\u3066\u307e\u3059\u304b\uff1f\u305f\u307e\u308a\u307e\u305b\u3093\u3088\u306d\uff1f\u7279\u306b`Stream`\u306e`last`\u3068\u304b\u3082\u7528\u610f\u3055\u308c\u3066\u306a\u3044\u3068\u3053\u308d\u304c\u30a4\u30ab\u308c\u3066\u307e\u3059\u3088\u306d\uff1f\n`last()`\u306a\u3093\u304b\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3068\u306f\u601d\u308f\u306a\u304b\u3063\u305f\u3088\uff01\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30922\u5ea6\u898b\u3057\u3061\u3083\u3063\u305f\u3088\uff01\n\n## \u524d\u7f6e\u304d\n[\u524d\u56de\u306e\u6700\u5f8c](http://qiita.com/suzuki-hoge/items/6c5e25eaf48160c1fedf#%E3%81%8A%E3%81%BE%E3%81%91)\u306b`Collectors#collectingAndThen`\u3068\u8a00\u3046\u306e\u3092\u898b\u3064\u3051\u305f\u3093\u3060\u3051\u3069\u3001\n\u305d\u306e\u5f8c\u8272\u3005\u306a\u4e8b\u3092`Stream`\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u6e08\u307e\u305b\u305f\u304f\u306a\u3063\u305f\u306e\u3067`ListUtil`\u3063\u3066\u306e\u3092\u4f5c\u3063\u3066\u8272\u3005\u66f8\u3044\u3066\u307f\u305f\u3088\uff01\n\n\u4eca\u56de\u306f\u81ea\u524d\u3067`Collector<T, A, R>`\u306e\u5b9f\u88c5\u3092\u305b\u305a\u306b\u3001\u5168\u3066\u3092`Collectors#collectingAndThen`\u3067\u6e08\u307e\u305b\u308b\u65b9\u91dd\u3060\u3088\uff01\n\n### ListUtil\n```Java\npublic class ListUtil {\n}\n```\n\n\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u8272\u3005\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u304f\u3088\uff01\n\u30e1\u30bd\u30c3\u30c9\u306f`Collector<T, A, R>`\u7684\u306a\u4f55\u304b\u3092\u8fd4\u3059\u306e\u3067`Stream#collect`\u3067\u4f7f\u3046\u611f\u3058\u3060\u3088\uff01\n\n\u3061\u3087\u3063\u3068\u6d41\u308c\u306eIn/Out\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3051\u3069\u3001`R`\u306b\u76f8\u5f53\u3059\u308b\u90e8\u5206\u304c\u623b\u308a\u3060\u3068\u7406\u89e3\u3059\u308b\u3068\u8aad\u3081\u308b\u3088\uff01\n\n### domain\n\u4e00\u90e8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u9069\u5f53\u306a\u30af\u30e9\u30b9\u3092\u7528\u3044\u308b\u306e\u3067\u7528\u610f\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u30af\u30e9\u30b9\u3092\u8f09\u3063\u3051\u3066\u304a\u304f\u3088\uff01\n\uff08\u4f8b\u306b\u3088\u3063\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u7b49\u306f\u7565\u3057\u3066\u3044\u308b\u3088\uff01`lombok`\u3067\u3082\u4f7f\u3063\u3066\u306d\uff01\uff09\n\n\u9069\u5f53\u306a\u30af\u30e9\u30b9\n\n```Java\npublic class Book {\n    private final String name;\n}\n```\n\n\u9069\u5f53\u306a\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\n\n```Java\npublic class BookList {\n    private final List<Book> values;\n}\n```\n\n\u9069\u5f53\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\n\n```Java\npublic class NamedBookList {\n    private final String listName;\n    private final List<Book> values;\n}\n```\n\n## List\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u5909\u63db\u3092\u884c\u3046\n### List\u3092\u5225\u306e\u578b\u306b\u5909\u63db\u3059\u308b\n[Java8\u306eStream\u306e\u7d42\u7aef\u64cd\u4f5c\u3067\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b](http://qiita.com/suzuki-hoge/items/6c5e25eaf48160c1fedf)\u306b\u6295\u7a3f\u3057\u305f\u30b3\u30fc\u30c9\u3068\u7d50\u679c\u306f\u540c\u3058\n\n#### construct\n```Java\npublic static <T, R> Collector<T, ?, R> construct(Function<List<T>, R> constructor) {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            constructor\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    BookList exp = new BookList(\n            Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n                    .collect(Collectors.toList())\n    );\n\n    BookList act = Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n            .collect(ListUtil.construct(BookList::new));\n\n    assertEquals(exp, act);\n}\n```\n\n### List\u3092\u5225\u306e\u578b\u306b\u5909\u63db\u3059\u308b List\u4ee5\u5916\u306e\u5f15\u6570\u3042\u308a\n\u4ed5\u4e8b\u306e\u30b3\u30fc\u30c9\u3067List\u306e\u4ed6\u306b1\u3064\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u30ea\u30b9\u30c8\u30af\u30e9\u30b9\u304c\u591a\u3044\u306e\u3067\u7528\u610f\u3057\u305f\n\n#### constructWith\n```Java\npublic static <Some, T, R> Collector<T, ?, R> constructWith(Some some, BiFunction<Some, List<T>, R> constructor) {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> constructor.apply(some, list)\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    NamedBookList exp = new NamedBookList(\n            \"sample books\",\n            Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n                    .collect(Collectors.toList())\n    );\n\n    NamedBookList act = Stream.of(new Book(\"foo\"), new Book(\"bar\"))\n            .collect(ListUtil.constructWith(\"sample books\", NamedBookList::new));\n\n    assertEquals(exp, act);\n}\n```\n\n## List\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\n### \u5148\u982d\uff11\u4ef6\u3092\u53d6\u5f97\n\u7a7a\u30ea\u30b9\u30c8\u3060\u3063\u305f\u5834\u5408\u306f\u5b9f\u884c\u4f8b\u5916\n\n#### head\n```Java\npublic static <T> Collector<T, ?, T> head() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOrThrow(list, 0)\n    );\n}\n\nprivate static <T> T getOrThrow(List<T> list, int n) {\n    if (list.size() == 0) {\n        throw new RuntimeException(\"list is empty\");\n    }\n    return list.get(n);\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    int exp = 4;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.head());\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"list is empty\");\n\n    Stream.empty()\n            .collect(ListUtil.head());\n}\n```\n\n### \u672b\u5c3e\uff11\u4ef6\u3092\u53d6\u5f97\n\u4f8b\u5916\u306e\u4ed5\u69d8\u3084`private`\u30e1\u30bd\u30c3\u30c9\u3001\u304a\u3088\u3073\u30c6\u30b9\u30c8\u306f`head`\u3068\u540c\u69d8\u306e\u305f\u3081\u7701\u7565\n\n#### last\n```Java\npublic static <T> Collector<T, ?, T> last() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOrThrow(list, list.size() - 1)\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    int exp = 3;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.last());\n\n    assertEquals(exp, act);\n}\n```\n\n### \u5148\u982d\uff11\u4ef6\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u5f97\n\u306a\u305c\u304b\u3053\u308c\u3060\u3051\u306f`Stream#findFirst`\u3068\u3057\u3066\u5b58\u5728\u3059\u308b\n\n#### headOpt\n```Java\npublic static <T> Collector<T, ?, Optional<T>> headOpt() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOpt(list, 0)\n    );\n}\n\nprivate static <T> Optional<T> getOpt(List<T> list, int n) {\n    if (list.size() == 0) {\n        return Optional.<T>empty();\n    } else {\n        return Optional.of(list.get(n));\n    }\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(4);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.headOpt());\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.empty();\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.headOpt());\n\n    assertEquals(exp, act);\n}\n```\n\n### \u672b\u5c3e\uff11\u4ef6\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u5f97\n\u4f8b\u5916\u306e\u4ed5\u69d8\u3084`private`\u30e1\u30bd\u30c3\u30c9\u3001\u304a\u3088\u3073\u30c6\u30b9\u30c8\u306f`headOpt`\u3068\u540c\u69d8\u306e\u305f\u3081\u7701\u7565\n\n#### lastOpt\n```Java\npublic static <T> Collector<T, ?, Optional<T>> lastOpt() {\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            list -> getOpt(list, list.size() - 1)\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(3);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.lastOpt());\n\n    assertEquals(exp, act);\n}\n```\n\n## \u7279\u5b9a\u306e\u5236\u7d04\u306e\u4e0b\u3067List\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\n### \u8981\u7d20\u304c\uff11\u4ef6\u306e\u5834\u5408\u306e\u307f\u305d\u308c\u3092\u53d6\u308a\u51fa\u3059\n\u4ed5\u4e8b\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u983b\u51fa\u3059\u308b\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\n\u8907\u6570\u306e\u8981\u7d20\u3092`filter`\u3092\u3057\u305f\u7d50\u679c\u304c\u30ad\u30c3\u30ab\u30ea\uff11\u4ef6\u306b\u306a\u308b\u4e8b\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\n\n#### exactlyOne\n```Java\npublic static <T, E extends RuntimeException> Collector<T, ?, T> exactlyOne(Supplier<E> sup) {\n    Function<List<T>, T> f = list -> {\n        if (list.size() != 1) {\n            throw sup.get();\n        }\n\n        return list.get(0);\n    };\n\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            f::apply\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    int exp = 3;\n\n    int act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 3)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be just [3]\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n}\n```\n\n```Java\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be just [3]\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.exactlyOne(() -> new RuntimeException(\"must be just [3]\")));\n}\n```\n\n### \u8981\u7d20\u304c\uff12\u4ef6\u672a\u6e80\u306e\u5834\u5408\u306e\u307f\u305d\u308c\u3092Optional\u306b\u5305\u3093\u3067\u53d6\u308a\u51fa\u3059\n\u8907\u6570\u306e\u8981\u7d20\u3092`filter`\u3092\u3057\u305f\u7d50\u679c\u304c\uff11\u4ef6\u4ee5\u4e0b\u306b\u306a\u308b\u4e8b\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\n\n`exactlyOne`\u3068\u3042\u308f\u305b\u3066\u3001DB\u53c2\u7167\u7d50\u679c\u304c\u578b\u7684\u306b\u306f`List<T>`\u3067\u623b\u3063\u3066\u304f\u308b\u3051\u3069\u3001\u4ed5\u69d8\u7684\u306b2\u4ef6\u53d6\u308c\u3061\u3083\u3063\u3066\u305f\u3089\u554f\u984c\u3042\u308b\u3001\u306a\u3093\u3066\u6642\u306b\u4f7f\u3048\u308b\u304b\u306a\n\n#### atMostOne\n```Java\npublic static <T, E extends RuntimeException> Collector<T, ?, Optional<T>> atMostOne(Supplier<E> sup) {\n    Function<List<T>, Optional<T>> f = list -> {\n        if (list.size() >= 2) {\n            throw sup.get();\n        }\n\n        return getOpt(list, 0);\n    };\n\n    return Collectors.collectingAndThen(\n            Collectors.toList(),\n            f::apply\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.of(3);\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 3)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    Optional<Integer> exp = Optional.empty();\n\n    Optional<Integer> act = Stream.of(4, 2, 5, 1, 3)\n            .filter(it -> it == 0)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    thrown.expect(RuntimeException.class);\n    thrown.expectMessage(\"must be [3] or []\");\n\n    Stream.of(4, 2, 5, 1, 3)\n            .collect(ListUtil.atMostOne(() -> new RuntimeException(\"must be [3] or []\")));\n}\n```\n\n## List\u3092\u6574\u5f62\u3059\u308b\n### \u4efb\u610f\u306e\u5024\u3067\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\n\u30af\u30e9\u30b9\u306e\u4efb\u610f\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067List\u3092\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u53d7\u3051\u308b\n\n#### distinctBy\n```Java\npublic static <T, Key> Collector<T, ?, List<T>> distinctBy(Function<T, Key> toKey) {\n    return Collectors.collectingAndThen(\n            Collectors.groupingBy(toKey, LinkedHashMap::new, Collectors.toList()),\n            map -> map.values().stream().map(list -> list.get(0)).collect(Collectors.toList())\n    );\n}\n```\n\n#### test\n```Java\n@Test\npublic void test() {\n    List<Integer> exp = Arrays.asList(4, 2, 5, 1, 3);\n\n    List<Integer> act = Stream.of(4, 4, 2, 5, 5, 5, 1, 3, 1)\n            .collect(ListUtil.distinctBy(it -> it));\n\n    assertEquals(exp, act);\n}\n```\n\n```Java\n@Test\npublic void test() {\n    List<Book> exp = Arrays.asList(new Book(\"foo\"), new Book(\"bar\"));\n\n    List<Book> act = Stream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"foo\"))\n            .collect(ListUtil.distinctBy(Book::getName));\n\n    assertEquals(exp, act);\n}\n```\n\n## \u305d\u3046\u3044\u3048\u3070\n\u4eca\u66f4\u8a00\u3046\u306e\u304b\u3063\u3066\u611f\u3058\u3060\u3051\u3069\u3001\u7d42\u7aef\u64cd\u4f5c\u3067\u3084\u308d\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u30cd\u30b9\u30c8\u3060\u3068\u8aad\u307f\u3065\u3089\u3044\u304b\u3089\u3067\u3059\n\n\u3067\u3053\u307c\u3053\u3057\u305f\u308a\u4e0a\u306e\u884c\u306b\u623b\u3063\u305f\u308a\u3068\u3001\u76ee\u7dda\u79fb\u52d5\u304c\u5909\u306b\u306a\u308b\u304b\u3089\u8aad\u307f\u3065\u3089\u3044\u3067\u3057\u3087\uff1f\n\n```Java\nnew SomeObject(\n// 5\n    Stream.filter.map.toList\n//     1 --> 2 --> 3  -> 4\n);\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u3082\u3046\u5927\u5909\u3060\u3088\u306d\uff1f\n\n```Java\nheadOpt(\n        Stream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"baz\"))\n                .filter(book -> book.name.equals(\"bar\"))\n                .map(book -> new Book(book.name + \"2\"))\n                .collect(Collectors.toList())\n).map(it -> it.name);\n```\n\n\u7d42\u7aef\u64cd\u4f5c\u306a\u3089\u7d9a\u3051\u3066\u66f8\u3051\u308b\u306e\u3067\u4e0a\u304b\u3089\u4e0b\u3078\u7d20\u76f4\u306b\u8aad\u3081\u308b\u3067\u3057\u3087\uff01\n\n```Java\nStream.of(new Book(\"foo\"), new Book(\"bar\"), new Book(\"baz\"))\n        .filter(book -> book.name.equals(\"bar\"))\n        .map(book -> new Book(book.name + \"2\"))\n        .collect(ListUtil.headOpt())\n        .map(it -> it.name);\n```\n\n## \u307e\u3068\u3081\n\u306a\u3093\u304b\u4f55\u3067\u3082\u66f8\u3051\u308b\u306e\u3067\u697d\u3057\u304f\u306a\u3063\u3066\u8272\u3005\u66f8\u3044\u305f\uff01\n\n\u554f\u984c\u306f`ListUtil`\u3092\u898b\u305f\u6642\u306b\u30d1\u30c3\u3068\u898b\u3066\u623b\u308a\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u70b9\u304b\u306a\u3041\n`Collector<T, A, R>`\u306e`R`\u306e\u90e8\u5206\u304c\u623b\u308a\u3060\u3068\u7406\u89e3\u3059\u308c\u3070\u5927\u4e08\u592b\u306a\u306e\u3067\u3001\u6163\u308c\u6b21\u7b2c\u304b\u306a\uff1f\n\n\u3053\u308c\u3067\u5feb\u9069\u306aJava\u30e9\u30a4\u30d5\u304c\u9001\u308c\u308b\u306d\uff01 \u4e59\u3063\u3057\u305f\uff89\uff7c\n\n## \u8ffd\u4f38\n\u3061\u306a\u307f\u306b\u5192\u982d\u3067\u89e6\u308c\u305f`last`\u3082\u306a\u3044\u305c\uff01\u3060\u3051\u3069\u3001\u8abf\u3079\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u4f8b\u304c\u3042\u3063\u305f\u3088\n\n```Java\nstream.reduce((first, second) -> second);\n```\n\n\u306a\u308b\u307b\u3069\uff01\uff01\uff01\n"}