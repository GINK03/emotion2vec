{"context": "\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u5bfe\u8c61\u3068\u3059\u308b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308b\u89b3\u6e2c\u7a7a\u9593\uff08\u9ad8\u6b21\u5143\uff09\u304b\u3089\u6f5c\u5728\u7a7a\u9593\uff08\u4f4e\u6b21\u5143\uff09\u3078\u306e\u5c04\u5f71\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u306e\u304c\u4e3b\u6210\u5206\u5206\u6790(PCA: Principal Component Analysis)\u306e\u4e3b\u306a\u4f7f\u3044\u65b9\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u53ef\u8996\u5316\u304c\u76ee\u7684\u306a\u3089\u3070\u6f5c\u5728\u7a7a\u9593\u3092\uff12\uff08\u3082\u3057\u304f\u306f\uff13\uff09\u6b21\u5143\u306b\u3057\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u3060\u3068\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u3044\u304f\u3064\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u308b\u72b6\u6cc1\u306f\u7a00\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u5bc4\u4e0e\u7387\u3092\u8a08\u7b97\u3057\u3066\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u7d50\u5c40\u305d\u306e\u3068\u304d\u306e\u95be\u5024\u306f\u79c1\u305f\u3061\u304c\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u306b\u3088\u3063\u3066\u81ea\u52d5\u7684\u306b\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n\u78ba\u7387\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e3b\u6210\u5206\u5206\u6790\u3092\u78ba\u7387\u7684\u306b\u89e3\u91c8\u3059\u308b\u3053\u3068\u3067\u3001\u5f8c\u3005\u30d9\u30a4\u30ba\u7684\u306a\u53d6\u308a\u6271\u3044\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u78ba\u7387\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u3001\u79c1\u305f\u3061\u304c\u89b3\u6e2c\u3057\u305f\u30c7\u30fc\u30bfxxx(D\u6b21\u5143)\u306f\u3001\u6f5c\u5728\u7a7a\u9593\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305fzzz(M\u6b21\u5143)\u3092\u884c\u5217WWW((D,M)\u884c\u5217)\u3067\u5c04\u5f71\u3057\u3066\u304b\u3089\u5e73\u884c\u79fb\u52d5\u3055\u305b\u3066(+\u03bc+\u03bc+\\mu(D\u6b21\u5143))\u3001\u30ce\u30a4\u30ba\u3092\u52a0\u3048\u305f(+\u03f5+\\epsilon(D\u6b21\u5143))\u3082\u306e\u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\n{\\bf x = Wz + \\mu + \\epsilon}\nx=Wz+\u03bc+\u03f5{{\\bf x = Wz + \\mu + \\epsilon}\n}\n\u3053\u3053\u3067zz\u3068\u03f5\\epsilon\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\u63a8\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306fW,\u03bc,\u03c32W,\\mu,\\sigma^2(\u03f5\\epsilon\u304c\u5f93\u3046\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563)\u306e\uff13\u3064\u3067\u3001\u305d\u306e\u5c24\u5ea6\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\np({\\bf x|W,\\mu},\\sigma^2) = \\int p({\\bf x|Wz+\\mu},\\sigma^2)p({\\bf z}){\\rm d}{\\bf z}\np(x|W,\u03bc,\u03c32)=\u222bp(x|Wz+\u03bc,\u03c32)p(z)dz{p({\\bf x|W,\\mu},\\sigma^2) = \\int p({\\bf x|Wz+\\mu},\\sigma^2)p({\\bf z}){\\rm d}{\\bf z}\n}\n\u3053\u306e\u5c24\u5ea6\u95a2\u6570\u3092\u6700\u5927\u5316\u3059\u308b\u624b\u6cd5\u304cPRML\u3067\u306f\uff12\u3064\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u3064\u76ee\u306f\u5358\u7d14\u306b\u7279\u7570\u5024\u5206\u89e3\u3092\u5229\u7528\u3059\u308b\u624b\u6cd5\u3001\u3082\u3046\u4e00\u3064\u306f\u3001EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066zz\u306b\u3064\u3044\u3066\u306e\u4e8b\u5f8c\u5206\u5e03\u306e\u66f4\u65b0(E\u30b9\u30c6\u30c3\u30d7)\u3068\u5b8c\u5168\u30c7\u30fc\u30bfx,zx,z\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316(M\u30b9\u30c6\u30c3\u30d7)\u3092\u7e70\u308a\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u6f5c\u5728\u5909\u6570\u7a7a\u9593\u306e\u6b21\u5143\u3092M\u306b\u56fa\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3092\u7528\u3044\u3066\u4f59\u5206\u306a\u6b21\u5143\u3092\u679d\u5208\u308a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\uff08\u305f\u3060\u3057\u3001M\u306e\u5024\u304c\u5b9f\u969b\u306b\u6e1b\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff09\u305d\u306e\u305f\u3081\u306b\u30d1\u30e9\u30e1\u30fc\u30bfWW\u306b\u6b21\u306e\u3088\u3046\u306a\u4e8b\u524d\u5206\u5e03\u3092\u8a2d\u3051\u307e\u3059\u3002\np({\\bf W}|{\\bf \\alpha}) = \\prod_{i=1}^M\\left({\\alpha_i\\over2\\pi}\\right)^{D/2}\\exp\\left\\{-{1\\over2}\\alpha_i{\\bf w}_i^\\top {\\bf w}_i\\right\\}\np(W|\u03b1)=M\u220fi=1(\u03b1i2\u03c0)D/2exp{\u221212\u03b1iw\u22a4iwi}{p({\\bf W}|{\\bf \\alpha}) = \\prod_{i=1}^M\\left({\\alpha_i\\over2\\pi}\\right)^{D/2}\\exp\\left\\{-{1\\over2}\\alpha_i{\\bf w}_i^\\top {\\bf w}_i\\right\\}\n}\n\u3053\u3053\u3067\u3001wi{\\bf w}_i\u306fW{\\bf W}\u306eii\u756a\u76ee\u306e\u5217\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\u305d\u3057\u3066\u3001\u03b1i\\alpha_i\u306f\u500b\u3005\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5f79\u5272\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u03b1\\alpha\u3092\u63a8\u5b9a\u3057\u3066\u304f\u3068\u5e7e\u3064\u304b\u306e\u6210\u5206\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u5024\u3092\u6301\u3061\u307e\u3059\u3002\u305d\u3046\u306a\u308b\u3068\u7cbe\u5ea6\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u5bfe\u5fdc\u3059\u308bW{\\bf }W\u306e\u5217\u30d9\u30af\u30c8\u30eb\u306e\u6210\u5206\u306f0\u3070\u304b\u308a\u3001\u3059\u306a\u308f\u3061\u305d\u306e\u6b21\u5143\u304c\u679d\u5208\u308a\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\n\u3044\u3064\u3082\u901a\u308amatplotlib\u3068numpy\u3060\u3051\u4f7f\u3044\u307e\u3059\u3002\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\u6700\u5c24\u6cd5\u306b\u3088\u308b\u4e3b\u6210\u5206\u5206\u6790\n\u901a\u5e38\u901a\u308a\u306e\u56fa\u6709\u5024\u5206\u89e3\u3092\u7528\u3044\u305f\u624b\u6cd5\n# \u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\u30af\u30e9\u30b9\nclass PCA(object):\n\n    def __init__(self, n_component):\n        # \u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u6307\u5b9a\n        self.n_component = n_component\n\n    # \u6700\u5c24\u6cd5\u3067\u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\n    def fit(self, X):\n        # PRML\u5f0f(12.1) mu\u306e\u6700\u5c24\u63a8\u5b9a\u5024\u3092\u8a08\u7b97\n        self.mean = np.mean(X, axis=0)\n\n        # PRML\u5f0f(12.2) \u30c7\u30fc\u30bf\u5171\u5206\u6563\u884c\u5217\n        cov = np.cov(X, rowvar=False)\n\n        # \u56fa\u6709\u5024\u5206\u89e3\n        values, vectors = np.linalg.eigh(cov)\n        index = np.size(X, 1) - self.n_component\n\n        # PRML\u5f0f(12.46) sigma^2\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n        if index == 0:\n            self.var = 0\n        else:\n            self.var = np.mean(values[:index])\n\n        # PRML\u5f0f(12.45) \u5c04\u5f71\u884c\u5217W\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n        self.W = vectors[:, index:].dot(np.sqrt(np.diag(values[index:]) - self.var * np.eye(self.n_component)))\n\n\n\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5168\u3066\u5148\u307b\u3069\u306ePCA\u30af\u30e9\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u4eca\u56de\u306f\u6bd4\u8f03\u306e\u305f\u3081\u306b\u3001\u307e\u305a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u5c24\u63a8\u5b9a\u3057\u3066\u3001\u305d\u308c\u3089\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3067\u679d\u5208\u308a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n    # \u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\n    def fit_bayesian(self, X, iter_max=100):\n        # \u30c7\u30fc\u30bf\u7a7a\u9593\u306e\u6b21\u5143\n        self.ndim = np.size(X, 1)\n\n        # \u6700\u5c24\u63a8\u5b9a\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\u3057\u3066\u521d\u671f\u5024\u3068\u3059\u308b\n        self.fit(X)\n\n        # \u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5316(1\u5ea6\u76ee\u306e\u63a8\u5b9a)\n        self.alpha = self.ndim / np.sum(self.W ** 2, axis=0)\n\n        # \u30c7\u30fc\u30bf\u306e\uff10\u5e73\u5747\u5316\n        D = X - self.mean\n\n        # EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u5b9a\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\n        for i in xrange(iter_max):\n            # E\u30b9\u30c6\u30c3\u30d7 z\u306e\u5341\u5206\u7d71\u8a08\u91cf\n            Ez, Ezz = self.expectation(D)\n\n            # M\u30b9\u30c6\u30c3\u30d7 W,sigma^2\u306e\u63a8\u5b9a\n            self.maximize(D, Ez, Ezz)\n\n            # PRML\u5f0f(12.62) \u8d85\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\n            self.alpha = self.ndim / np.sum(self.W ** 2, axis=0).clip(min=1e-10)\n\n    # E\u30b9\u30c6\u30c3\u30d7 z\u306e\u5341\u5206\u7d71\u8a08\u91cf E[z]\u3001E[zz^T]\u306e\u8a08\u7b97\n    def expectation(self, D):\n        # PRML\u5f0f(12.41)\n        M = self.W.T.dot(self.W) + self.var * np.eye(self.n_component)\n        Minv = np.linalg.inv(M)\n\n        # PRML\u5f0f(12.54) E[z]\n        Ez = D.dot(self.W).dot(Minv)\n\n        # PRML\u5f0f(12.55) E[zz^T]\n        Ezz = self.var * Minv + np.einsum('ni,nj->nij', Ez, Ez)\n        return Ez, Ezz\n\n    # M\u30b9\u30c6\u30c3\u30d7 W,sigma^2\u306e\u63a8\u5b9a\n    def maximize(self, D, Ez, Ezz):\n        # PRML\u5f0f(12.63) W\u306e\u63a8\u5b9a\n        self.W = D.T.dot(Ez).dot(np.linalg.inv(np.sum(Ezz, axis=0) + self.var * np.diag(self.alpha)))\n\n        # PRML\u5f0f(12.57) sigma^2\u306e\u63a8\u5b9a\n        self.var = np.mean(\n            np.mean(D ** 2, axis=-1)\n            - 2 * np.mean(Ez.dot(self.W.T) * D, axis=-1)\n            + np.trace(Ezz.dot(self.W.T).dot(self.W).T) / self.ndim)\n\n\n\u30d2\u30f3\u30c8\u30f3\u56f3\n\u4eca\u56de\u306fPRML\u56f312.14\u306e\u518d\u73fe\u3092\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u884c\u5217\u306e\u5404\u8981\u7d20\u3092\u6b63\u65b9\u5f62\u3067\u8868\u3059\u30d2\u30f3\u30c8\u30f3\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u95a2\u6570\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002matplotlib hinton\u3067\u30b0\u30b0\u3063\u3066\u51fa\u3066\u304d\u305f\u30da\u30fc\u30b8\u306e\u3082\u306e\u3092\u5c11\u3057\u6539\u5909\u3057\u3066\u3044\u307e\u3059\u3002\ndef hinton(matrix, max_weight=None, ax=None):\n    \"\"\"Draw Hinton diagram for visualizing a weight matrix.\"\"\"\n    ax = ax if ax is not None else plt.gca()\n\n    if not max_weight:\n        max_weight = 2 ** np.ceil(np.log(np.abs(matrix).max()) / np.log(2))\n\n    ax.patch.set_facecolor('gray')\n    ax.set_aspect('equal', 'box')\n    ax.xaxis.set_major_locator(plt.NullLocator())\n    ax.yaxis.set_major_locator(plt.NullLocator())\n\n    for (x, y), w in np.ndenumerate(matrix):\n        color = 'white' if w > 0 else 'black'\n        size = np.sqrt(np.abs(w) / max_weight)\n        rect = plt.Rectangle([y - size / 2, x - size / 2], size, size,\n                             facecolor=color, edgecolor=color)\n        ax.add_patch(rect)\n\n    ax.autoscale_view()\n    ax.invert_yaxis()\n    plt.xlim(-0.5, np.size(matrix, 1) - 0.5)\n    plt.ylim(-0.5, len(matrix) - 0.5)\n    plt.show()\n\n\n\u30e1\u30a4\u30f3\u95a2\u6570\ndef create_toy_data(sample_size=100, ndim_hidden=1, ndim_observe=2, std=1.):\n    Z = np.random.normal(size=(sample_size, ndim_hidden))\n    mu = np.random.uniform(-5, 5, size=(ndim_observe))\n    W = np.random.uniform(-5, 5, (ndim_hidden, ndim_observe))\n\n    # PRML\u5f0f(12.33)\n    X = Z.dot(W) + mu + np.random.normal(scale=std, size=(sample_size, ndim_observe))\n    return X\n\n\ndef main():\n    # \uff13\u6b21\u5143\u306e\u6f5c\u5728\u7a7a\u9593\u304b\u3089\uff11\uff10\u6b21\u5143\u7a7a\u9593\u306b\u5c04\u5f71\u3057\u3066\u3067\u304d\u305f\u30c7\u30fc\u30bf\u3092\uff11\uff10\uff10\u70b9\u4f5c\u6210\n    X = create_toy_data(sample_size=100, ndim_hidden=3, ndim_observe=10, std=1.)\n\n    # \u6f5c\u5728\u7a7a\u9593\u30929\u6b21\u5143\u3068\u3057\u3066\u6700\u5c24\u6cd5\u306b\u3088\u308bPCA\u3092\u884c\u3046\n    pca = PCA(9)\n    pca.fit(X)\n    hinton(pca.W)\n\n    # \u6700\u5927\uff19\u6b21\u5143\u304b\u3089\u679d\u5208\u308a\u3092\u3057\u3066\u30d9\u30a4\u30ba\u7684PCA\u3092\u884c\u3046\n    pca.fit_bayesian(X)\n    hinton(pca.W)\n\n\n\u5168\u4f53\u306e\u30b3\u30fc\u30c9\n\npca.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass PCA(object):\n\n    def __init__(self, n_component):\n        self.n_component = n_component\n\n    def fit(self, X):\n        self.mean = np.mean(X, axis=0)\n        cov = np.cov(X, rowvar=False)\n        values, vectors = np.linalg.eigh(cov)\n        index = np.size(X, 1) - self.n_component\n        if index == 0:\n            self.var = 0\n        else:\n            self.var = np.mean(values[:index])\n        self.W = vectors[:, index:].dot(np.sqrt(np.diag(values[index:]) - self.var * np.eye(self.n_component)))\n\n    def fit_bayesian(self, X, iter_max=100):\n        self.ndim = np.size(X, 1)\n        self.fit(X)\n        self.alpha = self.ndim / np.sum(self.W ** 2, axis=0)\n        D = X - self.mean\n        for i in xrange(iter_max):\n            Ez, Ezz = self.expectation(D)\n            self.maximize(D, Ez, Ezz)\n            self.alpha = self.ndim / np.sum(self.W ** 2, axis=0).clip(min=1e-10)\n\n    def expectation(self, D):\n        M = self.W.T.dot(self.W) + self.var * np.eye(self.n_component)\n        Minv = np.linalg.inv(M)\n        Ez = D.dot(self.W).dot(Minv)\n        Ezz = self.var * Minv + np.einsum('ni,nj->nij', Ez, Ez)\n        return Ez, Ezz\n\n    def maximize(self, D, Ez, Ezz):\n        self.W = D.T.dot(Ez).dot(np.linalg.inv(np.sum(Ezz, axis=0) + self.var * np.diag(self.alpha)))\n        self.var = np.mean(\n            np.mean(D ** 2, axis=-1)\n            - 2 * np.mean(Ez.dot(self.W.T) * D, axis=-1)\n            + np.trace(Ezz.dot(self.W.T).dot(self.W).T) / self.ndim)\n\n\ndef hinton(matrix, max_weight=None, ax=None):\n    \"\"\"Draw Hinton diagram for visualizing a weight matrix.\"\"\"\n    ax = ax if ax is not None else plt.gca()\n\n    if not max_weight:\n        max_weight = 2 ** np.ceil(np.log(np.abs(matrix).max()) / np.log(2))\n\n    ax.patch.set_facecolor('gray')\n    ax.set_aspect('equal', 'box')\n    ax.xaxis.set_major_locator(plt.NullLocator())\n    ax.yaxis.set_major_locator(plt.NullLocator())\n\n    for (x, y), w in np.ndenumerate(matrix):\n        color = 'white' if w > 0 else 'black'\n        size = np.sqrt(np.abs(w) / max_weight)\n        rect = plt.Rectangle([y - size / 2, x - size / 2], size, size,\n                             facecolor=color, edgecolor=color)\n        ax.add_patch(rect)\n\n    ax.autoscale_view()\n    ax.invert_yaxis()\n    plt.xlim(-0.5, np.size(matrix, 1) - 0.5)\n    plt.ylim(-0.5, len(matrix) - 0.5)\n    plt.show()\n\n\ndef create_toy_data(sample_size=100, ndim_hidden=1, ndim_observe=2, std=1.):\n    Z = np.random.normal(size=(sample_size, ndim_hidden))\n    mu = np.random.uniform(-5, 5, size=(ndim_observe))\n    W = np.random.uniform(-5, 5, (ndim_hidden, ndim_observe))\n    X = Z.dot(W) + mu + np.random.normal(scale=std, size=(sample_size, ndim_observe))\n    return X\n\n\ndef main():\n    X = create_toy_data(sample_size=100, ndim_hidden=3, ndim_observe=10, std=1.)\n\n    pca = PCA(9)\n    pca.fit(X)\n    hinton(pca.W)\n\n    pca.fit_bayesian(X)\n    hinton(pca.W)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\u7d50\u679c\n\u6700\u5c24\u6cd5\u306b\u3088\u308bPCA\u3067\u5c04\u5f71\u884c\u5217W\u3092\u63a8\u5b9a\u3057\u305f\u7d50\u679c\u304c\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u7528\u3044\u3066\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u679d\u5208\u308a\u3059\u308b\u3068\u5c04\u5f71\u884c\u5217W\u306f\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5de6\u306e\uff16\u5217\u5206\u304c\u6d88\u3048\u3066\u3044\u3066\u3001\u305d\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u6b21\u5143\u304c\u679d\u5208\u308a\u3055\u308c\u307e\u3057\u305f\u3002\uff13\u6b21\u5143\u304b\u3089\u5c04\u5f71\u3057\u3066\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u6349\u3048\u3089\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\nPRML\u56f312.14\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n\u7d42\u308f\u308a\u306b\nPRML\u3082\u3053\u306e\u3042\u305f\u308a\u307e\u3067\u304f\u308b\u3068\u3001\u4eca\u307e\u3067\u306b\u7fd2\u3063\u305f\u3053\u3068\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7b2c\uff16\u7ae0\u306e\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3068\u7b2c\uff19\u7ae0\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u89b3\u6e2c\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306b\u306f\u3088\u308a\u4f4e\u6b21\u5143\u7a7a\u9593\u304b\u3089\u5c04\u5f71\u3055\u308c\u3066\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u9069\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u6b20\u640d\u5024\u306e\u3042\u308b\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3082\u9069\u7528\u3067\u304d\u308b\u3089\u3057\u3044\u306e\u3067\u3001\u305d\u3061\u3089\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3082\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u5bfe\u8c61\u3068\u3059\u308b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308b\u89b3\u6e2c\u7a7a\u9593\uff08\u9ad8\u6b21\u5143\uff09\u304b\u3089\u6f5c\u5728\u7a7a\u9593\uff08\u4f4e\u6b21\u5143\uff09\u3078\u306e\u5c04\u5f71\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u306e\u304c\u4e3b\u6210\u5206\u5206\u6790(PCA: Principal Component Analysis)\u306e\u4e3b\u306a\u4f7f\u3044\u65b9\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u53ef\u8996\u5316\u304c\u76ee\u7684\u306a\u3089\u3070\u6f5c\u5728\u7a7a\u9593\u3092\uff12\uff08\u3082\u3057\u304f\u306f\uff13\uff09\u6b21\u5143\u306b\u3057\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u3060\u3068\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u3044\u304f\u3064\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u308f\u304b\u308b\u72b6\u6cc1\u306f\u7a00\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u5bc4\u4e0e\u7387\u3092\u8a08\u7b97\u3057\u3066\u3068\u3044\u3046\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u7d50\u5c40\u305d\u306e\u3068\u304d\u306e\u95be\u5024\u306f\u79c1\u305f\u3061\u304c\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u306b\u3088\u3063\u3066\u81ea\u52d5\u7684\u306b\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n# \u78ba\u7387\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e3b\u6210\u5206\u5206\u6790\u3092\u78ba\u7387\u7684\u306b\u89e3\u91c8\u3059\u308b\u3053\u3068\u3067\u3001\u5f8c\u3005\u30d9\u30a4\u30ba\u7684\u306a\u53d6\u308a\u6271\u3044\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u78ba\u7387\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u3001\u79c1\u305f\u3061\u304c\u89b3\u6e2c\u3057\u305f\u30c7\u30fc\u30bf$x$(D\u6b21\u5143)\u306f\u3001\u6f5c\u5728\u7a7a\u9593\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f$z$(M\u6b21\u5143)\u3092\u884c\u5217$W$((D,M)\u884c\u5217)\u3067\u5c04\u5f71\u3057\u3066\u304b\u3089\u5e73\u884c\u79fb\u52d5\u3055\u305b\u3066($+\\mu$(D\u6b21\u5143))\u3001\u30ce\u30a4\u30ba\u3092\u52a0\u3048\u305f($+\\epsilon$(D\u6b21\u5143))\u3082\u306e\u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\n\n```math\n{\\bf x = Wz + \\mu + \\epsilon}\n```\n\u3053\u3053\u3067$z$\u3068$\\epsilon$\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\u63a8\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f$W,\\mu,\\sigma^2$($\\epsilon$\u304c\u5f93\u3046\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563)\u306e\uff13\u3064\u3067\u3001\u305d\u306e\u5c24\u5ea6\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\np({\\bf x|W,\\mu},\\sigma^2) = \\int p({\\bf x|Wz+\\mu},\\sigma^2)p({\\bf z}){\\rm d}{\\bf z}\n```\n\n\u3053\u306e\u5c24\u5ea6\u95a2\u6570\u3092\u6700\u5927\u5316\u3059\u308b\u624b\u6cd5\u304cPRML\u3067\u306f\uff12\u3064\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u3064\u76ee\u306f\u5358\u7d14\u306b\u7279\u7570\u5024\u5206\u89e3\u3092\u5229\u7528\u3059\u308b\u624b\u6cd5\u3001\u3082\u3046\u4e00\u3064\u306f\u3001EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066$z$\u306b\u3064\u3044\u3066\u306e\u4e8b\u5f8c\u5206\u5e03\u306e\u66f4\u65b0(E\u30b9\u30c6\u30c3\u30d7)\u3068\u5b8c\u5168\u30c7\u30fc\u30bf$x,z$\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316(M\u30b9\u30c6\u30c3\u30d7)\u3092\u7e70\u308a\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n# \u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u6f5c\u5728\u5909\u6570\u7a7a\u9593\u306e\u6b21\u5143\u3092M\u306b\u56fa\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3092\u7528\u3044\u3066\u4f59\u5206\u306a\u6b21\u5143\u3092\u679d\u5208\u308a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\uff08\u305f\u3060\u3057\u3001M\u306e\u5024\u304c\u5b9f\u969b\u306b\u6e1b\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff09\u305d\u306e\u305f\u3081\u306b\u30d1\u30e9\u30e1\u30fc\u30bf$W$\u306b\u6b21\u306e\u3088\u3046\u306a\u4e8b\u524d\u5206\u5e03\u3092\u8a2d\u3051\u307e\u3059\u3002\n\n```math\np({\\bf W}|{\\bf \\alpha}) = \\prod_{i=1}^M\\left({\\alpha_i\\over2\\pi}\\right)^{D/2}\\exp\\left\\{-{1\\over2}\\alpha_i{\\bf w}_i^\\top {\\bf w}_i\\right\\}\n```\n\n\u3053\u3053\u3067\u3001${\\bf w}\\_i$\u306f${\\bf W}$\u306e$i$\u756a\u76ee\u306e\u5217\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\u305d\u3057\u3066\u3001$\\alpha\\_i$\u306f\u500b\u3005\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5f79\u5272\u3092\u3057\u3066\u3044\u307e\u3059\u3002$\\alpha$\u3092\u63a8\u5b9a\u3057\u3066\u304f\u3068\u5e7e\u3064\u304b\u306e\u6210\u5206\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u5024\u3092\u6301\u3061\u307e\u3059\u3002\u305d\u3046\u306a\u308b\u3068\u7cbe\u5ea6\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u5bfe\u5fdc\u3059\u308b${\\bf }W$\u306e\u5217\u30d9\u30af\u30c8\u30eb\u306e\u6210\u5206\u306f0\u3070\u304b\u308a\u3001\u3059\u306a\u308f\u3061\u305d\u306e\u6b21\u5143\u304c\u679d\u5208\u308a\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n\u3044\u3064\u3082\u901a\u308amatplotlib\u3068numpy\u3060\u3051\u4f7f\u3044\u307e\u3059\u3002\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n\n## \u6700\u5c24\u6cd5\u306b\u3088\u308b\u4e3b\u6210\u5206\u5206\u6790\n\u901a\u5e38\u901a\u308a\u306e\u56fa\u6709\u5024\u5206\u89e3\u3092\u7528\u3044\u305f\u624b\u6cd5\n\n```python\n# \u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\u30af\u30e9\u30b9\nclass PCA(object):\n\n    def __init__(self, n_component):\n        # \u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u6307\u5b9a\n        self.n_component = n_component\n\n    # \u6700\u5c24\u6cd5\u3067\u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\n    def fit(self, X):\n        # PRML\u5f0f(12.1) mu\u306e\u6700\u5c24\u63a8\u5b9a\u5024\u3092\u8a08\u7b97\n        self.mean = np.mean(X, axis=0)\n\n        # PRML\u5f0f(12.2) \u30c7\u30fc\u30bf\u5171\u5206\u6563\u884c\u5217\n        cov = np.cov(X, rowvar=False)\n\n        # \u56fa\u6709\u5024\u5206\u89e3\n        values, vectors = np.linalg.eigh(cov)\n        index = np.size(X, 1) - self.n_component\n\n        # PRML\u5f0f(12.46) sigma^2\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n        if index == 0:\n            self.var = 0\n        else:\n            self.var = np.mean(values[:index])\n\n        # PRML\u5f0f(12.45) \u5c04\u5f71\u884c\u5217W\u306e\u6700\u5c24\u63a8\u5b9a\u5024\n        self.W = vectors[:, index:].dot(np.sqrt(np.diag(values[index:]) - self.var * np.eye(self.n_component)))\n```\n\n## \u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\n\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5168\u3066\u5148\u307b\u3069\u306ePCA\u30af\u30e9\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u4eca\u56de\u306f\u6bd4\u8f03\u306e\u305f\u3081\u306b\u3001\u307e\u305a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u5c24\u63a8\u5b9a\u3057\u3066\u3001\u305d\u308c\u3089\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3067\u679d\u5208\u308a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\n    # \u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046\n    def fit_bayesian(self, X, iter_max=100):\n        # \u30c7\u30fc\u30bf\u7a7a\u9593\u306e\u6b21\u5143\n        self.ndim = np.size(X, 1)\n\n        # \u6700\u5c24\u63a8\u5b9a\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\u3057\u3066\u521d\u671f\u5024\u3068\u3059\u308b\n        self.fit(X)\n\n        # \u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5316(1\u5ea6\u76ee\u306e\u63a8\u5b9a)\n        self.alpha = self.ndim / np.sum(self.W ** 2, axis=0)\n\n        # \u30c7\u30fc\u30bf\u306e\uff10\u5e73\u5747\u5316\n        D = X - self.mean\n\n        # EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u5b9a\u56de\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\n        for i in xrange(iter_max):\n            # E\u30b9\u30c6\u30c3\u30d7 z\u306e\u5341\u5206\u7d71\u8a08\u91cf\n            Ez, Ezz = self.expectation(D)\n\n            # M\u30b9\u30c6\u30c3\u30d7 W,sigma^2\u306e\u63a8\u5b9a\n            self.maximize(D, Ez, Ezz)\n\n            # PRML\u5f0f(12.62) \u8d85\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\n            self.alpha = self.ndim / np.sum(self.W ** 2, axis=0).clip(min=1e-10)\n\n    # E\u30b9\u30c6\u30c3\u30d7 z\u306e\u5341\u5206\u7d71\u8a08\u91cf E[z]\u3001E[zz^T]\u306e\u8a08\u7b97\n    def expectation(self, D):\n        # PRML\u5f0f(12.41)\n        M = self.W.T.dot(self.W) + self.var * np.eye(self.n_component)\n        Minv = np.linalg.inv(M)\n\n        # PRML\u5f0f(12.54) E[z]\n        Ez = D.dot(self.W).dot(Minv)\n\n        # PRML\u5f0f(12.55) E[zz^T]\n        Ezz = self.var * Minv + np.einsum('ni,nj->nij', Ez, Ez)\n        return Ez, Ezz\n\n    # M\u30b9\u30c6\u30c3\u30d7 W,sigma^2\u306e\u63a8\u5b9a\n    def maximize(self, D, Ez, Ezz):\n        # PRML\u5f0f(12.63) W\u306e\u63a8\u5b9a\n        self.W = D.T.dot(Ez).dot(np.linalg.inv(np.sum(Ezz, axis=0) + self.var * np.diag(self.alpha)))\n\n        # PRML\u5f0f(12.57) sigma^2\u306e\u63a8\u5b9a\n        self.var = np.mean(\n            np.mean(D ** 2, axis=-1)\n            - 2 * np.mean(Ez.dot(self.W.T) * D, axis=-1)\n            + np.trace(Ezz.dot(self.W.T).dot(self.W).T) / self.ndim)\n```\n\n## \u30d2\u30f3\u30c8\u30f3\u56f3\n\u4eca\u56de\u306fPRML\u56f312.14\u306e\u518d\u73fe\u3092\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u884c\u5217\u306e\u5404\u8981\u7d20\u3092\u6b63\u65b9\u5f62\u3067\u8868\u3059\u30d2\u30f3\u30c8\u30f3\u56f3\u3092\u63cf\u304f\u305f\u3081\u306e\u95a2\u6570\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002[matplotlib hinton\u3067\u30b0\u30b0\u3063\u3066\u51fa\u3066\u304d\u305f\u30da\u30fc\u30b8](http://matplotlib.org/examples/specialty_plots/hinton_demo.html)\u306e\u3082\u306e\u3092\u5c11\u3057\u6539\u5909\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\ndef hinton(matrix, max_weight=None, ax=None):\n    \"\"\"Draw Hinton diagram for visualizing a weight matrix.\"\"\"\n    ax = ax if ax is not None else plt.gca()\n\n    if not max_weight:\n        max_weight = 2 ** np.ceil(np.log(np.abs(matrix).max()) / np.log(2))\n\n    ax.patch.set_facecolor('gray')\n    ax.set_aspect('equal', 'box')\n    ax.xaxis.set_major_locator(plt.NullLocator())\n    ax.yaxis.set_major_locator(plt.NullLocator())\n\n    for (x, y), w in np.ndenumerate(matrix):\n        color = 'white' if w > 0 else 'black'\n        size = np.sqrt(np.abs(w) / max_weight)\n        rect = plt.Rectangle([y - size / 2, x - size / 2], size, size,\n                             facecolor=color, edgecolor=color)\n        ax.add_patch(rect)\n\n    ax.autoscale_view()\n    ax.invert_yaxis()\n    plt.xlim(-0.5, np.size(matrix, 1) - 0.5)\n    plt.ylim(-0.5, len(matrix) - 0.5)\n    plt.show()\n```\n\n## \u30e1\u30a4\u30f3\u95a2\u6570\n\n```python\ndef create_toy_data(sample_size=100, ndim_hidden=1, ndim_observe=2, std=1.):\n    Z = np.random.normal(size=(sample_size, ndim_hidden))\n    mu = np.random.uniform(-5, 5, size=(ndim_observe))\n    W = np.random.uniform(-5, 5, (ndim_hidden, ndim_observe))\n\n    # PRML\u5f0f(12.33)\n    X = Z.dot(W) + mu + np.random.normal(scale=std, size=(sample_size, ndim_observe))\n    return X\n\n\ndef main():\n    # \uff13\u6b21\u5143\u306e\u6f5c\u5728\u7a7a\u9593\u304b\u3089\uff11\uff10\u6b21\u5143\u7a7a\u9593\u306b\u5c04\u5f71\u3057\u3066\u3067\u304d\u305f\u30c7\u30fc\u30bf\u3092\uff11\uff10\uff10\u70b9\u4f5c\u6210\n    X = create_toy_data(sample_size=100, ndim_hidden=3, ndim_observe=10, std=1.)\n\n    # \u6f5c\u5728\u7a7a\u9593\u30929\u6b21\u5143\u3068\u3057\u3066\u6700\u5c24\u6cd5\u306b\u3088\u308bPCA\u3092\u884c\u3046\n    pca = PCA(9)\n    pca.fit(X)\n    hinton(pca.W)\n\n    # \u6700\u5927\uff19\u6b21\u5143\u304b\u3089\u679d\u5208\u308a\u3092\u3057\u3066\u30d9\u30a4\u30ba\u7684PCA\u3092\u884c\u3046\n    pca.fit_bayesian(X)\n    hinton(pca.W)\n```\n\n\n\n\n## \u5168\u4f53\u306e\u30b3\u30fc\u30c9\n\n```python:pca.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass PCA(object):\n\n    def __init__(self, n_component):\n        self.n_component = n_component\n\n    def fit(self, X):\n        self.mean = np.mean(X, axis=0)\n        cov = np.cov(X, rowvar=False)\n        values, vectors = np.linalg.eigh(cov)\n        index = np.size(X, 1) - self.n_component\n        if index == 0:\n            self.var = 0\n        else:\n            self.var = np.mean(values[:index])\n        self.W = vectors[:, index:].dot(np.sqrt(np.diag(values[index:]) - self.var * np.eye(self.n_component)))\n\n    def fit_bayesian(self, X, iter_max=100):\n        self.ndim = np.size(X, 1)\n        self.fit(X)\n        self.alpha = self.ndim / np.sum(self.W ** 2, axis=0)\n        D = X - self.mean\n        for i in xrange(iter_max):\n            Ez, Ezz = self.expectation(D)\n            self.maximize(D, Ez, Ezz)\n            self.alpha = self.ndim / np.sum(self.W ** 2, axis=0).clip(min=1e-10)\n\n    def expectation(self, D):\n        M = self.W.T.dot(self.W) + self.var * np.eye(self.n_component)\n        Minv = np.linalg.inv(M)\n        Ez = D.dot(self.W).dot(Minv)\n        Ezz = self.var * Minv + np.einsum('ni,nj->nij', Ez, Ez)\n        return Ez, Ezz\n\n    def maximize(self, D, Ez, Ezz):\n        self.W = D.T.dot(Ez).dot(np.linalg.inv(np.sum(Ezz, axis=0) + self.var * np.diag(self.alpha)))\n        self.var = np.mean(\n            np.mean(D ** 2, axis=-1)\n            - 2 * np.mean(Ez.dot(self.W.T) * D, axis=-1)\n            + np.trace(Ezz.dot(self.W.T).dot(self.W).T) / self.ndim)\n\n\ndef hinton(matrix, max_weight=None, ax=None):\n    \"\"\"Draw Hinton diagram for visualizing a weight matrix.\"\"\"\n    ax = ax if ax is not None else plt.gca()\n\n    if not max_weight:\n        max_weight = 2 ** np.ceil(np.log(np.abs(matrix).max()) / np.log(2))\n\n    ax.patch.set_facecolor('gray')\n    ax.set_aspect('equal', 'box')\n    ax.xaxis.set_major_locator(plt.NullLocator())\n    ax.yaxis.set_major_locator(plt.NullLocator())\n\n    for (x, y), w in np.ndenumerate(matrix):\n        color = 'white' if w > 0 else 'black'\n        size = np.sqrt(np.abs(w) / max_weight)\n        rect = plt.Rectangle([y - size / 2, x - size / 2], size, size,\n                             facecolor=color, edgecolor=color)\n        ax.add_patch(rect)\n\n    ax.autoscale_view()\n    ax.invert_yaxis()\n    plt.xlim(-0.5, np.size(matrix, 1) - 0.5)\n    plt.ylim(-0.5, len(matrix) - 0.5)\n    plt.show()\n\n\ndef create_toy_data(sample_size=100, ndim_hidden=1, ndim_observe=2, std=1.):\n    Z = np.random.normal(size=(sample_size, ndim_hidden))\n    mu = np.random.uniform(-5, 5, size=(ndim_observe))\n    W = np.random.uniform(-5, 5, (ndim_hidden, ndim_observe))\n    X = Z.dot(W) + mu + np.random.normal(scale=std, size=(sample_size, ndim_observe))\n    return X\n\n\ndef main():\n    X = create_toy_data(sample_size=100, ndim_hidden=3, ndim_observe=10, std=1.)\n\n    pca = PCA(9)\n    pca.fit(X)\n    hinton(pca.W)\n\n    pca.fit_bayesian(X)\n    hinton(pca.W)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# \u7d50\u679c\n\u6700\u5c24\u6cd5\u306b\u3088\u308bPCA\u3067\u5c04\u5f71\u884c\u5217W\u3092\u63a8\u5b9a\u3057\u305f\u7d50\u679c\u304c\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n![mle.png](https://qiita-image-store.s3.amazonaws.com/0/148017/cabfae69-8139-c35a-e75c-8ebdc27dcdb4.png)\n\u305d\u3057\u3066\u3001\u30d9\u30a4\u30ba\u7684\u4e3b\u6210\u5206\u5206\u6790\u3092\u7528\u3044\u3066\u6f5c\u5728\u7a7a\u9593\u306e\u6b21\u5143\u3092\u679d\u5208\u308a\u3059\u308b\u3068\u5c04\u5f71\u884c\u5217W\u306f\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5de6\u306e\uff16\u5217\u5206\u304c\u6d88\u3048\u3066\u3044\u3066\u3001\u305d\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u6b21\u5143\u304c\u679d\u5208\u308a\u3055\u308c\u307e\u3057\u305f\u3002\uff13\u6b21\u5143\u304b\u3089\u5c04\u5f71\u3057\u3066\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u6349\u3048\u3089\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n![bayesian.png](https://qiita-image-store.s3.amazonaws.com/0/148017/941a1f5a-8845-a7ad-12fb-b4012463232a.png)\nPRML\u56f312.14\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n# \u7d42\u308f\u308a\u306b\nPRML\u3082\u3053\u306e\u3042\u305f\u308a\u307e\u3067\u304f\u308b\u3068\u3001\u4eca\u307e\u3067\u306b\u7fd2\u3063\u305f\u3053\u3068\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7b2c\uff16\u7ae0\u306e\u95a2\u9023\u5ea6\u81ea\u52d5\u6c7a\u5b9a\u3068\u7b2c\uff19\u7ae0\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u89b3\u6e2c\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306b\u306f\u3088\u308a\u4f4e\u6b21\u5143\u7a7a\u9593\u304b\u3089\u5c04\u5f71\u3055\u308c\u3066\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u9069\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u6b20\u640d\u5024\u306e\u3042\u308b\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3082\u9069\u7528\u3067\u304d\u308b\u3089\u3057\u3044\u306e\u3067\u3001\u305d\u3061\u3089\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3082\u306e\u3067\u3059\u3002\n", "tags": ["PRML", "\u6a5f\u68b0\u5b66\u7fd2", "Python"]}