{"context": "\u3053\u308c\u304b\u3089\u3001\u771f\u9762\u76ee\u306bDeep Learning\u306e\u52c9\u5f37\u3092\u59cb\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u524d\u306b\u3001\u5b66\u7fd2\u306b\u5fc5\u8981\u306e\u5927\u91cf\u306a\u30c7\u30fc\u30bf\u304c\u3069\u3053\u304b\u3089\u5165\u624b\u3067\u3059\u308b\u304b\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002\n\u601d\u4ed8\u3044\u305f\u65b9\u6cd5\u306e\u4e00\u3064\u306fTwitter\u753b\u50cfbot\u304b\u3089\u753b\u50cf\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002\n\u3082\u3046\u4e00\u3064\u306fGoogle\u3001Bing\u306a\u3069\u306e\u753b\u50cf\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u826f\u3044bot\u3092\u898b\u3064\u3051\u308b\u306b\u306f\u6642\u9593\u304b\u304b\u308a\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u305a\u691c\u7d22API\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nBing\u691c\u7d22API\u306f\u4eca\u5e74\u5e74\u672b\u306b\u7d42\u4e86\u3059\u308b\u3088\u3046\u3067\u3059\u304b\u3089\u3001\u4eca\u56de\u306fGoogle\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a\n\u30ab\u30b9\u30bf\u30e0\u691c\u7d22\u3067\u65b0\u3057\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u6210\u3002\n\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u2460\u753b\u50cf\u691c\u7d22\u3092\u30aa\u30f3\u306b\u3057\u3066\n\u2461\u300c\u30a6\u30a7\u30d6\u5168\u4f53\u3092\u691c\u7d22\u3059\u308b\u300d\u3092\u9078\u629e\n\u2462\u691c\u7d22\u30b5\u30a4\u30c8\u3092\u524a\u9664\n\u2463\u691c\u7d22\u30a8\u30f3\u30b8\u30f3ID\u304b\u3089ID\u3092\u7372\u5f97\n\u3000ID\u306f\u300c\u6570\u5b57\u5217\uff1a\u82f1\u5b57\u5217\u300d\u306e\u578b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3000\u6570\u5b57\u5217\u306f\u30e6\u30fc\u30b6ID\u3001\u82f1\u5b57\u5217\u306f\u30a8\u30f3\u30b8\u30f3ID\u3089\u3057\u3044\u3067\u3059\u3002\n\nCustom Search API\u3092\u7372\u5f97\nGoogle Cloud Platform Console\u3067Custom Search API\u3092\u6709\u52b9\u306b\u3057\u3066\u3001\u8a8d\u8a3c\u60c5\u5831\u3067API\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\nPython Script\u306e\u4f5c\u6210\nhttps://www.googleapis.com/customsearch/v1?key=[API_KEY]&cx=[CUSTOM_SEARCH_ENGINE]&q=[search_item]\n\n\u3067\u691c\u7d22\u3067\u304d\u307e\u3059\u3002\n\u753b\u50cf\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u3001searchType=image\u3092\u8ffd\u52a0\u3057\u3066\u3001\nnum=xx&start=yy\u306f\u5927\u91cf\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30da\u30fc\u30b8\u30cd\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u3088\u308b\u3068\u3001num\u306f1~10\u306e\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u4e00\u56de\u3067\u6700\u592710\u500b\u3092\u691c\u7d22\u3067\u304d\u307e\u3059\u3002\n\u30b9\u30af\u30ea\u30d7\u30c8\u306ftukiyo3\u3055\u3093\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u3057\u307e\u3057\u305f\u3002\n\nget_image.py\n#-*- coding:utf-8 -*-\n#onlyzs1023@gmail.com 2016/11/21\nimport urllib.request\nfrom urllib.parse import quote\nimport httplib2\nimport json \nimport os\n\nAPI_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nCUSTOM_SEARCH_ENGINE = \"12345648954985648968:xxxxxxxxx\"\n\ndef getImageUrl(search_item, total_num):\n img_list = []\n i = 0\n while i < total_num:\n  query_img = \"https://www.googleapis.com/customsearch/v1?key=\" + API_KEY + \"&cx=\" + CUSTOM_SEARCH_ENGINE + \"&num=\" + str(10 if(total_num-i)>10 else (total_num-i)) + \"&start=\" + str(i+1) + \"&q=\" + quote(search_item) + \"&searchType=image\"\n  print (query_img)\n  res = urllib.request.urlopen(query_img)\n  data = json.loads(res.read().decode('utf-8'))\n  for j in range(len(data[\"items\"])):\n   img_list.append(data[\"items\"][j][\"link\"])\n  i=i+10\n return img_list\n\ndef getImage(search_item, img_list):\n opener = urllib.request.build_opener()\n http = httplib2.Http(\".cache\")\n for i in range(len(img_list)):\n  try:\n   fn, ext = os.path.splitext(img_list[i])\n   print(img_list[i])\n   response, content = http.request(img_list[i])\n   with open(search_item+str(i)+ext, 'wb') as f:\n    f.write(content)\n  except:\n   print(\"failed to download images.\")\n   continue\n\nif __name__ == \"__main__\":\n img_list = getImageUrl(\"\u72ac\", 5)\n print(img_list)\n getImage(\"dog\", img_list)\n\n\n\u30b3\u30fc\u30c9\u306f\u305d\u3093\u306a\u306b\u304d\u308c\u3044\u3058\u3083\u306a\u3044\u3067\u3059\u3051\u3069\u3001\u5171\u6709\u3057\u307e\u3059\u3002\nGithub\u306b\u3082\u5165\u308c\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\nGoogle Custom Search API\u306f\u4fbf\u5229\u3060\u3051\u3069\u3001\u7121\u6599\u4f7f\u7528\u67a0\u306f100\u30ea\u30af\u30a8\u30b9\u30c8/\u65e5\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30c6\u30b9\u30c8\u3060\u3051\u30677\u5272\u308a\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3001\u304a\u91d1\u3092\u6255\u308f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u306d\u3002\n\u3084\u3063\u3071\u308a\u3001\u7121\u6599\u3067\u753b\u50cf\u3092\u53ce\u96c6\u3057\u305f\u3044\u306e\u3067\u3001\u307b\u304b\u306e\u65b9\u6cd5\uff08Twitter\u3068\u304b\uff09\u3067\u5c11\u3057\u5de5\u592b\u3057\u3066\u307f\u307e\u3059\u3002\n2016/11/24 \u66f4\u65b0\n\u3044\u3044\u753b\u50cf\u53ce\u96c6\u306e\u65b9\u6cd5\u3092\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff01\u2193\nhttp://d.hatena.ne.jp/shi3z/20160309/1457480722\n\u4e0a\u8a18\u30ea\u30f3\u30af\u4e2d\u306epython\u30b9\u30af\u30ea\u30d7\u30c8\u3092python3\u5bfe\u5fdc\u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u3000\u2192\u3000GitHub\n\u3053\u308c\u304b\u3089\u3001\u771f\u9762\u76ee\u306bDeep Learning\u306e\u52c9\u5f37\u3092\u59cb\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u524d\u306b\u3001\u5b66\u7fd2\u306b\u5fc5\u8981\u306e\u5927\u91cf\u306a\u30c7\u30fc\u30bf\u304c\u3069\u3053\u304b\u3089\u5165\u624b\u3067\u3059\u308b\u304b\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002\n\n\u601d\u4ed8\u3044\u305f\u65b9\u6cd5\u306e\u4e00\u3064\u306fTwitter\u753b\u50cfbot\u304b\u3089\u753b\u50cf\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002\n\u3082\u3046\u4e00\u3064\u306fGoogle\u3001Bing\u306a\u3069\u306e\u753b\u50cf\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u826f\u3044bot\u3092\u898b\u3064\u3051\u308b\u306b\u306f\u6642\u9593\u304b\u304b\u308a\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u305a\u691c\u7d22API\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nBing\u691c\u7d22API\u306f\u4eca\u5e74\u5e74\u672b\u306b\u7d42\u4e86\u3059\u308b\u3088\u3046\u3067\u3059\u304b\u3089\u3001\u4eca\u56de\u306fGoogle\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n###\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u8a2d\u5b9a\n[\u30ab\u30b9\u30bf\u30e0\u691c\u7d22](https://cse.google.co.jp/cse/all)\u3067\u65b0\u3057\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u6210\u3002\n\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n![\u30ad\u30e3\u30d7\u30c1\u30e3.JPG](https://qiita-image-store.s3.amazonaws.com/0/144971/46896b03-72c6-0518-c0d5-b56399443044.jpeg)\n\u2460\u753b\u50cf\u691c\u7d22\u3092\u30aa\u30f3\u306b\u3057\u3066\n\u2461\u300c\u30a6\u30a7\u30d6\u5168\u4f53\u3092\u691c\u7d22\u3059\u308b\u300d\u3092\u9078\u629e\n\u2462\u691c\u7d22\u30b5\u30a4\u30c8\u3092\u524a\u9664\n\u2463\u691c\u7d22\u30a8\u30f3\u30b8\u30f3ID\u304b\u3089ID\u3092\u7372\u5f97\n\u3000ID\u306f\u300c\u6570\u5b57\u5217\uff1a\u82f1\u5b57\u5217\u300d\u306e\u578b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3000\u6570\u5b57\u5217\u306f\u30e6\u30fc\u30b6ID\u3001\u82f1\u5b57\u5217\u306f\u30a8\u30f3\u30b8\u30f3ID\u3089\u3057\u3044\u3067\u3059\u3002\n\n###Custom Search API\u3092\u7372\u5f97\n[Google Cloud Platform Console](https://console.cloud.google.com/apis)\u3067Custom Search API\u3092\u6709\u52b9\u306b\u3057\u3066\u3001\u8a8d\u8a3c\u60c5\u5831\u3067API\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n![222.JPG](https://qiita-image-store.s3.amazonaws.com/0/144971/73b6d1c5-72d6-72ea-902f-c05dc503af56.jpeg)\n\n###Python Script\u306e\u4f5c\u6210\n\n```\nhttps://www.googleapis.com/customsearch/v1?key=[API_KEY]&cx=[CUSTOM_SEARCH_ENGINE]&q=[search_item]\n```\n\u3067\u691c\u7d22\u3067\u304d\u307e\u3059\u3002\n\u753b\u50cf\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u3001`searchType=image`\u3092\u8ffd\u52a0\u3057\u3066\u3001\n`num=xx&start=yy`\u306f\u5927\u91cf\u753b\u50cf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30da\u30fc\u30b8\u30cd\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n[\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://developers.google.com/custom-search/json-api/v1/reference/cse/list?hl=ja)\u306b\u3088\u308b\u3068\u3001num\u306f1~10\u306e\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u4e00\u56de\u3067\u6700\u592710\u500b\u3092\u691c\u7d22\u3067\u304d\u307e\u3059\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u306f[tukiyo3\u3055\u3093\u306e\u30b3\u30fc\u30c9](http://qiita.com/tukiyo3/items/96724a3ae7c90d3ae387)\u3092\u53c2\u8003\u3057\u307e\u3057\u305f\u3002\n\n```get_image.py\n#-*- coding:utf-8 -*-\n#onlyzs1023@gmail.com 2016/11/21\nimport urllib.request\nfrom urllib.parse import quote\nimport httplib2\nimport json \nimport os\n\nAPI_KEY = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\nCUSTOM_SEARCH_ENGINE = \"12345648954985648968:xxxxxxxxx\"\n\ndef getImageUrl(search_item, total_num):\n img_list = []\n i = 0\n while i < total_num:\n  query_img = \"https://www.googleapis.com/customsearch/v1?key=\" + API_KEY + \"&cx=\" + CUSTOM_SEARCH_ENGINE + \"&num=\" + str(10 if(total_num-i)>10 else (total_num-i)) + \"&start=\" + str(i+1) + \"&q=\" + quote(search_item) + \"&searchType=image\"\n  print (query_img)\n  res = urllib.request.urlopen(query_img)\n  data = json.loads(res.read().decode('utf-8'))\n  for j in range(len(data[\"items\"])):\n   img_list.append(data[\"items\"][j][\"link\"])\n  i=i+10\n return img_list\n \ndef getImage(search_item, img_list):\n opener = urllib.request.build_opener()\n http = httplib2.Http(\".cache\")\n for i in range(len(img_list)):\n  try:\n   fn, ext = os.path.splitext(img_list[i])\n   print(img_list[i])\n   response, content = http.request(img_list[i])\n   with open(search_item+str(i)+ext, 'wb') as f:\n    f.write(content)\n  except:\n   print(\"failed to download images.\")\n   continue\n\nif __name__ == \"__main__\":\n img_list = getImageUrl(\"\u72ac\", 5)\n print(img_list)\n getImage(\"dog\", img_list)\n```\n\n\u30b3\u30fc\u30c9\u306f\u305d\u3093\u306a\u306b\u304d\u308c\u3044\u3058\u3083\u306a\u3044\u3067\u3059\u3051\u3069\u3001\u5171\u6709\u3057\u307e\u3059\u3002\n[Github](https://github.com/onlyzs89/study/blob/master/get_image.py)\u306b\u3082\u5165\u308c\u307e\u3057\u305f\u3002\n\n###\u304a\u308f\u308a\nGoogle Custom Search API\u306f\u4fbf\u5229\u3060\u3051\u3069\u3001\u7121\u6599\u4f7f\u7528\u67a0\u306f100\u30ea\u30af\u30a8\u30b9\u30c8/\u65e5\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30c6\u30b9\u30c8\u3060\u3051\u30677\u5272\u308a\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3001\u304a\u91d1\u3092\u6255\u308f\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u306d\u3002\n\u3084\u3063\u3071\u308a\u3001\u7121\u6599\u3067\u753b\u50cf\u3092\u53ce\u96c6\u3057\u305f\u3044\u306e\u3067\u3001\u307b\u304b\u306e\u65b9\u6cd5\uff08Twitter\u3068\u304b\uff09\u3067\u5c11\u3057\u5de5\u592b\u3057\u3066\u307f\u307e\u3059\u3002\n\n2016/11/24 \u66f4\u65b0\n\u3044\u3044\u753b\u50cf\u53ce\u96c6\u306e\u65b9\u6cd5\u3092\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff01\u2193\nhttp://d.hatena.ne.jp/shi3z/20160309/1457480722\n\u4e0a\u8a18\u30ea\u30f3\u30af\u4e2d\u306epython\u30b9\u30af\u30ea\u30d7\u30c8\u3092python3\u5bfe\u5fdc\u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\u3000\u2192\u3000[GitHub](https://github.com/onlyzs89/study/blob/master/collectImagenet.py)\n", "tags": ["Python", "googleapi"]}