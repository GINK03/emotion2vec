{"context": " More than 1 year has passed since last update.print\u6587\u3092\u4ed5\u8fbc\u3093\u3067\u5b9f\u884c\u6642\u9593\u3092\u51fa\u529b\u3057\u3066\u3044\u304f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u4f5c\u696d\u306f\u8f9b\u3044\u306e\u3067\u3082\u3046\u6b62\u3081\u306b\u3057\u3088\u3046\u3063\u3066\u304a\u8a71\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u30ed\u30b8\u30c3\u30af\u3092\u7279\u5b9a\u3067\u304d\u308c\u3070\u6539\u5584\u306f\u5bb9\u6613\u3067\u3059\u3002profiler\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u539f\u56e0\u304c\u7279\u5b9a\u3067\u304d\u308b\u306e\u3067\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u524d\u534a\u306fline_profiler\u3092\u5229\u7528\u3057\u305f\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u30ed\u30b8\u30c3\u30af\u306e\u7279\u5b9a\u65b9\u6cd5\u3001\u5f8c\u534a\u306fPython\u3067\u306e\u9ad8\u901f\u5316\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\n\n\u3069\u306e\u884c\u304c\u91cd\u3044\u304bprofiler\u3067\u7279\u5b9a\u3059\u308b\n\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067profiler\u3092\u4f7f\u3044\u3069\u306e\u884c\u304c\u91cd\u3044\u306e\u304b\u3092\u7279\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002Python\u306b\u306f\u69d8\u3005\u306aprofiler\u304c\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u306fline_profiler\u304c\u5fc5\u8981\u5341\u5206\u306a\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u3066\u3088\u304f\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u7279\u5b9a\u3059\u308b\u306e\u306f\u300e\u3069\u306e\u884c\u304cN\u56de\u5b9f\u884c\u3055\u308c\u3066\u3044\u3066\u3001\u5168\u4f53\u3067M%\u306e\u5b9f\u884c\u6642\u9593\u304c\u639b\u304b\u3063\u3066\u3044\u308b\u300f\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\nline_profiler\u306e\u4f7f\u7528\u4f8b\n\u5b9f\u884c\u306b10\u79d2\u304f\u3089\u3044\u639b\u304b\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002time.sleep()\u3057\u3066\u3044\u308b\u51e6\u7406\u306fDB\u30a2\u30af\u30bb\u30b9\u3068\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u30e6\u30fc\u30b6\u304c\u30ab\u30fc\u30c91000\u679a\u6240\u6301\u3057\u3066\u3044\u3066\u3001\u30ab\u30fc\u30c9\u6bce\u306b\u30b9\u30ad\u30eb\u30923\u3064\u6240\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092json\u3067\u8fd4\u5374\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\u25a0 profiler\u304c\u5168\u90e8\u6559\u3048\u3066\u304f\u308c\u308b\u306e\u3067\u8aad\u307f\u98db\u3070\u3057\u3066\u69cb\u308f\u306a\u3044\u30b3\u30fc\u30c9\n\nsample1.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport random\nimport time\nimport simplejson\n\n\nclass UserCardSkill(object):\n    def __init__(self, user_id, card_id):\n        self.id = random.randint(1, 1000),  # SkillID\u306e\u7bc4\u56f2\u306f1-999\u3068\u4eee\u5b9a\n        self.user_id = user_id\n        self.card_id = card_id\n\n    @property\n    def name(self):\n        return \"skill:{}\".format(str(self.id))\n\n    @classmethod\n    def get_by_card(cls, user_id, card_id):\n        time.sleep(0.01)\n        return [cls(user_id,  card_id) for x in xrange(3)]  # Card\u306fSkill\u30923\u3064\u6301\u3064\n\n    def to_dict(self):\n        return {\n            \"name\": self.name,\n            \"skill_id\": self.id,\n            \"card_id\": self.card_id,\n        }\n\n\nclass UserCard(object):\n    def __init__(self, user_id):\n        self.id = random.randint(1, 300)  # CardID\u306e\u7bc4\u56f2\u306f1-299\u3068\u4eee\u5b9a\n        self.user_id = user_id\n\n    @property\n    def name(self):\n        return \"CARD:{}\".format(str(self.id))\n\n    @property\n    def skills(self):\n        return UserCardSkill.get_by_card(self.user_id, self.id)\n\n    @classmethod\n    def get_by_user(cls, user_id):\n        time.sleep(0.03)\n        return [cls(user_id) for x in range(1000)]  # \u30e6\u30fc\u30b6\u304cCard1000\u679a\u6301\u3063\u3066\u3044\u308b\u3068\u4eee\u5b9a\n\n    def to_dict(self):\n        \"\"\"\n        \u30ab\u30fc\u30c9\u60c5\u5831\u3092dict\u306b\u5909\u63db\u3057\u3066\u8fd4\u5374\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"skills\": [skill.to_dict() for skill in self.skills],\n        }\n\n\ndef main(user_id):\n    \"\"\"\n    user\u304c\u6240\u6301\u3059\u308bcard\u60c5\u5831\u3092json\u3067\u5fdc\u7b54\u3059\u308b\n    \"\"\"\n    cards = UserCard.get_by_user(user_id)\n    result = {\n        \"cards\": [card.to_dict() for card in cards]\n    }\n    json = simplejson.dumps(result)\n    return json\n\nuser_id = \"A0001\"\nmain(user_id)\n\n\n\nline_profiler\u3067\u91cd\u3044\u884c\u3092\u7279\u5b9a\u3059\u308b\n\u305d\u308c\u3067\u306fprofiler\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u91cd\u3044\u7b87\u6240\u3092\u7279\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\ninstall\npip install line_profiler \n\n\n\nsample1_profiler.py\n~~\u7701\u7565~~\n\n# profiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3068\u95a2\u6570\u306e\u767b\u9332\nfrom line_profiler import LineProfiler\nprofiler = LineProfiler()\nprofiler.add_module(UserCard)\nprofiler.add_module(UserCardSkill)\nprofiler.add_function(main)\n\n# \u767b\u9332\u3057\u305fmain\u95a2\u6570\u306e\u5b9f\u884c\nuser_id = \"A0001\"\nprofiler.runcall(main, user_id)\n\n# \u7d50\u679c\u8868\u793a\nprofiler.print_stats()\n\n\n\n\nline_profiler\u306e\u5b9f\u884c\u7d50\u679c\n\n\u5b9f\u884c\u7d50\u679c\n>>>python ./sample1_profiler.py \nTimer unit: 1e-06 s\n\nTotal time: 0.102145 s\nFile: ./sample1_profiler.py\nFunction: __init__ at line 9\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     9                                               def __init__(self, user_id, card_id):\n    10      3000        92247     30.7     90.3          self.id = random.randint(1, 1000),  # SkillID\u306e\u7bc4\u56f2\u306f1-999\u3068\u4eee\u5b9a\n    11      3000         5806      1.9      5.7          self.user_id = user_id\n    12      3000         4092      1.4      4.0          self.card_id = card_id\n\nTotal time: 0.085992 s\nFile: ./sample1_profiler.py\nFunction: to_dict at line 23\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    23                                               def to_dict(self):\n    24      3000        10026      3.3     11.7          return {\n    25      3000        66067     22.0     76.8              \"name\": self.name,\n    26      3000         6091      2.0      7.1              \"skill_id\": self.id,\n    27      3000         3808      1.3      4.4              \"card_id\": self.card_id,\n    28                                                   }\n\nTotal time: 0.007384 s\nFile: ./sample1_profiler.py\nFunction: __init__ at line 32\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    32                                               def __init__(self, user_id):\n    33      1000         6719      6.7     91.0          self.id = random.randint(1, 300)  # CardID\u306e\u7bc4\u56f2\u306f1-299\u3068\u4eee\u5b9a\n    34      1000          665      0.7      9.0          self.user_id = user_id\n\nTotal time: 11.0361 s\nFile: ./sample1_profiler.py\nFunction: to_dict at line 49\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    49                                               def to_dict(self):\n    50                                                   \"\"\"\n    51                                                   \u30ab\u30fc\u30c9\u60c5\u5831\u3092dict\u306b\u5909\u63db\u3057\u3066\u8fd4\u5374\n    52                                                   \"\"\"\n    53      1000         1367      1.4      0.0          return {\n    54      1000        10362     10.4      0.1              \"name\": self.name,\n    55      4000     11024403   2756.1     99.9              \"skills\": [skill.to_dict() for skill in self.skills],\n    56                                                   }\n\nTotal time: 11.1061 s\nFile: ./sample1_profiler.py\nFunction: main at line 59\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    59                                           def main(user_id):\n    60                                               \"\"\"\n    61                                               user\u304c\u6240\u6301\u3059\u308bcard\u60c5\u5831\u3092json\u3067\u5fdc\u7b54\u3059\u308b\n    62                                               \"\"\"\n    63         1        41318  41318.0      0.4      cards = UserCard.get_by_user(user_id)\n    64         1            1      1.0      0.0      result = {\n    65      1001     11049561  11038.5     99.5          \"cards\": [card.to_dict() for card in cards]\n    66                                               }\n    67         1        15258  15258.0      0.1      json = simplejson.dumps(result)\n    68         1            2      2.0      0.0      return json\n\n\n\n\n\u25a0 profiler\u3067\u91cd\u3044\u884c\u304c\u7279\u5b9a\u3067\u304d\u305f\u3002\nline_profiler\u306e\u5b9f\u884c\u7d50\u679c\u304b\u3089\u300165\u884c\u76ee\u306855\u884c\u76ee\u306e\u51e6\u7406\u304c\u91cd\u3044\u3053\u3068\u304c\u5224\u308a\u307e\u3057\u305f\u3002\u30e6\u30fc\u30b6\u304c\u30ab\u30fc\u30c91000\u679a\u6301\u3063\u3066\u3044\u3066\u3001\u5404\u30ab\u30fc\u30c9\u6bce\u306b1000\u56deUserCardSkill\u306b\u554f\u3044\u5408\u308f\u305b\u3092\u884c\u3063\u305f\u7d50\u679c\u3001\u5b9f\u884c\u306b10\u79d2\u4ee5\u4e0a\u639b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u9ad8\u901f\u5316\u30c6\u30af\u30cb\u30c3\u30af\n\u5177\u4f53\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002profiler\u3067\u8abf\u67fb\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u51fa\u6765\u308b\u3060\u3051\u30b3\u30fc\u30c9\u69cb\u9020\u3092\u5909\u66f4\u305b\u305a\u306bCache\u306b\u3088\u308b\u30e1\u30e2\u5316\u3084Hash\u63a2\u7d22\u306b\u3088\u3063\u3066\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002Python\u306e\u8a71\u304c\u3057\u305f\u3044\u306e\u3067SQL\u9ad8\u901f\u5316\u306e\u8a71\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\n\n\u30e1\u30e2\u5316\u3092\u7d44\u307f\u5408\u308f\u305b\u305fDB\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u524a\u6e1b\n\u30b3\u30fc\u30c9\u306e\u69cb\u9020\u3092\u51fa\u6765\u308b\u3060\u3051\u5909\u66f4\u305b\u305a\u306b\u3001UserCardSkill\u3078\u306e\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u3092\u524a\u6e1b\u3057\u307e\u3059\u3002\u4e00\u62ec\u3067user\u306b\u7d10\u3065\u304fUserCardSkill\u3092\u53d6\u5f97\u3057\u3066\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d2\u56de\u76ee\u4ee5\u964d\u306f\u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u304b\u3089\u5024\u3092\u8fd4\u5374\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nsample1_memoize.py\nclass UserCardSkill(object):\n    _USER_CACHE = {}\n    @classmethod\n    def get_by_card(cls, user_id, card_id):\n        # \u6539\u5584\u524d\u306e\u90fd\u5ea6DB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u95a2\u6570\n        time.sleep(0.01)\n        return [cls(user_id,  card_id) for x in xrange(3)]\n\n    @classmethod\n    def get_by_card_from_cache(cls, user_id, card_id):\n        # \u6539\u5584\u5f8c\u306e\u521d\u56de\u306e\u307fDB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u95a2\u6570\n        if user_id not in cls._USER_CACHE:\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u4e0a\u306b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fUser\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n            cls._USER_CACHE[user_id] = cls.get_all_by_user(user_id)\n\n        r = []\n        for skill in cls._USER_CACHE[user_id]:\n            if skill.card_id == card_id:\n                r.append(skill)\n        return r\n\n    @classmethod\n    def get_all_by_user(cls, user_id):\n        # User\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u4e00\u62ec\u3067\u53d6\u5f97\u3059\u308b\n        return list(cls.objects.filter(user_id=user_id))\n\nfrom timeit import timeit\n@timeit  # \u5b9f\u884c\u6642\u9593\u304cprint\u3055\u308c\u308b\ndef main(user_id):\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n>>>sample1_memoize.py\nfunc:'main' args:[(u'A0001',), {}] took: 0.6718 sec\n\n\n\u6539\u5584\u524d\u306e11.1061 sec\u304b\u30890.6718 sec\u306815\u500d\u4ee5\u4e0a\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002UserCardSkill\u3078\u306e\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u304c1000\u56de\u304b\u30891\u56de\u306b\u307e\u3068\u3081\u3089\u308c\u305f\u3053\u3068\u304c\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u306e\u7406\u7531\u3067\u3059\u3002\n\n\u7dda\u5f62\u63a2\u7d22\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u308b\n\u30e1\u30e2\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306fget_by_card_from_cache\u95a2\u6570\u5185\u3067card\u6bce\u306eskill\u3092\u7dda\u5f62\u3059\u308b\u305f\u3081\u306b\u6bce\u56de\u8981\u7d20\u6570\u304c3 * 1000\u306e\u30ea\u30b9\u30c8cls._USER_CACHE[user_id]\u3092\u7dda\u5f62\u63a2\u7d22(\u30d5\u30eb\u30b9\u30ad\u30e3\u30f3)\u3057\u3066\u3044\u307e\u3059\u3002\u6bce\u56de\u7dda\u5f62\u63a2\u7d22\u3057\u3066\u306f\u52b9\u7387\u306f\u60aa\u3044\u306e\u3067card_id\u3092key\u3068\u3059\u308bdict\u3092\u4e8b\u524d\u306b\u751f\u6210\u3057\u3066\u304a\u3044\u3066hash\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u7dda\u5f62\u63a2\u7d22\u306e\u8a08\u7b97\u91cf\u306fO(n), \u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306e\u8a08\u7b97\u91cf\u306fO(1)\u3067\u3059\u3002\n~~\u7701\u7565~~\n\nclass UserCardSkill(object):\n    _USER_CACHE = {}\n    @classmethod\n    def get_by_card_from_cache(cls, user_id, card_id):\n        if user_id not in cls._USER_CACHE:\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u4e0a\u306b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fUser\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n            users_skill = cls.get_all_by_user(user_id)\n\n            # card_id\u3092KEY\u3068\u3059\u308bdict\u306b\u5909\u63db\u3059\u308b\n            cardskill_dict = defaultdict(list)\n            for skill in users_skill:\n                cardskill_dict[skill.card_id].append(skill)\n\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\n            cls._USER_CACHE[user_id] = cardskill_dict\n\n        # \u7dda\u5f62\u63a2\u7d22\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u305f\n        return cls._USER_CACHE[user_id].get(card_id)\n\n    @classmethod\n    def get_all_by_user(cls, user_id):\n        # User\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n        return list(cls.objects.filter(user_id=user_id))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n>>>sample1_hash.py\nfunc:'main' args:[(u'A0001',), {}] took: 0.3840 sec\n\n\n\u6539\u5584\u524d\u306f\u8981\u7d20\u65703000\u306e\u30ea\u30b9\u30c8\u3092\u30ab\u30fc\u30c91000\u679a\u5206\u30d5\u30eb\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3044\u305f\u306e\u3067if skill.card_id == card_id:\u304c300\u4e07\u56de\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002hash\u63a2\u7d22\u306b\u7f6e\u304d\u63db\u3048\u305f\u3053\u3068\u3067\u7121\u304f\u306a\u3063\u305f\u305f\u3081\u3001hash\u3092\u751f\u6210\u3059\u308b\u30b3\u30b9\u30c8\u3092\u5dee\u3057\u5f15\u3044\u3066\u3082\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u306b\u7e4b\u304c\u3063\u3066\u3044\u307e\u3059\u3002\n\ncached_property\u3092\u5229\u7528\n\u304a\u624b\u8efd\u306a\u30e1\u30e2\u5316\u3068\u3044\u3048\u3070cached_property\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ad\u30e3\u30c3\u30b7\u30e5\u306bself.func.__name__(\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u3067\u3042\u308c\u3070\"skills\")\u3092KEY\u306b\u3057\u3066\u623b\u308a\u5024\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u30022\u56de\u76ee\u4ee5\u964d\u306e\u554f\u3044\u5408\u308f\u305b\u3067\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u5024\u3092\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306f\u6570\u884c\u306a\u306e\u3067\u30b3\u30fc\u30c9\u8aad\u3093\u3060\u65b9\u304c\u65e9\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002cached_property.py#L12\n\ncached_property.py\nfrom cached_property import cached_property\n\nclass Card(object):\n    @cached_property\n    def skills(self):\n        return UserCardSkill.get_by_card(self.user_id, self.id)\n\n@timeit\ndef main(user_id):\n    cards = Card.get_by_user(user_id)\n    for x in xrange(10):\n        cards[0].skills\n\n\n\n\u5b9f\u884c\u7d50\u679c\n# cached_property\u9069\u7528\u524d\n>>>python ./cached_property.py \nfunc:'main' args:[(u'A0001',), {}] took: 0.1443 sec\n\n# cached_property\u9069\u7528\u5f8c\n>>> python ./sample1_cp.py \nfunc:'main' args:[(u'A0001',), {}] took: 0.0451 sec\n\n\n\n\n\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u5229\u7528\nwsgi\u3068Apache\u3067Web\u30b5\u30fc\u30d0\u3092\u7a3c\u50cd\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u524d\u63d0\u306e\u304a\u8a71\u3067\u3059\u3002\n\u30b9\u30ec\u30c3\u30c9 \u30ed\u30fc\u30ab\u30eb \u30b9\u30c8\u30ec\u30fc\u30b8 (TLS) \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9 \u30d7\u30ed\u30bb\u30b9\u306e\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u5834\u6240\u3092\u5272\u308a\u5f53\u3066\u308b\u305f\u3081\u306e\u624b\u6bb5\u3067\u3059\u3002wsgi\u3068Apache\u3067Web\u30b5\u30fc\u30d0\u3092\u52d5\u4f5c\u3055\u305b\u3066\u3044\u308b\u5834\u5408\u3001config\u306bMaxRequestsPerChild \u30921\u4ee5\u4e0a\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u306fMaxRequestsPerChild \u500b\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f8c\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002\u30b9\u30ec\u30c3\u30c9 \u30ed\u30fc\u30ab\u30eb \u30b9\u30c8\u30ec\u30fc\u30b8 (TLS) \u3092\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002\u30de\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u306e\u3088\u3046\u306a\u5168\u30e6\u30fc\u30b6\u9593\u3067\u5171\u901a\u306e\u30c7\u30fc\u30bf\u3092TLS \u306b\u4fdd\u7ba1\u3059\u308b\u3053\u3068\u3067\u5927\u5e45\u306a\u901f\u5ea6\u5411\u4e0a\u304c\u898b\u8fbc\u3081\u307e\u3059\u3002\n\u6700\u59270 - 500010\u306e\u7bc4\u56f2\u306e\u6574\u6570\u304b\u3089\u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u7d20\u6570\u8a08\u7b97\u7d50\u679c\u3092TLS \u306b\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u30012\u56de\u76ee\u4ee5\u964d\u306e\u7d20\u6570\u8a08\u7b97\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\ntls.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport random\nimport threading\nimport time\n\nthreadLocal = threading.local()\n\n\ndef timeit(f):\n    def timed(*args, **kw):\n        # http://stackoverflow.com/questions/1622943/timeit-versus-timing-decorator\n        ts = time.time()\n        result = f(*args, **kw)\n        te = time.time()\n\n        print 'func:%r args:[%r, %r] took: %2.4f sec' % (f.__name__, args, kw, te-ts)\n        return result\n    return timed\n\n\n@timeit\ndef worker():\n    initialized = getattr(threadLocal, 'initialized', None)\n    if initialized is None:\n        print \"init start\"\n        # TLS\u306e\u521d\u671f\u5316\n        threadLocal.initialized = True\n        threadLocal.count = 0\n        threadLocal.prime = {}\n        return []\n    else:\n        print \"loop:{}\".format(threadLocal.count)\n        threadLocal.count += 1\n        return get_prime(random.randint(500000, 500010))\n\n\ndef get_prime(N):\n    \"\"\"\n    \u7d20\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u5374\n    :param N: int\n    :rtype : list of int\n    \"\"\"\n    # TLS\u306b\u30c7\u30fc\u30bf\u304c\u6709\u308c\u3070\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u8fd4\u5374\n    if N in threadLocal.prime:\n        return threadLocal.prime[N]\n\n    # \u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\n    table = list(range(N))\n    for i in range(2, int(N ** 0.5) + 1):\n        if table[i]:\n            for mult in range(i ** 2, N, i):\n                table[mult] = False\n    result = [p for p in table if p][1:]\n\n    # TLS\u306b\u7d50\u679c\u3092\u8a18\u9332\n    threadLocal.prime[N] = result\n    return result\n\nfor x in xrange(100):\n    worker()\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n>>>python tls.py \ninit start\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:0\nfunc:'worker' args:[(), {}] took: 0.1715 sec\nloop:1\nfunc:'worker' args:[(), {}] took: 0.1862 sec\nloop:2\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:3\nfunc:'worker' args:[(), {}] took: 0.2403 sec\nloop:4\nfunc:'worker' args:[(), {}] took: 0.2669 sec\nloop:5\nfunc:'worker' args:[(), {}] took: 0.0001 sec\nloop:6\nfunc:'worker' args:[(), {}] took: 0.3130 sec\nloop:7\nfunc:'worker' args:[(), {}] took: 0.3456 sec\nloop:8\nfunc:'worker' args:[(), {}] took: 0.3224 sec\nloop:9\nfunc:'worker' args:[(), {}] took: 0.3208 sec\nloop:10\nfunc:'worker' args:[(), {}] took: 0.3196 sec\nloop:11\nfunc:'worker' args:[(), {}] took: 0.3282 sec\nloop:12\nfunc:'worker' args:[(), {}] took: 0.3257 sec\nloop:13\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:14\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:15\nfunc:'worker' args:[(), {}] took: 0.0000 sec\n...\n\n\n\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\uff08TLS) \u306b\u683c\u7d0d\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u306fApache\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u6b8b\u308a\u7d9a\u3051\u307e\u3059\u3002\n\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u306f\u526f\u4f5c\u7528\u304c\u3042\u308b\n\u9069\u5207\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3059\u308b\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u526f\u4f5c\u7528\u3068\u547c\u3070\u308c\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u7279\u6709\u306e\u30d0\u30b0\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u591a\u3005\u3042\u308b\u305f\u3081\u5341\u5206\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\u904e\u53bb\u306b\u81ea\u5206\u304c\u898b\u304b\u3051\u305f\u308a\u3001\u3084\u3089\u304b\u3057\u305f\u4e2d\u3060\u3068\n\u25a0 \u66f4\u65b0\u3057\u3066\u3082\u65b0\u3057\u3044\u5024\u304c\u53d6\u5f97\u51fa\u6765\u306a\u3044\u8868\u793a\u30d0\u30b0\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u8a2d\u8a08\u3092\u610f\u8b58\u305b\u305a\u306b\u5229\u7528\u3059\u308b\u3068\u767a\u751f\u3059\u308b\u30d0\u30b0\u3067\u3059\u3002\n1.\u5024\u53d6\u5f97 >> 2.\u5024\u66f4\u65b0 >> 3.\u5024\u53d6\u5f97 \u306e\u9806\u306b\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3068\u304d\u306b\u30011\u3067\u5024\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f\u7d50\u679c2\u3067\u66f4\u65b0\u3059\u308b\u3068\u304d\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u6d88\u3048\u305a\u30013\u3067\u53d6\u5f97\u6642\u306b\u66f4\u65b0\u3055\u308c\u305f\u5024\u304c\u53d6\u5f97\u3067\u304d\u305a\u306b\u53e4\u3044\u5024\u3092\u53d6\u5f97\u3057\u3066\u305d\u306e\u307e\u307e\u8868\u793a\u3057\u3066\u3057\u307e\u3046\u30d0\u30b0\u3067\u3059\u3002\n\u25a0 \u30c7\u30fc\u30bf\u6d88\u3048\u3061\u3083\u3046\u30d0\u30b0\n\u81f4\u547d\u7684\u306a\u5974\u3067\u3059\u30021.\u5024\u53d6\u5f97 >> 2.\u53d6\u5f97\u3057\u305f\u5024\u306bAdd\u3057\u3066\u5024\u66f4\u65b0 \u306e\u9806\u306b\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3066\u30011\u306e\u5024\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3057\u3066\u3044\u3066\u66f4\u65b0\u3055\u308c\u306a\u304b\u3063\u305f\u7d50\u679c\u3001\u305f\u3068\u3048\u30701234 + 100, 1234 + 200, 1234 + 50\u3068\u3001\u5024\u304c\u6d88\u3048\u3066\u3057\u307e\u3046\u30d0\u30b0\u304c\u767a\u751f\u3057\u305f\u308a\u3057\u307e\u3059\u3002\n\u25a0 \u526f\u4f5c\u7528\u306e\u9632\u304e\u65b9\ncached_property\u30c7\u30b3\u30ec\u30bf\u306e\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3057\u3066\u3001\u5341\u5206\u306b\u8a66\u9a13\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u6271\u3048\u3070\u8ab0\u3067\u3082\u5b89\u5168\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u7406\u5c48\u3092\u77e5\u3089\u306a\u304f\u3066\u3082\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u51fa\u6765\u308c\u3070\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u3059\u308b\u7406\u5c48\u3092\u77e5\u3063\u3066\u304a\u3044\u305f\u65b9\u304c\u9069\u5207\u306b\u6271\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nmemo\nline_profiler\u306e\u516c\u958b\u65e5\u306f2008\u5e74\nprint\u6587\u3092\u4ed5\u8fbc\u3093\u3067\u5b9f\u884c\u6642\u9593\u3092\u51fa\u529b\u3057\u3066\u3044\u304f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u4f5c\u696d\u306f\u8f9b\u3044\u306e\u3067\u3082\u3046\u6b62\u3081\u306b\u3057\u3088\u3046\u3063\u3066\u304a\u8a71\u3067\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u30ed\u30b8\u30c3\u30af\u3092\u7279\u5b9a\u3067\u304d\u308c\u3070\u6539\u5584\u306f\u5bb9\u6613\u3067\u3059\u3002profiler\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u539f\u56e0\u304c\u7279\u5b9a\u3067\u304d\u308b\u306e\u3067\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u524d\u534a\u306fline_profiler\u3092\u5229\u7528\u3057\u305f\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u3044\u30ed\u30b8\u30c3\u30af\u306e\u7279\u5b9a\u65b9\u6cd5\u3001\u5f8c\u534a\u306fPython\u3067\u306e\u9ad8\u901f\u5316\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\n\n# \u3069\u306e\u884c\u304c\u91cd\u3044\u304bprofiler\u3067\u7279\u5b9a\u3059\u308b\n\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067profiler\u3092\u4f7f\u3044\u3069\u306e\u884c\u304c\u91cd\u3044\u306e\u304b\u3092\u7279\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002Python\u306b\u306f\u69d8\u3005\u306aprofiler\u304c\u5b58\u5728\u3057\u307e\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u306fline_profiler\u304c\u5fc5\u8981\u5341\u5206\u306a\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u3066\u3088\u304f\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u7279\u5b9a\u3059\u308b\u306e\u306f\u300e\u3069\u306e\u884c\u304cN\u56de\u5b9f\u884c\u3055\u308c\u3066\u3044\u3066\u3001\u5168\u4f53\u3067M%\u306e\u5b9f\u884c\u6642\u9593\u304c\u639b\u304b\u3063\u3066\u3044\u308b\u300f\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n## line_profiler\u306e\u4f7f\u7528\u4f8b\n\u5b9f\u884c\u306b10\u79d2\u304f\u3089\u3044\u639b\u304b\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002time.sleep()\u3057\u3066\u3044\u308b\u51e6\u7406\u306fDB\u30a2\u30af\u30bb\u30b9\u3068\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u30e6\u30fc\u30b6\u304c\u30ab\u30fc\u30c91000\u679a\u6240\u6301\u3057\u3066\u3044\u3066\u3001\u30ab\u30fc\u30c9\u6bce\u306b\u30b9\u30ad\u30eb\u30923\u3064\u6240\u6301\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092json\u3067\u8fd4\u5374\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n\u25a0 profiler\u304c\u5168\u90e8\u6559\u3048\u3066\u304f\u308c\u308b\u306e\u3067\u8aad\u307f\u98db\u3070\u3057\u3066\u69cb\u308f\u306a\u3044\u30b3\u30fc\u30c9\n\n```py:sample1.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport random\nimport time\nimport simplejson\n\n\nclass UserCardSkill(object):\n    def __init__(self, user_id, card_id):\n        self.id = random.randint(1, 1000),  # SkillID\u306e\u7bc4\u56f2\u306f1-999\u3068\u4eee\u5b9a\n        self.user_id = user_id\n        self.card_id = card_id\n\n    @property\n    def name(self):\n        return \"skill:{}\".format(str(self.id))\n\n    @classmethod\n    def get_by_card(cls, user_id, card_id):\n        time.sleep(0.01)\n        return [cls(user_id,  card_id) for x in xrange(3)]  # Card\u306fSkill\u30923\u3064\u6301\u3064\n\n    def to_dict(self):\n        return {\n            \"name\": self.name,\n            \"skill_id\": self.id,\n            \"card_id\": self.card_id,\n        }\n\n\nclass UserCard(object):\n    def __init__(self, user_id):\n        self.id = random.randint(1, 300)  # CardID\u306e\u7bc4\u56f2\u306f1-299\u3068\u4eee\u5b9a\n        self.user_id = user_id\n\n    @property\n    def name(self):\n        return \"CARD:{}\".format(str(self.id))\n\n    @property\n    def skills(self):\n        return UserCardSkill.get_by_card(self.user_id, self.id)\n\n    @classmethod\n    def get_by_user(cls, user_id):\n        time.sleep(0.03)\n        return [cls(user_id) for x in range(1000)]  # \u30e6\u30fc\u30b6\u304cCard1000\u679a\u6301\u3063\u3066\u3044\u308b\u3068\u4eee\u5b9a\n\n    def to_dict(self):\n        \"\"\"\n        \u30ab\u30fc\u30c9\u60c5\u5831\u3092dict\u306b\u5909\u63db\u3057\u3066\u8fd4\u5374\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"skills\": [skill.to_dict() for skill in self.skills],\n        }\n\n\ndef main(user_id):\n    \"\"\"\n    user\u304c\u6240\u6301\u3059\u308bcard\u60c5\u5831\u3092json\u3067\u5fdc\u7b54\u3059\u308b\n    \"\"\"\n    cards = UserCard.get_by_user(user_id)\n    result = {\n        \"cards\": [card.to_dict() for card in cards]\n    }\n    json = simplejson.dumps(result)\n    return json\n\nuser_id = \"A0001\"\nmain(user_id)\n```\n\n## line_profiler\u3067\u91cd\u3044\u884c\u3092\u7279\u5b9a\u3059\u308b\n\u305d\u308c\u3067\u306fprofiler\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u91cd\u3044\u7b87\u6240\u3092\u7279\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```py:install\npip install line_profiler \n```\n\n```py:sample1_profiler.py\n~~\u7701\u7565~~\n\n# profiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u3068\u95a2\u6570\u306e\u767b\u9332\nfrom line_profiler import LineProfiler\nprofiler = LineProfiler()\nprofiler.add_module(UserCard)\nprofiler.add_module(UserCardSkill)\nprofiler.add_function(main)\n\n# \u767b\u9332\u3057\u305fmain\u95a2\u6570\u306e\u5b9f\u884c\nuser_id = \"A0001\"\nprofiler.runcall(main, user_id)\n\n# \u7d50\u679c\u8868\u793a\nprofiler.print_stats()\n\n```\n\n## line_profiler\u306e\u5b9f\u884c\u7d50\u679c\n```shell-session:\u5b9f\u884c\u7d50\u679c\n>>>python ./sample1_profiler.py \nTimer unit: 1e-06 s\n\nTotal time: 0.102145 s\nFile: ./sample1_profiler.py\nFunction: __init__ at line 9\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     9                                               def __init__(self, user_id, card_id):\n    10      3000        92247     30.7     90.3          self.id = random.randint(1, 1000),  # SkillID\u306e\u7bc4\u56f2\u306f1-999\u3068\u4eee\u5b9a\n    11      3000         5806      1.9      5.7          self.user_id = user_id\n    12      3000         4092      1.4      4.0          self.card_id = card_id\n\nTotal time: 0.085992 s\nFile: ./sample1_profiler.py\nFunction: to_dict at line 23\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    23                                               def to_dict(self):\n    24      3000        10026      3.3     11.7          return {\n    25      3000        66067     22.0     76.8              \"name\": self.name,\n    26      3000         6091      2.0      7.1              \"skill_id\": self.id,\n    27      3000         3808      1.3      4.4              \"card_id\": self.card_id,\n    28                                                   }\n\nTotal time: 0.007384 s\nFile: ./sample1_profiler.py\nFunction: __init__ at line 32\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    32                                               def __init__(self, user_id):\n    33      1000         6719      6.7     91.0          self.id = random.randint(1, 300)  # CardID\u306e\u7bc4\u56f2\u306f1-299\u3068\u4eee\u5b9a\n    34      1000          665      0.7      9.0          self.user_id = user_id\n\nTotal time: 11.0361 s\nFile: ./sample1_profiler.py\nFunction: to_dict at line 49\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    49                                               def to_dict(self):\n    50                                                   \"\"\"\n    51                                                   \u30ab\u30fc\u30c9\u60c5\u5831\u3092dict\u306b\u5909\u63db\u3057\u3066\u8fd4\u5374\n    52                                                   \"\"\"\n    53      1000         1367      1.4      0.0          return {\n    54      1000        10362     10.4      0.1              \"name\": self.name,\n    55      4000     11024403   2756.1     99.9              \"skills\": [skill.to_dict() for skill in self.skills],\n    56                                                   }\n\nTotal time: 11.1061 s\nFile: ./sample1_profiler.py\nFunction: main at line 59\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    59                                           def main(user_id):\n    60                                               \"\"\"\n    61                                               user\u304c\u6240\u6301\u3059\u308bcard\u60c5\u5831\u3092json\u3067\u5fdc\u7b54\u3059\u308b\n    62                                               \"\"\"\n    63         1        41318  41318.0      0.4      cards = UserCard.get_by_user(user_id)\n    64         1            1      1.0      0.0      result = {\n    65      1001     11049561  11038.5     99.5          \"cards\": [card.to_dict() for card in cards]\n    66                                               }\n    67         1        15258  15258.0      0.1      json = simplejson.dumps(result)\n    68         1            2      2.0      0.0      return json\n\n\n```\n\n\u25a0 profiler\u3067\u91cd\u3044\u884c\u304c\u7279\u5b9a\u3067\u304d\u305f\u3002\nline_profiler\u306e\u5b9f\u884c\u7d50\u679c\u304b\u3089\u300165\u884c\u76ee\u306855\u884c\u76ee\u306e\u51e6\u7406\u304c\u91cd\u3044\u3053\u3068\u304c\u5224\u308a\u307e\u3057\u305f\u3002\u30e6\u30fc\u30b6\u304c\u30ab\u30fc\u30c91000\u679a\u6301\u3063\u3066\u3044\u3066\u3001\u5404\u30ab\u30fc\u30c9\u6bce\u306b1000\u56deUserCardSkill\u306b\u554f\u3044\u5408\u308f\u305b\u3092\u884c\u3063\u305f\u7d50\u679c\u3001\u5b9f\u884c\u306b10\u79d2\u4ee5\u4e0a\u639b\u304b\u3063\u3066\u3057\u307e\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u3002\n\n# \u9ad8\u901f\u5316\u30c6\u30af\u30cb\u30c3\u30af\n\u5177\u4f53\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002profiler\u3067\u8abf\u67fb\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u51fa\u6765\u308b\u3060\u3051\u30b3\u30fc\u30c9\u69cb\u9020\u3092\u5909\u66f4\u305b\u305a\u306bCache\u306b\u3088\u308b\u30e1\u30e2\u5316\u3084Hash\u63a2\u7d22\u306b\u3088\u3063\u3066\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002Python\u306e\u8a71\u304c\u3057\u305f\u3044\u306e\u3067SQL\u9ad8\u901f\u5316\u306e\u8a71\u306b\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-25 21.53.09.png](https://qiita-image-store.s3.amazonaws.com/0/65312/c0a30e92-9d38-0f8e-373a-c98f94d78e13.png)\n\n\n## \u30e1\u30e2\u5316\u3092\u7d44\u307f\u5408\u308f\u305b\u305fDB\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u524a\u6e1b\n\u30b3\u30fc\u30c9\u306e\u69cb\u9020\u3092\u51fa\u6765\u308b\u3060\u3051\u5909\u66f4\u305b\u305a\u306b\u3001UserCardSkill\u3078\u306e\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u3092\u524a\u6e1b\u3057\u307e\u3059\u3002\u4e00\u62ec\u3067user\u306b\u7d10\u3065\u304fUserCardSkill\u3092\u53d6\u5f97\u3057\u3066\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d2\u56de\u76ee\u4ee5\u964d\u306f\u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u304b\u3089\u5024\u3092\u8fd4\u5374\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```py:sample1_memoize.py\nclass UserCardSkill(object):\n    _USER_CACHE = {}\n    @classmethod\n    def get_by_card(cls, user_id, card_id):\n        # \u6539\u5584\u524d\u306e\u90fd\u5ea6DB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u95a2\u6570\n        time.sleep(0.01)\n        return [cls(user_id,  card_id) for x in xrange(3)]\n\n    @classmethod\n    def get_by_card_from_cache(cls, user_id, card_id):\n        # \u6539\u5584\u5f8c\u306e\u521d\u56de\u306e\u307fDB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u95a2\u6570\n        if user_id not in cls._USER_CACHE:\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u4e0a\u306b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fUser\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n            cls._USER_CACHE[user_id] = cls.get_all_by_user(user_id)\n\n        r = []\n        for skill in cls._USER_CACHE[user_id]:\n            if skill.card_id == card_id:\n                r.append(skill)\n        return r\n\n    @classmethod\n    def get_all_by_user(cls, user_id):\n        # User\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u4e00\u62ec\u3067\u53d6\u5f97\u3059\u308b\n        return list(cls.objects.filter(user_id=user_id))\n\nfrom timeit import timeit\n@timeit  # \u5b9f\u884c\u6642\u9593\u304cprint\u3055\u308c\u308b\ndef main(user_id):\n\n```\n\n```shell-session:\u5b9f\u884c\u7d50\u679c\n>>>sample1_memoize.py\nfunc:'main' args:[(u'A0001',), {}] took: 0.6718 sec\n```\n\n\u6539\u5584\u524d\u306e11.1061 sec\u304b\u30890.6718 sec\u306815\u500d\u4ee5\u4e0a\u9ad8\u901f\u5316\u3057\u307e\u3057\u305f\u3002UserCardSkill\u3078\u306e\u554f\u3044\u5408\u308f\u305b\u56de\u6570\u304c1000\u56de\u304b\u30891\u56de\u306b\u307e\u3068\u3081\u3089\u308c\u305f\u3053\u3068\u304c\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u306e\u7406\u7531\u3067\u3059\u3002\n\n## \u7dda\u5f62\u63a2\u7d22\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u308b\n\u30e1\u30e2\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306f`get_by_card_from_cache\u95a2\u6570`\u5185\u3067card\u6bce\u306eskill\u3092\u7dda\u5f62\u3059\u308b\u305f\u3081\u306b\u6bce\u56de\u8981\u7d20\u6570\u304c3 * 1000\u306e\u30ea\u30b9\u30c8`cls._USER_CACHE[user_id]`\u3092\u7dda\u5f62\u63a2\u7d22(\u30d5\u30eb\u30b9\u30ad\u30e3\u30f3)\u3057\u3066\u3044\u307e\u3059\u3002\u6bce\u56de\u7dda\u5f62\u63a2\u7d22\u3057\u3066\u306f\u52b9\u7387\u306f\u60aa\u3044\u306e\u3067card_id\u3092key\u3068\u3059\u308bdict\u3092\u4e8b\u524d\u306b\u751f\u6210\u3057\u3066\u304a\u3044\u3066hash\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u7dda\u5f62\u63a2\u7d22\u306e\u8a08\u7b97\u91cf\u306fO(n), \u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306e\u8a08\u7b97\u91cf\u306fO(1)\u3067\u3059\u3002\n\n```py:\n~~\u7701\u7565~~\n\nclass UserCardSkill(object):\n    _USER_CACHE = {}\n    @classmethod\n    def get_by_card_from_cache(cls, user_id, card_id):\n        if user_id not in cls._USER_CACHE:\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u4e0a\u306b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fUser\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n            users_skill = cls.get_all_by_user(user_id)\n\n            # card_id\u3092KEY\u3068\u3059\u308bdict\u306b\u5909\u63db\u3059\u308b\n            cardskill_dict = defaultdict(list)\n            for skill in users_skill:\n                cardskill_dict[skill.card_id].append(skill)\n\n            # \u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\n            cls._USER_CACHE[user_id] = cardskill_dict\n\n        # \u7dda\u5f62\u63a2\u7d22\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u63a2\u7d22\u306b\u66f8\u304d\u63db\u3048\u305f\n        return cls._USER_CACHE[user_id].get(card_id)\n\n    @classmethod\n    def get_all_by_user(cls, user_id):\n        # User\u306b\u4fc2\u308b\u5168\u30b9\u30ad\u30eb\u3092DB\u304b\u3089\u53d6\u5f97\u3059\u308b\n        return list(cls.objects.filter(user_id=user_id))\n\n```\n\n```shell-session:\u5b9f\u884c\u7d50\u679c\n>>>sample1_hash.py\nfunc:'main' args:[(u'A0001',), {}] took: 0.3840 sec\n```\n\n\u6539\u5584\u524d\u306f\u8981\u7d20\u65703000\u306e\u30ea\u30b9\u30c8\u3092\u30ab\u30fc\u30c91000\u679a\u5206\u30d5\u30eb\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3044\u305f\u306e\u3067`if skill.card_id == card_id:`\u304c300\u4e07\u56de\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002hash\u63a2\u7d22\u306b\u7f6e\u304d\u63db\u3048\u305f\u3053\u3068\u3067\u7121\u304f\u306a\u3063\u305f\u305f\u3081\u3001hash\u3092\u751f\u6210\u3059\u308b\u30b3\u30b9\u30c8\u3092\u5dee\u3057\u5f15\u3044\u3066\u3082\u5b9f\u884c\u901f\u5ea6\u6539\u5584\u306b\u7e4b\u304c\u3063\u3066\u3044\u307e\u3059\u3002\n\n## cached_property\u3092\u5229\u7528\n\u304a\u624b\u8efd\u306a\u30e1\u30e2\u5316\u3068\u3044\u3048\u3070`cached_property`\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30ad\u30e3\u30c3\u30b7\u30e5\u306b`self.func.__name__`(\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u3067\u3042\u308c\u3070\"skills\")\u3092KEY\u306b\u3057\u3066\u623b\u308a\u5024\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u30022\u56de\u76ee\u4ee5\u964d\u306e\u554f\u3044\u5408\u308f\u305b\u3067\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u5024\u3092\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306f\u6570\u884c\u306a\u306e\u3067\u30b3\u30fc\u30c9\u8aad\u3093\u3060\u65b9\u304c\u65e9\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002[cached_property.py#L12](https://github.com/pydanny/cached-property/blob/master/cached_property.py#L12)\n\n```py:cached_property.py\nfrom cached_property import cached_property\n\nclass Card(object):\n    @cached_property\n    def skills(self):\n        return UserCardSkill.get_by_card(self.user_id, self.id)\n\n@timeit\ndef main(user_id):\n    cards = Card.get_by_user(user_id)\n    for x in xrange(10):\n        cards[0].skills\n```\n\n```shell-session:\u5b9f\u884c\u7d50\u679c\n# cached_property\u9069\u7528\u524d\n>>>python ./cached_property.py \nfunc:'main' args:[(u'A0001',), {}] took: 0.1443 sec\n\n# cached_property\u9069\u7528\u5f8c\n>>> python ./sample1_cp.py \nfunc:'main' args:[(u'A0001',), {}] took: 0.0451 sec\n\n```\n\n## \u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u5229\u7528\nwsgi\u3068Apache\u3067Web\u30b5\u30fc\u30d0\u3092\u7a3c\u50cd\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u524d\u63d0\u306e\u304a\u8a71\u3067\u3059\u3002\n\n\u30b9\u30ec\u30c3\u30c9 \u30ed\u30fc\u30ab\u30eb \u30b9\u30c8\u30ec\u30fc\u30b8 (TLS) \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9 \u30d7\u30ed\u30bb\u30b9\u306e\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u5834\u6240\u3092\u5272\u308a\u5f53\u3066\u308b\u305f\u3081\u306e\u624b\u6bb5\u3067\u3059\u3002wsgi\u3068Apache\u3067Web\u30b5\u30fc\u30d0\u3092\u52d5\u4f5c\u3055\u305b\u3066\u3044\u308b\u5834\u5408\u3001config\u306b`MaxRequestsPerChild` \u30921\u4ee5\u4e0a\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u306f`MaxRequestsPerChild` \u500b\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f8c\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002\u30b9\u30ec\u30c3\u30c9 \u30ed\u30fc\u30ab\u30eb \u30b9\u30c8\u30ec\u30fc\u30b8 (TLS) \u3092\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002\u30de\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u306e\u3088\u3046\u306a\u5168\u30e6\u30fc\u30b6\u9593\u3067\u5171\u901a\u306e\u30c7\u30fc\u30bf\u3092TLS \u306b\u4fdd\u7ba1\u3059\u308b\u3053\u3068\u3067\u5927\u5e45\u306a\u901f\u5ea6\u5411\u4e0a\u304c\u898b\u8fbc\u3081\u307e\u3059\u3002\n\n\u6700\u59270 - 500010\u306e\u7bc4\u56f2\u306e\u6574\u6570\u304b\u3089\u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u7d20\u6570\u8a08\u7b97\u7d50\u679c\u3092TLS \u306b\u8a18\u9332\u3059\u308b\u3053\u3068\u3067\u30012\u56de\u76ee\u4ee5\u964d\u306e\u7d20\u6570\u8a08\u7b97\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```py:tls.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport random\nimport threading\nimport time\n\nthreadLocal = threading.local()\n\n\ndef timeit(f):\n    def timed(*args, **kw):\n        # http://stackoverflow.com/questions/1622943/timeit-versus-timing-decorator\n        ts = time.time()\n        result = f(*args, **kw)\n        te = time.time()\n\n        print 'func:%r args:[%r, %r] took: %2.4f sec' % (f.__name__, args, kw, te-ts)\n        return result\n    return timed\n\n\n@timeit\ndef worker():\n    initialized = getattr(threadLocal, 'initialized', None)\n    if initialized is None:\n        print \"init start\"\n        # TLS\u306e\u521d\u671f\u5316\n        threadLocal.initialized = True\n        threadLocal.count = 0\n        threadLocal.prime = {}\n        return []\n    else:\n        print \"loop:{}\".format(threadLocal.count)\n        threadLocal.count += 1\n        return get_prime(random.randint(500000, 500010))\n\n\ndef get_prime(N):\n    \"\"\"\n    \u7d20\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u5374\n    :param N: int\n    :rtype : list of int\n    \"\"\"\n    # TLS\u306b\u30c7\u30fc\u30bf\u304c\u6709\u308c\u3070\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u8fd4\u5374\n    if N in threadLocal.prime:\n        return threadLocal.prime[N]\n\n    # \u7d20\u6570\u3092\u8a08\u7b97\u3059\u308b\n    table = list(range(N))\n    for i in range(2, int(N ** 0.5) + 1):\n        if table[i]:\n            for mult in range(i ** 2, N, i):\n                table[mult] = False\n    result = [p for p in table if p][1:]\n\n    # TLS\u306b\u7d50\u679c\u3092\u8a18\u9332\n    threadLocal.prime[N] = result\n    return result\n\nfor x in xrange(100):\n    worker()\n\n```\n```shell-session:\u5b9f\u884c\u7d50\u679c\n>>>python tls.py \ninit start\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:0\nfunc:'worker' args:[(), {}] took: 0.1715 sec\nloop:1\nfunc:'worker' args:[(), {}] took: 0.1862 sec\nloop:2\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:3\nfunc:'worker' args:[(), {}] took: 0.2403 sec\nloop:4\nfunc:'worker' args:[(), {}] took: 0.2669 sec\nloop:5\nfunc:'worker' args:[(), {}] took: 0.0001 sec\nloop:6\nfunc:'worker' args:[(), {}] took: 0.3130 sec\nloop:7\nfunc:'worker' args:[(), {}] took: 0.3456 sec\nloop:8\nfunc:'worker' args:[(), {}] took: 0.3224 sec\nloop:9\nfunc:'worker' args:[(), {}] took: 0.3208 sec\nloop:10\nfunc:'worker' args:[(), {}] took: 0.3196 sec\nloop:11\nfunc:'worker' args:[(), {}] took: 0.3282 sec\nloop:12\nfunc:'worker' args:[(), {}] took: 0.3257 sec\nloop:13\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:14\nfunc:'worker' args:[(), {}] took: 0.0000 sec\nloop:15\nfunc:'worker' args:[(), {}] took: 0.0000 sec\n...\n```\n\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\uff08TLS) \u306b\u683c\u7d0d\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u306fApache\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u6b8b\u308a\u7d9a\u3051\u307e\u3059\u3002\n\n# \u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u306f\u526f\u4f5c\u7528\u304c\u3042\u308b\n\u9069\u5207\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3059\u308b\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u901f\u5ea6\u304c\u6539\u5584\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u526f\u4f5c\u7528\u3068\u547c\u3070\u308c\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u7279\u6709\u306e\u30d0\u30b0\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u591a\u3005\u3042\u308b\u305f\u3081\u5341\u5206\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\u904e\u53bb\u306b\u81ea\u5206\u304c\u898b\u304b\u3051\u305f\u308a\u3001\u3084\u3089\u304b\u3057\u305f\u4e2d\u3060\u3068\n\n\u25a0 \u66f4\u65b0\u3057\u3066\u3082\u65b0\u3057\u3044\u5024\u304c\u53d6\u5f97\u51fa\u6765\u306a\u3044\u8868\u793a\u30d0\u30b0\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u8a2d\u8a08\u3092\u610f\u8b58\u305b\u305a\u306b\u5229\u7528\u3059\u308b\u3068\u767a\u751f\u3059\u308b\u30d0\u30b0\u3067\u3059\u3002\n1.\u5024\u53d6\u5f97 >> 2.\u5024\u66f4\u65b0 >> 3.\u5024\u53d6\u5f97 \u306e\u9806\u306b\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3068\u304d\u306b\u30011\u3067\u5024\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f\u7d50\u679c2\u3067\u66f4\u65b0\u3059\u308b\u3068\u304d\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u6d88\u3048\u305a\u30013\u3067\u53d6\u5f97\u6642\u306b\u66f4\u65b0\u3055\u308c\u305f\u5024\u304c\u53d6\u5f97\u3067\u304d\u305a\u306b\u53e4\u3044\u5024\u3092\u53d6\u5f97\u3057\u3066\u305d\u306e\u307e\u307e\u8868\u793a\u3057\u3066\u3057\u307e\u3046\u30d0\u30b0\u3067\u3059\u3002\n\n\u25a0 \u30c7\u30fc\u30bf\u6d88\u3048\u3061\u3083\u3046\u30d0\u30b0\n\u81f4\u547d\u7684\u306a\u5974\u3067\u3059\u30021.\u5024\u53d6\u5f97 >> 2.\u53d6\u5f97\u3057\u305f\u5024\u306bAdd\u3057\u3066\u5024\u66f4\u65b0 \u306e\u9806\u306b\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3066\u30011\u306e\u5024\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3057\u3066\u3044\u3066\u66f4\u65b0\u3055\u308c\u306a\u304b\u3063\u305f\u7d50\u679c\u3001\u305f\u3068\u3048\u30701234 + 100, 1234 + 200, 1234 + 50\u3068\u3001\u5024\u304c\u6d88\u3048\u3066\u3057\u307e\u3046\u30d0\u30b0\u304c\u767a\u751f\u3057\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u25a0 \u526f\u4f5c\u7528\u306e\u9632\u304e\u65b9\n`cached_property`\u30c7\u30b3\u30ec\u30bf\u306e\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3057\u3066\u3001\u5341\u5206\u306b\u8a66\u9a13\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u6271\u3048\u3070\u8ab0\u3067\u3082\u5b89\u5168\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u7406\u5c48\u3092\u77e5\u3089\u306a\u304f\u3066\u3082\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u51fa\u6765\u308c\u3070\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u3059\u308b\u7406\u5c48\u3092\u77e5\u3063\u3066\u304a\u3044\u305f\u65b9\u304c\u9069\u5207\u306b\u6271\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n## memo\nline_profiler\u306e\u516c\u958b\u65e5\u306f2008\u5e74\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["Python", "newrelic"]}