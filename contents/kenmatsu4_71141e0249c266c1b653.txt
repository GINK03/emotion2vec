{"context": " More than 1 year has passed since last update.\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(HMC)\u306e\u52d5\u4f5c\u539f\u7406\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u7406\u89e3\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u5148\u65e5\u306e\u8a18\u4e8b\u3001\u300c\u3010\u7d71\u8a08\u5b66\u3011\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(MCMC)\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\u300d\u306e\u7d9a\u7de8\u306b\u3042\u305f\u308a\u307e\u3059\u3002\n\u8c4a\u7530\u5148\u751f\u306e\u66f8\u7c4d\u300c\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66\u300d\u306e\u4f8b\u984c\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5bfe\u8c61\u306e\u5206\u5e03\u306f\u4eca\u56de\u30ac\u30f3\u30de\u5206\u5e03\u3068\u3057\u307e\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u4f7f\u3063\u305f\u90e8\u5206\u306e\u7406\u8ad6\u7684\u306a\u89e3\u8aac\u3057\u304b\u3057\u307e\u305b\u3093\u306e\u3067\u3001HMC\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u306f\u3053\u3061\u3089\u306e\u66f8\u7c4d\u3092\u3054\u53c2\u7167\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u63a8\u5b9a\u3059\u308b\u5bfe\u8c61\u306f$\\theta$\u3092\u5909\u6570\u3068\u3057\u305f\u30ac\u30f3\u30de\u5206\u5e03\u3067\u3059\u3002\u30d9\u30a4\u30ba\u63a8\u5b9a\u3067\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092$\\theta$\u3067\u8868\u3059\u306e\u3067\u3001$\\theta$\u306e\u5206\u5e03\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u30021\n\u30ac\u30f3\u30de\u5206\u5e03\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n$$  f(\\theta|\\alpha, \\lambda) = {\\lambda^{\\alpha} \\over \\Gamma(\\alpha)} \\theta^{\\alpha-1}e^{-\\lambda \\theta}\n\\quad \\quad 0 \\le x,\\quad 0 < \\lambda,\\quad 0 < \\alpha $$\n\u3053\u306e\u30ac\u30f3\u30de\u5206\u5e03\u306e\u3046\u3061\u3001\u6b63\u898f\u5316\u5b9a\u6570\u3092\u9664\u3044\u305f\u30ab\u30fc\u30cd\u30eb\u90e8\u5206\u3060\u3051\u306b\u7740\u76ee\u3059\u308b\u3068\u3001\n$$ f(\\theta|x) \\propto e^{-\\lambda \\theta} \\theta ^{\\alpha -1} $$\n\u3068\u306a\u308a\u307e\u3059\u3002\nHMC\u3067\u306f\u3053\u308c\u306b\u30ed\u30b0\u3092\u53d6\u3063\u3066\u30de\u30a4\u30ca\u30b9\u3092\u304b\u3051\u305f\u3082\u306e\u3001\u3064\u307e\u308a\n$$h(\\theta) = -\\log (f(\\theta|x)) = \\lambda \\theta - (\\alpha -1) \\log(\\theta) $$\n\u304c\u7269\u7406\u3067\u8a00\u3046\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u306b\u76f8\u5f53\u3059\u308b\u3068\u8003\u3048\u307e\u3059\u3002\u4eca\u56de\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u306f$\\alpha=11, \\lambda=13$\u3092\u4f7f\u3044\u307e\u3059\u3002\u30b0\u30e9\u30d5\u306b\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc$h(\\theta)$\u3068\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u306e\u95a2\u4fc2\u6027\u304b\u3089\u5c0e\u304b\u308c\u308c\u308b\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\n$$H(\\theta, p) = h(\\theta) + {1 \\over 2} p^2$$\n\u304c\u5916\u90e8\u304b\u3089\u306e\u529b\u304c\u52a0\u308f\u3089\u306a\u3051\u308c\u3070\u4e00\u5b9a\u3068\u306a\u308b\u3068\u8a00\u3046\u6027\u8cea\u3092\u8003\u3048\u308b\u3068\u3001\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e0b\u304c\u308c\u3070\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e0a\u6607\u3059\u308b\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u69d8\u5b50\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u305f\u3082\u306e\u304c\u4e0b\u8a18\u306e\u4e0a\u306e\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\u8d64\u3044\u77e2\u5370\u306e\u9577\u3055\u3067\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u306e\u5927\u304d\u3055\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u4e0b\u306e\u90e8\u5206\u306e\u30b0\u30e9\u30d5\u306f\u6a2a\u8ef8\u3092\u6c34\u5e73\u8ddd\u96e2$\\theta$\u3001\u7e26\u8ef8\u3092\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u3067\u8868\u3057\u305f\u3082\u306e\u3067\u3001\u4f4d\u76f8\u7a7a\u9593\u3068\u3044\u308f\u308c\u308b\u3082\u306e\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\uff08\u6559\u79d1\u66f8\u3068\u9055\u3044\u3001\u4e0a\u306e\u30b0\u30e9\u30d5\u3068\u6a2a\u8ef8\u3092\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u7e26\u6a2a\u9006\u306b\u3057\u305f\u56f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff09\u7b49\u9ad8\u7dda\u306f\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304c\u4e00\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u3092\u8868\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u4e00\u5b9a\u3067\u3042\u308b\u524d\u63d0\u3067\u3001\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6c34\u5e73\u4f4d\u7f6e\u3068\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u9055\u3046\u898b\u65b9\u306e\uff12\u3064\u306e\u8868\u793a\u65b9\u6cd5\u3067\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\n\u4e0a\u8a18\u306e\u56f3\u306e\u3088\u3046\u306b\u3001\u3046\u307e\u304f\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u4e00\u5b9a\u306e\u3068\u3053\u308d\u3092\u52d5\u304f\u3088\u3046\u306b\u6570\u5024\u8a08\u7b97\u3059\u308b\u624b\u6cd5\u3068\u3057\u3066\u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\u7406\u8ad6\u306e\u8a73\u7d30\u306f\u66f8\u7c4d\u3092\u53c2\u8003\u306b\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u3053\u3053\u3067\u306fpython\u306e\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002$p$\u306e\u6b21\u306e\u4f4d\u7f6e\u3092\u534a\u5206\u305a\u3064\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u8a08\u7b97\u306b\u3088\u308b\u8aa4\u5dee\u3092\u5c11\u306a\u304f\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n# function definitions\n\ndef h(theta):\n    global lam, alpha\n    return lam * theta - (alpha-1)*np.log(theta) \n\ndef dh_dtheta(theta):\n    global lam, alpha\n    return lam - (alpha - 1)/theta\n\ndef hamiltonian(p, theta):\n    return h(theta) + 0.5*p**2\n\nvhamiltonian = np.vectorize(hamiltonian)  # vectorize\n\ndef leapfrog_nexthalf_p(p, theta, eps=0.01):\n    \"\"\"\n    1/2\u30b9\u30c6\u30c3\u30d7\u5f8c\u306ep\u3092\u8a08\u7b97\n    \"\"\"\n    return p - 0.5 * eps* dh_dtheta(theta)\n\ndef leapfrog_next_theta(p, theta, eps=0.01):\n    \"\"\"\n    1\u30b9\u30c6\u30c3\u30d7\u5f8c\u306e\u03b8\u3092\u8a08\u7b97\n    \"\"\"\n    return theta + eps*p\n\n\ndef move_one_step(theta, p, eps=0.01, L=100, stlide=1):\n    \"\"\"\n    \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u3067L\u56de\u79fb\u52d5\u3057\u305f\uff11\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\n    \"\"\"\n    ret = []\n    ret.append([1, p, theta, hamiltonian(p,theta)])\n    for _ in range(L):\n        p = leapfrog_nexthalf_p(p, theta, eps)\n        theta = leapfrog_next_theta(p, theta, eps)\n        p = leapfrog_nexthalf_p(p, theta, eps)\n        ret.append([1, p, theta, hamiltonian(p,theta)])\n    return ret[::stlide]\n\n# \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u306e\u5b9f\u884c\n# initial param\ntheta = 0.1\np = 0\neps = 0.05\nL = 96\n\nresult = move_one_step(theta, p, eps=eps, L=100, stlide=1)\n\n\n\u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u306b\u3088\u308b\u9077\u79fb\u3068\u3001\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306b\u3088\u308b\u904b\u52d5\u91cfp\u306e\u5909\u66f4\n\u3053\u306e$L$\u3067\u6307\u5b9a\u3057\u305f\uff11\u56de\u306e\u9077\u79fb\u3092\u4e0b\u8a18\u306e\u30b0\u30e9\u30d5\u306e\u70b9\u7dda\u3067\u8868\u3057\u3066\u3044\u307e\u3059\u3002L\u500b\u306e\u8ecc\u8de1\u3092\u3059\u3079\u3066\u66f8\u304f\u3068\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u300112\u500b\u98db\u3070\u3057\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u672c\u5f53\u306f\u3082\u3063\u3068\u7d30\u304b\u304f\u70b9\u304c\u79fb\u52d5\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u9014\u4e2d\u9014\u4e2d\u3067\u8d64\u3044\u7dda\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fL\u56de\u9077\u79fb\u3057\u305f\u306e\u3061\u3001\u4e00\u5ea6\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3057\u305f\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\n\np = rd.normal(loc=0,scale=scale_p)       # ------(*)\n\n\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u8868\u3055\u308c\u308b\u3088\u3046\u306b\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3067$p$\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u3053\u3067\u306a\u305c\u300c\u6a19\u6e96\u300d\u6b63\u898f\u5206\u5e03\u3092\u4f7f\u3046\u306e\u304b\u3001\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u5206\u6563\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u8abf\u7bc0\u3067\u304d\u3066\u3082\u60aa\u304f\u306a\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002\u3054\u5b58\u77e5\u306e\u65b9\u304c\u3044\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\u3002\uff09\u3053\u3053\u3067\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u4fdd\u5b58\u304c\u5d29\u308c\u3001\u7570\u306a\u308b\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u5024\u306e\u7b49\u9ad8\u7dda\u3092\u307e\u305fL\u56de\u5206\u79fb\u52d5\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3059\u3002\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u4f7f\u3046\u306e\u306f\u3053\u306e\u8d64\u3044\u7dda\u304c\u63cf\u304b\u308c\u308b\u76f4\u524d\u306e\u70b91\u3064\u306b\u306a\u308a\u3001\u6b8b\u308a\u306e\u5024\u306f\u5358\u306a\u308b\u8a08\u7b97\u9014\u4e2d\u306e\u7d4c\u904e\u306e\u5024\u3068\u3057\u3066\u6368\u3066\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nrd.seed(123)\ntheta = 2.5\neps = 0.01\nT = 15\n\nstep = []\nprev_p = 0\n\nfor tau in range(T):\n    p = rd.normal(loc=0,scale=scale_p)       # ------(*)\n    step.append([2, p, prev_p, 0])\n    one_step = move_one_step(theta, p, eps=eps, L=96, stlide=12)\n    theta = one_step[-1][2]\n    step.extend(one_step)\n    prev_p = one_step[-1][1]\n\n\nprint len(step)\n\ndef animate(nframe):\n    global num_frame, n\n    sys.stdout.write(\"{}, \".format(nframe))\n\n    if step[n][0] == 1:\n        plt.scatter(step[n][2], step[n][1], s=20, zorder=100)\n        if step[n-1][0] == 1:\n            plt.plot([step[n-1][2], step[n][2]],[step[n-1][1], step[n][1]], c=\"k\", ls=\"--\", lw=.8, alpha=0.5)\n\n    else:\n        theta = step[n+1][2]\n\n        plt.plot([theta, theta], [step[n][2], step[n][1]], c=\"r\")\n\n    n += 1\n\n\nnum_frame = len(step)-1\nn = 0\nscale_p = 1\nfig = plt.figure(figsize=(12,9))\n\nxx = np.linspace(0.01, 2.6)\nyy = np.linspace(-5,5)\nX, Y = np.meshgrid(xx, yy)\nZ = vhamiltonian(Y, X)\nplt.contour(X, Y, Z, linewidths=1, cm=cm.rainbow, levels=np.linspace(0,40,40))\n\nplt.ylabel(\"p\")\nplt.xlabel(\"theta\")\nplt.xlim(0,2.6)\nplt.ylim(-5,5)\n\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('hmc_sampling_detail.gif', writer='imagemagick', fps=5, dpi=60)\n\n\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\u5b9f\u969b\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3060\u3051\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u7d50\u679c\u304c\u4e0b\u8a18\u3067\u3059\u3002\n\u307e\u305f\u3001\n$$ r= \\exp \\left( H(\\theta^{(t)}, p^{(t)}) - H(\\theta^{(a)}, p^{(a)})\\right) $$\n\u3068\u3044\u3046\u5024\u3092$\\min(1, r)$\u3068\u3057\u3066\u53d7\u5bb9\u7387\u3068\u3059\u308b\u305f\u3081\u3001\nr = np.exp(prev_hamiltonian-H)       # -----(**)\n\n\u3068rd.uniform()\u3092\u6bd4\u8f03\u3057\u3066\u53d7\u5bb9\u3001\u975e\u53d7\u5bb9\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u4e00\u5ea6\u3082\u68c4\u5374\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3079\u3066\u53d7\u5bb9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nburn-in\u671f\u9593\u309210\u3068\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u9593\u306f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3055\u308c\u305f\u5024\u3092\u25b2\u3067\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0b\u6bb5\u306e\u30b0\u30e9\u30d5\u304c\u63a8\u5b9a\u5bfe\u8c61\u3068\u306a\u308b$\\theta$\u306e\u5024\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u3059\u3002\u307e\u3060200\u5f31\u3057\u304b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u53f3\u306b\u6b6a\u3093\u3060\u30ac\u30f3\u30de\u5206\u5e03\u306e\u3088\u3046\u306a\u5206\u5e03\u5f62\u72b6\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\n# HMC simulation\nrd.seed(71)\nscale_p = 1\n\n# initial param\ntheta = 2.5\np = rd.normal(loc=0,scale=scale_p)\neps = 0.01\nL = 100\nT = 10000\nsim_result = []\nprev_hamiltonian = hamiltonian(p,theta)\nsim_result.append([ p, theta, prev_hamiltonian, True])\nfor t in range(T):\n    prev_p = p\n    prev_theta = theta\n    prev_hamiltonian = hamiltonian(p,theta)\n    for i in range(L):\n        p = leapfrog_nexthalf_p(p, theta, eps=eps)\n        theta = leapfrog_next_theta(p, theta, eps=eps)\n        p = leapfrog_nexthalf_p(p, theta, eps=eps)\n\n    H = hamiltonian(p,theta)\n    r = np.exp(prev_hamiltonian-H)       # -----(**)\n    if  r > 1:\n        sim_result.append([ p, theta, hamiltonian(p,theta), True])\n    elif r > 0 and rd.uniform() < r:\n        sim_result.append([ p, theta, hamiltonian(p,theta), True])\n    else:\n        sim_result.append([ p, theta, hamiltonian(p,theta), False])\n        theta = prev_theta\n\n    p = rd.normal(loc=0,scale=scale_p)\n\nsim_result = np.array(sim_result)\ndf = pd.DataFrame(sim_result, columns=\"p,theta,hamiltonian,accept\".split(\",\"))\n#df\nprint \"accept ratio: \", np.sum([df.accept == 1])/len(df)\n\n\u53d7\u5bb9\u7387\u306f\u307b\u307c100%\u306b\u8fd1\u304f\u306a\u308a\u307e\u3057\u305f  \n\nout\naccept ratio:  0.999900009999\n\n\n\u3053\u306e\u69d8\u5b50\u3092T=200\u307e\u3067\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\ndef animate(nframe):\n    global num_frame, n\n    sys.stdout.write(\"{}, \".format(nframe))\n\n    #### \u4e0a\u6bb5 #####\n    if n < burn_in:\n        marker = \"^\"\n        color  = \"gray\"\n        lc     = \"gray\"\n    else:\n        marker = \"o\"\n        color  = \"b\"\n        lc     = \"green\"\n\n    if sim_result[i,3]  == 0:\n        marker = \"x\"\n        color  = \"r\"\n        lc     = \"gray\"\n\n    axs[0].scatter(sim_result[n,1], sim_result[n,0], s=20, marker=marker, \n                   zorder=100, alpha=0.8, color=color) #,\n\n    if n > 1:\n        axs[0].plot([sim_result[n-1,1], sim_result[n,1]],\n                    [sim_result[n-1,0], sim_result[n,0]], c=lc, lw=0.5, alpha=0.4)\n\n\n    #### \u4e0b\u6bb5 #####\n    axs[1].scatter(sim_result[n,1], -3, alpha=1, marker=marker, c=color)\n\n    if n > burn_in:\n        hist_data = pd.DataFrame(sim_result[burn_in:n], columns=\"p,theta,hamiltonian,accept\".split(\",\"))\n        hist_data = hist_data[hist_data.accept ==1]\n        hist_data.theta.hist(bins=np.linspace(0,3,31),ax=axs[1], color=\"blue\",)\n    ### ========================\n\n    n += 1\n\nburn_in = 10\nnum_frame = 200\nn = 1\nn_col = 1\nn_row = 2\n\nfig, _ = plt.subplots(n_row, n_col, sharex=False, figsize=(10,8)) \ngs = gridspec.GridSpec(n_row, n_col, height_ratios=[3,1])\naxs = [plt.subplot(gs[i]) for i in range(n_row*n_col)]\n\nxx = np.linspace(0.01, 3)\nyy = np.linspace(-5,5)\nX, Y = np.meshgrid(xx, yy)\nZ = vhamiltonian(Y, X)\naxs[0].contour(X, Y, Z, linewidths=0.5, cm=cm.rainbow, levels=np.linspace(0,40,40))\n\naxs[0].set_ylabel(\"p\")\naxs[0].set_xlabel(\"theta\")\naxs[0].set_xlim(0,3)\naxs[1].set_xlim(0,3)\naxs[1].set_ylim(-5,30)\n\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('hmc_simulation2.gif', writer='imagemagick', fps=4, dpi=72)\n\n\n\u672c\u683c\u7684\u306a\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\u4e0a\u8a18\u307e\u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u306bT\u3092200\u3068\u5c11\u306a\u3081\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001T=10000\u3059\u3079\u3066\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u56f3\u304c\u3053\u3061\u3089\u3067\u3059\u3002burn-in\u306f1000\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n$\\theta$\u306e\u30c8\u30ec\u30fc\u30b9\u30d7\u30ed\u30c3\u30c8\u3067\u3059\u3002\u524d\u534a\u306e\u30b0\u30ec\u30fc\u306e\u90e8\u5206\u304cburn-in\u90e8\u5206\u3067\u3059\u3002\n\n\u7d50\u679c\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u3057\u3066\u307f\u305f\u3082\u306e\u304c\u3053\u3061\u3089\u3067\u3059\u3002$\\alpha=11, \\lambda=13$\u306e\u30ac\u30f3\u30de\u5206\u5e03\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001\u307b\u307c\u4e00\u81f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059  \n\n\n\u304a\u308f\u308a\u306b\n\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u53d7\u5bb9\u7387\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u304c\u3001\u78ba\u304b\u306b\u9ad8\u3044\u53d7\u5bb9\u7387\uff08\u4eca\u56de\u306f\u307b\u307c100%)\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f  \n\n\u53c2\u8003\n\u300c\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66 -\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u5b9f\u8df5\u7684\u5165\u9580-\u300d (\u8c4a\u7530\u79c0\u6a39 \u7de8\u8457)\nhttps://www.asakura.co.jp/books/isbn/978-4-254-12212-1/\n\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u5168\u6587\nhttps://github.com/matsuken92/Qiita_Contents/blob/master/Bayes_chap_05/HMC_Gamma-for_Publish.ipynb\n(PC\u3067\u306e\u95b2\u89a7\u63a8\u5968\u3001\u30b9\u30de\u30db\u3067\u306f\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30e2\u30fc\u30c9\u3067\u95b2\u89a7\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\nMac\u3067Python\u304b\u3089\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3GIF\u3092\u751f\u6210\u3059\u308b\u74b0\u5883\u8a2d\u5b9a\nhttp://qiita.com/kenmatsu4/items/573ca0733b192d919d0e\n\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66\u5165\u9580 \u8f2a\u8aad\u4f1a\nhttp://stats-study.connpass.com/event/27129/\n\u2192 \u50ed\u8d8a\u306a\u304c\u3089\u3001\u79c1\u304c\u4e3b\u50ac\u3057\u3066\u3044\u308b\u3053\u306e\u672c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002\n\u3000\n\n\n\n\n\u30ac\u30f3\u30de\u5206\u5e03\u306f\u305d\u306e\u307e\u307e\u3067\u3082\u5341\u5206\u60c5\u5831\u304c\u53d6\u308c\u308b\u6bd4\u8f03\u7684\u7c21\u5358\u306a\u5206\u5e03\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u304c\u96e3\u3057\u3044\u4e8b\u5f8c\u5206\u5e03\u3067\u3042\u3063\u305f\u3068\u4eee\u5b9a\u3057\u3066\u9032\u3081\u307e\u3059\u3002\u3053\u306e\u4e8b\u5f8c\u5206\u5e03\u304b\u3089HMC\u3092\u7528\u3044\u3066\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u3066\u3001\u5f97\u3089\u308c\u305f\u4e71\u6570\u5217\u304b\u3089\u4e8b\u5f8c\u5206\u5e03\u306e\u60c5\u5831\u3092\u63a2\u308a\u51fa\u305d\u3046\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(HMC)\u306e\u52d5\u4f5c\u539f\u7406\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u7406\u89e3\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u5148\u65e5\u306e\u8a18\u4e8b\u3001[\u300c\u3010\u7d71\u8a08\u5b66\u3011\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5(MCMC)\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\u300d](http://qiita.com/kenmatsu4/items/55e78cc7a5ae2756f9da)\u306e\u7d9a\u7de8\u306b\u3042\u305f\u308a\u307e\u3059\u3002\n\n\n\u8c4a\u7530\u5148\u751f\u306e\u66f8\u7c4d[\u300c\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66\u300d](https://www.asakura.co.jp/books/isbn/978-4-254-12212-1/)\u306e\u4f8b\u984c\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5bfe\u8c61\u306e\u5206\u5e03\u306f\u4eca\u56de\u30ac\u30f3\u30de\u5206\u5e03\u3068\u3057\u307e\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u4f7f\u3063\u305f\u90e8\u5206\u306e\u7406\u8ad6\u7684\u306a\u89e3\u8aac\u3057\u304b\u3057\u307e\u305b\u3093\u306e\u3067\u3001HMC\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u306f\u3053\u3061\u3089\u306e\u66f8\u7c4d\u3092\u3054\u53c2\u7167\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\n\u63a8\u5b9a\u3059\u308b\u5bfe\u8c61\u306f$\\theta$\u3092\u5909\u6570\u3068\u3057\u305f\u30ac\u30f3\u30de\u5206\u5e03\u3067\u3059\u3002\u30d9\u30a4\u30ba\u63a8\u5b9a\u3067\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092$\\theta$\u3067\u8868\u3059\u306e\u3067\u3001$\\theta$\u306e\u5206\u5e03\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u3002[^1]\n\n[^1]: \u30ac\u30f3\u30de\u5206\u5e03\u306f\u305d\u306e\u307e\u307e\u3067\u3082\u5341\u5206\u60c5\u5831\u304c\u53d6\u308c\u308b\u6bd4\u8f03\u7684\u7c21\u5358\u306a\u5206\u5e03\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u304c\u96e3\u3057\u3044\u4e8b\u5f8c\u5206\u5e03\u3067\u3042\u3063\u305f\u3068\u4eee\u5b9a\u3057\u3066\u9032\u3081\u307e\u3059\u3002\u3053\u306e\u4e8b\u5f8c\u5206\u5e03\u304b\u3089HMC\u3092\u7528\u3044\u3066\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u3066\u3001\u5f97\u3089\u308c\u305f\u4e71\u6570\u5217\u304b\u3089\u4e8b\u5f8c\u5206\u5e03\u306e\u60c5\u5831\u3092\u63a2\u308a\u51fa\u305d\u3046\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30ac\u30f3\u30de\u5206\u5e03\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n$$  f(\\theta|\\alpha, \\lambda) = {\\lambda^{\\alpha} \\over \\Gamma(\\alpha)} \\theta^{\\alpha-1}e^{-\\lambda \\theta}\n\\quad \\quad 0 \\le x,\\quad 0 < \\lambda,\\quad 0 < \\alpha $$\n\n\u3053\u306e\u30ac\u30f3\u30de\u5206\u5e03\u306e\u3046\u3061\u3001\u6b63\u898f\u5316\u5b9a\u6570\u3092\u9664\u3044\u305f\u30ab\u30fc\u30cd\u30eb\u90e8\u5206\u3060\u3051\u306b\u7740\u76ee\u3059\u308b\u3068\u3001\n$$ f(\\theta|x) \\propto e^{-\\lambda \\theta} \\theta ^{\\alpha -1} $$\n\u3068\u306a\u308a\u307e\u3059\u3002\n\nHMC\u3067\u306f\u3053\u308c\u306b\u30ed\u30b0\u3092\u53d6\u3063\u3066\u30de\u30a4\u30ca\u30b9\u3092\u304b\u3051\u305f\u3082\u306e\u3001\u3064\u307e\u308a\n$$h(\\theta) = -\\log (f(\\theta|x)) = \\lambda \\theta - (\\alpha -1) \\log(\\theta) $$\n\u304c\u7269\u7406\u3067\u8a00\u3046\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u306b\u76f8\u5f53\u3059\u308b\u3068\u8003\u3048\u307e\u3059\u3002\u4eca\u56de\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u306f$\\alpha=11, \\lambda=13$\u3092\u4f7f\u3044\u307e\u3059\u3002\u30b0\u30e9\u30d5\u306b\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n![potential_energy.png](https://qiita-image-store.s3.amazonaws.com/0/50670/cb50f44f-a9fc-2f15-8329-3ab2c1bc12ef.png)\n\n\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc$h(\\theta)$\u3068\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u306e\u95a2\u4fc2\u6027\u304b\u3089\u5c0e\u304b\u308c\u308c\u308b\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\n$$H(\\theta, p) = h(\\theta) + {1 \\over 2} p^2$$\n\u304c\u5916\u90e8\u304b\u3089\u306e\u529b\u304c\u52a0\u308f\u3089\u306a\u3051\u308c\u3070\u4e00\u5b9a\u3068\u306a\u308b\u3068\u8a00\u3046\u6027\u8cea\u3092\u8003\u3048\u308b\u3068\u3001\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e0b\u304c\u308c\u3070\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u4e0a\u6607\u3059\u308b\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u69d8\u5b50\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u305f\u3082\u306e\u304c\u4e0b\u8a18\u306e\u4e0a\u306e\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\u8d64\u3044\u77e2\u5370\u306e\u9577\u3055\u3067\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u306e\u5927\u304d\u3055\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n![phase_space](https://raw.githubusercontent.com/matsuken92/Qiita_Contents/master/General/phase_space.gif)\n\n\u307e\u305f\u3001\u4e0b\u306e\u90e8\u5206\u306e\u30b0\u30e9\u30d5\u306f\u6a2a\u8ef8\u3092\u6c34\u5e73\u8ddd\u96e2$\\theta$\u3001\u7e26\u8ef8\u3092\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc$p$\u3067\u8868\u3057\u305f\u3082\u306e\u3067\u3001\u4f4d\u76f8\u7a7a\u9593\u3068\u3044\u308f\u308c\u308b\u3082\u306e\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002\uff08\u6559\u79d1\u66f8\u3068\u9055\u3044\u3001\u4e0a\u306e\u30b0\u30e9\u30d5\u3068\u6a2a\u8ef8\u3092\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u7e26\u6a2a\u9006\u306b\u3057\u305f\u56f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff09\u7b49\u9ad8\u7dda\u306f\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304c\u4e00\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u3092\u8868\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u4e00\u5b9a\u3067\u3042\u308b\u524d\u63d0\u3067\u3001\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6c34\u5e73\u4f4d\u7f6e\u3068\u904b\u52d5\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u9055\u3046\u898b\u65b9\u306e\uff12\u3064\u306e\u8868\u793a\u65b9\u6cd5\u3067\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n## \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\n\n\u4e0a\u8a18\u306e\u56f3\u306e\u3088\u3046\u306b\u3001\u3046\u307e\u304f\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u4e00\u5b9a\u306e\u3068\u3053\u308d\u3092\u52d5\u304f\u3088\u3046\u306b\u6570\u5024\u8a08\u7b97\u3059\u308b\u624b\u6cd5\u3068\u3057\u3066\u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\u7406\u8ad6\u306e\u8a73\u7d30\u306f\u66f8\u7c4d\u3092\u53c2\u8003\u306b\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u3053\u3053\u3067\u306fpython\u306e\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002$p$\u306e\u6b21\u306e\u4f4d\u7f6e\u3092\u534a\u5206\u305a\u3064\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u8a08\u7b97\u306b\u3088\u308b\u8aa4\u5dee\u3092\u5c11\u306a\u304f\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\n```py\n# function definitions\n\ndef h(theta):\n    global lam, alpha\n    return lam * theta - (alpha-1)*np.log(theta) \n\ndef dh_dtheta(theta):\n    global lam, alpha\n    return lam - (alpha - 1)/theta\n\ndef hamiltonian(p, theta):\n    return h(theta) + 0.5*p**2\n\nvhamiltonian = np.vectorize(hamiltonian)  # vectorize\n\ndef leapfrog_nexthalf_p(p, theta, eps=0.01):\n    \"\"\"\n    1/2\u30b9\u30c6\u30c3\u30d7\u5f8c\u306ep\u3092\u8a08\u7b97\n    \"\"\"\n    return p - 0.5 * eps* dh_dtheta(theta)\n\ndef leapfrog_next_theta(p, theta, eps=0.01):\n    \"\"\"\n    1\u30b9\u30c6\u30c3\u30d7\u5f8c\u306e\u03b8\u3092\u8a08\u7b97\n    \"\"\"\n    return theta + eps*p\n\n\ndef move_one_step(theta, p, eps=0.01, L=100, stlide=1):\n    \"\"\"\n    \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u3067L\u56de\u79fb\u52d5\u3057\u305f\uff11\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\n    \"\"\"\n    ret = []\n    ret.append([1, p, theta, hamiltonian(p,theta)])\n    for _ in range(L):\n        p = leapfrog_nexthalf_p(p, theta, eps)\n        theta = leapfrog_next_theta(p, theta, eps)\n        p = leapfrog_nexthalf_p(p, theta, eps)\n        ret.append([1, p, theta, hamiltonian(p,theta)])\n    return ret[::stlide]\n```\n\n```py\n# \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u306e\u5b9f\u884c\n# initial param\ntheta = 0.1\np = 0\neps = 0.05\nL = 96\n\nresult = move_one_step(theta, p, eps=eps, L=100, stlide=1)\n```\n\n\n## \u30ea\u30fc\u30d7\u30d5\u30ed\u30c3\u30b0\u6cd5\u306b\u3088\u308b\u9077\u79fb\u3068\u3001\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306b\u3088\u308b\u904b\u52d5\u91cfp\u306e\u5909\u66f4\n\n\u3053\u306e$L$\u3067\u6307\u5b9a\u3057\u305f\uff11\u56de\u306e\u9077\u79fb\u3092\u4e0b\u8a18\u306e\u30b0\u30e9\u30d5\u306e\u70b9\u7dda\u3067\u8868\u3057\u3066\u3044\u307e\u3059\u3002L\u500b\u306e\u8ecc\u8de1\u3092\u3059\u3079\u3066\u66f8\u304f\u3068\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u300112\u500b\u98db\u3070\u3057\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u672c\u5f53\u306f\u3082\u3063\u3068\u7d30\u304b\u304f\u70b9\u304c\u79fb\u52d5\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u9014\u4e2d\u9014\u4e2d\u3067\u8d64\u3044\u7dda\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fL\u56de\u9077\u79fb\u3057\u305f\u306e\u3061\u3001\u4e00\u5ea6\u4f4d\u7f6e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5909\u66f4\u3057\u305f\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\n```\np = rd.normal(loc=0,scale=scale_p)       # ------(*)\n```\n\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u8868\u3055\u308c\u308b\u3088\u3046\u306b\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3067$p$\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u3053\u3067\u306a\u305c**\u300c\u6a19\u6e96\u300d**\u6b63\u898f\u5206\u5e03\u3092\u4f7f\u3046\u306e\u304b\u3001\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u5206\u6563\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u8abf\u7bc0\u3067\u304d\u3066\u3082\u60aa\u304f\u306a\u3044\u3088\u3046\u306a\u30fb\u30fb\u30fb\u3002\u3054\u5b58\u77e5\u306e\u65b9\u304c\u3044\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\u3002\uff09\u3053\u3053\u3067\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u4fdd\u5b58\u304c\u5d29\u308c\u3001\u7570\u306a\u308b\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u5024\u306e\u7b49\u9ad8\u7dda\u3092\u307e\u305fL\u56de\u5206\u79fb\u52d5\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3059\u3002\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u4f7f\u3046\u306e\u306f\u3053\u306e\u8d64\u3044\u7dda\u304c\u63cf\u304b\u308c\u308b\u76f4\u524d\u306e\u70b91\u3064\u306b\u306a\u308a\u3001\u6b8b\u308a\u306e\u5024\u306f\u5358\u306a\u308b\u8a08\u7b97\u9014\u4e2d\u306e\u7d4c\u904e\u306e\u5024\u3068\u3057\u3066\u6368\u3066\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\n![sampling](https://raw.githubusercontent.com/matsuken92/Qiita_Contents/master/General/hmc_sampling_detail_sm.gif)\n\n```py\nrd.seed(123)\ntheta = 2.5\neps = 0.01\nT = 15\n\nstep = []\nprev_p = 0\n\nfor tau in range(T):\n    p = rd.normal(loc=0,scale=scale_p)       # ------(*)\n    step.append([2, p, prev_p, 0])\n    one_step = move_one_step(theta, p, eps=eps, L=96, stlide=12)\n    theta = one_step[-1][2]\n    step.extend(one_step)\n    prev_p = one_step[-1][1]\n\n    \nprint len(step)\n\ndef animate(nframe):\n    global num_frame, n\n    sys.stdout.write(\"{}, \".format(nframe))\n    \n    if step[n][0] == 1:\n        plt.scatter(step[n][2], step[n][1], s=20, zorder=100)\n        if step[n-1][0] == 1:\n            plt.plot([step[n-1][2], step[n][2]],[step[n-1][1], step[n][1]], c=\"k\", ls=\"--\", lw=.8, alpha=0.5)\n        \n    else:\n        theta = step[n+1][2]\n        \n        plt.plot([theta, theta], [step[n][2], step[n][1]], c=\"r\")\n        \n    n += 1\n    \n    \nnum_frame = len(step)-1\nn = 0\nscale_p = 1\nfig = plt.figure(figsize=(12,9))\n\nxx = np.linspace(0.01, 2.6)\nyy = np.linspace(-5,5)\nX, Y = np.meshgrid(xx, yy)\nZ = vhamiltonian(Y, X)\nplt.contour(X, Y, Z, linewidths=1, cm=cm.rainbow, levels=np.linspace(0,40,40))\n\nplt.ylabel(\"p\")\nplt.xlabel(\"theta\")\nplt.xlim(0,2.6)\nplt.ylim(-5,5)\n\nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('hmc_sampling_detail.gif', writer='imagemagick', fps=5, dpi=60)\n```\n\n## \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\n\u5b9f\u969b\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3060\u3051\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u7d50\u679c\u304c\u4e0b\u8a18\u3067\u3059\u3002\n\n\u307e\u305f\u3001\n\n$$ r= \\exp \\left( H(\\theta^{(t)}, p^{(t)}) - H(\\theta^{(a)}, p^{(a)})\\right) $$\n\u3068\u3044\u3046\u5024\u3092$\\min(1, r)$\u3068\u3057\u3066\u53d7\u5bb9\u7387\u3068\u3059\u308b\u305f\u3081\u3001\n\n```py\nr = np.exp(prev_hamiltonian-H)       # -----(**)\n```\n\u3068`rd.uniform()`\u3092\u6bd4\u8f03\u3057\u3066\u53d7\u5bb9\u3001\u975e\u53d7\u5bb9\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u4e00\u5ea6\u3082\u68c4\u5374\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u3079\u3066\u53d7\u5bb9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nburn-in\u671f\u9593\u309210\u3068\u8a2d\u5b9a\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u9593\u306f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3055\u308c\u305f\u5024\u3092\u25b2\u3067\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0b\u6bb5\u306e\u30b0\u30e9\u30d5\u304c\u63a8\u5b9a\u5bfe\u8c61\u3068\u306a\u308b$\\theta$\u306e\u5024\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u3059\u3002\u307e\u3060200\u5f31\u3057\u304b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u53f3\u306b\u6b6a\u3093\u3060\u30ac\u30f3\u30de\u5206\u5e03\u306e\u3088\u3046\u306a\u5206\u5e03\u5f62\u72b6\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002\n\n![hmc_simulation](https://raw.githubusercontent.com/matsuken92/Qiita_Contents/master/General/hmc_simulation2.gif)\n\n```py\n# HMC simulation\nrd.seed(71)\nscale_p = 1\n\n# initial param\ntheta = 2.5\np = rd.normal(loc=0,scale=scale_p)\neps = 0.01\nL = 100\nT = 10000\nsim_result = []\nprev_hamiltonian = hamiltonian(p,theta)\nsim_result.append([ p, theta, prev_hamiltonian, True])\nfor t in range(T):\n    prev_p = p\n    prev_theta = theta\n    prev_hamiltonian = hamiltonian(p,theta)\n    for i in range(L):\n        p = leapfrog_nexthalf_p(p, theta, eps=eps)\n        theta = leapfrog_next_theta(p, theta, eps=eps)\n        p = leapfrog_nexthalf_p(p, theta, eps=eps)\n\n    H = hamiltonian(p,theta)\n    r = np.exp(prev_hamiltonian-H)       # -----(**)\n    if  r > 1:\n        sim_result.append([ p, theta, hamiltonian(p,theta), True])\n    elif r > 0 and rd.uniform() < r:\n        sim_result.append([ p, theta, hamiltonian(p,theta), True])\n    else:\n        sim_result.append([ p, theta, hamiltonian(p,theta), False])\n        theta = prev_theta\n    \n    p = rd.normal(loc=0,scale=scale_p)\n    \nsim_result = np.array(sim_result)\ndf = pd.DataFrame(sim_result, columns=\"p,theta,hamiltonian,accept\".split(\",\"))\n#df\nprint \"accept ratio: \", np.sum([df.accept == 1])/len(df)\n```\n\u53d7\u5bb9\u7387\u306f\u307b\u307c100%\u306b\u8fd1\u304f\u306a\u308a\u307e\u3057\u305f :smile: \n\n```:out\naccept ratio:  0.999900009999\n```\n\n\n\u3053\u306e\u69d8\u5b50\u3092T=200\u307e\u3067\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n```py\ndef animate(nframe):\n    global num_frame, n\n    sys.stdout.write(\"{}, \".format(nframe))\n     \n    #### \u4e0a\u6bb5 #####\n    if n < burn_in:\n        marker = \"^\"\n        color  = \"gray\"\n        lc     = \"gray\"\n    else:\n        marker = \"o\"\n        color  = \"b\"\n        lc     = \"green\"\n\n    if sim_result[i,3]  == 0:\n        marker = \"x\"\n        color  = \"r\"\n        lc     = \"gray\"\n\n    axs[0].scatter(sim_result[n,1], sim_result[n,0], s=20, marker=marker, \n                   zorder=100, alpha=0.8, color=color) #,\n\n    if n > 1:\n        axs[0].plot([sim_result[n-1,1], sim_result[n,1]],\n                    [sim_result[n-1,0], sim_result[n,0]], c=lc, lw=0.5, alpha=0.4)\n\n        \n    #### \u4e0b\u6bb5 #####\n    axs[1].scatter(sim_result[n,1], -3, alpha=1, marker=marker, c=color)\n\n    if n > burn_in:\n        hist_data = pd.DataFrame(sim_result[burn_in:n], columns=\"p,theta,hamiltonian,accept\".split(\",\"))\n        hist_data = hist_data[hist_data.accept ==1]\n        hist_data.theta.hist(bins=np.linspace(0,3,31),ax=axs[1], color=\"blue\",)\n    ### ========================\n    \n    n += 1\n    \nburn_in = 10\nnum_frame = 200\nn = 1\nn_col = 1\nn_row = 2\n\nfig, _ = plt.subplots(n_row, n_col, sharex=False, figsize=(10,8)) \ngs = gridspec.GridSpec(n_row, n_col, height_ratios=[3,1])\naxs = [plt.subplot(gs[i]) for i in range(n_row*n_col)]\n\nxx = np.linspace(0.01, 3)\nyy = np.linspace(-5,5)\nX, Y = np.meshgrid(xx, yy)\nZ = vhamiltonian(Y, X)\naxs[0].contour(X, Y, Z, linewidths=0.5, cm=cm.rainbow, levels=np.linspace(0,40,40))\n    \naxs[0].set_ylabel(\"p\")\naxs[0].set_xlabel(\"theta\")\naxs[0].set_xlim(0,3)\naxs[1].set_xlim(0,3)\naxs[1].set_ylim(-5,30)\n    \nanim = ani.FuncAnimation(fig, animate, frames=int(num_frame), blit=True)\nanim.save('hmc_simulation2.gif', writer='imagemagick', fps=4, dpi=72)\n```\n\n\n### \u672c\u683c\u7684\u306a\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\u4e0a\u8a18\u307e\u3067\u306f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u306bT\u3092200\u3068\u5c11\u306a\u3081\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001T=10000\u3059\u3079\u3066\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u56f3\u304c\u3053\u3061\u3089\u3067\u3059\u3002burn-in\u306f1000\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n![phase_simulation.png](https://qiita-image-store.s3.amazonaws.com/0/50670/de6334ed-486d-7806-dace-c0bb2f71be70.png)\n\n\n$\\theta$\u306e\u30c8\u30ec\u30fc\u30b9\u30d7\u30ed\u30c3\u30c8\u3067\u3059\u3002\u524d\u534a\u306e\u30b0\u30ec\u30fc\u306e\u90e8\u5206\u304cburn-in\u90e8\u5206\u3067\u3059\u3002\n\n![traceplot.png](https://qiita-image-store.s3.amazonaws.com/0/50670/1a1e6901-1962-8018-73f5-808259dccf00.png)\n\n\u7d50\u679c\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u3057\u3066\u307f\u305f\u3082\u306e\u304c\u3053\u3061\u3089\u3067\u3059\u3002$\\alpha=11, \\lambda=13$\u306e\u30ac\u30f3\u30de\u5206\u5e03\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001\u307b\u307c\u4e00\u81f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059 :grin: \n\n![histgram_gamma.png](https://qiita-image-store.s3.amazonaws.com/0/50670/4da2ee23-573a-e26a-092e-5c58020421ea.png)\n\n\n## \u304a\u308f\u308a\u306b\n\n\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u53d7\u5bb9\u7387\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u304c\u3001\u78ba\u304b\u306b\u9ad8\u3044\u53d7\u5bb9\u7387\uff08\u4eca\u56de\u306f\u307b\u307c100%)\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f :satisfied: \n\n\n## \u53c2\u8003\n\u300c\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66 -\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u5b9f\u8df5\u7684\u5165\u9580-\u300d (\u8c4a\u7530\u79c0\u6a39 \u7de8\u8457)\nhttps://www.asakura.co.jp/books/isbn/978-4-254-12212-1/\n\n\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u5168\u6587\nhttps://github.com/matsuken92/Qiita_Contents/blob/master/Bayes_chap_05/HMC_Gamma-for_Publish.ipynb\n(PC\u3067\u306e\u95b2\u89a7\u63a8\u5968\u3001\u30b9\u30de\u30db\u3067\u306f\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u30e2\u30fc\u30c9\u3067\u95b2\u89a7\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\nMac\u3067Python\u304b\u3089\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3GIF\u3092\u751f\u6210\u3059\u308b\u74b0\u5883\u8a2d\u5b9a\nhttp://qiita.com/kenmatsu4/items/573ca0733b192d919d0e\n\n\u57fa\u790e\u304b\u3089\u306e\u30d9\u30a4\u30ba\u7d71\u8a08\u5b66\u5165\u9580 \u8f2a\u8aad\u4f1a\nhttp://stats-study.connpass.com/event/27129/\n\u2192 \u50ed\u8d8a\u306a\u304c\u3089\u3001\u79c1\u304c\u4e3b\u50ac\u3057\u3066\u3044\u308b\u3053\u306e\u672c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002\n\n\u3000\n", "tags": ["Python", "\u7d71\u8a08\u5b66", "MCMC", "statistics"]}