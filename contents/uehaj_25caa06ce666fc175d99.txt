{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u904e\u53bb\u554f\u984c\u300c\u5206\u5c90\u3068\u884c\u304d\u6b62\u307e\u308a\u300d\u3092\u3001Rust(rustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07))\u3067\u89e3\u304d\u307e\u3057\u305f\u3002(\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u56de\u7b54\u306f\u3053\u3061\u3089)\n\nRust\u306e\u611f\u60f3\n\nRust\u306f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u306f\u5411\u3044\u3066\u306a\u3044\u3001\u3068\u601d\u3063\u305f\u304c\u3001\u52d8\u9055\u3044\u3060\u3063\u305f\u3002\u3084\u308c\u3070\u3067\u304d\u308b\u3002\n\n\n\u3084\u308c\u3070\u3067\u304d\u308b\u306e\u3060\u304c(\u5f8c\u8ff0)\u3001iter(),into_iter()\u3068collect::<>()\u3060\u3089\u3051\u306e\u3053\u308c\u304c\u95a2\u6570\u578b\u3068\u547c\u3079\u308b\u306e\u304b\u3001\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6210\u7acb\u6761\u4ef6\u306b\u306f\u3001\u7c21\u6f54\u3055\u3068\u3044\u3046\u3082\u306e\u306f\u5fc5\u9808\u6761\u4ef6\u306a\u306e\u3067\u306f\u306a\u3044\u304b? \u3042\u308b\u3044\u306fiter()\u3068collect()\u306f\u6163\u308c\u308b\u3068\u898b\u3048\u306a\u304f\u306a\u308b\u306e\u304b\u3002\n\u305f\u3060\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f5c\u308a\u3068\u3057\u3066\u306f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u9053\u5177\u7acb\u306f\u305d\u308d\u3048\u3089\u308c\u3066\u3044\u308b\u3002flat_map\u3057\u304b\u308a\u3001zip, fold, fuse, ..\u3002\n\u3061\u306a\u307f\u306b\u3001iter(),into_iter()\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3(Vec,..)\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u63db\u3001collect()\u306f\u305d\u306e\u9006\u3002\nmap\u3084filter\u306a\u3069\u306e\u51e6\u7406\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u4e0a\u3067\u884c\u3046(Java8\u306estream\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u306d)\u3002\niter()\u306f\u7e70\u308a\u8fd4\u3057\u8981\u7d20\u304cborrowing(&, \u30dd\u30a4\u30f3\u30bf\u53c2\u7167)\u3067\u308f\u305f\u3063\u3066\u304f\u308b\u3002\ninto_iter\u306f\u5024\u6e21\u3057\u3067\u3001(Copy trait\u3092derive\u3057\u3066\u306a\u3051\u308c\u3070)\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3002\n\n\nrustc\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u4e01\u5be7\u3067\u3059\u3070\u3089\u3057\u3044\u3001\u8cde\u8cdb\u3059\u3079\u304d\u30ec\u30d9\u30eb\u3002\u5b66\u7fd2\u8005\u306b\u3068\u3063\u3066\u306f\u3001\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6b7b\u6d3b\u7684\u306b\u91cd\u8981\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3053\u308c\u307b\u3069\u4e01\u5be7\u3067\u306a\u308c\u3070\u3001\u3053\u306e\u30ec\u30d9\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u7d76\u5bfe\u66f8\u3051\u306a\u304b\u3063\u305f(\u65ad\u8a00)\u3002\n\u4eca\u3067\u3082Rust\u306f\u3069\u3093\u3069\u3093\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u3002\u3055\u3059\u304c\u306bbreaking change\u306e\u983b\u5ea6\u306f\u5c11\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u5f71\u97ff\u306e\u3042\u308b\u5909\u66f4\u306f\u7d50\u69cb\u3042\u308b\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u305f\u308a\u3082\u3059\u308b\u306e\u3067\u3001\u3067\u304d\u308b\u304b\u304e\u308anightly\u3092\u8ffd\u3046\u3079\u3057\u3002\n\n\nRust\u304c\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5411\u3044\u3066\u306a\u3044\u3068\u601d\u3063\u305f\u7406\u7531\u3068\u3001\u4e57\u308a\u8d8a\u3048\u308b\u305f\u3081\u306e\u5bfe\u7b56\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7834\u58ca\u7684\u64cd\u4f5c\u30d9\u30fc\u30b9(sort,dedup) \n\n\n(\u5bfe\u7b56) \u2192 BTreeSet\u3092\u4f7f\u3046\n\n\n\u6587\u5b57\u5217\u64cd\u4f5c\u3082\u540c\u3058\u304f\u7834\u58ca\u7684\u64cd\u4f5c\u30d9\u30fc\u30b9\u3002\u7d50\u5408\u3059\u308b\u306e\u306bpush_str()\u3068\u304b\u3002\u7834\u58ca\u7684\u4ee5\u524d\u306b\u7169\u96d1\u3067\u6b7b\u306c\u3002\n\n\n(\u5bfe\u7b56) \u2192 format!()\u30de\u30af\u30ed\u3092\u591a\u7528\u3002\n\n\n\u5f0f\u4e2d\u306e\u95a2\u6570\u8fd4\u308a\u5024\u306f\u305d\u306e\u5834\u3060\u3051\u306e\u30c6\u30f3\u30dd\u30e9\u30ea\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306a\u306e\u3067\u3001\u76f4\u63a5\u30fb\u9593\u63a5\u306b\u5f8c\u3067\u3082\u4f7f\u3046\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3067\u5ef6\u9577\u3059\u308b\u3053\u3068\u3067\u56de\u907f\u3059\u308b\u3057\u304b\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n\n\n(\u5bfe\u7b56) \u2192 into_iter()\u3067\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u306b\u3059\u308b\u3053\u3068\u3067\u56de\u907f\u3002\u5024\u6e21\u3057\u304cRust\u306e\u57fa\u672c\u3067\u3042\u308b\u3068\u5fc3\u306b\u523b\u3080\u3002\n(\u30af\u30ed\u30fc\u30b8\u30e3\u306bmove\u63a5\u982d\u8f9e\u3092\u4ed8\u3051\u308b(move |a| ..)\u306e\u3082\u95a2\u4fc2\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u3001\u3069\u3046\u3044\u3046\u3068\u304d\u306b\u4f7f\u3046\u306e\u3060\u308d\u3046\u304b\u8b0e)\n\n\ncollect\u306f\u591a\u76f8\u3060\u304c\u3001\u3069\u3093\u306a\u578b\u3092\u8fd4\u3057\u305f\u3044\u306e\u304b\u3092\u793a\u305b\u308b\u578b\u60c5\u5831\u304c\u5f15\u6570\u3084self\u3067\u306f\u4e0e\u3048\u3089\u308c\u306a\u3044\u305f\u3081\u3001\u591a\u76f8\u6027\u306e\u89e3\u6c7a\u3092\u4ee3\u5165\u5148\u306e\u5909\u6570\u306e\u578b\u3067\u6307\u5b9a\u3059\u308b\u3057\u304b\u306a\u3044\u306e\u3067\u306f\u3002\n\n\n(\u5bfe\u7b56)\u2192collect::<Vec<String>>()\u307f\u305f\u3044\u306b\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u300ccollect::<Vec<_>>()\u300d\u306e\u3088\u3046\u306b\u8981\u7d20\u306e\u578b\u306f\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u63a8\u8ad6\u3055\u308c\u308b\u3088\u3046\u3060\u3002\n\n\n\n\n\u30b3\u30fc\u30c9\n/*\nhttp://nabetani.sakura.ne.jp/hena/ord27raswi/\n*/\n#![feature(collections)]\n#![feature(core)]\n\nextern crate core;\nuse std::string::String;\nuse std::collections::BTreeSet;\nuse core::iter::FromIterator;\n\nstatic PATHS:[(char, char);21]\n    = [('1','a'),('1','g'),('2','d'),('2','h'),\n       ('3','b'),('3','f'),('a','b'),('b','5'),\n       ('b','c'),('c','4'),('c','6'),('d','c'),\n       ('d','e'),('e','5'),('f','g'),('g','c'),\n       ('g','e'),('g','h'),('h','4'),('h','i'),\n       ('i','6')];\n\nfn traverse(node:char, stopper:&str) -> Vec<String> {\n    if stopper.contains(node) {\n        vec![]\n    }\n    else if node == '4' || node == '5' || node == '6' {\n        vec![format!(\"{}\", node)]\n    }\n    else {\n        PATHS\n            .iter()\n            .filter(|&&(beg,_)|{beg==node})\n            .flat_map(|&(_,end)|traverse(end, stopper).into_iter())\n            .collect()\n    }\n}\n\nfn solve(stopper:&str) -> Vec<String> {\n    BTreeSet::from_iter(\n        ['1','2','3']\n            .iter()\n            .flat_map(|start_point|\n                      traverse(*start_point, stopper)\n                      .iter()\n                      .map(|end_point| format!(\"{}{}\", *start_point, end_point))\n                      .collect::<Vec<String>>()\n                      .into_iter()\n                      )).into_iter().collect::<Vec<String>>()\n}\n\nfn test(stopper: &str, expected: &str) {\n    let mut answer = solve(stopper)\n        .iter()\n        .map(|s| s.as_slice())\n        .collect::<Vec<&str>>().connect(\",\");\n    if answer == \"\" {\n        answer = String::from_str(\"-\");\n    }\n    assert_eq!(answer, expected);\n}\n\nfn main() {\n/*0*/ test( \"befi\", \"14,16,24,26\" );    \n/*1*/ test( \"abc\", \"14,15,16,24,25,26,34,35,36\" );    \n/*2*/ test( \"de\", \"14,15,16,24,26,34,35,36\" );    \n/*3*/ test( \"fghi\", \"14,15,16,24,25,26,34,35,36\" );    \n/*4*/ test( \"abcdefghi\", \"-\" );    \n/*5*/ test( \"ag\", \"24,25,26,34,35,36\" );    \n/*6*/ test( \"dh\", \"14,15,16,34,35,36\" );    \n/*7*/ test( \"bf\", \"14,15,16,24,25,26\" );    \n/*8*/ test( \"ch\", \"15,25,35\" );    \n/*9*/ test( \"be\", \"14,16,24,26,34,36\" );    \n/*10*/ test( \"ci\", \"14,15,24,25,34,35\" );    \n/*11*/ test( \"cgi\", \"15,24,25,35\" );    \n/*12*/ test( \"acgi\", \"24,25,35\" );    \n/*13*/ test( \"cdefghi\", \"15,35\" );    \n/*14*/ test( \"acdefghi\", \"35\" );    \n/*15*/ test( \"cdegi\", \"15,24,35\" );    \n/*16*/ test( \"bcdegi\", \"24\" );    \n/*17*/ test( \"afh\", \"14,15,16,24,25,26,34,35,36\" );    \n/*18*/ test( \"abfh\", \"14,15,16,24,25,26\" );    \n/*19*/ test( \"dfh\", \"14,15,16,34,35,36\" );    \n/*20*/ test( \"cdfh\", \"15,35\" );    \n/*21*/ test( \"deh\", \"14,15,16,34,35,36\" );    \n/*22*/ test( \"cdeh\", \"15,35\" );    \n/*23*/ test( \"abefgh\", \"24,26\" );    \n/*24*/ test( \"abdefgh\", \"-\" );    \n/*25*/ test( \"acfghi\", \"25,35\" );    \n/*26*/ test( \"acdfghi\", \"35\" );    \n/*27*/ test( \"cegi\", \"15,24,35\" );    \n/*28*/ test( \"abcfhi\", \"15,25\" );    \n/*29*/ test( \"abcefhi\", \"-\" );    \n/*30*/ test( \"abdi\", \"14,15,16,24,34,35,36\" );    \n/*31*/ test( \"abdfi\", \"14,15,16,24\" );    \n/*32*/ test( \"bdi\", \"14,15,16,24,34,35,36\" );    \n/*33*/ test( \"bdfi\", \"14,15,16,24\" );    \n/*34*/ test( \"adfh\", \"14,15,16,34,35,36\" );    \n/*35*/ test( \"adfgh\", \"34,35,36\" );    \n/*36*/ test( \"acdfhi\", \"15,35\" );    \n/*37*/ test( \"bcdfgi\", \"24\" );    \n/*38*/ test( \"bcdfghi\", \"-\" );    \n/*39*/ test( \"defi\", \"14,15,16,24,34,35,36\" );    \n/*40*/ test( \"defhi\", \"14,15,16,34,35,36\" );    \n/*41*/ test( \"cdefg\", \"15,24,26,35\" );    \n/*42*/ test( \"cdefgi\", \"15,24,35\" );    \n/*43*/ test( \"bdefg\", \"24,26\" );    \n/*44*/ test( \"bdefgi\", \"24\" );    \n}\n\n\n[\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f](https://yhpg.doorkeeper.jp/)\u306e[\u904e\u53bb\u554f\u984c\u300c\u5206\u5c90\u3068\u884c\u304d\u6b62\u307e\u308a\u300d](http://nabetani.sakura.ne.jp/hena/ord27raswi/)\u3092\u3001Rust(rustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07))\u3067\u89e3\u304d\u307e\u3057\u305f\u3002(\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u56de\u7b54\u306f[\u3053\u3061\u3089](http://qiita.com/Nabetani/items/23ebddb44f0234e7fb15))\n\n# Rust\u306e\u611f\u60f3\n\n- Rust\u306f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u306f\u5411\u3044\u3066\u306a\u3044\u3001\u3068\u601d\u3063\u305f\u304c\u3001\u52d8\u9055\u3044\u3060\u3063\u305f\u3002**\u3084\u308c\u3070\u3067\u304d\u308b**\u3002\n - \u3084\u308c\u3070\u3067\u304d\u308b\u306e\u3060\u304c(\u5f8c\u8ff0)\u3001iter(),into_iter()\u3068collect::<>()\u3060\u3089\u3051\u306e\u3053\u308c\u304c\u95a2\u6570\u578b\u3068\u547c\u3079\u308b\u306e\u304b\u3001\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6210\u7acb\u6761\u4ef6\u306b\u306f\u3001\u7c21\u6f54\u3055\u3068\u3044\u3046\u3082\u306e\u306f\u5fc5\u9808\u6761\u4ef6\u306a\u306e\u3067\u306f\u306a\u3044\u304b? \u3042\u308b\u3044\u306fiter()\u3068collect()\u306f\u6163\u308c\u308b\u3068\u898b\u3048\u306a\u304f\u306a\u308b\u306e\u304b\u3002\n - \u305f\u3060\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f5c\u308a\u3068\u3057\u3066\u306f\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u9053\u5177\u7acb\u306f\u305d\u308d\u3048\u3089\u308c\u3066\u3044\u308b\u3002[flat_map\u3057\u304b\u308a\u3001zip, fold, fuse, ..](http://doc.rust-lang.org/std/iter/trait.IteratorExt.html)\u3002\n - \u3061\u306a\u307f\u306b\u3001iter(),into_iter()\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3(Vec,..)\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u63db\u3001collect()\u306f\u305d\u306e\u9006\u3002\n - map\u3084filter\u306a\u3069\u306e\u51e6\u7406\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u4e0a\u3067\u884c\u3046(Java8\u306estream\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u306d)\u3002\n - iter()\u306f\u7e70\u308a\u8fd4\u3057\u8981\u7d20\u304cborrowing(&, \u30dd\u30a4\u30f3\u30bf\u53c2\u7167)\u3067\u308f\u305f\u3063\u3066\u304f\u308b\u3002\n - into_iter\u306f\u5024\u6e21\u3057\u3067\u3001(Copy trait\u3092derive\u3057\u3066\u306a\u3051\u308c\u3070)\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3002\n- rustc\u306e**\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u4e01\u5be7\u3067\u3059\u3070\u3089\u3057\u3044**\u3001\u8cde\u8cdb\u3059\u3079\u304d\u30ec\u30d9\u30eb\u3002\u5b66\u7fd2\u8005\u306b\u3068\u3063\u3066\u306f\u3001\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6b7b\u6d3b\u7684\u306b\u91cd\u8981\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3053\u308c\u307b\u3069\u4e01\u5be7\u3067\u306a\u308c\u3070\u3001\u3053\u306e\u30ec\u30d9\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u7d76\u5bfe\u66f8\u3051\u306a\u304b\u3063\u305f(\u65ad\u8a00)\u3002\n- \u4eca\u3067\u3082Rust\u306f**\u3069\u3093\u3069\u3093\u5909\u66f4\u3055\u308c\u3066\u3044\u308b**\u3002\u3055\u3059\u304c\u306bbreaking change\u306e\u983b\u5ea6\u306f\u5c11\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u5f71\u97ff\u306e\u3042\u308b\u5909\u66f4\u306f\u7d50\u69cb\u3042\u308b\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u305f\u308a\u3082\u3059\u308b\u306e\u3067\u3001\u3067\u304d\u308b\u304b\u304e\u308anightly\u3092\u8ffd\u3046\u3079\u3057\u3002\n\n# Rust\u304c\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5411\u3044\u3066\u306a\u3044\u3068\u601d\u3063\u305f\u7406\u7531\u3068\u3001\u4e57\u308a\u8d8a\u3048\u308b\u305f\u3081\u306e\u5bfe\u7b56\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7834\u58ca\u7684\u64cd\u4f5c\u30d9\u30fc\u30b9(sort,dedup) \n - (\u5bfe\u7b56) \u2192 BTreeSet\u3092\u4f7f\u3046\n- \u6587\u5b57\u5217\u64cd\u4f5c\u3082\u540c\u3058\u304f\u7834\u58ca\u7684\u64cd\u4f5c\u30d9\u30fc\u30b9\u3002\u7d50\u5408\u3059\u308b\u306e\u306bpush_str()\u3068\u304b\u3002\u7834\u58ca\u7684\u4ee5\u524d\u306b\u7169\u96d1\u3067\u6b7b\u306c\u3002\n - (\u5bfe\u7b56) \u2192 format!()\u30de\u30af\u30ed\u3092\u591a\u7528\u3002\n- \u5f0f\u4e2d\u306e\u95a2\u6570\u8fd4\u308a\u5024\u306f\u305d\u306e\u5834\u3060\u3051\u306e\u30c6\u30f3\u30dd\u30e9\u30ea\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306a\u306e\u3067\u3001\u76f4\u63a5\u30fb\u9593\u63a5\u306b\u5f8c\u3067\u3082\u4f7f\u3046\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3067\u5ef6\u9577\u3059\u308b\u3053\u3068\u3067\u56de\u907f\u3059\u308b\u3057\u304b\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n - (\u5bfe\u7b56) \u2192 into_iter()\u3067\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u306b\u3059\u308b\u3053\u3068\u3067\u56de\u907f\u3002**\u5024\u6e21\u3057\u304cRust\u306e\u57fa\u672c**\u3067\u3042\u308b\u3068\u5fc3\u306b\u523b\u3080\u3002\n - (\u30af\u30ed\u30fc\u30b8\u30e3\u306bmove\u63a5\u982d\u8f9e\u3092\u4ed8\u3051\u308b(move |a| ..)\u306e\u3082\u95a2\u4fc2\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u3001\u3069\u3046\u3044\u3046\u3068\u304d\u306b\u4f7f\u3046\u306e\u3060\u308d\u3046\u304b\u8b0e)\n- collect\u306f\u591a\u76f8\u3060\u304c\u3001\u3069\u3093\u306a\u578b\u3092\u8fd4\u3057\u305f\u3044\u306e\u304b\u3092\u793a\u305b\u308b\u578b\u60c5\u5831\u304c\u5f15\u6570\u3084self\u3067\u306f\u4e0e\u3048\u3089\u308c\u306a\u3044\u305f\u3081\u3001\u591a\u76f8\u6027\u306e\u89e3\u6c7a\u3092\u4ee3\u5165\u5148\u306e\u5909\u6570\u306e\u578b\u3067\u6307\u5b9a\u3059\u308b\u3057\u304b\u306a\u3044\u306e\u3067\u306f\u3002\n - (\u5bfe\u7b56)\u2192collect::&lt;Vec&lt;String>>()\u307f\u305f\u3044\u306b\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u3053\u306e\u3068\u304d\u3001\u300ccollect::&lt;Vec&lt;_>>()\u300d\u306e\u3088\u3046\u306b\u8981\u7d20\u306e\u578b\u306f\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u63a8\u8ad6\u3055\u308c\u308b\u3088\u3046\u3060\u3002\n\n# \u30b3\u30fc\u30c9\n\n```rust\n/*\nhttp://nabetani.sakura.ne.jp/hena/ord27raswi/\n*/\n#![feature(collections)]\n#![feature(core)]\n\nextern crate core;\nuse std::string::String;\nuse std::collections::BTreeSet;\nuse core::iter::FromIterator;\n\nstatic PATHS:[(char, char);21]\n    = [('1','a'),('1','g'),('2','d'),('2','h'),\n       ('3','b'),('3','f'),('a','b'),('b','5'),\n       ('b','c'),('c','4'),('c','6'),('d','c'),\n       ('d','e'),('e','5'),('f','g'),('g','c'),\n       ('g','e'),('g','h'),('h','4'),('h','i'),\n       ('i','6')];\n \nfn traverse(node:char, stopper:&str) -> Vec<String> {\n    if stopper.contains(node) {\n        vec![]\n    }\n    else if node == '4' || node == '5' || node == '6' {\n        vec![format!(\"{}\", node)]\n    }\n    else {\n        PATHS\n            .iter()\n            .filter(|&&(beg,_)|{beg==node})\n            .flat_map(|&(_,end)|traverse(end, stopper).into_iter())\n            .collect()\n    }\n}\n\nfn solve(stopper:&str) -> Vec<String> {\n    BTreeSet::from_iter(\n        ['1','2','3']\n            .iter()\n            .flat_map(|start_point|\n                      traverse(*start_point, stopper)\n                      .iter()\n                      .map(|end_point| format!(\"{}{}\", *start_point, end_point))\n                      .collect::<Vec<String>>()\n                      .into_iter()\n                      )).into_iter().collect::<Vec<String>>()\n}\n\nfn test(stopper: &str, expected: &str) {\n    let mut answer = solve(stopper)\n        .iter()\n        .map(|s| s.as_slice())\n        .collect::<Vec<&str>>().connect(\",\");\n    if answer == \"\" {\n        answer = String::from_str(\"-\");\n    }\n    assert_eq!(answer, expected);\n}\n\nfn main() {\n/*0*/ test( \"befi\", \"14,16,24,26\" );    \n/*1*/ test( \"abc\", \"14,15,16,24,25,26,34,35,36\" );    \n/*2*/ test( \"de\", \"14,15,16,24,26,34,35,36\" );    \n/*3*/ test( \"fghi\", \"14,15,16,24,25,26,34,35,36\" );    \n/*4*/ test( \"abcdefghi\", \"-\" );    \n/*5*/ test( \"ag\", \"24,25,26,34,35,36\" );    \n/*6*/ test( \"dh\", \"14,15,16,34,35,36\" );    \n/*7*/ test( \"bf\", \"14,15,16,24,25,26\" );    \n/*8*/ test( \"ch\", \"15,25,35\" );    \n/*9*/ test( \"be\", \"14,16,24,26,34,36\" );    \n/*10*/ test( \"ci\", \"14,15,24,25,34,35\" );    \n/*11*/ test( \"cgi\", \"15,24,25,35\" );    \n/*12*/ test( \"acgi\", \"24,25,35\" );    \n/*13*/ test( \"cdefghi\", \"15,35\" );    \n/*14*/ test( \"acdefghi\", \"35\" );    \n/*15*/ test( \"cdegi\", \"15,24,35\" );    \n/*16*/ test( \"bcdegi\", \"24\" );    \n/*17*/ test( \"afh\", \"14,15,16,24,25,26,34,35,36\" );    \n/*18*/ test( \"abfh\", \"14,15,16,24,25,26\" );    \n/*19*/ test( \"dfh\", \"14,15,16,34,35,36\" );    \n/*20*/ test( \"cdfh\", \"15,35\" );    \n/*21*/ test( \"deh\", \"14,15,16,34,35,36\" );    \n/*22*/ test( \"cdeh\", \"15,35\" );    \n/*23*/ test( \"abefgh\", \"24,26\" );    \n/*24*/ test( \"abdefgh\", \"-\" );    \n/*25*/ test( \"acfghi\", \"25,35\" );    \n/*26*/ test( \"acdfghi\", \"35\" );    \n/*27*/ test( \"cegi\", \"15,24,35\" );    \n/*28*/ test( \"abcfhi\", \"15,25\" );    \n/*29*/ test( \"abcefhi\", \"-\" );    \n/*30*/ test( \"abdi\", \"14,15,16,24,34,35,36\" );    \n/*31*/ test( \"abdfi\", \"14,15,16,24\" );    \n/*32*/ test( \"bdi\", \"14,15,16,24,34,35,36\" );    \n/*33*/ test( \"bdfi\", \"14,15,16,24\" );    \n/*34*/ test( \"adfh\", \"14,15,16,34,35,36\" );    \n/*35*/ test( \"adfgh\", \"34,35,36\" );    \n/*36*/ test( \"acdfhi\", \"15,35\" );    \n/*37*/ test( \"bcdfgi\", \"24\" );    \n/*38*/ test( \"bcdfghi\", \"-\" );    \n/*39*/ test( \"defi\", \"14,15,16,24,34,35,36\" );    \n/*40*/ test( \"defhi\", \"14,15,16,34,35,36\" );    \n/*41*/ test( \"cdefg\", \"15,24,26,35\" );    \n/*42*/ test( \"cdefgi\", \"15,24,35\" );    \n/*43*/ test( \"bdefg\", \"24,26\" );    \n/*44*/ test( \"bdefgi\", \"24\" );    \n}\n\n```\n", "tags": ["rust1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07)", "\u3069\u3046\u66f8\u304f", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}