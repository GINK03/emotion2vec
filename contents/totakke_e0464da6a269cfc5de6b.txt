{"context": "Clojure\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u306e\u30c6\u30af\u30cb\u30c3\u30af\u96c6\u3067\u3059\u3002\n\u672c\u7a3f\u306b\u66f8\u3044\u3066\u3042\u308b\u624b\u6cd5\u304c\u5168\u3066\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u500b\u3005\u306e\u624b\u6cd5\u306b\u3064\u3044\u3066\u7d30\u304b\u304f\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u3044\u60c5\u5831\u306f\u4ed6\u306e\u6587\u732e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u3001Clojure\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5916\u5074\uff08JVM\u306a\u3069\uff09\u306b\u3064\u3044\u3066\u306f\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nPremature optimization is the root of all evil.\n\u00a0\u00a0-- Donald Knuth\n\n\u904e\u5ea6\u306a\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u4fdd\u5b88\u6027\u3084\u53ef\u8aad\u6027\u3092\u72a0\u7272\u306b\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u304d\u3061\u3093\u3068\u8abf\u67fb\u3057\u305f\u4e0a\u3067\u3001\u9069\u5207\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30fb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\nMeasure. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.\n\u00a0\u00a0-- Rob Pike\n\n\u6e2c\u5b9a\u30c4\u30fc\u30eb\u3068\u3057\u3066criterium (v0.4.3)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u4e2d\u306b\u73fe\u308c\u308bbench\u95a2\u6570\u306fcriterium\u306e\u3082\u306e\u3067\u3059\u3002bench\u306f\u69d8\u3005\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u7c21\u7565\u5316\u306e\u305f\u3081\u3001\u5e73\u5747\u5b9f\u884c\u6642\u9593\u3068\u6a19\u6e96\u504f\u5dee\u306e\u307f\u3092\u8a18\u3057\u307e\u3059\u3002\n\n1. \u578b\u30d2\u30f3\u30c8\n(defn str-len [^String s]\n  (.length s))\n\n\u578b\u30d2\u30f3\u30c8\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u907f\u3051\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\nuser> (defn len-a [^String s]\n        (.length s))\nuser> (bench\n       (dotimes [_ 100000] (len-a \"\u306b\u3083\u3093\u3071\u3059\u30fc\")))\nmean 60.753733 \u00b5s, sd 3.121729 \u00b5s\n\nuser> (defn len-b [s]\n        (.length s))\nuser> (bench\n       (dotimes [_ 100000] (len-b \"\u306b\u3083\u3093\u3071\u3059\u30fc\")))\nmean 238.182735 ms, sd 35.978027 ms\n\nJava\u306e\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u3044\u308b\u7b87\u6240\u3067\u306f\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u3092\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u767a\u751f\u3059\u308b\u7b87\u6240\u306f\u3001*warn-on-reflection*\u3092true\u306b\u3057\u3066\u304a\u304f\u3068\u8b66\u544a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8b66\u544a\u3082\u51fa\u529b\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30ed\u30b0\u304c\u898b\u3065\u3089\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6c42\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3084\u3001\u4ed6\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u8b66\u544a\u3092\u6709\u52b9\u5316\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nLeiningen\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001project.clj\u306b\u3001\n:profiles {:dev {:global-vars {*warn-on-reflection* true}}}\n\n\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n2. \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\n(defn calc [^long x]\n  (* (+ x 5) 2))\n\n\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067Boxing\u3092\u907f\u3051\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\u306f\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u306e\u307f\u4ed8\u3051\u3089\u308c\u3001\u6700\u59274\u3064\u307e\u3067\u3001\u578b\u306f^long, ^double\u306e2\u7a2e\u985e\u306e\u307f\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nuser> (defn a [^long x]\n        (* (+ x 5) 2))\nuser> (bench\n       (dotimes [_ 10000000] (a 2)))\nmean 6.024158 ms, sd 194.411244 \u00b5s\n\nuser> (defn b [x]\n        (* (+ x 5) 2))\nuser> (bench\n       (dotimes [_ 10000000] (b 2)))\nmean 316.899274 ms, sd 28.195365 ms\n\n\n3. transient\n(loop [i n, v (transient [])]\n  (if (pos? i)\n    (recur (dec i) (conj! v i))\n    (persistent! v))))\n\ntransient\u3092\u4f7f\u3046\u3053\u3068\u3067\u4e00\u6642\u7684\u306b\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f5c\u6210\u3057\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\nuser> (defn a [n]\n        (loop [i n, v (transient [])]\n          (if (pos? i)\n            (recur (dec i) (conj! v i))\n            (persistent! v))))\nuser> (bench (dorun (a 1000000)))\nmean 33.745160 ms, sd 2.862908 ms\n\nuser> (defn b [n]\n        (loop [i n, v []]\n          (if (pos? i)\n            (recur (dec i) (conj v i))\n            v)))\nuser> (bench (dorun (b 1000000)))\nmean 65.361617 ms, sd 9.608193 ms\n\n\n4. loop/recur\u3092\u4f7f\u3046\n\u30b7\u30fc\u30b1\u30f3\u30b9\u51e6\u7406\u306e\u969b\u3001reduce\u306a\u3069\u306e\u9ad8\u968e\u95a2\u6570\u3088\u308a\u3082\u3001loop/recur\u3092\u7528\u3044\u305f\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nuser> (bench\n       (loop [i 1, s 0]\n         (if (< i 10000000)\n           (recur (+ i 2) (+ s i))\n           s)))\nmean 8.760516 ms, sd 179.414882 \u00b5s\n\nuser> (bench\n       (->> (range 10000000)\n            (filter odd?)\n            (reduce +)))\nmean 558.493307 ms, sd 58.575160 ms\n\n\n5. var\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\n(def ^:const pi 3.14)\n\n:const\u30bf\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067var\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3067\u304d\u307e\u3059\u3002\nuser> (def ^:const a 10)\nuser> (bench\n       (dotimes [_ 100000000] (inc a)))\nmean 29.493786 ms, sd 667.197412 \u00b5s\n\nuser> (def b 10)\nuser> (bench\n       (dotimes [_ 100000000] (inc b)))\nmean 336.367811 ms, sd 17.975614 ms\n\n\n6. \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9 vs \u30d7\u30ed\u30c8\u30b3\u30eb\n\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u884c\u3046\u5834\u5408\u3001\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u3088\u308a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u901f\u3044\u3088\u3046\u3067\u3059\u3002\nuser> (defmulti sum-a class)\nuser> (defmethod sum-a clojure.lang.PersistentVector\n        [coll]\n        (reduce + coll))\nuser> (defmethod sum-a clojure.lang.PersistentList\n        [coll]\n        (reduce + coll))\nuser> (bench\n       (dotimes [_ 100000]\n         (sum-a (vec (range 10)))))\nmean 1.226000 sec, sd 148.574462 ms\n\nuser> (defprotocol Summable\n        (sum-b [this]))\nuser> (extend-protocol Summable\n        clojure.lang.PersistentVector\n        (sum-b [coll] (reduce + coll))\n        clojure.lang.PersistentList\n        (sum-b [coll] (reduce + coll)))\nuser> (bench\n       (dotimes [_ 100000]\n         (sum-b (vec (range 10)))))\nmean 1.132357 sec, sd 87.747978 ms\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u305d\u3053\u307e\u3067\u6539\u5584\u306f\u3055\u308c\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\u53c2\u8003\uff1aPolymorphic performance - Inside Clojure\n\n7. \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\n(def f (memoize f))\n\n\u30e1\u30e2\u5316\u306a\u3069\u306b\u3088\u308a\u904e\u53bb\u306e\u8a08\u7b97\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u7a7a\u9593\u52b9\u7387\u3068\u5f15\u304d\u63db\u3048\u306b\u6642\u9593\u52b9\u7387\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nuser> (defn a [n]\n        (reduce + (range (inc n))))\nuser> (def a (memoize a))\nuser> (bench\n       (dotimes [_ 1000000] (a 10)))\nmean 136.567054 ms, sd 2.649802 ms\n\nuser> (defn b [n]\n        (reduce + (range (inc n))))\nuser> (bench\n       (dotimes [_ 1000000] (b 10)))\nmean 648.153982 ms, sd 51.368302 ms       \n\n\n8. \u4e26\u5217\u5316\u3059\u308b\n(pmap slow-fn sequence)\n\n\u4e26\u5217\u5316\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308a\u307e\u3057\u3087\u3046\u3002\nuser> (defn inc-after [n]\n        (Thread/sleep 10)\n        (inc n))\n\nuser> (bench\n       (dorun\n        (pmap inc-after (range 100))))\nmean 44.741148 ms, sd 307.708350 \u00b5s\n\nuser> (bench\n       (dorun\n        (map inc-after (range 100))))\nmean 1.083034 sec, sd 9.887041 ms\n\n\n9. \u30c7\u30fc\u30bf\u69cb\u9020\u306e\u7279\u6027\u3092\u628a\u63e1\u3059\u308b\nClojure\u306b\u306f\u30ea\u30b9\u30c8\u3001\u30d9\u30af\u30bf\u3001\u30de\u30c3\u30d7\u306a\u3069\u3001\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u7279\u6027\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u540c\u3058\u51e6\u7406\u95a2\u6570\u3067\u3082\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3088\u3063\u3066\u8457\u3057\u304f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\nuser> (def alist (list* (range 1000)))\nuser> (def avec (vec (range 1000)))\n\nuser> (bench\n       (dotimes [_ 100000] (nth alist 999)))\nmean: 1.226256 sec, sd: 41.951728 ms\n\nuser> (bench\n       (dotimes [_ 100000] (nth avec 999)))\nmean: 248.232508 \u00b5s, sd: 42.627235 \u00b5s\n\n\u307e\u305f\u3001\u540c\u3058\u6a5f\u80fd\u3092\u6301\u3064\u95a2\u6570\u3067\u3082\u8a08\u7b97\u91cf\u304c\u7570\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u30d9\u30af\u30bf\u306b\u5bfe\u3059\u308blast\u3068peek\u306a\u3069\uff09\nuser> (bench\n       (dotimes [_ 100000] (last avec)))\nmean: 2.722565 sec, sd: 245.147760 ms\n\nuser> (bench\n       (dotimes [_ 100000] (peek avec)))\nmean: 273.698907 \u00b5s, sd: 12.988158 \u00b5s\n\n\n10. \u30de\u30c3\u30d7\u306e\u4ee3\u308f\u308a\u306b\u30ec\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\n(defrecord Point [x y z])\n\n\u30ad\u30fc\u304c\u307b\u3068\u3093\u3069\u56fa\u5b9a\u306e\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ec\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u9ad8\u901f\u5316\u3067\u304d\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ec\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u901f\u3044\u305f\u3081\u3067\u3059\u3002\nuser> (def p1 {:x 10, :y 20, :z 30})\nuser> (bench\n       (dotimes [_ 10000000] (:y p1)))\nmean: 125.331950 ms, sd: 4.828593 ms\n\nuser> (defrecord Point [x y z])\nuser> (def p2 (->Point 10 20 30))\nuser> (bench\n       (dotimes [_ 10000000] (:y p2)))\nmean: 21.582398 ms, sd: 1.148932 ms\n\nJava\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\u3092\u7528\u3044\u308b\u3068\u66f4\u306b\u901f\u304f\u306a\u308a\u307e\u3059\u3002\nuser> (bench\n       (dotimes [_ 10000000] (.y ^Point p2)))\nmean: 5.989371 ms, sd: 285.763077 \u00b5s\n\n\n11. \u5e73\u5766\u5316\u306e\u65b9\u6cd5\u3092\u691c\u8a0e\u3059\u308b\n(apply concat nested-xs)\n\n\u30cd\u30b9\u30c8\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5e73\u5766\u5316\u3059\u308b\u306b\u306f\u901a\u5e38flatten\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u30cd\u30b9\u30c8\u304c1\u6bb5\u968e\u306e\u5834\u5408\u306fapply concat\u3092\u4f7f\u3046\u3053\u3068\u3067\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\nuser> (def coll [[1 2 3] [4 5 6]])\n\nuser> (bench\n       (dotimes [_ 10000]\n         (apply concat coll))) ; -> (1 2 3 4 5 6)\nmean: 1.237810 ms, sd: 18.558873 \u00b5s\n\nuser> (bench\n       (dotimes [_ 10000]\n         (flatten coll))) ; -> (1 2 3 4 5 6)\nmean: 10.459393 ms, sd: 148.369734 \u00b5s\n\n\u305f\u3060\u3057\u3001\u30cd\u30b9\u30c8\u304c2\u6bb5\u968e\u4ee5\u4e0a\u3001\u3082\u3057\u304f\u306f1\u6bb5\u968e\u76ee\u306b\u30b7\u30fc\u30b1\u30f3\u30b9\u4ee5\u5916\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306fflatten\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08Clojure v1.7\u3092\u4f7f\u7528\uff09\nClojure\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u306e\u30c6\u30af\u30cb\u30c3\u30af\u96c6\u3067\u3059\u3002\n\n\u672c\u7a3f\u306b\u66f8\u3044\u3066\u3042\u308b\u624b\u6cd5\u304c\u5168\u3066\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u500b\u3005\u306e\u624b\u6cd5\u306b\u3064\u3044\u3066\u7d30\u304b\u304f\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u3044\u60c5\u5831\u306f\u4ed6\u306e\u6587\u732e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u306a\u304a\u3001Clojure\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5916\u5074\uff08JVM\u306a\u3069\uff09\u306b\u3064\u3044\u3066\u306f\u8a18\u8ff0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n> Premature optimization is the root of all evil.\n> &nbsp;&nbsp;-- Donald Knuth\n\n\u904e\u5ea6\u306a\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u4fdd\u5b88\u6027\u3084\u53ef\u8aad\u6027\u3092\u72a0\u7272\u306b\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u304d\u3061\u3093\u3068\u8abf\u67fb\u3057\u305f\u4e0a\u3067\u3001\u9069\u5207\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30fb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\n> Measure. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest.\n> &nbsp;&nbsp;-- [Rob Pike][notes-on-programming-in-c]\n\n\u6e2c\u5b9a\u30c4\u30fc\u30eb\u3068\u3057\u3066[criterium][criterium] (v0.4.3)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30b3\u30fc\u30c9\u4e2d\u306b\u73fe\u308c\u308b`bench`\u95a2\u6570\u306fcriterium\u306e\u3082\u306e\u3067\u3059\u3002`bench`\u306f\u69d8\u3005\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u7c21\u7565\u5316\u306e\u305f\u3081\u3001\u5e73\u5747\u5b9f\u884c\u6642\u9593\u3068\u6a19\u6e96\u504f\u5dee\u306e\u307f\u3092\u8a18\u3057\u307e\u3059\u3002\n\n1. \u578b\u30d2\u30f3\u30c8\n==========\n\n```clj\n(defn str-len [^String s]\n  (.length s))\n```\n\n\u578b\u30d2\u30f3\u30c8\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u907f\u3051\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\n\n```clj\nuser> (defn len-a [^String s]\n        (.length s))\nuser> (bench\n       (dotimes [_ 100000] (len-a \"\u306b\u3083\u3093\u3071\u3059\u30fc\")))\nmean 60.753733 \u00b5s, sd 3.121729 \u00b5s\n\nuser> (defn len-b [s]\n        (.length s))\nuser> (bench\n       (dotimes [_ 100000] (len-b \"\u306b\u3083\u3093\u3071\u3059\u30fc\")))\nmean 238.182735 ms, sd 35.978027 ms\n```\nJava\u306e\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u3044\u308b\u7b87\u6240\u3067\u306f\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u3092\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u767a\u751f\u3059\u308b\u7b87\u6240\u306f\u3001`*warn-on-reflection*`\u3092`true`\u306b\u3057\u3066\u304a\u304f\u3068\u8b66\u544a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8b66\u544a\u3082\u51fa\u529b\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30ed\u30b0\u304c\u898b\u3065\u3089\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6c42\u3081\u3089\u308c\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3084\u3001\u4ed6\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u5f71\u97ff\u3092\u53ca\u307c\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u8b66\u544a\u3092\u6709\u52b9\u5316\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n[Leiningen][leiningen]\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001`project.clj`\u306b\u3001\n\n```clj\n:profiles {:dev {:global-vars {*warn-on-reflection* true}}}\n```\n\n\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n2. \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\n===================\n\n```clj\n(defn calc [^long x]\n  (* (+ x 5) 2))\n```\n\n\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067Boxing\u3092\u907f\u3051\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u30d2\u30f3\u30c8\u306f\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u306e\u307f\u4ed8\u3051\u3089\u308c\u3001\u6700\u59274\u3064\u307e\u3067\u3001\u578b\u306f`^long`, `^double`\u306e2\u7a2e\u985e\u306e\u307f\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```clj\nuser> (defn a [^long x]\n        (* (+ x 5) 2))\nuser> (bench\n       (dotimes [_ 10000000] (a 2)))\nmean 6.024158 ms, sd 194.411244 \u00b5s\n\nuser> (defn b [x]\n        (* (+ x 5) 2))\nuser> (bench\n       (dotimes [_ 10000000] (b 2)))\nmean 316.899274 ms, sd 28.195365 ms\n```\n\n3. transient\n=============\n\n```clj\n(loop [i n, v (transient [])]\n  (if (pos? i)\n    (recur (dec i) (conj! v i))\n    (persistent! v))))\n```\n\n`transient`\u3092\u4f7f\u3046\u3053\u3068\u3067\u4e00\u6642\u7684\u306b\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f5c\u6210\u3057\u3001\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\n\n```clj\nuser> (defn a [n]\n        (loop [i n, v (transient [])]\n          (if (pos? i)\n            (recur (dec i) (conj! v i))\n            (persistent! v))))\nuser> (bench (dorun (a 1000000)))\nmean 33.745160 ms, sd 2.862908 ms\n\nuser> (defn b [n]\n        (loop [i n, v []]\n          (if (pos? i)\n            (recur (dec i) (conj v i))\n            v)))\nuser> (bench (dorun (b 1000000)))\nmean 65.361617 ms, sd 9.608193 ms\n```\n\n4. loop/recur\u3092\u4f7f\u3046\n==================\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u51e6\u7406\u306e\u969b\u3001`reduce`\u306a\u3069\u306e\u9ad8\u968e\u95a2\u6570\u3088\u308a\u3082\u3001`loop/recur`\u3092\u7528\u3044\u305f\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n```clj\nuser> (bench\n       (loop [i 1, s 0]\n         (if (< i 10000000)\n           (recur (+ i 2) (+ s i))\n           s)))\nmean 8.760516 ms, sd 179.414882 \u00b5s\n\nuser> (bench\n       (->> (range 10000000)\n            (filter odd?)\n            (reduce +)))\nmean 558.493307 ms, sd 58.575160 ms\n```\n\n5. var\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\n===================\n\n```clj\n(def ^:const pi 3.14)\n```\n\n`:const`\u30bf\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067var\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3067\u304d\u307e\u3059\u3002\n\n```clj\nuser> (def ^:const a 10)\nuser> (bench\n       (dotimes [_ 100000000] (inc a)))\nmean 29.493786 ms, sd 667.197412 \u00b5s\n\nuser> (def b 10)\nuser> (bench\n       (dotimes [_ 100000000] (inc b)))\nmean 336.367811 ms, sd 17.975614 ms\n```\n\n6. \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9 vs \u30d7\u30ed\u30c8\u30b3\u30eb\n============================\n\n\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u884c\u3046\u5834\u5408\u3001\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u3088\u308a\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u901f\u3044\u3088\u3046\u3067\u3059\u3002\n\n```clj\nuser> (defmulti sum-a class)\nuser> (defmethod sum-a clojure.lang.PersistentVector\n        [coll]\n        (reduce + coll))\nuser> (defmethod sum-a clojure.lang.PersistentList\n        [coll]\n        (reduce + coll))\nuser> (bench\n       (dotimes [_ 100000]\n         (sum-a (vec (range 10)))))\nmean 1.226000 sec, sd 148.574462 ms\n\nuser> (defprotocol Summable\n        (sum-b [this]))\nuser> (extend-protocol Summable\n        clojure.lang.PersistentVector\n        (sum-b [coll] (reduce + coll))\n        clojure.lang.PersistentList\n        (sum-b [coll] (reduce + coll)))\nuser> (bench\n       (dotimes [_ 100000]\n         (sum-b (vec (range 10)))))\nmean 1.132357 sec, sd 87.747978 ms\n```\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u305d\u3053\u307e\u3067\u6539\u5584\u306f\u3055\u308c\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u53c2\u8003\uff1a[Polymorphic performance - Inside Clojure](http://insideclojure.org/2015/04/27/poly-perf/)\n\n7. \u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\n================\n\n```clj\n(def f (memoize f))\n```\n\n\u30e1\u30e2\u5316\u306a\u3069\u306b\u3088\u308a\u904e\u53bb\u306e\u8a08\u7b97\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u7a7a\u9593\u52b9\u7387\u3068\u5f15\u304d\u63db\u3048\u306b\u6642\u9593\u52b9\u7387\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```clj\nuser> (defn a [n]\n        (reduce + (range (inc n))))\nuser> (def a (memoize a))\nuser> (bench\n       (dotimes [_ 1000000] (a 10)))\nmean 136.567054 ms, sd 2.649802 ms\n\nuser> (defn b [n]\n        (reduce + (range (inc n))))\nuser> (bench\n       (dotimes [_ 1000000] (b 10)))\nmean 648.153982 ms, sd 51.368302 ms       \n```\n\n8. \u4e26\u5217\u5316\u3059\u308b\n============\n\n```clj\n(pmap slow-fn sequence)\n```\n\n\u4e26\u5217\u5316\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308a\u307e\u3057\u3087\u3046\u3002\n\n```clj\nuser> (defn inc-after [n]\n        (Thread/sleep 10)\n        (inc n))\n\nuser> (bench\n       (dorun\n        (pmap inc-after (range 100))))\nmean 44.741148 ms, sd 307.708350 \u00b5s\n        \nuser> (bench\n       (dorun\n        (map inc-after (range 100))))\nmean 1.083034 sec, sd 9.887041 ms\n```\n\n9. \u30c7\u30fc\u30bf\u69cb\u9020\u306e\u7279\u6027\u3092\u628a\u63e1\u3059\u308b\n=========================\n\nClojure\u306b\u306f\u30ea\u30b9\u30c8\u3001\u30d9\u30af\u30bf\u3001\u30de\u30c3\u30d7\u306a\u3069\u3001\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u7279\u6027\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u540c\u3058\u51e6\u7406\u95a2\u6570\u3067\u3082\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3088\u3063\u3066\u8457\u3057\u304f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n```clj\nuser> (def alist (list* (range 1000)))\nuser> (def avec (vec (range 1000)))\n\nuser> (bench\n       (dotimes [_ 100000] (nth alist 999)))\nmean: 1.226256 sec, sd: 41.951728 ms\n\nuser> (bench\n       (dotimes [_ 100000] (nth avec 999)))\nmean: 248.232508 \u00b5s, sd: 42.627235 \u00b5s\n```\n\n\u307e\u305f\u3001\u540c\u3058\u6a5f\u80fd\u3092\u6301\u3064\u95a2\u6570\u3067\u3082\u8a08\u7b97\u91cf\u304c\u7570\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\uff08\u30d9\u30af\u30bf\u306b\u5bfe\u3059\u308b`last`\u3068`peek`\u306a\u3069\uff09\n\n```clj\nuser> (bench\n       (dotimes [_ 100000] (last avec)))\nmean: 2.722565 sec, sd: 245.147760 ms\n\nuser> (bench\n       (dotimes [_ 100000] (peek avec)))\nmean: 273.698907 \u00b5s, sd: 12.988158 \u00b5s\n```\n\n10. \u30de\u30c3\u30d7\u306e\u4ee3\u308f\u308a\u306b\u30ec\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\n==============================\n\n```clj\n(defrecord Point [x y z])\n```\n\n\u30ad\u30fc\u304c\u307b\u3068\u3093\u3069\u56fa\u5b9a\u306e\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ec\u30b3\u30fc\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u9ad8\u901f\u5316\u3067\u304d\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ec\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u901f\u3044\u305f\u3081\u3067\u3059\u3002\n\n```clj\nuser> (def p1 {:x 10, :y 20, :z 30})\nuser> (bench\n       (dotimes [_ 10000000] (:y p1)))\nmean: 125.331950 ms, sd: 4.828593 ms\n\nuser> (defrecord Point [x y z])\nuser> (def p2 (->Point 10 20 30))\nuser> (bench\n       (dotimes [_ 10000000] (:y p2)))\nmean: 21.582398 ms, sd: 1.148932 ms\n```\n\nJava\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\u3092\u7528\u3044\u308b\u3068\u66f4\u306b\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n```clj\nuser> (bench\n       (dotimes [_ 10000000] (.y ^Point p2)))\nmean: 5.989371 ms, sd: 285.763077 \u00b5s\n```\n\n11. \u5e73\u5766\u5316\u306e\u65b9\u6cd5\u3092\u691c\u8a0e\u3059\u308b\n========================\n\n```clj\n(apply concat nested-xs)\n```\n\n\u30cd\u30b9\u30c8\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5e73\u5766\u5316\u3059\u308b\u306b\u306f\u901a\u5e38`flatten`\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u30cd\u30b9\u30c8\u304c1\u6bb5\u968e\u306e\u5834\u5408\u306f`apply concat`\u3092\u4f7f\u3046\u3053\u3068\u3067\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\n\n```clj\nuser> (def coll [[1 2 3] [4 5 6]])\n\nuser> (bench\n       (dotimes [_ 10000]\n         (apply concat coll))) ; -> (1 2 3 4 5 6)\nmean: 1.237810 ms, sd: 18.558873 \u00b5s\n\nuser> (bench\n       (dotimes [_ 10000]\n         (flatten coll))) ; -> (1 2 3 4 5 6)\nmean: 10.459393 ms, sd: 148.369734 \u00b5s\n```\n\n\u305f\u3060\u3057\u3001\u30cd\u30b9\u30c8\u304c2\u6bb5\u968e\u4ee5\u4e0a\u3001\u3082\u3057\u304f\u306f1\u6bb5\u968e\u76ee\u306b\u30b7\u30fc\u30b1\u30f3\u30b9\u4ee5\u5916\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f`flatten`\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\uff08Clojure v1.7\u3092\u4f7f\u7528\uff09\n\n[notes-on-programming-in-c]: http://www.lysator.liu.se/c/pikestyle.html\n[criterium]: https://github.com/hugoduncan/criterium\n[leiningen]: http://leiningen.org/\n", "tags": ["Clojure"]}