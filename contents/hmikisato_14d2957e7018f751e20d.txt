{"context": "\n\nTL;DR\n\n\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u6700\u5c0f\u9650\u306b\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001\u6240\u6709\u6a29\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3068\u7121\u3044\u30c7\u30fc\u30bf\u3092\u4e00\u7dd2\u304f\u305f\u306b\u6271\u3044\u305f\u304f\u306a\u308b\n\u305d\u3093\u306a\u6642\u306f std::borrow::Cow \u304c\u4fbf\u5229\n\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u3060\u3044\u305f\u3044\nhttps://chrismorgan.info/blog/rust-fizzbuzz.html\n\u306b\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u306e\u713c\u304d\u76f4\u3057\u3067\u3059\u3002\n\n\u524d\u63d0\u74b0\u5883\n> rustup toolchain list\nnightly-x86_64-pc-windows-msvc (default)\n\n\nRust\u3067fizzbuzz\u3092\u66f8\u3044\u3066\u307f\u308b\n\u306a\u3093\u3060\u304b\u3093\u3060\u8a00\u3063\u3066\u3001fizzbuzz\u306f\u8a00\u8a9e\u3092\u66f8\u304f\u826f\u3044\u7df4\u7fd2\u306b\u306a\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3061\u3087\u3063\u3068Rust\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\u306a\u305c\u4eca\u66f4\u306b\u306a\u3063\u3066fizzbuzz\u306a\u306e\u304b\u3068\u3044\u3046\u30c4\u30c3\u30b3\u30df\u306f\u805e\u304d\u307e\u305b\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        fizzbuzz(x);\n    }\n}\n\nfn fizzbuzz(x:i32){\n    if x % 15 == 0 {\n        println!(\"{}\", \"fizzbuzz\");\n    } else if x % 3 == 0 {\n        println!(\"{}\", \"fizz\");\n    } else if x % 5 == 0 {\n        println!(\"{}\", \"buzz\");\n    } else {\n        println!(\"{}\", x.to_string())\n    }\n}\n\n\u7df4\u7fd2\u306a\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u7e70\u308a\u8fd4\u3057\u306e\u4e0a\u9650\u53d6\u3063\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n$ cargo run -- -n 20\n1\n2\nfizz\n4\nbuzz\nfizz\n7\n8\nfizz\nbuzz\n11\nfizz\n13\n14\nfizzbuzz\n16\n17\nfizz\n19\nbuzz\n\n\u3088\u3057\u3088\u3057\u3002\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u6c4e\u7528\u6027\u9ad8\u304f\n\u3055\u3059\u304c\u306bprintln!\u3059\u308b\u3060\u3051\u306e\u95a2\u6570\u3068\u3044\u3046\u306e\u306f\u7f8e\u3057\u304f\u306a\u3044\u3067\u3059\u3057\u3001fizzbuzz\u306e\u7d50\u679c\u3092\u4f7f\u3044\u56de\u305b\u306a\u3044\u306e\u3067\u3001\nfizzbuzz\u306e\u7d50\u679c\u3092\u6587\u5b57\u5217\u3067\u8fd4\u305b\u308b\u3088\u3046\u5c11\u3057\u624b\u3092\u52a0\u3048\u3066\u307f\u307e\u3059\u3002\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        println!(\"{}\", fizzbuzz(x));\n    }\n}\n\nfn fizzbuzz(x:i32) -> String {\n    if x % 15 == 0 {\n        \"fizzbuzz\".to_string()\n    } else if x % 3 == 0 {\n        \"fizz\".to_string()\n    } else if x % 5 == 0 {\n        \"buzz\".to_string()\n    } else {\n        x.to_string()\n    }\n}\n\n\u826f\u3044\u611f\u3058\u3067\u3059\u3002\n\n\u30b3\u30d4\u30fc\u3092\u6700\u5c0f\u9650\u306b\u3057\u305ffizzbuzz\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u308b\n\u4e0a\u8a18\u5b9f\u88c5\u3067\u3082\u304d\u3061\u3093\u3068\u52d5\u4f5c\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u7f8e\u3057\u304f\u306a\u3044\u3002\n\u306a\u305c\u304b\u3068\u3044\u3046\u3068\u3001\u300cfizzbuzz\u300d\u300cfizz\u300d\u300cbuzz\u300d\u306f\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u306e\u306f\u305a\u306a\u306e\u306b\u3001\u6bce\u56defizzbuzz\u95a2\u6570\u304c\u8fd4\u308a\u5024\u7528\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306b\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\u3002\n\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u306f\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3057\u3067\u8fd4\u3057\u3066\u6b32\u3057\u3044\u3002C\u3067\u3044\u3046\u306a\u3089\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u3057\u305f\u3044\u8a33\u3067\u3059\u3002\n#include <stdio.h>\n#include <stdlib.h>\n\nint digit (int x) {\n    int count = 1;\n    while ((x /= 10) != 0) {\n        count++;\n    }\n    return count;\n}\n\nchar* fizzbuzz(int x) {\n    if (x % 15 == 0) {\n        return \"fizzbuzz\";\n    } else if(x % 3 == 0) {\n        return \"fizz\";\n    } else if (x % 5 == 0) {\n        return \"buzz\";\n    } else {\n        char* buf = malloc(sizeof(char) * (digit(x) + 1));\n        sprintf(buf, \"%d\", x);\n        return buf;  /*\u3081\u3063\u3061\u3083\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u8d77\u3053\u3059\u5b9f\u88c5\u306b\u306a\u3063\u3066\u307e\u3059\u304c\u610f\u56f3\u7684\u3067\u3059*/\n    }\n}\n\nint main() {\n    /*\uff08\u521d\u671f\u5316\u7b49\u7565\uff09*/\n    int i;\n    for (i = 1; i <= n; i++) {\n        printf(\"%s\\n\", fizzbuzz(i));\n    }\n}\n\n\n\n\u30c0\u30e1\u306a\u4f8b\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3063\u3066\u304f\u308c\u307e\u305b\u3093\nfn fizzbuzz<'a> (x:i32) -> &'a str {\n    if x % 15 == 0 {\n        \"fizzbuzz\"\n    } else if x % 3 == 0 {\n        \"fizz\"\n    } else if x % 5 == 0 {\n        \"buzz\"\n    } else {\n        &*x.to_string()\n    }\n}\n\nerror: borrowed value does not live long enough\n  --> src\\main.rs:27:11\n   |\n27 |         &*x.to_string()\n   |           ^^^^^^^^^^^^^ does not live long enough\n28 |     }\n   |     - temporary value only lives until here\n   |\n   = note: borrowed value must be valid for the lifetime 'a as defined on unknown free region bounded by scope CodeExtent(154/CallSiteScope { fn_id: NodeId(64), body_id: NodeId(209) })...\n\nx.to_string() \u306e\u751f\u5b58\u671f\u9593\uff08Lifetime\uff09\u304c\u3001 else \u306e\u5916\u307e\u3067\u5230\u9054\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u53c2\u7167\u3092\u53d6\u3063\u3066\u3082\u610f\u5473\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u306d\u3002\n\n\u305d\u3082\u305d\u3082\u306e\u554f\u984c\u3068\u3057\u3066\nC\u3067\u66f8\u3044\u305f\u5b9f\u88c5\u3092\u898b\u308c\u3070\u4e00\u767a\u3067\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u300c\u5fc5\u8981\u306a\u5834\u5408\u3060\u3051\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u884c\u3046\u300d\u3068\u3044\u3046\u5b9f\u88c5\u3092\u7d20\u6734\u306b\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u306e\u30dd\u30a4\u30f3\u30bf\u5909\u6570\u304c\u4e0d\u5fc5\u8981\u306b\u306a\u3063\u305f\u6642\u306b\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u5148\u3092free\u3057\u3066\u826f\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u5225\u9014\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306eC\u5b9f\u88c5\u3092\u7d20\u6734\u306bRust\u306b\u79fb\u690d\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u3001Rust\u306e\u7406\u5ff5\u306b\u7167\u3089\u3057\u5408\u308f\u305b\u308c\u3070\u300c\u6b63\u3057\u3044\u300d\u6319\u52d5\u3067\u3059\u3002\n\u4e0a\u8a18\u306e\u554f\u984c\u3092\u8003\u616e\u3057\u305fC\u306e\u5b9f\u88c5\u306f\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct raii_char_ptr {\n    char* data;\n    char alloced;\n};\n\nint digit (int x) {\n    int count = 1;\n    while ((x /= 10) != 0) {\n        count++;\n    }\n    return count;\n}\n\nstruct raii_char_ptr* fizzbuzz(int x) {\n    struct raii_char_ptr* c = malloc(sizeof(struct raii_char_ptr));\n    if (x % 15 == 0) {\n        c->data = \"fizzbuzz\";\n        c->alloced = 0;\n    } else if(x % 3 == 0) {\n        c->data = \"fizz\";\n        c->alloced = 0;\n    } else if (x % 5 == 0) {\n        c->data = \"buzz\";\n        c->alloced = 0;\n    } else {\n        char* buf = malloc(sizeof(char) * (digit(x) + 1));\n        sprintf(buf, \"%d\", x);\n        c->data = buf;\n        c->alloced = 1;\n    }\n    return c;\n}\n\nint main() {\n    /*\uff08\u521d\u671f\u5316\u7b49\u7565\uff09*/\n    int i;\n    for (i = 1; i <= n; i++) {\n        struct raii_char_ptr* m = fizzbuzz(i);\n        printf(\"%s\\n\", m->data);\n        if (m->alloced) {\n            free(m->data);\n        }\n        free(m);\n    }\n}\n\n\u305f\u3060fizzbuzz\u3092\u3084\u308a\u305f\u304b\u3063\u305f\u3060\u3051\u306a\u306e\u306b\u9014\u7aef\u306b\u9762\u5012\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\nalloced \u306e\u7ba1\u7406\u3082\u4eba\u624b\u3067\u3084\u308b\u3068\u7d76\u5bfe\u306b\u3069\u3053\u304b\u3067\u30df\u30b9\u304c\u51fa\u305d\u3046\u3067\u3059\u306d\u3002\n\nstd::borrow::Cow \u306e\u51fa\u756a\n\u3053\u306e\u3088\u3046\u306a\u9762\u5012\u306a\u554f\u984c\u3092\u89e3\u6d88\u3059\u308b\u305f\u3081\u306b\u3001Rust\u306b\u306f std::borrow::Cow \u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u5b9a\u7fa9\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u76f4\u3057\u305ffizzbuzz\u306e\u30b3\u30fc\u30c9\u3092\u4e0b\u306b\u63d0\u793a\u3057\u307e\u3059\u3002\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\nuse std::borrow::Cow;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        println!(\"{}\", fizzbuzz(x));\n    }\n}\n\nfn fizzbuzz(x:i32) -> Cow<'static, str> {\n    if x % 15 == 0 {\n        \"fizzbuzz\".into()\n    } else if x % 3 == 0 {\n        \"fizz\".into()\n    } else if x % 5 == 0 {\n        \"buzz\".into()\n    } else {\n        x.to_string().into()\n    }\n}\n\n\u3053\u308c\u3067\u304d\u3061\u3093\u3068\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002\n\nstd::borrow::Cow \u3068\u306f\nhttps://doc.rust-lang.org/std/borrow/enum.Cow.html\n\nA clone-on-write smart pointer.\nThe type Cow is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. \n\n\u8981\u7d04\u3059\u308b\u3068\n\n\u6240\u6709\u6a29\u304c\u3042\u308b\u30c7\u30fc\u30bf\u3068\u7121\u3044\u30c7\u30fc\u30bf\u3092\u7d71\u4e00\u7684\u306b\u6271\u3048\u3066\n\u305d\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6240\u6709\u6a29\u3084\u5909\u66f4\u53ef\u80fd\u53c2\u7167\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u3001\u6240\u6709\u6a29\u304c\u306a\u3044\u5834\u5408\u306e\u307fClone\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\n\n\u3068\u3044\u3046\u3001\u8ce2\u3044\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\u307e\u3055\u306b\u4e0a\u8a18\u306eC\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066 struct raii_char_ptr \u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\uff08\u306b\u52a0\u3048\u3066\u30c7\u30fc\u30bf\u306e\u30b9\u30de\u30fc\u30c8\u306a\u30b3\u30d4\u30fc\uff09\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u5b9f\u88c5\u3067\u3059\u3002\n\u306a\u304a std::borrow::Cow \u306b\u5165\u308c\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u30c7\u30fc\u30bf\u306f ToOwned \u30c8\u30ec\u30a4\u30c8\u3092\u3001\u3072\u3044\u3066\u306f Borrow \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nstd::borrow::Cow \u3092\u4f7f\u3063\u305ffizzbuzz\u306e\u89e3\u8aac\nCow \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306f .into() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fInto\u30c8\u30ec\u30a4\u30c8\u7531\u6765\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3001Generic\u5b9f\u88c5\u306fFrom\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 From\u30c8\u30ec\u30a4\u30c8\u3067\u306f String \u3068 &'a str \u306e\u4e21\u65b9\u306b\u5bfe\u3057\u3066 Cow<'a, str> \u3078\u306e\u5909\u63db\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5168\u304f\u540c\u3058\u64cd\u4f5c\u3067 Cow \u3067\u30e9\u30c3\u30d7\u3057\u305f\u578b\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\uff08into \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u63db\u5148\u306e\u578b\u306e\u6307\u5b9a\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u6570\u306e\u8fd4\u308a\u5024\u306e\u578b\u306b\u63a8\u8ad6\u3057\u3066\u304f\u308c\u307e\u3059\uff09\n\u305d\u3057\u3066 Cow<'a, B> \u306f <'a, B> \u3078\u306e Deref\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4eca\u56de\u306f Cow<'static str> \u3092 &str \u3078 Deref\u3067\u304d\u3001\u3053\u308c\u3092\u305d\u306e\u307e\u307e println! \u30de\u30af\u30ed\u3078\u306e\u5f15\u6570\u306b\u53e9\u304d\u8fbc\u3081\u308b\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306efizzbuzz\u3067\u306fClone\u304c\u5fc5\u8981\u306a\u64cd\u4f5c\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081 Cow \u306e\u6069\u6075\u306f\u534a\u5206\u304f\u3089\u3044\u3057\u304b\u53d7\u3051\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u3060\u3051\u3067\u3082C\u3067\u66f8\u304f\u306b\u306f\u9762\u5012\u3060\u3063\u305f\u90e8\u5206\u3092\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u30e4\u30c4\u3067\u3042\u308b\u3053\u3068\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4e0d\u8981\u306a\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u6e1b\u3089\u3057\u305f\u304b\u3063\u305f\u3089 std::borrow::Cow \u3092\u691c\u8a0e\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# TL;DR\n- \u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u6700\u5c0f\u9650\u306b\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001\u6240\u6709\u6a29\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3068\u7121\u3044\u30c7\u30fc\u30bf\u3092\u4e00\u7dd2\u304f\u305f\u306b\u6271\u3044\u305f\u304f\u306a\u308b\n- \u305d\u3093\u306a\u6642\u306f `std::borrow::Cow` \u304c\u4fbf\u5229\n\n# \u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u3060\u3044\u305f\u3044\nhttps://chrismorgan.info/blog/rust-fizzbuzz.html\n\u306b\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u306e\u713c\u304d\u76f4\u3057\u3067\u3059\u3002\n\n## \u524d\u63d0\u74b0\u5883\n```\n> rustup toolchain list\nnightly-x86_64-pc-windows-msvc (default)\n```\n\n# Rust\u3067fizzbuzz\u3092\u66f8\u3044\u3066\u307f\u308b\n\u306a\u3093\u3060\u304b\u3093\u3060\u8a00\u3063\u3066\u3001fizzbuzz\u306f\u8a00\u8a9e\u3092\u66f8\u304f\u826f\u3044\u7df4\u7fd2\u306b\u306a\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3061\u3087\u3063\u3068Rust\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\u306a\u305c\u4eca\u66f4\u306b\u306a\u3063\u3066fizzbuzz\u306a\u306e\u304b\u3068\u3044\u3046\u30c4\u30c3\u30b3\u30df\u306f\u805e\u304d\u307e\u305b\u3093\u3002\n\n## \u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\n```rust\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        fizzbuzz(x);\n    }\n}\n\nfn fizzbuzz(x:i32){\n    if x % 15 == 0 {\n        println!(\"{}\", \"fizzbuzz\");\n    } else if x % 3 == 0 {\n        println!(\"{}\", \"fizz\");\n    } else if x % 5 == 0 {\n        println!(\"{}\", \"buzz\");\n    } else {\n        println!(\"{}\", x.to_string())\n    }\n}\n```\n\n\u7df4\u7fd2\u306a\u306e\u3067\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304b\u3089\u7e70\u308a\u8fd4\u3057\u306e\u4e0a\u9650\u53d6\u3063\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n\n```bash\n$ cargo run -- -n 20\n1\n2\nfizz\n4\nbuzz\nfizz\n7\n8\nfizz\nbuzz\n11\nfizz\n13\n14\nfizzbuzz\n16\n17\nfizz\n19\nbuzz\n```\n\n\u3088\u3057\u3088\u3057\u3002\n\n## \u3082\u3046\u3061\u3087\u3063\u3068\u6c4e\u7528\u6027\u9ad8\u304f\n\u3055\u3059\u304c\u306bprintln!\u3059\u308b\u3060\u3051\u306e\u95a2\u6570\u3068\u3044\u3046\u306e\u306f\u7f8e\u3057\u304f\u306a\u3044\u3067\u3059\u3057\u3001fizzbuzz\u306e\u7d50\u679c\u3092\u4f7f\u3044\u56de\u305b\u306a\u3044\u306e\u3067\u3001\nfizzbuzz\u306e\u7d50\u679c\u3092\u6587\u5b57\u5217\u3067\u8fd4\u305b\u308b\u3088\u3046\u5c11\u3057\u624b\u3092\u52a0\u3048\u3066\u307f\u307e\u3059\u3002\n\n```rust\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        println!(\"{}\", fizzbuzz(x));\n    }\n}\n\nfn fizzbuzz(x:i32) -> String {\n    if x % 15 == 0 {\n        \"fizzbuzz\".to_string()\n    } else if x % 3 == 0 {\n        \"fizz\".to_string()\n    } else if x % 5 == 0 {\n        \"buzz\".to_string()\n    } else {\n        x.to_string()\n    }\n}\n```\n\n\u826f\u3044\u611f\u3058\u3067\u3059\u3002\n\n# \u30b3\u30d4\u30fc\u3092\u6700\u5c0f\u9650\u306b\u3057\u305ffizzbuzz\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u308b\n\u4e0a\u8a18\u5b9f\u88c5\u3067\u3082\u304d\u3061\u3093\u3068\u52d5\u4f5c\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u7f8e\u3057\u304f\u306a\u3044\u3002\n\u306a\u305c\u304b\u3068\u3044\u3046\u3068\u3001\u300cfizzbuzz\u300d\u300cfizz\u300d\u300cbuzz\u300d\u306f\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u306e\u306f\u305a\u306a\u306e\u306b\u3001\u6bce\u56defizzbuzz\u95a2\u6570\u304c\u8fd4\u308a\u5024\u7528\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306b\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3057\u307e\u3046\u304b\u3089\u3067\u3059\u3002\n\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u306f\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3057\u3067\u8fd4\u3057\u3066\u6b32\u3057\u3044\u3002C\u3067\u3044\u3046\u306a\u3089\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u3057\u305f\u3044\u8a33\u3067\u3059\u3002\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint digit (int x) {\n    int count = 1;\n    while ((x /= 10) != 0) {\n        count++;\n    }\n    return count;\n}\n\nchar* fizzbuzz(int x) {\n    if (x % 15 == 0) {\n        return \"fizzbuzz\";\n    } else if(x % 3 == 0) {\n        return \"fizz\";\n    } else if (x % 5 == 0) {\n        return \"buzz\";\n    } else {\n        char* buf = malloc(sizeof(char) * (digit(x) + 1));\n        sprintf(buf, \"%d\", x);\n        return buf;  /*\u3081\u3063\u3061\u3083\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u8d77\u3053\u3059\u5b9f\u88c5\u306b\u306a\u3063\u3066\u307e\u3059\u304c\u610f\u56f3\u7684\u3067\u3059*/\n    }\n}\n\nint main() {\n    /*\uff08\u521d\u671f\u5316\u7b49\u7565\uff09*/\n    int i;\n    for (i = 1; i <= n; i++) {\n        printf(\"%s\\n\", fizzbuzz(i));\n    }\n}\n\n```\n\n## \u30c0\u30e1\u306a\u4f8b\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3063\u3066\u304f\u308c\u307e\u305b\u3093\n\n```rust\nfn fizzbuzz<'a> (x:i32) -> &'a str {\n    if x % 15 == 0 {\n        \"fizzbuzz\"\n    } else if x % 3 == 0 {\n        \"fizz\"\n    } else if x % 5 == 0 {\n        \"buzz\"\n    } else {\n        &*x.to_string()\n    }\n}\n```\n\n```\nerror: borrowed value does not live long enough\n  --> src\\main.rs:27:11\n   |\n27 |         &*x.to_string()\n   |           ^^^^^^^^^^^^^ does not live long enough\n28 |     }\n   |     - temporary value only lives until here\n   |\n   = note: borrowed value must be valid for the lifetime 'a as defined on unknown free region bounded by scope CodeExtent(154/CallSiteScope { fn_id: NodeId(64), body_id: NodeId(209) })...\n```\n\n`x.to_string()` \u306e\u751f\u5b58\u671f\u9593\uff08Lifetime\uff09\u304c\u3001 `else` \u306e\u5916\u307e\u3067\u5230\u9054\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u53c2\u7167\u3092\u53d6\u3063\u3066\u3082\u610f\u5473\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u306d\u3002\n\n## \u305d\u3082\u305d\u3082\u306e\u554f\u984c\u3068\u3057\u3066\nC\u3067\u66f8\u3044\u305f\u5b9f\u88c5\u3092\u898b\u308c\u3070\u4e00\u767a\u3067\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u300c\u5fc5\u8981\u306a\u5834\u5408\u3060\u3051\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u884c\u3046\u300d\u3068\u3044\u3046\u5b9f\u88c5\u3092\u7d20\u6734\u306b\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u306e\u30dd\u30a4\u30f3\u30bf\u5909\u6570\u304c\u4e0d\u5fc5\u8981\u306b\u306a\u3063\u305f\u6642\u306b\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u5148\u3092free\u3057\u3066\u826f\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u5225\u9014\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306eC\u5b9f\u88c5\u3092\u7d20\u6734\u306bRust\u306b\u79fb\u690d\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u3001Rust\u306e\u7406\u5ff5\u306b\u7167\u3089\u3057\u5408\u308f\u305b\u308c\u3070\u300c\u6b63\u3057\u3044\u300d\u6319\u52d5\u3067\u3059\u3002\n\n\u4e0a\u8a18\u306e\u554f\u984c\u3092\u8003\u616e\u3057\u305fC\u306e\u5b9f\u88c5\u306f\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct raii_char_ptr {\n    char* data;\n    char alloced;\n};\n\nint digit (int x) {\n    int count = 1;\n    while ((x /= 10) != 0) {\n        count++;\n    }\n    return count;\n}\n\nstruct raii_char_ptr* fizzbuzz(int x) {\n    struct raii_char_ptr* c = malloc(sizeof(struct raii_char_ptr));\n    if (x % 15 == 0) {\n        c->data = \"fizzbuzz\";\n        c->alloced = 0;\n    } else if(x % 3 == 0) {\n        c->data = \"fizz\";\n        c->alloced = 0;\n    } else if (x % 5 == 0) {\n        c->data = \"buzz\";\n        c->alloced = 0;\n    } else {\n        char* buf = malloc(sizeof(char) * (digit(x) + 1));\n        sprintf(buf, \"%d\", x);\n        c->data = buf;\n        c->alloced = 1;\n    }\n    return c;\n}\n\nint main() {\n    /*\uff08\u521d\u671f\u5316\u7b49\u7565\uff09*/\n    int i;\n    for (i = 1; i <= n; i++) {\n        struct raii_char_ptr* m = fizzbuzz(i);\n        printf(\"%s\\n\", m->data);\n        if (m->alloced) {\n            free(m->data);\n        }\n        free(m);\n    }\n}\n```\n\n\u305f\u3060fizzbuzz\u3092\u3084\u308a\u305f\u304b\u3063\u305f\u3060\u3051\u306a\u306e\u306b\u9014\u7aef\u306b\u9762\u5012\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n`alloced` \u306e\u7ba1\u7406\u3082\u4eba\u624b\u3067\u3084\u308b\u3068\u7d76\u5bfe\u306b\u3069\u3053\u304b\u3067\u30df\u30b9\u304c\u51fa\u305d\u3046\u3067\u3059\u306d\u3002\n\n## `std::borrow::Cow` \u306e\u51fa\u756a\n\u3053\u306e\u3088\u3046\u306a\u9762\u5012\u306a\u554f\u984c\u3092\u89e3\u6d88\u3059\u308b\u305f\u3081\u306b\u3001Rust\u306b\u306f `std::borrow::Cow` \u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u5b9a\u7fa9\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u76f4\u3057\u305ffizzbuzz\u306e\u30b3\u30fc\u30c9\u3092\u4e0b\u306b\u63d0\u793a\u3057\u307e\u3059\u3002\n\n```rust\nextern crate getopts;\nuse getopts::Options;\nuse std::env;\nuse std::borrow::Cow;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let mut opts = Options::new();\n    opts.reqopt(\"n\", \"num\", \"maximun count\", \"NUM\");\n    let matches = opts.parse(&args[1..])\n        .unwrap_or_else(|f| panic!(f.to_string()));\n    let num = matches.opt_str(\"n\").unwrap_or(\"0\".to_string())\n        .parse::<i32>().unwrap_or_else(|f| panic!(f.to_string()));\n    for x in 1..(num+1) {\n        println!(\"{}\", fizzbuzz(x));\n    }\n}\n\nfn fizzbuzz(x:i32) -> Cow<'static, str> {\n    if x % 15 == 0 {\n        \"fizzbuzz\".into()\n    } else if x % 3 == 0 {\n        \"fizz\".into()\n    } else if x % 5 == 0 {\n        \"buzz\".into()\n    } else {\n        x.to_string().into()\n    }\n}\n```\n\n\u3053\u308c\u3067\u304d\u3061\u3093\u3068\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002\n\n# `std::borrow::Cow` \u3068\u306f\nhttps://doc.rust-lang.org/std/borrow/enum.Cow.html\n> A clone-on-write smart pointer.\n> The type Cow is a smart pointer providing clone-on-write functionality: it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required. \n\n\u8981\u7d04\u3059\u308b\u3068\n\n- \u6240\u6709\u6a29\u304c\u3042\u308b\u30c7\u30fc\u30bf\u3068\u7121\u3044\u30c7\u30fc\u30bf\u3092\u7d71\u4e00\u7684\u306b\u6271\u3048\u3066\n- \u305d\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6240\u6709\u6a29\u3084\u5909\u66f4\u53ef\u80fd\u53c2\u7167\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u3001\u6240\u6709\u6a29\u304c\u306a\u3044\u5834\u5408\u306e\u307fClone\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\n\n\u3068\u3044\u3046\u3001\u8ce2\u3044\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\u307e\u3055\u306b\u4e0a\u8a18\u306eC\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066 `struct raii_char_ptr` \u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\uff08\u306b\u52a0\u3048\u3066\u30c7\u30fc\u30bf\u306e\u30b9\u30de\u30fc\u30c8\u306a\u30b3\u30d4\u30fc\uff09\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u5b9f\u88c5\u3067\u3059\u3002\n\u306a\u304a `std::borrow::Cow` \u306b\u5165\u308c\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u30c7\u30fc\u30bf\u306f `ToOwned` \u30c8\u30ec\u30a4\u30c8\u3092\u3001\u3072\u3044\u3066\u306f `Borrow` \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## `std::borrow::Cow` \u3092\u4f7f\u3063\u305ffizzbuzz\u306e\u89e3\u8aac\n`Cow` \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306f `.into()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fInto\u30c8\u30ec\u30a4\u30c8\u7531\u6765\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3001Generic\u5b9f\u88c5\u306fFrom\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 From\u30c8\u30ec\u30a4\u30c8\u3067\u306f `String` \u3068 `&'a str` \u306e\u4e21\u65b9\u306b\u5bfe\u3057\u3066 `Cow<'a, str>` \u3078\u306e\u5909\u63db\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5168\u304f\u540c\u3058\u64cd\u4f5c\u3067 `Cow` \u3067\u30e9\u30c3\u30d7\u3057\u305f\u578b\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\uff08`into` \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u63db\u5148\u306e\u578b\u306e\u6307\u5b9a\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u6570\u306e\u8fd4\u308a\u5024\u306e\u578b\u306b\u63a8\u8ad6\u3057\u3066\u304f\u308c\u307e\u3059\uff09\n\u305d\u3057\u3066 `Cow<'a, B>` \u306f `<'a, B>` \u3078\u306e Deref\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4eca\u56de\u306f `Cow<'static str>` \u3092 `&str` \u3078 Deref\u3067\u304d\u3001\u3053\u308c\u3092\u305d\u306e\u307e\u307e `println!` \u30de\u30af\u30ed\u3078\u306e\u5f15\u6570\u306b\u53e9\u304d\u8fbc\u3081\u308b\u306e\u3067\u3059\u3002\n\n\u4eca\u56de\u306efizzbuzz\u3067\u306fClone\u304c\u5fc5\u8981\u306a\u64cd\u4f5c\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081 `Cow` \u306e\u6069\u6075\u306f\u534a\u5206\u304f\u3089\u3044\u3057\u304b\u53d7\u3051\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u3060\u3051\u3067\u3082C\u3067\u66f8\u304f\u306b\u306f\u9762\u5012\u3060\u3063\u305f\u90e8\u5206\u3092\u96a0\u853d\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u30e4\u30c4\u3067\u3042\u308b\u3053\u3068\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u4e0d\u8981\u306a\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u3092\u6e1b\u3089\u3057\u305f\u304b\u3063\u305f\u3089 `std::borrow::Cow` \u3092\u691c\u8a0e\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n", "tags": ["rust"]}