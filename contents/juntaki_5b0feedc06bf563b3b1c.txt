{"tags": ["Linux", "kernel"], "context": "fork()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3068\u30d7\u30ed\u30bb\u30b9\u306e\u8b58\u5225\u5b50\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002@\u8a73\u89e3Linux\u30ab\u30fc\u30cd\u30eb\u8aad\u66f8\u4f1a\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306flinux\u30ab\u30fc\u30cd\u30eb\u306fv4.7-rc4\u3001glibc\u306fb6084a958\u3092\u307f\u3066\u3044\u308b\u3002\nfork()\u306e\u304a\u304a\u307e\u304b\u306a\u4ed5\u7d44\u307f\u306f\u3001current\u306etask_struct\u3092\u5143\u306b\u5b50\u30d7\u30ed\u30bb\u30b9\u306etask_struct\u3092\u4f5c\u3063\u3066\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u767b\u9332\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3060\u3002\n\n\u30d7\u30ed\u30bb\u30b9\u306b\u4ed8\u4e0e\u3055\u308c\u308bID\nID\u3068\u306f\u8a00\u3063\u3066\u3082\u3001\u3060\u3044\u305f\u3044pid_t(=int)\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u91cd\u8907\u3059\u308b\u53ef\u80fd\u6027\u304c\u7121\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u30ab\u30fc\u30cd\u30eb\u5185\u3067\u306e\u547c\u3073\u540d\u3068\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u306e\u547c\u3073\u540d\u304c\u9055\u3046\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u7d50\u69cb\u3084\u3084\u3053\u3057\u3044\u3002\n\u8868\u306f\u30ab\u30fc\u30cd\u30eb\u304b\u3089\u898b\u305fID\u3067\u307e\u3068\u3081\u305f\u3002\n\n\n\nID\n\u8aad\u307f\u65b9\n\u5b9f\u88c5\u4e0a\u306e\u610f\u5473\n\n\n\n\nPID\n\u30d7\u30ed\u30bb\u30b9ID\n\u30d7\u30ed\u30bb\u30b9\u3054\u3068\u306e\u8b58\u5225\u5b50\n\n\nTGID\n\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7ID\n\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u306fPID\u3068\u540c\u4e00\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u306bgetpid()\u3067\u5e30\u3063\u3066\u304f\u308b\u306e\u306f\u306a\u305c\u304b\u3053\u3063\u3061\u3002\n\n\nPGID\n\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7ID\n\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u304c\u6301\u3063\u3066\u3044\u308bPGID\u3092\u7d99\u627f\n\n\nSID\n\u30bb\u30c3\u30b7\u30e7\u30f3ID\n\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u304c\u6301\u3063\u3066\u3044\u308bSID\u3092\u7d99\u627f\n\n\nTID\n\u30b9\u30ec\u30c3\u30c9ID\ngettid\u3067\u53d6\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u3082\u306e\uff08\u5b9f\u306fPID) or \u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3001\u3084\u3084\u3053\u3057\u3044\n\n\n\nPID\u3068TGID\u306f\u3001\u3053\u3053\u306e\u56f3\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u5f15\u7528\u3059\u308b\u3002\nhttp://stackoverflow.com/questions/9305992/linux-threads-and-process\n                      USER VIEW\n <-- PID 43 --> <----------------- PID 42 ----------------->\n                     +---------+\n                     | process |\n                    _| pid=42  |_\n                  _/ | tgid=42 | \\_ (new thread) _\n       _ (fork) _/   +---------+                  \\\n      /                                        +---------+\n+---------+                                    | process |\n| process |                                    | pid=44  |\n| pid=43  |                                    | tgid=42 |\n| tgid=43 |                                    +---------+\n+---------+\n <-- PID 43 --> <--------- PID 42 --------> <--- PID 44 --->\n                     KERNEL VIEW\n\n_do_fork()\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002CLONE_THREAD\u306e\u5834\u5408\u306f\u3001TGID\u306b\u30b3\u30d4\u30fc\u5143\u306etgid\u3092\u30b3\u30d4\u30fc\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fpid\u3068\u540c\u3058\u3082\u306e\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002fork()\u306f\u5f8c\u8005\u3067\u3042\u308b\u3002\ngroup_leader\u3082task_struct\u304c\u5165\u308b\u3060\u3051\u3067\u4f1d\u308f\u308a\u65b9\u306f\u307b\u307c\u540c\u3058\u3060\u3002\n  /* ok, now we should be set up.. */\n  p->pid = pid_nr(pid);\n  if (clone_flags & CLONE_THREAD) {\n    p->exit_signal = -1;\n    p->group_leader = current->group_leader;\n    p->tgid = current->tgid;\n  } else {\n    if (clone_flags & CLONE_PARENT)\n      p->exit_signal = current->group_leader->exit_signal;\n    else\n      p->exit_signal = (clone_flags & CSIGNAL);\n    p->group_leader = p;\n    p->tgid = p->pid;\n  }\n\nPGID,SID\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n  if (likely(p->pid)) {\n    ptrace_init_task(p, (clone_flags & CLONE_PTRACE) || trace);\n\n    init_task_pid(p, PIDTYPE_PID, pid);\n    if (thread_group_leader(p)) {\n      init_task_pid(p, PIDTYPE_PGID, task_pgrp(current));\n      init_task_pid(p, PIDTYPE_SID, task_session(current));\n\n\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u6c7a\u3081\u305fTID\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n  p->set_child_tid = (clone_flags & CLONE_CHILD_SETTID) ? child_tidptr : NULL;\n  /*\n   * Clear TID on mm_release()?\n   */\n  p->clear_child_tid = (clone_flags & CLONE_CHILD_CLEARTID) ? child_tidptr : NULL;\n\n\n\u5b9f\u306ffork()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u305d\u306e\u3082\u306e\u306f\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\nfork()\u306fglibc\u3067\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u3066\u3001clone()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\njuntaki@ubuntu% cat forktest\nls; ls;\njuntaki@ubuntu% strace -f bash forktest 2>&1 | grep \"fork(\"\njuntaki@ubuntu% strace -f bash forktest 2>&1 | grep \"clone(\"\nclone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f154401a9d0) = 26811\nclone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f154401a9d0) = 26812\n\n\nglibc\u5b9f\u88c5\u3068\u30ab\u30fc\u30cd\u30eb\u306efork()\nglibc\u306ex86\u306e\u5b9f\u88c5\u3067\u306f\u3001CLONE_CHILD_SETTID | CLONE_CHILD_CLEARTID | SIGCHLD\u304cclone_flag\u306b\u5165\u308b\u3002\u30d5\u30e9\u30b0\u306e\u610f\u5473\u306fman clone\u306b\u3042\u308b\u3002\n#define ARCH_FORK() \\\n  INLINE_SYSCALL (clone, 4,                                                   \\\n                  CLONE_CHILD_SETTID | CLONE_CHILD_CLEARTID | SIGCHLD, 0,     \\\n                  NULL, &THREAD_SELF->tid)\n\nLinux\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u3001\u30d5\u30e9\u30b0\u306fSIGCHLD\u3060\u3051\u3002\n#ifdef __ARCH_WANT_SYS_FORK\nSYSCALL_DEFINE0(fork)\n{\n#ifdef CONFIG_MMU\n  return _do_fork(SIGCHLD, 0, 0, NULL, NULL, 0);\n#else\n  /* can not support in nommu mode */\n  return -EINVAL;\n#endif\n}\n#endif\n\n`fork()`\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3068\u30d7\u30ed\u30bb\u30b9\u306e\u8b58\u5225\u5b50\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002@[\u8a73\u89e3Linux\u30ab\u30fc\u30cd\u30eb\u8aad\u66f8\u4f1a](https://kernelreading.doorkeeper.jp/events/44499)\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306flinux\u30ab\u30fc\u30cd\u30eb\u306fv4.7-rc4\u3001glibc\u306fb6084a958\u3092\u307f\u3066\u3044\u308b\u3002\n\n`fork()`\u306e\u304a\u304a\u307e\u304b\u306a\u4ed5\u7d44\u307f\u306f\u3001current\u306e`task_struct`\u3092\u5143\u306b\u5b50\u30d7\u30ed\u30bb\u30b9\u306e`task_struct`\u3092\u4f5c\u3063\u3066\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u767b\u9332\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3060\u3002\n\n## \u30d7\u30ed\u30bb\u30b9\u306b\u4ed8\u4e0e\u3055\u308c\u308bID\n\nID\u3068\u306f\u8a00\u3063\u3066\u3082\u3001\u3060\u3044\u305f\u3044`pid_t`(=`int`)\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u91cd\u8907\u3059\u308b\u53ef\u80fd\u6027\u304c\u7121\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u30ab\u30fc\u30cd\u30eb\u5185\u3067\u306e\u547c\u3073\u540d\u3068\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u306e\u547c\u3073\u540d\u304c\u9055\u3046\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u7d50\u69cb\u3084\u3084\u3053\u3057\u3044\u3002\n\u8868\u306f\u30ab\u30fc\u30cd\u30eb\u304b\u3089\u898b\u305fID\u3067\u307e\u3068\u3081\u305f\u3002\n\n|ID|\u8aad\u307f\u65b9|\u5b9f\u88c5\u4e0a\u306e\u610f\u5473|\n|---|---|---|\n|PID|\u30d7\u30ed\u30bb\u30b9ID|\u30d7\u30ed\u30bb\u30b9\u3054\u3068\u306e\u8b58\u5225\u5b50|\n|TGID|\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7ID|\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u5834\u5408\u306fPID\u3068\u540c\u4e00\u3001\u30e6\u30fc\u30b6\u7a7a\u9593\u306bgetpid()\u3067\u5e30\u3063\u3066\u304f\u308b\u306e\u306f\u306a\u305c\u304b\u3053\u3063\u3061\u3002|\n|PGID|\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7ID|\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u304c\u6301\u3063\u3066\u3044\u308bPGID\u3092\u7d99\u627f|\n|SID|\u30bb\u30c3\u30b7\u30e7\u30f3ID|\u30b0\u30eb\u30fc\u30d7\u30ea\u30fc\u30c0\u304c\u6301\u3063\u3066\u3044\u308bSID\u3092\u7d99\u627f|\n|TID|\u30b9\u30ec\u30c3\u30c9ID|gettid\u3067\u53d6\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u3082\u306e\uff08\u5b9f\u306fPID) or \u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3001\u3084\u3084\u3053\u3057\u3044|\n\nPID\u3068TGID\u306f\u3001\u3053\u3053\u306e\u56f3\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u5f15\u7528\u3059\u308b\u3002\nhttp://stackoverflow.com/questions/9305992/linux-threads-and-process\n\n~~~\n                      USER VIEW\n <-- PID 43 --> <----------------- PID 42 ----------------->\n                     +---------+\n                     | process |\n                    _| pid=42  |_\n                  _/ | tgid=42 | \\_ (new thread) _\n       _ (fork) _/   +---------+                  \\\n      /                                        +---------+\n+---------+                                    | process |\n| process |                                    | pid=44  |\n| pid=43  |                                    | tgid=42 |\n| tgid=43 |                                    +---------+\n+---------+\n <-- PID 43 --> <--------- PID 42 --------> <--- PID 44 --->\n                     KERNEL VIEW\n~~~\n\n`_do_fork()`\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002`CLONE_THREAD`\u306e\u5834\u5408\u306f\u3001TGID\u306b\u30b3\u30d4\u30fc\u5143\u306etgid\u3092\u30b3\u30d4\u30fc\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fpid\u3068\u540c\u3058\u3082\u306e\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002fork()\u306f\u5f8c\u8005\u3067\u3042\u308b\u3002\n`group_leader`\u3082`task_struct`\u304c\u5165\u308b\u3060\u3051\u3067\u4f1d\u308f\u308a\u65b9\u306f\u307b\u307c\u540c\u3058\u3060\u3002\n\n~~~c\n  /* ok, now we should be set up.. */\n  p->pid = pid_nr(pid);\n  if (clone_flags & CLONE_THREAD) {\n    p->exit_signal = -1;\n    p->group_leader = current->group_leader;\n    p->tgid = current->tgid;\n  } else {\n    if (clone_flags & CLONE_PARENT)\n      p->exit_signal = current->group_leader->exit_signal;\n    else\n      p->exit_signal = (clone_flags & CSIGNAL);\n    p->group_leader = p;\n    p->tgid = p->pid;\n  }\n~~~\n\nPGID,SID\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n\n~~~c\n  if (likely(p->pid)) {\n    ptrace_init_task(p, (clone_flags & CLONE_PTRACE) || trace);\n\n    init_task_pid(p, PIDTYPE_PID, pid);\n    if (thread_group_leader(p)) {\n      init_task_pid(p, PIDTYPE_PGID, task_pgrp(current));\n      init_task_pid(p, PIDTYPE_SID, task_session(current));\n~~~\n\n\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u6c7a\u3081\u305fTID\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n\n~~~c\n  p->set_child_tid = (clone_flags & CLONE_CHILD_SETTID) ? child_tidptr : NULL;\n  /*\n   * Clear TID on mm_release()?\n   */\n  p->clear_child_tid = (clone_flags & CLONE_CHILD_CLEARTID) ? child_tidptr : NULL;\n~~~\n\n## \u5b9f\u306ffork()\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u305d\u306e\u3082\u306e\u306f\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\n\n`fork()`\u306fglibc\u3067\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u3066\u3001`clone()`\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\n~~~\njuntaki@ubuntu% cat forktest\nls; ls;\njuntaki@ubuntu% strace -f bash forktest 2>&1 | grep \"fork(\"\njuntaki@ubuntu% strace -f bash forktest 2>&1 | grep \"clone(\"\nclone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f154401a9d0) = 26811\nclone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f154401a9d0) = 26812\n~~~\n\n### glibc\u5b9f\u88c5\u3068\u30ab\u30fc\u30cd\u30eb\u306efork()\n\nglibc\u306ex86\u306e\u5b9f\u88c5\u3067\u306f\u3001`CLONE_CHILD_SETTID | CLONE_CHILD_CLEARTID | SIGCHLD`\u304c`clone_flag`\u306b\u5165\u308b\u3002\u30d5\u30e9\u30b0\u306e\u610f\u5473\u306f`man clone`\u306b\u3042\u308b\u3002\n\n\n~~~c\n#define ARCH_FORK() \\\n  INLINE_SYSCALL (clone, 4,                                                   \\\n                  CLONE_CHILD_SETTID | CLONE_CHILD_CLEARTID | SIGCHLD, 0,     \\\n                  NULL, &THREAD_SELF->tid)\n~~~\n\nLinux\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u3001\u30d5\u30e9\u30b0\u306fSIGCHLD\u3060\u3051\u3002\n\n~~~c\n#ifdef __ARCH_WANT_SYS_FORK\nSYSCALL_DEFINE0(fork)\n{\n#ifdef CONFIG_MMU\n  return _do_fork(SIGCHLD, 0, 0, NULL, NULL, 0);\n#else\n  /* can not support in nommu mode */\n  return -EINVAL;\n#endif\n}\n#endif\n~~~\n\n\n"}