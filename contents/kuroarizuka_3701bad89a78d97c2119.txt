{"context": "Anko\u306f\u3001XML\u306b\u6163\u308c\u305f\u4eba\u306b\u3082\u9055\u548c\u611f\u306a\u304f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u4eca\u307e\u3067XML\u3067\u66f8\u3044\u3066\u3044\u305f\u3082\u306e\u3092Anko\u3067\u306f\u3069\u3046\u66f8\u304f\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u9014\u4e2d\u3067Anko\u306e\u5b9f\u88c5\u306b\u89e6\u308c\u305f\u90e8\u5206\u304c\u5c11\u3057\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u8efd\u3044\u8aac\u660e\u3067\u52d8\u5f01\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nView\u306e\u8ffd\u52a0\n\nAnko\nverticalLayout {\n    textView {\n        text = \"Hello, Anko!\"\n    }\n}\n\n\n{ } \u306e\u4e2d\u306b\u5165\u308c\u5b50\u306b\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u3067View\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nXML\u3068\u307b\u307c\u5909\u308f\u3089\u306a\u3044\u611f\u899a\u3067\u66f8\u3051\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\naddView\u3092\u547c\u3076\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3061\u306a\u307f\u306b\u3001verticalLayout\u306forientation\u306bvertical\u3092\u6307\u5b9a\u3057\u305fLinearLayout\u3067\u3059\u3002\n\u3053\u306everticalLayout\u306e\u6b63\u4f53\u306fActivity\u306e\u62e1\u5f35\u95a2\u6570\u3067\u3059\u3002\n\nCustomViews.kt\ninline fun Activity.verticalLayout(): LinearLayout = verticalLayout({})\ninline fun Activity.verticalLayout(init: _LinearLayout.() -> Unit): LinearLayout {\n    return ankoView(`$$Anko$Factories$CustomViews`.VERTICAL_LAYOUT_FACTORY, init)\n}\n\n\n\nCustom.kt\ninline fun <T : View> Activity.ankoView(factory: (ctx: Context) -> T, init: T.() -> Unit): T {\n    val view = factory(this)\n    view.init()\n    AnkoInternals.addView(this, view)\n    return view\n}\n\n\n\n\u5c11\u3005\u5206\u304b\u308a\u3065\u3089\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n1. vertical\u306aLinearLayout\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\n2. \u521d\u671f\u5316\u3092\u884c\u3044\n3. addView()\u3059\u308b\n\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nUI\u306e\u521d\u671f\u5316\u306b\u4f7f\u308f\u308c\u308b\u306e\u304c\u30ab\u30c3\u30b3\u306e\u4e2d\u8eab\u306e\u90e8\u5206\u3067\u3059\u3002\n\nAnko\nverticalLayout {\n    // \u3053\u3053\u306e\u4e2d\u8eab\u304c\u521d\u671f\u5316\u6642\u306b\u547c\u3070\u308c\u308b\n    textView {\n        text = \"Hello, Anko!\"\n    }\n}\n\n\n\u521d\u671f\u5316\u95a2\u6570\u3092\u30ab\u30c3\u30b3\u306e\u4e2d\u8eab\u306b\u3057\u3066\u6e21\u3059\u90e8\u5206\u306f\u3001\u62e1\u5f35\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u3068\u3044\u3046Kotlin\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\njetBrains/anko\u89e6\u3063\u3066\u305f\u3089\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u5b9f\u88c5\u3092\u898b\u305f\u306e\u3067\u8abf\u3079\u305f\u3089Kotlin\u3067\u5f15\u6570\u306b\u62e1\u5f35\u95a2\u6570\u3092\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u308c\u308b\u4e8b\u304c\u308f\u304b\u3063\u305f\n\n\u5c5e\u6027\u306e\u5b9a\u7fa9\n\nXML\n<TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is XML layout.\"\n        android:background=\"@color/black\"\n        android:textColor=\"@color/white\"\n        />\n\n\n\nAnko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n}\n\n\nAnko DSL\u3067\u306f\u8272\u306e\u6307\u5b9a\u6642\u306bColor\u306e\u5b9a\u6570\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001XML\u306e\u3088\u3046\u306a\u540d\u524d\u7a7a\u9593\u306e\u6307\u5b9a\u306f\u4e0d\u8981\u3067\u3059\u3002\ntext = \"Hello, Anko\"\u306e\u90e8\u5206\u306fsetter\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u306a\u3063\u3066\u304a\u308a\u3001setText()\u3057\u3066\u3044\u307e\u3059\u3002\ntextColor = Color.WHITE\u306e\u90e8\u5206\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u306fsetTextColor()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u4ee3\u5165\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\nProperties.kt\nvar android.widget.TextView.textColor: Int\n    get() = throw AnkoException(\"'android.widget.TextView.textColor' property does not have a getter\")\n    set(v) = setTextColor(v)\n\n\n\n\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0\n\nAnko\nbutton(\"Show Toast\") {\n    onClick { toast(\"Click!\") }\n}\n\n\n\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc\u306e\u8a2d\u5b9a\u3082View\u306e\u8ffd\u52a0\u3068\u540c\u3058\u3088\u3046\u306a\u8868\u8a18\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068onClick\u6642\u306bToast\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u3061\u3089\u3082\u62e1\u5f35\u95a2\u6570\u3067\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001\u5b9f\u969b\u306b\u306fsetOnClickListener()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\nListeners.kt\nfun android.view.View.onClick(l: (v: android.view.View?) -> Unit) {\n    setOnClickListener(l)\n}\n\n\n\nLayoutParams\n\nXML\n<TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is XML layout.\"\n        android:background=\"@color/black\"\n        android:textColor=\"@color/white\"\n        android:layout_marginTop=\"16dip\"\n        />\n\n\n\nAnko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n    lparams {\n        topMargin = dip(16)\n    }\n}\n\n\nmargin\u306a\u3069\u306eLayoutParams\u306b\u5c5e\u3059\u308b\u3082\u306e\u306f lparams {} \u306e\u4e2d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\ndip\u306e\u6307\u5b9a\u306fdip(16)\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aContext\u306e\u62e1\u5f35\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u6f54\u306a\u8868\u73fe\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nDimensions.kt\nfun Context.dip(value: Int): Int = (value * resources.displayMetrics.density).toInt()\n\n\n\u5148\u307b\u3069\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u540c\u3058\u3082\u306e\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nAnko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n}.lparams {\n    topMargin = dip(16)\n}\n\n\n\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u3061\u3089\u306e\u8868\u8a18\u306e\u65b9\u304c\u666e\u901a\u306e\u3088\u3046\u3067\u3059\u3002\n\nXML\u306einclude\n\u65e2\u5b58\u306eXML\u3092Anko\u306e\u4e2d\u306binclude\u3059\u308b\u306b\u306f\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\nAnko\ninclude<RelativeLayout>(R.layout.xml_layout) {\n\n}\n\n\n\u3053\u308c\u3082\u3084\u3063\u3071\u308a\u6b63\u4f53\u306f\u62e1\u5f35\u95a2\u6570\u3067\u3059\u3002\n\nCutomViews.kt\ninline fun <T: View> ViewManager.include(layoutId: Int): T = include(layoutId, {})\ninline fun <T: View> ViewManager.include(layoutId: Int, init: T.() -> Unit): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return ankoView({ ctx -> ctx.layoutInflater.inflate(layoutId, null) as T }) { init() }\n}\n\n\n\nctx\u306fContext\u3067\u3059\u3002\u666e\u901a\u306bXML\u3092inflate\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\n\u76f8\u5bfe\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u6307\u5b9a\u3059\u308b\nRelativeLayout\u306e\u4e2d\u3067\u3001\u4ed6\u306eView\u3068\u306e\u76f8\u5bfe\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306b\u306frightOf()\u306a\u3069\u306e ~~Of()\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nAnko\nclass MainActivityUi() : AnkoComponent<MainActivity> {\n\n    override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n\n        relativeLayout {\n\n            val xmlLayout = include<RelativeLayout>(R.layout.xml_layout) {\n\n            }\n\n            textView {\n                text = \"Hello, Anko!\"\n                backgroundColor = Color.BLACK\n                textColor = Color.WHITE\n            }.lparams {\n                topMargin = dip(16)\n                rightOf(xmlLayout)\n                alignParentRight()\n            }\n        }\n    }\n}\n\n\nid\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306b\u306fView.generateViewId()\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u52d5\u7684\u306b\u4e00\u610f\u306eid\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nAnko\nclass MainActivityUi() : AnkoComponent<MainActivity> {\n\n    val xmlLayoutId = View.generateViewId()\n    var xmlLayout : RelativeLayout? = null\n\n    override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n\n        relativeLayout {\n\n            xmlLayout = include<RelativeLayout>(R.layout.xml_layout) {\n                id = xmlLayoutId\n            }\n\n            textView {\n                text = \"Hello, Anko!\"\n                backgroundColor = Color.BLACK\n                textColor = Color.WHITE\n            }.lparams {\n                topMargin = dip(16)\n                rightOf(xmlLayoutId)\n                alignParentRight()\n            }\n        }\n    }\n}\n\n\nid\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306f\u3000ids.xml\u306bid\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\n\u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u3092\u4f7f\u7528\u3059\u308b\n\u81ea\u4f5c\u3057\u305fView\u3082\u4e0b\u306e2\u884c\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3001Anko DLS\u306e\u4e2d\u306b\u81ea\u7136\u306b\u6df7\u305c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ninline fun ViewManager.customView() = customView() {}\ninline fun ViewManager.customView(init: CustomView.() -> Unit) = ankoView({ CustomView(it) }, init)\n\n\nAnko\nverticalLayout {\n    customView {\n        textColor = Color.RED\n    }\n}\n\n\n\u4e0a\u8a18\u306f0.8.3\u307e\u3067\u306e\u65b9\u6cd5\u3067\u30010.9\u304b\u3089\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\ninline fun ViewManager.customView(theme: Int = 0) = customView(theme) {}\ninline fun ViewManager.customView(theme: Int = 0, init: CustomView.() -> Unit) = ankoView({ CustomView(it) }, theme, init)\n\n\nFragment\u3092\u8ffd\u52a0\u3059\u308b\nXML\u3067\u306e<fragment>\u30bf\u30b0\u306e\u3088\u3046\u306bAnko\u306e\u4e2d\u3067Fragment\u3092\u8ffd\u52a0\u3057\u305f\u3044\u3068\u304d\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\u53c2\u8003: <fragment> tag equivalent in anko DSL\n\nAnko\nsupportFragmentManager.beginTransaction().add(this.id,com.myapp.MyFragment()).commit()\n\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3067\u3084\u3063\u305f\u3068\u3053\u308dPreview\u304c\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nAnko\u306e\u4e2d\u306b\u76f4\u63a5\u66f8\u304b\u305a\u306b\u3001id\u3092\u6307\u5b9a\u3057\u305fView\u306b\u5bfe\u3057\u3066\u5916\u304b\u3089add\u3057\u305f\u3068\u304d\u306b\u306fPreview\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val ui = MainActivityUi()\n        ui.setContentView(this)\n\n        supportFragmentManager.beginTransaction().add(ui.framgentId, com.myapp.MyFragment()).commit()\n    }\n}\n\n\nXML\u3067\u306f\u3067\u304d\u306a\u3044\u3053\u3068\n\n\u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u307e\u3057\u305f\u3088\u3046\u306bAnko\u3067\u306fKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306e\u6a5f\u80fd\u3092\u751f\u304b\u3057\u3066\u7c21\u6f54\u306a\u8868\u8a18\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u81ea\u5206\u305f\u3061\u3067\u8ffd\u52a0\u3057\u305f\u62e1\u5f35\u95a2\u6570\u3082\u540c\u3058\u3088\u3046\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306fPicasso\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u3059\u308b\u4f8b\u3067\u3059\u3002\nfun ImageView.loadImage(context: Context, imageUrl: String, error: Int) {\n    Picasso.with(context).load(imageUrl).error(error).into(this)\n}\n\nimageView = imageView {\n    loadImage(ctx, \"\u753b\u50cf\u306eURL\", R.drawable.error)\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u6c17\u8efd\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3053\u3068\u304c Anko DSL = Kotlin\u306e\u30b3\u30fc\u30c9\u3067\u66f8\u304f\u3053\u3068\u306e\u30e1\u30ea\u30c3\u30c8\u306e\u4e00\u3064\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6b21\u306e\u8a18\u4e8b\u306fListView\u3067\u306e\u4f7f\u7528\u4f8b\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nAnko\u306f\u3001XML\u306b\u6163\u308c\u305f\u4eba\u306b\u3082\u9055\u548c\u611f\u306a\u304f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u4eca\u307e\u3067XML\u3067\u66f8\u3044\u3066\u3044\u305f\u3082\u306e\u3092Anko\u3067\u306f\u3069\u3046\u66f8\u304f\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u9014\u4e2d\u3067Anko\u306e\u5b9f\u88c5\u306b\u89e6\u308c\u305f\u90e8\u5206\u304c\u5c11\u3057\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u8efd\u3044\u8aac\u660e\u3067\u52d8\u5f01\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# View\u306e\u8ffd\u52a0\n```kotlin:Anko\nverticalLayout {\n    textView {\n        text = \"Hello, Anko!\"\n    }\n}\n```\n\n{ } \u306e\u4e2d\u306b\u5165\u308c\u5b50\u306b\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u3067View\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nXML\u3068\u307b\u307c\u5909\u308f\u3089\u306a\u3044\u611f\u899a\u3067\u66f8\u3051\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\naddView\u3092\u547c\u3076\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3061\u306a\u307f\u306b\u3001verticalLayout\u306forientation\u306bvertical\u3092\u6307\u5b9a\u3057\u305fLinearLayout\u3067\u3059\u3002\n\n\u3053\u306everticalLayout\u306e\u6b63\u4f53\u306fActivity\u306e\u62e1\u5f35\u95a2\u6570\u3067\u3059\u3002\n\n```kotlin:CustomViews.kt\ninline fun Activity.verticalLayout(): LinearLayout = verticalLayout({})\ninline fun Activity.verticalLayout(init: _LinearLayout.() -> Unit): LinearLayout {\n    return ankoView(`$$Anko$Factories$CustomViews`.VERTICAL_LAYOUT_FACTORY, init)\n}\n```\n\n```kotlin:Custom.kt\ninline fun <T : View> Activity.ankoView(factory: (ctx: Context) -> T, init: T.() -> Unit): T {\n    val view = factory(this)\n    view.init()\n    AnkoInternals.addView(this, view)\n    return view\n}\n\n```\n\n\u5c11\u3005\u5206\u304b\u308a\u3065\u3089\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n1. vertical\u306aLinearLayout\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\n2. \u521d\u671f\u5316\u3092\u884c\u3044\n3. addView()\u3059\u308b\n\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nUI\u306e\u521d\u671f\u5316\u306b\u4f7f\u308f\u308c\u308b\u306e\u304c\u30ab\u30c3\u30b3\u306e\u4e2d\u8eab\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin:Anko\nverticalLayout {\n    // \u3053\u3053\u306e\u4e2d\u8eab\u304c\u521d\u671f\u5316\u6642\u306b\u547c\u3070\u308c\u308b\n    textView {\n        text = \"Hello, Anko!\"\n    }\n}\n```\n\n\u521d\u671f\u5316\u95a2\u6570\u3092\u30ab\u30c3\u30b3\u306e\u4e2d\u8eab\u306b\u3057\u3066\u6e21\u3059\u90e8\u5206\u306f\u3001\u62e1\u5f35\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308c\u308b\u3068\u3044\u3046Kotlin\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n[jetBrains/anko\u89e6\u3063\u3066\u305f\u3089\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u5b9f\u88c5\u3092\u898b\u305f\u306e\u3067\u8abf\u3079\u305f\u3089Kotlin\u3067\u5f15\u6570\u306b\u62e1\u5f35\u95a2\u6570\u3092\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u308c\u308b\u4e8b\u304c\u308f\u304b\u3063\u305f](http://sys1yagi.hatenablog.com/entry/2015/04/10/174557)\n\n# \u5c5e\u6027\u306e\u5b9a\u7fa9\n\n```XML:XML\n<TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is XML layout.\"\n        android:background=\"@color/black\"\n        android:textColor=\"@color/white\"\n        />\n```\n\n```kotlin:Anko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n}\n```\n\nAnko DSL\u3067\u306f\u8272\u306e\u6307\u5b9a\u6642\u306bColor\u306e\u5b9a\u6570\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001XML\u306e\u3088\u3046\u306a\u540d\u524d\u7a7a\u9593\u306e\u6307\u5b9a\u306f\u4e0d\u8981\u3067\u3059\u3002\n\n`text = \"Hello, Anko\"`\u306e\u90e8\u5206\u306fsetter\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u306a\u3063\u3066\u304a\u308a\u3001setText()\u3057\u3066\u3044\u307e\u3059\u3002\n\n`textColor = Color.WHITE`\u306e\u90e8\u5206\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u306fsetTextColor()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u4ee3\u5165\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n```kotlin:Properties.kt\nvar android.widget.TextView.textColor: Int\n    get() = throw AnkoException(\"'android.widget.TextView.textColor' property does not have a getter\")\n    set(v) = setTextColor(v)\n```\n\n# \u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0\n\n```kotlin:Anko\nbutton(\"Show Toast\") {\n    onClick { toast(\"Click!\") }\n}\n```\n\n\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc\u306e\u8a2d\u5b9a\u3082View\u306e\u8ffd\u52a0\u3068\u540c\u3058\u3088\u3046\u306a\u8868\u8a18\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068onClick\u6642\u306bToast\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u3061\u3089\u3082\u62e1\u5f35\u95a2\u6570\u3067\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001\u5b9f\u969b\u306b\u306fsetOnClickListener()\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n```kotlin:Listeners.kt\nfun android.view.View.onClick(l: (v: android.view.View?) -> Unit) {\n    setOnClickListener(l)\n}\n```\n\n# LayoutParams\n\n```XML:XML\n<TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"This is XML layout.\"\n        android:background=\"@color/black\"\n        android:textColor=\"@color/white\"\n        android:layout_marginTop=\"16dip\"\n        />\n```\n```kotlin:Anko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n    lparams {\n        topMargin = dip(16)\n    }\n}\n```\n\nmargin\u306a\u3069\u306eLayoutParams\u306b\u5c5e\u3059\u308b\u3082\u306e\u306f lparams {} \u306e\u4e2d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\ndip\u306e\u6307\u5b9a\u306fdip(16)\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aContext\u306e\u62e1\u5f35\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u6f54\u306a\u8868\u73fe\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:Dimensions.kt\nfun Context.dip(value: Int): Int = (value * resources.displayMetrics.density).toInt()\n```\n\n\u5148\u307b\u3069\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u540c\u3058\u3082\u306e\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```kotlin:Anko\ntextView {\n    text = \"Hello, Anko!\"\n    backgroundColor = Color.BLACK\n    textColor = Color.WHITE\n}.lparams {\n    topMargin = dip(16)\n}\n```\n\n\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u3061\u3089\u306e\u8868\u8a18\u306e\u65b9\u304c\u666e\u901a\u306e\u3088\u3046\u3067\u3059\u3002\n\n# XML\u306einclude\n\n\u65e2\u5b58\u306eXML\u3092Anko\u306e\u4e2d\u306binclude\u3059\u308b\u306b\u306f\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```kotlin:Anko\ninclude<RelativeLayout>(R.layout.xml_layout) {\n                \n}\n```\n\n\u3053\u308c\u3082\u3084\u3063\u3071\u308a\u6b63\u4f53\u306f\u62e1\u5f35\u95a2\u6570\u3067\u3059\u3002\n\n```kotlin:CutomViews.kt\ninline fun <T: View> ViewManager.include(layoutId: Int): T = include(layoutId, {})\ninline fun <T: View> ViewManager.include(layoutId: Int, init: T.() -> Unit): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return ankoView({ ctx -> ctx.layoutInflater.inflate(layoutId, null) as T }) { init() }\n}\n\n```\n\nctx\u306fContext\u3067\u3059\u3002\u666e\u901a\u306bXML\u3092inflate\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\n# \u76f8\u5bfe\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u6307\u5b9a\u3059\u308b\n\nRelativeLayout\u306e\u4e2d\u3067\u3001\u4ed6\u306eView\u3068\u306e\u76f8\u5bfe\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306b\u306frightOf()\u306a\u3069\u306e ~~Of()\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```kotlin:Anko\nclass MainActivityUi() : AnkoComponent<MainActivity> {\n\n    override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n\n        relativeLayout {\n\n            val xmlLayout = include<RelativeLayout>(R.layout.xml_layout) {\n\n            }\n\n            textView {\n                text = \"Hello, Anko!\"\n                backgroundColor = Color.BLACK\n                textColor = Color.WHITE\n            }.lparams {\n                topMargin = dip(16)\n                rightOf(xmlLayout)\n                alignParentRight()\n            }\n        }\n    }\n}\n```\n\nid\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306b\u306fView.generateViewId()\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u52d5\u7684\u306b\u4e00\u610f\u306eid\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```kotlin:Anko\nclass MainActivityUi() : AnkoComponent<MainActivity> {\n\n    val xmlLayoutId = View.generateViewId()\n    var xmlLayout : RelativeLayout? = null\n\n    override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n\n        relativeLayout {\n\n            xmlLayout = include<RelativeLayout>(R.layout.xml_layout) {\n                id = xmlLayoutId\n            }\n\n            textView {\n                text = \"Hello, Anko!\"\n                backgroundColor = Color.BLACK\n                textColor = Color.WHITE\n            }.lparams {\n                topMargin = dip(16)\n                rightOf(xmlLayoutId)\n                alignParentRight()\n            }\n        }\n    }\n}\n```\n\nid\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306f\u3000ids.xml\u306bid\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\n# \u30ab\u30b9\u30bf\u30e0\u30d3\u30e5\u30fc\u3092\u4f7f\u7528\u3059\u308b\n\n\u81ea\u4f5c\u3057\u305fView\u3082\u4e0b\u306e2\u884c\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3001Anko DLS\u306e\u4e2d\u306b\u81ea\u7136\u306b\u6df7\u305c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```kotlin\ninline fun ViewManager.customView() = customView() {}\ninline fun ViewManager.customView(init: CustomView.() -> Unit) = ankoView({ CustomView(it) }, init)\n```\n\n```kotlin:Anko\nverticalLayout {\n    customView {\n        textColor = Color.RED\n    }\n}\n```\n\n\u4e0a\u8a18\u306f0.8.3\u307e\u3067\u306e\u65b9\u6cd5\u3067\u30010.9\u304b\u3089\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```kotlin\ninline fun ViewManager.customView(theme: Int = 0) = customView(theme) {}\ninline fun ViewManager.customView(theme: Int = 0, init: CustomView.() -> Unit) = ankoView({ CustomView(it) }, theme, init)\n```\n\n# Fragment\u3092\u8ffd\u52a0\u3059\u308b\n\nXML\u3067\u306e\\<fragment\\>\u30bf\u30b0\u306e\u3088\u3046\u306bAnko\u306e\u4e2d\u3067Fragment\u3092\u8ffd\u52a0\u3057\u305f\u3044\u3068\u304d\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n\u53c2\u8003: [\\<fragment\\> tag equivalent in anko DSL](http://stackoverflow.com/questions/37744847/fragment-tag-equivalent-in-anko-dsl)\n\n```kotlin:Anko\nsupportFragmentManager.beginTransaction().add(this.id,com.myapp.MyFragment()).commit()\n```\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u65b9\u6cd5\u3067\u3084\u3063\u305f\u3068\u3053\u308dPreview\u304c\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\nAnko\u306e\u4e2d\u306b\u76f4\u63a5\u66f8\u304b\u305a\u306b\u3001id\u3092\u6307\u5b9a\u3057\u305fView\u306b\u5bfe\u3057\u3066\u5916\u304b\u3089add\u3057\u305f\u3068\u304d\u306b\u306fPreview\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val ui = MainActivityUi()\n        ui.setContentView(this)\n\n        supportFragmentManager.beginTransaction().add(ui.framgentId, com.myapp.MyFragment()).commit()\n    }\n}\n```\n\n# XML\u3067\u306f\u3067\u304d\u306a\u3044\u3053\u3068\n\n## \u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\n\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u307e\u3057\u305f\u3088\u3046\u306bAnko\u3067\u306fKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306e\u6a5f\u80fd\u3092\u751f\u304b\u3057\u3066\u7c21\u6f54\u306a\u8868\u8a18\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u81ea\u5206\u305f\u3061\u3067\u8ffd\u52a0\u3057\u305f\u62e1\u5f35\u95a2\u6570\u3082\u540c\u3058\u3088\u3046\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306fPicasso\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u3059\u308b\u4f8b\u3067\u3059\u3002\n\n```kotlin\nfun ImageView.loadImage(context: Context, imageUrl: String, error: Int) {\n    Picasso.with(context).load(imageUrl).error(error).into(this)\n}\n\nimageView = imageView {\n    loadImage(ctx, \"\u753b\u50cf\u306eURL\", R.drawable.error)\n}\n\n```\n\n\u3053\u306e\u3088\u3046\u306b\u6c17\u8efd\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3053\u3068\u304c Anko DSL = Kotlin\u306e\u30b3\u30fc\u30c9\u3067\u66f8\u304f\u3053\u3068\u306e\u30e1\u30ea\u30c3\u30c8\u306e\u4e00\u3064\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n***\n\n\u6b21\u306e\u8a18\u4e8b\u306fListView\u3067\u306e\u4f7f\u7528\u4f8b\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Kotlin", "anko", "Android"]}