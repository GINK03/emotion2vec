{"context": "Mongoid\u306b\u306f\u5b9f\u306ffind_by!\u3068\u3044\u3046\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30af\u30a8\u30ea\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u306f\u3053\u306e\u8aac\u660e\u304c\u8f09\u3063\u3066\u3044\u306a\u3044\u3002\n\u304b\u3064\u3001mongoid.yml\u3067\u6307\u5b9a\u3067\u304d\u308braise_not_found_error\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3001find, find_by, find_by!\u306e\u95a2\u4fc2\u306b\u3061\u3087\u3063\u3068\u7656\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u307e\u3068\u3081\u308b\u305f\u3081\u306b\u3053\u306e\u8a18\u4e8b\u3092\u6b8b\u3059\u3002\n\nfind_by!\nfind_by!\u306e\u5b58\u5728\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\nlib/mongoid/findable.rb#L134\u306b\u305d\u306e\u8a18\u8ff0\u304c\u3042\u308b\n    # Find the first +Document+ given the conditions, or raises\n    # Mongoid::Errors::DocumentNotFound\n    #\n    # @example Find the document by attribute other than id\n    #   Person.find_by(:username => \"superuser\")\n    #\n    # @param [ Hash ] attrs The attributes to check.\n    #\n    # @raise [ Errors::DocumentNotFound ] If no document found.\n    #\n    # @return [ Document ] A matching document.\n    #\n    def find_by!(attrs = {})\n      result = where(attrs).find_first\n      raise(Errors::DocumentNotFound.new(self, attrs)) unless result\n      yield(result) if result && block_given?\n      result\n    end\n\n\u30e1\u30bd\u30c3\u30c9\u306e\u306a\u304b\u3067\u306fMongoid.raise_not_found_error\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u6761\u4ef6\u5206\u5c90\u304c\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u8a2d\u5b9a\u306b\u304b\u304b\u308f\u3089\u305aMongoid::Errors::DocumentNotFound\u3092\u6295\u3052\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\nfind_by\nfind_by\u306e\u5b9f\u88c5\u306f\u540c\u30d5\u30a1\u30a4\u30eb\u4e2d\u306elib/mongoid/findable.rb#L113\u306b\u3042\u308b\u3002\n    # Find the first +Document+ given the conditions.\n    # If a matching Document is not found and\n    # Mongoid.raise_not_found_error is true it raises\n    # Mongoid::Errors::DocumentNotFound, return null nil elsewise.\n    #\n    # @example Find the document by attribute other than id\n    #   Person.find_by(:username => \"superuser\")\n    #\n    # @param [ Hash ] attrs The attributes to check.\n    #\n    # @raise [ Errors::DocumentNotFound ] If no document found\n    # and Mongoid.raise_not_found_error is true.\n    #\n    # @return [ Document, nil ] A matching document.\n    #\n    # @since 3.0.0\n    def find_by(attrs = {})\n      result = where(attrs).find_first\n      if result.nil? && Mongoid.raise_not_found_error\n        raise(Errors::DocumentNotFound.new(self, attrs))\n      end\n      yield(result) if result && block_given?\n      result\n    end\n\nfind_by\u306e\u6319\u52d5\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\n\nCriteria#find_by\nFind a document by the provided attributes, and if not found raise an error or return nil depending on the * raise_not_found_error *configuration option.\n\n\u3068\u306e\u3053\u3068\u3060\u304c\u3001\u306a\u308b\u307b\u3069\u78ba\u304b\u306b\u5b9f\u88c5\u3092\u307f\u308b\u3068\u6761\u4ef6\u5206\u5c90\u4e2d\u3067Mongoid.raise_not_found_error\u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\nfind\n\u3053\u3053\u307e\u3067\u306f\u3088\u308d\u3057\u304b\u3063\u305f\u304c\u3001\u3053\u306efind\u304c\u554f\u984c\u3067\u3042\u308b\u3002find\u306f\u5b9f\u88c5\u4e0a\u8907\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5206\u3051\u3066\u96a0\u853d\u3055\u308c\u3066\u3044\u3066\u3001\u5c11\u3057\u7d30\u304b\u304f\u307f\u3066\u3044\u304b\u306d\u3070\u306a\u3089\u306a\u3044\u3002\nfind\u81ea\u4f53\u306e\u5b9f\u88c5\u306f\u307e\u305alib/mongoid/criteria/findable.rb#L37\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\n      # Find the matchind document(s) in the criteria for the provided ids.\n      #\n      # @example Find by an id.\n      #   criteria.find(BSON::ObjectId.new)\n      #\n      # @example Find by multiple ids.\n      #   criteria.find([ BSON::ObjectId.new, BSON::ObjectId.new ])\n      #\n      # @param [ Array<BSON::ObjectId> ] args The ids to search for.\n      #\n      # @return [ Array<Document>, Document ] The matching document(s).\n      #\n      # @since 1.0.0\n      def find(*args)\n        ids = args.__find_args__\n        raise_invalid if ids.any?(&:nil?)\n        for_ids(ids).execute_or_raise(ids, args.multi_arged?)\n      end\n\n\u51e6\u7406\u306e\u4e2d\u5fc3\u306b\u306a\u308bexecute_or_raise\u306f\u305d\u306e\u4e0a\u306e\u884c\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n      # Execute the criteria or raise an error if no documents found.\n      #\n      # @example Execute or raise\n      #   criteria.execute_or_raise(id)\n      #\n      # @param [ Object ] args The arguments passed.\n      #\n      # @raise [ Errors::DocumentNotFound ] If nothing returned.\n      #\n      # @return [ Document, Array<Document> ] The document(s).\n      #\n      # @since 2.0.0\n      def execute_or_raise(ids, multi)\n        result = multiple_from_db(ids)\n        check_for_missing_documents!(result, ids)\n        multi ? result : result.first\n      end\n\n\u3055\u3089\u306bcheck_for_missing_documents!\u304c\u51fa\u3066\u304f\u308b\u3002\n\u5b9a\u7fa9\u5148\u306flib/mongoid/criteria.rb#L455\u3089\u3057\u3044\u3002\n    # Are documents in the query missing, and are we configured to raise an\n    # error?\n    #\n    # @api private\n    #\n    # @example Check for missing documents.\n    #   criteria.check_for_missing_documents!([], [ 1 ])\n    #\n    # @param [ Array<Document> ] result The result.\n    # @param [ Array<Object> ] ids The ids.\n    #\n    # @raise [ Errors::DocumentNotFound ] If none are found and raising an\n    #   error.\n    #\n    # @since 3.0.0\n    def check_for_missing_documents!(result, ids)\n      if (result.size < ids.size) && Mongoid.raise_not_found_error\n        raise Errors::DocumentNotFound.new(klass, ids, ids - result.map(&:_id))\n      end\n    end\n\nresult\u914d\u5217\u304c\u7a7a\u306a\u3089\u4f8b\u5916\u3092\u4e0a\u3052\u308b\u3068\u3044\u3046\u7c21\u5358\u306a\u6319\u52d5\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u3053\u3067find\u30e1\u30bd\u30c3\u30c9\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u307f\u305f\u3044\u3002\n\nCriteria#find\nFind a document or multiple documents by their ids. Will raise an error by default if any of the ids do not match.\n\n\u3064\u307e\u308a\u3001find\u30e1\u30bd\u30c3\u30c9\u3082\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f8b\u5916\u3092\u4e0a\u3052\u308b\u300d\u3068\u3044\u3046\u8aac\u660e\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u306f\u305f\u3057\u3066\u305d\u306e\u6319\u52d5\u304craise_not_found_error\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\n\u307e\u3068\u3081\n\n\n\n\n\u4f8b\u5916\u3092\u4e0a\u3052\u308b\n\u4f8b\u5916\u3092\u3042\u3052\u306a\u3044\n\n\n\n\nraise_not_found_error: true\n\n\nfind, find_by, find_by!,\n(\u306a\u3057)\n\n\nraise_not_found_error: false\n\nfind_by!\n\nfind, find_by\n\n\n\n\nActiveRecord\u3068\u9055\u3063\u3066\u3001raise_not_found_error\u3068\u3044\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4f7f\u3044\u305f\u3044\nMongoid\u306b\u306f\u5b9f\u306f`find_by!`\u3068\u3044\u3046\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3060\u304c\u3001[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30af\u30a8\u30ea\u30bb\u30af\u30b7\u30e7\u30f3](https://docs.mongodb.com/ruby-driver/master/tutorials/5.1.0/mongoid-queries/)\u306b\u306f\u3053\u306e\u8aac\u660e\u304c\u8f09\u3063\u3066\u3044\u306a\u3044\u3002\n\u304b\u3064\u3001mongoid.yml\u3067\u6307\u5b9a\u3067\u304d\u308b`raise_not_found_error`\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3001`find`, ` find_by`, `find_by!`\u306e\u95a2\u4fc2\u306b\u3061\u3087\u3063\u3068\u7656\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u307e\u3068\u3081\u308b\u305f\u3081\u306b\u3053\u306e\u8a18\u4e8b\u3092\u6b8b\u3059\u3002\n\n# find_by!\n`find_by!`\u306e\u5b58\u5728\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n[lib/mongoid/findable.rb#L134](https://github.com/mongodb/mongoid/blob/71c29a80599087008ecfbd057d3d049c2153c7ce/lib/mongoid/findable.rb#L134)\u306b\u305d\u306e\u8a18\u8ff0\u304c\u3042\u308b\n\n```rb\n    # Find the first +Document+ given the conditions, or raises\n    # Mongoid::Errors::DocumentNotFound\n    #\n    # @example Find the document by attribute other than id\n    #   Person.find_by(:username => \"superuser\")\n    #\n    # @param [ Hash ] attrs The attributes to check.\n    #\n    # @raise [ Errors::DocumentNotFound ] If no document found.\n    #\n    # @return [ Document ] A matching document.\n    #\n    def find_by!(attrs = {})\n      result = where(attrs).find_first\n      raise(Errors::DocumentNotFound.new(self, attrs)) unless result\n      yield(result) if result && block_given?\n      result\n    end\n```\n\u30e1\u30bd\u30c3\u30c9\u306e\u306a\u304b\u3067\u306f`Mongoid.raise_not_found_error`\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u6761\u4ef6\u5206\u5c90\u304c\u306a\u3044\u306e\u3067\u3001**\u305d\u306e\u8a2d\u5b9a\u306b\u304b\u304b\u308f\u3089\u305a`Mongoid::Errors::DocumentNotFound`\u3092\u6295\u3052\u308b**\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n# find_by\n`find_by`\u306e\u5b9f\u88c5\u306f\u540c\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e[lib/mongoid/findable.rb#L113](https://github.com/mongodb/mongoid/blob/71c29a80599087008ecfbd057d3d049c2153c7ce/lib/mongoid/findable.rb#L113)\u306b\u3042\u308b\u3002\n\n```rb\n    # Find the first +Document+ given the conditions.\n    # If a matching Document is not found and\n    # Mongoid.raise_not_found_error is true it raises\n    # Mongoid::Errors::DocumentNotFound, return null nil elsewise.\n    #\n    # @example Find the document by attribute other than id\n    #   Person.find_by(:username => \"superuser\")\n    #\n    # @param [ Hash ] attrs The attributes to check.\n    #\n    # @raise [ Errors::DocumentNotFound ] If no document found\n    # and Mongoid.raise_not_found_error is true.\n    #\n    # @return [ Document, nil ] A matching document.\n    #\n    # @since 3.0.0\n    def find_by(attrs = {})\n      result = where(attrs).find_first\n      if result.nil? && Mongoid.raise_not_found_error\n        raise(Errors::DocumentNotFound.new(self, attrs))\n      end\n      yield(result) if result && block_given?\n      result\n    end\n```\n`find_by`\u306e\u6319\u52d5\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\n> Criteria#find_by\n>\nFind a document by the provided attributes, and if not found raise an error or return nil **depending on the * ``raise_not_found_error`` *configuration option.**\n\n\u3068\u306e\u3053\u3068\u3060\u304c\u3001\u306a\u308b\u307b\u3069\u78ba\u304b\u306b\u5b9f\u88c5\u3092\u307f\u308b\u3068\u6761\u4ef6\u5206\u5c90\u4e2d\u3067`Mongoid.raise_not_found_error`\u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\n# find\n\u3053\u3053\u307e\u3067\u306f\u3088\u308d\u3057\u304b\u3063\u305f\u304c\u3001\u3053\u306efind\u304c\u554f\u984c\u3067\u3042\u308b\u3002find\u306f\u5b9f\u88c5\u4e0a\u8907\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5206\u3051\u3066\u96a0\u853d\u3055\u308c\u3066\u3044\u3066\u3001\u5c11\u3057\u7d30\u304b\u304f\u307f\u3066\u3044\u304b\u306d\u3070\u306a\u3089\u306a\u3044\u3002\n\n`find`\u81ea\u4f53\u306e\u5b9f\u88c5\u306f\u307e\u305a[lib/mongoid/criteria/findable.rb#L37](https://github.com/mongodb/mongoid/blob/71c29a80599087008ecfbd057d3d049c2153c7ce/lib/mongoid/criteria/findable.rb#L37)\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\n\n```rb\n      # Find the matchind document(s) in the criteria for the provided ids.\n      #\n      # @example Find by an id.\n      #   criteria.find(BSON::ObjectId.new)\n      #\n      # @example Find by multiple ids.\n      #   criteria.find([ BSON::ObjectId.new, BSON::ObjectId.new ])\n      #\n      # @param [ Array<BSON::ObjectId> ] args The ids to search for.\n      #\n      # @return [ Array<Document>, Document ] The matching document(s).\n      #\n      # @since 1.0.0\n      def find(*args)\n        ids = args.__find_args__\n        raise_invalid if ids.any?(&:nil?)\n        for_ids(ids).execute_or_raise(ids, args.multi_arged?)\n      end\n```\n\u51e6\u7406\u306e\u4e2d\u5fc3\u306b\u306a\u308b`execute_or_raise`\u306f\u305d\u306e\u4e0a\u306e\u884c\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n```rb\n      # Execute the criteria or raise an error if no documents found.\n      #\n      # @example Execute or raise\n      #   criteria.execute_or_raise(id)\n      #\n      # @param [ Object ] args The arguments passed.\n      #\n      # @raise [ Errors::DocumentNotFound ] If nothing returned.\n      #\n      # @return [ Document, Array<Document> ] The document(s).\n      #\n      # @since 2.0.0\n      def execute_or_raise(ids, multi)\n        result = multiple_from_db(ids)\n        check_for_missing_documents!(result, ids)\n        multi ? result : result.first\n      end\n```\n\u3055\u3089\u306b`check_for_missing_documents!`\u304c\u51fa\u3066\u304f\u308b\u3002\n\u5b9a\u7fa9\u5148\u306f[lib/mongoid/criteria.rb#L455](https://github.com/mongodb/mongoid/blob/71c29a80599087008ecfbd057d3d049c2153c7ce/lib/mongoid/criteria.rb#L455)\u3089\u3057\u3044\u3002\n\n```rb\n    # Are documents in the query missing, and are we configured to raise an\n    # error?\n    #\n    # @api private\n    #\n    # @example Check for missing documents.\n    #   criteria.check_for_missing_documents!([], [ 1 ])\n    #\n    # @param [ Array<Document> ] result The result.\n    # @param [ Array<Object> ] ids The ids.\n    #\n    # @raise [ Errors::DocumentNotFound ] If none are found and raising an\n    #   error.\n    #\n    # @since 3.0.0\n    def check_for_missing_documents!(result, ids)\n      if (result.size < ids.size) && Mongoid.raise_not_found_error\n        raise Errors::DocumentNotFound.new(klass, ids, ids - result.map(&:_id))\n      end\n    end\n```\nresult\u914d\u5217\u304c\u7a7a\u306a\u3089\u4f8b\u5916\u3092\u4e0a\u3052\u308b\u3068\u3044\u3046\u7c21\u5358\u306a\u6319\u52d5\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u3053\u3067`find`\u30e1\u30bd\u30c3\u30c9\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u307f\u305f\u3044\u3002\n\n>Criteria#find\n>\nFind a document or multiple documents by their ids. **Will raise an error by default** if any of the ids do not match.\n\n\u3064\u307e\u308a\u3001`find`\u30e1\u30bd\u30c3\u30c9\u3082\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f8b\u5916\u3092\u4e0a\u3052\u308b\u300d\u3068\u3044\u3046\u8aac\u660e\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u306f\u305f\u3057\u3066\u305d\u306e\u6319\u52d5\u304c`raise_not_found_error`\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\n# \u307e\u3068\u3081\n|                                |              \u4f8b\u5916\u3092\u4e0a\u3052\u308b        |    \u4f8b\u5916\u3092\u3042\u3052\u306a\u3044      |\n|:------------------------------:|:------------------------------:|:-------------------:|\n|raise_not_found_error: **true** | `find`, `find_by`, `find_by!`, |       (\u306a\u3057)         |\n|raise_not_found_error: **false**| `find_by!`                     | `find`, `find_by`    |\nActiveRecord\u3068\u9055\u3063\u3066\u3001`raise_not_found_error`\u3068\u3044\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4f7f\u3044\u305f\u3044:fist:\n", "tags": ["mongoid", "Ruby"]}