{"context": " More than 1 year has passed since last update.ES6 \u3067\u7b56\u5b9a\u3055\u308c\u305f Promise \u306e\u6319\u52d5\u3092 Chrome \u3067\u8a66\u3057\u3066\u307f\u3066\u3044\u3066\u3001\u5b9f\u88c5\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067 chromium \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u305f\u3002\n(1/3 \u8ffd\u8a18) \u30b3\u30e1\u30f3\u30c8\u3067\u30c4\u30c3\u30b3\u30df\u3082\u3089\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u3067\u8aad\u3093\u3060 /third_party/google_input_tools/third_party/closure_library/closure/goog/promise/promise.js \u306f Google Input Tools \u3067\u4f7f\u3046\u305f\u3081\u306e Promise \u5b9f\u88c5\u3067\u3001Chrome \u3067\u52d5\u3044\u3066\u3044\u308b\u3082\u306e\u3068\u306f\u5225\u7269\u3067\u3057\u305f\u3002Chrome \u3067\u52d5\u3044\u3066\u308b Promise \u306f\u3001v8 \u306e repository \u3067\u5b9f\u88c5\u3055\u308c\u3066\u308b\u307f\u305f\u3044\u3067\u3059 ( https://chromium.googlesource.com/v8/v8/+/master/src/js/promise.js )\n\u5bfe\u8c61\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3001 choromium \u306e /third_party/google_input_tools/third_party/closure_library/closure/goog/promise/promise.js \n\nPromise \u306e\u751f\u6210\n  76 goog.Promise = function(resolver, opt_context) {\n  77   /**\n  78    * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n  79    * BLOCKED.\n  80    * @private {goog.Promise.State_}\n  81    */\n  82   this.state_ = goog.Promise.State_.PENDING;\n.\n.\n.\n 161   if (resolver != goog.nullFunction) {\n 162     try {\n 163       var self = this;\n 164       resolver.call(\n 165           opt_context,\n 166           function(value) {\n 167             self.resolve_(goog.Promise.State_.FULFILLED, value);\n 168           },\n 169           function(reason) {\n.\n.\n.\n 185             self.resolve_(goog.Promise.State_.REJECTED, reason);\n 186           });\n 187     } catch (e) {\n 188       this.resolve_(goog.Promise.State_.REJECTED, e);\n 189     }\n 190   }\n 191 };\n\n167\u884c\u76ee , 185\u884c\u76ee, 188\u884c\u76ee \u3067 this.resolve_ \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002 resolve_ \u306e\u4e2d\u3067\u3001\u771f\u306e resolve \u306e\u51e6\u7406\u3092\u884c\u3046\uff08Promise \u751f\u6210\u6bb5\u968e\u3067\u306f\u307e\u3060 resolve \u306e\u51e6\u7406\u304c\u767b\u9332\u3055\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u3092\u62bd\u8c61\u5316\u3057\u3066\u308b\uff09\u3002\nstate \u306e\u7ba1\u7406\u3092\u3057\u3066\u3044\u3066\u3001\u3053\u308c\u306f\u521d\u671f\u72b6\u614b\u3060\u3068 goog.Promise.State_.PENDING \u3001resolve \u304b reject \u304c\u78ba\u5b9a\u3059\u308b\u3068 goog.Promise.State_.FULFILLED \u304bgoog.Promise.State_.REJECTED \u306b\u306a\u308b\u3002\n 895 goog.Promise.prototype.resolve_ = function(state, x) {\n 896   if (this.state_ != goog.Promise.State_.PENDING) {\n 897     return;\n 898   }\n 899\n 900   if (this == x) {\n 901     state = goog.Promise.State_.REJECTED;\n 902     x = new TypeError('Promise cannot resolve to itself');\n 903   }\n 904\n 905   this.state_ = goog.Promise.State_.BLOCKED;\n 906   var isThenable = goog.Promise.maybeThen_(\n 907       x, this.unblockAndFulfill_, this.unblockAndReject_, this);\n 908   if (isThenable) {\n 909     return;\n 910   }\n 911\n.\n.\n.\n 923 };\n\n906 \u884c\u76ee\u306e maybeThen_ \u306f\u3001value \u304c Thenable \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6642\u306e\u51e6\u7406\u3092\u884c\u3046\u3063\u307d\u3044\u3002\n 926 /**\n 927  * Invokes the \"then\" method of an input value if that value is a Thenable. This\n 928  * is a no-op if the value is not thenable.\n 929  *\n 930  * @param {*} value A potentially thenable value.\n 931  * @param {!Function} onFulfilled\n 932  * @param {!Function} onRejected\n 933  * @param {*} context\n 934  * @return {boolean} Whether the input value was thenable.\n 935  * @private\n 936  */\n 937 goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {\n 938   if (value instanceof goog.Promise) {\n 939     value.thenVoid(onFulfilled, onRejected, context);\n 940     return true;\n 941   } else if (goog.Thenable.isImplementedBy(value)) {\n 942     value = /** @type {!goog.Thenable} */ (value);\n 943     value.then(onFulfilled, onRejected, context);\n 944     return true;\n 945   } else if (goog.isObject(value)) {\n 946     try {\n 947       var then = value['then'];\n 948       if (goog.isFunction(then)) {\n 949         goog.Promise.tryThen_(\n 950             value, then, onFulfilled, onRejected, context);\n 951         return true;\n 952       }\n 953     } catch (e) {\n 954       onRejected.call(context, e);\n 955       return true;\n 956     }\n 957   }\n 958\n 959   return false;\n 960 };\n\n\u9006\u306b\u3001Thenable \u3067\u306a\u3044\u6642\u306f\u3001 this.resul_ \u306b x \u3092 set \u3057\u3066\u304b\u3089\u3001this.state_ \u3082 goog.Promise.State_.FULFILLED \u3082\u3057\u304f\u306f goog.Promise.State_.REJECTED \u306b\u66f4\u65b0\u3002\n\u307e\u305f\u3001 916\u884c\u76ee \u3067 this.parent_ \u3078\u306e\u53c2\u7167\u3082\u5207\u3063\u3066\u3044\u308b\uff08\u3053\u308c\u306fGC\u306e\u305f\u3081\uff1f\uff09\n\u305d\u3057\u3066\u3001 917\u884c\u76ee \u306e this.scheduleCallbacks_() \u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3002\n 895 goog.Promise.prototype.resolve_ = function(state, x) {\n.\n.\n.\n 912   this.result_ = x;\n 913   this.state_ = state;\n 914   // Since we can no longer be canceled, remove link to parent, so that the\n 915   // child promise does not keep the parent promise alive.\n 916   this.parent_ = null;\n 917   this.scheduleCallbacks_();\n 918\n 919   if (state == goog.Promise.State_.REJECTED &&\n 920       !(x instanceof goog.Promise.CancellationError)) {\n 921     goog.Promise.addUnhandledRejection_(this, x);\n 922   }\n 933 }\n\nscheduleCallbacks_ \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3002this.executeCallbacks \u3092 sync \u3067\u5b9f\u884c\u3059\u308b\u3002\n1022 goog.Promise.prototype.scheduleCallbacks_ = function() {\n1023   if (!this.executing_) {\n1024     this.executing_ = true;\n1025     goog.async.run(this.executeCallbacks_, this);\n1026   }\n1027 };\n\nexecuteCallbacks_ \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3002popEntry \u3067\u767b\u9332\u3055\u308c\u305f callback \u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u9806\u756a\u306b\u5b9f\u884c\u3059\u308b\u3002\u304a\u305d\u3089\u304f\u3001 then \u3067\u30c1\u30a7\u30fc\u30f3\u3057\u305f callback \u3092\u9806\u756a\u306b\u5b9f\u884c\u3057\u3066\u3044\u304f\u30b7\u30c1\u30e5\u30a8\u30fc\u30b7\u30e7\u30f3\u3002\n1101 goog.Promise.prototype.executeCallbacks_ = function() {\n1102   var entry = null;\n1103   while (entry = this.popEntry_()) {\n1104     if (goog.Promise.LONG_STACK_TRACES) {\n1105       this.currentStep_++;\n1106     }\n1107     this.executeCallback_(entry, this.state_, this.result_);\n1108   }\n1109   this.executing_ = false;\n1110 };\n\nthis.popEntry \u3067\u306f\u3001chain list \u306b\u306a\u3063\u305f this.callbackEntries \u304b\u3089 entry \u3092\u9806\u756a\u306b\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\n1061 goog.Promise.prototype.popEntry_ = function() {\n1062   var entry = null;\n1063   if (this.callbackEntries_) {\n1064     entry = this.callbackEntries_;\n1065     this.callbackEntries_ = entry.next;\n1066     entry.next = null;\n1067   }\n1068   // It the work queue is empty clear the tail too.\n1069   if (!this.callbackEntries_) {\n1070     this.callbackEntriesTail_ = null;\n1071   }\n1072\n1073   if (entry != null) {\n1074     goog.asserts.assert(entry.onFulfilled != null);\n1075   }\n1076   return entry;\n1077 };\n\n1107\u884c\u76ee \u306e this.executeCallback_(entry, this.state_, this.result_) \u3067\u3001entry \u306e\u4e2d\u8eab\u3092\u5b9f\u884c\uff08 entry \u306f resolve \u3068 reject \u3092\u3069\u3063\u3061\u3082\u6301\u3063\u3066\u308b\u306e\u3067\u3001state \u304c\u5fc5\u8981\uff09\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6642\u70b9\u3067\u3001\u4f55\u3082 callback \u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\uff08 this.callbackEntries \u304c\u521d\u671f\u5024\u306e null \u306e\u307e\u307e\u3060\uff09\u3068\u3001null \u304c\u8fd4\u3055\u308c\u308b\u3002\u306e\u3067\u3001promise \u3092\u751f\u6210\u3057\u305f\u3060\u3051\u306e\u72b6\u614b\u3060\u3068\u3001 1025\u884c\u76ee \u306e this.executeCallbacks_ \u306f\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3059\u308b\u306f\u305a\u3002\u5b9f\u969b\u3001Promise \u3092\u751f\u6210\u3057\u3066 then \u3092\u547c\u3073\u51fa\u3055\u306a\u3044\u3068\u3001\u4f55\u306b\u3082\u8d77\u304d\u306a\u3044\u3002\n\u9006\u306b\u3001promise \u306b\u5bfe\u3057\u3066 then \u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u3061\u3083\u3093\u3068 callback \u306f\u5b9f\u884c\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u304a\u305d\u3089\u304f\u3001this.result_ \u3067 callback \u7528\u306e\u5024\u3092\u6b8b\u3057\u3066\u3044\u308b\u70ba\u3002\u3064\u307e\u308a\u3001Promise \u306e\u521d\u671f\u5316\u6642\u306b\u6307\u5b9a\u3057\u305f\u51e6\u7406\u306f\u3059\u3050\u306b\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u6642\u70b9\u3067 this.value_ \u3068 this.state_ \u306f\u4fdd\u5b58\u3055\u308c\u3066\u3001\u305d\u306e\u5f8c\u306f then \u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u4fdd\u5b58\u3057\u305f\u5024\u304c\u4f7f\u308f\u308c\u308b\u3002\n  76 goog.Promise = function(resolver, opt_context) {\n.\n.\n.\n  97   /**\n  98    * The linked list of {@code onFulfilled} and {@code onRejected} callbacks\n  99    * added to this Promise by calls to {@code then()}.\n 100    * @private {?goog.Promise.CallbackEntry_}\n 101    */\n 102   this.callbackEntries_ = null;\n 103\n 104   /**\n 105    * The tail of the linked list of {@code onFulfilled} and {@code onRejected}\n 106    * callbacks added to this Promise by calls to {@code then()}.\n 107    * @private {?goog.Promise.CallbackEntry_}\n 108    */\n 109   this.callbackEntriesTail_ = null;\n\n\u304a\u307e\u3051\u3067 this.executeCallback_ \u306e\u5b9f\u88c5\u3092\u898b\u3066\u304a\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n1124 goog.Promise.prototype.executeCallback_ = function(\n1125     callbackEntry, state, result) {\n1126   // Cancel an unhandled rejection if the then/thenVoid call had an onRejected.\n1127   if (state == goog.Promise.State_.REJECTED &&\n1128       callbackEntry.onRejected && !callbackEntry.always) {\n1129     this.removeUnhandledRejection_();\n1130   }\n1131\n1132   if (callbackEntry.child) {\n1133     // When the parent is settled, the child no longer needs to hold on to it,\n1134     // as the parent can no longer be canceled.\n1135     callbackEntry.child.parent_ = null;\n1136     goog.Promise.invokeCallback_(callbackEntry, state, result);\n1137   } else {\n1138     // Callbacks created with thenAlways or thenVoid do not have the rejection\n1139     // handling code normally set up in the child Promise.\n1140     try {\n1141       callbackEntry.always ?\n1142           callbackEntry.onFulfilled.call(callbackEntry.context) :\n1143           goog.Promise.invokeCallback_(callbackEntry, state, result);\n1144     } catch (err) {\n1145       goog.Promise.handleRejection_.call(null, err);\n1146     }\n1147   }\n1148   goog.Promise.returnEntry_(callbackEntry);\n1149 };\n\n\nPromise.prototype.then \u306e\u4e2d\u8eab\u3092\u898b\u308b\ncallback \u306e\u767b\u9332\u306e\u30d5\u30ed\u30fc\u3092\u898b\u3066\u3044\u304f\u3002\n 549 goog.Promise.prototype.then = function(\n 550     opt_onFulfilled, opt_onRejected, opt_context) {\n 551\n 552   if (opt_onFulfilled != null) {\n 553     goog.asserts.assertFunction(opt_onFulfilled,\n 554         'opt_onFulfilled should be a function.');\n 555   }\n 556   if (opt_onRejected != null) {\n 557     goog.asserts.assertFunction(opt_onRejected,\n 558         'opt_onRejected should be a function. Did you pass opt_context ' +\n 559         'as the second argument instead of the third?');\n 560   }\n 561\n 562   if (goog.Promise.LONG_STACK_TRACES) {\n 563     this.addStackTrace_(new Error('then'));\n 564   }\n 565\n 566   return this.addChildPromise_(\n 567       goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n 568       goog.isFunction(opt_onRejected) ? opt_onRejected : null,\n 569       opt_context);\n 570 };\n 571 goog.Thenable.addImplementation(goog.Promise);\n\nthen \u306e\u4e2d\u3067\u306f\u307b\u307c\u4f55\u3082\u3057\u3066\u306a\u304f\u3066\u3001\u305f\u3060 addChildPromise_ \u3092\u547c\u3093\u3067\u3044\u308b\u3002\n 812 goog.Promise.prototype.addChildPromise_ = function(\n 813     onFulfilled, onRejected, opt_context) {\n 814\n 815   /** @type {goog.Promise.CallbackEntry_} */\n 816   var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);\n 817\n 818   callbackEntry.child = new goog.Promise(function(resolve, reject) {\n 819     // Invoke onFulfilled, or resolve with the parent's value if absent.\n 820     callbackEntry.onFulfilled = onFulfilled ? function(value) {\n 821       try {\n 822         var result = onFulfilled.call(opt_context, value);\n 823         resolve(result);\n 824       } catch (err) {\n 825         reject(err);\n 826       }\n 827     } : resolve;\n 828\n 829     // Invoke onRejected, or reject with the parent's reason if absent.\n 830     callbackEntry.onRejected = onRejected ? function(reason) {\n 831       try {\n 832         var result = onRejected.call(opt_context, reason);\n 833         if (!goog.isDef(result) &&\n 834             reason instanceof goog.Promise.CancellationError) {\n 835           // Propagate cancellation to children if no other result is returned.\n 836           reject(reason);\n 837         } else {\n 838           resolve(result);\n 839         }\n 840       } catch (err) {\n 841         reject(err);\n 842       }\n 843     } : reject;\n 844   });\n 845\n 845\n 846   callbackEntry.child.parent_ = this;\n 847   this.addCallbackEntry_(callbackEntry);\n 848   return callbackEntry.child;\n 849 };\n\n\n1. \u7a7a\u306ecallbackEntry\u3092\u4f5c\u6210\n2. callbackEntry.child \u306b\u3001Promise\u3092\u8a2d\u5b9a\u3002\u3053\u306e\u969b\u3001\u3053\u306e Promise \u3067\u8a2d\u5b9a\u3055\u308c\u305f resolve \u306e \u5f15\u6570\u306b\u306f\u3001onFullfilled \u306e\u8fd4\u308a\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n3. then \u3092\u547c\u3073\u51fa\u3057\u305f promise \u3092 callbackEntry.child.parent_ \u3068\u3057\u3066\u8a2d\u5b9a\uff08Promise \u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u4f5c\u308b\uff09\u3002\n4. this.addCallbackEntry_(callbackEntry) \u3092\u547c\u3076\uff08\u3053\u3053\u3067 callback \u306e\u8ffd\u52a0\u3084\u5b9f\u884c\u3092\u884c\u3046\uff09\n5. callbackEntry.child \u3092\u8fd4\u3059\uff08\u3053\u308c\u304c Promise \u306b\u306a\u3063\u3066\u308b\uff09\n\ncallbackEntry\u306e\u521d\u671f\u5316\u306f getCallbackEntry \u3067\u884c\u3063\u3066\u3044\u308b\u3002\n 300 goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {\n 301   var entry = goog.Promise.freelist_.get();\n 302   entry.onFulfilled = onFulfilled;\n 303   entry.onRejected = onRejected;\n 304   entry.context = context;\n 305   return entry;\n 306 };\n\n\u307e\u305f\u3001addCallbackEntry_ \u306f\u4ee5\u4e0b\u3002\u3053\u3053\u3067 787\u884c\u76ee \u3067 schedleCallbacks_() \u304c\u547c\u3070\u308c\u3066\u3044\u308b\u70ba\u3001then \u3092\u547c\u3076\u305f\u3073\u306b callback \u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n 783 goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {\n 784   if (!this.hasEntry_() &&\n 785       (this.state_ == goog.Promise.State_.FULFILLED ||\n 786        this.state_ == goog.Promise.State_.REJECTED)) {\n 787     this.scheduleCallbacks_();\n 788   }\n 789   this.queueEntry_(callbackEntry);\n 790 };\n\n\u3061\u306a\u307f\u306b\u3001784\u884c\u76ee \u306e hasEntry_ \u3068\u3044\u3046\u306e\u306f this.callbackEntries \u306e\u6709\u7121\u3092\u78ba\u304b\u3081\u3066\u308b\u3060\u3051\u3063\u307d\u3044\u3002\n1034 goog.Promise.prototype.hasEntry_ = function() {\n1035   return !!this.callbackEntries_;\n1036 };\n\n\u307e\u305f\u3001 789\u884c\u76ee \u306e queueEntry_ \u3067\u3001chain list \u306ethis.callbackEntries_ \u306b\u5bfe\u3057\u3066 callback \u306e\u8ffd\u52a0\u3092\u884c\u3046\u3002\n1043 goog.Promise.prototype.queueEntry_ = function(entry) {\n1044   goog.asserts.assert(entry.onFulfilled != null);\n1045\n1046   if (this.callbackEntriesTail_) {\n1047     this.callbackEntriesTail_.next = entry;\n1048     this.callbackEntriesTail_ = entry;\n1049   } else {\n1050     // It the work queue was empty set the head too.\n1051     this.callbackEntries_ = entry;\n1052     this.callbackEntriesTail_ = entry;\n1053   }\n1054 };\n\n\u3053\u3053\u307e\u3067\u3067\u3001callbackEntries_ \u3078\u306e callback \u306e\u8ffd\u52a0\u51e6\u7406\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n\u307e\u3068\u3081\nchromium \u3067\u306f\u3001Promise \u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\nnew Promise() \u306b\u767b\u9332\u3057\u305f\u51e6\u7406\u306f\u5373\u5ea7\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002\u3053\u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u305f\u6642\u70b9\u3067\u3001 goog.Promise.State_.FULFILLED \u304b goog.Promise.State_.FULFILLED \u304c this.state_ \u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u3001callback \u306b\u6e21\u3055\u308c\u308b\u5024\u3067\u3042\u308b this.result_ \u3082\u4fdd\u5b58\u3055\u308c\u308b\u3002\u3053\u306e\u6642\u70b9\u3067\u3001then \u3067 callback \u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u5426\u304b\u306b\u95a2\u308f\u3089\u305a this.executeCallbacks_\uff08\u767b\u9332\u3055\u308c\u305f callback \u304c\u7121\u304f\u306a\u308b\u307e\u3067\u5168\u3066\u5b9f\u884c\u3059\u308b\u51e6\u7406\uff09\u304c\u8d70\u308b\u3002\n\nthen \u306e\u547c\u3073\u51fa\u3057\u3067 callback \u3092\u767b\u9332\u3059\u308b\u3002\u3053\u306e\u6642\u3001\u8fd4\u308a\u5024\u3068\u3057\u3066 Promise \u3092\u8fd4\u3059\u304c\u3001Promise \u306e \u521d\u671f\u5316\u306e\u969b\u306b \u300ccallback \u306e\u8fd4\u308a\u5024\u3092\u4f7f\u3046\u51e6\u7406\u300d\u3092\u6e21\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066 chaining \u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002then \u306e\u51e6\u7406\u306e\u969b\u306b\u3082 this.executeCallbacks_ \u304c\u8d70\u308b\u3002\n\nthen \u306b\u6e21\u3057\u305f callback \u306e\u8fd4\u308a\u5024\u304c Promise \u306e\u30b1\u30fc\u30b9\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306f Promise \u751f\u6210\u6642\u306b\u8d70\u308b this.resolve_ \u306e\u4e2d\u3067 this.maybeThen_ \u304c\u8d70\u308b\u3053\u3068\u3067\u51e6\u7406\u3055\u308c\u308b\u3002\n\n\n~~ES6 \u3067\u7b56\u5b9a\u3055\u308c\u305f Promise \u306e\u6319\u52d5\u3092 Chrome \u3067\u8a66\u3057\u3066\u307f\u3066\u3044\u3066\u3001\u5b9f\u88c5\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067 chromium \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u305f\u3002~~\n(1/3 \u8ffd\u8a18) \u30b3\u30e1\u30f3\u30c8\u3067\u30c4\u30c3\u30b3\u30df\u3082\u3089\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u3067\u8aad\u3093\u3060 `/third_party/google_input_tools/third_party/closure_library/closure/goog/promise/promise.js` \u306f Google Input Tools \u3067\u4f7f\u3046\u305f\u3081\u306e `Promise` \u5b9f\u88c5\u3067\u3001Chrome \u3067\u52d5\u3044\u3066\u3044\u308b\u3082\u306e\u3068\u306f\u5225\u7269\u3067\u3057\u305f\u3002\u0010Chrome \u3067\u52d5\u3044\u3066\u308b `Promise` \u306f\u3001v8 \u306e repository \u3067\u5b9f\u88c5\u3055\u308c\u3066\u308b\u307f\u305f\u3044\u3067\u3059 ( https://chromium.googlesource.com/v8/v8/+/master/src/js/promise.js )\n\n\u5bfe\u8c61\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3001 choromium \u306e `/third_party/google_input_tools/third_party/closure_library/closure/goog/promise/promise.js` \n\n## Promise \u306e\u751f\u6210\n\n```\n  76 goog.Promise = function(resolver, opt_context) {\n  77   /**\n  78    * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n  79    * BLOCKED.\n  80    * @private {goog.Promise.State_}\n  81    */\n  82   this.state_ = goog.Promise.State_.PENDING;\n.\n.\n.\n 161   if (resolver != goog.nullFunction) {\n 162     try {\n 163       var self = this;\n 164       resolver.call(\n 165           opt_context,\n 166           function(value) {\n 167             self.resolve_(goog.Promise.State_.FULFILLED, value);\n 168           },\n 169           function(reason) {\n.\n.\n.\n 185             self.resolve_(goog.Promise.State_.REJECTED, reason);\n 186           });\n 187     } catch (e) {\n 188       this.resolve_(goog.Promise.State_.REJECTED, e);\n 189     }\n 190   }\n 191 };\n```\n\n**167\u884c\u76ee** , **185\u884c\u76ee**, **188\u884c\u76ee** \u3067 `this.resolve_` \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3002 `resolve_` \u306e\u4e2d\u3067\u3001\u771f\u306e resolve \u306e\u51e6\u7406\u3092\u884c\u3046\uff08Promise \u751f\u6210\u6bb5\u968e\u3067\u306f\u307e\u3060 resolve \u306e\u51e6\u7406\u304c\u767b\u9332\u3055\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u3092\u62bd\u8c61\u5316\u3057\u3066\u308b\uff09\u3002\nstate \u306e\u7ba1\u7406\u3092\u3057\u3066\u3044\u3066\u3001\u3053\u308c\u306f\u521d\u671f\u72b6\u614b\u3060\u3068 `goog.Promise.State_.PENDING` \u3001resolve \u304b reject \u304c\u78ba\u5b9a\u3059\u308b\u3068 `goog.Promise.State_.FULFILLED` \u304b`goog.Promise.State_.REJECTED` \u306b\u306a\u308b\u3002\n\n```\n 895 goog.Promise.prototype.resolve_ = function(state, x) {\n 896   if (this.state_ != goog.Promise.State_.PENDING) {\n 897     return;\n 898   }\n 899\n 900   if (this == x) {\n 901     state = goog.Promise.State_.REJECTED;\n 902     x = new TypeError('Promise cannot resolve to itself');\n 903   }\n 904\n 905   this.state_ = goog.Promise.State_.BLOCKED;\n 906   var isThenable = goog.Promise.maybeThen_(\n 907       x, this.unblockAndFulfill_, this.unblockAndReject_, this);\n 908   if (isThenable) {\n 909     return;\n 910   }\n 911\n.\n.\n.\n 923 };\n```\n\n906 \u884c\u76ee\u306e `maybeThen_` \u306f\u3001`value` \u304c `Thenable` \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6642\u306e\u51e6\u7406\u3092\u884c\u3046\u3063\u307d\u3044\u3002\n\n```\n 926 /**\n 927  * Invokes the \"then\" method of an input value if that value is a Thenable. This\n 928  * is a no-op if the value is not thenable.\n 929  *\n 930  * @param {*} value A potentially thenable value.\n 931  * @param {!Function} onFulfilled\n 932  * @param {!Function} onRejected\n 933  * @param {*} context\n 934  * @return {boolean} Whether the input value was thenable.\n 935  * @private\n 936  */\n 937 goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {\n 938   if (value instanceof goog.Promise) {\n 939     value.thenVoid(onFulfilled, onRejected, context);\n 940     return true;\n 941   } else if (goog.Thenable.isImplementedBy(value)) {\n 942     value = /** @type {!goog.Thenable} */ (value);\n 943     value.then(onFulfilled, onRejected, context);\n 944     return true;\n 945   } else if (goog.isObject(value)) {\n 946     try {\n 947       var then = value['then'];\n 948       if (goog.isFunction(then)) {\n 949         goog.Promise.tryThen_(\n 950             value, then, onFulfilled, onRejected, context);\n 951         return true;\n 952       }\n 953     } catch (e) {\n 954       onRejected.call(context, e);\n 955       return true;\n 956     }\n 957   }\n 958\n 959   return false;\n 960 };\n```\n\n\u9006\u306b\u3001`Thenable` \u3067\u306a\u3044\u6642\u306f\u3001 `this.resul_` \u306b `x` \u3092 set \u3057\u3066\u304b\u3089\u3001`this.state_` \u3082 `goog.Promise.State_.FULFILLED` \u3082\u3057\u304f\u306f `goog.Promise.State_.REJECTED` \u306b\u66f4\u65b0\u3002\n\n\u307e\u305f\u3001 **916\u884c\u76ee** \u3067 `this.parent_` \u3078\u306e\u53c2\u7167\u3082\u5207\u3063\u3066\u3044\u308b\uff08\u3053\u308c\u306fGC\u306e\u305f\u3081\uff1f\uff09\n\u305d\u3057\u3066\u3001 **917\u884c\u76ee** \u306e `this.scheduleCallbacks_()` \u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3002\n\n```\n 895 goog.Promise.prototype.resolve_ = function(state, x) {\n.\n.\n.\n 912   this.result_ = x;\n 913   this.state_ = state;\n 914   // Since we can no longer be canceled, remove link to parent, so that the\n 915   // child promise does not keep the parent promise alive.\n 916   this.parent_ = null;\n 917   this.scheduleCallbacks_();\n 918\n 919   if (state == goog.Promise.State_.REJECTED &&\n 920       !(x instanceof goog.Promise.CancellationError)) {\n 921     goog.Promise.addUnhandledRejection_(this, x);\n 922   }\n 933 }\n```\n\n`scheduleCallbacks_` \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3002`this.executeCallbacks` \u3092 `sync` \u3067\u5b9f\u884c\u3059\u308b\u3002\n\n```\n1022 goog.Promise.prototype.scheduleCallbacks_ = function() {\n1023   if (!this.executing_) {\n1024     this.executing_ = true;\n1025     goog.async.run(this.executeCallbacks_, this);\n1026   }\n1027 };\n```\n\n`executeCallbacks_` \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3002`popEntry` \u3067\u767b\u9332\u3055\u308c\u305f callback \u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u9806\u756a\u306b\u5b9f\u884c\u3059\u308b\u3002\u304a\u305d\u3089\u304f\u3001 `then` \u3067\u30c1\u30a7\u30fc\u30f3\u3057\u305f callback \u3092\u9806\u756a\u306b\u5b9f\u884c\u3057\u3066\u3044\u304f\u30b7\u30c1\u30e5\u30a8\u30fc\u30b7\u30e7\u30f3\u3002\n\n```\n1101 goog.Promise.prototype.executeCallbacks_ = function() {\n1102   var entry = null;\n1103   while (entry = this.popEntry_()) {\n1104     if (goog.Promise.LONG_STACK_TRACES) {\n1105       this.currentStep_++;\n1106     }\n1107     this.executeCallback_(entry, this.state_, this.result_);\n1108   }\n1109   this.executing_ = false;\n1110 };\n```\n\n`this.popEntry` \u3067\u306f\u3001chain list \u306b\u306a\u3063\u305f `this.callbackEntries` \u304b\u3089 `entry` \u3092\u9806\u756a\u306b\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\n\n```\n1061 goog.Promise.prototype.popEntry_ = function() {\n1062   var entry = null;\n1063   if (this.callbackEntries_) {\n1064     entry = this.callbackEntries_;\n1065     this.callbackEntries_ = entry.next;\n1066     entry.next = null;\n1067   }\n1068   // It the work queue is empty clear the tail too.\n1069   if (!this.callbackEntries_) {\n1070     this.callbackEntriesTail_ = null;\n1071   }\n1072\n1073   if (entry != null) {\n1074     goog.asserts.assert(entry.onFulfilled != null);\n1075   }\n1076   return entry;\n1077 };\n```\n\n**1107\u884c\u76ee** \u306e `this.executeCallback_(entry, this.state_, this.result_)` \u3067\u3001entry \u306e\u4e2d\u8eab\u3092\u5b9f\u884c\uff08 entry \u306f resolve \u3068 reject \u3092\u3069\u3063\u3061\u3082\u6301\u3063\u3066\u308b\u306e\u3067\u3001state \u304c\u5fc5\u8981\uff09\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6642\u70b9\u3067\u3001\u4f55\u3082 callback \u304c\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\uff08 `this.callbackEntries` \u304c\u521d\u671f\u5024\u306e null \u306e\u307e\u307e\u3060\uff09\u3068\u3001null \u304c\u8fd4\u3055\u308c\u308b\u3002\u306e\u3067\u3001promise \u3092\u751f\u6210\u3057\u305f\u3060\u3051\u306e\u72b6\u614b\u3060\u3068\u3001 **1025\u884c\u76ee** \u306e `this.executeCallbacks_` \u306f\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3059\u308b\u306f\u305a\u3002\u5b9f\u969b\u3001`Promise` \u3092\u751f\u6210\u3057\u3066 `then` \u3092\u547c\u3073\u51fa\u3055\u306a\u3044\u3068\u3001\u4f55\u306b\u3082\u8d77\u304d\u306a\u3044\u3002\n\n\u9006\u306b\u3001`promise` \u306b\u5bfe\u3057\u3066 `then` \u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u3061\u3083\u3093\u3068 callback \u306f\u5b9f\u884c\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u304a\u305d\u3089\u304f\u3001`this.result_` \u3067 callback \u7528\u306e\u5024\u3092\u6b8b\u3057\u3066\u3044\u308b\u70ba\u3002\u3064\u307e\u308a\u3001`Promise` \u306e\u521d\u671f\u5316\u6642\u306b\u6307\u5b9a\u3057\u305f\u51e6\u7406\u306f\u3059\u3050\u306b\u5b9f\u884c\u3055\u308c\u3001\u305d\u306e\u6642\u70b9\u3067 `this.value_` \u3068 `this.state_` \u306f\u4fdd\u5b58\u3055\u308c\u3066\u3001\u305d\u306e\u5f8c\u306f `then` \u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u4fdd\u5b58\u3057\u305f\u5024\u304c\u4f7f\u308f\u308c\u308b\u3002\n\n```\n  76 goog.Promise = function(resolver, opt_context) {\n.\n.\n.\n  97   /**\n  98    * The linked list of {@code onFulfilled} and {@code onRejected} callbacks\n  99    * added to this Promise by calls to {@code then()}.\n 100    * @private {?goog.Promise.CallbackEntry_}\n 101    */\n 102   this.callbackEntries_ = null;\n 103\n 104   /**\n 105    * The tail of the linked list of {@code onFulfilled} and {@code onRejected}\n 106    * callbacks added to this Promise by calls to {@code then()}.\n 107    * @private {?goog.Promise.CallbackEntry_}\n 108    */\n 109   this.callbackEntriesTail_ = null;\n```\n\n\u304a\u307e\u3051\u3067 `this.executeCallback_` \u306e\u5b9f\u88c5\u3092\u898b\u3066\u304a\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```\n1124 goog.Promise.prototype.executeCallback_ = function(\n1125     callbackEntry, state, result) {\n1126   // Cancel an unhandled rejection if the then/thenVoid call had an onRejected.\n1127   if (state == goog.Promise.State_.REJECTED &&\n1128       callbackEntry.onRejected && !callbackEntry.always) {\n1129     this.removeUnhandledRejection_();\n1130   }\n1131\n1132   if (callbackEntry.child) {\n1133     // When the parent is settled, the child no longer needs to hold on to it,\n1134     // as the parent can no longer be canceled.\n1135     callbackEntry.child.parent_ = null;\n1136     goog.Promise.invokeCallback_(callbackEntry, state, result);\n1137   } else {\n1138     // Callbacks created with thenAlways or thenVoid do not have the rejection\n1139     // handling code normally set up in the child Promise.\n1140     try {\n1141       callbackEntry.always ?\n1142           callbackEntry.onFulfilled.call(callbackEntry.context) :\n1143           goog.Promise.invokeCallback_(callbackEntry, state, result);\n1144     } catch (err) {\n1145       goog.Promise.handleRejection_.call(null, err);\n1146     }\n1147   }\n1148   goog.Promise.returnEntry_(callbackEntry);\n1149 };\n```\n\n## Promise.prototype.then \u306e\u4e2d\u8eab\u3092\u898b\u308b\ncallback \u306e\u767b\u9332\u306e\u30d5\u30ed\u30fc\u3092\u898b\u3066\u3044\u304f\u3002\n\n```\n 549 goog.Promise.prototype.then = function(\n 550     opt_onFulfilled, opt_onRejected, opt_context) {\n 551\n 552   if (opt_onFulfilled != null) {\n 553     goog.asserts.assertFunction(opt_onFulfilled,\n 554         'opt_onFulfilled should be a function.');\n 555   }\n 556   if (opt_onRejected != null) {\n 557     goog.asserts.assertFunction(opt_onRejected,\n 558         'opt_onRejected should be a function. Did you pass opt_context ' +\n 559         'as the second argument instead of the third?');\n 560   }\n 561\n 562   if (goog.Promise.LONG_STACK_TRACES) {\n 563     this.addStackTrace_(new Error('then'));\n 564   }\n 565\n 566   return this.addChildPromise_(\n 567       goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n 568       goog.isFunction(opt_onRejected) ? opt_onRejected : null,\n 569       opt_context);\n 570 };\n 571 goog.Thenable.addImplementation(goog.Promise);\n```\n\nthen \u306e\u4e2d\u3067\u306f\u307b\u307c\u4f55\u3082\u3057\u3066\u306a\u304f\u3066\u3001\u305f\u3060 `addChildPromise_` \u3092\u547c\u3093\u3067\u3044\u308b\u3002\n\n```\n 812 goog.Promise.prototype.addChildPromise_ = function(\n 813     onFulfilled, onRejected, opt_context) {\n 814\n 815   /** @type {goog.Promise.CallbackEntry_} */\n 816   var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);\n 817\n 818   callbackEntry.child = new goog.Promise(function(resolve, reject) {\n 819     // Invoke onFulfilled, or resolve with the parent's value if absent.\n 820     callbackEntry.onFulfilled = onFulfilled ? function(value) {\n 821       try {\n 822         var result = onFulfilled.call(opt_context, value);\n 823         resolve(result);\n 824       } catch (err) {\n 825         reject(err);\n 826       }\n 827     } : resolve;\n 828\n 829     // Invoke onRejected, or reject with the parent's reason if absent.\n 830     callbackEntry.onRejected = onRejected ? function(reason) {\n 831       try {\n 832         var result = onRejected.call(opt_context, reason);\n 833         if (!goog.isDef(result) &&\n 834             reason instanceof goog.Promise.CancellationError) {\n 835           // Propagate cancellation to children if no other result is returned.\n 836           reject(reason);\n 837         } else {\n 838           resolve(result);\n 839         }\n 840       } catch (err) {\n 841         reject(err);\n 842       }\n 843     } : reject;\n 844   });\n 845\n 845\n 846   callbackEntry.child.parent_ = this;\n 847   this.addCallbackEntry_(callbackEntry);\n 848   return callbackEntry.child;\n 849 };\n```\n- 1. \u7a7a\u306ecallbackEntry\u3092\u4f5c\u6210\n- 2. callbackEntry.child \u306b\u3001Promise\u3092\u8a2d\u5b9a\u3002\u3053\u306e\u969b\u3001\u3053\u306e Promise \u3067\u8a2d\u5b9a\u3055\u308c\u305f `resolve` \u306e \u5f15\u6570\u306b\u306f\u3001`onFullfilled` \u306e\u8fd4\u308a\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n- 3. then \u3092\u547c\u3073\u51fa\u3057\u305f promise \u3092 callbackEntry.child.parent_ \u3068\u3057\u3066\u8a2d\u5b9a\uff08`Promise` \u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u4f5c\u308b\uff09\u3002\n- 4. this.addCallbackEntry_(callbackEntry) \u3092\u547c\u3076\uff08\u3053\u3053\u3067 callback \u306e\u8ffd\u52a0\u3084\u5b9f\u884c\u3092\u884c\u3046\uff09\n- 5. callbackEntry.child \u3092\u8fd4\u3059\uff08\u3053\u308c\u304c Promise \u306b\u306a\u3063\u3066\u308b\uff09\n\ncallbackEntry\u306e\u521d\u671f\u5316\u306f `getCallbackEntry` \u3067\u884c\u3063\u3066\u3044\u308b\u3002\n\n```\n 300 goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {\n 301   var entry = goog.Promise.freelist_.get();\n 302   entry.onFulfilled = onFulfilled;\n 303   entry.onRejected = onRejected;\n 304   entry.context = context;\n 305   return entry;\n 306 };\n```\n\n\u307e\u305f\u3001`addCallbackEntry_` \u306f\u4ee5\u4e0b\u3002\u3053\u3053\u3067 **787\u884c\u76ee** \u3067 `schedleCallbacks_()` \u304c\u547c\u3070\u308c\u3066\u3044\u308b\u70ba\u3001`then` \u3092\u547c\u3076\u305f\u3073\u306b callback \u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```\n 783 goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {\n 784   if (!this.hasEntry_() &&\n 785       (this.state_ == goog.Promise.State_.FULFILLED ||\n 786        this.state_ == goog.Promise.State_.REJECTED)) {\n 787     this.scheduleCallbacks_();\n 788   }\n 789   this.queueEntry_(callbackEntry);\n 790 };\n```\n\n\u3061\u306a\u307f\u306b\u3001**784\u884c\u76ee** \u306e `hasEntry_` \u3068\u3044\u3046\u306e\u306f `this.callbackEntries` \u306e\u6709\u7121\u3092\u78ba\u304b\u3081\u3066\u308b\u3060\u3051\u3063\u307d\u3044\u3002\n\n```\n1034 goog.Promise.prototype.hasEntry_ = function() {\n1035   return !!this.callbackEntries_;\n1036 };\n```\n\n\u307e\u305f\u3001 **789\u884c\u76ee** \u306e `queueEntry_` \u3067\u3001chain list \u306e`this.callbackEntries_` \u306b\u5bfe\u3057\u3066 callback \u306e\u8ffd\u52a0\u3092\u884c\u3046\u3002\n\n```\n1043 goog.Promise.prototype.queueEntry_ = function(entry) {\n1044   goog.asserts.assert(entry.onFulfilled != null);\n1045\n1046   if (this.callbackEntriesTail_) {\n1047     this.callbackEntriesTail_.next = entry;\n1048     this.callbackEntriesTail_ = entry;\n1049   } else {\n1050     // It the work queue was empty set the head too.\n1051     this.callbackEntries_ = entry;\n1052     this.callbackEntriesTail_ = entry;\n1053   }\n1054 };\n```\n\n\u3053\u3053\u307e\u3067\u3067\u3001`callbackEntries_` \u3078\u306e callback \u306e\u8ffd\u52a0\u51e6\u7406\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n## \u307e\u3068\u3081\nchromium \u3067\u306f\u3001`Promise` \u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n- `new Promise()` \u306b\u767b\u9332\u3057\u305f\u51e6\u7406\u306f\u5373\u5ea7\u306b\u5b9f\u884c\u3055\u308c\u308b\u3002\u3053\u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u305f\u6642\u70b9\u3067\u3001 `goog.Promise.State_.FULFILLED` \u304b `goog.Promise.State_.FULFILLED` \u304c `this.state_` \u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u3001callback \u306b\u6e21\u3055\u308c\u308b\u5024\u3067\u3042\u308b `this.result_` \u3082\u4fdd\u5b58\u3055\u308c\u308b\u3002\u3053\u306e\u6642\u70b9\u3067\u3001`then` \u3067 callback \u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u5426\u304b\u306b\u95a2\u308f\u3089\u305a `this.executeCallbacks_`\uff08\u767b\u9332\u3055\u308c\u305f callback \u304c\u7121\u304f\u306a\u308b\u307e\u3067\u5168\u3066\u5b9f\u884c\u3059\u308b\u51e6\u7406\uff09\u304c\u8d70\u308b\u3002\n- `then` \u306e\u547c\u3073\u51fa\u3057\u3067 callback \u3092\u767b\u9332\u3059\u308b\u3002\u3053\u306e\u6642\u3001\u8fd4\u308a\u5024\u3068\u3057\u3066 Promise \u3092\u8fd4\u3059\u304c\u3001Promise \u306e \u521d\u671f\u5316\u306e\u969b\u306b \u300ccallback \u306e\u8fd4\u308a\u5024\u3092\u4f7f\u3046\u51e6\u7406\u300d\u3092\u6e21\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066 chaining \u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002`then` \u306e\u51e6\u7406\u306e\u969b\u306b\u3082 `this.executeCallbacks_` \u304c\u8d70\u308b\u3002\n- `then` \u306b\u6e21\u3057\u305f callback \u306e\u8fd4\u308a\u5024\u304c `Promise` \u306e\u30b1\u30fc\u30b9\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306f `Promise` \u751f\u6210\u6642\u306b\u8d70\u308b `this.resolve_` \u306e\u4e2d\u3067 `this.maybeThen_` \u304c\u8d70\u308b\u3053\u3068\u3067\u51e6\u7406\u3055\u308c\u308b\u3002\n", "tags": ["es6", "promise", "JavaScript", "Chrome", "Chromium"]}