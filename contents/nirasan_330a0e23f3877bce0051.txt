{"tags": ["Go", "websocket"], "context": "\n\n\u306f\u3058\u3081\u306b\n\nGo \u8a00\u8a9e\u306e Websocket \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af github.com/trevex/golem \u3092\u4f7f\u3063\u3066 Websocket \u901a\u4fe1\u3092\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u304f\u3063\u3066\u307f\u308b\n\n\nWebsocket \u3068 golem \u306b\u3064\u3044\u3066\n\nGo \u8a00\u8a9e\u306e Websocket \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f golang.org/x/net/websocket \u3084 github.com/gorilla/websocket \u306a\u3069\u304c\u3042\u308b\n\ngithub.com/trevex/golem \u306f\u8efd\u91cf\u306a Websocket \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\ngithub.com/gorilla/websocket \u3068\u304b\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3082\u3044\u3044\u3051\u3069 golem \u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u3063\u3066\u624b\u8efd\u306b Websocket \u901a\u4fe1\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u308b\n\n\n\u30a4\u30d9\u30f3\u30c8\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\nJSON \u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\n\u30eb\u30fc\u30e0\u6a5f\u80fd\n\u63a5\u7d9a\u578b\u306e\u62e1\u5f35\n\n\n\n\n\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u3064\u304f\u308b\n\n\n\u30a4\u30d9\u30f3\u30c8\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0 \u3068 JSON \u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9 \u306e\u5b9f\u4f8b\u3092\u898b\u308b\u305f\u3081\u3001\u9001\u4fe1\u3057\u305f\u5185\u5bb9\u304c\u305d\u306e\u307e\u307e\u8fd4\u4fe1\u3055\u308c\u308b\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n\n\u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u3067 echo.go \u3092\u4f5c\u6210\n\u30eb\u30fc\u30bf\u306e\u4f7f\u3044\u65b9\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u3092\u3057\u3066 http.HadleFunc \u767b\u9332\u3059\u308b\u3060\u3051\n\ngolem.Router \u306e On \u30e1\u30bd\u30c3\u30c9\u3067\u30a4\u30d9\u30f3\u30c8\u540d\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u5b9a\u7fa9\u3055\u308c\u308b\n\nOn(\"echo\", echo) \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u304d echo {\"msg\":\"hello world\"} \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3068\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 {\u30a4\u30d9\u30f3\u30c8\u540d} {JSON\u6587\u5b57\u5217} \u3068\u5224\u5b9a\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570 echo(conn *golem.Connection, data *echoMessage) \u306e\u5f15\u6570\u304b\u3089 JSON \u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u578b\u306f *echoMessage \u3060\u3068\u5224\u65ad\u3057\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u5024\u3092\u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n\npackage main\n\nimport (\n    \"github.com/trevex/golem\"\n    \"net/http\"\n    \"log\"\n)\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n    http.HandleFunc(\"/ws\", createRouter().Handler())\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n    router := golem.NewRouter()\n    router.On(\"echo\", echo)\n    return router\n}\n\n// echo \u30a4\u30d9\u30f3\u30c8\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\u95a2\u6570\n// \u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\nfunc echo(conn *golem.Connection, data *echoMessage) {\n    conn.Emit(\"echo\", data)\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30af\u30e9\u30b9\ntype echoMessage struct {\n    Msg string `json:\"msg\"`\n}\n\n\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u3067 echo_test.go \u3092\u4f5c\u6210\n\npackage main\n\nimport (\n    \"errors\"\n    \"github.com/gorilla/websocket\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"strings\"\n    \"testing\"\n    \"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n    // \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n    ts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n    defer ts.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f5c\u6210\n    client1, err := createClient(ts)\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer client1.Close()\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\n    err = writeMessage(client1, `echo {\"msg\":\"hello world\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\n    res, err := readMessage(client1)\n    if err != nil {\n        t.Error(err)\n    }\n    // \u9001\u4fe1\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304f\u308b\n    if res != `echo {\"msg\":\"hello world\"}` {\n        t.Error(\"response is not valid: \" + res)\n    }\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n    dialer := websocket.Dialer{\n        Subprotocols:    []string{},\n        ReadBufferSize:  1024,\n        WriteBufferSize: 1024,\n    }\n\n    url := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n    header := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n    conn, _, err := dialer.Dial(url, header)\n    if err != nil {\n        return nil, err\n    }\n\n    return conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n    return conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n    conn.SetReadDeadline(time.Now().Add(1 * time.Second))\n    messageType, p, err := conn.ReadMessage()\n    if err != nil {\n        return \"\", err\n    }\n    if messageType != websocket.TextMessage {\n        return \"\", errors.New(\"invalid message type\")\n    }\n    return string(p), nil\n}\n\n\n\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u3064\u304f\u308b\n\n\n\u30eb\u30fc\u30e0\u6a5f\u80fd \u3092\u5b9f\u4f8b\u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n\n\u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\nchat.go \u3068\u3057\u3066\u4f5c\u6210\n\ngolem.RoomManager \u306e Join \u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u306b\u5165\u308a Emit \u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u3066\u3044\u308b\u5168\u54e1\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3066\u3044\u308b\n\npackage main\n\nimport (\n    \"github.com/trevex/golem\"\n    \"net/http\"\n    \"log\"\n)\n\nvar room_manager = golem.NewRoomManager()\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n    http.HandleFunc(\"/ws\", createRouter().Handler())\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n    router := golem.NewRouter()\n    router.On(\"join\", join)\n    router.On(\"say\", say)\n    return router\n}\n\nfunc join(conn *golem.Connection, data *joinRequest) {\n    room_manager.Join(data.Name, conn)\n}\n\ntype joinRequest struct {\n    Name string `json:\"name\"`\n}\n\nfunc say(conn *golem.Connection, data *sayRequest) {\n    room_manager.Emit(data.Name, \"say\", &sayResponse{Msg: data.Msg})\n}\n\ntype sayRequest struct {\n    Name string `json:\"name\"`\n    Msg  string `json:\"msg\"`\n}\n\ntype sayResponse struct {\n    Msg string `json:\"msg\"`\n}\n\n\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\nchat_test.go \u3068\u3057\u3066\u4f5c\u6210\n\npackage main\n\nimport (\n    \"errors\"\n    \"github.com/gorilla/websocket\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"strings\"\n    \"testing\"\n    \"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n    // \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n    ts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n    defer ts.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u306e\u4f5c\u6210\n    client1, err := createClient(ts)\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer client1.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u306e\u4f5c\u6210\n    client2, err := createClient(ts)\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer client2.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n    err = writeMessage(client1, `join {\"name\":\"room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n    err = writeMessage(client2, `join {\"name\":\"room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\n    err = writeMessage(client1, `say {\"name\":\"room1\",\"msg\":\"hello room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n    res, err := readMessage(client1)\n    if err != nil {\n        t.Error(err)\n    }\n    if res != `say {\"msg\":\"hello room1\"}` {\n        t.Error(\"response is not valid: \" + res)\n    }\n\n    // \u540c\u3058\u30eb\u30fc\u30e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u3082\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n    res, err = readMessage(client2)\n    if err != nil {\n        t.Error(err)\n    }\n    if res != `say {\"msg\":\"hello room1\"}` {\n        t.Error(\"response is not valid: \" + res)\n    }\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n    dialer := websocket.Dialer{\n        Subprotocols:    []string{},\n        ReadBufferSize:  1024,\n        WriteBufferSize: 1024,\n    }\n\n    url := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n    header := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n    conn, _, err := dialer.Dial(url, header)\n    if err != nil {\n        return nil, err\n    }\n\n    return conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n    return conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n    conn.SetReadDeadline(time.Now().Add(1 * time.Second))\n    messageType, p, err := conn.ReadMessage()\n    if err != nil {\n        return \"\", err\n    }\n    if messageType != websocket.TextMessage {\n        return \"\", errors.New(\"invalid message type\")\n    }\n    return string(p), nil\n}\n\n\n\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u62e1\u5f35\u3059\u308b\n\n\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u306b\u304a\u3044\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089 say \u3092\u9001\u4fe1\u3059\u308b\u969b\u306b\u6bce\u56de\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304c\u5197\u9577\u3060\u3068\u611f\u3058\u305f\u305f\u3081\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\n\u3053\u306e\u5834\u5408 golem.Connection \u3092\u30e1\u30f3\u30d0\u30fc\u3068\u3059\u308b\u65b0\u3057\u3044\u578b\u3092\u4f5c\u6210\u3057\u3066 golem.Connection \u306e\u4ee3\u308f\u308a\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\nchat_extension.go \u306e\u4f5c\u6210\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b golem.Connection \u3092\u30e1\u30f3\u30d0\u30fc\u306b\u6301\u3064\u578b\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u95a2\u6570\u3092\u4f5c\u6210\u3057 golem.Router.SetConnectionExtension \u3067\u6307\u5b9a\u3059\u308b\u3068 conn \u3068\u3057\u3066 say \u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u95a2\u6570\u304b\u3089\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u305d\u306e\u969b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u95a2\u6570\u5074\u306e\u578b\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u4eca\u56de\u306f join \u3067 conn.Name \u306b\u30eb\u30fc\u30e0\u540d\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3053\u3068\u3067 say \u3067\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u305b\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b\n\npackage main\n\nimport (\n    \"github.com/trevex/golem\"\n    \"net/http\"\n    \"log\"\n)\n\nvar room_manager = golem.NewRoomManager()\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n    http.HandleFunc(\"/ws\", createRouter().Handler())\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n    router := golem.NewRouter()\n    router.SetConnectionExtension(NewConnection)\n    router.On(\"join\", join)\n    router.On(\"say\", say)\n    return router\n}\n\ntype Connection struct {\n    *golem.Connection\n    Name string\n}\n\nfunc NewConnection(conn *golem.Connection) *Connection {\n    return &Connection{Connection: conn}\n}\n\nfunc join(conn *Connection, data *joinRequest) {\n    conn.Name = data.Name\n    room_manager.Join(data.Name, conn.Connection)\n}\n\ntype joinRequest struct {\n    Name string `json:\"name\"`\n}\n\nfunc say(conn *Connection, data *sayRequest) {\n    room_manager.Emit(conn.Name, \"say\", &sayResponse{Msg: data.Msg})\n}\n\ntype sayRequest struct {\n    Msg  string `json:\"msg\"`\n}\n\ntype sayResponse struct {\n    Msg string `json:\"msg\"`\n}\n\n\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\nchat_extension_test.go \u306e\u4f5c\u6210\n\npackage main\n\nimport (\n    \"errors\"\n    \"github.com/gorilla/websocket\"\n    \"net/http\"\n    \"net/http/httptest\"\n    \"strings\"\n    \"testing\"\n    \"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n    // \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n    ts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n    defer ts.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u306e\u4f5c\u6210\n    client1, err := createClient(ts)\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer client1.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u306e\u4f5c\u6210\n    client2, err := createClient(ts)\n    if err != nil {\n        t.Fatal(err)\n    }\n    defer client2.Close()\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n    err = writeMessage(client1, `join {\"name\":\"room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n    err = writeMessage(client2, `join {\"name\":\"room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\n    err = writeMessage(client1, `say {\"msg\":\"hello room1\"}`)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n    res, err := readMessage(client1)\n    if err != nil {\n        t.Error(err)\n    }\n    if res != `say {\"msg\":\"hello room1\"}` {\n        t.Error(\"response is not valid: \" + res)\n    }\n\n    // \u540c\u3058\u30eb\u30fc\u30e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u3082\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n    res, err = readMessage(client2)\n    if err != nil {\n        t.Error(err)\n    }\n    if res != `say {\"msg\":\"hello room1\"}` {\n        t.Error(\"response is not valid: \" + res)\n    }\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n    dialer := websocket.Dialer{\n        Subprotocols:    []string{},\n        ReadBufferSize:  1024,\n        WriteBufferSize: 1024,\n    }\n\n    url := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n    header := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n    conn, _, err := dialer.Dial(url, header)\n    if err != nil {\n        return nil, err\n    }\n\n    return conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n    return conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n    conn.SetReadDeadline(time.Now().Add(1 * time.Second))\n    messageType, p, err := conn.ReadMessage()\n    if err != nil {\n        return \"\", err\n    }\n    if messageType != websocket.TextMessage {\n        return \"\", errors.New(\"invalid message type\")\n    }\n    return string(p), nil\n}\n\n\n\u3055\u3044\u3054\u306b\n\ngolem \u4f7f\u3063\u3066\u7c21\u5358\u306a\u30b2\u30fc\u30e0\u30921\u672c\u4f5c\u3063\u3066\u307f\u3066 RoomManager \u306e\u6271\u3044\u65b9\u3084\u30eb\u30fc\u30e0\u6bce\u306e\u30c7\u30fc\u30bf\u306e\u6301\u3061\u65b9\u304c\u5fae\u5999\u3060\u3068\u611f\u3058\u305f\u306e\u3067 golem \u3092\u30d5\u30a9\u30fc\u30af\u3057\u3066\u81ea\u5206\u306e\u597d\u307f\u306b\u6539\u5909\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u6700\u5f8c\u306b\u3042\u3052\u305f\u62e1\u5f35\u6a5f\u80fd\u306b\u3064\u3044\u3066\u77e5\u308a\u3001\u6539\u5909\u306a\u3093\u304b\u3057\u306a\u304f\u3066\u3082\u62e1\u5f35\u6a5f\u80fd\u3067\u5341\u5206\u3060\u3063\u305f\u3068\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n# \u306f\u3058\u3081\u306b\n* Go \u8a00\u8a9e\u306e Websocket \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af `github.com/trevex/golem` \u3092\u4f7f\u3063\u3066 Websocket \u901a\u4fe1\u3092\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u304f\u3063\u3066\u307f\u308b\n\n# Websocket \u3068 golem \u306b\u3064\u3044\u3066\n* Go \u8a00\u8a9e\u306e Websocket \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f `golang.org/x/net/websocket` \u3084 `github.com/gorilla/websocket` \u306a\u3069\u304c\u3042\u308b\n* `github.com/trevex/golem` \u306f\u8efd\u91cf\u306a Websocket \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n* `github.com/gorilla/websocket` \u3068\u304b\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3082\u3044\u3044\u3051\u3069 `golem` \u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u3063\u3066\u624b\u8efd\u306b Websocket \u901a\u4fe1\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u308b\n  * \u30a4\u30d9\u30f3\u30c8\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\n  * JSON \u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\n  * \u30eb\u30fc\u30e0\u6a5f\u80fd\n  * \u63a5\u7d9a\u578b\u306e\u62e1\u5f35\n\n# \u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u3064\u304f\u308b\n* `\u30a4\u30d9\u30f3\u30c8\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0` \u3068 `JSON \u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9` \u306e\u5b9f\u4f8b\u3092\u898b\u308b\u305f\u3081\u3001\u9001\u4fe1\u3057\u305f\u5185\u5bb9\u304c\u305d\u306e\u307e\u307e\u8fd4\u4fe1\u3055\u308c\u308b\u30a8\u30b3\u30fc\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n## \u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* \u4ee5\u4e0b\u306e\u5185\u5bb9\u3067 `echo.go` \u3092\u4f5c\u6210\n* \u30eb\u30fc\u30bf\u306e\u4f7f\u3044\u65b9\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8a2d\u5b9a\u3092\u3057\u3066 `http.HadleFunc` \u767b\u9332\u3059\u308b\u3060\u3051\n* `golem.Router` \u306e `On` \u30e1\u30bd\u30c3\u30c9\u3067\u30a4\u30d9\u30f3\u30c8\u540d\u3068\u95a2\u6570\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u5b9a\u7fa9\u3055\u308c\u308b\n* `On(\"echo\", echo)` \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u304d `echo {\"msg\":\"hello world\"}` \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3068\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092 `{\u30a4\u30d9\u30f3\u30c8\u540d} {JSON\u6587\u5b57\u5217}` \u3068\u5224\u5b9a\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570 `echo(conn *golem.Connection, data *echoMessage)` \u306e\u5f15\u6570\u304b\u3089 JSON \u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u578b\u306f `*echoMessage` \u3060\u3068\u5224\u65ad\u3057\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u5024\u3092\u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n\n```go\npackage main\n\nimport (\n\t\"github.com/trevex/golem\"\n\t\"net/http\"\n\t\"log\"\n)\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n\thttp.HandleFunc(\"/ws\", createRouter().Handler())\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n\trouter := golem.NewRouter()\n\trouter.On(\"echo\", echo)\n\treturn router\n}\n\n// echo \u30a4\u30d9\u30f3\u30c8\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\u95a2\u6570\n// \u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\nfunc echo(conn *golem.Connection, data *echoMessage) {\n\tconn.Emit(\"echo\", data)\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30af\u30e9\u30b9\ntype echoMessage struct {\n\tMsg string `json:\"msg\"`\n}\n```\n\n## \u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* \u4ee5\u4e0b\u306e\u5185\u5bb9\u3067 `echo_test.go` \u3092\u4f5c\u6210\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n\t// \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n\tts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n\tdefer ts.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f5c\u6210\n\tclient1, err := createClient(ts)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer client1.Close()\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\n\terr = writeMessage(client1, `echo {\"msg\":\"hello world\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\n\tres, err := readMessage(client1)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\t// \u9001\u4fe1\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304f\u308b\n\tif res != `echo {\"msg\":\"hello world\"}` {\n\t\tt.Error(\"response is not valid: \" + res)\n\t}\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n\tdialer := websocket.Dialer{\n\t\tSubprotocols:    []string{},\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t}\n\n\turl := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n\theader := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n\tconn, _, err := dialer.Dial(url, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n\treturn conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n\tconn.SetReadDeadline(time.Now().Add(1 * time.Second))\n\tmessageType, p, err := conn.ReadMessage()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif messageType != websocket.TextMessage {\n\t\treturn \"\", errors.New(\"invalid message type\")\n\t}\n\treturn string(p), nil\n}\n```\n\n# \u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u3064\u304f\u308b\n* `\u30eb\u30fc\u30e0\u6a5f\u80fd` \u3092\u5b9f\u4f8b\u3067\u78ba\u8a8d\u3059\u308b\u305f\u3081\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n## \u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* `chat.go` \u3068\u3057\u3066\u4f5c\u6210\n* `golem.RoomManager` \u306e `Join` \u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u306b\u5165\u308a `Emit` \u30e1\u30bd\u30c3\u30c9\u3067\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\u3057\u3066\u3044\u308b\u5168\u54e1\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3066\u3044\u308b\n\n```go\npackage main\n\nimport (\n\t\"github.com/trevex/golem\"\n\t\"net/http\"\n\t\"log\"\n)\n\nvar room_manager = golem.NewRoomManager()\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n\thttp.HandleFunc(\"/ws\", createRouter().Handler())\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n\trouter := golem.NewRouter()\n\trouter.On(\"join\", join)\n\trouter.On(\"say\", say)\n\treturn router\n}\n\nfunc join(conn *golem.Connection, data *joinRequest) {\n\troom_manager.Join(data.Name, conn)\n}\n\ntype joinRequest struct {\n\tName string `json:\"name\"`\n}\n\nfunc say(conn *golem.Connection, data *sayRequest) {\n\troom_manager.Emit(data.Name, \"say\", &sayResponse{Msg: data.Msg})\n}\n\ntype sayRequest struct {\n\tName string `json:\"name\"`\n\tMsg  string `json:\"msg\"`\n}\n\ntype sayResponse struct {\n\tMsg string `json:\"msg\"`\n}\n```\n\n## \u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* `chat_test.go` \u3068\u3057\u3066\u4f5c\u6210\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n\t// \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n\tts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n\tdefer ts.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u306e\u4f5c\u6210\n\tclient1, err := createClient(ts)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer client1.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u306e\u4f5c\u6210\n\tclient2, err := createClient(ts)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer client2.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n\terr = writeMessage(client1, `join {\"name\":\"room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n\terr = writeMessage(client2, `join {\"name\":\"room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\n\terr = writeMessage(client1, `say {\"name\":\"room1\",\"msg\":\"hello room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n\tres, err := readMessage(client1)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif res != `say {\"msg\":\"hello room1\"}` {\n\t\tt.Error(\"response is not valid: \" + res)\n\t}\n\n\t// \u540c\u3058\u30eb\u30fc\u30e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u3082\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n\tres, err = readMessage(client2)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif res != `say {\"msg\":\"hello room1\"}` {\n\t\tt.Error(\"response is not valid: \" + res)\n\t}\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n\tdialer := websocket.Dialer{\n\t\tSubprotocols:    []string{},\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t}\n\n\turl := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n\theader := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n\tconn, _, err := dialer.Dial(url, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n\treturn conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n\tconn.SetReadDeadline(time.Now().Add(1 * time.Second))\n\tmessageType, p, err := conn.ReadMessage()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif messageType != websocket.TextMessage {\n\t\treturn \"\", errors.New(\"invalid message type\")\n\t}\n\treturn string(p), nil\n}\n```\n\n# \u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u62e1\u5f35\u3059\u308b\n* \u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u306b\u304a\u3044\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089 `say` \u3092\u9001\u4fe1\u3059\u308b\u969b\u306b\u6bce\u56de\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304c\u5197\u9577\u3060\u3068\u611f\u3058\u305f\u305f\u3081\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\n* \u3053\u306e\u5834\u5408 `golem.Connection` \u3092\u30e1\u30f3\u30d0\u30fc\u3068\u3059\u308b\u65b0\u3057\u3044\u578b\u3092\u4f5c\u6210\u3057\u3066 `golem.Connection` \u306e\u4ee3\u308f\u308a\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n## \u30e1\u30a4\u30f3\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* `chat_extension.go` \u306e\u4f5c\u6210\n* \u4ee5\u4e0b\u306e\u3088\u3046\u306b `golem.Connection` \u3092\u30e1\u30f3\u30d0\u30fc\u306b\u6301\u3064\u578b\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u95a2\u6570\u3092\u4f5c\u6210\u3057 `golem.Router.SetConnectionExtension` \u3067\u6307\u5b9a\u3059\u308b\u3068 `conn` \u3068\u3057\u3066 `say` \u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u95a2\u6570\u304b\u3089\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n* \u305d\u306e\u969b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u95a2\u6570\u5074\u306e\u578b\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n* \u4eca\u56de\u306f `join` \u3067 `conn.Name` \u306b\u30eb\u30fc\u30e0\u540d\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3053\u3068\u3067 `say` \u3067\u30eb\u30fc\u30e0\u540d\u3092\u6307\u5b9a\u305b\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b\n\n```go\npackage main\n\nimport (\n\t\"github.com/trevex/golem\"\n\t\"net/http\"\n\t\"log\"\n)\n\nvar room_manager = golem.NewRoomManager()\n\n// HTTP \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nfunc main() {\n\thttp.HandleFunc(\"/ws\", createRouter().Handler())\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\n// \u30eb\u30fc\u30bf\u30fc\u306e\u4f5c\u6210\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u8a2d\u5b9a\nfunc createRouter() *golem.Router {\n\trouter := golem.NewRouter()\n\trouter.SetConnectionExtension(NewConnection)\n\trouter.On(\"join\", join)\n\trouter.On(\"say\", say)\n\treturn router\n}\n\ntype Connection struct {\n\t*golem.Connection\n\tName string\n}\n\nfunc NewConnection(conn *golem.Connection) *Connection {\n\treturn &Connection{Connection: conn}\n}\n\nfunc join(conn *Connection, data *joinRequest) {\n\tconn.Name = data.Name\n\troom_manager.Join(data.Name, conn.Connection)\n}\n\ntype joinRequest struct {\n\tName string `json:\"name\"`\n}\n\nfunc say(conn *Connection, data *sayRequest) {\n\troom_manager.Emit(conn.Name, \"say\", &sayResponse{Msg: data.Msg})\n}\n\ntype sayRequest struct {\n\tMsg  string `json:\"msg\"`\n}\n\ntype sayResponse struct {\n\tMsg string `json:\"msg\"`\n}\n```\n\n## \u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n* `chat_extension_test.go` \u306e\u4f5c\u6210\n\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestValidCase(t *testing.T) {\n\t// \u30b5\u30fc\u30d0\u30fc\u306e\u4f5c\u6210\n\tts := httptest.NewServer(http.HandlerFunc(createRouter().Handler()))\n\tdefer ts.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u306e\u4f5c\u6210\n\tclient1, err := createClient(ts)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer client1.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u306e\u4f5c\u6210\n\tclient2, err := createClient(ts)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer client2.Close()\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n\terr = writeMessage(client1, `join {\"name\":\"room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u304c\u30eb\u30fc\u30e0\u306b\u53c2\u52a0\n\terr = writeMessage(client2, `join {\"name\":\"room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\n\terr = writeMessage(client1, `say {\"msg\":\"hello room1\"}`)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// \u30af\u30e9\u30a4\u30a2\u30f3\u30c81\u304c\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n\tres, err := readMessage(client1)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif res != `say {\"msg\":\"hello room1\"}` {\n\t\tt.Error(\"response is not valid: \" + res)\n\t}\n\n\t// \u540c\u3058\u30eb\u30fc\u30e0\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c82\u3082\u767a\u8a00\u3092\u53d7\u3051\u53d6\u308b\n\tres, err = readMessage(client2)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tif res != `say {\"msg\":\"hello room1\"}` {\n\t\tt.Error(\"response is not valid: \" + res)\n\t}\n}\n\nfunc createClient(ts *httptest.Server) (*websocket.Conn, error) {\n\tdialer := websocket.Dialer{\n\t\tSubprotocols:    []string{},\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t}\n\n\turl := strings.Replace(ts.URL, \"http://\", \"ws://\", 1)\n\theader := http.Header{\"Accept-Encoding\": []string{\"gzip\"}}\n\n\tconn, _, err := dialer.Dial(url, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc writeMessage(conn *websocket.Conn, message string) error {\n\treturn conn.WriteMessage(websocket.TextMessage, []byte(message))\n}\n\nfunc readMessage(conn *websocket.Conn) (string, error) {\n\tconn.SetReadDeadline(time.Now().Add(1 * time.Second))\n\tmessageType, p, err := conn.ReadMessage()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif messageType != websocket.TextMessage {\n\t\treturn \"\", errors.New(\"invalid message type\")\n\t}\n\treturn string(p), nil\n}\n```\n\n# \u3055\u3044\u3054\u306b\n* golem \u4f7f\u3063\u3066\u7c21\u5358\u306a\u30b2\u30fc\u30e0\u30921\u672c\u4f5c\u3063\u3066\u307f\u3066 RoomManager \u306e\u6271\u3044\u65b9\u3084\u30eb\u30fc\u30e0\u6bce\u306e\u30c7\u30fc\u30bf\u306e\u6301\u3061\u65b9\u304c\u5fae\u5999\u3060\u3068\u611f\u3058\u305f\u306e\u3067 golem \u3092\u30d5\u30a9\u30fc\u30af\u3057\u3066\u81ea\u5206\u306e\u597d\u307f\u306b\u6539\u5909\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u6700\u5f8c\u306b\u3042\u3052\u305f\u62e1\u5f35\u6a5f\u80fd\u306b\u3064\u3044\u3066\u77e5\u308a\u3001\u6539\u5909\u306a\u3093\u304b\u3057\u306a\u304f\u3066\u3082\u62e1\u5f35\u6a5f\u80fd\u3067\u5341\u5206\u3060\u3063\u305f\u3068\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n"}