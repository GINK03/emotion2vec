{"tags": ["TensorFlow", "ROS", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "GitHub"], "context": "\n\n\u307e\u3048\u304c\u304d\n\n\u4ee5\u524d, Tensorflow\u306e\u5b66\u7fd2\u6e08\u307fMNIST\u304c\u52d5\u304fROS\u306e\u30ce\u30fc\u30c9\u3092\u4f5c\u3063\u305f.\n\u7d39\u4ecb\u8a18\u4e8b\u3092Qiita\u306b, \u30b3\u30fc\u30c9\u3092GitHub\u306b\u3042\u3052\u305f. \n\u4eca\u56de\u306f\u4e0a\u306eQiita\u8a18\u4e8b\u3067\u66f8\u304d\u304d\u308c\u306a\u304b\u3063\u305f\u30b3\u30fc\u30c9\u89e3\u8aac\u306e\u90e8\u5206\u3092\u66f8\u304f.\n\n\n\u7d50\u679c\n\u7d30\u304b\u3044\u30b3\u30fc\u30c9\u89e3\u8aac\u306b\u5165\u308b\u524d\u306b\u5b9f\u884c\u3059\u308b\u3068\u3069\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3060\u3051\u3092\u5148\u306b\u793a\u3057\u3066\u304a\u304f.\n\u3053\u3093\u306a\u611f\u3058\u3067\u53f3\u304c\u30ab\u30e1\u30e9\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u624b\u66f8\u304d\u306e9\n\u5de6\u304c\u5b66\u7fd2\u6e08\u307f\u306eCNN\u304b\u3089\u306e\u63a8\u5b9a\u7d50\u679c\u3067\u3042\u308a, 9\u3092\u898b\u3066\u3061\u3083\u3093\u30689\u3092\u8fd4\u3057\u3066\u3044\u308b. \n\u4eca\u56de\u306f\u3053\u3093\u306a\u611f\u3058\u306eCNN\u304cROS\u4e0a\u3067\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f.\n\u5b9f\u884c\u65b9\u6cd5\u3084\u6e96\u5099\u7b49\u306e\u8a73\u7d30\u306f\u4ee5\u524d\u306eQiita\u8a18\u4e8b\u53c2\u7167\u306e\u3053\u3068. \n\n\u51e6\u7406\u306e\u6982\u8981\n\u51e6\u7406\u306e\u6982\u8981\u3092\u5fa9\u7fd2\u3057\u3066\u304a\u304f\u3068\n\nCNN\u3092\u69cb\u6210\u3057\u3066\u5b66\u7fd2\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u51fa\u3057\n\u30ab\u30e1\u30e9\u30ce\u30fc\u30c9\u304b\u3089\u753b\u50cf\u60c5\u5831\u3092Subscribe\n\u753b\u50cf\u60c5\u5831\u3092MNIST\u306eCNN\u306b\u5165\u308b\u3088\u3046, 28*28\u306b\u5727\u7e2e\uff06\u767d\u9ed2\u53cd\u8ee22\u5024\u5316\nCNN\u306b\u753b\u50cf\u3092\u898b\u305b\u3066\u6570\u5b57\u3092\u63a8\u5b9a\n\u7d50\u679c\u3092Publish\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3042\u308b. \n\n\u30b3\u30fc\u30c9\u5168\u4f53\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \n\ntensorflow_in_ros_mnist.py\nimport rospy\nfrom sensor_msgs.msg import Image\nfrom std_msgs.msg import Int16\nfrom cv_bridge import CvBridge\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], \n                      padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\n\ndef makeCNN(x,keep_prob):\n    # --- define CNN model\n    W_conv1 = weight_variable([5, 5, 1, 32])\n    b_conv1 = bias_variable([32])\n    h_conv1 = tf.nn.relu(conv2d(x, W_conv1) + b_conv1)\n\n    h_pool1 = max_pool_2x2(h_conv1)\n\n    W_conv2 = weight_variable([3, 3, 32, 64])\n    b_conv2 = bias_variable([64])\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([7 * 7 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 10])\n    b_fc2 = bias_variable([10])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n    return y_conv\n\n\n\nclass RosTensorFlow():\n    def __init__(self):\n        self._cv_bridge = CvBridge()\n        self._sub = rospy.Subscriber('image', Image, self.callback, queue_size=1)\n        self._pub = rospy.Publisher('result', Int16, queue_size=1)\n\n        self.x = tf.placeholder(tf.float32, [None,28,28,1], name=\"x\")\n        self.keep_prob = tf.placeholder(\"float\")\n        self.y_conv = makeCNN(self.x,self.keep_prob)\n\n        self._saver = tf.train.Saver()\n        self._session = tf.InteractiveSession()\n\n        init_op = tf.initialize_all_variables()\n        self._session.run(init_op)\n\n        self._saver.restore(self._session, \"model.ckpt\")\n\n\n    def callback(self, image_msg):\n        cv_image = self._cv_bridge.imgmsg_to_cv2(image_msg, \"bgr8\")\n        cv_image_gray = cv2.cvtColor(cv_image, cv2.COLOR_RGB2GRAY)\n        ret,cv_image_binary = cv2.threshold(cv_image_gray,128,255,cv2.THRESH_BINARY_INV)\n        cv_image_28 = cv2.resize(cv_image_binary,(28,28))\n        np_image = np.reshape(cv_image_28,(1,28,28,1))\n        predict_num = self._session.run(self.y_conv, feed_dict={self.x:np_image,self.keep_prob:1.0})\n        answer = np.argmax(predict_num,1)\n        rospy.loginfo('%d' % answer)\n        self._pub.publish(answer)\n\n    def main(self):\n        rospy.spin()\n\nif __name__ == '__main__':\n    rospy.init_node('rostensorflow')\n    tensor = RosTensorFlow()\n    tensor.main()\n\n\n\n\u30b3\u30fc\u30c9\u89e3\u8aac\nimport\u90e8\u5206\n\ntensorflow_in_ros_mnist.py\nimport rospy\nfrom sensor_msgs.msg import Image\nfrom std_msgs.msg import Int16\nfrom cv_bridge import CvBridge\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n\n\u4eca\u56de\u306fPython\u3067ROS\u306e\u30ce\u30fc\u30c9\u3092\u7acb\u3066\u305f\u304b\u3063\u305f\u306e\u3067, rospy\u3092\u5165\u308c\u305f.\n\u307e\u305f\u3001\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306eImage\u3068\u66f8\u304d\u51fa\u3059\u305f\u3081\u306eInt16, ROS\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb\u3092OpenCV\u306b\u6e21\u3059\u305f\u3081\u306ecv_bridge, OpenCV, Numpy, \u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306eTensorflow\u3092\u5165\u308c\u305f.\nCNN\u5b9a\u7fa9\u90e8\u5206\n\ntensorflow_in_ros_mnist.py\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], \n                      padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\n\ndef makeCNN(x,keep_prob):\n    # --- define CNN model\n    W_conv1 = weight_variable([5, 5, 1, 32])\n    b_conv1 = bias_variable([32])\n    h_conv1 = tf.nn.relu(conv2d(x, W_conv1) + b_conv1)\n\n    h_pool1 = max_pool_2x2(h_conv1)\n\n    W_conv2 = weight_variable([3, 3, 32, 64])\n    b_conv2 = bias_variable([64])\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([7 * 7 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 10])\n    b_fc2 = bias_variable([10])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\n    return y_conv\n\n\nTensorflow\u306eTutorial(Deep MNIST for Expert)\u3069\u304a\u308a\u306e\u69cb\u6210\u3067CNN\u3092\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f.\n\u69cb\u6210\u3068\u3057\u3066\u306f\u7573\u307f\u8fbc\u307f\u30d7\u30fc\u30ea\u30f3\u30b0\u30922\u56de\u884c\u3063\u305f\u5f8c, \u5168\u7d50\u5408\u5c64\u3092\u5165\u308c, \u5404\u6570\u5b57\u306b\u5bfe\u3057\u3066\u306e\u78ba\u7387\u3092\u51fa\u3059\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b. \nclass\u306einit\u90e8\u5206\u524d\u534a\n\ntensorflow_in_ros_mnist.py\nclass RosTensorFlow():\n    def __init__(self):\n        self._cv_bridge = CvBridge()\n        self._sub = rospy.Subscriber('image', Image, self.callback, queue_size=1)\n        self._pub = rospy.Publisher('result', Int16, queue_size=1)\n\n\n\u524d\u534a\u306fROS\u306e\u51e6\u7406.\n\u3053\u3053\u3067\u306f, CvBridge\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057, Subscriber, Publisher\u306e\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059. \n\u4eca\u56de\u306fSubscriber\u306fImage\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308a, Publisher\u306fInt16\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u914d\u4fe1\u3059\u308b.\n\u57fa\u672c\u7684\u306b\u306fROS\u306e\u4f8b\u3069\u304a\u308a.\nsub\u306e\u90e8\u5206\u306e\u5f15\u6570\u306bcallback\u304c\u5165\u308b\u3053\u3068\u3067, Image\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3054\u3068\u306bcallback\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059.\nclass\u306einit\u90e8\u5206\u5f8c\u534a\n\ntensorflow_in_ros_mnist.py\n        self.x = tf.placeholder(tf.float32, [None,28,28,1], name=\"x\")\n        self.keep_prob = tf.placeholder(\"float\")\n        self.y_conv = makeCNN(self.x,self.keep_prob)\n\n        self._saver = tf.train.Saver()\n        self._session = tf.InteractiveSession()\n\n        init_op = tf.initialize_all_variables()\n        self._session.run(init_op)\n\n        self._saver.restore(self._session, \"model.ckpt\")\n\n\n\u5f8c\u534a\u306fTensorflow\u306e\u51e6\u7406.\n\u3053\u3053\u3067\u306f\u307e\u305a\u753b\u50cf\u304c\u5165\u308bplaceholder\u3067\u3042\u308bx\u3068DropOut\u7387\u304c\u5165\u308bplaceholder\u3067\u3042\u308bkeep_prob\u3092\u5b9a\u7fa9\u3059\u308b.\nplaceholder\u3068\u306f\u30c7\u30fc\u30bf\u306e\u5165\u308a\u53e3\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u5b9f\u884c\u6642\u306b\u306f\u3053\u3053\u306b\u30c7\u30fc\u30bf\u304c\u3069\u3093\u3069\u3093\u5165\u308b.\n\u6b21\u306b\u4eca\u56de\u4f7f\u3046CNN\u3092y_conv\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b.\n\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306fx,keep_prob\u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u5165\u308a\u53e3\u304b\u3089CNN\u3092\u901a\u3063\u3066y_conv\u3068\u3044\u3046\u540d\u306e\u51fa\u53e3\u306b\u30c7\u30fc\u30bf\u304c\u51fa\u3066\u304f\u308b\u3068\u3044\u3046\u9053\u7b4b\u3092\u5b9a\u7fa9\u3059\u308b\u611f\u3058.\n\u9053\u7b4b\u3092\u5b9a\u7fa9\u3057\u305f\u3089session\u95a2\u6570\u3067\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u6e96\u5099\u3059\u308b.\u3000tf.initialize_all_variables\u95a2\u6570\u3067\u4e00\u65e6CNN\u306e\u91cd\u307fW\u3068\u30d0\u30a4\u30a2\u30b9b\u3092\u521d\u671f\u5316.\n\u3053\u3053\u306b\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059. \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8aad\u307f\u51fa\u3057\u306b\u306ftf.train.Saver\u95a2\u6570\u3092\u4f7f\u3063\u305f\u3042\u3068\u306bsaver.restore\u3092\u3059\u308b\u5fc5\u8981\u3042\u308a.\ncallback\u90e8\n\ntensorflow_in_ros_mnist.py\n    def callback(self, image_msg):\n        cv_image = self._cv_bridge.imgmsg_to_cv2(image_msg, \"bgr8\")\n        cv_image_gray = cv2.cvtColor(cv_image, cv2.COLOR_RGB2GRAY)\n        ret,cv_image_binary = cv2.threshold(cv_image_gray,128,255,cv2.THRESH_BINARY_INV)\n        cv_image_28 = cv2.resize(cv_image_binary,(28,28))\n        np_image = np.reshape(cv_image_28,(1,28,28,1))\n        predict_num = self._session.run(self.y_conv, feed_dict={self.x:np_image,self.keep_prob:1.0})\n        answer = np.argmax(predict_num,1)\n        rospy.loginfo('%d' % answer)\n        self._pub.publish(answer)\n\n\n\u753b\u50cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u304f\u308b\u305f\u3073\u306b\u3053\u3053\u304c\u8aad\u307e\u308c\u308b.\ncv_bridge\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u50cf\u306b\u5909\u3048\u305f\u3042\u3068, \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u30662\u5024\u5316, \u767d\u9ed2\u53cd\u8ee2,\u30b5\u30a4\u30ba\u8abf\u7bc0\u3092\u3057\u3066, CNN\u306b\u753b\u50cf\u3092\u6295\u3052\u8fbc\u3093\u3067\u3044\u308b.\n\u5e30\u3063\u3066\u304d\u305f\u63a8\u5b9a\u7d50\u679cpredict_num\u306e\u4e00\u756a\u78ba\u7387\u304c\u9ad8\u3044\u3082\u306e\u3092answer\u3068\u3057,\u3000publish\u3059\u308b\nmain\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3059\u308b.\n\n\u3042\u3068\u304c\u304d\n\u3053\u308c\u3067Tensorflow\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3055\u3048\u3042\u308c\u3070, \u4f55\u3067\u3082ROS\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f. \nFasterRCNN\u3067\u7269\u4f53\u8a8d\u8b58\u3068\u304b\u9854\u8a8d\u8b58\u3068\u304b\u3082\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3044.\n#\u307e\u3048\u304c\u304d\n\n* \u4ee5\u524d, Tensorflow\u306e\u5b66\u7fd2\u6e08\u307fMNIST\u304c\u52d5\u304fROS\u306e\u30ce\u30fc\u30c9\u3092\u4f5c\u3063\u305f.\n* \u7d39\u4ecb\u8a18\u4e8b\u3092[Qiita](http://qiita.com/shunchan0677/items/c50a796a088dd87068cc)\u306b, \u30b3\u30fc\u30c9\u3092[GitHub](https://github.com/shunchan0677/Tensorflow_in_ROS)\u306b\u3042\u3052\u305f. \n* \u4eca\u56de\u306f\u4e0a\u306eQiita\u8a18\u4e8b\u3067\u66f8\u304d\u304d\u308c\u306a\u304b\u3063\u305f\u30b3\u30fc\u30c9\u89e3\u8aac\u306e\u90e8\u5206\u3092\u66f8\u304f.\n\n#\u7d50\u679c\n\u7d30\u304b\u3044\u30b3\u30fc\u30c9\u89e3\u8aac\u306b\u5165\u308b\u524d\u306b\u5b9f\u884c\u3059\u308b\u3068\u3069\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3060\u3051\u3092\u5148\u306b\u793a\u3057\u3066\u304a\u304f.![Screenshot from 2016-11-23 15_44_07.png](https://qiita-image-store.s3.amazonaws.com/0/134368/b426cc2e-e963-0897-f2d0-f83a5ec7a3d0.png)\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u53f3\u304c\u30ab\u30e1\u30e9\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u624b\u66f8\u304d\u306e9\n\u5de6\u304c\u5b66\u7fd2\u6e08\u307f\u306eCNN\u304b\u3089\u306e\u63a8\u5b9a\u7d50\u679c\u3067\u3042\u308a, 9\u3092\u898b\u3066\u3061\u3083\u3093\u30689\u3092\u8fd4\u3057\u3066\u3044\u308b. \n\u4eca\u56de\u306f\u3053\u3093\u306a\u611f\u3058\u306eCNN\u304cROS\u4e0a\u3067\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f.\n\u5b9f\u884c\u65b9\u6cd5\u3084\u6e96\u5099\u7b49\u306e\u8a73\u7d30\u306f[\u4ee5\u524d\u306eQiita\u8a18\u4e8b](http://qiita.com/shunchan0677/items/c50a796a088dd87068cc)\u53c2\u7167\u306e\u3053\u3068. \n\n\n#\u51e6\u7406\u306e\u6982\u8981\n\u51e6\u7406\u306e\u6982\u8981\u3092\u5fa9\u7fd2\u3057\u3066\u304a\u304f\u3068\n\n1. CNN\u3092\u69cb\u6210\u3057\u3066\u5b66\u7fd2\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u51fa\u3057\n2. \u30ab\u30e1\u30e9\u30ce\u30fc\u30c9\u304b\u3089\u753b\u50cf\u60c5\u5831\u3092Subscribe\n3. \u753b\u50cf\u60c5\u5831\u3092MNIST\u306eCNN\u306b\u5165\u308b\u3088\u3046, 28*28\u306b\u5727\u7e2e\uff06\u767d\u9ed2\u53cd\u8ee22\u5024\u5316\n4. CNN\u306b\u753b\u50cf\u3092\u898b\u305b\u3066\u6570\u5b57\u3092\u63a8\u5b9a\n5. \u7d50\u679c\u3092Publish\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3042\u308b. \n\n#\u30b3\u30fc\u30c9\u5168\u4f53\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b. \n\n\n```python:tensorflow_in_ros_mnist.py\nimport rospy\nfrom sensor_msgs.msg import Image\nfrom std_msgs.msg import Int16\nfrom cv_bridge import CvBridge\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], \n                      padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\n\ndef makeCNN(x,keep_prob):\n    # --- define CNN model\n    W_conv1 = weight_variable([5, 5, 1, 32])\n    b_conv1 = bias_variable([32])\n    h_conv1 = tf.nn.relu(conv2d(x, W_conv1) + b_conv1)\n\n    h_pool1 = max_pool_2x2(h_conv1)\n\n    W_conv2 = weight_variable([3, 3, 32, 64])\n    b_conv2 = bias_variable([64])\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([7 * 7 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n    \n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 10])\n    b_fc2 = bias_variable([10])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n \n    return y_conv\n\n\n\nclass RosTensorFlow():\n    def __init__(self):\n        self._cv_bridge = CvBridge()\n        self._sub = rospy.Subscriber('image', Image, self.callback, queue_size=1)\n        self._pub = rospy.Publisher('result', Int16, queue_size=1)\n\n        self.x = tf.placeholder(tf.float32, [None,28,28,1], name=\"x\")\n        self.keep_prob = tf.placeholder(\"float\")\n        self.y_conv = makeCNN(self.x,self.keep_prob)\n\n        self._saver = tf.train.Saver()\n        self._session = tf.InteractiveSession()\n        \n        init_op = tf.initialize_all_variables()\n        self._session.run(init_op)\n\n        self._saver.restore(self._session, \"model.ckpt\")\n\n\n    def callback(self, image_msg):\n        cv_image = self._cv_bridge.imgmsg_to_cv2(image_msg, \"bgr8\")\n        cv_image_gray = cv2.cvtColor(cv_image, cv2.COLOR_RGB2GRAY)\n        ret,cv_image_binary = cv2.threshold(cv_image_gray,128,255,cv2.THRESH_BINARY_INV)\n        cv_image_28 = cv2.resize(cv_image_binary,(28,28))\n        np_image = np.reshape(cv_image_28,(1,28,28,1))\n        predict_num = self._session.run(self.y_conv, feed_dict={self.x:np_image,self.keep_prob:1.0})\n        answer = np.argmax(predict_num,1)\n        rospy.loginfo('%d' % answer)\n        self._pub.publish(answer)\n\n    def main(self):\n        rospy.spin()\n\nif __name__ == '__main__':\n    rospy.init_node('rostensorflow')\n    tensor = RosTensorFlow()\n    tensor.main()\n```\n\n\n#\u30b3\u30fc\u30c9\u89e3\u8aac\n**import\u90e8\u5206**\n\n\n```python:tensorflow_in_ros_mnist.py\nimport rospy\nfrom sensor_msgs.msg import Image\nfrom std_msgs.msg import Int16\nfrom cv_bridge import CvBridge\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n```\n\n\u4eca\u56de\u306fPython\u3067ROS\u306e\u30ce\u30fc\u30c9\u3092\u7acb\u3066\u305f\u304b\u3063\u305f\u306e\u3067, rospy\u3092\u5165\u308c\u305f.\n\u307e\u305f\u3001\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306eImage\u3068\u66f8\u304d\u51fa\u3059\u305f\u3081\u306eInt16, ROS\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30a1\u30a4\u30eb\u3092OpenCV\u306b\u6e21\u3059\u305f\u3081\u306ecv_bridge, OpenCV, Numpy, \u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306eTensorflow\u3092\u5165\u308c\u305f.\n\n**CNN\u5b9a\u7fa9\u90e8\u5206**\n\n```python:tensorflow_in_ros_mnist.py\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\n\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], \n                      padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\n\ndef makeCNN(x,keep_prob):\n    # --- define CNN model\n    W_conv1 = weight_variable([5, 5, 1, 32])\n    b_conv1 = bias_variable([32])\n    h_conv1 = tf.nn.relu(conv2d(x, W_conv1) + b_conv1)\n\n    h_pool1 = max_pool_2x2(h_conv1)\n\n    W_conv2 = weight_variable([3, 3, 32, 64])\n    b_conv2 = bias_variable([64])\n    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n\n    h_pool2 = max_pool_2x2(h_conv2)\n\n    W_fc1 = weight_variable([7 * 7 * 64, 1024])\n    b_fc1 = bias_variable([1024])\n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n    \n    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n    W_fc2 = weight_variable([1024, 10])\n    b_fc2 = bias_variable([10])\n\n    y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n \n    return y_conv\n```\n\nTensorflow\u306eTutorial([Deep MNIST for Expert](https://www.tensorflow.org/versions/r0.11/tutorials/mnist/pros/index.html))\u3069\u304a\u308a\u306e\u69cb\u6210\u3067CNN\u3092\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f.\n\u69cb\u6210\u3068\u3057\u3066\u306f\u7573\u307f\u8fbc\u307f\u30d7\u30fc\u30ea\u30f3\u30b0\u30922\u56de\u884c\u3063\u305f\u5f8c, \u5168\u7d50\u5408\u5c64\u3092\u5165\u308c, \u5404\u6570\u5b57\u306b\u5bfe\u3057\u3066\u306e\u78ba\u7387\u3092\u51fa\u3059\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b. \n\n \n**class\u306e__init__\u90e8\u5206\u524d\u534a**\n\n\n```python:tensorflow_in_ros_mnist.py\nclass RosTensorFlow():\n    def __init__(self):\n        self._cv_bridge = CvBridge()\n        self._sub = rospy.Subscriber('image', Image, self.callback, queue_size=1)\n        self._pub = rospy.Publisher('result', Int16, queue_size=1)\n```\n\n\u524d\u534a\u306fROS\u306e\u51e6\u7406.\n\u3053\u3053\u3067\u306f, CvBridge\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057, Subscriber, Publisher\u306e\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059. \n\u4eca\u56de\u306fSubscriber\u306fImage\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308a, Publisher\u306fInt16\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u914d\u4fe1\u3059\u308b.\n\u57fa\u672c\u7684\u306b\u306fROS\u306e\u4f8b\u3069\u304a\u308a.\nsub\u306e\u90e8\u5206\u306e\u5f15\u6570\u306bcallback\u304c\u5165\u308b\u3053\u3068\u3067, Image\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u3054\u3068\u306bcallback\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059.\n\n**class\u306e__init__\u90e8\u5206\u5f8c\u534a**\n\n```python:tensorflow_in_ros_mnist.py\n        self.x = tf.placeholder(tf.float32, [None,28,28,1], name=\"x\")\n        self.keep_prob = tf.placeholder(\"float\")\n        self.y_conv = makeCNN(self.x,self.keep_prob)\n\n        self._saver = tf.train.Saver()\n        self._session = tf.InteractiveSession()\n        \n        init_op = tf.initialize_all_variables()\n        self._session.run(init_op)\n\n        self._saver.restore(self._session, \"model.ckpt\")\n```\n\n\u5f8c\u534a\u306fTensorflow\u306e\u51e6\u7406.\n\u3053\u3053\u3067\u306f\u307e\u305a\u753b\u50cf\u304c\u5165\u308bplaceholder\u3067\u3042\u308bx\u3068DropOut\u7387\u304c\u5165\u308bplaceholder\u3067\u3042\u308bkeep_prob\u3092\u5b9a\u7fa9\u3059\u308b.\nplaceholder\u3068\u306f\u30c7\u30fc\u30bf\u306e\u5165\u308a\u53e3\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u5b9f\u884c\u6642\u306b\u306f\u3053\u3053\u306b\u30c7\u30fc\u30bf\u304c\u3069\u3093\u3069\u3093\u5165\u308b.\n\n\u6b21\u306b\u4eca\u56de\u4f7f\u3046CNN\u3092y_conv\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b.\n\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306fx,keep_prob\u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u5165\u308a\u53e3\u304b\u3089CNN\u3092\u901a\u3063\u3066y_conv\u3068\u3044\u3046\u540d\u306e\u51fa\u53e3\u306b\u30c7\u30fc\u30bf\u304c\u51fa\u3066\u304f\u308b\u3068\u3044\u3046\u9053\u7b4b\u3092\u5b9a\u7fa9\u3059\u308b\u611f\u3058.\n\n\u9053\u7b4b\u3092\u5b9a\u7fa9\u3057\u305f\u3089session\u95a2\u6570\u3067\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u6e96\u5099\u3059\u308b.\u3000tf.initialize_all_variables\u95a2\u6570\u3067\u4e00\u65e6CNN\u306e\u91cd\u307fW\u3068\u30d0\u30a4\u30a2\u30b9b\u3092\u521d\u671f\u5316.\n\n\u3053\u3053\u306b\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059. \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8aad\u307f\u51fa\u3057\u306b\u306ftf.train.Saver\u95a2\u6570\u3092\u4f7f\u3063\u305f\u3042\u3068\u306bsaver.restore\u3092\u3059\u308b\u5fc5\u8981\u3042\u308a.\n\n**callback\u90e8**\n\n```python:tensorflow_in_ros_mnist.py\n    def callback(self, image_msg):\n        cv_image = self._cv_bridge.imgmsg_to_cv2(image_msg, \"bgr8\")\n        cv_image_gray = cv2.cvtColor(cv_image, cv2.COLOR_RGB2GRAY)\n        ret,cv_image_binary = cv2.threshold(cv_image_gray,128,255,cv2.THRESH_BINARY_INV)\n        cv_image_28 = cv2.resize(cv_image_binary,(28,28))\n        np_image = np.reshape(cv_image_28,(1,28,28,1))\n        predict_num = self._session.run(self.y_conv, feed_dict={self.x:np_image,self.keep_prob:1.0})\n        answer = np.argmax(predict_num,1)\n        rospy.loginfo('%d' % answer)\n        self._pub.publish(answer)\n```\n\n\u753b\u50cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u304f\u308b\u305f\u3073\u306b\u3053\u3053\u304c\u8aad\u307e\u308c\u308b.\ncv_bridge\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u753b\u50cf\u306b\u5909\u3048\u305f\u3042\u3068, \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u30662\u5024\u5316, \u767d\u9ed2\u53cd\u8ee2,\u30b5\u30a4\u30ba\u8abf\u7bc0\u3092\u3057\u3066, CNN\u306b\u753b\u50cf\u3092\u6295\u3052\u8fbc\u3093\u3067\u3044\u308b.\n\u5e30\u3063\u3066\u304d\u305f\u63a8\u5b9a\u7d50\u679cpredict_num\u306e\u4e00\u756a\u78ba\u7387\u304c\u9ad8\u3044\u3082\u306e\u3092answer\u3068\u3057,\u3000publish\u3059\u308b\n\nmain\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3059\u308b.\n\n#\u3042\u3068\u304c\u304d\n\u3053\u308c\u3067Tensorflow\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3055\u3048\u3042\u308c\u3070, \u4f55\u3067\u3082ROS\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f. \nFasterRCNN\u3067\u7269\u4f53\u8a8d\u8b58\u3068\u304b\u9854\u8a8d\u8b58\u3068\u304b\u3082\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3044.\n\n"}