{"context": " More than 1 year has passed since last update.http://yoursite.com/apps \u3092 Gunicorn\u306eDjango\u306b\u30ea\u30d0\u30fc\u30b9\u30d7\u30ed\u30ad\u30b7\u3055\u305b\u308b\n\napache\u306e\u5834\u5408\u306e\u8a2d\u5b9a\na2enmod proxy http_proxy headers\u3057\u3066\u304a\u304f\n\n        ProxyPass /apps/static !\n        Alias /apps/static /home/system/apps/web/static\n        ProxyPreserveHost On\n\n        ProxyPreserveHost On\n        <Location /apps/ >\n        ProxyPass http://127.0.0.1:8000/apps/\n        ProxyPassReverse http://127.0.0.1:8000/apps/\n        RequestHeader set SCRIPT_NAME /apps\n\n        RequestHeader set X-FORWARDED-PROTOCOL ssl    # for 443\n        RequestHeader set X-FORWARDED-SSL on          # for 443\n        </Location>\n\n\n\nLocation\u306e\u540d\u524d\u3092 Proxy\u306eURL\u306b\u304f\u3063\u3064\u3051\u308b\nSCRIPT_NAME \u3092 Location\u306e\u540d\u524d\n\n/apps/static \u306fapache\u306b\u51e6\u7406\u3055\u305b\u308b (manage.py collectstatic \u3057\u305f\u30d1\u30b9\u3092Alias\u3059\u308b) \nnginx\u306e\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\n\n\u305f\u3060\u3057\u3001ADMIN_MEDIA_PREFIX\u306f\u5ec3\u6b62\u306a\u306e\u3067\u6ce8\u610f\n\n\n\n\ncontext processor\u3092\u7528\u610f\u3057\u3066 STATIC_URL\u306b\u30d1\u30c3\u30c1\u3042\u3066\u308b\nrequest.META['SCRIPT_NAME'] \u3092 settings.STATIC_URL\u306e\u524d\u306b\u8ffd\u52a0\u3059\u308b\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u307e\u3048\u306b\u3054\u306b\u3087\u308b\u3002\n\n    from django.core.urlresolvers import reverse\n    from django.conf import settings\n\n    def global_context(request):\n        if all([\n            request.META['SCRIPT_NAME'] ,\n            not settings.STATIC_URL.startswith(request.META['SCRIPT_NAME'])]):\n        settings.STATIC_URL = request.META['SCRIPT_NAME'] +  settings.STATIC_URL        \n\n        return {}    #: \u5fc5\u8981\u3067\u3042\u308c\u3070\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u8fd4\u3059\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30bf\u30b0\u306estatic\u304csetting.STATIC_URL\u3092\u30d9\u30fc\u30b9\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30be\u30eb\u30d6\u3059\u308b\u306e\u3067\u3002\u30a2\u30d7\u30ea\u306eHTML\u306f\u306a\u3093\u3068\u3067\u3082\u306a\u308b\u304c\u3001admin\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3053\u3046\u3067\u3082\u3057\u306a\u3044\u3068\u3002\n{% static \"admin/css/base.css\" %}\n\n\n\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u3068\u3046\u307e\u304f\u884c\u304b\u306a\u3044\n\nurls.py\u3068\u304bviews.py\u306e\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u3066 gunicorn\u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u3001context processor\u306e\u51e6\u7406\u304c\u52d5\u304b\u306a\u3044(\u3053\u3068\u304c\u591a\u3044\uff1f)\n\u518d\u5ea6 conext processor\u306e*.pyc \u3092\u524a\u9664\u3057\u3066\u3001\u30ea\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u3046\u307e\u304f\u884c\u304f\n\n\u3046\u307e\u304f\u884c\u304b\u306a\u3044\u6642\u3082context processor \u306f\u30b3\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u3067static\u30bf\u30b0\u304c\u3001\u305d\u308c\u3092\u53c2\u7167\u3067\u304d\u3066\u3044\u306a\u3044\u3001\u3042\u308b\u3044\u306fcontext processor \u304c\u52d5\u304f\u524d\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u304b\u306a\uff1f\n\n\n\u30c0\u30e1\u306a\u5834\u5408\u306f context\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\u306e\u51e6\u7406\u306e\u5f8c\u306b\u547c\u3070\u308c\u3066\u3044\u307e\u3059\n\n\n\n\n\n\u30df\u30c9\u30eb\u30a6\u30a8\u30a2\u3060\u3063\u305f\u3089\u5927\u4e08\u592b\u304b\u3082\n\u5927\u4e08\u592b\u3063\u307d\u3044\n\n    from django.conf import settings\n\n    class SettingsMiddleware(object):\n        def process_request(self, request):\n            prefix = request.META.get('SCRIPT_NAME')\n            if all([\n                prefix,\n                not settings.STATIC_URL.startswith(prefix),]):\n                settings.STATIC_URL = prefix + settings.STATIC_URL\n\n    MIDDLEWARE_CLASSES += (\n        'app.middleware.SettingsMiddleware',\n    )\n\n\nadmin_static \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\ndajngo/contrib/admin/templatetags/admin_static.py\u3002statifiles.static\u304c\u5b9f\u969b\u306eadmin_staic \u30bf\u30b0\u3092\u51e6\u7406\u3059\u308b:\n\n    if 'django.contrib.staticfiles' in settings.INSTALLED_APPS:\n        from django.contrib.staticfiles.templatetags.staticfiles import static\n    else:\n        from django.templatetags.static import static\n\n    static = register.simple_tag(static)\n\nstaticfiles\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001django/contrib/staticfiles/templatetags/staticfiles.py:\n\n    from django.contrib.staticfiles.storage import staticfiles_storage\n    def static(path):\n         return staticfiles_storage.url(path)\n\ndjango/contrib/staticfiles/storage.py\n\n    class ConfiguredStorage(LazyObject):\n        def _setup(self):\n            self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\n\n    staticfiles_storage = ConfiguredStorage()\n\n\ndjango/core/files/storage.py:\n\n    from django.utils.module_loading import import_by_path\n    def get_storage_class(import_path=None):\n         return import_by_path(import_path or settings.DEFAULT_FILE_STORAGE)\n\n\u4eca\u306e\u74b0\u5883:\n\n    >>> from django.conf import settings\n    >>> settings.STATICFILES_STORAGE\n    'django.contrib.staticfiles.storage.StaticFilesStorage'\n\ndjango/contrib/staticfiles/storage.py \u3067\u3001 StaticFilesStorage\u304c\u5f15\u6570\u7121\u3057\u3067\u547c\u3070\u308c\u308b\u306e\u3067\u3001\nbase_url\u304csettings.STATIC_URL\u3092\u305d\u306e\u307e\u307e\u53c2\u7167\u3002settings.STATIC_URL\u306b\u30d1\u30c3\u30c1\u5f53\u305f\u3063\u3066\u306a\u3044\u30b1\u30fc\u30b9\u304c:\n\n    from django.core.files.storage import FileSystemStorage\n    ..\n\n    class StaticFilesStorage(FileSystemStorage):\n        \"\"\"\n        Standard file system storage for static files.\n\n        The defaults for ``location`` and ``base_url`` are\n        ``STATIC_ROOT`` and ``STATIC_URL``.\n        \"\"\"\n        def __init__(self, location=None, base_url=None, *args, **kwargs):\n            if location is None:\n                location = settings.STATIC_ROOT\n            if base_url is None:\n                base_url = settings.STATIC_URL\n            check_settings(base_url)\n            super(StaticFilesStorage, self).__init__(location, base_url,\n                                                     *args, **kwargs)\n            # FileSystemStorage fallbacks to MEDIA_ROOT when location\n            # is empty, so we restore the empty value.\n            if not location:\n                self.base_location = None\n                self.location = None\n\n\nSCRIPT_NAME\u306e\u6271\u3044\ndjango/core/handlers/wsgi.py\u3067\uff12\u30ab\u6240\n\n\u74b0\u5883\u5909\u6570\u53d6\u5f97\u3057\u3066request.META\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\n\n    class WSGIRequest(http.HttpRequest):\n        def __init__(self, environ):\n            script_name = base.get_script_name(environ)\n            path_info = base.get_path_info(environ)\n            if not path_info:\n                # Sometimes PATH_INFO exists, but is empty (e.g. accessing\n                # the SCRIPT_NAME URL without a trailing slash). We really need to\n                # operate as if they'd requested '/'. Not amazingly nice to force\n                # the path like this, but should be harmless.\n                path_info = '/' \n            self.environ = environ\n            self.path_info = path_info\n            self.path = '%s/%s' % (script_name.rstrip('/'), path_info.lstrip('/'))\n            self.META = environ\n            self.META['PATH_INFO'] = path_info\n            self.META['SCRIPT_NAME'] = script_name\n            ....\n\n\n\nurlresovlers\u306b\u6e21\u3057\u3066\u3044\u308b\n\u3053\u308c\u3068\u306f\u5225\u306burlresovlers\u306b\u73fe\u5728\u306eSCRIPT_NAME\u3092\u6e21\u3057\u3066\u3044\u3066\u3001reverse\u3068\u304b\u8af8\u3005\u306e\u51e6\u7406\u306f\u305d\u3063\u3061\u3067\u3088\u308d\u3057\u304f\u3084\u3063\u3066\u3044\u308b\n\n    from django.core.urlresolvers import set_script_prefix\n\n    class WSGIHandler(base.BaseHandler):\n        initLock = Lock()\n        request_class = WSGIRequest\n\n        def __call__(self, environ, start_response):\n            # Set up middleware if needed. We couldn't do this earlier, because\n            # settings weren't available.\n            if self._request_middleware is None:\n                with self.initLock:\n                    try:\n                        # Check that middleware is still uninitialised.\n                        if self._request_middleware is None:\n                            self.load_middleware()\n                    except:\n                        # Unload whatever middleware we got\n                        self._request_middleware = None\n                        raise\n\n            set_script_prefix(base.get_script_name(environ))\n            signals.request_started.send(sender=self.__class__)\n            try:\n                request = self.request_class(environ)\n            except UnicodeDecodeError:\n                logger.warning('Bad Request (UnicodeDecodeError)',\n                    exc_info=sys.exc_info(),\n                    extra={\n                        'status_code': 400,\n                    }\n                )\n                response = http.HttpResponseBadRequest()\n            else:\n                response = self.get_response(request)\n\n            response._handler_class = self.__class__\n\n            status = '%s %s' % (response.status_code, response.reason_phrase)\n            response_headers = [(str(k), str(v)) for k, v in response.items()]\n            for c in response.cookies.values():\n                response_headers.append((str('Set-Cookie'), str(c.output(header=''))))\n            start_response(force_str(status), response_headers)\n            return response\n\n\n\n\u6b63\u3057\u3044\u3084\u308a\u65b9\n\nsettings \u3063\u3066immutable\u306a\u7269\u3060\u304b\u3089\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3063\u3066\u306e\u306f\u304a\u304b\u3057\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3068\u304b\n\n\u78ba\u5b9f\u306a\u306e\u306f\u3001environ\u306bPREFIX\u5b9a\u7fa9\u3057\u3066\u3001settings.py:\nSTATIC_URL = os.environ.get('PREFIX', '') + '/static/' \n\n\nWSGI\u30ea\u30af\u30a8\u30b9\u30c8\u6bce\u306b\u8a2d\u5b9a\u5909\u66f4\u304b\u3048\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30df\u30c9\u30eb\u30a6\u30a8\u30a2\u306eprocess_request\u306e\u4e2d\u3067settings\u3092\u4fee\u6b63\u3059\u308b\u3068\u3044\u3044\u304b\u3082\nurlresolvers\u307f\u305f\u3044\u306b\u305d\u3082\u305d\u3082\u305d\u306e\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3082SCRIPT_NAME\u3067\u5224\u65ad\u3059\u308b\u30d5\u30c3\u30af\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\n\n\n\nhttp://yoursite.com/apps \u3092 Gunicorn\u306eDjango\u306b\u30ea\u30d0\u30fc\u30b9\u30d7\u30ed\u30ad\u30b7\u3055\u305b\u308b\n\n# apache\u306e\u5834\u5408\u306e\u8a2d\u5b9a\na2enmod proxy http_proxy headers\u3057\u3066\u304a\u304f\n\n```xml\n\n        ProxyPass /apps/static !\n        Alias /apps/static /home/system/apps/web/static\n        ProxyPreserveHost On\n\n        ProxyPreserveHost On\n        <Location /apps/ >\n        ProxyPass http://127.0.0.1:8000/apps/\n        ProxyPassReverse http://127.0.0.1:8000/apps/\n        RequestHeader set SCRIPT_NAME /apps\n        \n        RequestHeader set X-FORWARDED-PROTOCOL ssl    # for 443\n        RequestHeader set X-FORWARDED-SSL on          # for 443\n        </Location>\n\n```\n\n- Location\u306e\u540d\u524d\u3092 Proxy\u306eURL\u306b\u304f\u3063\u3064\u3051\u308b\n- SCRIPT_NAME \u3092 Location\u306e\u540d\u524d       \n- /apps/static \u306fapache\u306b\u51e6\u7406\u3055\u305b\u308b (manage.py collectstatic \u3057\u305f\u30d1\u30b9\u3092Alias\u3059\u308b) \n- nginx\u306e\u5834\u5408\u306f[\u3053\u3093\u306a\u611f\u3058](http://lazylabs.org/blog/django-under-sub-url-powered-by-uwsgi-behind-nginx/)\n    - \u305f\u3060\u3057\u3001ADMIN_MEDIA_PREFIX\u306f\u5ec3\u6b62\u306a\u306e\u3067\u6ce8\u610f\n\n\n# context processor\u3092\u7528\u610f\u3057\u3066 STATIC_URL\u306b\u30d1\u30c3\u30c1\u3042\u3066\u308b\n\nrequest.META['SCRIPT_NAME'] \u3092 settings.STATIC_URL\u306e\u524d\u306b\u8ffd\u52a0\u3059\u308b\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u307e\u3048\u306b\u3054\u306b\u3087\u308b\u3002\n\n```py\n\n    from django.core.urlresolvers import reverse\n    from django.conf import settings\n\n    def global_context(request):\n        if all([\n            request.META['SCRIPT_NAME'] ,\n            not settings.STATIC_URL.startswith(request.META['SCRIPT_NAME'])]):\n        settings.STATIC_URL = request.META['SCRIPT_NAME'] +  settings.STATIC_URL        \n        \n        return {}    #: \u5fc5\u8981\u3067\u3042\u308c\u3070\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u8fd4\u3059\n```\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30bf\u30b0\u306estatic\u304csetting.STATIC_URL\u3092\u30d9\u30fc\u30b9\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30be\u30eb\u30d6\u3059\u308b\u306e\u3067\u3002\u30a2\u30d7\u30ea\u306eHTML\u306f\u306a\u3093\u3068\u3067\u3082\u306a\u308b\u304c\u3001admin\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3053\u3046\u3067\u3082\u3057\u306a\u3044\u3068\u3002\n\n    {% static \"admin/css/base.css\" %}\n    \n\n## \u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u3068\u3046\u307e\u304f\u884c\u304b\u306a\u3044\n\n- urls.py\u3068\u304bviews.py\u306e\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u3066 gunicorn\u3092\u30ea\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u3001context processor\u306e\u51e6\u7406\u304c\u52d5\u304b\u306a\u3044(\u3053\u3068\u304c\u591a\u3044\uff1f)\n- \u518d\u5ea6 conext processor\u306e*.pyc \u3092\u524a\u9664\u3057\u3066\u3001\u30ea\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u3046\u307e\u304f\u884c\u304f   \n- \u3046\u307e\u304f\u884c\u304b\u306a\u3044\u6642\u3082context processor \u306f\u30b3\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u7406\u7531\u3067static\u30bf\u30b0\u304c\u3001\u305d\u308c\u3092\u53c2\u7167\u3067\u304d\u3066\u3044\u306a\u3044\u3001\u3042\u308b\u3044\u306fcontext processor \u304c\u52d5\u304f\u524d\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u304b\u306a\uff1f\n    - \u30c0\u30e1\u306a\u5834\u5408\u306f context\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\u306e\u51e6\u7406\u306e\u5f8c\u306b\u547c\u3070\u308c\u3066\u3044\u307e\u3059     \n\n\n# \u30df\u30c9\u30eb\u30a6\u30a8\u30a2\u3060\u3063\u305f\u3089\u5927\u4e08\u592b\u304b\u3082\n\n\u5927\u4e08\u592b\u3063\u307d\u3044\n\n```py\n\n    from django.conf import settings\n    \n    class SettingsMiddleware(object):\n        def process_request(self, request):\n            prefix = request.META.get('SCRIPT_NAME')\n            if all([\n                prefix,\n                not settings.STATIC_URL.startswith(prefix),]):\n                settings.STATIC_URL = prefix + settings.STATIC_URL\n    \n    MIDDLEWARE_CLASSES += (\n        'app.middleware.SettingsMiddleware',\n    )\n```\n\n# admin_static \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\n\ndajngo/contrib/admin/templatetags/admin_static.py\u3002statifiles.static\u304c\u5b9f\u969b\u306eadmin_staic \u30bf\u30b0\u3092\u51e6\u7406\u3059\u308b:\n\n```py\n\n    if 'django.contrib.staticfiles' in settings.INSTALLED_APPS:\n        from django.contrib.staticfiles.templatetags.staticfiles import static\n    else:\n        from django.templatetags.static import static\n\n    static = register.simple_tag(static)\n```\n\nstaticfiles\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001django/contrib/staticfiles/templatetags/staticfiles.py:\n\n```py\n\n    from django.contrib.staticfiles.storage import staticfiles_storage\n    def static(path):\n         return staticfiles_storage.url(path)\n\ndjango/contrib/staticfiles/storage.py\n\n    class ConfiguredStorage(LazyObject):\n        def _setup(self):\n            self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\n\n    staticfiles_storage = ConfiguredStorage()\n\n```\n    \ndjango/core/files/storage.py:\n    \n```py\n\n    from django.utils.module_loading import import_by_path\n    def get_storage_class(import_path=None):\n         return import_by_path(import_path or settings.DEFAULT_FILE_STORAGE)\n```    \n\n\u4eca\u306e\u74b0\u5883:\n\n```py\n\n    >>> from django.conf import settings\n    >>> settings.STATICFILES_STORAGE\n    'django.contrib.staticfiles.storage.StaticFilesStorage'\n```\n    \n    \ndjango/contrib/staticfiles/storage.py \u3067\u3001 StaticFilesStorage\u304c\u5f15\u6570\u7121\u3057\u3067\u547c\u3070\u308c\u308b\u306e\u3067\u3001\nbase_url\u304csettings.STATIC_URL\u3092\u305d\u306e\u307e\u307e\u53c2\u7167\u3002settings.STATIC_URL\u306b\u30d1\u30c3\u30c1\u5f53\u305f\u3063\u3066\u306a\u3044\u30b1\u30fc\u30b9\u304c:\n\n```py\n\n    from django.core.files.storage import FileSystemStorage\n    ..\n\n    class StaticFilesStorage(FileSystemStorage):\n        \"\"\"\n        Standard file system storage for static files.\n    \n        The defaults for ``location`` and ``base_url`` are\n        ``STATIC_ROOT`` and ``STATIC_URL``.\n        \"\"\"\n        def __init__(self, location=None, base_url=None, *args, **kwargs):\n            if location is None:\n                location = settings.STATIC_ROOT\n            if base_url is None:\n                base_url = settings.STATIC_URL\n            check_settings(base_url)\n            super(StaticFilesStorage, self).__init__(location, base_url,\n                                                     *args, **kwargs)\n            # FileSystemStorage fallbacks to MEDIA_ROOT when location\n            # is empty, so we restore the empty value.\n            if not location:\n                self.base_location = None\n                self.location = None\n```\n                \n#  SCRIPT_NAME\u306e\u6271\u3044\n\ndjango/core/handlers/wsgi.py\u3067\uff12\u30ab\u6240\n\n## \u74b0\u5883\u5909\u6570\u53d6\u5f97\u3057\u3066request.META\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\n\n```py\n\n    class WSGIRequest(http.HttpRequest):\n        def __init__(self, environ):\n            script_name = base.get_script_name(environ)\n            path_info = base.get_path_info(environ)\n            if not path_info:\n                # Sometimes PATH_INFO exists, but is empty (e.g. accessing\n                # the SCRIPT_NAME URL without a trailing slash). We really need to\n                # operate as if they'd requested '/'. Not amazingly nice to force\n                # the path like this, but should be harmless.\n                path_info = '/' \n            self.environ = environ\n            self.path_info = path_info\n            self.path = '%s/%s' % (script_name.rstrip('/'), path_info.lstrip('/'))\n            self.META = environ\n            self.META['PATH_INFO'] = path_info\n            self.META['SCRIPT_NAME'] = script_name\n            ....\n        \n```\n\n## urlresovlers\u306b\u6e21\u3057\u3066\u3044\u308b\n\n\u3053\u308c\u3068\u306f\u5225\u306burlresovlers\u306b\u73fe\u5728\u306eSCRIPT_NAME\u3092\u6e21\u3057\u3066\u3044\u3066\u3001reverse\u3068\u304b\u8af8\u3005\u306e\u51e6\u7406\u306f\u305d\u3063\u3061\u3067\u3088\u308d\u3057\u304f\u3084\u3063\u3066\u3044\u308b\n\n```py\n\n    from django.core.urlresolvers import set_script_prefix\n    \n    class WSGIHandler(base.BaseHandler):\n        initLock = Lock()\n        request_class = WSGIRequest\n    \n        def __call__(self, environ, start_response):\n            # Set up middleware if needed. We couldn't do this earlier, because\n            # settings weren't available.\n            if self._request_middleware is None:\n                with self.initLock:\n                    try:\n                        # Check that middleware is still uninitialised.\n                        if self._request_middleware is None:\n                            self.load_middleware()\n                    except:\n                        # Unload whatever middleware we got\n                        self._request_middleware = None\n                        raise\n    \n            set_script_prefix(base.get_script_name(environ))\n            signals.request_started.send(sender=self.__class__)\n            try:\n                request = self.request_class(environ)\n            except UnicodeDecodeError:\n                logger.warning('Bad Request (UnicodeDecodeError)',\n                    exc_info=sys.exc_info(),\n                    extra={\n                        'status_code': 400,\n                    }\n                )\n                response = http.HttpResponseBadRequest()\n            else:\n                response = self.get_response(request)\n    \n            response._handler_class = self.__class__\n    \n            status = '%s %s' % (response.status_code, response.reason_phrase)\n            response_headers = [(str(k), str(v)) for k, v in response.items()]\n            for c in response.cookies.values():\n                response_headers.append((str('Set-Cookie'), str(c.output(header=''))))\n            start_response(force_str(status), response_headers)\n            return response\n                \n```\n\n# \u6b63\u3057\u3044\u3084\u308a\u65b9\n\n- settings \u3063\u3066immutable\u306a\u7269\u3060\u304b\u3089\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3063\u3066\u306e\u306f\u304a\u304b\u3057\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3068\u304b\n- \u78ba\u5b9f\u306a\u306e\u306f\u3001environ\u306bPREFIX\u5b9a\u7fa9\u3057\u3066\u3001settings.py:\n\n        STATIC_URL = os.environ.get('PREFIX', '') + '/static/' \n        \n- WSGI\u30ea\u30af\u30a8\u30b9\u30c8\u6bce\u306b\u8a2d\u5b9a\u5909\u66f4\u304b\u3048\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30df\u30c9\u30eb\u30a6\u30a8\u30a2\u306eprocess_request\u306e\u4e2d\u3067settings\u3092\u4fee\u6b63\u3059\u308b\u3068\u3044\u3044\u304b\u3082\n- urlresolvers\u307f\u305f\u3044\u306b\u305d\u3082\u305d\u3082\u305d\u306e\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3082SCRIPT_NAME\u3067\u5224\u65ad\u3059\u308b\u30d5\u30c3\u30af\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\n", "tags": ["gunicorn", "Django"]}