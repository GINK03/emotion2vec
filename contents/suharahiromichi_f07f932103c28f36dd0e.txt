{"context": " More than 1 year has passed since last update.\n\nCoq\u3067\u7d99\u7d9a\u30e2\u30ca\u30c9\n2014_05_15 @suharahiromichi\n2014_06_01 @suharahiromichi Class\u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u305f\u3002\n\u30e2\u30ca\u30c9\u3068\u7d99\u7d9a\u306e\u8a71\u3092\u4e00\u5ea6\u3067\u7247\u4ed8\u3051\u3066\u3057\u307e\u304a\u3046\u3068\u601d\u3046\u3002\u7d99\u7d9a\u30e2\u30ca\u30c9\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u30da\u30fc\u30b8\u306f\u591a\u3044\u3051\u308c\u3069\u3001\u5927\u90e8\u5206\u304cHaskell\u3067\u3042\u308b\u304b\u3089\u3001Coq SSReflect \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\u3082\u3063\u3068\u3082\u3001\u672c\u8cc7\u6599\u306e\u5185\u5bb9\u3082Haskell\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u6587\u732e2.\u3092\u591a\u304f\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\u307e\u305f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u306e\u8a3c\u660e\u306f\u6587\u732e3.\u306eCoq\u306b\u3088\u308b\u8a3c\u660e\u3092SSReflect\u306b\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\nCoq\u306e\u30e2\u30ca\u30c9\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u6587\u732e1.\u306b\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002\u305f\u3060\u3057\u300c>>=\u300d\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u306f\u3042\u308f\u305b\u305f\u3002\n\u672c\u8cc7\u6599\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_monad_continuation_monad2.v\n\nRequire Import ssreflect ssrbool ssrnat seq.\n\nReserved Notation \"c >>= f\"\n         (at level 42, left associativity).      (* \u6587\u732e1. *)\n\nClass Monad (M : Type -> Type -> Type) :=\n  {\n    bind {R A} : M R A -> (A -> M R A) -> M R A\n      where \"x >>= f\" := (bind x f);\n    ret {R A} : A -> M R A;\n    monad_1 : forall (R A : Type) (a : A) (f : A -> M R A),\n                ret a >>= f = f a;\n    monad_2 : forall (R A : Type) (m : M R A),\n                m >>= ret = m;\n    monad_3 : forall (R A : Type) (f g : A -> M R A) (m : M R A),\n                (m >>= f) >>= g = m >>= fun x => f x >>= g\n(* \u5de6\u7d50\u5408\u306a\u306e\u3067\u3001\u5b9f\u969b\u306f\u3001\u3053\u306e\u62ec\u5f27\u306f\u4e0d\u8981\u3067\u3042\u308b\u3002 *)\n  }.\n\n\n\n\n\u7d99\u7d9a\u30e2\u30ca\u30c9\n\n\u5b9a\u7fa9\nA->R\u306e\u578b\u306e\u95a2\u6570\u304c\u300c\u7d99\u7d9a\u300d\u3067\u3042\u308b\u3002\u305d\u306e\u300c\u7d99\u7d9a\u300d\u3092\u53d7\u3051\u53d6\u308b\u306e\u304c\u7d99\u7d9a\u30e2\u30ca\u30c9\u3067\u3042\u308a\u3001(A->R)->R\u306e\u578b\u3092\u3082\u3064\u3002\u30e2\u30ca\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u3001\u5927\u6587\u5b57\u306eMCont\u3068\u30e9\u30d9\u30eb\u3059\u308b\u3002\n\nDefinition MCont R A := (A -> R) -> R.\n\nProgram Instance : Monad MCont :=\n  {|\n    bind R A c f :=\n      fun (k : A -> R) => c (fun (a : A) => f a k);\n    ret R A a :=\n      fun k => k a\n  |}.\n\n\n\u30e2\u30ca\u30c9\u5247\u306e\u8a3c\u660e\u306f\u3001\u81ea\u52d5\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u4ee5\u4e0a Class\u3092\u4f7f\u3063\u305f\u5b9a\u7fa9\u306f\u3001\u6587\u732e4.\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\u305f\u3060\u3057\u3001\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3068\u7d50\u5408\u65b9\u5411\u306f\u6539\u3081\u305f\u3002\n\n(* call/cc *)\nDefinition callcc {R A B : Type}\n           (f : (A -> MCont R B) -> MCont R A) : MCont R A :=\n  fun (k : A -> R) => f (fun (a : A) => fun _ => k a) k.\n\n\n\n\u6f14\u7b97\u5b50\u3068\u3001do\u8a18\u6cd5\u3082\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3002\n\nNotation \"x >>= f\" :=\n  (@bind _ _ _ _ x f).\n\nNotation \"s1 >> s2\" :=\n  (s1 >>= fun _ => s2)\n    (at level 42, left associativity).\n\nNotation \"'DO' a <- A ; b <- B ; C 'OD'\" :=\n  (A >>= fun a => B >>= fun b => C)\n    (at level 100, no associativity).\n\nNotation \"'DO' A ; B ; C 'OD'\" :=\n  (A >> B >> C)\n    (at level 100, no associativity).\n\n\n\n\n\u968e\u4e57\u306e\u8a08\u7b97\n\nSection factorial.\n\n\n\n\u5b9a\u7fa9\n\u968e\u4e57\u3092\u518d\u5e30\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u3001CPS\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nFixpoint fact (n : nat) : nat :=\n  match n with\n    | 0     => 1\n    | n'.+1 => n * fact n'\n  end.\n\nFixpoint fact_cps (n : nat) : MCont nat nat :=\n  match n with\n    | 0     => ret 1\n    | n'.+1 => fact_cps n' >>= fun (m : nat) => ret (m * n)\n  end.\n\n\n\n\n\u5b9f\u884c\u4f8b\n\nEval cbv in fact_cps 0 id.                  (* 1 *)\nEval cbv in fact_cps 2 id.                  (* 2 *)\nEval cbv in fact_cps 3 id.                  (* 6 *)\nEval cbv in fact_cps 4 id.                  (* 24 *)\n\n\n\n\n\u8a3c\u660e\n\u4efb\u610f\u306e\u81ea\u7136\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e21\u8005\u304c\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u3002\n\u88dc\u984c\u3068\u3057\u3066\u3001fact_cps\u306e\u8a08\u7b97\u306e\u4e00\u6bb5\u968e\u5206\u306e\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\n\nLemma fact_cps_Sn :\n  forall n f,\n    fact_cps n.+1 f =\n    fact_cps n (fun (m : nat) => f (m * n.+1)).\nProof.\n    by [].\nQed.\n\n\n\n\u4efb\u610f\u306e\u7d99\u7d9af\u306b\u3064\u3044\u3066\u8a3c\u660e\u3059\u308b\u3002\n\nLemma eq_f_fact_fact_cps_f :\n  forall (n : nat),\n    (forall f, f (fact n) = fact_cps n f).\nProof.\n  elim.\n    by [].\n  move=> n IHn f.\n  by rewrite fact_cps_Sn -IHn mulnC.\nQed.\n\n\n\n\u8a3c\u660e\u3057\u305f\u3044\u5b9a\u7406\n\nTheorem eq_fact_fact_cps :\n  forall (n : nat), fact n = fact_cps n id.\nProof.\n  move=> n.\n  apply (eq_f_fact_fact_cps_f n id).\nQed.\n\nEnd factorial.\n\n\n\n\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\n\nSection fibonacci.\n\n\n\n\u5b9a\u7fa9\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u518d\u5e30\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u3001CPS\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u5f8c\u8005\u306e\u4e2d\u3067do\u8a18\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\nFixpoint fib (n : nat) : nat :=\n  match n with\n    | 0 => 1\n    | 1 => 1\n    | (m.+1 as sm).+1 => fib sm + fib m\n  end.\n\nFixpoint fib_cps (n : nat) : MCont nat nat :=\n  match n with\n    | 0 => ret 1\n    | 1 => ret 1\n    | (m.+1 as sm).+1 =>\n      DO\n        a <- fib_cps sm;\n        b <- fib_cps m;\n        ret (a + b)\n      OD\n  end.\n\n\n\n\n\u5b9f\u884c\u4f8b\n\nEval cbv in fib_cps 0 id.                  (* 1 *)\nEval cbv in fib_cps 1 id.                  (* 1 *)\nEval cbv in fib_cps 2 id.                  (* 2 *)\nEval cbv in fib_cps 3 id.                  (* 3 *)\nEval cbv in fib_cps 4 id.                  (* 5 *)\nEval cbv in fib_cps 6 id.                  (* 13 *)\n\n\n\n\n\u8a3c\u660e\n\u4efb\u610f\u306e\u81ea\u7136\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e21\u8005\u304c\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u3002\u3053\u306e\u8a3c\u660e\u306f\u6587\u732e3.\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\u88dc\u984c: fib_cps\u306e\u5b9a\u7fa9\u306e\u4e09\u756a\u76ee\u306e\u7bc0\u3092\u53d6\u308a\u51fa\u3057\u305f\u3082\u306e\u3067\u3001fib_cps\u306e\u8a08\u7b97\u3092\u4e00\u6bb5\u9032\u3081\u308b\u306e\u306b\u4f7f\u3046\u3002\n\nLemma fib_cps_SSn : forall n f,\n  fib_cps n.+2 f =\n  fib_cps n.+1 (fun r1 => fib_cps n (fun r2 => f (r1 + r2))).\nProof.\n  by [].\nQed.\n\n\n\n\u3088\u308a\u5f37\u3044\u5b9a\u7406\n\nLemma eq_fib_fib_cps_aux :\n  forall n,\n    (forall f, f (fib n) = fib_cps n f) /\\\n    (forall g, g (fib n.+1) = fib_cps n.+1 g).\nProof.\n  elim.\n  (* fib 0 = fib_cps 0 /\\ fib 1 = fib_cps 1 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by [].\n\n  (* fib n = fib_cps n /\\ fib n+1 = fib_cps n+1 \u306a\u3089\u3070\u3001\n     fib n+1 = fib_cps n+1 /\\ fib n+2 = fib_cps n+2 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  case=> n.\n\n  (* fib 0 = fib_cps 0 /\\ fib 1 = fib_cps 1 \u306a\u3089\u3070\u3001\n     fib 1 = fib_cps 1 /\\ fib 2 = fib_cps 2 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by [].\n\n  (* fib n+1 = fib_cps n+1 /\\ fib n+2 = fib_cps n+2 \u306a\u3089\u3070\u3001\n     fib n+2 = fib_cps n+2 /\\ fib n+3 = fib_cps n+3 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  case=> Hf Hg.\n  split; move=> f; rewrite fib_cps_SSn.\n  (* \u30b4\u30fc\u30eb\u306e/\\\u306e\u5de6\u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by rewrite Hg.\n  (* \u30b4\u30fc\u30eb\u306e/\\\u306e\u53f3\u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  by rewrite -Hg -Hf.\nQed.\n\n\n\n\u4efb\u610f\u306e\u7d99\u7d9af\u306b\u3064\u3044\u3066\u8a3c\u660e\u3059\u308b\u3002\n\nLemma eq_f_fib_fib_cps_f : forall n f, f (fib n) = fib_cps n f.\nProof.\n  move=> n f.\n  apply (eq_fib_fib_cps_aux n).\nQed.\n\n\n\n\u8a3c\u660e\u3057\u305f\u3044\u5b9a\u7406\n\nTheorem eq_fib_fib_cps : forall n, fib n = fib_cps n id.\nProof.\n  move=> n.\n  apply (eq_f_fib_fib_cps_f n id).\nQed.\n\nEnd fibonacci.\n\n\n\n\n\u6587\u732e\n\nLibrary lc.Monad\nhttp://coq.inria.fr/pylons/contribs/files/lc/trunk/lc.Monad.html\n\u304a\u6c17\u697d Haskell \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580 \u25cf\u7d99\u7d9a\u6e21\u3057\u30b9\u30bf\u30a4\u30eb\nhttp://www.geocities.jp/m_hiroi/func/haskell38.html\nCPS\u5909\u63db\u3055\u308c\u305f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u306e\u8a3c\u660e\u3092\u3057\u3066\u307f\u305f\nhttp://d.hatena.ne.jp/yoshihiro503/20100830#p2\nCoq\u6f14\u7fd22014 \u7b2c8\u56de \u8ab2\u984c39\nhttp://qnighy.github.io/coqex2014/ex6.html\n\n\nCoq\u3067\u7d99\u7d9a\u30e2\u30ca\u30c9\n=========================\n\n2014_05_15 @suharahiromichi\n\n2014_06_01 @suharahiromichi Class\u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u305f\u3002\n\n\u30e2\u30ca\u30c9\u3068\u7d99\u7d9a\u306e\u8a71\u3092\u4e00\u5ea6\u3067\u7247\u4ed8\u3051\u3066\u3057\u307e\u304a\u3046\u3068\u601d\u3046\u3002\u7d99\u7d9a\u30e2\u30ca\u30c9\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u30da\u30fc\u30b8\u306f\u591a\u3044\u3051\u308c\u3069\u3001\u5927\u90e8\u5206\u304cHaskell\u3067\u3042\u308b\u304b\u3089\u3001Coq SSReflect \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\u3082\u3063\u3068\u3082\u3001\u672c\u8cc7\u6599\u306e\u5185\u5bb9\u3082Haskell\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u6587\u732e2.\u3092\u591a\u304f\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\u307e\u305f\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u306e\u8a3c\u660e\u306f\u6587\u732e3.\u306eCoq\u306b\u3088\u308b\u8a3c\u660e\u3092SSReflect\u306b\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\nCoq\u306e\u30e2\u30ca\u30c9\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u6587\u732e1.\u306b\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3002\u305f\u3060\u3057\u300c>>=\u300d\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u306f\u3042\u308f\u305b\u305f\u3002\n\u672c\u8cc7\u6599\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_monad_continuation_monad2.v\n\n\n\n```coq:\n\nRequire Import ssreflect ssrbool ssrnat seq.\n\nReserved Notation \"c >>= f\"\n         (at level 42, left associativity).      (* \u6587\u732e1. *)\n\nClass Monad (M : Type -> Type -> Type) :=\n  {\n    bind {R A} : M R A -> (A -> M R A) -> M R A\n      where \"x >>= f\" := (bind x f);\n    ret {R A} : A -> M R A;\n    monad_1 : forall (R A : Type) (a : A) (f : A -> M R A),\n                ret a >>= f = f a;\n    monad_2 : forall (R A : Type) (m : M R A),\n                m >>= ret = m;\n    monad_3 : forall (R A : Type) (f g : A -> M R A) (m : M R A),\n                (m >>= f) >>= g = m >>= fun x => f x >>= g\n(* \u5de6\u7d50\u5408\u306a\u306e\u3067\u3001\u5b9f\u969b\u306f\u3001\u3053\u306e\u62ec\u5f27\u306f\u4e0d\u8981\u3067\u3042\u308b\u3002 *)\n  }.\n\n\n```\n\n# \u7d99\u7d9a\u30e2\u30ca\u30c9\n\n## \u5b9a\u7fa9\nA->R\u306e\u578b\u306e\u95a2\u6570\u304c\u300c\u7d99\u7d9a\u300d\u3067\u3042\u308b\u3002\u305d\u306e\u300c\u7d99\u7d9a\u300d\u3092\u53d7\u3051\u53d6\u308b\u306e\u304c\u7d99\u7d9a\u30e2\u30ca\u30c9\u3067\u3042\u308a\u3001(A->R)->R\u306e\u578b\u3092\u3082\u3064\u3002\u30e2\u30ca\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u3001\u5927\u6587\u5b57\u306eMCont\u3068\u30e9\u30d9\u30eb\u3059\u308b\u3002\n\n\n```coq:\n\nDefinition MCont R A := (A -> R) -> R.\n\nProgram Instance : Monad MCont :=\n  {|\n    bind R A c f :=\n      fun (k : A -> R) => c (fun (a : A) => f a k);\n    ret R A a :=\n      fun k => k a\n  |}.\n\n```\n\u30e2\u30ca\u30c9\u5247\u306e\u8a3c\u660e\u306f\u3001\u81ea\u52d5\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u4ee5\u4e0a Class\u3092\u4f7f\u3063\u305f\u5b9a\u7fa9\u306f\u3001\u6587\u732e4.\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\u305f\u3060\u3057\u3001\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3068\u7d50\u5408\u65b9\u5411\u306f\u6539\u3081\u305f\u3002\n\n\n\n```coq:\n\n(* call/cc *)\nDefinition callcc {R A B : Type}\n           (f : (A -> MCont R B) -> MCont R A) : MCont R A :=\n  fun (k : A -> R) => f (fun (a : A) => fun _ => k a) k.\n\n\n```\n\u6f14\u7b97\u5b50\u3068\u3001do\u8a18\u6cd5\u3082\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3002\n\n\n```coq:\n\nNotation \"x >>= f\" :=\n  (@bind _ _ _ _ x f).\n\nNotation \"s1 >> s2\" :=\n  (s1 >>= fun _ => s2)\n    (at level 42, left associativity).\n\nNotation \"'DO' a <- A ; b <- B ; C 'OD'\" :=\n  (A >>= fun a => B >>= fun b => C)\n    (at level 100, no associativity).\n\nNotation \"'DO' A ; B ; C 'OD'\" :=\n  (A >> B >> C)\n    (at level 100, no associativity).\n\n\n```\n\n# \u968e\u4e57\u306e\u8a08\u7b97\n\n\n```coq:\n\nSection factorial.\n\n```\n\n## \u5b9a\u7fa9\n\u968e\u4e57\u3092\u518d\u5e30\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u3001CPS\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n```coq:\n\nFixpoint fact (n : nat) : nat :=\n  match n with\n    | 0     => 1\n    | n'.+1 => n * fact n'\n  end.\n\nFixpoint fact_cps (n : nat) : MCont nat nat :=\n  match n with\n    | 0     => ret 1\n    | n'.+1 => fact_cps n' >>= fun (m : nat) => ret (m * n)\n  end.\n\n\n```\n\n## \u5b9f\u884c\u4f8b\n\n\n```coq:\n\nEval cbv in fact_cps 0 id.                  (* 1 *)\nEval cbv in fact_cps 2 id.                  (* 2 *)\nEval cbv in fact_cps 3 id.                  (* 6 *)\nEval cbv in fact_cps 4 id.                  (* 24 *)\n\n\n```\n\n## \u8a3c\u660e\n\u4efb\u610f\u306e\u81ea\u7136\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e21\u8005\u304c\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u3002\n\u88dc\u984c\u3068\u3057\u3066\u3001fact_cps\u306e\u8a08\u7b97\u306e\u4e00\u6bb5\u968e\u5206\u306e\u8a3c\u660e\u3057\u3066\u304a\u304f\u3002\n\n\n```coq:\n\nLemma fact_cps_Sn :\n  forall n f,\n    fact_cps n.+1 f =\n    fact_cps n (fun (m : nat) => f (m * n.+1)).\nProof.\n    by [].\nQed.\n\n\n```\n\u4efb\u610f\u306e\u7d99\u7d9af\u306b\u3064\u3044\u3066\u8a3c\u660e\u3059\u308b\u3002\n\n\n```coq:\n\nLemma eq_f_fact_fact_cps_f :\n  forall (n : nat),\n    (forall f, f (fact n) = fact_cps n f).\nProof.\n  elim.\n    by [].\n  move=> n IHn f.\n  by rewrite fact_cps_Sn -IHn mulnC.\nQed.\n\n\n```\n\u8a3c\u660e\u3057\u305f\u3044\u5b9a\u7406\n\n\n```coq:\n\nTheorem eq_fact_fact_cps :\n  forall (n : nat), fact n = fact_cps n id.\nProof.\n  move=> n.\n  apply (eq_f_fact_fact_cps_f n id).\nQed.\n\nEnd factorial.\n\n\n```\n\n# \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\n\n\n```coq:\n\nSection fibonacci.\n\n```\n\n## \u5b9a\u7fa9\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u518d\u5e30\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3068\u3001CPS\u3067\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u5f8c\u8005\u306e\u4e2d\u3067do\u8a18\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n\n```coq:\n\nFixpoint fib (n : nat) : nat :=\n  match n with\n    | 0 => 1\n    | 1 => 1\n    | (m.+1 as sm).+1 => fib sm + fib m\n  end.\n\nFixpoint fib_cps (n : nat) : MCont nat nat :=\n  match n with\n    | 0 => ret 1\n    | 1 => ret 1\n    | (m.+1 as sm).+1 =>\n      DO\n        a <- fib_cps sm;\n        b <- fib_cps m;\n        ret (a + b)\n      OD\n  end.\n\n\n```\n\n## \u5b9f\u884c\u4f8b\n\n\n```coq:\n\nEval cbv in fib_cps 0 id.                  (* 1 *)\nEval cbv in fib_cps 1 id.                  (* 1 *)\nEval cbv in fib_cps 2 id.                  (* 2 *)\nEval cbv in fib_cps 3 id.                  (* 3 *)\nEval cbv in fib_cps 4 id.                  (* 5 *)\nEval cbv in fib_cps 6 id.                  (* 13 *)\n\n\n```\n\n## \u8a3c\u660e\n\u4efb\u610f\u306e\u81ea\u7136\u6570\u306b\u5bfe\u3057\u3066\u3001\u4e21\u8005\u304c\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3053\u3068\u3092\u8a3c\u660e\u3059\u308b\u3002\u3053\u306e\u8a3c\u660e\u306f\u6587\u732e3.\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\n\u88dc\u984c: fib_cps\u306e\u5b9a\u7fa9\u306e\u4e09\u756a\u76ee\u306e\u7bc0\u3092\u53d6\u308a\u51fa\u3057\u305f\u3082\u306e\u3067\u3001fib_cps\u306e\u8a08\u7b97\u3092\u4e00\u6bb5\u9032\u3081\u308b\u306e\u306b\u4f7f\u3046\u3002\n\n\n```coq:\n\nLemma fib_cps_SSn : forall n f,\n  fib_cps n.+2 f =\n  fib_cps n.+1 (fun r1 => fib_cps n (fun r2 => f (r1 + r2))).\nProof.\n  by [].\nQed.\n\n\n```\n\u3088\u308a\u5f37\u3044\u5b9a\u7406\n\n\n```coq:\n\nLemma eq_fib_fib_cps_aux :\n  forall n,\n    (forall f, f (fib n) = fib_cps n f) /\\\n    (forall g, g (fib n.+1) = fib_cps n.+1 g).\nProof.\n  elim.\n  (* fib 0 = fib_cps 0 /\\ fib 1 = fib_cps 1 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by [].\n\n  (* fib n = fib_cps n /\\ fib n+1 = fib_cps n+1 \u306a\u3089\u3070\u3001\n     fib n+1 = fib_cps n+1 /\\ fib n+2 = fib_cps n+2 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  case=> n.\n\n  (* fib 0 = fib_cps 0 /\\ fib 1 = fib_cps 1 \u306a\u3089\u3070\u3001\n     fib 1 = fib_cps 1 /\\ fib 2 = fib_cps 2 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by [].\n\n  (* fib n+1 = fib_cps n+1 /\\ fib n+2 = fib_cps n+2 \u306a\u3089\u3070\u3001\n     fib n+2 = fib_cps n+2 /\\ fib n+3 = fib_cps n+3 \u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  case=> Hf Hg.\n  split; move=> f; rewrite fib_cps_SSn.\n  (* \u30b4\u30fc\u30eb\u306e/\\\u306e\u5de6\u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n    by rewrite Hg.\n  (* \u30b4\u30fc\u30eb\u306e/\\\u306e\u53f3\u3092\u8a3c\u660e\u3059\u308b\u3002 *)\n  by rewrite -Hg -Hf.\nQed.\n\n\n```\n\u4efb\u610f\u306e\u7d99\u7d9af\u306b\u3064\u3044\u3066\u8a3c\u660e\u3059\u308b\u3002\n\n\n```coq:\n\nLemma eq_f_fib_fib_cps_f : forall n f, f (fib n) = fib_cps n f.\nProof.\n  move=> n f.\n  apply (eq_fib_fib_cps_aux n).\nQed.\n\n\n```\n\u8a3c\u660e\u3057\u305f\u3044\u5b9a\u7406\n\n\n```coq:\n\nTheorem eq_fib_fib_cps : forall n, fib n = fib_cps n id.\nProof.\n  move=> n.\n  apply (eq_f_fib_fib_cps_f n id).\nQed.\n\nEnd fibonacci.\n\n\n```\n\n# \u6587\u732e\n\n1. Library lc.Monad\n   http://coq.inria.fr/pylons/contribs/files/lc/trunk/lc.Monad.html\n\n2. \u304a\u6c17\u697d Haskell \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580 \u25cf\u7d99\u7d9a\u6e21\u3057\u30b9\u30bf\u30a4\u30eb\n   http://www.geocities.jp/m_hiroi/func/haskell38.html\n\n3. CPS\u5909\u63db\u3055\u308c\u305f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u95a2\u6570\u306e\u8a3c\u660e\u3092\u3057\u3066\u307f\u305f\n   http://d.hatena.ne.jp/yoshihiro503/20100830#p2\n\n4. Coq\u6f14\u7fd22014 \u7b2c8\u56de \u8ab2\u984c39\n   http://qnighy.github.io/coqex2014/ex6.html\n\n\n```\n", "tags": ["Coq", "ssreflect", "\u30e2\u30ca\u30c9", "\u7d99\u7d9a", "\u8a3c\u660e"]}