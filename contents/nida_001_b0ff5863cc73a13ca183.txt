{"context": " More than 1 year has passed since last update.\u7d14\u7c8b\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u305d\u306e2\u306fBinomial Heap\uff08\u4e8c\u9805\u30d2\u30fc\u30d7\uff09\u3067\u3059\uff0e\u524d\u56de\u7d39\u4ecb\u3057\u305fLeftist Heap\u3068\u306f\u7570\u306a\u308a\uff0c\u3053\u308c\u306f\u5e73\u8861\u3092\u53d6\u308d\u3046\u3068\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0ePFDS\u3092\u8aad\u3093\u3060\u5f53\u521d\u306f\uff0c\u79c1\u306b\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3057\u305f\u304c\uff0c\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u610f\u5916\u3068\u7c21\u5358\u306a\u3084\u3064\u3067\u3059\uff0e\nBinomial Heap\u306f\uff0cBinomial Tree\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\u307e\u305a\uff0c\u305d\u308c\u3092\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\nBinomial Tree\n\n\u5b9a\u7fa9\nBinomial Tree\u306f\uff0cLeftist Heap\u306e\u3088\u3046\u306b\u30e9\u30f3\u30af\u3092\u6301\u3064\u30c4\u30ea\u30fc\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\uff0c\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u3066\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\n\nrank 0\u306a\u3089\u3070\u5358\u4e00\u9802\u70b9\u306e\u6728\u3067\u3042\u308b\nrank (r + 1)\u306e\u6728\u306f\uff0crank r\u306e\u6728\u3092\u4e8c\u3064\u3092\u30ea\u30f3\u30af\u3057\u305f\u3082\u306e\u3067\u3042\u308b\uff0e\u30ea\u30f3\u30af\u3068\u306f\uff0c\u4e00\u65b9\u306e\u6728\u306e\u6839\u6700\u5de6\u306e\u5b50\u3068\u3057\u3066\uff0c\u3082\u3046\u4e00\u65b9\u306e\u6728\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3042\u308b\n\n\u5b9a\u7fa9\u304b\u3089\u660e\u3089\u304b\u306b\uff0crank r\u306eBinomial Tree\u306b\u306f2^r\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u307e\u3059\uff0ePFDS\u306b\u306frank 0 \u304b\u3089 rank 3\u306eBinomial Tree\u306e\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3061\u3089\u306b\u3082\u8f09\u305b\u307e\u3059\uff0e\n\n\u56f3\u4e2d\u306erank 3\u306a\u3093\u304b\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3067\uff0crank 2\u306e\u3082\u306e\u3092\u30b3\u30d4\u30da\u3057\u3066\uff0c\u7dda\u3092\u4e00\u672c\u5f15\u3044\u305f\u3060\u3051\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u3065\u3044\u3066\u6b32\u3057\u3044\u2026!\n\nBinomial Tree\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306e\u5b9f\u88c5\nPFDS\u3067\u306f\uff0cBinomial Tree\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5358\u4e00\u8981\u7d20\u306edatatype\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\ndatatype Tree = Node of int * Elem.T * Tree list\n\n\u304c\uff0c\u3069\u3046\u305b\u5358\u4e00\u30ce\u30fc\u30c9\u306a\u306e\u3067\uff0c\u3044\u3063\u305d\u30ec\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\uff0e\ntype Tree<'a> = {\n    rank : int\n    elem : 'a\n    children : List<Tree<'a>>\n}\n\n\u6b21\u306blink\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\uff0e\u30d2\u30fc\u30d7\u306e\u8981\u7d20\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u306e\u3067\uff0c\u5c0f\u3055\u3044\u5024\u307b\u3069\u6839\u306b\u8fd1\u304f\u306a\u308b\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\u305d\u308c\u305e\u308c\u306e\u30d2\u30fc\u30d7\u306e\u6839\u3092\u6bd4\u8f03\u3057\uff0c\u5c0f\u3055\u3044\u65b9\u3092\u65b0\u305f\u306a\u65b9\u306e\u6839\u306b\uff0c\u5927\u304d\u3044\u65b9\u306f\u5de6\u306e\u5b50\u306b\u3057\u307e\u3059\uff0e\n// \u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u3092\u9023\u7d50\u3059\u308b\nlet link t1 t2 =\n    assert (t1.rank = t2.rank)\n    if t1.elem <= t2.elem then {rank = t1.rank+1; elem = t1.elem; children = t2 :: t1.children}\n    else {rank = t1.rank + 1; elem = t2.elem; children = t1 :: t2.children}\n\n\nBinomial Heap\n\n\u57fa\u672c\n\u672c\u984c\u306eBinomial Heap\u3067\u3059\uff0e\u305d\u308c\u305e\u308c\u304cBinomial Tree\u306f2^r\u500b\u306e\u8981\u7d20\u3092\u7ba1\u7406\u3059\u308b\u7279\u6b8a\u306a\u30d2\u30fc\u30d7\u3068\u8a00\u3048\u307e\u3059\uff0e\u4efb\u610f\u306e\u81ea\u7136\u6570\u306f2\u306e\u7d2f\u4e57\u306e\u548c\u306b\u5206\u89e3\u3067\u304d\u308b\u3053\u3068\u304b\u3089\uff0cBinomial Tree\u3092\u305f\u304f\u3055\u3093\u96c6\u3081\u308c\u3070\u4efb\u610f\u306e\u8981\u7d20\u3092\u6301\u3064\u30d2\u30fc\u30d7\u3092\u4f5c\u308c\u308b\u3044\u3046\u767a\u60f3\u3067\u51fa\u6765\u305f\u306e\u304cBinomial Heap\u3068\u8a00\u3048\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u3067\u306f\uff0c\u30d2\u30fc\u30d7\u3089\u3057\u304f\u6700\u5c0f\u5024\u306f\u3069\u3046\u3084\u3063\u3066\u53d6\u5f97\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\uff0c\u305d\u308c\u305e\u308c\u306e\u6728\u304b\u3089\u6700\u5c0f\u5024\u3092\u53d6\u3063\u3066\u304d\u3066\uff0c\u305d\u306e\u4e2d\u3067\u4e00\u756a\u5c0f\u3055\u306a\u5024\u3092\u8fd4\u305b\u3070\u826f\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3044\u308f\u3086\u308bpop\u306e\u52d5\u4f5c\uff0c\u6700\u5c0f\u5024\u3092\u6d88\u3057\u305f\u65b0\u3057\u3044\u30d2\u30fc\u30d7\u3092\u8fd4\u3059\u306b\u306f\uff0c\u6700\u5c0f\u5024\u3092\u6301\u3063\u3066\u3044\u308b\u6728\u3092\u7279\u5b9a\u3057\uff0c\u300c\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u306e\u6839\u3092\u6d88\u53bb\u3057\u305f\u6b8b\u308a\u306e\u90e8\u5206\u300d\u3068\u300c\u5143\u306e\u30d2\u30fc\u30d7\u306e\u3046\u3061\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u4ee5\u5916\u306e\u6728\u305f\u3061\u300d\u3092\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\uff0e\n\n\u5b9f\u88c5\n\n\u578b\n\u307e\u305a\u578b\u5b9a\u7fa9\u304b\u3089\u3067\u3059\uff0e\u8907\u6570\u306eBinomial Tree\u3092\u6271\u3046\u69cb\u9020\u3068\u3057\u3066Binomial Heap\u3067\u306flist\u3092\u7528\u3044\u307e\u3059\uff0e\ntype Heap<'a> = list<Tree<'a>>\n\n\u578b\u5b9a\u7fa9\u306b\u306f\u73fe\u308c\u307e\u305b\u3093\u304c\uff0c\u5404Binomial Tree\u306frank\u306e\u6607\u9806\u306b\u4e26\u3073\uff0c\u66f4\u306b\u540c\u3058rank\u306e\u6728\u306f\u5b58\u5728\u3057\u306a\u3044\uff0c\u3042\u308b\u610f\u5473\u758e\u96c6\u5408\u306a\u3082\u306e\u3068\u306a\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u5148\u307b\u3069\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u4efb\u610f\u306e\u6570\u306e\u8981\u7d20\u306f2\u306e\u7d2f\u4e57\u306e\u6570\u306e\u548c\u3067\u8868\u305b\u308b\u3053\u3068\u3092\u5229\u7528\u3057\uff0crank r\u306e\u30c4\u30ea\u30fc\u30922^r\u3068\u3044\u3046\u6570\u306e\u3088\u3046\u306b\u7528\u3044\u308b\u305f\u3081\u3067\u3059\uff0e\u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u306f\uff0c\u4e00\u3064\u4e0a\u306e\u30e9\u30f3\u30af\u306e\u6728\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\uff0c\u758e\u96c6\u5408\u306e\u3088\u3046\u306a\u6027\u8cea\u304c\u4f7f\u3048\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0c\u8a00\u3044\u63db\u3048\u308b\u3068\uff0cBinomial Tree\u306e\u30ea\u30b9\u30c8\u30922\u9032\u6570\u3092\u8868\u3059\u30d3\u30c3\u30c8\u5217\u306e\u3088\u3046\u306b\u7528\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3053\u308c\u306fPFDS\u306e\u5f8c\u308d\u306e\u65b9\u3067\uff0c\u81ea\u7136\u6570\u3092\u8868\u3059\u65b9\u6cd5 = \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u8868\u3059\u65b9\u6cd5\uff0c\u3068\u3044\u3046\u6027\u8cea\u3068\u3057\u3066\u3082\u51fa\u3066\u304d\u307e\u3059\uff0e\n\n\u5358\u4e00\u6728\u306e\u8ffd\u52a0\nHeap\u306b\u5358\u4e00\u306eBinomial Tree\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u307e\u3059\uff0eHeap\u306f2\u9032\u6570\u306e\u8db3\u3057\u7b97\u3068\u307b\u307c\u540c\u3058\u6226\u7565\u304c\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u3042\u308b\u6728\u306erank\u304c\uff0c\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3059\u308b\u6728\u306erank\u3088\u308a\u5927\u304d\u3044\u306a\u3089\u3070\uff0c\u6728\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u65b0\u305f\u306b\u8ffd\u52a0\u3059\u308b\uff0e\n\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u3042\u308b\u6728\u306erank\u304c\uff0c\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3059\u308b\u6728\u306erank\u3068\u540c\u3058\u306a\u3089\u3070\uff0c\u5148\u982d\u306e\u6728\u3068\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u3066\u304d\u305f\u6728\u3092\u9023\u7d50\u3057\uff0c\u518d\u5e30\u3059\u308b\uff0e\n\n2.\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307e\u3055\u3057\u304f2\u9032\u6570\u306e\u6841\u4e0a\u3052\u306e\u4f1d\u64ad\u3067\u3059\uff0e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n// \u65b0\u3057\u3044Binomial Tree\u3092\u30d2\u30fc\u30d7\u306b\u8ffd\u52a0\u3059\u308b\nlet rec insTree t ts =\n    match t, ts with\n    | t, [] -> [t]\n    | t, (t' :: ts') ->\n        assert (t.rank <= t'.rank) \n        if t.rank < t'.rank then t :: ts // \u30e9\u30f3\u30af\u304c\u5c0f\u3055\u3044\u306a\u3089\u3070\u5148\u982d\u306b\u304a\u304f\n        else insTree (link t t') ts'    // \u30e9\u30f3\u30af\u304c\u7b49\u3057\u3044\u6642\u306f\uff0c\u4e00\u65e6\u9023\u7d50\u3057\u3066\u518d\u5e30\n\n\u5358\u4e00\u8981\u7d20\u306e\u8ffd\u52a0\u306f\uff0cinsTree\u3088\u308a\u3059\u3050\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\n// \u8981\u7d20x\u3092\u8ffd\u52a0\nlet insert x = insTree {rank=0; elem=x; children=[]} \n\n\n\u30d2\u30fc\u30d7\u306e\u30de\u30fc\u30b8\n\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\u306e\u3082\u8db3\u3057\u7b97\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059\uff0e\n\n\u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u306e\u5148\u982d\u3092\u898b\u3066\uff0crank\u304c\u7570\u306a\u308b\u5834\u5408\u306f\uff0crank\u306e\u5c0f\u3055\u3044\u8981\u7d20\u3092\u65b0\u305f\u306a\u30d2\u30fc\u30d7\u306e\u5148\u982d\u306b\u8ffd\u52a0\u3057\uff0c\u5f8c\u308d\u306b\u306f\u6b8b\u308a\u3092\u30de\u30fc\u30b8\u3057\u305f\u3082\u306e\u3092\u4ed8\u3051\u308b\n\u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u306e\u5148\u982d\u3092\u307f\u3066\uff0crank\u304c\u540c\u3058\u5834\u5408\u306f\uff0c\u6b8b\u308a\u3092\u30de\u30fc\u30b8\u3057\u305f\u30ea\u30b9\u30c8\u306b\uff0c\u5148\u982d\u306e\u8981\u7d20\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\u3059\u308b\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n// \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\nlet rec merge ts1 ts2 = \n    match ts1, ts2 with\n    | ts1, [] -> ts1\n    | [], ts2 -> ts2\n    | t1 :: ts1', t2 :: ts2' ->\n        if t1.rank < t2.rank then t1 :: merge ts1' ts2 // \u5c0f\u3055\u3044\u65b9\u3092\u5148\u982d\u306b\n        else if t1.rank > t2.rank then t2 :: merge ts1 ts2' // \u540c\u3058\u304f\n        else insTree (link t1 t2) (merge ts1' ts2') // \u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u6b8b\u308a\u306b\u8ffd\u52a0\n\n\nfindMin\u3068deleteMin\n\u30d2\u30fc\u30d7\u304c\u30d2\u30fc\u30d7\u305f\u308b\u305f\u3081\u306e\u91cd\u8981\u95a2\u6570\u3067\u3042\u308bfindMin\u3068deleteMin\u306f\uff0cremoveMinTree\u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u3089\u308c\u307e\u3059\uff0eremoveMinTree\u306f\uff0c\u30d2\u30fc\u30d7\u306e\u4e2d\u3067\u6700\u5c0f\u5024\u3092\u6301\u3064Binomial Tree\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\uff0e\n// \u30d2\u30fc\u30d7\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\nlet rec removeMinTree = function\n    | [t] -> (t, [])\n    | (t :: ts) ->\n        let (t', ts') = removeMinTree ts // \u5f8c\u308d\u306e\u90e8\u5206\u3092\u898b\u305f\u6642\u306e\u6700\u5c0f\u5024\n        if t.elem <= t'.elem then (t, ts) // \u4eca\u306e\u5148\u982d\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\n        else (t', t :: ts') // \u5f8c\u308d\u306e\u304c\u5c0f\u3055\u304b\u3063\u305f\u306e\u3067\uff0c\u5f8c\u308d\u306e\u3068\u6b8b\u308a\n\nremoveMinTree\u306e\u8fd4\u3059Binomial Tree\u4e2d\u306e\u6700\u5c0f\u5024\u306f\u4e00\u756a\u4e0a\u306e\u8981\u7d20\u3067\u3042\u308b\u3053\u3068\u304b\u3089\uff0cfindMin\u306f\u81ea\u660e\u3067\u3057\u3087\u3046\uff0e\n// \u6700\u5c0f\u5024\u53d6\u5f97\nlet findMin ts = \n    let (t, _) = removeMinTree ts \n    t.elem\n\ndeleteMin\u306f\uff0cremoveMinTree\u3067\u8fd4\u3055\u308c\u305fBinomial Tree\u306e\u6839\u306e\u5b50\u3068\u6b8b\u308a\u306e\u90e8\u5206\u3092\u30de\u30fc\u30b8\u3057\u305f\u3082\u306e\u3092\u8fd4\u305b\u3070\u826f\u3044\u3067\u3059\uff0e\u306a\u304a\uff0cBinomial Tree\u306e\u5b50\u306f\u30ea\u30b9\u30c8\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u5148\u982d\u8981\u7d20\u306b\u5927\u304d\u3044\u7269\u304c\u4e26\u3076\u305f\u3081\uff0c\u30d2\u30fc\u30d7\u306e\u30ea\u30b9\u30c8\u3068\u306f\u9006\u9806\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u4e00\u65e6\u9006\u8ee2\u3055\u305b\u3066\u304b\u3089\u30de\u30fc\u30b8\u3057\u307e\u3059\uff0e\n// \u6700\u5c0f\u5024\u9664\u53bb\nlet deleteMin ts =\n    let (t, ts') = removeMinTree ts\n    merge (List.rev t.children) ts'\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\n\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8f09\u305b\u307e\u3059\uff0e\u3064\u3044\u3067\u306bempty\u3068isEmpty\u95a2\u6570\u3082\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n\nBinomialHeap.fs\ntype Tree<'a> = {\n    rank : int\n    elem : 'a\n    children : list<Tree<'a>>\n}\n\n// \u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u3092\u9023\u7d50\u3059\u308b\nlet link t1 t2 =\n    assert (t1.rank = t2.rank)\n    if t1.elem <= t2.elem then {rank = t1.rank+1; elem = t1.elem; children = t2 :: t1.children}\n    else {rank = t1.rank + 1; elem = t2.elem; children = t1 :: t2.children}\n\ntype Heap<'a> = list<Tree<'a>>\n\n// \u65b0\u3057\u3044Binomial Tree\u3092\u30d2\u30fc\u30d7\u306b\u8ffd\u52a0\u3059\u308b\nlet rec insTree t ts =\n    match t, ts with\n    | t, [] -> [t]\n    | t, (t' :: ts') ->\n        assert (t.rank <= t'.rank) \n        if t.rank < t'.rank then t :: ts // \u30e9\u30f3\u30af\u304c\u5c0f\u3055\u3044\u306a\u3089\u3070\u5148\u982d\u306b\u304a\u304f\n        else insTree (link t t') ts'    // \u30e9\u30f3\u30af\u304c\u7b49\u3057\u3044\u6642\u306f\uff0c\u4e00\u65e6\u9023\u7d50\u3057\u3066\u518d\u5e30\n\n// \u8981\u7d20x\u3092\u8ffd\u52a0\nlet insert x = insTree {rank=0; elem=x; children=[]} \n\n// \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\nlet rec merge ts1 ts2 = \n    match ts1, ts2 with\n    | ts1, [] -> ts1\n    | [], ts2 -> ts2\n    | t1 :: ts1', t2 :: ts2' ->\n        if t1.rank < t2.rank then t1 :: merge ts1' ts2 // \u5c0f\u3055\u3044\u65b9\u3092\u5148\u982d\u306b\n        else if t1.rank > t2.rank then t2 :: merge ts1 ts2' // \u540c\u3058\u304f\n        else insTree (link t1 t2) (merge ts1' ts2') // \u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u6b8b\u308a\u306b\u8ffd\u52a0\n\n\n\n// \u30d2\u30fc\u30d7\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\nlet rec removeMinTree = function\n    | [t] -> (t, [])\n    | (t :: ts) ->\n        let (t', ts') = removeMinTree ts // \u5f8c\u308d\u306e\u90e8\u5206\u3092\u898b\u305f\u6642\u306e\u6700\u5c0f\u5024\n        if t.elem <= t'.elem then (t, ts) // \u4eca\u306e\u5148\u982d\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\n        else (t', t :: ts') // \u5f8c\u308d\u306e\u304c\u5c0f\u3055\u304b\u3063\u305f\u306e\u3067\uff0c\u5f8c\u308d\u306e\u3068\u6b8b\u308a\n\n// \u6700\u5c0f\u5024\u53d6\u5f97\nlet findMin ts = \n    let (t, _) = removeMinTree ts \n    t.elem\n\n// \u6700\u5c0f\u5024\u9664\u53bb\nlet deleteMin ts =\n    let (t, ts') = removeMinTree ts\n    merge (List.rev t.children) ts'\n\nlet empty = []\nlet isEmpty = function\n    | [] -> true\n    | _ -> false\n\n\n\n\u8a08\u7b97\u91cf\n\u8a08\u7b97\u91cf\u306f\u5168\u64cd\u4f5c\u3067O(log n)\u3067\u3059\uff0e\u3053\u308c\u306f\u30d2\u30fc\u30d7\u306b\uff0cBinomial Tree\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u308b\u3053\u3068\u3067\uff0clog n\u500b\u306eTree\u3067\u30d2\u30fc\u30d7\u3092\u7ba1\u7406\u3067\u304d\u308b\u3053\u3068\u306b\u7531\u6765\u3057\u307e\u3059\uff0e\u305f\u3060\u3057\uff0cLeftist Heap\u304cfindMin\u306e\u64cd\u4f5c\u304cO(1)\u3067\u3042\u3063\u305f\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u5b9f\u306f\u8a08\u7b97\u91cf\u306e\u3046\u307e\u307f\u306fBinomial Heap\u306b\u306f\u7121\u3044\u3067\u3059\uff0e\u305f\u3060\uff0cPFDS\u306e\u4eca\u5f8c\u306e\u7ae0\u3067\u975e\u5e38\u306b\u91cd\u8981\u306a\u4f4d\u7f6e\u3092\u5360\u3081\u308b\u305f\u3081\uff0c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u307e\u3068\u3081\n\u672c\u7bc0\u3067\u306fBinomial Heap\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\u5e73\u8861\u306e\u3068\u308c\u305f\u3082\u306e\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u304a\u308a\uff0c\u30a2\u30a4\u30c7\u30a2\u3068\u3057\u3066\u306f\u7f8e\u3057\u3044\u3068\u601d\u3044\u307e\u3057\u305f\uff0ePFDS\u3067\u306fBinomial Heap\u304c\u6b21\u3005\u306b\u9032\u5316\u3057\u3066\u3044\u304f\u306e\u3067\u304a\u697d\u3057\u307f\u306b\uff0e\n\n\u7d42\u308f\u308a\u3068\u898b\u305b\u304b\u3051\u3066\u5b9f\u884c\u4f8b\n\u307e\u305a\u6b21\u306e\u3066\u304d\u3068\u30fc\u306app\u3092\u5b9a\u7fa9\nlet rec pp = function\n    | [] -> printfn \"\"\n    | (t :: ts) -> \n        printfn \"%A\" t\n        pp ts\n\n1\u304b\u30895\u307e\u3067\u9806\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\uff0e\n{rank = 0;\n elem = 1;\n children = [];}\n\n=================================\n{rank = 1;\n elem = 1;\n children = [{rank = 0;\n              elem = 2;\n              children = [];}];}\n\n=================================\n{rank = 0;\n elem = 3;\n children = [];}\n{rank = 1;\n elem = 1;\n children = [{rank = 0;\n              elem = 2;\n              children = [];}];}\n\n=================================\n{rank = 2;\n elem = 1;\n children = [{rank = 1;\n              elem = 3;\n              children = [{rank = 0;\n                           elem = 4;\n                           children = [];}];}; {rank = 0;\n                                                elem = 2;\n                                                children = [];}];}\n\n=================================\n{rank = 0;\n elem = 5;\n children = [];}\n{rank = 2;\n elem = 1;\n children = [{rank = 1;\n              elem = 3;\n              children = [{rank = 0;\n                           elem = 4;\n                           children = [];}];}; {rank = 0;\n                                                elem = 2;\n                                                children = [];}];}\n\n=================================\n\n\u307e\u308b\u30672\u9032\u6570\u8db3\u3057\u7b97\u306e\u3088\u3046\u306b\u6841\u4e0a\u3052\u304c\u8d77\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u5e78\u3044\uff0e\n\u7d14\u7c8b\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u305d\u306e2\u306fBinomial Heap\uff08\u4e8c\u9805\u30d2\u30fc\u30d7\uff09\u3067\u3059\uff0e\u524d\u56de\u7d39\u4ecb\u3057\u305fLeftist Heap\u3068\u306f\u7570\u306a\u308a\uff0c\u3053\u308c\u306f\u5e73\u8861\u3092\u53d6\u308d\u3046\u3068\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0ePFDS\u3092\u8aad\u3093\u3060\u5f53\u521d\u306f\uff0c\u79c1\u306b\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3057\u305f\u304c\uff0c\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u610f\u5916\u3068\u7c21\u5358\u306a\u3084\u3064\u3067\u3059\uff0e\n\nBinomial Heap\u306f\uff0cBinomial Tree\u306b\u3088\u308a\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\u307e\u305a\uff0c\u305d\u308c\u3092\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\n# Binomial Tree\n## \u5b9a\u7fa9\nBinomial Tree\u306f\uff0cLeftist Heap\u306e\u3088\u3046\u306b\u30e9\u30f3\u30af\u3092\u6301\u3064\u30c4\u30ea\u30fc\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\uff0c\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u3066\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\n\n* rank 0\u306a\u3089\u3070\u5358\u4e00\u9802\u70b9\u306e\u6728\u3067\u3042\u308b\n* rank (r + 1)\u306e\u6728\u306f\uff0crank r\u306e\u6728\u3092\u4e8c\u3064\u3092\u30ea\u30f3\u30af\u3057\u305f\u3082\u306e\u3067\u3042\u308b\uff0e\u30ea\u30f3\u30af\u3068\u306f\uff0c\u4e00\u65b9\u306e\u6728\u306e\u6839\u6700\u5de6\u306e\u5b50\u3068\u3057\u3066\uff0c\u3082\u3046\u4e00\u65b9\u306e\u6728\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3042\u308b\n\n\u5b9a\u7fa9\u304b\u3089\u660e\u3089\u304b\u306b\uff0crank r\u306eBinomial Tree\u306b\u306f2^r\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u307e\u3059\uff0ePFDS\u306b\u306frank 0 \u304b\u3089 rank 3\u306eBinomial Tree\u306e\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3061\u3089\u306b\u3082\u8f09\u305b\u307e\u3059\uff0e\n\n![\u56f3.png](https://qiita-image-store.s3.amazonaws.com/0/58722/201abae8-1962-843f-7f04-c84ee0bfcc36.png)\n\n\u56f3\u4e2d\u306erank 3\u306a\u3093\u304b\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3067\uff0crank 2\u306e\u3082\u306e\u3092\u30b3\u30d4\u30da\u3057\u3066\uff0c\u7dda\u3092\u4e00\u672c\u5f15\u3044\u305f\u3060\u3051\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u3065\u3044\u3066\u6b32\u3057\u3044\u2026!\n\n## Binomial Tree\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306e\u5b9f\u88c5\nPFDS\u3067\u306f\uff0cBinomial Tree\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5358\u4e00\u8981\u7d20\u306edatatype\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```sml\ndatatype Tree = Node of int * Elem.T * Tree list\n```\n\n\u304c\uff0c\u3069\u3046\u305b\u5358\u4e00\u30ce\u30fc\u30c9\u306a\u306e\u3067\uff0c\u3044\u3063\u305d\u30ec\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\uff0e\n\n```fsharp\ntype Tree<'a> = {\n    rank : int\n    elem : 'a\n    children : List<Tree<'a>>\n}\n```\n\n\u6b21\u306blink\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\uff0e\u30d2\u30fc\u30d7\u306e\u8981\u7d20\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u306e\u3067\uff0c\u5c0f\u3055\u3044\u5024\u307b\u3069\u6839\u306b\u8fd1\u304f\u306a\u308b\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\u305d\u308c\u305e\u308c\u306e\u30d2\u30fc\u30d7\u306e\u6839\u3092\u6bd4\u8f03\u3057\uff0c\u5c0f\u3055\u3044\u65b9\u3092\u65b0\u305f\u306a\u65b9\u306e\u6839\u306b\uff0c\u5927\u304d\u3044\u65b9\u306f\u5de6\u306e\u5b50\u306b\u3057\u307e\u3059\uff0e\n\n```fsharp\n// \u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u3092\u9023\u7d50\u3059\u308b\nlet link t1 t2 =\n    assert (t1.rank = t2.rank)\n    if t1.elem <= t2.elem then {rank = t1.rank+1; elem = t1.elem; children = t2 :: t1.children}\n    else {rank = t1.rank + 1; elem = t2.elem; children = t1 :: t2.children}\n```\n\n# Binomial Heap\n\n## \u57fa\u672c\n\u672c\u984c\u306eBinomial Heap\u3067\u3059\uff0e\u305d\u308c\u305e\u308c\u304cBinomial Tree\u306f2^r\u500b\u306e\u8981\u7d20\u3092\u7ba1\u7406\u3059\u308b\u7279\u6b8a\u306a\u30d2\u30fc\u30d7\u3068\u8a00\u3048\u307e\u3059\uff0e\u4efb\u610f\u306e\u81ea\u7136\u6570\u306f2\u306e\u7d2f\u4e57\u306e\u548c\u306b\u5206\u89e3\u3067\u304d\u308b\u3053\u3068\u304b\u3089\uff0cBinomial Tree\u3092\u305f\u304f\u3055\u3093\u96c6\u3081\u308c\u3070\u4efb\u610f\u306e\u8981\u7d20\u3092\u6301\u3064\u30d2\u30fc\u30d7\u3092\u4f5c\u308c\u308b\u3044\u3046\u767a\u60f3\u3067\u51fa\u6765\u305f\u306e\u304cBinomial Heap\u3068\u8a00\u3048\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n![\u56f3(1).png](https://qiita-image-store.s3.amazonaws.com/0/58722/4f2a69cb-d350-8d09-db1c-0f67dd9e2145.png)\n\n\u3067\u306f\uff0c\u30d2\u30fc\u30d7\u3089\u3057\u304f\u6700\u5c0f\u5024\u306f\u3069\u3046\u3084\u3063\u3066\u53d6\u5f97\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\uff0c\u305d\u308c\u305e\u308c\u306e\u6728\u304b\u3089\u6700\u5c0f\u5024\u3092\u53d6\u3063\u3066\u304d\u3066\uff0c\u305d\u306e\u4e2d\u3067\u4e00\u756a\u5c0f\u3055\u306a\u5024\u3092\u8fd4\u305b\u3070\u826f\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u3044\u308f\u3086\u308bpop\u306e\u52d5\u4f5c\uff0c\u6700\u5c0f\u5024\u3092\u6d88\u3057\u305f\u65b0\u3057\u3044\u30d2\u30fc\u30d7\u3092\u8fd4\u3059\u306b\u306f\uff0c\u6700\u5c0f\u5024\u3092\u6301\u3063\u3066\u3044\u308b\u6728\u3092\u7279\u5b9a\u3057\uff0c\u300c\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u306e\u6839\u3092\u6d88\u53bb\u3057\u305f\u6b8b\u308a\u306e\u90e8\u5206\u300d\u3068\u300c\u5143\u306e\u30d2\u30fc\u30d7\u306e\u3046\u3061\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u4ee5\u5916\u306e\u6728\u305f\u3061\u300d\u3092\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\uff0e\n\n## \u5b9f\u88c5\n\n### \u578b\n\u307e\u305a\u578b\u5b9a\u7fa9\u304b\u3089\u3067\u3059\uff0e\u8907\u6570\u306eBinomial Tree\u3092\u6271\u3046\u69cb\u9020\u3068\u3057\u3066Binomial Heap\u3067\u306flist\u3092\u7528\u3044\u307e\u3059\uff0e\n\n```fsharp\ntype Heap<'a> = list<Tree<'a>>\n```\n\n\u578b\u5b9a\u7fa9\u306b\u306f\u73fe\u308c\u307e\u305b\u3093\u304c\uff0c\u5404Binomial Tree\u306frank\u306e\u6607\u9806\u306b\u4e26\u3073\uff0c\u66f4\u306b\u540c\u3058rank\u306e\u6728\u306f\u5b58\u5728\u3057\u306a\u3044\uff0c\u3042\u308b\u610f\u5473\u758e\u96c6\u5408\u306a\u3082\u306e\u3068\u306a\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u5148\u307b\u3069\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u4efb\u610f\u306e\u6570\u306e\u8981\u7d20\u306f2\u306e\u7d2f\u4e57\u306e\u6570\u306e\u548c\u3067\u8868\u305b\u308b\u3053\u3068\u3092\u5229\u7528\u3057\uff0crank r\u306e\u30c4\u30ea\u30fc\u30922^r\u3068\u3044\u3046\u6570\u306e\u3088\u3046\u306b\u7528\u3044\u308b\u305f\u3081\u3067\u3059\uff0e\u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u306f\uff0c\u4e00\u3064\u4e0a\u306e\u30e9\u30f3\u30af\u306e\u6728\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\uff0c\u758e\u96c6\u5408\u306e\u3088\u3046\u306a\u6027\u8cea\u304c\u4f7f\u3048\u307e\u3059\uff0e\n\n\u3053\u308c\u306f\uff0c\u8a00\u3044\u63db\u3048\u308b\u3068\uff0cBinomial Tree\u306e\u30ea\u30b9\u30c8\u30922\u9032\u6570\u3092\u8868\u3059\u30d3\u30c3\u30c8\u5217\u306e\u3088\u3046\u306b\u7528\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3053\u308c\u306fPFDS\u306e\u5f8c\u308d\u306e\u65b9\u3067\uff0c\u81ea\u7136\u6570\u3092\u8868\u3059\u65b9\u6cd5 = \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u8868\u3059\u65b9\u6cd5\uff0c\u3068\u3044\u3046\u6027\u8cea\u3068\u3057\u3066\u3082\u51fa\u3066\u304d\u307e\u3059\uff0e\n\n\n### \u5358\u4e00\u6728\u306e\u8ffd\u52a0\nHeap\u306b\u5358\u4e00\u306eBinomial Tree\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u307e\u3059\uff0eHeap\u306f2\u9032\u6570\u306e\u8db3\u3057\u7b97\u3068\u307b\u307c\u540c\u3058\u6226\u7565\u304c\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n1. \u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u3042\u308b\u6728\u306erank\u304c\uff0c\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3059\u308b\u6728\u306erank\u3088\u308a\u5927\u304d\u3044\u306a\u3089\u3070\uff0c\u6728\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u65b0\u305f\u306b\u8ffd\u52a0\u3059\u308b\uff0e\n2. \u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u3042\u308b\u6728\u306erank\u304c\uff0c\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3059\u308b\u6728\u306erank\u3068\u540c\u3058\u306a\u3089\u3070\uff0c\u5148\u982d\u306e\u6728\u3068\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u3066\u304d\u305f\u6728\u3092\u9023\u7d50\u3057\uff0c\u518d\u5e30\u3059\u308b\uff0e\n\n2.\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307e\u3055\u3057\u304f2\u9032\u6570\u306e\u6841\u4e0a\u3052\u306e\u4f1d\u64ad\u3067\u3059\uff0e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```fsharp\n// \u65b0\u3057\u3044Binomial Tree\u3092\u30d2\u30fc\u30d7\u306b\u8ffd\u52a0\u3059\u308b\nlet rec insTree t ts =\n    match t, ts with\n    | t, [] -> [t]\n    | t, (t' :: ts') ->\n        assert (t.rank <= t'.rank) \n        if t.rank < t'.rank then t :: ts // \u30e9\u30f3\u30af\u304c\u5c0f\u3055\u3044\u306a\u3089\u3070\u5148\u982d\u306b\u304a\u304f\n        else insTree (link t t') ts'    // \u30e9\u30f3\u30af\u304c\u7b49\u3057\u3044\u6642\u306f\uff0c\u4e00\u65e6\u9023\u7d50\u3057\u3066\u518d\u5e30\n```\n\n\u5358\u4e00\u8981\u7d20\u306e\u8ffd\u52a0\u306f\uff0cinsTree\u3088\u308a\u3059\u3050\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\n\n```fsharp\n// \u8981\u7d20x\u3092\u8ffd\u52a0\nlet insert x = insTree {rank=0; elem=x; children=[]} \n```\n\n### \u30d2\u30fc\u30d7\u306e\u30de\u30fc\u30b8\n\n\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\u306e\u3082\u8db3\u3057\u7b97\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059\uff0e\n\n1. \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u306e\u5148\u982d\u3092\u898b\u3066\uff0crank\u304c\u7570\u306a\u308b\u5834\u5408\u306f\uff0crank\u306e\u5c0f\u3055\u3044\u8981\u7d20\u3092\u65b0\u305f\u306a\u30d2\u30fc\u30d7\u306e\u5148\u982d\u306b\u8ffd\u52a0\u3057\uff0c\u5f8c\u308d\u306b\u306f\u6b8b\u308a\u3092\u30de\u30fc\u30b8\u3057\u305f\u3082\u306e\u3092\u4ed8\u3051\u308b\n2. \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u306e\u5148\u982d\u3092\u307f\u3066\uff0crank\u304c\u540c\u3058\u5834\u5408\u306f\uff0c\u6b8b\u308a\u3092\u30de\u30fc\u30b8\u3057\u305f\u30ea\u30b9\u30c8\u306b\uff0c\u5148\u982d\u306e\u8981\u7d20\u3092\u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u8ffd\u52a0\u3059\u308b\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```fsharp\n// \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\nlet rec merge ts1 ts2 = \n    match ts1, ts2 with\n    | ts1, [] -> ts1\n    | [], ts2 -> ts2\n    | t1 :: ts1', t2 :: ts2' ->\n        if t1.rank < t2.rank then t1 :: merge ts1' ts2 // \u5c0f\u3055\u3044\u65b9\u3092\u5148\u982d\u306b\n        else if t1.rank > t2.rank then t2 :: merge ts1 ts2' // \u540c\u3058\u304f\n        else insTree (link t1 t2) (merge ts1' ts2') // \u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u6b8b\u308a\u306b\u8ffd\u52a0\n```\n\n\n\n\n### findMin\u3068deleteMin\n\n\u30d2\u30fc\u30d7\u304c\u30d2\u30fc\u30d7\u305f\u308b\u305f\u3081\u306e\u91cd\u8981\u95a2\u6570\u3067\u3042\u308bfindMin\u3068deleteMin\u306f\uff0cremoveMinTree\u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u3089\u308c\u307e\u3059\uff0eremoveMinTree\u306f\uff0c\u30d2\u30fc\u30d7\u306e\u4e2d\u3067\u6700\u5c0f\u5024\u3092\u6301\u3064Binomial Tree\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\uff0e\n\n```fsharp\n// \u30d2\u30fc\u30d7\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\nlet rec removeMinTree = function\n    | [t] -> (t, [])\n    | (t :: ts) ->\n        let (t', ts') = removeMinTree ts // \u5f8c\u308d\u306e\u90e8\u5206\u3092\u898b\u305f\u6642\u306e\u6700\u5c0f\u5024\n        if t.elem <= t'.elem then (t, ts) // \u4eca\u306e\u5148\u982d\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\n        else (t', t :: ts') // \u5f8c\u308d\u306e\u304c\u5c0f\u3055\u304b\u3063\u305f\u306e\u3067\uff0c\u5f8c\u308d\u306e\u3068\u6b8b\u308a\n```\n\nremoveMinTree\u306e\u8fd4\u3059Binomial Tree\u4e2d\u306e\u6700\u5c0f\u5024\u306f\u4e00\u756a\u4e0a\u306e\u8981\u7d20\u3067\u3042\u308b\u3053\u3068\u304b\u3089\uff0cfindMin\u306f\u81ea\u660e\u3067\u3057\u3087\u3046\uff0e\n\n```fsharp\n// \u6700\u5c0f\u5024\u53d6\u5f97\nlet findMin ts = \n    let (t, _) = removeMinTree ts \n    t.elem\n```\n\ndeleteMin\u306f\uff0cremoveMinTree\u3067\u8fd4\u3055\u308c\u305fBinomial Tree\u306e\u6839\u306e\u5b50\u3068\u6b8b\u308a\u306e\u90e8\u5206\u3092\u30de\u30fc\u30b8\u3057\u305f\u3082\u306e\u3092\u8fd4\u305b\u3070\u826f\u3044\u3067\u3059\uff0e\u306a\u304a\uff0cBinomial Tree\u306e\u5b50\u306f\u30ea\u30b9\u30c8\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u5148\u982d\u8981\u7d20\u306b\u5927\u304d\u3044\u7269\u304c\u4e26\u3076\u305f\u3081\uff0c\u30d2\u30fc\u30d7\u306e\u30ea\u30b9\u30c8\u3068\u306f\u9006\u9806\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\uff0c\u4e00\u65e6\u9006\u8ee2\u3055\u305b\u3066\u304b\u3089\u30de\u30fc\u30b8\u3057\u307e\u3059\uff0e\n\n```fsharp\n// \u6700\u5c0f\u5024\u9664\u53bb\nlet deleteMin ts =\n    let (t, ts') = removeMinTree ts\n    merge (List.rev t.children) ts'\n```\n\n## \u30b3\u30fc\u30c9\u5168\u4f53\n\n\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8f09\u305b\u307e\u3059\uff0e\u3064\u3044\u3067\u306bempty\u3068isEmpty\u95a2\u6570\u3082\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n\n```fsharp:BinomialHeap.fs\ntype Tree<'a> = {\n    rank : int\n    elem : 'a\n    children : list<Tree<'a>>\n}\n\n// \u540c\u3058\u30e9\u30f3\u30af\u306e\u6728\u3092\u9023\u7d50\u3059\u308b\nlet link t1 t2 =\n    assert (t1.rank = t2.rank)\n    if t1.elem <= t2.elem then {rank = t1.rank+1; elem = t1.elem; children = t2 :: t1.children}\n    else {rank = t1.rank + 1; elem = t2.elem; children = t1 :: t2.children}\n\ntype Heap<'a> = list<Tree<'a>>\n\n// \u65b0\u3057\u3044Binomial Tree\u3092\u30d2\u30fc\u30d7\u306b\u8ffd\u52a0\u3059\u308b\nlet rec insTree t ts =\n    match t, ts with\n    | t, [] -> [t]\n    | t, (t' :: ts') ->\n        assert (t.rank <= t'.rank) \n        if t.rank < t'.rank then t :: ts // \u30e9\u30f3\u30af\u304c\u5c0f\u3055\u3044\u306a\u3089\u3070\u5148\u982d\u306b\u304a\u304f\n        else insTree (link t t') ts'    // \u30e9\u30f3\u30af\u304c\u7b49\u3057\u3044\u6642\u306f\uff0c\u4e00\u65e6\u9023\u7d50\u3057\u3066\u518d\u5e30\n\n// \u8981\u7d20x\u3092\u8ffd\u52a0\nlet insert x = insTree {rank=0; elem=x; children=[]} \n\n// \u4e8c\u3064\u306e\u30d2\u30fc\u30d7\u3092\u30de\u30fc\u30b8\u3059\u308b\nlet rec merge ts1 ts2 = \n    match ts1, ts2 with\n    | ts1, [] -> ts1\n    | [], ts2 -> ts2\n    | t1 :: ts1', t2 :: ts2' ->\n        if t1.rank < t2.rank then t1 :: merge ts1' ts2 // \u5c0f\u3055\u3044\u65b9\u3092\u5148\u982d\u306b\n        else if t1.rank > t2.rank then t2 :: merge ts1 ts2' // \u540c\u3058\u304f\n        else insTree (link t1 t2) (merge ts1' ts2') // \u9023\u7d50\u3057\u305f\u3082\u306e\u3092\u6b8b\u308a\u306b\u8ffd\u52a0\n\n\n\n// \u30d2\u30fc\u30d7\u4e2d\u306e\u6700\u5c0f\u5024\u3092\u6301\u3064\u6728\u3068\uff0c\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u8fd4\u3059\nlet rec removeMinTree = function\n    | [t] -> (t, [])\n    | (t :: ts) ->\n        let (t', ts') = removeMinTree ts // \u5f8c\u308d\u306e\u90e8\u5206\u3092\u898b\u305f\u6642\u306e\u6700\u5c0f\u5024\n        if t.elem <= t'.elem then (t, ts) // \u4eca\u306e\u5148\u982d\u304c\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\n        else (t', t :: ts') // \u5f8c\u308d\u306e\u304c\u5c0f\u3055\u304b\u3063\u305f\u306e\u3067\uff0c\u5f8c\u308d\u306e\u3068\u6b8b\u308a\n\n// \u6700\u5c0f\u5024\u53d6\u5f97\nlet findMin ts = \n    let (t, _) = removeMinTree ts \n    t.elem\n\n// \u6700\u5c0f\u5024\u9664\u53bb\nlet deleteMin ts =\n    let (t, ts') = removeMinTree ts\n    merge (List.rev t.children) ts'\n\nlet empty = []\nlet isEmpty = function\n    | [] -> true\n    | _ -> false\n```\n\n# \u8a08\u7b97\u91cf\n\n\u8a08\u7b97\u91cf\u306f\u5168\u64cd\u4f5c\u3067O(log n)\u3067\u3059\uff0e\u3053\u308c\u306f\u30d2\u30fc\u30d7\u306b\uff0cBinomial Tree\u306e\u30ea\u30b9\u30c8\u3092\u7528\u3044\u308b\u3053\u3068\u3067\uff0clog n\u500b\u306eTree\u3067\u30d2\u30fc\u30d7\u3092\u7ba1\u7406\u3067\u304d\u308b\u3053\u3068\u306b\u7531\u6765\u3057\u307e\u3059\uff0e\u305f\u3060\u3057\uff0cLeftist Heap\u304cfindMin\u306e\u64cd\u4f5c\u304cO(1)\u3067\u3042\u3063\u305f\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u5b9f\u306f\u8a08\u7b97\u91cf\u306e\u3046\u307e\u307f\u306fBinomial Heap\u306b\u306f\u7121\u3044\u3067\u3059\uff0e\u305f\u3060\uff0cPFDS\u306e\u4eca\u5f8c\u306e\u7ae0\u3067\u975e\u5e38\u306b\u91cd\u8981\u306a\u4f4d\u7f6e\u3092\u5360\u3081\u308b\u305f\u3081\uff0c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\n# \u307e\u3068\u3081\n\u672c\u7bc0\u3067\u306fBinomial Heap\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\u5e73\u8861\u306e\u3068\u308c\u305f\u3082\u306e\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u304a\u308a\uff0c\u30a2\u30a4\u30c7\u30a2\u3068\u3057\u3066\u306f\u7f8e\u3057\u3044\u3068\u601d\u3044\u307e\u3057\u305f\uff0ePFDS\u3067\u306fBinomial Heap\u304c\u6b21\u3005\u306b\u9032\u5316\u3057\u3066\u3044\u304f\u306e\u3067\u304a\u697d\u3057\u307f\u306b\uff0e\n\n# \u7d42\u308f\u308a\u3068\u898b\u305b\u304b\u3051\u3066\u5b9f\u884c\u4f8b\n\u307e\u305a\u6b21\u306e\u3066\u304d\u3068\u30fc\u306app\u3092\u5b9a\u7fa9\n\n```fsharp\nlet rec pp = function\n    | [] -> printfn \"\"\n    | (t :: ts) -> \n        printfn \"%A\" t\n        pp ts\n```\n\n1\u304b\u30895\u307e\u3067\u9806\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\uff0e\n\n```\n{rank = 0;\n elem = 1;\n children = [];}\n\n=================================\n{rank = 1;\n elem = 1;\n children = [{rank = 0;\n              elem = 2;\n              children = [];}];}\n\n=================================\n{rank = 0;\n elem = 3;\n children = [];}\n{rank = 1;\n elem = 1;\n children = [{rank = 0;\n              elem = 2;\n              children = [];}];}\n\n=================================\n{rank = 2;\n elem = 1;\n children = [{rank = 1;\n              elem = 3;\n              children = [{rank = 0;\n                           elem = 4;\n                           children = [];}];}; {rank = 0;\n                                                elem = 2;\n                                                children = [];}];}\n\n=================================\n{rank = 0;\n elem = 5;\n children = [];}\n{rank = 2;\n elem = 1;\n children = [{rank = 1;\n              elem = 3;\n              children = [{rank = 0;\n                           elem = 4;\n                           children = [];}];}; {rank = 0;\n                                                elem = 2;\n                                                children = [];}];}\n\n=================================\n```\n\n\u307e\u308b\u30672\u9032\u6570\u8db3\u3057\u7b97\u306e\u3088\u3046\u306b\u6841\u4e0a\u3052\u304c\u8d77\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u5e78\u3044\uff0e\n\n\n\n\n\n\n\n\n", "tags": ["\u95a2\u6570\u578b\u8a00\u8a9e", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "F#"]}