{"tags": ["Go", "golang", "Angular2", "CORS"], "context": "[ Japanese follows English | \u3056\u3063\u304f\u308a\u82f1\u8a9e\u306e\u5f8c\u306b\u3056\u3063\u304f\u308a\u65e5\u672c\u8a9e\u304c\u7d9a\u304d\u307e\u3059 ]\n\nJSONP vs CORS\nPlease see this page for JSONP. In this article, I'll demonstrate both source with CORS. As you know, XMLHttpRequest can handle not only XML but JSON format data.\nJSONP\u306e\u4f8b\u306f\u3053\u3061\u3089\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\u3053\u3053\u3067\u306f\u3001CORS\uff08\u30b3\u30fc\u30ba\uff09\u3092\u7528\u3044\u305f\u65b9\u6cd5\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\u306a\u304a\u3001go\u306eHttp(XMLHttpRequest)\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001JSON\u3082\u6271\u3048\u307e\u3059\u3002\n\nAngular2\n\napp.component.ts\nimport { Component } from '@angular/core';\nimport { Http, HTTP_PROVIDERS } from '@angular/http';\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/map';\n\n\n\n@Component({\n  selector: 'my-app',\n  providers: [HTTP_PROVIDERS],\n  template: `\n    <div>\n      <h1>People</h1>\n      <ul>\n        <li *ngFor=\"let person of people\">\n          {{person.name}}\n        </li>\n      </ul>\n    </div>\n  `\n})\n\nexport class AppComponent {\n  people: Object[];\n  constructor(http:Http) {\n    http.get('http://localhost:8080/people')\n        .map(res=> res.json() )\n        .subscribe(\n          data => this.people = data );\n    };\n}\n\n\n\nGo\n\nserver.go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n)\n\ntype Person struct {\n    Name string `json:\"name\"`\n}\n\ntype People []Person\n\nfunc GetPeople(w http.ResponseWriter, r *http.Request) {\n\n    if origin := r.Header.Get(\"Origin\"); origin != \"\" {\n        w.Header().Set(\"Access-Control-Allow-Origin\", origin)\n        fmt.Println(origin)\n    }\n    w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n    w.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token\")\n\n    people := People{\n        Person{Name: \"John\"},\n        Person{Name: \"Mike\"},\n        Person{Name: \"Peter\"},\n    }\n\n    if err := json.NewEncoder(w).Encode(people); err != nil {\n        panic(err)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/people\", GetPeople)\n    http.ListenAndServe(\":8080\", nil)\n}\n\n\n\n\nRun and result\nSame as JSONP\n\u7d50\u679c\u306fJSONP\u306e\u5834\u5408\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n[ Japanese follows English | \u3056\u3063\u304f\u308a\u82f1\u8a9e\u306e\u5f8c\u306b\u3056\u3063\u304f\u308a\u65e5\u672c\u8a9e\u304c\u7d9a\u304d\u307e\u3059 ]\n\n# JSONP vs CORS\nPlease see [this page](http://qiita.com/miz-k/items/1632d1ff19b858fa4469) for JSONP. In this article, I'll demonstrate both source with CORS. As you know, XMLHttpRequest can handle not only XML but JSON format data.\n\nJSONP\u306e\u4f8b\u306f[\u3053\u3061\u3089](http://qiita.com/miz-k/items/1632d1ff19b858fa4469)\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\u3053\u3053\u3067\u306f\u3001CORS\uff08\u30b3\u30fc\u30ba\uff09\u3092\u7528\u3044\u305f\u65b9\u6cd5\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\u306a\u304a\u3001go\u306eHttp(XMLHttpRequest)\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001JSON\u3082\u6271\u3048\u307e\u3059\u3002\n\n# Angular2\n\n```ts:app.component.ts\nimport { Component } from '@angular/core';\nimport { Http, HTTP_PROVIDERS } from '@angular/http';\nimport { Observable } from 'rxjs/Observable'\nimport 'rxjs/add/operator/map';\n\n\n\n@Component({\n  selector: 'my-app',\n  providers: [HTTP_PROVIDERS],\n  template: `\n    <div>\n      <h1>People</h1>\n      <ul>\n        <li *ngFor=\"let person of people\">\n          {{person.name}}\n        </li>\n      </ul>\n    </div>\n  `\n})\n\nexport class AppComponent {\n  people: Object[];\n  constructor(http:Http) {\n    http.get('http://localhost:8080/people')\n        .map(res=> res.json() )\n        .subscribe(\n          data => this.people = data );\n    };\n}\n```\n\n# Go\n```go:server.go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n}\n\ntype People []Person\n\nfunc GetPeople(w http.ResponseWriter, r *http.Request) {\n\n\tif origin := r.Header.Get(\"Origin\"); origin != \"\" {\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", origin)\n\t\tfmt.Println(origin)\n\t}\n\tw.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token\")\n\n\tpeople := People{\n\t\tPerson{Name: \"John\"},\n\t\tPerson{Name: \"Mike\"},\n\t\tPerson{Name: \"Peter\"},\n\t}\n\n\tif err := json.NewEncoder(w).Encode(people); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/people\", GetPeople)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\n# Run and result\nSame as JSONP\n\n\u7d50\u679c\u306fJSONP\u306e\u5834\u5408\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\n\n\n"}