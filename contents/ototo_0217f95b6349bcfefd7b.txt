{"context": "\n\u4eca\u56de\u306f\u500b\u4eba\u7684\u306b\u4f7f\u3046\u306e\u3067\u304a\u91d1\u304b\u304b\u308bAWSIoT\u3067\u3042\u308c\u3053\u308c\u3063\u3066\u306e\u306f\u306a\u3057\u3067\u3001owncloud\u3068\u304b\u5165\u308c\u3066\u4f7f\u3063\u3066\u308bconoha\u306edocker\u30de\u30b7\u30f3\u4e0a\u3067\u5168\u3066\u7247\u4ed8\u3051\u307e\u3059\u3002\n(\u624b\u9806\u306f\u66f8\u304d\u307e\u305b\u3093\u304c\u4e00\u5fdc\u5916\u90e8\u306b\u958b\u3051\u308b\u306e\u306f\u7279\u5b9a\u306e\u30cf\u30a4\u30dd\u30fc\u30c8\u306e\u307f\u306b\u3057\u3066\u307e\u3059\u3002mosquitto\u3078\u306fSSL\u3067\u901a\u4fe1\u3055\u305b\u308b\u4e88\u5b9a\u3067\u3059)\n\n\u4eca\u56de\u3001\u4e3b\u306b\u53c2\u8003\u306b\u3057\u305f\u3068\u3053\u3092\u4e0b\u8a18\u306b\u307e\u3068\u3081\u307e\u3059\u3002\nmosquitto\nmosquitto-ssl\npaho-mqtt\npymongo\nelasticseach\nBulkAPI\nBulk helpers\nhow-to-use-bulk-api-to-store-the-keywords-in-es-by-using-python\nelasticsearch-py\n\n\u3061\u3087\u3063\u3068\u8aac\u660e\n\n\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3000raspberry pi \u21d2 mosquitto \u21d2 db\u3001elasticseach\u21d2kibana\n\u4eca\u56de\u306fmysql\u306b\u653e\u308a\u8fbc\u307f\u307e\u3057\u305f\u304cmongodb\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u624b\u9806\u3067\u51fa\u6765\u307e\u3059\u3002\nelasticseach\u306b\u3057\u3066\u3082kibana\u306b\u3057\u3066\u3082\u307b\u307c\u521d\u3081\u3066\u4f7f\u3046\u3088\u3046\u306a\u7269\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u7a0b\u5ea6\u306e\u7269\u3067\u3059\u3002\nkibana\u4e0a\u3067\u4f7f\u3046\u3064\u3082\u308a\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001GPS\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u4f4d\u7f6e\u60c5\u5831\u3082\u9001\u308b\u524d\u63d0\u306a\u306e\u3067geo_point\u3082\u4f7f\u7528\u3057\u307e\u3059\u3002\nkibana\u30b3\u30f3\u30c6\u30ca\u306f(outofmemory\uff1f\u304b\u3082)\u3044\u3064\u306e\u9593\u306b\u304b\u6b62\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u3057\u3089\u51e6\u7f6e\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\n\u30b3\u30f3\u30c6\u30ca\u4f5c\u6210\n\u691c\u8a3c\u3057\u306a\u304c\u3089\u306a\u306e\u3067\u3001docke-compose\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u4f7f\u308f\u305a\u3001\u307b\u3068\u3093\u3069\u624b\u4f5c\u696d\u3067\u3059\u3002\n\u7c21\u5358\u306a\u306e\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u3055\u304f\u3055\u304f\u7acb\u3066\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nbusybox(mysql\u7528)\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n\u30b3\u30de\u30f3\u30c9.\ndocker pull busybox\ndocker run -i -t -v /var/lib/mysql --name busybox01 busybox /bin/sh\n\n\n\nmysql\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\nDcokerfile.\nFROM mysql\nEXPOSE 3306\nENV container Docker\nENV MYSQL_ROOT_USER root\nENV MYSQL_ROOT_PASSWORD rootpass\nENV MYSQL_DATABASE log_db\nENV MYSQL_USER test\nENV MYSQL_PASSWORD testpass\n\n\n\n\u30b3\u30de\u30f3\u30c9.\ndocker build -f ./Dockerfile -t mysql:mosql --no-cache=true .\ndocker run -d --name mosdb01 --volumes-from busybox01 -e MYSQL_ROOT_PASSWORD=rootpass mysql:mosql\n\n\n\nElasticseach\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n\u30b3\u30de\u30f3\u30c9.\ndocker pull elasticsearch\ndocker run --name moselasticsearch01 -d elasticsearch\n\n\n\nKibana\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n\u30b3\u30de\u30f3\u30c9.\ndocker pull kibana\ndocker run --name moskibana01 --link moselasticsearch01:elasticsearch -d -p 5601:5601 kibana\n\n\n\nmosquitto\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\u3053\u306e\u30b3\u30f3\u30c6\u30ca\u4e0a\u3067\u3044\u308d\u3044\u308d\u3084\u308b\u306e\u3067\u305f\u304f\u3055\u3093\u5165\u308c\u3066\u307e\u3059\u3002\u8981\u3089\u306a\u3044\u3082\u306e\u306f\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nDockerfile.\nFROM       ubuntu\nMAINTAINER Ototo\nENV        container docker\nRUN        apt-get -y update\nRUN        apt-get install -y mosquitto\nRUN        apt-get install -y openssl\nRUN        apt-get install -y python\nRUN        apt-get install -y python-pip\nRUN        apt-get install -y mysql-client\nRUN        apt-get install -y vim\nRUN        pip install --upgrade pip\nRUN        apt-get install -y curl\nRUN        pip install elasticsearch\nRUN        pip install pymongo\nRUN        pip install paho-mqtt\nRUN        pip install PyMySQL\nEXPOSE     1883\nENTRYPOINT service mosquitto start && /bin/bash --login\n\n\n\n\u30b3\u30de\u30f3\u30c9.\ndocker build -f ./Dockerfile -t ubuntu:mosquitto --no-cache=true .\ndocker run --name mosquitto01 -t -i -d -v /root/mosquitto/mosquitto:/etc/mosquitto --link mosdb01 --link moselasticsearch01 -p 1883:1883  ubuntu:mosquitto /bin/bash\n\n\n\u30b3\u30f3\u30c6\u30ca\u306b\u306f\u3044\u308a\u307e\u3059\u3002\ndocker attach [conteinarID]\n\nmysql\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\nmysql -h mosdb01 -u root -p\nEnter password: rootpass\n\n\u3068\u308a\u3042\u3048\u305a\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u4f5c\u3063\u3066\u51fa\u307e\u3059\u3002\nmysql>use log_db\n\nmysql>CREATE TABLE `log_data` ( `id` int(11) NOT NULL AUTO_INCREMENT,\n                                `date_time` datetime(1), \n                                `data` json NOT NULL,\n                                PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;\n\nmysqll>exit\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\nvim /etc/mosquitto/mosquitto.conf\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081\u4e0b\u8a18\u3092\u8ffd\u8a18\nallow_anonymous false\npassword_file /etc/mosquitto/passwd\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u3068\u30e6\u30fc\u30b6\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8a2d\u5b9a\nmosquitto_passwd -c /etc/mosquitto/passwd mqtt\nPassword: mqttpass\nReenter password: mqttpass\n\n\u30b5\u30fc\u30d3\u30b9\u306e\u30ea\u30b9\u30bf\u30fc\u30c8(\u6700\u5f8c\u306b\u30b3\u30f3\u30c6\u30ca\u306e\u30ea\u30b9\u30bf\u30fc\u30c8\u3067\u3082\u826f\u3044)\nservice mosquitto restart\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nvim /etc/mosquitto/sub.py\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u3053\u3053\u3067db\u3068elasticseach\u306b\u3076\u3061\u8fbc\u3093\u3067\u307e\u3059\u3002\u4f8b\u5916\u51e6\u7406\u5165\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u597d\u307f\u306e\u5f62\u3067\u826f\u3044\u306e\u3067\u66f8\u3044\u305f\u65b9\u304c\u7121\u96e3\u3067\u3059\u3002\n\nsub.py\n#!/usr/bin/env python\nimport paho.mqtt.client as mqtt\nimport pymysql.cursors\nfrom pymongo import MongoClient\nfrom elasticsearch import Elasticsearch\nfrom elasticsearch import helpers\nfrom datetime import datetime\n\n\nusername = \"mqtt\"\nuserpass = \"mqttpass\"\nhost = \"localhost\"\ntopic = \"car/log\"\neshost = \"http://moselasticsearch01:9200\"\nesindex = \"log\"\nestype = \"carlog\"\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \"+str(rc))\n    client.subscribe(topic, qos=0)\n\ndef on_message(client, userdata, msg):\n    print(msg.topic+\" \"+str(msg.payload))\n    set_mysql(msg.payload)\n    set_es(msg.payload)\n\n#insert mysql\ndef set_mysql(data):\n        connection = pymysql.connect(host= 'mosdb01',\n                                     user='root',\n                                     password='rootpass',\n                                     db='log_db',\n                                     charset='utf8',\n                                     cursorclass=pymysql.cursors.DictCursor)\n        with connection.cursor() as cursor:\n            sql = \"INSERT INTO log_data(date_time,data) VALUES ( %s, %s)\"\n            r = cursor.execute(sql, ( datetime.now().strftime( '%Y-%m-%d %H:%M:%S' ), data))\n            print(r) # -> 1\n            connection.commit()\n\n#insert elasticseach\ndef set_es(data):\n        es = Elasticsearch([eshost])\n        actions = []\n        action = {\"_index\": esindex,\"_type\": estype,\"_source\": data}\n        actions.append(action)\n        log = helpers.bulk(es, actions)\n\n#main\nif __name__ == '__main__':\n        client = mqtt.Client()\n        client.on_connect = on_connect\n        client.on_message = on_message\n        client.username_pw_set(username, password=userpass)\n        client.connect(host,1883)\n        client.loop_forever()\n\n\n\n\u30b5\u30fc\u30d3\u30ba\u306e\u8d77\u52d5\u306fbash\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u3084\u3089\u305b\u308b\u3084\u3063\u3064\u3051\u4ed5\u4e8b\nvim ~/.bashrc\n\n\u4e0b\u8a18\u3092\u8ffd\u8a18\nnohup python /etc/mosquitto/sub.py &\n\nelasticseach\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u767b\u9332\u3059\u308b\u306e\u3067\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\nindex.json\n{\n  \"mappings\" : {\n    \"carlog\" : {\n      \"properties\" : {\n        \"battery_level\" : {\n          \"type\" : \"float\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gga\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gsa\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gsv\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_rmc\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"location\" : {\n          \"type\" : \"geo_point\"\n        },\n        \"oil_press\" : {\n          \"type\" : \"float\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"oil_temp\" : {\n          \"type\" : \"integer\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"timestamp\" : {\n          \"type\" : \"date\",\n          \"format\": \"YYYY-MM-dd HH:mm:ss\"\n        },\n        \"water_temp\" : {\n          \"type\" : \"integer\",\n          \"index\" : \"not_analyzed\"\n        }\n      }\n    }\n  }\n}\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u767b\u9332\n\n\u767b\u9332\u30b3\u30de\u30f3\u30c9.\ncurl -XPUT moselasticsearch01:9200/log --data-binary @index.json\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u767b\u9332\u304c\u7d42\u308f\u3063\u305f\u3089\u30b3\u30f3\u30c6\u30ca\u3092\u51fa\u305f\u3089\u30b3\u30f3\u30c6\u30ca\u306e\u518d\u8d77\u52d5\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001docker\u4e0a\u306e\u4f5c\u696d\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\u3082\u3057\u76f4\u306bBulkAPI\u3067\u767b\u9332\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30b3\u30f3\u30c6\u30ca\u4e0a\u3067\u4e0b\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u3057\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3067\u53ef\u80fd\u3067\u3059\u3002\n\nlog.json\n{ \"index\" : {\"_index\" : \"log\",\"_type\" : \"carlog\"}\n{\"timestamp\":\"2016-09-16 19:50:00\" ,\"battery_level\":12.0, \"location\":{\"lon\":\"144.1\",\"lat\":\"43.5\"}, \"water_temp\": 90, \"oil_temp\":80, \"oil_press\":2.0,  \"gps_gsa\":\"$GPGSA\", \"gps_rmc\":\"$GPRMC\", \"gps_gga\":\"$GPGGA\", \"gps_gsv\":\"$GPGSV\"}\n\n\n\n\u30b3\u30de\u30f3\u30c9.\ncurl -XPOST moselasticsearch01:9200/_bulk --data-binary @log.json\n\n\n\nraspberry pi\npi\u304b\u3089\u30b3\u30f3\u30c6\u30ca\u306b\u30c7\u30fc\u30bf\u3092\u6295\u3052\u307e\u3059\u3002\n\u7d30\u304b\u3044\u3053\u3068\u306f\u629c\u304d\u306b\u3057\u3066\u691c\u8a3c\u306fpip install paho-mqtt\u5b9f\u884c\u5f8c\u306b\u4e0b\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5b9f\u884c\u3057\u307e\u3059\u3002\n\npub.py\n#!/usr/bin/env python\nimport json\nimport paho.mqtt.client as mqtt\nfrom datetime import datetime\n\n#test_datqa\ndata = {\"timestamp\":\"\" ,\"battery_level\":0, \"location\":{\"lon\":\"\",\"lat\":\"\"}, \"water_temp\": 0, \"oil_temp\":0, \"oil_press\":0,  \"gps_gsa\":\"\", \"gps_rmc\":\"\", \"gps_gga\":\"\", \"gps_gsv\":\"\"}\n\nWTMP = 80\nOTMP = 90\nOPLS = 2.0\nBLVL = 12.0\nGSA = \"$GPGSA\"\nGGA = \"$GPGGA\"\nRMC =\"$GPRMC\"\nGSV = \"$GPGSV\"\ndata[\"timestamp\"]=datetime.now().strftime( '%Y-%m-%d %H:%M:%S' )\ndata[\"battery_level\"] = BLVL\ndata[\"water_temp\"] = WTMP\ndata[\"oil_temp\"] = OTMP\ndata[\"oil_press\"] = OPLS\ndata[\"gps_gsa\"] = GSA\ndata[\"gps_gga\"] = GGA\ndata[\"gps_rmc\"] = RMC\ndata[\"gps_gsv\"] = GSV\ndata[\"location\"][\"lon\"] = \"139.79\"\ndata[\"location\"][\"lat\"] = \"35.67\"\njson_data = json.dumps(data)\n\nusername = \"mqtt\"\nuserpass = \"mqttpass\"\nhost = \"mosquitto\u30b5\u30fc\u30d0\u306e\uff29\uff30\"\ntopic = \"car/log\"\n\n#main\nif __name__ == '__main__':\n    client = mqtt.Client()\n    client.username_pw_set(username, password=userpass)\n    client.connect(host,1883, 60)\n    client.publish(topic, payload=json_data, qos=1, retain=False)\n    client.disconnect()\n\n\n\u3042\u3068\u306fkibana\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u304c\u6765\u3066\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n![kibana.png](https://qiita-image-store.s3.amazonaws.com/0/133915/d45bddf9-d646-4d12-3be8-b3c2b5f6d736.png)\n\n\n\n\u4eca\u56de\u306f\u500b\u4eba\u7684\u306b\u4f7f\u3046\u306e\u3067\u304a\u91d1\u304b\u304b\u308bAWSIoT\u3067\u3042\u308c\u3053\u308c\u3063\u3066\u306e\u306f\u306a\u3057\u3067\u3001owncloud\u3068\u304b\u5165\u308c\u3066\u4f7f\u3063\u3066\u308bconoha\u306edocker\u30de\u30b7\u30f3\u4e0a\u3067\u5168\u3066\u7247\u4ed8\u3051\u307e\u3059\u3002\n(\u624b\u9806\u306f\u66f8\u304d\u307e\u305b\u3093\u304c\u4e00\u5fdc\u5916\u90e8\u306b\u958b\u3051\u308b\u306e\u306f\u7279\u5b9a\u306e\u30cf\u30a4\u30dd\u30fc\u30c8\u306e\u307f\u306b\u3057\u3066\u307e\u3059\u3002mosquitto\u3078\u306fSSL\u3067\u901a\u4fe1\u3055\u305b\u308b\u4e88\u5b9a\u3067\u3059)\n\n#\u4eca\u56de\u3001\u4e3b\u306b\u53c2\u8003\u306b\u3057\u305f\u3068\u3053\u3092\u4e0b\u8a18\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n[mosquitto](https://mosquitto.org/)\n[mosquitto-ssl](https://mosquitto.org/man/mosquitto-tls-7.html)\n[paho-mqtt](https://pypi.python.org/pypi/paho-mqtt/1.2)\n[pymongo](http://api.mongodb.com/python/current/index.html)\n[elasticseach](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html)\n[BulkAPI](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html#docs-bulk)\n[Bulk helpers](https://elasticsearch-py.readthedocs.io/en/master/helpers.html#elasticsearch.helpers.bulk)\n[how-to-use-bulk-api-to-store-the-keywords-in-es-by-using-python](http://stackoverflow.com/questions/20288770/how-to-use-bulk-api-to-store-the-keywords-in-es-by-using-python)\n[elasticsearch-py](https://github.com/elastic/elasticsearch-py)\n\n#\u3061\u3087\u3063\u3068\u8aac\u660e\n+ \u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3000raspberry pi \u21d2 mosquitto \u21d2 db\u3001elasticseach\u21d2kibana\n+ \u4eca\u56de\u306fmysql\u306b\u653e\u308a\u8fbc\u307f\u307e\u3057\u305f\u304cmongodb\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u624b\u9806\u3067\u51fa\u6765\u307e\u3059\u3002\n+ elasticseach\u306b\u3057\u3066\u3082kibana\u306b\u3057\u3066\u3082\u307b\u307c\u521d\u3081\u3066\u4f7f\u3046\u3088\u3046\u306a\u7269\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u7a0b\u5ea6\u306e\u7269\u3067\u3059\u3002\n+ kibana\u4e0a\u3067\u4f7f\u3046\u3064\u3082\u308a\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001GPS\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u4f4d\u7f6e\u60c5\u5831\u3082\u9001\u308b\u524d\u63d0\u306a\u306e\u3067geo_point\u3082\u4f7f\u7528\u3057\u307e\u3059\u3002\n+ kibana\u30b3\u30f3\u30c6\u30ca\u306f(outofmemory\uff1f\u304b\u3082)\u3044\u3064\u306e\u9593\u306b\u304b\u6b62\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u3057\u3089\u51e6\u7f6e\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n#\u30b3\u30f3\u30c6\u30ca\u4f5c\u6210\n\u691c\u8a3c\u3057\u306a\u304c\u3089\u306a\u306e\u3067\u3001docke-compose\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u4f7f\u308f\u305a\u3001\u307b\u3068\u3093\u3069\u624b\u4f5c\u696d\u3067\u3059\u3002\n\u7c21\u5358\u306a\u306e\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u3055\u304f\u3055\u304f\u7acb\u3066\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n##busybox(mysql\u7528)\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n```\u30b3\u30de\u30f3\u30c9.\ndocker pull busybox\ndocker run -i -t -v /var/lib/mysql --name busybox01 busybox /bin/sh\n```\n\n##mysql\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n```Dcokerfile.\nFROM mysql\nEXPOSE 3306\nENV container Docker\nENV MYSQL_ROOT_USER root\nENV MYSQL_ROOT_PASSWORD rootpass\nENV MYSQL_DATABASE log_db\nENV MYSQL_USER test\nENV MYSQL_PASSWORD testpass\n```\n\n```\u30b3\u30de\u30f3\u30c9.\ndocker build -f ./Dockerfile -t mysql:mosql --no-cache=true .\ndocker run -d --name mosdb01 --volumes-from busybox01 -e MYSQL_ROOT_PASSWORD=rootpass mysql:mosql\n```\n\n\n##Elasticseach\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n```\u30b3\u30de\u30f3\u30c9.\ndocker pull elasticsearch\ndocker run --name moselasticsearch01 -d elasticsearch\n```\n##Kibana\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n```\u30b3\u30de\u30f3\u30c9.\ndocker pull kibana\ndocker run --name moskibana01 --link moselasticsearch01:elasticsearch -d -p 5601:5601 kibana\n```\n\n##mosquitto\n\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\u3053\u306e\u30b3\u30f3\u30c6\u30ca\u4e0a\u3067\u3044\u308d\u3044\u308d\u3084\u308b\u306e\u3067\u305f\u304f\u3055\u3093\u5165\u308c\u3066\u307e\u3059\u3002\u8981\u3089\u306a\u3044\u3082\u306e\u306f\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```Dockerfile.\nFROM       ubuntu\nMAINTAINER Ototo\nENV        container docker\nRUN        apt-get -y update\nRUN        apt-get install -y mosquitto\nRUN        apt-get install -y openssl\nRUN        apt-get install -y python\nRUN        apt-get install -y python-pip\nRUN        apt-get install -y mysql-client\nRUN        apt-get install -y vim\nRUN        pip install --upgrade pip\nRUN        apt-get install -y curl\nRUN        pip install elasticsearch\nRUN        pip install pymongo\nRUN        pip install paho-mqtt\nRUN        pip install PyMySQL\nEXPOSE     1883\nENTRYPOINT service mosquitto start && /bin/bash --login\n```\n\n```\u30b3\u30de\u30f3\u30c9.\ndocker build -f ./Dockerfile -t ubuntu:mosquitto --no-cache=true .\ndocker run --name mosquitto01 -t -i -d -v /root/mosquitto/mosquitto:/etc/mosquitto --link mosdb01 --link moselasticsearch01 -p 1883:1883  ubuntu:mosquitto /bin/bash\n```\n\u30b3\u30f3\u30c6\u30ca\u306b\u306f\u3044\u308a\u307e\u3059\u3002\n\n```\ndocker attach [conteinarID]\n```\nmysql\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\n\n```\nmysql -h mosdb01 -u root -p\nEnter password: rootpass\n```\n\n\u3068\u308a\u3042\u3048\u305a\u30c6\u30fc\u30d6\u30eb\u3060\u3051\u4f5c\u3063\u3066\u51fa\u307e\u3059\u3002\n\n```\nmysql>use log_db\n\nmysql>CREATE TABLE `log_data` ( `id` int(11) NOT NULL AUTO_INCREMENT,\n                                `date_time` datetime(1), \n                                `data` json NOT NULL,\n                                PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;\n\nmysqll>exit\n```\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n\n```\nvim /etc/mosquitto/mosquitto.conf\n```\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6709\u52b9\u306b\u3059\u308b\u305f\u3081\u4e0b\u8a18\u3092\u8ffd\u8a18\n\n```\nallow_anonymous false\npassword_file /etc/mosquitto/passwd\n```\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u3068\u30e6\u30fc\u30b6\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u8a2d\u5b9a\n\n```\nmosquitto_passwd -c /etc/mosquitto/passwd mqtt\nPassword: mqttpass\nReenter password: mqttpass\n```\n\n\u30b5\u30fc\u30d3\u30b9\u306e\u30ea\u30b9\u30bf\u30fc\u30c8(\u6700\u5f8c\u306b\u30b3\u30f3\u30c6\u30ca\u306e\u30ea\u30b9\u30bf\u30fc\u30c8\u3067\u3082\u826f\u3044)\n\n```\nservice mosquitto restart\n```\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n```\nvim /etc/mosquitto/sub.py\n```\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u3053\u3053\u3067db\u3068elasticseach\u306b\u3076\u3061\u8fbc\u3093\u3067\u307e\u3059\u3002\u4f8b\u5916\u51e6\u7406\u5165\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u597d\u307f\u306e\u5f62\u3067\u826f\u3044\u306e\u3067\u66f8\u3044\u305f\u65b9\u304c\u7121\u96e3\u3067\u3059\u3002\n\n```py:sub.py\n#!/usr/bin/env python\nimport paho.mqtt.client as mqtt\nimport pymysql.cursors\nfrom pymongo import MongoClient\nfrom elasticsearch import Elasticsearch\nfrom elasticsearch import helpers\nfrom datetime import datetime\n\n\nusername = \"mqtt\"\nuserpass = \"mqttpass\"\nhost = \"localhost\"\ntopic = \"car/log\"\neshost = \"http://moselasticsearch01:9200\"\nesindex = \"log\"\nestype = \"carlog\"\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \"+str(rc))\n    client.subscribe(topic, qos=0)\n\ndef on_message(client, userdata, msg):\n    print(msg.topic+\" \"+str(msg.payload))\n    set_mysql(msg.payload)\n    set_es(msg.payload)\n\n#insert mysql\ndef set_mysql(data):\n        connection = pymysql.connect(host= 'mosdb01',\n                                     user='root',\n                                     password='rootpass',\n                                     db='log_db',\n                                     charset='utf8',\n                                     cursorclass=pymysql.cursors.DictCursor)\n        with connection.cursor() as cursor:\n            sql = \"INSERT INTO log_data(date_time,data) VALUES ( %s, %s)\"\n            r = cursor.execute(sql, ( datetime.now().strftime( '%Y-%m-%d %H:%M:%S' ), data))\n            print(r) # -> 1\n            connection.commit()\n\n#insert elasticseach\ndef set_es(data):\n        es = Elasticsearch([eshost])\n        actions = []\n        action = {\"_index\": esindex,\"_type\": estype,\"_source\": data}\n        actions.append(action)\n        log = helpers.bulk(es, actions)\n\n#main\nif __name__ == '__main__':\n        client = mqtt.Client()\n        client.on_connect = on_connect\n        client.on_message = on_message\n        client.username_pw_set(username, password=userpass)\n        client.connect(host,1883)\n        client.loop_forever()\n\n```\n\n\u30b5\u30fc\u30d3\u30ba\u306e\u8d77\u52d5\u306fbash\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u3084\u3089\u305b\u308b\u3084\u3063\u3064\u3051\u4ed5\u4e8b\n\n```\nvim ~/.bashrc\n```\n\n\u4e0b\u8a18\u3092\u8ffd\u8a18\n\n```\nnohup python /etc/mosquitto/sub.py &\n```\n\nelasticseach\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u767b\u9332\u3059\u308b\u306e\u3067\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\n\n```json:index.json\n{\n  \"mappings\" : {\n    \"carlog\" : {\n      \"properties\" : {\n        \"battery_level\" : {\n          \"type\" : \"float\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gga\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gsa\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_gsv\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"gps_rmc\" : {\n          \"type\" : \"string\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"location\" : {\n          \"type\" : \"geo_point\"\n        },\n        \"oil_press\" : {\n          \"type\" : \"float\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"oil_temp\" : {\n          \"type\" : \"integer\",\n          \"index\" : \"not_analyzed\"\n        },\n        \"timestamp\" : {\n          \"type\" : \"date\",\n          \"format\": \"YYYY-MM-dd HH:mm:ss\"\n        },\n        \"water_temp\" : {\n          \"type\" : \"integer\",\n          \"index\" : \"not_analyzed\"\n        }\n      }\n    }\n  }\n}\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u767b\u9332\n\n```\u767b\u9332\u30b3\u30de\u30f3\u30c9.\ncurl -XPUT moselasticsearch01:9200/log --data-binary @index.json\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u767b\u9332\u304c\u7d42\u308f\u3063\u305f\u3089\u30b3\u30f3\u30c6\u30ca\u3092\u51fa\u305f\u3089\u30b3\u30f3\u30c6\u30ca\u306e\u518d\u8d77\u52d5\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001docker\u4e0a\u306e\u4f5c\u696d\u306f\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3082\u3057\u76f4\u306bBulkAPI\u3067\u767b\u9332\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30b3\u30f3\u30c6\u30ca\u4e0a\u3067\u4e0b\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u3057\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3067\u53ef\u80fd\u3067\u3059\u3002\n\n```json:log.json\n{ \"index\" : {\"_index\" : \"log\",\"_type\" : \"carlog\"}\n{\"timestamp\":\"2016-09-16 19:50:00\" ,\"battery_level\":12.0, \"location\":{\"lon\":\"144.1\",\"lat\":\"43.5\"}, \"water_temp\": 90, \"oil_temp\":80, \"oil_press\":2.0,  \"gps_gsa\":\"$GPGSA\", \"gps_rmc\":\"$GPRMC\", \"gps_gga\":\"$GPGGA\", \"gps_gsv\":\"$GPGSV\"}\n```\n```\u30b3\u30de\u30f3\u30c9.\ncurl -XPOST moselasticsearch01:9200/_bulk --data-binary @log.json\n```\n\n\n#raspberry pi\npi\u304b\u3089\u30b3\u30f3\u30c6\u30ca\u306b\u30c7\u30fc\u30bf\u3092\u6295\u3052\u307e\u3059\u3002\n\u7d30\u304b\u3044\u3053\u3068\u306f\u629c\u304d\u306b\u3057\u3066\u691c\u8a3c\u306f``pip install paho-mqtt``\u5b9f\u884c\u5f8c\u306b\u4e0b\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```py:pub.py\n#!/usr/bin/env python\nimport json\nimport paho.mqtt.client as mqtt\nfrom datetime import datetime\n\n#test_datqa\ndata = {\"timestamp\":\"\" ,\"battery_level\":0, \"location\":{\"lon\":\"\",\"lat\":\"\"}, \"water_temp\": 0, \"oil_temp\":0, \"oil_press\":0,  \"gps_gsa\":\"\", \"gps_rmc\":\"\", \"gps_gga\":\"\", \"gps_gsv\":\"\"}\n\nWTMP = 80\nOTMP = 90\nOPLS = 2.0\nBLVL = 12.0\nGSA = \"$GPGSA\"\nGGA = \"$GPGGA\"\nRMC =\"$GPRMC\"\nGSV = \"$GPGSV\"\ndata[\"timestamp\"]=datetime.now().strftime( '%Y-%m-%d %H:%M:%S' )\ndata[\"battery_level\"] = BLVL\ndata[\"water_temp\"] = WTMP\ndata[\"oil_temp\"] = OTMP\ndata[\"oil_press\"] = OPLS\ndata[\"gps_gsa\"] = GSA\ndata[\"gps_gga\"] = GGA\ndata[\"gps_rmc\"] = RMC\ndata[\"gps_gsv\"] = GSV\ndata[\"location\"][\"lon\"] = \"139.79\"\ndata[\"location\"][\"lat\"] = \"35.67\"\njson_data = json.dumps(data)\n\nusername = \"mqtt\"\nuserpass = \"mqttpass\"\nhost = \"mosquitto\u30b5\u30fc\u30d0\u306e\uff29\uff30\"\ntopic = \"car/log\"\n\n#main\nif __name__ == '__main__':\n    client = mqtt.Client()\n    client.username_pw_set(username, password=userpass)\n    client.connect(host,1883, 60)\n    client.publish(topic, payload=json_data, qos=1, retain=False)\n    client.disconnect()\n```\n\u3042\u3068\u306fkibana\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30c7\u30fc\u30bf\u304c\u6765\u3066\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n![discover.png](https://qiita-image-store.s3.amazonaws.com/0/133915/0022c49d-f7b6-175e-e20b-6e87d21e7606.png)\n\n", "tags": ["docker", "mosquitto", "MySQL", "Python", "kibana"]}