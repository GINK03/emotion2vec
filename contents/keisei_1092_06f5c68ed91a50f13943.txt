{"context": "\uff08\u3053\u306e\u8a18\u4e8b\u306f CPS Lab Advent Calendar 2016 \u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff09\nReactive Programming\u306e\u6d41\u884c\u3092\u307f\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u3069\u3093\u306a\u3082\u306e\u304b\u3068\u624b\u63a2\u308a\u3067\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u30ac\u30b5\u30b4\u30bd\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3088\u3055\u3052\u306a\u30d7\u30ec\u30bc\u30f3\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u5480\u56bc\u3057\u3066\u307f\u305f\u3002\n\n\u3068\u308a\u3042\u3048\u305aRxSwift\u3068RxCocoa\u3044\u308c\u308b\n\nXcode\u3067\u300cSingle Application\u300d\u3067\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5f53\u8a72\u30d5\u30a9\u30eb\u30c0\u307e\u3067 cd\n\nbundle init\nGemfile\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067Gemfile\u306e\u4e2d\u306b gem 'cocoapods' \u3068\u66f8\u3044\u3066 bundle install\n\nbundle exec pod init\nPodfile\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067Podfile\u306e\u4e2d\u306b pod 'RxSwift' (\u6539\u884c) pod 'RxCocoa'\n\nbundle exec pod install\nopen (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d).xcworkspace\n\n\nObservable.just() \u304b\u3089\u306f\u3058\u3081\u308bRxSwift\nViewController\u306e viewDidLoad() \u306e\u4e2d\u306b\u4ee5\u4e0b\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3057\u307e\u3059\n\nViewController.swift\nlet _ = Observable.just(1).subscribe(\n    onNext: { event in\n        print(event)\n    }\n)\n\n\n\n\nlet _ = ... \u3053\u3046\u66f8\u304b\u306a\u3044\u3068\u300c\u8fd4\u308a\u5024\u304c\u3042\u308b\u304b\u3089\u305d\u3044\u3064\u53d7\u3051\u6b62\u3081\u3066\u304f\u308c\u301c\u300d\u3063\u3066\u6012\u3089\u308c\u308b\n\nObservable Rx\u306e\u3061\u304b\u3089  \u3092\u4f7f\u3046\n\n.just \u3053\u308c\u3092\u5ba3\u8a00\u3059\u308b\u3068\u5f15\u6570\u304c\u3053\u306e\u5834\u5408\u306f Int \u304b\u3089 Observable<Int> \u306b\u5909\u308f\u308a\u307e\u3059\n\n.subscribe forEach\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001 onNext \u3084 onError \u306a\u3069\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u3059\u3068Observable\u306e\u8981\u7d20\u3092\u9806\u756a\u306b\u306a\u3081\u3066\u304f\u308c\u308b\n\n\n\u8907\u6570\u306eObservable\u3092\u6d41\u3057\u3066\u307f\u308b\nObservable.just() \u3067\u306f\u5358\u4e00\u306e\u8981\u7d20\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306b Observable.from() \u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nViewController.swift\nlet _ = Observable.from(0...10).subscribe(\n    onNext: { event in\n        print(event)\n    }\n)\n\n\n0...10 \u306fSwift\u3067\u7bc4\u56f2\u3092\u8868\u3059\u8a18\u6cd5\u3067\u3059\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u30680\u304b\u308910\u307e\u3067\u306e\u6570\u5b57\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u8868\u793a\u3055\u308c\u305f\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nObservable.from() \u3092\u4f7f\u3046\u3068\u3001\u914d\u5217\u306e\u5404\u8981\u7d20\u3092Observable\u3067\u30e9\u30c3\u30d7\u3057\u3066\u304f\u308c\u3001subscribe\u3067\u9806\u756a\u306b\u306a\u3081\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3057\u3066\u307f\u3088\u3046\n\u307e\u305a\u300c\u5358\u4e00\u306e Error \u300d\u3092subscribe\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5148\u306bError\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u305fenum\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\nclass ViewController \u306e\u5ba3\u8a00\u306e\u5916\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\nViewController.swift\nenum MyError: Error {\n    case error\n}\n\n\n\u6b21\u306b\u30a8\u30e9\u30fc\u306eObservable\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u3061\u3089\u306f viewDidLoad() \u306e\u4e2d\u3067\u884c\u3044\u307e\u3059\n\nViewController.swift\nlet _ = Observable.error(MyError.error).subscribe(\n    onNext: { event in\n        print(event)\n    },\n    onError: { error in\n        print(\"\u30a8\u30e9\u30fc\uff01 \\(error)\")\n    }\n)\n\n\n\u3053\u3046\u66f8\u3044\u3066\u5b9f\u884c\u3059\u308b\u3068 \u30a8\u30e9\u30fc\uff01 error \u3068\u8868\u793a\u3055\u308c\u307e\u3059\n\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u306eObservable\u3092subscribe\u3057\u305f\u306e\u3067\u3001 onError \u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\n\u914d\u5217\u306e\u8981\u7d20\u306e\u4e2d\u306b\u30a8\u30e9\u30fc\u3092\u6df7\u5165\u3055\u305b\u3066\u307f\u308b\n\u5148\u307b\u3069\u8a66\u3057\u305f Observable.from() \u3092\u4f7f\u3063\u3066\u3001\u666e\u901a\u306e\u8981\u7d20\u306e\u4e2d\u306b\u30a8\u30e9\u30fc\u3092\u6df7\u5165\u3055\u305b\u3066\u307f\u307e\u3059\u3002\nenum MyError \u306f\u307e\u3060\u4f7f\u3044\u307e\u3059\u3002\n\nViewController.swift\nObservable<Any>.create { observer in\n    [1, 2, 3, 4].forEach({\n        observer.on(.next($0))\n    })\n    observer.on(.error(MyError.error))\n    return Disposables.create()\n}.subscribe(\n    onNext: { event in\n        print(event)\n    },\n    onError: { error in\n        print(\"\u30a8\u30e9\u30fc\uff01 \\(error)\")\n    }\n)\n\n\nObservable.create() \u3068\u3044\u3046\u306e\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u4e0a\u534a\u5206\u3067\u306f4\u3064\u666e\u901a\u306e\u8981\u7d20\u3092\u6ce8\u5165\u3057\u305f\u6700\u5f8c\u306bError\u3092\u6ce8\u5165\u3057\u3066\u3044\u307e\u3059\u3002\u4e0b\u534a\u5206\u306f\u5909\u308f\u3063\u3066\u3044\u307e\u305b\u3093\u3002 1 2 3 4 \u30a8\u30e9\u30fc\uff01 error \u3068\u3044\u3046\u98a8\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u3066\u304f\u308c\u3070OK\u3067\u3059\u3002\n\n\u305d\u3057\u3066UITableView\u3078\n\u306a\u3093\u304b just \u3068\u304b from \u3068\u304b subscribe \u3068\u304b onNext \u3068\u304b\u3092\u558b\u308c\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u8584\u3005\u308f\u304b\u3063\u3066\u304d\u305f\u3068\u3053\u308d\u3067\u3001UI\u306e\u5b9f\u88c5\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u304d\u305f ViewController.swift \uff08\u30af\u30e9\u30b9\u540d ViewController \uff09\u306b\u5c11\u3057\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\n\nTableViewController.swift \uff08\u30af\u30e9\u30b9\u540d TableViewController \uff09\u306b\u3059\u308b\n\u7d99\u627f\u5143\u3092 UIViewController => UITableViewController \u306b\nStoryboard\u304b\u3089ViewController\u3092\u6d88\u3057\u3066TableViewController\u306b\n\n\nIdentity Inspector\u306e\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u5909\u66f4\nAttributes Inspector\u3067Is Initial View Controller\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\nTableView\u306eprototype cell\u3092\u9078\u629e\u3057\u3066Attributes Inspector\u306e\u4e2d\u304b\u3089Identifier\u306b cell \u3068\u8a2d\u5b9a\u3059\u308b\n\n\n\n\u3055\u3066\u3001\u901a\u5e38\u306e\u66f8\u304d\u65b9\u3067UITableView\u3092\u3084\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u3088\u304f\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nTableViewController.swift\noverride func numberOfSections(in tableView: UITableView) -> Int {\n    return 1\n}\n\noverride func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n    return 20\n}\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = UITableViewCell(style: .default, reuseIdentifier: \"cell\")\u2028   \n    cell.textLabel?.text = indexPath.row\n    return cell\n}\n\n\n\u3053\u3053\u3067\u3064\u3044\u306bRxCocoa\u306e\u767b\u5834\u3067\u3059\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u306f\u66f8\u304b\u305a\u306b\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u30af\u30e9\u30b9\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nTableViewController.swift\nclass TableViewController: UITableViewController {\n\n    var disposeBag = DisposeBag()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        tableView.delegate = nil\n        tableView.dataSource = nil\n        let items = Observable.just((0..<20).map { \"\\($0)\" })\n        items.bindTo(tableView.rx.items(cellIdentifier: \"cell\", cellType: UITableViewCell.self)) { (row, element, cell) in\n            cell.textLabel?.text = \"\\(element)\"\n        }\n        .addDisposableTo(disposeBag)\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n}\n\n\n\u3053\u308c\u3067\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 0 \u304b\u3089 19 \u306e\u8981\u7d20\u3092\u30e9\u30d9\u30eb\u306b\u3082\u3063\u305f\u30bb\u30eb\u3092\u751f\u6210\u3057\u3066\u3084\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3089\u3078\u3093\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u79c1\u3082\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3060\u3044\u305f\u3044\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3057\u3066\u306f\n\n\ndisposeBag \u3068\u3044\u3046\u306e\u3092\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u9632\u3052\u308b\u3089\u3057\u3044\ntableView\u306edelegate\u3068dataSource\u3092nil\u306b\u3059\u308b\uff08\u3053\u3046\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3067\u6b7b\u306c\uff09\n\n0 \u304b\u3089 19 \u3068\u3044\u3046\u8981\u7d20\u306e\u5165\u3063\u305f items \u3068\u3044\u3046Observable\u306a\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u3002\n\n\n\u305d\u3057\u3066\u3001tableView\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\n\n\n\u30bb\u30eb\u306f cell \u3068\u540d\u3092\u3064\u3051\u305fprototype cell\u3092\u4f7f\u7528\u3059\u308b\n\u30c6\u30ad\u30b9\u30c8\u30e9\u30d9\u30eb\u306e\u5024\u306b\u8981\u7d20\u306e\u5024\u3092\u5229\u7528\u3059\u308b\n\n\n\n\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u3053\u307e\u3067\u3001Observable\u306e\u8981\u7d20\u3092\u751f\u6210\u3059\u308b\u3068\u3053\u308d\u304b\u3089Observable\u306a\u8981\u7d20\u7fa4\u3092UIKit\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3055\u3089\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u81ea\u5206\u3082\u66f8\u304d\u306a\u304c\u3089\u7406\u89e3\u3059\u308b\u3068\u3053\u308d\u304c\u3042\u308a\u3068\u3066\u3082\u305f\u3081\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nReactive Programming\u306f\u79c1\u7684\u306b\u305d\u305d\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u5f15\u304d\u7d9a\u304d\u7df4\u7fd2\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3042\u304f\u307e\u3067\u30d1\u30e9\u30c0\u30a4\u30e0\u306e\u9078\u629e\u306f\u81ea\u7531\u306a\u306e\u3067\u3001\u300c\u81ea\u5206\u304c\u4e00\u756a\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u3092\u4f7f\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\n\u53c2\u8003\n\nhttps://realm.io/news/slug-max-alexander-functional-reactive-rxswift/\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md\n https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample/Examples/SimpleTableViewExample/SimpleTableViewExampleViewController.swift\n\nhttp://qiita.com/moaible/items/de94c574b25ea4f0ef17#just\nhttps://newfivefour.com/swift-ios-rxswift.html\nhttp://qiita.com/erukiti/items/6a82dfd3506e9773d592\nhttp://tiny-wing.hatenablog.com/entry/2016/01/02/161322\n\n\uff08\u3053\u306e\u8a18\u4e8b\u306f [CPS Lab Advent Calendar 2016](http://www.adventar.org/calendars/1536) \u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff09\n\nReactive Programming\u306e\u6d41\u884c\u3092\u307f\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u3069\u3093\u306a\u3082\u306e\u304b\u3068\u624b\u63a2\u308a\u3067\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u30ac\u30b5\u30b4\u30bd\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001[\u3088\u3055\u3052\u306a\u30d7\u30ec\u30bc\u30f3](https://realm.io/news/slug-max-alexander-functional-reactive-rxswift/)\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u5480\u56bc\u3057\u3066\u307f\u305f\u3002\n\n# \u3068\u308a\u3042\u3048\u305aRxSwift\u3068RxCocoa\u3044\u308c\u308b\n\n* Xcode\u3067\u300cSingle Application\u300d\u3067\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n* \u30bf\u30fc\u30df\u30ca\u30eb\u3067\u5f53\u8a72\u30d5\u30a9\u30eb\u30c0\u307e\u3067 `cd`\n* `bundle init`\n* Gemfile\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067Gemfile\u306e\u4e2d\u306b `gem 'cocoapods'` \u3068\u66f8\u3044\u3066 `bundle install`\n* `bundle exec pod init`\n* Podfile\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067Podfile\u306e\u4e2d\u306b `pod 'RxSwift' (\u6539\u884c) pod 'RxCocoa'`\n* `bundle exec pod install`\n* `open (\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d).xcworkspace`\n\n# `Observable.just()` \u304b\u3089\u306f\u3058\u3081\u308bRxSwift\n\nViewController\u306e `viewDidLoad()` \u306e\u4e2d\u306b\u4ee5\u4e0b\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3057\u307e\u3059\n\n```swift:ViewController.swift\nlet _ = Observable.just(1).subscribe(\n    onNext: { event in\n        print(event)\n    }\n)\n```\n\n* `let _ = ...` \u3053\u3046\u66f8\u304b\u306a\u3044\u3068\u300c\u8fd4\u308a\u5024\u304c\u3042\u308b\u304b\u3089\u305d\u3044\u3064\u53d7\u3051\u6b62\u3081\u3066\u304f\u308c\u301c\u300d\u3063\u3066\u6012\u3089\u308c\u308b\n* `Observable` Rx\u306e\u3061\u304b\u3089 :muscle: \u3092\u4f7f\u3046\n* `.just` \u3053\u308c\u3092\u5ba3\u8a00\u3059\u308b\u3068\u5f15\u6570\u304c\u3053\u306e\u5834\u5408\u306f `Int` \u304b\u3089 `Observable<Int>` \u306b\u5909\u308f\u308a\u307e\u3059\n* `.subscribe` forEach\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001 `onNext` \u3084 `onError` \u306a\u3069\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u3059\u3068Observable\u306e\u8981\u7d20\u3092\u9806\u756a\u306b\u306a\u3081\u3066\u304f\u308c\u308b\n\n## \u8907\u6570\u306eObservable\u3092\u6d41\u3057\u3066\u307f\u308b\n\n`Observable.just()` \u3067\u306f\u5358\u4e00\u306e\u8981\u7d20\u3092\u6d41\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306b `Observable.from()` \u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```swift:ViewController.swift\nlet _ = Observable.from(0...10).subscribe(\n    onNext: { event in\n        print(event)\n    }\n)\n```\n\n`0...10` \u306fSwift\u3067\u7bc4\u56f2\u3092\u8868\u3059\u8a18\u6cd5\u3067\u3059\n\n\u3053\u308c\u3067\u5b9f\u884c\u3059\u308b\u30680\u304b\u308910\u307e\u3067\u306e\u6570\u5b57\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u8868\u793a\u3055\u308c\u305f\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n`Observable.from()` \u3092\u4f7f\u3046\u3068\u3001\u914d\u5217\u306e\u5404\u8981\u7d20\u3092Observable\u3067\u30e9\u30c3\u30d7\u3057\u3066\u304f\u308c\u3001subscribe\u3067\u9806\u756a\u306b\u306a\u3081\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3057\u3066\u307f\u3088\u3046\n\n\u307e\u305a\u300c\u5358\u4e00\u306e `Error` \u300d\u3092subscribe\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u5148\u306bError\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u305fenum\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n`class ViewController` \u306e\u5ba3\u8a00\u306e\u5916\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n```swift:ViewController.swift\nenum MyError: Error {\n    case error\n}\n```\n\n\u6b21\u306b\u30a8\u30e9\u30fc\u306eObservable\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u3061\u3089\u306f `viewDidLoad()` \u306e\u4e2d\u3067\u884c\u3044\u307e\u3059\n\n```swift:ViewController.swift\nlet _ = Observable.error(MyError.error).subscribe(\n    onNext: { event in\n        print(event)\n    },\n    onError: { error in\n        print(\"\u30a8\u30e9\u30fc\uff01 \\(error)\")\n    }\n)\n```\n\n\u3053\u3046\u66f8\u3044\u3066\u5b9f\u884c\u3059\u308b\u3068 `\u30a8\u30e9\u30fc\uff01 error` \u3068\u8868\u793a\u3055\u308c\u307e\u3059\n\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u306eObservable\u3092subscribe\u3057\u305f\u306e\u3067\u3001 `onError` \u306b\u5165\u308a\u307e\u3057\u305f\u3002\n\n## \u914d\u5217\u306e\u8981\u7d20\u306e\u4e2d\u306b\u30a8\u30e9\u30fc\u3092\u6df7\u5165\u3055\u305b\u3066\u307f\u308b\n\n\u5148\u307b\u3069\u8a66\u3057\u305f `Observable.from()` \u3092\u4f7f\u3063\u3066\u3001\u666e\u901a\u306e\u8981\u7d20\u306e\u4e2d\u306b\u30a8\u30e9\u30fc\u3092\u6df7\u5165\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n`enum MyError` \u306f\u307e\u3060\u4f7f\u3044\u307e\u3059\u3002\n\n```swift:ViewController.swift\nObservable<Any>.create { observer in\n    [1, 2, 3, 4].forEach({\n        observer.on(.next($0))\n    })\n    observer.on(.error(MyError.error))\n    return Disposables.create()\n}.subscribe(\n    onNext: { event in\n        print(event)\n    },\n    onError: { error in\n        print(\"\u30a8\u30e9\u30fc\uff01 \\(error)\")\n    }\n)\n```\n\n`Observable.create()` \u3068\u3044\u3046\u306e\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u4e0a\u534a\u5206\u3067\u306f4\u3064\u666e\u901a\u306e\u8981\u7d20\u3092\u6ce8\u5165\u3057\u305f\u6700\u5f8c\u306bError\u3092\u6ce8\u5165\u3057\u3066\u3044\u307e\u3059\u3002\u4e0b\u534a\u5206\u306f\u5909\u308f\u3063\u3066\u3044\u307e\u305b\u3093\u3002 `1 2 3 4 \u30a8\u30e9\u30fc\uff01 error` \u3068\u3044\u3046\u98a8\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u3066\u304f\u308c\u3070OK\u3067\u3059\u3002\n\n# \u305d\u3057\u3066UITableView\u3078\n\n\u306a\u3093\u304b `just` \u3068\u304b `from` \u3068\u304b `subscribe` \u3068\u304b `onNext` \u3068\u304b\u3092\u558b\u308c\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u8584\u3005\u308f\u304b\u3063\u3066\u304d\u305f\u3068\u3053\u308d\u3067\u3001UI\u306e\u5b9f\u88c5\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u3053\u307e\u3067\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u304d\u305f `ViewController.swift` \uff08\u30af\u30e9\u30b9\u540d `ViewController` \uff09\u306b\u5c11\u3057\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\n* `TableViewController.swift` \uff08\u30af\u30e9\u30b9\u540d `TableViewController` \uff09\u306b\u3059\u308b\n* \u7d99\u627f\u5143\u3092 `UIViewController => UITableViewController` \u306b\n* Storyboard\u304b\u3089ViewController\u3092\u6d88\u3057\u3066TableViewController\u306b\n    * Identity Inspector\u306e\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092\u5909\u66f4\n    * Attributes Inspector\u3067Is Initial View Controller\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\n    * TableView\u306eprototype cell\u3092\u9078\u629e\u3057\u3066Attributes Inspector\u306e\u4e2d\u304b\u3089Identifier\u306b `cell` \u3068\u8a2d\u5b9a\u3059\u308b\n\n\u3055\u3066\u3001\u901a\u5e38\u306e\u66f8\u304d\u65b9\u3067UITableView\u3092\u3084\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u3088\u304f\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift:TableViewController.swift\noverride func numberOfSections(in tableView: UITableView) -> Int {\n    return 1\n}\n\noverride func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n    return 20\n}\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = UITableViewCell(style: .default, reuseIdentifier: \"cell\")\u2028   \n    cell.textLabel?.text = indexPath.row\n    return cell\n}\n```\n\n\u3053\u3053\u3067\u3064\u3044\u306bRxCocoa\u306e\u767b\u5834\u3067\u3059\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u306f\u66f8\u304b\u305a\u306b\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u30af\u30e9\u30b9\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```swift:TableViewController.swift\nclass TableViewController: UITableViewController {\n\n    var disposeBag = DisposeBag()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        tableView.delegate = nil\n        tableView.dataSource = nil\n        let items = Observable.just((0..<20).map { \"\\($0)\" })\n        items.bindTo(tableView.rx.items(cellIdentifier: \"cell\", cellType: UITableViewCell.self)) { (row, element, cell) in\n            cell.textLabel?.text = \"\\(element)\"\n        }\n        .addDisposableTo(disposeBag)\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n}\n```\n\n\u3053\u308c\u3067\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 `0` \u304b\u3089 `19` \u306e\u8981\u7d20\u3092\u30e9\u30d9\u30eb\u306b\u3082\u3063\u305f\u30bb\u30eb\u3092\u751f\u6210\u3057\u3066\u3084\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3089\u3078\u3093\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u79c1\u3082\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3060\u3044\u305f\u3044\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3057\u3066\u306f\n\n* `disposeBag` \u3068\u3044\u3046\u306e\u3092\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u9632\u3052\u308b\u3089\u3057\u3044\n* tableView\u306edelegate\u3068dataSource\u3092nil\u306b\u3059\u308b\uff08\u3053\u3046\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3067\u6b7b\u306c\uff09\n* `0` \u304b\u3089 `19` \u3068\u3044\u3046\u8981\u7d20\u306e\u5165\u3063\u305f `items` \u3068\u3044\u3046Observable\u306a\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u3002\n    * \u305d\u3057\u3066\u3001tableView\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3002\n        * \u30bb\u30eb\u306f `cell` \u3068\u540d\u3092\u3064\u3051\u305fprototype cell\u3092\u4f7f\u7528\u3059\u308b\n        * \u30c6\u30ad\u30b9\u30c8\u30e9\u30d9\u30eb\u306e\u5024\u306b\u8981\u7d20\u306e\u5024\u3092\u5229\u7528\u3059\u308b\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u3053\u307e\u3067\u3001Observable\u306e\u8981\u7d20\u3092\u751f\u6210\u3059\u308b\u3068\u3053\u308d\u304b\u3089Observable\u306a\u8981\u7d20\u7fa4\u3092UIKit\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3055\u3089\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u81ea\u5206\u3082\u66f8\u304d\u306a\u304c\u3089\u7406\u89e3\u3059\u308b\u3068\u3053\u308d\u304c\u3042\u308a\u3068\u3066\u3082\u305f\u3081\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nReactive Programming\u306f\u79c1\u7684\u306b\u305d\u305d\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u5f15\u304d\u7d9a\u304d\u7df4\u7fd2\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3042\u304f\u307e\u3067\u30d1\u30e9\u30c0\u30a4\u30e0\u306e\u9078\u629e\u306f\u81ea\u7531\u306a\u306e\u3067\u3001\u300c\u81ea\u5206\u304c\u4e00\u756a\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u3092\u4f7f\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\n# \u53c2\u8003\n\n* https://realm.io/news/slug-max-alexander-functional-reactive-rxswift/\n* https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md\n*  https://github.com/ReactiveX/RxSwift/blob/master/RxExample/RxExample/Examples/SimpleTableViewExample/SimpleTableViewExampleViewController.swift\n* http://qiita.com/moaible/items/de94c574b25ea4f0ef17#just\n* https://newfivefour.com/swift-ios-rxswift.html\n* http://qiita.com/erukiti/items/6a82dfd3506e9773d592\n* http://tiny-wing.hatenablog.com/entry/2016/01/02/161322\n", "tags": ["Xcode", "Swift", "RxSwift"]}