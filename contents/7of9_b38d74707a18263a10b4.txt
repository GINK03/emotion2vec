{"context": " More than 1 year has passed since last update.\n\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n\n\nhttp://qiita.com/7of9/items/9c9964a7a7fc24d7d384\n\u3067\u691c\u8a0e\u3057\u3066\u3044\u305f\u5b9f\u88c5\u3092\u884c\u3063\u305f\u3002\ndouble\u578b\u306e\u5024\u304c\u6307\u5b9a\u306e\u6761\u4ef6\u3092\u9023\u7d9a\u3057\u3066\u6210\u7acb\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\nstatic\u95a2\u6570CUtilContinuousDoubleCondition::Test_Condition()\u5b9f\u884c\u3067\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u3002\n\ncode\n\nUtilContinuousDoubleCondition.h\n//---------------------------------------------------------------------------\n#ifndef UtilContinuousDoubleConditionH\n#define UtilContinuousDoubleConditionH\n\n//---------------------------------------------------------------------------\n\n/*\n\u9023\u7d9a\u3057\u3066\u6761\u4ef6\u304c\u6210\u7acb\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\n*/\n\nclass CUtilContinuousDoubleCondition {\nprivate:\n    static const int kMaxnumData = 10; // \u30c7\u30fc\u30bf\u683c\u7d0d\u6700\u5927\u6570 (10: \u4efb\u610f)\n\n    int m_checkCount; // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u500b\u6570\n    // Condition\n    double m_minMax[2]; // min, max\n    int m_rangeType; // Range_e\u3092\u683c\u7d0d\u3059\u308b\n    // Data\n    int m_dataCount;\n    double m_dataList[kMaxnumData];\n\n    // \u30c6\u30b9\u30c8\u95a2\u6570\n    bool __fastcall test_inrangeValid();\n    bool __fastcall test_outrangeValid();\n\npublic: \n    typedef enum tag_Range {\n        RANGE_INSIDE,\n        RANGE_OUTSIDE,\n    } Range_e;\n\n    void __fastcall SetCheckCount(int cnt);\n    void __fastcall SetCondition(double dmin, double dmax, int rngTyp);\n    void __fastcall PushData(double dta);\n    void __fastcall ClearData();\n    bool __fastcall IsEstablished();\n\n    // \u30c6\u30b9\u30c8\u95a2\u6570\n    static void __fastcall Test_Condition();\n\n    // Constructor\n    __fastcall CUtilContinuousDoubleCondition();\n};\n\n#endif\n\n\n\nUtilContinuousDoubleCondition.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <memory>\n#include \"UtilContinuousDoubleCondition.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n\n\n#define DEBUG_DO_PRINT // \u30c7\u30d0\u30c3\u30b0\u51fa\u529b\n\n/*\nv0.2 2016/01/27\n    double\u578b\u3078\u306e\u5bfe\u5fdc\n    - \u4e0d\u4f7f\u7528\u5909\u6570\u3001\u95a2\u6570\u306e\u9664\u53bb\n    - SetCondition()\u306e\u5f15\u6570\u3092\u5909\u66f4\u3057\u305f > [\u6700\u5c0f, \u6700\u5927, \u7bc4\u56f2\u306e\u30bf\u30a4\u30d7]\n    - [Range_e]\u8ffd\u52a0\n    - double\u578b\u306b\u5bfe\u3059\u308b\u5909\u6570\u540d\u3001\u95a2\u6570\u540d\u306e\u66f8\u304d\u63db\u3048\n    - UtilContinuousboolCondition v0.1 \u3088\u308a\u5206\u5c90\n\n----------------------------------  \nv0.1 2016/01/26 [UtilContinuousboolCondition.cpp]\n    bool\u578b\u3078\u306e\u5bfe\u5fdc\n    - Test_BoolCondition()\u8ffd\u52a0\n    - IsEstablished()\u8ffd\u52a0\n    - bool\u30c7\u30fc\u30bf\u8ffd\u52a0\n        + clearBoolData()\u8ffd\u52a0\n        + m_boolDataList[]\u8ffd\u52a0\n        + [m_boolDataCount]\u8ffd\u52a0\n    - bool\u30d5\u30e9\u30b0\u6761\u4ef6\u8ffd\u52a0\n        + m_boolFlags[]\u8ffd\u52a0\n        + [m_boolFlagCount]\u8ffd\u52a0\n    - SetConditionBool()\u8ffd\u52a0\n    - [typeIndex_e]\u8ffd\u52a0\n    - SetCheckCount()\u8ffd\u52a0\n    - [m_checkCount]\u8ffd\u52a0\n    - [Condition_e]\u8ffd\u52a0\n    - debug_outputDebugString()\u8ffd\u52a0\n*/\n\nstatic const double kDefaultDoubleData = 0.0;\n\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\nstatic void debug_outputDebugString(String prefix, String msg)\n{\n    // \u3042\u3068\u3067\u307e\u3068\u3081\u3066\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u306b\u3057\u3066\u3044\u308b\u3002\n\n#ifdef DEBUG_DO_PRINT\n    String work = L\"UtilContinuousDoubleCondition >\" + prefix + L\": \" + msg;\n    OutputDebugString(work.c_str()); // @ debug_outputDebugString\n#endif\n}\n\n//---------------------------------------------------------------------------\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n__fastcall CUtilContinuousDoubleCondition::CUtilContinuousDoubleCondition()\n{\n    m_checkCount = 0;\n    m_dataCount = 0;\n    ClearData();\n}\n//---------------------------------------------------------------------------\n// \u305d\u306e\u4ed6\u306e\u95a2\u6570\n\nvoid __fastcall CUtilContinuousDoubleCondition::ClearData()\n{\n    for(int idx = 0; idx < kMaxnumData; idx++) {\n        m_dataList[idx] = kDefaultDoubleData;\n    }\n    m_dataCount = 0;\n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::SetCheckCount(int cnt)\n{\n    m_checkCount = cnt; \n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::SetCondition(double dmin, double dmax, int rngTyp)\n{\n    m_minMax[0] = dmin;\n    m_minMax[1] = dmax;\n    m_rangeType = rngTyp;\n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::PushData(double dta)\n{\n    m_dataList[m_dataCount] = dta;\n    m_dataCount++;\n    if (m_dataCount > m_checkCount) {\n        for(int idx = 0; idx < m_checkCount; idx++) {\n            m_dataList[idx] = m_dataList[idx + 1];\n        }\n        m_dataCount--;\n    }\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::test_inrangeValid()\n{\n    SetCheckCount(3);\n    // \u6700\u5f8c\u306e\u8a2d\u5b9a\u304c\u6709\u52b9\n    SetCondition(3.1415, 6.022, RANGE_INSIDE);\n    SetCondition(2.7182, 3.1415, RANGE_INSIDE); // \u6709\u52b9\n\n    // \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u306a\u3044\u4f8b\n    PushData(4.0);\n    PushData(3.0); // \u6709\u52b9\n    PushData(4.0); // \u6709\u52b9\n    PushData(3.0); // \u6709\u52b9\n    bool estb1_1 = IsEstablished(); // false\n\n    // \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u4f8b\n    PushData(3.0); // \u6709\u52b9\n    PushData(3.0); // \u6709\u52b9\n    PushData(3.0); // \u6709\u52b9\n    bool estb1_2 = IsEstablished(); // true\n\n    return (estb1_1 == false) && (estb1_2 == true);\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::test_outrangeValid()\n{\n    SetCheckCount(3);\n    // \u6700\u5f8c\u306e\u6761\u4ef6\u3060\u3051\u4f7f\u308f\u308c\u308b\n    SetCondition(2.7182, 3.1415, RANGE_INSIDE);\n    SetCondition(2.7182, 3.1415, RANGE_OUTSIDE); // \u6709\u52b9\n\n    // \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u306a\u3044\u4f8b\n    PushData(2.0);\n    PushData(4.0); // \u6709\u52b9\n    PushData(2.0); // \u6709\u52b9\n    PushData(3.0); // \u6709\u52b9\n    bool estb2_1 = IsEstablished(); // false\n\n    // \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u4f8b\n    PushData(2.0); // \u6709\u52b9\n    PushData(4.0); // \u6709\u52b9\n    PushData(2.0); // \u6709\u52b9\n    bool estb2_2 = IsEstablished(); // true\n\n    return (estb2_1 == false) && (estb2_2 == true);\n}\n\n\n/*static*/ void __fastcall CUtilContinuousDoubleCondition::Test_Condition()\n{\n    CUtilContinuousDoubleCondition *cntCnd = new CUtilContinuousDoubleCondition();\n\n    bool inrange;\n    inrange = cntCnd->test_inrangeValid();\n\n    bool outrange;\n    outrange = cntCnd->test_outrangeValid();\n\n    delete cntCnd;\n    cntCnd = NULL;\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::IsEstablished()\n{\n    if (m_checkCount == 0 || \n         m_dataCount < m_checkCount) {\n        return false;\n    }\n\n    double dmin = m_minMax[0];\n    double dmax = m_minMax[1];\n    for(int idx = 0; idx < m_checkCount; idx++) {\n        if (m_rangeType == RANGE_INSIDE) {\n            if(m_dataList[idx] < dmin || m_dataList[idx] > dmax) {\n                return false;\n            }\n        }\n        if (m_rangeType == RANGE_OUTSIDE) {\n            if(m_dataList[idx] >= dmin && m_dataList[idx] <= dmax) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n\n\u5099\u8003\n\ndouble\u578b\u306e\u307f\u5bfe\u5fdc\nbool\u578b\u3092\u5148\u306b\u5b9f\u88c5\u3057\u3066\u3001double\u578b\u5b9f\u88c5\u3092\u884c\u3063\u305f\u304c\u3001\u5b9f\u88c5\u306e\u4f5c\u308a\u76f4\u3057\u306e\u7f60\u306b\u306f\u307e\u3063\u305f\nFortran, Powershell\u306a\u3069\u306eGE, LT\u306a\u3069\u3092\u4f7f\u304a\u3046\u3068\u3057\u305f\u304c\u3001\u7247\u65b9\u305a\u3064\u8a2d\u5b9a\u3067\u5931\u6557\u3057\u305f\n\u73fe\u5728\u306e\u5b9f\u88c5\u306binteger, bool\u578b\u5bfe\u5fdc\u3092\u8ffd\u52a0\u3059\u308b\u304b\uff08\u4e07\u80fd\u30af\u30e9\u30b9\u306b\u3059\u308b\u304b\uff09\u3001\u500b\u5225\u5b9f\u88c5\u306b\u3059\u308b\u304b\u306f\u8981\u691c\u8a0e\nIDE\u4f9d\u5b58\u6027\u3092\u306a\u304f\u3059\u5b9f\u88c5\u306b\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff08\u4eca\u3059\u3050\u306b\u306f\u3084\u3089\u306a\u3044)\n\n\n\u6539\u826f\u7248\u3078\u306e\u30ea\u30f3\u30af\nC++\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u6539\u826f\u3055\u308c\u305f\u65b9\u304c\u304a\u3089\u308c\u308b\u3002\u8272\u3005\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u9023\u7d9a\u7684\u6761\u4ef6\u6210\u7acb\u691c\u77e5\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n```\n\nhttp://qiita.com/7of9/items/9c9964a7a7fc24d7d384\n\u3067\u691c\u8a0e\u3057\u3066\u3044\u305f\u5b9f\u88c5\u3092\u884c\u3063\u305f\u3002\n\ndouble\u578b\u306e\u5024\u304c\u6307\u5b9a\u306e\u6761\u4ef6\u3092\u9023\u7d9a\u3057\u3066\u6210\u7acb\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n\nstatic\u95a2\u6570CUtilContinuousDoubleCondition::Test_Condition()\u5b9f\u884c\u3067\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u3002\n\n\n### code\n\n```UtilContinuousDoubleCondition.h\n//---------------------------------------------------------------------------\n#ifndef UtilContinuousDoubleConditionH\n#define UtilContinuousDoubleConditionH\n\n//---------------------------------------------------------------------------\n\n/*\n\u9023\u7d9a\u3057\u3066\u6761\u4ef6\u304c\u6210\u7acb\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\n*/\n\nclass CUtilContinuousDoubleCondition {\nprivate:\n\tstatic const int kMaxnumData = 10; // \u30c7\u30fc\u30bf\u683c\u7d0d\u6700\u5927\u6570 (10: \u4efb\u610f)\n\n\tint m_checkCount; // \u30c1\u30a7\u30c3\u30af\u3059\u308b\u500b\u6570\n\t// Condition\n\tdouble m_minMax[2]; // min, max\n\tint m_rangeType; // Range_e\u3092\u683c\u7d0d\u3059\u308b\n\t// Data\n\tint m_dataCount;\n\tdouble m_dataList[kMaxnumData];\n\n\t// \u30c6\u30b9\u30c8\u95a2\u6570\n\tbool __fastcall test_inrangeValid();\n\tbool __fastcall test_outrangeValid();\n\npublic:\t\n\ttypedef enum tag_Range {\n\t\tRANGE_INSIDE,\n\t\tRANGE_OUTSIDE,\n\t} Range_e;\n\n\tvoid __fastcall SetCheckCount(int cnt);\n\tvoid __fastcall SetCondition(double dmin, double dmax, int rngTyp);\n\tvoid __fastcall PushData(double dta);\n\tvoid __fastcall ClearData();\n\tbool __fastcall IsEstablished();\n\n\t// \u30c6\u30b9\u30c8\u95a2\u6570\n\tstatic void __fastcall Test_Condition();\n\t\n\t// Constructor\n\t__fastcall CUtilContinuousDoubleCondition();\n};\n\n#endif\n```\n\n```UtilContinuousDoubleCondition.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <memory>\n#include \"UtilContinuousDoubleCondition.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n\n\n#define DEBUG_DO_PRINT // \u30c7\u30d0\u30c3\u30b0\u51fa\u529b\n\n/*\nv0.2 2016/01/27\n\tdouble\u578b\u3078\u306e\u5bfe\u5fdc\n\t- \u4e0d\u4f7f\u7528\u5909\u6570\u3001\u95a2\u6570\u306e\u9664\u53bb\n\t- SetCondition()\u306e\u5f15\u6570\u3092\u5909\u66f4\u3057\u305f > [\u6700\u5c0f, \u6700\u5927, \u7bc4\u56f2\u306e\u30bf\u30a4\u30d7]\n\t- [Range_e]\u8ffd\u52a0\n\t- double\u578b\u306b\u5bfe\u3059\u308b\u5909\u6570\u540d\u3001\u95a2\u6570\u540d\u306e\u66f8\u304d\u63db\u3048\n\t- UtilContinuousboolCondition v0.1 \u3088\u308a\u5206\u5c90\n\n----------------------------------\t\nv0.1 2016/01/26 [UtilContinuousboolCondition.cpp]\n\tbool\u578b\u3078\u306e\u5bfe\u5fdc\n\t- Test_BoolCondition()\u8ffd\u52a0\n\t- IsEstablished()\u8ffd\u52a0\n\t- bool\u30c7\u30fc\u30bf\u8ffd\u52a0\n\t\t+ clearBoolData()\u8ffd\u52a0\n\t\t+ m_boolDataList[]\u8ffd\u52a0\n\t\t+ [m_boolDataCount]\u8ffd\u52a0\n\t- bool\u30d5\u30e9\u30b0\u6761\u4ef6\u8ffd\u52a0\n\t\t+ m_boolFlags[]\u8ffd\u52a0\n\t\t+ [m_boolFlagCount]\u8ffd\u52a0\n\t- SetConditionBool()\u8ffd\u52a0\n \t- [typeIndex_e]\u8ffd\u52a0\n\t- SetCheckCount()\u8ffd\u52a0\n\t- [m_checkCount]\u8ffd\u52a0\n\t- [Condition_e]\u8ffd\u52a0\n\t- debug_outputDebugString()\u8ffd\u52a0\n*/\n\nstatic const double kDefaultDoubleData = 0.0;\n\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\nstatic void debug_outputDebugString(String prefix, String msg)\n{\n\t// \u3042\u3068\u3067\u307e\u3068\u3081\u3066\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u306b\u3057\u3066\u3044\u308b\u3002\n\n#ifdef DEBUG_DO_PRINT\n\tString work = L\"UtilContinuousDoubleCondition >\" + prefix + L\": \" + msg;\n\tOutputDebugString(work.c_str()); // @ debug_outputDebugString\n#endif\n}\n\n//---------------------------------------------------------------------------\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n__fastcall CUtilContinuousDoubleCondition::CUtilContinuousDoubleCondition()\n{\n\tm_checkCount = 0;\n\tm_dataCount = 0;\n\tClearData();\n}\n//---------------------------------------------------------------------------\n// \u305d\u306e\u4ed6\u306e\u95a2\u6570\n\nvoid __fastcall CUtilContinuousDoubleCondition::ClearData()\n{\n\tfor(int idx = 0; idx < kMaxnumData; idx++) {\n\t\tm_dataList[idx] = kDefaultDoubleData;\n    }\n    m_dataCount = 0;\n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::SetCheckCount(int cnt)\n{\n\tm_checkCount = cnt;\t\n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::SetCondition(double dmin, double dmax, int rngTyp)\n{\n\tm_minMax[0] = dmin;\n\tm_minMax[1] = dmax;\n\tm_rangeType = rngTyp;\n}\n\nvoid __fastcall CUtilContinuousDoubleCondition::PushData(double dta)\n{\n\tm_dataList[m_dataCount] = dta;\n\tm_dataCount++;\n\tif (m_dataCount > m_checkCount) {\n\t\tfor(int idx = 0; idx < m_checkCount; idx++) {\n\t\t\tm_dataList[idx] = m_dataList[idx + 1];\n\t\t}\n\t\tm_dataCount--;\n\t}\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::test_inrangeValid()\n{\n\tSetCheckCount(3);\n\t// \u6700\u5f8c\u306e\u8a2d\u5b9a\u304c\u6709\u52b9\n\tSetCondition(3.1415, 6.022, RANGE_INSIDE);\n\tSetCondition(2.7182, 3.1415, RANGE_INSIDE); // \u6709\u52b9\n\n\t// \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u306a\u3044\u4f8b\n\tPushData(4.0);\n\tPushData(3.0); // \u6709\u52b9\n\tPushData(4.0); // \u6709\u52b9\n\tPushData(3.0); // \u6709\u52b9\n\tbool estb1_1 = IsEstablished(); // false\n\n\t// \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u4f8b\n\tPushData(3.0); // \u6709\u52b9\n\tPushData(3.0); // \u6709\u52b9\n\tPushData(3.0); // \u6709\u52b9\n\tbool estb1_2 = IsEstablished(); // true\n\n\treturn (estb1_1 == false) && (estb1_2 == true);\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::test_outrangeValid()\n{\n\tSetCheckCount(3);\n\t// \u6700\u5f8c\u306e\u6761\u4ef6\u3060\u3051\u4f7f\u308f\u308c\u308b\n\tSetCondition(2.7182, 3.1415, RANGE_INSIDE);\n\tSetCondition(2.7182, 3.1415, RANGE_OUTSIDE); // \u6709\u52b9\n\n\t// \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u306a\u3044\u4f8b\n\tPushData(2.0);\n\tPushData(4.0); // \u6709\u52b9\n\tPushData(2.0); // \u6709\u52b9\n\tPushData(3.0); // \u6709\u52b9\n\tbool estb2_1 = IsEstablished(); // false\n\n\t// \u6210\u7acb\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u4f8b\n\tPushData(2.0); // \u6709\u52b9\n\tPushData(4.0); // \u6709\u52b9\n\tPushData(2.0); // \u6709\u52b9\n\tbool estb2_2 = IsEstablished(); // true\n\n\treturn (estb2_1 == false) && (estb2_2 == true);\n}\n\n\n/*static*/ void __fastcall CUtilContinuousDoubleCondition::Test_Condition()\n{\n\tCUtilContinuousDoubleCondition *cntCnd = new CUtilContinuousDoubleCondition();\n\n\tbool inrange;\n\tinrange = cntCnd->test_inrangeValid();\n\n\tbool outrange;\n\toutrange = cntCnd->test_outrangeValid();\n\n\tdelete cntCnd;\n\tcntCnd = NULL;\n}\n\nbool __fastcall CUtilContinuousDoubleCondition::IsEstablished()\n{\n\tif (m_checkCount == 0 || \n\t\t m_dataCount < m_checkCount) {\n\t\treturn false;\n\t}\n\n\tdouble dmin = m_minMax[0];\n\tdouble dmax = m_minMax[1];\n\tfor(int idx = 0; idx < m_checkCount; idx++) {\n\t\tif (m_rangeType == RANGE_INSIDE) {\n\t\t\tif(m_dataList[idx] < dmin || m_dataList[idx] > dmax) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (m_rangeType == RANGE_OUTSIDE) {\n\t\t\tif(m_dataList[idx] >= dmin && m_dataList[idx] <= dmax) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n```\n\n### \u5099\u8003\n\n- double\u578b\u306e\u307f\u5bfe\u5fdc\n- bool\u578b\u3092\u5148\u306b\u5b9f\u88c5\u3057\u3066\u3001double\u578b\u5b9f\u88c5\u3092\u884c\u3063\u305f\u304c\u3001\u5b9f\u88c5\u306e\u4f5c\u308a\u76f4\u3057\u306e\u7f60\u306b\u306f\u307e\u3063\u305f\n- Fortran, Powershell\u306a\u3069\u306eGE, LT\u306a\u3069\u3092\u4f7f\u304a\u3046\u3068\u3057\u305f\u304c\u3001\u7247\u65b9\u305a\u3064\u8a2d\u5b9a\u3067\u5931\u6557\u3057\u305f\n- \u73fe\u5728\u306e\u5b9f\u88c5\u306binteger, bool\u578b\u5bfe\u5fdc\u3092\u8ffd\u52a0\u3059\u308b\u304b\uff08\u4e07\u80fd\u30af\u30e9\u30b9\u306b\u3059\u308b\u304b\uff09\u3001\u500b\u5225\u5b9f\u88c5\u306b\u3059\u308b\u304b\u306f\u8981\u691c\u8a0e\n- IDE\u4f9d\u5b58\u6027\u3092\u306a\u304f\u3059\u5b9f\u88c5\u306b\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\uff08\u4eca\u3059\u3050\u306b\u306f\u3084\u3089\u306a\u3044)\n\n\n## \u6539\u826f\u7248\u3078\u306e\u30ea\u30f3\u30af\n\nC++\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u6539\u826f\u3055\u308c\u305f\u65b9\u304c\u304a\u3089\u308c\u308b\u3002\u8272\u3005\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\n[\u9023\u7d9a\u7684\u6761\u4ef6\u6210\u7acb\u691c\u77e5](http://qiita.com/SaitoAtsushi/items/d26a5cfa5453d8d91b63#_reference-38d77bd027523b2e4647)\n\n\n", "tags": ["cppBuilder"]}