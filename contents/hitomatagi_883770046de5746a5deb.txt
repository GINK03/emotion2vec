{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4eca\u56de\u306f\u3001\u753b\u50cf\u306e\u4e2d\u306e\u7269\u4f53\u304c\u4f55\u306a\u306e\u304b\u3092OpenCV3\u3068Python3\u3067\u63a8\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\n\u3000\u3000\u3000\u30fb\u3000\u3000\uff1d\u3000Dog or Cat ?\n\u7269\u4f53\u8a8d\u8b58\u306f\u3001\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\u3068\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\u306b\u5206\u304b\u308c\u3001\u305d\u308c\u305e\u308c\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n\n\u5165\u529b\u753b\u50cf\n\u7279\u5fb4\u91cf\u62bd\u51fa\n\u7279\u5fb4\u91cf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u96c6\u8a08\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff09\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u7269\u4f53\u30ab\u30c6\u30b4\u30ea\u306e\u76f8\u95a2\u3092\u5b66\u7fd2\n\n\n\n\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\n\n\u5165\u529b\u753b\u50cf\n\u7279\u5fb4\u91cf\u62bd\u51fa\n\u7279\u5fb4\u91cf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u96c6\u8a08\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff09\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u3069\u306e\u7269\u4f53\u30ab\u30c6\u30b4\u30ea\u306b\u8fd1\u3044\u304b\u8ddd\u96e2\u3092\u8a08\u7b97\n\n\n\n\u4eca\u56de\u3001\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3067OpenCV3\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u624b\u6cd5\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\n\u30b9\u30c6\u30c3\u30d7\uff12\n\u3000KAZE\n\u30b9\u30c6\u30c3\u30d7\uff13\uff5e\uff15\n\u3000BOW: Bag Of Visual Words\n\u3000\u30fb\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\uff1ak-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u3000\u30fb\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\uff1aKNN: k-Nearest Neighbour\n\n\n\nOpenCV\u3068\u306f\nOpenCV(Open Source Computer Vision Library)\u306fBSD\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u6620\u50cf/\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u96c6\u3067\u3059\u3002\u753b\u50cf\u306e\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30de\u30c3\u30c1\u30f3\u30b0\u3001\u7269\u4f53\u8a8d\u8b58\u3001\u6620\u50cf\u89e3\u6790\u3001\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u591a\u6570\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u25a0 OpenCV\u3092\u4f7f\u3063\u305f\u52d5\u4f53\u8ffd\u8de1\u306e\u4f8b (OpenCV Google Summer of Code 2015)\nhttps://www.youtube.com/watch?v=OUbUFn71S4s\n\u25a0 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306f\u3053\u3061\u3089\nOpenCV 3\uff08core + contrib\uff09\u3092Python 3\u306e\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff06OpenCV 2\u3068OpenCV 3\u306e\u9055\u3044\uff06\u7c21\u5358\u306a\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af \n\u25a0 \u9759\u6b62\u753b\u50cf\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\nOpenCV\u3067\u30a8\u30c3\u30b8\u691c\u51fa\u3057\u3066\u307f\u308b\nOpenCV\u3067\u5404\u7a2e\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406\u3092\u3059\u308b\uff08\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u3001\u30cf\u30a4\u30d1\u30b9\u3001\u30e9\u30d7\u30e9\u30b7\u30a2\u30f3\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\uff09\nOpenCV\u3067\u7279\u5fb4\u70b9\u3092\u62bd\u51fa\u3059\u308b\uff08AgastFeature, FAST, GFTT, MSER, AKAZE, BRISK, KAZE, ORB, SimpleBlob\uff09\nOpenCV\u3092\u4f7f\u3063\u305f\u9854\u8a8d\u8b58\uff08Haar-like\u7279\u5fb4\u5206\u985e\u5668\uff09\nOpenCV\u3092\u4f7f\u3063\u3066\u8ab0\u306e\u9854\u306a\u306e\u304b\u3092\u63a8\u5b9a\u3059\u308b\uff08Eigenface, Fisherface, LBPH\uff09\nOpenCV\u3067\u5f62\u72b6\u306e\u3042\u308b\u7269\u4f53\u306e\u8f2a\u90ed\u3068\u65b9\u5411\u3092\u8a8d\u8b58\u3059\u308b\uff08\u4e3b\u6210\u5206\u5206\u6790\uff1aPCA\u3001\u56fa\u6709\u30d9\u30af\u30c8\u30eb\uff09\nOpenCV 3\u3068Python 3\u3067\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\uff08A-KAZE, KNN\uff09\n\u25a0 \u52d5\u753b\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\nOpenCV\u3067\u52d5\u753b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5909\u63db\u3057\u3066\u307f\u308b\nOpenCV\u3067Web\u30ab\u30e1\u30e9/\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u52d5\u753b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5909\u63db\u3057\u3066\u307f\u308b\nOpenCV\u3067\u30aa\u30d7\u30c6\u30a3\u30ab\u30eb\u30d5\u30ed\u30fc\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u63cf\u753b\u3059\u308b\uff08Shi-Tomasi\u6cd5\u3001Lucas-Kanade\u6cd5\uff09\nOpenCV\u3092\u4f7f\u3063\u305f\u7269\u4f53\u8ffd\u8de1\uff08\u30de\u30a6\u30b9\u3067\u6307\u5b9a\u3057\u305f\u7279\u5fb4\u70b9\u3092Lucas-Kanade\u6cd5\u3067\u8ffd\u8de1\u3059\u308b\nOpenCV\u3092\u4f7f\u3063\u305f\u30e2\u30fc\u30b7\u30e7\u30f3 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u89e3\u6790\uff08\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u7269\u4f53\u3068\u305d\u306e\u52d5\u304f\u65b9\u5411\u3092\u8a8d\u8b58\u3059\u308b\uff09\n\nBOW: Bag Of Visual Words\n\u3000\u300cBag Of Visual Words\u300d\u306f\u3001\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u3092\uff11\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u6b21\u5143\u5727\u7e2e\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u3000Bag of Words\u3068\u304b\u3001Bag of Features\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u306a\u540d\u524d\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000k-means\u3067k\u500b\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3057\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u5165\u308b\u7279\u5fb4\u91cf\u306e\u500b\u6570\u3092\u96c6\u8a08\u3057\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3000\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\u3067\u306f\u3001KNN\u3092\u4f7f\u3063\u3066\u3069\u306e\u30af\u30e9\u30b9\u306b\u5206\u985e\u3055\u308c\u308b\u306e\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n\u51fa\u5178\uff1a\u30a4\u30ea\u30ce\u30a4\u5927\u5b66\u3000http://www.ifp.illinois.edu/~yuhuang/sceneclassification.html\n\n\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\nkaggle\u306eDogs vs. Cats\nhttps://www.kaggle.com/c/dogs-vs-cats/data\n\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u306b\u306f\u3001\u30e6\u30fc\u30b6\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059\u3002\n\ntrain\n\n\nDog: 12500\u679a\nCat: 12500\u679a\n\n\ntest1\n\n\nDog\u3068Cat\u5408\u308f\u305b\u306625000\u679a\n\n\n\ntrain\u30c7\u30fc\u30bf\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3001cat0.jpg\uff5ecat12499.jpg, dog0.jpg\uff5edog12499.jpg\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002test1\u306e\u30c7\u30fc\u30bf\u306f\u30011.jpg\uff5e12500.jpg\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001Dog\u3068Cat\u304c\u6df7\u5728\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3088\u3046\u306b\u753b\u50cf\u3092\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ntrain_img\n\u3000\u3000\u251c 0\n\u3000\u3000\u2502\u3000\u2514 cat0.jpg\uff5e\n\u3000\u3000\u2514 1\n\u3000\u3000 \u3000\u2514 dog0.jpg\uff5e\n\ntest_img\n\u3000\u3000\u251c 0\n\u3000\u3000\u2502\u3000\u2514 catxxx.jpg\uff5e\n\u3000\u3000\u2514 1\n\u3000\u3000 \u3000\u2514 dogyyy.jpg\uff5e\n\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000Cat\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000Dog\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\nOpenCV 3.1.0\nPython 3.5.2\nWindows 10\n\u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n\nbow.py\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\n## \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9ID\u3068\u30d1\u30b9\u3092\u53d6\u5f97\n#\n# @param dir_path \u691c\u7d22\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n# @return data_sets [\u30af\u30e9\u30b9ID, \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30d1\u30b9]\u306e\u30ea\u30b9\u30c8\ndef getDataSet(dir_path):\n    data_sets = []    \n\n    sub_dirs = os.listdir(dir_path)\n    for classId in sub_dirs:\n        sub_dir_path = dir_path + '/' + classId\n        img_files = os.listdir(sub_dir_path)\n        for f in img_files:\n            data_sets.append([classId, sub_dir_path + '/' + f])\n\n    return data_sets\n\n\"\"\"\nmain\n\"\"\"\n# \u5b9a\u6570\u5b9a\u7fa9\nGRAYSCALE = 0\n# KAZE\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\ndetector = cv2.KAZE_create()\n\n\"\"\"\ntrain\n\"\"\"\nprint(\"train start\")\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u3092\u53d6\u5f97\ntrain_set = getDataSet('train_img')\n# \u8f9e\u66f8\u30b5\u30a4\u30ba\ndictionarySize = 2\n# Bag Of Visual Words\u5206\u985e\u5668\nbowTrainer = cv2.BOWKMeansTrainer(dictionarySize)\n\n# \u5404\u753b\u50cf\u3092\u5206\u6790\nfor i, (classId, data_path) in enumerate(train_set):\n    # \u9032\u6357\u8868\u793a\n    sys.stdout.write(\".\")\n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n    gray = cv2.imread(data_path, GRAYSCALE)\n    # \u7279\u5fb4\u70b9\u3068\u305d\u306e\u7279\u5fb4\u3092\u8a08\u7b97\n    keypoints, descriptors= detector.detectAndCompute(gray, None)\n    # int\u304b\u3089float32\u306b\u5909\u63db\n    descriptors = descriptors.astype(np.float32)\n    # \u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092Bag Of Visual Words\u5206\u985e\u5668\u306b\u30bb\u30c3\u30c8\n    bowTrainer.add(descriptors)\n\n# Bag Of Visual Words\u5206\u985e\u5668\u3067\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u5206\u985e\ncodebook = bowTrainer.cluster()\n# \u8a13\u7df4\u5b8c\u4e86\nprint(\"train finish\")\n\n\"\"\"\ntest\n\"\"\"\nprint(\"test start\")\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u53d6\u5f97\ntest_set = getDataSet(\"test_img\")\n\n# KNN\u3092\u4f7f\u3063\u3066\u7dcf\u5f53\u305f\u308a\u3067\u30de\u30c3\u30c1\u30f3\u30b0\nmatcher = cv2.BFMatcher()\n\n# Bag Of Visual Words\u62bd\u51fa\u5668\nbowExtractor = cv2.BOWImgDescriptorExtractor(detector, matcher)\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7d50\u679c\u3092\u30bb\u30c3\u30c8\nbowExtractor.setVocabulary(codebook)\n\n# \u6b63\u3057\u304f\u5b66\u7fd2\u3067\u304d\u305f\u304b\u691c\u8a3c\u3059\u308b\nfor i, (classId, data_path) in enumerate(test_set):\n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8aad\u307f\u8fbc\u307f\n    gray = cv2.imread(data_path, GRAYSCALE)\n    # \u7279\u5fb4\u70b9\u3068\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\n    keypoints, descriptors= detector.detectAndCompute(gray, None)\n    # int\u304b\u3089float32\u306b\u5909\u63db\n    descriptors = descriptors.astype(np.float32)\n    # Bag Of Visual Words\u306e\u8a08\u7b97\n    bowDescriptors = bowExtractor.compute(gray, keypoints)\n\n    # \u7d50\u679c\u8868\u793a\n    className = {\"0\": \"cat\",\n                 \"1\": \"dog\"}\n\n    actual = \"???\"    \n    if bowDescriptors[0][0] > bowDescriptors[0][1]:\n        actual = className[\"0\"]\n    elif bowDescriptors[0][0] < bowDescriptors[0][1]:\n        actual = className[\"1\"]\n\n    result = \"\"\n    if actual == \"???\":\n        result = \" => unknown.\"\n    elif className[classId] == actual:\n        result = \" => success!!\"\n    else:\n        result = \" => fail\"\n\n    print(\"expected: \", className[classId], \", actual: \", actual, result)\n\n\n\n\u5b9f\u884c\u7d50\u679c\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  cat  => fail\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  cat  => fail\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u6b63\u89e3\uff1a18\u3001\u4e0d\u6b63\u89e3\uff1a2 \u3067\u3057\u305f\u3002\n\u30ab\u30c6\u30b4\u30ea\u304c\uff12\u3064\u306a\u306e\u3067\u4f55\u3082\u51e6\u7406\u3057\u306a\u304f\u3066\u308250%\u6b63\u89e3\u3057\u307e\u3059\u304c\u300150%\u3092\u6709\u610f\u306b\u4e0a\u56de\u3063\u305f\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8a13\u7df4\u306e\u52b9\u679c\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6ce8\u610f\u70b9\n\n\n\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\ncv2.BOWImgDescriptorExtractor\u30af\u30e9\u30b9\u306ecompute()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\nerror: ..\\..\\..\\modules\\features2d\\src\\matchers.cpp:726: error: (-215) _queryDescriptors.type() == trainDescType in function cv::BFMatcher::knnMatchImpl\n\nAKAZE, BRISK, ORB\u306f\u30d0\u30a4\u30ca\u30ea\u7279\u5fb4\u91cf\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u5b9f\u6570\u7279\u5fb4\u91cf\u306eKAZE\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\nSHIFT, SURF\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u304b\u3051\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u3082\u5b9f\u6570\u7279\u5fb4\u91cf\u306e\u305f\u3081\u3001\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001SHIFT, SURF\u306f\u3001OpenCV3\u3067\u306f\u3001contrib\u306b\u79fb\u52d5\u3057core\u306b\u306f\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u30d0\u30a4\u30ca\u30ea\u7279\u5fb4\u91cf\u3067Bag of Visual Words\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4f5c\u6210\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5358\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3042\u3052\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u88c5\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3000\n\n\nKNN\u306e\u63a2\u7d22\u65b9\u6cd5\ncv2.BOWImgDescriptorExtractor\u30af\u30e9\u30b9\u306ecompute()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u9ad8\u901f\u8fd1\u4f3c\u8fd1\u508d\u63a2\u7d22\u6cd5\uff08FLANN: Fast Library for Approximate Nearest Neighbors\uff09\u3092\u4f7f\u3046\u3068\u3001\u6b21\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\nerror: (-215) The data should normally be NULL! in function NumpyAllocator::allocate\n\n\u4eca\u56de\u306f\u3001FLANN\u3067\u306f\u306a\u304f\u3001\u7dcf\u5f53\u305f\u308a\u6cd5\uff08Brute-Force)\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\u3000\n\n\u30af\u30e9\u30b9\u6570\n\u4eca\u56de\u306f\u3001\u72ac\u3068\u732b\u306e\uff12\u3064\u306e\u30af\u30e9\u30b9\u306b\u5206\u985e\u3057\u3001\u9ad8\u3044\u7cbe\u5ea6\u3067\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u6570\u3092\u5897\u3084\u3057\u305f\u5834\u5408\u3001\u5f90\u3005\u306b\u7cbe\u5ea6\u304c\u4f4e\u4e0b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\nBag Of Visual Words\u306e\u8ab2\u984c\n\u7279\u5fb4\u91cf\u3092\u30d9\u30fc\u30b9\u306b\u5b66\u7fd2\u3092\u884c\u3046Bag Of Visual Words\u306e\u8ab2\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u7279\u5fb4\u91cf\u3092\u691c\u51fa\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u4f9d\u5b58\u3059\u308b\n\u3000\u30a8\u30c3\u30b8\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3068\u3089\u3048\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528\u3059\u308b\u3068\u3001\u5f53\u7136\u3001\u5e73\u3089\u3067\u3042\u308b\u3053\u3068\u3092\u7279\u5fb4\u3068\u3059\u308b\u7269\u4f53\u306b\u95a2\u3059\u308b\u5b66\u7fd2\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\u7279\u5fb4\u91cf\u540c\u58eb\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u8003\u616e\u3057\u3066\u3044\u306a\u3044\n\u3000\u305f\u3068\u3048\u3070\u3001\u4eba\u3067\u3042\u308c\u3070\u3001\u4eba\u7269 \u2192 \u9854 \u2192 \u76ee \u306e\u3088\u3046\u306a\u5305\u542b\u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3053\u308d\u304c\u3001Bag Of Visual Words\u306e\u5834\u5408\u306f\u3001\u753b\u50cf\u4e2d\u306b\u7279\u5fb4\u91cf\u304c\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u4f4d\u7f6e\u95a2\u4fc2\u304c\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n\u3000\u4eca\u56de\u3001\u80cc\u666f\u3082\u542b\u3081\u3066\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u9854\u3060\u3051\u3001\u5168\u8eab\u306a\u3069\u3001\u3069\u306e\u90e8\u4f4d\u306a\u306e\u304b\u3082\u3001\u7279\u306b\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u3092\u8003\u616e\u3057\u3066\u3001\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u7cbe\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u554f\u984c\u3092\u89e3\u6c7a\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\uff08\u30c7\u30a3\u30fc\u30d7\uff09\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u51fa\u756a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5168\u753b\u7d20\u3092\u5165\u529b\u306b\u3057\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u81ea\u4f53\u306b\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\u3092\u306b\u306a\u3063\u3066\u3082\u3089\u3046\u3002\n\u63a8\u5b9a\u90e8\u5206\u3092\u975e\u7dda\u5f62\u306b\u5f37\u3044\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u307e\u304b\u305b\u308b\u3002\n\n\u3042\u305f\u308a\u306e\u6539\u5584\u3092\u898b\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3064\u3065\u304f...\u3002\n# \u306f\u3058\u3081\u306b\n\u4eca\u56de\u306f\u3001\u753b\u50cf\u306e\u4e2d\u306e\u7269\u4f53\u304c\u4f55\u306a\u306e\u304b\u3092OpenCV3\u3068Python3\u3067\u63a8\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3000\u3000![10385.jpg](https://qiita-image-store.s3.amazonaws.com/0/107056/0912d318-3f8c-97e6-c38a-6f4da5abab08.jpeg)\u3000\u30fb\u3000![12462.jpg](https://qiita-image-store.s3.amazonaws.com/0/107056/028f06b9-786d-a8ec-727c-6072dfa78196.jpeg)\u3000\uff1d\u3000Dog or Cat ?\n\n\u7269\u4f53\u8a8d\u8b58\u306f\u3001\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\u3068\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\u306b\u5206\u304b\u308c\u3001\u305d\u308c\u305e\u308c\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n+ \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    1. \u5165\u529b\u753b\u50cf\n    2. \u7279\u5fb4\u91cf\u62bd\u51fa\n    3. \u7279\u5fb4\u91cf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n    4. \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u96c6\u8a08\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff09\n    5. \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u7269\u4f53\u30ab\u30c6\u30b4\u30ea\u306e\u76f8\u95a2\u3092\u5b66\u7fd2\n\n+ \u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\n    1. \u5165\u529b\u753b\u50cf\n    2. \u7279\u5fb4\u91cf\u62bd\u51fa\n    3. \u7279\u5fb4\u91cf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n    4. \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u96c6\u8a08\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff09\n    5. \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u3069\u306e\u7269\u4f53\u30ab\u30c6\u30b4\u30ea\u306b\u8fd1\u3044\u304b\u8ddd\u96e2\u3092\u8a08\u7b97\n\n\u4eca\u56de\u3001\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3067OpenCV3\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u624b\u6cd5\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\n+ \u30b9\u30c6\u30c3\u30d7\uff12  \n    \u3000KAZE\n+ \u30b9\u30c6\u30c3\u30d7\uff13\uff5e\uff15  \n    \u3000BOW: Bag Of Visual Words  \n    \u3000\u30fb\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\uff1ak-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0  \n    \u3000\u30fb\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\uff1aKNN: k-Nearest Neighbour  \n\n# OpenCV\u3068\u306f\nOpenCV(Open Source Computer Vision Library)\u306fBSD\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u6620\u50cf/\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u96c6\u3067\u3059\u3002\u753b\u50cf\u306e\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30de\u30c3\u30c1\u30f3\u30b0\u3001\u7269\u4f53\u8a8d\u8b58\u3001\u6620\u50cf\u89e3\u6790\u3001\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u591a\u6570\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u25a0 OpenCV\u3092\u4f7f\u3063\u305f\u52d5\u4f53\u8ffd\u8de1\u306e\u4f8b (OpenCV Google Summer of Code 2015)\n[https://www.youtube.com/watch?v=OUbUFn71S4s](https://www.youtube.com/watch?v=OUbUFn71S4s)\n\n\u25a0 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306f\u3053\u3061\u3089\n[OpenCV 3\uff08core + contrib\uff09\u3092Python 3\u306e\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff06OpenCV 2\u3068OpenCV 3\u306e\u9055\u3044\uff06\u7c21\u5358\u306a\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af](http://qiita.com/olympic2020/items/d5d475a446ec9c73261e)  \n\n\u25a0 \u9759\u6b62\u753b\u50cf\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\n[OpenCV\u3067\u30a8\u30c3\u30b8\u691c\u51fa\u3057\u3066\u307f\u308b](http://qiita.com/olympic2020/items/2c3a2bfefe73ab5c86a4)\n[OpenCV\u3067\u5404\u7a2e\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406\u3092\u3059\u308b\uff08\u30b0\u30e9\u30c7\u30a3\u30a8\u30f3\u30c8\u3001\u30cf\u30a4\u30d1\u30b9\u3001\u30e9\u30d7\u30e9\u30b7\u30a2\u30f3\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\uff09](http://qiita.com/olympic2020/items/93e01ef22e46b14a60a9)\n[OpenCV\u3067\u7279\u5fb4\u70b9\u3092\u62bd\u51fa\u3059\u308b\uff08AgastFeature, FAST, GFTT, MSER, AKAZE, BRISK, KAZE, ORB, SimpleBlob\uff09](http://qiita.com/olympic2020/items/62989573a30ec1d8180b)\n[OpenCV\u3092\u4f7f\u3063\u305f\u9854\u8a8d\u8b58\uff08Haar-like\u7279\u5fb4\u5206\u985e\u5668\uff09](http://qiita.com/olympic2020/items/04b1b26c1bc2e8081427)\n[OpenCV\u3092\u4f7f\u3063\u3066\u8ab0\u306e\u9854\u306a\u306e\u304b\u3092\u63a8\u5b9a\u3059\u308b\uff08Eigenface, Fisherface, LBPH\uff09](http://qiita.com/olympic2020/items/8f2f37646179aca68649)\n[OpenCV\u3067\u5f62\u72b6\u306e\u3042\u308b\u7269\u4f53\u306e\u8f2a\u90ed\u3068\u65b9\u5411\u3092\u8a8d\u8b58\u3059\u308b\uff08\u4e3b\u6210\u5206\u5206\u6790\uff1aPCA\u3001\u56fa\u6709\u30d9\u30af\u30c8\u30eb\uff09](http://qiita.com/olympic2020/items/92fc43226ca37c0f90f6)\n[OpenCV 3\u3068Python 3\u3067\u7279\u5fb4\u91cf\u30de\u30c3\u30c1\u30f3\u30b0\uff08A-KAZE, KNN\uff09](http://qiita.com/olympic2020/items/caac014b7ab246faf6b1)\n\n\u25a0 \u52d5\u753b\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\n[OpenCV\u3067\u52d5\u753b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5909\u63db\u3057\u3066\u307f\u308b](http://qiita.com/olympic2020/items/ce00fab38d829965db3b)\n[OpenCV\u3067Web\u30ab\u30e1\u30e9/\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u52d5\u753b\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5909\u63db\u3057\u3066\u307f\u308b](http://qiita.com/olympic2020/items/12a2eceaf65f142ec3df)\n[OpenCV\u3067\u30aa\u30d7\u30c6\u30a3\u30ab\u30eb\u30d5\u30ed\u30fc\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u63cf\u753b\u3059\u308b\uff08Shi-Tomasi\u6cd5\u3001Lucas-Kanade\u6cd5\uff09](http://qiita.com/olympic2020/items/772549d0fc3c89fb3cc4)\n[OpenCV\u3092\u4f7f\u3063\u305f\u7269\u4f53\u8ffd\u8de1\uff08\u30de\u30a6\u30b9\u3067\u6307\u5b9a\u3057\u305f\u7279\u5fb4\u70b9\u3092Lucas-Kanade\u6cd5\u3067\u8ffd\u8de1\u3059\u308b](http://qiita.com/olympic2020/items/3d8973f855e963c9d999)\n[OpenCV\u3092\u4f7f\u3063\u305f\u30e2\u30fc\u30b7\u30e7\u30f3 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u89e3\u6790\uff08\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u7269\u4f53\u3068\u305d\u306e\u52d5\u304f\u65b9\u5411\u3092\u8a8d\u8b58\u3059\u308b\uff09](http://qiita.com/olympic2020/items/a4ecf7babdbe710208ae)\n\n\n# BOW: Bag Of Visual Words\n\u3000\u300cBag Of Visual Words\u300d\u306f\u3001\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u3092\uff11\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u6b21\u5143\u5727\u7e2e\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u3000Bag of Words\u3068\u304b\u3001Bag of Features\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u306a\u540d\u524d\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000k-means\u3067k\u500b\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3057\u3001\u5404\u30ab\u30c6\u30b4\u30ea\u6bce\u306b\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u5165\u308b\u7279\u5fb4\u91cf\u306e\u500b\u6570\u3092\u96c6\u8a08\u3057\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3000\u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\u3067\u306f\u3001KNN\u3092\u4f7f\u3063\u3066\u3069\u306e\u30af\u30e9\u30b9\u306b\u5206\u985e\u3055\u308c\u308b\u306e\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n![bagofwords.jpg](https://qiita-image-store.s3.amazonaws.com/0/107056/23687485-a7dc-7e5b-464c-47a7a8250f98.jpeg)\n\u51fa\u5178\uff1a\u30a4\u30ea\u30ce\u30a4\u5927\u5b66\u3000http://www.ifp.illinois.edu/~yuhuang/sceneclassification.html\n\n# \u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\nkaggle\u306eDogs vs. Cats\nhttps://www.kaggle.com/c/dogs-vs-cats/data\n\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u306b\u306f\u3001\u30e6\u30fc\u30b6\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n+ train\n    - Dog: 12500\u679a\n    - Cat: 12500\u679a\n+ test1\n    - Dog\u3068Cat\u5408\u308f\u305b\u306625000\u679a\n\ntrain\u30c7\u30fc\u30bf\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3001cat0.jpg\uff5ecat12499.jpg, dog0.jpg\uff5edog12499.jpg\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002test1\u306e\u30c7\u30fc\u30bf\u306f\u30011.jpg\uff5e12500.jpg\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001Dog\u3068Cat\u304c\u6df7\u5728\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3088\u3046\u306b\u753b\u50cf\u3092\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u91cd\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```\ntrain_img\n\u3000\u3000\u251c 0\n\u3000\u3000\u2502\u3000\u2514 cat0.jpg\uff5e\n\u3000\u3000\u2514 1\n\u3000\u3000 \u3000\u2514 dog0.jpg\uff5e\n\ntest_img\n\u3000\u3000\u251c 0\n\u3000\u3000\u2502\u3000\u2514 catxxx.jpg\uff5e\n\u3000\u3000\u2514 1\n\u3000\u3000 \u3000\u2514 dogyyy.jpg\uff5e\n```\n\n![cat.png](https://qiita-image-store.s3.amazonaws.com/0/107056/551c0a42-4ede-2760-bea7-87e77bc0d5d0.png)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000**Cat\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf**\n\n![dog.png](https://qiita-image-store.s3.amazonaws.com/0/107056/cc0d90e7-10bf-54fb-08e5-dad23404e11f.png)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000**Dog\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf**\n\n# \u30d7\u30ed\u30b0\u30e9\u30e0\n+ OpenCV 3.1.0\n+ Python 3.5.2\n+ Windows 10\n\u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n```bow.py\n# -*- coding: utf-8 -*-\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\n## \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9ID\u3068\u30d1\u30b9\u3092\u53d6\u5f97\n#\n# @param dir_path \u691c\u7d22\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n# @return data_sets [\u30af\u30e9\u30b9ID, \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u30d1\u30b9]\u306e\u30ea\u30b9\u30c8\ndef getDataSet(dir_path):\n    data_sets = []    \n    \n    sub_dirs = os.listdir(dir_path)\n    for classId in sub_dirs:\n        sub_dir_path = dir_path + '/' + classId\n        img_files = os.listdir(sub_dir_path)\n        for f in img_files:\n            data_sets.append([classId, sub_dir_path + '/' + f])\n            \n    return data_sets\n\n\"\"\"\nmain\n\"\"\"\n# \u5b9a\u6570\u5b9a\u7fa9\nGRAYSCALE = 0\n# KAZE\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\ndetector = cv2.KAZE_create()\n\n\"\"\"\ntrain\n\"\"\"\nprint(\"train start\")\n# \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u3092\u53d6\u5f97\ntrain_set = getDataSet('train_img')\n# \u8f9e\u66f8\u30b5\u30a4\u30ba\ndictionarySize = 2\n# Bag Of Visual Words\u5206\u985e\u5668\nbowTrainer = cv2.BOWKMeansTrainer(dictionarySize)\n\n# \u5404\u753b\u50cf\u3092\u5206\u6790\nfor i, (classId, data_path) in enumerate(train_set):\n    # \u9032\u6357\u8868\u793a\n    sys.stdout.write(\".\")\n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u753b\u50cf\u8aad\u307f\u8fbc\u307f\n    gray = cv2.imread(data_path, GRAYSCALE)\n    # \u7279\u5fb4\u70b9\u3068\u305d\u306e\u7279\u5fb4\u3092\u8a08\u7b97\n    keypoints, descriptors= detector.detectAndCompute(gray, None)\n    # int\u304b\u3089float32\u306b\u5909\u63db\n    descriptors = descriptors.astype(np.float32)\n    # \u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092Bag Of Visual Words\u5206\u985e\u5668\u306b\u30bb\u30c3\u30c8\n    bowTrainer.add(descriptors)\n\n# Bag Of Visual Words\u5206\u985e\u5668\u3067\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u5206\u985e\ncodebook = bowTrainer.cluster()\n# \u8a13\u7df4\u5b8c\u4e86\nprint(\"train finish\")\n\n\"\"\"\ntest\n\"\"\"\nprint(\"test start\")\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u53d6\u5f97\ntest_set = getDataSet(\"test_img\")\n\n# KNN\u3092\u4f7f\u3063\u3066\u7dcf\u5f53\u305f\u308a\u3067\u30de\u30c3\u30c1\u30f3\u30b0\nmatcher = cv2.BFMatcher()\n\n# Bag Of Visual Words\u62bd\u51fa\u5668\nbowExtractor = cv2.BOWImgDescriptorExtractor(detector, matcher)\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7d50\u679c\u3092\u30bb\u30c3\u30c8\nbowExtractor.setVocabulary(codebook)\n\n# \u6b63\u3057\u304f\u5b66\u7fd2\u3067\u304d\u305f\u304b\u691c\u8a3c\u3059\u308b\nfor i, (classId, data_path) in enumerate(test_set):\n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8aad\u307f\u8fbc\u307f\n    gray = cv2.imread(data_path, GRAYSCALE)\n    # \u7279\u5fb4\u70b9\u3068\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\n    keypoints, descriptors= detector.detectAndCompute(gray, None)\n    # int\u304b\u3089float32\u306b\u5909\u63db\n    descriptors = descriptors.astype(np.float32)\n    # Bag Of Visual Words\u306e\u8a08\u7b97\n    bowDescriptors = bowExtractor.compute(gray, keypoints)\n\n    # \u7d50\u679c\u8868\u793a\n    className = {\"0\": \"cat\",\n                 \"1\": \"dog\"}\n\n    actual = \"???\"    \n    if bowDescriptors[0][0] > bowDescriptors[0][1]:\n        actual = className[\"0\"]\n    elif bowDescriptors[0][0] < bowDescriptors[0][1]:\n        actual = className[\"1\"]\n\n    result = \"\"\n    if actual == \"???\":\n        result = \" => unknown.\"\n    elif className[classId] == actual:\n        result = \" => success!!\"\n    else:\n        result = \" => fail\"\n\n    print(\"expected: \", className[classId], \", actual: \", actual, result)\n```\n\n# \u5b9f\u884c\u7d50\u679c\n\n```\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  cat , actual:  cat  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  cat  => fail\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  cat  => fail\nexpected:  dog , actual:  dog  => success!!\nexpected:  dog , actual:  dog  => success!!\n```\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u6b63\u89e3\uff1a18\u3001\u4e0d\u6b63\u89e3\uff1a2 \u3067\u3057\u305f\u3002\n\u30ab\u30c6\u30b4\u30ea\u304c\uff12\u3064\u306a\u306e\u3067\u4f55\u3082\u51e6\u7406\u3057\u306a\u304f\u3066\u308250%\u6b63\u89e3\u3057\u307e\u3059\u304c\u300150%\u3092\u6709\u610f\u306b\u4e0a\u56de\u3063\u305f\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8a13\u7df4\u306e\u52b9\u679c\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n# \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6ce8\u610f\u70b9\n+ \u7279\u5fb4\u91cf\u62bd\u51fa\u5668\n    cv2.BOWImgDescriptorExtractor\u30af\u30e9\u30b9\u306ecompute()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n    \n    ```\n    error: ..\\..\\..\\modules\\features2d\\src\\matchers.cpp:726: error: (-215) _queryDescriptors.type() == trainDescType in function cv::BFMatcher::knnMatchImpl\n    ```\n    \n    AKAZE, BRISK, ORB\u306f\u30d0\u30a4\u30ca\u30ea\u7279\u5fb4\u91cf\u3067\u3059\u3002\n    \u4eca\u56de\u306f\u3001\u5b9f\u6570\u7279\u5fb4\u91cf\u306eKAZE\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n    SHIFT, SURF\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u304b\u3051\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u3082\u5b9f\u6570\u7279\u5fb4\u91cf\u306e\u305f\u3081\u3001\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001SHIFT, SURF\u306f\u3001OpenCV3\u3067\u306f\u3001contrib\u306b\u79fb\u52d5\u3057core\u306b\u306f\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n    \u30d0\u30a4\u30ca\u30ea\u7279\u5fb4\u91cf\u3067Bag of Visual Words\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4f5c\u6210\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5358\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3042\u3052\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u88c5\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n    \u3000\n+ KNN\u306e\u63a2\u7d22\u65b9\u6cd5\n    cv2.BOWImgDescriptorExtractor\u30af\u30e9\u30b9\u306ecompute()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u9ad8\u901f\u8fd1\u4f3c\u8fd1\u508d\u63a2\u7d22\u6cd5\uff08FLANN: Fast Library for Approximate Nearest Neighbors\uff09\u3092\u4f7f\u3046\u3068\u3001\u6b21\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n    \n    ```\n    error: (-215) The data should normally be NULL! in function NumpyAllocator::allocate\n    ```\n    \n    \u4eca\u56de\u306f\u3001FLANN\u3067\u306f\u306a\u304f\u3001\u7dcf\u5f53\u305f\u308a\u6cd5\uff08Brute-Force)\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n    \u3000\n+ \u30af\u30e9\u30b9\u6570\n    \u4eca\u56de\u306f\u3001\u72ac\u3068\u732b\u306e\uff12\u3064\u306e\u30af\u30e9\u30b9\u306b\u5206\u985e\u3057\u3001\u9ad8\u3044\u7cbe\u5ea6\u3067\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30af\u30e9\u30b9\u6570\u3092\u5897\u3084\u3057\u305f\u5834\u5408\u3001\u5f90\u3005\u306b\u7cbe\u5ea6\u304c\u4f4e\u4e0b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Bag Of Visual Words\u306e\u8ab2\u984c\n\u7279\u5fb4\u91cf\u3092\u30d9\u30fc\u30b9\u306b\u5b66\u7fd2\u3092\u884c\u3046Bag Of Visual Words\u306e\u8ab2\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n+ \u7279\u5fb4\u91cf\u3092\u691c\u51fa\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u4f9d\u5b58\u3059\u308b  \n    \u3000\u30a8\u30c3\u30b8\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3068\u3089\u3048\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528\u3059\u308b\u3068\u3001\u5f53\u7136\u3001\u5e73\u3089\u3067\u3042\u308b\u3053\u3068\u3092\u7279\u5fb4\u3068\u3059\u308b\u7269\u4f53\u306b\u95a2\u3059\u308b\u5b66\u7fd2\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n+ \u7279\u5fb4\u91cf\u540c\u58eb\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u8003\u616e\u3057\u3066\u3044\u306a\u3044  \n    \u3000\u305f\u3068\u3048\u3070\u3001\u4eba\u3067\u3042\u308c\u3070\u3001\u4eba\u7269 \u2192 \u9854 \u2192 \u76ee \u306e\u3088\u3046\u306a\u5305\u542b\u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002\u3068\u3053\u308d\u304c\u3001Bag Of Visual Words\u306e\u5834\u5408\u306f\u3001\u753b\u50cf\u4e2d\u306b\u7279\u5fb4\u91cf\u304c\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u4f4d\u7f6e\u95a2\u4fc2\u304c\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n+ \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406  \n    \u3000\u4eca\u56de\u3001\u80cc\u666f\u3082\u542b\u3081\u3066\u753b\u50cf\u3092\u305d\u306e\u307e\u307e\u51e6\u7406\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u9854\u3060\u3051\u3001\u5168\u8eab\u306a\u3069\u3001\u3069\u306e\u90e8\u4f4d\u306a\u306e\u304b\u3082\u3001\u7279\u306b\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u3092\u8003\u616e\u3057\u3066\u3001\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u7cbe\u5ea6\u304c\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u554f\u984c\u3092\u89e3\u6c7a\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\uff08\u30c7\u30a3\u30fc\u30d7\uff09\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u51fa\u756a\u306b\u306a\u308a\u307e\u3059\u3002\n\n+ \u5168\u753b\u7d20\u3092\u5165\u529b\u306b\u3057\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u81ea\u4f53\u306b\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\u3092\u306b\u306a\u3063\u3066\u3082\u3089\u3046\u3002\n+ \u63a8\u5b9a\u90e8\u5206\u3092\u975e\u7dda\u5f62\u306b\u5f37\u3044\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u307e\u304b\u305b\u308b\u3002\n\n\u3042\u305f\u308a\u306e\u6539\u5584\u3092\u898b\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3064\u3065\u304f...\u3002\n", "tags": ["OpenCV", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u753b\u50cf\u51e6\u7406"]}