{"context": " More than 1 year has passed since last update.\u524d\u63d0: Route53 \u306b\u30d9\u30fc\u30b9\u3068\u306a\u308b\u30c9\u30e1\u30a4\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\nrequire \"aws-sdk\"\nAWS.config access_key_id: ENV[\"AWS_ACCESS_KEY_ID\"],\n  secret_access_key: ENV[\"AWS_SECRET_ACCESS_KEY\"]\n\ndef modify_route53 subdomain, operation, opt = {ttl: 300}\n  resp = AWS::Route53.new.client.list_hosted_zones\n  resp[:hosted_zones].each do |zone|\n    if zone[:name] == \"#{ENV['BASE_DOMAIN']}.\"\n      elb_name = ENV[\"AWS_ELB_DNS_NAME\"]\n      dns_name = \"#{subdomain}.#{zone[:name]}\"\n      record_type = \"CNAME\"\n      options = {\n        ttl: opt[:ttl],\n        resource_records: [{value: elb_name}]\n      }\n      request_params = [dns_name, record_type, options]\n      rrsets = AWS::Route53::HostedZone.new(zone[:id]).rrsets\n      batch = AWS::Route53::ChangeBatch.new zone[:id]\n\n      case operation\n      when :create\n        next if rrsets[dns_name, record_type].exists?\n        batch << AWS::Route53::CreateRequest.new(*request_params)\n      when :delete\n        next unless rrsets[dns_name, record_type].exists?\n        batch << AWS::Route53::DeleteRequest.new(*request_params)\n      else\n        raise \"Error: Unknown operation.\"\n      end\n\n      batch.call\n      break\n    end\n  end\nend\n\ndef register_to_route53 subdomain\n  modify_route53 subdomain, :create\nend\n\ndef unregister_from_route53 subdomain\n  modify_route53 subdomain, :delete\nend\n\n#### test.sh ##########################\n# #!/bin/sh\n# AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID \\\n# AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY \\\n# BASE_DOMAIN=YOUR_BASE_DOMAIN \\\n# AWS_ELB_DNS_NAME=YOUR_ELB_DNS_NAME \\\n# ruby -e \"require '/path/to/route53.rb'; register_to_route53 'foo'\"\n\n\u524d\u63d0: Route53 \u306b\u30d9\u30fc\u30b9\u3068\u306a\u308b\u30c9\u30e1\u30a4\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\n\n```rb\nrequire \"aws-sdk\"\nAWS.config access_key_id: ENV[\"AWS_ACCESS_KEY_ID\"],\n  secret_access_key: ENV[\"AWS_SECRET_ACCESS_KEY\"]\n\ndef modify_route53 subdomain, operation, opt = {ttl: 300}\n  resp = AWS::Route53.new.client.list_hosted_zones\n  resp[:hosted_zones].each do |zone|\n    if zone[:name] == \"#{ENV['BASE_DOMAIN']}.\"\n      elb_name = ENV[\"AWS_ELB_DNS_NAME\"]\n      dns_name = \"#{subdomain}.#{zone[:name]}\"\n      record_type = \"CNAME\"\n      options = {\n        ttl: opt[:ttl],\n        resource_records: [{value: elb_name}]\n      }\n      request_params = [dns_name, record_type, options]\n      rrsets = AWS::Route53::HostedZone.new(zone[:id]).rrsets\n      batch = AWS::Route53::ChangeBatch.new zone[:id]\n\n      case operation\n      when :create\n        next if rrsets[dns_name, record_type].exists?\n        batch << AWS::Route53::CreateRequest.new(*request_params)\n      when :delete\n        next unless rrsets[dns_name, record_type].exists?\n        batch << AWS::Route53::DeleteRequest.new(*request_params)\n      else\n        raise \"Error: Unknown operation.\"\n      end\n\n      batch.call\n      break\n    end\n  end\nend\n\ndef register_to_route53 subdomain\n  modify_route53 subdomain, :create\nend\n\ndef unregister_from_route53 subdomain\n  modify_route53 subdomain, :delete\nend\n\n#### test.sh ##########################\n# #!/bin/sh\n# AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID \\\n# AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY \\\n# BASE_DOMAIN=YOUR_BASE_DOMAIN \\\n# AWS_ELB_DNS_NAME=YOUR_ELB_DNS_NAME \\\n# ruby -e \"require '/path/to/route53.rb'; register_to_route53 'foo'\"\n```\n", "tags": ["Ruby", "AWS", "AWS_SDK", "elb", "route53"]}