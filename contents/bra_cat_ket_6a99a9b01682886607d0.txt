{"context": " More than 1 year has passed since last update.\n\n\u8ffd\u8a18\nQiita \u306e\u8a18\u4e8b\u306e\u4e2d\u306b\u3059\u3067\u306b\u3082\u3063\u3068\u65e9\u304f\u3066\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3089\u3063\u3057\u3083\u308b\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\nHaskell \u3067\u300c\u7d20\u6570\u5217\u300d\u3092\u3064\u304f\u308b\u3002\n\u306a\u304a\u3001\u3055\u3089\u306b\u5143\u30cd\u30bf\u306f\u3053\u3061\u3089\u3060\u305d\u3046\u3067\u3059\u3002\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u5c0f\u578b\u9ad8\u901f\u9060\u5fc3\u5206\u96e2\u6a5f\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u6709\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3089\u306e\u5b9f\u88c5\u3082\u5b9f\u306f\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3067\u306f\u306a\u304f\uff08Haskell \u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u305b\u3044\uff1f\uff09\u3044\u308f\u3086\u308b\u8a66\u3057\u5272\u308a\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u306b\u3082\u63a1\u7528\u3055\u308c\u3066\u308b\u4f4d\u77ed\u304f\u3066\u304b\u3064\u65e9\u3044\u3068\u306a\u308b\u3068\u3001\u3001\u3001\n\u4e00\u898b\u3057\u305f\u3068\u3053\u308d\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u7d10\u89e3\u3044\u3066\u307f\u307e\u3059\u3001\u4ee5\u4e0b\u672c\u8cea\u7684\u306b\u306fHaskell \u3067\u300c\u7d20\u6570\u5217\u300d\u3092\u3064\u304f\u308b\u3002\u304b\u3089\u306e\u30b3\u30d4\u30da\u3067\u3059\u3001\u3061\u3087\u3063\u3068\u578b\u3068\u304b\u4e8c\u4e57\u3068\u304b\u6539\u5909\u3057\u3066\u3044\u307e\u3059\u304c\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306f\u9055\u3044\u304c\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u9ad8\u6b21\u306e\u5f71\u97ff\u304c\u3042\u308b\u304b\u3082\u5206\u304b\u308a\u307e\u305b\u3093\u3001\u639b\u3051\u7b97\u306e\u65b9\u304c\u5b89\u4fa1\u306a\u306e\u304b\u3082\uff09\n\np.lhs\n\nFast primes from\n  http://qiita.com/little_Haskeller/items/614a3ae20a517c19bb1f\n\n> primes :: Integral a => [a]\n> primes = map fromIntegral primes'\n>   where\n>     primes' :: Integral a => [a]\n>     primes' = [2,3,5] ++ f 5 7 (drop 2 primes')\n\n>     f :: Integral a => a -> a -> [a] -> [a]\n>     f m s (p:ps) = [n | n <- ns, gcd m n == 1]\n>                    ++ f (m*p) (p^2) ps\n>       where -- Primes are either 6n+1 or 6n+5 form.\n>         ns = [x + y | x <- [s, s +6 .. p^2 -2], y <- [0, 4]]\n\n> main :: IO ()\n> main = print $ take 1 $ dropWhile (< 30000000) primes\n\n  $ ghc p.lhs -O2\n  [1 of 1] Compiling Main             ( p.lhs, p.o )\n  Linking p ...\n  $ time ./p\n  [30000001]\n\n  real  0m2.524s\n  user  0m2.460s\n  sys 0m0.058s\n\n\n\nprimes' \u81ea\u4f53\u306f\u3044\u308f\u3086\u308b\u9045\u5ef6\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u88dc\u52a9\u95a2\u6570f \u304c\u30df\u30bd\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\u307e\u305fgcd \u304cHaskell \u3067\u306f\u5b89\u4fa1\u3060\u3068\u3044\u3046\u306e\u3082\u52b9\u3044\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3001\u9806\u5e8f\u304c\u9006\u306b\u306f\u306a\u308a\u307e\u3059\u304c99 Haskell Problems \u3088\u308a\u3001[31..41]\u3067\u3084\u308b\u3088\u3046\u306b\u5f15\u304d\u7b97\u3060\u3051\u3067\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3057\u3002\n\u307e\u305a\u6700\u521d\u306b\u306f(drop 2 primes') \u306f\u5148\u982d\u306e[5, \u3057\u304b\u6c7a\u307e\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3068\u3001f \u306e\u7b2c\u4e8c\u5f15\u6570\u306f\u304b\u306a\u3089\u305a6n+1 \u578b\u306e\u6574\u6570\uff08\u6700\u521d\u306f7 \u305d\u306e\u3042\u30687^2=49 \u3000\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u305f\u304c\u3063\u3066ns \u306e\u4e2d\u306ex \u306f6n+1 \u578b\u306b\u3001y <- [0,4] \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067ns \u306f6n+1 \u3042\u308b\u3044\u306f6n+5 \u578b\u306e\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3001\u3053\u306e\u8fba\u306f99 Haskell Problems \u3088\u308a\u3001[31..41]\u306e31. \u3067\u6271\u3063\u305f\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u306d\u3002\np^2 -1 \u307e\u3067\u8003\u3048\u308c\u3070\u826f\u3044\u306e\u3067x \u306e\u5b9a\u7fa9\u57df\u304b\u3089\u3061\u3087\u3063\u3068\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3053\u3046\u3057\u3066\u53d6\u308a\u51fa\u3057\u305fns \u3092gcd \u3067\u8a66\u3057\u5272\u308a\u3092\u3059\u308b\u3053\u3068\u3067\u6b8b\u308a\u30ab\u30b9\u304c\u7d20\u6570\u306b\u306a\u308a\u307e\u3059\u3001\u6700\u521d\u306e\u30c8\u30e9\u30a4\u3067\u306f[7,11,13,17,19,23] \u3068\u306a\u308a\u307e\u3059\u3001\u304a\u3049\u300125\u306f\u5165\u3063\u3066\u306a\u3044\u306e\u3067\u3053\u3053\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3044\u3067\u3059\u306d\u3002\n\u3053\u308c\u3067\u3058\u3064\u306fprimes' \u306f[2,3,5,7,11,13,17,19,23 \u3068\u308f\u304b\u308a\u307e\u3059\u3002\n\u5f93\u3063\u3066(++) \u306e\u5f8c\u308d\u3067\u306ff 25 25 \u3092[7,11,13,17,19,23, \u3067\u59cb\u307e\u308b\u30ea\u30b9\u30c8\u306b\u4f5c\u7528\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u308f\u3051\u3067\u3059\u3002\n\u307e\u3041f \u306e\u5b9a\u7fa9\u304b\u3089\u3053\u306e\u90e8\u5206\u7d20\u6570\u5217\u306e\u982d\u306e7 \u3057\u304b\u3044\u308a\u307e\u305b\u3093\u304c\u3002\n\u6b21\u306fgcd 25 \u3067\u305f\u3081\u3057\u308f\u308a\u306b\u306a\u308a\u307e\u3059\u3001\u307e\u305fns \u306f[25,29,31,35,37,41..\u3000\u3068\u306a\u308b\u306e\u3067\u9806\u5f53\u306b29,31 \u306a\u3069\u304c\u6b8b\u3063\u3066\u3044\u3063\u3066\u3081\u3067\u305f\u3057\u3067\u3059\u306d\u3002\n\u3084\u306f\u308a\u8a66\u3057\u5272\u308a\u3067gcd \u3092\u4f7f\u3046\u3053\u3068\u304c\u5927\u304d\u304f\u52b9\u304d\u307e\u3059\u3001\u304a\u306e\u304a\u306e\u306e\u7d04\u6570\u3067\u306e\u8a66\u3057\u5272\u308a\u3082\u4e00\u6c17\u306b\u884c\u3048\u308b\u306e\u306b\u30b3\u30b9\u30c8\u304c\u5b89\u3044\u306e\u306f\u304a\u8cb7\u3044\u5f97\u611f\u304c\u6709\u308a\u307e\u3059\u306d\u3002\n\u304a\u305d\u3089\u304fgcd \u306e\u30b3\u30b9\u30c8\u306e\u3084\u3059\u3055\u3068\u3001ns \u306e\u9805\u306e\u5f62\uff086n+1, 6n+5) \u306e\u30c1\u30e7\u30a4\u30b9\u306e\u304a\u304b\u3052\u3067\u3053\u306e\u5b9f\u88c5\u304c\u65e9\u3044\u306e\u3067\u3057\u3087\u3046\u306d\u3002\n\n\u306f\u3058\u3081\u306b\n\u73fe\u572899 \u554f\u984c\u306e31\u306b\u5dee\u3057\u639b\u304b\u308a\u307e\u3057\u305f\u3002\n\u554f\u984c31 \u3067\u306f\uff08\u3042\u308b\u3044\u306f\u554f\u984c31 \u304b\u3089\uff09\u7d20\u6570\u3092\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u3001\u53d6\u308a\u7d44\u3080\u524d\u306b\u5c11\u3005\u304a\u52c9\u5f37\u3057\u305f\u8db3\u8de1\u3067\u3059\u3002\n\u4eca\u307e\u3067\u306e\u9014\u4e2d\u7d4c\u904e\u306f\u4ee5\u4e0b\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n99 Haskell Problems \u3088\u308a\u3001[1..10]\n99 Haskell Problems \u3088\u308a\u3001[11..20]\n99 Haskell Problems \u3088\u308a\u3001[21..28]\n\u3055\u3066\u3001\u3053\u306e\u8a18\u4e8b\u306e\u3082\u3068\u306d\u305f\u306f\u6b21\u3067\u3059\u3002\nhttp://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)\nhttp://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html\nhttps://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\uff1f\n\u672c\u5bb6\u306b\u3042\u308b\nprimes = filterPrime [2..] \n  where filterPrime (p:xs) = \n          p : filterPrime [x | x <- xs, x `mod` p /= 0]\n\n\u304c\u672c\u7269\u306e\u7be9\uff08\u3075\u308b\u3044\uff09\u3067\u306f\u7121\u3044\u3001\u3068\u8033\u304b\u3058\u3063\u305f\u3068\u3053\u308d\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3001\u3069\u3053\u3060\u3063\u305f\u304b\u5931\u5ff5\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3002\n\u3069\u3053\u304c\u672c\u7269\u306e\u7be9\u3068\u9055\u3046\u304b\u306f\u4ee5\u4e0b\u3067\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u30021\n\u3067\u3001\u307e\u305a\u6700\u521d\u306b\u6709\u9650\u5217\u304b\u3089\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u6b63\u3057\u3044\u7be9\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u305b\u3063\u304b\u304f\u9045\u5ef6\u8a55\u4fa1\u306a\u306e\u3067\u6700\u521d\u304b\u3089\u7121\u9650\u5217\u3092\u6271\u304a\u3046\u3068\u601d\u3063\u3066\u3084\u3081\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u8003\u3048\u3042\u3050\u306d\u3066\u898b\u3064\u3051\u305f\u306e\u304c\u4e0a\u8a18\u306e\u8cc7\u6599\u305f\u3061\u3067\u3059\u3002\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u578b\n\u9580\u5916\u6f22\u306a\u304c\u3089\u3001\u307e\u305a\u8003\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u306e\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u578b\u306f\u4e0d\u53ef\u5206\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u6570\u5b66\u80052\u3068\u3057\u3066\u306e\u89b3\u70b9\u306a\u3089\u624b\u7d9a\u304d\u3084\u8a3c\u660e\u306f\uff08\u6975\u8ad6\u3092\u8a00\u3048\u3070\uff09\u4e00\u3064\u3042\u308c\u3070\u305d\u308c\u3067\u826f\u3044\u3001\u3068\u8a00\u3048\u307e\u3059\u304c\u3001\u8a08\u7b97\u6a5f\u3067\u306e\u5b9f\u88c5\u3092\u8003\u3048\u308b\u3068\u4f8b\u3048\u3070\u6642\u9593\u4f7f\u7528\u91cf\u3084\u7a7a\u9593\u4f7f\u7528\u91cf\u3092\u304d\u3061\u3093\u3068\u898b\u7a4d\u3082\u3089\u306a\u3044\u3068\u30d8\u30bf\u3059\u308c\u3070\u8a08\u7b97\u51fa\u6765\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u9593\u9055\u3063\u305f\u5024\u3092\u7b54\u3048\u3068\u3057\u3066\u8fd4\u3059\u6050\u308c\u3060\u3063\u3066\u3042\u308b\u308f\u3051\u3067\u3059\u30023\n\u7d20\u6570\u5217\u3092\u3069\u3046\u3044\u3046\u7528\u9014\u3067\u4f7f\u3046\u304b\u3067\u3001\u4f8b\u3048\u3070\u305d\u3053\u305d\u3053\u306e\u6570\u304c\u751f\u6210\u3067\u304d\u3066\u3067\u3082\u30a2\u30af\u30bb\u30b9\u901f\u3044\u69cb\u9020\u304c\u3044\u3044\u3068\u304b\u3001\u306a\u308b\u3060\u3051\u5927\u304d\u3044\u7d20\u6570\u304c\u5f97\u3089\u308c\u305f\u3089\u305d\u308c\u3067\u826f\u3044\u3001\u3068\u304b\u3055\u3089\u306b\u5927\u80c6\u306b\u539f\u7406\u7684\u306b\u7d20\u6570\u304c\u4f5c\u308c\u308c\u3070\uff08\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8aac\u660e\u306e\u305f\u3081\u306a\u3069\u3067\uff09\u5145\u5206\u3060\u3068\u304b\u3044\u308d\u3044\u308d\u62d8\u675f\u6761\u4ef6\u304c\u6c7a\u307e\u308a\u307e\u3059\u3002\n\u79c1\u500b\u4eba\u306f\u56f0\u3063\u305f\u3053\u3068\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d39\u4ecb\u306b\u306f\u305d\u308c\u306a\u308a\u51fa\u4f1a\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306f\u305d\u308c\u307b\u3069\u3067\u5927\u5909\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306a\u77e5\u8b58\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u3066\u3001\u56f0\u3063\u305f\u3082\u306e\u3067\u3059\u3001\u3059\u306a\u308f\u3061\u30ea\u30b9\u30c8\u3068\u3001\u3042\u3068\u306f\u5358\u7d14\u306a\u6728\u3050\u3089\u3044\u3057\u304b\u77e5\u3089\u306a\u3044\u3002\n\u3053\u3053\u3067\u306f\u7d20\u6734\u306b\u30ea\u30b9\u30c8\u3068size balanced binary trees \u306a\u308b\u3082\u306e\u3067\u5b9f\u88c5\u3055\u308c\u305fData.Set \u306b\u3088\u308b\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u7d20\u6734\u306a\u5b9f\u88c5\n\u3064\u307e\u308a\u306f\u672c\u5bb6\u3067\u51fa\u3066\u304f\u308b\u5974\u3068\u307b\u3068\u3093\u3069\u4e00\u7dd2\u306e\u3084\u3064\u3067\u3059\u306d\u3002\n> primes0 :: [Integer]\n> primes0 = naiveSieve (2:[3,5..])\n>   where \n>     naiveSieve (p:xs) = p : naiveSieve [x | x <- xs, x `mod` p /= 0]\n\n  *Sieve> take 10000 primes0\n   .. ,104729]\n  (223.14 secs, 17,790,894,656 bytes)\n\n\u9aa8\u8463\u54c1\u306e\u3088\u3046\u306a\u7206\u71b1MacBookAir \u306e\u521d\u53f7\u6a5f\u3067\u308210000 \u7d20\u6570\u53d6\u3063\u3066\u304f\u308b\u306e\u306b200sec \u306e\u30aa\u30fc\u30c0\u30fc\u3067\u3059\u3001\u307e\u3041\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3082\u3061\u308d\u3093Haskell \u3067\u9045\u5ef6\u8a55\u4fa1\u306b\u3088\u3063\u3066\u7121\u9650\u306e\u7d20\u6570\u5217\u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3088\u3001\u3057\u304b\u3082\u3053\u3093\u306a\u306b\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3067\uff01\u3068\u3044\u3046\u7528\u9014\u306b\u306f\u307e\u3041\u30d4\u30c3\u30bf\u30ea\u3067\u305d\u306e\u305f\u3081\u306b\u672c\u5bb6\u3067\u3082\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3001\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u306f\u305f\u3057\u304b\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044\u3002\n\u3053\u308c\u306f\u7d20\u6570\u5019\u88dc\u306e\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306e\u65702 \u304c\u7d20\u6570\u3067\u3042\u308b\u3053\u3068\u3092\u4f7f\u3063\u30662 \u306e\u500d\u6570\u3092\u7be9\u306b\u304b\u3051\u3066\uff08\u3075\u308b\u3044\u304b\u3089\u843d\u3068\u3057\u3066\u3001\u306e\u65b9\u304c\u5408\u3063\u3066\u307e\u3059\u304b\u306d\uff1f\uff09\u305d\u306e\u7d50\u679c\u3092\u518d\u5e30\u7684\u306bsublist \u306e\u5148\u982d\u306e\u8981\u7d20\u3067\u7be9\u306b\u639b\u3051\u3066\u3044\u304d\u307e\u3059\u3002\n\u554f\u984c\u306f\n\nThat\u2019s 8 operations. When the false algorithm finds 7, it checks every number from 8 to 100, that\u2019s 92 operations!\n\uff08\u7a1a\u62d9\u306a\u8a33\uff09\uff1a8 \u56de\u3067\u3044\u3044\u306e\u306b\u3001\u3053\u306e\u201d\u9593\u9055\u3063\u305f\u201d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u30687 \u3092\u898b\u3064\u3051\u305f\u3042\u3068\u30018 \u304b\u3089100 \u307e\u3067\u306e\u5168\u6570\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3093\u3060\u305c\uff1f92 \u56de\u3082\uff01\n\n\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u3082\u3068\u306d\u305f\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044\u30a2\u30cb\u30e1\u3082\u3042\u3063\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff01\n\u8981\u306f7 \u3092\u7d20\u6570\u3068\u3057\u3066\u898b\u3064\u3051\u305f\u3042\u3068\u6b21\u306e\u7d20\u6570\u304c11 \u3068\u308f\u304b\u3063\u305f\u77ac\u9593\u306b\u3001121 \u672a\u6e80\u306e\u6b8b\u3063\u305f\u6570\u305f\u3061\u306f\u3082\u3046\u7d20\u6570\u3068\u5206\u304b\u308b\u306e\u3067\u3082\u3046\u632f\u308b\u308f\u306a\u304f\u3066\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3001\u4f1d\u308f\u308a\u307e\u3059\u304b\u306d\uff1f\n\u3053\u306e\u7d20\u6734\u306a\u201d\u3042\u307e\u308a\u304c\u3042\u308b\u304b\u3069\u3046\u304b\uff1f\u201d\u5b9f\u88c5\u3067\u306f\u3075\u308b\u308f\u306a\u3044\u3067\u826f\u3044\u6570\u306e\u7be9\u306b\u304a\u305d\u3089\u304f\u5b9f\u884c\u6642\u9593\u306e\u5927\u534a\u3092\u53d6\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6642\u9593\u304c\u304b\u304b\u308b\u8a33\u3067\u3059\u3002\n\u3057\u304b\u3082\u632f\u308b\u308f\u306a\u304f\u3066\u826f\u3044\u6570\u306f\u7d20\u6570\u5019\u88dc\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u304f\u307b\u3069\u5927\u304d\u304f\u306a\u308b\u306e\u3067\u5927\u304d\u3044\u7d20\u6570\u304c\u307b\u3057\u3044\u6642\u3053\u305d\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\n\u3053\u3053 \u306ebetter sieve \u304c\u6b21\u306b\u306a\u308a\u307e\u3059\u3002\n> merge :: (Ord a) => [a] -> [a] -> [a]\n> merge xx@(x:xs) yy@(y:ys) \n>   | x <  y = x : (merge xs yy)\n>   | x == y = x : (merge xs ys)\n>   | x >  y = y : (merge xx ys)\n>   | otherwise = error \":merge\"\n\n> diff :: (Ord a) => [a] -> [a] -> [a]\n> diff xx@(x:xs) yy@(y:ys)\n>   | x <  y = x : (diff xs yy)\n>   | x == y = diff xs ys\n>   | x >  y = diff xx ys\n>   | otherwise = error \":diff\"\n\n> primes2, nonPrimes2 :: [Integer]\n> primes2 = [2,3,5] ++ (diff [7,9..] nonPrimes2)\n> nonPrimes2 = foldr1 merge' $ map helper $ tail primes2\n>   where\n>     merge' (x:xs) ys = x : (merge xs ys)\n>     helper p = [n*p | n <- [p,p+2..]]\n\n  *Sieve> take 10000 primes2\n  (1.87 secs, 309,541,816 bytes)\n  *Sieve> take 100000 primes2\n  (49.66 secs, 7,585,213,056 bytes)\n\n\u307e\u305a\u306f\uff08\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\uff09\u7121\u9650\u30ea\u30b9\u30c8\u305f\u3061\u306emerge \u3068diff \u3092\u95a2\u6570\u3068\u3057\u3066\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u3082\u3068\u306d\u305f\u306e\u8a72\u5f53\u7b87\u6240\u3067\u306fcase of \u69cb\u6587\u3067\u66f8\u3044\u3066\u307e\u3057\u305f\u304c\u30ac\u30fc\u30c9\u306e\u65b9\u304c\u597d\u304d\u306a\u306e\u3067\u305d\u3053\u3060\u3051\u66f8\u304d\u306a\u304a\u3057\u3066\u3044\u307e\u3059\u3002\nHaskell \u306eOrd \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306ftotal order \u306a\u306e\u3067\u3001\u3044\u305a\u308c\u306e\u8981\u7d20\u3082\u30ac\u30fc\u30c9\u306e\u4e09\u5019\u88dc\u3067\u5834\u5408\u306f\u5c3d\u304d\u307e\u3059\u3002\n\u5f93\u3063\u3066\uff13\u3064\u3081\u3092otherwise \u3067\u66f8\u3044\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3001\u591a\u5206\u3002\n\u809d\u5fc3\u8981\u306eprimes2 \u305f\u3061\u304c\u3084\u306f\u308a\u30d8\u30d3\u30fc\u3067\u826f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u304b\u5287\u7684\u306b\u901f\u3044\u30b3\u30fc\u30c9\u306a\u306e\u306b\u30ad\u30fc\u3068\u306a\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u3093\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u306f\uff12\u3064\u306e\u7121\u9650\uff08\u9045\u5ef6\uff09\u30ea\u30b9\u30c8\u3092\u76f8\u4e92\u306b\u898b\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u500b\u4eba\u7684\u306b\u3053\u3046\u3044\u3046\u306e\u304c\u30d1\u30ba\u30eb\u306e\u7b54\u3048\u3063\u307d\u304f\u3066\u597d\u304d\u3067\u3059\u3002\n\u307e\u305a\u540d\u524d\u306e\u793a\u3059\u901a\u308a\u3001primes2 \u306f\u660e\u3089\u304b\u306a\u7d20\u6570\u305f\u3061[2,3,5] \u306b(\u6b8b\u308a\u306e\u7d20\u6570)\u3092\u3064\u306a\u3052\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e(\u6b8b\u308a\u306e\u7d20\u6570\uff09\u306f\u4e0a\u3067\u7528\u610f\u3057\u305fdiff \u3092\u3064\u304b\u3063\u30667 \u304b\u3089\u59cb\u307e\u308b\u5947\u6570\u5217\u304b\u3089\u3001\u975e\u7d20\u6570nonPrimes2 \u3092\u5f15\u3044\u3066\u4f5c\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u4e0a\u624b\u306bnonPrimes2 \u3092\u5b9a\u7fa9\u51fa\u6765\u308c\u3070\u51fa\u6765\u4e0a\u304c\u308a\u3067\u3059\u3001\u3068\u3066\u3082Haskell\u30024\n\u95a2\u6570\u9069\u7528\u306f\u57fa\u672c\u7684\u306b\u201d\u30ab\u30c3\u30b3\u201d\u306e\u5185\u50745 \u304b\u3089\u898b\u3066\u3044\u304b\u306a\u304f\u3066\u306f\u884c\u3051\u307e\u305b\u3093\u3001\u306e\u3067tail primes2 \u304b\u3089\u3067\u3059\u3002\n\u3053\u308c\u306f[3,5..]\u3068\u3044\u3046\u611f\u3058\u3067\u59cb\u307e\u308b6\u7d20\u6570\u5217\u3067\u3059\u3001\u3082\u3061\u308d\u3093\u9045\u5ef6\u30ea\u30b9\u30c8\u3002\n\u3053\u308c\u306bmap helper \u304c\u4f5c\u7528\u3057\u307e\u3059\u3001\u3059\u306a\u308f\u3061\nmap helper $ tail primes2\n= map helper $ [3,5..]\n= [[3*3, 5*3, 7*3 ..], [5*5, 7*5, 9*5 ..] ..]\n\n\u3068\u3044\u3046\u98a8\u306a\u7121\u9650\u30ea\u30b9\u30c8\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u3093\u304b\u65e2\u8996\u611f\u3042\u308b\u306a\u3041\u3068\u601d\u3063\u305f\u3089\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u65b9\u6cd5\u305d\u306e\u3082\u306e\u3067\u3059\u306d\u3001\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u3082\u4f3c\u3066\u307e\u3059\u304c\u3042\u3061\u3089\u306e\u307b\u3046\u304c\u7db2\u7f85\u7684\u3067\u826f\u3044\u8a18\u4e8b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3055\u3066\u6700\u5f8c\u306b\nfoldr1 merge'\n\n\u3067\u3053\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306e\u7121\u9650\u30ea\u30b9\u30c8\u3092\u305f\u3060\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306b\u6f70\u3057\u307e\u3059\u3001\u30d7\u30e9\u30a4\u30e0\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u306f\u6700\u521d\u306e\u6700\u521d\u306e\u8981\u7d20\u306e9 \u306f\u6f70\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u7f6e\u304b\u308c\u3066\u3001\u3042\u3068\u306f\u5404\u7121\u9650\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u5927\u304d\u3055\u9806\u306b\u6f70\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u306e\u969bp^2 \u3068\u3044\u3046\u5f62\u306e\u9805\u304c\u5fc5\u305a\u51fa\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u306d\u3001\u3053\u3053\u304c\u30df\u30bd\u3002\n\u3053\u3046\u3084\u3063\u3066\u4f5c\u3063\u305f\u7121\u9650\u30ea\u30b9\u30c8\u3092[7,9..] \u3068\u3044\u3046\u5947\u6570\u5217\u304b\u3089\u53d6\u308a\u9664\u304d\u307e\u3059\u3001\u3053\u306ep \u306f\u7d20\u6570\u5217\u304b\u3089\u53d6\u3063\u3066\u304d\u3066\u3044\u308b\u306e\u3067\u3001\u3064\u307e\u308ap^2 \u3088\u308a\u5c0f\u3055\u304f\u3066\u304b\u3064[7,9..] \u304b\u3089\u306a\u308b\u5947\u6570\u5217\u306b\u6b8b\u3063\u3066\u3044\u308b\u6570\n(diff [7,9..] nonPrimes2)\n\n\u306f\u7d20\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f[2,3,5] \u3068\u5408\u308f\u305b\u3066\u8981\u3089\u306a\u3044\u3075\u308b\u3044\u3092\u3075\u308b\u3046\u624b\u9593\u304c\u7701\u3051\u3066\u3044\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff01\u304b\u3057\u3053\u3044\u3002\n\nData.Set \u3092\u4f7f\u3063\u3066\n\u304d\u3061\u3093\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3057\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u304a\u305d\u3089\u304f\u5927\u304d\u306a\u7d20\u6570\u3092\u53d6\u3063\u3066\u304f\u308b\u969b\u306b\u306f\u4e0a\u8a18\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3088\u308a\u65e9\u3044\u3068\u601d\u308f\u308c\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u697d\u3057\u3044\u3053\u3053\u304b\u3089\u3002\n> import qualified Data.Set as PQ\n\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n>   where\n>     sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n>     sieve''' (x:xs) table\n>       | nextComposite == x = sieve''' xs (adjust x table)\n>       | otherwise          = x : sieve''' xs (insertprime x xs table)\n>       where\n>         (nextComposite, _) = PQ.findMin table\n>     adjust x table\n>       | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>       | otherwise = table\n>       where\n>         Just ((n, n':ns), newPQ) = PQ.minView table\n>     insertprime p xs = PQ.insert (p^2, map (*p) xs) \n\n  *Sieve> take 10000 primes3\n  (1.86 secs, 459,583,904 bytes)\n  *Sieve> take 100000 primes3\n  (32.94 secs, 6,977,828,472 bytes)\n\n\u3055\u3066\u3001\u306a\u306b\u304b\u3089\u3084\u308b\u304b\u3068\u3044\u3046\u3068\u3084\u306f\u308a\u898b\u305f\u3053\u3068\u7121\u3044\u95a2\u6570\u9054\u306e\u578b\u306e\u78ba\u8a8d\u304b\u3089\u3067\u3059\u306d\nPrelude Data.Set> :type empty \nempty :: Set a\nPrelude Data.Set> :type findMin\nfindMin :: Set a -> a\nPrelude Data.Set> :type insert\ninsert :: Ord a => a -> Set a -> Set a\nPrelude Data.Set> :type minView \nminView :: Set a -> Maybe (a, Set a)\n\n\u306a\u308b\u307b\u3069\u3001\u898b\u305f\u307e\u307e\u306e\u540d\u524d\u306e\u901a\u308a\u307f\u305f\u3044\u3067\u3059\u306d\u3001\u306a\u304afindMin \u3068\u3044\u3046\u540d\u524d\u3084\u3001insert \u306a\u3069\u306e\u578b\u3092\u898b\u308b\u3068Ord \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u969b\u306f\u6607\u9806\u3067\u4e26\u3073\u66ff\u3048\u3066\u304f\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u5c11\u3005\u5b9f\u9a13\u3002\nPrelude Data.Set> fromList [1,3..21]\nfromList [1,3,5,7,9,11,13,15,17,19,21]\nPrelude Data.Set> :t it\nit :: (Enum a, Num a, Ord a) => Set a\nPrelude Data.Set> insert 4 it\nfromList [1,3,4,5,7,9,11,13,15,17,19,21]\nPrelude Data.Set> let aSet = fromList [1,3..21]\nPrelude Data.Set> insert 8 aSet \nfromList [1,3,5,7,8,9,11,13,15,17,19,21]\nPrelude Data.Set> let bSet = fromList [10,9..1]\nPrelude Data.Set> bSet\nfromList [1,2,3,4,5,6,7,8,9,10]\nPrelude Data.Set> let cSet = fromList \"Haskell\"\nPrelude Data.Set> cSet \nfromList \"Haekls\"\nPrelude Data.Set> insert 'C' cSet\nfromList \"CHaekls\"\n\n\u305d\u306e\u3088\u3046\u3067\u3059\u306d\u3002\n\u9014\u4e2d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u95a2\u6570\u9054\u306e\u578b\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306b\u66f8\u304d\u76f4\u3057\u3066ghci \u3067\u8aad\u3093\u3067\u578b\u63a8\u8ad6\u3057\u3066\u3082\u3089\u3044\u3001\u9069\u5f53\u306bInteger \u306b\u66f8\u304d\u76f4\u3057\u3066\u898b\u305f\u306e\u304c\u6b21\u306b\u306a\u308a\u307e\u3059\u3002\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n> --  where\n> sieve'' :: [Integer] -> [Integer]\n> sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n\n> sieve''' :: [Integer] -> PQ.Set (Integer, [Integer]) -> [Integer]\n> sieve''' (x:xs) table\n>   | nextComposite == x = sieve''' xs (adjust x table)\n>   | otherwise          = x : sieve''' xs (insertprime x xs table)\n>   where\n>     (nextComposite, _) = PQ.findMin table\n\n> adjust :: Integer -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> adjust x table\n>   | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>   | otherwise = table\n>   where\n>     Just ((n, n':ns), newPQ) = PQ.minView table\n\n> insertprime :: Integer -> [Integer] -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> insertprime p xs = PQ.insert (p^2, map (*p) xs) \n\n\u3053\u3053\u3067\u8b0e\u306a\u306e\u304c\ntable :: PQ.Set (Integer, [Integer])\n\n\u306a\u308b\u578b\u306e\u4eba\u305f\u3061\u3067\u3059\u3001\u3068\u3082\u3042\u308c\u30d5\u30ed\u30fc\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3068\u308a\u3042\u3048\u305a\u3002\nsieve'' [3,5,7,9..]\n= sieve''' [5,7,9..] $ insertprime 3 [5,7,9..] PQ.empty\n= sieve''' [5,7,9..] $ PQ.insert (3^2, map (*3) [5,7,9..]) PQ.empty\n= sieve''' [5,7,9..] $ PQ.insert (9, [15, 21, 27..]) PQ.empty\n= sieve''' [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n\n\u3055\u3066\u3001\u3053\u308c\u304csieve''' \u306e\u30ac\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3001where \u3067\u547c\u3070\u308c\u305ffindMin \u306f\n*Sieve> PQ.findMin $ PQ.fromList [(9,[15,21,27])]\n(9,[15,21,27])\n\n\u3068\u306a\u308a7\u3001nextComposite \u306f9 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u307e\u3059\u3002\n\u5f93\u3063\u3066otherwise \u306b\u30d2\u30c3\u30c8\u3059\u308b\u306e\u3067\nsieve'' [3,5,7,9..]\n= 3 : sieve''' [5,7,9..] $ insertprime 3 [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n= 3 : sieve''' [5,7,9..] $ PQ.insert (9, [15,21,27..]) PQ.fromList [(9,[15,21,27..])]\n= 3 : sieve''' [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n\n\u3053\u3053\u3067\u5c11\u3005\u4e0d\u5b89\u306a\u306e\u306f\u7121\u9650\u30ea\u30b9\u30c8\u3067\u3082insert \u304c\u30c0\u30d6\u30ea\u306b\u5bfe\u3057\u3066\u3082\u6a5f\u80fd\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u304c\u307e\u3041\u3046\u307e\u304f\u3044\u304f\u306e\u3067\u3057\u3087\u3046\u306d\u3001\u3061\u306a\u307f\u306b\u6709\u9650\u30ea\u30b9\u30c8\u306a\u3089\u3070\u5927\u4e08\u592b\u3067\u3057\u305f\u3002\n*Sieve> PQ.insert (9, [15,21,27]) $ PQ.fromList [(9,[15,21,27])]\nPQ.fromList [(9,[15,21,27])]\n\n\u3053\u306e\u307e\u307e\u30ac\u30fc\u30c9\u306e\u3072\u3068\u3064\u76ee\u306e\u6761\u4ef6\u306b\u30d2\u30c3\u30c8\u3059\u308b\u307e\u3067\u7d9a\u304d\u307e\u3059\u3001\u3064\u307e\u308a9 \u304c\u843d\u3061\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7684\u306b\u306f\u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u3068\u540c\u3058\u3067\u3059\u306d\u3002\n9 \u306b\u30d2\u30c3\u30c8\u3059\u308b\u3068\u3053\u3093\u3069\u306fadjust \u304c\u547c\u3070\u308c\u307e\u3059\u3002\nsieve'' [3,5,7,9..]\n= 3:5:7: sieve'' [11,13..] $ adjust 9 PQ.fromList [(9,[15,21,27..])]\n= 3:5:7: sieve'' [11,13..] $ adjust 9 PQ.fromList [(9,[15,21,27..])]\n\n\u3053\u3053\u3067adjust \u306ewhere \u3067\u306f\nJust ((n, n':ns), newPQ) \n= PQ.minView PQ.fromList [(9,[15,21,27..])]\n= Just ((9,[15,21,27..]),PQ.fromList [])\n\n\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u307e\u3059\u3001\u307e\u3041\u3053\u3053\u3067\u3082\u672c\u5f53\u306f\u7121\u9650\u5217\u3067\u3059\u306d\u3001\u6b62\u307e\u308a\u307e\u305b\u3093\u3001\u6709\u9650\u30ea\u30b9\u30c8\u3067\u8a66\u3057\u305f\u306e\u304c\u6b21\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n*Sieve> PQ.minView $ PQ.fromList [(9,[15,21,27])]\nJust ((9,[15,21,27]), PQ.fromList [])\n\nn \u3082x \u30829 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067adjust \u306e\u30ac\u30fc\u30c9\u3082\u4e00\u3064\u76ee\u306b\u30d2\u30c3\u30c8\u3057\u307e\u3059\u3001\u3053\u308c\u304c\u518d\u5e30\u7684\u306badjust \u3092\u307e\u305f\u8aad\u3093\u3067\u4eca\u5ea6\u306f15 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fn' \u306e\u304a\u304b\u3052\u3067otherwise \u306b\u30d2\u30c3\u30c8\u3057\u3066table \u304c\u6b21\u306e\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\nPQ.insert (15, [21,27..]) PQ.fromList []\n= PQ.fromList [(15, [21,27..])]\n\n\u3088\u3063\u3066\u6b21\u306f13 \u304c\u7d20\u6570\u3068\u5224\u5b9a\u3055\u308c\u3066\u3001\u3068\u7d9a\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3055\u3044\u3054\u306b\n\u6b63\u76f4Data.Set \u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u306f\u59cb\u3081\u306e\u5e7e\u3064\u304b\u3092\u8ffd\u3046\u3060\u3051\u3067\u7406\u89e3\u3068\u8a00\u3046\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001\u306a\u304b\u306a\u304b\u697d\u3057\u304b\u3063\u305f\u3067\u3059\u306d\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3084\u306f\u308a\u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u4e8c\u3064\u76ee\u304c\u30d0\u30e9\u30f3\u30b9\u304c\u826f\u3044\u6c17\u304c\u3057\u3066\u597d\u307f\u3067\u3059\u306d\u3002\n\n\u30b3\u30fc\u30c9\u5168\u666f\n\u4ee5\u4e0b\u304c\n\nSieve.lhs\n\n> module Sieve where\n> import qualified Data.Set as PQ\n\n> primes0 :: [Integer]\n> primes0 = naiveSieve (2:[3,5..])\n>   where \n>     naiveSieve (p:xs) = p : naiveSieve [x | x <- xs, x `mod` p /= 0]\n\n  *Sieve> take 10000 primes0\n  .. ,104729]\n  (223.14 secs, 17,790,894,656 bytes)\n\n> primes1 :: [Integer]\n> primes1 = 2: sieve' [3] [5,7..]\n\n> sieve' :: [Integer] -> [Integer] -> [Integer]\n> sieve' (p:ps) xs = p: sieve' (ps ++ ps') [x | x <- qs, x `mod` p /= 0]\n>   where \n>     (ps', qs) = span (<p^2) xs\n\n  *Sieve> take 10000 primes1\n  (10.46 secs, 4,485,491,952 bytes)\n\n  From \n  http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#chunk%20def:primes_better\n\n> merge :: (Ord a) => [a] -> [a] -> [a]\n> merge xx@(x:xs) yy@(y:ys) \n>   | x <  y = x : (merge xs yy)\n>   | x == y = x : (merge xs ys)\n>   | x >  y = y : (merge xx ys)\n>   | otherwise = error \":merge\"\n\n> diff :: (Ord a) => [a] -> [a] -> [a]\n> diff xx@(x:xs) yy@(y:ys)\n>   | x <  y = x : (diff xs yy)\n>   | x == y = diff xs ys\n>   | x >  y = diff xx ys\n>   | otherwise = error \":diff\"\n\n> primes2, nonPrimes2 :: [Integer]\n> primes2 = [2,3,5] ++ (diff [7,9..] nonPrimes2)\n> nonPrimes2 = foldr1 merge' $ map helper $ tail primes2\n>   where\n>     merge' (x:xs) ys = x : (merge xs ys)\n>     helper p = [n*p | n <- [p,p+2..]]\n\n  *Sieve> take 10000 primes2\n  (1.87 secs, 309,541,816 bytes)\n  *Sieve> take 100000 primes2\n  (49.66 secs, 7,585,213,056 bytes)\n\n  From\n  http://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html\n\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n> --  where\n> sieve'' :: [Integer] -> [Integer]\n> sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n> sieve''' :: [Integer] -> PQ.Set (Integer, [Integer]) -> [Integer]\n> sieve''' (x:xs) table\n>   | nextComposite == x = sieve''' xs (adjust x table)\n>   | otherwise          = x : sieve''' xs (insertprime x xs table)\n>   where\n>     (nextComposite, _) = PQ.findMin table\n> adjust :: Integer -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> adjust x table\n>   | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>   | otherwise = table\n>   where\n>     Just ((n, n':ns), newPQ) = PQ.minView table\n> insertprime p xs = PQ.insert (p^2, map (*p) xs) \n\n  *Sieve> take 10000 primes3\n  (1.86 secs, 459,583,904 bytes)\n  *Sieve> take 100000 primes3\n  (32.94 secs, 6,977,828,472 bytes)\n\n\n\n\n\n\n\u3053\u3053\u3067\u306f\u672c\u7269\u306e\u7be9\u306e\u5b9a\u7fa9\u3092\u3061\u3083\u3093\u3068\u3057\u3066\u306a\u3044\u306e\u3067\u3001\u6982\u8aac\u3060\u3051\u3067\u3059\u304c\u3002\u3068\u3044\u3046\u304b\u3042\u307e\u308a\u306b\u9045\u304f\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u3093\u3068\u3044\u3046\u306e\u304c\u5b9f\u969b\u306e\u3068\u3053\u308d\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\u3002\u00a0\u21a9\n\n\n\u79c1\u306f\u6570\u5b66\u8005\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u6570\u5b66\u8005\u306e\u5074\u3001\u3068\u3044\u3046\u7a0b\u5ea6\u3067\u3057\u3087\u3046\u304b\uff1f\u307e\u3041\u3042\u304f\u307e\u3067\u30e6\u30fc\u30b6\u30fc\u3067\u3059\u3002\u00a0\u21a9\n\n\nHaskell \u3067\u79c1\u306e\u3088\u3046\u306a\u8003\u3048\u7121\u3057\u304c\u7d20\u6734\u306b\u5b9f\u88c5\u3092\u8003\u3048\u308b\u3068\u52d5\u304f\u3051\u3069\u30ea\u30bd\u30fc\u30b9\u3092\u98df\u3046\u30b3\u30fc\u30c9\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3001\u307e\u3041\u305d\u308c\u3067\u3082\u52d5\u3051\u308b\u30b3\u30fc\u30c9\u304c\u304b\u3051\u308b\u304b\u3089Haskell \u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u304c\u3002\u00a0\u21a9\n\n\n\u3059\u306a\u308f\u3061\u624b\u7d9a\u304d\u3067\u306f\u306a\u304f\u5b9a\u7fa9\u3092\u66f8\u3051\u3070\u3088\u3044\u3001\u3068\u3044\u3046\u610f\u5473\u3067\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u3082\u3061\u308d\u3093($) \u3082Haskell \u3067\u306f\u62ec\u5f27\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u3053\u308c\u306f\u672c\u5f53\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3001\u3068\u3044\u3046\u306e\u3082Haskell \u306e\u69cb\u6587\u7cd6\u8863\u3067\u306f[3,5..] == [3,5,7,9..]\u3068\u306a\u3063\u3066\u7d20\u6570\u5217\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u304c\u3001\u79c1\u306e\u8868\u73fe\u529b\u3067\u306f\u3053\u3053\u3067\u306f\u3053\u3046\u66f8\u304f\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a3 \u30685 \u306f\u8981\u7d20\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3001\u3068\u3044\u3046\u304f\u3089\u3044\u306e\u610f\u5473\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u3082\u3061\u308d\u3093\u672c\u5f53\u306f\u7121\u9650\u5217\u3067\u8a55\u4fa1\u3057\u3066\u307f\u305f\u3089\u3082\u3061\u308d\u3093\u6b62\u307e\u308a\u307e\u305b\u3093\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u306e\u304a\u304b\u3052\u3067nextComposite \u304c9 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u3089\u3042\u3068\u306f\u4f55\u3082\u56f0\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u00a0\u21a9\n\n\n\n# \u8ffd\u8a18\nQiita \u306e\u8a18\u4e8b\u306e\u4e2d\u306b\u3059\u3067\u306b\u3082\u3063\u3068\u65e9\u304f\u3066\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3089\u3063\u3057\u3083\u308b\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n[Haskell \u3067\u300c\u7d20\u6570\u5217\u300d\u3092\u3064\u304f\u308b\u3002](http://qiita.com/little_Haskeller/items/614a3ae20a517c19bb1f)\n\u306a\u304a\u3001\u3055\u3089\u306b\u5143\u30cd\u30bf\u306f\u3053\u3061\u3089\u3060\u305d\u3046\u3067\u3059\u3002\n[\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u5c0f\u578b\u9ad8\u901f\u9060\u5fc3\u5206\u96e2\u6a5f](http://notogawa.hatenablog.com/entry/20110114/1295006865)\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u6709\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3089\u306e\u5b9f\u88c5\u3082\u5b9f\u306f\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3067\u306f\u306a\u304f\uff08Haskell \u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u305b\u3044\uff1f\uff09\u3044\u308f\u3086\u308b\u8a66\u3057\u5272\u308a\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u304c\u3001\u30b3\u30fc\u30c9\u30b4\u30eb\u30d5\u306b\u3082\u63a1\u7528\u3055\u308c\u3066\u308b\u4f4d\u77ed\u304f\u3066\u304b\u3064\u65e9\u3044\u3068\u306a\u308b\u3068\u3001\u3001\u3001\n\n\u4e00\u898b\u3057\u305f\u3068\u3053\u308d\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u7d10\u89e3\u3044\u3066\u307f\u307e\u3059\u3001\u4ee5\u4e0b\u672c\u8cea\u7684\u306b\u306f[Haskell \u3067\u300c\u7d20\u6570\u5217\u300d\u3092\u3064\u304f\u308b\u3002](http://qiita.com/little_Haskeller/items/614a3ae20a517c19bb1f)\u304b\u3089\u306e\u30b3\u30d4\u30da\u3067\u3059\u3001\u3061\u3087\u3063\u3068\u578b\u3068\u304b\u4e8c\u4e57\u3068\u304b\u6539\u5909\u3057\u3066\u3044\u307e\u3059\u304c\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306f\u9055\u3044\u304c\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u9ad8\u6b21\u306e\u5f71\u97ff\u304c\u3042\u308b\u304b\u3082\u5206\u304b\u308a\u307e\u305b\u3093\u3001\u639b\u3051\u7b97\u306e\u65b9\u304c\u5b89\u4fa1\u306a\u306e\u304b\u3082\uff09\n\n```p.lhs\n\nFast primes from\n  http://qiita.com/little_Haskeller/items/614a3ae20a517c19bb1f\n\n> primes :: Integral a => [a]\n> primes = map fromIntegral primes'\n>   where\n>     primes' :: Integral a => [a]\n>     primes' = [2,3,5] ++ f 5 7 (drop 2 primes')\n\n>     f :: Integral a => a -> a -> [a] -> [a]\n>     f m s (p:ps) = [n | n <- ns, gcd m n == 1]\n>                    ++ f (m*p) (p^2) ps\n>       where -- Primes are either 6n+1 or 6n+5 form.\n>         ns = [x + y | x <- [s, s +6 .. p^2 -2], y <- [0, 4]]\n \n> main :: IO ()\n> main = print $ take 1 $ dropWhile (< 30000000) primes\n\n  $ ghc p.lhs -O2\n  [1 of 1] Compiling Main             ( p.lhs, p.o )\n  Linking p ...\n  $ time ./p\n  [30000001]\n\n  real  0m2.524s\n  user  0m2.460s\n  sys 0m0.058s\n\n```\n\nprimes' \u81ea\u4f53\u306f\u3044\u308f\u3086\u308b\u9045\u5ef6\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u88dc\u52a9\u95a2\u6570f \u304c\u30df\u30bd\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\u307e\u305fgcd \u304cHaskell \u3067\u306f\u5b89\u4fa1\u3060\u3068\u3044\u3046\u306e\u3082\u52b9\u3044\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3001\u9806\u5e8f\u304c\u9006\u306b\u306f\u306a\u308a\u307e\u3059\u304c[99 Haskell Problems \u3088\u308a\u3001[31..41]](http://qiita.com/bra_cat_ket/items/b5baf5e162f64b68f48a)\u3067\u3084\u308b\u3088\u3046\u306b\u5f15\u304d\u7b97\u3060\u3051\u3067\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3057\u3002\n\n\u307e\u305a\u6700\u521d\u306b\u306f(drop 2 primes') \u306f\u5148\u982d\u306e[5, \u3057\u304b\u6c7a\u307e\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3068\u3001f \u306e\u7b2c\u4e8c\u5f15\u6570\u306f\u304b\u306a\u3089\u305a6n+1 \u578b\u306e\u6574\u6570\uff08\u6700\u521d\u306f7 \u305d\u306e\u3042\u30687^2=49 \u3000\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u305f\u304c\u3063\u3066ns \u306e\u4e2d\u306ex \u306f6n+1 \u578b\u306b\u3001y <- [0,4] \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067ns \u306f6n+1 \u3042\u308b\u3044\u306f6n+5 \u578b\u306e\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3001\u3053\u306e\u8fba\u306f[99 Haskell Problems \u3088\u308a\u3001[31..41]](http://qiita.com/bra_cat_ket/items/b5baf5e162f64b68f48a)\u306e31. \u3067\u6271\u3063\u305f\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u306d\u3002\np^2 -1 \u307e\u3067\u8003\u3048\u308c\u3070\u826f\u3044\u306e\u3067x \u306e\u5b9a\u7fa9\u57df\u304b\u3089\u3061\u3087\u3063\u3068\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u3053\u3046\u3057\u3066\u53d6\u308a\u51fa\u3057\u305fns \u3092gcd \u3067\u8a66\u3057\u5272\u308a\u3092\u3059\u308b\u3053\u3068\u3067\u6b8b\u308a\u30ab\u30b9\u304c\u7d20\u6570\u306b\u306a\u308a\u307e\u3059\u3001\u6700\u521d\u306e\u30c8\u30e9\u30a4\u3067\u306f[7,11,13,17,19,23] \u3068\u306a\u308a\u307e\u3059\u3001\u304a\u3049\u300125\u306f\u5165\u3063\u3066\u306a\u3044\u306e\u3067\u3053\u3053\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3044\u3067\u3059\u306d\u3002\n\u3053\u308c\u3067\u3058\u3064\u306fprimes' \u306f[2,3,5,7,11,13,17,19,23 \u3068\u308f\u304b\u308a\u307e\u3059\u3002\n\u5f93\u3063\u3066(++) \u306e\u5f8c\u308d\u3067\u306ff 25 25 \u3092[7,11,13,17,19,23, \u3067\u59cb\u307e\u308b\u30ea\u30b9\u30c8\u306b\u4f5c\u7528\u3055\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u308f\u3051\u3067\u3059\u3002\n\u307e\u3041f \u306e\u5b9a\u7fa9\u304b\u3089\u3053\u306e\u90e8\u5206\u7d20\u6570\u5217\u306e\u982d\u306e7 \u3057\u304b\u3044\u308a\u307e\u305b\u3093\u304c\u3002\n\u6b21\u306fgcd 25 \u3067\u305f\u3081\u3057\u308f\u308a\u306b\u306a\u308a\u307e\u3059\u3001\u307e\u305fns \u306f[25,29,31,35,37,41..\u3000\u3068\u306a\u308b\u306e\u3067\u9806\u5f53\u306b29,31 \u306a\u3069\u304c\u6b8b\u3063\u3066\u3044\u3063\u3066\u3081\u3067\u305f\u3057\u3067\u3059\u306d\u3002\n\n\u3084\u306f\u308a\u8a66\u3057\u5272\u308a\u3067gcd \u3092\u4f7f\u3046\u3053\u3068\u304c\u5927\u304d\u304f\u52b9\u304d\u307e\u3059\u3001\u304a\u306e\u304a\u306e\u306e\u7d04\u6570\u3067\u306e\u8a66\u3057\u5272\u308a\u3082\u4e00\u6c17\u306b\u884c\u3048\u308b\u306e\u306b\u30b3\u30b9\u30c8\u304c\u5b89\u3044\u306e\u306f\u304a\u8cb7\u3044\u5f97\u611f\u304c\u6709\u308a\u307e\u3059\u306d\u3002\n\n\u304a\u305d\u3089\u304fgcd \u306e\u30b3\u30b9\u30c8\u306e\u3084\u3059\u3055\u3068\u3001ns \u306e\u9805\u306e\u5f62\uff086n+1, 6n+5) \u306e\u30c1\u30e7\u30a4\u30b9\u306e\u304a\u304b\u3052\u3067\u3053\u306e\u5b9f\u88c5\u304c\u65e9\u3044\u306e\u3067\u3057\u3087\u3046\u306d\u3002\n\n\n# \u306f\u3058\u3081\u306b\n\u73fe\u5728[99 \u554f\u984c\u306e31](https://wiki.haskell.org/99_questions/31_to_41)\u306b\u5dee\u3057\u639b\u304b\u308a\u307e\u3057\u305f\u3002\n\u554f\u984c31 \u3067\u306f\uff08\u3042\u308b\u3044\u306f\u554f\u984c31 \u304b\u3089\uff09\u7d20\u6570\u3092\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u3001\u53d6\u308a\u7d44\u3080\u524d\u306b\u5c11\u3005\u304a\u52c9\u5f37\u3057\u305f\u8db3\u8de1\u3067\u3059\u3002\n\u4eca\u307e\u3067\u306e\u9014\u4e2d\u7d4c\u904e\u306f\u4ee5\u4e0b\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n[99 Haskell Problems \u3088\u308a\u3001[1..10]](http://qiita.com/bra_cat_ket/items/211073bb1ce3b3176da9)\n[99 Haskell Problems \u3088\u308a\u3001[11..20]](http://qiita.com/bra_cat_ket/items/e06434454f25e833e7f6)\n[99 Haskell Problems \u3088\u308a\u3001[21..28]](http://qiita.com/bra_cat_ket/items/40caf8377a46734bf4a7)\n\n\u3055\u3066\u3001\u3053\u306e\u8a18\u4e8b\u306e\u3082\u3068\u306d\u305f\u306f\u6b21\u3067\u3059\u3002\nhttp://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)\nhttp://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html\nhttps://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf\n\n# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\uff1f\n[\u672c\u5bb6](https://www.haskell.org)\u306b\u3042\u308b\n\n```hs\nprimes = filterPrime [2..] \n  where filterPrime (p:xs) = \n          p : filterPrime [x | x <- xs, x `mod` p /= 0]\n```\n\n\u304c\u672c\u7269\u306e\u7be9\uff08\u3075\u308b\u3044\uff09\u3067\u306f\u7121\u3044\u3001\u3068\u8033\u304b\u3058\u3063\u305f\u3068\u3053\u308d\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3001\u3069\u3053\u3060\u3063\u305f\u304b\u5931\u5ff5\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3002\n\u3069\u3053\u304c\u672c\u7269\u306e\u7be9\u3068\u9055\u3046\u304b\u306f\u4ee5\u4e0b\u3067\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002[^3]\n\n\u3067\u3001\u307e\u305a\u6700\u521d\u306b\u6709\u9650\u5217\u304b\u3089\u306a\u308b\u5165\u529b\u306b\u5bfe\u3057\u3066\u6b63\u3057\u3044\u7be9\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u305b\u3063\u304b\u304f\u9045\u5ef6\u8a55\u4fa1\u306a\u306e\u3067\u6700\u521d\u304b\u3089\u7121\u9650\u5217\u3092\u6271\u304a\u3046\u3068\u601d\u3063\u3066\u3084\u3081\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u8003\u3048\u3042\u3050\u306d\u3066\u898b\u3064\u3051\u305f\u306e\u304c\u4e0a\u8a18\u306e\u8cc7\u6599\u305f\u3061\u3067\u3059\u3002\n\n# \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u578b\n\u9580\u5916\u6f22\u306a\u304c\u3089\u3001\u307e\u305a\u8003\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u306e\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u30c7\u30fc\u30bf\u578b\u306f\u4e0d\u53ef\u5206\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u6570\u5b66\u8005[^5]\u3068\u3057\u3066\u306e\u89b3\u70b9\u306a\u3089\u624b\u7d9a\u304d\u3084\u8a3c\u660e\u306f\uff08\u6975\u8ad6\u3092\u8a00\u3048\u3070\uff09\u4e00\u3064\u3042\u308c\u3070\u305d\u308c\u3067\u826f\u3044\u3001\u3068\u8a00\u3048\u307e\u3059\u304c\u3001\u8a08\u7b97\u6a5f\u3067\u306e\u5b9f\u88c5\u3092\u8003\u3048\u308b\u3068\u4f8b\u3048\u3070\u6642\u9593\u4f7f\u7528\u91cf\u3084\u7a7a\u9593\u4f7f\u7528\u91cf\u3092\u304d\u3061\u3093\u3068\u898b\u7a4d\u3082\u3089\u306a\u3044\u3068\u30d8\u30bf\u3059\u308c\u3070\u8a08\u7b97\u51fa\u6765\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u9593\u9055\u3063\u305f\u5024\u3092\u7b54\u3048\u3068\u3057\u3066\u8fd4\u3059\u6050\u308c\u3060\u3063\u3066\u3042\u308b\u308f\u3051\u3067\u3059\u3002[^4]\n\n\u7d20\u6570\u5217\u3092\u3069\u3046\u3044\u3046\u7528\u9014\u3067\u4f7f\u3046\u304b\u3067\u3001\u4f8b\u3048\u3070\u305d\u3053\u305d\u3053\u306e\u6570\u304c\u751f\u6210\u3067\u304d\u3066\u3067\u3082\u30a2\u30af\u30bb\u30b9\u901f\u3044\u69cb\u9020\u304c\u3044\u3044\u3068\u304b\u3001\u306a\u308b\u3060\u3051\u5927\u304d\u3044\u7d20\u6570\u304c\u5f97\u3089\u308c\u305f\u3089\u305d\u308c\u3067\u826f\u3044\u3001\u3068\u304b\u3055\u3089\u306b\u5927\u80c6\u306b\u539f\u7406\u7684\u306b\u7d20\u6570\u304c\u4f5c\u308c\u308c\u3070\uff08\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8aac\u660e\u306e\u305f\u3081\u306a\u3069\u3067\uff09\u5145\u5206\u3060\u3068\u304b\u3044\u308d\u3044\u308d\u62d8\u675f\u6761\u4ef6\u304c\u6c7a\u307e\u308a\u307e\u3059\u3002\n\u79c1\u500b\u4eba\u306f\u56f0\u3063\u305f\u3053\u3068\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d39\u4ecb\u306b\u306f\u305d\u308c\u306a\u308a\u51fa\u4f1a\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306f\u305d\u308c\u307b\u3069\u3067\u5927\u5909\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306a\u77e5\u8b58\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u3066\u3001\u56f0\u3063\u305f\u3082\u306e\u3067\u3059\u3001\u3059\u306a\u308f\u3061\u30ea\u30b9\u30c8\u3068\u3001\u3042\u3068\u306f\u5358\u7d14\u306a\u6728\u3050\u3089\u3044\u3057\u304b\u77e5\u3089\u306a\u3044\u3002\n\u3053\u3053\u3067\u306f\u7d20\u6734\u306b\u30ea\u30b9\u30c8\u3068size balanced binary trees \u306a\u308b\u3082\u306e\u3067\u5b9f\u88c5\u3055\u308c\u305fData.Set \u306b\u3088\u308b\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# \u7d20\u6734\u306a\u5b9f\u88c5\n\u3064\u307e\u308a\u306f\u672c\u5bb6\u3067\u51fa\u3066\u304f\u308b\u5974\u3068\u307b\u3068\u3093\u3069\u4e00\u7dd2\u306e\u3084\u3064\u3067\u3059\u306d\u3002\n\n```hs\n> primes0 :: [Integer]\n> primes0 = naiveSieve (2:[3,5..])\n>   where \n>     naiveSieve (p:xs) = p : naiveSieve [x | x <- xs, x `mod` p /= 0]\n\n  *Sieve> take 10000 primes0\n   .. ,104729]\n  (223.14 secs, 17,790,894,656 bytes)\n```\n\n\u9aa8\u8463\u54c1\u306e\u3088\u3046\u306a\u7206\u71b1MacBookAir \u306e\u521d\u53f7\u6a5f\u3067\u308210000 \u7d20\u6570\u53d6\u3063\u3066\u304f\u308b\u306e\u306b200sec \u306e\u30aa\u30fc\u30c0\u30fc\u3067\u3059\u3001\u307e\u3041\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3082\u3061\u308d\u3093Haskell \u3067\u9045\u5ef6\u8a55\u4fa1\u306b\u3088\u3063\u3066\u7121\u9650\u306e\u7d20\u6570\u5217\u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3088\u3001\u3057\u304b\u3082\u3053\u3093\u306a\u306b\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3067\uff01\u3068\u3044\u3046\u7528\u9014\u306b\u306f\u307e\u3041\u30d4\u30c3\u30bf\u30ea\u3067\u305d\u306e\u305f\u3081\u306b\u672c\u5bb6\u3067\u3082\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3001\u305d\u3046\u3044\u3046\u610f\u5473\u3067\u306f\u305f\u3057\u304b\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044\u3002\n\n\u3053\u308c\u306f\u7d20\u6570\u5019\u88dc\u306e\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306e\u65702 \u304c\u7d20\u6570\u3067\u3042\u308b\u3053\u3068\u3092\u4f7f\u3063\u30662 \u306e\u500d\u6570\u3092\u7be9\u306b\u304b\u3051\u3066\uff08\u3075\u308b\u3044\u304b\u3089\u843d\u3068\u3057\u3066\u3001\u306e\u65b9\u304c\u5408\u3063\u3066\u307e\u3059\u304b\u306d\uff1f\uff09\u305d\u306e\u7d50\u679c\u3092\u518d\u5e30\u7684\u306bsublist \u306e\u5148\u982d\u306e\u8981\u7d20\u3067\u7be9\u306b\u639b\u3051\u3066\u3044\u304d\u307e\u3059\u3002\n\u554f\u984c\u306f\n\n> That\u2019s 8 operations. When the false algorithm finds 7, it checks every number from 8 to 100, that\u2019s 92 operations!\n\n> \uff08\u7a1a\u62d9\u306a\u8a33\uff09\uff1a8 \u56de\u3067\u3044\u3044\u306e\u306b\u3001\u3053\u306e\u201d\u9593\u9055\u3063\u305f\u201d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u30687 \u3092\u898b\u3064\u3051\u305f\u3042\u3068\u30018 \u304b\u3089100 \u307e\u3067\u306e\u5168\u6570\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3093\u3060\u305c\uff1f92 \u56de\u3082\uff01\n\n\u7d30\u304b\u3044\u3068\u3053\u308d\u306f[\u3082\u3068\u306d\u305f](http://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html)\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3001\u30b7\u30f3\u30d7\u30eb\u3067\u7f8e\u3057\u3044\u30a2\u30cb\u30e1\u3082\u3042\u3063\u3066\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff01\n\u8981\u306f7 \u3092\u7d20\u6570\u3068\u3057\u3066\u898b\u3064\u3051\u305f\u3042\u3068\u6b21\u306e\u7d20\u6570\u304c11 \u3068\u308f\u304b\u3063\u305f\u77ac\u9593\u306b\u3001121 \u672a\u6e80\u306e\u6b8b\u3063\u305f\u6570\u305f\u3061\u306f\u3082\u3046\u7d20\u6570\u3068\u5206\u304b\u308b\u306e\u3067\u3082\u3046\u632f\u308b\u308f\u306a\u304f\u3066\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3001\u4f1d\u308f\u308a\u307e\u3059\u304b\u306d\uff1f\n\n\u3053\u306e\u7d20\u6734\u306a\u201d\u3042\u307e\u308a\u304c\u3042\u308b\u304b\u3069\u3046\u304b\uff1f\u201d\u5b9f\u88c5\u3067\u306f\u3075\u308b\u308f\u306a\u3044\u3067\u826f\u3044\u6570\u306e\u7be9\u306b\u304a\u305d\u3089\u304f\u5b9f\u884c\u6642\u9593\u306e\u5927\u534a\u3092\u53d6\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6642\u9593\u304c\u304b\u304b\u308b\u8a33\u3067\u3059\u3002\n\u3057\u304b\u3082\u632f\u308b\u308f\u306a\u304f\u3066\u826f\u3044\u6570\u306f\u7d20\u6570\u5019\u88dc\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u304f\u307b\u3069\u5927\u304d\u304f\u306a\u308b\u306e\u3067\u5927\u304d\u3044\u7d20\u6570\u304c\u307b\u3057\u3044\u6642\u3053\u305d\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3059\u3002\n\n# \u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\n[\u3053\u3053](http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#A_better_sieve) \u306ebetter sieve \u304c\u6b21\u306b\u306a\u308a\u307e\u3059\u3002\n\n```hs\n> merge :: (Ord a) => [a] -> [a] -> [a]\n> merge xx@(x:xs) yy@(y:ys) \n>   | x <  y = x : (merge xs yy)\n>   | x == y = x : (merge xs ys)\n>   | x >  y = y : (merge xx ys)\n>   | otherwise = error \":merge\"\n\n> diff :: (Ord a) => [a] -> [a] -> [a]\n> diff xx@(x:xs) yy@(y:ys)\n>   | x <  y = x : (diff xs yy)\n>   | x == y = diff xs ys\n>   | x >  y = diff xx ys\n>   | otherwise = error \":diff\"\n\n> primes2, nonPrimes2 :: [Integer]\n> primes2 = [2,3,5] ++ (diff [7,9..] nonPrimes2)\n> nonPrimes2 = foldr1 merge' $ map helper $ tail primes2\n>   where\n>     merge' (x:xs) ys = x : (merge xs ys)\n>     helper p = [n*p | n <- [p,p+2..]]\n\n  *Sieve> take 10000 primes2\n  (1.87 secs, 309,541,816 bytes)\n  *Sieve> take 100000 primes2\n  (49.66 secs, 7,585,213,056 bytes)\n```\n\n\u307e\u305a\u306f\uff08\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\uff09\u7121\u9650\u30ea\u30b9\u30c8\u305f\u3061\u306emerge \u3068diff \u3092\u95a2\u6570\u3068\u3057\u3066\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n[\u3082\u3068\u306d\u305f\u306e\u8a72\u5f53\u7b87\u6240](http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#A_better_sieve)\u3067\u306fcase of \u69cb\u6587\u3067\u66f8\u3044\u3066\u307e\u3057\u305f\u304c\u30ac\u30fc\u30c9\u306e\u65b9\u304c\u597d\u304d\u306a\u306e\u3067\u305d\u3053\u3060\u3051\u66f8\u304d\u306a\u304a\u3057\u3066\u3044\u307e\u3059\u3002\nHaskell \u306eOrd \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306ftotal order \u306a\u306e\u3067\u3001\u3044\u305a\u308c\u306e\u8981\u7d20\u3082\u30ac\u30fc\u30c9\u306e\u4e09\u5019\u88dc\u3067\u5834\u5408\u306f\u5c3d\u304d\u307e\u3059\u3002\n\u5f93\u3063\u3066\uff13\u3064\u3081\u3092otherwise \u3067\u66f8\u3044\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3001\u591a\u5206\u3002\n\n\u809d\u5fc3\u8981\u306eprimes2 \u305f\u3061\u304c\u3084\u306f\u308a\u30d8\u30d3\u30fc\u3067\u826f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u304b\u5287\u7684\u306b\u901f\u3044\u30b3\u30fc\u30c9\u306a\u306e\u306b\u30ad\u30fc\u3068\u306a\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u3093\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u306f\uff12\u3064\u306e\u7121\u9650\uff08\u9045\u5ef6\uff09\u30ea\u30b9\u30c8\u3092\u76f8\u4e92\u306b\u898b\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u500b\u4eba\u7684\u306b\u3053\u3046\u3044\u3046\u306e\u304c\u30d1\u30ba\u30eb\u306e\u7b54\u3048\u3063\u307d\u304f\u3066\u597d\u304d\u3067\u3059\u3002\n\u307e\u305a\u540d\u524d\u306e\u793a\u3059\u901a\u308a\u3001primes2 \u306f\u660e\u3089\u304b\u306a\u7d20\u6570\u305f\u3061[2,3,5] \u306b(\u6b8b\u308a\u306e\u7d20\u6570)\u3092\u3064\u306a\u3052\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e(\u6b8b\u308a\u306e\u7d20\u6570\uff09\u306f\u4e0a\u3067\u7528\u610f\u3057\u305fdiff \u3092\u3064\u304b\u3063\u30667 \u304b\u3089\u59cb\u307e\u308b\u5947\u6570\u5217\u304b\u3089\u3001\u975e\u7d20\u6570nonPrimes2 \u3092\u5f15\u3044\u3066\u4f5c\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u4e0a\u624b\u306bnonPrimes2 \u3092\u5b9a\u7fa9\u51fa\u6765\u308c\u3070\u51fa\u6765\u4e0a\u304c\u308a\u3067\u3059\u3001\u3068\u3066\u3082Haskell\u3002[^2]\n\n\u95a2\u6570\u9069\u7528\u306f\u57fa\u672c\u7684\u306b\u201d\u30ab\u30c3\u30b3\u201d\u306e\u5185\u5074[^6] \u304b\u3089\u898b\u3066\u3044\u304b\u306a\u304f\u3066\u306f\u884c\u3051\u307e\u305b\u3093\u3001\u306e\u3067tail primes2 \u304b\u3089\u3067\u3059\u3002\n\u3053\u308c\u306f[3,5..]\u3068\u3044\u3046\u611f\u3058\u3067\u59cb\u307e\u308b[^1]\u7d20\u6570\u5217\u3067\u3059\u3001\u3082\u3061\u308d\u3093\u9045\u5ef6\u30ea\u30b9\u30c8\u3002\n\u3053\u308c\u306bmap helper \u304c\u4f5c\u7528\u3057\u307e\u3059\u3001\u3059\u306a\u308f\u3061\n\n```hs\nmap helper $ tail primes2\n= map helper $ [3,5..]\n= [[3*3, 5*3, 7*3 ..], [5*5, 7*5, 9*5 ..] ..]\n```\n\n\u3068\u3044\u3046\u98a8\u306a\u7121\u9650\u30ea\u30b9\u30c8\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306a\u3093\u304b\u65e2\u8996\u611f\u3042\u308b\u306a\u3041\u3068\u601d\u3063\u305f\u3089[\u3053\u3061\u3089](http://itchyny.hatenablog.com/entry/2016/01/17/120000)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u65b9\u6cd5\u305d\u306e\u3082\u306e\u3067\u3059\u306d\u3001\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u3082\u4f3c\u3066\u307e\u3059\u304c\u3042\u3061\u3089\u306e\u307b\u3046\u304c\u7db2\u7f85\u7684\u3067\u826f\u3044\u8a18\u4e8b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u6700\u5f8c\u306b\n\n```hs\nfoldr1 merge'\n```\n\n\u3067\u3053\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306e\u7121\u9650\u30ea\u30b9\u30c8\u3092\u305f\u3060\u306e\u7121\u9650\u30ea\u30b9\u30c8\u306b\u6f70\u3057\u307e\u3059\u3001\u30d7\u30e9\u30a4\u30e0\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u306f\u6700\u521d\u306e\u6700\u521d\u306e\u8981\u7d20\u306e9 \u306f\u6f70\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u7f6e\u304b\u308c\u3066\u3001\u3042\u3068\u306f\u5404\u7121\u9650\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u5927\u304d\u3055\u9806\u306b\u6f70\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u306e\u969bp^2 \u3068\u3044\u3046\u5f62\u306e\u9805\u304c\u5fc5\u305a\u51fa\u3066\u304f\u308b\u308f\u3051\u3067\u3059\u306d\u3001\u3053\u3053\u304c\u30df\u30bd\u3002\n\u3053\u3046\u3084\u3063\u3066\u4f5c\u3063\u305f\u7121\u9650\u30ea\u30b9\u30c8\u3092[7,9..] \u3068\u3044\u3046\u5947\u6570\u5217\u304b\u3089\u53d6\u308a\u9664\u304d\u307e\u3059\u3001\u3053\u306ep \u306f\u7d20\u6570\u5217\u304b\u3089\u53d6\u3063\u3066\u304d\u3066\u3044\u308b\u306e\u3067\u3001\u3064\u307e\u308ap^2 \u3088\u308a\u5c0f\u3055\u304f\u3066\u304b\u3064[7,9..] \u304b\u3089\u306a\u308b\u5947\u6570\u5217\u306b\u6b8b\u3063\u3066\u3044\u308b\u6570\n\n```hs\n(diff [7,9..] nonPrimes2)\n```\n\n\u306f\u7d20\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f[2,3,5] \u3068\u5408\u308f\u305b\u3066\u8981\u3089\u306a\u3044\u3075\u308b\u3044\u3092\u3075\u308b\u3046\u624b\u9593\u304c\u7701\u3051\u3066\u3044\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff01\u304b\u3057\u3053\u3044\u3002\n\n# [Data.Set](https://downloads.haskell.org/~ghc/7.8.2/docs/html/libraries/containers-0.5.5.1/Data-Set.html) \u3092\u4f7f\u3063\u3066\n\u304d\u3061\u3093\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3057\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u304a\u305d\u3089\u304f\u5927\u304d\u306a\u7d20\u6570\u3092\u53d6\u3063\u3066\u304f\u308b\u969b\u306b\u306f\u4e0a\u8a18\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3088\u308a\u65e9\u3044\u3068\u601d\u308f\u308c\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3001[\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u697d\u3057\u3044\u3053\u3053](http://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html)\u304b\u3089\u3002\n\n\n```hs\n> import qualified Data.Set as PQ\n\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n>   where\n>     sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n>     sieve''' (x:xs) table\n>       | nextComposite == x = sieve''' xs (adjust x table)\n>       | otherwise          = x : sieve''' xs (insertprime x xs table)\n>       where\n>         (nextComposite, _) = PQ.findMin table\n>     adjust x table\n>       | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>       | otherwise = table\n>       where\n>         Just ((n, n':ns), newPQ) = PQ.minView table\n>     insertprime p xs = PQ.insert (p^2, map (*p) xs) \n\n  *Sieve> take 10000 primes3\n  (1.86 secs, 459,583,904 bytes)\n  *Sieve> take 100000 primes3\n  (32.94 secs, 6,977,828,472 bytes)\n```\n\n\u3055\u3066\u3001\u306a\u306b\u304b\u3089\u3084\u308b\u304b\u3068\u3044\u3046\u3068\u3084\u306f\u308a\u898b\u305f\u3053\u3068\u7121\u3044\u95a2\u6570\u9054\u306e\u578b\u306e\u78ba\u8a8d\u304b\u3089\u3067\u3059\u306d\n\n```hs\nPrelude Data.Set> :type empty \nempty :: Set a\nPrelude Data.Set> :type findMin\nfindMin :: Set a -> a\nPrelude Data.Set> :type insert\ninsert :: Ord a => a -> Set a -> Set a\nPrelude Data.Set> :type minView \nminView :: Set a -> Maybe (a, Set a)\n```\n\n\u306a\u308b\u307b\u3069\u3001\u898b\u305f\u307e\u307e\u306e\u540d\u524d\u306e\u901a\u308a\u307f\u305f\u3044\u3067\u3059\u306d\u3001\u306a\u304afindMin \u3068\u3044\u3046\u540d\u524d\u3084\u3001insert \u306a\u3069\u306e\u578b\u3092\u898b\u308b\u3068Ord \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u969b\u306f\u6607\u9806\u3067\u4e26\u3073\u66ff\u3048\u3066\u304f\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u5c11\u3005\u5b9f\u9a13\u3002\n\n```hs\nPrelude Data.Set> fromList [1,3..21]\nfromList [1,3,5,7,9,11,13,15,17,19,21]\nPrelude Data.Set> :t it\nit :: (Enum a, Num a, Ord a) => Set a\nPrelude Data.Set> insert 4 it\nfromList [1,3,4,5,7,9,11,13,15,17,19,21]\nPrelude Data.Set> let aSet = fromList [1,3..21]\nPrelude Data.Set> insert 8 aSet \nfromList [1,3,5,7,8,9,11,13,15,17,19,21]\nPrelude Data.Set> let bSet = fromList [10,9..1]\nPrelude Data.Set> bSet\nfromList [1,2,3,4,5,6,7,8,9,10]\nPrelude Data.Set> let cSet = fromList \"Haskell\"\nPrelude Data.Set> cSet \nfromList \"Haekls\"\nPrelude Data.Set> insert 'C' cSet\nfromList \"CHaekls\"\n```\n\n\u305d\u306e\u3088\u3046\u3067\u3059\u306d\u3002\n\u9014\u4e2d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u95a2\u6570\u9054\u306e\u578b\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306b\u66f8\u304d\u76f4\u3057\u3066ghci \u3067\u8aad\u3093\u3067\u578b\u63a8\u8ad6\u3057\u3066\u3082\u3089\u3044\u3001\u9069\u5f53\u306bInteger \u306b\u66f8\u304d\u76f4\u3057\u3066\u898b\u305f\u306e\u304c\u6b21\u306b\u306a\u308a\u307e\u3059\u3002\n\n```hs\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n> --  where\n> sieve'' :: [Integer] -> [Integer]\n> sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n\n> sieve''' :: [Integer] -> PQ.Set (Integer, [Integer]) -> [Integer]\n> sieve''' (x:xs) table\n>   | nextComposite == x = sieve''' xs (adjust x table)\n>   | otherwise          = x : sieve''' xs (insertprime x xs table)\n>   where\n>     (nextComposite, _) = PQ.findMin table\n\n> adjust :: Integer -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> adjust x table\n>   | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>   | otherwise = table\n>   where\n>     Just ((n, n':ns), newPQ) = PQ.minView table\n\n> insertprime :: Integer -> [Integer] -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> insertprime p xs = PQ.insert (p^2, map (*p) xs) \n```\n\n\u3053\u3053\u3067\u8b0e\u306a\u306e\u304c\n\n```hs\ntable :: PQ.Set (Integer, [Integer])\n```\n\n\u306a\u308b\u578b\u306e\u4eba\u305f\u3061\u3067\u3059\u3001\u3068\u3082\u3042\u308c\u30d5\u30ed\u30fc\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3068\u308a\u3042\u3048\u305a\u3002\n\n```hs\nsieve'' [3,5,7,9..]\n= sieve''' [5,7,9..] $ insertprime 3 [5,7,9..] PQ.empty\n= sieve''' [5,7,9..] $ PQ.insert (3^2, map (*3) [5,7,9..]) PQ.empty\n= sieve''' [5,7,9..] $ PQ.insert (9, [15, 21, 27..]) PQ.empty\n= sieve''' [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n```\n\n\u3055\u3066\u3001\u3053\u308c\u304csieve''' \u306e\u30ac\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\u3001where \u3067\u547c\u3070\u308c\u305ffindMin \u306f\n\n```hs\n*Sieve> PQ.findMin $ PQ.fromList [(9,[15,21,27])]\n(9,[15,21,27])\n```\n\n\u3068\u306a\u308a[^7]\u3001nextComposite \u306f9 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u307e\u3059\u3002\n\u5f93\u3063\u3066otherwise \u306b\u30d2\u30c3\u30c8\u3059\u308b\u306e\u3067\n\n```hs\nsieve'' [3,5,7,9..]\n= 3 : sieve''' [5,7,9..] $ insertprime 3 [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n= 3 : sieve''' [5,7,9..] $ PQ.insert (9, [15,21,27..]) PQ.fromList [(9,[15,21,27..])]\n= 3 : sieve''' [5,7,9..] PQ.fromList [(9,[15,21,27..])]\n```\n\n\u3053\u3053\u3067\u5c11\u3005\u4e0d\u5b89\u306a\u306e\u306f\u7121\u9650\u30ea\u30b9\u30c8\u3067\u3082insert \u304c\u30c0\u30d6\u30ea\u306b\u5bfe\u3057\u3066\u3082\u6a5f\u80fd\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u304c\u307e\u3041\u3046\u307e\u304f\u3044\u304f\u306e\u3067\u3057\u3087\u3046\u306d\u3001\u3061\u306a\u307f\u306b\u6709\u9650\u30ea\u30b9\u30c8\u306a\u3089\u3070\u5927\u4e08\u592b\u3067\u3057\u305f\u3002\n\n```hs\n*Sieve> PQ.insert (9, [15,21,27]) $ PQ.fromList [(9,[15,21,27])]\nPQ.fromList [(9,[15,21,27])]\n```\n\n\u3053\u306e\u307e\u307e\u30ac\u30fc\u30c9\u306e\u3072\u3068\u3064\u76ee\u306e\u6761\u4ef6\u306b\u30d2\u30c3\u30c8\u3059\u308b\u307e\u3067\u7d9a\u304d\u307e\u3059\u3001\u3064\u307e\u308a9 \u304c\u843d\u3061\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7684\u306b\u306f\u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\n9 \u306b\u30d2\u30c3\u30c8\u3059\u308b\u3068\u3053\u3093\u3069\u306fadjust \u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n```hs\nsieve'' [3,5,7,9..]\n= 3:5:7: sieve'' [11,13..] $ adjust 9 PQ.fromList [(9,[15,21,27..])]\n= 3:5:7: sieve'' [11,13..] $ adjust 9 PQ.fromList [(9,[15,21,27..])]\n```\n\n\u3053\u3053\u3067adjust \u306ewhere \u3067\u306f\n\n```hs\nJust ((n, n':ns), newPQ) \n= PQ.minView PQ.fromList [(9,[15,21,27..])]\n= Just ((9,[15,21,27..]),PQ.fromList [])\n```\n\n\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u307e\u3059\u3001\u307e\u3041\u3053\u3053\u3067\u3082\u672c\u5f53\u306f\u7121\u9650\u5217\u3067\u3059\u306d\u3001\u6b62\u307e\u308a\u307e\u305b\u3093\u3001\u6709\u9650\u30ea\u30b9\u30c8\u3067\u8a66\u3057\u305f\u306e\u304c\u6b21\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n```hs\n*Sieve> PQ.minView $ PQ.fromList [(9,[15,21,27])]\nJust ((9,[15,21,27]), PQ.fromList [])\n```\n\nn \u3082x \u30829 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067adjust \u306e\u30ac\u30fc\u30c9\u3082\u4e00\u3064\u76ee\u306b\u30d2\u30c3\u30c8\u3057\u307e\u3059\u3001\u3053\u308c\u304c\u518d\u5e30\u7684\u306badjust \u3092\u307e\u305f\u8aad\u3093\u3067\u4eca\u5ea6\u306f15 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fn' \u306e\u304a\u304b\u3052\u3067otherwise \u306b\u30d2\u30c3\u30c8\u3057\u3066table \u304c\u6b21\u306e\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\n\n```hs\nPQ.insert (15, [21,27..]) PQ.fromList []\n= PQ.fromList [(15, [21,27..])]\n```\n\n\u3088\u3063\u3066\u6b21\u306f13 \u304c\u7d20\u6570\u3068\u5224\u5b9a\u3055\u308c\u3066\u3001\u3068\u7d9a\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u3055\u3044\u3054\u306b\n\u6b63\u76f4Data.Set \u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u306f\u59cb\u3081\u306e\u5e7e\u3064\u304b\u3092\u8ffd\u3046\u3060\u3051\u3067\u7406\u89e3\u3068\u8a00\u3046\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001\u306a\u304b\u306a\u304b\u697d\u3057\u304b\u3063\u305f\u3067\u3059\u306d\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3084\u306f\u308a\u7121\u9650\u30ea\u30b9\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u4e8c\u3064\u76ee\u304c\u30d0\u30e9\u30f3\u30b9\u304c\u826f\u3044\u6c17\u304c\u3057\u3066\u597d\u307f\u3067\u3059\u306d\u3002\n\n\n# \u30b3\u30fc\u30c9\u5168\u666f\n\u4ee5\u4e0b\u304c\n\n```Sieve.lhs\n\n> module Sieve where\n> import qualified Data.Set as PQ\n\n> primes0 :: [Integer]\n> primes0 = naiveSieve (2:[3,5..])\n>   where \n>     naiveSieve (p:xs) = p : naiveSieve [x | x <- xs, x `mod` p /= 0]\n\n  *Sieve> take 10000 primes0\n  .. ,104729]\n  (223.14 secs, 17,790,894,656 bytes)\n\n> primes1 :: [Integer]\n> primes1 = 2: sieve' [3] [5,7..]\n\n> sieve' :: [Integer] -> [Integer] -> [Integer]\n> sieve' (p:ps) xs = p: sieve' (ps ++ ps') [x | x <- qs, x `mod` p /= 0]\n>   where \n>     (ps', qs) = span (<p^2) xs\n\n  *Sieve> take 10000 primes1\n  (10.46 secs, 4,485,491,952 bytes)\n\n  From \n  http://en.literateprograms.org/Sieve_of_Eratosthenes_(Haskell)#chunk%20def:primes_better\n\n> merge :: (Ord a) => [a] -> [a] -> [a]\n> merge xx@(x:xs) yy@(y:ys) \n>   | x <  y = x : (merge xs yy)\n>   | x == y = x : (merge xs ys)\n>   | x >  y = y : (merge xx ys)\n>   | otherwise = error \":merge\"\n\n> diff :: (Ord a) => [a] -> [a] -> [a]\n> diff xx@(x:xs) yy@(y:ys)\n>   | x <  y = x : (diff xs yy)\n>   | x == y = diff xs ys\n>   | x >  y = diff xx ys\n>   | otherwise = error \":diff\"\n\n> primes2, nonPrimes2 :: [Integer]\n> primes2 = [2,3,5] ++ (diff [7,9..] nonPrimes2)\n> nonPrimes2 = foldr1 merge' $ map helper $ tail primes2\n>   where\n>     merge' (x:xs) ys = x : (merge xs ys)\n>     helper p = [n*p | n <- [p,p+2..]]\n\n  *Sieve> take 10000 primes2\n  (1.87 secs, 309,541,816 bytes)\n  *Sieve> take 100000 primes2\n  (49.66 secs, 7,585,213,056 bytes)\n\n  From\n  http://www.garrisonjensen.com/2015/05/13/haskell-programs-are-lies.html\n\n> primes3 :: [Integer]\n> primes3 = 2: sieve'' [3,5..]\n> --  where\n> sieve'' :: [Integer] -> [Integer]\n> sieve'' (x:xs) = sieve''' xs (insertprime x xs PQ.empty)\n> sieve''' :: [Integer] -> PQ.Set (Integer, [Integer]) -> [Integer]\n> sieve''' (x:xs) table\n>   | nextComposite == x = sieve''' xs (adjust x table)\n>   | otherwise          = x : sieve''' xs (insertprime x xs table)\n>   where\n>     (nextComposite, _) = PQ.findMin table\n> adjust :: Integer -> PQ.Set (Integer, [Integer]) -> PQ.Set (Integer, [Integer])\n> adjust x table\n>   | n == x = adjust x (PQ.insert (n', ns) newPQ)\n>   | otherwise = table\n>   where\n>     Just ((n, n':ns), newPQ) = PQ.minView table\n> insertprime p xs = PQ.insert (p^2, map (*p) xs) \n\n  *Sieve> take 10000 primes3\n  (1.86 secs, 459,583,904 bytes)\n  *Sieve> take 100000 primes3\n  (32.94 secs, 6,977,828,472 bytes)\n```\n\n[^1]: \u3053\u308c\u306f\u672c\u5f53\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3001\u3068\u3044\u3046\u306e\u3082Haskell \u306e\u69cb\u6587\u7cd6\u8863\u3067\u306f[3,5..] == [3,5,7,9..]\u3068\u306a\u3063\u3066\u7d20\u6570\u5217\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u304c\u3001\u79c1\u306e\u8868\u73fe\u529b\u3067\u306f\u3053\u3053\u3067\u306f\u3053\u3046\u66f8\u304f\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a3 \u30685 \u306f\u8981\u7d20\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3001\u3068\u3044\u3046\u304f\u3089\u3044\u306e\u610f\u5473\u3067\u3059\u3002\n\n[^2]: \u3059\u306a\u308f\u3061\u624b\u7d9a\u304d\u3067\u306f\u306a\u304f\u5b9a\u7fa9\u3092\u66f8\u3051\u3070\u3088\u3044\u3001\u3068\u3044\u3046\u610f\u5473\u3067\u3067\u3059\u3002\n\n[^3]: \u3053\u3053\u3067\u306f\u672c\u7269\u306e\u7be9\u306e\u5b9a\u7fa9\u3092\u3061\u3083\u3093\u3068\u3057\u3066\u306a\u3044\u306e\u3067\u3001\u6982\u8aac\u3060\u3051\u3067\u3059\u304c\u3002\u3068\u3044\u3046\u304b\u3042\u307e\u308a\u306b\u9045\u304f\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u3093\u3068\u3044\u3046\u306e\u304c\u5b9f\u969b\u306e\u3068\u3053\u308d\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\u3002\n\n[^4]: Haskell \u3067\u79c1\u306e\u3088\u3046\u306a\u8003\u3048\u7121\u3057\u304c\u7d20\u6734\u306b\u5b9f\u88c5\u3092\u8003\u3048\u308b\u3068\u52d5\u304f\u3051\u3069\u30ea\u30bd\u30fc\u30b9\u3092\u98df\u3046\u30b3\u30fc\u30c9\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3001\u307e\u3041\u305d\u308c\u3067\u3082\u52d5\u3051\u308b\u30b3\u30fc\u30c9\u304c\u304b\u3051\u308b\u304b\u3089Haskell \u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u304c\u3002\n\n[^5]: \u79c1\u306f\u6570\u5b66\u8005\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u6570\u5b66\u8005\u306e\u5074\u3001\u3068\u3044\u3046\u7a0b\u5ea6\u3067\u3057\u3087\u3046\u304b\uff1f\u307e\u3041\u3042\u304f\u307e\u3067\u30e6\u30fc\u30b6\u30fc\u3067\u3059\u3002\n\n[^6]: \u3082\u3061\u308d\u3093($) \u3082Haskell \u3067\u306f\u62ec\u5f27\u3067\u3059\u3002\n\n[^7]: \u3082\u3061\u308d\u3093\u672c\u5f53\u306f\u7121\u9650\u5217\u3067\u8a55\u4fa1\u3057\u3066\u307f\u305f\u3089\u3082\u3061\u308d\u3093\u6b62\u307e\u308a\u307e\u305b\u3093\u304c\u3001\u9045\u5ef6\u8a55\u4fa1\u306e\u304a\u304b\u3052\u3067nextComposite \u304c9 \u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u3089\u3042\u3068\u306f\u4f55\u3082\u56f0\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n", "tags": ["Haskell", "\u7d20\u6570", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}