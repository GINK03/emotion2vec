{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\ncocos2d-x3\u7cfb\u3067virtualPad(\u30d7\u30cb\u30b3\u30f3\u3068\u3082\u8a00\u3046\u306e\u304b\u306a\uff1f)\u3092\u4f5c\u6210\u3059\u308b\u3060\u3051\u306e\u8a18\u4e8b\u3067\u3059\u3002\u6b63\u76f4virtualPad\u306e\u5b9f\u88c5\u306f\u5e7e\u3064\u304b\u8a18\u4e8b\u304c\u3042\u3063\u3066\u3001\u305d\u308c\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u30013\u7cfb\u3067\u5b9f\u88c5\u3057\u3066\u308b\u8a18\u4e8b\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u66f8\u304d\u3068\u3057\u3066\u66f8\u304d\u307e\u3059\u3002cocos2d-x\u521d\u5fc3\u8005\u306e\u65b9\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u5b8c\u6210\u4e88\u60f3\u56f3\n\u5b8c\u6210\u4e88\u60f3\u56f3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u306f\u3001\u30ec\u30a4\u30e4\u30fc\u3068\u3057\u3066\u4f5c\u6210\u3057\u3001\u89aa\u306e\u30b7\u30fc\u30f3\u3067\u30bf\u30c3\u30c1\u60c5\u5831\uff08touchid)\u3092\u6e21\u3057\u3066\u5229\u7528\u3059\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30d1\u30c3\u30c9\u306e\u80cc\u666f\u306f\u3053\u308c\n\n\u30d1\u30c3\u30c9\u306e\u30d4\u30c3\u30af\u90e8\u5206\u306f\u3053\u308c\n\n\n\u624b\u9806\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308b\u3060\u3051\u3067\u3067\u304d\u307e\u3059\u3002\n\nHelloWorld.h\n\n#ifndef __HELLOWORLD_SCENE_H__\n#define __HELLOWORLD_SCENE_H__\n\n#include \"cocos2d.h\"\n#include \"VirtualPad.hpp\"\nclass HelloWorld : public cocos2d::Layer\n{\nprivate:\n    HelloWorld();\n    virtual ~HelloWorld();\npublic:\n    // there's no 'id' in cpp, so we recommend returning the class instance pointer\n    static cocos2d::Scene* createScene();\n\n    // Here's a difference. Method 'init' in cocos2d-x returns bool, instead of returning 'id' in cocos2d-iphone\n    virtual bool init();\n\n    // a selector callback\n    void menuCloseCallback(cocos2d::Ref* pSender);\n\n    /* \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc */\n    void onTouchesBegan(const std::vector<Touch*>& touches, Event *unused_event);\n    void onTouchesMoved(const std::vector<Touch*>& touches, Event *unused_event);\n    void onTouchesEnded(const std::vector<Touch*>& touches, Event *unused_event);\n\n\n    /* VirutalPad\u306e\u751f\u6210 */\n    CC_SYNTHESIZE_RETAIN(VirtualPad *, _virPad, VirtualPad);\n\n    // implement the \"static create()\" method manually\n    CREATE_FUNC(HelloWorld);\n};\n\n#endif // __HELLOWORLD_SCENE_H__\n\n\n\n\n\nHelloWorld.cpp\n\n#include \"HelloWorldScene.h\"\n\nUSING_NS_CC;\n\nHelloWorld::HelloWorld()\n:_virPad(nullptr)\n{\n}\n\nHelloWorld::~HelloWorld(){\n    CC_SAFE_RELEASE_NULL(_virPad);\n}\n\n\nScene* HelloWorld::createScene()\n{\n    // 'scene' is an autorelease object\n    auto scene = Scene::create();\n\n    // 'layer' is an autorelease object\n    auto layer = HelloWorld::create();\n\n    // add layer as a child to scene\n    scene->addChild(layer);\n\n    // return the scene\n    return scene;\n}\n\n// on \"init\" you need to initialize your instance\nbool HelloWorld::init()\n{\n    //////////////////////////////\n    // 1. super init first\n    if ( !Layer::init() )\n    {\n        return false;\n    }\n\n    FileUtils::getInstance()->addSearchPath(\"res\");\n\n    /* \u30de\u30eb\u30c1\u30bf\u30c3\u30d7\u30ea\u30b9\u30ca\u30fc\u306e\u8a2d\u7f6e */\n    auto listener = EventListenerTouchAllAtOnce::create();\n    listener->setEnabled(true);\n    listener->onTouchesBegan = CC_CALLBACK_2(HelloWorld::onTouchesBegan, this);\n    listener->onTouchesMoved = CC_CALLBACK_2(HelloWorld::onTouchesMoved, this);\n    listener->onTouchesEnded = CC_CALLBACK_2(HelloWorld::onTouchesEnded, this);\n    this->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);\n\n    Vec2 origin = Director::getInstance()->getVisibleOrigin();\n\n\n    /* \u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u306e\u5b9f\u88c5 */\n    auto virPad = VirtualPad::create();\n    this->addChild(virPad);\n    this->setVirtualPad(virPad);\n\n    return true;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u958b\u59cb\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesBegan(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n\n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n\n        /* VirtualPad\u306f\u3001\u6700\u521d\u306f\u753b\u50cf\u306e\u4e2d\u3092\u30bf\u30c3\u30c1\u3057\u306a\u3044\u3068\u53cd\u5fdc\u3057\u306a\u3044*/\n                if(_virPad->isTouchPad(location)){\n\n                    //\u30d1\u30c3\u30c9\u306e\u958b\u59cb\n                    _virPad->startPad((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n\n                    //\u30d1\u30c3\u30c9\u306e\u66f4\u65b0\n                    _virPad->update((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n                }\n        iterator++;\n    }\n    return;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u79fb\u52d5\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesMoved(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n\n        /*\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u79fb\u52d5\u4e2d*/\n        _virPad->update((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n\n        iterator++;\n    }\n    return;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u7d42\u4e86\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesEnded(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n        /* \u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u96e2\u3059 */\n        _virPad->endPad(touch->getID());\n        iterator++;\n    }\n    return;\n}\n\n\n\n\n\n\n\n\nVirtualPad.h\n\n#ifndef CocosProjectTest1_VirtualPad_hpp\n#define CocosProjectTest1_VirtualPad_hpp\n\n#include <stdio.h>\n#include \"cocos2d.h\"\nusing namespace cocos2d;\n\n/**\n *VirtualPad\u30af\u30e9\u30b9.\n */\nclass VirtualPad :public::Layer {\nprivate:\n    /*\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf*/\n    VirtualPad();\n    /*\u30c7\u30b9\u30c8\u30e9\u30af\u30bf*/\n    ~VirtualPad();\n    //Pad\u4e0b\u5730\n    Sprite* padBack;\n    //Pad\u64cd\u4f5c\u90e8\u5206\n    Sprite* padFront;\n\n    //\u8868\u793a\u30d5\u30e9\u30b0\n    bool touchFlag;\n    //Pad\u306e\u521d\u671f\u4f4d\u7f6e\n    int init_x;\n    int init_y;\n    //\u73fe\u5728\u4f4d\u7f6e\n    int now_x;\n    int now_y;\n    //\u79fb\u52d5\u91cf\n    int d_x;\n    int d_y;\n    //\u79fb\u52d5sin,cos\n    float way_x;\n    float way_y;\n    //\u6700\u5927\u534a\u5f84\n    int max_r;\n    //\u73fe\u5728\u306e\u534a\u5f84\n    int now_r;\n    //\u89d2\u5ea6\n    float angle;\n    //\u89d2\u5ea6\u30c6\u30fc\u30d6\u30eb\n    float fsin[360];\n    float fcos[360];\n    //\u30bf\u30c3\u30c1ID\n    int touchID;\n\npublic:\n\n    void update(float dt)override;\n    CREATE_FUNC(VirtualPad);\n    bool init() override;\n\n    //\u30d1\u30c3\u30c9\u306e\u958b\u59cb\u4f4d\u7f6e\n    void startPad(int x,int y,int touch_id);\n\n    //\u30d1\u30c3\u30c9\u306e\u7d42\u4e86\u4f4d\u7f6e\n    void endPad(int touch_id);\n\n    //\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u3066\u3044\u308b\u72b6\u614b\u304b\uff1f\n    bool isTouching();\n\n    //\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u305f\u304b\uff1f\n    bool isTouchPad(Vec2 location);\n\n    //\u89d2\u5ea6\u306e\u53d6\u5f97\n    float getCosX();\n    float getSinY();\n    //\u65b9\u5411\u306e\u53d6\u5f97\n    int get4Way();\n    int get8Way();\n\n    //\u30d1\u30c3\u30c9\u304b\u3089\u30b9\u30d4\u30fc\u30c9\u306e\u53d6\u5f97\n    int getSpeed();\n\n    void update(int x,int y,int touch_id);\n};\n\n#endif /* VirtualPad_hpp */\n\n\n\n\n\n\nVirtualPad.h\n\n\n#include \"VirtualPad.hpp\"\n\n#define VIRTUAL_PAD_MAX_RATE 150\n#define VIRTUAL_PAD_MIN_RATE 10\n\n#define VIRTUAL_PAD_POSITION_RATE_X 1/2\n#define VIRTUAL_PAD_POSITION_RATE_Y 22/100\n\n/**\n *\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n */\nVirtualPad::VirtualPad(){\n}\n\n/**\n *\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n */\nVirtualPad::~VirtualPad(){\n}\n\n\nbool VirtualPad::init(){\n\n    if ( !Layer::init() )\n    {\n        return false;\n    }\n    //\u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97\n    Size size = Director::getInstance()->getVisibleSize();\n\n    //\u753b\u50cf\u306e\u751f\u6210\uff08Pad\u4e0b\u5730\uff09\n    padBack = Sprite::create(\"virtualpad/virtualpad_bg.png\");\n    padBack->setAnchorPoint(Vec2::ANCHOR_MIDDLE);\n    padBack->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n\n    /* \u753b\u50cf\u306e\u751f\u6210\uff08Pad\u64cd\u4f5c\u90e8\u5206\uff09 */\n    padFront = Sprite::create(\"virtualpad/virtualpad_pad.png\");\n    padFront->setAnchorPoint(Point(0.5f,0.5f));\n    padFront->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n\n    /* \u30d1\u30c3\u30c9\u306e\u521d\u671f\u4f4d\u7f6e */\n    init_x = padFront->getPositionX();\n    init_y = padFront->getPositionY();\n\n    //\u30ec\u30a4\u30e4\u30fc\u306b\u8ffd\u52a0\n    this->addChild(padBack,10000);\n    this->addChild(padFront,10001);\n\n    //\u6700\u5927\u534a\u5f84\n    max_r = VIRTUAL_PAD_MAX_RATE ;\n\n    //\u89d2\u5ea6\u6bce\u306ex,y\u4f4d\u7f6e\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n    for(int i=0;i<360;i++){\n        fsin[i]=(float)sin(i*3.1415926535/180);\n        fcos[i]=(float)cos(i*3.1415926535/180);\n    }\n\n    return true;\n}\n/**\n * 1f\u3054\u3068\u306b\u884c\u3046\u51e6\u7406\n */\nvoid VirtualPad::update(float dt){\n\n}\n\n/**\n *Pad\u306e\u8868\u793a\u958b\u59cb\n *@param x\n *@param y\n */\nvoid VirtualPad::startPad(int x,int y,int touch_id){    \n    touchFlag = true;\n    now_x = x;\n    now_y = y;\n\n    touchID = touch_id;\n}\n\n/**\n *Pad\u306e\u64cd\u4f5c\u7d42\u4e86\n */\nvoid VirtualPad::endPad(int touch_id){\n    if(touch_id != touchID)return;\n\n    //touchid\u306e\u53d6\u5f97\n    touchID = touch_id;\n\n    /* \u30bf\u30c3\u30c1\u3092\u96e2\u3057\u305f\u3089\u3001\u30d1\u30c3\u30c9\u306e\u3064\u307e\u307f\u4f4d\u7f6e\u306b\u623b\u3059 */\n    Size size = Director::getInstance()->getVisibleSize();\n    padFront->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n\n    /* \u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316 */\n    d_x = 0;\n    d_y = 0;\n    angle = 0;\n    way_x = 0;\n    way_y = 0;\n    now_r = 0;\n}\n\n/**\n *Pad\u306e\u8868\u793a\u66f4\u65b0\n *@param x\n *@param y\n */\nvoid VirtualPad::update(int x,int y,int touch_id){\n    //    if(drawFlag == false)return;\n    if(touch_id != touchID)return;\n    //\u79fb\u52d5\u91cf\n    d_x = x-init_x;\n    d_y = y-init_y;\n\n    //\u89d2\u5ea6\n    angle = atan2f(d_y, d_x);\n    //cos,sin\n    way_x = cosf(angle);\n    way_y = sinf(angle);\n    now_r =sqrt(d_x*d_x + d_y*d_y);\n    //\u5186\u79fb\u52d5\u7bc4\u56f2\u5916\u304b\n    if ( now_r > max_r) {\n        //\u5236\u9650\u5f8c\u306e\u30dc\u30bf\u30f3\u4f4d\u7f6e\n        x = (int)(init_x + max_r * cos(angle));\n        y = (int)(init_y + max_r * sin(angle));\n        now_r = max_r;\n    }\n    //\u4f4d\u7f6e\u3092\u30bb\u30c3\u30c8\n    now_x = x;\n    now_y = y;\n    padFront->setPosition(Point(now_x, now_y));\n\n}\n\n/**\n *cos\u53d6\u5f97\n *@return \u30d1\u30c3\u30c9\u306e\u89d2\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u305fcos\n */\nfloat VirtualPad::getCosX(){\n    return way_x;\n}\n\n/**\n *sin\u53d6\u5f97\n *@return \u30d1\u30c3\u30c9\u306e\u89d2\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u305fsin\n */\nfloat VirtualPad::getSinY(){\n    return way_y;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u3057\u305f\u7b87\u6240\u304b\u3089\u3001\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u305f\u304b\uff1f\u3092\u5224\u5225\n *@param location \u30bf\u30c3\u30c1\u3057\u305f\u7b87\u6240\n *@return drawFlag true\u306a\u3089\u89e6\u3063\u305f\n */\nbool VirtualPad::isTouchPad(Vec2 location){\n    auto padBackRect =  this->padBack->getBoundingBox();\n\n    //\u3053\u3053\u3067\u306f\u3001\u30d1\u30c3\u30c9\u306e\u4e0b\u5730\u306e\u7bc4\u56f2\u5185\u3092\u30bf\u30c3\u30c1\u3057\u305f\u306a\u3089\u30d1\u30c3\u30c9\u3092\u30bf\u30c3\u30c1\u3057\u305f\u3068\u5224\u5225\n    if(padBackRect.containsPoint(location)){\n        return true;\n    }\n    return false;\n}\n\n\n/**\n *\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u306e\u53d6\u5f97\n *@return drawFlag true\u306a\u3089\u8868\u793a\u4e2d\n */\nbool VirtualPad::isTouching(){\n    return touchFlag;\n}\n\n/**\n *\u65b9\u5411\u53d6\u5f97\n *@return int 4\u65b9\u5411\u306e\u3046\u3061\u3069\u306e\u65b9\u5411\u304b\u3092\u8fd4\u3059.\n *\u65b9\u5411\u306f\u2b07\u5185\u5bb9\u3067\u8868\u3059 5\u304c\u4e2d\u5fc3\n *789\n *456\n *123\n */\nint VirtualPad::get4Way(){\n\n    //\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u304b\n    if(d_x*d_x + d_y*d_y< VIRTUAL_PAD_MIN_RATE*VIRTUAL_PAD_MIN_RATE){\n        return 5;\n    }\n    //\u4e0a\n    if(way_x<=fcos[45]&&way_x>=fcos[135]&&way_y>0){\n        return 8;\n    }\n    //\u4e0b\n    if(way_x<=fcos[315]&&way_x>=fcos[225]&&way_y<0){\n        return 2;\n    }\n    //\u5de6\n    if(way_y<=fsin[135]&&way_y>=fsin[225]&&way_x<0){\n        return 4;\n    }\n    //\u53f3\n    if(way_y<=fsin[45]&&way_y>=fsin[315]&&way_x>0){\n        return 6;\n    }\n    return -1;\n}\n\n/**\n *\u65b9\u5411\u53d6\u5f97\n *@return int 8\u65b9\u5411\u306e\u3046\u3061\u3069\u306e\u65b9\u5411\u304b\u3092\u8fd4\u3059.\n *\u65b9\u5411\u306f\u2b07\u5185\u5bb9\u3067\u8868\u3059 5\u304c\u4e2d\u5fc3\n *789\n *456\n *123\n */\nint VirtualPad::get8Way(){\n    //\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u304b\n    if(d_x*d_x + d_y*d_y< VIRTUAL_PAD_MIN_RATE*VIRTUAL_PAD_MIN_RATE){\n        return 5;\n    }\n    //\u53f3\u4e0a\n    if(way_x<=fcos[22]&&way_x>=fcos[68]&&way_y>0){\n        return 9;\n    }\n    //\u4e0a\n    if(way_x<=fcos[68]&&way_x>=fcos[112]&&way_y>0){\n        return 8;\n    }\n    //\u5de6\u4e0a\n    if(way_x<=fcos[112]&&way_x>=fcos[158]&&way_y>0){\n        return 7;\n    }\n    //\u53f3\u4e0b\n    if(way_x<=fcos[338]&&way_x>=fcos[292]&&way_y<0){\n        return 3;\n    }\n    //\u4e0b\n    if(way_x<=fcos[292]&&way_x>=fcos[248]&&way_y<0){\n        return 2;\n    }\n    //\u5de6\u4e0b\n    if(way_x<=fcos[248]&&way_x>=fcos[202]&&way_y<0){\n        return 1;\n    }\n    //\u5de6\n    if(way_y<=fsin[158]&&way_y>=fsin[202]&&way_x<0){\n        return 4;\n    }\n    //\u53f3\n    if(way_y<=fsin[22]&&way_y>=fsin[338]&&way_x>0){\n        return 6;\n    }\n    return -1;\n}\n/**\n *\u30d1\u30c3\u30c9\u306e\u79fb\u52d5\u91cf\u304b\u3089\u30b9\u30d4\u30fc\u30c9\u3092\u8fd4\u3059\n *@return \u30b9\u30d4\u30fc\u30c9\u3092\u8fd4\u3059\n */\nint VirtualPad::getSpeed(){\n    /* \u5ea7\u6a19\u7528 */\n    if(now_r >= 150){\n        return 8;\n    }\n\n    if(now_r >= 110){\n        return 6;\n    }\n\n    if(now_r >= 70){\n        return 4;\n    }\n\n    if(now_r >= 30){\n        return 2;\n    }\n\n    if(now_r >= 0){\n        return 0;\n    }\n    ////     \u3053\u3053\u306b\u6765\u308b\u3053\u3068\u306f\u306a\u3044\u306f\u305a\n    //    CCLOG(\"Errorlog in VirtualPad\");\n    return now_r;\n}\n\n\n\n\n\u307e\u3068\u3081\n\u4e00\u5fdc\u3001\u30de\u30eb\u30c1\u30bf\u30c3\u30d7\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff08\u691c\u8a3c\u306f\u3057\u3066\u307e\u305b\u3093\uff09\u3002\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u4f7f\u3046\u30b2\u30fc\u30e0\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8ab0\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u3001\u3001\u3001\n\n\u53c2\u8003\nhttp://gwi.blog.shinobi.jp/cocos2d-x/cocos2d-x%20%E3%83%90%E3%83%BC%E3%83%81%E3%83%A3%E3%83%AB%E3%83%91%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A3%85\n# \u6982\u8981\ncocos2d-x3\u7cfb\u3067virtualPad(\u30d7\u30cb\u30b3\u30f3\u3068\u3082\u8a00\u3046\u306e\u304b\u306a\uff1f)\u3092\u4f5c\u6210\u3059\u308b\u3060\u3051\u306e\u8a18\u4e8b\u3067\u3059\u3002\u6b63\u76f4virtualPad\u306e\u5b9f\u88c5\u306f\u5e7e\u3064\u304b\u8a18\u4e8b\u304c\u3042\u3063\u3066\u3001\u305d\u308c\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u30013\u7cfb\u3067\u5b9f\u88c5\u3057\u3066\u308b\u8a18\u4e8b\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u66f8\u304d\u3068\u3057\u3066\u66f8\u304d\u307e\u3059\u3002cocos2d-x\u521d\u5fc3\u8005\u306e\u65b9\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\n# \u5b8c\u6210\u4e88\u60f3\u56f3\n\u5b8c\u6210\u4e88\u60f3\u56f3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u306f\u3001\u30ec\u30a4\u30e4\u30fc\u3068\u3057\u3066\u4f5c\u6210\u3057\u3001\u89aa\u306e\u30b7\u30fc\u30f3\u3067\u30bf\u30c3\u30c1\u60c5\u5831\uff08touchid)\u3092\u6e21\u3057\u3066\u5229\u7528\u3059\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-01-12 22.36.27.png](https://qiita-image-store.s3.amazonaws.com/0/92552/8e7e4494-f0d5-6c55-f819-60002ccd9659.png)\n\n\u30d1\u30c3\u30c9\u306e\u80cc\u666f\u306f\u3053\u308c\n![virtualpad_bg.png](https://qiita-image-store.s3.amazonaws.com/0/92552/2b9ff627-9b16-127d-9a89-e4df70eae0eb.png)\n\n\u30d1\u30c3\u30c9\u306e\u30d4\u30c3\u30af\u90e8\u5206\u306f\u3053\u308c\n![virtualpad_pad.png](https://qiita-image-store.s3.amazonaws.com/0/92552/2c549ff3-f104-cde8-83c5-22302435c16a.png)\n\n# \u624b\u9806\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308b\u3060\u3051\u3067\u3067\u304d\u307e\u3059\u3002\n\n```cpp:HelloWorld.h\n\n#ifndef __HELLOWORLD_SCENE_H__\n#define __HELLOWORLD_SCENE_H__\n\n#include \"cocos2d.h\"\n#include \"VirtualPad.hpp\"\nclass HelloWorld : public cocos2d::Layer\n{\nprivate:\n    HelloWorld();\n    virtual ~HelloWorld();\npublic:\n    // there's no 'id' in cpp, so we recommend returning the class instance pointer\n    static cocos2d::Scene* createScene();\n    \n    // Here's a difference. Method 'init' in cocos2d-x returns bool, instead of returning 'id' in cocos2d-iphone\n    virtual bool init();\n    \n    // a selector callback\n    void menuCloseCallback(cocos2d::Ref* pSender);\n    \n    /* \u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc */\n    void onTouchesBegan(const std::vector<Touch*>& touches, Event *unused_event);\n    void onTouchesMoved(const std::vector<Touch*>& touches, Event *unused_event);\n    void onTouchesEnded(const std::vector<Touch*>& touches, Event *unused_event);\n    \n    \n    /* VirutalPad\u306e\u751f\u6210 */\n    CC_SYNTHESIZE_RETAIN(VirtualPad *, _virPad, VirtualPad);\n    \n    // implement the \"static create()\" method manually\n    CREATE_FUNC(HelloWorld);\n};\n\n#endif // __HELLOWORLD_SCENE_H__\n\n\n```\n\n```cpp:HelloWorld.cpp\n\n#include \"HelloWorldScene.h\"\n\nUSING_NS_CC;\n\nHelloWorld::HelloWorld()\n:_virPad(nullptr)\n{\n}\n\nHelloWorld::~HelloWorld(){\n    CC_SAFE_RELEASE_NULL(_virPad);\n}\n\n\nScene* HelloWorld::createScene()\n{\n    // 'scene' is an autorelease object\n    auto scene = Scene::create();\n    \n    // 'layer' is an autorelease object\n    auto layer = HelloWorld::create();\n    \n    // add layer as a child to scene\n    scene->addChild(layer);\n    \n    // return the scene\n    return scene;\n}\n\n// on \"init\" you need to initialize your instance\nbool HelloWorld::init()\n{\n    //////////////////////////////\n    // 1. super init first\n    if ( !Layer::init() )\n    {\n        return false;\n    }\n    \n    FileUtils::getInstance()->addSearchPath(\"res\");\n    \n    /* \u30de\u30eb\u30c1\u30bf\u30c3\u30d7\u30ea\u30b9\u30ca\u30fc\u306e\u8a2d\u7f6e */\n    auto listener = EventListenerTouchAllAtOnce::create();\n    listener->setEnabled(true);\n    listener->onTouchesBegan = CC_CALLBACK_2(HelloWorld::onTouchesBegan, this);\n    listener->onTouchesMoved = CC_CALLBACK_2(HelloWorld::onTouchesMoved, this);\n    listener->onTouchesEnded = CC_CALLBACK_2(HelloWorld::onTouchesEnded, this);\n    this->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);\n    \n    Vec2 origin = Director::getInstance()->getVisibleOrigin();\n    \n    \n    /* \u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u306e\u5b9f\u88c5 */\n    auto virPad = VirtualPad::create();\n    this->addChild(virPad);\n    this->setVirtualPad(virPad);\n    \n    return true;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u958b\u59cb\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesBegan(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n    \n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n        \n        /* VirtualPad\u306f\u3001\u6700\u521d\u306f\u753b\u50cf\u306e\u4e2d\u3092\u30bf\u30c3\u30c1\u3057\u306a\u3044\u3068\u53cd\u5fdc\u3057\u306a\u3044*/\n                if(_virPad->isTouchPad(location)){\n        \n                    //\u30d1\u30c3\u30c9\u306e\u958b\u59cb\n                    _virPad->startPad((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n        \n                    //\u30d1\u30c3\u30c9\u306e\u66f4\u65b0\n                    _virPad->update((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n                }\n        iterator++;\n    }\n    return;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u79fb\u52d5\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesMoved(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n        \n        /*\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u79fb\u52d5\u4e2d*/\n        _virPad->update((int)touch->getLocation().x,(int)touch->getLocation().y,touch->getID());\n        \n        iterator++;\n    }\n    return;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u7d42\u4e86\n *@param touches\n *@param event\n */\nvoid HelloWorld::onTouchesEnded(const std::vector<Touch *> &touches, cocos2d::Event *unused_event){\n    std::vector<cocos2d::Touch*>::const_iterator iterator = touches.begin();\n    while (iterator != touches.end()) {\n        Touch* touch = (Touch*)(*iterator);\n        auto location = touch->getLocation();\n        /* \u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u96e2\u3059 */\n        _virPad->endPad(touch->getID());\n        iterator++;\n    }\n    return;\n}\n\n\n\n\n\n```\n\n```cpp:VirtualPad.h\n\n#ifndef CocosProjectTest1_VirtualPad_hpp\n#define CocosProjectTest1_VirtualPad_hpp\n\n#include <stdio.h>\n#include \"cocos2d.h\"\nusing namespace cocos2d;\n\n/**\n *VirtualPad\u30af\u30e9\u30b9.\n */\nclass VirtualPad :public::Layer {\nprivate:\n    /*\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf*/\n    VirtualPad();\n    /*\u30c7\u30b9\u30c8\u30e9\u30af\u30bf*/\n    ~VirtualPad();\n    //Pad\u4e0b\u5730\n    Sprite* padBack;\n    //Pad\u64cd\u4f5c\u90e8\u5206\n    Sprite* padFront;\n    \n    //\u8868\u793a\u30d5\u30e9\u30b0\n    bool touchFlag;\n    //Pad\u306e\u521d\u671f\u4f4d\u7f6e\n    int init_x;\n    int init_y;\n    //\u73fe\u5728\u4f4d\u7f6e\n    int now_x;\n    int now_y;\n    //\u79fb\u52d5\u91cf\n    int d_x;\n    int d_y;\n    //\u79fb\u52d5sin,cos\n    float way_x;\n    float way_y;\n    //\u6700\u5927\u534a\u5f84\n    int max_r;\n    //\u73fe\u5728\u306e\u534a\u5f84\n    int now_r;\n    //\u89d2\u5ea6\n    float angle;\n    //\u89d2\u5ea6\u30c6\u30fc\u30d6\u30eb\n    float fsin[360];\n    float fcos[360];\n    //\u30bf\u30c3\u30c1ID\n    int touchID;\n    \npublic:\n    \n    void update(float dt)override;\n    CREATE_FUNC(VirtualPad);\n    bool init() override;\n    \n    //\u30d1\u30c3\u30c9\u306e\u958b\u59cb\u4f4d\u7f6e\n    void startPad(int x,int y,int touch_id);\n    \n    //\u30d1\u30c3\u30c9\u306e\u7d42\u4e86\u4f4d\u7f6e\n    void endPad(int touch_id);\n    \n    //\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u3066\u3044\u308b\u72b6\u614b\u304b\uff1f\n    bool isTouching();\n \n    //\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u305f\u304b\uff1f\n    bool isTouchPad(Vec2 location);\n    \n    //\u89d2\u5ea6\u306e\u53d6\u5f97\n    float getCosX();\n    float getSinY();\n    //\u65b9\u5411\u306e\u53d6\u5f97\n    int get4Way();\n    int get8Way();\n    \n    //\u30d1\u30c3\u30c9\u304b\u3089\u30b9\u30d4\u30fc\u30c9\u306e\u53d6\u5f97\n    int getSpeed();\n    \n    void update(int x,int y,int touch_id);\n};\n\n#endif /* VirtualPad_hpp */\n\n\n\n```\n\n```cpp:VirtualPad.h\n\n\n#include \"VirtualPad.hpp\"\n\n#define VIRTUAL_PAD_MAX_RATE 150\n#define VIRTUAL_PAD_MIN_RATE 10\n\n#define VIRTUAL_PAD_POSITION_RATE_X 1/2\n#define VIRTUAL_PAD_POSITION_RATE_Y 22/100\n\n/**\n *\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n */\nVirtualPad::VirtualPad(){\n}\n\n/**\n *\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n */\nVirtualPad::~VirtualPad(){\n}\n\n\nbool VirtualPad::init(){\n    \n    if ( !Layer::init() )\n    {\n        return false;\n    }\n    //\u753b\u9762\u30b5\u30a4\u30ba\u306e\u53d6\u5f97\n    Size size = Director::getInstance()->getVisibleSize();\n    \n    //\u753b\u50cf\u306e\u751f\u6210\uff08Pad\u4e0b\u5730\uff09\n    padBack = Sprite::create(\"virtualpad/virtualpad_bg.png\");\n    padBack->setAnchorPoint(Vec2::ANCHOR_MIDDLE);\n    padBack->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n    \n    /* \u753b\u50cf\u306e\u751f\u6210\uff08Pad\u64cd\u4f5c\u90e8\u5206\uff09 */\n    padFront = Sprite::create(\"virtualpad/virtualpad_pad.png\");\n    padFront->setAnchorPoint(Point(0.5f,0.5f));\n    padFront->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n    \n    /* \u30d1\u30c3\u30c9\u306e\u521d\u671f\u4f4d\u7f6e */\n    init_x = padFront->getPositionX();\n    init_y = padFront->getPositionY();\n    \n    //\u30ec\u30a4\u30e4\u30fc\u306b\u8ffd\u52a0\n    this->addChild(padBack,10000);\n    this->addChild(padFront,10001);\n    \n    //\u6700\u5927\u534a\u5f84\n    max_r = VIRTUAL_PAD_MAX_RATE ;\n    \n    //\u89d2\u5ea6\u6bce\u306ex,y\u4f4d\u7f6e\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n    for(int i=0;i<360;i++){\n        fsin[i]=(float)sin(i*3.1415926535/180);\n        fcos[i]=(float)cos(i*3.1415926535/180);\n    }\n    \n    return true;\n}\n/**\n * 1f\u3054\u3068\u306b\u884c\u3046\u51e6\u7406\n */\nvoid VirtualPad::update(float dt){\n    \n}\n\n/**\n *Pad\u306e\u8868\u793a\u958b\u59cb\n *@param x\n *@param y\n */\nvoid VirtualPad::startPad(int x,int y,int touch_id){    \n    touchFlag = true;\n    now_x = x;\n    now_y = y;\n    \n    touchID = touch_id;\n}\n\n/**\n *Pad\u306e\u64cd\u4f5c\u7d42\u4e86\n */\nvoid VirtualPad::endPad(int touch_id){\n    if(touch_id != touchID)return;\n    \n    //touchid\u306e\u53d6\u5f97\n    touchID = touch_id;\n\n    /* \u30bf\u30c3\u30c1\u3092\u96e2\u3057\u305f\u3089\u3001\u30d1\u30c3\u30c9\u306e\u3064\u307e\u307f\u4f4d\u7f6e\u306b\u623b\u3059 */\n    Size size = Director::getInstance()->getVisibleSize();\n    padFront->setPosition(Point(size.width*VIRTUAL_PAD_POSITION_RATE_X, size.height*VIRTUAL_PAD_POSITION_RATE_Y));\n    \n    /* \u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316 */\n    d_x = 0;\n    d_y = 0;\n    angle = 0;\n    way_x = 0;\n    way_y = 0;\n    now_r = 0;\n}\n\n/**\n *Pad\u306e\u8868\u793a\u66f4\u65b0\n *@param x\n *@param y\n */\nvoid VirtualPad::update(int x,int y,int touch_id){\n    //    if(drawFlag == false)return;\n    if(touch_id != touchID)return;\n    //\u79fb\u52d5\u91cf\n    d_x = x-init_x;\n    d_y = y-init_y;\n    \n    //\u89d2\u5ea6\n    angle = atan2f(d_y, d_x);\n    //cos,sin\n    way_x = cosf(angle);\n    way_y = sinf(angle);\n    now_r =sqrt(d_x*d_x + d_y*d_y);\n    //\u5186\u79fb\u52d5\u7bc4\u56f2\u5916\u304b\n    if ( now_r > max_r) {\n        //\u5236\u9650\u5f8c\u306e\u30dc\u30bf\u30f3\u4f4d\u7f6e\n        x = (int)(init_x + max_r * cos(angle));\n        y = (int)(init_y + max_r * sin(angle));\n        now_r = max_r;\n    }\n    //\u4f4d\u7f6e\u3092\u30bb\u30c3\u30c8\n    now_x = x;\n    now_y = y;\n    padFront->setPosition(Point(now_x, now_y));\n    \n}\n\n/**\n *cos\u53d6\u5f97\n *@return \u30d1\u30c3\u30c9\u306e\u89d2\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u305fcos\n */\nfloat VirtualPad::getCosX(){\n    return way_x;\n}\n\n/**\n *sin\u53d6\u5f97\n *@return \u30d1\u30c3\u30c9\u306e\u89d2\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u305fsin\n */\nfloat VirtualPad::getSinY(){\n    return way_y;\n}\n\n/**\n *\u30bf\u30c3\u30c1\u3057\u305f\u7b87\u6240\u304b\u3089\u3001\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u89e6\u3063\u305f\u304b\uff1f\u3092\u5224\u5225\n *@param location \u30bf\u30c3\u30c1\u3057\u305f\u7b87\u6240\n *@return drawFlag true\u306a\u3089\u89e6\u3063\u305f\n */\nbool VirtualPad::isTouchPad(Vec2 location){\n    auto padBackRect =  this->padBack->getBoundingBox();\n    \n    //\u3053\u3053\u3067\u306f\u3001\u30d1\u30c3\u30c9\u306e\u4e0b\u5730\u306e\u7bc4\u56f2\u5185\u3092\u30bf\u30c3\u30c1\u3057\u305f\u306a\u3089\u30d1\u30c3\u30c9\u3092\u30bf\u30c3\u30c1\u3057\u305f\u3068\u5224\u5225\n    if(padBackRect.containsPoint(location)){\n        return true;\n    }\n    return false;\n}\n\n\n/**\n *\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u306e\u53d6\u5f97\n *@return drawFlag true\u306a\u3089\u8868\u793a\u4e2d\n */\nbool VirtualPad::isTouching(){\n    return touchFlag;\n}\n\n/**\n *\u65b9\u5411\u53d6\u5f97\n *@return int 4\u65b9\u5411\u306e\u3046\u3061\u3069\u306e\u65b9\u5411\u304b\u3092\u8fd4\u3059.\n *\u65b9\u5411\u306f\u2b07\u5185\u5bb9\u3067\u8868\u3059 5\u304c\u4e2d\u5fc3\n *789\n *456\n *123\n */\nint VirtualPad::get4Way(){\n    \n    //\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u304b\n    if(d_x*d_x + d_y*d_y< VIRTUAL_PAD_MIN_RATE*VIRTUAL_PAD_MIN_RATE){\n        return 5;\n    }\n    //\u4e0a\n    if(way_x<=fcos[45]&&way_x>=fcos[135]&&way_y>0){\n        return 8;\n    }\n    //\u4e0b\n    if(way_x<=fcos[315]&&way_x>=fcos[225]&&way_y<0){\n        return 2;\n    }\n    //\u5de6\n    if(way_y<=fsin[135]&&way_y>=fsin[225]&&way_x<0){\n        return 4;\n    }\n    //\u53f3\n    if(way_y<=fsin[45]&&way_y>=fsin[315]&&way_x>0){\n        return 6;\n    }\n    return -1;\n}\n\n/**\n *\u65b9\u5411\u53d6\u5f97\n *@return int 8\u65b9\u5411\u306e\u3046\u3061\u3069\u306e\u65b9\u5411\u304b\u3092\u8fd4\u3059.\n *\u65b9\u5411\u306f\u2b07\u5185\u5bb9\u3067\u8868\u3059 5\u304c\u4e2d\u5fc3\n *789\n *456\n *123\n */\nint VirtualPad::get8Way(){\n    //\u79fb\u52d5\u3057\u3066\u3044\u306a\u3044\u304b\n    if(d_x*d_x + d_y*d_y< VIRTUAL_PAD_MIN_RATE*VIRTUAL_PAD_MIN_RATE){\n        return 5;\n    }\n    //\u53f3\u4e0a\n    if(way_x<=fcos[22]&&way_x>=fcos[68]&&way_y>0){\n        return 9;\n    }\n    //\u4e0a\n    if(way_x<=fcos[68]&&way_x>=fcos[112]&&way_y>0){\n        return 8;\n    }\n    //\u5de6\u4e0a\n    if(way_x<=fcos[112]&&way_x>=fcos[158]&&way_y>0){\n        return 7;\n    }\n    //\u53f3\u4e0b\n    if(way_x<=fcos[338]&&way_x>=fcos[292]&&way_y<0){\n        return 3;\n    }\n    //\u4e0b\n    if(way_x<=fcos[292]&&way_x>=fcos[248]&&way_y<0){\n        return 2;\n    }\n    //\u5de6\u4e0b\n    if(way_x<=fcos[248]&&way_x>=fcos[202]&&way_y<0){\n        return 1;\n    }\n    //\u5de6\n    if(way_y<=fsin[158]&&way_y>=fsin[202]&&way_x<0){\n        return 4;\n    }\n    //\u53f3\n    if(way_y<=fsin[22]&&way_y>=fsin[338]&&way_x>0){\n        return 6;\n    }\n    return -1;\n}\n/**\n *\u30d1\u30c3\u30c9\u306e\u79fb\u52d5\u91cf\u304b\u3089\u30b9\u30d4\u30fc\u30c9\u3092\u8fd4\u3059\n *@return \u30b9\u30d4\u30fc\u30c9\u3092\u8fd4\u3059\n */\nint VirtualPad::getSpeed(){\n    /* \u5ea7\u6a19\u7528 */\n    if(now_r >= 150){\n        return 8;\n    }\n    \n    if(now_r >= 110){\n        return 6;\n    }\n    \n    if(now_r >= 70){\n        return 4;\n    }\n    \n    if(now_r >= 30){\n        return 2;\n    }\n    \n    if(now_r >= 0){\n        return 0;\n    }\n    ////     \u3053\u3053\u306b\u6765\u308b\u3053\u3068\u306f\u306a\u3044\u306f\u305a\n    //    CCLOG(\"Errorlog in VirtualPad\");\n    return now_r;\n}\n\n```\n# \u307e\u3068\u3081\n\u4e00\u5fdc\u3001\u30de\u30eb\u30c1\u30bf\u30c3\u30d7\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff08\u691c\u8a3c\u306f\u3057\u3066\u307e\u305b\u3093\uff09\u3002\u30d0\u30fc\u30c1\u30e3\u30eb\u30d1\u30c3\u30c9\u3092\u4f7f\u3046\u30b2\u30fc\u30e0\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8ab0\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u3001\u3001\u3001\n\n# \u53c2\u8003\n\nhttp://gwi.blog.shinobi.jp/cocos2d-x/cocos2d-x%20%E3%83%90%E3%83%BC%E3%83%81%E3%83%A3%E3%83%AB%E3%83%91%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A3%85\n", "tags": ["cocos2d-x", "iOS"]}