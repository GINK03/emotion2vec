{"tags": ["Ruby", "dns", "route53", "bind", "AWS"], "context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u304b\u30891\u5e74\u4ee5\u4e0a\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002 \u6c17\u3092\u3064\u3051\u3066\u306d\u3002\n\nbind\u3067\u7ba1\u7406\u3057\u3066\u3044\u308bDNS\u306e\u30be\u30fc\u30f3\u3092AWS\u306eRoute53\u306b\u79fb\u884c\u3057\u305f\u304f\u306a\u3063\u305f\u306e\u3067\u4f5c\u6210\u3002\n\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067Route53\u4e0a\u306b\u30ec\u30b3\u30fc\u30c9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u3064\u3044\u3067\u306b\u5fa1\u5b58\u77e5\u306e\u901a\u308adig\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u306f\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u306e\u3067\u3001dig\u306e\u7d50\u679c\u30d1\u30a4\u30d7\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u6e21\u305b\u3070route53\u306b\u9069\u5f53\u306b\u767b\u9332\u3059\u308b\u5b9f\u9a13\u3082\u3002\n\nto_route53.rb\nrequire 'zonefile'\nrequire 'route53'\n\nmy_access_key = 'REPLACE_TO_YOUR_KEY'\nmy_secret_key = 'REPLACE_TO_YOUR_SECRET'\n\ndomain = 'example.com.'\nzone_id = '/hostedzone/ZONEID'\n\ndefault_ttl = '600'\nconn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false)\n## you may need to use this blanch due to ssl verify error.\n## https://github.com/higanworks/ruby_route_53/tree/add_option_ssl_no_verify\n# conn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false , true)\n\nmng_zone = Route53::Zone.new(domain,zone_id,conn)\n\nzonefile = Zonefile.from_file('./example.com.zone')\n# zonefile = Zonefile.new($stdin.read)\n\ndef build_namelist(records)\n  records.map{|obj| obj[:name]}.uniq\nend\n\ndef build_hostlist(name, records)\n  hosts = []\n  records.each do |rec|\n    hosts << rec[:host] if name == rec[:name]\n  end\n  hosts\nend\n\ndef build_mx_hostlist(records)\n  records.map{|mx| [mx[:pri].to_s, mx[:host]].join(' ')}\nend\n\ndef prepare_ttl(name, records)\n  records.select{|x| x[:name] == records}.first.tap do |x|\n    break x[:ttl] if x\n  end\nend\n\n%w(a cname txt mx).each do |w|\n  namelist = build_namelist(zonefile.records[w.to_sym])\n\n  namelist.each do |name|\n    hosts = build_hostlist(name, zonefile.records[w.to_sym])\n    ttl = prepare_ttl(name, zonefile.records[w.to_sym]) || default_ttl\n    case w\n    when 'a'\n      if  name == '@'\n        new_name = domain\n      elsif name.end_with?('.')\n        new_name = name\n      else\n        new_name = [name ,domain].join('.')\n      end\n      new_record = Route53::DNSRecord.new(new_name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    when 'cname'\n      if name.end_with?('.')\n        new_name = name\n      else\n        hosts.map!{|h| [h,domain].join('.')}\n        new_name = [name ,domain].join('.')\n      end\n      new_record = Route53::DNSRecord.new(new_name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    when 'txt'\n      zonefile.records[w.to_sym].each do |record|\n        new_record = Route53::DNSRecord.new(domain, w.to_s.upcase , record[:ttl] || default_ttl, [record[:text]] ,mng_zone)\n    puts new_record\n        new_record.create\n      end\n      next\n    when 'mx'\n      hosts = build_mx_hostlist(zonefile.records[w.to_sym])\n      new_record = Route53::DNSRecord.new(name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    else\n      puts \"Unsupport resource type detected. -> #{w.to_s.upcase}\"\n    end\n\n    new_record.create\n  end\nend\n\n\n\n\u4f7f\u3044\u65b9\n\n\u5171\u901a\u6e96\u5099\n\u5148\u306bAWS Route53\u3067\u79fb\u884c\u5bfe\u8c61\u306e\u30c9\u30e1\u30a4\u30f3\u3092Hosted Zones\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u6b21\u306b\u4e0b\u8a18\u306e\u7b87\u6240\u3092\u5404\u81ea\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002\n\nmy_access_key = 'REPLACE_TO_YOUR_KEY'\nmy_secret_key = 'REPLACE_TO_YOUR_SECRET'\ndomain = 'example.com.'\nzone_id = '/hostedzone/ZONEID'\n\n\nZone\u30d5\u30a1\u30a4\u30eb\u304b\u3089\n\nzonefile = Zonefile.from_file('./example.com.zone')\n\n\u3053\u3053\u3092\u81ea\u524d\u306e\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u5dee\u3057\u66ff\u3048\u3066\u5b9f\u884c\u3059\u308c\u3070OK\u3002\nruby ./to_route53.rb\n\ndig\u306e\u51fa\u529b\u304b\u3089\nzonefile\u3092$stdin\u304b\u3089\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002\n# zonefile = Zonefile.from_file('./example.com.zone')\nzonefile = Zonefile.new($stdin.read)\n\n\u3067\u3001\u30d1\u30a4\u30d7\u3067\u6e21\u3057\u307e\u3059\u3001\u5fc5\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092dig\u308a\u307e\u3057\u3087\u3046\u3002\ndig hoge.example.com @8.8.8.8 | ruby ./to_route53.rb\n\u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u308f\u308c\u308b\u3068CNAME\u304cA\u306b\u5dee\u3057\u66ff\u308f\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u4ed6\u6240\u306b\u805e\u304d\u307e\u3057\u3087\u3046\u3002\u4f8b\u3067\u306fGoogle\u306e Public DNS\u3092\u554f\u3044\u5408\u308f\u305b\u5148\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n$ dig hoge.example.com @8.8.8.8 | bundle exec ruby ./to_route53.rb\nhoge.l.example.com. A 600 192.168.15.73,192.168.15.75,192.168.15.71\nhoge.example.com. CNAME 600 hoge.l.example.com\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u30af\u30a8\u30ea\u7d50\u679c\u3092route53\u306b\u3082\u308a\u3082\u308a\u767b\u9332\u51fa\u6765\u307e\u3059\u3002\n\n\u5f8c\u51e6\u7406\n\u30ec\u30b8\u30b9\u30c8\u30ea\u306eNS\u3092awsdns\u306b\u5411\u3051\u305f\u3089\u79fb\u884c\u5b8c\u4e86\u3067\u3059\u3001\u5ff5\u306e\u305f\u3081\u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\u306f\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u8ffd\u8a18\uff1aSSL\u30d9\u30ea\u30d5\u30a1\u30a4\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3068\u304d\n\u74b0\u5883\u306b\u3088\u3063\u3066\u306fruby_route53\u306e\u5b9f\u884c\u6642\u306bSSL\u30d9\u30ea\u30d5\u30a1\u30a4\u30a8\u30e9\u30fc\u3067\u30b3\u30b1\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u6642\u306f\u3053\u3061\u3089\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u4f7f\u3044\u307e\u3059\u3002\nhttps://github.com/higanworks/ruby_route_53/tree/add_option_ssl_no_verify\n\u3067\u3001Route53::Connection.new\u306e\u5f15\u6570\u306b\u6700\u5f8c\u4e00\u3064true\u3092\u8ffd\u52a0\u3059\u308c\u3070\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n# conn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false)\nconn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false , true)\n\n<!-- too_old -->\n> **\u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u304b\u30891\u5e74\u4ee5\u4e0a\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002** \u6c17\u3092\u3064\u3051\u3066\u306d\u3002\n\nbind\u3067\u7ba1\u7406\u3057\u3066\u3044\u308bDNS\u306e\u30be\u30fc\u30f3\u3092AWS\u306eRoute53\u306b\u79fb\u884c\u3057\u305f\u304f\u306a\u3063\u305f\u306e\u3067\u4f5c\u6210\u3002\n\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067Route53\u4e0a\u306b\u30ec\u30b3\u30fc\u30c9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n\u3064\u3044\u3067\u306b\u5fa1\u5b58\u77e5\u306e\u901a\u308a`dig`\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u306f\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u306e\u3067\u3001dig\u306e\u7d50\u679c\u30d1\u30a4\u30d7\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u6e21\u305b\u3070route53\u306b\u9069\u5f53\u306b\u767b\u9332\u3059\u308b\u5b9f\u9a13\u3082\u3002\n\n\n```ruby:to_route53.rb\nrequire 'zonefile'\nrequire 'route53'\n\nmy_access_key = 'REPLACE_TO_YOUR_KEY'\nmy_secret_key = 'REPLACE_TO_YOUR_SECRET'\n\ndomain = 'example.com.'\nzone_id = '/hostedzone/ZONEID'\n\ndefault_ttl = '600'\nconn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false)\n## you may need to use this blanch due to ssl verify error.\n## https://github.com/higanworks/ruby_route_53/tree/add_option_ssl_no_verify\n# conn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false , true)\n\nmng_zone = Route53::Zone.new(domain,zone_id,conn)\n\nzonefile = Zonefile.from_file('./example.com.zone')\n# zonefile = Zonefile.new($stdin.read)\n\ndef build_namelist(records)\n  records.map{|obj| obj[:name]}.uniq\nend\n\ndef build_hostlist(name, records)\n  hosts = []\n  records.each do |rec|\n    hosts << rec[:host] if name == rec[:name]\n  end\n  hosts\nend\n\ndef build_mx_hostlist(records)\n  records.map{|mx| [mx[:pri].to_s, mx[:host]].join(' ')}\nend\n\ndef prepare_ttl(name, records)\n  records.select{|x| x[:name] == records}.first.tap do |x|\n    break x[:ttl] if x\n  end\nend\n\n%w(a cname txt mx).each do |w|\n  namelist = build_namelist(zonefile.records[w.to_sym])\n\n  namelist.each do |name|\n    hosts = build_hostlist(name, zonefile.records[w.to_sym])\n    ttl = prepare_ttl(name, zonefile.records[w.to_sym]) || default_ttl\n    case w\n    when 'a'\n      if  name == '@'\n        new_name = domain\n      elsif name.end_with?('.')\n        new_name = name\n      else\n        new_name = [name ,domain].join('.')\n      end\n      new_record = Route53::DNSRecord.new(new_name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    when 'cname'\n      if name.end_with?('.')\n        new_name = name\n      else\n        hosts.map!{|h| [h,domain].join('.')}\n        new_name = [name ,domain].join('.')\n      end\n      new_record = Route53::DNSRecord.new(new_name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    when 'txt'\n      zonefile.records[w.to_sym].each do |record|\n        new_record = Route53::DNSRecord.new(domain, w.to_s.upcase , record[:ttl] || default_ttl, [record[:text]] ,mng_zone)\n    puts new_record\n        new_record.create\n      end\n      next\n    when 'mx'\n      hosts = build_mx_hostlist(zonefile.records[w.to_sym])\n      new_record = Route53::DNSRecord.new(name, w.to_s.upcase , ttl.to_s, hosts ,mng_zone)\n    else\n      puts \"Unsupport resource type detected. -> #{w.to_s.upcase}\"\n    end\n\n    new_record.create\n  end\nend\n```\n\n\n## \u4f7f\u3044\u65b9\n\n### \u5171\u901a\u6e96\u5099\n\n\u5148\u306bAWS Route53\u3067\u79fb\u884c\u5bfe\u8c61\u306e\u30c9\u30e1\u30a4\u30f3\u3092Hosted Zones\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u6b21\u306b\u4e0b\u8a18\u306e\u7b87\u6240\u3092\u5404\u81ea\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002\n\n- my_access_key = 'REPLACE_TO_YOUR_KEY'\n- my_secret_key = 'REPLACE_TO_YOUR_SECRET'\n- domain = 'example.com.'\n- zone_id = '/hostedzone/ZONEID'\n\n\n### Zone\u30d5\u30a1\u30a4\u30eb\u304b\u3089\n\n- zonefile = Zonefile.from_file('./example.com.zone')\n\n\u3053\u3053\u3092\u81ea\u524d\u306e\u30be\u30fc\u30f3\u30d5\u30a1\u30a4\u30eb\u306b\u5dee\u3057\u66ff\u3048\u3066\u5b9f\u884c\u3059\u308c\u3070OK\u3002\n\n`ruby ./to_route53.rb`\n\n### dig\u306e\u51fa\u529b\u304b\u3089\n\nzonefile\u3092`$stdin`\u304b\u3089\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002\n\n```ruby\n# zonefile = Zonefile.from_file('./example.com.zone')\nzonefile = Zonefile.new($stdin.read)\n```\n\n\u3067\u3001\u30d1\u30a4\u30d7\u3067\u6e21\u3057\u307e\u3059\u3001\u5fc5\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092dig\u308a\u307e\u3057\u3087\u3046\u3002\n\n`dig hoge.example.com @8.8.8.8 | ruby ./to_route53.rb`\n\n\u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u308f\u308c\u308b\u3068CNAME\u304cA\u306b\u5dee\u3057\u66ff\u308f\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u4ed6\u6240\u306b\u805e\u304d\u307e\u3057\u3087\u3046\u3002\u4f8b\u3067\u306fGoogle\u306e Public DNS\u3092\u554f\u3044\u5408\u308f\u305b\u5148\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```shell\n$ dig hoge.example.com @8.8.8.8 | bundle exec ruby ./to_route53.rb\nhoge.l.example.com. A 600 192.168.15.73,192.168.15.75,192.168.15.71\nhoge.example.com. CNAME 600 hoge.l.example.com\n```\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u30af\u30a8\u30ea\u7d50\u679c\u3092route53\u306b\u3082\u308a\u3082\u308a\u767b\u9332\u51fa\u6765\u307e\u3059\u3002\n\n## \u5f8c\u51e6\u7406\n\n\u30ec\u30b8\u30b9\u30c8\u30ea\u306eNS\u3092`awsdns`\u306b\u5411\u3051\u305f\u3089\u79fb\u884c\u5b8c\u4e86\u3067\u3059\u3001\u5ff5\u306e\u305f\u3081\u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\u306f\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n## \u8ffd\u8a18\uff1aSSL\u30d9\u30ea\u30d5\u30a1\u30a4\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3068\u304d\n\n\u74b0\u5883\u306b\u3088\u3063\u3066\u306f`ruby_route53`\u306e\u5b9f\u884c\u6642\u306bSSL\u30d9\u30ea\u30d5\u30a1\u30a4\u30a8\u30e9\u30fc\u3067\u30b3\u30b1\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u6642\u306f\u3053\u3061\u3089\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n`https://github.com/higanworks/ruby_route_53/tree/add_option_ssl_no_verify`\n\n\u3067\u3001`Route53::Connection.new`\u306e\u5f15\u6570\u306b\u6700\u5f8c\u4e00\u3064`true`\u3092\u8ffd\u52a0\u3059\u308c\u3070\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```\n# conn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false)\nconn = Route53::Connection.new(my_access_key,my_secret_key,'2011-05-05' , 'https://route53.amazonaws.com/',false , true)\n```\n"}