{"context": "\n\n\u306f\u3058\u3081\u306b\nC\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u7fd2\u5f97\n\u3068\u3044\u3046\u3082\u306e\u3092\u66f8\u3044\u305f\u304cC++\u3067\u306f\u3069\u3046\u304b\u898b\u3066\u3044\u304f\u3002\n\u5e78\u3044\u306a\u3053\u3068\u306bC\u3068\u9055\u3044C++\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306f\u512a\u79c0\u3067\u3042\u308b\u3002\n\nC++\u3067\u306e\u6570\u5024\u5165\u529b\u306e\u5b9f\u306b\u3042\u308a\u304d\u305f\u308a\u306a\u4f8b\nint input_num;\nstd::cin >> input_num;\n\n\nC\u307f\u305f\u3044\u306b\u6a19\u6e96\u5165\u51fa\u529b\u304c\u30e9\u30b9\u30dc\u30b9\u3001\u306a\u3093\u3066\u3053\u3068\u306f\u306a\u3044\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\u3001\u30d5\u30e9\u30b0\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\u306f\u3084\u306f\u308a\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\nC\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u7fd2\u5f97\u3067\u7d39\u4ecb\u3057\u305f\u30a8\u30e9\u30fc\u6642\u306f\u518d\u5e30\u3059\u308b\u3001\u3068\u8a00\u3046\u306e\u306f\u5b9f\u306f\u521d\u5fc3\u8005\u306b\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u306f\u306a\u3044\u306e\u304b\uff1f\u3068\u601d\u3046\u306e\u3067\u305d\u308c\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\u3082\u3061\u308d\u3093\u4f8b\u5916\u306a\u3093\u3066\u3044\u3046\u521d\u5fc3\u8005\u306b\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u306f\u610f\u8b58\u305b\u305a\u6e08\u3080\u3088\u3046\u3001noexcept\u6307\u5b9a\u3092\u3064\u3051\u308b\u3002\n\n\u6ce8\u610f\u70b9\n\narithmetic\u306b\u9650\u5b9a\n\n\u3042\u308a\u3059\u30fc\u30fb\u30fb\u30fb\u3058\u3083\u306a\u3044\u3001arithmetic\u3067\u306f\u306a\u3044\u3082\u306e\u306b\u5bfe\u3059\u308boperator>>\u304c\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u3001TMP\u3067\u5f3e\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\u3082\u3061\u308d\u3093SFINAE\u3092\u4f7f\u3046\u3002\u3084\u308a\u65b9\u306f\nstd::enable_if\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001enabler\u3092\u4f7f\u3046\uff1f\n\u306estd::nullptr_t\u578b\u3092\u4f7f\u3046\u3082\u306e\u3092\u4f7f\u3046\u3002\n\nint8_t/uint8_t\u578b\u306e\u305f\u3081\u306b\n\u307e\u305fint8_t/uint8_t\u578b\u306f\u4e00\u822c\u306bchar/unsigned char\u306btypedef\u3055\u308c\u3066\u304a\u308a\u3001operator>>\u306f\u4e00\u6587\u5b57\u8aad\u307f\u53d6\u308b\u3068\u3044\u3046\u52d5\u4f5c\u306b\u306a\u308b\u306e\u3067\u3001\u4e00\u5ea6\u5927\u304d\u306a\u578b\u3067\u53d7\u3051\u3066\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\u3057\u305f\u5f8c\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nchar/singed shar/unsigend char\u578b\u306fsizeof\u6f14\u7b97\u5b50\u30671\u306b\u306a\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u66f8\u3051\u3070\u3044\u3044\u304c\u3001\u4eca\u306eC++\u306b\u306fstatic_if\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u6a5f\u80fd\u306f\u7121\u3044\u306e\u3067TMP\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u969bstd::conditional\u3092\u4f7f\u3046\u3068\u975e\u5e38\u306b\u8aad\u307f\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\n\u30e1\u30e2\uff1astd::conditional\u3067if\uff5eelse if\uff5eelse\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u898b\u3065\u3089\u3044\n\u306e\u3084\u308a\u65b9\u3092\u4f7f\u3046\u3002\n\n\u6210\u679c\u7269\n#include <iostream>\n#include <exception>\n#include <stdexcept>\n#include <type_traits>\n#include <limits>\n/**\n@brief  \\~japanese \u8907\u6570\u6761\u4ef6\u306e\u3042\u308bTMP\u7528if\n\\~english multi-conditional if struct for TMP.\n\\~japanese  std::enable_if\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\n\\~english   This class is used in conjunction with std::enable_if.\n\\~\n@code\ntemplate<typename T>\nusing bar = first_enabled_t<\n    std::enbale_if<cond1, type1>,\n    std::enbale_if<cond2, type2>,\n    std::enbale_if<cond3, type3>,\n    default_type\n>;\n@endcode\n*/\ntemplate<typename ...Args>\nstruct first_enabled {};\n\ntemplate<typename T, typename ...Args>\nstruct first_enabled<std::enable_if<true, T>, Args...> { using type = T; };\ntemplate<typename T, typename ...Args>\nstruct first_enabled<std::enable_if<false, T>, Args...> : first_enabled<Args...> {};\ntemplate<typename T, typename ...Args>\nstruct first_enabled<T, Args...> { using type = T; };\n\ntemplate<typename ...Args>\nusing first_enabled_t = typename first_enabled<Args...>::type;\n\n//! for int8_t/uint8_t\ntemplate<typename T, std::enable_if_t<std::is_arithmetic<T>::value, std::nullptr_t> = nullptr>\nusing arithmetic_t = first_enabled_t <\n    std::enable_if<1 != sizeof(T), T>,\n    std::enable_if<std::is_signed<T>::value, int>,\n    unsigned int\n>;\ntemplate<typename T_> using limit = std::numeric_limits<T_>;//create new type. C++11:alias declaration\n/**\n * @brief \u6a19\u6e96\u5165\u529b\u304b\u3089\u5165\u529b\u3092\u53d7\u3051\u308b\n * @details [long description]\n * \n * @param echo_str \u5165\u529b\u3092\u53d7\u3051\u308b\u524d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57\u5217\u3002\u8868\u793a\u3057\u306a\u3044\u5834\u5408\u306fnullptr\u304b\u7a7a\u767d\u6587\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u305f\u6587\u5b57\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\n * @param max \u5165\u529b\u5024\u3092\u5236\u9650\u3059\u308b\u3002\u6700\u5927\u5024\u3092\u6307\u5b9a\n * @param min \u5165\u529b\u5024\u3092\u5236\u9650\u3059\u308b\u3002\u6700\u5c0f\u5024\u3092\u6307\u5b9a\n * @return \u5165\u529b\u3057\u305f\u6570\u5b57\n * @exception none\n */\ntemplate<typename T, std::enable_if_t<std::is_arithmetic<T>::value, std::nullptr_t> = nullptr>//T\u304c\u6574\u6570\u304b\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3067\u306a\u3044\u306a\u3089\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u51fa\u3059\nT input(const char* echo_str, const T max = limit<T>::max(), const T min = limit<T>::lowest()) noexcept {\n    arithmetic_t<T> buf;\n    try {\n        std::cin.exceptions(std::ios::failbit | std::ios::badbit);\n        if (nullptr != echo_str && '\\0' != echo_str[0]) std::cout << echo_str << std::endl;//\u6587\u5b57\u5217\u304c\u7a7a\u3058\u3083\u306a\u3051\u308c\u3070\u51fa\u529b\n        std::cin >> buf;//\u5165\u529b\u3092\u53d7\u3051\u308b\n        if (max < buf || buf < min) throw std::out_of_range(\"input is iligal\");//\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n    }\n    catch (std::exception& er) {\n        std::cerr << er.what() << std::endl;//\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\n        return input(\"\u518d\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\", max, min);//\u30a8\u30e9\u30fc\u6642\u306f\u518d\u5e30\u3059\u308b\u65b9\u5411\u3067\n    }\n    return static_cast<T>(buf);\n}\n\n\n\u4f7f\u3044\u65b9\nint main(){\n    const auto input1 = input(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 50, 1);//input1\u306fint\u578b\n    const auto input2 = input(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 50U, 1U);//input2\u306funsigned int\u578b\n    const auto input3 = input<unsigned long long>(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 1200, 3);//input3\u306funsigned long long\u578b\n    const auto input4 = input<unsigned short>(\"\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");//input4\u306funsigned short\u578b\n    return 0;\n}\n\n\n\u7d50\u8ad6\n\u5185\u90e8\u5b9f\u88c5\u306f\u4f8b\u5916\u3092\u4e71\u7528\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u3001\u82e5\u5e72\u91cd\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u304c\u3001\u305d\u3082\u305d\u3082\u6a19\u6e96\u5165\u51fa\u529b\u306b\u901f\u5ea6\u3092\u6c42\u3081\u3066\u3082\u3057\u304b\u305f\u304c\u306a\u3044\u306e\u3067\u3053\u308c\u3067\u3044\u3044\u3068\u3059\u308b\u3002\n\n\u8ffd\u8a18\n\u3088\u304f\u3088\u304f\u898b\u305f\u3089\u3053\u3044\u3064bool\u3067\u3082\u52d5\u304f\u305e\u30fb\u30fb\u30fb\u3002\n# \u306f\u3058\u3081\u306b\n[C\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u7fd2\u5f97](http://qiita.com/yumetodo/items/238751b879c09b56234b)\n\u3068\u3044\u3046\u3082\u306e\u3092\u66f8\u3044\u305f\u304cC++\u3067\u306f\u3069\u3046\u304b\u898b\u3066\u3044\u304f\u3002\n\n\u5e78\u3044\u306a\u3053\u3068\u306bC\u3068\u9055\u3044C++\u306e\u6a19\u6e96\u5165\u51fa\u529b\u306f\u512a\u79c0\u3067\u3042\u308b\u3002\n\n```cpp:C++\u3067\u306e\u6570\u5024\u5165\u529b\u306e\u5b9f\u306b\u3042\u308a\u304d\u305f\u308a\u306a\u4f8b\nint input_num;\nstd::cin >> input_num;\n```\nC\u307f\u305f\u3044\u306b\u6a19\u6e96\u5165\u51fa\u529b\u304c\u30e9\u30b9\u30dc\u30b9\u3001\u306a\u3093\u3066\u3053\u3068\u306f\u306a\u3044\u3002\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\u3001\u30d5\u30e9\u30b0\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\u306f\u3084\u306f\u308a\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n[C\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u7fd2\u5f97](http://qiita.com/yumetodo/items/238751b879c09b56234b)\u3067\u7d39\u4ecb\u3057\u305f\u30a8\u30e9\u30fc\u6642\u306f\u518d\u5e30\u3059\u308b\u3001\u3068\u8a00\u3046\u306e\u306f\u5b9f\u306f\u521d\u5fc3\u8005\u306b\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u306f\u306a\u3044\u306e\u304b\uff1f\u3068\u601d\u3046\u306e\u3067\u305d\u308c\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\u3082\u3061\u308d\u3093\u4f8b\u5916\u306a\u3093\u3066\u3044\u3046\u521d\u5fc3\u8005\u306b\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3082\u306e\u306f\u610f\u8b58\u305b\u305a\u6e08\u3080\u3088\u3046\u3001``noexcept``\u6307\u5b9a\u3092\u3064\u3051\u308b\u3002\n\n# \u6ce8\u610f\u70b9\n\n## arithmetic\u306b\u9650\u5b9a\n![nc32177.png](https://qiita-image-store.s3.amazonaws.com/0/94177/9194c15d-2b2a-5353-428f-89667cb002f9.png)\n\n\n\u3042\u308a\u3059\u30fc\u30fb\u30fb\u30fb\u3058\u3083\u306a\u3044\u3001arithmetic\u3067\u306f\u306a\u3044\u3082\u306e\u306b\u5bfe\u3059\u308b``operator>>``\u304c\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u3001TMP\u3067\u5f3e\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\u3082\u3061\u308d\u3093SFINAE\u3092\u4f7f\u3046\u3002\u3084\u308a\u65b9\u306f\n[std::enable_if\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001enabler\u3092\u4f7f\u3046\uff1f](http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462)\n\u306e``std::nullptr_t``\u578b\u3092\u4f7f\u3046\u3082\u306e\u3092\u4f7f\u3046\u3002\n\n## ``int8_t``/``uint8_t``\u578b\u306e\u305f\u3081\u306b\n\u307e\u305f``int8_t``/``uint8_t``\u578b\u306f\u4e00\u822c\u306b``char``/``unsigned char``\u306btypedef\u3055\u308c\u3066\u304a\u308a\u3001``operator>>``\u306f**\u4e00\u6587\u5b57\u8aad\u307f\u53d6\u308b**\u3068\u3044\u3046\u52d5\u4f5c\u306b\u306a\u308b\u306e\u3067\u3001**\u4e00\u5ea6\u5927\u304d\u306a\u578b\u3067\u53d7\u3051\u3066\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\u3057\u305f\u5f8c\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b**\u3002\n``char``/``singed shar``/``unsigend char``\u578b\u306f``sizeof``\u6f14\u7b97\u5b50\u30671\u306b\u306a\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u66f8\u3051\u3070\u3044\u3044\u304c\u3001\u4eca\u306eC++\u306b\u306f**``static_if``\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u6a5f\u80fd\u306f\u7121\u3044\u306e\u3067TMP\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b**\u3002\n\u3053\u306e\u969b``std::conditional``\u3092\u4f7f\u3046\u3068\u975e\u5e38\u306b\u8aad\u307f\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\n[\u30e1\u30e2\uff1astd::conditional\u3067if\uff5eelse if\uff5eelse\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u898b\u3065\u3089\u3044](http://qiita.com/kazatsuyu/items/f8c3b304e7f8b35263d8)\n\u306e\u3084\u308a\u65b9\u3092\u4f7f\u3046\u3002\n\n# \u6210\u679c\u7269\n\n```cpp\n#include <iostream>\n#include <exception>\n#include <stdexcept>\n#include <type_traits>\n#include <limits>\n/**\n@brief  \\~japanese \u8907\u6570\u6761\u4ef6\u306e\u3042\u308bTMP\u7528if\n\\~english multi-conditional if struct for TMP.\n\\~japanese  std::enable_if\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\n\\~english   This class is used in conjunction with std::enable_if.\n\\~\n@code\ntemplate<typename T>\nusing bar = first_enabled_t<\n    std::enbale_if<cond1, type1>,\n    std::enbale_if<cond2, type2>,\n    std::enbale_if<cond3, type3>,\n    default_type\n>;\n@endcode\n*/\ntemplate<typename ...Args>\nstruct first_enabled {};\n\ntemplate<typename T, typename ...Args>\nstruct first_enabled<std::enable_if<true, T>, Args...> { using type = T; };\ntemplate<typename T, typename ...Args>\nstruct first_enabled<std::enable_if<false, T>, Args...> : first_enabled<Args...> {};\ntemplate<typename T, typename ...Args>\nstruct first_enabled<T, Args...> { using type = T; };\n\ntemplate<typename ...Args>\nusing first_enabled_t = typename first_enabled<Args...>::type;\n\n//! for int8_t/uint8_t\ntemplate<typename T, std::enable_if_t<std::is_arithmetic<T>::value, std::nullptr_t> = nullptr>\nusing arithmetic_t = first_enabled_t <\n    std::enable_if<1 != sizeof(T), T>,\n    std::enable_if<std::is_signed<T>::value, int>,\n    unsigned int\n>;\ntemplate<typename T_> using limit = std::numeric_limits<T_>;//create new type. C++11:alias declaration\n/**\n * @brief \u6a19\u6e96\u5165\u529b\u304b\u3089\u5165\u529b\u3092\u53d7\u3051\u308b\n * @details [long description]\n * \n * @param echo_str \u5165\u529b\u3092\u53d7\u3051\u308b\u524d\u306b\u8868\u793a\u3059\u308b\u6587\u5b57\u5217\u3002\u8868\u793a\u3057\u306a\u3044\u5834\u5408\u306fnullptr\u304b\u7a7a\u767d\u6587\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u305f\u6587\u5b57\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\n * @param max \u5165\u529b\u5024\u3092\u5236\u9650\u3059\u308b\u3002\u6700\u5927\u5024\u3092\u6307\u5b9a\n * @param min \u5165\u529b\u5024\u3092\u5236\u9650\u3059\u308b\u3002\u6700\u5c0f\u5024\u3092\u6307\u5b9a\n * @return \u5165\u529b\u3057\u305f\u6570\u5b57\n * @exception none\n */\ntemplate<typename T, std::enable_if_t<std::is_arithmetic<T>::value, std::nullptr_t> = nullptr>//T\u304c\u6574\u6570\u304b\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3067\u306a\u3044\u306a\u3089\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u51fa\u3059\nT input(const char* echo_str, const T max = limit<T>::max(), const T min = limit<T>::lowest()) noexcept {\n    arithmetic_t<T> buf;\n    try {\n        std::cin.exceptions(std::ios::failbit | std::ios::badbit);\n        if (nullptr != echo_str && '\\0' != echo_str[0]) std::cout << echo_str << std::endl;//\u6587\u5b57\u5217\u304c\u7a7a\u3058\u3083\u306a\u3051\u308c\u3070\u51fa\u529b\n        std::cin >> buf;//\u5165\u529b\u3092\u53d7\u3051\u308b\n        if (max < buf || buf < min) throw std::out_of_range(\"input is iligal\");//\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\n    }\n    catch (std::exception& er) {\n        std::cerr << er.what() << std::endl;//\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\n        return input(\"\u518d\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\", max, min);//\u30a8\u30e9\u30fc\u6642\u306f\u518d\u5e30\u3059\u308b\u65b9\u5411\u3067\n    }\n    return static_cast<T>(buf);\n}\n```\n\n# \u4f7f\u3044\u65b9\n\n```cpp\nint main(){\n    const auto input1 = input(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 50, 1);//input1\u306fint\u578b\n    const auto input2 = input(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 50U, 1U);//input2\u306funsigned int\u578b\n    const auto input3 = input<unsigned long long>(\"\u6570\u5b57\u30921\uff5e50\u306e\u9593\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\", 1200, 3);//input3\u306funsigned long long\u578b\n    const auto input4 = input<unsigned short>(\"\u6570\u5b57\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\");//input4\u306funsigned short\u578b\n    return 0;\n}\n```\n\n# \u7d50\u8ad6\n\n\u5185\u90e8\u5b9f\u88c5\u306f\u4f8b\u5916\u3092\u4e71\u7528\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u3001\u82e5\u5e72\u91cd\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u304c\u3001\u305d\u3082\u305d\u3082\u6a19\u6e96\u5165\u51fa\u529b\u306b\u901f\u5ea6\u3092\u6c42\u3081\u3066\u3082\u3057\u304b\u305f\u304c\u306a\u3044\u306e\u3067\u3053\u308c\u3067\u3044\u3044\u3068\u3059\u308b\u3002\n\n# \u8ffd\u8a18\n\n\u3088\u304f\u3088\u304f\u898b\u305f\u3089\u3053\u3044\u3064bool\u3067\u3082\u52d5\u304f\u305e\u30fb\u30fb\u30fb\u3002\n", "tags": ["C++", "C++11", "stdin"]}