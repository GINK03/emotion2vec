{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u52c9\u5f37\u306e\u305f\u3081\u3001python\u3067RSA\u6697\u53f7\u65b9\u5f0f\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3068\u3082\u306b\u3001\u516c\u958b\u9375\u304b\u3089\u79d8\u5bc6\u9375\u3092\u63a8\u6e2c\u3057\u3066\u307f\u305f\u3002\n\nRSA\u6697\u53f7\u65b9\u5f0f\u306e\u5b9f\u88c5\nwikipedia\u306eRSA\u6697\u53f7\u306e\u8a18\u4e8b\u3092\u898b\u306a\u304c\u3089\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001n\u3068e(\u516c\u958b\u9375)\u3067\u6697\u53f7\u5316\u3057\u3066\u3001n\u3068d(\u79d8\u5bc6\u9375)\u3067\u5fa9\u53f7\u3059\u308b\u3002n\u3068e\u306f\u516c\u958b\u3055\u308c\u308b\u304c\u3001d\u306f\u516c\u958b\u3055\u308c\u306a\u3044\u3002n\u306f\u4e8c\u3064\u306e\u7d20\u6570p,q\u3092\u639b\u3051\u5408\u308f\u305b\u305f\u6570\u3067\u3042\u308b\u3002p,q\u306f\u516c\u958b\u3055\u308c\u306a\u3044\u3002\n\u8a73\u7d30\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4e0b\u8a18\u306e\u6697\u53f7\u65b9\u5f0f\u53c2\u7167\u3002\nhttps://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7\n# coding: utf-8\n# Here your code !\nimport base64\n\nclass SquareMatrix:\n    def __init__(self, a11,a12,a21,a22):\n        self.a11 = a11\n        self.a12 = a12\n        self.a21 = a21\n        self.a22 = a22\n    def __mul__(self,other):\n        a11 = self.a11*other.a11 + self.a12*other.a21 \n        a12 = self.a11*other.a12 + self.a12*other.a22\n        a21 = self.a21*other.a11 + self.a22*other.a21\n        a22 = self.a21*other.a12 + self.a22*other.a22\n        return SquareMatrix(a11,a12,a21,a22)\n\ndef bezout(m,n):\n    if m < n:\n        n, m = m, n\n    q, r = division(m,n)\n    m, n = n, r\n    sq1 = SquareMatrix(0,1,1,q*(-1))\n    while r != 0:\n        q, r = division(m,n)\n        m, n = n, r\n        sq1 = SquareMatrix(0,1,1,q*(-1)) * sq1\n    return sq1.a11, sq1.a12\n\ndef division(m,n):\n    if m < n:\n        n, m = m, n\n    return m//n, m%n\n\ndef phy(p,q): return (p-1)*(q-1)\n\n\ndef gcd(m,n):\n    if m < n:\n        n, m = m, n\n    while n != 0:\n        m, n = n, m%n  \n    return m\n\ndef encrypt(message,n,e):\n    ret = []\n    for s in message:\n        ret.append(str(ord(s)**e % n))\n    return base64.b64encode(','.join(ret))\n\ndef get_remainder_after_power(x,y,z):\n    ans = 1\n    for i in range(y):\n        ans *= x\n        ans %= z\n    return ans\n\ndef decrypt(message,n,d):\n    ret = []\n    for s in base64.b64decode(message).split(','):\n        ret.append(chr(get_remainder_after_power(int(s), d, n)))\n    return ''.join(ret)\n\ndef gen_keys(p,q):\n    for e in range(p*q,1,-1):\n        if e < phy(p,q) and gcd(phy(p,q),e) == 1:\n            d1,d2 = bezout(e,phy(p,q))\n            if d1 > 1 and d1*e % phy(p,q) == 1:\n                return p*q,e,d1\n            elif d2 > 1 and d2*e % phy(p,q) == 1:\n                return p*q,e,d2\n\n\n\u63a8\u6e2c\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\nn\u3068e\uff08\u516c\u958b\u9375\uff09\u3068\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u79d8\u5bc6\u9375d\u306e\u63a8\u6e2c\u3092\u884c\u3046\u3002\n1. \u7d20\u6570p\u3067n\u3092\u5272\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u308a\u3001n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\u3001\u4ed6\u65b9\u306e\u7d20\u6570q\u3092\u5f97\u308b\u3002\n2. \u5f97\u3089\u308c\u305fp,q\u3092\u5143\u306b\u3001\u6697\u53f7\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u540c\u69d8\u306e\u65b9\u5f0f\u306b\u3088\u308ad\u3092\u6c42\u3081\u308b\u3002\n3. d\u304c\u6b63\u6570\u7b49\u3001\u6240\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5834\u5408\u306b\u63a8\u6e2c\u3055\u308c\u305f\u79d8\u5bc6\u9375\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\nimport myprime\nimport myrsa\n\ndef attack(pmax, n, e):\n    mp = myprime.MyPrime(pmax)\n    for p in mp.prime_generator():\n        q = n/p \n        if n%p == 0 and mp.is_prime(q):\n            d1,d2 = myrsa.bezout(e,myrsa.phy(p,q))\n            if d1 > 1 and (d1*e) % myrsa.phy(p,q) == 1:\n                return d1\n            elif d2 > 1 and (d2*e) % myrsa.phy(p,q) == 1:\n                return d2\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u306b\u3088\u3063\u3066\u7d20\u6570\u751f\u6210\u3001\u7d20\u6570\u5224\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3002\nimport math\nclass MyPrime:\n    def __init__(self,pmax):\n        self.prime_boolean = self.get_prime_boolean(pmax)\n    def get_prime_boolean(self,pmax):\n        boolean = [False,False]+[True]*(pmax-1)\n        boolean[4::2] = [False] * (len(boolean[4::2]))\n        p = 3\n        square_of_pmax = int(math.sqrt(pmax))+1\n        while p<=square_of_pmax:\n            if boolean[p]:\n                boolean[p**2::p] = [False] * (len(boolean[p**2::p]))\n            p+=2\n        return boolean\n\n    def prime_generator(self):\n        length = len(self.prime_boolean)\n        return (i for i in range(2,length) if self.prime_boolean[i])\n\n    def is_prime(self,number):\n        return self.prime_boolean[number]\n\n\n\u547c\u3073\u51fa\u3057\u5074\u30b3\u30fc\u30c9\n\u5bfe\u8c61\u306e\u6587(I love coding!)\u3092RSA\u6697\u53f7\u65b9\u5f0f\u306b\u3088\u308a\u6697\u53f7\u6587(encrypted_message)\u3092\u751f\u6210\u3059\u308b\u3002\u63a8\u6e2c\u5074\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u516c\u958b\u9375n,e\u304b\u3089\u63a8\u6e2c\u3055\u308c\u305fd\u3092\u6c42\u3081\u3001\u63a8\u6e2c\u3055\u308c\u305fd\u306b\u3088\u308a\u6697\u53f7\u6587\u3092\u5fa9\u53f7\u3059\u308b\u3002\n# coding: utf-8\n# Here your code !\n\nimport myrsa\nimport myrsaattacker\n\n#p,q: prime numbers\n#n: p*q\n#e: key for encrypt. gcd(e,(p-1)(q-1)) == 1\n#d: key for decrypt. e*d % ((p-1)(q-1)) == 1\n#see https://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7\n#p, q = 13, 17\np,q = 23, 19\nn, e, d = myrsa.gen_keys(p,q)\n\ntarget_message='I love coding!' \nprint \"target_message: %s\" % target_message\nencrypted_message = myrsa.encrypt(target_message, n, e)\nprint \"n:%s e:%s d:%s\" % (n, e, d)\nprint \"encrypted_message: %s\" % encrypted_message\nprint \"decrypted_message          : %s d:%s \" % (myrsa.decrypt(encrypted_message,n,d),d)\npmax=1000\nestimated_d = myrsaattacker.attack(pmax,n,e)\nprint \"estimated_decrypted_message: %s estimated_d: %s \" % (myrsa.decrypt(encrypted_message, n, estimated_d), estimated_d)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u5fa9\u53f7\u306b\u6210\u529f\u3057\u305f\u3002RSA\u6697\u53f7\u65b9\u5f0f\u304c\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u5b9f\u611f\u3067\u304d\u305f\u3002\ntarget_message: I love coding!\nn:437 e:391 d:79\nencrypted_message: MzQ3LDcyLDM5NSwzNjYsODUsMTE4LDcyLDE4MCwzNjYsMzYsMzc0LDIzOCwxOTgsNDA=\ndecrypted_message          : I love coding! d:79 \nestimated_decrypted_message: I love coding! estimated_d: 79 \n\n\u6982\u8981\n---\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u52c9\u5f37\u306e\u305f\u3081\u3001python\u3067RSA\u6697\u53f7\u65b9\u5f0f\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3068\u3082\u306b\u3001\u516c\u958b\u9375\u304b\u3089\u79d8\u5bc6\u9375\u3092\u63a8\u6e2c\u3057\u3066\u307f\u305f\u3002\n\nRSA\u6697\u53f7\u65b9\u5f0f\u306e\u5b9f\u88c5\n---\nwikipedia\u306eRSA\u6697\u53f7\u306e\u8a18\u4e8b\u3092\u898b\u306a\u304c\u3089\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\n\n\u57fa\u672c\u7684\u306b\u306f\u3001n\u3068e(\u516c\u958b\u9375)\u3067\u6697\u53f7\u5316\u3057\u3066\u3001n\u3068d(\u79d8\u5bc6\u9375)\u3067\u5fa9\u53f7\u3059\u308b\u3002n\u3068e\u306f\u516c\u958b\u3055\u308c\u308b\u304c\u3001d\u306f\u516c\u958b\u3055\u308c\u306a\u3044\u3002n\u306f\u4e8c\u3064\u306e\u7d20\u6570p,q\u3092\u639b\u3051\u5408\u308f\u305b\u305f\u6570\u3067\u3042\u308b\u3002p,q\u306f\u516c\u958b\u3055\u308c\u306a\u3044\u3002\n\n\u8a73\u7d30\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4e0b\u8a18\u306e\u6697\u53f7\u65b9\u5f0f\u53c2\u7167\u3002\nhttps://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7\n\n```py\n# coding: utf-8\n# Here your code !\nimport base64\n\nclass SquareMatrix:\n    def __init__(self, a11,a12,a21,a22):\n        self.a11 = a11\n        self.a12 = a12\n        self.a21 = a21\n        self.a22 = a22\n    def __mul__(self,other):\n        a11 = self.a11*other.a11 + self.a12*other.a21 \n        a12 = self.a11*other.a12 + self.a12*other.a22\n        a21 = self.a21*other.a11 + self.a22*other.a21\n        a22 = self.a21*other.a12 + self.a22*other.a22\n        return SquareMatrix(a11,a12,a21,a22)\n\ndef bezout(m,n):\n    if m < n:\n        n, m = m, n\n    q, r = division(m,n)\n    m, n = n, r\n    sq1 = SquareMatrix(0,1,1,q*(-1))\n    while r != 0:\n        q, r = division(m,n)\n        m, n = n, r\n        sq1 = SquareMatrix(0,1,1,q*(-1)) * sq1\n    return sq1.a11, sq1.a12\n\ndef division(m,n):\n    if m < n:\n        n, m = m, n\n    return m//n, m%n\n\ndef phy(p,q): return (p-1)*(q-1)\n\n\ndef gcd(m,n):\n    if m < n:\n        n, m = m, n\n    while n != 0:\n        m, n = n, m%n  \n    return m\n    \ndef encrypt(message,n,e):\n    ret = []\n    for s in message:\n        ret.append(str(ord(s)**e % n))\n    return base64.b64encode(','.join(ret))\n\ndef get_remainder_after_power(x,y,z):\n\tans = 1\n\tfor i in range(y):\n\t\tans *= x\n\t\tans %= z\n\treturn ans\n\ndef decrypt(message,n,d):\n    ret = []\n    for s in base64.b64decode(message).split(','):\n        ret.append(chr(get_remainder_after_power(int(s), d, n)))\n    return ''.join(ret)\n\ndef gen_keys(p,q):\n    for e in range(p*q,1,-1):\n        if e < phy(p,q) and gcd(phy(p,q),e) == 1:\n            d1,d2 = bezout(e,phy(p,q))\n            if d1 > 1 and d1*e % phy(p,q) == 1:\n                return p*q,e,d1\n            elif d2 > 1 and d2*e % phy(p,q) == 1:\n                return p*q,e,d2\n```\n\n\u63a8\u6e2c\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n---\nn\u3068e\uff08\u516c\u958b\u9375\uff09\u3068\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u524d\u63d0\u3067\u79d8\u5bc6\u9375d\u306e\u63a8\u6e2c\u3092\u884c\u3046\u3002\n1. \u7d20\u6570p\u3067n\u3092\u5272\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u308a\u3001n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\u3001\u4ed6\u65b9\u306e\u7d20\u6570q\u3092\u5f97\u308b\u3002\n2. \u5f97\u3089\u308c\u305fp,q\u3092\u5143\u306b\u3001\u6697\u53f7\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u540c\u69d8\u306e\u65b9\u5f0f\u306b\u3088\u308ad\u3092\u6c42\u3081\u308b\u3002\n3. d\u304c\u6b63\u6570\u7b49\u3001\u6240\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5834\u5408\u306b\u63a8\u6e2c\u3055\u308c\u305f\u79d8\u5bc6\u9375\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\n\n```py\nimport myprime\nimport myrsa\n\ndef attack(pmax, n, e):\n    mp = myprime.MyPrime(pmax)\n    for p in mp.prime_generator():\n        q = n/p \n        if n%p == 0 and mp.is_prime(q):\n            d1,d2 = myrsa.bezout(e,myrsa.phy(p,q))\n            if d1 > 1 and (d1*e) % myrsa.phy(p,q) == 1:\n                return d1\n            elif d2 > 1 and (d2*e) % myrsa.phy(p,q) == 1:\n                return d2\n```\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u306b\u3088\u3063\u3066\u7d20\u6570\u751f\u6210\u3001\u7d20\u6570\u5224\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3002\n\n```py\nimport math\nclass MyPrime:\n    def __init__(self,pmax):\n        self.prime_boolean = self.get_prime_boolean(pmax)\n    def get_prime_boolean(self,pmax):\n        boolean = [False,False]+[True]*(pmax-1)\n        boolean[4::2] = [False] * (len(boolean[4::2]))\n        p = 3\n        square_of_pmax = int(math.sqrt(pmax))+1\n        while p<=square_of_pmax:\n            if boolean[p]:\n                boolean[p**2::p] = [False] * (len(boolean[p**2::p]))\n            p+=2\n        return boolean\n\n    def prime_generator(self):\n        length = len(self.prime_boolean)\n        return (i for i in range(2,length) if self.prime_boolean[i])\n    \n    def is_prime(self,number):\n        return self.prime_boolean[number]\n```\n\n\u547c\u3073\u51fa\u3057\u5074\u30b3\u30fc\u30c9\n---\n\u5bfe\u8c61\u306e\u6587(I love coding!)\u3092RSA\u6697\u53f7\u65b9\u5f0f\u306b\u3088\u308a\u6697\u53f7\u6587(encrypted_message)\u3092\u751f\u6210\u3059\u308b\u3002\u63a8\u6e2c\u5074\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u516c\u958b\u9375n,e\u304b\u3089\u63a8\u6e2c\u3055\u308c\u305fd\u3092\u6c42\u3081\u3001\u63a8\u6e2c\u3055\u308c\u305fd\u306b\u3088\u308a\u6697\u53f7\u6587\u3092\u5fa9\u53f7\u3059\u308b\u3002\n\n```py\n# coding: utf-8\n# Here your code !\n\nimport myrsa\nimport myrsaattacker\n\n#p,q: prime numbers\n#n: p*q\n#e: key for encrypt. gcd(e,(p-1)(q-1)) == 1\n#d: key for decrypt. e*d % ((p-1)(q-1)) == 1\n#see https://ja.wikipedia.org/wiki/RSA%E6%9A%97%E5%8F%B7\n#p, q = 13, 17\np,q = 23, 19\nn, e, d = myrsa.gen_keys(p,q)\n\ntarget_message='I love coding!' \nprint \"target_message: %s\" % target_message\nencrypted_message = myrsa.encrypt(target_message, n, e)\nprint \"n:%s e:%s d:%s\" % (n, e, d)\nprint \"encrypted_message: %s\" % encrypted_message\nprint \"decrypted_message          : %s d:%s \" % (myrsa.decrypt(encrypted_message,n,d),d)\npmax=1000\nestimated_d = myrsaattacker.attack(pmax,n,e)\nprint \"estimated_decrypted_message: %s estimated_d: %s \" % (myrsa.decrypt(encrypted_message, n, estimated_d), estimated_d)\n\n```\n\n\u5b9f\u884c\u7d50\u679c\n---\n\u5fa9\u53f7\u306b\u6210\u529f\u3057\u305f\u3002RSA\u6697\u53f7\u65b9\u5f0f\u304c\u3001\u7d20\u56e0\u6570\u5206\u89e3\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u5b9f\u611f\u3067\u304d\u305f\u3002\n\n\n```\ntarget_message: I love coding!\nn:437 e:391 d:79\nencrypted_message: MzQ3LDcyLDM5NSwzNjYsODUsMTE4LDcyLDE4MCwzNjYsMzYsMzc0LDIzOCwxOTgsNDA=\ndecrypted_message          : I love coding! d:79 \nestimated_decrypted_message: I love coding! estimated_d: 79 \n```\n", "tags": ["\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3"]}