{"context": " More than 1 year has passed since last update.\n\n\u3042\u308f\u305b\u3066\u8aad\u307f\u305f\u3044\n\n\n\n\u8a00\u8a9e\n\u30ea\u30f3\u30af\n\n\n\n\nRuby\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nC++\nC++\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nPython\nPython \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u516c\u958b\n\n\nPHP\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b PHP\u7248\n\n\nC#\nC#\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nSQL\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\uff08SQL\u3067\uff09\n\n\nPowerShell\nWindowsPowerShell & C#\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nJavaScript, Groovy\nJavaScript\u3068Groovy\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nHaskell\nHaskell\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nHaskell\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u6570\u5b57\u5217\u306e\u78ba\u8a8d\n\n\nJava\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\uff08Java\u7de8\uff09\n\n\nC, Go, Bash, Excel etc...\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u306e\u691c\u7b97\u3092\u3056\u3063\u304f\u308a1\u5272\u304f\u3089\u3044\u9ad8\u901f\u5316\u3059\u308b(\u8a08\u3063\u3066\u306a\u3044\u306e\u3067\u77e5\u3089\u3093\u3051\u3069)\n\n\nGo\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092Go\u3067\u8a08\u7b97\u3059\u308b\n\n\nSwift\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092Swift\u3067\u8a08\u7b97\u3059\u308b\n\n\nVim script\nVim \u304b\u3089\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u3092\u691c\u8a3c\u51fa\u6765\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u66f8\u3044\u305f\u3002\n\n\nGauche\nScheme(Gauche)\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nOCaml\nOCaml \u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\nRust\nMy Number validator for Rust\n\n\n\n\n\u8aac\u660e\n\u6d41\u884c\u306b\u4e57\u3063\u3066\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\nRuby \u7248\u3092\u771f\u4f3c\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\nPerl5\n\nmynumber_validate.pl\n#!/usr/bin env perl\n\nuse v5.18;\nuse List::Util 'sum';\nuse feature qw(say switch);\nno warnings 'experimental';\n\n&main;exit;\n\nsub main{\n  say validate_my_number('123456789010'); #=> false\n  say validate_my_number('123456789011'); #=> false\n  say validate_my_number('123456789012'); #=> false\n  say validate_my_number('123456789013'); #=> false\n  say validate_my_number('123456789014'); #=> false\n  say validate_my_number('123456789015'); #=> false\n  say validate_my_number('123456789016'); #=> false\n  say validate_my_number('123456789017'); #=> false\n  say validate_my_number('123456789018'); #=> true\n  say validate_my_number('123456789019'); #=> false\n  say validate_my_number('023456789013'); #=> true (\u5148\u982d\u304c0\u306e\u5834\u5408)\n}\n\nsub validate_my_number{\n  # \u6574\u6570\u5217\u5316\n  my @digits = split'', $_[0];\n\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return 'false' unless @digits == 12;\n\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  my $check_digit = pop @digits;\n\n  # P(n) \u5b9a\u7fa9\n  my $P = sub {\n      my @digits = @_;\n      return sub {\n        my $n = $_[0];\n        return $digits[ -$n ];\n      };\n  }->(@digits);\n\n  # Q(n) \u5b9a\u7fa9\n  my $Q = sub {\n        my $n = $_[0];\n        return ($n<= 6) ? $n+1 : $n-5;\n  };\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  my $remainder = ( sum map{ $P->($_) * $Q->($_) } 1..11 ) % 11;\n\n  given( $remainder ){\n    when ([0,1]){\n      return $check_digit == 0 ? 'true' : 'false';\n    }\n    default{\n      return $check_digit == 11 - $remainder ? 'true' : 'false';\n    }\n  }\n}\n\n\n\nPerl6\n\nperl6_mynumber_validate.pl\nuse v6;\n\nsub MAIN (){\n  say validate_my_number('123456789010'); #=> false\n  say validate_my_number('123456789011'); #=> false\n  say validate_my_number('123456789012'); #=> false\n  say validate_my_number('123456789013'); #=> false\n  say validate_my_number('123456789014'); #=> false\n  say validate_my_number('123456789015'); #=> false\n  say validate_my_number('123456789016'); #=> false\n  say validate_my_number('123456789017'); #=> false\n  say validate_my_number('123456789018'); #=> true\n  say validate_my_number('123456789019'); #=> false\n  say validate_my_number('023456789013'); #=> true (\u5148\u982d\u304c0\u306e\u5834\u5408)\n}\n\nsub validate_my_number( Str $mynumber ){\n  # \u6574\u6570\u5217\u5316\n  my @digits = $mynumber.comb;\n\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return False unless @digits.elems == 12;\n\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  my $check_digit = @digits.pop;\n\n  # P(n) \u5b9a\u7fa9\n  my $P = sub ( @digits ) {\n      return sub ( Int $n ) {\n        return @digits[ *-$n ];\n      };\n  }.(@digits);\n\n  # Q(n) \u5b9a\u7fa9\n  my $Q = sub ( Int $n ) {\n    return ($n <= 6) ?? $n + 1 !! $n - 5;\n  };\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  my $remainder = ( [+] (1..11).map:{ $P.(+$_) * $Q.(+$_) } ) % 11;\n\n  given $remainder {\n    when 0|1 {\n      return $check_digit == 0;\n    }\n    default {\n      return $check_digit == (11 - $remainder);\n    }\n  }\n}\n\n\n\u304a\u308f\u308a\u3067\u3059\u3002\n\n\u53c2\u8003\u3084\u6ce8\u91c8\n\n\u884c\u653f\u624b\u7d9a\u306b\u304a\u3051\u308b\u7279\u5b9a\u306e\u500b\u4eba\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u756a\u53f7\u306e\u5229\u7528\u7b49\u306b\u95a2\u3059\u308b\u6cd5\u5f8b\u306e\u898f\u5b9a\u306b\u3088\u308b\u901a\u77e5\u30ab\u30fc\u30c9\u53ca\u3073\u500b\u4eba\u756a\u53f7\u30ab\u30fc\u30c9\u4e26\u3073\u306b\u60c5\u5831\u63d0\u4f9b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u308b\u7279\u5b9a\u500b\u4eba\u60c5\u5831\u306e\u63d0\u4f9b\u7b49\u306b\u95a2\u3059\u308b\u7701\u4ee4\nPerl6::Overview::Operator\nPerl 6 Types\nPerl6\u5c0e\u5165\u3068Hello, world!\nPerl5,Perl6\u3067\u914d\u5217\u306e\u672b\u5c3e\u304b\u3089\u3072\u3068\u3064\u524d\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\n\n# \u3042\u308f\u305b\u3066\u8aad\u307f\u305f\u3044\n\n| \u8a00\u8a9e | \u30ea\u30f3\u30af | \n|:-----------:|:------------|\n| Ruby | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64) |\n| C++ | [C++\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/yumetodo/items/600ca0df422010cbc4c1) |\n| Python | [Python \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u691c\u8a3c\u7528\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u516c\u958b](http://qiita.com/haminiku/items/bcf4bac82bd1ca62c746) |\n| PHP | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b PHP\u7248](http://qiita.com/rana_kualu/items/f36275032bbc6a3f18b4) |\n| C# | [C#\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/whitebell/items/5982055e6768960496db) |\n| SQL | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\uff08SQL\u3067\uff09](http://qiita.com/damassima/items/873a5ba95c32d971eb26) |\n| PowerShell | [WindowsPowerShell & C#\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/shoooo/items/42bbdd9023c14661da0a) |\n| JavaScript, Groovy | [JavaScript\u3068Groovy\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/mas0061/items/19ffdda24a9df5f4e6e2) |\n| Haskell | [Haskell\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/lotz/items/e1f3c649227271c381f6) |\n| Haskell | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u6570\u5b57\u5217\u306e\u78ba\u8a8d](http://qiita.com/nobsun/items/fc151dea83114146ad51) |\n| Java | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\uff08Java\u7de8\uff09](http://qiita.com/deaf_tadashi/items/2e7249371f2138a6a7fc) |\n| C, Go, Bash, Excel etc... | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u306e\u691c\u7b97\u3092\u3056\u3063\u304f\u308a1\u5272\u304f\u3089\u3044\u9ad8\u901f\u5316\u3059\u308b(\u8a08\u3063\u3066\u306a\u3044\u306e\u3067\u77e5\u3089\u3093\u3051\u3069)](http://qiita.com/genta/items/fb25ce50592134d3fbb8) |\n| Go | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092Go\u3067\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/f66a38b28ec58bc5c4da) |\n| Swift | [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092Swift\u3067\u8a08\u7b97\u3059\u308b](http://qiita.com/melodydance/items/4b442e3094fdea031065) |\n| Vim script | [Vim \u304b\u3089\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u3092\u691c\u8a3c\u51fa\u6765\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u66f8\u3044\u305f\u3002](http://mattn.kaoriya.net/software/vim/20151117174330.htm) |\n| Gauche | [Scheme(Gauche)\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/X___MOON___X/items/70b81090beb003534cd8) |\n| OCaml | [OCaml \u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/outerinside/items/dd74dd84a8b0b5884df2) |\n| Rust | [My Number validator for Rust](https://github.com/Tomohiro/mynumber) |\n\n# \u8aac\u660e\n\n\u6d41\u884c\u306b\u4e57\u3063\u3066\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\nRuby \u7248\u3092\u771f\u4f3c\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n### Perl5\n\n```perl:mynumber_validate.pl\n#!/usr/bin env perl\n\nuse v5.18;\nuse List::Util 'sum';\nuse feature qw(say switch);\nno warnings 'experimental';\n\n&main;exit;\n\nsub main{\n  say validate_my_number('123456789010'); #=> false\n  say validate_my_number('123456789011'); #=> false\n  say validate_my_number('123456789012'); #=> false\n  say validate_my_number('123456789013'); #=> false\n  say validate_my_number('123456789014'); #=> false\n  say validate_my_number('123456789015'); #=> false\n  say validate_my_number('123456789016'); #=> false\n  say validate_my_number('123456789017'); #=> false\n  say validate_my_number('123456789018'); #=> true\n  say validate_my_number('123456789019'); #=> false\n  say validate_my_number('023456789013'); #=> true (\u5148\u982d\u304c0\u306e\u5834\u5408)\n}\n\nsub validate_my_number{\n  # \u6574\u6570\u5217\u5316\n  my @digits = split'', $_[0];\n\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return 'false' unless @digits == 12;\n\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  my $check_digit = pop @digits;\n\n  # P(n) \u5b9a\u7fa9\n  my $P = sub {\n      my @digits = @_;\n      return sub {\n        my $n = $_[0];\n        return $digits[ -$n ];\n      };\n  }->(@digits);\n\n  # Q(n) \u5b9a\u7fa9\n  my $Q = sub {\n        my $n = $_[0];\n        return ($n<= 6) ? $n+1 : $n-5;\n  };\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  my $remainder = ( sum map{ $P->($_) * $Q->($_) } 1..11 ) % 11;\n\n  given( $remainder ){\n    when ([0,1]){\n      return $check_digit == 0 ? 'true' : 'false';\n    }\n    default{\n      return $check_digit == 11 - $remainder ? 'true' : 'false';\n    }\n  }\n}\n```\n\n### Perl6\n\n```perl:perl6_mynumber_validate.pl\nuse v6;\n\nsub MAIN (){\n  say validate_my_number('123456789010'); #=> false\n  say validate_my_number('123456789011'); #=> false\n  say validate_my_number('123456789012'); #=> false\n  say validate_my_number('123456789013'); #=> false\n  say validate_my_number('123456789014'); #=> false\n  say validate_my_number('123456789015'); #=> false\n  say validate_my_number('123456789016'); #=> false\n  say validate_my_number('123456789017'); #=> false\n  say validate_my_number('123456789018'); #=> true\n  say validate_my_number('123456789019'); #=> false\n  say validate_my_number('023456789013'); #=> true (\u5148\u982d\u304c0\u306e\u5834\u5408)\n}\n\nsub validate_my_number( Str $mynumber ){\n  # \u6574\u6570\u5217\u5316\n  my @digits = $mynumber.comb;\n\n  # 12\u6841\u3057\u304b\u8a8d\u3081\u306a\u3044\n  return False unless @digits.elems == 12;\n\n  # \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\n  my $check_digit = @digits.pop;\n\n  # P(n) \u5b9a\u7fa9\n  my $P = sub ( @digits ) {\n      return sub ( Int $n ) {\n        return @digits[ *-$n ];\n      };\n  }.(@digits);\n\n  # Q(n) \u5b9a\u7fa9\n  my $Q = sub ( Int $n ) {\n    return ($n <= 6) ?? $n + 1 !! $n - 5;\n  };\n\n  # \u6570\u5217\u306e\u548c\u309211\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8a08\u7b97\u3057\u307e\u3059\n  my $remainder = ( [+] (1..11).map:{ $P.(+$_) * $Q.(+$_) } ) % 11;\n\n  given $remainder {\n    when 0|1 {\n      return $check_digit == 0;\n    }\n    default {\n      return $check_digit == (11 - $remainder);\n    }\n  }\n}\n```\n\n\u304a\u308f\u308a\u3067\u3059\u3002\n\n# \u53c2\u8003\u3084\u6ce8\u91c8\n\n* [\u884c\u653f\u624b\u7d9a\u306b\u304a\u3051\u308b\u7279\u5b9a\u306e\u500b\u4eba\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306e\u756a\u53f7\u306e\u5229\u7528\u7b49\u306b\u95a2\u3059\u308b\u6cd5\u5f8b\u306e\u898f\u5b9a\u306b\u3088\u308b\u901a\u77e5\u30ab\u30fc\u30c9\u53ca\u3073\u500b\u4eba\u756a\u53f7\u30ab\u30fc\u30c9\u4e26\u3073\u306b\u60c5\u5831\u63d0\u4f9b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u308b\u7279\u5b9a\u500b\u4eba\u60c5\u5831\u306e\u63d0\u4f9b\u7b49\u306b\u95a2\u3059\u308b\u7701\u4ee4](http://law.e-gov.go.jp/announce/H26F11001000085.html)\n\n* [Perl6::Overview::Operator](http://search.cpan.org/dist/Perl6-Doc-0.36/lib/Perl6/Doc/Overview/Operator.pod)\n* [Perl 6 Types](http://doc.perl6.org/type.html)\n\n* [Perl6\u5c0e\u5165\u3068Hello, world!](http://qiita.com/B73W56H84/items/2153e6211ed617b4605d)\n* [Perl5,Perl6\u3067\u914d\u5217\u306e\u672b\u5c3e\u304b\u3089\u3072\u3068\u3064\u524d\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059](http://qiita.com/B73W56H84/items/d8352d06f83f9ec29ec4)\n", "tags": ["Perl", "Perl6", "algorithm"]}