{"context": "\n\n\u6982\u8981\n\u901a\u5e38\u306f\u30ea\u30b9\u30c8\u3092\u53d6\u308b\u304c\uff0c\u8981\u7d20\u304c\u4e00\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306f\u30ea\u30b9\u30c8\u306b\u305b\u305a\u5024\u3092\u76f4\u63a5\u66f8\u3044\u3066\u826f\u3044\uff0c\n\u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e YAML \u6587\u66f8\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\uff0e\n\u30b3\u30e1\u30f3\u30c8\u306b\u3066Marshaler/Unmarshaler\u306b\u3064\u3044\u3066\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u4fee\u6b63 (2017\u5e742\u67081\u65e5)\n\n\u4f8b\n\u6b21\u306e\u6587\u66f8\u306e\u3088\u3046\u306b author \u306f\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u306e\u3060\u304c\uff0c\n\nbook.yml\ntitle: some book\nauthor:\n  - Alice\n  - Bob\n\n\n\u8457\u8005\u304c\u4e00\u4eba\u3057\u304b\u3044\u306a\u3044\u5834\u5408\u306f\uff0c\n\nbook.yml\ntitle: some book\nauthor:\n  - Alice\n\n\n\u3068\n\nbook.yml\ntitle: some book\nauthor:\u3000Alice\n\n\n\u306e\u3069\u3061\u3089\u3067\u3082 OK \u3068\u3044\u3046\u3088\u3046\u306a\u5834\u5408\u3092\u8003\u3048\u308b\uff0e\n\u3053\u306e\u6642\uff0c\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u4f53\u3092\u7528\u610f\u3057\u3066\uff0c\ntype Book struct {\n    Title string\n    Author []string\n}\n\nyaml.Unmarshal \u3067\u6b21\u306e\u3088\u3046\u306b\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3068\uff0cauthor \u304c\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff0e\nt := &Book{}\n\n// data \u306f bool.yml \u306e\u30d0\u30a4\u30c8\u5217\nerr := yaml.Unmarshal([]byte(data), t)\nif err != nil {\n  log.Fatalf(\"error: %v\", err)\n}\n\n\n\u89e3\u6c7a\u7b56\nAuthor \u306e\u578b\u304c string \u3068 []string \u306e\u4e8c\u7a2e\u985e\u306e\u5834\u5408\u304c\u3042\u308b\u3053\u3068\u304c\u554f\u984c\u306a\u306e\u3067\uff0c\n\u307e\u305a\u306f\u4e00\u822c\u7684\u306a interface{} \u3067\u53d7\u3051\u3066\u304a\u3044\u3066\uff0c\u5f8c\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\u88dc\u52a9\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u3063\u3066\u8aad\u307f\u8fbc\u3080\u306b\u306f\uff0cUnmarshaler\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3089\u3057\u3044\uff0e\uff08\u53c2\u8003\uff1aDecoding YAML in Go\uff09\n\u307e\u305a\uff0c Unmarshaler \u3092\u9069\u7528\u3055\u305b\u305f\u3044\u9805\u76ee\u7528\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\ntype ListOrString []string\n\ntype Book struct {\n    Title string\n    Author ListOrString\n}\n\n\u6b21\u306b\uff0c\u3053\u306e ListOrString \u578b\u306b Unmarshaler \u3092\u5b9f\u88c5\u3055\u305b\u308b\uff0e\nfunc (e *ListOrString) UnmarshalYAML(unmarshal func(interface{}) error) (err error) {\n\n    var aux interface{}\n    if err = unmarshal(&aux); err != nil {\n        return\n    }\n\n    switch raw := aux.(type) {\n    case string:\n        *e = []string{raw}\n\n    case []interface{}:\n        list := make([]string, len(raw))\n        for i, r := range raw {\n            v, ok := r.(string)\n            if !ok {\n                return fmt.Errorf(\"An item in evn cannot be converted to a string: %v\", aux)\n            }\n            list[i] = v\n        }\n        *e = list\n\n    }\n    return\n}\n\nUnmarshalYAML \u306e\u4e2d\u3067\u306f\uff0cunmarshal\u95a2\u6570\u3092\u4f7f\u3063\u3066\u4e2d\u9593\u7684\u306a\u69cb\u9020\u4f53(aux)\u306b\u5024\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\uff0e\n\u305d\u306e\u5f8c\uff0c\u5fc5\u8981\u306a\u5909\u63db\u3092\u884c\u306a\u3063\u3066\uff0c\u76ee\u7684\u306e\u5909\u6570(*e)\u306b\u5024\u3092\u4fdd\u5b58\u3059\u308b\uff0e\n\n\u89e3\u6c7a\u7b56\uff08\u65e7\uff09\n\u6700\u521d\u306b\u6295\u7a3f\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u4e00\u5fdc\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\nAuthor \u306e\u578b\u304c string \u3068 []string \u306e\u4e8c\u7a2e\u985e\u306e\u5834\u5408\u304c\u3042\u308b\u3053\u3068\u304c\u554f\u984c\u306a\u306e\u3067\uff0c\n\u307e\u305a\u306f\u4e00\u822c\u7684\u306a interface{} \u3067\u53d7\u3051\u3066\u304a\u3044\u3066\uff0c\u5f8c\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\ntype Book struct {\n    Title string\n    RawAuthor interface{} `yaml:\"author\"`\n    Author []string `yaml:\"_author,omitempty\"`\n}\n\nYAML \u6587\u66f8\u4e2d\u306e author \u5c5e\u6027\u3092\u4e00\u65e6 interface{} \u578b\u306e RawAuthor \u306b\u5165\u308c\u308b\u305f\u3081\u306b\u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b\uff0e\n\u30bf\u30b0\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u3066\u3082 Author \u5c5e\u6027\u304c\u3042\u308b\u3068\uff0c\u305d\u3061\u3089\u304c\u512a\u5148\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u306e\u3067\uff0c\nAuthor \u5c5e\u6027\u306e\u65b9\u306b\u306f\uff0c\u30c0\u30df\u30fc\u306e _author \u3092\u4e0e\u3048\u3066\u304a\u304f\uff0e\n\u6b21\u306b\uff0c refrect \u3092\u4f7f\u3063\u3066 RawAuthor \u304b\u3089 Author \u3078\u5024\u3092\u30b3\u30d4\u30fc\u3059\u308b\uff0e\n\u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3088\u308a\u4e00\u822c\u7684\u306b\uff0c \u5c5e\u6027\u540d\u3092\u4e0e\u3048\u308b\u3068 Raw \u4ed8\u304d\u306e\u5c5e\u6027\u5024\u304b\u3089\u4e0e\u3048\u3089\u308c\u305f\u5c5e\u6027\u306b\u5024\u3092\u30b3\u30d4\u30fc\u3059\u308b\uff0e\nfunc (t *Book) parseRawField(name string) (err error) {\n\n    r := reflect.Indirect(reflect.ValueOf(t))\n    src := r.FieldByName(fmt.Sprintf(\"Raw%s\", name))\n    dest := r.FieldByName(name)\n\n    switch raw := src.Interface().(type) {\n    // \u5358\u4e00\u6587\u5b57\u5217\u306e\u5834\u5408\n    case string:\n        dest.Set(reflect.ValueOf([]string{raw}))\n\n    // \u30ea\u30b9\u30c8\u306e\u5834\u5408\n    case []interface{}:\n        list := make([]string, len(raw))\n        for i, r := range raw {\n            v, ok := r.(string)\n            if !ok {\n                return fmt.Errorf(\"Cannot convert to a string: %v\", r)\n            }\n            list[i] = v\n        }\n        dest.Set(reflect.ValueOf(list))\n    }\n    return\n\n}\n\n\u3053\u308c\u3092\u7528\u3044\u3066\uff0c\nt := &Book{}\n\n// data \u306f bool.yml \u306e\u30d0\u30a4\u30c8\u5217\nerr := yaml.Unmarshal([]byte(data), t)\nif err != nil {\n  log.Fatalf(\"error: %v\", err)\n}\nt.parseRawField(\"Author\")\n\n\u306a\u304a\uff0c\u3053\u306e\u5f8c Marshal \u3059\u308b\u3053\u3068\u304c\u306a\u3051\u308c\u3070\uff0c RawAuthor \u306f nil \u8a2d\u5b9a\u3057\u3066\u3082\u826f\u3044\uff0e\n\u9006\u306b Marshal \u3059\u308b\u5834\u5408\u306f\uff0c Author \u306e\u65b9\u3092 nil \u306b\u3057\u3066\u304b\u3089\u3067\u306a\u3044\u3068 _author \u304c\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\uff0e\n# \u6982\u8981\n\u901a\u5e38\u306f\u30ea\u30b9\u30c8\u3092\u53d6\u308b\u304c\uff0c\u8981\u7d20\u304c\u4e00\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306f\u30ea\u30b9\u30c8\u306b\u305b\u305a\u5024\u3092\u76f4\u63a5\u66f8\u3044\u3066\u826f\u3044\uff0c\n\u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e YAML \u6587\u66f8\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\uff0e\n\n**\u30b3\u30e1\u30f3\u30c8\u306b\u3066Marshaler/Unmarshaler\u306b\u3064\u3044\u3066\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u4fee\u6b63 (2017\u5e742\u67081\u65e5)**\n\n# \u4f8b\n\u6b21\u306e\u6587\u66f8\u306e\u3088\u3046\u306b author \u306f\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u306e\u3060\u304c\uff0c\n\n```book.yml\ntitle: some book\nauthor:\n  - Alice\n  - Bob\n```\n\n\u8457\u8005\u304c\u4e00\u4eba\u3057\u304b\u3044\u306a\u3044\u5834\u5408\u306f\uff0c\n\n```book.yml\ntitle: some book\nauthor:\n  - Alice\n```\n\n\u3068\n\n```book.yml\ntitle: some book\nauthor:\u3000Alice\n```\n\n\u306e\u3069\u3061\u3089\u3067\u3082 OK \u3068\u3044\u3046\u3088\u3046\u306a\u5834\u5408\u3092\u8003\u3048\u308b\uff0e\n\u3053\u306e\u6642\uff0c\u6b21\u306e\u3088\u3046\u306a\u69cb\u9020\u4f53\u3092\u7528\u610f\u3057\u3066\uff0c\n\n```go\ntype Book struct {\n    Title string\n    Author []string\n}\n```\n\n[yaml.Unmarshal](https://github.com/go-yaml/yaml) \u3067\u6b21\u306e\u3088\u3046\u306b\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3068\uff0c`author` \u304c\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\uff0e\n\n```go\nt := &Book{}\n\n// data \u306f bool.yml \u306e\u30d0\u30a4\u30c8\u5217\nerr := yaml.Unmarshal([]byte(data), t)\nif err != nil {\n  log.Fatalf(\"error: %v\", err)\n}\n```\n\n# \u89e3\u6c7a\u7b56\nAuthor \u306e\u578b\u304c string \u3068 []string \u306e\u4e8c\u7a2e\u985e\u306e\u5834\u5408\u304c\u3042\u308b\u3053\u3068\u304c\u554f\u984c\u306a\u306e\u3067\uff0c\n\u307e\u305a\u306f\u4e00\u822c\u7684\u306a interface{} \u3067\u53d7\u3051\u3066\u304a\u3044\u3066\uff0c\u5f8c\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\n\u88dc\u52a9\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u3063\u3066\u8aad\u307f\u8fbc\u3080\u306b\u306f\uff0c[Unmarshaler](https://godoc.org/gopkg.in/yaml.v2#Unmarshaler)\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3089\u3057\u3044\uff0e\uff08\u53c2\u8003\uff1a[Decoding YAML in Go](https://mlafeldt.github.io/blog/decoding-yaml-in-go/)\uff09\n\n\u307e\u305a\uff0c Unmarshaler \u3092\u9069\u7528\u3055\u305b\u305f\u3044\u9805\u76ee\u7528\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\n```go\ntype ListOrString []string\n\ntype Book struct {\n    Title string\n    Author ListOrString\n}\n```\n\n\u6b21\u306b\uff0c\u3053\u306e ListOrString \u578b\u306b Unmarshaler \u3092\u5b9f\u88c5\u3055\u305b\u308b\uff0e\n\n```go\nfunc (e *ListOrString) UnmarshalYAML(unmarshal func(interface{}) error) (err error) {\n\n    var aux interface{}\n    if err = unmarshal(&aux); err != nil {\n        return\n    }\n\n    switch raw := aux.(type) {\n    case string:\n        *e = []string{raw}\n\n    case []interface{}:\n        list := make([]string, len(raw))\n        for i, r := range raw {\n            v, ok := r.(string)\n            if !ok {\n                return fmt.Errorf(\"An item in evn cannot be converted to a string: %v\", aux)\n            }\n            list[i] = v\n        }\n        *e = list\n\n    }\n    return\n}\n```\n\nUnmarshalYAML \u306e\u4e2d\u3067\u306f\uff0cunmarshal\u95a2\u6570\u3092\u4f7f\u3063\u3066\u4e2d\u9593\u7684\u306a\u69cb\u9020\u4f53(aux)\u306b\u5024\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\uff0e\n\u305d\u306e\u5f8c\uff0c\u5fc5\u8981\u306a\u5909\u63db\u3092\u884c\u306a\u3063\u3066\uff0c\u76ee\u7684\u306e\u5909\u6570(*e)\u306b\u5024\u3092\u4fdd\u5b58\u3059\u308b\uff0e\n\n\n\n\n\n# \u89e3\u6c7a\u7b56\uff08\u65e7\uff09\n**\u6700\u521d\u306b\u6295\u7a3f\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u4e00\u5fdc\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059**\uff0e\n\nAuthor \u306e\u578b\u304c string \u3068 []string \u306e\u4e8c\u7a2e\u985e\u306e\u5834\u5408\u304c\u3042\u308b\u3053\u3068\u304c\u554f\u984c\u306a\u306e\u3067\uff0c\n\u307e\u305a\u306f\u4e00\u822c\u7684\u306a interface{} \u3067\u53d7\u3051\u3066\u304a\u3044\u3066\uff0c\u5f8c\u3067\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3059\u308b\uff0e\n\n```go\ntype Book struct {\n    Title string\n    RawAuthor interface{} `yaml:\"author\"`\n    Author []string `yaml:\"_author,omitempty\"`\n}\n```\n\nYAML \u6587\u66f8\u4e2d\u306e author \u5c5e\u6027\u3092\u4e00\u65e6 interface{} \u578b\u306e RawAuthor \u306b\u5165\u308c\u308b\u305f\u3081\u306b\u30bf\u30b0\u3092\u8a2d\u5b9a\u3059\u308b\uff0e\n\u30bf\u30b0\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u3066\u3082 Author \u5c5e\u6027\u304c\u3042\u308b\u3068\uff0c\u305d\u3061\u3089\u304c\u512a\u5148\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u306e\u3067\uff0c\nAuthor \u5c5e\u6027\u306e\u65b9\u306b\u306f\uff0c\u30c0\u30df\u30fc\u306e _author \u3092\u4e0e\u3048\u3066\u304a\u304f\uff0e\n\n\u6b21\u306b\uff0c refrect \u3092\u4f7f\u3063\u3066 RawAuthor \u304b\u3089 Author \u3078\u5024\u3092\u30b3\u30d4\u30fc\u3059\u308b\uff0e\n\u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3088\u308a\u4e00\u822c\u7684\u306b\uff0c \u5c5e\u6027\u540d\u3092\u4e0e\u3048\u308b\u3068 Raw \u4ed8\u304d\u306e\u5c5e\u6027\u5024\u304b\u3089\u4e0e\u3048\u3089\u308c\u305f\u5c5e\u6027\u306b\u5024\u3092\u30b3\u30d4\u30fc\u3059\u308b\uff0e\n\n```go\nfunc (t *Book) parseRawField(name string) (err error) {\n\n    r := reflect.Indirect(reflect.ValueOf(t))\n    src := r.FieldByName(fmt.Sprintf(\"Raw%s\", name))\n    dest := r.FieldByName(name)\n\n    switch raw := src.Interface().(type) {\n    // \u5358\u4e00\u6587\u5b57\u5217\u306e\u5834\u5408\n    case string:\n        dest.Set(reflect.ValueOf([]string{raw}))\n\n    // \u30ea\u30b9\u30c8\u306e\u5834\u5408\n    case []interface{}:\n        list := make([]string, len(raw))\n        for i, r := range raw {\n            v, ok := r.(string)\n            if !ok {\n                return fmt.Errorf(\"Cannot convert to a string: %v\", r)\n            }\n            list[i] = v\n        }\n        dest.Set(reflect.ValueOf(list))\n    }\n    return\n\n}\n```\n\n\u3053\u308c\u3092\u7528\u3044\u3066\uff0c\n\n```go\nt := &Book{}\n\n// data \u306f bool.yml \u306e\u30d0\u30a4\u30c8\u5217\nerr := yaml.Unmarshal([]byte(data), t)\nif err != nil {\n  log.Fatalf(\"error: %v\", err)\n}\nt.parseRawField(\"Author\")\n```\n\n\u306a\u304a\uff0c\u3053\u306e\u5f8c Marshal \u3059\u308b\u3053\u3068\u304c\u306a\u3051\u308c\u3070\uff0c RawAuthor \u306f nil \u8a2d\u5b9a\u3057\u3066\u3082\u826f\u3044\uff0e\n\u9006\u306b Marshal \u3059\u308b\u5834\u5408\u306f\uff0c Author \u306e\u65b9\u3092 nil \u306b\u3057\u3066\u304b\u3089\u3067\u306a\u3044\u3068 _author \u304c\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\uff0e\n", "tags": ["Go", "YAML"]}