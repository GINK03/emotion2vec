{"context": " More than 1 year has passed since last update.\u524d\u56de\u4f5c\u3063\u305f\u51e6\u7406\u3092\u3082\u3046\u3061\u3087\u3063\u3068\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nutility\n\u307e\u305autility\u95a2\u6570\u3002split-group\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3092\u3061\u3087\u3063\u3068\u5909\u66f4\u3057\u3066\u3044\u308b\u306e\u3067\u518d\u63b2\u3067\u3059\u3002\n(defun read-binary-file (path)\n  (with-open-file (in path :element-type '(unsigned-byte 8))\n    (let ((bin (make-array (file-length in) :element-type '(unsigned-byte 8))))\n      (read-sequence bin in)\n      bin)))\n\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (1- num) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split-group (list num-list &key (rest-p nil))\n  (labels ((split-n (list num-list acc)\n             (cond ((or (and (not rest-p)\n                             (or (null list)\n                                 (null num-list)))\n                        (and rest-p\n                             (null list)))\n                    (nreverse acc))\n                   ((and rest-p\n                         (null num-list))\n                    (nreverse (cons list acc)))\n                   (t\n                    (multiple-value-bind (taken-list rest-list)\n                        (take-list list (car num-list))\n                      (split-n rest-list (cdr num-list) (cons taken-list acc)))))))\n    (split-n list num-list '())))\n\n(defun little-endian-to-num (list)\n  (loop for x in list\n        for idx upfrom 0\n        sum (ash x (* idx 8))))\n\n\n\u30af\u30e9\u30b9\u5b9a\u7fa9\n\u89e3\u6790\u4e2d\u306b\u4f55\u304b\u60c5\u5831\u3092\u5165\u308c\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u524d\u56de\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3082\u30a2\u30af\u30bb\u30b5\u3092\u8ffd\u52a0\u3057\u3066\u30b9\u30ed\u30c3\u30c8\u540d\u3092\u4e00\u90e8\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n(defclass <zip-header-base> ()\n  ())\n\n(defclass <zip-header> (<zip-header-base>)\n  ((version-extract :accessor version-extract)\n   (flag :accessor flag)\n   (compression :accessor compression)\n   (mod-time :accessor mod-time)\n   (mod-date :accessor mod-date)\n   (crc32 :accessor crc32)\n   (compressed-size :accessor compressed-size)\n   (uncompressed-size :accessor uncompressed-size)\n   (filename-length :accessor filename-length)\n   (extrafield-length :accessor extrafield-length)\n   (filename :accessor filename)\n   (extrafield :accessor extrafield)\n   (data :accessor data)))\n\n(defclass <zip-central-header> (<zip-header-base>)\n  ((version-made-by :accessor version-made-by)\n   (version-extract :accessor version-extract)\n   (flag :accessor flag)\n   (compression :accessor compression)\n   (mod-time :accessor mod-time)\n   (mod-date :accessor mod-date)\n   (crc32 :accessor crc32)\n   (compressed-size :accessor compressed-size)\n   (uncompressed-size :accessor uncompressed-size)\n   (filename-length :accessor filename-length)\n   (extrafield-length :accessor extrafield-length)\n   (filecomment-length :accessor filecomment-length)\n   (disknumber-start :accessor disknumber-start)\n   (internal-attributes :accessor internal-attributes)\n   (external-attributes :accessor external-attributes)\n   (offset :accessor offset)\n   (filename :accessor filename)\n   (extrafield :accessor extrafield)\n   (filecomment :accessor filecomment)))\n\n(defclass <zip-end-header> (<zip-header-base>)\n  ((disk-number :accessor disk-number)\n   (first-disk :accessor first-disk)\n   (disk-entries :accessor disk-entries)\n   (zip-entries :accessor zip-entries)\n   (total-size :accessor total-size)\n   (offset :accessor offset)\n   (comment-size :accessor comment-size)\n   (comment :accessor comment)))\n\n\n\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n\u30b5\u30a4\u30ba\u56fa\u5b9a\u306e\u9805\u76ee\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u3001\u30b5\u30a4\u30ba\u53ef\u5909\u306e\u9805\u76ee\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u57fa\u672c\u7684\u306b\u3069\u306e\u30d8\u30c3\u30c0\u3082\u540c\u3058\u65b9\u6cd5\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u3092\u591a\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002read-zip-end-header\u306f\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u304c\u7121\u3044\u60f3\u5b9a\u306a\u306e\u3067\u3001nil\u3092\u8fd4\u3057\u307e\u3059\u3002\n(defun read-zip-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   )\n                            :rest-p t ; file name, extra field, data\n                                   ))\n        (inst (make-instance '<zip-header>)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'mod-time) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'mod-date) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 10 items)))\n\n    (let ((rest-items (split-group (nth 11 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'compressed-size))\n                                   :rest-p t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'data) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n\n(defun read-zip-central-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version made by\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   2 ; file comment length\n                                   2 ; disk number start\n                                   2 ; internal file attributes\n                                   4 ; external file attributes\n                                   4 ; relative offset of local header\n                                   )\n                            :rest-p t  ; file name, extra field, file comment\n                            ))\n        (inst (make-instance '<zip-central-header>)))\n    (setf (slot-value inst 'version-made-by) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'mod-time) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'mod-date) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 10 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 11 items)))\n    (setf (slot-value inst 'filecomment-length) (little-endian-to-num (nth 12 items)))\n    (setf (slot-value inst 'disknumber-start) (little-endian-to-num (nth 13 items)))\n    (setf (slot-value inst 'internal-attributes) (little-endian-to-num (nth 14 items)))\n    (setf (slot-value inst 'external-attributes) (little-endian-to-num (nth 15 items)))\n    (setf (slot-value inst 'offset) (little-endian-to-num (nth 16 items)))\n\n    (let ((rest-items (split-group (nth 17 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'filecomment-length))\n                                   :rest-p t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'filecomment) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n\n(defun read-zip-end-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; number of this disk\n                                   2 ; number of the disk with the start of the central directory\n                                   2 ; number of the entries in the central directory on this disk\n                                   2 ; total number of entries in the central directory\n                                   4 ; size of the central directory\n                                   4 ; offset of start of central directory with respect to the starting disk number\n                                   2 ; zip file comment length\n                                   )\n                            :rest-p t  ; zip file comment\n                            ))\n        (inst (make-instance '<zip-end-header>)))\n    (setf (slot-value inst 'disk-number) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'first-disk) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'disk-entries) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'zip-entries) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'total-size) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'offset) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'comment-size) (little-endian-to-num (nth 7 items)))\n\n    (let ((rest-items (split-group (nth 8 items) `(,(slot-value inst 'comment-size)))))\n      (setf (slot-value inst 'comment) (nth 1 rest-items))\n\n      (values inst '()))))\n\n\nData Descriptor\u306e\u5b58\u5728\n\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u5f8c\u308d\u306b\u5b58\u5728\u3057\u305f\u308a\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3082\u3042\u3063\u305f\u308a\u306a\u304b\u3063\u305f\u308a\u3001\u30d1\u30fc\u30b5\u6ce3\u304b\u305b\u306e\u5b58\u5728\u3067\u3059\u3002\n\u304a\u305d\u3089\u304f\u30c6\u30fc\u30d7\u3068\u304b\u306b\u5727\u7e2e\u3057\u306a\u304c\u3089\u66f8\u304d\u8fbc\u3080\u3068\u304d\u306b\u4f7f\u3063\u3066\u3044\u305f\u9805\u76ee\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\nseek-next-header\u3068\u3044\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3001\"PK\"\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u59cb\u307e\u308b\u307e\u3067\u8aad\u307f\u98db\u3070\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nData Descriptor\u306e\u30b5\u30a4\u30ba\u306f\u56fa\u5b9a\u306a\u306e\u3067\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u3042\u308bData Descriptor\u306e\u5834\u5408\u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u5224\u5b9a\u5f8c\u306b\u8aad\u307f\u98db\u3070\u3057\u307e\u3059\u3002\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u306a\u3044Data Descriptor\u306f\u305d\u3082\u305d\u3082seek-next-header\u3067\u8aad\u307f\u98db\u3070\u3057\u6e08\u307f\u3067\u3059\u3002\n(defun seek-next-header (data)\n  (labels ((begin-seek (d)\n             (cond ((null d)\n                    data)\n                   ((= (car d) #x50)\n                    (in-p d))\n                   (t\n                    (begin-seek (cdr d)))))\n           (in-p (d)\n             (cond ((null d)\n                    data)\n                   ((= (cadr d) #x4B)\n                    d)\n                   (t\n                    (begin-seek (cdr d))))))\n    (begin-seek data)))\n\n\n\u30d1\u30fc\u30b9\n\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u5f8c\u307e\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n(defun zip-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x03 #x04))))\n\n(defun zip-central-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x01 #x02))))\n\n(defun zip-end-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x05 #x06))))\n\n(defun zip-data-descriptor-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x07 #x08))))\n\n\u30d1\u30fc\u30b9\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u3066\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u95a2\u6570\u306b\u3057\u307e\u3059\u3002\n(defun parse-zip (data &key (header-fn nil) (central-header-fn nil) (end-header-fn nil))\n  (labels ((parse-main (data inst-list)\n             (cond \n                   ;; \u30d1\u30fc\u30b9\u7d42\u4e86\n                   ((null data)\n                    (nreverse inst-list))\n\n                   ;; \u30ed\u30fc\u30ab\u30eb\u30d8\u30c3\u30c0\n                   ((zip-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-header data)\n                      (when header-fn\n                        (funcall header-fn inst))\n                      (parse-main (seek-next-header rest) (cons inst inst-list))))\n\n                   ;; Data Descriptor\uff08\u8aad\u307f\u98db\u3070\u3057\uff09\n                   ((zip-data-descriptor-p data)\n                    (parse-main (seek-next-header (subseq data 16)) inst-list))\n\n                   ;; \u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\n                   ((zip-central-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-central-header data)\n                      (when central-header-fn\n                        (funcall central-header-fn inst))\n                      (parse-main (seek-next-header rest) (cons inst inst-list))))\n\n                   ;; \u30a8\u30f3\u30c9\u30d8\u30c3\u30c0\n                   ((zip-end-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-end-header data)\n                      (declare (ignore rest))\n                      (when end-header-fn\n                        (funcall end-header-fn inst))\n                      (parse-main nil (cons inst inst-list))))\n\n                   ;; \u4e0d\u660e\n                   (t\n                    (error (format nil \"unknown header:~{ ~A~}\"\n                                   (subseq data 0 (min 4 (length data)))))))))\n    (parse-main data '())))\n\n\u30d5\u30c3\u30af\u51e6\u7406\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7c21\u5358\u306a\u89e3\u6790\u3068\u304b\u306f\u3053\u308c\u3067\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306fzip\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u3046\u3061\u3001\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5f97\u308b\u51e6\u7406\u3067\u3059\u3002\nCL-USER> (let ((ng-files))\n           (parse-zip (coerce (read-binary-file #p\"/home/shingo/test.zip\") 'list)\n                      :header-fn\n                      #'(lambda (inst)\n                          (when (not (= #x01\n                                        (logand #x01 (flag inst))))\n                            (push (format nil \"~{~C~}\" (mapcar #'code-char (filename inst))) ng-files))))\n           (nreverse ng-files))\n\n(\"test.txt\")\n\n\u524d\u56de\u4f5c\u3063\u305f\u51e6\u7406\u3092\u3082\u3046\u3061\u3087\u3063\u3068\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n## utility\n\u307e\u305autility\u95a2\u6570\u3002split-group\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3092\u3061\u3087\u3063\u3068\u5909\u66f4\u3057\u3066\u3044\u308b\u306e\u3067\u518d\u63b2\u3067\u3059\u3002\n\n```cl:\n(defun read-binary-file (path)\n  (with-open-file (in path :element-type '(unsigned-byte 8))\n    (let ((bin (make-array (file-length in) :element-type '(unsigned-byte 8))))\n      (read-sequence bin in)\n      bin)))\n\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (1- num) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split-group (list num-list &key (rest-p nil))\n  (labels ((split-n (list num-list acc)\n             (cond ((or (and (not rest-p)\n                             (or (null list)\n                                 (null num-list)))\n                        (and rest-p\n                             (null list)))\n                    (nreverse acc))\n                   ((and rest-p\n                         (null num-list))\n                    (nreverse (cons list acc)))\n                   (t\n                    (multiple-value-bind (taken-list rest-list)\n                        (take-list list (car num-list))\n                      (split-n rest-list (cdr num-list) (cons taken-list acc)))))))\n    (split-n list num-list '())))\n\n(defun little-endian-to-num (list)\n  (loop for x in list\n        for idx upfrom 0\n        sum (ash x (* idx 8))))\n```\n\n## \u30af\u30e9\u30b9\u5b9a\u7fa9\n\n\u89e3\u6790\u4e2d\u306b\u4f55\u304b\u60c5\u5831\u3092\u5165\u308c\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u524d\u56de\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u3082\u30a2\u30af\u30bb\u30b5\u3092\u8ffd\u52a0\u3057\u3066\u30b9\u30ed\u30c3\u30c8\u540d\u3092\u4e00\u90e8\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cl:\n(defclass <zip-header-base> ()\n  ())\n\n(defclass <zip-header> (<zip-header-base>)\n  ((version-extract :accessor version-extract)\n   (flag :accessor flag)\n   (compression :accessor compression)\n   (mod-time :accessor mod-time)\n   (mod-date :accessor mod-date)\n   (crc32 :accessor crc32)\n   (compressed-size :accessor compressed-size)\n   (uncompressed-size :accessor uncompressed-size)\n   (filename-length :accessor filename-length)\n   (extrafield-length :accessor extrafield-length)\n   (filename :accessor filename)\n   (extrafield :accessor extrafield)\n   (data :accessor data)))\n\n(defclass <zip-central-header> (<zip-header-base>)\n  ((version-made-by :accessor version-made-by)\n   (version-extract :accessor version-extract)\n   (flag :accessor flag)\n   (compression :accessor compression)\n   (mod-time :accessor mod-time)\n   (mod-date :accessor mod-date)\n   (crc32 :accessor crc32)\n   (compressed-size :accessor compressed-size)\n   (uncompressed-size :accessor uncompressed-size)\n   (filename-length :accessor filename-length)\n   (extrafield-length :accessor extrafield-length)\n   (filecomment-length :accessor filecomment-length)\n   (disknumber-start :accessor disknumber-start)\n   (internal-attributes :accessor internal-attributes)\n   (external-attributes :accessor external-attributes)\n   (offset :accessor offset)\n   (filename :accessor filename)\n   (extrafield :accessor extrafield)\n   (filecomment :accessor filecomment)))\n\n(defclass <zip-end-header> (<zip-header-base>)\n  ((disk-number :accessor disk-number)\n   (first-disk :accessor first-disk)\n   (disk-entries :accessor disk-entries)\n   (zip-entries :accessor zip-entries)\n   (total-size :accessor total-size)\n   (offset :accessor offset)\n   (comment-size :accessor comment-size)\n   (comment :accessor comment)))\n```\n\n## \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n\n\u30b5\u30a4\u30ba\u56fa\u5b9a\u306e\u9805\u76ee\u3092\u8aad\u307f\u8fbc\u3093\u3060\u3042\u3068\u3001\u30b5\u30a4\u30ba\u53ef\u5909\u306e\u9805\u76ee\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u57fa\u672c\u7684\u306b\u3069\u306e\u30d8\u30c3\u30c0\u3082\u540c\u3058\u65b9\u6cd5\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u3092\u591a\u5024\u3067\u8fd4\u3057\u307e\u3059\u3002read-zip-end-header\u306f\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u304c\u7121\u3044\u60f3\u5b9a\u306a\u306e\u3067\u3001nil\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```cl:\n(defun read-zip-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   )\n                            :rest-p t ; file name, extra field, data\n                                   ))\n        (inst (make-instance '<zip-header>)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'mod-time) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'mod-date) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 10 items)))\n\n    (let ((rest-items (split-group (nth 11 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'compressed-size))\n                                   :rest-p t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'data) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n\n(defun read-zip-central-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version made by\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   2 ; file comment length\n                                   2 ; disk number start\n                                   2 ; internal file attributes\n                                   4 ; external file attributes\n                                   4 ; relative offset of local header\n                                   )\n                            :rest-p t  ; file name, extra field, file comment\n                            ))\n        (inst (make-instance '<zip-central-header>)))\n    (setf (slot-value inst 'version-made-by) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'mod-time) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'mod-date) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 10 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 11 items)))\n    (setf (slot-value inst 'filecomment-length) (little-endian-to-num (nth 12 items)))\n    (setf (slot-value inst 'disknumber-start) (little-endian-to-num (nth 13 items)))\n    (setf (slot-value inst 'internal-attributes) (little-endian-to-num (nth 14 items)))\n    (setf (slot-value inst 'external-attributes) (little-endian-to-num (nth 15 items)))\n    (setf (slot-value inst 'offset) (little-endian-to-num (nth 16 items)))\n\n    (let ((rest-items (split-group (nth 17 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'filecomment-length))\n                                   :rest-p t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'filecomment) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n\n(defun read-zip-end-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; number of this disk\n                                   2 ; number of the disk with the start of the central directory\n                                   2 ; number of the entries in the central directory on this disk\n                                   2 ; total number of entries in the central directory\n                                   4 ; size of the central directory\n                                   4 ; offset of start of central directory with respect to the starting disk number\n                                   2 ; zip file comment length\n                                   )\n                            :rest-p t  ; zip file comment\n                            ))\n        (inst (make-instance '<zip-end-header>)))\n    (setf (slot-value inst 'disk-number) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'first-disk) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'disk-entries) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'zip-entries) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'total-size) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'offset) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'comment-size) (little-endian-to-num (nth 7 items)))\n    \n    (let ((rest-items (split-group (nth 8 items) `(,(slot-value inst 'comment-size)))))\n      (setf (slot-value inst 'comment) (nth 1 rest-items))\n      \n      (values inst '()))))\n```\n\n## Data Descriptor\u306e\u5b58\u5728\n\n\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u5f8c\u308d\u306b\u5b58\u5728\u3057\u305f\u308a\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3082\u3042\u3063\u305f\u308a\u306a\u304b\u3063\u305f\u308a\u3001\u30d1\u30fc\u30b5\u6ce3\u304b\u305b\u306e\u5b58\u5728\u3067\u3059\u3002\n\u304a\u305d\u3089\u304f\u30c6\u30fc\u30d7\u3068\u304b\u306b\u5727\u7e2e\u3057\u306a\u304c\u3089\u66f8\u304d\u8fbc\u3080\u3068\u304d\u306b\u4f7f\u3063\u3066\u3044\u305f\u9805\u76ee\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\nseek-next-header\u3068\u3044\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3001\"PK\"\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u59cb\u307e\u308b\u307e\u3067\u8aad\u307f\u98db\u3070\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nData Descriptor\u306e\u30b5\u30a4\u30ba\u306f\u56fa\u5b9a\u306a\u306e\u3067\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u3042\u308bData Descriptor\u306e\u5834\u5408\u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u5224\u5b9a\u5f8c\u306b\u8aad\u307f\u98db\u3070\u3057\u307e\u3059\u3002\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u306a\u3044Data Descriptor\u306f\u305d\u3082\u305d\u3082seek-next-header\u3067\u8aad\u307f\u98db\u3070\u3057\u6e08\u307f\u3067\u3059\u3002\n\n```cl:\n(defun seek-next-header (data)\n  (labels ((begin-seek (d)\n             (cond ((null d)\n                    data)\n                   ((= (car d) #x50)\n                    (in-p d))\n                   (t\n                    (begin-seek (cdr d)))))\n           (in-p (d)\n             (cond ((null d)\n                    data)\n                   ((= (cadr d) #x4B)\n                    d)\n                   (t\n                    (begin-seek (cdr d))))))\n    (begin-seek data)))\n```\n\n## \u30d1\u30fc\u30b9\n\n\u30d5\u30a1\u30a4\u30eb\u3092\u6700\u5f8c\u307e\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\n```cl:\n(defun zip-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x03 #x04))))\n\n(defun zip-central-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x01 #x02))))\n\n(defun zip-end-header-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x05 #x06))))\n\n(defun zip-data-descriptor-p (data)\n  (let ((signature (subseq data 0 4)))\n    (equal signature '(#x50 #x4B #x07 #x08))))\n```\n\n\u30d1\u30fc\u30b9\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u3066\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u95a2\u6570\u306b\u3057\u307e\u3059\u3002\n\n```cl:\n(defun parse-zip (data &key (header-fn nil) (central-header-fn nil) (end-header-fn nil))\n  (labels ((parse-main (data inst-list)\n             (cond \n                   ;; \u30d1\u30fc\u30b9\u7d42\u4e86\n                   ((null data)\n                    (nreverse inst-list))\n\n                   ;; \u30ed\u30fc\u30ab\u30eb\u30d8\u30c3\u30c0\n                   ((zip-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-header data)\n                      (when header-fn\n                        (funcall header-fn inst))\n                      (parse-main (seek-next-header rest) (cons inst inst-list))))\n\n                   ;; Data Descriptor\uff08\u8aad\u307f\u98db\u3070\u3057\uff09\n                   ((zip-data-descriptor-p data)\n                    (parse-main (seek-next-header (subseq data 16)) inst-list))\n\n                   ;; \u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\n                   ((zip-central-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-central-header data)\n                      (when central-header-fn\n                        (funcall central-header-fn inst))\n                      (parse-main (seek-next-header rest) (cons inst inst-list))))\n\n                   ;; \u30a8\u30f3\u30c9\u30d8\u30c3\u30c0\n                   ((zip-end-header-p data)\n                    (multiple-value-bind (inst rest)\n                        (read-zip-end-header data)\n                      (declare (ignore rest))\n                      (when end-header-fn\n                        (funcall end-header-fn inst))\n                      (parse-main nil (cons inst inst-list))))\n\n                   ;; \u4e0d\u660e\n                   (t\n                    (error (format nil \"unknown header:~{ ~A~}\"\n                                   (subseq data 0 (min 4 (length data)))))))))\n    (parse-main data '())))\n```\n\n\u30d5\u30c3\u30af\u51e6\u7406\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7c21\u5358\u306a\u89e3\u6790\u3068\u304b\u306f\u3053\u308c\u3067\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306fzip\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u3046\u3061\u3001\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5f97\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```cl:\nCL-USER> (let ((ng-files))\n           (parse-zip (coerce (read-binary-file #p\"/home/shingo/test.zip\") 'list)\n                      :header-fn\n                      #'(lambda (inst)\n                          (when (not (= #x01\n                                        (logand #x01 (flag inst))))\n                            (push (format nil \"~{~C~}\" (mapcar #'code-char (filename inst))) ng-files))))\n           (nreverse ng-files))\n\n(\"test.txt\")\n```\n", "tags": ["CommonLisp", "common-lisp"]}