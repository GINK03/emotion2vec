{"tags": ["Unity", "udp", "UniRx"], "context": "\n\nUnity\u3067Udp\u53d7\u4fe1\u3092\u9ad8\u901f\u306b\u884c\u3046\nUnity\u3067\u306eUDP\u53d7\u4fe1\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3064\u3044\u3066\u306e\u6295\u7a3f\u306f\u3059\u3067\u306bnenjiru\u3055\u3093\u306eUnity\u3067UDP\u3092\u53d7\u4fe1\u3057\u3066\u307f\u308b\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u7528\u3044\u308b\u65b9\u6cd5\u3060\u30681\u30d5\u30ec\u30fc\u30e0\u306b\u4e00\u56de\u3057\u304b\u53d7\u4fe1\u3092\u884c\u3048\u305a\u3001\u77ed\u6642\u9593\u306b\u8907\u6570\u306eUdp\u30d1\u30b1\u30c3\u30c8\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u3068\u634c\u3051\u305a\u306b\u3053\u307c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u306a\u304c\u3089\u53d7\u4fe1\u3059\u308b\u3053\u3068\u3067\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u305b\u305a\u3001\u304b\u3064\u5225\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u3082\u6271\u3044\u3084\u3059\u3044UDP\u53d7\u4fe1\u3092\u884c\u3046\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u306e\u3067\u30b7\u30a7\u30a2\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n(\u6ce8)\u3042\u3089\u304b\u3058\u3081UniRx\u306eAssert\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\nUdpReceiverRx.cs\n\n//UdpReceiverRx.cs\n//UniRx\u3092\u7528\u3044\u3066\u9ad8\u901f\u306aUdp\u53d7\u4fe1\u3092\u884c\u3046\n\nnamespace UdpReceiverUniRx {\n\nusing UnityEngine;\nusing System.Net;\nusing System.Net.Sockets;\nusing UniRx;\n\npublic class UdpState : System.IEquatable<UdpState>\n{\n    //UDP\u901a\u4fe1\u306e\u60c5\u5831\u3092\u53ce\u3081\u308b\u3002\u9001\u53d7\u4fe1\u3068\u3082\u306b\u4f7f\u3048\u308b\n    public IPEndPoint EndPoint {get; set;}\n    public string UdpMsg {get; set;}\n\n    public UdpState(IPEndPoint ep, string udpMsg)\n    {\n        this.EndPoint = ep;\n        this.UdpMsg = udpMsg;\n    }\n    public override int GetHashCode() {\n        return EndPoint.Address.GetHashCode();\n    }\n\n    public bool Equals(UdpState s)\n    {\n        if ( s == null ) {\n            return false;\n        }\n        return EndPoint.Address.Equals(s.EndPoint.Address);\n    }\n}\n\npublic class UdpReceiverRx : MonoBehaviour\n{\n    private const int listenPort = 10000;\n    private static UdpClient myClient;\n    private bool isAppQuitting;\n    public IObservable<UdpState> _udpSequence;\n\n    void Awake()\n    {\n        _udpSequence = Observable.Create<UdpState>(observer =>\n        {\n            Debug.Log(string.Format(\"_udpSequence thread: {0}\", System.Threading.Thread.CurrentThread.ManagedThreadId));\n            try\n            {\n                myClient = new UdpClient(listenPort);\n            }\n            catch (SocketException ex)\n            {\n                observer.OnError(ex);\n            }\n            IPEndPoint remoteEP = null;\n            myClient.EnableBroadcast = true;\n            myClient.Client.ReceiveTimeout = 5000;\n            while (!isAppQuitting)\n            {\n                try\n                {\n                    remoteEP = null;\n                    var receivedMsg = System.Text.Encoding.ASCII.GetString(myClient.Receive(ref remoteEP));\n                    observer.OnNext(new UdpState(remoteEP, receivedMsg));\n                }\n                catch (SocketException)\n                {\n                    Debug.Log(\"UDP::Receive timeout\");\n                }\n            }\n            observer.OnCompleted();\n            return null;\n        })\n        .SubscribeOn(Scheduler.ThreadPool)\n        .Publish()\n        .RefCount();\n    }\n\n    void OnApplicationQuit()\n    {\n        isAppQuitting = true;\n        myClient.Client.Blocking = false;\n    }\n}\n}\n\n\n\n\u7528\u9014\n\u30ed\u30fc\u30ab\u30eb\u306e\u30bb\u30f3\u30b5\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u306e\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u305f\u3044\u3068\u304d\u306b\u5f79\u7acb\u3064\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\n\n\u4f7f\u7528\u6cd5\nvoid Awake()\u3067\u4f5c\u3089\u308c\u305fIObservable<UdpState>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5225\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002\n\nTest.cs\nusing UnityEngine;\nusing UniRx;\nusing UdpReceiverUniRx;\n\npublic class Test : MonoBehaviour\n{\n    public UdpReceiverRx _udpReceiverRx;\n    private IObservable<UdpState> myUdpSequence;\n\n    void Start() {\n        myUdpSequence = _udpReceiverRx._udpSequence;\n\n        myUdpSequence\n        .ObserveOnMainThread()\n        .Subscribe(x =>{\n                print(x.UdpMsg);\n            })\n        .AddTo(this);\n    }\n}\n\n\n\n# Unity\u3067Udp\u53d7\u4fe1\u3092\u9ad8\u901f\u306b\u884c\u3046\nUnity\u3067\u306eUDP\u53d7\u4fe1\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3064\u3044\u3066\u306e\u6295\u7a3f\u306f\u3059\u3067\u306bnenjiru\u3055\u3093\u306e[Unity\u3067UDP\u3092\u53d7\u4fe1\u3057\u3066\u307f\u308b](http://qiita.com/nenjiru/items/8fa8dfb27f55c0205651)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4f8b\u3048\u3070\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u7528\u3044\u308b\u65b9\u6cd5\u3060\u30681\u30d5\u30ec\u30fc\u30e0\u306b\u4e00\u56de\u3057\u304b\u53d7\u4fe1\u3092\u884c\u3048\u305a\u3001\u77ed\u6642\u9593\u306b\u8907\u6570\u306eUdp\u30d1\u30b1\u30c3\u30c8\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u3068\u634c\u3051\u305a\u306b\u3053\u307c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u306a\u304c\u3089\u53d7\u4fe1\u3059\u308b\u3053\u3068\u3067\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306b\u4f9d\u5b58\u305b\u305a\u3001\u304b\u3064\u5225\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u3082\u6271\u3044\u3084\u3059\u3044UDP\u53d7\u4fe1\u3092\u884c\u3046\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u306e\u3067\u30b7\u30a7\u30a2\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n(\u6ce8)\u3042\u3089\u304b\u3058\u3081UniRx\u306eAssert\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\n```csharp:UdpReceiverRx.cs\n\n//UdpReceiverRx.cs\n//UniRx\u3092\u7528\u3044\u3066\u9ad8\u901f\u306aUdp\u53d7\u4fe1\u3092\u884c\u3046\n\nnamespace UdpReceiverUniRx {\n\nusing UnityEngine;\nusing System.Net;\nusing System.Net.Sockets;\nusing UniRx;\n\npublic class UdpState : System.IEquatable<UdpState>\n{\n\t//UDP\u901a\u4fe1\u306e\u60c5\u5831\u3092\u53ce\u3081\u308b\u3002\u9001\u53d7\u4fe1\u3068\u3082\u306b\u4f7f\u3048\u308b\n\tpublic IPEndPoint EndPoint {get; set;}\n\tpublic string UdpMsg {get; set;}\n\n\tpublic UdpState(IPEndPoint ep, string udpMsg)\n\t{\n\t\tthis.EndPoint = ep;\n\t\tthis.UdpMsg = udpMsg;\n\t}\n\tpublic override int GetHashCode() {\n\t\treturn EndPoint.Address.GetHashCode();\n\t}\n\n\tpublic bool Equals(UdpState s)\n\t{\n\t\tif ( s == null ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn EndPoint.Address.Equals(s.EndPoint.Address);\n\t}\n}\n\npublic class UdpReceiverRx : MonoBehaviour\n{\n\tprivate const int listenPort = 10000;\n\tprivate static UdpClient myClient;\n\tprivate bool isAppQuitting;\n\tpublic IObservable<UdpState> _udpSequence;\n\n\tvoid Awake()\n\t{\n\t\t_udpSequence = Observable.Create<UdpState>(observer =>\n\t\t{\n\t\t\tDebug.Log(string.Format(\"_udpSequence thread: {0}\", System.Threading.Thread.CurrentThread.ManagedThreadId));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tmyClient = new UdpClient(listenPort);\n\t\t\t}\n\t\t\tcatch (SocketException ex)\n\t\t\t{\n\t\t\t\tobserver.OnError(ex);\n\t\t\t}\n\t\t\tIPEndPoint remoteEP = null;\n\t\t\tmyClient.EnableBroadcast = true;\n\t\t\tmyClient.Client.ReceiveTimeout = 5000;\n\t\t\twhile (!isAppQuitting)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tremoteEP = null;\n\t\t\t\t\tvar receivedMsg = System.Text.Encoding.ASCII.GetString(myClient.Receive(ref remoteEP));\n\t\t\t\t\tobserver.OnNext(new UdpState(remoteEP, receivedMsg));\n\t\t\t\t}\n\t\t\t\tcatch (SocketException)\n\t\t\t\t{\n\t\t\t\t\tDebug.Log(\"UDP::Receive timeout\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tobserver.OnCompleted();\n\t\t\treturn null;\n\t\t})\n\t\t.SubscribeOn(Scheduler.ThreadPool)\n\t\t.Publish()\n\t\t.RefCount();\n\t}\n\n\tvoid OnApplicationQuit()\n\t{\n\t\tisAppQuitting = true;\n\t\tmyClient.Client.Blocking = false;\n\t}\n}\n}\n```\n\n#\u7528\u9014\n\u30ed\u30fc\u30ab\u30eb\u306e\u30bb\u30f3\u30b5\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u306e\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u305f\u3044\u3068\u304d\u306b\u5f79\u7acb\u3064\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\n\n#\u4f7f\u7528\u6cd5\n`void Awake()`\u3067\u4f5c\u3089\u308c\u305f`IObservable<UdpState>`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5225\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002\n\n```csharp:Test.cs\nusing UnityEngine;\nusing UniRx;\nusing UdpReceiverUniRx;\n\npublic class Test : MonoBehaviour\n{\n\tpublic UdpReceiverRx _udpReceiverRx;\n\tprivate IObservable<UdpState> myUdpSequence;\n\n\tvoid Start() {\n\t\tmyUdpSequence = _udpReceiverRx._udpSequence;\n\n\t\tmyUdpSequence\n\t\t.ObserveOnMainThread()\n\t\t.Subscribe(x =>{\n\t\t\t\tprint(x.UdpMsg);\n\t\t\t})\n\t\t.AddTo(this);\n\t}\n}\n\n```\n"}