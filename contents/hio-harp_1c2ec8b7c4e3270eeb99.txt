{"context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #13 (2)\n2 (\u7df4\u7fd2\u554f\u984c2.1~2.3)\n\n2 \u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u62bd\u8c61\u5316\u306e\u69cb\u7bc9\n\n2.1 \u30c7\u30fc\u30bf\u62bd\u8c61\u5316\u5165\u9580\n\u30bb\u30ec\u30af\u30bf (selector) \u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf (constructor).\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u666e\u6bb5\u3068\u540c\u3058\u3060\u3051\u3069, \u30a2\u30af\u30bb\u30c3\u30b5\u306e\u3053\u3068\u306f\u30bb\u30ec\u30af\u30bf\u3063\u3066\u3044\u3046\u3089\u3057\u3044.\n\n2.1.1 \u4f8b: \u6709\u7406\u6570\u306e\u6570\u5024\u6f14\u7b97\ncons! car!! cdr!!!\ncons-cell \u3063\u3066\u3044\u3046\u540d\u524d\u304b\u3068\u304a\u3082\u3063\u3066\u3051\u308c\u3069\u30da\u30a2 (pair) \u3063\u3066\u3044\u3046\u3089\u3057\u3044.\n; [sec-2.1.1-a.scm]\n\n\n(define (sec-2.1.1-a)\n    (display \"(print-rat one-half) ; 1/2\")\n    (print-rat one-half)\n\n    (newline)\n    (display \"(print-rat one-third) ; 1/3\")\n    (print-rat one-third)\n\n    (newline)\n    (display \"(print-rat (add-rat one-half one-third)) ; 5/6\")\n    (print-rat (add-rat one-half one-third))\n\n    (newline)\n    (display \"(print-rat (mul-rat one-half one-third)) ; 1/6\")\n    (print-rat (mul-rat one-half one-third))\n\n    (newline)\n    (display \"(print-rat (add-rat one-third one-third)); 6/9\")\n    (print-rat (add-rat one-third one-third))\n\n    (newline)\n    #t)\n\n\n; arithmetic operations\n;\n(define (add-rat x y)\n    (make-rat\n        (+\n            (* (numer x) (denom y))\n            (* (numer y) (denom x)))\n        (* (denom x) (denom y))))\n\n\n(define (sub-rat x y)\n    (make-rat\n        (-\n            (* (numer x) (denom y))\n            (* (numer y) (denom x)))\n        (* (denom x) (denom y))))\n\n\n(define (mul-rat x y)\n    (make-rat\n        (* (numer x) (numer y))\n        (* (denom x) (denom y))))\n\n\n(define (div-rat x y)\n    (make-rat\n        (* (numer x) (denom y))\n        (* (denom x) (numer y))))\n\n\n(define (equal-rat? x y)\n    (=\n        (* (numer x) (denom y)\n        (* (numer y) (denom x)))))\n\n\n; representing rational numbers.\n(define (make-rat n d) (cons n d))\n(define (numer x) (car x))\n(define (denom x) (cdr x))\n\n(define (print-rat x)\n    (newline)\n    (display (numer x))\n    (display \"/\")\n    (display (denom x)))\n\n\n(define one-half (make-rat 1 2))\n(define one-third (make-rat 1 3))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (sec-2.1.1-a)\n(print-rat one-half) ; 1/2\n1/2\n(print-rat one-third) ; 1/3\n1/3\n(print-rat (add-rat one-half one-third)) ; 5/6\n5/6\n(print-rat (mul-rat one-half one-third)) ; 1/6\n1/6\n(print-rat (add-rat one-third one-third)); 6/9\n6/9\n#t\n\n\u65e2\u7d04\u5206\u6570\u5316\u306b\u5bfe\u5fdc:\n; [sec-2.1.1-b.scm]\n\n\n(define (sec-2.1.1-b)\n    (display \"(print-rat one-half) ; 1/2\")\n    (print-rat one-half)\n\n    (newline)\n    (display \"(print-rat one-third) ; 1/3\")\n    (print-rat one-third)\n\n    (newline)\n    (display \"(print-rat (add-rat one-half one-third)) ; 5/6\")\n    (print-rat (add-rat one-half one-third))\n\n    (newline)\n    (display \"(print-rat (mul-rat one-half one-third)) ; 1/6\")\n    (print-rat (mul-rat one-half one-third))\n\n    (newline)\n    (display \"(print-rat (add-rat one-third one-third)); 2/3\")\n    (print-rat (add-rat one-third one-third))\n\n    (newline)\n    #t)\n\n\n(load \"./sec-2.1.1-a\")\n\n\n(define (make-rat n d)\n    (let ((g (gcd n d)))\n        (cons (/ n g) (/ d g))))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (sec-2.1.1-b)\n(print-rat one-half) ; 1/2\n1/2\n(print-rat one-third) ; 1/3\n1/3\n(print-rat (add-rat one-half one-third)) ; 5/6\n5/6\n(print-rat (mul-rat one-half one-third)) ; 1/6\n1/6\n(print-rat (add-rat one-third one-third)); 2/3\n2/3\n#t\n\n\nex-2.1. \u6709\u7406\u6570\u306e\u7b26\u53f7\u5bfe\u5fdc\n; [ex-2.1.scm]\n\n\n(define (ex-2.1)\n    (display \"(print-rat (make-rat 1 3)) ; 1/3\")\n    (print-rat (make-rat 1 3))\n\n    (newline)\n    (display \"(print-rat (make-rat -1 3)) ; -1/3\")\n    (print-rat (make-rat -1 3))\n\n    (newline)\n    (display \"(print-rat (make-rat 1 -3)) ; -1/3\")\n    (print-rat (make-rat 1 -3))\n\n\n    (newline)\n    (display \"(print-rat (make-rat -1 -3)) ; 1/3\")\n    (print-rat (make-rat -1 -3))\n\n    (newline)\n    #t)\n\n\n(load \"./sec-2.1.1-a\")\n\n\n(define (make-rat n d)\n    (define (make-rat-1 n d)\n        (let ((g (gcd n d)))\n            (cons (/ n g) (/ d g))))\n    (cond\n        ((and (negative? n) (negative? d))\n            (make-rat-1 (- n) (- d)))\n        ((and (negative? n) (not (negative? d)))\n            (make-rat-1 n d))\n        ((and (not (negative? n)) (negative? d))\n            (make-rat-1 (- n) (- d)))\n        ((and (not (negative? n)) (not (negative? d)))\n            (make-rat-1 n d))))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (ex-2.1)\n(print-rat (make-rat 1 3)) ; 1/3\n1/3\n(print-rat (make-rat -1 3)) ; -1/3\n-1/3\n(print-rat (make-rat 1 -3)) ; -1/3\n-1/3\n(print-rat (make-rat -1 -3)) ; 1/3\n1/3\n#t\n\n\n2.1.2 \u62bd\u8c61\u5316\u306e\u58c1\nwall \u3058\u3083\u306a\u304f\u3066 barrier \u306a\u306e\u306d\u30fb\u03c9\u30fb\n\nex-2.2. \u70b9\u3068\u7dda\u5206\u306e\u8868\u73fe\n; [ex-2.2.scm]\n\n\n(define (ex-2.2)\n    (let\n        (\n            (start (make-point 10 20))\n            (end   (make-point 30 40))\n        )\n        (display \"; start:\")\n        (print-point start)\n        (newline)\n        (display \"; end:\")\n        (print-point end)\n        (newline)\n        (display \"; midpoint:\")\n        (print-point (midpoint-segment (make-segment start end)))\n        (newline)\n    )\n    #t)\n\n\n(define (make-point x y)\n    (cons x y))\n\n\n(define (x-point p)\n    (car p))\n\n\n(define (y-point p)\n    (cdr p))\n\n\n(define (print-point p)\n    (newline)\n    (display \"(\")\n    (display (x-point p))\n    (display \",\")\n    (display (y-point p))\n    (display \")\"))\n\n\n(define (make-segment start end)\n    (cons start end))\n\n\n(define (start-segment segment)\n    (car segment))\n\n\n(define (end-segment segment)\n    (cdr segment))\n\n\n(define (average a b)\n    (/ (+ a b) 2))\n\n\n; segment -> segment -> point\n(define (midpoint-segment segment)\n    (make-point\n        (average\n            (x-point (start-segment segment))\n            (x-point (end-segment segment)))\n        (average\n            (y-point (start-segment segment))\n            (y-point (end-segment segment)))))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (ex-2.2)\n; start:\n(10,20)\n; end:\n(30,40)\n; midpoint:\n(20,30)\n#t\n\n\nex-2.3. \u9577\u65b9\u5f62\u306e\u8868\u73fe\n(\u5de6\u4e0a\u5ea7\u6a19, \u53f3\u4e0b\u5ea7\u6a19) \u306b\u3088\u308b\u8868\u73fe ((x1,y1)-(x2,y2)):\n' \u3063\u3066\u8b58\u5225\u5b50\u306e\u4e00\u90e8\u304b\u3068\u601d\u3063\u3066\u305f\u3051\u3069\u305d\u3046\u3067\u3082\u306a\u304b\u3063\u305f\u307d\u3044.\n\u5909\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u60a9\u3093\u3058\u3083\u3063\u305f\u30fb\u03c9\u30fb`\n; [ex-2.3-a.scm]\n\n\n(define (ex-2.3-a)\n    (define top-left     (make-point 10 100))\n    (define bottom-right (make-point 30 300))\n    (define rect (make-rect top-left bottom-right))\n\n    (display \"; rect:\")\n    (print-rect rect)\n    (newline)\n\n    (display \"; width:\")\n    (print-value (width-rect rect))\n    (newline)\n\n    (display \"; height:\")\n    (print-value (height-rect rect))\n    (newline)\n\n    (display \"; perimeter:\")\n    (print-value (perimeter-rect rect))\n    (newline)\n\n    (display \"; area:\")\n    (print-value (area-rect rect))\n    (newline)\n    #t)\n\n\n; {{{ point.\n(define (print-value value)\n    (newline)\n    (display value))\n\n\n(define (make-point x y)\n    (cons x y))\n\n\n(define (x-point p)\n    (car p))\n\n\n(define (y-point p)\n    (cdr p))\n; }}} point.\n\n\n; {{{ rect\n; make-rect  :: point -> point -> rect\n; print-rect :: rect -> #t\n; width      :: rect -> non-neg-integer\n; height     :: rect -> non-neg-integer\n;\n(define (make-rect top-left-point bottom-right-point)\n    (cons top-left-point bottom-right-point))\n\n\n(define (top-left-rect_ rect)\n    (car rect))\n\n\n(define (bottom-right-rect_ rect)\n    (cdr rect))\n\n\n(define (print-rect rect)\n    (newline)\n    (display \"(\")\n    (display (x-point (top-left-rect_ rect)))\n    (display \",\")\n    (display (y-point (top-left-rect_ rect)))\n    (display \")-(\")\n    (display (x-point (bottom-right-rect_ rect)))\n    (display \",\")\n    (display (y-point (bottom-right-rect_ rect)))\n    (display \")\"))\n\n\n(define (width-rect rect)\n    (abs\n        (-\n            (x-point (top-left-rect_ rect))\n            (x-point (bottom-right-rect_ rect)))))\n\n\n(define (height-rect rect)\n    (abs\n        (-\n            (y-point (top-left-rect_ rect))\n            (y-point (bottom-right-rect_ rect)))))\n; }}} rect\n\n\n(define (perimeter-rect rect)\n    (* 2 (+ (width-rect rect) (height-rect rect))))\n\n\n(define (area-rect rect)\n    (* (width-rect rect) (height-rect rect)))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (ex-2.3-a)\n; rect:\n(10,100)-(30,300)\n; width:\n20\n; height:\n200\n; perimeter:\n440\n; area:\n4000\n#t\n\n(\u5de6\u4e0a\u5ea7\u6a19, \u77e9\u5f62\u306e\u5927\u304d\u3055) \u306b\u3088\u308b\u8868\u73fe (x0,y0)+(width,height):\n(\u3053\u306e\u5b9f\u88c5\u3060\u3068\u5de6\u4e0a\u5ea7\u6a19\u3068\u53f3\u4e0b\u5ea7\u6a19\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u3066\u3044\u3055\u308c\u3066\u308b\u3068\u3060\u3081\u304b\u3082\uff1e\u03c9\uff1c;)\n; [ex-2.3-b.scm]\n\n\n(define (ex-2.3-b)\n    (define top-left     (make-point 10 100))\n    (define bottom-right (make-point 30 300))\n    (define rect (make-rect top-left bottom-right))\n\n    (display \"; rect:\")\n    (print-rect rect)\n    (newline)\n\n    (display \"; width:\")\n    (print-value (width-rect rect))\n    (newline)\n\n    (display \"; height:\")\n    (print-value (height-rect rect))\n    (newline)\n\n    (display \"; perimeter:\")\n    (print-value (perimeter-rect rect))\n    (newline)\n\n    (display \"; area:\")\n    (print-value (area-rect rect))\n    (newline)\n    #t)\n\n\n(load \"./ex-2.3-a\")\n\n\n; {{{ size.\n(define (make-size top-left-point bottom-right-point)\n    (define width_ \n        (abs (-\n            (x-point top-left-point)\n            (x-point bottom-right-point))))\n    (define height_\n        (abs (-\n            (y-point top-left-point)\n            (y-point bottom-right-point))))\n    (cons width_ height_))\n\n\n(define (width-size size)\n    (car size))\n\n\n(define (height-size size)\n    (cdr size))\n; }}} size.\n\n\n; {{{ rect\n; make-rect  :: point -> point -> rect\n; print-rect :: rect -> #t\n; width      :: rect -> non-neg-integer\n; height     :: rect -> non-neg-integer\n;\n(define (make-rect top-left-point bottom-right-point)\n    (define size (make-size top-left-point bottom-right-point))\n    (cons top-left-point size))\n\n\n(define (top-left-rect_ rect)\n    (car rect))\n\n\n(define (size-rect_ rect)\n    (cdr rect))\n\n\n(define (print-rect rect)\n    (newline)\n    (display \"(\")\n    (display (x-point (top-left-rect_ rect)))\n    (display \",\")\n    (display (y-point (top-left-rect_ rect)))\n    (display \")+(\")\n    (display (width-size (size-rect_ rect)))\n    (display \",\")\n    (display (height-size (size-rect_ rect)))\n    (display \")\"))\n\n\n(define (width-rect rect)\n    (width-size (size-rect_ rect)))\n\n\n(define (height-rect rect)\n    (height-size (size-rect_ rect)))\n; }}} rect\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (ex-2.3-b)\n; rect:\n(10,100)+(20,200)\n; width:\n20\n; height:\n200\n; perimeter:\n440\n; area:\n4000\n#t\n\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #13 (2)](http://ladiespp.connpass.com/event/34221/)\n\n2 (\u7df4\u7fd2\u554f\u984c2.1~2.3)\n\n## 2 \u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u62bd\u8c61\u5316\u306e\u69cb\u7bc9\n\n## 2.1 \u30c7\u30fc\u30bf\u62bd\u8c61\u5316\u5165\u9580\n\n\u30bb\u30ec\u30af\u30bf (selector) \u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf (constructor).\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u666e\u6bb5\u3068\u540c\u3058\u3060\u3051\u3069, \u30a2\u30af\u30bb\u30c3\u30b5\u306e\u3053\u3068\u306f\u30bb\u30ec\u30af\u30bf\u3063\u3066\u3044\u3046\u3089\u3057\u3044.\n\n## 2.1.1 \u4f8b: \u6709\u7406\u6570\u306e\u6570\u5024\u6f14\u7b97\n\n``cons``! ``car``!! ``cdr``!!!\ncons-cell \u3063\u3066\u3044\u3046\u540d\u524d\u304b\u3068\u304a\u3082\u3063\u3066\u3051\u308c\u3069\u30da\u30a2 (pair) \u3063\u3066\u3044\u3046\u3089\u3057\u3044.\n\n```scm\n; [sec-2.1.1-a.scm]\n\n\n(define (sec-2.1.1-a)\n\t(display \"(print-rat one-half) ; 1/2\")\n\t(print-rat one-half)\n\n\t(newline)\n\t(display \"(print-rat one-third) ; 1/3\")\n\t(print-rat one-third)\n\n\t(newline)\n\t(display \"(print-rat (add-rat one-half one-third)) ; 5/6\")\n\t(print-rat (add-rat one-half one-third))\n\n\t(newline)\n\t(display \"(print-rat (mul-rat one-half one-third)) ; 1/6\")\n\t(print-rat (mul-rat one-half one-third))\n\n\t(newline)\n\t(display \"(print-rat (add-rat one-third one-third)); 6/9\")\n\t(print-rat (add-rat one-third one-third))\n\n\t(newline)\n\t#t)\n\n\n; arithmetic operations\n;\n(define (add-rat x y)\n\t(make-rat\n\t\t(+\n\t\t\t(* (numer x) (denom y))\n\t\t\t(* (numer y) (denom x)))\n\t\t(* (denom x) (denom y))))\n\n\n(define (sub-rat x y)\n\t(make-rat\n\t\t(-\n\t\t\t(* (numer x) (denom y))\n\t\t\t(* (numer y) (denom x)))\n\t\t(* (denom x) (denom y))))\n\n\n(define (mul-rat x y)\n\t(make-rat\n\t\t(* (numer x) (numer y))\n\t\t(* (denom x) (denom y))))\n\n\n(define (div-rat x y)\n\t(make-rat\n\t\t(* (numer x) (denom y))\n\t\t(* (denom x) (numer y))))\n\n\n(define (equal-rat? x y)\n\t(=\n\t\t(* (numer x) (denom y)\n\t\t(* (numer y) (denom x)))))\n\n\n; representing rational numbers.\n(define (make-rat n d) (cons n d))\n(define (numer x) (car x))\n(define (denom x) (cdr x))\n\n(define (print-rat x)\n\t(newline)\n\t(display (numer x))\n\t(display \"/\")\n\t(display (denom x)))\n\n\n(define one-half (make-rat 1 2))\n(define one-third (make-rat 1 3))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (sec-2.1.1-a)\n(print-rat one-half) ; 1/2\n1/2\n(print-rat one-third) ; 1/3\n1/3\n(print-rat (add-rat one-half one-third)) ; 5/6\n5/6\n(print-rat (mul-rat one-half one-third)) ; 1/6\n1/6\n(print-rat (add-rat one-third one-third)); 6/9\n6/9\n#t\n```\n\n\u65e2\u7d04\u5206\u6570\u5316\u306b\u5bfe\u5fdc:\n\n```scm\n; [sec-2.1.1-b.scm]\n\n\n(define (sec-2.1.1-b)\n\t(display \"(print-rat one-half) ; 1/2\")\n\t(print-rat one-half)\n\n\t(newline)\n\t(display \"(print-rat one-third) ; 1/3\")\n\t(print-rat one-third)\n\n\t(newline)\n\t(display \"(print-rat (add-rat one-half one-third)) ; 5/6\")\n\t(print-rat (add-rat one-half one-third))\n\n\t(newline)\n\t(display \"(print-rat (mul-rat one-half one-third)) ; 1/6\")\n\t(print-rat (mul-rat one-half one-third))\n\n\t(newline)\n\t(display \"(print-rat (add-rat one-third one-third)); 2/3\")\n\t(print-rat (add-rat one-third one-third))\n\n\t(newline)\n\t#t)\n\n\n(load \"./sec-2.1.1-a\")\n\n\n(define (make-rat n d)\n\t(let ((g (gcd n d)))\n\t\t(cons (/ n g) (/ d g))))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (sec-2.1.1-b)\n(print-rat one-half) ; 1/2\n1/2\n(print-rat one-third) ; 1/3\n1/3\n(print-rat (add-rat one-half one-third)) ; 5/6\n5/6\n(print-rat (mul-rat one-half one-third)) ; 1/6\n1/6\n(print-rat (add-rat one-third one-third)); 2/3\n2/3\n#t\n```\n\n\n## ex-2.1. \u6709\u7406\u6570\u306e\u7b26\u53f7\u5bfe\u5fdc\n\n```scm\n; [ex-2.1.scm]\n\n\n(define (ex-2.1)\n\t(display \"(print-rat (make-rat 1 3)) ; 1/3\")\n\t(print-rat (make-rat 1 3))\n\n\t(newline)\n\t(display \"(print-rat (make-rat -1 3)) ; -1/3\")\n\t(print-rat (make-rat -1 3))\n\n\t(newline)\n\t(display \"(print-rat (make-rat 1 -3)) ; -1/3\")\n\t(print-rat (make-rat 1 -3))\n\n\n\t(newline)\n\t(display \"(print-rat (make-rat -1 -3)) ; 1/3\")\n\t(print-rat (make-rat -1 -3))\n\n\t(newline)\n\t#t)\n\n\n(load \"./sec-2.1.1-a\")\n\n\n(define (make-rat n d)\n\t(define (make-rat-1 n d)\n\t\t(let ((g (gcd n d)))\n\t\t\t(cons (/ n g) (/ d g))))\n\t(cond\n\t\t((and (negative? n) (negative? d))\n\t\t\t(make-rat-1 (- n) (- d)))\n\t\t((and (negative? n) (not (negative? d)))\n\t\t\t(make-rat-1 n d))\n\t\t((and (not (negative? n)) (negative? d))\n\t\t\t(make-rat-1 (- n) (- d)))\n\t\t((and (not (negative? n)) (not (negative? d)))\n\t\t\t(make-rat-1 n d))))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (ex-2.1)\n(print-rat (make-rat 1 3)) ; 1/3\n1/3\n(print-rat (make-rat -1 3)) ; -1/3\n-1/3\n(print-rat (make-rat 1 -3)) ; -1/3\n-1/3\n(print-rat (make-rat -1 -3)) ; 1/3\n1/3\n#t\n```\n\n## 2.1.2 \u62bd\u8c61\u5316\u306e\u58c1\n\nwall \u3058\u3083\u306a\u304f\u3066 barrier \u306a\u306e\u306d\u30fb\u03c9\u30fb\n\n## ex-2.2. \u70b9\u3068\u7dda\u5206\u306e\u8868\u73fe\n\n```scm\n; [ex-2.2.scm]\n\n\n(define (ex-2.2)\n\t(let\n\t\t(\n\t\t\t(start (make-point 10 20))\n\t\t\t(end   (make-point 30 40))\n\t\t)\n\t\t(display \"; start:\")\n\t\t(print-point start)\n\t\t(newline)\n\t\t(display \"; end:\")\n\t\t(print-point end)\n\t\t(newline)\n\t\t(display \"; midpoint:\")\n\t\t(print-point (midpoint-segment (make-segment start end)))\n\t\t(newline)\n\t)\n\t#t)\n\n\n(define (make-point x y)\n\t(cons x y))\n\n\n(define (x-point p)\n\t(car p))\n\n\n(define (y-point p)\n\t(cdr p))\n\n\n(define (print-point p)\n\t(newline)\n\t(display \"(\")\n\t(display (x-point p))\n\t(display \",\")\n\t(display (y-point p))\n\t(display \")\"))\n\n\n(define (make-segment start end)\n\t(cons start end))\n\n\n(define (start-segment segment)\n\t(car segment))\n\n\n(define (end-segment segment)\n\t(cdr segment))\n\n\n(define (average a b)\n\t(/ (+ a b) 2))\n\n\n; segment -> segment -> point\n(define (midpoint-segment segment)\n\t(make-point\n\t\t(average\n\t\t\t(x-point (start-segment segment))\n\t\t\t(x-point (end-segment segment)))\n\t\t(average\n\t\t\t(y-point (start-segment segment))\n\t\t\t(y-point (end-segment segment)))))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (ex-2.2)\n; start:\n(10,20)\n; end:\n(30,40)\n; midpoint:\n(20,30)\n#t\n```\n\n## ex-2.3. \u9577\u65b9\u5f62\u306e\u8868\u73fe\n\n(\u5de6\u4e0a\u5ea7\u6a19, \u53f3\u4e0b\u5ea7\u6a19) \u306b\u3088\u308b\u8868\u73fe (``(x1,y1)-(x2,y2)``):\n\n``'`` \u3063\u3066\u8b58\u5225\u5b50\u306e\u4e00\u90e8\u304b\u3068\u601d\u3063\u3066\u305f\u3051\u3069\u305d\u3046\u3067\u3082\u306a\u304b\u3063\u305f\u307d\u3044.\n\u5909\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u60a9\u3093\u3058\u3083\u3063\u305f\u30fb\u03c9\u30fb`\n\n```scm\n; [ex-2.3-a.scm]\n\n\n(define (ex-2.3-a)\n\t(define top-left     (make-point 10 100))\n\t(define bottom-right (make-point 30 300))\n\t(define rect (make-rect top-left bottom-right))\n\n\t(display \"; rect:\")\n\t(print-rect rect)\n\t(newline)\n\n\t(display \"; width:\")\n\t(print-value (width-rect rect))\n\t(newline)\n\n\t(display \"; height:\")\n\t(print-value (height-rect rect))\n\t(newline)\n\n\t(display \"; perimeter:\")\n\t(print-value (perimeter-rect rect))\n\t(newline)\n\n\t(display \"; area:\")\n\t(print-value (area-rect rect))\n\t(newline)\n\t#t)\n\n\n; {{{ point.\n(define (print-value value)\n\t(newline)\n\t(display value))\n\n\n(define (make-point x y)\n\t(cons x y))\n\n\n(define (x-point p)\n\t(car p))\n\n\n(define (y-point p)\n\t(cdr p))\n; }}} point.\n\n\n; {{{ rect\n; make-rect  :: point -> point -> rect\n; print-rect :: rect -> #t\n; width      :: rect -> non-neg-integer\n; height     :: rect -> non-neg-integer\n;\n(define (make-rect top-left-point bottom-right-point)\n\t(cons top-left-point bottom-right-point))\n\n\n(define (top-left-rect_ rect)\n\t(car rect))\n\n\n(define (bottom-right-rect_ rect)\n\t(cdr rect))\n\n\n(define (print-rect rect)\n\t(newline)\n\t(display \"(\")\n\t(display (x-point (top-left-rect_ rect)))\n\t(display \",\")\n\t(display (y-point (top-left-rect_ rect)))\n\t(display \")-(\")\n\t(display (x-point (bottom-right-rect_ rect)))\n\t(display \",\")\n\t(display (y-point (bottom-right-rect_ rect)))\n\t(display \")\"))\n\n\n(define (width-rect rect)\n\t(abs\n\t\t(-\n\t\t\t(x-point (top-left-rect_ rect))\n\t\t\t(x-point (bottom-right-rect_ rect)))))\n\n\n(define (height-rect rect)\n\t(abs\n\t\t(-\n\t\t\t(y-point (top-left-rect_ rect))\n\t\t\t(y-point (bottom-right-rect_ rect)))))\n; }}} rect\n\n\n(define (perimeter-rect rect)\n\t(* 2 (+ (width-rect rect) (height-rect rect))))\n\n\n(define (area-rect rect)\n\t(* (width-rect rect) (height-rect rect)))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (ex-2.3-a)\n; rect:\n(10,100)-(30,300)\n; width:\n20\n; height:\n200\n; perimeter:\n440\n; area:\n4000\n#t\n```\n\n\n(\u5de6\u4e0a\u5ea7\u6a19, \u77e9\u5f62\u306e\u5927\u304d\u3055) \u306b\u3088\u308b\u8868\u73fe ``(x0,y0)+(width,height)``:\n\n(\u3053\u306e\u5b9f\u88c5\u3060\u3068\u5de6\u4e0a\u5ea7\u6a19\u3068\u53f3\u4e0b\u5ea7\u6a19\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u3066\u3044\u3055\u308c\u3066\u308b\u3068\u3060\u3081\u304b\u3082\uff1e\u03c9\uff1c;)\n\n```scm\n; [ex-2.3-b.scm]\n\n\n(define (ex-2.3-b)\n\t(define top-left     (make-point 10 100))\n\t(define bottom-right (make-point 30 300))\n\t(define rect (make-rect top-left bottom-right))\n\n\t(display \"; rect:\")\n\t(print-rect rect)\n\t(newline)\n\n\t(display \"; width:\")\n\t(print-value (width-rect rect))\n\t(newline)\n\n\t(display \"; height:\")\n\t(print-value (height-rect rect))\n\t(newline)\n\n\t(display \"; perimeter:\")\n\t(print-value (perimeter-rect rect))\n\t(newline)\n\n\t(display \"; area:\")\n\t(print-value (area-rect rect))\n\t(newline)\n\t#t)\n\n\n(load \"./ex-2.3-a\")\n\n\n; {{{ size.\n(define (make-size top-left-point bottom-right-point)\n\t(define width_ \n\t\t(abs (-\n\t\t\t(x-point top-left-point)\n\t\t\t(x-point bottom-right-point))))\n\t(define height_\n\t\t(abs (-\n\t\t\t(y-point top-left-point)\n\t\t\t(y-point bottom-right-point))))\n\t(cons width_ height_))\n\n\n(define (width-size size)\n\t(car size))\n\n\n(define (height-size size)\n\t(cdr size))\n; }}} size.\n\n\n; {{{ rect\n; make-rect  :: point -> point -> rect\n; print-rect :: rect -> #t\n; width      :: rect -> non-neg-integer\n; height     :: rect -> non-neg-integer\n;\n(define (make-rect top-left-point bottom-right-point)\n\t(define size (make-size top-left-point bottom-right-point))\n\t(cons top-left-point size))\n\n\n(define (top-left-rect_ rect)\n\t(car rect))\n\n\n(define (size-rect_ rect)\n\t(cdr rect))\n\n\n(define (print-rect rect)\n\t(newline)\n\t(display \"(\")\n\t(display (x-point (top-left-rect_ rect)))\n\t(display \",\")\n\t(display (y-point (top-left-rect_ rect)))\n\t(display \")+(\")\n\t(display (width-size (size-rect_ rect)))\n\t(display \",\")\n\t(display (height-size (size-rect_ rect)))\n\t(display \")\"))\n\n\n(define (width-rect rect)\n\t(width-size (size-rect_ rect)))\n\n\n(define (height-rect rect)\n\t(height-size (size-rect_ rect)))\n; }}} rect\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (ex-2.3-b)\n; rect:\n(10,100)+(20,200)\n; width:\n20\n; height:\n200\n; perimeter:\n440\n; area:\n4000\n#t\n```\n", "tags": ["SICP"]}