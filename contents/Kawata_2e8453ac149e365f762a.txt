{"context": " More than 1 year has passed since last update.\n\n\u3084\u3063\u3066\u308b\u3053\u3068\n\u305b\u3063\u304b\u304ffreemarker\u3068\u304b\u68b1\u5305\u3055\u308c\u3066\u308b\u306e\u3067\u3001\u666e\u901a\u306eWEB\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u307f\u308b\u4e0a\u3067\u3001\u8a8d\u8a3c\u3092SessionID\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\u305d\u3057\u3066\u304d\u3063\u3068\u63a2\u305b\u3070\u81ea\u4f5c\u3057\u306a\u304f\u3066\u3082\u3059\u3067\u306b\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n/* TODO \u30b3\u30fc\u30c9\u3068\u304b\u4f5c\u308a\u3068\u304b\u8272\u3005\u6c5a\u3044\u306e\u3067\u4f7f\u3046\u3068\u304d\u306b\u306f\u3061\u3083\u3093\u3068\u4fee\u6b63\u3059\u308b */\n\n\nCookie\u306bsid\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\n\u30ed\u30b0\u30a4\u30f3\u6642\u306bCookie\u306bsid\u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308b\n\n\n\u30b3\u30fc\u30c9\n\u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u3066\u307f\u305f\u9069\u5f53\u306a\u30b3\u30fc\u30c9\n\njp.hoge.app.auth.SessionUserAuthFactory.java\npackage jp.hoge.app.auth;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.Context;\n\nimport io.dropwizard.auth.AuthFactory;\nimport io.dropwizard.auth.AuthenticationException;\nimport io.dropwizard.auth.Authenticator;\nimport io.dropwizard.auth.UnauthorizedHandler;\n\n/**\n * \u307b\u307c\u307b\u307cio.dropwizard.auth.basic.BasicAuthFactory\u306e\u5199\u7d4c\u3067\u3044\u3051\u305f\n */\npublic class SessionUserAuthFactory<T> extends\n        AuthFactory<HogeTokenCredentials, T> {\n\n    @Context\n    private HttpServletRequest request;\n    private final boolean required;\n    private UnauthorizedHandler unauthorizedHandler = new HogeUnauthorizedHandler();\n    private final Class<T> generatedClass;\n    private String prefix = \"Sid\"; // \u4f7f\u308f\u306a\u3044\u3051\u3069\n    private final String realm; // \u4f7f\u308f\u306a\u3044\u3051\u3069\n\n    public SessionUserAuthFactory(\n            Authenticator<HogeTokenCredentials, T> authenticator,\n            final String realm,\n            final Class<T> generatedClass) {\n        super(authenticator);\n        this.required = false;\n        this.realm = realm;\n        this.generatedClass = generatedClass;\n    }\n    private SessionUserAuthFactory(final boolean required,\n            final Authenticator<HogeTokenCredentials, T> authenticator,\n            final String realm,\n            final Class<T> generatedClass) {\n        super(authenticator);\n        this.required = required;\n        this.realm = realm;\n        this.generatedClass = generatedClass;\n    }\n\n    public SessionUserAuthFactory<T> responseBuilder(UnauthorizedHandler unauthorizedHandler) {\n        this.unauthorizedHandler = unauthorizedHandler;\n        return this;\n    }\n\n    @Override\n    public T provide() {\n        // \u30e9\u30e0\u30c0\u5f0f\u3067\u66f8\u3044\u3066\u307f\u305f\u304b\u3063\u305f\u306e (\u6b63\u3057\u3044\u306e\u304b\u77e5\u3089\u3093)\n        Optional<HogeTokenCredentials> credentials = Optional.ofNullable(request)\n                .map(req -> req.getCookies())\n                .map(cookies -> Arrays.asList(cookies).stream()\n                        .filter(cookie -> \"sid\".equals(cookie.getName()))\n                        .findFirst().orElseGet(null))\n                .map(sidcookie -> sidcookie.getValue())\n                .map(sid -> new HogeTokenCredentials(sid));\n\n        if (credentials.isPresent()) {\n            try {\n                // guava\u51fa\u3066\u304d\u3066\u3082\u3046\u305f\n                final com.google.common.base.Optional<T> result = authenticator().authenticate(credentials.get());\n                if (result.isPresent()) return result.get();\n            } catch (AuthenticationException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } \n        // \u8a8d\u8a3c\u5fc5\u9808\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306fUnauthorizedHandler\u3092\u5229\u7528\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\n        if (required) {\n            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));\n        }\n\n        return null;\n    }\n\n    @Override\n    public void setRequest(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    @Override\n    public AuthFactory<HogeTokenCredentials, T> clone(boolean required) {\n        return new SessionUserAuthFactory<>(required, authenticator(),this.realm, this.generatedClass).responseBuilder(unauthorizedHandler);\n    }\n\n    @Override\n    public Class<T> getGeneratedClass() {\n        return generatedClass;\n    }\n\n}\n\n\n\n\njp.hoge.app.auth.HogeUnauthorizedHandler.java\npackage jp.hoge.app.auth;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javax.ws.rs.core.Response;\n\nimport io.dropwizard.auth.UnauthorizedHandler;\n\npublic class HogeUnauthorizedHandler implements UnauthorizedHandler {\n\n    @Override\n    public Response buildResponse(String prefix, String realm) {\n\n        try {\n            // \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n            return Response.seeOther(new URI(\"/login\")).build();\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n\n        return Response.ok().build();\n    }\n}\n\n\n\n\njp.hoge.app.auth.HogeTokenCredentials.java\npackage jp.hoge.app.auth;\n\npublic class HogeTokenCredentials {\n\n    private final String token;\n    public HogeTokenCredentials(String token) {\n        this.token = token;\n    }\n    public String getToken() {\n        return token;\n    }\n}\n\n\n\n\njp.hoge.app.auth.HogeSessionAuthenticator.java\npackage jp.hoge.app.auth;\n\nimport com.google.common.base.Optional;\n\nimport jp.hoge.app.core.HogeUser;\nimport io.dropwizard.auth.AuthenticationException;\nimport io.dropwizard.auth.Authenticator;\n\npublic class HogeSessionAuthenticator implements Authenticator<HogeTokenCredentials, HogeUser> {\n\n    @Override\n    public Optional<HogeUser> authenticate(HogeTokenCredentials credentials)\n            throws AuthenticationException {\n        // \u672c\u6765\u306fredis\u3068\u304b\u306b\u554f\u3044\u5408\u308f\u305b\u3066\u6709\u52b9\u304b\u78ba\u8a8d\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n        if (\"abcdefg\".equals(credentials.getToken())) {\n            return Optional.of(new HogeUser(\"myID\"));\n        }\n\n        return Optional.absent();\n    }\n\n}\n\n\n\n\njp.hoge.app.core.HogeUser.java\npackage jp.hoge.app.core;\n\npublic class HogeUser {\n\n    private final String userId;\n\n    public HogeUser(String userId) {\n        this.userId = userId;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n}\n\n\n\n\njp.hoge.app.resources.LoginResource.java\npackage jp.hoge.app.resources;\n\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.NewCookie;\nimport javax.ws.rs.core.Response;\n\nimport jp.hoge.app.views.LoginView;\n\n@Path(\"/login\")\npublic class LoginResource {\n\n    @GET\n    @Path(\"/\")\n    @Produces(MediaType.TEXT_HTML)\n    public LoginView getLoginView() {\n        return new LoginView(LoginView.Template.FREEMARKER);\n    }\n\n    @POST\n    @Path(\"/signin\")\n    public Response signup(@FormParam(\"email\") String email , @FormParam(\"password\") String password) {\n        // \u30a2\u30a4\u30d1\u30b9\u8a8d\u8a3c\n        if (\"test\".equals(email) && \"test\".equals(password)) {\n            // Cookie\u751f\u6210 (\u3053\u308c\u3060\u3068\u30d6\u30e9\u30a6\u30b6\u9589\u3058\u308b\u307e\u3067\u306e\u9593\u3060\u3051)\n            NewCookie cookies = new NewCookie(\"sid\",\"abcdefg\",\"/\",null,\"\",NewCookie.DEFAULT_MAX_AGE,false);;\n            try {\n                // Cookie\u30bb\u30c3\u30c8\u3057\u3066\u30de\u30a4\u30da\u30fc\u30b8\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n                return Response.seeOther(new URI(\"/mypage\")).cookie(cookies).build();\n            } catch (URISyntaxException e) {\n                e.printStackTrace();\n            }\n        }\n\n        try {\n            // \u8a8d\u8a3c\u5931\u6557\u3057\u305f\u3089\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u623b\u308b\n            return Response.seeOther(new URI(\"/login\")).build();\n        } catch (URISyntaxException e) {\n            e.printStackTrace();\n        }\n\n        return Response.serverError().build();\n    }\n}\n\n\n\njp.hoge.app.resources.HogeUserResource.java\npackage jp.hoge.app.resources;\n\nimport io.dropwizard.auth.Auth;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport jp.hoge.app.core.HogeUser;\nimport jp.hoge.app.views.MypageTopView;\n\n@Path(\"/mypage\")\npublic class HogeUserResource {\n\n    @GET\n    @Path(\"/\")\n    @Produces(MediaType.TEXT_HTML)\n    public MypageTopView getMypageView(@Auth HogeUser user) {\n        // @Auth\u3067Cookie\u8a8d\u8a3c\u5f8c\u306bUser\u304c\u53d6\u5f97\u3055\u308c\u308b\n        return new MypageTopView(MypageTopView.Template.FREEMARKER,user);\n    }\n}\n\n\n\n\njp.hoge.app.views.LoginView.java\npackage jp.hoge.app.views;\n\n\nimport io.dropwizard.views.View;\n\npublic class LoginView extends View {\n\n    public enum Template {\n        FREEMARKER(\"login.ftl\");\n\n        private String templateName;\n        private Template(String templateName){\n            this.templateName = templateName;\n        }\n\n        public String getTemplateName(){\n            return templateName;\n        }\n    }\n\n    public LoginView(LoginView.Template templateName) {\n        super(templateName.getTemplateName());\n    }\n\n}\n\n\n\njp.hoge.app.views.MypageTopView.java\npackage jp.hoge.app.views;\n\nimport jp.hoge.app.core.HogeUser;\nimport io.dropwizard.views.View;\n\npublic class MypageTopView extends View {\n\n    private final HogeUser user;\n    public enum Template {\n        FREEMARKER(\"mypage_top.ftl\");\n\n        private String templateName;\n        private Template(String templateName){\n            this.templateName = templateName;\n        }\n\n        public String getTemplateName(){\n            return templateName;\n        }\n    }\n\n    public MypageTopView(MypageTopView.Template templateName,HogeUser user) {\n        super(templateName.getTemplateName());\n        this.user = user;\n    }\n\n    public HogeUser getUser() {\n        return user;\n    }\n\n}\n\n\n\n\njp.hoge.app.HogeApplication.java\npackage jp.hoge.app;\n\nimport jp.hoge.app.auth.HogeSessionAuthenticator;\nimport jp.hoge.app.auth.SessionUserAuthFactory;\nimport jp.hoge.app.core.HogeUser;\nimport jp.hoge.app.resources.LoginResource;\nimport jp.hoge.app.resources.HogeUserResource;\n\nimport com.google.common.collect.ImmutableMap;\n\nimport io.dropwizard.Application;\nimport io.dropwizard.auth.AuthFactory;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.dropwizard.views.ViewBundle;\n\npublic class HogeApplication extends Application<HogeConfiguration> {\n\n    public static void main(String[] args) throws Exception {\n        new HogeApplication().run(args);\n    }\n\n    @Override\n    public String getName() {\n        return \"hoge-session-auth\";\n    }\n    @Override\n    public void initialize(Bootstrap<HogeConfiguration> bootstrap) {\n        bootstrap.addBundle(new ViewBundle<HogeConfiguration>() {\n            @Override\n            public ImmutableMap<String, ImmutableMap<String, String>> getViewConfiguration(HogeConfiguration config) {\n                return config.getViewRendererConfiguration();\n            }\n        });\n{\n    }\n\n    @Override\n    public void run(HogeConfiguration configuration,Environment environment) throws Exception {\n        environment.jersey().register(AuthFactory.binder(new SessionUserAuthFactory<HogeUser>(new HogeSessionAuthenticator(), \"HOGE USER\", HogeUser.class)));\n\n        final LoginResource loginResource = new LoginResource();\n        environment.jersey().register(loginResource);\n        final HogeUserResource hogeUserResource = new HogeUserResource();\n        environment.jersey().register(hogeUserResource);\n    }\n}\n\n\n\n\njp.hoge.app.HogeConfiguration.java\npackage jp.hoge.app;\n\nimport javax.validation.constraints.NotNull;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.common.collect.ImmutableMap;\n\nimport io.dropwizard.Configuration;\n\npublic class HogeConfiguration extends Configuration {\n\n    @NotNull\n    private ImmutableMap<String, ImmutableMap<String, String>> viewRendererConfiguration =  ImmutableMap.of();\n\n    @JsonProperty(\"viewRendererConfiguration\")\n    public ImmutableMap<String, ImmutableMap<String, String>> getViewRendererConfiguration() {\n        return viewRendererConfiguration;\n    }\n}\n\n\n\n\nresources/jp/hoge/app/views/login.ftl\n<#-- @ftlvariable name=\"\" type=\"jp.hoge.app.views.LoginView\" -->\n<html>\n  <head><meta charset=\"UTF-8\"></head>\n  <body>\n   <h1>\u30ed\u30b0\u30a4\u30f3</h1>\n\n   <form action=\"login/signup\" method=\"post\">\n     <p>E\u30e1\u30fc\u30eb : <input type=\"text\" name=\"email\" size=\"40\"></p>\n     <p>\u30d1\u30b9\u30ef\u30fc\u30c9 : <input type=\"password\" name=\"password\" size=\"40\"></p>\n     <input type=\"submit\" value=\"\u30ed\u30b0\u30a4\u30f3\">\n   </form> \n  </body>\n</html>\n\n\n\nresources/jp/hoge/app/views/mypage_top.ftl\n<#-- @ftlvariable name=\"\" type=\"jp.hoge.app.views.LoginView\" -->\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n   <!-- calls getUser().getUserId() and sanitizes it -->\n   <h1>Hello, ${user.userId?html}!</h1>\n  </body>\n</html>\n\n\n\nhoge.yml\n# the key needs to match the suffix of the renderer\nviewRendererConfiguration:\n    .ftl:\n        strict_syntax: yes\n        whitespace_stripping: yes\nserver:\n  applicationConnectors:\n    - type: http\n      port: 8082\n    - type: https\n      port: 8443\n      validateCerts: false\n  adminConnectors:\n    - type: http\n      port: 8084\n    - type: https\n      port: 8444\n      validateCerts: false\n\n\n\nbuild.gradle\n\nplugins {\n  id 'java'\n  id 'com.github.johnrengelman.shadow' version '1.2.0'\n}\n\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'application'\n\ndefaultTasks 'shadowJar'\n\nproject.ext {\n    authorName = 'Hogeo HOGETA'\n    dropwizardVersion = '0.8.0'\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\ngroup = 'jp.hoge.app'\nversion = '0.1'\n\napplicationName = 'hoge-session-auth'\nmainClassName = 'jp.hoge.app.HogeApplication'\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n}\n\ndef defaultEncoding = 'UTF-8'\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\n\ndependencies {\n    // \u5168\u90e8\u306f\u8981\u3089\u306a\u3044\u3051\u3069\u6d88\u3059\u306e\u3081\u3093\u3069\u3044\u3093\u3067\n    compile \"io.dropwizard:dropwizard-core:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-assets:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-views:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-views-freemarker:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-migrations:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-hibernate:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-jdbi:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-auth:${dropwizardVersion}\"\n\n    testCompile \"junit:junit:4.11\"\n    compile \"io.dropwizard:dropwizard-testing:${dropwizardVersion}\"\n\n}\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = '2.2'\n}\n\nshadowJar {\n    archiveName = String.format(\"%s-%s.jar\", applicationName, version)\n    mergeServiceFiles()\n    exclude 'META-INF/*.SF'\n    exclude 'META-INF/*.DSA'\n    exclude 'META-INF/*.RSA'\n}\n\njar {\n    manifest {\n        attributes(\n            'Implementation-Title': applicationName,\n            'Implementation-Version': version,\n            'Built-By': authorName,\n            'Built-Time': new Date(),\n            'Main-Class': mainClassName,\n            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')\n            )\n    }\n}\n\n\n\n# \u3084\u3063\u3066\u308b\u3053\u3068\n\u305b\u3063\u304b\u304ffreemarker\u3068\u304b\u68b1\u5305\u3055\u308c\u3066\u308b\u306e\u3067\u3001\u666e\u901a\u306eWEB\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u307f\u308b\u4e0a\u3067\u3001\u8a8d\u8a3c\u3092SessionID\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\u305d\u3057\u3066\u304d\u3063\u3068\u63a2\u305b\u3070\u81ea\u4f5c\u3057\u306a\u304f\u3066\u3082\u3059\u3067\u306b\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```java\n/* TODO \u30b3\u30fc\u30c9\u3068\u304b\u4f5c\u308a\u3068\u304b\u8272\u3005\u6c5a\u3044\u306e\u3067\u4f7f\u3046\u3068\u304d\u306b\u306f\u3061\u3083\u3093\u3068\u4fee\u6b63\u3059\u308b */\n```\n\n* Cookie\u306bsid\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\n* \u30ed\u30b0\u30a4\u30f3\u6642\u306bCookie\u306bsid\u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308b\n\n\n# \u30b3\u30fc\u30c9\n\u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u3066\u307f\u305f\u9069\u5f53\u306a\u30b3\u30fc\u30c9\n\n```java:jp.hoge.app.auth.SessionUserAuthFactory.java\npackage jp.hoge.app.auth;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.Context;\n\nimport io.dropwizard.auth.AuthFactory;\nimport io.dropwizard.auth.AuthenticationException;\nimport io.dropwizard.auth.Authenticator;\nimport io.dropwizard.auth.UnauthorizedHandler;\n\n/**\n * \u307b\u307c\u307b\u307cio.dropwizard.auth.basic.BasicAuthFactory\u306e\u5199\u7d4c\u3067\u3044\u3051\u305f\n */\npublic class SessionUserAuthFactory<T> extends\n\t\tAuthFactory<HogeTokenCredentials, T> {\n\n\t@Context\n\tprivate HttpServletRequest request;\n\tprivate final boolean required;\n    private UnauthorizedHandler unauthorizedHandler = new HogeUnauthorizedHandler();\n    private final Class<T> generatedClass;\n    private String prefix = \"Sid\"; // \u4f7f\u308f\u306a\u3044\u3051\u3069\n    private final String realm; // \u4f7f\u308f\u306a\u3044\u3051\u3069\n\n\tpublic SessionUserAuthFactory(\n\t\t\tAuthenticator<HogeTokenCredentials, T> authenticator,\n\t\t\tfinal String realm,\n\t\t\tfinal Class<T> generatedClass) {\n\t\tsuper(authenticator);\n\t\tthis.required = false;\n        this.realm = realm;\n\t\tthis.generatedClass = generatedClass;\n\t}\n    private SessionUserAuthFactory(final boolean required,\n            final Authenticator<HogeTokenCredentials, T> authenticator,\n            final String realm,\n            final Class<T> generatedClass) {\n    \tsuper(authenticator);\n    \tthis.required = required;\n        this.realm = realm;\n    \tthis.generatedClass = generatedClass;\n    }\n\n    public SessionUserAuthFactory<T> responseBuilder(UnauthorizedHandler unauthorizedHandler) {\n        this.unauthorizedHandler = unauthorizedHandler;\n        return this;\n    }\n    \n\t@Override\n\tpublic T provide() {\n\t\t// \u30e9\u30e0\u30c0\u5f0f\u3067\u66f8\u3044\u3066\u307f\u305f\u304b\u3063\u305f\u306e (\u6b63\u3057\u3044\u306e\u304b\u77e5\u3089\u3093)\n\t\tOptional<HogeTokenCredentials> credentials = Optional.ofNullable(request)\n\t\t\t\t.map(req -> req.getCookies())\n\t\t\t\t.map(cookies -> Arrays.asList(cookies).stream()\n\t\t\t\t\t\t.filter(cookie -> \"sid\".equals(cookie.getName()))\n\t\t\t\t\t\t.findFirst().orElseGet(null))\n\t\t\t\t.map(sidcookie -> sidcookie.getValue())\n\t\t\t\t.map(sid -> new HogeTokenCredentials(sid));\n\t\t\n\t\tif (credentials.isPresent()) {\n\t\t\ttry {\n\t\t\t\t// guava\u51fa\u3066\u304d\u3066\u3082\u3046\u305f\n\t\t\t\tfinal com.google.common.base.Optional<T> result = authenticator().authenticate(credentials.get());\n\t\t\t\tif (result.isPresent()) return result.get();\n\t\t\t} catch (AuthenticationException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} \n        // \u8a8d\u8a3c\u5fc5\u9808\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306fUnauthorizedHandler\u3092\u5229\u7528\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\n        if (required) {\n            throw new WebApplicationException(unauthorizedHandler.buildResponse(prefix, realm));\n        }\n\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void setRequest(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\t@Override\n\tpublic AuthFactory<HogeTokenCredentials, T> clone(boolean required) {\n\t\treturn new SessionUserAuthFactory<>(required, authenticator(),this.realm, this.generatedClass).responseBuilder(unauthorizedHandler);\n\t}\n\n\t@Override\n\tpublic Class<T> getGeneratedClass() {\n        return generatedClass;\n\t}\n\n}\n\n```\n\n```java:jp.hoge.app.auth.HogeUnauthorizedHandler.java\npackage jp.hoge.app.auth;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javax.ws.rs.core.Response;\n\nimport io.dropwizard.auth.UnauthorizedHandler;\n\npublic class HogeUnauthorizedHandler implements UnauthorizedHandler {\n\n    @Override\n    public Response buildResponse(String prefix, String realm) {\n    \t\n        try {\n\t\t\t// \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n\t\t\treturn Response.seeOther(new URI(\"/login\")).build();\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n        return Response.ok().build();\n    }\n}\n\n```\n\n```java:jp.hoge.app.auth.HogeTokenCredentials.java\npackage jp.hoge.app.auth;\n\npublic class HogeTokenCredentials {\n\n\tprivate final String token;\n\tpublic HogeTokenCredentials(String token) {\n        this.token = token;\n    }\n\tpublic String getToken() {\n\t\treturn token;\n\t}\n}\n\n```\n\n\n```java:jp.hoge.app.auth.HogeSessionAuthenticator.java\npackage jp.hoge.app.auth;\n\nimport com.google.common.base.Optional;\n\nimport jp.hoge.app.core.HogeUser;\nimport io.dropwizard.auth.AuthenticationException;\nimport io.dropwizard.auth.Authenticator;\n\npublic class HogeSessionAuthenticator implements Authenticator<HogeTokenCredentials, HogeUser> {\n\n\t@Override\n\tpublic Optional<HogeUser> authenticate(HogeTokenCredentials credentials)\n\t\t\tthrows AuthenticationException {\n\t\t// \u672c\u6765\u306fredis\u3068\u304b\u306b\u554f\u3044\u5408\u308f\u305b\u3066\u6709\u52b9\u304b\u78ba\u8a8d\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\t\tif (\"abcdefg\".equals(credentials.getToken())) {\n\t\t\treturn Optional.of(new HogeUser(\"myID\"));\n\t\t}\n\t\t\n\t\treturn Optional.absent();\n\t}\n\t\n}\n\n```\n\n```java:jp.hoge.app.core.HogeUser.java\npackage jp.hoge.app.core;\n\npublic class HogeUser {\n\n\tprivate final String userId;\n\t\n\tpublic HogeUser(String userId) {\n\t\tthis.userId = userId;\n\t}\n\n\tpublic String getUserId() {\n\t\treturn userId;\n\t}\n\t\n}\n\n```\n\n```java:jp.hoge.app.resources.LoginResource.java\npackage jp.hoge.app.resources;\n\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.NewCookie;\nimport javax.ws.rs.core.Response;\n\nimport jp.hoge.app.views.LoginView;\n\n@Path(\"/login\")\npublic class LoginResource {\n\n    @GET\n    @Path(\"/\")\n    @Produces(MediaType.TEXT_HTML)\n    public LoginView getLoginView() {\n        return new LoginView(LoginView.Template.FREEMARKER);\n    }\n    \n    @POST\n    @Path(\"/signin\")\n    public Response signup(@FormParam(\"email\") String email , @FormParam(\"password\") String password) {\n        // \u30a2\u30a4\u30d1\u30b9\u8a8d\u8a3c\n    \tif (\"test\".equals(email) && \"test\".equals(password)) {\n    \t    // Cookie\u751f\u6210 (\u3053\u308c\u3060\u3068\u30d6\u30e9\u30a6\u30b6\u9589\u3058\u308b\u307e\u3067\u306e\u9593\u3060\u3051)\n    \t    NewCookie cookies = new NewCookie(\"sid\",\"abcdefg\",\"/\",null,\"\",NewCookie.DEFAULT_MAX_AGE,false);;\n    \t\ttry {\n\t\t\t\t// Cookie\u30bb\u30c3\u30c8\u3057\u3066\u30de\u30a4\u30da\u30fc\u30b8\u753b\u9762\u3078\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n\t\t\t\treturn Response.seeOther(new URI(\"/mypage\")).cookie(cookies).build();\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n    \t}\n    \t\n    \ttry {\n\t\t\t// \u8a8d\u8a3c\u5931\u6557\u3057\u305f\u3089\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3078\u623b\u308b\n\t\t\treturn Response.seeOther(new URI(\"/login\")).build();\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    \treturn Response.serverError().build();\n    }\n}\n```\n\n```java:jp.hoge.app.resources.HogeUserResource.java\npackage jp.hoge.app.resources;\n\nimport io.dropwizard.auth.Auth;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport jp.hoge.app.core.HogeUser;\nimport jp.hoge.app.views.MypageTopView;\n\n@Path(\"/mypage\")\npublic class HogeUserResource {\n\n    @GET\n    @Path(\"/\")\n    @Produces(MediaType.TEXT_HTML)\n    public MypageTopView getMypageView(@Auth HogeUser user) {\n        // @Auth\u3067Cookie\u8a8d\u8a3c\u5f8c\u306bUser\u304c\u53d6\u5f97\u3055\u308c\u308b\n        return new MypageTopView(MypageTopView.Template.FREEMARKER,user);\n    }\n}\n\n```\n\n```java:jp.hoge.app.views.LoginView.java\npackage jp.hoge.app.views;\n\n\nimport io.dropwizard.views.View;\n\npublic class LoginView extends View {\n\n\tpublic enum Template {\n    \tFREEMARKER(\"login.ftl\");\n    \t\n    \tprivate String templateName;\n    \tprivate Template(String templateName){\n    \t\tthis.templateName = templateName;\n    \t}\n    \t\n    \tpublic String getTemplateName(){\n    \t\treturn templateName;\n    \t}\n    }\n\t\n\tpublic LoginView(LoginView.Template templateName) {\n\t\tsuper(templateName.getTemplateName());\n\t}\n\t\n}\n```\n\n```java:jp.hoge.app.views.MypageTopView.java\npackage jp.hoge.app.views;\n\nimport jp.hoge.app.core.HogeUser;\nimport io.dropwizard.views.View;\n\npublic class MypageTopView extends View {\n\n\tprivate final HogeUser user;\n\tpublic enum Template {\n    \tFREEMARKER(\"mypage_top.ftl\");\n    \t\n    \tprivate String templateName;\n    \tprivate Template(String templateName){\n    \t\tthis.templateName = templateName;\n    \t}\n    \t\n    \tpublic String getTemplateName(){\n    \t\treturn templateName;\n    \t}\n    }\n\t\n\tpublic MypageTopView(MypageTopView.Template templateName,HogeUser user) {\n\t\tsuper(templateName.getTemplateName());\n\t\tthis.user = user;\n\t}\n\t\n\tpublic HogeUser getUser() {\n\t\treturn user;\n\t}\n\n}\n\n```\n\n```java:jp.hoge.app.HogeApplication.java\npackage jp.hoge.app;\n\nimport jp.hoge.app.auth.HogeSessionAuthenticator;\nimport jp.hoge.app.auth.SessionUserAuthFactory;\nimport jp.hoge.app.core.HogeUser;\nimport jp.hoge.app.resources.LoginResource;\nimport jp.hoge.app.resources.HogeUserResource;\n\nimport com.google.common.collect.ImmutableMap;\n\nimport io.dropwizard.Application;\nimport io.dropwizard.auth.AuthFactory;\nimport io.dropwizard.setup.Bootstrap;\nimport io.dropwizard.setup.Environment;\nimport io.dropwizard.views.ViewBundle;\n\npublic class HogeApplication extends Application<HogeConfiguration> {\n\t\n\tpublic static void main(String[] args) throws Exception {\n        new HogeApplication().run(args);\n    }\n\t\n\t@Override\n    public String getName() {\n        return \"hoge-session-auth\";\n    }\n\t@Override\n\tpublic void initialize(Bootstrap<HogeConfiguration> bootstrap) {\n\t\tbootstrap.addBundle(new ViewBundle<HogeConfiguration>() {\n\t        @Override\n\t        public ImmutableMap<String, ImmutableMap<String, String>> getViewConfiguration(HogeConfiguration config) {\n\t            return config.getViewRendererConfiguration();\n\t        }\n\t\t});\n{\n\t}\n\n\t@Override\n\tpublic void run(HogeConfiguration configuration,Environment environment) throws Exception {\n\t\tenvironment.jersey().register(AuthFactory.binder(new SessionUserAuthFactory<HogeUser>(new HogeSessionAuthenticator(), \"HOGE USER\", HogeUser.class)));\n\t\t\n\t\tfinal LoginResource loginResource = new LoginResource();\n\t\tenvironment.jersey().register(loginResource);\n\t\tfinal HogeUserResource hogeUserResource = new HogeUserResource();\n\t\tenvironment.jersey().register(hogeUserResource);\n\t}\n}\n\n```\n\n```java:jp.hoge.app.HogeConfiguration.java\npackage jp.hoge.app;\n\nimport javax.validation.constraints.NotNull;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.common.collect.ImmutableMap;\n\nimport io.dropwizard.Configuration;\n\npublic class HogeConfiguration extends Configuration {\n\t\n\t@NotNull\n    private ImmutableMap<String, ImmutableMap<String, String>> viewRendererConfiguration =  ImmutableMap.of();\n\t\n    @JsonProperty(\"viewRendererConfiguration\")\n    public ImmutableMap<String, ImmutableMap<String, String>> getViewRendererConfiguration() {\n        return viewRendererConfiguration;\n    }\n}\n\n```\n\n```html:resources/jp/hoge/app/views/login.ftl\n<#-- @ftlvariable name=\"\" type=\"jp.hoge.app.views.LoginView\" -->\n<html>\n  <head><meta charset=\"UTF-8\"></head>\n  <body>\n   <h1>\u30ed\u30b0\u30a4\u30f3</h1>\n   \n   <form action=\"login/signup\" method=\"post\">\n     <p>E\u30e1\u30fc\u30eb : <input type=\"text\" name=\"email\" size=\"40\"></p>\n     <p>\u30d1\u30b9\u30ef\u30fc\u30c9 : <input type=\"password\" name=\"password\" size=\"40\"></p>\n     <input type=\"submit\" value=\"\u30ed\u30b0\u30a4\u30f3\">\n   </form> \n  </body>\n</html>\n```\n\n```html:resources/jp/hoge/app/views/mypage_top.ftl\n<#-- @ftlvariable name=\"\" type=\"jp.hoge.app.views.LoginView\" -->\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n   <!-- calls getUser().getUserId() and sanitizes it -->\n   <h1>Hello, ${user.userId?html}!</h1>\n  </body>\n</html>\n```\n\n```yaml:hoge.yml\n# the key needs to match the suffix of the renderer\nviewRendererConfiguration:\n    .ftl:\n        strict_syntax: yes\n        whitespace_stripping: yes\nserver:\n  applicationConnectors:\n    - type: http\n      port: 8082\n    - type: https\n      port: 8443\n      validateCerts: false\n  adminConnectors:\n    - type: http\n      port: 8084\n    - type: https\n      port: 8444\n      validateCerts: false\n```\n\n```groovy:build.gradle\n\nplugins {\n  id 'java'\n  id 'com.github.johnrengelman.shadow' version '1.2.0'\n}\n\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'application'\n\ndefaultTasks 'shadowJar'\n\nproject.ext {\n    authorName = 'Hogeo HOGETA'\n    dropwizardVersion = '0.8.0'\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\ngroup = 'jp.hoge.app'\nversion = '0.1'\n\napplicationName = 'hoge-session-auth'\nmainClassName = 'jp.hoge.app.HogeApplication'\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n}\n\ndef defaultEncoding = 'UTF-8'\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\n\ndependencies {\n    // \u5168\u90e8\u306f\u8981\u3089\u306a\u3044\u3051\u3069\u6d88\u3059\u306e\u3081\u3093\u3069\u3044\u3093\u3067\n    compile \"io.dropwizard:dropwizard-core:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-assets:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-views:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-views-freemarker:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-migrations:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-hibernate:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-jdbi:${dropwizardVersion}\"\n    compile \"io.dropwizard:dropwizard-auth:${dropwizardVersion}\"\n\n    testCompile \"junit:junit:4.11\"\n    compile \"io.dropwizard:dropwizard-testing:${dropwizardVersion}\"\n\n}\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = '2.2'\n}\n\nshadowJar {\n    archiveName = String.format(\"%s-%s.jar\", applicationName, version)\n    mergeServiceFiles()\n    exclude 'META-INF/*.SF'\n    exclude 'META-INF/*.DSA'\n    exclude 'META-INF/*.RSA'\n}\n\njar {\n    manifest {\n        attributes(\n            'Implementation-Title': applicationName,\n            'Implementation-Version': version,\n            'Built-By': authorName,\n            'Built-Time': new Date(),\n            'Main-Class': mainClassName,\n            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')\n            )\n    }\n}\n\n```\n", "tags": ["dropwizard0.8.0"]}