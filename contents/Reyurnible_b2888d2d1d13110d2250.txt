{"context": "\u4eca\u56de\u306f\u3001RxBinding\u3068\u3044\u3046Jake\u5148\u751f\u4f5c\u306eView\u30a4\u30d9\u30f3\u30c8\u3092RxJava\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001View\u30a4\u30d9\u30f3\u30c8\u3092\u30ad\u30ec\u30a4\u306b\u5236\u5fa1\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u7686\u3055\u3093\u304c\u3001\u4e00\u5ea6\u306f\u60a9\u3093\u3060\u3053\u3068\u304c\u3042\u308a\u305d\u3046\u306a\u4e8b\u67c4\u3092\u4e2d\u5fc3\u306bRxBinding\u3092\u4f7f\u3046\u3068\u30ad\u30ec\u30a4\u306b\u51e6\u7406\u3067\u304d\u308b\u3082\u306e\u3092\u7d39\u4ecb\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4e0b\u6e96\u5099\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u306e\u306f\u3001\u3053\u3061\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\nRxJava\nRxAndroid\nRxBinding\n\n\u305d\u308c\u305e\u308c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\n\u4eca\u56de\u306f\u3001RxBinding\u306f\u6a19\u6e96\u306e\u3082\u306e\u3060\u3051\u3067\u5927\u4e08\u592b\u3067\u3059\u3002\u3082\u3057support\u30e9\u30a4\u30d6\u30e9\u30ea\u306eView\u306a\u3069\u3082\u4f7f\u7528\u3059\u308b\u5834\u5408\u3084\u3001Kotlin\u3067\u30ad\u30ec\u30a4\u306b\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u305d\u308c\u305e\u308c\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\napp/build.gradle\ncompile 'io.reactivex:rxjava:1.1.4'\ncompile 'io.reactivex:rxandroid:1.2.0'\ncompile 'com.jakewharton.rxbinding:rxbinding:0.4.0'\n\n\n\u203b\u307e\u305f\u3001\u4eca\u56de\u306f\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30a4\u30d9\u30f3\u30c8\u3078\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u306e\u51e6\u7406\u306f\u7701\u304d\u307e\u3059\u306e\u3067\u3001\u304a\u4f7f\u3044\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5408\u308f\u305b\u3066\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0a\u3067\u4e0b\u6e96\u5099\u306f\u7d42\u4e86\u3067\u3059\uff01\n\u3053\u3053\u304b\u3089\u5177\u4f53\u7684\u306aRxBinding\u3092\u4f7f\u3063\u305f\u51e6\u7406\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\nEditText\u3067Email\u3068Password\u306e\u5165\u529b\u72b6\u614b\u76e3\u8996\n\u307e\u305a\u306f\u3001\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306a\u3069\u3067\u3088\u304f\u3042\u308bEditText\u306e\u5165\u529b\u72b6\u614b\u306b\u3088\u3063\u3066\u30dc\u30bf\u30f3\u306eenable\u3092\u5207\u308a\u66ff\u3048\u308b\u51e6\u7406\u3067\u3059\u3002\n\nLoginActivity.java\npublic class LoginActivity extends AppCompatActivity {\n    // Regex patterns\n    private static final Pattern EMAIL_PATTERN = Pattern.compile(\"^[A-Za-z0-9-._/+?]+@[A-Za-z0-9-_]+.[A-Za-z0-9-._]+$\");\n    private static final Pattern PASSWORD_PATTERN = Pattern.compile(\"^[a-zA-Z0-9]{8,20}$\");\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        // FindViews\n        AutoCompleteTextView emailEditText = (AutoCompleteTextView) findViewById(R.id.email);\n        EditText passwordEditText = (EditText) findViewById(R.id.password);\n        Button signinButton = (Button) findViewById(R.id.signin_button);\n\n        Observable<Boolean> emailObservable = observePatternTextChange(emailEditText, EMAIL_PATTERN);\n        Observable<Boolean> passwordObservable = observePatternTextChange(passwordEditText, PASSWORD_PATTERN);\n        // \u4e0a\u306e2\u3064\u306e\u5165\u529b\u72b6\u614b\u306e\u76e3\u8996\u7d50\u679c\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u901a\u77e5\u304c\u6765\u308b\u3088\u3046\u306bcombineLatest\u3067\u307e\u3068\u3081\u3066\u76e3\u8996\u3092\u884c\u3044\u307e\u3059\n        Observable.combineLatest(emailObservable, passwordObservable,\n                new Func2<Boolean, Boolean, Boolean>() {\n                    @Override\n                    public Boolean call(Boolean email, Boolean password) {\n                        return email && password;\n                    }\n                })\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(RxView.enabled(signinButton));\n\n        signinButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(LoginActivity.this, \"\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    /**\n     * EditText\u306a\u3069TextView\u306e\u5165\u529b\u306e\u72b6\u614b\u3092\u6b63\u898f\u8868\u73fe\u306ePattern\u3068\u6bd4\u8f03\u3057\u3066\u3001\u30d1\u30bf\u30fc\u30f3\u3092\u307f\u305f\u3044\u3057\u3066\u3044\u308b\u304bBoolean\u306eObservable\u3067\u7d50\u679c\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n     */\n    private Observable<Boolean> observePatternTextChange(TextView textView, final Pattern pattern) {\n        return RxTextView.textChanges(textView).map(new Func1<CharSequence, Boolean>() {\n            @Override\n            public Boolean call(CharSequence charSequence) {\n                return pattern.matcher(charSequence).find();\n            }\n        });\n    }\n\n}\n\n\n\u91cd\u8981\u306a\u306e\u306f\u3001combineLatest\u30672\u3064\u306eEditText\u306e\u5165\u529b\u72b6\u614b\u3092\u307e\u3068\u3081\u3066\u76e3\u8996\u3059\u308b\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u3069\u3063\u3061\u306e\u5165\u529b\u72b6\u614b\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082\u7247\u65b9\u306e\u76f4\u524d\u306e\u72b6\u614b\u3092\u5f15\u6570\u3068\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u3001\u5165\u529b\u72b6\u614b\u3092\u307e\u3068\u3081\u3066\u76e3\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001EditText\u306e\u76e3\u8996\u3084Button\u306eEnable\u3092\u5909\u66f4\u3059\u308b\u51e6\u7406\u306fUI\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u305f\u3081\u3001subscriveOn\u3068observeOn\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff01\n\nButton\u306e\uff12\u91cd\u62bc\u3057\u9632\u6b62\n\u6b21\u306b\u3001Button\u3092\u62bc\u3057\u305f\u969b\u306bButton\u304c2\u56de\u62bc\u3055\u308c\u308b\u306e\u3092\u9632\u6b62\u3057\u305f\u308a\u3001\u8907\u6570\u306e\u30dc\u30bf\u30f3\u3092\u540c\u6642\u62bc\u3057\u3057\u305f\u969b\u306b\u3069\u3063\u3061\u306e\u51e6\u7406\u3082\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u7121\u3044\u3088\u3046\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u51e6\u7406\u3067\u3059\u3002\n\nMainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    Button mLoginButton;\n    Button mListButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mLoginButton = (Button) findViewById(R.id.login_button);\n        mListButton = (Button) findViewById(R.id.list_button);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        // \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3057\u307e\u3059. clicks\u306fVoid\u306eObservable\u3067\u8fd4\u3063\u3066\u304f\u308b\u305f\u3081doOnNext\u3067\u51e6\u7406\u3092\u4e88\u3081\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\n        Observable<Void> loginClickObservable = RxView.clicks(mLoginButton).doOnNext(getIntentAction(LoginActivity.class));\n        Observable<Void> listClickObservable = RxView.clicks(mListButton).doOnNext(getIntentAction(ListActivity.class));\n        // \u4e8c\u3064\u306e\u51e6\u7406\u306e\u5408\u8a08\u5b9f\u884c\u56de\u6570\u306b\u30ea\u30df\u30c3\u30c8\u3092\u304b\u3051\u308b\n        Observable.merge(loginClickObservable, listClickObservable)\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(AndroidSchedulers.mainThread())\n                .limit(1)\n                .subscribe();\n    }\n\n    private Action1<Void> getIntentAction(final Class<? extends Activity> clazz) {\n        return new Action1<Void>() {\n            @Override\n            public void call(Void aVoid) {\n                startActivity(new Intent(getApplicationContext(), clazz));\n            }\n        };\n    }\n\n}\n\n\n\u4eca\u56de\u306f\u3001\u4f8b\u3068\u3057\u3066\u305f\u3060Intent\u3092\u884c\u3046\u3060\u3051\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306flimit\u3092\u8a2d\u3051\u305f\u305f\u3081\u3001\u4e00\u5ea6\u753b\u9762\u9077\u79fb\u3057\u305f\u5f8c\u306b\u518d\u5ea6Limit\u3092\u8a2d\u5b9a\u3057\u76f4\u3059\u305f\u3081\u306bonResume\u306e\u4e2d\u3067View\u306eBind\u3092\u884c\u3046\u306e\u304c\u809d\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u3061\u3089\u306f\u5c11\u3057\u4f7f\u3044\u52dd\u624b\u306e\u4f4e\u3044\u90e8\u5206\u306a\u306e\u3067\u3059\u304cRxView.clicks\u3067\u306fVoid\u306eObservable\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3082\u3057\u672c\u6765\u306e\u30ea\u30b9\u30ca\u30fc\u3068\u540c\u3058\u304fView\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306fmap\u3067View\u3092\u8fd4\u3057\u3066\u3042\u3052\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nListView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\n\u6700\u5f8c\u306b\u3001ListView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u306b\u3088\u3063\u3066\u30da\u30fc\u30b8\u30f3\u30b0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u4f8b\u3067\u3059\u3002\n\nListActivity.java\npublic class ListActivity extends AppCompatActivity {\n    private static final int LIMIT = 30;\n\n    private ArrayAdapter<String> mAdapter;\n    private boolean mIsRequest = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_list);\n        ListView listView = (ListView) findViewById(R.id.listview);\n        mAdapter = new ArrayAdapter<>(getApplicationContext(), R.layout.item_list);\n        listView.setAdapter(mAdapter);\n\n        RxAbsListView.scrollEvents(listView)\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(Schedulers.io())\n                // \u30b9\u30af\u30ed\u30fc\u30eb\u4f4d\u7f6e\u304c\u4e0b\u304b\u30893\u3064\u76ee\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u304b\u3092\u898b\u308b\n                .filter(getEndScrollFilter(3))\n                // \u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304c\u51e6\u7406\u3092\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\n                .filter(new Func1<AbsListViewScrollEvent, Boolean>() {\n                    @Override\n                    public Boolean call(AbsListViewScrollEvent scrollEvent) {\n                        return !mIsRequest;\n                    }\n                })\n                // \u30c7\u30fc\u30bf\u53d6\u5f97\u306eObservable\u306b\u51e6\u7406\u3092\u7e4b\u3052\u307e\u3059\n                .flatMap(new Func1<AbsListViewScrollEvent, Observable<List<String>>>() {\n                    @Override\n                    public Observable<List<String>> call(AbsListViewScrollEvent scrollEvent) {\n                        return getDataObservable(scrollEvent.totalItemCount(), LIMIT);\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Action1<List<String>>() {\n                    @Override\n                    public void call(List<String> strings) {\n                        mIsRequest = false;\n                        mAdapter.addAll(strings);\n                    }\n                }, new Action1<Throwable>() {\n                    @Override\n                    public void call(Throwable throwable) {\n                        mIsRequest = false;\n                        Toast.makeText(getApplicationContext(), \"\u5931\u6557\u3057\u307e\u3057\u305f\", Toast.LENGTH_SHORT).show();\n                    }\n                });\n    }\n\n    private Func1<AbsListViewScrollEvent, Boolean> getEndScrollFilter(final int space) {\n        return new Func1<AbsListViewScrollEvent, Boolean>() {\n            @Override\n            public Boolean call(AbsListViewScrollEvent scrollEvent) {\n                return scrollEvent.firstVisibleItem() + scrollEvent.visibleItemCount() + space >= scrollEvent.totalItemCount();\n            }\n        };\n    }\n\n    private Observable<List<String>> getDataObservable(final int offset, final int limit) {\n        mIsRequest = true;\n        final List<String> data = new ArrayList<>();\n        for (int i = 0; i < limit; i++) {\n            data.add(String.valueOf(i + offset));\n        }\n        return Observable.just(data);\n    }\n\n}\n\n\n\nListView\u306a\u3069\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3046\u306b\u306f\u3001RxAbsListView.scrollEvents\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001ListView\u306e\u51e6\u7406\u3067\u6bce\u5ea6\u304a\u306a\u3058\u307f\u306evisibleItemCount\u306a\u3069\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fRx\u306eFilter\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u306e\u306bflatMap\u3092\u4f7f\u3063\u3066\u305d\u306e\u307e\u307e\u51e6\u7406\u3092\u7e4b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\uff01\n\n\u6700\u5f8c\u306b\n\u3069\u3046\u3067\u3059\u304b\uff1fUI\u306e\u51e6\u7406\u3082Rx\u3067\u6271\u3046\u3068\u5909\u6570\u306e\u6570\u3092\u5727\u5012\u7684\u306b\u5c11\u306a\u304f\u3067\u304d\u308b\u306e\u3067\u30ad\u30ec\u30a4\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305c\u3072\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3082\u5408\u308f\u305b\u3066\u307f\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nGitHub RxBindingSample\n\n\u4eca\u56de\u306f\u3001RxBinding\u3068\u3044\u3046Jake\u5148\u751f\u4f5c\u306eView\u30a4\u30d9\u30f3\u30c8\u3092RxJava\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001View\u30a4\u30d9\u30f3\u30c8\u3092\u30ad\u30ec\u30a4\u306b\u5236\u5fa1\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u7686\u3055\u3093\u304c\u3001\u4e00\u5ea6\u306f\u60a9\u3093\u3060\u3053\u3068\u304c\u3042\u308a\u305d\u3046\u306a\u4e8b\u67c4\u3092\u4e2d\u5fc3\u306bRxBinding\u3092\u4f7f\u3046\u3068\u30ad\u30ec\u30a4\u306b\u51e6\u7406\u3067\u304d\u308b\u3082\u306e\u3092\u7d39\u4ecb\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u4e0b\u6e96\u5099\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u306e\u306f\u3001\u3053\u3061\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n- [RxJava](https://github.com/ReactiveX/RxJava)\n- [RxAndroid](https://github.com/ReactiveX/RxAndroid)\n- [RxBinding](https://github.com/JakeWharton/RxBinding)\n\n\u305d\u308c\u305e\u308c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\n\u4eca\u56de\u306f\u3001RxBinding\u306f\u6a19\u6e96\u306e\u3082\u306e\u3060\u3051\u3067\u5927\u4e08\u592b\u3067\u3059\u3002\u3082\u3057support\u30e9\u30a4\u30d6\u30e9\u30ea\u306eView\u306a\u3069\u3082\u4f7f\u7528\u3059\u308b\u5834\u5408\u3084\u3001Kotlin\u3067\u30ad\u30ec\u30a4\u306b\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u305d\u308c\u305e\u308c\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```app/build.gradle\ncompile 'io.reactivex:rxjava:1.1.4'\ncompile 'io.reactivex:rxandroid:1.2.0'\ncompile 'com.jakewharton.rxbinding:rxbinding:0.4.0'\n```\n\n\u203b\u307e\u305f\u3001\u4eca\u56de\u306f\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30a4\u30d9\u30f3\u30c8\u3078\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u306e\u51e6\u7406\u306f\u7701\u304d\u307e\u3059\u306e\u3067\u3001\u304a\u4f7f\u3044\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5408\u308f\u305b\u3066\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0a\u3067\u4e0b\u6e96\u5099\u306f\u7d42\u4e86\u3067\u3059\uff01\n\u3053\u3053\u304b\u3089\u5177\u4f53\u7684\u306aRxBinding\u3092\u4f7f\u3063\u305f\u51e6\u7406\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\n## EditText\u3067Email\u3068Password\u306e\u5165\u529b\u72b6\u614b\u76e3\u8996\n\u307e\u305a\u306f\u3001\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306a\u3069\u3067\u3088\u304f\u3042\u308bEditText\u306e\u5165\u529b\u72b6\u614b\u306b\u3088\u3063\u3066\u30dc\u30bf\u30f3\u306eenable\u3092\u5207\u308a\u66ff\u3048\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```LoginActivity.java\npublic class LoginActivity extends AppCompatActivity {\n    // Regex patterns\n    private static final Pattern EMAIL_PATTERN = Pattern.compile(\"^[A-Za-z0-9-._/+?]+@[A-Za-z0-9-_]+.[A-Za-z0-9-._]+$\");\n    private static final Pattern PASSWORD_PATTERN = Pattern.compile(\"^[a-zA-Z0-9]{8,20}$\");\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n\n        // FindViews\n        AutoCompleteTextView emailEditText = (AutoCompleteTextView) findViewById(R.id.email);\n        EditText passwordEditText = (EditText) findViewById(R.id.password);\n        Button signinButton = (Button) findViewById(R.id.signin_button);\n\n        Observable<Boolean> emailObservable = observePatternTextChange(emailEditText, EMAIL_PATTERN);\n        Observable<Boolean> passwordObservable = observePatternTextChange(passwordEditText, PASSWORD_PATTERN);\n        // \u4e0a\u306e2\u3064\u306e\u5165\u529b\u72b6\u614b\u306e\u76e3\u8996\u7d50\u679c\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u901a\u77e5\u304c\u6765\u308b\u3088\u3046\u306bcombineLatest\u3067\u307e\u3068\u3081\u3066\u76e3\u8996\u3092\u884c\u3044\u307e\u3059\n        Observable.combineLatest(emailObservable, passwordObservable,\n                new Func2<Boolean, Boolean, Boolean>() {\n                    @Override\n                    public Boolean call(Boolean email, Boolean password) {\n                        return email && password;\n                    }\n                })\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(RxView.enabled(signinButton));\n        \n        signinButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(LoginActivity.this, \"\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    /**\n     * EditText\u306a\u3069TextView\u306e\u5165\u529b\u306e\u72b6\u614b\u3092\u6b63\u898f\u8868\u73fe\u306ePattern\u3068\u6bd4\u8f03\u3057\u3066\u3001\u30d1\u30bf\u30fc\u30f3\u3092\u307f\u305f\u3044\u3057\u3066\u3044\u308b\u304bBoolean\u306eObservable\u3067\u7d50\u679c\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n     */\n    private Observable<Boolean> observePatternTextChange(TextView textView, final Pattern pattern) {\n        return RxTextView.textChanges(textView).map(new Func1<CharSequence, Boolean>() {\n            @Override\n            public Boolean call(CharSequence charSequence) {\n                return pattern.matcher(charSequence).find();\n            }\n        });\n    }\n\n}\n```\n\n\u91cd\u8981\u306a\u306e\u306f\u3001combineLatest\u30672\u3064\u306eEditText\u306e\u5165\u529b\u72b6\u614b\u3092\u307e\u3068\u3081\u3066\u76e3\u8996\u3059\u308b\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u3069\u3063\u3061\u306e\u5165\u529b\u72b6\u614b\u306b\u5909\u5316\u304c\u3042\u3063\u305f\u5834\u5408\u3067\u3082\u7247\u65b9\u306e\u76f4\u524d\u306e\u72b6\u614b\u3092\u5f15\u6570\u3068\u3057\u3066\u8fd4\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u3001\u5165\u529b\u72b6\u614b\u3092\u307e\u3068\u3081\u3066\u76e3\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001EditText\u306e\u76e3\u8996\u3084Button\u306eEnable\u3092\u5909\u66f4\u3059\u308b\u51e6\u7406\u306fUI\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u305f\u3081\u3001subscriveOn\u3068observeOn\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff01\n\n## Button\u306e\uff12\u91cd\u62bc\u3057\u9632\u6b62\n\u6b21\u306b\u3001Button\u3092\u62bc\u3057\u305f\u969b\u306bButton\u304c2\u56de\u62bc\u3055\u308c\u308b\u306e\u3092\u9632\u6b62\u3057\u305f\u308a\u3001\u8907\u6570\u306e\u30dc\u30bf\u30f3\u3092\u540c\u6642\u62bc\u3057\u3057\u305f\u969b\u306b\u3069\u3063\u3061\u306e\u51e6\u7406\u3082\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u7121\u3044\u3088\u3046\u306b\u5236\u9650\u3092\u8a2d\u3051\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    Button mLoginButton;\n    Button mListButton;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mLoginButton = (Button) findViewById(R.id.login_button);\n        mListButton = (Button) findViewById(R.id.list_button);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        // \u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3057\u307e\u3059. clicks\u306fVoid\u306eObservable\u3067\u8fd4\u3063\u3066\u304f\u308b\u305f\u3081doOnNext\u3067\u51e6\u7406\u3092\u4e88\u3081\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\n        Observable<Void> loginClickObservable = RxView.clicks(mLoginButton).doOnNext(getIntentAction(LoginActivity.class));\n        Observable<Void> listClickObservable = RxView.clicks(mListButton).doOnNext(getIntentAction(ListActivity.class));\n        // \u4e8c\u3064\u306e\u51e6\u7406\u306e\u5408\u8a08\u5b9f\u884c\u56de\u6570\u306b\u30ea\u30df\u30c3\u30c8\u3092\u304b\u3051\u308b\n        Observable.merge(loginClickObservable, listClickObservable)\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(AndroidSchedulers.mainThread())\n                .limit(1)\n                .subscribe();\n    }\n\n    private Action1<Void> getIntentAction(final Class<? extends Activity> clazz) {\n        return new Action1<Void>() {\n            @Override\n            public void call(Void aVoid) {\n                startActivity(new Intent(getApplicationContext(), clazz));\n            }\n        };\n    }\n\n}\n```\n\n\u4eca\u56de\u306f\u3001\u4f8b\u3068\u3057\u3066\u305f\u3060Intent\u3092\u884c\u3046\u3060\u3051\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306flimit\u3092\u8a2d\u3051\u305f\u305f\u3081\u3001\u4e00\u5ea6\u753b\u9762\u9077\u79fb\u3057\u305f\u5f8c\u306b\u518d\u5ea6Limit\u3092\u8a2d\u5b9a\u3057\u76f4\u3059\u305f\u3081\u306bonResume\u306e\u4e2d\u3067View\u306eBind\u3092\u884c\u3046\u306e\u304c\u809d\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u3061\u3089\u306f\u5c11\u3057\u4f7f\u3044\u52dd\u624b\u306e\u4f4e\u3044\u90e8\u5206\u306a\u306e\u3067\u3059\u304cRxView.clicks\u3067\u306fVoid\u306eObservable\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3082\u3057\u672c\u6765\u306e\u30ea\u30b9\u30ca\u30fc\u3068\u540c\u3058\u304fView\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306fmap\u3067View\u3092\u8fd4\u3057\u3066\u3042\u3052\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## ListView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\n\u6700\u5f8c\u306b\u3001ListView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u306b\u3088\u3063\u3066\u30da\u30fc\u30b8\u30f3\u30b0\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u4f8b\u3067\u3059\u3002\n\n```ListActivity.java\npublic class ListActivity extends AppCompatActivity {\n    private static final int LIMIT = 30;\n\n    private ArrayAdapter<String> mAdapter;\n    private boolean mIsRequest = false;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_list);\n        ListView listView = (ListView) findViewById(R.id.listview);\n        mAdapter = new ArrayAdapter<>(getApplicationContext(), R.layout.item_list);\n        listView.setAdapter(mAdapter);\n\n        RxAbsListView.scrollEvents(listView)\n                .subscribeOn(AndroidSchedulers.mainThread())\n                .observeOn(Schedulers.io())\n                // \u30b9\u30af\u30ed\u30fc\u30eb\u4f4d\u7f6e\u304c\u4e0b\u304b\u30893\u3064\u76ee\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u304b\u3092\u898b\u308b\n                .filter(getEndScrollFilter(3))\n                // \u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304c\u51e6\u7406\u3092\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\n                .filter(new Func1<AbsListViewScrollEvent, Boolean>() {\n                    @Override\n                    public Boolean call(AbsListViewScrollEvent scrollEvent) {\n                        return !mIsRequest;\n                    }\n                })\n                // \u30c7\u30fc\u30bf\u53d6\u5f97\u306eObservable\u306b\u51e6\u7406\u3092\u7e4b\u3052\u307e\u3059\n                .flatMap(new Func1<AbsListViewScrollEvent, Observable<List<String>>>() {\n                    @Override\n                    public Observable<List<String>> call(AbsListViewScrollEvent scrollEvent) {\n                        return getDataObservable(scrollEvent.totalItemCount(), LIMIT);\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe(new Action1<List<String>>() {\n                    @Override\n                    public void call(List<String> strings) {\n                        mIsRequest = false;\n                        mAdapter.addAll(strings);\n                    }\n                }, new Action1<Throwable>() {\n                    @Override\n                    public void call(Throwable throwable) {\n                        mIsRequest = false;\n                        Toast.makeText(getApplicationContext(), \"\u5931\u6557\u3057\u307e\u3057\u305f\", Toast.LENGTH_SHORT).show();\n                    }\n                });\n    }\n\n    private Func1<AbsListViewScrollEvent, Boolean> getEndScrollFilter(final int space) {\n        return new Func1<AbsListViewScrollEvent, Boolean>() {\n            @Override\n            public Boolean call(AbsListViewScrollEvent scrollEvent) {\n                return scrollEvent.firstVisibleItem() + scrollEvent.visibleItemCount() + space >= scrollEvent.totalItemCount();\n            }\n        };\n    }\n\n    private Observable<List<String>> getDataObservable(final int offset, final int limit) {\n        mIsRequest = true;\n        final List<String> data = new ArrayList<>();\n        for (int i = 0; i < limit; i++) {\n            data.add(String.valueOf(i + offset));\n        }\n        return Observable.just(data);\n    }\n\n}\n\n```\n\nListView\u306a\u3069\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a4\u30d9\u30f3\u30c8\u3092\u6271\u3046\u306b\u306f\u3001RxAbsListView.scrollEvents\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001ListView\u306e\u51e6\u7406\u3067\u6bce\u5ea6\u304a\u306a\u3058\u307f\u306evisibleItemCount\u306a\u3069\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306fRx\u306eFilter\u3092\u4f7f\u3046\u3053\u3068\u3067\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u306e\u306bflatMap\u3092\u4f7f\u3063\u3066\u305d\u306e\u307e\u307e\u51e6\u7406\u3092\u7e4b\u3052\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\uff01\n\n## \u6700\u5f8c\u306b\n\u3069\u3046\u3067\u3059\u304b\uff1fUI\u306e\u51e6\u7406\u3082Rx\u3067\u6271\u3046\u3068\u5909\u6570\u306e\u6570\u3092\u5727\u5012\u7684\u306b\u5c11\u306a\u304f\u3067\u304d\u308b\u306e\u3067\u30ad\u30ec\u30a4\u306a\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305c\u3072\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u305d\u3061\u3089\u3082\u5408\u308f\u305b\u3066\u307f\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n[GitHub RxBindingSample](https://github.com/Reyurnible/RxBindingSample)\n", "tags": ["Android", "RxJava", "\u30a2\u30d7\u30ea\u958b\u767a"]}