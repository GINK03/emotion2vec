{"context": "\n\nKriging\u5fdc\u7b54\u66f2\u9762\n\u7406\u8ad6\u7684\u306b\u306f\u3088\u304f\u7406\u89e3\u3057\u3066\u306f\u3044\u306a\u3044\u304c,\u6563\u3089\u3070\u308a\u306e\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u70b9\u304b\u3089\u66f2\u9762\u3092\u63a8\u5b9a\u3059\u308b\u624b\u6cd5\u3067\u3042\u308b.\nOpenMDAO\u3067\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u793a\u3057\u305f\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u76f8\u6027\u304c\u826f\u3044(\u6563\u3089\u3070\u308a\u306e\u3042\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0)\u305f\u3081,\u5de5\u5b66\u7684\u306b\u306fCAE\u3092\u5229\u7528\u3057\u3066\u5fdc\u7b54\u66f2\u9762\u3092\u63a8\u5b9a\u3059\u308b\u969b\u3057\u3070\u3057\u3070\u5229\u7528\u3055\u308c\u308b.\n\nOpenMDAO\u3067\u653e\u7269\u9762\u306eKriging\u5fdc\u7b54\u66f2\u9762\n\u53d6\u7d44\u307f\u306e\u6982\u7565\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3042\u308b\u3002\u307e\u305aOpenMDAO\u3067\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u5b9f\u9a13\u3057\u305f\u30c7\u30fc\u30bf\uff08doe_paraboloid\u30d5\u30a1\u30a4\u30eb\uff09\u3092\u8aad\u307f\u8fbc\u3080.\n\u6b21\u306b\u8aad\u307f\u8fbc\u3093\u3060\u5b9f\u9a13\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066Kriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u935b\u3048,\u4f5c\u6210\u3059\u308b.\n\u6700\u5f8c\u306b,\u4f5c\u6210\u3057\u305fKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5185\u633f\u5024\u3092\u7406\u8ad6\u89e3(\u30ef\u30a4\u30e4\u30fc\u30d5\u30ec\u30fc\u30e0)\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067,\u30e2\u30c7\u30eb\u306e\u59a5\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b.\u5c1a,\u6b21\u5f0f\u304c\u7406\u8ad6\u89e3\u3067\u3042\u308b.\nsubjecttof(x,y)=(x\u22123)2+xy+(y+4)2\u22123\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0f(x,y)=(x\u22123)2+xy+(y+4)2\u22123subjectto\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0{\\begin{align}\n& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0\n\\end{align}\n}\n\n\nGroup\u306e\u6e96\u5099\n\u4e0b\u8a18\u306etraining_mm.py\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3059\u308b\n\ntraining_mm.py\nfrom __future__ import print_function\nfrom openmdao.api import Group,  MetaModel,  FloatKrigingSurrogate\n\nclass TrainingMM(Group):\n    ''' FloatKriging gives responses as floats '''\n\n    def __init__(self):\n        super(TrainingMM, self).__init__()\n\n        # Create meta_model for f_x as the response\n        mm = self.add(\"parabo_mm\", MetaModel())\n        mm.add_param('x', val=0.)\n        mm.add_param('y', val=0.)\n        mm.add_output('f_xy', val=0., surrogate=FloatKrigingSurrogate())\n\n\nMetaModel\u3068\u3044\u3046\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u5024\u306e\u8a55\u4fa1\u3092\u884c\u3046Component\u3092\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b.\nf_xy\u3092\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u306bFloatKrigingSurrogate \u3068\u3044\u3046SurrogateModel\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b.\nFloatKrigingSurrogate\u5358\u4f53\u3067\u3082\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u5024\u306e\u8a55\u4fa1\u3092\u884c\u3046\u6a5f\u80fd\u3092\u6709\u3057\u3066\u3044\u308b\u304c,\nMetaModel\u3092\u7528\u3044\u308c\u3070\u8907\u6570\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u540c\u6642\u306b\u8a13\u7df4\u3067\u304d\u308b\u3068\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b.\n\n\nProblem(\u554f\u984c\uff09\u306e\u8a2d\u5b9a\n\u4e0b\u8a18kriging_paraboloid.py\u3092\u6e96\u5099\u3059\u308b.\u524d\u534a\u306f\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff5eKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u307e\u3067\u306e\u51e6\u7406\u3067\u3042\u308b.\n\nkriging_paraboloid.py\n#! /bin/python\nimport pickle\nimport numpy as np\nimport sqlitedict\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom openmdao.api import Problem\nfrom training_mm import TrainingMM\n\ndb =sqlitedict.SqliteDict(\"doe_paraboloid\",\"iterations\")\nres = np.array([[0.,0.,0.]] * len(db.items()))\nfor i, v in enumerate(db.items()):\n    res[i,0] = v[1][\"Unknowns\"][\"x\"]\n    res[i,1] = v[1][\"Unknowns\"][\"y\"]\n    res[i,2] = v[1][\"Unknowns\"][\"f_xy\"]\n\nprob = Problem()\nprob.root = TrainingMM()\nprob.setup()\nprob[\"parabo_mm.train:x\"] = res[:,0]\nprob[\"parabo_mm.train:y\"] = res[:,1]\nprob[\"parabo_mm.train:f_xy\"] = res[:,2]\nprob.run()\n\n\n\n\u5f8c\u534a\u90e8\u3092\u4e0b\u8a18\u306b\u793a\u3059\u3002\u4f5c\u6210\u3057\u305fkriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3068\u7406\u8ad6\u89e3\u306e\u6bd4\u8f03\u3092\u30d7\u30ed\u30c3\u30c8\u306b\u3066\u884c\u3063\u3066\u3044\u308b\n\nkriging_paraboloid.py\u7d9a\u304d\nx = np.arange(-50., 50., 4.)\ny = np.arange(-50., 50., 4.)\n\nsg = prob.root.parabo_mm._init_unknowns_dict[\"f_xy\"][\"surrogate\"]\nf = open(\"./kriging_parabo\",\"w\")\npickle.dump(sg, f)\nf.close()\nf = open(\"./kriging_parabo_mm\",\"w\")\npickle.dump(prob.root.parabo_mm, f)\nf.close()\n\n\nxyzkrig = np.array([[xi,yi,sg.predict(np.array([xi,yi]))[0]] \\\n        for xi in x for yi in y])\n#xyzkrig = np.array([[0.,0.,0.]]*(25*25))\n#cnt = 0\n#for xi in x:\n#    for yi in y:\n#        xyzkrig[cnt,0] = prob[\"parabo_mm.x\"] = xi\n#        xyzkrig[cnt,1] = prob[\"parabo_mm.y\"] = yi\n#        prob.run()\n#        xyzkrig[cnt,2] = prob[\"parabo_mm.f_xy\"]\n#        cnt += 1\n\nfig = plt.figure(figsize=(6,4)); ax = Axes3D(fig)\nX, Y = np.meshgrid(x, y)\nZ = (X-3.0)**2. + X*Y + (Y+4.0)**2. - 3.0\nax.plot_wireframe(X,Y,Z,label=\"theoretical surface\")\nax.scatter3D(xyzkrig[:,0], xyzkrig[:,1], xyzkrig[:,2], c=\"r\", marker=\"o\",label=\"Interpolated value\")\nax.set_xlabel('x'); ax.set_ylabel('y'); ax.set_zlabel('f_xy')\nplt.legend()\nplt.show()\n\n\n\nkriging_paraboloid.py\u306e\u524d\u534a\u90e8\u306f\u89e3\u8aac\u306f\u7701\u7565\u3057\u5f8c\u534a\u90e8\u306e\u307f\u89e3\u8aac\u3059\u308b.\n\u307e\u305a\u5192\u982d\u3067\u306fKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u70b9\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b.\n\u3053\u308c\u306fLHS(\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0)\u3057\u305f\u70b9\u3068\u306f\u5225\u306e\u70b9\u3067\u3042\u308a, \n\u221250\u2264x,y\u226450\u221250\u2264x,y\u226450-50 \\leq x,y \\leq 50\u306e\u7bc4\u56f2\u309225\u5206\u5272\u3057\u305f25x25\u306e\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u3066\u8a55\u4fa1\u3057\u3066\u3044\u308b. \nsg = prob.root.parabo_mm._init_unknowns_dict[\"f_xy\"][\"surrogate\"]\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30af\u30e9\u30b9\u5909\u6570(_init_unknowns_dict)\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066,MeataModel\u306b\u8a2d\u7f6e\u3055\u308c\u3066\u3044\u308bsurrogate\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u308b.\n\u8912\u3081\u3089\u308c\u305f\u51e6\u7f6e\u3067\u306f\u306a\u3044\u304c\u3053\u308c\u306b\u306f\uff12\u70b9\u7406\u7531\u304c\u3042\u308b.\n* \u935b\u3048\u305f\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044.\u4eca\u56de\u306fpickele\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f.\n* MetaModel\u3067\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u5024\u3092\u8a55\u4fa1\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5c11\u3057\u7169\u96d1\u306b\u306a\u308b(#xyzkrig = \u30fb\u30fb\u30fb\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u884c\uff09.\n\u6b8b\u308a\u306f\u30d7\u30ed\u30c3\u30c8\u51e6\u7406\u3067\u3042\u308b.\n\u7406\u8ad6\u89e3\u3092\u30ef\u30a4\u30e4\u30fc\u30d5\u30ec\u30fc\u30e0\u306bKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u8a55\u4fa1\u5024\u3092\u30c9\u30c3\u30c8\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u308b.\n\nKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5024\u306e\u5185\u633f\nLHS\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u591a\u3059\u304e\u305f\u3053\u3068\u3082\u3042\u308a,\u304b\u306a\u308a\u7cbe\u5ea6\u306f\u3088\u3055\u305d\u3046.\n\n\n# Kriging\u5fdc\u7b54\u66f2\u9762\n\u7406\u8ad6\u7684\u306b\u306f\u3088\u304f\u7406\u89e3\u3057\u3066\u306f\u3044\u306a\u3044\u304c,\u6563\u3089\u3070\u308a\u306e\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u70b9\u304b\u3089\u66f2\u9762\u3092\u63a8\u5b9a\u3059\u308b\u624b\u6cd5\u3067\u3042\u308b.\n[OpenMDAO\u3067\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0](http://qiita.com/TatsuyaKatayama/items/7bcf863bad444c6ad901)\u306b\u793a\u3057\u305f\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u76f8\u6027\u304c\u826f\u3044(\u6563\u3089\u3070\u308a\u306e\u3042\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0)\u305f\u3081,\u5de5\u5b66\u7684\u306b\u306fCAE\u3092\u5229\u7528\u3057\u3066\u5fdc\u7b54\u66f2\u9762\u3092\u63a8\u5b9a\u3059\u308b\u969b\u3057\u3070\u3057\u3070\u5229\u7528\u3055\u308c\u308b.\n\n# OpenMDAO\u3067\u653e\u7269\u9762\u306eKriging\u5fdc\u7b54\u66f2\u9762\n\u53d6\u7d44\u307f\u306e\u6982\u7565\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3042\u308b\u3002\u307e\u305a[OpenMDAO\u3067\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0](http://qiita.com/TatsuyaKatayama/items/7bcf863bad444c6ad901)\u3067\u5b9f\u9a13\u3057\u305f\u30c7\u30fc\u30bf\uff08doe_paraboloid\u30d5\u30a1\u30a4\u30eb\uff09\u3092\u8aad\u307f\u8fbc\u3080.\n\u6b21\u306b\u8aad\u307f\u8fbc\u3093\u3060\u5b9f\u9a13\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066Kriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u935b\u3048,\u4f5c\u6210\u3059\u308b.\n\u6700\u5f8c\u306b,\u4f5c\u6210\u3057\u305fKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5185\u633f\u5024\u3092\u7406\u8ad6\u89e3(\u30ef\u30a4\u30e4\u30fc\u30d5\u30ec\u30fc\u30e0)\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3053\u3068\u3067,\u30e2\u30c7\u30eb\u306e\u59a5\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b.\u5c1a,\u6b21\u5f0f\u304c\u7406\u8ad6\u89e3\u3067\u3042\u308b.\n\n```math\n\\begin{align}\n& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0\n\\end{align}\n```\n---\n#Group\u306e\u6e96\u5099\n\u4e0b\u8a18\u306etraining_mm.py\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3059\u308b\n\n```py:training_mm.py\nfrom __future__ import print_function\nfrom openmdao.api import Group,  MetaModel,  FloatKrigingSurrogate\n\nclass TrainingMM(Group):\n    ''' FloatKriging gives responses as floats '''\n\n    def __init__(self):\n        super(TrainingMM, self).__init__()\n\n        # Create meta_model for f_x as the response\n        mm = self.add(\"parabo_mm\", MetaModel())\n        mm.add_param('x', val=0.)\n        mm.add_param('y', val=0.)\n        mm.add_output('f_xy', val=0., surrogate=FloatKrigingSurrogate())\n```\n\nMetaModel\u3068\u3044\u3046\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u5024\u306e\u8a55\u4fa1\u3092\u884c\u3046Component\u3092\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b.\nf_xy\u3092\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u306bFloatKrigingSurrogate \u3068\u3044\u3046SurrogateModel\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b.\nFloatKrigingSurrogate\u5358\u4f53\u3067\u3082\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u5024\u306e\u8a55\u4fa1\u3092\u884c\u3046\u6a5f\u80fd\u3092\u6709\u3057\u3066\u3044\u308b\u304c,\nMetaModel\u3092\u7528\u3044\u308c\u3070\u8907\u6570\u306e\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u540c\u6642\u306b\u8a13\u7df4\u3067\u304d\u308b\u3068\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b.\n\n---\n#Problem(\u554f\u984c\uff09\u306e\u8a2d\u5b9a\n\n\u4e0b\u8a18kriging_paraboloid.py\u3092\u6e96\u5099\u3059\u308b.\u524d\u534a\u306f\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\uff5eKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u307e\u3067\u306e\u51e6\u7406\u3067\u3042\u308b.\n\n```py:kriging_paraboloid.py\n#! /bin/python\nimport pickle\nimport numpy as np\nimport sqlitedict\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom openmdao.api import Problem\nfrom training_mm import TrainingMM\n\ndb =sqlitedict.SqliteDict(\"doe_paraboloid\",\"iterations\")\nres = np.array([[0.,0.,0.]] * len(db.items()))\nfor i, v in enumerate(db.items()):\n    res[i,0] = v[1][\"Unknowns\"][\"x\"]\n    res[i,1] = v[1][\"Unknowns\"][\"y\"]\n    res[i,2] = v[1][\"Unknowns\"][\"f_xy\"]\n\nprob = Problem()\nprob.root = TrainingMM()\nprob.setup()\nprob[\"parabo_mm.train:x\"] = res[:,0]\nprob[\"parabo_mm.train:y\"] = res[:,1]\nprob[\"parabo_mm.train:f_xy\"] = res[:,2]\nprob.run()\n```\n\n---\n\u5f8c\u534a\u90e8\u3092\u4e0b\u8a18\u306b\u793a\u3059\u3002\u4f5c\u6210\u3057\u305fkriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3068\u7406\u8ad6\u89e3\u306e\u6bd4\u8f03\u3092\u30d7\u30ed\u30c3\u30c8\u306b\u3066\u884c\u3063\u3066\u3044\u308b\n\n```py:kriging_paraboloid.py\u7d9a\u304d\nx = np.arange(-50., 50., 4.)\ny = np.arange(-50., 50., 4.)\n\nsg = prob.root.parabo_mm._init_unknowns_dict[\"f_xy\"][\"surrogate\"]\nf = open(\"./kriging_parabo\",\"w\")\npickle.dump(sg, f)\nf.close()\nf = open(\"./kriging_parabo_mm\",\"w\")\npickle.dump(prob.root.parabo_mm, f)\nf.close()\n\n\nxyzkrig = np.array([[xi,yi,sg.predict(np.array([xi,yi]))[0]] \\\n        for xi in x for yi in y])\n#xyzkrig = np.array([[0.,0.,0.]]*(25*25))\n#cnt = 0\n#for xi in x:\n#    for yi in y:\n#        xyzkrig[cnt,0] = prob[\"parabo_mm.x\"] = xi\n#        xyzkrig[cnt,1] = prob[\"parabo_mm.y\"] = yi\n#        prob.run()\n#        xyzkrig[cnt,2] = prob[\"parabo_mm.f_xy\"]\n#        cnt += 1\n\nfig = plt.figure(figsize=(6,4)); ax = Axes3D(fig)\nX, Y = np.meshgrid(x, y)\nZ = (X-3.0)**2. + X*Y + (Y+4.0)**2. - 3.0\nax.plot_wireframe(X,Y,Z,label=\"theoretical surface\")\nax.scatter3D(xyzkrig[:,0], xyzkrig[:,1], xyzkrig[:,2], c=\"r\", marker=\"o\",label=\"Interpolated value\")\nax.set_xlabel('x'); ax.set_ylabel('y'); ax.set_zlabel('f_xy')\nplt.legend()\nplt.show()\n```\n\n---\nkriging_paraboloid.py\u306e\u524d\u534a\u90e8\u306f\u89e3\u8aac\u306f\u7701\u7565\u3057\u5f8c\u534a\u90e8\u306e\u307f\u89e3\u8aac\u3059\u308b.\n\u307e\u305a\u5192\u982d\u3067\u306fKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u70b9\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b.\n\u3053\u308c\u306fLHS(\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0)\u3057\u305f\u70b9\u3068\u306f\u5225\u306e\u70b9\u3067\u3042\u308a, \n$-50 \\leq x,y \\leq 50$\u306e\u7bc4\u56f2\u309225\u5206\u5272\u3057\u305f25x25\u306e\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u3066\u8a55\u4fa1\u3057\u3066\u3044\u308b. \n\n```sg = prob.root.parabo_mm._init_unknowns_dict[\"f_xy\"][\"surrogate\"]```\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30af\u30e9\u30b9\u5909\u6570(_init_unknowns_dict)\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066,MeataModel\u306b\u8a2d\u7f6e\u3055\u308c\u3066\u3044\u308bsurrogate\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u308b.\n\u8912\u3081\u3089\u308c\u305f\u51e6\u7f6e\u3067\u306f\u306a\u3044\u304c\u3053\u308c\u306b\u306f\uff12\u70b9\u7406\u7531\u304c\u3042\u308b.\n* \u935b\u3048\u305f\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044.\u4eca\u56de\u306fpickele\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f.\n* MetaModel\u3067\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306e\u5024\u3092\u8a55\u4fa1\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5c11\u3057\u7169\u96d1\u306b\u306a\u308b(```#xyzkrig = \u30fb\u30fb\u30fb```\u4ee5\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u884c\uff09.\n\n\u6b8b\u308a\u306f\u30d7\u30ed\u30c3\u30c8\u51e6\u7406\u3067\u3042\u308b.\n\u7406\u8ad6\u89e3\u3092\u30ef\u30a4\u30e4\u30fc\u30d5\u30ec\u30fc\u30e0\u306bKriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u8a55\u4fa1\u5024\u3092\u30c9\u30c3\u30c8\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u308b.\n\n# Kriging\u8fd1\u4f3c\u30e2\u30c7\u30eb\u306b\u3088\u308b\u5024\u306e\u5185\u633f\nLHS\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u591a\u3059\u304e\u305f\u3053\u3068\u3082\u3042\u308a,\u304b\u306a\u308a\u7cbe\u5ea6\u306f\u3088\u3055\u305d\u3046.\n\n---\n \n![kriging_paraboloid.png](https://qiita-image-store.s3.amazonaws.com/0/132571/1b5d822a-3e4f-a97d-7799-e8c7e69242a9.png)\n\n", "tags": ["Python", "OpenMDAO", "\u6700\u9069\u5316", "\u95a2\u6570\u8fd1\u4f3c"]}