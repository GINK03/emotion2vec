{"context": "LINE BOT AWARDS\u306e\u53d7\u4ed8\u306f\u7d42\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7c21\u5358\u306bLINE BOT\u3092\u4f5c\u6210\u3059\u308b\u96db\u5f62\u3092\u4f5c\u308a\u3001\u6050\u308c\u591a\u304f\u3082 linebot-serverless-blueprint-java \u3068\u540d\u4ed8\u3051\u307e\u3057\u305f\u3002\n\u3069\u3046\u3084\u3063\u3066\u4f5c\u3063\u305f\u304b\u306f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001\u4f7f\u3044\u65b9\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u69cb\u7bc9\u30a4\u30e1\u30fc\u30b8\n\n\u4ee5\u4e0b\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3068\u3044\u3046\u304b\u3001\u305d\u306e\u307e\u307e\u3067\u3059\u3002\n\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u5b89\u5fc3\u306aLINE BOT\u30b5\u30fc\u30d0\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\nLINE Bot \u3092 AWS\u3092\u4f7f\u3063\u3066\u30b7\u30b9\u30c6\u30e0\u69cb\u7bc9\u3057\u3066\u307f\u305f\u3002\n\n\u74b0\u5883\n\nWindows 10\nNode: v6.9.1\nnpm: 3.10.8\nGit for Windows: 2.9.3.windows.2\nJava 8\nAWS\u30a2\u30ab\u30a6\u30f3\u30c8\uff08AdministratorAccess\u6a29\u9650\uff09\n\u203broot\u30a2\u30ab\u30a6\u30f3\u30c8\u306f\u3084\u3081\u307e\u3057\u3087\u3046\n\n\nLINE BOT\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\nhttps://business.line.me/ja/services/bot\n\n\u300cDeveloper Trial\u3092\u59cb\u3081\u308b\u300d\u304b\u3089\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u767b\u9332\u3057\u305f\u5f8c\u3067\u3001\u8a2d\u5b9a\u3092\u3044\u304f\u3064\u304b\u5909\u66f4\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\u5fd8\u308c\u307e\u3057\u305f\u3002\u3002\n\n\u30bd\u30fc\u30b9\u306e\u53d6\u5f97\u304b\u3089serverless\u306e\u8a2d\u5b9a\u307e\u3067\n\n\u30bd\u30fc\u30b9\u306e\u53d6\u5f97\ngit clone https://github.com/moritalous/linebot-serverless-blueprint-java.git\n\n\nserverless\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncd linebot-serverless-blueprint-java\nnpm install\n\n\u3053\u308c\u3067 serverless \u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u306f\u306a\u3044\u306e\u3067\u3001node_modules\\.bin\\serverless \u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nserverless\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\nAdministratorAccess\u6a29\u9650\u3092\u6301\u3063\u305fAWS\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nnode_modules\\.bin\\serverless config credentials --provider aws --key [AWS Access key ID] --secret [AWS Secret access key] -n serverless\n\n-n \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3067\u3059\u3002\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f default \u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\nhttps://serverless.com/framework/docs/providers/aws/cli-reference/config-credentials/\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092serverless\u304b\u3089\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001serverless.yml\u306eprofile\u306e\u90e8\u5206\u3092\u5909\u66f4\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nserverless.yml\nprovider:\n  name: aws\n  runtime: java8\n  profile: serverless\n\n\n\n\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a\nLINE BOT\u306eChannel Secret\u3068Channel Access Token\u306f\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30ad\u30fc\u3067\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nCHANNEL_SECRET\nCHANNEL_ACCESS_TOKEN\n\n\n\u30c7\u30d7\u30ed\u30a4\u304b\u3089\u52d5\u4f5c\u78ba\u8a8d\n\n\u30c7\u30d7\u30ed\u30a4\nnpm run deploy\n\n\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u5168\u3066\u4e00\u767a\u3067\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\n\nAPI Gateway\nLambda x2\nDynamoDB\n\nAWS\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001AdministratorAccess\u6a29\u9650\u3092\u6301\u3063\u305fAWS\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u308b\u3068\u3053\u3060\u3051\u3067\u3059\u3002\n\nWebhook URL\u306e\u6307\u5b9a\n\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u969b\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u308bendpoints\u306eURL\u3092LINE\u306eWebhook\u8a2d\u5b9a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\u52d5\u4f5c\u78ba\u8a8d\ngit\u306e\u30bd\u30fc\u30b9\u306e\u72b6\u614b\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\n\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\nreply \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304cDynamoDB\u304b\u3089\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u51e6\u7406\u90e8\u5206\u3067\u3059\u3002Handler\u30af\u30e9\u30b9\u306ereply\u30e1\u30bd\u30c3\u30c9\u3092\u8d77\u70b9\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u4e0b\u3055\u3044\u3002CallbackRequest\u30af\u30e9\u30b9\u306f\u516c\u5f0f\u306eSDK(Java SDK for Messaging API BOT)\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\u7c21\u5358\u3067\u3057\u3087\u3002\n\u3061\u306a\u307f\u306b\u30aa\u30a6\u30e0\u8fd4\u3057\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nHandler.java\n    /***\n     * Messaging API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001Reply message\u306e\u9001\u4fe1\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002\n     * @param callbackRequest Messaging API\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u5bb9\n     */\n    private void reply(CallbackRequest callbackRequest) {\n        callbackRequest.getEvents().forEach(e -> {\n\n            if (e instanceof MessageEvent) {\n                MessageEvent<MessageContent> messageEvent = (MessageEvent<MessageContent>) e;\n                String replyToken = messageEvent.getReplyToken();\n                MessageContent content = messageEvent.getMessage();\n\n                if (content instanceof TextMessageContent) {\n                    String message = ((TextMessageContent) content).getText();\n\n                    LineMessagingService client = LineMessagingServiceBuilder.create(CHANNEL_ACCESS_TOKEN).build();\n\n                    List<Message> replyMessages = new ArrayList<>();\n                    replyMessages.add(new TextMessage(message));\n\n                    try {\n                        Response<BotApiResponse> response = client.replyMessage(new ReplyMessage(replyToken, replyMessages)).execute();\n                        if (response.isSuccessful()) {\n                            LOG.info(response.message());\n                        } else {\n                            LOG.warn(response.errorBody().string());\n                        }\n                    } catch (IOException e1) {\n                        LOG.error(e1);\n                    }\n                }\n                if (content instanceof ImageMessageContent) {\n                }\n                if (content instanceof LocationMessageContent) {\n                }\n                if (content instanceof AudioMessageContent) {\n                }\n                if (content instanceof VideoMessageContent) {\n                }\n                if (content instanceof StickerMessageContent) {\n                }\n                if (content instanceof FileMessageContent) {\n                } else {\n                }\n            } else if (e instanceof UnfollowEvent) {\n            } else if (e instanceof FollowEvent) {\n            } else if (e instanceof JoinEvent) {\n            } else if (e instanceof LeaveEvent) {\n            } else if (e instanceof PostbackEvent) {\n            } else if (e instanceof BeaconEvent) {\n            } else {\n            }\n        });\n    }\n\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://github.com/moritalous/linebot-serverless-blueprint-java\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nhttp://qiita.com/yoichiro6642/items/6d4c7309210af20a5c8f\nhttp://qiita.com/hiyuzawa/items/10e7bf2f6ad5d1c7fc9c\nhttp://qiita.com/abtc/items/d1aa34ee7684d0c47d07\n\n[LINE BOT AWARDS](https://botawards.line.me/ja/)\u306e\u53d7\u4ed8\u306f\u7d42\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7c21\u5358\u306bLINE BOT\u3092\u4f5c\u6210\u3059\u308b\u96db\u5f62\u3092\u4f5c\u308a\u3001\u6050\u308c\u591a\u304f\u3082 *linebot-serverless-blueprint-java* \u3068\u540d\u4ed8\u3051\u307e\u3057\u305f\u3002\n\u3069\u3046\u3084\u3063\u3066\u4f5c\u3063\u305f\u304b\u306f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001\u4f7f\u3044\u65b9\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n# \u69cb\u7bc9\u30a4\u30e1\u30fc\u30b8\n\n![LINE BOT.png](https://qiita-image-store.s3.amazonaws.com/0/41574/165ef29f-ed19-2773-f473-81ee406d7728.png)\n\n\u4ee5\u4e0b\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3068\u3044\u3046\u304b\u3001\u305d\u306e\u307e\u307e\u3067\u3059\u3002\n[\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u5b89\u5fc3\u306aLINE BOT\u30b5\u30fc\u30d0\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3](http://qiita.com/yoichiro6642/items/6d4c7309210af20a5c8f)\n[LINE Bot \u3092 AWS\u3092\u4f7f\u3063\u3066\u30b7\u30b9\u30c6\u30e0\u69cb\u7bc9\u3057\u3066\u307f\u305f\u3002](http://qiita.com/hiyuzawa/items/10e7bf2f6ad5d1c7fc9c)\n\n# \u74b0\u5883\n\n* Windows 10\n* Node: v6.9.1\n* npm: 3.10.8\n* Git for Windows: 2.9.3.windows.2\n* Java 8\n\n* AWS\u30a2\u30ab\u30a6\u30f3\u30c8\uff08AdministratorAccess\u6a29\u9650\uff09  \n  \u203broot\u30a2\u30ab\u30a6\u30f3\u30c8\u306f\u3084\u3081\u307e\u3057\u3087\u3046\n\n# LINE BOT\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\n\nhttps://business.line.me/ja/services/bot\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/41574/06cc656c-faf9-44cf-2faf-c29a7fe46c45.png)\n\n\u300cDeveloper Trial\u3092\u59cb\u3081\u308b\u300d\u304b\u3089\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u767b\u9332\u3057\u305f\u5f8c\u3067\u3001\u8a2d\u5b9a\u3092\u3044\u304f\u3064\u304b\u5909\u66f4\u3057\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\u5fd8\u308c\u307e\u3057\u305f\u3002\u3002\n\n# \u30bd\u30fc\u30b9\u306e\u53d6\u5f97\u304b\u3089serverless\u306e\u8a2d\u5b9a\u307e\u3067\n\n## \u30bd\u30fc\u30b9\u306e\u53d6\u5f97\n\n```bat\ngit clone https://github.com/moritalous/linebot-serverless-blueprint-java.git\n```\n\n## serverless\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bat\ncd linebot-serverless-blueprint-java\nnpm install\n```\n\n\u3053\u308c\u3067 ```serverless``` \u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u306f\u306a\u3044\u306e\u3067\u3001```node_modules\\.bin\\serverless``` \u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## serverless\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u8a2d\u5b9a\n\nAdministratorAccess\u6a29\u9650\u3092\u6301\u3063\u305fAWS\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```bat\nnode_modules\\.bin\\serverless config credentials --provider aws --key [AWS Access key ID] --secret [AWS Secret access key] -n serverless\n```\n\n```-n``` \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4f5c\u6210\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3067\u3059\u3002\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f ```default``` \u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\nhttps://serverless.com/framework/docs/providers/aws/cli-reference/config-credentials/\n\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092```serverless```\u304b\u3089\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u3001```serverless.yml```\u306eprofile\u306e\u90e8\u5206\u3092\u5909\u66f4\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```yaml:serverless.yml\nprovider:\n  name: aws\n  runtime: java8\n  profile: serverless\n```\n\n## \u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a\n\nLINE BOT\u306e```Channel Secret```\u3068```Channel Access Token```\u306f\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30ad\u30fc\u3067\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n* CHANNEL_SECRET\n* CHANNEL_ACCESS_TOKEN\n\n\n# \u30c7\u30d7\u30ed\u30a4\u304b\u3089\u52d5\u4f5c\u78ba\u8a8d\n\n# \u30c7\u30d7\u30ed\u30a4\n\n```bat\nnpm run deploy\n```\n\n\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u5168\u3066\u4e00\u767a\u3067\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\n\n* API Gateway\n* Lambda x2\n* DynamoDB\n\nAWS\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001AdministratorAccess\u6a29\u9650\u3092\u6301\u3063\u305fAWS\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u308b\u3068\u3053\u3060\u3051\u3067\u3059\u3002\n\n# Webhook URL\u306e\u6307\u5b9a\n\n\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u969b\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u308b```endpoints```\u306eURL\u3092LINE\u306eWebhook\u8a2d\u5b9a\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/41574/8137cc66-9e01-8edd-dc75-fffa3d549d5c.png)\n\n# \u52d5\u4f5c\u78ba\u8a8d\n\ngit\u306e\u30bd\u30fc\u30b9\u306e\u72b6\u614b\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n![Screenshot_20170308-014317.png](https://qiita-image-store.s3.amazonaws.com/0/41574/8a24e808-10e3-7c1f-b926-db2a0e4bb04b.png)\n\n# \u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\n\n```reply``` \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304cDynamoDB\u304b\u3089\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u51e6\u7406\u90e8\u5206\u3067\u3059\u3002Handler\u30af\u30e9\u30b9\u306ereply\u30e1\u30bd\u30c3\u30c9\u3092\u8d77\u70b9\u3068\u3057\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u4e0b\u3055\u3044\u3002CallbackRequest\u30af\u30e9\u30b9\u306f\u516c\u5f0f\u306eSDK([Java SDK for Messaging API BOT](https://github.com/line/line-bot-sdk-java))\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\u7c21\u5358\u3067\u3057\u3087\u3002\n\n\u3061\u306a\u307f\u306b\u30aa\u30a6\u30e0\u8fd4\u3057\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\n```java:Handler.java\n    /***\n     * Messaging API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u3066\u3001Reply message\u306e\u9001\u4fe1\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002\n     * @param callbackRequest Messaging API\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u5bb9\n     */\n    private void reply(CallbackRequest callbackRequest) {\n        callbackRequest.getEvents().forEach(e -> {\n\n            if (e instanceof MessageEvent) {\n                MessageEvent<MessageContent> messageEvent = (MessageEvent<MessageContent>) e;\n                String replyToken = messageEvent.getReplyToken();\n                MessageContent content = messageEvent.getMessage();\n\n                if (content instanceof TextMessageContent) {\n                    String message = ((TextMessageContent) content).getText();\n\n                    LineMessagingService client = LineMessagingServiceBuilder.create(CHANNEL_ACCESS_TOKEN).build();\n\n                    List<Message> replyMessages = new ArrayList<>();\n                    replyMessages.add(new TextMessage(message));\n\n                    try {\n                        Response<BotApiResponse> response = client.replyMessage(new ReplyMessage(replyToken, replyMessages)).execute();\n                        if (response.isSuccessful()) {\n                            LOG.info(response.message());\n                        } else {\n                            LOG.warn(response.errorBody().string());\n                        }\n                    } catch (IOException e1) {\n                        LOG.error(e1);\n                    }\n                }\n                if (content instanceof ImageMessageContent) {\n                }\n                if (content instanceof LocationMessageContent) {\n                }\n                if (content instanceof AudioMessageContent) {\n                }\n                if (content instanceof VideoMessageContent) {\n                }\n                if (content instanceof StickerMessageContent) {\n                }\n                if (content instanceof FileMessageContent) {\n                } else {\n                }\n            } else if (e instanceof UnfollowEvent) {\n            } else if (e instanceof FollowEvent) {\n            } else if (e instanceof JoinEvent) {\n            } else if (e instanceof LeaveEvent) {\n            } else if (e instanceof PostbackEvent) {\n            } else if (e instanceof BeaconEvent) {\n            } else {\n            }\n        });\n    }\n```\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://github.com/moritalous/linebot-serverless-blueprint-java\n\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\nhttp://qiita.com/yoichiro6642/items/6d4c7309210af20a5c8f\nhttp://qiita.com/hiyuzawa/items/10e7bf2f6ad5d1c7fc9c\nhttp://qiita.com/abtc/items/d1aa34ee7684d0c47d07\n\n\n", "tags": ["linebot", "AWS", "serverless", "gradle"]}