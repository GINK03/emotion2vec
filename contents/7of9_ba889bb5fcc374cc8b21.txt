{"context": "\n\u52d5\u4f5c\u74b0\u5883\u3000\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\n\u4ee5\u4e0b\u306eOS\u306edual boot\n---\nWindows 8.1 pro (64bit)\n---\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\n\n\nhttps://github.com/tensorflow/tensorflow/tree/r0.11/tensorflow/examples/tutorials/mnist\n\u3092\u8a66\u305d\u3046\u3068\u3057\u305f\u3002\u3000\n\ngit clone\u3067\u307e\u308b\u3054\u3068\u53d6\u5f97\nmnist\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\n\n$ python fully_connected_feed.py \nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\nTraceback (most recent call last):\n  File \"fully_connected_feed.py\", line 277, in <module>\n    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\nTypeError: run() got an unexpected keyword argument 'argv'\n\n\u4f55\u6545\u304b\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u3002\n\u4e00\u65b9\u3067\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u52d5\u304f\u3002\nhttp://blog.brainpad.co.jp/entry/2016/02/25/153000\n( \u3053\u3061\u3089\u306e\u4fee\u6b63\u3092\u9069\u7528 http://qiita.com/7of9/items/eeef2afe9aeef7030db1 )\n\nTensorFlow v0.8\u3068git clone\u306emnist\u30b3\u30fc\u30c9\u306e\u9055\u3044\n\nv0.8\nhttps://github.com/tensorflow/tensorflow/blob/r0.8/tensorflow/examples/tutorials/mnist/fully_connected_feed.py\nmain()\u95a2\u6570\u4ee5\u964d\u3060\u3051\u3002\n\nfully_connected_feed.py\ndef main(_):\n    run_training()\nif __name__ == '__main__':\n    tf.app.run()\n\n\n\ngit clone\u3057\u305f\u3082\u306e\nmain\u95a2\u6570\u4ee5\u964d\u3060\u3051\u3002\n\nfully_connected_feed.py\ndef main(_):\n  if tf.gfile.Exists(FLAGS.log_dir):\n    tf.gfile.DeleteRecursively(FLAGS.log_dir)\n  tf.gfile.MakeDirs(FLAGS.log_dir)\n  run_training()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--learning_rate',\n      type=float,\n      default=0.01,\n      help='Initial learning rate.'\n  )\n  parser.add_argument(\n      '--max_steps',\n      type=int,\n      default=2000,\n      help='Number of steps to run trainer.'\n  )\n  parser.add_argument(\n      '--hidden1',\n      type=int,\n      default=128,\n      help='Number of units in hidden layer 1.'\n  )\n  parser.add_argument(\n      '--hidden2',\n      type=int,\n      default=32,\n      help='Number of units in hidden layer 2.'\n  )\n  parser.add_argument(\n      '--batch_size',\n      type=int,\n      default=100,\n      help='Batch size.  Must divide evenly into the dataset sizes.'\n  )\n  parser.add_argument(\n      '--input_data_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/input_data',\n      help='Directory to put the input data.'\n  )\n  parser.add_argument(\n      '--log_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/logs/fully_connected_feed',\n      help='Directory to put the log data.'\n  )\n  parser.add_argument(\n      '--fake_data',\n      default=False,\n      help='If true, uses fake data for unit testing.',\n      action='store_true'\n  )\n\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n\n\n\ngit blame\u3067\u898b\u308b\u30689\u65e5\u524d\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3067\u3001\u3053\u3061\u3089\u306e\u74b0\u5883\u3067\u306f\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\u3000\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\n\u4ee5\u4e0b\u306eOS\u306edual boot\n---\nWindows 8.1 pro (64bit)\n---\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\n```\n\nhttps://github.com/tensorflow/tensorflow/tree/r0.11/tensorflow/examples/tutorials/mnist\n\u3092\u8a66\u305d\u3046\u3068\u3057\u305f\u3002\u3000\n\n- git clone\u3067\u307e\u308b\u3054\u3068\u53d6\u5f97\n- mnist\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\n\n```\n$ python fully_connected_feed.py \nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\nTraceback (most recent call last):\n  File \"fully_connected_feed.py\", line 277, in <module>\n    tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\nTypeError: run() got an unexpected keyword argument 'argv'\n```\n\n\u4f55\u6545\u304b\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u3002\n\n\u4e00\u65b9\u3067\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u52d5\u304f\u3002\nhttp://blog.brainpad.co.jp/entry/2016/02/25/153000\n( \u3053\u3061\u3089\u306e\u4fee\u6b63\u3092\u9069\u7528 http://qiita.com/7of9/items/eeef2afe9aeef7030db1 )\n\n\n## TensorFlow v0.8\u3068git clone\u306emnist\u30b3\u30fc\u30c9\u306e\u9055\u3044\n\n\n### v0.8\nhttps://github.com/tensorflow/tensorflow/blob/r0.8/tensorflow/examples/tutorials/mnist/fully_connected_feed.py\n\nmain()\u95a2\u6570\u4ee5\u964d\u3060\u3051\u3002\n\n```fully_connected_feed.py\ndef main(_):\n    run_training()\nif __name__ == '__main__':\n    tf.app.run()\n```\n\n\n### git clone\u3057\u305f\u3082\u306e\n\nmain\u95a2\u6570\u4ee5\u964d\u3060\u3051\u3002\n\n```fully_connected_feed.py\ndef main(_):\n  if tf.gfile.Exists(FLAGS.log_dir):\n    tf.gfile.DeleteRecursively(FLAGS.log_dir)\n  tf.gfile.MakeDirs(FLAGS.log_dir)\n  run_training()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--learning_rate',\n      type=float,\n      default=0.01,\n      help='Initial learning rate.'\n  )\n  parser.add_argument(\n      '--max_steps',\n      type=int,\n      default=2000,\n      help='Number of steps to run trainer.'\n  )\n  parser.add_argument(\n      '--hidden1',\n      type=int,\n      default=128,\n      help='Number of units in hidden layer 1.'\n  )\n  parser.add_argument(\n      '--hidden2',\n      type=int,\n      default=32,\n      help='Number of units in hidden layer 2.'\n  )\n  parser.add_argument(\n      '--batch_size',\n      type=int,\n      default=100,\n      help='Batch size.  Must divide evenly into the dataset sizes.'\n  )\n  parser.add_argument(\n      '--input_data_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/input_data',\n      help='Directory to put the input data.'\n  )\n  parser.add_argument(\n      '--log_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/logs/fully_connected_feed',\n      help='Directory to put the log data.'\n  )\n  parser.add_argument(\n      '--fake_data',\n      default=False,\n      help='If true, uses fake data for unit testing.',\n      action='store_true'\n  )\n\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n\n```\n\ngit blame\u3067\u898b\u308b\u30689\u65e5\u524d\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3067\u3001\u3053\u3061\u3089\u306e\u74b0\u5883\u3067\u306f\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3002\n\n", "tags": ["TensorFlow", "borgWarp"]}