{"context": " More than 1 year has passed since last update.\u6c17\u304c\u3064\u3044\u305f\u3089\u660e\u65e5\u3060\u3063\u305f\u306e\u3067\u3001Arc\u3067\u89e3\u3044\u3066\u307f\u305f\u3002\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/items/0ddde0164a745cd09c34\n\nrealtime_doukaku5.arc\n(= opposite '(2 3 0 1))\n(= pattern '((2 3 0 1) (1 0 3 2) (3 2 1 0)))\n(= adjacent (list [if (< -1 (- _ 3)) (- _ 3)]   ; up                                                                                                                              \n                  [if (< (mod _ 3) 2) (++ _)]   ; right                                                                                                                           \n                  [if (< (+ _ 3) 9) (+ _ 3)]    ; down                                                                                                                             \n                  [if (< 0 (mod _ 3)) (-- _)])) ; left                                                                                                                            \n\n(def run (lis idx side)\n  (let next ((pattern (lis idx)) side)\n    (cons idx\n          (aif ((adjacent next) idx)\n               (run lis it (opposite next))))))\n\n(def to-alphabet (l) (upcase (string (map [coerce (+ _ 97) 'char] l))))\n(def to-numlis (s) (read (+ \"(\" (string (intersperse #\\  (coerce s 'cons))) \")\")))\n(def solve (s) (to-alphabet (run (to-numlis s) 1 0)))\n\n\n\u4ee5\u4e0a\u304c\u7b97\u51fa\u306e\u30b3\u30fc\u30c9\n\u666e\u901a\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3060\u304c\u306a\u3093\u304b\u30b7\u30e7\u30fc\u30c8\u30b3\u30fc\u30c9\u3063\u307d\u304f\u306a\u308b\u306a\u2026\n\nrealtime_doukaku_5_result.arc\n(solve \"101221102\") ;-> \"BEDGHIFEH\"                                                                                                                                               \n(solve \"000000000\") ;-> \"BEH\"                                                                                                                                                     \n(solve \"111111111\") ;-> \"BCF\"                                                                                                                                                     \n(solve \"222222222\") ;-> \"BAD\"                                                                                                                                                     \n(solve \"000211112\") ;-> \"BEFIHEDGH\"                                                                                                                                               \n(solve \"221011102\") ;-> \"BADGHIFEBCF\"                                                                                                                                             \n(solve \"201100112\") ;-> \"BEHIFCBADEF\"                                                                                                                                             \n(solve \"000111222\") ;-> \"BEFIH\"                                                                                                                                                   \n(solve \"012012012\") ;-> \"BC\"                                                                                                                                                      \n(solve \"201120111\") ;-> \"BEDABCFI\"                                                                                                                                                \n(solve \"220111122\") ;-> \"BADEHGD\"                                                                                                                                                 \n(solve \"221011022\") ;-> \"BADG\"                                                                                                                                                    \n(solve \"111000112\") ;-> \"BCFIHEBA\"                                                                                                                                                \n(solve \"001211001\") ;-> \"BEFI\"                                                                                                                                                    \n(solve \"111222012\") ;-> \"BCFEHIF\"                                                                                                                                                 \n(solve \"220111211\") ;-> \"BADEHI\"                                                                                                                                                  \n(solve \"211212212\") ;-> \"BCFEBAD\"                                                                                                                                                 \n(solve \"002112210\") ;-> \"BEFC\"                                                                                                                                                    \n(solve \"001010221\") ;-> \"BEF\"                                                                                                                                                     \n(solve \"100211002\") ;-> \"BEFIHG\"                                                                                                                                                  \n(solve \"201212121\") ;-> \"BEFCBAD\"  \n\n\n\u4ee5\u4e0a\u304c\u691c\u8a3c\u30b3\u30fc\u30c9\n\u3046\u307e\u304f\u52d5\u3044\u3066\u3044\u308b\u3002\n\u6c17\u304c\u3064\u3044\u305f\u3089\u660e\u65e5\u3060\u3063\u305f\u306e\u3067\u3001Arc\u3067\u89e3\u3044\u3066\u307f\u305f\u3002\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/items/0ddde0164a745cd09c34\n\n```arc:realtime_doukaku5.arc\n(= opposite '(2 3 0 1))\n(= pattern '((2 3 0 1) (1 0 3 2) (3 2 1 0)))\n(= adjacent (list [if (< -1 (- _ 3)) (- _ 3)]   ; up                                                                                                                              \n                  [if (< (mod _ 3) 2) (++ _)]   ; right                                                                                                                           \n                  [if (< (+ _ 3) 9) (+ _ 3)]    ; down                                                                                                                             \n                  [if (< 0 (mod _ 3)) (-- _)])) ; left                                                                                                                            \n\n(def run (lis idx side)\n  (let next ((pattern (lis idx)) side)\n    (cons idx\n          (aif ((adjacent next) idx)\n               (run lis it (opposite next))))))\n\n(def to-alphabet (l) (upcase (string (map [coerce (+ _ 97) 'char] l))))\n(def to-numlis (s) (read (+ \"(\" (string (intersperse #\\  (coerce s 'cons))) \")\")))\n(def solve (s) (to-alphabet (run (to-numlis s) 1 0)))\n```\n\n\u4ee5\u4e0a\u304c\u7b97\u51fa\u306e\u30b3\u30fc\u30c9\n\u666e\u901a\u306b\u66f8\u3044\u305f\u3064\u3082\u308a\u3060\u304c\u306a\u3093\u304b\u30b7\u30e7\u30fc\u30c8\u30b3\u30fc\u30c9\u3063\u307d\u304f\u306a\u308b\u306a\u2026\n\n```arc:realtime_doukaku_5_result.arc\n(solve \"101221102\") ;-> \"BEDGHIFEH\"                                                                                                                                               \n(solve \"000000000\") ;-> \"BEH\"                                                                                                                                                     \n(solve \"111111111\") ;-> \"BCF\"                                                                                                                                                     \n(solve \"222222222\") ;-> \"BAD\"                                                                                                                                                     \n(solve \"000211112\") ;-> \"BEFIHEDGH\"                                                                                                                                               \n(solve \"221011102\") ;-> \"BADGHIFEBCF\"                                                                                                                                             \n(solve \"201100112\") ;-> \"BEHIFCBADEF\"                                                                                                                                             \n(solve \"000111222\") ;-> \"BEFIH\"                                                                                                                                                   \n(solve \"012012012\") ;-> \"BC\"                                                                                                                                                      \n(solve \"201120111\") ;-> \"BEDABCFI\"                                                                                                                                                \n(solve \"220111122\") ;-> \"BADEHGD\"                                                                                                                                                 \n(solve \"221011022\") ;-> \"BADG\"                                                                                                                                                    \n(solve \"111000112\") ;-> \"BCFIHEBA\"                                                                                                                                                \n(solve \"001211001\") ;-> \"BEFI\"                                                                                                                                                    \n(solve \"111222012\") ;-> \"BCFEHIF\"                                                                                                                                                 \n(solve \"220111211\") ;-> \"BADEHI\"                                                                                                                                                  \n(solve \"211212212\") ;-> \"BCFEBAD\"                                                                                                                                                 \n(solve \"002112210\") ;-> \"BEFC\"                                                                                                                                                    \n(solve \"001010221\") ;-> \"BEF\"                                                                                                                                                     \n(solve \"100211002\") ;-> \"BEFIHG\"                                                                                                                                                  \n(solve \"201212121\") ;-> \"BEFCBAD\"  \n```\n\n\u4ee5\u4e0a\u304c\u691c\u8a3c\u30b3\u30fc\u30c9\n\u3046\u307e\u304f\u52d5\u3044\u3066\u3044\u308b\u3002", "tags": ["ARC", "\u3069\u3046\u66f8\u304f", "\u52c9\u5f37\u4f1a"]}