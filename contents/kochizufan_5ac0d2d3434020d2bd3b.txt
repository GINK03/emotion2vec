{"context": " More than 1 year has passed since last update.php-resque\u8d85\u4fbf\u5229\u3002\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u7b49\u3092\u5143\u306b\u8a2d\u5b9a\u3057\u3066\u3001redis\u304c\u53d7\u3051\u3066\u304f\u308c\u305f\u30ad\u30e5\u30fc\u3092Worker\u3067\u30ac\u30f3\u30ac\u30f3\u30a4\u30d9\u30f3\u30c8\u30c9\u30ea\u30d6\u30f3\u3067\u51e6\u7406\u3067\u304d\u308b\u3093\u3060\u3051\u3069\u3001\u4e00\u3064\u56f0\u3063\u305f\u70b9\u304c\u2026\u3002\nWorker\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3044\u308b\u6700\u4e2d\u306b\u63a5\u7d9a\u5148\u306eredis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u308c\u3070\u3001\u30b5\u30fc\u30d0\u5074\u304c\u5fa9\u5e30\u3057\u3066\u3082\u518d\u63a5\u7d9a\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\nWorker\u306f\u53d7\u3051\u53d6\u3063\u305f\u51e6\u7406\u306b\u5fdc\u3058\u305f\u51e6\u7406\u30af\u30e9\u30b9\u3092\u30d7\u30e9\u30b0\u30a4\u30f3\u7684\u306b\u8ffd\u52a0\u3057\u3066\u3001\u5168\u4f53\u306e\u8d77\u52d5\u3092\u53f8\u308b\u30c7\u30fc\u30e2\u30f3\u306f\u6a19\u6e96\u30b9\u30af\u30ea\u30d7\u30c8\u306e\n./vendor/bin/resque\n\n\u3092\u5b9f\u884c\u3055\u305b\u308b\u4ed5\u7d44\u307f\u306a\u306e\u3067\u3001\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3057\u305f\u3089\u518d\u63a5\u7d9a\u3055\u305b\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u304b\u63a5\u7d9a\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3059\u308b\u4e8b\u3059\u3089\u81f3\u96e3\u306e\u696d\u2026\uff08\u30a8\u30e9\u30fc\u30ed\u30b0\u3092\u5410\u304b\u305b\u3066\u3001\u5225\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u76e3\u8996\u3068\u304b\uff1f\uff09\n\u3082\u3061\u308d\u3093\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u306e\u3067 ./vendor/bin/resque \u306b\u624b\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u306e\u3082\u624b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u307e\u3067\u3084\u308b\u306e\u306f\u300c\u62f3\u9283\u306f\u6700\u5f8c\u306e\u6b66\u5668\u3060\u300d\u7684\u306a\u3068\u3053\u308d\u3067\u2026\u3002\n\u3088\u304f\u3042\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u601d\u3046\u306e\u3067\u3001\u306a\u306b\u304b\u898b\u843d\u3068\u3057\u3066\u308b\u304b\u3082\u77e5\u308c\u305a\u2026\u3054\u5b58\u77e5\u306e\u65b9\u3001\u304a\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u3087\u3046\u304b\u2026\u3002\n\u3010\u8ffd\u8a1818:17\u3011\n\u7d50\u5c40\u6700\u5f8c\u306e\u6b66\u5668\u3092\u4f7f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nlib/Resque/Redis.php\u3092\u5909\u66f4(\u98f2\u307f\u4f1a\u8feb\u3063\u3066\u3066\u6642\u9593\u306a\u3044\u306e\u3067diff\u3068\u304b\u5f8c\u3067\u53d6\u308a\u307e\u3059)\n\nlib/Resque/Redis.php\n<?php\n/**\n * Wrap Credis to add namespace support and various helper methods.\n *\n * @package     Resque/Redis\n * @author      Chris Boulton <chris@bigcommerce.com>\n * @license     http://www.opensource.org/licenses/mit-license.php\n */\nclass Resque_Redis\n{\n    /**\n     * Redis namespace\n     * @var string\n     */\n    private static $defaultNamespace = 'resque:';\n\n    private $server;\n    private $database;\n    private $_driver = null; // Add by kochizufan\n\n    /**\n     * @var array List of all commands in Redis that supply a key as their\n     *  first argument. Used to prefix keys with the Resque namespace.\n     */\n    private $keyCommands = array(\n        'exists',\n        'del',\n        'type',\n        'keys',\n        'expire',\n        'ttl',\n        'move',\n        'set',\n        'setex',\n        'get',\n        'getset',\n        'setnx',\n        'incr',\n        'incrby',\n        'decr',\n        'decrby',\n        'rpush',\n        'lpush',\n        'llen',\n        'lrange',\n        'ltrim',\n        'lindex',\n        'lset',\n        'lrem',\n        'lpop',\n        'blpop',\n        'rpop',\n        'sadd',\n        'srem',\n        'spop',\n        'scard',\n        'sismember',\n        'smembers',\n        'srandmember',\n        'zadd',\n        'zrem',\n        'zrange',\n        'zrevrange',\n        'zrangebyscore',\n        'zcard',\n        'zscore',\n        'zremrangebyscore',\n        'sort'\n    );\n    // sinterstore\n    // sunion\n    // sunionstore\n    // sdiff\n    // sdiffstore\n    // sinter\n    // smove\n    // rename\n    // rpoplpush\n    // mget\n    // msetnx\n    // mset\n    // renamenx\n\n    /**\n     * Set Redis namespace (prefix) default: resque\n     * @param string $namespace\n     */\n    public static function prefix($namespace)\n    {\n        if (strpos($namespace, ':') === false) {\n            $namespace .= ':';\n        }\n        self::$defaultNamespace = $namespace;\n    }\n\n    public function __construct($server, $database = null)\n    {\n        $this->server = $server;\n        $this->database = $database;\n\n            //Delete by kochizufan : lazy creating driver object\n    }\n\n    //Add by kochizufan\n    //Creating driver object if it is noy initialized yet.\n    //If error occured (redis server is not ready), driver object keep null.\n    private function driver() {\n        if ($this->_driver == null) {\n\n            if (is_array($this->server)) {\n                try {\n                    $this->_driver = new Credis_Cluster($this->server);\n                } catch (\\Exception $e) {\n                    $this->_driver = null;\n                }\n            }\n            else {\n                $port = null;\n                $password = null;\n                $host = $this->server;\n\n                // If not a UNIX socket path or tcp:// formatted connections string\n                // assume host:port combination.\n                if (strpos($this->server, '/') === false) {\n                    $parts = explode(':', $this->server);\n                    if (isset($parts[1])) {\n                        $port = $parts[1];\n                    }\n                    $host = $parts[0];\n                }else if (strpos($this->server, 'redis://') !== false){\n                    // Redis format is:\n                    // redis://[user]:[password]@[host]:[port]\n                    list($userpwd,$hostport) = explode('@', $this->server);\n                    $userpwd = substr($userpwd, strpos($userpwd, 'redis://')+8);\n                    list($host, $port) = explode(':', $hostport);\n                    list($user, $password) = explode(':', $userpwd);\n                }\n\n                try {\n                    $this->_driver = new Credis_Client($host, $port);\n                    if (isset($password)){\n                        $this->_driver->auth($password);\n                    }\n                } catch (\\Exception $e) {\n                    $this->_driver = null;\n                }\n            }\n\n            if ($this->_driver !== null && $this->database !== null) {\n                $this->_driver->select($this->database);\n            }\n        }\n\n        return $this->_driver;\n    }\n\n    /**\n     * Magic method to handle all function requests and prefix key based\n     * operations with the {self::$defaultNamespace} key prefix.\n     *\n     * @param string $name The name of the method called.\n     * @param array $args Array of supplied arguments to the method.\n     * @return mixed Return value from Resident::call() based on the command.\n     */\n    public function __call($name, $args) {\n        if(in_array($name, $this->keyCommands)) {\n            if(is_array($args[0])) {\n                foreach($args[0] AS $i => $v) {\n                    $args[0][$i] = self::$defaultNamespace . $v;\n                }\n            } else {\n                $args[0] = self::$defaultNamespace . $args[0];\n            }\n        }\n\n        //Modified by kochizufan\n        try {\n            // if driver is not initialized yet, return false.\n            $driver = $this->driver();\n            if ($driver === null) return false;\n\n            $ret = $driver->__call($name, $args);\n\n            //if method name is \"blpop\" and return value is not array, driver should be re-initializing.\n            if ($name === 'blpop' && !is_array($ret)) {\n                $this->_driver = null;\n                return false;\n            }\n\n            return $ret;\n        }\n        catch(CredisException $e) {\n\n            //if exception occured, driver should be re-initializing.\n            $this->_driver = null;\n            return false;\n        }\n    }\n\n    public static function getPrefix()\n    {\n        return self::$defaultNamespace;\n    }\n\n    public static function removePrefix($string)\n    {\n        $prefix=self::getPrefix();\n\n        if (substr($string, 0, strlen($prefix)) == $prefix) {\n            $string = substr($string, strlen($prefix), strlen($string) );\n        }\n        return $string;\n    }\n}\n?>\n\n\n\u8d77\u52d5\u6642\u306bredis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u3066\u3044\u305f\u3089\u30a8\u30e9\u30fc\u3067\u8d77\u52d5\u3057\u306a\u3044\u3001\u9014\u4e2d\u3067redis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u305f\u3089\u30c7\u30fc\u30e2\u30f3\u306f\u843d\u3061\u306f\u3057\u306a\u3044\u3051\u3069\u4e8c\u5ea6\u3068\u5fa9\u5e30\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u72b6\u6cc1\u3060\u3063\u305f\u306e\u3067\u3001DB\u30c9\u30e9\u30a4\u30d0\u3092\u9045\u5ef6\u63a5\u7d9a\u306b\u3057\u3066\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u9650\u308a\u306f\u3064\u306a\u304e\u76f4\u3057\u306b\u3044\u304f\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3060\u3057\u305f\u3089\u307e\u305f\u3064\u306a\u304e\u76f4\u3057\u306b\u3044\u304f\u3001\u3068\u3044\u3046\u3075\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u6700\u4f4e\u9650\u306e\u5909\u66f4\u3067\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u3001\u57f7\u62d7\u7684\u306a\u518d\u63a5\u7d9a\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3057\u3001\u500b\u4eba\u7684\u8981\u4ef6\u306e\u305f\u3081\u3060\u3051\u306b\u4f5c\u3063\u305f\u306e\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068blpop\u3067\u306e\u51e6\u7406\u3057\u304b\u6271\u3048\u307e\u305b\u3093\u304c\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u2026\u3002\nphp-resque\u8d85\u4fbf\u5229\u3002\n[\u3053\u3061\u3089](http://qiita.com/tototoshi/items/0e77b7bfa19f51ad52d0)\u306e\u8a18\u4e8b\u7b49\u3092\u5143\u306b\u8a2d\u5b9a\u3057\u3066\u3001redis\u304c\u53d7\u3051\u3066\u304f\u308c\u305f\u30ad\u30e5\u30fc\u3092Worker\u3067\u30ac\u30f3\u30ac\u30f3\u30a4\u30d9\u30f3\u30c8\u30c9\u30ea\u30d6\u30f3\u3067\u51e6\u7406\u3067\u304d\u308b\u3093\u3060\u3051\u3069\u3001\u4e00\u3064\u56f0\u3063\u305f\u70b9\u304c\u2026\u3002\n\nWorker\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3044\u308b\u6700\u4e2d\u306b\u63a5\u7d9a\u5148\u306eredis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u308c\u3070\u3001\u30b5\u30fc\u30d0\u5074\u304c\u5fa9\u5e30\u3057\u3066\u3082\u518d\u63a5\u7d9a\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\nWorker\u306f\u53d7\u3051\u53d6\u3063\u305f\u51e6\u7406\u306b\u5fdc\u3058\u305f\u51e6\u7406\u30af\u30e9\u30b9\u3092\u30d7\u30e9\u30b0\u30a4\u30f3\u7684\u306b\u8ffd\u52a0\u3057\u3066\u3001\u5168\u4f53\u306e\u8d77\u52d5\u3092\u53f8\u308b\u30c7\u30fc\u30e2\u30f3\u306f\u6a19\u6e96\u30b9\u30af\u30ea\u30d7\u30c8\u306e\n\n```\n./vendor/bin/resque\n```\n\n\u3092\u5b9f\u884c\u3055\u305b\u308b\u4ed5\u7d44\u307f\u306a\u306e\u3067\u3001\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3057\u305f\u3089\u518d\u63a5\u7d9a\u3055\u305b\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u304b\u63a5\u7d9a\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3059\u308b\u4e8b\u3059\u3089\u81f3\u96e3\u306e\u696d\u2026\uff08\u30a8\u30e9\u30fc\u30ed\u30b0\u3092\u5410\u304b\u305b\u3066\u3001\u5225\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u76e3\u8996\u3068\u304b\uff1f\uff09\n\n\u3082\u3061\u308d\u3093\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u306e\u3067 ./vendor/bin/resque \u306b\u624b\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u306e\u3082\u624b\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u307e\u3067\u3084\u308b\u306e\u306f\u300c\u62f3\u9283\u306f\u6700\u5f8c\u306e\u6b66\u5668\u3060\u300d\u7684\u306a\u3068\u3053\u308d\u3067\u2026\u3002\n\u3088\u304f\u3042\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u601d\u3046\u306e\u3067\u3001\u306a\u306b\u304b\u898b\u843d\u3068\u3057\u3066\u308b\u304b\u3082\u77e5\u308c\u305a\u2026\u3054\u5b58\u77e5\u306e\u65b9\u3001\u304a\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u3087\u3046\u304b\u2026\u3002\n\n\u3010\u8ffd\u8a1818:17\u3011\n\u7d50\u5c40\u6700\u5f8c\u306e\u6b66\u5668\u3092\u4f7f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n[lib/Resque/Redis.php](https://github.com/chrisboulton/php-resque/blob/master/lib/Resque/Redis.php)\u3092\u5909\u66f4(\u98f2\u307f\u4f1a\u8feb\u3063\u3066\u3066\u6642\u9593\u306a\u3044\u306e\u3067diff\u3068\u304b\u5f8c\u3067\u53d6\u308a\u307e\u3059)\n\n```php:lib/Resque/Redis.php\n<?php\n/**\n * Wrap Credis to add namespace support and various helper methods.\n *\n * @package\t\tResque/Redis\n * @author\t\tChris Boulton <chris@bigcommerce.com>\n * @license\t\thttp://www.opensource.org/licenses/mit-license.php\n */\nclass Resque_Redis\n{\n    /**\n     * Redis namespace\n     * @var string\n     */\n    private static $defaultNamespace = 'resque:';\n\n    private $server;\n    private $database;\n    private $_driver = null; // Add by kochizufan\n\n\t/**\n\t * @var array List of all commands in Redis that supply a key as their\n\t *\tfirst argument. Used to prefix keys with the Resque namespace.\n\t */\n\tprivate $keyCommands = array(\n\t\t'exists',\n\t\t'del',\n\t\t'type',\n\t\t'keys',\n\t\t'expire',\n\t\t'ttl',\n\t\t'move',\n\t\t'set',\n\t\t'setex',\n\t\t'get',\n\t\t'getset',\n\t\t'setnx',\n\t\t'incr',\n\t\t'incrby',\n\t\t'decr',\n\t\t'decrby',\n\t\t'rpush',\n\t\t'lpush',\n\t\t'llen',\n\t\t'lrange',\n\t\t'ltrim',\n\t\t'lindex',\n\t\t'lset',\n\t\t'lrem',\n\t\t'lpop',\n\t\t'blpop',\n\t\t'rpop',\n\t\t'sadd',\n\t\t'srem',\n\t\t'spop',\n\t\t'scard',\n\t\t'sismember',\n\t\t'smembers',\n\t\t'srandmember',\n\t\t'zadd',\n\t\t'zrem',\n\t\t'zrange',\n\t\t'zrevrange',\n\t\t'zrangebyscore',\n\t\t'zcard',\n\t\t'zscore',\n\t\t'zremrangebyscore',\n\t\t'sort'\n\t);\n\t// sinterstore\n\t// sunion\n\t// sunionstore\n\t// sdiff\n\t// sdiffstore\n\t// sinter\n\t// smove\n\t// rename\n\t// rpoplpush\n\t// mget\n\t// msetnx\n\t// mset\n\t// renamenx\n\n\t/**\n\t * Set Redis namespace (prefix) default: resque\n\t * @param string $namespace\n\t */\n\tpublic static function prefix($namespace)\n\t{\n\t    if (strpos($namespace, ':') === false) {\n\t        $namespace .= ':';\n\t    }\n\t    self::$defaultNamespace = $namespace;\n\t}\n\n\tpublic function __construct($server, $database = null)\n\t{\n\t\t$this->server = $server;\n\t\t$this->database = $database;\n\n        \t//Delete by kochizufan : lazy creating driver object\n\t}\n\n    //Add by kochizufan\n    //Creating driver object if it is noy initialized yet.\n    //If error occured (redis server is not ready), driver object keep null.\n    private function driver() {\n        if ($this->_driver == null) {\n\n            if (is_array($this->server)) {\n                try {\n                    $this->_driver = new Credis_Cluster($this->server);\n                } catch (\\Exception $e) {\n                    $this->_driver = null;\n                }\n            }\n            else {\n                $port = null;\n                $password = null;\n                $host = $this->server;\n\n                // If not a UNIX socket path or tcp:// formatted connections string\n                // assume host:port combination.\n                if (strpos($this->server, '/') === false) {\n                    $parts = explode(':', $this->server);\n                    if (isset($parts[1])) {\n                        $port = $parts[1];\n                    }\n                    $host = $parts[0];\n                }else if (strpos($this->server, 'redis://') !== false){\n                    // Redis format is:\n                    // redis://[user]:[password]@[host]:[port]\n                    list($userpwd,$hostport) = explode('@', $this->server);\n                    $userpwd = substr($userpwd, strpos($userpwd, 'redis://')+8);\n                    list($host, $port) = explode(':', $hostport);\n                    list($user, $password) = explode(':', $userpwd);\n                }\n\n                try {\n                    $this->_driver = new Credis_Client($host, $port);\n                    if (isset($password)){\n                        $this->_driver->auth($password);\n                    }\n                } catch (\\Exception $e) {\n                    $this->_driver = null;\n                }\n            }\n\n            if ($this->_driver !== null && $this->database !== null) {\n                $this->_driver->select($this->database);\n            }\n        }\n\n        return $this->_driver;\n    }\n\n\t/**\n\t * Magic method to handle all function requests and prefix key based\n\t * operations with the {self::$defaultNamespace} key prefix.\n\t *\n\t * @param string $name The name of the method called.\n\t * @param array $args Array of supplied arguments to the method.\n\t * @return mixed Return value from Resident::call() based on the command.\n\t */\n\tpublic function __call($name, $args) {\n\t\tif(in_array($name, $this->keyCommands)) {\n            if(is_array($args[0])) {\n                foreach($args[0] AS $i => $v) {\n                    $args[0][$i] = self::$defaultNamespace . $v;\n                }\n            } else {\n                $args[0] = self::$defaultNamespace . $args[0];\n            }\n\t\t}\n\n        //Modified by kochizufan\n\t\ttry {\n            // if driver is not initialized yet, return false.\n            $driver = $this->driver();\n            if ($driver === null) return false;\n\n\t\t\t$ret = $driver->__call($name, $args);\n\n            //if method name is \"blpop\" and return value is not array, driver should be re-initializing.\n            if ($name === 'blpop' && !is_array($ret)) {\n                $this->_driver = null;\n                return false;\n            }\n\n            return $ret;\n\t\t}\n\t\tcatch(CredisException $e) {\n\n            //if exception occured, driver should be re-initializing.\n            $this->_driver = null;\n\t\t\treturn false;\n\t\t}\n\t}\n\n    public static function getPrefix()\n    {\n        return self::$defaultNamespace;\n    }\n\n    public static function removePrefix($string)\n    {\n        $prefix=self::getPrefix();\n\n        if (substr($string, 0, strlen($prefix)) == $prefix) {\n            $string = substr($string, strlen($prefix), strlen($string) );\n        }\n        return $string;\n    }\n}\n?>\n```\n\n\u8d77\u52d5\u6642\u306bredis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u3066\u3044\u305f\u3089\u30a8\u30e9\u30fc\u3067\u8d77\u52d5\u3057\u306a\u3044\u3001\u9014\u4e2d\u3067redis\u30b5\u30fc\u30d0\u304c\u843d\u3061\u305f\u3089\u30c7\u30fc\u30e2\u30f3\u306f\u843d\u3061\u306f\u3057\u306a\u3044\u3051\u3069\u4e8c\u5ea6\u3068\u5fa9\u5e30\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u72b6\u6cc1\u3060\u3063\u305f\u306e\u3067\u3001DB\u30c9\u30e9\u30a4\u30d0\u3092\u9045\u5ef6\u63a5\u7d9a\u306b\u3057\u3066\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u9650\u308a\u306f\u3064\u306a\u304e\u76f4\u3057\u306b\u3044\u304f\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3060\u3057\u305f\u3089\u307e\u305f\u3064\u306a\u304e\u76f4\u3057\u306b\u3044\u304f\u3001\u3068\u3044\u3046\u3075\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u6700\u4f4e\u9650\u306e\u5909\u66f4\u3067\u5bfe\u5fdc\u3057\u305f\u306e\u3067\u3001\u57f7\u62d7\u7684\u306a\u518d\u63a5\u7d9a\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3057\u3001\u500b\u4eba\u7684\u8981\u4ef6\u306e\u305f\u3081\u3060\u3051\u306b\u4f5c\u3063\u305f\u306e\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3068blpop\u3067\u306e\u51e6\u7406\u3057\u304b\u6271\u3048\u307e\u305b\u3093\u304c\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u2026\u3002\n", "tags": ["PHP", "Redis", "KVS"]}