{"context": " More than 1 year has passed since last update.\n\n\u30b3\u30fc\u30c9\nimport numpy\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport mpl_toolkits.mplot3d.axes3d as p3\n\ndef plot_3D_animation(X, Y, Z, n_frame=None,\n                      xlim=None, ylim=None, zlim=None,\n                      step=None, saveanime=None, show=True):\n    \"\"\"3D plotting animation\"\"\"\n    fig = plt.figure()\n    ax = p3.Axes3D(fig)\n\n    if step is None:\n        step = 1\n    X = X[range(0, len(X), step)]\n    Y = Y[range(0, len(Y), step)]\n    Z = Z[range(0, len(Z), step)]\n\n    data = [numpy.vstack((X, Y, Z))]\n\n    lines = [ax.plot(dat[0, 0:1], dat[1, 0:1],\n                     dat[2, 0:1])[0] for dat in data]\n\n    # Setting the axes properties\n    if xlim is None:\n        ax.set_xlim3d([X.min(), X.max()])\n    elif len(xlim) == 2:\n        ax.set_xlim3d(xlim)\n    ax.set_xlabel('X')\n    if ylim is None:\n        ax.set_ylim3d([Y.min(), Y.max()])\n    elif len(ylim) == 2:\n        ax.set_ylim3d(ylim)\n    ax.set_ylabel('Y')\n    if zlim is None:\n        ax.set_zlim3d([Z.min(), Z.max()])\n    elif len(zlim) == 2:\n        ax.set_zlim3d(zlim)\n    ax.set_zlabel('Z')\n    ax.set_title('3D animation')\n    ax.view_init(-10, 30)\n\n    def update_lines(num, dataLines, lines):\n        for line, data in zip(lines, dataLines):\n            line.set_data(data[0:2, :num])\n            line.set_3d_properties(data[2,:num])\n        return lines\n\n    if n_frame is None:\n        n_frame = len(X)\n\n    # Creating the Animation object\n    anim = animation.FuncAnimation(fig,\n                                   update_lines,\n                                   n_frame,\n                                   fargs=(data, lines),\n                                   interval=1,\n                                   blit=False)\n\n    if type(saveanime) == str:\n        writer = animation.FFMpegWriter()\n        anim.save(saveanime, writer=writer)\n\n    if show is True:\n        plt.show()\n\n    plt.clf()\n    plt.close()\n\n\n\u4f7f\u3044\u65b9\n>>> import numpy as np\n>>> X, Y, Z = np.array([1,2,3]), np.array([2,3,4]), np.array([4,5,6])\n>>> plot_3D_animation(X, Y, Z)\n\n\n\u4f7f\u7528\u4f8b\n\n3D\u30d7\u30ea\u30f3\u30bf\u30fc\u306e\u30d7\u30ed\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\nhttps://github.com/ut-3dprinter/ut-3dprinter/tree/master/Software\n\n\u30b3\u30fc\u30c9\n---\n\n```python\nimport numpy\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport mpl_toolkits.mplot3d.axes3d as p3\n\ndef plot_3D_animation(X, Y, Z, n_frame=None,\n                      xlim=None, ylim=None, zlim=None,\n                      step=None, saveanime=None, show=True):\n    \"\"\"3D plotting animation\"\"\"\n    fig = plt.figure()\n    ax = p3.Axes3D(fig)\n\n    if step is None:\n        step = 1\n    X = X[range(0, len(X), step)]\n    Y = Y[range(0, len(Y), step)]\n    Z = Z[range(0, len(Z), step)]\n\n    data = [numpy.vstack((X, Y, Z))]\n\n    lines = [ax.plot(dat[0, 0:1], dat[1, 0:1],\n                     dat[2, 0:1])[0] for dat in data]\n\n    # Setting the axes properties\n    if xlim is None:\n        ax.set_xlim3d([X.min(), X.max()])\n    elif len(xlim) == 2:\n        ax.set_xlim3d(xlim)\n    ax.set_xlabel('X')\n    if ylim is None:\n        ax.set_ylim3d([Y.min(), Y.max()])\n    elif len(ylim) == 2:\n        ax.set_ylim3d(ylim)\n    ax.set_ylabel('Y')\n    if zlim is None:\n        ax.set_zlim3d([Z.min(), Z.max()])\n    elif len(zlim) == 2:\n        ax.set_zlim3d(zlim)\n    ax.set_zlabel('Z')\n    ax.set_title('3D animation')\n    ax.view_init(-10, 30)\n\n    def update_lines(num, dataLines, lines):\n        for line, data in zip(lines, dataLines):\n            line.set_data(data[0:2, :num])\n            line.set_3d_properties(data[2,:num])\n        return lines\n\n    if n_frame is None:\n        n_frame = len(X)\n\n    # Creating the Animation object\n    anim = animation.FuncAnimation(fig,\n                                   update_lines,\n                                   n_frame,\n                                   fargs=(data, lines),\n                                   interval=1,\n                                   blit=False)\n\n    if type(saveanime) == str:\n        writer = animation.FFMpegWriter()\n        anim.save(saveanime, writer=writer)\n\n    if show is True:\n        plt.show()\n\n    plt.clf()\n    plt.close()\n```\n\n\u4f7f\u3044\u65b9\n---\n\n```bash\n>>> import numpy as np\n>>> X, Y, Z = np.array([1,2,3]), np.array([2,3,4]), np.array([4,5,6])\n>>> plot_3D_animation(X, Y, Z)\n```\n\n\u4f7f\u7528\u4f8b\n---\n* [3D\u30d7\u30ea\u30f3\u30bf\u30fc\u306e\u30d7\u30ed\u30c3\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3](https://www.youtube.com/watch?v=ZJ2nRWYOFkk)\n* https://github.com/ut-3dprinter/ut-3dprinter/tree/master/Software\n", "tags": ["Python2.7.8", "matplotlib1.3.1"]}