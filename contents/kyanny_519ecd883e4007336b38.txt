{"context": " More than 1 year has passed since last update.CSV \u306e\u8aad\u307f\u66f8\u304d\u3092\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u306f\u30d9\u30af\u30bf\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308b\u3002\nGitHub\nhttps://github.com/clojure/data.csv\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nhttp://clojure.github.io/data.csv/\n(ns clj-data.csv)\n\n(require '[clojure.data.csv :as csv])\n\n(let [filename \"usa-states.csv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv)]\n  rows)\n\n(let [filename \"usa-states.csv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv)]\n  (doseq [row rows]\n    (let [code (first row)\n          name (second row)]\n      (println (str code \" => \" name)))))\n\n(let [filename \"test.ltsv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv :separator \\tab)]\n  (map (fn [row]\n         (str (first row) \" => \" (second row)))\n       rows))\n\n(with-out-str\n  (csv/write-csv *out* [[\"foo\" \"bar\"]\n                        [\"baz\" \"qux\"]]))\n\n(csv/write-csv *out* [[\"foo\" \"bar\"]\n                      [\"baz\" \"qux\"]\n                      [\"I'm\" \"pen\"]]\n               :separator \\tab)\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\nhttps://github.com/kyanny/playground/tree/gh-pages/clj-data.csv\nCSV \u306e\u8aad\u307f\u66f8\u304d\u3092\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u306f\u30d9\u30af\u30bf\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308b\u3002\n\nGitHub\nhttps://github.com/clojure/data.csv\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nhttp://clojure.github.io/data.csv/\n\n```clj\n(ns clj-data.csv)\n\n(require '[clojure.data.csv :as csv])\n\n(let [filename \"usa-states.csv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv)]\n  rows)\n\n(let [filename \"usa-states.csv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv)]\n  (doseq [row rows]\n    (let [code (first row)\n          name (second row)]\n      (println (str code \" => \" name)))))\n\n(let [filename \"test.ltsv\"\n      csv (slurp filename)\n      rows (csv/read-csv csv :separator \\tab)]\n  (map (fn [row]\n         (str (first row) \" => \" (second row)))\n       rows))\n\n(with-out-str\n  (csv/write-csv *out* [[\"foo\" \"bar\"]\n                        [\"baz\" \"qux\"]]))\n\n(csv/write-csv *out* [[\"foo\" \"bar\"]\n                      [\"baz\" \"qux\"]\n                      [\"I'm\" \"pen\"]]\n               :separator \\tab)\n\n```\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\nhttps://github.com/kyanny/playground/tree/gh-pages/clj-data.csv\n", "tags": ["Clojure"]}