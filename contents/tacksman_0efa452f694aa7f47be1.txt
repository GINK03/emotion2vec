{"context": " More than 1 year has passed since last update.\u7c21\u5358\u306a\u5730\u56f3\u3092MapView\u3067\u8868\u793a\u3059\u308b\u30b3\u30fc\u30c9\n\u3053\u3063\u3061\u3067\u66f8\u3044\u3066\u305f\u3084\u3064\u304b\u3089\u306e\u767a\u5c55\u3002\n\u76ee\u6a19\u306f\u3053\u3093\u306a\u611f\u3058\n  1. \u4e00\u56de\u3060\u3051\u81ea\u5206\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\n  2. \u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u3092\u5143\u306b\u5730\u56f3\u3092\u8868\u793a\n\u305d\u3057\u3066\u3067\u304d\u3042\u304c\u3063\u305f\u30bd\u30fc\u30b9\u304c\u3053\u3061\u3089\u3002\n\nViewController.swift\n    var locationManager: CLLocationManager?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        locationManager = CLLocationManager()\n\n        if (locationManager != NSNull()) {\n            locationManager?.delegate = self\n\n            locationManager?.requestAlwaysAuthorization()\n\n\n            let status = CLLocationManager.authorizationStatus()\n            switch status{\n            case .Restricted, .Denied:\n                break\n            case .NotDetermined:\n                // iOS8\u3067\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n                if ((locationManager?.respondsToSelector(\"requestWhenInUseAuthorization\")) != nil){\n                    locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n                    locationManager?.requestWhenInUseAuthorization()\n                    locationManager?.startUpdatingLocation()\n                }else{\n                    locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n                    locationManager?.startUpdatingLocation()\n                }\n            case .AuthorizedWhenInUse, .AuthorizedAlways:\n                // \u5f93\u6765\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n                locationManager?.startUpdatingLocation()\n            default:\n                break\n            }\n        }\n    }\n\n    override func viewWillAppear(animated: Bool) {\n        locationManager?.startUpdatingLocation()\n    }\n\n\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n\n    func locationManager(manager: CLLocationManager, didUpdateToLocation newLocation: CLLocation, fromLocation oldLocation: CLLocation) {\n\n        let latitude = newLocation.coordinate.latitude\n        let longitude = newLocation.coordinate.longitude\n        let location = CLLocationCoordinate2DMake(latitude,longitude)\n\n        mkMapView.setCenterCoordinate(location, animated: true)\n\n        var region: MKCoordinateRegion = mkMapView.region\n        region.center = location\n        region.span.latitudeDelta = 0.02\n        region.span.longitudeDelta = 0.02\n\n        let pointAnnotation: MKPointAnnotation = MKPointAnnotation()\n\n        pointAnnotation.coordinate = location\n        pointAnnotation.title = \"\u73fe\u5728\u5730\"\n\n        mkMapView.addAnnotation(pointAnnotation)\n        mkMapView.setRegion(region, animated: true)\n\n        //\u5730\u56f3\u306e\u5f62\u5f0f\n        mkMapView.mapType = MKMapType.Standard\n        locationManager?.stopUpdatingLocation()\n    }\n\n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    }\n\n\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u7537\u6599\u7406\u3059\u304e\u308b\u306e\u3067\u3001\u5c11\u3057\u7d30\u304b\u304f\u523b\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\n\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u8a8d\u8a3c\n  // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u78ba\u8a8d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3002\u5fc5\u9808\u3002      \n  locationManager?.requestAlwaysAuthorization()\n\n\n  let status = CLLocationManager.authorizationStatus()\n    // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u8a8d\u8a3c\u72b6\u614b\u3067\u5206\u5c90\n    switch status{\n      case .Restricted, .Denied:\n           break\n    case .NotDetermined:\n         if ((locationManager?.respondsToSelector(\"requestWhenInUseAuthorization\")) != nil){\n            // iOS8\u3067\u306finfo.plist\u306b\"requestWhenInUseAuthorization\"\u304b\u3001\"requestAlwaysAuthorization\"\u3092\u8a18\u8f09\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n            // requestWhenInUseAuthorization:\u8d77\u52d5\u4e2d\u306e\u307f\u4f7f\u7528\u3001requestAlwaysAuthorization:\u3044\u3064\u3067\u3082\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n            // \u7cbe\u5ea6\u306e\u6307\u5b9a\n            locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n            locationManager?.requestWhenInUseAuthorization()\n            // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u958b\u59cb\n            locationManager?.startUpdatingLocation()\n         }else{\n              locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n              locationManager?.startUpdatingLocation()\n         }\n    case .AuthorizedWhenInUse, .AuthorizedAlways:\n         // \u5f93\u6765\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n         locationManager?.startUpdatingLocation()\n    default:\n         break\n    }\n\n\n\u3053\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3001\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u305f\u3081\u306eAuthorization\u3068\u4f4d\u7f6e\u60c5\u5831\u306e\u53d6\u5f97\u958b\u59cb\u304c\u3067\u304d\u308b\u3002\n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u304c\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u958b\u59cb\u5f8c\u306e\u51e6\u7406\u306b\u3042\u305f\u308b\u3002\n  // \u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002Android\u3067\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304b\u3082\u3002\n  func locationManager(manager: CLLocationManager, didUpdateToLocation newLocation: CLLocation, fromLocation oldLocation: CLLocation) {\n        // \u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u7def\u5ea6\u7d4c\u5ea6\n        let latitude = newLocation.coordinate.latitude\n        let longitude = newLocation.coordinate.longitude\n        let location = CLLocationCoordinate2DMake(latitude,longitude)\n\n        // \u8868\u793a\u3059\u308b\u30de\u30c3\u30d7\u306e\u4e2d\u5fc3\u3092\u3001\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u30dd\u30a4\u30f3\u30c8\u306b\u6307\u5b9a\n        mkMapView.setCenterCoordinate(location, animated: true)\n\n        // \u8868\u793a\u3059\u308b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n        var region: MKCoordinateRegion = mkMapView.region\n        // \u9818\u57df\u8a2d\u5b9a\u306e\u4e2d\u5fc3\n        region.center = location\n        // \u8868\u793a\u3059\u308b\u9818\u57df\u306e\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4fc2\u6570\n        region.span.latitudeDelta = 0.02\n        region.span.longitudeDelta = 0.02\n\n        // \u30d4\u30f3\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n        let pointAnnotation: MKPointAnnotation = MKPointAnnotation()\n\n        // \u30d4\u30f3\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u4f4d\u7f6e\u306b\u8a2d\u5b9a\n        pointAnnotation.coordinate = location\n        // \u30d4\u30f3\u3092\u30bf\u30c3\u30d7\u3057\u305f\u969b\u306b\u8868\u793a\u3055\u308c\u308b\u5439\u304d\u51fa\u3057\u306e\u5185\u5bb9\n        pointAnnotation.title = \"\u73fe\u5728\u5730\"\n\n        // \u8a2d\u5b9a\u3057\u305f\u30d4\u30f3\u3092\u30de\u30c3\u30d7\u4e0a\u306b\u53cd\u6620\n        mkMapView.addAnnotation(pointAnnotation)\n        // \u6c7a\u5b9a\u3057\u305f\u8868\u793a\u8a2d\u5b9a\u3092MapView\u306b\u9069\u7528\n        mkMapView.setRegion(region, animated: true)\n\n        // \u5730\u56f3\u306e\u5f62\u5f0f\u3002Standard\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5730\u56f3\u3002Sattelite\u304c\u822a\u7a7a\u5730\u56f3\u3002\n        mkMapView.mapType = MKMapType.Standard\n        // \u4f4d\u7f6e\u60c5\u5831\u306f\u65e2\u306b\u53d6\u5f97\u3057\u305f\u306e\u3067\u3001\u3053\u308c\u4ee5\u964d\u53d6\u5f97\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u3092\u505c\u6b62\n        locationManager?.stopUpdatingLocation()\n    }\n\n    // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u304c\u5931\u6557\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u3002\n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    }\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u5f62\u3002\u81ea\u5206\u306e\u4f4d\u7f6e\u306b\u30d4\u30f3\u3092\u7acb\u3066\u308b\u3068\u304b\u3092\u5fd8\u308c\u305f\u306e\u3067\u3001\u6b21\u306f\u305d\u308c\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3059\u308b\u4e88\u5b9a\u3002\n  \n    \n[\u7c21\u5358\u306a\u5730\u56f3\u3092MapView\u3067\u8868\u793a\u3059\u308b\u30b3\u30fc\u30c9](http://qiita.com/tacksman/items/84e7e492d90e37a3e9f1)\n\u3053\u3063\u3061\u3067\u66f8\u3044\u3066\u305f\u3084\u3064\u304b\u3089\u306e\u767a\u5c55\u3002\n  \n  \u76ee\u6a19\u306f\u3053\u3093\u306a\u611f\u3058\n  1. \u4e00\u56de\u3060\u3051\u81ea\u5206\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\n  2. \u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u3092\u5143\u306b\u5730\u56f3\u3092\u8868\u793a\n  \n  \n  \u305d\u3057\u3066\u3067\u304d\u3042\u304c\u3063\u305f\u30bd\u30fc\u30b9\u304c\u3053\u3061\u3089\u3002\n  \n```swift:ViewController.swift\n    var locationManager: CLLocationManager?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager = CLLocationManager()\n        \n        if (locationManager != NSNull()) {\n            locationManager?.delegate = self\n        \n            locationManager?.requestAlwaysAuthorization()\n            \n            \n            let status = CLLocationManager.authorizationStatus()\n            switch status{\n            case .Restricted, .Denied:\n                break\n            case .NotDetermined:\n                // iOS8\u3067\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n                if ((locationManager?.respondsToSelector(\"requestWhenInUseAuthorization\")) != nil){\n                    locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n                    locationManager?.requestWhenInUseAuthorization()\n                    locationManager?.startUpdatingLocation()\n                }else{\n                    locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n                    locationManager?.startUpdatingLocation()\n                }\n            case .AuthorizedWhenInUse, .AuthorizedAlways:\n                // \u5f93\u6765\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n                locationManager?.startUpdatingLocation()\n            default:\n                break\n            }\n        }\n    }\n    \n    override func viewWillAppear(animated: Bool) {\n        locationManager?.startUpdatingLocation()\n    }\n    \n    \n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n\n    func locationManager(manager: CLLocationManager, didUpdateToLocation newLocation: CLLocation, fromLocation oldLocation: CLLocation) {\n        \n        let latitude = newLocation.coordinate.latitude\n        let longitude = newLocation.coordinate.longitude\n        let location = CLLocationCoordinate2DMake(latitude,longitude)\n        \n        mkMapView.setCenterCoordinate(location, animated: true)\n        \n        var region: MKCoordinateRegion = mkMapView.region\n        region.center = location\n        region.span.latitudeDelta = 0.02\n        region.span.longitudeDelta = 0.02\n        \n        let pointAnnotation: MKPointAnnotation = MKPointAnnotation()\n        \n        pointAnnotation.coordinate = location\n        pointAnnotation.title = \"\u73fe\u5728\u5730\"\n        \n        mkMapView.addAnnotation(pointAnnotation)\n        mkMapView.setRegion(region, animated: true)\n        \n        //\u5730\u56f3\u306e\u5f62\u5f0f\n        mkMapView.mapType = MKMapType.Standard\n        locationManager?.stopUpdatingLocation()\n    }\n    \n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    }\n```\n  ----------------\n    \n      \n\u3053\u306e\u307e\u307e\u3060\u3068\u7537\u6599\u7406\u3059\u304e\u308b\u306e\u3067\u3001\u5c11\u3057\u7d30\u304b\u304f\u523b\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n  \n    \n  ```swift:\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u8a8d\u8a3c\n  // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u78ba\u8a8d\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3002\u5fc5\u9808\u3002      \n  locationManager?.requestAlwaysAuthorization()\n            \n            \n  let status = CLLocationManager.authorizationStatus()\n    // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u8a8d\u8a3c\u72b6\u614b\u3067\u5206\u5c90\n    switch status{\n      case .Restricted, .Denied:\n           break\n    case .NotDetermined:\n         if ((locationManager?.respondsToSelector(\"requestWhenInUseAuthorization\")) != nil){\n            // iOS8\u3067\u306finfo.plist\u306b\"requestWhenInUseAuthorization\"\u304b\u3001\"requestAlwaysAuthorization\"\u3092\u8a18\u8f09\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n            // requestWhenInUseAuthorization:\u8d77\u52d5\u4e2d\u306e\u307f\u4f7f\u7528\u3001requestAlwaysAuthorization:\u3044\u3064\u3067\u3082\u4f7f\u7528\u3067\u304d\u308b\u3002\n            \n            // \u7cbe\u5ea6\u306e\u6307\u5b9a\n            locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n            locationManager?.requestWhenInUseAuthorization()\n            // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u958b\u59cb\n            locationManager?.startUpdatingLocation()\n         }else{\n              locationManager?.desiredAccuracy = kCLLocationAccuracyBestForNavigation\n              locationManager?.startUpdatingLocation()\n         }\n    case .AuthorizedWhenInUse, .AuthorizedAlways:\n         // \u5f93\u6765\u306e\u4f4d\u7f6e\u60c5\u5831\u8ffd\u8de1\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u65b9\u6cd5\n         locationManager?.startUpdatingLocation()\n    default:\n         break\n    }\n  ```\n  \n\u3053\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3001\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u306e\u305f\u3081\u306eAuthorization\u3068\u4f4d\u7f6e\u60c5\u5831\u306e\u53d6\u5f97\u958b\u59cb\u304c\u3067\u304d\u308b\u3002\n  \n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u304c\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u958b\u59cb\u5f8c\u306e\u51e6\u7406\u306b\u3042\u305f\u308b\u3002\n  \n  ```swift:\n  // \u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002Android\u3067\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304b\u3082\u3002\n  func locationManager(manager: CLLocationManager, didUpdateToLocation newLocation: CLLocation, fromLocation oldLocation: CLLocation) {\n        // \u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u7def\u5ea6\u7d4c\u5ea6\n        let latitude = newLocation.coordinate.latitude\n        let longitude = newLocation.coordinate.longitude\n        let location = CLLocationCoordinate2DMake(latitude,longitude)\n        \n        // \u8868\u793a\u3059\u308b\u30de\u30c3\u30d7\u306e\u4e2d\u5fc3\u3092\u3001\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u30dd\u30a4\u30f3\u30c8\u306b\u6307\u5b9a\n        mkMapView.setCenterCoordinate(location, animated: true)\n        \n        // \u8868\u793a\u3059\u308b\u9818\u57df\u3092\u8a2d\u5b9a\u3059\u308b\n        var region: MKCoordinateRegion = mkMapView.region\n        // \u9818\u57df\u8a2d\u5b9a\u306e\u4e2d\u5fc3\n        region.center = location\n        // \u8868\u793a\u3059\u308b\u9818\u57df\u306e\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4fc2\u6570\n        region.span.latitudeDelta = 0.02\n        region.span.longitudeDelta = 0.02\n        \n        // \u30d4\u30f3\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n        let pointAnnotation: MKPointAnnotation = MKPointAnnotation()\n        \n        // \u30d4\u30f3\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u305f\u4f4d\u7f6e\u60c5\u5831\u306e\u4f4d\u7f6e\u306b\u8a2d\u5b9a\n        pointAnnotation.coordinate = location\n        // \u30d4\u30f3\u3092\u30bf\u30c3\u30d7\u3057\u305f\u969b\u306b\u8868\u793a\u3055\u308c\u308b\u5439\u304d\u51fa\u3057\u306e\u5185\u5bb9\n        pointAnnotation.title = \"\u73fe\u5728\u5730\"\n        \n        // \u8a2d\u5b9a\u3057\u305f\u30d4\u30f3\u3092\u30de\u30c3\u30d7\u4e0a\u306b\u53cd\u6620\n        mkMapView.addAnnotation(pointAnnotation)\n        // \u6c7a\u5b9a\u3057\u305f\u8868\u793a\u8a2d\u5b9a\u3092MapView\u306b\u9069\u7528\n        mkMapView.setRegion(region, animated: true)\n        \n        // \u5730\u56f3\u306e\u5f62\u5f0f\u3002Standard\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5730\u56f3\u3002Sattelite\u304c\u822a\u7a7a\u5730\u56f3\u3002\n        mkMapView.mapType = MKMapType.Standard\n        // \u4f4d\u7f6e\u60c5\u5831\u306f\u65e2\u306b\u53d6\u5f97\u3057\u305f\u306e\u3067\u3001\u3053\u308c\u4ee5\u964d\u53d6\u5f97\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u3092\u505c\u6b62\n        locationManager?.stopUpdatingLocation()\n    }\n    \n    // \u4f4d\u7f6e\u60c5\u5831\u53d6\u5f97\u304c\u5931\u6557\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b\u3002\n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    }\n  ```\n  \n  \u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u5f62\u3002\u81ea\u5206\u306e\u4f4d\u7f6e\u306b\u30d4\u30f3\u3092\u7acb\u3066\u308b\u3068\u304b\u3092\u5fd8\u308c\u305f\u306e\u3067\u3001\u6b21\u306f\u305d\u308c\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3059\u308b\u4e88\u5b9a\u3002\n", "tags": ["Swift", "map", "iOS"]}