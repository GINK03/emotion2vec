{"tags": ["rust"], "context": "Rust \u306f\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u8a00\u8a9e\u3060\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u69cb\u9020\u4f53\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6240\u6709\u6a29\u3068\u751f\u5b58\u72b6\u614b\uff08\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\uff09\u3092\u5206\u6790\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9069\u5207\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30e1\u30e2\u30ea\u304b\u3089\u524a\u9664\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u4ed5\u7d44\u307f\u306f\u3068\u3066\u3082\u826f\u304f\u3067\u304d\u3066\u3044\u308b\u304c\u3001\u6642\u3005\u3001\u524a\u9664\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u958b\u767a\u8005\u304c\u81ea\u5206\u3067\u5236\u5fa1\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3002\n\u7279\u306b\u305d\u308c\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304c\u3001FFI\uff08\u4ed6\u8a00\u8a9e\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff09\u7d4c\u7531\u3067\u3001Rust \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4ed6\u306e\u8a00\u8a9e\u306b\u6e21\u3057\u305f\u3044\u6642\u3060\u308d\u3046\u3002\u3053\u306e\u5834\u5408\u3001\u4ed6\u8a00\u8a9e\u306b\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u3053\u3068\u306b\u306a\u308b\u304c\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u5206\u6790\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4efb\u305b\u308b\u3068\u3001Rust \u306e\u95a2\u6570\u3092\u629c\u3051\u305f\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5bff\u547d\u304c\u5c3d\u304d\u305f\u3068\u5224\u65ad\u3055\u308c\u3066\u3001\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u3053\u308c\u304c\u8d77\u3053\u308b\u3068\u3001\u4ed6\u8a00\u8a9e\u306b\u6e21\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u306f\u3001\u53c2\u7167\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u72b6\u614b\u3001\u3044\u308f\u3086\u308b\u300c\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u300d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u7c21\u5358\u306a\u4f8b\u3092\u4f7f\u3063\u3066\u3001\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u304c\u4f5c\u3089\u308c\u3066\u3057\u307e\u3046\u60aa\u3044\u3084\u308a\u65b9\u3068\u3001\u305d\u308c\u304c\u4f5c\u3089\u308c\u306a\u3044\u3001\u6b63\u3057\u3044\u3084\u308a\u65b9\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Arch Linux \u4e0a\u306e Rust 1.8.0 \u5b89\u5b9a\u7248\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3042\u308b\u3002Rust 1.4.0 \u304b\u3001\u305d\u308c\u4ee5\u964d\u306a\u3089\u3001\u5909\u66f4\u306a\u3057\u3067\u52d5\u304f\u306f\u305a\u3060\u3002\n% rustc --version --verbose\nrustc 1.8.0 (db2939409 2016-04-11)\nbinary: rustc\ncommit-hash: db2939409db26ab4904372c82492cd3488e4c44e\ncommit-date: 2016-04-11\nhost: x86_64-unknown-linux-gnu\nrelease: 1.8.0\n\n% uname -a\nLinux mini-arch 4.5.3-1-ARCH #1 SMP PREEMPT Sat May 7 20:43:57 CEST 2016 x86_64 GNU/Linux\n\n\nFFI \u306e\u4f8b\n\u7c21\u5358\u306a\u4f8b\u3067\u5b9f\u9a13\u3057\u3066\u307f\u3088\u3046\u3002\u4ee5\u4e0b\u306e Rust \u306e\u69cb\u9020\u4f53\u3092\u4ed6\u8a00\u8a9e\u306b\u6e21\u3057\u3066\u307f\u308b\u3002\n\nmain.rs\n#[derive(Debug)]\npub struct MyStruct {\n    string: String,\n    vec: Vec<i32>,\n}\n\nimpl MyStruct {\n    fn new() -> Self {\n        MyStruct {\n            string: \"Hello\".to_owned(),\n            vec: vec![1, 2, 3],\n        }\n    }\n}\n\n\n\u4ee5\u4e0b\u304c\u4f7f\u3046\u5074\uff08\u4ed6\u8a00\u8a9e\u5074\uff09\u306e\u30b3\u30fc\u30c9\u3060\u3002\u3063\u3066\u3001\u3069\u3046\u898b\u3066\u3082 Rust \u306e\u30b3\u30fc\u30c9\u306a\u306e\u3060\u304c\u3002\u3053\u3053\u3067\u306f Rust \u3060\u3051\u3067\u5b9f\u9a13\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u3042\u3048\u3066 Rust \u3067\u66f8\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u304c\u672c\u5f53\u306f\u4ed6\u306e\u8a00\u8a9e\u3001\u4f8b\u3048\u3070 C\u3001Python\u3001Ruby\u3001JavaScript\uff08Node.js\uff09\u3068\u304b\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u3001\u81ea\u7531\u306b\u60f3\u50cf\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3002\uff08Python \u304b\u3089\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u3082\u3001\u6700\u5f8c\u306b\u8ffd\u8a18\u3057\u307e\u3057\u305f\uff09\n\nmain.rs\nfn main() {\n    // MyStruct \u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u308c\u3092\u6307\u3059\u751f\u30dd\u30a4\u30f3\u30bf *mut MyStruct \u3092\u5f97\u308b\n    let p = make_mystruct();\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\n    print_mystruct(p);\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\n    update_mystruct(p);\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\n    print_mystruct(p);\n\n    // MyStruct \u3092\u524a\u9664\u3059\u308b\n    destroy_mystruct(p);\n}\n\n\n\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u5074\u306e\u95a2\u6570\u306f\u3001Rust \u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u306b\u306a\u308b\u3002make_mystruct() \u306f MyStruct \u69cb\u9020\u4f53\u3092\u4f5c\u308a\u3001\u751f\u30dd\u30a4\u30f3\u30bf *mut MyStruct \u3092\u8fd4\u3059\u3002\u6700\u5f8c\u306e destroy_mystruct() \u306f\u69cb\u9020\u4f53\u3092\u524a\u9664\u3059\u308b\u3002\n\u305d\u306e\u9593\u306b\u3042\u308b print_mystruct() \u3068 update_mystruct() \u306f\u3001\u69cb\u9020\u4f53\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u305f\u308a\u3001\u66f4\u65b0\u3057\u305f\u308a\u3059\u308b\u95a2\u6570\u3060\u3002\u3053\u306e\uff12\u3064\u306e\u95a2\u6570\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn print_mystruct(p: *const MyStruct) {\n    println!(\"{:?}\", unsafe { &*p });\n}\n\n#[no_mangle]\npub extern \"C\" fn update_mystruct(p: *mut MyStruct) {\n    unsafe {\n        (*p).string.push_str(\", world!\");\n        (*p).vec.push(4);\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u751f\u30dd\u30a4\u30f3\u30bf\uff08*const \u3084 *mut\uff09\u306e\u53c2\u7167\u5916\u3057\u306f\u3001unsafe \u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u6240\u6709\u6a29\u3084\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u8ffd\u8de1\u306f\u884c\u308f\u308c\u305a\u3001\u307e\u305f\u3001null \u5024\u3082\u8a31\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u53c2\u7167\u5916\u3057\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3067\u304d\u306a\u3044\u305f\u3081\u3060\u3002\u3082\u3057\u751f\u30dd\u30a4\u30f3\u30bf\u304c\u3001\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u3084\u3001null \u30dd\u30a4\u30f3\u30bf\u3060\u3063\u305f\u308a\u3057\u305f\u3089\u3001\u53c2\u7167\u5916\u3057\u306e\u969b\u306b\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\nFFI \u306b\u304a\u3051\u308b\u69cb\u9020\u4f53\u306e\u9593\u9055\u3063\u305f\u6e21\u3057\u304b\u305f\n\u672c\u984c\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3088\u3046\u3002\u307e\u305a\u306f\u3001\u554f\u984c\u306e\u8d77\u3053\u308b\u3084\u308a\u65b9\u3067\u5b9f\u88c5\u3059\u308b\u3002make_mystruct() \u3067\u306f\u3001MyStruct \u3078\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 &mut \u3092\u3068\u308a\u3001\u305d\u308c\u3092\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u751f\u30dd\u30a4\u30f3\u30bf *mut MyStruct \u3078\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u8fd4\u3057\u3066\u307f\u3088\u3046\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let mut s = MyStruct::new();\n    &mut s as *mut MyStruct\n}\n\n\ndestroy_mystruct() \u306f\u3001\u4f55\u3092\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u306a\u306b\u3082\u66f8\u3044\u3066\u3044\u306a\u3044\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(_p: *mut MyStruct) {\n    // ???\n}\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u660e\u3089\u304b\u306b\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3060\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u3067\u304d\u3066\u3057\u307e\u3046\u3002\u306a\u305c\u306a\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306b\u95a2\u9023\u3059\u308b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5206\u6790\u3092\u3057\u306a\u3044\u304b\u3089\u3060\u3002\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n% cargo run\n   Compiling raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nAn unknown error occurred\n\nTo learn more, run the command again with --verbose.\n\n\u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u3068\u306e\u3053\u3068\u3002\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u898b\u308b\u306b\u306f --verbose \u3092\u4ed8\u3051\u308c\u3070\u3044\u3044\u3002\n% cargo run --verbose\n       Fresh raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nProcess didn't exit successfully: `target/debug/raw-pointers` (signal: 11, SIGSEGV: invalid memory reference)\n\nSIGSEGV\u3001\u3064\u307e\u308a\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd \u3068\u3044\u3046\u3001\u30e1\u30e2\u30ea\u3078\u306e\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u304c\u539f\u56e0\u3067\u843d\u3061\u3066\u3044\u308b\u3002\u3053\u3046\u306a\u308b\u306e\u306f\u3001make_mystruct() \u3092\u629c\u3051\u308b\u6642\u306b\u3001MyStruct \u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u5909\u6570 s \u304c\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u305f\u3081\u3060\u3002MyStruct \u306f\u305d\u306e\u6642\u70b9\u3067\u524a\u9664\u3055\u308c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u30e1\u30e2\u30ea\u9818\u57df\u306f\u3001\u89e3\u653e\u6e08\u307f\u3068\u306a\u308b\u3002\n\nFFI \u306b\u304a\u3051\u308b\u69cb\u9020\u4f53\u306e\u6b63\u3057\u3044\u6e21\u3057\u304b\u305f\n\u4eca\u5ea6\u306f\u6b63\u3057\u3044\u65b9\u6cd5\u3067\u5b9f\u88c5\u3059\u308b\u3002\u307e\u305a\u3001Rust \u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b9\u30bf\u30c3\u30af\u306b\u7f6e\u304f \u304c\u3001\u305d\u306e\u307e\u307e\u3060\u3068\u3001\u95a2\u6570\u3092\u629c\u3051\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30b9\u30bf\u30c3\u30af\u304c\u5dfb\u304d\u623b\u3055\u308c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u3053\u3053\u3067\u306f\u69cb\u9020\u4f53\uff09\u3092 Box \u5316\u3059\u308b\u3053\u3068\u3067\u3001\u30d2\u30fc\u30d7\u306b\u7f6e\u3053\u3046\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    // ...\n}\n\n\n\u3053\u306e\u4f8b\u3067\u306f s \u306f Box<MyStruct> \u578b\u306b\u306a\u3063\u3066\u3044\u308b\u3002Box \u306e\u5b9f\u4f53\u306f\u30dd\u30a4\u30f3\u30bf\uff08\u3068\u3001\u305d\u308c\u3068\u5bfe\u3092\u306a\u3059\u3001\u30d2\u30fc\u30d7\u4e0a\u306b\u7f6e\u304b\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306a\u308f\u3051\u3060\u304c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u3068\u9055\u3044\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u6240\u6709\u6a29\u3068\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u304c\u8ffd\u8de1\u3055\u308c\u308b\u3002\u3053\u306e Box \u30dd\u30a4\u30f3\u30bf\u3092\u3001\u751f\u30dd\u30a4\u30f3\u30bf *mut MyStruct \u578b\u306b\u5909\u63db\u3059\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u8ffd\u8de1\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u3001\u5f93\u3063\u3066\u3001\u69cb\u9020\u4f53\u306e\u524a\u9664\u3092\u56de\u907f\u3067\u304d\u308b\u3002\u8a66\u3057\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u307f\u3088\u3046\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    s as *mut MyStruct\n}\n\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u3002\n% cargo build\n   Compiling raw-pointers v0.1.0 (file:///usr/home/tatsuya/workhub/master/misc/qiita/rust/raw-pointers)\nsrc/main.rs:45:5: 45:23 error: non-scalar cast: `Box<MyStruct>` as `*mut MyStruct`\nsrc/main.rs:45     s as *mut MyStruct\n                   ^~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nerror: Could not compile `raw-pointers`.\n\nTo learn more, run the command again with --verbose.\n\n\u3053\u308c\u3092\u53ef\u80fd\u306b\u3059\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u306f\u3001std::mem::transmute() \u3067\u5f37\u5236\u7684\u306b\u578b\u5909\u63db\u3059\u308b\u3053\u3068\u3060\u3002transmute \u306f\u3001\u5909\u63db\u524d\u5f8c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3055\u3048\u4e00\u81f4\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u578b\u306b\u3082\u5909\u63db\u3067\u304d\u308b unsafe \u306a\u95a2\u6570\u3060\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    unsafe { std::mem::transmute(s) }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u3070\u3001Rust \u306e\u578b\u63a8\u8ad6\u306b\u3088\u3063\u3066\u3001s \u306e\u578b\u3067\u3042\u308b Box<MyStruct> \u304b\u3089\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3067\u3042\u308b *mut MyStruct \u3078\u5909\u63db\u3055\u308c\u308b\u3002\n\u3055\u3066\u3001\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3060\u304c\u3001\u3053\u306e\u5909\u63db\u306f FFI \u3067\u983b\u51fa\u3059\u308b\u306e\u3067\u3001Rust 1.4 \u304b\u3089\u306f\u3001Box::into_raw() \u3068\u3044\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u305f\u3002\u306a\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    Box::into_raw(s)\n}\n\n\ninto_raw() \u306e\u5b9f\u88c5 \u3092\u898b\u308b\u3068\u3001\u305f\u3057\u304b\u306b transmute \u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\n\nliballoc/boxed.rs\nuse core::mem;\n\nimpl<T: ?Sized> Box<T> {\n    // ...\n\n    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n    #[inline]\n    pub fn into_raw(b: Box<T>) -> *mut T {\n        unsafe { mem::transmute(b) }\n    }\n}\n\n\n\u6b21\u306f destroy_mystruct() \u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002\u5148\u307b\u3069\u306e make_mystruct() \u3067\u306f\u3001Box \u304b\u3089\u751f\u30dd\u30a4\u30f3\u30bf\u3078\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u69cb\u9020\u4f53\u306e\u524a\u9664\u3092\u56de\u907f\u3057\u305f\u304c\u3001\u4eca\u5ea6\u306f\u305d\u308c\u3068\u9006\u306e\u3053\u3068\u3092\u3059\u308c\u3070\u3044\u3044\u3002\u3064\u307e\u308a\u3001transmute \u3067 Box<MyStruct> \u3078\u623b\u3057\u3066\u304b\u3089\u95a2\u6570\u304b\u3089\u629c\u3051\u308c\u3070\u3001\u69cb\u9020\u4f53\u304c\u524a\u9664\u3067\u304d\u308b\u3002\n\u3053\u3061\u3089\u3082 Rust 1.4 \u304b\u3089 Box::from_raw() \u3068\u3044\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u305f\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\nmain.rs\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(p: *mut MyStruct) {\n    unsafe { Box::from_raw(p) };\n}\n\n\nfrom_raw() \u306e\u5b9f\u88c5 \u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nliballoc/boxed.rs\nimpl<T: ?Sized> Box<T> {\n    // ...\n\n    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n    #[inline]\n    pub unsafe fn from_raw(raw: *mut T) -> Self {\n        mem::transmute(raw)\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306b from_raw() \u306f Box \u306b\u623b\u3063\u305f\u69cb\u9020\u4f53\u3092\u8fd4\u3057\u3066\u304f\u308b\u306e\u3067\u3001\u547c\u3073\u51fa\u3057\u5074\u306e destroy_mystruct() \u3067\u306f\u3001\u305d\u308c\u3092\u6d88\u8cbb\u3059\u308c\u3070\u3044\u3044\u3002\u3064\u307e\u308a destroy_mystruct() \u304c\u3001MyStruct \u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3055\u306a\u3051\u308c\u3070\u3001\u6d88\u8cbb\uff08\uff1d\u524a\u9664\uff09\u3067\u304d\u308b\u3002\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n% cargo run\n   Compiling raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n\n\u4eca\u5ea6\u306f\u3046\u307e\u304f\u5b9f\u884c\u3067\u304d\u305f\u3002\n\u306a\u304a\u3001from_raw() \u304c unsafe \u306b\u306a\u3063\u3066\u3044\u308b\u7406\u7531\u306f\u3001\u4f8b\u3048\u3070\u3001\u3053\u306e\u95a2\u6570\u3092\u3001\u540c\u3058\u751f\u30dd\u30a4\u30f3\u30bf\u306b\uff12\u56de\u9069\u7528\u3057\u305f\u308a\u3059\u308b\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\uff12\u91cd\u524a\u9664\u304c\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3089\u3060\u3002\n\n\u8ffd\u8a18\uff1aPython \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\n\uff08Rust \u306e main \u95a2\u6570\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3060\u3051\u3060\u3068\u8aac\u5f97\u529b\u306b\u6b20\u3051\u308b\u306e\u3067\u3001Python \u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u3082\u8ffd\u8a18\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff09\n\u5b9f\u969b\u306b\u4ed6\u8a00\u8a9e\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3088\u3046\u3002Cargo.toml \u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\nCargo.toml\n[lib]\nname = \"mystruct\"\ncrate-type = [\"dylib\"]\n\n\n\u307e\u305f\u3001main.rs \u3092\u3001lib.rs \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3066\u3001main\u95a2\u6570\u3092\u524a\u9664\u3059\u308b\u3002\ncargo build --release \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b libmystruct.so \u304c\u4f5c\u3089\u308c\u308b\u3002\n% tree\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 debug\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 release\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 libmystruct.so\n        \u2514\u2500\u2500 ...\n\nPython \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nmystruct.py\nfrom ctypes import cdll, c_void_p\n\nlib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n\nlib.make_mystruct.restype = c_void_p\nlib.print_mystruct.argtypes = [c_void_p]\nlib.update_mystruct.argtypes = [c_void_p]\nlib.destroy_mystruct.argtypes = [c_void_p]\n\np = lib.make_mystruct()\nlib.print_mystruct(p)\nlib.update_mystruct(p)\nlib.print_mystruct(p)\nlib.destroy_mystruct(p)\n\n\n\u5b9f\u884c\u3057\u3088\u3046\u3002\n% python mystruct.py \nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n%\n\nPython 2.7.11 \u3068 3.5.1 \u3067\u8a66\u3057\u3066\u307f\u305f\u304c\u3001\u3069\u3061\u3089\u3082\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u305f\u3002\n\u307e\u305f\u3001destroy_mystruct() \u3092\uff12\u91cd\u306b\u547c\u3076\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304b\u3089\u3001\u671f\u5f85\u901a\u308a\u3001\u3053\u306e\u95a2\u6570\u3067\u69cb\u9020\u4f53\u306e\u524a\u9664\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n% python\nPython 3.5.1 (default, Mar  3 2016, 09:29:07)\n[GCC 5.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from ctypes import cdll, c_void_p\n>>> lib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n>>> lib.make_mystruct.restype = c_void_p\n>>> lib.print_mystruct.argtypes = [c_void_p]\n>>> lib.update_mystruct.argtypes = [c_void_p]\n>>> lib.destroy_mystruct.argtypes = [c_void_p]\n>>> p = lib.make_mystruct()\n>>> lib.print_mystruct(p)\nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\n2\n>>> lib.update_mystruct(p)\n3\n>>> lib.print_mystruct(p)\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n2\n>>> lib.destroy_mystruct(p)\n0\n>>> lib.destroy_mystruct(p)\nzsh: segmentation fault (core dumped)  python\n\n\n\u307e\u3068\u3081\n\nRust \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\uff08*const \u3068 *mut\uff09\u306b\u3064\u3044\u3066\u3001\u6240\u6709\u6a29\u3068\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u8ffd\u8de1\u3057\u306a\u3044\u3002transmute \u3067 Box \u30dd\u30a4\u30f3\u30bf\u3092\u751f\u30dd\u30a4\u30f3\u30bf\u3078\u5909\u63db\u3059\u308b\u3068\u3001\u30d2\u30fc\u30d7\u306b\u7f6e\u304b\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524a\u9664\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308b\u3002\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3057\u305f\u3044\u6642\u306f\u3001transmute \u3067 Box \u30dd\u30a4\u30f3\u30bf\u306b\u623b\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u7ba1\u7406\u4e0b\u306b\u7f6e\u3051\u3070\u3044\u3044\u3002\u305f\u3060\u3057\u3001\uff12\u91cd\u524a\u9664\u3057\u306a\u3044\u3088\u3046\u6ce8\u610f\u3059\u308b\u3053\u3068\u3002\nRust 1.4 \u304b\u3089\u306f\u3001\u3053\u308c\u3092\u884c\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9 Box::into_raw() \u3068 Box::from_raw() \u304c \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\u4ed8\u9332\uff1a\u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\nCargo.toml \u306b lib \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\nCargo.toml\n[lib]\nname = \"mystruct\"\ncrate-type = [\"dylib\"]\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30d7\u30ed\u30b0\u30e9\u30e0\n\nsrc/lib.rs\n#[derive(Debug)]\npub struct MyStruct {\n    string: String,\n    vec: Vec<i32>,\n}\n\nimpl MyStruct {\n    fn new() -> Self {\n        MyStruct {\n            string: \"Hello\".to_owned(),\n            vec: vec![1, 2, 3],\n        }\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    Box::into_raw(s)\n}\n\n#[no_mangle]\npub extern \"C\" fn print_mystruct(p: *const MyStruct) {\n    println!(\"{:?}\", unsafe { &*p });\n}\n\n#[no_mangle]\npub extern \"C\" fn update_mystruct(p: *mut MyStruct) {\n    unsafe {\n        (*p).string.push_str(\", world!\");\n        (*p).vec.push(4);\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(p: *mut MyStruct) {\n    unsafe { Box::from_raw(p) };\n}\n\n\n\u5229\u7528\u8005\u5074\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\uff08Python \u306e\u5834\u5408\uff09\n\nmystruct.py\nfrom ctypes import cdll, c_void_p\n\nlib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n\nlib.make_mystruct.restype = c_void_p\nlib.print_mystruct.argtypes = [c_void_p]\nlib.update_mystruct.argtypes = [c_void_p]\nlib.destroy_mystruct.argtypes = [c_void_p]\n\np = lib.make_mystruct()\nlib.print_mystruct(p)\nlib.update_mystruct(p)\nlib.print_mystruct(p)\nlib.destroy_mystruct(p)\n\n\nRust \u306f\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u8a00\u8a9e\u3060\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u69cb\u9020\u4f53\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6240\u6709\u6a29\u3068\u751f\u5b58\u72b6\u614b\uff08\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\uff09\u3092\u5206\u6790\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9069\u5207\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30e1\u30e2\u30ea\u304b\u3089\u524a\u9664\u3059\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u4ed5\u7d44\u307f\u306f\u3068\u3066\u3082\u826f\u304f\u3067\u304d\u3066\u3044\u308b\u304c\u3001\u6642\u3005\u3001\u524a\u9664\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u958b\u767a\u8005\u304c\u81ea\u5206\u3067\u5236\u5fa1\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308b\u3002\n\n\u7279\u306b\u305d\u308c\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304c\u3001FFI\uff08\u4ed6\u8a00\u8a9e\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff09\u7d4c\u7531\u3067\u3001Rust \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4ed6\u306e\u8a00\u8a9e\u306b\u6e21\u3057\u305f\u3044\u6642\u3060\u308d\u3046\u3002\u3053\u306e\u5834\u5408\u3001\u4ed6\u8a00\u8a9e\u306b\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u3053\u3068\u306b\u306a\u308b\u304c\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u5206\u6790\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4efb\u305b\u308b\u3068\u3001Rust \u306e\u95a2\u6570\u3092\u629c\u3051\u305f\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5bff\u547d\u304c\u5c3d\u304d\u305f\u3068\u5224\u65ad\u3055\u308c\u3066\u3001\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u3053\u308c\u304c\u8d77\u3053\u308b\u3068\u3001\u4ed6\u8a00\u8a9e\u306b\u6e21\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u306f\u3001\u53c2\u7167\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u72b6\u614b\u3001\u3044\u308f\u3086\u308b\u300c\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u300d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u7c21\u5358\u306a\u4f8b\u3092\u4f7f\u3063\u3066\u3001\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u304c\u4f5c\u3089\u308c\u3066\u3057\u307e\u3046\u60aa\u3044\u3084\u308a\u65b9\u3068\u3001\u305d\u308c\u304c\u4f5c\u3089\u308c\u306a\u3044\u3001\u6b63\u3057\u3044\u3084\u308a\u65b9\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Arch Linux \u4e0a\u306e Rust 1.8.0 \u5b89\u5b9a\u7248\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3042\u308b\u3002Rust 1.4.0 \u304b\u3001\u305d\u308c\u4ee5\u964d\u306a\u3089\u3001\u5909\u66f4\u306a\u3057\u3067\u52d5\u304f\u306f\u305a\u3060\u3002\n\n```\n% rustc --version --verbose\nrustc 1.8.0 (db2939409 2016-04-11)\nbinary: rustc\ncommit-hash: db2939409db26ab4904372c82492cd3488e4c44e\ncommit-date: 2016-04-11\nhost: x86_64-unknown-linux-gnu\nrelease: 1.8.0\n\n% uname -a\nLinux mini-arch 4.5.3-1-ARCH #1 SMP PREEMPT Sat May 7 20:43:57 CEST 2016 x86_64 GNU/Linux\n```\n\n\n## FFI \u306e\u4f8b\n\n\u7c21\u5358\u306a\u4f8b\u3067\u5b9f\u9a13\u3057\u3066\u307f\u3088\u3046\u3002\u4ee5\u4e0b\u306e Rust \u306e\u69cb\u9020\u4f53\u3092\u4ed6\u8a00\u8a9e\u306b\u6e21\u3057\u3066\u307f\u308b\u3002\n\n```rust:main.rs\n#[derive(Debug)]\npub struct MyStruct {\n    string: String,\n    vec: Vec<i32>,\n}\n\nimpl MyStruct {\n    fn new() -> Self {\n        MyStruct {\n            string: \"Hello\".to_owned(),\n            vec: vec![1, 2, 3],\n        }\n    }\n}\n```\n\n\u4ee5\u4e0b\u304c\u4f7f\u3046\u5074\uff08\u4ed6\u8a00\u8a9e\u5074\uff09\u306e\u30b3\u30fc\u30c9\u3060\u3002\u3063\u3066\u3001\u3069\u3046\u898b\u3066\u3082 Rust \u306e\u30b3\u30fc\u30c9\u306a\u306e\u3060\u304c\u3002\u3053\u3053\u3067\u306f Rust \u3060\u3051\u3067\u5b9f\u9a13\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u3042\u3048\u3066 Rust \u3067\u66f8\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u304c\u672c\u5f53\u306f\u4ed6\u306e\u8a00\u8a9e\u3001\u4f8b\u3048\u3070 C\u3001Python\u3001Ruby\u3001JavaScript\uff08Node.js\uff09\u3068\u304b\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3060\u3068\u3001\u81ea\u7531\u306b\u60f3\u50cf\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3002\uff08Python \u304b\u3089\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u3082\u3001[\u6700\u5f8c\u306b\u8ffd\u8a18](http://qiita.com/tatsuya6502/items/b9801d92f71e24874c9d#%E8%BF%BD%E8%A8%98python-%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B)\u3057\u307e\u3057\u305f\uff09\n\n```rust:main.rs\nfn main() {\n    // MyStruct \u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u308c\u3092\u6307\u3059\u751f\u30dd\u30a4\u30f3\u30bf *mut MyStruct \u3092\u5f97\u308b\n    let p = make_mystruct();\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\n    print_mystruct(p);\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u66f4\u65b0\u3059\u308b\n    update_mystruct(p);\n\n    // MyStruct \u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\n    print_mystruct(p);\n\n    // MyStruct \u3092\u524a\u9664\u3059\u308b\n    destroy_mystruct(p);\n}\n```\n\n\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u5074\u306e\u95a2\u6570\u306f\u3001Rust \u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u306b\u306a\u308b\u3002`make_mystruct()` \u306f `MyStruct` \u69cb\u9020\u4f53\u3092\u4f5c\u308a\u3001\u751f\u30dd\u30a4\u30f3\u30bf `*mut MyStruct` \u3092\u8fd4\u3059\u3002\u6700\u5f8c\u306e `destroy_mystruct()` \u306f\u69cb\u9020\u4f53\u3092\u524a\u9664\u3059\u308b\u3002\n\n\u305d\u306e\u9593\u306b\u3042\u308b `print_mystruct()` \u3068 `update_mystruct()` \u306f\u3001\u69cb\u9020\u4f53\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u305f\u308a\u3001\u66f4\u65b0\u3057\u305f\u308a\u3059\u308b\u95a2\u6570\u3060\u3002\u3053\u306e\uff12\u3064\u306e\u95a2\u6570\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn print_mystruct(p: *const MyStruct) {\n    println!(\"{:?}\", unsafe { &*p });\n}\n\n#[no_mangle]\npub extern \"C\" fn update_mystruct(p: *mut MyStruct) {\n    unsafe {\n        (*p).string.push_str(\", world!\");\n        (*p).vec.push(4);\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u751f\u30dd\u30a4\u30f3\u30bf\uff08`*const` \u3084 `*mut`\uff09\u306e\u53c2\u7167\u5916\u3057\u306f\u3001`unsafe` \u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u6240\u6709\u6a29\u3084\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u8ffd\u8de1\u306f\u884c\u308f\u308c\u305a\u3001\u307e\u305f\u3001null \u5024\u3082\u8a31\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u53c2\u7167\u5916\u3057\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3067\u304d\u306a\u3044\u305f\u3081\u3060\u3002\u3082\u3057\u751f\u30dd\u30a4\u30f3\u30bf\u304c\u3001\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u3084\u3001null \u30dd\u30a4\u30f3\u30bf\u3060\u3063\u305f\u308a\u3057\u305f\u3089\u3001\u53c2\u7167\u5916\u3057\u306e\u969b\u306b\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n\n## FFI \u306b\u304a\u3051\u308b\u69cb\u9020\u4f53\u306e\u9593\u9055\u3063\u305f\u6e21\u3057\u304b\u305f\n\n\u672c\u984c\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3088\u3046\u3002\u307e\u305a\u306f\u3001\u554f\u984c\u306e\u8d77\u3053\u308b\u3084\u308a\u65b9\u3067\u5b9f\u88c5\u3059\u308b\u3002`make_mystruct()` \u3067\u306f\u3001MyStruct \u3078\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 `&mut` \u3092\u3068\u308a\u3001\u305d\u308c\u3092\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u751f\u30dd\u30a4\u30f3\u30bf `*mut MyStruct` \u3078\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u8fd4\u3057\u3066\u307f\u3088\u3046\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let mut s = MyStruct::new();\n    &mut s as *mut MyStruct\n}\n```\n\n`destroy_mystruct()` \u306f\u3001\u4f55\u3092\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u306a\u306b\u3082\u66f8\u3044\u3066\u3044\u306a\u3044\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(_p: *mut MyStruct) {\n    // ???\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u660e\u3089\u304b\u306b\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3060\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u3067\u304d\u3066\u3057\u307e\u3046\u3002\u306a\u305c\u306a\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306b\u95a2\u9023\u3059\u308b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5206\u6790\u3092\u3057\u306a\u3044\u304b\u3089\u3060\u3002\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```\n% cargo run\n   Compiling raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nAn unknown error occurred\n\nTo learn more, run the command again with --verbose.\n```\n\n\u4e0d\u660e\u306a\u30a8\u30e9\u30fc\u3068\u306e\u3053\u3068\u3002\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u898b\u308b\u306b\u306f `--verbose` \u3092\u4ed8\u3051\u308c\u3070\u3044\u3044\u3002\n\n```\n% cargo run --verbose\n       Fresh raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nProcess didn't exit successfully: `target/debug/raw-pointers` (signal: 11, SIGSEGV: invalid memory reference)\n```\n\nSIGSEGV\u3001\u3064\u307e\u308a\u3001[\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd](https://ja.wikipedia.org/wiki/%E3%82%BB%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%81%95%E5%8F%8D) \u3068\u3044\u3046\u3001\u30e1\u30e2\u30ea\u3078\u306e\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u304c\u539f\u56e0\u3067\u843d\u3061\u3066\u3044\u308b\u3002\u3053\u3046\u306a\u308b\u306e\u306f\u3001`make_mystruct()` \u3092\u629c\u3051\u308b\u6642\u306b\u3001`MyStruct` \u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u5909\u6570 `s` \u304c\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u305f\u3081\u3060\u3002`MyStruct` \u306f\u305d\u306e\u6642\u70b9\u3067\u524a\u9664\u3055\u308c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u30e1\u30e2\u30ea\u9818\u57df\u306f\u3001\u89e3\u653e\u6e08\u307f\u3068\u306a\u308b\u3002\n\n\n## FFI \u306b\u304a\u3051\u308b\u69cb\u9020\u4f53\u306e\u6b63\u3057\u3044\u6e21\u3057\u304b\u305f\n\n\u4eca\u5ea6\u306f\u6b63\u3057\u3044\u65b9\u6cd5\u3067\u5b9f\u88c5\u3059\u308b\u3002\u307e\u305a\u3001Rust \u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 [\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b9\u30bf\u30c3\u30af\u306b\u7f6e\u304f](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/the-stack-and-the-heap.html) \u304c\u3001\u305d\u306e\u307e\u307e\u3060\u3068\u3001\u95a2\u6570\u3092\u629c\u3051\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30b9\u30bf\u30c3\u30af\u304c\u5dfb\u304d\u623b\u3055\u308c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u3053\u3053\u3067\u306f\u69cb\u9020\u4f53\uff09\u3092 `Box` \u5316\u3059\u308b\u3053\u3068\u3067\u3001\u30d2\u30fc\u30d7\u306b\u7f6e\u3053\u3046\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    // ...\n}\n```\n\n\u3053\u306e\u4f8b\u3067\u306f `s` \u306f `Box<MyStruct>` \u578b\u306b\u306a\u3063\u3066\u3044\u308b\u3002Box \u306e\u5b9f\u4f53\u306f\u30dd\u30a4\u30f3\u30bf\uff08\u3068\u3001\u305d\u308c\u3068\u5bfe\u3092\u306a\u3059\u3001\u30d2\u30fc\u30d7\u4e0a\u306b\u7f6e\u304b\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306a\u308f\u3051\u3060\u304c\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u3068\u9055\u3044\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u6240\u6709\u6a29\u3068\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u304c\u8ffd\u8de1\u3055\u308c\u308b\u3002\u3053\u306e Box \u30dd\u30a4\u30f3\u30bf\u3092\u3001\u751f\u30dd\u30a4\u30f3\u30bf `*mut MyStruct` \u578b\u306b\u5909\u63db\u3059\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u8ffd\u8de1\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u3001\u5f93\u3063\u3066\u3001\u69cb\u9020\u4f53\u306e\u524a\u9664\u3092\u56de\u907f\u3067\u304d\u308b\u3002\u8a66\u3057\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u307f\u3088\u3046\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    s as *mut MyStruct\n}\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u3002\n\n```\n% cargo build\n   Compiling raw-pointers v0.1.0 (file:///usr/home/tatsuya/workhub/master/misc/qiita/rust/raw-pointers)\nsrc/main.rs:45:5: 45:23 error: non-scalar cast: `Box<MyStruct>` as `*mut MyStruct`\nsrc/main.rs:45     s as *mut MyStruct\n                   ^~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nerror: Could not compile `raw-pointers`.\n\nTo learn more, run the command again with --verbose.\n```\n\n\u3053\u308c\u3092\u53ef\u80fd\u306b\u3059\u308b\u552f\u4e00\u306e\u65b9\u6cd5\u306f\u3001`std::mem::transmute()` \u3067\u5f37\u5236\u7684\u306b\u578b\u5909\u63db\u3059\u308b\u3053\u3068\u3060\u3002transmute \u306f\u3001\u5909\u63db\u524d\u5f8c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3055\u3048\u4e00\u81f4\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u578b\u306b\u3082\u5909\u63db\u3067\u304d\u308b unsafe \u306a\u95a2\u6570\u3060\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    unsafe { std::mem::transmute(s) }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u3070\u3001Rust \u306e\u578b\u63a8\u8ad6\u306b\u3088\u3063\u3066\u3001`s` \u306e\u578b\u3067\u3042\u308b `Box<MyStruct>` \u304b\u3089\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3067\u3042\u308b `*mut MyStruct` \u3078\u5909\u63db\u3055\u308c\u308b\u3002\n\n\u3055\u3066\u3001\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u53ef\u80fd\u306b\u306a\u308b\u306e\u3060\u304c\u3001\u3053\u306e\u5909\u63db\u306f FFI \u3067\u983b\u51fa\u3059\u308b\u306e\u3067\u3001Rust 1.4 \u304b\u3089\u306f\u3001`Box::into_raw()` \u3068\u3044\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u305f\u3002\u306a\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    Box::into_raw(s)\n}\n```\n\n[`into_raw()` \u306e\u5b9f\u88c5](https://github.com/rust-lang/rust/blob/1.8.0/src/liballoc/boxed.rs#L273-L277) \u3092\u898b\u308b\u3068\u3001\u305f\u3057\u304b\u306b transmute \u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\n\n```rust:liballoc/boxed.rs\nuse core::mem;\n\nimpl<T: ?Sized> Box<T> {\n    // ...\n\n    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n    #[inline]\n    pub fn into_raw(b: Box<T>) -> *mut T {\n        unsafe { mem::transmute(b) }\n    }\n}\n```\n\n\u6b21\u306f `destroy_mystruct()` \u3092\u5b9f\u88c5\u3057\u3088\u3046\u3002\u5148\u307b\u3069\u306e `make_mystruct()` \u3067\u306f\u3001Box \u304b\u3089\u751f\u30dd\u30a4\u30f3\u30bf\u3078\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u69cb\u9020\u4f53\u306e\u524a\u9664\u3092\u56de\u907f\u3057\u305f\u304c\u3001\u4eca\u5ea6\u306f\u305d\u308c\u3068\u9006\u306e\u3053\u3068\u3092\u3059\u308c\u3070\u3044\u3044\u3002\u3064\u307e\u308a\u3001transmute \u3067 `Box<MyStruct>` \u3078\u623b\u3057\u3066\u304b\u3089\u95a2\u6570\u304b\u3089\u629c\u3051\u308c\u3070\u3001\u69cb\u9020\u4f53\u304c\u524a\u9664\u3067\u304d\u308b\u3002\n\n\u3053\u3061\u3089\u3082 Rust 1.4 \u304b\u3089 `Box::from_raw()` \u3068\u3044\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u305f\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\n```rust:main.rs\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(p: *mut MyStruct) {\n    unsafe { Box::from_raw(p) };\n}\n```\n\n[`from_raw()` \u306e\u5b9f\u88c5](https://github.com/rust-lang/rust/blob/1.8.0/src/liballoc/boxed.rs#L252-L256) \u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rust:liballoc/boxed.rs\nimpl<T: ?Sized> Box<T> {\n    // ...\n\n    #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n    #[inline]\n    pub unsafe fn from_raw(raw: *mut T) -> Self {\n        mem::transmute(raw)\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b `from_raw()` \u306f Box \u306b\u623b\u3063\u305f\u69cb\u9020\u4f53\u3092\u8fd4\u3057\u3066\u304f\u308b\u306e\u3067\u3001\u547c\u3073\u51fa\u3057\u5074\u306e `destroy_mystruct()` \u3067\u306f\u3001\u305d\u308c\u3092\u6d88\u8cbb\u3059\u308c\u3070\u3044\u3044\u3002\u3064\u307e\u308a `destroy_mystruct()` \u304c\u3001MyStruct \u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3055\u306a\u3051\u308c\u3070\u3001\u6d88\u8cbb\uff08\uff1d\u524a\u9664\uff09\u3067\u304d\u308b\u3002\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```\n% cargo run\n   Compiling raw-pointers v0.1.0 (file:///home/tatsuya/misc/qiita/rust/raw-pointers)\n     Running `target/debug/raw-pointers`\nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n```\n\n\u4eca\u5ea6\u306f\u3046\u307e\u304f\u5b9f\u884c\u3067\u304d\u305f\u3002\n\n\u306a\u304a\u3001`from_raw()` \u304c unsafe \u306b\u306a\u3063\u3066\u3044\u308b\u7406\u7531\u306f\u3001\u4f8b\u3048\u3070\u3001\u3053\u306e\u95a2\u6570\u3092\u3001\u540c\u3058\u751f\u30dd\u30a4\u30f3\u30bf\u306b\uff12\u56de\u9069\u7528\u3057\u305f\u308a\u3059\u308b\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\uff12\u91cd\u524a\u9664\u304c\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3089\u3060\u3002\n\n\n## \u8ffd\u8a18\uff1aPython \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\n\n\uff08Rust \u306e main \u95a2\u6570\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3060\u3051\u3060\u3068\u8aac\u5f97\u529b\u306b\u6b20\u3051\u308b\u306e\u3067\u3001Python \u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u3082\u8ffd\u8a18\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff09\n\n\u5b9f\u969b\u306b\u4ed6\u8a00\u8a9e\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3088\u3046\u3002Cargo.toml \u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n```toml:Cargo.toml\n[lib]\nname = \"mystruct\"\ncrate-type = [\"dylib\"]\n```\n\n\u307e\u305f\u3001main.rs \u3092\u3001lib.rs \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3066\u3001main\u95a2\u6570\u3092\u524a\u9664\u3059\u308b\u3002\n\n`cargo build --release` \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b `libmystruct.so` \u304c\u4f5c\u3089\u308c\u308b\u3002\n\n```\n% tree\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 debug\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n    \u2514\u2500\u2500 release\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 libmystruct.so\n        \u2514\u2500\u2500 ...\n```\n\nPython \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```python:mystruct.py\nfrom ctypes import cdll, c_void_p\n\nlib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n\nlib.make_mystruct.restype = c_void_p\nlib.print_mystruct.argtypes = [c_void_p]\nlib.update_mystruct.argtypes = [c_void_p]\nlib.destroy_mystruct.argtypes = [c_void_p]\n\np = lib.make_mystruct()\nlib.print_mystruct(p)\nlib.update_mystruct(p)\nlib.print_mystruct(p)\nlib.destroy_mystruct(p)\n```\n\n\u5b9f\u884c\u3057\u3088\u3046\u3002\n\n```\n% python mystruct.py \nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n%\n```\n\nPython 2.7.11 \u3068 3.5.1 \u3067\u8a66\u3057\u3066\u307f\u305f\u304c\u3001\u3069\u3061\u3089\u3082\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u305f\u3002\n\n\u307e\u305f\u3001`destroy_mystruct()` \u3092\uff12\u91cd\u306b\u547c\u3076\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304b\u3089\u3001\u671f\u5f85\u901a\u308a\u3001\u3053\u306e\u95a2\u6570\u3067\u69cb\u9020\u4f53\u306e\u524a\u9664\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n```pycon\n% python\nPython 3.5.1 (default, Mar  3 2016, 09:29:07)\n[GCC 5.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from ctypes import cdll, c_void_p\n>>> lib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n>>> lib.make_mystruct.restype = c_void_p\n>>> lib.print_mystruct.argtypes = [c_void_p]\n>>> lib.update_mystruct.argtypes = [c_void_p]\n>>> lib.destroy_mystruct.argtypes = [c_void_p]\n>>> p = lib.make_mystruct()\n>>> lib.print_mystruct(p)\nMyStruct { string: \"Hello\", vec: [1, 2, 3] }\n2\n>>> lib.update_mystruct(p)\n3\n>>> lib.print_mystruct(p)\nMyStruct { string: \"Hello, world!\", vec: [1, 2, 3, 4] }\n2\n>>> lib.destroy_mystruct(p)\n0\n>>> lib.destroy_mystruct(p)\nzsh: segmentation fault (core dumped)  python\n```\n\n\n## \u307e\u3068\u3081\n\n- Rust \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\uff08`*const` \u3068 `*mut`\uff09\u306b\u3064\u3044\u3066\u3001\u6240\u6709\u6a29\u3068\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u8ffd\u8de1\u3057\u306a\u3044\u3002transmute \u3067 Box \u30dd\u30a4\u30f3\u30bf\u3092\u751f\u30dd\u30a4\u30f3\u30bf\u3078\u5909\u63db\u3059\u308b\u3068\u3001\u30d2\u30fc\u30d7\u306b\u7f6e\u304b\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524a\u9664\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308b\u3002\n- \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3057\u305f\u3044\u6642\u306f\u3001transmute \u3067 Box \u30dd\u30a4\u30f3\u30bf\u306b\u623b\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u7ba1\u7406\u4e0b\u306b\u7f6e\u3051\u3070\u3044\u3044\u3002\u305f\u3060\u3057\u3001\uff12\u91cd\u524a\u9664\u3057\u306a\u3044\u3088\u3046\u6ce8\u610f\u3059\u308b\u3053\u3068\u3002\n- Rust 1.4 \u304b\u3089\u306f\u3001\u3053\u308c\u3092\u884c\u3046\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9 `Box::into_raw()` \u3068 `Box::from_raw()` \u304c [\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b](http://doc.rust-lang.org/alloc/boxed/struct.Box.html#method.from_raw)\u3002\n\n\n## \u4ed8\u9332\uff1a\u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\nCargo.toml \u306b lib \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n```toml:Cargo.toml\n[lib]\nname = \"mystruct\"\ncrate-type = [\"dylib\"]\n```\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```rust:src/lib.rs\n#[derive(Debug)]\npub struct MyStruct {\n    string: String,\n    vec: Vec<i32>,\n}\n\nimpl MyStruct {\n    fn new() -> Self {\n        MyStruct {\n            string: \"Hello\".to_owned(),\n            vec: vec![1, 2, 3],\n        }\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn make_mystruct() -> *mut MyStruct {\n    let s = Box::new(MyStruct::new());\n    Box::into_raw(s)\n}\n\n#[no_mangle]\npub extern \"C\" fn print_mystruct(p: *const MyStruct) {\n    println!(\"{:?}\", unsafe { &*p });\n}\n\n#[no_mangle]\npub extern \"C\" fn update_mystruct(p: *mut MyStruct) {\n    unsafe {\n        (*p).string.push_str(\", world!\");\n        (*p).vec.push(4);\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn destroy_mystruct(p: *mut MyStruct) {\n    unsafe { Box::from_raw(p) };\n}\n```\n\n\u5229\u7528\u8005\u5074\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\uff08Python \u306e\u5834\u5408\uff09\n\n```python:mystruct.py\nfrom ctypes import cdll, c_void_p\n\nlib = cdll.LoadLibrary(\"target/release/libmystruct.so\")\n\nlib.make_mystruct.restype = c_void_p\nlib.print_mystruct.argtypes = [c_void_p]\nlib.update_mystruct.argtypes = [c_void_p]\nlib.destroy_mystruct.argtypes = [c_void_p]\n\np = lib.make_mystruct()\nlib.print_mystruct(p)\nlib.update_mystruct(p)\nlib.print_mystruct(p)\nlib.destroy_mystruct(p)\n```\n"}