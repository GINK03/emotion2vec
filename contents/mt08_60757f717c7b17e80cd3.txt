{"context": "\n\n\u6982\u8981\n\n\nApache Mynewt \u3068\u3044\u3046IoT\u306e\u305f\u3081\u306eRTOS\u3092\u305f\u3081\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\u3002\n\u304c\u3001\u307e\u3060\u52d5\u4f5c\u3057\u3066\u306a\u3044 ... \u4f4e\u901f\u3067\u3046\u3054\u3044\u3066\u305f\u3063\u307d\u3044\u3002Clock\u5468\u308a\u306e\u4fee\u6b63\u304c\u5fc5\u8981??\u3068\u308a\u3042\u3048\u305a\u3001\u30a2\u30d7\u30ea\u5074\u306e\u30a6\u30a7\u30a4\u30c8\u3092\u77ed\u304f\u3059\u308b.\n(Ubuntu\u3067Jlink\u306e\u74b0\u5883\u3092\u3046\u3054\u304b\u3059\u306e\u304c\u9762\u5012...\u30d5\u30e9\u30c3\u30b7\u30e5\u306b\u713c\u3044\u3066\u3001\u30c7\u30d0\u30c3\u30b0\u4ee5\u964d..\u306f\u3001\u305d\u306e\u3046\u3061\u3002\u3002)\n\n\n\u74b0\u5883\n\nUbuntu 16.04 64bit\n\nBLENano nRF51822\u30d9\u30fc\u30b9\n\n\n\u624b\u9806\uff5e\u30c4\u30fc\u30eb\u985e\u306e\u6e96\u5099\n\nLinux\u306e\u30c4\u30fc\u30eb Set up toolchain for Linux\n\n#1. Install gcc/libc that will produce 32-bit executables:\nsudo apt-get install gcc-multilib libc6-i386\n#2. Install gdb\nsudo apt-get install gdb\n\n\nnewt\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Install newt tool on Linux\n\n#1.  Install git, libcurl\nsudo apt-get install git \nsudo apt-get install libcurl4-gnutls-dev \n#2. Install Go, the programming language\n## \u30ef\u30fc\u30af\ncd $HOME\nmkdir -p dev/go \ncd dev/go\nexport GOPATH=`pwd`\n## golang\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb.\nsudo apt-get install golang \n#3. Create local repository\ngo get mynewt.apache.org/newt/...\n#4. Build the Newt tool\ncd $GOPATH/src/mynewt.apache.org/newt/newt\ngo install\nls \"$GOPATH\"/bin/\n# PATH\u3092\u306f\u308b\nexport PATH=$GOPATH/bin:$PATH\n\n\nARM\u306e\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Install ARM cross arm tools for Linux\n\n# 16.04\u3060\u3068\u3044\u3089\u306a\u3044\uff1f\uff1f.\n#sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi \n#sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded \n#\nsudo apt-get update \nsudo apt-get install gcc-arm-none-eabi\nsudo apt-get install gdb-arm-none-eabi\n#\n# Install OpenOCD\n# sudo apt-get install openocd \n# 0.8.0\u3092\u5165\u308c\u308d\u3068\u66f8\u3044\u3066\u3042\u308b\u304c\u3001ubuntu16.04\u3060\u3068\u30010.9.0\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067\u3001\u3042\u3068\u3067\u691c\u8a0e...\n\n\n\u624b\u9806\uff5e\u6700\u521d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\nCreate Your First Mynewt Project\n... \u305d\u306e\u307e\u307e\u3084\u308c\u3070\u3088\u3044...Linux\u4e0a\u30670 1 0 1\u3068printf\u3055\u308c\u308b\u3002\n\n\u624b\u9806\uff5eBLENano\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u30fb\u30d3\u30eb\u30c9\n\n\nsudo apt-get install srecordsrec\u306e\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb. intel hex\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u306b\u4f7f\u7528.\n\ncd $HOME/dev\nrm -rfv myproj\n#\nnewt new myproj\ncd myproj\n#\n#vi project.yml\n# `project.yml`\u306e`0-latest` => `0.0.0`\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001develop\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u6301\u3063\u3066\u304f\u308b.\nsed -i 's/0-latest/0.0.0/' project.yml\n#\nnewt install -v\n# \u30d5\u30a1\u30a4\u30eb\u306f\u3001nrf51dk\u304b\u3089\u6301\u3063\u3066\u304f\u308b..\u305d\u3046\u3057\u306a\u3044\u3068\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u308b..\ncd repos/apache-mynewt-core/hw/bsp/nrf51-blenano/\ncp -v ../nrf51dk/*.ld ./.\ncp -v ../nrf51dk/src/*.c ./src\ncp -v ../nrf51dk/include/bsp/*.h ./include/bsp/\n#\n# vi include/bsp/bsp.h\n## - include/bsp/bsp.h___21\u304b\u308919\u306b\u5909\u66f4\u3002\n## //#define LED_BLINK_PIN   (21)\n## #define LED_BLINK_PIN   (19)\nsed -i 's/(21)/(19)/' include/bsp/bsp.h\n#\n#\ncd $HOME/dev/myproj\n#\n# \u30bf\u30fc\u30b2\u30c3\u30c8\u4f5c\u6210.\n#L\u30c1\u30ab \u30a2\u30d7\u30ea.\nnewt target create blink_blenano\nnewt target set blink_blenano app=apps/blinky\nnewt target set blink_blenano bsp=@apache-mynewt-core/hw/bsp/nrf51-blenano\nnewt target set blink_blenano build_profile=debug\n# \u30d6\u30fc\u30c8.\nnewt target create blenano_boot\nnewt target set  blenano_boot app=@apache-mynewt-core/apps/boot\nnewt target set  blenano_boot bsp=@apache-mynewt-core/hw/bsp/nrf51-blenano\nnewt target set  blenano_boot build_profile=optimized\n# \u78ba\u8a8d.\nnewt target show\n# \u30d3\u30eb\u30c9\nnewt build blenano_boot\nnewt build blink_blenano\n# \u7f72\u540d?\u3057\u3066\u3001\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\nnewt create-image blink_blenano 1.0.0\n\n#\n# HEX \u30a4\u30e1\u30fc\u30b8\u4f5c\u6210.\nsrec_cat bin/blenano_boot/apps/boot/boot.elf.bin -binary  -offset=0x0 -o boot.hex -intel\nsrec_cat bin/blink_blenano/apps/blinky/blinky.img -binary  -offset=0x8000 -o img.hex -intel\nsrec_cat boot.hex -intel img.hex -intel -o img_OUT.HEX -intel --line-length=44\n\n\n\n\u751f\u6210\u7269\n\n\nbin/blenano_boot/apps/boot/boot.elf  (?? 0x0000\u304b\u3089\u914d\u7f6e ??)\n\nbin/blink_blenano/apps/blinky/blinky.img (?? 0x8000\u304b\u3089\u914d\u7f6e ??)\nimg_OUT.hex => mbed\u306e\u30c9\u30e9\u30a4\u30d6\u306b\u653e\u308a\u8fbc\u3093\u3067\u713c\u304f\u3002\n\n\n5\u79d2\u304f\u3089\u3044\u3054\u3068\u306bL\u30c1\u30ab\u3059\u308b\u3002\n\n\u30a2\u30d7\u30ea\u5074\u306e\u30a6\u30a8\u30a4\u30c8\u3092\u304b\u3048\u308b...\n\nmyproj/apps/blinky/src/main.c\u306eblinky_task_handler()\n...\n    /* Wait one second */\n    os_time_delay(200); //<<<=== 1000\u304b\u3089 200\u304f\u3089\u3044\u306b\u3002\n\n    /* Toggle the LED */\n    hal_gpio_toggle(g_led_pin);\n...\n\n\n\n\n\n\u518d\u30d3\u30eb\u30c9\u3059\u308b\n# \u30d3\u30eb\u30c9\nnewt build blenano_boot\nnewt build blink_blenano\n# \u7f72\u540d?\u3057\u3066\u3001\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\nnewt create-image blink_blenano 1.0.0\n#\n# HEX \u30a4\u30e1\u30fc\u30b8\u4f5c\u6210.\nsrec_cat bin/blenano_boot/apps/boot/boot.elf.bin -binary  -offset=0x0 -o boot.hex -intel\nsrec_cat bin/blink_blenano/apps/blinky/blinky.img -binary  -offset=0x8000 -o img.hex -intel\nsrec_cat boot.hex -intel img.hex -intel -o img_OUT.HEX -intel --line-length=44\n\n\n=> \u3061\u3087\u3063\u3068\u306f\u3084\u304f\u306a\u3063\u305f\u3002\n\n\u305d\u306e\u4ed6\n\nBLE\u52d5\u304b\u3059\u306e\u306f\u3001\u307e\u3060\u5148\u3060\u306a... (\u3060\u308c\u304b...\nHEX\u3092\u4f5c\u3063\u3066\u3001mbed\u307f\u305f\u3044\u306b\u3084\u3044\u3066\u3046\u3054\u304b\u306a\u3044\u304b\u3001\u3001\u3068\u8a66\u3057\u305f\u304c\u3001\u3067\u304d\u306a\u304b\u3063\u305f\u3002 => 5\u500d\u304f\u3089\u3044\u9045\u3044\u30b9\u30d4\u30fc\u30c9\u3067L\u30c1\u30ab\u3057\u3066\u305f\u3063\u307d\u3044\n\nnewt\u306eloglevel\n\nsrc/mynewt.apache.org/newt/newtmgr/cli/logs.go\n...\nconst (\n        DEBUG    uint64 = 1\n        INFO     uint64 = 2\n        WARN     uint64 = 4\n        ERROR    uint64 = 8\n        CRITICAL uint64 = 10\n        /* Upto 7 custom loglevels */\n        PERUSER uint64 = 12\n)\n\nconst (\n        STREAM_LOG  uint64 = 0\n        MEMORY_LOG  uint64 = 1\n        STORAGE_LOG uint64 = 2\n)\n\nfunc LoglevelToString(ll uint64) string {\n        s := \"\"\n        switch ll {\n        case DEBUG:\n                s = \"DEBUG\"\n        case INFO:\n                s = \"INFO\"\n        case WARN:\n                s = \"WARN\"\n        case ERROR:\n                s = \"ERROR\"\n        case CRITICAL:\n                s = \"CRITICAL\"\n        case PERUSER:\n                s = \"PERUSER\"\n        default:\n                s = \"CUSTOM\"\n        }\n        return s\n}\n...\n\n\n\n\u30e1\u30e2\n\n\nmyproj/repos/apache-mynewt-core/libs/os/src/os_task.c\u306b\u5b9f\u4f53\nint \nos_task_init(struct os_task *t, char *name, os_task_func_t func, void *arg, \n        uint8_t prio, os_time_t sanity_itvl, os_stack_t *stack_bottom, \n        uint16_t stack_size)\n\n\n\nmyproj/apps/blinky/src/main.c\n...\n/* Init all tasks */\nvolatile int tasks_initialized;\nint init_tasks(void);\n\n/* Task 1 */\n#define BLINKY_TASK_PRIO (1)\n#define BLINKY_STACK_SIZE    OS_STACK_ALIGN(256)\n\nstruct os_task blinky_task;\nos_stack_t blinky_stack[BLINKY_STACK_SIZE];\nstatic volatile int g_task1_loops;\n\n/* For LED toggling */\nint g_led_pin;\n\nvoid\nblinky_task_handler(void *arg)\n{   \n    struct os_task *t;\n\n    g_led_pin = LED_BLINK_PIN;\n    hal_gpio_init_out(g_led_pin, 1);\n\n    while (1) {\n        t = os_sched_get_current_task();\n        assert(t->t_func == blinky_task_handler);\n\n        ++g_task1_loops;\n\n        /* Wait one second */\n        os_time_delay(1000);\n\n        /* Toggle the LED */\n        hal_gpio_toggle(g_led_pin);\n    }\n}\n\n/**\n * init_tasks\n *\n * Called by main.c after os_init(). This function performs initializations\n * that are required before tasks are running.\n *\n * @return int 0 success; error otherwise.\n */\nint\ninit_tasks(void)\n{\n    os_task_init(&blinky_task, \"blinky\", blinky_task_handler, NULL,\n            BLINKY_TASK_PRIO, OS_WAIT_FOREVER, blinky_stack, BLINKY_STACK_SIZE);\n\n    tasks_initialized = 1;\n\n    return 0;\n}\n\n/**\n * main\n *\n * The main function for the project. This function initializes the os, calls\n * init_tasks to initialize tasks (and possibly other objects), then starts the\n * OS. We should not return from os start.\n *\n * @return int NOTE: this function should never return!\n */\nint\nmain(int argc, char **argv)\n{\n    int rc;\n\n#ifdef ARCH_sim\n    mcu_sim_parse_args(argc, argv);\n#endif\n\n    os_init();\n\n    rc = init_tasks();\n    os_start();\n\n    /* os start should never return. If it does, this should be an error */\n    assert(0);\n\n    return rc;\n}\n\n\nPC\u4e0a\u3067\u306ehal_gpio_toggle\u306e\u3057\u304f\u307f ... printf\u3057\u3066\u308b\n\nmyproj/repos/apache-mynewt-core/hw/mcu/native/src/hal_gpio.c\n...\nvoid hal_gpio_write(int pin, int val)\n{\n    if (pin >= HAL_GPIO_NUM_PINS) {\n        return;\n    }\n    if (hal_gpio[pin].dir != OUTPUT) {\n        return;\n    }\n    hal_gpio[pin].val = (val != 0);\n    printf(\"hal_gpio set pin %2d to %1d\\r\", pin, hal_gpio[pin].val);\n    fflush(stdout);\n}\n\nint\nhal_gpio_read(int pin)\n{\n    if (pin >= HAL_GPIO_NUM_PINS) {\n        return -1;\n    }\n    return hal_gpio[pin].val;\n}\n\nint\nhal_gpio_toggle(int pin)\n{\n    int pin_state = (hal_gpio_read(pin) != 1);\n    hal_gpio_write(pin, pin_state);\n    return pin_state;\n}\n\n\n## \u6982\u8981\n- [Apache Mynewt](https://mynewt.apache.org/) \u3068\u3044\u3046IoT\u306e\u305f\u3081\u306eRTOS\u3092\u305f\u3081\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\u3002\n- \u304c\u3001<del>\u307e\u3060\u52d5\u4f5c\u3057\u3066\u306a\u3044</del> ... \u4f4e\u901f\u3067\u3046\u3054\u3044\u3066\u305f\u3063\u307d\u3044\u3002Clock\u5468\u308a\u306e\u4fee\u6b63\u304c\u5fc5\u8981??<br>\u3068\u308a\u3042\u3048\u305a\u3001\u30a2\u30d7\u30ea\u5074\u306e\u30a6\u30a7\u30a4\u30c8\u3092\u77ed\u304f\u3059\u308b.\n- <del>(Ubuntu\u3067Jlink\u306e\u74b0\u5883\u3092\u3046\u3054\u304b\u3059\u306e\u304c\u9762\u5012...\u30d5\u30e9\u30c3\u30b7\u30e5\u306b\u713c\u3044\u3066\u3001\u30c7\u30d0\u30c3\u30b0\u4ee5\u964d..\u306f\u3001\u305d\u306e\u3046\u3061\u3002\u3002)</del>\n\n## \u74b0\u5883\n- Ubuntu 16.04 64bit\n- [BLENano](http://redbearlab.com/blenano/) nRF51822\u30d9\u30fc\u30b9\n\n## \u624b\u9806\uff5e\u30c4\u30fc\u30eb\u985e\u306e\u6e96\u5099\n\n### Linux\u306e\u30c4\u30fc\u30eb [Set up toolchain for Linux](https://mynewt.apache.org/develop/os/get_started/native_tools/)\n\n```bash\n#1. Install gcc/libc that will produce 32-bit executables:\nsudo apt-get install gcc-multilib libc6-i386\n#2. Install gdb\nsudo apt-get install gdb\n```\n\n### `newt`\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb [Install newt tool on Linux](https://mynewt.apache.org/develop/newt/install/newt_linux/)\n\n```bash\n#1.  Install git, libcurl\nsudo apt-get install git \nsudo apt-get install libcurl4-gnutls-dev \n#2. Install Go, the programming language\n## \u30ef\u30fc\u30af\ncd $HOME\nmkdir -p dev/go \ncd dev/go\nexport GOPATH=`pwd`\n## golang\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb.\nsudo apt-get install golang \n#3. Create local repository\ngo get mynewt.apache.org/newt/...\n#4. Build the Newt tool\ncd $GOPATH/src/mynewt.apache.org/newt/newt\ngo install\nls \"$GOPATH\"/bin/\n# PATH\u3092\u306f\u308b\nexport PATH=$GOPATH/bin:$PATH\n```\n\n### ARM\u306e\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb [Install ARM cross arm tools for Linux](https://mynewt.apache.org/latest/os/get_started/cross_tools/)\n\n```bash\n# 16.04\u3060\u3068\u3044\u3089\u306a\u3044\uff1f\uff1f.\n#sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi \n#sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded \n#\nsudo apt-get update \nsudo apt-get install gcc-arm-none-eabi\nsudo apt-get install gdb-arm-none-eabi\n#\n# Install OpenOCD\n# sudo apt-get install openocd \n# 0.8.0\u3092\u5165\u308c\u308d\u3068\u66f8\u3044\u3066\u3042\u308b\u304c\u3001ubuntu16.04\u3060\u3068\u30010.9.0\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067\u3001\u3042\u3068\u3067\u691c\u8a0e...\n```\n\n## \u624b\u9806\uff5e\u6700\u521d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n[Create Your First Mynewt Project](https://mynewt.apache.org/latest/os/get_started/project_create/)\n\n ... \u305d\u306e\u307e\u307e\u3084\u308c\u3070\u3088\u3044...Linux\u4e0a\u30670 1 0 1\u3068printf\u3055\u308c\u308b\u3002\n\n## \u624b\u9806\uff5eBLENano\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u30fb\u30d3\u30eb\u30c9\n\n- `sudo apt-get install srecord`<br>srec\u306e\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb. intel hex\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u306b\u4f7f\u7528.\n\n\n```bash\ncd $HOME/dev\nrm -rfv myproj\n#\nnewt new myproj\ncd myproj\n#\n#vi project.yml\n# `project.yml`\u306e`0-latest` => `0.0.0`\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001develop\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u6301\u3063\u3066\u304f\u308b.\nsed -i 's/0-latest/0.0.0/' project.yml\n#\nnewt install -v\n# \u30d5\u30a1\u30a4\u30eb\u306f\u3001nrf51dk\u304b\u3089\u6301\u3063\u3066\u304f\u308b..\u305d\u3046\u3057\u306a\u3044\u3068\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u308b..\ncd repos/apache-mynewt-core/hw/bsp/nrf51-blenano/\ncp -v ../nrf51dk/*.ld ./.\ncp -v ../nrf51dk/src/*.c ./src\ncp -v ../nrf51dk/include/bsp/*.h ./include/bsp/\n#\n# vi include/bsp/bsp.h\n## - include/bsp/bsp.h___21\u304b\u308919\u306b\u5909\u66f4\u3002\n## //#define LED_BLINK_PIN   (21)\n## #define LED_BLINK_PIN   (19)\nsed -i 's/(21)/(19)/' include/bsp/bsp.h\n#\n#\ncd $HOME/dev/myproj\n#\n# \u30bf\u30fc\u30b2\u30c3\u30c8\u4f5c\u6210.\n#L\u30c1\u30ab \u30a2\u30d7\u30ea.\nnewt target create blink_blenano\nnewt target set blink_blenano app=apps/blinky\nnewt target set blink_blenano bsp=@apache-mynewt-core/hw/bsp/nrf51-blenano\nnewt target set blink_blenano build_profile=debug\n# \u30d6\u30fc\u30c8.\nnewt target create blenano_boot\nnewt target set  blenano_boot app=@apache-mynewt-core/apps/boot\nnewt target set  blenano_boot bsp=@apache-mynewt-core/hw/bsp/nrf51-blenano\nnewt target set  blenano_boot build_profile=optimized\n# \u78ba\u8a8d.\nnewt target show\n# \u30d3\u30eb\u30c9\nnewt build blenano_boot\nnewt build blink_blenano\n# \u7f72\u540d?\u3057\u3066\u3001\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\nnewt create-image blink_blenano 1.0.0\n\n#\n# HEX \u30a4\u30e1\u30fc\u30b8\u4f5c\u6210.\nsrec_cat bin/blenano_boot/apps/boot/boot.elf.bin -binary  -offset=0x0 -o boot.hex -intel\nsrec_cat bin/blink_blenano/apps/blinky/blinky.img -binary  -offset=0x8000 -o img.hex -intel\nsrec_cat boot.hex -intel img.hex -intel -o img_OUT.HEX -intel --line-length=44\n```\n\n- \u751f\u6210\u7269\n    - `bin/blenano_boot/apps/boot/boot.elf`  (?? 0x0000\u304b\u3089\u914d\u7f6e ??)\n    - `bin/blink_blenano/apps/blinky/blinky.img` (?? 0x8000\u304b\u3089\u914d\u7f6e ??)\n    - img_OUT.hex => mbed\u306e\u30c9\u30e9\u30a4\u30d6\u306b\u653e\u308a\u8fbc\u3093\u3067\u713c\u304f\u3002\n\n\n- 5\u79d2\u304f\u3089\u3044\u3054\u3068\u306bL\u30c1\u30ab\u3059\u308b\u3002\n\n- \u30a2\u30d7\u30ea\u5074\u306e\u30a6\u30a8\u30a4\u30c8\u3092\u304b\u3048\u308b...\n\n    ```c:myproj/apps/blinky/src/main.c\u306eblinky_task_handler()\n...\n        /* Wait one second */\n        os_time_delay(200); //<<<=== 1000\u304b\u3089 200\u304f\u3089\u3044\u306b\u3002\n\n        /* Toggle the LED */\n        hal_gpio_toggle(g_led_pin);\n...\n```\n\n```bash:\u518d\u30d3\u30eb\u30c9\u3059\u308b\n# \u30d3\u30eb\u30c9\nnewt build blenano_boot\nnewt build blink_blenano\n# \u7f72\u540d?\u3057\u3066\u3001\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\nnewt create-image blink_blenano 1.0.0\n#\n# HEX \u30a4\u30e1\u30fc\u30b8\u4f5c\u6210.\nsrec_cat bin/blenano_boot/apps/boot/boot.elf.bin -binary  -offset=0x0 -o boot.hex -intel\nsrec_cat bin/blink_blenano/apps/blinky/blinky.img -binary  -offset=0x8000 -o img.hex -intel\nsrec_cat boot.hex -intel img.hex -intel -o img_OUT.HEX -intel --line-length=44\n```\n\n=> \u3061\u3087\u3063\u3068\u306f\u3084\u304f\u306a\u3063\u305f\u3002\n\n\n## \u305d\u306e\u4ed6\n1. BLE\u52d5\u304b\u3059\u306e\u306f\u3001\u307e\u3060\u5148\u3060\u306a... (\u3060\u308c\u304b...\n\n1. <del>HEX\u3092\u4f5c\u3063\u3066\u3001mbed\u307f\u305f\u3044\u306b\u3084\u3044\u3066\u3046\u3054\u304b\u306a\u3044\u304b\u3001\u3001\u3068\u8a66\u3057\u305f\u304c\u3001\u3067\u304d\u306a\u304b\u3063\u305f\u3002</del> <br>=> 5\u500d\u304f\u3089\u3044\u9045\u3044\u30b9\u30d4\u30fc\u30c9\u3067L\u30c1\u30ab\u3057\u3066\u305f\u3063\u307d\u3044\n\n\n2. `newt`\u306eloglevel\n\n    ```go:src/mynewt.apache.org/newt/newtmgr/cli/logs.go\n...\n    const (\n            DEBUG    uint64 = 1\n            INFO     uint64 = 2\n            WARN     uint64 = 4\n            ERROR    uint64 = 8\n            CRITICAL uint64 = 10\n            /* Upto 7 custom loglevels */\n            PERUSER uint64 = 12\n    )\n    \n    const (\n            STREAM_LOG  uint64 = 0\n            MEMORY_LOG  uint64 = 1\n            STORAGE_LOG uint64 = 2\n    )\n    \n    func LoglevelToString(ll uint64) string {\n            s := \"\"\n            switch ll {\n            case DEBUG:\n                    s = \"DEBUG\"\n            case INFO:\n                    s = \"INFO\"\n            case WARN:\n                    s = \"WARN\"\n            case ERROR:\n                    s = \"ERROR\"\n            case CRITICAL:\n                    s = \"CRITICAL\"\n            case PERUSER:\n                    s = \"PERUSER\"\n            default:\n                    s = \"CUSTOM\"\n            }\n            return s\n    }\n...\n```\n\n\n3. \u30e1\u30e2\n\n```c:myproj/repos/apache-mynewt-core/libs/os/src/os_task.c\u306b\u5b9f\u4f53\nint \nos_task_init(struct os_task *t, char *name, os_task_func_t func, void *arg, \n        uint8_t prio, os_time_t sanity_itvl, os_stack_t *stack_bottom, \n        uint16_t stack_size)\n```\n\n```c:myproj/apps/blinky/src/main.c\n...\n/* Init all tasks */\nvolatile int tasks_initialized;\nint init_tasks(void);\n\n/* Task 1 */\n#define BLINKY_TASK_PRIO (1)\n#define BLINKY_STACK_SIZE    OS_STACK_ALIGN(256)\n\nstruct os_task blinky_task;\nos_stack_t blinky_stack[BLINKY_STACK_SIZE];\nstatic volatile int g_task1_loops;\n\n/* For LED toggling */\nint g_led_pin;\n\nvoid\nblinky_task_handler(void *arg)\n{   \n    struct os_task *t;\n    \n    g_led_pin = LED_BLINK_PIN;\n    hal_gpio_init_out(g_led_pin, 1);\n    \n    while (1) {\n        t = os_sched_get_current_task();\n        assert(t->t_func == blinky_task_handler);\n\n        ++g_task1_loops;\n\n        /* Wait one second */\n        os_time_delay(1000);\n\n        /* Toggle the LED */\n        hal_gpio_toggle(g_led_pin);\n    }\n}\n\n/**\n * init_tasks\n *\n * Called by main.c after os_init(). This function performs initializations\n * that are required before tasks are running.\n *\n * @return int 0 success; error otherwise.\n */\nint\ninit_tasks(void)\n{\n    os_task_init(&blinky_task, \"blinky\", blinky_task_handler, NULL,\n            BLINKY_TASK_PRIO, OS_WAIT_FOREVER, blinky_stack, BLINKY_STACK_SIZE);\n\n    tasks_initialized = 1;\n\n    return 0;\n}\n\n/**\n * main\n *\n * The main function for the project. This function initializes the os, calls\n * init_tasks to initialize tasks (and possibly other objects), then starts the\n * OS. We should not return from os start.\n *\n * @return int NOTE: this function should never return!\n */\nint\nmain(int argc, char **argv)\n{\n    int rc;\n\n#ifdef ARCH_sim\n    mcu_sim_parse_args(argc, argv);\n#endif\n\n    os_init();\n\n    rc = init_tasks();\n    os_start();\n\n    /* os start should never return. If it does, this should be an error */\n    assert(0);\n\n    return rc;\n}\n```\n\nPC\u4e0a\u3067\u306e`hal_gpio_toggle`\u306e\u3057\u304f\u307f ... `printf`\u3057\u3066\u308b\n\n```c:myproj/repos/apache-mynewt-core/hw/mcu/native/src/hal_gpio.c\n...\nvoid hal_gpio_write(int pin, int val)\n{\n    if (pin >= HAL_GPIO_NUM_PINS) {\n        return;\n    }\n    if (hal_gpio[pin].dir != OUTPUT) {\n        return;\n    }\n    hal_gpio[pin].val = (val != 0);\n    printf(\"hal_gpio set pin %2d to %1d\\r\", pin, hal_gpio[pin].val);\n    fflush(stdout);\n}\n\nint\nhal_gpio_read(int pin)\n{\n    if (pin >= HAL_GPIO_NUM_PINS) {\n        return -1;\n    }\n    return hal_gpio[pin].val;\n}\n\nint\nhal_gpio_toggle(int pin)\n{\n    int pin_state = (hal_gpio_read(pin) != 1);\n    hal_gpio_write(pin, pin_state);\n    return pin_state;\n}\n```\n", "tags": ["mynewt", "IoT", "BLEnano", "L\u30c1\u30ab", "\u7d44\u307f\u8fbc\u307f"]}