{"tags": ["Spark"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\nSpark\u3067\u306f\u3001\u5404executor\u306b\u5b9a\u6570\u3092\u8ee2\u9001\u3057\u305f\u308a\u3001\u5404executor\u3067\u96c6\u8a08\u3057\u305f\u5024\u3092driver\u3067\u53d7\u3051\u53d6\u3063\u305f\u308a\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308b\u3002\n\nSpark\u306fScala\u306e\u95a2\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff09\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u95a2\u6570\u306e\u5916\u5074\u3067\u5b9a\u7fa9\u3057\u305f\u5909\u6570\u3092\u95a2\u6570\u5185\u3067\u4f7f\u3046\u3053\u3068\u306f\u51fa\u6765\u308b\uff08\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff09\u304c\u3001\u5b9f\u884c\u306fexecutor\uff08\u5206\u6563\u3057\u305f\u5404\u30ce\u30fc\u30c9\u4e0a\uff09\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u305d\u3053\u3067\u5909\u6570\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u305f\u5909\u66f4\u306fdriver\u5074\u306b\u306f\u53cd\u6620\u3055\u308c\u306a\u3044\u3002\n\u5f53\u7136\u3001executor\u9593\u3067\u53c2\u7167\u3057\u5408\u3046\u3053\u3068\u3082\u51fa\u6765\u306a\u3044\u3002\n\u305d\u306e\u305f\u3081\u3001driver\u3068executor\u3068\u306e\u9593\u3067\u5024\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304cSpark\u306b\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\uff08broadcast variables\uff09\n\u306f\u3001driver\u3067\u5b9a\u7fa9\u3057\u305f\u5b9a\u6570\uff08\u56fa\u5b9a\u5024\uff09\u3092\u5404executor\u306b\u8ee2\u9001\u3059\u308b\u70ba\u306e\u5909\u6570\u3002\n\nSpark\u306fScala\u306e\u95a2\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff09\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u5b9a\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u308b\u306e\u3060\u304c\u3002\n\n\nScala\u306e\u5b9a\u6570\u3092\u4f7f\u3063\u305f\u4f8b\nval rdd = sc.makeRDD(Seq(123, 456, 789))\nval CONSTANT = 123\nval filter = rdd.filter(_ != CONSTANT)\nfilter.foreach(println)\n\n\nSpark\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3063\u305f\u4f8b\nval rdd = sc.makeRDD(Seq(123, 456, 789))\nval CONSTANT = sc.broadcast(123)\nval filter = rdd.filter(_ != CONSTANT.value)\nfilter.foreach(println)\n\nScala\u306e\u95a2\u6570\u3067\u5b9a\u6570\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u95a2\u6570\u3092\u8ee2\u9001\u3059\u308b\u5ea6\u306b\u5024\u306e\u8ee2\u9001\u3082\u767a\u751f\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3046\u3068\u3001\u5b9a\u6570\u306e\u5185\u5bb9\u306f1\u5ea6\u3060\u3051\u5404executor\u306b\u8ee2\u9001\u3055\u308c\u308b\u3002\n\u3057\u305f\u304c\u3063\u3066\u3001\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u5b9a\u6570\uff08\u30d0\u30a4\u30c8\u5217\u3068\u304bMap\u3068\u304b\uff09\u3092\u5171\u6709\u3057\u305f\u3044\u5834\u5408\u306f\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u304c\u826f\u3044\u3002\n\u9006\u306b\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u306e\u5b9a\u6570\u306a\u3089\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306e\u65b9\u304c\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u304d\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\u306a\u304a\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u8ee2\u9001\u3059\u308b\u5024\u306f\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u751f\u6210\u5f8c\u306b\u5909\u66f4\u3057\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001\u5f8c\u304b\u3089\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u304c\u8ffd\u52a0\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u3001\u305d\u306e\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u8ee2\u9001\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u70ba\u3002\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\uff08accumulator\uff09\u306f\u3001\u201c\u8ffd\u52a0\u201d\u306e\u307f\u3092\u884c\u3046\u5909\u6570\u3002\ndriver\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u3092\u751f\u6210\u3057\u3001\u5404executor\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306b\u5bfe\u3057\u3066\u5024\u306e\u8ffd\u52a0\uff08\u52a0\u7b97\u30fb\u84c4\u7a4d\uff09\u3092\u884c\u3044\u3001driver\u3067\u305d\u306e\u7d50\u679c\uff08\u7dcf\u8a08\uff09\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u3001Hadoop\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u3088\u3046\u306a\u3082\u306e\u3002\uff08Hadoop\u3067\u306f\u3001\u5404\u30bf\u30b9\u30af\u3067\u30ab\u30a6\u30f3\u30bf\u30fc\u306b\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\uff09\n\u305f\u3060\u3057\u3001Hadoop\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u7d50\u679c\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u304b\u3089\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff08Map\u30bf\u30b9\u30af\u3067\u96c6\u8a08\u3057\u305f\u30ab\u30a6\u30f3\u30bf\u30fc\u3092Reduce\u30bf\u30b9\u30af\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\uff09\u304c\u3001Spark\u306e\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u5f8c\u7d9a\u51e6\u7406\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val sum = sc.accumulator(0)\n  rdd.foreach(sum += _)\n  println(sum.value)\n\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306fvalue\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306e+=\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001value\u306b\u5bfe\u3057\u3066\u201c\u8ffd\u52a0\uff08\u52a0\u7b97\uff09\u201d\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fInt\u30fbLong\u30fbFloat\u30fbDouble\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u304c\u3001\u81ea\u5206\u3067AccumulatorParam\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u578b\u3067\u3082\u6271\u3048\u308b\u3002\n\uff08Int\u30fbLong\u30fbFloat\u30fbDouble\u306b\u95a2\u3057\u3066\u306f\u3001\u6697\u9ed9\u306eAccumulatorParam\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff09  \n\nimport org.apache.spark.AccumulatorParam\nobject StringAccumulatorParam extends AccumulatorParam[String] {\n\n  def zero(initialValue: String): String = \"\"\n\n  def addInPlace(t1: String, t2: String): String = t1 + t2\n}\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val s = sc.accumulator(\"0\")(StringAccumulatorParam)\n  rdd.foreach(s += _.toString)\n  println(s.value)\n\n\nforeach\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u51e6\u7406\u9806\u5e8f\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u4e0a\u8a18\u306e\u7d50\u679c\u304c\u300c0123\u300d\u306b\u306a\u308b\u3068\u306f\u9650\u3089\u306a\u3044\u3002\u300c0312\u300d\u3068\u304b\u306b\u3082\u306a\u308a\u3046\u308b\u3002\nAccumulatorParam\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092implicit object\u306b\u3057\u3066\u304a\u3051\u3070\u3001accumulator\u30e1\u30bd\u30c3\u30c9\u3067AccumulatorParam\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u7121\u304f\u306a\u308b\u3002\n\nimplicit object StringAccumulatorParam extends AccumulatorParam[String] {\n\n  def zero(initialValue: String): String = \"\"\n\n  def addInPlace(t1: String, t2: String): String = t1 + t2\n}\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val s = sc.accumulator(\"0\")\n\n\nAccumulable\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306e\u6c4e\u7528\u7248\u3067\u3001\u4fdd\u6301\u3059\u308b\u5024\u306e\u578b\u3068\u8ffd\u52a0\u3059\u308b\u5024\u306e\u578b\u304c\u7570\u306a\u3063\u3066\u3044\u3066\u3082\u3088\u3044\u3002\uff08Accumulator[T]\u306fAccumulable[T,T]\u3067\u3042\u308b\uff09\n\nimport org.apache.spark.AccumulableParam\n\n\nSeq[String]\u306e\u4f8b\n\nobject SeqAccumulableParam extends AccumulableParam[Seq[String], String] {\n\n  def zero(initialValue: Seq[String]): Seq[String] = Seq.empty\n\n  def addInPlace(r1: Seq[String], r2: Seq[String]): Seq[String] = r1 ++ r2\n\n  def addAccumulator(r: Seq[String], t: String): Seq[String] = r :+ t\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\"))\n  val s = sc.accumulable(Seq.empty[String])(SeqAccumulableParam)\n  rdd.foreach(s += _)\n  println(s.value) //\u2192List(b, c, a)\n\n\nMap[K,V]\u306e\u4f8b\n\nclass MapAccumulableParam[K, V] extends AccumulableParam[Map[K, V], (K, V)] {\n\n  def zero(initialValue: Map[K, V]): Map[K, V] = Map.empty\n\n  def addInPlace(r1: Map[K, V], r2: Map[K, V]): Map[K, V] = r1 ++ r2\n\n  def addAccumulator(r: Map[K, V], t: (K, V)): Map[K, V] = r + t\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"bc\", \"def\"))\n  val m = sc.accumulable(Map.empty[String, Int])(new MapAccumulableParam[String, Int])\n  rdd.foreach(key => m += (key, key.length))\n  println(m.value) //\u2192Map(a -> 1, bc -> 2, def -> 3)\n\n\nMap\u3067\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u4f8b\n\nobject MapCounterAccumulableParam extends AccumulableParam[scala.collection.mutable.Map[String, Int], String] {\n\n  def zero(initialValue: scala.collection.mutable.Map[String, Int]) = scala.collection.mutable.Map.empty[String, Int]\n\n  def addInPlace(r1: scala.collection.mutable.Map[String, Int], r2: scala.collection.mutable.Map[String, Int]): scala.collection.mutable.Map[String, Int] = {\n    r2.foreach{ kv => add(r1, kv._1, kv._2) }\n    r1\n  }\n\n  def addAccumulator(r: scala.collection.mutable.Map[String, Int], t: String): scala.collection.mutable.Map[String, Int] = {\n    add(r, t, 1)\n    r\n  }\n\n  private def add(r: scala.collection.mutable.Map[String, Int], key: String, value: Int): Unit = {\n    r.put(key, r.getOrElse(key, 0) + value)\n  }\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"))\n  val m = sc.accumulable(scala.collection.mutable.Map.empty[String, Int])(MapCounterAccumulableParam)\n  rdd.foreach(m += _)\n  println(m.value) //\u2192Map(b -> 2, a -> 3, c -> 1)\n\n\nArrayBuffer[String]\u306e\u4f8b\nGrowable\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08mutable\u306eArrayBuffer\u3084ListBuffer\uff09\u3092\u4f7f\u3046\u5834\u5408\u306faccumulableCollection\u30e1\u30bd\u30c3\u30c9\u304c\u4fbf\u5229\u3002\n\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\"))\n  val ac = sc.accumulableCollection(scala.collection.mutable.ArrayBuffer.empty[String])\n  rdd.foreach(ac += _)\n  println(ac.value) //\u2192ArrayBuffer(a, b, c)\n\n\n\n* Spark\u3067\u306f\u3001\u5404executor\u306b\u5b9a\u6570\u3092\u8ee2\u9001\u3057\u305f\u308a\u3001\u5404executor\u3067\u96c6\u8a08\u3057\u305f\u5024\u3092driver\u3067\u53d7\u3051\u53d6\u3063\u305f\u308a\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308b\u3002  \n* Spark\u306fScala\u306e\u95a2\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff09\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u95a2\u6570\u306e\u5916\u5074\u3067\u5b9a\u7fa9\u3057\u305f\u5909\u6570\u3092\u95a2\u6570\u5185\u3067\u4f7f\u3046\u3053\u3068\u306f\u51fa\u6765\u308b\uff08\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff09\u304c\u3001\u5b9f\u884c\u306fexecutor\uff08\u5206\u6563\u3057\u305f\u5404\u30ce\u30fc\u30c9\u4e0a\uff09\u3067\u884c\u308f\u308c\u308b\u306e\u3067\u3001\u305d\u3053\u3067\u5909\u6570\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u305f\u5909\u66f4\u306fdriver\u5074\u306b\u306f\u53cd\u6620\u3055\u308c\u306a\u3044\u3002\n* \u5f53\u7136\u3001executor\u9593\u3067\u53c2\u7167\u3057\u5408\u3046\u3053\u3068\u3082\u51fa\u6765\u306a\u3044\u3002\n\u305d\u306e\u305f\u3081\u3001driver\u3068executor\u3068\u306e\u9593\u3067\u5024\u3092\u5171\u6709\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304cSpark\u306b\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002  \n\n\n# \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\uff08broadcast variables\uff09\n\u306f\u3001driver\u3067\u5b9a\u7fa9\u3057\u305f\u5b9a\u6570\uff08\u56fa\u5b9a\u5024\uff09\u3092\u5404executor\u306b\u8ee2\u9001\u3059\u308b\u70ba\u306e\u5909\u6570\u3002\n\n* Spark\u306fScala\u306e\u95a2\u6570\uff08\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\uff09\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u5b9a\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u308b\u306e\u3060\u304c\u3002\n\n## Scala\u306e\u5b9a\u6570\u3092\u4f7f\u3063\u305f\u4f8b\t\n\n```\nval rdd = sc.makeRDD(Seq(123, 456, 789))\nval CONSTANT = 123\nval filter = rdd.filter(_ != CONSTANT)\nfilter.foreach(println)\n```\n\n## Spark\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3063\u305f\u4f8b\t\n\n```\nval rdd = sc.makeRDD(Seq(123, 456, 789))\nval CONSTANT = sc.broadcast(123)\nval filter = rdd.filter(_ != CONSTANT.value)\nfilter.foreach(println)\n```\n\nScala\u306e\u95a2\u6570\u3067\u5b9a\u6570\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u95a2\u6570\u3092\u8ee2\u9001\u3059\u308b\u5ea6\u306b\u5024\u306e\u8ee2\u9001\u3082\u767a\u751f\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3046\u3068\u3001\u5b9a\u6570\u306e\u5185\u5bb9\u306f1\u5ea6\u3060\u3051\u5404executor\u306b\u8ee2\u9001\u3055\u308c\u308b\u3002\n\n\u3057\u305f\u304c\u3063\u3066\u3001\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u5b9a\u6570\uff08\u30d0\u30a4\u30c8\u5217\u3068\u304bMap\u3068\u304b\uff09\u3092\u5171\u6709\u3057\u305f\u3044\u5834\u5408\u306f\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u304c\u826f\u3044\u3002\n\u9006\u306b\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u306e\u5b9a\u6570\u306a\u3089\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306e\u65b9\u304c\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u304d\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\u306a\u304a\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u8ee2\u9001\u3059\u308b\u5024\u306f\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u751f\u6210\u5f8c\u306b\u5909\u66f4\u3057\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001\u5f8c\u304b\u3089\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u304c\u8ffd\u52a0\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u3001\u305d\u306e\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u8ee2\u9001\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u70ba\u3002\n\n# \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\n\n* \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\uff08accumulator\uff09\u306f\u3001\u201c\u8ffd\u52a0\u201d\u306e\u307f\u3092\u884c\u3046\u5909\u6570\u3002\n* driver\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u3092\u751f\u6210\u3057\u3001\u5404executor\u3067\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306b\u5bfe\u3057\u3066\u5024\u306e\u8ffd\u52a0\uff08\u52a0\u7b97\u30fb\u84c4\u7a4d\uff09\u3092\u884c\u3044\u3001driver\u3067\u305d\u306e\u7d50\u679c\uff08\u7dcf\u8a08\uff09\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n* \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u3001Hadoop\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u3088\u3046\u306a\u3082\u306e\u3002\uff08Hadoop\u3067\u306f\u3001\u5404\u30bf\u30b9\u30af\u3067\u30ab\u30a6\u30f3\u30bf\u30fc\u306b\u5024\u3092\u52a0\u7b97\u3057\u3066\u3044\u304f\uff09\n* \u305f\u3060\u3057\u3001Hadoop\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u7d50\u679c\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u304b\u3089\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff08Map\u30bf\u30b9\u30af\u3067\u96c6\u8a08\u3057\u305f\u30ab\u30a6\u30f3\u30bf\u30fc\u3092Reduce\u30bf\u30b9\u30af\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\uff09\u304c\u3001Spark\u306e\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u5f8c\u7d9a\u51e6\u7406\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n```\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val sum = sc.accumulator(0)\n  rdd.foreach(sum += _)\n  println(sum.value)\n```\n\n* \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306fvalue\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306e+=\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001value\u306b\u5bfe\u3057\u3066\u201c\u8ffd\u52a0\uff08\u52a0\u7b97\uff09\u201d\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n* \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fInt\u30fbLong\u30fbFloat\u30fbDouble\u3067\u3057\u304b\u4f7f\u3048\u306a\u3044\u304c\u3001\u81ea\u5206\u3067AccumulatorParam\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u578b\u3067\u3082\u6271\u3048\u308b\u3002\n* \uff08Int\u30fbLong\u30fbFloat\u30fbDouble\u306b\u95a2\u3057\u3066\u306f\u3001\u6697\u9ed9\u306eAccumulatorParam\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff09  \n\n```\nimport org.apache.spark.AccumulatorParam\nobject StringAccumulatorParam extends AccumulatorParam[String] {\n\n  def zero(initialValue: String): String = \"\"\n\n  def addInPlace(t1: String, t2: String): String = t1 + t2\n}\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val s = sc.accumulator(\"0\")(StringAccumulatorParam)\n  rdd.foreach(s += _.toString)\n  println(s.value)\n```\n\n* foreach\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u51e6\u7406\u9806\u5e8f\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u4e0a\u8a18\u306e\u7d50\u679c\u304c\u300c0123\u300d\u306b\u306a\u308b\u3068\u306f\u9650\u3089\u306a\u3044\u3002\u300c0312\u300d\u3068\u304b\u306b\u3082\u306a\u308a\u3046\u308b\u3002\n\n* AccumulatorParam\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092implicit object\u306b\u3057\u3066\u304a\u3051\u3070\u3001accumulator\u30e1\u30bd\u30c3\u30c9\u3067AccumulatorParam\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u7121\u304f\u306a\u308b\u3002\n\n```\nimplicit object StringAccumulatorParam extends AccumulatorParam[String] {\n\n  def zero(initialValue: String): String = \"\"\n\n  def addInPlace(t1: String, t2: String): String = t1 + t2\n}\n  val rdd = sc.makeRDD(Seq(1, 2, 3))\n  val s = sc.accumulator(\"0\")\n```\n\n* Accumulable\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30fc\u306e\u6c4e\u7528\u7248\u3067\u3001\u4fdd\u6301\u3059\u308b\u5024\u306e\u578b\u3068\u8ffd\u52a0\u3059\u308b\u5024\u306e\u578b\u304c\u7570\u306a\u3063\u3066\u3044\u3066\u3082\u3088\u3044\u3002\uff08Accumulator[T]\u306fAccumulable[T,T]\u3067\u3042\u308b\uff09\n\n```\nimport org.apache.spark.AccumulableParam\n```\n\n* Seq[String]\u306e\u4f8b\n\n```\nobject SeqAccumulableParam extends AccumulableParam[Seq[String], String] {\n\n  def zero(initialValue: Seq[String]): Seq[String] = Seq.empty\n\n  def addInPlace(r1: Seq[String], r2: Seq[String]): Seq[String] = r1 ++ r2\n\n  def addAccumulator(r: Seq[String], t: String): Seq[String] = r :+ t\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\"))\n  val s = sc.accumulable(Seq.empty[String])(SeqAccumulableParam)\n  rdd.foreach(s += _)\n  println(s.value) //\u2192List(b, c, a)\n```\n\n* Map[K,V]\u306e\u4f8b\n\n```\nclass MapAccumulableParam[K, V] extends AccumulableParam[Map[K, V], (K, V)] {\n\n  def zero(initialValue: Map[K, V]): Map[K, V] = Map.empty\n\n  def addInPlace(r1: Map[K, V], r2: Map[K, V]): Map[K, V] = r1 ++ r2\n\n  def addAccumulator(r: Map[K, V], t: (K, V)): Map[K, V] = r + t\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"bc\", \"def\"))\n  val m = sc.accumulable(Map.empty[String, Int])(new MapAccumulableParam[String, Int])\n  rdd.foreach(key => m += (key, key.length))\n  println(m.value) //\u2192Map(a -> 1, bc -> 2, def -> 3)\n```\n\n* Map\u3067\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u4f8b\n\n```\nobject MapCounterAccumulableParam extends AccumulableParam[scala.collection.mutable.Map[String, Int], String] {\n\n  def zero(initialValue: scala.collection.mutable.Map[String, Int]) = scala.collection.mutable.Map.empty[String, Int]\n\n  def addInPlace(r1: scala.collection.mutable.Map[String, Int], r2: scala.collection.mutable.Map[String, Int]): scala.collection.mutable.Map[String, Int] = {\n    r2.foreach{ kv => add(r1, kv._1, kv._2) }\n    r1\n  }\n\n  def addAccumulator(r: scala.collection.mutable.Map[String, Int], t: String): scala.collection.mutable.Map[String, Int] = {\n    add(r, t, 1)\n    r\n  }\n\n  private def add(r: scala.collection.mutable.Map[String, Int], key: String, value: Int): Unit = {\n    r.put(key, r.getOrElse(key, 0) + value)\n  }\n}\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"))\n  val m = sc.accumulable(scala.collection.mutable.Map.empty[String, Int])(MapCounterAccumulableParam)\n  rdd.foreach(m += _)\n  println(m.value) //\u2192Map(b -> 2, a -> 3, c -> 1)\n```\n\n* ArrayBuffer[String]\u306e\u4f8b\nGrowable\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08mutable\u306eArrayBuffer\u3084ListBuffer\uff09\u3092\u4f7f\u3046\u5834\u5408\u306faccumulableCollection\u30e1\u30bd\u30c3\u30c9\u304c\u4fbf\u5229\u3002\n\n```\n  val rdd = sc.makeRDD(Seq(\"a\", \"b\", \"c\"))\n  val ac = sc.accumulableCollection(scala.collection.mutable.ArrayBuffer.empty[String])\n  rdd.foreach(ac += _)\n  println(ac.value) //\u2192ArrayBuffer(a, b, c)\n```\n\n\n\n\n\n"}