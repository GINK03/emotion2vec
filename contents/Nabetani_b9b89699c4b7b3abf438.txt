{"context": "\u554f\u984c\uff1ahttp://nabetani.sakura.ne.jp/hena/orde07_7seg/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6\uff1ahttp://qiita.com/Nabetani/items/6e7a6fadbfaa4ae20e89\n\u3067\u3002\n\u3053\u306e\u554f\u984c\u306f\u3001\n\n\u60c5\u5831\u304c\u4e0d\u5341\u5206\u306a 7seg \u304b\u3089\u3001\u305d\u306e 7seg \u3067\u8868\u793a\u53ef\u80fd\u306a\u6570\u5b57(\u3042\u308b\u3044\u306f\u7a7a\u767d)\u306e\u30ea\u30b9\u30c8\u3092\u5f97\u308b\n\u5f97\u3089\u308c\u305f\u60c5\u5831\u304b\u3089\u3001\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u3092\u5f97\u308b\n\n\u3068\u3044\u3046\u4e8c\u6bb5\u968e\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u524d\u534a\u306f\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u7c21\u5358\u306b\u6c42\u307e\u308b\u3002\n\u96c6\u5408\u3067\u66f8\u304f\u3068\u3001\n\n\u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 \u2282 \u672c\u5f53\u306b\u3064\u3044\u3066\u3044\u308b\u30e9\u30f3\u30d7\n\u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 \u2229 \u672c\u5f53\u306b\u6d88\u3048\u3066\u3044\u308b\u30e9\u30f3\u30d7 = \u2205\n\n\u306a\u306e\u3067\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u66f8\u304f\u3068\n\n\u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 & \u672c\u5f53\u306b\u3064\u3044\u3066\u3044\u308b\u30e9\u30f3\u30d7 == \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7\n\u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 & \u672c\u5f53\u306b\u6d88\u3048\u3066\u3044\u308b\u30e9\u30f3\u30d7 == 0\n\n\u3068\u306a\u308b\u3002\n\u5f8c\u534a\u306f\u3044\u308d\u3044\u308d\u306a\u6226\u7565\u304c\u3042\u308b\u3002\n\u79c1\u304c\u6700\u521d\u306b\u9078\u3093\u3060\u65b9\u6cd5\u306f\n\n\u5168\u90e8\u8a66\u3057\u3066\u5408\u81f4\u3059\u308b\u3082\u306e\u304b\u3089\u6700\u5927\u6700\u5c0f\u3092\u5f97\u308b\n\n\u3068\u3044\u3046\u99ac\u9e7f\u3052\u305f\u5b9f\u88c5\u3002\u3053\u3093\u306a\u611f\u3058\u3002\nrequire \"benchmark\"\n\nPATS=[\n  [0x0, :blank],\n  [0x3f, 0],  [0x06, 1],  [0x5b, 2],  [0x4f, 3],  [0x66, 4],\n  [0x6d, 5],  [0x7d, 6],  [0x27, 7],  [0x7f, 8],  [0x6f, 9]\n]\n\ndef okay( x, ketas )\n  s=(\"%*d\" % [ketas.size, x ])\n  s.size.times.all?{ |ix|\n    c=s[ix]\n    k=ketas[ix]\n    if c==\" \"\n      k.include?(:blank)\n    else\n      k.include?(c.to_i)\n    end\n  }\nend\n\ndef solve(src)\n  ons, offs = src.split(\",\").map{ |x| x.split(\":\").map{|seg| seg.to_i(16) } }\n  ketas=ons.size.times.map do |ix|\n    PATS.each.select{ |bits,digit|\n      ( ons[ix] & bits ) == ons[ix] && (offs[ix] & bits )==0\n    }.map(&:last)\n  end\n\n  mm=(10**ketas.size).times.select{ |x|\n    okay(x,ketas)\n  }.minmax\n  mm.compact.empty? ? \"-\" : mm.join(\",\")\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  /(?<num>\\d+).*\"(?<src>.+)\".*\"(?<expected>.+)\"/=~line\n  actual = nil\n  tick = Benchmark.realtime{ actual = solve( src ) }\n  okay = actual==expected\n  puts( \"%s %s %s->%s ( e:%s ) %f\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected, tick ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n/*0*/ test( \"06:4b:46:64:6d,79:20:10:10:02\", \"12345,13996\" );    \n/*1*/ test( \"41:00,3e:01\", \"-\" );    \n/*2*/ test( \"00:00,79:79\", \"1,11\" );    \n/*3*/ test( \"02:4b:46:64,20:20:10:10\", \"1234,3399\" );    \n\n3\u6841\u306a\u3089\u30010\u304b\u3089999\u307e\u3067\u5168\u90e8\u8a66\u3059\u3002\n\u3068\u3066\u3082\u9045\u3044\u3051\u3069\u3001\u6b63\u3057\u3044\u3068\u78ba\u4fe1\u304c\u6301\u3066\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u5b89\u5fc3\u611f\u304c\u3042\u308b\u3002\n\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u3067\u306f\u5168\u90e8\u30c6\u30b9\u30c8\u3092\u901a\u3059\u306e\u306b\u6570\u5206\u3092\u8981\u3059\u308b\u306e\u3067\u56f0\u308b\u3002\u56f0\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u901f\u3044\u306e\u3092\u66f8\u3044\u305f\u3002\n\u524d\u534a\u306f\u5148\u7a0b\u306e\u3068\u540c\u3058\u3002\n\u5f8c\u534a\u306f\u3001\n\n\u6700\u521d\u306e\u6841\u304c\u7a7a\u767d\u304b\u3069\u3046\u304b\u3067\u5206\u5c90\u3057\u3066\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u3067\u6c42\u3081\u308b\u3002\n\n\u3068\u3044\u3046\u3082\u306e\u3002\u3053\u3093\u306a\u611f\u3058\uff1a\nPATS=[\n  [0, :blank],\n  [0x3f, 0],  [0x06, 1],  [0x5b, 2],  [0x4f, 3],  [0x66, 4],\n  [0x6d, 5],  [0x7d, 6],  [0x27, 7],  [0x7f, 8],  [0x6f, 9]\n]\n\ndef find_minmax(ketas, ord, head=true)\n  h, *r = ketas\n  return ( h - [:blank] ).send(ord) if ketas.size==1\n  if head && h.include?( :blank )\n    return [\n        find_minmax( r, ord, true ),\n        find_minmax( [h-[:blank]]+r, ord, true )\n      ].compact.send(ord)\n  end\n  h-=[:blank]\n  h-=[0] if head\n  return nil if h.size==0\n  m=find_minmax( r, ord, false )\n  return m ? h.send(ord)*10**(ketas.size-1) + m : nil\nend\n\ndef solve(src)\n  ons, offs = src.split(\",\").map{ |x| x.split(\":\").map{|seg| seg.to_i(16) } }\n  ketas=ons.zip( offs ).map{ |on,off|\n    PATS.select{ |pat|\n      (pat[0] & on ) == on && ( pat[0] & off )== 0\n    }.map( &:last )\n  }\n  return \"-\" if ketas.any?{ |x| x==[] }\n  max = find_minmax( ketas, :max )\n  return \"-\" unless max\n  [  find_minmax( ketas, :min ), max ].join(\",\")\nend\n\nDATA.map do |line|\n  /(?<num>\\d+).*\"(?<src>.+)\".*\"(?<expected>.+)\"/=~line\n  actual = solve( src )\n  okay = actual==expected\n  puts( \"%s %s %s->%s ( e:%s )\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n/*44*/ test( \"18:04:26:20:04:24:1a,02:21:50:48:02:08:00\", \"6177540,6177678\" );    \n/*45*/ test( \"00:08:34:00:00:64:06,18:24:02:00:61:08:61\", \"260141,7269141\" );    \n/*46*/ test( \"00:02:0a:04:4a:00:20,18:21:24:02:04:60:19\", \"125214,7126214\" );\n\n\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3068\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u305f\u3081\u306b\u3001send(:min) \u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3002\nhead \u306f\u5148\u982d\u306e\u6841\u304b\u3069\u3046\u304b\u3002\u5148\u982d\u3060\u3068 0 \u304c\u4f7f\u3048\u306a\u3044\u3068\u304b\u3001\u7a7a\u767d\u304c\u9078\u3079\u308b\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u9055\u3044\u304c\u3042\u308b\u304b\u3089\u306d\u3002\n\u554f\u984c\u3068\u3057\u3066\u306f\u3001\u3084\u3084\u96e3\u3057\u304b\u3063\u305f\u6a21\u69d8\u3002\n\n\u554f\u984c\uff1ahttp://nabetani.sakura.ne.jp/hena/orde07_7seg/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6\uff1ahttp://qiita.com/Nabetani/items/6e7a6fadbfaa4ae20e89\n\n\u3067\u3002\n\n\u3053\u306e\u554f\u984c\u306f\u3001\n\n* \u60c5\u5831\u304c\u4e0d\u5341\u5206\u306a 7seg \u304b\u3089\u3001\u305d\u306e 7seg \u3067\u8868\u793a\u53ef\u80fd\u306a\u6570\u5b57(\u3042\u308b\u3044\u306f\u7a7a\u767d)\u306e\u30ea\u30b9\u30c8\u3092\u5f97\u308b\n* \u5f97\u3089\u308c\u305f\u60c5\u5831\u304b\u3089\u3001\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u3092\u5f97\u308b\n\n\u3068\u3044\u3046\u4e8c\u6bb5\u968e\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u524d\u534a\u306f\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u7c21\u5358\u306b\u6c42\u307e\u308b\u3002\n\n\u96c6\u5408\u3067\u66f8\u304f\u3068\u3001\n\n* \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 \u2282 \u672c\u5f53\u306b\u3064\u3044\u3066\u3044\u308b\u30e9\u30f3\u30d7\n* \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 \u2229 \u672c\u5f53\u306b\u6d88\u3048\u3066\u3044\u308b\u30e9\u30f3\u30d7 = \u2205\n\n\u306a\u306e\u3067\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u66f8\u304f\u3068\n\n* \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 & \u672c\u5f53\u306b\u3064\u3044\u3066\u3044\u308b\u30e9\u30f3\u30d7 == \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7\n* \u3064\u3044\u3066\u3044\u308b\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u30e9\u30f3\u30d7 & \u672c\u5f53\u306b\u6d88\u3048\u3066\u3044\u308b\u30e9\u30f3\u30d7 == 0\n\n\u3068\u306a\u308b\u3002\n\n\u5f8c\u534a\u306f\u3044\u308d\u3044\u308d\u306a\u6226\u7565\u304c\u3042\u308b\u3002\n\u79c1\u304c\u6700\u521d\u306b\u9078\u3093\u3060\u65b9\u6cd5\u306f\n\n* \u5168\u90e8\u8a66\u3057\u3066\u5408\u81f4\u3059\u308b\u3082\u306e\u304b\u3089\u6700\u5927\u6700\u5c0f\u3092\u5f97\u308b\n\n\u3068\u3044\u3046\u99ac\u9e7f\u3052\u305f\u5b9f\u88c5\u3002\u3053\u3093\u306a\u611f\u3058\u3002\n\n```ruby\nrequire \"benchmark\"\n\nPATS=[\n  [0x0, :blank],\n  [0x3f, 0],  [0x06, 1],  [0x5b, 2],  [0x4f, 3],  [0x66, 4],\n  [0x6d, 5],  [0x7d, 6],  [0x27, 7],  [0x7f, 8],  [0x6f, 9]\n]\n\ndef okay( x, ketas )\n  s=(\"%*d\" % [ketas.size, x ])\n  s.size.times.all?{ |ix|\n    c=s[ix]\n    k=ketas[ix]\n    if c==\" \"\n      k.include?(:blank)\n    else\n      k.include?(c.to_i)\n    end\n  }\nend\n\ndef solve(src)\n  ons, offs = src.split(\",\").map{ |x| x.split(\":\").map{|seg| seg.to_i(16) } }\n  ketas=ons.size.times.map do |ix|\n    PATS.each.select{ |bits,digit|\n      ( ons[ix] & bits ) == ons[ix] && (offs[ix] & bits )==0\n    }.map(&:last)\n  end\n\n  mm=(10**ketas.size).times.select{ |x|\n    okay(x,ketas)\n  }.minmax\n  mm.compact.empty? ? \"-\" : mm.join(\",\")\nend\n\n$stdout.sync=true\n\nDATA.map do |line|\n  /(?<num>\\d+).*\"(?<src>.+)\".*\"(?<expected>.+)\"/=~line\n  actual = nil\n  tick = Benchmark.realtime{ actual = solve( src ) }\n  okay = actual==expected\n  puts( \"%s %s %s->%s ( e:%s ) %f\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected, tick ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n/*0*/ test( \"06:4b:46:64:6d,79:20:10:10:02\", \"12345,13996\" );    \n/*1*/ test( \"41:00,3e:01\", \"-\" );    \n/*2*/ test( \"00:00,79:79\", \"1,11\" );    \n/*3*/ test( \"02:4b:46:64,20:20:10:10\", \"1234,3399\" );    \n```\n\n3\u6841\u306a\u3089\u30010\u304b\u3089999\u307e\u3067\u5168\u90e8\u8a66\u3059\u3002\n\u3068\u3066\u3082\u9045\u3044\u3051\u3069\u3001\u6b63\u3057\u3044\u3068\u78ba\u4fe1\u304c\u6301\u3066\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u5b89\u5fc3\u611f\u304c\u3042\u308b\u3002\n\n\u3068\u306f\u3044\u3048\u3001\u3053\u308c\u3067\u306f\u5168\u90e8\u30c6\u30b9\u30c8\u3092\u901a\u3059\u306e\u306b\u6570\u5206\u3092\u8981\u3059\u308b\u306e\u3067\u56f0\u308b\u3002\u56f0\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u901f\u3044\u306e\u3092\u66f8\u3044\u305f\u3002\n\n\u524d\u534a\u306f\u5148\u7a0b\u306e\u3068\u540c\u3058\u3002\n\u5f8c\u534a\u306f\u3001\n\n* \u6700\u521d\u306e\u6841\u304c\u7a7a\u767d\u304b\u3069\u3046\u304b\u3067\u5206\u5c90\u3057\u3066\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u3067\u6c42\u3081\u308b\u3002\n\n\u3068\u3044\u3046\u3082\u306e\u3002\u3053\u3093\u306a\u611f\u3058\uff1a\n\n```ruby\nPATS=[\n  [0, :blank],\n  [0x3f, 0],  [0x06, 1],  [0x5b, 2],  [0x4f, 3],  [0x66, 4],\n  [0x6d, 5],  [0x7d, 6],  [0x27, 7],  [0x7f, 8],  [0x6f, 9]\n]\n\ndef find_minmax(ketas, ord, head=true)\n  h, *r = ketas\n  return ( h - [:blank] ).send(ord) if ketas.size==1\n  if head && h.include?( :blank )\n    return [\n        find_minmax( r, ord, true ),\n        find_minmax( [h-[:blank]]+r, ord, true )\n      ].compact.send(ord)\n  end\n  h-=[:blank]\n  h-=[0] if head\n  return nil if h.size==0\n  m=find_minmax( r, ord, false )\n  return m ? h.send(ord)*10**(ketas.size-1) + m : nil\nend\n\ndef solve(src)\n  ons, offs = src.split(\",\").map{ |x| x.split(\":\").map{|seg| seg.to_i(16) } }\n  ketas=ons.zip( offs ).map{ |on,off|\n    PATS.select{ |pat|\n      (pat[0] & on ) == on && ( pat[0] & off )== 0\n    }.map( &:last )\n  }\n  return \"-\" if ketas.any?{ |x| x==[] }\n  max = find_minmax( ketas, :max )\n  return \"-\" unless max\n  [  find_minmax( ketas, :min ), max ].join(\",\")\nend\n\nDATA.map do |line|\n  /(?<num>\\d+).*\"(?<src>.+)\".*\"(?<expected>.+)\"/=~line\n  actual = solve( src )\n  okay = actual==expected\n  puts( \"%s %s %s->%s ( e:%s )\" % [ ( okay ? \"ok\" : \"**NG**\" ), num, src, actual, expected ] )\n  okay\nend.all?.tap{|x| puts( x ? \"everything is ok\" : \"something wrong\" ) }\n\n__END__\n/*44*/ test( \"18:04:26:20:04:24:1a,02:21:50:48:02:08:00\", \"6177540,6177678\" );    \n/*45*/ test( \"00:08:34:00:00:64:06,18:24:02:00:61:08:61\", \"260141,7269141\" );    \n/*46*/ test( \"00:02:0a:04:4a:00:20,18:21:24:02:04:60:19\", \"125214,7126214\" );\n```\n\n\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3068\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u305f\u3081\u306b\u3001send(:min) \u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3002\nhead \u306f\u5148\u982d\u306e\u6841\u304b\u3069\u3046\u304b\u3002\u5148\u982d\u3060\u3068 0 \u304c\u4f7f\u3048\u306a\u3044\u3068\u304b\u3001\u7a7a\u767d\u304c\u9078\u3079\u308b\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u9055\u3044\u304c\u3042\u308b\u304b\u3089\u306d\u3002\n\n\u554f\u984c\u3068\u3057\u3066\u306f\u3001\u3084\u3084\u96e3\u3057\u304b\u3063\u305f\u6a21\u69d8\u3002\n", "tags": ["yhpg", "Ruby", "\u3069\u3046\u66f8\u304f"]}