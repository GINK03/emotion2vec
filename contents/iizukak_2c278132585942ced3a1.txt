{"context": " More than 1 year has passed since last update.\n\nkeep-looking\n(6 2 4 caviar 5 7 3) \u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u304c\u3042\u3063\u305f\u3068\u304d\u3001\u307e\u305a1\u756a\u76ee\u306e\u8981\u7d20\u306f 6,6\u756a\u76ee\u306e\u8981\u7d20\u306f 3, 3\u756a\u76ee\u306e\u8981\u7d20\u306f caviar \u3002\u63a2\u3057\u3066\u3044\u308b\u8981\u7d20\u304c caviar \u304b\u3069\u3046\u304b\uff1f\u3068\u3044\u3046\u98a8\u306b\u3001\u9806\u3005\u306b\u8981\u7d20\u3092\u8fbf\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nkeep-looking.scm\n(define looking\n  (lambda (a lat)\n    (keep-looking a (pick 1 lat) lat)))\n\n(define keep-looking\n  (lambda (a sorn lat)\n    (cond\n      ((number? sorn)\n       (keep-looking a (pick sorn lat) lat))\n      (else (eq? sorn a)))))\n\n(define a 'caviar)\n(define l '(6 2 4 caviar 5 7 3))\n(print (keep-looking a 'caviar l))\n\n\n\nshift\n\u7b2c\u4e00\u306e\u8981\u7d20\u304c\u30da\u30a2\u3067\u3042\u308b\u30da\u30a2\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u62ec\u5f27\u3092\u30b7\u30d5\u30c8\u3059\u308b\u95a2\u6570 shift \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nshift.scm\n(define first\n  (lambda (p)\n    (car p)))\n\n(define second\n  (lambda (p)\n    (car (cdr p))))\n\n(define build\n  (lambda (a1 a2)\n    (cons a1 (cons a2 (quote ())))))\n\n(define shift\n  (lambda (pair)\n    (build (first (first pair))\n           (build (second (first pair))\n                  (second pair)))))\n\n(define l '((a b) (c d)))\n(print (shift l))\n\n\n\u51fa\u529b\u306f (a (b (c d))) \u3068\u306a\u308b\u3002\n\nlength*\n\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u30da\u30a2\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u500b\u6570\u3092\u8a08\u7b97\u3059\u308b length* \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nlength*.scm\n(define length*\n  (lambda (para)\n    (cond\n      ((atom? para) 1)\n      (else\n        (+ (length* (first para))\n           (length* (second para)))))))\n\n\n\ncollatz\nCollatz\u4e88\u60f3\u306e\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\u3002\n\ncollatz.scm\n(define collatz\n  (lambda (n)\n    (cond\n      (eq? n 1)\n      (else\n        (cond\n          ((even? n) (collatz (/ n 2)))\n          (else (collatz (add1 (* 3 n)))))))))\n\n\n\u3042\u308a\u304c\u3068\u3046 Lothar Collatz\u3002\n\nackermann\nAckermann\u95a2\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n\nackermann.scm\n(define ackermann\n  (lambda (n m)\n    (cond\n      ((zero? n) (add1 m))\n      ((zero? m) (ackermann (sub1 n) 1))\n      (else (ackermann (sub1 n)\n                       (ackermann n (sub1 m)))))))\n\n\n\u3042\u308a\u304c\u3068\u3046 Wilhelm Ackermann\u3002\n\n##keep-looking\n`(6 2 4 caviar 5 7 3)` \u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u304c\u3042\u3063\u305f\u3068\u304d\u3001\u307e\u305a1\u756a\u76ee\u306e\u8981\u7d20\u306f `6`,6\u756a\u76ee\u306e\u8981\u7d20\u306f `3`, 3\u756a\u76ee\u306e\u8981\u7d20\u306f `caviar` \u3002\u63a2\u3057\u3066\u3044\u308b\u8981\u7d20\u304c `caviar` \u304b\u3069\u3046\u304b\uff1f\u3068\u3044\u3046\u98a8\u306b\u3001\u9806\u3005\u306b\u8981\u7d20\u3092\u8fbf\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```Lisp:keep-looking.scm\n(define looking\n  (lambda (a lat)\n    (keep-looking a (pick 1 lat) lat)))\n\n(define keep-looking\n  (lambda (a sorn lat)\n    (cond\n      ((number? sorn)\n       (keep-looking a (pick sorn lat) lat))\n      (else (eq? sorn a)))))\n\n(define a 'caviar)\n(define l '(6 2 4 caviar 5 7 3))\n(print (keep-looking a 'caviar l))\n```\n\n##shift\n\u7b2c\u4e00\u306e\u8981\u7d20\u304c\u30da\u30a2\u3067\u3042\u308b\u30da\u30a2\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u62ec\u5f27\u3092\u30b7\u30d5\u30c8\u3059\u308b\u95a2\u6570 `shift` \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```Lisp:shift.scm\n(define first\n  (lambda (p)\n    (car p)))\n\n(define second\n  (lambda (p)\n    (car (cdr p))))\n\n(define build\n  (lambda (a1 a2)\n    (cons a1 (cons a2 (quote ())))))\n\n(define shift\n  (lambda (pair)\n    (build (first (first pair))\n           (build (second (first pair))\n                  (second pair)))))\n\n(define l '((a b) (c d)))\n(print (shift l))\n```\n\n\u51fa\u529b\u306f `(a (b (c d)))` \u3068\u306a\u308b\u3002\n\n##length*\n\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u30da\u30a2\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u500b\u6570\u3092\u8a08\u7b97\u3059\u308b `length*` \u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```Lisp:length*.scm\n(define length*\n  (lambda (para)\n    (cond\n      ((atom? para) 1)\n      (else\n        (+ (length* (first para))\n           (length* (second para)))))))\n```\n\n##collatz\nCollatz\u4e88\u60f3\u306e\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\u3002\n\n```Lisp:collatz.scm\n(define collatz\n  (lambda (n)\n    (cond\n      (eq? n 1)\n      (else\n        (cond\n          ((even? n) (collatz (/ n 2)))\n          (else (collatz (add1 (* 3 n)))))))))\n```\n\u3042\u308a\u304c\u3068\u3046 Lothar Collatz\u3002\n\n##ackermann\nAckermann\u95a2\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n\n```Lisp:ackermann.scm\n(define ackermann\n  (lambda (n m)\n    (cond\n      ((zero? n) (add1 m))\n      ((zero? m) (ackermann (sub1 n) 1))\n      (else (ackermann (sub1 n)\n                       (ackermann n (sub1 m)))))))\n```\n\n\u3042\u308a\u304c\u3068\u3046 Wilhelm Ackermann\u3002\n\n##", "tags": ["lisp", "Scheme"]}