{"context": " More than 1 year has passed since last update.\u306e\u3067\u3001typeof(\u30af\u30e9\u30b9).GetTypeInfo().DeclaredConstructors \u304b\u3089\u63a2\u3059\u65b9\u5411\u3067\u3002\n\n    using System;\n    using System.Linq;\n    using System.Reflection;\n\n\uff13\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u30b5\u30f3\u30d7\u30eb\u30af\u30e9\u30b9:\n\n    public class Person\n    {\n        public string nickname = \"\";\n\n        public Person(){}\n        public Person(string firstname, string lastname){\n        }\n        public Person(string nickname){\n            this.nickname = nickname;\n        }\n\n    }  \n\n\nPerson(string nickname)\u3092\u63a2\u3059\u30c6\u30b9\u30c8:\n\n        [Test]\n        public void TestFindConstructor()\n        {\n            var t = typeof(Person).GetTypeInfo ();\n\n            var cs = t.DeclaredConstructors.Where (\n                ci => ci.GetParameters ().Count() == 1 &&\n                ci.GetParameters().First().ParameterType == typeof(System.String)\n            ).FirstOrDefault();\n\n            Assert.IsNotNull (cs);\n            var person = (Person)cs.Invoke (new string[]{ \"Monkey\" });\n            Assert.AreEqual (person.nickname, \"Monkey\");\n        }\n\n\n\n\u306e\u3067\u3001typeof(\u30af\u30e9\u30b9).GetTypeInfo().DeclaredConstructors \u304b\u3089\u63a2\u3059\u65b9\u5411\u3067\u3002\n\n```csharp\n\n    using System;\n    using System.Linq;\n    using System.Reflection;\n```   \n    \n\uff13\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u30b5\u30f3\u30d7\u30eb\u30af\u30e9\u30b9:\n\n\n```csharp\n\n\tpublic class Person\n\t{\n\t\tpublic string nickname = \"\";\n\n\t\tpublic Person(){}\n\t\tpublic Person(string firstname, string lastname){\n\t\t}\n\t\tpublic Person(string nickname){\n\t\t\tthis.nickname = nickname;\n\t\t}\n\n\t}  \n\t  \n```    \n\nPerson(string nickname)\u3092\u63a2\u3059\u30c6\u30b9\u30c8:\n\n\n```csharp\n\n\t\t[Test]\n\t\tpublic void TestFindConstructor()\n\t\t{\n\t\t\tvar t = typeof(Person).GetTypeInfo ();\n\n\t\t\tvar cs = t.DeclaredConstructors.Where (\n\t\t\t\tci => ci.GetParameters ().Count() == 1 &&\n\t\t\t\tci.GetParameters().First().ParameterType == typeof(System.String)\n\t\t\t).FirstOrDefault();\n\t\t\t\n\t\t\tAssert.IsNotNull (cs);\n\t\t\tvar person = (Person)cs.Invoke (new string[]{ \"Monkey\" });\n\t\t\tAssert.AreEqual (person.nickname, \"Monkey\");\n\t\t}\n```\t\t\n", "tags": ["Xamarin", "C#", "PCL"]}