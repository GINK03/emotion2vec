{"tags": ["Kotlin", "Android"], "context": "\u6700\u521d\u306b\u304a\u3053\u3068\u308f\u308a\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u306a\u8a71\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\nAdapter\u306egetView()\nJava\u3067\u66f8\u304f\u5834\u5408\u306f\u3001\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u98a8\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n        @Override\n        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\n            View view = convertView;\n\n            if (view == null) {\n                view = getLayoutInflater().inflate(R.layout.hoge, parent, false);\n                view.setTag(new ViewHolder(view));\n            }\n            ViewHolder holder = (ViewHolder) view.getTag();\n            holder.update((Hoge) getItem(position));\n\n            return view;\n        }\n\n\u3053\u308c\u3092\u3001\u7d20\u76f4\u306bKotlin\u306b\u3059\u308b\u3068\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            var view = convertView\n\n            if (view == null) {\n                view = getLayoutInflater().inflate(R.layout.hoge, parent, false)\n                view!!.tag = ViewHolder(view)\n            }\n            val holder = view.tag as ViewHolder\n            holder.update(getItem(position) as Hoge)\n\n            return view\n        }\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\nNullable\u306avar\u306f\u30a4\u30e4\u3093\n\u3053\u306e\u306a\u304b\u306e\u3001view\u3068\u3044\u3046\u5909\u6570\u306f\u3001var\u306aView?\u578b\u306e\u5909\u6570\u3067\u3059\u3002\nKotlin\u306e\u54f2\u5b66\u306f\u3001val\u3067\u3042\u308b\u3079\u304d\u3001NonNull\u3067\u3042\u308b\u3079\u304d\u3068\u3044\u3046\u3068\u3053\u308d\u306b\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u3053\u308c\u3092\u3084\u3063\u3064\u3051\u307e\u3059\u3002\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            val view = convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }\n\n            val holder = view.tag as ViewHolder\n            holder.update(getItem(position) as Hoge)\n\n            return view\n        }\n\n\u3044\u3044\u611f\u3058\u3067\u3059\u3002\n\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50\u3068\u304b\u3001apply\u30e1\u30bd\u30c3\u30c9\u3068\u304b\u306f\u4fbf\u5229\u3067\u3059\u3002\n\u53b3\u5bc6\u306b\u8a00\u3048\u3070\u3001inflate()\u306e\u8fd4\u5024\u304cnull\u3067\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u8a00\u8a9e\u7684\u306b\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5b9f\u7528\u4e0a\u3001\u5dee\u3057\u652f\u3048\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u5b9f\u7528\u7684\u306a\u306e\u306f\u3053\u306e\u3042\u305f\u308a\u307e\u3067\u3067\u3001\u3053\u3053\u304b\u3089\u5148\u306f\u3001\u3084\u308c\u3070\u3067\u304d\u308b\u3088\u3068\u3044\u3046\u9818\u57df\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u3001\u81ea\u5206\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3053\u306e\u5f62\u3067\u3059\u3002\n\nas\u306f()\u3067\u304f\u304f\u308a\u3084\u3059\u3044\nJava\u306e\u30ad\u30e3\u30b9\u30c8\u3068\u7570\u306a\u308a\u3001Kotlin\u306eas\u3092\u4f7f\u3063\u305f\u30ad\u30e3\u30b9\u30c8\u306f\u3001\u30ab\u30c3\u30b3\u3067\u304f\u304f\u3063\u3066\u3082\u53ef\u8aad\u6027\u304c\u60aa\u304f\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            val view = convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }\n\n            (view.tag as ViewHolder).update(getItem(position) as Hoge)\n\n            return view\n        }\n\n\u3053\u308c\u304cJava\u3060\u3068\u3001\n            ((ViewHolder) view.getTag()).update((Hoge) getItem(position));\n\n\u30ab\u30c3\u30b3\u304c\u591a\u304f\u306a\u308a\u3059\u304e\u3066\u4f7f\u3046\u6c17\u306b\u306a\u308c\u307e\u305b\u3093\u3002\n\n\u4ed5\u4e0a\u3052\u306eapply\n\u3053\u3053\u307e\u3067\u6765\u308c\u3070\u3001\u4e00\u884c\u3067\u307e\u3068\u3081\u305f\u304f\u306a\u308b\u306e\u3082\u3084\u3080\u306a\u3057\u3067\u3059\u3002\uff08 \u306a\u304f\u306a\u3044 \uff09\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View = (convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }).apply { (tag as ViewHolder).update(getItem(position) as Hoge) }\n\n\u3069\u3084\u3041\uff01\n\u3084\u308a\u904e\u304e\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\n?: \u306f\u6c17\u304c\u5229\u304f\u3084\u3064\napply{} \u306f\u4fbf\u5229\nas \u306f\u30d3\u30e5\u30fc\u30ea\u30db\u30fc\n\n\u307f\u3093\u306a\u3082Kotlin\u306b\u4e57\u308a\u63db\u3048\u3088\u3046\uff01\n\n\u6700\u521d\u306b\u304a\u3053\u3068\u308f\u308a\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u306a\u8a71\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n### Adapter\u306egetView()\n\nJava\u3067\u66f8\u304f\u5834\u5408\u306f\u3001\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u98a8\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\n        @Override\n        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\n            View view = convertView;\n\n            if (view == null) {\n                view = getLayoutInflater().inflate(R.layout.hoge, parent, false);\n                view.setTag(new ViewHolder(view));\n            }\n            ViewHolder holder = (ViewHolder) view.getTag();\n            holder.update((Hoge) getItem(position));\n\n            return view;\n        }\n```\n\n\u3053\u308c\u3092\u3001\u7d20\u76f4\u306bKotlin\u306b\u3059\u308b\u3068\n\n```Kotlin\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            var view = convertView\n            \n            if (view == null) {\n                view = getLayoutInflater().inflate(R.layout.hoge, parent, false)\n                view!!.tag = ViewHolder(view)\n            }\n            val holder = view.tag as ViewHolder\n            holder.update(getItem(position) as Hoge)\n\n            return view\n        }\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n### Nullable\u306avar\u306f\u30a4\u30e4\u3093\n\n\u3053\u306e\u306a\u304b\u306e\u3001view\u3068\u3044\u3046\u5909\u6570\u306f\u3001var\u306aView?\u578b\u306e\u5909\u6570\u3067\u3059\u3002\nKotlin\u306e\u54f2\u5b66\u306f\u3001val\u3067\u3042\u308b\u3079\u304d\u3001NonNull\u3067\u3042\u308b\u3079\u304d\u3068\u3044\u3046\u3068\u3053\u308d\u306b\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u3053\u308c\u3092\u3084\u3063\u3064\u3051\u307e\u3059\u3002\n\n```Kotlin\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            val view = convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }\n\n            val holder = view.tag as ViewHolder\n            holder.update(getItem(position) as Hoge)\n\n            return view\n        }\n```\n\n\u3044\u3044\u611f\u3058\u3067\u3059\u3002\n\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50\u3068\u304b\u3001apply\u30e1\u30bd\u30c3\u30c9\u3068\u304b\u306f\u4fbf\u5229\u3067\u3059\u3002\n*\u53b3\u5bc6\u306b\u8a00\u3048\u3070\u3001inflate()\u306e\u8fd4\u5024\u304cnull\u3067\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u8a00\u8a9e\u7684\u306b\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5b9f\u7528\u4e0a\u3001\u5dee\u3057\u652f\u3048\u306a\u3044\u3067\u3057\u3087\u3046\u3002*\n\n\u5b9f\u7528\u7684\u306a\u306e\u306f\u3053\u306e\u3042\u305f\u308a\u307e\u3067\u3067\u3001\u3053\u3053\u304b\u3089\u5148\u306f\u3001\u3084\u308c\u3070\u3067\u304d\u308b\u3088\u3068\u3044\u3046\u9818\u57df\u306b\u306a\u308a\u307e\u3059\u3002\n*\u5b9f\u969b\u3001\u81ea\u5206\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3053\u306e\u5f62\u3067\u3059\u3002*\n\n### as\u306f()\u3067\u304f\u304f\u308a\u3084\u3059\u3044\n\nJava\u306e\u30ad\u30e3\u30b9\u30c8\u3068\u7570\u306a\u308a\u3001Kotlin\u306eas\u3092\u4f7f\u3063\u305f\u30ad\u30e3\u30b9\u30c8\u306f\u3001\u30ab\u30c3\u30b3\u3067\u304f\u304f\u3063\u3066\u3082\u53ef\u8aad\u6027\u304c\u60aa\u304f\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n```Kotlin\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n            val view = convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }\n            \n            (view.tag as ViewHolder).update(getItem(position) as Hoge)\n\n            return view\n        }\n```\n\n\u3053\u308c\u304cJava\u3060\u3068\u3001\n\n```java\n            ((ViewHolder) view.getTag()).update((Hoge) getItem(position));\n```\n\n\u30ab\u30c3\u30b3\u304c\u591a\u304f\u306a\u308a\u3059\u304e\u3066\u4f7f\u3046\u6c17\u306b\u306a\u308c\u307e\u305b\u3093\u3002\n\n### \u4ed5\u4e0a\u3052\u306eapply\n\n\u3053\u3053\u307e\u3067\u6765\u308c\u3070\u3001\u4e00\u884c\u3067\u307e\u3068\u3081\u305f\u304f\u306a\u308b\u306e\u3082\u3084\u3080\u306a\u3057\u3067\u3059\u3002\uff08 *\u306a\u304f\u306a\u3044* \uff09\n\n```Kotlin\n        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View = (convertView ?: getLayoutInflater().inflate(R.layout.hoge, parent, false).apply { tag = ViewHolder(this) }).apply { (tag as ViewHolder).update(getItem(position) as Hoge) }\n```\n\n\u3069\u3084\u3041\uff01\n\n\n*\u3084\u308a\u904e\u304e\u3067\u3059\u306d\u3002*\n\n### \u307e\u3068\u3081\n\n* ?: \u306f\u6c17\u304c\u5229\u304f\u3084\u3064\n* apply{} \u306f\u4fbf\u5229\n* as \u306f\u30d3\u30e5\u30fc\u30ea\u30db\u30fc\n\n\u307f\u3093\u306a\u3082Kotlin\u306b\u4e57\u308a\u63db\u3048\u3088\u3046\uff01\n\n"}