{"context": " More than 1 year has passed since last update.Ref:\n[1] - play test \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305fconf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n[2] - github - typesafehub/config\n\nUsing config file absolutely make your life easier to deploy, debug, and test your applications.\nSometimes people want to use different config file to run dev or run prod, Sometimes people just want to use different config to test.\nSo, I'm going to show how to use multiple config files in sbt project.\nIn this post, I create minimal project by using typesafe's activator, and I strongly command this tool to create small and clean project with least dependency to train skills.\n\nNormal way to use config in sbt project\nFirstly, create simple sbt Scala project. I created it by using activator:\n./activator new\n\nAnd then follow the command wizard to choose minimal-scala as your project type, and fill up the project name.\nTo load config file, you will need one extra dependency: typesafe's config.\nAnd following to the build.sbt file under the root directory of the project.\nresolvers += \"Typesafe Repo\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\nlibraryDependencies += \"com.typesafe\" % \"config\" % \"1.2.1\"\n\nNow your build.sbt file should looks like:\nname := \"\"\"project-name\"\"\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.1\"\n\nresolvers += \"Typesafe Repo\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Change this to another test framework if you prefer\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"2.1.6\" % \"test\"\n\nlibraryDependencies += \"com.typesafe\" % \"config\" % \"1.2.1\"\n\nOk, by now, you could use a module named ConfigFactory in your project to load your config files.\nIt's time to add your own config file. \nAdd application.config under your src/main/resources, and write some random configs into it.\nHere is mine:\ntest.text1=\"1\"\ntest.text2=\"2\"\ntest.text3=\"3\"\n\nTo check whether this config file could be properly loaded, write a simple program to check it out:\nimport com.typesafe.config.ConfigFactory\n\nobject Hello {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello, config!\")\n    val configText1 = ConfigFactory.load().getConfig(\"test\").getString(\"text1\")\n    val configText2 = ConfigFactory.load().getConfig(\"test\").getString(\"text2\")\n    val configText3 = ConfigFactory.load().getConfig(\"test\").getString(\"text3\")\n    println(configText1)\n    println(configText2)\n    println(configText3)\n  }\n}\n\nWhen run this script, it will give:\nHello, config!\n1\n2\n3\n\n\nUse config in your test\nIn most cases, people use a set of different configs in their tests.\nIt would be great if one can just replace some of the configs in the src/main/resources/application.conf and keep the others.\nActually, when run sbt test, sbt will first look for src/main/resources/application.config and then use src/test/resources/application.confg to overwrite configs in the first one.\n\nNote: sbt will do the overwrite even if you not use include \"application.config\" in the src/test/resources/application.config.\n\nTo check that, add new test case under src/test/scala in your project:\nimport com.typesafe.config.ConfigFactory\nimport org.scalatest._\n\nclass HelloSpec extends FlatSpec with Matchers {\n  \"Hello\" should \"have tests\" in {\n    val configText1 = ConfigFactory.load().getConfig(\"test\").getString(\"text1\")\n    val configText2 = ConfigFactory.load().getConfig(\"test\").getString(\"text2\")\n    val configText3 = ConfigFactory.load().getConfig(\"test\").getString(\"text3\")\n    println(configText1)\n    println(configText2)\n    println(configText3)\n\n    true should be === true\n  }\n}\n\nThen add config file for the test as src/test/resources/application.conf.\ntest.text2=\"22\"\n\nWhen you run sbt test you will get this as expected:\n1\n22\n3\n\n\nUse specific config file\nNormally, you can specify the config file by use sbt parameter -Dconfig.file or -Dconfig.resource.(for detailed information please refer to this doc)\nBut in team work, you probably want this to be static, and use the file you have specified whenever and whoever run sbt test.\nIn that case, you need to put a extra in your build.sbt:\nfork in Test := true // allow to apply extra setting to Test\n\njavaOptions in Test += \"-Dconfig.resource=test.conf\" // apply extra setting here\n\nAnd then, put your test.conf to the src/test/resources/test.conf:\ninclude \"application.conf\"\n\ntest.text3=\"333\"\n\n\nNote that in this time you will have to use include \"application.conf\".\n\nAnd this time when you run sbt test, you will get:\n1\n22\n333\n\nThat is because the sequence of config files overwrite each others is: \nsrc/test/resources/test.conf\nsrc/test/resources/application.conf\nsrc/main/resources/application.conf\n\nNote that no matter you like or not, once you include the \"application.conf\",\nthe sbt will first try to find src/test/resources/application.conf.\nIf that does not exist, then it will find src/test/resources/application.conf.\nEven if you delete the src/test/resources/application.conf, the src/main/resources/application.conf is still in the system.\nHere is the result if there is no src/test/resources/application.conf in the project:\n1\n2\n333\n\n\nRef:\n\n[1] - [play test \u5b9f\u884c\u6642\u306b\u6307\u5b9a\u3057\u305fconf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080](http://qiita.com/TomoyaIgarashi/items/4106feb940fbd2be0b4c#3-1)\n\n[2] - [github - typesafehub/config](https://github.com/typesafehub/config)\n\n***\n\nUsing config file absolutely make your life easier to deploy, debug, and test your applications.\nSometimes people want to use different config file to run dev or run prod, Sometimes people just want to use different config to test.\n\nSo, I'm going to show how to use multiple config files in *sbt project*.\nIn this post, I create minimal project by using [typesafe's activator](https://typesafe.com/activator), and I strongly command this tool to create small and clean project with least dependency to train skills.\n\n# Normal way to use config in sbt project\n\nFirstly, create simple sbt Scala project. I created it by using *activator*:\n\n```\n./activator new\n```\n\nAnd then follow the command wizard to choose `minimal-scala` as your project type, and fill up the project name.\n\nTo load config file, you will need one extra dependency: **typesafe's config**.\n\nAnd following to the `build.sbt` file under the root directory of the project.\n\n``` scala\nresolvers += \"Typesafe Repo\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\nlibraryDependencies += \"com.typesafe\" % \"config\" % \"1.2.1\"\n```\n\nNow your `build.sbt` file should looks like:\n\n``` scala\nname := \"\"\"project-name\"\"\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.1\"\n\nresolvers += \"Typesafe Repo\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Change this to another test framework if you prefer\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"2.1.6\" % \"test\"\n\nlibraryDependencies += \"com.typesafe\" % \"config\" % \"1.2.1\"\n```\n\nOk, by now, you could use a module named ***ConfigFactory*** in your project to load your config files.\n\n\nIt's time to add your own config file. \n\nAdd `application.config` under your `src/main/resources`, and write some random configs into it.\nHere is mine:\n\n```\ntest.text1=\"1\"\ntest.text2=\"2\"\ntest.text3=\"3\"\n```\n\nTo check whether this config file could be properly loaded, write a simple program to check it out:\n\n``` scala\nimport com.typesafe.config.ConfigFactory\n\nobject Hello {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello, config!\")\n    val configText1 = ConfigFactory.load().getConfig(\"test\").getString(\"text1\")\n    val configText2 = ConfigFactory.load().getConfig(\"test\").getString(\"text2\")\n    val configText3 = ConfigFactory.load().getConfig(\"test\").getString(\"text3\")\n    println(configText1)\n    println(configText2)\n    println(configText3)\n  }\n}\n```\n\nWhen run this script, it will give:\n\n``` scala\nHello, config!\n1\n2\n3\n```\n\n# Use config in your test\n\nIn most cases, people use a set of different configs in their tests.\nIt would be great if one can just replace some of the configs in the `src/main/resources/application.conf` and keep the others.\n\nActually, when run `sbt test`, sbt will first look for `src/main/resources/application.config` and then use `src/test/resources/application.confg` to overwrite configs in the first one.\n\n> Note: sbt will do the overwrite even if you not use `include \"application.config\"` in the `src/test/resources/application.config`.\n\nTo check that, add new test case under `src/test/scala` in your project:\n\n``` scala\nimport com.typesafe.config.ConfigFactory\nimport org.scalatest._\n\nclass HelloSpec extends FlatSpec with Matchers {\n  \"Hello\" should \"have tests\" in {\n    val configText1 = ConfigFactory.load().getConfig(\"test\").getString(\"text1\")\n    val configText2 = ConfigFactory.load().getConfig(\"test\").getString(\"text2\")\n    val configText3 = ConfigFactory.load().getConfig(\"test\").getString(\"text3\")\n    println(configText1)\n    println(configText2)\n    println(configText3)\n\n    true should be === true\n  }\n}\n```\n\nThen add config file for the test as `src/test/resources/application.conf`.\n\n``` scala\ntest.text2=\"22\"\n```\nWhen you run `sbt test` you will get this as expected:\n\n```\n1\n22\n3\n```\n\n# Use specific config file\n\nNormally, you can specify the config file by use sbt parameter `-Dconfig.file` or `-Dconfig.resource`.(for detailed information please refer to [this doc](https://github.com/typesafehub/config#standard-behavior))\n\nBut in team work, you probably want this to be static, and use the file you have specified whenever and whoever run `sbt test`.\nIn that case, you need to put a extra in your `build.sbt`:\n\n``` scala\nfork in Test := true // allow to apply extra setting to Test\n\njavaOptions in Test += \"-Dconfig.resource=test.conf\" // apply extra setting here\n```\n\nAnd then, put your test.conf to the `src/test/resources/test.conf`:\n\n``` scala\ninclude \"application.conf\"\n\ntest.text3=\"333\"\n```\n\n> Note that in this time you will have to use `include \"application.conf\"`.\n\nAnd this time when you run `sbt test`, you will get:\n\n```\n1\n22\n333\n```\n\nThat is because the sequence of config files overwrite each others is: \n\n```\nsrc/test/resources/test.conf\nsrc/test/resources/application.conf\nsrc/main/resources/application.conf\n```\n\n***Note*** that no matter you like or not, once you include the \"application.conf\",\nthe sbt will first try to find `src/test/resources/application.conf`.\nIf that does not exist, then it will find `src/test/resources/application.conf`.\n\nEven if you delete the `src/test/resources/application.conf`, the `src/main/resources/application.conf` is still in the system.\n\nHere is the result if there is no `src/test/resources/application.conf` in the project:\n\n```\n1\n2\n333\n```\n", "tags": ["Scala", "sbt"]}