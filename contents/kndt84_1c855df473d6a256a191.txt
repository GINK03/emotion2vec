{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u696d\u52d9\u3067\u30dd\u30a2\u30bd\u30f3\u5206\u5e03\u306b\u5f93\u3046\u30ab\u30a6\u30f3\u30c8\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\u306e\u5dee\u306e\u691c\u5b9a\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u306a\u304f\u3001\u4e0b\u8a18\u306e\u8ad6\u6587\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3092\u884c\u3063\u305f\u306e\u3067\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nA more powerful test for comparing two Poisson means\n\u691c\u5b9a\u306e\u65b9\u6cd5\u306b\u306f\u3001the conditional test (C-test) \u3068\u547c\u3070\u308c\u308b\u65b9\u6cd5\u3068\u3001\u3053\u306e\u8ad6\u6587\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u308bP\u5024\u3092\u4f7f\u3063\u305f\u691c\u5b9a (E-test) \u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u691c\u51fa\u529b\u306e\u9ad8\u3044 E-test \u306e\u65b9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n\u7c21\u5358\u306a\u8aac\u660e\nn1,n2n1,n2n1, n2\uff1a\u5358\u4f4d\u6642\u9593\u306e\u7d4c\u904e\u56de\u6570\nk1,k2k1,k2k1, k2\uff1a\u4e8b\u8c61\u306e\u767a\u751f\u56de\u6570\u306e\u5168\u671f\u9593\u306e\u5408\u8a08\nddd\uff1a\u691c\u5b9a\u3057\u305f\u3044\u5e73\u5747\u306e\u5dee\n\u3068\u3057\u305f\u3068\u304d\u3001\n\u5e30\u7121\u4eee\u8aac H0:\u03bb1=\u03bb2+dH0:\u03bb1=\u03bb2+dH_0: \\lambda_1 = \\lambda_2 + d\n\u5bfe\u7acb\u4eee\u8a2d H1:\u03bb1\u2260\u03bb2+dH1:\u03bb1\u2260\u03bb2+dH_1: \\lambda_1 \\neq \\lambda_2 + d\n\u306e\u4eee\u8aac\u691c\u5b9a\u3092\u884c\u3046\u5834\u5408\u306eP\u5024\u306f\u4e0b\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u308b\u3002\n\n\\begin{align}\n& \\hat{\\lambda}_{2k} = \\frac{k_1 + k_2}{n_1 + n_2} - \\frac{d n_1}{n_1 + n_2}\\\\[2mm]\n\n& p = \\sum_{x_1=0}^{k_1} \\sum_{x_2=0}^{k_2}\n\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n\\frac{e^{-n_2\\hat{\\lambda}_{2k}}(n_2(\\hat{\\lambda}_{2k}))^{x_2}}{x_2!}\n\\end{align}\n\u02c6\u03bb2k=k1+k2n1+n2\u2212dn1n1+n2p=k1\u2211x1=0k2\u2211x2=0e\u2212n1(\u02c6\u03bb2k+d)(n1(\u02c6\u03bb2k+d))x1x1!e\u2212n2\u02c6\u03bb2k(n2(\u02c6\u03bb2k))x2x2!\u03bb^2k=k1+k2n1+n2\u2212dn1n1+n2p=\u2211x1=0k1\u2211x2=0k2e\u2212n1(\u03bb^2k+d)(n1(\u03bb^2k+d))x1x1!e\u2212n2\u03bb^2k(n2(\u03bb^2k))x2x2!{\n\\begin{align}\n& \\hat{\\lambda}_{2k} = \\frac{k_1 + k_2}{n_1 + n_2} - \\frac{d n_1}{n_1 + n_2}\\\\[2mm]\n\n& p = \\sum_{x_1=0}^{k_1} \\sum_{x_2=0}^{k_2}\n\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n\\frac{e^{-n_2\\hat{\\lambda}_{2k}}(n_2(\\hat{\\lambda}_{2k}))^{x_2}}{x_2!}\n\\end{align}\n}\n\n\u5b9f\u88c5\n\n\u4f7f\u3044\u65b9\n\u4e0a\u8a18\u306e\u5f0f\u3092Python \u3068 Ruby \u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u304c\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6bd4\u8f03\u3057\u305f\u3044\u30ab\u30a6\u30f3\u30c8\u6570\u304c\u305d\u308c\u305e\u308c\u300140\u306865\u3060\u3063\u305f\u5834\u5408\u3001\uff12\u3064\u306e\u5e73\u5747\u5024\u306b\u512a\u4f4d\u306a\u5dee\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\npois_mean_diff_test(40, 65)\n=> 0.04921332025427114\n\n\u3068\u3059\u308b\u3068P\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u3001P\u5024\u304c 0.05 \u3092\u4e0b\u56de\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u306e\u3067\u30015%\u6c34\u6e96\u3067\u512a\u4f4d\u306b\u5dee\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u6ce8\u610f\u70b9\n\u6570\u5f0f\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u8a08\u7b97\u3067\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u306e\u3067\u3001\u968e\u4e57\u306e\u8a08\u7b97\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5206\u89e3\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n= e^{-n_1(\\hat{\\lambda}_{2k}+d)} \\times\n\\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1} \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1 -1} \\times \\dots \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{1}\n\ne\u2212n1(\u02c6\u03bb2k+d)(n1(\u02c6\u03bb2k+d))x1x1!=e\u2212n1(\u02c6\u03bb2k+d)\u00d7n1(\u02c6\u03bb2k+d)x1\u00d7n1(\u02c6\u03bb2k+d)x1\u22121\u00d7\u22ef\u00d7n1(\u02c6\u03bb2k+d)1e\u2212n1(\u03bb^2k+d)(n1(\u03bb^2k+d))x1x1!=e\u2212n1(\u03bb^2k+d)\u00d7n1(\u03bb^2k+d)x1\u00d7n1(\u03bb^2k+d)x1\u22121\u00d7\u22ef\u00d7n1(\u03bb^2k+d)1{\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n= e^{-n_1(\\hat{\\lambda}_{2k}+d)} \\times\n\\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1} \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1 -1} \\times \\dots \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{1}\n\n}\n\nPython\u3067\u306e\u5b9f\u88c5\n\nPython\nimport math\nimport numpy as np\n\ndef pois_mean_diff_test(k1, k2, n1=1, n2=1, d=0.0):\n\n    x1_seq = range(0, k1 + 1)\n    x2_seq = range(0, k2 + 1)\n    l2k = (k1+k2)/(n1+n2) - d*n1/(n1+n2)\n\n    p_value = sum([math.exp(-n1*(l2k+d)) * np.prod([n1*(l2k+d)/i for i in range(1, x1+1)]) * \\\n                   math.exp(-n2*l2k) * np.prod([n2*l2k/j for j in range(1, x2+1)]) \\\n                   for x2 in x2_seq for x1 in x1_seq])\n\n    return p_value\n\nif __name__ == '__main__':\n    print \"P-value is \" + str(pois_mean_diff_test(40, 65))\n\n\n\nRuby\u3067\u306e\u5b9f\u88c5\n\nRuby\ndef pois_mean_diff_test(k1, k2, n1=1, n2=1, d=0.0, alpha=0.05)\n\n  x1_seq = Array(0..k1)\n  x2_seq = Array(0..k2)\n\n  l2k = (k1+k2)/(n1+n2) - d*n1/(n1+n2)\n\n  p_value = x1_seq.product(x2_seq).map{|x| x1=x[0]; x2=x[1];\n    Math.exp(-n1*(l2k+d)) * Array(1..x1).map{|i| n1*(l2k+d)/i }.inject(:*).to_f *\n    Math.exp(-n1*l2k) * Array(1..x2).map{|j| n2*l2k/j }.inject(:*).to_f\n  }.inject(:+)\n\n  return p_value\nend\n\nout = \"P-value is \" + pois_mean_diff_test(20,10).to_s\nputs out\n\n\n\n\u53c2\u8003\u6587\u732e\nK. Krishnamoorthy, Jessica Thomson, A more powerful test for comparing two Poisson means, Journal of Statistical Planning and Inference, Volume 119, Issue 1, 15 January 2004, Pages 23-35\n# \u306f\u3058\u3081\u306b\n\n\u696d\u52d9\u3067\u30dd\u30a2\u30bd\u30f3\u5206\u5e03\u306b\u5f93\u3046\u30ab\u30a6\u30f3\u30c8\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\u306e\u5dee\u306e\u691c\u5b9a\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u306a\u304f\u3001\u4e0b\u8a18\u306e\u8ad6\u6587\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3092\u884c\u3063\u305f\u306e\u3067\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n[A more powerful test for comparing two Poisson means]\n(http://www.sciencedirect.com/science/article/pii/S0378375802004081)\n\n\u691c\u5b9a\u306e\u65b9\u6cd5\u306b\u306f\u3001the conditional test (C-test) \u3068\u547c\u3070\u308c\u308b\u65b9\u6cd5\u3068\u3001\u3053\u306e\u8ad6\u6587\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u308bP\u5024\u3092\u4f7f\u3063\u305f\u691c\u5b9a (E-test) \u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u691c\u51fa\u529b\u306e\u9ad8\u3044 E-test \u306e\u65b9\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n# \u7c21\u5358\u306a\u8aac\u660e\n\n$n1, n2$\uff1a\u5358\u4f4d\u6642\u9593\u306e\u7d4c\u904e\u56de\u6570\n$k1, k2$\uff1a\u4e8b\u8c61\u306e\u767a\u751f\u56de\u6570\u306e\u5168\u671f\u9593\u306e\u5408\u8a08\n$d$\uff1a\u691c\u5b9a\u3057\u305f\u3044\u5e73\u5747\u306e\u5dee\n\n\u3068\u3057\u305f\u3068\u304d\u3001\n\n\u5e30\u7121\u4eee\u8aac $H_0: \\lambda_1 = \\lambda_2 + d$\n\u5bfe\u7acb\u4eee\u8a2d $H_1: \\lambda_1 \\neq \\lambda_2 + d$\n\n\u306e\u4eee\u8aac\u691c\u5b9a\u3092\u884c\u3046\u5834\u5408\u306eP\u5024\u306f\u4e0b\u8a18\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u308b\u3002\n\n```math\n\n\\begin{align}\n& \\hat{\\lambda}_{2k} = \\frac{k_1 + k_2}{n_1 + n_2} - \\frac{d n_1}{n_1 + n_2}\\\\[2mm]\n\n& p = \\sum_{x_1=0}^{k_1} \\sum_{x_2=0}^{k_2}\n\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n\\frac{e^{-n_2\\hat{\\lambda}_{2k}}(n_2(\\hat{\\lambda}_{2k}))^{x_2}}{x_2!}\n\\end{align}\n```\n\n# \u5b9f\u88c5\n\n## \u4f7f\u3044\u65b9\n\n\u4e0a\u8a18\u306e\u5f0f\u3092Python \u3068 Ruby \u3067\u5b9f\u88c5\u3057\u305f\u3082\u306e\u304c\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6bd4\u8f03\u3057\u305f\u3044\u30ab\u30a6\u30f3\u30c8\u6570\u304c\u305d\u308c\u305e\u308c\u300140\u306865\u3060\u3063\u305f\u5834\u5408\u3001\uff12\u3064\u306e\u5e73\u5747\u5024\u306b\u512a\u4f4d\u306a\u5dee\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\n\n```\npois_mean_diff_test(40, 65)\n=> 0.04921332025427114\n```\n\n\u3068\u3059\u308b\u3068P\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u3001P\u5024\u304c 0.05 \u3092\u4e0b\u56de\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u306e\u3067\u30015%\u6c34\u6e96\u3067\u512a\u4f4d\u306b\u5dee\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n## \u6ce8\u610f\u70b9\n\n\u6570\u5f0f\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u8a08\u7b97\u3067\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u306e\u3067\u3001\u968e\u4e57\u306e\u8a08\u7b97\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5206\u89e3\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```math\n\\frac{e^{-n_1(\\hat{\\lambda}_{2k}+d)}(n_1(\\hat{\\lambda}_{2k} + d))^{x_1}}{x_1!}\n= e^{-n_1(\\hat{\\lambda}_{2k}+d)} \\times\n\\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1} \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{x_1 -1} \\times \\dots \\times \\frac{n_1(\\hat{\\lambda}_{2k} + d)}{1}\n\n```\n\n## Python\u3067\u306e\u5b9f\u88c5\n\n```py:Python\nimport math\nimport numpy as np\n\ndef pois_mean_diff_test(k1, k2, n1=1, n2=1, d=0.0):\n\n    x1_seq = range(0, k1 + 1)\n    x2_seq = range(0, k2 + 1)\n    l2k = (k1+k2)/(n1+n2) - d*n1/(n1+n2)\n\n    p_value = sum([math.exp(-n1*(l2k+d)) * np.prod([n1*(l2k+d)/i for i in range(1, x1+1)]) * \\\n                   math.exp(-n2*l2k) * np.prod([n2*l2k/j for j in range(1, x2+1)]) \\\n                   for x2 in x2_seq for x1 in x1_seq])\n\n    return p_value\n\nif __name__ == '__main__':\n    print \"P-value is \" + str(pois_mean_diff_test(40, 65))\n```\n\n## Ruby\u3067\u306e\u5b9f\u88c5\n\n```ruby:Ruby\ndef pois_mean_diff_test(k1, k2, n1=1, n2=1, d=0.0, alpha=0.05)\n\n  x1_seq = Array(0..k1)\n  x2_seq = Array(0..k2)\n\n  l2k = (k1+k2)/(n1+n2) - d*n1/(n1+n2)\n\n  p_value = x1_seq.product(x2_seq).map{|x| x1=x[0]; x2=x[1];\n    Math.exp(-n1*(l2k+d)) * Array(1..x1).map{|i| n1*(l2k+d)/i }.inject(:*).to_f *\n    Math.exp(-n1*l2k) * Array(1..x2).map{|j| n2*l2k/j }.inject(:*).to_f\n  }.inject(:+)\n\n  return p_value\nend\n\nout = \"P-value is \" + pois_mean_diff_test(20,10).to_s\nputs out\n```\n\n\n# \u53c2\u8003\u6587\u732e\n\n[K. Krishnamoorthy, Jessica Thomson, A more powerful test for comparing two Poisson means, *Journal of Statistical Planning and Inference*, Volume 119, Issue 1, 15 January 2004, Pages 23-35]\n(http://www.sciencedirect.com/science/article/pii/S0378375802004081)\n\n", "tags": ["\u7d71\u8a08\u5b66", "Ruby", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "statistics"]}