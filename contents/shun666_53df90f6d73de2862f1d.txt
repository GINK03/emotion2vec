{"context": " More than 1 year has passed since last update.\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ pip install django\n$ pip install django-celery\n$ pip freeze\namqp==1.4.8\nanyjson==0.3.3\nbilliard==3.3.0.22\ncelery==3.1.19\nDjango==1.9\ndjango-celery==3.1.17\nkombu==3.0.30\npytz==2015.7\nwheel==0.24.0\n\n\n\nDjango\u306e\u8a2d\u5b9a\n1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n$ django-admin.py startproject proj\n$ python manage.py startapp sampleapp\n/c/dev/projects/proj\n\n\u78ba\u8a8d\n|--manage.py\n|--proj\n| |--__init__.py\n| |--settings.py\n| |--urls.py\n| |--wsgi.py\n|--sampleapp\n| |--__init__.py\n| |--admin.py\n| |--apps.py\n| |--migrations\n| | |--__init__.py\n| |--models.py\n| |--tests.py\n| |--views.py\n\n2 settings\n/proj/settings.py\nINSTALLED_APPS = (\n\n    'djcelery',\n    'kombu.transport.django',\n    'sampleapp',\n)\n\n# Celery Setting\nimport djcelery\ndjcelery.setup_loader()\nBROKER_URL = 'django://'\n# Tasks will be executed asynchronously.\nCELERY_ALWAYS_EAGER = False\n\n/proj/celery.py\nfrom __future__ import absolute_import\n\nimport os\n\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n\nfrom django.conf import settings  # noqa\n\napp = Celery('proj')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n\n/proj/init.py\nfrom __future__ import absolute_import\n\n# This will make sure the app is always imported when\n# Django starts so that shared_task will use this app.\nfrom .celery import app as celery_app  # noqa\n\n3 \u30bf\u30b9\u30af\u306e\u5b9f\u88c5\n/sampleapp/tasks.py\nimport time\n\nfrom celery import task\n\n@task\ndef add(a, b):\n    time.sleep(10)\n    return a + b\n\n4 DB\u306e\u521d\u671f\u5316\n$  python manage.py makemigrations djcelery\nMigrations for 'djcelery':\n  0002_auto_20151211_1830.py:\n    - Alter field status on taskmeta\n    - Alter field state on taskstate\n\n$  python manage.py migrate djcelery\nOperations to perform:\n  Apply all migrations: djcelery\nRunning migrations:\n  Rendering model states... DONE\n  Applying djcelery.0002_auto_20151211_1830... OK\n\n\n\n\u5b9f\u884c\n1 Celery \u30ef\u30fc\u30ab\u30fc\u306e\u8d77\u52d5\n$ celery -A proj worker -l info -c 1\n\n2 Django\u306eshell\u304b\u3089\u5b9f\u884c\n$  python manage.py shell\n\n(InteractiveConsole)\n>>> from sampleapp.tasks import add\n>>> result = add.delay(1, 2)\n>>> result.ready()\nFalse\n>>> result.ready()  # 10\u79d2\u7d4c\u904e\nTrue\n>>> result.get()\n3\n\n\n* * *\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\n$ pip install django\n$ pip install django-celery\n$ pip freeze\namqp==1.4.8\nanyjson==0.3.3\nbilliard==3.3.0.22\ncelery==3.1.19\nDjango==1.9\ndjango-celery==3.1.17\nkombu==3.0.30\npytz==2015.7\nwheel==0.24.0\n```\n\n* * *\n# Django\u306e\u8a2d\u5b9a\n\n1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n```bash\n$ django-admin.py startproject proj\n$ python manage.py startapp sampleapp\n/c/dev/projects/proj\n```\n\n\u78ba\u8a8d\n\n```bash\n|--manage.py\n|--proj\n| |--__init__.py\n| |--settings.py\n| |--urls.py\n| |--wsgi.py\n|--sampleapp\n| |--__init__.py\n| |--admin.py\n| |--apps.py\n| |--migrations\n| | |--__init__.py\n| |--models.py\n| |--tests.py\n| |--views.py\n```\n\n2 settings\n\n/proj/settings.py\n\n```py3\nINSTALLED_APPS = (\n\n    'djcelery',\n    'kombu.transport.django',\n    'sampleapp',\n)\n\n# Celery Setting\nimport djcelery\ndjcelery.setup_loader()\nBROKER_URL = 'django://'\n# Tasks will be executed asynchronously.\nCELERY_ALWAYS_EAGER = False\n```\n\n/proj/celery.py\n\n```py3\nfrom __future__ import absolute_import\n\nimport os\n\nfrom celery import Celery\n\n# set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proj.settings')\n\nfrom django.conf import settings  # noqa\n\napp = Celery('proj')\n\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object('django.conf:settings')\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\napp.conf.update(\n    CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend',\n)\n\n@app.task(bind=True)\ndef debug_task(self):\n    print('Request: {0!r}'.format(self.request))\n```\n\n/proj/__init__.py\n\n\n```py3\nfrom __future__ import absolute_import\n\n# This will make sure the app is always imported when\n# Django starts so that shared_task will use this app.\nfrom .celery import app as celery_app  # noqa\n```\n\n3 \u30bf\u30b9\u30af\u306e\u5b9f\u88c5\n\n/sampleapp/tasks.py\n\n```py3\nimport time\n\nfrom celery import task\n\n@task\ndef add(a, b):\n    time.sleep(10)\n    return a + b\n```\n4 DB\u306e\u521d\u671f\u5316\n\n```bash\n$  python manage.py makemigrations djcelery\nMigrations for 'djcelery':\n  0002_auto_20151211_1830.py:\n    - Alter field status on taskmeta\n    - Alter field state on taskstate\n\n$  python manage.py migrate djcelery\nOperations to perform:\n  Apply all migrations: djcelery\nRunning migrations:\n  Rendering model states... DONE\n  Applying djcelery.0002_auto_20151211_1830... OK\n```\n\n* * *\n# \u5b9f\u884c\n\n1 Celery \u30ef\u30fc\u30ab\u30fc\u306e\u8d77\u52d5\n\n```bash\n$ celery -A proj worker -l info -c 1\n```\n\n2 Django\u306eshell\u304b\u3089\u5b9f\u884c\n\n```bash\n$  python manage.py shell\n```\n\n```pycon\n(InteractiveConsole)\n>>> from sampleapp.tasks import add\n>>> result = add.delay(1, 2)\n>>> result.ready()\nFalse\n>>> result.ready()  # 10\u79d2\u7d4c\u904e\nTrue\n>>> result.get()\n3\n```\n\n", "tags": ["Python", "Django", "Celery"]}