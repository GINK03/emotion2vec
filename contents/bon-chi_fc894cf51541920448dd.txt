{"context": "\n\n\u76ee\u7684\nRust\u3067FFI\u3092\u8a66\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u5b9f\u88c5\u3059\u308b\n\n\u3053\u306e\u30da\u30fc\u30b8\u306e\u30b9\u30b3\u30fc\u30d7\n\n\u30b9\u30b3\u30fc\u30d7\u5bfe\u8c61\u5185\n\nRust\u3067FFI\u3092\u4f7f\u3046\nlibc\u3092\u4f7f\u3046\n\n\n\u30b9\u30b3\u30fc\u30d7\u5bfe\u8c61\u5916\n\n\u52b9\u7387\u304c\u826f\u304b\u3063\u305f\u308a\u3001\u5b9f\u884c\u6642\u9593\u304c\u77ed\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u3092\u3057\u3063\u304b\u308a\u5b9f\u88c5\u3057\u305f\u5805\u7262\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\n\u984c\u6750\nwho\u30b3\u30de\u30f3\u30c9\n\n\u74b0\u5883\nubuntu16.04(\u74b0\u5883\u304c\u9055\u3046\u3068\u30b3\u30fc\u30c9\u3082\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f)\n\n\u4ed5\u69d8\n\u624b\u5143\u306e\u74b0\u5883\u3067\u306fwho\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u51fa\u529b\u304c\u3055\u308c\u308b\n% who\nbonchi     tty7         2017-01-22 12:32 (:0)\nbonchi     pts/20       2017-01-22 12:36 (tmux(4371).%0)\n\n\n\u5b9f\u88c5\n\nC\u5b9f\u88c5\n\nwho\u30b3\u30de\u30f3\u30c9\u306futmp\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u4e2d\u8eab\u3092\u8868\u793a\u3057\u3066\u3044\u308b\nutmp\u30d5\u30a1\u30a4\u30eb\u306futmp\u30a8\u30f3\u30c8\u30ea\u306e\u69cb\u9020\u4f53\u306e\u9023\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\nutmp\u30a8\u30f3\u30c8\u30ea\u306futmp.h\u30d5\u30a1\u30a4\u30eb\u3067struct utmp\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\nutmp.h\u306f/usr/include/utmp.h\u306b\u3042\u308b\n\n/usr/include/utmp.h\u3092\u8997\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\n\n/usr/include/utmp.h\n/* Get system dependent values and data structures.  */\n#include <bits/utmp.h> \n\n\n\u306e\u3067\u3001\u4eca\u5ea6\u306f/usr/include/x86_64-linux-gnu/bits/utmp.h\u3092\u898b\u3066\u307f\u308b\n\n/usr/include/x86_64-linux-gnu/bits/utmp.h\n/* The structure describing an entry in the user accounting database.  */\n#define UT_LINESIZE     32 \n#define UT_NAMESIZE     32 \n#define UT_HOSTSIZE     256\n\nstruct utmp\n{\n  short int ut_type;            /* Type of login.  */\n  pid_t ut_pid;                 /* Process ID of login process.  */\n  char ut_line[UT_LINESIZE];    /* Devicename.  */\n  char ut_id[4];                /* Inittab ID.  */\n  char ut_user[UT_NAMESIZE];    /* Username.  */\n  char ut_host[UT_HOSTSIZE];    /* Hostname for remote login.  */\n  struct exit_status ut_exit;   /* Exit status of a process marked as DEAD_PROCESS.  */\n/* The ut_session and ut_tv fields must be the same size when compiled 32- and 64-bit.  This allows data files and shared memory to be shared between 32- and 64-bit applications.  */\n  #ifdef __WORDSIZE_TIME64_COMPAT32\n    int32_t ut_session;           /* Session ID, used for windowing.  */\n    struct\n    {\n      int32_t tv_sec;             /* Seconds.  */\n      int32_t tv_usec;            /* Microseconds.  */\n    } ut_tv;                      /* Time entry was made.  */\n  #else\n    long int ut_session;          /* Session ID, used for windowing.  */\n    struct timeval ut_tv;         /* Time entry was made.  */\n  #endif\n\n  int32_t ut_addr_v6[4];        /* Internet address of remote host.  */\n  char __glibc_reserved[20];            /* Reserved for future use.  */\n};\n\n/* \u7565 */\n\n/* The structure describing the status of a terminated process.  This type is used in `struct utmp' below.  */\nstruct exit_status\n{\n  short int e_termination;    /* Process termination status.  */\n  short int e_exit;           /* Process exit status.  */\n};\n\n\n\u79c1\u306e\u74b0\u5883\u3067\u306f__WORDSIZE_TIME64_COMPAT32\u306ftrue\n\u4e00\u756a\u5358\u7d14\u306aC\u5b9f\u88c5\u306futmp\u30d5\u30a1\u30a4\u30eb\u304b\u3089utmp\u30a8\u30f3\u30c8\u30ea\u3092\u3072\u3068\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3084\u308c\u3070\u3088\u3044\n\nsimple_who.c\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <utmp.h>\n\nint main() {\n  struct utmp current_record;\n  int utmpfd;\n  int reclen = sizeof(current_record);\n\n  if ((utmpfd = open(UTMP_FILE, O_RDONLY)) == -1) {\n    exit(1);\n  }\n\n  while (read(utmpfd, &current_record, reclen) == reclen)\n    /* current_record\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b */\n    close(utmpfd);\n    return 0;\n  }\n}            \n\n\n\nRust\u5b9f\u88c5\nRust\u3067who\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3082C\u4e92\u63db\u306astruct utmp\u3068\u305d\u308c\u306b\u95a2\u9023\u3059\u308b\u4ed6\u306estruct(ut_tv, exit_status)\u3068\u3001\u5b9a\u6570\u3092\u5b9a\u7fa9\u3057\u3066utmp\u30d5\u30a1\u30a4\u30eb\u304b\u3089utmp\u30a8\u30f3\u30c8\u30ea\u3092\u3072\u3068\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3084\u308c\u3070\u826f\u3044\n\n\u5b9a\u6570\n\nrust_who.rs\npub const UT_LINESIZE: usize = 32;\npub const UT_NAMESIZE: usize = 32;\npub const UT_HOSTSIZE: usize = 256;\nstatic UTMP_FILE_PATH: &'static str = \"/var/run/utmp\";\n\n\n\n\nUTMP_FILE_PATH\u306futmp\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u8868\u3057\u3066\u304a\u308a\u3001/usr/include/paths.h\u306b_PATH_UTMP\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u305f\n\n\nstruct\n\nrust_who.rs\nextern crate libc;\nuse libc::{c_short, pid_t, c_char, int32_t, c_int, size_t, c_void};\n\n#[repr(C)]\npub struct exit_status {\n    pub e_termination: c_short,\n    pub e_exit: c_short,\n}\n\n#[repr(C)]\npub struct ut_tv {\n    pub tv_sec: int32_t,\n    pub tv_usec: int32_t,\n}\n\n#[repr(C)]\npub struct utmp {\n    pub ut_type: c_short,\n    pub ut_pid: pid_t,\n    pub ut_line: [c_char; UT_LINESIZE],\n    pub ut_id: [c_char; 4],\n    pub ut_user: [c_char; UT_NAMESIZE],\n    pub ut_host: [c_char; UT_HOSTSIZE],\n    pub ut_exit: exit_status,\n    pub ut_session: int32_t,\n    pub ut_tv: ut_tv,\n    pub ut_addr_v6: [int32_t; 4],\n    pub __glibc_reserved: [c_char; 20],\n}\n\nimpl Default for exit_status {\n    fn default() -> exit_status {\n        exit_status {\n            e_termination: 0,\n            e_exit: 0,\n        }\n    }\n}\n\nimpl Default for ut_tv {\n    fn default() -> ut_tv {\n        ut_tv {\n            tv_sec: 0,\n            tv_usec: 0,\n        }\n    }\n}\n\nimpl Default for utmp {\n    fn default() -> utmp {\n        utmp {\n            ut_type: 0,\n            ut_pid: 0,\n            ut_line: [0; UT_LINESIZE],\n            ut_id: [0; 4],\n            ut_user: [0; UT_NAMESIZE],\n            ut_host: [0; UT_HOSTSIZE],\n            ut_exit: Default::default(),\n            ut_session: 0,\n            ut_tv: Default::default(),\n            ut_addr_v6: [0; 4],\n            __glibc_reserved: [0; 20],\n        }\n    }\n}\n\n\n\nC\u306estruct\u3092#[repr(C)]\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\n\n\nhttps://doc.rust-lang.org/nomicon/other-reprs.html#reprc\nhttps://doc.rust-lang.org/book/ffi.html#interoperability-with-foreign-code\n\n\nstruct\u306e\u30e1\u30f3\u30d0\u30fc\u306fC\u4e92\u63db\u306e\u578b\u306b\u3057\u305f\u3044\u306e\u3067libc crate\u3092\u4f7f\u3063\u3066\u3044\u308b\n\n\nhttps://github.com/rust-lang/libc\n\n\n\nDefaluttrate\u306e\u5b9f\u88c5\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001rust\u3067\u306f\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3044\u3061\u3044\u3061\u5024\u3092\u5165\u308c\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u7c21\u5358\u306b0\u3067\u521d\u671f\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\n\n\n\u95a2\u6570\n\nrust_who.rs\nextern \"C\" {\n    pub fn read(fd: c_int, buf: *mut c_void, count: size_t) -> usize;\n}\n\nfn main() {\n    let utmp_file = File::open(UTMP_FILE_PATH).unwrap();\n    let mut utmp_struct: utmp = Default::default();\n    let buffer: *mut c_void = &mut utmp_struct as *mut _ as *mut c_void;\n    unsafe {\n        while read(utmp_file.as_raw_fd(), buffer, mem::size_of::<utmp>()) != 0 {\n            show_info(&utmp_struct);\n        }\n    }\n}\n\nfn show_info(utmp_struct: &utmp) {\n    print!(\"{} \",\n           String::from_utf8((utmp_struct.ut_user.iter().map(|&x| x as u8).collect())).unwrap());\n    print!(\"{} \",\n           String::from_utf8((utmp_struct.ut_line.iter().map(|&x| x as u8).collect())).unwrap());\n    print!(\"{} \", utmp_struct.ut_tv.tv_sec);\n    print!(\"({}) \",\n           String::from_utf8((utmp_struct.ut_host.iter().map(|&x| x as u8).collect())).unwrap());\n    println!(\"\");\n}\n\n\n\n\nextern \"C\"\u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u3053\u3068\u3067C\u306eread\u95a2\u6570\u3092\u547c\u3079\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\n\n\nhttps://doc.rust-lang.org/book/ffi.html#foreign-calling-conventions\n\u547c\u3073\u51fa\u3057\u6642\u306fC\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306a\u306e\u3067unsafe\u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3063\u3066\u3044\u308b\nC\u306eread\u95a2\u6570\u3067\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u6e21\u3059\n\n\nRust\u3067\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\n\nC\u306eread\u95a2\u6570\u3067\u306f\u7b2c\u4e8c\u5f15\u6570\u306bvoid\u3092\u6e21\u3059\n\n\n\nvoid\u3092\u6e21\u3059\u3068\u3053\u308d\u306flibc\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bc_void\u3092\u6e21\u3059\n\u8aad\u307f\u53d6\u3063\u305f\u60c5\u5831\u3092struct utmp\u306b\u5165\u308c\u3066\u6b32\u3057\u3044\u306e\u3067\u3001struct utmp\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3057\u305f\u3044struct utmp -> c_void\u3078\u306e\u5909\u63db\u306f\u3053\u3053\u3092\u53c2\u8003\u306b\u3057\u305f\n\n\nrust\u306f\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3082\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u5148\u307b\u3069\u5b9f\u88c5\u3057\u305fDefault trate\u3092\u4f7f\u3063\u3066\u3044\u308b\n\n\n\nshow_info\u95a2\u6570\u306fstruct utmp\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u60c5\u5831\u304b\u3089who\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\n\n\n\nstruct utmp\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u5404\u30e1\u30f3\u30d0\u30fc\u306e\u5024\u3092\u5358\u7d14\u306b\u898b\u3066\u3082\u5358\u306a\u308b\u6570\u5b57\u306e\u914d\u5217\u306b\u3057\u304b\u898b\u3048\u306a\u3044\n\n\n\n\n\u7d50\u679c\n% cargo run\nreboot ~ 1485055829 (4.4.0-59-generic) \nrunlevel ~ 1485055839 (4.4.0-59-generic) \nLOGIN tty1 1485055839 () \nbonchi tty7 1485055935 (:0) \nbonchi pts/20 1485056209 (tmux(4371).%0) \n\n\u305d\u308c\u3063\u307d\u304f\u51fa\u529b\u3055\u308c\u305f\u3002\n\u3057\u304b\u3057\u3001\u4f59\u8a08\u306a\u884c\u304c\u3044\u304f\u3064\u304b\u5897\u3048\u3066\u3044\u308b\u306e\u3068\u3001\u30ed\u30b0\u30a4\u30f3\u6642\u523b\u304cUNIX time\u306b\u306a\u3063\u3066\u3044\u308b\n\u4f59\u8a08\u306a\u884c\u306fstruct utmp\u306e\u30e1\u30f3\u30d0\u30fc\u306eut_type\u3092\u898b\u3066ut_tipe\u304cUSER_PROCESS\u3067\u306a\u3044\u3082\u306e\u3092\u98db\u3070\u305b\u3070\u826f\u3044\u3002UNIX time\u306f\u9069\u5f53\u306b\u5909\u63db\u3059\u308c\u3070\u826f\u3044\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\nhttps://github.com/bon-chi/rust_who\n\n\u5099\u8003\n\u3053\u306e\u30bd\u30fc\u30b9\u306f\u7279\u5b9a\u306e\u74b0\u5883\u3067\u3057\u304b\u52d5\u4f5c\u3057\u306a\u3044(Ubuntu16.04)\n\u3068\u3044\u3046\u306e\u3082utmp.h\u306f\u7aef\u672b\u306b\u3088\u3063\u3066\u4e2d\u8eab\u304c\u9055\u3046\u304b\u3089\u3060\u3002\u4f8b\u3048\u3070OS X\u306eutmp.h\u3092\u8997\u3044\u3066\u307f\u308b\u3068\n\nusr/include/utmp.h\n/*\n * This header file is DEPRECATED and only provided for compatibility\n * with previous releases of Mac OS X.\u2002\u2002Use of these structures, especially\n * in 64-bit computing, may corrupt the utmp, wtmp and lastlog files.\n *\n * Use the utmpx APIs instead.\n */\n\n/*\u7565*/\n\nstruct utmp {\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_line[UT_LINESIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_name[UT_NAMESIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_host[UT_HOSTSIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002long\u2002\u2002\u2002\u2002ut_time;\n}\n\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3057\u3001\u5b9f\u969b\u306b\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n00 0 (\n)\n\u2002\u20020 ()\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: FromUtf8Error { bytes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 213, 64, 103, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], error: Utf8Error { valid_up_to: 84 } }', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n\n\u3068\u51fa\u529b\u3055\u308c\u308b\n\n\u53c2\u8003\nhttp://siciarz.net/ffi-rust-writing-bindings-libcpuid/\nhttp://stackoverflow.com/questions/24191249/working-with-c-void-in-an-ffi#comment37351252_24191977\nhttps://doc.rust-lang.org/nomicon/other-reprs.html#reprc\nhttps://doc.rust-lang.org/book/ffi.html\n# \u76ee\u7684\nRust\u3067FFI\u3092\u8a66\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u5b9f\u88c5\u3059\u308b\n# \u3053\u306e\u30da\u30fc\u30b8\u306e\u30b9\u30b3\u30fc\u30d7\n## \u30b9\u30b3\u30fc\u30d7\u5bfe\u8c61\u5185\n* Rust\u3067FFI\u3092\u4f7f\u3046\n* libc\u3092\u4f7f\u3046\n\n## \u30b9\u30b3\u30fc\u30d7\u5bfe\u8c61\u5916\n* \u52b9\u7387\u304c\u826f\u304b\u3063\u305f\u308a\u3001\u5b9f\u884c\u6642\u9593\u304c\u77ed\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n* \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u3092\u3057\u3063\u304b\u308a\u5b9f\u88c5\u3057\u305f\u5805\u7262\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n# \u984c\u6750\nwho\u30b3\u30de\u30f3\u30c9\n# \u74b0\u5883\nubuntu16.04(\u74b0\u5883\u304c\u9055\u3046\u3068\u30b3\u30fc\u30c9\u3082\u5909\u308f\u308b\u306e\u3067\u6ce8\u610f)\n# \u4ed5\u69d8\n\u624b\u5143\u306e\u74b0\u5883\u3067\u306fwho\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u51fa\u529b\u304c\u3055\u308c\u308b\n\n```\n% who\nbonchi     tty7         2017-01-22 12:32 (:0)\nbonchi     pts/20       2017-01-22 12:36 (tmux(4371).%0)\n```\n# \u5b9f\u88c5\n## C\u5b9f\u88c5\n* who\u30b3\u30de\u30f3\u30c9\u306futmp\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u4e2d\u8eab\u3092\u8868\u793a\u3057\u3066\u3044\u308b\n* utmp\u30d5\u30a1\u30a4\u30eb\u306futmp\u30a8\u30f3\u30c8\u30ea\u306e\u69cb\u9020\u4f53\u306e\u9023\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\n* utmp\u30a8\u30f3\u30c8\u30ea\u306f`utmp.h`\u30d5\u30a1\u30a4\u30eb\u3067`struct utmp`\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n* `utmp.h`\u306f`/usr/include/utmp.h`\u306b\u3042\u308b\n\n`/usr/include/utmp.h`\u3092\u8997\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\n\n```/usr/include/utmp.h\n/* Get system dependent values and data structures.  */\n#include <bits/utmp.h> \n```\n\u306e\u3067\u3001\u4eca\u5ea6\u306f`/usr/include/x86_64-linux-gnu/bits/utmp.h`\u3092\u898b\u3066\u307f\u308b\n\n``` C:/usr/include/x86_64-linux-gnu/bits/utmp.h\n/* The structure describing an entry in the user accounting database.  */\n#define UT_LINESIZE     32 \n#define UT_NAMESIZE     32 \n#define UT_HOSTSIZE     256\n\nstruct utmp\n{\n  short int ut_type;            /* Type of login.  */\n  pid_t ut_pid;                 /* Process ID of login process.  */\n  char ut_line[UT_LINESIZE];    /* Devicename.  */\n  char ut_id[4];                /* Inittab ID.  */\n  char ut_user[UT_NAMESIZE];    /* Username.  */\n  char ut_host[UT_HOSTSIZE];    /* Hostname for remote login.  */\n  struct exit_status ut_exit;   /* Exit status of a process marked as DEAD_PROCESS.  */\n/* The ut_session and ut_tv fields must be the same size when compiled 32- and 64-bit.  This allows data files and shared memory to be shared between 32- and 64-bit applications.  */\n  #ifdef __WORDSIZE_TIME64_COMPAT32\n    int32_t ut_session;           /* Session ID, used for windowing.  */\n    struct\n    {\n      int32_t tv_sec;             /* Seconds.  */\n      int32_t tv_usec;            /* Microseconds.  */\n    } ut_tv;                      /* Time entry was made.  */\n  #else\n    long int ut_session;          /* Session ID, used for windowing.  */\n    struct timeval ut_tv;         /* Time entry was made.  */\n  #endif\n\n  int32_t ut_addr_v6[4];        /* Internet address of remote host.  */\n  char __glibc_reserved[20];            /* Reserved for future use.  */\n};\n\n/* \u7565 */\n\n/* The structure describing the status of a terminated process.  This type is used in `struct utmp' below.  */\nstruct exit_status\n{\n  short int e_termination;    /* Process termination status.  */\n  short int e_exit;           /* Process exit status.  */\n};\n```\n\u79c1\u306e\u74b0\u5883\u3067\u306f`__WORDSIZE_TIME64_COMPAT32`\u306f`true`\n\u4e00\u756a\u5358\u7d14\u306aC\u5b9f\u88c5\u306futmp\u30d5\u30a1\u30a4\u30eb\u304b\u3089utmp\u30a8\u30f3\u30c8\u30ea\u3092\u3072\u3068\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3084\u308c\u3070\u3088\u3044\n\n```c:simple_who.c\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <utmp.h>\n\nint main() {\n  struct utmp current_record;\n  int utmpfd;\n  int reclen = sizeof(current_record);\n \n  if ((utmpfd = open(UTMP_FILE, O_RDONLY)) == -1) {\n    exit(1);\n  }\n \n  while (read(utmpfd, &current_record, reclen) == reclen)\n    /* current_record\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b */\n    close(utmpfd);\n    return 0;\n  }\n}            \n```\n\n\n## Rust\u5b9f\u88c5\nRust\u3067who\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3082C\u4e92\u63db\u306a`struct utmp`\u3068\u305d\u308c\u306b\u95a2\u9023\u3059\u308b\u4ed6\u306estruct(`ut_tv`, `exit_status`)\u3068\u3001\u5b9a\u6570\u3092\u5b9a\u7fa9\u3057\u3066utmp\u30d5\u30a1\u30a4\u30eb\u304b\u3089utmp\u30a8\u30f3\u30c8\u30ea\u3092\u3072\u3068\u3064\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u305d\u3053\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3084\u308c\u3070\u826f\u3044\n### \u5b9a\u6570\n``` rust:rust_who.rs\npub const UT_LINESIZE: usize = 32;\npub const UT_NAMESIZE: usize = 32;\npub const UT_HOSTSIZE: usize = 256;\nstatic UTMP_FILE_PATH: &'static str = \"/var/run/utmp\";\n```\n* `UTMP_FILE_PATH`\u306futmp\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u3092\u8868\u3057\u3066\u304a\u308a\u3001`/usr/include/paths.h`\u306b`_PATH_UTMP`\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u305f\n\n### struct\n```rust:rust_who.rs\nextern crate libc;\nuse libc::{c_short, pid_t, c_char, int32_t, c_int, size_t, c_void};\n\n#[repr(C)]\npub struct exit_status {\n    pub e_termination: c_short,\n    pub e_exit: c_short,\n}\n\n#[repr(C)]\npub struct ut_tv {\n    pub tv_sec: int32_t,\n    pub tv_usec: int32_t,\n}\n\n#[repr(C)]\npub struct utmp {\n    pub ut_type: c_short,\n    pub ut_pid: pid_t,\n    pub ut_line: [c_char; UT_LINESIZE],\n    pub ut_id: [c_char; 4],\n    pub ut_user: [c_char; UT_NAMESIZE],\n    pub ut_host: [c_char; UT_HOSTSIZE],\n    pub ut_exit: exit_status,\n    pub ut_session: int32_t,\n    pub ut_tv: ut_tv,\n    pub ut_addr_v6: [int32_t; 4],\n    pub __glibc_reserved: [c_char; 20],\n}\n\nimpl Default for exit_status {\n    fn default() -> exit_status {\n        exit_status {\n            e_termination: 0,\n            e_exit: 0,\n        }\n    }\n}\n\nimpl Default for ut_tv {\n    fn default() -> ut_tv {\n        ut_tv {\n            tv_sec: 0,\n            tv_usec: 0,\n        }\n    }\n}\n\nimpl Default for utmp {\n    fn default() -> utmp {\n        utmp {\n            ut_type: 0,\n            ut_pid: 0,\n            ut_line: [0; UT_LINESIZE],\n            ut_id: [0; 4],\n            ut_user: [0; UT_NAMESIZE],\n            ut_host: [0; UT_HOSTSIZE],\n            ut_exit: Default::default(),\n            ut_session: 0,\n            ut_tv: Default::default(),\n            ut_addr_v6: [0; 4],\n            __glibc_reserved: [0; 20],\n        }\n    }\n}\n```\n* C\u306estruct\u3092`#[repr(C)]`\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\n  * https://doc.rust-lang.org/nomicon/other-reprs.html#reprc\n  * https://doc.rust-lang.org/book/ffi.html#interoperability-with-foreign-code\n* struct\u306e\u30e1\u30f3\u30d0\u30fc\u306fC\u4e92\u63db\u306e\u578b\u306b\u3057\u305f\u3044\u306e\u3067libc crate\u3092\u4f7f\u3063\u3066\u3044\u308b\n    * https://github.com/rust-lang/libc\n* `Defalut`trate\u306e\u5b9f\u88c5\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001rust\u3067\u306f\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3044\u3061\u3044\u3061\u5024\u3092\u5165\u308c\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u7c21\u5358\u306b0\u3067\u521d\u671f\u5316\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\n\n### \u95a2\u6570\n```rust:rust_who.rs\nextern \"C\" {\n    pub fn read(fd: c_int, buf: *mut c_void, count: size_t) -> usize;\n}\n\nfn main() {\n    let utmp_file = File::open(UTMP_FILE_PATH).unwrap();\n    let mut utmp_struct: utmp = Default::default();\n    let buffer: *mut c_void = &mut utmp_struct as *mut _ as *mut c_void;\n    unsafe {\n        while read(utmp_file.as_raw_fd(), buffer, mem::size_of::<utmp>()) != 0 {\n            show_info(&utmp_struct);\n        }\n    }\n}\n\nfn show_info(utmp_struct: &utmp) {\n    print!(\"{} \",\n           String::from_utf8((utmp_struct.ut_user.iter().map(|&x| x as u8).collect())).unwrap());\n    print!(\"{} \",\n           String::from_utf8((utmp_struct.ut_line.iter().map(|&x| x as u8).collect())).unwrap());\n    print!(\"{} \", utmp_struct.ut_tv.tv_sec);\n    print!(\"({}) \",\n           String::from_utf8((utmp_struct.ut_host.iter().map(|&x| x as u8).collect())).unwrap());\n    println!(\"\");\n}\n```\n* `extern \"C\"`\u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u3053\u3068\u3067C\u306eread\u95a2\u6570\u3092\u547c\u3079\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\n    * https://doc.rust-lang.org/book/ffi.html#foreign-calling-conventions\n    * \u547c\u3073\u51fa\u3057\u6642\u306fC\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306a\u306e\u3067`unsafe`\u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3063\u3066\u3044\u308b\n    * C\u306eread\u95a2\u6570\u3067\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u6e21\u3059\n        * [Rust\u3067\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u53d6\u5f97\u3059\u308b](https://doc.rust-lang.org/std/os/unix/io/trait.AsRawFd.html)\n    * C\u306eread\u95a2\u6570\u3067\u306f\u7b2c\u4e8c\u5f15\u6570\u306b`void`\u3092\u6e21\u3059\n        * `void`\u3092\u6e21\u3059\u3068\u3053\u308d\u306f`libc`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b`c_void`\u3092\u6e21\u3059\n        * \u8aad\u307f\u53d6\u3063\u305f\u60c5\u5831\u3092`struct utmp`\u306b\u5165\u308c\u3066\u6b32\u3057\u3044\u306e\u3067\u3001`struct utmp`\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3057\u305f\u3044`struct utmp` -> c_void\u3078\u306e\u5909\u63db\u306f[\u3053\u3053](http://stackoverflow.com/a/24191977)\u3092\u53c2\u8003\u306b\u3057\u305f\n    * rust\u306f\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3082\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u5148\u307b\u3069\u5b9f\u88c5\u3057\u305f`Default` trate\u3092\u4f7f\u3063\u3066\u3044\u308b\n* `show_info`\u95a2\u6570\u306f`struct utmp`\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u60c5\u5831\u304b\u3089who\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\n    * `struct utmp`\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u5404\u30e1\u30f3\u30d0\u30fc\u306e\u5024\u3092\u5358\u7d14\u306b\u898b\u3066\u3082\u5358\u306a\u308b\u6570\u5b57\u306e\u914d\u5217\u306b\u3057\u304b\u898b\u3048\u306a\u3044\n\n# \u7d50\u679c\n```\n% cargo run\nreboot ~ 1485055829 (4.4.0-59-generic) \nrunlevel ~ 1485055839 (4.4.0-59-generic) \nLOGIN tty1 1485055839 () \nbonchi tty7 1485055935 (:0) \nbonchi pts/20 1485056209 (tmux(4371).%0) \n```\n\u305d\u308c\u3063\u307d\u304f\u51fa\u529b\u3055\u308c\u305f\u3002\n\u3057\u304b\u3057\u3001\u4f59\u8a08\u306a\u884c\u304c\u3044\u304f\u3064\u304b\u5897\u3048\u3066\u3044\u308b\u306e\u3068\u3001\u30ed\u30b0\u30a4\u30f3\u6642\u523b\u304cUNIX time\u306b\u306a\u3063\u3066\u3044\u308b\n\u4f59\u8a08\u306a\u884c\u306f`struct utmp`\u306e\u30e1\u30f3\u30d0\u30fc\u306e`ut_type`\u3092\u898b\u3066`ut_tipe`\u304c`USER_PROCESS`\u3067\u306a\u3044\u3082\u306e\u3092\u98db\u3070\u305b\u3070\u826f\u3044\u3002UNIX time\u306f\u9069\u5f53\u306b\u5909\u63db\u3059\u308c\u3070\u826f\u3044\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\nhttps://github.com/bon-chi/rust_who\n\n# \u5099\u8003\n\u3053\u306e\u30bd\u30fc\u30b9\u306f\u7279\u5b9a\u306e\u74b0\u5883\u3067\u3057\u304b\u52d5\u4f5c\u3057\u306a\u3044(Ubuntu16.04)\n\u3068\u3044\u3046\u306e\u3082`utmp.h`\u306f\u7aef\u672b\u306b\u3088\u3063\u3066\u4e2d\u8eab\u304c\u9055\u3046\u304b\u3089\u3060\u3002\u4f8b\u3048\u3070OS X\u306e`utmp.h`\u3092\u8997\u3044\u3066\u307f\u308b\u3068\n\n```c:usr/include/utmp.h\n/*\n * This header file is DEPRECATED and only provided for compatibility\n * with previous releases of Mac OS X.\u2002\u2002Use of these structures, especially\n * in 64-bit computing, may corrupt the utmp, wtmp and lastlog files.\n *\n * Use the utmpx APIs instead.\n */\n\n/*\u7565*/\n\nstruct utmp {\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_line[UT_LINESIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_name[UT_NAMESIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002char\u2002\u2002\u2002\u2002ut_host[UT_HOSTSIZE];\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002long\u2002\u2002\u2002\u2002ut_time;\n}\n```\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3057\u3001\u5b9f\u969b\u306b\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```\n00 0 (\n)\n\u2002\u20020 ()\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: FromUtf8Error { bytes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 213, 64, 103, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], error: Utf8Error { valid_up_to: 84 } }', ../src/libcore/result.rs:837\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\n\u3068\u51fa\u529b\u3055\u308c\u308b\n\n# \u53c2\u8003\nhttp://siciarz.net/ffi-rust-writing-bindings-libcpuid/\nhttp://stackoverflow.com/questions/24191249/working-with-c-void-in-an-ffi#comment37351252_24191977\nhttps://doc.rust-lang.org/nomicon/other-reprs.html#reprc\nhttps://doc.rust-lang.org/book/ffi.html\n", "tags": ["rust", "ffi"]}