{"context": "C++\u521d\u5fc3\u8005\u304cUE4\u306e\u6319\u52d5\u3092\u899a\u3048\u308b\u305f\u3081\u306b\u7121\u8b00\u306b\u3082\u30a8\u30f3\u30b8\u30f3\u30bd\u30fc\u30b9\u306e\u89e3\u6790\u3092\u8a66\u307f\u305f\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\nC++\u521d\u5fc3\u8005\u3086\u3048\u3001\u9593\u9055\u3044\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3084\u3093\u308f\u308a\u3068\u6307\u6458\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306fSetActorLocation\u3092\u89e3\u6790\u3057\u3066\u307f\u307e\u3059\u3002\n\u691c\u8a3c\u306f4.15\u30d7\u30ec\u30d3\u30e5\u30fc\u7248\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u5c06\u6765\u51e6\u7406\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u5927\u306a\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nSetActorLocation\u3092\u89e3\u6790\u3057\u3066\u307f\u308b\nBP\u4e0a\u3067\u306eSetActorLocation\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u3044\u3064\u3082\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nBP\u3067\u306eSetActorLocation\u30ce\u30fc\u30c9\u306b\u3042\u305f\u308b\u3001C++\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u3060\u3068\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\n\nActor.cpp\n\nbool AActor::K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport)\n{\n    return SetActorLocation(NewLocation, bSweep, (bSweep ? &SweepHitResult : nullptr), TeleportFlagToEnum(bTeleport));\n}\n\n\n\nBP\u3068C++\u306e\u5f15\u6570\u3068\u306e\u9055\u3044\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\n\u30d4\u30f3\nBP\u5f15\u6570\u540d\nBP\u578b\u540d\nC++\u5f15\u6570\u540d\nC++\u578b\u540d\n\n\n\n\n\u5165\u529b\nNew Location\nVector\nNewLocation\nFVector\n\n\n\u5165\u529b\nSweep\nbool\nbSweep\nbool\n\n\n\u51fa\u529b\nSweep Hit Result\nHit Result (\u69cb\u9020\u4f53)\nSweepHitResult\nFHitResult&\n\n\n\u5165\u529b\nTeleport\nbool\nbTeleport\nbool\n\n\n\n\u203bBP\u578b\u540d\u306f\u30a8\u30c7\u30a3\u30bf\u30fc\u4e0a\u3067\u78ba\u8a8d\u3067\u304d\u308b\u578b\u540d\u3068\u306a\u308a\u307e\u3059\u3002\n\u3069\u3046\u3084\u3089c++\u306e\u30af\u30e9\u30b9\u306b\u3082SetActorLocation\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nSweep\u304ctrue\u306e\u5834\u5408\u3001SweepHitResult\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6e21\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Sweep\u304cfalse\u3067\u3042\u308b\u5834\u5408\u3001SweepHitResult\u306f\u5e38\u306bnullptr\u3067\u3042\u308b\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\nTeleport\u306fTeleportFlagToEnum\u3068\u3044\u3046\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u76f8\u624b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nEngineTypes.h\nFORCEINLINE ETeleportType TeleportFlagToEnum(bool bTeleport) { return bTeleport ? ETeleportType::TeleportPhysics : ETeleportType::None; }\n\n\n\u623b\u308a\u5024\u304cETeleportType\u3068\u3044\u3046\u5217\u6319\u578b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\nK2_SetActorLocation\u306e\u89e3\u6790\u306f\u3055\u3063\u3068\u7d42\u308f\u3063\u305f\u306e\u3067\u3001SetActorLocation\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u8aad\u3093\u3067\u307f\u307e\u3059\u3002\n\nActor.cpp\n\nbool AActor::SetActorLocation(const FVector& NewLocation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)\n{\n    if (RootComponent)\n    {\n        const FVector Delta = NewLocation - GetActorLocation();\n        return RootComponent->MoveComponent(Delta, GetActorQuat(), bSweep, OutSweepHitResult, MOVECOMP_NoFlags, Teleport);\n    }\n    else if (OutSweepHitResult)\n    {\n        *OutSweepHitResult = FHitResult();\n    }\n\n    return false;\n}\n\n\n\u5fc5\u8981\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001BP\u3067\u306eSetActorLocation\u3068C++\u306eSetActorLocation\u306e\u5f15\u6570\u306e\u9055\u3044\u3067\u3059\u3002\n\n\n\n\u30d4\u30f3\nBP\u5f15\u6570\u540d\nBP\u578b\u540d\nC++\u5f15\u6570\u540d\nC++\u578b\u540d\n\n\n\n\n\u5165\u529b\nNew Location\nVector\nNewLocation\n(const) FVector&\n\n\n\u5165\u529b\nSweep\nbool\nbSweep\nbool\n\n\n\u51fa\u529b\nSweep Hit Result\nHit Result(\u69cb\u9020\u4f53)\nOutSweepHitResult\nFHitResult*\n\n\n\u5165\u529b\nTeleport\nbool\nTeleport\nETeleportType\n\n\n\n\u3056\u3063\u3068\u7c21\u5358\u306b\u89e3\u6790\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u6700\u521d\u306eif\u6587\u3067RootComponent\u306b\u5909\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nActor.h\nUSceneComponent* RootComponent;\n\n\n\u3069\u3046\u3084\u3089Location\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b\u306fRootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5fc5\u9808\u306e\u3088\u3046\u3067\u3059\u3002\n\u7d9a\u3044\u3066\u3001GetActorLocation\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\nActor.h\n    /** Returns the location of the RootComponent of this Actor*/ \n    FORCEINLINE FVector GetActorLocation() const\n    {\n        return TemplateGetActorLocation(RootComponent);\n    }\n\n\n\u3055\u3089\u306bTemplateGetActorLocation\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u3093\u3067\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\nActor.h\n    /*~\n     * Returns location of the RootComponent \n     */ \n    template<class T>\n    static FORCEINLINE FVector TemplateGetActorLocation(const T* RootComponent)\n    {\n        return (RootComponent != nullptr) ? RootComponent->GetComponentLocation() : FVector::ZeroVector;\n    }\n\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001RootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3055\u308c\u305fGetComponentLocation\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u306a\u3044\u5834\u5408\u306fZeroVector\u3092\u8fd4\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\nGetComponentLocation\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nSceneComponent.h\n    /** Return location of the component, in world space */\n    FORCEINLINE FVector GetComponentLocation() const\n    {\n        return ComponentToWorld.GetLocation();\n    }\n\n\n\nTransformVectorized.h\n    FORCEINLINE FVector GetLocation() const\n    {\n        return GetTranslation();\n    }\n\n    /**\n     * Returns the translation component\n     *\n     * @return The translation component\n     */\n    FORCEINLINE FVector GetTranslation() const\n    {\n        DiagnosticCheckNaN_Translate();\n        FVector OutTranslation;\n        VectorStoreFloat3(Translation, &OutTranslation);\n        return OutTranslation;\n    }\n\n\n\nUnrealMathSSE.h\n/**\n * Stores the XYZ components of a vector to unaligned memory.\n *\n * @param Vec   Vector to store XYZ\n * @param Ptr   Unaligned memory pointer\n */\nFORCEINLINE void VectorStoreFloat3( const VectorRegister& Vec, void* Ptr )\n{\n    union { VectorRegister v; float f[4]; } Tmp;\n    Tmp.v = Vec;\n    float* FloatPtr = (float*)(Ptr);\n    FloatPtr[0] = Tmp.f[0];\n    FloatPtr[1] = Tmp.f[1];\n    FloatPtr[2] = Tmp.f[2];\n}\n\n\n\u306a\u308b\u307b\u3069\uff01\uff01\u3000\u308f\u304b\u3089\u306a\u3044\uff01\uff01\u3000\n\u3059\u307f\u307e\u305b\u3093\u3001\u81ea\u5206\u306e\u30b9\u30ad\u30eb\u4e0d\u8db3\u3067\u3059\u3002\n\u304a\u305d\u3089\u304f\u81ea\u5206\u306e\u73fe\u5728\u5024\uff08Trancform\uff09\u3092\u30e1\u30e2\u30ea\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u306e\u304b\u306a\uff1f\n\u305d\u3093\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u65b0\u3057\u3044\u5ea7\u6a19\u304b\u3089\u3001\u73fe\u5728\u306e\u5ea7\u6a19\u3092\u5f15\u3044\u3066\u3044\u308b\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089MoveComponent\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u308b\u306e\u3067\u3001\u65b0\u3057\u3044\u5ea7\u6a19\u3078\u79fb\u52d5\u3055\u305b\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u304b\u306d\u3002\nMoveComponent\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nSceneComponent.h\nFORCEINLINE_DEBUGGABLE bool USceneComponent::MoveComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)\n{\n    return MoveComponentImpl(Delta, NewRotation, bSweep, Hit, MoveFlags, Teleport);\n}\n\n\n\nSceneComponent.cpp\nbool USceneComponent::MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)\n{\n    SCOPE_CYCLE_COUNTER(STAT_MoveComponentSceneComponentTime);\n\n    // static things can move before they are registered (e.g. immediately after streaming), but not after.\n    if (IsPendingKill() || CheckStaticMobilityAndWarn(SceneComponentStatics::MobilityWarnText))\n    {\n        if (OutHit)\n        {\n            *OutHit = FHitResult();\n        }\n        return false;\n    }\n\n    // Fill in optional output param. SceneComponent doesn't sweep, so this is just an empty result.\n    if (OutHit)\n    {\n        *OutHit = FHitResult(1.f);\n    }\n\n    ConditionalUpdateComponentToWorld();\n\n    // early out for zero case\n    if( Delta.IsZero() )\n    {\n        // Skip if no vector or rotation.\n        if (NewRotation.Equals(ComponentToWorld.GetRotation(), SCENECOMPONENT_QUAT_TOLERANCE))\n        {\n            return true;\n        }\n    }\n\n    // just teleport, sweep is supported for PrimitiveComponents. This will update child components as well.\n    const bool bMoved = InternalSetWorldLocationAndRotation(GetComponentLocation() + Delta, NewRotation, false, Teleport);\n\n    // Only update overlaps if not deferring updates within a scope\n    if (bMoved && !IsDeferringMovementUpdates())\n    {\n        // need to update overlap detection in case PrimitiveComponents are attached.\n        UpdateOverlaps();\n    }\n\n    return true;\n}\n\n\n\u3046\u3080\u3080\u3001\u3069\u3046\u3084\u3089\u3053\u3053\u3067Actor\u3092\u79fb\u52d5\u3055\u305b\u3066\u3044\u308b\u306e\u306f\u9593\u9055\u3044\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\u5b8c\u5168\u306b\u89e3\u6790\u3057\u304d\u308c\u3066\u306a\u3044\u306e\u3067\u6b21\u56de\u4ee5\u964d\u3001\u3053\u3053\u306f\u3058\u3063\u304f\u308a\u3068\u8aad\u307f\u307e\u3059\u3002\nRootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u3001OutSweepHitResult\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\u3082\u3057\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fFHitResult\u3092MoveComponentImpl\u30e1\u30bd\u30c3\u30c9\u3067\u30e1\u30e2\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u5024\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u308c\u3067\u5927\u4f53\u3001\u81ea\u5206\u306a\u308a\u306bSetActorLocation\u306e\u6319\u52d5\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\u4eca\u56de\u304b\u3089\u30dc\u30c1\u30dc\u30c1\u3068\u52c9\u5f37\u306e\u305f\u3081\u306b\u30a8\u30f3\u30b8\u30f3\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u59cb\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002C++\u304c\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u610f\u5473\u3092\u8abf\u3079\u306a\u304c\u3089\u306b\u306a\u308b\u306e\u3067\u66f4\u65b0\u306f\u9045\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u30012017\u5e74\u4e2d\u306b\u3042\u308b\u7a0b\u5ea6\u30a8\u30f3\u30b8\u30f3\u51e6\u7406\u3092\u628a\u63e1\u3067\u304d\u308c\u3070\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u76f4\u5168\u90e8\u306f\u6642\u9593\u304c\u3044\u304f\u3089\u3042\u3063\u3066\u3082\u898b\u308c\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u666e\u6bb5\u3088\u304f\u4f7f\u3046BP\u30ce\u30fc\u30c9\u304b\u3089\u89e3\u6790\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\nC++\u521d\u5fc3\u8005\u304cUE4\u306e\u6319\u52d5\u3092\u899a\u3048\u308b\u305f\u3081\u306b\u7121\u8b00\u306b\u3082\u30a8\u30f3\u30b8\u30f3\u30bd\u30fc\u30b9\u306e\u89e3\u6790\u3092\u8a66\u307f\u305f\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\nC++\u521d\u5fc3\u8005\u3086\u3048\u3001\u9593\u9055\u3044\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3084\u3093\u308f\u308a\u3068\u6307\u6458\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306fSetActorLocation\u3092\u89e3\u6790\u3057\u3066\u307f\u307e\u3059\u3002\n\u691c\u8a3c\u306f4.15\u30d7\u30ec\u30d3\u30e5\u30fc\u7248\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u5c06\u6765\u51e6\u7406\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u5927\u306a\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n#SetActorLocation\u3092\u89e3\u6790\u3057\u3066\u307f\u308b\n\n\nBP\u4e0a\u3067\u306eSetActorLocation\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n![SetActorLocation.png](https://qiita-image-store.s3.amazonaws.com/0/104377/f698de04-943a-61cb-9be1-c1cd38bec39a.png)\n\n\u3044\u3064\u3082\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nBP\u3067\u306eSetActorLocation\u30ce\u30fc\u30c9\u306b\u3042\u305f\u308b\u3001C++\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u3060\u3068\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\n\n```ruby:Actor.cpp\n\nbool AActor::K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport)\n{\n\treturn SetActorLocation(NewLocation, bSweep, (bSweep ? &SweepHitResult : nullptr), TeleportFlagToEnum(bTeleport));\n}\n\n```\n\nBP\u3068C++\u306e\u5f15\u6570\u3068\u306e\u9055\u3044\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n| \u30d4\u30f3 | BP\u5f15\u6570\u540d | BP\u578b\u540d | C++\u5f15\u6570\u540d | C++\u578b\u540d |\n|:---------:|:-----------:|:----:|:---:|:----:|\n| \u5165\u529b  | New Location  |  Vector  |  NewLocation | FVector   |\n| \u5165\u529b  | Sweep  |  bool | bSweep  | bool  |\n| \u51fa\u529b  | Sweep Hit Result  |  Hit Result (\u69cb\u9020\u4f53) | SweepHitResult| FHitResult& |\n| \u5165\u529b  | Teleport  | bool | bTeleport | bool |\n\n\u203bBP\u578b\u540d\u306f\u30a8\u30c7\u30a3\u30bf\u30fc\u4e0a\u3067\u78ba\u8a8d\u3067\u304d\u308b\u578b\u540d\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3069\u3046\u3084\u3089c++\u306e\u30af\u30e9\u30b9\u306b\u3082SetActorLocation\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nSweep\u304ctrue\u306e\u5834\u5408\u3001SweepHitResult\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6e21\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Sweep\u304cfalse\u3067\u3042\u308b\u5834\u5408\u3001SweepHitResult\u306f\u5e38\u306bnullptr\u3067\u3042\u308b\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n\nTeleport\u306fTeleportFlagToEnum\u3068\u3044\u3046\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u76f8\u624b\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n```ruby:EngineTypes.h\nFORCEINLINE ETeleportType TeleportFlagToEnum(bool bTeleport) { return bTeleport ? ETeleportType::TeleportPhysics : ETeleportType::None; }\n```\n\n\u623b\u308a\u5024\u304cETeleportType\u3068\u3044\u3046\u5217\u6319\u578b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\nK2_SetActorLocation\u306e\u89e3\u6790\u306f\u3055\u3063\u3068\u7d42\u308f\u3063\u305f\u306e\u3067\u3001SetActorLocation\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u8aad\u3093\u3067\u307f\u307e\u3059\u3002\n\n```ruby:Actor.cpp\n\nbool AActor::SetActorLocation(const FVector& NewLocation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)\n{\n\tif (RootComponent)\n\t{\n\t\tconst FVector Delta = NewLocation - GetActorLocation();\n\t\treturn RootComponent->MoveComponent(Delta, GetActorQuat(), bSweep, OutSweepHitResult, MOVECOMP_NoFlags, Teleport);\n\t}\n\telse if (OutSweepHitResult)\n\t{\n\t\t*OutSweepHitResult = FHitResult();\n\t}\n\n\treturn false;\n}\n```\n\n\u5fc5\u8981\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001BP\u3067\u306eSetActorLocation\u3068C++\u306eSetActorLocation\u306e\u5f15\u6570\u306e\u9055\u3044\u3067\u3059\u3002\n\n| \u30d4\u30f3 | BP\u5f15\u6570\u540d | BP\u578b\u540d | C++\u5f15\u6570\u540d | C++\u578b\u540d |\n|:---------:|:----:|:----:|:---:|:----:|\n| \u5165\u529b  | New Location  |  Vector  |  NewLocation | (const) FVector&  |\n| \u5165\u529b  | Sweep  |  bool | bSweep  | bool  |\n| \u51fa\u529b  | Sweep Hit Result  |  Hit Result(\u69cb\u9020\u4f53) | OutSweepHitResult  | FHitResult* |\n| \u5165\u529b  | Teleport  | bool | Teleport  | ETeleportType  |\n\n\u3056\u3063\u3068\u7c21\u5358\u306b\u89e3\u6790\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u6700\u521d\u306eif\u6587\u3067RootComponent\u306b\u5909\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n```ruby:Actor.h\nUSceneComponent* RootComponent;\n```\n\n\u3069\u3046\u3084\u3089Location\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b\u306fRootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5fc5\u9808\u306e\u3088\u3046\u3067\u3059\u3002\n\u7d9a\u3044\u3066\u3001GetActorLocation\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\n```ruby:Actor.h\n\t/** Returns the location of the RootComponent of this Actor*/ \n\tFORCEINLINE FVector GetActorLocation() const\n\t{\n\t\treturn TemplateGetActorLocation(RootComponent);\n\t}\n```\n\n\u3055\u3089\u306bTemplateGetActorLocation\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u3093\u3067\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```ruby:Actor.h\n\t/*~\n\t * Returns location of the RootComponent \n\t */ \n\ttemplate<class T>\n\tstatic FORCEINLINE FVector TemplateGetActorLocation(const T* RootComponent)\n\t{\n\t\treturn (RootComponent != nullptr) ? RootComponent->GetComponentLocation() : FVector::ZeroVector;\n\t}\n```\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001RootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3055\u308c\u305fGetComponentLocation\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u306a\u3044\u5834\u5408\u306fZeroVector\u3092\u8fd4\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\nGetComponentLocation\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```ruby:SceneComponent.h\n\t/** Return location of the component, in world space */\n\tFORCEINLINE FVector GetComponentLocation() const\n\t{\n\t\treturn ComponentToWorld.GetLocation();\n\t}\n```\n\n```ruby:TransformVectorized.h\n\tFORCEINLINE FVector GetLocation() const\n\t{\n\t\treturn GetTranslation();\n\t}\n\n\t/**\n\t * Returns the translation component\n\t *\n\t * @return The translation component\n\t */\n\tFORCEINLINE FVector GetTranslation() const\n\t{\n\t\tDiagnosticCheckNaN_Translate();\n\t\tFVector OutTranslation;\n\t\tVectorStoreFloat3(Translation, &OutTranslation);\n\t\treturn OutTranslation;\n\t}\n```\n\n```ruby:UnrealMathSSE.h\n/**\n * Stores the XYZ components of a vector to unaligned memory.\n *\n * @param Vec\tVector to store XYZ\n * @param Ptr\tUnaligned memory pointer\n */\nFORCEINLINE void VectorStoreFloat3( const VectorRegister& Vec, void* Ptr )\n{\n\tunion { VectorRegister v; float f[4]; } Tmp;\n\tTmp.v = Vec;\n\tfloat* FloatPtr = (float*)(Ptr);\n\tFloatPtr[0] = Tmp.f[0];\n\tFloatPtr[1] = Tmp.f[1];\n\tFloatPtr[2] = Tmp.f[2];\n}\n```\n\n\u306a\u308b\u307b\u3069\uff01\uff01\u3000\u308f\u304b\u3089\u306a\u3044\uff01\uff01\u3000\n\u3059\u307f\u307e\u305b\u3093\u3001\u81ea\u5206\u306e\u30b9\u30ad\u30eb\u4e0d\u8db3\u3067\u3059\u3002\n\n\u304a\u305d\u3089\u304f\u81ea\u5206\u306e\u73fe\u5728\u5024\uff08Trancform\uff09\u3092\u30e1\u30e2\u30ea\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u306e\u304b\u306a\uff1f\n\u305d\u3093\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u3088\u308a\u65b0\u3057\u3044\u5ea7\u6a19\u304b\u3089\u3001\u73fe\u5728\u306e\u5ea7\u6a19\u3092\u5f15\u3044\u3066\u3044\u308b\u3068\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089MoveComponent\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u308b\u306e\u3067\u3001\u65b0\u3057\u3044\u5ea7\u6a19\u3078\u79fb\u52d5\u3055\u305b\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u304b\u306d\u3002\n\nMoveComponent\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```ruby:SceneComponent.h\nFORCEINLINE_DEBUGGABLE bool USceneComponent::MoveComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)\n{\n\treturn MoveComponentImpl(Delta, NewRotation, bSweep, Hit, MoveFlags, Teleport);\n}\n```\n\n```ruby:SceneComponent.cpp\nbool USceneComponent::MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)\n{\n\tSCOPE_CYCLE_COUNTER(STAT_MoveComponentSceneComponentTime);\n\n\t// static things can move before they are registered (e.g. immediately after streaming), but not after.\n\tif (IsPendingKill() || CheckStaticMobilityAndWarn(SceneComponentStatics::MobilityWarnText))\n\t{\n\t\tif (OutHit)\n\t\t{\n\t\t\t*OutHit = FHitResult();\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Fill in optional output param. SceneComponent doesn't sweep, so this is just an empty result.\n\tif (OutHit)\n\t{\n\t\t*OutHit = FHitResult(1.f);\n\t}\n\n\tConditionalUpdateComponentToWorld();\n\n\t// early out for zero case\n\tif( Delta.IsZero() )\n\t{\n\t\t// Skip if no vector or rotation.\n\t\tif (NewRotation.Equals(ComponentToWorld.GetRotation(), SCENECOMPONENT_QUAT_TOLERANCE))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// just teleport, sweep is supported for PrimitiveComponents. This will update child components as well.\n\tconst bool bMoved = InternalSetWorldLocationAndRotation(GetComponentLocation() + Delta, NewRotation, false, Teleport);\n\n\t// Only update overlaps if not deferring updates within a scope\n\tif (bMoved && !IsDeferringMovementUpdates())\n\t{\n\t\t// need to update overlap detection in case PrimitiveComponents are attached.\n\t\tUpdateOverlaps();\n\t}\n\n\treturn true;\n}\n```\n\n\u3046\u3080\u3080\u3001\u3069\u3046\u3084\u3089\u3053\u3053\u3067Actor\u3092\u79fb\u52d5\u3055\u305b\u3066\u3044\u308b\u306e\u306f\u9593\u9055\u3044\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\u5b8c\u5168\u306b\u89e3\u6790\u3057\u304d\u308c\u3066\u306a\u3044\u306e\u3067\u6b21\u56de\u4ee5\u964d\u3001\u3053\u3053\u306f\u3058\u3063\u304f\u308a\u3068\u8aad\u307f\u307e\u3059\u3002\n\nRootComponent\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u3001OutSweepHitResult\u306b\u30a2\u30c9\u30ec\u30b9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\u3082\u3057\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fFHitResult\u3092MoveComponentImpl\u30e1\u30bd\u30c3\u30c9\u3067\u30e1\u30e2\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u5024\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u308c\u3067\u5927\u4f53\u3001\u81ea\u5206\u306a\u308a\u306bSetActorLocation\u306e\u6319\u52d5\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\n#\u307e\u3068\u3081\n\n\u4eca\u56de\u304b\u3089\u30dc\u30c1\u30dc\u30c1\u3068\u52c9\u5f37\u306e\u305f\u3081\u306b\u30a8\u30f3\u30b8\u30f3\u30bd\u30fc\u30b9\u3092\u8aad\u307f\u59cb\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002C++\u304c\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u610f\u5473\u3092\u8abf\u3079\u306a\u304c\u3089\u306b\u306a\u308b\u306e\u3067\u66f4\u65b0\u306f\u9045\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u30012017\u5e74\u4e2d\u306b\u3042\u308b\u7a0b\u5ea6\u30a8\u30f3\u30b8\u30f3\u51e6\u7406\u3092\u628a\u63e1\u3067\u304d\u308c\u3070\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u76f4\u5168\u90e8\u306f\u6642\u9593\u304c\u3044\u304f\u3089\u3042\u3063\u3066\u3082\u898b\u308c\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u666e\u6bb5\u3088\u304f\u4f7f\u3046BP\u30ce\u30fc\u30c9\u304b\u3089\u89e3\u6790\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n", "tags": ["UE4", "UnrealEngine", "C++"]}