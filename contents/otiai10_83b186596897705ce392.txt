{"context": " More than 1 year has passed since last update.\n\n\u30b4\u30fc\u30eb\n\nGo\u8a00\u8a9e\u304b\u3089Redshift\u306b\u3064\u306a\u3044\u3067\u30af\u30a8\u30ea\u3068\u304b\u3059\u308b\n\n\nRedshift\u3068\u306f\n\nAmazon Redshift \u304a\u3088\u3073 PostgreSQL\n\nRedshift\u3078\u306e\u63a5\u7d9a\u304a\u3088\u3073\u30af\u30a8\u30ea\u306fPostgres\u3060\u3068\u601d\u3063\u3066\u3060\u3044\u305f\u3044\u554f\u984c\u306a\u3044\u3063\u307d\u3044\u3067\u3059\u3002\uff08\u4e00\u5ea6\u3001ISNULL\u4f7f\u3063\u3066\u3066Redshift\u306b\u306fISNULL\u7121\u3044\u306e\u3067COALESCE\u4f7f\u3046\u3001\u307f\u305f\u3044\u306a\u3064\u307e\u305a\u304d\u304c\u3042\u308a\u307e\u3057\u305f\u304c...\uff09\n\nGo\u8a00\u8a9e\u304b\u3089Postgres\u306b\u3064\u306a\u3050\n\u3069\u3053\u306b\u3067\u3082\u3042\u308bGo\u3067sql\u4f7f\u3046\u30b5\u30f3\u30d7\u30eb\u3067\u3059\npackage main\n\nimport (\n    \"database/sql\"\n    \"log\"\n\n    _ \"github.com/lib/pq\"\n)\n\n// User \u9069\u5f53\u306b\ntype User struct {\n    Name string `sql:\"username\"`\n}\n\nfunc main() {\n    db, err := sql.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n    if err != nil {\n        log.Fatalln(\"\u3064\u306a\u3050\u306e\", err)\n    }\n    defer db.Close()\n\n    row, err := db.Query(\"SELECT username FROM users WHERE username LIKE $1 LIMIT $2\", \"otiai%\", 10)\n    if err != nil {\n        log.Fatalln(\"\u30af\u30a8\u30ea\u3059\u308b\u306e\", err)\n    }\n\n    for row.Next() { // \u884c\u304c\u3042\u308b\u307e\u3067true\n        user := new(User)\n        err := row.Scan(&user.Name)\n        if err != nil {\n            log.Fatalln(\"\u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n        }\n\n        log.Printf(\"%+v\\n\", user)\n    }\n    if err := row.Err(); err != nil {\n        log.Fatalln(\"\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\", err)\n    }\n}\n\n\u4e0a\u8a18\u306e\u3001postgres://user:pass@host:port/dbname\u306b\u8a72\u5f53\u3059\u308b\u3068\u3053\u308d\u3092\u3001\u304a\u4f7f\u3044\u306e\uff08RDS\u306a\u308a\uff09Redshift\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3068\u3053\u308d\u306efoo.bar.region.redshift.amazonaws.com:5439\u3068\u304b\u306b\u3059\u308c\u3070\u3001\u666e\u901a\u306b\u52d5\u304f\u306f\u305a\u3067\u3059\u3002\n\n\u3081\u3093\u3069\u3044\u306e\u3067ORM\u3064\u304b\u304a\u3046\n\u3082\u306f\u3084Redshift\u95a2\u4fc2\u7121\u3044\u3093\u3067\u3059\u304c\u3001Go\u306edatabase/sql\u5341\u5206\u53ef\u611b\u3044\u3051\u3069\u3001row.Next\u3068\u304brow.Scan\u3068\u304b\u3081\u3093\u3069\u3044\u306e\u3067\u3001\u305d\u306e\u3078\u3093\u3082\u3044\u3044\u611f\u3058\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3084\u3064\u4f7f\u3046\u3002\n\u4eca\u56de\u306fgorm\u3067\n package main\n\n import (\n-   \"database/sql\"\n    \"log\"\n\n+   \"github.com/jinzhu/gorm\"\n    _ \"github.com/lib/pq\"\n )\n\n // User \u9069\u5f53\u306b\n type User struct {\n-   Name string `sql:\"username\"`\n+   Name string `gorm:\"column:username\"`\n }\n\n func main() {\n-   db, err := sql.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n+   db, err := gorm.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n    if err != nil {\n        log.Fatalln(\"\u3064\u306a\u3050\u306e\", err)\n    }\n    defer db.Close()\n\n-   row, err := db.Query(\"SELECT username FROM users WHERE username LIKE $1\", \"otiai%\")\n+   users := []User{}\n+   err = db.Where(\"username LIKE ?\", \"otiai%\").Limit(10).Find(&users).Error\n    if err != nil {\n-       log.Fatalln(\"\u30af\u30a8\u30ea\u3059\u308b\u306e\", err)\n-   }\n-\n-   for row.Next() { // \u884c\u304c\u3042\u308b\u307e\u3067true\n-       user := new(User)\n-       err := row.Scan(&user.Name)\n-       if err != nil {\n-           log.Fatalln(\"\u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n-       }\n-\n-       log.Printf(\"%+v\\n\", user)\n-   }\n-   if err := row.Err(); err != nil {\n-       log.Fatalln(\"\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\", err)\n+       log.Fatalln(\"\u30af\u30a8\u30ea\u3057\u3066\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n    }\n+   log.Printf(\"%+v\\n\", users)\n }\n\n\u3059\u3052\u30fc\u697d\u3002gorm\u304c\u3001Find\u3068\u304b\u3067\u6e21\u3059struct\u306etype\u540d\u898b\u3066\u3001\u3053\u306e\u5834\u5408\u52dd\u624b\u306busers\u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u5165\u308c\u307e\u3059\u3002\u767a\u884c\u3055\u308c\u308bSQL\u3092\u751f\u3067\u898b\u305f\u3044\u5834\u5408\u306f\ndb.LogMode(true)\n\n\u3068\u3001\u3069\u3063\u304b\u306b\u306f\u3055\u3081\u3070stdout\u306b\u51fa\u307e\u3059\u3002\n\nhttps://github.com/jinzhu/gorm\n\n\n\u3068\u3044\u3046\u304b\n\u305c\u3093\u305c\u3093Redshift\u306e\u8a18\u4e8b\u3058\u3083\u306a\u304b\u3063\u305f...\n# \u30b4\u30fc\u30eb\n\n- Go\u8a00\u8a9e\u304b\u3089Redshift\u306b\u3064\u306a\u3044\u3067\u30af\u30a8\u30ea\u3068\u304b\u3059\u308b\n\n# Redshift\u3068\u306f\n\n- [Amazon Redshift \u304a\u3088\u3073 PostgreSQL](http://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_redshift-and-postgres-sql.html)\n\nRedshift\u3078\u306e\u63a5\u7d9a\u304a\u3088\u3073\u30af\u30a8\u30ea\u306fPostgres\u3060\u3068\u601d\u3063\u3066\u3060\u3044\u305f\u3044\u554f\u984c\u306a\u3044\u3063\u307d\u3044\u3067\u3059\u3002\uff08\u4e00\u5ea6\u3001`ISNULL`\u4f7f\u3063\u3066\u3066Redshift\u306b\u306f`ISNULL`\u7121\u3044\u306e\u3067`COALESCE`\u4f7f\u3046\u3001\u307f\u305f\u3044\u306a\u3064\u307e\u305a\u304d\u304c\u3042\u308a\u307e\u3057\u305f\u304c...\uff09\n\n# Go\u8a00\u8a9e\u304b\u3089Postgres\u306b\u3064\u306a\u3050\n\n\u3069\u3053\u306b\u3067\u3082\u3042\u308bGo\u3067sql\u4f7f\u3046\u30b5\u30f3\u30d7\u30eb\u3067\u3059\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"log\"\n\n\t_ \"github.com/lib/pq\"\n)\n\n// User \u9069\u5f53\u306b\ntype User struct {\n\tName string `sql:\"username\"`\n}\n\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n\tif err != nil {\n\t\tlog.Fatalln(\"\u3064\u306a\u3050\u306e\", err)\n\t}\n\tdefer db.Close()\n\n\trow, err := db.Query(\"SELECT username FROM users WHERE username LIKE $1 LIMIT $2\", \"otiai%\", 10)\n\tif err != nil {\n\t\tlog.Fatalln(\"\u30af\u30a8\u30ea\u3059\u308b\u306e\", err)\n\t}\n\n\tfor row.Next() { // \u884c\u304c\u3042\u308b\u307e\u3067true\n\t\tuser := new(User)\n\t\terr := row.Scan(&user.Name)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(\"\u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n\t\t}\n\n\t\tlog.Printf(\"%+v\\n\", user)\n\t}\n\tif err := row.Err(); err != nil {\n\t\tlog.Fatalln(\"\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\", err)\n\t}\n}\n```\n\n\u4e0a\u8a18\u306e\u3001`postgres://user:pass@host:port/dbname`\u306b\u8a72\u5f53\u3059\u308b\u3068\u3053\u308d\u3092\u3001\u304a\u4f7f\u3044\u306e\uff08RDS\u306a\u308a\uff09Redshift\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u3068\u3053\u308d\u306e`foo.bar.region.redshift.amazonaws.com:5439`\u3068\u304b\u306b\u3059\u308c\u3070\u3001\u666e\u901a\u306b\u52d5\u304f\u306f\u305a\u3067\u3059\u3002\n\n# \u3081\u3093\u3069\u3044\u306e\u3067ORM\u3064\u304b\u304a\u3046\n\n\u3082\u306f\u3084Redshift\u95a2\u4fc2\u7121\u3044\u3093\u3067\u3059\u304c\u3001Go\u306e`database/sql`\u5341\u5206\u53ef\u611b\u3044\u3051\u3069\u3001row.Next\u3068\u304brow.Scan\u3068\u304b\u3081\u3093\u3069\u3044\u306e\u3067\u3001\u305d\u306e\u3078\u3093\u3082\u3044\u3044\u611f\u3058\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3084\u3064\u4f7f\u3046\u3002\n\n\u4eca\u56de\u306fgorm\u3067\n\n```diff\n package main\n\n import (\n-\t\"database/sql\"\n \t\"log\"\n\n+\t\"github.com/jinzhu/gorm\"\n \t_ \"github.com/lib/pq\"\n )\n\n // User \u9069\u5f53\u306b\n type User struct {\n-\tName string `sql:\"username\"`\n+\tName string `gorm:\"column:username\"`\n }\n\n func main() {\n-\tdb, err := sql.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n+\tdb, err := gorm.Open(\"postgres\", \"postgres://user:pass@host:port/dbname\")\n \tif err != nil {\n \t\tlog.Fatalln(\"\u3064\u306a\u3050\u306e\", err)\n \t}\n \tdefer db.Close()\n\n-\trow, err := db.Query(\"SELECT username FROM users WHERE username LIKE $1\", \"otiai%\")\n+\tusers := []User{}\n+\terr = db.Where(\"username LIKE ?\", \"otiai%\").Limit(10).Find(&users).Error\n \tif err != nil {\n-\t\tlog.Fatalln(\"\u30af\u30a8\u30ea\u3059\u308b\u306e\", err)\n-\t}\n-\n-\tfor row.Next() { // \u884c\u304c\u3042\u308b\u307e\u3067true\n-\t\tuser := new(User)\n-\t\terr := row.Scan(&user.Name)\n-\t\tif err != nil {\n-\t\t\tlog.Fatalln(\"\u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n-\t\t}\n-\n-\t\tlog.Printf(\"%+v\\n\", user)\n-\t}\n-\tif err := row.Err(); err != nil {\n-\t\tlog.Fatalln(\"\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u4e2d\u306e\", err)\n+\t\tlog.Fatalln(\"\u30af\u30a8\u30ea\u3057\u3066\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u306e\", err)\n \t}\n+\tlog.Printf(\"%+v\\n\", users)\n }\n```\n\n\u3059\u3052\u30fc\u697d\u3002gorm\u304c\u3001Find\u3068\u304b\u3067\u6e21\u3059struct\u306etype\u540d\u898b\u3066\u3001\u3053\u306e\u5834\u5408\u52dd\u624b\u306b`users`\u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u540d\u3092\u5165\u308c\u307e\u3059\u3002\u767a\u884c\u3055\u308c\u308bSQL\u3092\u751f\u3067\u898b\u305f\u3044\u5834\u5408\u306f\n\n```go\ndb.LogMode(true)\n```\n\n\u3068\u3001\u3069\u3063\u304b\u306b\u306f\u3055\u3081\u3070stdout\u306b\u51fa\u307e\u3059\u3002\n\n- https://github.com/jinzhu/gorm\n\n\n# \u3068\u3044\u3046\u304b\n\n\u305c\u3093\u305c\u3093Redshift\u306e\u8a18\u4e8b\u3058\u3083\u306a\u304b\u3063\u305f...\n", "tags": ["Go", "golang", "redshift", "PostgreSQL"]}