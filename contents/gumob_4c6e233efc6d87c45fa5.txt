{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nIP\u30a2\u30c9\u30ec\u30b9\u304c\u5909\u308f\u308b\u5ea6\u306bAWS\u306eGUI\u3067\u5909\u66f4\u3059\u308b\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u52d5\u3067\u30a4\u30f3\u30d0\u30a6\u30f3\u30c9\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u30fb\u524a\u9664\u30b9\u30af\u30ea\u30d7\u30c8\u70ba\u306eBash\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3002\nregister/unregister\u95a2\u6570\u306e\u7b2c1\u5f15\u6570\u306fSecurity Group\u306eGroupId\u3067\u306f\u7121\u304f\u3001GroupName\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u6709\u308a\u3002\u307e\u305f\u3001unregister\u95a2\u6570\u3067SSH\u30dd\u30fc\u30c8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308bIP\u306f\u5168\u3066\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001register\u95a2\u6570\u3067\u56fa\u5b9aIP\u306e\u767b\u9332\u3092\u884c\u3046\u4e8b\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n#!/bin/sh\n\n# Global variables\naws_profile='aws-profile'\naws_region='us-west-2'\nssh_protocol='tcp'\nssh_port=5252\n\nfunction unregister () {\n\n    sg_name=$1\n\n    # Retrieve security groups\n    sg_json=$(\\\n        aws ec2 describe-security-groups \\\n        --profile $aws_profile \\\n        --region $aws_region \\\n        --query 'sort_by(SecurityGroups[?GroupName==`'${sg_name}'`].{name:Tags[?Key==`Name`].Value|[0],sg_id:GroupId,cidr:IpPermissions[?ToPort==`'${ssh_port}'`].IpRanges[].CidrIp},&name)' \\\n    )\n    sg_json_len=$(echo $sg_json | jq length)\n\n    for (( i=0; i < $sg_json_len; i++ )) {\n\n        name=$(echo $sg_json | jq -r .[$i].name)\n        sg_id=$(echo $sg_json | jq -r .[$i].sg_id)\n        cidrs_json=$(echo $sg_json | jq -r .[$i].cidr)\n        cidrs_json_len=$(echo $cidrs_json | jq length)\n\n        # Unregister\n        for (( j=0; j < $cidrs_json_len; j++ )) {\n\n            cidr=$(echo $cidrs_json | jq -r .[$j])\n            echo \"Security Group    : $sg_name\"\n            echo \"Security Group ID : $sg_id\"\n            echo \"CIDR              : $cidr\"\n            echo\n            aws ec2 revoke-security-group-ingress --profile $aws_profile --group-id $sg_id --protocol $ssh_protocol --port $ssh_port --cidr $cidr\n\n        }\n    }\n}\n\nfunction register () {\n\n    sg_name=$1\n    cidr=$2\n\n    # Retrieve security group id\n    sg_id=$(\\\n        aws ec2 describe-security-groups \\\n        --profile $aws_profile \\\n        --region $aws_region \\\n        --query 'SecurityGroups[?GroupName=='\\'${sg_name}\\''].GroupId|[0]' \\\n        --output text\n    )\n\n    # Unregister\n    echo \"Security Group    : $sg_name\"\n    echo \"Security Group ID : $sg_id\"\n    echo \"CIDR              : $cidr\"\n    echo\n    aws ec2 authorize-security-group-ingress --profile $aws_profile --group-id $sg_id --protocol $ssh_protocol --port $ssh_port --cidr $cidr\n\n}\n\necho\necho \"######################################################\"\necho \"# Unregister Security Group\"\necho \"######################################################\"\necho\n\n# Unregister all ip addresses\nunregister 'hostname-dev-ec2-sg'\nunregister 'hostname-stg-ec2-sg'\nunregister 'hostname-prd-ec2-sg'\n\necho\necho \"######################################################\"\necho \"# Register Security Group\"\necho \"######################################################\"\necho\n\n# Register static ip addresses\nipaddr_static='XXX.XXX.XXX.XXX'\nregister 'hostname-dev-ec2-sg' $ipaddr_static'/32'\nregister 'hostname-stg-ec2-sg' $ipaddr_static'/32'\nregister 'hostname-prd-ec2-sg' $ipaddr_static'/32'\n\n# Register dynamic ip addresses\nipaddr_dynamic=$(curl -s http://checkip.amazonaws.com/)\nregister 'hostname-dev-ec2-sg' $ipaddr_dynamic'/32'\nregister 'hostname-stg-ec2-sg' $ipaddr_dynamic'/32'\nregister 'hostname-prd-ec2-sg' $ipaddr_dynamic'/32'\n\n# \u6982\u8981\nIP\u30a2\u30c9\u30ec\u30b9\u304c\u5909\u308f\u308b\u5ea6\u306bAWS\u306eGUI\u3067\u5909\u66f4\u3059\u308b\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u52d5\u3067\u30a4\u30f3\u30d0\u30a6\u30f3\u30c9\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u30fb\u524a\u9664\u30b9\u30af\u30ea\u30d7\u30c8\u70ba\u306eBash\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3002\nregister/unregister\u95a2\u6570\u306e\u7b2c1\u5f15\u6570\u306fSecurity Group\u306eGroupId\u3067\u306f\u7121\u304f\u3001GroupName\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u6709\u308a\u3002\u307e\u305f\u3001unregister\u95a2\u6570\u3067SSH\u30dd\u30fc\u30c8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308bIP\u306f\u5168\u3066\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001register\u95a2\u6570\u3067\u56fa\u5b9aIP\u306e\u767b\u9332\u3092\u884c\u3046\u4e8b\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3002\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\n~~~bash\n#!/bin/sh\n\n# Global variables\naws_profile='aws-profile'\naws_region='us-west-2'\nssh_protocol='tcp'\nssh_port=5252\n\nfunction unregister () {\n\n    sg_name=$1\n\n    # Retrieve security groups\n    sg_json=$(\\\n    \taws ec2 describe-security-groups \\\n    \t--profile $aws_profile \\\n    \t--region $aws_region \\\n        --query 'sort_by(SecurityGroups[?GroupName==`'${sg_name}'`].{name:Tags[?Key==`Name`].Value|[0],sg_id:GroupId,cidr:IpPermissions[?ToPort==`'${ssh_port}'`].IpRanges[].CidrIp},&name)' \\\n    )\n    sg_json_len=$(echo $sg_json | jq length)\n\n    for (( i=0; i < $sg_json_len; i++ )) {\n\n    \tname=$(echo $sg_json | jq -r .[$i].name)\n    \tsg_id=$(echo $sg_json | jq -r .[$i].sg_id)\n    \tcidrs_json=$(echo $sg_json | jq -r .[$i].cidr)\n        cidrs_json_len=$(echo $cidrs_json | jq length)\n\n        # Unregister\n        for (( j=0; j < $cidrs_json_len; j++ )) {\n\n            cidr=$(echo $cidrs_json | jq -r .[$j])\n            echo \"Security Group    : $sg_name\"\n            echo \"Security Group ID : $sg_id\"\n            echo \"CIDR              : $cidr\"\n            echo\n            aws ec2 revoke-security-group-ingress --profile $aws_profile --group-id $sg_id --protocol $ssh_protocol --port $ssh_port --cidr $cidr\n\n        }\n    }\n}\n\nfunction register () {\n\n    sg_name=$1\n    cidr=$2\n\n    # Retrieve security group id\n    sg_id=$(\\\n    \taws ec2 describe-security-groups \\\n    \t--profile $aws_profile \\\n    \t--region $aws_region \\\n        --query 'SecurityGroups[?GroupName=='\\'${sg_name}\\''].GroupId|[0]' \\\n        --output text\n    )\n\n    # Unregister\n    echo \"Security Group    : $sg_name\"\n    echo \"Security Group ID : $sg_id\"\n    echo \"CIDR              : $cidr\"\n    echo\n    aws ec2 authorize-security-group-ingress --profile $aws_profile --group-id $sg_id --protocol $ssh_protocol --port $ssh_port --cidr $cidr\n\n}\n\necho\necho \"######################################################\"\necho \"# Unregister Security Group\"\necho \"######################################################\"\necho\n\n# Unregister all ip addresses\nunregister 'hostname-dev-ec2-sg'\nunregister 'hostname-stg-ec2-sg'\nunregister 'hostname-prd-ec2-sg'\n\necho\necho \"######################################################\"\necho \"# Register Security Group\"\necho \"######################################################\"\necho\n\n# Register static ip addresses\nipaddr_static='XXX.XXX.XXX.XXX'\nregister 'hostname-dev-ec2-sg' $ipaddr_static'/32'\nregister 'hostname-stg-ec2-sg' $ipaddr_static'/32'\nregister 'hostname-prd-ec2-sg' $ipaddr_static'/32'\n\n# Register dynamic ip addresses\nipaddr_dynamic=$(curl -s http://checkip.amazonaws.com/)\nregister 'hostname-dev-ec2-sg' $ipaddr_dynamic'/32'\nregister 'hostname-stg-ec2-sg' $ipaddr_dynamic'/32'\nregister 'hostname-prd-ec2-sg' $ipaddr_dynamic'/32'\n~~~\n", "tags": ["AWS", "cli", "Bash", "jq"]}