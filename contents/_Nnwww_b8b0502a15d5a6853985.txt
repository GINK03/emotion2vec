{"context": " More than 1 year has passed since last update.\u69cb\u9020\u4f53\u304b\u3089Rust\u306e\u7279\u5fb4\u3067\u3042\u308b\u30c8\u30ec\u30a4\u30c8\u30d9\u30fc\u30b9\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u307e\u3067\u306e\u6d41\u308c\u3092\u7ffb\u8a33\u3057\u307e\u3059\u3002\n\u6b21: 5.16. Method Syntax\n\u8aa4\u8a33\u3084\u6539\u5584\u6848\u7b49\u3001\u898b\u3064\u3051\u305f\u5834\u5408\u306f\u3054\u6307\u6458\u306e\u7a0b\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u5143\u8a18\u4e8b : https://doc.rust-lang.org/book/structs.html \u306eRust1.6\u6642\u70b9\n\u30e9\u30a4\u30bb\u30f3\u30b9 : MIT license, Apache License 2.0.\n\n\nSee LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details.\n\n\n\n\n\n\u69cb\u9020\u4f53\nstruct\u306f\u3088\u308a\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b\u65b9\u6cd5\u306e1\u3064\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u3082\u3057\u79c1\u305f\u3061\u304c2\u6b21\u5143\u7a7a\u9593\u306e\u5ea7\u6a19\u306b\u95a2\u3059\u308b\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u3057\u3066\u3001x\u3068y\u3001\u4e21\u65b9\u306e\u5024\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\nlet origin_x = 0;\nlet origin_y = 0;\n\nstruct\u306f\u3053\u308c\u30892\u3064\u30921\u3064\u306e\u30c7\u30fc\u30bf\u578b\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let origin = Point { x: 0, y: 0 }; // origin: Point\n\n    println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n}\n\n\u3053\u3053\u3067\u591a\u304f\u306e\u60c5\u5831\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u304b\u3089\u3001\u9806\u756a\u306b\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001struct\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u69cb\u9020\u4f53\u3068\u305d\u306e\u540d\u524d\u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u6163\u7fd2\u306b\u3088\u308a\u3001\u69cb\u9020\u4f53\u306f\u521d\u3081\u304c\u5927\u6587\u5b57\u306e\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002PointInSpace\u3067\u3042\u308a\u3001Point_In_Space\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u3001let\u3067struct\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306fkey: value\u30b9\u30bf\u30a4\u30eb\u306e\u69cb\u6587\u3067\u305d\u308c\u305e\u308c\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u9806\u5e8f\u306f\u5143\u306e\u5ba3\u8a00\u3068\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306b\u3001\u4f5c\u6210\u3055\u308c\u305f\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u540d\u524d\u3092\u6301\u3064\u305f\u3081\u3001origin.x\u3068\u3044\u3046\u3088\u3046\u306b\u30c9\u30c3\u30c8\u8868\u8a18\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\nRust\u306e\u4ed6\u306e\u675f\u7e1b\u306e\u3088\u3046\u306b\u3001struct\u304c\u6301\u3064\u5024\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002mut\u3092\u4f7f\u3046\u3068\u5024\u3092\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b\u3067\u304d\u307e\u3059\u3002\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let mut point = Point { x: 0, y: 0 };\n\n    point.x = 5;\n\n    println!(\"The point is at ({}, {})\", point.x, point.y);\n}\n\n\u3053\u308c\u306fThe point is at (5, 0)\u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nRust\u306f\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u5316\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\nstruct Point {\n    mut x: i32,\n    y: i32,\n}\n\n\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306f\u675f\u7e1b\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u5c5e\u6027\u3067\u3042\u308a\u3001\u69cb\u9020\u4f53\u81ea\u4f53\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u5c5e\u6027\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3082\u3057\u3042\u306a\u305f\u304c\u30d5\u30a3\u30fc\u30eb\u30c9\u30ec\u30d9\u30eb\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3092\u4f7f\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u521d\u3081\u3053\u305d\u5947\u5999\u306b\u898b\u3048\u308b\u3082\u306e\u306e\u3001\u975e\u5e38\u306b\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u5c11\u3057\u306e\u9593\u3060\u3051\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u69cb\u9020\u4f53\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let mut point = Point { x: 0, y: 0 };\n\n    point.x = 5;\n\n    let point = point; // \u3053\u306e\u65b0\u3057\u3044\u675f\u7e1b\u3067\u5909\u66f4\u4e0d\u53ef\u306b\u3057\u307e\u3059\n\n    point.y = 6; // \u3053\u308c\u304c\u539f\u56e0\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u307e\u3059\n}\n\n\n\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\nstruct\u306e\u521d\u671f\u5316\u6642\u306b\u306f\u3001\u5024\u306e\u4e00\u90e8\u3092\u4ed6\u306e\u69cb\u9020\u4f53\u304b\u3089\u30b3\u30d4\u30fc\u3057\u305f\u3044\u3053\u3068\u3092\u793a\u3059..\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\nstruct Point3d {\n    x: i32,\n    y: i32,\n    z: i32,\n}\n\nlet mut point = Point3d { x: 0, y: 0, z: 0 };\npoint = Point3d { y: 1, .. point };\n\n\u3053\u3053\u3067\u306fpoint\u306b\u65b0\u3057\u3044y\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u304c\u3001x\u3068z\u306f\u53e4\u3044\u5024\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\u3069\u308c\u304b\u306estruct\u3068\u540c\u3058\u5024\u3092\u4f5c\u308b\u4ed6\u306b\u3082\u3001\u3053\u306e\u69cb\u6587\u3092\u65b0\u305f\u306a\u5024\u306e\u4f5c\u6210\u306b\u4f7f\u7528\u3067\u304d\u3001\u660e\u793a\u3059\u308b\u3053\u3068\u306a\u304f\u5024\u306e\u30b3\u30d4\u30fc\u304c\u884c\u3048\u307e\u3059\u3002\n\nstruct Point3d {\n    x: i32,\n    y: i32,\n    z: i32,\n}\nlet origin = Point3d { x: 0, y: 0, z: 0 };\nlet point = Point3d { z: 1, x: 2, .. origin };\n\n\n\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\nRust\u306b\u306f'\u30bf\u30d7\u30eb\u69cb\u9020\u4f53'\u3068\u547c\u3070\u308c\u308b\u3001\u30bf\u30d7\u30eb\u3068struct\u306e\u30cf\u30a4\u30d6\u30ea\u30c3\u30c8\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u578b\u304c\u3042\u308a\u307e\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u81ea\u4f53\u306b\u306f\u540d\u524d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u540d\u524d\u304c\u3042\u308a\u307e\u305b\u3093\u3002\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\n\u3053\u308c\u30892\u3064\u306f\u540c\u3058\u5024\u3092\u6301\u3064\u540c\u58eb\u3067\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u7b49\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u3088\u308a\u3082struct\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002Color\u3084Point\u306f\u3053\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059\u3002\nstruct Color {\n    red: i32,\n    blue: i32,\n    green: i32,\n}\n\nstruct Point {\n    x: i32,\n    y: i32,\n    z: i32,\n}\n\n\u4eca\u3001\u79c1\u305f\u3061\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4f4d\u7f6e\u3067\u306f\u306a\u304f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u540d\u524d\u305d\u306e\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u826f\u3044\u540d\u524d\u306f\u91cd\u8981\u3067\u3001struct\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u540d\u524d\u305d\u306e\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u8a33\u6ce8: \u539f\u6587\u3092\u5143\u306b\u565b\u307f\u7815\u304f\u3068\u3001\u300c\u30bf\u30d7\u30eb\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4e26\u3073\u306b\u3088\u3063\u3066\u533a\u5225\u3055\u308c\u3001\u69cb\u9020\u4f53\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u540d\u524d\u306b\u3088\u3063\u3066\u533a\u5225\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u30bf\u30d7\u30eb\u3068\u69cb\u9020\u4f53\u306e\u6700\u305f\u308b\u9055\u3044\u3067\u3042\u308a\u3001\u69cb\u9020\u4f53\u3092\u6301\u3064\u3053\u3068\u306f\u540d\u524d\u3092\u4ed8\u3051\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3092\u6301\u3064\u3053\u3068\u306b\u7b49\u3057\u3044\u305f\u3081\u3001\u69cb\u9020\u4f53\u306b\u304a\u3051\u308b\u540d\u524d\u4ed8\u3051\u306f\u91cd\u8981\u3067\u3059\u3002\u300d\u3068\u3044\u3063\u305f\u6240\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u304c\u975e\u5e38\u306b\u4fbf\u5229\u306a\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u30011\u8981\u7d20\u3067\u4f7f\u3046\u5834\u5408\u3060\u3051\u3067\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u3068\u3001\u305d\u308c\u81ea\u4f53\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u306a\u8868\u73fe\u3092\u660e\u78ba\u306b\u533a\u5225\u3067\u304d\u308b\u3088\u3046\u306a\u65b0\u3057\u3044\u578b\u3092\u4f5c\u6210\u3067\u304d\u308b\u3053\u3068\u304b\u3089\u3001\u79c1\u305f\u3061\u306f\u3053\u308c\u3092'newtype'\u30d1\u30bf\u30fc\u30f3\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\nstruct Inches(i32);\n\nlet length = Inches(10);\n\nlet Inches(integer_length) = length;\nprintln!(\"length is {} inches\", integer_length);\n\n\u4e0a\u8a18\u306e\u901a\u308a\u3001let\u3092\u4f7f\u3063\u3066\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u6a19\u6e96\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u5185\u90e8\u306e\u6574\u6570\u578b\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306flet Inches(integer_length)\u304cinteger_length\u307810\u3092\u675f\u7e1b\u3057\u307e\u3059\u3002\n\nUnit-like \u69cb\u9020\u4f53\n\u3042\u306a\u305f\u306f\u5168\u304f\u30e1\u30f3\u30d0\u3092\u6301\u305f\u306a\u3044struct\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\nstruct Electron;\n\n\u7a7a\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b()\u306f\u6642\u3005unit\u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306b\u4f3c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3053\u306e\u3088\u3046\u306a\u69cb\u9020\u4f53\u3092unit-like\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u306e\u3088\u3046\u306b\u3001\u3053\u308c\u306f\u65b0\u3057\u3044\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u5358\u4f53\u3067\u3082\u3054\u304f\u307e\u308c\u306b\u5f79\u7acb\u3061\u307e\u3059(\u3082\u3063\u3068\u3082\u3001\u6642\u3005\u578b\u3092\u30de\u30fc\u30af\u4ee3\u308f\u308a\u3068\u3057\u3066\u5f79\u7acb\u3066\u308b\u7a0b\u5ea6\u3067\u3059)\u304c\u3001\u4ed6\u306e\u6a5f\u80fd\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u306a\u305f\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3067\u304d\u308b\u7279\u5b9a\u306e\u30c8\u30ec\u30a4\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u305f\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306e\u4f5c\u6210\u3092\u8981\u6c42\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3082\u3057\u305d\u306e\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306e\u4e2d\u306b\u4fdd\u5b58\u3059\u3079\u304d\u5024\u304c\u4f55\u3082\u306a\u3051\u308c\u3070\u3001\u3042\u306a\u305f\u306f\u30c0\u30df\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\u305f\u3060unit-like\u306astruct\u3092\u4f5c\u308b\u3060\u3051\u3067\u826f\u3044\u306e\u3067\u3059\u3002\n\u69cb\u9020\u4f53\u304b\u3089Rust\u306e\u7279\u5fb4\u3067\u3042\u308b\u30c8\u30ec\u30a4\u30c8\u30d9\u30fc\u30b9\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u307e\u3067\u306e\u6d41\u308c\u3092\u7ffb\u8a33\u3057\u307e\u3059\u3002\n\u6b21: [5.16. Method Syntax](http://qiita.com/_Nnwww/items/b594d02143166c62b122)\n\u8aa4\u8a33\u3084\u6539\u5584\u6848\u7b49\u3001\u898b\u3064\u3051\u305f\u5834\u5408\u306f\u3054\u6307\u6458\u306e\u7a0b\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n* \u5143\u8a18\u4e8b : https://doc.rust-lang.org/book/structs.html \u306eRust1.6\u6642\u70b9\n* \u30e9\u30a4\u30bb\u30f3\u30b9 : MIT license, Apache License 2.0.\n    - See [LICENSE-APACHE](https://github.com/rust-lang/rust/blob/1.2.0/LICENSE-APACHE), [LICENSE-MIT](https://github.com/rust-lang/rust/blob/1.2.0/LICENSE-MIT), and [COPYRIGHT](https://github.com/rust-lang/rust/blob/1.2.0/COPYRIGHT) for details.\n\n---\n\n# \u69cb\u9020\u4f53\n\n<!-- `struct`s are a way of creating more complex data types. For example, if we were\ndoing calculations involving coordinates in 2D space, we would need both an `x`\nand a `y` value: -->\n`struct`\u306f\u3088\u308a\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b\u65b9\u6cd5\u306e1\u3064\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u3082\u3057\u79c1\u305f\u3061\u304c2\u6b21\u5143\u7a7a\u9593\u306e\u5ea7\u6a19\u306b\u95a2\u3059\u308b\u8a08\u7b97\u3092\u884c\u3063\u3066\u3044\u308b\u3068\u3057\u3066\u3001`x`\u3068`y`\u3001\u4e21\u65b9\u306e\u5024\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n```rust\nlet origin_x = 0;\nlet origin_y = 0;\n```\n\n<!-- A `struct` lets us combine these two into a single, unified datatype: -->\n`struct`\u306f\u3053\u308c\u30892\u3064\u30921\u3064\u306e\u30c7\u30fc\u30bf\u578b\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let origin = Point { x: 0, y: 0 }; // origin: Point\n\n    println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n}\n```\n\n<!-- There\u2019s a lot going on here, so let\u2019s break it down. We declare a `struct` with\nthe `struct` keyword, and then with a name. By convention, `struct`s begin with\na capital letter and are camel cased: `PointInSpace`, not `Point_In_Space`. -->\n\u3053\u3053\u3067\u591a\u304f\u306e\u60c5\u5831\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u304b\u3089\u3001\u9806\u756a\u306b\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001`struct`\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u69cb\u9020\u4f53\u3068\u305d\u306e\u540d\u524d\u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u6163\u7fd2\u306b\u3088\u308a\u3001\u69cb\u9020\u4f53\u306f\u521d\u3081\u304c\u5927\u6587\u5b57\u306e\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002`PointInSpace`\u3067\u3042\u308a\u3001`Point_In_Space`\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n<!-- We can create an instance of our `struct` via `let`, as usual, but we use a `key:\nvalue` style syntax to set each field. The order doesn\u2019t need to be the same as\nin the original declaration. -->\n\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u3001`let`\u3067`struct`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f`key: value`\u30b9\u30bf\u30a4\u30eb\u306e\u69cb\u6587\u3067\u305d\u308c\u305e\u308c\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u9806\u5e8f\u306f\u5143\u306e\u5ba3\u8a00\u3068\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n<!-- Finally, because fields have names, we can access the field through dot\nnotation: `origin.x`. -->\n\u6700\u5f8c\u306b\u3001\u4f5c\u6210\u3055\u308c\u305f\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u540d\u524d\u3092\u6301\u3064\u305f\u3081\u3001`origin.x`\u3068\u3044\u3046\u3088\u3046\u306b\u30c9\u30c3\u30c8\u8868\u8a18\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n<!-- The values in `struct`s are immutable by default, like other bindings in Rust.\nUse `mut` to make them mutable -->\nRust\u306e\u4ed6\u306e\u675f\u7e1b\u306e\u3088\u3046\u306b\u3001`struct`\u304c\u6301\u3064\u5024\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002`mut`\u3092\u4f7f\u3046\u3068\u5024\u3092\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b\u3067\u304d\u307e\u3059\u3002\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let mut point = Point { x: 0, y: 0 };\n\n    point.x = 5;\n\n    println!(\"The point is at ({}, {})\", point.x, point.y);\n}\n```\n\n<!-- This will print `The point is at (5, 0)`. -->\n\u3053\u308c\u306f`The point is at (5, 0)`\u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n<!-- Rust does not support field mutability at the language level, so you cannot\nwrite something like this: -->\nRust\u306f\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u5316\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u66f8\u304f\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\n```rust,ignore\nstruct Point {\n    mut x: i32,\n    y: i32,\n}\n```\n<!-- Mutability is a property of the binding, not of the structure itself. If you\u2019re\nused to field-level mutability, this may seem strange at first, but it\nsignificantly simplifies things. It even lets you make things mutable for a short\ntime only: -->\n\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306f\u675f\u7e1b\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u5c5e\u6027\u3067\u3042\u308a\u3001\u69cb\u9020\u4f53\u81ea\u4f53\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u5c5e\u6027\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3082\u3057\u3042\u306a\u305f\u304c\u30d5\u30a3\u30fc\u30eb\u30c9\u30ec\u30d9\u30eb\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3092\u4f7f\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u521d\u3081\u3053\u305d\u5947\u5999\u306b\u898b\u3048\u308b\u3082\u306e\u306e\u3001\u975e\u5e38\u306b\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u5c11\u3057\u306e\u9593\u3060\u3051\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u69cb\u9020\u4f53\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let mut point = Point { x: 0, y: 0 };\n\n    point.x = 5;\n\n    let point = point; // \u3053\u306e\u65b0\u3057\u3044\u675f\u7e1b\u3067\u5909\u66f4\u4e0d\u53ef\u306b\u3057\u307e\u3059\n\n    point.y = 6; // \u3053\u308c\u304c\u539f\u56e0\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u307e\u3059\n}\n```\n\n# \u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\n\n<!-- A `struct` can include `..` to indicate that you want to use a copy of some\nother `struct` for some of the values. For example: -->\n`struct`\u306e\u521d\u671f\u5316\u6642\u306b\u306f\u3001\u5024\u306e\u4e00\u90e8\u3092\u4ed6\u306e\u69cb\u9020\u4f53\u304b\u3089\u30b3\u30d4\u30fc\u3057\u305f\u3044\u3053\u3068\u3092\u793a\u3059`..`\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\n\n```rust\nstruct Point3d {\n    x: i32,\n    y: i32,\n    z: i32,\n}\n\nlet mut point = Point3d { x: 0, y: 0, z: 0 };\npoint = Point3d { y: 1, .. point };\n```\n\n<!-- This gives `point` a new `y`, but keeps the old `x` and `z` values. It doesn\u2019t\nhave to be the same `struct` either, you can use this syntax when making new\nones, and it will copy the values you don\u2019t specify:-->\n\u3053\u3053\u3067\u306f`point`\u306b\u65b0\u3057\u3044`y`\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u304c\u3001`x`\u3068`z`\u306f\u53e4\u3044\u5024\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\u3069\u308c\u304b\u306e`struct`\u3068\u540c\u3058\u5024\u3092\u4f5c\u308b\u4ed6\u306b\u3082\u3001\u3053\u306e\u69cb\u6587\u3092\u65b0\u305f\u306a\u5024\u306e\u4f5c\u6210\u306b\u4f7f\u7528\u3067\u304d\u3001\u660e\u793a\u3059\u308b\u3053\u3068\u306a\u304f\u5024\u306e\u30b3\u30d4\u30fc\u304c\u884c\u3048\u307e\u3059\u3002\n\n```rust\n\nstruct Point3d {\n    x: i32,\n    y: i32,\n    z: i32,\n}\nlet origin = Point3d { x: 0, y: 0, z: 0 };\nlet point = Point3d { z: 1, x: 2, .. origin };\n```\n\n# \u30bf\u30d7\u30eb\u69cb\u9020\u4f53\n<!-- Rust has another data type that\u2019s like a hybrid between a [tuple][tuple] and a\n`struct`, called a \u2018tuple struct\u2019. Tuple structs have a name, but\ntheir fields don\u2019t:-->\nRust\u306b\u306f'\u30bf\u30d7\u30eb\u69cb\u9020\u4f53'\u3068\u547c\u3070\u308c\u308b\u3001[\u30bf\u30d7\u30eb](https://doc.rust-lang.org/book/primitive-types.html#tuples)\u3068`struct`\u306e\u30cf\u30a4\u30d6\u30ea\u30c3\u30c8\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u578b\u304c\u3042\u308a\u307e\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u81ea\u4f53\u306b\u306f\u540d\u524d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u540d\u524d\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n```rust\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n```\n<!-- These two will not be equal, even if they have the same values: -->\n\u3053\u308c\u30892\u3064\u306f\u540c\u3058\u5024\u3092\u6301\u3064\u540c\u58eb\u3067\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u7b49\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```rust\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\nlet black = Color(0, 0, 0);\nlet origin = Point(0, 0, 0);\n```\n\n<!-- It is almost always better to use a `struct` than a tuple struct. We would write\n`Color` and `Point` like this instead: -->\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u3088\u308a\u3082`struct`\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002`Color`\u3084`Point`\u306f\u3053\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059\u3002\n\n```rust\nstruct Color {\n    red: i32,\n    blue: i32,\n    green: i32,\n}\n\nstruct Point {\n    x: i32,\n    y: i32,\n    z: i32,\n}\n```\n\n<!-- Now, we have actual names, rather than positions. Good names are important,\nand with a `struct`, we have actual names. -->\n\u4eca\u3001\u79c1\u305f\u3061\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4f4d\u7f6e\u3067\u306f\u306a\u304f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u540d\u524d\u305d\u306e\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u826f\u3044\u540d\u524d\u306f\u91cd\u8981\u3067\u3001`struct`\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u540d\u524d\u305d\u306e\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n> \u8a33\u6ce8: \u539f\u6587\u3092\u5143\u306b\u565b\u307f\u7815\u304f\u3068\u3001\u300c\u30bf\u30d7\u30eb\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4e26\u3073\u306b\u3088\u3063\u3066\u533a\u5225\u3055\u308c\u3001\u69cb\u9020\u4f53\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u540d\u524d\u306b\u3088\u3063\u3066\u533a\u5225\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u30bf\u30d7\u30eb\u3068\u69cb\u9020\u4f53\u306e\u6700\u305f\u308b\u9055\u3044\u3067\u3042\u308a\u3001\u69cb\u9020\u4f53\u3092\u6301\u3064\u3053\u3068\u306f\u540d\u524d\u3092\u4ed8\u3051\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3092\u6301\u3064\u3053\u3068\u306b\u7b49\u3057\u3044\u305f\u3081\u3001\u69cb\u9020\u4f53\u306b\u304a\u3051\u308b\u540d\u524d\u4ed8\u3051\u306f\u91cd\u8981\u3067\u3059\u3002\u300d\u3068\u3044\u3063\u305f\u6240\u3067\u3057\u3087\u3046\u304b\u3002\n\n<!-- There _is_ one case when a tuple struct is very useful, though, and that\u2019s a\ntuple struct with only one element. We call this the \u2018newtype\u2019 pattern, because\nit allows you to create a new type, distinct from that of its contained value\nand expressing its own semantic meaning: -->\n\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u304c\u975e\u5e38\u306b\u4fbf\u5229\u306a\u5834\u5408\u3082_\u3042\u308a\u307e\u3059_\u304c\u30011\u8981\u7d20\u3067\u4f7f\u3046\u5834\u5408\u3060\u3051\u3067\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u3068\u3001\u305d\u308c\u81ea\u4f53\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u306a\u8868\u73fe\u3092\u660e\u78ba\u306b\u533a\u5225\u3067\u304d\u308b\u3088\u3046\u306a\u65b0\u3057\u3044\u578b\u3092\u4f5c\u6210\u3067\u304d\u308b\u3053\u3068\u304b\u3089\u3001\u79c1\u305f\u3061\u306f\u3053\u308c\u3092'newtype'\u30d1\u30bf\u30fc\u30f3\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n```rust\nstruct Inches(i32);\n\nlet length = Inches(10);\n\nlet Inches(integer_length) = length;\nprintln!(\"length is {} inches\", integer_length);\n```\n\n<!-- As you can see here, you can extract the inner integer type through a\ndestructuring `let`, just as with regular tuples. In this case, the\n`let Inches(integer_length)` assigns `10` to `integer_length`. -->\n\u4e0a\u8a18\u306e\u901a\u308a\u3001`let`\u3092\u4f7f\u3063\u3066\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u6a19\u6e96\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u5185\u90e8\u306e\u6574\u6570\u578b\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f`let Inches(integer_length)`\u304c`integer_length`\u3078`10`\u3092\u675f\u7e1b\u3057\u307e\u3059\u3002\n\n\n# Unit-like \u69cb\u9020\u4f53\n\n<!-- You can define a `struct` with no members at all: -->\n\u3042\u306a\u305f\u306f\u5168\u304f\u30e1\u30f3\u30d0\u3092\u6301\u305f\u306a\u3044`struct`\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n```rust\nstruct Electron;\n```\n\n<!-- Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty\ntuple, `()`, sometimes called \u2018unit\u2019. Like a tuple struct, it defines a\nnew type. -->\n\u7a7a\u306e\u30bf\u30d7\u30eb\u3067\u3042\u308b`()`\u306f\u6642\u3005`unit`\u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306b\u4f3c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3053\u306e\u3088\u3046\u306a\u69cb\u9020\u4f53\u3092`unit-like`\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u30bf\u30d7\u30eb\u69cb\u9020\u4f53\u306e\u3088\u3046\u306b\u3001\u3053\u308c\u306f\u65b0\u3057\u3044\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n<!-- This is rarely useful on its own (although sometimes it can serve as a\nmarker type), but in combination with other features, it can become\nuseful. For instance, a library may ask you to create a structure that\nimplements a certain [trait][trait] to handle events. If you don\u2019t have\nany data you need to store in the structure, you can just create a\nunit-like `struct`. -->\n\u3053\u308c\u306f\u5358\u4f53\u3067\u3082\u3054\u304f\u307e\u308c\u306b\u5f79\u7acb\u3061\u307e\u3059(\u3082\u3063\u3068\u3082\u3001\u6642\u3005\u578b\u3092\u30de\u30fc\u30af\u4ee3\u308f\u308a\u3068\u3057\u3066\u5f79\u7acb\u3066\u308b\u7a0b\u5ea6\u3067\u3059)\u304c\u3001\u4ed6\u306e\u6a5f\u80fd\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u306a\u305f\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3067\u304d\u308b\u7279\u5b9a\u306e[\u30c8\u30ec\u30a4\u30c8](http://qiita.com/_Nnwww/items/892e0d765b7c2a97661e)\u304c\u5b9f\u88c5\u3055\u308c\u305f\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306e\u4f5c\u6210\u3092\u8981\u6c42\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3082\u3057\u305d\u306e\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u306e\u4e2d\u306b\u4fdd\u5b58\u3059\u3079\u304d\u5024\u304c\u4f55\u3082\u306a\u3051\u308c\u3070\u3001\u3042\u306a\u305f\u306f\u30c0\u30df\u30fc\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\u305f\u3060unit-like\u306a`struct`\u3092\u4f5c\u308b\u3060\u3051\u3067\u826f\u3044\u306e\u3067\u3059\u3002\n", "tags": ["rust", "\u7ffb\u8a33", "translation"]}