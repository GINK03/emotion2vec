{"context": "\n\n\u6982\u8981\n\u30bf\u30a4\u30c8\u30eb\u306e\u3088\u3046\u306aListView\u307b\u3057\u3044\u306a\u3042\u3001\u3068\u601d\u3063\u3066\u3044\u308d\u3044\u308d\u8abf\u3079\u3001\n\u5148\u4eba\u305f\u3061\u306e\u907a\u7523\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u4e26\u3073\u66ff\u3048\u3067\u304d\u308b ListView - amay077\n\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u4e26\u3073\u66ff\u3048\u3067\u304d\u308b ListView - \u30d1\u30f3\u30c0\u306e\u30e1\u30e2\u5e33\nListView\u306e\u9805\u76ee\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u4e26\u3073\u66ff\u3048\u53ef\u80fd\u306b\u3057\u3066\u307f\u305f - kurukuru-papa\u306e\u30d6\u30ed\u30b0\n\n\n\u5909\u66f4\u70b9\n\u5909\u66f4\u30fb\u8ffd\u52a0\u3057\u305f\u6a5f\u80fd\u306f\u4ee5\u4e0b\u3002\n\n\u30c9\u30e9\u30c3\u30b0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u975e\u8868\u793a(INVISIBLE)\u306b\u3002\n\u30b9\u30e0\u30fc\u30b9\u306a\u30b9\u30af\u30ed\u30fc\u30eb\u3002\n\u5148\u4eba\u306e\u306f\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u3066\u30b9\u30af\u30ed\u30fc\u30eb\u3055\u305b\u3066\u3044\u305f\u305f\u3081\u3001\u6307\u3092\u9759\u6b62\u3055\u305b\u308b\u3068\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u306a\u3069\u3001\u306a\u3093\u3068\u306a\u304f\u304c\u3055\u304c\u3055\u3057\u305f\u52d5\u304d\u3067\u3057\u305f\u3002\nRunnable\u306ainner\u30af\u30e9\u30b9\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u52d5\u4f5c\u3092\u66f8\u304d\u3001\u3053\u308c\u3092\u5b9a\u671f\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u30b9\u30e0\u30fc\u30b9\u306a\u30b9\u30af\u30ed\u30fc\u30eb\u3092\u5b9f\u73fe\u3057\u307e\u3057\u305f\u3002\n\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u3092\u306a\u3081\u3089\u304b\u306b\u5909\u5316\n\u5148\u4eba\u306e\u306flistview\u306e\u4e0a\u4e0b\u9818\u57df\u30922\u6bb5\u968e\u306b\u5206\u3051\u3001\u79fb\u52d5\u901f\u5ea6\u3092slow\u3068fast\u306b\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u65b9\u5f0f\u3060\u3068\u5883\u754c\u7dda\u4ed8\u8fd1\u3067\u6025\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u30e6\u30fc\u30b6\u30fc\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u3067\u306f\u306a\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\nlistview\u306e\u4e0a\u4e0b\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u9818\u57df\u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u306f\u4e00\u7dd2\u3067\u3059\u3002\u9818\u57df\u306e\u4e2d\u592e\u5bc4\u308a\u306f\u9045\u304f\u3001\u8fba\u7e01\u4ed8\u8fd1\u306f\u65e9\u304f\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3088\u3046\u306b\u3001\u30bf\u30c3\u30c1\u4f4d\u7f6e\u306b\u6bd4\u4f8b\u3057\u3066\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u3092\u52d5\u7684\u306b\u5909\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\u30bd\u30fc\u30b9\n\nSortableListView.java\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.PixelFormat;\nimport android.os.Handler;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.AbsListView;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\n\n/**\n * Created by itona on 2016/09/12.\n */\npublic class SortableListView extends ListView implements AdapterView.OnItemLongClickListener, AbsListView.RecyclerListener {\n    // \u914d\u5217\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3089\u308c\u308bListView\n    // \u30a2\u30a4\u30c6\u30e0\u9577\u62bc\u3057\u3067\u30c9\u30e9\u30c3\u30b0\u958b\u59cb\u3002\u63b4\u3093\u3060\u30a2\u30a4\u30c6\u30e0\u306f\u975e\u8868\u793a\u5316\u3055\u308c\u3001\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30e1\u30fc\u30b8\u30b3\u30d4\u30fc\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u30a4\u30e1\u30fc\u30b8\u30b3\u30d4\u30fc\u306f\u79fb\u52d5\u53ef\u80fd\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u63b4\u3093\u3060\u307e\u307e\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u524d\u5f8c\u306e\u30a2\u30a4\u30c6\u30e0\u3068\u9806\u5e8f\u5165\u308c\u66ff\u3048\u308b\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u96e2\u3059\u3068\u305d\u306e\u5834\u306b\u30c9\u30ed\u30c3\u30d7\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u63b4\u3093\u3060\u72b6\u614b\u3067\u3001\u30d3\u30e5\u30fc\u306e\u4e0a\u90e8/\u4e0b\u90e8\u306b\u6301\u3063\u3066\u3044\u304f\u3068\u3001\u30ea\u30b9\u30c8\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\u306f\u53ef\u5909\u3002\n\n    private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;\n    private static final int BACKGROUND_COLOR = Color.argb(128, 0xFF, 0xFF, 0xFF);\n\n    private static final int SCROLL_SPEED_MAX = 750;  //at dp/sec   \u2026\u6700\u5927\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\n    private static final int SCROLL_SPEED_MIN = 0;  //at dp/sec     \u2026\u6700\u5c0f\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\n    private static final int SCROLL_AREA = 120;   //at dp           \u2026\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\n    private static float density;\n\n    private final Scroller scroller = new Scroller();\n    private final Handler scrollHandler = new Handler();\n\n    private WindowManager.LayoutParams layoutParams = null;\n    private ImageView imageView = null;\n    private Bitmap bitmap = null;\n\n    private int topInWindow = 0;\n\n    private MotionEvent actionDownEvent;\n    private boolean isDragging = false;\n    private int draggingPosition = -1;\n\n    private ArrayAdapter adapter = null;\n    private int previousDataCount = 0;\n\n    public interface Immobilizable {\n        boolean isImmobile(int position);\n    }\n\n    public SortableListView(Context context) {\n        super(context);\n        initialize();\n    }\n\n    public SortableListView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        initialize();\n    }\n\n    public SortableListView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initialize();\n    }\n\n    private void initialize() {\n        setOnItemLongClickListener(this);\n        setRecyclerListener(this);\n        density = getResources().getDisplayMetrics().density;\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n\n        // ListView\u306eWindow\u306b\u5bfe\u3059\u308b\u4f4d\u7f6e\u3092\u8a18\u9332\u3059\u308b\u3002\n        int[] posArray = new int[2];\n        getLocationInWindow(posArray);\n        topInWindow = posArray[1];\n    }\n\n    @Override\n    protected void layoutChildren() {\n        // \u79fb\u52d5\u4e2d\u306e\u30d3\u30e5\u30fc\u3092invisible\u306b\u3059\u308b\u3002\n        super.layoutChildren();\n        if(isDragging){\n            getChildAtPosition(draggingPosition).setVisibility(INVISIBLE);\n        }\n    }\n\n    @Override\n    public void onMovedToScrapHeap(View view) {\n        // \u5b50\u30d3\u30e5\u30fc\u304c\u30d5\u30ec\u30fc\u30e0\u30a2\u30a6\u30c8\u3057\u3001ScrapHeap\u306b\u56de\u53ce\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\n        // \u5b50\u30d3\u30e5\u30fc\u306f\u79fb\u52d5\u4e2d\u3067\u3001invisible\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002visible\u306b\u623b\u3057\u3066\u3042\u3052\u308b\u3002\n        view.setVisibility(VISIBLE);\n    }\n\n    @Override\n    protected void handleDataChanged() {\n        // \u30c7\u30fc\u30bf\u304c1\u3064\u8ffd\u52a0\u3055\u308c\u305f\u3068\u304d\u3001\u8868\u793a\u4f4d\u7f6e\u3092\u30ea\u30b9\u30c8\u7d42\u7aef\u306b\u79fb\u52d5\u3059\u308b\u3002\n        super.handleDataChanged();\n        if (adapter == null) {\n            adapter = (ArrayAdapter) getAdapter();\n            previousDataCount = adapter.getCount();\n            return;\n        }\n        if (adapter.getCount() == previousDataCount + 1) {\n            smoothScrollToPosition(adapter.getCount() - 1);\n        }\n        previousDataCount = adapter.getCount();\n    }\n\n    @Override\n    public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // \u30ed\u30f3\u30b0\u30af\u30ea\u30c3\u30af\u6642\u3001\u30c9\u30e9\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3002\n        if (adapter == null) {\n            adapter = (ArrayAdapter) getAdapter();\n            previousDataCount = adapter.getCount();\n        }\n        return startDrag(i, actionDownEvent);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        switch (ev.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                storeMotionEvent(ev);\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (duringDrag(ev)) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                if (stopDrag(ev, true)) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_CANCEL:\n            case MotionEvent.ACTION_OUTSIDE:\n                if (stopDrag(ev, false)) {\n                    return true;\n                }\n                break;\n        }\n        return super.onTouchEvent(ev);\n    }\n\n    private boolean startDrag(int position, MotionEvent ev) {\n        draggingPosition = position;\n\n        View view = getChildAtPosition(position);\n        Canvas canvas = new Canvas();\n        WindowManager wm = getWindowManager();\n\n        // \u79fb\u52d5\u5143\u306eview\u304b\u3089bitmap\u3092\u751f\u6210\n        bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), BITMAP_CONFIG);\n        canvas.setBitmap(bitmap);\n        view.draw(canvas);\n\n        // \u79fb\u52d5\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u793a\u3059imageView\u3092\u751f\u6210\n        imageView = new ImageView(getContext());\n        imageView.setBackgroundColor(BACKGROUND_COLOR);\n        imageView.setImageBitmap(bitmap);\n        initLayoutParams(view, ev);\n        wm.addView(imageView, layoutParams);\n\n        // \u79fb\u52d5\u5143\u306eview\u3092\u975e\u8868\u793a\u306b\u3059\u308b\n        view.setVisibility(INVISIBLE);\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u958b\u59cb\n        scrollHandler.postDelayed(scroller, 50);\n\n        // \u30c9\u30e9\u30c3\u30b0\u958b\u59cb\n        isDragging = true;\n        return true;\n    }\n\n    private boolean duringDrag(MotionEvent ev) {\n        if (!isDragging || imageView == null) {\n            return false;\n        }\n\n        final float y = ev.getY();\n        final int height = getHeight();\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306e\u6c7a\u5b9a\n        // \u30c9\u30e9\u30c3\u30b0\u958b\u59cb\u304b\u3089500 ms\u672a\u6e80\u306e\u6642\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u3002\n        // \u4e21\u7aef\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a8\u30ea\u30a2\u5185\u306e\u3068\u304d\u306f\u3001\u30a8\u30ea\u30a2\u5185\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u30b9\u30d4\u30fc\u30c9\u3092\u6c7a\u3081\u308b\u3002\n        float speed;\n        if (ev.getEventTime() - ev.getDownTime() < 500) {\n            speed = 0;\n        } else if (y < SCROLL_AREA * density) {\n            speed = (y / SCROLL_AREA / density - 1) * (SCROLL_SPEED_MAX - SCROLL_SPEED_MIN) - SCROLL_SPEED_MIN;\n        } else if (y > height - SCROLL_AREA * density) {\n            speed = SCROLL_SPEED_MIN + (1 - (height - y) / SCROLL_AREA / density) * (SCROLL_SPEED_MAX - SCROLL_SPEED_MIN);\n        } else {\n            speed = 0;\n        }\n        scroller.setSpeed(speed * density);\n\n        // ImageView\u306e\u4f4d\u7f6e\u3092\u66f4\u65b0\n        updateLayoutParams(ev);\n        getWindowManager().updateViewLayout(imageView, layoutParams);\n\n        // \u30a2\u30a4\u30c6\u30e0\u306e\u5165\u308c\u66ff\u3048\n        int currentPosition = pointToPosition((int) ev.getX(), (int) ev.getY());\n        if (currentPosition != draggingPosition && currentPosition != INVALID_POSITION) {\n            Object item = adapter.getItem(draggingPosition);\n            adapter.setNotifyOnChange(false);\n            adapter.remove(item);\n            adapter.setNotifyOnChange(true);\n            adapter.insert(item, currentPosition);\n\n            draggingPosition = currentPosition;\n        }\n\n        return true;\n    }\n\n    private boolean stopDrag(MotionEvent ev, boolean isDrop) {\n        if (!isDragging) {\n            return false;\n        }\n        if (isDrop) {\n            duringDrag(ev);\n        }\n        isDragging = false;\n\n        // ImageView\u306e\u6d88\u53bb\n        getWindowManager().removeView(imageView);\n        imageView = null;\n        bitmap = null;\n\n        actionDownEvent.recycle();\n        actionDownEvent = null;\n\n        // \u975e\u8868\u793a\u306b\u3057\u305fitem\u3092\u518d\u8868\u793a\n        View view = getChildAtPosition(draggingPosition);\n        view.setVisibility(VISIBLE);\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u505c\u6b62\n        scrollHandler.removeCallbacksAndMessages(null);\n\n        return true;\n    }\n\n    private WindowManager getWindowManager() {\n        return (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void initLayoutParams(View view, MotionEvent ev) {\n        layoutParams = new WindowManager.LayoutParams();\n        layoutParams.gravity = Gravity.TOP | Gravity.START;\n        layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;\n        layoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;\n        layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\n                | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON\n                | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;\n        layoutParams.format = PixelFormat.TRANSLUCENT;\n        layoutParams.windowAnimations = 0;\n\n        int[] posArray = new int[2];\n        view.getLocationInWindow(posArray);\n        layoutParams.x = posArray[0];\n\n        layoutParams.y = topInWindow + (int) ev.getY() - view.getHeight() / 2;\n    }\n\n    private void updateLayoutParams(MotionEvent ev) {\n        layoutParams.y = topInWindow + (int) ev.getY() - imageView.getHeight() / 2;\n    }\n\n    private View getChildAtPosition(int position) {\n        return getChildAt(position - getFirstVisiblePosition());\n    }\n\n    private void storeMotionEvent(MotionEvent ev) {\n        actionDownEvent = MotionEvent.obtain(ev);\n    }\n\n    private class Scroller implements Runnable {\n        final int MINIMUM_DURATION = 50;\n        final int MAXIMUM_DURATION = 200;\n        int distance = 0;\n        int duration = 50;\n\n        void setSpeed(float speed) {\n            // speed\u306e\u5358\u4f4d\u306fpx/sec\n            // speed / 1000 * dur = 1 <-> dur = 1000/speed\n            if (speed == 0 || (1000 / Math.abs(speed)) > MAXIMUM_DURATION) {\n                distance = 0;\n                duration = MAXIMUM_DURATION;\n            } else {\n                duration = (int) Math.abs(1000 / speed);\n                if (duration < MINIMUM_DURATION) {\n                    duration = MINIMUM_DURATION;\n                    distance = (int) (speed / 1000 * duration);\n                } else {\n                    distance = 1;\n                }\n            }\n        }\n\n        @Override\n        public void run() {\n            SortableListView.this.smoothScrollBy(distance, duration);\n            scrollHandler.postDelayed(this, duration);\n        }\n    }\n}\n\n\n\n\u6ce8\u91c8\n\n\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u30fb\u7bc4\u56f2\u306e\u5909\u66f4\n\n\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\u306e\u5e83\u3055\u306fSCROLL_AREA\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u5358\u4f4d\u306fdp\u306e\u3064\u3082\u308a\u3002\n\u3000\u6700\u4f4e\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306fSCROLL_SPEED_MIN\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u5358\u4f4d\u306fdp/sec\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u9055\u3046\u6c17\u304c\u3057\u307e\u3059\u3002\n\u3000\u6700\u4f4e\u901f\u5ea6\u3068\u306f\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\u306e\u6700\u3082\u4e2d\u592e\u5bc4\u308a\u306e\u4f4d\u7f6e\u3067\u306e\u901f\u5ea6\u3067\u3059\u3002\n\u3000\u6700\u9ad8\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306fSCROLL_SPEED_MAX\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u3084\u3063\u3071\u308a\u5358\u4f4d\u306f\u3088\u304f\u308f\u304b\u3089\u3093\u3002\n\u3000\u6700\u9ad8\u901f\u5ea6\u306f\u3001ListView\u306e\u4e0a\u4e0b\u7aef\u3067\u306e\u901f\u5ea6\u3067\u3059\u3002\n\nImmobilizable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n\u3000\u7279\u5b9a\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u52d5\u304b\u3057\u305f\u304f\u306a\u3044\u3068\u304d\u306b\u4f7f\u304a\u3046\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u307e\u3060\u5b9f\u88c5\u3057\u3066\u307e\u305b\u3093\u3002\n\u3000ListView\u306b\u7d50\u3073\u4ed8\u3051\u308bAdapter\u306bImmobilizalbe\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002isImmobile(position)\u304ctrue\u3092\u8fd4\u3057\u305f\u3068\u304d\u306f\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u52d5\u304b\u3055\u306a\u3044\u3001\u307f\u305f\u3044\u306a\u3002\n\n\u305d\u306e\u4ed6\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u3092\u72ec\u5b66\u3067\u5b66\u3073\u59cb\u3081\u3066\u307e\u30601\u5e74\u306a\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u304a\u304b\u3057\u3044\u3068\u3053\u308d\u3042\u308b\u304b\u3082\u3002\u5909\u306a\u3068\u3053\u308d\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308c\u3070\u5b09\u3057\u3044\u3067\u3059\u3002\n## \u6982\u8981\n\u30bf\u30a4\u30c8\u30eb\u306e\u3088\u3046\u306aListView\u307b\u3057\u3044\u306a\u3042\u3001\u3068\u601d\u3063\u3066\u3044\u308d\u3044\u308d\u8abf\u3079\u3001\n\u5148\u4eba\u305f\u3061\u306e\u907a\u7523\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u8cc7\u6599\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u4e26\u3073\u66ff\u3048\u3067\u304d\u308b ListView - amay077](http://qiita.com/amay077/items/9f63e28db754fddb2aba)\n- [\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u4e26\u3073\u66ff\u3048\u3067\u304d\u308b ListView - \u30d1\u30f3\u30c0\u306e\u30e1\u30e2\u5e33](http://shogogg.hatenablog.jp/entry/20110118/1295326773)\n- [ListView\u306e\u9805\u76ee\u3092\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u4e26\u3073\u66ff\u3048\u53ef\u80fd\u306b\u3057\u3066\u307f\u305f - kurukuru-papa\u306e\u30d6\u30ed\u30b0](http://kurukurupapa.hatenablog.com/entry/20120519/1337428346)\n\n## \u5909\u66f4\u70b9\n\u5909\u66f4\u30fb\u8ffd\u52a0\u3057\u305f\u6a5f\u80fd\u306f\u4ee5\u4e0b\u3002\n\n1. \u30c9\u30e9\u30c3\u30b0\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u975e\u8868\u793a(INVISIBLE)\u306b\u3002\n\n2. \u30b9\u30e0\u30fc\u30b9\u306a\u30b9\u30af\u30ed\u30fc\u30eb\u3002\n    \u5148\u4eba\u306e\u306f\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u3066\u30b9\u30af\u30ed\u30fc\u30eb\u3055\u305b\u3066\u3044\u305f\u305f\u3081\u3001\u6307\u3092\u9759\u6b62\u3055\u305b\u308b\u3068\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u306a\u3069\u3001\u306a\u3093\u3068\u306a\u304f\u304c\u3055\u304c\u3055\u3057\u305f\u52d5\u304d\u3067\u3057\u305f\u3002\n    Runnable\u306ainner\u30af\u30e9\u30b9\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u52d5\u4f5c\u3092\u66f8\u304d\u3001\u3053\u308c\u3092\u5b9a\u671f\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u30b9\u30e0\u30fc\u30b9\u306a\u30b9\u30af\u30ed\u30fc\u30eb\u3092\u5b9f\u73fe\u3057\u307e\u3057\u305f\u3002\n\n3. \u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u3092\u306a\u3081\u3089\u304b\u306b\u5909\u5316\n    \u5148\u4eba\u306e\u306flistview\u306e\u4e0a\u4e0b\u9818\u57df\u30922\u6bb5\u968e\u306b\u5206\u3051\u3001\u79fb\u52d5\u901f\u5ea6\u3092slow\u3068fast\u306b\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u65b9\u5f0f\u3060\u3068\u5883\u754c\u7dda\u4ed8\u8fd1\u3067\u6025\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u30e6\u30fc\u30b6\u30fc\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u3067\u306f\u306a\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n    listview\u306e\u4e0a\u4e0b\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u9818\u57df\u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u306f\u4e00\u7dd2\u3067\u3059\u3002\u9818\u57df\u306e\u4e2d\u592e\u5bc4\u308a\u306f\u9045\u304f\u3001\u8fba\u7e01\u4ed8\u8fd1\u306f\u65e9\u304f\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3088\u3046\u306b\u3001\u30bf\u30c3\u30c1\u4f4d\u7f6e\u306b\u6bd4\u4f8b\u3057\u3066\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u3092\u52d5\u7684\u306b\u5909\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n## \u30bd\u30fc\u30b9\n\n```SortableListView.java\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.PixelFormat;\nimport android.os.Handler;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.AbsListView;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\n\n/**\n * Created by itona on 2016/09/12.\n */\npublic class SortableListView extends ListView implements AdapterView.OnItemLongClickListener, AbsListView.RecyclerListener {\n    // \u914d\u5217\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3089\u308c\u308bListView\n    // \u30a2\u30a4\u30c6\u30e0\u9577\u62bc\u3057\u3067\u30c9\u30e9\u30c3\u30b0\u958b\u59cb\u3002\u63b4\u3093\u3060\u30a2\u30a4\u30c6\u30e0\u306f\u975e\u8868\u793a\u5316\u3055\u308c\u3001\u30a2\u30a4\u30c6\u30e0\u306e\u30a4\u30e1\u30fc\u30b8\u30b3\u30d4\u30fc\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u30a4\u30e1\u30fc\u30b8\u30b3\u30d4\u30fc\u306f\u79fb\u52d5\u53ef\u80fd\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u63b4\u3093\u3060\u307e\u307e\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u524d\u5f8c\u306e\u30a2\u30a4\u30c6\u30e0\u3068\u9806\u5e8f\u5165\u308c\u66ff\u3048\u308b\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u96e2\u3059\u3068\u305d\u306e\u5834\u306b\u30c9\u30ed\u30c3\u30d7\u3002\n    // \u30a2\u30a4\u30c6\u30e0\u63b4\u3093\u3060\u72b6\u614b\u3067\u3001\u30d3\u30e5\u30fc\u306e\u4e0a\u90e8/\u4e0b\u90e8\u306b\u6301\u3063\u3066\u3044\u304f\u3068\u3001\u30ea\u30b9\u30c8\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\u306f\u53ef\u5909\u3002\n\n    private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;\n    private static final int BACKGROUND_COLOR = Color.argb(128, 0xFF, 0xFF, 0xFF);\n\n    private static final int SCROLL_SPEED_MAX = 750;  //at dp/sec   \u2026\u6700\u5927\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\n    private static final int SCROLL_SPEED_MIN = 0;  //at dp/sec     \u2026\u6700\u5c0f\u30b9\u30af\u30ed\u30fc\u30eb\u30b9\u30d4\u30fc\u30c9\n    private static final int SCROLL_AREA = 120;   //at dp           \u2026\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\n    private static float density;\n\n    private final Scroller scroller = new Scroller();\n    private final Handler scrollHandler = new Handler();\n\n    private WindowManager.LayoutParams layoutParams = null;\n    private ImageView imageView = null;\n    private Bitmap bitmap = null;\n\n    private int topInWindow = 0;\n\n    private MotionEvent actionDownEvent;\n    private boolean isDragging = false;\n    private int draggingPosition = -1;\n\n    private ArrayAdapter adapter = null;\n    private int previousDataCount = 0;\n\n    public interface Immobilizable {\n        boolean isImmobile(int position);\n    }\n\n    public SortableListView(Context context) {\n        super(context);\n        initialize();\n    }\n\n    public SortableListView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        initialize();\n    }\n\n    public SortableListView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initialize();\n    }\n\n    private void initialize() {\n        setOnItemLongClickListener(this);\n        setRecyclerListener(this);\n        density = getResources().getDisplayMetrics().density;\n    }\n\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n\n        // ListView\u306eWindow\u306b\u5bfe\u3059\u308b\u4f4d\u7f6e\u3092\u8a18\u9332\u3059\u308b\u3002\n        int[] posArray = new int[2];\n        getLocationInWindow(posArray);\n        topInWindow = posArray[1];\n    }\n\n    @Override\n    protected void layoutChildren() {\n        // \u79fb\u52d5\u4e2d\u306e\u30d3\u30e5\u30fc\u3092invisible\u306b\u3059\u308b\u3002\n        super.layoutChildren();\n        if(isDragging){\n            getChildAtPosition(draggingPosition).setVisibility(INVISIBLE);\n        }\n    }\n\n    @Override\n    public void onMovedToScrapHeap(View view) {\n        // \u5b50\u30d3\u30e5\u30fc\u304c\u30d5\u30ec\u30fc\u30e0\u30a2\u30a6\u30c8\u3057\u3001ScrapHeap\u306b\u56de\u53ce\u3055\u308c\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\n        // \u5b50\u30d3\u30e5\u30fc\u306f\u79fb\u52d5\u4e2d\u3067\u3001invisible\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002visible\u306b\u623b\u3057\u3066\u3042\u3052\u308b\u3002\n        view.setVisibility(VISIBLE);\n    }\n\n    @Override\n    protected void handleDataChanged() {\n        // \u30c7\u30fc\u30bf\u304c1\u3064\u8ffd\u52a0\u3055\u308c\u305f\u3068\u304d\u3001\u8868\u793a\u4f4d\u7f6e\u3092\u30ea\u30b9\u30c8\u7d42\u7aef\u306b\u79fb\u52d5\u3059\u308b\u3002\n        super.handleDataChanged();\n        if (adapter == null) {\n            adapter = (ArrayAdapter) getAdapter();\n            previousDataCount = adapter.getCount();\n            return;\n        }\n        if (adapter.getCount() == previousDataCount + 1) {\n            smoothScrollToPosition(adapter.getCount() - 1);\n        }\n        previousDataCount = adapter.getCount();\n    }\n\n    @Override\n    public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // \u30ed\u30f3\u30b0\u30af\u30ea\u30c3\u30af\u6642\u3001\u30c9\u30e9\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3002\n        if (adapter == null) {\n            adapter = (ArrayAdapter) getAdapter();\n            previousDataCount = adapter.getCount();\n        }\n        return startDrag(i, actionDownEvent);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        switch (ev.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                storeMotionEvent(ev);\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (duringDrag(ev)) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                if (stopDrag(ev, true)) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_CANCEL:\n            case MotionEvent.ACTION_OUTSIDE:\n                if (stopDrag(ev, false)) {\n                    return true;\n                }\n                break;\n        }\n        return super.onTouchEvent(ev);\n    }\n\n    private boolean startDrag(int position, MotionEvent ev) {\n        draggingPosition = position;\n\n        View view = getChildAtPosition(position);\n        Canvas canvas = new Canvas();\n        WindowManager wm = getWindowManager();\n\n        // \u79fb\u52d5\u5143\u306eview\u304b\u3089bitmap\u3092\u751f\u6210\n        bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), BITMAP_CONFIG);\n        canvas.setBitmap(bitmap);\n        view.draw(canvas);\n\n        // \u79fb\u52d5\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u793a\u3059imageView\u3092\u751f\u6210\n        imageView = new ImageView(getContext());\n        imageView.setBackgroundColor(BACKGROUND_COLOR);\n        imageView.setImageBitmap(bitmap);\n        initLayoutParams(view, ev);\n        wm.addView(imageView, layoutParams);\n\n        // \u79fb\u52d5\u5143\u306eview\u3092\u975e\u8868\u793a\u306b\u3059\u308b\n        view.setVisibility(INVISIBLE);\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u958b\u59cb\n        scrollHandler.postDelayed(scroller, 50);\n\n        // \u30c9\u30e9\u30c3\u30b0\u958b\u59cb\n        isDragging = true;\n        return true;\n    }\n\n    private boolean duringDrag(MotionEvent ev) {\n        if (!isDragging || imageView == null) {\n            return false;\n        }\n\n        final float y = ev.getY();\n        final int height = getHeight();\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306e\u6c7a\u5b9a\n        // \u30c9\u30e9\u30c3\u30b0\u958b\u59cb\u304b\u3089500 ms\u672a\u6e80\u306e\u6642\u306f\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u3002\n        // \u4e21\u7aef\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u30a8\u30ea\u30a2\u5185\u306e\u3068\u304d\u306f\u3001\u30a8\u30ea\u30a2\u5185\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u30b9\u30d4\u30fc\u30c9\u3092\u6c7a\u3081\u308b\u3002\n        float speed;\n        if (ev.getEventTime() - ev.getDownTime() < 500) {\n            speed = 0;\n        } else if (y < SCROLL_AREA * density) {\n            speed = (y / SCROLL_AREA / density - 1) * (SCROLL_SPEED_MAX - SCROLL_SPEED_MIN) - SCROLL_SPEED_MIN;\n        } else if (y > height - SCROLL_AREA * density) {\n            speed = SCROLL_SPEED_MIN + (1 - (height - y) / SCROLL_AREA / density) * (SCROLL_SPEED_MAX - SCROLL_SPEED_MIN);\n        } else {\n            speed = 0;\n        }\n        scroller.setSpeed(speed * density);\n\n        // ImageView\u306e\u4f4d\u7f6e\u3092\u66f4\u65b0\n        updateLayoutParams(ev);\n        getWindowManager().updateViewLayout(imageView, layoutParams);\n\n        // \u30a2\u30a4\u30c6\u30e0\u306e\u5165\u308c\u66ff\u3048\n        int currentPosition = pointToPosition((int) ev.getX(), (int) ev.getY());\n        if (currentPosition != draggingPosition && currentPosition != INVALID_POSITION) {\n            Object item = adapter.getItem(draggingPosition);\n            adapter.setNotifyOnChange(false);\n            adapter.remove(item);\n            adapter.setNotifyOnChange(true);\n            adapter.insert(item, currentPosition);\n\n            draggingPosition = currentPosition;\n        }\n\n        return true;\n    }\n\n    private boolean stopDrag(MotionEvent ev, boolean isDrop) {\n        if (!isDragging) {\n            return false;\n        }\n        if (isDrop) {\n            duringDrag(ev);\n        }\n        isDragging = false;\n\n        // ImageView\u306e\u6d88\u53bb\n        getWindowManager().removeView(imageView);\n        imageView = null;\n        bitmap = null;\n\n        actionDownEvent.recycle();\n        actionDownEvent = null;\n\n        // \u975e\u8868\u793a\u306b\u3057\u305fitem\u3092\u518d\u8868\u793a\n        View view = getChildAtPosition(draggingPosition);\n        view.setVisibility(VISIBLE);\n\n        // \u30b9\u30af\u30ed\u30fc\u30eb\u505c\u6b62\n        scrollHandler.removeCallbacksAndMessages(null);\n\n        return true;\n    }\n\n    private WindowManager getWindowManager() {\n        return (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void initLayoutParams(View view, MotionEvent ev) {\n        layoutParams = new WindowManager.LayoutParams();\n        layoutParams.gravity = Gravity.TOP | Gravity.START;\n        layoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;\n        layoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;\n        layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\n                | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON\n                | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;\n        layoutParams.format = PixelFormat.TRANSLUCENT;\n        layoutParams.windowAnimations = 0;\n\n        int[] posArray = new int[2];\n        view.getLocationInWindow(posArray);\n        layoutParams.x = posArray[0];\n\n        layoutParams.y = topInWindow + (int) ev.getY() - view.getHeight() / 2;\n    }\n\n    private void updateLayoutParams(MotionEvent ev) {\n        layoutParams.y = topInWindow + (int) ev.getY() - imageView.getHeight() / 2;\n    }\n\n    private View getChildAtPosition(int position) {\n        return getChildAt(position - getFirstVisiblePosition());\n    }\n\n    private void storeMotionEvent(MotionEvent ev) {\n        actionDownEvent = MotionEvent.obtain(ev);\n    }\n\n    private class Scroller implements Runnable {\n        final int MINIMUM_DURATION = 50;\n        final int MAXIMUM_DURATION = 200;\n        int distance = 0;\n        int duration = 50;\n\n        void setSpeed(float speed) {\n            // speed\u306e\u5358\u4f4d\u306fpx/sec\n            // speed / 1000 * dur = 1 <-> dur = 1000/speed\n            if (speed == 0 || (1000 / Math.abs(speed)) > MAXIMUM_DURATION) {\n                distance = 0;\n                duration = MAXIMUM_DURATION;\n            } else {\n                duration = (int) Math.abs(1000 / speed);\n                if (duration < MINIMUM_DURATION) {\n                    duration = MINIMUM_DURATION;\n                    distance = (int) (speed / 1000 * duration);\n                } else {\n                    distance = 1;\n                }\n            }\n        }\n\n        @Override\n        public void run() {\n            SortableListView.this.smoothScrollBy(distance, duration);\n            scrollHandler.postDelayed(this, duration);\n        }\n    }\n}\n```\n\n## \u6ce8\u91c8\n1. \u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u30fb\u7bc4\u56f2\u306e\u5909\u66f4\n\n\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\u306e\u5e83\u3055\u306fSCROLL_AREA\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u5358\u4f4d\u306fdp\u306e\u3064\u3082\u308a\u3002\n\u3000\u6700\u4f4e\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306fSCROLL_SPEED_MIN\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u5358\u4f4d\u306fdp/sec\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001**\u9055\u3046\u6c17\u304c\u3057\u307e\u3059\u3002**\n\u3000\u6700\u4f4e\u901f\u5ea6\u3068\u306f\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u7bc4\u56f2\u306e\u6700\u3082\u4e2d\u592e\u5bc4\u308a\u306e\u4f4d\u7f6e\u3067\u306e\u901f\u5ea6\u3067\u3059\u3002\n\u3000\u6700\u9ad8\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u901f\u5ea6\u306fSCROLL_SPEED_MAX\u3067\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\u3084\u3063\u3071\u308a\u5358\u4f4d\u306f\u3088\u304f\u308f\u304b\u3089\u3093\u3002\n\u3000\u6700\u9ad8\u901f\u5ea6\u306f\u3001ListView\u306e\u4e0a\u4e0b\u7aef\u3067\u306e\u901f\u5ea6\u3067\u3059\u3002\n\n2. Immobilizable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n\u3000\u7279\u5b9a\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u52d5\u304b\u3057\u305f\u304f\u306a\u3044\u3068\u304d\u306b\u4f7f\u304a\u3046\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001**\u307e\u3060\u5b9f\u88c5\u3057\u3066\u307e\u305b\u3093\u3002**\n\n\u3000ListView\u306b\u7d50\u3073\u4ed8\u3051\u308bAdapter\u306bImmobilizalbe\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002isImmobile(position)\u304ctrue\u3092\u8fd4\u3057\u305f\u3068\u304d\u306f\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u52d5\u304b\u3055\u306a\u3044\u3001\u307f\u305f\u3044\u306a\u3002\n\n## \u305d\u306e\u4ed6\nAndroid\u30a2\u30d7\u30ea\u958b\u767a\u3092\u72ec\u5b66\u3067\u5b66\u3073\u59cb\u3081\u3066\u307e\u30601\u5e74\u306a\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u304a\u304b\u3057\u3044\u3068\u3053\u308d\u3042\u308b\u304b\u3082\u3002\u5909\u306a\u3068\u3053\u308d\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308c\u3070\u5b09\u3057\u3044\u3067\u3059\u3002\n\n", "tags": ["Android", "ListView"]}