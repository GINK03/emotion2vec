{"context": "\n\nUnity\u3067MIDI\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u5236\u5fa1\u3059\u308b\nUnity\u3067midi\u30c7\u30fc\u30bf\u3092\u518d\u751f\u3057BPM\u3082\u5f04\u308a\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u308f\u308a\u3068\u7c21\u5358\u306b\u51fa\u6765\u305f\u306e\u3067\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u524d\u63d0\nUnity\u3067MIDI\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\nn-yoda \u3055\u3093\u306e\u30d6\u30ed\u30b0\nhttp://ny.hateblo.jp/entry/2016/01/21/230640\n\n\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nC# Synth Project\nhttps://csharpsynthproject.codeplex.com/\n\nBPM\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u7b87\u6240\nMIDI\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\nCSharpSynth/\n\u2514 Source/\n    \u2514 AudioSynthesis/\n        \u251c Bank/\n        \u251c Midi/\n           \uffe4\n        \u251c Sequencer\n            \u251c MidiFileSequencer.cs  <- \u3053\u306e\u30d5\u30a1\u30a4\u30eb\n            \u2514 MidiInputSequencer.cs\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uffe4\n\nMidiFileSequencer.cs \u306e LoadMidiFile() \u5185\u3067Midi\u30d5\u30a1\u30a4\u30eb\u304b\u3089BPM\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3002\nprivate void LoadMidiFile (MidiFile midiFile)\n{\n    //\u6700\u521d\u306bBPM\u3092120\u306b\u8a2d\u5b9a\n    BPM = 120.0;\n    //---\n\n    if (midiFile.Tracks.Length > 1 || midiFile.Tracks [0].EndTime == 0)\n        midiFile.CombineTracks ();\n    mdata = new MidiMessage[midiFile.Tracks [0].MidiEvents.Length];\n    eventIndex = 0;\n    sampleTime = 0;\n    double absDelta = 0.0;\n    for (int x = 0; x < mdata.Length; x++) {\n        MidiEvent mEvent = midiFile.Tracks [0].MidiEvents [x];\n        mdata [x] = new MidiMessage ((byte)mEvent.Channel, (byte)mEvent.Command, (byte)mEvent.Data1, (byte)mEvent.Data2);\n        absDelta += synth.SampleRate * mEvent.DeltaTime * (60.0 / (BPM * midiFile.Division));\n        mdata [x].delta = (int)absDelta;\n\n        //MIDI\u5185\u306bBPM\u306e\u8a18\u8ff0\u304c\u3042\u308b\u5834\u5408\u8aad\u307f\u8fbc\u3080\n         if (mEvent.Command == 0xFF && mEvent.Data1 == 0x51)\n            BPM = Math.Round(MidiHelper.MicroSecondsPerMinute / (double)((MetaNumberEvent)mEvent).Value, 2);\n        //---      \n    }  \n    totalTime = mdata [mdata.Length - 1].delta;\n}\n\n\n\n\nMIDI\u3092\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u6307\u5b9a\u3057\u3066\u30ed\u30fc\u30c9\u51fa\u6765\u308b\u3088\u3046\u306b\nLoadMidiFile()\u306fLoadMidi()\u5185\u3067\u547c\u3070\u308c\u308b\u306e\u3067\u65b0\u3057\u304f\u5f15\u6570\u306bBPM\u3092\u6301\u3064LoadMidi()\u3092\u7528\u610f\u3057\u3066\u307f\u308b\u3002\npublic bool LoadMidi (MidiFile midiFile)\n{\n  if (playing == true)\n    return false;\n  LoadMidiFile (midiFile);\n  return true;\n}\n\n//\u65b0\u3057\u304f\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\npublic bool LoadMidi (MidiFile midiFile, int bpm)\n{\n  if (playing == true)\n    return false;\n  LoadMidiFile (midiFile);\n  BPM = (double)bpm;\n  return true;\n}\n\n\n\u3068\u3066\u3082\u5358\u7d14\u3067\u3059\u304c....\u3053\u308c\u3060\u3051\u3067BPM\u304c\u5f04\u308c\u307e\u3059\u3002\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067BPM\u306e\u8a08\u7b97\u306b\u3064\u3044\u3066Unity\u5185\u3067\u3069\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u305f\u304b\u3082\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nBPM\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\nUnity\u3067\u306f\u69d8\u3005\u306aTime\u60c5\u5831\u3092\u6271\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u3042\u308a\u307e\u3059\u304c\u4eca\u56de\u306fDeltaTime\u3092\u4f7f\u7528\u3057\u3066\u30bf\u30c3\u30d7\u30c6\u30f3\u30dd\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f59\u8ac7\u3067\u3059\u304cAudio\u5468\u308a\u3067\u97f3\u3092\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3081\u306bTime\u3092\u5207\u308a\u305f\u3044\u6642\u306fdsptime\u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u3067\u3059\u3002\uff08\u81ea\u5206\u304c\u6c17\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u639b\u304b\u3063\u305f\u3060\u3051\u3067\u3059orz\uff09\n\u5b9f\u969b\u306b\u30c6\u30f3\u30dd\u3092\u8a08\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nfloat timeCount = 0;\nfloat timeDuration = 0;\nbool isActiveTapTempo = false;\nfloat[] bpmarray;\nfloat totalbpm = 0;\nint bpmcount = 0;\nint bpm_accuracy = 15;\nbool firsttap = true;\npublic int bpm = 120;\npublic void FixedUpdate ()\n{\n  //\u30bf\u30c3\u30d7\u3057\u3066\u304b\u3089\u3042\u308b\u7a0b\u5ea6\u6642\u9593\u304c\u7d4c\u3064\u3068bpm\u306e\u8a08\u6e2c\u3092\u7d42\u4e86\n  if (timeCount - timeDuration > 1.8) {\n    clearTempo ();\n  }\n  if (isActiveTapTempo) {\n    timeCount += 1.0f * Time.deltaTime;\n  }\n}\npublic void tapTempo ()\n{\n  //\u6700\u521d\u306b\u547c\u3070\u308c\u308b\u6642\uff08\u6700\u521d\u306b\u30bf\u30c3\u30d7\u3055\u308c\u308b\u6642\uff09\n  if (firsttap) {\n    isActiveTapTempo = true;\n    //\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u6642\u306e\u6642\u9593\u3092\u8a18\u9332\n    timeDuration = timeCount;\n    //bpm\u306e\u5e73\u5747\u5024\u306e\u5e45\u3092\u8a2d\u5b9a\n    //bpm_accuracy\u3092\u5927\u304d\u304f\u3059\u308b\u307b\u3069\u9014\u4e2d\u3067\u30c6\u30f3\u30dd\u3092\u5909\u3048\u306b\u304f\u304f\u306a\u308b\n    bpmarray = new float[bpm_accuracy];\n    firsttap = false;\n  }\n  //\uff12\u56de\u76ee\u4ee5\u964d\u306b\u547c\u3070\u308c\u308b\u6642\n  else {\n    //\u524d\u306e\u30bf\u30c3\u30d7\u6642\u523b - \u4eca\u306e\u30bf\u30c3\u30d7\u6642\u523b = \u30bf\u30c3\u30d7\u9593\u306e\u6642\u9593\n    timeDuration = timeCount - timeDuration;\n    //\u79d2\u304b\u3089BPM\u306b\u76f4\u3057\u3066\u4ee3\u5165\n    bpmarray [bpmcount] = 1 / timeDuration * 60;\n    //\u4eca\u307e\u3067\u306ebpm\u3092\u8db3\u3059\n    for (int i = 0; i < bpmarray.Length; i++) {\n      totalbpm += bpmarray [i];\n    }\n    //bpm\u306e\u5e73\u5747\u5024\u3092\u51fa\u529b\n    if (bpmarray [bpmarray.Length - 1] != 0) {\n      bpm = Mathf.RoundToInt (totalbpm / bpmarray.Length);\n    } else {\n      bpm = Mathf.RoundToInt (totalbpm / (bpmcount + 1));\n    }\n    //\u30bf\u30c3\u30d7\u6642\u523b\u306e\u66f4\u65b0\n    timeDuration = timeCount;\n    //bpmarray\u30ab\u30a6\u30f3\u30bf\u306e\u66f4\u65b0\n    if (bpmcount < bpmarray.Length)\n      bpmcount++;\n    if (bpmcount == bpmarray.Length)\n      bpmcount = 0;\n    //\u8db3\u3055\u308c\u305fbpm\u306e\u30ea\u30bb\u30c3\u30c8\n    totalbpm = 0;\n  }\n}\npublic void clearTempo ()\n{\n  bpmarray = new float[bpm_accuracy];\n  isActiveTapTempo = false;\n  firsttap = true;\n  bpmcount = 0;\n  totalbpm = 0;\n  timeDuration = 0;\n  timeCount = 0;\n}\n//return\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3060\u3044\u3076\u624b\u629c\u304d\npublic int getTempo(){\n  return bpm;\n}\n\n\n\n\u304a\u308f\u308a\u306b\n\u99c4\u6587\u3067\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u304c\u3001Unity+MIDI\u3067BPM\u3092\u5f04\u308a\u305f\u3044\u4eba\u304c\u898b\u3066\u304f\u308c\u305f\u3089\u5e78\u3044\u3067\u3059\u3002\u307b\u307c\u307b\u307c\u81ea\u5206\u306e\u30e1\u30e2\u306b\u306a\u3063\u3066\u307e\u3059\u304c....\u3002\n# Unity\u3067MIDI\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u5236\u5fa1\u3059\u308b\nUnity\u3067midi\u30c7\u30fc\u30bf\u3092\u518d\u751f\u3057BPM\u3082\u5f04\u308a\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u308f\u308a\u3068\u7c21\u5358\u306b\u51fa\u6765\u305f\u306e\u3067\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n## \u524d\u63d0\nUnity\u3067MIDI\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\nn-yoda \u3055\u3093\u306e\u30d6\u30ed\u30b0\nhttp://ny.hateblo.jp/entry/2016/01/21/230640\n\n## \u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nC# Synth Project\nhttps://csharpsynthproject.codeplex.com/\n\n## BPM\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u7b87\u6240\nMIDI\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nCSharpSynth/\n\u2514 Source/\n    \u2514 AudioSynthesis/\n        \u251c Bank/\n        \u251c Midi/\n           \uffe4\n        \u251c Sequencer\n            \u251c MidiFileSequencer.cs  <- \u3053\u306e\u30d5\u30a1\u30a4\u30eb\n            \u2514 MidiInputSequencer.cs\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uffe4\n```\n\nMidiFileSequencer.cs \u306e LoadMidiFile() \u5185\u3067Midi\u30d5\u30a1\u30a4\u30eb\u304b\u3089BPM\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3002\n\n```csharp\nprivate void LoadMidiFile (MidiFile midiFile)\n{\n    //\u6700\u521d\u306bBPM\u3092120\u306b\u8a2d\u5b9a\n    BPM = 120.0;\n    //---\n    \n    if (midiFile.Tracks.Length > 1 || midiFile.Tracks [0].EndTime == 0)\n        midiFile.CombineTracks ();\n    mdata = new MidiMessage[midiFile.Tracks [0].MidiEvents.Length];\n    eventIndex = 0;\n    sampleTime = 0;\n    double absDelta = 0.0;\n    for (int x = 0; x < mdata.Length; x++) {\n        MidiEvent mEvent = midiFile.Tracks [0].MidiEvents [x];\n        mdata [x] = new MidiMessage ((byte)mEvent.Channel, (byte)mEvent.Command, (byte)mEvent.Data1, (byte)mEvent.Data2);\n        absDelta += synth.SampleRate * mEvent.DeltaTime * (60.0 / (BPM * midiFile.Division));\n        mdata [x].delta = (int)absDelta;\n        \n        //MIDI\u5185\u306bBPM\u306e\u8a18\u8ff0\u304c\u3042\u308b\u5834\u5408\u8aad\u307f\u8fbc\u3080\n         if (mEvent.Command == 0xFF && mEvent.Data1 == 0x51)\n            BPM = Math.Round(MidiHelper.MicroSecondsPerMinute / (double)((MetaNumberEvent)mEvent).Value, 2);\n        //---      \n    }  \n    totalTime = mdata [mdata.Length - 1].delta;\n}\n\n\n```\n\n## MIDI\u3092\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u6642\u306bBPM\u3092\u6307\u5b9a\u3057\u3066\u30ed\u30fc\u30c9\u51fa\u6765\u308b\u3088\u3046\u306b\nLoadMidiFile()\u306fLoadMidi()\u5185\u3067\u547c\u3070\u308c\u308b\u306e\u3067\u65b0\u3057\u304f\u5f15\u6570\u306bBPM\u3092\u6301\u3064LoadMidi()\u3092\u7528\u610f\u3057\u3066\u307f\u308b\u3002\n\n```csharp\npublic bool LoadMidi (MidiFile midiFile)\n{\n  if (playing == true)\n    return false;\n  LoadMidiFile (midiFile);\n  return true;\n}\n\n//\u65b0\u3057\u304f\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\npublic bool LoadMidi (MidiFile midiFile, int bpm)\n{\n  if (playing == true)\n    return false;\n  LoadMidiFile (midiFile);\n  BPM = (double)bpm;\n  return true;\n}\n\n```\n\n\u3068\u3066\u3082\u5358\u7d14\u3067\u3059\u304c....\u3053\u308c\u3060\u3051\u3067BPM\u304c\u5f04\u308c\u307e\u3059\u3002\n\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067BPM\u306e\u8a08\u7b97\u306b\u3064\u3044\u3066Unity\u5185\u3067\u3069\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u305f\u304b\u3082\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n## BPM\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\nUnity\u3067\u306f\u69d8\u3005\u306aTime\u60c5\u5831\u3092\u6271\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u3042\u308a\u307e\u3059\u304c\u4eca\u56de\u306fDeltaTime\u3092\u4f7f\u7528\u3057\u3066\u30bf\u30c3\u30d7\u30c6\u30f3\u30dd\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304cAudio\u5468\u308a\u3067\u97f3\u3092\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3081\u306bTime\u3092\u5207\u308a\u305f\u3044\u6642\u306fdsptime\u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u3067\u3059\u3002\uff08\u81ea\u5206\u304c\u6c17\u4ed8\u304f\u307e\u3067\u306b\u6642\u9593\u304c\u639b\u304b\u3063\u305f\u3060\u3051\u3067\u3059orz\uff09\n\n\u5b9f\u969b\u306b\u30c6\u30f3\u30dd\u3092\u8a08\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\nfloat timeCount = 0;\nfloat timeDuration = 0;\nbool isActiveTapTempo = false;\nfloat[] bpmarray;\nfloat totalbpm = 0;\nint bpmcount = 0;\nint bpm_accuracy = 15;\nbool firsttap = true;\npublic int bpm = 120;\npublic void FixedUpdate ()\n{\n  //\u30bf\u30c3\u30d7\u3057\u3066\u304b\u3089\u3042\u308b\u7a0b\u5ea6\u6642\u9593\u304c\u7d4c\u3064\u3068bpm\u306e\u8a08\u6e2c\u3092\u7d42\u4e86\n  if (timeCount - timeDuration > 1.8) {\n    clearTempo ();\n  }\n  if (isActiveTapTempo) {\n    timeCount += 1.0f * Time.deltaTime;\n  }\n}\npublic void tapTempo ()\n{\n  //\u6700\u521d\u306b\u547c\u3070\u308c\u308b\u6642\uff08\u6700\u521d\u306b\u30bf\u30c3\u30d7\u3055\u308c\u308b\u6642\uff09\n  if (firsttap) {\n    isActiveTapTempo = true;\n    //\u95a2\u6570\u304c\u547c\u3070\u308c\u305f\u6642\u306e\u6642\u9593\u3092\u8a18\u9332\n    timeDuration = timeCount;\n    //bpm\u306e\u5e73\u5747\u5024\u306e\u5e45\u3092\u8a2d\u5b9a\n    //bpm_accuracy\u3092\u5927\u304d\u304f\u3059\u308b\u307b\u3069\u9014\u4e2d\u3067\u30c6\u30f3\u30dd\u3092\u5909\u3048\u306b\u304f\u304f\u306a\u308b\n    bpmarray = new float[bpm_accuracy];\n    firsttap = false;\n  }\n  //\uff12\u56de\u76ee\u4ee5\u964d\u306b\u547c\u3070\u308c\u308b\u6642\n  else {\n    //\u524d\u306e\u30bf\u30c3\u30d7\u6642\u523b - \u4eca\u306e\u30bf\u30c3\u30d7\u6642\u523b = \u30bf\u30c3\u30d7\u9593\u306e\u6642\u9593\n    timeDuration = timeCount - timeDuration;\n    //\u79d2\u304b\u3089BPM\u306b\u76f4\u3057\u3066\u4ee3\u5165\n    bpmarray [bpmcount] = 1 / timeDuration * 60;\n    //\u4eca\u307e\u3067\u306ebpm\u3092\u8db3\u3059\n    for (int i = 0; i < bpmarray.Length; i++) {\n      totalbpm += bpmarray [i];\n    }\n    //bpm\u306e\u5e73\u5747\u5024\u3092\u51fa\u529b\n    if (bpmarray [bpmarray.Length - 1] != 0) {\n      bpm = Mathf.RoundToInt (totalbpm / bpmarray.Length);\n    } else {\n      bpm = Mathf.RoundToInt (totalbpm / (bpmcount + 1));\n    }\n    //\u30bf\u30c3\u30d7\u6642\u523b\u306e\u66f4\u65b0\n    timeDuration = timeCount;\n    //bpmarray\u30ab\u30a6\u30f3\u30bf\u306e\u66f4\u65b0\n    if (bpmcount < bpmarray.Length)\n      bpmcount++;\n    if (bpmcount == bpmarray.Length)\n      bpmcount = 0;\n    //\u8db3\u3055\u308c\u305fbpm\u306e\u30ea\u30bb\u30c3\u30c8\n    totalbpm = 0;\n  }\n}\npublic void clearTempo ()\n{\n  bpmarray = new float[bpm_accuracy];\n  isActiveTapTempo = false;\n  firsttap = true;\n  bpmcount = 0;\n  totalbpm = 0;\n  timeDuration = 0;\n  timeCount = 0;\n}\n//return\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3060\u3044\u3076\u624b\u629c\u304d\npublic int getTempo(){\n  return bpm;\n}\n\n```\n\n# \u304a\u308f\u308a\u306b\n\u99c4\u6587\u3067\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u304c\u3001Unity+MIDI\u3067BPM\u3092\u5f04\u308a\u305f\u3044\u4eba\u304c\u898b\u3066\u304f\u308c\u305f\u3089\u5e78\u3044\u3067\u3059\u3002\u307b\u307c\u307b\u307c\u81ea\u5206\u306e\u30e1\u30e2\u306b\u306a\u3063\u3066\u307e\u3059\u304c....\u3002\n", "tags": ["Unity", "MIDI"]}