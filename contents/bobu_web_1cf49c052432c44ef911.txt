{"context": " More than 1 year has passed since last update.# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  # All Vagrant configuration is done here. The most common configuration\n  # options are documented and commented below. For a complete reference,\n  # please see the online documentation at vagrantup.com.\n\n# \u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u306b\u4f7f\u3046Box\u306e\u6307\u5b9a\n  # Every Vagrant virtual environment requires a box to build off of.\n  config.vm.box = \"base\"\n\n# Box\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u3046Box\u306eURL\u3092\u6307\u5b9a\n  # The url from where the 'config.vm.box' box will be fetched if it\n  # doesn't already exist on the user's system.\n  config.vm.box_url = \"http://domain.com/path/to/above.box\"\n\n# \u30d5\u30a9\u30fc\u30ef\u30fc\u30c9\u30dd\u30fc\u30c8\u8a2d\u5b9a\u3002\u30b2\u30b9\u30c8\u3067\u306e80\u756a\uff08HTTP\uff09\u3092\u30db\u30b9\u30c8\u5074\u306e8080\u756a\u306b\u3059\u308b\u3002\n# \u30db\u30b9\u30c8\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089http://localhost:8080\u3068\u304b\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n\n# \u30db\u30b9\u30c8\u3057\u304b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u306a\u3044\u30b2\u30b9\u30c8\u30de\u30b7\u30f3\u306e\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n\n# \u30b2\u30b9\u30c8\u30de\u30b7\u30f3\u306e\u30d1\u30d6\u30ea\u30c3\u30af\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a2d\u5b9a\u3002\n# \u540c\u3058LAN\u5185\u306ePC\u3068\u304b\u3082\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u305f\u308a\u3059\u308b\u304b\u306f\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u6b21\u7b2c\u306e\u3088\u3046\u3067\u3059\u3002\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  config.vm.network \"public_network\"\n\n# SSH forward agent\u306e\u6709\u52b9\u3001\u7121\u52b9\u8a2d\u5b9a \n# host =>ssh\u30ed\u30b0\u30a4\u30f3 guest1 =>ssh\u30ed\u30b0\u30a4\u30f3 guest2 \u304chost\u304c\u6301\u3063\u3066\u3044\u308b\u79d8\u5bc6\u30ad\u30fc\u306e\u307f\u3067\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\n  # If true, then any SSH connections made will enable agent forwarding.\n  # Default value: false\n  config.ssh.forward_agent = true\n\n# host\u3068guest\u306e\u5171\u6709\u30d5\u30a9\u30eb\u30c0\u306e\u8a2d\u5b9a\u3000\u7b2c\u4e00\u5f15\u6570:host\u3000\u7b2c\u4e8c\u5f15\u6570:guest\n# host\u5074\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306f\u5148\u306b\u4f5c\u6210\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\n# guest\u5074\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n# \u4ee5\u4e0b\u3001\u52c9\u5f37\u4e2d\u3002\u3002\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Don't boot with headless mode\n  #   vb.gui = true\n  #\n  #   # Use VBoxManage to customize the VM. For example to change memory:\n  #   vb.customize [\"modifyvm\", :id, \"--memory\", \"1024\"]\n  # end\n  #\n  # View the documentation for the provider you're using for more\n  # information on available options.\n\n  # Enable provisioning with Puppet stand alone.  Puppet manifests\n  # are contained in a directory path relative to this Vagrantfile.\n  # You will need to create the manifests directory and a manifest in\n  # the file base.pp in the manifests_path directory.\n  #\n  # An example Puppet manifest to provision the message of the day:\n  #\n  # # group { \"puppet\":\n  # #   ensure => \"present\",\n  # # }\n  # #\n  # # File { owner => 0, group => 0, mode => 0644 }\n  # #\n  # # file { '/etc/motd':\n  # #   content => \"Welcome to your Vagrant-built virtual machine!\n  # #               Managed by Puppet.\\n\"\n  # # }\n  #\n  # config.vm.provision \"puppet\" do |puppet|\n  #   puppet.manifests_path = \"manifests\"\n  #   puppet.manifest_file  = \"site.pp\"\n  # end\n\n  # Enable provisioning with chef solo, specifying a cookbooks path, roles\n  # path, and data_bags path (all relative to this Vagrantfile), and adding\n  # some recipes and/or roles.\n  #\n  # config.vm.provision \"chef_solo\" do |chef|\n  #   chef.cookbooks_path = \"../my-recipes/cookbooks\"\n  #   chef.roles_path = \"../my-recipes/roles\"\n  #   chef.data_bags_path = \"../my-recipes/data_bags\"\n  #   chef.add_recipe \"mysql\"\n  #   chef.add_role \"web\"\n  #\n  #   # You may also specify custom JSON attributes:\n  #   chef.json = { :mysql_password => \"foo\" }\n  # end\n\n  # Enable provisioning with chef server, specifying the chef server URL,\n  # and the path to the validation key (relative to this Vagrantfile).\n  #\n  # The Opscode Platform uses HTTPS. Substitute your organization for\n  # ORGNAME in the URL and validation key.\n  #\n  # If you have your own Chef Server, use the appropriate URL, which may be\n  # HTTP instead of HTTPS depending on your configuration. Also change the\n  # validation key to validation.pem.\n  #\n  # config.vm.provision \"chef_client\" do |chef|\n  #   chef.chef_server_url = \"https://api.opscode.com/organizations/ORGNAME\"\n  #   chef.validation_key_path = \"ORGNAME-validator.pem\"\n  # end\n  #\n  # If you're using the Opscode platform, your validator client is\n  # ORGNAME-validator, replacing ORGNAME with your organization name.\n  #\n  # If you have your own Chef Server, the default validation client name is\n  # chef-validator, unless you changed the configuration.\n  #\n  #   chef.validation_client_name = \"ORGNAME-validator\"\nend\n\n\n\n```bash\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  # All Vagrant configuration is done here. The most common configuration\n  # options are documented and commented below. For a complete reference,\n  # please see the online documentation at vagrantup.com.\n\n# \u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\u306b\u4f7f\u3046Box\u306e\u6307\u5b9a\n  # Every Vagrant virtual environment requires a box to build off of.\n  config.vm.box = \"base\"\n\n# Box\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u3046Box\u306eURL\u3092\u6307\u5b9a\n  # The url from where the 'config.vm.box' box will be fetched if it\n  # doesn't already exist on the user's system.\n  config.vm.box_url = \"http://domain.com/path/to/above.box\"\n\n# \u30d5\u30a9\u30fc\u30ef\u30fc\u30c9\u30dd\u30fc\u30c8\u8a2d\u5b9a\u3002\u30b2\u30b9\u30c8\u3067\u306e80\u756a\uff08HTTP\uff09\u3092\u30db\u30b9\u30c8\u5074\u306e8080\u756a\u306b\u3059\u308b\u3002\n# \u30db\u30b9\u30c8\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089http://localhost:8080\u3068\u304b\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n\n# \u30db\u30b9\u30c8\u3057\u304b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u306a\u3044\u30b2\u30b9\u30c8\u30de\u30b7\u30f3\u306e\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u30a2\u30c9\u30ec\u30b9\u8a2d\u5b9a\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n\n# \u30b2\u30b9\u30c8\u30de\u30b7\u30f3\u306e\u30d1\u30d6\u30ea\u30c3\u30af\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a2d\u5b9a\u3002\n# \u540c\u3058LAN\u5185\u306ePC\u3068\u304b\u3082\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u305f\u308a\u3059\u308b\u304b\u306f\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u6b21\u7b2c\u306e\u3088\u3046\u3067\u3059\u3002\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  config.vm.network \"public_network\"\n\n# SSH forward agent\u306e\u6709\u52b9\u3001\u7121\u52b9\u8a2d\u5b9a \n# host =>ssh\u30ed\u30b0\u30a4\u30f3 guest1 =>ssh\u30ed\u30b0\u30a4\u30f3 guest2 \u304chost\u304c\u6301\u3063\u3066\u3044\u308b\u79d8\u5bc6\u30ad\u30fc\u306e\u307f\u3067\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\n  # If true, then any SSH connections made will enable agent forwarding.\n  # Default value: false\n  config.ssh.forward_agent = true\n\n# host\u3068guest\u306e\u5171\u6709\u30d5\u30a9\u30eb\u30c0\u306e\u8a2d\u5b9a\u3000\u7b2c\u4e00\u5f15\u6570:host\u3000\u7b2c\u4e8c\u5f15\u6570:guest\n# host\u5074\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306f\u5148\u306b\u4f5c\u6210\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\n# guest\u5074\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306f\u7d76\u5bfe\u30d1\u30b9\u3067\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n# \u4ee5\u4e0b\u3001\u52c9\u5f37\u4e2d\u3002\u3002\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Don't boot with headless mode\n  #   vb.gui = true\n  #\n  #   # Use VBoxManage to customize the VM. For example to change memory:\n  #   vb.customize [\"modifyvm\", :id, \"--memory\", \"1024\"]\n  # end\n  #\n  # View the documentation for the provider you're using for more\n  # information on available options.\n\n  # Enable provisioning with Puppet stand alone.  Puppet manifests\n  # are contained in a directory path relative to this Vagrantfile.\n  # You will need to create the manifests directory and a manifest in\n  # the file base.pp in the manifests_path directory.\n  #\n  # An example Puppet manifest to provision the message of the day:\n  #\n  # # group { \"puppet\":\n  # #   ensure => \"present\",\n  # # }\n  # #\n  # # File { owner => 0, group => 0, mode => 0644 }\n  # #\n  # # file { '/etc/motd':\n  # #   content => \"Welcome to your Vagrant-built virtual machine!\n  # #               Managed by Puppet.\\n\"\n  # # }\n  #\n  # config.vm.provision \"puppet\" do |puppet|\n  #   puppet.manifests_path = \"manifests\"\n  #   puppet.manifest_file  = \"site.pp\"\n  # end\n\n  # Enable provisioning with chef solo, specifying a cookbooks path, roles\n  # path, and data_bags path (all relative to this Vagrantfile), and adding\n  # some recipes and/or roles.\n  #\n  # config.vm.provision \"chef_solo\" do |chef|\n  #   chef.cookbooks_path = \"../my-recipes/cookbooks\"\n  #   chef.roles_path = \"../my-recipes/roles\"\n  #   chef.data_bags_path = \"../my-recipes/data_bags\"\n  #   chef.add_recipe \"mysql\"\n  #   chef.add_role \"web\"\n  #\n  #   # You may also specify custom JSON attributes:\n  #   chef.json = { :mysql_password => \"foo\" }\n  # end\n\n  # Enable provisioning with chef server, specifying the chef server URL,\n  # and the path to the validation key (relative to this Vagrantfile).\n  #\n  # The Opscode Platform uses HTTPS. Substitute your organization for\n  # ORGNAME in the URL and validation key.\n  #\n  # If you have your own Chef Server, use the appropriate URL, which may be\n  # HTTP instead of HTTPS depending on your configuration. Also change the\n  # validation key to validation.pem.\n  #\n  # config.vm.provision \"chef_client\" do |chef|\n  #   chef.chef_server_url = \"https://api.opscode.com/organizations/ORGNAME\"\n  #   chef.validation_key_path = \"ORGNAME-validator.pem\"\n  # end\n  #\n  # If you're using the Opscode platform, your validator client is\n  # ORGNAME-validator, replacing ORGNAME with your organization name.\n  #\n  # If you have your own Chef Server, the default validation client name is\n  # chef-validator, unless you changed the configuration.\n  #\n  #   chef.validation_client_name = \"ORGNAME-validator\"\nend\n\n```\n", "tags": ["vagrant", "Vagrantfile"]}