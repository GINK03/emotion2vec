{"context": "http://qiita.com/7of9/items/5e3fc335da77d57591fc\n\u306e\u7d9a\u304d\n\n\u30bd\u30d5\u30c8\u5185\u5bb9\n\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u304b\u3089\u9078\u629e\u3057\u305f\u30ad\u30fc\u3092\u30d5\u30c3\u30c8\u5165\u529b\u3067\u5165\u529b\u3067\u304d\u308b\u3053\u3068\n\n\n\u57fa\u672c\u6a5f\u80fd\u306f\u5b9f\u88c5\u5b8c\u4e86\u3002\nSublime Text\u3067\u4f7f\u3046Ctrl+Shift+F\u306f\u5de6\u8db3Ctrl, \u53f3\u8db3Shift, \u5de6\u624bF\u306e\u30b3\u30f3\u30dc\u3067\u4f7f\u3048\u3070\u826f\u304b\u3063\u305f\u30021\u3064\u306e\u30d5\u30c3\u30c8\u5165\u529b\u3067\u30ad\u30fc\u30b3\u30f3\u30dc\u3092\u8ee2\u9001\u3059\u308b\u3088\u308a\u306f\u67d4\u8edf\u6027\u304c\u3042\u308b\u3002\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u306a\u304c\u3089\u30d5\u30c3\u30c8\u5165\u529b\u3092\u4f7f\u3044\u59cb\u3081\u3066\u3044\u308b\u3002Baskcpace, PgUp, PgDn\u306a\u3069\u3002\n\ncode (v0.2)\n\nMain.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <memory>\n#include \"Main.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n    : TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\n\n/*\nv0.2 2016 Mar. 1\n    - add assignKeyCode()\n    - add keyItemString\n    - add isAlternateKey()\n    - add keyTbl[]\nv0.1 2016 Apr 24\n    - recognize rising edge (push)\n    - receive inputs through UDP\n*/\n\nstatic const int kNumInput = 6;\n\nstatic bool preInputs[kNumInput] = { 0 };\n\n#define VK_F (0x46)\n\nstatic const uint8_t vkKeyTbl[] = {\n    VK_CONTROL,\n    VK_SPACE,\n    VK_SHIFT,\n    VK_BACK,\n    VK_RETURN,\n    VK_DIVIDE,\n    VK_PRIOR, // PgUp\n    VK_NEXT, // PgDn\n};\n\nstatic const String keyItemString =\n    L\"CONTROL\"\n    L\",SPACE\"\n    L\",SHIFT\"\n    L\",BACKSPACE\"\n    L\",RETURN\"\n    L\",/\"\n    L\",PgUp\"\n    L\",PgDn\"\n;\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n    Timer1->Enabled = false;\n\n    IdUDPClient1->Host = E_ipadr->Text;\n    IdUDPClient1->Port = 7002;\n    IdUDPClient1->Active = true;\n\n    IdUDPClient1->Send(\"foot\\r\\n\");\n\n    Sleep(10);\n    Application->ProcessMessages();\n\n    DWORD start = GetTickCount();\n    DWORD elapsed;\n\n    AnsiString res = IdUDPClient1->ReceiveString(300);\n\n    elapsed = GetTickCount() - start;\n\n    procInput(res);\n\n    IdUDPClient1->Active = false;\n    Timer1->Enabled = true;\n\n}\n//---------------------------------------------------------------------------\n\nstatic bool isAlternateKey(int8_t vkkey)\n{\n    if (vkkey == VK_SHIFT || vkkey == VK_CONTROL) {\n        return true;\n    }\n    return false;\n}\n\nbool TForm1::assignKeyCode(int SWidx, int8_t *dstPtr)\n{\n    int itmidx = -1;\n\n    if (dstPtr == NULL) {\n        return false;\n    }\n\n    switch(SWidx) {\n    case 0:\n        itmidx = CB_KeyAssign1->ItemIndex;\n        break;\n    case 1:\n        itmidx = CB_KeyAssign2->ItemIndex;\n        break;\n    case 2:\n        itmidx = CB_KeyAssign3->ItemIndex;\n        break;\n    case 3:\n        itmidx = CB_KeyAssign4->ItemIndex;\n        break;\n    case 4:\n        itmidx = CB_KeyAssign5->ItemIndex;\n        break;\n    case 5:\n        itmidx = CB_KeyAssign6->ItemIndex;\n        break;\n    }\n\n    if (itmidx < 0) {\n        return false;\n    }\n\n    *dstPtr = vkKeyTbl[itmidx];\n    return true;\n}\n\nvoid __fastcall TForm1::procInput(String res)\n{\n    if(res.Length() == 0) {\n        return;\n    }\n\n    std::unique_ptr<TStringList> line(new TStringList);\n\n    line->CommaText = res;\n\n    bool ins[kNumInput];\n    try {\n        for(int idx=0; idx < kNumInput; idx++) {\n            ins[idx] = !( (bool)line->Strings[idx+1].ToInt() );\n        }\n    } catch (...) {\n    }\n\n    CheckBox1->Checked = ins[0];\n    CheckBox2->Checked = ins[1];\n    CheckBox3->Checked = ins[2];\n    CheckBox4->Checked = ins[3];\n    CheckBox5->Checked = ins[4];\n    CheckBox6->Checked = ins[5];\n\n    int8_t kycd;\n    bool resOK;\n\n    for(int idx=0; idx < kNumInput; idx++) {\n        if (preInputs[idx] == ins[idx]) {\n            continue;\n        }\n\n        resOK = assignKeyCode(idx, &kycd);\n        if (resOK == false) {\n            continue;\n        }\n\n        if (ins[idx]) {\n            keybd_event(kycd, 0, 0, 0);\n        } else {\n            if (isAlternateKey(kycd)) {\n                keybd_event(kycd, 0, KEYEVENTF_KEYUP, 0);\n            }\n        }\n\n        preInputs[idx] = ins[idx];\n    }\n}\n\nvoid __fastcall TForm1::FormShow(TObject *Sender)\n{\n    CB_KeyAssign1->Items->CommaText = keyItemString;\n    CB_KeyAssign2->Items->CommaText = keyItemString;\n    CB_KeyAssign3->Items->CommaText = keyItemString;\n    CB_KeyAssign4->Items->CommaText = keyItemString;\n    CB_KeyAssign5->Items->CommaText = keyItemString;\n    CB_KeyAssign6->Items->CommaText = keyItemString;\n}\n//---------------------------------------------------------------------------\n\n\n\nTODO\n\n\u8a2d\u5b9a\u4fdd\u5b58\u6a5f\u80fd\nUDP\u901a\u4fe1ON/OFF\u6a5f\u80fd\n\nhttp://qiita.com/7of9/items/5e3fc335da77d57591fc\n\u306e\u7d9a\u304d\n\n## \u30bd\u30d5\u30c8\u5185\u5bb9\n\n\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u304b\u3089\u9078\u629e\u3057\u305f\u30ad\u30fc\u3092\u30d5\u30c3\u30c8\u5165\u529b\u3067\u5165\u529b\u3067\u304d\u308b\u3053\u3068\n\n![DSC_0163.JPG](https://qiita-image-store.s3.amazonaws.com/0/32870/255c1fa1-016f-f5d1-9bff-6063ce7bd038.jpeg)\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/08ebf96b-2d94-d188-0928-3c40852410e4.png)\n\n\n\u57fa\u672c\u6a5f\u80fd\u306f\u5b9f\u88c5\u5b8c\u4e86\u3002\n\nSublime Text\u3067\u4f7f\u3046`Ctrl+Shift+F`\u306f\u5de6\u8db3Ctrl, \u53f3\u8db3Shift, \u5de6\u624bF\u306e\u30b3\u30f3\u30dc\u3067\u4f7f\u3048\u3070\u826f\u304b\u3063\u305f\u30021\u3064\u306e\u30d5\u30c3\u30c8\u5165\u529b\u3067\u30ad\u30fc\u30b3\u30f3\u30dc\u3092\u8ee2\u9001\u3059\u308b\u3088\u308a\u306f\u67d4\u8edf\u6027\u304c\u3042\u308b\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u306a\u304c\u3089\u30d5\u30c3\u30c8\u5165\u529b\u3092\u4f7f\u3044\u59cb\u3081\u3066\u3044\u308b\u3002Baskcpace, PgUp, PgDn\u306a\u3069\u3002\n\n## code (v0.2)\n\n```Main.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <memory>\n#include \"Main.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n\t: TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\n\n/*\nv0.2 2016 Mar. 1\n\t- add assignKeyCode()\n\t- add keyItemString\n\t- add isAlternateKey()\n\t- add keyTbl[]\nv0.1 2016 Apr 24\n\t- recognize rising edge (push)\n\t- receive inputs through UDP\n*/\n\nstatic const int kNumInput = 6;\n\nstatic bool preInputs[kNumInput] = { 0 };\n\n#define VK_F (0x46)\n\nstatic const uint8_t vkKeyTbl[] = {\n\tVK_CONTROL,\n\tVK_SPACE,\n\tVK_SHIFT,\n\tVK_BACK,\n\tVK_RETURN,\n\tVK_DIVIDE,\n\tVK_PRIOR, // PgUp\n\tVK_NEXT, // PgDn\n};\n\nstatic const String keyItemString =\n\tL\"CONTROL\"\n\tL\",SPACE\"\n\tL\",SHIFT\"\n\tL\",BACKSPACE\"\n\tL\",RETURN\"\n\tL\",/\"\n\tL\",PgUp\"\n\tL\",PgDn\"\n;\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n\tTimer1->Enabled = false;\n\n\tIdUDPClient1->Host = E_ipadr->Text;\n\tIdUDPClient1->Port = 7002;\n\tIdUDPClient1->Active = true;\n\n\tIdUDPClient1->Send(\"foot\\r\\n\");\n\n\tSleep(10);\n\tApplication->ProcessMessages();\n\n\tDWORD start = GetTickCount();\n\tDWORD elapsed;\n\n\tAnsiString res = IdUDPClient1->ReceiveString(300);\n\n\telapsed = GetTickCount() - start;\n\n\tprocInput(res);\n\n\tIdUDPClient1->Active = false;\n\tTimer1->Enabled = true;\n\n}\n//---------------------------------------------------------------------------\n\nstatic bool isAlternateKey(int8_t vkkey)\n{\n\tif (vkkey == VK_SHIFT || vkkey == VK_CONTROL) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nbool TForm1::assignKeyCode(int SWidx, int8_t *dstPtr)\n{\n\tint itmidx = -1;\n\n\tif (dstPtr == NULL) {\n\t\treturn false;\n\t}\n\n\tswitch(SWidx) {\n\tcase 0:\n\t\titmidx = CB_KeyAssign1->ItemIndex;\n\t\tbreak;\n\tcase 1:\n\t\titmidx = CB_KeyAssign2->ItemIndex;\n\t\tbreak;\n\tcase 2:\n\t\titmidx = CB_KeyAssign3->ItemIndex;\n\t\tbreak;\n\tcase 3:\n\t\titmidx = CB_KeyAssign4->ItemIndex;\n\t\tbreak;\n\tcase 4:\n\t\titmidx = CB_KeyAssign5->ItemIndex;\n\t\tbreak;\n\tcase 5:\n\t\titmidx = CB_KeyAssign6->ItemIndex;\n\t\tbreak;\n\t}\n\n\tif (itmidx < 0) {\n\t\treturn false;\n\t}\n\n\t*dstPtr = vkKeyTbl[itmidx];\n\treturn true;\n}\n\nvoid __fastcall TForm1::procInput(String res)\n{\n\tif(res.Length() == 0) {\n        return;\n\t}\n\n\tstd::unique_ptr<TStringList> line(new TStringList);\n\n\tline->CommaText = res;\n\n\tbool ins[kNumInput];\n\ttry {\n\t\tfor(int idx=0; idx < kNumInput; idx++) {\n\t\t\tins[idx] = !( (bool)line->Strings[idx+1].ToInt() );\n\t\t}\n\t} catch (...) {\n\t}\n\n\tCheckBox1->Checked = ins[0];\n\tCheckBox2->Checked = ins[1];\n\tCheckBox3->Checked = ins[2];\n\tCheckBox4->Checked = ins[3];\n\tCheckBox5->Checked = ins[4];\n\tCheckBox6->Checked = ins[5];\n\n\tint8_t kycd;\n\tbool resOK;\n\n\tfor(int idx=0; idx < kNumInput; idx++) {\n\t\tif (preInputs[idx] == ins[idx]) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresOK = assignKeyCode(idx, &kycd);\n\t\tif (resOK == false) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (ins[idx]) {\n\t\t\tkeybd_event(kycd, 0, 0, 0);\n\t\t} else {\n\t\t\tif (isAlternateKey(kycd)) {\n\t\t\t\tkeybd_event(kycd, 0, KEYEVENTF_KEYUP, 0);\n\t\t\t}\n\t\t}\n\n\t\tpreInputs[idx] = ins[idx];\n\t}\n}\n\nvoid __fastcall TForm1::FormShow(TObject *Sender)\n{\n\tCB_KeyAssign1->Items->CommaText = keyItemString;\n\tCB_KeyAssign2->Items->CommaText = keyItemString;\n\tCB_KeyAssign3->Items->CommaText = keyItemString;\n\tCB_KeyAssign4->Items->CommaText = keyItemString;\n\tCB_KeyAssign5->Items->CommaText = keyItemString;\n\tCB_KeyAssign6->Items->CommaText = keyItemString;\n}\n//---------------------------------------------------------------------------\n```\n\n## TODO\n\n- \u8a2d\u5b9a\u4fdd\u5b58\u6a5f\u80fd\n- UDP\u901a\u4fe1ON/OFF\u6a5f\u80fd\n\n", "tags": ["borgAugmentation", "cppBuilder"]}