{"context": "CodeIQ\u300c\u300e\u30ad\u30e3\u30ea\u30fc\u30fb\u30aa\u30fc\u30d0\u30fc\u300f\u554f\u984c\u300d\u306e\u63b2\u8f09\u671f\u9593\u304c\u7d42\u308f\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u63d0\u51fa\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\u306a\u304a\u307b\u304b\u306e\u65b9\u306e\u89e3\u7b54\u306fTogetter\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u307e\u3059\u3002\u307e\u305f\u89e3\u8aac\u8a18\u4e8b\u3082CodeIQMagazine\u306b\u63b2\u8f09\u3055\u308c\u308b\u2015\u2015\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u306e\u969b\u306f\u30ea\u30f3\u30af\u3092\u5f35\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u304a\u307c\u3048\u3066\u3044\u305f\u3089(\u00b4\u30fb\u03c9\u30fb\uff40)\n\n3097.rb\nn, c = STDIN.gets.split.map(&:to_i)\n\n# \u3042\u308b\u4e00\u6841\u306e\u8db3\u3057\u7b97\u306b\u7740\u76ee\u3057\u305f\u3068\u304d\u3001\u7e70\u308a\u4e0a\u304c\u308a\u306b\u95a2\u3059\u308b\u6319\u52d5\u306f\u6b21\u306e3\u7a2e\u985e\u306b\u5206\u985e\u3067\u304d\u308b\u3002\n# type-a : \u524d\u6841\u306e\u7e70\u308a\u4e0a\u304c\u308a\u306b\u95a2\u4fc2\u306a\u304f\u3001\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u3002\n# type-b : \u524d\u6841\u304c\u7e70\u308a\u4e0a\u304c\u3063\u305f\u3068\u304d\u3001\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u3002\n# type-c : \u524d\u6841\u306e\u6817\u304c\u4e0a\u304c\u308a\u306b\u95a2\u4fc2\u306a\u304f\u3001\u7e70\u308a\u4e0a\u304c\u308a\u306f\u767a\u751f\u3057\u306a\u3044\u3002\n# \u307e\u305a\u306f\u3042\u308b\u4e00\u6841\u306e\u8a08\u7b97\u306b\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306ea,b,c\u306b\u8a72\u5f53\u3059\u308b\u7d44\u5408\u305b\u306e\u7dcf\u6570\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u308b\u3002\ntypes = Hash.new(0)\n[*0..9].repeated_permutation(2) do |x, y|\n    types[:a] += 1 if x + y > 9\n    types[:b] += 1 if x + y == 9\n    types[:c] += 1 if x + y < 9\nend\n\n# a,b,c\u3092\u4e26\u3079\u3066\u3001\u305d\u306e\u4e26\u3079\u65b9\u306b\u304a\u3044\u3066\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3002\n# a,b,c\u306e\u4e26\u3079\u65b9\u306f\u91cd\u8907\u9806\u5217\u3092\u5229\u7528\u3059\u308b\u3068\u904e\u4e0d\u8db3\u306a\u304f\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\ndigits = Hash.new{|hash, key| hash[key] = []}\n%i(a b c).repeated_permutation(n) do |digit|\n    flg = false # \u524d\u6841\u304c\u7e70\u308a\u4e0a\u304c\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3002\n    cnt = (0...digit.size).reduce(0) do |sum, i|\n        flg = digit[i] == :a || (flg && digit[i] == :b)\n        flg ? sum + 1 : sum\n    end\n    digits[cnt] << digit\nend\n\n# \u7e70\u308a\u4e0a\u304c\u308a\u306e\u56de\u6570\u304cc\u56de\u306b\u306a\u308b\u3001a,b,c\u306e\u4e26\u3079\u65b9\u304b\u3089\u6c42\u3081\u308bF(n, c)\u3092\u8a08\u7b97\u3059\u308b\u3002\nans = digits[c].reduce(0) do |sum, digit|\n    a, b, c = %i(a b c).map{|t| digit.count(t)}\n    sum + (types[:a] ** a * types[:b] ** b * types[:c] ** c)\nend\n\np ans\n\n\n\n\n3097.py\n\nimport itertools, collections\n\nif __name__ == '__main__':\n    n, c = map(int, input().split(' '))\n\n    types = collections.defaultdict(int)\n    for x, y in itertools.product(range(10), repeat=2):\n        if x + y >  9: types['a'] += 1\n        if x + y == 9: types['b'] += 1\n        if x + y <  9: types['c'] += 1\n\n    digits = collections.defaultdict(list)\n    for digit in itertools.product(('a', 'b', 'c'), repeat=n):\n        flg = False\n        cnt = 0\n        for i in range(len(digit)):\n            flg = digit[i] == 'a' or (flg and digit[i] == 'b')\n            if flg: cnt += 1\n\n        digits[cnt].append(digit)\n\n    answer = 0\n    for digit in digits[c]:\n        a, b, c = (digit.count(symbol) for symbol in ('a', 'b', 'c'))\n        answer += types['a'] ** a * types['b'] ** b * types['c'] ** c\n\n    print(answer)\n\n\n\n\u63d0\u51fa\u8a00\u8a9e\u306fRuby\u3068Python3\u2015\u2015\u3067\u3059\u304c\u3001\u9055\u3046\u8a00\u8a9e\u306a\u306e\u306b\u898b\u305f\u76ee\u304c\u307b\u307c\u4e00\u7dd2\u3067\u3059\u306d(\u00b4\u30fb\u03c9\u30fb\uff40) \u540c\u4e00\u4eba\u7269\u304c\u540c\u4e00\u306e\u601d\u60f3\u306e\u3082\u3068\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u4f3c\u901a\u3063\u3066\u304f\u308b\u306e\u306f\u4ed5\u65b9\u306a\u3044\u3068\u3044\u3048\u3070\u305d\u306e\u901a\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093(\u8a00\u3044\u8a33)\n\u8a73\u3057\u3044\u89e3\u304d\u65b9\u306fRuby\u306e\u30bd\u30fc\u30b9\u5185\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u7c21\u5358\u306a\u611f\u60f3\u3060\u3051\u8ff0\u3079\u3066\u304a\u304d\u307e\u3059\u3002\u672c\u554f\u306f\u8db3\u3057\u7b97\u306b\u304a\u3044\u3066\u7e70\u308a\u4e0a\u304c\u308a\u306e\u767a\u751f\u56de\u6570\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3002\u8003\u3048\u3089\u308c\u308b\u6574\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u3092\u6c42\u3081\u305f\u3042\u3068\u305d\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3001\u3064\u307e\u308a\u306f\u5168\u63a2\u7d22\u3092\u3059\u308b\u3068\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3001\u4f55\u3068\u304b\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u308f\u305f\u3057\u306e\u5834\u5408\u306f\u300c\u7e70\u308a\u4e0a\u304c\u308a\u306e\u30d1\u30bf\u30fc\u30f3\u300d\u306b\u3088\u308b\u5834\u5408\u5206\u3051\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u304c\u3001\u6f38\u5316\u5f0f\u306a\u3069\u3001\u3088\u308a\u6570\u5b66\u7684\u306a\u56de\u7b54\u65b9\u6cd5\u3082\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n\n[CodeIQ\u300c\u300e\u30ad\u30e3\u30ea\u30fc\u30fb\u30aa\u30fc\u30d0\u30fc\u300f\u554f\u984c\u300d](https://codeiq.jp/q/3097)\u306e\u63b2\u8f09\u671f\u9593\u304c\u7d42\u308f\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u63d0\u51fa\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\u306a\u304a\u307b\u304b\u306e\u65b9\u306e\u89e3\u7b54\u306f[Togetter](https://togetter.com/li/1070843)\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u307e\u3059\u3002\u307e\u305f\u89e3\u8aac\u8a18\u4e8b\u3082CodeIQMagazine\u306b\u63b2\u8f09\u3055\u308c\u308b\u2015\u2015\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u306e\u969b\u306f\u30ea\u30f3\u30af\u3092\u5f35\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u304a\u307c\u3048\u3066\u3044\u305f\u3089(\u00b4\u30fb\u03c9\u30fb\uff40)\n\n```rb:3097.rb\nn, c = STDIN.gets.split.map(&:to_i)\n\n# \u3042\u308b\u4e00\u6841\u306e\u8db3\u3057\u7b97\u306b\u7740\u76ee\u3057\u305f\u3068\u304d\u3001\u7e70\u308a\u4e0a\u304c\u308a\u306b\u95a2\u3059\u308b\u6319\u52d5\u306f\u6b21\u306e3\u7a2e\u985e\u306b\u5206\u985e\u3067\u304d\u308b\u3002\n# type-a : \u524d\u6841\u306e\u7e70\u308a\u4e0a\u304c\u308a\u306b\u95a2\u4fc2\u306a\u304f\u3001\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u3002\n# type-b : \u524d\u6841\u304c\u7e70\u308a\u4e0a\u304c\u3063\u305f\u3068\u304d\u3001\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u3002\n# type-c : \u524d\u6841\u306e\u6817\u304c\u4e0a\u304c\u308a\u306b\u95a2\u4fc2\u306a\u304f\u3001\u7e70\u308a\u4e0a\u304c\u308a\u306f\u767a\u751f\u3057\u306a\u3044\u3002\n# \u307e\u305a\u306f\u3042\u308b\u4e00\u6841\u306e\u8a08\u7b97\u306b\u304a\u3044\u3066\u3001\u4e0a\u8a18\u306ea,b,c\u306b\u8a72\u5f53\u3059\u308b\u7d44\u5408\u305b\u306e\u7dcf\u6570\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u308b\u3002\ntypes = Hash.new(0)\n[*0..9].repeated_permutation(2) do |x, y|\n    types[:a] += 1 if x + y > 9\n    types[:b] += 1 if x + y == 9\n    types[:c] += 1 if x + y < 9\nend\n\n# a,b,c\u3092\u4e26\u3079\u3066\u3001\u305d\u306e\u4e26\u3079\u65b9\u306b\u304a\u3044\u3066\u7e70\u308a\u4e0a\u304c\u308a\u304c\u767a\u751f\u3059\u308b\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3002\n# a,b,c\u306e\u4e26\u3079\u65b9\u306f\u91cd\u8907\u9806\u5217\u3092\u5229\u7528\u3059\u308b\u3068\u904e\u4e0d\u8db3\u306a\u304f\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\ndigits = Hash.new{|hash, key| hash[key] = []}\n%i(a b c).repeated_permutation(n) do |digit|\n    flg = false # \u524d\u6841\u304c\u7e70\u308a\u4e0a\u304c\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3002\n    cnt = (0...digit.size).reduce(0) do |sum, i|\n        flg = digit[i] == :a || (flg && digit[i] == :b)\n        flg ? sum + 1 : sum\n    end\n    digits[cnt] << digit\nend\n\n# \u7e70\u308a\u4e0a\u304c\u308a\u306e\u56de\u6570\u304cc\u56de\u306b\u306a\u308b\u3001a,b,c\u306e\u4e26\u3079\u65b9\u304b\u3089\u6c42\u3081\u308bF(n, c)\u3092\u8a08\u7b97\u3059\u308b\u3002\nans = digits[c].reduce(0) do |sum, digit|\n    a, b, c = %i(a b c).map{|t| digit.count(t)}\n    sum + (types[:a] ** a * types[:b] ** b * types[:c] ** c)\nend\n\np ans\n\n```\n\n```py:3097.py\n\nimport itertools, collections\n\nif __name__ == '__main__':\n    n, c = map(int, input().split(' '))\n\n    types = collections.defaultdict(int)\n    for x, y in itertools.product(range(10), repeat=2):\n        if x + y >  9: types['a'] += 1\n        if x + y == 9: types['b'] += 1\n        if x + y <  9: types['c'] += 1\n\n    digits = collections.defaultdict(list)\n    for digit in itertools.product(('a', 'b', 'c'), repeat=n):\n        flg = False\n        cnt = 0\n        for i in range(len(digit)):\n            flg = digit[i] == 'a' or (flg and digit[i] == 'b')\n            if flg: cnt += 1\n\n        digits[cnt].append(digit)\n    \n    answer = 0\n    for digit in digits[c]:\n        a, b, c = (digit.count(symbol) for symbol in ('a', 'b', 'c'))\n        answer += types['a'] ** a * types['b'] ** b * types['c'] ** c\n    \n    print(answer)\n\n```\n\n\u63d0\u51fa\u8a00\u8a9e\u306fRuby\u3068Python3\u2015\u2015\u3067\u3059\u304c\u3001\u9055\u3046\u8a00\u8a9e\u306a\u306e\u306b\u898b\u305f\u76ee\u304c\u307b\u307c\u4e00\u7dd2\u3067\u3059\u306d(\u00b4\u30fb\u03c9\u30fb\uff40) \u540c\u4e00\u4eba\u7269\u304c\u540c\u4e00\u306e\u601d\u60f3\u306e\u3082\u3068\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u4f3c\u901a\u3063\u3066\u304f\u308b\u306e\u306f\u4ed5\u65b9\u306a\u3044\u3068\u3044\u3048\u3070\u305d\u306e\u901a\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093(\u8a00\u3044\u8a33)\n\n\u8a73\u3057\u3044\u89e3\u304d\u65b9\u306fRuby\u306e\u30bd\u30fc\u30b9\u5185\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u7c21\u5358\u306a\u611f\u60f3\u3060\u3051\u8ff0\u3079\u3066\u304a\u304d\u307e\u3059\u3002\u672c\u554f\u306f\u8db3\u3057\u7b97\u306b\u304a\u3044\u3066\u7e70\u308a\u4e0a\u304c\u308a\u306e\u767a\u751f\u56de\u6570\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3002\u8003\u3048\u3089\u308c\u308b\u6574\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u3092\u6c42\u3081\u305f\u3042\u3068\u305d\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3001\u3064\u307e\u308a\u306f\u5168\u63a2\u7d22\u3092\u3059\u308b\u3068\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3001\u4f55\u3068\u304b\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u308f\u305f\u3057\u306e\u5834\u5408\u306f\u300c\u7e70\u308a\u4e0a\u304c\u308a\u306e\u30d1\u30bf\u30fc\u30f3\u300d\u306b\u3088\u308b\u5834\u5408\u5206\u3051\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u304c\u3001\u6f38\u5316\u5f0f\u306a\u3069\u3001\u3088\u308a\u6570\u5b66\u7684\u306a\u56de\u7b54\u65b9\u6cd5\u3082\u3042\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n", "tags": ["codeiq", "Ruby", "python3"]}