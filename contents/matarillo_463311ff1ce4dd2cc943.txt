{"context": " More than 1 year has passed since last update.\nbomb.fs\nlet WIDTH = 6\nlet HEIGHT = 5\n\ntype Matrix =\n  struct\n    val D : uint32\n    new (d) = {D = d}\n    new (s:string) = {D = System.Convert.ToUInt32(s,16)}\n    new (x,y) =\n      {D = 1u <<< (31 - x - (y * WIDTH))}\n    member this.At(x,y) =\n      (this.D >>> (31 - x - (y * WIDTH))) % 2u > 0u\n    override this.ToString() =\n      this.D.ToString(\"x8\")\n    static member (+) (m1: Matrix, m2: Matrix) =\n      new Matrix(m1.D ||| m2.D)\n    static member Zero = new Matrix()\n  end\n\nlet toRow y (m:Matrix) =\n  Array.map (fun x -> m.At(x,y)) [|0..WIDTH-1|]\nlet fromRow y (r:bool array) =\n  [0..WIDTH-1]\n  |> List.filter (fun x -> r.[x])\n  |> List.sumBy (fun x -> new Matrix(x,y))\nlet toColumn x (m:Matrix) =\n  Array.map (fun y -> m.At(x,y)) [|0..HEIGHT-1|]\nlet fromColumn x (c:bool array) =\n  [0..HEIGHT-1]\n  |> List.filter (fun y -> c.[y])\n  |> List.sumBy (fun y -> new Matrix(x,y))\nlet blast1D x (w:bool array) =\n  let outofRange i = (i < 0) || (Array.length w <= i)\n  let rec indexOfWall d i =\n    if outofRange i || w.[i] then i else indexOfWall d (i+d)\n  let w1 = indexOfWall -1 (x-1)\n  let w2 = indexOfWall 1 (x+1)\n  Array.map (fun i -> w1 < i && i < w2) [|0..Array.length w - 1|]\nlet blast2D (w:Matrix) x y =\n  let h = w |> toRow y |> blast1D x |> fromRow y\n  let v = w |> toColumn x |> blast1D y |> fromColumn x\n  h + v\nlet blast (w:Matrix) (b:Matrix) =\n  seq {for x in 0..WIDTH-1 do\n       for y in 0..HEIGHT-1 do\n       yield (x,y)}\n  |> Seq.filter b.At\n  |> Seq.sumBy (fun (x,y) -> blast2D w x y)\nlet solve (s:string) =\n  let a = s.Split([|'/'|])\n  let b = blast (new Matrix(a.[0])) (new Matrix(a.[1]))\n  b.ToString()\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"802b1200/01400c20\" \"53c40cfc\"\n  test \"28301068/84080504\" \"d64fef94\"\n  test \"100a4010/80010004\" \"e241850c\"\n  test \"81020400/000000fc\" \"0e3cfbfc\"\n  test \"80225020/7e082080\" \"7fdd24d0\"\n  test \"01201200/40102008\" \"fe1861fc\"\n  test \"00201000/01000200\" \"43c48f08\"\n  test \"00891220/81020408\" \"ff060c1c\"\n  test \"410033c0/0c300000\" \"3cf0c000\"\n  test \"00000000/01400a00\" \"7bf7bf78\"\n  test \"00000000/20000a00\" \"fca2bf28\"\n  test \"00000000/00000000\" \"00000000\"\n  test \"00cafe00/00000000\" \"00000000\"\n  test \"aaabaaaa/50000000\" \"51441040\"\n  test \"a95a95a8/56a56a54\" \"56a56a54\"\n  test \"104fc820/80201010\" \"ea30345c\"\n  test \"4a940214/05000008\" \"05000008\"\n  test \"00908000/05000200\" \"ff043f48\"\n  test \"00c48c00/fe1861fc\" \"ff3873fc\"\n  test \"00000004/81020400\" \"fffffff0\"\n  test \"111028b0/40021100\" \"e08fd744\"\n  test \"6808490c/01959000\" \"17f7b650\"\n  test \"30821004/81014040\" \"c75de5f8\"\n  test \"0004c810/10003100\" \"fe4937c4\"\n  test \"12022020/88200000\" \"edf08208\"\n  test \"2aa92098/01160000\" \"45165964\"\n  test \"00242940/10010004\" \"fc43c43c\"\n  test \"483c2120/11004c00\" \"33c3de10\"\n  test \"10140140/44004a04\" \"eda3fe3c\"\n  test \"0c901d38/72602200\" \"f36da280\"\n  0\n\n\n```fsharp:bomb.fs\nlet WIDTH = 6\nlet HEIGHT = 5\n\ntype Matrix =\n  struct\n    val D : uint32\n    new (d) = {D = d}\n    new (s:string) = {D = System.Convert.ToUInt32(s,16)}\n    new (x,y) =\n      {D = 1u <<< (31 - x - (y * WIDTH))}\n    member this.At(x,y) =\n      (this.D >>> (31 - x - (y * WIDTH))) % 2u > 0u\n    override this.ToString() =\n      this.D.ToString(\"x8\")\n    static member (+) (m1: Matrix, m2: Matrix) =\n      new Matrix(m1.D ||| m2.D)\n    static member Zero = new Matrix()\n  end\n\nlet toRow y (m:Matrix) =\n  Array.map (fun x -> m.At(x,y)) [|0..WIDTH-1|]\nlet fromRow y (r:bool array) =\n  [0..WIDTH-1]\n  |> List.filter (fun x -> r.[x])\n  |> List.sumBy (fun x -> new Matrix(x,y))\nlet toColumn x (m:Matrix) =\n  Array.map (fun y -> m.At(x,y)) [|0..HEIGHT-1|]\nlet fromColumn x (c:bool array) =\n  [0..HEIGHT-1]\n  |> List.filter (fun y -> c.[y])\n  |> List.sumBy (fun y -> new Matrix(x,y))\nlet blast1D x (w:bool array) =\n  let outofRange i = (i < 0) || (Array.length w <= i)\n  let rec indexOfWall d i =\n    if outofRange i || w.[i] then i else indexOfWall d (i+d)\n  let w1 = indexOfWall -1 (x-1)\n  let w2 = indexOfWall 1 (x+1)\n  Array.map (fun i -> w1 < i && i < w2) [|0..Array.length w - 1|]\nlet blast2D (w:Matrix) x y =\n  let h = w |> toRow y |> blast1D x |> fromRow y\n  let v = w |> toColumn x |> blast1D y |> fromColumn x\n  h + v\nlet blast (w:Matrix) (b:Matrix) =\n  seq {for x in 0..WIDTH-1 do\n       for y in 0..HEIGHT-1 do\n       yield (x,y)}\n  |> Seq.filter b.At\n  |> Seq.sumBy (fun (x,y) -> blast2D w x y)\nlet solve (s:string) =\n  let a = s.Split([|'/'|])\n  let b = blast (new Matrix(a.[0])) (new Matrix(a.[1]))\n  b.ToString()\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"802b1200/01400c20\" \"53c40cfc\"\n  test \"28301068/84080504\" \"d64fef94\"\n  test \"100a4010/80010004\" \"e241850c\"\n  test \"81020400/000000fc\" \"0e3cfbfc\"\n  test \"80225020/7e082080\" \"7fdd24d0\"\n  test \"01201200/40102008\" \"fe1861fc\"\n  test \"00201000/01000200\" \"43c48f08\"\n  test \"00891220/81020408\" \"ff060c1c\"\n  test \"410033c0/0c300000\" \"3cf0c000\"\n  test \"00000000/01400a00\" \"7bf7bf78\"\n  test \"00000000/20000a00\" \"fca2bf28\"\n  test \"00000000/00000000\" \"00000000\"\n  test \"00cafe00/00000000\" \"00000000\"\n  test \"aaabaaaa/50000000\" \"51441040\"\n  test \"a95a95a8/56a56a54\" \"56a56a54\"\n  test \"104fc820/80201010\" \"ea30345c\"\n  test \"4a940214/05000008\" \"05000008\"\n  test \"00908000/05000200\" \"ff043f48\"\n  test \"00c48c00/fe1861fc\" \"ff3873fc\"\n  test \"00000004/81020400\" \"fffffff0\"\n  test \"111028b0/40021100\" \"e08fd744\"\n  test \"6808490c/01959000\" \"17f7b650\"\n  test \"30821004/81014040\" \"c75de5f8\"\n  test \"0004c810/10003100\" \"fe4937c4\"\n  test \"12022020/88200000\" \"edf08208\"\n  test \"2aa92098/01160000\" \"45165964\"\n  test \"00242940/10010004\" \"fc43c43c\"\n  test \"483c2120/11004c00\" \"33c3de10\"\n  test \"10140140/44004a04\" \"eda3fe3c\"\n  test \"0c901d38/72602200\" \"f36da280\"\n  0\n```", "tags": ["F#", "\u3069\u3046\u66f8\u304f", "yhpg"]}