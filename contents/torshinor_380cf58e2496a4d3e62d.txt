{"context": " More than 1 year has passed since last update.Getting started with GCD in MacRuby & Rubymotion - Mateus - Welt\u3092\u8aad\u3093\u3060\u969b\u306e\u30e1\u30e2\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e1\u30a4\u30f3\u306e\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\nDispatch::Queue.main\n\n\n\u4e26\u5217\u51e6\u7406\u7528\u306e\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\nDispatch::Queue.concurrent\nDispatch::Queue.concurrent('hoge')\n\n\u512a\u5148\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\nDispatch::Queue.concurrent(priority=:default)\nDispatch::Queue.concurrent(priority=:low)\nDispatch::Queue.concurrent(priority=:high)\n\n\n\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3055\u308c\u305f\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\n\u81ea\u8eab\u3067\u5b9f\u884c\u9806\u5e8f\u306a\u3069\u304c\u4e88\u60f3\u3067\u304d\u308b\u5834\u5408\u306b\u4f7f\u3046\uff1f\nDispatch::Queue.new('hoge')\n\n\n\u540c\u671f\u3067\u51e6\u7406\u3092\u5b9f\u884c\nDispatch::Queue.concurrent.sync {p 'hoge'}\n\n\n\u975e\u540c\u671f\u3067\u51e6\u7406\u3092\u5b9f\u884c\nDispatch::Queue.concurrent.async {p 'hoge'}\n\n\n\u6307\u5b9a\u6642\u9593\u5f8c\u306b\u51e6\u7406\u3092\u5b9f\u884c\n# .0\u3092\u4ed8\u3051\u306a\u304f\u3066\u3082\u52d5\u3044\u305f\n# \u5358\u4f4d\u306f\u79d2\nDispatch::Queue.concurrent.after(5.0) {p 'hoge'}\n\n\n\u6307\u5b9a\u56de\u6570\u5206\u51e6\u7406\u3092\u5b9f\u884c\nDispatch::Queue.concurrent.apply(5) {|i| p i}\n\n\n\u30ad\u30e5\u30fc\u3092\u64cd\u4f5c\u3059\u308b\nq = Dispatch::Queue.concurrent('hoge')\n# \u4e00\u6642\u505c\u6b62\nq.suspend!\np q.suspended?\n# => true\n# \u518d\u958b\nq.resume!\np q.suspended?\n# => false\n\n\n\n\u8907\u6570\u306e\u30ad\u30e5\u30fc\u306e\u7d42\u4e86\u3092\u5f85\u3064\n\u30ad\u30e5\u30fc\u3092\u7ba1\u7406\u3059\u308bDipatch::Group\u306a\u308b\u30af\u30e9\u30b9\u306e\u914d\u4e0b\u306bDispatch::Queue\u3092\u6240\u5c5e\u3055\u305b\u308b\u611f\u3058\u3002\ngroup = Dispatch::Group.new\nhoge = Dispatch::Queue.concurrent\nfuga = Dispatch::Queue.concurrent\n\nhoge.async(group) { p 'hoge'}\nfuga.async(group) { p 'fuga'}\n\ngroup.wait\n\n\n\u30ad\u30e5\u30fc\u306e\u7d42\u4e86\u6642\u306b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\ngroup = Dispatch::Group.new\nhoge = Dispatch::Queue.concurrent\n\nhoge.async(group) { p 'hoge'}\ngroup.notify(hoge) {p 'hoge complete'}\n\n\nwait\u3068notify\u3092\u540c\u6642\u306b\u4f7f\u3063\u305f\u5834\u5408\u3001wait\u4ee5\u964d\u306e\u51e6\u7406\u306e\u5f8c\u3001notify\u3067\u6307\u5b9a\u3057\u305f\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u3066\u308b\u3063\u307d\u3044\u3051\u3069\u8a73\u7d30\u306f\u4e0d\u660e\u3002\n\nBarriers\nDancing with GCD Group and Barriers - Mateus - Welt \u306b\u3042\u308b\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u305f\u3051\u3069\u81ea\u8eab\u306e\u74b0\u5883\u3067\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u3042\u308b\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u3089\u305a\u7d50\u679c\u306f\"\"\u3060\u3063\u305f\u3002\nqueue = Dispatch::Queue.concurrent('com.company.application.task')\n@i = \"\"\nqueue.async { @i += 'a' }\nqueue.async { @i += 'b' }\nqueue.barrier_async { @i += 'c' }\np @i #=> either prints out 'abc' or 'bac'\n\n\n[Getting started with GCD in MacRuby & Rubymotion - Mateus - Welt](http://seanlilmateus.github.com/blog/2012/05/31/getting-started-with-grand-central-dispatch-in-macruby-and-rubymotion/)\u3092\u8aad\u3093\u3060\u969b\u306e\u30e1\u30e2\u3002\n\n##\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e1\u30a4\u30f3\u306e\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\n\n```ruby\nDispatch::Queue.main\n```\n\n##\u4e26\u5217\u51e6\u7406\u7528\u306e\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\n\n```ruby\nDispatch::Queue.concurrent\nDispatch::Queue.concurrent('hoge')\n```\n\n\u512a\u5148\u5ea6\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n\n```ruby\nDispatch::Queue.concurrent(priority=:default)\nDispatch::Queue.concurrent(priority=:low)\nDispatch::Queue.concurrent(priority=:high)\n```\n\n##\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3055\u308c\u305f\u30ad\u30e5\u30fc\u3092\u53d6\u5f97\n\n\u81ea\u8eab\u3067\u5b9f\u884c\u9806\u5e8f\u306a\u3069\u304c\u4e88\u60f3\u3067\u304d\u308b\u5834\u5408\u306b\u4f7f\u3046\uff1f\n\n```ruby\nDispatch::Queue.new('hoge')\n```\n\n\n##\u540c\u671f\u3067\u51e6\u7406\u3092\u5b9f\u884c\n\n```ruby\nDispatch::Queue.concurrent.sync {p 'hoge'}\n```\n\n##\u975e\u540c\u671f\u3067\u51e6\u7406\u3092\u5b9f\u884c\n\n```ruby\nDispatch::Queue.concurrent.async {p 'hoge'}\n```\n\n##\u6307\u5b9a\u6642\u9593\u5f8c\u306b\u51e6\u7406\u3092\u5b9f\u884c\n\n```ruby\n# .0\u3092\u4ed8\u3051\u306a\u304f\u3066\u3082\u52d5\u3044\u305f\n# \u5358\u4f4d\u306f\u79d2\nDispatch::Queue.concurrent.after(5.0) {p 'hoge'}\n```\n\n##\u6307\u5b9a\u56de\u6570\u5206\u51e6\u7406\u3092\u5b9f\u884c\n\n```ruby\nDispatch::Queue.concurrent.apply(5) {|i| p i}\n```\n\n##\u30ad\u30e5\u30fc\u3092\u64cd\u4f5c\u3059\u308b\n\n```ruby\nq = Dispatch::Queue.concurrent('hoge')\n# \u4e00\u6642\u505c\u6b62\nq.suspend!\np q.suspended?\n# => true\n# \u518d\u958b\nq.resume!\np q.suspended?\n# => false\n\n```\n\n##\u8907\u6570\u306e\u30ad\u30e5\u30fc\u306e\u7d42\u4e86\u3092\u5f85\u3064\n\n\u30ad\u30e5\u30fc\u3092\u7ba1\u7406\u3059\u308b``Dipatch::Group``\u306a\u308b\u30af\u30e9\u30b9\u306e\u914d\u4e0b\u306b``Dispatch::Queue``\u3092\u6240\u5c5e\u3055\u305b\u308b\u611f\u3058\u3002\n\n```ruby\ngroup = Dispatch::Group.new\nhoge = Dispatch::Queue.concurrent\nfuga = Dispatch::Queue.concurrent\n\nhoge.async(group) { p 'hoge'}\nfuga.async(group) { p 'fuga'}\n\ngroup.wait\n```\n\n##\u30ad\u30e5\u30fc\u306e\u7d42\u4e86\u6642\u306b\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\n\n```ruby\ngroup = Dispatch::Group.new\nhoge = Dispatch::Queue.concurrent\n\nhoge.async(group) { p 'hoge'}\ngroup.notify(hoge) {p 'hoge complete'}\n\n```\n\n``wait``\u3068``notify``\u3092\u540c\u6642\u306b\u4f7f\u3063\u305f\u5834\u5408\u3001``wait``\u4ee5\u964d\u306e\u51e6\u7406\u306e\u5f8c\u3001``notify``\u3067\u6307\u5b9a\u3057\u305f\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u3066\u308b\u3063\u307d\u3044\u3051\u3069\u8a73\u7d30\u306f\u4e0d\u660e\u3002\n\n##Barriers\n\n[Dancing with GCD Group and Barriers - Mateus - Welt](http://seanlilmateus.github.com/blog/2012/06/03/dancing-with-gcd-group-and-barriers/) \u306b\u3042\u308b\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u305f\u3051\u3069\u81ea\u8eab\u306e\u74b0\u5883\u3067\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u3042\u308b\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u3089\u305a\u7d50\u679c\u306f``\"\"``\u3060\u3063\u305f\u3002\n\n```ruby\nqueue = Dispatch::Queue.concurrent('com.company.application.task')\n@i = \"\"\nqueue.async { @i += 'a' }\nqueue.async { @i += 'b' }\nqueue.barrier_async { @i += 'c' }\np @i #=> either prints out 'abc' or 'bac'\n```\n\n", "tags": ["RubyMotion", "iOS"]}