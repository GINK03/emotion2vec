{"context": " More than 1 year has passed since last update.\n\n\u8aac\u660e\u3068\u304b\n\u6050\u3089\u304f\u9707\u6e90\u5730\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b - \u5f37\u706b\u3067\u9032\u3081\n\u305f\u3076\u3093\u304d\u3063\u304b\u3051\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\n\u5148\u9054\u306e\u7686\u69d8\n\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\u300d\u4e00\u89a7\n\u6b63\u76f4Groovy\u7d20\u4eba\u3067\u3059\u3086\u3048\u3001\u3061\u3063\u3068\u3082Groovy\u3089\u3057\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3054\u5bb9\u8d66\u3092\u3002\n# \u5b9f\u306f\u6700\u521dRuby+GD\u3067\u7d44\u3093\u3067\u305f\u3051\u3069\u3082\u305f\u3082\u305f\u3057\u3066\u305f\u3089Ruby\u7248\u304c\u4e0a\u304c\u3063\u3066\u305f\u306e\u3067Groovy\u3067\u66f8\u304d\u76f4\u3057\u305f\u3068\u3044\u3046\u306e\u306f\u5185\u7dd2\u3060\n\n\u751f\u3084\u3057\u3066\u307f\u308b\n\ndrawfern.groovy\nimport java.awt.Color\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport java.util.Random\nimport javax.imageio.ImageIO\n\nclass Fern {\n  def W1x = { x, y -> 0.836 * x + 0.044 * y }\n  def W1y = { x, y -> -0.044 * x + 0.836 * y + 0.169 }\n  def W2x = { x, y -> -0.141 * x + 0.302 * y }\n  def W2y = { x, y -> 0.302 * x + 0.141 * y + 0.127 }\n  def W3x = { x, y -> 0.141 * x - 0.302 * y }\n  def W3y = { x, y -> 0.302 * x + 0.141 * y + 0.169 }\n  def W4x = { x, y -> 0 }\n  def W4y = { x, y -> 0.175337 * y }\n\n  def drawer\n  def rnd\n\n  Fern() {\n    rnd = new Random()\n  }\n\n  def f(k, x, y) {\n    if (0 < k) {\n      f(k - 1, W1x(x, y), W1y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W2x(x, y), W2y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W3x(x, y), W3y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W4x(x, y), W4y(x, y))\n    } else {\n      drawer(x, y)\n    }\n  }\n\n  def sprout(n, clos) {\n    drawer = clos\n    f(n, 0, 0)\n  }\n}\n\nclass FernCanvas {\n  def width\n  def height\n  def allowed\n  def img\n  def fernColor = new Color(0.0F, 0.5F, 0.0F)\n\n  FernCanvas(size, padding) {\n    width = size\n    height = size\n    allowed = size - padding\n    img = new BufferedImage(\n            width, height, BufferedImage.TYPE_INT_RGB)\n    def g = null\n    try {\n        g = this.img.createGraphics()\n        g.setColor(Color.WHITE)\n        g.fillRect(0, 0, width, height)\n    } finally {\n        if (g != null) {\n            g.dispose()\n        }\n    }\n  }\n\n  def plot(x, y) {\n    def plotX = (int)( x * allowed + width * 0.5)\n    def plotY = (int)( height - y * allowed)\n    img.setRGB(plotX, plotY, fernColor.getRGB())\n  }\n\n  def save_png_to(fileName) {\n    ImageIO.write(img, \"PNG\", new File(fileName));\n  }\n}\n\ndef N = 20\n\ncanvas = new FernCanvas(500, 10)\nnew Fern().sprout(N) { x, y ->\n  canvas.plot(x, y)\n}\ncanvas.save_png_to(\"fern.png\")\n\n\n\n\n\u6211\u306a\u304c\u3089\ndrawer = clos\u3000\u306e\u8fba\u308a\u304c\u306a\u3093\u304b\u30ad\u30e2\u3044\u3067\u3059orz\n# \u8aac\u660e\u3068\u304b\n\u6050\u3089\u304f\u9707\u6e90\u5730\n[\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b - \u5f37\u706b\u3067\u9032\u3081](http://d.hatena.ne.jp/nakamura001/20140505/1399316565)\n\u305f\u3076\u3093\u304d\u3063\u304b\u3051\n[\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b](http://qiita.com/woxtu/items/30aebcf15770c438d6fd)\n\u5148\u9054\u306e\u7686\u69d8\n[\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\u300d\u4e00\u89a7](http://qiita.com/qt-luigi/items/b22204c7ef73260324bd)\n\n\u6b63\u76f4Groovy\u7d20\u4eba\u3067\u3059\u3086\u3048\u3001\u3061\u3063\u3068\u3082Groovy\u3089\u3057\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3054\u5bb9\u8d66\u3092\u3002\n\n\\# \u5b9f\u306f\u6700\u521dRuby+GD\u3067\u7d44\u3093\u3067\u305f\u3051\u3069\u3082\u305f\u3082\u305f\u3057\u3066\u305f\u3089Ruby\u7248\u304c\u4e0a\u304c\u3063\u3066\u305f\u306e\u3067Groovy\u3067\u66f8\u304d\u76f4\u3057\u305f\u3068\u3044\u3046\u306e\u306f\u5185\u7dd2\u3060\n\n# \u751f\u3084\u3057\u3066\u307f\u308b\n```groovy:drawfern.groovy\nimport java.awt.Color\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport java.util.Random\nimport javax.imageio.ImageIO\n\nclass Fern {\n  def W1x = { x, y -> 0.836 * x + 0.044 * y }\n  def W1y = { x, y -> -0.044 * x + 0.836 * y + 0.169 }\n  def W2x = { x, y -> -0.141 * x + 0.302 * y }\n  def W2y = { x, y -> 0.302 * x + 0.141 * y + 0.127 }\n  def W3x = { x, y -> 0.141 * x - 0.302 * y }\n  def W3y = { x, y -> 0.302 * x + 0.141 * y + 0.169 }\n  def W4x = { x, y -> 0 }\n  def W4y = { x, y -> 0.175337 * y }\n  \n  def drawer\n  def rnd\n  \n  Fern() {\n    rnd = new Random()\n  }\n  \n  def f(k, x, y) {\n    if (0 < k) {\n      f(k - 1, W1x(x, y), W1y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W2x(x, y), W2y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W3x(x, y), W3y(x, y))\n      if (rnd.nextDouble() < 0.3)\n        f(k - 1, W4x(x, y), W4y(x, y))\n    } else {\n      drawer(x, y)\n    }\n  }\n  \n  def sprout(n, clos) {\n    drawer = clos\n    f(n, 0, 0)\n  }\n}\n\nclass FernCanvas {\n  def width\n  def height\n  def allowed\n  def img\n  def fernColor = new Color(0.0F, 0.5F, 0.0F)\n  \n  FernCanvas(size, padding) {\n    width = size\n    height = size\n    allowed = size - padding\n    img = new BufferedImage(\n            width, height, BufferedImage.TYPE_INT_RGB)\n    def g = null\n    try {\n        g = this.img.createGraphics()\n        g.setColor(Color.WHITE)\n        g.fillRect(0, 0, width, height)\n    } finally {\n        if (g != null) {\n            g.dispose()\n        }\n    }\n  }\n  \n  def plot(x, y) {\n    def plotX = (int)( x * allowed + width * 0.5)\n    def plotY = (int)( height - y * allowed)\n    img.setRGB(plotX, plotY, fernColor.getRGB())\n  }\n  \n  def save_png_to(fileName) {\n    ImageIO.write(img, \"PNG\", new File(fileName));\n  }\n}\n\ndef N = 20\n\ncanvas = new FernCanvas(500, 10)\nnew Fern().sprout(N) { x, y ->\n  canvas.plot(x, y)\n}\ncanvas.save_png_to(\"fern.png\")\n```\n\n![fern.png](https://qiita-image-store.s3.amazonaws.com/0/41893/70ca11a0-4246-b546-8d4f-46fb88bb9797.png)\n\n# \u6211\u306a\u304c\u3089\ndrawer = clos\u3000\u306e\u8fba\u308a\u304c\u306a\u3093\u304b\u30ad\u30e2\u3044\u3067\u3059orz\n", "tags": ["Groovy", "\u30b7\u30c0"]}