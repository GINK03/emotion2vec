{"context": "\n\u52d5\u4f5c\u74b0\u5883\nC++ Builder XE4\n\n\n\n\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\n\u6642\u9593\u3054\u3068\u306b\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u57fa\u3065\u304d\u3001\u6761\u4ef6\u3092ON/OFF\u3059\u308b\n\u6761\u4ef61\u306f\u4ed6\u306e\u6761\u4ef6\u3068\u540c\u6642\u767a\u751f\u3067\u304d\u306a\u3044\n\n\n\u30c6\u30fc\u30d6\u30eb\u306e\u5ba3\u8a00\u3067\u8abf\u6574\u3059\u308b\n\n\n\n\nv0.1\n\nUnit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"Unit1.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n\n/*\nv0.1 2017/01/15\n    - Timer1Timer()\u5b9f\u88c5\n    - processMyEvent()\u5b9f\u88c5\n    - kTable_conditions[], kTable_default[]\u5b9a\u7fa9\n    - [kNumCondition]\u5b9a\u7fa9\n*/\n\n\n//---------------------------------------------------------------------------\n// \u6761\u4ef6\u306e\u5b9a\u7fa9\nstatic const int kNumCondition = 3; // \u6761\u4ef6\u306e\u500b\u6570\u3002kTable_conditions[]\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3059\u308b\n\n// 3\u3064\u306e\u6761\u4ef6\n//   1\u3064\u76ee\u306f\u300c\u6392\u4ed6\u300d\n//   2\u3064\u76ee\u30013\u3064\u76ee\u306f\u300c\u975e\u6392\u4ed6\u300d(\u540c\u6642\u306b\u767a\u751f\u3057\u3066\u3088\u3044)\nstatic const int kTable_conditions[][kNumCondition] =\n{\n    // { conditions 1..3 }\n    { 1, 0, 0 }, //\n    { 0, 1, 0 }, //\n    { 0, 0, 1 }, //\n    { 0, 1, 1 }, //\n};\nstatic const int kTable_default[kNumCondition] = { 0,0,0 }; // { conditions 1..3 }\n\n//---------------------------------------------------------------------------\n//\n__fastcall TForm1::TForm1(TComponent* Owner)\n    : TForm(Owner)\n{\n    Timer1->Interval = 10000; // msec\n    Timer1->Enabled = true;\n}\n\nvoid __fastcall TForm1::processMyEvent(TDateTime currentDt)\n{\n#if 1 // test\n    int curmin = SecondOf(currentDt) / 10; // 10\u79d2\u3054\u3068\n#else\n    int curmin = MinuteOf(currentDt); // 1\u5206\u3054\u3068\n#endif\n    int tbl[kNumCondition];\n    int sizeCond = sizeof(kTable_conditions) / sizeof(tbl);\n\n    // 1. set conditions\n    if (curmin < sizeCond) {\n        for(int idx=0; idx<kNumCondition; idx++) {\n            tbl[idx] = kTable_conditions[curmin][idx];\n        }\n    } else {\n        for(int idx=0; idx<kNumCondition; idx++) {\n            tbl[idx] = kTable_default[idx];\n        }\n    }\n\n    // 2. debug print\n    String msg = L\"\";\n    for(int idx=0; idx<kNumCondition; idx++) {\n        msg = msg + IntToStr(tbl[idx]);\n    }\n    msg = msg + L\" @ \" + DateTimeToStr(currentDt);\n    OutputDebugString(msg.c_str());\n}\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n    processMyEvent(Now());\n}\n//---------------------------------------------------------------------------\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/15 9:19:29 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/15 9:19:39 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/15 9:19:49 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/15 9:19:59 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/15 9:20:09 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/15 9:20:19 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/15 9:20:29 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/15 9:20:39 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\n\n\nv0.2\n\u51e6\u7406\u3092\u5916\u90e8\u30af\u30e9\u30b9\u306b\u5909\u66f4\u3057\u3066\u307f\u305f\u3002\n\n\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\n\nUnit1.cpp, .h : \u30b5\u30f3\u30d7\u30eb\u7528\u30d5\u30a9\u30fc\u30e0\nUtilDummyConditionsHandler.cpp, .h : \u51e6\u7406\u306e\u30e1\u30a4\u30f3\nUtilDummyConditionsTable.h : \u6761\u4ef6\u306e\u5b9a\u7fa9\u7528\u30d8\u30c3\u30c0\n\n\nUtilDummyConditionsTable.h\n\nUtilDummyConditionsTable.h\n#ifndef UtilDummyConditionsTableH\n#define UtilDummyConditionsTableH\n\n//---------------------------------------------------------------------------\n// \u6761\u4ef6\u306e\u5b9a\u7fa9\n\n// prefix: UDCT(Util Dummy Condition Table)\n\n/*\nv0.1 2017/01/15\n    - kUDCT_Table_default[]\u5b9a\u7fa9\n    - kUDCT_table_conditions[][]\u5b9a\u7fa9\n    - [kUDCT_numDummyConditions]\u5b9a\u7fa9\n*/\n\n\nstatic const int kUDCT_numDummyConditions = 3; // \u6761\u4ef6\u306e\u500b\u6570\u3002kTable_conditions[]\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3059\u308b\n\n// \u4f8b\u3068\u3057\u3066\u3001\n// 3\u3064\u306e\u6761\u4ef6\n//   1\u3064\u76ee\u306f\u300c\u6392\u4ed6\u300d\n//   2\u3064\u76ee\u30013\u3064\u76ee\u306f\u300c\u975e\u6392\u4ed6\u300d(\u540c\u6642\u306b\u767a\u751f\u3057\u3066\u3088\u3044)\nstatic const int kUDCT_table_conditions[][kUDCT_numDummyConditions] =\n{\n    // { conditions 1..3 }\n    { 1, 0, 0 }, //\n    { 0, 1, 0 }, //\n    { 0, 0, 1 }, //\n    { 0, 1, 1 }, //\n};\nstatic const int kUDCT_Table_default[kUDCT_numDummyConditions] = { 0,0,0 }; // { conditions 1..3 }\n\n\n#endif\n\n\n\nUtilDummyConditionsHandler.h\n\nUtilDummyConditionsHandler.h\n//---------------------------------------------------------------------------\n\n#ifndef UtilDummyConditionsHandlerH\n#define UtilDummyConditionsHandlerH\n//---------------------------------------------------------------------------\n\n#include <System.hpp>\n\n#include \"UtilDummyConditionsTable.h\"\n\n/*\n\u8907\u6570\u306e\u6761\u4ef6\u306eTrue/False\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u6642\u523b\u306b\u57fa\u3065\u304fTrue/False\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3067\u306e\u4f7f\u7528\u3067\u306a\u304f\u3001\u30c7\u30d0\u30c3\u30b0\u3067\u306e\u4f7f\u7528\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3002\n*/\n\nclass CUtilDummyConditionsHandler {\nprivate:\n    int m_conditionTable[kUDCT_numDummyConditions]; // \u73fe\u5728\u306e\u6761\u4ef6\u306eTrue/False\u3092\u4fdd\u6301\u3059\u308b\n\npublic:\n    void __fastcall UpdateConditionTable(TDateTime currentDt);\n    int __fastcall GetCondition_indexOf(int idx);\n    void __fastcall CheckAllConditions(TDateTime currentDt);\n\n    // \u30c6\u30b9\u30c8\u7528\n    static void __fastcall Test_main_runner();\n\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    __fastcall CUtilDummyConditionsHandler();\n};\n\n#endif\n\n\n\nUtilDummyConditionsHandler.cpp\n\nUtilDummyConditionsHandler.cpp\n//---------------------------------------------------------------------------\n\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"UtilDummyConditionsHandler.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n\n/*\n\u6ce8\u610f: 2017/01/15\n    kTable_conditions[][]\u306a\u3069\u3092uint8_t\u578b\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u3001sizeof(kTable_conditions)\u304c48\u3067\u306a\u304f12\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n    \u305d\u306e\u305f\u3081\u3001\n      int sizeCond = sizeof(kTable_conditions) / sizeof(m_conditionTable);\n    \u304c\u6b63\u3057\u304f\u8a08\u7b97\u3055\u308c\u305a\u306b\u51e6\u7406\u304c\u5931\u6557\u3059\u308b\u3002\n*/\n\n/*\nv0.3 2017/01/15\n    - [EVERY_HOURS]\u8ffd\u52a0\n    - getTimingIndex()\u8ffd\u52a0\n    - 10\u79d2\u3054\u3068\u306e\u5224\u65ad\u3068\u5206\u3054\u3068\u306e\u5224\u65ad\u3092\u5207\u308a\u66ff\u3048\u3057\u3084\u3059\u304f\u3057\u305f\n        + Test_main_runner(): test_increaseTimer()\u4f7f\u7528\n        + UpdateConditionTable(): [kCheckInterval]\u30c1\u30a7\u30c3\u30af\u8ffd\u52a0\n        + increaseTimer()\u8ffd\u52a0\n        + UDCH_CheckInterval[]\u8ffd\u52a0\nv0.2 2017/01/15\n    - \u6761\u4ef6\u5b9a\u7fa9\u3092[UtilDummyConditionsTable.h]\u306b\u79fb\u884c\n        + \u6761\u4ef6\u306e\u5909\u66f4\u3068\u51e6\u7406\u306e\u5909\u66f4\u3092\u5206\u96e2\u3059\u308b\u305f\u3081\nv0.1 2017/01/15\n    - CheckAllConditions()\u5b9f\u88c5\n    - GetCondition_indexOf()\u5b9f\u88c5\n    - UpdateConditionTable()\u5b9f\u88c5\n    - [\u6761\u4ef6\u306e\u5b9a\u7fa9]\u8ffd\u52a0\n        + kTable_default[]\u8ffd\u52a0\n        + kTable_conditions[][]\u8ffd\u52a0\n        + [kNumCondition]\u8ffd\u52a0\n    - \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5b9f\u88c5\n*/\n\nenum UDCH_CheckInterval {\n    EVERY_10SECONDS,\n    EVERY_MINUTES,\n    EVERY_HOURS,\n};\n\n/*\nTODO:zz > \u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306b\u5fdc\u3058\u3066\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\n*/\nstatic const int kCheckInterval = EVERY_10SECONDS;\n//static const int kCheckInterval = EVERY_MINUTES;\n//static const int kCheckInterval = EVERY_HOURS;\n\n\n//---------------------------------------------------------------------------\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n__fastcall CUtilDummyConditionsHandler::CUtilDummyConditionsHandler()\n{\n    for(int idx=0; idx<kUDCT_numDummyConditions; idx++) {\n        m_conditionTable[idx] = 0;\n    }\n}\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\n\nstatic int getTimingIndex(TDateTime currentDt)\n{\n    // 1. \u30a4\u30f3\u30c7\u30c3\u30af\u30b9curmin\u306e\u8a08\u7b97\n    switch(kCheckInterval) {\n    case EVERY_10SECONDS:\n        return SecondOf(currentDt) / 10; // 10\u79d2\u3054\u3068\n    case EVERY_MINUTES:\n        return MinuteOf(currentDt);\n    case EVERY_HOURS:\n        return HourOf(currentDt);\n    default:\n        return -1; // error\n    }\n}\nstatic TDateTime increaseTimer(TDateTime curDt)\n{\n    switch(kCheckInterval) {\n    case EVERY_10SECONDS:\n        return IncSecond(curDt, 10);\n    case EVERY_MINUTES:\n        return IncMinute(curDt, 1);\n    case EVERY_HOURS:\n        return IncHour(curDt, 1);\n    default:\n        return curDt; // error\n    }\n}\n\n//---------------------------------------------------------------------------\n//\nvoid __fastcall CUtilDummyConditionsHandler::UpdateConditionTable(TDateTime currentDt)\n{\n    int tmidx; // timing index\n    tmidx = getTimingIndex(currentDt);\n    if (tmidx < 0) {\n        return; // error\n    }\n\n    // set conditions\n    int sizeCond = sizeof(kUDCT_table_conditions) / sizeof(m_conditionTable);\n    if (tmidx < sizeCond) {\n        for(int ci=0; ci<kUDCT_numDummyConditions; ci++) { // ci: condition index\n            m_conditionTable[ci] = kUDCT_table_conditions[tmidx][ci];\n        }\n    } else {\n        for(int ci=0; ci<kUDCT_numDummyConditions; ci++) { // ci: condition index\n            m_conditionTable[ci] = kUDCT_Table_default[ci];\n        }\n    }\n}\n\nint __fastcall CUtilDummyConditionsHandler::GetCondition_indexOf(int idx)\n{\n    int sizeCond = sizeof(kUDCT_table_conditions) / sizeof(m_conditionTable);\n\n    if (idx >= sizeCond) {\n        return false; // error\n    }\n\n    return m_conditionTable[idx];\n}\n\nvoid __fastcall CUtilDummyConditionsHandler::CheckAllConditions(TDateTime currentDt)\n{\n    // debug print\n    String msg = L\"\";\n    for(int idx=0; idx<kUDCT_numDummyConditions; idx++) {\n        msg = msg + IntToStr(GetCondition_indexOf(idx));\n    }\n    msg = msg + L\" @ \" + DateTimeToStr(currentDt);\n    OutputDebugString(msg.c_str());\n}\n\n//---------------------------------------------------------------------------\n// \u30c6\u30b9\u30c8\u7528\u95a2\u6570\n//\n/* static */void __fastcall CUtilDummyConditionsHandler::Test_main_runner()\n{\n    CUtilDummyConditionsHandler *m_conditionTable;\n\n    m_conditionTable = new CUtilDummyConditionsHandler();\n\n    TDateTime curdt = VarToDateTime(\"2017/01/15 23:59:55\"); // L\u30de\u30af\u30ed\u306b\u3057\u306a\u3044\u3053\u3068 (VarToDateTime\u3068L\u30de\u30af\u30ed\u3067\u300c\u306f\u307e\u308b\u300d\u305f\u3081)\n    for(int loop=0; loop < 8; loop++) { // 8: arbitrary\n        curdt = increaseTimer(curdt);\n\n        m_conditionTable->UpdateConditionTable(curdt);\n\n        m_conditionTable->CheckAllConditions(curdt);\n\n        if (false) {\n            /*\n            \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066True/False\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n            */\n            bool cond1 = m_conditionTable->GetCondition_indexOf(/*idx=*/0);\n            bool cond2 = m_conditionTable->GetCondition_indexOf(/*idx=*/1);\n            /*\n            \u7528\u9014\u3068\u3057\u3066\u306f\u3001isFlag1On()\u306e\u3088\u3046\u306a\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3067\u4f7f\u3046\u95a2\u6570\u5185\u306b\u304a\u3044\u3066\n            \u30c7\u30d0\u30c3\u30b0\u6642\u306e\u307fGetCondition_indexOf()\u3092\u547c\u3073\u51fa\u3057\u3001\u7279\u5b9a\u306e\u6642\u523b\u306b\u6761\u4ef6\u3092\u6210\u7acb\u3055\u305b\u308b\u3002\n            */\n        }\n    }\n\n    delete m_conditionTable;\n}\n\n\n\nUnit1.h\n\nUnit1.h\n//---------------------------------------------------------------------------\n\n#ifndef Unit1H\n#define Unit1H\n//---------------------------------------------------------------------------\n#include <System.Classes.hpp>\n#include <Vcl.Controls.hpp>\n#include <Vcl.StdCtrls.hpp>\n#include <Vcl.Forms.hpp>\n#include <Vcl.ExtCtrls.hpp>\n\n#include \"UtilDummyConditionsHandler.h\"\n//---------------------------------------------------------------------------\nclass TForm1 : public TForm\n{\n__published:    // IDE \u3067\u7ba1\u7406\u3055\u308c\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n    TTimer *Timer1;\n    TButton *Button1;\n    void __fastcall Timer1Timer(TObject *Sender);\n    void __fastcall FormShow(TObject *Sender);\n    void __fastcall FormClose(TObject *Sender, TCloseAction &Action);\n    void __fastcall Button1Click(TObject *Sender);\nprivate:    // \u30e6\u30fc\u30b6\u30fc\u5ba3\u8a00\n    CUtilDummyConditionsHandler *m_dummyCondition; // \u6642\u523b\u306b\u57fa\u3065\u304f\u6761\u4ef6\u306eON/OFF\u306b\u4f7f\u3046\n\n    bool __fastcall isCondition1(void);\n    bool __fastcall isCondition2(void);\npublic:     // \u30e6\u30fc\u30b6\u30fc\u5ba3\u8a00\n    __fastcall TForm1(TComponent* Owner);\n};\n//---------------------------------------------------------------------------\nextern PACKAGE TForm1 *Form1;\n//---------------------------------------------------------------------------\n#endif\n\n\n\nUnit1.cpp\n\nUnit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"Unit1.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n\n/*\nv0.3 2017/01/15\n    - UtilDummyConditionsHandler:v0.3\n    - UtilDummyConditionsHandler:v0.2\nv0.2 2017/01/15\n    - isCondition2()\u5b9f\u88c5\n    - isCondition1()\u5b9f\u88c5\n    - [CUtilDummyConditionsHandler]\u30af\u30e9\u30b9\u306b\u4e00\u9023\u306e\u51e6\u7406\u3092\u79fb\u3057\u305f\n        + UtilDummyConditionsHandler:v0.1\n    - kTable_conditions[]\u524a\u9664\u3001kTable_default[]\u524a\u9664\n    - processMyEvent()\u524a\u9664\nv0.1 2017/01/15\n    - Timer1Timer()\u5b9f\u88c5\n    - processMyEvent()\u5b9f\u88c5\n    - kTable_conditions[], kTable_default[]\u5b9a\u7fa9\n    - [kNumCondition]\u5b9a\u7fa9\n*/\n\n//---------------------------------------------------------------------------\n//\n__fastcall TForm1::TForm1(TComponent* Owner)\n    : TForm(Owner)\n{\n    Timer1->Interval = 10000; // msec\n    Timer1->Enabled = true;\n}\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n    m_dummyCondition->UpdateConditionTable(Now());\n\n    m_dummyCondition->CheckAllConditions(Now());\n\n    if (isCondition1()) {\n        String msg = L\"Condition1 is right\";\n        OutputDebugString(msg.c_str());\n    }\n\n    if (isCondition2()) {\n        String msg = L\"Condition2 is right\";\n        OutputDebugString(msg.c_str());\n    }\n}\n//---------------------------------------------------------------------------\n// m_dummyCondition\u306enew/delete\nvoid __fastcall TForm1::FormShow(TObject *Sender)\n{\n    m_dummyCondition = new CUtilDummyConditionsHandler();\n}\nvoid __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)\n{\n    delete m_dummyCondition;\n}\n//---------------------------------------------------------------------------\n\nbool __fastcall TForm1::isCondition1(void)\n{\n    return (m_dummyCondition->GetCondition_indexOf(/*idx=*/0) > 0);\n}\n\nbool __fastcall TForm1::isCondition2(void)\n{\n    return (m_dummyCondition->GetCondition_indexOf(/*idx=*/1) > 0);\n}\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n    // \u30dc\u30bf\u30f3\u62bc\u4e0b\u6642\u306b\u4e00\u9023\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\n    CUtilDummyConditionsHandler::Test_main_runner();\n}\n//---------------------------------------------------------------------------\n\n\n\n\u5b9f\u884c\n\nUtilDummyConditionsHandler.cpp\u306estatic const int kCheckInterval = EVERY_10SECONDS;\u3060\u3051\u3092\u30a2\u30f3\u30b3\u30e1\u30f3\u30c8\u3059\u308b\nUnit1\u306eButton\u3092\u62bc\u3059\n\n\n\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:00:05 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:00:15 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 0:00:25 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 0:00:35 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:00:45 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:00:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:01:05 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:01:15 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\n\n\u540c\u69d8\u306b[kCheckInterval]\u3092EVERY_MINUTES\u3084EVERY_HOURS\u306b\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\n\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:00:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:01:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 0:02:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 0:03:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:04:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:05:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:06:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:07:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\n\n\n\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 1:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 2:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 3:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 4:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 5:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 6:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 7:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\n\n\n\u88dc\u8db3\n(\u8ffd\u8a18 2017/01/15)\nC++11\u306b\u304a\u3044\u3066\u3001\u5404\u6b21\u5143\u3067\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3001\u304a\u3088\u3073\u3001\u914d\u5217\u5168\u4f53\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u8a73\u3057\u3044\u8a18\u4e8b\u3092\u7528\u610f\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://qiita.com/SaitoAtsushi/items/ee17466c464fb7a270d2\n\u4e0a\u306ev0.2\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3053\u308c\u3089\u306f\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nC++ Builder XE4\n```\n\n- \u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\n- \u6642\u9593\u3054\u3068\u306b\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u57fa\u3065\u304d\u3001\u6761\u4ef6\u3092ON/OFF\u3059\u308b\n- \u6761\u4ef61\u306f\u4ed6\u306e\u6761\u4ef6\u3068\u540c\u6642\u767a\u751f\u3067\u304d\u306a\u3044\n  - \u30c6\u30fc\u30d6\u30eb\u306e\u5ba3\u8a00\u3067\u8abf\u6574\u3059\u308b\n\n## v0.1\n\n```Unit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"Unit1.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n\n/*\nv0.1 2017/01/15\n\t- Timer1Timer()\u5b9f\u88c5\n\t- processMyEvent()\u5b9f\u88c5\n\t- kTable_conditions[], kTable_default[]\u5b9a\u7fa9\n\t- [kNumCondition]\u5b9a\u7fa9\n*/\n\n\n//---------------------------------------------------------------------------\n// \u6761\u4ef6\u306e\u5b9a\u7fa9\nstatic const int kNumCondition = 3; // \u6761\u4ef6\u306e\u500b\u6570\u3002kTable_conditions[]\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3059\u308b\n\n// 3\u3064\u306e\u6761\u4ef6\n//   1\u3064\u76ee\u306f\u300c\u6392\u4ed6\u300d\n//   2\u3064\u76ee\u30013\u3064\u76ee\u306f\u300c\u975e\u6392\u4ed6\u300d(\u540c\u6642\u306b\u767a\u751f\u3057\u3066\u3088\u3044)\nstatic const int kTable_conditions[][kNumCondition] =\n{\n\t// { conditions 1..3 }\n\t{ 1, 0, 0 }, //\n\t{ 0, 1, 0 }, //\n\t{ 0, 0, 1 }, //\n\t{ 0, 1, 1 }, //\n};\nstatic const int kTable_default[kNumCondition] = { 0,0,0 }; // { conditions 1..3 }\n\n//---------------------------------------------------------------------------\n//\n__fastcall TForm1::TForm1(TComponent* Owner)\n\t: TForm(Owner)\n{\n\tTimer1->Interval = 10000; // msec\n\tTimer1->Enabled = true;\n}\n\nvoid __fastcall TForm1::processMyEvent(TDateTime currentDt)\n{\n#if 1 // test\n\tint curmin = SecondOf(currentDt) / 10; // 10\u79d2\u3054\u3068\n#else\n\tint curmin = MinuteOf(currentDt); // 1\u5206\u3054\u3068\n#endif\n\tint tbl[kNumCondition];\n\tint sizeCond = sizeof(kTable_conditions) / sizeof(tbl);\n\n\t// 1. set conditions\n\tif (curmin < sizeCond) {\n\t\tfor(int idx=0; idx<kNumCondition; idx++) {\n\t\t\ttbl[idx] = kTable_conditions[curmin][idx];\n\t\t}\n\t} else {\n\t\tfor(int idx=0; idx<kNumCondition; idx++) {\n\t\t\ttbl[idx] = kTable_default[idx];\n\t\t}\n\t}\n\n\t// 2. debug print\n\tString msg = L\"\";\n\tfor(int idx=0; idx<kNumCondition; idx++) {\n\t\tmsg = msg + IntToStr(tbl[idx]);\n\t}\n\tmsg = msg + L\" @ \" + DateTimeToStr(currentDt);\n\tOutputDebugString(msg.c_str());\n}\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n\tprocessMyEvent(Now());\n}\n//---------------------------------------------------------------------------\n```\n\n```txt:\u5b9f\u884c\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/15 9:19:29 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/15 9:19:39 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/15 9:19:49 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/15 9:19:59 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/15 9:20:09 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/15 9:20:19 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/15 9:20:29 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/15 9:20:39 \u30d7\u30ed\u30bb\u30b9 Project1.exe (4064)\n```\n\n## v0.2\n\n\u51e6\u7406\u3092\u5916\u90e8\u30af\u30e9\u30b9\u306b\u5909\u66f4\u3057\u3066\u307f\u305f\u3002\n\n### \u95a2\u9023\u30d5\u30a1\u30a4\u30eb\n\n- Unit1.cpp, .h : \u30b5\u30f3\u30d7\u30eb\u7528\u30d5\u30a9\u30fc\u30e0\n- UtilDummyConditionsHandler.cpp, .h : \u51e6\u7406\u306e\u30e1\u30a4\u30f3\n- UtilDummyConditionsTable.h : \u6761\u4ef6\u306e\u5b9a\u7fa9\u7528\u30d8\u30c3\u30c0\n\n### UtilDummyConditionsTable.h\n\n```UtilDummyConditionsTable.h\n#ifndef UtilDummyConditionsTableH\n#define UtilDummyConditionsTableH\n\n//---------------------------------------------------------------------------\n// \u6761\u4ef6\u306e\u5b9a\u7fa9\n\n// prefix: UDCT(Util Dummy Condition Table)\n\n/*\nv0.1 2017/01/15\n\t- kUDCT_Table_default[]\u5b9a\u7fa9\n\t- kUDCT_table_conditions[][]\u5b9a\u7fa9\n\t- [kUDCT_numDummyConditions]\u5b9a\u7fa9\n*/\n\n\nstatic const int kUDCT_numDummyConditions = 3; // \u6761\u4ef6\u306e\u500b\u6570\u3002kTable_conditions[]\u306b\u5408\u308f\u305b\u3066\u6307\u5b9a\u3059\u308b\n\n// \u4f8b\u3068\u3057\u3066\u3001\n// 3\u3064\u306e\u6761\u4ef6\n//   1\u3064\u76ee\u306f\u300c\u6392\u4ed6\u300d\n//   2\u3064\u76ee\u30013\u3064\u76ee\u306f\u300c\u975e\u6392\u4ed6\u300d(\u540c\u6642\u306b\u767a\u751f\u3057\u3066\u3088\u3044)\nstatic const int kUDCT_table_conditions[][kUDCT_numDummyConditions] =\n{\n\t// { conditions 1..3 }\n\t{ 1, 0, 0 }, //\n\t{ 0, 1, 0 }, //\n\t{ 0, 0, 1 }, //\n\t{ 0, 1, 1 }, //\n};\nstatic const int kUDCT_Table_default[kUDCT_numDummyConditions] = { 0,0,0 }; // { conditions 1..3 }\n\n\n#endif\n```\n\n### UtilDummyConditionsHandler.h\n\n```UtilDummyConditionsHandler.h\n//---------------------------------------------------------------------------\n\n#ifndef UtilDummyConditionsHandlerH\n#define UtilDummyConditionsHandlerH\n//---------------------------------------------------------------------------\n\n#include <System.hpp>\n\n#include \"UtilDummyConditionsTable.h\"\n\n/*\n\u8907\u6570\u306e\u6761\u4ef6\u306eTrue/False\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u6642\u523b\u306b\u57fa\u3065\u304fTrue/False\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3067\u306e\u4f7f\u7528\u3067\u306a\u304f\u3001\u30c7\u30d0\u30c3\u30b0\u3067\u306e\u4f7f\u7528\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3002\n*/\n\nclass CUtilDummyConditionsHandler {\nprivate:\n\tint m_conditionTable[kUDCT_numDummyConditions]; // \u73fe\u5728\u306e\u6761\u4ef6\u306eTrue/False\u3092\u4fdd\u6301\u3059\u308b\n\npublic:\n\tvoid __fastcall UpdateConditionTable(TDateTime currentDt);\n\tint __fastcall GetCondition_indexOf(int idx);\n\tvoid __fastcall CheckAllConditions(TDateTime currentDt);\n\n\t// \u30c6\u30b9\u30c8\u7528\n\tstatic void __fastcall Test_main_runner();\n\n\t// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t__fastcall CUtilDummyConditionsHandler();\n};\n\n#endif\n```\n\n### UtilDummyConditionsHandler.cpp\n\n```UtilDummyConditionsHandler.cpp\n//---------------------------------------------------------------------------\n\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"UtilDummyConditionsHandler.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n\n/*\n\u6ce8\u610f: 2017/01/15\n\tkTable_conditions[][]\u306a\u3069\u3092uint8_t\u578b\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u3001sizeof(kTable_conditions)\u304c48\u3067\u306a\u304f12\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\t\u305d\u306e\u305f\u3081\u3001\n\t  int sizeCond = sizeof(kTable_conditions) / sizeof(m_conditionTable);\n\t\u304c\u6b63\u3057\u304f\u8a08\u7b97\u3055\u308c\u305a\u306b\u51e6\u7406\u304c\u5931\u6557\u3059\u308b\u3002\n*/\n\n/*\nv0.3 2017/01/15\n\t- [EVERY_HOURS]\u8ffd\u52a0\n\t- getTimingIndex()\u8ffd\u52a0\n\t- 10\u79d2\u3054\u3068\u306e\u5224\u65ad\u3068\u5206\u3054\u3068\u306e\u5224\u65ad\u3092\u5207\u308a\u66ff\u3048\u3057\u3084\u3059\u304f\u3057\u305f\n\t\t+ Test_main_runner(): test_increaseTimer()\u4f7f\u7528\n\t\t+ UpdateConditionTable(): [kCheckInterval]\u30c1\u30a7\u30c3\u30af\u8ffd\u52a0\n\t\t+ increaseTimer()\u8ffd\u52a0\n\t\t+ UDCH_CheckInterval[]\u8ffd\u52a0\nv0.2 2017/01/15\n\t- \u6761\u4ef6\u5b9a\u7fa9\u3092[UtilDummyConditionsTable.h]\u306b\u79fb\u884c\n\t\t+ \u6761\u4ef6\u306e\u5909\u66f4\u3068\u51e6\u7406\u306e\u5909\u66f4\u3092\u5206\u96e2\u3059\u308b\u305f\u3081\nv0.1 2017/01/15\n\t- CheckAllConditions()\u5b9f\u88c5\n\t- GetCondition_indexOf()\u5b9f\u88c5\n\t- UpdateConditionTable()\u5b9f\u88c5\n\t- [\u6761\u4ef6\u306e\u5b9a\u7fa9]\u8ffd\u52a0\n\t\t+ kTable_default[]\u8ffd\u52a0\n\t\t+ kTable_conditions[][]\u8ffd\u52a0\n\t\t+ [kNumCondition]\u8ffd\u52a0\n\t- \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5b9f\u88c5\n*/\n\nenum UDCH_CheckInterval {\n\tEVERY_10SECONDS,\n\tEVERY_MINUTES,\n\tEVERY_HOURS,\n};\n\n/*\nTODO:zz > \u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30bf\u30fc\u30d0\u30eb\u306b\u5fdc\u3058\u3066\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\n*/\nstatic const int kCheckInterval = EVERY_10SECONDS;\n//static const int kCheckInterval = EVERY_MINUTES;\n//static const int kCheckInterval = EVERY_HOURS;\n\n\n//---------------------------------------------------------------------------\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n__fastcall CUtilDummyConditionsHandler::CUtilDummyConditionsHandler()\n{\n\tfor(int idx=0; idx<kUDCT_numDummyConditions; idx++) {\n\t\tm_conditionTable[idx] = 0;\n\t}\n}\n//---------------------------------------------------------------------------\n// \u30d5\u30a1\u30a4\u30eb\u30b9\u30b3\u30fc\u30d7static\u95a2\u6570\n\nstatic int getTimingIndex(TDateTime currentDt)\n{\n\t// 1. \u30a4\u30f3\u30c7\u30c3\u30af\u30b9curmin\u306e\u8a08\u7b97\n\tswitch(kCheckInterval) {\n\tcase EVERY_10SECONDS:\n\t\treturn SecondOf(currentDt) / 10; // 10\u79d2\u3054\u3068\n\tcase EVERY_MINUTES:\n\t\treturn MinuteOf(currentDt);\n\tcase EVERY_HOURS:\n\t\treturn HourOf(currentDt);\n\tdefault:\n\t\treturn -1; // error\n\t}\n}\nstatic TDateTime increaseTimer(TDateTime curDt)\n{\n\tswitch(kCheckInterval) {\n\tcase EVERY_10SECONDS:\n\t\treturn IncSecond(curDt, 10);\n\tcase EVERY_MINUTES:\n\t\treturn IncMinute(curDt, 1);\n\tcase EVERY_HOURS:\n\t\treturn IncHour(curDt, 1);\n\tdefault:\n\t\treturn curDt; // error\n\t}\n}\n\n//---------------------------------------------------------------------------\n//\nvoid __fastcall CUtilDummyConditionsHandler::UpdateConditionTable(TDateTime currentDt)\n{\n\tint tmidx; // timing index\n\ttmidx = getTimingIndex(currentDt);\n\tif (tmidx < 0) {\n        return; // error\n\t}\n\n\t// set conditions\n\tint sizeCond = sizeof(kUDCT_table_conditions) / sizeof(m_conditionTable);\n\tif (tmidx < sizeCond) {\n\t\tfor(int ci=0; ci<kUDCT_numDummyConditions; ci++) { // ci: condition index\n\t\t\tm_conditionTable[ci] = kUDCT_table_conditions[tmidx][ci];\n\t\t}\n\t} else {\n\t\tfor(int ci=0; ci<kUDCT_numDummyConditions; ci++) { // ci: condition index\n\t\t\tm_conditionTable[ci] = kUDCT_Table_default[ci];\n\t\t}\n\t}\n}\n\nint __fastcall CUtilDummyConditionsHandler::GetCondition_indexOf(int idx)\n{\n\tint sizeCond = sizeof(kUDCT_table_conditions) / sizeof(m_conditionTable);\n\n\tif (idx >= sizeCond) {\n\t\treturn false; // error\n\t}\n\n\treturn m_conditionTable[idx];\n}\n\nvoid __fastcall CUtilDummyConditionsHandler::CheckAllConditions(TDateTime currentDt)\n{\n\t// debug print\n\tString msg = L\"\";\n\tfor(int idx=0; idx<kUDCT_numDummyConditions; idx++) {\n\t\tmsg = msg + IntToStr(GetCondition_indexOf(idx));\n\t}\n\tmsg = msg + L\" @ \" + DateTimeToStr(currentDt);\n\tOutputDebugString(msg.c_str());\n}\n\n//---------------------------------------------------------------------------\n// \u30c6\u30b9\u30c8\u7528\u95a2\u6570\n//\n/* static */void __fastcall CUtilDummyConditionsHandler::Test_main_runner()\n{\n\tCUtilDummyConditionsHandler *m_conditionTable;\n\n\tm_conditionTable = new CUtilDummyConditionsHandler();\n\n\tTDateTime curdt = VarToDateTime(\"2017/01/15 23:59:55\"); // L\u30de\u30af\u30ed\u306b\u3057\u306a\u3044\u3053\u3068 (VarToDateTime\u3068L\u30de\u30af\u30ed\u3067\u300c\u306f\u307e\u308b\u300d\u305f\u3081)\n\tfor(int loop=0; loop < 8; loop++) { // 8: arbitrary\n\t\tcurdt = increaseTimer(curdt);\n\n\t\tm_conditionTable->UpdateConditionTable(curdt);\n\n\t\tm_conditionTable->CheckAllConditions(curdt);\n\n\t\tif (false) {\n\t\t\t/*\n\t\t\t\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066True/False\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\t\t\t*/\n\t\t\tbool cond1 = m_conditionTable->GetCondition_indexOf(/*idx=*/0);\n\t\t\tbool cond2 = m_conditionTable->GetCondition_indexOf(/*idx=*/1);\n\t\t\t/*\n\t\t\t\u7528\u9014\u3068\u3057\u3066\u306f\u3001isFlag1On()\u306e\u3088\u3046\u306a\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3067\u4f7f\u3046\u95a2\u6570\u5185\u306b\u304a\u3044\u3066\n\t\t\t\u30c7\u30d0\u30c3\u30b0\u6642\u306e\u307fGetCondition_indexOf()\u3092\u547c\u3073\u51fa\u3057\u3001\u7279\u5b9a\u306e\u6642\u523b\u306b\u6761\u4ef6\u3092\u6210\u7acb\u3055\u305b\u308b\u3002\n\t\t\t*/\n\t\t}\n\t}\n\n\tdelete m_conditionTable;\n}\n```\n\n### Unit1.h\n\n```Unit1.h\n//---------------------------------------------------------------------------\n\n#ifndef Unit1H\n#define Unit1H\n//---------------------------------------------------------------------------\n#include <System.Classes.hpp>\n#include <Vcl.Controls.hpp>\n#include <Vcl.StdCtrls.hpp>\n#include <Vcl.Forms.hpp>\n#include <Vcl.ExtCtrls.hpp>\n\n#include \"UtilDummyConditionsHandler.h\"\n//---------------------------------------------------------------------------\nclass TForm1 : public TForm\n{\n__published:\t// IDE \u3067\u7ba1\u7406\u3055\u308c\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n\tTTimer *Timer1;\n\tTButton *Button1;\n\tvoid __fastcall Timer1Timer(TObject *Sender);\n\tvoid __fastcall FormShow(TObject *Sender);\n\tvoid __fastcall FormClose(TObject *Sender, TCloseAction &Action);\n\tvoid __fastcall Button1Click(TObject *Sender);\nprivate:\t// \u30e6\u30fc\u30b6\u30fc\u5ba3\u8a00\n\tCUtilDummyConditionsHandler *m_dummyCondition; // \u6642\u523b\u306b\u57fa\u3065\u304f\u6761\u4ef6\u306eON/OFF\u306b\u4f7f\u3046\n\n\tbool __fastcall isCondition1(void);\n\tbool __fastcall isCondition2(void);\npublic:\t\t// \u30e6\u30fc\u30b6\u30fc\u5ba3\u8a00\n\t__fastcall TForm1(TComponent* Owner);\n};\n//---------------------------------------------------------------------------\nextern PACKAGE TForm1 *Form1;\n//---------------------------------------------------------------------------\n#endif\n```\n\n### Unit1.cpp\n\n```Unit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include <DateUtils.hpp>\n#include \"Unit1.h\"\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n\n/*\nv0.3 2017/01/15\n\t- UtilDummyConditionsHandler:v0.3\n\t- UtilDummyConditionsHandler:v0.2\nv0.2 2017/01/15\n\t- isCondition2()\u5b9f\u88c5\n\t- isCondition1()\u5b9f\u88c5\n\t- [CUtilDummyConditionsHandler]\u30af\u30e9\u30b9\u306b\u4e00\u9023\u306e\u51e6\u7406\u3092\u79fb\u3057\u305f\n\t\t+ UtilDummyConditionsHandler:v0.1\n\t- kTable_conditions[]\u524a\u9664\u3001kTable_default[]\u524a\u9664\n\t- processMyEvent()\u524a\u9664\nv0.1 2017/01/15\n\t- Timer1Timer()\u5b9f\u88c5\n\t- processMyEvent()\u5b9f\u88c5\n\t- kTable_conditions[], kTable_default[]\u5b9a\u7fa9\n\t- [kNumCondition]\u5b9a\u7fa9\n*/\n\n//---------------------------------------------------------------------------\n//\n__fastcall TForm1::TForm1(TComponent* Owner)\n\t: TForm(Owner)\n{\n\tTimer1->Interval = 10000; // msec\n\tTimer1->Enabled = true;\n}\n\nvoid __fastcall TForm1::Timer1Timer(TObject *Sender)\n{\n\tm_dummyCondition->UpdateConditionTable(Now());\n\n\tm_dummyCondition->CheckAllConditions(Now());\n\n\tif (isCondition1()) {\n\t\tString msg = L\"Condition1 is right\";\n\t\tOutputDebugString(msg.c_str());\n\t}\n\n\tif (isCondition2()) {\n\t\tString msg = L\"Condition2 is right\";\n\t\tOutputDebugString(msg.c_str());\n\t}\n}\n//---------------------------------------------------------------------------\n// m_dummyCondition\u306enew/delete\nvoid __fastcall TForm1::FormShow(TObject *Sender)\n{\n\tm_dummyCondition = new CUtilDummyConditionsHandler();\n}\nvoid __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)\n{\n\tdelete m_dummyCondition;\n}\n//---------------------------------------------------------------------------\n\nbool __fastcall TForm1::isCondition1(void)\n{\n\treturn (m_dummyCondition->GetCondition_indexOf(/*idx=*/0) > 0);\n}\n\nbool __fastcall TForm1::isCondition2(void)\n{\n\treturn (m_dummyCondition->GetCondition_indexOf(/*idx=*/1) > 0);\n}\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n\t// \u30dc\u30bf\u30f3\u62bc\u4e0b\u6642\u306b\u4e00\u9023\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\n\tCUtilDummyConditionsHandler::Test_main_runner();\n}\n//---------------------------------------------------------------------------\n```\n\n### \u5b9f\u884c\n\n- UtilDummyConditionsHandler.cpp\u306e`static const int kCheckInterval = EVERY_10SECONDS;`\u3060\u3051\u3092\u30a2\u30f3\u30b3\u30e1\u30f3\u30c8\u3059\u308b\n- Unit1\u306eButton\u3092\u62bc\u3059\n\n```txt:\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:00:05 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:00:15 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 0:00:25 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 0:00:35 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:00:45 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:00:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:01:05 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:01:15 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3584)\n```\n\n\u540c\u69d8\u306b[kCheckInterval]\u3092EVERY_MINUTES\u3084EVERY_HOURS\u306b\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\n\n```txt:\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:00:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 0:01:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 0:02:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 0:03:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:04:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:05:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:06:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 0:07:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (3760)\n```\n\n```txt:\u7d50\u679c\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 100 @ 2017/01/16 0:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 010 @ 2017/01/16 1:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 001 @ 2017/01/16 2:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 011 @ 2017/01/16 3:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 4:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 5:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 6:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b: 000 @ 2017/01/16 7:59:55 \u30d7\u30ed\u30bb\u30b9 Project1.exe (1592)\n```\n\n## \u88dc\u8db3\n(\u8ffd\u8a18 2017/01/15)\n\nC++11\u306b\u304a\u3044\u3066\u3001\u5404\u6b21\u5143\u3067\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3001\u304a\u3088\u3073\u3001\u914d\u5217\u5168\u4f53\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u8a73\u3057\u3044\u8a18\u4e8b\u3092\u7528\u610f\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://qiita.com/SaitoAtsushi/items/ee17466c464fb7a270d2\n\n\u4e0a\u306ev0.2\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3053\u308c\u3089\u306f\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n", "tags": ["cppBuilder", "timerEvent"]}