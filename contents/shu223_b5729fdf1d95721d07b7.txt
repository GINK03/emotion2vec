{"context": "SCNProgram\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3068\u304b\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u63cf\u753b\u3092Metal\u30b7\u30a7\u30fc\u30c0\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myVertex\"\nprogram.vertexFunctionName = \"myFragment\"\nmaterial.program = program\n\n\u3053\u306e program \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u306f SCNShadable \u3068\u3044\u3046\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306bSCNMaterial\u3084SCNGeometry\u304c\u9069\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\nSCNMaterial\nopen class SCNMaterial : NSObject, SCNAnimatable, SCNShadable, NSCopying, NSSecureCoding {\n\n\n\u3053\u306e\u3078\u3093\u306f\u306a\u304b\u306a\u304b\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nMetal Shader with SceneKit SCNProgram - Stack Overflow\nSceneKit\u3067Metal\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3059\u308b(SCNProgram) \u00b7 M.Ike\n\n\u6700\u7d42\u7684\u306b\u306fApple\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u983c\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\nSCNShadable - SceneKit | Apple Developer Documentation\nSCNProgram - SceneKit | Apple Developer Documentation\n\n\u672c\u8a18\u4e8b\u3067\u306f\u4e3b\u306b\u30de\u30c6\u30ea\u30a2\u30eb\u306e\u63cf\u753b\u3092Metal\u30b7\u30a7\u30fc\u30c0\u3067\u884c\u3046\u5834\u5408\u306e\u30a2\u30ec\u30b3\u30ec\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306a\u5b9f\u88c5\uff1a\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u3092Metal\u3067\u884c\u3046\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c6\u30af\u30b9\u30c1\u30e3\u3092Metal\u3067\u63cf\u753b\u3059\u308b\u5834\u5408\u3001Metal\u30b7\u30a7\u30fc\u30c0\u3001SceneKit\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nMetal\u30b7\u30a7\u30fc\u30c0\u5074\n\nShaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\n#include <SceneKit/scn_metal>\n\nstruct MyNodeBuffer {\n    float4x4 modelViewProjectionTransform;\n};\n\nstruct MyVertexInput {\n    float3 position [[attribute(SCNVertexSemanticPosition)]];\n    float2 texCoords [[attribute(SCNVertexSemanticTexcoord0)]];\n};\n\nstruct SimpleVertex\n{\n    float4 position [[position]];\n    float2 texCoords;\n};\n\nvertex SimpleVertex myVertex(MyVertexInput in [[stage_in]],\n                             constant SCNSceneBuffer& scn_frame [[buffer(0)]],\n                             constant MyNodeBuffer& scn_node [[buffer(1)]])\n{\n    SimpleVertex vert;\n    vert.position = scn_node.modelViewProjectionTransform * float4(in.position, 1.0);\n    vert.texCoords = in.texCoords;\n\n    return vert;\n}\n\n\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                          texture2d<float, access::sample> diffuseTexture [[texture(0)]])\n{\n    constexpr sampler sampler2d(coord::normalized, filter::linear, address::repeat);\n    float4 color = diffuseTexture.sample(sampler2d, in.texCoords);\n    return half4(color);\n}\n\n\n\u901a\u5e38\u306eMetal\u30b7\u30a7\u30fc\u30c0\u5b9f\u88c5\u3068\u306e\u9055\u3044\u3068\u3057\u3066\u306f\u3001\n\n\n#include <SceneKit/scn_metal> \u304c\u5fc5\u8981\n\u9802\u70b9\u306e\u5c5e\u6027\u306f\u3001[[attribute(SCNVertexSemanticPosition)]] \u3084 [[attribute(SCNVertexSemanticTexcoord0)]] \u7b49\u3001\u5fc5\u8981\u306a\u3082\u306e\u3092\u69cb\u9020\u4f53\u3067\u6301\u3063\u3066\u304a\u304f\n\nmodelViewProjectionTransform\u3068\u304b\u306e\u5909\u63db\u884c\u5217\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3055\u308c\u305f\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u5fc5\u8981\u306a\u3082\u306e\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f [[buffer(1)]] \u306b\u6e21\u3055\u308c\u3066\u304f\u308b\n\n\nAvailable_Fields_for_Per-Node_Shader_Data\nfloat4x4 modelTransform;\nfloat4x4 inverseModelTransform;\nfloat4x4 modelViewTransform;\nfloat4x4 inverseModelViewTransform;\nfloat4x4 normalTransform; // Inverse transpose of modelViewTransform\nfloat4x4 modelViewProjectionTransform;\nfloat4x4 inverseModelViewProjectionTransform;\nfloat2x3 boundingBox;\nfloat2x3 worldBoundingBox;\n\n\n\u3068\u3044\u3063\u305f\u3042\u305f\u308a\u3067\u3059\u3002\n\u53c2\u8003\u8a18\u4e8b\u306b\u793a\u3057\u305fStackOverflow\u306e\u56de\u7b54\u307b\u307c\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u304c\u3001\u3053\u308c\u3067SCNMaterial\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u304cMetal\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u500b\u4eba\u7684\u306a\u7528\u9014\u3068\u3057\u3066\u306f\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3092\u30ab\u30b9\u30bf\u30e0\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u5b9f\u88c5\u306f\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u307e\u3059\u3002\n\nSceneKit\u30b3\u30fc\u30c9\u5074\n\nSomeClass.swift\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myFragment\"\nprogram.vertexFunctionName = \"myVertex\"\nmaterial.program = program\n\nlet image = UIImage(named: filename)!\nlet imageProperty = SCNMaterialProperty(contents: image)\nmaterial.setValue(imageProperty, forKey: \"diffuseTexture\")\n\n\n\u3053\u3061\u3089\u306f\u3082\u306e\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u305f\u3081\u306b\u3001\n\nSCNMaterialProperty\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u7528\u610f\nSCNMaterial\u306e\"diffuseTexture\"\u306b\u30bb\u30c3\u30c8\n\n\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30a7\u30fc\u30c0\u5074\u306e\u5f15\u6570 diffuseTexture [[texture(0)]] \u306b\u30c6\u30af\u30b9\u30c1\u30e3\u30c7\u30fc\u30bf\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\u30ad\u30fc\u540d\uff0f\u5f15\u6570\u540d\u306f\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3082ok\u3067\u3059\u3002\n\nSceneKit\u30b3\u30fc\u30c9\u304b\u3089Metal\u30b7\u30a7\u30fc\u30c0\u306b\u4efb\u610f\u306e\u5024\u3092\u6e21\u3059\n\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u6e21\u3059\n\u305f\u3068\u3048\u3070\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306e\u5f15\u6570\u306bFloat\u578b\u306e\u300c\u7d4c\u904e\u6642\u9593\u300d\u3092\u6e21\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nMetal\u30b7\u30a7\u30fc\u30c0\u5074\n\nShaders.metal\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                          constant float &time [[buffer(0)]])\n\n\n\nSceneKit\u30b3\u30fc\u30c9\u5074\n\nSomeClass.swift\nprivate lazy var startTime = Date()\n\n\n\nSomeClass.swift\nTimer.scheduledTimer(withTimeInterval: 1.0/60.0, repeats: true, block: { (timer) in\n    self.updateTime()\n})\n\n\n\nSomeClass.swift\nprivate func updateTime() {\n    var time = Float(Date().timeIntervalSince(startTime))\n    let timeData = Data(bytes: &time, count: MemoryLayout<Float>.size)\n    node.geometry?.firstMaterial?.setValue(timeData, forKey: \"time\")\n}\n\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3057\u305f\u3068\u304d\u3068\u307b\u307c\u4e00\u7dd2\u3067\u3059\u304c\u3001\u4eca\u56de\u306f Float \u306e\u5024\u3092\u6e21\u3057\u305f\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u70b9\u304c\u9055\u3044\u307e\u3059\u3002\n\n\nSCNMaterialProperty \u3067\u306f\u306a\u304f Data \u3067\u6e21\u3059\n\n[[texture(0)]] \u3067\u306f\u306a\u304f [[buffer(0)]] \u3067\u53d7\u3051\u53d6\u308b\n\n\n\u69cb\u9020\u4f53\u3092\u6e21\u3059\n\u4e0a\u306e\u4f8b\u3067\u306f Float \u578b\u306e\u5024\u3092Metal\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070 Uniforms \u3068\u3044\u3046\u69cb\u9020\u4f53\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u3053\u308c\u3092\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\nstruct Uniforms {\n    var resolution: float2\n}\n\n\u3084\u308b\u3053\u3068\u306f\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\nSomeClasss.swift\nlet screenSize = UIScreen.main.nativeBounds.size\nvar uniforms = Uniforms(resolution: float2(Float(screenSize.width), Float(screenSize.height)))\nlet uniformsData = Data(bytes: &uniforms, count: MemoryLayout<Uniforms>.size)\nnode.geometry?.firstMaterial?.setValue(uniformsData, forKey: \"uniforms\")\n\n\nMetal\u30b7\u30a7\u30fc\u30c0\u5074\u3067\u306f Uniforms &uniforms [[buffer(0)]] \u3068\u3044\u3046\u5f15\u6570\u3067\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\n\u914d\u5217\u3092\u6e21\u3059\n\u4f8b\u3048\u3070Line\u3068\u3044\u3046\u7dda\u5206\u306e\u63cf\u753b\u60c5\u5831\uff08\u59cb\u70b9\u30fb\u7d42\u70b9etc\uff09\u306e\u5165\u3063\u305f\u69cb\u9020\u4f53\u3092\u914d\u5217\u3067Metal\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\nSceneKit\u30b3\u30fc\u30c9\u5074\n\u3053\u3053\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092 handleBindingOfBufferNamed:frequency:usingBlock: \u3067\u6e21\u3057\u3066\u3084\u308b\u3053\u3068\u3002\u3053\u3046\u3057\u306a\u3044\u3068\u3001GPU\u3067\u51e6\u7406\u3059\u308b\u3068\u304d\u306b\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u304c\u5408\u308f\u306a\u3044\u3063\u3066\u3044\u3046\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\nSomeClass.mm\nstd::vector<Line> lines = // \u7565;\nNSData *linesData = [Utils dataFromLines:lines];\nNSUInteger numLines = lines.count;\nNSData *numLinesData = [NSData dataWithBytes:&numLines length:sizeof(NSUInteger)];\n[program handleBindingOfBufferNamed:@\"lines\" frequency:SCNBufferFrequencyPerFrame usingBlock:^(id<SCNBufferStream>  _Nonnull buffer, SCNNode * _Nonnull node, id<SCNShadable>  _Nonnull shadable, SCNRenderer * _Nonnull renderer) {\n    [buffer writeBytes:(void *)linesData.bytes length:linesData.length];\n}];\n\n\n\nUtils.mm\n+ (NSData *)dataFromLines:(std::vector<Line>)lines\n{\n    NSMutableData *data = [NSMutableData data];\n    for (int i=0; i<lines.size(); i++) {\n        Line line = lines[i];\n        NSData *lineData = [NSData dataWithBytes:&line length:sizeof(Line)];\n        [data appendData:lineData];\n    }\n    return data;\n}\n\n\n\u3053\u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u305f\u3068\u304dC++\u306e\u30b3\u30fc\u30c9\u3068\u306e\u9023\u643a\u306e\u95a2\u4fc2\u3067\u3001\u3053\u3053\u3060\u3051Objective-C++\u3067\u3059\u304c\u3001\u307e\u3041\u30dd\u30a4\u30f3\u30c8\u306fSwift\u3067\u3082\u540c\u69d8\u3067\u3059\u3002\n\u3053\u306eAPI\u306f\u30b0\u30b0\u3063\u3066\u3082Apple\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3057\u304b\u51fa\u3066\u3053\u306a\u304f\u3066\u3001\u672c\u5f53\u306b\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u3067\u3059...\n\nMetal\u30b7\u30a7\u30fc\u30c0\u5074\n\nShaders.metal\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                                 const device Line *lines [[buffer(0)]],\n                                 constant uint &numLines [[buffer(1)]])\n\n\n\u8981\u7d20\u6570\u3082\u5225\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308b\u3001\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3002\n\n\u53c2\u8003\uff1a\n\n\nhttp://stackoverflow.com/questions/38164634/compute-sum-of-array-values-in-parallel-with-metal-swift\n\n\n\n\n\u900f\u904e\u3092\u6709\u52b9\u306b\u3059\u308b\n\u30b7\u30a7\u30fc\u30c0\u3067\u30a2\u30eb\u30d5\u30a1\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001discard_fragment \u3057\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u900f\u904e\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\nprogram.isOpaque = false;\n\n\u3092\u3084\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u4f5c\u4f8b\nSceneKit\u3067SCNBox\u3092\u30b8\u30aa\u30e1\u30c8\u30ea\u3068\u3059\u308b\u30ce\u30fc\u30c9\u3092\u7f6e\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u30d9\u30fc\u30b9\u306b\u3001\n\nGLSL Sandbox\u3092\u53c2\u8003\u306bMetal\u30b7\u30a7\u30fc\u30c0\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u53c2\u8003\uff1a [iOS] Metal\u30b7\u30a7\u30fc\u30c0\u3053\u3068\u306f\u3058\u3081 - WebGL/GLSL\u306e\u8c4a\u5bcc\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3059\u308b - Qiita\n\nhttp://glslsandbox.com/e#36858.0\n\n\n\nhttp://glslsandbox.com/e#37017.0\n\n\n\u203b\u5b9f\u969b\u306e\u958b\u767a\u3067\u3053\u3046\u3044\u3046\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u306f\u306a\u304f\u3001\u5186\u3068\u304b\u7dda\u30923D\u7a7a\u9593\u4e0a\u306b\u63cf\u753b\u3059\u308b\u306e\u306bSceneKit+Metal\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\nSCNProgram\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001**SceneKit\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u3068\u304b\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u63cf\u753b\u3092Metal\u30b7\u30a7\u30fc\u30c0\u3067\u884c\u3046**\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```swift\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myVertex\"\nprogram.vertexFunctionName = \"myFragment\"\nmaterial.program = program\n```\n\n\u3053\u306e `program` \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u306f SCNShadable \u3068\u3044\u3046\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306bSCNMaterial\u3084SCNGeometry\u304c\u9069\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift:SCNMaterial\nopen class SCNMaterial : NSObject, SCNAnimatable, SCNShadable, NSCopying, NSSecureCoding {\n```\n\n\u3053\u306e\u3078\u3093\u306f\u306a\u304b\u306a\u304b\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n- [Metal Shader with SceneKit SCNProgram - Stack Overflow](http://stackoverflow.com/questions/37697939/metal-shader-with-scenekit-scnprogram)\n- [SceneKit\u3067Metal\u306e\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3059\u308b(SCNProgram) \u00b7 M.Ike](https://mike-neko.github.io/blog/metalshader-scenekit/)\n\n\u6700\u7d42\u7684\u306b\u306fApple\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u983c\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n- [SCNShadable - SceneKit | Apple Developer Documentation](https://developer.apple.com/reference/scenekit/scnshadable)\n- [SCNProgram - SceneKit | Apple Developer Documentation](https://developer.apple.com/reference/scenekit/scnprogram)\n\n\u672c\u8a18\u4e8b\u3067\u306f\u4e3b\u306b\u30de\u30c6\u30ea\u30a2\u30eb\u306e\u63cf\u753b\u3092Metal\u30b7\u30a7\u30fc\u30c0\u3067\u884c\u3046\u5834\u5408\u306e\u30a2\u30ec\u30b3\u30ec\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n\n##\u57fa\u672c\u7684\u306a\u5b9f\u88c5\uff1a\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u3092Metal\u3067\u884c\u3046\n\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c6\u30af\u30b9\u30c1\u30e3\u3092Metal\u3067\u63cf\u753b\u3059\u308b\u5834\u5408\u3001Metal\u30b7\u30a7\u30fc\u30c0\u3001SceneKit\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n###Metal\u30b7\u30a7\u30fc\u30c0\u5074\n\n```cpp:Shaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\n#include <SceneKit/scn_metal>\n\nstruct MyNodeBuffer {\n    float4x4 modelViewProjectionTransform;\n};\n\nstruct MyVertexInput {\n    float3 position [[attribute(SCNVertexSemanticPosition)]];\n    float2 texCoords [[attribute(SCNVertexSemanticTexcoord0)]];\n};\n\nstruct SimpleVertex\n{\n    float4 position [[position]];\n    float2 texCoords;\n};\n\nvertex SimpleVertex myVertex(MyVertexInput in [[stage_in]],\n                             constant SCNSceneBuffer& scn_frame [[buffer(0)]],\n                             constant MyNodeBuffer& scn_node [[buffer(1)]])\n{\n    SimpleVertex vert;\n    vert.position = scn_node.modelViewProjectionTransform * float4(in.position, 1.0);\n    vert.texCoords = in.texCoords;\n    \n    return vert;\n}\n\n\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                          texture2d<float, access::sample> diffuseTexture [[texture(0)]])\n{\n    constexpr sampler sampler2d(coord::normalized, filter::linear, address::repeat);\n    float4 color = diffuseTexture.sample(sampler2d, in.texCoords);\n    return half4(color);\n}\n```\n\n\u901a\u5e38\u306eMetal\u30b7\u30a7\u30fc\u30c0\u5b9f\u88c5\u3068\u306e\u9055\u3044\u3068\u3057\u3066\u306f\u3001\n\n- `#include <SceneKit/scn_metal>` \u304c\u5fc5\u8981\n- \u9802\u70b9\u306e\u5c5e\u6027\u306f\u3001`[[attribute(SCNVertexSemanticPosition)]]` \u3084 `[[attribute(SCNVertexSemanticTexcoord0)]]` \u7b49\u3001\u5fc5\u8981\u306a\u3082\u306e\u3092\u69cb\u9020\u4f53\u3067\u6301\u3063\u3066\u304a\u304f\n- `modelViewProjectionTransform`\u3068\u304b\u306e\u5909\u63db\u884c\u5217\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3055\u308c\u305f\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u5fc5\u8981\u306a\u3082\u306e\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u69cb\u9020\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u3053\u306e\u30c7\u30fc\u30bf\u306f `[[buffer(1)]]` \u306b\u6e21\u3055\u308c\u3066\u304f\u308b\n\n```cpp:Available_Fields_for_Per-Node_Shader_Data\nfloat4x4 modelTransform;\nfloat4x4 inverseModelTransform;\nfloat4x4 modelViewTransform;\nfloat4x4 inverseModelViewTransform;\nfloat4x4 normalTransform; // Inverse transpose of modelViewTransform\nfloat4x4 modelViewProjectionTransform;\nfloat4x4 inverseModelViewProjectionTransform;\nfloat2x3 boundingBox;\nfloat2x3 worldBoundingBox;\n```\n\n\u3068\u3044\u3063\u305f\u3042\u305f\u308a\u3067\u3059\u3002\n\n\u53c2\u8003\u8a18\u4e8b\u306b\u793a\u3057\u305fStackOverflow\u306e\u56de\u7b54\u307b\u307c\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u304c\u3001\u3053\u308c\u3067SCNMaterial\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u63cf\u753b\u304cMetal\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u500b\u4eba\u7684\u306a\u7528\u9014\u3068\u3057\u3066\u306f\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3092\u30ab\u30b9\u30bf\u30e0\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u306e\u5b9f\u88c5\u306f\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n###SceneKit\u30b3\u30fc\u30c9\u5074\n\n```swift:SomeClass.swift\nlet program = SCNProgram()\nprogram.fragmentFunctionName = \"myFragment\"\nprogram.vertexFunctionName = \"myVertex\"\nmaterial.program = program\n\nlet image = UIImage(named: filename)!\nlet imageProperty = SCNMaterialProperty(contents: image)\nmaterial.setValue(imageProperty, forKey: \"diffuseTexture\")\n```\n\n\u3053\u3061\u3089\u306f\u3082\u306e\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u305f\u3081\u306b\u3001\n\n- SCNMaterialProperty\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u7528\u610f\n- SCNMaterial\u306e\"diffuseTexture\"\u306b\u30bb\u30c3\u30c8\n\n\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30a7\u30fc\u30c0\u5074\u306e\u5f15\u6570 `diffuseTexture [[texture(0)]]` \u306b\u30c6\u30af\u30b9\u30c1\u30e3\u30c7\u30fc\u30bf\u304c\u6e21\u3055\u308c\u307e\u3059\u3002**\u30ad\u30fc\u540d\uff0f\u5f15\u6570\u540d\u306f\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3082ok**\u3067\u3059\u3002\n\n\n##SceneKit\u30b3\u30fc\u30c9\u304b\u3089Metal\u30b7\u30a7\u30fc\u30c0\u306b\u4efb\u610f\u306e\u5024\u3092\u6e21\u3059\n\n###\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u6e21\u3059\n\n\u305f\u3068\u3048\u3070\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u306e\u5f15\u6570\u306b`Float`\u578b\u306e\u300c\u7d4c\u904e\u6642\u9593\u300d\u3092\u6e21\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n####Metal\u30b7\u30a7\u30fc\u30c0\u5074\n\n```cpp:Shaders.metal\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                          constant float &time [[buffer(0)]])\n```\n\n####SceneKit\u30b3\u30fc\u30c9\u5074\n\n```swift:SomeClass.swift\nprivate lazy var startTime = Date()\n```\n\n```swift:SomeClass.swift\nTimer.scheduledTimer(withTimeInterval: 1.0/60.0, repeats: true, block: { (timer) in\n    self.updateTime()\n})\n```\n\n```swift:SomeClass.swift\nprivate func updateTime() {\n    var time = Float(Date().timeIntervalSince(startTime))\n    let timeData = Data(bytes: &time, count: MemoryLayout<Float>.size)\n    node.geometry?.firstMaterial?.setValue(timeData, forKey: \"time\")\n}\n```\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3057\u305f\u3068\u304d\u3068\u307b\u307c\u4e00\u7dd2\u3067\u3059\u304c\u3001\u4eca\u56de\u306f `Float` \u306e\u5024\u3092\u6e21\u3057\u305f\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u70b9\u304c\u9055\u3044\u307e\u3059\u3002\n\n- `SCNMaterialProperty` \u3067\u306f\u306a\u304f `Data` \u3067\u6e21\u3059\n- `[[texture(0)]]` \u3067\u306f\u306a\u304f `[[buffer(0)]]` \u3067\u53d7\u3051\u53d6\u308b\n\n\n###\u69cb\u9020\u4f53\u3092\u6e21\u3059\n\n\u4e0a\u306e\u4f8b\u3067\u306f `Float` \u578b\u306e\u5024\u3092Metal\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u305f\u3068\u3048\u3070 `Uniforms` \u3068\u3044\u3046\u69cb\u9020\u4f53\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u3053\u308c\u3092\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n```swift\nstruct Uniforms {\n    var resolution: float2\n}\n```\n\n\u3084\u308b\u3053\u3068\u306f\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n```swift:SomeClasss.swift\nlet screenSize = UIScreen.main.nativeBounds.size\nvar uniforms = Uniforms(resolution: float2(Float(screenSize.width), Float(screenSize.height)))\nlet uniformsData = Data(bytes: &uniforms, count: MemoryLayout<Uniforms>.size)\nnode.geometry?.firstMaterial?.setValue(uniformsData, forKey: \"uniforms\")\n```\n\nMetal\u30b7\u30a7\u30fc\u30c0\u5074\u3067\u306f `Uniforms &uniforms [[buffer(0)]]` \u3068\u3044\u3046\u5f15\u6570\u3067\u5024\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\n\n\n###\u914d\u5217\u3092\u6e21\u3059\n\n\u4f8b\u3048\u3070Line\u3068\u3044\u3046\u7dda\u5206\u306e\u63cf\u753b\u60c5\u5831\uff08\u59cb\u70b9\u30fb\u7d42\u70b9etc\uff09\u306e\u5165\u3063\u305f\u69cb\u9020\u4f53\u3092\u914d\u5217\u3067Metal\u30b7\u30a7\u30fc\u30c0\u306b\u6e21\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n\n####SceneKit\u30b3\u30fc\u30c9\u5074\n\n\u3053\u3053\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092 `handleBindingOfBufferNamed:frequency:usingBlock:` \u3067\u6e21\u3057\u3066\u3084\u308b\u3053\u3068\u3002\u3053\u3046\u3057\u306a\u3044\u3068\u3001GPU\u3067\u51e6\u7406\u3059\u308b\u3068\u304d\u306b\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u304c\u5408\u308f\u306a\u3044\u3063\u3066\u3044\u3046\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```objc:SomeClass.mm\nstd::vector<Line> lines = // \u7565;\nNSData *linesData = [Utils dataFromLines:lines];\nNSUInteger numLines = lines.count;\nNSData *numLinesData = [NSData dataWithBytes:&numLines length:sizeof(NSUInteger)];\n[program handleBindingOfBufferNamed:@\"lines\" frequency:SCNBufferFrequencyPerFrame usingBlock:^(id<SCNBufferStream>  _Nonnull buffer, SCNNode * _Nonnull node, id<SCNShadable>  _Nonnull shadable, SCNRenderer * _Nonnull renderer) {\n    [buffer writeBytes:(void *)linesData.bytes length:linesData.length];\n}];\n```\n\n```objc:Utils.mm\n+ (NSData *)dataFromLines:(std::vector<Line>)lines\n{\n    NSMutableData *data = [NSMutableData data];\n    for (int i=0; i<lines.size(); i++) {\n        Line line = lines[i];\n        NSData *lineData = [NSData dataWithBytes:&line length:sizeof(Line)];\n        [data appendData:lineData];\n    }\n    return data;\n}\n```\n\n\u3053\u306e\u5b9f\u88c5\u3092\u3057\u3066\u3044\u305f\u3068\u304dC++\u306e\u30b3\u30fc\u30c9\u3068\u306e\u9023\u643a\u306e\u95a2\u4fc2\u3067\u3001\u3053\u3053\u3060\u3051Objective-C++\u3067\u3059\u304c\u3001\u307e\u3041\u30dd\u30a4\u30f3\u30c8\u306fSwift\u3067\u3082\u540c\u69d8\u3067\u3059\u3002\n\n\u3053\u306eAPI\u306f\u30b0\u30b0\u3063\u3066\u3082Apple\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3057\u304b\u51fa\u3066\u3053\u306a\u304f\u3066\u3001\u672c\u5f53\u306b\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u3067\u3059...\n\n\n####Metal\u30b7\u30a7\u30fc\u30c0\u5074\n    \n```cpp:Shaders.metal\nfragment half4 myFragment(SimpleVertex in [[stage_in]],\n                                 const device Line *lines [[buffer(0)]],\n                                 constant uint &numLines [[buffer(1)]])\n```\n\n**\u8981\u7d20\u6570\u3082\u5225\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308b**\u3001\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3002\n\n- \u53c2\u8003\uff1a\n  - http://stackoverflow.com/questions/38164634/compute-sum-of-array-values-in-parallel-with-metal-swift\n\n##\u900f\u904e\u3092\u6709\u52b9\u306b\u3059\u308b\n\n\u30b7\u30a7\u30fc\u30c0\u3067\u30a2\u30eb\u30d5\u30a1\u3092\u6307\u5b9a\u3057\u305f\u308a\u3001`discard_fragment` \u3057\u3066\u3082**\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u900f\u904e\u306b\u306a\u3089\u306a\u3044**\u306e\u3067\u3001\n\n```\nprogram.isOpaque = false;\n```\n\n\u3092\u3084\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n##\u4f5c\u4f8b\n\nSceneKit\u3067SCNBox\u3092\u30b8\u30aa\u30e1\u30c8\u30ea\u3068\u3059\u308b\u30ce\u30fc\u30c9\u3092\u7f6e\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u30d9\u30fc\u30b9\u306b\u3001\n\n![none.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/e5055dd7-d67c-ae9a-82c7-856854520ee9.gif)\n\nGLSL Sandbox\u3092\u53c2\u8003\u306bMetal\u30b7\u30a7\u30fc\u30c0\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u53c2\u8003\uff1a [[iOS] Metal\u30b7\u30a7\u30fc\u30c0\u3053\u3068\u306f\u3058\u3081 - WebGL/GLSL\u306e\u8c4a\u5bcc\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3059\u308b - Qiita](http://qiita.com/shu223/items/dd5a53b8c291abe30fc2)\n\n\n- http://glslsandbox.com/e#36858.0\n\n![color.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/4aead202-00e0-20e7-ffad-3208c31ab041.gif)\n\n\n- http://glslsandbox.com/e#37017.0\n\n![voronoi.gif](https://qiita-image-store.s3.amazonaws.com/0/3180/d16268ae-628e-9e32-7183-39e75912d68f.gif)\n\n\n\u203b\u5b9f\u969b\u306e\u958b\u767a\u3067\u3053\u3046\u3044\u3046\u30b7\u30a7\u30fc\u30c0\u3092\u5229\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u306f\u306a\u304f\u3001\u5186\u3068\u304b\u7dda\u30923D\u7a7a\u9593\u4e0a\u306b\u63cf\u753b\u3059\u308b\u306e\u306bSceneKit+Metal\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n", "tags": ["Metal", "VR", "iOS", "Swift", "3D"]}