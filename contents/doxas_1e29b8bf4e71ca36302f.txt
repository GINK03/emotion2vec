{"context": "\n\n\u5de6\u5229\u304d\n\u5f7c\u306f\u81ea\u5206\u306e\u5916\u898b\u306b\u5927\u304d\u306a\u30cf\u30f3\u30c7\u30a3\u30ad\u30e3\u30c3\u30d7\u304c\u3042\u308b\u3053\u3068\u3092\u81ea\u899a\u3057\u3066\u3044\u305f\u3002\n\u4ed6\u306e\u3082\u306e\u305f\u3061\u3068\u3001\u306a\u306b\u3072\u3068\u3064\u5909\u308f\u3089\u306a\u3044\u3001\u8840\u7d71\u7684\u306b\u306f\u9593\u9055\u3044\u306a\u304f\u540c\u3058\u7a2e\u65cf\u3067\u3042\u308b\u3002\n\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u5f7c\u306e\u3088\u3046\u306b\u5916\u898b\u306b\u3061\u3087\u3063\u3068\u3057\u305f\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u7dcf\u3058\u3066\u7406\u4e0d\u5c3d\u306a\u6271\u3044\u3092\u53d7\u3051\u308b\u3002\u305d\u308c\u304c\u3001\u5f7c\u306e\u751f\u304d\u308b\u300c\u304d\u306e\u3053\u306e\u4e16\u754c\u300d\u306b\u304a\u3051\u308b\u5de6\u5229\u304d\u306e\u73fe\u5b9f\u3060\u3063\u305f\u3002\n\u5076\u7136\u306b\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u304c\u50be\u3044\u3066\u30c1\u30e7\u30b3\u30ec\u30fc\u30c8\u306b\u3076\u3063\u523a\u3055\u3063\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u306b\u3001\u5de6\u5229\u304d\u3068\u3057\u3066\u751f\u307e\u308c\u3066\u3057\u307e\u3063\u305f\u60b2\u60e8\u306a\u304d\u306e\u3053\u3002\n\u305d\u308c\u304c\u3053\u306e\u7269\u8a9e\u306e\u4e3b\u4eba\u516c\u3067\u3042\u308b\u3002\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n    float dist;\n    vec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 fColor = vec3(0.2, 0.7, 0.1);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat smoothMin(float d1, float d2, float k){\n    float h = exp(-k * d1) + exp(-k * d2);\n    return -log(h) / k;\n}\nfloat dChoco(vec3 p){\n    float rad = time * 0.2;\n    mat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n    vec3 q = m * (p + vec3(0.0, -0.55, 0.0)) * vec3(1.0, 1.2, 1.0);\n    float len = sin(atan(q.z, q.x) * 7.0) * 0.01 * PI;\n    return length(q) - 1.0 + len + step(p.y, -0.4) + pow(p.y, 1.0);\n}\nfloat dCylinder(vec3 p, vec2 r){\n    float rad = time * 0.2;\n    mat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n    float s = -cos(p.y * 2.0) * 0.1 - 0.05;\n    float l = length(p + vec3(0.0, 1.25, 0.0)) - 0.4;\n    vec3 q = m * p + vec3(s, 0.5, 0.0);\n    vec2 d = abs(vec2(length(q.xz), q.y)) - r;\n    return smoothMin(min(max(d.x, d.y), 0.0), l, 32.0) + length(max(d, 0.0)) - 0.2;\n}\nfloat dFloor(vec3 p){\n    return dot(p, vec3(0.0, 1.0, 0.0)) + 1.5;\n}\nIntersect distanceHub(vec3 p){\n    float choco = dChoco(p);\n    float flor = dFloor(p);\n    float cylin = dCylinder(p, vec2(0.1, 0.9));\n    Intersect i;\n    i.dist = min(min(choco, flor), cylin);\n    i.color = cylin < min(choco, flor) ? kColor : choco < flor ? cColor : fColor;\n    return i;\n}\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n        distanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n        distanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 cPos = vec3(0.0,  0.0,  3.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    float dist = 0.0;\n    float rLen = 0.0;\n    vec3  rPos = cPos;\n    Intersect intersect;\n    for(int i = 0; i < 256; ++i){\n        intersect = distanceHub(rPos);\n        rLen += intersect.dist * 0.5;\n        rPos = cPos + ray * rLen;\n    }\n\n    if(abs(intersect.dist) < 0.001){\n        float fog = smoothstep(0.0, 10.0, length(rPos - cPos));\n        vec3  normal = genNormal(rPos);\n        vec3  light = normalize(vec3(mouse + 2.0, 3.0));\n        float diff = max(dot(normal, light), 0.1);\n        vec3  eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = clamp(dot(eye, light), 0.0, 1.0);\n        vec3 specColor = pow(speculer, 20.0) + cColor;\n        gl_FragColor = vec4(vec3(diff) * intersect.color + fog + specColor, 1.0);\n    }else{\n        gl_FragColor = vec4(1.0);\n    }\n}\n\n\uff08GLSL Editor \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u5f7c\u306e\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u306f\u3001\u50be\u3044\u3066\u308b\u3002\n\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u3001\u5f62\u3082\u3084\u3084\u4e0d\u683c\u597d\u3060\u3002\n\u3067\u3082\u5f7c\u304c\u5de6\u5229\u304d\u306a\u306e\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u3063\u3066\uff1f \u305d\u308c\u306f\u3042\u306a\u305f\u304c\u4eba\u9593\u3060\u304b\u3089\u3060\u3002\u304d\u306e\u3053\u76ee\u7dda\u3067\u898b\u305f\u3089\u3069\u3046\u307f\u3066\u3082\u5de6\u5229\u304d\u3060\u3002\u3084\u3070\u3044\u3002\n\u305d\u3093\u306a\u5f7c\u3092\u3001\u304d\u306e\u3053\u305f\u3061\u306e\u8ab0\u3082\u304c\u8511\u3080\u3088\u3046\u306a\u76ee\u7dda\u3067\u898b\u3064\u3081\u308b\u306e\u3060\u3002\n\u3057\u304b\u3057\u305d\u308c\u3067\u3082\u5f7c\u306f\u3001\u304d\u306e\u3053\u305f\u3061\u304c\u66ae\u3089\u3059\u3053\u306e\u5e73\u548c\u306a\u4e16\u754c\u3092\u611b\u3057\u3066\u3044\u305f\u3002\n\u305d\u3046\u3001\u3053\u306e\u3068\u304d\u5f7c\u306f\u307e\u3060\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3060\u3002\n\u3084\u304c\u3066\u8a2a\u308c\u308b\u3001\u7a2e\u65cf\u306e\u5b58\u7d9a\u3092\u639b\u3051\u305f\u6fc0\u3057\u3044\u4e89\u3044\u2015\u2015 \u305d\u306e\u6226\u3044\u306e\u3055\u306a\u304b\u306b\u3001\u307e\u3055\u304b\u5f62\u3082\u4e0d\u683c\u597d\u3067\u5927\u3057\u305f\u7279\u6280\u3082\u624d\u899a\u3082\u6301\u3061\u5408\u308f\u305b\u3066\u3044\u306a\u3044\u81ea\u5206\u304c\u3001\u5dfb\u304d\u8fbc\u307e\u308c\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308d\u3046\u3068\u306f\u2026\u2026\nto be continued!\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\uff08\u3042\u3068\u5de6\u5229\u304d\u306b\u3064\u3044\u3066\u3082\u63f6\u63c4\u3059\u308b\u610f\u56f3\u306f\u306a\u3044\u3067\u3059\u3002\u79c1\u3082\u5de6\u5229\u304d\u3060\u3057\u2026\u2026\uff09\n## \u5de6\u5229\u304d\n\n\u5f7c\u306f\u81ea\u5206\u306e\u5916\u898b\u306b\u5927\u304d\u306a\u30cf\u30f3\u30c7\u30a3\u30ad\u30e3\u30c3\u30d7\u304c\u3042\u308b\u3053\u3068\u3092\u81ea\u899a\u3057\u3066\u3044\u305f\u3002\n\n\u4ed6\u306e\u3082\u306e\u305f\u3061\u3068\u3001\u306a\u306b\u3072\u3068\u3064\u5909\u308f\u3089\u306a\u3044\u3001\u8840\u7d71\u7684\u306b\u306f\u9593\u9055\u3044\u306a\u304f\u540c\u3058\u7a2e\u65cf\u3067\u3042\u308b\u3002\n\n\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u5f7c\u306e\u3088\u3046\u306b\u5916\u898b\u306b\u3061\u3087\u3063\u3068\u3057\u305f\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u7dcf\u3058\u3066\u7406\u4e0d\u5c3d\u306a\u6271\u3044\u3092\u53d7\u3051\u308b\u3002\u305d\u308c\u304c\u3001\u5f7c\u306e\u751f\u304d\u308b\u300c*\u304d\u306e\u3053\u306e\u4e16\u754c*\u300d\u306b\u304a\u3051\u308b\u5de6\u5229\u304d\u306e\u73fe\u5b9f\u3060\u3063\u305f\u3002\n\n\u5076\u7136\u306b\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u304c\u50be\u3044\u3066\u30c1\u30e7\u30b3\u30ec\u30fc\u30c8\u306b\u3076\u3063\u523a\u3055\u3063\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u306b\u3001\u5de6\u5229\u304d\u3068\u3057\u3066\u751f\u307e\u308c\u3066\u3057\u307e\u3063\u305f\u60b2\u60e8\u306a\u304d\u306e\u3053\u3002\n\n\u305d\u308c\u304c\u3053\u306e\u7269\u8a9e\u306e\u4e3b\u4eba\u516c\u3067\u3042\u308b\u3002\n\n```glsl\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n\tfloat dist;\n\tvec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 fColor = vec3(0.2, 0.7, 0.1);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat smoothMin(float d1, float d2, float k){\n\tfloat h = exp(-k * d1) + exp(-k * d2);\n\treturn -log(h) / k;\n}\nfloat dChoco(vec3 p){\n\tfloat rad = time * 0.2;\n\tmat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n\tvec3 q = m * (p + vec3(0.0, -0.55, 0.0)) * vec3(1.0, 1.2, 1.0);\n\tfloat len = sin(atan(q.z, q.x) * 7.0) * 0.01 * PI;\n\treturn length(q) - 1.0 + len + step(p.y, -0.4) + pow(p.y, 1.0);\n}\nfloat dCylinder(vec3 p, vec2 r){\n\tfloat rad = time * 0.2;\n\tmat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n\tfloat s = -cos(p.y * 2.0) * 0.1 - 0.05;\n\tfloat l = length(p + vec3(0.0, 1.25, 0.0)) - 0.4;\n\tvec3 q = m * p + vec3(s, 0.5, 0.0);\n\tvec2 d = abs(vec2(length(q.xz), q.y)) - r;\n\treturn smoothMin(min(max(d.x, d.y), 0.0), l, 32.0) + length(max(d, 0.0)) - 0.2;\n}\nfloat dFloor(vec3 p){\n\treturn dot(p, vec3(0.0, 1.0, 0.0)) + 1.5;\n}\nIntersect distanceHub(vec3 p){\n\tfloat choco = dChoco(p);\n\tfloat flor = dFloor(p);\n\tfloat cylin = dCylinder(p, vec2(0.1, 0.9));\n\tIntersect i;\n\ti.dist = min(min(choco, flor), cylin);\n\ti.color = cylin < min(choco, flor) ? kColor : choco < flor ? cColor : fColor;\n\treturn i;\n}\nvec3 genNormal(vec3 p){\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdistanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n\t));\n}\n\nvoid main(){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 cPos = vec3(0.0,  0.0,  3.0);\n\tvec3 cDir = vec3(0.0,  0.0, -1.0);\n\tvec3 cUp  = vec3(0.0,  1.0,  0.0);\n\tvec3 cSide = cross(cDir, cUp);\n\tfloat targetDepth = 1.0;\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\tfloat dist = 0.0;\n\tfloat rLen = 0.0;\n\tvec3  rPos = cPos;\n\tIntersect intersect;\n\tfor(int i = 0; i < 256; ++i){\n\t\tintersect = distanceHub(rPos);\n\t\trLen += intersect.dist * 0.5;\n\t\trPos = cPos + ray * rLen;\n\t}\n\n\tif(abs(intersect.dist) < 0.001){\n\t\tfloat fog = smoothstep(0.0, 10.0, length(rPos - cPos));\n\t\tvec3  normal = genNormal(rPos);\n\t\tvec3  light = normalize(vec3(mouse + 2.0, 3.0));\n\t\tfloat diff = max(dot(normal, light), 0.1);\n\t\tvec3  eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = clamp(dot(eye, light), 0.0, 1.0);\n\t\tvec3 specColor = pow(speculer, 20.0) + cColor;\n\t\tgl_FragColor = vec4(vec3(diff) * intersect.color + fog + specColor, 1.0);\n\t}else{\n\t\tgl_FragColor = vec4(1.0);\n\t}\n}\n```\n\n\uff08[GLSL Editor](https://doxas.org/work/glsl_editor/) \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n![kinoco_01.jpg](https://qiita-image-store.s3.amazonaws.com/0/39638/85ae7146-4610-0eeb-f5a0-ae80ef5c85cb.jpeg)\n\n\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u5f7c\u306e\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u306f\u3001\u50be\u3044\u3066\u308b\u3002\n\n\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u3001\u5f62\u3082\u3084\u3084\u4e0d\u683c\u597d\u3060\u3002\n\n\u3067\u3082\u5f7c\u304c\u5de6\u5229\u304d\u306a\u306e\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u3063\u3066\uff1f \u305d\u308c\u306f\u3042\u306a\u305f\u304c\u4eba\u9593\u3060\u304b\u3089\u3060\u3002\u304d\u306e\u3053\u76ee\u7dda\u3067\u898b\u305f\u3089\u3069\u3046\u307f\u3066\u3082\u5de6\u5229\u304d\u3060\u3002\u3084\u3070\u3044\u3002\n\n\u305d\u3093\u306a\u5f7c\u3092\u3001\u304d\u306e\u3053\u305f\u3061\u306e\u8ab0\u3082\u304c\u8511\u3080\u3088\u3046\u306a\u76ee\u7dda\u3067\u898b\u3064\u3081\u308b\u306e\u3060\u3002\n\n\u3057\u304b\u3057\u305d\u308c\u3067\u3082\u5f7c\u306f\u3001\u304d\u306e\u3053\u305f\u3061\u304c\u66ae\u3089\u3059\u3053\u306e\u5e73\u548c\u306a\u4e16\u754c\u3092\u611b\u3057\u3066\u3044\u305f\u3002\n\n\u305d\u3046\u3001\u3053\u306e\u3068\u304d\u5f7c\u306f\u307e\u3060\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3060\u3002\n\n\u3084\u304c\u3066\u8a2a\u308c\u308b\u3001\u7a2e\u65cf\u306e\u5b58\u7d9a\u3092\u639b\u3051\u305f\u6fc0\u3057\u3044\u4e89\u3044\u2015\u2015 \u305d\u306e\u6226\u3044\u306e\u3055\u306a\u304b\u306b\u3001\u307e\u3055\u304b\u5f62\u3082\u4e0d\u683c\u597d\u3067\u5927\u3057\u305f\u7279\u6280\u3082\u624d\u899a\u3082\u6301\u3061\u5408\u308f\u305b\u3066\u3044\u306a\u3044\u81ea\u5206\u304c\u3001\u5dfb\u304d\u8fbc\u307e\u308c\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308d\u3046\u3068\u306f\u2026\u2026\n\nto be continued!\n\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\uff08\u3042\u3068\u5de6\u5229\u304d\u306b\u3064\u3044\u3066\u3082\u63f6\u63c4\u3059\u308b\u610f\u56f3\u306f\u306a\u3044\u3067\u3059\u3002\u79c1\u3082\u5de6\u5229\u304d\u3060\u3057\u2026\u2026\uff09\n", "tags": ["WebGL", "GLSL"]}