{"context": " More than 1 year has passed since last update.\u6b21\u306e\u3088\u3046\u306a\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n<?php\nclass StaticMethods\n{\n    public static function func()\n    {\n        return \"this is static method\";\n    }\n}\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3067 StaticMethods::func() \u306a\u3069\u3068\u30af\u30e9\u30b9\u540d\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u56f0\u96e3\u3067\u3059\u3002\n.\n\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u9759\u7684\u30e1\u30bd\u30c3\u30c9\uff08\u3092\u6301\u3064\u30af\u30e9\u30b9\uff09\u3092\u30e2\u30c3\u30af\uff08\u30b9\u30bf\u30d6\uff09\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u30d1\u30fc\u30b7\u30e3\u30eb\u30e2\u30c3\u30af\u306f\u3067\u304d\u307e\u305b\u3093\uff09\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @param string $class\n     * @param array $methods\n     * @return \\PHPUnit_Framework_MockObject_MockObject\n     */\n    protected function getStaticMock($class, array $methods = array())\n    {\n        $arr = explode(\"\\\\\", trim($class, '\\\\'));\n        $origShortName = array_pop($arr);\n        $origNamespace = implode(\"\\\\\", $arr);\n\n        $dummyNamespace = trim('__DUMMY__\\\\' . $origNamespace, '\\\\');\n        $dummyShortName = $origShortName;\n        $dummyClassName = \"$dummyNamespace\\\\$dummyShortName\";\n\n        if (class_exists($dummyClassName, false) == false) {\n            $code = [];\n            $code[] = \"namespace $dummyNamespace;\";\n            $code[] = \"class $dummyShortName {\";\n            foreach ($methods as $method) {\n                $code[] = \"public static function $method(){}\";\n            }\n            $code[] = \"}\";\n            eval(implode(\"\\n\", $code));\n        }\n\n        $mock = $this->getMock($dummyClassName, $methods);\n        class_alias(get_class($mock), $class);\n        return $mock;\n    }\n\n    public function test()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n\nStaticMethods \u30af\u30e9\u30b9\u304c\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u6642\u306b\u306f\u307e\u3060\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b getStaticMock() \u306e\u7b2c\uff12\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092\u9069\u5f53\u306a\u540d\u524d\u3067\u5b9a\u7fa9\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092 class_alias \u3067\u672c\u6765\u306e\u30af\u30e9\u30b9\u540d\u306b\u30a8\u30a4\u30ea\u30a2\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306a\u3044\u3067\u3059\u304c Mockery \u306f\u540c\u3058\u3088\u3046\u306a\u539f\u7406\u3067\u9759\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u306b\u3067\u304d\u308b\u3089\u3057\u3044\u3067\u3059\u3002\n\u306a\u304a StaticMethods \u3092\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3001\u5225\u306e\u30c6\u30b9\u30c8\u3067 StaticMethods \u3092\u547c\u3076\u3068\u610f\u56f3\u3057\u306a\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3060\u3068 test1 \u306e\u5b9f\u884c\u6642\u306b StaticMethods \u304c\u30e2\u30c3\u30af\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u306e\u3067 test2 \u306e\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u305b\u3093\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n\n    public function test2()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n        // Failed asserting that null matches expected 'this is static method'.\n    }\n}\n\n@runInSeparateProcess \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u3070 test1 \u306f\u5225\u30d7\u30ed\u30bb\u30b9\u306b\u306a\u308b\u306e\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n\n    public function test2()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n}\n\n\u304c\u3057\u304b\u3057 @runInSeparateProcess \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u5225\u30d7\u30ed\u30bb\u30b9\u306b\u3057\u3066\u3082\u3001\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u524d\u306b StaticMethods \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u30e2\u30c3\u30af\u306e\u4f5c\u6210\u6642\u306b\u30af\u30e9\u30b9\u306e\u591a\u91cd\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u30b3\u30b1\u307e\u3059\u3002\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f test0 \u3067 StaticMethods \u306e\u672c\u6765\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u305b\u3093\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        // Cannot redeclare class StaticMethods\n\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n\n\u3053\u308c\u306f StaticMethods \u3092\u30ed\u30fc\u30c9\u3059\u308b\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u306b @runInSeparateProcess \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308c\u3070\u89e3\u6c7a\u3057\u307e\u3059\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n\n\u3042\u308b\u3044\u306f @preserveGlobalState disabled \u3068\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u3044\u3066\u304a\u3051\u3070 @runInSeparateProcess \u3067 \u5206\u96e2\u30d7\u30ed\u30bb\u30b9\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u8aad\u307e\u308c\u3066\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5206\u96e2\u30d7\u30ed\u30bb\u30b9\u3067\u3082\u81ea\u52d5\u7684\u306b\u8aad\u3080 \u3068\u3044\u3046\u6a5f\u80fd\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n\n\u305f\u3060\u3057 PHPUnit \u306e bootstrap \u3067\u6307\u5b9a\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u8aad\u307e\u308c\u306a\u304f\u306a\u308b\u306e\u3067\u3001bootstrap \u3067 require_once 'PHPUnit/Framework/Assert/Functions.php' \u306a\u3069\u3068\u3057\u3066\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3067 $this \u3092\u4ed8\u3051\u306a\u304f\u3066\u3082\u826f\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u305f\u308a\u3059\u308b\u5834\u5408\u306f\u30c6\u30b9\u30c8\u306e\u4e2d\u3067\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test1()\n    {\n        require_once 'PHPUnit/Framework/Assert/Functions.php';\n\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects(any())\n            ->method('func')\n            ->will(returnValue(\"this is mock value\"))\n        ;\n\n        assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n\n\u6b21\u306e\u3088\u3046\u306a\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```php\n<?php\nclass StaticMethods\n{\n    public static function func()\n    {\n        return \"this is static method\";\n    }\n}\n```\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3067 `StaticMethods::func()` \u306a\u3069\u3068\u30af\u30e9\u30b9\u540d\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u56f0\u96e3\u3067\u3059\u3002\n\n.\n\n\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u9759\u7684\u30e1\u30bd\u30c3\u30c9\uff08\u3092\u6301\u3064\u30af\u30e9\u30b9\uff09\u3092\u30e2\u30c3\u30af\uff08\u30b9\u30bf\u30d6\uff09\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u30d1\u30fc\u30b7\u30e3\u30eb\u30e2\u30c3\u30af\u306f\u3067\u304d\u307e\u305b\u3093\uff09\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    /**\n     * @param string $class\n     * @param array $methods\n     * @return \\PHPUnit_Framework_MockObject_MockObject\n     */\n    protected function getStaticMock($class, array $methods = array())\n    {\n        $arr = explode(\"\\\\\", trim($class, '\\\\'));\n        $origShortName = array_pop($arr);\n        $origNamespace = implode(\"\\\\\", $arr);\n\n        $dummyNamespace = trim('__DUMMY__\\\\' . $origNamespace, '\\\\');\n        $dummyShortName = $origShortName;\n        $dummyClassName = \"$dummyNamespace\\\\$dummyShortName\";\n\n        if (class_exists($dummyClassName, false) == false) {\n            $code = [];\n            $code[] = \"namespace $dummyNamespace;\";\n            $code[] = \"class $dummyShortName {\";\n            foreach ($methods as $method) {\n                $code[] = \"public static function $method(){}\";\n            }\n            $code[] = \"}\";\n            eval(implode(\"\\n\", $code));\n        }\n\n        $mock = $this->getMock($dummyClassName, $methods);\n        class_alias(get_class($mock), $class);\n        return $mock;\n    }\n\n    public function test()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n```\n\n`StaticMethods` \u30af\u30e9\u30b9\u304c\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u6642\u306b\u306f\u307e\u3060\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b `getStaticMock()` \u306e\u7b2c\uff12\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092\u9069\u5f53\u306a\u540d\u524d\u3067\u5b9a\u7fa9\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092 `class_alias` \u3067\u672c\u6765\u306e\u30af\u30e9\u30b9\u540d\u306b\u30a8\u30a4\u30ea\u30a2\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a73\u3057\u304f\u306a\u3044\u3067\u3059\u304c Mockery \u306f\u540c\u3058\u3088\u3046\u306a\u539f\u7406\u3067\u9759\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u306b\u3067\u304d\u308b\u3089\u3057\u3044\u3067\u3059\u3002\n\n\u306a\u304a `StaticMethods` \u3092\u30e2\u30c3\u30af\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3001\u5225\u306e\u30c6\u30b9\u30c8\u3067 `StaticMethods` \u3092\u547c\u3076\u3068\u610f\u56f3\u3057\u306a\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3060\u3068 test1 \u306e\u5b9f\u884c\u6642\u306b `StaticMethods` \u304c\u30e2\u30c3\u30af\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u306e\u3067 `test2` \u306e\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u305b\u3093\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n\n    public function test2()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n        // Failed asserting that null matches expected 'this is static method'.\n    }\n}\n```\n\n`@runInSeparateProcess` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u3070 test1 \u306f\u5225\u30d7\u30ed\u30bb\u30b9\u306b\u306a\u308b\u306e\u3067\u56de\u907f\u3067\u304d\u307e\u3059\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n\n    public function test2()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n}\n```\n\n\u304c\u3057\u304b\u3057 `@runInSeparateProcess` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u5225\u30d7\u30ed\u30bb\u30b9\u306b\u3057\u3066\u3082\u3001\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u524d\u306b `StaticMethods` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u30e2\u30c3\u30af\u306e\u4f5c\u6210\u6642\u306b\u30af\u30e9\u30b9\u306e\u591a\u91cd\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u30b3\u30b1\u307e\u3059\u3002\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f test0 \u3067 `StaticMethods` \u306e\u672c\u6765\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u305b\u3093\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        // Cannot redeclare class StaticMethods\n\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n```\n\n\u3053\u308c\u306f StaticMethods \u3092\u30ed\u30fc\u30c9\u3059\u308b\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u306b `@runInSeparateProcess` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308c\u3070\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n```\n\n\u3042\u308b\u3044\u306f `@preserveGlobalState disabled` \u3068\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u3044\u3066\u304a\u3051\u3070 `@runInSeparateProcess` \u3067 **\u5206\u96e2\u30d7\u30ed\u30bb\u30b9\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u5143\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u8aad\u307e\u308c\u3066\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5206\u96e2\u30d7\u30ed\u30bb\u30b9\u3067\u3082\u81ea\u52d5\u7684\u306b\u8aad\u3080** \u3068\u3044\u3046\u6a5f\u80fd\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test1()\n    {\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects($this->any())\n            ->method('func')\n            ->will($this->returnValue(\"this is mock value\"))\n        ;\n\n        $this->assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n```\n\n\u305f\u3060\u3057 PHPUnit \u306e bootstrap \u3067\u6307\u5b9a\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u8aad\u307e\u308c\u306a\u304f\u306a\u308b\u306e\u3067\u3001bootstrap \u3067 `require_once 'PHPUnit/Framework/Assert/Functions.php'` \u306a\u3069\u3068\u3057\u3066\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3067 `$this` \u3092\u4ed8\u3051\u306a\u304f\u3066\u3082\u826f\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u305f\u308a\u3059\u308b\u5834\u5408\u306f\u30c6\u30b9\u30c8\u306e\u4e2d\u3067\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```php\n<?php\nclass StaticMethodsTest extends \\PHPUnit_Framework_TestCase\n{\n    // ...\n\n    public function test0()\n    {\n        $this->assertEquals(\"this is static method\", StaticMethods::func());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test1()\n    {\n        require_once 'PHPUnit/Framework/Assert/Functions.php';\n\n        $mock = $this->getStaticMock('StaticMethods', ['func']);\n        $mock->staticExpects(any())\n            ->method('func')\n            ->will(returnValue(\"this is mock value\"))\n        ;\n\n        assertEquals(\"this is mock value\", StaticMethods::func());\n    }\n}\n```\n", "tags": ["PHP", "PHPUnit3.7.37"]}