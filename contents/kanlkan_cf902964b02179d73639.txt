{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001wxPython\u3067\u30aa\u30bb\u30ed\u3092\u3064\u304f\u308d\u3046\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u305d\u306e\u969b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306eAI\u3068\u3057\u3066\u307e\u3068\u3082\u306a\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u3082\u306e\u306b\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u5c0e\u5165\u3059\u308b\u306e\u306f\u52c9\u5f37\u3057\u305f\u3066\u306eMin-Max\u6226\u7565\u3068\u3044\u3046\u30b2\u30fc\u30e0\u6226\u7565\u3067\u3059\u3002\u5b9f\u88c5\u3057\u3066AI\u540c\u58eb\u3067\u5bfe\u6226\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3084\u308b\u3053\u3068\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u4f5c\u6210\u3057\u305fwxPython\u306e\u30aa\u30bb\u30ed\u306b\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\nComputer vs Computer\u306e\u30b2\u30fc\u30e0\u30e2\u30fc\u30c9\u3092\uff12\u7a2e\u985e\u306eAI\u306e\u5bfe\u6226\u306b\u3059\u308b\n\u6307\u5b9a\u3057\u305f\u56de\u6570 Computer vs Computer\u306e\u5bfe\u6226\u3092\u884c\u3044\u3001\u52dd\u7387\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\u5148\u8aad\u307f\u7121\u3057\u306eAI\u3092\u4f5c\u6210\u3059\u308b\n\uff11\u624b\u5148\u8aad\u307f\u3059\u308bAI\u3092\u4f5c\u6210\u3059\u308b\nMin-Max\u6226\u7565\u3092\u884c\u3046AI\u3092\u4f5c\u6210\u3059\u308b\n\n\u3059\u3079\u3066\u5b9f\u88c5\u6e08\u307f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub \"alpha-beta\"\u30d6\u30e9\u30f3\u30c1\u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u6700\u65b0\u7248\u3092\u53d6\u5f97\u3057\u3066\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u524d\u5ea7\n\nComp vs Comp\u3092\uff12\u7a2e\u985e\u306eAI\u306e\u5bfe\u6226\u306b\u3059\u308b\ncomp_ai\u3068\u3044\u3046\u30b9\u30a4\u30c3\u30c1\u3092\u7528\u610f\u3057\u3066\u3001Computer\u306e\u30bf\u30fc\u30f3\u306b\u30c8\u30b0\u30eb\u3055\u305b\u3066AI\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002comp_ai\u306f\u521d\u671f\u5024\u3092[1,-1]\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f vs Man\u306e\u5834\u5408\u306fcomp_ai = 0\u306b\u56fa\u5b9a\u3067\u3059\u3002\ndef doComputer(self, my_color):\n    self.comp_ai *= -1\n    ...\n\ndef decideComputerNext(self, pos_list, gain_list): \n    ...\n    # Insert a computer's AI here \n    if self.comp_ai >= 0:    # comp_ai == 0 => vs Man mode \n        # Computer AI - A \n    else: \n        # Computer AI - B\n\n    return next_pos \n\n\n\n\u6307\u5b9a\u3057\u305f\u56de\u6570 Comp vs Comp\u306e\u5bfe\u6226\u3092\u884c\u3044\u3001\u52dd\u7387\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\u3053\u308c\u306fGUI\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u53f3\u4e0b\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nComputer vs Computer\u3092\u9078\u629e\u3057\u3001\u30eb\u30fc\u30d7\u56de\u6570\u3092\u5165\u308c\u3066\u3001\u300cComp vs Comp Loop\u300d\u3092\u62bc\u3059\u3068\u6307\u5b9a\u56de\u6570\u3060\u3051Comp vs Comp\u3092\u884c\u3044\u3001\u5404AI\u306e\u52dd\u5229\u6570\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u6700\u4e0b\u6bb5\u306e\u6570\u5b57\u306fAI-A\u52dd\u5229\u6570, AI-B\u52dd\u5229\u6570, Draw \u306e\u6570\u3067\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001Windows10\u3067GUI\u304c\u5d29\u308c\u308b\u3053\u3068\u306b\u5bfe\u3059\u308b\u5bfe\u7b56\u3068\u3057\u3066Sizer\u3092\u4f7f\u7528\u305b\u305a\u3001\uff11\u30d1\u30cd\u30eb\uff11\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067GUI\u3092\u4f5c\u6210\u3057\u306a\u304a\u3057\u307e\u3057\u305f\u3002\nSizer\u4f7f\u308f\u306a\u3044\u3068\u30ec\u30a4\u30a2\u30a6\u30c8\u304c\u5927\u5909\u3067\u3059\u3002\u3002\u3002\u306a\u305cWindows10\u3067\u306fSizer\u304c\u6b63\u3057\u304f\u52d5\u304b\u306a\u3044\u306e\u304b\u3002\u77e5\u3063\u3066\u308b\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5148\u8aad\u307f\u7121\u3057\u306eAI\u3092\u4f5c\u6210\u3059\u308b\n\u5148\u8aad\u307f\u7121\u3057\u3001\u3064\u307e\u308a\u77f3\u3092\u7f6e\u3051\u308b\u5834\u6240\u3059\u3079\u3066\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u7f6e\u304f\u5834\u6240\u3092\u6c7a\u3081\u307e\u3059\u3002\ndef computerAi_Random(self, pos_list, gain_list): \n    index = random.randint(0, len(pos_list)-1) \n    return pos_list[index] \n\n\n\uff11\u624b\u5148\u8aad\u307f\u3059\u308bAI\u3092\u4f5c\u6210\u3059\u308b\n\uff11\u624b\u5148\u8aad\u307f\u3001\u3064\u307e\u308a\u77f3\u3092\u7f6e\u3044\u305f\u3068\u304d\u306b\u53d6\u308c\u308b\u76f8\u624b\u306e\u77f3\u306e\u6570\u304c\u6700\u3082\u591a\u3044\u5834\u6240\u306b\u7f6e\u304d\u307e\u3059\u3002\n(\u30aa\u30bb\u30ed\u306e\u5b9a\u77f3\u3067\u306f\u3001\u5e8f\u76e4\u306f\u53d6\u308c\u308b\u77f3\u304c\u6700\u3082\u5c11\u306a\u3044\u4f4d\u7f6e\u306b\u7f6e\u304f\u306e\u304c\u826f\u3044\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\u307e\u3041\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3059\u3002)\ndef computerAi_1stGainMax(self, pos_list, gain_list): \n    index_list = [] \n    max_gain = max(gain_list) \n    for i, val in enumerate(gain_list): \n        if max_gain == val: \n            index_list.append(i) \n\n    tgt = random.randint(0, len(index_list)-1) \n    return pos_list[index_list[tgt]] \n\n\n\u672c\u7de8\n\nMin-Max\u6226\u7565(Min-Max\u6cd5)\nMin-Max\u6226\u7565\u3068\u306f\u3001\u304a\u4e92\u3044\u306b\u6700\u5584\u624b\u3092\u6253\u3064\u3068\u3057\u3066\u30b2\u30fc\u30e0\u6728\u306e\u72b6\u614b\u9077\u79fb\u3092\u9032\u3081\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3001\u6570\u624b\u5148\u307e\u3067\u306e\u3059\u3079\u3066\u306e\u679d\u3092\u8abf\u3079\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u9ed2\u3092\u81ea\u5206\u3068\u3057\u3066\u6700\u9069\u624b\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\u6700\u521d\u306e\u624b=\u9ed2\u306e\u624b\u756a\u3001\uff13\u624b\u5148\u307e\u3067\u8003\u3048\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001\u9ed2\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u306f\u6c34\u8272\u306e\u4e38\u5370\u3001\u3072\u3063\u304f\u308a\u8fd4\u305b\u308b\u77f3\u306e\u6570\u306f\u4e38\u306e\u4e2d\u306e\u6570\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u3001\u9ed2\u304c\u03c300\u306e\u624b\u3092\u9078\u3093\u3060\u3068\u3059\u308b\u3068\u3001\u6b21\u306e\u767d\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u3068\u53d6\u308c\u308b\u77f3\u306e\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3001\u767d\u304c\u03c310\u306e\u624b\u3092\u9078\u3093\u3060\u3068\u3059\u308b\u3068\u3001\u6b21\u306e\u9ed2\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u3068\u53d6\u308c\u308b\u77f3\u306e\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u8981\u9818\u3067\uff12\u624b\u5148\u307e\u3067\u306e\u30b2\u30fc\u30e0\u6728\u3092\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff12\u624b\u5148\u306e\u9ed2\u306e\u624b\u756a\u306e\u8a55\u4fa1\u5024\u306f\u53d6\u308c\u308b\u77f3\u306e\u6570\u306e\u6700\u5927\u5024(\u03c320\uff5e\u03c324\u306e\u6700\u5927\u5024)\u3067\u3059\u3002\"\u9ed22\"\u5217\u306e\u4e38\u306e\u4e2d\u306e\u4e0b\u6bb5\u306e\u6570\u5b57\u304c\u8a55\u4fa1\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b21\u306b\uff11\u624b\u5148\u306e\u767d\u306e\u624b\u756a\u3067\u3042\u308b\"\u767d1\"\u306e\u5217\u306b\u8a55\u4fa1\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\u767d\u3082\u81ea\u8eab\u306e\u6700\u5584\u624b\u3092\u9078\u629e\u3059\u308b\u306e\u3067\u3001\"\u9ed2\uff12\"\u5217\u306e\u8a55\u4fa1\u5024\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b\u624b\u3092\u9078\u3076\u306f\u305a\u3067\u3059\u3002\u3064\u307e\u308a\"\u9ed22\"\u306e\u8a55\u4fa1\u5024\u306e\u6700\u5c0f\u5024\u3092\"\u767d1\"\u5217\u306b\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\n\n\u6b21\u306b\"\u767d1\"\u304b\u3089\"\u9ed21\"\u306b\u8a55\u4fa1\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\u524d\u56de\u3068\u306f\u9006\u306b\u9ed2\u306f\u81ea\u5206\u306e\u8a55\u4fa1\u5024\u304c\u6700\u5927\u306b\u306a\u308b\u3088\u3046\u306b\u624b\u3092\u9078\u3076\u306f\u305a\u306a\u306e\u3067\u3001\"\u767d1\"\u306e\u8a55\u4fa1\u5024\u306e\u6700\u5927\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u8003\u3048\u3066\u3044\u304f\u3068\u3001\u9ed2\u306e\u521d\u624b\u304c\u6c7a\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u8a55\u4fa1\u5024\u306e\u6700\u5c0f\u3001\u6700\u5927\u3092\u7e70\u308a\u8fd4\u3057\u3066\u624b\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3001Min-Max\u6226\u7565\u3068\u547c\u3073\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u03c300 \uff5e \u03c303 \u306e\u3069\u306e\u624b\u3067\u3082\u8a55\u4fa1\u5024\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u3069\u306e\u3088\u3046\u306b\u7f6e\u3044\u3066\u3082\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3053\u3068\u306f\u521d\u624b\u3067\u7f6e\u3051\u308b\u5834\u6240\u304c\u70b9\u5bfe\u79f0\u306b\u306a\u308b\u3053\u3068\u304b\u3089\u3082\u76f4\u611f\u7684\u306b\u6b63\u3057\u305d\u3046\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u9762\u767d\u5473\u306b\u304b\u3051\u308b\u4f8b\u3067\u3057\u305f\u306d\u3002\u30b2\u30fc\u30e0\u5f8c\u534a\u3067\u8003\u3048\u308b\u3068\u3001\u6728\u306e\u5927\u304d\u3055\u304c\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u306e\u3067\u3001\u521d\u624b\u3092\u4f8b\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\n\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\uff13\u624b\u5148\u8aad\u307f\u306a\u306e\u306b\u3001minMax\u306emax_depth\u304c\u306a\u305c\uff12\u306a\u306e\u304b\u3068\u3044\u3046\u3068\u3001computeAi_MinMax_3\u306e\u4e2d\u3067\u6700\u5f8c\u306e\u8a55\u4fa1\u5024\u4f1d\u642c\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5f15\u6570\u306b\u306f\uff11\u5f15\u3044\u305f\u6570\u3092\u5165\u308c\u307e\u3059\u3002\n    def computerAi_MinMax_3(self, pos_list, gain_list):\n        value = []\n        update_pos_list = []\n\n        self.log_on = False \n        value = self.minMax(2, 2, pos_list, gain_list)\n        for i, pos in enumerate(pos_list):\n            if max(value) == value[i]:\n                update_pos_list.append(pos)\n\n        self.log_on = True\n        tgt = random.randint(0, len(update_pos_list)-1)\n        return update_pos_list[tgt]\n\n    def minMax(self, depth, max_depth, pos_list, gain_list):  # depth > 0\n        value = []\n        next_value = []\n        next_pos_list = []\n        next_gain_list = []\n        self.backUpAllState(self.state_storage_list[depth])\n        for pos in pos_list:\n            ret =  self.putComputerStone(pos, False)\n            next_pos_list, next_gain_list = self.scanPuttableCell()\n            if (depth > 1):\n                next_value = self.minMax(depth-1, max_depth, next_pos_list, next_gain_list)\n                if len(next_value) == 0:\n                    value.append(0)\n                elif (max_depth - depth) % 2 == 0:\n                    value.append(min(next_value))\n                else:\n                    value.append(max(next_value))\n            else:\n                if len(next_gain_list) == 0:\n                    value.append(0)\n                elif (max_depth - depth) % 2 == 0:\n                    value.append(min(next_gain_list))\n                else:\n                    value.append(max(next_gain_list))\n\n            self.restoreAllState(self.state_storage_list[depth])\n\n        return value\n\n\u3061\u3087\u3063\u3068\u5197\u9577\u306a\u90e8\u5206\u304c\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001\u3059\u3063\u304d\u308a\u3068\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3053\u3053\u307e\u3067\u6765\u308b\u306e\u306b\u3068\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\u304c\u3002\u3002\u3002\n\nAI\u540c\u58eb\u5bfe\u6226\nAI\u540c\u58eb\u3067\uff11\uff10\uff10\u6226\u5bfe\u6226\u3057\u3066\u307f\u307e\u3059\u3002\u5148\u653b\u3001\u5f8c\u653b\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nMin-Max_3\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\nMin-Max_3\u624b\u5148\u8aad\u307f vs \uff11\u624b\u5148\u8aad\u307f\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nMin-Max 70\u52dd\u300125\u6557\u30005\u5f15\u304d\u5206\u3051\nMin-Max 48\u52dd\u300148\u6557\u30014\u5f15\u304d\u5206\u3051\n\n\u304a\u3084\u3001Min-Max\u6226\u7565\u3042\u307e\u308a\u5f37\u304f\u306a\u3044\u3067\u3059\u306d\u3002\u5b9f\u88c5\u306f\u5408\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3002\n\u307e\u3042\u3001\u5148\u8aad\u307f\u7121\u3057\u306b\u52dd\u3061\u8d8a\u3057\u3066\u3044\u308b\u306e\u304c\u6551\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306eMin-Max\u6226\u7565\u306f\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3054\u81ea\u8eab\u306e\u624b\u3067Computer vs Computer\u306e\u5bfe\u6226\u3092\u3055\u305b\u308b\u5834\u5408\u306b\u306f\u3001PC\u306e\u6027\u80fd\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001100\u6226\u3059\u308b\u306e\u306b10\u5206\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\u4eca\u5f8c\u306fMin-Max\u6226\u7565\u306e\u63a2\u7d22\u7bc4\u56f2\u3092\u72ed\u304f\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308b\u03b1\u03b2\u6226\u7565\u306e\u5b9f\u88c5\u3082\u8a66\u305d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3042\u3068\u3065\u3051\nMin-Max\u6226\u7565\u304c\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u7406\u7531\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u306e\u306f\u3001\u3069\u3053\u306e\u77f3\u3067\u3082+1\u3068\u3057\u3066\u5024\u3092\u8a55\u4fa1\u3057\u3066\u3044\u305f\u3053\u3068\u3067\u3059\u3002\n\u305d\u3053\u3067\u5404\u5834\u6240\u306b\u91cd\u307f\u3092\u3064\u3051\u307e\u3059\u3002\u89d2\u304c\u306a\u3093\u3068\u306a\u304f\u8a55\u4fa1\u5024\u304c\u9ad8\u305d\u3046\u306a\u306e\u306f\u5206\u304b\u308a\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u624b\u3065\u307e\u308a\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://uguisu.skr.jp/othello/5-1.html\n\u3068\u3044\u3046\u308f\u3051\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u91cd\u307f\u3065\u3051\u3092\u3057\u3066\u3001gain\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u6539\u9020\u3057\u307e\u3059\u3002\n\ngGain = [( 30, -12,  0, -1, -1,  0, -12,  30), \\\n         (-12, -15, -3, -3, -3, -3, -15, -12), \\\n         (  0,  -3,  0, -1, -1,  0,  -3,   0), \\\n         ( -1,  -3, -1, -1, -1, -1,  -3,  -1), \\\n         ( -1,  -3, -1, -1, -1, -1,  -3,  -1), \\\n         (  0,  -3,  0, -1, -1,  0,  -3,   0), \\\n         (-12, -15, -3, -3, -3, -3, -15, -12), \\\n         ( 30, -12,  0, -1, -1,  0, -12,  30)]\n...\n\n    def vecScan(self, pos, reverse_on):\n        rev_list = []\n        temp_list = []\n        gain = 0\n        is_hit = 0\n        if reverse_on == 0 and self.getCellState(pos,(0,0)) != \"green\":\n            return 0, gain\n\n        if self.now_color == \"black\":\n            rev_color = \"white\"\n        else:\n            rev_color = \"black\"\n\n        for v in gVec:\n            temp_list = []\n            for i in range(1, 8):\n                if self.getCellState(pos,(v[0]*i,v[1]*i)) == rev_color:\n                    temp_list.append(self.movePos(pos,(v[0]*i, v[1]*i)))\n                    if self.getCellState(pos,(v[0]*i+v[0], v[1]*i+v[1])) == self.now_color:\n                        is_hit = 1\n                        for j in temp_list:\n                            rev_list.append(j)\n                        break\n                else:\n                    break\n\n        if reverse_on == True:\n            if self.log_on == True:\n                self.log_textctrl.AppendText(\"put:\" + str(pos) + \", \"  + str(rev_list) + \" to \" + str(self.now_color) + \"\\n\")\n            for rev_pos in rev_list:\n                self.setCellState(rev_pos, (0,0), self.now_color)\n                if self.now_color == \"black\":\n                    self.player_score[0] += 1\n                    self.player_score[1] -= 1\n                else:\n                    self.player_score[1] += 1\n                    self.player_score[0] -= 1\n                self.updateScoreLabel()\n\n        gain = self.calcGain(pos, rev_list)\n        return is_hit, gain\n\n    def calcGain(self, pos, rev_list):\n        ret_gain = 0\n        ret_gain += gGain[pos[0]][pos[1]]\n\n        for rev_pos in rev_list:\n            ret_gain += gGain[rev_pos[0]][rev_pos[1]]\n\n        return ret_gain\n\n\u305d\u308c\u3067\u306f\u6539\u3081\u3066\u5bfe\u6226\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\nMin-Max_3\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\nMin-Max_3\u624b\u5148\u8aad\u307f vs \uff11\u624b\u5148\u8aad\u307f\n\uff11\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nMin-Max 38\u52dd\u300155\u6557\u30017\u5f15\u304d\u5206\u3051\nMin-Max 19\u52dd\u300180\u6557\u30011\u5f15\u304d\u5206\u3051\n1\u624b\u5148\u8aad\u307f 83\u52dd\u300116\u6557\u30011\u5f15\u304d\u5206\u3051\n\n\u3046\u3045... Min-Max\u306e\u52dd\u7387\u304c\u4e0b\u304c\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n1\u624b\u5148\u8aad\u307f\u304c\u304b\u306a\u308a\u5f37\u3044\u3067\u3059\u3002\n\u518d\u8003\u306e\u4f59\u5730\u3042\u308a\u3067\u3059\u3002\u304a\u7c97\u672b\u69d8\u3067\u3057\u305f\u3002\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001[wxPython\u3067\u30aa\u30bb\u30ed\u3092\u3064\u304f\u308d\u3046](http://qiita.com/kanlkan/items/5e6f2e63de406f46b3b1)\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u305d\u306e\u969b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306eAI\u3068\u3057\u3066\u307e\u3068\u3082\u306a\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u306e\u3067\u3001\u5c11\u3057\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u3082\u306e\u306b\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u5c0e\u5165\u3059\u308b\u306e\u306f\u52c9\u5f37\u3057\u305f\u3066\u306eMin-Max\u6226\u7565\u3068\u3044\u3046\u30b2\u30fc\u30e0\u6226\u7565\u3067\u3059\u3002\u5b9f\u88c5\u3057\u3066AI\u540c\u58eb\u3067\u5bfe\u6226\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u3084\u308b\u3053\u3068\n[\u4ee5\u524d\u306e\u8a18\u4e8b](http://qiita.com/kanlkan/items/5e6f2e63de406f46b3b1)\u3067\u4f5c\u6210\u3057\u305fwxPython\u306e\u30aa\u30bb\u30ed\u306b\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\n 1. Computer vs Computer\u306e\u30b2\u30fc\u30e0\u30e2\u30fc\u30c9\u3092\uff12\u7a2e\u985e\u306eAI\u306e\u5bfe\u6226\u306b\u3059\u308b\n 1. \u6307\u5b9a\u3057\u305f\u56de\u6570 Computer vs Computer\u306e\u5bfe\u6226\u3092\u884c\u3044\u3001\u52dd\u7387\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n 1. \u5148\u8aad\u307f\u7121\u3057\u306eAI\u3092\u4f5c\u6210\u3059\u308b\n 1. \uff11\u624b\u5148\u8aad\u307f\u3059\u308bAI\u3092\u4f5c\u6210\u3059\u308b\n 1. Min-Max\u6226\u7565\u3092\u884c\u3046AI\u3092\u4f5c\u6210\u3059\u308b\n\n\u3059\u3079\u3066\u5b9f\u88c5\u6e08\u307f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[GitHub \"alpha-beta\"\u30d6\u30e9\u30f3\u30c1](https://github.com/kanlkan/reversi-py/tree/alpha-beta)\u306b\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u6700\u65b0\u7248\u3092\u53d6\u5f97\u3057\u3066\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n# \u524d\u5ea7\n## Comp vs Comp\u3092\uff12\u7a2e\u985e\u306eAI\u306e\u5bfe\u6226\u306b\u3059\u308b\ncomp_ai\u3068\u3044\u3046\u30b9\u30a4\u30c3\u30c1\u3092\u7528\u610f\u3057\u3066\u3001Computer\u306e\u30bf\u30fc\u30f3\u306b\u30c8\u30b0\u30eb\u3055\u305b\u3066AI\u3092\u5207\u308a\u66ff\u3048\u3066\u3044\u307e\u3059\u3002comp_ai\u306f\u521d\u671f\u5024\u3092[1,-1]\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f vs Man\u306e\u5834\u5408\u306fcomp_ai = 0\u306b\u56fa\u5b9a\u3067\u3059\u3002\n\n```py\ndef doComputer(self, my_color):\n    self.comp_ai *= -1\n    ...\n\ndef decideComputerNext(self, pos_list, gain_list): \n    ...\n    # Insert a computer's AI here \n    if self.comp_ai >= 0:    # comp_ai == 0 => vs Man mode \n        # Computer AI - A \n    else: \n        # Computer AI - B\n\n    return next_pos \n\n```\n\n## \u6307\u5b9a\u3057\u305f\u56de\u6570 Comp vs Comp\u306e\u5bfe\u6226\u3092\u884c\u3044\u3001\u52dd\u7387\u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\u3053\u308c\u306fGUI\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u53f3\u4e0b\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nComputer vs Computer\u3092\u9078\u629e\u3057\u3001\u30eb\u30fc\u30d7\u56de\u6570\u3092\u5165\u308c\u3066\u3001\u300cComp vs Comp Loop\u300d\u3092\u62bc\u3059\u3068\u6307\u5b9a\u56de\u6570\u3060\u3051Comp vs Comp\u3092\u884c\u3044\u3001\u5404AI\u306e\u52dd\u5229\u6570\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u6700\u4e0b\u6bb5\u306e\u6570\u5b57\u306fAI-A\u52dd\u5229\u6570, AI-B\u52dd\u5229\u6570, Draw \u306e\u6570\u3067\u3059\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001[Windows10\u3067GUI\u304c\u5d29\u308c\u308b](http://qiita.com/kanlkan/items/5e6f2e63de406f46b3b1#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%92%B0%E5%A2%83)\u3053\u3068\u306b\u5bfe\u3059\u308b\u5bfe\u7b56\u3068\u3057\u3066Sizer\u3092\u4f7f\u7528\u305b\u305a\u3001\uff11\u30d1\u30cd\u30eb\uff11\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067GUI\u3092\u4f5c\u6210\u3057\u306a\u304a\u3057\u307e\u3057\u305f\u3002\nSizer\u4f7f\u308f\u306a\u3044\u3068\u30ec\u30a4\u30a2\u30a6\u30c8\u304c\u5927\u5909\u3067\u3059\u3002\u3002\u3002\u306a\u305cWindows10\u3067\u306fSizer\u304c\u6b63\u3057\u304f\u52d5\u304b\u306a\u3044\u306e\u304b\u3002\u77e5\u3063\u3066\u308b\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u5148\u8aad\u307f\u7121\u3057\u306eAI\u3092\u4f5c\u6210\u3059\u308b\n\u5148\u8aad\u307f\u7121\u3057\u3001\u3064\u307e\u308a\u77f3\u3092\u7f6e\u3051\u308b\u5834\u6240\u3059\u3079\u3066\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u7f6e\u304f\u5834\u6240\u3092\u6c7a\u3081\u307e\u3059\u3002\n\n```py\ndef computerAi_Random(self, pos_list, gain_list): \n    index = random.randint(0, len(pos_list)-1) \n    return pos_list[index] \n```\n\n## \uff11\u624b\u5148\u8aad\u307f\u3059\u308bAI\u3092\u4f5c\u6210\u3059\u308b\n\uff11\u624b\u5148\u8aad\u307f\u3001\u3064\u307e\u308a\u77f3\u3092\u7f6e\u3044\u305f\u3068\u304d\u306b\u53d6\u308c\u308b\u76f8\u624b\u306e\u77f3\u306e\u6570\u304c\u6700\u3082\u591a\u3044\u5834\u6240\u306b\u7f6e\u304d\u307e\u3059\u3002\n(\u30aa\u30bb\u30ed\u306e\u5b9a\u77f3\u3067\u306f\u3001\u5e8f\u76e4\u306f\u53d6\u308c\u308b\u77f3\u304c\u6700\u3082\u5c11\u306a\u3044\u4f4d\u7f6e\u306b\u7f6e\u304f\u306e\u304c\u826f\u3044\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\u307e\u3041\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3059\u3002)\n\n```py\ndef computerAi_1stGainMax(self, pos_list, gain_list): \n    index_list = [] \n    max_gain = max(gain_list) \n    for i, val in enumerate(gain_list): \n        if max_gain == val: \n            index_list.append(i) \n \n    tgt = random.randint(0, len(index_list)-1) \n    return pos_list[index_list[tgt]] \n```\n\n# \u672c\u7de8\n## Min-Max\u6226\u7565(Min-Max\u6cd5)\nMin-Max\u6226\u7565\u3068\u306f\u3001\u304a\u4e92\u3044\u306b\u6700\u5584\u624b\u3092\u6253\u3064\u3068\u3057\u3066\u30b2\u30fc\u30e0\u6728\u306e\u72b6\u614b\u9077\u79fb\u3092\u9032\u3081\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3001\u6570\u624b\u5148\u307e\u3067\u306e\u3059\u3079\u3066\u306e\u679d\u3092\u8abf\u3079\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u9ed2\u3092\u81ea\u5206\u3068\u3057\u3066\u6700\u9069\u624b\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\u6700\u521d\u306e\u624b=\u9ed2\u306e\u624b\u756a\u3001\uff13\u624b\u5148\u307e\u3067\u8003\u3048\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001\u9ed2\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u306f\u6c34\u8272\u306e\u4e38\u5370\u3001\u3072\u3063\u304f\u308a\u8fd4\u305b\u308b\u77f3\u306e\u6570\u306f\u4e38\u306e\u4e2d\u306e\u6570\u3067\u3059\u3002\n![init-.png](https://qiita-image-store.s3.amazonaws.com/0/127380/c9d35f5c-188c-3f2d-9ac4-0fe0626084c1.png)\n\u3053\u3053\u3067\u3001\u9ed2\u304c\u03c300\u306e\u624b\u3092\u9078\u3093\u3060\u3068\u3059\u308b\u3068\u3001\u6b21\u306e\u767d\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u3068\u53d6\u308c\u308b\u77f3\u306e\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n![sigma00-.png](https://qiita-image-store.s3.amazonaws.com/0/127380/e95737dc-d06d-ec0c-1d54-2012eb9ce557.png)\n\u3053\u3053\u3067\u3001\u767d\u304c\u03c310\u306e\u624b\u3092\u9078\u3093\u3060\u3068\u3059\u308b\u3068\u3001\u6b21\u306e\u9ed2\u306e\u624b\u756a\u3067\u7f6e\u3051\u308b\u5834\u6240\u3068\u53d6\u308c\u308b\u77f3\u306e\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n![sigma10-.png](https://qiita-image-store.s3.amazonaws.com/0/127380/cc9eeaee-17f3-d63e-c820-260893308386.png)\n\u3053\u306e\u8981\u9818\u3067\uff12\u624b\u5148\u307e\u3067\u306e\u30b2\u30fc\u30e0\u6728\u3092\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\uff12\u624b\u5148\u306e\u9ed2\u306e\u624b\u756a\u306e\u8a55\u4fa1\u5024\u306f\u53d6\u308c\u308b\u77f3\u306e\u6570\u306e\u6700\u5927\u5024(\u03c320\uff5e\u03c324\u306e\u6700\u5927\u5024)\u3067\u3059\u3002\"\u9ed22\"\u5217\u306e\u4e38\u306e\u4e2d\u306e\u4e0b\u6bb5\u306e\u6570\u5b57\u304c\u8a55\u4fa1\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n![game-tree.png](https://qiita-image-store.s3.amazonaws.com/0/127380/b5baf09b-d93d-5250-91f6-9f1b5a0a2cf7.png)\n\u6b21\u306b\uff11\u624b\u5148\u306e\u767d\u306e\u624b\u756a\u3067\u3042\u308b\"\u767d1\"\u306e\u5217\u306b\u8a55\u4fa1\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\u767d\u3082\u81ea\u8eab\u306e\u6700\u5584\u624b\u3092\u9078\u629e\u3059\u308b\u306e\u3067\u3001\"\u9ed2\uff12\"\u5217\u306e\u8a55\u4fa1\u5024\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b\u624b\u3092\u9078\u3076\u306f\u305a\u3067\u3059\u3002\u3064\u307e\u308a\"\u9ed22\"\u306e\u8a55\u4fa1\u5024\u306e\u6700\u5c0f\u5024\u3092\"\u767d1\"\u5217\u306b\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\n![game-tree2.png](https://qiita-image-store.s3.amazonaws.com/0/127380/afac3e33-34d8-88d0-2ce3-03188343c4a3.png)\n\u6b21\u306b\"\u767d1\"\u304b\u3089\"\u9ed21\"\u306b\u8a55\u4fa1\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\u524d\u56de\u3068\u306f\u9006\u306b\u9ed2\u306f\u81ea\u5206\u306e\u8a55\u4fa1\u5024\u304c\u6700\u5927\u306b\u306a\u308b\u3088\u3046\u306b\u624b\u3092\u9078\u3076\u306f\u305a\u306a\u306e\u3067\u3001\"\u767d1\"\u306e\u8a55\u4fa1\u5024\u306e\u6700\u5927\u5024\u3092\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u8003\u3048\u3066\u3044\u304f\u3068\u3001\u9ed2\u306e\u521d\u624b\u304c\u6c7a\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u8a55\u4fa1\u5024\u306e\u6700\u5c0f\u3001\u6700\u5927\u3092\u7e70\u308a\u8fd4\u3057\u3066\u624b\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3001Min-Max\u6226\u7565\u3068\u547c\u3073\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u03c300 \uff5e \u03c303 \u306e\u3069\u306e\u624b\u3067\u3082\u8a55\u4fa1\u5024\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u3069\u306e\u3088\u3046\u306b\u7f6e\u3044\u3066\u3082\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3053\u3068\u306f\u521d\u624b\u3067\u7f6e\u3051\u308b\u5834\u6240\u304c\u70b9\u5bfe\u79f0\u306b\u306a\u308b\u3053\u3068\u304b\u3089\u3082\u76f4\u611f\u7684\u306b\u6b63\u3057\u305d\u3046\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u9762\u767d\u5473\u306b\u304b\u3051\u308b\u4f8b\u3067\u3057\u305f\u306d\u3002\u30b2\u30fc\u30e0\u5f8c\u534a\u3067\u8003\u3048\u308b\u3068\u3001\u6728\u306e\u5927\u304d\u3055\u304c\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u306e\u3067\u3001\u521d\u624b\u3092\u4f8b\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n## \u5b9f\u88c5\n\n\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\uff13\u624b\u5148\u8aad\u307f\u306a\u306e\u306b\u3001minMax\u306emax_depth\u304c\u306a\u305c\uff12\u306a\u306e\u304b\u3068\u3044\u3046\u3068\u3001computeAi_MinMax_3\u306e\u4e2d\u3067\u6700\u5f8c\u306e\u8a55\u4fa1\u5024\u4f1d\u642c\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5f15\u6570\u306b\u306f\uff11\u5f15\u3044\u305f\u6570\u3092\u5165\u308c\u307e\u3059\u3002\n\n```py\n    def computerAi_MinMax_3(self, pos_list, gain_list):\n        value = []\n        update_pos_list = []\n        \n        self.log_on = False \n        value = self.minMax(2, 2, pos_list, gain_list)\n        for i, pos in enumerate(pos_list):\n            if max(value) == value[i]:\n                update_pos_list.append(pos)\n\n        self.log_on = True\n        tgt = random.randint(0, len(update_pos_list)-1)\n        return update_pos_list[tgt]\n\n    def minMax(self, depth, max_depth, pos_list, gain_list):  # depth > 0\n        value = []\n        next_value = []\n        next_pos_list = []\n        next_gain_list = []\n        self.backUpAllState(self.state_storage_list[depth])\n        for pos in pos_list:\n            ret =  self.putComputerStone(pos, False)\n            next_pos_list, next_gain_list = self.scanPuttableCell()\n            if (depth > 1):\n                next_value = self.minMax(depth-1, max_depth, next_pos_list, next_gain_list)\n                if len(next_value) == 0:\n                    value.append(0)\n                elif (max_depth - depth) % 2 == 0:\n                    value.append(min(next_value))\n                else:\n                    value.append(max(next_value))\n            else:\n                if len(next_gain_list) == 0:\n                    value.append(0)\n                elif (max_depth - depth) % 2 == 0:\n                    value.append(min(next_gain_list))\n                else:\n                    value.append(max(next_gain_list))\n\n            self.restoreAllState(self.state_storage_list[depth])\n\n        return value\n```\n\n\u3061\u3087\u3063\u3068\u5197\u9577\u306a\u90e8\u5206\u304c\u6b8b\u308a\u307e\u3057\u305f\u304c\u3001\u3059\u3063\u304d\u308a\u3068\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3053\u3053\u307e\u3067\u6765\u308b\u306e\u306b\u3068\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\u304c\u3002\u3002\u3002\n\n## AI\u540c\u58eb\u5bfe\u6226\nAI\u540c\u58eb\u3067\uff11\uff10\uff10\u6226\u5bfe\u6226\u3057\u3066\u307f\u307e\u3059\u3002\u5148\u653b\u3001\u5f8c\u653b\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n1. Min-Max_3\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\n1. Min-Max_3\u624b\u5148\u8aad\u307f vs \uff11\u624b\u5148\u8aad\u307f\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n1. Min-Max 70\u52dd\u300125\u6557\u30005\u5f15\u304d\u5206\u3051\n1. Min-Max 48\u52dd\u300148\u6557\u30014\u5f15\u304d\u5206\u3051\n\n\u304a\u3084\u3001Min-Max\u6226\u7565\u3042\u307e\u308a\u5f37\u304f\u306a\u3044\u3067\u3059\u306d\u3002\u5b9f\u88c5\u306f\u5408\u3063\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3002\n\u307e\u3042\u3001\u5148\u8aad\u307f\u7121\u3057\u306b\u52dd\u3061\u8d8a\u3057\u3066\u3044\u308b\u306e\u304c\u6551\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306eMin-Max\u6226\u7565\u306f\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3054\u81ea\u8eab\u306e\u624b\u3067Computer vs Computer\u306e\u5bfe\u6226\u3092\u3055\u305b\u308b\u5834\u5408\u306b\u306f\u3001PC\u306e\u6027\u80fd\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001100\u6226\u3059\u308b\u306e\u306b10\u5206\u304f\u3089\u3044\u304b\u304b\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\u4eca\u5f8c\u306fMin-Max\u6226\u7565\u306e\u63a2\u7d22\u7bc4\u56f2\u3092\u72ed\u304f\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3092\u56f3\u308b\u03b1\u03b2\u6226\u7565\u306e\u5b9f\u88c5\u3082\u8a66\u305d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u3042\u3068\u3065\u3051\nMin-Max\u6226\u7565\u304c\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u7406\u7531\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u306e\u306f\u3001\u3069\u3053\u306e\u77f3\u3067\u3082+1\u3068\u3057\u3066\u5024\u3092\u8a55\u4fa1\u3057\u3066\u3044\u305f\u3053\u3068\u3067\u3059\u3002\n\u305d\u3053\u3067\u5404\u5834\u6240\u306b\u91cd\u307f\u3092\u3064\u3051\u307e\u3059\u3002\u89d2\u304c\u306a\u3093\u3068\u306a\u304f\u8a55\u4fa1\u5024\u304c\u9ad8\u305d\u3046\u306a\u306e\u306f\u5206\u304b\u308a\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u624b\u3065\u307e\u308a\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[http://uguisu.skr.jp/othello/5-1.html](http://uguisu.skr.jp/othello/5-1.html)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u91cd\u307f\u3065\u3051\u3092\u3057\u3066\u3001gain\u3092\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u6539\u9020\u3057\u307e\u3059\u3002\n![weight.png](https://qiita-image-store.s3.amazonaws.com/0/127380/85177b38-6041-495b-26b4-1b48c8175858.png)\n\n```py\ngGain = [( 30, -12,  0, -1, -1,  0, -12,  30), \\\n         (-12, -15, -3, -3, -3, -3, -15, -12), \\\n         (  0,  -3,  0, -1, -1,  0,  -3,   0), \\\n         ( -1,  -3, -1, -1, -1, -1,  -3,  -1), \\\n         ( -1,  -3, -1, -1, -1, -1,  -3,  -1), \\\n         (  0,  -3,  0, -1, -1,  0,  -3,   0), \\\n         (-12, -15, -3, -3, -3, -3, -15, -12), \\\n         ( 30, -12,  0, -1, -1,  0, -12,  30)]\n...\n\n    def vecScan(self, pos, reverse_on):\n        rev_list = []\n        temp_list = []\n        gain = 0\n        is_hit = 0\n        if reverse_on == 0 and self.getCellState(pos,(0,0)) != \"green\":\n            return 0, gain\n\n        if self.now_color == \"black\":\n            rev_color = \"white\"\n        else:\n            rev_color = \"black\"\n            \n        for v in gVec:\n            temp_list = []\n            for i in range(1, 8):\n                if self.getCellState(pos,(v[0]*i,v[1]*i)) == rev_color:\n                    temp_list.append(self.movePos(pos,(v[0]*i, v[1]*i)))\n                    if self.getCellState(pos,(v[0]*i+v[0], v[1]*i+v[1])) == self.now_color:\n                        is_hit = 1\n                        for j in temp_list:\n                            rev_list.append(j)\n                        break\n                else:\n                    break\n        \n        if reverse_on == True:\n            if self.log_on == True:\n                self.log_textctrl.AppendText(\"put:\" + str(pos) + \", \"  + str(rev_list) + \" to \" + str(self.now_color) + \"\\n\")\n            for rev_pos in rev_list:\n                self.setCellState(rev_pos, (0,0), self.now_color)\n                if self.now_color == \"black\":\n                    self.player_score[0] += 1\n                    self.player_score[1] -= 1\n                else:\n                    self.player_score[1] += 1\n                    self.player_score[0] -= 1\n                self.updateScoreLabel()\n        \n        gain = self.calcGain(pos, rev_list)\n        return is_hit, gain\n\n    def calcGain(self, pos, rev_list):\n        ret_gain = 0\n        ret_gain += gGain[pos[0]][pos[1]]\n\n        for rev_pos in rev_list:\n            ret_gain += gGain[rev_pos[0]][rev_pos[1]]\n\n        return ret_gain\n```\n\n\u305d\u308c\u3067\u306f\u6539\u3081\u3066\u5bfe\u6226\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n1. Min-Max_3\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\n1. Min-Max_3\u624b\u5148\u8aad\u307f vs \uff11\u624b\u5148\u8aad\u307f\n1. \uff11\u624b\u5148\u8aad\u307f vs \u5148\u8aad\u307f\u7121\u3057\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n1. Min-Max 38\u52dd\u300155\u6557\u30017\u5f15\u304d\u5206\u3051\n1. Min-Max 19\u52dd\u300180\u6557\u30011\u5f15\u304d\u5206\u3051\n1. 1\u624b\u5148\u8aad\u307f 83\u52dd\u300116\u6557\u30011\u5f15\u304d\u5206\u3051\n\n\u3046\u3045... Min-Max\u306e\u52dd\u7387\u304c\u4e0b\u304c\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n1\u624b\u5148\u8aad\u307f\u304c\u304b\u306a\u308a\u5f37\u3044\u3067\u3059\u3002\n\u518d\u8003\u306e\u4f59\u5730\u3042\u308a\u3067\u3059\u3002\u304a\u7c97\u672b\u69d8\u3067\u3057\u305f\u3002\n", "tags": ["Python", "wxpython", "AI", "\u30b2\u30fc\u30e0\u6728"]}