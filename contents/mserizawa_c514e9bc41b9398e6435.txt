{"context": " More than 1 year has passed since last update.GitHub \u306e awesome \u30ea\u30b9\u30c8\u3063\u3066\u3001\u3044\u3044\u611f\u3058\u306b\u91cd\u8981\u306a\u6280\u8853\u8981\u7d20\u304c\u30ad\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u3066\u3044\u3066\u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\n\u500b\u4eba\u7684\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30ad\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u597d\u304d\u3067\u3001\u5404\u8a00\u8a9e\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6d41\u884c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a awesome programming languages \u3092\u3001Elixir \u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\n\u4e8b\u524d\u6e96\u5099 1: \u53ef\u8996\u5316\u624b\u6cd5\u306e\u691c\u8a0e\n\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\u306e\u901a\u308a\u3001D3.js \u306e Radial Reingold\u2013Tilford Tree \u3092\u4f7f\u3044\u307e\u3059\u3002\n\u300cElixir -> Frameworks -> Phoenix\u300d\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u968e\u5c64\u69cb\u9020\u304c\u3001\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u3088\u3046\u306a\u56f3\u3067\u4e00\u6c17\u306b\u63cf\u753b\u3055\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u968e\u5c64\u306e\u30eb\u30fc\u30c8\u306f\u5404\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\u300cLanguage -> Elixir -> ...\u300d\u306e\u3088\u3046\u306a\u53ef\u8996\u5316\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u8981\u7d20\u6570\u304c\u591a\u3059\u304e\u3066\u8a33\u304c\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u3084\u3081\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306f\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068 Elixir \u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u304c\u4e3b\u8ef8\u306a\u306e\u3067\u3001D3.js \u306f\u307b\u307c\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u5b9f\u88c5\u307e\u307e\u3067\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305f JSON \u3092\u98df\u308f\u305b\u3066\u5fae\u8abf\u6574\u3057\u3066\u5b8c\u6210\u3001\u3068\u3044\u3046\u6d41\u308c\u306b\u6301\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4e8b\u524d\u6e96\u5099 2: \u30d1\u30fc\u30b9\u65b9\u6cd5\u306e\u691c\u8a0e\n\u4eca\u56de\u30d1\u30fc\u30b9\u5bfe\u8c61\u3068\u3059\u308b\u5404 awesome \u306e README.md \u306f\u3001\u6587\u5b57\u901a\u308a Markdown \u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nMarkdown \u3092 HTML \u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u3001DOM \u30bb\u30ec\u30af\u30bf\u3092\u99c6\u4f7f\u3057\u3066\u30d1\u30fc\u30b9\u3001\u3068\u304b\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u51b7\u9759\u306b\u8003\u3048\u3066\u7121\u99c4\u306b\u5927\u5909\u305d\u3046\u306a\u306e\u3067\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u4e00\u884c\u305a\u3064\u89e3\u6790\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u53ef\u8996\u5316\u306b\u5fc5\u8981\u306a JSON \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u3059\u3002\n{\n \"name\": \"flare\",  // \u4eca\u56de\u306e\u5834\u5408\u306f\u3053\u3053\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u540d\u524d\u306b\u306a\u308a\u307e\u3059\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      // \u4eca\u56de\u306e\u5834\u5408\u306f\u3053\u3053\u306e\u8981\u7d20\u304c\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306e\u60c5\u5831\u306b\u306a\u308a\u307e\u3059\n      // \u3053\u308c\u3089\u306e\u8981\u7d20\u306b description \u3068 url \u3092\u52a0\u3048\u307e\u3059\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      ...\n     ]\n    },\n  },\n  ...\n}\n\n\u3053\u306e JSON \u306b\u843d\u3068\u3057\u8fbc\u3080\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u5404\u884c\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30d8\u30c3\u30c0\u884c\uff08# \u59cb\u307e\u308a\uff09\u306e\u5834\u5408\n\n\n# \u306e\u6570\u3092\u898b\u3066\u968e\u5c64\u3092\u8abf\u6574\uff08\u4e0a\u308b\u30fb\u4e0b\u308b\u30fb\u7559\u307e\u308b\uff09\n# \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3067 name \u3092\u5f62\u6210\n\n\n\u30ea\u30b9\u30c8\u884c\uff08-, * \u59cb\u307e\u308a\uff09\u306e\u5834\u5408\n\n\n\nchilren \u306b\u8981\u7d20\u3092\u8ffd\u52a0\n-, * \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u5206\u89e3\u3057\u3066\u3001name, description, url \u3092\u5f62\u6210\n\nsize \u306f\u56fa\u5b9a\u3067 1\n\n\n\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\n\n\n\u30b9\u30eb\u30fc\n\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\nmix \u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\n$ mix new awesome_parser\n\nmix.exs \u306b\u5229\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\nmix.exs\ndefmodule AwesomeParser.Mixfile do\n  use Mix.Project\n  ...\n  def application do\n    # :httpoison \u3092\u8ffd\u52a0\n    [applications: [:logger, :httpoison]]\n  end\n  ...\n  defp deps do\n    # :httpoison \u3068 :poison \u3092\u8ffd\u52a0\n    [{:httpoison, \"~> 0.7.4\"},\n     {:poison, \"~> 1.5\"}]\n  end\nend\n\n\n\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u5b8c\u4e86\u3067\u3059\u3002\n$ mix deps.get\n\n\nGitHub \u304b\u3089 README.md \u3092\u30ed\u30fc\u30c9\u3059\u308b\n\u65e9\u901f lib/awesome_parser.ex \u306b\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f GitHub \u306b HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066 README.md \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\nawesome_parser.ex\ndefmodule AwesomeParser do\n  def process(repository_url) do\n    response = HTTPoison.get!(repository_url)\n\n    case response do\n      %{status_code: 200, body: body} ->\n        lines = String.split(body, \"\\n\")\n\n      _ ->\n        IO.puts \"An error occurred while reading repository: #{repository_url}\"\n    end\n  end\nend\n\n\nrepository_url \u306b\u306f https://raw.githubusercontent.com/h4cc/awesome-elixir/master/README.md \u3068\u3044\u3063\u305f\u3001README.md \u306e\u751f\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b URL \u3092\u6e21\u3057\u307e\u3059\u3002\u305d\u308c\u3092 HTTPoison \u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u3066\u3001\\n \u3067\u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306f\u5404\u8a00\u8a9e\u3092\u4e00\u6c17\u306b\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u3001\u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u30ea\u30b9\u30c8\u304b\u3089 URL \u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u30e9\u30c3\u30d7\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\uff11\u884c\u305a\u3064\u30d1\u30fc\u30b9\u3057\u3066 JSON \u306b\u307e\u3068\u3081\u308b\n\u6b21\u306b\u3001\u30b9\u30d7\u30ea\u30c3\u30c8\u3055\u308c\u305f\u5404\u884c\u3092\u4e0a\u8a18\u306e\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u3066\u30d1\u30fc\u30b9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u666e\u901a\u306a\u3089\u300c\u30eb\u30fc\u30d7\u69cb\u6587\u300d\u306e\u5229\u7528\u304c\u601d\u3044\u6d6e\u304b\u3076\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u306f\u6298\u89d2\u306a\u306e\u3067 Elixir \u3063\u307d\u304f\u300c\u518d\u5e30 & \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 & \u30ac\u30fc\u30c9\u300d\u3067\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\u3056\u3063\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\uff08\u3061\u3087\u3063\u3068\u30ab\u30aa\u30b9\u3063\u305f\u304b\u3082...\uff09\n\nawesome_parser.ex\ndefmodule AwesomeCrawler do\n\n  # \u30d8\u30c3\u30c0\u884c\u3092\u968e\u5c64\u6570\u3068\u540d\u524d\u306b\u5206\u89e3\u3057\u307e\u3059\n  def parse_header_line(header) do\n    # \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u5404\u8981\u7d20\u3092\u53d6\u5f97\u3057\u307e\u3059\n    captures = Regex.named_captures(~r\"^.*(?<hashes>#+) *(?<name>.*)$\", String.strip(header))\n    %{level: String.length(captures[\"hashes\"]), name: captures[\"name\"]}\n  end\n\n  # \u968e\u5c64\u304c\u6df1\u304f\u306a\u308b\u30b1\u30fc\u30b9\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([_head | tail],\n      %{level: level, next_level: next_level} = params) when level < next_level do\n\n    # \u5b50\u968e\u5c64\u3092\u751f\u6210\u3057\u307e\u3059\n    parsed = parse_lines(tail, %{name: params[:next_name], level: next_level, items: []})\n    # \u751f\u6210\u3055\u308c\u305f\u5b50\u968e\u5c64\u3092 append \u3057\u307e\u3059\uff08items \u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306f\u9664\u304d\u307e\u3059\uff09\n    filtered = Enum.filter(params[:items] ++ [parsed[:elem]], fn(elem) -> length(Dict.get(elem, :children, [])) > 0 end)\n    # \u51e6\u7406\u3092\u7d9a\u884c\u3057\u307e\u3059\n    parse_lines(Dict.get(parsed, :remained, tail), %{name: params[:name], level: level, items: filtered})\n  end\n\n  # \u968e\u5c64\u304c\u6d45\u304f\u306a\u308b or \u540c\u968e\u5c64\u3067\u65b0\u898f\u8981\u7d20\u3092\u4f5c\u308b\u30b1\u30fc\u30b9\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([head | tail],\n      %{level: level, next_level: next_level} = params) when level >= next_level do\n\n    # \u73fe\u968e\u5c64\u306e\u69cb\u7bc9\u3092\u7d42\u4e86\u3057\u3066\u51e6\u7406\u3092\u7d9a\u884c\u3055\u305b\u307e\u3059\n    %{elem: %{name: params[:name], children: params[:items]}, remained: [head | tail]}\n  end\n\n  # \u5404\u884c\u3092\u7a2e\u5225\u306b\u5fdc\u3058\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([head | tail], params) do\n    cond do\n      # \u30d8\u30c3\u30c0\u884c\n      String.starts_with?(head, \"#\") ->\n        %{level: next_level, name: next_name} = parse_header_line(head)\n        # \u968e\u5c64\u306e\u5909\u5316\uff08\u4e0b or \u4e0a,\u540c\uff09\u306b\u5fdc\u3058\u3066\u3055\u3089\u306b\u51e6\u7406\u3092\u632f\u308a\u5206\u3051\u307e\u3059\n        parse_lines([head | tail], Dict.merge(params, %{next_level: next_level, next_name: next_name}))\n\n      # \u30ea\u30b9\u30c8\u884c\n      String.match?(head, ~r\"^ *[\\*\\-].*\\[.*\\]\\(http.*\\).*$\") ->\n        # \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u5404\u8981\u7d20\u3092\u53d6\u5f97\u3057\u307e\u3059\n        captures = Regex.named_captures(~r\"^ *[\\*\\-][^\\[]*\\[(?<label>[^\\]]*)\\]\\((?<url>http[^\\)]*)\\)[^A-z]*(?<description>.*)$\", head)\n        # items \u306b append \u3057\u307e\u3059\n        added_items = params[:items] ++ [%{name: captures[\"label\"], url: captures[\"url\"], description: captures[\"description\"], size: 1}]\n        # \u51e6\u7406\u3092\u7d9a\u884c\u3057\u307e\u3059\n        parse_lines(tail, Dict.put(params, :items, added_items))\n\n      # \u305d\u306e\u4ed6\n      true ->\n        parse_lines(tail, params)\n    end\n  end\n\n  # \u6700\u7d42\u884c\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\uff08\u968e\u5c64\u51e6\u7406\u306e\u90fd\u5408\u4e0a\u8907\u6570\u56de\u547c\u3070\u308c\u307e\u3059\uff09\n  def parse_lines([], %{name: name, level: level, items: items}) do\n    cond do\n      level > 0 ->\n        %{elem: %{name: name, children: items}, remained: []}\n\n      true ->\n        %{name: name, children: items}\n    end\n  end\n  ...\nend\n\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\n\n\u30bb\u30aa\u30ea\u30fc\u901a\u308a\u3001parse_lines \u306b\u5404\u884c\u306e\u30ea\u30b9\u30c8\u3092\u5ef6\u3005\u3068\u6e21\u3057\uff11\u884c\u305a\u3064\u6d88\u5316\u3057\u3066\u3044\u304f\n\n\nparse_lines \u3092\u547c\u3076\u5074\u306f\u57fa\u672c\u7684\u306b\u6b21\u306e\u51e6\u7406\u3092\u77e5\u3089\u306a\u304f\u3066\u826f\u3044\uff08\u3069\u306e parse_line \u3092\u547c\u3076\u304b\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u3044\uff09\n\u5f15\u6570\u306e\u72b6\u614b\u3001\u89e3\u6790\u884c\u306b\u5fdc\u3058\u3066\u52dd\u624b\u306b\u51e6\u7406\u304c\u632f\u308a\u5206\u3051\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u30b9\u30bf\u30f3\u30b9\n\n\n\u4e3b\u8ef8\u3068\u306a\u308b\u306e\u304c parse_lines([head | tail], params) \u306e\u30d1\u30fc\u30c8\u3067\u3001\u3053\u3053\u3067\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u305f\u51e6\u7406\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\n\u30d8\u30c3\u30c0\u884c\u304c\u6765\u305f\u5834\u5408\u306f\u968e\u5c64\u306e\u5909\u5316\u306b\u5fdc\u3058\u305f\u8907\u96d1\u306a\u5206\u5c90\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30ac\u30fc\u30c9\u3092\u4f7f\u3063\u3066 parse_line \u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\n\u968e\u5c64\u306e\u672b\u7aef\u306b\u5230\u9054\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u518d\u5e30\u3092\u7d42\u4e86\u3057\u3066\u3001\u69cb\u7bc9\u3055\u308c\u305f Dict \u3092\u8fd4\u5374\u3059\u308b\n\n\n\u305d\u306e\u969b\u3001\u6b8b\u3063\u305f\u884c\u3082\u5408\u308f\u305b\u3066\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u3001\u547c\u51fa\u5143\u3067\u30b9\u30e0\u30fc\u30ba\u306b\u51e6\u7406\u3092\u7d99\u7d9a\u3055\u305b\u308b\n\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u968e\u5c64\u306e\u5909\u5316\u3092\u51e6\u7406\u3059\u308b\u306e\u304c\u4ee5\u5916\u3068\u5927\u5909\u3067\u3001\u601d\u3044\u306e\u5916\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u304d\u3063\u3068\u3001\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u65b9\u6cd5\u304c\u3042\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6b63\u898f\u8868\u73fe\u306f\u5b8c\u74a7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002README.md \u81ea\u4f53\u306e\u8868\u8a18\u306b\u7d50\u69cb\u30d6\u30ec\u304c\u3042\u308a\u3001\u3053\u308c\u3067\u62fe\u3048\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3057\u305f\u3002\uff08\u3068\u308a\u3042\u3048\u305a Elixir \u306e README \u304c\u305d\u308c\u3063\u307d\u304f\u30d1\u30fc\u30b9\u3067\u304d\u308c\u3070\u3044\u3044\u304b\u306a\u3041\u7a0b\u5ea6\u306e\u78ba\u8a8d\u306b\u3068\u3069\u3081\u3066\u3044\u307e\u3059\uff09\n\u6700\u5f8c\u306b\u51fa\u6765\u4e0a\u304c\u3063\u305f Dict \u3092 Poison \u3092\u4f7f\u3063\u3066 JSON \u306b\u30c0\u30f3\u30d7\u3057\u307e\u3057\u3087\u3046\u3002\n\nawesome_parser.py\ndefmodule AwesomeParser do\n  ...\n  def process(repository_url) do\n    response = HTTPoison.get!(repository_url)\n\n    case response do\n      %{status_code: 200, body: body} ->\n        lines = String.split(body, \"\\n\")\n        json = Poison.encode!(parse_lines(lines, %{name: \"root\", level: 0, items: []}))\n        {:ok, file} = File.open \"output.json\", [:write, :utf8]\n        IO.write file, json\n        File.close file\n\n      _ ->\n        IO.puts \"An error occurred while reading repository: #{repository_url}\"\n    end\n  end\nend\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ iex -S mix\niex(1)> AwesomeParser.process(\"https://raw.githubusercontent.com/h4cc/awesome-elixir/master/README.md\")\n:ok\n\n\u3053\u308c\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u306e JSON \u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nD3.js \u3067\u63cf\u753b\u3059\u308b\n\u5f8c\u306f Radial Reingold\u2013Tilford Tree \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001\u51fa\u529b\u3055\u308c\u305f JSON \u3092\u8aad\u307f\u8fbc\u3080 + \u03b1 \u306e\u6539\u4fee\u3092\u3057\u307e\u3059\u3002\n...\nvar diameter = 1200; // \u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\nd3.json(\"output.json\", function(error, root) { // \u4f5c\u6210\u3057\u305f JSON \u3078\u306e\u30d1\u30b9\u3092\u66f8\u304d\u307e\u3059\n...\n  node.append(\"circle\")\n      .attr(\"r\", 2.5); // \u5186\u306f\u5c0f\u3055\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\n  node.append(\"text\")\n      .attr(\"dy\", \"0.25em\")\n      .style(\"font-size\", \"6px\") // \u6587\u5b57\u3082\u5c0f\u3055\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\n\n\u3053\u308c\u3067\u5192\u982d\u306e\u30a4\u30e1\u30fc\u30b8\u3063\u307d\u3044\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001Chrome \u3060\u3068\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3078\u306e Ajax \u901a\u4fe1\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001FireFox \u3092\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n\n\u4ed5\u4e0a\u3052\n\u4e0a\u8a18\u306e JS \u3092\u3055\u3089\u306b\u3082\u3046\u3061\u3087\u3063\u3068\u5fae\u8abf\u6574\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u4ed5\u4e0a\u304c\u308a\u307e\u3059\u3002\nhttp://mserizawa.github.io/awesome-programming-languages/\n\uff08Retina \u3058\u3083\u306a\u3044\u7aef\u672b + Chrome \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u898b\u308b\u3068\u5fae\u5999\u306b\u8868\u793a\u5d29\u308c\u3057\u307e\u3059\uff09\n\n\u611f\u60f3\n\n\u518d\u5e30 + \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306f\u975e\u5e38\u306b\u5f37\u529b\u306a\u6982\u5ff5\n\n\nif \u3084\u30eb\u30fc\u30d7\u304c\u306a\u304f\u3066\u3082\u5b9f\u88c5\u304c\u3067\u304d\u3066\u3057\u307e\u3046\n\u3064\u307e\u308a\u3001\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u3089\u306a\u304f\u3066\u3059\u3080\n\n\n\u305f\u3060\u3001\u53ef\u8aad\u6027\u306e\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u4fee\u884c\u304c\u5fc5\u8981...\n\n\n\u3069\u3046\u3044\u3046\u6761\u4ef6\u3067\u5206\u5c90\u3055\u308c\u3066\u304f\u308b\u306e\u304b\u304c\u30d1\u30c3\u3068\u898b\u3067\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u308b\n\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u3082\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u308b\n\u30d1\u30fc\u30b5\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u7814\u7a76\u3059\u308b\u5fc5\u8981\u30a2\u30ea\n\n\n\n[GitHub \u306e awesome \u30ea\u30b9\u30c8](https://github.com/sindresorhus/awesome)\u3063\u3066\u3001\u3044\u3044\u611f\u3058\u306b\u91cd\u8981\u306a\u6280\u8853\u8981\u7d20\u304c\u30ad\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u3066\u3044\u3066\u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\n\u500b\u4eba\u7684\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30ad\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u597d\u304d\u3067\u3001\u5404\u8a00\u8a9e\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6d41\u884c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u305d\u3093\u306a awesome programming languages \u3092\u3001Elixir \u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n[<img width=\"500\" alt=\"cap1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/77513/46eccfd8-8df9-b253-f7fa-4089d8f1edbb.png\">](http://mserizawa.github.io/awesome-programming-languages/)\n\n\n# \u4e8b\u524d\u6e96\u5099 1: \u53ef\u8996\u5316\u624b\u6cd5\u306e\u691c\u8a0e\n\n\u5b8c\u6210\u30a4\u30e1\u30fc\u30b8\u306e\u901a\u308a\u3001[D3.js \u306e Radial Reingold\u2013Tilford Tree](http://bl.ocks.org/mbostock/4063550) \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u300cElixir -> Frameworks -> Phoenix\u300d\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u968e\u5c64\u69cb\u9020\u304c\u3001\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u3088\u3046\u306a\u56f3\u3067\u4e00\u6c17\u306b\u63cf\u753b\u3055\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001**\u968e\u5c64\u306e\u30eb\u30fc\u30c8\u306f\u5404\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e**\u3067\u3059\u3002\u300cLanguage -> Elixir -> ...\u300d\u306e\u3088\u3046\u306a\u53ef\u8996\u5316\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u8981\u7d20\u6570\u304c\u591a\u3059\u304e\u3066\u8a33\u304c\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u3084\u3081\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306f\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068 Elixir \u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u304c\u4e3b\u8ef8\u306a\u306e\u3067\u3001D3.js \u306f\u307b\u307c\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u5b9f\u88c5\u307e\u307e\u3067\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305f JSON \u3092\u98df\u308f\u305b\u3066\u5fae\u8abf\u6574\u3057\u3066\u5b8c\u6210\u3001\u3068\u3044\u3046\u6d41\u308c\u306b\u6301\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u4e8b\u524d\u6e96\u5099 2: \u30d1\u30fc\u30b9\u65b9\u6cd5\u306e\u691c\u8a0e\n\n\u4eca\u56de\u30d1\u30fc\u30b9\u5bfe\u8c61\u3068\u3059\u308b\u5404 awesome \u306e README.md \u306f\u3001\u6587\u5b57\u901a\u308a Markdown \u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nMarkdown \u3092 HTML \u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u3001DOM \u30bb\u30ec\u30af\u30bf\u3092\u99c6\u4f7f\u3057\u3066\u30d1\u30fc\u30b9\u3001\u3068\u304b\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u51b7\u9759\u306b\u8003\u3048\u3066\u7121\u99c4\u306b\u5927\u5909\u305d\u3046\u306a\u306e\u3067\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u4e00\u884c\u305a\u3064\u89e3\u6790\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u53ef\u8996\u5316\u306b\u5fc5\u8981\u306a JSON \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u3059\u3002\n\n```js\n{\n \"name\": \"flare\",  // \u4eca\u56de\u306e\u5834\u5408\u306f\u3053\u3053\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u540d\u524d\u306b\u306a\u308a\u307e\u3059\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      // \u4eca\u56de\u306e\u5834\u5408\u306f\u3053\u3053\u306e\u8981\u7d20\u304c\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306e\u60c5\u5831\u306b\u306a\u308a\u307e\u3059\n      // \u3053\u308c\u3089\u306e\u8981\u7d20\u306b description \u3068 url \u3092\u52a0\u3048\u307e\u3059\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      ...\n     ]\n    },\n  },\n  ...\n}\n```\n\n\u3053\u306e JSON \u306b\u843d\u3068\u3057\u8fbc\u3080\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u3067\u5404\u884c\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\n\n* \u30d8\u30c3\u30c0\u884c\uff08# \u59cb\u307e\u308a\uff09\u306e\u5834\u5408\n    * # \u306e\u6570\u3092\u898b\u3066\u968e\u5c64\u3092\u8abf\u6574\uff08\u4e0a\u308b\u30fb\u4e0b\u308b\u30fb\u7559\u307e\u308b\uff09\n    * # \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3067 *name* \u3092\u5f62\u6210\n* \u30ea\u30b9\u30c8\u884c\uff08-, * \u59cb\u307e\u308a\uff09\u306e\u5834\u5408\n    * *chilren* \u306b\u8981\u7d20\u3092\u8ffd\u52a0\n    * -, * \u4ee5\u964d\u306e\u6587\u5b57\u5217\u3092\u5206\u89e3\u3057\u3066\u3001*name*, *description*, *url* \u3092\u5f62\u6210\n    * *size* \u306f\u56fa\u5b9a\u3067 1\n* \u305d\u308c\u4ee5\u5916\u306e\b\u5834\u5408\n    * \u30b9\u30eb\u30fc\n\n# \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\n\nmix \u3092\u4f7f\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\n\n```bash\n$ mix new awesome_parser\n```\n\n`mix.exs` \u306b\u5229\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n```ex:mix.exs\ndefmodule AwesomeParser.Mixfile do\n  use Mix.Project\n  ...\n  def application do\n    # :httpoison \u3092\u8ffd\u52a0\n    [applications: [:logger, :httpoison]]\n  end\n  ...\n  defp deps do\n    # :httpoison \u3068 :poison \u3092\u8ffd\u52a0\n    [{:httpoison, \"~> 0.7.4\"},\n     {:poison, \"~> 1.5\"}]\n  end\nend\n```\n\n\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u5b8c\u4e86\u3067\u3059\u3002\n\n```bash\n$ mix deps.get\n```\n\n# GitHub \u304b\u3089 README.md \u3092\u30ed\u30fc\u30c9\u3059\u308b\n\n\u65e9\u901f `lib/awesome_parser.ex` \u306b\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f GitHub \u306b HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066 README.md \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```ex:awesome_parser.ex\ndefmodule AwesomeParser do\n  def process(repository_url) do\n    response = HTTPoison.get!(repository_url)\n\n    case response do\n      %{status_code: 200, body: body} ->\n        lines = String.split(body, \"\\n\")\n\n      _ ->\n        IO.puts \"An error occurred while reading repository: #{repository_url}\"\n    end\n  end\nend\n```\n\n**repository_url** \u306b\u306f `https://raw.githubusercontent.com/h4cc/awesome-elixir/master/README.md` \u3068\u3044\u3063\u305f\u3001README.md \u306e\u751f\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b URL \u3092\u6e21\u3057\u307e\u3059\u3002\u305d\u308c\u3092 HTTPoison \u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u3066\u3001`\\n` \u3067\u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n\u5b9f\u969b\u306f\u5404\u8a00\u8a9e\u3092\u4e00\u6c17\u306b\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u3001\u30ec\u30dd\u30b8\u30c8\u30ea\u306e\u30ea\u30b9\u30c8\u304b\u3089 URL \u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3067\u30e9\u30c3\u30d7\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n# \uff11\u884c\u305a\u3064\u30d1\u30fc\u30b9\u3057\u3066 JSON \u306b\u307e\u3068\u3081\u308b\n\n\u6b21\u306b\u3001\u30b9\u30d7\u30ea\u30c3\u30c8\u3055\u308c\u305f\u5404\u884c\u3092\u4e0a\u8a18\u306e\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u3066\u30d1\u30fc\u30b9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u666e\u901a\u306a\u3089\u300c\u30eb\u30fc\u30d7\u69cb\u6587\u300d\u306e\u5229\u7528\u304c\u601d\u3044\u6d6e\u304b\u3076\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u306f\u6298\u89d2\u306a\u306e\u3067 Elixir \u3063\u307d\u304f\u300c[\u518d\u5e30 & \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 & \u30ac\u30fc\u30c9](http://elixir-ja.sena-net.works/getting_started/9.html)\u300d\u3067\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3056\u3063\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3059\uff08\u3061\u3087\u3063\u3068\u30ab\u30aa\u30b9\u3063\u305f\u304b\u3082...\uff09\n\n```ex:awesome_parser.ex\ndefmodule AwesomeCrawler do\n\n  # \u30d8\u30c3\u30c0\u884c\u3092\u968e\u5c64\u6570\u3068\u540d\u524d\u306b\u5206\u89e3\u3057\u307e\u3059\n  def parse_header_line(header) do\n    # \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u5404\u8981\u7d20\u3092\u53d6\u5f97\u3057\u307e\u3059\n    captures = Regex.named_captures(~r\"^.*(?<hashes>#+) *(?<name>.*)$\", String.strip(header))\n    %{level: String.length(captures[\"hashes\"]), name: captures[\"name\"]}\n  end\n\n  # \u968e\u5c64\u304c\u6df1\u304f\u306a\u308b\u30b1\u30fc\u30b9\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([_head | tail],\n      %{level: level, next_level: next_level} = params) when level < next_level do\n\n    # \u5b50\u968e\u5c64\u3092\u751f\u6210\u3057\u307e\u3059\n    parsed = parse_lines(tail, %{name: params[:next_name], level: next_level, items: []})\n    # \u751f\u6210\u3055\u308c\u305f\u5b50\u968e\u5c64\u3092 append \u3057\u307e\u3059\uff08items \u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306f\u9664\u304d\u307e\u3059\uff09\n    filtered = Enum.filter(params[:items] ++ [parsed[:elem]], fn(elem) -> length(Dict.get(elem, :children, [])) > 0 end)\n    # \u51e6\u7406\u3092\u7d9a\u884c\u3057\u307e\u3059\n    parse_lines(Dict.get(parsed, :remained, tail), %{name: params[:name], level: level, items: filtered})\n  end\n\n  # \u968e\u5c64\u304c\u6d45\u304f\u306a\u308b or \u540c\u968e\u5c64\u3067\u65b0\u898f\u8981\u7d20\u3092\u4f5c\u308b\u30b1\u30fc\u30b9\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([head | tail],\n      %{level: level, next_level: next_level} = params) when level >= next_level do\n\n    # \u73fe\u968e\u5c64\u306e\u69cb\u7bc9\u3092\u7d42\u4e86\u3057\u3066\u51e6\u7406\u3092\u7d9a\u884c\u3055\u305b\u307e\u3059\n    %{elem: %{name: params[:name], children: params[:items]}, remained: [head | tail]}\n  end\n\n  # \u5404\u884c\u3092\u7a2e\u5225\u306b\u5fdc\u3058\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\n  def parse_lines([head | tail], params) do\n    cond do\n      # \u30d8\u30c3\u30c0\u884c\n      String.starts_with?(head, \"#\") ->\n        %{level: next_level, name: next_name} = parse_header_line(head)\n        # \u968e\u5c64\u306e\u5909\u5316\uff08\u4e0b or \u4e0a,\u540c\uff09\u306b\u5fdc\u3058\u3066\u3055\u3089\u306b\u51e6\u7406\u3092\u632f\u308a\u5206\u3051\u307e\u3059\n        parse_lines([head | tail], Dict.merge(params, %{next_level: next_level, next_name: next_name}))\n\n      # \u30ea\u30b9\u30c8\u884c\n      String.match?(head, ~r\"^ *[\\*\\-].*\\[.*\\]\\(http.*\\).*$\") ->\n        # \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u5404\u8981\u7d20\u3092\u53d6\u5f97\u3057\u307e\u3059\n        captures = Regex.named_captures(~r\"^ *[\\*\\-][^\\[]*\\[(?<label>[^\\]]*)\\]\\((?<url>http[^\\)]*)\\)[^A-z]*(?<description>.*)$\", head)\n        # items \u306b append \u3057\u307e\u3059\n        added_items = params[:items] ++ [%{name: captures[\"label\"], url: captures[\"url\"], description: captures[\"description\"], size: 1}]\n        # \u51e6\u7406\u3092\u7d9a\u884c\u3057\u307e\u3059\n        parse_lines(tail, Dict.put(params, :items, added_items))\n\n      # \u305d\u306e\u4ed6\n      true ->\n        parse_lines(tail, params)\n    end\n  end\n\n  # \u6700\u7d42\u884c\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u307e\u3059\uff08\u968e\u5c64\u51e6\u7406\u306e\u90fd\u5408\u4e0a\u8907\u6570\u56de\u547c\u3070\u308c\u307e\u3059\uff09\n  def parse_lines([], %{name: name, level: level, items: items}) do\n    cond do\n      level > 0 ->\n        %{elem: %{name: name, children: items}, remained: []}\n\n      true ->\n        %{name: name, children: items}\n    end\n  end\n  ...\nend\n```\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\n\n* \u30bb\u30aa\u30ea\u30fc\u901a\u308a\u3001`parse_lines` \u306b\u5404\u884c\u306e\u30ea\u30b9\u30c8\u3092\u5ef6\u3005\u3068\u6e21\u3057\uff11\u884c\u305a\u3064\u6d88\u5316\u3057\u3066\u3044\u304f\n    * parse_lines \u3092\u547c\u3076\u5074\u306f\u57fa\u672c\u7684\u306b\u6b21\u306e\u51e6\u7406\u3092\u77e5\u3089\u306a\u304f\u3066\u826f\u3044\uff08\u3069\u306e `parse_line` \u3092\u547c\u3076\u304b\u3092\u8003\u616e\u3057\u306a\u304f\u3066\u826f\u3044\uff09\n    * \u5f15\u6570\u306e\u72b6\u614b\u3001\u89e3\u6790\u884c\u306b\u5fdc\u3058\u3066\u52dd\u624b\u306b\u51e6\u7406\u304c\u632f\u308a\u5206\u3051\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u30b9\u30bf\u30f3\u30b9\n* \u4e3b\u8ef8\u3068\u306a\u308b\u306e\u304c `parse_lines([head | tail], params)` \u306e\u30d1\u30fc\u30c8\u3067\u3001\u3053\u3053\u3067\u30eb\u30fc\u30eb\u306b\u3057\u305f\u304c\u3063\u305f\u51e6\u7406\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\n* \u30d8\u30c3\u30c0\u884c\u304c\u6765\u305f\u5834\u5408\u306f\u968e\u5c64\u306e\u5909\u5316\u306b\u5fdc\u3058\u305f\u8907\u96d1\u306a\u5206\u5c90\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3001\u30ac\u30fc\u30c9\u3092\u4f7f\u3063\u3066 `parse_line` \u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\n* \u968e\u5c64\u306e\u672b\u7aef\u306b\u5230\u9054\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u518d\u5e30\u3092\u7d42\u4e86\u3057\u3066\u3001\u69cb\u7bc9\u3055\u308c\u305f Dict \u3092\u8fd4\u5374\u3059\u308b\n    * \u305d\u306e\u969b\u3001\u6b8b\u3063\u305f\u884c\u3082\u5408\u308f\u305b\u3066\u8fd4\u5374\u3059\u308b\u3053\u3068\u3067\u3001\u547c\u51fa\u5143\u3067\u30b9\u30e0\u30fc\u30ba\u306b\u51e6\u7406\u3092\u7d99\u7d9a\u3055\u305b\u308b\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u968e\u5c64\u306e\u5909\u5316\u3092\u51e6\u7406\u3059\u308b\u306e\u304c\u4ee5\u5916\u3068\u5927\u5909\u3067\u3001\u601d\u3044\u306e\u5916\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u304d\u3063\u3068\u3001\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u65b9\u6cd5\u304c\u3042\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u6b63\u898f\u8868\u73fe\u306f\u5b8c\u74a7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002README.md \u81ea\u4f53\u306e\u8868\u8a18\u306b\u7d50\u69cb\u30d6\u30ec\u304c\u3042\u308a\u3001\u3053\u308c\u3067\u62fe\u3048\u306a\u3044\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3057\u305f\u3002\uff08\u3068\u308a\u3042\u3048\u305a Elixir \u306e README \u304c\u305d\u308c\u3063\u307d\u304f\u30d1\u30fc\u30b9\u3067\u304d\u308c\u3070\u3044\u3044\u304b\u306a\u3041\u7a0b\u5ea6\u306e\u78ba\u8a8d\u306b\u3068\u3069\u3081\u3066\u3044\u307e\u3059\uff09\n\n\u6700\u5f8c\u306b\u51fa\u6765\u4e0a\u304c\u3063\u305f Dict \u3092 Poison \u3092\u4f7f\u3063\u3066 JSON \u306b\u30c0\u30f3\u30d7\u3057\u307e\u3057\u3087\u3046\u3002\n\n```ex:awesome_parser.py\ndefmodule AwesomeParser do\n  ...\n  def process(repository_url) do\n    response = HTTPoison.get!(repository_url)\n\n    case response do\n      %{status_code: 200, body: body} ->\n        lines = String.split(body, \"\\n\")\n        json = Poison.encode!(parse_lines(lines, %{name: \"root\", level: 0, items: []}))\n        {:ok, file} = File.open \"output.json\", [:write, :utf8]\n        IO.write file, json\n        File.close file\n\n      _ ->\n        IO.puts \"An error occurred while reading repository: #{repository_url}\"\n    end\n  end\nend\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```bash\n$ iex -S mix\niex(1)> AwesomeParser.process(\"https://raw.githubusercontent.com/h4cc/awesome-elixir/master/README.md\")\n:ok\n```\n\n\u3053\u308c\u3067\u3001[\u3053\u3093\u306a\u611f\u3058\u306e JSON](https://raw.githubusercontent.com/mserizawa/mserizawa.github.io/master/awesome-programming-languages/json/awesome-elixir.json) \u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# D3.js \u3067\u63cf\u753b\u3059\u308b\n\n\u5f8c\u306f [Radial Reingold\u2013Tilford Tree](http://bl.ocks.org/mbostock/4063550) \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001\u51fa\u529b\u3055\u308c\u305f JSON \u3092\u8aad\u307f\u8fbc\u3080 + \u03b1 \u306e\u6539\u4fee\u3092\u3057\u307e\u3059\u3002\n\n```js\n...\nvar diameter = 1200; // \u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\nd3.json(\"output.json\", function(error, root) { // \u4f5c\u6210\u3057\u305f JSON \u3078\u306e\u30d1\u30b9\u3092\u66f8\u304d\u307e\u3059\n...\n  node.append(\"circle\")\n      .attr(\"r\", 2.5); // \u5186\u306f\u5c0f\u3055\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\n  node.append(\"text\")\n      .attr(\"dy\", \"0.25em\")\n      .style(\"font-size\", \"6px\") // \u6587\u5b57\u3082\u5c0f\u3055\u3081\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\n...\n```\n\n\u3053\u308c\u3067\u5192\u982d\u306e\u30a4\u30e1\u30fc\u30b8\u3063\u307d\u3044\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001Chrome \u3060\u3068\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3078\u306e Ajax \u901a\u4fe1\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001FireFox \u3092\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\u3002\n\n# \u4ed5\u4e0a\u3052\n\n\u4e0a\u8a18\u306e JS \u3092\u3055\u3089\u306b\u3082\u3046\u3061\u3087\u3063\u3068\u5fae\u8abf\u6574\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u4ed5\u4e0a\u304c\u308a\u307e\u3059\u3002\n\nhttp://mserizawa.github.io/awesome-programming-languages/\n\n\uff08Retina \u3058\u3083\u306a\u3044\u7aef\u672b + Chrome \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u898b\u308b\u3068\u5fae\u5999\u306b\u8868\u793a\u5d29\u308c\u3057\u307e\u3059\uff09\n\n# \u611f\u60f3\n\n* \u518d\u5e30 + \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306f\u975e\u5e38\u306b\u5f37\u529b\u306a\u6982\u5ff5\n    * if \u3084\u30eb\u30fc\u30d7\u304c\u306a\u304f\u3066\u3082\u5b9f\u88c5\u304c\u3067\u304d\u3066\u3057\u307e\u3046\n    * \u3064\u307e\u308a\u3001\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u3089\u306a\u304f\u3066\u3059\u3080\n* \u305f\u3060\u3001\u53ef\u8aad\u6027\u306e\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u4fee\u884c\u304c\u5fc5\u8981...\n    * \u3069\u3046\u3044\u3046\u6761\u4ef6\u3067\u5206\u5c90\u3055\u308c\u3066\u304f\u308b\u306e\u304b\u304c\u30d1\u30c3\u3068\u898b\u3067\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u308b\n    * \u51e6\u7406\u306e\u30d5\u30ed\u30fc\u3082\u5206\u304b\u308a\u3065\u3089\u304f\u306a\u308b\n    * \u30d1\u30fc\u30b5\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u7814\u7a76\u3059\u308b\u5fc5\u8981\u30a2\u30ea\n", "tags": ["Elixir", "d3.js"]}