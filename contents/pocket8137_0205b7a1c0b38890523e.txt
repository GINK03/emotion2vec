{"context": "\n\n\u25a0 mosquitto\u3068\u306f\nMQTT\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3057\u305f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3002\nhttp://mosquitto.org/\n\u4ed6\u306b\u3082MQTT\u3092\u5b9f\u88c5\u3057\u305fOSS\u3068\u3057\u3066\u306f\u3001Apache Apollo\u306a\u3069\u3082\u3042\u308b\u6a21\u69d8\u3002\n\n\u25cf MQTT\u3068\u306f\n\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5/\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u578b(\u51fa\u7248-\u8cfc\u8aad\u578b)\u306e\u30e2\u30c7\u30eb\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\nhttps://sango.shiguredo.jp/mqtt\n\u975e\u540c\u671f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u30d1\u30e9\u30c0\u30a4\u30e0\u306e\u4e00\u7a2e\u3067\u3042\u308a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u8005\uff08\u51fa\u7248\u5074\uff09\u304c\u7279\u5b9a\u306e\u53d7\u4fe1\u8005\uff08\u8cfc\u8aad\u5074\uff09\u3092\u60f3\u5b9a\u305b\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3088\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\nhttps://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB\n\n\u25cf \u975e\u540c\u671f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n\u975e\u540c\u671f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3067\u306f\u3001\u7d50\u679c\u3092\u5f85\u305f\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6b21\u3005\u3068\u6295\u3052\u308b\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51e6\u7406\u3092\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4e00\u81f4\u3057\u306a\u3044\u3002\nhttp://ledsun.hatenablog.com/entry/2013/07/18/181044\n\n\u25a0 mosquitto\u306e\u5c0e\u5165\n\n\u25cf mosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\nhttp://dev.classmethod.jp/cloud/setting-up-mosquitto-logging-on-amazon-linux/\n[root@localhost tmp]# wget http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo -O \"/etc/yum.repos.d/Mosquitto.repo\"\n[root@localhost tmp]# yum install mosquitto mosquitto-clients\n[root@localhost tmp]# ls -litr /etc/yum.repos.d/Mosquitto.repo\n\n[root@localhost tmp]# less /etc/init.d/mosquitto\n#! /bin/sh\n\uff5e\uff5e\uff5e\uff5e\uff5e\n### BEGIN INIT INFO\n# Provides: mosquitto\n# Required-Start: $network $remote_fs\n# Required-Stop: $network $remote_fs\n# Default-Start: 3 5\n# Default-Stop: 0 1 2 6\n# Short-Description: Mosquitto MQTT broker\n# Description: Mosquitto MQTT broker\n### END INIT INFO\n\n\n\u25cf \u81ea\u52d5\u8d77\u52d5\u8a2d\u5b9a\n\n\u25cb \u30c7\u30fc\u30e2\u30f3\u306b\u767b\u9332\n[root@localhost tmp]#\u3000/sbin/chkconfig --add mosquitto\n[root@localhost tmp]#\u3000/sbin/chkconfig --list mosquitto\nmosquitto       0:off   1:off   2:off   3:on    4:off   5:on    6:off\n\n\n\u25cb \u73fe\u5728\u306e\u30e9\u30f3\u30ec\u30d9\u30eb\u3067\u81ea\u52d5\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\n[root@localhost tmp]#\u3000/sbin/chkconfig mosquitto on\n[root@localhost tmp]#\u3000/sbin/chkconfig --list mosquitto\nmosquitto       0:off   1:off   2:on    3:on    4:on    5:on    6:off\n\n\n\u25cf \u8d77\u52d5\n[root@localhost tmp]#\u3000/etc/init.d/mosquitto start\nStarting mosquitto (via systemctl):                        [  OK  ]\n\n\n\u25cf monit\u306b\u3088\u308b\u76e3\u8996\nmonit(\u76e3\u8996\u30bd\u30d5\u30c8)\u3092\u5c0e\u5165\u3057\u3066\u3001mosquitto\u304c\u30d7\u30ed\u30bb\u30b9\u30c0\u30a6\u30f3\u3057\u305f\u3068\u304d\u306b\u81ea\u52d5\u3067\u7acb\u3061\u4e0a\u3052\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3002\nhttps://easyengine.io/tutorials/monitoring/monit/\n[root@localhost tmp]# cd ~\n[root@localhost tmp]# wget http://mmonit.com/monit/dist/binary/5.14/monit-5.14-linux-x64.tar.gz\n[root@localhost tmp]# tar zxvf monit-5.14-linux-x64.tar.gz\n[root@localhost tmp]# cd monit-5.14/\n[root@localhost tmp]# cp bin/monit /usr/bin/monit\n[root@localhost tmp]# mkdir /etc/monit\n[root@localhost tmp]# touch /etc/monit/monitrc\n[root@localhost tmp]# chmod 0700 /etc/monit/monitrc \n[root@localhost tmp]# ln -s /etc/monit/monitrc /etc/monitrc\n[root@localhost tmp]# wget https://gist.githubusercontent.com/rahul286/9975061/raw/1aa107e62ecaaa2dacfdb61a12f13efb6f15005b/monit -P /etc/init.d/\n[root@localhost tmp]# chmod u+x /etc/init.d/monit\n[root@localhost tmp]# echo \"START=yes\" > /etc/default/monit\n[root@localhost tmp]# monit -t\n[root@localhost tmp]# /sbin/chkconfig  --add monit\n[root@localhost tmp]# /sbin/chkconfig  monit on\n[root@localhost tmp]# /sbin/chkconfig --list monit\n[root@localhost tmp]# view /etc/monit.d/mosquitto.conf\ncheck process mosquitto with pidfile /var/run/mosquitto.pid\nstart = \"/etc/init.d/mosquitto start\"\nstop = \"/etc/init.d/mosquitto stop\"\n\n\n\u25cf \u30ed\u30b0\u51fa\u529b\u8a2d\u5b9a\n[root@localhost tmp]# sudo mkdir /var/log/mosquitto\n[root@localhost tmp]# sudo chown mosquitto /var/log/mosquitto\n\n[root@localhost tmp]# view /etc/mosquitto/mosquitto.conf\n\u5408\u8a08 0\npid_file /var/run/mosquitto.pid\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest syslog\nlog_dest file /var/log/mosquitto/mosquitto.log\n#log_type debug\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\n#log_type none\nlog_type subscribe\nlog_type unsubscribe\n#log_type websockets\n#log_type all\n\nconnection_messages true\n\nlog_timestamp true\n\ninclude_dir /etc/mosquitto/conf.d\n\n[root@localhost tmp]# /etc/init.d/mosquitto reload\n\n\n\u25a0 \u52d5\u4f5c\u78ba\u8a8d\n\n\u25cf \u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u3068\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u306e\u30c6\u30b9\u30c8\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\uff12\u3064\u7acb\u3061\u4e0a\u3052\u3066\u3001\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3002\nsensors/temperature\u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u304b\u308932\u3068\u3044\u3046\u5024\u3092qos1\u3067\u81ea\u5206\u81ea\u8eab\u306b\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u3057\u3066\u3001\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u3059\u308b\u3002\n[root@localhost tmp]# mosquitto_sub -t sensors/temperature -q 1\n32\n[root@localhost tmp]# mosquitto_pub -t sensors/temperature -m 32 -q 1\n\nhttp://mosquitto.org/man/mosquitto_sub-1.html\nhttp://mosquitto.org/man/mosquitto_pub-1.html\n\n\u25a0 Python\u3092\u4f7f\u3063\u3066MQTT\u3092\u64cd\u4f5c\n\u4e0b\u8a18\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\nhttps://librabuch.jp/2015/09/mosquiito_paho_python_mqtt/\n\n\u25cf pip\u306e\u5c0e\u5165\npython\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u3092\u884c\u3046pip\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\npip\u3092\u4f7f\u3046python\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u30ef\u30f3\u30fb\u30b3\u30de\u30f3\u30c9\u3067\u884c\u3048\u308b\u305f\u3081\u3001\u7c21\u5358\u306b\u306a\u308b\u3002\n[root@localhost opt]# curl -kL https://bootstrap.pypa.io/get-pip.py | python curl -kL https://bootstrap.pypa.io/get-pip.py | python\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1487k  100 1487k    0     0  1631k      0 --:--:-- --:--:-- --:--:-- 1630k\nCollecting pip\n  Downloading pip-8.1.1-py2.py3-none-any.whl (1.2MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.2MB 333kB/s \nCollecting wheel\n  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 1.9MB/s \nInstalling collected packages: pip, wheel\nSuccessfully installed pip-8.1.1 wheel-0.29.0\n\n\n\u25cf paho\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npaho\u306fMQTT\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308bEclipse\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nhttps://eclipse.org/paho/\nhttps://pypi.python.org/pypi/paho-mqtt/1.1\n[root@localhost opt]# pip install paho-mqtt\nCollecting paho-mqtt\n  Downloading paho-mqtt-1.1.tar.gz (41kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 3.4MB/s \nBuilding wheels for collected packages: paho-mqtt\n  Running setup.py bdist_wheel for paho-mqtt ... done\n  Stored in directory: /root/.cache/pip/wheels/97/db/5f/1ddca8ee2f9b58f9bb68208323bd39bb0b177f32f434aa4b95\nSuccessfully built paho-mqtt\nInstalling collected packages: paho-mqtt\nSuccessfully installed paho-mqtt-1.1\n\n[root@localhost opt]# ls -litr /usr/lib/python2.7/site-packages/paho/mqtt\n\u5408\u8a08 196\n135479923 -rw-r--r--. 1 root root  8713  3\u6708 19 23:15 publish.py\n135479924 -rw-r--r--. 1 root root 91388  3\u6708 19 23:15 client.py\n135479925 -rw-r--r--. 1 root root    20  3\u6708 19 23:15 __init__.py\n135479926 -rw-r--r--. 1 root root   170  3\u6708 19 23:15 __init__.pyc\n135479927 -rw-r--r--. 1 root root 71288  3\u6708 19 23:15 client.pyc\n135479928 -rw-r--r--. 1 root root  8332  3\u6708 19 23:15 publish.pyc\n\n\n\u25cf \u52d5\u4f5c\u78ba\u8a8d\n\u540c\u69d8\u306b\u30d1\u30d6\u30ea\u30c3\u30b7\u30e3\u30fc\u3068\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d0\u30fc\u3092\u6e96\u5099\u3002\n\npublisher.py\n\n\nfrom time import sleep\nimport paho.mqtt.client as mqtt\n\nHOST = '127.0.0.1'\nPORT = 1883\nKEEP_ALIVE = 60\nTOPIC = 'test_topic/test1'\nMESSAGE = 'test message'\n\nPUBLISH_NUMBER = 5\nSLEEP_TIME = 5\n\ndef publish_many_times(client, topic='topic/default', message='default', number=1, time=1, print_flag=False):\n\n    for i in range(number):\n        client.publish(topic, message)\n        if print_flag == True:\n            print (topic + ' ' + message)\n        sleep(time)\n\n    client.disconnect()\n\nif __name__ == '__main__':\n    client = mqtt.Client(protocol=mqtt.MQTTv311)\n\n    print \"publish start \" + str(type(client))\n\n    client.connect(HOST, port=PORT, keepalive=KEEP_ALIVE)\n\n    publish_many_times(client,TOPIC, MESSAGE, PUBLISH_NUMBER, SLEEP_TIME)                                      \n\n\nsubscriber.py \n\n# -*- coding: utf-8 -*-\nimport paho.mqtt.client as mqtt\n\nHOST = '127.0.0.1'\nPORT = 1883\nKEEP_ALIVE = 60\nTOPIC = 'test_topic/test1'\n\n\"\"\"\n\u63a5\u7d9a\u3092\u8a66\u307f\u305f\u3068\u304d\u306b\u5b9f\u884c\ndef on_connect(client, userdata, flags, respons_code):\n\n* client\nClient\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n* userdata\n\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306e\u30c7\u30fc\u30bf\u3067\u65b0\u305f\u306aClient\u30af\u30e9\u30b9\u306e\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b>\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n* flags\n\u5fdc\u7b54\u30d5\u30e9\u30b0\u304c\u542b\u307e\u308c\u308b\u8f9e\u66f8\n\u30af\u30ea\u30fc\u30f3\u30bb\u30c3\u30b7\u30e7\u30f3\u30920\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306b\u6709\u52b9\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u307e\u3060\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\u30af\u30ea\u30fc\u30f3\u30bb\u30c3\u30b7\u30e7\u30f3\u304c0\u306e\u3068\u304d\u306f\u4ee5\u524d\u306b\u63a5\u7d9a\u3057\u305f\u30e6\u30fc\u30b6\u306b\u518d\u63a5\u7d9a\u3059\u308b\u3002\n\n0 : \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u3066\u3044\u306a\u3044\n1 : \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\n\n* respons_code\n\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u306f\u63a5\u7d9a\u304c\u6210\u529f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u3002\n0: \u63a5\u7d9a\u6210\u529f\n1: \u63a5\u7d9a\u5931\u6557 - incorrect protocol version\n2: \u63a5\u7d9a\u5931\u6557 - invalid client identifier\n3: \u63a5\u7d9a\u5931\u6557 - server unavailable\n4: \u63a5\u7d9a\u5931\u6557 - bad username or password\n5: \u63a5\u7d9a\u5931\u6557 - not authorised\n\"\"\"\ndef on_connect(client, userdata, flags, respons_code):\n    print('status {0}'.format(respons_code))\n    client.subscribe(client.topic)\n\n\"\"\"\ndef on_message(client, userdata, message):\ntopic\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3059\u308b\n\"\"\"\ndef on_message(client, userdata, message):\n    print(message.topic + ' ' + str(message.payload))\n\nif __name__ == '__main__':\n\n    client = mqtt.Client(protocol=mqtt.MQTTv311)\n    client.topic = TOPIC\n\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    client.connect(HOST, port=PORT, keepalive=KEEP_ALIVE)\n\n    # \u30eb\u30fc\u30d7\n    client.loop_forever()                                  \n\n[root@localhost tmp]# python publisher.py \n[root@localhost tmp]# python subscriber.py \nstatus 0\ntest_topic/test1 test message\ntest_topic/test1 test message\ntest_topic/test1 test message\n\nclient.on_connect()\u3068client.on_message()\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3001\nclient.loop_forever()\u306e\u4e2d\u306e\u30eb\u30fc\u30d7\u3067\u3001\u30cf\u30f3\u30c9\u30e9\u30fc\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3092\u53c2\u7167\u3002\ndef _handle_connack(self):\n    if self._strict_protocol:\n        if self._in_packet['remaining_length'] != 2:\n            return MQTT_ERR_PROTOCOL\n\n    if len(self._in_packet['packet']) != 2:\n        return MQTT_ERR_PROTOCOL\n\n    (flags, result) = struct.unpack(\"!BB\", self._in_packet['packet'])\n    if result == CONNACK_REFUSED_PROTOCOL_VERSION and self._protocol == MQTTv311:\n        self._easy_log(MQTT_LOG_DEBUG, \"Received CONNACK (\"+str(flags)+\", \"+str(result)+\"), attempting downgrade to MQTT v3.1.\")\n        # Downgrade to MQTT v3.1\n        self._protocol = MQTTv31\n        return self.reconnect()\n\n    if result == 0:\n        self._state = mqtt_cs_connected\n\n    self._easy_log(MQTT_LOG_DEBUG, \"Received CONNACK (\"+str(flags)+\", \"+str(result)+\")\")\n    self._callback_mutex.acquire()\n    if self.on_connect:\n        self._in_callback = True\n\n        if sys.version_info[0] < 3:\n            argcount = self.on_connect.func_code.co_argcount\n        else:\n            argcount = self.on_connect.__code__.co_argcount\n\n        if argcount == 3:\n            self.on_connect(self, self._userdata, result)\n        else:\n            flags_dict = dict()\n            flags_dict['session present'] = flags & 0x01\n            self.on_connect(self, self._userdata, flags_dict, result)\n        self._in_callback = False\n    self._callback_mutex.release()\n    if result == 0:\n        rc = 0\n        self._out_message_mutex.acquire()\n        for m in self._out_messages:\n            m.timestamp = time.time()\n            if m.state == mqtt_ms_queued:\n                self.loop_write() # Process outgoing messages that have just been queued up\n                self._out_message_mutex.release()\n                return MQTT_ERR_SUCCESS\n\n            if m.qos == 0:\n                self._in_callback = True # Don't call loop_write after _send_publish()\n                rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                self._in_callback = False\n                if rc != 0:\n                    self._out_message_mutex.release()\n                    return rc\n            elif m.qos == 1:\n                if m.state == mqtt_ms_publish:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_puback\n                    self._in_callback = True # Don't call loop_write after _send_publish()\n                    rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n            elif m.qos == 2:\n                if m.state == mqtt_ms_publish:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_pubrec\n                    self._in_callback = True # Don't call loop_write after _send_publish()\n                    rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n                elif m.state == mqtt_ms_resend_pubrel:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_pubcomp\n                    self._in_callback = True # Don't call loop_write after _send_pubrel()\n                    rc = self._send_pubrel(m.mid, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n            self.loop_write() # Process outgoing messages that have just been queued up\n        self._out_message_mutex.release()\n        return rc\n    elif result > 0 and result < 6:\n        return MQTT_ERR_CONN_REFUSED\n    else:\n        return MQTT_ERR_PROTOCOL\n\ndef _handle_on_message(self, message):\n    self._callback_mutex.acquire()\n    matched = False\n    for t in self.on_message_filtered:\n        if topic_matches_sub(t[0], message.topic):\n            self._in_callback = True\n            t[1](self, self._userdata, message)\n            self._in_callback = False\n            matched = True\n\n    if matched == False and self.on_message:\n        self._in_callback = True\n        self.on_message(self, self._userdata, message)\n        self._in_callback = False\n\n    self._callback_mutex.release()\n\n\n\u25a0 \u53c2\u8003\u30b5\u30a4\u30c8\n\n\u516c\u5f0f\nMQTT \u30d6\u30ed\u30fc\u30ab mosquitto \u3092 WebSocket \u5bfe\u5fdc\u7248\u306b\u3059\u308b\n\n# \u25a0 mosquitto\u3068\u306f\n\nMQTT\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9f\u88c5\u3057\u305f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3002\nhttp://mosquitto.org/\n\n\u4ed6\u306b\u3082MQTT\u3092\u5b9f\u88c5\u3057\u305fOSS\u3068\u3057\u3066\u306f\u3001Apache Apollo\u306a\u3069\u3082\u3042\u308b\u6a21\u69d8\u3002\n\n## \u25cf MQTT\u3068\u306f\n\n\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5/\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u578b(\u51fa\u7248-\u8cfc\u8aad\u578b)\u306e\u30e2\u30c7\u30eb\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\nhttps://sango.shiguredo.jp/mqtt\n\n\u975e\u540c\u671f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u30d1\u30e9\u30c0\u30a4\u30e0\u306e\u4e00\u7a2e\u3067\u3042\u308a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u8005\uff08\u51fa\u7248\u5074\uff09\u304c\u7279\u5b9a\u306e\u53d7\u4fe1\u8005\uff08\u8cfc\u8aad\u5074\uff09\u3092\u60f3\u5b9a\u305b\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3088\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\nhttps://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB\n\n## \u25cf \u975e\u540c\u671f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n\u975e\u540c\u671f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3067\u306f\u3001\u7d50\u679c\u3092\u5f85\u305f\u305a\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6b21\u3005\u3068\u6295\u3052\u308b\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51e6\u7406\u3092\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u4e00\u81f4\u3057\u306a\u3044\u3002\nhttp://ledsun.hatenablog.com/entry/2013/07/18/181044\n\n\n# \u25a0 mosquitto\u306e\u5c0e\u5165\n\n## \u25cf mosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\nhttp://dev.classmethod.jp/cloud/setting-up-mosquitto-logging-on-amazon-linux/\n\n```shell-session\n[root@localhost tmp]# wget http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo -O \"/etc/yum.repos.d/Mosquitto.repo\"\n[root@localhost tmp]# yum install mosquitto mosquitto-clients\n[root@localhost tmp]# ls -litr /etc/yum.repos.d/Mosquitto.repo\n\n[root@localhost tmp]# less /etc/init.d/mosquitto\n#! /bin/sh\n\uff5e\uff5e\uff5e\uff5e\uff5e\n### BEGIN INIT INFO\n# Provides: mosquitto\n# Required-Start: $network $remote_fs\n# Required-Stop: $network $remote_fs\n# Default-Start: 3 5\n# Default-Stop: 0 1 2 6\n# Short-Description: Mosquitto MQTT broker\n# Description: Mosquitto MQTT broker\n### END INIT INFO\n```\n\n## \u25cf \u81ea\u52d5\u8d77\u52d5\u8a2d\u5b9a\n### \u25cb \u30c7\u30fc\u30e2\u30f3\u306b\u767b\u9332\n```shell-session\n[root@localhost tmp]#\u3000/sbin/chkconfig --add mosquitto\n[root@localhost tmp]#\u3000/sbin/chkconfig --list mosquitto\nmosquitto       0:off   1:off   2:off   3:on    4:off   5:on    6:off\n```\n\n### \u25cb \u73fe\u5728\u306e\u30e9\u30f3\u30ec\u30d9\u30eb\u3067\u81ea\u52d5\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\n```shell-session\n[root@localhost tmp]#\u3000/sbin/chkconfig mosquitto on\n[root@localhost tmp]#\u3000/sbin/chkconfig --list mosquitto\nmosquitto       0:off   1:off   2:on    3:on    4:on    5:on    6:off\n```\n\n## \u25cf \u8d77\u52d5\n```shell-session\n[root@localhost tmp]#\u3000/etc/init.d/mosquitto start\nStarting mosquitto (via systemctl):                        [  OK  ]\n```\n\n## \u25cf monit\u306b\u3088\u308b\u76e3\u8996\n\nmonit(\u76e3\u8996\u30bd\u30d5\u30c8)\u3092\u5c0e\u5165\u3057\u3066\u3001mosquitto\u304c\u30d7\u30ed\u30bb\u30b9\u30c0\u30a6\u30f3\u3057\u305f\u3068\u304d\u306b\u81ea\u52d5\u3067\u7acb\u3061\u4e0a\u3052\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3002\nhttps://easyengine.io/tutorials/monitoring/monit/\n\n```shell-session\n[root@localhost tmp]# cd ~\n[root@localhost tmp]# wget http://mmonit.com/monit/dist/binary/5.14/monit-5.14-linux-x64.tar.gz\n[root@localhost tmp]# tar zxvf monit-5.14-linux-x64.tar.gz\n[root@localhost tmp]# cd monit-5.14/\n[root@localhost tmp]# cp bin/monit /usr/bin/monit\n[root@localhost tmp]# mkdir /etc/monit\n[root@localhost tmp]# touch /etc/monit/monitrc\n[root@localhost tmp]# chmod 0700 /etc/monit/monitrc \n[root@localhost tmp]# ln -s /etc/monit/monitrc /etc/monitrc\n[root@localhost tmp]# wget https://gist.githubusercontent.com/rahul286/9975061/raw/1aa107e62ecaaa2dacfdb61a12f13efb6f15005b/monit -P /etc/init.d/\n[root@localhost tmp]# chmod u+x /etc/init.d/monit\n[root@localhost tmp]# echo \"START=yes\" > /etc/default/monit\n[root@localhost tmp]# monit -t\n[root@localhost tmp]# /sbin/chkconfig  --add monit\n[root@localhost tmp]# /sbin/chkconfig  monit on\n[root@localhost tmp]# /sbin/chkconfig --list monit\n[root@localhost tmp]# view /etc/monit.d/mosquitto.conf\ncheck process mosquitto with pidfile /var/run/mosquitto.pid\nstart = \"/etc/init.d/mosquitto start\"\nstop = \"/etc/init.d/mosquitto stop\"\n```\n\n### \u25cf \u30ed\u30b0\u51fa\u529b\u8a2d\u5b9a\n```shell-session\n[root@localhost tmp]# sudo mkdir /var/log/mosquitto\n[root@localhost tmp]# sudo chown mosquitto /var/log/mosquitto\n\n[root@localhost tmp]# view /etc/mosquitto/mosquitto.conf\n\u5408\u8a08 0\npid_file /var/run/mosquitto.pid\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest syslog\nlog_dest file /var/log/mosquitto/mosquitto.log\n#log_type debug\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\n#log_type none\nlog_type subscribe\nlog_type unsubscribe\n#log_type websockets\n#log_type all\n\nconnection_messages true\n\nlog_timestamp true\n\ninclude_dir /etc/mosquitto/conf.d\n\n[root@localhost tmp]# /etc/init.d/mosquitto reload\n```\n\n# \u25a0 \u52d5\u4f5c\u78ba\u8a8d\n## \u25cf \u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u3068\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u306e\u30c6\u30b9\u30c8\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\uff12\u3064\u7acb\u3061\u4e0a\u3052\u3066\u3001\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3002\n\nsensors/temperature\u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u304b\u308932\u3068\u3044\u3046\u5024\u3092qos1\u3067\u81ea\u5206\u81ea\u8eab\u306b\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u3057\u3066\u3001\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u3059\u308b\u3002\n\n```shell-session\n[root@localhost tmp]# mosquitto_sub -t sensors/temperature -q 1\n32\n[root@localhost tmp]# mosquitto_pub -t sensors/temperature -m 32 -q 1\n```\n\nhttp://mosquitto.org/man/mosquitto_sub-1.html\nhttp://mosquitto.org/man/mosquitto_pub-1.html\n\n# \u25a0 Python\u3092\u4f7f\u3063\u3066MQTT\u3092\u64cd\u4f5c\n\n\u4e0b\u8a18\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\nhttps://librabuch.jp/2015/09/mosquiito_paho_python_mqtt/\n\n## \u25cf pip\u306e\u5c0e\u5165\npython\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u3092\u884c\u3046pip\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\npip\u3092\u4f7f\u3046python\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u30ef\u30f3\u30fb\u30b3\u30de\u30f3\u30c9\u3067\u884c\u3048\u308b\u305f\u3081\u3001\u7c21\u5358\u306b\u306a\u308b\u3002\n\n```shell-session\n[root@localhost opt]# curl -kL https://bootstrap.pypa.io/get-pip.py | python curl -kL https://bootstrap.pypa.io/get-pip.py | python\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1487k  100 1487k    0     0  1631k      0 --:--:-- --:--:-- --:--:-- 1630k\nCollecting pip\n  Downloading pip-8.1.1-py2.py3-none-any.whl (1.2MB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.2MB 333kB/s \nCollecting wheel\n  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 1.9MB/s \nInstalling collected packages: pip, wheel\nSuccessfully installed pip-8.1.1 wheel-0.29.0\n```\n\n## \u25cf paho\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npaho\u306fMQTT\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308bEclipse\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nhttps://eclipse.org/paho/\nhttps://pypi.python.org/pypi/paho-mqtt/1.1\n\n```shell-session\n[root@localhost opt]# pip install paho-mqtt\nCollecting paho-mqtt\n  Downloading paho-mqtt-1.1.tar.gz (41kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 3.4MB/s \nBuilding wheels for collected packages: paho-mqtt\n  Running setup.py bdist_wheel for paho-mqtt ... done\n  Stored in directory: /root/.cache/pip/wheels/97/db/5f/1ddca8ee2f9b58f9bb68208323bd39bb0b177f32f434aa4b95\nSuccessfully built paho-mqtt\nInstalling collected packages: paho-mqtt\nSuccessfully installed paho-mqtt-1.1\n\n[root@localhost opt]# ls -litr /usr/lib/python2.7/site-packages/paho/mqtt\n\u5408\u8a08 196\n135479923 -rw-r--r--. 1 root root  8713  3\u6708 19 23:15 publish.py\n135479924 -rw-r--r--. 1 root root 91388  3\u6708 19 23:15 client.py\n135479925 -rw-r--r--. 1 root root    20  3\u6708 19 23:15 __init__.py\n135479926 -rw-r--r--. 1 root root   170  3\u6708 19 23:15 __init__.pyc\n135479927 -rw-r--r--. 1 root root 71288  3\u6708 19 23:15 client.pyc\n135479928 -rw-r--r--. 1 root root  8332  3\u6708 19 23:15 publish.pyc\n```\n\n## \u25cf \u52d5\u4f5c\u78ba\u8a8d\n\n\u540c\u69d8\u306b\u30d1\u30d6\u30ea\u30c3\u30b7\u30e3\u30fc\u3068\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d0\u30fc\u3092\u6e96\u5099\u3002\n\n* publisher.py\n\n```py\n\nfrom time import sleep\nimport paho.mqtt.client as mqtt\n\nHOST = '127.0.0.1'\nPORT = 1883\nKEEP_ALIVE = 60\nTOPIC = 'test_topic/test1'\nMESSAGE = 'test message'\n\nPUBLISH_NUMBER = 5\nSLEEP_TIME = 5\n\ndef publish_many_times(client, topic='topic/default', message='default', number=1, time=1, print_flag=False):\n\n    for i in range(number):\n        client.publish(topic, message)\n        if print_flag == True:\n            print (topic + ' ' + message)\n        sleep(time)\n\n    client.disconnect()\n\nif __name__ == '__main__':\n    client = mqtt.Client(protocol=mqtt.MQTTv311)\n\n    print \"publish start \" + str(type(client))\n\n    client.connect(HOST, port=PORT, keepalive=KEEP_ALIVE)\n\n    publish_many_times(client,TOPIC, MESSAGE, PUBLISH_NUMBER, SLEEP_TIME)                                      \n```\n\n* subscriber.py \n\n```py\n# -*- coding: utf-8 -*-\nimport paho.mqtt.client as mqtt\n\nHOST = '127.0.0.1'\nPORT = 1883\nKEEP_ALIVE = 60\nTOPIC = 'test_topic/test1'\n\n\"\"\"\n\u63a5\u7d9a\u3092\u8a66\u307f\u305f\u3068\u304d\u306b\u5b9f\u884c\ndef on_connect(client, userdata, flags, respons_code):\n\n* client\nClient\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n* userdata\n\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306e\u30c7\u30fc\u30bf\u3067\u65b0\u305f\u306aClient\u30af\u30e9\u30b9\u306e\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b>\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n* flags\n\u5fdc\u7b54\u30d5\u30e9\u30b0\u304c\u542b\u307e\u308c\u308b\u8f9e\u66f8\n\u30af\u30ea\u30fc\u30f3\u30bb\u30c3\u30b7\u30e7\u30f3\u30920\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306b\u6709\u52b9\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u307e\u3060\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\u30af\u30ea\u30fc\u30f3\u30bb\u30c3\u30b7\u30e7\u30f3\u304c0\u306e\u3068\u304d\u306f\u4ee5\u524d\u306b\u63a5\u7d9a\u3057\u305f\u30e6\u30fc\u30b6\u306b\u518d\u63a5\u7d9a\u3059\u308b\u3002\n\n0 : \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u3066\u3044\u306a\u3044\n1 : \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\n\n* respons_code\n\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u306f\u63a5\u7d9a\u304c\u6210\u529f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u3002\n0: \u63a5\u7d9a\u6210\u529f\n1: \u63a5\u7d9a\u5931\u6557 - incorrect protocol version\n2: \u63a5\u7d9a\u5931\u6557 - invalid client identifier\n3: \u63a5\u7d9a\u5931\u6557 - server unavailable\n4: \u63a5\u7d9a\u5931\u6557 - bad username or password\n5: \u63a5\u7d9a\u5931\u6557 - not authorised\n\"\"\"\ndef on_connect(client, userdata, flags, respons_code):\n    print('status {0}'.format(respons_code))\n    client.subscribe(client.topic)\n\n\"\"\"\ndef on_message(client, userdata, message):\ntopic\u3092\u53d7\u4fe1\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3059\u308b\n\"\"\"\ndef on_message(client, userdata, message):\n    print(message.topic + ' ' + str(message.payload))\n\nif __name__ == '__main__':\n\n    client = mqtt.Client(protocol=mqtt.MQTTv311)\n    client.topic = TOPIC\n\n    client.on_connect = on_connect\n    client.on_message = on_message\n\n    client.connect(HOST, port=PORT, keepalive=KEEP_ALIVE)\n\n    # \u30eb\u30fc\u30d7\n    client.loop_forever()                                  \n```\n\n```\n[root@localhost tmp]# python publisher.py \n[root@localhost tmp]# python subscriber.py \nstatus 0\ntest_topic/test1 test message\ntest_topic/test1 test message\ntest_topic/test1 test message\n```\n\nclient.on_connect()\u3068client.on_message()\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3001\nclient.loop_forever()\u306e\u4e2d\u306e\u30eb\u30fc\u30d7\u3067\u3001\u30cf\u30f3\u30c9\u30e9\u30fc\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u3064\u3044\u3066\u306f[\u3053\u3053](http://qiita.com/pocket8137/items/df5afba90b51e90587a5)\u3092\u53c2\u7167\u3002\n\n```py3\ndef _handle_connack(self):\n    if self._strict_protocol:\n        if self._in_packet['remaining_length'] != 2:\n            return MQTT_ERR_PROTOCOL\n\n    if len(self._in_packet['packet']) != 2:\n        return MQTT_ERR_PROTOCOL\n\n    (flags, result) = struct.unpack(\"!BB\", self._in_packet['packet'])\n    if result == CONNACK_REFUSED_PROTOCOL_VERSION and self._protocol == MQTTv311:\n        self._easy_log(MQTT_LOG_DEBUG, \"Received CONNACK (\"+str(flags)+\", \"+str(result)+\"), attempting downgrade to MQTT v3.1.\")\n        # Downgrade to MQTT v3.1\n        self._protocol = MQTTv31\n        return self.reconnect()\n\n    if result == 0:\n        self._state = mqtt_cs_connected\n\n    self._easy_log(MQTT_LOG_DEBUG, \"Received CONNACK (\"+str(flags)+\", \"+str(result)+\")\")\n    self._callback_mutex.acquire()\n    if self.on_connect:\n        self._in_callback = True\n\n        if sys.version_info[0] < 3:\n            argcount = self.on_connect.func_code.co_argcount\n        else:\n            argcount = self.on_connect.__code__.co_argcount\n\n        if argcount == 3:\n            self.on_connect(self, self._userdata, result)\n        else:\n            flags_dict = dict()\n            flags_dict['session present'] = flags & 0x01\n            self.on_connect(self, self._userdata, flags_dict, result)\n        self._in_callback = False\n    self._callback_mutex.release()\n    if result == 0:\n        rc = 0\n        self._out_message_mutex.acquire()\n        for m in self._out_messages:\n            m.timestamp = time.time()\n            if m.state == mqtt_ms_queued:\n                self.loop_write() # Process outgoing messages that have just been queued up\n                self._out_message_mutex.release()\n                return MQTT_ERR_SUCCESS\n\n            if m.qos == 0:\n                self._in_callback = True # Don't call loop_write after _send_publish()\n                rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                self._in_callback = False\n                if rc != 0:\n                    self._out_message_mutex.release()\n                    return rc\n            elif m.qos == 1:\n                if m.state == mqtt_ms_publish:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_puback\n                    self._in_callback = True # Don't call loop_write after _send_publish()\n                    rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n            elif m.qos == 2:\n                if m.state == mqtt_ms_publish:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_pubrec\n                    self._in_callback = True # Don't call loop_write after _send_publish()\n                    rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n                elif m.state == mqtt_ms_resend_pubrel:\n                    self._inflight_messages = self._inflight_messages + 1\n                    m.state = mqtt_ms_wait_for_pubcomp\n                    self._in_callback = True # Don't call loop_write after _send_pubrel()\n                    rc = self._send_pubrel(m.mid, m.dup)\n                    self._in_callback = False\n                    if rc != 0:\n                        self._out_message_mutex.release()\n                        return rc\n            self.loop_write() # Process outgoing messages that have just been queued up\n        self._out_message_mutex.release()\n        return rc\n    elif result > 0 and result < 6:\n        return MQTT_ERR_CONN_REFUSED\n    else:\n        return MQTT_ERR_PROTOCOL\n```\n\n```py3\ndef _handle_on_message(self, message):\n    self._callback_mutex.acquire()\n    matched = False\n    for t in self.on_message_filtered:\n        if topic_matches_sub(t[0], message.topic):\n            self._in_callback = True\n            t[1](self, self._userdata, message)\n            self._in_callback = False\n            matched = True\n\n    if matched == False and self.on_message:\n        self._in_callback = True\n        self.on_message(self, self._userdata, message)\n        self._in_callback = False\n\n    self._callback_mutex.release()\n```\n\n# \u25a0 \u53c2\u8003\u30b5\u30a4\u30c8\n\n* [\u516c\u5f0f](http://mosquitto.org/)\n* [MQTT \u30d6\u30ed\u30fc\u30ab mosquitto \u3092 WebSocket \u5bfe\u5fdc\u7248\u306b\u3059\u308b](http://www.allbluesystem.com/wp/?p=782)\n\n", "tags": ["mqtt", "Python", "mosquitto", "websocket"]}