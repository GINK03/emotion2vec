{"context": "\n\n\u306f\u3058\u3081\u306b\n\u306f\u308b\u304b\u6614\u306bTwitter\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3002\u3068\u3044\u3046\u306e\u3092\u3084\u3063\u305f\u306e\u3067\u3059\u304c\u3001Django\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u3088\u3046\u3068\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u7d50\u679c\u3092\u6700\u521d\u306b\u8a00\u3046\u3068\u3001\u554f\u984c\u5927\u30a2\u30ea\u3067\u3059\u3002\u73fe\u6642\u70b9\u3067\u306e\u4f5c\u696d\u9014\u4e2d\u7d4c\u904e\u307e\u3067\u3092\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u904e\u53bb\u306e\u8a18\u4e8b\u306f\u3053\u3061\u3089\u304b\u3089\nTwitter\u691c\u7d22\u3067\u60c5\u5831\u3092\u6e9c\u3081\u8fbc\u307f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u6587\u7ae0\u3092\u751f\u6210\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3002\nPython3\u3067\u306f.has_key\u3000\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001\n\nif markov.has_key(w):\n\n\u3068\u3044\u3046\u51e6\u7406\u306f\n\nif w in markov:\n\n\u3068\u66f8\u304d\u63db\u3048\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\nPython3\u3067MeCab\u3092\u4f7f\u3046\u6e96\u5099\n$ brew install mecab\n$ brew install mecab-ipadic\n$ pip install mecab-python3\n\n\u3053\u3046\u3044\u3046\u5f62\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\u4f8b\u306b\u3088\u3063\u3066DMM18\u7981\u52d5\u753b\u306eRSS\u3092\u53d6\u308a\u306b\u884c\u304d\u307e\u3059\u3002\nDjango\u3067\u4f5c\u308b\u7c21\u6613RSS\u30ea\u30fc\u30c0\u30fc\n\u4e0a\u8a18\u3068\u307b\u307c\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u53c2\u8003\u306b\u3069\u3046\u305e\u3002\n\u30bf\u30a4\u30c8\u30eb\u3068\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\nviews.py\nimport feedparser\nimport MeCab\nimport random\nimport re\nimport sys, codecs\nsys.stdout = codecs.getwriter('utf-8')(sys.stdout)\n\nfrom django.http import HttpResponse\nfrom django.shortcuts import (render, redirect,)\n\ndef index(request):\n    url = 'http://www.dmm.co.jp/digital/videoa/-/list/rss/=/sort=date/'\n    feeder = feedparser.parse(url)\n\n\n    for entry in feeder['entries']:\n        lists = entry['description'] + entry['title']\n        f = open('text.txt', 'w')\n        f.write(lists)\n        f.flush()\n        f.close()\n\n    f = open('text.txt', 'r')\n    mecab_read = f.read()\n    f.close()\n\n    tagger = MeCab.Tagger('-Owakati')\n    wordlist = tagger.parse(mecab_read)\n    wordlist = wordlist.rstrip(' \\n').split(' ')\n\n    f = open('l.txt', 'w')\n    f.write(str(wordlist))\n    f.close()\n\n    markov = {}\n    w = ''\n\n    for x in wordlist:\n        if w:\n            if w in markov:\n                new_list = markov[w]\n            else:\n                new_list =[]\n\n            new_list.append(x)\n            markov[w] = new_list\n        w = x\n\n    choice_words = wordlist[0]\n    sentence = ''\n    count = 0\n\n    while count < 20:\n        choice_words = random.choice(wordlist)\n        sentence += choice_words\n        count += 1\n        sentence = sentence.split(' ', 1)[0]\n        p = re.compile('[!-/:-@[-`{-~]')\n        sus = p.sub('', sentence)\n\n    context = {\n        'wordlist': wordlist,\n        'sus': sus,\n        }\n\n    return render(request,'index.html',context)\n\n\n\nindex.html\n{% extends \"base.html\" %}\n{% block body %}\n  <div class=\"container\">\n    <div class=\"row\">\n\n      <div class=\"col-md-12\">\n        <p class=\"1\">{{ wordlist }}</p>\n        <p class=\"2\">{{ sus }}</p>\n      </div>\n\n    </div>\n  </div>\n\n{% endblock %}\n\n\n\n\u7d50\u679c\n\n\u3053\u306e\u3088\u3046\u306a\u30af\u30bd\u7d50\u679c\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u91d1\u984d\u304c\u5165\u3063\u3061\u3083\u3063\u3066\u308b\u306e\u3067\u9664\u53bb\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u99c4\u76ee\u3067\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\u5973\u512a\u540d\u3082\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u610f\u5473\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308b\u3053\u3068\u3082\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u7cbe\u9032\u3057\u307e\u3059\u3002\n\n\u672c\u6765\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\nAV\u30bf\u30a4\u30c8\u30eb\u3092\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u4f5c\u308a\u305f\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n#\u306f\u3058\u3081\u306b\n\n\u306f\u308b\u304b\u6614\u306bTwitter\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3002\u3068\u3044\u3046\u306e\u3092\u3084\u3063\u305f\u306e\u3067\u3059\u304c\u3001Django\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u3088\u3046\u3068\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u7d50\u679c\u3092\u6700\u521d\u306b\u8a00\u3046\u3068\u3001\u554f\u984c\u5927\u30a2\u30ea\u3067\u3059\u3002\u73fe\u6642\u70b9\u3067\u306e\u4f5c\u696d\u9014\u4e2d\u7d4c\u904e\u307e\u3067\u3092\u6b8b\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u904e\u53bb\u306e\u8a18\u4e8b\u306f\u3053\u3061\u3089\u304b\u3089\n[Twitter\u691c\u7d22\u3067\u60c5\u5831\u3092\u6e9c\u3081\u8fbc\u307f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u6587\u7ae0\u3092\u751f\u6210\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3002](http://qiita.com/Gen6/items/e1f4532877764394fcf0)\n\nPython3\u3067\u306f.has_key\u3000\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001\n```\nif markov.has_key(w):\n```\n\n\u3068\u3044\u3046\u51e6\u7406\u306f\n```\nif w in markov:\n```\n\n\u3068\u66f8\u304d\u63db\u3048\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n#Python3\u3067MeCab\u3092\u4f7f\u3046\u6e96\u5099\n\n```\n$ brew install mecab\n$ brew install mecab-ipadic\n$ pip install mecab-python3\n```\n\n\u3053\u3046\u3044\u3046\u5f62\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u30b3\u30fc\u30c9\n\n\u4f8b\u306b\u3088\u3063\u3066DMM18\u7981\u52d5\u753b\u306eRSS\u3092\u53d6\u308a\u306b\u884c\u304d\u307e\u3059\u3002\n\n[Django\u3067\u4f5c\u308b\u7c21\u6613RSS\u30ea\u30fc\u30c0\u30fc](http://qiita.com/Gen6/items/165c5fd67b759de536a7)\n\u4e0a\u8a18\u3068\u307b\u307c\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u53c2\u8003\u306b\u3069\u3046\u305e\u3002\n\n\n\u30bf\u30a4\u30c8\u30eb\u3068\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```views.py\nimport feedparser\nimport MeCab\nimport random\nimport re\nimport sys, codecs\nsys.stdout = codecs.getwriter('utf-8')(sys.stdout)\n\nfrom django.http import HttpResponse\nfrom django.shortcuts import (render, redirect,)\n\ndef index(request):\n    url = 'http://www.dmm.co.jp/digital/videoa/-/list/rss/=/sort=date/'\n    feeder = feedparser.parse(url)\n\n\n    for entry in feeder['entries']:\n        lists = entry['description'] + entry['title']\n        f = open('text.txt', 'w')\n        f.write(lists)\n        f.flush()\n        f.close()\n\n    f = open('text.txt', 'r')\n    mecab_read = f.read()\n    f.close()\n\n    tagger = MeCab.Tagger('-Owakati')\n    wordlist = tagger.parse(mecab_read)\n    wordlist = wordlist.rstrip(' \\n').split(' ')\n\n    f = open('l.txt', 'w')\n    f.write(str(wordlist))\n    f.close()\n\n    markov = {}\n    w = ''\n\n    for x in wordlist:\n        if w:\n            if w in markov:\n                new_list = markov[w]\n            else:\n                new_list =[]\n\n            new_list.append(x)\n            markov[w] = new_list\n        w = x\n\n    choice_words = wordlist[0]\n    sentence = ''\n    count = 0\n\n    while count < 20:\n        choice_words = random.choice(wordlist)\n        sentence += choice_words\n        count += 1\n        sentence = sentence.split(' ', 1)[0]\n        p = re.compile('[!-/:-@[-`{-~]')\n        sus = p.sub('', sentence)\n\n    context = {\n        'wordlist': wordlist,\n        'sus': sus,\n        }\n\n    return render(request,'index.html',context)\n```\n\n```index.html\n{% extends \"base.html\" %}\n{% block body %}\n  <div class=\"container\">\n    <div class=\"row\">\n\n      <div class=\"col-md-12\">\n        <p class=\"1\">{{ wordlist }}</p>\n        <p class=\"2\">{{ sus }}</p>\n      </div>\n\n    </div>\n  </div>\n\n{% endblock %}\n```\n\n#\u7d50\u679c\n\n<img width=\"1251\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-21 13.41.16.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/71585/4c526960-0a5a-6dd5-fad8-bb054077eb98.png\">\n\n\n\u3053\u306e\u3088\u3046\u306a\u30af\u30bd\u7d50\u679c\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u91d1\u984d\u304c\u5165\u3063\u3061\u3083\u3063\u3066\u308b\u306e\u3067\u9664\u53bb\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u99c4\u76ee\u3067\u3059\u306d\u30fb\u30fb\u30fb\u3002\n\n\u5973\u512a\u540d\u3082\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u610f\u5473\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308b\u3053\u3068\u3082\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u7cbe\u9032\u3057\u307e\u3059\u3002\n\n#\u672c\u6765\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n\nAV\u30bf\u30a4\u30c8\u30eb\u3092\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u4f5c\u308a\u305f\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\n\n", "tags": ["Django", "python3", "Python", "\u30de\u30eb\u30b3\u30d5\u9023\u9396", "\u5f62\u614b\u7d20\u89e3\u6790"]}