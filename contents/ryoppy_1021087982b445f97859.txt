{"context": " More than 1 year has passed since last update.TreasureData\u3092scalikejdbc\u3067\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306b\u3001\u72ec\u81ea\u306e\u30ab\u30e9\u30e0\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3059\u3002\nTreasureData(presto)\u306b\u306f\u3001Array\u306e\u30ab\u30e9\u30e0\u304c\u4f7f\u3048\u3066varchar\u3084int\u3092\u5165\u308c\u3089\u308c\u308b\u3002\n\u53d6\u5f97\u3059\u308b\u3068\u3001[1,2,3]\u306e\u3088\u3046\u306ajson\u5f62\u5f0f\u306e\u914d\u5217\u3067\u8fd4\u3063\u3066\u304f\u308b\u3002\n\n\u72ec\u81ea\u306e\u578b\u3068\u30c6\u30fc\u30d6\u30eb\n\u578b\u3068\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u9020\u306f\u4ee5\u4e0b\u3068\u3059\u308b\u3002\ncase class TDArray[A](values: Seq[A])\ncase class Foo(\n  id: Int,\n  arrStr: TDArray[String],\n  arrInt: TDArray[Int],\n  time: Long)\n\nobject Foo extends SQLSyntaxSupport[Foo] {\n  override val tableName = \"foo\"\n  override val columns = Seq(\"id\", \"arr_str\", \"arr_int\", \"time\")\n  def apply(rn: ResultName[Foo])(rs: WrappedResultSet): Foo = autoConstruct(rs, rn)\n}\n\n\u3053\u308c\u3092read\u3059\u308b\u3002\nobject FooDao {\n  val f = Foo.syntax(\"f\")\n  def read(id: Int)(implicit session: DBSession = AutoSession): Seq[Foo] = {\n    withSQL {\n      select\n        .from(Foo as f)\n    }\n      .map(Foo(f.resultName))\n      .list().apply()\n  }\n}\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u3001TDArray\u3092\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\u7d50\u679c\u30bb\u30c3\u30c8\u304b\u3089\u3001\u5024\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306bTypeBinder\u3092\u7d4c\u7531\u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001TypeBinder\u306b\u72ec\u81ea\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3044\u3044\u3002\n\u578b\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001implicit\u3067\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\nobject TDArray {\n  val stringTypeBinder: TypeBinder[TDArray[String]] = {\n    TypeBinder(_ getString _)(_ getString _).map { s =>\n      if (s == null) TDArray(Seq[String]())\n      else TDArray(s.init.tail.replace(\"\\\"\", \"\").split(',').map(_.trim))\n    }\n  }\n\n  implicit val tdString: TypeBinder[TDArray[String]] = stringTypeBinder\n  implicit val tdInt: TypeBinder[TDArray[Int]] = stringTypeBinder.map { tda => TDArray(tda.values.map(_.toInt)) }\n}\n\njson\u306e\u30d1\u30fc\u30b9\u306e\u6240\u306f\u3066\u304d\u3068\u3046\u3002\n\u3053\u308c\u3067read\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u8aac\u660e\n\u307e\u305aFoo\u306eapply\u3067\u4f7f\u3063\u3066\u3044\u308bautoConstruct\u306e\u30de\u30af\u30ed\u3067\u3001WrappedResultSet\u306eget\u3092\u547c\u3076\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u3044\u308b\u3002\nWrappedResultSet\u306eget\u306f\u3001TypeBinder\u3092\u53d6\u5f97\u3057\u3066apply\u3057\u3066\u308b\u3002\u69cb\u6587\u304c\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306f\"scala \u578b\u30af\u30e9\u30b9\"\u3067\uff78\uff9e\uff78\uff9e\uff99\u3068\u3088\u308d\u3057\u3002\n\u306a\u306e\u3067\u3001TypeBinder\u306eimplicit\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u3068\u3044\u3046\u308f\u3051\u3060\u3002\n\u304a\u308f\u308a\n\u8ffd\u8a18\n\u3061\u306a\u307f\u306bWrappedResultSet\u306earray\u306f\u3001TreasureData\u306eJDBC\u30c9\u30e9\u30a4\u30d0\u304cgetArray\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u306e\u3067Unsopported..\u306e\u4f8b\u5916\u306b\u306a\u308b\u3002\u256d(\u00b0\u3142\u00b0`)\u256e\n\uff08\u00b4-`\uff09.\uff61oO\uff08TreasureData\u3088\u304f\u5206\u304b\u3089\u3093...)\nTreasureData\u3092scalikejdbc\u3067\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306b\u3001\u72ec\u81ea\u306e\u30ab\u30e9\u30e0\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3059\u3002\n\nTreasureData(presto)\u306b\u306f\u3001Array\u306e\u30ab\u30e9\u30e0\u304c\u4f7f\u3048\u3066varchar\u3084int\u3092\u5165\u308c\u3089\u308c\u308b\u3002\n\n\u53d6\u5f97\u3059\u308b\u3068\u3001`[1,2,3]`\u306e\u3088\u3046\u306ajson\u5f62\u5f0f\u306e\u914d\u5217\u3067\u8fd4\u3063\u3066\u304f\u308b\u3002\n\n## \u72ec\u81ea\u306e\u578b\u3068\u30c6\u30fc\u30d6\u30eb\n\n\u578b\u3068\u30c6\u30fc\u30d6\u30eb\u306e\u69cb\u9020\u306f\u4ee5\u4e0b\u3068\u3059\u308b\u3002\n\n```scala\ncase class TDArray[A](values: Seq[A])\ncase class Foo(\n  id: Int,\n  arrStr: TDArray[String],\n  arrInt: TDArray[Int],\n  time: Long)\n\nobject Foo extends SQLSyntaxSupport[Foo] {\n  override val tableName = \"foo\"\n  override val columns = Seq(\"id\", \"arr_str\", \"arr_int\", \"time\")\n  def apply(rn: ResultName[Foo])(rs: WrappedResultSet): Foo = autoConstruct(rs, rn)\n}\n```\n\n\u3053\u308c\u3092read\u3059\u308b\u3002\n\n```scala\nobject FooDao {\n  val f = Foo.syntax(\"f\")\n  def read(id: Int)(implicit session: DBSession = AutoSession): Seq[Foo] = {\n    withSQL {\n      select\n        .from(Foo as f)\n    }\n      .map(Foo(f.resultName))\n      .list().apply()\n  }\n}\n```\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u3001TDArray\u3092\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n\u7d50\u679c\u30bb\u30c3\u30c8\u304b\u3089\u3001\u5024\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306bTypeBinder\u3092\u7d4c\u7531\u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001TypeBinder\u306b\u72ec\u81ea\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3044\u3044\u3002\n\n\u578b\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001implicit\u3067\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```scala\nobject TDArray {\n  val stringTypeBinder: TypeBinder[TDArray[String]] = {\n    TypeBinder(_ getString _)(_ getString _).map { s =>\n      if (s == null) TDArray(Seq[String]())\n      else TDArray(s.init.tail.replace(\"\\\"\", \"\").split(',').map(_.trim))\n    }\n  }\n\n  implicit val tdString: TypeBinder[TDArray[String]] = stringTypeBinder\n  implicit val tdInt: TypeBinder[TDArray[Int]] = stringTypeBinder.map { tda => TDArray(tda.values.map(_.toInt)) }\n}\n```\n\njson\u306e\u30d1\u30fc\u30b9\u306e\u6240\u306f\u3066\u304d\u3068\u3046\u3002\n\n\u3053\u308c\u3067read\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n## \u3082\u3046\u3061\u3087\u3063\u3068\u8aac\u660e\n\n\u307e\u305aFoo\u306eapply\u3067\u4f7f\u3063\u3066\u3044\u308bautoConstruct\u306e\u30de\u30af\u30ed\u3067\u3001[WrappedResultSet\u306eget](https://github.com/scalikejdbc/scalikejdbc/blob/master/scalikejdbc-syntax-support-macro/src/main/scala/scalikejdbc/autoConstruct.scala#L14)\u3092\u547c\u3076\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u3044\u308b\u3002\n\n[WrappedResultSet\u306eget](https://github.com/scalikejdbc/scalikejdbc/blob/4fa10fca87e6f712074852726bf6691f4ecabcd4/scalikejdbc-core/src/main/scala/scalikejdbc/WrappedResultSet.scala#L457-L460)\u306f\u3001TypeBinder\u3092\u53d6\u5f97\u3057\u3066apply\u3057\u3066\u308b\u3002\u69cb\u6587\u304c\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306f\"scala \u578b\u30af\u30e9\u30b9\"\u3067\uff78\uff9e\uff78\uff9e\uff99\u3068\u3088\u308d\u3057\u3002\n\n\u306a\u306e\u3067\u3001TypeBinder\u306eimplicit\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u3068\u3044\u3046\u308f\u3051\u3060\u3002\n\n\u304a\u308f\u308a\n\n\u8ffd\u8a18\n\n\u3061\u306a\u307f\u306bWrappedResultSet\u306earray\u306f\u3001TreasureData\u306eJDBC\u30c9\u30e9\u30a4\u30d0\u304cgetArray\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u306e\u3067Unsopported..\u306e\u4f8b\u5916\u306b\u306a\u308b\u3002\u256d(\u00b0\u3142\u00b0`)\u256e\n\n\uff08\u00b4-`\uff09.\uff61oO\uff08TreasureData\u3088\u304f\u5206\u304b\u3089\u3093...)\n", "tags": ["Scala2.11.5", "TreasureData"]}