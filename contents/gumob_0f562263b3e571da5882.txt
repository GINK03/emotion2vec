{"context": "\n\nItems to install\n\nHomebrew\nJDK\nCommand Line Tools\nMySQL\nGit\nRuby, rbenv, rails\nNode.js, nvm, grunt, bower\npyenv, virtualenv, django\nCocoaPods\n\n\nInstall JDK\nJava SE Development Kit 8 Downloads\n\n$ java -version\njava version \"1.8.0_77\"\nJava(TM) SE Runtime Environment (build 1.8.0_77-b03)\nJava HotSpot(TM) 64-Bit Server VM (\n\n\nInstall Command Line Tools for Xcode\nCommand Line Tools (OS X 10.11) for Xcode 7.3\n\nInstall homebrew\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n$ brew doctor\nYour system is ready to brew.\n\n$ brew update\nAlready up-to-date.\n\n$ brew -v\nHomebrew 0.9.5 (git revision be7f; last commit 2016-03-24)\n\n\nInstall MySQL\n$ brew install mysql\n==> Installing mysql\n==> Downloading https://homebrew.bintray.com/bottles/mysql-5.7.11.el_capitan.bottle.tar.gz\n...\n\n\nInstall Git && OpenSSL\n$ git --version\ngit version 2.6.4 (Apple Git-63)\n\n$ brew install git\n==> Downloading https://homebrew.bintray.com/bottles/git-2.7.4.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring git-2.7.4.el_capitan.bottle.tar.gz\n...\n$ git --version\ngit version 2.6.4 (Apple Git-63)\n\n$ echo export PATH='/usr/local/bin:$PATH' >> ~/.bash_profile\n\n$ source ~/.bash_profile\n\n$ brew unlink git && brew link git\n\n$ git --version\ngit version 2.1.2\n\n$ which openssl\n/usr/bin/openssl\n\n$ brew link --force openssl\nLinking /usr/local/Cellar/openssl/1.0.2g... 1588 symlinks created\n\n$ which openssl\n/usr/local/bin/openssl\n\n\nInstall Ruby, rbenv, and Rails\n$ brew install readline\n==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/readline-6.3.8.mavericks.bottle.tar.gz\n######################################################################## 100.0%\n...\n\n$ brew install rbenv ruby-build rbenv-gemset\n==> Installing dependencies for rbenv: autoconf, pkg-config, ruby-build\n==> Installing rbenv dependency: autoconf\n==> Downloading https://homebrew.bintray.com/bottles/autoconf-2.69.el_capitan.bottle.4.tar.gz\n...\n\n$ rbenv -v\nrbenv 1.0.0\n\n$ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\n\n$ echo 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\n\n$ source ~/.bash_profile\n\n$ cat >> ~/.gemrc << EOF\ninstall: --no-rdoc --no-ri\nupdate: --no-rdoc --no-ri\nEOF\n\n$ cat >> ~/.railsrc << EOF\n--skip-bundle\n--skip-test-unit\nEOF\n\n$ rbenv install -l\n...\n2.2.4\n...\n\n$ rbenv install 2.2.4\n\n$ rbenv global 2.2.4\n\n$ ruby -v\nruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]\n\n$ which ruby\n/Users/*****/.rbenv/shims/ruby\n\n$ gem update --system\n\n$ gem install bundler rails\n\n$ gem install sass --pre && gem install compass --pre && gem install compass-recipes --pre && gem install animation --pre && gem install susy --pre && gem install haml\n\n$ rbenv rehash\n\n\nInstall node.js, nvm, and grunt\n$ brew install node\n==> Downloading https://homebrew.bintray.com/bottles/node-5.9.0.el_capitan.bottle.tar.gz\n...\n\n$ git clone git://github.com/creationix/nvm.git ~/.nvm\nCloning into '/Users/*****/.nvm'...\n...\n\n$ source ~/.nvm/nvm.sh\n\n$ node -v\nv5.9.0\n\n$ nvm --version\n0.31.0\n\n$ npm --version\n3.7.3\n\n$ npm install -g grunt-cli\n\n$ npm install -g bower\n\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sane defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: MyProject\nversion: (1.0.0)\ndescription:\nentry point: (index.js) Gruntfile.coffee\ntest command: grunt watch\ngit repository:\nkeywords:\nauthor: Developer\nlicense: (MIT)\nAbout to write to /Users/user/Project/MyProject/package.json:\n\n{\n  \"name\": \"My Project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"Gruntfile.coffee\",\n  \"scripts\": {\n    \"test\": \"grunt watch\"\n  },\n  \"author\": \"Developer\",\n  \"license\": \"MIT\"\n}\n\nIs this ok? (yes) yes\n\n$ npm install --save-dev grunt grunt-banner grunt-bower-task grunt-concurrent grunt-concat-sourcemap grunt-contrib-clean grunt-contrib-coffee grunt-contrib-compass grunt-contrib-compress grunt-contrib-concat grunt-contrib-concat-sourcemaps grunt-contrib-connect grunt-contrib-copy grunt-contrib-cssmin grunt-contrib-haml grunt-contrib-htmlmin grunt-contrib-imagemin grunt-contrib-jade grunt-contrib-requirejs grunt-contrib-uglify grunt-contrib-watch grunt-devtools grunt-html-validation grunt-notify grunt-parallel grunt-play grunt-s3 grunt-shell grunt-slim load-grunt-tasks\n\n$ cat package.json\n{\n  \"name\": \"My Project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"Gruntfile.coffeee\",\n  \"scripts\": {\n    \"test\": \"grunt watch\"\n  },\n  \"author\": \"Developer\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"grunt\": \"^0.4.5\",\n    \"grunt-banner\": \"^0.2.3\",\n    \"grunt-bower-task\": \"^0.4.0\",\n    \"grunt-concurrent\": \"^1.0.0\",\n    \"grunt-contrib-clean\": \"^0.6.0\",\n    \"grunt-contrib-coffee\": \"^0.11.1\",\n    \"grunt-contrib-compass\": \"^1.0.1\",\n    \"grunt-contrib-compress\": \"^0.12.0\",\n    \"grunt-contrib-concat\": \"^0.5.0\",\n    \"grunt-contrib-connect\": \"^0.8.0\",\n    \"grunt-contrib-copy\": \"^0.6.0\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"grunt-contrib-haml\": \"^0.2.0\",\n    \"grunt-contrib-htmlmin\": \"^0.3.0\",\n    \"grunt-contrib-imagemin\": \"^0.8.1\",\n    \"grunt-contrib-jade\": \"^0.12.0\",\n    \"grunt-contrib-requirejs\": \"^0.4.4\",\n    \"grunt-contrib-uglify\": \"^0.6.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\",\n    \"grunt-devtools\": \"^0.2.1\",\n    \"grunt-html-validation\": \"^0.1.18\",\n    \"grunt-notify\": \"^0.3.1\",\n    \"grunt-parallel\": \"^0.3.1\",\n    \"grunt-play\": \"^0.1.0\",\n    \"grunt-s3\": \"^0.2.0-alpha.3\",\n    \"grunt-shell\": \"^1.1.1\",\n    \"grunt-slim\": \"^0.1.0\",\n    \"load-grunt-tasks\": \"^0.6.0\"\n  }\n}\n\n$ bower init\n[?] May bower anonymously report usage statistics to improve the tool over time? No\n? name: My Project\n? version: 1.0.0\n? description:\n? main file: index.html\n? what types of modules does this package expose?:\n? keywords:\n? authors: Developer\n? license: MIT\n? homepage:\n? set currently installed components as dependencies?: Yes\n? add commonly ignored files to ignore list?: Yes\n? would you like to mark this package as private which prevents it from being accidentally published to the registry?: (y? would you like to mark this package as private which prevents it from being accidentally published to the registry?: Yes\n\n{\n  name: 'My Project',\n  version: '1.0.0',\n  main: 'index.html',\n  authors: [\n    'Developer'\n  ],\n  license: 'MIT',\n  private: true,\n  ignore: [\n    '**/.*',\n    'node_modules',\n    'bower_components',\n    'test',\n    'tests'\n  ]\n}\n\n? Looks good?: Yes\n$ bower install --save-dev bootstrap jquery underscore normalize-css\n$ cat bower.json\n{\n    \"name\": \"My Project\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.html\",\n    \"authors\": [\n        \"Developer\"\n    ],\n    \"license\": \"MIT\",\n    \"private\": true,\n    \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"test\",\n        \"tests\"\n    ],\n    \"devDependencies\": {\n        \"bootstrap\": \"~3.2.0\",\n        \"jquery\": \"~2.1.1\",\n        \"underscore\": \"~1.7.0\",\n        \"normalize-css\": \"~3.0.2\"\n    },\n    \"exportsOverride\": {\n        \"bootstrap\": {\n            \"js\": [\n                \"**/bootstrap.js\"\n            ],\n            \"css\": [\n                \"**/bootstrap.css\",\n                \"**/bootstrap.css.map\",\n                \"**/bootstrap-theme.css\",\n                \"**/bootstrap-theme.css.map\"\n            ],\n            \"fonts\": [\n                \"**/*.eot\",\n                \"**/*.svg\",\n                \"**/*.ttf\",\n                \"**/*.woff\"\n            ]\n        },\n        \"jquery\": {\n            \"js\": \"dist/*.js\"\n        },\n        \"underscore\": {\n            \"js\": \"**/underscore.js\"\n        },\n        \"normalize-css\": {\n            \"css\": \"**/normalize.css\"\n        }\n    }\n}\n\n$ vi Gruntfile.coffee\nmodule.exports = (grunt) ->\n  \"use strict\"\n  grunt.initConfig\n    pkg: grunt.file.readJSON(\"package.json\")\n    bower:\n      install:\n        options:\n          targetDir: \"./lib\"\n          layout: \"byType\"\n          install: true\n          verbose: false\n          cleanTargetDir: true\n          cleanBowerDir: false\n\n  grunt.loadNpmTasks \"grunt-bower-task\"\n  grunt.registerTask \"default\", [\"bower:install\"]\n  return\n\n\nInstall pyenv & virtualenv\n$ python --version\nPython 2.7.10\n\n$ which python\n/usr/bin/python\n\n$ brew install pyenv\n==> Downloading https://github.com/yyuu/pyenv/archive/v20160310.tar.gz\n...\n\n$ brew install homebrew/boneyard/pyenv-pip-rehash\n==> Tapping homebrew/boneyard\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-boneyard'...\n...\n\n$ vi ~/.bash_profile\n...\nexport PYENV_ROOT=${HOME}/.pyenv\nif [ -d \"${PYENV_ROOT}\" ]; then\n    export PATH=${PYENV_ROOT}/bin:$PATH\n    eval \"$(pyenv init -)\"\nfi\n\n$ pyenv versions\n* system (set by /Users/*****/.pyenv/version)\n\n$ pyenv install --list\n...\n2.7.11\n...\n\n$ pyenv install 2.7.11\n\n$ pyenv versions\n* system (set by /Users/*****/.pyenv/version)\n  2.7.11\n\n$ pyenv global 2.7.11 && pyenv versions\n  system\n* 2.7.11 (set by /Users/*****/.pyenv/version)\n\n$ pip install --upgrade pip\n\n$ brew install pyenv-virtualenv pyenv-virtualenvwrapper\n\n$ vi ~/.bash_profile\n...\nexport PYENV_ROOT=${HOME}/.pyenv\nif [ -d \"${PYENV_ROOT}\" ]; then\n    export PATH=${PYENV_ROOT}/bin:$PATH\n    eval \"$(pyenv init -)\"\n    eval \"$(pyenv virtualenv-init -)\"\n    export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV=\"true\"\n    pyenv virtualenvwrapper\nfi\n\n$ source ~/.bash_profile\n\n\nInstall Django and python modules on virtualenv\n$ mkvirtualenv VIRTUALENV_NAME\n\n(VIRTUALENV_NAME)$ cat >> ./requirements.txt << EOF\n... (write module names you want to install) ...\nDjango=1.9\n... (write module names you want to install) ...\nEOF\n\n(VIRTUALENV_NAME)$ pip install -r requirements.txt\nDownloading/unpacking django (from -r pip-install.txt (line 1))\n...\n\n(VIRTUALENV_NAME)$ source deactivate\n\n\nInstall gettext for i18n\n$ brew install gettext\n$ brew link gettext --force\n\n\nInstall CocoaPods\n$ gem install cocoapods\n...\nSuccessfully installed cocoapods-0.39.0\n...\n\n$ pod setup\nSetting up CocoaPods master repo\n...\nSetup completed\n\n# Items to install\n\n* Homebrew\n* JDK\n* Command Line Tools\n* MySQL\n* Git\n* Ruby, rbenv, rails\n* Node.js, nvm, grunt, bower\n* pyenv, virtualenv, django\n* CocoaPods\n\n# Install JDK\n\n[Java SE Development Kit 8 Downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n```\n$ java -version\njava version \"1.8.0_77\"\nJava(TM) SE Runtime Environment (build 1.8.0_77-b03)\nJava HotSpot(TM) 64-Bit Server VM (\n```\n\n# Install Command Line Tools for Xcode\n[Command Line Tools (OS X 10.11) for Xcode 7.3]\n(https://developer.apple.com/downloads/)\n\n# Install homebrew\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n$ brew doctor\nYour system is ready to brew.\n\n$ brew update\nAlready up-to-date.\n\n$ brew -v\nHomebrew 0.9.5 (git revision be7f; last commit 2016-03-24)\n```\n\n# Install MySQL\n```\n$ brew install mysql\n==> Installing mysql\n==> Downloading https://homebrew.bintray.com/bottles/mysql-5.7.11.el_capitan.bottle.tar.gz\n...\n```\n\n# Install Git && OpenSSL\n```\n$ git --version\ngit version 2.6.4 (Apple Git-63)\n\n$ brew install git\n==> Downloading https://homebrew.bintray.com/bottles/git-2.7.4.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring git-2.7.4.el_capitan.bottle.tar.gz\n...\n$ git --version\ngit version 2.6.4 (Apple Git-63)\n\n$ echo export PATH='/usr/local/bin:$PATH' >> ~/.bash_profile\n\n$ source ~/.bash_profile\n\n$ brew unlink git && brew link git\n\n$ git --version\ngit version 2.1.2\n\n$ which openssl\n/usr/bin/openssl\n\n$ brew link --force openssl\nLinking /usr/local/Cellar/openssl/1.0.2g... 1588 symlinks created\n\n$ which openssl\n/usr/local/bin/openssl\n```\n\n\n\n\n\n\n\n\n\n\n\n# Install Ruby, rbenv, and Rails\n\n```\n$ brew install readline\n==> Downloading https://downloads.sf.net/project/machomebrew/Bottles/readline-6.3.8.mavericks.bottle.tar.gz\n######################################################################## 100.0%\n...\n\n$ brew install rbenv ruby-build rbenv-gemset\n==> Installing dependencies for rbenv: autoconf, pkg-config, ruby-build\n==> Installing rbenv dependency: autoconf\n==> Downloading https://homebrew.bintray.com/bottles/autoconf-2.69.el_capitan.bottle.4.tar.gz\n...\n\n$ rbenv -v\nrbenv 1.0.0\n\n$ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\n\n$ echo 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\n\n$ source ~/.bash_profile\n\n$ cat >> ~/.gemrc << EOF\ninstall: --no-rdoc --no-ri\nupdate: --no-rdoc --no-ri\nEOF\n\n$ cat >> ~/.railsrc << EOF\n--skip-bundle\n--skip-test-unit\nEOF\n\n$ rbenv install -l\n...\n2.2.4\n...\n\n$ rbenv install 2.2.4\n\n$ rbenv global 2.2.4\n\n$ ruby -v\nruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]\n\n$ which ruby\n/Users/*****/.rbenv/shims/ruby\n\n$ gem update --system\n\n$ gem install bundler rails\n\n$ gem install sass --pre && gem install compass --pre && gem install compass-recipes --pre && gem install animation --pre && gem install susy --pre && gem install haml\n\n$ rbenv rehash\n```\n\n\n\n\n\n\n\n\n\n# Install node.js, nvm, and grunt\n\n```\n$ brew install node\n==> Downloading https://homebrew.bintray.com/bottles/node-5.9.0.el_capitan.bottle.tar.gz\n...\n\n$ git clone git://github.com/creationix/nvm.git ~/.nvm\nCloning into '/Users/*****/.nvm'...\n...\n\n$ source ~/.nvm/nvm.sh\n\n$ node -v\nv5.9.0\n\n$ nvm --version\n0.31.0\n\n$ npm --version\n3.7.3\n\n$ npm install -g grunt-cli\n\n$ npm install -g bower\n\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sane defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: MyProject\nversion: (1.0.0)\ndescription:\nentry point: (index.js) Gruntfile.coffee\ntest command: grunt watch\ngit repository:\nkeywords:\nauthor: Developer\nlicense: (MIT)\nAbout to write to /Users/user/Project/MyProject/package.json:\n\n{\n  \"name\": \"My Project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"Gruntfile.coffee\",\n  \"scripts\": {\n    \"test\": \"grunt watch\"\n  },\n  \"author\": \"Developer\",\n  \"license\": \"MIT\"\n}\n\nIs this ok? (yes) yes\n\n$ npm install --save-dev grunt grunt-banner grunt-bower-task grunt-concurrent grunt-concat-sourcemap grunt-contrib-clean grunt-contrib-coffee grunt-contrib-compass grunt-contrib-compress grunt-contrib-concat grunt-contrib-concat-sourcemaps grunt-contrib-connect grunt-contrib-copy grunt-contrib-cssmin grunt-contrib-haml grunt-contrib-htmlmin grunt-contrib-imagemin grunt-contrib-jade grunt-contrib-requirejs grunt-contrib-uglify grunt-contrib-watch grunt-devtools grunt-html-validation grunt-notify grunt-parallel grunt-play grunt-s3 grunt-shell grunt-slim load-grunt-tasks\n\n$ cat package.json\n{\n  \"name\": \"My Project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"Gruntfile.coffeee\",\n  \"scripts\": {\n    \"test\": \"grunt watch\"\n  },\n  \"author\": \"Developer\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"grunt\": \"^0.4.5\",\n    \"grunt-banner\": \"^0.2.3\",\n    \"grunt-bower-task\": \"^0.4.0\",\n    \"grunt-concurrent\": \"^1.0.0\",\n    \"grunt-contrib-clean\": \"^0.6.0\",\n    \"grunt-contrib-coffee\": \"^0.11.1\",\n    \"grunt-contrib-compass\": \"^1.0.1\",\n    \"grunt-contrib-compress\": \"^0.12.0\",\n    \"grunt-contrib-concat\": \"^0.5.0\",\n    \"grunt-contrib-connect\": \"^0.8.0\",\n    \"grunt-contrib-copy\": \"^0.6.0\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"grunt-contrib-haml\": \"^0.2.0\",\n    \"grunt-contrib-htmlmin\": \"^0.3.0\",\n    \"grunt-contrib-imagemin\": \"^0.8.1\",\n    \"grunt-contrib-jade\": \"^0.12.0\",\n    \"grunt-contrib-requirejs\": \"^0.4.4\",\n    \"grunt-contrib-uglify\": \"^0.6.0\",\n    \"grunt-contrib-watch\": \"^0.6.1\",\n    \"grunt-devtools\": \"^0.2.1\",\n    \"grunt-html-validation\": \"^0.1.18\",\n    \"grunt-notify\": \"^0.3.1\",\n    \"grunt-parallel\": \"^0.3.1\",\n    \"grunt-play\": \"^0.1.0\",\n    \"grunt-s3\": \"^0.2.0-alpha.3\",\n    \"grunt-shell\": \"^1.1.1\",\n    \"grunt-slim\": \"^0.1.0\",\n    \"load-grunt-tasks\": \"^0.6.0\"\n  }\n}\n\n$ bower init\n[?] May bower anonymously report usage statistics to improve the tool over time? No\n? name: My Project\n? version: 1.0.0\n? description:\n? main file: index.html\n? what types of modules does this package expose?:\n? keywords:\n? authors: Developer\n? license: MIT\n? homepage:\n? set currently installed components as dependencies?: Yes\n? add commonly ignored files to ignore list?: Yes\n? would you like to mark this package as private which prevents it from being accidentally published to the registry?: (y? would you like to mark this package as private which prevents it from being accidentally published to the registry?: Yes\n\n{\n  name: 'My Project',\n  version: '1.0.0',\n  main: 'index.html',\n  authors: [\n    'Developer'\n  ],\n  license: 'MIT',\n  private: true,\n  ignore: [\n    '**/.*',\n    'node_modules',\n    'bower_components',\n    'test',\n    'tests'\n  ]\n}\n\n? Looks good?: Yes\n$ bower install --save-dev bootstrap jquery underscore normalize-css\n$ cat bower.json\n{\n    \"name\": \"My Project\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.html\",\n    \"authors\": [\n        \"Developer\"\n    ],\n    \"license\": \"MIT\",\n    \"private\": true,\n    \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"test\",\n        \"tests\"\n    ],\n    \"devDependencies\": {\n        \"bootstrap\": \"~3.2.0\",\n        \"jquery\": \"~2.1.1\",\n        \"underscore\": \"~1.7.0\",\n        \"normalize-css\": \"~3.0.2\"\n    },\n    \"exportsOverride\": {\n        \"bootstrap\": {\n            \"js\": [\n                \"**/bootstrap.js\"\n            ],\n            \"css\": [\n                \"**/bootstrap.css\",\n                \"**/bootstrap.css.map\",\n                \"**/bootstrap-theme.css\",\n                \"**/bootstrap-theme.css.map\"\n            ],\n            \"fonts\": [\n                \"**/*.eot\",\n                \"**/*.svg\",\n                \"**/*.ttf\",\n                \"**/*.woff\"\n            ]\n        },\n        \"jquery\": {\n            \"js\": \"dist/*.js\"\n        },\n        \"underscore\": {\n            \"js\": \"**/underscore.js\"\n        },\n        \"normalize-css\": {\n            \"css\": \"**/normalize.css\"\n        }\n    }\n}\n\n$ vi Gruntfile.coffee\nmodule.exports = (grunt) ->\n  \"use strict\"\n  grunt.initConfig\n    pkg: grunt.file.readJSON(\"package.json\")\n    bower:\n      install:\n        options:\n          targetDir: \"./lib\"\n          layout: \"byType\"\n          install: true\n          verbose: false\n          cleanTargetDir: true\n          cleanBowerDir: false\n\n  grunt.loadNpmTasks \"grunt-bower-task\"\n  grunt.registerTask \"default\", [\"bower:install\"]\n  return\n```\n\n# Install pyenv & virtualenv\n\n```\n$ python --version\nPython 2.7.10\n\n$ which python\n/usr/bin/python\n\n$ brew install pyenv\n==> Downloading https://github.com/yyuu/pyenv/archive/v20160310.tar.gz\n...\n\n$ brew install homebrew/boneyard/pyenv-pip-rehash\n==> Tapping homebrew/boneyard\nCloning into '/usr/local/Library/Taps/homebrew/homebrew-boneyard'...\n...\n\n$ vi ~/.bash_profile\n...\nexport PYENV_ROOT=${HOME}/.pyenv\nif [ -d \"${PYENV_ROOT}\" ]; then\n    export PATH=${PYENV_ROOT}/bin:$PATH\n    eval \"$(pyenv init -)\"\nfi\n\n$ pyenv versions\n* system (set by /Users/*****/.pyenv/version)\n\n$ pyenv install --list\n...\n2.7.11\n...\n\n$ pyenv install 2.7.11\n\n$ pyenv versions\n* system (set by /Users/*****/.pyenv/version)\n  2.7.11\n\n$ pyenv global 2.7.11 && pyenv versions\n  system\n* 2.7.11 (set by /Users/*****/.pyenv/version)\n\n$ pip install --upgrade pip\n\n$ brew install pyenv-virtualenv pyenv-virtualenvwrapper\n\n$ vi ~/.bash_profile\n...\nexport PYENV_ROOT=${HOME}/.pyenv\nif [ -d \"${PYENV_ROOT}\" ]; then\n    export PATH=${PYENV_ROOT}/bin:$PATH\n    eval \"$(pyenv init -)\"\n    eval \"$(pyenv virtualenv-init -)\"\n    export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV=\"true\"\n    pyenv virtualenvwrapper\nfi\n\n$ source ~/.bash_profile\n```\n\n# Install Django and python modules on virtualenv\n\n```\n$ mkvirtualenv VIRTUALENV_NAME\n\n(VIRTUALENV_NAME)$ cat >> ./requirements.txt << EOF\n... (write module names you want to install) ...\nDjango=1.9\n... (write module names you want to install) ...\nEOF\n\n(VIRTUALENV_NAME)$ pip install -r requirements.txt\nDownloading/unpacking django (from -r pip-install.txt (line 1))\n...\n\n(VIRTUALENV_NAME)$ source deactivate\n```\n\n# Install gettext for i18n\n\n```\n$ brew install gettext\n$ brew link gettext --force\n```\n\n# Install CocoaPods\n\n```\n$ gem install cocoapods\n...\nSuccessfully installed cocoapods-0.39.0\n...\n\n$ pod setup\nSetting up CocoaPods master repo\n...\nSetup completed\n```\n", "tags": ["elcapitan", "homebrew", "pyenv", "rbenv", "nvm"]}