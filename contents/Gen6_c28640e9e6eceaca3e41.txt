{"tags": ["Python", "python2.7", "mecab", "\u5f62\u614b\u7d20\u89e3\u6790"], "context": " More than 1 year has passed since last update.\u6307\u5b9a\u3057\u305fURL\u3054\u3068\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u5b9f\u9a13\u3002\n\u6b63\u898f\u8868\u73fe\u3067HTML\u30bf\u30b0\u3092\u9664\u53bb\u3057\u3088\u3046\u3068\u3057\u305f\u3051\u3069\u9664\u53bb\u3057\u304d\u308c\u306a\u3044\u3002\n\nurlmecab.py\n\n#!/user/bin/env python\n# -*- coding: utf-8 -*-\nimport urllib\nimport sys\nimport MeCab\nimport re\n\n\nwhile True:\n    search_url = raw_input(u\"input URL: \")\n\n\n    def Mecab_file():   \n        req = urllib.urlopen(search_url)\n        dlText = req.read()\n\n        mt = MeCab.Tagger(\"mecabrc\")\n        data = []\n        p = re.compile(r\"<[^>]*?>\")\n        sus = p.sub(\"\", dlText)\n        data.append(sus)\n\n\n        node = mt.parseToNode(\"\\n\".join(data))\n        words = {}\n\n        while node:\n            word = node.surface\n            if word and node.posid >=36 and node.posid <=67:\n                if not words.has_key(word):\n                    words[word] = 0\n                words[word] += 1\n            node = node.next\n        word_items = words.items()\n        word_items.sort()\n        word_items.reverse()\n        for word, count in word_items:\n            print word, count\n\n    if search_url:\n        Mecab_file()\n    else:\n        break\n\n\nMeCab\u306e\u54c1\u8a5eID\u3067\u540d\u8a5e\u3060\u3051\u3092\u62bd\u51fa\u3002\nif word and node.posid >=36 and node.posid <=67:\n\n\u3053\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308c\u3070\u8272\u3005\u904a\u3079\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nURL\u5165\u529b\u3092\u3057\u7d9a\u3051\u308b\u9650\u308a\u30eb\u30fc\u30d7\u3002\u7a7a\u767d\u30a8\u30f3\u30bf\u30fc\u3067\u30eb\u30fc\u30d7break\u3002\nhttp://\u301c\u5165\u529b\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\u6307\u5b9a\u3057\u305fURL\u3054\u3068\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u5b9f\u9a13\u3002\n\u6b63\u898f\u8868\u73fe\u3067HTML\u30bf\u30b0\u3092\u9664\u53bb\u3057\u3088\u3046\u3068\u3057\u305f\u3051\u3069\u9664\u53bb\u3057\u304d\u308c\u306a\u3044\u3002\n\n```python:urlmecab.py\n\n#!/user/bin/env python\n# -*- coding: utf-8 -*-\nimport urllib\nimport sys\nimport MeCab\nimport re\n\n\nwhile True:\n\tsearch_url = raw_input(u\"input URL: \")\n\t\n\n\tdef Mecab_file():\t\n\t\treq = urllib.urlopen(search_url)\n\t\tdlText = req.read()\n\n\t\tmt = MeCab.Tagger(\"mecabrc\")\n\t\tdata = []\n\t\tp = re.compile(r\"<[^>]*?>\")\n\t\tsus = p.sub(\"\", dlText)\n\t\tdata.append(sus)\n\n\n\t\tnode = mt.parseToNode(\"\\n\".join(data))\n\t\twords = {}\n\t\t\n\t\twhile node:\n\t\t\tword = node.surface\n\t\t\tif word and node.posid >=36 and node.posid <=67:\n\t\t\t\tif not words.has_key(word):\n\t\t\t\t\twords[word] = 0\n\t\t\t\twords[word] += 1\n\t\t\tnode = node.next\n\t\tword_items = words.items()\n\t\tword_items.sort()\n\t\tword_items.reverse()\n\t\tfor word, count in word_items:\n\t\t\tprint word, count\n\t\t\t\n\tif search_url:\n\t\tMecab_file()\n\telse:\n\t\tbreak\n```\n\nMeCab\u306e\u54c1\u8a5eID\u3067\u540d\u8a5e\u3060\u3051\u3092\u62bd\u51fa\u3002\n\n```\nif word and node.posid >=36 and node.posid <=67:\n```\n\n\u3053\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308c\u3070\u8272\u3005\u904a\u3079\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nURL\u5165\u529b\u3092\u3057\u7d9a\u3051\u308b\u9650\u308a\u30eb\u30fc\u30d7\u3002\u7a7a\u767d\u30a8\u30f3\u30bf\u30fc\u3067\u30eb\u30fc\u30d7break\u3002\nhttp://\u301c\u5165\u529b\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n"}