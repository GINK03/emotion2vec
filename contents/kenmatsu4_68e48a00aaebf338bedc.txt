{"tags": ["Python", "\u7d71\u8a08\u5b66", "statistics", "\u6a5f\u68b0\u5b66\u7fd2", "\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5"], "context": " More than 1 year has passed since last update.\u30a6\u30ef\u30b5\u306e\u8d64\u3044\u672c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\u300c\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\u300d(http://ide-research.net/book/support.html#kodansha) \u7b2c1\u7ae0\u306e\u30b0\u30e9\u30d5\u3092Python\u3067\u66f8\u3044\u3066\u307f\u308b\u3001\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\u3092\u63cf\u3044\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f\u3053\u3061\u3089\n\u89e3\u8aac\u306f\u7c21\u6613\u7684\u306a\u3082\u306e\u3057\u304b\u3053\u3053\u3067\u306f\u8a18\u8f09\u3057\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u8a73\u7d30\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u662f\u975e\u672c\u3092\u3054\u8cfc\u5165\u304f\u3060\u3055\u3044\uff01\n\n\u56f31.1 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u69d8\u3005\u306a\u7570\u5e38\u306e\u4f8b\n\u5168\u304f\u540c\u3058\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001\u4f3c\u305f\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092Python\u3067\u751f\u6210\u3001\u3082\u3057\u304f\u306f\u30c7\u30fc\u30bf\u3092\u63a2\u3057\u3066plot\u3057\u307e\u3057\u305f\u3002\n\uff08\u7279\u306b\u5fc3\u96fb\u56f3\u30c7\u30fc\u30bf1\u306f\u63a2\u3059\u306e\u304c\u4e00\u82e6\u52b4\u3067\u3057\u305f\u30fb\u30fb\u30fb  \uff09\n\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u3053\u3061\u3089\n\n\u56f31.2 \u30e9\u30d9\u30eb\u4ed8\u304d\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u7570\u5e38\u5224\u5b9a\u306e\u8aac\u660e\n\u56f31.2\u304b\u3089\u7570\u5e38\u5ea6\u3001\u6307\u793a\u95a2\u6570\u3092\u3064\u306a\u3052\u3066\u63cf\u753b\u3057\u3066\u95a2\u9023\u6027\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\uff12\u3064\u306e\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u304b\u3089\u30c7\u30fc\u30bf\u751f\u6210\u3057\u3001\u9752\u3092\u6b63\u5e38\u30c7\u30fc\u30bf\u3001\u8d64\u3092\u7570\u5e38\u30c7\u30fc\u30bf\u3068\u3057\u3066plot\n1.\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u3092\u7b97\u51fa\u3057\u3001\u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u3092\u63cf\u753b\u3002\uff08\u5206\u5e03\u304b\u3089\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3057\u305f\u3082\u306e\u3082\u70b9\u7dda\u3067\u63cf\u753b\uff09\nlnp(x\u2032|y=0,D)\\ln p({\\bf x}'|y=0,\\mathcal{D})\u3001\u2212lnp(x\u2032|y=1,D)-\\ln p({\\bf x}'|y=1,\\mathcal{D})\u3092\u5225\u3005\u306b\u63cf\u753b\u3002\n\u7570\u5e38\u5ea6a(x\u2032)lnp(x\u2032|y=1,D)p(x\u2032|y=0,D)a(x') \\ln{ p({\\bf x}'|y=1,\\mathcal{D})\\over  p({\\bf x}'|y=0,\\mathcal{D})} \u3092\u63cf\u753b\n\u6307\u793a\u95a2\u6570 I[a(x)\u2265\u03c4]I[a(x) \\ge \\tau] \u3092\u63cf\u753b\n\n\u3055\u3089\u306b\u3001\u5206\u5c90\u70b9\u95be\u5024\u3092\u5bc6\u5ea6\u95a2\u6570\u306e\u5024\u304c\u540c\u3058\u306b\u306a\u308b\u70b9\u3068\u3057\u3066\u8a08\u7b97\u3057\u3001\u305d\u306e\u5834\u5408\u306e\u03c4\\tau\u30924\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u306e\u6a2a\u68d2\u3067\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u3053\u3061\u3089\n\nPython\u30b3\u30fc\u30c9\n# \u4e71\u6570\u751f\u6210\nrd.seed()\nn = 1000\nd_0 = rd.normal(135, 18, n)  # \u6b63\u5e38\u30c7\u30fc\u30bf\nd_1 = rd.normal(80, 30, n)   # \u7570\u5e38\u30c7\u30fc\u30bf\n\n# \u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u306e\u7b97\u51fa\nm_0  = np.mean(d_0)\nsd_0 = np.sqrt(np.var(d_0))\nm_1  = np.mean(d_1)\nsd_1 = np.sqrt(np.var(d_1))\n\n# X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\nxx = np.linspace(0,300, 5000)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\ndensity_0 = st.norm.pdf(xx, m_0, sd_0)\ndensity_1 = st.norm.pdf(xx, m_1, sd_1)\n\n# \u7570\u5e38\u5ea6\u306e\u8a08\u7b97\nabnormaly_score = np.log(density_1) - np.log(density_0)\n\ndef balance_position(x_min, x_max, f1, f2, EPS=0.00001):\n    if abs(f1(x_max) - f2(x_max)) > EPS:\n        center = (x_min + x_max)/2.\n        if np.sign(f1(x_max) - f2(x_max)) * np.sign(f1(center) - f2(center)) < 0:\n            x_min = center\n        else:\n            x_max = center\n        x_max = balance_position(x_min, x_max, f1, f2)\n    else:\n        return x_max\n    return x_max\n\nmark = balance_position(0, 200, lambda x:st.norm.pdf(x, m_0, sd_0), lambda x: st.norm.pdf(x, m_1, sd_1)) \nprint \"mark:\", mark\n\ntau_pos = np.argsort(np.abs(xx - mark))[0]\nprint \"tau pos:\", tau_pos\n\ntau = abnormaly_score[tau_pos]\nprint \"tau:\", tau\n\ntau2_pos = np.max(np.argsort(np.abs(abnormaly_score - tau))[0:2])\nprint \"tau2_pos:\",tau2_pos\n\ntau2 = abnormaly_score[tau2_pos]\nprint \"tau2:\",tau2\n\nmark2 = xx[tau2_pos]\nprint \"mark2:\",mark2\n\n#---------------- \u63cf\u753b\u51e6\u7406 -----------------#\nn_row = 5                         # \u30b0\u30e9\u30d5\u306e\u884c\u6570\n\nplt.subplots(n_row, 1, sharex=True,figsize=(12,12)) \ngs = gridspec.GridSpec(n_row, 1, height_ratios=[3,3,3,3,3])\n\naxs = [plt.subplot(gs[i]) for i in range(n_row) ]\n# 1\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[0].hist(d_1, bins=40, color=\"r\", alpha=0.6, range=(0,300), label=\"data 1\")\naxs[0].hist(d_0, bins=40, color=\"b\", alpha=0.6, range=(0,300), label=\"data 0\")\naxs[0].legend(loc='best')\n\n# 2\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[1].plot(xx, get_density(d_1, xx), \"r--\", alpha=.4 , lw=2, label=r\"density of data 1\")\naxs[1].plot(xx, get_density(d_0, xx), \"b--\", alpha=.4 , lw=2, label=r\"density of data 0\")\naxs[1].legend(loc='best')\naxs[1].plot([0,300],[0,0],\"k\")\naxs[1].plot(xx, density_1, c=\"r\", alpha=.5 )\naxs[1].plot(xx, density_0, c=\"b\", alpha=.5 )\naxs[1].fill_between(xx[0:tau_pos], density_0[0:tau_pos], color=\"lightblue\", zorder = 500, alpha=.6)\naxs[1].set_ylim(0,np.max(density_0)*1.1)\naxs[1].plot([mark ,mark],[-100,200], \"k--\", lw=.5)\naxs[1].plot([mark2 ,mark2],[-100,200], \"k--\", lw=.5)\n\n# 3\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[2].plot(xx, -np.log(density_0), c=\"b\", alpha=.5,  label=r\"$\\ln p({\\bf x}'|y=0,\\mathcal{D})$\")\naxs[2].plot(xx,  np.log(density_1), c=\"r\", alpha=.5, label=r\"$-\\ln p({\\bf x}'|y=1,\\mathcal{D})$\")\naxs[2].plot([mark ,mark],[-110,200], \"k--\", lw=.5)\naxs[2].plot([mark2 ,mark2],[-110,200], \"k--\", lw=.5)\naxs[2].set_ylim(-25,40)\naxs[2].legend(loc='best')\n\n# 4\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[3].plot(xx, abnormaly_score, c=\"purple\", alpha=.6, label=r\"$$ \\ln{ p({\\bf x}'|y=1,\\mathcal{D})\\over  p({\\bf x}'|y=0,\\mathcal{D})} $$\")\naxs[3].set_ylim(-5,5)\naxs[3].plot([mark ,mark],[-100,200], \"k--\", lw=.5)\naxs[3].plot([mark2 ,mark2],[-100,200], \"k--\", lw=.5)\naxs[3].plot([0 ,300],[tau, tau], \"k\", lw=.5)\naxs[3].legend(loc='best')\n\n# 5\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[4].fill_between(xx[0:tau_pos], np.ones_like(xx[0:tau_pos]), color=\"blue\", zorder = 500, alpha=.6)\naxs[4].fill_between(xx[tau2_pos:], np.ones_like(xx[tau2_pos:]), color=\"blue\", zorder = 500, alpha=.6)\naxs[4].plot([mark, mark],[-110,200], \"k--\", lw=.5)\naxs[4].plot([mark2, mark2],[-110,200], \"k--\", lw=.5)\naxs[4].text(10, 1.3, r\"$I[a(x) \\ge \\tau]$\")\naxs[4].set_ylim(0,5)\n\n# \u3059\u3079\u3066\u306e\u30a8\u30ea\u30a2\u3067x\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\nfor ax in axs:\n    ax.set_xlim(0,300)\n\nplt.subplots_adjust(hspace=0)\n\n\n\u56f31.3 \u30e9\u30d9\u30eb\u306a\u3057\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u7570\u5e38\u5ea6\u306e\u5b9a\u7fa9\n\u56f31.2\u3068\u540c\u69d8\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u3001\u5e73\u5747\u30fb\u5206\u6563\u304b\u3089\u63a8\u5b9a\u3057\u305f\u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u3092\u63cf\u304d\u3001\u300c\u60c5\u5831\u91cf\u300d\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u7570\u5e38\u5ea6\u306f\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u304b\u3089\u96e2\u308c\u308b\u307b\u3069\u9ad8\u304f\u306a\u308b\u5f62\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u3053\u3061\u3089\n\nPython\u30b3\u30fc\u30c9\n# \u30e9\u30d9\u30eb\u306a\u3057\u30c7\u30fc\u30bf\u306e\u5834\u5408\n# \u4e71\u6570\u751f\u6210\nn = 1000\ndata = rd.normal(80, 15, n)\n\n# \u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u306e\u7b97\u51fa\nm  = np.mean(data)\nsd = np.sqrt(np.var(data))\n\n# X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\nxx = np.linspace(0,300, 5000)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\ndensity = st.norm.pdf(xx, m, sd)\n\n#---------------- \u63cf\u753b\u51e6\u7406 -----------------#\nn_row = 3                         # \u30b0\u30e9\u30d5\u306e\u884c\u6570\nxx = np.linspace(0,300, 5000)     # X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\n\nplt.subplots(n_row, 1, sharex=True,figsize=(12,10)) \ngs = gridspec.GridSpec(n_row, 1, height_ratios=[3,3,3])\n\naxs = [plt.subplot(gs[i]) for i in range(n_row) ]\n\n# 1\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[0].hist(data, bins=50, range=(0,300), label=\"data: a\", color=\"b\", alpha=0.5)\naxs[0].set_ylim(0,200)\naxs[0].legend(loc='best')\n\n# 2\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[1].plot(xx, get_density(data, xx), lw=2, linestyle=\"--\", label=\"density of the data\", color=\"b\", alpha=0.4)\naxs[1].plot(xx, density, lw=1, label=r\"estimated density of norm dist: $p({\\bf x}'|\\mathcal{D})$\", color=\"b\", alpha=0.5)\naxs[1].legend(loc='best')\n\n# 3\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[2].plot(xx, -np.log(density), lw=1, label=r\"information:$-\\ln p({\\bf x}'|\\mathcal{D})$\", color=\"b\", alpha=0.5)\naxs[2].legend(loc='best')\n\n\n# \u3059\u3079\u3066\u306e\u30a8\u30ea\u30a2\u3067x\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\nfor ax in axs:\n    ax.set_xlim(0,300)\n\nplt.subplots_adjust( hspace=0)\n\n\n\u56f31.4, \u56f31.5 \u6b63\u5e38\u6a19\u672c\u7cbe\u5ea6\u3001\u7570\u5e38\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\n\u6b63\u5e38\u6a19\u672c\u7cbe\u5ea6\u3001\u7570\u5e38\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\u306e\u95a2\u4fc2\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001ROC\u66f2\u7dda\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b\u300c\u7d71\u8a08\u5b66\u3011ROC\u66f2\u7dda\u3068\u306f\u4f55\u304b\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u7406\u89e3\u3059\u308b\u3002\n\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3088\u3051\u308c\u3070\u3054\u53c2\u8003\u304f\u3060\u3055\u3044\u3002\n\u3053\u306e\u56f3\u3067\u306f\u6a19\u672c\u7cbe\u5ea6\u304c\u4e0b\u8a18\u3067\u8868\u305b\u3066\u3044\u305f\u3068\u3057\u3066\u63cf\u3044\u3066\u3044\u307e\u3059\u3002\nr_0 = \\log(1 + x) \\\\\nr_1 = \\log(e -x)\nr0=log(1+x)r1=log(e\u2212x){r_0 = \\log(1 + x) \\\\\nr_1 = \\log(e -x)\n}\n2\u6bb5\u76ee\u306e\u30b0\u30e9\u30d5\u306fF\u5024\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\u5b9a\u7fa9\u306f\u4e0b\u8a18\u3067\u3059\u3002\nf  \\equiv\u3000{ 2r_0 r_1 \\over r_0 + r_1 }\nf\u2261\u30002r0r1r0+r1{f  \\equiv\u3000{ 2r_0 r_1 \\over r_0 + r_1 }\n}\nROC\u66f2\u7dda\u306f (X,Y)=(1\u2212r0(\u03c4),\u00a0r1(\u03c4))(X, Y) = (1 - r_0(\\tau),\\ r_1(\\tau))\u306a\u306e\u3067\u3001\u8d64\u3044\u7dda\u3092\u306a\u305e\u308b\u70b9\u306ey\u5ea7\u6a19\u5024\u306f1\u2212y1-y\u3092\u4f7f\u3044\u307e\u3059\u3002\u5ea7\u6a19\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e0a\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e8c\u3064\u3042\u308b\u3046\u3061\u306e\u53f3\u5074\u306e\u6570\u5b57\u304c\u3053\u308c\u306b\u3042\u305f\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u3053\u3061\u3089\n\nPython\u30b3\u30fc\u30c9\ndef animate(nframe):\n    global num_frame\n    sys.stdout.write(str(int(float(nframe)/num_frame*100)) + \"%, \") \n\n    plt.clf()\n\n    # x\u306e\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\n    xmin = 0\n    xmax = np.e -1\n\n    # x\u306e\u5206\u5272\u6570\n    sx = num_frame * 2\n\n    # \u73fe\u5728\u4f4d\u7f6e\n    pos = nframe * 2\n\n    # x\u8ef8\u751f\u6210\n    xx = np.linspace(xmin, xmax, sx)\n\n    # \u6a19\u672c\u7cbe\u5ea6\n    cx1 = np.log(1+xx)\n    cx2 = np.log(np.e -xx)\n\n    # 1\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(311)\n    plt.title(\"Sample accuracy. x={0:.2f}\".format(xx[pos]))\n    plt.xlim(xmin, xmax)\n    plt.ylim(0,1)\n\n    # \u66f2\u7dda\u306e\u63cf\u753b\n    plt.plot(xx,cx1,linewidth=2)\n    plt.plot(xx,cx2,linewidth=2)\n\n    # \u70b9\u3068\u5ea7\u6a19\u5024\u306e\u63cf\u753b\n    plt.scatter(xx[pos],cx1[pos], c=\"g\", s=40, zorder=100)\n    plt.text(xx[pos]+.01,cx1[pos]-.05,\"{0:.3f}, {1:.3f}\".format(cx1[pos], 1-cx1[pos]), size=16)\n    plt.scatter(xx[pos],cx2[pos], c=\"b\", s=40, zorder=100)\n    plt.text(xx[pos]-.20,cx2[pos]-.05,\"{0:.3f}\".format(cx2[pos]), size=16)\n\n    # \u70b9\u7dda\u306e\u63cf\u753b\n    plt.plot([xx[pos], xx[pos]], [0,1], \"k--\", alpha=.5, lw=2 )\n    plt.plot([0, xx[pos]], [cx1[pos],cx1[pos]], \"k--\", alpha=.5, lw=2 )\n    plt.plot([0, xx[pos]], [cx2[pos],cx2[pos]], \"k--\", alpha=.5, lw=2 )\n\n    plt.text(.08, .42, r\"normal:$r_0$\", color=\"r\", size=16)\n    plt.text(1.2, .42, r\"anomalous:$r_1$\", color=\"#2F79B0\", size=16)\n\n    # 2\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(312)\n    plt.title(\"F-value\")\n    plt.xlim(xmin, xmax)\n    plt.ylim(0,1)\n    F = 2*cx1*cx2/(cx1+cx2)\n    F_pos = 2*cx1[pos]*cx2[pos]/(cx1[pos]+cx2[pos])\n    plt.scatter(xx[pos], F_pos, c=\"g\", alpha=1, s=50)\n    plt.plot(xx, F)\n    plt.plot([xx[pos], xx[pos]], [0,1], \"k--\", alpha=.5, lw=2 )\n    plt.tight_layout()\n\n    # 3\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(313)\n\n    plt.title(\"ROC Curve.\")\n    plt.xlim(0,1)\n    plt.ylim(0,1)\n\n    # \u66f2\u7dda\u3068\u70b9\u306e\u63cf\u753b\n    plt.plot(1-cx1, cx2, linewidth=2, color=\"b\", alpha=.4)\n    plt.scatter(1-cx1[pos],cx2[pos], c=\"b\", s=40, zorder=100)\n    plt.text(1-cx1[pos]+.01,cx2[pos]-.05, \"{0:.3f}, {1:.3f}\".format(1-cx1[pos], cx2[pos]), size=16)\n\n    plt.xlabel(r\"$1-r_0$\", size=16)\n    plt.ylabel(r\"$r_1$\", size=16)\n    plt.tight_layout()\n\nnum_frame = 50\nfig = plt.figure(figsize=(5,10))\nanim = ani.FuncAnimation(fig, animate, frames=num_frame, blit=True)\nanim.save('ROC_curve2.gif', writer='imagemagick', fps=3, dpi=60)\n\n\n\u53c2\u8003\u56f3\u66f8\n\u300c\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\u300d\u3000\u4e95\u624b\u525b\u3001\u6749\u5c71\u5c06\u8457\u3000\uff08\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\uff09\n\u3000\u3000http://ide-research.net/book/support.html\n\n\n\n\n\u7570\u5e38\u306b\u3057\u305f\u8d64\u3044\u90e8\u5206\u306f\u52a0\u5de5\u3057\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u6b63\u3057\u3044\u5fc3\u96fb\u56f3\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5148URL\u306b\u3064\u3044\u3066\u306f\u3001GitHub\u306e\u65b9\u306b\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u30a6\u30ef\u30b5\u306e\u8d64\u3044\u672c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\u300c\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\u300d(http://ide-research.net/book/support.html#kodansha) \u7b2c1\u7ae0\u306e\u30b0\u30e9\u30d5\u3092Python\u3067\u66f8\u3044\u3066\u307f\u308b\u3001\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\u3092\u63cf\u3044\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n![ROC_curve2.gif](https://qiita-image-store.s3.amazonaws.com/0/50670/6e8a19f3-a17b-9358-466e-286436980182.gif)\n\n\u30b3\u30fc\u30c9\u306e\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/matsuken92/anomaly_detection_change_detection/blob/master/anomal_detection_chap.01.ipynb)\n\n\u89e3\u8aac\u306f\u7c21\u6613\u7684\u306a\u3082\u306e\u3057\u304b\u3053\u3053\u3067\u306f\u8a18\u8f09\u3057\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u8a73\u7d30\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u662f\u975e\u672c\u3092\u3054\u8cfc\u5165\u304f\u3060\u3055\u3044\uff01\n\n\n# \u56f31.1 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u69d8\u3005\u306a\u7570\u5e38\u306e\u4f8b\n\n\u5168\u304f\u540c\u3058\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001\u4f3c\u305f\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092Python\u3067\u751f\u6210\u3001\u3082\u3057\u304f\u306f\u30c7\u30fc\u30bf\u3092\u63a2\u3057\u3066plot\u3057\u307e\u3057\u305f\u3002\n\uff08\u7279\u306b\u5fc3\u96fb\u56f3\u30c7\u30fc\u30bf[^1]\u306f\u63a2\u3059\u306e\u304c\u4e00\u82e6\u52b4\u3067\u3057\u305f\u30fb\u30fb\u30fb :sweat_smile: \uff09\n\n[^1]: \u7570\u5e38\u306b\u3057\u305f\u8d64\u3044\u90e8\u5206\u306f\u52a0\u5de5\u3057\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u6b63\u3057\u3044\u5fc3\u96fb\u56f3\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u5148URL\u306b\u3064\u3044\u3066\u306f\u3001GitHub\u306e\u65b9\u306b\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n![anomaly_detection_1.1-compressor.png](https://qiita-image-store.s3.amazonaws.com/0/50670/6c4ca933-d9ca-6207-7ab5-f2f932156159.png)\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/matsuken92/anomaly_detection_change_detection/blob/master/anomal_detection_chap.01.ipynb)\n\n\n# \u56f31.2 \u30e9\u30d9\u30eb\u4ed8\u304d\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u7570\u5e38\u5224\u5b9a\u306e\u8aac\u660e\n\n\u56f31.2\u304b\u3089\u7570\u5e38\u5ea6\u3001\u6307\u793a\u95a2\u6570\u3092\u3064\u306a\u3052\u3066\u63cf\u753b\u3057\u3066\u95a2\u9023\u6027\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n1. \uff12\u3064\u306e\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u304b\u3089\u30c7\u30fc\u30bf\u751f\u6210\u3057\u3001\u9752\u3092\u6b63\u5e38\u30c7\u30fc\u30bf\u3001\u8d64\u3092\u7570\u5e38\u30c7\u30fc\u30bf\u3068\u3057\u3066plot\n2. 1.\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u3092\u7b97\u51fa\u3057\u3001\u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u3092\u63cf\u753b\u3002\uff08\u5206\u5e03\u304b\u3089\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3057\u305f\u3082\u306e\u3082\u70b9\u7dda\u3067\u63cf\u753b\uff09\n3. $\\ln p({\\bf x}'|y=0,\\mathcal{D})$\u3001$-\\ln p({\\bf x}'|y=1,\\mathcal{D})$\u3092\u5225\u3005\u306b\u63cf\u753b\u3002\n4. \u7570\u5e38\u5ea6$a(x') \\ln{ p({\\bf x}'|y=1,\\mathcal{D})\\over  p({\\bf x}'|y=0,\\mathcal{D})} $\u3092\u63cf\u753b\n5. \u6307\u793a\u95a2\u6570 $I[a(x) \\ge \\tau]$ \u3092\u63cf\u753b\n\n\u3055\u3089\u306b\u3001\u5206\u5c90\u70b9\u95be\u5024\u3092\u5bc6\u5ea6\u95a2\u6570\u306e\u5024\u304c\u540c\u3058\u306b\u306a\u308b\u70b9\u3068\u3057\u3066\u8a08\u7b97\u3057\u3001\u305d\u306e\u5834\u5408\u306e$\\tau$\u30924\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u306e\u6a2a\u68d2\u3067\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n![anomaly_detection_1.2.png](https://qiita-image-store.s3.amazonaws.com/0/50670/0d7bd9fc-b153-de2e-121d-c53912fa966a.png)\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/matsuken92/anomaly_detection_change_detection/blob/master/anomal_detection_chap.01.ipynb)\n\n### Python\u30b3\u30fc\u30c9\n\n```py \n# \u4e71\u6570\u751f\u6210\nrd.seed()\nn = 1000\nd_0 = rd.normal(135, 18, n)  # \u6b63\u5e38\u30c7\u30fc\u30bf\nd_1 = rd.normal(80, 30, n)   # \u7570\u5e38\u30c7\u30fc\u30bf\n\n# \u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u306e\u7b97\u51fa\nm_0  = np.mean(d_0)\nsd_0 = np.sqrt(np.var(d_0))\nm_1  = np.mean(d_1)\nsd_1 = np.sqrt(np.var(d_1))\n\n# X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\nxx = np.linspace(0,300, 5000)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\ndensity_0 = st.norm.pdf(xx, m_0, sd_0)\ndensity_1 = st.norm.pdf(xx, m_1, sd_1)\n\n# \u7570\u5e38\u5ea6\u306e\u8a08\u7b97\nabnormaly_score = np.log(density_1) - np.log(density_0)\n\ndef balance_position(x_min, x_max, f1, f2, EPS=0.00001):\n    if abs(f1(x_max) - f2(x_max)) > EPS:\n        center = (x_min + x_max)/2.\n        if np.sign(f1(x_max) - f2(x_max)) * np.sign(f1(center) - f2(center)) < 0:\n            x_min = center\n        else:\n            x_max = center\n        x_max = balance_position(x_min, x_max, f1, f2)\n    else:\n        return x_max\n    return x_max\n    \nmark = balance_position(0, 200, lambda x:st.norm.pdf(x, m_0, sd_0), lambda x: st.norm.pdf(x, m_1, sd_1)) \nprint \"mark:\", mark\n\ntau_pos = np.argsort(np.abs(xx - mark))[0]\nprint \"tau pos:\", tau_pos\n\ntau = abnormaly_score[tau_pos]\nprint \"tau:\", tau\n\ntau2_pos = np.max(np.argsort(np.abs(abnormaly_score - tau))[0:2])\nprint \"tau2_pos:\",tau2_pos\n\ntau2 = abnormaly_score[tau2_pos]\nprint \"tau2:\",tau2\n\nmark2 = xx[tau2_pos]\nprint \"mark2:\",mark2\n\n#---------------- \u63cf\u753b\u51e6\u7406 -----------------#\nn_row = 5                         # \u30b0\u30e9\u30d5\u306e\u884c\u6570\n\nplt.subplots(n_row, 1, sharex=True,figsize=(12,12)) \ngs = gridspec.GridSpec(n_row, 1, height_ratios=[3,3,3,3,3])\n\naxs = [plt.subplot(gs[i]) for i in range(n_row) ]\n# 1\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[0].hist(d_1, bins=40, color=\"r\", alpha=0.6, range=(0,300), label=\"data 1\")\naxs[0].hist(d_0, bins=40, color=\"b\", alpha=0.6, range=(0,300), label=\"data 0\")\naxs[0].legend(loc='best')\n\n# 2\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[1].plot(xx, get_density(d_1, xx), \"r--\", alpha=.4 , lw=2, label=r\"density of data 1\")\naxs[1].plot(xx, get_density(d_0, xx), \"b--\", alpha=.4 , lw=2, label=r\"density of data 0\")\naxs[1].legend(loc='best')\naxs[1].plot([0,300],[0,0],\"k\")\naxs[1].plot(xx, density_1, c=\"r\", alpha=.5 )\naxs[1].plot(xx, density_0, c=\"b\", alpha=.5 )\naxs[1].fill_between(xx[0:tau_pos], density_0[0:tau_pos], color=\"lightblue\", zorder = 500, alpha=.6)\naxs[1].set_ylim(0,np.max(density_0)*1.1)\naxs[1].plot([mark ,mark],[-100,200], \"k--\", lw=.5)\naxs[1].plot([mark2 ,mark2],[-100,200], \"k--\", lw=.5)\n\n# 3\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[2].plot(xx, -np.log(density_0), c=\"b\", alpha=.5,  label=r\"$\\ln p({\\bf x}'|y=0,\\mathcal{D})$\")\naxs[2].plot(xx,  np.log(density_1), c=\"r\", alpha=.5, label=r\"$-\\ln p({\\bf x}'|y=1,\\mathcal{D})$\")\naxs[2].plot([mark ,mark],[-110,200], \"k--\", lw=.5)\naxs[2].plot([mark2 ,mark2],[-110,200], \"k--\", lw=.5)\naxs[2].set_ylim(-25,40)\naxs[2].legend(loc='best')\n    \n# 4\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[3].plot(xx, abnormaly_score, c=\"purple\", alpha=.6, label=r\"$$ \\ln{ p({\\bf x}'|y=1,\\mathcal{D})\\over  p({\\bf x}'|y=0,\\mathcal{D})} $$\")\naxs[3].set_ylim(-5,5)\naxs[3].plot([mark ,mark],[-100,200], \"k--\", lw=.5)\naxs[3].plot([mark2 ,mark2],[-100,200], \"k--\", lw=.5)\naxs[3].plot([0 ,300],[tau, tau], \"k\", lw=.5)\naxs[3].legend(loc='best')\n\n# 5\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[4].fill_between(xx[0:tau_pos], np.ones_like(xx[0:tau_pos]), color=\"blue\", zorder = 500, alpha=.6)\naxs[4].fill_between(xx[tau2_pos:], np.ones_like(xx[tau2_pos:]), color=\"blue\", zorder = 500, alpha=.6)\naxs[4].plot([mark, mark],[-110,200], \"k--\", lw=.5)\naxs[4].plot([mark2, mark2],[-110,200], \"k--\", lw=.5)\naxs[4].text(10, 1.3, r\"$I[a(x) \\ge \\tau]$\")\naxs[4].set_ylim(0,5)\n\n# \u3059\u3079\u3066\u306e\u30a8\u30ea\u30a2\u3067x\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\nfor ax in axs:\n    ax.set_xlim(0,300)\n\nplt.subplots_adjust(hspace=0)\n```\n\n# \u56f31.3 \u30e9\u30d9\u30eb\u306a\u3057\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u7570\u5e38\u5ea6\u306e\u5b9a\u7fa9\n\n\u56f31.2\u3068\u540c\u69d8\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3001\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u3001\u5e73\u5747\u30fb\u5206\u6563\u304b\u3089\u63a8\u5b9a\u3057\u305f\u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\u3092\u63cf\u304d\u3001\u300c\u60c5\u5831\u91cf\u300d\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u7570\u5e38\u5ea6\u306f\u5358\u7d14\u306b\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u304b\u3089\u96e2\u308c\u308b\u307b\u3069\u9ad8\u304f\u306a\u308b\u5f62\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n![anomaly_detection_002.png](https://qiita-image-store.s3.amazonaws.com/0/50670/5b27e139-1e12-93f7-c134-a480f75996bc.png)\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/matsuken92/anomaly_detection_change_detection/blob/master/anomal_detection_chap.01.ipynb)\n\n### Python\u30b3\u30fc\u30c9\n```py \n# \u30e9\u30d9\u30eb\u306a\u3057\u30c7\u30fc\u30bf\u306e\u5834\u5408\n# \u4e71\u6570\u751f\u6210\nn = 1000\ndata = rd.normal(80, 15, n)\n\n# \u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u306e\u7b97\u51fa\nm  = np.mean(data)\nsd = np.sqrt(np.var(data))\n\n# X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\nxx = np.linspace(0,300, 5000)\n\n# \u6b63\u898f\u5206\u5e03\u306e\u5bc6\u5ea6\u95a2\u6570\ndensity = st.norm.pdf(xx, m, sd)\n\n#---------------- \u63cf\u753b\u51e6\u7406 -----------------#\nn_row = 3                         # \u30b0\u30e9\u30d5\u306e\u884c\u6570\nxx = np.linspace(0,300, 5000)     # X\u8ef8\u30c7\u30fc\u30bf\u751f\u6210\n\nplt.subplots(n_row, 1, sharex=True,figsize=(12,10)) \ngs = gridspec.GridSpec(n_row, 1, height_ratios=[3,3,3])\n\naxs = [plt.subplot(gs[i]) for i in range(n_row) ]\n\n# 1\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[0].hist(data, bins=50, range=(0,300), label=\"data: a\", color=\"b\", alpha=0.5)\naxs[0].set_ylim(0,200)\naxs[0].legend(loc='best')\n\n# 2\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[1].plot(xx, get_density(data, xx), lw=2, linestyle=\"--\", label=\"density of the data\", color=\"b\", alpha=0.4)\naxs[1].plot(xx, density, lw=1, label=r\"estimated density of norm dist: $p({\\bf x}'|\\mathcal{D})$\", color=\"b\", alpha=0.5)\naxs[1].legend(loc='best')\n\n# 3\u3064\u76ee\u306e\u30a8\u30ea\u30a2\u63cf\u753b\naxs[2].plot(xx, -np.log(density), lw=1, label=r\"information:$-\\ln p({\\bf x}'|\\mathcal{D})$\", color=\"b\", alpha=0.5)\naxs[2].legend(loc='best')\n\n\n# \u3059\u3079\u3066\u306e\u30a8\u30ea\u30a2\u3067x\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\nfor ax in axs:\n    ax.set_xlim(0,300)\n\nplt.subplots_adjust( hspace=0)\n```\n\n\n\n\n# \u56f31.4, \u56f31.5 \u6b63\u5e38\u6a19\u672c\u7cbe\u5ea6\u3001\u7570\u5e38\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\n\n\u6b63\u5e38\u6a19\u672c\u7cbe\u5ea6\u3001\u7570\u5e38\u6a19\u672c\u7cbe\u5ea6\u3068ROC\u66f2\u7dda\u306e\u95a2\u4fc2\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001ROC\u66f2\u7dda\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b\u300c[\u7d71\u8a08\u5b66\u3011ROC\u66f2\u7dda\u3068\u306f\u4f55\u304b\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3067\u7406\u89e3\u3059\u308b\u3002\n](http://qiita.com/kenmatsu4/items/550b38f4fa31e9af6f4f)\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3082\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3088\u3051\u308c\u3070\u3054\u53c2\u8003\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u56f3\u3067\u306f\u6a19\u672c\u7cbe\u5ea6\u304c\u4e0b\u8a18\u3067\u8868\u305b\u3066\u3044\u305f\u3068\u3057\u3066\u63cf\u3044\u3066\u3044\u307e\u3059\u3002\n\n```math\nr_0 = \\log(1 + x) \\\\\nr_1 = \\log(e -x)\n```\n\n2\u6bb5\u76ee\u306e\u30b0\u30e9\u30d5\u306fF\u5024\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\u5b9a\u7fa9\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\n```math\nf  \\equiv\u3000{ 2r_0 r_1 \\over r_0 + r_1 }\n```\n\nROC\u66f2\u7dda\u306f $(X, Y) = (1 - r_0(\\tau),\\ r_1(\\tau))$\u306a\u306e\u3067\u3001\u8d64\u3044\u7dda\u3092\u306a\u305e\u308b\u70b9\u306ey\u5ea7\u6a19\u5024\u306f$1-y$\u3092\u4f7f\u3044\u307e\u3059\u3002\u5ea7\u6a19\u3092\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u4e0a\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e8c\u3064\u3042\u308b\u3046\u3061\u306e\u53f3\u5074\u306e\u6570\u5b57\u304c\u3053\u308c\u306b\u3042\u305f\u308a\u307e\u3059\u3002\n\n![ROC_curve2.gif](https://qiita-image-store.s3.amazonaws.com/0/50670/6e8a19f3-a17b-9358-466e-286436980182.gif)\n\u3053\u308c\u3092\u63cf\u753b\u3059\u308b\u30b3\u30fc\u30c9\u5168\u4f53\u306f[\u3053\u3061\u3089](https://github.com/matsuken92/anomaly_detection_change_detection/blob/master/anomal_detection_chap.01.ipynb)\n\n### Python\u30b3\u30fc\u30c9\n\n```py \ndef animate(nframe):\n    global num_frame\n    sys.stdout.write(str(int(float(nframe)/num_frame*100)) + \"%, \") \n    \n    plt.clf()\n    \n    # x\u306e\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\n    xmin = 0\n    xmax = np.e -1\n\n    # x\u306e\u5206\u5272\u6570\n    sx = num_frame * 2\n\n    # \u73fe\u5728\u4f4d\u7f6e\n    pos = nframe * 2\n\n    # x\u8ef8\u751f\u6210\n    xx = np.linspace(xmin, xmax, sx)\n\n    # \u6a19\u672c\u7cbe\u5ea6\n    cx1 = np.log(1+xx)\n    cx2 = np.log(np.e -xx)\n\n    # 1\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(311)\n    plt.title(\"Sample accuracy. x={0:.2f}\".format(xx[pos]))\n    plt.xlim(xmin, xmax)\n    plt.ylim(0,1)\n    \n    # \u66f2\u7dda\u306e\u63cf\u753b\n    plt.plot(xx,cx1,linewidth=2)\n    plt.plot(xx,cx2,linewidth=2)\n    \n    # \u70b9\u3068\u5ea7\u6a19\u5024\u306e\u63cf\u753b\n    plt.scatter(xx[pos],cx1[pos], c=\"g\", s=40, zorder=100)\n    plt.text(xx[pos]+.01,cx1[pos]-.05,\"{0:.3f}, {1:.3f}\".format(cx1[pos], 1-cx1[pos]), size=16)\n    plt.scatter(xx[pos],cx2[pos], c=\"b\", s=40, zorder=100)\n    plt.text(xx[pos]-.20,cx2[pos]-.05,\"{0:.3f}\".format(cx2[pos]), size=16)\n\n    # \u70b9\u7dda\u306e\u63cf\u753b\n    plt.plot([xx[pos], xx[pos]], [0,1], \"k--\", alpha=.5, lw=2 )\n    plt.plot([0, xx[pos]], [cx1[pos],cx1[pos]], \"k--\", alpha=.5, lw=2 )\n    plt.plot([0, xx[pos]], [cx2[pos],cx2[pos]], \"k--\", alpha=.5, lw=2 )\n\n    plt.text(.08, .42, r\"normal:$r_0$\", color=\"r\", size=16)\n    plt.text(1.2, .42, r\"anomalous:$r_1$\", color=\"#2F79B0\", size=16)\n    \n    # 2\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(312)\n    plt.title(\"F-value\")\n    plt.xlim(xmin, xmax)\n    plt.ylim(0,1)\n    F = 2*cx1*cx2/(cx1+cx2)\n    F_pos = 2*cx1[pos]*cx2[pos]/(cx1[pos]+cx2[pos])\n    plt.scatter(xx[pos], F_pos, c=\"g\", alpha=1, s=50)\n    plt.plot(xx, F)\n    plt.plot([xx[pos], xx[pos]], [0,1], \"k--\", alpha=.5, lw=2 )\n    plt.tight_layout()\n    \n    # 3\u3064\u76ee\u306e\u30b0\u30e9\u30d5\u63cf\u753b -----------------------\n    plt.subplot(313)\n    \n    plt.title(\"ROC Curve.\")\n    plt.xlim(0,1)\n    plt.ylim(0,1)\n    \n    # \u66f2\u7dda\u3068\u70b9\u306e\u63cf\u753b\n    plt.plot(1-cx1, cx2, linewidth=2, color=\"b\", alpha=.4)\n    plt.scatter(1-cx1[pos],cx2[pos], c=\"b\", s=40, zorder=100)\n    plt.text(1-cx1[pos]+.01,cx2[pos]-.05, \"{0:.3f}, {1:.3f}\".format(1-cx1[pos], cx2[pos]), size=16)\n\n    plt.xlabel(r\"$1-r_0$\", size=16)\n    plt.ylabel(r\"$r_1$\", size=16)\n    plt.tight_layout()\n    \nnum_frame = 50\nfig = plt.figure(figsize=(5,10))\nanim = ani.FuncAnimation(fig, animate, frames=num_frame, blit=True)\nanim.save('ROC_curve2.gif', writer='imagemagick', fps=3, dpi=60)\n```\n\n\n# \u53c2\u8003\u56f3\u66f8\n\u300c\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\u300d\u3000\u4e95\u624b\u525b\u3001\u6749\u5c71\u5c06\u8457\u3000\uff08\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba\uff09\n\u3000\u3000http://ide-research.net/book/support.html\n"}