{"tags": ["data_analysis", "Python", "python_for_data_analysis", "pandas"], "context": " More than 1 year has passed since last update.\n\nIntroductory Examples\n\u3059\u3079\u3066\u306e\u7ae0\u3067iPython\u306e\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002\n\u8d77\u52d5\u306f$ ipython --pylab\u3067\u884c\u3046\u3002\npandas\u306e\u30d0\u30fc\u30b8\u30e7\u30f30.10.0\u3060\u3068apply\u95a2\u6570\u306e\u30d0\u30b0\u304c\u3042\u308b\u306e\u3067\u6700\u65b0\u306e\u3092\u5165\u308c\u307e\u3057\u3087\u3046\u3002\n\nusa.gov data from bit.ly\n\u5143\u30c7\u30fc\u30bf\u304cJSON\u5f62\u5f0f\u306a\u306e\u3067\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u53d6\u308a\u8fbc\u3080\u3002\nimport json\n\npath = \"data.txt\"\nrecords = [json.loads(line) for line in open(path)]\ntime_zones = [rec[\"tz\"] for rec in records if \"tz\" in rec]\n\n\u8981\u7d20\u306e\u30ab\u30a6\u30f3\u30c8\u306fcollections.Counter\u3092\u7528\u3044\u308b\u3068\u826f\u3044\u3002\nfrom collections import Counter\n\ncounts = Counter(time_zones)\n\n\"\"\"\ncounts.most_common(10)\nIn [103]: counts.most_common(10)\nOut[103]: \n[(u'America/Chicago', 3641),\n (u'America/New_York', 2474),\n (u'', 1623),\n (u'Europe/London', 590),\n (u'America/Los_Angeles', 500),\n (u'Asia/Tokyo', 226),\n (u'America/Indianapolis', 192),\n (u'America/Rainy_River', 166),\n (u'America/Denver', 160),\n (u'Asia/Calcutta', 148)]\n\"\"\"\n\n\u4e0a\u4f4d10\u500b\u306e\u8981\u7d20\u304c\u3068\u308c\u308b\u3002\n\npandas\u3092\u7528\u3044\u3066\u89e3\u6790\u3092\u3059\u308b\nfrom pandas import DataFrame, Series\nimport pandas as pd\n\nframe = DataFrame(records)\n\n\"\"\"\nIn [104]: frame\nOut[104]: \n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 12202 entries, 0 to 12201\nData columns:\n_heartbeat_    120  non-null values\na              12082  non-null values\nal             10109  non-null values\nc              10485  non-null values\ncy             10485  non-null values\ng              12082  non-null values\ngr             10485  non-null values\nh              12082  non-null values\nhc             12082  non-null values\nhh             12082  non-null values\nkw             1225  non-null values\nl              12082  non-null values\nll             10462  non-null values\nnk             12082  non-null values\nr              12082  non-null values\nt              12082  non-null values\ntz             12082  non-null values\nu              12082  non-null values\ndtypes: float64(4), object(14)\n\"\"\"\n\npandas\u306eDataFrame\u306f\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3068R\u306edataframe\u306e\u69d8\u306bDataFrame\u578b\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u304f\u308c\u308b\u3002\n\u30a4\u30e1\u30fc\u30b8\u306f\u8868\n\n\n\nindex\na\nal\nc\ncy\ng\n. . .\n\n\n\n\n0\nMozilla\u2026\nen-us\nUS\nDurand\nYmtpnZ\n\u2026\n\n\n1\nMozilla\u2026\nen-US\nUS\nPlymouth\nYmtpnZ\n\u2026\n\n\n2\nMozilla\u2026\nen-us\nUS\nPollock\n10nPD5S\n\u2026\n\n\n3\nMozilla\u2026\nNaN\nUS\nMalden\noVXSUv\n\u2026\n\n\n4\n\u2026\n\u2026\n\u2026\n\u2026\n\u2026\n\u2026\n\n\n\n\u4f8b\u3048\u3070tz\u5217\u306e\u4e2d\u8eab\u306f\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u60c5\u5831\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\"\"\"\nIn [105]: frame[\"tz\"][:10]\nOut[105]: \n0     America/Chicago\n1     America/Chicago\n2     America/Chicago\n3    America/New_York\n4     America/Chicago\n5     America/Chicago\n6     America/Chicago\n7       Asia/Calcutta\n8     America/Chicago\n9     America/Chicago\nName: tz\n\"\"\"\n\n\u3053\u306eframe[\"tz\"]\u306fSeries\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u5e30\u3063\u3066\u304f\u308b\u3002\n\u3053\u308c\u306f\u5217\u306e\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u308c\u308bvalue_counts\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\ntz_counts = frame[\"tz\"].value_counts()\ntz_counts[:10]\n\n\"\"\"\nIn [115]: tz_counts[:10]\nOut[115]: \nAmerica/Chicago         3641\nAmerica/New_York        2474\nUnknown                 1623\nEurope/London            590\nAmerica/Los_Angeles      500\nAsia/Tokyo               226\nAmerica/Indianapolis     192\nAmerica/Rainy_River      166\nAmerica/Denver           160\nAsia/Calcutta            148\n\"\"\"\n\n\u3053\u306e\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u306bNA\u5024\u3084\u7a7a\u306e\u6587\u5b57\u5217\u5024\"\"\u306b\u306a\u3063\u3066\u3044\u308b\u7269\u3092\u53d6\u308a\u9664\u304f\u3002\nclean_tz = frame[\"tz\"].fillna(\"Missing\")\nclean_tz[clean_tz == \"\"] = \"Unknown\"\ntz_counts = clean_tz.value_counts()\n\n\"\"\"\nIn [117]: tz_counts[:10]\nOut[117]: \nAmerica/Chicago         3641\nAmerica/New_York        2474\nUnknown                 1623\nEurope/London            590\nAmerica/Los_Angeles      500\nAsia/Tokyo               226\nAmerica/Indianapolis     192\nAmerica/Rainy_River      166\nAmerica/Denver           160\nAsia/Calcutta            148\n\"\"\"\n\n\u53ef\u8996\u5316\ntz_counts[:10].plot(kind=\"barh\", rot=0)\n\n\n\u3053\u308c\u306bOS\uff08Windows\u304b\u975eWindows\u304b\uff09\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3059\u308b\u3002\n#notnull()\u306fnull\u5024\u306e\u3068\u3053\u308d\u3067False\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u308c\u3067frame\u3092\u30de\u30b9\u30af\u3059\u308b\ncframe = frame[frame.a.notnull()]\n#where\u306f\u7b2c\u4e00\u5f15\u6570\u304cTrue\u3060\u3063\u305f\u3089\u7b2c\u4e8c\u5f15\u6570\u3092\u3001False\u3060\u3063\u305f\u3089\u7b2c\u4e09\u5f15\u6570\u3092\u8fd4\u3059\noperating_system = np.where(cframe[\"a\"].str.contains(\"Windows\"), \"Windows\", \"Not windows\")\n\n\"\"\"\nIn [130]: operating_system[:10]\nOut[130]: \n0        Windows\n1        Windows\n2    Not windows\n3    Not windows\n4        Windows\n5        Windows\n6        Windows\n7        Windows\n8        Windows\n9        Windows\nName: a\n\"\"\"\n#operatingSystem\u306e\u4e2d\u3067\u540c\u3058\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u6301\u3064\u3082\u306e\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\nby_tz_os = cframe.groupby([\"tz\", operating_system])\n#\u30c6\u30fc\u30d6\u30eb\u578b\u306b\u5909\u63db\nagg_counts = by_tz_os.size().unstack().fillna(0)\n#\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u5024\u3067\u30bd\u30fc\u30c8\uff08Windows\u3068Not windows\u3067\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u5ea6sum\u3092\u3068\u308b\uff09\nindexer = agg_counts.sum(1).argsort()\n#agg_counts\u3092\u4e26\u3073\u66ff\u3048\u308b\ncount_subset = agg_counts.take(indexer)[-10:]\n#\u30d7\u30ed\u30c3\u30c8\ncount_subset.plot(kind=\"barh\", stacked=True)\n#\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u5316\nnormed_subset = count_subset.div(count_subset.sum(1), axis=0)\nnormed_subset.plot(kind=\"barh\",stacked=True)\n\n\n\n\nMovieLens 1M Data Set\n\u5143\u30c7\u30fc\u30bf - MovieLens 1M Data Set\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nimport pandas as pd\nunames = [\"user_id\", \"gender\", \"age\", \"occupation\", \"zip\"]\nusers = pd.read_table(\"users.dat\", sep=\"::\", header=None, names=unames)\n\nrnames = [\"user_id\", \"movie_id\", \"rating\", \"timestamp\"]\nratings = pd.read_table(\"ratings.dat\", sep=\"::\", header=None, names=rnames)\n\nmnames = [\"user_id\", \"title\", \"genres\"]\nmovies = pd.read_table(\"movies.dat\", sep=\"::\", header=None, names=rnames)\n\n\"\"\"\nIn [151]: users[:5]\nOut[151]: \n   user_id gender  age  occupation    zip\n0        1      F    1          10  48067\n1        2      M   56          16  70072\n2        3      M   25          15  55117\n3        4      M   45           7  02460\n4        5      M   25          20  55455\n\nIn [152]: ratings[:5]\nOut[152]: \n   user_id  movie_id  rating  timestamp\n0        1      1193       5  978300760\n1        1       661       3  978302109\n2        1       914       3  978301968\n3        1      3408       4  978300275\n4        1      2355       5  978824291\n\nIn [153]: movies[:5]\nOut[153]: \n   movie_id                               title                        genres\n0         1                    Toy Story (1995)   Animation|Children's|Comedy\n1         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n2         3             Grumpier Old Men (1995)                Comedy|Romance\n3         4            Waiting to Exhale (1995)                  Comedy|Drama\n4         5  Father of the Bride Part II (1995)                        Comedy\n\"\"\"\n#\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3002\ndata = pd.merge(pd.merge(ratings, users), movies)\n\n\"\"\"\nIn [155]: data[:5]\nOut[155]: \n   user_id  movie_id  rating  timestamp gender  age  occupation    zip  \\\n0        1      1193       5  978300760      F    1          10  48067   \n1        2      1193       5  978298413      M   56          16  70072   \n2       12      1193       4  978220179      M   25          12  32793   \n3       15      1193       4  978199279      M   25           7  22903   \n4       17      1193       5  978158471      M   50           1  95350   \n\n                                    title genres  \n0  One Flew Over the Cuckoo's Nest (1975)  Drama  \n1  One Flew Over the Cuckoo's Nest (1975)  Drama  \n2  One Flew Over the Cuckoo's Nest (1975)  Drama  \n3  One Flew Over the Cuckoo's Nest (1975)  Drama  \n4  One Flew Over the Cuckoo's Nest (1975)  Drama  \n\nIn [156]: data.ix[0]\nOut[156]: \nuser_id                                            1\nmovie_id                                        1193\nrating                                             5\ntimestamp                                  978300760\ngender                                             F\nage                                                1\noccupation                                        10\nzip                                            48067\ntitle         One Flew Over the Cuckoo's Nest (1975)\ngenres                                         Drama\nName: 0\n\"\"\"\n\n\u6027\u5225\u3068\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u6620\u753b\u306e\u8a55\u4fa1\u5024\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\u3002\nmean_ratings = data.pivot_table(\"rating\", rows=\"title\", cols=\"gender\", aggfunc=\"mean\")\n\n\"\"\"\nmean_ratings[:5]\nIn [160]: mean_ratings[:5]\nOut[160]: \ngender                                F         M\ntitle                                            \n$1,000,000 Duck (1971)         3.375000  2.761905\n'Night Mother (1986)           3.388889  3.352941\n'Til There Was You (1997)      2.675676  2.733333\n'burbs, The (1989)             2.793478  2.962085\n...And Justice for All (1979)  3.828571  3.689024\n\"\"\"\n\n\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u5225\u306b\u8a55\u4fa1\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\n#groupby\u3067\u30bf\u30a4\u30c8\u30eb\u5225\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001size\u3067\u30bf\u30a4\u30c8\u30eb\u3054\u3068\u306eSeries\u3092\u5f97\u308b\nratings_by_title = data.groupby(\"title\").size()\n\n\"\"\"\nIn [170]: ratings_by_title[:5]\nOut[170]: \ntitle\n$1,000,000 Duck (1971)            37\n'Night Mother (1986)              70\n'Til There Was You (1997)         52\n'burbs, The (1989)               303\n...And Justice for All (1979)    199\n\"\"\"\n\n#\u9069\u5f53\u306b\u30ec\u30fc\u30c8\u306e\u5408\u8a08\u304c\u9ad8\u3044\u3082\u306e\uff08\u3088\u304f\u89b3\u3089\u308c\u3066\u3044\u308b\u6620\u753b\uff09\u3092\u3068\u3063\u3066\u304f\u308b\nactive_titles = ratings_by_title.index[ratings_by_title >= 1000]\n\n#mean_ratings\u304b\u3089active_titles\u306e\u307f\u3092\u9078\u629e\nactive_title_mean_ratings = mean_ratings.ix[active_titles]\n\n#\u7537\u5973\u5225\u306b\u9ad8\u8a55\u4fa1\u306e\u3082\u306e\u3092\u53d6\u3063\u3066\u304f\u308b\ntop_male_ratings = active_title_mean_ratings.sort_index(by=\"M\", ascending=False)\ntop_female_ratings = active_title_mean_ratings.sort_index(by=\"F\", ascending=False)\n\n\"\"\"\nIn [205]: top_male_ratings[:5]\nOut[205]: \ngender                                            F         M\ntitle                                                        \nGodfather, The (1972)                      4.314700  4.583333\nShawshank Redemption, The (1994)           4.539075  4.560625\nRaiders of the Lost Ark (1981)             4.332168  4.520597\nUsual Suspects, The (1995)                 4.513317  4.518248\nStar Wars: Episode IV - A New Hope (1977)  4.302937  4.495307\n\nIn [207]: top_female_ratings[:5]\nOut[207]: \ngender                                   F         M\ntitle                                               \nSchindler's List (1993)           4.562602  4.491415\nShawshank Redemption, The (1994)  4.539075  4.560625\nUsual Suspects, The (1995)        4.513317  4.518248\nRear Window (1954)                4.484536  4.472991\nSixth Sense, The (1999)           4.477410  4.379944\n\"\"\"\n\n\n\u7537\u5973\u8a55\u4fa1\u306e\u5dee\u304c\u5927\u304d\u3044\u6620\u753b\u3092\u8abf\u3079\u308b\nactive_title_mean_ratings[\"diff\"] = active_title_mean_ratings[\"M\"] - active_title_mean_ratings[\"F\"]\nsorted_by_diff = active_title_mean_ratings.sort_index(by=\"diff\")\n\n\"\"\"\n\u5973\u6027\u306b\u4eba\u6c17\nIn [211]: sorted_by_diff[:15]\nOut[211]: \ngender                                               F         M      diff\ntitle                                                                     \nRocky Horror Picture Show, The (1975)         3.673016  3.160131 -0.512885\nMary Poppins (1964)                           4.197740  3.730594 -0.467147\nGone with the Wind (1939)                     4.269841  3.829371 -0.440471\nFull Monty, The (1997)                        4.113456  3.760976 -0.352481\nLittle Mermaid, The (1989)                    3.975936  3.632375 -0.343561\nPretty Woman (1990)                           3.846914  3.511700 -0.335213\nThelma & Louise (1991)                        3.916268  3.581582 -0.334686\nClueless (1995)                               3.827004  3.514640 -0.312365\nGhost (1990)                                  3.698667  3.395194 -0.303473\nWilly Wonka and the Chocolate Factory (1971)  4.063953  3.789474 -0.274480\nLeague of Their Own, A (1992)                 3.865497  3.595773 -0.269724\nWhen Harry Met Sally... (1989)                4.257028  3.987850 -0.269178\nTitanic (1997)                                3.764228  3.499051 -0.265176\nBeauty and the Beast (1991)                   4.054945  3.797414 -0.257531\nRomancing the Stone (1984)                    3.854227  3.632735 -0.221493\n\n\u7537\u6027\u306b\u4eba\u6c17\nIn [212]: sorted_by_diff[::-1][:15]\nOut[212]: \ngender                                              F         M      diff\ntitle                                                                    \nAnimal House (1978)                          3.628906  4.167192  0.538286\nReservoir Dogs (1992)                        3.769231  4.213873  0.444642\nSouth Park: Bigger, Longer and Uncut (1999)  3.422481  3.846686  0.424206\nAirplane! (1980)                             3.656566  4.064419  0.407854\nPredator (1987)                              3.299401  3.706195  0.406793\nGodfather: Part II, The (1974)               4.040936  4.437778  0.396842\nClockwork Orange, A (1971)                   3.757009  4.145813  0.388803\nAliens (1986)                                3.802083  4.186684  0.384601\nStarship Troopers (1997)                     2.802721  3.181102  0.378381\nApocalypse Now (1979)                        3.955307  4.294885  0.339577\nFull Metal Jacket (1987)                     3.821839  4.157407  0.335568\nTerminator 2: Judgment Day (1991)            3.785088  4.115367  0.330279\nAlien (1979)                                 3.888252  4.216119  0.327867\nMad Max 2 (a.k.a. The Road Warrior) (1981)   3.393701  3.713341  0.319640\nTerminator, The (1984)                       3.899729  4.205899  0.306170\n\"\"\"\n\n#\u6a19\u6e96\u504f\u5dee\nrating_std_by_title = data.groupby(\"title\")[\"rating\"].std()\n#active_titles\u3092\u62bd\u51fa\nrating_std_by_title = rating_std_by_title.ix[active_titles]\n#\u30bd\u30fc\u30c8\nrating_std_by_title.order(ascending=False)[:10]\n\n\"\"\"\nIn [228]: rating_std_by_title.order(ascending=False)[:10]\nOut[228]: \ntitle\nBlair Witch Project, The (1999)                 1.316368\nRocky Horror Picture Show, The (1975)           1.260177\nSouth Park: Bigger, Longer and Uncut (1999)     1.235380\nArmageddon (1998)                               1.203439\nStarship Troopers (1997)                        1.203245\nMars Attacks! (1996)                            1.185632\nTitanic (1997)                                  1.167448\nAustin Powers: The Spy Who Shagged Me (1999)    1.151063\nFace/Off (1997)                                 1.136265\nMagnolia (1999)                                 1.132217\nName: rating\n\"\"\"\n\n\nUS Baby Names 1880-2010\n\u5143\u30c7\u30fc\u30bf - National data (7Mb)\n\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u8fbc\u3093\u3067\u78ba\u8a8d\u3002\n\u3061\u306a\u307f\u306biPython\u4e0a\u3067!head\u3068\u3044\u3046\u611f\u3058\u306b!\u3092\u3064\u3051\u308b\u3068\u30b7\u30a7\u30eb\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u307f\u305f\u3044\u3002\n\u306a\u306e\u3067\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u305f\u306a\u304f\u3066\u3082\u78ba\u8a8d\u3060\u3051\u306a\u3089!head -5 yob1880.txt\u3067\u826f\u3044\u3002\nimport pandas as pd\nnames1880 = pd.read_csv(\"yob1880.txt\", names=[\"name\", \"sex\", \"births\"])\n\n\"\"\"\nIn [243]: names1880[:5]\nOut[243]: \n        name sex  births\n0       Mary   F    7065\n1       Anna   F    2604\n2       Emma   F    2003\n3  Elizabeth   F    1939\n4     Minnie   F    1746\n\"\"\"\n\n#\u7537\u5973\u306e\u51fa\u751f\u6570\u3092\u78ba\u8a8d\n\"\"\"\nIn [265]: names1880.groupby(\"sex\").sum()\nOut[265]: \n     births\nsex        \nF     90993\nM    110491\n\"\"\"\n\n\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u4e0a\u306e\u611f\u3058\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5168\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u3064\u306enames\u5909\u6570\u306b\u5165\u308c\u308b\u3002\nyears = range(1880, 2013)\npieces = []\ncolumns = [\"name\", \"sex\", \"births\"]\n\nfor year in years:\n    path = \"names/yob%d.txt\" % year\n    frame = pd.read_csv(path, names=columns)\n    frame[\"year\"] = year\n    pieces.append(frame)\n\nnames = pd.concat(pieces, ignore_index=True)\n\n\"\"\"\nIn [263]: names[:5]\nOut[263]: \n        name sex  births  year\n0       Mary   F    7065  1880\n1       Anna   F    2604  1880\n2       Emma   F    2003  1880\n3  Elizabeth   F    1939  1880\n4     Minnie   F    1746  1880\n\nIn [264]: names[-5:]\nOut[264]: \n              name sex  births  year\n1758725      Zylin   M       5  2012\n1758726     Zymari   M       5  2012\n1758727      Zyrin   M       5  2012\n1758728      Zyrus   M       5  2012\n1758729  Zytaevius   M       5  2012\n\"\"\"\n\n\u307b\u3093\u3067\u30c7\u30fc\u30bf\u306e\u6574\u7406\n#\u51fa\u751f\u5e74\u5ea6\u3068\u6027\u5225\u3067\u51fa\u751f\u6570\u3092\u30af\u30ed\u30b9\u96c6\u8a08\ntotal_births = names.pivot_table(\"births\", rows=\"year\", cols=\"sex\", aggfunc=sum)\n\n\"\"\"\nIn [269]: total_births.tail()\nOut[269]: \nsex         F        M\nyear                  \n2008  1886109  2035075\n2009  1831382  1977632\n2010  1770632  1911572\n2011  1750078  1889557\n2012  1743626  1877705\n\"\"\"\n\n#\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\ntotal_births.plot(title=\"Total births by sex and year\")\n\n\ndef add_prop(group):\n    #Integer division floors\n    births = group.births.astype(float)\n    group[\"prop\"] = births / births.sum()\n    return group\n\n#\u305d\u306e\u5e74\u306e\u6027\u5225\u5225\u51fa\u751f\u4eba\u6570\u306b\u5bfe\u3057\u3066\u305d\u306e\u540d\u524d\u306e\u5272\u5408\u3092\u793a\u3059column\u3092\u8ffd\u52a0\nnames = names.groupby([\"year\", \"sex\"]).apply(add_prop)\n#\u8aa4\u5dee\u3092\u542b\u3081\u305f\u5408\u8a08\u304c1\u304b\u3069\u3046\u304b\u3067\u78ba\u304b\u3089\u3057\u3055\u3092\u78ba\u8a8d\n\"\"\"\nIn [305]: np.allclose(names.groupby([\"year\",\"sex\"]).prop.sum(),1)\nOut[305]: True\n\"\"\"\n\n#\u540d\u524d\u30fb\u6027\u5225\u3054\u3068\u306b\u4eba\u6c17\u306e\u540d\u524d\u30921000\u500b\u3068\u3063\u3066\u304f\u308b\npieces = []\nfor year_sex, group in names.groupby([\"year\", \"sex\"]):\n    pieces.append(group.sort_index(by=\"births\", ascending=False)[:1000])\ntop1000 = pd.concat(pieces, ignore_index=True)\n\"\"\"\nIn [356]: top1000\nOut[356]: \n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 265877 entries, 0 to 265876\nData columns:\nname      265877  non-null values\nsex       265877  non-null values\nbirths    265877  non-null values\nyear      265877  non-null values\nprop      265877  non-null values\ndtypes: float64(1), int64(2), object(2)\n\"\"\"\n\n\u3053\u308c\u3067\u4eba\u6c17\u306e\u540d\u524d\u30c7\u30fc\u30bf\u304c\u3068\u308c\u3066\u304d\u305f\u306e\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u89e3\u6790\u3092\u3059\u308b\u3002\n\nAnalyzing Naming Trends\n#\u7537\u5973\u5225\u30c7\u30fc\u30bf\nboys = top1000[top1000.sex == \"M\"]\ngirls = top1000[top1000.sex == \"F\"]\n#\u5e74\u5ea6\u30fb\u6027\u5225\u5225\u51fa\u751f\u6570\ntotal_births = top1000.pivot_table(\"births\", rows=\"year\", cols=\"name\", aggfunc=sum)\nsubset = total_births[[\"John\", \"Harry\", \"Mary\", \"Marilyn\"]]\nsubset.plot(subplots=False, figsize=(12,10), grid=False, title=\"Number of births per year\")\n\n\n\nMeasuring the increase in naming diversity\n\u89aa\u306f\u5b50\u3069\u3082\u306b\u4e00\u822c\u7684\u306a\u540d\u524d\u3092\u4ed8\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u4eee\u8aac\u3092\u8abf\u3079\u308b\u3002\n#\u5e74\u5ea6\u5225\u306btop1000\u306e\u540d\u524d\u304c\u305d\u306e\u5e74\u306e\u4f55\u30d1\u30fc\u30bb\u30f3\u30c8\u3092\u5360\u3081\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\ntable = top1000.pivot_table(\"prop\", rows=\"year\", cols=\"sex\", aggfunc=sum)\ntable.plot(title=\"Sum of table1000.prop by year and sex\", yticks=np.linspace(0,1.2,13), xticks=range(1880,2020,10))\n\n\n\u78ba\u304b\u306btop1000\u304c\u5360\u3081\u308b\u5272\u5408\u304c\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u3055\u3066\u3053\u3053\u3067\u3001\u3042\u308b\u5e74\u5ea6\u306b\u3064\u3044\u3066\u4e0a\u4f4d\u4f55\u7a2e\u985e\u307e\u3067\u306e\u540d\u524d\u304c\u305d\u306e\u5e74\u306e\u540d\u524d\u306e\u5272\u5408\u306e\u534a\u5206\u3092\u5360\u3081\u3066\u3044\u308b\u304b\u6c17\u306b\u306a\u3063\u3066\u304f\u308b\u3002\n2012\u5e74\u30681900\u5e74\u306e\u7537\u6027\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u898b\u3066\u307f\u308b\u3002\n#\u307e\u305a2012\u5e74\u306e\u30c7\u30fc\u30bf\ndf = boys[boys.year == 2012]\nprop_cumsum = df.sort_index(by=\"prop\", ascending=False).prop.cumsum()\n\"\"\"\nIn [398]: prop_cumsum[:10]\nOut[398]: \n264877    0.010065\n264878    0.020107\n264879    0.029452\n264880    0.038613\n264881    0.047520\n264882    0.056407\n264883    0.064935\n264884    0.073454\n264885    0.081498\n264886    0.089369\n\"\"\"\n#prop\u306e\u5024\u304c\u5927\u304d\u3044\u9806\u306b\u52a0\u7b97\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\n#\u3053\u306e\u5024\u304c0.5\u3092\u8d85\u3048\u308b\u3068\u3053\u308d\u3092\u63a2\u305b\u3070\u826f\u3044\uff08searchsorted())\n\"\"\"\nIn [399]: prop_cumsum.searchsorted(0.5)\nOut[399]: 123\n\"\"\"\n\n#\u6b21\u306b1990\u5e74\u306e\u30c7\u30fc\u30bf\ndf = boys[boys.year == 1990]\nin1990 = df.sort_index(by=\"prop\", ascending=False).prop.cumsum()\nin1990.searchsorted(0.5) + 1\n\"\"\"\nIn [402]: in1990.searchsorted(0.5) + 1\nOut[402]: 45\n\"\"\"\n\n\u3053\u308c\u306b\u3088\u308a2012\u5e74\u306f124\u7a2e\u985e\u306e\u540d\u524d\u304c\u4e0a\u4f4d50%\u3092\u5360\u3081\u3066\u3044\u308b\u304c\u30011990\u5e74\u306f\u308f\u305a\u304b45\u7a2e\u985e\u304c\u4e0a\u4f4d50%\u3092\u5360\u3081\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u4ed6\u306e\u5e74\u306b\u3064\u3044\u3066\u3082\u898b\u3066\u3086\u304f\u3002\ndef get_quantile_count(group, q=0.5):\n    group = group.sort_index(by=\"prop\", ascending=False)\n    return group.prop.cumsum().searchsorted(q) + 1\n\ndiversity = top1000.groupby([\"year\", \"sex\"]).apply(get_quantile_count)\ndiversity = diversity.unstack(\"sex\")\ndiversity.plot(title=\"Number of popular names in top 50%\")\n\n\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u7537\u5973\u5171\u306b\u540d\u524d\u306e\u30d0\u30e9\u30a8\u30c6\u30a3\u306f\u5897\u3048\u3066\u3044\u308b\u3002\n\nThe \"Last letter\" Revolution\n\u7537\u6027\u306e\u540d\u524d\u306elast letter\u5206\u5e03\u306f\u3053\u3053100\u5e74\u3067\u79fb\u308a\u5909\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u7814\u7a76\u304c\u306a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u78ba\u304b\u3081\u308b\u3002\nget_last_letter = lambda x: x[-1]\nlast_letters = names.name.map(get_last_letter)\nlast_letters.name = \"last_letter\"\ntable = names.pivot_table(\"births\", rows=last_letters, cols=[\"sex\", \"year\"], aggfunc=sum)\nsubtable = table.reindex(columns=[1910,1960,2010],level=\"year\")\n\"\"\"\nIn [54]: subtable.head()\nOut[54]: \nsex               F                      M                \nyear           1910    1960    2010   1910    1960    2010\nlast_letter                                               \na            108395  691251  675059    977    5207   28772\nb               NaN     694     454    411    3914   39149\nc                 5      49     953    482   15472   23279\nd              6751    3732    2633  22114  262140   44690\ne            133592  435050  315891  28662  178814  129916\"\n\"\"\"\n#\u6b63\u898f\u5316\n\"\"\"\nIn [55]: subtable.sum()\nOut[55]: \nsex  year\nF    1910     396482\n     1960    2022126\n     2010    1770632\nM    1910     194214\n     1960    2132733\n     2010    1911572\ndtype: float64\n\"\"\"\nletter_prop = subtable / subtable.sum().astype(float)\n\n\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u7537\u6027\u306en\u306f\u660e\u3089\u304b\u306b\u8fd1\u5e74\u5897\u3048\u3066\u3044\u308b\u3002\nletter_prop = table / table.sum().astype(float)\ndny_ts = letter_prop.ix[[\"d\",\"n\",\"y\"],\"M\"].T\n\"\"\"\nIn [68]: dny_ts.head()\nOut[68]: \n             d         n         y\nyear                              \n1880  0.083057  0.153216  0.075762\n1881  0.083249  0.153207  0.077452\n1882  0.085340  0.149560  0.077537\n1883  0.084058  0.151649  0.079146\n1884  0.086120  0.149915  0.080405\n\"\"\"\n\n\n\nBoy names that became girl names (and vice versa)\n\u4ed6\u306e\u9762\u767d\u3044\u6d41\u884c\u3068\u3057\u3066\u306f\u6614\u3068\u4eca\u3067\u306f\u6027\u5225\u306e\u9055\u3046\u540d\u524d\u304c\u3042\u308b\u3053\u3068\u3060\u3002\n\u305f\u3068\u3048\u3070Lesley\u3084Leslie\u306e\u3088\u3046\u306a\u3002\nall_names = top1000.name.unique()\nmask = np.array([\"lesl\" in x.lower() for x in all_names])\nlesley_like = all_names[mask]\n\"\"\"\nIn [75]: lesley_like\nOut[75]: array(['Leslie', 'Lesley', 'Leslee', 'Lesli', 'Lesly'], dtype=object)\n\"\"\"\n\nfiltered = top1000[top1000.name.isin(lesley_like)]\n\"\"\"\nIn [79]: filtered.groupby(\"name\").births.sum()\nOut[79]: \nname\nLeslee       993\nLesley     35028\nLesli        929\nLeslie    372981\nLesly      10839\nName: births, dtype: int64\n\"\"\"\n\ntable = filtered.pivot_table(\"births\", rows=\"year\",cols=\"sex\",aggfunc=\"sum\")\ntable = table.div(table.sum(1),axis=0)\n\"\"\"\nIn [82]: table.tail()\nOut[82]: \nsex   F   Mask\nyear       \n2008  1 NaN\n2009  1 NaN\n2010  1 NaN\n2011  1 NaN\n2012  1 NaN\n\"\"\"\ntable.plot(style={\"M\":\"k-\",\"F\":\"k--\"})\n\n\n#Introductory Examples\n\n\u3059\u3079\u3066\u306e\u7ae0\u3067iPython\u306e\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3002\n\u8d77\u52d5\u306f`$ ipython --pylab`\u3067\u884c\u3046\u3002\npandas\u306e\u30d0\u30fc\u30b8\u30e7\u30f30.10.0\u3060\u3068apply\u95a2\u6570\u306e[\u30d0\u30b0](https://github.com/pydata/pandas/issues/2605)\u304c\u3042\u308b\u306e\u3067\u6700\u65b0\u306e\u3092\u5165\u308c\u307e\u3057\u3087\u3046\u3002\n\n##usa.gov data from bit.ly\n[\u5143\u30c7\u30fc\u30bf](http://bitly.measuredvoice.com/bitly_archive/?C=M;O=D)\u304cJSON\u5f62\u5f0f\u306a\u306e\u3067\u3053\u308c\u3092\u30d1\u30fc\u30b9\u3057\u3066\u53d6\u308a\u8fbc\u3080\u3002\n\n```py\nimport json\n\npath = \"data.txt\"\nrecords = [json.loads(line) for line in open(path)]\ntime_zones = [rec[\"tz\"] for rec in records if \"tz\" in rec]\n```\n\n\u8981\u7d20\u306e\u30ab\u30a6\u30f3\u30c8\u306fcollections.Counter\u3092\u7528\u3044\u308b\u3068\u826f\u3044\u3002\n\n```py\nfrom collections import Counter\n\ncounts = Counter(time_zones)\n\n\"\"\"\ncounts.most_common(10)\nIn [103]: counts.most_common(10)\nOut[103]: \n[(u'America/Chicago', 3641),\n (u'America/New_York', 2474),\n (u'', 1623),\n (u'Europe/London', 590),\n (u'America/Los_Angeles', 500),\n (u'Asia/Tokyo', 226),\n (u'America/Indianapolis', 192),\n (u'America/Rainy_River', 166),\n (u'America/Denver', 160),\n (u'Asia/Calcutta', 148)]\n\"\"\"\n```\n\n\u4e0a\u4f4d10\u500b\u306e\u8981\u7d20\u304c\u3068\u308c\u308b\u3002\n\n###pandas\u3092\u7528\u3044\u3066\u89e3\u6790\u3092\u3059\u308b\n\n```py\nfrom pandas import DataFrame, Series\nimport pandas as pd\n\nframe = DataFrame(records)\n\n\"\"\"\nIn [104]: frame\nOut[104]: \n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 12202 entries, 0 to 12201\nData columns:\n_heartbeat_    120  non-null values\na              12082  non-null values\nal             10109  non-null values\nc              10485  non-null values\ncy             10485  non-null values\ng              12082  non-null values\ngr             10485  non-null values\nh              12082  non-null values\nhc             12082  non-null values\nhh             12082  non-null values\nkw             1225  non-null values\nl              12082  non-null values\nll             10462  non-null values\nnk             12082  non-null values\nr              12082  non-null values\nt              12082  non-null values\ntz             12082  non-null values\nu              12082  non-null values\ndtypes: float64(4), object(14)\n\"\"\"\n```\n\npandas\u306eDataFrame\u306f\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3068R\u306edataframe\u306e\u69d8\u306bDataFrame\u578b\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u304f\u308c\u308b\u3002\n\u30a4\u30e1\u30fc\u30b8\u306f\u8868\n\n|index|a|al|c|cy|g|. . .|\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|0|Mozilla\u2026|en-us|US|Durand|YmtpnZ|\u2026|\n|1|Mozilla\u2026|en-US|US|Plymouth|YmtpnZ|\u2026|\n|2|Mozilla\u2026|en-us|US|Pollock|10nPD5S|\u2026|\n|3|Mozilla\u2026|NaN|US|Malden|oVXSUv|\u2026|\n|4|\u2026|\u2026|\u2026|\u2026|\u2026|\u2026||\n\n\u4f8b\u3048\u3070tz\u5217\u306e\u4e2d\u8eab\u306f\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u60c5\u5831\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```py\n\"\"\"\nIn [105]: frame[\"tz\"][:10]\nOut[105]: \n0     America/Chicago\n1     America/Chicago\n2     America/Chicago\n3    America/New_York\n4     America/Chicago\n5     America/Chicago\n6     America/Chicago\n7       Asia/Calcutta\n8     America/Chicago\n9     America/Chicago\nName: tz\n\"\"\"\n```\n\n\u3053\u306eframe[\"tz\"]\u306fSeries\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u5e30\u3063\u3066\u304f\u308b\u3002\n\u3053\u308c\u306f\u5217\u306e\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u308c\u308bvalue_counts\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\n\n```py\ntz_counts = frame[\"tz\"].value_counts()\ntz_counts[:10]\n\n\"\"\"\nIn [115]: tz_counts[:10]\nOut[115]: \nAmerica/Chicago         3641\nAmerica/New_York        2474\nUnknown                 1623\nEurope/London            590\nAmerica/Los_Angeles      500\nAsia/Tokyo               226\nAmerica/Indianapolis     192\nAmerica/Rainy_River      166\nAmerica/Denver           160\nAsia/Calcutta            148\n\"\"\"\n```\n\n\u3053\u306e\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u306bNA\u5024\u3084\u7a7a\u306e\u6587\u5b57\u5217\u5024\"\"\u306b\u306a\u3063\u3066\u3044\u308b\u7269\u3092\u53d6\u308a\u9664\u304f\u3002\n\n```py\nclean_tz = frame[\"tz\"].fillna(\"Missing\")\nclean_tz[clean_tz == \"\"] = \"Unknown\"\ntz_counts = clean_tz.value_counts()\n\n\"\"\"\nIn [117]: tz_counts[:10]\nOut[117]: \nAmerica/Chicago         3641\nAmerica/New_York        2474\nUnknown                 1623\nEurope/London            590\nAmerica/Los_Angeles      500\nAsia/Tokyo               226\nAmerica/Indianapolis     192\nAmerica/Rainy_River      166\nAmerica/Denver           160\nAsia/Calcutta            148\n\"\"\"\n```\n\n\u53ef\u8996\u5316\n\n```py\ntz_counts[:10].plot(kind=\"barh\", rot=0)\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-1.png)\n\n\u3053\u308c\u306bOS\uff08Windows\u304b\u975eWindows\u304b\uff09\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3059\u308b\u3002\n\n```py\n#notnull()\u306fnull\u5024\u306e\u3068\u3053\u308d\u3067False\u3092\u8fd4\u3059\u306e\u3067\u3001\u3053\u308c\u3067frame\u3092\u30de\u30b9\u30af\u3059\u308b\ncframe = frame[frame.a.notnull()]\n#where\u306f\u7b2c\u4e00\u5f15\u6570\u304cTrue\u3060\u3063\u305f\u3089\u7b2c\u4e8c\u5f15\u6570\u3092\u3001False\u3060\u3063\u305f\u3089\u7b2c\u4e09\u5f15\u6570\u3092\u8fd4\u3059\noperating_system = np.where(cframe[\"a\"].str.contains(\"Windows\"), \"Windows\", \"Not windows\")\n\n\"\"\"\nIn [130]: operating_system[:10]\nOut[130]: \n0        Windows\n1        Windows\n2    Not windows\n3    Not windows\n4        Windows\n5        Windows\n6        Windows\n7        Windows\n8        Windows\n9        Windows\nName: a\n\"\"\"\n#operatingSystem\u306e\u4e2d\u3067\u540c\u3058\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u6301\u3064\u3082\u306e\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\nby_tz_os = cframe.groupby([\"tz\", operating_system])\n#\u30c6\u30fc\u30d6\u30eb\u578b\u306b\u5909\u63db\nagg_counts = by_tz_os.size().unstack().fillna(0)\n#\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u5024\u3067\u30bd\u30fc\u30c8\uff08Windows\u3068Not windows\u3067\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u5ea6sum\u3092\u3068\u308b\uff09\nindexer = agg_counts.sum(1).argsort()\n#agg_counts\u3092\u4e26\u3073\u66ff\u3048\u308b\ncount_subset = agg_counts.take(indexer)[-10:]\n#\u30d7\u30ed\u30c3\u30c8\ncount_subset.plot(kind=\"barh\", stacked=True)\n#\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u5316\nnormed_subset = count_subset.div(count_subset.sum(1), axis=0)\nnormed_subset.plot(kind=\"barh\",stacked=True)\n```\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-2.png)\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-3.png)\n\n##MovieLens 1M Data Set\n[\u5143\u30c7\u30fc\u30bf - MovieLens 1M Data Set](http://www.grouplens.org/node/73)\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n```py\nimport pandas as pd\nunames = [\"user_id\", \"gender\", \"age\", \"occupation\", \"zip\"]\nusers = pd.read_table(\"users.dat\", sep=\"::\", header=None, names=unames)\n\nrnames = [\"user_id\", \"movie_id\", \"rating\", \"timestamp\"]\nratings = pd.read_table(\"ratings.dat\", sep=\"::\", header=None, names=rnames)\n\nmnames = [\"user_id\", \"title\", \"genres\"]\nmovies = pd.read_table(\"movies.dat\", sep=\"::\", header=None, names=rnames)\n\n\"\"\"\nIn [151]: users[:5]\nOut[151]: \n   user_id gender  age  occupation    zip\n0        1      F    1          10  48067\n1        2      M   56          16  70072\n2        3      M   25          15  55117\n3        4      M   45           7  02460\n4        5      M   25          20  55455\n\nIn [152]: ratings[:5]\nOut[152]: \n   user_id  movie_id  rating  timestamp\n0        1      1193       5  978300760\n1        1       661       3  978302109\n2        1       914       3  978301968\n3        1      3408       4  978300275\n4        1      2355       5  978824291\n\nIn [153]: movies[:5]\nOut[153]: \n   movie_id                               title                        genres\n0         1                    Toy Story (1995)   Animation|Children's|Comedy\n1         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n2         3             Grumpier Old Men (1995)                Comedy|Romance\n3         4            Waiting to Exhale (1995)                  Comedy|Drama\n4         5  Father of the Bride Part II (1995)                        Comedy\n\"\"\"\n#\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u7d50\u5408\u3002\ndata = pd.merge(pd.merge(ratings, users), movies)\n\n\"\"\"\nIn [155]: data[:5]\nOut[155]: \n   user_id  movie_id  rating  timestamp gender  age  occupation    zip  \\\n0        1      1193       5  978300760      F    1          10  48067   \n1        2      1193       5  978298413      M   56          16  70072   \n2       12      1193       4  978220179      M   25          12  32793   \n3       15      1193       4  978199279      M   25           7  22903   \n4       17      1193       5  978158471      M   50           1  95350   \n\n                                    title genres  \n0  One Flew Over the Cuckoo's Nest (1975)  Drama  \n1  One Flew Over the Cuckoo's Nest (1975)  Drama  \n2  One Flew Over the Cuckoo's Nest (1975)  Drama  \n3  One Flew Over the Cuckoo's Nest (1975)  Drama  \n4  One Flew Over the Cuckoo's Nest (1975)  Drama  \n\nIn [156]: data.ix[0]\nOut[156]: \nuser_id                                            1\nmovie_id                                        1193\nrating                                             5\ntimestamp                                  978300760\ngender                                             F\nage                                                1\noccupation                                        10\nzip                                            48067\ntitle         One Flew Over the Cuckoo's Nest (1975)\ngenres                                         Drama\nName: 0\n\"\"\"\n```\n\n\u6027\u5225\u3068\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u3067\u6620\u753b\u306e\u8a55\u4fa1\u5024\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\u3002\n\n```py\nmean_ratings = data.pivot_table(\"rating\", rows=\"title\", cols=\"gender\", aggfunc=\"mean\")\n\n\"\"\"\nmean_ratings[:5]\nIn [160]: mean_ratings[:5]\nOut[160]: \ngender                                F         M\ntitle                                            \n$1,000,000 Duck (1971)         3.375000  2.761905\n'Night Mother (1986)           3.388889  3.352941\n'Til There Was You (1997)      2.675676  2.733333\n'burbs, The (1989)             2.793478  2.962085\n...And Justice for All (1979)  3.828571  3.689024\n\"\"\"\n```\n\n\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u5225\u306b\u8a55\u4fa1\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\n\n```py\n#groupby\u3067\u30bf\u30a4\u30c8\u30eb\u5225\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001size\u3067\u30bf\u30a4\u30c8\u30eb\u3054\u3068\u306eSeries\u3092\u5f97\u308b\nratings_by_title = data.groupby(\"title\").size()\n\n\"\"\"\nIn [170]: ratings_by_title[:5]\nOut[170]: \ntitle\n$1,000,000 Duck (1971)            37\n'Night Mother (1986)              70\n'Til There Was You (1997)         52\n'burbs, The (1989)               303\n...And Justice for All (1979)    199\n\"\"\"\n\n#\u9069\u5f53\u306b\u30ec\u30fc\u30c8\u306e\u5408\u8a08\u304c\u9ad8\u3044\u3082\u306e\uff08\u3088\u304f\u89b3\u3089\u308c\u3066\u3044\u308b\u6620\u753b\uff09\u3092\u3068\u3063\u3066\u304f\u308b\nactive_titles = ratings_by_title.index[ratings_by_title >= 1000]\n\n#mean_ratings\u304b\u3089active_titles\u306e\u307f\u3092\u9078\u629e\nactive_title_mean_ratings = mean_ratings.ix[active_titles]\n\n#\u7537\u5973\u5225\u306b\u9ad8\u8a55\u4fa1\u306e\u3082\u306e\u3092\u53d6\u3063\u3066\u304f\u308b\ntop_male_ratings = active_title_mean_ratings.sort_index(by=\"M\", ascending=False)\ntop_female_ratings = active_title_mean_ratings.sort_index(by=\"F\", ascending=False)\n\n\"\"\"\nIn [205]: top_male_ratings[:5]\nOut[205]: \ngender                                            F         M\ntitle                                                        \nGodfather, The (1972)                      4.314700  4.583333\nShawshank Redemption, The (1994)           4.539075  4.560625\nRaiders of the Lost Ark (1981)             4.332168  4.520597\nUsual Suspects, The (1995)                 4.513317  4.518248\nStar Wars: Episode IV - A New Hope (1977)  4.302937  4.495307\n\nIn [207]: top_female_ratings[:5]\nOut[207]: \ngender                                   F         M\ntitle                                               \nSchindler's List (1993)           4.562602  4.491415\nShawshank Redemption, The (1994)  4.539075  4.560625\nUsual Suspects, The (1995)        4.513317  4.518248\nRear Window (1954)                4.484536  4.472991\nSixth Sense, The (1999)           4.477410  4.379944\n\"\"\"\n```\n\n###\u7537\u5973\u8a55\u4fa1\u306e\u5dee\u304c\u5927\u304d\u3044\u6620\u753b\u3092\u8abf\u3079\u308b\n\n```py\nactive_title_mean_ratings[\"diff\"] = active_title_mean_ratings[\"M\"] - active_title_mean_ratings[\"F\"]\nsorted_by_diff = active_title_mean_ratings.sort_index(by=\"diff\")\n\n\"\"\"\n\u5973\u6027\u306b\u4eba\u6c17\nIn [211]: sorted_by_diff[:15]\nOut[211]: \ngender                                               F         M      diff\ntitle                                                                     \nRocky Horror Picture Show, The (1975)         3.673016  3.160131 -0.512885\nMary Poppins (1964)                           4.197740  3.730594 -0.467147\nGone with the Wind (1939)                     4.269841  3.829371 -0.440471\nFull Monty, The (1997)                        4.113456  3.760976 -0.352481\nLittle Mermaid, The (1989)                    3.975936  3.632375 -0.343561\nPretty Woman (1990)                           3.846914  3.511700 -0.335213\nThelma & Louise (1991)                        3.916268  3.581582 -0.334686\nClueless (1995)                               3.827004  3.514640 -0.312365\nGhost (1990)                                  3.698667  3.395194 -0.303473\nWilly Wonka and the Chocolate Factory (1971)  4.063953  3.789474 -0.274480\nLeague of Their Own, A (1992)                 3.865497  3.595773 -0.269724\nWhen Harry Met Sally... (1989)                4.257028  3.987850 -0.269178\nTitanic (1997)                                3.764228  3.499051 -0.265176\nBeauty and the Beast (1991)                   4.054945  3.797414 -0.257531\nRomancing the Stone (1984)                    3.854227  3.632735 -0.221493\n\n\u7537\u6027\u306b\u4eba\u6c17\nIn [212]: sorted_by_diff[::-1][:15]\nOut[212]: \ngender                                              F         M      diff\ntitle                                                                    \nAnimal House (1978)                          3.628906  4.167192  0.538286\nReservoir Dogs (1992)                        3.769231  4.213873  0.444642\nSouth Park: Bigger, Longer and Uncut (1999)  3.422481  3.846686  0.424206\nAirplane! (1980)                             3.656566  4.064419  0.407854\nPredator (1987)                              3.299401  3.706195  0.406793\nGodfather: Part II, The (1974)               4.040936  4.437778  0.396842\nClockwork Orange, A (1971)                   3.757009  4.145813  0.388803\nAliens (1986)                                3.802083  4.186684  0.384601\nStarship Troopers (1997)                     2.802721  3.181102  0.378381\nApocalypse Now (1979)                        3.955307  4.294885  0.339577\nFull Metal Jacket (1987)                     3.821839  4.157407  0.335568\nTerminator 2: Judgment Day (1991)            3.785088  4.115367  0.330279\nAlien (1979)                                 3.888252  4.216119  0.327867\nMad Max 2 (a.k.a. The Road Warrior) (1981)   3.393701  3.713341  0.319640\nTerminator, The (1984)                       3.899729  4.205899  0.306170\n\"\"\"\n\n#\u6a19\u6e96\u504f\u5dee\nrating_std_by_title = data.groupby(\"title\")[\"rating\"].std()\n#active_titles\u3092\u62bd\u51fa\nrating_std_by_title = rating_std_by_title.ix[active_titles]\n#\u30bd\u30fc\u30c8\nrating_std_by_title.order(ascending=False)[:10]\n\n\"\"\"\nIn [228]: rating_std_by_title.order(ascending=False)[:10]\nOut[228]: \ntitle\nBlair Witch Project, The (1999)                 1.316368\nRocky Horror Picture Show, The (1975)           1.260177\nSouth Park: Bigger, Longer and Uncut (1999)     1.235380\nArmageddon (1998)                               1.203439\nStarship Troopers (1997)                        1.203245\nMars Attacks! (1996)                            1.185632\nTitanic (1997)                                  1.167448\nAustin Powers: The Spy Who Shagged Me (1999)    1.151063\nFace/Off (1997)                                 1.136265\nMagnolia (1999)                                 1.132217\nName: rating\n\"\"\"\n```\n\n##US Baby Names 1880-2010\n[\u5143\u30c7\u30fc\u30bf - National data (7Mb)](http://www.ssa.gov/oact/babynames/limits.html)\n\n\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u8fbc\u3093\u3067\u78ba\u8a8d\u3002\n\u3061\u306a\u307f\u306biPython\u4e0a\u3067`!head`\u3068\u3044\u3046\u611f\u3058\u306b!\u3092\u3064\u3051\u308b\u3068\u30b7\u30a7\u30eb\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u307f\u305f\u3044\u3002\n\u306a\u306e\u3067\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u305f\u306a\u304f\u3066\u3082\u78ba\u8a8d\u3060\u3051\u306a\u3089`!head -5 yob1880.txt`\u3067\u826f\u3044\u3002\n\n```py\nimport pandas as pd\nnames1880 = pd.read_csv(\"yob1880.txt\", names=[\"name\", \"sex\", \"births\"])\n\n\"\"\"\nIn [243]: names1880[:5]\nOut[243]: \n        name sex  births\n0       Mary   F    7065\n1       Anna   F    2604\n2       Emma   F    2003\n3  Elizabeth   F    1939\n4     Minnie   F    1746\n\"\"\"\n\n#\u7537\u5973\u306e\u51fa\u751f\u6570\u3092\u78ba\u8a8d\n\"\"\"\nIn [265]: names1880.groupby(\"sex\").sum()\nOut[265]: \n     births\nsex        \nF     90993\nM    110491\n\"\"\"\n```\n\n\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u4e0a\u306e\u611f\u3058\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u5168\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u3064\u306enames\u5909\u6570\u306b\u5165\u308c\u308b\u3002\n\n```py\nyears = range(1880, 2013)\npieces = []\ncolumns = [\"name\", \"sex\", \"births\"]\n\nfor year in years:\n    path = \"names/yob%d.txt\" % year\n    frame = pd.read_csv(path, names=columns)\n    frame[\"year\"] = year\n    pieces.append(frame)\n\nnames = pd.concat(pieces, ignore_index=True)\n\n\"\"\"\nIn [263]: names[:5]\nOut[263]: \n        name sex  births  year\n0       Mary   F    7065  1880\n1       Anna   F    2604  1880\n2       Emma   F    2003  1880\n3  Elizabeth   F    1939  1880\n4     Minnie   F    1746  1880\n\nIn [264]: names[-5:]\nOut[264]: \n              name sex  births  year\n1758725      Zylin   M       5  2012\n1758726     Zymari   M       5  2012\n1758727      Zyrin   M       5  2012\n1758728      Zyrus   M       5  2012\n1758729  Zytaevius   M       5  2012\n\"\"\"\n```\n\n\u307b\u3093\u3067\u30c7\u30fc\u30bf\u306e\u6574\u7406\n\n```py\n#\u51fa\u751f\u5e74\u5ea6\u3068\u6027\u5225\u3067\u51fa\u751f\u6570\u3092\u30af\u30ed\u30b9\u96c6\u8a08\ntotal_births = names.pivot_table(\"births\", rows=\"year\", cols=\"sex\", aggfunc=sum)\n\n\"\"\"\nIn [269]: total_births.tail()\nOut[269]: \nsex         F        M\nyear                  \n2008  1886109  2035075\n2009  1831382  1977632\n2010  1770632  1911572\n2011  1750078  1889557\n2012  1743626  1877705\n\"\"\"\n\n#\u30d7\u30ed\u30c3\u30c6\u30a3\u30f3\u30b0\ntotal_births.plot(title=\"Total births by sex and year\")\n```\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-4.png)\n\n```py\ndef add_prop(group):\n    #Integer division floors\n    births = group.births.astype(float)\n    group[\"prop\"] = births / births.sum()\n    return group\n\n#\u305d\u306e\u5e74\u306e\u6027\u5225\u5225\u51fa\u751f\u4eba\u6570\u306b\u5bfe\u3057\u3066\u305d\u306e\u540d\u524d\u306e\u5272\u5408\u3092\u793a\u3059column\u3092\u8ffd\u52a0\nnames = names.groupby([\"year\", \"sex\"]).apply(add_prop)\n#\u8aa4\u5dee\u3092\u542b\u3081\u305f\u5408\u8a08\u304c1\u304b\u3069\u3046\u304b\u3067\u78ba\u304b\u3089\u3057\u3055\u3092\u78ba\u8a8d\n\"\"\"\nIn [305]: np.allclose(names.groupby([\"year\",\"sex\"]).prop.sum(),1)\nOut[305]: True\n\"\"\"\n\n#\u540d\u524d\u30fb\u6027\u5225\u3054\u3068\u306b\u4eba\u6c17\u306e\u540d\u524d\u30921000\u500b\u3068\u3063\u3066\u304f\u308b\npieces = []\nfor year_sex, group in names.groupby([\"year\", \"sex\"]):\n    pieces.append(group.sort_index(by=\"births\", ascending=False)[:1000])\ntop1000 = pd.concat(pieces, ignore_index=True)\n\"\"\"\nIn [356]: top1000\nOut[356]: \n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 265877 entries, 0 to 265876\nData columns:\nname      265877  non-null values\nsex       265877  non-null values\nbirths    265877  non-null values\nyear      265877  non-null values\nprop      265877  non-null values\ndtypes: float64(1), int64(2), object(2)\n\"\"\"\n```\n\u3053\u308c\u3067\u4eba\u6c17\u306e\u540d\u524d\u30c7\u30fc\u30bf\u304c\u3068\u308c\u3066\u304d\u305f\u306e\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u89e3\u6790\u3092\u3059\u308b\u3002\n###Analyzing Naming Trends\n\n```py\n#\u7537\u5973\u5225\u30c7\u30fc\u30bf\nboys = top1000[top1000.sex == \"M\"]\ngirls = top1000[top1000.sex == \"F\"]\n#\u5e74\u5ea6\u30fb\u6027\u5225\u5225\u51fa\u751f\u6570\ntotal_births = top1000.pivot_table(\"births\", rows=\"year\", cols=\"name\", aggfunc=sum)\nsubset = total_births[[\"John\", \"Harry\", \"Mary\", \"Marilyn\"]]\nsubset.plot(subplots=False, figsize=(12,10), grid=False, title=\"Number of births per year\")\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-6.png)\n####Measuring the increase in naming diversity\n\u89aa\u306f\u5b50\u3069\u3082\u306b\u4e00\u822c\u7684\u306a\u540d\u524d\u3092\u4ed8\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u4eee\u8aac\u3092\u8abf\u3079\u308b\u3002\n\n```py\n#\u5e74\u5ea6\u5225\u306btop1000\u306e\u540d\u524d\u304c\u305d\u306e\u5e74\u306e\u4f55\u30d1\u30fc\u30bb\u30f3\u30c8\u3092\u5360\u3081\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\ntable = top1000.pivot_table(\"prop\", rows=\"year\", cols=\"sex\", aggfunc=sum)\ntable.plot(title=\"Sum of table1000.prop by year and sex\", yticks=np.linspace(0,1.2,13), xticks=range(1880,2020,10))\n```\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-7.png)\n\u78ba\u304b\u306btop1000\u304c\u5360\u3081\u308b\u5272\u5408\u304c\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u3055\u3066\u3053\u3053\u3067\u3001\u3042\u308b\u5e74\u5ea6\u306b\u3064\u3044\u3066\u4e0a\u4f4d\u4f55\u7a2e\u985e\u307e\u3067\u306e\u540d\u524d\u304c\u305d\u306e\u5e74\u306e\u540d\u524d\u306e\u5272\u5408\u306e\u534a\u5206\u3092\u5360\u3081\u3066\u3044\u308b\u304b\u6c17\u306b\u306a\u3063\u3066\u304f\u308b\u3002\n2012\u5e74\u30681900\u5e74\u306e\u7537\u6027\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u898b\u3066\u307f\u308b\u3002\n\n```py\n#\u307e\u305a2012\u5e74\u306e\u30c7\u30fc\u30bf\ndf = boys[boys.year == 2012]\nprop_cumsum = df.sort_index(by=\"prop\", ascending=False).prop.cumsum()\n\"\"\"\nIn [398]: prop_cumsum[:10]\nOut[398]: \n264877    0.010065\n264878    0.020107\n264879    0.029452\n264880    0.038613\n264881    0.047520\n264882    0.056407\n264883    0.064935\n264884    0.073454\n264885    0.081498\n264886    0.089369\n\"\"\"\n#prop\u306e\u5024\u304c\u5927\u304d\u3044\u9806\u306b\u52a0\u7b97\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\n#\u3053\u306e\u5024\u304c0.5\u3092\u8d85\u3048\u308b\u3068\u3053\u308d\u3092\u63a2\u305b\u3070\u826f\u3044\uff08searchsorted())\n\"\"\"\nIn [399]: prop_cumsum.searchsorted(0.5)\nOut[399]: 123\n\"\"\"\n\n#\u6b21\u306b1990\u5e74\u306e\u30c7\u30fc\u30bf\ndf = boys[boys.year == 1990]\nin1990 = df.sort_index(by=\"prop\", ascending=False).prop.cumsum()\nin1990.searchsorted(0.5) + 1\n\"\"\"\nIn [402]: in1990.searchsorted(0.5) + 1\nOut[402]: 45\n\"\"\"\n```\n\n\u3053\u308c\u306b\u3088\u308a2012\u5e74\u306f124\u7a2e\u985e\u306e\u540d\u524d\u304c\u4e0a\u4f4d50%\u3092\u5360\u3081\u3066\u3044\u308b\u304c\u30011990\u5e74\u306f\u308f\u305a\u304b45\u7a2e\u985e\u304c\u4e0a\u4f4d50%\u3092\u5360\u3081\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u4ed6\u306e\u5e74\u306b\u3064\u3044\u3066\u3082\u898b\u3066\u3086\u304f\u3002\n\n```py\ndef get_quantile_count(group, q=0.5):\n    group = group.sort_index(by=\"prop\", ascending=False)\n    return group.prop.cumsum().searchsorted(q) + 1\n\ndiversity = top1000.groupby([\"year\", \"sex\"]).apply(get_quantile_count)\ndiversity = diversity.unstack(\"sex\")\ndiversity.plot(title=\"Number of popular names in top 50%\")\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-8.png)\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u7537\u5973\u5171\u306b\u540d\u524d\u306e\u30d0\u30e9\u30a8\u30c6\u30a3\u306f\u5897\u3048\u3066\u3044\u308b\u3002\n\n###The \"Last letter\" Revolution\n\u7537\u6027\u306e\u540d\u524d\u306elast letter\u5206\u5e03\u306f\u3053\u3053100\u5e74\u3067\u79fb\u308a\u5909\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u7814\u7a76\u304c\u306a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u78ba\u304b\u3081\u308b\u3002\n\n```py\nget_last_letter = lambda x: x[-1]\nlast_letters = names.name.map(get_last_letter)\nlast_letters.name = \"last_letter\"\ntable = names.pivot_table(\"births\", rows=last_letters, cols=[\"sex\", \"year\"], aggfunc=sum)\nsubtable = table.reindex(columns=[1910,1960,2010],level=\"year\")\n\"\"\"\nIn [54]: subtable.head()\nOut[54]: \nsex               F                      M                \nyear           1910    1960    2010   1910    1960    2010\nlast_letter                                               \na            108395  691251  675059    977    5207   28772\nb               NaN     694     454    411    3914   39149\nc                 5      49     953    482   15472   23279\nd              6751    3732    2633  22114  262140   44690\ne            133592  435050  315891  28662  178814  129916\"\n\"\"\"\n#\u6b63\u898f\u5316\n\"\"\"\nIn [55]: subtable.sum()\nOut[55]: \nsex  year\nF    1910     396482\n     1960    2022126\n     2010    1770632\nM    1910     194214\n     1960    2132733\n     2010    1911572\ndtype: float64\n\"\"\"\nletter_prop = subtable / subtable.sum().astype(float)\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-9.png)\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u7537\u6027\u306en\u306f\u660e\u3089\u304b\u306b\u8fd1\u5e74\u5897\u3048\u3066\u3044\u308b\u3002\n\n```py\nletter_prop = table / table.sum().astype(float)\ndny_ts = letter_prop.ix[[\"d\",\"n\",\"y\"],\"M\"].T\n\"\"\"\nIn [68]: dny_ts.head()\nOut[68]: \n             d         n         y\nyear                              \n1880  0.083057  0.153216  0.075762\n1881  0.083249  0.153207  0.077452\n1882  0.085340  0.149560  0.077537\n1883  0.084058  0.151649  0.079146\n1884  0.086120  0.149915  0.080405\n\"\"\"\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-10.png)\n\n###Boy names that became girl names (and vice versa)\n\u4ed6\u306e\u9762\u767d\u3044\u6d41\u884c\u3068\u3057\u3066\u306f\u6614\u3068\u4eca\u3067\u306f\u6027\u5225\u306e\u9055\u3046\u540d\u524d\u304c\u3042\u308b\u3053\u3068\u3060\u3002\n\u305f\u3068\u3048\u3070Lesley\u3084Leslie\u306e\u3088\u3046\u306a\u3002\n\n```py\nall_names = top1000.name.unique()\nmask = np.array([\"lesl\" in x.lower() for x in all_names])\nlesley_like = all_names[mask]\n\"\"\"\nIn [75]: lesley_like\nOut[75]: array(['Leslie', 'Lesley', 'Leslee', 'Lesli', 'Lesly'], dtype=object)\n\"\"\"\n\nfiltered = top1000[top1000.name.isin(lesley_like)]\n\"\"\"\nIn [79]: filtered.groupby(\"name\").births.sum()\nOut[79]: \nname\nLeslee       993\nLesley     35028\nLesli        929\nLeslie    372981\nLesly      10839\nName: births, dtype: int64\n\"\"\"\n\ntable = filtered.pivot_table(\"births\", rows=\"year\",cols=\"sex\",aggfunc=\"sum\")\ntable = table.div(table.sum(1),axis=0)\n\"\"\"\nIn [82]: table.tail()\nOut[82]: \nsex   F   Mask\nyear       \n2008  1 NaN\n2009  1 NaN\n2010  1 NaN\n2011  1 NaN\n2012  1 NaN\n\"\"\"\ntable.plot(style={\"M\":\"k-\",\"F\":\"k--\"})\n```\n\n![](https://dl.dropboxusercontent.com/u/1990306/Qiita/PfDACh2-11.png)\n"}