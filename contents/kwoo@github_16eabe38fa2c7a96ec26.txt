{"context": " More than 1 year has passed since last update.TeX\u6587\u66f8\u306bmendex\u7d22\u5f15\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u3066\u3044\u304f\u4f5c\u696d\u304c\u624b\u5165\u529b\u3067\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u3001\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u65b9\u6cd5\u3092\u63a2\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u3053\u3092\u8aad\u3080\u9650\u308a\u3001\u3059\u3050\u4f7f\u3048\u308b\u65b9\u6cd5\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u7c21\u5358\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092ruby\u3067\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u3044\u65b9\u306e\u4f8b\n\n\u6e96\u5099\n\u307e\u305a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u3066\u3044\u306a\u3044TeX\u6587\u66f8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nmain.tex\n\\documentclass[11pt,a4paper]{jsarticle}\n\\usepackage{makeidx}\n\\makeindex\n\\begin{document}\n\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u71b1\u529b\u5b66\u3067\u7528\u3044\u3089\u308c\u308b\u793a\u5f37\u6027\u72b6\u614b\u91cf\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u30a2\u30e1\u30ea\u30ab\u306e\u5316\u5b66\u8005\u30a6\u30a3\u30e9\u30fc\u30c9\u30fb\u30ae\u30d6\u30ba\u306b\u3088\u308a\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3067\u3042\u308b\u3002 \u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u7269\u8cea\u306e\u591a\u5be1\u306b\u3088\u308a\u7cfb\u304c\u6f5c\u5728\u7684\u306b\u6301\u3064\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5927\u304d\u3055\u306e\u5c3a\u5ea6\u3068\u306a\u308b\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001\u534a\u900f\u819c\u3067\u9694\u3066\u3089\u308c\u305f\u4e8c\u3064\u306e\u7cfb\u306e\u9593\u306b\u6fc3\u5ea6\u5dee\u304c\u6709\u3063\u305f\u5834\u5408\u3001\u6d78\u900f\u5727\u304c\u751f\u3058\u4ed5\u4e8b\u3092\u70ba\u3059\u4e8b\u304c\u51fa\u6765\u308b\u3002\u7269\u8cea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7cfb\u306f\u6f5c\u5728\u7684\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6301\u3064\u3002 \u305d\u306e\u7cfb\u306b\u542b\u307e\u308c\u308b\u3042\u308b\u6210\u5206\u306e\u5358\u4f4d\u7269\u8cea\u91cf\u3042\u305f\u308a\u306e\u30ae\u30d6\u30b9\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u305d\u306e\u6210\u5206\u306e\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306b\u76f8\u5f53\u3059\u308b\u3002\n\u793a\u5f37\u6027\u72b6\u614b\u91cf\u3067\u3042\u308b\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3068\u793a\u91cf\u6027\u72b6\u614b\u91cf\u3067\u3042\u308b\u7269\u8cea\u91cf\u306f\u4e92\u3044\u306b\u5171\u5f79\n\u306a\u95a2\u4fc2\u3067\u3042\u308a\u3001\u639b\u3051\u5408\u308f\u305b\u308b\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u6b21\u5143\u3068\u306a\u308b\u3002\n\\printindex\n\\end{document}\n\n\n\u305d\u308c\u304b\u3089\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u305f\u3044\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u3064\u304f\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\nindexlist\n\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf\n\u3057\u308a\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u91cf\u6027\u72b6\u614b\u91cf\n\u3057\u3093\u3068\u3046\u3042\u3064@\u6d78\u900f\u5727\n\n\n\u3042\u3068\u306f\u5f8c\u8ff0\u306eaddindex.rb\u3092\u7528\u610f\u3057\u3066\u6e96\u5099\u306f\u7d42\u308f\u308a\u3067\u3059\u3002\n\n\u5b9f\u884c\n\u7d22\u5f15\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306e\u3068\u304a\u308a\u3001addindex.rb\u306b\u5bfe\u3057\u3066\u3001\u7b2c1\u5f15\u6570\u306bTeX\u30d5\u30a1\u30a4\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u305f\u3044\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002\n$ ruby addindex.rb main.tex indexlist\n\u3059\u308b\u3068\u3001\n\nmain.tex\n\\documentclass[11pt,a4paper]{jsarticle}\n\\usepackage{makeidx}\n\\makeindex\n\\begin{document}\n\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u71b1\u529b\u5b66\u3067\u7528\u3044\u3089\u308c\u308b\u793a\u5f37\u6027\u72b6\u614b\u91cf<span class='marker'>\\index{\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf}</span>\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u30a2\u30e1\u30ea\u30ab\u306e\u5316\u5b66\u8005\u30a6\u30a3\u30e9\u30fc\u30c9\u30fb\u30ae\u30d6\u30ba\u306b\u3088\u308a\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3067\u3042\u308b\u3002 \u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u7269\u8cea\u306e\u591a\u5be1\u306b\u3088\u308a\u7cfb\u304c\u6f5c\u5728\u7684\u306b\u6301\u3064\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5927\u304d\u3055\u306e\u5c3a\u5ea6\u3068\u306a\u308b\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001\u534a\u900f\u819c\u3067\u9694\u3066\u3089\u308c\u305f\u4e8c\u3064\u306e\u7cfb\u306e\u9593\u306b\u6fc3\u5ea6\u5dee\u304c\u6709\u3063\u305f\u5834\u5408\u3001\u6d78\u900f\u5727\\index{\u3057\u3093\u3068\u3046\u3042\u3064@\u6d78\u900f\u5727}\u304c\u751f\u3058\u4ed5\u4e8b\u3092\u70ba\u3059\u4e8b\u304c\u51fa\u6765\u308b\u3002\u7269\u8cea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7cfb\u306f\u6f5c\u5728\u7684\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6301\u3064\u3002 \u305d\u306e\u7cfb\u306b\u542b\u307e\u308c\u308b\u3042\u308b\u6210\u5206\u306e\u5358\u4f4d\u7269\u8cea\u91cf\u3042\u305f\u308a\u306e\u30ae\u30d6\u30b9\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u305d\u306e\u6210\u5206\u306e\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306b\u76f8\u5f53\u3059\u308b\u3002\n\u793a\u5f37\u6027\u72b6\u614b\u91cf\\index{\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf}\u3067\u3042\u308b\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3068\u793a\u91cf\u6027\u72b6\u614b\u91cf\\index{\u3057\u308a\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u91cf\u6027\u72b6\u614b\u91cf}\u3067\u3042\u308b\u7269\u8cea\u91cf\u306f\u4e92\u3044\u306b\u5171\u5f79\n\u306a\u95a2\u4fc2\u3067\u3042\u308a\u3001\u639b\u3051\u5408\u308f\u305b\u308b\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u6b21\u5143\u3068\u306a\u308b\u3002\n\\printindex\n\\end{document}\n\n\n\u306e\u3088\u3046\u306b\u3001main.tex\u304c\u66f8\u304d\u63db\u308f\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001indexlist\u3067\u6307\u5b9a\u3057\u305f\u5358\u8a9e\u304c\u672c\u6587\u4e2d\u3067\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u306e\u76f4\u5f8c\u306b\\index{}\u30b3\u30de\u30f3\u30c9\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002TeX\u30b3\u30de\u30f3\u30c9\u3084\u6587\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u3069\u306b\u5bfe\u3057\u3066\u8aa4\u3063\u3066\\index{}\u3092\u3064\u3051\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u4ed6\u306e\u88dc\u52a9\u6a5f\u80fd\u3068\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305aTeX\u306e\u5b50\u30d5\u30a1\u30a4\u30eb(\\include)\u3082\u81ea\u52d5\u3067\u7de8\u96c6\u3059\u308b\u5bfe\u8c61\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n \u672c\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u524d\u306bTeX\u6587\u66f8\u306e\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u5fc5\u305a\u3068\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\naddindex.rb\u306e\u4e2d\u8eab(2015.7.15\u66f4\u65b0)\nString\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066TeX\u30af\u30e9\u30b9\u3092\u3064\u304f\u3063\u3066\u3001\u305d\u3053\u306b\u3044\u308d\u3044\u308d\u30e1\u30bd\u30c3\u30c9\u3092\u305f\u3066\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3064\u3051\u3066\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\uff08addindex.rb\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\naddindex.rb\n#!/usr/bin/ruby\n# encoding: utf-8\n\nclass Operand < Hash\n  def initialize(str)\n    @str = str\n    self.replace generate\n    super\n  end\n\n  private\n\n  def generate\n    all_blocks = escape_blocks.product([false]) + non_escape_blocks.product([true])\n    all_blocks = all_blocks.sort do |(k1, v1), (k2, v2)| k1 <=> k2 end\n    return Hash[*all_blocks.flatten(1)] if valid?(all_blocks)\n  end\n\n  def valid?(blocks)\n    blocks.each_cons(2) do |h1,h2|\n      false if h1[0][0]+h1[0][1] != h2[0][0]\n    end\n    false if blocks[-1][0][0] + blocks[-1][0][1] != @str.length\n    true\n  end\n\n  def escape_blocks # escape range defined by [idx, len]\n    escape = [[0,0]]\n    begin\n      escape_each = minimum_match(@str[escape[-1][0]+escape[-1][1],@str.length])\n      break if escape_each.compact.size == 0\n      escape_each[0] = escape_each[0] + escape[-1][0]+escape[-1][1]\n      escape << escape_each\n    end while escape[-1][0]+escape[-1][1] < @str.length \n    escape.shift\n    escape\n  end\n\n  def non_escape_blocks # non escape range defined by [idx, len]\n    escape = escape_blocks\n    non_escape = [[0,escape[0][0]]]\n    escape.each_cons(2) do |h1,h2|\n      non_escape << [h1[0]+h1[1], h2[0]-(h1[0]+h1[1])]\n    end\n    non_escape << [escape[-1][0]+escape[-1][1], @str.length-(escape[-1][0]+escape[-1][1])]\n    non_escape\n  end\n\n  def minimum_match(str)\n    def match_idx_len(rx,str)\n      match_idx = rx =~ str\n      match_len = $&.length unless $&.nil?\n      [match_idx,match_len]\n    end\n\n    rx_escape1 = /\\\\\\w*?(?<paren>\\{(?:[^\\{\\}]|\\g<paren>)*\\})/ # escape for \\***{***}\n    rx_escape2 = /[\\$].*?[\\$]/ # escape for $***$\n    rx_escape3 = /(?<paren>\\{(?:[^\\{\\}]|\\g<paren>)*\\})/  # escape for {}\n    matches = [rx_escape1,rx_escape2,rx_escape3].map do |rx| match_idx_len(rx,str) end\n    case matches.transpose[0].compact.min\n    when matches.transpose[0][0] then matches[0]\n    when matches.transpose[0][1] then matches[1]\n    when matches.transpose[0][2] then matches[2]\n    end\n  end\nend\n\nclass TeX < String\n  def initialize(str)\n    super\n  end\n\n  def child\n    lines.flat_map do |line| $2 + \".tex\" if line[/(?!^%)(\\\\include\\{)(.+?)(\\})/,2] end.compact\n  end\n\n  def parent?\n    match(/\\\\begin\\{document\\}/)\n  end\n\n  def indexing!(index)\n    list = index_entries(index)\n    revert_indexing!(index)\n    rx_adder = Regexp.union(list.keys)\n    str = Operand.new(self).reduce('') do |str,(k,v)|\n      v ?  str << self[k[0],k[1]].gsub(rx_adder, list) : str << self[k[0],k[1]]\n    end\n    self.replace str\n  end\n\n  def revert_indexing!(index)\n    list = index_entries(index)\n    rx_subtracter = Regexp.union(list.values)\n    gsub!(rx_subtracter, list.invert)\n  end\n\n  private\n\n  def index_entries(str)\n   list = str.lines.flat_map do |line|\n      word = line.include?(\"@\") ? line.split(\"@\")[1].chomp : line.chomp\n      command = word.chomp+'\\index{'+line.chomp+'}'\n      [word, command]\n    end\n    Hash[*list]\n  end\nend\n\n# load TeX file\ntex_file = File.open(ARGV[0], \"r+:UTF-8\")\ntex = TeX.new(tex_file.read)\n# load index description file \nindex = IO.read(ARGV[1])\n\n# For main TeX file\ntex.indexing!(index)\ntex_file.rewind\ntex_file.write(tex)\ntex_file.close\n\n# For child TeX file(s)\nif tex.parent? then\n  print \"\\n===CHILDREN===\\n\"\n  tex.child.each do |file_path|\n    full_file_path = File.dirname(ARGV[0]) + \"/\" + file_path\n    next unless File.exist?(full_file_path)\n    puts \"adding indices in \" + full_file_path\n    File.open(full_file_path, \"r+:UTF-8\") do |tex_file|\n      tex_child = TeX.new(tex_file.read) \n      tex_child.indexing!(index)\n      tex_file.rewind\n      tex_file.write(tex_child)\n    end\n  end\nend\n\n\n\nTeX\u6587\u66f8\u306bmendex\u7d22\u5f15\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u3066\u3044\u304f\u4f5c\u696d\u304c\u624b\u5165\u529b\u3067\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u3001\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u65b9\u6cd5\u3092\u63a2\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001[\u3053\u3053](http://www.latex-community.org/forum/viewtopic.php?f=51&t=3679)\u3092\u8aad\u3080\u9650\u308a\u3001\u3059\u3050\u4f7f\u3048\u308b\u65b9\u6cd5\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u7c21\u5358\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092ruby\u3067\u3064\u304f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n# \u4f7f\u3044\u65b9\u306e\u4f8b\n## \u6e96\u5099\n\u307e\u305a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u3066\u3044\u306a\u3044TeX\u6587\u66f8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```tex:main.tex\n\\documentclass[11pt,a4paper]{jsarticle}\n\\usepackage{makeidx}\n\\makeindex\n\\begin{document}\n\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u71b1\u529b\u5b66\u3067\u7528\u3044\u3089\u308c\u308b\u793a\u5f37\u6027\u72b6\u614b\u91cf\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u30a2\u30e1\u30ea\u30ab\u306e\u5316\u5b66\u8005\u30a6\u30a3\u30e9\u30fc\u30c9\u30fb\u30ae\u30d6\u30ba\u306b\u3088\u308a\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3067\u3042\u308b\u3002 \u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u7269\u8cea\u306e\u591a\u5be1\u306b\u3088\u308a\u7cfb\u304c\u6f5c\u5728\u7684\u306b\u6301\u3064\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5927\u304d\u3055\u306e\u5c3a\u5ea6\u3068\u306a\u308b\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001\u534a\u900f\u819c\u3067\u9694\u3066\u3089\u308c\u305f\u4e8c\u3064\u306e\u7cfb\u306e\u9593\u306b\u6fc3\u5ea6\u5dee\u304c\u6709\u3063\u305f\u5834\u5408\u3001\u6d78\u900f\u5727\u304c\u751f\u3058\u4ed5\u4e8b\u3092\u70ba\u3059\u4e8b\u304c\u51fa\u6765\u308b\u3002\u7269\u8cea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7cfb\u306f\u6f5c\u5728\u7684\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6301\u3064\u3002 \u305d\u306e\u7cfb\u306b\u542b\u307e\u308c\u308b\u3042\u308b\u6210\u5206\u306e\u5358\u4f4d\u7269\u8cea\u91cf\u3042\u305f\u308a\u306e\u30ae\u30d6\u30b9\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u305d\u306e\u6210\u5206\u306e\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306b\u76f8\u5f53\u3059\u308b\u3002\n\u793a\u5f37\u6027\u72b6\u614b\u91cf\u3067\u3042\u308b\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3068\u793a\u91cf\u6027\u72b6\u614b\u91cf\u3067\u3042\u308b\u7269\u8cea\u91cf\u306f\u4e92\u3044\u306b\u5171\u5f79\n\u306a\u95a2\u4fc2\u3067\u3042\u308a\u3001\u639b\u3051\u5408\u308f\u305b\u308b\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u6b21\u5143\u3068\u306a\u308b\u3002\n\\printindex\n\\end{document}\n```\n\n\u305d\u308c\u304b\u3089\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u305f\u3044\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u3064\u304f\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```tex:indexlist\n\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf\n\u3057\u308a\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u91cf\u6027\u72b6\u614b\u91cf\n\u3057\u3093\u3068\u3046\u3042\u3064@\u6d78\u900f\u5727\n```\n\n\u3042\u3068\u306f\u5f8c\u8ff0\u306eaddindex.rb\u3092\u7528\u610f\u3057\u3066\u6e96\u5099\u306f\u7d42\u308f\u308a\u3067\u3059\u3002\n## \u5b9f\u884c\n\n\u7d22\u5f15\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306e\u3068\u304a\u308a\u3001addindex.rb\u306b\u5bfe\u3057\u3066\u3001\u7b2c1\u5f15\u6570\u306bTeX\u30d5\u30a1\u30a4\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u305f\u3044\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002\n`$ ruby addindex.rb main.tex indexlist`\n\u3059\u308b\u3068\u3001\n\n```tex:main.tex\n\\documentclass[11pt,a4paper]{jsarticle}\n\\usepackage{makeidx}\n\\makeindex\n\\begin{document}\n\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u71b1\u529b\u5b66\u3067\u7528\u3044\u3089\u308c\u308b\u793a\u5f37\u6027\u72b6\u614b\u91cf<span class='marker'>\\index{\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf}</span>\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u30a2\u30e1\u30ea\u30ab\u306e\u5316\u5b66\u8005\u30a6\u30a3\u30e9\u30fc\u30c9\u30fb\u30ae\u30d6\u30ba\u306b\u3088\u308a\u5c0e\u5165\u3055\u308c\u305f\u6982\u5ff5\u3067\u3042\u308b\u3002 \u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306f\u3001\u7269\u8cea\u306e\u591a\u5be1\u306b\u3088\u308a\u7cfb\u304c\u6f5c\u5728\u7684\u306b\u6301\u3064\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u5927\u304d\u3055\u306e\u5c3a\u5ea6\u3068\u306a\u308b\u91cf\u3067\u3042\u308b\u3002 \u4f8b\u3048\u3070\u3001\u534a\u900f\u819c\u3067\u9694\u3066\u3089\u308c\u305f\u4e8c\u3064\u306e\u7cfb\u306e\u9593\u306b\u6fc3\u5ea6\u5dee\u304c\u6709\u3063\u305f\u5834\u5408\u3001\u6d78\u900f\u5727\\index{\u3057\u3093\u3068\u3046\u3042\u3064@\u6d78\u900f\u5727}\u304c\u751f\u3058\u4ed5\u4e8b\u3092\u70ba\u3059\u4e8b\u304c\u51fa\u6765\u308b\u3002\u7269\u8cea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u7cfb\u306f\u6f5c\u5728\u7684\u306b\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6301\u3064\u3002 \u305d\u306e\u7cfb\u306b\u542b\u307e\u308c\u308b\u3042\u308b\u6210\u5206\u306e\u5358\u4f4d\u7269\u8cea\u91cf\u3042\u305f\u308a\u306e\u30ae\u30d6\u30b9\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u305d\u306e\u6210\u5206\u306e\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u306b\u76f8\u5f53\u3059\u308b\u3002\n\u793a\u5f37\u6027\u72b6\u614b\u91cf\\index{\u3057\u304d\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u5f37\u6027\u72b6\u614b\u91cf}\u3067\u3042\u308b\u5316\u5b66\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3068\u793a\u91cf\u6027\u72b6\u614b\u91cf\\index{\u3057\u308a\u3087\u3046\u305b\u3044\u3058\u3087\u3046\u305f\u3044\u308a\u3087\u3046@\u793a\u91cf\u6027\u72b6\u614b\u91cf}\u3067\u3042\u308b\u7269\u8cea\u91cf\u306f\u4e92\u3044\u306b\u5171\u5f79\n\u306a\u95a2\u4fc2\u3067\u3042\u308a\u3001\u639b\u3051\u5408\u308f\u305b\u308b\u3068\u30a8\u30cd\u30eb\u30ae\u30fc\u306e\u6b21\u5143\u3068\u306a\u308b\u3002\n\\printindex\n\\end{document}\n```\n\n\u306e\u3088\u3046\u306b\u3001main.tex\u304c\u66f8\u304d\u63db\u308f\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001indexlist\u3067\u6307\u5b9a\u3057\u305f\u5358\u8a9e\u304c\u672c\u6587\u4e2d\u3067\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u306e\u76f4\u5f8c\u306b`\\index{}`\u30b3\u30de\u30f3\u30c9\u304c\u81ea\u52d5\u3067\u633f\u5165\u3055\u308c\u307e\u3059\u3002TeX\u30b3\u30de\u30f3\u30c9\u3084\u6587\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306a\u3069\u306b\u5bfe\u3057\u3066\u8aa4\u3063\u3066`\\index{}`\u3092\u3064\u3051\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u4ed6\u306e\u88dc\u52a9\u6a5f\u80fd\u3068\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305aTeX\u306e\u5b50\u30d5\u30a1\u30a4\u30eb(\\include)\u3082\u81ea\u52d5\u3067\u7de8\u96c6\u3059\u308b\u5bfe\u8c61\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n:exclamation: **\u672c\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u524d\u306bTeX\u6587\u66f8\u306e\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u5fc5\u305a\u3068\u3063\u3066\u304f\u3060\u3055\u3044\u3002**\n\n# addindex.rb\u306e\u4e2d\u8eab(2015.7.15\u66f4\u65b0)\n\nString\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066TeX\u30af\u30e9\u30b9\u3092\u3064\u304f\u3063\u3066\u3001\u305d\u3053\u306b\u3044\u308d\u3044\u308d\u30e1\u30bd\u30c3\u30c9\u3092\u305f\u3066\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u8cbc\u308a\u4ed8\u3051\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3064\u3051\u3066\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\uff08addindex.rb\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n\n```rb:addindex.rb\n#!/usr/bin/ruby\n# encoding: utf-8\n\nclass Operand < Hash\n  def initialize(str)\n    @str = str\n    self.replace generate\n    super\n  end\n\n  private\n  \n  def generate\n    all_blocks = escape_blocks.product([false]) + non_escape_blocks.product([true])\n    all_blocks = all_blocks.sort do |(k1, v1), (k2, v2)| k1 <=> k2 end\n    return Hash[*all_blocks.flatten(1)] if valid?(all_blocks)\n  end\n  \n  def valid?(blocks)\n    blocks.each_cons(2) do |h1,h2|\n      false if h1[0][0]+h1[0][1] != h2[0][0]\n    end\n    false if blocks[-1][0][0] + blocks[-1][0][1] != @str.length\n    true\n  end\n\n  def escape_blocks # escape range defined by [idx, len]\n    escape = [[0,0]]\n    begin\n      escape_each = minimum_match(@str[escape[-1][0]+escape[-1][1],@str.length])\n      break if escape_each.compact.size == 0\n      escape_each[0] = escape_each[0] + escape[-1][0]+escape[-1][1]\n      escape << escape_each\n    end while escape[-1][0]+escape[-1][1] < @str.length \n    escape.shift\n    escape\n  end\n  \n  def non_escape_blocks # non escape range defined by [idx, len]\n    escape = escape_blocks\n    non_escape = [[0,escape[0][0]]]\n    escape.each_cons(2) do |h1,h2|\n      non_escape << [h1[0]+h1[1], h2[0]-(h1[0]+h1[1])]\n    end\n    non_escape << [escape[-1][0]+escape[-1][1], @str.length-(escape[-1][0]+escape[-1][1])]\n    non_escape\n  end\n\n  def minimum_match(str)\n    def match_idx_len(rx,str)\n      match_idx = rx =~ str\n      match_len = $&.length unless $&.nil?\n      [match_idx,match_len]\n    end\n    \n    rx_escape1 = /\\\\\\w*?(?<paren>\\{(?:[^\\{\\}]|\\g<paren>)*\\})/ # escape for \\***{***}\n    rx_escape2 = /[\\$].*?[\\$]/ # escape for $***$\n    rx_escape3 = /(?<paren>\\{(?:[^\\{\\}]|\\g<paren>)*\\})/  # escape for {}\n    matches = [rx_escape1,rx_escape2,rx_escape3].map do |rx| match_idx_len(rx,str) end\n    case matches.transpose[0].compact.min\n    when matches.transpose[0][0] then matches[0]\n    when matches.transpose[0][1] then matches[1]\n    when matches.transpose[0][2] then matches[2]\n    end\n  end\nend\n\nclass TeX < String\n  def initialize(str)\n    super\n  end\n\n  def child\n    lines.flat_map do |line| $2 + \".tex\" if line[/(?!^%)(\\\\include\\{)(.+?)(\\})/,2] end.compact\n  end\n\n  def parent?\n    match(/\\\\begin\\{document\\}/)\n  end\n\n  def indexing!(index)\n    list = index_entries(index)\n    revert_indexing!(index)\n    rx_adder = Regexp.union(list.keys)\n    str = Operand.new(self).reduce('') do |str,(k,v)|\n      v ?  str << self[k[0],k[1]].gsub(rx_adder, list) : str << self[k[0],k[1]]\n    end\n    self.replace str\n  end\n\n  def revert_indexing!(index)\n    list = index_entries(index)\n    rx_subtracter = Regexp.union(list.values)\n    gsub!(rx_subtracter, list.invert)\n  end\n\n  private\n  \n  def index_entries(str)\n   list = str.lines.flat_map do |line|\n      word = line.include?(\"@\") ? line.split(\"@\")[1].chomp : line.chomp\n      command = word.chomp+'\\index{'+line.chomp+'}'\n      [word, command]\n    end\n    Hash[*list]\n  end\nend\n\n# load TeX file\ntex_file = File.open(ARGV[0], \"r+:UTF-8\")\ntex = TeX.new(tex_file.read)\n# load index description file \nindex = IO.read(ARGV[1])\n\n# For main TeX file\ntex.indexing!(index)\ntex_file.rewind\ntex_file.write(tex)\ntex_file.close\n\n# For child TeX file(s)\nif tex.parent? then\n  print \"\\n===CHILDREN===\\n\"\n  tex.child.each do |file_path|\n    full_file_path = File.dirname(ARGV[0]) + \"/\" + file_path\n    next unless File.exist?(full_file_path)\n    puts \"adding indices in \" + full_file_path\n    File.open(full_file_path, \"r+:UTF-8\") do |tex_file|\n      tex_child = TeX.new(tex_file.read) \n      tex_child.indexing!(index)\n      tex_file.rewind\n      tex_file.write(tex_child)\n    end\n  end\nend\n\n```\n", "tags": ["Ruby", "LaTeX"]}