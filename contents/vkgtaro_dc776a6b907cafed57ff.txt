{"context": " More than 1 year has passed since last update.IRC \u3067\u306f redmine \u306e\u66f4\u65b0\u3092 ikachan \u306b\u6295\u3052\u3066\u901a\u77e5\u3057\u305f\u308a\u3057\u3066\u308b\u3093\u3060\u3051\u3069\u3001 hipchat \u3067\u3082\u6d41\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3044\u4e45\u3005\u306b python \u3067 script \u3092\u66f8\u3044\u305f\u3002\nHipChat \u306e API \u3092\u305f\u305f\u304f library \u306f\u516c\u5f0f\u3067\u307e\u3068\u307e\u3063\u3066\u308b\u3002\npython \u306e\u306f PyPI \u306b\u3042\u308b\u306e\u3067\u3001 pip install python-hipchat \u3067 install \u3067\u304d\u308b\u3002\nRSS \u3067 parse \u3067\u304d\u308b\u3082\u306e\u306a\u3089\u4f55\u3067\u3082\u6295\u3052\u3089\u308c\u308b\u3068\u601d\u3046\u3002\n# -*- coding: utf-8 -*-\nfrom datetime import datetime\nfrom fcache.cache import FileCache\n\nimport feedparser\nfrom hypchat import HypChat\nimport hashlib\nimport os\nimport pytz\nimport time\n\nos.environ['TZ'] = 'UTC'\n\nroom_id  = 123456\nfeed_url = \"http://redmine/issue/atom/url\"\nfeed = feedparser.parse(feed_url)\ncache_key = hashlib.sha224(feed_url).hexdigest()\ncache = FileCache('/tmp/redmine')\nhc = HypChat(\"YOUR API TOKEN\")\ntz_utc = pytz.timezone('UTC')\n\nif not cache.get(cache_key):\n    cache[cache_key] = time.mktime(datetime.now(tz_utc).timetuple())\n\nlast_updated = cache[cache_key]\nfor entry in feed['entries']:\n\n    updated = time.mktime(datetime.strptime(entry.updated, '%Y-%m-%dT%H:%M:%SZ').timetuple())\n\n    if int( last_updated ) >= int( updated ):\n        print \"continue: %s > %s\" % (cache[cache_key], updated)\n        continue\n\n    if cache[cache_key] <= updated:\n        cache[cache_key] = updated\n\n    if entry.authors[0].name:\n        name = entry.authors[0].name\n\n    message = '<a href=\"%s\">%s</a> (%s)' % (entry.link, entry.title, name)\n    hc.get_room(room_id).notification(message, color='gray')\n\ncache.close()\n\nPerl \u306b\u304a\u3051\u308b Cache::FileCache \u76f8\u5f53\u306e\u3082\u306e\u3092\u63a2\u3059\u306e\u306b\u3061\u3087\u3063\u3068\u624b\u9593\u53d6\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3068\u3001\u4e45\u3005\u306b python \u66f8\u3044\u305f\u3089\u5fd8\u308c\u3066\u3093\u306a\u3068\u304a\u3082\u3063\u305fw\nIRC \u3067\u306f redmine \u306e\u66f4\u65b0\u3092 ikachan \u306b\u6295\u3052\u3066\u901a\u77e5\u3057\u305f\u308a\u3057\u3066\u308b\u3093\u3060\u3051\u3069\u3001 hipchat \u3067\u3082\u6d41\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3044\u4e45\u3005\u306b python \u3067 script \u3092\u66f8\u3044\u305f\u3002\n[HipChat \u306e API \u3092\u305f\u305f\u304f library \u306f\u516c\u5f0f\u3067\u307e\u3068\u307e\u3063\u3066\u308b\u3002](https://www.hipchat.com/docs/api/libraries)\npython \u306e\u306f PyPI \u306b\u3042\u308b\u306e\u3067\u3001 pip install python-hipchat \u3067 install \u3067\u304d\u308b\u3002\n\nRSS \u3067 parse \u3067\u304d\u308b\u3082\u306e\u306a\u3089\u4f55\u3067\u3082\u6295\u3052\u3089\u308c\u308b\u3068\u601d\u3046\u3002\n\n```py\n# -*- coding: utf-8 -*-\nfrom datetime import datetime\nfrom fcache.cache import FileCache\n\nimport feedparser\nfrom hypchat import HypChat\nimport hashlib\nimport os\nimport pytz\nimport time\n\nos.environ['TZ'] = 'UTC'\n\nroom_id  = 123456\nfeed_url = \"http://redmine/issue/atom/url\"\nfeed = feedparser.parse(feed_url)\ncache_key = hashlib.sha224(feed_url).hexdigest()\ncache = FileCache('/tmp/redmine')\nhc = HypChat(\"YOUR API TOKEN\")\ntz_utc = pytz.timezone('UTC')\n\nif not cache.get(cache_key):\n    cache[cache_key] = time.mktime(datetime.now(tz_utc).timetuple())\n\nlast_updated = cache[cache_key]\nfor entry in feed['entries']:\n\n    updated = time.mktime(datetime.strptime(entry.updated, '%Y-%m-%dT%H:%M:%SZ').timetuple())\n\n    if int( last_updated ) >= int( updated ):\n        print \"continue: %s > %s\" % (cache[cache_key], updated)\n        continue\n\n    if cache[cache_key] <= updated:\n        cache[cache_key] = updated\n\n    if entry.authors[0].name:\n        name = entry.authors[0].name\n\n    message = '<a href=\"%s\">%s</a> (%s)' % (entry.link, entry.title, name)\n    hc.get_room(room_id).notification(message, color='gray')\n\ncache.close()\n```\n\nPerl \u306b\u304a\u3051\u308b Cache::FileCache \u76f8\u5f53\u306e\u3082\u306e\u3092\u63a2\u3059\u306e\u306b\u3061\u3087\u3063\u3068\u624b\u9593\u53d6\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3068\u3001\u4e45\u3005\u306b python \u66f8\u3044\u305f\u3089\u5fd8\u308c\u3066\u3093\u306a\u3068\u304a\u3082\u3063\u305fw", "tags": ["Python", "hipchat"]}