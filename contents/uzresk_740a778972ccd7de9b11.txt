{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nSoftLayer\u3068\u3044\u3048\u3070Python\u306eAPI\u304c\u6d3b\u767a\u3067\u3059\u304c\u3001\u3042\u3048\u3066Java\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u74b0\u5883\u8a2d\u5b9a\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fb\u30d9\u30a2\u30e1\u30bf\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u60c5\u5831\u8868\u793a\u65b9\u6cd5\u3001\u96fb\u6e90ON/OFF\u306e\u4ed5\u65b9\u3001\u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u306e\u4f5c\u6210\u65b9\u6cd5\u306a\u3093\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u7269\u7406\u30b5\u30fc\u30d0\u3082API\u3067\u64cd\u4f5c\u3067\u304d\u3061\u3083\u3046\u306e\u304c\u79c1\u307f\u305f\u3044\u306a\u7530\u820e\u8005\u306b\u306f\u65b0\u9bae\u3067\u3059\u3002\n\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308bJava\u306e\u30b3\u30fc\u30c9\u306fjava8\u306estream API\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u6163\u308c\u3066\u306a\u3044\u65b9\u306f\u5408\u308f\u305b\u3066\u52c9\u5f37\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u5f8c\u3082\u4f7f\u3048\u305d\u3046\u306a\u30cd\u30bf\u304c\u3042\u3063\u305f\u3089\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\n\nsoftlayer-java 0.2.2\nJava8\nApache Maven 3.0.4\n\n\n\u60c5\u5831\u6e90\n\u6b8b\u5ff5\u306a\u304c\u3089\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u306f\u7686\u7121\u306a\u306e\u3067\u30bd\u30fc\u30b9\u3068API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u3061\u3089\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nsoftlayer-java@github\nAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\n\n\u74b0\u5883\u69cb\u7bc9\n\nmaven\u306e\u30bb\u30f3\u30c8\u30e9\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u306bSoftlayer\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067pom\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3057\u307e\u3059\u3002\nSoftLayer\u306eAPI\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u5024\u306f\u975e\u5e38\u306b\u591a\u304f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u898b\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001commons-lang\u306eToStringBuilder\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067commons-lang\u3082\u5408\u308f\u305b\u3066\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002\n\n\n(\u629c\u7c8b)pom.xml\n    <dependencies>\n        <dependency>\n            <groupId>com.softlayer.api</groupId>\n            <artifactId>softlayer-api-client</artifactId>\n            <version>0.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.3</version>\n        </dependency>\n    </dependencies>\n\n\n\uff12\uff0eAPI\u30ad\u30fc\u3092\u767a\u884c\u3057\u307e\u3059\u3002\nAccount - Users\u306e\u753b\u9762\u3067APIKey\u3068\u3044\u3046\u9805\u76ee\u304c\u3042\u308b\u306e\u3067\u3053\u3053\u3067\u767a\u884c\u3057\u307e\u3059\u3002\nID\u306f\u30ed\u30b0\u30a4\u30f3\u6642\u306eID\u306b\u306a\u308b\u306e\u3067\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u308b\u306e\u306fAPIKey\u306e\u307f\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3067API\u3092\u5b9f\u884c\u3067\u304d\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u4f5c\u308b\u524d\u306b\u30fb\u30fb\u30fb\u30fb\n\u3059\u3053\u3057\u4f5c\u308a\u59cb\u3081\u3066\u307f\u308b\u3068\u5224\u308b\u306e\u3067\u3059\u304c\u8272\u3005\u7591\u554f\u304c\u6e67\u304d\u307e\u3059\u3002\n\nID/PW\u306f\u30bd\u30fc\u30b9\u306b\u30d9\u30bf\u66f8\u304d\u306a\u306e\u304b\uff1f\n\u30d7\u30ed\u30ad\u30b7\u914d\u4e0b\u3067API\u53e9\u304f\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u306e\u304b\uff1f\n\u901a\u4fe1\u306e\u30ed\u30b0\u306f\u3069\u306e\u3088\u3046\u306b\u51fa\u3059\u306e\u304b\uff1f\n\n\nID/PW\u306f\u30bd\u30fc\u30b9\u306b\u30d9\u30bf\u66f8\u304d\uff1f\n\u30d9\u30bf\u66f8\u304d\u3067\u3059\u3002AWS\u306e\u3088\u3046\u306bEnvironmentVariableCredentialsProvider, SystemPropertiesCredentialsProvider, InstanceProfileCredentialsProvider\u306a\u3069\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001STS\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3082\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u5927\u4e8b\u306b\u7ba1\u7406\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u30d7\u30ed\u30ad\u30b7\u914d\u4e0b\u3067SoftLayerAPI\u3092\u53e9\u304f\u306b\u306f\u3069\u3046\u3059\u308b\u306e\uff1f\nGithub\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\nHTTP Client\nThe default HTTP client that is used is the JVM's native HttpUrlConnection. In order to create your own, alternative implementation you must implement com.softlayer.api.http.HttpClientFactory. Once implemented, this can be explicitly set on the RestApiClient by calling setHttpClientFactory. Instead of setting the factory manually, you can also leverage Java's ServiceLoader mechanism to have it used by default. This involves adding the fully qualified class name of your implementation on a single line in a file in the JAR at META-INF/com.softlayer.api.http.HttpClientFactory.\n\n\u8981\u306fHttpUrlConnection\u3092\u5185\u90e8\u3067\u4f7f\u3063\u3066\u3044\u3066Factory\u3082\u3042\u308b\u306e\u3067\u305d\u3053\u306b\u5dee\u3057\u8fbc\u3081\u3084\u3002\u3068\u3002\u3061\u3087\u3063\u3068\u898b\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u5f8c\u56de\u3057\u306b\u3057\u307e\u3057\u305f\u3002\u5358\u306b\u30d7\u30ed\u30ad\u30b7\u7d4c\u7531\u3067\u901a\u4fe1\u3057\u305f\u3044\u3060\u3051\u3067\u3042\u308c\u3070\u3001HttpUrlConnection\u306f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30d7\u30ed\u30ad\u30b7\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3042\u3052\u308b\u3068\u305d\u308c\u3092\u8aad\u3093\u3067\u304f\u308c\u307e\u3059\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\nSystem.setProperty(\"proxySet\", \"true\");\nSystem.setProperty(\"proxyHost\", proxyHost);\nSystem.setProperty(\"proxyPort\", proxyPort);\n\n\n\u901a\u4fe1\u306e\u30ed\u30b0\u306f\u3069\u306e\u3088\u3046\u306b\u51fa\u3059\u306e\u304b\uff1f\n\u3053\u308c\u3082Github\u306b\u7b54\u3048\u304c\u8f09\u3063\u3066\u307e\u3059\u3002ApiClient\u306b\u5bfe\u3057\u3066withLoggingEnabled()\u3092\u547c\u3079\u3060\u305d\u3046\u3067\u3059\u3002\nLogging\n\nLogging the requests and response to stdout can be enabled by invoking withLoggingEnabled on the RestApiClient. In order to log elsewhere, simply make your own implementation of RestApiClient with logRequest and logResponse overridden.\n\n\nSoftLayerAPIClient\u3092\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002\n\u6bce\u56de\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u8a2d\u5b9a\u3057\u305f\u308a\u3001\u30ed\u30b0\u51fa\u3059\uff1f\u51fa\u3055\u306a\u3044\uff1f\u3068\u304b\u30d7\u30ed\u30ad\u30b7ON/OFF\u3068\u304b\u5b9f\u884c\u3059\u308b\u65c5\u306b\u5909\u3048\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u7e8f\u3081\u3066\u5916\u51fa\u3057\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u5168\u304f\u5927\u3057\u305f\u3053\u3068\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u89e3\u8aac\u306f\u7701\u304d\u307e\u3059\u3002\u6539\u5909\u306a\u3069\u306f\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\nSoftLayerClientProvider.java\n\n\u5229\u7528\u65b9\u6cd5\n\uff11\uff0e\u30af\u30e9\u30b9\u30d1\u30b9\u30eb\u30fc\u30c8\u76f4\u4e0b\u306bsoftlayer.properties\u3092\u4f5c\u6210\u3057\u4e0b\u8a18\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nsoftlayer.username=xxxxx\nsoftlayer.apikey=xxxxxxxxxxxxxx\nproxyHost=proxy.intra.co.jp\nproxyPort=8080\nlog.enable=0\n\n\uff12\uff0eApiClient\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\nget.java\nApiClient client = SoftLayerClientProvider.createApiClient();\n\n\n\u3053\u308c\u3067\u672c\u5f53\u306b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u4f5c\u3063\u3066\u307f\u308b\n\u3042\u3068\u306fAPI\u306e\u9006\u5f15\u304d\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306a\u611f\u3058\u3067\u3055\u3089\u3063\u3068\u8aac\u660e\u3057\u307e\u3059\u3002\n\nVirtualServer\n\nVirtualServer\u306e\u60c5\u5831\u3092\u3059\u3079\u3066\u53d6\u5f97\u3059\u308b\u3002\n\nDescribeVirtualInstances.java\n    private static void describeInstance() {\n\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n        Account.Service accountService = Account.service(client);\n        accountService\n                .getVirtualGuests()\n                .stream()\n                .map(s -> \"[\" + s.getId() + \"][\" + s.getFullyQualifiedDomainName() + \"][\"\n                        + s.asService(client).getPowerState().getName() + \"]\")\n                .forEach(System.out::println);\n    }\n\n\nmap(s->\u306e\u90e8\u5206\u3067\u51fa\u529b\u3059\u308b\u60c5\u5831\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\u672c\u5f53\u306b\u6ca2\u5c71\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002ToStringBuilder\u3067\u307e\u3068\u3081\u3066\u51fa\u3057\u305f\u7d50\u679c\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\nvirtual.log\ncom.softlayer.api.service.virtual.Guest@f5acb9d[\n  account=<null>\n  accountOwnedPoolFlag=<null>\n  activeNetworkMonitorIncident=<null>\n  activeTickets=<null>\n  activeTransaction=<null>\n  activeTransactions=<null>\n  allowedHost=<null>\n  allowedNetworkStorage=<null>\n  antivirusSpywareSoftwareComponent=<null>\n  applicationDeliveryController=<null>\n  attributes=<null>\n  availableMonitoring=<null>\n  averageDailyPrivateBandwidthUsage=<null>\n  averageDailyPublicBandwidthUsage=<null>\n  backendNetworkComponents=<null>\n  backendRouters=<null>\n  bandwidthAllocation=<null>\n  bandwidthAllotmentDetail=<null>\n  billingCycleBandwidthUsage=<null>\n  billingCyclePrivateBandwidthUsage=<null>\n  billingCyclePublicBandwidthUsage=<null>\n  billingItem=<null>\n  blockCancelBecauseDisconnectedFlag=<null>\n\u9577\u3059\u304e\u308b\u306e\u3067\u4ee5\u4e0b\u7565\n]\n\n\n\n\u7279\u5b9a\u306eVirtualServer\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u3092\u5f15\u6570\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nDescribeVirtualInstances.java\n    private static void describeInstance(Long id) {\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n        Account.Service accountService = Account.service(client);\n        System.out.println(\"[ID][Domain][Status]\");\n        accountService\n                .getVirtualGuests()\n                .stream()\n                .filter(s -> id.equals(s.getId()))\n                .map(s -> \"[\" + s.getId() + \"][\"\n                        + s.getFullyQualifiedDomainName() + \"][\"\n                        + s.asService(client).getPowerState().getName() + \"]\")\n                .forEach(System.out::println);\n    }\n\n\n\n\u7279\u5b9a\u306eVirtualServer\u306e\u96fb\u6e90ON/OFF\nRunning(\u8d77\u52d5\u4e2d\uff09\u306e\u5834\u5408\u306f\u505c\u6b62\u3057\u307e\u3059\u3002Halted(\u505c\u6b62\u4e2d)\u306e\u5834\u5408\u306f\u8d77\u52d5\u3057\u307e\u3059\u3002\n\nPowerOnOffVirtualInstance.java\n        Stream<Guest> stream = accountService.getVirtualGuests().stream()\n                .filter(s -> id.equals(s.getId()));\n        Guest guest = stream.findFirst().get();\n\n        String powerStatus = guest.asService(client).getPowerState().getName();\n\n        System.out.println(\"id[\" + id + \"] Status[\" + powerStatus + \"]\");\n\n        if (\"Running\".equals(powerStatus)) {\n            guest.asService(client).powerOffSoft();\n\n        } else if (\"Halted\".equals(powerStatus)) {\n            guest.asService(client).powerOn();\n        }\n\n\n\n\nBaremetal\n\nBaremetalServer\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\naccountService.withMask()\u3067\u53d6\u5f97\u3059\u308b\u60c5\u5831\u3092\u30de\u30b9\u30af\u3057\u3066\u3042\u3052\u307e\u3059\u3002\u30de\u30b9\u30af\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u306e\u8fd4\u5374\u306b\u975e\u5e38\u306b\u6642\u9593\u304c\u639b\u304b\u308b or \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002\n\u4eee\u60f3\u30b5\u30fc\u30d0\u3067\u3082\u30de\u30b9\u30af\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u30de\u30b9\u30af\u3057\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n\nDescribeBaremetalInstances.java\n    private static void describeBaremetalInstances() {\n\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n        Account.Service accountService = Account.service(client);\n        accountService.withMask().hardware().id();\n        accountService.withMask().hardware().hostname();\n        accountService.withMask().hardware().fullyQualifiedDomainName();\n\n        accountService\n                .getObject()\n                .getHardware()\n                .stream()\n                .map(s -> \"[\" + s.getId() + \"][\"\n                        + s.getFullyQualifiedDomainName() + \"][\"\n                        + s.asService(client).getServerPowerState() + \"]\")\n                .forEach(System.out::println);\n    }\n\n\n\n\u7279\u5b9a\u306eBaremetal\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nDescribeBaremetalInstances.java\n    private static void describeBaremetalInstance(Long id) {\n\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n\n        Account.Service accountService = Account.service(client);\n        accountService.withMask().hardware().id();\n        accountService.withMask().hardware().hostname();\n        accountService.withMask().hardware().fullyQualifiedDomainName();\n\n        accountService\n                .getObject()\n                .getHardware()\n                .stream()\n                .filter(s -> id.equals(s.getId()))\n                .map(s -> \"[\" + s.getId() + \"][\"\n                        + s.getFullyQualifiedDomainName() + \"][\"\n                        + s.asService(client).getServerPowerState() + \"]\")\n                .forEach(System.out::println);\n    }\n\n\n\n\u7279\u5b9a\u306eBaremetal\u306e\u96fb\u6e90ON/OFF\nid\u3092\u3064\u304b\u3063\u3066Hardware\u3092\u7279\u5b9a\u3057\u3066\u96fb\u6e90ON/OFF\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nPowerOnOffBaremetalInstance.java\n        Stream<Hardware> stream = accountService.getObject().getHardware()\n                .stream().filter(s -> id.equals(s.getId()));\n        Hardware hardware = stream.findFirst().get();\n\n        String powerStatus = hardware.asService(client).getServerPowerState();\n\n        System.out.println(\"id[\" + id + \"] Status[\" + powerStatus + \"]\");\n\n        if (\"on\".equals(powerStatus)) {\n            hardware.asService(client).powerOff();\n\n        } else if (\"off\".equals(powerStatus)) {\n            hardware.asService(client).powerOn();\n        }\n\n\n\n\u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n\u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nDescribeImages.java\n    private static void describeImages() {\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n        Account.Service accountService = Account.service(client);\n        accountService\n                .getBlockDeviceTemplateGroups()\n                .stream()\n                .map(s -> \"[\" + s.getName() + \"][\"\n                        + new Date(s.getCreateDate().getTimeInMillis()) + \"][\"\n                        + s.getGlobalIdentifier() + \"]\")\n                .forEach(System.out::println);\n    }\n\n\n\n\u7279\u5b9a\u306e\u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\nDescribeImages.java\n    private static void describeImage(Long id) {\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n        Account.Service accountService = Account.service(client);\n\n        // describe image from imageId\n        accountService\n                .getBlockDeviceTemplateGroups()\n                .stream()\n                .filter(s -> id.equals(s.getId()))\n                .map(s -> ToStringBuilder.reflectionToString(s,\n                        ToStringStyle.MULTI_LINE_STYLE))\n                .forEach(System.out::println);\n\n    }\n\n\n\n\u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\u3002\nAPI\u3092\u4f7f\u3063\u3066\u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u540d\u524d\u3068\u304b\u3092\u304d\u3081\u3066captureImage\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u306d\u3002\n\nCreateFlexImageTemplate.java\n        ApiClient client = SoftLayerClientProvider.createApiClient();\n\n        Account.Service accountService = Account.service(client);\n\n        final String deviceName = args[0];\n\n        // template description\n        Template paramTemplate = new Template();\n        paramTemplate.setName(\"template from \" + deviceName);\n        paramTemplate.setDescription(\"description example\");\n        paramTemplate.setSummary(\"summary example\");\n\n        // create flex image\n        Stream<Group> stream = accountService\n                .getVirtualGuests()\n                .stream()\n                .filter(s -> deviceName.equals(s.getFullyQualifiedDomainName()))\n                .map(s -> s.asService(client).captureImage(paramTemplate));\n\n        // describe template\n        System.out.println(ToStringBuilder.reflectionToString(stream\n                .findFirst().get(), ToStringStyle.MULTI_LINE_STYLE));\n\n\n\n# \u306f\u3058\u3081\u306b\n\nSoftLayer\u3068\u3044\u3048\u3070Python\u306eAPI\u304c\u6d3b\u767a\u3067\u3059\u304c\u3001\u3042\u3048\u3066Java\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u74b0\u5883\u8a2d\u5b9a\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fb\u30d9\u30a2\u30e1\u30bf\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u60c5\u5831\u8868\u793a\u65b9\u6cd5\u3001\u96fb\u6e90ON/OFF\u306e\u4ed5\u65b9\u3001\u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u306e\u4f5c\u6210\u65b9\u6cd5\u306a\u3093\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u7269\u7406\u30b5\u30fc\u30d0\u3082API\u3067\u64cd\u4f5c\u3067\u304d\u3061\u3083\u3046\u306e\u304c\u79c1\u307f\u305f\u3044\u306a\u7530\u820e\u8005\u306b\u306f\u65b0\u9bae\u3067\u3059\u3002\n\n\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308bJava\u306e\u30b3\u30fc\u30c9\u306fjava8\u306estream API\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u6163\u308c\u3066\u306a\u3044\u65b9\u306f\u5408\u308f\u305b\u3066\u52c9\u5f37\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u5f8c\u3082\u4f7f\u3048\u305d\u3046\u306a\u30cd\u30bf\u304c\u3042\u3063\u305f\u3089\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u74b0\u5883\n\n* softlayer-java 0.2.2\n* Java8\n* Apache Maven 3.0.4\n\n# \u60c5\u5831\u6e90\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u306f\u7686\u7121\u306a\u306e\u3067\u30bd\u30fc\u30b9\u3068API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u3061\u3089\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n* [softlayer-java@github](https://github.com/softlayer/softlayer-java)\n* [API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://sldn.softlayer.com/reference/services/SoftLayer_Account)\n\n# \u74b0\u5883\u69cb\u7bc9\n\n1. maven\u306e\u30bb\u30f3\u30c8\u30e9\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u306bSoftlayer\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067pom\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3057\u307e\u3059\u3002\nSoftLayer\u306eAPI\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u5024\u306f\u975e\u5e38\u306b\u591a\u304f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u898b\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001commons-lang\u306eToStringBuilder\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067commons-lang\u3082\u5408\u308f\u305b\u3066\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u306f\u304a\u597d\u307f\u3067\u3002\n\n```(\u629c\u7c8b)pom.xml\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.softlayer.api</groupId>\n\t\t\t<artifactId>softlayer-api-client</artifactId>\n\t\t\t<version>0.2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-lang</groupId>\n\t\t\t<artifactId>commons-lang</artifactId>\n\t\t\t<version>2.3</version>\n\t\t</dependency>\n\t</dependencies>\n```\n\n\uff12\uff0eAPI\u30ad\u30fc\u3092\u767a\u884c\u3057\u307e\u3059\u3002\n\nAccount - Users\u306e\u753b\u9762\u3067APIKey\u3068\u3044\u3046\u9805\u76ee\u304c\u3042\u308b\u306e\u3067\u3053\u3053\u3067\u767a\u884c\u3057\u307e\u3059\u3002\nID\u306f\u30ed\u30b0\u30a4\u30f3\u6642\u306eID\u306b\u306a\u308b\u306e\u3067\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u308b\u306e\u306fAPIKey\u306e\u307f\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3067API\u3092\u5b9f\u884c\u3067\u304d\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u4f5c\u308b\u524d\u306b\u30fb\u30fb\u30fb\u30fb\n\n\u3059\u3053\u3057\u4f5c\u308a\u59cb\u3081\u3066\u307f\u308b\u3068\u5224\u308b\u306e\u3067\u3059\u304c\u8272\u3005\u7591\u554f\u304c\u6e67\u304d\u307e\u3059\u3002\n\n* ID/PW\u306f\u30bd\u30fc\u30b9\u306b\u30d9\u30bf\u66f8\u304d\u306a\u306e\u304b\uff1f\n* \u30d7\u30ed\u30ad\u30b7\u914d\u4e0b\u3067API\u53e9\u304f\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u306e\u304b\uff1f\n* \u901a\u4fe1\u306e\u30ed\u30b0\u306f\u3069\u306e\u3088\u3046\u306b\u51fa\u3059\u306e\u304b\uff1f\n\n## ID/PW\u306f\u30bd\u30fc\u30b9\u306b\u30d9\u30bf\u66f8\u304d\uff1f\n\n\u30d9\u30bf\u66f8\u304d\u3067\u3059\u3002AWS\u306e\u3088\u3046\u306bEnvironmentVariableCredentialsProvider, SystemPropertiesCredentialsProvider, InstanceProfileCredentialsProvider\u306a\u3069\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001STS\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3082\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u5927\u4e8b\u306b\u7ba1\u7406\u3057\u307e\u3057\u3087\u3046\u3002\n\n## \u30d7\u30ed\u30ad\u30b7\u914d\u4e0b\u3067SoftLayerAPI\u3092\u53e9\u304f\u306b\u306f\u3069\u3046\u3059\u308b\u306e\uff1f\n\nGithub\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\nHTTP Client\nThe default HTTP client that is used is the JVM's native HttpUrlConnection. In order to create your own, alternative implementation you must implement com.softlayer.api.http.HttpClientFactory. Once implemented, this can be explicitly set on the RestApiClient by calling setHttpClientFactory. Instead of setting the factory manually, you can also leverage Java's ServiceLoader mechanism to have it used by default. This involves adding the fully qualified class name of your implementation on a single line in a file in the JAR at META-INF/com.softlayer.api.http.HttpClientFactory.\n```\n\n\u8981\u306fHttpUrlConnection\u3092\u5185\u90e8\u3067\u4f7f\u3063\u3066\u3044\u3066Factory\u3082\u3042\u308b\u306e\u3067\u305d\u3053\u306b\u5dee\u3057\u8fbc\u3081\u3084\u3002\u3068\u3002\u3061\u3087\u3063\u3068\u898b\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u5f8c\u56de\u3057\u306b\u3057\u307e\u3057\u305f\u3002\u5358\u306b\u30d7\u30ed\u30ad\u30b7\u7d4c\u7531\u3067\u901a\u4fe1\u3057\u305f\u3044\u3060\u3051\u3067\u3042\u308c\u3070\u3001HttpUrlConnection\u306f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30d7\u30ed\u30ad\u30b7\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3042\u3052\u308b\u3068\u305d\u308c\u3092\u8aad\u3093\u3067\u304f\u308c\u307e\u3059\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n```\nSystem.setProperty(\"proxySet\", \"true\");\nSystem.setProperty(\"proxyHost\", proxyHost);\nSystem.setProperty(\"proxyPort\", proxyPort);\n```\n\n## \u901a\u4fe1\u306e\u30ed\u30b0\u306f\u3069\u306e\u3088\u3046\u306b\u51fa\u3059\u306e\u304b\uff1f\n\n\u3053\u308c\u3082Github\u306b\u7b54\u3048\u304c\u8f09\u3063\u3066\u307e\u3059\u3002ApiClient\u306b\u5bfe\u3057\u3066withLoggingEnabled()\u3092\u547c\u3079\u3060\u305d\u3046\u3067\u3059\u3002\n\n```\nLogging\n\nLogging the requests and response to stdout can be enabled by invoking withLoggingEnabled on the RestApiClient. In order to log elsewhere, simply make your own implementation of RestApiClient with logRequest and logResponse overridden.\n```\n\n## SoftLayerAPIClient\u3092\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3002\n\n\u6bce\u56de\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u8a2d\u5b9a\u3057\u305f\u308a\u3001\u30ed\u30b0\u51fa\u3059\uff1f\u51fa\u3055\u306a\u3044\uff1f\u3068\u304b\u30d7\u30ed\u30ad\u30b7ON/OFF\u3068\u304b\u5b9f\u884c\u3059\u308b\u65c5\u306b\u5909\u3048\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u7e8f\u3081\u3066\u5916\u51fa\u3057\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u5168\u304f\u5927\u3057\u305f\u3053\u3068\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u89e3\u8aac\u306f\u7701\u304d\u307e\u3059\u3002\u6539\u5909\u306a\u3069\u306f\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\n\n[SoftLayerClientProvider.java](https://github.com/uzresk/softlayer/blob/master/src/main/java/provider/SoftLayerClientProvider.java)\n\n### \u5229\u7528\u65b9\u6cd5\n\n\uff11\uff0e\u30af\u30e9\u30b9\u30d1\u30b9\u30eb\u30fc\u30c8\u76f4\u4e0b\u306bsoftlayer.properties\u3092\u4f5c\u6210\u3057\u4e0b\u8a18\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```\nsoftlayer.username=xxxxx\nsoftlayer.apikey=xxxxxxxxxxxxxx\nproxyHost=proxy.intra.co.jp\nproxyPort=8080\nlog.enable=0\n```\n\n\uff12\uff0eApiClient\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n``` get.java\nApiClient client = SoftLayerClientProvider.createApiClient();\n```\n\n\u3053\u308c\u3067\u672c\u5f53\u306b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u4f5c\u3063\u3066\u307f\u308b\n\n\u3042\u3068\u306fAPI\u306e\u9006\u5f15\u304d\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306a\u611f\u3058\u3067\u3055\u3089\u3063\u3068\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## VirtualServer\n\n### VirtualServer\u306e\u60c5\u5831\u3092\u3059\u3079\u3066\u53d6\u5f97\u3059\u308b\u3002\n\n```DescribeVirtualInstances.java\n\tprivate static void describeInstance() {\n\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\t\tAccount.Service accountService = Account.service(client);\n\t\taccountService\n\t\t\t\t.getVirtualGuests()\n\t\t\t\t.stream()\n\t\t\t\t.map(s -> \"[\" + s.getId() + \"][\" + s.getFullyQualifiedDomainName() + \"][\"\n\t\t\t\t\t\t+ s.asService(client).getPowerState().getName() + \"]\")\n\t\t\t\t.forEach(System.out::println);\n\t}\n```\n\nmap(s->\u306e\u90e8\u5206\u3067\u51fa\u529b\u3059\u308b\u60c5\u5831\u3092\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\u672c\u5f53\u306b\u6ca2\u5c71\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002ToStringBuilder\u3067\u307e\u3068\u3081\u3066\u51fa\u3057\u305f\u7d50\u679c\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n```virtual.log\ncom.softlayer.api.service.virtual.Guest@f5acb9d[\n  account=<null>\n  accountOwnedPoolFlag=<null>\n  activeNetworkMonitorIncident=<null>\n  activeTickets=<null>\n  activeTransaction=<null>\n  activeTransactions=<null>\n  allowedHost=<null>\n  allowedNetworkStorage=<null>\n  antivirusSpywareSoftwareComponent=<null>\n  applicationDeliveryController=<null>\n  attributes=<null>\n  availableMonitoring=<null>\n  averageDailyPrivateBandwidthUsage=<null>\n  averageDailyPublicBandwidthUsage=<null>\n  backendNetworkComponents=<null>\n  backendRouters=<null>\n  bandwidthAllocation=<null>\n  bandwidthAllotmentDetail=<null>\n  billingCycleBandwidthUsage=<null>\n  billingCyclePrivateBandwidthUsage=<null>\n  billingCyclePublicBandwidthUsage=<null>\n  billingItem=<null>\n  blockCancelBecauseDisconnectedFlag=<null>\n\u9577\u3059\u304e\u308b\u306e\u3067\u4ee5\u4e0b\u7565\n]\n```\n\n### \u7279\u5b9a\u306eVirtualServer\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u3092\u5f15\u6570\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```DescribeVirtualInstances.java\n\tprivate static void describeInstance(Long id) {\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\t\tAccount.Service accountService = Account.service(client);\n\t\tSystem.out.println(\"[ID][Domain][Status]\");\n\t\taccountService\n\t\t\t\t.getVirtualGuests()\n\t\t\t\t.stream()\n\t\t\t\t.filter(s -> id.equals(s.getId()))\n\t\t\t\t.map(s -> \"[\" + s.getId() + \"][\"\n\t\t\t\t\t\t+ s.getFullyQualifiedDomainName() + \"][\"\n\t\t\t\t\t\t+ s.asService(client).getPowerState().getName() + \"]\")\n\t\t\t\t.forEach(System.out::println);\n\t}\n```\n\n### \u7279\u5b9a\u306eVirtualServer\u306e\u96fb\u6e90ON/OFF\n\nRunning(\u8d77\u52d5\u4e2d\uff09\u306e\u5834\u5408\u306f\u505c\u6b62\u3057\u307e\u3059\u3002Halted(\u505c\u6b62\u4e2d)\u306e\u5834\u5408\u306f\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```PowerOnOffVirtualInstance.java\n\t\tStream<Guest> stream = accountService.getVirtualGuests().stream()\n\t\t\t\t.filter(s -> id.equals(s.getId()));\n\t\tGuest guest = stream.findFirst().get();\n\n\t\tString powerStatus = guest.asService(client).getPowerState().getName();\n\n\t\tSystem.out.println(\"id[\" + id + \"] Status[\" + powerStatus + \"]\");\n\n\t\tif (\"Running\".equals(powerStatus)) {\n\t\t\tguest.asService(client).powerOffSoft();\n\n\t\t} else if (\"Halted\".equals(powerStatus)) {\n\t\t\tguest.asService(client).powerOn();\n\t\t}\n\n```\n\n## Baremetal\n\n### BaremetalServer\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\n\naccountService.withMask()\u3067\u53d6\u5f97\u3059\u308b\u60c5\u5831\u3092\u30de\u30b9\u30af\u3057\u3066\u3042\u3052\u307e\u3059\u3002\u30de\u30b9\u30af\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u306e\u8fd4\u5374\u306b\u975e\u5e38\u306b\u6642\u9593\u304c\u639b\u304b\u308b or \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002\n\u4eee\u60f3\u30b5\u30fc\u30d0\u3067\u3082\u30de\u30b9\u30af\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u30de\u30b9\u30af\u3057\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u3002\n\n```DescribeBaremetalInstances.java\n\tprivate static void describeBaremetalInstances() {\n\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\t\tAccount.Service accountService = Account.service(client);\n\t\taccountService.withMask().hardware().id();\n\t\taccountService.withMask().hardware().hostname();\n\t\taccountService.withMask().hardware().fullyQualifiedDomainName();\n\n\t\taccountService\n\t\t\t\t.getObject()\n\t\t\t\t.getHardware()\n\t\t\t\t.stream()\n\t\t\t\t.map(s -> \"[\" + s.getId() + \"][\"\n\t\t\t\t\t\t+ s.getFullyQualifiedDomainName() + \"][\"\n\t\t\t\t\t\t+ s.asService(client).getServerPowerState() + \"]\")\n\t\t\t\t.forEach(System.out::println);\n\t}\n```\n\n### \u7279\u5b9a\u306eBaremetal\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n``` DescribeBaremetalInstances.java\n\tprivate static void describeBaremetalInstance(Long id) {\n\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\n\t\tAccount.Service accountService = Account.service(client);\n\t\taccountService.withMask().hardware().id();\n\t\taccountService.withMask().hardware().hostname();\n\t\taccountService.withMask().hardware().fullyQualifiedDomainName();\n\n\t\taccountService\n\t\t\t\t.getObject()\n\t\t\t\t.getHardware()\n\t\t\t\t.stream()\n\t\t\t\t.filter(s -> id.equals(s.getId()))\n\t\t\t\t.map(s -> \"[\" + s.getId() + \"][\"\n\t\t\t\t\t\t+ s.getFullyQualifiedDomainName() + \"][\"\n\t\t\t\t\t\t+ s.asService(client).getServerPowerState() + \"]\")\n\t\t\t\t.forEach(System.out::println);\n\t}\n```\n\n### \u7279\u5b9a\u306eBaremetal\u306e\u96fb\u6e90ON/OFF\n\nid\u3092\u3064\u304b\u3063\u3066Hardware\u3092\u7279\u5b9a\u3057\u3066\u96fb\u6e90ON/OFF\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```PowerOnOffBaremetalInstance.java\n\t\tStream<Hardware> stream = accountService.getObject().getHardware()\n\t\t\t\t.stream().filter(s -> id.equals(s.getId()));\n\t\tHardware hardware = stream.findFirst().get();\n\n\t\tString powerStatus = hardware.asService(client).getServerPowerState();\n\n\t\tSystem.out.println(\"id[\" + id + \"] Status[\" + powerStatus + \"]\");\n\n\t\tif (\"on\".equals(powerStatus)) {\n\t\t\thardware.asService(client).powerOff();\n\n\t\t} else if (\"off\".equals(powerStatus)) {\n\t\t\thardware.asService(client).powerOn();\n\t\t}\n```\n\n## \u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n### \u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n```DescribeImages.java\n\tprivate static void describeImages() {\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\t\tAccount.Service accountService = Account.service(client);\n\t\taccountService\n\t\t\t\t.getBlockDeviceTemplateGroups()\n\t\t\t\t.stream()\n\t\t\t\t.map(s -> \"[\" + s.getName() + \"][\"\n\t\t\t\t\t\t+ new Date(s.getCreateDate().getTimeInMillis()) + \"][\"\n\t\t\t\t\t\t+ s.getGlobalIdentifier() + \"]\")\n\t\t\t\t.forEach(System.out::println);\n\t}\n```\n\n### \u7279\u5b9a\u306e\u30a4\u30e1\u30fc\u30b8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n```DescribeImages.java\n\tprivate static void describeImage(Long id) {\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\t\tAccount.Service accountService = Account.service(client);\n\n\t\t// describe image from imageId\n\t\taccountService\n\t\t\t\t.getBlockDeviceTemplateGroups()\n\t\t\t\t.stream()\n\t\t\t\t.filter(s -> id.equals(s.getId()))\n\t\t\t\t.map(s -> ToStringBuilder.reflectionToString(s,\n\t\t\t\t\t\tToStringStyle.MULTI_LINE_STYLE))\n\t\t\t\t.forEach(System.out::println);\n\n\t}\n```\n\n### \u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nAPI\u3092\u4f7f\u3063\u3066\u30d5\u30ec\u30c3\u30af\u30b9\u30a4\u30e1\u30fc\u30b8\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u540d\u524d\u3068\u304b\u3092\u304d\u3081\u3066captureImage\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u306d\u3002\n\n```CreateFlexImageTemplate.java\n\t\tApiClient client = SoftLayerClientProvider.createApiClient();\n\n\t\tAccount.Service accountService = Account.service(client);\n\n\t\tfinal String deviceName = args[0];\n\n\t\t// template description\n\t\tTemplate paramTemplate = new Template();\n\t\tparamTemplate.setName(\"template from \" + deviceName);\n\t\tparamTemplate.setDescription(\"description example\");\n\t\tparamTemplate.setSummary(\"summary example\");\n\n\t\t// create flex image\n\t\tStream<Group> stream = accountService\n\t\t\t\t.getVirtualGuests()\n\t\t\t\t.stream()\n\t\t\t\t.filter(s -> deviceName.equals(s.getFullyQualifiedDomainName()))\n\t\t\t\t.map(s -> s.asService(client).captureImage(paramTemplate));\n\n\t\t// describe template\n\t\tSystem.out.println(ToStringBuilder.reflectionToString(stream\n\t\t\t\t.findFirst().get(), ToStringStyle.MULTI_LINE_STYLE));\n\n```\n\n", "tags": ["SoftLayer", "SoftLayer,Java", "java8", "\u30af\u30e9\u30a6\u30c9"]}