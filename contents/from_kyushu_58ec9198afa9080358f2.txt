{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u30d3\u30c3\u30c8\u3042\u307f\u3060\u304f\u3058\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f30\u5206\u3002\nclass BitAmida\n  def initialize input\n    @routes = input.split(\"-\").map{|hex|\n      lines = []\n      (\"%08b\" % hex.hex).scan(/(1+)/){\n        lines << [$~.begin(0), $~.begin(0) + $~[1].size]\n      }\n      lines\n    }\n  end\n\n  def start\n    9.times.each_with_object(Array.new(9)){|n, r|\n      r[\n        @routes.each_with_object([n]){|lines, route|\n          if line = lines.find{|(p1, p2)| p1 == route.last or p2 == route.last}\n            route << (line[0] == route.last ? line[1] : line[0])\n          end\n        }.last\n      ] = n\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n/*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n/*4*/ test( \"00-00-00-00\", \"012345678\" );\n/*5*/ test( \"00-00-00-55\", \"021436587\" );\n/*6*/ test( \"40-10-04-01\", \"021436587\" );\n/*7*/ test( \"00-00-aa-00\", \"103254768\" );\n/*8*/ test( \"80-20-08-02\", \"103254768\" );\n/*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n/*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n/*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n/*12*/ test( \"db-24-db-e7\", \"812543670\" );\n/*13*/ test( \"00-01-00-40\", \"021345687\" );\n/*14*/ test( \"00-00-80-00\", \"102345678\" );\n/*15*/ test( \"01-40-00-00\", \"021345687\" );\n/*16*/ test( \"00-00-00-02\", \"012345768\" );\n/*17*/ test( \"00-00-02-00\", \"012345768\" );\n/*18*/ test( \"00-14-00-00\", \"012436578\" );\n/*19*/ test( \"00-00-01-40\", \"021345687\" );\n/*20*/ test( \"00-80-01-00\", \"102345687\" );\n/*21*/ test( \"c8-00-00-81\", \"120354687\" );\n/*22*/ test( \"05-48-08-14\", \"021435687\" );\n/*23*/ test( \"24-05-00-f0\", \"413205687\" );\n/*24*/ test( \"40-08-14-01\", \"021536487\" );\n/*25*/ test( \"18-c8-80-80\", \"210534678\" );\n/*26*/ test( \"1c-88-52-00\", \"120564738\" );\n/*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n/*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n/*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n/*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n/*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n/*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n/*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n/*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n/*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n/*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n/*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n/*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n/*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n/*40*/ test( \"36-ff-df-de\", \"814527603\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'HoneyComb' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    amida = BitAmida.new input\n    it input do\n      assert_equal expect, amida.start\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u30d3\u30c3\u30c8\u3042\u307f\u3060\u304f\u3058](http://nabetani.sakura.ne.jp/hena/ord11bitamida/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f30\u5206\u3002\n\n```ruby\nclass BitAmida\n  def initialize input\n    @routes = input.split(\"-\").map{|hex|\n      lines = []\n      (\"%08b\" % hex.hex).scan(/(1+)/){\n        lines << [$~.begin(0), $~.begin(0) + $~[1].size]\n      }\n      lines\n    }\n  end\n\n  def start\n    9.times.each_with_object(Array.new(9)){|n, r|\n      r[\n        @routes.each_with_object([n]){|lines, route|\n          if line = lines.find{|(p1, p2)| p1 == route.last or p2 == route.last}\n            route << (line[0] == route.last ? line[1] : line[0])\n          end\n        }.last\n      ] = n\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n/*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n/*4*/ test( \"00-00-00-00\", \"012345678\" );\n/*5*/ test( \"00-00-00-55\", \"021436587\" );\n/*6*/ test( \"40-10-04-01\", \"021436587\" );\n/*7*/ test( \"00-00-aa-00\", \"103254768\" );\n/*8*/ test( \"80-20-08-02\", \"103254768\" );\n/*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n/*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n/*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n/*12*/ test( \"db-24-db-e7\", \"812543670\" );\n/*13*/ test( \"00-01-00-40\", \"021345687\" );\n/*14*/ test( \"00-00-80-00\", \"102345678\" );\n/*15*/ test( \"01-40-00-00\", \"021345687\" );\n/*16*/ test( \"00-00-00-02\", \"012345768\" );\n/*17*/ test( \"00-00-02-00\", \"012345768\" );\n/*18*/ test( \"00-14-00-00\", \"012436578\" );\n/*19*/ test( \"00-00-01-40\", \"021345687\" );\n/*20*/ test( \"00-80-01-00\", \"102345687\" );\n/*21*/ test( \"c8-00-00-81\", \"120354687\" );\n/*22*/ test( \"05-48-08-14\", \"021435687\" );\n/*23*/ test( \"24-05-00-f0\", \"413205687\" );\n/*24*/ test( \"40-08-14-01\", \"021536487\" );\n/*25*/ test( \"18-c8-80-80\", \"210534678\" );\n/*26*/ test( \"1c-88-52-00\", \"120564738\" );\n/*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n/*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n/*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n/*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n/*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n/*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n/*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n/*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n/*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n/*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n/*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n/*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n/*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n/*40*/ test( \"36-ff-df-de\", \"814527603\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'HoneyComb' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    amida = BitAmida.new input\n    it input do\n      assert_equal expect, amida.start\n    end\n  end\nend\n```\n"}