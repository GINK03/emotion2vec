{"context": " More than 1 year has passed since last update.\n\nC#\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30b3\u30f3\u30bd\u30fc\u30eb\u5165\u529b\u304b\u3089\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u56e0\u6570\u5206\u89e3\u5f8c\u306e\u8981\u7d20\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\u4eca\u56de\u306fC#\u3089\u3057\u304f\u7d20\u56e0\u6570\u8981\u7d20\u3092IEnumerable\u3067\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nPrime.cs\npublic class Prime{\n    public static void Main()\n    {\n        int n = int.Parse(Console.ReadLine());\n        Console.WriteLine(\"{0} = {1}\", n, string.Join(\" x \", PrimeFactors(n)));\n    }\n\n    public static IEnumerable<int> PrimeFactors(int n)\n    {\n        int i = 2;\n        int tmp = n;\n\n        while (i * i <= n) //\u203b1\n        {\n            if(tmp % i == 0){\n                tmp /= i;\n                yield return i;\n            }else{\n                i++;\n            }\n        }\n        if(tmp != 1) yield return tmp;//\u6700\u5f8c\u306e\u7d20\u6570\u3082\u8fd4\u3059\n    }\n}\n\n\n\n\u5b9f\u884c\u4f8b1\n> 18\n18 = 2 x 3 x 3\n\n\n\n\u5b9f\u884c\u4f8b2\n> 2048\n2048 = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2\n\n\n\n\u5b9f\u884c\u4f8b3\n> 2146654199\n2146654199 = 46327 x 46337\n\n\n\n\u203b1\n\u7d20\u56e0\u6570\u5206\u89e3\u306f\u3001\n\u300c\u5408\u6210\u6570x\u306fp\u2264x\u221a\u3092\u6e80\u305f\u3059\u7d20\u56e0\u5b50p\u3092\u3082\u3064\u300d\u300c\u5408\u6210\u6570x\u306fp\u2264x\u3092\u6e80\u305f\u3059\u7d20\u56e0\u5b50p\u3092\u3082\u3064\u300d{\u300c\u5408\u6210\u6570 x \u306f p \\leq \\sqrt{x} \u3092\u6e80\u305f\u3059\u7d20\u56e0\u5b50 p \u3092\u3082\u3064\u300d\n}\n\u3068\u3044\u3046\u6027\u8cea\u3092\u7528\u3044\u3066\u9ad8\u901f\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306fsqrt\u8a08\u7b97\u3059\u308b\u30b3\u30b9\u30c8\u3088\u308a2\u4e57\u3059\u308b\u30b3\u30b9\u30c8\u304c\u5b89\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067i\u30922\u4e57\u3057\u305f\u6570\u3068n\u3092\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n# C#\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\u5165\u529b\u304b\u3089\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u56e0\u6570\u5206\u89e3\u5f8c\u306e\u8981\u7d20\u3092\u51fa\u529b\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\u4eca\u56de\u306fC#\u3089\u3057\u304f\u7d20\u56e0\u6570\u8981\u7d20\u3092IEnumerable<int>\u3067\u8fd4\u3059\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp:Prime.cs\npublic class Prime{\n    public static void Main()\n    {\n        int n = int.Parse(Console.ReadLine());\n        Console.WriteLine(\"{0} = {1}\", n, string.Join(\" x \", PrimeFactors(n)));\n    }\n     \n    public static IEnumerable<int> PrimeFactors(int n)\n    {\n        int i = 2;\n        int tmp = n;\n         \n        while (i * i <= n) //\u203b1\n        {\n            if(tmp % i == 0){\n                tmp /= i;\n                yield return i;\n            }else{\n                i++;\n            }\n        }\n\t\tif(tmp != 1) yield return tmp;//\u6700\u5f8c\u306e\u7d20\u6570\u3082\u8fd4\u3059\n    }\n}\n```\n\n```text:\u5b9f\u884c\u4f8b1\n> 18\n18 = 2 x 3 x 3\n```\n\n```text:\u5b9f\u884c\u4f8b2\n> 2048\n2048 = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2\n```\n\n```text:\u5b9f\u884c\u4f8b3\n> 2146654199\n2146654199 = 46327 x 46337\n```\n\n##\u203b1\n\u7d20\u56e0\u6570\u5206\u89e3\u306f\u3001\n\n```math\n\u300c\u5408\u6210\u6570 x \u306f p \\leq \\sqrt{x} \u3092\u6e80\u305f\u3059\u7d20\u56e0\u5b50 p \u3092\u3082\u3064\u300d\n```\n\n\u3068\u3044\u3046\u6027\u8cea\u3092\u7528\u3044\u3066\u9ad8\u901f\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306fsqrt\u8a08\u7b97\u3059\u308b\u30b3\u30b9\u30c8\u3088\u308a2\u4e57\u3059\u308b\u30b3\u30b9\u30c8\u304c\u5b89\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067i\u30922\u4e57\u3057\u305f\u6570\u3068n\u3092\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["C#", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "algorithm"]}