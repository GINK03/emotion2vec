{"tags": ["\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u306e\u6697\u53f7\u6587\u3092 \u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u30a2\u30bf\u30c3\u30af\u3067\u89e3\u8aad\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\n\u5358\u4e00\u63db\u5b57\u6697\u53f7\u3092\u884c\u3046\u30b3\u30fc\u30c9(cipher.py)\n\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff1a\n1. gen_key()\u3067\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8(self.string)\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u3001\u305d\u306e\u5bfe\u5fdc\u8868(self.key)\u3092\u4f5c\u6210\u3059\u308b\u3002\n2. encrypt()(\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u305fcipher())\u3067\u3001\u305d\u306e\u5bfe\u5fdc\u8868(self.key)\u3092\u5143\u306b\u3001\u5bfe\u8c61\u306e\u6587(message)\u306b\u542b\u307e\u308c\u308b\u5404\u6587\u5b57\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\n3. \u7f6e\u304d\u63db\u3048\u5b8c\u4e86\u5f8c\u306e\u6587\u5b57\u5217\u304c\u6697\u53f7\u6587(encrypted_message)\n# coding: utf-8\n# Here your code !\nimport random\nimport sys\nclass Cipher(object):\n  def __init__(self,string):\n    '''\n    self.string = 'abcdefghijklmnopqrstuvwxyz   \\'\"+*-/=![]():;\\\\.,\\n'\n    '''\n    #self.string = 'abcdefghijklmnopqrstuvwxyz'\n    self.string = string\n    self.key = self.string\n\n  def cipher(self,string,key,message):\n    ret = ''\n    for s in message:\n      ret += key[string.index(s)]\n    return ret\n\n  def encrypt(self,message):\n    return self.cipher(self.string,self.key,message)\n\n  def decrypt(self,message):\n    return self.cipher(self.key,self.string,message)\n\n  def gen_key(self):\n    ret = ''\n    string = self.string\n    while string:\n      i = random.randint(0,len(string)-1)\n      s = string[i]\n      tmp = string[:i]\n      tmp += string[i+1:]\n      string = tmp\n      ret += s\n    self.set_key(ret)\n    return ret\n\n  def set_key(self,key):\n    self.key = key\n\n  def get_key(self):\n    return self.key\n\n\n\u89e3\u8aad\u3059\u308b\u30b3\u30fc\u30c9(attacker.py)\n\u89e3\u8aad\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0:\n1. self.attack()\u304b\u3089self.guess()\u3092\u547c\u3073\u51fa\u3057\u3001\u63a8\u6e2c\u306e\u6587\u7ae0(estimation)\u3092\u4f5c\u6210\u3059\u308b\u3002guess()\u3067\u306f\u3001\u4f7f\u7528\u6587\u5b57(self.string)\u304b\u3089itertools\u3092\u4f7f\u3063\u3066\u63a8\u6e2c\u306e\u9375(estimated_key)\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u9375\u3092\u5143\u306b\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u540c\u3058\u3084\u308a\u65b9\u3067\u5fa9\u53f7\u3059\u308b\u3002\n2. is_natural()\u3067\u63a8\u6e2c\u306e\u6587\u7ae0\u306b\u542b\u307e\u308c\u308b\u5358\u8a9e\u304c\u3001\u3059\u3079\u3066\u6240\u5b9a\u306e\u5358\u8a9e\u30ea\u30b9\u30c8(self.words)\u306b\u542b\u307e\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n3. \u3082\u3057\u30012\u306e\u5224\u5b9a\u7d50\u679c\u304c\u80af\u5b9a\u7684\u3067\u3042\u308b\u5834\u5408\u3001\u63a8\u6e2c\u306e\u6587\u7ae0\u3092\u7b54\u3048\u3068\u3057\u3066\u8fd4\u7b54\u3059\u308b\u3002\n\u6240\u5b9a\u306e\u5358\u8a9e\u30ea\u30b9\u30c8\u306f\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u306e\u3082\u306e\u3092\u4f7f\u7528\u3057\u305f\u3002\nhttp://tokoton-eitango.com/eitango/numindex/1/1\nimport itertools\nclass DecryptAttacher:\n    def __init__(self,string,words_list):\n        f = open(words_list)\n        self.words = set(map(lambda x: x.replace('\\n','').replace('\\r',''), f.readlines()))\n        #print self.words\n        f.close()\n        #self.string = 'abcdefghijklmnopqrstuvwxyz'\n        self.string = string\n    def attack(self,encrypted_message):\n        for estimation in self.guess(encrypted_message):\n            if self.is_natural(estimation):\n                #print 'I got the word: %s' % estimation\n                return estimation\n    def is_natural(self,estimation):\n        natural_flag = True\n        words = estimation.split(' ')\n        for w in words:\n            if not w in self.words:\n                #print '%s is wrong.' % estimation\n                natural_flag = False\n                break\n        return natural_flag\n    def cipher(self,string,key,message):\n        ret = ''\n        for s in message:\n            ret += key[string.index(s)]\n        return ret\n    def decrypt(self,key,message):\n        return self.cipher(key,self.string,message)\n    def guess(self,encrypted_message):\n        for estimated_keys in itertools.permutations(self.string):\n            #print estimated_keys, \n            yield self.decrypt(''.join(estimated_keys),encrypted_message)\n\n\n\n\u30e1\u30a4\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\n\u6697\u53f7\u5316\u5bfe\u8c61(msg)\u306e\u6587\u5b57\u5217\u3092boy ask guy\u3068\u3057\u3001\u4f7f\u7528\u6587\u5b57(string)\u3092boyaskgu\u3068\u3057\u305f\u3002\nimport cipher\nimport attacker\n\nif __name__ == '__main__':\n    string = 'boyaskgu '\n    cp = cipher.Cipher(string)\n    key = cp.gen_key()\n\n    msg = 'boy ask guy'\n    print 'message : %s' % msg\n    encrypted_message = cp.encrypt(msg)\n    print 'encrypted_message: %s key: %s' % (encrypted_message,key)\n    at = attacker.DecryptAttacher(string,'words.list')\n    print 'decrypted_message: %s' % at.attack(encrypted_message)\n\n\n\u5b9f\u884c\u7d50\u679c\nmessage : boy ask guy\nencrypted_message: gubys ayokb key: gubs aoky\ndecrypted_message: guy ask boy\n\n\u7bc0\u5b50\u3001\u305d\u308c\u5143\u306e\u6587\u7ae0\u3068\u9055\u3046\u3002\u9006\u3084\u3002\nmessage : boy ask guy buy bus\nencrypted_message: oyksubas gksogksogb key: oykuba gs\ndecrypted_message: boy ask guy buy bus\n\n\u6587\u7ae0\u3092\u9577\u304f\u3057\u3066\u307f\u308b\u3068\u3001\u60c5\u5831\u304c\u591a\u304f\u306a\u308b\u304b\u3089\u306a\u306e\u304b\u3001\u6b63\u78ba\u306b\u89e3\u8aad\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u6982\u8981\n---\n\u5358\u4e00\u63db\u5b57\u5f0f\u6697\u53f7\u306e\u6697\u53f7\u6587\u3092 \u30d6\u30eb\u30fc\u30c8\u30d5\u30a9\u30fc\u30b9\u30a2\u30bf\u30c3\u30af\u3067\u89e3\u8aad\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\n\u5358\u4e00\u63db\u5b57\u6697\u53f7\u3092\u884c\u3046\u30b3\u30fc\u30c9(cipher.py)\n---\n\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff1a\n1. gen_key()\u3067\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8(self.string)\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u3001\u305d\u306e\u5bfe\u5fdc\u8868(self.key)\u3092\u4f5c\u6210\u3059\u308b\u3002\n2. encrypt()(\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u305fcipher())\u3067\u3001\u305d\u306e\u5bfe\u5fdc\u8868(self.key)\u3092\u5143\u306b\u3001\u5bfe\u8c61\u306e\u6587(message)\u306b\u542b\u307e\u308c\u308b\u5404\u6587\u5b57\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\n3. \u7f6e\u304d\u63db\u3048\u5b8c\u4e86\u5f8c\u306e\u6587\u5b57\u5217\u304c\u6697\u53f7\u6587(encrypted_message)\n\n\n```py\n# coding: utf-8\n# Here your code !\nimport random\nimport sys\nclass Cipher(object):\n  def __init__(self,string):\n    '''\n    self.string = 'abcdefghijklmnopqrstuvwxyz   \\'\"+*-/=![]():;\\\\.,\\n'\n    '''\n    #self.string = 'abcdefghijklmnopqrstuvwxyz'\n    self.string = string\n    self.key = self.string\n    \n  def cipher(self,string,key,message):\n    ret = ''\n    for s in message:\n      ret += key[string.index(s)]\n    return ret\n\n  def encrypt(self,message):\n    return self.cipher(self.string,self.key,message)\n\n  def decrypt(self,message):\n    return self.cipher(self.key,self.string,message)\n\n  def gen_key(self):\n    ret = ''\n    string = self.string\n    while string:\n      i = random.randint(0,len(string)-1)\n      s = string[i]\n      tmp = string[:i]\n      tmp += string[i+1:]\n      string = tmp\n      ret += s\n    self.set_key(ret)\n    return ret\n\n  def set_key(self,key):\n    self.key = key\n\n  def get_key(self):\n    return self.key\n```\n\n\u89e3\u8aad\u3059\u308b\u30b3\u30fc\u30c9(attacker.py)\n---\n\u89e3\u8aad\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0:\n1. self.attack()\u304b\u3089self.guess()\u3092\u547c\u3073\u51fa\u3057\u3001\u63a8\u6e2c\u306e\u6587\u7ae0(estimation)\u3092\u4f5c\u6210\u3059\u308b\u3002guess()\u3067\u306f\u3001\u4f7f\u7528\u6587\u5b57(self.string)\u304b\u3089itertools\u3092\u4f7f\u3063\u3066\u63a8\u6e2c\u306e\u9375(estimated_key)\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u9375\u3092\u5143\u306b\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u540c\u3058\u3084\u308a\u65b9\u3067\u5fa9\u53f7\u3059\u308b\u3002\n2. is_natural()\u3067\u63a8\u6e2c\u306e\u6587\u7ae0\u306b\u542b\u307e\u308c\u308b\u5358\u8a9e\u304c\u3001\u3059\u3079\u3066\u6240\u5b9a\u306e\u5358\u8a9e\u30ea\u30b9\u30c8(self.words)\u306b\u542b\u307e\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n3. \u3082\u3057\u30012\u306e\u5224\u5b9a\u7d50\u679c\u304c\u80af\u5b9a\u7684\u3067\u3042\u308b\u5834\u5408\u3001\u63a8\u6e2c\u306e\u6587\u7ae0\u3092\u7b54\u3048\u3068\u3057\u3066\u8fd4\u7b54\u3059\u308b\u3002\n\n\n\u6240\u5b9a\u306e\u5358\u8a9e\u30ea\u30b9\u30c8\u306f\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u306e\u3082\u306e\u3092\u4f7f\u7528\u3057\u305f\u3002\nhttp://tokoton-eitango.com/eitango/numindex/1/1\n\n```py\nimport itertools\nclass DecryptAttacher:\n    def __init__(self,string,words_list):\n        f = open(words_list)\n        self.words = set(map(lambda x: x.replace('\\n','').replace('\\r',''), f.readlines()))\n        #print self.words\n        f.close()\n        #self.string = 'abcdefghijklmnopqrstuvwxyz'\n        self.string = string\n    def attack(self,encrypted_message):\n        for estimation in self.guess(encrypted_message):\n            if self.is_natural(estimation):\n                #print 'I got the word: %s' % estimation\n                return estimation\n    def is_natural(self,estimation):\n        natural_flag = True\n        words = estimation.split(' ')\n        for w in words:\n            if not w in self.words:\n                #print '%s is wrong.' % estimation\n                natural_flag = False\n                break\n        return natural_flag\n    def cipher(self,string,key,message):\n        ret = ''\n        for s in message:\n            ret += key[string.index(s)]\n        return ret\n    def decrypt(self,key,message):\n        return self.cipher(key,self.string,message)\n    def guess(self,encrypted_message):\n        for estimated_keys in itertools.permutations(self.string):\n            #print estimated_keys, \n            yield self.decrypt(''.join(estimated_keys),encrypted_message)\n            \n```\n\n\u30e1\u30a4\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\n---\n\u6697\u53f7\u5316\u5bfe\u8c61(msg)\u306e\u6587\u5b57\u5217\u3092`boy ask guy`\u3068\u3057\u3001\u4f7f\u7528\u6587\u5b57(string)\u3092`boyaskgu `\u3068\u3057\u305f\u3002\n\n```py\nimport cipher\nimport attacker\n\nif __name__ == '__main__':\n    string = 'boyaskgu '\n    cp = cipher.Cipher(string)\n    key = cp.gen_key()\n\n    msg = 'boy ask guy'\n    print 'message : %s' % msg\n    encrypted_message = cp.encrypt(msg)\n    print 'encrypted_message: %s key: %s' % (encrypted_message,key)\n    at = attacker.DecryptAttacher(string,'words.list')\n    print 'decrypted_message: %s' % at.attack(encrypted_message)\n```\n\n\u5b9f\u884c\u7d50\u679c\n---\n```\nmessage : boy ask guy\nencrypted_message: gubys ayokb key: gubs aoky\ndecrypted_message: guy ask boy\n```\n\n\u7bc0\u5b50\u3001\u305d\u308c\u5143\u306e\u6587\u7ae0\u3068\u9055\u3046\u3002\u9006\u3084\u3002\n\n```\nmessage : boy ask guy buy bus\nencrypted_message: oyksubas gksogksogb key: oykuba gs\ndecrypted_message: boy ask guy buy bus\n```\n\n\u6587\u7ae0\u3092\u9577\u304f\u3057\u3066\u307f\u308b\u3068\u3001\u60c5\u5831\u304c\u591a\u304f\u306a\u308b\u304b\u3089\u306a\u306e\u304b\u3001\u6b63\u78ba\u306b\u89e3\u8aad\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n"}