{"context": " More than 1 year has passed since last update.Scala \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53c2\u52a0\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u305f Slick2 \u304c\u3042\u307e\u308a\u306b\u3082\u9045\u304f\u898b\u3065\u3089\u3044 SQL \u3092\u51fa\u529b\u3057\u3066\u3044\u305f\u305f\u3081 SQL \u3092\u76f4\u306b\u53e9\u304f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u63db\u3048\u9ad8\u901f\u5316\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u6642\u306e\u624b\u6cd5\u3092\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002Slick2 \u304c\u51fa\u529b\u3059\u308b SQL \u3067\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u52b9\u304b\u306a\u304f\u306a\u308b\u4e8b\u3082\u591a\u304b\u3063\u305f\u306e\u3067\u3001\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u691c\u7d22\u6761\u4ef6\u3092\u5f15\u6570\u306b\u53d6\u3089\u306a\u3044 SQL \u306e\u5b9f\u884c\n\u3082\u3063\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a SQL \u3067\u3059\u306d\u3002 queryNA \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nimport play.api.db.slick._\nimport scala.slick.jdbc.{StaticQuery => Q}\n\n// \u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306e id \u3092\u8fd4\u3059\ndef users(): List[Int] = {\n  DB withSession {\n    Q.queryNA[Int](\"\"\"\n      select id from users\n    \"\"\").list\n  }\n}\n\n\u623b\u308a\u5024\u304c\u8907\u6570\u306e\u5834\u5408\u306f\u30bf\u30d7\u30eb\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n// \u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306e id \u3068 \u540d\u524d\u3092\u8fd4\u3059\ndef select(): List[(Int, String)] = {\n  DB withSession {\n    Q.queryNA[(Int, String)](\"\"\"\n      select id, name from users\n    \"\"\").list\n  }\n}\n\n\n\u691c\u7d22\u6761\u4ef6\u3092\u5f15\u6570\u306b\u53d6\u308b SQL \u306e\u5b9f\u884c\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089 where \u306b\u5024\u3092\u4e0e\u3048\u305f\u3044\u5834\u5408\u306f query \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b SQL \u306e\u5f15\u6570\u306e\u578b\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n// \u540d\u524d\u304c\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef user(name: String): Option[Int] = {\n  DB withSession {\n    val query = Q.query[String, Int](\"\"\"\n      select id from users\n        where name = ?\n    \"\"\")\n    query(name).firstOption\n  }\n}\n\n\u5f15\u6570\u304c\u8907\u6570\u306e\u5834\u5408\u306f\u30bf\u30d7\u30eb\u3067\u6e21\u3057\u307e\u3059\u3002\n// city, age \u304c\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef uesrs(city: String, age: Int): Option[Int] = {\n  DB withSession {\n    val query = Q.query[(Int, Int), Int](\"\"\"\n      select id from users\n        where age = ? and city = ?\n    \"\"\")\n    query((age, city))..firstOption\n  }\n}\n\n\n\u5f15\u6570\u306b\u65e5\u6642\u3092\u53d6\u308b\n\u5f15\u6570\u306b\u65e5\u6642\u3092\u53d6\u308b\u5834\u5408\u306f\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u6e21\u3057\u307e\u3059\u3002\nimport org.joda.time.DateTime\n\n// \u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u3088\u308a\u5f8c\u306b\u4f5c\u6210\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef users(dateTime: DateTime): List[Int] = {\n  DB withSession {\n    val query = Q.query[String, Long](\"\"\"\n      select id from users\n        where createdAt > ?\n    \"\"\")\n    query(\n      dateTime.toString(\"yyyy-MM-dd HH:mm:ss\")\n    ).list\n  }\n}\n\n\nin \u3092\u4f7f\u3046\nList \u3092\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3088\u3046\u306a\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u307e\u305f\u3001\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3068\u5c55\u958b\u6642\u306b\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u308f\u308c\u3066\u3057\u307e\u3046\u306e\u3067\uff08 IN (\"1,2,3\") \uff09\u3068\u306a\u308a\u610f\u56f3\u3057\u305f SQL \u306b\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6587\u5b57\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\u3002\n// \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc id \u304c\u5b58\u5728\u3059\u308c\u3070\u8fd4\u3059\ndef users(ids: List[Int]): List[Int] = {\n  DB withSession {\n    val in = ids.mkString(\",\")\n    Q.queryNA[Int)](s\"\"\"\n      select id from users\n        where id in (${in})\n    \"\"\").list\n  }\n}\n\nList \u304c\u7a7a\u306e\u5834\u5408\u3082\u8003\u616e\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u306e\u65b9\u304c\u884c\u5100\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(ids: List[Int]): List[Int] = {\n  DB withSession {\n    val in = ids.isEmpty match {\n      case false => \"false\"\n      case true => \"id in (\" ids.mkString(\",\") + \")\"\n    }\n    Q.queryNA[Int](s\"\"\"\n      select id, screenName from users\n        where ${in}\n    \"\"\").list\n  }\n}\n\nList \u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e SQL \u306b\u306a\u308a\u307e\u3059\u3002\nselect id from users\n  where false or age >= 20\n\n\noffset, limit \u3092\u6307\u5b9a\u3059\u308b\nin \u3068\u540c\u69d8\u306e\u3084\u308a\u304b\u305f\u3067\u6587\u5b57\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\u3002\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(offsetLimitOpt: Option[(Int, Int)]): List[Int] = {\n  DB withSession {\n    val queryOffsetLimit = (offsetOpt, limitOpt) match {\n      case (Some(offset), Some(limit)) => s\"limit ${offset}, ${limit}\"\n      case _ => \"\"\n    }\n    Q.queryNA[Long](s\"\"\"\n      select id, screenName from users\n        ${queryOffsetLimit}\n    \"\"\").list\n  }\n}\n\n\n\u623b\u308a\u5024\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u53d7\u3051\u53d6\u308b\u65b9\u6cd5\n\u623b\u308a\u5024\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f GetResult \u3092\u4f7f\u3044\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u305f\u3081\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ncase class User (\n  id: Int,\n  name: String,\n  email: String\n)\n\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(): List[User] = {\n  DB withSession {\n    implicit val getUser = GetResult(r =>\n      User(r.<<, r.<<, r.<<)\n    )\n    Q.queryNA[User](\"\"\"\n      select * from users\n    \"\"\").list\n  }\n}\n\n\u3053\u306e\u6642 DB \u3067\u306e\u30ab\u30e9\u30e0\u306e\u4e26\u3073\u3068\u30af\u30e9\u30b9\u306e\u5909\u6570\u5b9a\u7fa9\u306e\u4e26\u3073\u304c\u540c\u3058\u3067\u306a\u3044\u3068\u5225\u306e\u30ab\u30e9\u30e0\u306b\u5024\u304c\u5165\u3063\u3066\u3057\u307e\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n+--------------------+\n| Field              |\n+--------------------+\n| id                 |\n| name               |\n| email              |\n+--------------------+\n\ncase class User (\n  id: Int,\n  email: String,\n  name: String\n)\n\nemail <-> name \u306e\u5024\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u307e\u3046\n\nGetResult \u3067\u306f scala \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u578b\u306f r.<< \u3068\u7701\u7565\u3057\u3066\u8868\u8a18\u3059\u308b\u3053\u3068\u3067\u304d\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u6b63\u3057\u304f\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nDateTime -> new DateTime(r.nextTimestamp)\nOptin[DateTime] -> r.nextTimestampOption.map(t => new DateTime(t))\nOption[String] -> r.nextStringOption\n\n// \u4f8b\ncase class User (\n  id: Int,\n  name: String,\n  email: String,\n  createdAt: DateTime\n)\n\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(): List[User] = {\n  DB withSession {\n    implicit val getUser = GetResult(r =>\n      User(r.<<, r.<<, r.<<, new DateTime(r.nextTimestamp))\n    )\n    Q.queryNA[User](\"\"\"\n      select * from users\n    \"\"\").list\n  }\n}\n\n\njoin \u3092\u4f7f\u3063\u3066\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nGetResult \u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570\u5206\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070\u3001\u3042\u3068\u306f\u4eca\u307e\u3067\u306e\u3084\u308a\u65b9\u306e\u5fdc\u7528\u306b\u306a\u308a\u307e\u3059\u3002\n// \u30e6\u30fc\u30b6\u30fc\u3068\u30e6\u30fc\u30b6\u30fc\u306e\u30ed\u30b0\u60c5\u5831\u3092\u53d6\u5f97\ndef users(): List[(User, UserLog)] = {\n  DB withSession {\n    implicit val getUser = GetResult(r => User(r.<<, r.<<, r.<<))\n    implicit val getUserLog = GetResult(r => UserLog(r.<<, r.<<, r.<<))\n     Q.queryNA[(User, UserLog)](\"\"\"\n      select users.*, userLogs.* from users\n        inner join userLogs on userLogs.userId = users.id\n    \"\"\").list\n  }\n}\n\n\u5b9f\u884c\u6642\u306b\u30b9\u30ed\u30fc\u30af\u30a8\u30ea\u3092\u307f\u3066\u307f\u308b\u3068\u3001join \u3092\u4f7f\u3063\u305f\u7b87\u6240\u304c\u591a\u304f\u30d2\u30c3\u30c8\u3057\u307e\u3059\u3002Slick2 \u3067 join \u3092\u884c\u3046\u3068\u30b5\u30d6\u30af\u30a8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u3001\u305d\u306e\u305b\u3044\u304b\u3069\u3046\u304c\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u4f7f\u7528\u3055\u308c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u5168\u3066 SQL \u3067\u66f8\u304d\u76f4\u3059\u3053\u3068\u3067\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u884c\u3048\u307e\u3059\u3002\n\nSQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u901f\u304f\u306a\u308b\n\u4ee5\u4e0b\u306e\u69d8\u306a\u5358\u7d14\u306a\u3082\u306e\u3067\u3082\u5b9f\u884c\u6642\u9593\u304c\uff16\u30df\u30ea\u79d2\u304b\u3089\uff12\u30df\u30ea\u79d2\u306b\u77ed\u7e2e\u3055\u308c\u307e\u3057\u305f\u3002\n// \u4fee\u6b63\u524d\nslickUsers.filter(\n  _.id === id\n).firstOption\n\n// \u4fee\u6b63\u5f8c\nval query = Q.query[Int, Int](\"\"\"\n  select id from users\n  where id = ?\n\"\"\")\nquery(id).firstOption\n\n\n\u3067\u304d\u306a\u3044\u4e8b\nUser \u306b UserLog \u3092 left join \u3057\u3001UserLog \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3067\u3082 User \u3092\u3068\u308a\u305f\u3044\u3088\u3046\u306a\u5834\u5408\u3002\u623b\u308a\u5024\u3092(User, Option[UserLog]) \u306e\u5f62\u5f0f\u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306a\u65b9\u6cd5\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\nSQL \u3067\u66f8\u304d\u306a\u304a\u305b\u3070\u305f\u3044\u3066\u3044\u901f\u304f\u306a\u308a\u307e\u3059\u3002\u901f\u5ea6\u3067\u554f\u984c\u306b\u306a\u3063\u305f\u3068\u304d\u306e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nScala \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53c2\u52a0\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u3067\u4f7f\u308f\u308c\u3066\u3044\u305f Slick2 \u304c\u3042\u307e\u308a\u306b\u3082\u9045\u304f\u898b\u3065\u3089\u3044 SQL \u3092\u51fa\u529b\u3057\u3066\u3044\u305f\u305f\u3081 SQL \u3092\u76f4\u306b\u53e9\u304f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u63db\u3048\u9ad8\u901f\u5316\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u6642\u306e\u624b\u6cd5\u3092\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002Slick2 \u304c\u51fa\u529b\u3059\u308b SQL \u3067\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u52b9\u304b\u306a\u304f\u306a\u308b\u4e8b\u3082\u591a\u304b\u3063\u305f\u306e\u3067\u3001\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n## \u691c\u7d22\u6761\u4ef6\u3092\u5f15\u6570\u306b\u53d6\u3089\u306a\u3044 SQL \u306e\u5b9f\u884c\n\n\u3082\u3063\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a SQL \u3067\u3059\u306d\u3002 queryNA \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```\nimport play.api.db.slick._\nimport scala.slick.jdbc.{StaticQuery => Q}\n\n// \u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306e id \u3092\u8fd4\u3059\ndef users(): List[Int] = {\n  DB withSession {\n    Q.queryNA[Int](\"\"\"\n      select id from users\n    \"\"\").list\n  }\n}\n```\n\n\u623b\u308a\u5024\u304c\u8907\u6570\u306e\u5834\u5408\u306f\u30bf\u30d7\u30eb\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\n// \u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306e id \u3068 \u540d\u524d\u3092\u8fd4\u3059\ndef select(): List[(Int, String)] = {\n  DB withSession {\n    Q.queryNA[(Int, String)](\"\"\"\n      select id, name from users\n    \"\"\").list\n  }\n}\n```\n\n## \u691c\u7d22\u6761\u4ef6\u3092\u5f15\u6570\u306b\u53d6\u308b SQL \u306e\u5b9f\u884c\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089 where \u306b\u5024\u3092\u4e0e\u3048\u305f\u3044\u5834\u5408\u306f query \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b SQL \u306e\u5f15\u6570\u306e\u578b\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\n// \u540d\u524d\u304c\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef user(name: String): Option[Int] = {\n  DB withSession {\n    val query = Q.query[String, Int](\"\"\"\n      select id from users\n        where name = ?\n    \"\"\")\n    query(name).firstOption\n  }\n}\n```\n\n\u5f15\u6570\u304c\u8907\u6570\u306e\u5834\u5408\u306f\u30bf\u30d7\u30eb\u3067\u6e21\u3057\u307e\u3059\u3002\n\n```\n// city, age \u304c\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef uesrs(city: String, age: Int): Option[Int] = {\n  DB withSession {\n    val query = Q.query[(Int, Int), Int](\"\"\"\n      select id from users\n        where age = ? and city = ?\n    \"\"\")\n    query((age, city))..firstOption\n  }\n}\n```\n\n## \u5f15\u6570\u306b\u65e5\u6642\u3092\u53d6\u308b\n\n\u5f15\u6570\u306b\u65e5\u6642\u3092\u53d6\u308b\u5834\u5408\u306f\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u6e21\u3057\u307e\u3059\u3002\n\n```\nimport org.joda.time.DateTime\n\n// \u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u3088\u308a\u5f8c\u306b\u4f5c\u6210\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u8fd4\u3059\ndef users(dateTime: DateTime): List[Int] = {\n  DB withSession {\n    val query = Q.query[String, Long](\"\"\"\n      select id from users\n        where createdAt > ?\n    \"\"\")\n    query(\n      dateTime.toString(\"yyyy-MM-dd HH:mm:ss\")\n    ).list\n  }\n}\n```\n\n## in \u3092\u4f7f\u3046\n\nList \u3092\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3088\u3046\u306a\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u307e\u305f\u3001\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3068\u5c55\u958b\u6642\u306b\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u308f\u308c\u3066\u3057\u307e\u3046\u306e\u3067\uff08 IN (\"1,2,3\") \uff09\u3068\u306a\u308a\u610f\u56f3\u3057\u305f SQL \u306b\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6587\u5b57\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\u3002\n\n```\n// \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc id \u304c\u5b58\u5728\u3059\u308c\u3070\u8fd4\u3059\ndef users(ids: List[Int]): List[Int] = {\n  DB withSession {\n    val in = ids.mkString(\",\")\n    Q.queryNA[Int)](s\"\"\"\n      select id from users\n        where id in (${in})\n    \"\"\").list\n  }\n}\n```\n\nList \u304c\u7a7a\u306e\u5834\u5408\u3082\u8003\u616e\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u306e\u65b9\u304c\u884c\u5100\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(ids: List[Int]): List[Int] = {\n  DB withSession {\n    val in = ids.isEmpty match {\n      case false => \"false\"\n      case true => \"id in (\" ids.mkString(\",\") + \")\"\n    }\n    Q.queryNA[Int](s\"\"\"\n      select id, screenName from users\n        where ${in}\n    \"\"\").list\n  }\n}\n```\n\nList \u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e SQL \u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nselect id from users\n  where false or age >= 20\n```\n\n## offset, limit \u3092\u6307\u5b9a\u3059\u308b\n\nin \u3068\u540c\u69d8\u306e\u3084\u308a\u304b\u305f\u3067\u6587\u5b57\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\u3002\n\n```\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(offsetLimitOpt: Option[(Int, Int)]): List[Int] = {\n  DB withSession {\n    val queryOffsetLimit = (offsetOpt, limitOpt) match {\n      case (Some(offset), Some(limit)) => s\"limit ${offset}, ${limit}\"\n      case _ => \"\"\n    }\n    Q.queryNA[Long](s\"\"\"\n      select id, screenName from users\n        ${queryOffsetLimit}\n    \"\"\").list\n  }\n}\n```\n\n\n## \u623b\u308a\u5024\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u53d7\u3051\u53d6\u308b\u65b9\u6cd5\n\n\u623b\u308a\u5024\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f GetResult \u3092\u4f7f\u3044\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u305f\u3081\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\ncase class User (\n  id: Int,\n  name: String,\n  email: String\n)\n\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(): List[User] = {\n  DB withSession {\n    implicit val getUser = GetResult(r =>\n      User(r.<<, r.<<, r.<<)\n    )\n    Q.queryNA[User](\"\"\"\n      select * from users\n    \"\"\").list\n  }\n}\n```\n\n\u3053\u306e\u6642 DB \u3067\u306e\u30ab\u30e9\u30e0\u306e\u4e26\u3073\u3068\u30af\u30e9\u30b9\u306e\u5909\u6570\u5b9a\u7fa9\u306e\u4e26\u3073\u304c\u540c\u3058\u3067\u306a\u3044\u3068\u5225\u306e\u30ab\u30e9\u30e0\u306b\u5024\u304c\u5165\u3063\u3066\u3057\u307e\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```\n+--------------------+\n| Field              |\n+--------------------+\n| id                 |\n| name               |\n| email              |\n+--------------------+\n\ncase class User (\n  id: Int,\n  email: String,\n  name: String\n)\n\nemail <-> name \u306e\u5024\u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3057\u307e\u3046\n```\n\nGetResult \u3067\u306f scala \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u578b\u306f r.<< \u3068\u7701\u7565\u3057\u3066\u8868\u8a18\u3059\u308b\u3053\u3068\u3067\u304d\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u6b63\u3057\u304f\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n+ DateTime -> new DateTime(r.nextTimestamp)\n+ Optin[DateTime] -> r.nextTimestampOption.map(t => new DateTime(t))\n+ Option[String] -> r.nextStringOption\n\n```\n// \u4f8b\ncase class User (\n  id: Int,\n  name: String,\n  email: String,\n  createdAt: DateTime\n)\n\n// \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\ndef users(): List[User] = {\n  DB withSession {\n    implicit val getUser = GetResult(r =>\n      User(r.<<, r.<<, r.<<, new DateTime(r.nextTimestamp))\n    )\n    Q.queryNA[User](\"\"\"\n      select * from users\n    \"\"\").list\n  }\n}\n```\n\n## join \u3092\u4f7f\u3063\u3066\u8907\u6570\u30c6\u30fc\u30d6\u30eb\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\n\nGetResult \u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570\u5206\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070\u3001\u3042\u3068\u306f\u4eca\u307e\u3067\u306e\u3084\u308a\u65b9\u306e\u5fdc\u7528\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n// \u30e6\u30fc\u30b6\u30fc\u3068\u30e6\u30fc\u30b6\u30fc\u306e\u30ed\u30b0\u60c5\u5831\u3092\u53d6\u5f97\ndef users(): List[(User, UserLog)] = {\n  DB withSession {\n    implicit val getUser = GetResult(r => User(r.<<, r.<<, r.<<))\n    implicit val getUserLog = GetResult(r => UserLog(r.<<, r.<<, r.<<))\n     Q.queryNA[(User, UserLog)](\"\"\"\n      select users.*, userLogs.* from users\n        inner join userLogs on userLogs.userId = users.id\n    \"\"\").list\n  }\n}\n```\n\n\u5b9f\u884c\u6642\u306b\u30b9\u30ed\u30fc\u30af\u30a8\u30ea\u3092\u307f\u3066\u307f\u308b\u3068\u3001join \u3092\u4f7f\u3063\u305f\u7b87\u6240\u304c\u591a\u304f\u30d2\u30c3\u30c8\u3057\u307e\u3059\u3002Slick2 \u3067 join \u3092\u884c\u3046\u3068\u30b5\u30d6\u30af\u30a8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u3001\u305d\u306e\u305b\u3044\u304b\u3069\u3046\u304c\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u4f7f\u7528\u3055\u308c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u5168\u3066 SQL \u3067\u66f8\u304d\u76f4\u3059\u3053\u3068\u3067\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u884c\u3048\u307e\u3059\u3002\n\n## SQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u901f\u304f\u306a\u308b\n\n\u4ee5\u4e0b\u306e\u69d8\u306a\u5358\u7d14\u306a\u3082\u306e\u3067\u3082\u5b9f\u884c\u6642\u9593\u304c\uff16\u30df\u30ea\u79d2\u304b\u3089\uff12\u30df\u30ea\u79d2\u306b\u77ed\u7e2e\u3055\u308c\u307e\u3057\u305f\u3002\n\n```\n// \u4fee\u6b63\u524d\nslickUsers.filter(\n  _.id === id\n).firstOption\n```\n```\n// \u4fee\u6b63\u5f8c\nval query = Q.query[Int, Int](\"\"\"\n  select id from users\n  where id = ?\n\"\"\")\nquery(id).firstOption\n```\n\n## \u3067\u304d\u306a\u3044\u4e8b\n\nUser \u306b UserLog \u3092 left join \u3057\u3001UserLog \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3067\u3082 User \u3092\u3068\u308a\u305f\u3044\u3088\u3046\u306a\u5834\u5408\u3002\u623b\u308a\u5024\u3092(User, Option[UserLog]) \u306e\u5f62\u5f0f\u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306a\u65b9\u6cd5\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\n## \u304a\u308f\u308a\u306b\n\nSQL \u3067\u66f8\u304d\u306a\u304a\u305b\u3070\u305f\u3044\u3066\u3044\u901f\u304f\u306a\u308a\u307e\u3059\u3002\u901f\u5ea6\u3067\u554f\u984c\u306b\u306a\u3063\u305f\u3068\u304d\u306e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Scala", "slick", "slick2", "SQL"]}