{"context": " More than 1 year has passed since last update.Slick\u306b\u306f\u7d20\u306eSQL\u3092\u6587\u5b57\u5217\u3067\u66f8\u304f\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\nhttp://slick.typesafe.com/doc/3.0.2/sql.html\n\u3053\u308c\u3092\u4f7f\u3063\u3066users\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u8a66\u3057\u305f\u306e\u306f\u3001Scala2.11.6, Slick3.0.0\u3067\u3059\u3002\ncase class User(id: Int, email: String, name: String, age: Option[Int], address: Option[String])\n\ndef selectUsers: DBIO[Seq[User]] = sql\"\"\"\n  SELECT\n    id,\n    email,\n    name,\n    age,\n    address\n  FROM\n    users\n  \"\"\".as[User]\n\nimplicit def getUserResult = GetResult { r=> User(r.nextInt, r.nextString, r.nextString, r.nextInt, r.nextString) }\n\nSQL\u306e\u7d50\u679c\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u308b\u306e\u304c getUserResult \u30e1\u30bd\u30c3\u30c9\u306a\u308f\u3051\u3067\u3059\u304c\u3001r.nextInt \u3068\u304b\u306fJDBC\u306eResultSet\u3092\u5f77\u5f7f\u3068\u3055\u305b\u307e\u3059\u306d\u3002\nr\u306fPositionedResult\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\nr.nextInt\u3068\u304b\u306f\u3001r.<<\u3068\u66f8\u304f\u3068\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\nimplicit def getUserResult = GetResult { r => User(r.<<, r.<<, r.<<, r.<<, r.<<) }\n\n\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u3063\u305f\u3051\u3069\u3001r.<<\u306e\u6570\u3092\u6c17\u306b\u3059\u308b\u306e\u304c\u9762\u5012\u3067\u3059\u3002\u4ed6\u306eSQL\u3082\u66f8\u3044\u3066\u308b\u3068\u30dc\u30a4\u30e9\u30fc\u30d7\u30ec\u30fc\u30c8\u5316\u3057\u307e\u3059\u3057\u3001\u3069\u3046\u306b\u304b\u306a\u3089\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u30de\u30af\u30ed\u3092\u4f5c\u3063\u3066\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f5c\u3063\u305f\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3068\u4e0b\u306e\u3088\u3046\u306b\u3001createObj\u30e1\u30bd\u30c3\u30c9\u306b\u751f\u6210\u3057\u305f\u3044\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u578b\u3092\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3001GetResult\u5185\u306e\u95a2\u6570\u3067\u53d7\u3051\u53d6\u308br\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u6e21\u3059\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002r.<<\u3092\u4f55\u56de\u3082\u66f8\u304b\u306a\u304f\u3066\u3088\u304f\u306a\u308a\u307e\u3057\u305f\uff01\nimplicit def getUserResult = GetResult { r => createObj[User](r) }\n\nr\u30921\u56de\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u304b\u3089_\u3092\u4f7f\u3048\u307e\u3059\u306d\u3002\nimplicit def getUserResult = GetResult { createObj[User](_) }\n\n\u30de\u30af\u30ed\u306e\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\npackage mymacros\n\nimport scala.language.experimental.macros\nimport scala.reflect.macros.blackbox\n\nimport slick.jdbc.PositionedResult\n\nobject MyMacro {\n  // \u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308b\u5074\u304b\u3089\u547c\u3073\u51fa\u3059\u30e1\u30bd\u30c3\u30c9\n  def createObj[A](r: PositionedResult): A = macro createObjImpl[A]\n\n  // \u30de\u30af\u30ed\u306e\u5b9f\u88c5\n  def createObjImpl[A: c.WeakTypeTag](c: blackbox.Context)(r: c.Expr[PositionedResult]) = {\n    import c.universe._\n\n    // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u53d6\u5f97\n    val caseClassSym: c.universe.Symbol = c.weakTypeOf[A].typeSymbol\n    if (!caseClassSym.isClass || !caseClassSym.asClass.isCaseClass) c.abort(c.enclosingPosition, s\"$caseClassSym is not a case class\")\n\n    // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\n    val fields = caseClassSym.typeSignature.decls.filter {\n      case x: TermSymbol => x.isVal && x.isCaseAccessor\n      case _ => false\n    }\n\n    // rr.<<, rr.<<\u30fb\u30fb\u30fb\n    val params = fields.map(_ => q\"rr.<<\")\n\n    // User(r.<<, r.<< \u30fb\u30fb\u30fb) \u3063\u3066\u3044\u3046\u30b3\u30fc\u30c9\n    val code = q\"\"\"\n    val rr = $r\n    ${caseClassSym.name.toTermName}(..$params)\n    \"\"\"\n\n    code\n  }\n}\n\n\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nhttp://matsu-chara.hatenablog.com/entry/2015/06/21/110000\nhttp://docs.scala-lang.org/ja/overviews/macros/overview.html\nhttp://docs.scala-lang.org/ja/overviews/reflection/overview.html\nhttp://d.hatena.ne.jp/xuwei/20140831/1409462088\n\n\u521d\u3081\u3066\u30de\u30af\u30ed\u4f5c\u3063\u3066\u307f\u305f\u3093\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u52d5\u4f5c\u3059\u308b\u3082\u306e\u3060\u304b\u3089\u4e8b\u524d\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3093\u3067\u3059\u306d\u30fc\u3002sbt\u3067\u81ea\u4f5c\u30de\u30af\u30ed\u3092\u4f7f\u3046\u306e\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nhttp://waman.hatenablog.com/entry/2014/11/03/023618\n\nSlick\u306b\u306f\u7d20\u306eSQL\u3092\u6587\u5b57\u5217\u3067\u66f8\u304f\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n<http://slick.typesafe.com/doc/3.0.2/sql.html>\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066users\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u8a66\u3057\u305f\u306e\u306f\u3001Scala2.11.6, Slick3.0.0\u3067\u3059\u3002\n\n```scala\ncase class User(id: Int, email: String, name: String, age: Option[Int], address: Option[String])\n\ndef selectUsers: DBIO[Seq[User]] = sql\"\"\"\n  SELECT\n    id,\n    email,\n    name,\n    age,\n    address\n  FROM\n    users\n  \"\"\".as[User]\n\nimplicit def getUserResult = GetResult { r=> User(r.nextInt, r.nextString, r.nextString, r.nextInt, r.nextString) }\n```\n\nSQL\u306e\u7d50\u679c\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3064\u304f\u308b\u306e\u304c `getUserResult` \u30e1\u30bd\u30c3\u30c9\u306a\u308f\u3051\u3067\u3059\u304c\u3001`r.nextInt` \u3068\u304b\u306fJDBC\u306eResultSet\u3092\u5f77\u5f7f\u3068\u3055\u305b\u307e\u3059\u306d\u3002\n\n`r`\u306f`PositionedResult`\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n`r.nextInt`\u3068\u304b\u306f\u3001`r.<<`\u3068\u66f8\u304f\u3068\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\n```scala\nimplicit def getUserResult = GetResult { r => User(r.<<, r.<<, r.<<, r.<<, r.<<) }\n```\n\n\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u3063\u305f\u3051\u3069\u3001`r.<<`\u306e\u6570\u3092\u6c17\u306b\u3059\u308b\u306e\u304c\u9762\u5012\u3067\u3059\u3002\u4ed6\u306eSQL\u3082\u66f8\u3044\u3066\u308b\u3068\u30dc\u30a4\u30e9\u30fc\u30d7\u30ec\u30fc\u30c8\u5316\u3057\u307e\u3059\u3057\u3001\u3069\u3046\u306b\u304b\u306a\u3089\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u30de\u30af\u30ed\u3092\u4f5c\u3063\u3066\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f5c\u3063\u305f\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3068\u4e0b\u306e\u3088\u3046\u306b\u3001`createObj`\u30e1\u30bd\u30c3\u30c9\u306b\u751f\u6210\u3057\u305f\u3044\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u578b\u3092\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3001`GetResult`\u5185\u306e\u95a2\u6570\u3067\u53d7\u3051\u53d6\u308b`r`\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u6e21\u3059\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002`r.<<`\u3092\u4f55\u56de\u3082\u66f8\u304b\u306a\u304f\u3066\u3088\u304f\u306a\u308a\u307e\u3057\u305f\uff01\n\n```scala\nimplicit def getUserResult = GetResult { r => createObj[User](r) }\n```\n\n`r`\u30921\u56de\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u304b\u3089`_`\u3092\u4f7f\u3048\u307e\u3059\u306d\u3002\n\n```scala\nimplicit def getUserResult = GetResult { createObj[User](_) }\n```\n\n\u30de\u30af\u30ed\u306e\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```scala\npackage mymacros\n\nimport scala.language.experimental.macros\nimport scala.reflect.macros.blackbox\n\nimport slick.jdbc.PositionedResult\n\nobject MyMacro {\n  // \u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308b\u5074\u304b\u3089\u547c\u3073\u51fa\u3059\u30e1\u30bd\u30c3\u30c9\n  def createObj[A](r: PositionedResult): A = macro createObjImpl[A]\n\n  // \u30de\u30af\u30ed\u306e\u5b9f\u88c5\n  def createObjImpl[A: c.WeakTypeTag](c: blackbox.Context)(r: c.Expr[PositionedResult]) = {\n    import c.universe._\n\n    // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u53d6\u5f97\n    val caseClassSym: c.universe.Symbol = c.weakTypeOf[A].typeSymbol\n    if (!caseClassSym.isClass || !caseClassSym.asClass.isCaseClass) c.abort(c.enclosingPosition, s\"$caseClassSym is not a case class\")\n\n    // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\n    val fields = caseClassSym.typeSignature.decls.filter {\n      case x: TermSymbol => x.isVal && x.isCaseAccessor\n      case _ => false\n    }\n\n    // rr.<<, rr.<<\u30fb\u30fb\u30fb\n    val params = fields.map(_ => q\"rr.<<\")\n\n    // User(r.<<, r.<< \u30fb\u30fb\u30fb) \u3063\u3066\u3044\u3046\u30b3\u30fc\u30c9\n    val code = q\"\"\"\n    val rr = $r\n    ${caseClassSym.name.toTermName}(..$params)\n    \"\"\"\n\n    code\n  }\n}\n```\n\n\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n- http://matsu-chara.hatenablog.com/entry/2015/06/21/110000\n- http://docs.scala-lang.org/ja/overviews/macros/overview.html\n- http://docs.scala-lang.org/ja/overviews/reflection/overview.html\n- http://d.hatena.ne.jp/xuwei/20140831/1409462088\n\n\u521d\u3081\u3066\u30de\u30af\u30ed\u4f5c\u3063\u3066\u307f\u305f\u3093\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u52d5\u4f5c\u3059\u308b\u3082\u306e\u3060\u304b\u3089\u4e8b\u524d\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3093\u3067\u3059\u306d\u30fc\u3002sbt\u3067\u81ea\u4f5c\u30de\u30af\u30ed\u3092\u4f7f\u3046\u306e\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n- http://waman.hatenablog.com/entry/2014/11/03/023618\n", "tags": ["Scala", "slick"]}