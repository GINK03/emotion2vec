{"context": " More than 1 year has passed since last update.\u3042\u308b\u7a2e\u306e\u30c7\u30fc\u30bf\u306e\u578b\u3082\u30b5\u30a4\u30ba\u3082\u4e0d\u5b9a\u306a\u30b7\u30ea\u30a2\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u7ba1\u7406\u3057\u3066\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8907\u6570\u4f5c\u3063\u3066vector\u3067\u7ba1\u7406\u3057\u305f\u3044\u3068\u3059\u308b\u3002\n\u30c7\u30fc\u30bf\u578b\u3082\u30b5\u30a4\u30ba\u3082\u4e0d\u5b9a\u306a\u70ba\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5229\u7528\u3059\u308b\u3002\ntemplate<typename T>\nclass DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n};\n\n\u3067\u3053\u308c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3044\u3063\u3071\u3044\u4f5c\u3063\u3066\u3001vector\u3067\u7ba1\u7406\u3057\u3088\u3046\u3068\u3057\u3066\u3082\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\nint main(int argc, const char * argv[]) {\n    vector<DataHolder<double>> dataVector;\n    DataHolder<double> d1({1.3, 2.4, 3.3});\n    DataHolder<string> d2({\"hello\", \"bye\"});\n    dataVector.push_back(d1);\n    // dataVector.push_back(d2);\n    return 0;\n}\n\n\u5f53\u7136double\u3068string\u3067\uff12\u3064\u306e\u30af\u30e9\u30b9\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4f5c\u308b\u308f\u3051\u3067\u3001\u305d\u308c\u3092\u4e00\u3064vector\u306b\u5165\u308c\u308b\u306e\u306f\u4e0d\u53ef\u80fd\u3002\u3069\u3046\u3057\u3066\u3082\u5165\u308c\u305f\u3044\u5834\u5408\u306f\u3001\u52d5\u7684\u306b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092vector\u306b\u3044\u308c\u308b\u3057\u304b\u306a\u3044\u3002\n\u3067\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306f\u5f53\u7136\u4f7f\u3044\u305f\u304f\u306a\u3044\u306e\u3067shared_ptr\u304bunique_ptr\u3060\u304c\u3001shared_ptr\u3092\u5165\u308c\u308b\u3002\n#include <iostream>\n#include <vector>\n#include <memory>\n\nusing namespace std;\n\nclass _DataHolder{\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n\n    auto d1 = static_cast<DataHolder<double>*>(dataVector[0].get())->getData();\n    auto d2 = static_cast<DataHolder<string>*>(dataVector[1].get())->getData();\n\n    cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    cout << d2[0] << \" \" << d2[1] << endl;\n\n    return 0;\n}\n\n\u3053\u308c\u3067\u4e00\u5fdc\u3001\u4e0d\u5b9a\u30c7\u30fc\u30bf\u3092\u6301\u3064\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092vector\u3067\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u304c...\u3002\n\u53d7\u3051\u53d6\u308b\u6642\u306b\u5f53\u7136\u30ad\u30e3\u30b9\u30c8\u3092\u9593\u9055\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070\n\n\n#include <iostream>\n#include <vector>\n#include <memory>\n\nusing namespace std;\n\nclass _DataHolder{\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n\n    auto d1 = static_cast<DataHolder<string>*>(dataVector[0].get())->getData();\n    auto d2 = static_cast<DataHolder<double>*>(dataVector[1].get())->getData();\n\n    cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    cout << d2[0] << \" \" << d2[1] << endl;\n\n    return 0;\n}\n\n\u3060\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u98df\u3089\u3046\u304b\u3089\u3001\u306a\u3093\u3089\u304b\u306e\u624b\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\u3067\u3082\u3069\u3046\u3084\u3063\u3066\uff1f\ntypeid\u3068\u304b\u3069\u3053\u304b\u3067\u4f7f\u3046\u3068\u304b\u304b\u306a\u3041\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u3057\u305f\u304c\u3063\u3066dynamic_cast\u3092\u4f7f\u3063\u3066\u3001\u578b\u3092\u9593\u9055\u3063\u305f\u5834\u5408\u306b\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nusing namespace std;\n\nclass _DataHolder{\n    virtual void dummy(){};\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n    virtual void dummy(){}\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n\n    auto dh1 = dynamic_cast<DataHolder<string>*>(dataVector[0].get());\n    if (dh1 != nullptr) {\n        auto d1 = dh1->getData();\n        cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    }\n    auto dh2 = dynamic_cast<DataHolder<double>*>(dataVector[1].get());\n    if (dh2 != nullptr){\n        auto d2 = dh1->getData();\n        cout << d2[0] << \" \" << d2[1] << endl;\n    }\n    return 0;\n}\n\nkktk-KO\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u3057\u305f\u304c\u3063\u3066boost::any\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nC++\u3068\u306f\u601d\u3048\u306a\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u5f53\u7136\u306a\u304c\u3089boost::any_cast\u3067\u623b\u3059\u6642\u306b\u9593\u9055\u3063\u305f\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001typeid\u3092\u4f7f\u3063\u3066\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n#include <boost/any.hpp>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    vector< boost::any > dataVector;\n\n    dataVector.push_back(vector<double>({1.3, 2.4, 3.3}));\n    dataVector.push_back(vector<string>({string(\"hello\"), string(\"bye\")}));\n\n    auto dh1 = dataVector[0];\n\n    if (dh1.type() == typeid(vector<double>)){\n        auto d1 = boost::any_cast<vector<double>>(dh1);\n        for (double d : d1){\n            cout << d << \" \";\n        }\n        cout << endl;\n    }\n    auto dh2 = dataVector[1];\n    if (dh2.type() == typeid(vector<string>)){\n        auto d2 = boost::any_cast<vector<string>>(dh2);\n        for (string d : d2){\n            cout << d << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n\n\n\u3042\u308b\u7a2e\u306e\u30c7\u30fc\u30bf\u306e\u578b\u3082\u30b5\u30a4\u30ba\u3082\u4e0d\u5b9a\u306a\u30b7\u30ea\u30a2\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u7ba1\u7406\u3057\u3066\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8907\u6570\u4f5c\u3063\u3066vector\u3067\u7ba1\u7406\u3057\u305f\u3044\u3068\u3059\u308b\u3002\n\n\u30c7\u30fc\u30bf\u578b\u3082\u30b5\u30a4\u30ba\u3082\u4e0d\u5b9a\u306a\u70ba\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5229\u7528\u3059\u308b\u3002\n\n```\ntemplate<typename T>\nclass DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n};\n```\n\u3067\u3053\u308c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3044\u3063\u3071\u3044\u4f5c\u3063\u3066\u3001vector\u3067\u7ba1\u7406\u3057\u3088\u3046\u3068\u3057\u3066\u3082\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\n```\nint main(int argc, const char * argv[]) {\n    vector<DataHolder<double>> dataVector;\n    DataHolder<double> d1({1.3, 2.4, 3.3});\n    DataHolder<string> d2({\"hello\", \"bye\"});\n    dataVector.push_back(d1);\n    // dataVector.push_back(d2);\n    return 0;\n}\n```\n\u5f53\u7136double\u3068string\u3067\uff12\u3064\u306e\u30af\u30e9\u30b9\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4f5c\u308b\u308f\u3051\u3067\u3001\u305d\u308c\u3092\u4e00\u3064vector\u306b\u5165\u308c\u308b\u306e\u306f\u4e0d\u53ef\u80fd\u3002\u3069\u3046\u3057\u3066\u3082\u5165\u308c\u305f\u3044\u5834\u5408\u306f\u3001\u52d5\u7684\u306b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092vector\u306b\u3044\u308c\u308b\u3057\u304b\u306a\u3044\u3002\n\u3067\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u306f\u5f53\u7136\u4f7f\u3044\u305f\u304f\u306a\u3044\u306e\u3067shared_ptr\u304bunique_ptr\u3060\u304c\u3001shared_ptr\u3092\u5165\u308c\u308b\u3002\n\n```\n#include <iostream>\n#include <vector>\n#include <memory>\n\nusing namespace std;\n\nclass _DataHolder{\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n    \n    auto d1 = static_cast<DataHolder<double>*>(dataVector[0].get())->getData();\n    auto d2 = static_cast<DataHolder<string>*>(dataVector[1].get())->getData();\n\n    cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    cout << d2[0] << \" \" << d2[1] << endl;\n\n    return 0;\n}\n```\n\u3053\u308c\u3067\u4e00\u5fdc\u3001\u4e0d\u5b9a\u30c7\u30fc\u30bf\u3092\u6301\u3064\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092vector\u3067\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u304c...\u3002\n\n\u53d7\u3051\u53d6\u308b\u6642\u306b\u5f53\u7136\u30ad\u30e3\u30b9\u30c8\u3092\u9593\u9055\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070\n\n```\n\n\n#include <iostream>\n#include <vector>\n#include <memory>\n\nusing namespace std;\n\nclass _DataHolder{\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n    \n    auto d1 = static_cast<DataHolder<string>*>(dataVector[0].get())->getData();\n    auto d2 = static_cast<DataHolder<double>*>(dataVector[1].get())->getData();\n\n    cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    cout << d2[0] << \" \" << d2[1] << endl;\n\n    return 0;\n}\n```\n\u3060\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u98df\u3089\u3046\u304b\u3089\u3001\u306a\u3093\u3089\u304b\u306e\u624b\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\u3067\u3082\u3069\u3046\u3084\u3063\u3066\uff1f\n\ntypeid\u3068\u304b\u3069\u3053\u304b\u3067\u4f7f\u3046\u3068\u304b\u304b\u306a\u3041\u3002\n\n\u4ee5\u4e0b\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u3057\u305f\u304c\u3063\u3066dynamic_cast\u3092\u4f7f\u3063\u3066\u3001\u578b\u3092\u9593\u9055\u3063\u305f\u5834\u5408\u306b\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\nusing namespace std;\n\nclass _DataHolder{\n    virtual void dummy(){};\n};\n\ntemplate<typename T>\nclass DataHolder : public _DataHolder{\n    const vector<T> data;\npublic:\n    DataHolder(const vector<T> &data):data(data){}\n    const vector<T> &getData() const{return data;};\n    virtual void dummy(){}\n};\n\nint main(int argc, const char * argv[]) {\n    vector< shared_ptr<_DataHolder>> dataVector;\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<double>({1.3, 2.4, 3.3})));\n    dataVector.push_back(shared_ptr<_DataHolder>(new DataHolder<string>({\"hello\", \"bye\"})));\n    \n    auto dh1 = dynamic_cast<DataHolder<string>*>(dataVector[0].get());\n    if (dh1 != nullptr) {\n        auto d1 = dh1->getData();\n        cout << d1[0] << \" \" << d1[1] << \" \" << d1[2] << endl;\n    }\n    auto dh2 = dynamic_cast<DataHolder<double>*>(dataVector[1].get());\n    if (dh2 != nullptr){\n        auto d2 = dh1->getData();\n        cout << d2[0] << \" \" << d2[1] << endl;\n    }\n    return 0;\n}\n```\n\nkktk-KO\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u3057\u305f\u304c\u3063\u3066boost::any\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nC++\u3068\u306f\u601d\u3048\u306a\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u5f53\u7136\u306a\u304c\u3089boost::any_cast\u3067\u623b\u3059\u6642\u306b\u9593\u9055\u3063\u305f\u578b\u3092\u6307\u5b9a\u3059\u308b\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001typeid\u3092\u4f7f\u3063\u3066\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\n#include <boost/any.hpp>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    vector< boost::any > dataVector;\n\n    dataVector.push_back(vector<double>({1.3, 2.4, 3.3}));\n    dataVector.push_back(vector<string>({string(\"hello\"), string(\"bye\")}));\n    \n    auto dh1 = dataVector[0];\n    \n    if (dh1.type() == typeid(vector<double>)){\n        auto d1 = boost::any_cast<vector<double>>(dh1);\n        for (double d : d1){\n            cout << d << \" \";\n        }\n        cout << endl;\n    }\n    auto dh2 = dataVector[1];\n    if (dh2.type() == typeid(vector<string>)){\n        auto d2 = boost::any_cast<vector<string>>(dh2);\n        for (string d : d2){\n            cout << d << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n", "tags": ["C++", "template"]}