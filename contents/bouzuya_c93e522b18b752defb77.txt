{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f bouzuya's RxJS Advent Calendar 2015 \u306e 13 \u65e5\u76ee\u304b\u3064 RxJS Advent Calendar 2015 \u306e 13 \u65e5\u76ee\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u4eca\u65e5\u306f ReactiveX \u306e Connectable Observable Operators \u306b\u3064\u3044\u3066 RxJS \u306e API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3060\u308a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u308a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305f RxJS 4.0.7 \u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nConnectable Observable\n\nConnectableObservable\n\n\nConnectableObservable Source Code\n\nRx.ConnectableObservable \u306f Cold / Hot \u5909\u63db\u30e1\u30bd\u30c3\u30c9\u306e\u8981\u3068\u306a\u308b\u91cd\u8981\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002\u3057\u304b\u3057\u3001RxJS \u306b\u306f ConnectableObservable \u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u308a\u307e\u3059\u304c\u3001 ConnectableObservable \u81ea\u4f53\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093 (\u306a\u305c!) \u3002\nConnectableObservable \u306f Observable \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u6307\u5b9a\u3055\u308c\u305f source \u3092 connect \u547c\u3073\u51fa\u3057\u30bf\u30a4\u30df\u30f3\u30b0\u3067 subscribe \u3057\u307e\u3059\u3002\u5f8c\u7d9a\u306b\u306f\u6307\u5b9a\u3055\u308c\u305f subject \u3092 subscribe \u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002connect \u3067\u304d\u308b Observable \u306a\u306e\u3067 ConnectableObservable \u3067\u3059\u3002\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f ConnectableObservable(source, subject) \u3067\u3059\u3002\u307e\u3060 Subject \u306b\u3064\u3044\u3066\u306f\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\u72ec\u81ea\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u306f\n\nConnectableObservable.prototype.connect\nConnectableObservable.prototype.refCount\n\n\u306e 2 \u3064\u3092\u6301\u3061\u307e\u3059\u3002\u5404\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\nConnectableObservable \u306e\u751f\u6210\u306f Observable.prototype.publish \u3092\u306f\u3058\u3081\u591a\u304f\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u3059\u304b\u3089 Subject \u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u8a18\u4e8b\u5185\u3067\u306f\u6b21\u306e 2 \u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nObservable.prototype.publish\nObservable.prototype.replay\n\n\u3055\u3066\u3001\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nConnectableObservable.prototype.connect / Observable.prototype.publish\n\n\nReactiveX - Connect operator\nReactiveX - Publish operator\nConnectableObservable.prototype.connect API Document\nConnectableObservable.prototype.connect Source Code\nObservable.prototype.publish API Document\nObservable.prototype.publish Source Code\n\nObservable.prototype.publish \u306f ConnectableObservable \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 (subject \u3068\u3057\u3066 Subject \u30af\u30e9\u30b9\u3092\u4f7f\u7528) \u3092\u8fd4\u3057\u307e\u3059\u3002ConnectableObservable.prototype.connect \u306f wrap \u3057\u3066\u3044\u308b source \u306e subscribe \u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\u3044\u308f\u3086\u308b Cold / Hot \u5909\u63db\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002Cold Observable / Hot Observable \u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u66f8\u304d\u307e\u3059\u3002\u3044\u307e\u307e\u3067\u306e Operator \u3068\u306f\u6319\u52d5\u304c\u5927\u304d\u304f\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nimport { Observable } from 'rx';\n\nconst connectableObservable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .publish();\n\nconnectableObservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nconnectableObservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n\nconnectableObservable.connect();\n\n// observer1 subscribed\n// observer2 subscribed\n// do: 1\n// observer1 onNext: 1\n// observer2 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// observer2 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer2 onNext: 3\n// observer1 onCompleted\n// observer2 onCompleted\n\n\u3053\u306e\u4f8b\u3060\u3051\u3092\u898b\u3066\u3082\u4f55\u304c\u3057\u305f\u3044\u306e\u304b\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3046\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u307e\u305a\u6ce8\u76ee\u3059\u3079\u304d\u306f connect \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u306a\u3044\u70b9\u3067\u3059\u3002\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u3066\u304d\u305f Operator \u306f subscribe \u306e\u77ac\u9593\u306b\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u306f\u3058\u3081\u3066\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u4f8b\u3067\u306f\u9055\u3063\u3066\u3044\u3066\u3001subscribe \u3057\u305f\u3042\u3068 connect \u3092\u547c\u3076\u307e\u3067\u6d41\u308c\u307e\u305b\u3093\u3002connect \u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u3059\u308b\u3068\u307e\u3063\u305f\u304f\u5024\u306f\u6d41\u308c\u307e\u305b\u3093\u3002\u51fa\u529b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nobserver1 subscribed\nobserver2 subscribed\n\n\u6b21\u306b\u6ce8\u76ee\u3059\u3079\u304d\u306f do \u306e\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u56de\u6570\u3067\u3059\u3002\u5143\u306e\u30bd\u30fc\u30b9 ([1, 2, 3]) \u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570\u5206 (3 \u56de) \u3057\u304b\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u3066\u304d\u305f Operator \u3067\u3042\u308c\u3070 subscribe \u3054\u3068\u306b\u5225\u306e\u30bd\u30fc\u30b9\u6271\u3044\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\u5143\u306e\u30bd\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570 * Observer \u306e\u500b\u6570 (3 * 2 \u306e 6 \u56de) \u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u305f\u3067\u3057\u3087\u3046\u3002\n\u4e0a\u8a18\u306e 2 \u70b9\u306b\u6ce8\u76ee\u3057\u3064\u3064\u3001publish \u306a\u3057\u306e\u4f8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`));\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// do: 1\n// observer2 onNext: 1\n// do: 2\n// observer2 onNext: 2\n// do: 3\n// observer2 onNext: 3\n// observer2 onCompleted\n// observer2 subscribed\n\npublish \u306e\u6319\u52d5\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f\u8907\u6570\u306e Observer \u306b publish \u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3092\u300c\u5206\u5c90\u300d\u3067\u8aac\u660e\u3055\u308c\u308b\u3053\u3068\u3082\u591a\u3044\u3067\u3059\u3002\n         +----> (observer1)\n         |\n---->(publish)\n         |\n         +----> (observer2)\n\n\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\nCold / Hot \u306b\u95a2\u3057\u3066\u306f\u4ed6\u306e Qiita \u8a18\u4e8b \u300eRx\u306eHot\u3068Cold\u306b\u3064\u3044\u3066 - Qiita\u300f\u3092\u53c2\u7167\u3059\u308b\u3068\u826f\u3044\u3067\u3059\u3002\n\nConnectableObservable.prototype.refCount\n\n\nReactiveX - RefCount operator\nConnectableObservable.prototype.refCount API Document\nConnectableObservable.prototype.refCount Source Code\n\nsubscribe \u3055\u308c\u308b\u305f\u3073\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 dispose \u3055\u308c\u308b\u305f\u3073\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8 (refCount) \u3057\u3001\u6700\u521d\u306e subscribe \u3067\u30bd\u30fc\u30b9\u306b connect \u3057\u3001\u6700\u5f8c\u306e dispose \u3067\u30bd\u30fc\u30b9\u3092 dispose \u3057\u307e\u3059\u3002\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .publish() // returns ConnectableObservable\n  .refCount(); // call ConnectableObservable.prototype.refCount\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// observer2 onCompleted\n// observer2 subscribed\n\n\u307e\u305f\u5206\u304b\u308a\u3065\u3089\u3044\u4f8b\u306a\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u307e\u305a\u6ce8\u76ee\u3059\u3079\u304d\u306f publish \u3057\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a connect \u306e\u547c\u3073\u51fa\u3057\u304c\u306a\u3044\u70b9\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b refCount \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u524d\u8ff0\u306e\u3068\u304a\u308a publish \u306f connect \u3059\u308b\u307e\u3067\u5f8c\u7d9a\u306b\u5024\u3092\u6d41\u3057\u307e\u305b\u3093\u3002\u3057\u304b\u3057 refCount \u306f\u6700\u521d\u306e subscribe \u3067\u81ea\u52d5\u7684\u306b connect \u3057\u307e\u3059\u3002\u305d\u3057\u3066\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306f\u540c\u671f\u7684 (from([1, 2, 3])) \u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\u6700\u521d\u306e subscribe \u3067\u81ea\u52d5\u7684\u306b connect \u3057\u540c\u671f\u7684\u306b\u3059\u3079\u3066\u306e\u5024\u3092\u6d41\u3057\u304d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3059\u304b\u3089 connect \u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 subscribe \u3057\u3066\u3044\u306a\u3044 observer2 \u306b\u306f\u5024\u306f\u6d41\u308c\u307e\u305b\u3093\u3002onCompleted \u304c\u6d41\u308c\u3066\u304a\u3057\u307e\u3044\u3067\u3059\u3002\n\u3082\u3046\u3072\u3068\u3064\u5225\u306e\u4f8b\u3092\u6319\u3052\u307e\u3059\u3002\u30bd\u30fc\u30b9\u304c\u975e\u540c\u671f\u306e\u5834\u5408\u306e\u4f8b\u3092\u6319\u3052\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .interval(100) // async\n  .take(3)       // -0-1-2->\n  .do(value => console.log(`do: ${value}`))\n  .publish() // returns ConnectableObservable\n  .refCount(); // call ConnectableObservable.prototype.refCount\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n\n// observer1 subscribed\n// observer2 subscribed\n// do: 0\n// observer1 onNext: 0\n// observer2 onNext: 0\n// do: 1\n// observer1 onNext: 1\n// observer2 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// observer2 onNext: 2\n// observer1 onCompleted\n// observer2 onCompleted\n\n\u30bd\u30fc\u30b9\u304c\u975e\u540c\u671f\u3067\u3042\u308b\u305f\u3081\u3001observer1 \u306e subscribe \u3067 connect \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u6642\u70b9\u3067\u306f\u5024\u306f\u6d41\u308c\u305a\u306b observer2 \u306e subscribe \u306e\u3042\u3068\u3067\u5024\u304c\u6d41\u308c\u3066\u3044\u307e\u3059\u3002\n2 \u3064\u306e\u4f8b\u304b\u3089 refCount \u306e\u6ce8\u610f\u70b9\u3092\u307e\u3068\u3081\u307e\u3059\u3002\nrefCount \u306f subscribe \u3067\u81ea\u52d5 connect \u3059\u308b\u306e\u3067\u3001connect \u547c\u3073\u51fa\u3057\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8003\u3048\u305a\u306b\u6e08\u307f\u307e\u3059\u304c\u3001\u4ee3\u308f\u308a\u306b\u540c\u671f\u7684\u306a\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306b\u306f\u5024\u3092\u53d6\u308a\u3053\u307c\u3059\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059 (\u975e\u540c\u671f\u3067\u3082\u3082\u3061\u308d\u3093\u5024\u3092\u53d6\u308a\u3053\u307c\u3059\u53ef\u80fd\u6027\u306f\u3042\u308a\u307e\u3059) \u3002\n\nObservable.prototype.replay\n\n\nReactiveX - Replay operator\nObservable.prototype.replay API Document\nObservable.prototype.replay Source Code\n\nObservable.prototype.replay \u306f ConnectableObservable \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 (subject \u3068\u3057\u3066 ReplaySubject \u30af\u30e9\u30b9\u3092\u4f7f\u7528) \u3092\u8fd4\u3057\u307e\u3059\u3002publish \u3068\u306e\u9055\u3044\u306f\u3001publish \u304c Subject \u3092\u4f7f\u3046\u306e\u306b\u5bfe\u3057 replay \u304c ReplaySubject \u3092\u4f7f\u3046\u70b9\u3067\u3059\u3002subscribe \u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u76f4\u8fd1\u306b\u6d41\u308c\u305f\u30c7\u30fc\u30bf\u304c\u518d\u5ea6\u6d41 (replay) \u3055\u308c\u307e\u3059\u3002\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .replay(null, 3) // null = selector, 3 = ReplaySubject buffer\n  .refCount();\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// observer2 onNext: 1\n// do: 1\n// observer2 onNext: 2\n// do: 2\n// observer2 onNext: 3\n// do: 3\n// observer2 onCompleted\n// observer2 subscribed\n\n\u4e0a\u8a18\u306e\u4f8b\u306f\u3001refCount \u306e\u6700\u521d\u306e\u4f8b\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u304c\u3001publish \u3067\u306f\u306a\u304f replay(null, 2) \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002replay(null, 3) \u306f bufferSize \u304c 3 \u306e ReplaySubject \u3067\u3059\u3002\u76f4\u8fd1 3 \u56de\u5206\u3092 replay \u3057\u307e\u3059\u3002\nreplay(null, 3) \u306e null \u306f selector \u3067\u3059\u3002\u5b9f\u306f publish() \u3082 selector \u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001selector \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f ConnectableObservable \u3092\u8fd4\u3057\u307e\u305b\u3093\u3002\u8aac\u660e\u304c\u96e3\u3057\u304f\u306a\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\nReactiveX \u306e Connectable Observable Operators \u3092\u898b\u307e\u3057\u305f\u3002\nConnectableObservable \u3068\u305d\u306e\u30e1\u30bd\u30c3\u30c9 connect \u3068 refCount \u3002\u305d\u3057\u3066 ConnectableObservable \u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9 publish \u3068 replay \u3067\u3059\u3002\n\u4eca\u56de\u306e Cold / Hot \u5909\u63db\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6319\u52d5\u306e\u7406\u89e3\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u306e Operator \u3092\u307e\u3068\u3081\u305f share \u3084 shareReplay \u3084\u3082\u3063\u3068\u4f4e\u30ec\u30a4\u30e4\u30fc\u306a multicast \u306a\u3069\u3092\u5408\u308f\u305b\u3066\u7d39\u4ecb\u3059\u308b\u3053\u3068\u3092\u63a7\u3048\u307e\u3057\u305f\u3002ConnectableObservable \u306e\u5b9f\u88c5\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u89e6\u308c\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u6628\u65e5\u3068\u306f\u6253\u3063\u3066\u5909\u308f\u3063\u3066\u96e3\u3057\u3044\u52d5\u304d\u3067\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306f [bouzuya's RxJS Advent Calendar 2015](http://www.adventar.org/calendars/1200) \u306e 13 \u65e5\u76ee\u304b\u3064 RxJS Advent Calendar 2015 \u306e 13 \u65e5\u76ee\u3067\u3059\u3002\n\n# \u306f\u3058\u3081\u306b\n\n\u4eca\u65e5\u306f [ReactiveX \u306e Connectable Observable Operators](http://reactivex.io/documentation/operators.html#connectable) \u306b\u3064\u3044\u3066 [RxJS \u306e API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/doc/api/core/observable.md)\u3092\u8aad\u3093\u3060\u308a\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u308a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u307e\u305f [RxJS 4.0.7](https://github.com/Reactive-Extensions/RxJS/tree/v4.0.7) \u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# Connectable Observable\n\n## `ConnectableObservable`\n\n- [`ConnectableObservable` Source Code](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/src/core/linq/connectableobservable.js)\n\n`Rx.ConnectableObservable` \u306f Cold / Hot \u5909\u63db\u30e1\u30bd\u30c3\u30c9\u306e\u8981\u3068\u306a\u308b\u91cd\u8981\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002\u3057\u304b\u3057\u3001RxJS \u306b\u306f `ConnectableObservable` \u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u308a\u307e\u3059\u304c\u3001 `ConnectableObservable` \u81ea\u4f53\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093 (\u306a\u305c!) \u3002\n\n`ConnectableObservable` \u306f `Observable` \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u6307\u5b9a\u3055\u308c\u305f `source` \u3092 `connect` \u547c\u3073\u51fa\u3057\u30bf\u30a4\u30df\u30f3\u30b0\u3067 `subscribe` \u3057\u307e\u3059\u3002\u5f8c\u7d9a\u306b\u306f\u6307\u5b9a\u3055\u308c\u305f `subject` \u3092 `subscribe` \u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002`connect` \u3067\u304d\u308b `Observable` \u306a\u306e\u3067 `ConnectableObservable` \u3067\u3059\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f `ConnectableObservable(source, subject)` \u3067\u3059\u3002\u307e\u3060 `Subject` \u306b\u3064\u3044\u3066\u306f\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u72ec\u81ea\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u306f\n\n- `ConnectableObservable.prototype.connect`\n- `ConnectableObservable.prototype.refCount`\n\n\u306e 2 \u3064\u3092\u6301\u3061\u307e\u3059\u3002\u5404\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n`ConnectableObservable` \u306e\u751f\u6210\u306f `Observable.prototype.publish` \u3092\u306f\u3058\u3081\u591a\u304f\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u3059\u304b\u3089 `Subject` \u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u8a18\u4e8b\u5185\u3067\u306f\u6b21\u306e 2 \u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n- `Observable.prototype.publish`\n- `Observable.prototype.replay`\n\n\u3055\u3066\u3001\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n## `ConnectableObservable.prototype.connect` / `Observable.prototype.publish`\n\n- [ReactiveX - Connect operator](http://reactivex.io/documentation/operators/connect.html)\n- [ReactiveX - Publish operator](http://reactivex.io/documentation/operators/publish.html)\n- [`ConnectableObservable.prototype.connect` API Document](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/doc/api/core/operators/connect.md)\n- [`ConnectableObservable.prototype.connect` Source Code](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/src/core/linq/connectableobservable.js)\n- [`Observable.prototype.publish` API Document](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/doc/api/core/operators/publish.md)\n- [`Observable.prototype.publish` Source Code](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/src/core/linq/observable/publish.js)\n\n`Observable.prototype.publish` \u306f `ConnectableObservable` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 (`subject` \u3068\u3057\u3066 `Subject` \u30af\u30e9\u30b9\u3092\u4f7f\u7528) \u3092\u8fd4\u3057\u307e\u3059\u3002`ConnectableObservable.prototype.connect` \u306f wrap \u3057\u3066\u3044\u308b `source` \u306e `subscribe` \u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\n\u3044\u308f\u3086\u308b Cold / Hot \u5909\u63db\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002Cold Observable / Hot Observable \u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u66f8\u304d\u307e\u3059\u3002\u3044\u307e\u307e\u3067\u306e Operator \u3068\u306f\u6319\u52d5\u304c\u5927\u304d\u304f\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```js\nimport { Observable } from 'rx';\n\nconst connectableObservable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .publish();\n\nconnectableObservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nconnectableObservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n\nconnectableObservable.connect();\n\n// observer1 subscribed\n// observer2 subscribed\n// do: 1\n// observer1 onNext: 1\n// observer2 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// observer2 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer2 onNext: 3\n// observer1 onCompleted\n// observer2 onCompleted\n```\n\n\u3053\u306e\u4f8b\u3060\u3051\u3092\u898b\u3066\u3082\u4f55\u304c\u3057\u305f\u3044\u306e\u304b\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3046\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u6ce8\u76ee\u3059\u3079\u304d\u306f `connect` \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u306a\u3044\u70b9\u3067\u3059\u3002\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u3066\u304d\u305f Operator \u306f `subscribe` \u306e\u77ac\u9593\u306b\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u306f\u3058\u3081\u3066\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u4f8b\u3067\u306f\u9055\u3063\u3066\u3044\u3066\u3001`subscribe` \u3057\u305f\u3042\u3068 `connect` \u3092\u547c\u3076\u307e\u3067\u6d41\u308c\u307e\u305b\u3093\u3002`connect` \u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u3059\u308b\u3068\u307e\u3063\u305f\u304f\u5024\u306f\u6d41\u308c\u307e\u305b\u3093\u3002\u51fa\u529b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nobserver1 subscribed\nobserver2 subscribed\n```\n\n\u6b21\u306b\u6ce8\u76ee\u3059\u3079\u304d\u306f `do` \u306e\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u56de\u6570\u3067\u3059\u3002\u5143\u306e\u30bd\u30fc\u30b9 (`[1, 2, 3]`) \u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570\u5206 (3 \u56de) \u3057\u304b\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u3066\u304d\u305f Operator \u3067\u3042\u308c\u3070 `subscribe` \u3054\u3068\u306b\u5225\u306e\u30bd\u30fc\u30b9\u6271\u3044\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\u5143\u306e\u30bd\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u306e\u500b\u6570 \\* Observer \u306e\u500b\u6570 (3 \\* 2 \u306e 6 \u56de) \u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u305f\u3067\u3057\u3087\u3046\u3002\n\n\u4e0a\u8a18\u306e 2 \u70b9\u306b\u6ce8\u76ee\u3057\u3064\u3064\u3001`publish` \u306a\u3057\u306e\u4f8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```js\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`));\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// do: 1\n// observer2 onNext: 1\n// do: 2\n// observer2 onNext: 2\n// do: 3\n// observer2 onNext: 3\n// observer2 onCompleted\n// observer2 subscribed\n```\n\n`publish` \u306e\u6319\u52d5\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f\u8907\u6570\u306e `Observer` \u306b `publish` \u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3092\u300c\u5206\u5c90\u300d\u3067\u8aac\u660e\u3055\u308c\u308b\u3053\u3068\u3082\u591a\u3044\u3067\u3059\u3002\n\n```\n         +----> (observer1)\n         |\n---->(publish)\n         |\n         +----> (observer2)\n```\n\n\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n\nCold / Hot \u306b\u95a2\u3057\u3066\u306f\u4ed6\u306e Qiita \u8a18\u4e8b \u300e[Rx\u306eHot\u3068Cold\u306b\u3064\u3044\u3066 - Qiita](http://qiita.com/toRisouP/items/f6088963037bfda658d3)\u300f\u3092\u53c2\u7167\u3059\u308b\u3068\u826f\u3044\u3067\u3059\u3002\n\n## `ConnectableObservable.prototype.refCount`\n\n- [ReactiveX - RefCount operator](http://reactivex.io/documentation/operators/refcount.html)\n- [`ConnectableObservable.prototype.refCount` API Document](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/doc/api/core/operators/refcount.md)\n- [`ConnectableObservable.prototype.refCount` Source Code](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/src/core/linq/connectableobservable.js)\n\n`subscribe` \u3055\u308c\u308b\u305f\u3073\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 `dispose` \u3055\u308c\u308b\u305f\u3073\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u53c2\u7167\u30ab\u30a6\u30f3\u30c8 (`refCount`) \u3057\u3001\u6700\u521d\u306e `subscribe` \u3067\u30bd\u30fc\u30b9\u306b `connect` \u3057\u3001\u6700\u5f8c\u306e `dispose` \u3067\u30bd\u30fc\u30b9\u3092 `dispose` \u3057\u307e\u3059\u3002\n\n```js\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .publish() // returns ConnectableObservable\n  .refCount(); // call ConnectableObservable.prototype.refCount\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// observer2 onCompleted\n// observer2 subscribed\n```\n\n\u307e\u305f\u5206\u304b\u308a\u3065\u3089\u3044\u4f8b\u306a\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u6ce8\u76ee\u3059\u3079\u304d\u306f `publish` \u3057\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a `connect` \u306e\u547c\u3073\u51fa\u3057\u304c\u306a\u3044\u70b9\u3067\u3059\u3002\u4ee3\u308f\u308a\u306b `refCount` \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u524d\u8ff0\u306e\u3068\u304a\u308a `publish` \u306f `connect` \u3059\u308b\u307e\u3067\u5f8c\u7d9a\u306b\u5024\u3092\u6d41\u3057\u307e\u305b\u3093\u3002\u3057\u304b\u3057 `refCount` \u306f\u6700\u521d\u306e `subscribe` \u3067\u81ea\u52d5\u7684\u306b `connect` \u3057\u307e\u3059\u3002\u305d\u3057\u3066\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306f\u540c\u671f\u7684 (`from([1, 2, 3])`) \u3067\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u6700\u521d\u306e `subscribe` \u3067\u81ea\u52d5\u7684\u306b `connect` \u3057\u540c\u671f\u7684\u306b\u3059\u3079\u3066\u306e\u5024\u3092\u6d41\u3057\u304d\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3059\u304b\u3089 `connect` \u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 `subscribe` \u3057\u3066\u3044\u306a\u3044 `observer2` \u306b\u306f\u5024\u306f\u6d41\u308c\u307e\u305b\u3093\u3002`onCompleted` \u304c\u6d41\u308c\u3066\u304a\u3057\u307e\u3044\u3067\u3059\u3002\n\n\u3082\u3046\u3072\u3068\u3064\u5225\u306e\u4f8b\u3092\u6319\u3052\u307e\u3059\u3002\u30bd\u30fc\u30b9\u304c\u975e\u540c\u671f\u306e\u5834\u5408\u306e\u4f8b\u3092\u6319\u3052\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```js\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .interval(100) // async\n  .take(3)       // -0-1-2->\n  .do(value => console.log(`do: ${value}`))\n  .publish() // returns ConnectableObservable\n  .refCount(); // call ConnectableObservable.prototype.refCount\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n\n// observer1 subscribed\n// observer2 subscribed\n// do: 0\n// observer1 onNext: 0\n// observer2 onNext: 0\n// do: 1\n// observer1 onNext: 1\n// observer2 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// observer2 onNext: 2\n// observer1 onCompleted\n// observer2 onCompleted\n```\n\n\u30bd\u30fc\u30b9\u304c\u975e\u540c\u671f\u3067\u3042\u308b\u305f\u3081\u3001`observer1` \u306e `subscribe` \u3067 `connect` \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u6642\u70b9\u3067\u306f\u5024\u306f\u6d41\u308c\u305a\u306b `observer2` \u306e `subscribe` \u306e\u3042\u3068\u3067\u5024\u304c\u6d41\u308c\u3066\u3044\u307e\u3059\u3002\n\n2 \u3064\u306e\u4f8b\u304b\u3089 `refCount` \u306e\u6ce8\u610f\u70b9\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n`refCount` \u306f `subscribe` \u3067\u81ea\u52d5 `connect` \u3059\u308b\u306e\u3067\u3001`connect` \u547c\u3073\u51fa\u3057\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u8003\u3048\u305a\u306b\u6e08\u307f\u307e\u3059\u304c\u3001\u4ee3\u308f\u308a\u306b\u540c\u671f\u7684\u306a\u30bd\u30fc\u30b9\u306e\u5834\u5408\u306b\u306f\u5024\u3092\u53d6\u308a\u3053\u307c\u3059\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059 (\u975e\u540c\u671f\u3067\u3082\u3082\u3061\u308d\u3093\u5024\u3092\u53d6\u308a\u3053\u307c\u3059\u53ef\u80fd\u6027\u306f\u3042\u308a\u307e\u3059) \u3002\n\n## `Observable.prototype.replay`\n\n- [ReactiveX - Replay operator](http://reactivex.io/documentation/operators/replay.html)\n- [`Observable.prototype.replay` API Document](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/doc/api/core/operators/replay.md)\n- [`Observable.prototype.replay` Source Code](https://github.com/Reactive-Extensions/RxJS/blob/v4.0.7/src/core/linq/connectableobservable.js)\n\n`Observable.prototype.replay` \u306f `ConnectableObservable` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 (`subject` \u3068\u3057\u3066 `ReplaySubject` \u30af\u30e9\u30b9\u3092\u4f7f\u7528) \u3092\u8fd4\u3057\u307e\u3059\u3002`publish` \u3068\u306e\u9055\u3044\u306f\u3001`publish` \u304c `Subject` \u3092\u4f7f\u3046\u306e\u306b\u5bfe\u3057 `replay` \u304c `ReplaySubject` \u3092\u4f7f\u3046\u70b9\u3067\u3059\u3002`subscribe` \u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u76f4\u8fd1\u306b\u6d41\u308c\u305f\u30c7\u30fc\u30bf\u304c\u518d\u5ea6\u6d41 (`replay`) \u3055\u308c\u307e\u3059\u3002\n\n```js\nimport { Observable } from 'rx';\n\nconst observable = Observable\n  .from([1, 2, 3])\n  .do(value => console.log(`do: ${value}`))\n  .replay(null, 3) // null = selector, 3 = ReplaySubject buffer\n  .refCount();\n\nobservable\n  .subscribe(\n    value => console.log(`observer1 onNext: ${value}`),\n    error => console.log(`observer1 onError: ${error}`),\n    () => console.log('observer1 onCompleted')\n  );\nconsole.log('observer1 subscribed');\n\nobservable\n  .subscribe(\n    value => console.log(`observer2 onNext: ${value}`),\n    error => console.log(`observer2 onError: ${error}`),\n    () => console.log('observer2 onCompleted')\n  );\nconsole.log('observer2 subscribed');\n// do: 1\n// observer1 onNext: 1\n// do: 2\n// observer1 onNext: 2\n// do: 3\n// observer1 onNext: 3\n// observer1 onCompleted\n// observer1 subscribed\n// observer2 onNext: 1\n// do: 1\n// observer2 onNext: 2\n// do: 2\n// observer2 onNext: 3\n// do: 3\n// observer2 onCompleted\n// observer2 subscribed\n```\n\n\u4e0a\u8a18\u306e\u4f8b\u306f\u3001`refCount` \u306e\u6700\u521d\u306e\u4f8b\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u304c\u3001`publish` \u3067\u306f\u306a\u304f `replay(null, 2)` \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002`replay(null, 3)` \u306f `bufferSize` \u304c `3` \u306e `ReplaySubject` \u3067\u3059\u3002\u76f4\u8fd1 `3` \u56de\u5206\u3092 `replay` \u3057\u307e\u3059\u3002\n\n`replay(null, 3)` \u306e `null` \u306f `selector` \u3067\u3059\u3002\u5b9f\u306f `publish()` \u3082 `selector` \u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001`selector` \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f `ConnectableObservable` \u3092\u8fd4\u3057\u307e\u305b\u3093\u3002\u8aac\u660e\u304c\u96e3\u3057\u304f\u306a\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\n\nReactiveX \u306e Connectable Observable Operators \u3092\u898b\u307e\u3057\u305f\u3002\n\n`ConnectableObservable` \u3068\u305d\u306e\u30e1\u30bd\u30c3\u30c9 `connect` \u3068 `refCount` \u3002\u305d\u3057\u3066 `ConnectableObservable` \u3092\u751f\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9 `publish` \u3068 `replay` \u3067\u3059\u3002\n\n\u4eca\u56de\u306e Cold / Hot \u5909\u63db\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6319\u52d5\u306e\u7406\u89e3\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u306e Operator \u3092\u307e\u3068\u3081\u305f `share` \u3084 `shareReplay` \u3084\u3082\u3063\u3068\u4f4e\u30ec\u30a4\u30e4\u30fc\u306a `multicast` \u306a\u3069\u3092\u5408\u308f\u305b\u3066\u7d39\u4ecb\u3059\u308b\u3053\u3068\u3092\u63a7\u3048\u307e\u3057\u305f\u3002`ConnectableObservable` \u306e\u5b9f\u88c5\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u89e6\u308c\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6628\u65e5\u3068\u306f\u6253\u3063\u3066\u5909\u308f\u3063\u3066\u96e3\u3057\u3044\u52d5\u304d\u3067\u3057\u305f\u3002\n", "tags": ["RxJS", "Rx", "ReactiveExtensions"]}