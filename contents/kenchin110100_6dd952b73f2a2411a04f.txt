{"tags": ["Python", "Chainer", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u6a5f\u68b0\u5b66\u7fd2", "DeepLearning"], "context": "seq2seq\u306e\u7b2c\u4e09\u5f3e\u3001CopyNet\u306e\u8aac\u660e\u3068\u305d\u306e\u5b9f\u88c5\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u307e\u3067\u306e\u3042\u3089\u3059\u3058\nhttp://qiita.com/kenchin110100/items/b34f5106d5a211f4c004\nhttp://qiita.com/kenchin110100/items/eb70d69d1d65fb451b67\n\u30ce\u30fc\u30de\u30eb\u306eseq2seq\u3001Attention Model\u3068\u304d\u3066\u3001\u4eca\u56de\u306fCopyNet\u306e\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u307e\u305aCopyNet\u306b\u95a2\u3059\u308b\u8aac\u660e\u3092\u3057\u3066\u304b\u3089\u3001\u5b9f\u88c5\u3068\u305d\u306e\u7d50\u679c\u3092\u8ff0\u3079\u307e\u3059\u3002\n\nCopyNet\n\nCopyNet\u3068\u306f\nCopyNet\u306e\u8aac\u660e\u306e\u305f\u3081\u306b\u3001\u307e\u305aSeq2Seq\u306e\u5fa9\u7fd2\u304b\u3089\u5165\u308a\u307e\u3059\u3002\n\n\n\nSequence to Sequence\n\n\n\n\n\n\n\n\nSeq2Seq\u306fEncoderDecoder\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3001Encoder\u306b\u3088\u3063\u3066\u3001\u767a\u8a71\u6587\uff08\u300c\u6c17\u5206\u306f\u3069\u3046\u3067\u3059\u304b\uff1f\u300d\uff09\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3066\u3001Decoder\u3067\u305d\u306e\u30d9\u30af\u30c8\u30eb\u304b\u3089\u5fdc\u7b54\u6587\uff08\u300c\u6c17\u5206\u306f\u3044\u3044\u3088\u300d\uff09\u3092\u51fa\u529b\u3059\u308b\u30e2\u30c7\u30eb\u3067\u3057\u305f\u3002\nSeq2Seq\u306eEncoder\u3067\u306f\u3001\u6700\u5f8c\u306b\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3057\u304b\u8003\u616e\u3057\u306a\u304b\u3063\u305f\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u3044\u308d\u3093\u306a\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8003\u616e\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cAttention Model\u3067\u3057\u305f\u3002\n\n\n\nAttention Model\n\n\n\n\n\n\n\n\n\u3067\u306f\u3001CopyNet\u3067\u306f\u4f55\u3092\u3059\u308b\u306e\u304b\u3001\u767a\u8a71\u304c\u300c\u6c17\u5206\u306f\u3069\u3046\u3067\u3059\u304b\uff1f\u300d\u3001\u5fdc\u7b54\u304c\u300c\u6c17\u5206\u306f\u3044\u3044\u3067\u3059\u3088\u300d\u306e\u5834\u5408\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u306f\u767a\u8a71\u3067\u3082\u5fdc\u7b54\u3067\u3082\u3069\u3061\u3089\u3067\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u767a\u8a71\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5358\u8a9e\u3092Decoder\u5074\u3067\u751f\u6210\u3057\u3084\u3059\u304f\u3057\u3066\u3042\u3052\u3088\u3046\u3068\u3044\u3046\u306e\u304cCopyNet\u306e\u8003\u3048\u65b9\u3067\u3059\u3002\n\n\n\nCopyNet\n\n\n\n\n\n\n\n\n\uff08\u56f3\u306f\u3042\u304f\u307e\u3067\u30a4\u30e1\u30fc\u30b8\u3067\u3059\uff09\nCopyNet\u304c\u306a\u305c\u826f\u3044\u306e\u304b\u3001\u305d\u308c\u306f\u672a\u77e5\u8a9e\u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u5b66\u7fd2\u306e\u969b\u306b<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u304c\u306a\u304f\u3066\u3082\u3001Copy\u3059\u308b\u3053\u3068\u3067\u3001<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u3092\u7528\u3044\u3066\u5fdc\u7b54\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u964d\u3067\u306f\u3001CopyNet\u306b\u95a2\u3059\u308b\u8ad6\u6587\u30922\u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nJiatao Gu et al.\n\u3053\u308c\u304cCopyNet\u306e\u5143\u8ad6\u6587\u3067\u3059\nGu, Jiatao, et al. \"Incorporating copying mechanism in sequence-to-sequence learning.\" arXiv preprint arXiv:1603.06393 (2016).\n\n\n\nGu, Jiatao, et al\n\n\n\n\n\n\n\n\n\u8ad6\u6587\u5185\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u56f3\u306f\u4e0a\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u304b\u3044\u3064\u307e\u3080\u3068\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\nCopy mode and StateUpdate\n\n\n\n\n\n\n\n\nGu\u3089\u306e\u63d0\u6848\u3057\u305f\u624b\u6cd5\u3067\u306f\u3001StateUpdate\u3001CopyMode\u3068\u3044\u3046\u4e3b\u306b\uff12\u3064\u306e\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\nStateUpdate\u3067\u306f\u3001Decoder\u306b\u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u304c\u767a\u8a71\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5358\u8a9e\uff08<\u6c17\u5206>\uff09\u306a\u3089\u3001\u305d\u306e\u5358\u8a9e\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\uff08Encoder\u3067\u51fa\u529b\u3055\u308c\u305f\u3082\u306e\uff09\u3092\u5165\u529b\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\nCopyMode\u3067\u306f\u3001\u51fa\u529b\u3092\u671f\u5f85\u3059\u308b\u5358\u8a9e\u304c\u3001\u767a\u8a71\u6587\u306b\u542b\u307e\u308c\u308b\u3082\u306e\u306a\u3089\uff08<\u306f>\uff09\u3001\u305d\u306e\u5358\u8a9e\u304c\u51fa\u529b\u3055\u308c\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u306b\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066<\u306f>\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\uff08\u8aac\u660e\u304c\u304b\u306a\u308a\u4e0b\u624b\u304f\u305d\u3067\u3059\u304c\u3001\u8a73\u3057\u304f\u306f\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\uff09\n\nZiqiang Cao et al.\nCopyNet\u304c\u3089\u307f\u3067\u3082\u3046\u4e00\u3064\u8ad6\u6587\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u53b3\u5bc6\u306b\u306f\u3001CopyNet\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u4f3c\u305f\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u8ad6\u6587\u306b\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\nCao, Ziqiang, et al. \"Joint Copying and Restricted Generation for Paraphrase.\" arXiv preprint arXiv:1611.09235 (2016).\n\n\n\nZiqiang Cao et al.\n\n\n\n\n\n\n\n\n\uff08\u8ad6\u6587\u5185\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u56f3\uff09\n\u3053\u3063\u3061\u306e\u65b9\u306f\u3082\u3046\u5c11\u3057\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\nRestricted Generative Decoder\n\n\n\n\n\n\n\n\nAttention Model\u3067\u8a08\u7b97\u3055\u308c\u305f\u91cd\u307f\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3084\u308d\u3046\u3068\u3044\u3046\u65b9\u91dd\u3067\u3059\u3002\n\u3082\u3057\u3001\u51fa\u529b\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u304c\u5165\u529b\u306b\u306a\u3051\u308c\u3070\u3001Generate\u3055\u308c\u305f\u5358\u8a9e\u306e\u78ba\u7387\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\n\u51fa\u529b\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u304c\u5165\u529b\u306b\u3082\u3042\u308c\u3070\uff08<\u306f>\uff09\u3001Generate\u3055\u308c\u305f\u5358\u8a9e\u306e\u78ba\u7387\u3068Attention Model\u306b\u3088\u3063\u3066\u8a08\u7b97\u3055\u308c\u305f\u91cd\u307f\u3092\u03bb\u3067\u5e73\u5747\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u307e\u3059\uff08\u03bb\u306f0~1\u306e\u9593\u306e\u30b9\u30ab\u30e9\uff09\u3002\n\u3053\u306e\u03bb\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u3044\u304b\u306b\u53d6\u308b\u304b\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u304c\u3001\u03bb\u3082\u5b66\u7fd2\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\uff08\u8a73\u3057\u304f\u306f\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\uff09\n\n\u5b9f\u88c5\n\u4eca\u56de\u306f\u3001Ziqiang Cao et al.\u306e\u624b\u6cd5\u306e\u5b9f\u88c5\u3092Chainer\u3067\u884c\u3044\u307e\u3057\u305f\u3002\nCopyNet\u306e\u5b9f\u88c5\u306f\u3042\u307e\u308a\u30cd\u30c3\u30c8\u4e0a\u306b\u306a\u304f\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3059\u3044\u307e\u305b\u3093\u30fb\u30fb\u30fb\nEncoder\u3001Decoder\u306fAttention Model\u306e\u6642\u306b\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\nAttention\n\u57fa\u672c\u7684\u306bAttention Model\u306e\u6642\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5404\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u91cd\u307f\u3082\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\nattention.py\nclass Copy_Attention(Attention):\n\n    def __call__(self, fs, bs, h):\n        \"\"\"\n        Attention\u306e\u8a08\u7b97\n        :param fs: \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :param bs: \u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :param h: Decoder\u3067\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        :return att_f: \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u52a0\u91cd\u5e73\u5747\n        :return att_b: \u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u52a0\u91cd\u5e73\u5747\n        :return att: \u5404\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u91cd\u307f\n        \"\"\"\n        # \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u30b5\u30a4\u30ba\u3092\u8a18\u61b6\n        batch_size = h.data.shape[0]\n        # \u30a6\u30a7\u30a4\u30c8\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n        ws = []\n        att = []\n        # \u30a6\u30a7\u30a4\u30c8\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u5024\u3092\u521d\u671f\u5316\n        sum_w = Variable(self.ARR.zeros((batch_size, 1), dtype='float32'))\n        # Encoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3068Decoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30a6\u30a7\u30a4\u30c8\u306e\u8a08\u7b97\n        for f, b in zip(fs, bs):\n            # \u9806\u5411\u304dEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u9006\u5411\u304dEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001Decoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30a6\u30a7\u30a4\u30c8\u306e\u8a08\u7b97\n            w = self.hw(functions.tanh(self.fh(f)+self.bh(b)+self.hh(h)))\n            att.append(w)\n            # softmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u6b63\u898f\u5316\u3059\u308b\n            w = functions.exp(w)\n            # \u8a08\u7b97\u3057\u305f\u30a6\u30a7\u30a4\u30c8\u3092\u8a18\u9332\n            ws.append(w)\n            sum_w += w\n        # \u51fa\u529b\u3059\u308b\u52a0\u91cd\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        att_f = Variable(self.ARR.zeros((batch_size, self.hidden_size), dtype='float32'))\n        att_b = Variable(self.ARR.zeros((batch_size, self.hidden_size), dtype='float32'))\n        for i, (f, b, w) in enumerate(zip(fs, bs, ws)):\n            # \u30a6\u30a7\u30a4\u30c8\u306e\u548c\u304c1\u306b\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\n            w /= sum_w\n            # \u30a6\u30a7\u30a4\u30c8 * Encoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306b\u8db3\u3057\u3066\u3044\u304f\n            att_f += functions.reshape(functions.batch_matmul(f, w), (batch_size, self.hidden_size))\n            att_b += functions.reshape(functions.batch_matmul(f, w), (batch_size, self.hidden_size))\n        att = functions.concat(att, axis=1)\n        return att_f, att_b, att\n\n\n\nSeq2Seq with CopyNet\nEncoder\u3001Decorder\u3001Attention\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30e2\u30c7\u30eb\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\ncopy_seq2seq.py\nclass Copy_Seq2Seq(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size, batch_size, flag_gpu=True):\n        super(Copy_Seq2Seq, self).__init__(\n            # \u9806\u5411\u304d\u306eEncoder\n            f_encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # \u9006\u5411\u304d\u306eEncoder\n            b_encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # Attention Model\n            attention=Copy_Attention(hidden_size, flag_gpu),\n            # Decoder\n            decoder=Att_LSTM_Decoder(vocab_size, embed_size, hidden_size),\n            # \u03bb\u306e\u91cd\u307f\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n            predictor=links.Linear(hidden_size, 1)\n        )\n        self.vocab_size = vocab_size\n        self.embed_size = embed_size\n        self.hidden_size = hidden_size\n        self.batch_size = batch_size\n        if flag_gpu:\n            self.ARR = cuda.cupy\n        else:\n            self.ARR = np\n\n        # \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u3092\u521d\u671f\u5316\n        self.fs = []\n        self.bs = []\n\n    def encode(self, words):\n        \"\"\"\n        Encoder\u306e\u8a08\u7b97\n        :param words: \u5165\u529b\u3067\u4f7f\u7528\u3059\u308b\u5358\u8a9e\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :return:\n        \"\"\"\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        # \u5148\u305a\u306f\u9806\u5411\u304d\u306eEncoder\u306e\u8a08\u7b97\n        for w in words:\n            c, h = self.f_encoder(w, c, h)\n            # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a18\u9332\n            self.fs.append(h)\n\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        # \u9006\u5411\u304d\u306eEncoder\u306e\u8a08\u7b97\n        for w in reversed(words):\n            c, h = self.b_encoder(w, c, h)\n            # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a18\u9332\n            self.bs.insert(0, h)\n\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        self.h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n\n    def decode(self, w):\n        \"\"\"\n        Decoder\u306e\u8a08\u7b97\n        :param w: Decoder\u3067\u5165\u529b\u3059\u308b\u5358\u8a9e\n        :return t: \u4e88\u6e2c\u5358\u8a9e\n        :return att: \u5404\u5358\u8a9e\u306eAttention\u306e\u91cd\u307f\n        :return lambda_: Copy\u91cd\u8996\u304bGenerate\u91cd\u8996\u304b\u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u91cd\u307f\n        \"\"\"\n        # Attention Model\u3067\u5165\u529b\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\n        att_f, att_b, att = self.attention(self.fs, self.bs, self.h)\n        # Decoder\u306b\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\n        t, self.c, self.h = self.decoder(w, self.c, self.h, att_f, att_b)\n        # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u7528\u3044\u3066\u03bb\u306e\u8a08\u7b97\n        lambda_ = self.predictor(self.h)\n        return t, att, lambda_\n\n\n\u5b9f\u306f\u3053\u308c\u3082Attention Model\u306e\u6642\u3068\u3042\u307e\u308a\u5909\u308f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u5909\u66f4\u70b9\u306f\u3001Copy Mode\u3068Generative Mode\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u305f\u3081\u306e\u03bb\u3092\u8a08\u7b97\u3059\u308b\u3001Attention\u306e\u91cd\u307f\u3082\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\nforward\n\u5927\u304d\u306a\u5909\u66f4\u70b9\u306fforward\u95a2\u6570\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\nforward\u95a2\u6570\u3067\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u3068\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u3092\u898b\u3066\u3001Copy Mode\u3092\u8a08\u7b97\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\n\nforward.py\ndef forward(enc_words, dec_words, model, ARR):\n    \"\"\"\n    forward\u306e\u8a08\u7b97\u3092\u3059\u308b\u95a2\u6570\n    :param enc_words: \u5165\u529b\u6587\n    :param dec_words: \u51fa\u529b\u6587\n    :param model: \u30e2\u30c7\u30eb\n    :param ARR: numpy\u304bcuda.cupy\u306e\u3069\u3061\u3089\u304b\n    :return loss: \u640d\u5931\n    \"\"\"\n    # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a18\u9332\n    batch_size = len(enc_words[0])\n    # \u30e2\u30c7\u30eb\u306e\u4e2d\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u52fe\u914d\u306e\u30ea\u30bb\u30c3\u30c8\n    model.reset()\n    # \u5165\u529b\u6587\u306e\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\n    enc_key = enc_words.T\n    # Encoder\u306b\u5165\u529b\u3059\u308b\u6587\u3092Variable\u578b\u306b\u5909\u66f4\u3059\u308b\n    enc_words = [Variable(ARR.array(row, dtype='int32')) for row in enc_words]\n    # Encoder\u306e\u8a08\u7b97\n    model.encode(enc_words)\n    # \u640d\u5931\u306e\u521d\u671f\u5316\n    loss = Variable(ARR.zeros((), dtype='float32'))\n    # <eos>\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b\n    t = Variable(ARR.array([0 for _ in range(batch_size)], dtype='int32'))\n    # \u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u8a08\u7b97\n    for w in dec_words:\n        # 1\u5358\u8a9e\u305a\u3064\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n        y, att, lambda_ = model.decode(t)\n        # \u6b63\u89e3\u5358\u8a9e\u3092Variable\u578b\u306b\u5909\u63db\n        t = Variable(ARR.array(w, dtype='int32'))\n\n        # Generative Mode\u306b\u3088\u308a\u8a08\u7b97\u3055\u308c\u305f\u5358\u8a9e\u306elog_softmax\u3092\u3068\u308b\n        s = functions.log_softmax(y)\n        # Attention\u306e\u91cd\u307f\u306elog_softmax\u3092\u3068\u308b\n        att_s = functions.log_softmax(att)\n        # lambda\u3092sigmoid\u95a2\u6570\u306b\u304b\u3051\u308b\u3053\u3068\u3067\u30010~1\u306e\u5024\u306b\u5909\u66f4\u3059\u308b\n        lambda_s = functions.reshape(functions.sigmoid(lambda_), (batch_size,))\n        # Generative Mode\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        Pg = Variable(ARR.zeros((), dtype='float32'))\n        # Copy Mode\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        Pc = Variable(ARR.zeros((), dtype='float32'))\n        # lambda\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        epsilon = Variable(ARR.zeros((), dtype='float32'))\n        # \u3053\u3053\u304b\u3089\u30d0\u30c3\u30c1\u5185\u306e\u4e00\u5358\u8a9e\u305a\u3064\u306e\u640d\u5931\u3092\u8a08\u7b97\u3059\u308b\u3001for\u6587\u3092\u56de\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u30c0\u30b5\u3044\u30fb\u30fb\u30fb\n        counter = 0\n        for i, words in enumerate(w):\n            # -1\u306f\u5b66\u7fd2\u3057\u306a\u3044\u5358\u8a9e\u306b\u3064\u3051\u3066\u3044\u308b\u30e9\u30d9\u30eb\u3002\u3053\u308c\u306f\u7121\u8996\u3059\u308b\u3002\n            if words != -1:\n                # Generative Mode\u306e\u640d\u5931\u306e\u8a08\u7b97\n                Pg += functions.get_item(functions.get_item(s, i), words) * functions.reshape((1.0 - functions.get_item(lambda_s, i)), ())\n                counter += 1\n                # \u3082\u3057\u5165\u529b\u6587\u306e\u4e2d\u306b\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u304c\u5b58\u5728\u3059\u308c\u3070\n                if words in enc_key[i]:\n                    # Copy Mode\u306e\u8a08\u7b97\u3092\u3059\u308b\n                    Pc += functions.get_item(functions.get_item(att_s, i), list(enc_key[i]).index(words)) * functions.reshape(functions.get_item(lambda_s, i), ())\n                    # \u30e9\u30e0\u30c0\u304cCopy Mode\u3088\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\n                    epsilon += functions.log(functions.get_item(lambda_s, i))\n                # \u5165\u529b\u6587\u306e\u4e2d\u306b\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u304c\u306a\u3051\u308c\u3070\n                else:\n                    # \u30e9\u30e0\u30c0\u304cGenerative Mode\u3088\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\n                    epsilon += functions.log(1.0 - functions.get_item(lambda_s, i))\n        # \u305d\u308c\u305e\u308c\u306e\u640d\u5931\u3092\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u3063\u3066\u3001\u5408\u8a08\u3059\u308b\n        Pg *= (-1.0 / np.max([1, counter]))\n        Pc *= (-1.0 / np.max([1, counter]))\n        epsilon *= (-1.0 / np.max([1, counter]))\n        loss += Pg + Pc + epsilon\n    return loss\n\n\n\u30b3\u30fc\u30c9\u5185\u3067\u306f\u3001Generative Mode\u3001Copy Mode\u3001\u03bb\u306e\u305d\u308c\u305e\u308c\u306e\u5b66\u7fd2\u3092\u3059\u308b\u305f\u3081\u306b\u3001Pg\u3001Pc\u3001epsilon\u3068\u3044\u30463\u3064\u306e\u640d\u5931\u3092\u5b9a\u7fa9\u3057\u3066\u305d\u308c\u305e\u308c\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\nfunctions.log_softmax\u3092\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002log(softmax(x))\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u3001softmax\u306e\u8a08\u7b97\u304c0\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u6642\u306b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u306b\u3088\u3063\u3066\u3046\u307e\u304f\u3084\u3063\u3066\u304f\u308c\u3066\u3044\u307e\u3059\uff08\u3069\u3046\u3044\u3046\u98a8\u306b\u3046\u307e\u304f\u3084\u3063\u3066\u3044\u308b\u304b\u306f\u8b0e\u30fb\u30fb\u30fb\uff09\u3002\nfunctions.softmax_cross_entropy\u95a2\u6570\u3092\u4f7f\u3048\u3070\u3001\u3053\u3093\u306a\u3081\u3093\u3069\u304f\u3055\u3044\u8a08\u7b97\u306f\u3044\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u03bb\u3067Copy Mode\u306e\u640d\u5931\u3068Generative Mode\u306e\u640d\u5931\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308a\u305f\u3044\u306e\u3067\u3001functions.get_items\u3001functions.log_softmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u640d\u5931\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u3046\u307e\u3044\u5b9f\u88c5\u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u306f\u662f\u975e\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\nhttps://github.com/kenchin110100/machine_learning/blob/master/sampleCopySeq2Seq.py\n\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u5b9f\u9a13\n\n\u30b3\u30fc\u30d1\u30b9\n\u4eca\u307e\u3067\u3068\u540c\u3058\u3088\u3046\u306b\u5bfe\u8a71\u7834\u7dbb\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nhttps://sites.google.com/site/dialoguebreakdowndetection/chat-dialogue-corpus\n\n\u5b9f\u9a13\u7d50\u679c\n\u767a\u8a71\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e4\u7a2e\n\ntoken1 = '\u304a\u306f\u3088\u3046'\ntoken2 = '\u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f'\ntoken3 = '\u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f'\ntoken4 = '\u4eca\u65e5\u306f\u6691\u3044\u3067\u3059'\n\nEpoch\u3054\u3068\u306b\u5fdc\u7b54\u7d50\u679c\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\nEpoch 1\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '\u306f', '\u3067\u3059', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '\u304c', '\u304c', '\u304c', '\u305f', '\u305f', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'gen', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4eca\u65e5', '\u306f', '\u306f', '\u3067\u3059', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy']\n\n\u5b8c\u5168\u306b\u58ca\u308c\u3066\u307e\u3059\u306d\u30fb\u30fb\u30fb\nEpoch 3\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '</s>'] ['copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u306d', '</s>'] ['copy', 'copy', 'gen', 'gen', 'gen', 'copy']\n\nEpoch 5\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u304b', '</s>'] ['copy', 'copy', 'gen', 'copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u3067\u3059', '</s>'] ['copy', 'gen', 'copy']\n\n\u304a\u8179\u3068\u5ba3\u8a00\u3055\u308c\u307e\u3057\u3066\u3082\u30fb\u30fb\u30fb\nEpoch 7\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>'] ['copy', 'gen', 'gen', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '</s>'] ['copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '\u304c', '\u7a7a\u304d', '\u307e\u3057', '\u305f', '</s>'] ['copy', 'gen', 'copy', 'copy', 'gen', 'gen']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u3067\u3059', '</s>'] ['copy', 'gen', 'copy']\n\n\u5b66\u7fd2\u306b\u306f<\u8abf\u5b50>\u3068\u3044\u3046\u5358\u8a9e\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u70b9\u3046\u307e\u304f\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u307e\u3059\u3002\n\u305f\u3060\u3001\u6b63\u76f4\u3082\u3046\u5c11\u3057\u3046\u307e\u304f\u56de\u7b54\u3057\u3066\u307b\u3057\u3044\u70b9\u3082\u3042\u308a\u307e\u3059\u3002\nCopy Mode\u3068Generate Mode\u306e\u4e21\u65b9\u3092\u5b66\u7fd2\u3059\u308b\u306e\u3067\u3001Decoder\u304c\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u304d\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\n\u8ad6\u6587\u5185\u3067\u306f\u5bfe\u8a71\u30bf\u30b9\u30af\u3067\u306f\u306a\u304f\u3001\u8981\u7d04\u30bf\u30b9\u30af\u3067\u8a55\u4fa1\u3057\u3066\u3044\u305f\u306e\u3082\u3053\u306e\u8fba\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\uff08\u307e\u3042\u3001\u4e00\u756a\u306e\u539f\u56e0\u306f\u5b9f\u88c5\u306b\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u30fb\u30fb\u30fb\uff09\n\n\u7d50\u8ad6\nchainer\u3092\u4f7f\u3063\u3066CopyNet\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u5bfe\u8a71\u30e2\u30c7\u30eb\u30923\u56de\u3084\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u3082\u3046\u304a\u8179\u3044\u3063\u3071\u3044\u304b\u306a\u7b11\n\u6b21\u306f\u307e\u305f\u5225\u306e\u3053\u3068\u3092\u4f55\u304b\u3057\u3089\u3084\u308a\u307e\u3059\u3002\nseq2seq\u306e\u7b2c\u4e09\u5f3e\u3001CopyNet\u306e\u8aac\u660e\u3068\u305d\u306e\u5b9f\u88c5\n\n# \u306f\u3058\u3081\u306b\n\n\u524d\u56de\u307e\u3067\u306e\u3042\u3089\u3059\u3058\nhttp://qiita.com/kenchin110100/items/b34f5106d5a211f4c004\nhttp://qiita.com/kenchin110100/items/eb70d69d1d65fb451b67\n\n\u30ce\u30fc\u30de\u30eb\u306eseq2seq\u3001Attention Model\u3068\u304d\u3066\u3001\u4eca\u56de\u306fCopyNet\u306e\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u305aCopyNet\u306b\u95a2\u3059\u308b\u8aac\u660e\u3092\u3057\u3066\u304b\u3089\u3001\u5b9f\u88c5\u3068\u305d\u306e\u7d50\u679c\u3092\u8ff0\u3079\u307e\u3059\u3002\n\n# CopyNet\n\n## CopyNet\u3068\u306f\n\nCopyNet\u306e\u8aac\u660e\u306e\u305f\u3081\u306b\u3001\u307e\u305aSeq2Seq\u306e\u5fa9\u7fd2\u304b\u3089\u5165\u308a\u307e\u3059\u3002\n\n|Sequence to Sequence|\n|---|\n|![seq2seq.png](https://qiita-image-store.s3.amazonaws.com/0/155619/6072b62b-f548-2863-dfe0-5ee8cc363777.png)|\n\nSeq2Seq\u306fEncoderDecoder\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3001Encoder\u306b\u3088\u3063\u3066\u3001\u767a\u8a71\u6587\uff08\u300c\u6c17\u5206\u306f\u3069\u3046\u3067\u3059\u304b\uff1f\u300d\uff09\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3066\u3001Decoder\u3067\u305d\u306e\u30d9\u30af\u30c8\u30eb\u304b\u3089\u5fdc\u7b54\u6587\uff08\u300c\u6c17\u5206\u306f\u3044\u3044\u3088\u300d\uff09\u3092\u51fa\u529b\u3059\u308b\u30e2\u30c7\u30eb\u3067\u3057\u305f\u3002\n\nSeq2Seq\u306eEncoder\u3067\u306f\u3001\u6700\u5f8c\u306b\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3057\u304b\u8003\u616e\u3057\u306a\u304b\u3063\u305f\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u3044\u308d\u3093\u306a\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8003\u616e\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cAttention Model\u3067\u3057\u305f\u3002\n\n|Attention Model|\n|---|\n|![attention.png](https://qiita-image-store.s3.amazonaws.com/0/155619/5bf07221-d504-1452-963f-2b7acb6dfd85.png)|\n\n\u3067\u306f\u3001CopyNet\u3067\u306f\u4f55\u3092\u3059\u308b\u306e\u304b\u3001\u767a\u8a71\u304c\u300c\u6c17\u5206\u306f\u3069\u3046\u3067\u3059\u304b\uff1f\u300d\u3001\u5fdc\u7b54\u304c\u300c\u6c17\u5206\u306f\u3044\u3044\u3067\u3059\u3088\u300d\u306e\u5834\u5408\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u306f\u767a\u8a71\u3067\u3082\u5fdc\u7b54\u3067\u3082\u3069\u3061\u3089\u3067\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u767a\u8a71\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5358\u8a9e\u3092Decoder\u5074\u3067\u751f\u6210\u3057\u3084\u3059\u304f\u3057\u3066\u3042\u3052\u3088\u3046\u3068\u3044\u3046\u306e\u304cCopyNet\u306e\u8003\u3048\u65b9\u3067\u3059\u3002\n\n|CopyNet|\n|---|\n|![copynet.png](https://qiita-image-store.s3.amazonaws.com/0/155619/8734095d-1f11-2727-846b-b1c45bbb79e7.png)|\n\uff08\u56f3\u306f\u3042\u304f\u307e\u3067\u30a4\u30e1\u30fc\u30b8\u3067\u3059\uff09\n\nCopyNet\u304c\u306a\u305c\u826f\u3044\u306e\u304b\u3001\u305d\u308c\u306f\u672a\u77e5\u8a9e\u306b\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u5b66\u7fd2\u306e\u969b\u306b<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u304c\u306a\u304f\u3066\u3082\u3001Copy\u3059\u308b\u3053\u3068\u3067\u3001<\u6c17\u5206>\u3068\u3044\u3046\u5358\u8a9e\u3092\u7528\u3044\u3066\u5fdc\u7b54\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u964d\u3067\u306f\u3001CopyNet\u306b\u95a2\u3059\u308b\u8ad6\u6587\u30922\u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## Jiatao Gu et al.\n\n\u3053\u308c\u304cCopyNet\u306e\u5143\u8ad6\u6587\u3067\u3059\n[Gu, Jiatao, et al. \"Incorporating copying mechanism in sequence-to-sequence learning.\" arXiv preprint arXiv:1603.06393 (2016).](https://arxiv.org/abs/1603.06393)\n\n|Gu, Jiatao, et al|\n|---|\n|<img width=\"722\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-11 17.49.04.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/155619/9590353b-17b8-0ea8-bf8a-d7268ea62dae.png\">|\n\n\u8ad6\u6587\u5185\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u56f3\u306f\u4e0a\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3082\u3046\u5c11\u3057\u304b\u3044\u3064\u307e\u3080\u3068\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n|Copy mode and StateUpdate|\n|---|\n|![Gu.png](https://qiita-image-store.s3.amazonaws.com/0/155619/b317d212-d069-a79f-1c3e-fcb75f7c88b6.png)|\n\nGu\u3089\u306e\u63d0\u6848\u3057\u305f\u624b\u6cd5\u3067\u306f\u3001StateUpdate\u3001CopyMode\u3068\u3044\u3046\u4e3b\u306b\uff12\u3064\u306e\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\n\nStateUpdate\u3067\u306f\u3001Decoder\u306b\u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u304c\u767a\u8a71\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5358\u8a9e\uff08<\u6c17\u5206>\uff09\u306a\u3089\u3001\u305d\u306e\u5358\u8a9e\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\uff08Encoder\u3067\u51fa\u529b\u3055\u308c\u305f\u3082\u306e\uff09\u3092\u5165\u529b\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\nCopyMode\u3067\u306f\u3001\u51fa\u529b\u3092\u671f\u5f85\u3059\u308b\u5358\u8a9e\u304c\u3001\u767a\u8a71\u6587\u306b\u542b\u307e\u308c\u308b\u3082\u306e\u306a\u3089\uff08<\u306f>\uff09\u3001\u305d\u306e\u5358\u8a9e\u304c\u51fa\u529b\u3055\u308c\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u306b\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066<\u306f>\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\n\uff08\u8aac\u660e\u304c\u304b\u306a\u308a\u4e0b\u624b\u304f\u305d\u3067\u3059\u304c\u3001\u8a73\u3057\u304f\u306f\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\uff09\n\n## Ziqiang Cao et al.\n\nCopyNet\u304c\u3089\u307f\u3067\u3082\u3046\u4e00\u3064\u8ad6\u6587\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u53b3\u5bc6\u306b\u306f\u3001CopyNet\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u4f3c\u305f\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u8ad6\u6587\u306b\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n[Cao, Ziqiang, et al. \"Joint Copying and Restricted Generation for Paraphrase.\" arXiv preprint arXiv:1611.09235 (2016).](https://arxiv.org/abs/1611.09235)\n\n|Ziqiang Cao et al.|\n|---|\n|<img width=\"563\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-11 18.16.25.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/155619/ca7ecd9f-b4b0-0226-a0f5-e412f7b9e2ef.png\">|\n\uff08\u8ad6\u6587\u5185\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u56f3\uff09\n\n\u3053\u3063\u3061\u306e\u65b9\u306f\u3082\u3046\u5c11\u3057\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\u306b\u306a\u308a\u307e\u3059\u3002\n\n|Restricted Generative Decoder|\n|---|\n|![cao.png](https://qiita-image-store.s3.amazonaws.com/0/155619/c00a50c7-30e1-6274-2dca-3b933ea4f8b1.png)|\n\nAttention Model\u3067\u8a08\u7b97\u3055\u308c\u305f\u91cd\u307f\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3084\u308d\u3046\u3068\u3044\u3046\u65b9\u91dd\u3067\u3059\u3002\n\n\u3082\u3057\u3001\u51fa\u529b\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u304c\u5165\u529b\u306b\u306a\u3051\u308c\u3070\u3001Generate\u3055\u308c\u305f\u5358\u8a9e\u306e\u78ba\u7387\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\n\u51fa\u529b\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u304c\u5165\u529b\u306b\u3082\u3042\u308c\u3070\uff08<\u306f>\uff09\u3001Generate\u3055\u308c\u305f\u5358\u8a9e\u306e\u78ba\u7387\u3068Attention Model\u306b\u3088\u3063\u3066\u8a08\u7b97\u3055\u308c\u305f\u91cd\u307f\u3092\u03bb\u3067\u5e73\u5747\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u307e\u3059\uff08\u03bb\u306f0~1\u306e\u9593\u306e\u30b9\u30ab\u30e9\uff09\u3002\n\n\u3053\u306e\u03bb\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u3044\u304b\u306b\u53d6\u308b\u304b\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u304c\u3001\u03bb\u3082\u5b66\u7fd2\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\uff08\u8a73\u3057\u304f\u306f\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\uff09\n\n# \u5b9f\u88c5\n\n\u4eca\u56de\u306f\u3001Ziqiang Cao et al.\u306e\u624b\u6cd5\u306e\u5b9f\u88c5\u3092Chainer\u3067\u884c\u3044\u307e\u3057\u305f\u3002\nCopyNet\u306e\u5b9f\u88c5\u306f\u3042\u307e\u308a\u30cd\u30c3\u30c8\u4e0a\u306b\u306a\u304f\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3059\u3044\u307e\u305b\u3093\u30fb\u30fb\u30fb\n\nEncoder\u3001Decoder\u306fAttention Model\u306e\u6642\u306b\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\n## Attention\n\n\u57fa\u672c\u7684\u306bAttention Model\u306e\u6642\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5404\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u91cd\u307f\u3082\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```attention.py\nclass Copy_Attention(Attention):\n\n    def __call__(self, fs, bs, h):\n        \"\"\"\n        Attention\u306e\u8a08\u7b97\n        :param fs: \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :param bs: \u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :param h: Decoder\u3067\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        :return att_f: \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u52a0\u91cd\u5e73\u5747\n        :return att_b: \u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u52a0\u91cd\u5e73\u5747\n        :return att: \u5404\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u91cd\u307f\n        \"\"\"\n        # \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u30b5\u30a4\u30ba\u3092\u8a18\u61b6\n        batch_size = h.data.shape[0]\n        # \u30a6\u30a7\u30a4\u30c8\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n        ws = []\n        att = []\n        # \u30a6\u30a7\u30a4\u30c8\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u5024\u3092\u521d\u671f\u5316\n        sum_w = Variable(self.ARR.zeros((batch_size, 1), dtype='float32'))\n        # Encoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3068Decoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30a6\u30a7\u30a4\u30c8\u306e\u8a08\u7b97\n        for f, b in zip(fs, bs):\n            # \u9806\u5411\u304dEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u9006\u5411\u304dEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001Decoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30a6\u30a7\u30a4\u30c8\u306e\u8a08\u7b97\n            w = self.hw(functions.tanh(self.fh(f)+self.bh(b)+self.hh(h)))\n            att.append(w)\n            # softmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u6b63\u898f\u5316\u3059\u308b\n            w = functions.exp(w)\n            # \u8a08\u7b97\u3057\u305f\u30a6\u30a7\u30a4\u30c8\u3092\u8a18\u9332\n            ws.append(w)\n            sum_w += w\n        # \u51fa\u529b\u3059\u308b\u52a0\u91cd\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        att_f = Variable(self.ARR.zeros((batch_size, self.hidden_size), dtype='float32'))\n        att_b = Variable(self.ARR.zeros((batch_size, self.hidden_size), dtype='float32'))\n        for i, (f, b, w) in enumerate(zip(fs, bs, ws)):\n            # \u30a6\u30a7\u30a4\u30c8\u306e\u548c\u304c1\u306b\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\n            w /= sum_w\n            # \u30a6\u30a7\u30a4\u30c8 * Encoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306b\u8db3\u3057\u3066\u3044\u304f\n            att_f += functions.reshape(functions.batch_matmul(f, w), (batch_size, self.hidden_size))\n            att_b += functions.reshape(functions.batch_matmul(f, w), (batch_size, self.hidden_size))\n        att = functions.concat(att, axis=1)\n        return att_f, att_b, att\n```\n\n## Seq2Seq with CopyNet\n\nEncoder\u3001Decorder\u3001Attention\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30e2\u30c7\u30eb\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```copy_seq2seq.py\nclass Copy_Seq2Seq(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size, batch_size, flag_gpu=True):\n        super(Copy_Seq2Seq, self).__init__(\n            # \u9806\u5411\u304d\u306eEncoder\n            f_encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # \u9006\u5411\u304d\u306eEncoder\n            b_encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # Attention Model\n            attention=Copy_Attention(hidden_size, flag_gpu),\n            # Decoder\n            decoder=Att_LSTM_Decoder(vocab_size, embed_size, hidden_size),\n            # \u03bb\u306e\u91cd\u307f\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n            predictor=links.Linear(hidden_size, 1)\n        )\n        self.vocab_size = vocab_size\n        self.embed_size = embed_size\n        self.hidden_size = hidden_size\n        self.batch_size = batch_size\n        if flag_gpu:\n            self.ARR = cuda.cupy\n        else:\n            self.ARR = np\n\n        # \u9806\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u9006\u5411\u304d\u306eEncoder\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u3092\u521d\u671f\u5316\n        self.fs = []\n        self.bs = []\n\n    def encode(self, words):\n        \"\"\"\n        Encoder\u306e\u8a08\u7b97\n        :param words: \u5165\u529b\u3067\u4f7f\u7528\u3059\u308b\u5358\u8a9e\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :return:\n        \"\"\"\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        # \u5148\u305a\u306f\u9806\u5411\u304d\u306eEncoder\u306e\u8a08\u7b97\n        for w in words:\n            c, h = self.f_encoder(w, c, h)\n            # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a18\u9332\n            self.fs.append(h)\n\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        # \u9006\u5411\u304d\u306eEncoder\u306e\u8a08\u7b97\n        for w in reversed(words):\n            c, h = self.b_encoder(w, c, h)\n            # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a18\u9332\n            self.bs.insert(0, h)\n\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        self.h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n\n    def decode(self, w):\n        \"\"\"\n        Decoder\u306e\u8a08\u7b97\n        :param w: Decoder\u3067\u5165\u529b\u3059\u308b\u5358\u8a9e\n        :return t: \u4e88\u6e2c\u5358\u8a9e\n        :return att: \u5404\u5358\u8a9e\u306eAttention\u306e\u91cd\u307f\n        :return lambda_: Copy\u91cd\u8996\u304bGenerate\u91cd\u8996\u304b\u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u91cd\u307f\n        \"\"\"\n        # Attention Model\u3067\u5165\u529b\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\n        att_f, att_b, att = self.attention(self.fs, self.bs, self.h)\n        # Decoder\u306b\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\n        t, self.c, self.h = self.decoder(w, self.c, self.h, att_f, att_b)\n        # \u8a08\u7b97\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u7528\u3044\u3066\u03bb\u306e\u8a08\u7b97\n        lambda_ = self.predictor(self.h)\n        return t, att, lambda_\n```\n\n\u5b9f\u306f\u3053\u308c\u3082Attention Model\u306e\u6642\u3068\u3042\u307e\u308a\u5909\u308f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u5909\u66f4\u70b9\u306f\u3001Copy Mode\u3068Generative Mode\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u305f\u3081\u306e\u03bb\u3092\u8a08\u7b97\u3059\u308b\u3001Attention\u306e\u91cd\u307f\u3082\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n## forward\n\n\u5927\u304d\u306a\u5909\u66f4\u70b9\u306fforward\u95a2\u6570\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u3002\nforward\u95a2\u6570\u3067\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u3068\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u3092\u898b\u3066\u3001Copy Mode\u3092\u8a08\u7b97\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\n\n```forward.py\ndef forward(enc_words, dec_words, model, ARR):\n    \"\"\"\n    forward\u306e\u8a08\u7b97\u3092\u3059\u308b\u95a2\u6570\n    :param enc_words: \u5165\u529b\u6587\n    :param dec_words: \u51fa\u529b\u6587\n    :param model: \u30e2\u30c7\u30eb\n    :param ARR: numpy\u304bcuda.cupy\u306e\u3069\u3061\u3089\u304b\n    :return loss: \u640d\u5931\n    \"\"\"\n    # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a18\u9332\n    batch_size = len(enc_words[0])\n    # \u30e2\u30c7\u30eb\u306e\u4e2d\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u52fe\u914d\u306e\u30ea\u30bb\u30c3\u30c8\n    model.reset()\n    # \u5165\u529b\u6587\u306e\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\n    enc_key = enc_words.T\n    # Encoder\u306b\u5165\u529b\u3059\u308b\u6587\u3092Variable\u578b\u306b\u5909\u66f4\u3059\u308b\n    enc_words = [Variable(ARR.array(row, dtype='int32')) for row in enc_words]\n    # Encoder\u306e\u8a08\u7b97\n    model.encode(enc_words)\n    # \u640d\u5931\u306e\u521d\u671f\u5316\n    loss = Variable(ARR.zeros((), dtype='float32'))\n    # <eos>\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b\n    t = Variable(ARR.array([0 for _ in range(batch_size)], dtype='int32'))\n    # \u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u8a08\u7b97\n    for w in dec_words:\n        # 1\u5358\u8a9e\u305a\u3064\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n        y, att, lambda_ = model.decode(t)\n        # \u6b63\u89e3\u5358\u8a9e\u3092Variable\u578b\u306b\u5909\u63db\n        t = Variable(ARR.array(w, dtype='int32'))\n\n        # Generative Mode\u306b\u3088\u308a\u8a08\u7b97\u3055\u308c\u305f\u5358\u8a9e\u306elog_softmax\u3092\u3068\u308b\n        s = functions.log_softmax(y)\n        # Attention\u306e\u91cd\u307f\u306elog_softmax\u3092\u3068\u308b\n        att_s = functions.log_softmax(att)\n        # lambda\u3092sigmoid\u95a2\u6570\u306b\u304b\u3051\u308b\u3053\u3068\u3067\u30010~1\u306e\u5024\u306b\u5909\u66f4\u3059\u308b\n        lambda_s = functions.reshape(functions.sigmoid(lambda_), (batch_size,))\n        # Generative Mode\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        Pg = Variable(ARR.zeros((), dtype='float32'))\n        # Copy Mode\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        Pc = Variable(ARR.zeros((), dtype='float32'))\n        # lambda\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u640d\u5931\u306e\u521d\u671f\u5316\n        epsilon = Variable(ARR.zeros((), dtype='float32'))\n        # \u3053\u3053\u304b\u3089\u30d0\u30c3\u30c1\u5185\u306e\u4e00\u5358\u8a9e\u305a\u3064\u306e\u640d\u5931\u3092\u8a08\u7b97\u3059\u308b\u3001for\u6587\u3092\u56de\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u30c0\u30b5\u3044\u30fb\u30fb\u30fb\n        counter = 0\n        for i, words in enumerate(w):\n            # -1\u306f\u5b66\u7fd2\u3057\u306a\u3044\u5358\u8a9e\u306b\u3064\u3051\u3066\u3044\u308b\u30e9\u30d9\u30eb\u3002\u3053\u308c\u306f\u7121\u8996\u3059\u308b\u3002\n            if words != -1:\n                # Generative Mode\u306e\u640d\u5931\u306e\u8a08\u7b97\n                Pg += functions.get_item(functions.get_item(s, i), words) * functions.reshape((1.0 - functions.get_item(lambda_s, i)), ())\n                counter += 1\n                # \u3082\u3057\u5165\u529b\u6587\u306e\u4e2d\u306b\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u304c\u5b58\u5728\u3059\u308c\u3070\n                if words in enc_key[i]:\n                    # Copy Mode\u306e\u8a08\u7b97\u3092\u3059\u308b\n                    Pc += functions.get_item(functions.get_item(att_s, i), list(enc_key[i]).index(words)) * functions.reshape(functions.get_item(lambda_s, i), ())\n                    # \u30e9\u30e0\u30c0\u304cCopy Mode\u3088\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\n                    epsilon += functions.log(functions.get_item(lambda_s, i))\n                # \u5165\u529b\u6587\u306e\u4e2d\u306b\u51fa\u529b\u3057\u305f\u3044\u5358\u8a9e\u304c\u306a\u3051\u308c\u3070\n                else:\n                    # \u30e9\u30e0\u30c0\u304cGenerative Mode\u3088\u308a\u306b\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\n                    epsilon += functions.log(1.0 - functions.get_item(lambda_s, i))\n        # \u305d\u308c\u305e\u308c\u306e\u640d\u5931\u3092\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u3063\u3066\u3001\u5408\u8a08\u3059\u308b\n        Pg *= (-1.0 / np.max([1, counter]))\n        Pc *= (-1.0 / np.max([1, counter]))\n        epsilon *= (-1.0 / np.max([1, counter]))\n        loss += Pg + Pc + epsilon\n    return loss\n```\n\n\u30b3\u30fc\u30c9\u5185\u3067\u306f\u3001Generative Mode\u3001Copy Mode\u3001\u03bb\u306e\u305d\u308c\u305e\u308c\u306e\u5b66\u7fd2\u3092\u3059\u308b\u305f\u3081\u306b\u3001Pg\u3001Pc\u3001epsilon\u3068\u3044\u30463\u3064\u306e\u640d\u5931\u3092\u5b9a\u7fa9\u3057\u3066\u305d\u308c\u305e\u308c\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\nfunctions.log_softmax\u3092\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002log(softmax(x))\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u3001softmax\u306e\u8a08\u7b97\u304c0\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u6642\u306b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u306b\u3088\u3063\u3066\u3046\u307e\u304f\u3084\u3063\u3066\u304f\u308c\u3066\u3044\u307e\u3059\uff08\u3069\u3046\u3044\u3046\u98a8\u306b\u3046\u307e\u304f\u3084\u3063\u3066\u3044\u308b\u304b\u306f\u8b0e\u30fb\u30fb\u30fb\uff09\u3002\n\nfunctions.softmax_cross_entropy\u95a2\u6570\u3092\u4f7f\u3048\u3070\u3001\u3053\u3093\u306a\u3081\u3093\u3069\u304f\u3055\u3044\u8a08\u7b97\u306f\u3044\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u03bb\u3067Copy Mode\u306e\u640d\u5931\u3068Generative Mode\u306e\u640d\u5931\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308a\u305f\u3044\u306e\u3067\u3001functions.get_items\u3001functions.log_softmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u640d\u5931\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3082\u3046\u5c11\u3057\u3046\u307e\u3044\u5b9f\u88c5\u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u306f\u662f\u975e\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u30fb\u30fb\u30fb\n\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\nhttps://github.com/kenchin110100/machine_learning/blob/master/sampleCopySeq2Seq.py\n\u306b\u3042\u308a\u307e\u3059\u3002\n\n# \u5b9f\u9a13\n\n## \u30b3\u30fc\u30d1\u30b9\n\n\u4eca\u307e\u3067\u3068\u540c\u3058\u3088\u3046\u306b\u5bfe\u8a71\u7834\u7dbb\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nhttps://sites.google.com/site/dialoguebreakdowndetection/chat-dialogue-corpus\n\n## \u5b9f\u9a13\u7d50\u679c\n\n\u767a\u8a71\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e4\u7a2e\n\n* token1 = '\u304a\u306f\u3088\u3046'\n* token2 = '\u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f'\n* token3 = '\u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f'\n* token4 = '\u4eca\u65e5\u306f\u6691\u3044\u3067\u3059'\n\nEpoch\u3054\u3068\u306b\u5fdc\u7b54\u7d50\u679c\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nEpoch 1\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '\u306f', '\u3067\u3059', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '\u304c', '\u304c', '\u304c', '\u305f', '\u305f', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy', 'gen', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4eca\u65e5', '\u306f', '\u306f', '\u3067\u3059', '\u3067\u3059', '</s>'] ['copy', 'copy', 'copy', 'copy', 'copy', 'copy']\n```\n\u5b8c\u5168\u306b\u58ca\u308c\u3066\u307e\u3059\u306d\u30fb\u30fb\u30fb\n\nEpoch 3\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '</s>'] ['copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u306d', '</s>'] ['copy', 'copy', 'gen', 'gen', 'gen', 'copy']\n```\n\nEpoch 5\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u304b', '</s>'] ['copy', 'copy', 'gen', 'copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '</s>'] ['copy', 'copy']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u3067\u3059', '</s>'] ['copy', 'gen', 'copy']\n```\n\u304a\u8179\u3068\u5ba3\u8a00\u3055\u308c\u307e\u3057\u3066\u3082\u30fb\u30fb\u30fb\n\nEpoch 7\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>'] ['copy', 'gen', 'gen', 'copy']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u8abf\u5b50', '\u306f', '</s>'] ['copy', 'gen', 'copy']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u304a\u8179', '\u304c', '\u7a7a\u304d', '\u307e\u3057', '\u305f', '</s>'] ['copy', 'gen', 'copy', 'copy', 'gen', 'gen']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u6691\u3044', '\u3067\u3059', '</s>'] ['copy', 'gen', 'copy']\n```\n\n\u5b66\u7fd2\u306b\u306f<\u8abf\u5b50>\u3068\u3044\u3046\u5358\u8a9e\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u305d\u306e\u70b9\u3046\u307e\u304f\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u307e\u3059\u3002\n\n\u305f\u3060\u3001\u6b63\u76f4\u3082\u3046\u5c11\u3057\u3046\u307e\u304f\u56de\u7b54\u3057\u3066\u307b\u3057\u3044\u70b9\u3082\u3042\u308a\u307e\u3059\u3002\n\nCopy Mode\u3068Generate Mode\u306e\u4e21\u65b9\u3092\u5b66\u7fd2\u3059\u308b\u306e\u3067\u3001Decoder\u304c\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u304d\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\n\n\u8ad6\u6587\u5185\u3067\u306f\u5bfe\u8a71\u30bf\u30b9\u30af\u3067\u306f\u306a\u304f\u3001\u8981\u7d04\u30bf\u30b9\u30af\u3067\u8a55\u4fa1\u3057\u3066\u3044\u305f\u306e\u3082\u3053\u306e\u8fba\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\uff08\u307e\u3042\u3001\u4e00\u756a\u306e\u539f\u56e0\u306f\u5b9f\u88c5\u306b\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u30fb\u30fb\u30fb\uff09\n\n# \u7d50\u8ad6\n\nchainer\u3092\u4f7f\u3063\u3066CopyNet\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u5bfe\u8a71\u30e2\u30c7\u30eb\u30923\u56de\u3084\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u3082\u3046\u304a\u8179\u3044\u3063\u3071\u3044\u304b\u306a\u7b11\n\u6b21\u306f\u307e\u305f\u5225\u306e\u3053\u3068\u3092\u4f55\u304b\u3057\u3089\u3084\u308a\u307e\u3059\u3002\n"}