{"tags": ["cocos2d-x3.0, 3.1", "iOS", "Android"], "context": " More than 1 year has passed since last update.\n\nipa\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3001apk\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306b\u3064\u3044\u3066\n\u3054\u5b58\u77e5\u306e\u65b9\u3082\u591a\u3044\u304b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\n\u975ewifi\u74b0\u5883\u3067\u306fiOS\u30a2\u30d7\u30ea\u306eipa\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306f\n100MB\u307e\u3067\u3001\nAndroid\u30a2\u30d7\u30ea\u306eapk\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306f\n50MB\u307e\u3067\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nAndroid\u306fapk\u3068\u306f\u5225\u306b\u62e1\u5f35\u30d5\u30a1\u30a4\u30eb\u3068\u3044\u3046\u7269\u3092\u767b\u9332\u3059\u308b\u3068\u6700\u59274GB\u307e\u3067\u3044\u3051\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u3092\u30de\u30fc\u30b1\u30c3\u30c8\u306b\u767b\u9332\u3059\u308b\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\u306e\u624b\u9806\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\n\u62e1\u5f35\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3059\u308b\u6642\u306b\u30a2\u30d7\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u66f4\u65b0\u3057\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u305f\u3081\u3001\n\u3061\u3087\u3063\u3068\u4f7f\u3044\u306b\u304f\u3044\u3067\u3059\n\u305d\u306e\u305f\u3081\u3001\u5927\u4f53\u3069\u306e\u30a2\u30d7\u30ea\u3082\u30de\u30fc\u30b1\u30c3\u30c8\u4e0a\u3067\u306f50MB\u4ee5\u4e0b\u306b\u6291\u3048\u3066\u304a\u3044\u3066\u3001\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001\u8d77\u52d5\u3057\u305f\u6642\u306b\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3067DL\u3059\u308b\u3088\u3046\u306a\n\u4ed5\u7d44\u307f\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u306f\u305d\u306e\u6642\u306b\u6709\u7528(\u304b\u3082\u3057\u308c\u306a\u3044)zip\u30d5\u30a1\u30a4\u30eb\u5468\u308a\u306eTips\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fcocos2d-x v3.1.1\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u30013.0\u3067\u3082\u52d5\u4f5c\u3059\u308b\u306e\u306f\u78ba\u8a8d\u6e08\u307f\u3067\u3059\u3002\n\u5fc5\u8981\u306a\u6240\u3060\u3051\u306e\u629c\u7c8b\u3067\u3001\u591a\u5c11\u7701\u7565\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u304a\u8a31\u3057\u4e0b\u3055\u3044\u3002\n\nzip\u30d5\u30a1\u30a4\u30eb\u3092\u901a\u4fe1\u3067\u53d6\u5f97\u5f8c\u3001\u4fdd\u5b58\n\nHelloWorldScene.h\n\n#include \"cocos2d.h\"\n#import \"network/HttpClient.h\"\n\nUSING_NS_CC;\nusing namespace cocos2d::network;\n\nclass HelloWorld : public cocos2d::Layer\n{\npublic:\n    // there's no 'id' in cpp, so we recommend returning the class instance pointer\n    static cocos2d::Scene* createScene();\n\n    // Here's a difference. Method 'init' in cocos2d-x returns bool, instead of returning 'id' in cocos2d-iphone\n    virtual bool init();  \n\n    // a selector callback\n    void menuCloseCallback(cocos2d::Ref* pSender);\n\n    // implement the \"static create()\" method manually\n    CREATE_FUNC(HelloWorld);\n\n    void httpCallBackResponse(HttpClient* client , HttpResponse* response);\n};\n\n\n\n\nHelloWorldScene.cpp\n\n#include \"HelloWorldScene.h\"\n#import \"external/unzip/unzip.h\"\n\nScene* HelloWorld::createScene(){ // \u7565 }\n\n// on \"init\" you need to initialize your instance\nbool HelloWorld::init()\n{\n    // \u7565\n\n    auto request = new HttpRequest();\n    request->setUrl(\"http://*****.***.amazonaws.com/img_100.zip\");\n    request->setRequestType(cocos2d::network::HttpRequest::Type::GET);\n    // cocos v3.0 \u306f\u3053\u3046\n    //request->setResponseCallback(this, httpresponse_selector(HelloWorld::httpCallBackResponse));\n\n    // cocos v3.1 \u306f\u3053\u3046\n    request->setResponseCallback(CC_CALLBACK_2(HelloWorld::httpCallBackResponse ,this));\n    network::HttpClient::getInstance()->send(request);\n\n    return true;\n}\n\nvoid HelloWorld::httpCallBackResponse(HttpClient* client , HttpResponse* response)\n{\n    if (response->isSucceed()) {\n        std::vector<char>* buffer = response->getResponseData();\n\n        CCLOG(\"buffet size :: %lu\" , buffer->size());\n\n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string path = filePath.c_str() + zipFile;\n\n        // zip\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\n        FILE* fp = fopen(path.c_str() , \"wb\");\n        CCLOG(\"debug writtern :: %zu\" , fwrite(buffer->data() , 1, buffer->size() , fp));\n        fclose(fp);\n    }\n}    \n\n\nvoid HelloWorld::menuCloseCallback(Ref* pSender){ // \u7565 }\n\n\n\n\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u304c\u53ef\u80fd\u3067\u3059\u3002\n\nzip\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u4e00\u89a7\u3092\u53d6\u308a\u51fa\u3059\n\u3053\u308c\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u53ef\u80fd\u3067\u3059\u3002\n\nHelloWorldScene.cpp\n\n#import \"external/unzip/unzip.h\"\n\nvoid readInZipFileName()\n{\n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string path = filePath.c_str() + zipFile;\n\n        // zip\u30d5\u30a1\u30a4\u30eb\u3092open\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n        unzFile zipfile = unzOpen(path.c_str());\n\n        unz_global_info global_info;\n        if ( unzGetGlobalInfo( zipfile, &global_info ) != UNZ_OK )\n        {\n            printf( \"could not read file global infon\" );\n            unzClose( zipfile );\n            return;\n        }\n\n        // \u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u5408\u308f\u305b\u307e\u3059\n        unzGoToFirstFile(zipfile);\n        uLong i;\n        for ( i = 0; i < global_info.number_entry; ++i )\n        {\n            // Get info about current file.\n            char filename[ 100 ];\n            if ( unzGetCurrentFileInfo64(zipfile, \n                                         NULL, \n                                         filename, \n                                         100, \n                                         NULL, 0, NULL, 0)\n\n                != UNZ_OK )\n            {\n                CCLOG( \"could not read file\" );\n                unzClose( zipfile );\n                return;\n            }\n            std::string str(filename);\n\n            CCLOG(\"file[%lu] name == %s\" , i , str.c_str());\n            // \u3053\u3053\u3067std::vector\u306b\u3067\u3082\u8a70\u3081\u308c\u3070OK\n\n            // \u6b21\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u9032\u3081\u308b\n            unzGoToNextFile(zipfile);\n        }\n        // \u7d42\u308f\u3063\u305f\u3089close\u3092\u5fd8\u308c\u305a\u306b\u3002\n        unzClose(zipfile);\n}\n\n\n\n\nzip\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u3042\u308b\u753b\u50cf\u3092Sprite\u3067\u8868\u793a\u3059\u308b\n\u3053\u308c\u306f\u304a\u99b4\u67d3\u307f\u3067\u3059\u306d\u3002\u307e\u3068\u3081\u3063\u3066\u4e8b\u3067\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nHelloWorld.cpp\n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string imgFile = \"img_100/f001.png\"\n        std::string path = filePath.c_str() + zipFile;\n\n        // zip file\u304b\u3089\u6307\u5b9a\u3057\u305f\u753b\u50cf\u3092\u8aad\u307f\u51fa\u3057\u3066\u8868\u793a\n        unsigned long size = 0;\n        unsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(\n                                                     path.c_str() , \n                                                     zipFile.c_str(), \n                                                     (ssize_t*)&size);\n\n        auto img = new Image();\n        img->initWithImageData(buf , size);\n\n        auto texture = new Texture2D();\n        texture->initWithImage(img);\n\n        auto sprite = Sprite::createWithTexture(texture);\n\n        this->addChild(sprite);\n\n\n\n\n\u6c17\u306b\u306a\u308bread time\u3002\u6c17\u306b\u306a\u308b\u3088\u306d\uff1f\n\u3053\u308c\u3053\u308c\u3001\u4e00\u969b\u602a\u3057\u3044\u5149\u3092\u653e\u3064\u3053\u308c\u3002\n\nHelloWorld.cpp\n\nunsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(\n                                                     path.c_str() , \n                                                     zipFile.c_str(), \n                                                     (ssize_t*)&size);\n\n\n\n\u3053\u308c\u6c17\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3047\u3002zip\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u51fa\u3059\u3063\u3066\u5358\u7d14\u306b\u8003\u3048\u3066\u9045\u3044\u3067\u3057\u3087\u3046\u3002\n\u3067\u3001\u3069\u306e\u3050\u3089\u3044\u9045\u3044\u306e\u304b\u3001\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u753b\u50cf\u3092100\u679a\u7528\u610f\u3002(\u5168\u3066\u5225\u753b\u50cf\u3001\u4e00\u679a\u8fba\u308a\u3001600x800 600kb\u524d\u5f8c)\nzip\u30d5\u30a1\u30a4\u30eb\u306b\u5727\u7e2e\u5f8c\u306e\u30b5\u30a4\u30ba\uff1a47.3MB\nzip\u30d5\u30a1\u30a4\u30eb\u306b\u5727\u7e2e\u3057\u306a\u3044\u3068\uff1a58MB\n100\u679a\u8aad\u307f\u51fa\u3057\u3066addChild\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u4e00\u5ea6\u8aad\u307f\u3060\u3059\u3068TextureCache\u306b\u8f09\u308b\u305f\u3081\u3001\u4e8c\u56de\u76ee\u4ee5\u964d\u306f\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u5ff5\u3092\u5165\u308c\u3066\u7247\u65b9\u305a\u3064\u8a08\u6e2c\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nHelloWorldScene.cpp\n\n// \u7247\u65b9\u305a\u3064\u884c\u3044\u307e\u3059\u3002(\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u7c21\u5358\u306b)\nvoid exec(){\n    // resource\u304b\u3089\u8aad\u307f\u51fa\u3059\n    const auto resourceStartTime = std::chrono::system_clock::now();\n    for(int i = 1 ; i < 101 ; i++){\n        sprintf(str, \"f%03d.png\" , i);\n        readFromResource(str);\n    }\n    const auto resourceEndTime = std::chrono::system_clock::now();\n    const auto resourceExecTime = resourceEndTime - resourceStartTime;\n\n    CCLOG(\"resourceExecTime : %lld ms\" , std::chrono::duration_cast<std::chrono::milliseconds>(resourceExecTime).count());\n\n    // zip\u304b\u3089\u8aad\u307f\u51fa\u3059\n    const auto zipStartTime = std::chrono::system_clock::now();\n    for(int i = 1 ; i < 101 ; i++){\n        sprintf(str, \"f%03d.png\" , i);\n        readFromZip(str);\n    }\n    const auto zipEndTime = std::chrono::system_clock::now();\n    const auto zipExecTime = zipEndTime - zipStartTime;\n\n    CCLOG(\"zipExecTime : %lld ms\" , std::chrono::duration_cast<std::chrono::milliseconds>(zipExecTime).count());\n}\n\nvoid HelloWorld::readFromResource(const char* _fileName){\n    auto sprite = Sprite::create(_fileName);\n    this->addChild(sprite);\n}\n\nvoid HelloWorld::readFromZip(const char* _fileName){\n\n    std::string fileName = \"img_100/\";\n    fileName = fileName + _fileName;\n    // zip file\u304b\u3089\u6307\u5b9a\u3057\u305f\u753b\u50cf\u3092\u8aad\u307f\u51fa\u3057\u3066\u8868\u793a\n    unsigned long size = 0;\n    unsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(path.c_str() , fileName.c_str(), (ssize_t*)&size);\n\n    auto img = new Image();\n    img->initWithImageData(buf , size);\n\n    auto texture = new Texture2D();\n    texture->initWithImage(img);\n\n    auto sprite = Sprite::createWithTexture(texture);\n\n    this->addChild(sprite);\n}\n\n\n\n\n\u7d50\u679c\ncocos2d: resourceExecTime : 4592 ms\ncocos2d: zipExecTime : 4757 ms\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5f53\u521d\u306e\u4e88\u60f3\u901a\u308azip\u306e\u65b9\u304c\u9045\u3044\uff01\u3063\u3066\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u304c\u3001\n\u601d\u3063\u305f\u3088\u308a\u3082\u305d\u3053\u307e\u3067\u5dee\u304c\u4ed8\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4e00\u5ea6\u8aad\u3093\u3067\u3057\u307e\u3048\u3070\u3001textureCache\u306b\u8f09\u305b\u308b\u4e8b\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\n\u5168\u304f\u4f7f\u3048\u306a\u3044\u3063\u3066\u4e8b\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u305d\u306e\u4ed6\nzip\u306b\u3064\u3044\u3066\u8272\u3005\u3068\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u304c\u3001\n\u5b9f\u904b\u7528\u4e0a\u3067\u306f\u3001\n* \u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\n* \u5dee\u5206\u66f4\u65b0\n* Android\u306e\u6319\u52d5\u554f\u984c(\u7aef\u672b\u3084OSver\u306b\u3088\u3063\u3066\u306fApplication.mk\u306bunzip.h\u5165\u308c\u306a\u3044\u3068\u30c0\u30e1\u304b\u3082\u3002\u672a\u78ba\u8a8d)\n\u306a\u3069\u306a\u3069\u3001\u307e\u3060\u307e\u3060\u8003\u3048\u308b\u4e8b\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u3042\u3001\u524a\u9664\u3002remove(writablePath + \"xxx.zip\")\u3067\u51fa\u6765\u308b\u3088\u3002\n\u3042\u3001zip\u304b\u3089\u8aad\u307f\u3060\u3057\u305f\u5f8c\u306btextureCache\u306b\u660e\u793a\u7684\u306b\u5165\u308c\u306a\u3044\u3068\u30c0\u30e1\u304b\u3082\uff1f\n\u3042\u3001zip\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u51fa\u3059\u6642\u306b\u3001NULL\u306b\u306a\u3063\u3061\u3083\u3046\u3093\u3060\u3051\u3069\u2026\u3063\u3066\u4eba\u306f\u3001external/unzip/unzip.h 1300\u884c\u76ee\u8fba\u308aint ZEXPORT unzLocateFile()\u306e\u8fba\u308a\u306b\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u8cbc\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3002\n\u3068\u307e\u3060\u307e\u3060\u30cd\u30bf\u306f\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\uff01\n# ipa\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3001apk\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306b\u3064\u3044\u3066\n\u3054\u5b58\u77e5\u306e\u65b9\u3082\u591a\u3044\u304b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\n\u975ewifi\u74b0\u5883\u3067\u306fiOS\u30a2\u30d7\u30ea\u306eipa\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306f\n**100MB**\u307e\u3067\u3001\nAndroid\u30a2\u30d7\u30ea\u306eapk\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306f\n**50MB**\u307e\u3067\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nAndroid\u306fapk\u3068\u306f\u5225\u306b\u62e1\u5f35\u30d5\u30a1\u30a4\u30eb\u3068\u3044\u3046\u7269\u3092\u767b\u9332\u3059\u308b\u3068\u6700\u59274GB\u307e\u3067\u3044\u3051\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u3092\u30de\u30fc\u30b1\u30c3\u30c8\u306b\u767b\u9332\u3059\u308b\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\u306e\u624b\u9806\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\n\u62e1\u5f35\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3059\u308b\u6642\u306b\u30a2\u30d7\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u66f4\u65b0\u3057\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u305f\u3081\u3001\n\u3061\u3087\u3063\u3068\u4f7f\u3044\u306b\u304f\u3044\u3067\u3059\n\n\u305d\u306e\u305f\u3081\u3001\u5927\u4f53\u3069\u306e\u30a2\u30d7\u30ea\u3082\u30de\u30fc\u30b1\u30c3\u30c8\u4e0a\u3067\u306f50MB\u4ee5\u4e0b\u306b\u6291\u3048\u3066\u304a\u3044\u3066\u3001\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001\u8d77\u52d5\u3057\u305f\u6642\u306b\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3067DL\u3059\u308b\u3088\u3046\u306a\n\u4ed5\u7d44\u307f\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u306f\u305d\u306e\u6642\u306b\u6709\u7528(\u304b\u3082\u3057\u308c\u306a\u3044)zip\u30d5\u30a1\u30a4\u30eb\u5468\u308a\u306eTips\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\n**\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fcocos2d-x v3.1.1\u3067\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u30013.0\u3067\u3082\u52d5\u4f5c\u3059\u308b\u306e\u306f\u78ba\u8a8d\u6e08\u307f\u3067\u3059\u3002**\n\n\u5fc5\u8981\u306a\u6240\u3060\u3051\u306e\u629c\u7c8b\u3067\u3001\u591a\u5c11\u7701\u7565\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u304a\u8a31\u3057\u4e0b\u3055\u3044\u3002\n\n# zip\u30d5\u30a1\u30a4\u30eb\u3092\u901a\u4fe1\u3067\u53d6\u5f97\u5f8c\u3001\u4fdd\u5b58\n\n```cpp:HelloWorldScene.h\n\n#include \"cocos2d.h\"\n#import \"network/HttpClient.h\"\n\nUSING_NS_CC;\nusing namespace cocos2d::network;\n\nclass HelloWorld : public cocos2d::Layer\n{\npublic:\n    // there's no 'id' in cpp, so we recommend returning the class instance pointer\n    static cocos2d::Scene* createScene();\n\n    // Here's a difference. Method 'init' in cocos2d-x returns bool, instead of returning 'id' in cocos2d-iphone\n    virtual bool init();  \n    \n    // a selector callback\n    void menuCloseCallback(cocos2d::Ref* pSender);\n    \n    // implement the \"static create()\" method manually\n    CREATE_FUNC(HelloWorld);\n    \n    void httpCallBackResponse(HttpClient* client , HttpResponse* response);\n};\n\n```\n\n```cpp:HelloWorldScene.cpp\n\n#include \"HelloWorldScene.h\"\n#import \"external/unzip/unzip.h\"\n\nScene* HelloWorld::createScene(){ // \u7565 }\n\n// on \"init\" you need to initialize your instance\nbool HelloWorld::init()\n{\n    // \u7565\n    \n    auto request = new HttpRequest();\n    request->setUrl(\"http://*****.***.amazonaws.com/img_100.zip\");\n    request->setRequestType(cocos2d::network::HttpRequest::Type::GET);\n    // cocos v3.0 \u306f\u3053\u3046\n    //request->setResponseCallback(this, httpresponse_selector(HelloWorld::httpCallBackResponse));\n    \n    // cocos v3.1 \u306f\u3053\u3046\n    request->setResponseCallback(CC_CALLBACK_2(HelloWorld::httpCallBackResponse ,this));\n    network::HttpClient::getInstance()->send(request);\n    \n    return true;\n}\n\nvoid HelloWorld::httpCallBackResponse(HttpClient* client , HttpResponse* response)\n{\n    if (response->isSucceed()) {\n        std::vector<char>* buffer = response->getResponseData();\n        \n        CCLOG(\"buffet size :: %lu\" , buffer->size());\n        \n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string path = filePath.c_str() + zipFile;\n        \n        // zip\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\n        FILE* fp = fopen(path.c_str() , \"wb\");\n        CCLOG(\"debug writtern :: %zu\" , fwrite(buffer->data() , 1, buffer->size() , fp));\n        fclose(fp);\n    }\n}    \n\n\nvoid HelloWorld::menuCloseCallback(Ref* pSender){ // \u7565 }\n\n```\n\n\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u4fdd\u5b58\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\n# zip\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u4e00\u89a7\u3092\u53d6\u308a\u51fa\u3059\n\u3053\u308c\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u53ef\u80fd\u3067\u3059\u3002\n\n```cpp:HelloWorldScene.cpp\n\n#import \"external/unzip/unzip.h\"\n\nvoid readInZipFileName()\n{\n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string path = filePath.c_str() + zipFile;\n        \n        // zip\u30d5\u30a1\u30a4\u30eb\u3092open\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n        unzFile zipfile = unzOpen(path.c_str());\n\n        unz_global_info global_info;\n        if ( unzGetGlobalInfo( zipfile, &global_info ) != UNZ_OK )\n        {\n            printf( \"could not read file global infon\" );\n            unzClose( zipfile );\n            return;\n        }\n        \n        // \u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u5408\u308f\u305b\u307e\u3059\n        unzGoToFirstFile(zipfile);\n        uLong i;\n        for ( i = 0; i < global_info.number_entry; ++i )\n        {\n            // Get info about current file.\n            char filename[ 100 ];\n            if ( unzGetCurrentFileInfo64(zipfile, \n                                         NULL, \n                                         filename, \n                                         100, \n                                         NULL, 0, NULL, 0)\n\n                != UNZ_OK )\n            {\n                CCLOG( \"could not read file\" );\n                unzClose( zipfile );\n                return;\n            }\n            std::string str(filename);\n            \n            CCLOG(\"file[%lu] name == %s\" , i , str.c_str());\n            // \u3053\u3053\u3067std::vector\u306b\u3067\u3082\u8a70\u3081\u308c\u3070OK\n\n            // \u6b21\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u9032\u3081\u308b\n            unzGoToNextFile(zipfile);\n        }\n        // \u7d42\u308f\u3063\u305f\u3089close\u3092\u5fd8\u308c\u305a\u306b\u3002\n        unzClose(zipfile);\n}\n\n```\n\n# zip\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306b\u3042\u308b\u753b\u50cf\u3092Sprite\u3067\u8868\u793a\u3059\u308b\n\u3053\u308c\u306f\u304a\u99b4\u67d3\u307f\u3067\u3059\u306d\u3002\u307e\u3068\u3081\u3063\u3066\u4e8b\u3067\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp:HelloWorld.cpp\n        std::string filePath = FileUtils::getInstance()->getWritablePath();\n        std::string zipFile = \"img_100.zip\";\n        std::string imgFile = \"img_100/f001.png\"\n        std::string path = filePath.c_str() + zipFile;\n        \n        // zip file\u304b\u3089\u6307\u5b9a\u3057\u305f\u753b\u50cf\u3092\u8aad\u307f\u51fa\u3057\u3066\u8868\u793a\n        unsigned long size = 0;\n        unsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(\n                                                     path.c_str() , \n                                                     zipFile.c_str(), \n                                                     (ssize_t*)&size);\n        \n        auto img = new Image();\n        img->initWithImageData(buf , size);\n        \n        auto texture = new Texture2D();\n        texture->initWithImage(img);\n        \n        auto sprite = Sprite::createWithTexture(texture);\n        \n        this->addChild(sprite);\n\n```\n\n# \u6c17\u306b\u306a\u308bread time\u3002\u6c17\u306b\u306a\u308b\u3088\u306d\uff1f\n\n\u3053\u308c\u3053\u308c\u3001\u4e00\u969b\u602a\u3057\u3044\u5149\u3092\u653e\u3064\u3053\u308c\u3002\n\n```cpp:HelloWorld.cpp\n\nunsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(\n                                                     path.c_str() , \n                                                     zipFile.c_str(), \n                                                     (ssize_t*)&size);\n\n```\n\n\u3053\u308c\u6c17\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3047\u3002zip\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u51fa\u3059\u3063\u3066\u5358\u7d14\u306b\u8003\u3048\u3066\u9045\u3044\u3067\u3057\u3087\u3046\u3002\n\u3067\u3001\u3069\u306e\u3050\u3089\u3044\u9045\u3044\u306e\u304b\u3001\u8a08\u6e2c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n* \u753b\u50cf\u3092100\u679a\u7528\u610f\u3002(\u5168\u3066\u5225\u753b\u50cf\u3001\u4e00\u679a\u8fba\u308a\u3001600x800 600kb\u524d\u5f8c)\n* zip\u30d5\u30a1\u30a4\u30eb\u306b\u5727\u7e2e\u5f8c\u306e\u30b5\u30a4\u30ba\uff1a47.3MB\n* zip\u30d5\u30a1\u30a4\u30eb\u306b\u5727\u7e2e\u3057\u306a\u3044\u3068\uff1a58MB\n* 100\u679a\u8aad\u307f\u51fa\u3057\u3066addChild\u3059\u308b\u307e\u3067\u306e\u6642\u9593\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\n* \u4e00\u5ea6\u8aad\u307f\u3060\u3059\u3068TextureCache\u306b\u8f09\u308b\u305f\u3081\u3001\u4e8c\u56de\u76ee\u4ee5\u964d\u306f\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\n* \u305d\u306e\u305f\u3081\u3001\u5ff5\u3092\u5165\u308c\u3066\u7247\u65b9\u305a\u3064\u8a08\u6e2c\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```cpp:HelloWorldScene.cpp\n\n// \u7247\u65b9\u305a\u3064\u884c\u3044\u307e\u3059\u3002(\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u7c21\u5358\u306b)\nvoid exec(){\n    // resource\u304b\u3089\u8aad\u307f\u51fa\u3059\n    const auto resourceStartTime = std::chrono::system_clock::now();\n    for(int i = 1 ; i < 101 ; i++){\n        sprintf(str, \"f%03d.png\" , i);\n        readFromResource(str);\n    }\n    const auto resourceEndTime = std::chrono::system_clock::now();\n    const auto resourceExecTime = resourceEndTime - resourceStartTime;\n\n    CCLOG(\"resourceExecTime : %lld ms\" , std::chrono::duration_cast<std::chrono::milliseconds>(resourceExecTime).count());\n    \n    // zip\u304b\u3089\u8aad\u307f\u51fa\u3059\n    const auto zipStartTime = std::chrono::system_clock::now();\n    for(int i = 1 ; i < 101 ; i++){\n        sprintf(str, \"f%03d.png\" , i);\n        readFromZip(str);\n    }\n    const auto zipEndTime = std::chrono::system_clock::now();\n    const auto zipExecTime = zipEndTime - zipStartTime;\n    \n    CCLOG(\"zipExecTime : %lld ms\" , std::chrono::duration_cast<std::chrono::milliseconds>(zipExecTime).count());\n}\n\nvoid HelloWorld::readFromResource(const char* _fileName){\n    auto sprite = Sprite::create(_fileName);\n    this->addChild(sprite);\n}\n\nvoid HelloWorld::readFromZip(const char* _fileName){\n    \n    std::string fileName = \"img_100/\";\n    fileName = fileName + _fileName;\n    // zip file\u304b\u3089\u6307\u5b9a\u3057\u305f\u753b\u50cf\u3092\u8aad\u307f\u51fa\u3057\u3066\u8868\u793a\n    unsigned long size = 0;\n    unsigned char* buf = FileUtils::getInstance()->getFileDataFromZip(path.c_str() , fileName.c_str(), (ssize_t*)&size);\n    \n    auto img = new Image();\n    img->initWithImageData(buf , size);\n    \n    auto texture = new Texture2D();\n    texture->initWithImage(img);\n    \n    auto sprite = Sprite::createWithTexture(texture);\n    \n    this->addChild(sprite);\n}\n\n```\n\n# \u7d50\u679c\n\n**cocos2d: resourceExecTime : 4592 ms**\n\n**cocos2d: zipExecTime : 4757 ms**\n\n\n\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5f53\u521d\u306e\u4e88\u60f3\u901a\u308azip\u306e\u65b9\u304c\u9045\u3044\uff01\u3063\u3066\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u304c\u3001\n\u601d\u3063\u305f\u3088\u308a\u3082\u305d\u3053\u307e\u3067\u5dee\u304c\u4ed8\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4e00\u5ea6\u8aad\u3093\u3067\u3057\u307e\u3048\u3070\u3001textureCache\u306b\u8f09\u305b\u308b\u4e8b\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\n\u5168\u304f\u4f7f\u3048\u306a\u3044\u3063\u3066\u4e8b\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u3002\n\n# \u305d\u306e\u4ed6\nzip\u306b\u3064\u3044\u3066\u8272\u3005\u3068\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u304c\u3001\n\u5b9f\u904b\u7528\u4e0a\u3067\u306f\u3001\n* \u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\n* \u5dee\u5206\u66f4\u65b0\n* Android\u306e\u6319\u52d5\u554f\u984c(\u7aef\u672b\u3084OSver\u306b\u3088\u3063\u3066\u306fApplication.mk\u306bunzip.h\u5165\u308c\u306a\u3044\u3068\u30c0\u30e1\u304b\u3082\u3002\u672a\u78ba\u8a8d)\n\u306a\u3069\u306a\u3069\u3001\u307e\u3060\u307e\u3060\u8003\u3048\u308b\u4e8b\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n\u3042\u3001\u524a\u9664\u3002remove(writablePath + \"xxx.zip\")\u3067\u51fa\u6765\u308b\u3088\u3002\n\u3042\u3001zip\u304b\u3089\u8aad\u307f\u3060\u3057\u305f\u5f8c\u306btextureCache\u306b\u660e\u793a\u7684\u306b\u5165\u308c\u306a\u3044\u3068\u30c0\u30e1\u304b\u3082\uff1f\n\u3042\u3001zip\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u51fa\u3059\u6642\u306b\u3001NULL\u306b\u306a\u3063\u3061\u3083\u3046\u3093\u3060\u3051\u3069\u2026\u3063\u3066\u4eba\u306f\u3001external/unzip/unzip.h 1300\u884c\u76ee\u8fba\u308aint ZEXPORT unzLocateFile()\u306e\u8fba\u308a\u306b\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u8cbc\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3002\n\n\u3068\u307e\u3060\u307e\u3060\u30cd\u30bf\u306f\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\uff01\n"}