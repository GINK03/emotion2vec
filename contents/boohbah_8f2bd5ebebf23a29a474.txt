{"tags": ["Kotlin"], "context": " More than 1 year has passed since last update.\u307f\u306a\u3055\u3093\u306e\u3068\u3053\u308d\u306b\u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f\u5c4a\u304d\u307e\u3057\u305f\u304b\uff1f\n\u3068\u3044\u3046\u3053\u3068\u3067 \u30cd\u30bf\u304c\u306a\u3044\u306e\u3067 \u5148\u65e5\u3046\u3061\u306b\u3082\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u304c\u5c4a\u3044\u305f\u306e\u3067\u3001Ruby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita\u306a\u3069\u306e\u8a18\u4e8b\u3092\u307f\u3066Kotlin\u3067\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u306e\u5b9a\u7fa9\u306a\u3069\u306f\u4ed6\u306e\u65b9\u3005\u304c\u8a73\u7d30\u306b\u66f8\u3044\u3066\u3089\u3063\u3057\u3083\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nMyNumberValidator\nobject MyNumberValidator {\n\n    fun validate(str: String): Boolean = str\n            .apply {\n                if (length != 12) { throw IllegalArgumentException() }\n                if (!all { it.isDigit() }) { throw IllegalArgumentException() }\n            }\n            .take(11)\n            .reversed()\n            .map {it - '0'}\n            .zip(1..11)\n            .map{\n                val n = it.second\n                val p = it.first\n                val q = if (n <= 6) { n + 1 } else { n - 5 }\n                p * q\n            }\n            .sum()\n            .let { 11 - it % 11 }\n            .let {\n                val checkDigit = str.last() - '0'\n                when (it) {\n                    0, 1 -> 0 == checkDigit\n                    else -> it == checkDigit\n                }\n            }\n}\n\n\nfun main(args: Array<String>){\n\n    check(!MyNumberValidator.validate(\"123456789010\"))\n    check(!MyNumberValidator.validate(\"123456789011\"))\n    check(!MyNumberValidator.validate(\"123456789012\"))\n    check(!MyNumberValidator.validate(\"123456789013\"))\n    check(!MyNumberValidator.validate(\"123456789014\"))\n    check(!MyNumberValidator.validate(\"123456789015\"))\n    check(!MyNumberValidator.validate(\"123456789016\"))\n    check(!MyNumberValidator.validate(\"123456789017\"))\n    check(MyNumberValidator.validate(\"123456789018\"))\n    check(!MyNumberValidator.validate(\"123456789019\"))\n    check(MyNumberValidator.validate(\"023456789013\"))\n}\n\n\n\nKotlin\u305f\u3057\u304fSingle expression\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u9577\u3055\u306e\u30c1\u30a7\u30c3\u30af\u3084\u3059\u3079\u3066\u6570\u5b57\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u306fapply\u5f0f\u306e\u4e2d\u3067\u884c\u3063\u3066\u30c1\u30a7\u30c3\u30af\u306b\u5f15\u3063\u304b\u304b\u3063\u305f\u3089Exception\u3092\u6295\u3052\u3064\u3064\u3001\u6700\u5f8c\u306elet\u5f0f\u3067\u672b\u5c3e\u306echeck digit\u3068\u6bd4\u8f03\u3092\u884c\u3063\u305fBoolean\u3067\u7d50\u679c\u3092\u623b\u3057\u3066\u3044\u308b\u3068\u3053\u3067\u3057\u3087\u3046\u304b\u3002\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\n\n\u307f\u306a\u3055\u3093\u306e\u3068\u3053\u308d\u306b\u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f\u5c4a\u304d\u307e\u3057\u305f\u304b\uff1f\n\n\u3068\u3044\u3046\u3053\u3068\u3067 ~~\u30cd\u30bf\u304c\u306a\u3044\u306e\u3067~~ \u5148\u65e5\u3046\u3061\u306b\u3082\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u304c\u5c4a\u3044\u305f\u306e\u3067\u3001[Ruby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\u306a\u3069\u306e\u8a18\u4e8b\u3092\u307f\u3066Kotlin\u3067\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u306e\u5b9a\u7fa9\u306a\u3069\u306f\u4ed6\u306e\u65b9\u3005\u304c\u8a73\u7d30\u306b\u66f8\u3044\u3066\u3089\u3063\u3057\u3083\u308b\u306e\u3067[\u305d\u3061\u3089](http://qiita.com/yumetodo/items/600ca0df422010cbc4c1)\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n```kotlin:MyNumberValidator\nobject MyNumberValidator {\n\n    fun validate(str: String): Boolean = str\n            .apply {\n                if (length != 12) { throw IllegalArgumentException() }\n                if (!all { it.isDigit() }) { throw IllegalArgumentException() }\n            }\n            .take(11)\n            .reversed()\n            .map {it - '0'}\n            .zip(1..11)\n            .map{\n                val n = it.second\n                val p = it.first\n                val q = if (n <= 6) { n + 1 } else { n - 5 }\n                p * q\n            }\n            .sum()\n            .let { 11 - it % 11 }\n            .let {\n                val checkDigit = str.last() - '0'\n                when (it) {\n                    0, 1 -> 0 == checkDigit\n                    else -> it == checkDigit\n                }\n            }\n}\n\n\nfun main(args: Array<String>){\n\n    check(!MyNumberValidator.validate(\"123456789010\"))\n    check(!MyNumberValidator.validate(\"123456789011\"))\n    check(!MyNumberValidator.validate(\"123456789012\"))\n    check(!MyNumberValidator.validate(\"123456789013\"))\n    check(!MyNumberValidator.validate(\"123456789014\"))\n    check(!MyNumberValidator.validate(\"123456789015\"))\n    check(!MyNumberValidator.validate(\"123456789016\"))\n    check(!MyNumberValidator.validate(\"123456789017\"))\n    check(MyNumberValidator.validate(\"123456789018\"))\n    check(!MyNumberValidator.validate(\"123456789019\"))\n    check(MyNumberValidator.validate(\"023456789013\"))\n}\n\n```\n\nKotlin\u305f\u3057\u304fSingle expression\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u9577\u3055\u306e\u30c1\u30a7\u30c3\u30af\u3084\u3059\u3079\u3066\u6570\u5b57\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u306fapply\u5f0f\u306e\u4e2d\u3067\u884c\u3063\u3066\u30c1\u30a7\u30c3\u30af\u306b\u5f15\u3063\u304b\u304b\u3063\u305f\u3089Exception\u3092\u6295\u3052\u3064\u3064\u3001\u6700\u5f8c\u306elet\u5f0f\u3067\u672b\u5c3e\u306echeck digit\u3068\u6bd4\u8f03\u3092\u884c\u3063\u305fBoolean\u3067\u7d50\u679c\u3092\u623b\u3057\u3066\u3044\u308b\u3068\u3053\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u30bd\u30fc\u30b9\u306f[\u3053\u3061\u3089](https://github.com/yamamotoj/kotlin-my-number)\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\n\n"}