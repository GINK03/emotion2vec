{"context": "\n\nKeras\u3068\u306f\uff1f\n\u516c\u5f0f\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u304b\u3089\u5f15\u7528\u3059\u308b\u3068\n\nKeras\u306f\u6700\u5c0f\u9650\u3067\u8a18\u8ff0\u3067\u304d\u308b,\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Python\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3055\u308c\u3066\u304a\u308a\u3001Tensorflow\u3084Theano\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n \u9769\u65b0\u7684\u306a\u7814\u7a76\u3001\u958b\u767a\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u30a2\u30a4\u30c7\u30a2\u304b\u3089\u7d50\u679c\u307e\u3067\u6700\u5c0f\u9650\u306e\u6642\u9593\u3067\u884c\u3046\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u305d\u3053\u3067Keras\u306f\u3088\u308a\u65e9\u3044\u5b9f\u88c5\u3001\u6539\u826f\u3092\u884c\u3046\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u300c\u30a2\u30a4\u30c7\u30a2\u304b\u3089\u7d50\u679c\u307e\u3067\u6700\u5c0f\u9650\u306e\u6642\u9593\u3067\u884c\u3046\u300d\u3068\u3044\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3057\u3087\u3046\u304b\u3002\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u30b3\u30fc\u30c9\u3067Deep Learning\u306e\u69cb\u9020\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3002\n\nKeras\u306e\u57fa\u672c\n\n\u9010\u6b21\u30e2\u30c7\u30eb\uff08Sequential\uff09\nKeras\u3067\u306f2\u7a2e\u985e\u306e\u65b9\u6cd5\u3067Deep Learning\u306e\u69cb\u9020\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002Sequential\u3068Functional API\u306e2\u3064\u3067\u3059\u3002Sequential\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u30ec\u30a4\u30e4\u30fc\u3092\u91cd\u306d\u3066\u3044\u304f\u3088\u3046\u306a\u69cb\u9020\u3092\u66f8\u304f\u306e\u306b\u9069\u3057\u3066\u308b\u3068\u601d\u3046\u3002\nhttps://keras.io/ja/#30keras \u306b\u3042\u308b\u30b3\u30fc\u30c9\u3067\u3059\u304c\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential([\n    Dense(32, input_dim=784),\n    Activation('relu'),\n    Dense(10),\n    Activation('softmax'),\n])\n\n\u306e\u3088\u3046\u306b\u30ec\u30a4\u30e4\u30fc\u3092\u66f8\u3051\u308b\u3002add\u3092\u4f7f\u3063\u3066\u3082\u66f8\u3051\u308b\u3002\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=784))\nmodel.add(Activation('relu'))\n\nmodel.add(Dropout(0.5))\u306e\u3088\u3046\u306bDrop out\u3082\u7c21\u5358\u306b\u66f8\u3051\u308b\u3002\n\nFunctional API\uff08Model\uff09\n\u5358\u7d14\u306a\u30ec\u30a4\u30e4\u30fc\u4ee5\u5916\u306b\u8907\u6570\u306e\u51fa\u529b\u3001\u6709\u5411\u975e\u5de1\u56de\u30b0\u30e9\u30d5\u306a\u3069\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u3002\u3053\u308c\u307e\u305f\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u3042\u308a\u307e\u3059\u304chttps://keras.io/ja/getting-started/functional-api-guide/\nfrom keras.layers import Input, Dense\nfrom keras.models import Model\n\ninputs = Input(shape=(784,))\n\n# a layer instance is callable on a tensor, and returns a tensor\nx = Dense(32, activation='relu')(inputs)\npredictions = Dense(10, activation='softmax')(x)\n\n# this creates a model that includes\n# the Input layer and three Dense layers\nmodel = Model(input=inputs, output=predictions)\n\n\ncompile, fit\n\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u30e2\u30c7\u30eb\u69cb\u7bc9\u5f8c\u306bcompile\u3067\u5404\u7a2e\u8a2d\u5b9a\u3092\u3057\u3066\u3001fit\u3067\u5b66\u7fd2\u3067\u304d\u308b\u3002\ncomple\u3067\u306f\u30ed\u30b9\u95a2\u6570\u3084\u6700\u9069\u5316\u624b\u6cd5\u3092\u8a2d\u5b9a\u3057\u3001fit\u3067\u30a8\u30dd\u30c3\u30af\u6570\u3001\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u3002\nmodel.compile(loss='categorical_crossentropy\u2019, optimizer=sgd, metrics=['accuracy'])\nmodel.fit(X_train, y_train, nb_epoch=20, batch_size=16)\n\n\nKeras.js\nKeras\u3092Javascript\u304b\u3089\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u308b\u3060\u3051\u306a\u3089\u4e0b\u8a18URL\u304b\u3089\u5b9f\u884c\u53ef\u80fd\nhttps://transcranial.github.io/keras-js/\n\nKeras.js\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\n\u307e\u305a\u306fGit\u304b\u3089Clone\ngit clone https://github.com/transcranial/keras-js\n\u6b21\u306bNode.js\u306a\u3069\u3067\u4f7f\u3046npm\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\nnpm install\nnpm run server\nhttp://127.0.0.1:3000 \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u81ea\u5206\u306e\u74b0\u5883\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u4f7f\u3048\u308b\u3002Chrome\u3067\u306f\u52d5\u304d\u307e\u3057\u305f\u3002\n#Keras\u3068\u306f\uff1f\n\u516c\u5f0f\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u304b\u3089\u5f15\u7528\u3059\u308b\u3068\n> Keras\u306f\u6700\u5c0f\u9650\u3067\u8a18\u8ff0\u3067\u304d\u308b,\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Python\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3055\u308c\u3066\u304a\u308a\u3001Tensorflow\u3084Theano\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n \u9769\u65b0\u7684\u306a\u7814\u7a76\u3001\u958b\u767a\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u30a2\u30a4\u30c7\u30a2\u304b\u3089\u7d50\u679c\u307e\u3067\u6700\u5c0f\u9650\u306e\u6642\u9593\u3067\u884c\u3046\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u305d\u3053\u3067Keras\u306f\u3088\u308a\u65e9\u3044\u5b9f\u88c5\u3001\u6539\u826f\u3092\u884c\u3046\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u300c\u30a2\u30a4\u30c7\u30a2\u304b\u3089\u7d50\u679c\u307e\u3067\u6700\u5c0f\u9650\u306e\u6642\u9593\u3067\u884c\u3046\u300d\u3068\u3044\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3057\u3087\u3046\u304b\u3002\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u30b3\u30fc\u30c9\u3067Deep Learning\u306e\u69cb\u9020\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3002\n\n# Keras\u306e\u57fa\u672c\n## \u9010\u6b21\u30e2\u30c7\u30eb\uff08Sequential\uff09\nKeras\u3067\u306f2\u7a2e\u985e\u306e\u65b9\u6cd5\u3067Deep Learning\u306e\u69cb\u9020\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002Sequential\u3068Functional API\u306e2\u3064\u3067\u3059\u3002Sequential\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u30ec\u30a4\u30e4\u30fc\u3092\u91cd\u306d\u3066\u3044\u304f\u3088\u3046\u306a\u69cb\u9020\u3092\u66f8\u304f\u306e\u306b\u9069\u3057\u3066\u308b\u3068\u601d\u3046\u3002\nhttps://keras.io/ja/#30keras \u306b\u3042\u308b\u30b3\u30fc\u30c9\u3067\u3059\u304c\n\n```py\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential([\n    Dense(32, input_dim=784),\n    Activation('relu'),\n    Dense(10),\n    Activation('softmax'),\n])\n```\n\u306e\u3088\u3046\u306b\u30ec\u30a4\u30e4\u30fc\u3092\u66f8\u3051\u308b\u3002`add`\u3092\u4f7f\u3063\u3066\u3082\u66f8\u3051\u308b\u3002\n\n```py\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=784))\nmodel.add(Activation('relu'))\n```\n`model.add(Dropout(0.5))`\u306e\u3088\u3046\u306bDrop out\u3082\u7c21\u5358\u306b\u66f8\u3051\u308b\u3002\n\n##Functional API\uff08Model\uff09\n\u5358\u7d14\u306a\u30ec\u30a4\u30e4\u30fc\u4ee5\u5916\u306b\u8907\u6570\u306e\u51fa\u529b\u3001\u6709\u5411\u975e\u5de1\u56de\u30b0\u30e9\u30d5\u306a\u3069\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u3002\u3053\u308c\u307e\u305f\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u3042\u308a\u307e\u3059\u304chttps://keras.io/ja/getting-started/functional-api-guide/\n\n```py\nfrom keras.layers import Input, Dense\nfrom keras.models import Model\n\ninputs = Input(shape=(784,))\n\n# a layer instance is callable on a tensor, and returns a tensor\nx = Dense(32, activation='relu')(inputs)\npredictions = Dense(10, activation='softmax')(x)\n\n# this creates a model that includes\n# the Input layer and three Dense layers\nmodel = Model(input=inputs, output=predictions)\n```\n\n##compile, fit\n\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u30e2\u30c7\u30eb\u69cb\u7bc9\u5f8c\u306bcompile\u3067\u5404\u7a2e\u8a2d\u5b9a\u3092\u3057\u3066\u3001fit\u3067\u5b66\u7fd2\u3067\u304d\u308b\u3002\ncomple\u3067\u306f\u30ed\u30b9\u95a2\u6570\u3084\u6700\u9069\u5316\u624b\u6cd5\u3092\u8a2d\u5b9a\u3057\u3001fit\u3067\u30a8\u30dd\u30c3\u30af\u6570\u3001\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```py\nmodel.compile(loss='categorical_crossentropy\u2019, optimizer=sgd, metrics=['accuracy'])\nmodel.fit(X_train, y_train, nb_epoch=20, batch_size=16)\n```\n\n#Keras.js\nKeras\u3092Javascript\u304b\u3089\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u308b\u3060\u3051\u306a\u3089\u4e0b\u8a18URL\u304b\u3089\u5b9f\u884c\u53ef\u80fd\nhttps://transcranial.github.io/keras-js/\n\n##Keras.js\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\n\u307e\u305a\u306fGit\u304b\u3089Clone\n`git clone https://github.com/transcranial/keras-js`\n\u6b21\u306bNode.js\u306a\u3069\u3067\u4f7f\u3046npm\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\n`npm install`\n`npm run server`\n\nhttp://127.0.0.1:3000 \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u81ea\u5206\u306e\u74b0\u5883\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u4f7f\u3048\u308b\u3002Chrome\u3067\u306f\u52d5\u304d\u307e\u3057\u305f\u3002\n", "tags": ["DeepLearning", "Keras"]}