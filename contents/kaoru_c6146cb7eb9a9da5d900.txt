{"context": " More than 1 year has passed since last update.\u3084\u3084\u3053\u3057\u3044\u30eb\u30fc\u30d7\u69cb\u9020\u3092\u5206\u89e3\u3059\u308b\u969b\u306b Range Adapter \u306e\u8003\u3048\u65b9\u3092\u4f7f\u3046\u3068\u3088\u3055\u305d\u3046\u306a\u5834\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u5927\u304d\u306a\u30eb\u30fc\u30d7\u3068\u3044\u3046\u306e\u306f\u3001\u5b9f\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3002\n\u305d\u306e\u30d6\u30ed\u30c3\u30af\u3092Range Adapter\u306b\u5207\u308a\u51fa\u3059\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3002\nRange Adapter\u305d\u306e\u3082\u306e\u306f\u30eb\u30fc\u30d7\u3067\u306f\u306a\u3044\u306e\u3067\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3002\n\u4f8b\n\ntest.cpp\n#include <iostream>\n#include <vector>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/adaptor/filtered.hpp>\n\nusing namespace std;\n\nstruct is_even\n{\n    bool operator()( int x ) const { return x % 2 == 0; }\n};\n\nstruct tenfold_int\n{\n    typedef int result_type;\n    int operator()(int x) const { return x * 10; }\n};\n\nvoid test1(vector<int> const& arr)\n{\n    for (int x : arr) {\n        // Block 1 (filter)\n        if (!(x % 2 == 0))\n            continue;\n\n        // Block 2 (transform)\n        x *= 10;\n\n        cout << x << endl;\n    }\n}\n\nvoid test2(vector<int> const& arr)\n{\n    using namespace boost::adaptors;\n\n    for (int x : arr | filtered(is_even()) | transformed(tenfold_int()) ) {\n        cout << x << endl;\n    }\n}\n\nint main()\n{\n    vector<int> arr = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n    cout << \"--- test1 ---\" << endl;\n    test1(arr);\n\n    cout << \"--- test2 ---\" << endl;\n    test2(arr);\n}\n\n\ntest1() \u3068 test2() \u306f\u540c\u3058\u6a5f\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u3002\ntest1()\u306f\u3072\u3068\u3064\u306e\u5927\u304d\u306a\u30eb\u30fc\u30d7\u3060\u304c\u3001test2()\u306f\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30d5\u30a1\u30f3\u30af\u30bf(is_even, tenfold_int)\u306b\u5207\u308a\u51fa\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u3057\u3066\u3044\u308b\u3002\n\u5207\u308a\u51fa\u3057\u305f\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u77ed\u304f\u3066\u30c6\u30b9\u30c8\u304c\u5bb9\u6613\u3067\u3042\u308b\u3002\n\u30d3\u30eb\u30c9\u65b9\u6cd5\ng++ -Wall test.cpp -std=c++11 -I$BOOST_ROOT\ngcc-4.7.2\u3067\u30d3\u30eb\u30c9\u3002Boost.Range\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u51fa\u529b\n--- test1 ---\n0\n20\n40\n60\n80\n--- test2 ---\n0\n20\n40\n60\n80\n\n\u3084\u3084\u3053\u3057\u3044\u30eb\u30fc\u30d7\u69cb\u9020\u3092\u5206\u89e3\u3059\u308b\u969b\u306b Range Adapter \u306e\u8003\u3048\u65b9\u3092\u4f7f\u3046\u3068\u3088\u3055\u305d\u3046\u306a\u5834\u5408\u304c\u3042\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u5927\u304d\u306a\u30eb\u30fc\u30d7\u3068\u3044\u3046\u306e\u306f\u3001\u5b9f\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30d6\u30ed\u30c3\u30af\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3002\n\n\u305d\u306e\u30d6\u30ed\u30c3\u30af\u3092Range Adapter\u306b\u5207\u308a\u51fa\u3059\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3002\n\nRange Adapter\u305d\u306e\u3082\u306e\u306f\u30eb\u30fc\u30d7\u3067\u306f\u306a\u3044\u306e\u3067\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3002\n\n\n\u4f8b\n\n```cpp:test.cpp\n#include <iostream>\n#include <vector>\n#include <boost/range/adaptor/transformed.hpp>\n#include <boost/range/adaptor/filtered.hpp>\n\nusing namespace std;\n\nstruct is_even\n{\n    bool operator()( int x ) const { return x % 2 == 0; }\n};\n\nstruct tenfold_int\n{\n    typedef int result_type;\n    int operator()(int x) const { return x * 10; }\n};\n\nvoid test1(vector<int> const& arr)\n{\n    for (int x : arr) {\n        // Block 1 (filter)\n        if (!(x % 2 == 0))\n            continue;\n\n        // Block 2 (transform)\n        x *= 10;\n\n        cout << x << endl;\n    }\n}\n\nvoid test2(vector<int> const& arr)\n{\n    using namespace boost::adaptors;\n\n    for (int x : arr | filtered(is_even()) | transformed(tenfold_int()) ) {\n        cout << x << endl;\n    }\n}\n\nint main()\n{\n    vector<int> arr = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n    cout << \"--- test1 ---\" << endl;\n    test1(arr);\n\n    cout << \"--- test2 ---\" << endl;\n    test2(arr);\n}\n```\n\ntest1() \u3068 test2() \u306f\u540c\u3058\u6a5f\u80fd\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\ntest1()\u306f\u3072\u3068\u3064\u306e\u5927\u304d\u306a\u30eb\u30fc\u30d7\u3060\u304c\u3001test2()\u306f\u30eb\u30fc\u30d7\u306e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30d5\u30a1\u30f3\u30af\u30bf(is_even, tenfold_int)\u306b\u5207\u308a\u51fa\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u3057\u3066\u3044\u308b\u3002\n\u5207\u308a\u51fa\u3057\u305f\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u77ed\u304f\u3066\u30c6\u30b9\u30c8\u304c\u5bb9\u6613\u3067\u3042\u308b\u3002\n\n\u30d3\u30eb\u30c9\u65b9\u6cd5\n\n`g++ -Wall test.cpp -std=c++11 -I$BOOST_ROOT`\ngcc-4.7.2\u3067\u30d3\u30eb\u30c9\u3002Boost.Range\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u529b\n\n```\n--- test1 ---\n0\n20\n40\n60\n80\n--- test2 ---\n0\n20\n40\n60\n80\n```\n", "tags": ["C++", "\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0", "testing", "\u8a2d\u8a08", "boost"]}