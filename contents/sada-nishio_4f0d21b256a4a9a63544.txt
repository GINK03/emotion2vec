{"context": "\n\nAmazon Rekognition\nA new image analysis service that is based on Deep learning, \u201cAmazon Rekognition\u201d is announced at AWS re:Invent 2016. Amazon Rekognition makes it easy to add image analysis to our applications (press release, official blog, official document for developers).\n\n\nDemo Concept of analyzing photos in kintone with Amazon Rekognition\nIn this case, I try a simple demo scenario that if you save a photo as kintone record, the result of detecting that photo is spread at the kintone record.\n\nArchitecture\nHere is that architecture.\n\n\nRecord view of kintone\n\n\nConfiguration of kintone & Amazon Rekognition\n\nkintone app.\n\nCreate a kintone application\ncreate a kintone application consisting of forms like this.\n\n\n\nField labels & code\nSummary\nField types\n\n\n\n\nTitle\nTitle of Photo\nSINGLE_LINE_TEXT\n\n\nPhoto\nPhoto you want to analyze\nFILE\n\n\nResults\nAnalyzed results\nSUBTABLE\n\n\nResults/Name\nAnalyzed names(labels)\nSUBTABLE/SINGLE_LINE_TEXT\n\n\nResults/Confidence\nAnalyzed confidence\nSUBTABLE/NUMBER\n\n\n\n\n\n(AWS) IAM\nWe create new role that can access from Lambda to S3, Rekognition and CloudWatch.\n\nCreate New Role\nclick \"Create New Role\".\n\ninput \"lambda_s3_rekognition_exec_role\", and click \"Next Step\"\n\nclick \"select\" in the row of \"AWS Lambda\" and click \"Next Step\"\n\ncheck  \"AmazonRekognitionFullAccess\", \"AmazonS3FullAccess\" and \"CloudWatchFullAccess\". and click \"Next Step\".\n\nclick \"Create Role\"\n\n\nAmazon S3\nWe create the S3 bucket that store photos from kintone, and be accessed from Rekognition.\n\nCreate Bucket\nclick \"Create Bucket\"\n\ninput bucket name(e.g. \"kintone-rekognition\") and click \"Create\".\n\n\nAWS Lambda\nWe create the Lambda function that access to kintone, S3 and Rekognition.\n\nCreate Lambda function\nWe have to replace {S3 bucket}, {kintone domain}, {app. id}, {api token}, {basic user}, {basic password} with your parameters (see also, kintone REST API, User Authentication, Add record).\n\nindex.js\n/**\n * Rekognition Demo for re:Invent 2016\n *\n * 1. Saving record and send request to API GW (kintone)\n * 2. Download picture to '/tmp/' from kintone (Lambda)\n * 3. Upload picture to S3 (Lambda)\n * 4. Send request to rekognition (Lambda)\n * 5. Update record by using response of rekognition (Lambda)\n */\n'use strict';\n\nconst fs = require('fs');\nconst request = require('request');\n\n//S3 Info\nconst BUCKET_NAME = '{S3 bucket}';\n\n//kintone's Info\nconst DOMAIN = '{kintone domain}';\nconst APP = '{app id}';\nconst API_TOKEN = '{api token}';\nconst BASIC_TOKEN = (new Buffer('{basic user}:{basic password}')).toString('base64');\n\n//Load AWS SDK and set auth info\nconst AWS = require('aws-sdk');\nconst REGION = 'us-east-1';\n\n//2. Download picture from kintone\nconst downloadPhotoData = (fileKey, fileName) => {\n  return new Promise((resolve, reject) => {\n    const headers = {\n      'X-Cybozu-API-Token': API_TOKEN,\n      'Authorization': 'Basic ' + BASIC_TOKEN\n    };\n    const url = 'https://' + DOMAIN + '/k/v1/file.json?fileKey=' + fileKey;\n    const options = {\n      url: url,\n      headers: headers,\n      method: 'GET'\n    };\n    var picStream = fs.createWriteStream('/tmp/' + fileName);\n    request(options)\n      .pipe(picStream)\n      .on('close', function() {\n        resolve();\n      });\n  });\n};\n\n//3. Upload picture to S3\nconst uploadToS3 = (fileKey, fileName, contentType) => {\n  const s3 = new AWS.S3();\n  const params = {\n    Bucket: BUCKET_NAME,\n    Key: fileName,\n    ContentType: contentType,\n    Body: fs.readFileSync('/tmp/' + fileName),\n    ACL: 'public-read'\n  };\n  return s3.putObject(params).promise();\n};\n\n//4. Send request to rekognition\nconst sendRequestToRekognition = (fileName) => {\n  // Create an rekognition client\n  const rekognition = new AWS.Rekognition({\n    region: REGION,\n  });\n  const params = {\n    Image: {\n      S3Object: {\n        'Bucket': BUCKET_NAME,\n        'Name': fileName\n      }\n    }\n  };\n  return rekognition.detectLabels(params).promise();\n};\n\n//5. Update record by using response of rekognition\nconst updateKintoneRecord = (result, recordId) => {\n  const arrayLabels = result.Labels;\n  let tableData = [];\n  const createTmpRow = () => {\n    return {\n      value: {\n        Name: {\n          value: undefined\n        },\n        Confidence: {\n          value: undefined\n        }\n      }\n    };\n  };\n  for (let i = 0; i < arrayLabels.length; i++) {\n    let tmpRow = createTmpRow();\n    tmpRow.value.Name.value = arrayLabels[i].Name;\n    tmpRow.value.Confidence.value = arrayLabels[i].Confidence;\n    tableData.push(tmpRow);\n  }\n\n  return new Promise((resolve, reject) => {\n    const headers = {\n      'X-Cybozu-API-Token': API_TOKEN,\n      'Authorization': 'Basic ' + BASIC_TOKEN,\n      'Content-Type': 'application/json'\n    };\n    const url = 'https://' + DOMAIN + '/k/v1/record.json';\n    const body = {\n      app: APP,\n      id: recordId,\n      record: {\n        Results: {\n          value: tableData\n        }\n      }\n    };\n    const options = {\n      url: url,\n      headers: headers,\n      method: 'PUT',\n      json: body\n    };\n    request(options, (err, response, body) => {\n      if (err) {\n        console.log(err, err.stack);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n\nexports.handler = (event, context, callback) => {\n  console.log('begin.');\n  if (!event['body-json'] || !event['body-json'].record) {\n    console.log('No record data in body-json. Finish Process.');\n    callback(null);\n  }\n  const record = event['body-json'].record;\n  console.log(record);\n\n  if (!(record.$id.value && record.Photo.value.length > 0)) {\n    console.log('Can not find recordId or photo. Finish Process.');\n    callback(null);\n  }\n\n  const recordId = record.$id.value;\n  const fileKey = record.Photo.value[0].fileKey;\n  const fileName = record.Photo.value[0].name;\n  const contentType = record.Photo.value[0].contentType;\n\n  return downloadPhotoData(fileKey, fileName).then(() => {\n    console.log('download file completed.');\n    return uploadToS3(fileKey, fileName, contentType);\n  }).then(() => {\n    console.log('upload to s3 completed.');\n    return sendRequestToRekognition(fileName);\n  }).then((result) => {\n    console.log(result);\n    console.log('request to rekoginition completed');\n    return updateKintoneRecord(result, recordId);\n  }).then((result) => {\n    console.log('update record completed.');\n    console.log('all completed.');\n    callback(null);\n  }).catch((e) => {\n    console.log('error occurred.');\n    console.log(e);\n    callback(e);\n  });\n};\n\n\n\ninstall request & aws-sdk libraries, and create a Lambda function as a deployment package.\n$ npm install --save request aws-sdk\n$ zip -r upload.zip index.js node_modules/\n\nselect \"N. Virginia(us-east-1)\" and click \u201cCreate a Lambda function\u201d.\n\nchoose \u201cBlank Function\u201d to configure a Lambda function.\n\nclick \"Next\"\n\nconfigure a Lambda function as below.\n\nclick \"create function\".\n\n\nAmazon API Gateway\ncreate API set for invoking Lambda & pass kintone parameters to Lambda via API Gateway.\n\nCreate API\nclick \"Create API\".\n\ninput API name(e.g. \"kintone-rekognition\") and click \"Create API\".\n\nchoose \"Create Method\" from \"Actions\".\n\nchoose \"PUT\" and click the check mark.\n\nconfigure PUT method API as below.\n\nclick \"OK\".\n\nconfiguration only \"Integration Request\" to set minium although we have to set up all four section.\n\nconfigure Integration Request as follows.\n\nchoose \"Deploy API\" from \"Actions\".\n\nconclude API settings as bellow.\n\ncopy invoke URL to call from kintone JavaScript customization later.\n\n\nkintone JavaScript Customization\nFinally, we set kintone JavaScript customization to call the API we configured.\n\nMain file\nWe save this main file as \"desktop-rekognition.js\". We have to replace {api gw. endpoint} with your parameters.\n\ndesktop-rekognition.js\njQuery.noConflict();\n(function ($) {\n    'use strict';\n\n    var API_GW_ENDPOINT = '{api gw. endpoint}';\n\n    // show spinner\n    var showSpinner = function () {\n        // initialization\n        if ($('.kintone-spinner').length == 0) {\n            // create elements for spinner and background\n            var spin_div = $('<div id =\"kintone-spin\" class=\"kintone-spinner\"></div>');\n            var spin_bg_div = $('<div id =\"kintone-spin-bg\" class=\"kintone-spinner\"></div>');\n\n            // append spinner element to \"body\"\n            $(document.body).append(spin_div, spin_bg_div);\n\n            // style for spinner\n            $(spin_div).css({\n                'position': 'fixed',\n                'top': '50%',\n                'left': '50%',\n                'z-index': '510',\n                'background-color': '#fff',\n                'padding': '26px',\n                '-moz-border-radius': '4px',\n                '-webkit-border-radius': '4px',\n                'border-radius': '4px'\n            });\n            $(spin_bg_div).css({\n                'position': 'absolute',\n                'top': '0px',\n                'z-index': '500',\n                'width': '150%',\n                'height': '150%',\n                'background-color': '#000',\n                'opacity': '0.5',\n                'filter': 'alpha(opacity=50)',\n                '-ms-filter': \"alpha(opacity=50)\"\n            });\n\n            // options for spinner\n            var opts = {\n                'color': '#000'\n            };\n\n            // invoke spinner\n            new Spinner(opts).spin(document.getElementById('kintone-spin'));\n        }\n\n        // start(show) spinner\n        $('.kintone-spinner').show();\n    };\n\n    // stop(hide) spinner\n    var hideSpinner = function () {\n        // hide spinner element\n        $('.kintone-spinner').hide();\n    };\n\n    // submit success events\n    kintone.events.on([\n        'app.record.create.submit.success',\n        'app.record.edit.submit.success',\n    ], function (event) {\n        showSpinner();\n\n        var headers = {\n            'Content-Type': 'application/json'\n        };\n\n        return kintone.proxy(API_GW_ENDPOINT, 'PUT', headers, event).then(function () {\n            hideSpinner();\n            return;\n        });\n    });\n})(jQuery);\n\n\n\nCustomizing an App with JavaScript\n\nset links and a file as follows at JavaScript and CSS Customization view.\n\nUpload JavaScript for PC\n    - https://js.cybozu.com/jquery/3.1.1/jquery.min.js [link]\n    - https://js.cybozu.com/spinjs/2.3.2/spin.min.js [link]\n    - desktop-rekognition.js [saved file]\n\nSave a photo and analyze\nIf you save a photo as kintone record, the result of detecting that photo is spread at the kintone record.\n\n# Amazon Rekognition\n**A new image analysis service** that is based on Deep learning, **\u201cAmazon Rekognition\u201d** is announced at AWS re:Invent 2016. Amazon Rekognition makes it easy to add image analysis to our applications ([press release](http://phx.corporate-ir.net/phoenix.zhtml?c=176060&p=irol-newsArticle&ID=2226605), [official blog](https://aws.amazon.com/jp/blogs/aws/amazon-rekognition-image-detection-and-recognition-powered-by-deep-learning/), [official document for developers](https://aws.amazon.com/jp/rekognition/getting-started/)).\n\n![rekognition.png](https://qiita-image-store.s3.amazonaws.com/0/43383/bb156549-6292-5ec9-c16b-8ac334729e70.png)\n\n# Demo Concept of analyzing photos in kintone with Amazon Rekognition\nIn this case, I try a simple demo scenario that if you save a photo as kintone record, the result of detecting that photo is spread at the kintone record.\n\n### Architecture\nHere is that architecture.\n![rekognition.png](https://qiita-image-store.s3.amazonaws.com/0/43383/6e44c47c-d8ed-f5c2-2c5a-04cba4bcee87.png)\n\n### Record view of kintone\n![rekognition2.png](https://qiita-image-store.s3.amazonaws.com/0/43383/833b343e-600e-290c-eb36-4570ff87c357.png)\n\n# Configuration of kintone & Amazon Rekognition\n## kintone app.\n#### Create a kintone application\ncreate a kintone application consisting of forms like this.\n\n| Field labels & code|Summary |[Field types](https://developer.kintone.io/hc/en-us/articles/212494818/)|\n|:----------------:|:-----------------:|:------------------:|\n| Title            | Title of Photo    | SINGLE_LINE_TEXT   |\n| Photo            | Photo you want to analyze | FILE       |\n| Results          | Analyzed results  | SUBTABLE           |\n| Results/Name   | Analyzed names(labels) | SUBTABLE/SINGLE_LINE_TEXT |\n| Results/Confidence | Analyzed confidence | SUBTABLE/NUMBER       |\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-04 18.10.20.png](https://qiita-image-store.s3.amazonaws.com/0/43383/8b73249c-3d46-4faa-f2ff-ec5aa827699c.png)\n\n## (AWS) IAM\nWe create new role that can access from Lambda to S3, Rekognition and CloudWatch.\n\n#### Create New Role\nclick \"Create New Role\".\n![rekognition1.png](https://qiita-image-store.s3.amazonaws.com/0/43383/29c9213f-7705-76fa-8c56-3d1281dca66f.png)\n\ninput \"lambda_s3_rekognition_exec_role\", and click \"Next Step\"\n![rekognition2.png](https://qiita-image-store.s3.amazonaws.com/0/43383/affd6f45-cd7a-0e62-a590-8019a5348e15.png)\n\nclick \"select\" in the row of \"AWS Lambda\" and click \"Next Step\"\n![rekognition3.png](https://qiita-image-store.s3.amazonaws.com/0/43383/292af6df-3f0e-95e4-f2de-83127656331d.png)\n\ncheck  \"AmazonRekognitionFullAccess\", \"AmazonS3FullAccess\" and \"CloudWatchFullAccess\". and click \"Next Step\".\n![rekognition5.png](https://qiita-image-store.s3.amazonaws.com/0/43383/795d67f0-9e7d-ce50-61b0-3ed8aaeb94dd.png)\n\nclick \"Create Role\"\n![rekognition6.png](https://qiita-image-store.s3.amazonaws.com/0/43383/5ed9861d-a5ba-0f35-fc14-9db6ba5cfade.png)\n\n## Amazon S3\nWe create the S3 bucket that store photos from kintone, and be accessed from Rekognition.\n#### Create Bucket\nclick \"Create Bucket\"\n![rekognition7.png](https://qiita-image-store.s3.amazonaws.com/0/43383/e50cbb92-d3b2-483c-0efa-48ce4eb4d6d5.png)\n\ninput bucket name(e.g. \"kintone-rekognition\") and click \"Create\".\n![rekognition8.png](https://qiita-image-store.s3.amazonaws.com/0/43383/62e814e6-e532-5510-90ef-29df14ea8598.png)\n\n## AWS Lambda\nWe create the Lambda function that access to kintone, S3 and Rekognition.\n\n#### Create Lambda function\nWe have to replace ```{S3 bucket}```, ```{kintone domain}```, ```{app. id}```, ```{api token}```, ```{basic user}```, ```{basic password}``` with your parameters (see also, kintone REST API, User Authentication, Add record).\n\n```js:index.js\n/**\n * Rekognition Demo for re:Invent 2016\n *\n * 1. Saving record and send request to API GW (kintone)\n * 2. Download picture to '/tmp/' from kintone (Lambda)\n * 3. Upload picture to S3 (Lambda)\n * 4. Send request to rekognition (Lambda)\n * 5. Update record by using response of rekognition (Lambda)\n */\n'use strict';\n\nconst fs = require('fs');\nconst request = require('request');\n\n//S3 Info\nconst BUCKET_NAME = '{S3 bucket}';\n\n//kintone's Info\nconst DOMAIN = '{kintone domain}';\nconst APP = '{app id}';\nconst API_TOKEN = '{api token}';\nconst BASIC_TOKEN = (new Buffer('{basic user}:{basic password}')).toString('base64');\n\n//Load AWS SDK and set auth info\nconst AWS = require('aws-sdk');\nconst REGION = 'us-east-1';\n\n//2. Download picture from kintone\nconst downloadPhotoData = (fileKey, fileName) => {\n  return new Promise((resolve, reject) => {\n    const headers = {\n      'X-Cybozu-API-Token': API_TOKEN,\n      'Authorization': 'Basic ' + BASIC_TOKEN\n    };\n    const url = 'https://' + DOMAIN + '/k/v1/file.json?fileKey=' + fileKey;\n    const options = {\n      url: url,\n      headers: headers,\n      method: 'GET'\n    };\n    var picStream = fs.createWriteStream('/tmp/' + fileName);\n    request(options)\n      .pipe(picStream)\n      .on('close', function() {\n        resolve();\n      });\n  });\n};\n\n//3. Upload picture to S3\nconst uploadToS3 = (fileKey, fileName, contentType) => {\n  const s3 = new AWS.S3();\n  const params = {\n    Bucket: BUCKET_NAME,\n    Key: fileName,\n    ContentType: contentType,\n    Body: fs.readFileSync('/tmp/' + fileName),\n    ACL: 'public-read'\n  };\n  return s3.putObject(params).promise();\n};\n\n//4. Send request to rekognition\nconst sendRequestToRekognition = (fileName) => {\n  // Create an rekognition client\n  const rekognition = new AWS.Rekognition({\n    region: REGION,\n  });\n  const params = {\n    Image: {\n      S3Object: {\n        'Bucket': BUCKET_NAME,\n        'Name': fileName\n      }\n    }\n  };\n  return rekognition.detectLabels(params).promise();\n};\n\n//5. Update record by using response of rekognition\nconst updateKintoneRecord = (result, recordId) => {\n  const arrayLabels = result.Labels;\n  let tableData = [];\n  const createTmpRow = () => {\n    return {\n      value: {\n        Name: {\n          value: undefined\n        },\n        Confidence: {\n          value: undefined\n        }\n      }\n    };\n  };\n  for (let i = 0; i < arrayLabels.length; i++) {\n    let tmpRow = createTmpRow();\n    tmpRow.value.Name.value = arrayLabels[i].Name;\n    tmpRow.value.Confidence.value = arrayLabels[i].Confidence;\n    tableData.push(tmpRow);\n  }\n\n  return new Promise((resolve, reject) => {\n    const headers = {\n      'X-Cybozu-API-Token': API_TOKEN,\n      'Authorization': 'Basic ' + BASIC_TOKEN,\n      'Content-Type': 'application/json'\n    };\n    const url = 'https://' + DOMAIN + '/k/v1/record.json';\n    const body = {\n      app: APP,\n      id: recordId,\n      record: {\n        Results: {\n          value: tableData\n        }\n      }\n    };\n    const options = {\n      url: url,\n      headers: headers,\n      method: 'PUT',\n      json: body\n    };\n    request(options, (err, response, body) => {\n      if (err) {\n        console.log(err, err.stack);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n\nexports.handler = (event, context, callback) => {\n  console.log('begin.');\n  if (!event['body-json'] || !event['body-json'].record) {\n    console.log('No record data in body-json. Finish Process.');\n    callback(null);\n  }\n  const record = event['body-json'].record;\n  console.log(record);\n\n  if (!(record.$id.value && record.Photo.value.length > 0)) {\n    console.log('Can not find recordId or photo. Finish Process.');\n    callback(null);\n  }\n  \n  const recordId = record.$id.value;\n  const fileKey = record.Photo.value[0].fileKey;\n  const fileName = record.Photo.value[0].name;\n  const contentType = record.Photo.value[0].contentType;\n\n  return downloadPhotoData(fileKey, fileName).then(() => {\n    console.log('download file completed.');\n    return uploadToS3(fileKey, fileName, contentType);\n  }).then(() => {\n    console.log('upload to s3 completed.');\n    return sendRequestToRekognition(fileName);\n  }).then((result) => {\n    console.log(result);\n    console.log('request to rekoginition completed');\n    return updateKintoneRecord(result, recordId);\n  }).then((result) => {\n    console.log('update record completed.');\n    console.log('all completed.');\n    callback(null);\n  }).catch((e) => {\n    console.log('error occurred.');\n    console.log(e);\n    callback(e);\n  });\n};\n\n```\n\ninstall ```request``` & ```aws-sdk``` libraries, and create a Lambda function as a deployment package.\n\n```\n$ npm install --save request aws-sdk\n$ zip -r upload.zip index.js node_modules/\n```\n\nselect \"N. Virginia(us-east-1)\" and click \u201cCreate a Lambda function\u201d.\n![rekognition9.png](https://qiita-image-store.s3.amazonaws.com/0/43383/c2d6e63f-aec4-6aaf-7078-383268697609.png)\n\nchoose \u201cBlank Function\u201d to configure a Lambda function.\n![rekognition10.png](https://qiita-image-store.s3.amazonaws.com/0/43383/ec5081b5-e59d-2ae2-9fbc-c64d21506b8d.png)\n\nclick \"Next\"\n![rekognition11.png](https://qiita-image-store.s3.amazonaws.com/0/43383/865d2255-bdf5-c25b-af42-c7f94e49b45c.png)\n\nconfigure a Lambda function as below.\n![rekognition12.png](https://qiita-image-store.s3.amazonaws.com/0/43383/d3363432-a52d-d0bf-1c8c-ea90ad3ea3fa.png)\n\nclick \"create function\".\n![rekognition13.png](https://qiita-image-store.s3.amazonaws.com/0/43383/6e2f1da3-b724-9587-8f96-dac0fc783283.png)\n\n## Amazon API Gateway\ncreate API set for invoking Lambda & pass kintone parameters to Lambda via API Gateway.\n\n### Create API\nclick \"Create API\".\n![rekognition14.png](https://qiita-image-store.s3.amazonaws.com/0/43383/88efe933-6332-97da-cefe-fbbe62ab7b39.png)\n\ninput API name(e.g. \"kintone-rekognition\") and click \"Create API\".\n![rekognition15.png](https://qiita-image-store.s3.amazonaws.com/0/43383/b463dddc-fc2f-d34a-cc85-b887bf83986e.png)\n\nchoose \"Create Method\" from \"Actions\".\n![rekognition16.png](https://qiita-image-store.s3.amazonaws.com/0/43383/8318a0ab-9bbe-3811-3b3d-81427dc7de37.png)\n\nchoose \"PUT\" and click the check mark.\n![rekognition17.png](https://qiita-image-store.s3.amazonaws.com/0/43383/29be157a-a62f-2129-4c16-c159a282e619.png)\n\nconfigure PUT method API as below.\n![rekognition18.png](https://qiita-image-store.s3.amazonaws.com/0/43383/cb8acef6-0444-23d3-b96f-8c959d87b313.png)\n\nclick \"OK\".\n![rekognition19.png](https://qiita-image-store.s3.amazonaws.com/0/43383/a23ee7f9-702e-fd19-954b-373b4762c5e0.png)\n\nconfiguration only \"Integration Request\" to set minium although we have to set up all four section.\n![rekognition20.png](https://qiita-image-store.s3.amazonaws.com/0/43383/0501eea1-f9a6-bd69-1c47-c48546b0a815.png)\n\nconfigure Integration Request as follows.\n![rekognition21.png](https://qiita-image-store.s3.amazonaws.com/0/43383/27dbdab4-a8c8-8cfd-0b45-a3605ab3dec3.png)\n\nchoose \"Deploy API\" from \"Actions\".\n![rekognition22.png](https://qiita-image-store.s3.amazonaws.com/0/43383/13c16335-94c4-90ee-9c7d-21af60485ea4.png)\n\nconclude API settings as bellow.\n![rekognition23.png](https://qiita-image-store.s3.amazonaws.com/0/43383/ca43238e-edd0-e144-29ac-39f317e006f5.png)\n\ncopy invoke URL to call from kintone JavaScript customization later.\n![rekognition24.png](https://qiita-image-store.s3.amazonaws.com/0/43383/4ef1ffcc-8e89-760d-0826-5e0d2ff2710f.png)\n\n## kintone JavaScript Customization\nFinally, we set kintone JavaScript customization to call the API we configured.\n\n#### Main file\nWe save this main file as \"desktop-rekognition.js\". We have to replace ```{api gw. endpoint}``` with your parameters.\n\n```js:desktop-rekognition.js\njQuery.noConflict();\n(function ($) {\n    'use strict';\n\n    var API_GW_ENDPOINT = '{api gw. endpoint}';\n\n    // show spinner\n    var showSpinner = function () {\n        // initialization\n        if ($('.kintone-spinner').length == 0) {\n            // create elements for spinner and background\n            var spin_div = $('<div id =\"kintone-spin\" class=\"kintone-spinner\"></div>');\n            var spin_bg_div = $('<div id =\"kintone-spin-bg\" class=\"kintone-spinner\"></div>');\n\n            // append spinner element to \"body\"\n            $(document.body).append(spin_div, spin_bg_div);\n\n            // style for spinner\n            $(spin_div).css({\n                'position': 'fixed',\n                'top': '50%',\n                'left': '50%',\n                'z-index': '510',\n                'background-color': '#fff',\n                'padding': '26px',\n                '-moz-border-radius': '4px',\n                '-webkit-border-radius': '4px',\n                'border-radius': '4px'\n            });\n            $(spin_bg_div).css({\n                'position': 'absolute',\n                'top': '0px',\n                'z-index': '500',\n                'width': '150%',\n                'height': '150%',\n                'background-color': '#000',\n                'opacity': '0.5',\n                'filter': 'alpha(opacity=50)',\n                '-ms-filter': \"alpha(opacity=50)\"\n            });\n\n            // options for spinner\n            var opts = {\n                'color': '#000'\n            };\n\n            // invoke spinner\n            new Spinner(opts).spin(document.getElementById('kintone-spin'));\n        }\n\n        // start(show) spinner\n        $('.kintone-spinner').show();\n    };\n\n    // stop(hide) spinner\n    var hideSpinner = function () {\n        // hide spinner element\n        $('.kintone-spinner').hide();\n    };\n\n    // submit success events\n    kintone.events.on([\n        'app.record.create.submit.success',\n        'app.record.edit.submit.success',\n    ], function (event) {\n        showSpinner();\n\n        var headers = {\n            'Content-Type': 'application/json'\n        };\n\n        return kintone.proxy(API_GW_ENDPOINT, 'PUT', headers, event).then(function () {\n            hideSpinner();\n            return;\n        });\n    });\n})(jQuery);\n```\n\n#### [Customizing an App with JavaScript](https://help.kintone.com/en/k/user/js_customize.html)\nset links and a file as follows at JavaScript and CSS Customization view.\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-04 16.48.46.png](https://qiita-image-store.s3.amazonaws.com/0/43383/70a02ebc-d6c3-30c6-e273-2d6b9f55eb87.png)\n**Upload JavaScript for PC**\n    - [https://js.cybozu.com/jquery/3.1.1/jquery.min.js](https://js.cybozu.com/jquery/3.1.1/jquery.min.js) [link]\n    - [https://js.cybozu.com/spinjs/2.3.2/spin.min.js](https://js.cybozu.com/spinjs/2.3.2/spin.min.js) [link]\n    - desktop-rekognition.js [saved file]\n\n## Save a photo and analyze\nIf you save a photo as kintone record, the result of detecting that photo is spread at the kintone record.\n![rekognition2.png](https://qiita-image-store.s3.amazonaws.com/0/43383/833b343e-600e-290c-eb36-4570ff87c357.png)\n", "tags": ["kintone", "lambda", "S3", "APIGateway"]}