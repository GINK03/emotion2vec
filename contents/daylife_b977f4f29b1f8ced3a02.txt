{"context": "Streams API \u3092\u3053\u308c\u307e\u3067\u307e\u3068\u3082\u306b\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u3002\n\u307e\u3068\u3082\u306b\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\u4f8b\u5916\u51e6\u7406\u306e\u6271\u3044\u304c\u975e\u5e38\u306b\u96e3\u3057\u3044\u3053\u3068\u3092\u5b9f\u611f\u3057\u305f\u306e\u3067\u3001\u4e00\u4f8b\u3092\u6319\u3052\u3066\u305d\u306e\u96e3\u3057\u3055\u3092\u89e3\u8aac\u3059\u308b\u3002\n\n\u3084\u308a\u305f\u3044\u51e6\u7406\n\u8907\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u305d\u308c\u305e\u308c\u30921\u884c\u305a\u3064\u8aad\u307f\u3053\u307f\u3001\u7a7a\u767d\u6587\u5b57\u3067\u5404\u884c\u3092\u5358\u8a9e\u306b\u5206\u5272\u3057\u3001\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u884c\u306a\u3046\u3001\u3068\u3044\u3046\u3088\u304f\u3042\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002\u51e6\u7406\u306e\u624b\u9806\u3092\u624b\u7d9a\u304d\u7684\u306b\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u76f4\u4e0b\u306b\u5b58\u5728\u3059\u308b\u8907\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\uff08\u62e1\u5f35\u5b50 .txt\uff09\u30921\u3064\u305a\u3064\u8aad\u3080\n\u5404\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u30921\u884c\u305a\u3064\u8aad\u3080\n\u5404\u884c\uff08\u6587\u5b57\u5217\uff09\u3092\u3001\u7a7a\u767d\u6587\u5b57\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u8907\u6570\u306e\u6587\u5b57\u5217\uff08\u5358\u8a9e\u3068\u547c\u3076\u3053\u3068\u306b\u3059\u308b\uff09\u306b\u5206\u5272\u3059\u308b\n\u5404\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u3002\u4ee5\u4e0b\u3001\u51e6\u7406\u306e\u540d\u524d\u3092 analyze \u3068\u3059\u308b\n\u3000\n\n\n\u30af\u30e9\u30b9\u306e\u96db\u5f62\n\u4ee5\u4e0b\u306e TextFileProcessor \u3092\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\u5404\u5358\u8a9e\u306b\u95a2\u3059\u308b\u51e6\u7406 analyze \u306f\u5b9f\u88c5\u6e08\u307f\u3068\u3057\u3066\u3001process() \u30e1\u30bd\u30c3\u30c9\u3060\u3051\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3002\n\nTextFileProcessor.java\nimport java.io.File;\nimport java.io.IOException;\n\npublic abstract class TextFileProcessor {\n\n    @SuppressWarnings(\"serial\")\n    public static class MyException extends Exception {\n    }\n\n    public void analyze(String word) throws MyException {\n        // do something for the given word\n    }\n    // implement this!\n    public abstract void process(File directory) throws IOException, MyException;\n\n}\n\n\n\nStreams API \u3092\u4f7f\u308f\u306a\u3044\u5b9f\u88c5\nStreams API \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u81ea\u5206\u306b\u3068\u3063\u3066\u99b4\u67d3\u307f\u306e\u3042\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\nNormalTextFileProcessor.java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class NormalTextFileProcessor extends TextFileProcessor {\n\n    public NormalTextFileProcessor() {\n    }\n\n    @Override\n    public void process(File directory) throws IOException, MyException {\n        for (File file : directory.listFiles(new FileFilter() {\n            public boolean accept(File path) {\n                return path.getName().endsWith(\".txt\") && path.isFile();\n            }\n        })) {\n            try (BufferedReader r = Files.newBufferedReader(file.toPath())) {\n                String line = null;\n                while ((line = r.readLine()) != null) {\n                    for (String word : line.split(\"\\\\s\")) {\n                        this.analyze(word);\n                    }\n                }\n            }\n        }\n    }\n\n}\n\n\n\nStreams API \u3092\u4f7f\u3063\u305f\u5b9f\u88c5\n\u672c\u984c\u306f\u3053\u3053\u304b\u3089\u3067\u3042\u308b\u3002Streams API \u3092\u4f7f\u3048\u3070\u3001\u4e0a\u306e NormalTextFileProcessor \u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306a\u533f\u540d\u30af\u30e9\u30b9\u306e\u751f\u6210\uff08FileFilter\uff09\u3084 BufferedReader \u304b\u3089\u8aad\u307f\u8fbc\u307f\u306b\u308f\u3056\u308f\u3056\u30ed\u30fc\u30ab\u30eb\u5909\u6570\uff08line\uff09\u3092\u6301\u3061\u51fa\u3059\u7169\u308f\u3057\u3055\u304c\u7121\u3044\u3002\u305d\u3046\u671f\u5f85\u3057\u3066\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\nStreamsTextFileProcessor.java\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.util.stream.Stream;\n\npublic class StreamsTextFileProcessor extends TextFileProcessor {\n\n    public StreamsTextFileProcessor() {\n    }\n\n    @Override\n    public void process(File directory) throws IOException, MyException {\n        Files.list(directory.toPath())\n        .filter(p -> (p.toString().endsWith(\".txt\") && p.toFile().isFile()))\n        .forEach(f -> {\n            try (Stream<String> lines = Files.lines(f)) {\n                lines\n                .forEach(\n                    line -> {\n                        Stream.of(line.split(\"\\\\s\"))\n                        .forEach(word -> {\n                            try {\n                                this.analyze(word);\n                            } catch (MyException e) {\n                                throw new RuntimeException(e);\n                            }\n                        });\n                    }\n                );\n            } catch (IOException e) {\n                throw new UncheckedIOException(e);\n            }\n        });\n    }\n\n}\n\n\n\u7dba\u9e97\u306b\u306a\u308b\u3069\u3053\u308d\u304b\u3001try-catch \u306e\u30cd\u30b9\u30c8\u306e\u305b\u3044\u3067\u3080\u3057\u308d\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3053\u306e\u7406\u7531\u306f\u3001Streams API \u3067\u7528\u3044\u3089\u308c\u308b Function, Consumer \u3092\u59cb\u3081\u3068\u3059\u308b functional interfaces \u306e\u30e1\u30bd\u30c3\u30c9\u305f\u3061\u304c\u3001\u691c\u67fb\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\njava.nio.file.Files#lines \u30e1\u30bd\u30c3\u30c9\u306f IOException \u3092\u30b9\u30ed\u30fc\u3059\u308b\u304c\u3001\u3053\u308c\u3092 forEach \u304b\u3089\u5916\u306b\u30b9\u30ed\u30fc\u3067\u304d\u306a\u3044\u306e\u3067\u3001forEach \u5185\u3067 try-catch \u3057\u3066\u975e\u691c\u67fb\u4f8b\u5916\u3067\u30e9\u30c3\u30d7\u3057\u3066\u518d\u30b9\u30ed\u30fc\u305b\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\u3061\u306a\u307f\u306b UncheckedIOException \u306f Java 8 \u304b\u3089\u65b0\u305f\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u3067\u3042\u308d\u3046\u304b\u3002\n\u3000\n\u307e\u305f\u3001analyze \u30e1\u30bd\u30c3\u30c9\u306f\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u4f8b\u5916 MyException \u3092\u30b9\u30ed\u30fc\u3059\u308b\u3002 MyException \u3082\u691c\u67fb\u4f8b\u5916\u306a\u306e\u3067\u3001\u3084\u306f\u308a forEach \u5185\u3067\u975e\u691c\u67fb\u4f8b\u5916\u3067\u30e9\u30c3\u30d7\u3059\u308b\u306a\u3069\u306e\u5bfe\u5fdc\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4eca\u56de\u306e\u4f8b\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u4f8b\u5916\u306e\u4ed5\u7d44\u307f\u304c\u975e\u691c\u67fb\u4f8b\u5916\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001RuntimeException \u306a\u3069\u306e\u65e2\u5b58\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3057\u304b\u306a\u304f\u3001process \u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u5074\u306b\u3068\u3063\u3066\u306f\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u3002\n\u95a2\u6570\u578b\u8a00\u8a9e\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u63a8\u6e2c\u306e\u57df\u3092\u51fa\u306a\u3044\u304c\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306a\u51e6\u7406\u306f\u526f\u4f5c\u7528\u3092\u767a\u751f\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\u3067\u8a00\u8a9e\u4ed5\u69d8\u304c\u5b9a\u3081\u3089\u308c\u305f\u7d50\u679c\u3001\u3053\u306e\u3088\u3046\u306b\u691c\u67fb\u4f8b\u5916\u3092\u8a31\u3055\u306a\u3044\u5b9a\u7fa9\u306b\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u304b\u3002\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u4e8b\u614b\u3068\u3044\u3046\u306e\u306f\u526f\u4f5c\u7528\u304c\u73fe\u308c\u305f\u3053\u3068\u306b\u4ed6\u306a\u3089\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\u3000\n\u3053\u306e\u554f\u984c\u306f\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u3089\u3057\u304f\u3001stackexchange \u3092\u6f01\u308b\u3068\u95a2\u9023\u3059\u308b\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u898b\u3064\u304b\u308b\u3002\u4ee5\u4e0b\u306f\u305d\u306e\u4e2d\u3067\u7279\u306b\u76ee\u306b\u7559\u307e\u3063\u305f\u3082\u306e\u3067\u3042\u308b\u3002\nhttp://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams/\n\u3053\u306e\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u72ec\u81ea\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u30e9\u30c3\u30d1\u30fc\uff09\u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u3082\u3044\u308b\u304f\u3089\u3044\u3067\u3042\u308b\u3002\nhttps://github.com/JeffreyFalgout/ThrowingStream\n\u30d5\u30a1\u30a4\u30eb\u3084\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u306e\u5165\u51fa\u529b\u304c\u767a\u751f\u3059\u308b\u51e6\u7406\u3092\u542b\u3080\u51e6\u7406\u3092\u3001\u5c11\u306a\u304f\u3068\u3082\u73fe\u72b6\u306e Streams API \u3067\u66f8\u304b\u306a\u3044\u307b\u3046\u304c\u826f\u3044\u3068\u6539\u3081\u3066\u611f\u3058\u305f\u3002\u3082\u3057\u3001\u4e0a\u8a18\u306e StreamsTextFileProcessor \u3092\u3082\u3063\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u306b\u66f8\u304f\u65b9\u6cd5\u3092\u601d\u3044\u3064\u3044\u305f\u65b9\u306f\u3001\u3054\u6559\u793a\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3042\u308b\u3002\nStreams API \u3092\u3053\u308c\u307e\u3067\u307e\u3068\u3082\u306b\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u304b\u3063\u305f\u3002\n\u307e\u3068\u3082\u306b\u4f7f\u304a\u3046\u3068\u3057\u305f\u3089\u4f8b\u5916\u51e6\u7406\u306e\u6271\u3044\u304c\u975e\u5e38\u306b\u96e3\u3057\u3044\u3053\u3068\u3092\u5b9f\u611f\u3057\u305f\u306e\u3067\u3001\u4e00\u4f8b\u3092\u6319\u3052\u3066\u305d\u306e\u96e3\u3057\u3055\u3092\u89e3\u8aac\u3059\u308b\u3002\n\n##\u3084\u308a\u305f\u3044\u51e6\u7406\n\u8907\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u305d\u308c\u305e\u308c\u30921\u884c\u305a\u3064\u8aad\u307f\u3053\u307f\u3001\u7a7a\u767d\u6587\u5b57\u3067\u5404\u884c\u3092\u5358\u8a9e\u306b\u5206\u5272\u3057\u3001\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u884c\u306a\u3046\u3001\u3068\u3044\u3046\u3088\u304f\u3042\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3002\u51e6\u7406\u306e\u624b\u9806\u3092\u624b\u7d9a\u304d\u7684\u306b\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n1. \u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u76f4\u4e0b\u306b\u5b58\u5728\u3059\u308b\u8907\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\uff08\u62e1\u5f35\u5b50 .txt\uff09\u30921\u3064\u305a\u3064\u8aad\u3080\n2. \u5404\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u30921\u884c\u305a\u3064\u8aad\u3080\n3. \u5404\u884c\uff08\u6587\u5b57\u5217\uff09\u3092\u3001\u7a7a\u767d\u6587\u5b57\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u8907\u6570\u306e\u6587\u5b57\u5217\uff08\u5358\u8a9e\u3068\u547c\u3076\u3053\u3068\u306b\u3059\u308b\uff09\u306b\u5206\u5272\u3059\u308b\n4. \u5404\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u3059\u308b\u3002\u4ee5\u4e0b\u3001\u51e6\u7406\u306e\u540d\u524d\u3092 analyze \u3068\u3059\u308b\n\u3000\n\n##\u30af\u30e9\u30b9\u306e\u96db\u5f62\n\u4ee5\u4e0b\u306e TextFileProcessor \u3092\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\u5404\u5358\u8a9e\u306b\u95a2\u3059\u308b\u51e6\u7406 analyze \u306f\u5b9f\u88c5\u6e08\u307f\u3068\u3057\u3066\u3001process() \u30e1\u30bd\u30c3\u30c9\u3060\u3051\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3002\n\n```java:TextFileProcessor.java\nimport java.io.File;\nimport java.io.IOException;\n\npublic abstract class TextFileProcessor {\n\t\n\t@SuppressWarnings(\"serial\")\n\tpublic static class MyException extends Exception {\n\t}\n\t\n\tpublic void analyze(String word) throws MyException {\n\t\t// do something for the given word\n\t}\n\t// implement this!\n\tpublic abstract void process(File directory) throws IOException, MyException;\n\t\n}\n```\n\n## Streams API \u3092\u4f7f\u308f\u306a\u3044\u5b9f\u88c5\n \nStreams API \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u81ea\u5206\u306b\u3068\u3063\u3066\u99b4\u67d3\u307f\u306e\u3042\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\n```java:NormalTextFileProcessor.java\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic class NormalTextFileProcessor extends TextFileProcessor {\n\n\tpublic NormalTextFileProcessor() {\n\t}\n\n\t@Override\n\tpublic void process(File directory) throws IOException, MyException {\n\t\tfor (File file : directory.listFiles(new FileFilter() {\n\t\t\tpublic boolean accept(File path) {\n\t\t\t\treturn path.getName().endsWith(\".txt\") && path.isFile();\n\t\t\t}\n\t\t})) {\n\t\t\ttry (BufferedReader r = Files.newBufferedReader(file.toPath())) {\n\t\t\t\tString line = null;\n\t\t\t\twhile ((line = r.readLine()) != null) {\n\t\t\t\t\tfor (String word : line.split(\"\\\\s\")) {\n\t\t\t\t\t\tthis.analyze(word);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n\n## Streams API \u3092\u4f7f\u3063\u305f\u5b9f\u88c5\n \n\u672c\u984c\u306f\u3053\u3053\u304b\u3089\u3067\u3042\u308b\u3002Streams API \u3092\u4f7f\u3048\u3070\u3001\u4e0a\u306e NormalTextFileProcessor \u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306a\u533f\u540d\u30af\u30e9\u30b9\u306e\u751f\u6210\uff08FileFilter\uff09\u3084 BufferedReader \u304b\u3089\u8aad\u307f\u8fbc\u307f\u306b\u308f\u3056\u308f\u3056\u30ed\u30fc\u30ab\u30eb\u5909\u6570\uff08line\uff09\u3092\u6301\u3061\u51fa\u3059\u7169\u308f\u3057\u3055\u304c\u7121\u3044\u3002\u305d\u3046\u671f\u5f85\u3057\u3066\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n```java:StreamsTextFileProcessor.java\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.util.stream.Stream;\n\npublic class StreamsTextFileProcessor extends TextFileProcessor {\n\n\tpublic StreamsTextFileProcessor() {\n\t}\n\n\t@Override\n\tpublic void process(File directory) throws IOException, MyException {\n\t\tFiles.list(directory.toPath())\n\t\t.filter(p -> (p.toString().endsWith(\".txt\") && p.toFile().isFile()))\n\t\t.forEach(f -> {\n\t\t\ttry (Stream<String> lines = Files.lines(f)) {\n\t\t\t\tlines\n\t\t\t\t.forEach(\n\t\t\t\t\tline -> {\n\t\t\t\t\t\tStream.of(line.split(\"\\\\s\"))\n\t\t\t\t\t\t.forEach(word -> {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tthis.analyze(word);\n\t\t\t\t\t\t\t} catch (MyException e) {\n\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new UncheckedIOException(e);\n\t\t\t}\n\t\t});\n\t}\n\n}\n```\n\n\u7dba\u9e97\u306b\u306a\u308b\u3069\u3053\u308d\u304b\u3001try-catch \u306e\u30cd\u30b9\u30c8\u306e\u305b\u3044\u3067\u3080\u3057\u308d\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3053\u306e\u7406\u7531\u306f\u3001Streams API \u3067\u7528\u3044\u3089\u308c\u308b [Function](https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html), [Consumer](https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html) \u3092\u59cb\u3081\u3068\u3059\u308b [functional interfaces](https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html) \u306e\u30e1\u30bd\u30c3\u30c9\u305f\u3061\u304c\u3001\u691c\u67fb\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u5b9a\u7fa9\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\njava.nio.file.Files#lines \u30e1\u30bd\u30c3\u30c9\u306f IOException \u3092\u30b9\u30ed\u30fc\u3059\u308b\u304c\u3001\u3053\u308c\u3092 forEach \u304b\u3089\u5916\u306b\u30b9\u30ed\u30fc\u3067\u304d\u306a\u3044\u306e\u3067\u3001forEach \u5185\u3067 try-catch \u3057\u3066\u975e\u691c\u67fb\u4f8b\u5916\u3067\u30e9\u30c3\u30d7\u3057\u3066\u518d\u30b9\u30ed\u30fc\u305b\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\u3061\u306a\u307f\u306b [UncheckedIOException](https://docs.oracle.com/javase/8/docs/api/java/io/UncheckedIOException.html) \u306f Java 8 \u304b\u3089\u65b0\u305f\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u3067\u3042\u308d\u3046\u304b\u3002\n\u3000\n\u307e\u305f\u3001analyze \u30e1\u30bd\u30c3\u30c9\u306f\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u4f8b\u5916 MyException \u3092\u30b9\u30ed\u30fc\u3059\u308b\u3002 MyException \u3082\u691c\u67fb\u4f8b\u5916\u306a\u306e\u3067\u3001\u3084\u306f\u308a forEach \u5185\u3067\u975e\u691c\u67fb\u4f8b\u5916\u3067\u30e9\u30c3\u30d7\u3059\u308b\u306a\u3069\u306e\u5bfe\u5fdc\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4eca\u56de\u306e\u4f8b\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u4f8b\u5916\u306e\u4ed5\u7d44\u307f\u304c\u975e\u691c\u67fb\u4f8b\u5916\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001RuntimeException \u306a\u3069\u306e\u65e2\u5b58\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3057\u304b\u306a\u304f\u3001process \u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u5074\u306b\u3068\u3063\u3066\u306f\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u3002\n\n\u95a2\u6570\u578b\u8a00\u8a9e\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u63a8\u6e2c\u306e\u57df\u3092\u51fa\u306a\u3044\u304c\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306a\u51e6\u7406\u306f\u526f\u4f5c\u7528\u3092\u767a\u751f\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\u3067\u8a00\u8a9e\u4ed5\u69d8\u304c\u5b9a\u3081\u3089\u308c\u305f\u7d50\u679c\u3001\u3053\u306e\u3088\u3046\u306b\u691c\u67fb\u4f8b\u5916\u3092\u8a31\u3055\u306a\u3044\u5b9a\u7fa9\u306b\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u304b\u3002\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u4e8b\u614b\u3068\u3044\u3046\u306e\u306f\u526f\u4f5c\u7528\u304c\u73fe\u308c\u305f\u3053\u3068\u306b\u4ed6\u306a\u3089\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\u3000\n\u3053\u306e\u554f\u984c\u306f\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u3089\u3057\u304f\u3001stackexchange \u3092\u6f01\u308b\u3068\u95a2\u9023\u3059\u308b\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u898b\u3064\u304b\u308b\u3002\u4ee5\u4e0b\u306f\u305d\u306e\u4e2d\u3067\u7279\u306b\u76ee\u306b\u7559\u307e\u3063\u305f\u3082\u306e\u3067\u3042\u308b\u3002\nhttp://stackoverflow.com/questions/27644361/how-can-i-throw-checked-exceptions-from-inside-java-8-streams/\n\n\u3053\u306e\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u72ec\u81ea\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u30e9\u30c3\u30d1\u30fc\uff09\u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u3082\u3044\u308b\u304f\u3089\u3044\u3067\u3042\u308b\u3002\nhttps://github.com/JeffreyFalgout/ThrowingStream\n\n\u30d5\u30a1\u30a4\u30eb\u3084\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3068\u306e\u5165\u51fa\u529b\u304c\u767a\u751f\u3059\u308b\u51e6\u7406\u3092\u542b\u3080\u51e6\u7406\u3092\u3001\u5c11\u306a\u304f\u3068\u3082\u73fe\u72b6\u306e Streams API \u3067\u66f8\u304b\u306a\u3044\u307b\u3046\u304c\u826f\u3044\u3068\u6539\u3081\u3066\u611f\u3058\u305f\u3002\u3082\u3057\u3001\u4e0a\u8a18\u306e StreamsTextFileProcessor \u3092\u3082\u3063\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u306b\u66f8\u304f\u65b9\u6cd5\u3092\u601d\u3044\u3064\u3044\u305f\u65b9\u306f\u3001\u3054\u6559\u793a\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3042\u308b\u3002\n", "tags": ["Java", "java8", "Java\u5165\u9580"]}