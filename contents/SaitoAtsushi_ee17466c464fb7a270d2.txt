{"tags": ["C++", "C++11"], "context": "C/C++ \u3067\u306f\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u77e5\u308b\u305f\u3081\u306b\u914d\u5217\u306e\u30d0\u30a4\u30c8\u6570\u3092\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3067\u5272\u308b\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u6f14\u7b97\u5b50 sizeof \u304c\u8fd4\u3059\u306e\u306f\u3042\u304f\u307e\u3067\u3082 (\u8981\u7d20\u306e\u6570\u3067\u306f\u306a\u304f) \u30d0\u30a4\u30c8\u6570\u3067\u3042\u308b\u3053\u3068\u3084\u3001 C/C++ \u3067\u306e\u30dd\u30a4\u30f3\u30bf\u95a2\u9023\u8868\u8a18\u304c\u3084\u3084\u3053\u3057\u3044\u3053\u3068\u306a\u3069\u3068\u4f75\u3055\u3063\u3066\u9593\u9055\u3063\u305f\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u3042\u308a\u3001\u305d\u306e\u3088\u3046\u306a\u5185\u5bb9\u306e\u6295\u7a3f\u3092\u898b\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nC++ > stdint.h > sizeof(int[][3])\u3068sizeof(uint8_t[][3]) > 48\u306812\n\n\u3042\u3089\u305f\u3081\u3066\u6319\u52d5\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\nsizeof \u3067\u4e00\u6b21\u5143\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\n\u307e\u305a\u7c21\u5358\u306a\u4e00\u6b21\u5143\u914d\u5217\u306a\u3089\u305d\u308c\u307b\u3069\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n#include <iostream>\n\nstatic const int table[3] = {1, 0, 0};\n\nint main() {\n  std::cout << \"Table extent is \" << std::endl;\n  std::cout << sizeof(table)/sizeof(*table) << std::endl;\n  return 0;\n}\n\n\nsizeof \u3067\u4e8c\u6b21\u5143\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\n\u3053\u308c\u304c\u4e8c\u6b21\u5143\u914d\u5217\u3060\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout << \"Table extent is \" << std::endl;\n  std::cout << sizeof(table2)/sizeof(*table2) << std::endl;\n  return 0;\n}\n\n\u3053\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nTable extent is 4\n\n4 \u3068\u3044\u3046\u306e\u306f table2 \u306e\u7b2c\u4e00\u6b21\u5143\u306e\u8981\u7d20\u6570\u3067\u3059\u306d\u3002 *table2 \u306e\u578b\u306f int[3] \u306a\u306e\u3067 table2 \u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\u3092 *table2 \u306e\u30d0\u30a4\u30c8\u6570\u3067\u5272\u308b\u3068\u7b2c\u4e00\u6b21\u5143\u306e\u8981\u7d20\u6570\u306b\u306a\u308b\u306e\u3067\u3059\u3002\n\n\u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\n\u3067\u306f\u914d\u5217\u306e\u7b2c\u4e8c\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f sizeof \u306b\u6e21\u3059\u3068\u304d\u306b * \u3092\u3072\u3068\u3064\u591a\u304f\u4ed8\u3051\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout << \"Table extent of dimension 2 is \" << std::endl;\n  std::cout << sizeof(*table2)/sizeof(**table2) << std::endl;\n  return 0;\n}\n\n\u305d\u3057\u3066\u3001 C++11 \u306e type_traits \u306b\u306f std::extent \u3068\u3044\u3046\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u3001\u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u578b\u30b7\u30b9\u30c6\u30e0\u306e\u6069\u6075\u3092\u53d7\u3051\u3089\u308c\u308b\u306e\u3067\u3001 sizeof \u3092\u4f7f\u3063\u305f\u53e4\u3044\u3084\u308a\u304b\u305f\u306f\u306a\u308b\u3079\u304f\u6368\u3066\u3066\u3053\u3061\u3089\u306b\u79fb\u884c\u3059\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout\n    << \"Table extent is \"\n    << std::extent<decltype(table2),0>::value\n    << \"x\"\n    << std::extent<decltype(table2),1>::value\n    << std::endl;\n  return 0;\n}\n\nTable extent is 4x3\n\n\n\u914d\u5217\u5168\u4f53\u306e\u5927\u304d\u3055\n\u591a\u6b21\u5143\u914d\u5217\u306b\u3064\u3044\u3066\u300c\u914d\u5217\u306e\u5927\u304d\u3055\u300d\u3068\u3044\u3063\u305f\u3068\u304d\u3001\u305d\u306e\u914d\u5217\u304c\u914d\u5217\u306e\u914d\u5217\u3067\u3042\u308b\u3068\u898b\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u591a\u6b21\u5143\u306e\u5e83\u3055\u3092\u6301\u3063\u305f\u914d\u5217\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u306e\u3067\u3042\u308c\u3070 table2 \u306e\u5927\u304d\u3055\u306f 12 \u3067\u3042\u3063\u3066\u6b32\u3057\u3044\u3067\u3059\u3088\u306d\u3002\n\u305d\u3046\u3044\u3046\u6a5f\u80fd\u304c\u306a\u3044\u304b\u8abf\u3079\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001 C++11 \u306b\u306f\u305d\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u898b\u5f53\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nfullextent.h\n#ifndef HEADER_0ea4160a60cf2063fa848012290e278f\n#define HEADER_0ea4160a60cf2063fa848012290e278f\n\n#include <cstddef>\n#include <type_traits>\n\ntemplate<class T>\nclass fullextent {\nprivate:\n  template<size_t r, size_t i>\n  static constexpr typename std::enable_if<(r!=1), size_t>::type helper(void) {\n    return std::extent<T, i>::value * helper<r-1, i+1>();\n  }    \n  template<size_t r, size_t i>\n  static constexpr typename std::enable_if<(r==1), size_t>::type helper(void) {\n    return 1;\n  }\npublic:\n  typename std::enable_if<std::is_array<T>::value, size_t>::type\n  static constexpr value = std::extent<T, 0>::value * helper<std::rank<T>::value, 1>();\n};\n#endif\n\n\n\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8981\u9818\u3067\u3059\u3002\n#include <iostream>\n#include <fullextent.h>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout\n    << \"Table extent is \"\n    << fullextent<decltype(table2)>::value\n    << std::endl;\n  return 0;\n}\n\n\n\u307e\u3068\u3081\n\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u77e5\u308a\u305f\u3044\u3068\u304d\u306f sizeof \u3088\u308a\u3082 std::extent \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\nC/C++ \u3067\u306f\u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u77e5\u308b\u305f\u3081\u306b\u914d\u5217\u306e\u30d0\u30a4\u30c8\u6570\u3092\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3067\u5272\u308b\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u6f14\u7b97\u5b50 `sizeof` \u304c\u8fd4\u3059\u306e\u306f\u3042\u304f\u307e\u3067\u3082 (\u8981\u7d20\u306e\u6570\u3067\u306f\u306a\u304f) \u30d0\u30a4\u30c8\u6570\u3067\u3042\u308b\u3053\u3068\u3084\u3001 C/C++ \u3067\u306e\u30dd\u30a4\u30f3\u30bf\u95a2\u9023\u8868\u8a18\u304c\u3084\u3084\u3053\u3057\u3044\u3053\u3068\u306a\u3069\u3068\u4f75\u3055\u3063\u3066\u9593\u9055\u3063\u305f\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u3042\u308a\u3001\u305d\u306e\u3088\u3046\u306a\u5185\u5bb9\u306e\u6295\u7a3f\u3092\u898b\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n> [C++ > stdint.h > sizeof(int[][3])\u3068sizeof(uint8_t[][3]) > 48\u306812](http://qiita.com/7of9/items/100e4c88e4c165fb5e3e)\n\n\u3042\u3089\u305f\u3081\u3066\u6319\u52d5\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\n# `sizeof` \u3067\u4e00\u6b21\u5143\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\n\n\u307e\u305a\u7c21\u5358\u306a\u4e00\u6b21\u5143\u914d\u5217\u306a\u3089\u305d\u308c\u307b\u3069\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```cpp\n#include <iostream>\n\nstatic const int table[3] = {1, 0, 0};\n\nint main() {\n  std::cout << \"Table extent is \" << std::endl;\n  std::cout << sizeof(table)/sizeof(*table) << std::endl;\n  return 0;\n}\n```\n\n# `sizeof` \u3067\u4e8c\u6b21\u5143\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u53d6\u5f97\u3059\u308b\n\n\u3053\u308c\u304c\u4e8c\u6b21\u5143\u914d\u5217\u3060\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n```cpp\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout << \"Table extent is \" << std::endl;\n  std::cout << sizeof(table2)/sizeof(*table2) << std::endl;\n  return 0;\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nTable extent is 4\n```\n\n`4` \u3068\u3044\u3046\u306e\u306f `table2` \u306e\u7b2c\u4e00\u6b21\u5143\u306e\u8981\u7d20\u6570\u3067\u3059\u306d\u3002 `*table2` \u306e\u578b\u306f `int[3]` \u306a\u306e\u3067 `table2` \u5168\u4f53\u306e\u30d0\u30a4\u30c8\u6570\u3092 `*table2` \u306e\u30d0\u30a4\u30c8\u6570\u3067\u5272\u308b\u3068\u7b2c\u4e00\u6b21\u5143\u306e\u8981\u7d20\u6570\u306b\u306a\u308b\u306e\u3067\u3059\u3002\n\n# \u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\n\n\u3067\u306f\u914d\u5217\u306e\u7b2c\u4e8c\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f `sizeof` \u306b\u6e21\u3059\u3068\u304d\u306b `*` \u3092\u3072\u3068\u3064\u591a\u304f\u4ed8\u3051\u308b\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002\n\n```cpp\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout << \"Table extent of dimension 2 is \" << std::endl;\n  std::cout << sizeof(*table2)/sizeof(**table2) << std::endl;\n  return 0;\n}\n```\n\n\u305d\u3057\u3066\u3001 C++11 \u306e `type_traits` \u306b\u306f `std::extent` \u3068\u3044\u3046\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u3001\u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u578b\u30b7\u30b9\u30c6\u30e0\u306e\u6069\u6075\u3092\u53d7\u3051\u3089\u308c\u308b\u306e\u3067\u3001 `sizeof` \u3092\u4f7f\u3063\u305f\u53e4\u3044\u3084\u308a\u304b\u305f\u306f\u306a\u308b\u3079\u304f\u6368\u3066\u3066\u3053\u3061\u3089\u306b\u79fb\u884c\u3059\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout\n    << \"Table extent is \"\n    << std::extent<decltype(table2),0>::value\n    << \"x\"\n    << std::extent<decltype(table2),1>::value\n    << std::endl;\n  return 0;\n}\n```\n\n```\nTable extent is 4x3\n```\n\n# \u914d\u5217\u5168\u4f53\u306e\u5927\u304d\u3055\n\n\u591a\u6b21\u5143\u914d\u5217\u306b\u3064\u3044\u3066\u300c\u914d\u5217\u306e\u5927\u304d\u3055\u300d\u3068\u3044\u3063\u305f\u3068\u304d\u3001\u305d\u306e\u914d\u5217\u304c__\u914d\u5217\u306e\u914d\u5217__\u3067\u3042\u308b\u3068\u898b\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3044\u3044\u306e\u3067\u3059\u304c\u3001__\u591a\u6b21\u5143\u306e\u5e83\u3055\u3092\u6301\u3063\u305f\u914d\u5217__\u3068\u3057\u3066\u89e3\u91c8\u3059\u308b\u306e\u3067\u3042\u308c\u3070 `table2` \u306e\u5927\u304d\u3055\u306f `12` \u3067\u3042\u3063\u3066\u6b32\u3057\u3044\u3067\u3059\u3088\u306d\u3002\n\n\u305d\u3046\u3044\u3046\u6a5f\u80fd\u304c\u306a\u3044\u304b\u8abf\u3079\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001 C++11 \u306b\u306f\u305d\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u898b\u5f53\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp:fullextent.h\n#ifndef HEADER_0ea4160a60cf2063fa848012290e278f\n#define HEADER_0ea4160a60cf2063fa848012290e278f\n\n#include <cstddef>\n#include <type_traits>\n\ntemplate<class T>\nclass fullextent {\nprivate:\n  template<size_t r, size_t i>\n  static constexpr typename std::enable_if<(r!=1), size_t>::type helper(void) {\n    return std::extent<T, i>::value * helper<r-1, i+1>();\n  }    \n  template<size_t r, size_t i>\n  static constexpr typename std::enable_if<(r==1), size_t>::type helper(void) {\n    return 1;\n  }\npublic:\n  typename std::enable_if<std::is_array<T>::value, size_t>::type\n  static constexpr value = std::extent<T, 0>::value * helper<std::rank<T>::value, 1>();\n};\n#endif\n```\n\n\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8981\u9818\u3067\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <fullextent.h>\n\nstatic const int table2[][3] = {\n  { 1, 0, 0 },\n  { 0, 1, 0 },\n  { 0, 0, 1 },\n  { 0, 1, 1 }\n};\n\nint main() {\n  std::cout\n    << \"Table extent is \"\n    << fullextent<decltype(table2)>::value\n    << std::endl;\n  return 0;\n}\n```\n\n# \u307e\u3068\u3081\n\n\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u77e5\u308a\u305f\u3044\u3068\u304d\u306f `sizeof` \u3088\u308a\u3082 `std::extent` \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n"}