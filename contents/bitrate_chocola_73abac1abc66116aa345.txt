{"context": " More than 1 year has passed since last update.\n\n\u30c9\u30ed\u30c3\u30d7\u3092\u8868\u793a\u3059\u308b\n\u4ee5\u524d\u3001\u7d39\u4ecb\u3057\u305fcocos2d-x\u74b0\u5883\u69cb\u7bc9\u3068\u30c9\u30ed\u30c3\u30d7\u306e\u753b\u50cf\u7d20\u6750\u304c\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3059\u3059\u3081\u307e\u3059\u3002\n\u30d1\u30ba\u30c9\u30e9\u3067\u306f\u6a2a6\u5217\u7e265\u5217\u306e\u30c9\u30ed\u30c3\u30d7\u3067\u69cb\u6210\u3055\u308c\u305f\u30d1\u30ba\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30c9\u30ed\u30c3\u30d7\u306e\u8868\u793a\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u958b\u767a\u74b0\u5883\n\nmacbook air 13 2011\nMAC OSX 10.9.1\nXcode5.0.2\ncocos2d-x 3.0 alpha1\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u753b\u50cf\u7d20\u6750\u3092\u8ffd\u52a0\u3059\u308b\n\u30c9\u30ed\u30c3\u30d7\u753b\u50cf\u306f105 x 105 px\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\u30c9\u30ed\u30c3\u30d7\u306f\u706b\u3001\u6c34\u3001\u6728\u3001\u95c7\u3001\u5149\u3001\u56de\u5fa9\u306e6\u7a2e\u985e\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\n\ndrop-flame.png\ndrop-aqua.png\ndrop-leaf.png\ndrop-dark.png\ndrop-shine.png\n\n\u305d\u3057\u3066\u4f5c\u6210\u3057\u305fcocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eResource\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n\u624b\u9806\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u30b3\u30d4\u30fc\u3057\u305f\u30c9\u30ed\u30c3\u30d7\u753b\u50cf\u3092Xcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n\u30c9\u30ed\u30c3\u30d7\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\nDropSprite.h\u3068DropSprite.cpp\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nDropSprite.h\n#include \"cocos2d.h\"\n\nclass DropSprite : public cocos2d::Sprite\n{\nprotected:\n    const char* getDropImageFile(kDrop dropType);\n\npublic:\n    CC_SYNTHESIZE_READONLY(kDrop, m_dropType, DropType);\n\n    DropSprite();\n    virtual ~DropSprite();\n\n    virtual bool initWithDropType(kDrop dropType);\n    static DropSprite* createWithDropType(kDrop dropType);\n};\n\nDropSprite.cpp\n#include \"DropSprite.h\"\n\nDropSprite::DropSprite()\n{\n\n}\n\nDropSprite::~DropSprite()\n{\n\n}\n\nDropSprite* DropSprite::createWithDropType(kDrop dropType)\n{\n    DropSprite *pRet = new DropSprite();\n    if(pRet && pRet->initWithDropType(dropType)){\n        pRet->autorelease();\n        return pRet;\n    } else {\n        CC_SAFE_DELETE(pRet);\n        return NULL;\n    }\n}\n\nbool DropSprite::initWithDropType(kDrop dropType)\n{\n    if(!Sprite::initWithFile(getDropImageFile(dropType))){\n        return false;\n    }\n\n    m_dropType = dropType;\n\n    return true;\n}\n\nconst char* DropSprite::getDropImageFile(kDrop dropType)\n{\n    switch (dropType) {\n        case kDropAqua:\n            return \"drop-aqua.png\";\n\n        case kDropDark:\n            return \"drop-dark.png\";\n\n        case kDropFlame:\n            return \"drop-flame.png\";\n\n        case kDropHeal:\n            return \"drop-heal.png\";\n\n        case kDropLeaf:\n            return \"drop-leaf.png\";\n\n        case kDropShine:\n            return \"drop-shine.png\";\n        default:\n            CCASSERT(false, \"invalid dropType\");\n            return \"\";\n    }\n}\n\n\n\u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\nGameScene.h\u3068GameScene.cpp\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nGameScene.h\nclass GameScene : public cocos2d::Layer\n{\nprotected:\n    enum kTag {\n        kTagBaseDrop = 10000,\n    };\n\n    enum kZOrder {\n        kZOrderDrop,\n    };\n\n    float m_dropSize;\n};\n\nGameScene.cpp\n#include \"GameScene.h\"\n\nusing namespace cocos2d;\nusing namespace CocosDenshion;\nusing namespace std;\n\nScene* GameScene::scene()\n{\n    Scene* scene = Scene::create();\n    GameScene* layer = GameScene::create();\n    scene->addChild(layer);\n    return scene;\n}\n\nbool GameScene::init()\n{\n    if(!CCLayer::init()){\n        return false;\n    }\n\n    initForVariables();\n    showDrop();\n\n    return true;\n}\n\nvoid GameScene::initForVariables()\n{\n    srand((unsigned)time(NULL));\n\n    DropSprite* pDrop = DropSprite::createWithDropType(kDropFlame);\n    m_dropSize = pDrop->getContentSize().height;\n}\n\nPoint GameScene::getPosition(int posIndexX, int posIndexY)\n{\n    float offsetX = m_background->getContentSize().width * 0.005;\n    float offsetY = m_background->getContentSize().height * -0.001;\n    return Point((posIndexX + 0.5) * m_dropSize + offsetX,\n                 (posIndexY + 0.5) * m_dropSize + offsetY);\n}\n\nint GameScene::getTag(int posIndexX, int posIndexY)\n{\n    return kTagBaseDrop + (posIndexX + 1) + (posIndexY * MAX_DROP_X);\n}\n\nvoid GameScene::showDrop()\n{\n    for (int x = 0; x < MAX_DROP_X; x++){\n        for (int y = 0; y < MAX_DROP_Y; y++) {\n            kDrop dropType = (kDrop)(rand() % kDropCount);\n\n            int tag = getTag(x, y);\n            m_dropTags[dropType].push_back(tag);\n\n            DropSprite* pDrop = DropSprite::createWithDropType(dropType);\n            pDrop->setPosition(getPosition(x, y));\n            m_background->addChild(pDrop, kZOrderDrop, tag);\n        }\n    }\n}\n\n\n\u4f5c\u6210\u3057\u305fGameScene\u3092AppDelegate\u3078\u5b9f\u88c5\u3059\u308b\nAppDelegate.cpp\u306bGameScene.h\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n#include \"AppDelegate.h\"\n#include \"GameScene.h\"\n\nAppDelegate.cpp\u306eapplicationDidFinishLaunching\u5185\u306bHelloScene\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3053\u3092GameScene\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\nbool AppDelegate::applicationDidFinishLaunching() {\n    // initialize director\n    auto director = Director::getInstance();\n    auto eglView = EGLView::getInstance();\n\n    director->setOpenGLView(eglView);\n\n    // turn on display FPS\n    director->setDisplayStats(true);\n\n    // set FPS. the default value is 1.0/60 if you don't call this\n    director->setAnimationInterval(1.0 / 60);\n\n    // create a scene. it's an autorelease object\n    auto scene = GameScene::scene();\n\n\u6700\u5f8c\u306b\u5b9f\u884c\u3092\u3059\u308b\u3068\u30c9\u30ed\u30c3\u30d7\u304c\u6a2a6\u5217\u7e265\u5217\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u307e\u3068\u3081\ncocos2d-x 2.x\u4ee5\u524d\u3067\u306f\u30af\u30e9\u30b9\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306bCC\u304c\u3064\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u30013.0\u3067\u306fCC\u306e\u547d\u540d\u898f\u5247\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u5143\u3005cococos2d for iPhone\u304b\u3089\u306e\u79fb\u690d\u3067objective-c\u3092\u610f\u8b58\u3055\u308c\u305f\u547d\u540d\u898f\u5247\u3067\u3057\u305f\u304cC++\u3089\u3057\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u4eca\u65e5\u77e5\u3063\u305f\u306e\u3067\u3059\u304cCocosStdio1.2\u304c\u516c\u958b\u3055\u308c\u305f\u3088\u3046\u3067\u3059Windows\u7248\u306e\u307f\u306e\u63d0\u4f9b\u306a\u306e\u3067osx\u7248\u3082\u3067\u308b\u3068\u3044\u3044\u306a\u3068\u9858\u3063\u3066\u3044\u307e\u3059\u3002\n\u6b21\u56de\u306f\u30c9\u30ed\u30c3\u30d7\u3092\u52d5\u304b\u3059\u90e8\u5206\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u753b\u50cf\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u4e0a\u9650\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u305f\u3044\u30fb\u30fb\u30fb\n\n##\u30c9\u30ed\u30c3\u30d7\u3092\u8868\u793a\u3059\u308b\n\u4ee5\u524d\u3001\u7d39\u4ecb\u3057\u305f[cocos2d-x\u74b0\u5883\u69cb\u7bc9](http://qiita.com/bitlate_chocola/items/d352053c6747c607bb89)\u3068[\u30c9\u30ed\u30c3\u30d7\u306e\u753b\u50cf\u7d20\u6750](http://qiita.com/bitlate_chocola/items/868e23f9447eaf378b47)\u304c\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3059\u3059\u3081\u307e\u3059\u3002\n\n\u30d1\u30ba\u30c9\u30e9\u3067\u306f\u6a2a6\u5217\u7e265\u5217\u306e\u30c9\u30ed\u30c3\u30d7\u3067\u69cb\u6210\u3055\u308c\u305f\u30d1\u30ba\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30c9\u30ed\u30c3\u30d7\u306e\u8868\u793a\u3092\u884c\u3044\u307e\u3059\u3002\n\n##\u958b\u767a\u74b0\u5883\n- macbook air 13 2011\n- MAC OSX 10.9.1\n- Xcode5.0.2\n- cocos2d-x 3.0 alpha1\n\n##\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u753b\u50cf\u7d20\u6750\u3092\u8ffd\u52a0\u3059\u308b\n\u30c9\u30ed\u30c3\u30d7\u753b\u50cf\u306f105 x 105 px\u306e\u30b5\u30a4\u30ba\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\u30c9\u30ed\u30c3\u30d7\u306f\u706b\u3001\u6c34\u3001\u6728\u3001\u95c7\u3001\u5149\u3001\u56de\u5fa9\u306e6\u7a2e\u985e\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\n\n- drop-flame.png\n- drop-aqua.png\n- drop-leaf.png\n- drop-dark.png\n- drop-shine.png\n\n\u305d\u3057\u3066\u4f5c\u6210\u3057\u305fcocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eResource\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n\u624b\u9806\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u30b3\u30d4\u30fc\u3057\u305f\u30c9\u30ed\u30c3\u30d7\u753b\u50cf\u3092Xcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n##\u30c9\u30ed\u30c3\u30d7\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\nDropSprite.h\u3068DropSprite.cpp\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nDropSprite.h\n\n```\n#include \"cocos2d.h\"\n\nclass DropSprite : public cocos2d::Sprite\n{\nprotected:\n    const char* getDropImageFile(kDrop dropType);\n    \npublic:\n    CC_SYNTHESIZE_READONLY(kDrop, m_dropType, DropType);\n    \n    DropSprite();\n    virtual ~DropSprite();\n    \n    virtual bool initWithDropType(kDrop dropType);\n    static DropSprite* createWithDropType(kDrop dropType);\n};\n```\n\nDropSprite.cpp\n\n```\n#include \"DropSprite.h\"\n\nDropSprite::DropSprite()\n{\n    \n}\n\nDropSprite::~DropSprite()\n{\n    \n}\n\nDropSprite* DropSprite::createWithDropType(kDrop dropType)\n{\n    DropSprite *pRet = new DropSprite();\n    if(pRet && pRet->initWithDropType(dropType)){\n        pRet->autorelease();\n        return pRet;\n    } else {\n        CC_SAFE_DELETE(pRet);\n        return NULL;\n    }\n}\n\nbool DropSprite::initWithDropType(kDrop dropType)\n{\n    if(!Sprite::initWithFile(getDropImageFile(dropType))){\n        return false;\n    }\n    \n    m_dropType = dropType;\n    \n    return true;\n}\n\nconst char* DropSprite::getDropImageFile(kDrop dropType)\n{\n    switch (dropType) {\n        case kDropAqua:\n            return \"drop-aqua.png\";\n            \n        case kDropDark:\n            return \"drop-dark.png\";\n            \n        case kDropFlame:\n            return \"drop-flame.png\";\n            \n        case kDropHeal:\n            return \"drop-heal.png\";\n            \n        case kDropLeaf:\n            return \"drop-leaf.png\";\n            \n        case kDropShine:\n            return \"drop-shine.png\";\n        default:\n            CCASSERT(false, \"invalid dropType\");\n            return \"\";\n    }\n}\n```\n\n##\u30b2\u30fc\u30e0\u30b7\u30fc\u30f3\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\nGameScene.h\u3068GameScene.cpp\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nGameScene.h\n\n```\nclass GameScene : public cocos2d::Layer\n{\nprotected:\n    enum kTag {\n        kTagBaseDrop = 10000,\n    };\n    \n    enum kZOrder {\n        kZOrderDrop,\n    };\n        \n    float m_dropSize;\n};\n```\n\nGameScene.cpp\n\n```\n#include \"GameScene.h\"\n\nusing namespace cocos2d;\nusing namespace CocosDenshion;\nusing namespace std;\n\nScene* GameScene::scene()\n{\n    Scene* scene = Scene::create();\n    GameScene* layer = GameScene::create();\n    scene->addChild(layer);\n    return scene;\n}\n\nbool GameScene::init()\n{\n    if(!CCLayer::init()){\n        return false;\n    }\n            \n\tinitForVariables();\n    showDrop();\n    \n    return true;\n}\n\nvoid GameScene::initForVariables()\n{\n    srand((unsigned)time(NULL));\n    \n    DropSprite* pDrop = DropSprite::createWithDropType(kDropFlame);\n    m_dropSize = pDrop->getContentSize().height;\n}\n\nPoint GameScene::getPosition(int posIndexX, int posIndexY)\n{\n    float offsetX = m_background->getContentSize().width * 0.005;\n    float offsetY = m_background->getContentSize().height * -0.001;\n    return Point((posIndexX + 0.5) * m_dropSize + offsetX,\n                 (posIndexY + 0.5) * m_dropSize + offsetY);\n}\n\nint GameScene::getTag(int posIndexX, int posIndexY)\n{\n    return kTagBaseDrop + (posIndexX + 1) + (posIndexY * MAX_DROP_X);\n}\n\nvoid GameScene::showDrop()\n{\n    for (int x = 0; x < MAX_DROP_X; x++){\n        for (int y = 0; y < MAX_DROP_Y; y++) {\n            kDrop dropType = (kDrop)(rand() % kDropCount);\n            \n            int tag = getTag(x, y);\n            m_dropTags[dropType].push_back(tag);\n            \n            DropSprite* pDrop = DropSprite::createWithDropType(dropType);\n            pDrop->setPosition(getPosition(x, y));\n            m_background->addChild(pDrop, kZOrderDrop, tag);\n        }\n    }\n}\n```\n\n##\u4f5c\u6210\u3057\u305fGameScene\u3092AppDelegate\u3078\u5b9f\u88c5\u3059\u308b\n\nAppDelegate.cpp\u306bGameScene.h\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```\n#include \"AppDelegate.h\"\n#include \"GameScene.h\"\n```\n\nAppDelegate.cpp\u306eapplicationDidFinishLaunching\u5185\u306bHelloScene\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3053\u3092GameScene\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```\nbool AppDelegate::applicationDidFinishLaunching() {\n    // initialize director\n    auto director = Director::getInstance();\n    auto eglView = EGLView::getInstance();\n\n    director->setOpenGLView(eglView);\n\t\n    // turn on display FPS\n    director->setDisplayStats(true);\n\n    // set FPS. the default value is 1.0/60 if you don't call this\n    director->setAnimationInterval(1.0 / 60);\n\n    // create a scene. it's an autorelease object\n    auto scene = GameScene::scene();\n```\n\n\u6700\u5f8c\u306b\u5b9f\u884c\u3092\u3059\u308b\u3068\u30c9\u30ed\u30c3\u30d7\u304c\u6a2a6\u5217\u7e265\u5217\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n##\u307e\u3068\u3081\ncocos2d-x 2.x\u4ee5\u524d\u3067\u306f\u30af\u30e9\u30b9\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306bCC\u304c\u3064\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u30013.0\u3067\u306fCC\u306e\u547d\u540d\u898f\u5247\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u5143\u3005cococos2d for iPhone\u304b\u3089\u306e\u79fb\u690d\u3067objective-c\u3092\u610f\u8b58\u3055\u308c\u305f\u547d\u540d\u898f\u5247\u3067\u3057\u305f\u304cC++\u3089\u3057\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4eca\u65e5\u77e5\u3063\u305f\u306e\u3067\u3059\u304cCocosStdio1.2\u304c\u516c\u958b\u3055\u308c\u305f\u3088\u3046\u3067\u3059Windows\u7248\u306e\u307f\u306e\u63d0\u4f9b\u306a\u306e\u3067osx\u7248\u3082\u3067\u308b\u3068\u3044\u3044\u306a\u3068\u9858\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u56de\u306f\u30c9\u30ed\u30c3\u30d7\u3092\u52d5\u304b\u3059\u90e8\u5206\u306e\u5b9f\u88c5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u753b\u50cf\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u4e0a\u9650\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u305f\u3044\u30fb\u30fb\u30fb\n\n\n", "tags": ["cocos2d-x", "Xcode"]}