{"context": "\n\n\u3053\u3068\u306e\u306f\u3058\u307e\u308a\nMongoDB\u306b\u306fGridFS\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4ed6\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3064\u304d\u3067\u307e\u308b\u3063\u3068\u683c\u7d0d\u3067\u304d\u308b\u6a5f\u80fd\u304c\u3042\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u3082\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u308b\u3068\u3044\u3046\u306e\u3067\u304b\u306a\u308a\u4fbf\u5229\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\n\u3053\u308c\u307e\u3067Node.js\u4e0a\u3067Mongoose\u3067\u624b\u8efd\u306bMongoDB\u306e\u30c7\u30fc\u30bf\u3092\u51fa\u3057\u5165\u308c\u3057\u306a\u304c\u3089API\u304c\u82e5\u5e72\u9055\u3046GridFS\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306b\u4f7f\u304a\u3046\u3068\u3044\u3046\u5834\u5408\u306fgridfs-stream\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u306e\u304c\u5b9a\u8de1\u306e\u3088\u3046\u306b\u8a00\u308f\u308c\u3066\u304a\u308a\u307e\u3057\u305f\n\u3057\u304b\u3057\u5148\u65e5\u6614\u306e\u4f5c\u308a\u304b\u3051\u30a2\u30d7\u30ea\u3092ES6\u30d9\u30fc\u30b9\u306a\u66f8\u304d\u65b9\u306b\u306a\u304a\u3057\u305f\u3044\u2192node.js\u3068npm\u30e2\u30b8\u30e5\u30fc\u30eb\u95a2\u9023\u3092\u4e00\u6c17\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u3068\u3053\u308d\u30b3\u30b1\u308b\u30a2\u30d7\u30ea\u304c\u30c1\u30e9\u30db\u30e9\u3068\u3042\u308a\u307e\u3057\u3066\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u308b\u3068\u30a2\u30d7\u30ea\u672c\u4f53\u3084Mongoose\u5468\u308a\u306f\u5225\u6bb5\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001gridfs-stream\u95a2\u9023\u3092\u4f7f\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u3067\u8272\u3005\u51fa\u3066\u308b\u611f\u3058\u3067\u3057\u305f\n\u8abf\u3079\u3066\u307f\u308b\u3068gridfs-stream\u3067\u4f7f\u3063\u3066\u3044\u308bGridStore API\u304c\u6700\u8fd1\u306eMongoDB Native Driver\u3067\u306f\n\n\u3069\u3046\u3084\u3089Grid File System API\u306b\u79fb\u884c\u3057\u306a\u3055\u3044\u3068\u8a00\u3063\u3066\u3044\u308b\u3088\u3046\u3067\n\u4ef6\u306e\u30b3\u30b1\u305f\u30a2\u30d7\u30ea\u306e\u30a8\u30e9\u30fc\u306f\u3053\u308c\u3060\u3051\u304c\u539f\u56e0\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u898b\u304b\u3051\u305f\u3064\u3044\u3067\u306a\u306e\u3067 new GridFS API \u306a\u308b\u3082\u306e\u304c\u3069\u3093\u306a\u3082\u306e\u306a\u306e\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\n\nGrid File System API\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3080\u3068Node.js\u306estreams3\u306b\u3082\u5bfe\u5fdc\u3057\u305fstream\u30d9\u30fc\u30b9\u306eAPI\u3089\u3057\u304f\u3001\u4eca\u307e\u3067gridfs-stream\u3092\u7d4c\u7531\u3057\u3066\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u3092\u30cd\u30a4\u30c6\u30a3\u30d6\u30c9\u30e9\u30a4\u30d0\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u7d20\u3067\u3084\u3063\u3066\u304f\u308c\u305d\u3046\u306a\u96f0\u56f2\u6c17\n\u3068\u3044\u3046\u308f\u3051\u3067Mongoose\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u3057\u5165\u308c\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\n\nmodel.js\nvar Mongoose = require('mongoose');\nvar ObjectId = Mongoose.Types.ObjectId;\nvar mongoose = Mongoose.connect('mongodb://localhost/something');\n\nvar Schema = {};\nvar Model = {};\n\nSchema.File = new Mongoose.Schema({\n    filename: {type: String},\n    contentType: {type: String},\n    length: {type: Number},\n    md5: {type: String},\n    uploadDate: {type: Date},\n    metadata: Mongoose.Schema.Types.Mixed\n}, {strict: false});\n\nSchema.File.statics.writeStream = function(filename, options){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    return bucket.openUploadStream(filename, options);\n};\n\nSchema.File.methods.readStream = function(callback){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    return bucket.openDownloadStream(this._id);\n};\n\nSchema.File.methods.unlink = function(callback){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    bucket.delete(this._id, function(err){\n        callback(err);\n    });\n};\nModel.File = Mongoose.model('File', Schema.File, 'fs.files');\n\nmodule.exports = Model;\n\n\n\n\nwriter.js\nvar fs = require('fs');\nvar Model = require('model.js');\nvar readstream = fs.createReadStream('example.txt');\nvar writestream = Model.File.writeStream('example.txt', {\n    metadata: {}\n});\nwritestream.once('finish', function(){\n    console.info('\u30aa\u30ef\u30bf');\n});\n\nreadstream.pipe(writestream);\n\n\n# \u3053\u3068\u306e\u306f\u3058\u307e\u308a\n\nMongoDB\u306b\u306fGridFS\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4ed6\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3064\u304d\u3067\u307e\u308b\u3063\u3068\u683c\u7d0d\u3067\u304d\u308b\u6a5f\u80fd\u304c\u3042\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u3082\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u308b\u3068\u3044\u3046\u306e\u3067\u304b\u306a\u308a\u4fbf\u5229\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\n\n\u3053\u308c\u307e\u3067Node.js\u4e0a\u3067Mongoose\u3067\u624b\u8efd\u306bMongoDB\u306e\u30c7\u30fc\u30bf\u3092\u51fa\u3057\u5165\u308c\u3057\u306a\u304c\u3089API\u304c\u82e5\u5e72\u9055\u3046GridFS\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306b\u4f7f\u304a\u3046\u3068\u3044\u3046\u5834\u5408\u306f[gridfs-stream](https://github.com/aheckmann/gridfs-stream)\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u306e\u304c\u5b9a\u8de1\u306e\u3088\u3046\u306b\u8a00\u308f\u308c\u3066\u304a\u308a\u307e\u3057\u305f\n\n\u3057\u304b\u3057\u5148\u65e5\u6614\u306e\u4f5c\u308a\u304b\u3051\u30a2\u30d7\u30ea\u3092ES6\u30d9\u30fc\u30b9\u306a\u66f8\u304d\u65b9\u306b\u306a\u304a\u3057\u305f\u3044\u2192node.js\u3068npm\u30e2\u30b8\u30e5\u30fc\u30eb\u95a2\u9023\u3092\u4e00\u6c17\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u3068\u3053\u308d\u30b3\u30b1\u308b\u30a2\u30d7\u30ea\u304c\u30c1\u30e9\u30db\u30e9\u3068\u3042\u308a\u307e\u3057\u3066\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u308b\u3068\u30a2\u30d7\u30ea\u672c\u4f53\u3084Mongoose\u5468\u308a\u306f\u5225\u6bb5\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001gridfs-stream\u95a2\u9023\u3092\u4f7f\u3063\u3066\u3044\u308b\u3042\u305f\u308a\u3067\u8272\u3005\u51fa\u3066\u308b\u611f\u3058\u3067\u3057\u305f\n\n\u8abf\u3079\u3066\u307f\u308b\u3068gridfs-stream\u3067\u4f7f\u3063\u3066\u3044\u308bGridStore API\u304c\u6700\u8fd1\u306eMongoDB Native Driver\u3067\u306f\n\n![The GridStore API is deprecated](https://qiita-image-store.s3.amazonaws.com/0/31310/62378837-784b-a835-58ea-d048e89826ed.png)\n\n\u3069\u3046\u3084\u3089[Grid File System API](http://mongodb.github.io/node-mongodb-native/2.1/reference/gridfs/streaming/)\u306b\u79fb\u884c\u3057\u306a\u3055\u3044\u3068\u8a00\u3063\u3066\u3044\u308b\u3088\u3046\u3067\n\n\u4ef6\u306e\u30b3\u30b1\u305f\u30a2\u30d7\u30ea\u306e\u30a8\u30e9\u30fc\u306f\u3053\u308c\u3060\u3051\u304c\u539f\u56e0\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u898b\u304b\u3051\u305f\u3064\u3044\u3067\u306a\u306e\u3067 *new GridFS API* \u306a\u308b\u3082\u306e\u304c\u3069\u3093\u306a\u3082\u306e\u306a\u306e\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\n\n## Grid File System API\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3080\u3068Node.js\u306estreams3\u306b\u3082\u5bfe\u5fdc\u3057\u305fstream\u30d9\u30fc\u30b9\u306eAPI\u3089\u3057\u304f\u3001\u4eca\u307e\u3067gridfs-stream\u3092\u7d4c\u7531\u3057\u3066\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u3092\u30cd\u30a4\u30c6\u30a3\u30d6\u30c9\u30e9\u30a4\u30d0\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u7d20\u3067\u3084\u3063\u3066\u304f\u308c\u305d\u3046\u306a\u96f0\u56f2\u6c17\n\n\u3068\u3044\u3046\u308f\u3051\u3067Mongoose\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30c7\u30fc\u30bf\u3092\u51fa\u3057\u5165\u308c\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\n\n```js:model.js\nvar Mongoose = require('mongoose');\nvar ObjectId = Mongoose.Types.ObjectId;\nvar mongoose = Mongoose.connect('mongodb://localhost/something');\n\nvar Schema = {};\nvar Model = {};\n\nSchema.File = new Mongoose.Schema({\n    filename: {type: String},\n    contentType: {type: String},\n    length: {type: Number},\n    md5: {type: String},\n    uploadDate: {type: Date},\n    metadata: Mongoose.Schema.Types.Mixed\n}, {strict: false});\n\nSchema.File.statics.writeStream = function(filename, options){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    return bucket.openUploadStream(filename, options);\n};\n\nSchema.File.methods.readStream = function(callback){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    return bucket.openDownloadStream(this._id);\n};\n\nSchema.File.methods.unlink = function(callback){\n    var bucket = new Mongoose.mongo.GridFSBucket(mongoose.connection.db);\n    bucket.delete(this._id, function(err){\n        callback(err);\n    });\n};\nModel.File = Mongoose.model('File', Schema.File, 'fs.files');\n\nmodule.exports = Model;\n\n```\n\n```writer.js\nvar fs = require('fs');\nvar Model = require('model.js');\nvar readstream = fs.createReadStream('example.txt');\nvar writestream = Model.File.writeStream('example.txt', {\n    metadata: {}\n});\nwritestream.once('finish', function(){\n    console.info('\u30aa\u30ef\u30bf');\n});\n\nreadstream.pipe(writestream);\n```\n\n\n\n\n\n\n", "tags": ["Node.js", "MongoDB", "mongoose"]}