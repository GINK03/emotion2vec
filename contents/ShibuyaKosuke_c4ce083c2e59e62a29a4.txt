{"tags": ["PHP", "\u30ed\u30b0"], "context": " More than 1 year has passed since last update.\u4f8b\u306b\u3088\u3063\u3066\u3001\u30aa\u30ec\u30aa\u30ec\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e00\u90e8\nlog4php \u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://logging.apache.org/log4php/\nlog4j \u3068\u304b log4net \u307f\u305f\u3044\u306b\u975e\u540c\u671f\u3067\u66f8\u304d\u51fa\u3057\u304c\u3067\u304d\u308c\u3070\u3044\u3044\u306e\u306b\u2026\n\nLog.class.php\n<?php\n\nnamespace common;\n\n/**\n * Log\n */\nfinal class Log\n{\n\n    /**\n     * \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\n     */\n    const PREFIX = 'Message: ';\n\n    /**\n     * Log4php \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n     * @var Object Log4phpObject\n     */\n    static private $_logger = null;\n\n    /**\n     * \u30ed\u30b0\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\n     * @return array\n     */\n    static public function getConfig()\n    {\n        if (!file_exists(LOG_DIR)) {\n            if (!mkdir(LOG_DIR, 0775, true)) {\n                throw new SystemErrorException(ExceptionCode::SYSTEM_LOGDIR_ERR);\n            }\n        }\n        $objDate = new \\DateTime;\n        $date = $objDate->format('Ymd');\n        $log = LOG_DIR . \"/{$date}.log\";\n\n        switch (MODE) {\n            case DEVELOPPING:\n                $level = 'trace';\n                break;\n            case TEST:\n                $level = 'trace';\n                break;\n            case PRODUCTION:\n                $level = 'info';\n                break;\n        }\n\n        $option = array(\n            'appenders' => array(\n                'default' => array(\n                    'class' => 'LoggerAppenderFile',\n                    'layout' => array(\n                        'class' => 'LoggerLayoutPattern',\n                        'conversionPattern' => '%date{Y-m-d H:i:s,u} %-5level %msg%n'\n                    ),\n                    'params' => array(\n                        'file' => $log,\n                        'append' => true\n                    )\n                )\n            ),\n            'rootLogger' => array(\n                'appenders' => array('default'),\n                'level' => $level\n            )\n        );\n\n        return $option;\n    }\n\n    /**\n     * \u30ed\u30b0\u3092\u66f8\u304d\u51fa\u3059\n     * @param string $strLevel\n     * @param string $strMessage\n     */\n    static public function write($strLevel, $strMessage)\n    {\n        if ((defined('LOGGING') && !LOGGING)) {\n            return false;\n        }\n\n        self::$_logger = \\Logger::configure(self::getConfig());\n        self::$_logger = \\Logger::getLogger(self::PREFIX);\n\n        $strLevel = strtolower($strLevel);\n        if (method_exists(self::$_logger, $strLevel)) {\n            call_user_func_array(\n                array(self::$_logger, $strLevel)\n                , array(str_replace(\n                    array(PHP_EOL, \"\\t\")\n                    , \"\"\n                    , (is_array($strMessage) || is_object($strMessage)) ?\n                        serialize($strMessage) :\n                        $strMessage\n                ))\n            );\n        }\n    }\n\n    /**\n     * \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n     * @return array\n     */\n    static public function getLogFiles()\n    {\n        $arr = array();\n        $resDir = opendir(LOG_DIR);\n        while ($fileName = readdir($resDir)) {\n            if (\"..\" != $fileName && \".\" != $fileName) {\n                $arr[] = $fileName;\n            }\n        }\n        closedir($resDir);\n        sort($arr);\n        return $arr;\n    }\n\n    /**\n     * \u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308b\n     * @param string $file\n     * @param integer $line\n     * @param string $grep\n     * @return array\n     */\n    static public function getLog($file, $line = 100, $grep = \"\")\n    {\n        $res = null;\n        $match = null;\n\n        $path = LOG_DIR . \"/{$file}\";\n        $strCommand = \"grep '{$grep}' {$path} | tail -n {$line}\";\n        exec($strCommand, $res);\n\n        $arr = array();\n        $resArr = array_reverse($res);\n        foreach ($resArr as $log) {\n            preg_match('/(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)/i', $log, $match);\n            $arr[] = array(\n                'level' => (isset($match[0])) ? $match[0] : 'undefined'\n                , 'log' => $log\n            );\n        }\n        return $arr;\n    }\n\n}\n\n\n\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u30aa\u30ec\u30aa\u30ec\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4e00\u90e8\n\nlog4php \u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://logging.apache.org/log4php/\n\nlog4j \u3068\u304b log4net \u307f\u305f\u3044\u306b\u975e\u540c\u671f\u3067\u66f8\u304d\u51fa\u3057\u304c\u3067\u304d\u308c\u3070\u3044\u3044\u306e\u306b\u2026\n\n```php:Log.class.php\n<?php\n\nnamespace common;\n\n/**\n * Log\n */\nfinal class Log\n{\n\n\t/**\n\t * \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\n\t */\n\tconst PREFIX = 'Message: ';\n\n\t/**\n\t * Log4php \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\t * @var Object Log4phpObject\n\t */\n\tstatic private $_logger = null;\n\n\t/**\n\t * \u30ed\u30b0\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\n\t * @return array\n\t */\n\tstatic public function getConfig()\n\t{\n\t\tif (!file_exists(LOG_DIR)) {\n\t\t\tif (!mkdir(LOG_DIR, 0775, true)) {\n\t\t\t\tthrow new SystemErrorException(ExceptionCode::SYSTEM_LOGDIR_ERR);\n\t\t\t}\n\t\t}\n\t\t$objDate = new \\DateTime;\n\t\t$date = $objDate->format('Ymd');\n\t\t$log = LOG_DIR . \"/{$date}.log\";\n\n\t\tswitch (MODE) {\n\t\t\tcase DEVELOPPING:\n\t\t\t\t$level = 'trace';\n\t\t\t\tbreak;\n\t\t\tcase TEST:\n\t\t\t\t$level = 'trace';\n\t\t\t\tbreak;\n\t\t\tcase PRODUCTION:\n\t\t\t\t$level = 'info';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t$option = array(\n\t\t\t'appenders' => array(\n\t\t\t\t'default' => array(\n\t\t\t\t\t'class' => 'LoggerAppenderFile',\n\t\t\t\t\t'layout' => array(\n\t\t\t\t\t\t'class' => 'LoggerLayoutPattern',\n\t\t\t\t\t\t'conversionPattern' => '%date{Y-m-d H:i:s,u} %-5level %msg%n'\n\t\t\t\t\t),\n\t\t\t\t\t'params' => array(\n\t\t\t\t\t\t'file' => $log,\n\t\t\t\t\t\t'append' => true\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\t'rootLogger' => array(\n\t\t\t\t'appenders' => array('default'),\n\t\t\t\t'level' => $level\n\t\t\t)\n\t\t);\n\n\t\treturn $option;\n\t}\n\n\t/**\n\t * \u30ed\u30b0\u3092\u66f8\u304d\u51fa\u3059\n\t * @param string $strLevel\n\t * @param string $strMessage\n\t */\n\tstatic public function write($strLevel, $strMessage)\n\t{\n\t\tif ((defined('LOGGING') && !LOGGING)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tself::$_logger = \\Logger::configure(self::getConfig());\n\t\tself::$_logger = \\Logger::getLogger(self::PREFIX);\n\n\t\t$strLevel = strtolower($strLevel);\n\t\tif (method_exists(self::$_logger, $strLevel)) {\n\t\t\tcall_user_func_array(\n\t\t\t\tarray(self::$_logger, $strLevel)\n\t\t\t\t, array(str_replace(\n\t\t\t\t\tarray(PHP_EOL, \"\\t\")\n\t\t\t\t\t, \"\"\n\t\t\t\t\t, (is_array($strMessage) || is_object($strMessage)) ?\n\t\t\t\t\t\tserialize($strMessage) :\n\t\t\t\t\t\t$strMessage\n\t\t\t\t))\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n\t * @return array\n\t */\n\tstatic public function getLogFiles()\n\t{\n\t\t$arr = array();\n\t\t$resDir = opendir(LOG_DIR);\n\t\twhile ($fileName = readdir($resDir)) {\n\t\t\tif (\"..\" != $fileName && \".\" != $fileName) {\n\t\t\t\t$arr[] = $fileName;\n\t\t\t}\n\t\t}\n\t\tclosedir($resDir);\n\t\tsort($arr);\n\t\treturn $arr;\n\t}\n\n\t/**\n\t * \u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308b\n\t * @param string $file\n\t * @param integer $line\n\t * @param string $grep\n\t * @return array\n\t */\n\tstatic public function getLog($file, $line = 100, $grep = \"\")\n\t{\n\t\t$res = null;\n\t\t$match = null;\n\n\t\t$path = LOG_DIR . \"/{$file}\";\n\t\t$strCommand = \"grep '{$grep}' {$path} | tail -n {$line}\";\n\t\texec($strCommand, $res);\n\n\t\t$arr = array();\n\t\t$resArr = array_reverse($res);\n\t\tforeach ($resArr as $log) {\n\t\t\tpreg_match('/(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)/i', $log, $match);\n\t\t\t$arr[] = array(\n\t\t\t\t'level' => (isset($match[0])) ? $match[0] : 'undefined'\n\t\t\t\t, 'log' => $log\n\t\t\t);\n\t\t}\n\t\treturn $arr;\n\t}\n\n}\n\n```\n"}