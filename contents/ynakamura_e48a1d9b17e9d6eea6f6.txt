{"context": "7.12 \u30d6\u30e9\u30c3\u30af\u30b8\u30e3\u30c3\u30af \u5f79\u5224\u5b9a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid shuffle(int [][13]);\nvoid deal(int [][13], const char *[], const char *[]);\n\nint CheckOnePair(int []);\nint CheckTwoPair(int []);\nint CheckThreeCard(int []);\nint CheckFourCard(int []);\nint CheckFlush(int []);\nint CheckStraight(int []);\n\n// \u300c5\u679a\u300d\u306e\u30ab\u30fc\u30c9\u306e\u5f79\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\nint CheckPost(int [], int []);\n\nint main()\n{\n   const char *suit[4] = {\"\u30cf\u30fc\u30c8\", \"\u30c0\u30a4\u30a2\", \"\u30af\u30e9\u30d6\", \"\u30b9\u30da\u30fc\u30c9\"};\n   const char *face[13] = {\"\u30a8\u30fc\u30b9\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n                           \"9\", \"10\", \"\u30b8\u30e3\u30c3\u30af\", \"\u30af\u30a4\u30fc\u30f3\", \"\u30ad\u30f3\u30b0\"};\n   int deck[4][13] = {0};\n\n   srand(time(NULL));\n\n   shuffle(deck);\n   deal(deck, face, suit);\n\n   return 0;\n}\n\nvoid shuffle(int wDeck[][13])\n{\n   int card, row, column;\n\n   for (card = 1; card <= 52; card++)\n   {\n       row = rand() % 4;\n       column = rand() % 13;\n\n       while (wDeck[row][column] != 0)\n       {\n           row = rand() % 4;\n           column = rand() % 13;\n       }\n\n       wDeck[row][column] = card;\n   }\n}\n\nvoid deal(int wDeck[][13], const char *wFace[], const char *wSuit[])\n{\n   int card, row, column;\n   int next = 0;\n   int checkRow[5]; // 5\u679a\u76ee\u307e\u3067\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u3092\u9806\u306b\u8a18\u9332\u3059\u308b\u914d\u5217 1P\n   int checkCol[5]; // 5\u679a\u76ee\u307e\u3067\u306e\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u3092\u9806\u306b\u8a18\u9332\u3059\u308b\u914d\u5217 1P\n   int a;\n\n\n   for (card = 1; card <= 52; card++)\n   {\n       for (row = 0; row <= 3; row++)\n       {\n          for (column = 0; column <= 12; column++)\n          {\n              if (wDeck[row][column] == card)\n              {\n                 printf(\"%8s \u306e %-8s%c\", wSuit[row], wFace[column],\n                        card % 2 == 0 ? '\\n' : '\\t');\n\n                 // 5\u679a\u76ee\u307e\u3067\u306f1P\u7528\n                 if (next < 5)\n                 {\n                    checkRow[next] = row;\n                    checkCol[next] = column;\n                 }\n              }\n\n          }\n       }\n\n       // \u30ab\u30fc\u30c9\u30925\u679a\u914d\u3063\u305f\u6642\u70b9\u3067\u5224\u5b9a\n       if (card == 5)\n       {\n           a = CheckPost(checkRow, checkCol);\n       }\n   }\n\n   printf(\"%d\\n\", a);\n}\n\n// \u300c5\u679a\u300d\u306e\u30ab\u30fc\u30c9\u306e\u5f79\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// \u623b\u308a\u5024 6-1:\u5f79\u306e\u5f37\u3055 0:\u5f79\u304c\u3067\u304d\u3066\u306a\u3044\nint CheckPost(int checkRow[], int checkCol[])\n{\n           // \u30b9\u30c8\u30ec\u30fc\u30c8\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckStraight(checkCol) == 1)\n           {\n               return 6;\n           }\n\n           // \u30d5\u30e9\u30c3\u30b7\u30e5\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckFlush(checkRow) == 1)\n           {\n               return 5;\n           }\n\n           // \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckFourCard(checkCol) == 1)\n           {\n               return 4;\n           }\n\n           // \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckThreeCard(checkCol) == 1)\n           {\n               return 3;\n           }\n\n           // \u30c4\u30fc\u30da\u30a2\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckTwoPair(checkCol) == 1)\n           {\n               return 2;\n           }\n\n            // \u30ef\u30f3\u30da\u30a2\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckOnePair(checkCol) == 1)\n           {\n               return 1;\n           }  \n\n           // \u5f79\u304c\u305d\u308d\u3063\u3066\u306a\u3044\u306a\u3089\u3070\n           return 0;\n}\n\n\n\n// \u30ef\u30f3\u30da\u30a2\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckOnePair(int checkCol[])\n{\n   int i, j;\n\n    int n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 1)\n    {\n        return 1;\n    }\n   // \u540c\u3058\u6570\u5b57\u306e\u30ab\u30fc\u30c9\u304c2\u679a\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\n   return 0;\n}\n\n// \u30c4\u30fc\u30da\u30a2\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckTwoPair(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 2)\n    {\n        return 1;\n    }\n\n    // \u30c4\u30fc\u30da\u30a2\u3067\u306f\u306a\u3044\n    return 0;\n}\n\n\n// \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckThreeCard(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 3)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n// \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckFourCard(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 6)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n// \u30d5\u30e9\u30c3\u30b7\u30e5\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u3042\u308b 0:\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u306a\u3044\nint CheckFlush(int checkRow[])\n{\n    int i;\n    int type;\n\n    // \u6700\u521d\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u3092\u8a18\u9332\n    type = checkRow[0];\n\n    for (i = 1; i < 5; i++)\n    {\n        // \u7570\u306a\u308b\u30ab\u30fc\u30c9\u306e\u67c4\u304c\u898b\u3064\u304b\u3063\u305f\u306a\u3089\u3070\n        if (checkRow[i] != type)\n        {\n            return 0;\n        }\n    }\n\n    // \u3053\u3053\u307e\u3067\u304f\u308b\u306e\u306f\u5168\u3066\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u304c\u540c\u3058\u5834\u5408\u3067\u3042\u308b\n    return 1;\n}\n\n// \u30b9\u30c8\u30ec\u30fc\u30c8\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u30b9\u30c8\u30ec\u30fc\u30c8\u3067\u3042\u308b 0:\u30b9\u30c8\u30ec\u30fc\u30c8\u3067\u306a\u3044\nint CheckStraight(int checkCol[])\n{\n    int i;\n    int count;\n    int tmp;\n\n    // \u6607\u9806\u306b\u30bd\u30fc\u30c8\n    for (count = 1; count <= 4; count++)\n    {\n        for (i = 0; i < 4; i++)\n        {\n            if (checkCol[i] > checkCol[i + 1])\n            {\n               tmp = checkCol[i];\n               checkCol[i] = checkCol[i + 1];\n               checkCol[i + 1] = tmp;\n            }\n        }\n    }\n\n    for (i = 0; i < 4; i++)\n    {\n        if (checkCol[i] + 1 != checkCol[i + 1])\n        {\n            return 0;\n        }\n    }\n\n    // \u3053\u3053\u307e\u3067\u304f\u308b\u306e\u306f\u5168\u3066\u306e\u30ab\u30fc\u30c9\u304c\u9023\u7d9a\u306a\u5834\u5408\u3067\u3042\u308b\n    return 1;\n}\n\n\u30dd\u30fc\u30bf\u30eb\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\nhttp://qiita.com/ynakamura/items/84efeab3c6267ce7ac67\n7.12 \u30d6\u30e9\u30c3\u30af\u30b8\u30e3\u30c3\u30af \u5f79\u5224\u5b9a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid shuffle(int [][13]);\nvoid deal(int [][13], const char *[], const char *[]);\n\nint CheckOnePair(int []);\nint CheckTwoPair(int []);\nint CheckThreeCard(int []);\nint CheckFourCard(int []);\nint CheckFlush(int []);\nint CheckStraight(int []);\n\n// \u300c5\u679a\u300d\u306e\u30ab\u30fc\u30c9\u306e\u5f79\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\nint CheckPost(int [], int []);\n\nint main()\n{\n   const char *suit[4] = {\"\u30cf\u30fc\u30c8\", \"\u30c0\u30a4\u30a2\", \"\u30af\u30e9\u30d6\", \"\u30b9\u30da\u30fc\u30c9\"};\n   const char *face[13] = {\"\u30a8\u30fc\u30b9\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n                           \"9\", \"10\", \"\u30b8\u30e3\u30c3\u30af\", \"\u30af\u30a4\u30fc\u30f3\", \"\u30ad\u30f3\u30b0\"};\n   int deck[4][13] = {0};\n\n   srand(time(NULL));\n   \n   shuffle(deck);\n   deal(deck, face, suit);\n\n   return 0;\n}\n\nvoid shuffle(int wDeck[][13])\n{\n   int card, row, column;\n\n   for (card = 1; card <= 52; card++)\n   {\n       row = rand() % 4;\n       column = rand() % 13;\n\n       while (wDeck[row][column] != 0)\n       {\n           row = rand() % 4;\n           column = rand() % 13;\n       }\n \n       wDeck[row][column] = card;\n   }\n}\n\nvoid deal(int wDeck[][13], const char *wFace[], const char *wSuit[])\n{\n   int card, row, column;\n   int next = 0;\n   int checkRow[5]; // 5\u679a\u76ee\u307e\u3067\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u3092\u9806\u306b\u8a18\u9332\u3059\u308b\u914d\u5217 1P\n   int checkCol[5]; // 5\u679a\u76ee\u307e\u3067\u306e\u30ab\u30fc\u30c9\u306e\u6570\u5b57\u3092\u9806\u306b\u8a18\u9332\u3059\u308b\u914d\u5217 1P\n   int a;\n\n  \n   for (card = 1; card <= 52; card++)\n   {\n       for (row = 0; row <= 3; row++)\n       {\n          for (column = 0; column <= 12; column++)\n          {\n              if (wDeck[row][column] == card)\n              {\n                 printf(\"%8s \u306e %-8s%c\", wSuit[row], wFace[column],\n                        card % 2 == 0 ? '\\n' : '\\t');\n\n                 // 5\u679a\u76ee\u307e\u3067\u306f1P\u7528\n                 if (next < 5)\n                 {\n                    checkRow[next] = row;\n                    checkCol[next] = column;\n                 }\n              }\n\n          }\n       }\n\n       // \u30ab\u30fc\u30c9\u30925\u679a\u914d\u3063\u305f\u6642\u70b9\u3067\u5224\u5b9a\n       if (card == 5)\n       {\n           a = CheckPost(checkRow, checkCol);\n       }\n   }\n     \n   printf(\"%d\\n\", a);\n}\n\n// \u300c5\u679a\u300d\u306e\u30ab\u30fc\u30c9\u306e\u5f79\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// \u623b\u308a\u5024 6-1:\u5f79\u306e\u5f37\u3055 0:\u5f79\u304c\u3067\u304d\u3066\u306a\u3044\nint CheckPost(int checkRow[], int checkCol[])\n{\n           // \u30b9\u30c8\u30ec\u30fc\u30c8\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckStraight(checkCol) == 1)\n           {\n               return 6;\n           }\n\n           // \u30d5\u30e9\u30c3\u30b7\u30e5\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckFlush(checkRow) == 1)\n           {\n               return 5;\n           }\n\n           // \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckFourCard(checkCol) == 1)\n           {\n               return 4;\n           }\n\n           // \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckThreeCard(checkCol) == 1)\n           {\n               return 3;\n           }\n\n           // \u30c4\u30fc\u30da\u30a2\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckTwoPair(checkCol) == 1)\n           {\n               return 2;\n           }\n\n            // \u30ef\u30f3\u30da\u30a2\u304c\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\n           if (CheckOnePair(checkCol) == 1)\n           {\n               return 1;\n           }  \n \n           // \u5f79\u304c\u305d\u308d\u3063\u3066\u306a\u3044\u306a\u3089\u3070\n           return 0;\n}\n\n\n\n// \u30ef\u30f3\u30da\u30a2\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckOnePair(int checkCol[])\n{\n   int i, j;\n\n    int n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 1)\n    {\n        return 1;\n    }\n   // \u540c\u3058\u6570\u5b57\u306e\u30ab\u30fc\u30c9\u304c2\u679a\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\n   return 0;\n}\n\n// \u30c4\u30fc\u30da\u30a2\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckTwoPair(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 2)\n    {\n        return 1;\n    }\n  \n    // \u30c4\u30fc\u30da\u30a2\u3067\u306f\u306a\u3044\n    return 0;\n}\n\n\n// \u30b9\u30ea\u30fc\u30ab\u30fc\u30c9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckThreeCard(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 3)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n// \u30d5\u30a9\u30fc\u30ab\u30fc\u30c9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u542b\u3093\u3067\u3044\u308b 0:\u542b\u3093\u3067\u3044\u306a\u3044\nint CheckFourCard(int checkCol[])\n{\n    int i, j;\n    int n;\n\n    n = 0;\n\n    for (i = 0; i < 4; i++)\n    {\n        for (j = i + 1; j < 5; j++)\n        {\n            if (checkCol[i] == checkCol[j])\n            {\n                n++;\n            }\n        }\n    }\n\n    if (n == 6)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n// \u30d5\u30e9\u30c3\u30b7\u30e5\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u3042\u308b 0:\u30d5\u30e9\u30c3\u30b7\u30e5\u3067\u306a\u3044\nint CheckFlush(int checkRow[])\n{\n    int i;\n    int type;\n\n    // \u6700\u521d\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u3092\u8a18\u9332\n    type = checkRow[0];\n\n    for (i = 1; i < 5; i++)\n    {\n        // \u7570\u306a\u308b\u30ab\u30fc\u30c9\u306e\u67c4\u304c\u898b\u3064\u304b\u3063\u305f\u306a\u3089\u3070\n        if (checkRow[i] != type)\n        {\n            return 0;\n        }\n    }\n\n    // \u3053\u3053\u307e\u3067\u304f\u308b\u306e\u306f\u5168\u3066\u306e\u30ab\u30fc\u30c9\u306e\u67c4\u304c\u540c\u3058\u5834\u5408\u3067\u3042\u308b\n    return 1;\n}\n\n// \u30b9\u30c8\u30ec\u30fc\u30c8\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n// 1:\u30b9\u30c8\u30ec\u30fc\u30c8\u3067\u3042\u308b 0:\u30b9\u30c8\u30ec\u30fc\u30c8\u3067\u306a\u3044\nint CheckStraight(int checkCol[])\n{\n    int i;\n    int count;\n    int tmp;\n\n    // \u6607\u9806\u306b\u30bd\u30fc\u30c8\n    for (count = 1; count <= 4; count++)\n    {\n        for (i = 0; i < 4; i++)\n        {\n            if (checkCol[i] > checkCol[i + 1])\n            {\n               tmp = checkCol[i];\n               checkCol[i] = checkCol[i + 1];\n               checkCol[i + 1] = tmp;\n            }\n        }\n    }\n\n    for (i = 0; i < 4; i++)\n    {\n        if (checkCol[i] + 1 != checkCol[i + 1])\n        {\n            return 0;\n        }\n    }\n\n    // \u3053\u3053\u307e\u3067\u304f\u308b\u306e\u306f\u5168\u3066\u306e\u30ab\u30fc\u30c9\u304c\u9023\u7d9a\u306a\u5834\u5408\u3067\u3042\u308b\n    return 1;\n}\n```\n\n\u30dd\u30fc\u30bf\u30eb\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\nhttp://qiita.com/ynakamura/items/84efeab3c6267ce7ac67\n", "tags": ["C\u8a00\u8a9e", "\u30c0\u30a4\u30c6\u30ebC", "\u30ab\u30fc\u30c9\u30b2\u30fc\u30e0"]}