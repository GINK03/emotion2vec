{"tags": ["C++11", "C++"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3082\u305d\u3082getter/setter\u3081\u3093\u3069\u3044\u3060\u3051\u3058\u3083\u306d\u3068\u304b\u8a2d\u8a08\u7684\u306b\u3044\u3089\u306a\u304f\u306d\u3001\u3068\u304b\u306f\u306a\u3057\u3067\u3002\n\nMove Semantics\u306e\u6069\u6075\u306b\u4e0e\u308b\u3053\u3068\u304c\u3067\u304d\u308bsetter\n\u3059\u3067\u306b\u77e5\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3060\u304c\u3001setter\u3068\u8a00\u3046\u306e\u306fmove\u3068copy\u4e21\u65b9\u3092\u96c6\u7d04\u3057\u3066\u66f8\u3044\u3066\u3082\u69cb\u308f\u306a\u3044(\u4e8b\u304c\u591a\u3044)\u3002\n\nsetter.cpp\nclass Foo {\n    std::string value;\npublic:\n    Foo() = default;\n    ~Foo() = default;\n    void setValue(std::string value_) {\n        value = std::move(value_); // value_\u306f\u81ea\u660e\u306bmove\u3057\u3066\u3044\u3044\n    }\n};\n\nint main(){\n    Foo f;\n    std::string x = \"test1\";\n    f.setValue(x); // \u5f15\u6570\u306bcopy\u3055\u308c\u3066\u6e21\u308b.\n    x = \"test2\";\n    f.setValue(std::move(x)); // \u5f15\u6570\u306bmove\u3055\u308c\u3066\u6e21\u308b.\n    return 0;\n}\n\n\n\u3053\u306e\u5834\u5408sizeof(std::string)\u304c\u5927\u304d\u3044\u6642\u306b\u306f\u3053\u306e\u624b\u3092\u4f7f\u3046\u306e\u306f\u60aa\u624b\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001\u3060\u3044\u305f\u3044\u30dd\u30a4\u30f3\u30bf2\u3064\u304f\u3089\u3044\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u5927\u3057\u305f\u3053\u3068\u306a\u3044\u3002\n\nrvalue reference for *this\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044getter\n\u4e00\u65b9getter\u306f\u305d\u3046\u7c21\u5358\u306b\u306f\u884c\u304b\u306a\u3044\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307b\u3057\u3044\u3002\n\ngetter.cpp\n#include <cassert>\n#include <iostream>\n#include <string>\n\nenum class GetterMode {\n    LVALUE,\n    RVALUE,\n    CONST_LVALUE,\n};\n\nGetterMode mode;\n\nclass Foo {\n    std::string value;\npublic:\n    Foo(std::string value): value(value) {}\n    ~Foo() = default;\n    std::string& getValue() { mode = GetterMode::LVALUE; return value; }\n    const std::string& getValue() const { mode = GetterMode::CONST_LVALUE; return value; }\n};\n\nint main() {\n    Foo x(\"xxx\");\n    const Foo y(\"yyy\");\n    x.getValue(); // \u901a\u5e38\u306egetValue\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    y.getValue(); // const lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    Foo(\"zzz\").getValue(); // lvaue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    std::string p = Foo(\"zzz\").getValue(); // lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    std::string r = std::move(Foo(\"zzz\").getValue()); // lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    x.getValue() = \"aaa\"; // getter\u306a\u306e\u306b\u4ee3\u5165\u3067\u304d\u3061\u3083\u3046\n}\n\n\n\u898b\u3066\u306e\u901a\u308a\u591a\u304f\u306e\u554f\u984c\u70b9\u304c\u3042\u308b\u3002\n\nlvalue\u306e\u53c2\u7167\u3092\u8fd4\u3059getter\u3068\u8a00\u3046\u306e\u306f\u305d\u306e\u53c2\u7167\u3092\u4f7f\u3063\u3066\u8ab0\u304b\u306b\u5024\u3092\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\u3064\u307e\u308a\u5b9f\u306e\u3068\u3053\u308dgetter\u3092\u4f5c\u3063\u305f\u3064\u3082\u308a\u304csetter\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u3002operator*()\u3068\u304b\u306f\u305d\u308c\u3067\u3044\u3044\u3093\u3060\u3051\u3069getter\u3068\u3057\u3066\u306f\u3060\u3081\u3002\n\nFoo(\"zoo\").getValue()\u306e\u3088\u3046\u306arvalue\u306b\u5bfe\u3057\u3066getter\u3092\u8aad\u3093\u3060\u5834\u5408\u3082\u51fa\u3066\u304f\u308b\u3082\u306e\u304cstd::string&\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u4ee3\u5165\u3059\u308b\u3068\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u3002\u305d\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u5168\u4f53\u3092move\u3057\u3066std::move(Foo(\"zoo\").getValue())\u306e\u3088\u3046\u306b\u3057\u3066\u3084\u3089\u306a\u3044\u3068\u3060\u3081\u3067\u76f4\u89b3\u7684\u3067\u306a\u3044\n\n\u3053\u3046\u3044\u3046\u6642\u306f\u6b21\u306e\u3088\u3046\u306b*this\u306b\u5bfe\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n\ngetter2.cpp\n#include <cassert>\n#include <iostream>\n#include <string>\n\nenum class GetterMode {\n    LVALUE,\n    RVALUE,\n    CONST_LVALUE,\n};\n\nGetterMode mode;\n\nclass Foo {\n    std::string value;\npublic:\n    explicit Foo(std::string value): value(value) {}\n\n    std::string&& getValue() && { mode = GetterMode::RVALUE; return std::move(value); }\n    const std::string& getValue() const& { mode = GetterMode::CONST_LVALUE; return value; }\n    // volatile\u4fee\u98fe\u306f\u7701\u7565\n};\n\nint main() {\n    Foo x(\"xxx\");\n    const Foo y(\"yyy\");\n    x.getValue(); // const lvalue\u7248\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    y.getValue(); // const lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    Foo(\"zzz\").getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    std::string p = Foo(\"zzz\").getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    std::string q = std::move(x).getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    // x.getValue() = \"aaa\"; // \u30a8\u30e9\u30fc\uff01\n    static_assert(std::is_same<decltype(x.getValue()), const std::string&>::value, \"x.getValue() should return const lvalue reference\");\n    static_assert(std::is_same<decltype(std::move(x).getValue()), std::string&&>::value, \"std::move(x).getValue() should return rvalue reference\");\n    static_assert(std::is_same<decltype(Foo(\"zoo\").getValue()), std::string&&>::value, \"Foo(\\\"zoo\\\").getValue() should return rvalue reference\");\n    return 0;\n}\n\n\n\u3053\u308c\u3067\u7121\u4e8b\u306blvalue\u306egetter\u306fconst lvalue reference\u306b\u3001rvalue\u306egetter\u306frvalue reference\u306b\u306a\u3063\u305f\u3002\u3053\u3053\u307e\u3067\u3059\u308b\u306e\u9762\u5012\u306a\u3093\u3067\u30e1\u30f3\u30d0\u30a2\u30af\u30bb\u30b9foo.value\u3067\u6e08\u3080\u306a\u3089\u6e08\u307e\u305b\u305f\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u6ce8\u610f\u70b9\n\u307e\u305a\u3072\u3068\u3064\u3001\u666e\u901a\u306econst\u30e1\u30bd\u30c3\u30c9\u306egetValue\u306e\u65b9\u306b\u3082const&\u3068\u66f8\u3044\u3066 \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306flvalue this\u5c02\u7528\u3067\u3059 \u3068\u3044\u3046\u3053\u3068\u3092\u660e\u793a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\u3042\u3068\u3001rvalue reference to *this\u3068\u8a00\u3046\u306e\u306fgcc\u3067\u306f\u3059\u3054\u304f\u6700\u8fd1\u5b9f\u88c5\u3055\u308c\u305f\u6a5f\u80fd\u3067\u3059\u3002\n\nhttp://gcc.gnu.org/projects/cxx0x.html\n\n\n\nLanguage Feature\nC++11 Proposal\nAvailable in GCC?\n\n\n\n\nRvalue references for *this\nN2439\nGCC 4.8.1\n\n\n\n\nclang\u306f\u65e9\u304b\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u304c\u3002\n\nhttp://clang.llvm.org/cxx_status.html\n\n\n\nLanguage Feature\nC++11 Proposal\nAvailable in Clang?\n\n\n\n\nRvalue references for *this\nN2439\nClang 2.9\n\n\n\n\n\u306a\u306e\u3067\u3001gcc\u4f7f\u3063\u3066\u308b\u3068\u307e\u3060\u307e\u3060\u4f7f\u3048\u306a\u3044\u4e8b\u304c\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8ffd\u8a18 (2014-06-10)\n\u6dfb\u4ed8\u306e\u30bd\u30fc\u30b9\u304c\u5618\u30bd\u30fc\u30b9\u3060\u3063\u305f\u306e\u3067\u4fee\u6b63\n\n\u305d\u3082\u305d\u3082getter/setter\u3081\u3093\u3069\u3044\u3060\u3051\u3058\u3083\u306d\u3068\u304b\u8a2d\u8a08\u7684\u306b\u3044\u3089\u306a\u304f\u306d\u3001\u3068\u304b\u306f\u306a\u3057\u3067\u3002\n\n## Move Semantics\u306e\u6069\u6075\u306b\u4e0e\u308b\u3053\u3068\u304c\u3067\u304d\u308bsetter\n\n\u3059\u3067\u306b\u77e5\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3060\u304c\u3001setter\u3068\u8a00\u3046\u306e\u306fmove\u3068copy\u4e21\u65b9\u3092\u96c6\u7d04\u3057\u3066\u66f8\u3044\u3066\u3082\u69cb\u308f\u306a\u3044(\u4e8b\u304c\u591a\u3044)\u3002\n\n```setter.cpp\nclass Foo {\n\tstd::string value;\npublic:\n\tFoo() = default;\n\t~Foo() = default;\n\tvoid setValue(std::string value_) {\n\t\tvalue = std::move(value_); // value_\u306f\u81ea\u660e\u306bmove\u3057\u3066\u3044\u3044\n\t}\n};\n\nint main(){\n\tFoo f;\n\tstd::string x = \"test1\";\n\tf.setValue(x); // \u5f15\u6570\u306bcopy\u3055\u308c\u3066\u6e21\u308b.\n\tx = \"test2\";\n\tf.setValue(std::move(x)); // \u5f15\u6570\u306bmove\u3055\u308c\u3066\u6e21\u308b.\n\treturn 0;\n}\n```\n\n\u3053\u306e\u5834\u5408`sizeof(std::string)`\u304c\u5927\u304d\u3044\u6642\u306b\u306f\u3053\u306e\u624b\u3092\u4f7f\u3046\u306e\u306f\u60aa\u624b\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001\u3060\u3044\u305f\u3044\u30dd\u30a4\u30f3\u30bf2\u3064\u304f\u3089\u3044\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u5927\u3057\u305f\u3053\u3068\u306a\u3044\u3002\n\n## rvalue reference for *this\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044getter\n\n\u4e00\u65b9getter\u306f\u305d\u3046\u7c21\u5358\u306b\u306f\u884c\u304b\u306a\u3044\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307b\u3057\u3044\u3002\n\n```getter.cpp\n#include <cassert>\n#include <iostream>\n#include <string>\n\nenum class GetterMode {\n    LVALUE,\n    RVALUE,\n    CONST_LVALUE,\n};\n\nGetterMode mode;\n\nclass Foo {\n    std::string value;\npublic:\n    Foo(std::string value): value(value) {}\n    ~Foo() = default;\n    std::string& getValue() { mode = GetterMode::LVALUE; return value; }\n    const std::string& getValue() const { mode = GetterMode::CONST_LVALUE; return value; }\n};\n\nint main() {\n    Foo x(\"xxx\");\n    const Foo y(\"yyy\");\n    x.getValue(); // \u901a\u5e38\u306egetValue\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    y.getValue(); // const lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    Foo(\"zzz\").getValue(); // lvaue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    std::string p = Foo(\"zzz\").getValue(); // lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    std::string r = std::move(Foo(\"zzz\").getValue()); // lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::LVALUE);\n    x.getValue() = \"aaa\"; // getter\u306a\u306e\u306b\u4ee3\u5165\u3067\u304d\u3061\u3083\u3046\n}\n```\n\n\u898b\u3066\u306e\u901a\u308a\u591a\u304f\u306e\u554f\u984c\u70b9\u304c\u3042\u308b\u3002\n\n* lvalue\u306e\u53c2\u7167\u3092\u8fd4\u3059getter\u3068\u8a00\u3046\u306e\u306f\u305d\u306e\u53c2\u7167\u3092\u4f7f\u3063\u3066\u8ab0\u304b\u306b\u5024\u3092\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u3002\u3064\u307e\u308a\u5b9f\u306e\u3068\u3053\u308dgetter\u3092\u4f5c\u3063\u305f\u3064\u3082\u308a\u304csetter\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u3002`operator*()`\u3068\u304b\u306f\u305d\u308c\u3067\u3044\u3044\u3093\u3060\u3051\u3069getter\u3068\u3057\u3066\u306f\u3060\u3081\u3002\n* `Foo(\"zoo\").getValue()`\u306e\u3088\u3046\u306arvalue\u306b\u5bfe\u3057\u3066getter\u3092\u8aad\u3093\u3060\u5834\u5408\u3082\u51fa\u3066\u304f\u308b\u3082\u306e\u304c`std::string&`\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u4ee3\u5165\u3059\u308b\u3068\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u3002\u305d\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u5168\u4f53\u3092move\u3057\u3066`std::move(Foo(\"zoo\").getValue())`\u306e\u3088\u3046\u306b\u3057\u3066\u3084\u3089\u306a\u3044\u3068\u3060\u3081\u3067\u76f4\u89b3\u7684\u3067\u306a\u3044\n\n\u3053\u3046\u3044\u3046\u6642\u306f\u6b21\u306e\u3088\u3046\u306b*this\u306b\u5bfe\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n\n```getter2.cpp\n#include <cassert>\n#include <iostream>\n#include <string>\n\nenum class GetterMode {\n    LVALUE,\n    RVALUE,\n    CONST_LVALUE,\n};\n\nGetterMode mode;\n\nclass Foo {\n    std::string value;\npublic:\n    explicit Foo(std::string value): value(value) {}\n\n    std::string&& getValue() && { mode = GetterMode::RVALUE; return std::move(value); }\n    const std::string& getValue() const& { mode = GetterMode::CONST_LVALUE; return value; }\n    // volatile\u4fee\u98fe\u306f\u7701\u7565\n};\n\nint main() {\n    Foo x(\"xxx\");\n    const Foo y(\"yyy\");\n    x.getValue(); // const lvalue\u7248\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    y.getValue(); // const lvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::CONST_LVALUE);\n    Foo(\"zzz\").getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    std::string p = Foo(\"zzz\").getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    std::string q = std::move(x).getValue(); // rvalue\u7248\u304c\u547c\u3070\u308c\u308b\n    assert(mode == GetterMode::RVALUE);\n    // x.getValue() = \"aaa\"; // \u30a8\u30e9\u30fc\uff01\n    static_assert(std::is_same<decltype(x.getValue()), const std::string&>::value, \"x.getValue() should return const lvalue reference\");\n    static_assert(std::is_same<decltype(std::move(x).getValue()), std::string&&>::value, \"std::move(x).getValue() should return rvalue reference\");\n    static_assert(std::is_same<decltype(Foo(\"zoo\").getValue()), std::string&&>::value, \"Foo(\\\"zoo\\\").getValue() should return rvalue reference\");\n    return 0;\n}\n```\n\n\u3053\u308c\u3067\u7121\u4e8b\u306blvalue\u306egetter\u306fconst lvalue reference\u306b\u3001rvalue\u306egetter\u306frvalue reference\u306b\u306a\u3063\u305f\u3002\u3053\u3053\u307e\u3067\u3059\u308b\u306e\u9762\u5012\u306a\u3093\u3067\u30e1\u30f3\u30d0\u30a2\u30af\u30bb\u30b9`foo.value`\u3067\u6e08\u3080\u306a\u3089\u6e08\u307e\u305b\u305f\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\n### \u6ce8\u610f\u70b9\n\n\u307e\u305a\u3072\u3068\u3064\u3001\u666e\u901a\u306econst\u30e1\u30bd\u30c3\u30c9\u306egetValue\u306e\u65b9\u306b\u3082`const&`\u3068\u66f8\u3044\u3066 **\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f`lvalue this`\u5c02\u7528\u3067\u3059** \u3068\u3044\u3046\u3053\u3068\u3092\u660e\u793a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n\u3042\u3068\u3001rvalue reference to *this\u3068\u8a00\u3046\u306e\u306fgcc\u3067\u306f\u3059\u3054\u304f\u6700\u8fd1\u5b9f\u88c5\u3055\u308c\u305f\u6a5f\u80fd\u3067\u3059\u3002\n\n> http://gcc.gnu.org/projects/cxx0x.html\n>\n> | Language Feature | C++11 Proposal | Available in GCC? |\n> |-----|------|-----|\n> | Rvalue references for *this | N2439 | GCC 4.8.1 |\n\nclang\u306f\u65e9\u304b\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u304c\u3002\n\n> http://clang.llvm.org/cxx_status.html\n>\n> | Language Feature | C++11 Proposal | Available in Clang? |\n> |-----|------|-----|\n> | Rvalue references for *this | N2439 | Clang 2.9 |\n\n\u306a\u306e\u3067\u3001gcc\u4f7f\u3063\u3066\u308b\u3068\u307e\u3060\u307e\u3060\u4f7f\u3048\u306a\u3044\u4e8b\u304c\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### \u8ffd\u8a18 (2014-06-10)\n\u6dfb\u4ed8\u306e\u30bd\u30fc\u30b9\u304c\u5618\u30bd\u30fc\u30b9\u3060\u3063\u305f\u306e\u3067\u4fee\u6b63\n"}