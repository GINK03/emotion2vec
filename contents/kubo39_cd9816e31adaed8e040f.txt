{"context": "\n\n\u6b74\u53f2\n\n\u6614\u306f\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u5b9f\u88c5\u306bsegment stack\u3092\u4f7f\u3063\u3066\u3044\u305f(libgreen\u3092\u540c\u68b1)\n1.0\u306a\u308b\u524d\u306b\u3084\u3081\u305f\nlibgreen\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u5206\u96e2 (\u3057\u304b\u3057\u30e1\u30f3\u30c6\u3055\u308c\u305a...)\n\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\nlibgreen\u4ee5\u964d\u306b\u5b9f\u88c5\u304c\u3044\u304f\u3064\u304b\n\ncontext-rs/coroutine-rs\nlibfringe\n\n\n\ncontext-rs/coroutine-rs\n\n\u3069\u3061\u3089\u3082zonyitoo\u3055\u3093\u304c\u66f8\u304b\u308c\u305f\u3082\u306e\nBoost.{Context,Coroutine}\u306e\u79fb\u690d\n\n\n\nlibfringe\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3088\u3044\u3089\u3057\u3044\n\n\n\u306a\u3093\u3067\u304b\u3088\u304f\u308f\u304b\u3089\u3093\u3001\u3001XMM\u3042\u305f\u308a\u3082\u4fdd\u5b58\u30ec\u30b8\u30b9\u30bf\u6307\u5b9a\u5165\u3063\u3068\u308b\u3057...\n\u5206\u5c90\u4e88\u6e2c\u30df\u30b9\u56de\u907f\u306e\u305f\u3081\u306b ret \u3067\u306a\u304f jmp+pop \u306b\u3057\u3066\u308b\u3068\u304b\u306f\u3042\u3063\u305f\n\n\nprimitive\u306acontext-rs\u76f8\u5f53\u3068Generator\u306e\u3088\u3046\u306a\u3044\u3044\u304b\u3093\u3058\u306e\u3084\u3064\n\n\n\nlibfringe (Cont.)\n\nGenerator\u306e\u5b9f\u88c5 (README\u306e\u3084\u3064)\n\nextern crate fringe;\n\nuse fringe::{OsStack, Generator};\n\nfn main() {\n  let stack = OsStack::new(1 << 16).unwrap();\n  let mut gen = Generator::new(stack, move |yielder, ()| {\n    for i in 1..4 { yielder.suspend(i) }\n  });\n\n  println!(\"{:?}\", gen.resume(())); // Some(1)\n  println!(\"{:?}\", gen.resume(())); // Some(2)\n  println!(\"{:?}\", gen.resume(())); // Some(3)\n  println!(\"{:?}\", gen.resume(())); // None\n}\n\n\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u4f7f\u3044\u3069\u3053\u308d\n\n\u3088\u304f\u3042\u308b\u306e\u304c\u975e\u540c\u671fI/O\u3068\u5408\u308f\u305b\u3066\u4f7f\u3046\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306fRuss Cox\u306elibtask?\n\n\n\u3082\u3063\u3068\u524d\u304b\u3089\u3042\u308a\u305d\u3046\n\n\n\n\n\n\u975e\u540c\u671fI/O\n\nhigh performace\u306a\u30b5\u30fc\u30d0\u3092\u66f8\u304f\u306e\u306b\u5fc5\u9808\n\u30b3\u30eb\u30fc\u30c1\u30f3\u3067I/O\u5f85\u3061\u3092\u6e1b\u3089\u3057\u305f\u3044\n\n\nEWOULDBLOCK/EAGAIN\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u5207\u308a\u66ff\u3048\n\n\n\n\n\nRust\u3068\u975e\u540c\u671fI/O\n\nmio(epoll/kqueue\u3068\u304b\u306e\u8584\u3044\u62bd\u8c61\u5316\u30ec\u30a4\u30e4)\u304c\u30c7\u30d5\u30a1\u30af\u30c8\n\u6700\u8fd1mio\u306e\u4e0a\u306btokio-rs/futures\u306a\u3069\u306a\u3093\u304b\u30a4\u30b1\u3066\u308b\u3084\u3064\u304c\u306e\u3063\u3066\u308b\n\n\n\nmioco (mio + coroutine-rs)\n\n\u4e00\u756astar\u591a\u3044\u3057\u305f\u3076\u3093\u306a\u3093\u304b\u3059\u3054\u3044, zmq-rs\u3068\u304b\u3067\u4f7f\u308f\u308c\u3066\u308b\n\n\ncoio-rs (mio + coroutine-rs)\n\n\u5185\u90e8\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306bChase-Lev's deque\u4f7f\u3063\u3066\u308b, flowgger\u3068\u3044\u3046fluentd-like\u306a\u3084\u3064\u3067\u4f7f\u308f\u308c\u3066\u308b\n\n\n\nmioco\u3092\u4f8b\u306b\nmioco::start(|| -> io::Result<()> {\n        let listener = try!(TcpListener::bind(&addr));\n        loop {\n            let mut conn = try!(listener.accept());\n            mioco::spawn(move || -> io::Result<()> {\n                let mut buf = [0u8; 1024 * 16];\n                loop {\n                    let size = try!(conn.read(&mut buf));\n                    if size == 0 {/* eof */ break; }\n                    let _ = try!(conn.write_all(&mut buf[0..size]));\n                }\n                Ok(())\n            });\n        }\n    }).unwrap().unwrap();\n\n\n\nmioco (Cont.)\n\nmioco::spawn\u3067\u8efd\u91cf\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u304b\u3089\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u767b\u9332\u307e\u3067\n\u30d1\u30c3\u3068\u898b\u306f\u30d6\u30ed\u30c3\u30af\u3057\u305d\u3046\u3060\u3051\u3069\u3046\u307e\u304f\u52d5\u304f\u3089\u3057\u3044\n\u8907\u6570OS\u30b9\u30ec\u30c3\u30c9\u306e\u4f8b\u3082example\u306b\u3042\u3063\u305f(\u5404OS\u30b9\u30ec\u30c3\u30c9\u304cacceptor\u3092\u6301\u3064\u5f62)\n\n\nRust\u306a\u306e\u3067\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u62e1\u5f35\u3082\u5bb9\u6613\uff1f\n\u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306beventloop\u3082\u3064\u3063\u307d\u3044\n\n\n\n\n\n\u307e\u3068\u3081 (\u307e\u3068\u307e\u3063\u3066\u3044\u306a\u3044)\n\n\u975e\u540c\u671fI/O+\u30b3\u30eb\u30fc\u30c1\u30f3\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307d\u3064\u307d\u3064\u51fa\u3066\u304d\u305f\nhigh performace\u306a\u9bd6\u66f8\u304f\u305f\u3081\u306e\u90e8\u54c1\u304c\u63c3\u3063\u3066\u304d\u305f\u611f\u3042\u308b\n\u4f7f\u3063\u3066\u3044\u304d\u305f\u307f\u304c\u9ad8\u307e\u3063\u3066\u3044\u308b\n\n# \u6b74\u53f2\n\n- \u6614\u306f\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u5b9f\u88c5\u306bsegment stack\u3092\u4f7f\u3063\u3066\u3044\u305f(libgreen\u3092\u540c\u68b1)\n- 1.0\u306a\u308b\u524d\u306b\u3084\u3081\u305f\n- libgreen\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u5206\u96e2 (\u3057\u304b\u3057\u30e1\u30f3\u30c6\u3055\u308c\u305a...)\n\n---\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n\nlibgreen\u4ee5\u964d\u306b\u5b9f\u88c5\u304c\u3044\u304f\u3064\u304b\n\n- context-rs/coroutine-rs\n- libfringe\n\n---\n\n## context-rs/coroutine-rs\n\n- \u3069\u3061\u3089\u3082zonyitoo\u3055\u3093\u304c\u66f8\u304b\u308c\u305f\u3082\u306e\n- Boost.{Context,Coroutine}\u306e\u79fb\u690d\n\n---\n\n## libfringe\n\n- \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3088\u3044\u3089\u3057\u3044\n    - \u306a\u3093\u3067\u304b\u3088\u304f\u308f\u304b\u3089\u3093\u3001\u3001XMM\u3042\u305f\u308a\u3082\u4fdd\u5b58\u30ec\u30b8\u30b9\u30bf\u6307\u5b9a\u5165\u3063\u3068\u308b\u3057...\n    - \u5206\u5c90\u4e88\u6e2c\u30df\u30b9\u56de\u907f\u306e\u305f\u3081\u306b `ret` \u3067\u306a\u304f `jmp+pop` \u306b\u3057\u3066\u308b\u3068\u304b\u306f\u3042\u3063\u305f\n- primitive\u306acontext-rs\u76f8\u5f53\u3068Generator\u306e\u3088\u3046\u306a\u3044\u3044\u304b\u3093\u3058\u306e\u3084\u3064\n\n---\n\n## libfringe (Cont.)\n\n- Generator\u306e\u5b9f\u88c5 (README\u306e\u3084\u3064)\n\n```\nextern crate fringe;\n\nuse fringe::{OsStack, Generator};\n\nfn main() {\n  let stack = OsStack::new(1 << 16).unwrap();\n  let mut gen = Generator::new(stack, move |yielder, ()| {\n    for i in 1..4 { yielder.suspend(i) }\n  });\n\n  println!(\"{:?}\", gen.resume(())); // Some(1)\n  println!(\"{:?}\", gen.resume(())); // Some(2)\n  println!(\"{:?}\", gen.resume(())); // Some(3)\n  println!(\"{:?}\", gen.resume(())); // None\n}\n```\n\n---\n\n## \u30b3\u30eb\u30fc\u30c1\u30f3\u4f7f\u3044\u3069\u3053\u308d\n\n- \u3088\u304f\u3042\u308b\u306e\u304c\u975e\u540c\u671fI/O\u3068\u5408\u308f\u305b\u3066\u4f7f\u3046\n- \u30aa\u30ea\u30b8\u30ca\u30eb\u306fRuss Cox\u306elibtask?\n    - \u3082\u3063\u3068\u524d\u304b\u3089\u3042\u308a\u305d\u3046\n\n---\n\n## \u975e\u540c\u671fI/O\n\n- high performace\u306a\u30b5\u30fc\u30d0\u3092\u66f8\u304f\u306e\u306b\u5fc5\u9808\n- \u30b3\u30eb\u30fc\u30c1\u30f3\u3067I/O\u5f85\u3061\u3092\u6e1b\u3089\u3057\u305f\u3044\n    - EWOULDBLOCK/EAGAIN\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u5207\u308a\u66ff\u3048\n\n---\n\n# Rust\u3068\u975e\u540c\u671fI/O\n\n- mio(epoll/kqueue\u3068\u304b\u306e\u8584\u3044\u62bd\u8c61\u5316\u30ec\u30a4\u30e4)\u304c\u30c7\u30d5\u30a1\u30af\u30c8\n- \u6700\u8fd1mio\u306e\u4e0a\u306btokio-rs/futures\u306a\u3069\u306a\u3093\u304b\u30a4\u30b1\u3066\u308b\u3084\u3064\u304c\u306e\u3063\u3066\u308b\n\n---\n\n#### mioco (mio + coroutine-rs)\n\n- \u4e00\u756astar\u591a\u3044\u3057\u305f\u3076\u3093\u306a\u3093\u304b\u3059\u3054\u3044, zmq-rs\u3068\u304b\u3067\u4f7f\u308f\u308c\u3066\u308b\n\n#### coio-rs (mio + coroutine-rs)\n\n- \u5185\u90e8\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306bChase-Lev's deque\u4f7f\u3063\u3066\u308b, flowgger\u3068\u3044\u3046fluentd-like\u306a\u3084\u3064\u3067\u4f7f\u308f\u308c\u3066\u308b\n\n---\n\n## mioco\u3092\u4f8b\u306b\n\n```rust\nmioco::start(|| -> io::Result<()> {\n        let listener = try!(TcpListener::bind(&addr));\n        loop {\n            let mut conn = try!(listener.accept());\n            mioco::spawn(move || -> io::Result<()> {\n                let mut buf = [0u8; 1024 * 16];\n                loop {\n                    let size = try!(conn.read(&mut buf));\n                    if size == 0 {/* eof */ break; }\n                    let _ = try!(conn.write_all(&mut buf[0..size]));\n                }\n                Ok(())\n            });\n        }\n    }).unwrap().unwrap();\n```\n\n---\n\n## mioco (Cont.)\n\n- mioco::spawn\u3067\u8efd\u91cf\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u304b\u3089\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u767b\u9332\u307e\u3067\n- \u30d1\u30c3\u3068\u898b\u306f\u30d6\u30ed\u30c3\u30af\u3057\u305d\u3046\u3060\u3051\u3069\u3046\u307e\u304f\u52d5\u304f\u3089\u3057\u3044\n- \u8907\u6570OS\u30b9\u30ec\u30c3\u30c9\u306e\u4f8b\u3082example\u306b\u3042\u3063\u305f(\u5404OS\u30b9\u30ec\u30c3\u30c9\u304cacceptor\u3092\u6301\u3064\u5f62)\n    - Rust\u306a\u306e\u3067\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u62e1\u5f35\u3082\u5bb9\u6613\uff1f\n    - \u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306beventloop\u3082\u3064\u3063\u307d\u3044\n\n---\n\n## \u307e\u3068\u3081 (\u307e\u3068\u307e\u3063\u3066\u3044\u306a\u3044)\n\n- \u975e\u540c\u671fI/O+\u30b3\u30eb\u30fc\u30c1\u30f3\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307d\u3064\u307d\u3064\u51fa\u3066\u304d\u305f\n- high performace\u306a\u9bd6\u66f8\u304f\u305f\u3081\u306e\u90e8\u54c1\u304c\u63c3\u3063\u3066\u304d\u305f\u611f\u3042\u308b\n- \u4f7f\u3063\u3066\u3044\u304d\u305f\u307f\u304c\u9ad8\u307e\u3063\u3066\u3044\u308b\n", "tags": ["rust"]}