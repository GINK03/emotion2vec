{"context": " More than 1 year has passed since last update.\u6b21\u306e\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u8a08\u7b97\u3092ReactiveExtensions\u3067\u8a66\u3057\u307e\u3059\uff08\u3053\u306e\u8a08\u7b97\u81ea\u4f53\u306b\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n\n\u6e96\u5099\n\u4eca\u56de\u306fPython\u3067\u8a66\u3057\u307e\u3059\u3002\u307e\u305a\u306fPython\u7248\u306eReactiveExtensions \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\u7aef\u672b\npip install Rx\n\n\n\n\u30d6\u30ed\u30c3\u30af\u56f3\u3092JSON\u3067\u8868\u73fe\nJSON\u3067\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u914d\u7f6e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u914d\u7dda\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\ntest.json\n{\n    \"modules\": [\n        {\"name\":\"add1\", \"module_type\":\"add\", \"inputs\":[\"sin1\", \"const1\"]},\n        {\"name\":\"add2\", \"module_type\":\"add\", \"inputs\":[\"mul1\", \"div1\"]},\n        {\"name\":\"mul1\", \"module_type\":\"mul\", \"inputs\":[\"sub1\", \"add1\"]},\n        {\"name\":\"sub1\", \"module_type\":\"sub\", \"inputs\":[\"sin1\", \"cos1\"]},\n        {\"name\":\"div1\", \"module_type\":\"div\", \"inputs\":[\"cos1\", \"const2\"]},\n        {\"name\":\"sin1\", \"module_type\":\"sin\", \"inputs\":[\"const1\"]},\n        {\"name\":\"cos1\", \"module_type\":\"cos\", \"inputs\":[\"add1\"]},\n        {\"name\":\"out1\", \"module_type\":\"out\", \"inputs\":[\"add2\"]},\n        {\"name\":\"const1\", \"module_type\":\"const\", \"value\":1.0},\n        {\"name\":\"const2\", \"module_type\":\"const\", \"value\":2.0}\n    ]\n}\n\n\n\n\u5b9f\u88c5\n\u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u7dda\u3001\u5b9a\u6570\u5024\u306e\u8a2d\u5b9a\u3001\u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\u307e\u3067\u307e\u3068\u3081\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\ntest.py\n# -*- coding: utf-8 -*-\nfrom rx.subjects import Subject\nimport json, operator, math\n\nif __name__ == '__main__':\n    # JSON\u8aad\u307f\u8fbc\u307f\n    with open('test.json') as f:\n        j = json.load(f)\n\n    # \u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\n    modules = { m['name']:Subject() for m in j['modules'] }\n\n    # \u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u7dda\n    for m in filter(lambda m: m['module_type'] != 'const', j['modules']):\n        module_type = m['module_type'];\n        self_name = m['name']\n        input_names = m['inputs']\n        if   module_type == 'add':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.add) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'sub':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.sub) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'mul':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.mul) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'div':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.truediv) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'sin':\n            modules[ input_names[0] ].select(math.sin).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'cos':\n            modules[ input_names[0] ].select(math.cos).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'tan':\n            modules[ input_names[0] ].select(math.tan).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'out':\n            modules[ input_names[0] ].subscribe(print) # \u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\n\n    # \u5b9a\u6570\u5024\u3092\u8a2d\u5b9a\n    for m in filter(lambda m: m['module_type'] == 'const', j['modules']):\n        self_name = m['name']\n        value = m['value']\n        modules[ self_name ].on_next(value)\n\n\n\n\u7d50\u679c\n1.9082290502110406\n\n\n\u30bd\u30fc\u30b9\n\nReactiveExtensions\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u30af\u30e9\u30b9\u3001\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\nSubject\nSubject\u306fObserver\uff08\u89b3\u5bdf\u3059\u308b\u65b9\uff09\u3068Observable\uff08\u89b3\u5bdf\u3055\u308c\u308b\u65b9\uff09\u306e\u4e21\u65b9\u3092\u517c\u306d\u5099\u3048\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3042\u3068\u3067\u914d\u7dda\u3067\u4f7f\u3046\u305f\u3081name\u3092\u30ad\u30fc\u306b\u3057\u3066Dictionary\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u629c\u7c8b\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\nmodules = { m['name']:Subject() for m in j['modules'] }\n\n\n\nSelect\n\u5358\u9805\u6f14\u7b97\u306fselect\u306e\u8a08\u7b97\u5024\u3092\u53d7\u4fe1\uff08subscribe\uff09\u3057\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u9001\u4fe1(on_next)\u3057\u307e\u3059\u3002\n\n\u629c\u7c8b\nmodules[ input_names[0] ].select(math.sin).subscribe(modules[ self_name ].on_next)\n\n\n\nZip\n\u4e8c\u9805\u6f14\u7b97\u306f\uff12\u3064\u306e\u5165\u529b\u5024\u304c\u63c3\u3063\u3066\u304b\u3089\u8a08\u7b97\u5024\u3092\u53d7\u4fe1\uff08subscribe\uff09\u3057\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u9001\u4fe1(on_next)\u3057\u307e\u3059\u3002\n\n\u629c\u7c8b\nmodules[ input_names[0] ].zip(modules[ input_names[1] ], operator.add) \\\n    .subscribe(modules[ self_name ].on_next)\n\n\n\n\u78ba\u8a8d\n\u5ff5\u306e\u305f\u3081\u691c\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\ntest_check.py\n# -*- coding: utf-8 -*-\nimport math\nif __name__ == '__main__':\n    sin1 = math.sin(1.0)\n    add1 = sin1+1.0\n    cos1 = math.cos(add1)\n    sub1 = sin1-cos1\n    mul1 = sub1*add1\n    div1 = cos1/2.0\n    add2 = mul1+div1\n    out = add2\n    print(out)\n\n\n\n\u7d50\u679c\n1.9082290502110406\n\n\n\u3084\u3063\u305f\u305c\n\u6b21\u306e\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u8a08\u7b97\u3092ReactiveExtensions\u3067\u8a66\u3057\u307e\u3059\uff08\u3053\u306e\u8a08\u7b97\u81ea\u4f53\u306b\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n\n![fig.png](https://qiita-image-store.s3.amazonaws.com/0/42791/1d4b6142-e977-74b1-472e-f3d56f2cfb0f.png)\n\n# \u6e96\u5099\n\u4eca\u56de\u306fPython\u3067\u8a66\u3057\u307e\u3059\u3002\u307e\u305a\u306fPython\u7248\u306e[ReactiveExtensions](https://rxpy.codeplex.com/) \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```text:\u7aef\u672b\npip install Rx\n```\n\n# \u30d6\u30ed\u30c3\u30af\u56f3\u3092JSON\u3067\u8868\u73fe\nJSON\u3067\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u914d\u7f6e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u914d\u7dda\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```json:test.json\n{\n    \"modules\": [\n        {\"name\":\"add1\", \"module_type\":\"add\", \"inputs\":[\"sin1\", \"const1\"]},\n        {\"name\":\"add2\", \"module_type\":\"add\", \"inputs\":[\"mul1\", \"div1\"]},\n        {\"name\":\"mul1\", \"module_type\":\"mul\", \"inputs\":[\"sub1\", \"add1\"]},\n        {\"name\":\"sub1\", \"module_type\":\"sub\", \"inputs\":[\"sin1\", \"cos1\"]},\n        {\"name\":\"div1\", \"module_type\":\"div\", \"inputs\":[\"cos1\", \"const2\"]},\n        {\"name\":\"sin1\", \"module_type\":\"sin\", \"inputs\":[\"const1\"]},\n        {\"name\":\"cos1\", \"module_type\":\"cos\", \"inputs\":[\"add1\"]},\n        {\"name\":\"out1\", \"module_type\":\"out\", \"inputs\":[\"add2\"]},\n        {\"name\":\"const1\", \"module_type\":\"const\", \"value\":1.0},\n        {\"name\":\"const2\", \"module_type\":\"const\", \"value\":2.0}\n    ]\n}\n```\n\n# \u5b9f\u88c5\n\u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u7dda\u3001\u5b9a\u6570\u5024\u306e\u8a2d\u5b9a\u3001\u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\u307e\u3067\u307e\u3068\u3081\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```py3:test.py\n# -*- coding: utf-8 -*-\nfrom rx.subjects import Subject\nimport json, operator, math\n\nif __name__ == '__main__':\n    # JSON\u8aad\u307f\u8fbc\u307f\n    with open('test.json') as f:\n        j = json.load(f)\n\n    # \u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\n    modules = { m['name']:Subject() for m in j['modules'] }\n\n    # \u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u7dda\n    for m in filter(lambda m: m['module_type'] != 'const', j['modules']):\n        module_type = m['module_type'];\n        self_name = m['name']\n        input_names = m['inputs']\n        if   module_type == 'add':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.add) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'sub':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.sub) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'mul':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.mul) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'div':\n            modules[ input_names[0] ].zip(modules[ input_names[1] ], operator.truediv) \\\n                .subscribe(modules[ self_name ].on_next)\n        elif module_type == 'sin':\n            modules[ input_names[0] ].select(math.sin).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'cos':\n            modules[ input_names[0] ].select(math.cos).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'tan':\n            modules[ input_names[0] ].select(math.tan).subscribe(modules[ self_name ].on_next)\n        elif module_type == 'out':\n            modules[ input_names[0] ].subscribe(print) # \u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\n\n    # \u5b9a\u6570\u5024\u3092\u8a2d\u5b9a\n    for m in filter(lambda m: m['module_type'] == 'const', j['modules']):\n        self_name = m['name']\n        value = m['value']\n        modules[ self_name ].on_next(value)\n```\n\n```text:\u7d50\u679c\n1.9082290502110406\n```\n\n[\u30bd\u30fc\u30b9](https://github.com/fukuroder/Rx.py_test)\n\n# ReactiveExtensions\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u30af\u30e9\u30b9\u3001\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## Subject\nSubject\u306fObserver\uff08\u89b3\u5bdf\u3059\u308b\u65b9\uff09\u3068Observable\uff08\u89b3\u5bdf\u3055\u308c\u308b\u65b9\uff09\u306e\u4e21\u65b9\u3092\u517c\u306d\u5099\u3048\u305f\u30af\u30e9\u30b9\u3067\u3059\u3002\u3042\u3068\u3067\u914d\u7dda\u3067\u4f7f\u3046\u305f\u3081name\u3092\u30ad\u30fc\u306b\u3057\u3066Dictionary\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py3:\u629c\u7c8b\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u4f5c\u6210\nmodules = { m['name']:Subject() for m in j['modules'] }\n```\n\n## Select\n\u5358\u9805\u6f14\u7b97\u306fselect\u306e\u8a08\u7b97\u5024\u3092\u53d7\u4fe1\uff08subscribe\uff09\u3057\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u9001\u4fe1(on_next)\u3057\u307e\u3059\u3002\n\n```py3:\u629c\u7c8b\nmodules[ input_names[0] ].select(math.sin).subscribe(modules[ self_name ].on_next)\n```\n\n## Zip\n\u4e8c\u9805\u6f14\u7b97\u306f\uff12\u3064\u306e\u5165\u529b\u5024\u304c\u63c3\u3063\u3066\u304b\u3089\u8a08\u7b97\u5024\u3092\u53d7\u4fe1\uff08subscribe\uff09\u3057\u6b21\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u9001\u4fe1(on_next)\u3057\u307e\u3059\u3002\n\n```py3:\u629c\u7c8b\nmodules[ input_names[0] ].zip(modules[ input_names[1] ], operator.add) \\\n    .subscribe(modules[ self_name ].on_next)\n```\n\n# \u78ba\u8a8d\n\u5ff5\u306e\u305f\u3081\u691c\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3:test_check.py\n# -*- coding: utf-8 -*-\nimport math\nif __name__ == '__main__':\n    sin1 = math.sin(1.0)\n    add1 = sin1+1.0\n    cos1 = math.cos(add1)\n    sub1 = sin1-cos1\n    mul1 = sub1*add1\n    div1 = cos1/2.0\n    add2 = mul1+div1\n    out = add2\n    print(out)\n```\n\n```text:\u7d50\u679c\n1.9082290502110406\n```\n\n\u3084\u3063\u305f\u305c\n\n\n\n", "tags": ["ReactiveExtensions", "Python"]}