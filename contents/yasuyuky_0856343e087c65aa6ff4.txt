{"tags": ["rust"], "context": "\u3053\u306e\u8a18\u4e8b\u306f Rust\u305d\u306e2 Advent Calendar 2016 20\u65e5\u76ee\u306e\u8a18\u4e8b\u3068\u3057\u3066\u304b\u304b\u308c\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\u3068\u5bfe\u8c61\u8aad\u8005\n\u3053\u306e\u8a18\u4e8b\u306b\u542b\u307e\u308c\u308b\u30b3\u30fc\u30c9\u306f\nrustc 1.13.0 (2c6933acc 2016-11-07)\u306e\nRust Playground\u307e\u305f\u306f\u3053\u3053\u3067\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u6700\u9069\u306a\u5bfe\u8c61\u8aad\u8005\u3068\u3057\u3066\u306frust\u3067\u4e26\u884c\u51e6\u7406\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\n\u3053\u308c\u304b\u3089\u66f8\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u3067\u3059\u3002\n\nstd::thread\u306e\u7f60\nrust\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306estd::thread\u3092\u7528\u3044\u3066\u4e26\u884c\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u6642\u306b\n\u4f8b\u3048\u3070\u3053\u3046\u3044\u3046\u3088\u3046\u306a\u51e6\u7406\u304c\u4f8b\u793a\u3055\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nuse std::thread;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn main() {\n\n    let y = 1i32;\n    let handle = thread::spawn(move ||{println!(\"{}\",add_one(y))});\n    handle.join();    \n}\n\n\n\u3053\u306e\u51e6\u7406\u306f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5c11\u3057\u8aa4\u9b54\u5316\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3042\u308a\u307e\u3059\u304c\uff09\n\u95a2\u6570\u3092spawn\u3057\u3066\u3084\u308c\u30701\u8db3\u3057\u3066\u30d7\u30ea\u30f3\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u73fe\u5b9f\u306e\u554f\u984c\u306f\u3088\u308a\u8907\u96d1\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u5e38\u306b1\u8db3\u3057\u3066\u7d42\u308f\u308b\u3088\u3046\u306a\u554f\u984c\u306f\u5c11\u306a\u304f\u3001\n\u305d\u306e\u3046\u3061\u3053\u3093\u306a\u98a8\u306a\u3088\u308a\u4e00\u822c\u5316\u3055\u308c\u305f\u51e6\u7406\u3092\u66f8\u304d\u305f\u304f\u306a\u308a\u307e\u3059\u3002\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n\n    pub fn add_println(self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n\n}\n\n\nfn main() {\n    let y = 1i32;\n\n    let adder = Adder::new(2);\n    adder.add_println(y);\n\n}\n\n\n\u3053\u308c\u3067\u4e00\u822c\u5316\u3055\u308c\u307e\u3057\u305f\u3002\nthread\u3092\u7acb\u3061\u4e0a\u3052\u3066\u6700\u521d\u306b\u4e0e\u3048\u305fi32\u578b\u306e\u6574\u6570\u3092\u52a0\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4e0a\u8a18\u306b\u306f\u5c11\u3057\u554f\u984c\u304c\u3042\u308a\u3001\u305d\u308c\u306f\u4e00\u884c\u8db3\u3059\u3060\u3051\u3067\u9855\u5728\u5316\u3057\u307e\u3059\u3002\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n\n    pub fn add_println(self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n\n}\n\nfn main() {\n\n    let y = 1i32;\n\n    let adder = Adder::new(2);\n    adder.add_println(y);\n    adder.add_println(y);\n}\n\n\n\u3053\u3046\u3059\u308b\u4e8b\u3067\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u98a8\u306b\u6012\u3089\u308c\u307e\u3059\u3002\nerror[E0382]: use of moved value: `adder`\n  --> <anon>:31:5\n   |\n30 |     adder.add_println(y);\n   |     ----- value moved here\n31 |     adder.add_println(y);\n   |     ^^^^^ value used here after move\n   |\n   = note: move occurs because `adder` has type `Adder`, which does not implement the `Copy` trait\n\nerror: aborting due to previous error\n\n\n\u306a\u308b\u307b\u3069\uff08\u306a\u308b\u307b\u3069\uff09\u3002\n\u3064\u307e\u308astruct\u81ea\u4f53\u3092move\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3067\u79fb\u52d5\u3057\u3061\u3083\u3063\u3066\u308b\u306e\u3067\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306blifetime\u30c1\u30a7\u30c3\u30ab\u30fc\u3067\u6012\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u6d45\u77e5\u6075\u3092\u50cd\u304b\u305b\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n\n    pub fn add_println(&self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n\n}\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn main() {\n    let y = 1i32;\n\n    let adder = Adder::new(2);\n    adder.add_println(y);\n}\n\n\u5909\u66f4\u70b9\u306fadd_println\u30e1\u30bd\u30c3\u30c9\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u305fself\u3092&self\u3068\u3057\u305f\u3060\u3051\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001add_println\u30e1\u30bd\u30c3\u30c9\u306b\u306fstruct\u306e\u53c2\u7167\u3092\u6301\u305f\u305b\u3001\n\u305d\u308c\u81ea\u4f53\u306fmove\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u3057\u3088\u3046\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u52d8\u306e\u3044\u3044\u65b9\u306f\u65e2\u306b\u304a\u6c17\u4ed8\u304d\u306e\u901a\u308a\u3001\u3053\u306e\u76ee\u8ad6\u898b\u306f\u5d29\u308c\u53bb\u308a\u307e\u3059\u3002\nerror[E0477]: the type `[closure@<anon>:13:31: 13:63 y:i32, self:&Adder]` does not fulfill the required lifetime\n  --> <anon>:13:17\n   |\n13 |         let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n   |                 ^^^^^^^^^^^^^\n   |\n   = note: type must outlive the static lifetime\n\nerror: aborting due to previous error\n\n\u306a\u305c\u304b\u3002\u305d\u308c\u306f spawn\u3055\u308c\u305fthread\u306f'static\u306alifetime\u3092\u6301\u3064 \u304b\u3089\u3067\u3059\u3002\n\u4e00\u65b9\u3067Adder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3053\u3053\u3067\u306fmain\u95a2\u6570\u5185\u306b\u7559\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nthread\u306elifetime\u3067\u3042\u308b'static\u3088\u308a\u72ed\u3044\u7bc4\u56f2\u306e\u305f\u3081\u3084\u306f\u308a\nlifetime\u30c1\u30a7\u30c3\u30ab\u30fc\u306b\u3088\u3063\u3066\u5f3e\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u306e\u8981\u4ef6\u304c\u3042\u308b\u305f\u3081thread::spawn\u3059\u308b\u969b\u306f\u305f\u3044\u3066\u3044\u306e\u5834\u5408move\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u3067\u5c11\u3057\u8aa4\u9b54\u5316\u3057\u3066\u3044\u308b\u3068\u66f8\u3044\u305f\u306e\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\n\u3053\u3053\u306b\u6765\u3066\u30d7\u30ed\u30b0\u30e9\u30de\u306frust\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u30b9\u30ec\u30c3\u30c9\u3067\u3042\u308a\u3001\nrust\u306f\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u306a\u3044\u8a00\u8a9e\u306a\u3093\u3060\u3063\u305f\u3068\u8a00\u3046\u4e8b\u3092\u6539\u3081\u3066\u6c17\u4ed8\u304b\u3055\u308c\u307e\u3059\u3002\n\uff08\u540c\u6642\u306bC++\u3067\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u65b9\u306f\n\u3000\u3053\u306e\u5236\u9650\u306f\u3042\u308b\u7a2e\u306e\u61d0\u304b\u3057\u3055\u3092\u611f\u3058\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\uff09\n\ncrossbeam\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3053\u3053\u3067\u6f38\u304f\u672c\u984c\u3067\u3059\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u304c\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u7406\u5c48\u3068\u3057\u3066\u306f\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u3001\n\u3068\u306f\u8a00\u3048\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u5fc3\u60c5\u7684\u306b\u306f\u7d0d\u5f97\u3067\u304d\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u307e\u3059\u3002\n\u306a\u305c\u306a\u3089add_println\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067thread\u306fjoin()\u3057\u3066\u3044\u308b\u308f\u3051\u306a\u306e\u3067\u3001\nthread\u306elifetime\u306f\u305d\u3053\u307e\u3067\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u6709\u52b9\u306b\u306a\u308b\u306e\u304cscoped thread\u3067\u3059\u3002\n\u3053\u308c\u306f\u307e\u3042\u540d\u524d\u306e\u901a\u308ascope\u3092\u9650\u5b9a\u3057\u305fthread\u3067\u3059\nrust\u306b\u304a\u3051\u308bscoped thread\u306f\u4ee5\u524d\u306fstd\u5185\u306b\u5165\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u304c\u3001\n\u4eca\u306fcrossbeam\u3068\u3044\u3046\u5916\u90e8crate\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3088\u3046\u3067\u3059\n\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u3046\u5834\u5408\u306fCargo.toml\u306b\u52a0\u3048\u307e\u3057\u3087\u3046\u3002\n\u3061\u306a\u307f\u306b\u3053\u3061\u3089\u306eRust playground\u306b\u306f\u8ffd\u52a0\u6e08\u307f\u306e\u3088\u3046\u3067\u3059\nextern crate crossbeam;\n\nstruct Adder {\n    x: i32,\n}\n\nimpl Adder {\n    pub fn new(x: i32) -> Adder {\n        Adder { x: x }\n    }\n\n    pub fn add_println(&self, y: i32) {\n        crossbeam::scope(|scope| {\n            let h = scope.spawn(|| println!(\"{}\", y + self.x));\n            h.join();\n        });\n    }\n}\n\n\nfn main() {\n    let y = 1i32;\n    let adder = Adder::new(2);\n    adder.add_println(y);\n    adder.add_println(y);\n}\n\n\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u610f\u56f3\u3057\u305f\u901a\u308a\u306e\u4e26\u884c\u51e6\u7406\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\u6587\u660e\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\nrust\u306ethread\u306fnative\u306athread\u306a\u306e\u3067\n\u3044\u308d\u3044\u308d\u3064\u3089\u3044\u90e8\u5206\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\ncrossbeam\u3068\u304b\u4f7f\u3063\u305f\u3089\u5c11\u3057\u697d\u306b\u306a\u308b\u3068\u3044\u3046\u8a71\u3067\u3057\u305f\u3002\n\n\u4f59\u8ac7\n\u73fe\u5728rust\u7528\u306eTUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\uff08\u307e\u3060\u307e\u3060buggy\u306a\u306e\u3067\u3053\u308c\u306b\u4f9d\u5b58\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u66f8\u304b\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u2026\uff09\n\u4eca\u56de\u306ecrossbeam\u3082\u3053\u308c\u306e\u958b\u767a\u4e2d\u3067\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3082\u3061\u308d\u3093\u3001\u65e2\u306bTUI\u306e\u70ba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3057\u3001\n\u306a\u305c\u4eca\u66f4\uff1f\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\n\u4e00\u756a\u5927\u304d\u3044\u306e\u306f\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u8907\u96d1\u306aUnicode\u306e\u4ed5\u69d8\u306b\n\u52dd\u3066\u3066\u306a\u3044\u611f\u3058\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u306feast asian width\u306a\u6bcd\u8a9e\u3092\u6301\u3064\u4e00\u4eba\u3068\u3057\u3066\n\u7acb\u3061\u4e0a\u304c\u308d\u3046\u3068\u6c7a\u5fc3\u3057\u307e\u3057\u305f\uff08\u52dd\u3066\u308b\u3068\u306f\u8a00\u3063\u3066\u306a\u3044\uff09\u3002\n\u3082\u3061\u308d\u3093\u4eca\u56de\u81ea\u5206\u3067\u66f8\u304f\u4e0a\u3067\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u306f\u3068\u3066\u3082\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\u66f8\u3044\u3066\u3044\u308b\u4e0a\u3067\u69d8\u3005\u306aTips\u304c\u3042\u308a\u3001\u5b66\u3073\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u306e\u3067\u3001\n\u307e\u305f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u305d\u3061\u3089\u3082\u7d39\u4ecb\u3067\u304d\u308c\u3070\u3068\u601d\u3044\u307e\u3059\n\n\u3053\u306e\u8a18\u4e8b\u306f [Rust\u305d\u306e2 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/rust-lang-2) 20\u65e5\u76ee\u306e\u8a18\u4e8b\u3068\u3057\u3066\u304b\u304b\u308c\u307e\u3057\u305f\u3002\n\n\n# \u74b0\u5883\u3068\u5bfe\u8c61\u8aad\u8005\n\n\u3053\u306e\u8a18\u4e8b\u306b\u542b\u307e\u308c\u308b\u30b3\u30fc\u30c9\u306f\n`rustc 1.13.0 (2c6933acc 2016-11-07)`\u306e\n[Rust Playground](https://play.rust-lang.org)\u307e\u305f\u306f[\u3053\u3053](http://play.integer32.com/)\u3067\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u6700\u9069\u306a\u5bfe\u8c61\u8aad\u8005\u3068\u3057\u3066\u306frust\u3067\u4e26\u884c\u51e6\u7406\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\n\u3053\u308c\u304b\u3089\u66f8\u304d\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u3067\u3059\u3002\n\n\n# std::thread\u306e\u7f60\n\nrust\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e`std::thread`\u3092\u7528\u3044\u3066\u4e26\u884c\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u6642\u306b\n\u4f8b\u3048\u3070\u3053\u3046\u3044\u3046\u3088\u3046\u306a\u51e6\u7406\u304c\u4f8b\u793a\u3055\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```rust\nuse std::thread;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn main() {\n\n    let y = 1i32;\n    let handle = thread::spawn(move ||{println!(\"{}\",add_one(y))});\n    handle.join();    \n}\n\n```\n\n\u3053\u306e\u51e6\u7406\u306f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5c11\u3057\u8aa4\u9b54\u5316\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3042\u308a\u307e\u3059\u304c\uff09\n\u95a2\u6570\u3092spawn\u3057\u3066\u3084\u308c\u30701\u8db3\u3057\u3066\u30d7\u30ea\u30f3\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u73fe\u5b9f\u306e\u554f\u984c\u306f\u3088\u308a\u8907\u96d1\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u5e38\u306b1\u8db3\u3057\u3066\u7d42\u308f\u308b\u3088\u3046\u306a\u554f\u984c\u306f\u5c11\u306a\u304f\u3001\n\u305d\u306e\u3046\u3061\u3053\u3093\u306a\u98a8\u306a\u3088\u308a\u4e00\u822c\u5316\u3055\u308c\u305f\u51e6\u7406\u3092\u66f8\u304d\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\n\n```rust\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n    \n    pub fn add_println(self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n    \n}\n\n\nfn main() {\n    let y = 1i32;\n    \n    let adder = Adder::new(2);\n    adder.add_println(y);\n    \n}\n\n```\n\n\u3053\u308c\u3067\u4e00\u822c\u5316\u3055\u308c\u307e\u3057\u305f\u3002\nthread\u3092\u7acb\u3061\u4e0a\u3052\u3066\u6700\u521d\u306b\u4e0e\u3048\u305f`i32`\u578b\u306e\u6574\u6570\u3092\u52a0\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4e0a\u8a18\u306b\u306f\u5c11\u3057\u554f\u984c\u304c\u3042\u308a\u3001\u305d\u308c\u306f\u4e00\u884c\u8db3\u3059\u3060\u3051\u3067\u9855\u5728\u5316\u3057\u307e\u3059\u3002\n\n```rust\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n    \n    pub fn add_println(self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n    \n}\n\nfn main() {\n\n    let y = 1i32;\n\n    let adder = Adder::new(2);\n    adder.add_println(y);\n    adder.add_println(y);\n}\n\n```\n\n\u3053\u3046\u3059\u308b\u4e8b\u3067\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3093\u306a\u98a8\u306b\u6012\u3089\u308c\u307e\u3059\u3002\n\n```\nerror[E0382]: use of moved value: `adder`\n  --> <anon>:31:5\n   |\n30 |     adder.add_println(y);\n   |     ----- value moved here\n31 |     adder.add_println(y);\n   |     ^^^^^ value used here after move\n   |\n   = note: move occurs because `adder` has type `Adder`, which does not implement the `Copy` trait\n\nerror: aborting due to previous error\n\n```\n\n\u306a\u308b\u307b\u3069\uff08\u306a\u308b\u307b\u3069\uff09\u3002\n\u3064\u307e\u308astruct\u81ea\u4f53\u3092move\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3067\u79fb\u52d5\u3057\u3061\u3083\u3063\u3066\u308b\u306e\u3067\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306blifetime\u30c1\u30a7\u30c3\u30ab\u30fc\u3067\u6012\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n\u3053\u3053\u3067\u6d45\u77e5\u6075\u3092\u50cd\u304b\u305b\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n```rust\nuse std::thread;\n\nstruct Adder {\n    x: i32\n}\n\nimpl Adder {\n    pub fn new(x:i32) -> Adder {\n        Adder {x:x}\n    }\n    \n    pub fn add_println(&self,y:i32) {\n        let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n        h.join();\n    }\n    \n}\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn main() {\n    let y = 1i32;\n\n    let adder = Adder::new(2);\n    adder.add_println(y);\n}\n```\n\u5909\u66f4\u70b9\u306f`add_println`\u30e1\u30bd\u30c3\u30c9\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u305f`self`\u3092`&self`\u3068\u3057\u305f\u3060\u3051\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001`add_println`\u30e1\u30bd\u30c3\u30c9\u306b\u306fstruct\u306e\u53c2\u7167\u3092\u6301\u305f\u305b\u3001\n\u305d\u308c\u81ea\u4f53\u306fmove\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u3044\u3088\u3046\u306b\u3057\u3088\u3046\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\n\u52d8\u306e\u3044\u3044\u65b9\u306f\u65e2\u306b\u304a\u6c17\u4ed8\u304d\u306e\u901a\u308a\u3001\u3053\u306e\u76ee\u8ad6\u898b\u306f\u5d29\u308c\u53bb\u308a\u307e\u3059\u3002\n\n```\nerror[E0477]: the type `[closure@<anon>:13:31: 13:63 y:i32, self:&Adder]` does not fulfill the required lifetime\n  --> <anon>:13:17\n   |\n13 |         let h = thread::spawn(move ||{println!(\"{}\",y+self.x)});\n   |                 ^^^^^^^^^^^^^\n   |\n   = note: type must outlive the static lifetime\n\nerror: aborting due to previous error\n```\n\n\u306a\u305c\u304b\u3002\u305d\u308c\u306f **spawn\u3055\u308c\u305fthread\u306f`'static`\u306alifetime\u3092\u6301\u3064** \u304b\u3089\u3067\u3059\u3002\n\u4e00\u65b9\u3067`Adder`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3053\u3053\u3067\u306f`main`\u95a2\u6570\u5185\u306b\u7559\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nthread\u306elifetime\u3067\u3042\u308b`'static`\u3088\u308a\u72ed\u3044\u7bc4\u56f2\u306e\u305f\u3081\u3084\u306f\u308a\nlifetime\u30c1\u30a7\u30c3\u30ab\u30fc\u306b\u3088\u3063\u3066\u5f3e\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u8981\u4ef6\u304c\u3042\u308b\u305f\u3081`thread::spawn`\u3059\u308b\u969b\u306f\u305f\u3044\u3066\u3044\u306e\u5834\u5408move\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0a\u3067\u5c11\u3057\u8aa4\u9b54\u5316\u3057\u3066\u3044\u308b\u3068\u66f8\u3044\u305f\u306e\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\n\n\u3053\u3053\u306b\u6765\u3066\u30d7\u30ed\u30b0\u30e9\u30de\u306frust\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u30b9\u30ec\u30c3\u30c9\u3067\u3042\u308a\u3001\nrust\u306f\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u306a\u3044\u8a00\u8a9e\u306a\u3093\u3060\u3063\u305f\u3068\u8a00\u3046\u4e8b\u3092\u6539\u3081\u3066\u6c17\u4ed8\u304b\u3055\u308c\u307e\u3059\u3002\n\uff08\u540c\u6642\u306bC++\u3067\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u65b9\u306f\n\u3000\u3053\u306e\u5236\u9650\u306f\u3042\u308b\u7a2e\u306e\u61d0\u304b\u3057\u3055\u3092\u611f\u3058\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\uff09\n\n# crossbeam\n\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3053\u3053\u3067\u6f38\u304f\u672c\u984c\u3067\u3059\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u304c\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u306f\u7406\u5c48\u3068\u3057\u3066\u306f\u308f\u304b\u308b\u3093\u3067\u3059\u304c\u3001\n\u3068\u306f\u8a00\u3048\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u5fc3\u60c5\u7684\u306b\u306f\u7d0d\u5f97\u3067\u304d\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u306a\u305c\u306a\u3089`add_println`\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067thread\u306fjoin()\u3057\u3066\u3044\u308b\u308f\u3051\u306a\u306e\u3067\b\u3001\nthread\u306elifetime\u306f\u305d\u3053\u307e\u3067\u3068\u308f\u304b\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u6709\u52b9\u306b\u306a\u308b\u306e\u304cscoped thread\u3067\u3059\u3002\n\u3053\u308c\u306f\u307e\u3042\u540d\u524d\u306e\u901a\u308ascope\u3092\u9650\u5b9a\u3057\u305fthread\u3067\u3059\n\nrust\u306b\u304a\u3051\u308bscoped thread\u306f\u4ee5\u524d\u306fstd\u5185\u306b\u5165\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u304c\u3001\n\u4eca\u306f[crossbeam\u3068\u3044\u3046\u5916\u90e8crate](https://crates.io/crates/crossbeam)\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3088\u3046\u3067\u3059\n\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u3046\u5834\u5408\u306fCargo.toml\u306b\u52a0\u3048\u307e\u3057\u3087\u3046\u3002\n\n\u3061\u306a\u307f\u306b[\u3053\u3061\u3089\u306eRust playground\u306b\u306f\u8ffd\u52a0\u6e08\u307f\u306e\u3088\u3046\u3067\u3059](http://play.integer32.com/)\n\n```\nextern crate crossbeam;\n\nstruct Adder {\n    x: i32,\n}\n\nimpl Adder {\n    pub fn new(x: i32) -> Adder {\n        Adder { x: x }\n    }\n\n    pub fn add_println(&self, y: i32) {\n        crossbeam::scope(|scope| {\n            let h = scope.spawn(|| println!(\"{}\", y + self.x));\n            h.join();\n        });\n    }\n}\n\n\nfn main() {\n    let y = 1i32;\n    let adder = Adder::new(2);\n    adder.add_println(y);\n    adder.add_println(y);\n}\n```\n\n\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u610f\u56f3\u3057\u305f\u901a\u308a\u306e\u4e26\u884c\u51e6\u7406\u304c\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\u6587\u660e\u3067\u3059\u306d\u3002\n\n\n# \u307e\u3068\u3081\n\nrust\u306ethread\u306fnative\u306athread\u306a\u306e\u3067\n\u3044\u308d\u3044\u308d\u3064\u3089\u3044\u90e8\u5206\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\ncrossbeam\u3068\u304b\u4f7f\u3063\u305f\u3089\u5c11\u3057\u697d\u306b\u306a\u308b\u3068\u3044\u3046\u8a71\u3067\u3057\u305f\u3002\n\n\n\n# \u4f59\u8ac7\n\n[\u73fe\u5728rust\u7528\u306eTUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002](https://github.com/yasuyuky/cursormatrix)\n\uff08\u307e\u3060\u307e\u3060buggy\u306a\u306e\u3067\u3053\u308c\u306b\u4f9d\u5b58\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u66f8\u304b\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u2026\uff09\n\u4eca\u56de\u306ecrossbeam\u3082\u3053\u308c\u306e\u958b\u767a\u4e2d\u3067\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u3082\u3061\u308d\u3093\u3001\u65e2\u306bTUI\u306e\u70ba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3057\u3001\n\u306a\u305c\u4eca\u66f4\uff1f\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\n\u4e00\u756a\u5927\u304d\u3044\u306e\u306f\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u8907\u96d1\u306aUnicode\u306e\u4ed5\u69d8\u306b\n\u52dd\u3066\u3066\u306a\u3044\u611f\u3058\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u306feast asian width\u306a\u6bcd\u8a9e\u3092\u6301\u3064\u4e00\u4eba\u3068\u3057\u3066\n\u7acb\u3061\u4e0a\u304c\u308d\u3046\u3068\u6c7a\u5fc3\u3057\u307e\u3057\u305f\uff08\u52dd\u3066\u308b\u3068\u306f\u8a00\u3063\u3066\u306a\u3044\uff09\u3002\n\u3082\u3061\u308d\u3093\u4eca\u56de\u81ea\u5206\u3067\u66f8\u304f\u4e0a\u3067\u65e2\u5b58\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u306f\u3068\u3066\u3082\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u66f8\u3044\u3066\u3044\u308b\u4e0a\u3067\u69d8\u3005\u306aTips\u304c\u3042\u308a\u3001\u5b66\u3073\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u306e\u3067\u3001\n\u307e\u305f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u305d\u3061\u3089\u3082\u7d39\u4ecb\u3067\u304d\u308c\u3070\u3068\u601d\u3044\u307e\u3059\n"}