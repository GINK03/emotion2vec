{"context": " More than 1 year has passed since last update.\n\n\u7d4c\u7def\n\u5b66\u6821\u306e\u5bbf\u984c\u3067reading\u304c\u51fa\u3066\u3044\u308b\u306e\u3067\u8aad\u3093\u3067\u3044\u305f\u3089expressions\u3068statements\u3068\u3044\u3046\u6982\u5ff5\u306b\u3076\u3064\u304b\u308b\u3002\u8aad\u3093\u3067\u3082\u3044\u307e\u3044\u3061\u9055\u3044\u304c\u30d4\u30f3\u3068\u3053\u306a\u3044\u306e\u3067\u8abf\u3079\u3066\u307f\u308b\u3053\u3068\u306b\u3002\u5b66\u6821\u5074\u3082\u3053\u308c\u3060\u3051\u8aad\u3093\u3067\u5168\u90e8\u7406\u89e3\u3057\u308d\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u4fe1\u3058\u3066\u308b\u2026\n\ndef. of statements\uff08\u6587\uff09and expressions\uff08\u5f0f\uff09\nreading\u306b\u3088\u308b\u5b9a\u7fa9\u306f\n\nStatements typically describe actions. When the Python interpreter executes a statement, it carries out the corresponding action.\n\n\u3063\u3066\u3053\u3068\u306fx = 1\u3068\u304by = \"apple\"\u3068\u304b\u3092\u610f\u5473\u3057\u3066\u308b\u306e\uff1f\u3063\u3066\u3044\u3046\u306e\u304c\u81ea\u5206\u306e\u89e3\u91c8\u3067\u3057\u305f\u304c\u3001stackoverflow\u306b\u306f\n\nExpressions only contain identifiers, literals and operators, where operators include arithmetic and boolean operators, the function call operator () the subscription operator [] and similar, and can be reduced to some kind of \"value\", which can be any Python object. Statements (see 1, 2), on the other hand, are everything that can make up a line (or several lines) of Python code.\n\n\u3063\u3066\u3053\u3068\u306fexpressions\u306fstatements\u3068\u3057\u3066\u3082\u6349\u3048\u3089\u308c\u308b\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3002expression\u3060\u3051\u3067\u5b8c\u7d50\u3055\u305b\u3089\u308c\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u4e00\u65b9\u3067statement\u306f\uff08\u3053\u306e\u8fba\u3092\u8aad\u3093\u3067\u308b\u3068\u4f59\u8a08\u305d\u3046\u601d\u308f\u305b\u308b\uff09\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068\u4ed6\u306e\u30d6\u30ed\u30c3\u30af\u3068\u4e0a\u624b\u304f\u7e4b\u304c\u3063\u3066\u52d5\u304f\u3068\u3044\u3046\u5370\u8c61\u3002statement\u306e\u4e2d\u306b\u306f\u307b\u307c\u78ba\u5b9f\u306bexpression\u304c\u3042\u308b\u3002\nquora\u3088\u308a\n\nA statement is a complete line of code that performs some action, while an expression is any section of the code that evaluates to a value. Expressions can be combined \u201chorizontally\u201d into larger expressions using operators, while statements can only be combined \u201cvertically\u201d by writing one after another, or with block constructs. Every expression can be used as a statement (whose effect is to evaluate the expression and ignore the resulting value), but most statements cannot be used as expressions. \n\n\u307e\u305f\u3053\u3061\u3089\u306estackoverflow\u306eexpression\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u3082\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\nExpressions represent something, like a number, a string, or an instance of a class. Any value is an expression!\nAnything that does something is a statement. Any assignment to a variable or function call is a statement. Any value \ncontained in that statement in an expression. \nfoo = \"hello\" is a statement that assigns foo to the value of the expression \"hello\". Since the code \"hello\" is a simple expression, meaning it contains no operations, nothing is actually evaluated, so foo is just assigned to \"hello\". More complex expressions actually evaluate things, like adding numbers. Using the word expression seems like it is making things more confusing. Expressions are nothing but values, except they can have operations like addition or subtraction.\neval evaluates the string as if it were a python expression. Eval does takes an expression as an argument. However, there's nothing special about this since every single value is an expression. Saying \"eval takes a value as an argument\" is saying exactly the same thing, but it sounds much simpler. :D\neval( \"2+2\" ) passes the string \"2+2\" to the function. The function evaluates the expression contained in the string, which comes out to 4.\nThe book by Zelle says eval() evaluates string as an expression, what does that exactly mean if string is already an expression?\nAny string is an expression since it represents a value. However, what is in the string has absolutely no impact on it being an expression. If its a value, its an expression. When it is \"evaluated as an expression by eval\", the characters inside the string are executed as if they were a python expression.\n\n\u3055\u3089\u306b\u3053\u3053\u3067\u3082\n\n\u6587\u306f\u305d\u308c\u5358\u72ec\u3067\u5b8c\u7d50\u3059\u308b\u8a00\u8a9e\u8981\u7d20\u3067\u3059\u3002\u5f0f\u306f\u305d\u308c\u5358\u72ec\u3067\u306f\u57fa\u672c\u7684\u306b\u5b8c\u7d50\u305b\u305a\u3001\u6587\u307e\u305f\u306f\u5f0f\u306e\u4e00\u90e8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u8a00\u8a9e\u8981\u7d20\u3067\u3059\u3002\u307e\u305f\u3001\u5f0f\u306e\u6700\u5927\u306e\u7279\u5fb4\u3068\u3057\u3066\u3001\u5024\u3092\u8fd4\u3059\u3068\u3044\u3046\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff08\u6587\u306f\u5024\u3092\u8fd4\u3057\u307e\u305b\u3093\uff09\u3002\u4f8b\u3048\u3070\u3001\u5b9a\u6570\u5f0f\u306f\u305d\u306e\u5024\u305d\u306e\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\u6761\u4ef6\u5f0f\u306f\u771f\u507d\u5024(True/False)\u3092\u8fd4\u3059\u5f0f\u3067\u3059\u3002\u6761\u4ef6\u5f0f\u306e\u4e00\u3064\u3068\u3057\u3066\u6bd4\u8f03\u5f0f\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6761\u4ef6\u5f0f\u305d\u306e\u3082\u306e\u306fTrue/False\u3092\u8fd4\u305b\u3070\u306a\u3093\u3067\u3082\u3088\u3044\u305f\u3081\u3001\u5358\u306a\u308bBoolean\u306eTrue(\u5b9a\u6570\u5f0f)\u3082\u307e\u305f\u6761\u4ef6\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\u6bd4\u8f03\u5f0f\u306f\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u631f\u3093\u3067\u5de6\u8fba\u3068\u53f3\u8fba\u306e\u5f0f\u3092\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c\u3092True/False\u3067\u8fd4\u3059\u305f\u3081\u3001\u6761\u4ef6\u5f0f\u306b\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306bevaluate argument\u3068\u306f\u7c21\u5358\u306b\u8a00\u3048\u3070calling function\u3092\u610f\u5473\u3059\u308b\u3002\u95a2\u6570\u306e\u62ec\u5f27\u306e\u4e2d\u306e\u5f15\u6570\u3092\u5b9f\u969b\u306b\u5f15\u304d\u6e21\u3059\u3068\u304d\u306b\u8d77\u3053\u308b\u3002evaluate function\u306fcalling function\u3068\u306f\u7570\u306a\u308b\u3002\u3053\u308c\u306f\u305f\u3060\u5358\u306b\u95a2\u6570\u304c\u3042\u308b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u3060\u3051\u3002\u306a\u306e\u3067\u6b63\u3057\u3044\u9806\u756a\u306fevaluate function\u2192evaluate argument\u2192function gets called\u3068\u306a\u308b\u3002\n\n\u8ffd\u8a18\n\u308f\u3056\u308f\u3056\u63a2\u3055\u306a\u304f\u3068\u3082\u6b21\u306e\u8b1b\u7fa9\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u4e00\u5fdc\uff08\u7b11\uff09\n\nan expression describes a computation and evaluates to a value. all expressions can use function call notation\n\nadd ( 2 , 3)\u3068\u3044\u3046call expression\u306f\u305d\u308c\u305e\u308c\u4e00\u3064\u4e00\u3064\u304cexpression\u3067\u3082\u3042\u308b\u3002add\u306foperator\u3001()\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u306foperand\u3068\u547c\u3070\u308c\u308b\u3002call expression\u306f\u307e\u305aoperator\u3068operand\u306e\u8a8d\u8b58\u3057\u3001operand\u3092argument\u3068\u3057\u3066\u6271\u3044function\u3092\u7528\u3044\u3066value\u3092\u3060\u3059\u3002\u3061\u306a\u307f\u306b\u81ea\u660e\u3067\u306f\u3042\u308b\u304c\u3053\u308c\u306f2 + 3\u3068\u8868\u3059\u3053\u3068\u3082\u51fa\u6765\u308b\u3002add(2,3)\u304b\u30892 + 3\u3078\u3068\u5909\u63db\u3059\u308b\u3053\u3068\u3092syntactic sugar\u3068\u547c\u3076\u3002\u307e\u305f\u6570\u5b66\u3067\u4f7f\u308f\u308c\u308b\u30b5\u30a4\u30f3+, *, - or /\u3092infix notation\u3068\u547c\u3076\u3002\n\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u306f\u4e0a\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u304c\u3053\u3061\u3089\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u4e00\u90e8\u8ee2\u8f09\n\nExecuting x = 2 does not return a value nor evaluate a function on some arguments, since the purpose of assignment is instead to bind a name to a value. In general, statements are not evaluated but executed; they do not produce a value but instead make some change. Each type of expression or statement has its own evaluation or execution procedure.\n\n\n\u8ffd\u8a18#2\nreading\u306e\"Statements\" section\u3088\u308a\u8ee2\u8f09\n\nExpressions can also be executed as statements, in which case they are evaluated, but their value is discarded. Executing a pure function has no effect, but executing a non-pure function can cause effects as a consequence of function application.\n\nref: pure function\u3068non-pure function\u306e\u9055\u3044\ndef square(x):\n    mul(x, x)# Watch out! This call doesn't return a value.\n\nexpression\u3082statement\u3068\u540c\u69d8\u3001\u51e6\u7406\u306f\u884c\u308f\u308c\u307e\u3059\u304c\u3001value\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u3053\u3067assignment, def, and return statements\u306a\u3069\u3068\u5408\u308f\u305b\u3066value\u3092\u51fa\u3057\u307e\u3059\u3002\n\n\u8ffd\u8a18#3\n\u5f8c\u306e\u8b1b\u7fa9\u3067\u6559\u6388\u304cexpression\u3068statement\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u3066\u3044\u305f\u306e\u3092\u5143\u306b\u500b\u4eba\u7684\u306b\u7c21\u5358\u306a\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u53c2\u8003\u307e\u3067\u3002\n\n#\u7d4c\u7def\n\n\u5b66\u6821\u306e\u5bbf\u984c\u3067[reading](http://composingprograms.com/pages/11-getting-started.html)\u304c\u51fa\u3066\u3044\u308b\u306e\u3067\u8aad\u3093\u3067\u3044\u305f\u3089`expressions`\u3068`statements`\u3068\u3044\u3046\u6982\u5ff5\u306b\u3076\u3064\u304b\u308b\u3002\u8aad\u3093\u3067\u3082\u3044\u307e\u3044\u3061\u9055\u3044\u304c\u30d4\u30f3\u3068\u3053\u306a\u3044\u306e\u3067\u8abf\u3079\u3066\u307f\u308b\u3053\u3068\u306b\u3002~~\u5b66\u6821\u5074\u3082\u3053\u308c\u3060\u3051\u8aad\u3093\u3067\u5168\u90e8\u7406\u89e3\u3057\u308d\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u4fe1\u3058\u3066\u308b\u2026~~\n\n#def. of statements\uff08\u6587\uff09and expressions\uff08\u5f0f\uff09\n[reading](http://composingprograms.com/pages/11-getting-started.html)\u306b\u3088\u308b\u5b9a\u7fa9\u306f\n\n> \nStatements typically describe actions. When the Python interpreter executes a statement, it carries out the corresponding action.\n\n\u3063\u3066\u3053\u3068\u306f`x = 1`\u3068\u304b`y = \"apple\"`\u3068\u304b\u3092\u610f\u5473\u3057\u3066\u308b\u306e\uff1f\u3063\u3066\u3044\u3046\u306e\u304c\u81ea\u5206\u306e\u89e3\u91c8\u3067\u3057\u305f\u304c\u3001[stackoverflow](http://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python)\u306b\u306f\n\n>\nExpressions only contain identifiers, literals and operators, where operators include arithmetic and boolean operators, the function call operator () the subscription operator [] and similar, and can be reduced to some kind of \"value\", which can be any Python object. Statements (see 1, 2), on the other hand, are everything that can make up a line (or several lines) of Python code.\n\n\u3063\u3066\u3053\u3068\u306f`expressions`\u306f`statements`\u3068\u3057\u3066\u3082\u6349\u3048\u3089\u308c\u308b\u3063\u3066\u3053\u3068\u306b\u306a\u308b\u3002`expression`\u3060\u3051\u3067\u5b8c\u7d50\u3055\u305b\u3089\u308c\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u4e00\u65b9\u3067`statement`\u306f\uff08[\u3053\u306e\u8fba](https://docs.python.org/2/reference/simple_stmts.html)\u3092\u8aad\u3093\u3067\u308b\u3068\u4f59\u8a08\u305d\u3046\u601d\u308f\u305b\u308b\uff09\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068\u4ed6\u306e\u30d6\u30ed\u30c3\u30af\u3068\u4e0a\u624b\u304f\u7e4b\u304c\u3063\u3066\u52d5\u304f\u3068\u3044\u3046\u5370\u8c61\u3002`statement`\u306e\u4e2d\u306b\u306f\u307b\u307c\u78ba\u5b9f\u306b`expression`\u304c\u3042\u308b\u3002\n\n[quora](https://www.quora.com/Whats-the-difference-between-a-statement-and-an-expression-in-Python)\u3088\u308a\n\n>A statement is a complete line of code that performs some action, while an expression is any section of the code that evaluates to a value. Expressions can be combined \u201chorizontally\u201d into larger expressions using operators, while statements can only be combined \u201cvertically\u201d by writing one after another, or with block constructs. Every expression can be used as a statement (whose effect is to evaluate the expression and ignore the resulting value), but most statements cannot be used as expressions. \n\n\u307e\u305f\u3053\u3061\u3089\u306e[stackoverflow](http://stackoverflow.com/questions/4782590/what-is-an-expression-in-python)\u306e`expression`\u306b\u5bfe\u3059\u308b\u89e3\u7b54\u3082\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\n>\nExpressions represent something, like a number, a string, or an instance of a class. Any value is an expression!\nAnything that does something is a statement. Any assignment to a variable or function call is a statement. Any value \ncontained in that statement in an expression. \n\n>`foo = \"hello\"` is a statement that assigns foo to the value of the expression `\"hello\"`. Since the code `\"hello\"` is a simple expression, meaning it contains no operations, nothing is actually evaluated, so foo is just assigned to `\"hello\"`. More complex expressions actually evaluate things, like adding numbers. Using the word expression seems like it is making things more confusing. Expressions are nothing but values, except they can have operations like addition or subtraction.\n\n>`eval` evaluates the string as if it were a python expression. `Eval` does takes an expression as an argument. However, there's nothing special about this since every single value is an expression. Saying \"eval takes a value as an argument\" is saying exactly the same thing, but it sounds much simpler. :D\n`eval( \"2+2\" )` passes the string `\"2+2\"` to the function. The function evaluates the expression contained in the string, which comes out to 4.\n\n>The book by Zelle says eval(<string>) evaluates string as an expression, what does that exactly mean if string is already an expression?\n\n>Any string is an expression since it represents a value. However, what is in the string has absolutely no impact on it being an expression. If its a value, its an expression. When it is \"evaluated as an expression by eval\", the characters inside the string are executed as if they were a python expression.\n\n\u3055\u3089\u306b[\u3053\u3053](http://d.hatena.ne.jp/yone-ken/20090421/p1)\u3067\u3082\n\n>\n\u6587\u306f\u305d\u308c\u5358\u72ec\u3067\u5b8c\u7d50\u3059\u308b\u8a00\u8a9e\u8981\u7d20\u3067\u3059\u3002\u5f0f\u306f\u305d\u308c\u5358\u72ec\u3067\u306f\u57fa\u672c\u7684\u306b\u5b8c\u7d50\u305b\u305a\u3001\u6587\u307e\u305f\u306f\u5f0f\u306e\u4e00\u90e8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u8a00\u8a9e\u8981\u7d20\u3067\u3059\u3002\u307e\u305f\u3001\u5f0f\u306e\u6700\u5927\u306e\u7279\u5fb4\u3068\u3057\u3066\u3001\u5024\u3092\u8fd4\u3059\u3068\u3044\u3046\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff08\u6587\u306f\u5024\u3092\u8fd4\u3057\u307e\u305b\u3093\uff09\u3002\u4f8b\u3048\u3070\u3001\u5b9a\u6570\u5f0f\u306f\u305d\u306e\u5024\u305d\u306e\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\u6761\u4ef6\u5f0f\u306f\u771f\u507d\u5024(True/False)\u3092\u8fd4\u3059\u5f0f\u3067\u3059\u3002\u6761\u4ef6\u5f0f\u306e\u4e00\u3064\u3068\u3057\u3066\u6bd4\u8f03\u5f0f\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6761\u4ef6\u5f0f\u305d\u306e\u3082\u306e\u306fTrue/False\u3092\u8fd4\u305b\u3070\u306a\u3093\u3067\u3082\u3088\u3044\u305f\u3081\u3001\u5358\u306a\u308bBoolean\u306eTrue(\u5b9a\u6570\u5f0f)\u3082\u307e\u305f\u6761\u4ef6\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\u6bd4\u8f03\u5f0f\u306f\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u631f\u3093\u3067\u5de6\u8fba\u3068\u53f3\u8fba\u306e\u5f0f\u3092\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c\u3092True/False\u3067\u8fd4\u3059\u305f\u3081\u3001\u6761\u4ef6\u5f0f\u306b\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b__`evaluate argument`\u3068\u306f\u7c21\u5358\u306b\u8a00\u3048\u3070`calling function`\u3092\u610f\u5473\u3059\u308b__\u3002\u95a2\u6570\u306e\u62ec\u5f27\u306e\u4e2d\u306e\u5f15\u6570\u3092\u5b9f\u969b\u306b\u5f15\u304d\u6e21\u3059\u3068\u304d\u306b\u8d77\u3053\u308b\u3002__`evaluate function`\u306f`calling function`\u3068\u306f\u7570\u306a\u308b__\u3002\u3053\u308c\u306f\u305f\u3060\u5358\u306b\u95a2\u6570\u304c\u3042\u308b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u3060\u3051\u3002\u306a\u306e\u3067\u6b63\u3057\u3044\u9806\u756a\u306f`evaluate function`\u2192`evaluate argument`\u2192`function gets called`\u3068\u306a\u308b\u3002\n\n#\u8ffd\u8a18\n\n\u308f\u3056\u308f\u3056\u63a2\u3055\u306a\u304f\u3068\u3082\u6b21\u306e[\u8b1b\u7fa9](https://www.youtube.com/watch?v=vguCdBIHQmI)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u4e00\u5fdc\uff08\u7b11\uff09\n\n>an expression describes a computation and evaluates to a value. all expressions can use function call notation\n\n`add ( 2 , 3)`\u3068\u3044\u3046`call expression`\u306f\u305d\u308c\u305e\u308c\u4e00\u3064\u4e00\u3064\u304c`expression`\u3067\u3082\u3042\u308b\u3002`add`\u306f`operator`\u3001`()`\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u306f`operand`\u3068\u547c\u3070\u308c\u308b\u3002`call expression`\u306f\u307e\u305a`operator`\u3068`operand`\u306e\u8a8d\u8b58\u3057\u3001`operand`\u3092`argument`\u3068\u3057\u3066\u6271\u3044`function`\u3092\u7528\u3044\u3066`value`\u3092\u3060\u3059\u3002\u3061\u306a\u307f\u306b\u81ea\u660e\u3067\u306f\u3042\u308b\u304c\u3053\u308c\u306f`2 + 3`\u3068\u8868\u3059\u3053\u3068\u3082\u51fa\u6765\u308b\u3002`add(2,3)`\u304b\u3089`2 + 3`\u3078\u3068\u5909\u63db\u3059\u308b\u3053\u3068\u3092__syntactic sugar__\u3068\u547c\u3076\u3002\u307e\u305f\u6570\u5b66\u3067\u4f7f\u308f\u308c\u308b\u30b5\u30a4\u30f3`+, *, - or /`\u3092__infix notation__\u3068\u547c\u3076\u3002\n\n\u66f8\u3044\u3066\u3042\u308b\u3053\u3068\u306f\u4e0a\u3068\u5168\u304f\u540c\u3058\u3067\u3059\u304c[\u3053\u3061\u3089](http://composingprograms.com/pages/12-elements-of-programming.html)\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u4e00\u90e8\u8ee2\u8f09\n\n>\nExecuting `x = 2` does not return a value nor evaluate a function on some arguments, since the purpose of assignment is instead to bind a name to a value. In general, statements are not evaluated but executed; they do not produce a value but instead make some change. Each type of expression or statement has its own evaluation or execution procedure.\n\n#\u8ffd\u8a18#2\n\n<a href=\"http://composingprograms.com/pages/15-control.html#statements\" target=\"_blank\">reading\u306e\"Statements\" section</a>\u3088\u308a\u8ee2\u8f09\n>Expressions can also be executed as statements, in which case they are evaluated, but their value is discarded. Executing a pure function has no effect, but executing a non-pure function can cause effects as a consequence of function application.\n\nref: <a href=\"http://qiita.com/weedslayer/items/9ac165613bc896a1aaa1\">pure function\u3068non-pure function\u306e\u9055\u3044</a>\n\n```\ndef square(x):\n    mul(x, x)# Watch out! This call doesn't return a value.\n```\n\n`expression`\u3082`statement`\u3068\u540c\u69d8\u3001\u51e6\u7406\u306f\u884c\u308f\u308c\u307e\u3059\u304c\u3001`value`\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u3053\u3067`assignment, def, and return statements`\u306a\u3069\u3068\u5408\u308f\u305b\u3066`value`\u3092\u51fa\u3057\u307e\u3059\u3002\n\n#\u8ffd\u8a18#3\n\n\u5f8c\u306e\u8b1b\u7fa9\u3067\u6559\u6388\u304c`expression`\u3068`statement`\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u3066\u3044\u305f\u306e\u3092\u5143\u306b\u500b\u4eba\u7684\u306b\u7c21\u5358\u306a\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u53c2\u8003\u307e\u3067\u3002\n\n![Screen Shot 2016-01-31 at 2.18.24 AM.png](https://qiita-image-store.s3.amazonaws.com/0/87666/25899b82-5997-5114-15b9-ebdde5e0ea85.png)\n\n", "tags": ["expression", "statement", "Python", "difference"]}