{"context": " More than 1 year has passed since last update.\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8[6 Port drivers]\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\n\n6 \u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u63a5\u7d9a\u3092\u4f7f\u3063\u305f\u4f8b\u984c\u306e\u89e3\u6c7a\u65b9\u6cd5\u306e\u4f8b\n\nFigure 6.1:   \u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u901a\u4fe1\n\n6.1  Port Drivers\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306fErlang\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30dd\u30fc\u30c8\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u30c9\u30e9\u30a4\u30d0\u306b\u63a5\u7d9a\u3059\u308b\u3002\u30c9\u30e9\u30a4\u30d0\u306f\u30b7\u30a7\u30a2\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\uff08Unix\u306fSO\u30d5\u30a1\u30a4\u30eb\u3001Windows\u306fDLL\u30d5\u30a1\u30a4\u30eb\uff09\u3067\u3001\u7279\u5225\u306a\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3064\u3002Erlang\u306e\u30e9\u30f3\u30bf\u30a4\u30e0\u306f\u30c9\u30e9\u30a4\u30d0\u3092\u958b\u59cb\u3059\u308b\u3068\u304d\u3068\u30dd\u30fc\u30c8\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\u306b\u3053\u308c\u3089\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u547c\u3073\u51fa\u3059\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306fErlang\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306f\u4eee\u60f3\u7684\u306a\u30d7\u30ed\u30bb\u30b9\uff08 emulator process \uff09\u3078\u52d5\u7684\u306b\u63a5\u7d9a\u3059\u308b\u306e\u3067\u3001Erlang\u304b\u3089C\u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u306e\u4e2d\u3067\u6700\u3082\u65e9\u3044\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e\u4e2d\u306e\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u8981\u6c42\u3057\u306a\u3044\u3002\u3057\u304b\u3057\u3001\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3068\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u3082\u843d\u3061\u308b\u306e\u3067\u3001\u6700\u3082\u5371\u967a\u306a\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\n6.2 Erlang\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u65b9\u6cd5\u3067\u3001\u30dd\u30fc\u30c8\u304cErlang\u30d7\u30ed\u30bb\u30b9\u3068\u901a\u4fe1\u3059\u308b\u3002\u5168\u3066\u306e\u901a\u4fe1\u306f\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e \u7e4b\u304c\u3063\u305fErlang\u30d7\u30ed\u30bb\u30b9 \u3092\u901a\u308b\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3059\u308b\u3068\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u3082\u9589\u3058\u308b\u3002\n\u30dd\u30fc\u30c8\u304c\u4f5c\u3089\u308c\u308b\u524d\u306b\u30c9\u30e9\u30a4\u30d0\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u95a2\u6570 erl_dll:load_driver/1 \u3067\u884c\u3046\u3002\u5f15\u6570\u3068\u3057\u3066\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u540d\u524d\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u30dd\u30fc\u30c8\u306fBIF open_port/2 \u3092\u4f7f\u3063\u3066\u4f5c\u3089\u308c\u308b\u3002\u7b2c\u4e00\u5f15\u6570\u306f\u30bf\u30d7\u30eb {spawn, DriverName} \u3067\u3042\u308b\u3002\u5909\u6570 SharedLib \u306f\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e\u540d\u524d\u3067\u3042\u308b\u3002\u7b2c2\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u3067\u3001\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u7a7a\u3067\u3042\u308b\u3002\n-module(complex5).\n-export([start/1, init/1]).\n\nstart(SharedLib) ->\n    case erl_ddll:load_driver(\".\", SharedLib) of\n        ok -> ok;\n        {error, already_loaded} -> ok;\n        _ -> exit({error, could_not_load_driver})\n    end,\n    spawn(?MODULE, init, [SharedLib]).\n\ninit(SharedLib) ->\n  register(complex, self()),\n  Port = open_port({spawn, SharedLib}, []),\n  loop(Port).\n\n\u4eca\u3001 complex5:foo/1 \u3068 complex5:bar/1 \u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u305d\u308c\u3089\u306f\u4e21\u65b9\u3068\u3082 complex \u30d7\u30ed\u30bb\u30b9\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u8fd4\u4fe1\u3092\u53d7\u3051\u53d6\u308b\u3002\nfoo(X) ->\n    call_port({foo, X}).\nbar(Y) ->\n    call_port({bar, Y}).\n\ncall_port(Msg) ->\n    complex ! {call, self(), Msg},\n    receive\n        {complex, Result} ->\n            Result\n    end.\n\ncomplex \u30d7\u30ed\u30bb\u30b9\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d0\u30a4\u30c8\u5217\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001\u30dd\u30fc\u30c8\u3078\u9001\u308a\u3001\u8fd4\u4fe1\u3092\u5f85\u3061\u3001\u8fd4\u4fe1\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u547c\u3073\u51fa\u3057\u5143\u3078\u305d\u308c\u3092\u9001\u308a\u8fd4\u3059\u3002\nloop(Port) ->\n    receive\n        {call, Caller, Msg} ->\n            Port ! {self(), {command, encode(Msg)}},\n            receive\n                {Port, {data, Data}} ->\n                    Caller ! {complex, decode(Data)}\n            end,\n            loop(Port)\n    end.\n\n\u4e21\u65b9\u306e\u5f15\u6570\u3068C\u95a2\u6570\u304b\u3089\u306e\u7d50\u679c\u306e\u4e21\u65b9\u304c256\u30d0\u30a4\u30c8\u672a\u6e80\u3068\u4eee\u5b9a\u3059\u308b\u3068\u975e\u5e38\u306b\u5358\u7d14\u306a\u30a8\u30f3\u30b3\u30fc\u30c9/\u30c7\u30b3\u30fc\u30c9\u65b9\u5f0f\u304c\u63a1\u7528\u3055\u308c\u308b\u3002 foo \u306f\u30d0\u30a4\u30c8\u306e1\u3067\u8868\u3055\u308c\u3001 bar \u306f\u30d0\u30a4\u30c8\u306e2\u3067\u8868\u3055\u308c\u3001\u5f15\u6570\u3068\u7d50\u679c\u3082\u540c\u69d8\u306b\u5358\u7d14\u306a\u30d0\u30a4\u30c8\u3067\u8868\u3055\u308c\u308b\u3002\nencode({foo, X}) -> [1, X];\nencode({bar, Y}) -> [2, Y].\n\ndecode([Int]) -> Int.\n\n\u30dd\u30fc\u30c8\u3092\u505c\u6b62\u3057\u3066\u30dd\u30fc\u30c8\u306e\u969c\u5bb3\u3092\u691c\u77e5\u3059\u308b\u6a5f\u80fd\u3092\u542b\u3080Erlang\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n-module(complex5).\n-export([start/1, stop/0, init/1]).\n-export([foo/1, bar/1]).\n\nstart(SharedLib) ->\n    case erl_ddll:load_driver(\".\", SharedLib) of\n    ok -> ok;\n    {error, already_loaded} -> ok;\n    _ -> exit({error, could_not_load_driver})\n    end,\n    spawn(?MODULE, init, [SharedLib]).\n\ninit(SharedLib) ->\n    register(complex, self()),\n    Port = open_port({spawn, SharedLib}, []),\n    loop(Port).\n\nstop() ->\n    complex ! stop.\n\nfoo(X) ->\n    call_port({foo, X}).\nbar(Y) ->\n    call_port({bar, Y}).\n\ncall_port(Msg) ->\n    complex ! {call, self(), Msg},\n    receive\n    {complex, Result} ->\n        Result\n    end.\n\nloop(Port) ->\n    receive\n    {call, Caller, Msg} ->\n        Port ! {self(), {command, encode(Msg)}},\n        receive\n        {Port, {data, Data}} ->\n            Caller ! {complex, decode(Data)}\n        end,\n        loop(Port);\n    stop ->\n        Port ! {self(), close},\n        receive\n        {Port, closed} ->\n            exit(normal)\n        end;\n    {'EXIT', Port, Reason} ->\n        io:format(\"~p ~n\", [Reason]),\n        exit(port_terminated)\n    end.\n\nencode({foo, X}) -> [1, X];\nencode({bar, Y}) -> [2, Y].\n\ndecode([Int]) -> Int.\n\n\n6.3  C\u30c9\u30e9\u30a4\u30d0\nC\u30c9\u30e9\u30a4\u30d0\u306f\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\u3002\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u3092\u4f7f\u3044\u3001 erl_driver.h \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u306f\u30c9\u30e9\u30a4\u30d0\u306e\u540d\u524d\u3068\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\u7279\u5225\u306a\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8fd4\u3057\u3001 DRIVER_INIT(<driver_name>) \u3092\u5ba3\u8a00\u3059\u308b\u3002\n\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3059\u308b\u6a5f\u80fd\u306f\u3001\u95a2\u6570\u306b\u7d50\u5408\u3055\u308c\u3001\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u306b\u3088\u3063\u3066\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u3002\u30dd\u30fc\u30c8\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\u306f\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u3001\u30dd\u30fc\u30c8\u304c\u9001\u308a\u8fd4\u3057\u305f\u30c7\u30fc\u30bf\u306fC\u306e\u95a2\u6570\u306e driver_output \u3067\u9001\u3089\u308c\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u306f\u5171\u6709\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u306a\u3044\uff09\u306e\u3067\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306f\u3042\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u3002\u3059\u3079\u3066\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f\u3001\u3053\u306e\u4f8b\u3067\u4f7f\u7528\u3055\u308c\u3066\u304a\u3089\u305a\u3001driver_entry\u69cb\u9020\u5185\u306e\u5bfe\u5fdc\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306fNULL\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u5185\u306e\u5168\u3066\u306e\u95a2\u6570\u306f\n\u30c9\u30e9\u30a4\u30d0\u306e\u5168\u3066\u306e\u6a5f\u80fd\u306f\u3001\uff08 start \u304b\u3089\u8fd4\u3055\u308c\u308b\uff09\u3001\u30cf\u30f3\u30c9\u30eb\u306b\u3088\u3063\u3066\u6301\u3064\u3002\u305d\u308c\u306f\u305f\u3060Erlang\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u3063\u3066\u6e21\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\nexample_drv_start\u306f\u3001\u30dd\u30fc\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u305f\u3081\u306b\u30cf\u30f3\u30c9\u30eb\u3092\u547c\u3073\u51fa\u3059\u552f\u4e00\u306e\u95a2\u6570\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u5b88\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u305f\u3081\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30c9\u30e9\u30a4\u30d0\u5b9a\u7fa9\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u7528\u3057\u3001\u53c2\u7167\u3068\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3092\u623b\u3059\u306e\u304c\u666e\u901a\u3067\u3042\u308b\u3002\n\u3053\u308c\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u306e\u306f\u826f\u304f\u306a\u3044\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306f\u3001\u8907\u6570\u306eErlang\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u3063\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u306e\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u4f53\u304c\u6bce\u56de\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002\nTODO: ErlDrvEntry\u306e\u30b3\u30e1\u30f3\u30c8\n\nport_driver.c\n#include <stdio.h>\n#include \"erl_driver.h\"\n\ntypedef struct {\n    ErlDrvPort port;\n} example_data;\n\nstatic ErlDrvData example_drv_start(ErlDrvPort port, char *buff)\n{\n    example_data* d = (example_data*)driver_alloc(sizeof(example_data));\n    d->port = port;\n    return (ErlDrvData)d;\n}\n\nstatic void example_drv_stop(ErlDrvData handle)\n{\n    driver_free((char*)handle);\n}\n\nstatic void example_drv_output(ErlDrvData handle, char *buff, \n                   ErlDrvSizeT bufflen)\n{\n    example_data* d = (example_data*)handle;\n    char fn = buff[0], arg = buff[1], res;\n    if (fn == 1) {\n      res = foo(arg);\n    } else if (fn == 2) {\n      res = bar(arg);\n    }\n    driver_output(d->port, &res, 1);\n}\n\nErlDrvEntry example_driver_entry = {\n    NULL,           /* F_PTR init, called when driver is loaded */\n    example_drv_start,      /* L_PTR start, called when port is opened */\n    example_drv_stop,       /* F_PTR stop, called when port is closed */\n    example_drv_output,     /* F_PTR output, called when erlang has sent */\n    NULL,           /* F_PTR ready_input, called when input descriptor ready */\n    NULL,           /* F_PTR ready_output, called when output descriptor ready */\n    \"example_drv\",      /* char *driver_name, the argument to open_port */\n    NULL,           /* F_PTR finish, called when unloaded */\n    NULL,                       /* void *handle, Reserved by VM */\n    NULL,           /* F_PTR control, port_command callback */\n    NULL,           /* F_PTR timeout, reserved */\n    NULL,           /* F_PTR outputv, reserved */\n    NULL,                       /* F_PTR ready_async, only for async drivers */\n    NULL,                       /* F_PTR flush, called when port is about \n                   to be closed, but there is data in driver \n                   queue */\n    NULL,                       /* F_PTR call, much like control, sync call\n                   to driver */\n    NULL,                       /* F_PTR event, called when an event selected \n                   by driver_event() occurs. */\n    ERL_DRV_EXTENDED_MARKER,    /* int extended marker, Should always be \n                   set to indicate driver versioning */\n    ERL_DRV_EXTENDED_MAJOR_VERSION, /* int major_version, should always be \n                       set to this value */\n    ERL_DRV_EXTENDED_MINOR_VERSION, /* int minor_version, should always be \n                       set to this value */\n    0,                          /* int driver_flags, see documentation */\n    NULL,                       /* void *handle2, reserved for VM use */\n    NULL,                       /* F_PTR process_exit, called when a \n                   monitored process dies */\n    NULL                        /* F_PTR stop_select, called to close an \n                   event object */\n};\n\nDRIVER_INIT(example_drv) /* must match name in driver_entry */\n{\n    return &example_driver_entry;\n}\n\n\n\n6.4 \u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\n\n1. Compile the C code.\nunix> gcc -o exampledrv -fpic -shared complex.c port_driver.c\nwindows> cl -LD -MD -Fe exampledrv.dll complex.c port_driver.c\n\n\n2. Start Erlang and compile the Erlang code.\n> erl\nErlang (BEAM) emulator version 5.1\n\nEshell V5.1 (abort with ^G)\n1> c(complex5).\n{ok,complex5}\n\n\n3. Run the example.\n2> complex5:start(\"example_drv\").\n<0.34.0>\n3> complex5:foo(3).\n4\n4> complex5:bar(5).\n10\n5> complex5:stop().\nstop\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8[6 Port drivers]](http://www.erlang.org/doc/tutorial/c_portdriver.html)\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\n---\n\n# 6 \u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u63a5\u7d9a\u3092\u4f7f\u3063\u305f[\u4f8b\u984c](http://www.erlang.org/doc/tutorial/example.html)\u306e\u89e3\u6c7a\u65b9\u6cd5\u306e\u4f8b\n![port_driver](http://www.erlang.org/doc/tutorial/port_driver.gif)\n**Figure 6.1**:   \u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u901a\u4fe1\n\n## 6.1  Port Drivers\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306fErlang\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30dd\u30fc\u30c8\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u30c9\u30e9\u30a4\u30d0\u306b\u63a5\u7d9a\u3059\u308b\u3002\u30c9\u30e9\u30a4\u30d0\u306f\u30b7\u30a7\u30a2\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\uff08Unix\u306fSO\u30d5\u30a1\u30a4\u30eb\u3001Windows\u306fDLL\u30d5\u30a1\u30a4\u30eb\uff09\u3067\u3001\u7279\u5225\u306a\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3064\u3002Erlang\u306e\u30e9\u30f3\u30bf\u30a4\u30e0\u306f\u30c9\u30e9\u30a4\u30d0\u3092\u958b\u59cb\u3059\u308b\u3068\u304d\u3068\u30dd\u30fc\u30c8\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\u306b\u3053\u308c\u3089\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u547c\u3073\u51fa\u3059\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306fErlang\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306f\u4eee\u60f3\u7684\u306a\u30d7\u30ed\u30bb\u30b9\uff08 _emulator process_ \uff09\u3078\u52d5\u7684\u306b\u63a5\u7d9a\u3059\u308b\u306e\u3067\u3001Erlang\u304b\u3089C\u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u306e\u4e2d\u3067\u6700\u3082\u65e9\u3044\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e\u4e2d\u306e\u547c\u3073\u51fa\u3055\u308c\u305f\u95a2\u6570\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b9\u30a4\u30c3\u30c1\u3092\u8981\u6c42\u3057\u306a\u3044\u3002\u3057\u304b\u3057\u3001\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3068\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u3082\u843d\u3061\u308b\u306e\u3067\u3001\u6700\u3082\u5371\u967a\u306a\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\n## 6.2 Erlang\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30dd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u65b9\u6cd5\u3067\u3001\u30dd\u30fc\u30c8\u304cErlang\u30d7\u30ed\u30bb\u30b9\u3068\u901a\u4fe1\u3059\u308b\u3002\u5168\u3066\u306e\u901a\u4fe1\u306f\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e **\u7e4b\u304c\u3063\u305fErlang\u30d7\u30ed\u30bb\u30b9** \u3092\u901a\u308b\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u4e86\u3059\u308b\u3068\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u3082\u9589\u3058\u308b\u3002\n\u30dd\u30fc\u30c8\u304c\u4f5c\u3089\u308c\u308b\u524d\u306b\u30c9\u30e9\u30a4\u30d0\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u95a2\u6570 `erl_dll:load_driver/1` \u3067\u884c\u3046\u3002\u5f15\u6570\u3068\u3057\u3066\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u540d\u524d\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u30dd\u30fc\u30c8\u306fBIF `open_port/2` \u3092\u4f7f\u3063\u3066\u4f5c\u3089\u308c\u308b\u3002\u7b2c\u4e00\u5f15\u6570\u306f\u30bf\u30d7\u30eb `{spawn, DriverName}` \u3067\u3042\u308b\u3002\u5909\u6570 `SharedLib` \u306f\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306e\u540d\u524d\u3067\u3042\u308b\u3002\u7b2c2\u5f15\u6570\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u3067\u3001\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u7a7a\u3067\u3042\u308b\u3002\n\n```erlang\n-module(complex5).\n-export([start/1, init/1]).\n\nstart(SharedLib) ->\n    case erl_ddll:load_driver(\".\", SharedLib) of\n        ok -> ok;\n        {error, already_loaded} -> ok;\n        _ -> exit({error, could_not_load_driver})\n    end,\n    spawn(?MODULE, init, [SharedLib]).\n\ninit(SharedLib) ->\n  register(complex, self()),\n  Port = open_port({spawn, SharedLib}, []),\n  loop(Port).\n```\n\n\u4eca\u3001 `complex5:foo/1` \u3068 `complex5:bar/1` \u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u305d\u308c\u3089\u306f\u4e21\u65b9\u3068\u3082 `complex` \u30d7\u30ed\u30bb\u30b9\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u8fd4\u4fe1\u3092\u53d7\u3051\u53d6\u308b\u3002\n\n```erlang\nfoo(X) ->\n    call_port({foo, X}).\nbar(Y) ->\n    call_port({bar, Y}).\n\ncall_port(Msg) ->\n    complex ! {call, self(), Msg},\n    receive\n        {complex, Result} ->\n            Result\n    end.\n```\n\n`complex` \u30d7\u30ed\u30bb\u30b9\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d0\u30a4\u30c8\u5217\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001\u30dd\u30fc\u30c8\u3078\u9001\u308a\u3001\u8fd4\u4fe1\u3092\u5f85\u3061\u3001\u8fd4\u4fe1\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u547c\u3073\u51fa\u3057\u5143\u3078\u305d\u308c\u3092\u9001\u308a\u8fd4\u3059\u3002\n\n```erlang\nloop(Port) ->\n    receive\n        {call, Caller, Msg} ->\n            Port ! {self(), {command, encode(Msg)}},\n            receive\n                {Port, {data, Data}} ->\n                    Caller ! {complex, decode(Data)}\n            end,\n            loop(Port)\n    end.\n```\n\n\u4e21\u65b9\u306e\u5f15\u6570\u3068C\u95a2\u6570\u304b\u3089\u306e\u7d50\u679c\u306e\u4e21\u65b9\u304c256\u30d0\u30a4\u30c8\u672a\u6e80\u3068\u4eee\u5b9a\u3059\u308b\u3068\u975e\u5e38\u306b\u5358\u7d14\u306a\u30a8\u30f3\u30b3\u30fc\u30c9/\u30c7\u30b3\u30fc\u30c9\u65b9\u5f0f\u304c\u63a1\u7528\u3055\u308c\u308b\u3002 `foo` \u306f\u30d0\u30a4\u30c8\u306e1\u3067\u8868\u3055\u308c\u3001 `bar` \u306f\u30d0\u30a4\u30c8\u306e2\u3067\u8868\u3055\u308c\u3001\u5f15\u6570\u3068\u7d50\u679c\u3082\u540c\u69d8\u306b\u5358\u7d14\u306a\u30d0\u30a4\u30c8\u3067\u8868\u3055\u308c\u308b\u3002\n\n```erlang\nencode({foo, X}) -> [1, X];\nencode({bar, Y}) -> [2, Y].\n      \ndecode([Int]) -> Int.\n```\n\n\u30dd\u30fc\u30c8\u3092\u505c\u6b62\u3057\u3066\u30dd\u30fc\u30c8\u306e\u969c\u5bb3\u3092\u691c\u77e5\u3059\u308b\u6a5f\u80fd\u3092\u542b\u3080Erlang\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n```erlang\n-module(complex5).\n-export([start/1, stop/0, init/1]).\n-export([foo/1, bar/1]).\n\nstart(SharedLib) ->\n    case erl_ddll:load_driver(\".\", SharedLib) of\n\tok -> ok;\n\t{error, already_loaded} -> ok;\n\t_ -> exit({error, could_not_load_driver})\n    end,\n    spawn(?MODULE, init, [SharedLib]).\n\ninit(SharedLib) ->\n    register(complex, self()),\n    Port = open_port({spawn, SharedLib}, []),\n    loop(Port).\n\nstop() ->\n    complex ! stop.\n\nfoo(X) ->\n    call_port({foo, X}).\nbar(Y) ->\n    call_port({bar, Y}).\n\ncall_port(Msg) ->\n    complex ! {call, self(), Msg},\n    receive\n\t{complex, Result} ->\n\t    Result\n    end.\n\nloop(Port) ->\n    receive\n\t{call, Caller, Msg} ->\n\t    Port ! {self(), {command, encode(Msg)}},\n\t    receive\n\t\t{Port, {data, Data}} ->\n\t\t    Caller ! {complex, decode(Data)}\n\t    end,\n\t    loop(Port);\n\tstop ->\n\t    Port ! {self(), close},\n\t    receive\n\t\t{Port, closed} ->\n\t\t    exit(normal)\n\t    end;\n\t{'EXIT', Port, Reason} ->\n\t    io:format(\"~p ~n\", [Reason]),\n\t    exit(port_terminated)\n    end.\n\nencode({foo, X}) -> [1, X];\nencode({bar, Y}) -> [2, Y].\n\ndecode([Int]) -> Int.\n```\n\n## 6.3  C\u30c9\u30e9\u30a4\u30d0\nC\u30c9\u30e9\u30a4\u30d0\u306f\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3055\u308c\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\u3002\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u3092\u4f7f\u3044\u3001 `erl_driver.h` \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u306f\u30c9\u30e9\u30a4\u30d0\u306e\u540d\u524d\u3068\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\u7279\u5225\u306a\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8fd4\u3057\u3001 `DRIVER_INIT(<driver_name>)` \u3092\u5ba3\u8a00\u3059\u308b\u3002\n\u30c7\u30fc\u30bf\u3092\u9001\u53d7\u4fe1\u3059\u308b\u6a5f\u80fd\u306f\u3001\u95a2\u6570\u306b\u7d50\u5408\u3055\u308c\u3001\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u306b\u3088\u3063\u3066\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u3002\u30dd\u30fc\u30c8\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\u306f\u5f15\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u3001\u30dd\u30fc\u30c8\u304c\u9001\u308a\u8fd4\u3057\u305f\u30c7\u30fc\u30bf\u306fC\u306e\u95a2\u6570\u306e `driver_output` \u3067\u9001\u3089\u308c\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u306f\u5171\u6709\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u306a\u3044\uff09\u306e\u3067\u3001\u30e1\u30a4\u30f3\u95a2\u6570\u306f\u3042\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u3002\u3059\u3079\u3066\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f\u3001\u3053\u306e\u4f8b\u3067\u4f7f\u7528\u3055\u308c\u3066\u304a\u3089\u305a\u3001driver_entry\u69cb\u9020\u5185\u306e\u5bfe\u5fdc\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306fNULL\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n\u30c9\u30e9\u30a4\u30d0\u5185\u306e\u5168\u3066\u306e\u95a2\u6570\u306f\n\u30c9\u30e9\u30a4\u30d0\u306e\u5168\u3066\u306e\u6a5f\u80fd\u306f\u3001\uff08 `start` \u304b\u3089\u8fd4\u3055\u308c\u308b\uff09\u3001\u30cf\u30f3\u30c9\u30eb\u306b\u3088\u3063\u3066\u6301\u3064\u3002\u305d\u308c\u306f\u305f\u3060Erlang\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u3063\u3066\u6e21\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\nexample_drv_start\u306f\u3001\u30dd\u30fc\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u305f\u3081\u306b\u30cf\u30f3\u30c9\u30eb\u3092\u547c\u3073\u51fa\u3059\u552f\u4e00\u306e\u95a2\u6570\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u5b88\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u305f\u3081\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30c9\u30e9\u30a4\u30d0\u5b9a\u7fa9\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u7528\u3057\u3001\u53c2\u7167\u3068\u3057\u3066\u30dd\u30a4\u30f3\u30bf\u3092\u623b\u3059\u306e\u304c\u666e\u901a\u3067\u3042\u308b\u3002\n\u3053\u308c\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u306e\u306f\u826f\u304f\u306a\u3044\u3002\u30dd\u30fc\u30c8\u30c9\u30e9\u30a4\u30d0\u306f\u3001\u8907\u6570\u306eErlang\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u3063\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u306e\u30c9\u30e9\u30a4\u30d0\u69cb\u9020\u4f53\u304c\u6bce\u56de\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002\n\n<font color='red'>TODO: ErlDrvEntry\u306e\u30b3\u30e1\u30f3\u30c8</font>\n\n```c:port_driver.c\n#include <stdio.h>\n#include \"erl_driver.h\"\n\ntypedef struct {\n    ErlDrvPort port;\n} example_data;\n\nstatic ErlDrvData example_drv_start(ErlDrvPort port, char *buff)\n{\n    example_data* d = (example_data*)driver_alloc(sizeof(example_data));\n    d->port = port;\n    return (ErlDrvData)d;\n}\n\nstatic void example_drv_stop(ErlDrvData handle)\n{\n    driver_free((char*)handle);\n}\n\nstatic void example_drv_output(ErlDrvData handle, char *buff, \n\t\t\t       ErlDrvSizeT bufflen)\n{\n    example_data* d = (example_data*)handle;\n    char fn = buff[0], arg = buff[1], res;\n    if (fn == 1) {\n      res = foo(arg);\n    } else if (fn == 2) {\n      res = bar(arg);\n    }\n    driver_output(d->port, &res, 1);\n}\n\nErlDrvEntry example_driver_entry = {\n    NULL,\t\t\t/* F_PTR init, called when driver is loaded */\n    example_drv_start,\t\t/* L_PTR start, called when port is opened */\n    example_drv_stop,\t\t/* F_PTR stop, called when port is closed */\n    example_drv_output,\t\t/* F_PTR output, called when erlang has sent */\n    NULL,\t\t\t/* F_PTR ready_input, called when input descriptor ready */\n    NULL,\t\t\t/* F_PTR ready_output, called when output descriptor ready */\n    \"example_drv\",\t\t/* char *driver_name, the argument to open_port */\n    NULL,\t\t\t/* F_PTR finish, called when unloaded */\n    NULL,                       /* void *handle, Reserved by VM */\n    NULL,\t\t\t/* F_PTR control, port_command callback */\n    NULL,\t\t\t/* F_PTR timeout, reserved */\n    NULL,\t\t\t/* F_PTR outputv, reserved */\n    NULL,                       /* F_PTR ready_async, only for async drivers */\n    NULL,                       /* F_PTR flush, called when port is about \n\t\t\t\t   to be closed, but there is data in driver \n\t\t\t\t   queue */\n    NULL,                       /* F_PTR call, much like control, sync call\n\t\t\t\t   to driver */\n    NULL,                       /* F_PTR event, called when an event selected \n\t\t\t\t   by driver_event() occurs. */\n    ERL_DRV_EXTENDED_MARKER,    /* int extended marker, Should always be \n\t\t\t\t   set to indicate driver versioning */\n    ERL_DRV_EXTENDED_MAJOR_VERSION, /* int major_version, should always be \n\t\t\t\t       set to this value */\n    ERL_DRV_EXTENDED_MINOR_VERSION, /* int minor_version, should always be \n\t\t\t\t       set to this value */\n    0,                          /* int driver_flags, see documentation */\n    NULL,                       /* void *handle2, reserved for VM use */\n    NULL,                       /* F_PTR process_exit, called when a \n\t\t\t\t   monitored process dies */\n    NULL                        /* F_PTR stop_select, called to close an \n\t\t\t\t   event object */\n};\n\nDRIVER_INIT(example_drv) /* must match name in driver_entry */\n{\n    return &example_driver_entry;\n}\n```\n\n## 6.4 \u30b5\u30f3\u30d7\u30eb\u306e\u5b9f\u884c\n### 1. Compile the C code.\n```shell-session\nunix> gcc -o exampledrv -fpic -shared complex.c port_driver.c\nwindows> cl -LD -MD -Fe exampledrv.dll complex.c port_driver.c\n```\n\n### 2. Start Erlang and compile the Erlang code.\n```erl\n> erl\nErlang (BEAM) emulator version 5.1\n\nEshell V5.1 (abort with ^G)\n1> c(complex5).\n{ok,complex5}\n```\n\n### 3. Run the example.\n```erl\n2> complex5:start(\"example_drv\").\n<0.34.0>\n3> complex5:foo(3).\n4\n4> complex5:bar(5).\n10\n5> complex5:stop().\nstop\n```\n", "tags": ["Erlang"]}