{"context": " More than 1 year has passed since last update.\na.cpp\n\n#include <sys/types.h>\n#include <signal.h>\n#include <pthread.h>\n#include <unistd.h>\n\n#include <cstdio>\n#include <cstring>\n#include <mutex>\n#include <thread>\n#include <map>\n#include <random>\n\ntypedef void(*Handler_func)(int);\n\nvoid sig_handler(int) {\n}\n\nint check_signal() {\n    sigset_t ss;\n    sigemptyset(&ss);\n    sigaddset(&ss, SIGTERM);\n    sigaddset(&ss, SIGUSR1);\n\n    timespec ts;\n    ts.tv_sec = 0;\n    ts.tv_nsec = 0;\n    int sig = sigtimedwait(&ss, nullptr, &ts);\n    if (sig > 0) {\n        return sig;\n    } else {\n        if (errno != EAGAIN) {\n            char buf[1024];\n            char *bufp = strerror_r(errno, buf, 1024);\n            printf(\"sigtimedwait fail. %s\\n\", bufp);\n            return -1;\n        }\n    }\n    return 0;\n}\n\nint set_sigprocmask() {\n    sigset_t newss;\n    sigemptyset(&newss);\n    sigaddset(&newss, SIGCHLD);\n    sigaddset(&newss, SIGUSR1);\n    sigaddset(&newss, SIGALRM);\n    sigaddset(&newss, SIGHUP);\n    sigaddset(&newss, SIGINT);\n    sigaddset(&newss, SIGQUIT);\n    sigaddset(&newss, SIGTERM);\n    if (sigprocmask(SIG_BLOCK, &newss, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint set_sigaction(int sig, Handler_func func) {\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(struct sigaction));\n    sa.sa_handler = func;\n    sigemptyset(&sa.sa_mask);\n    if (sigaction(sig, &sa, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint set_sigaction_ign(int sig) {\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(struct sigaction));\n    sa.sa_handler = SIG_IGN;\n    sigemptyset(&sa.sa_mask);\n    if (sigaction(sig, &sa, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint init_signal() {\n    set_sigaction(SIGCHLD, &sig_handler);\n    set_sigaction(SIGUSR1, &sig_handler);\n    set_sigaction(SIGALRM, &sig_handler);\n    set_sigaction(SIGHUP, &sig_handler);\n    set_sigaction(SIGINT, &sig_handler);\n    set_sigaction(SIGQUIT, &sig_handler);\n    set_sigaction(SIGTERM, &sig_handler);\n    set_sigaction_ign(SIGPIPE);\n    if (set_sigprocmask()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nclass th_info {\n    public:\n        std::thread th;\n        pthread_t main_pthread_t;\n};\n\nvoid thread_func(std::mutex &mtx, std::map<int, th_info> &ths, int num) {\n    // \u89aa\u306e\u751f\u307f\u51fa\u3057\u51e6\u7406\u4e2d\u306f\u6b62\u307e\u308b\n    mtx.lock();\n    mtx.unlock();\n\n    std::random_device rd;\n    std::mt19937 mt(rd());\n    std::uniform_int_distribution<int> wait_time(1, 10);\n\n    while (!check_signal()) {\n        sleep(wait_time(mt));\n        printf(\"[%d]: send SIGUSR1.\\n\", num);\n        mtx.lock();\n        pthread_kill(ths[num].main_pthread_t, SIGUSR1);\n        mtx.unlock();\n    }\n}\n\nvoid main_thread(std::mutex &mtx, std::map<int, th_info> &ths) {\n    sigset_t ss;\n    sigemptyset(&ss);\n    sigaddset(&ss, SIGHUP);\n    sigaddset(&ss, SIGTERM);\n    sigaddset(&ss, SIGINT);\n    sigaddset(&ss, SIGQUIT);\n    sigaddset(&ss, SIGUSR1);\n    while (1) {\n        int sig;\n        sigwait(&ss, &sig);\n        if (sig == SIGUSR1) {\n            printf(\"recv SIGUSR1.\\n\");\n        } else {\n            printf(\"recv FINISH SIGNAL.\\n\");\n            break;\n        }\n    }\n    // \u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u56de\u53ce\u3059\u308b\n    mtx.lock();\n    for (auto &it : ths) {\n        pthread_kill(it.second.th.native_handle(), SIGUSR1);\n    }\n    mtx.unlock();\n    for (auto &it : ths) {\n        it.second.th.join();\n    }\n}\n\nvoid gen_thread(std::mutex &mtx, std::map<int, th_info> &ths) {\n    pthread_t main_pthread_t = pthread_self();\n    mtx.lock();\n    for (int i = 0; i < 3; ++i) {\n        std::thread th(thread_func, std::ref(mtx), std::ref(ths), i);\n        ths[i].th = std::move(th);\n        ths[i].main_pthread_t = main_pthread_t;\n    }\n    mtx.unlock();\n}\n\nint main(int, char **) {\n    if (init_signal()) {\n        printf(\"init_signal fail.\\n\");\n        return 1;\n    }\n\n    std::mutex mtx;\n    std::map<int, th_info> ths;\n\n    gen_thread(mtx, ths);\n    main_thread(mtx, ths);\n\n    return 0;\n}\n\n\n\n[root@localhost ~]# g++ --std=c++11 a.cpp -lpthread\n[root@localhost ~]#\n[root@localhost ~]# ./a.out\n[1]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[0]: send SIGUSR1.\nrecv SIGUSR1.\n[1]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[0]: send SIGUSR1.\nrecv SIGUSR1.\n^Crecv FINISH SIGNAL.\n[1]: send SIGUSR1.\n[2]: send SIGUSR1.\n[0]: send SIGUSR1.\n[root@localhost ~]#\n\n\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u307f\u51fa\u3059\u524d\u306b\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067pthread_self()\u3092\u5b9f\u884c\u3057\u3066\u3001\n\u305d\u308c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u3051\u3070\u826f\u3044\u3002\n\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u4f55\u304b\u3092\u901a\u77e5\u3057\u305f\u3044\u5834\u5408\u3001\npthread_kill(main_pthread_t, SIGUSR1);\n\u3068\u3044\u3046\u5177\u5408\u306b\u901a\u77e5\u3067\u304d\u308b\u3002\n\u30b7\u30b0\u30ca\u30eb\u95a2\u9023\u306e\u8a2d\u5b9a\u3092\u3001\u3042\u3089\u304b\u3058\u3081\u30cf\u30f3\u30c9\u30e9\u3092\u30bb\u30c3\u30c8\u3057\u305f\u4e0a\u3067\n\u30d6\u30ed\u30c3\u30af\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u3002\n\u30b9\u30ec\u30c3\u30c9\u306b\u3057\u305f\u6642\u70b9\u3067\u3001\u53ef\u80fd\u306a\u9650\u308asigwait\u7b49\u3092\u4f7f\u3063\u3066\u3001\n\u30cf\u30f3\u30c9\u30e9\u304c\u52d5\u4f5c\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\uff08\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u3001\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u304c\u5358\u306bsleep\u3067\u5bdd\u3066\u3044\u308b\u304c\u3001\n\u3000\u3053\u308c\u3089\u306f\u5272\u308a\u8fbc\u307f\u51e6\u7406\u3067\u629c\u3051\u308b\u3053\u3068\u306f\u7121\u304f\u3001\u6e21\u3057\u305f\u79d2\u6570\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\uff09\n\u3072\u3068\u307e\u305a\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u3001\u306a\u3093\u3060\u304b\u9577\u304f\u306a\u308b\u30fb\u30fb\u30fb\u3002\u3046\u30fc\u3093\u3002\n2015/12/10 \u8ffd\u8a18\n\u3069\u3046\u306b\u3082\u52d5\u4f5c\u898b\u3066\u3044\u308b\u3068\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308b\u3068\u3001\n\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u53d7\u4fe1\u3057\u3066\u3044\u308b\u30fb\u30fb\u30fb\u3002\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304csigwait\u3067\u30b7\u30b0\u30ca\u30eb\u3092\u6355\u6349\u3059\u308c\u3070\u3088\u3044\u3051\u3069\u3001\n\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082sigwait\u3067\u5f85\u3063\u3066\u3044\u308b\u3068\u3001\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3082\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u3001sigwait\u304b\u3089\u8fd4\u3063\u3066\u304d\u3066\u3057\u307e\u3046\u30fb\u30fb\u30fb\u3002\n\u3046\u30fc\u3093\u3001\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9 -> \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u9001\u308b\u30b7\u30b0\u30ca\u30eb\u3092\u5225\u9014\u6c7a\u3081\u3066\u3001\n\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u3001\u305d\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u5f85\u3064\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u306a\u3051\u308c\u3070\u89e3\u6c7a\u3060\u3051\u3069\u3002\u3002\n\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306b\u3001\u6c7a\u3081\u3046\u3061\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u3060\u3051\u3001\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308c\u306a\u3044\u3082\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002\n\u3001\u3001\u3001pthread_kill\u3067\u30b7\u30b0\u30ca\u30eb\u9001\u308b\u305f\u3081\u306b\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306epthread_t\u3092\u4fdd\u5b58\u3057\u305f\u3051\u3069\u3001\n\u7d50\u5c40\u306e\u3068\u3053\u308d\u3001kill(\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306epid, SIGUSR1);\u3068\u3044\u3046\u51e6\u7406\u3068\u540c\u7b49\u306a\u6a21\u69d8\u3002\n\u3046\u30fc\u3093\u3002\n\n```cpp:a.cpp\n\n#include <sys/types.h>\n#include <signal.h>\n#include <pthread.h>\n#include <unistd.h>\n\n#include <cstdio>\n#include <cstring>\n#include <mutex>\n#include <thread>\n#include <map>\n#include <random>\n\ntypedef void(*Handler_func)(int);\n\nvoid sig_handler(int) {\n}\n\nint check_signal() {\n    sigset_t ss;\n    sigemptyset(&ss);\n    sigaddset(&ss, SIGTERM);\n    sigaddset(&ss, SIGUSR1);\n    \n    timespec ts;\n    ts.tv_sec = 0;\n    ts.tv_nsec = 0;\n    int sig = sigtimedwait(&ss, nullptr, &ts);\n    if (sig > 0) {\n        return sig;\n    } else {\n        if (errno != EAGAIN) {\n            char buf[1024];\n            char *bufp = strerror_r(errno, buf, 1024);\n            printf(\"sigtimedwait fail. %s\\n\", bufp);\n            return -1;\n        }\n    }\n    return 0;\n}\n\nint set_sigprocmask() {\n    sigset_t newss;\n    sigemptyset(&newss);\n    sigaddset(&newss, SIGCHLD);\n    sigaddset(&newss, SIGUSR1);\n    sigaddset(&newss, SIGALRM);\n    sigaddset(&newss, SIGHUP);\n    sigaddset(&newss, SIGINT);\n    sigaddset(&newss, SIGQUIT);\n    sigaddset(&newss, SIGTERM);\n    if (sigprocmask(SIG_BLOCK, &newss, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint set_sigaction(int sig, Handler_func func) {\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(struct sigaction));\n    sa.sa_handler = func;\n    sigemptyset(&sa.sa_mask);\n    if (sigaction(sig, &sa, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint set_sigaction_ign(int sig) {\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(struct sigaction));\n    sa.sa_handler = SIG_IGN;\n    sigemptyset(&sa.sa_mask);\n    if (sigaction(sig, &sa, nullptr)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint init_signal() {\n    set_sigaction(SIGCHLD, &sig_handler);\n    set_sigaction(SIGUSR1, &sig_handler);\n    set_sigaction(SIGALRM, &sig_handler);\n    set_sigaction(SIGHUP, &sig_handler);\n    set_sigaction(SIGINT, &sig_handler);\n    set_sigaction(SIGQUIT, &sig_handler);\n    set_sigaction(SIGTERM, &sig_handler);\n    set_sigaction_ign(SIGPIPE);\n    if (set_sigprocmask()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nclass th_info {\n    public:\n        std::thread th;\n        pthread_t main_pthread_t;\n};\n\nvoid thread_func(std::mutex &mtx, std::map<int, th_info> &ths, int num) {\n    // \u89aa\u306e\u751f\u307f\u51fa\u3057\u51e6\u7406\u4e2d\u306f\u6b62\u307e\u308b\n    mtx.lock();\n    mtx.unlock();\n    \n    std::random_device rd;\n    std::mt19937 mt(rd());\n    std::uniform_int_distribution<int> wait_time(1, 10);\n    \n    while (!check_signal()) {\n        sleep(wait_time(mt));\n        printf(\"[%d]: send SIGUSR1.\\n\", num);\n        mtx.lock();\n        pthread_kill(ths[num].main_pthread_t, SIGUSR1);\n        mtx.unlock();\n    }\n}\n\nvoid main_thread(std::mutex &mtx, std::map<int, th_info> &ths) {\n    sigset_t ss;\n    sigemptyset(&ss);\n    sigaddset(&ss, SIGHUP);\n    sigaddset(&ss, SIGTERM);\n    sigaddset(&ss, SIGINT);\n    sigaddset(&ss, SIGQUIT);\n    sigaddset(&ss, SIGUSR1);\n    while (1) {\n        int sig;\n        sigwait(&ss, &sig);\n        if (sig == SIGUSR1) {\n            printf(\"recv SIGUSR1.\\n\");\n        } else {\n            printf(\"recv FINISH SIGNAL.\\n\");\n            break;\n        }\n    }\n    // \u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u56de\u53ce\u3059\u308b\n    mtx.lock();\n    for (auto &it : ths) {\n        pthread_kill(it.second.th.native_handle(), SIGUSR1);\n    }\n    mtx.unlock();\n    for (auto &it : ths) {\n        it.second.th.join();\n    }\n}\n\nvoid gen_thread(std::mutex &mtx, std::map<int, th_info> &ths) {\n    pthread_t main_pthread_t = pthread_self();\n    mtx.lock();\n    for (int i = 0; i < 3; ++i) {\n        std::thread th(thread_func, std::ref(mtx), std::ref(ths), i);\n        ths[i].th = std::move(th);\n        ths[i].main_pthread_t = main_pthread_t;\n    }\n    mtx.unlock();\n}\n\nint main(int, char **) {\n    if (init_signal()) {\n        printf(\"init_signal fail.\\n\");\n        return 1;\n    }\n    \n    std::mutex mtx;\n    std::map<int, th_info> ths;\n    \n    gen_thread(mtx, ths);\n    main_thread(mtx, ths);\n    \n    return 0;\n}\n\n```\n\n<pre>\n[root@localhost ~]# g++ --std=c++11 a.cpp -lpthread\n[root@localhost ~]#\n[root@localhost ~]# ./a.out\n[1]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[0]: send SIGUSR1.\nrecv SIGUSR1.\n[1]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[2]: send SIGUSR1.\nrecv SIGUSR1.\n[0]: send SIGUSR1.\nrecv SIGUSR1.\n^Crecv FINISH SIGNAL.\n[1]: send SIGUSR1.\n[2]: send SIGUSR1.\n[0]: send SIGUSR1.\n[root@localhost ~]#\n</pre>\n\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u307f\u51fa\u3059\u524d\u306b\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067pthread_self()\u3092\u5b9f\u884c\u3057\u3066\u3001\n\u305d\u308c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u3051\u3070\u826f\u3044\u3002\n\n\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u4f55\u304b\u3092\u901a\u77e5\u3057\u305f\u3044\u5834\u5408\u3001\npthread_kill(main_pthread_t, SIGUSR1);\n\u3068\u3044\u3046\u5177\u5408\u306b\u901a\u77e5\u3067\u304d\u308b\u3002\n\n\u30b7\u30b0\u30ca\u30eb\u95a2\u9023\u306e\u8a2d\u5b9a\u3092\u3001\u3042\u3089\u304b\u3058\u3081\u30cf\u30f3\u30c9\u30e9\u3092\u30bb\u30c3\u30c8\u3057\u305f\u4e0a\u3067\n\u30d6\u30ed\u30c3\u30af\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u306b\u3057\u305f\u6642\u70b9\u3067\u3001\u53ef\u80fd\u306a\u9650\u308asigwait\u7b49\u3092\u4f7f\u3063\u3066\u3001\n\u30cf\u30f3\u30c9\u30e9\u304c\u52d5\u4f5c\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\uff08\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u3001\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u304c\u5358\u306bsleep\u3067\u5bdd\u3066\u3044\u308b\u304c\u3001\n\u3000\u3053\u308c\u3089\u306f\u5272\u308a\u8fbc\u307f\u51e6\u7406\u3067\u629c\u3051\u308b\u3053\u3068\u306f\u7121\u304f\u3001\u6e21\u3057\u305f\u79d2\u6570\u5f85\u3063\u3066\u304b\u3089\u7d42\u4e86\u3059\u308b\uff09\n\n\u3072\u3068\u307e\u305a\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u3001\u306a\u3093\u3060\u304b\u9577\u304f\u306a\u308b\u30fb\u30fb\u30fb\u3002\u3046\u30fc\u3093\u3002\n\n\n2015/12/10 \u8ffd\u8a18\n\n\u3069\u3046\u306b\u3082\u52d5\u4f5c\u898b\u3066\u3044\u308b\u3068\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308b\u3068\u3001\n\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u53d7\u4fe1\u3057\u3066\u3044\u308b\u30fb\u30fb\u30fb\u3002\n\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304csigwait\u3067\u30b7\u30b0\u30ca\u30eb\u3092\u6355\u6349\u3059\u308c\u3070\u3088\u3044\u3051\u3069\u3001\n\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082sigwait\u3067\u5f85\u3063\u3066\u3044\u308b\u3068\u3001\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3082\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u3001sigwait\u304b\u3089\u8fd4\u3063\u3066\u304d\u3066\u3057\u307e\u3046\u30fb\u30fb\u30fb\u3002\n\n\u3046\u30fc\u3093\u3001\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9 -> \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u9001\u308b\u30b7\u30b0\u30ca\u30eb\u3092\u5225\u9014\u6c7a\u3081\u3066\u3001\n\u30b5\u30d6\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u3001\u305d\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u5f85\u3064\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u306a\u3051\u308c\u3070\u89e3\u6c7a\u3060\u3051\u3069\u3002\u3002\n\n\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306b\u3001\u6c7a\u3081\u3046\u3061\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u3060\u3051\u3001\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u308c\u306a\u3044\u3082\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002\n\n\n\u3001\u3001\u3001pthread_kill\u3067\u30b7\u30b0\u30ca\u30eb\u9001\u308b\u305f\u3081\u306b\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306epthread_t\u3092\u4fdd\u5b58\u3057\u305f\u3051\u3069\u3001\n\u7d50\u5c40\u306e\u3068\u3053\u308d\u3001kill(\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306epid, SIGUSR1);\u3068\u3044\u3046\u51e6\u7406\u3068\u540c\u7b49\u306a\u6a21\u69d8\u3002\n\n\u3046\u30fc\u3093\u3002\n", "tags": ["C", "C\u8a00\u8a9e", "C++", "Linux"]}