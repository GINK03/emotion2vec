{"tags": ["Python", "OpenGL", "pyOpenGL"], "context": "PyOpenGL\u3059\u308b\u306b\u306f\u3053\u3053\u3092\u6291\u3048\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u3059\u307e\u3044\u3002\nOpenGL\u306fShader\u79fb\u884c\u671f\u306b\u65e7API\u3092\u3059\u3063\u3071\u308a\u5207\u308a\u6368\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001\n\u65b0\u65e7\u306e\u65b9\u6cd5\u3092\u6df7\u305c\u3066\u66f8\u304f\u65b9\u6cd5\u3084\u6697\u9ed9\u306e\u30c7\u30aa\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u983c\u3063\u305f\u4e0d\u660e\u77ad\u306a\u30b3\u30fc\u30c9\u30c7\u30a3\u30f3\u30b0\u304c\u6a2a\u884c\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nC\u3067\u3082\u5341\u5206\u306b\u30cf\u30de\u308c\u308b\u304c\u3001Python\u3067\u306f\u3082\u3063\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u305e\u3002\n\u30b3\u30fc\u30c9\n\n\u30ec\u30d9\u30eb0: glBegin\n\u3044\u307e\u3084\u3001obsolete\u3067\u3059\u3051\u3069\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3053\u3044\u3064\u304c\u4e00\u756a\u697d\u3061\u3093\u3002\n\ncube\n# coding: utf-8\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\nfrom OpenGL.GLUT import *\nimport sys\n\ns=0.5\nvertices=[\n        -s, -s, -s,\n         s, -s, -s,\n         s,  s, -s,\n        -s,  s, -s,\n        -s, -s,  s,\n         s, -s,  s,\n         s,  s,  s,\n        -s,  s,  s,\n        ]\ncolors=[\n        0, 0, 0,\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n        0, 1, 1,\n        1, 0, 1,\n        1, 1, 1,\n        1, 1, 0,\n        ]\nindices=[\n        0, 1, 2, 2, 3, 0,\n        0, 4, 5, 5, 1, 0,\n        1, 5, 6, 6, 2, 1,\n        2, 6, 7, 7, 3, 2,\n        3, 7, 4, 4, 0, 3,\n        4, 7, 6, 6, 5, 4,\n        ]\n\n#\n# \u63cf\u753b\u95a2\u6570 glBegin\n#\ndef draw_cube0():\n    glBegin(GL_TRIANGLES)\n    for i in range(0, len(indices), 3):\n        index=indices[i]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n\n        index=indices[i+1]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n\n        index=indices[i+2]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n    glEnd()\n\ndef initialize():\n    glClearColor(0.0, 0.0, 0.0, 0.0)\n    glClearDepth(1.0)\n    glDepthFunc(GL_LESS)\n    glEnable(GL_DEPTH_TEST)\n\ndef resize(Width, Height):\n    # viewport\n    if Height == 0:\n        Height = 1\n    glViewport(0, 0, Width, Height)\n    # projection\n    glMatrixMode(GL_PROJECTION)\n    glLoadIdentity()\n    gluPerspective(45.0, float(Width)/float(Height), 0.1, 100.0)\n\nyaw=0\npitch=0\ndef draw():\n    global yaw, pitch\n    # clear\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n\n    # view\n    glMatrixMode(GL_MODELVIEW)\n    glLoadIdentity()\n    yaw+=0.39\n    pitch+=0.27\n    glTranslatef(0.0, 0.0, -2.0)\n    glRotatef(yaw, 0, 1, 0)\n    glRotatef(pitch, 1, 0, 0)\n\n    # cube\n    draw_cube0()\n\n    glFlush()\n\n\n##############################################################################\n# glut driver\n##############################################################################\n\ndef reshape_func(w, h):\n    resize(w, h == 0 and 1 or h)\n\ndef disp_func():\n    draw()\n    glutSwapBuffers()\n\nif __name__==\"__main__\":\n    glutInit(sys.argv)\n    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)\n    glutInitWindowSize(256, 256)\n    glutCreateWindow(b\"vbo\")\n    glutDisplayFunc(disp_func)\n    glutIdleFunc(disp_func)\n    glutReshapeFunc(reshape_func)\n\n    initialize()\n\n    glutMainLoop()\n\n\n\n\u30ec\u30d9\u30eb1: glVertexPointer without VBO\n\u914d\u5217\u304c\u4f7f\u3048\u308b\u3002\u5225\u306b\u901f\u304f\u306f\u7121\u3044\u3002\ndef draw_cube1():\n    glEnableClientState(GL_VERTEX_ARRAY);\n    glEnableClientState(GL_COLOR_ARRAY);\n    glVertexPointer(3, GL_FLOAT, 0, vertices);\n    glColorPointer(3, GL_FLOAT, 0, colors)\n    glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, indices);\n    glDisableClientState(GL_COLOR_ARRAY)\n    glDisableClientState(GL_VERTEX_ARRAY);\n\n\n\u30ec\u30d9\u30eb2: glVertexPointer with VBO without Shader\nGPU\u306b\u914d\u5217\u3092\u8ee2\u9001\u3059\u308b\u3002\u901f\u3044\u3002\u304c\u3001\u5206\u304b\u308a\u306b\u304f\u3044\u3002\npython\u306e\u7d20\u306e\u914d\u5217\u306f\u53d7\u3051\u4ed8\u3051\u3066\u3082\u3089\u3048\u306a\u3044\u306e\u3067\u3001ctypes\u3067\u30d0\u30a4\u30c8\u5217\u3092\u4f5c\u3063\u3066API\u306b\u6e21\u3059\u3002\n\u3053\u306e\u3084\u308a\u65b9\u3055\u3063\u304d\u521d\u3081\u3066\u77e5\u308a\u307e\u3057\u305f\u3002\n\nhttp://stackoverflow.com/questions/13179565/how-to-get-vbos-to-work-with-python-and-pyopengl\n\n\ndraw2\nbuffers=None\ndef create_vbo():\n    buffers = glGenBuffers(3)\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[0])\n    glBufferData(GL_ARRAY_BUFFER, \n            len(vertices)*4,  # byte size\n            (ctypes.c_float*len(vertices))(*vertices), # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[1])\n    glBufferData(GL_ARRAY_BUFFER, \n            len(colors)*4, # byte size \n            (ctypes.c_float*len(colors))(*colors),  # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers[2])\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, \n            len(indices)*4, # byte size\n            (ctypes.c_uint*len(indices))(*indices),  # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    return buffers\n\ndef draw_vbo():\n    glEnableClientState(GL_VERTEX_ARRAY);\n    glEnableClientState(GL_COLOR_ARRAY);\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[0]);\n    glVertexPointer(3, GL_FLOAT, 0, None);\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[1]);\n    glColorPointer(3, GL_FLOAT, 0, None);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers[2]);\n    glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None);\n    glDisableClientState(GL_COLOR_ARRAY)\n    glDisableClientState(GL_VERTEX_ARRAY);\n\ndef draw_cube2():\n    global buffers\n    if buffers==None:\n        buffers=create_vbo()\n    draw_vbo()\n\n\n\n\u30ec\u30d9\u30eb3: glVertexPointer with VBO with Shader\n\u53e4\u3044API\u3068Shader\u3092\u6df7\u305c\u305f\u66f8\u304d\u65b9\u3002\u53e4\u3044\u30b3\u30fc\u30c9\u304c\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308b\u304b\u3082\u3002\n\u30b7\u30a7\u30fc\u30c0\u30fc\u5185\u306e\u5909\u6570(gl_XXX)\u306f\u3059\u3079\u3066BuiltIn\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u8a18\u8ff0\u91cf\u306f\u6e1b\u3063\u3066\u3044\u308b\u304c\u6697\u9ed9\u306e\u90e8\u5206\u304c\u591a\u3044\u3002\n\u4ee5\u524d\u3084\u3063\u305f\u3068\u304d\u306f\u3001\u65b0\u3057\u3044OpenGL\u95a2\u6570\u3092\u4f7f\u3046\u306e\u306b\nhttp://glewpy.sourceforge.net/\n\u304c\u5fc5\u8981\u3067\u6e96\u5099\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u305f\u306e\u3060\u304c\u3001\u4f55\u3082\u305b\u305a\u3068\u3082glCreateProgram\u7b49\u306e\u65b0\u3057\u3044\u95a2\u6570\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u308b\u3002\n\ndraw3\nclass Shader(object):\n\n    def initShader(self, vertex_shader_source, fragment_shader_source):\n        # create program\n        self.program=glCreateProgram()\n        print('create program')\n        printOpenGLError()\n\n        # vertex shader\n        print('compile vertex shader...')\n        self.vs = glCreateShader(GL_VERTEX_SHADER)\n        glShaderSource(self.vs, [vertex_shader_source])\n        glCompileShader(self.vs)\n        glAttachShader(self.program, self.vs)\n        printOpenGLError()\n\n        # fragment shader\n        print('compile fragment shader...')\n        self.fs = glCreateShader(GL_FRAGMENT_SHADER)\n        glShaderSource(self.fs, [fragment_shader_source])\n        glCompileShader(self.fs)\n        glAttachShader(self.program, self.fs)\n        printOpenGLError()\n\n        print('link...')\n        glLinkProgram(self.program)\n        printOpenGLError()\n\n    def begin(self):\n        if glUseProgram(self.program):\n            printOpenGLError()\n\n    def end(self):\n        glUseProgram(0)\n\nshader=None\ndef draw_cube3():\n    global shader, buffers\n    if shader==None:\n        shader=Shader()\n        shader.initShader('''\nvoid main()\n{\n    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n    gl_FrontColor = gl_Color;\n}\n        ''',\n        '''\nvoid main()\n{\n    gl_FragColor = gl_Color;\n}\n        ''')\n        buffers=create_vbo()\n\n    shader.begin()\n    draw_vbo()\n    shader.end()\n\n\n\n\n\u30ec\u30d9\u30eb4: glVertexAttribPointer\n\u4eca\u98a8\u306e\u3084\u3064\u3002GLES\u3068\u304bWebGL\u306f\u3053\u308c\u3057\u304b\u7121\u3044\u306e\u3060\u3063\u3051\u3002\n\u304c\u3001Shader\u5909\u6570\u306eLocation\u3092\u53d6\u308b\u3084\u3064\u3068\u3001uniform\u5909\u6570\u306esetter\u3001glu, glMatrix\u306e\u5ec3\u6b62\u306b\u3088\u308b\u81ea\u524d\u95a2\u6570\u306e\u6e96\u5099\u7b49\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u6b21\u56de\u306b\u9001\u308b\u3002\n\u3053\u3053\u3089\u8fba\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u3042\u308c\u3070\u3001Python\u304cShader\u3067\u904a\u3076\u306e\u306b\u4e00\u756a\u30e9\u30a4\u30c8\u306a\u74b0\u5883\u306b\u306a\u308a\u3046\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\n\u307e\u3068\u3081\n\u6bce\u56de\u5fd8\u308c\u3066\u8abf\u3079\u306a\u304a\u3059\u306e\u3067\u3001\u81ea\u5206\u306e\u5099\u5fd8\u9332\u3082\u517c\u306d\u3066PyOpenGL\u306b\u3088\u308bVBO\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\nPyOpenGL\u3059\u308b\u306b\u306f\u3053\u3053\u3092\u6291\u3048\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u3059\u307e\u3044\u3002\nOpenGL\u306fShader\u79fb\u884c\u671f\u306b\u65e7API\u3092\u3059\u3063\u3071\u308a\u5207\u308a\u6368\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001\n\u65b0\u65e7\u306e\u65b9\u6cd5\u3092\u6df7\u305c\u3066\u66f8\u304f\u65b9\u6cd5\u3084\u6697\u9ed9\u306e\u30c7\u30aa\u30d5\u30a9\u30eb\u30c8\u5024\u306b\u983c\u3063\u305f\u4e0d\u660e\u77ad\u306a\u30b3\u30fc\u30c9\u30c7\u30a3\u30f3\u30b0\u304c\u6a2a\u884c\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nC\u3067\u3082\u5341\u5206\u306b\u30cf\u30de\u308c\u308b\u304c\u3001Python\u3067\u306f\u3082\u3063\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u305e\u3002\n\n[\u30b3\u30fc\u30c9](https://gist.github.com/ousttrue/c4ae334fc1505cdf4cd7)\n\n# \u30ec\u30d9\u30eb0: glBegin\n\u3044\u307e\u3084\u3001obsolete\u3067\u3059\u3051\u3069\u4e09\u89d2\u5f62\u3092\u63cf\u304f\u306b\u306f\u3053\u3044\u3064\u304c\u4e00\u756a\u697d\u3061\u3093\u3002\n\n```py:cube\n# coding: utf-8\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\nfrom OpenGL.GLUT import *\nimport sys\n\ns=0.5\nvertices=[\n        -s, -s, -s,\n         s, -s, -s,\n         s,  s, -s,\n        -s,  s, -s,\n        -s, -s,  s,\n         s, -s,  s,\n         s,  s,  s,\n        -s,  s,  s,\n        ]\ncolors=[\n        0, 0, 0,\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1,\n        0, 1, 1,\n        1, 0, 1,\n        1, 1, 1,\n        1, 1, 0,\n        ]\nindices=[\n        0, 1, 2, 2, 3, 0,\n        0, 4, 5, 5, 1, 0,\n        1, 5, 6, 6, 2, 1,\n        2, 6, 7, 7, 3, 2,\n        3, 7, 4, 4, 0, 3,\n        4, 7, 6, 6, 5, 4,\n        ]\n\n#\n# \u63cf\u753b\u95a2\u6570 glBegin\n#\ndef draw_cube0():\n    glBegin(GL_TRIANGLES)\n    for i in range(0, len(indices), 3):\n        index=indices[i]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n\n        index=indices[i+1]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n\n        index=indices[i+2]*3\n        glColor3f(*colors[index:index+3])\n        glVertex3f(*vertices[index:index+3])\n    glEnd()\n\ndef initialize():\n    glClearColor(0.0, 0.0, 0.0, 0.0)\n    glClearDepth(1.0)\n    glDepthFunc(GL_LESS)\n    glEnable(GL_DEPTH_TEST)\n\ndef resize(Width, Height):\n    # viewport\n    if Height == 0:\n        Height = 1\n    glViewport(0, 0, Width, Height)\n    # projection\n    glMatrixMode(GL_PROJECTION)\n    glLoadIdentity()\n    gluPerspective(45.0, float(Width)/float(Height), 0.1, 100.0)\n\nyaw=0\npitch=0\ndef draw():\n    global yaw, pitch\n    # clear\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n\n    # view\n    glMatrixMode(GL_MODELVIEW)\n    glLoadIdentity()\n    yaw+=0.39\n    pitch+=0.27\n    glTranslatef(0.0, 0.0, -2.0)\n    glRotatef(yaw, 0, 1, 0)\n    glRotatef(pitch, 1, 0, 0)\n\n    # cube\n    draw_cube0()\n\n    glFlush()\n\n\n##############################################################################\n# glut driver\n##############################################################################\n\ndef reshape_func(w, h):\n    resize(w, h == 0 and 1 or h)\n\ndef disp_func():\n    draw()\n    glutSwapBuffers()\n\nif __name__==\"__main__\":\n    glutInit(sys.argv)\n    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)\n    glutInitWindowSize(256, 256)\n    glutCreateWindow(b\"vbo\")\n    glutDisplayFunc(disp_func)\n    glutIdleFunc(disp_func)\n    glutReshapeFunc(reshape_func)\n\n    initialize()\n\n    glutMainLoop()\n```\n\n# \u30ec\u30d9\u30eb1: glVertexPointer without VBO\n\u914d\u5217\u304c\u4f7f\u3048\u308b\u3002\u5225\u306b\u901f\u304f\u306f\u7121\u3044\u3002\n\n```py\ndef draw_cube1():\n    glEnableClientState(GL_VERTEX_ARRAY);\n    glEnableClientState(GL_COLOR_ARRAY);\n    glVertexPointer(3, GL_FLOAT, 0, vertices);\n    glColorPointer(3, GL_FLOAT, 0, colors)\n    glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, indices);\n    glDisableClientState(GL_COLOR_ARRAY)\n    glDisableClientState(GL_VERTEX_ARRAY);\n```\n\n# \u30ec\u30d9\u30eb2: glVertexPointer with VBO without Shader\nGPU\u306b\u914d\u5217\u3092\u8ee2\u9001\u3059\u308b\u3002\u901f\u3044\u3002\u304c\u3001\u5206\u304b\u308a\u306b\u304f\u3044\u3002\npython\u306e\u7d20\u306e\u914d\u5217\u306f\u53d7\u3051\u4ed8\u3051\u3066\u3082\u3089\u3048\u306a\u3044\u306e\u3067\u3001ctypes\u3067\u30d0\u30a4\u30c8\u5217\u3092\u4f5c\u3063\u3066API\u306b\u6e21\u3059\u3002\n\u3053\u306e\u3084\u308a\u65b9\u3055\u3063\u304d\u521d\u3081\u3066\u77e5\u308a\u307e\u3057\u305f\u3002\n\n* http://stackoverflow.com/questions/13179565/how-to-get-vbos-to-work-with-python-and-pyopengl\n\n```py:draw2\nbuffers=None\ndef create_vbo():\n    buffers = glGenBuffers(3)\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[0])\n    glBufferData(GL_ARRAY_BUFFER, \n            len(vertices)*4,  # byte size\n            (ctypes.c_float*len(vertices))(*vertices), # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[1])\n    glBufferData(GL_ARRAY_BUFFER, \n            len(colors)*4, # byte size \n            (ctypes.c_float*len(colors))(*colors),  # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers[2])\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, \n            len(indices)*4, # byte size\n            (ctypes.c_uint*len(indices))(*indices),  # \u8b0e\u306ectypes\n            GL_STATIC_DRAW)\n    return buffers\n\ndef draw_vbo():\n    glEnableClientState(GL_VERTEX_ARRAY);\n    glEnableClientState(GL_COLOR_ARRAY);\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[0]);\n    glVertexPointer(3, GL_FLOAT, 0, None);\n    glBindBuffer(GL_ARRAY_BUFFER, buffers[1]);\n    glColorPointer(3, GL_FLOAT, 0, None);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers[2]);\n    glDrawElements(GL_TRIANGLES, len(indices), GL_UNSIGNED_INT, None);\n    glDisableClientState(GL_COLOR_ARRAY)\n    glDisableClientState(GL_VERTEX_ARRAY);\n\ndef draw_cube2():\n    global buffers\n    if buffers==None:\n        buffers=create_vbo()\n    draw_vbo()\n```\n\n# \u30ec\u30d9\u30eb3: glVertexPointer with VBO with Shader\n\u53e4\u3044API\u3068Shader\u3092\u6df7\u305c\u305f\u66f8\u304d\u65b9\u3002\u53e4\u3044\u30b3\u30fc\u30c9\u304c\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308b\u304b\u3082\u3002\n\u30b7\u30a7\u30fc\u30c0\u30fc\u5185\u306e\u5909\u6570(gl_XXX)\u306f\u3059\u3079\u3066BuiltIn\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\u8a18\u8ff0\u91cf\u306f\u6e1b\u3063\u3066\u3044\u308b\u304c\u6697\u9ed9\u306e\u90e8\u5206\u304c\u591a\u3044\u3002\n\u4ee5\u524d\u3084\u3063\u305f\u3068\u304d\u306f\u3001\u65b0\u3057\u3044OpenGL\u95a2\u6570\u3092\u4f7f\u3046\u306e\u306b\nhttp://glewpy.sourceforge.net/\n\u304c\u5fc5\u8981\u3067\u6e96\u5099\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u305f\u306e\u3060\u304c\u3001\u4f55\u3082\u305b\u305a\u3068\u3082glCreateProgram\u7b49\u306e\u65b0\u3057\u3044\u95a2\u6570\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u308b\u3002\n\n```py:draw3\nclass Shader(object):\n\n    def initShader(self, vertex_shader_source, fragment_shader_source):\n        # create program\n        self.program=glCreateProgram()\n        print('create program')\n        printOpenGLError()\n\n        # vertex shader\n        print('compile vertex shader...')\n        self.vs = glCreateShader(GL_VERTEX_SHADER)\n        glShaderSource(self.vs, [vertex_shader_source])\n        glCompileShader(self.vs)\n        glAttachShader(self.program, self.vs)\n        printOpenGLError()\n\n        # fragment shader\n        print('compile fragment shader...')\n        self.fs = glCreateShader(GL_FRAGMENT_SHADER)\n        glShaderSource(self.fs, [fragment_shader_source])\n        glCompileShader(self.fs)\n        glAttachShader(self.program, self.fs)\n        printOpenGLError()\n\n        print('link...')\n        glLinkProgram(self.program)\n        printOpenGLError()\n\n    def begin(self):\n        if glUseProgram(self.program):\n            printOpenGLError()\n\n    def end(self):\n        glUseProgram(0)\n\nshader=None\ndef draw_cube3():\n    global shader, buffers\n    if shader==None:\n        shader=Shader()\n        shader.initShader('''\nvoid main()\n{\n    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n    gl_FrontColor = gl_Color;\n}\n        ''',\n        '''\nvoid main()\n{\n    gl_FragColor = gl_Color;\n}\n        ''')\n        buffers=create_vbo()\n\n    shader.begin()\n    draw_vbo()\n    shader.end()\n\n```\n\n# \u30ec\u30d9\u30eb4: glVertexAttribPointer\n\u4eca\u98a8\u306e\u3084\u3064\u3002GLES\u3068\u304bWebGL\u306f\u3053\u308c\u3057\u304b\u7121\u3044\u306e\u3060\u3063\u3051\u3002\n\u304c\u3001Shader\u5909\u6570\u306eLocation\u3092\u53d6\u308b\u3084\u3064\u3068\u3001uniform\u5909\u6570\u306esetter\u3001glu, glMatrix\u306e\u5ec3\u6b62\u306b\u3088\u308b\u81ea\u524d\u95a2\u6570\u306e\u6e96\u5099\u7b49\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u6b21\u56de\u306b\u9001\u308b\u3002\n\u3053\u3053\u3089\u8fba\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u3042\u308c\u3070\u3001Python\u304cShader\u3067\u904a\u3076\u306e\u306b\u4e00\u756a\u30e9\u30a4\u30c8\u306a\u74b0\u5883\u306b\u306a\u308a\u3046\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\n# \u307e\u3068\u3081\n\u6bce\u56de\u5fd8\u308c\u3066\u8abf\u3079\u306a\u304a\u3059\u306e\u3067\u3001\u81ea\u5206\u306e\u5099\u5fd8\u9332\u3082\u517c\u306d\u3066PyOpenGL\u306b\u3088\u308bVBO\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n"}