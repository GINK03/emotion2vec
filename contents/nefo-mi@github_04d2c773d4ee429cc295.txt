{"tags": ["Ruby", "tmux"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\ntmux\u306estatusline\u306b\u5929\u6c17\u4e88\u5831\u3092\u8868\u793a\u3057\u305f\u3044\u306a\u3068\u601d\u3063\u3066\u4f5c\u3063\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002\ngoogle\u5148\u751f\u306eWeather API\u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\u5929\u6c17\u304c\u826f\u3044\u65e5\u306f\u3059\u3050\u306b\u6d77\u306b\u884c\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u5e78\u305b\u304c\u5b9f\u73fe\u3057\u307e\u3057\u305f\u3002\n\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nsorah/config\ntmux \u306e Status-Line \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\n\n\nweather.rb\nrequire 'open-uri'\nrequire 'rexml/document'\n\nCACHE = \"/tmp/ustatus.rb.cache\"\n\nif File.exist?(CACHE) && (Time.now - File::Stat.new(CACHE).mtime) <= 2000\n  print File.read(CACHE)\n  exit\nend\n\nurl = URI.parse('http://www.google.com/ig/api?weather=naha,okinawa&hl=ja')\nres = url.read('r:binary').encode(\"UTF-8\", invalid: :replace, undef: :replace)\nrss = REXML::Document.new(res) \n\ncondition = rss.elements['//weather/current_conditions/condition/@data'].value.strip\nwind_condition = rss.elements['//weather/current_conditions/wind_condition/@data'].value.strip\nwind, windy, tani = *wind_condition.split(':').last.split(' ')\ntemp_c = rss.elements['//weather/current_conditions/temp_c/@data'].value.strip + 'C'\nmsg = [condition, temp_c, wind, windy + tani].join(' ')\n\nif msg.nil?\n  File.delete CACHE\nelse\n  open(CACHE, 'w'){|io| io.print msg}\n  print msg\nend\n\n\n\n\u6c96\u7e04/\u90a3\u8987\u306e\u5929\u6c17\u4e88\u5831\u3092\u65e5\u672c\u8a9e\u3067\u53d6\u3063\u3066\u304d\u307e\u3059\u3002\n\u5929\u6c17\u4e88\u5831\u306f30\u5206\u306b\u4e00\u56de\u66f4\u65b0\u3060\u3063\u305f\u3068\u601d\u3046\u306e\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u6642\u9593\u30922000s\u306b\u3057\u307e\u3057\u305f\u3002(\u9069\u5f53)\n\u306a\u3093\u3068\u306a\u304fREXML\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n@umitter\u306e\u306a\u3054\u308a\n\n\n\u6e29\u5ea6\u306e\u5358\u4f4d\u306f\u2103\u3092\u4f7f\u3046\u3068statusline\u304c\u5d29\u308c\u305f\u306e\u3067C\u306b\u3057\u3066\u307e\u3059\u3002\n\n# tmux\u306estatusline\u306b\u5929\u6c17\u4e88\u5831\u3092\u8868\u793a\u3057\u305f\u3044\u306a\u3068\u601d\u3063\u3066\u4f5c\u3063\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002\ngoogle\u5148\u751f\u306eWeather API\u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\u5929\u6c17\u304c\u826f\u3044\u65e5\u306f\u3059\u3050\u306b\u6d77\u306b\u884c\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u5e78\u305b\u304c\u5b9f\u73fe\u3057\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [sorah/config](https://github.com/sorah/config)\n- [tmux \u306e Status-Line \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b](http://qiita.com/items/daf224aa331982b8a910)\n\n```ruby:weather.rb\nrequire 'open-uri'\nrequire 'rexml/document'\n\nCACHE = \"/tmp/ustatus.rb.cache\"\n\nif File.exist?(CACHE) && (Time.now - File::Stat.new(CACHE).mtime) <= 2000\n  print File.read(CACHE)\n  exit\nend\n\nurl = URI.parse('http://www.google.com/ig/api?weather=naha,okinawa&hl=ja')\nres = url.read('r:binary').encode(\"UTF-8\", invalid: :replace, undef: :replace)\nrss = REXML::Document.new(res) \n\ncondition = rss.elements['//weather/current_conditions/condition/@data'].value.strip\nwind_condition = rss.elements['//weather/current_conditions/wind_condition/@data'].value.strip\nwind, windy, tani = *wind_condition.split(':').last.split(' ')\ntemp_c = rss.elements['//weather/current_conditions/temp_c/@data'].value.strip + 'C'\nmsg = [condition, temp_c, wind, windy + tani].join(' ')\n\nif msg.nil?\n  File.delete CACHE\nelse\n  open(CACHE, 'w'){|io| io.print msg}\n  print msg\nend\n```\n\n- \u6c96\u7e04/\u90a3\u8987\u306e\u5929\u6c17\u4e88\u5831\u3092\u65e5\u672c\u8a9e\u3067\u53d6\u3063\u3066\u304d\u307e\u3059\u3002\n- \u5929\u6c17\u4e88\u5831\u306f30\u5206\u306b\u4e00\u56de\u66f4\u65b0\u3060\u3063\u305f\u3068\u601d\u3046\u306e\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u6642\u9593\u30922000s\u306b\u3057\u307e\u3057\u305f\u3002(\u9069\u5f53)\n- \u306a\u3093\u3068\u306a\u304fREXML\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n - [@umitter](https://twitter.com/umitter/)\u306e\u306a\u3054\u308a\n- \u6e29\u5ea6\u306e\u5358\u4f4d\u306f\u2103\u3092\u4f7f\u3046\u3068statusline\u304c\u5d29\u308c\u305f\u306e\u3067C\u306b\u3057\u3066\u307e\u3059\u3002\n"}