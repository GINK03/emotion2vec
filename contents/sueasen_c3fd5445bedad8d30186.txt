{"tags": ["Java", "NetBeans"], "context": "\n\n1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n[\u30d5\u30a1\u30a4\u30eb]-[\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8]\n[Maven]-[Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3] \u3067[\u6b21\u3078]\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u306a\u3069\u5fc5\u9808\u9805\u76ee\u306b\u4efb\u610f\u306e\u5024\u3092\u5165\u308c\u3066[\u6b21\u3078]\nGlassFish, JavaEE7Web \u3092\u9078\u629e\u3057\u3066[\u7d42\u4e86]\npom\u3092\u7de8\u96c6\u3057\u3066\u30d3\u30eb\u30c9\uff1ajavaee-web-api\u3092javaee-api, maven-compiler\u306e1.7\u30921.8\n\n\n2 JPA\u95a2\u9023\u3092\u81ea\u52d5\u751f\u6210\n\nentity, persistance.xml\u751f\u6210\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[DB\uff5eEntity]\u3067[\u6b21\u3078]\n-- \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u63a5\u7d9a\u5148\u3001\u8868\u3092\u6307\u5b9a\u3057\u3066[\u6b21\u3078]\n-- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u7b49\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u66f4\uff09\u3067[\u7d42\u4e86]\n-- entity, persistance.xml \u304c\u81ea\u52d5\u751f\u6210\nDao\u751f\u6210\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[EJB]-[Entity\uff5eSessionBean]\u3067[\u6b21\u3078]\n-- Entity \u3092\u6307\u5b9a\u3057\u3066[\u6b21\u3078]\n-- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u7b49\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u66f4\uff09\u3067[\u7d42\u4e86]\n-- Dao(Facade)\u304c\u81ea\u52d5\u751f\u6210\nService\u751f\u6210\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[EJB]-[SessionBean]\u3067[\u6b21\u3078]\n-- EJB\u540d\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u6307\u5b9a\u3057\u3066[\u7d42\u4e86]\n-- \u4f5c\u3089\u308c\u305f\u30af\u30e9\u30b9\u306b Dao \u3092 @Inject \u3057\u3066 private \u5909\u6570\u4f5c\u6210\n-- Dao \u306e\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n\n\n3 JPA Entity\u4ee5\u5916\u306e\u4f7f\u7528\npublic class Test {\n\n    private String name;\n    private long count;\n\n    public Test(String name, long count){\n        this.name = name;\n        this.count = count;\n    }\n\n    public Test(){}\n\n    // \u4ee5\u4e0b\u3001getter,setter\n\nList<Test> tests = em.createQuery(\n        \"select new xxx.xxx.Test(s.name, count(s)) \"\n          + \"from Main m join Sub s on m.id = s.mainId group by s\",\n        Test.class\n).getResultList();\n\nfor(Test test : tests) {\n    System.out.println(test.getName() + \":\" + test.getCount());\n}\n\n\n4 AOP\u306e\u8a2d\u5b9a\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\n@InterceptorBinding\n@Target(value={ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Priority(Interceptor.Priority.APPLICATION + 20)\npublic @interface AopMethod{\n}\n\nAOP\u51e6\u7406\u5b9f\u88c5\n@Interceptor\n@Dependent\n@AopMethod\npublic class AopInterceptor implements Serializable{\n    @AroundInvoke\n    public Object invoke(InvocationContext ic) throws Exception{\n        try{\n            return ic.proceed();\n        }catch(Exception ex){\n            Logger logger = Logger.getLogger(ic.getTarget().getClass().getSuperclass().getName());\n            logger.log(Level.SEVERE, \"error\", ex);\n            return null;\n        }\n    }\n}\n\nAOP\u3092\u8a2d\u5b9a\n@AopMethod\npublic void subCalc(){\n    result = calcLogic.sub(param1, param2);\n}\n\n\n\u53c2\u8003\nhttp://masatoshitada.hatenadiary.jp/entry/2015/04/03/230218\nhttps://github.com/sueasen/javaeee.git\nhttp://d.hatena.ne.jp/MoonMtLab/20150314/1426327019\nhttps://cloudear.jp/blog/?p=2005\nhttp://enterprisegeeks.hatenablog.com/entry/2015/02/16/080922\nhttp://d.hatena.ne.jp/nowokay/20131213\n#1 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n- [\u30d5\u30a1\u30a4\u30eb]-[\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8]\n- [Maven]-[Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3] \u3067[\u6b21\u3078]\n- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u306a\u3069\u5fc5\u9808\u9805\u76ee\u306b\u4efb\u610f\u306e\u5024\u3092\u5165\u308c\u3066[\u6b21\u3078]\n- GlassFish, JavaEE7Web \u3092\u9078\u629e\u3057\u3066[\u7d42\u4e86]\n- pom\u3092\u7de8\u96c6\u3057\u3066\u30d3\u30eb\u30c9\uff1ajavaee-web-api\u3092javaee-api, maven-compiler\u306e1.7\u30921.8\n\n#2 JPA\u95a2\u9023\u3092\u81ea\u52d5\u751f\u6210\n- entity, persistance.xml\u751f\u6210<br>\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[DB\uff5eEntity]\u3067[\u6b21\u3078]<br>\n-- \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u63a5\u7d9a\u5148\u3001\u8868\u3092\u6307\u5b9a\u3057\u3066[\u6b21\u3078]<br>\n-- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u7b49\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u66f4\uff09\u3067[\u7d42\u4e86]<br>\n-- entity, persistance.xml \u304c\u81ea\u52d5\u751f\u6210\n- Dao\u751f\u6210<br>\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[EJB]-[Entity\uff5eSessionBean]\u3067[\u6b21\u3078]<br>\n-- Entity \u3092\u6307\u5b9a\u3057\u3066[\u6b21\u3078]\n-- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u7b49\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u66f4\uff09\u3067[\u7d42\u4e86]<br>\n-- Dao(Facade)\u304c\u81ea\u52d5\u751f\u6210\n- Service\u751f\u6210<br>\n-- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u53f3\u30af\u30ea\u30c3\u30af-[\u65b0\u898f]-[EJB]-[SessionBean]\u3067[\u6b21\u3078]<br>\n-- EJB\u540d\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u6307\u5b9a\u3057\u3066[\u7d42\u4e86]<br>\n-- \u4f5c\u3089\u308c\u305f\u30af\u30e9\u30b9\u306b Dao \u3092 @Inject \u3057\u3066 private \u5909\u6570\u4f5c\u6210\n-- Dao \u306e\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n\n#3 JPA Entity\u4ee5\u5916\u306e\u4f7f\u7528\n\n```java:\npublic class Test {\n    \n    private String name;\n    private long count;\n    \n    public Test(String name, long count){\n        this.name = name;\n        this.count = count;\n    }\n    \n    public Test(){}\n    \n    // \u4ee5\u4e0b\u3001getter,setter\n```\n\n```java:\nList<Test> tests = em.createQuery(\n        \"select new xxx.xxx.Test(s.name, count(s)) \"\n          + \"from Main m join Sub s on m.id = s.mainId group by s\",\n        Test.class\n).getResultList();\n\nfor(Test test : tests) {\n    System.out.println(test.getName() + \":\" + test.getCount());\n}\n```\n\n#4 AOP\u306e\u8a2d\u5b9a\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u4f5c\u6210\n\n```java\n@InterceptorBinding\n@Target(value={ElementType.METHOD,ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Priority(Interceptor.Priority.APPLICATION + 20)\npublic @interface AopMethod{\n}\n```\n\nAOP\u51e6\u7406\u5b9f\u88c5\n\n```java\n@Interceptor\n@Dependent\n@AopMethod\npublic class AopInterceptor implements Serializable{\n    @AroundInvoke\n    public Object invoke(InvocationContext ic) throws Exception{\n        try{\n            return ic.proceed();\n        }catch(Exception ex){\n            Logger logger = Logger.getLogger(ic.getTarget().getClass().getSuperclass().getName());\n            logger.log(Level.SEVERE, \"error\", ex);\n            return null;\n        }\n    }\n}\n```\n\nAOP\u3092\u8a2d\u5b9a\n\n```java\n@AopMethod\npublic void subCalc(){\n    result = calcLogic.sub(param1, param2);\n}\n```\n\n<hr>\n\u53c2\u8003\nhttp://masatoshitada.hatenadiary.jp/entry/2015/04/03/230218\nhttps://github.com/sueasen/javaeee.git\nhttp://d.hatena.ne.jp/MoonMtLab/20150314/1426327019\nhttps://cloudear.jp/blog/?p=2005\nhttp://enterprisegeeks.hatenablog.com/entry/2015/02/16/080922\nhttp://d.hatena.ne.jp/nowokay/20131213\n"}