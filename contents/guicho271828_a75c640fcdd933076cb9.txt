{"tags": ["common-lisp"], "context": " More than 1 year has passed since last update.\u4f8b\u3002\u81ea\u5206\u306f\u3053\u3093\u306a\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u5916\u90e8\u306e\u30bd\u30eb\u30d0\u3092\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u5236\u9650\u4ed8\u304d\u3067\u547c\u3073\u51fa\u3059\u95a2\u6570\u3067\u3059\u3002\n@export\n(defcached plan-task (task)\n  \"Calls build-component-problem, make a plan with FD, then parse the results.\nreturns a PDDL-PLAN. The call to this function is cached and memoized, so be\ncareful if you measure the elapsed time. When you measure the time, run\n (clear-plan-task-cache) to clear the cache.\"\n  (let* ((*problem* (build-component-problem task))\n         (*domain* (domain *problem*)))\n    (mapcar ...\n            (multiple-value-match (test-problem\n                                   (write-problem *problem*)\n                                   (path *domain*)\n                                   :time-limit 1\n                                   :hard-time-limit (* 60 5)\n                                   :memory (floor (/ (sb-ext:dynamic-space-size) 1000)) ;; 15GB * 0.8 = 120\n                                   ;; :options \"--search astar(lmcut())\"\n                                   )\n              ((plans t-time p-time s-time t-memory p-memory s-memory)\n               (signal 'evaluation-signal\n                       :usage (list t-time p-time s-time t-memory p-memory s-memory))\n               plans)))))\n\n\u3053\u308c\u3092\n(defun plan-task-with-retry (t1)\n  (handler-bind ...\n    (restart-bind ...\n      (plan-task t1))\n\n\u3067\u30e9\u30c3\u30d7\u3057\u3001\u3055\u3089\u306b\n@export\n(defun task-plan-equal (t1 t2)\n  \"Computes plan-wise compatibility. It returns true if any of the component plan\nmapped from t1 to t2 is a valid plan of t2.\"\n  (signal 'comparison-signal)\n  ...\n  (plan-task-with-retry t1))))\n\n\u307f\u305f\u3044\u306b\u6bd4\u8f03\u95a2\u6570\u306e\u4e2d\u3067\u4f7f\u3044\u307e\u3059\u3002\n\u3055\u3089\u306b\u3055\u3089\u306b\u3001\u3053\u306e\u6bd4\u8f03\u95a2\u6570 task-plan-equal \u3092\n(defun categorize-problem (problem seed)\n  (log:info \"~&Categorizing problem ~a with seed ~a\" (name problem) seed)\n  ...\n    (let ((tasks/plan\n           (map-reduce (lambda (bucket)\n                         (coerce (categorize-by-equality\n                                  bucket\n                                  #'task-plan-equal\n                                  :transitive t)\n                                 'list))\n                       #'append\n                       tasks/structure\n                       :initial-value nil)))\n       ....)))\n\n\u306e\u3088\u3046\u306a\u5f62\u3067\u4f7f\u3044\u3001\u6700\u5f8c\u306b\u3001\u5b9f\u969b\u306e\u5b9f\u9a13\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3001\n\u3053\u308c\u3092\u6570\u5341\u500b\u306eproblem/seed \u306e\u30da\u30a2\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3057\u3066\u30ed\u30b0\u3092\u3068\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001\u3067\u306f\u3044\u307e\n:time-limit 1\n:hard-time-limit (* 60 5)\n:memory (floor (/ (sb-ext:dynamic-space-size) 1000)) ;; 15GB * 0.8 = 120\n\n\u306e\u90e8\u5206 \u3060\u3051 \u3092\u5909\u66f4\u3057\u3066\u5b9f\u9a13\u81ea\u4f53\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3001\n\u3057\u304b\u3082\u3042\u3068\u3067\u58ca\u3055\u306a\u3044\u3088\u3046\u306b\u30b9\u30da\u30b7\u30e3\u30eb\u5909\u6570\u3092\u7528\u3044\u305a\u306b\u4f7f\u3044\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3069\u3046\u3057\u307e\u3057\u3087\u3046\u3002\n\u9014\u4e2d\u306e\u95a2\u6570 (4\u500b) \u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306f\u5acc\u3067\u3059\u3002\n\u7279\u306b\u3001plan-task-equal\u306e\u3088\u3046\u306a\u5358\u306a\u308b\u4e8c\u9805\u95a2\u4fc2\u306e\u6bd4\u8f03\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u8ffd\u52a0\u306e\u5f15\u6570\u304c\u3042\u308b\u306e\u306f\u81ea\u5206\u306f\u5acc\u3067\u3059\u3002\n\u3053\u3053\u3067ask-for\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u3001\u4e00\u756a\u5185\u5074\u306e\u30b3\u30fc\u30c9\u3060\u3051\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\n:time-limit (ask-for time-limit 1)\n:hard-time-limit (ask-for hard-time-limit (* 60 5))\n:memory (ask-for memory (floor (/ (sb-ext:dynamic-space-size) 1000))) ;; 15GB * 0.8 = 120\n\n:in \u306f\u7d5e\u308a\u8fbc\u3080\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u904e\u304e\u306a\u3044\u306e\u3067\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001 (ask-for time-limit) \u306a\u3069\u306e time-limit \u3082\u305f\u3060\u306e\u30bf\u30b0\u4ed8\u3051\u306a\u306e\u3067\u3001\n\u5b9f\u969b\u306e\u5909\u6570\u540d\u3067\u3042\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u597d\u304d\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u9078\u3093\u3067\u826f\u3044\u3067\u3059\u3002\n\u3067\u3001\u5b9f\u9a13\u30b3\u30fc\u30c9\u306e\u307b\u3046\u3067\n(in-reply-to ((time-limit 4) (hard-time-limit 10) (memory 200000))\n  (do-experiment))\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3084\u308c\u3070\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u9762\u767d\u3044\u306e\u306f\u3001in-reply-to \u306f\u30b7\u30b0\u30ca\u30eb\u30cf\u30f3\u30c9\u30e9\u306a\u306e\u3067\u3001\n\u305d\u3053\u304b\u3089\u597d\u304d\u306a\u30ea\u30b9\u30bf\u30fc\u30c8\u3092\u547c\u3079\u308b\u3053\u3068\u3067\u3059\u3002\u4f8b\u3048\u3070\n(in-reply-to ((time-limit\n               (invoke-restart 'increase-time) ;; = 7\n               )\n              (hard-time-limit 10)\n              (memory 200000))\n  (do-experiment))\n\n;; ...\u4e2d\u9593\u30b3\u30fc\u30c9\u3067...\n\n(let ((timelimit 2))\n (restart-bind ((increase-time\n                  (lambda (c)\n                    (+ timelimit 5)\n                    ;; do not handle the condition\n                    )))\n   ...)\n\n\u30ea\u30b9\u30bf\u30fc\u30c8 increase-time \u306f\u5c40\u6240\u8131\u51fa\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\n(invoke-restart 'increase-time) \u306f\u666e\u901a\u306b\u623b\u308a\u3001\u5897\u3048\u305f 2+5=7 \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u306e\u306e\u3061\u3001in-reply-to \u304c use-value \u30ea\u30b9\u30bf\u30fc\u30c8\u3092\u4f7f\u3063\u3066 ask-for \u306b\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u4f8b\u3002\u81ea\u5206\u306f\u3053\u3093\u306a\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u5916\u90e8\u306e\u30bd\u30eb\u30d0\u3092\u6642\u9593\u30fb\u30e1\u30e2\u30ea\u5236\u9650\u4ed8\u304d\u3067\u547c\u3073\u51fa\u3059\u95a2\u6570\u3067\u3059\u3002\n\n```cl\n@export\n(defcached plan-task (task)\n  \"Calls build-component-problem, make a plan with FD, then parse the results.\nreturns a PDDL-PLAN. The call to this function is cached and memoized, so be\ncareful if you measure the elapsed time. When you measure the time, run\n (clear-plan-task-cache) to clear the cache.\"\n  (let* ((*problem* (build-component-problem task))\n         (*domain* (domain *problem*)))\n    (mapcar ...\n            (multiple-value-match (test-problem\n                                   (write-problem *problem*)\n                                   (path *domain*)\n                                   :time-limit 1\n                                   :hard-time-limit (* 60 5)\n                                   :memory (floor (/ (sb-ext:dynamic-space-size) 1000)) ;; 15GB * 0.8 = 120\n                                   ;; :options \"--search astar(lmcut())\"\n                                   )\n              ((plans t-time p-time s-time t-memory p-memory s-memory)\n               (signal 'evaluation-signal\n                       :usage (list t-time p-time s-time t-memory p-memory s-memory))\n               plans)))))\n```\n\n\u3053\u308c\u3092\n\n```cl\n(defun plan-task-with-retry (t1)\n  (handler-bind ...\n    (restart-bind ...\n      (plan-task t1))\n```\n\n\u3067\u30e9\u30c3\u30d7\u3057\u3001\u3055\u3089\u306b\n\n\n```cl\n@export\n(defun task-plan-equal (t1 t2)\n  \"Computes plan-wise compatibility. It returns true if any of the component plan\nmapped from t1 to t2 is a valid plan of t2.\"\n  (signal 'comparison-signal)\n  ...\n  (plan-task-with-retry t1))))\n```\n\n\u307f\u305f\u3044\u306b\u6bd4\u8f03\u95a2\u6570\u306e\u4e2d\u3067\u4f7f\u3044\u307e\u3059\u3002\n\u3055\u3089\u306b\u3055\u3089\u306b\u3001\u3053\u306e\u6bd4\u8f03\u95a2\u6570 `task-plan-equal` \u3092\n\n```cl\n(defun categorize-problem (problem seed)\n  (log:info \"~&Categorizing problem ~a with seed ~a\" (name problem) seed)\n  ...\n    (let ((tasks/plan\n           (map-reduce (lambda (bucket)\n                         (coerce (categorize-by-equality\n                                  bucket\n                                  #'task-plan-equal\n                                  :transitive t)\n                                 'list))\n                       #'append\n                       tasks/structure\n                       :initial-value nil)))\n       ....)))\n```\n\n\u306e\u3088\u3046\u306a\u5f62\u3067\u4f7f\u3044\u3001\u6700\u5f8c\u306b\u3001\u5b9f\u969b\u306e\u5b9f\u9a13\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3001\n\u3053\u308c\u3092\u6570\u5341\u500b\u306eproblem/seed \u306e\u30da\u30a2\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3057\u3066\u30ed\u30b0\u3092\u3068\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3067\u306f\u3044\u307e\n\n```cl\n:time-limit 1\n:hard-time-limit (* 60 5)\n:memory (floor (/ (sb-ext:dynamic-space-size) 1000)) ;; 15GB * 0.8 = 120\n```\n\n\u306e\u90e8\u5206 **\u3060\u3051** \u3092\u5909\u66f4\u3057\u3066\u5b9f\u9a13\u81ea\u4f53\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3001\n\u3057\u304b\u3082\u3042\u3068\u3067\u58ca\u3055\u306a\u3044\u3088\u3046\u306b\u30b9\u30da\u30b7\u30e3\u30eb\u5909\u6570\u3092\u7528\u3044\u305a\u306b\u4f7f\u3044\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3069\u3046\u3057\u307e\u3057\u3087\u3046\u3002\n\u9014\u4e2d\u306e\u95a2\u6570 (4\u500b) \u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306f\u5acc\u3067\u3059\u3002\n\u7279\u306b\u3001`plan-task-equal`\u306e\u3088\u3046\u306a\u5358\u306a\u308b\u4e8c\u9805\u95a2\u4fc2\u306e\u6bd4\u8f03\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u8ffd\u52a0\u306e\u5f15\u6570\u304c\u3042\u308b\u306e\u306f\u81ea\u5206\u306f\u5acc\u3067\u3059\u3002\n\n\u3053\u3053\u3067`ask-for`\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u3001\u4e00\u756a\u5185\u5074\u306e\u30b3\u30fc\u30c9\u3060\u3051\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\n\n```cl\n:time-limit (ask-for time-limit 1)\n:hard-time-limit (ask-for hard-time-limit (* 60 5))\n:memory (ask-for memory (floor (/ (sb-ext:dynamic-space-size) 1000))) ;; 15GB * 0.8 = 120\n```\n\n`:in` \u306f\u7d5e\u308a\u8fbc\u3080\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u904e\u304e\u306a\u3044\u306e\u3067\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001 `(ask-for time-limit)` \u306a\u3069\u306e `time-limit` \u3082\u305f\u3060\u306e\u30bf\u30b0\u4ed8\u3051\u306a\u306e\u3067\u3001\n\u5b9f\u969b\u306e\u5909\u6570\u540d\u3067\u3042\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u597d\u304d\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u9078\u3093\u3067\u826f\u3044\u3067\u3059\u3002\n\u3067\u3001\u5b9f\u9a13\u30b3\u30fc\u30c9\u306e\u307b\u3046\u3067\n\n```cl\n(in-reply-to ((time-limit 4) (hard-time-limit 10) (memory 200000))\n  (do-experiment))\n```\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3084\u308c\u3070\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u9762\u767d\u3044\u306e\u306f\u3001in-reply-to \u306f\u30b7\u30b0\u30ca\u30eb\u30cf\u30f3\u30c9\u30e9\u306a\u306e\u3067\u3001\n\u305d\u3053\u304b\u3089\u597d\u304d\u306a\u30ea\u30b9\u30bf\u30fc\u30c8\u3092\u547c\u3079\u308b\u3053\u3068\u3067\u3059\u3002\u4f8b\u3048\u3070\n\n```cl\n(in-reply-to ((time-limit\n               (invoke-restart 'increase-time) ;; = 7\n               )\n              (hard-time-limit 10)\n              (memory 200000))\n  (do-experiment))\n\n;; ...\u4e2d\u9593\u30b3\u30fc\u30c9\u3067...\n\n(let ((timelimit 2))\n (restart-bind ((increase-time\n                  (lambda (c)\n                    (+ timelimit 5)\n                    ;; do not handle the condition\n                    )))\n   ...)\n```\n\n\u30ea\u30b9\u30bf\u30fc\u30c8 increase-time \u306f\u5c40\u6240\u8131\u51fa\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\n`(invoke-restart 'increase-time)` \u306f\u666e\u901a\u306b\u623b\u308a\u3001\u5897\u3048\u305f 2+5=7 \u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u306e\u306e\u3061\u3001`in-reply-to` \u304c `use-value` \u30ea\u30b9\u30bf\u30fc\u30c8\u3092\u4f7f\u3063\u3066 `ask-for` \u306b\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n"}