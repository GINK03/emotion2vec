{"tags": ["Coq", "ssreflect", "MathComp"], "context": "\n\nSSReflect\u306eView\u3068View Hint\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\n2014_10_26 @suharahiromichi\n\u3053\u306e\u6587\u66f8\u306e\u30b3\u30fc\u30c9\u306f\u3001\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_ais_view_hint.v\nProofCafe Nr.42 \u3067\u3001\u300cAn introduction to small scale reflection in Coq\u300d\nhttps://hal.inria.fr/inria-00515548/PDF/main-rr.pdf\n\u306e4\u7ae0\u300c4 Small scale reflection, first examples\u300d\u306e\u8aac\u660e\u3092\u3057\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u88dc\u8db3\uff08\u8a02\u6b63\u3092\u542b\u3080\uff09\u3092\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\u3054\u6ce8\u610f\uff1a\u3053\u306e\u6587\u7ae0\u3067\u306f\u3001\u8aac\u660e\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067Variable\u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u300cView\u3092\u4f7f\u308f\u306a\u3044\u4f8b\u300d\u304c\u5b9f\u969b\u3088\u308a\u3082\u5358\u7d14\u306b\u307f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u901a\u5e38\u306e\u8a3c\u660e\u3092View\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u66f8\u304d\u76f4\u3059\u5834\u5408\u306a\u3069\u3001\u6a5f\u68b0\u7684\u306a\u66f8\u304d\u76f4\u3057\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u3001\u9069\u5b9c\u306b\u3001\u8ff0\u8a9e\u306e\u5f15\u6570\u3092\u88dc\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u300c_\u300d\u3067\u3082\u3088\u3044\u5834\u5408\u304c\u3042\u308b\uff09\u3002\u305d\u306e\u3042\u305f\u308a\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u306e\u6587\u732e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nRequire Import ssreflect ssrfun ssrbool.\n\n\n\n\nView\nCoq\u306eSSReflct\u62e1\u5f35\u3067\u306f\u3001move/V \u3084 apply/V \u306e\u304b\u305f\u3061\u3067\u524d\u63d0\uff08\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\uff09\u3084\u3001\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u3068\u304d\u306eV\u3092View\u3068\u547c\u3073\u307e\u3059\u3002\n\u5b9f\u969b\u306f \u524d\u63d0\u307e\u305f\u306f\u30b4\u30fc\u30eb\u306b\u5bfe\u3059\u308b apply \u306e\u7565\u8a18\u3067\u3042\u308a\u3001\u304a\u306a\u3058\u3053\u3068\u304cStandard Coq\u3067\u3082\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nSection Sample1.\n  Variable P Q : bool -> Prop.\n  Hypothesis P2Q : forall a, P a -> Q a.\n\n\n\n\n\u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\u30b4\u30fc\u30eb\u300c\u25b3->\u25cb\u300d\u306e\u3068\u304d\u3001\u25b3\u306e\u90e8\u5206\uff08\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\uff09\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a.\n    move/P2Q.                               (* Q a -> Q a *)\n    Undo 1.\n    move=> HPa; move: {HPa} (P2Q a HPa).\n    Undo 1.\n    move=> HPa; apply P2Q in HPa; move: HPa.\n    apply.\n    Undo 2.\n    intro HPa; apply P2Q in HPa; apply HPa. (* Standard Coq\u98a8 *)\n  Qed.\n\n\n\n\n\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\u30b4\u30fc\u30eb\u5168\u4f53\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u30b4\u30fc\u30eb\u304c\u25b3->\u25cb\u306e\u5834\u5408\u306f\u305d\u306e\u5168\u4f53\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u901a\u5e38\u306fintro(move=>)\u3057\u3066\u25cb\u3060\u3051\u3092\u5bfe\u8c61\u306b\u3057\u307e\u3059\u3002\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a HPa.\n    (* Goal : Q a *)\n    apply/P2Q; apply HPa.                   (* \u6700\u521d\u306eapply\u306e\u5f8c\u3001HPa : P a |- P a *)\n    Undo 1.\n    apply: (P2Q a HPa).                     (* apply (P2Q a HPa) \u3067\u3082\u3088\u3044\u3002 *)\n    Undo 1.\n    apply P2Q; apply HPa.                   (* Standard Coq\u98a8\u3001\u4e00\u756a\u7c21\u5358\uff1f *)\n  Qed.\nEnd Sample1.\n\n\n\n\nView Hint\nView \u306b\u306f\u3001\u524d\u7bc0\u306b\u52a0\u3048\u3066View Hint\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u5b9a\u7406\uff08\u88dc\u984c\uff09\u3092\u81ea\u52d5\u7684\u306b\u88dc\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002View Hint \u306e\u3072\u3068\u3064\u306b\u3001iffLR \u304c\u3042\u308a\u307e\u3059\u3002\n\nCheck iffLR : forall P Q : Prop, (P <-> Q) -> P -> Q.\n\n\n\n\u300cP<->Q\u300d\u306e\u304b\u305f\u3061\u3092\u3057\u305f\u8ff0\u8a9e\u3092View\u3068\u3057\u3066\u4f7f\u3063\u305f\u5834\u5408\u3001iffLR\u304c\u81ea\u52d5\u7684\u306b\u88dc\u308f\u308c\u3001\u300cP->Q\u300d\u3068\u3057\u3066\u9069\u7528\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u3002\n\nSection Sample2.\n  Variable P Q : bool -> Prop.\n  Hypothesis PQequiv : forall a, P a <-> Q a.\n\n\n\n\n\u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a.\n    move/PQequiv.                           (* Q a -> Q a *)\n    Undo 1.\n    Check (iffLR (PQequiv a)) : P a -> Q a.\n    move/(iffLR (PQequiv a)).               (* a \u306f _ \u3067\u3082\u3088\u3044\u3002 *)\n    Undo 1.\n    move=> HPa; move: {HPa} (iffLR (PQequiv a) HPa).\n    Undo 1.\n    move=> HPa; apply (iffLR (PQequiv a)) in HPa; move: HPa.\n    apply.\n  Qed.\n\n\n\n\n\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a HPa.\n    (* Goal : Q a *)\n    apply/PQequiv; apply HPa.\n    Undo 1.\n    Check (iffLR (PQequiv a)) : P a -> Q a.\n    apply/(iffLR (PQequiv a)); apply HPa.\n    Undo 1.\n    apply: (iffLR (PQequiv a) HPa).\n    Undo 1.\n    apply (iffLR (PQequiv a)); apply HPa.\n  Qed.\nEnd Sample2.\n\n\n\n\n\u6a19\u6e96\u306eView Hint \u306e\u4f8b (iffLRn, iffRLn, iffLR, iffRL)\nSSReflect\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u3001theories/ssreflect.v \u306e\u6700\u5f8c\u306b\u56db\u3064\u306eView Hint\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nCheck iffLR : forall P Q : Prop, (P <-> Q) -> P -> Q.\nCheck iffRL : forall P Q : Prop, (P <-> Q) -> Q -> P.\nCheck iffLRn : forall P Q : Prop, (P <-> Q) -> ~ P -> ~ Q.\nCheck iffRLn : forall P Q : Prop, (P <-> Q) -> ~ Q -> ~ P.\n\nSection Sample3.\n  Variable P Q : bool -> Prop.\n  Variable a : bool.\n  Hypothesis PQequiv : P a <-> Q a.\n\n  Check iffLR PQequiv : P a -> Q a.\n  Check iffRL PQequiv : Q a -> P a.\n  Check iffLRn PQequiv : ~ P a -> ~ Q a.\n  Check iffRLn PQequiv : ~ Q a -> ~ P a.\n\n\n\n\n\u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\u7aef\u6298\u3063\u305f\u8a00\u3044\u65b9\u3092\u3059\u308b\u3068\u3001move/PQequiv \u306f\u3001move/(iffLR PQequiv) \u307e\u305f\u306f move/(iffRL PQequiv) \u307e\u305f\u306f move/(iffLRn PQequiv) \u307e\u305f\u306f move/(iffRLn PQequiv)\u306e\u3069\u308c\u304b\u304c\u9078\u3070\u308c\u3066\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e4\u7a2e\u985e\u306e\u30b4\u30fc\u30eb\u304c\u3059\u3079\u3066\u3001move/PQequiv \u3092\u3064\u304b\u3063\u3066\u8a3c\u660e\u3067\u304d\u307e\u3059\u3002\n\n  Goal P a -> Q a. move/PQequiv. by apply. Qed.     (* Q a -> Q a *)\n  Goal Q a -> P a. move/PQequiv. by apply. Qed.     (* P a -> P a *)\n  Goal ~ P a -> ~ Q a. move/PQequiv. by apply. Qed. (* ~ Q a -> ~ Q a *)\n  Goal ~ Q a -> ~ P a. move/PQequiv. by apply. Qed. (* ~ P a -> ~ P a *)\n\n\n\n\n\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\u540c\u69d8\u306b\u3001apply/PQequiv \u306f\u3001apply/(iffLR PQequiv) \u307e\u305f\u306f apply/(iffRL PQequiv) \u307e\u305f\u306f apply/(iffLRn PQequiv) \u307e\u305f\u306f apply/(iffRLn PQequiv)\u306e\u3069\u308c\u304b\u304c\u9078\u3070\u308c\u3066\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e4\u7a2e\u985e\u306e\u30b4\u30fc\u30eb\u304c\u3059\u3079\u3066\u3001apply/PQequiv \u3092\u3064\u304b\u3063\u3066\u8a3c\u660e\u3067\u304d\u307e\u3059\u3002\n\n  Goal P a -> Q a. move=> H; apply/PQequiv. by apply H. Qed. (* H : P a |- P a *)\n  Goal Q a -> P a. move=> H; apply/PQequiv. by apply H. Qed. (* H : Q a |- Q a *)\n  Goal ~ P a -> ~ Q a. move=> H; apply/PQequiv. by apply H. Qed. (* H : ~ P a -> ~ P a *)\n  Goal ~ Q a -> ~ P a. move=> H; apply/PQequiv. by apply H. Qed. (* H : ~ Q a -> ~ Q a *)\nEnd Sample3.\n\n\n\n\n\nreflect\u8ff0\u8a9e\u3092\u4f7f\u7528\u53ef\u80fd\u306b\u3059\u308bView Hint\n\u3088\u308a\u91cd\u8981\u306aView Hint\u306b elimT \u3068 intorT \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306eView Hint\u306e\u304a\u304c\u3051\u3067\u3001andP\u3084orP\u306e\u3088\u3046\u306a\u300creclect P b\u300d\u306e\u304b\u305f\u3061\u306ereflect\u8ff0\u8a9e\u3092View\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nCheck elimT : forall (P : Prop) (b : bool), reflect P b -> b -> P.\nCheck introT : forall (P : Prop) (b : bool), reflect P b -> P -> b.\n\nSection Sample4.\n  Variable a b : bool.\n\n\n\n\n\u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\n  Hypothesis andP : reflect (a /\\ b) (a && b).\n  Check elimT andP : a && b -> a /\\ b.\n\n  Goal a && b -> a.\n  Proof.\n    move/andP.                              (* a /\\ b -> a /\\ b *)\n    Undo 1.\n    move/(elimT andP).\n    Undo 1.\n    move=> Hab; move: {Hab} (elimT andP Hab).\n    Undo 1.\n    move=> Hab; apply (elimT andP) in Hab; move: Hab.\n    case; by [].\n  Qed.\n\n\n\n\n\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\n  Hypothesis orP  : reflect (a \\/ b) (a || b).\n  Check introT orP : a \\/ b -> a || b.\n\n  Goal a -> a || b.\n  Proof.\n    move=> Ha.\n    apply/orP.                              (* Hab : a |- a || b *)\n    Undo 1.\n    apply/(introT orP).\n    Undo 1.\n    apply: (introT orP).\n    left; by [].\n  Qed.\n\n(* \u6b21\u306f\u30b4\u30fc\u30eb\u300ca&&b->a/\\b\u300d\u306b\u5bfe\u3057\u3066\u3001\u300ca&&b->a/\\b\u300d\u3092\u9069\u7528\u3057\u3066\u3044\u308b\u3002\n\u300c\u25b3->\u25cb\u300d\u5168\u4f53\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u4e00\u822c\u7684\u306a\u4f8b\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3002\u8981\u88dc\u8db3 *)\n  Goal a && b -> a /\\ b.\n  Proof.\n    apply/andP.\n    Undo 1.\n    apply/(elimT andP).\n  Qed.\nEnd Sample4.\n\n\n\n\n\u30b4\u30fc\u30eb\u304cequivalence\uff08\u300c=\u300d\uff09\u3067\u3042\u308b\u3068\u304d\u306b\u3001reflect\u8ff0\u8a9e\u3092\u4f7f\u7528\u53ef\u80fd\u306b\u3059\u308bView Hint\n\u30b4\u30fc\u30eb\u304c\u300c=\u300d\u306e\u3068\u304d\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u300capply/idP/idP\u300d\u3068\u3001\u899a\u3048\u3066\u304a\u3044\u3066\u3082\u3088\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u3068\u304d\u3001\u5de6\u306e/idP\u306b\u306fintroTF\u304c\u3001\u53f3\u306e/idP\u306b\u306fequivPif\u304c\u3001View Hint\u3068\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002\n\nCheck introTF : forall (P : Prop) (b c : bool), reflect P b -> (if c then P else ~ P) -> b = c.\nCheck equivPif : forall (P Q : Prop) (b : bool), reflect P b -> (Q -> P) -> (P -> Q) -> if b then Q else ~ Q.\n\nSection Sample4_5.\n  Variable a b : bool.\n\n  Hypothesis idP : forall b : bool, reflect b b.\n\n  Goal a || b = b || a.\n  Proof.\n    apply/idP/idP.\n    Undo 1.\n\n    Check introTF (idP (a || b)).\n    apply/(introTF (idP (a || b))).\n    Check equivPif (idP (b || a)).\n    apply/(equivPif (idP (b || a))).\n\n    (* \u8aac\u660e\u306e\u305f\u3081\u3001\u5197\u9577\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002 *)\n    - move/orP=> H; apply/orP; case: H; by [right | left].\n    - move/orP=> H; apply/orP; case: H; by [right | left].\n  Qed.\n\n\n\nView Hint\u4ee5\u524d\u306e\u8a71\u984c\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059\u3002\n\n  Goal a || b = b || a.\n  Proof.\n    apply/orP/orP; case; by [right | left].\n  Qed.\nEnd Sample4_5.\n\n\n\n\n\u307e\u3060\u8aac\u660e\u3067\u304d\u3066\u3044\u306a\u3044\u4e8b\u9805\n\nmove/\u3068apply/\u306eView Hint\u306e\u533a\u5225\u304c\u3042\u308b\u7406\u7531\u3002\n\u72ec\u81ea\u306bView Hint\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3002\n\u4e0a\u8a18\u4ee5\u5916\u306essrbool\u306b\u3075\u304f\u307e\u308c\u308bView Hint\u3002\nStandard Coq\u3068\u6bd4\u8f03\u3084\u3001\u305d\u308c\u3078\u306e\u66f8\u304d\u63db\u3048\u3002\n\n\n\u306e\u3053\u308a\u306eView Hint\nView Hint\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3002\ntheories/ssreflect.v \u3067\u306f\u3001\nHint View for move/ iffLRn|2 iffRLn|2 iffLR|2 iffRL|2.Hint View for apply/ iffRLn|2 iffLRn|2 iffRL|2 iffLR|2.\n\ntheories/ssrbool.v \u3067\u306f\u3001\nHint View for move/ elimTF|3 elimNTF|3 elimTFn|3 introT|2 introTn|2 introN|2.Hint View for apply/ introTF|3 introNTF|3 introTFn|3 elimT|2 elimTn|2 elimN|2.Hint View for apply// equivPif|3 xorPif|3 equivPifn|3 xorPifn|3.\n\n\u3053\u308c\u3092\u307e\u3068\u3081\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nassumption interpretation (move/)\u3067\u4f7f\u7528\uff1aelimTF elimNTF elimTFnintroT introTn introN\ngoal interpretations (apply/)\u3067\u4f7f\u7528\uff1aelimT elimTn elimNintroTF introNTF introTFn\nright hand sides of double views (apply//)\u3067\u4f7f\u7528\uff1aequivPif equivPifnxorPif xorPifn\n\n\n\u6a19\u6e96\u5b9a\u7fa9\u306eView Hint\u306e\u4e00\u89a7\n\n(* move/\u3067\u4f7f\u7528\uff1a *)\nCheck elimTF    : forall (P : Prop) (b c : bool), reflect P b -> b = c -> if c then P else ~ P.\nCheck elimNTF   : forall (P : Prop) (b c : bool), reflect P b -> ~~ b = c -> if c then ~ P else P.\nCheck elimTFn   : forall (P : Prop) (b c : bool), reflect P (~~ b) -> b = c -> if c then ~ P else P.\n(* apply/\u3067\u4f7f\u7528\uff1a *)\nCheck elimT     : forall (P : Prop) (b : bool), reflect P b -> b -> P.\nCheck elimTn    : forall (P : Prop) (b' : bool), reflect P (~~ b') -> b' -> ~ P.\nCheck elimN     : forall (P : Prop) (b : bool), reflect P b -> ~~ b -> ~ P.\n(* apply//\u3067\u4f7f\u7528\uff1a *)\nCheck equivPif  : forall (P Q : Prop) (b : bool), reflect P b -> (Q -> P) -> (P -> Q) -> if b then Q else ~ Q.\nCheck equivPifn : forall (P Q : Prop) (b : bool), reflect P (~~ b) -> (Q -> P) -> (P -> Q) -> if b then ~ Q else Q.\n\n(* move/\u3067\u4f7f\u7528\uff1a *)\nCheck introTF   : forall (P : Prop) (b c : bool), reflect P b -> (if c then P else ~ P) -> b = c.\nCheck introNTF  : forall (P : Prop) (b c : bool), reflect P b -> (if c then ~ P else P) -> ~~ b = c.\nCheck introTFn  : forall (P : Prop) (b c : bool), reflect P (~~ b) -> (if c then ~ P else P) -> b = c.\n(* apply/\u3067\u4f7f\u7528\uff1a *)\nCheck introT    : forall (P : Prop) (b : bool), reflect P b -> P -> b.\nCheck introTn   : forall (P : Prop) (b' : bool), reflect P (~~ b') -> ~ P -> b'.\nCheck introN    : forall (P : Prop) (b : bool), reflect P b -> ~ P -> ~~ b.\n(* apply//\u3067\u4f7f\u7528\uff1a *)\nCheck xorPif    : forall (P Q : Prop) (b : bool), reflect P b -> Q \\/ P -> ~ (Q /\\ P) -> if b then ~ Q else Q.\nCheck xorPifn   : forall (P Q : Prop) (b : bool), reflect P (~~ b) -> Q \\/ P -> ~ (Q /\\ P) -> if b then Q else ~ Q.\n\nSection Sample5.\n  Variable a b : bool.\n  Hypothesis andP : reflect (a /\\ b) (a && b).\n  Hypothesis nandP : reflect (~~ a \\/ ~~ b) (~~ (a && b)).\n  Hypothesis idP : reflect b b.\n\n\n\n\nandP\u307e\u305f\u306fnandP \u3092\u4f7f\u3046\u4f8b\n\n  Variable c : bool.\n  Variable Q : Prop.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check elimTF andP (c := c) : a && b = c -> if c then a /\\ b else ~ (a /\\ b).\n  Check elimNTF andP         : ~~ (a && b) = c -> if c then ~ (a /\\ b) else a /\\ b.\n  Check elimTFn nandP        : a && b = c -> if c then ~ (~~ a \\/ ~~ b) else ~~ a \\/ ~~ b.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check elimT andP           : a && b -> a /\\ b.\n  Check elimTn nandP         : a && b -> ~ (~~ a \\/ ~~ b).\n  Check elimN andP           : ~~ (a && b) -> ~ (a /\\ b).\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check equivPif andP (Q := Q) : (Q -> a /\\ b) -> (a /\\ b -> Q) -> if a && b then Q else ~ Q.\n  Check equivPifn nandP        : (Q -> ~~ a \\/ ~~ b) -> (~~ a \\/ ~~ b -> Q) -> if a && b then ~ Q else Q.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check introTF andP         : (if c then a /\\ b else ~ (a /\\ b)) -> a && b = c.\n  Check introNTF andP        : (if c then ~ (a /\\ b) else a /\\ b) -> ~~ (a && b) = c.\n  Check introTFn nandP       : (if c then ~ (~~ a \\/ ~~ b) else ~~ a \\/ ~~ b) -> a && b = c.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check introT andP          : a /\\ b -> a && b.\n  Check introTn nandP        : ~ (~~ a \\/ ~~ b) -> a && b.\n  Check introN andP          : ~ (a /\\ b) -> ~~ (a && b).\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check xorPif andP (Q := Q) : Q \\/ a /\\ b -> ~ (Q /\\ a /\\ b) -> if a && b then ~ Q else Q.\n  Check xorPifn nandP        : Q \\/ ~~ a \\/ ~~ b -> ~ (Q /\\ (~~ a \\/ ~~ b)) -> if a && b then Q else ~ Q.\n\n\n\n\nidP\u307e\u305f\u306fidPn \u3092\u4f7f\u3046\u4f8b\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check elimTF idP (c := c).                (* : b = c -> if c then b else ~ b *)\n  Check elimNTF idP          : ~~ b = c -> if c then ~ b else b.\n  Check elimTFn idPn         : b = c -> if c then ~ ~~ b else ~~ b.\n  (* apply/\u3067\u4f7f\u7528 \uff1a *)\n  Check elimT idP            : b -> b.\n  Check elimTn idPn          : b -> ~ ~~ b.\n  Check elimN idP            :  ~~ b -> ~ b.\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check equivPif idP (Q := Q) : (Q -> b) -> (b -> Q) -> if b then Q else ~ Q.\n  Check equivPifn idPn       : (c -> ~~ b) -> (~~ b -> c) -> if b then ~ c else c.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check introTF idP (c := c).               (* (if c then b else ~ b) -> b = c *)\n  Check introNTF idP         : (if c then ~ b else b) -> ~~ b = c.\n  Check introTFn idPn        : (if c then ~ ~~ b else ~~ b) -> b = c.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check introT idP           : b -> b.\n  Check introTn idPn         : ~ ~~ b -> b.\n  Check introN idP           : ~ b -> ~~ b.\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check xorPif idP (Q := Q)  : Q \\/ b -> ~ (Q /\\ b) -> if b then ~ Q else Q.\n  Check xorPifn idPn (Q := Q) (b := b) : Q \\/ ~~ b -> ~ (Q /\\ ~~ b) -> if b then Q else ~ Q.\nEnd Sample5.\n\n\nSSReflect\u306eView\u3068View Hint\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\n=========\n\n2014_10_26 @suharahiromichi\n\n\u3053\u306e\u6587\u66f8\u306e\u30b3\u30fc\u30c9\u306f\u3001\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_ais_view_hint.v\n\nProofCafe Nr.42 \u3067\u3001\u300cAn introduction to small scale reflection in Coq\u300d\nhttps://hal.inria.fr/inria-00515548/PDF/main-rr.pdf\n\u306e4\u7ae0\u300c4 Small scale reflection, first examples\u300d\u306e\u8aac\u660e\u3092\u3057\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u88dc\u8db3\uff08\u8a02\u6b63\u3092\u542b\u3080\uff09\u3092\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u3054\u6ce8\u610f\uff1a\u3053\u306e\u6587\u7ae0\u3067\u306f\u3001\u8aac\u660e\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u4e2d\u3067Variable\u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u300cView\u3092\u4f7f\u308f\u306a\u3044\u4f8b\u300d\u304c\u5b9f\u969b\u3088\u308a\u3082\u5358\u7d14\u306b\u307f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u901a\u5e38\u306e\u8a3c\u660e\u3092View\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u66f8\u304d\u76f4\u3059\u5834\u5408\u306a\u3069\u3001\u6a5f\u68b0\u7684\u306a\u66f8\u304d\u76f4\u3057\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u3001\u9069\u5b9c\u306b\u3001\u8ff0\u8a9e\u306e\u5f15\u6570\u3092\u88dc\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u300c_\u300d\u3067\u3082\u3088\u3044\u5834\u5408\u304c\u3042\u308b\uff09\u3002\u305d\u306e\u3042\u305f\u308a\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u306e\u6587\u732e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n```coq:\n\nRequire Import ssreflect ssrfun ssrbool.\n\n\n```\n\n# View\nCoq\u306eSSReflct\u62e1\u5f35\u3067\u306f\u3001move/V \u3084 apply/V \u306e\u304b\u305f\u3061\u3067\u524d\u63d0\uff08\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\uff09\u3084\u3001\u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u3068\u304d\u306eV\u3092View\u3068\u547c\u3073\u307e\u3059\u3002\n\u5b9f\u969b\u306f \u524d\u63d0\u307e\u305f\u306f\u30b4\u30fc\u30eb\u306b\u5bfe\u3059\u308b apply \u306e\u7565\u8a18\u3067\u3042\u308a\u3001\u304a\u306a\u3058\u3053\u3068\u304cStandard Coq\u3067\u3082\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n\n```coq:\n\nSection Sample1.\n  Variable P Q : bool -> Prop.\n  Hypothesis P2Q : forall a, P a -> Q a.\n\n\n```\n\n## \u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\u30b4\u30fc\u30eb\u300c\u25b3->\u25cb\u300d\u306e\u3068\u304d\u3001\u25b3\u306e\u90e8\u5206\uff08\u30b9\u30bf\u30c3\u30af\u30c8\u30c3\u30d7\uff09\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n\n```coq:\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a.\n    move/P2Q.                               (* Q a -> Q a *)\n    Undo 1.\n    move=> HPa; move: {HPa} (P2Q a HPa).\n    Undo 1.\n    move=> HPa; apply P2Q in HPa; move: HPa.\n    apply.\n    Undo 2.\n    intro HPa; apply P2Q in HPa; apply HPa. (* Standard Coq\u98a8 *)\n  Qed.\n\n\n```\n\n## \u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\u30b4\u30fc\u30eb\u5168\u4f53\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u30b4\u30fc\u30eb\u304c\u25b3->\u25cb\u306e\u5834\u5408\u306f\u305d\u306e\u5168\u4f53\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u901a\u5e38\u306fintro(move=>)\u3057\u3066\u25cb\u3060\u3051\u3092\u5bfe\u8c61\u306b\u3057\u307e\u3059\u3002\n\n\n```coq:\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a HPa.\n    (* Goal : Q a *)\n    apply/P2Q; apply HPa.                   (* \u6700\u521d\u306eapply\u306e\u5f8c\u3001HPa : P a |- P a *)\n    Undo 1.\n    apply: (P2Q a HPa).                     (* apply (P2Q a HPa) \u3067\u3082\u3088\u3044\u3002 *)\n    Undo 1.\n    apply P2Q; apply HPa.                   (* Standard Coq\u98a8\u3001\u4e00\u756a\u7c21\u5358\uff1f *)\n  Qed.\nEnd Sample1.\n\n\n```\n\n# View Hint\nView \u306b\u306f\u3001\u524d\u7bc0\u306b\u52a0\u3048\u3066View Hint\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u5b9a\u7406\uff08\u88dc\u984c\uff09\u3092\u81ea\u52d5\u7684\u306b\u88dc\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002View Hint \u306e\u3072\u3068\u3064\u306b\u3001iffLR \u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\n```coq:\n\nCheck iffLR : forall P Q : Prop, (P <-> Q) -> P -> Q.\n\n\n```\n\u300cP<->Q\u300d\u306e\u304b\u305f\u3061\u3092\u3057\u305f\u8ff0\u8a9e\u3092View\u3068\u3057\u3066\u4f7f\u3063\u305f\u5834\u5408\u3001iffLR\u304c\u81ea\u52d5\u7684\u306b\u88dc\u308f\u308c\u3001\u300cP->Q\u300d\u3068\u3057\u3066\u9069\u7528\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u3002\n\n\n\n```coq:\n\nSection Sample2.\n  Variable P Q : bool -> Prop.\n  Hypothesis PQequiv : forall a, P a <-> Q a.\n\n\n```\n\n## \u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\n\n```coq:\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a.\n    move/PQequiv.                           (* Q a -> Q a *)\n    Undo 1.\n    Check (iffLR (PQequiv a)) : P a -> Q a.\n    move/(iffLR (PQequiv a)).               (* a \u306f _ \u3067\u3082\u3088\u3044\u3002 *)\n    Undo 1.\n    move=> HPa; move: {HPa} (iffLR (PQequiv a) HPa).\n    Undo 1.\n    move=> HPa; apply (iffLR (PQequiv a)) in HPa; move: HPa.\n    apply.\n  Qed.\n\n\n```\n\n## \u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\n\n```coq:\n\n  Goal forall a, P a -> Q a.\n  Proof.\n    move=> a HPa.\n    (* Goal : Q a *)\n    apply/PQequiv; apply HPa.\n    Undo 1.\n    Check (iffLR (PQequiv a)) : P a -> Q a.\n    apply/(iffLR (PQequiv a)); apply HPa.\n    Undo 1.\n    apply: (iffLR (PQequiv a) HPa).\n    Undo 1.\n    apply (iffLR (PQequiv a)); apply HPa.\n  Qed.\nEnd Sample2.\n\n\n```\n\n# \u6a19\u6e96\u306eView Hint \u306e\u4f8b (iffLRn, iffRLn, iffLR, iffRL)\nSSReflect\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3068\u3001theories/ssreflect.v \u306e\u6700\u5f8c\u306b\u56db\u3064\u306eView Hint\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n\n```coq:\n\nCheck iffLR : forall P Q : Prop, (P <-> Q) -> P -> Q.\nCheck iffRL : forall P Q : Prop, (P <-> Q) -> Q -> P.\nCheck iffLRn : forall P Q : Prop, (P <-> Q) -> ~ P -> ~ Q.\nCheck iffRLn : forall P Q : Prop, (P <-> Q) -> ~ Q -> ~ P.\n\nSection Sample3.\n  Variable P Q : bool -> Prop.\n  Variable a : bool.\n  Hypothesis PQequiv : P a <-> Q a.\n\n  Check iffLR PQequiv : P a -> Q a.\n  Check iffRL PQequiv : Q a -> P a.\n  Check iffLRn PQequiv : ~ P a -> ~ Q a.\n  Check iffRLn PQequiv : ~ Q a -> ~ P a.\n\n\n```\n\n## \u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\u7aef\u6298\u3063\u305f\u8a00\u3044\u65b9\u3092\u3059\u308b\u3068\u3001move/PQequiv \u306f\u3001move/(iffLR PQequiv) \u307e\u305f\u306f move/(iffRL PQequiv) \u307e\u305f\u306f move/(iffLRn PQequiv) \u307e\u305f\u306f move/(iffRLn PQequiv)\u306e\u3069\u308c\u304b\u304c\u9078\u3070\u308c\u3066\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e4\u7a2e\u985e\u306e\u30b4\u30fc\u30eb\u304c\u3059\u3079\u3066\u3001move/PQequiv \u3092\u3064\u304b\u3063\u3066\u8a3c\u660e\u3067\u304d\u307e\u3059\u3002\n\n\n```coq:\n\n  Goal P a -> Q a. move/PQequiv. by apply. Qed.     (* Q a -> Q a *)\n  Goal Q a -> P a. move/PQequiv. by apply. Qed.     (* P a -> P a *)\n  Goal ~ P a -> ~ Q a. move/PQequiv. by apply. Qed. (* ~ Q a -> ~ Q a *)\n  Goal ~ Q a -> ~ P a. move/PQequiv. by apply. Qed. (* ~ P a -> ~ P a *)\n\n\n```\n\n## \u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\u540c\u69d8\u306b\u3001apply/PQequiv \u306f\u3001apply/(iffLR PQequiv) \u307e\u305f\u306f apply/(iffRL PQequiv) \u307e\u305f\u306f apply/(iffLRn PQequiv) \u307e\u305f\u306f apply/(iffRLn PQequiv)\u306e\u3069\u308c\u304b\u304c\u9078\u3070\u308c\u3066\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e4\u7a2e\u985e\u306e\u30b4\u30fc\u30eb\u304c\u3059\u3079\u3066\u3001apply/PQequiv \u3092\u3064\u304b\u3063\u3066\u8a3c\u660e\u3067\u304d\u307e\u3059\u3002\n\n\n```coq:\n\n  Goal P a -> Q a. move=> H; apply/PQequiv. by apply H. Qed. (* H : P a |- P a *)\n  Goal Q a -> P a. move=> H; apply/PQequiv. by apply H. Qed. (* H : Q a |- Q a *)\n  Goal ~ P a -> ~ Q a. move=> H; apply/PQequiv. by apply H. Qed. (* H : ~ P a -> ~ P a *)\n  Goal ~ Q a -> ~ P a. move=> H; apply/PQequiv. by apply H. Qed. (* H : ~ Q a -> ~ Q a *)\nEnd Sample3.\n\n\n\n```\n\n# reflect\u8ff0\u8a9e\u3092\u4f7f\u7528\u53ef\u80fd\u306b\u3059\u308bView Hint\n\u3088\u308a\u91cd\u8981\u306aView Hint\u306b elimT \u3068 intorT \u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306eView Hint\u306e\u304a\u304c\u3051\u3067\u3001andP\u3084orP\u306e\u3088\u3046\u306a\u300creclect P b\u300d\u306e\u304b\u305f\u3061\u306ereflect\u8ff0\u8a9e\u3092View\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n```coq:\n\nCheck elimT : forall (P : Prop) (b : bool), reflect P b -> b -> P.\nCheck introT : forall (P : Prop) (b : bool), reflect P b -> P -> b.\n\nSection Sample4.\n  Variable a b : bool.\n\n\n```\n\n## \u4eee\u5b9a\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting assumptions\n\n\n```coq:\n\n  Hypothesis andP : reflect (a /\\ b) (a && b).\n  Check elimT andP : a && b -> a /\\ b.\n\n  Goal a && b -> a.\n  Proof.\n    move/andP.                              (* a /\\ b -> a /\\ b *)\n    Undo 1.\n    move/(elimT andP).\n    Undo 1.\n    move=> Hab; move: {Hab} (elimT andP Hab).\n    Undo 1.\n    move=> Hab; apply (elimT andP) in Hab; move: Hab.\n    case; by [].\n  Qed.\n\n\n```\n\n## \u30b4\u30fc\u30eb\u306e\u66f8\u304d\u63db\u3048\uff1aInterpreting goals\n\n\n```coq:\n\n  Hypothesis orP  : reflect (a \\/ b) (a || b).\n  Check introT orP : a \\/ b -> a || b.\n\n  Goal a -> a || b.\n  Proof.\n    move=> Ha.\n    apply/orP.                              (* Hab : a |- a || b *)\n    Undo 1.\n    apply/(introT orP).\n    Undo 1.\n    apply: (introT orP).\n    left; by [].\n  Qed.\n\n(* \u6b21\u306f\u30b4\u30fc\u30eb\u300ca&&b->a/\\b\u300d\u306b\u5bfe\u3057\u3066\u3001\u300ca&&b->a/\\b\u300d\u3092\u9069\u7528\u3057\u3066\u3044\u308b\u3002\n\u300c\u25b3->\u25cb\u300d\u5168\u4f53\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u4e00\u822c\u7684\u306a\u4f8b\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3002\u8981\u88dc\u8db3 *)\n  Goal a && b -> a /\\ b.\n  Proof.\n    apply/andP.\n    Undo 1.\n    apply/(elimT andP).\n  Qed.\nEnd Sample4.\n\n\n```\n\n# \u30b4\u30fc\u30eb\u304cequivalence\uff08\u300c=\u300d\uff09\u3067\u3042\u308b\u3068\u304d\u306b\u3001reflect\u8ff0\u8a9e\u3092\u4f7f\u7528\u53ef\u80fd\u306b\u3059\u308bView Hint\n\u30b4\u30fc\u30eb\u304c\u300c=\u300d\u306e\u3068\u304d\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u300capply/idP/idP\u300d\u3068\u3001\u899a\u3048\u3066\u304a\u3044\u3066\u3082\u3088\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u3068\u304d\u3001\u5de6\u306e/idP\u306b\u306fintroTF\u304c\u3001\u53f3\u306e/idP\u306b\u306fequivPif\u304c\u3001View Hint\u3068\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n\n\n```coq:\n\nCheck introTF : forall (P : Prop) (b c : bool), reflect P b -> (if c then P else ~ P) -> b = c.\nCheck equivPif : forall (P Q : Prop) (b : bool), reflect P b -> (Q -> P) -> (P -> Q) -> if b then Q else ~ Q.\n\nSection Sample4_5.\n  Variable a b : bool.\n\n  Hypothesis idP : forall b : bool, reflect b b.\n\n  Goal a || b = b || a.\n  Proof.\n    apply/idP/idP.\n    Undo 1.\n\n    Check introTF (idP (a || b)).\n    apply/(introTF (idP (a || b))).\n    Check equivPif (idP (b || a)).\n    apply/(equivPif (idP (b || a))).\n\n    (* \u8aac\u660e\u306e\u305f\u3081\u3001\u5197\u9577\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002 *)\n    - move/orP=> H; apply/orP; case: H; by [right | left].\n    - move/orP=> H; apply/orP; case: H; by [right | left].\n  Qed.\n\n\n```\nView Hint\u4ee5\u524d\u306e\u8a71\u984c\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u3082\u66f8\u3051\u307e\u3059\u3002\n\n\n```coq:\n\n  Goal a || b = b || a.\n  Proof.\n    apply/orP/orP; case; by [right | left].\n  Qed.\nEnd Sample4_5.\n\n\n```\n\n# \u307e\u3060\u8aac\u660e\u3067\u304d\u3066\u3044\u306a\u3044\u4e8b\u9805\n\n- move/\u3068apply/\u306eView Hint\u306e\u533a\u5225\u304c\u3042\u308b\u7406\u7531\u3002\n- \u72ec\u81ea\u306bView Hint\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3002\n- \u4e0a\u8a18\u4ee5\u5916\u306essrbool\u306b\u3075\u304f\u307e\u308c\u308bView Hint\u3002\n- Standard Coq\u3068\u6bd4\u8f03\u3084\u3001\u305d\u308c\u3078\u306e\u66f8\u304d\u63db\u3048\u3002\n\n\n# \u306e\u3053\u308a\u306eView Hint\nView Hint\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3002\ntheories/ssreflect.v \u3067\u306f\u3001\n``Hint View for move/ iffLRn|2 iffRLn|2 iffLR|2 iffRL|2.Hint View for apply/ iffRLn|2 iffLRn|2 iffRL|2 iffLR|2.\n``\ntheories/ssrbool.v \u3067\u306f\u3001\n``Hint View for move/ elimTF|3 elimNTF|3 elimTFn|3 introT|2 introTn|2 introN|2.Hint View for apply/ introTF|3 introNTF|3 introTFn|3 elimT|2 elimTn|2 elimN|2.Hint View for apply// equivPif|3 xorPif|3 equivPifn|3 xorPifn|3.\n``\n\u3053\u308c\u3092\u307e\u3068\u3081\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n``assumption interpretation (move/)\u3067\u4f7f\u7528\uff1aelimTF elimNTF elimTFnintroT introTn introN\ngoal interpretations (apply/)\u3067\u4f7f\u7528\uff1aelimT elimTn elimNintroTF introNTF introTFn\nright hand sides of double views (apply//)\u3067\u4f7f\u7528\uff1aequivPif equivPifnxorPif xorPifn\n``\n\n\n## \u6a19\u6e96\u5b9a\u7fa9\u306eView Hint\u306e\u4e00\u89a7\n\n\n```coq:\n\n(* move/\u3067\u4f7f\u7528\uff1a *)\nCheck elimTF    : forall (P : Prop) (b c : bool), reflect P b -> b = c -> if c then P else ~ P.\nCheck elimNTF   : forall (P : Prop) (b c : bool), reflect P b -> ~~ b = c -> if c then ~ P else P.\nCheck elimTFn   : forall (P : Prop) (b c : bool), reflect P (~~ b) -> b = c -> if c then ~ P else P.\n(* apply/\u3067\u4f7f\u7528\uff1a *)\nCheck elimT     : forall (P : Prop) (b : bool), reflect P b -> b -> P.\nCheck elimTn    : forall (P : Prop) (b' : bool), reflect P (~~ b') -> b' -> ~ P.\nCheck elimN     : forall (P : Prop) (b : bool), reflect P b -> ~~ b -> ~ P.\n(* apply//\u3067\u4f7f\u7528\uff1a *)\nCheck equivPif  : forall (P Q : Prop) (b : bool), reflect P b -> (Q -> P) -> (P -> Q) -> if b then Q else ~ Q.\nCheck equivPifn : forall (P Q : Prop) (b : bool), reflect P (~~ b) -> (Q -> P) -> (P -> Q) -> if b then ~ Q else Q.\n\n(* move/\u3067\u4f7f\u7528\uff1a *)\nCheck introTF   : forall (P : Prop) (b c : bool), reflect P b -> (if c then P else ~ P) -> b = c.\nCheck introNTF  : forall (P : Prop) (b c : bool), reflect P b -> (if c then ~ P else P) -> ~~ b = c.\nCheck introTFn  : forall (P : Prop) (b c : bool), reflect P (~~ b) -> (if c then ~ P else P) -> b = c.\n(* apply/\u3067\u4f7f\u7528\uff1a *)\nCheck introT    : forall (P : Prop) (b : bool), reflect P b -> P -> b.\nCheck introTn   : forall (P : Prop) (b' : bool), reflect P (~~ b') -> ~ P -> b'.\nCheck introN    : forall (P : Prop) (b : bool), reflect P b -> ~ P -> ~~ b.\n(* apply//\u3067\u4f7f\u7528\uff1a *)\nCheck xorPif    : forall (P Q : Prop) (b : bool), reflect P b -> Q \\/ P -> ~ (Q /\\ P) -> if b then ~ Q else Q.\nCheck xorPifn   : forall (P Q : Prop) (b : bool), reflect P (~~ b) -> Q \\/ P -> ~ (Q /\\ P) -> if b then Q else ~ Q.\n\nSection Sample5.\n  Variable a b : bool.\n  Hypothesis andP : reflect (a /\\ b) (a && b).\n  Hypothesis nandP : reflect (~~ a \\/ ~~ b) (~~ (a && b)).\n  Hypothesis idP : reflect b b.\n\n\n```\n\n## andP\u307e\u305f\u306fnandP \u3092\u4f7f\u3046\u4f8b\n\n\n```coq:\n\n  Variable c : bool.\n  Variable Q : Prop.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check elimTF andP (c := c) : a && b = c -> if c then a /\\ b else ~ (a /\\ b).\n  Check elimNTF andP         : ~~ (a && b) = c -> if c then ~ (a /\\ b) else a /\\ b.\n  Check elimTFn nandP        : a && b = c -> if c then ~ (~~ a \\/ ~~ b) else ~~ a \\/ ~~ b.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check elimT andP           : a && b -> a /\\ b.\n  Check elimTn nandP         : a && b -> ~ (~~ a \\/ ~~ b).\n  Check elimN andP           : ~~ (a && b) -> ~ (a /\\ b).\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check equivPif andP (Q := Q) : (Q -> a /\\ b) -> (a /\\ b -> Q) -> if a && b then Q else ~ Q.\n  Check equivPifn nandP        : (Q -> ~~ a \\/ ~~ b) -> (~~ a \\/ ~~ b -> Q) -> if a && b then ~ Q else Q.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check introTF andP         : (if c then a /\\ b else ~ (a /\\ b)) -> a && b = c.\n  Check introNTF andP        : (if c then ~ (a /\\ b) else a /\\ b) -> ~~ (a && b) = c.\n  Check introTFn nandP       : (if c then ~ (~~ a \\/ ~~ b) else ~~ a \\/ ~~ b) -> a && b = c.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check introT andP          : a /\\ b -> a && b.\n  Check introTn nandP        : ~ (~~ a \\/ ~~ b) -> a && b.\n  Check introN andP          : ~ (a /\\ b) -> ~~ (a && b).\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check xorPif andP (Q := Q) : Q \\/ a /\\ b -> ~ (Q /\\ a /\\ b) -> if a && b then ~ Q else Q.\n  Check xorPifn nandP        : Q \\/ ~~ a \\/ ~~ b -> ~ (Q /\\ (~~ a \\/ ~~ b)) -> if a && b then Q else ~ Q.\n\n\n```\n\n## idP\u307e\u305f\u306fidPn \u3092\u4f7f\u3046\u4f8b\n\n\n```coq:\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check elimTF idP (c := c).                (* : b = c -> if c then b else ~ b *)\n  Check elimNTF idP          : ~~ b = c -> if c then ~ b else b.\n  Check elimTFn idPn         : b = c -> if c then ~ ~~ b else ~~ b.\n  (* apply/\u3067\u4f7f\u7528 \uff1a *)\n  Check elimT idP            : b -> b.\n  Check elimTn idPn          : b -> ~ ~~ b.\n  Check elimN idP            :  ~~ b -> ~ b.\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check equivPif idP (Q := Q) : (Q -> b) -> (b -> Q) -> if b then Q else ~ Q.\n  Check equivPifn idPn       : (c -> ~~ b) -> (~~ b -> c) -> if b then ~ c else c.\n\n  (* move/\u3067\u4f7f\u7528\uff1a *)\n  Check introTF idP (c := c).               (* (if c then b else ~ b) -> b = c *)\n  Check introNTF idP         : (if c then ~ b else b) -> ~~ b = c.\n  Check introTFn idPn        : (if c then ~ ~~ b else ~~ b) -> b = c.\n  (* apply/\u3067\u4f7f\u7528\uff1a *)\n  Check introT idP           : b -> b.\n  Check introTn idPn         : ~ ~~ b -> b.\n  Check introN idP           : ~ b -> ~~ b.\n  (* apply//\u3067\u4f7f\u7528\uff1a *)\n  Check xorPif idP (Q := Q)  : Q \\/ b -> ~ (Q /\\ b) -> if b then ~ Q else Q.\n  Check xorPifn idPn (Q := Q) (b := b) : Q \\/ ~~ b -> ~ (Q /\\ ~~ b) -> if b then Q else ~ Q.\nEnd Sample5.\n\n```\n"}