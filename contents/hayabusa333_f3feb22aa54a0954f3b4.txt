{"context": "\n\n\u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u304b\u3089HTML\u306e\u5185\u5bb9\u306e\u4f5c\u6210\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fcss\u3084JavaScript\u306a\u3069\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3092\u5b9f\u65bd\u3057\u3001HTML\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nCowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\nCowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n1.0.4\n\n\n\n\ncowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n2.0.0-pre4\n\n\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\u304b\u3089HTML\u3092\u4f5c\u6210\n\u4eca\u56de\u306fcss\u3084JavaScript\u306e\u60c5\u5831\u3092\u30d6\u30e9\u30a6\u30b6\u306b\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ncss\u3084JavaScript\u306e\u60c5\u5831\u3092\u6e21\u3059\u65b9\u6cd5\u3067\u3059\u304c\u3001html\u3068\u540c\u3058\u3088\u3046\u306bHandler\u306b\u3066\u53d7\u3051\u6e21\u3057\u3092\u5b9f\u65bd\u3059\u308b\u3060\u3051\u3067\u3001\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3042\u3068\u306fhtml\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308bcss\u3084JavaScript\u304c\u6307\u5b9a\u3057\u305fURL\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/css_handler.ex\ndefmodule ElixirCowboyExample.CssHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :css \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    {param, req} = :cowboy_req.binding(:css, req)\n    {:ok, req} = html_example(method, param, req)\n    {:ok, req, state}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = [{\"content-type\", \"text/css\"}]\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  #css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\n  def html_example(\"GET\", param, req) do\n    headers = [{\"content-type\", \"text/css\"}]\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fcss\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/css/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\nlib/elixir_cowboy_example/javascript_handler.ex\ndefmodule ElixirCowboyExample.JavascriptHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :javascript \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    {param, req} = :cowboy_req.binding(:javascript, req)\n    {:ok, req} = html_example(method, param, req)\n    {:ok, req, state}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = [{\"content-type\", \"text/javascript\"}]\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = [{\"content-type\", \"text/javascript\"}]\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fJavaScript\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/js/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\nlib/elixir_cowboy_example.ex\n  def run do\n    # routes \u306b JavaScript\u3068css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [port: 4000]\n    env = [dispatch: dispatch]\n\n    {:ok, _pid} = :cowboy.start_http(:http, 100, opts, [env: env])\n  end\n\n\n\npriv/static/html/index.html\n<html>\n  <head>\n    <meta charset=\\\"utf-8\\\">\n      <title>Cowboy Hello!</title>\n    <script type=\"text/javascript\" src=\"priv/static/js/main.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"priv/static/css/main.css\">\n  </head>\n  <body>\n    <h1>Cowboy Hello!!</h1>\n    <h2>file load test<h2>\n    <input class=\"button\" type='submit' value='test' onclick=\"func()\">\n  </body>\n</html>\n\n\n\npriv/static/css/main.css\nh1{\n  color:red;\n}\n.button{\n  width: 200px;\n}\n\n\n\npriv/static/js/main.js\nfunction func(){\n  window.alert(\"HELLO WORLD\");\n}\n\n\n\ncowboy 2.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/css_handler.ex\ndefmodule ElixirCowboyExample.CssHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :css \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    param = :cowboy_req.binding(:css, req)\n    {:ok, resp} = html_example(method, param, req)\n    {:ok, resp, opts}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = %{\"content-type\" => \"text/css\"}\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = %{\"content-type\" => \"text/css\"}\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fcss\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/css/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n\n\n\nlib/elixir_cowboy_example/javascript_handler.ex\ndefmodule ElixirCowboyExample.JavascriptHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :javascript \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    param = :cowboy_req.binding(:javascript, req)\n    {:ok, resp} = html_example(method, param, req)\n    {:ok, resp, opts}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = %{\"content-type\" => \"text/javascript\"}\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = %{\"content-type\" => \"text/javascript\"}\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fJavaScript\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/js/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n\n\n\nlib/elixir_cowboy_example.ex\n  def run do\n    # routes \u306b JavaScript\u3068css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [{:port, 4000}]\n    env = %{dispatch: dispatch}\n\n    {:ok, _pid} = :cowboy.start_clear(:http, 100, opts, %{env: env})\n  end\n\n\ncss\u3001JavaScript\u3001html\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u7279\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001cowboy1.0\u306e\u65b9\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a iex -S mix \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001http://localhost:4000/xxx\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30d6\u30e9\u30a6\u30b6\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\u307e\u305ftest\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001JavaScript\u304c\u52d5\u304d\u3001\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u306fcss\u3084JavaScript\u306a\u3069\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u3092HTML\u30d5\u30a1\u30a4\u30eb\u3067\u8aad\u307f\u8fbc\u307f\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\ncss\u3084JavaScript\u306e\u30d5\u30a1\u30a4\u30eb\u81ea\u4f53\u3082\u6307\u5b9a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308c\u3070\u3001Handler\u30921\u3064\u8a18\u8f09\u3059\u308b\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u305b\u3070\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u4e0a\u306e\u30b3\u30fc\u30c9\u304b\u3089\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067HTML\u306b\u3066\u5b9f\u65bd\u3057\u305f\u3044\u5185\u5bb9\u306f\u307b\u307c\u307b\u307c\u5b9f\u65bd\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nCowboy User Guide\nCowboy User Guide\n# \u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n[\u524d\u56de](http://qiita.com/hayabusa333/items/b5aa62af9e9bc45a9d83)\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u60c5\u5831\u304b\u3089HTML\u306e\u5185\u5bb9\u306e\u4f5c\u6210\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fcss\u3084JavaScript\u306a\u3069\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3092\u5b9f\u65bd\u3057\u3001HTML\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n[Cowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/static_file_cowboy)\n\n[Cowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/static_file_cowboy_two_pre4)\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 1.0.4 |\n\n## cowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 2.0.0-pre4 |\n\n# \u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\u304b\u3089HTML\u3092\u4f5c\u6210\n\n\u4eca\u56de\u306fcss\u3084JavaScript\u306e\u60c5\u5831\u3092\u30d6\u30e9\u30a6\u30b6\u306b\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ncss\u3084JavaScript\u306e\u60c5\u5831\u3092\u6e21\u3059\u65b9\u6cd5\u3067\u3059\u304c\u3001html\u3068\u540c\u3058\u3088\u3046\u306bHandler\u306b\u3066\u53d7\u3051\u6e21\u3057\u3092\u5b9f\u65bd\u3059\u308b\u3060\u3051\u3067\u3001\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3042\u3068\u306fhtml\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308bcss\u3084JavaScript\u304c\u6307\u5b9a\u3057\u305fURL\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u308c\u308b\u305f\u3081\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/css_handler.ex\ndefmodule ElixirCowboyExample.CssHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :css \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    {param, req} = :cowboy_req.binding(:css, req)\n    {:ok, req} = html_example(method, param, req)\n    {:ok, req, state}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = [{\"content-type\", \"text/css\"}]\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  #css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\n  def html_example(\"GET\", param, req) do\n    headers = [{\"content-type\", \"text/css\"}]\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fcss\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/css/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example/javascript_handler.ex\ndefmodule ElixirCowboyExample.JavascriptHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :javascript \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    {param, req} = :cowboy_req.binding(:javascript, req)\n    {:ok, req} = html_example(method, param, req)\n    {:ok, req, state}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = [{\"content-type\", \"text/javascript\"}]\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = [{\"content-type\", \"text/javascript\"}]\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fJavaScript\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/js/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example.ex\n  def run do\n    # routes \u306b JavaScript\u3068css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [port: 4000]\n    env = [dispatch: dispatch]\n\n    {:ok, _pid} = :cowboy.start_http(:http, 100, opts, [env: env])\n  end\n```\n\n``` html:priv/static/html/index.html\n<html>\n  <head>\n    <meta charset=\\\"utf-8\\\">\n      <title>Cowboy Hello!</title>\n    <script type=\"text/javascript\" src=\"priv/static/js/main.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"priv/static/css/main.css\">\n  </head>\n  <body>\n    <h1>Cowboy Hello!!</h1>\n    <h2>file load test<h2>\n    <input class=\"button\" type='submit' value='test' onclick=\"func()\">\n  </body>\n</html>\n```\n\n``` css:priv/static/css/main.css\nh1{\n  color:red;\n}\n.button{\n  width: 200px;\n}\n```\n\n``` javascript:priv/static/js/main.js\nfunction func(){\n  window.alert(\"HELLO WORLD\");\n}\n```\n\n## cowboy 2.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/css_handler.ex\ndefmodule ElixirCowboyExample.CssHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :css \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    param = :cowboy_req.binding(:css, req)\n    {:ok, resp} = html_example(method, param, req)\n    {:ok, resp, opts}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = %{\"content-type\" => \"text/css\"}\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = %{\"content-type\" => \"text/css\"}\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fcss\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/css/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example/javascript_handler.ex\ndefmodule ElixirCowboyExample.JavascriptHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    #routes\u3067\u53d7\u3051\u6e21\u3055\u308c\u305f :javascript \u306e\u5185\u5bb9\u3092param\u306b\u8a2d\u5b9a\n    param = :cowboy_req.binding(:javascript, req)\n    {:ok, resp} = html_example(method, param, req)\n    {:ok, resp, opts}\n  end\n\n  def html_example(\"GET\", :undefined, req) do\n    headers = %{\"content-type\" => \"text/javascript\"}\n    body = \"\"\n    {:ok, resp} = :cowboy_req.reply(404, headers, body, req)\n  end\n\n  def html_example(\"GET\", param, req) do\n    headers = %{\"content-type\" => \"text/javascript\"}\n    # param\u306b\u6307\u5b9a\u3055\u308c\u305fJavaScript\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53d6\u5f97\u3057\u3001replay\u306b\u3066\u8fd4\u4fe1\u3059\u308b\n    {:ok, file} = File.read \"priv/static/js/#{param}\"\n    body = file\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example.ex\n  def run do\n    # routes \u306b JavaScript\u3068css\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306eHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [{:port, 4000}]\n    env = %{dispatch: dispatch}\n\n    {:ok, _pid} = :cowboy.start_clear(:http, 100, opts, %{env: env})\n  end\n```\n\ncss\u3001JavaScript\u3001html\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u7279\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001cowboy1.0\u306e\u65b9\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a `iex -S mix` \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001`http://localhost:4000/xxx`\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30d6\u30e9\u30a6\u30b6\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\u307e\u305ftest\u30dc\u30bf\u30f3\u3092\u62bc\u4e0b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001JavaScript\u304c\u52d5\u304d\u3001\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n<img width=\"1392\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-10 10.16.51.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/3014/bb1df6c5-9beb-5635-5a2a-af15f6f79bd2.png\">\n\n<img width=\"1280\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-10 10.17.06.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/3014/30044fe7-ca79-0100-7d31-3953ceacf0f9.png\">\n\n# \u6700\u5f8c\u306b\n\u4eca\u56de\u306fcss\u3084JavaScript\u306a\u3069\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u3092HTML\u30d5\u30a1\u30a4\u30eb\u3067\u8aad\u307f\u8fbc\u307f\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\ncss\u3084JavaScript\u306e\u30d5\u30a1\u30a4\u30eb\u81ea\u4f53\u3082\u6307\u5b9a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308c\u3070\u3001Handler\u30921\u3064\u8a18\u8f09\u3059\u308b\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u305b\u3070\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u4e0a\u306e\u30b3\u30fc\u30c9\u304b\u3089\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067HTML\u306b\u3066\u5b9f\u65bd\u3057\u305f\u3044\u5185\u5bb9\u306f\u307b\u307c\u307b\u307c\u5b9f\u65bd\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/1.0/guide/)\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/2.0/guide/)\n", "tags": ["Elixir", "cowboy"]}