{"tags": ["Groovy", "\u6b63\u898f\u8868\u73fe"], "context": " More than 1 year has passed since last update.Java\u306e\u6b63\u898f\u8868\u73fe\u306e\u305b\u3044\u3067CPU\u6b7b\u3093\u3067\u3044\u305f\u306e\u3092\u8abf\u67fb\u3001\u4fee\u6b63\u306e\u691c\u8a0e\u306e\u969b\u306e\u30c6\u30b9\u30c8\u3092Groovy\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u6b63\u898f\u8868\u73fe\u306f\u3001(ABCD)\u306e\u3068\u3053\u308d\u304c\u3082\u3063\u3068\u8907\u96d1\u306a\u30de\u30c3\u30c1\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u5f8c\u623b\u308a\u767a\u751f\u3059\u308b\u3068\u672c\u5f53\u306b\u6b7b\u306c\u3002\n\u306a\u304a\u3001(ABCD)\u306e\u90e8\u5206\u306b\u3088\u3063\u3066\u306f\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u691c\u7d22\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u305f\u90e8\u5206\u3067\u306f\u3053\u306e\u7a0b\u5ea6\u306e\u4e00\u81f4\u3067\u5341\u5206\u3067\u3057\u305f\u3002\n\nfast_30.groovy\nimport java.util.regex.Matcher\nimport java.util.regex.Pattern\n\ndef stopWatch = {c->\n    s = System.nanoTime()\n    c()\n    def w = System.nanoTime() - s\n    if(w <      1000000)\n        \"${w /  1000} [microsec]\"\n    else if(w < 1000000000)\n        \"${w /  1000000} [millsec]\"\n    else\n        \"${w /  1000000000} [sec]\"\n}\n\ndef slowMatch = {target ->\n  def r \n  def m = Pattern.compile(/[^.,;]{30,}(ABCD)/).matcher(target) // <- \u5f8c\u308d\u304b\u3089\u8aad\u307f\u76f4\u3057\u3061\u3083\u3046\u3088\u3002\u3002\u3002O(n^2)\n  println \"slow=\" + stopWatch {\n    r = m.find()\n  }\n  (r)?m.group().length():r\n}\n\ndef fastMatch = {target ->\n  def r = false\n  def p = Pattern.compile(/[^.,;]{30}(ABCD)/)\n  def m = p.matcher(target)\n  def l = []\n  def ret\n  println \"fast=\" + stopWatch {\n    if(m.find())\n    for(def s:target.split(/[.,;]/)){\n        if(s.length() >= 34){\n            def m2 = p.matcher(s)\n            r = m2.find()\n            if(r) {\n              ret = s\n              break\n            }\n        }\n    }\n  }\n  (r)?ret.length():r\n}\n\n[\ncase01:\"0123456789\",\ncase02:\"0123456789\"*2,\ncase03:\"0123456789\"*3,\ncase04:\"0123456789\"*3+\".\",\ncase05:\"0123456789\"*2.9+\".\",\ncase06:\"0123456789\"*2.9+\".ABCD.\",\ncase07:\"0123456789\"*3+\".ABCD.\",\ncase08:\"0123456789\"*3+\":ABCD.\",\ncase09:\"0123456789\"*3+\".ABCD.ABCD.\",\ncase10:\"0123456789\"*3+\":ABCD.ABCD.\",\ncase11:\"0123456789\"*2000+\".ABCD.\", // <- \u3053\u306e\u3068\u304d\u306bslow\u304c\u9045\u3044\u6b7b\u306c\u307b\u3069\u91cd\u3044\u3002\u306a\u305c\u304b\u3063\u3066\u3047\u3068\u5f8c\u308d\u304b\u3089\u8aad\u307f\u76f4\u3057\u3066\u7d50\u5c40\u898b\u3064\u304b\u3089\u306a\u3044\u304b\u3089\ncase12:\"0123456789\"*2000+\":ABCD.\", // <- \u3053\u306e\u3068\u304d\u3060\u3051fast\u306e\u304c\u9045\u3044\u3001\u306a\u305c\u304b\u3063\u3066\u3047\u3068\u4e00\u81f4\u304c\u6700\u5f8c\u65b9\u306b\u3042\u308b\u304b\u3089\ncase13:\"0123456789.ABCD.\"*500,\ncase14:\"0123456789.ABCD.\"*500+\"0123456789\"*3+\"ABCD.\",\ncale15:\"\"\n].collect { k,v ->\n  println k\n  def result = slowMatch(v)\n  assert result == fastMatch(v)\n  [\"$k\":result]\n}\n\n\nJava\u306e\u6b63\u898f\u8868\u73fe\u306e\u305b\u3044\u3067CPU\u6b7b\u3093\u3067\u3044\u305f\u306e\u3092\u8abf\u67fb\u3001\u4fee\u6b63\u306e\u691c\u8a0e\u306e\u969b\u306e\u30c6\u30b9\u30c8\u3092Groovy\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u6b63\u898f\u8868\u73fe\u306f\u3001(ABCD)\u306e\u3068\u3053\u308d\u304c\u3082\u3063\u3068\u8907\u96d1\u306a\u30de\u30c3\u30c1\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u5f8c\u623b\u308a\u767a\u751f\u3059\u308b\u3068\u672c\u5f53\u306b\u6b7b\u306c\u3002\n\n\u306a\u304a\u3001(ABCD)\u306e\u90e8\u5206\u306b\u3088\u3063\u3066\u306f\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u691c\u7d22\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u305f\u90e8\u5206\u3067\u306f\u3053\u306e\u7a0b\u5ea6\u306e\u4e00\u81f4\u3067\u5341\u5206\u3067\u3057\u305f\u3002\n\n```groovy:fast_30.groovy\nimport java.util.regex.Matcher\nimport java.util.regex.Pattern\n\ndef stopWatch = {c->\n    s = System.nanoTime()\n    c()\n    def w = System.nanoTime() - s\n    if(w <      1000000)\n        \"${w /  1000} [microsec]\"\n    else if(w < 1000000000)\n        \"${w /  1000000} [millsec]\"\n    else\n        \"${w /  1000000000} [sec]\"\n}\n\ndef slowMatch = {target ->\n  def r \n  def m = Pattern.compile(/[^.,;]{30,}(ABCD)/).matcher(target) // <- \u5f8c\u308d\u304b\u3089\u8aad\u307f\u76f4\u3057\u3061\u3083\u3046\u3088\u3002\u3002\u3002O(n^2)\n  println \"slow=\" + stopWatch {\n    r = m.find()\n  }\n  (r)?m.group().length():r\n}\n\ndef fastMatch = {target ->\n  def r = false\n  def p = Pattern.compile(/[^.,;]{30}(ABCD)/)\n  def m = p.matcher(target)\n  def l = []\n  def ret\n  println \"fast=\" + stopWatch {\n    if(m.find())\n    for(def s:target.split(/[.,;]/)){\n        if(s.length() >= 34){\n            def m2 = p.matcher(s)\n            r = m2.find()\n            if(r) {\n              ret = s\n              break\n            }\n        }\n    }\n  }\n  (r)?ret.length():r\n}\n\n[\ncase01:\"0123456789\",\ncase02:\"0123456789\"*2,\ncase03:\"0123456789\"*3,\ncase04:\"0123456789\"*3+\".\",\ncase05:\"0123456789\"*2.9+\".\",\ncase06:\"0123456789\"*2.9+\".ABCD.\",\ncase07:\"0123456789\"*3+\".ABCD.\",\ncase08:\"0123456789\"*3+\":ABCD.\",\ncase09:\"0123456789\"*3+\".ABCD.ABCD.\",\ncase10:\"0123456789\"*3+\":ABCD.ABCD.\",\ncase11:\"0123456789\"*2000+\".ABCD.\", // <- \u3053\u306e\u3068\u304d\u306bslow\u304c\u9045\u3044\u6b7b\u306c\u307b\u3069\u91cd\u3044\u3002\u306a\u305c\u304b\u3063\u3066\u3047\u3068\u5f8c\u308d\u304b\u3089\u8aad\u307f\u76f4\u3057\u3066\u7d50\u5c40\u898b\u3064\u304b\u3089\u306a\u3044\u304b\u3089\ncase12:\"0123456789\"*2000+\":ABCD.\", // <- \u3053\u306e\u3068\u304d\u3060\u3051fast\u306e\u304c\u9045\u3044\u3001\u306a\u305c\u304b\u3063\u3066\u3047\u3068\u4e00\u81f4\u304c\u6700\u5f8c\u65b9\u306b\u3042\u308b\u304b\u3089\ncase13:\"0123456789.ABCD.\"*500,\ncase14:\"0123456789.ABCD.\"*500+\"0123456789\"*3+\"ABCD.\",\ncale15:\"\"\n].collect { k,v ->\n  println k\n  def result = slowMatch(v)\n  assert result == fastMatch(v)\n  [\"$k\":result]\n}\n```"}