{"context": "\n\n\n\u591a\u6bb5\u968e\u9078\u629c\n\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b\n\n\n\n\n\u554f\u984c\n\nhttp://nabetani.sakura.ne.jp/hena/ord24eliseq/http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\n\n\nRuby\nhttp://qiita.com/cielavenir/items/9f15e29b73ecf98968a5\n\n\nC#/Python\nhttp://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb\n\n\n\n\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848\n\n\nGo/C#/Ruby/Python\nhttp://qiita.com/cielavenir/items/2a685d3080862f2c2c47\n\n\nPHP/JavaScript\nhttp://qiita.com/cielavenir/items/28d613ac3823afbf8407\n\n\nVB\nhttp://qiita.com/cielavenir/items/cb7266abd30eadd71c04\n\n\nD\nhttp://qiita.com/cielavenir/items/47c9e50ee60bef2847ec\n\n\nPerl/C++17(TS)\nhttp://qiita.com/cielavenir/items/e1129ca185008f49cbab\n\n\nLua\nhttp://qiita.com/cielavenir/items/c60fe7e8da73487ba062\n\n\n\n[140805] cbrt\u76f4\u3057\u307e\u3057\u305f\u3002\u3042\u3068Py3\u306e\u4e0d\u5177\u5408\u4fee\u6b63\u3002\n\u5168\u3066\u7121\u9650\u30ea\u30b9\u30c8\u3067\u3059\u3002\n\u934b\u8c37\u3055\u3093\u304b\u3089DRY\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u6307\u6458\u3092\u53d7\u3051\u305f\u306e\u3067\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\nGithub\u306e\u30b3\u30df\u30c3\u30c8\u30ed\u30b0\u3002\nhttps://github.com/cielavenir/procon/commit/752122c53288d8428dc4aadfbdfae7eac151eea2\n\u306a\u3093\u3068\u5e73\u574725\u884c\u306e\u524a\u6e1b\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\u3068\u3053\u308d\u3067Go\u3068C#\u306b\u306f\u95a2\u6570\u306e\u90e8\u5206\u9069\u7528\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3063\u3066\u306a\u3044\u3093\u3067\u3059\u304b\u306d\uff1f\n\nGo\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u4f7f\u308f\u306a\u3044\u3068\u3053\u308c\u307b\u3069\u307e\u3067\u306b\u697d\u306b\u306a\u308b\u3068\u306f\u3002\n\nhena24_enum.go\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\npackage main\nimport (\n    \"fmt\"\n    \"math\"\n    \"bufio\"\n    \"os\"\n)\n\nfunc is_sq(n int) bool{\n    x:=int(math.Sqrt(float64(n)))\n    return x*x==n\n}\nfunc is_cb(n int) bool{\n    x:=int(math.Cbrt(float64(n)))\n    return x*x*x==n\n}\nfunc is_multiple(i int,n int) bool{ return i%n==0 }\nfunc is_le(i int,n int) bool{ return i<=n }\n\nfunc generate() <-chan int{\n    ch := make(chan int)\n    go func(){\n        i:=1\n        for {\n            ch <- i\n            i++\n        }\n    }()\n    return ch\n}\n\nfunc drop_prev(check func(int)bool,prev <-chan int) <-chan int{\n    ch := make(chan int)\n    go func(){\n        a:=<-prev\n        b:=<-prev\n        for {\n            if !check(b) { ch<-a }\n            a=b\n            b=<-prev\n        }\n    }()\n    return ch\n}\n\nfunc drop_next(check func(int)bool,prev <-chan int) <-chan int{\n    ch := make(chan int)\n    go func(){\n        a:=<-prev\n        b:=<-prev\n        ch<-a\n        for {\n            if !check(a) { ch<-b }\n            a=b\n            b=<-prev\n        }\n    }()\n    return ch\n}\n\nfunc drop_n(check func(int,int)bool,n int,prev <-chan int) <-chan int{\n    ch := make(chan int)\n    go func(){\n        i:=0\n        for {\n            i++\n            a:=<-prev\n            if !check(i,n) { ch<-a }\n        }\n    }()\n    return ch\n}\n\nfunc main(){\n    f:=map[int]func(<-chan int)<-chan int{\n        'S': func(prev <-chan int)<-chan int{return drop_next(is_sq,prev)},\n        's': func(prev <-chan int)<-chan int{return drop_prev(is_sq,prev)},\n        'C': func(prev <-chan int)<-chan int{return drop_next(is_cb,prev)},\n        'c': func(prev <-chan int)<-chan int{return drop_prev(is_cb,prev)},\n        'h': func(prev <-chan int)<-chan int{return drop_n(is_le,100,prev)},\n    }\n    for i:=2;i<10;i++ {\n        j:=i //\u5bff\u547d\u304c\u77ed\u3044\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308b\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u30d0\u30b0\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n        f[j+'0']=func(prev <-chan int)<-chan int{return drop_n(is_multiple,j,prev)}\n    }\n\n    sin:=bufio.NewReader(os.Stdin)\n    _line,_,_:=sin.ReadLine()\n    line:=string(_line)\n    for line!=\"\" {\n        ch := generate()\n        for _,c:=range(line) {\n            ch=f[int(c)](ch)\n        }\n        for i:=0;i<10;i++ {\n            if i>0 { fmt.Print(\",\") }\n            a:=<-ch\n            fmt.Printf(\"%d\",a)\n        }\n        fmt.Println()\n        _line,_,_=sin.ReadLine()\n        line=string(_line)\n    }\n}\n\n\n\nC#\n\nhena24_enum.cs\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\n\nclass Hena24{\n    [DllImport(\"c\")]\n    private extern static double cbrt(double d);\n\n    static private bool is_sq(int n){\n        int x=(int)Math.Sqrt(n);\n        return x*x==n;\n    }\n    static private bool is_cb(int n){\n        int x=(int)cbrt(n);\n        return x*x*x==n;\n    }\n    static private bool is_multiple(int i,int n){return i%n==0;}\n    static private bool is_le(int i,int n){return i<=n;}\n\n    static private IEnumerable<int> generate(){\n        int i=1;\n        for(;;){\n            yield return i;\n            i+=1;\n        }\n    }\n    static private IEnumerable<int> drop_prev(\n        Func<int,bool> check,IEnumerable<int> _prev\n    ){\n        IEnumerator<int> prev=_prev.GetEnumerator();\n        prev.MoveNext();\n        int a=prev.Current;\n        prev.MoveNext();\n        int b=prev.Current;\n        for(;;){\n            if(!check(b))yield return a;\n            a=b;\n            prev.MoveNext();\n            b=prev.Current;\n        }\n    }\n    static private IEnumerable<int> drop_next(\n        Func<int,bool> check,IEnumerable<int> _prev\n    ){\n        IEnumerator<int> prev=_prev.GetEnumerator();\n        prev.MoveNext();\n        int a=prev.Current;\n        prev.MoveNext();\n        int b=prev.Current;\n        yield return a;\n        for(;;){\n            if(!check(a))yield return b;\n            a=b;\n            prev.MoveNext();\n            b=prev.Current;\n        }\n    }\n    static private IEnumerable<int> drop_n(\n        Func<int,int,bool> check,int n,IEnumerable<int> _prev\n    ){\n        IEnumerator<int> prev=_prev.GetEnumerator();\n        int i=0;\n        for(;;){\n            i++;\n            prev.MoveNext();\n            int a=prev.Current;\n            if(!check(i,n))yield return a;\n        }\n    }\n    static void Main(){\n        var f=new Dictionary<char,Func<IEnumerable<int>,IEnumerable<int>>>(){\n            {'S',e => drop_next(is_sq,e)},\n            {'s',e => drop_prev(is_sq,e)},\n            {'C',e => drop_next(is_cb,e)},\n            {'c',e => drop_prev(is_cb,e)},\n            {'h',e => drop_n(is_le,100,e)},\n        };\n        for(int i=2;i<10;i++){\n            int j=i; //\u5bff\u547d\u304c\u77ed\u3044\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308b\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u30d0\u30b0\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n            f[(char)('0'+j)] = e=>drop_n(is_multiple,j,e);\n        }\n        string line;\n        for(;(line=Console.ReadLine())!=null;){\n            bool first=true;\n            //cS => f['S'](f['c'](generate()))\n            foreach(int n in line.Aggregate(generate(),(s,e)=>f[e](s)).Take(10)){\n                if(!first)Console.Write(',');\n                first=false;\n                Console.Write(n);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n\n\n\nRuby\n\nhena24_enum.rb\n#!/usr/bin/env ruby\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nif RUBY_VERSION<'1.9'\n    module Math\n        def self.cbrt(n)\n            n**(1-2.0/3)\n        end\n    end\nend\n\n=begin\ndef generate\n    return to_enum(:generate) if !block_given?\n    i=1\n    loop{\n        yield i\n        i+=1\n    }\nend\n=end\n\ndef drop_prev(check,prev)\n    return to_enum(:drop_prev,check,prev) if !block_given?\n    a=prev.next\n    b=prev.next\n    loop{\n        yield a if !check[b]\n        a,b=b,prev.next\n    }\nend\ndef drop_next(check,prev)\n    return to_enum(:drop_next,check,prev) if !block_given?\n    a=prev.next\n    b=prev.next\n    yield a\n    loop{\n        yield b if !check[a]\n        a,b=b,prev.next\n    }\nend\ndef drop_n(check,n,prev)\n    return to_enum(:drop_n,check,n,prev) if !block_given?\n    i=0\n    loop{\n        i+=1\n        a=prev.next\n        yield a if !check[i,n]\n    }\nend\n\nis_sq=lambda{|n|Math.sqrt(n).to_i**2==n}\nis_cb=lambda{|n|Math.cbrt(n).to_i**3==n}\nis_multiple=lambda{|i,n|i%n==0}\nis_le=lambda{|i,n|i<=n}\n\nif RUBY_VERSION<'1.9'\n    f={\n        'S'=>lambda{|enum|drop_next(is_sq,enum)},\n        's'=>lambda{|enum|drop_prev(is_sq,enum)},\n        'C'=>lambda{|enum|drop_next(is_cb,enum)},\n        'c'=>lambda{|enum|drop_prev(is_cb,enum)},\n        'h'=>lambda{|enum|drop_n(is_le,100,enum)},\n    }\n    ('2'..'9').each{|e|f[e]=lambda{|enum|drop_n(is_multiple,e.to_i,enum)}}\nelse\n    f={\n        'S'=>Kernel.method(:drop_next).to_proc.curry[is_sq],\n        's'=>Kernel.method(:drop_prev).to_proc.curry[is_sq],\n        'C'=>Kernel.method(:drop_next).to_proc.curry[is_cb],\n        'c'=>Kernel.method(:drop_prev).to_proc.curry[is_cb],\n        'h'=>Kernel.method(:drop_n).to_proc.curry[is_le,100],\n    }\n    ('2'..'9').each{|e|f[e]=Kernel.method(:drop_n).to_proc.curry[is_multiple,e.to_i]}\nend\n\nif $0==__FILE__\n    STDOUT.sync=true\n    while gets\n        #cS => f['S'].call(f['c'].call(1.upto(1/0.0)))\n        puts $_.chomp.chars.reduce(1.upto(1/0.0)){|s,e|f[e][s]}.take(10)*','\n\n        #enum=generate\n        #$_.chomp.chars.each{|e|enum=f[e][enum]}\n        #puts enum.take(10)*','\n    end\nend\n\n\n\nPython\n\nhena24_enum.py\n#!/usr/bin/env python\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nimport sys\nimport itertools\nfrom functools import partial,reduce\n\nfrom math import sqrt\ntry:\n    from scipy.special import cbrt # thx @ryosy383\nexcept ImportError:\n    cbrt=lambda n: n**(1-2.0/3)\n\nif sys.version_info[0]>=3: raw_input=input\n\n'''\ndef generate():\n    i=1\n    while True:\n        yield i\n        i+=1\n'''\n\ndef drop_prev(check,prev):\n    a=next(prev)\n    b=next(prev)\n    while True:\n        if not check(b): yield a\n        a,b=b,next(prev)\n\ndef drop_next(check,prev):\n    a=next(prev)\n    b=next(prev)\n    yield a\n    while True:\n        if not check(a): yield b\n        a,b=b,next(prev)\n\ndef drop_n(check,n,prev):\n    i=0\n    while True:\n        i+=1\n        a=next(prev)\n        if not check(i,n): yield a\n\nis_sq=lambda n: int(sqrt(float(n)))**2==n\nis_cb=lambda n: int(cbrt(float(n)))**3==n\nis_multiple=lambda i,n: i%n==0\nis_le=lambda i,n: i<=n\n\nf={\n    'S': partial(drop_next,is_sq),\n    's': partial(drop_prev,is_sq),\n    'C': partial(drop_next,is_cb),\n    'c': partial(drop_prev,is_cb),\n    'h': partial(drop_n,is_le,100),\n}\nfor e in range(2,10): f[str(e)]=partial(drop_n,is_multiple,e)\n\nif __name__=='__main__':\n    try:\n        while True:\n            #cS => f['S'](f['c'](itertools.count(1)))\n            print(','.join(\n                map(str,itertools.islice(\n                    reduce(lambda s,e:f[e](s),raw_input().rstrip(),itertools.count(1)),\n                10))\n            ))\n    except EOFError:\n        pass\n\n\n\n|\u591a\u6bb5\u968e\u9078\u629c|\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b|\n|:--|:--|\n|\u554f\u984c|http://nabetani.sakura.ne.jp/hena/ord24eliseq/<br>http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69|\n|Ruby|http://qiita.com/cielavenir/items/9f15e29b73ecf98968a5|\n|C#/Python|http://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb|\n||\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848|\n|Go/C#/Ruby/Python|http://qiita.com/cielavenir/items/2a685d3080862f2c2c47|\n|PHP/JavaScript|http://qiita.com/cielavenir/items/28d613ac3823afbf8407|\n|VB|http://qiita.com/cielavenir/items/cb7266abd30eadd71c04|\n|D|http://qiita.com/cielavenir/items/47c9e50ee60bef2847ec|\n|Perl/C++17(TS)|http://qiita.com/cielavenir/items/e1129ca185008f49cbab|\n|Lua|http://qiita.com/cielavenir/items/c60fe7e8da73487ba062|\n\n[140805] cbrt\u76f4\u3057\u307e\u3057\u305f\u3002\u3042\u3068Py3\u306e\u4e0d\u5177\u5408\u4fee\u6b63\u3002\n\n\u5168\u3066\u7121\u9650\u30ea\u30b9\u30c8\u3067\u3059\u3002\n\u934b\u8c37\u3055\u3093\u304b\u3089DRY\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u6307\u6458\u3092\u53d7\u3051\u305f\u306e\u3067\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\nGithub\u306e\u30b3\u30df\u30c3\u30c8\u30ed\u30b0\u3002\nhttps://github.com/cielavenir/procon/commit/752122c53288d8428dc4aadfbdfae7eac151eea2\n\u306a\u3093\u3068\u5e73\u574725\u884c\u306e\u524a\u6e1b\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\u3068\u3053\u308d\u3067Go\u3068C#\u306b\u306f\u95a2\u6570\u306e\u90e8\u5206\u9069\u7528\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3063\u3066\u306a\u3044\u3093\u3067\u3059\u304b\u306d\uff1f\n\n## Go\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u4f7f\u308f\u306a\u3044\u3068\u3053\u308c\u307b\u3069\u307e\u3067\u306b\u697d\u306b\u306a\u308b\u3068\u306f\u3002\n\n```go:hena24_enum.go\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\npackage main\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc is_sq(n int) bool{\n\tx:=int(math.Sqrt(float64(n)))\n\treturn x*x==n\n}\nfunc is_cb(n int) bool{\n\tx:=int(math.Cbrt(float64(n)))\n\treturn x*x*x==n\n}\nfunc is_multiple(i int,n int) bool{ return i%n==0 }\nfunc is_le(i int,n int) bool{ return i<=n }\n\nfunc generate() <-chan int{\n\tch := make(chan int)\n\tgo func(){\n\t\ti:=1\n\t\tfor {\n\t\t\tch <- i\n\t\t\ti++\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc drop_prev(check func(int)bool,prev <-chan int) <-chan int{\n\tch := make(chan int)\n\tgo func(){\n\t\ta:=<-prev\n\t\tb:=<-prev\n\t\tfor {\n\t\t\tif !check(b) { ch<-a }\n\t\t\ta=b\n\t\t\tb=<-prev\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc drop_next(check func(int)bool,prev <-chan int) <-chan int{\n\tch := make(chan int)\n\tgo func(){\n\t\ta:=<-prev\n\t\tb:=<-prev\n\t\tch<-a\n\t\tfor {\n\t\t\tif !check(a) { ch<-b }\n\t\t\ta=b\n\t\t\tb=<-prev\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc drop_n(check func(int,int)bool,n int,prev <-chan int) <-chan int{\n\tch := make(chan int)\n\tgo func(){\n\t\ti:=0\n\t\tfor {\n\t\t\ti++\n\t\t\ta:=<-prev\n\t\t\tif !check(i,n) { ch<-a }\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc main(){\n\tf:=map[int]func(<-chan int)<-chan int{\n\t\t'S': func(prev <-chan int)<-chan int{return drop_next(is_sq,prev)},\n\t\t's': func(prev <-chan int)<-chan int{return drop_prev(is_sq,prev)},\n\t\t'C': func(prev <-chan int)<-chan int{return drop_next(is_cb,prev)},\n\t\t'c': func(prev <-chan int)<-chan int{return drop_prev(is_cb,prev)},\n\t\t'h': func(prev <-chan int)<-chan int{return drop_n(is_le,100,prev)},\n\t}\n\tfor i:=2;i<10;i++ {\n\t\tj:=i //\u5bff\u547d\u304c\u77ed\u3044\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308b\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u30d0\u30b0\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\t\tf[j+'0']=func(prev <-chan int)<-chan int{return drop_n(is_multiple,j,prev)}\n\t}\n\n\tsin:=bufio.NewReader(os.Stdin)\n\t_line,_,_:=sin.ReadLine()\n\tline:=string(_line)\n\tfor line!=\"\" {\n\t\tch := generate()\n\t\tfor _,c:=range(line) {\n\t\t\tch=f[int(c)](ch)\n\t\t}\n\t\tfor i:=0;i<10;i++ {\n\t\t\tif i>0 { fmt.Print(\",\") }\n\t\t\ta:=<-ch\n\t\t\tfmt.Printf(\"%d\",a)\n\t\t}\n\t\tfmt.Println()\n\t\t_line,_,_=sin.ReadLine()\n\t\tline=string(_line)\n\t}\n}\n```\n\n## C# ##\n\n```csharp:hena24_enum.cs\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\n\nclass Hena24{\n\t[DllImport(\"c\")]\n\tprivate extern static double cbrt(double d);\n\n\tstatic private bool is_sq(int n){\n\t\tint x=(int)Math.Sqrt(n);\n\t\treturn x*x==n;\n\t}\n\tstatic private bool is_cb(int n){\n\t\tint x=(int)cbrt(n);\n\t\treturn x*x*x==n;\n\t}\n\tstatic private bool is_multiple(int i,int n){return i%n==0;}\n\tstatic private bool is_le(int i,int n){return i<=n;}\n\n\tstatic private IEnumerable<int> generate(){\n\t\tint i=1;\n\t\tfor(;;){\n\t\t\tyield return i;\n\t\t\ti+=1;\n\t\t}\n\t}\n\tstatic private IEnumerable<int> drop_prev(\n\t\tFunc<int,bool> check,IEnumerable<int> _prev\n\t){\n\t\tIEnumerator<int> prev=_prev.GetEnumerator();\n\t\tprev.MoveNext();\n\t\tint a=prev.Current;\n\t\tprev.MoveNext();\n\t\tint b=prev.Current;\n\t\tfor(;;){\n\t\t\tif(!check(b))yield return a;\n\t\t\ta=b;\n\t\t\tprev.MoveNext();\n\t\t\tb=prev.Current;\n\t\t}\n\t}\n\tstatic private IEnumerable<int> drop_next(\n\t\tFunc<int,bool> check,IEnumerable<int> _prev\n\t){\n\t\tIEnumerator<int> prev=_prev.GetEnumerator();\n\t\tprev.MoveNext();\n\t\tint a=prev.Current;\n\t\tprev.MoveNext();\n\t\tint b=prev.Current;\n\t\tyield return a;\n\t\tfor(;;){\n\t\t\tif(!check(a))yield return b;\n\t\t\ta=b;\n\t\t\tprev.MoveNext();\n\t\t\tb=prev.Current;\n\t\t}\n\t}\n\tstatic private IEnumerable<int> drop_n(\n\t\tFunc<int,int,bool> check,int n,IEnumerable<int> _prev\n\t){\n\t\tIEnumerator<int> prev=_prev.GetEnumerator();\n\t\tint i=0;\n\t\tfor(;;){\n\t\t\ti++;\n\t\t\tprev.MoveNext();\n\t\t\tint a=prev.Current;\n\t\t\tif(!check(i,n))yield return a;\n\t\t}\n\t}\n\tstatic void Main(){\n\t\tvar f=new Dictionary<char,Func<IEnumerable<int>,IEnumerable<int>>>(){\n\t\t\t{'S',e => drop_next(is_sq,e)},\n\t\t\t{'s',e => drop_prev(is_sq,e)},\n\t\t\t{'C',e => drop_next(is_cb,e)},\n\t\t\t{'c',e => drop_prev(is_cb,e)},\n\t\t\t{'h',e => drop_n(is_le,100,e)},\n\t\t};\n\t\tfor(int i=2;i<10;i++){\n\t\t\tint j=i; //\u5bff\u547d\u304c\u77ed\u3044\u30b9\u30b3\u30fc\u30d7\u3092\u4f5c\u308b\u3053\u3068\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u30d0\u30b0\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n\t\t\tf[(char)('0'+j)] = e=>drop_n(is_multiple,j,e);\n\t\t}\n\t\tstring line;\n\t\tfor(;(line=Console.ReadLine())!=null;){\n\t\t\tbool first=true;\n\t\t\t//cS => f['S'](f['c'](generate()))\n\t\t\tforeach(int n in line.Aggregate(generate(),(s,e)=>f[e](s)).Take(10)){\n\t\t\t\tif(!first)Console.Write(',');\n\t\t\t\tfirst=false;\n\t\t\t\tConsole.Write(n);\n\t\t\t}\n\t\t\tConsole.WriteLine();\n\t\t}\n\t}\n}\n```\n\n## Ruby\n\n```rb:hena24_enum.rb\n#!/usr/bin/env ruby\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nif RUBY_VERSION<'1.9'\n\tmodule Math\n\t\tdef self.cbrt(n)\n\t\t\tn**(1-2.0/3)\n\t\tend\n\tend\nend\n\n=begin\ndef generate\n\treturn to_enum(:generate) if !block_given?\n\ti=1\n\tloop{\n\t\tyield i\n\t\ti+=1\n\t}\nend\n=end\n\ndef drop_prev(check,prev)\n\treturn to_enum(:drop_prev,check,prev) if !block_given?\n\ta=prev.next\n\tb=prev.next\n\tloop{\n\t\tyield a if !check[b]\n\t\ta,b=b,prev.next\n\t}\nend\ndef drop_next(check,prev)\n\treturn to_enum(:drop_next,check,prev) if !block_given?\n\ta=prev.next\n\tb=prev.next\n\tyield a\n\tloop{\n\t\tyield b if !check[a]\n\t\ta,b=b,prev.next\n\t}\nend\ndef drop_n(check,n,prev)\n\treturn to_enum(:drop_n,check,n,prev) if !block_given?\n\ti=0\n\tloop{\n\t\ti+=1\n\t\ta=prev.next\n\t\tyield a if !check[i,n]\n\t}\nend\n\nis_sq=lambda{|n|Math.sqrt(n).to_i**2==n}\nis_cb=lambda{|n|Math.cbrt(n).to_i**3==n}\nis_multiple=lambda{|i,n|i%n==0}\nis_le=lambda{|i,n|i<=n}\n\nif RUBY_VERSION<'1.9'\n\tf={\n\t\t'S'=>lambda{|enum|drop_next(is_sq,enum)},\n\t\t's'=>lambda{|enum|drop_prev(is_sq,enum)},\n\t\t'C'=>lambda{|enum|drop_next(is_cb,enum)},\n\t\t'c'=>lambda{|enum|drop_prev(is_cb,enum)},\n\t\t'h'=>lambda{|enum|drop_n(is_le,100,enum)},\n\t}\n\t('2'..'9').each{|e|f[e]=lambda{|enum|drop_n(is_multiple,e.to_i,enum)}}\nelse\n\tf={\n\t\t'S'=>Kernel.method(:drop_next).to_proc.curry[is_sq],\n\t\t's'=>Kernel.method(:drop_prev).to_proc.curry[is_sq],\n\t\t'C'=>Kernel.method(:drop_next).to_proc.curry[is_cb],\n\t\t'c'=>Kernel.method(:drop_prev).to_proc.curry[is_cb],\n\t\t'h'=>Kernel.method(:drop_n).to_proc.curry[is_le,100],\n\t}\n\t('2'..'9').each{|e|f[e]=Kernel.method(:drop_n).to_proc.curry[is_multiple,e.to_i]}\nend\n\nif $0==__FILE__\n\tSTDOUT.sync=true\n\twhile gets\n\t\t#cS => f['S'].call(f['c'].call(1.upto(1/0.0)))\n\t\tputs $_.chomp.chars.reduce(1.upto(1/0.0)){|s,e|f[e][s]}.take(10)*','\n\n\t\t#enum=generate\n\t\t#$_.chomp.chars.each{|e|enum=f[e][enum]}\n\t\t#puts enum.take(10)*','\n\tend\nend\n```\n\n## Python\n\n```py:hena24_enum.py\n#!/usr/bin/env python\n#http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n#http://nabetani.sakura.ne.jp/hena/ord24eliseq/\nimport sys\nimport itertools\nfrom functools import partial,reduce\n\nfrom math import sqrt\ntry:\n\tfrom scipy.special import cbrt # thx @ryosy383\nexcept ImportError:\n\tcbrt=lambda n: n**(1-2.0/3)\n\nif sys.version_info[0]>=3: raw_input=input\n\n'''\ndef generate():\n\ti=1\n\twhile True:\n\t\tyield i\n\t\ti+=1\n'''\n\ndef drop_prev(check,prev):\n\ta=next(prev)\n\tb=next(prev)\n\twhile True:\n\t\tif not check(b): yield a\n\t\ta,b=b,next(prev)\n\ndef drop_next(check,prev):\n\ta=next(prev)\n\tb=next(prev)\n\tyield a\n\twhile True:\n\t\tif not check(a): yield b\n\t\ta,b=b,next(prev)\n\ndef drop_n(check,n,prev):\n\ti=0\n\twhile True:\n\t\ti+=1\n\t\ta=next(prev)\n\t\tif not check(i,n): yield a\n\nis_sq=lambda n: int(sqrt(float(n)))**2==n\nis_cb=lambda n: int(cbrt(float(n)))**3==n\nis_multiple=lambda i,n: i%n==0\nis_le=lambda i,n: i<=n\n\nf={\n\t'S': partial(drop_next,is_sq),\n\t's': partial(drop_prev,is_sq),\n\t'C': partial(drop_next,is_cb),\n\t'c': partial(drop_prev,is_cb),\n\t'h': partial(drop_n,is_le,100),\n}\nfor e in range(2,10): f[str(e)]=partial(drop_n,is_multiple,e)\n\nif __name__=='__main__':\n\ttry:\n\t\twhile True:\n\t\t\t#cS => f['S'](f['c'](itertools.count(1)))\n\t\t\tprint(','.join(\n\t\t\t\tmap(str,itertools.islice(\n\t\t\t\t\treduce(lambda s,e:f[e](s),raw_input().rstrip(),itertools.count(1)),\n\t\t\t\t10))\n\t\t\t))\n\texcept EOFError:\n\t\tpass\n```\n", "tags": ["Go", "C#", "Python", "Ruby", "yhpg"]}