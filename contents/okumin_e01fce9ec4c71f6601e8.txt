{"tags": ["Akka", "Scala", "Erlang"], "context": " More than 1 year has passed since last update.\n\nAkka \u3068 Erlang \u3092 Reactive \u306b\u7d44\u307f\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\nAkka \u3068 Erlang \u3092\u512a\u96c5\u306b\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001Ainterface \u3092\u4f5c\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\n\nAinterface \u3068\u306f\nAinterface \u306f\u3001Akka actor \u3068 Erlang \u30d7\u30ed\u30bb\u30b9\u9593\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Ainterface \u3092\u7528\u3044\u308b\u3068\u3001\u5206\u6563Erlang\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u901a\u3057\u3066\u3001Akka \u3089\u3057\u3044\u6587\u6cd5\u3067 Erlang \u3068\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ed6\u8a00\u8a9e\u304b\u3089 Erlang \u3068\u304a\u3057\u3083\u3079\u308a\u3059\u308b\u8a66\u307f\u306f\u4ed6\u306b\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070 Java \u30d7\u30ed\u30b0\u30e9\u30e0\u3068 Erlang \u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u305f\u3081\u306e Jinterface \u306f\u305d\u306e\u4e00\u3064\u3067\u3059\u3002\n\u53bb\u5e74\u306e Scala \u30a2\u30c9\u30f4\u30a7\u30f3\u30c8\u30fb\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u6295\u7a3f\u3057\u305f\u300cAkka\u306eactor\u3068Erlang\u306e\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3057\u3066\u307f\u305f\u300d\u3067\u3082\u3001Jinterface \u3092\u30e9\u30c3\u30d7\u3057\u3066 Akka actor \u304b\u3089\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3044\u3044\u611f\u3058\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5b9f\u73fe\u3067\u304d\u305f\u3082\u306e\u306e\u3001Jinterface \u306f\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u306a API \u3067\u306a\u304b\u3063\u305f\u308a\u3068\u3001Akka \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u306b\u306f\u5c11\u3057\u7b4b\u304c\u60aa\u3044\u9762\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u8fba\u3092\u8003\u616e\u3057\u3066\u3088\u308a Reactive \u306b\u5b9f\u88c5\u3057\u306a\u304a\u3057\u305f\u306e\u304c Ainterface \u3068\u306a\u308a\u307e\u3059\u3002\n\nExample\n\n\u8d77\u52d5\n\u307e\u305a Erlang node(\u53ca\u3073 EPMD)\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u73fe\u5728\u6642\u70b9\u3067\u306f long name \u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nerl -name mofu\nErlang/OTP 17 [erts-6.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\n\nEshell V6.2.1  (abort with ^G)\n(mofu@okumin-mini.local)1>\n\nAinterfaceSystem \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u4e00\u3064\u306e ActorSystem \u306b\u3064\u304d\u4e00\u3064\u306e AinterfaceSystem \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ce\u30fc\u30c9\u540d\u306a\u3069\u306e\u8a2d\u5b9a\u306f\u304a\u306a\u3058\u307f\u306e hocon \u306b\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n$ sbt \"project ainterface-sample\" console\n[info] Loading global plugins from /Users/okumin/.sbt/0.13/plugins\n[info] Loading project definition from /Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/project\n[info] Set current project to erlang-ainterface (in build file:/Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/)\n[info] Set current project to ainterface-sample (in build file:/Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/)\n[info] Starting scala interpreter...\n[info]\nWelcome to Scala version 2.11.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_55).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> val config = com.typesafe.config.ConfigFactory.parseString(\"\"\"\n     |   akka {\n     |   loglevel = \"ERROR\"\n     |   ainterface {\n     |     root-name = \"ainterface-system\"\n     |     init.name = \"ainterface-sample\" // the node name\n     |   }\n     | }\"\"\")\nconfig: com.typesafe.config.Config = Config(SimpleConfigObject({\"akka\":{\"ainterface\":{\"init\":{\"name\":\"ainterface-sample\"},\"root-name\":\"ainterface-system\"},\"loglevel\":\"ERROR\"}}))\n\nscala> val system = akka.actor.ActorSystem(\"sample\", config)\nsystem: akka.actor.ActorSystem = akka://sample\n\nscala> akka.ainterface.AinterfaceSystem.init(system) // initialize\n\n\nErlang \u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\n\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u88c5\u306f\u3001ErlProcessActor \u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067\u884c\u3044\u307e\u3059\u3002ErlProcessActor#process \u3092\u901a\u3058\u3066\u3001Erlang \u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u306e\u51e6\u7406\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass EchoActor extends ErlProcessActor {\n  override def receive: Receive = {\n    case ErlTuple(from: ErlPid, message) =>\n      process.send(from, ErlTuple(process.self, message))\n  }\n}\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308b ProcessActor \u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u898b\u3066\u306e\u901a\u308a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ecb\u3057\u3066 Erlang \u7cfb API \u3092\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b REPL \u304b\u3089\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u3001\u4e0b\u6e96\u5099\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nscala> val process = system.actorOf(akka.actor.Props[ainterface.ProcessActor], \"process\")\nprocess: akka.actor.ActorRef = Actor[akka://sample/user/process#-94975417]\n\nscala> import ainterface.ProcessActorProtocol._\nimport ainterface.ProcessActorProtocol._\n\nscala> import akka.ainterface.datatype._\nimport akka.ainterface.datatype._\n\nscala> import akka.pattern.ask\nimport akka.pattern.ask\n\nscala> import scala.concurrent._\nimport scala.concurrent._\n\nscala> import scala.concurrent.duration._\nimport scala.concurrent.duration._\n\nscala> import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nscala> implicit val timeout = akka.util.Timeout(1.second)\ntimeout: akka.util.Timeout = Timeout(1 second)\n\nscala> def await(x: Future[Any]): Any = Await.result(x, 1.second)\nawait: (x: scala.concurrent.Future[Any])Any\n\nProcessActor \u306f Akka actor \u3067\u3042\u308b\u3068\u540c\u6642\u306b Erlang \u30d7\u30ed\u30bb\u30b9\u3067\u3082\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u8a3c\u62e0\u306b\u3001pid \u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nscala> val self = await(process ? SelfPid).asInstanceOf[ErlPid]\nself: akka.ainterface.datatype.ErlPid = ErlPid(ErlAtom(ainterface-sample@okumin-mini.local), 1, 0, 3)\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\n\u540d\u524d\u3092\u3064\u3051\u3066\u307f\u307e\u3057\u3087\u3046\u3002erlang:register/2 \u306b\u76f8\u5f53\u3059\u308b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\nscala> process ! Register(ErlAtom(\"process\"), self)\n\n\u3053\u308c\u3067 Erlang \u30d7\u30ed\u30bb\u30b9\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\u3002pid \u3068\u3068\u3082\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u307e\u3059\u3002\n(mofu@okumin-mini.local)1> {process, 'ainterface-sample@okumin-mini.local'} ! {hello, self()}.\n{hello,<0.38.0>}\n\n\u5c4a\u304d\u307e\u3057\u305f\u3002\u8fd4\u4fe1\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nscala> val Some(ErlTuple(message, pid: ErlPid)) = await(process ? Receive)\nmessage: akka.ainterface.datatype.ErlTerm = ErlAtom(hello)\npid: akka.ainterface.datatype.ErlPid = ErlPid(ErlAtom(mofu@okumin-mini.local), 38, 0, 2)\n\nscala> process ! Send(pid, ErlAtom(\"okey-dokey\"))\n\nErlang \u5074\u306b\u3082\u5c4a\u304d\u307e\u3057\u305f\u3002\n(mofu@okumin-mini.local)2> flush().\nShell got 'okey-dokey'\nok\n\n\n\u30ea\u30f3\u30af\n\u3082\u3046\u4e00\u3064\u3001link \u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nscala> process ! Link(pid)\n\nErlang \u5074\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u6bba\u3057\u3066\u307f\u307e\u3059\u3002\n(mofu@okumin-mini.local)3> exit(self(), tsuraidesu).\n** exception exit: tsuraidesu\n\nexit \u304c\u4f1d\u64ad\u3057\u307e\u3057\u305f\u3002\nscala> [ERROR] [08/19/2015 01:24:57.295] [sample-akka.actor.default-dispatcher-2] [akka://sample/user/process] ** exception exit: ErlAtom(tsuraidesu)\nakka.ainterface.datatype.ErlExit: ** exception exit: ErlAtom(tsuraidesu)\n    at akka.ainterface.ErlProcessContext$class.exit(ErlProcessContext.scala:153)\n    at akka.ainterface.ErlProcessActor$$anon$1.exit(ErlProcessActor.scala:9)\n    at akka.ainterface.ErlProcessActor$class.akka$ainterface$ErlProcessActor$$handleControlMessage(ErlProcessActor.scala:60)\n    at akka.ainterface.ErlProcessActor$class.aroundReceive(ErlProcessActor.scala:35)\n    at ainterface.ProcessActor.aroundReceive(ProcessActor.scala:9)\n    at akka.actor.ActorCell.receiveMessage(ActorCell.scala:516)\n    at akka.actor.ActorCell.invoke(ActorCell.scala:487)\n    at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238)\n    at akka.dispatch.Mailbox.run(Mailbox.scala:220)\n    at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n    at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n    at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n    at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n    at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n\npid \u3092\u518d\u53d6\u5f97\u3057\u3066\u307f\u308b\u3068\u3001Akka \u5074\u306e\u30d7\u30ed\u30bb\u30b9\u3082\u518d\u8d77\u52d5\u3057\u3066\u3044\u308b(pid \u304c\u65b0\u3057\u304f\u306a\u3063\u3066\u3044\u308b)\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u82e5\u5e72\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u518d\u8d77\u52d5\u306f Erlang \u3067\u306a\u304f Akka \u306e Supervisor \u306b\u3088\u308a\u5f15\u304d\u8d77\u3053\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nscala> await(process ? SelfPid)\nres4: Any = ErlPid(ErlAtom(ainterface-sample@okumin-mini.local), 2, 0, 3)\n\n\u4ee5\u4e0a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3068\u30ea\u30f3\u30af\u3092\u4f8b\u306b\u3001Erlang \u30d7\u30ed\u30bb\u30b9\u3068\u306e\u901a\u4fe1\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7528\u9014\n\u73fe\u5b9f\u7684\u306a\u4f7f\u3044\u9053\u306f\u7686\u7121\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u7684\u306a\u6a5f\u80fd\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u7b87\u6240\u306f Erlang \u3067\u5b9f\u88c5\u3057\u3001\u8907\u96d1\u306a\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u306f Scala \u3067\u8a18\u8ff0\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u30b3\u30e9\u30dc\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5984\u60f3\u3057\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3057\u305f\u3002\nErlang \u306f\u305d\u306e\u30bd\u30d5\u30c8\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u6027\u8cea\u3084\u30db\u30c3\u30c8\u30b3\u30fc\u30c9\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u3088\u308a\u6b62\u307e\u3089\u306a\u3044\u30b7\u30b9\u30c6\u30e0\u304c\u5b9f\u73fe\u3057\u3084\u3059\u3044\u8a00\u8a9e(\u53c2\u8003: Akka vs Erlang)\u3067\u3059\u304c\u3001\u8868\u73fe\u529b\u306b\u9650\u754c\u304c\u3042\u308b\u3068\u611f\u3058\u307e\u3059\u3002\u4e00\u65b9\u3001Scala \u306f\u975e\u5e38\u306b\u30d1\u30ef\u30d5\u30eb\u306a\u8a18\u8ff0\u529b\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u4f55\u304b\u304c\u3088\u304f\u306a\u308b\u53ef\u80fd\u6027\u306f\u30bc\u30ed\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4eca\u3068\u306a\u3063\u3066\u306f Elixir \u3092\u4f7f\u3048\u3070\u3059\u3079\u3066\u306e\u554f\u984c\u304c\u89e3\u6c7a\u3067\u304d\u308b\u3089\u3057\u3044\u3067\u3059\u3002\u305d\u308c\u3086\u3048\u3001\u308f\u3056\u308f\u3056 Ainterface \u3092\u7528\u3044\u3066\u5909\u5247\u7684\u306a\u69cb\u6210\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3059\u308b\u52d5\u6a5f\u306f\u5f37\u304f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u4eca\u5f8c\n\u5206\u6563 Erlang \u306b\u306f\u8208\u5473\u6df1\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3001\u8aad\u3093\u3060\u3089\u5b9f\u88c5\u3057\u305f\u3044\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u611f\u60f3\n\u5b9f\u88c5\u306b\u306f\u305d\u308c\u306a\u308a\u306e\u56f0\u96e3\u3092\u611f\u3058\u307e\u3057\u305f\u3002\u5206\u6563Erlang\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u697d\u52dd\u3060\u3068\u601d\u3063\u3066\u66f8\u304d\u59cb\u3081\u3066\u307f\u305f\u3082\u306e\u306e\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u58c1\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u89e6\u308c\u3089\u308c\u3066\u3044\u306a\u3044\u4ed5\u69d8\u304c\u304b\u306a\u308a\u3042\u3063\u305f\n\u305d\u3082\u305d\u3082 P2P \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306f\u96e3\u3057\u3044\n\n\u82e6\u52b4\u306f\u3057\u307e\u3057\u305f\u304c\u3001\u6210\u679c\u7269\u3068\u3057\u3066\u306e Ainterface \u306b\u306f\u6982\u306d\u6e80\u8db3\u3067\u3059\u3002Akka \u306f Erlang \u306e\u8a2d\u8a08\u3092\u30d1\u30af\u3063\u3066\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001API \u3068\u3057\u3066\u306f\u81ea\u7136\u3067\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u9811\u5f35\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u661f\u3092\u304f\u3060\u3055\u3044\u3002\nAinterface\n# Akka \u3068 Erlang \u3092 Reactive \u306b\u7d44\u307f\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\n\nAkka \u3068 Erlang \u3092\u512a\u96c5\u306b\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001[Ainterface](https://github.com/ainterface/ainterface) \u3092\u4f5c\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\n\n## Ainterface \u3068\u306f\n\n[Ainterface](https://github.com/ainterface/ainterface) \u306f\u3001Akka actor \u3068 Erlang \u30d7\u30ed\u30bb\u30b9\u9593\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Ainterface \u3092\u7528\u3044\u308b\u3068\u3001[\u5206\u6563Erlang\u306e\u30d7\u30ed\u30c8\u30b3\u30eb](http://erlang.org/doc/apps/erts/erl_dist_protocol.html)\u3092\u901a\u3057\u3066\u3001Akka \u3089\u3057\u3044\u6587\u6cd5\u3067 Erlang \u3068\u901a\u4fe1\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4ed6\u8a00\u8a9e\u304b\u3089 Erlang \u3068\u304a\u3057\u3083\u3079\u308a\u3059\u308b\u8a66\u307f\u306f\u4ed6\u306b\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070 Java \u30d7\u30ed\u30b0\u30e9\u30e0\u3068 Erlang \u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u305f\u3081\u306e [Jinterface](http://www.erlang.org/doc/apps/jinterface/jinterface_users_guide.html) \u306f\u305d\u306e\u4e00\u3064\u3067\u3059\u3002\n\n\u53bb\u5e74\u306e Scala \u30a2\u30c9\u30f4\u30a7\u30f3\u30c8\u30fb\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u6295\u7a3f\u3057\u305f\u300c[Akka\u306eactor\u3068Erlang\u306e\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3057\u3066\u307f\u305f](http://qiita.com/okumin/items/f52eb56b64a9dd2efdeb)\u300d\u3067\u3082\u3001Jinterface \u3092\u30e9\u30c3\u30d7\u3057\u3066 Akka actor \u304b\u3089\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3044\u3044\u611f\u3058\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5b9f\u73fe\u3067\u304d\u305f\u3082\u306e\u306e\u3001Jinterface \u306f\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u306a API \u3067\u306a\u304b\u3063\u305f\u308a\u3068\u3001Akka \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u306b\u306f\u5c11\u3057\u7b4b\u304c\u60aa\u3044\u9762\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u305d\u306e\u8fba\u3092\u8003\u616e\u3057\u3066\u3088\u308a Reactive \u306b\u5b9f\u88c5\u3057\u306a\u304a\u3057\u305f\u306e\u304c Ainterface \u3068\u306a\u308a\u307e\u3059\u3002\n\n## Example\n\n### \u8d77\u52d5\n\n\u307e\u305a Erlang node(\u53ca\u3073 EPMD)\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u73fe\u5728\u6642\u70b9\u3067\u306f long name \u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```\nerl -name mofu\nErlang/OTP 17 [erts-6.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\n\nEshell V6.2.1  (abort with ^G)\n(mofu@okumin-mini.local)1>\n```\n\nAinterfaceSystem \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u4e00\u3064\u306e ActorSystem \u306b\u3064\u304d\u4e00\u3064\u306e AinterfaceSystem \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ce\u30fc\u30c9\u540d\u306a\u3069\u306e\u8a2d\u5b9a\u306f\u304a\u306a\u3058\u307f\u306e hocon \u306b\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```\n$ sbt \"project ainterface-sample\" console\n[info] Loading global plugins from /Users/okumin/.sbt/0.13/plugins\n[info] Loading project definition from /Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/project\n[info] Set current project to erlang-ainterface (in build file:/Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/)\n[info] Set current project to ainterface-sample (in build file:/Users/okumin/Documents/program/product/scala/akka/erlang-ainterface/)\n[info] Starting scala interpreter...\n[info]\nWelcome to Scala version 2.11.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_55).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> val config = com.typesafe.config.ConfigFactory.parseString(\"\"\"\n     |   akka {\n     |   loglevel = \"ERROR\"\n     |   ainterface {\n     |     root-name = \"ainterface-system\"\n     |     init.name = \"ainterface-sample\" // the node name\n     |   }\n     | }\"\"\")\nconfig: com.typesafe.config.Config = Config(SimpleConfigObject({\"akka\":{\"ainterface\":{\"init\":{\"name\":\"ainterface-sample\"},\"root-name\":\"ainterface-system\"},\"loglevel\":\"ERROR\"}}))\n\nscala> val system = akka.actor.ActorSystem(\"sample\", config)\nsystem: akka.actor.ActorSystem = akka://sample\n\nscala> akka.ainterface.AinterfaceSystem.init(system) // initialize\n```\n\n### Erlang \u30d7\u30ed\u30bb\u30b9\u4f5c\u6210\n\n\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u88c5\u306f\u3001ErlProcessActor \u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067\u884c\u3044\u307e\u3059\u3002`ErlProcessActor#process` \u3092\u901a\u3058\u3066\u3001Erlang \u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u306e\u51e6\u7406\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```scala\nclass EchoActor extends ErlProcessActor {\n  override def receive: Receive = {\n    case ErlTuple(from: ErlPid, message) =>\n      process.send(from, ErlTuple(process.self, message))\n  }\n}\n```\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308b [ProcessActor](https://github.com/ainterface/ainterface/blob/master/ainterface-sample/src/main/scala/ainterface/ProcessActor.scala) \u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u898b\u3066\u306e\u901a\u308a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4ecb\u3057\u3066 Erlang \u7cfb API \u3092\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u3064\u3044\u3067\u306b REPL \u304b\u3089\u6271\u3044\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u3001\u4e0b\u6e96\u5099\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\nscala> val process = system.actorOf(akka.actor.Props[ainterface.ProcessActor], \"process\")\nprocess: akka.actor.ActorRef = Actor[akka://sample/user/process#-94975417]\n\nscala> import ainterface.ProcessActorProtocol._\nimport ainterface.ProcessActorProtocol._\n\nscala> import akka.ainterface.datatype._\nimport akka.ainterface.datatype._\n\nscala> import akka.pattern.ask\nimport akka.pattern.ask\n\nscala> import scala.concurrent._\nimport scala.concurrent._\n\nscala> import scala.concurrent.duration._\nimport scala.concurrent.duration._\n\nscala> import scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nscala> implicit val timeout = akka.util.Timeout(1.second)\ntimeout: akka.util.Timeout = Timeout(1 second)\n\nscala> def await(x: Future[Any]): Any = Await.result(x, 1.second)\nawait: (x: scala.concurrent.Future[Any])Any\n```\n\nProcessActor \u306f Akka actor \u3067\u3042\u308b\u3068\u540c\u6642\u306b Erlang \u30d7\u30ed\u30bb\u30b9\u3067\u3082\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u8a3c\u62e0\u306b\u3001pid \u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\nscala> val self = await(process ? SelfPid).asInstanceOf[ErlPid]\nself: akka.ainterface.datatype.ErlPid = ErlPid(ErlAtom(ainterface-sample@okumin-mini.local), 1, 0, 3)\n```\n\n### \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\n\n\u540d\u524d\u3092\u3064\u3051\u3066\u307f\u307e\u3057\u3087\u3046\u3002erlang:register/2 \u306b\u76f8\u5f53\u3059\u308b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n```\nscala> process ! Register(ErlAtom(\"process\"), self)\n```\n\n\u3053\u308c\u3067 Erlang \u30d7\u30ed\u30bb\u30b9\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\u3002pid \u3068\u3068\u3082\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u307e\u3059\u3002\n\n```\n(mofu@okumin-mini.local)1> {process, 'ainterface-sample@okumin-mini.local'} ! {hello, self()}.\n{hello,<0.38.0>}\n```\n\n\u5c4a\u304d\u307e\u3057\u305f\u3002\u8fd4\u4fe1\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\nscala> val Some(ErlTuple(message, pid: ErlPid)) = await(process ? Receive)\nmessage: akka.ainterface.datatype.ErlTerm = ErlAtom(hello)\npid: akka.ainterface.datatype.ErlPid = ErlPid(ErlAtom(mofu@okumin-mini.local), 38, 0, 2)\n\nscala> process ! Send(pid, ErlAtom(\"okey-dokey\"))\n```\n\nErlang \u5074\u306b\u3082\u5c4a\u304d\u307e\u3057\u305f\u3002\n\n```\n(mofu@okumin-mini.local)2> flush().\nShell got 'okey-dokey'\nok\n```\n\n### \u30ea\u30f3\u30af\n\n\u3082\u3046\u4e00\u3064\u3001link \u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\nscala> process ! Link(pid)\n```\n\nErlang \u5074\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u6bba\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n(mofu@okumin-mini.local)3> exit(self(), tsuraidesu).\n** exception exit: tsuraidesu\n```\n\n`exit` \u304c\u4f1d\u64ad\u3057\u307e\u3057\u305f\u3002\n\n```\nscala> [ERROR] [08/19/2015 01:24:57.295] [sample-akka.actor.default-dispatcher-2] [akka://sample/user/process] ** exception exit: ErlAtom(tsuraidesu)\nakka.ainterface.datatype.ErlExit: ** exception exit: ErlAtom(tsuraidesu)\n\tat akka.ainterface.ErlProcessContext$class.exit(ErlProcessContext.scala:153)\n\tat akka.ainterface.ErlProcessActor$$anon$1.exit(ErlProcessActor.scala:9)\n\tat akka.ainterface.ErlProcessActor$class.akka$ainterface$ErlProcessActor$$handleControlMessage(ErlProcessActor.scala:60)\n\tat akka.ainterface.ErlProcessActor$class.aroundReceive(ErlProcessActor.scala:35)\n\tat ainterface.ProcessActor.aroundReceive(ProcessActor.scala:9)\n\tat akka.actor.ActorCell.receiveMessage(ActorCell.scala:516)\n\tat akka.actor.ActorCell.invoke(ActorCell.scala:487)\n\tat akka.dispatch.Mailbox.processMailbox(Mailbox.scala:238)\n\tat akka.dispatch.Mailbox.run(Mailbox.scala:220)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n```\n\npid \u3092\u518d\u53d6\u5f97\u3057\u3066\u307f\u308b\u3068\u3001Akka \u5074\u306e\u30d7\u30ed\u30bb\u30b9\u3082\u518d\u8d77\u52d5\u3057\u3066\u3044\u308b(pid \u304c\u65b0\u3057\u304f\u306a\u3063\u3066\u3044\u308b)\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u82e5\u5e72\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u518d\u8d77\u52d5\u306f Erlang \u3067\u306a\u304f Akka \u306e Supervisor \u306b\u3088\u308a\u5f15\u304d\u8d77\u3053\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nscala> await(process ? SelfPid)\nres4: Any = ErlPid(ErlAtom(ainterface-sample@okumin-mini.local), 2, 0, 3)\n```\n\n\u4ee5\u4e0a\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3068\u30ea\u30f3\u30af\u3092\u4f8b\u306b\u3001Erlang \u30d7\u30ed\u30bb\u30b9\u3068\u306e\u901a\u4fe1\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u7528\u9014\n\n\u73fe\u5b9f\u7684\u306a\u4f7f\u3044\u9053\u306f\u7686\u7121\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u7684\u306a\u6a5f\u80fd\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u7b87\u6240\u306f Erlang \u3067\u5b9f\u88c5\u3057\u3001\u8907\u96d1\u306a\u30c9\u30e1\u30a4\u30f3\u30ed\u30b8\u30c3\u30af\u306f Scala \u3067\u8a18\u8ff0\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u30b3\u30e9\u30dc\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5984\u60f3\u3057\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3057\u305f\u3002\n\nErlang \u306f\u305d\u306e\u30bd\u30d5\u30c8\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u6027\u8cea\u3084\u30db\u30c3\u30c8\u30b3\u30fc\u30c9\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u3088\u308a\u6b62\u307e\u3089\u306a\u3044\u30b7\u30b9\u30c6\u30e0\u304c\u5b9f\u73fe\u3057\u3084\u3059\u3044\u8a00\u8a9e(\u53c2\u8003: [Akka vs Erlang](http://qiita.com/okumin/items/b0e85704268dfb4741b5))\u3067\u3059\u304c\u3001\u8868\u73fe\u529b\u306b\u9650\u754c\u304c\u3042\u308b\u3068\u611f\u3058\u307e\u3059\u3002\u4e00\u65b9\u3001Scala \u306f\u975e\u5e38\u306b\u30d1\u30ef\u30d5\u30eb\u306a\u8a18\u8ff0\u529b\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u4f55\u304b\u304c\u3088\u304f\u306a\u308b\u53ef\u80fd\u6027\u306f\u30bc\u30ed\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u4eca\u3068\u306a\u3063\u3066\u306f [Elixir](http://elixir-lang.org/) \u3092\u4f7f\u3048\u3070\u3059\u3079\u3066\u306e\u554f\u984c\u304c\u89e3\u6c7a\u3067\u304d\u308b\u3089\u3057\u3044\u3067\u3059\u3002\u305d\u308c\u3086\u3048\u3001\u308f\u3056\u308f\u3056 Ainterface \u3092\u7528\u3044\u3066\u5909\u5247\u7684\u306a\u69cb\u6210\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3059\u308b\u52d5\u6a5f\u306f\u5f37\u304f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\n## \u4eca\u5f8c\n\n\u5206\u6563 Erlang \u306b\u306f\u8208\u5473\u6df1\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3001\u8aad\u3093\u3060\u3089\u5b9f\u88c5\u3057\u305f\u3044\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u611f\u60f3\n\n\u5b9f\u88c5\u306b\u306f\u305d\u308c\u306a\u308a\u306e\u56f0\u96e3\u3092\u611f\u3058\u307e\u3057\u305f\u3002[\u5206\u6563Erlang\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u308b](http://erlang.org/doc/apps/erts/erl_dist_protocol.html)\u304b\u3089\u697d\u52dd\u3060\u3068\u601d\u3063\u3066\u66f8\u304d\u59cb\u3081\u3066\u307f\u305f\u3082\u306e\u306e\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u58c1\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n* \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u89e6\u308c\u3089\u308c\u3066\u3044\u306a\u3044\u4ed5\u69d8\u304c\u304b\u306a\u308a\u3042\u3063\u305f\n* \u305d\u3082\u305d\u3082 P2P \u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u306f\u96e3\u3057\u3044\n\n\u82e6\u52b4\u306f\u3057\u307e\u3057\u305f\u304c\u3001\u6210\u679c\u7269\u3068\u3057\u3066\u306e Ainterface \u306b\u306f\u6982\u306d\u6e80\u8db3\u3067\u3059\u3002Akka \u306f Erlang \u306e\u8a2d\u8a08\u3092\u30d1\u30af\u3063\u3066\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001API \u3068\u3057\u3066\u306f\u81ea\u7136\u3067\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u6700\u5f8c\u306b\n\n\u9811\u5f35\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u661f\u3092\u304f\u3060\u3055\u3044\u3002\n\n[Ainterface](https://github.com/ainterface/ainterface)\n"}