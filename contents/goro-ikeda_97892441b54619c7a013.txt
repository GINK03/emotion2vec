{"tags": ["Java", "FunctionalProgramming", "Generics"], "context": "\n\n\u53c2\u8003\u8cc7\u6599\n\n\u5148\u4eba\u306e\u8db3\u8de1\nhttp://blogs.wankuma.com/nagise/archive/2008/05/25/139308.aspx\nhttp://d.hatena.ne.jp/Nagise/20101101/1288629634\n\n\u6a19\u6e96API\u3067\u306e\u5b9f\u88c5\u4f8b\n\u3053\u306e\u4eba\u304c\u305d\u3046\u3067\u3059\u3002\nEnum<E extends Enum<E>>\n\n\n\u4f7f\u3044\u307f\u3061\n\n\u7d99\u627f\u95a2\u4fc2\u306b\u3042\u308b\u30af\u30e9\u30b9\u3067\u306e\u81ea\u7136\u306a\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u30c1\u30a7\u30a4\u30f3\u5b9f\u88c5\n\n\nclass RecursiveGenerics {\n    public static class Parent<T extends Parent> {\n        @SuppressWarnings(\"unchecked\")\n        protected T self() {\n            return (T) this;\n        }\n        private String value1;\n        public T setValue1(String value) {\n            value1 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return getClass().getSimpleName() + \"/\" + value1;\n        }\n    }\n    public static class Child<T extends Child> extends Parent<T> {\n        private String value2;\n        public T setValue2(String value) {\n            value2 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value2;\n        }\n    }\n    public static class GrandChild extends Child<GrandChild> {\n        private String value3;\n        public GrandChild setValue3(String value) {\n            value3 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value3;\n        }\n    }\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        System.out.println(\n            new Parent<Parent>()\n            .setValue1(\"value1\"));\n        System.out.println(\n            new Child<Child>()\n            .setValue1(\"value1\")\n            .setValue2(\"value2\"));\n        System.out.println(\n            new GrandChild()\n            .setValue1(\"value1\")\n            .setValue2(\"value2\")\n            .setValue3(\"value3\"));\n    }\n}\n\n\n\u518d\u5e30\u7684\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f\u547c\u3073\u51fa\u3057\u9806\u306b\u5236\u9650\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u3002\n\n\nclass OrdinalPOJO {\n    public static class Parent {\n        private String value1;\n        public Parent setValue1(String value) {\n            value1 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return getClass().getSimpleName() + \"/\" + value1;\n        }\n    }\n    public static class Child extends Parent {\n        private String value2;\n        public Child setValue2(String value) {\n            value2 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value2;\n        }\n    }\n    public static class GrandChild extends Child {\n        private String value3;\n        public GrandChild setValue3(String value) {\n            value3 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value3;\n        }\n    }\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        System.out.println(\n            new GrandChild()\n            .setValue3(\"value3\")\n            .setValue2(\"value2\")\n            .setValue1(\"value1\"));\n    }\n}\n\n\n\n\u5171\u7528\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u5171\u7528JAX-RS\u30ea\u30bd\u30fc\u30b9\n2016/07/08 \u3042\u307e\u308a\u306b\u4e08\u304c\u9577\u3044\u306e\u3067\u6574\u7406\n\n\nimport java.util.List;\nimport javax.persistence.*;\n// \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Entity & @XmlRootElement\n@MappedSuperclass\npublic class Root<S extends Root<S, T>, T extends Leaf<S, T>> {\n    @SuppressWarnings(\"unchecked\")\n    public S self() {\n        return (S) this;\n    }\n    private long id;\n    @Id\n    @GeneratedValue\n    public long getId() {\n        return id;\n    }\n    public S setId(long value) {\n        id = value;\n        return self();\n    }\n    protected List<T> leaves;\n    // \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Override & @ManyToOne\n    public List<T> getLeaves() {\n        return leaves;\n    }\n    public S setLeaves(List<T> values) {\n        for (T value : values) {\n            value.setRoot(self());\n        }\n        leaves = values;\n        return self();\n    }\n}\n\n\n\n\nimport javax.persistence.*;\n//\u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Entity & @XmlRootElement\n@MappedSuperclass\npublic class Leaf<S extends Root<S, T>, T extends Leaf<S, T>> {\n    @SuppressWarnings(\"unchecked\")\n    public T self() {\n        return (T) this;\n    }\n    private long id;\n    @Id\n    @GeneratedValue\n    public long getId() {\n        return id;\n    }\n    public T setId(long value) {\n        id = value;\n        return self();\n    }\n    protected S root;\n    // \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Override & @OneToMany\n    @Transient\n    public S getRoot() {\n        return root;\n    }\n    public T setRoot(S value) {\n        root = value;\n        return self();\n    }\n}\n\n\n\n\nimport java.util.Optional;\nimport javax.enterprise.inject.Instance;\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.NotFoundException;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriInfo;\n\npublic abstract class Resource<S extends Root<S, T>, T extends Leaf<S, T>> {\n\n    protected abstract EntityManager getEntityManager();\n\n    @Inject\n    private Instance<Class<S>> rootClass;\n    @Inject\n    private Instance<Class<T>> leafClass;\n    @PathParam(\"rootId\")\n    private long rootId;\n    @Context\n    private UriInfo uri;\n\n    @PUT\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public S put(S root) {\n        getEntityManager().merge(root);\n        return root;\n    }\n\n    @GET\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public S get() {\n        return Optional.of(getEntityManager()\n                .find(rootClass.get(), rootId))\n                .orElseThrow(() -> new NotFoundException());\n    }\n\n    @POST\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public Response post(T leaf) {\n        getEntityManager().persist(leaf.setRoot(get()));\n        return Response.created(uri.getAbsolutePathBuilder()\n                .path(\"{leafId}\").build(leaf.getId())).entity(leaf).build();\n    }\n\n    @PUT\n    @Path(\"{leafId}\")\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public T put(@NotNull @PathParam(\"leafId\") long leafId, T leaf) {\n        getEntityManager().merge(leaf.setRoot(get()));\n        return leaf;\n    }\n\n    @GET\n    @Path(\"{leafId}\")\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public T get(@NotNull @PathParam(\"leafId\") long leafId) {\n        return Optional.of(getEntityManager()\n                .find(leafClass.get(), leafId))\n                .orElseThrow(() -> new NotFoundException());\n    }\n}\n\n\n\n\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n2017/07/07 Z->\u4e0d\u52d5\u70b9 \u306b\u8a02\u6b63\u3002\n\u610f\u5916\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3092\u898b\u306a\u3044\u3002\n\n\nimport java.util.function.Function;\nimport java.util.stream.Stream;\n\n@FunctionalInterface\ninterface Y<I,O> extends Function<Y<I,O>, Function<I,O>> {\n    public static <I,O> Function<I,O> of(Y<I,O> f) {\n        return f.apply(f);\n    }\n    // 0..20\u756a\u76ee\u307e\u3067\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u51fa\u529b\n    public static void main(String[] args) {\n        Y.<Function<Integer, Integer>, Function<Integer, Stream<Integer>>>of(\n            // \u95a2\u6570 g \u3068 \u521d\u671f\u5024 x \u3092\u5165\u529b\u3068\u3057\u3066\n            // (x < 1) \u306b\u306a\u308b\u307e\u3067\u306e g(x) \u306e\u7d50\u679c Stream \u3092\u8fd4\u3059\u518d\u5e30\u95a2\u6570\n            f -> g -> x -> (x < 1)\n                ? Stream.of(g.apply(x))\n                : Stream.concat(\n                    Stream.of(g.apply(x)),\n                    f.apply(f).apply(g).apply(x - 1)))\n                    .apply(Y.of(\n                        // x \u756a\u76ee\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u8fd4\u3059\u518d\u5e30\u95a2\u6570\n                        f -> x -> x < 2 ? 1 \n                        : f.apply(f).apply(x - 1)\n                        + f.apply(f).apply(x - 2)\n                    )).apply(20).forEach(System.out::println);\n    }\n}\n\n\nScheme \u306e\u30b7\u30f3\u30dc\u30eb \u304b\u3089 F \u3092 (I O) \u306b\u3059\u308b\u3060\u3051\u3067OK\u3002\n\u305f\u3076\u3093\u540c\u578b\u306a\u3093\u3060\u3051\u3069\u540d\u72b6\u3057\u96e3\u3044\u9055\u548c\u611f\u304c\u3042\u308b\u3002\n\u578b\u5b9a\u7fa9\u4e2d\u306e\u81ea\u5df1\u53c2\u7167\u90e8\u5206(Y<I,O>)\u304b\u3089\u306f\u6b21\u306e\u3088\u3046\u306a\u7121\u9650\u306e\u5c55\u958b\u304c\u767a\u751f\u3059\u308b\u3002\nFunction<Function<Function<..., Function<I,O>>, Function<I,O>>, Function<I,O>>\nHaskell\u3067\u81ea\u5df1\u53c2\u7167\u306a\u3057\u306e\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u3082\u3046\u3068\u3059\u308b\u3068\u3053\u306e\u7121\u9650\u306e\u5c55\u958b\u306e\u305f\u3081\u306b\u578b\u63a8\u8ad6\u306e\u6bb5\u968e\u3067\u5f3e\u304b\u308c\u308b\u3002\n\n\nfix f = f (fix f)\n\n-- main = print $ show (fix (\\f -> \\i -> if i == 0 then 1 else i * f (i-1)) 5)\n\nmain = print $ show (\n  (\\f -> (\\x -> f (x x))(\\x -> f (x x)))\n  (\\f -> \\i -> if i == 0 then 1 else i * f (i-1)) 5)\n\n\nOccurs check: cannot construct the infinite type:\n\nt0 ~ t0 -> a0 -> a0\n       Expected type: t0 -> a0 -> a0\n         Actual type: (t0 -> a0 -> a0) -> a0 -> a0\n\nJava\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u5410\u304f\u30b3\u30fc\u30c9\u304c\u7d44\u3081\u305f\u6c17\u304c\u3059\u308b\u3093\u3060\u3051\u3069\u5fd8\u308c\u305f\u3002\n\n\n\u3053\u3053\u304b\u3089\u86c7\u8db3\u3002\n\n\u305d\u3082\u305d\u3082\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3063\u3066\u4f55\n\n\u30e9\u30e0\u30c0\u8a08\u7b97\u3068\u306f\u7b49\u4fa1\u3060\u3051\u3069\u5225\u7269\u306e\u8a08\u7b97\u8868\u73fe\u5f62\u5f0f\u3002\n\n\n\u5b9f\u306f\u6b74\u53f2\u7684\u306b\u306f\u30e9\u30e0\u30c0\u8a08\u7b97\u3088\u308a\u3082\u5148\u306b\u767a\u898b\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\n\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\n\nSKI\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u8a08\u7b97\u3067\u306f\u4ee5\u4e0b\u306e\u4e09\u7a2e\u306e\u30e9\u30e0\u30c0\u8a08\u7b97\u306e\u95a2\u6570\u5408\u6210\u306b\u3088\u308a\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u8a08\u7b97\u3092\u8868\u73fe\u3059\u308b\u3002\n\n$S = \u03bbxyz.xz(yz)$\n\n\n\u9069\u7528\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\n\n$K = \u03bbxy.x$\n\n\n\u5b9a\u6570\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\n\n$I = S K K = \u03bbx.x$\n\n\n\u6052\u7b49\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\n\n\n\n$(\u03bbxyz.xz(yz))(\u03bbxy.x)(\u03bbxy.x)$ \n$(\u03bbz.(\u03bbxy.x)(z)((\u03bbxy.x)(z))$\n\n\n $(\u03bbxy.x)(z)(any) = z$\n\n\n$\u03bbz.z$\n\n\u5358\u72ec\u3067\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u8a08\u7b97\u3092\u8868\u73fe\u3067\u304d\u308b one-point bases \u3068\u3044\u3046\u306e\u3082\u5b58\u5728\u3059\u308b\u3002\n\n$X = \u03bbx.((xS)K)$\n$K = X(X (X X))$\n$S = X(X (X (X X)))$\n\n\u3046\u308f\u3041\u3002\n\u4ed6\u306b\u3082\u7686\u5927\u597d\u304d\u306a Haskell Curry \u304c\u767a\u898b\u3057\u305f\u547d\u984c\u8ad6\u7406\u3068\u5bfe\u5fdc\u3059\u308b B,C,K,W \u30b7\u30b9\u30c6\u30e0\u306a\u3093\u304b\u3082\u3042\u308a\u307e\u3059\u3002\n\n\n\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\nY\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f Haskell Curry \u304c\u767a\u898b\u3057\u305f\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4e00\u7a2e\u3002\n\n$Y = S (K (S I I)) (S (S (K S) K) (K (S I I)))$\n\n\u578b\u7121\u3057\u30e9\u30e0\u30c0\u8a08\u7b97\u306e\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308a\u7121\u9650\u306b\u751f\u6210\u3067\u304d\u308b\u3002(\u5e30\u7d0d\u7684\u52a0\u7b97\u96c6\u5408)\n\n\u8a00\u8a9e\u5b9f\u88c5\nLazy-K SKI\nUnlambda SK\nIota and Jot X\n\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u5091\u4f5c\u3092 Haskell\u3067\u5b9f\u88c5\u3057\u3066\u305f\u3093\u3067\u3059\u304c\u6b8b\u5ff5\u306a\u304c\u3089 out of memory\u3002\n\nfix.hs\nmain = do\n  print $ show ((\u4e0d\u52d5\u70b9 \u968e\u4e57) 5)\n\n\u51c4\u3044\u306e a b c d e f g h i j k l m n o p q s t u v w x y z r =\n  (r (t h i s i s a f i x e d p o i n t c o m b i n a t o r))\n\n\u4e0d\u52d5\u70b9 f = (\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e)\n\n\u968e\u4e57 f 0 = 1\n\u968e\u4e57 f x = x * f (x - 1)\n\n\n\n# \u53c2\u8003\u8cc7\u6599\n\n## \u5148\u4eba\u306e\u8db3\u8de1\n\nhttp://blogs.wankuma.com/nagise/archive/2008/05/25/139308.aspx\nhttp://d.hatena.ne.jp/Nagise/20101101/1288629634\n\n## \u6a19\u6e96API\u3067\u306e\u5b9f\u88c5\u4f8b\n\n[\u3053\u306e\u4eba](http://docs.oracle.com/javase/jp/7/api/java/lang/Enum.html)\u304c\u305d\u3046\u3067\u3059\u3002\n\n**Enum**&lt;E extends **Enum**&lt;E&gt;&gt;\n\n* * *\n\n# \u4f7f\u3044\u307f\u3061\n\n## \u7d99\u627f\u95a2\u4fc2\u306b\u3042\u308b\u30af\u30e9\u30b9\u3067\u306e\u81ea\u7136\u306a\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u30c1\u30a7\u30a4\u30f3\u5b9f\u88c5\n\n```java::RecursiveGenerics.java\nclass RecursiveGenerics {\n    public static class Parent<T extends Parent> {\n        @SuppressWarnings(\"unchecked\")\n        protected T self() {\n            return (T) this;\n        }\n        private String value1;\n        public T setValue1(String value) {\n            value1 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return getClass().getSimpleName() + \"/\" + value1;\n        }\n    }\n    public static class Child<T extends Child> extends Parent<T> {\n        private String value2;\n        public T setValue2(String value) {\n            value2 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value2;\n        }\n    }\n    public static class GrandChild extends Child<GrandChild> {\n        private String value3;\n        public GrandChild setValue3(String value) {\n            value3 = value;\n            return self();\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value3;\n        }\n    }\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        System.out.println(\n            new Parent<Parent>()\n            .setValue1(\"value1\"));\n        System.out.println(\n            new Child<Child>()\n            .setValue1(\"value1\")\n            .setValue2(\"value2\"));\n        System.out.println(\n            new GrandChild()\n            .setValue1(\"value1\")\n            .setValue2(\"value2\")\n            .setValue3(\"value3\"));\n    }\n}\n```\n\n\u518d\u5e30\u7684\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f**\u547c\u3073\u51fa\u3057\u9806\u306b\u5236\u9650**\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u3002\n\n```java::OrdinalPOJO.java\nclass OrdinalPOJO {\n    public static class Parent {\n        private String value1;\n        public Parent setValue1(String value) {\n            value1 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return getClass().getSimpleName() + \"/\" + value1;\n        }\n    }\n    public static class Child extends Parent {\n        private String value2;\n        public Child setValue2(String value) {\n            value2 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value2;\n        }\n    }\n    public static class GrandChild extends Child {\n        private String value3;\n        public GrandChild setValue3(String value) {\n            value3 = value;\n            return this;\n        }\n        @Override\n        public String toString() {\n            return super.toString() + \"/\" + value3;\n        }\n    }\n    public static void main (String[] args) throws java.lang.Exception\n    {\n        System.out.println(\n            new GrandChild()\n            .setValue3(\"value3\")\n            .setValue2(\"value2\")\n            .setValue1(\"value1\"));\n    }\n}\n```\n\n## \u5171\u7528\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3068\u5171\u7528JAX-RS\u30ea\u30bd\u30fc\u30b9\n\n2016/07/08 \u3042\u307e\u308a\u306b\u4e08\u304c\u9577\u3044\u306e\u3067\u6574\u7406\n\n```java::Root.java\nimport java.util.List;\nimport javax.persistence.*;\n// \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Entity & @XmlRootElement\n@MappedSuperclass\npublic class Root<S extends Root<S, T>, T extends Leaf<S, T>> {\n\t@SuppressWarnings(\"unchecked\")\n\tpublic S self() {\n\t\treturn (S) this;\n\t}\n\tprivate long id;\n\t@Id\n\t@GeneratedValue\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\tpublic S setId(long value) {\n\t\tid = value;\n\t\treturn self();\n\t}\n\tprotected List<T> leaves;\n\t// \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Override & @ManyToOne\n\tpublic List<T> getLeaves() {\n\t\treturn leaves;\n\t}\n\tpublic S setLeaves(List<T> values) {\n\t\tfor (T value : values) {\n\t\t\tvalue.setRoot(self());\n\t\t}\n\t\tleaves = values;\n\t\treturn self();\n\t}\n}\n```\n```java::Leaf.java\nimport javax.persistence.*;\n//\u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Entity & @XmlRootElement\n@MappedSuperclass\npublic class Leaf<S extends Root<S, T>, T extends Leaf<S, T>> {\n\t@SuppressWarnings(\"unchecked\")\n\tpublic T self() {\n\t\treturn (T) this;\n\t}\n\tprivate long id;\n\t@Id\n\t@GeneratedValue\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\tpublic T setId(long value) {\n\t\tid = value;\n\t\treturn self();\n\t}\n\tprotected S root;\n\t// \u30b5\u30d6\u30af\u30e9\u30b9\u3067 @Override & @OneToMany\n\t@Transient\n\tpublic S getRoot() {\n\t\treturn root;\n\t}\n\tpublic T setRoot(S value) {\n\t\troot = value;\n\t\treturn self();\n\t}\n}\n```\n```java::Resource.java\nimport java.util.Optional;\nimport javax.enterprise.inject.Instance;\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.NotFoundException;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriInfo;\n\npublic abstract class Resource<S extends Root<S, T>, T extends Leaf<S, T>> {\n\n\tprotected abstract EntityManager getEntityManager();\n\n\t@Inject\n\tprivate Instance<Class<S>> rootClass;\n\t@Inject\n\tprivate Instance<Class<T>> leafClass;\n\t@PathParam(\"rootId\")\n\tprivate long rootId;\n\t@Context\n\tprivate UriInfo uri;\n \n\t@PUT\n\t@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic S put(S root) {\n\t\tgetEntityManager().merge(root);\n\t\treturn root;\n\t}\n\n\t@GET\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic S get() {\n\t\treturn Optional.of(getEntityManager()\n\t\t\t\t.find(rootClass.get(), rootId))\n\t\t\t\t.orElseThrow(() -> new NotFoundException());\n\t}\n\n\t@POST\n\t@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic Response post(T leaf) {\n\t\tgetEntityManager().persist(leaf.setRoot(get()));\n\t\treturn Response.created(uri.getAbsolutePathBuilder()\n\t\t\t\t.path(\"{leafId}\").build(leaf.getId())).entity(leaf).build();\n\t}\n\n\t@PUT\n\t@Path(\"{leafId}\")\n\t@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic T put(@NotNull @PathParam(\"leafId\") long leafId, T leaf) {\n\t\tgetEntityManager().merge(leaf.setRoot(get()));\n\t\treturn leaf;\n\t}\n\n\t@GET\n\t@Path(\"{leafId}\")\n\t@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n\tpublic T get(@NotNull @PathParam(\"leafId\") long leafId) {\n\t\treturn Optional.of(getEntityManager()\n\t\t\t\t.find(leafClass.get(), leafId))\n\t\t\t\t.orElseThrow(() -> new NotFoundException());\n\t}\n}\n```\n\n## \u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\n2017/07/07 Z->\u4e0d\u52d5\u70b9 \u306b\u8a02\u6b63\u3002\n\n\u610f\u5916\u3068\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3092\u898b\u306a\u3044\u3002\n\n```java::Y.java\nimport java.util.function.Function;\nimport java.util.stream.Stream;\n\n@FunctionalInterface\ninterface Y<I,O> extends Function<Y<I,O>, Function<I,O>> {\n    public static <I,O> Function<I,O> of(Y<I,O> f) {\n        return f.apply(f);\n    }\n    // 0..20\u756a\u76ee\u307e\u3067\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u51fa\u529b\n    public static void main(String[] args) {\n        Y.<Function<Integer, Integer>, Function<Integer, Stream<Integer>>>of(\n            // \u95a2\u6570 g \u3068 \u521d\u671f\u5024 x \u3092\u5165\u529b\u3068\u3057\u3066\n            // (x < 1) \u306b\u306a\u308b\u307e\u3067\u306e g(x) \u306e\u7d50\u679c Stream \u3092\u8fd4\u3059\u518d\u5e30\u95a2\u6570\n            f -> g -> x -> (x < 1)\n                ? Stream.of(g.apply(x))\n                : Stream.concat(\n                    Stream.of(g.apply(x)),\n                    f.apply(f).apply(g).apply(x - 1)))\n                    .apply(Y.of(\n                        // x \u756a\u76ee\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u8fd4\u3059\u518d\u5e30\u95a2\u6570\n                        f -> x -> x < 2 ? 1 \n                        : f.apply(f).apply(x - 1)\n                        + f.apply(f).apply(x - 2)\n                    )).apply(20).forEach(System.out::println);\n    }\n}\n```\n\n~~[Scheme](http://groups.csail.mit.edu/mac/projects/scheme/) \u306e\u30b7\u30f3\u30dc\u30eb \u304b\u3089 F \u3092 (I O) \u306b\u3059\u308b\u3060\u3051\u3067OK\u3002~~\n\n\u305f\u3076\u3093\u540c\u578b\u306a\u3093\u3060\u3051\u3069\u540d\u72b6\u3057\u96e3\u3044\u9055\u548c\u611f\u304c\u3042\u308b\u3002\n\n\u578b\u5b9a\u7fa9\u4e2d\u306e\u81ea\u5df1\u53c2\u7167\u90e8\u5206(`Y<I,O>`)\u304b\u3089\u306f\u6b21\u306e\u3088\u3046\u306a\u7121\u9650\u306e\u5c55\u958b\u304c\u767a\u751f\u3059\u308b\u3002\n\n`Function<Function<Function<..., Function<I,O>>, Function<I,O>>, Function<I,O>>`\n\nHaskell\u3067\u81ea\u5df1\u53c2\u7167\u306a\u3057\u306e\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u7d44\u3082\u3046\u3068\u3059\u308b\u3068\u3053\u306e\u7121\u9650\u306e\u5c55\u958b\u306e\u305f\u3081\u306b\u578b\u63a8\u8ad6\u306e\u6bb5\u968e\u3067\u5f3e\u304b\u308c\u308b\u3002\n\n```hs::infinite.hs\nfix f = f (fix f)\n\n-- main = print $ show (fix (\\f -> \\i -> if i == 0 then 1 else i * f (i-1)) 5)\n\nmain = print $ show (\n  (\\f -> (\\x -> f (x x))(\\x -> f (x x)))\n  (\\f -> \\i -> if i == 0 then 1 else i * f (i-1)) 5)\n```\n\nOccurs check: cannot construct **the infinite type**:\n>    t0 ~ t0 -> a0 -> a0\n>        Expected type: t0 -> a0 -> a0\n>          Actual type: (t0 -> a0 -> a0) -> a0 -> a0\n\nJava\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u5410\u304f\u30b3\u30fc\u30c9\u304c\u7d44\u3081\u305f\u6c17\u304c\u3059\u308b\u3093\u3060\u3051\u3069\u5fd8\u308c\u305f\u3002\n\n* * *\n\n# \u3053\u3053\u304b\u3089\u86c7\u8db3\u3002\n\n## \u305d\u3082\u305d\u3082\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3063\u3066\u4f55\n\n1. \u30e9\u30e0\u30c0\u8a08\u7b97\u3068\u306f**\u7b49\u4fa1\u3060\u3051\u3069\u5225\u7269**\u306e\u8a08\u7b97\u8868\u73fe\u5f62\u5f0f\u3002\n  - \u5b9f\u306f[\u6b74\u53f2](https://ja.wikipedia.org/wiki/\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u8ad6\u7406)\u7684\u306b\u306f\u30e9\u30e0\u30c0\u8a08\u7b97\u3088\u308a\u3082\u5148\u306b\u767a\u898b\u3055\u308c\u3066\u3044\u308b\u3002\n2. **\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u3044**\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\n\nSKI\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u8a08\u7b97\u3067\u306f\u4ee5\u4e0b\u306e\u4e09\u7a2e\u306e\u30e9\u30e0\u30c0\u8a08\u7b97\u306e[\u95a2\u6570\u5408\u6210](http://docs.oracle.com/javase/jp/8/docs/api/java/util/function/Function.html#compose-java.util.function.Function-)\u306b\u3088\u308a\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u8a08\u7b97\u3092\u8868\u73fe\u3059\u308b\u3002\n\n- $S = \u03bbxyz.xz(yz)$\n - \u9069\u7528\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n- $K = \u03bbxy.x$\n - \u5b9a\u6570\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n- $I = S K K = \u03bbx.x$\n  - \u6052\u7b49\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\n1. $(\u03bbxyz.xz(yz))(\u03bbxy.x)(\u03bbxy.x)$ \n2. $(\u03bbz.(\u03bbxy.x)(z)((\u03bbxy.x)(z))$\n   -  $(\u03bbxy.x)(z)(any) = z$\n3. $\u03bbz.z$\n\n\u5358\u72ec\u3067\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u8a08\u7b97\u3092\u8868\u73fe\u3067\u304d\u308b one-point bases \u3068\u3044\u3046\u306e\u3082\u5b58\u5728\u3059\u308b\u3002\n\n- $X = \u03bbx.((xS)K)$\n- $K = X(X (X X))$\n- $S = X(X (X (X X)))$\n\n\u3046\u308f\u3041\u3002\n\n\u4ed6\u306b\u3082\u7686\u5927\u597d\u304d\u306a Haskell Curry \u304c\u767a\u898b\u3057\u305f[\u547d\u984c\u8ad6\u7406\u3068\u5bfe\u5fdc](https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%83%BC%EF%BC%9D%E3%83%8F%E3%83%AF%E3%83%BC%E3%83%89%E5%90%8C%E5%9E%8B%E5%AF%BE%E5%BF%9C)\u3059\u308b [B,C,K,W \u30b7\u30b9\u30c6\u30e0](https://ja.wikipedia.org/wiki/B,C,K,W%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0)\u306a\u3093\u304b\u3082\u3042\u308a\u307e\u3059\u3002\n\n* * *\n\n## \u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\n\nY\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306f Haskell Curry \u304c\u767a\u898b\u3057\u305f\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u306e\u4e00\u7a2e\u3002\n\n- $Y = S (K (S I I)) (S (S (K S) K) (K (S I I)))$\n\n**\u578b\u7121\u3057\u30e9\u30e0\u30c0\u8a08\u7b97**\u306e[\u4e0d\u52d5\u70b9\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf](https://ja.wikipedia.org/wiki/%E4%B8%8D%E5%8B%95%E7%82%B9%E3%82%B3%E3%83%B3%E3%83%93%E3%83%8D%E3%83%BC%E3%82%BF)\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308a\u7121\u9650\u306b\u751f\u6210\u3067\u304d\u308b\u3002(\u5e30\u7d0d\u7684\u52a0\u7b97\u96c6\u5408)\n\n### \u8a00\u8a9e\u5b9f\u88c5\n\n[Lazy-K](https://ja.wikipedia.org/wiki/Lazy_K) SKI\n[Unlambda](https://ja.wikipedia.org/wiki/Unlambda) SK\n[Iota and Jot](https://en.wikipedia.org/wiki/Iota_and_Jot) X\n\n\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u5091\u4f5c\u3092 Haskell\u3067\u5b9f\u88c5\u3057\u3066\u305f\u3093\u3067\u3059\u304c\u6b8b\u5ff5\u306a\u304c\u3089 out of memory\u3002\n\n```fix.hs\nmain = do\n  print $ show ((\u4e0d\u52d5\u70b9 \u968e\u4e57) 5)\n\n\u51c4\u3044\u306e a b c d e f g h i j k l m n o p q s t u v w x y z r =\n  (r (t h i s i s a f i x e d p o i n t c o m b i n a t o r))\n\n\u4e0d\u52d5\u70b9 f = (\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e\n  \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e \u51c4\u3044\u306e)\n\n\u968e\u4e57 f 0 = 1\n\u968e\u4e57 f x = x * f (x - 1)\n```\n\n* * *\n\n"}