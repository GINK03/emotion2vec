{"context": "\n\n\u4ed5\u69d8\n\n\u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u3092\u4e2d\u5fc3\u306b\u56de\u8ee2\u3067\u304d\u308b(\u30de\u30a6\u30b9\u5de6\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u306a\u304c\u3089\u30c9\u30e9\u30c3\u30b0\u3067\u64cd\u4f5c)\n\u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3067\u304d\u308b(\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u64cd\u4f5c)\n\u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u304c\u79fb\u52d5\u3057\u3066\u3082\u8ffd\u5f93\u3059\u308b\n\n\n(C)Unity Technologies Japan/UCL\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\nusing UnityEngine;\n\n/// <summary>\n/// The camera added this script will follow the specified object.\n/// The camera can be moved by left mouse drag and mouse wheel.\n/// </summary>\n[ExecuteInEditMode, DisallowMultipleComponent]\npublic class FollowingCamera : MonoBehaviour\n{\n    public GameObject target; // an object to follow\n    public Vector3 offset; // offset form the target object\n\n    [SerializeField] private float distance = 4.0f; // distance from following object\n    [SerializeField] private float polarAngle = 45.0f; // angle with y-axis\n    [SerializeField] private float azimuthalAngle = 45.0f; // angle with x-axis\n\n    [SerializeField] private float minDistance = 1.0f;\n    [SerializeField] private float maxDistance = 7.0f;\n    [SerializeField] private float minPolarAngle = 5.0f;\n    [SerializeField] private float maxPolarAngle = 75.0f;\n    [SerializeField] private float mouseXSensitivity = 5.0f;\n    [SerializeField] private float mouseYSensitivity = 5.0f;\n    [SerializeField] private float scrollSensitivity = 5.0f;\n\n    void LateUpdate()\n    {\n        if (Input.GetMouseButton(0)) {\n            updateAngle(Input.GetAxis(\"Mouse X\"), Input.GetAxis(\"Mouse Y\"));\n        }\n        updateDistance(Input.GetAxis(\"Mouse ScrollWheel\"));\n\n        var lookAtPos = target.transform.position + offset;\n        updatePosition(lookAtPos);\n        transform.LookAt(lookAtPos);\n    }\n\n    void updateAngle(float x, float y)\n    {\n        x = azimuthalAngle - x * mouseXSensitivity;\n        azimuthalAngle = Mathf.Repeat(x, 360);\n\n        y = polarAngle + y * mouseYSensitivity;\n        polarAngle = Mathf.Clamp(y, minPolarAngle, maxPolarAngle);\n    }\n\n    void updateDistance(float scroll)\n    {\n        scroll = distance - scroll * scrollSensitivity;\n        distance = Mathf.Clamp(scroll, minDistance, maxDistance);\n    }\n\n    void updatePosition(Vector3 lookAtPos)\n    {\n        var da = azimuthalAngle * Mathf.Deg2Rad;\n        var dp = polarAngle * Mathf.Deg2Rad;\n        transform.position = new Vector3(\n            lookAtPos.x + distance * Mathf.Sin(dp) * Mathf.Cos(da),\n            lookAtPos.y + distance * Mathf.Cos(dp),\n            lookAtPos.z + distance * Mathf.Sin(dp) * Mathf.Sin(da));\n    }\n}\n\n\n\u89e3\u8aac\n\u52d5\u304b\u3057\u305f\u3044\u30ab\u30e1\u30e9\u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066target\u306b\u30ad\u30e3\u30e9\u3092\u6307\u5b9a\u3059\u308b\u3068\u52d5\u304f\u3002\u305d\u306e\u307e\u307e\u3060\u3068\u30ad\u30e3\u30e9\u306e\u8db3\u4e0b\u3092\u898b\u3066\u3057\u307e\u3046\u306e\u3067offset\u3067\u9069\u5f53\u306b\u305a\u3089\u3059\u3068\u826f\u3044\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u7403\u9762\u5ea7\u6a19\u3067\u691c\u7d22\u3059\u3079\u3057\u3002\u6570\u5f0f\u3092Unity\u3067\u5b9f\u88c5\u3059\u308b\u969b\u306f\u8ef8\u306e\u5bfe\u5fdc\u306b\u6ce8\u610f(Unity\u3067\u306fy\u8ef8\u304c\u4e0a\u65b9\u5411)\n# \u4ed5\u69d8\n- \u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u3092\u4e2d\u5fc3\u306b\u56de\u8ee2\u3067\u304d\u308b(\u30de\u30a6\u30b9\u5de6\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u306a\u304c\u3089\u30c9\u30e9\u30c3\u30b0\u3067\u64cd\u4f5c)\n- \u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3067\u304d\u308b(\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u64cd\u4f5c)\n- \u6307\u5b9a\u3057\u305f\u30ad\u30e3\u30e9\u304c\u79fb\u52d5\u3057\u3066\u3082\u8ffd\u5f93\u3059\u308b\n\n\n![aa4b4552a91194a0b09f35344ad6d2bd.gif](https://qiita-image-store.s3.amazonaws.com/0/31952/21789eef-a6bb-2b61-4bb1-86b8982b4179.gif)\n(C)Unity Technologies Japan/UCL\n\n\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n```csharp\nusing UnityEngine;\n\n/// <summary>\n/// The camera added this script will follow the specified object.\n/// The camera can be moved by left mouse drag and mouse wheel.\n/// </summary>\n[ExecuteInEditMode, DisallowMultipleComponent]\npublic class FollowingCamera : MonoBehaviour\n{\n    public GameObject target; // an object to follow\n    public Vector3 offset; // offset form the target object\n\n    [SerializeField] private float distance = 4.0f; // distance from following object\n    [SerializeField] private float polarAngle = 45.0f; // angle with y-axis\n    [SerializeField] private float azimuthalAngle = 45.0f; // angle with x-axis\n\n    [SerializeField] private float minDistance = 1.0f;\n    [SerializeField] private float maxDistance = 7.0f;\n    [SerializeField] private float minPolarAngle = 5.0f;\n    [SerializeField] private float maxPolarAngle = 75.0f;\n    [SerializeField] private float mouseXSensitivity = 5.0f;\n    [SerializeField] private float mouseYSensitivity = 5.0f;\n    [SerializeField] private float scrollSensitivity = 5.0f;\n\n    void LateUpdate()\n    {\n        if (Input.GetMouseButton(0)) {\n            updateAngle(Input.GetAxis(\"Mouse X\"), Input.GetAxis(\"Mouse Y\"));\n        }\n        updateDistance(Input.GetAxis(\"Mouse ScrollWheel\"));\n\n        var lookAtPos = target.transform.position + offset;\n        updatePosition(lookAtPos);\n        transform.LookAt(lookAtPos);\n    }\n\n    void updateAngle(float x, float y)\n    {\n        x = azimuthalAngle - x * mouseXSensitivity;\n        azimuthalAngle = Mathf.Repeat(x, 360);\n\n        y = polarAngle + y * mouseYSensitivity;\n        polarAngle = Mathf.Clamp(y, minPolarAngle, maxPolarAngle);\n    }\n\n    void updateDistance(float scroll)\n    {\n        scroll = distance - scroll * scrollSensitivity;\n        distance = Mathf.Clamp(scroll, minDistance, maxDistance);\n    }\n\n    void updatePosition(Vector3 lookAtPos)\n    {\n        var da = azimuthalAngle * Mathf.Deg2Rad;\n        var dp = polarAngle * Mathf.Deg2Rad;\n        transform.position = new Vector3(\n            lookAtPos.x + distance * Mathf.Sin(dp) * Mathf.Cos(da),\n            lookAtPos.y + distance * Mathf.Cos(dp),\n            lookAtPos.z + distance * Mathf.Sin(dp) * Mathf.Sin(da));\n    }\n}\n```\n\n\n\n# \u89e3\u8aac\n\u52d5\u304b\u3057\u305f\u3044\u30ab\u30e1\u30e9\u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066target\u306b\u30ad\u30e3\u30e9\u3092\u6307\u5b9a\u3059\u308b\u3068\u52d5\u304f\u3002\u305d\u306e\u307e\u307e\u3060\u3068\u30ad\u30e3\u30e9\u306e\u8db3\u4e0b\u3092\u898b\u3066\u3057\u307e\u3046\u306e\u3067offset\u3067\u9069\u5f53\u306b\u305a\u3089\u3059\u3068\u826f\u3044\u3002\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f[\u7403\u9762\u5ea7\u6a19](https://ja.wikipedia.org/wiki/%E7%90%83%E9%9D%A2%E5%BA%A7%E6%A8%99%E7%B3%BB)\u3067\u691c\u7d22\u3059\u3079\u3057\u3002\u6570\u5f0f\u3092Unity\u3067\u5b9f\u88c5\u3059\u308b\u969b\u306f\u8ef8\u306e\u5bfe\u5fdc\u306b\u6ce8\u610f(Unity\u3067\u306fy\u8ef8\u304c\u4e0a\u65b9\u5411)\n", "tags": ["Unity", "Unity3D", "C#"]}