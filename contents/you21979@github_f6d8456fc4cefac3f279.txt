{"context": "\n\nbitcoinjs-lib hdwallet\n\n\u968e\u5c64\u7684\u6c7a\u5b9a\u6027\u30a6\u30a9\u30ec\u30c3\u30c8\n\n\ninstall\nnpm i bip39 bitcoinjs-lib\n\n\nmnemonic generate\n\n12 word\nconst mnemonic = bip39.generateMnemonic();\n\n\n24 word\nconst mnemonic = bip39.generateMnemonic(256);\n\n\nmnemonic to masternode\nconst mnemonicToM = (mnemonic, password, network) => {\n    const seed = bip39.mnemonicToSeed(mnemonic, password || \"\")\n    const m = bitcoin.HDNode.fromSeedBuffer(seed, bitcoin.networks[network || \"bitcoin\"])\n    return m\n}\n\n\nextended private key\nm.deriveHardened(44).deriveHardened(0).deriveHardened(0).toBase58()\n\nm.derivePath(\"m/44'/0'/0'\").toBase58()\n\n\nextended public key\nm.deriveHardened(44).deriveHardened(0).deriveHardened(0).neutered().toBase58()\n\nm.derivePath(\"m/44'/0'/0'\").neutered().toBase58()\n\n\nbitcoin address\n\naddress\nm.derivePath(\"m/44'/0'/0'/0/0\").getAddress()\n\n\nprivate key\nm.derivePath(\"m/44'/0'/0'/0/0\").keyPair.toWIF()\n\n\n\u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3057\u3066\u307f\u308b\nconst bitcoin = require(\"bitcoinjs-lib\")\nconst bip39 = require(\"bip39\")\n\nconst mnemonicToM = (mnemonic, password, network) => {\n    const seed = bip39.mnemonicToSeed(mnemonic, password || \"\")\n    const m = bitcoin.HDNode.fromSeedBuffer(seed, bitcoin.networks[network || \"bitcoin\"])\n    return m\n}\n\nconst mnemonic = bip39.generateMnemonic();\nconst m = mnemonicToM(mnemonic, '', 'bitcoin')\nconsole.log(mnemonic)\nconsole.log(m.derivePath(\"m/44'/0'/0'\").toBase58())\nconsole.log(m.derivePath(\"m/44'/0'/0'\").neutered().toBase58())\nconsole.log(m.derivePath(\"m/44'/0'/0'/0/0\").getAddress())\n\n# bitcoinjs-lib hdwallet\n\n* \u968e\u5c64\u7684\u6c7a\u5b9a\u6027\u30a6\u30a9\u30ec\u30c3\u30c8\n\n# install\n\n```\nnpm i bip39 bitcoinjs-lib\n```\n\n# mnemonic generate\n\n## 12 word\n\n```\nconst mnemonic = bip39.generateMnemonic();\n```\n\n## 24 word\n\n```\nconst mnemonic = bip39.generateMnemonic(256);\n```\n\n# mnemonic to masternode\n\n```\nconst mnemonicToM = (mnemonic, password, network) => {\n    const seed = bip39.mnemonicToSeed(mnemonic, password || \"\")\n    const m = bitcoin.HDNode.fromSeedBuffer(seed, bitcoin.networks[network || \"bitcoin\"])\n    return m\n}\n```\n\n# extended private key\n\n```\nm.deriveHardened(44).deriveHardened(0).deriveHardened(0).toBase58()\n```\n\n```\nm.derivePath(\"m/44'/0'/0'\").toBase58()\n```\n\n# extended public key\n\n```\nm.deriveHardened(44).deriveHardened(0).deriveHardened(0).neutered().toBase58()\n```\n\n```\nm.derivePath(\"m/44'/0'/0'\").neutered().toBase58()\n```\n\n# bitcoin address\n\n## address\n\n```\nm.derivePath(\"m/44'/0'/0'/0/0\").getAddress()\n```\n\n## private key\n\n```\nm.derivePath(\"m/44'/0'/0'/0/0\").keyPair.toWIF()\n```\n\n\n# \u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3057\u3066\u307f\u308b\n\n\n```\nconst bitcoin = require(\"bitcoinjs-lib\")\nconst bip39 = require(\"bip39\")\n\nconst mnemonicToM = (mnemonic, password, network) => {\n    const seed = bip39.mnemonicToSeed(mnemonic, password || \"\")\n    const m = bitcoin.HDNode.fromSeedBuffer(seed, bitcoin.networks[network || \"bitcoin\"])\n    return m\n}\n\nconst mnemonic = bip39.generateMnemonic();\nconst m = mnemonicToM(mnemonic, '', 'bitcoin')\nconsole.log(mnemonic)\nconsole.log(m.derivePath(\"m/44'/0'/0'\").toBase58())\nconsole.log(m.derivePath(\"m/44'/0'/0'\").neutered().toBase58())\nconsole.log(m.derivePath(\"m/44'/0'/0'/0/0\").getAddress())\n```\n", "tags": ["Bitcoin", "hdwallet", "BIP44", "JavaScript"]}