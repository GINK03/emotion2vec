{"context": " More than 1 year has passed since last update.\u8d77\u52d5\u3059\u308bEC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u3092\u76e3\u8996\u3059\u308b\u5834\u5408\u3001\u5b9a\u671f\u7684\u306bEC2\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u306a\u3069\u3092cron\u3067\u8a2d\u5b9a\u3059\u308c\u3070\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b5\u30fc\u30d0\u30fc\u7ba1\u7406\u304c\u3057\u305f\u304f\u306a\u3044\u306e\u3067Lambda\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u3067EC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u3092\u76e3\u8996\u3057\u3066\u307f\u307e\u3059\u3002\n\u672c\u4f8b\u3067\u306fEC2\u306e\u8d77\u52d5\u3092CloudTrail\u3067\u691c\u77e5\u3057\u3001Lambda\u3092\u5b9f\u884c\u3057\u3066EC2\u306e\u8d77\u52d5\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u304ct2.micro\u4ee5\u5916\u3060\u3063\u305f\u6642\u306b\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u3088\u3046\u306b\u3057\u307e\u3059\n\n\u51e6\u7406\u306e\u6d41\u308c\n\nCloudTrail(AWS\u64cd\u4f5c\u306e\u30ed\u30b0\u76e3\u8996)\nCloudWatch,CloudWatchLogs(CloudTrail\u306e\u30ed\u30b0\u3092\u4fdd\u5b58\u3002EC2\u8d77\u52d5\u306e\u30a4\u30d9\u30f3\u30c8\u300cRunInstances\u300d\u306e\u5834\u5408\u306bSNS\u3078\u901a\u77e5\u3059\u308b\u30a2\u30e9\u30fc\u30e0\u3092\u8a2d\u5b9a)\nSNS(\u30a2\u30e9\u30fc\u30e0\u3092\u53d7\u3051\u3066Lambda\u3092\u5b9f\u884c)\nLambda(\u73fe\u5728\u8d77\u52d5\u3057\u3066\u3044\u308bEC2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001t2.micro\u306e\u3082\u306e\u304c\u3042\u308b\u5834\u5408\u306bSNS\u3078\u901a\u77e5)\nSNS(Lambda\u304b\u3089\u306e\u5b9f\u884c\u306b\u3088\u308a\u30e1\u30fc\u30eb\u3092\u9001\u4fe1)\n\n\n\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3059\u308bSNS\u306e\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\nLambda\u304b\u3089\u30e1\u30fc\u30eb\u3092\u9001\u308b\u305f\u3081\u306eSNS\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nTopicName\u306f\u4efb\u610f\u3067\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306fMonitorEC2InstanceType\u3068\u3044\u3046\u540d\u524d\u3067\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u4f5c\u6210\u3057\u305f\u30c8\u30d4\u30c3\u30af\u3078\u306e\u901a\u77e5\u6642\u306b\u30e1\u30fc\u30eb\u304c\u9001\u4fe1\u3055\u308c\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305f\u30c8\u30d4\u30c3\u30af\u3092\u9078\u629e\u3057\n\nAction->Subscribe to topic\n\n\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\nProtocol\u3067Email\u3092\u9078\u629e\u3057\u3001Endpoint\u3067\u901a\u77e5\u3057\u305f\u3044\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3057\u307e\u3059\u3002Create Subscription\u306b\u3088\u3063\u3066\u767b\u9332\u3057\u305f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u78ba\u8a8d\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u306e\u3067\u5230\u7740\u3057\u305f\u30e1\u30fc\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u767b\u9332\u78ba\u8a8d\u304c\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\nLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u5b9f\u884c\u7528\u306e\u30ed\u30fc\u30eb\u306e\u4f5c\u6210\n\u4eca\u56de\u306e\u4f8b\u3067\u306fLambda\u304b\u3089\u4ee5\u4e0b\u306eAWS\u30ea\u30bd\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\nCloudWatchLogs(Lambda\u306e\u30ed\u30b0\u4fdd\u5b58)\nEC2(EC2\u30ea\u30b9\u30c8\u306e\u53d6\u5f97)\nSNS(\u30c8\u30d4\u30c3\u30af\u3078\u306epublish)\n\n\u4e0a\u8a18\u3088\u308a\u3001\u4e8b\u524d\u306bIAM\u3088\u308a\u3001\u4e0a\u8a18\u3078\u306e\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306aLambda\u7528\u306e\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308bLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u79c1\u306e\u4f5c\u6210\u3057\u305f\u3082\u306e\u306fGithub\u306b\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002Gradle\u306b\u3088\u3063\u3066\u30d3\u30eb\u30c9\u304c\u53ef\u80fd\u3067\u3059\u3002\u306a\u304a\u3001\u901a\u77e5\u3059\u308bSNS\u3092\u793a\u3059\u300cprivate static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\u300d\u3068\u3044\u3046\u7b87\u6240\u306f\u9069\u5b9c\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30e1\u30fc\u30eb\u9001\u4fe1\u7528\u306eSNS\u306eARN\u306b\u8a2d\u5b9a\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nMonitorEc2InstanceType\n\u51e6\u7406\u6982\u8981\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nSNS\u306e\u901a\u77e5\u3092\u53d7\u3051\u308b\nEC2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001t2.micro\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308b\u304b\u78ba\u8a8d\nt2.micro\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308b\u5834\u5408\u306bSNS\u3078\u901a\u77e5\n\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\n\nLambdaFunctionHandler.class\npackage com.sample.lambda;\n\nimport java.util.List;\n\nimport com.amazonaws.services.ec2.model.Instance;\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\nimport com.amazonaws.util.json.JSONException;\n\npublic class LambdaFunctionHandler implements RequestHandler<SNSEvent, Object> {\n\n    private static final String ACCEPTABLE_INSTANCE_TYPE = \"t2.micro\";\n    private static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\n\n    @Override\n    public Object handleRequest(SNSEvent input, Context context) {\n        LambdaLogger logger = context.getLogger();\n        logger.log(\"start\");\n        try {\n\n            logger.log(\"Input(json): \" + input.toString());\n\n            List<Instance> instances = Util.getInvalidEc2ist(ACCEPTABLE_INSTANCE_TYPE);\n\n            if(instances == null || instances.isEmpty()) {\n                logger.log(\"don't exist invalid EC2 instance type.(EC2(\" \n            + ACCEPTABLE_INSTANCE_TYPE + \") is acceptable.\");\n                return \"\";\n            }\n\n            List<String> messageIds = Util.publish(instances, TOPIC_ARN);\n\n            if(messageIds == null || messageIds.isEmpty()) {\n                logger.log(\"cloud not publish SNS\");\n                return \"\";\n            }\n\n            for( String messageId: messageIds) {\n                logger.log(\"messageId is \" + messageId);\n            }\n        } catch (JSONException e) {\n            logger.log(e.getMessage());\n            throw new RuntimeException(e);\n        }\n\n        logger.log(\"end\");\n\n        return \"OK\";\n    }\n}\n\n\n\nUtil.java\npackage com.sample.lambda;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.amazonaws.regions.Region;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.ec2.AmazonEC2Client;\nimport com.amazonaws.services.ec2.model.DescribeInstancesResult;\nimport com.amazonaws.services.ec2.model.Instance;\nimport com.amazonaws.services.ec2.model.Reservation;\nimport com.amazonaws.services.sns.AmazonSNSClient;\nimport com.amazonaws.services.sns.model.PublishResult;\nimport com.amazonaws.util.json.JSONException;\n\npublic class Util {\n\n    public static List<Instance> getInvalidEc2ist(String instanceType) throws JSONException {\n        List<Instance> instances = new ArrayList<Instance>();\n\n        AmazonEC2Client ec2 = new AmazonEC2Client();\n        ec2.setRegion(Region.getRegion(Regions.AP_NORTHEAST_1));\n        DescribeInstancesResult result = ec2.describeInstances();\n\n        for(Reservation reservation : result.getReservations()) {\n          for(Instance instance : reservation.getInstances()) {\n              if (!(instance.getInstanceType().equals(instanceType))) {\n                  instances.add(instance);\n              }\n          }\n        }\n        return instances;\n    }\n\n    public static List<String> publish(List<Instance> instances, String topicArn) throws JSONException {\n        List<String> messageIds = new ArrayList<String>();\n\n        AmazonSNSClient sns = new AmazonSNSClient();\n        Region northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n        sns.setRegion(northEast1);\n\n        for (Instance instance: instances) {\n            PublishResult result = sns.publish(topicArn,\n                    \"invalid EC2 instance type launched.Instance id = \" \n            + instance.getInstanceId() + \", Instance Type = \" + instance.getInstanceType());\n            messageIds.add(result.getMessageId());\n        }\n        return messageIds;\n    }\n\n}\n\n\n$gradle build\u3068\u3059\u308b\u3068build/libs/MonitorEc2InstanceType-0.0.1-SNAPSHOT.jar\u3068\u3044\u3046jar\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092Lambda\u306eFunction\u3068\u3057\u3066\u767b\u9332\u3057\u307e\u3059\u3002\u767b\u9332\u3059\u308b\u969b\u306eHandler\u306b\u306fcom.sample.lambda.LambdaFunctionHandler::handleRequest\u3068\u3044\u3046\u5f62\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u7528\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u4e0e\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nLambda\u3092\u5b9f\u884c\u3059\u308bSNS\u306e\u30c8\u30d4\u30c3\u30af\u306e\u4f5c\u6210\n\u5148\u307b\u3069\u3068\u540c\u3058\u8981\u9818\u3067SNS\u304b\u3089Lambda\u3092\u5b9f\u884c\u3059\u308b\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3084\u308a\u65b9\u306f\u540c\u3058\u3067\u3059\u304c\u3001Protocol\u306e\u9078\u629e\u306e\u969b\u306bAWS Lambda\u3092\u9078\u629e\u3057\u3001Endpoint\u3067\u306f\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\nCloudTrail\u306e\u6709\u52b9\u5316\u3001CloudWatchLogs\u3068\u306e\u9023\u643a\nCloudTrail\u3092\u6709\u52b9\u5316\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u6709\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001CloudWatchLogs\u3068\u306e\u9023\u643a\u3092\u6709\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nCloudWatch,CloudWatchLogs\u306e\u8a2d\u5b9a\nCloudTrail\u3067\u6307\u5b9a\u3057\u305fCloudWatchLogs\u306eLogGroup\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u6b21\u306bEC2\u8d77\u52d5\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nCloudWatchLogs\u3068\u9023\u643a\u3057\u3066\u3044\u308bLogGroup\u306e0filters\u3068\u306a\u3063\u3066\u3044\u308b\u6240\u3092\u9078\u629e\u3057\u3001Add Metric Filtter\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\nTestPattern\u306b\u306f{ $.eventName = \"RunInstances\" }\u3068\u5165\u529b\u3059\u308b\u3053\u3068\u3067EC2\u306e\u8d77\u52d5\u3092\u793a\u3059\u30a4\u30d9\u30f3\u30c8\u306eRunInstances\u306e\u307f\u3092\u30d5\u30a3\u30eb\u30bf\u3067\u304d\u307e\u3059\u3002\n\u4f5c\u6210\u5f8c\u3001\u4e0a\u8a18\u30d5\u30a3\u30eb\u30bf\u767a\u751f\u6642\u306bSNS\u3078\u901a\u77e5\u3092\u3059\u308b\u3088\u3046\u306b\u30a2\u30e9\u30fc\u30e0(Lambda\u3092\u5b9f\u884c\u3059\u308b\u3082\u306e)\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nLogGroup\u3092\u518d\u5ea6\u78ba\u8a8d\u3059\u308b\u30680filters\u304c1filters\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u9078\u629e\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306eCreate Alarm\u3092\u9078\u629e\u3057\u3066\u30a2\u30e9\u30fc\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u3067\u306f5\u5206\u3054\u3068\u306b1\u56de\u4ee5\u4e0aRunInstace\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u5834\u5408\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u3092\u547c\u3073\u51fa\u3059SNS\u3092\u547c\u3073\u51fa\u3059\u8a2d\u5b9a\u3068\u3057\u307e\u3057\u305f\u3002\n\n\u78ba\u8a8d\n\u3053\u308c\u3067\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u6b63\u3057\u304f\u8a2d\u5b9a\u304c\u51fa\u6765\u3066\u3044\u308c\u3070t2.micro\u4ee5\u5916\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8d77\u52d5\u3055\u308c\u3001CloudTrailLog\u306b\u3088\u3063\u3066RunInstance\u304c\u8a18\u9332\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067Lambda\u304c\u5b9f\u884c\u3055\u308c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30e9\u30fc\u30e0\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u304b\u3068\u601d\u3044\u307e\u3059\u3002(CloudTrail\u306e\u30ed\u30b0\u66f8\u304d\u8fbc\u307f\u306f\u5373\u6642\u3067\u306f\u306a\u3044\u306e\u3067\u6700\u59275\u5206\u7a0b\u5ea6\u5f85\u3064\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ninvalid EC2 instance type launched.Instance id = i-a615db54, Instance Type = t2.small\n\n\n\u304a\u307e\u3051\nCloudWatchLogs\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3063\u3066EC2\u306e\u8d77\u52d5\u6642\u3060\u3051Lambda\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u524d\u306bCloudTrail\u304cS3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u6642\u70b9\u3067\u90fd\u5ea6\u305d\u306e\u30ed\u30b0\u3092\u89e3\u6790\u3057\u3001SNS\u901a\u77e5\u3059\u308b\u3082\u306e\u3082\u4e8b\u524d\u306b\u4f5c\u3063\u305f\u306e\u3067\u8f09\u305b\u307e\u3059\u3002\u306a\u304a\u3001\u3053\u308c\u3060\u3068CloudTrail\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306e\u90fd\u5ea6\u3001Lambda\u304c\u5b9f\u884c\u3055\u308c\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3082\u5897\u3048\u308b\u306e\u3067\u3042\u3093\u307e\u3088\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3002\u3002\n\nLambdaFunctionHandler.class\npackage com.sample.lambda;\n\nimport java.io.IOException;\nimport java.net.URLDecoder;\nimport java.util.List;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\nimport com.amazonaws.services.s3.event.S3EventNotification.S3EventNotificationRecord;\nimport com.amazonaws.util.json.JSONException;\nimport com.amazonaws.util.json.JSONObject;\n\npublic class LambdaFunctionHandler implements RequestHandler<S3Event, Object> {\n\n    private static final String ACCEPTABLE_INSTANCE_TYPE = \"t2.micro\";\n    private static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\n\n    @Override\n    public Object handleRequest(S3Event s3event, Context context) {\n        LambdaLogger logger = context.getLogger();\n        logger.log(\"start\");\n        try { \n\n            logger.log(\"Input(json): \" + s3event.toJson());\n\n            S3EventNotificationRecord record = s3event.getRecords().get(0);\n            String srcBucket = record.getS3().getBucket().getName();\n            String srcKey = record.getS3().getObject().getKey()\n                .replace('+', ' ');\n            srcKey = URLDecoder.decode(srcKey, \"UTF-8\");\n\n            logger.log(\"srcBucket = \" + srcBucket + \", srcKey = \" + srcKey);\n\n            JSONObject cloudTrailLog = Util.getCloudTrailLog(srcBucket, srcKey);\n\n            if(cloudTrailLog == null) {\n                logger.log(\"cloudTrailLog is null\");\n                return \"\";\n            }\n\n            logger.log(\"get cloudtrail log\");\n            List<JSONObject> items = Util.getEc2ist(cloudTrailLog,\n                    ACCEPTABLE_INSTANCE_TYPE);\n\n            if(items == null || items.isEmpty()) {\n                logger.log(\"don't exsits invalid EC2\");\n                return \"\";\n            }\n\n            List<String> messageIds = Util.publish(items, TOPIC_ARN);\n\n            if(messageIds == null || messageIds.isEmpty()) {\n                logger.log(\"cloud not publish SNS\");\n                return \"\";\n            }\n\n            for( String messageId: messageIds) {\n                logger.log(\"messageId is \" + messageId);\n            }\n\n        } catch (IOException e) {\n            logger.log(e.getMessage());\n            throw new RuntimeException(e);\n        } catch (JSONException e) {\n            logger.log(e.getMessage());\n            throw new RuntimeException(e);\n        }\n        return \"OK\";\n    }\n}\n\n\n\nUtil.java\npackage com.sample.lambda;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.GZIPInputStream;\n\nimport com.amazonaws.regions.Region;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3Client;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.amazonaws.services.sns.AmazonSNSClient;\nimport com.amazonaws.services.sns.model.PublishResult;\nimport com.amazonaws.util.json.JSONArray;\nimport com.amazonaws.util.json.JSONException;\nimport com.amazonaws.util.json.JSONObject;\n\npublic class Util {\n\n    public static JSONObject getCloudTrailLog(String bucket, String key) throws IOException, JSONException {\n        JSONObject cloudTraillog = null;\n\n        AmazonS3Client s3 = new AmazonS3Client();\n        Region northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n        s3.setRegion(northEast1);\n\n        S3Object object = null;\n        object = s3.getObject(bucket, key);\n\n        if(object == null) return cloudTraillog;\n\n        GZIPInputStream gzipInputStream = null;\n\n        try {\n            gzipInputStream = new GZIPInputStream(object.getObjectContent());\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            for (;;) {\n                int iRead = gzipInputStream.read();\n                if (iRead < 0) break;\n                outputStream.write(iRead);\n            }\n            outputStream.flush();\n            outputStream.close();\n            cloudTraillog = new JSONObject(new String(outputStream.toByteArray()));\n        } finally {\n            if (gzipInputStream != null) {\n                gzipInputStream.close();\n\n            }\n        }\n        return cloudTraillog;\n    }\n\n    public static List<JSONObject> getEc2ist(JSONObject cloudTrailLog, String instanceType) throws JSONException {\n        List<JSONObject> instanceIds = new ArrayList<JSONObject>();\n\n        JSONArray records = cloudTrailLog.getJSONArray(\"Records\");\n\n        for(int i = 0;i < records.length(); i++) {\n          JSONObject record = records.getJSONObject(i);\n          if (record.getString(\"eventName\").equals(\"RunInstances\") \n                  && record.has(\"responseElements\")) {\n            JSONObject item = record.getJSONObject(\"responseElements\")\n                    .getJSONObject(\"instancesSet\").getJSONArray(\"items\").getJSONObject(0);\n            if (!(item.getString(\"instanceType\").equals(instanceType))) {\n                instanceIds.add(item);\n            }\n          }\n        }\n        return instanceIds;\n    }\n\n    public static List<String> publish(List<JSONObject> items, String topicArn) throws JSONException {\n        List<String> messageIds = new ArrayList<String>();\n\n        AmazonSNSClient sns = new AmazonSNSClient();\n        Region northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n        sns.setRegion(northEast1);\n\n        for (JSONObject item: items) {\n            PublishResult result = sns.publish(topicArn,\n                    \"invalid EC2 instance type launched.Instance id = \" \n            + item.getString(\"instanceId\") + \", Instance Type = \" + item.getString(\"instanceType\"));\n            messageIds.add(result.getMessageId());\n        }\n        return messageIds;\n    }\n\n}\n\n\n\u8d77\u52d5\u3059\u308bEC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u3092\u76e3\u8996\u3059\u308b\u5834\u5408\u3001\u5b9a\u671f\u7684\u306bEC2\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u306a\u3069\u3092cron\u3067\u8a2d\u5b9a\u3059\u308c\u3070\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30b5\u30fc\u30d0\u30fc\u7ba1\u7406\u304c\u3057\u305f\u304f\u306a\u3044\u306e\u3067Lambda\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u3067EC2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u3092\u76e3\u8996\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u672c\u4f8b\u3067\u306fEC2\u306e\u8d77\u52d5\u3092CloudTrail\u3067\u691c\u77e5\u3057\u3001Lambda\u3092\u5b9f\u884c\u3057\u3066EC2\u306e\u8d77\u52d5\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7\u304ct2.micro\u4ee5\u5916\u3060\u3063\u305f\u6642\u306b\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u3088\u3046\u306b\u3057\u307e\u3059\n\n# \u51e6\u7406\u306e\u6d41\u308c\n\n+ CloudTrail(AWS\u64cd\u4f5c\u306e\u30ed\u30b0\u76e3\u8996)\n+ CloudWatch,CloudWatchLogs(CloudTrail\u306e\u30ed\u30b0\u3092\u4fdd\u5b58\u3002EC2\u8d77\u52d5\u306e\u30a4\u30d9\u30f3\u30c8\u300cRunInstances\u300d\u306e\u5834\u5408\u306bSNS\u3078\u901a\u77e5\u3059\u308b\u30a2\u30e9\u30fc\u30e0\u3092\u8a2d\u5b9a)\n+ SNS(\u30a2\u30e9\u30fc\u30e0\u3092\u53d7\u3051\u3066Lambda\u3092\u5b9f\u884c)\n+ Lambda(\u73fe\u5728\u8d77\u52d5\u3057\u3066\u3044\u308bEC2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001t2.micro\u306e\u3082\u306e\u304c\u3042\u308b\u5834\u5408\u306bSNS\u3078\u901a\u77e5)\n+ SNS(Lambda\u304b\u3089\u306e\u5b9f\u884c\u306b\u3088\u308a\u30e1\u30fc\u30eb\u3092\u9001\u4fe1)\n\n# \u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3059\u308bSNS\u306e\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\n\nLambda\u304b\u3089\u30e1\u30fc\u30eb\u3092\u9001\u308b\u305f\u3081\u306eSNS\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nTopicName\u306f\u4efb\u610f\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f**MonitorEC2InstanceType**\u3068\u3044\u3046\u540d\u524d\u3067\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n![Screen Shot 2015-07-05 at 8.14.42 AM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/1649a81c-815b-7c49-0590-b109d5839bb1.png \"Screen Shot 2015-07-05 at 8.14.42 AM.png\")\n\n\n\u6b21\u306b\u4f5c\u6210\u3057\u305f\u30c8\u30d4\u30c3\u30af\u3078\u306e\u901a\u77e5\u6642\u306b\u30e1\u30fc\u30eb\u304c\u9001\u4fe1\u3055\u308c\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305f\u30c8\u30d4\u30c3\u30af\u3092\u9078\u629e\u3057\n\n+ Action->Subscribe to topic\n\n\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n![Screen Shot 2015-07-05 at 6.28.05 PM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/18eb55b7-d93e-2eb7-6af9-c02ce54549d7.png \"Screen Shot 2015-07-05 at 6.28.05 PM.png\")\n\nProtocol\u3067**Email**\u3092\u9078\u629e\u3057\u3001Endpoint\u3067\u901a\u77e5\u3057\u305f\u3044\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3057\u307e\u3059\u3002Create Subscription\u306b\u3088\u3063\u3066\u767b\u9332\u3057\u305f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306b\u78ba\u8a8d\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u306e\u3067\u5230\u7740\u3057\u305f\u30e1\u30fc\u30eb\u306b\u8a18\u8f09\u3055\u308c\u305f\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u767b\u9332\u78ba\u8a8d\u304c\u5b8c\u4e86\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n# Lambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u5b9f\u884c\u7528\u306e\u30ed\u30fc\u30eb\u306e\u4f5c\u6210\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306fLambda\u304b\u3089\u4ee5\u4e0b\u306eAWS\u30ea\u30bd\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\n+ CloudWatchLogs(Lambda\u306e\u30ed\u30b0\u4fdd\u5b58)\n+ EC2(EC2\u30ea\u30b9\u30c8\u306e\u53d6\u5f97)\n+ SNS(\u30c8\u30d4\u30c3\u30af\u3078\u306epublish)\n\n\u4e0a\u8a18\u3088\u308a\u3001\u4e8b\u524d\u306bIAM\u3088\u308a\u3001\u4e0a\u8a18\u3078\u306e\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306aLambda\u7528\u306e\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# Lambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\n\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308bLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u79c1\u306e\u4f5c\u6210\u3057\u305f\u3082\u306e\u306fGithub\u306b\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002Gradle\u306b\u3088\u3063\u3066\u30d3\u30eb\u30c9\u304c\u53ef\u80fd\u3067\u3059\u3002\u306a\u304a\u3001\u901a\u77e5\u3059\u308bSNS\u3092\u793a\u3059\u300cprivate static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\u300d\u3068\u3044\u3046\u7b87\u6240\u306f\u9069\u5b9c\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30e1\u30fc\u30eb\u9001\u4fe1\u7528\u306eSNS\u306eARN\u306b\u8a2d\u5b9a\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[MonitorEc2InstanceType](https://github.com/toshihirock/MonitorEc2InstanceType)\n\n\u51e6\u7406\u6982\u8981\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n+ SNS\u306e\u901a\u77e5\u3092\u53d7\u3051\u308b\n+ EC2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001t2.micro\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308b\u304b\u78ba\u8a8d\n+ t2.micro\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308b\u5834\u5408\u306bSNS\u3078\u901a\u77e5\n\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\n\n```lang:LambdaFunctionHandler.class\npackage com.sample.lambda;\n\nimport java.util.List;\n\nimport com.amazonaws.services.ec2.model.Instance;\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\nimport com.amazonaws.util.json.JSONException;\n\npublic class LambdaFunctionHandler implements RequestHandler<SNSEvent, Object> {\n\t\n\tprivate static final String ACCEPTABLE_INSTANCE_TYPE = \"t2.micro\";\n\tprivate static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\n\n\t@Override\n\tpublic Object handleRequest(SNSEvent input, Context context) {\n    \tLambdaLogger logger = context.getLogger();\n   \t\tlogger.log(\"start\");\n   \t\ttry {\n\n   \t\t\tlogger.log(\"Input(json): \" + input.toString());\n    \t\n   \t\t\tList<Instance> instances = Util.getInvalidEc2ist(ACCEPTABLE_INSTANCE_TYPE);\n   \t\t\t\n   \t\t\tif(instances == null || instances.isEmpty()) {\n   \t\t\t\tlogger.log(\"don't exist invalid EC2 instance type.(EC2(\" \n   \t\t\t+ ACCEPTABLE_INSTANCE_TYPE + \") is acceptable.\");\n   \t\t\t\treturn \"\";\n   \t\t\t}\n\n  \t\t\tList<String> messageIds = Util.publish(instances, TOPIC_ARN);\n\n    \t\tif(messageIds == null || messageIds.isEmpty()) {\n    \t\t\tlogger.log(\"cloud not publish SNS\");\n    \t\t\treturn \"\";\n    \t\t}\n\n    \t\tfor( String messageId: messageIds) {\n    \t\t\tlogger.log(\"messageId is \" + messageId);\n    \t\t}\n   \t\t} catch (JSONException e) {\n    \t\tlogger.log(e.getMessage());\n            throw new RuntimeException(e);\n\t\t}\n\n   \t\tlogger.log(\"end\");\n    \t\n    \treturn \"OK\";\n\t}\n}\n```\n\n```lang:Util.java\npackage com.sample.lambda;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.amazonaws.regions.Region;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.ec2.AmazonEC2Client;\nimport com.amazonaws.services.ec2.model.DescribeInstancesResult;\nimport com.amazonaws.services.ec2.model.Instance;\nimport com.amazonaws.services.ec2.model.Reservation;\nimport com.amazonaws.services.sns.AmazonSNSClient;\nimport com.amazonaws.services.sns.model.PublishResult;\nimport com.amazonaws.util.json.JSONException;\n\npublic class Util {\n    \n    public static List<Instance> getInvalidEc2ist(String instanceType) throws JSONException {\n    \tList<Instance> instances = new ArrayList<Instance>();\n\n    \tAmazonEC2Client ec2 = new AmazonEC2Client();\n    \tec2.setRegion(Region.getRegion(Regions.AP_NORTHEAST_1));\n    \tDescribeInstancesResult result = ec2.describeInstances();\n\n    \tfor(Reservation reservation : result.getReservations()) {\n    \t  for(Instance instance : reservation.getInstances()) {\n    \t\t  if (!(instance.getInstanceType().equals(instanceType))) {\n    \t\t\t  instances.add(instance);\n    \t\t  }\n    \t  }\n    \t}\n    \treturn instances;\n    }\n    \n    public static List<String> publish(List<Instance> instances, String topicArn) throws JSONException {\n    \tList<String> messageIds = new ArrayList<String>();\n    \t\n    \tAmazonSNSClient sns = new AmazonSNSClient();\n    \tRegion northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n    \tsns.setRegion(northEast1);\n    \t\n    \tfor (Instance instance: instances) {\n    \t\tPublishResult result = sns.publish(topicArn,\n    \t\t\t\t\"invalid EC2 instance type launched.Instance id = \" \n    \t\t+ instance.getInstanceId() + \", Instance Type = \" + instance.getInstanceType());\n    \t\tmessageIds.add(result.getMessageId());\n    \t}\n    \treturn messageIds;\n    }\n\n}\n```\n\n`$gradle build`\u3068\u3059\u308b\u3068**build/libs/MonitorEc2InstanceType-0.0.1-SNAPSHOT.jar**\u3068\u3044\u3046jar\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092Lambda\u306eFunction\u3068\u3057\u3066\u767b\u9332\u3057\u307e\u3059\u3002\u767b\u9332\u3059\u308b\u969b\u306eHandler\u306b\u306f**com.sample.lambda.LambdaFunctionHandler::handleRequest**\u3068\u3044\u3046\u5f62\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u7528\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u4e0e\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# Lambda\u3092\u5b9f\u884c\u3059\u308bSNS\u306e\u30c8\u30d4\u30c3\u30af\u306e\u4f5c\u6210\n\n\u5148\u307b\u3069\u3068\u540c\u3058\u8981\u9818\u3067SNS\u304b\u3089Lambda\u3092\u5b9f\u884c\u3059\u308b\u30c8\u30d4\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u3084\u308a\u65b9\u306f\u540c\u3058\u3067\u3059\u304c\u3001Protocol\u306e\u9078\u629e\u306e\u969b\u306bAWS Lambda\u3092\u9078\u629e\u3057\u3001Endpoint\u3067\u306f\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u9078\u629e\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n![Screen Shot 2015-07-06 at 8.07.20 AM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/486aed68-5c83-3211-88e2-0d7216c844a7.png \"Screen Shot 2015-07-06 at 8.07.20 AM.png\")\n\n\n# CloudTrail\u306e\u6709\u52b9\u5316\u3001CloudWatchLogs\u3068\u306e\u9023\u643a\n\nCloudTrail\u3092\u6709\u52b9\u5316\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u6709\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001CloudWatchLogs\u3068\u306e\u9023\u643a\u3092\u6709\u52b9\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# CloudWatch,CloudWatchLogs\u306e\u8a2d\u5b9a\n\nCloudTrail\u3067\u6307\u5b9a\u3057\u305fCloudWatchLogs\u306eLogGroup\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n\u6b21\u306bEC2\u8d77\u52d5\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nCloudWatchLogs\u3068\u9023\u643a\u3057\u3066\u3044\u308bLogGroup\u306e**0filters**\u3068\u306a\u3063\u3066\u3044\u308b\u6240\u3092\u9078\u629e\u3057\u3001**Add Metric Filtter**\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n![Screen Shot 2015-07-06 at 7.29.31 AM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/f6f405ac-8e5d-7b29-1114-45accca2721b.png \"Screen Shot 2015-07-06 at 7.29.31 AM.png\")\n\n\nTestPattern\u306b\u306f**{ $.eventName = \"RunInstances\" }**\u3068\u5165\u529b\u3059\u308b\u3053\u3068\u3067EC2\u306e\u8d77\u52d5\u3092\u793a\u3059\u30a4\u30d9\u30f3\u30c8\u306e**RunInstances**\u306e\u307f\u3092\u30d5\u30a3\u30eb\u30bf\u3067\u304d\u307e\u3059\u3002\n\n\u4f5c\u6210\u5f8c\u3001\u4e0a\u8a18\u30d5\u30a3\u30eb\u30bf\u767a\u751f\u6642\u306bSNS\u3078\u901a\u77e5\u3092\u3059\u308b\u3088\u3046\u306b\u30a2\u30e9\u30fc\u30e0(Lambda\u3092\u5b9f\u884c\u3059\u308b\u3082\u306e)\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nLogGroup\u3092\u518d\u5ea6\u78ba\u8a8d\u3059\u308b\u30680filters\u304c**1filters**\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u9078\u629e\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\n![Screen Shot 2015-07-06 at 7.33.51 AM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/fca416cc-ba62-eba5-c946-3ba686908b4b.png \"Screen Shot 2015-07-06 at 7.33.51 AM.png\")\n\n\u4e0a\u8a18\u306eCreate Alarm\u3092\u9078\u629e\u3057\u3066\u30a2\u30e9\u30fc\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![Screen Shot 2015-07-06 at 7.39.34 AM.png](https://qiita-image-store.s3.amazonaws.com/0/20193/3cea73be-e982-06db-2692-a48a1a909f64.png \"Screen Shot 2015-07-06 at 7.39.34 AM.png\")\n\n\n\u4e0a\u8a18\u3067\u306f5\u5206\u3054\u3068\u306b1\u56de\u4ee5\u4e0aRunInstace\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u5834\u5408\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fLambda\u3092\u547c\u3073\u51fa\u3059SNS\u3092\u547c\u3073\u51fa\u3059\u8a2d\u5b9a\u3068\u3057\u307e\u3057\u305f\u3002\n\n# \u78ba\u8a8d\n\n\u3053\u308c\u3067\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n\u6b63\u3057\u304f\u8a2d\u5b9a\u304c\u51fa\u6765\u3066\u3044\u308c\u3070t2.micro\u4ee5\u5916\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8d77\u52d5\u3055\u308c\u3001CloudTrailLog\u306b\u3088\u3063\u3066RunInstance\u304c\u8a18\u9332\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067Lambda\u304c\u5b9f\u884c\u3055\u308c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30e9\u30fc\u30e0\u30e1\u30fc\u30eb\u304c\u5c4a\u304f\u304b\u3068\u601d\u3044\u307e\u3059\u3002(CloudTrail\u306e\u30ed\u30b0\u66f8\u304d\u8fbc\u307f\u306f\u5373\u6642\u3067\u306f\u306a\u3044\u306e\u3067\u6700\u59275\u5206\u7a0b\u5ea6\u5f85\u3064\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\ninvalid EC2 instance type launched.Instance id = i-a615db54, Instance Type = t2.small\n```\n\n# \u304a\u307e\u3051\n\nCloudWatchLogs\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u3063\u3066EC2\u306e\u8d77\u52d5\u6642\u3060\u3051Lambda\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u524d\u306bCloudTrail\u304cS3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u6642\u70b9\u3067\u90fd\u5ea6\u305d\u306e\u30ed\u30b0\u3092\u89e3\u6790\u3057\u3001SNS\u901a\u77e5\u3059\u308b\u3082\u306e\u3082\u4e8b\u524d\u306b\u4f5c\u3063\u305f\u306e\u3067\u8f09\u305b\u307e\u3059\u3002\u306a\u304a\u3001\u3053\u308c\u3060\u3068CloudTrail\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u306e\u90fd\u5ea6\u3001Lambda\u304c\u5b9f\u884c\u3055\u308c\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3082\u5897\u3048\u308b\u306e\u3067\u3042\u3093\u307e\u3088\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3002\u3002\n\n```lang:LambdaFunctionHandler.class\npackage com.sample.lambda;\n\nimport java.io.IOException;\nimport java.net.URLDecoder;\nimport java.util.List;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\nimport com.amazonaws.services.s3.event.S3EventNotification.S3EventNotificationRecord;\nimport com.amazonaws.util.json.JSONException;\nimport com.amazonaws.util.json.JSONObject;\n\npublic class LambdaFunctionHandler implements RequestHandler<S3Event, Object> {\n\t\n\tprivate static final String ACCEPTABLE_INSTANCE_TYPE = \"t2.micro\";\n\tprivate static final String TOPIC_ARN = \"arn:aws:sns:ap-northeast-1:hogefuga\";\n\n    @Override\n    public Object handleRequest(S3Event s3event, Context context) {\n    \tLambdaLogger logger = context.getLogger();\n   \t\tlogger.log(\"start\");\n    \ttry { \n\n    \t\tlogger.log(\"Input(json): \" + s3event.toJson());\n        \n    \t\tS3EventNotificationRecord record = s3event.getRecords().get(0);\n    \t\tString srcBucket = record.getS3().getBucket().getName();\n    \t\tString srcKey = record.getS3().getObject().getKey()\n                .replace('+', ' ');\n    \t\tsrcKey = URLDecoder.decode(srcKey, \"UTF-8\");\n    \t\t\n    \t\tlogger.log(\"srcBucket = \" + srcBucket + \", srcKey = \" + srcKey);\n    \t\t\n    \t\tJSONObject cloudTrailLog = Util.getCloudTrailLog(srcBucket, srcKey);\n    \t\t\n    \t\tif(cloudTrailLog == null) {\n    \t\t\tlogger.log(\"cloudTrailLog is null\");\n    \t\t\treturn \"\";\n    \t\t}\n    \t\t\n  \t\t\tlogger.log(\"get cloudtrail log\");\n    \t\tList<JSONObject> items = Util.getEc2ist(cloudTrailLog,\n    \t\t\t\tACCEPTABLE_INSTANCE_TYPE);\n\n    \t\tif(items == null || items.isEmpty()) {\n    \t\t\tlogger.log(\"don't exsits invalid EC2\");\n    \t\t\treturn \"\";\n    \t\t}\n  \t\t\t\n  \t\t\tList<String> messageIds = Util.publish(items, TOPIC_ARN);\n\n    \t\tif(messageIds == null || messageIds.isEmpty()) {\n    \t\t\tlogger.log(\"cloud not publish SNS\");\n    \t\t\treturn \"\";\n    \t\t}\n\n    \t\tfor( String messageId: messageIds) {\n    \t\t\tlogger.log(\"messageId is \" + messageId);\n    \t\t}\n\n    \t} catch (IOException e) {\n    \t\tlogger.log(e.getMessage());\n            throw new RuntimeException(e);\n        } catch (JSONException e) {\n    \t\tlogger.log(e.getMessage());\n            throw new RuntimeException(e);\n\t\t}\n        return \"OK\";\n    }\n}\n```\n\n``````lang:Util.java\npackage com.sample.lambda;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.GZIPInputStream;\n\nimport com.amazonaws.regions.Region;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3Client;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.amazonaws.services.sns.AmazonSNSClient;\nimport com.amazonaws.services.sns.model.PublishResult;\nimport com.amazonaws.util.json.JSONArray;\nimport com.amazonaws.util.json.JSONException;\nimport com.amazonaws.util.json.JSONObject;\n\npublic class Util {\n\n    public static JSONObject getCloudTrailLog(String bucket, String key) throws IOException, JSONException {\n    \tJSONObject cloudTraillog = null;\n    \t\n    \tAmazonS3Client s3 = new AmazonS3Client();\n    \tRegion northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n    \ts3.setRegion(northEast1);\n    \t\n    \tS3Object object = null;\n    \tobject = s3.getObject(bucket, key);\n\n    \tif(object == null) return cloudTraillog;\n    \t\n    \tGZIPInputStream gzipInputStream = null;\n\n    \ttry {\n    \t\tgzipInputStream = new GZIPInputStream(object.getObjectContent());\n    \t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    \t\tfor (;;) {\n    \t\t\tint iRead = gzipInputStream.read();\n    \t\t\tif (iRead < 0) break;\n    \t\t\toutputStream.write(iRead);\n    \t\t}\n    \t\toutputStream.flush();\n    \t\toutputStream.close();\n    \t\tcloudTraillog = new JSONObject(new String(outputStream.toByteArray()));\n\t\t} finally {\n\t\t\tif (gzipInputStream != null) {\n\t\t\t\tgzipInputStream.close();\n\t\t\t\t\n\t\t\t}\n    \t}\n   \t\treturn cloudTraillog;\n    }\n    \n    public static List<JSONObject> getEc2ist(JSONObject cloudTrailLog, String instanceType) throws JSONException {\n    \tList<JSONObject> instanceIds = new ArrayList<JSONObject>();\n    \t\n    \tJSONArray records = cloudTrailLog.getJSONArray(\"Records\");\n\n    \tfor(int i = 0;i < records.length(); i++) {\n    \t  JSONObject record = records.getJSONObject(i);\n    \t  if (record.getString(\"eventName\").equals(\"RunInstances\") \n    \t\t\t  && record.has(\"responseElements\")) {\n    \t    JSONObject item = record.getJSONObject(\"responseElements\")\n    \t    \t\t.getJSONObject(\"instancesSet\").getJSONArray(\"items\").getJSONObject(0);\n    \t    if (!(item.getString(\"instanceType\").equals(instanceType))) {\n    \t    \tinstanceIds.add(item);\n    \t    }\n    \t  }\n    \t}\n    \treturn instanceIds;\n    }\n    \n    public static List<String> publish(List<JSONObject> items, String topicArn) throws JSONException {\n    \tList<String> messageIds = new ArrayList<String>();\n    \t\n    \tAmazonSNSClient sns = new AmazonSNSClient();\n    \tRegion northEast1 = Region.getRegion(Regions.AP_NORTHEAST_1);\n    \tsns.setRegion(northEast1);\n    \t\n    \tfor (JSONObject item: items) {\n    \t\tPublishResult result = sns.publish(topicArn,\n    \t\t\t\t\"invalid EC2 instance type launched.Instance id = \" \n    \t\t+ item.getString(\"instanceId\") + \", Instance Type = \" + item.getString(\"instanceType\"));\n    \t\tmessageIds.add(result.getMessageId());\n    \t}\n    \treturn messageIds;\n    }\n\n}\n```\n", "tags": ["AWS", "lambda", "Cloudtrail", "EC2", "SNS"]}