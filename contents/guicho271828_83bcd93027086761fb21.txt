{"context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u6295\u7a3f\u3067font-lock\u306b\u3064\u3044\u3066\u306e\u9593\u9055\u3044\u3092\u8a8d\u8b58\u3057\u305f\u306e\u3067\u30ea\u30d9\u30f3\u30b8\u3002\n\u4f8b\u3048\u3070 define-exported-class \u3068\u304b\u3067\u3082 class\u8272\u306b\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002\n\u8ffd\u52a0\u3057\u305f\u3051\u308c\u3070regexp\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3088\u308d\u3057\u3002\n(defface extra-ws-face\n  '((t (:background \"hotpink\" :foreground \"black\")))\n  \"Used in text-mode and friends for exactly one space after a period.\")\n\n(defun font-lock-something-name-face (str)\n  (save-match-data\n    (cond\n     ((string-match \"\\\\(const\\\\(ant\\\\)?\\\\|parameter\\\\|var\\\\)\\\\>\" str)\n      font-lock-variable-name-face)\n     ((string-match \"\\\\(class\\\\|package\\\\|suite\\\\|struct\\\\|type\\\\|pattern\\\\)\\\\>\" str)\n      font-lock-type-face)\n     ((string-match \"\\\\(syntax\\\\|read\\\\)\\\\>\" str)\n      font-lock-constant-face)\n     (t font-lock-function-name-face))))\n\n(font-lock-add-keywords\n 'lisp-mode\n '((\"\\\\<\\\\(FIXME\\\\|TODO\\\\)\" 1 font-lock-warning-face t)\n   (\"^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$\" 1 font-lock-warning-face t)\n   (\"(\\\\(\\\\(?:\\\\(?:\\\\s_\\\\|\\\\w\\\\)*:\\\\)?\\\\(?:use-\\\\|in-\\\\|def\\\\)\\\\(\\\\(?:\\\\s_\\\\|\\\\w\\\\)*\\\\)\\\\)\\\\>\\\\(?:\\\\s-*\\\\(?:\\\\s<.*\n\\\\|\n\\\\)?\\\\)+\\\\(?:\\\\(?:\\\\s-\\\\|(\\\\)*\\\\(?:\\\\s<.*\n\\\\|\n\\\\)?\\\\)*\\\\(\\\\_<\\\\(?:\\\\s_\\\\|\\\\w\\\\)+\\\\_>\\\\)?\" ;; def*** , define-*** , in-***\n    (1 font-lock-keyword-face)\n    (3 (font-lock-something-name-face (match-string 2))))\n   (\"^\\\\s-+$\" . 'extra-ws-face)))\n\n\u4fee\u6b63\uff1adefstruct \u3084 defcached \u306e\u3088\u3046\u306b\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u3060\u3051\u3067\u306a\u304fsubexp\u3092\u6301\u3064\u5834\u5408\u306b\u5bfe\u5fdc\u3002\n\u4ee5\u4e0b\u304c\u3059\u3079\u3066\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u308b\u306f\u305a\u3002\nin- \u7cfb\u3068 use-\u7cfb\u306b\u3082\u5bfe\u5fdc\u3001 syntax \u3084 read \u3092\u542b\u3080\u3082\u306e\u306f\u5225\u306e\u8272\u3067\u3002(defreadtable\u306a\u3069)\n(use-syntax :annot\n(cl-syntax:use-syntax (%_!$&=~^-[]+*?/<>.:annot))\n(cl-syntax:use-syntax ( ;; hi!\n                       (  (%_!$&=~^-[]+*?/<>.:annot))\n(cl-syntax:use-syntax ( ;; hi!\n                       ( ;; hi!\n                        (%_!$&=~^-[]+*?/<>.:annot))))\n(defcached aaa\n    )\n(defcached bbb\n    )\n(defcached (symbol :table table)\n    )\n(defcached (aaa \n    )\n\n\u524d\u56de\u306e\u6295\u7a3f\u3067font-lock\u306b\u3064\u3044\u3066\u306e\u9593\u9055\u3044\u3092\u8a8d\u8b58\u3057\u305f\u306e\u3067\u30ea\u30d9\u30f3\u30b8\u3002\n\u4f8b\u3048\u3070 `define-exported-class` \u3068\u304b\u3067\u3082 class\u8272\u306b\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002\n\u8ffd\u52a0\u3057\u305f\u3051\u308c\u3070regexp\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3088\u308d\u3057\u3002\n\n```cl\n(defface extra-ws-face\n  '((t (:background \"hotpink\" :foreground \"black\")))\n  \"Used in text-mode and friends for exactly one space after a period.\")\n\n(defun font-lock-something-name-face (str)\n  (save-match-data\n    (cond\n     ((string-match \"\\\\(const\\\\(ant\\\\)?\\\\|parameter\\\\|var\\\\)\\\\>\" str)\n      font-lock-variable-name-face)\n     ((string-match \"\\\\(class\\\\|package\\\\|suite\\\\|struct\\\\|type\\\\|pattern\\\\)\\\\>\" str)\n      font-lock-type-face)\n     ((string-match \"\\\\(syntax\\\\|read\\\\)\\\\>\" str)\n      font-lock-constant-face)\n     (t font-lock-function-name-face))))\n\n(font-lock-add-keywords\n 'lisp-mode\n '((\"\\\\<\\\\(FIXME\\\\|TODO\\\\)\" 1 font-lock-warning-face t)\n   (\"^[^\\n]\\\\{80\\\\}\\\\(.*\\\\)$\" 1 font-lock-warning-face t)\n   (\"(\\\\(\\\\(?:\\\\(?:\\\\s_\\\\|\\\\w\\\\)*:\\\\)?\\\\(?:use-\\\\|in-\\\\|def\\\\)\\\\(\\\\(?:\\\\s_\\\\|\\\\w\\\\)*\\\\)\\\\)\\\\>\\\\(?:\\\\s-*\\\\(?:\\\\s<.*\n\\\\|\n\\\\)?\\\\)+\\\\(?:\\\\(?:\\\\s-\\\\|(\\\\)*\\\\(?:\\\\s<.*\n\\\\|\n\\\\)?\\\\)*\\\\(\\\\_<\\\\(?:\\\\s_\\\\|\\\\w\\\\)+\\\\_>\\\\)?\" ;; def*** , define-*** , in-***\n    (1 font-lock-keyword-face)\n    (3 (font-lock-something-name-face (match-string 2))))\n   (\"^\\\\s-+$\" . 'extra-ws-face)))\n```\n\n\u4fee\u6b63\uff1adefstruct \u3084 defcached \u306e\u3088\u3046\u306b\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u3060\u3051\u3067\u306a\u304fsubexp\u3092\u6301\u3064\u5834\u5408\u306b\u5bfe\u5fdc\u3002\n\u4ee5\u4e0b\u304c\u3059\u3079\u3066\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u308b\u306f\u305a\u3002\nin- \u7cfb\u3068 use-\u7cfb\u306b\u3082\u5bfe\u5fdc\u3001 syntax \u3084 read \u3092\u542b\u3080\u3082\u306e\u306f\u5225\u306e\u8272\u3067\u3002(defreadtable\u306a\u3069)\n\n```cl\n(use-syntax :annot\n(cl-syntax:use-syntax (%_!$&=~^-[]+*?/<>.:annot))\n(cl-syntax:use-syntax ( ;; hi!\n                       (  (%_!$&=~^-[]+*?/<>.:annot))\n(cl-syntax:use-syntax ( ;; hi!\n                       ( ;; hi!\n                        (%_!$&=~^-[]+*?/<>.:annot))))\n(defcached aaa\n    )\n(defcached bbb\n    )\n(defcached (symbol :table table)\n    )\n(defcached (aaa \n    )\n```", "tags": ["common-lisp", "Emacs"]}