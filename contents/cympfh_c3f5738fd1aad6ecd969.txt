{"context": "\n\n\u8981\u8acb\n\n\u5fc5\u8981\u306a\u3060\u3051\u6a19\u6e96\u5165\u529b\u304b\u3089\u8aad\u307f\u8fbc\u3080 (\u6a19\u6e96\u5165\u529b\u5168\u3066\u3092\u521d\u3081\u306b\u8aad\u3082\u3046\u3068\u3057\u306a\u3044)\n1\u30c8\u30fc\u30af\u30f3\u3054\u3068\u306b\u8981\u8acb\u3055\u308c\u308b\u578b\u306b\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059\n\n\u8981\u3059\u308b\u306b\u3001C++\u306estd::cin \u304c\u6b32\u3057\u3044.\n\u4e3b\u306b\u30d7\u30ed\u30b3\u30f3\u306e\u5165\u529b\u306e\u7528\u9014.\n\u4f8b\u3048\u3070\u3001\n3 West North West\n\n\u307f\u305f\u3044\u306a\u5165\u529b. \u65b9\u89d2 (\u6587\u5b57\u5217) \u306e\u5217\u304c\u4e00\u884c\u3067\u4e0e\u3048\u3089\u308c\u308b\u3051\u3069, \u500b\u6570 (\u7b26\u53f7\u306a\u3057\u6574\u6570) \u304c\u4e88\u3081\u4e0e\u3048\u3089\u308c\u308b. \u500b\u6570\u304c\u4e0d\u660e\u3067\u884c\u3092\u5217 (\u30d9\u30af\u30bf\u30fc) \u306b\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u3059\u308b.\n\n\u4e00\u884c\u305a\u3064\u8aad\u3093\u3067\u81ea\u529b\u3067\u30d1\u30fc\u30b9\n\nmain.rs\nuse std::io;\n\nfn read_line() -> String {\n    let mut line = String::new();\n    let _ = io::stdin().read_line(&mut line);\n    line // \u3053\u306e\u6587\u5b57\u5217\u306f\u6539\u884c\u3067\u7d42\u308f\u308b\n}\n\nfn main() {\n    let line = read_line();\n    let xs: Vec<String> = line.split(char::is_whitespace)\n        .map(String::from)\n        .collect();\n    let n: usize = xs[0].parse().unwrap(); // parse() -> Result<T,_>\n    let mut dirs = Vec::new();\n    for i in 0..n {\n        dirs.push( xs[i+1].clone() );\n    }\n    println!(\"{} {:?}\", n, dirs)\n\n}\n\n\n\noutput\n3 [\"West\", \"North\", \"West\"]\n\n\n\nstruct Scanner\n\u81ea\u529b\u3067\u3084\u3063\u305f\u3053\u3068\u3092\u96a0\u853d\u306b\u3057\u3066\u898b\u305f\u76ee\u3092\u5947\u9e97\u306b\u3059\u308b.\nstruct Scanner \u306f\u5185\u90e8\u306b stdin \u3068\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3063\u3066\u3001\u5fc5\u8981\u306a\u6642\u3001\u30d0\u30c3\u30d5\u30a1\u304b\u3089 1 \u30c8\u30fc\u30af\u30f3\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059. \u30d0\u30c3\u30d5\u30a1\u304c\u7a7a\u306a\u3068\u304d\u3060\u3051\u3001stdin \u304b\u3089\u4e00\u884c\u8aad\u3093\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3057\u3066\u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\u3059\u308b.\n\u30d0\u30c3\u30d5\u30a1\u306f\u3001\u6700\u8fd1\u306b\u8aad\u3093\u3060\u30c8\u30fc\u30af\u30f3\u3092\u5f8c\u308d\u306b\u8ffd\u52a0\u3057\u3066\u8981\u6c42\u3055\u308c\u305f\u3089\u6614\u306b\u8aad\u3093\u3060\u3082\u306e\u3092\u524d\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u3067\u3001\u30ad\u30e5\u30fc\u306b\u3059\u308b.\nuse std::io;\nuse std::str::FromStr;\nuse std::collections::VecDeque;\n\n#[allow(dead_code)]\nstruct Scanner { stdin: io::Stdin, buffer: VecDeque<String>, }\n#[allow(dead_code)]\nimpl Scanner {\n    fn new() -> Scanner { Scanner { stdin: io::stdin(), buffer: VecDeque::new() } }\n    fn reserve(&mut self) {\n        while self.buffer.len() == 0 {\n            let mut line = String::new();\n            let _ = self.stdin.read_line(&mut line);\n            for w in line.split_whitespace() {\n                self.buffer.push_back(String::from(w));\n            }\n        }\n    }\n    fn cin<T: FromStr>(&mut self) -> T {\n        self.reserve();\n        match self.buffer.pop_front().unwrap().parse::<T>() {\n            Ok(a) => a,\n            Err(_) => panic!(\"parse err\")\n        }\n    }\n    fn get_char(&mut self) -> char {\n        self.reserve();\n        let head = self.buffer[0].chars().nth(0).unwrap();\n        let tail = String::from( &self.buffer[0][1..] );\n        if tail.len()>0 { self.buffer[0]=tail } else { self.buffer.remove(0); }\n        head\n    }\n}\n\n\u30b3\u30ec\u3092\u4f7f\u3063\u3066\u5148\u307b\u3069\u3068\u540c\u69d8\u306e\u5165\u529b\u3092\u3068\u308b\n\nmain.rs\nfn main() {\n\n    let mut sc = Scanner::new();\n    let n: usize = sc.cin();\n    let mut dirs = Vec::new();\n\n    for _ in 0..n {\n        let s: String = sc.cin();\n        dirs.push(s)\n    }\n    println!(\"{} {:?}\", n, dirs)\n\n}\n\n\nsc.cin \u306e\u5ea6\u306b\u63a8\u8ad6\u3055\u308c\u305f\u578b T \u3067 parse \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4e0a\u624b\u3044\u3053\u3068\u884c\u304f. T \u304c\u30d1\u30fc\u30b9\u3067\u304d\u308b (parse: String -> T) \u3053\u3068\u306e\u5236\u7d04\u3068\u3057\u3066  trait FromStr \u304c\u3042\u308b.\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u7248 Scanner (\u30c0\u30e1)\n\u8981\u3059\u308b\u306b stdin \u3068 buffer \u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f5c\u308c\u3070\u826f\u3044.\n\nmain.rs\nfn main() {\n\n    let cin = scanner();\n    let n: usize = cin();\n\n}\n\n\n\u306a\u3069\u3068\u66f8\u3051\u308b\u3068\u3001\u308f\u305a\u304b\u306b\u30bf\u30a4\u30d7\u6570\u304c\u6e1b\u308b\u306e\u3067\u5b09\u3057\u3044.\n\n\u51fa\u6765\u3066\u306a\u3044\nfn scanner() -> Box<FnMut() -> T> where T: FromStr {\n    let stdin = io::stdin();\n    let mut buffer = Vec::new().to_owned();\n    Box::new(move || {\n        if buffer.len() == 0 {\n            let mut line = String::new();\n            let _ = stdin.read_line(&mut line);\n            for w in line.split(char::is_whitespace).map(String::from) {\n                if !w.is_empty() { buffer.push(w) }\n            }\n        }\n        match buffer[0].parse::<T>() {\n            Ok(a) => { buffer.remove(0); a },\n            Err(_) => panic!(\"parse err\"),\n        }\n    })\n}\n\nfn main() {\n    let mut cin = scanner();\n    let n: usize = cin();\n    println!(\"{}\", n);\n}\n\n\n\u305d\u308c\u3063\u307d\u3044\u3068\u3053\u307e\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\n\u30e9\u30e0\u30c0\u5f0f\u306b\u578b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u5165\u308c\u308b\u306e\u3063\u3066\u3069\u3046\u3084\u308b\u3093\u3060\u3002\u3002\u3002\uff1f\uff1f\uff1f\n\n\n\u8ffd\u8a18 (Thu Mar 17 23:13:27 JST 2016)\n\u6700\u5f8c\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u306f\u3001\n() -> (forall t. () -> t)\n\u307f\u305f\u3044\u306a\u578b\u3092\u6301\u3064\u95a2\u6570\u3067\u3001\u30e9\u30f3\u30af1\u591a\u76f8\u578b\u3068\u547c\u3070\u308c\u308b\u305d\u3046\u3067Rust\u3067\u306f\u66f8\u3051\u306a\u3044\u3089\u3057\u3044 (thanks to @blackenedgold; \u30b3\u30e1\u30f3\u30c8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059).\n(\"Rank-N Types\" \u3067\u30b0\u30b0\u308b\u3068 Haskell \u3067\u306e\u305d\u308c\u304c\u51fa\u3066\u304f\u308b. \u30aa\u30ea\u30b8\u30ca\u30eb\u306eHM\u578b\u63a8\u8ad6\u3067\u306f\u578b\u304c\u4ed8\u304b\u306a\u3044\u305d\u3046.)\n# \u8981\u8acb\n\n1. \u5fc5\u8981\u306a\u3060\u3051\u6a19\u6e96\u5165\u529b\u304b\u3089\u8aad\u307f\u8fbc\u3080 (\u6a19\u6e96\u5165\u529b\u5168\u3066\u3092\u521d\u3081\u306b\u8aad\u3082\u3046\u3068\u3057\u306a\u3044)\n2. 1\u30c8\u30fc\u30af\u30f3\u3054\u3068\u306b\u8981\u8acb\u3055\u308c\u308b\u578b\u306b\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059\n\n\u8981\u3059\u308b\u306b\u3001C++\u306e`std::cin` \u304c\u6b32\u3057\u3044.\n\n\u4e3b\u306b\u30d7\u30ed\u30b3\u30f3\u306e\u5165\u529b\u306e\u7528\u9014.\n\u4f8b\u3048\u3070\u3001\n\n```\n3 West North West\n```\n\n\u307f\u305f\u3044\u306a\u5165\u529b. \u65b9\u89d2 (\u6587\u5b57\u5217) \u306e\u5217\u304c\u4e00\u884c\u3067\u4e0e\u3048\u3089\u308c\u308b\u3051\u3069, \u500b\u6570 (\u7b26\u53f7\u306a\u3057\u6574\u6570) \u304c\u4e88\u3081\u4e0e\u3048\u3089\u308c\u308b. \u500b\u6570\u304c\u4e0d\u660e\u3067\u884c\u3092\u5217 (\u30d9\u30af\u30bf\u30fc) \u306b\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u3059\u308b.\n\n# \u4e00\u884c\u305a\u3064\u8aad\u3093\u3067\u81ea\u529b\u3067\u30d1\u30fc\u30b9\n\n```rust:main.rs\nuse std::io;\n\nfn read_line() -> String {\n    let mut line = String::new();\n    let _ = io::stdin().read_line(&mut line);\n    line // \u3053\u306e\u6587\u5b57\u5217\u306f\u6539\u884c\u3067\u7d42\u308f\u308b\n}\n\nfn main() {\n    let line = read_line();\n    let xs: Vec<String> = line.split(char::is_whitespace)\n        .map(String::from)\n        .collect();\n    let n: usize = xs[0].parse().unwrap(); // parse() -> Result<T,_>\n    let mut dirs = Vec::new();\n    for i in 0..n {\n        dirs.push( xs[i+1].clone() );\n    }\n    println!(\"{} {:?}\", n, dirs)\n\n}\n```\n\n```:output\n3 [\"West\", \"North\", \"West\"]\n```\n\n# struct Scanner\n\n\u81ea\u529b\u3067\u3084\u3063\u305f\u3053\u3068\u3092\u96a0\u853d\u306b\u3057\u3066\u898b\u305f\u76ee\u3092\u5947\u9e97\u306b\u3059\u308b.\n`struct Scanner` \u306f\u5185\u90e8\u306b `stdin` \u3068\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3063\u3066\u3001\u5fc5\u8981\u306a\u6642\u3001\u30d0\u30c3\u30d5\u30a1\u304b\u3089 1 \u30c8\u30fc\u30af\u30f3\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059. \u30d0\u30c3\u30d5\u30a1\u304c\u7a7a\u306a\u3068\u304d\u3060\u3051\u3001`stdin` \u304b\u3089\u4e00\u884c\u8aad\u3093\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3057\u3066\u30d0\u30c3\u30d5\u30a1\u306b\u8ffd\u52a0\u3059\u308b.\n\u30d0\u30c3\u30d5\u30a1\u306f\u3001\u6700\u8fd1\u306b\u8aad\u3093\u3060\u30c8\u30fc\u30af\u30f3\u3092\u5f8c\u308d\u306b\u8ffd\u52a0\u3057\u3066\u8981\u6c42\u3055\u308c\u305f\u3089\u6614\u306b\u8aad\u3093\u3060\u3082\u306e\u3092\u524d\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u3067\u3001\u30ad\u30e5\u30fc\u306b\u3059\u308b.\n\n```rust\nuse std::io;\nuse std::str::FromStr;\nuse std::collections::VecDeque;\n\n#[allow(dead_code)]\nstruct Scanner { stdin: io::Stdin, buffer: VecDeque<String>, }\n#[allow(dead_code)]\nimpl Scanner {\n    fn new() -> Scanner { Scanner { stdin: io::stdin(), buffer: VecDeque::new() } }\n    fn reserve(&mut self) {\n        while self.buffer.len() == 0 {\n            let mut line = String::new();\n            let _ = self.stdin.read_line(&mut line);\n            for w in line.split_whitespace() {\n                self.buffer.push_back(String::from(w));\n            }\n        }\n    }\n    fn cin<T: FromStr>(&mut self) -> T {\n        self.reserve();\n        match self.buffer.pop_front().unwrap().parse::<T>() {\n            Ok(a) => a,\n            Err(_) => panic!(\"parse err\")\n        }\n    }\n    fn get_char(&mut self) -> char {\n        self.reserve();\n        let head = self.buffer[0].chars().nth(0).unwrap();\n        let tail = String::from( &self.buffer[0][1..] );\n        if tail.len()>0 { self.buffer[0]=tail } else { self.buffer.remove(0); }\n        head\n    }\n}\n```\n\n\u30b3\u30ec\u3092\u4f7f\u3063\u3066\u5148\u307b\u3069\u3068\u540c\u69d8\u306e\u5165\u529b\u3092\u3068\u308b\n\n```rust:main.rs\nfn main() {\n\n    let mut sc = Scanner::new();\n    let n: usize = sc.cin();\n    let mut dirs = Vec::new();\n\n    for _ in 0..n {\n        let s: String = sc.cin();\n        dirs.push(s)\n    }\n    println!(\"{} {:?}\", n, dirs)\n\n}\n```\n\n`sc.cin` \u306e\u5ea6\u306b\u63a8\u8ad6\u3055\u308c\u305f\u578b `T` \u3067 `parse` \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4e0a\u624b\u3044\u3053\u3068\u884c\u304f. `T` \u304c\u30d1\u30fc\u30b9\u3067\u304d\u308b (`parse: String -> T`) \u3053\u3068\u306e\u5236\u7d04\u3068\u3057\u3066  trait `FromStr` \u304c\u3042\u308b.\n\n# \u30af\u30ed\u30fc\u30b8\u30e3\u7248 Scanner (\u30c0\u30e1)\n\n\u8981\u3059\u308b\u306b stdin \u3068 buffer \u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f5c\u308c\u3070\u826f\u3044.\n\n```rust:main.rs\nfn main() {\n\n    let cin = scanner();\n    let n: usize = cin();\n\n}\n```\n\n\u306a\u3069\u3068\u66f8\u3051\u308b\u3068\u3001\u308f\u305a\u304b\u306b\u30bf\u30a4\u30d7\u6570\u304c\u6e1b\u308b\u306e\u3067\u5b09\u3057\u3044.\n\n```rust:\u51fa\u6765\u3066\u306a\u3044\nfn scanner() -> Box<FnMut() -> T> where T: FromStr {\n    let stdin = io::stdin();\n    let mut buffer = Vec::new().to_owned();\n    Box::new(move || {\n        if buffer.len() == 0 {\n            let mut line = String::new();\n            let _ = stdin.read_line(&mut line);\n            for w in line.split(char::is_whitespace).map(String::from) {\n                if !w.is_empty() { buffer.push(w) }\n            }\n        }\n        match buffer[0].parse::<T>() {\n            Ok(a) => { buffer.remove(0); a },\n            Err(_) => panic!(\"parse err\"),\n        }\n    })\n}\n\nfn main() {\n    let mut cin = scanner();\n    let n: usize = cin();\n    println!(\"{}\", n);\n}\n```\n\n\u305d\u308c\u3063\u307d\u3044\u3068\u3053\u307e\u3067\u66f8\u3051\u305f\u3051\u3069\u3001\n\u30e9\u30e0\u30c0\u5f0f\u306b\u578b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u5165\u308c\u308b\u306e\u3063\u3066\u3069\u3046\u3084\u308b\u3093\u3060\u3002\u3002\u3002\uff1f\uff1f\uff1f\n\n---\n\n# \u8ffd\u8a18 (Thu Mar 17 23:13:27 JST 2016)\n\n\u6700\u5f8c\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u306f\u3001\n`() -> (forall t. () -> t)`\n\u307f\u305f\u3044\u306a\u578b\u3092\u6301\u3064\u95a2\u6570\u3067\u3001\u30e9\u30f3\u30af1\u591a\u76f8\u578b\u3068\u547c\u3070\u308c\u308b\u305d\u3046\u3067Rust\u3067\u306f\u66f8\u3051\u306a\u3044\u3089\u3057\u3044 (thanks to @blackenedgold; \u30b3\u30e1\u30f3\u30c8\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059).\n(\"Rank-N Types\" \u3067\u30b0\u30b0\u308b\u3068 Haskell \u3067\u306e\u305d\u308c\u304c\u51fa\u3066\u304f\u308b. \u30aa\u30ea\u30b8\u30ca\u30eb\u306eHM\u578b\u63a8\u8ad6\u3067\u306f\u578b\u304c\u4ed8\u304b\u306a\u3044\u305d\u3046.)\n\n\n\n", "tags": ["rust", "\u65e5\u8a18"]}