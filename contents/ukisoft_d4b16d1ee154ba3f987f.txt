{"context": " More than 1 year has passed since last update.\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52c9\u5f37\u3092\u3057\u305f\u306e\u3067\u3001\u6652\u3057\u307e\u3059\u3002\n\u554f\u984c\u306f\u30b3\u30c1\u30e9\u3002\n\n2\u3064\u306e\u6587\u5b57\u5217S1,S2,...,Sn\u3068T1,T2,...,Tm\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u30892\u3064\u306e\u5171\u901a\u90e8\u5206\u5217\u306e\u9577\u3055\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u305f\u3060\u3057\u3001\u6587\u5b57\u5217S1,S2,...,Sn\u306e\u90e8\u5206\u6587\u5b57\u5217\u3068\u306f\u3001Si1,Si2,...,Sim(i1<i2<...<im)\u3068\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u6587\u5b57\u5217\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002\n\u5236\u7d04\uff1a\n\u30fb1 <= n, m <= 1000\n\n\u3067\u3001\u79c1\u306e\u56de\u7b54\u304c\u30b3\u30c1\u30e9\u3002\n<?php\nclass LongSamePartSet\n{\n    public function calc($firstWords, $secondWords)\n    {\n        $maxLengths = [];\n        for ($i = mb_strlen($firstWords) - 1; $i >= 0; $i--) {\n            $selfLengths = [];\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $length = 0;\n                    foreach ($maxLengths as $index => $maxLength) {\n                        if ($j < $index && $length < $maxLength) {\n                            $length = $maxLength;\n                        }\n                    }\n                    $selfLengths[$j] = $length + 1;\n                }\n            }\n            $maxLengths = $selfLengths + $maxLengths;\n        }\n        return count($maxLengths) === 0 ? 0 : max($maxLengths);\n    }\n}\n\nfor\u304c3\u56de\u547c\u3070\u308c\u3066\u308b\u306e\u3067\u3001\u4f55\u304b\u9045\u305d\u3046\u3002\u3002\u3002\n\u4f1a\u793e\u306e\u5148\u8f29\u306e\u30b3\u30fc\u30c9\u306f\u30012\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nS\u3068T\u3092\u4f7f\u3063\u3066\u3001\u5171\u901a\u90e8\u5206\u5217\u3092\u30de\u30c8\u30ea\u30af\u30b9\u3067\u8868\u3057\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u9806\u756a\u306b\u6c42\u3081\u308b\u3068\u30fb\u30fb\u30fb\u3046\u30fc\u3093\u3001\u8a00\u8449\u3067\u306f\u8aac\u660e\u3057\u3065\u3089\u3044\u3002\n\u305d\u306e\u3046\u3061\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3010\u8ffd\u8a18\u3011\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u307e\u3057\u305f\uff01\nclass LongestCommonSubsequence\n{\n    public static function calc($firstWords, $secondWords)\n    {\n        $note = [];\n        for ($i = 0; $i <= mb_strlen($firstWords); $i++) {\n            $note[$i] = [];\n            if ($i === 0) {\n                for ($j = 1; $j <= mb_strlen($secondWords); $j++) {\n                    $note[$i][$j] = 0;\n                }\n                continue;\n            }\n            $note[$i][0] = 0;\n        }\n\n        for ($i = 0; $i < mb_strlen($firstWords); $i++) {\n            for ($j = 0; $j < mb_strlen($secondWords); $j++) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $note[$i + 1][$j + 1] = $note[$i][$j] + 1;\n                } else {\n                    $note[$i + 1][$j + 1] = max($note[$i][$j + 1], $note[$i + 1][$j]);\n                }\n            }\n            unset($note[$i]);\n        }\n        return $note[mb_strlen($firstWords)][mb_strlen($secondWords)];\n    }\n}\n\n\n\u3010\u8ffd\u8a18\u3011\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u307e\u3057\u305f\uff01\u305d\u306e\uff12\n\u5b9f\u306f\u3001\u524d\u56de\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u306f\u3001\u4f1a\u793e\u306e\u5148\u8f29\u306e\u30b3\u30fc\u30c9\u3092\u771f\u4f3c\u305f\u3082\u306e\u3067\u3057\u305f\u3002\n\u304c\u3001\u6094\u3057\u3044\u306e\u3067\u3001\u81ea\u5206\u81ea\u8eab\u306e\u30b3\u30fc\u30c9\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u307e\u3057\u305f\u30fb\u30fb\u2190\uff13\u5ea6\u76ee\nclass LongestCommonSubsequence\n{\n    public static function calc($firstWords, $secondWords)\n    {\n        $maxLengths = [];\n        for ($i = mb_strlen($firstWords) - 1; $i >= 0; $i--) {\n            $checkLengths = [];\n            $checkMaxLength = 0;\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if (array_key_exists($j + 1, $maxLengths)) {\n                    $checkMaxLength = max($checkMaxLength, $maxLengths[$j + 1]);\n                }\n                $checkLengths[$j] = $checkMaxLength;\n            }\n            $selfLengths = [];\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $selfLengths[$j] = $checkLengths[$j] + 1;\n                }\n            }\n            $maxLengths = $selfLengths + $maxLengths;\n        }\n        return count($maxLengths) === 0 ? 0 : max($maxLengths);\n    }\n}\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52c9\u5f37\u3092\u3057\u305f\u306e\u3067\u3001\u6652\u3057\u307e\u3059\u3002\n\u554f\u984c\u306f\u30b3\u30c1\u30e9\u3002\n\n> 2\u3064\u306e\u6587\u5b57\u5217S1,S2,...,Sn\u3068T1,T2,...,Tm\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u30892\u3064\u306e\u5171\u901a\u90e8\u5206\u5217\u306e\u9577\u3055\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\u305f\u3060\u3057\u3001\u6587\u5b57\u5217S1,S2,...,Sn\u306e\u90e8\u5206\u6587\u5b57\u5217\u3068\u306f\u3001Si1,Si2,...,Sim(i1<i2<...<im)\u3068\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u6587\u5b57\u5217\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002\n\n>\u5236\u7d04\uff1a\n\u30fb1 <= n, m <= 1000\n\n\u3067\u3001\u79c1\u306e\u56de\u7b54\u304c\u30b3\u30c1\u30e9\u3002\n\n```php\n<?php\nclass LongSamePartSet\n{\n    public function calc($firstWords, $secondWords)\n    {\n        $maxLengths = [];\n        for ($i = mb_strlen($firstWords) - 1; $i >= 0; $i--) {\n            $selfLengths = [];\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $length = 0;\n                    foreach ($maxLengths as $index => $maxLength) {\n                        if ($j < $index && $length < $maxLength) {\n                            $length = $maxLength;\n                        }\n                    }\n                    $selfLengths[$j] = $length + 1;\n                }\n            }\n            $maxLengths = $selfLengths + $maxLengths;\n        }\n        return count($maxLengths) === 0 ? 0 : max($maxLengths);\n    }\n}\n```\n\nfor\u304c3\u56de\u547c\u3070\u308c\u3066\u308b\u306e\u3067\u3001\u4f55\u304b\u9045\u305d\u3046\u3002\u3002\u3002\n\u4f1a\u793e\u306e\u5148\u8f29\u306e\u30b3\u30fc\u30c9\u306f\u30012\u56de\u3057\u304b\u547c\u3070\u308c\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nS\u3068T\u3092\u4f7f\u3063\u3066\u3001\u5171\u901a\u90e8\u5206\u5217\u3092\u30de\u30c8\u30ea\u30af\u30b9\u3067\u8868\u3057\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089\u9806\u756a\u306b\u6c42\u3081\u308b\u3068\u30fb\u30fb\u30fb\u3046\u30fc\u3093\u3001\u8a00\u8449\u3067\u306f\u8aac\u660e\u3057\u3065\u3089\u3044\u3002\n\u305d\u306e\u3046\u3061\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n##\u3010\u8ffd\u8a18\u3011\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u307e\u3057\u305f\uff01\n\n```php\nclass LongestCommonSubsequence\n{\n    public static function calc($firstWords, $secondWords)\n    {\n        $note = [];\n        for ($i = 0; $i <= mb_strlen($firstWords); $i++) {\n            $note[$i] = [];\n            if ($i === 0) {\n                for ($j = 1; $j <= mb_strlen($secondWords); $j++) {\n                    $note[$i][$j] = 0;\n                }\n                continue;\n            }\n            $note[$i][0] = 0;\n        }\n\n        for ($i = 0; $i < mb_strlen($firstWords); $i++) {\n            for ($j = 0; $j < mb_strlen($secondWords); $j++) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $note[$i + 1][$j + 1] = $note[$i][$j] + 1;\n                } else {\n                    $note[$i + 1][$j + 1] = max($note[$i][$j + 1], $note[$i + 1][$j]);\n                }\n            }\n            unset($note[$i]);\n        }\n        return $note[mb_strlen($firstWords)][mb_strlen($secondWords)];\n    }\n}\n```\n\n## \u3010\u8ffd\u8a18\u3011\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u307e\u3057\u305f\uff01\u305d\u306e\uff12\n\u5b9f\u306f\u3001\u524d\u56de\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u306f\u3001\u4f1a\u793e\u306e\u5148\u8f29\u306e\u30b3\u30fc\u30c9\u3092\u771f\u4f3c\u305f\u3082\u306e\u3067\u3057\u305f\u3002\n\u304c\u3001\u6094\u3057\u3044\u306e\u3067\u3001\u81ea\u5206\u81ea\u8eab\u306e\u30b3\u30fc\u30c9\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u307e\u3057\u305f\u30fb\u30fb\u2190\uff13\u5ea6\u76ee\n\n```php\nclass LongestCommonSubsequence\n{\n    public static function calc($firstWords, $secondWords)\n    {\n        $maxLengths = [];\n        for ($i = mb_strlen($firstWords) - 1; $i >= 0; $i--) {\n            $checkLengths = [];\n            $checkMaxLength = 0;\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if (array_key_exists($j + 1, $maxLengths)) {\n                    $checkMaxLength = max($checkMaxLength, $maxLengths[$j + 1]);\n                }\n                $checkLengths[$j] = $checkMaxLength;\n            }\n            $selfLengths = [];\n            for ($j = mb_strlen($secondWords) - 1; $j >= 0; $j--) {\n                if ($firstWords[$i] === $secondWords[$j]) {\n                    $selfLengths[$j] = $checkLengths[$j] + 1;\n                }\n            }\n            $maxLengths = $selfLengths + $maxLengths;\n        }\n        return count($maxLengths) === 0 ? 0 : max($maxLengths);\n    }\n}\n```\n", "tags": ["PHP5.6", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}