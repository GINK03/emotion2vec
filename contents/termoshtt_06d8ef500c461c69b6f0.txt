{"tags": ["C++", "C++11", "boost", "Range"], "context": " More than 1 year has passed since last update.\u4fbf\u5229\u306aBoost.Range\n\u3067\u3082\u304a\u9ad8\u3044\u3093\u3067\u3057\u3087\u3046\uff1f\n\u3068\u3044\u3046\u4e8b\u3067\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3067\u901f\u5ea6\u6e2c\u3063\u3066\u307f\u305f\u3002\n\u3061\u3087\u3063\u3068\u7c21\u5358\u3059\u304e\u308b\u30eb\u30fc\u30d7\u306a\u611f\u306f\u3042\u308b\u3002\n\nboost_range_speed.cpp\n#include <chrono>\n#include <boost/range/irange.hpp>\n#include <boost/range/adaptors.hpp>\n\nnamespace A = boost::adaptors;\nnamespace ch = std::chrono;\n\nunsigned long native(unsigned int N) {\n  unsigned long sum = 0;\n  for (unsigned long i = 0; i < N; ++i) {\n    if (i % 2 != 0)\n      continue;\n    sum += i + 1;\n  }\n  return sum;\n}\n\nunsigned long range(unsigned int N) {\n  unsigned long sum = 0;\n  for (unsigned long i : boost::irange((unsigned int)0, N)) {\n    if (i % 2 != 0)\n      continue;\n    sum += i + 1;\n  }\n  return sum;\n}\n\nunsigned long range_adapter(unsigned int N) {\n  unsigned long sum = 0;\n  for (auto i : boost::irange((unsigned int)0, N) |\n       A::filtered([](int i) { return i % 2 == 0; }) |\n       A::transformed([](unsigned int i) { return i + 1; })) {\n    sum += i;\n  }\n  return sum;\n}\n\ntemplate <class F> void task_time(F &&f) {\n  auto begin = ch::system_clock::now();\n  auto sum = f();\n  auto end = ch::system_clock::now();\n  std::cerr << \"sum = \" << sum << std::endl;\n  std::cout << ch::duration_cast<ch::milliseconds>(end - begin).count()\n            << std::endl;\n}\n\nint main(int argc, char const *argv[]) {\n  const unsigned long N = 10000 * 10000;\n\n  std::cout << \"native        = \";\n  task_time([=]() { return native(N); });\n  std::cout << \"range         = \";\n  task_time([=]() { return range(N); });\n  std::cout << \"range_adapter = \";\n  task_time([=]() { return range_adapter(N); });\n\n  return 0;\n}\n\n\n\u81ea\u5206\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5f93\u6765\u306efor(native)\u3001irange\u3060\u3051\u4f7f\u3063\u305f\u5834\u5408(range)\u3001\nadapter\u3082\u4f7f\u3063\u305f\u5834\u5408(range_adapter)\u3067\u6bd4\u8f03\u3057\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\nclang version 3.4 (tags/RELEASE_34/final)\nTarget: x86_64-redhat-linux-gnu\nThread model: posix\n\ng++ (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\u307e\u305fCPU\u306f Intel(R) Xeon(R) CPU W3530 @2.80GHz \u3092\u4f7f\u7528\u3002\nclang++ boost_range_speed.cpp -std=c++11 -O0 && ./a.out 2> /dev/null \n\nnative        = 245\nrange         = 3287\nrange_adapter = 9412\n\nclang++ boost_range_speed.cpp -std=c++11 -O1 && ./a.out 2> /dev/null\n\nnative        = 78\nrange         = 1689\nrange_adapter = 3290\n\nBoost.Range\u9045\uff08\u6c57\uff09\u3068\u601d\u3046\u3058\u3083\u3093\u3002\nclang++ boost_range_speed.cpp -std=c++11 -O2 && ./a.out 2> /dev/null\n\nnative        = 98\nrange         = 91\nrange_adapter = 129\n\n-O2\u3067\u540c\u7b49\u306a\u901f\u5ea6\u306b\u306a\u308b\u3002range_adapter\u306f\u6709\u610f\u306b\u9045\u3044\u3002\n\u4e00\u65b9g++\u3067\u306f\ng++ boost_range_speed.cpp -std=c++11 -O0 && ./a.out 2> /dev/null\n\nnative        = 479\nrange         = 4051\nrange_adapter = 10088\n\ng++ boost_range_speed.cpp -std=c++11 -O1 && ./a.out 2> /dev/null\n\nnative        = 73\nrange         = 105\nrange_adapter = 113\n\n\u3093\uff1f\u65e9\u304f\u306d\uff1f\ng++ boost_range_speed.cpp -std=c++11 -O2 && ./a.out 2> /dev/null\n\nnative        = 71\nrange         = 68\nrange_adapter = 49\n\nrange_adapter\u306e\u304c\u65e9\u304f\u306a\u3063\u305f\u03a3(\u309c\u30ed\u309c;)!!\n\n\u7d50\u8ad6\nfiltered\u3084transformed\u306e\u3088\u3046\u306a\u30a2\u30c0\u30d7\u30bf\u306f-O2\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306a\u3089\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306b\u306f\u306a\u3089\u306a\u3044\u3002\ng++\u3060\u3068\u305f\u307e\u306b\u3080\u3057\u308d\u901f\u3044\u3002\n\u3082\u3063\u3068\u8907\u96d1\u306a\u30eb\u30fc\u30d7\u3060\u3068\u3069\u3046\u306a\u308b\u304b\u306f\u4e0d\u660e\u3002\n\u4fbf\u5229\u306aBoost.Range\n\u3067\u3082\u304a\u9ad8\u3044\u3093\u3067\u3057\u3087\u3046\uff1f\n\u3068\u3044\u3046\u4e8b\u3067\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3067\u901f\u5ea6\u6e2c\u3063\u3066\u307f\u305f\u3002\n\u3061\u3087\u3063\u3068\u7c21\u5358\u3059\u304e\u308b\u30eb\u30fc\u30d7\u306a\u611f\u306f\u3042\u308b\u3002\n\n```cpp:boost_range_speed.cpp\n#include <chrono>\n#include <boost/range/irange.hpp>\n#include <boost/range/adaptors.hpp>\n\nnamespace A = boost::adaptors;\nnamespace ch = std::chrono;\n\nunsigned long native(unsigned int N) {\n  unsigned long sum = 0;\n  for (unsigned long i = 0; i < N; ++i) {\n    if (i % 2 != 0)\n      continue;\n    sum += i + 1;\n  }\n  return sum;\n}\n\nunsigned long range(unsigned int N) {\n  unsigned long sum = 0;\n  for (unsigned long i : boost::irange((unsigned int)0, N)) {\n    if (i % 2 != 0)\n      continue;\n    sum += i + 1;\n  }\n  return sum;\n}\n\nunsigned long range_adapter(unsigned int N) {\n  unsigned long sum = 0;\n  for (auto i : boost::irange((unsigned int)0, N) |\n       A::filtered([](int i) { return i % 2 == 0; }) |\n       A::transformed([](unsigned int i) { return i + 1; })) {\n    sum += i;\n  }\n  return sum;\n}\n\ntemplate <class F> void task_time(F &&f) {\n  auto begin = ch::system_clock::now();\n  auto sum = f();\n  auto end = ch::system_clock::now();\n  std::cerr << \"sum = \" << sum << std::endl;\n  std::cout << ch::duration_cast<ch::milliseconds>(end - begin).count()\n            << std::endl;\n}\n\nint main(int argc, char const *argv[]) {\n  const unsigned long N = 10000 * 10000;\n\n  std::cout << \"native        = \";\n  task_time([=]() { return native(N); });\n  std::cout << \"range         = \";\n  task_time([=]() { return range(N); });\n  std::cout << \"range_adapter = \";\n  task_time([=]() { return range_adapter(N); });\n\n  return 0;\n}\n```\n\n\u81ea\u5206\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5f93\u6765\u306efor(native)\u3001irange\u3060\u3051\u4f7f\u3063\u305f\u5834\u5408(range)\u3001\nadapter\u3082\u4f7f\u3063\u305f\u5834\u5408(range_adapter)\u3067\u6bd4\u8f03\u3057\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```console\nclang version 3.4 (tags/RELEASE_34/final)\nTarget: x86_64-redhat-linux-gnu\nThread model: posix\n```\n\n```console\ng++ (GCC) 4.8.3 20140624 (Red Hat 4.8.3-1)\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n\n\u307e\u305fCPU\u306f Intel(R) Xeon(R) CPU W3530 @2.80GHz \u3092\u4f7f\u7528\u3002\n\n```command\nclang++ boost_range_speed.cpp -std=c++11 -O0 && ./a.out 2> /dev/null \n```\n\n```console\nnative        = 245\nrange         = 3287\nrange_adapter = 9412\n```\n\n```command\nclang++ boost_range_speed.cpp -std=c++11 -O1 && ./a.out 2> /dev/null\n```\n\n```console\nnative        = 78\nrange         = 1689\nrange_adapter = 3290\n```\n\nBoost.Range\u9045\uff08\u6c57\uff09\u3068\u601d\u3046\u3058\u3083\u3093\u3002\n\n\n```command\nclang++ boost_range_speed.cpp -std=c++11 -O2 && ./a.out 2> /dev/null\n```\n\n```console\nnative        = 98\nrange         = 91\nrange_adapter = 129\n```\n\n`-O2`\u3067\u540c\u7b49\u306a\u901f\u5ea6\u306b\u306a\u308b\u3002`range_adapter`\u306f\u6709\u610f\u306b\u9045\u3044\u3002\n\u4e00\u65b9g++\u3067\u306f\n\n```command\ng++ boost_range_speed.cpp -std=c++11 -O0 && ./a.out 2> /dev/null\n```\n\n```console\nnative        = 479\nrange         = 4051\nrange_adapter = 10088\n```\n\n```command\ng++ boost_range_speed.cpp -std=c++11 -O1 && ./a.out 2> /dev/null\n```\n\n```console\nnative        = 73\nrange         = 105\nrange_adapter = 113\n```\n\n\u3093\uff1f\u65e9\u304f\u306d\uff1f\n\n```command\ng++ boost_range_speed.cpp -std=c++11 -O2 && ./a.out 2> /dev/null\n```\n\n```console\nnative        = 71\nrange         = 68\nrange_adapter = 49\n```\n\n`range_adapter`\u306e\u304c\u65e9\u304f\u306a\u3063\u305f\u03a3(\u309c\u30ed\u309c;)!!\n\n\n## \u7d50\u8ad6\nfiltered\u3084transformed\u306e\u3088\u3046\u306a\u30a2\u30c0\u30d7\u30bf\u306f`-O2`\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306a\u3089\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306b\u306f\u306a\u3089\u306a\u3044\u3002\ng++\u3060\u3068\u305f\u307e\u306b\u3080\u3057\u308d\u901f\u3044\u3002\n\n\u3082\u3063\u3068\u8907\u96d1\u306a\u30eb\u30fc\u30d7\u3060\u3068\u3069\u3046\u306a\u308b\u304b\u306f\u4e0d\u660e\u3002\n"}