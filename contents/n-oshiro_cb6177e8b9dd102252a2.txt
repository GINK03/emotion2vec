{"context": "Meteor Guide\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u30fb\u30d1\u30c3\u30b1\u30fc\u30b8\u30fb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7\u3067\u3059\u3002\u500b\u4eba\u7684\u306b\u4f7f\u308f\u306a\u3055\u305d\u3046\u306a\u3082\u306e\u306f\u9664\u5916\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u691c\u7d22\u6027\u91cd\u8996\u30671\u30da\u30fc\u30b8\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\u968f\u6642\u66f4\u65b0\u3002\n\n Introduction\n\n# Meteor \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncurl https://install.meteor.com/ | sh\n\n# \u65b0\u898f Meteor \u30a2\u30d7\u30ea\u4f5c\u6210\nmeteor create myapp\n\n# \u30ed\u30fc\u30ab\u30eb\u3067 Meteor \u8d77\u52d5\ncd myapp\nmeteor npm install\nmeteor\n\n\n Code Style\n\nmeteor npm install --save-dev eslint-config-airbnb eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-plugin-jsx-a11y eslint\n\n\npackage.json\n{\n  ...\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"pretest\": \"npm run lint --silent\"\n  },\n  \"eslintConfig\": {\n    \"plugins\": [\n      \"meteor\"\n    ],\n    \"extends\": [\n      \"airbnb\",\n      \"plugin:meteor/recommended\"\n    ],\n    \"rules\": {\n      \"meteor/eventmap-params\": [\n        2, { \"templateInstanceParamName\": \"instance\" }\n      ],\n      \"import/no-unresolved\": [\n        2, { \"ignore\": [\"^meteor/\"] }\n      ]\n    }\n  }\n}\n\n\n# ESLint \u5b9f\u884c\nmeteor npm run lint\n\n# for Atom\napm install language-babel\napm install linter\napm install linter-eslint\n\n\n Application Structure\n\n\nIntroduction to using import and export\nimport '../../api/lists/methods.js';  // import from relative path\nimport '/imports/startup/client';     // import module with index.js from absolute path\nimport './loading.html';              // import Blaze compiled HTML from relative path\nimport '/imports/ui/style.css';       // import CSS from absolute path\n\nexport const listRenderHold = LaunchScreen.hold();  // named export\nexport { Todos };                                   // named export\nexport default Lists;                               // default export\nexport default new Collection('lists');             // default export\n\n\nExample directory layout\nimports/\n  startup/\n    client/\n      index.js                 # import client startup through a single index entry point\n      routes.js                # set up all routes in the app\n      useraccounts-configuration.js # configure login templates\n    server/\n      fixtures.js              # fill the DB with example data on startup\n      index.js                 # import server startup through a single index entry point\n\n  api/\n    lists/                     # a unit of domain logic\n      server/\n        publications.js        # all list-related publications\n        publications.tests.js  # tests for the list publications\n      lists.js                 # definition of the Lists collection\n      lists.tests.js           # tests for the behavior of that collection\n      methods.js               # methods related to lists\n      methods.tests.js         # tests for those methods\n\n  ui/\n    components/                # all reusable components in the application\n                               # can be split by domain if there are many\n    layouts/                   # wrapper components for behaviour and visuals\n    pages/                     # entry points for rendering used by the router\n\nclient/\n  main.js                      # client entry point, imports all client code\n\nserver/\n  main.js                      # server entry point, imports all server code\n\n\n Migrating to Meteor 1.3\n\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n Collections and Schemas\n\n// \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\nTodos = new Mongo.Collection('Todos');\n\n// \u30ed\u30fc\u30ab\u30eb\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\nSelectedTodos = new Mongo.Collection(null);\n\n\nSimpleSchema\nmeteor add aldeed:simple-schema\n\nLists.schema = new SimpleSchema({\n  name: {type: String},\n  incompleteCount: {type: Number, defaultValue: 0},\n  userId: {type: String, regEx: SimpleSchema.RegEx.Id, optional: true}\n});\n\n\nCollection2\nmeteor add aldeed:collection2\n\nLists.attachSchema(Lists.schema);\n\n\ndefaultValue and data cleaning\nclass ListsCollection extends Mongo.Collection {\n  insert(list, callback) {\n    if (!list.name) {\n      let nextLetter = 'A';\n      list.name = `List ${nextLetter}`;\n\n      while (!!this.findOne({name: list.name})) {\n        // not going to be too smart here, can go past Z\n        nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n        list.name = `List ${nextLetter}`;\n      }\n    }\n\n    // Call the original `insert` method, which will validate\n    // against the schema\n    return super.insert(list, callback);\n  }\n}\n\nLists = new ListsCollection('Lists');\n\n\nHooks on insert/update/remove\nclass ListsCollection extends Mongo.Collection {\n  // ...\n  remove(selector, callback) {\n    Package.todos.Todos.remove({listId: selector});\n    return super.remove(selector, callback);\n  }\n}\n\n\nMigrating to a new schema\nmeteor add percolate:migrations\n\nMigrations.add({\n  version: 1,\n  up() {\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id})).count();\n      Lists.update(list._id, {$set: {todoCount}});\n    });\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n\n\nBulk changes\nMigrations.add({\n  version: 1,\n  up() {\n    // This is how to get access to the raw MongoDB node collection that the Meteor server collection wraps\n    const batch = Lists.rawCollection().initializeUnorderedBulkOp();\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id}).count();\n      // We have to use pure MongoDB syntax here, thus the `{_id: X}`\n      batch.find({_id: list._id}).updateOne({$set: {todoCount}});\n    });\n\n    // We need to wrap the async function to get a synchronous API that migrations expects\n    const execute = Meteor.wrapAsync(batch.execute, batch);\n    return execute();\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n\n\nRunning migrations\n// After running `meteor shell` on the command line:\nMigrations.migrateTo('latest');\n\n\nBreaking schema changes\njavascript\u2028// The \"0\" migration is the unmigrated (before the first migration) state\nMigrations.migrateTo(0);\n\n\nCollection helpers\nmeteor add dburles:collection-helpers\n\nLists.helpers({\n  // A list is considered to be private if it has a userId set\n  isPrivate() {\n    return !!this.userId;\n  }\n});\n\nconst list = Lists.findOne();\nif (list.isPrivate()) {\n  console.log('The first list is private!');\n}\n\n\nAssociation helpers\nLists.helpers({\n  todos() {\n    return Todos.find({listId: this._id}, {sort: {createdAt: -1}});\n  }\n});\n\nconst list = Lists.findOne();\nconsole.log(`The first list has ${list.todos().count()} todos`);\n\n\n Publications and Data Loading\n\n\nDefining a publication\nMeteor.publish('lists.public', function() {\n  return Lists.find({\n    userId: {$exists: false}\n  }, {\n    fields: Lists.publicFields\n  });\n});\n\nMeteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n\nMeteor.publish('todos.inList', function(listId) {\n  // We need to check the `listId` is the type we expect\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  // ...\n});\n\n\nSubscribing to data\nconst handle = Meteor.subscribe('lists.public');\n\nconst handle2 = Meteor.subscribe('todos.inList', list._id);\n\n\nSubscribe in UI components\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n\n\nSubscription readiness\nconst handle = Meteor.subscribe('lists.public');\nTracker.autorun(() => {\n  const isReady = handle.ready();\n  console.log(`Handle is ${isReady ? 'ready' : 'not ready'}`);  \n});\n\n\nFindFromPublication\nmeteor add percolate:find-from-publication\n\n\nPublishCounts\nmeteor add tmeasday:publish-counts \n\nMeteor.publish('Lists.todoCount', function({ listId }) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  Counts.publish(this, `Lists.todoCount.${listId}`, Todos.find({listId}));\n});\n\nCounts.get(`Lists.todoCount.${listId}`)\n\n\nReactiveVar / ReactiveDict\nmeteor add reactive-var\nmeteor add reactive-dict\n\n\nPublishComposite\nmeteor add reywood:publish-composite\n\n\nLoading data from a REST endpoint with a publication\nconst POLL_INTERVAL = 5000;\n\nMeteor.publish('polled-publication', function() {\n  const publishedKeys = {};\n\n  const poll = () => {\n    // Let's assume the data comes back as an array of JSON documents, with an _id field, for simplicity\n    const data = HTTP.get(REST_URL, REST_OPTIONS);\n\n    data.forEach((doc) => {\n      if (publishedKeys[doc._id]) {\n        this.changed(COLLECTION_NAME, doc._id, doc);\n      } else {\n        publishedKeys[doc._id] = true;\n        if (publishedKeys[doc._id]) {\n          this.added(COLLECTION_NAME, doc._id, doc);\n        }\n      }\n    });\n  };\n\n  poll();\n  this.ready();\n\n  const interval = Meteor.setInterval(poll, POLL_INTERVAL);\n\n  this.onStop(() => {\n    Meteor.clearInterval(interval);\n  });\n});\n\n\nsimple:rest \u30d1\u30c3\u30b1\u30fc\u30b8\nmeteor add simple:rest\n\n\n Methods\n\n\nDefining\nMeteor.methods({\n  'todos.updateText'({ todoId, newText }) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate({ todoId, newText });\n\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n\n\nCalling\nMeteor.call('todos.updateText', {\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) => {\n  if (err) {\n    alert(err);\n  } else {\n    // success!\n  }\n});\n\n\nAdvanced Methods with mdg:validated-method\nmeteor add mdg:validated-method\n\nexport const updateText = new ValidatedMethod({\n  name: 'todos.updateText',\n  validate: new SimpleSchema({\n    todoId: { type: String },\n    newText: { type: String }\n  }).validator(),\n  run({ todoId, newText }) {\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n\n\nHandling errors\n// Call the Method\nupdateText.call({\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) => {\n  if (err) {\n    if (err.error === 'todos.updateText.unauthorized') {\n      // Displaying an alert is probably not what you would do in\n      // a real app; you should have some nice UI to display this\n      // error, and probably use an i18n library to generate the\n      // message from the error code.\n      alert('You aren\\'t allowed to edit this todo item');\n    } else {\n      // Unexpected error, handle it in the UI somehow\n    }\n  } else {\n    // success!\n  }\n});\n\n\n Users and Accounts\n\nmeteor add accounts-ui\n\n{{> loginButtons}}\n\n# pick one or more of the below\nmeteor add accounts-password\nmeteor add accounts-facebook\nmeteor add accounts-google\nmeteor add accounts-github\nmeteor add accounts-twitter\nmeteor add accounts-meetup\nmeteor add accounts-meteor-developer\n\nmeteor add useraccounts:core useraccounts:unstyled\n\nmeteor add useraccounts:flow-routing\n\n\nPublishing custom data\nMeteor.publish('Meteor.users.initials', function ({ userIds }) {\n  // Validate the arguments to be what we expect\n  new SimpleSchema({\n    userIds: { type: [String] }\n  }).validate({ userIds });\n\n  // Select only the users that match the array of IDs passed in\n  const selector = {\n    _id: { $in: userIds }\n  };\n\n  // Only return one field, `initials`\n  const options = {\n    fields: { initials: 1 }\n  };\n\n  return Meteor.users.find(selector, options);\n});\n\n\nRoles and permissions\n\nalanning:roles \u30d1\u30c3\u30b1\u30fc\u30b8\nmeteor add alanning:roles\n\n// Give Alice the 'admin' role\nRoles.addUsersToRoles(aliceUserId, 'admin', Roles.GLOBAL_GROUP);\n\n// Give Bob the 'moderator' role for a particular category\nRoles.addUsersToRoles(bobsUserId, 'moderator', categoryId);\n\nconst forumPost = Posts.findOne(postId);\n\nconst canDelete = Roles.userIsInRole(userId,\n  ['admin', 'moderator'], forumPost.categoryId);\n\nif (! canDelete) {\n  throw new Meteor.Error('unauthorized',\n    'Only admins and moderators can delete posts.');\n}\n\nPosts.remove(postId);\n\n\nPer-document permissions\nLists.helpers({\n  // ...\n  editableBy(userId) {\n    if (!this.userId) {\n      return true;\n    }\n\n    return this.userId === userId;\n  },\n  // ...\n});\n\nconst list = Lists.findOne(listId);\n\nif (! list.editableBy(userId)) {\n  throw new Meteor.Error('unauthorized',\n    'Only list owners can edit private lists.');\n}\n\n\n Testing | Meteor Guide\n\nmeteor add practicalmeteor:mocha\n\nmeteor add xolvio:cleaner\n\nmeteor add dburles:factory\n\nmeteor add hwillson:stub-collections\n\nmeteor add velocity:meteor-stubs\n\n# for React\nmeteor npm install -D enzyme\n\n# Testing publications\nmeteor add johanbrook:publication-collector\n\n# Running unit tests\nmeteor test --driver-package practicalmeteor:mocha --port 3100\n\n# Running full-app tests\nmeteor test --full-app --driver-package practicalmeteor:mocha\n\n\nAcceptance testing\n# node >= 4\nnpm install --global chimp\n\n\npackage.json\n{\n  \"scripts\": {\n    \"chimp-watch\": \"chimp --ddp=http://localhost:3000 --watch --mocha --path=tests\",\n    \"chimp-test\": \"chimp --mocha --path=tests\"\n  }\n}\n\n\n\nRunning acceptance tests\n# In one terminal\nmeteor\n\n# In another\nmeteor npm run chimp-watch\n\n\nCreating data\nmeteor add tmeasday:acceptance-test-driver\nmeteor test --full-app --driver-package tmeasday:acceptance-test-driver\n\n\nContinuous Integration\n\nCommand line\nmeteor add dispatch:mocha-phantomjs\nmeteor test --once --driver-package dispatch:mocha-phantomjs\n\n{\n  \"scripts\": {\n    \"test\": \"meteor test --once --driver-package dispatch:mocha-phantomjs\"\n  }\n}\n\n\nCircleCI\n\ncircle.yml\nmachine:\n  node:\n    version: 0.10.43\ndependencies:\n  override:\n    - curl https://install.meteor.com | /bin/sh\n    - npm install\ncheckout:\n  post:\n    - git submodule update --init\n\n\n\n URLs and Routing\n\nmeteor add kadira:flow-router\nmeteor add zimme:active-route\nmeteor add arillo:flow-router-helpers\n\n# for Blaze\nmeteor add kadira:blaze-layout\n\n\n User Interfaces\n\n# Internationalization\nmeteor add tap:i18n \n\n# Animating changes in visiblity\nmeteor add percolate:momentum\n\n\n Blaze\n\n\nUse a reactive dict for state\nmeteor add reactive-dict\n\nTemplate.Lists_show.onCreated(function() {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    editing: false,\n    editingTodo: false\n  });\n});\n\n\nAttach functions to the instance\nimport {\n  updateName,\n} from '../../api/lists/methods.js';\n\nTemplate.Lists_show.onCreated(function() {\n  this.saveList = () => {\n    this.state.set('editing', false);\n\n    updateName.call({\n      listId: this.data.list._id,\n      newName: this.$('[name=name]').val()\n    }, (err) => {\n      err && alert(err.error);\n    });\n  };\n});\n\nTemplate.Lists_show.events({\n  'submit .js-edit-form'(event, instance) {\n    event.preventDefault();\n    instance.saveList();\n  }\n});\n\n\nScope DOM lookups to the template instance\nTemplate.Lists_show.events({\n  'click .js-todo-add'(event, instance) {\n    instance.$('.js-todo-new input').focus();\n  }\n});\n\n\nPassing HTML content as a template argument\nmeteor add kadira:blaze-layout\n\n{{> Template.dynamic templateName dataContext}}\n\n\nControlling re-rendering\nmeteor add peerlibrary:computed-field\n\n\n React\n\n# npm \u3067 React \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmeteor npm install --save react react-dom\n\n# Using 3rd party packages\nmeteor npm install --save griddle-react\n\n# Blaze \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\nmeteor remove blaze-html-templates\nmeteor add static-html\n\n# React \u5185\u3067 Blaze \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\nmeteor add gadicc:blaze-react-component\n\n# ReactMeteorData\nmeteor add react-meteor-data\nmeteor npm install --save react-addons-pure-render-mixin\n\n# Routing\nmeteor add kadira:flow-router\nmeteor npm install --save react-mounter\n## or\nmeteor npm install --save react-router\n\n# Using React in Atmosphere Packages\nmeteor add tmeasday:check-npm-versions\n\n\n Angular\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n Atmosphere vs. npm\n\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n Using Atmosphere Packages\n\n# Searching for packages\nmeteor search <WORD>\nmeteor show kadira:flow-router\n\n# Installing Atmosphere Packages\nmeteor add <PACKAGE>\n\n# See all the Atmosphere packages\nmeteor list\n\n# Remove an unwanted Atmosphere package\nmeteor remove <PACKAGE>\n\n\n Writing Atmosphere Packages\n\n# Create a package\nmeteor create --package my-package\n\n# Testing packages\nmeteor test-packages ./ --driver-package practicalmeteor:mocha\n\n# Publish a package\nmeteor publish\n\n\n Using npm Packages\n\nmeteor npm install\n\nmeteor npm install --save meteor-node-stubs\nmeteor npm install --save moment\n\nmeteor npm shrinkwrap\n\n\nShrinkpack\nnpm install -g shrinkpack\n\nmeteor npm install moment\nmeteor npm shrinkwrap\nshrinkpack\n\n\n Writing npm Packages\n\nmkdir my-package\ncd my-package/\nmeteor npm init\n\n\nIncluding in your app\n# Inside node_modules\ncd my-app/node_modules/\nmkdir my-package\ncd my-package/\nmeteor npm init\ngit add -f ./ # or use a git submodule\n\n# npm link\ncd ~/\nmkdir my-package\ncd my-package/\nmeteor npm init\ncd ~/my-app/\nmeteor npm link ~/my-package\n\n\n Mobile\n\nmeteor add-platform ios\nsudo xcodebuild -license accept\n\nmeteor add-platform android\nmeteor remove-platform ios android\nmeteor list-platforms\n\nmeteor run ios\nmeteor run ios-device\nmeteor run android\nmeteor run android-device\n\n# Installing plugins\nmeteor add cordova:cordova-plugin-camera@1.2.0\n\n# Installing a plugin from Git\nmeteor add cordova:com.phonegap.plugins.facebookconnect@https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec\n\n# Installing a plugin from the local file system\nmeteor add cordova:cordova-plugin-underdevelopment@file://../plugins/cordova-plugin-underdevelopment\n\n# Removing directly installed plugins\nmeteor remove cordova:cordova-plugin-camera\nmeteor remove cordova:com.phonegap.plugins.facebookconnect\nmeteor remove cordova:cordova-plugin-underdevelopment\n\n# Domain whitelisting\n\n\n Build System\n\nmeteor add ecmascript\n\n# CoffeeScript\nmeteor add coffeescript\n\n# Sass/SCSS\nmeteor add fourseven:scss\n\n# LESS\nmeteor add less\n\n# Stylus\nmetoer add stylus\n\n\nPostCSS and AutoPrefixer\nmeteor remove standard-minifier-css\nmeteor add juliancwirko:postcss\n\n\npackage.json\n{\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.3.1\"\n  },\n  \"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {\"browsers\": [\"last 2 versions\"]}\n    }\n  }\n}\n\n\n\n Security\n\nmeteor add check\nmeteor add aldeed:simple-schema\nmeteor remove autopublish insecure\n\n\nSecuring API keys\n{\n  \"facebook\": {\n    \"clientId\": \"12345\",\n    \"secret\": \"1234567\"\n  }\n}\n\n# Pass development settings when running your app locally\nmeteor --settings development.json\n\n# Pass production settings when deploying your app to Galaxy\nmeteor deploy myapp.com --settings production.json\n\n\nAPI keys for OAuth\nmeteor add service-configuration\n\nServiceConfiguration.configurations.upsert({\n  service: \"facebook\"\n}, {\n  $set: {\n    clientId: Meteor.settings.facebook.clientId,\n    loginStyle: \"popup\",\n    secret: Meteor.settings.facebook.secret\n  }\n});\n\n\nSSL\nmeteor add force-ssl\n\n\n Deployment and Monitoring\n\n\nCustom deployment\n# for example if deploying to a Ubuntu linux server:\nnpm install --production\nmeteor build /path/to/build --architecture os.linux.x86_64\n\ncd my_directory\n(cd programs/server && npm install)\nMONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://my-app.com node main.js\n\n\nMonitoring users via analytics\nmeteor add okgrow:analytics\n\n\nsettings.json\n{\n  \"public\": {\n    \"analyticsSettings\": {\n      // Add your analytics tracking id's here\n      \"Google Analytics\" : {\"trackingId\": \"Your tracking ID\"}\n    }\n  }\n}\n\n\n\nEnabling SEO\n# for Prerender.io\nmeteor add dfischer:prerenderio\n\n# for Galaxy\nmeteor add mdg:seo\n\n# To set <title> tags and other <head> content\nmeteor add kadira:dochead\n\n\u3072\u3068\u307e\u305a\u3053\u3053\u307e\u3067\u3002\n\n[Meteor Guide](http://guide.meteor.com/)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u30fb\u30d1\u30c3\u30b1\u30fc\u30b8\u30fb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7\u3067\u3059\u3002\u500b\u4eba\u7684\u306b\u4f7f\u308f\u306a\u3055\u305d\u3046\u306a\u3082\u306e\u306f\u9664\u5916\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u691c\u7d22\u6027\u91cd\u8996\u30671\u30da\u30fc\u30b8\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\u968f\u6642\u66f4\u65b0\u3002\n\n\n## :book: [Introduction](http://guide.meteor.com/)\n\n\n```bash\n# Meteor \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncurl https://install.meteor.com/ | sh\n\n# \u65b0\u898f Meteor \u30a2\u30d7\u30ea\u4f5c\u6210\nmeteor create myapp\n\n# \u30ed\u30fc\u30ab\u30eb\u3067 Meteor \u8d77\u52d5\ncd myapp\nmeteor npm install\nmeteor\n```\n\n## :book: [Code Style](http://guide.meteor.com/code-style.html)\n\n```bash\nmeteor npm install --save-dev eslint-config-airbnb eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-plugin-jsx-a11y eslint\n```\n\n```json:package.json\n{\n  ...\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"pretest\": \"npm run lint --silent\"\n  },\n  \"eslintConfig\": {\n    \"plugins\": [\n      \"meteor\"\n    ],\n    \"extends\": [\n      \"airbnb\",\n      \"plugin:meteor/recommended\"\n    ],\n    \"rules\": {\n      \"meteor/eventmap-params\": [\n        2, { \"templateInstanceParamName\": \"instance\" }\n      ],\n      \"import/no-unresolved\": [\n        2, { \"ignore\": [\"^meteor/\"] }\n      ]\n    }\n  }\n}\n```\n\n```bash\n# ESLint \u5b9f\u884c\nmeteor npm run lint\n```\n\n\n```bash\n# for Atom\napm install language-babel\napm install linter\napm install linter-eslint\n```\n\n## :book: [Application Structure](http://guide.meteor.com/structure.html)\n\n### Introduction to using import and export\n\n```javascript\nimport '../../api/lists/methods.js';  // import from relative path\nimport '/imports/startup/client';     // import module with index.js from absolute path\nimport './loading.html';              // import Blaze compiled HTML from relative path\nimport '/imports/ui/style.css';       // import CSS from absolute path\n```\n\n```javascript\nexport const listRenderHold = LaunchScreen.hold();  // named export\nexport { Todos };                                   // named export\nexport default Lists;                               // default export\nexport default new Collection('lists');             // default export\n```\n\n### Example directory layout\n\n```\nimports/\n  startup/\n    client/\n      index.js                 # import client startup through a single index entry point\n      routes.js                # set up all routes in the app\n      useraccounts-configuration.js # configure login templates\n    server/\n      fixtures.js              # fill the DB with example data on startup\n      index.js                 # import server startup through a single index entry point\n\n  api/\n    lists/                     # a unit of domain logic\n      server/\n        publications.js        # all list-related publications\n        publications.tests.js  # tests for the list publications\n      lists.js                 # definition of the Lists collection\n      lists.tests.js           # tests for the behavior of that collection\n      methods.js               # methods related to lists\n      methods.tests.js         # tests for those methods\n\n  ui/\n    components/                # all reusable components in the application\n                               # can be split by domain if there are many\n    layouts/                   # wrapper components for behaviour and visuals\n    pages/                     # entry points for rendering used by the router\n\nclient/\n  main.js                      # client entry point, imports all client code\n\nserver/\n  main.js                      # server entry point, imports all server code\n```\n\n## :book: [Migrating to Meteor 1.3](http://guide.meteor.com/1.3-migration.html)\n\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n## :book: [Collections and Schemas](http://guide.meteor.com/collections.html)\n\n```javascript\n// \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\nTodos = new Mongo.Collection('Todos');\n```\n\n```javascript\n// \u30ed\u30fc\u30ab\u30eb\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\nSelectedTodos = new Mongo.Collection(null);\n```\n\n### SimpleSchema\n\n```bash\nmeteor add aldeed:simple-schema\n```\n\n```javascript\nLists.schema = new SimpleSchema({\n  name: {type: String},\n  incompleteCount: {type: Number, defaultValue: 0},\n  userId: {type: String, regEx: SimpleSchema.RegEx.Id, optional: true}\n});\n```\n\n### Collection2\n\n```bash\nmeteor add aldeed:collection2\n```\n\n```javascript\nLists.attachSchema(Lists.schema);\n```\n\n#### defaultValue and data cleaning\n\n```javascript\nclass ListsCollection extends Mongo.Collection {\n  insert(list, callback) {\n    if (!list.name) {\n      let nextLetter = 'A';\n      list.name = `List ${nextLetter}`;\n\n      while (!!this.findOne({name: list.name})) {\n        // not going to be too smart here, can go past Z\n        nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n        list.name = `List ${nextLetter}`;\n      }\n    }\n\n    // Call the original `insert` method, which will validate\n    // against the schema\n    return super.insert(list, callback);\n  }\n}\n\nLists = new ListsCollection('Lists');\n```\n\n### Hooks on insert/update/remove\n\n```javascript\nclass ListsCollection extends Mongo.Collection {\n  // ...\n  remove(selector, callback) {\n    Package.todos.Todos.remove({listId: selector});\n    return super.remove(selector, callback);\n  }\n}\n```\n\n### Migrating to a new schema\n\n```bash\nmeteor add percolate:migrations\n```\n\n```javascript\nMigrations.add({\n  version: 1,\n  up() {\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id})).count();\n      Lists.update(list._id, {$set: {todoCount}});\n    });\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n```\n\n#### Bulk changes\n\n```javascript\nMigrations.add({\n  version: 1,\n  up() {\n    // This is how to get access to the raw MongoDB node collection that the Meteor server collection wraps\n    const batch = Lists.rawCollection().initializeUnorderedBulkOp();\n    Lists.find({todoCount: {$exists: false}}).forEach(list => {\n      const todoCount = Todos.find({listId: list._id}).count();\n      // We have to use pure MongoDB syntax here, thus the `{_id: X}`\n      batch.find({_id: list._id}).updateOne({$set: {todoCount}});\n    });\n\n    // We need to wrap the async function to get a synchronous API that migrations expects\n    const execute = Meteor.wrapAsync(batch.execute, batch);\n    return execute();\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n```\n\n#### Running migrations\n\n```javascript\n// After running `meteor shell` on the command line:\nMigrations.migrateTo('latest');\n```\n\n#### Breaking schema changes\n\n```javascript\u2028// The \"0\" migration is the unmigrated (before the first migration) state\nMigrations.migrateTo(0);\n```\n\n### Collection helpers\n\n```bash\nmeteor add dburles:collection-helpers\n```\n\n```javascript\nLists.helpers({\n  // A list is considered to be private if it has a userId set\n  isPrivate() {\n    return !!this.userId;\n  }\n});\n```\n\n```javascript\nconst list = Lists.findOne();\nif (list.isPrivate()) {\n  console.log('The first list is private!');\n}\n```\n\n#### Association helpers\n\n```javascript\nLists.helpers({\n  todos() {\n    return Todos.find({listId: this._id}, {sort: {createdAt: -1}});\n  }\n});\n```\n\n```javascript\nconst list = Lists.findOne();\nconsole.log(`The first list has ${list.todos().count()} todos`);\n```\n\n\n## :book: [Publications and Data Loading](http://guide.meteor.com/data-loading.html)\n\n### Defining a publication\n\n```javascript\nMeteor.publish('lists.public', function() {\n  return Lists.find({\n    userId: {$exists: false}\n  }, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n```javascript\nMeteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n```\n\n```javascript\nMeteor.publish('todos.inList', function(listId) {\n  // We need to check the `listId` is the type we expect\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  // ...\n});\n```\n\n### Subscribing to data\n\n```javascript\nconst handle = Meteor.subscribe('lists.public');\n```\n\n```javascript\nconst handle2 = Meteor.subscribe('todos.inList', list._id);\n```\n\n#### Subscribe in UI components\n\n```javascript\nTemplate.Lists_show_page.onCreated(function() {\n  this.getListId = () => FlowRouter.getParam('_id');\n\n  this.autorun(() => {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n```\n\n#### Subscription readiness\n\n```javascript\nconst handle = Meteor.subscribe('lists.public');\nTracker.autorun(() => {\n  const isReady = handle.ready();\n  console.log(`Handle is ${isReady ? 'ready' : 'not ready'}`);  \n});\n```\n\n### FindFromPublication\n\n```bash\nmeteor add percolate:find-from-publication\n```\n\n### PublishCounts\n\n```bash\nmeteor add tmeasday:publish-counts \n```\n\n```javascript\nMeteor.publish('Lists.todoCount', function({ listId }) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  Counts.publish(this, `Lists.todoCount.${listId}`, Todos.find({listId}));\n});\n```\n\n```javascript\nCounts.get(`Lists.todoCount.${listId}`)\n```\n\n### ReactiveVar / ReactiveDict\n\n```bash\nmeteor add reactive-var\nmeteor add reactive-dict\n```\n\n### PublishComposite\n\n```bash\nmeteor add reywood:publish-composite\n```\n\n### Loading data from a REST endpoint with a publication\n\n```javascript\nconst POLL_INTERVAL = 5000;\n\nMeteor.publish('polled-publication', function() {\n  const publishedKeys = {};\n\n  const poll = () => {\n    // Let's assume the data comes back as an array of JSON documents, with an _id field, for simplicity\n    const data = HTTP.get(REST_URL, REST_OPTIONS);\n\n    data.forEach((doc) => {\n      if (publishedKeys[doc._id]) {\n        this.changed(COLLECTION_NAME, doc._id, doc);\n      } else {\n        publishedKeys[doc._id] = true;\n        if (publishedKeys[doc._id]) {\n          this.added(COLLECTION_NAME, doc._id, doc);\n        }\n      }\n    });\n  };\n\n  poll();\n  this.ready();\n\n  const interval = Meteor.setInterval(poll, POLL_INTERVAL);\n\n  this.onStop(() => {\n    Meteor.clearInterval(interval);\n  });\n});\n```\n\n### [simple:rest](https://atmospherejs.com/simple/rest) \u30d1\u30c3\u30b1\u30fc\u30b8\n\n```bash\nmeteor add simple:rest\n```\n\n\n## :book: [Methods](http://guide.meteor.com/methods.html)\n\n### Defining\n\n```javascript\nMeteor.methods({\n  'todos.updateText'({ todoId, newText }) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate({ todoId, newText });\n\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n```\n\n### Calling\n\n```javascript\nMeteor.call('todos.updateText', {\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) => {\n  if (err) {\n    alert(err);\n  } else {\n    // success!\n  }\n});\n```\n\n\n### Advanced Methods with mdg:validated-method\n\n```bash\nmeteor add mdg:validated-method\n```\n\n```javascript\nexport const updateText = new ValidatedMethod({\n  name: 'todos.updateText',\n  validate: new SimpleSchema({\n    todoId: { type: String },\n    newText: { type: String }\n  }).validator(),\n  run({ todoId, newText }) {\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n```\n\n### Handling errors\n\n```javascript\n// Call the Method\nupdateText.call({\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) => {\n  if (err) {\n    if (err.error === 'todos.updateText.unauthorized') {\n      // Displaying an alert is probably not what you would do in\n      // a real app; you should have some nice UI to display this\n      // error, and probably use an i18n library to generate the\n      // message from the error code.\n      alert('You aren\\'t allowed to edit this todo item');\n    } else {\n      // Unexpected error, handle it in the UI somehow\n    }\n  } else {\n    // success!\n  }\n});\n```\n\n## :book: [Users and Accounts](http://guide.meteor.com/accounts.html)\n\n```bash\nmeteor add accounts-ui\n```\n\n```html\n{{> loginButtons}}\n```\n\n```bash\n# pick one or more of the below\nmeteor add accounts-password\nmeteor add accounts-facebook\nmeteor add accounts-google\nmeteor add accounts-github\nmeteor add accounts-twitter\nmeteor add accounts-meetup\nmeteor add accounts-meteor-developer\n```\n\n```bash\nmeteor add useraccounts:core useraccounts:unstyled\n```\n\n```bash\nmeteor add useraccounts:flow-routing\n```\n\n### Publishing custom data\n\n```javascript\nMeteor.publish('Meteor.users.initials', function ({ userIds }) {\n  // Validate the arguments to be what we expect\n  new SimpleSchema({\n    userIds: { type: [String] }\n  }).validate({ userIds });\n\n  // Select only the users that match the array of IDs passed in\n  const selector = {\n    _id: { $in: userIds }\n  };\n\n  // Only return one field, `initials`\n  const options = {\n    fields: { initials: 1 }\n  };\n\n  return Meteor.users.find(selector, options);\n});\n```\n\n### Roles and permissions\n\n#### [alanning:roles](https://atmospherejs.com/alanning/roles) \u30d1\u30c3\u30b1\u30fc\u30b8\n\n```bash\nmeteor add alanning:roles\n```\n\n```javascript\n// Give Alice the 'admin' role\nRoles.addUsersToRoles(aliceUserId, 'admin', Roles.GLOBAL_GROUP);\n\n// Give Bob the 'moderator' role for a particular category\nRoles.addUsersToRoles(bobsUserId, 'moderator', categoryId);\n```\n\n```javascript\nconst forumPost = Posts.findOne(postId);\n\nconst canDelete = Roles.userIsInRole(userId,\n  ['admin', 'moderator'], forumPost.categoryId);\n\nif (! canDelete) {\n  throw new Meteor.Error('unauthorized',\n    'Only admins and moderators can delete posts.');\n}\n\nPosts.remove(postId);\n```\n\n#### Per-document permissions\n\n```javascript\nLists.helpers({\n  // ...\n  editableBy(userId) {\n    if (!this.userId) {\n      return true;\n    }\n\n    return this.userId === userId;\n  },\n  // ...\n});\n```\n\n```javascript\nconst list = Lists.findOne(listId);\n\nif (! list.editableBy(userId)) {\n  throw new Meteor.Error('unauthorized',\n    'Only list owners can edit private lists.');\n}\n```\n\n\n## :book: [Testing | Meteor Guide](http://guide.meteor.com/testing.html)\n\n```bash\nmeteor add practicalmeteor:mocha\n\nmeteor add xolvio:cleaner\n\nmeteor add dburles:factory\n\nmeteor add hwillson:stub-collections\n\nmeteor add velocity:meteor-stubs\n\n# for React\nmeteor npm install -D enzyme\n\n# Testing publications\nmeteor add johanbrook:publication-collector\n```\n\n```bash\n# Running unit tests\nmeteor test --driver-package practicalmeteor:mocha --port 3100\n\n# Running full-app tests\nmeteor test --full-app --driver-package practicalmeteor:mocha\n```\n\n### Acceptance testing\n\n```bash\n# node >= 4\nnpm install --global chimp\n```\n\n```json:package.json\n{\n  \"scripts\": {\n    \"chimp-watch\": \"chimp --ddp=http://localhost:3000 --watch --mocha --path=tests\",\n    \"chimp-test\": \"chimp --mocha --path=tests\"\n  }\n}\n```\n\n#### Running acceptance tests\n\n```bash\n# In one terminal\nmeteor\n\n# In another\nmeteor npm run chimp-watch\n```\n\n### Creating data\n\n```bash\nmeteor add tmeasday:acceptance-test-driver\nmeteor test --full-app --driver-package tmeasday:acceptance-test-driver\n```\n\n### Continuous Integration\n\n#### Command line\n\n```bash\nmeteor add dispatch:mocha-phantomjs\nmeteor test --once --driver-package dispatch:mocha-phantomjs\n```\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"meteor test --once --driver-package dispatch:mocha-phantomjs\"\n  }\n}\n```\n\n#### CircleCI\n\n```yaml:circle.yml\nmachine:\n  node:\n    version: 0.10.43\ndependencies:\n  override:\n    - curl https://install.meteor.com | /bin/sh\n    - npm install\ncheckout:\n  post:\n    - git submodule update --init\n```\n\n\n\n## :book: [URLs and Routing](http://guide.meteor.com/routing.html)\n\n```bash\nmeteor add kadira:flow-router\nmeteor add zimme:active-route\nmeteor add arillo:flow-router-helpers\n\n# for Blaze\nmeteor add kadira:blaze-layout\n```\n\n## :book: [User Interfaces](http://guide.meteor.com/ui-ux.html)\n\n```bash\n# Internationalization\nmeteor add tap:i18n \n\n# Animating changes in visiblity\nmeteor add percolate:momentum\n```\n\n## :book: [Blaze](http://guide.meteor.com/blaze.html)\n\n### Use a reactive dict for state\n\n```bash\nmeteor add reactive-dict\n```\n\n```javascript\nTemplate.Lists_show.onCreated(function() {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    editing: false,\n    editingTodo: false\n  });\n});\n```\n\n### Attach functions to the instance\n\n```javascript\nimport {\n  updateName,\n} from '../../api/lists/methods.js';\n\nTemplate.Lists_show.onCreated(function() {\n  this.saveList = () => {\n    this.state.set('editing', false);\n\n    updateName.call({\n      listId: this.data.list._id,\n      newName: this.$('[name=name]').val()\n    }, (err) => {\n      err && alert(err.error);\n    });\n  };\n});\n```\n\n```javascript\nTemplate.Lists_show.events({\n  'submit .js-edit-form'(event, instance) {\n    event.preventDefault();\n    instance.saveList();\n  }\n});\n```\n\n### Scope DOM lookups to the template instance\n\n```javascript\nTemplate.Lists_show.events({\n  'click .js-todo-add'(event, instance) {\n    instance.$('.js-todo-new input').focus();\n  }\n});\n```\n\n### Passing HTML content as a template argument\n\n```bash\nmeteor add kadira:blaze-layout\n```\n\n```javascript\n{{> Template.dynamic templateName dataContext}}\n```\n\n### Controlling re-rendering\n\n```bash\nmeteor add peerlibrary:computed-field\n```\n\n\n## :book: [React](http://guide.meteor.com/react.html)\n\n```bash\n# npm \u3067 React \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmeteor npm install --save react react-dom\n\n# Using 3rd party packages\nmeteor npm install --save griddle-react\n\n# Blaze \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\nmeteor remove blaze-html-templates\nmeteor add static-html\n\n# React \u5185\u3067 Blaze \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\nmeteor add gadicc:blaze-react-component\n\n# ReactMeteorData\nmeteor add react-meteor-data\nmeteor npm install --save react-addons-pure-render-mixin\n\n# Routing\nmeteor add kadira:flow-router\nmeteor npm install --save react-mounter\n## or\nmeteor npm install --save react-router\n\n# Using React in Atmosphere Packages\nmeteor add tmeasday:check-npm-versions\n```\n\n\n## :book: Angular\n\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n## :book: [Atmosphere vs. npm](http://guide.meteor.com/atmosphere-vs-npm.html)\n\n\u98db\u3070\u3057\u307e\u3059\u3002\n\n## :book: [Using Atmosphere Packages](http://guide.meteor.com/using-atmosphere-packages.html)\n\n```bash\n# Searching for packages\nmeteor search <WORD>\nmeteor show kadira:flow-router\n\n# Installing Atmosphere Packages\nmeteor add <PACKAGE>\n\n# See all the Atmosphere packages\nmeteor list\n\n# Remove an unwanted Atmosphere package\nmeteor remove <PACKAGE>\n```\n\n\n## :book: [Writing Atmosphere Packages](http://guide.meteor.com/writing-atmosphere-packages.html)\n\n```bash\n# Create a package\nmeteor create --package my-package\n\n# Testing packages\nmeteor test-packages ./ --driver-package practicalmeteor:mocha\n\n# Publish a package\nmeteor publish\n```\n\n\n## :book: [Using npm Packages](http://guide.meteor.com/using-npm-packages.html)\n\n```bash\nmeteor npm install\n\nmeteor npm install --save meteor-node-stubs\nmeteor npm install --save moment\n\nmeteor npm shrinkwrap\n```\n\n### Shrinkpack\n\n```bash\nnpm install -g shrinkpack\n\nmeteor npm install moment\nmeteor npm shrinkwrap\nshrinkpack\n```\n\n## :book: [Writing npm Packages](http://guide.meteor.com/writing-npm-packages.html)\n\n```bash\nmkdir my-package\ncd my-package/\nmeteor npm init\n```\n\n### Including in your app\n\n```bash\n# Inside node_modules\ncd my-app/node_modules/\nmkdir my-package\ncd my-package/\nmeteor npm init\ngit add -f ./ # or use a git submodule\n```\n\n```bash\n# npm link\ncd ~/\nmkdir my-package\ncd my-package/\nmeteor npm init\ncd ~/my-app/\nmeteor npm link ~/my-package\n```\n\n\n## :book: [Mobile](http://guide.meteor.com/mobile.html)\n\n```bash\nmeteor add-platform ios\nsudo xcodebuild -license accept\n\nmeteor add-platform android\nmeteor remove-platform ios android\nmeteor list-platforms\n\nmeteor run ios\nmeteor run ios-device\nmeteor run android\nmeteor run android-device\n```\n\n```bash\n# Installing plugins\nmeteor add cordova:cordova-plugin-camera@1.2.0\n\n# Installing a plugin from Git\nmeteor add cordova:com.phonegap.plugins.facebookconnect@https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec\n\n# Installing a plugin from the local file system\nmeteor add cordova:cordova-plugin-underdevelopment@file://../plugins/cordova-plugin-underdevelopment\n\n# Removing directly installed plugins\nmeteor remove cordova:cordova-plugin-camera\nmeteor remove cordova:com.phonegap.plugins.facebookconnect\nmeteor remove cordova:cordova-plugin-underdevelopment\n```\n\n```bash\n# Domain whitelisting\n```\n\n\n## :book: [Build System](http://guide.meteor.com/build-tool.html)\n\n```bash\nmeteor add ecmascript\n\n# CoffeeScript\nmeteor add coffeescript\n\n# Sass/SCSS\nmeteor add fourseven:scss\n\n# LESS\nmeteor add less\n\n# Stylus\nmetoer add stylus\n```\n\n### PostCSS and AutoPrefixer\n\n```bash\nmeteor remove standard-minifier-css\nmeteor add juliancwirko:postcss\n```\n\n```javascript:package.json\n{\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.3.1\"\n  },\n  \"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {\"browsers\": [\"last 2 versions\"]}\n    }\n  }\n}\n```\n\n\n## :book: [Security](http://guide.meteor.com/security.html)\n\n```bash\nmeteor add check\nmeteor add aldeed:simple-schema\nmeteor remove autopublish insecure\n```\n\n### Securing API keys\n\n```json\n{\n  \"facebook\": {\n    \"clientId\": \"12345\",\n    \"secret\": \"1234567\"\n  }\n}\n```\n\n```bash\n# Pass development settings when running your app locally\nmeteor --settings development.json\n\n# Pass production settings when deploying your app to Galaxy\nmeteor deploy myapp.com --settings production.json\n```\n\n### API keys for OAuth\n\n```bash\nmeteor add service-configuration\n```\n\n```bash\nServiceConfiguration.configurations.upsert({\n  service: \"facebook\"\n}, {\n  $set: {\n    clientId: Meteor.settings.facebook.clientId,\n    loginStyle: \"popup\",\n    secret: Meteor.settings.facebook.secret\n  }\n});\n```\n\n### SSL\n\n```bash\nmeteor add force-ssl\n```\n\n\n## :book: [Deployment and Monitoring](http://guide.meteor.com/deployment.html)\n\n### Custom deployment\n\n```bash\n# for example if deploying to a Ubuntu linux server:\nnpm install --production\nmeteor build /path/to/build --architecture os.linux.x86_64\n```\n\n```bash\ncd my_directory\n(cd programs/server && npm install)\nMONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://my-app.com node main.js\n```\n\n### Monitoring users via analytics\n\n```bash\nmeteor add okgrow:analytics\n```\n\n```json:settings.json\n{\n  \"public\": {\n    \"analyticsSettings\": {\n      // Add your analytics tracking id's here\n      \"Google Analytics\" : {\"trackingId\": \"Your tracking ID\"}\n    }\n  }\n}\n```\n\n\n### Enabling SEO\n\n```bash\n# for Prerender.io\nmeteor add dfischer:prerenderio\n\n# for Galaxy\nmeteor add mdg:seo\n\n# To set <title> tags and other <head> content\nmeteor add kadira:dochead\n```\n\n\u3072\u3068\u307e\u305a\u3053\u3053\u307e\u3067\u3002\n", "tags": ["Meteor"]}