{"context": "\u540c\u4e00IP\u304b\u3089\u306e\u9ad8\u983b\u5ea6\u30a2\u30af\u30bb\u30b9\u306f\u30b5\u30fc\u30d0\u30fc\u306e\u8ca0\u8377\u306b\u306a\u3063\u305f\u308a\u3067\u906e\u65ad\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u305f\u3060\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u30fc\u3067\u691c\u77e5\u3084\u906e\u65ad\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u8ca0\u8377\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u901a\u5e38\u306e\u51e6\u7406\u3068\u306f\u5225\u67a0\u3067\u89e3\u6790\u3068\u906e\u65ad\u3092\u884c\u3044\u3001\u30b2\u30fc\u30e0\u30b5\u30fc\u30d0\u30fc\u672c\u4f53\u3078\u306e\u8ca0\u8377\u3092\u307b\u307c\uff10\u3067\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nELB \u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u51fa\u529b\u6a5f\u80fd\nAWS\u306eELB\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001ELB\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092S3\u306b\u51fa\u529b\u3059\u308b\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nELB\u306e\u30ed\u30b0\u6a5f\u80fd\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089S3\u306e\u30d0\u30b1\u30c3\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u6709\u52b9\u306b\u3067\u304d\u307e\u3059\u3002\n5\u5206\u304a\u304d\u30681\u6642\u9593\u304a\u304d\u304c\u9078\u3079\u308b\u306e\u3067\u4eca\u56de\u306f5\u5206\u3092\u9078\u3073\u307e\u3059\u3002\n\nS3\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3089 Lambda \u3092\u547c\u3073\u51fa\u3059\n\u4eca\u5ea6\u306f\u3053\u306eS3\u30d0\u30b1\u30c3\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30ed\u30b0\u3092\u5143\u306b\u9ad8\u983b\u5ea6\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308bIP\u3092\u906e\u65ad\u3057\u307e\u3057\u3087\u3046\u3002\n\u6163\u308c\u3066\u3044\u308b\u306e\u3067 Python \u3092\u4f7f\u3044\u307e\u3059\u3002\nLambda \u306e\u30b5\u30f3\u30d7\u30eb\u3067 S3 Put \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3059\u3002\n\u5bfe\u8c61\u306e S3 \u30d0\u30b1\u30c3\u30c8\u306e\u8a2d\u5b9a\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306e Lambda \u7528\u306e IAM Role \u306b\u5bfe\u8c61\u306e S3 \u30d0\u30b1\u30c3\u30c8\u3078\u306e GET \u3068 NetworkACL \u3078\u306e\u7de8\u96c6\u6a29\u9650\u3092\u4e0e\u3048\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u3057\u305f\u3089 Python \u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u6d41\u3057\u8fbc\u3093\u3067\u8a2d\u5b9a\u5b8c\u4e86\u3067\u3059\u3002 \n# -*- coding:utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport json\nimport urllib\nfrom collections import defaultdict\n\nimport boto3\n\n# \u30ed\u30b0\u306e\u4fdd\u5b58\u3055\u308c\u308bS3\u30d0\u30b1\u30c3\u30c8\u540d\nBUCKET_NAME = '************'\n\n# BAN\u306b\u3064\u304b\u3046 NetworkACL ID\nACL_ID = '************'\n\n# ACL\u306b\u4f7f\u3046\u30eb\u30fc\u30eb\u756a\u53f7\u306e\u7bc4\u56f2\nBANISH_ACL_RULE_NUM_MIN = 10\nBANISH_ACL_RULE_NUM_MAX = 99\n\n# 5\u5206\u9593\u306b\u4f55\u56de\u4ee5\u4e0a\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068BAN\u306b\u306a\u308b\u304b\nBANISH_THRESHOLD_VALUE = 20\n\n\ndef analysis_accesslog(key):\n    \"\"\"\n    \u53d6\u5f97\u3057\u305f\u30ed\u30b0\u306e\u4e2d\u304b\u3089\u63a5\u7d9a\u5143IP\u30a2\u30c9\u30ec\u30b9\u3092\u96c6\u8a08\u3059\u308b\n    \"\"\"\n    counter = defaultdict(int)\n    s3 = boto3.resource('s3')\n    body = s3.ObjectSummary(BUCKET_NAME, key).get()['Body'].read().splitlines()\n    for line in body:\n        timestamp, _, client_ip_port = line.split(' ')[:3]\n        client_ip = client_ip_port.split(':')[0]\n        counter[client_ip] += 1\n\n    target_ip_counts = sorted([(ip, count) for (ip, count) in counter.items() if count >= BANISH_THRESHOLD_VALUE],\n                              key=lambda x: x[1])\n\n    return target_ip_counts\n\n\ndef create_acl_entry(target_ips):\n    \"\"\"\n    \u6307\u5b9a\u3057\u305fIP\u306e\u30a2\u30af\u30bb\u30b9\u62d2\u5426\u30eb\u30fc\u30eb\u3092 NETWORK ACL \u306b\u8ffd\u52a0\u3059\u308b\n    :type target_ips: list of string\n    :rtype: list of string\n    \"\"\"\n    ec2 = boto3.resource('ec2')\n    network_acl = ec2.NetworkAcl(ACL_ID)\n    # \u65e2\u5b58\u306eBAN\u30eb\u30fc\u30eb\u3092\u53d6\u5f97\n    rules = [entry for entry in network_acl.entries\n             if BANISH_ACL_RULE_NUM_MIN <= entry['RuleNumber'] <= BANISH_ACL_RULE_NUM_MAX]\n\n    # \u4f7f\u7528\u53ef\u80fd\u306a\u30eb\u30fc\u30eb\u756a\u53f7\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n    rule_nums = set(range(BANISH_ACL_RULE_NUM_MIN, BANISH_ACL_RULE_NUM_MAX + 1))\n    used_rule_nums = [rule['RuleNumber'] for rule in rules]\n    rule_nums -= set(used_rule_nums)\n    if not rule_nums:\n        # \u3053\u308c\u4ee5\u4e0a\u30eb\u30fc\u30eb\u756a\u53f7\u306e\u7a7a\u304d\u304c\u7121\u3044\n        raise\n\n    # BAN\u5bfe\u8c61\u304b\u3089BAN\u6e08\u307fIP\u3092\u6d88\u3059\n    banished_ips = [rule['CidrBlock'].replace('/32', '') for rule in rules]\n    target_ips = list(set(target_ips) - set(banished_ips))  # \u8fd4\u3059\u6642\u306blist\u306b\u3059\u308b\u306e\u3067\u3053\u3053\u3067list\u306b\u3057\u3066\u3057\u307e\u3046\n    # \u5bfe\u8c61IP\u3092\u62d2\u5426\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\n    for target_ip in target_ips:\n        next_rule_num = rule_nums.pop()\n        print network_acl.create_entry(\n            DryRun=False,  # \u4eee\u5b9f\u884c\u304b\n            RuleNumber=next_rule_num,  # \u30eb\u30fc\u30eb\u756a\u53f7\u3002\u3053\u306eACL\u5185\u3067\u30e6\u30cb\u30fc\u30af\u3002\u82e5\u3044\u756a\u53f7\u304c\u512a\u5148\u3055\u308c\u308b\n            Protocol='-1',  # \u30d7\u30ed\u30c8\u30b3\u30eb -1 \u3067\u5168\u90e8\n            RuleAction='deny',  # deny or allow\n            Egress=False,  # True=Outbound, False=Inbound\n            CidrBlock='{}/32'.format(target_ip),  # \u5bfe\u8c61 ex. 172.16.0.0/24\n            PortRange={'From': 80, 'To': 443}  # \u30dd\u30fc\u30c8\u7bc4\u56f2\n        )\n    return target_ips\n\n\ndef lambda_handler(event, context):\n    print 'Received event: ' + json.dumps(event, indent=2)\n\n    # Get the object from the event and show its content type\n    s3_event = event['Records'][0]['s3']\n    bucket_name = s3_event['bucket']['name']\n    if bucket_name != BUCKET_NAME:\n        # \u6307\u5b9a\u30d0\u30b1\u30c3\u30c8\u3067\u306a\u304b\u3063\u305f\n        return\n\n    object_key = urllib.unquote_plus(s3_event['object']['key']).decode('utf8')\n    if not object_key.endswith('.log'):\n        # \u30ed\u30b0\u4ee5\u5916\u3060\u3063\u305f\n        return\n\n    # \u30ed\u30b0\u304b\u3089\u5bfe\u8c61IP\u3092\u5272\u308a\u51fa\u3057\n    banish_ip_counts = analysis_accesslog(object_key)\n\n    # ACL\u306b\u8ffd\u52a0\n    print create_acl_entry([ip for (ip, count) in banish_ip_counts])\n\n\n\u6ce8\u610f\u70b9\nELB \u306e\u30ed\u30b0\u306f ELB \u306e\u5185\u90e8\u30ce\u30fc\u30c9\u3054\u3068\u306b\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u5fc5\u305a\u3057\u3082\uff15\u5206\u9593\u306e\u30ed\u30b0\u304c\u3059\u3079\u3066\uff11\u30d5\u30a1\u30a4\u30eb\u306b\u5165\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u30d5\u30ed\u30f3\u30c8\u306f DNS \u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u306e\u305f\u3081\u3001\u5927\u62b5\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f 1\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u96c6\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\u6b63\u3057\u304f\u884c\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u96c6\u8a08\u3092\u884c\u3044\u3001\u305d\u308c\u3092\u5143\u306b BAN \u3092\u884c\u3046\u307b\u3046\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\u305f\u3081\u306b\uff11\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306e\u96c6\u8a08\u3092\u5143\u306b BAN \u5bfe\u8c61\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f WiFi \u74b0\u5883\u306a\u3069\u3001NAT\u3067\u540c\u3058 IP \u3092\u8907\u6570\u4eba\u3067\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u305d\u308c\u306f\u6b63\u898f\u30e6\u30fc\u30b6\u30fc\u3067\u3059\u306e\u3067\u614e\u91cd\u306b\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u904b\u7528\u3067\u306f\u304b\u306a\u308a\u4f59\u88d5\u3092\u6301\u3063\u3066\u95be\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001IP\u5358\u4f4d\u306e\u30a2\u30af\u30bb\u30b9\u6570\u3060\u3051\u3092\u307f\u3066\u81ea\u52d5\u3067 BAN \u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u6642\u9650\u5f0f\u3067\u89e3\u9664\u3055\u308c\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3067\u3057\u3087\u3046\u3002\uff081\u6642\u9593\u3067\u89e3\u9664\u3055\u308c\u308b\u306a\u3069\uff09\n\n\u540c\u4e00IP\u304b\u3089\u306e\u9ad8\u983b\u5ea6\u30a2\u30af\u30bb\u30b9\u306f\u30b5\u30fc\u30d0\u30fc\u306e\u8ca0\u8377\u306b\u306a\u3063\u305f\u308a\u3067\u906e\u65ad\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u305f\u3060\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u30fc\u3067\u691c\u77e5\u3084\u906e\u65ad\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u8ca0\u8377\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u901a\u5e38\u306e\u51e6\u7406\u3068\u306f\u5225\u67a0\u3067\u89e3\u6790\u3068\u906e\u65ad\u3092\u884c\u3044\u3001\u30b2\u30fc\u30e0\u30b5\u30fc\u30d0\u30fc\u672c\u4f53\u3078\u306e\u8ca0\u8377\u3092\u307b\u307c\uff10\u3067\u884c\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## ELB \u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u51fa\u529b\u6a5f\u80fd\n\nAWS\u306eELB\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001ELB\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092S3\u306b\u51fa\u529b\u3059\u308b\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nELB\u306e\u30ed\u30b0\u6a5f\u80fd\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089S3\u306e\u30d0\u30b1\u30c3\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u6709\u52b9\u306b\u3067\u304d\u307e\u3059\u3002\n5\u5206\u304a\u304d\u30681\u6642\u9593\u304a\u304d\u304c\u9078\u3079\u308b\u306e\u3067\u4eca\u56de\u306f5\u5206\u3092\u9078\u3073\u307e\u3059\u3002\n\n\n## S3\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3089 Lambda \u3092\u547c\u3073\u51fa\u3059\n\n\u4eca\u5ea6\u306f\u3053\u306eS3\u30d0\u30b1\u30c3\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30ed\u30b0\u3092\u5143\u306b\u9ad8\u983b\u5ea6\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308bIP\u3092\u906e\u65ad\u3057\u307e\u3057\u3087\u3046\u3002\n\u6163\u308c\u3066\u3044\u308b\u306e\u3067 Python \u3092\u4f7f\u3044\u307e\u3059\u3002\n\nLambda \u306e\u30b5\u30f3\u30d7\u30eb\u3067 S3 Put \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3059\u3002\n\n\u5bfe\u8c61\u306e S3 \u30d0\u30b1\u30c3\u30c8\u306e\u8a2d\u5b9a\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306e Lambda \u7528\u306e IAM Role \u306b\u5bfe\u8c61\u306e S3 \u30d0\u30b1\u30c3\u30c8\u3078\u306e GET \u3068 NetworkACL \u3078\u306e\u7de8\u96c6\u6a29\u9650\u3092\u4e0e\u3048\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u305d\u3057\u305f\u3089 Python \u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u6d41\u3057\u8fbc\u3093\u3067\u8a2d\u5b9a\u5b8c\u4e86\u3067\u3059\u3002 \n\n```\n# -*- coding:utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport json\nimport urllib\nfrom collections import defaultdict\n\nimport boto3\n\n# \u30ed\u30b0\u306e\u4fdd\u5b58\u3055\u308c\u308bS3\u30d0\u30b1\u30c3\u30c8\u540d\nBUCKET_NAME = '************'\n\n# BAN\u306b\u3064\u304b\u3046 NetworkACL ID\nACL_ID = '************'\n\n# ACL\u306b\u4f7f\u3046\u30eb\u30fc\u30eb\u756a\u53f7\u306e\u7bc4\u56f2\nBANISH_ACL_RULE_NUM_MIN = 10\nBANISH_ACL_RULE_NUM_MAX = 99\n\n# 5\u5206\u9593\u306b\u4f55\u56de\u4ee5\u4e0a\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068BAN\u306b\u306a\u308b\u304b\nBANISH_THRESHOLD_VALUE = 20\n\n\ndef analysis_accesslog(key):\n    \"\"\"\n    \u53d6\u5f97\u3057\u305f\u30ed\u30b0\u306e\u4e2d\u304b\u3089\u63a5\u7d9a\u5143IP\u30a2\u30c9\u30ec\u30b9\u3092\u96c6\u8a08\u3059\u308b\n    \"\"\"\n    counter = defaultdict(int)\n    s3 = boto3.resource('s3')\n    body = s3.ObjectSummary(BUCKET_NAME, key).get()['Body'].read().splitlines()\n    for line in body:\n        timestamp, _, client_ip_port = line.split(' ')[:3]\n        client_ip = client_ip_port.split(':')[0]\n        counter[client_ip] += 1\n\n    target_ip_counts = sorted([(ip, count) for (ip, count) in counter.items() if count >= BANISH_THRESHOLD_VALUE],\n                              key=lambda x: x[1])\n\n    return target_ip_counts\n\n\ndef create_acl_entry(target_ips):\n    \"\"\"\n    \u6307\u5b9a\u3057\u305fIP\u306e\u30a2\u30af\u30bb\u30b9\u62d2\u5426\u30eb\u30fc\u30eb\u3092 NETWORK ACL \u306b\u8ffd\u52a0\u3059\u308b\n    :type target_ips: list of string\n    :rtype: list of string\n    \"\"\"\n    ec2 = boto3.resource('ec2')\n    network_acl = ec2.NetworkAcl(ACL_ID)\n    # \u65e2\u5b58\u306eBAN\u30eb\u30fc\u30eb\u3092\u53d6\u5f97\n    rules = [entry for entry in network_acl.entries\n             if BANISH_ACL_RULE_NUM_MIN <= entry['RuleNumber'] <= BANISH_ACL_RULE_NUM_MAX]\n\n    # \u4f7f\u7528\u53ef\u80fd\u306a\u30eb\u30fc\u30eb\u756a\u53f7\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n    rule_nums = set(range(BANISH_ACL_RULE_NUM_MIN, BANISH_ACL_RULE_NUM_MAX + 1))\n    used_rule_nums = [rule['RuleNumber'] for rule in rules]\n    rule_nums -= set(used_rule_nums)\n    if not rule_nums:\n        # \u3053\u308c\u4ee5\u4e0a\u30eb\u30fc\u30eb\u756a\u53f7\u306e\u7a7a\u304d\u304c\u7121\u3044\n        raise\n\n    # BAN\u5bfe\u8c61\u304b\u3089BAN\u6e08\u307fIP\u3092\u6d88\u3059\n    banished_ips = [rule['CidrBlock'].replace('/32', '') for rule in rules]\n    target_ips = list(set(target_ips) - set(banished_ips))  # \u8fd4\u3059\u6642\u306blist\u306b\u3059\u308b\u306e\u3067\u3053\u3053\u3067list\u306b\u3057\u3066\u3057\u307e\u3046\n    # \u5bfe\u8c61IP\u3092\u62d2\u5426\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\n    for target_ip in target_ips:\n        next_rule_num = rule_nums.pop()\n        print network_acl.create_entry(\n            DryRun=False,  # \u4eee\u5b9f\u884c\u304b\n            RuleNumber=next_rule_num,  # \u30eb\u30fc\u30eb\u756a\u53f7\u3002\u3053\u306eACL\u5185\u3067\u30e6\u30cb\u30fc\u30af\u3002\u82e5\u3044\u756a\u53f7\u304c\u512a\u5148\u3055\u308c\u308b\n            Protocol='-1',  # \u30d7\u30ed\u30c8\u30b3\u30eb -1 \u3067\u5168\u90e8\n            RuleAction='deny',  # deny or allow\n            Egress=False,  # True=Outbound, False=Inbound\n            CidrBlock='{}/32'.format(target_ip),  # \u5bfe\u8c61 ex. 172.16.0.0/24\n            PortRange={'From': 80, 'To': 443}  # \u30dd\u30fc\u30c8\u7bc4\u56f2\n        )\n    return target_ips\n\n\ndef lambda_handler(event, context):\n    print 'Received event: ' + json.dumps(event, indent=2)\n\n    # Get the object from the event and show its content type\n    s3_event = event['Records'][0]['s3']\n    bucket_name = s3_event['bucket']['name']\n    if bucket_name != BUCKET_NAME:\n        # \u6307\u5b9a\u30d0\u30b1\u30c3\u30c8\u3067\u306a\u304b\u3063\u305f\n        return\n\n    object_key = urllib.unquote_plus(s3_event['object']['key']).decode('utf8')\n    if not object_key.endswith('.log'):\n        # \u30ed\u30b0\u4ee5\u5916\u3060\u3063\u305f\n        return\n\n    # \u30ed\u30b0\u304b\u3089\u5bfe\u8c61IP\u3092\u5272\u308a\u51fa\u3057\n    banish_ip_counts = analysis_accesslog(object_key)\n\n    # ACL\u306b\u8ffd\u52a0\n    print create_acl_entry([ip for (ip, count) in banish_ip_counts])\n```\n\n## \u6ce8\u610f\u70b9\n\nELB \u306e\u30ed\u30b0\u306f ELB \u306e\u5185\u90e8\u30ce\u30fc\u30c9\u3054\u3068\u306b\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u5fc5\u305a\u3057\u3082\uff15\u5206\u9593\u306e\u30ed\u30b0\u304c\u3059\u3079\u3066\uff11\u30d5\u30a1\u30a4\u30eb\u306b\u5165\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u30d5\u30ed\u30f3\u30c8\u306f DNS \u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u306e\u305f\u3081\u3001\u5927\u62b5\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f 1\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u96c6\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u6b63\u3057\u304f\u884c\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u96c6\u8a08\u3092\u884c\u3044\u3001\u305d\u308c\u3092\u5143\u306b BAN \u3092\u884c\u3046\u307b\u3046\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u4eca\u56de\u306f\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\u305f\u3081\u306b\uff11\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306e\u96c6\u8a08\u3092\u5143\u306b BAN \u5bfe\u8c61\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f WiFi \u74b0\u5883\u306a\u3069\u3001NAT\u3067\u540c\u3058 IP \u3092\u8907\u6570\u4eba\u3067\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u305d\u308c\u306f\u6b63\u898f\u30e6\u30fc\u30b6\u30fc\u3067\u3059\u306e\u3067\u614e\u91cd\u306b\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u904b\u7528\u3067\u306f\u304b\u306a\u308a\u4f59\u88d5\u3092\u6301\u3063\u3066\u95be\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001IP\u5358\u4f4d\u306e\u30a2\u30af\u30bb\u30b9\u6570\u3060\u3051\u3092\u307f\u3066\u81ea\u52d5\u3067 BAN \u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u6642\u9650\u5f0f\u3067\u89e3\u9664\u3055\u308c\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3067\u3057\u3087\u3046\u3002\uff081\u6642\u9593\u3067\u89e3\u9664\u3055\u308c\u308b\u306a\u3069\uff09\n", "tags": ["elb", "vpc", "lambda", "AWS"]}