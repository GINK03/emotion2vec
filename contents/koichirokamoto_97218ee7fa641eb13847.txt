{"context": "\n\nelm-lang\nhttp://elm-lang.org/\ncompile\u3059\u308b\u3068JS\u304c\u5410\u304d\u51fa\u3055\u308c\u308balt JS\u7684\u306a\u3082\u306e\u3002\n\u6587\u6cd5\u304cHaskell\u306b\u8fd1\u3044\u3089\u3057\u3044\u3002\n\u6587\u6cd5\u3068\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u306e\u95a2\u9023\u304c\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u500b\u4eba\u7684\u306b\u25ce\n\u8a00\u8a9e\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\nhttp://qiita.com/mizchi/items/1c707342dd008af61118#_reference-7a151034909cd14c9e7d\nhttp://qiita.com/mizchi/items/1c707342dd008af61118#_reference-7a151034909cd14c9e7d\n\ninstall\nhttp://elm-lang.org/install\n\u79c1\u306finstaller\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nbrew\u3092\u4f7f\u3046\u30680.17\u304cinstall\u3055\u308c\u307e\u3059\u3002(\u6700\u65b0\u306f0.17.1)\n\neditor\nvscode\u3067elm\u3068\u691c\u7d22\u3057\u3066Plugin\u3092install\u3059\u308b\u3068\u6357\u308a\u307e\u3059\u3002\n\u516c\u5f0f\u3067\u306fsublime\u304a\u3059\u3059\u3081\u3068\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u983b\u7e41\u306b\u8cfc\u5165\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u3066\u304f\u308b\u306e\u3068\u3001vscode\u4ee5\u4e0a\u306e\u6a5f\u80fd\u304c\u306a\u3044\u306e\u3067\u3084\u3081\u307e\u3057\u305f\u3002\ncode <fileName>\u3067\u958b\u3051\u308b\u3088\u3046\u306bPATH\u3092\u901a\u3059\u3068\u6357\u308a\u307e\u3059\u3002(\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3067command\u3067\u691c\u7d22\u3059\u308b\u3068\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002)\n\n\u5165\u9580\nhttp://guide.elm-lang.org/\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u3092\u8aad\u3080\u3060\u3051\u3067\u826f\u3044\u611f\u3058\u3002\n\u9069\u5b9c\u3001core\u3084html\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u6357\u308a\u307e\u3059\u3002\n\nexercise\u3084\u3063\u3066\u307f\u305f\n\u3053\u3053\u306e2\u3064\u306e\u30c0\u30a4\u30b9\u3092\u56de\u3059\u3082\u306e\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\nhttp://guide.elm-lang.org/architecture/effects/random.html\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.App as Html\nimport Html.Events exposing (..)\nimport Random\n\n\nmain =\n    Html.program\n        { init = init\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { dieFace : Int\n    , twoFace : Int\n    }\n\n\ninit : ( Model, Cmd Msg )\ninit =\n    ( Model 1 1, Cmd.none )\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = Roll\n    | NewFace ( Int, Int )\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        Roll ->\n            ( model, Random.generate NewFace (Random.pair (Random.int 1 6) (Random.int 1 6)) )\n\n        NewFace ( newFace, twoFace ) ->\n            ( Model newFace twoFace, Cmd.none )\n\n\n\n-- SUBCRIPTIONS\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ h1 [] [ text (toString model.dieFace) ]\n        , h1 [] [ text (toString model.twoFace) ]\n        , button [ onClick Roll ] [ text \"Roll\" ]\n        ]\n\nRandom.pair\u3092\u4f7f\u3046\u7df4\u7fd2\u307f\u305f\u3044\u3067\u3059\u306d\u3002\nHTTP\u306e\u3084\u3064\u3082\u3084\u3063\u3066\u307f\u307e\u3057\u305f\nhttp://guide.elm-lang.org/architecture/effects/http.html\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.App as Html\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\nimport Http\nimport Json.Decode as Json\nimport Task\n\n\nmain =\n    Html.program\n        { init = init \"cats\"\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { topic : String\n    , gifUrl : String\n    , errorMsg : String\n    }\n\n\ninit : String -> ( Model, Cmd Msg )\ninit topic =\n    ( Model topic \"waiting.gif\" \"\"\n    , getRandomGif topic\n    )\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = MorePlease\n    | FetchSucceed String\n    | FetchFailed Http.Error\n    | Name String\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        MorePlease ->\n            ( model, getRandomGif model.topic )\n\n        FetchSucceed newUrl ->\n            ( Model model.topic newUrl \"\", Cmd.none )\n\n        FetchFailed error ->\n            case error of\n                Http.Timeout ->\n                    ( { model | errorMsg = \"timeout error\" }, Cmd.none )\n\n                Http.NetworkError ->\n                    ( { model | errorMsg = \"network error\" }, Cmd.none )\n\n                Http.UnexpectedPayload payload ->\n                    ( { model | errorMsg = \"unexpected payload\" }, Cmd.none )\n\n                Http.BadResponse code status ->\n                    ( { model | errorMsg = \"badresponse\" }, Cmd.none )\n\n        Name newTopic ->\n            ( { model | topic = newTopic }, Cmd.none )\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ input [ type' \"text\", placeholder \"topic\", onInput Name ] []\n        , select [ onInput Name ] [ option [ value \"cats\", selected True ] [ text \"cats\" ], option [ value \"dogs\" ] [ text \"dogs\" ], option [ value \"akb48\" ] [ text \"akb48\" ] ]\n        , button [ onClick MorePlease ] [ text \"More Please!\" ]\n        , br [] []\n        , h2 [] [ text model.errorMsg ]\n        , img [ src model.gifUrl ] []\n        ]\n\n\n\n-- SUBSCRIPTIONS\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n\n\n-- HTTP\n\n\ngetRandomGif : String -> Cmd Msg\ngetRandomGif topic =\n    let\n        url =\n            \"//api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=\" ++ topic\n    in\n        Task.perform FetchFailed FetchSucceed (Http.get decodeGifUrl url)\n\n\ndecodeGifUrl : Json.Decoder String\ndecodeGifUrl =\n    Json.at [ \"data\", \"image_url\" ] Json.string\n\nselect\u306e\u5024\u53d6\u5f97\u306fonInput\u3067OK\u306e\u3088\u3046\u3067\u3059\u3002\n\nHTTP Package\neml-package install evancz/elm-http\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\nResult\u306b\u3064\u3044\u3066\nResult.Result a b\u304b\u3089b\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u3001Result.withDefault b (Result.Result a b)\u306e\u3088\u3046\u306b\u3059\u308c\u3070OK\n\n\u4f8b\n$ elm-repl\n> import String\n> import Result\n> Result.withDefault 1 (String.toInt \"23\") --- \u7b2c2\u5f15\u6570\u306ffunction\u3067\u3042\u308b\u3053\u3068\n\n\n\nProject Setup\n$ mkdir -p $HOME/dev/elm/sandbox\n$ elm-package install\n$ cd $HOME/dev/elm/sandbox\n$ code ./\n\n\nPakcage\u66f4\u65b0\u6642\u306belm-reactor\u306e\u6319\u52d5\u304c\u5909\u306b\u306a\u308b\uff1f\ncore\u30924.0.1->4.0.2\u306b\u66f4\u65b0\u3057\u305f\u5f8c\u3001elm-reactor\u3092\u52d5\u4f5c\u3055\u305b\u305f\u3089\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\nelm-stuff\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u3066elm-package install\u3057\u305f\u3089\u623b\u308a\u307e\u3057\u305f\u304c\u3001\u8abf\u67fb\u304c\u5fc5\u8981\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\u66f8\u3044\u3066\u3044\u3066\u304b\u306a\u308a\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\u7279\u306b\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5b9f\u88c5\u304c\u76f4\u611f\u7684\u306a\u306e\u304c\u7d20\u6674\u3089\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# elm-lang\n\nhttp://elm-lang.org/\n\ncompile\u3059\u308b\u3068JS\u304c\u5410\u304d\u51fa\u3055\u308c\u308balt JS\u7684\u306a\u3082\u306e\u3002\n\u6587\u6cd5\u304cHaskell\u306b\u8fd1\u3044\u3089\u3057\u3044\u3002\n\u6587\u6cd5\u3068\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u306e\u95a2\u9023\u304c\u76f4\u611f\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u500b\u4eba\u7684\u306b\u25ce\n\u8a00\u8a9e\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\nhttp://qiita.com/mizchi/items/1c707342dd008af61118#_reference-7a151034909cd14c9e7d\nhttp://qiita.com/mizchi/items/1c707342dd008af61118#_reference-7a151034909cd14c9e7d\n\n# install\n\nhttp://elm-lang.org/install\n\n\u79c1\u306finstaller\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nbrew\u3092\u4f7f\u3046\u30680.17\u304cinstall\u3055\u308c\u307e\u3059\u3002(\u6700\u65b0\u306f0.17.1)\n\n# editor\n\nvscode\u3067elm\u3068\u691c\u7d22\u3057\u3066Plugin\u3092install\u3059\u308b\u3068\u6357\u308a\u307e\u3059\u3002\n\u516c\u5f0f\u3067\u306fsublime\u304a\u3059\u3059\u3081\u3068\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u983b\u7e41\u306b\u8cfc\u5165\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u3066\u304f\u308b\u306e\u3068\u3001vscode\u4ee5\u4e0a\u306e\u6a5f\u80fd\u304c\u306a\u3044\u306e\u3067\u3084\u3081\u307e\u3057\u305f\u3002\n`code <fileName>`\u3067\u958b\u3051\u308b\u3088\u3046\u306bPATH\u3092\u901a\u3059\u3068\u6357\u308a\u307e\u3059\u3002(\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3067`command`\u3067\u691c\u7d22\u3059\u308b\u3068\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002)\n\n# \u5165\u9580\n\nhttp://guide.elm-lang.org/\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u3092\u8aad\u3080\u3060\u3051\u3067\u826f\u3044\u611f\u3058\u3002\n\u9069\u5b9c\u3001core\u3084html\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u6357\u308a\u307e\u3059\u3002\n\n## exercise\u3084\u3063\u3066\u307f\u305f\n\n\u3053\u3053\u306e2\u3064\u306e\u30c0\u30a4\u30b9\u3092\u56de\u3059\u3082\u306e\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\nhttp://guide.elm-lang.org/architecture/effects/random.html\n\n```elm:\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.App as Html\nimport Html.Events exposing (..)\nimport Random\n\n\nmain =\n    Html.program\n        { init = init\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { dieFace : Int\n    , twoFace : Int\n    }\n\n\ninit : ( Model, Cmd Msg )\ninit =\n    ( Model 1 1, Cmd.none )\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = Roll\n    | NewFace ( Int, Int )\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        Roll ->\n            ( model, Random.generate NewFace (Random.pair (Random.int 1 6) (Random.int 1 6)) )\n\n        NewFace ( newFace, twoFace ) ->\n            ( Model newFace twoFace, Cmd.none )\n\n\n\n-- SUBCRIPTIONS\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ h1 [] [ text (toString model.dieFace) ]\n        , h1 [] [ text (toString model.twoFace) ]\n        , button [ onClick Roll ] [ text \"Roll\" ]\n        ]\n```\n\n`Random.pair`\u3092\u4f7f\u3046\u7df4\u7fd2\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\nHTTP\u306e\u3084\u3064\u3082\u3084\u3063\u3066\u307f\u307e\u3057\u305f\nhttp://guide.elm-lang.org/architecture/effects/http.html\n\n```elm\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.App as Html\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\nimport Http\nimport Json.Decode as Json\nimport Task\n\n\nmain =\n    Html.program\n        { init = init \"cats\"\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { topic : String\n    , gifUrl : String\n    , errorMsg : String\n    }\n\n\ninit : String -> ( Model, Cmd Msg )\ninit topic =\n    ( Model topic \"waiting.gif\" \"\"\n    , getRandomGif topic\n    )\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = MorePlease\n    | FetchSucceed String\n    | FetchFailed Http.Error\n    | Name String\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        MorePlease ->\n            ( model, getRandomGif model.topic )\n\n        FetchSucceed newUrl ->\n            ( Model model.topic newUrl \"\", Cmd.none )\n\n        FetchFailed error ->\n            case error of\n                Http.Timeout ->\n                    ( { model | errorMsg = \"timeout error\" }, Cmd.none )\n\n                Http.NetworkError ->\n                    ( { model | errorMsg = \"network error\" }, Cmd.none )\n\n                Http.UnexpectedPayload payload ->\n                    ( { model | errorMsg = \"unexpected payload\" }, Cmd.none )\n\n                Http.BadResponse code status ->\n                    ( { model | errorMsg = \"badresponse\" }, Cmd.none )\n\n        Name newTopic ->\n            ( { model | topic = newTopic }, Cmd.none )\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ input [ type' \"text\", placeholder \"topic\", onInput Name ] []\n        , select [ onInput Name ] [ option [ value \"cats\", selected True ] [ text \"cats\" ], option [ value \"dogs\" ] [ text \"dogs\" ], option [ value \"akb48\" ] [ text \"akb48\" ] ]\n        , button [ onClick MorePlease ] [ text \"More Please!\" ]\n        , br [] []\n        , h2 [] [ text model.errorMsg ]\n        , img [ src model.gifUrl ] []\n        ]\n\n\n\n-- SUBSCRIPTIONS\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n\n\n-- HTTP\n\n\ngetRandomGif : String -> Cmd Msg\ngetRandomGif topic =\n    let\n        url =\n            \"//api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=\" ++ topic\n    in\n        Task.perform FetchFailed FetchSucceed (Http.get decodeGifUrl url)\n\n\ndecodeGifUrl : Json.Decoder String\ndecodeGifUrl =\n    Json.at [ \"data\", \"image_url\" ] Json.string\n```\n\nselect\u306e\u5024\u53d6\u5f97\u306f`onInput`\u3067OK\u306e\u3088\u3046\u3067\u3059\u3002\n\n## HTTP Package\n\n`eml-package install evancz/elm-http`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\n## Result\u306b\u3064\u3044\u3066\n\n`Result.Result a b`\u304b\u3089b\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u3001`Result.withDefault b (Result.Result a b)`\u306e\u3088\u3046\u306b\u3059\u308c\u3070OK\n\n```elm:\u4f8b\n$ elm-repl\n> import String\n> import Result\n> Result.withDefault 1 (String.toInt \"23\") --- \u7b2c2\u5f15\u6570\u306ffunction\u3067\u3042\u308b\u3053\u3068\n```\n\n\n# Project Setup\n\n```bash\n$ mkdir -p $HOME/dev/elm/sandbox\n$ elm-package install\n$ cd $HOME/dev/elm/sandbox\n$ code ./\n```\n\n# Pakcage\u66f4\u65b0\u6642\u306belm-reactor\u306e\u6319\u52d5\u304c\u5909\u306b\u306a\u308b\uff1f\n\ncore\u30924.0.1->4.0.2\u306b\u66f4\u65b0\u3057\u305f\u5f8c\u3001elm-reactor\u3092\u52d5\u4f5c\u3055\u305b\u305f\u3089\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n`elm-stuff`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u3066`elm-package install`\u3057\u305f\u3089\u623b\u308a\u307e\u3057\u305f\u304c\u3001\u8abf\u67fb\u304c\u5fc5\u8981\u3067\u3059\u306d\u3002\n\n# \u307e\u3068\u3081\n\n\u66f8\u3044\u3066\u3044\u3066\u304b\u306a\u308a\u697d\u3057\u3044\u3067\u3059\u306d\u3002\n\u7279\u306b\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5b9f\u88c5\u304c\u76f4\u611f\u7684\u306a\u306e\u304c\u7d20\u6674\u3089\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Elm"]}