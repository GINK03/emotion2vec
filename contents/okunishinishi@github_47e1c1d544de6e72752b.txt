{"context": " More than 1 year has passed since last update.npm\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068nodejs\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7c21\u5358\u306bnpm\u306bpublish\u3067\u304d\u308b\u3002\n\u305d\u306e\u3064\u3044\u3067\u306b\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\nGithub\u4e0a\u306etag\u3092\u751f\u6210\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u304c\u3042\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\npackage.json\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001version\u306e\u30de\u30a4\u30ca\u30fc\u756a\u53f7\u306e\u6570\u5b57\u3092\u4e00\u500b\u5897\u3084\u3057\u3066\u4e0a\u66f8\u304d\u3059\u308b\u3002\n\u4f8b\uff1a \"version\":\"1.0.12\" -> \"version\":\"1.0.13\"\n\n#!/usr/bin/env node\n\n/**\n * Version up this package.\n */\n\n\"use strict\";\n\n\nvar filename = require.resolve('../../../package.json'),  //Your project package.json path.\n    async = require('async'),\n    fs = require('fs');\n\n/**\n * Increment miner version.\n * @param {string} version - Version number to work wit.\n * @returns {string} - Incremented number\n * @private\n */\nfunction _incrementVersion(version) {\n    var versions = version.split('.');\n    versions.push(Number(versions.pop()) + 1);\n    return versions.join('.');\n}\n\n/**\n * Rewrite package.json to update version.\n * @param {string} filename - Package.json file path.\n * @param {function} callback - Callback when done.\n */\nfunction updateVersion(filename, callback) {\n    var data = require(filename);\n    data.version = _incrementVersion(data.version);\n    var content = JSON.stringify(data, null, 4);\n    fs.writeFile(filename, content, function (err) {\n        callback(err, data);\n    });\n}\n\nupdateVersion(filename, function (err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log('Package version incremented to:', data.version);\n    }\n});\n\n\n\n\nGithub\u4e0a\u306etag\u3092\u751f\u6210\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\npackage.json\u306e\u60c5\u5831\u3092\u3082\u3068\u306bgithub\u4e0a\u306btag\u3092\u4f5c\u308b\n\u4f8b\u3048\u3070\"version\":\"1.0.3\"\u306epackage\u306a\u3089v1.0.3\u306etag\u3092\u4f5c\u3063\u3066push\u3059\u308b\u3002\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u4f55\u3082\u3057\u306a\u3044\u3002\n#!/usr/bin/env node\n\n/**\n * Tag on github.\n */\n\n\"use strict\";\n\nvar pkgPath = require.resolve('../../../package.json'); // Your project package.json path.\n\nvar fs = require('fs'),\n    util = require('util'),\n    async = require('async'),\n    childProcess = require('child_process');\n\n/**\n * Spawn a process and pip stdout/stderr\n * @param {string} command - Command to spawn.\n * @param {string[]} args - Command arguments.\n * @param {function} callback - Callback when done.\n * @returns {*} - Spawned process.\n * @private\n */\nfunction _spawn(command, args, callback) {\n    var spwaned = childProcess.spawn(command, args, {});\n    spwaned.stdout.pipe(process.stdout);\n    spwaned.stderr.pipe(process.stderr);\n    spwaned.on('close', function (exitCode) {\n        var success = exitCode === 0,\n            err = success ? null : new Error(['Spawn', command, 'failed.'].join(' '));\n        callback(err);\n    });\n    return spwaned;\n}\n\n\n/**\n * Read and parse json file.\n * @param {string} filename - Filename to read.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _readJsonFile(filename, callback) {\n    async.waterfall([\n        function (callback) {\n            fs.readFile(filename, callback);\n        },\n        function (buffer, callback) {\n            var data = JSON.parse(buffer.toString());\n            callback(null, data);\n        }\n    ], callback);\n}\n\n/**\n * Tag name of a package json.\n * @param {string} packageJsonPath - File path of package.json\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _tagNameForPackage(packageJsonPath, callback) {\n    async.waterfall([\n        function (callback) {\n            _readJsonFile(packageJsonPath, callback);\n        },\n        function (data, callback) {\n            var tagName = 'v' + data.version;\n            callback(null, tagName);\n        }\n    ], callback);\n}\n\n/**\n * Check if tag alreay exists.\n * @param {string} tagName - Tag name to work with.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _tagExists(tagName, callback) {\n    var command = util.format('git tag -l %s', tagName);\n    childProcess.exec(command, function (err, stdOut, stdErr) {\n        callback(err || stdErr || null, !!stdOut);\n    });\n}\n\n/**\n * Add git tag.\n * @param {string} tagName - Tag name to add.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _addTag(tagName, callback) {\n    _spawn('git', ['tag', tagName], callback);\n}\n\n/**\n * Push tag to remote server.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _pushTags(callback) {\n    _spawn('git', ['push', '--tags'], callback);\n}\n\nasync.waterfall([\n    function (callback) {\n        _tagNameForPackage(pkgPath, callback);\n    },\n    function (tagName, callback) {\n        async.waterfall([\n            function (callback) {\n                _tagExists(tagName, callback);\n            },\n            function (exists, callback) {\n                var err = exists ? new Error('Tag already exists.') : null;\n                callback(err);\n            },\n            function (callback) {\n                _addTag(tagName, callback);\n            },\n            function (callback) {\n                _pushTags(callback);\n            }\n        ], callback);\n    }\n], function (err) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log('Tag on git done!');\n    }\n});\n\nnpm\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068nodejs\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7c21\u5358\u306b[npm](https://www.npmjs.com/)\u306bpublish\u3067\u304d\u308b\u3002\n\u305d\u306e\u3064\u3044\u3067\u306b\n\n+ [\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8](#version-up-js)\n+ [Github\u4e0a\u306etag\u3092\u751f\u6210\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8](#git-tag-js)\n\n\u304c\u3042\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\n<a name=\"version-up-js\"></a>\n## \u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\n\npackage.json\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001version\u306e\u30de\u30a4\u30ca\u30fc\u756a\u53f7\u306e\u6570\u5b57\u3092\u4e00\u500b\u5897\u3084\u3057\u3066\u4e0a\u66f8\u304d\u3059\u308b\u3002\n\n\u4f8b\uff1a `\"version\":\"1.0.12\"` -> `\"version\":\"1.0.13\"`\n\n\n```js\n\n#!/usr/bin/env node\n\n/**\n * Version up this package.\n */\n\n\"use strict\";\n\n\nvar filename = require.resolve('../../../package.json'),  //Your project package.json path.\n    async = require('async'),\n    fs = require('fs');\n\n/**\n * Increment miner version.\n * @param {string} version - Version number to work wit.\n * @returns {string} - Incremented number\n * @private\n */\nfunction _incrementVersion(version) {\n    var versions = version.split('.');\n    versions.push(Number(versions.pop()) + 1);\n    return versions.join('.');\n}\n\n/**\n * Rewrite package.json to update version.\n * @param {string} filename - Package.json file path.\n * @param {function} callback - Callback when done.\n */\nfunction updateVersion(filename, callback) {\n    var data = require(filename);\n    data.version = _incrementVersion(data.version);\n    var content = JSON.stringify(data, null, 4);\n    fs.writeFile(filename, content, function (err) {\n        callback(err, data);\n    });\n}\n\nupdateVersion(filename, function (err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log('Package version incremented to:', data.version);\n    }\n});\n\n```\n\n\n<a name=\"git-tag-js\"></a>\n## Github\u4e0a\u306etag\u3092\u751f\u6210\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\n\npackage.json\u306e\u60c5\u5831\u3092\u3082\u3068\u306bgithub\u4e0a\u306btag\u3092\u4f5c\u308b\n\n\u4f8b\u3048\u3070`\"version\":\"1.0.3\"`\u306epackage\b\u306a\u3089`v1.0.3`\u306etag\u3092\u4f5c\u3063\u3066push\u3059\u308b\u3002\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u4f55\u3082\u3057\u306a\u3044\u3002\n\n\n```js\n#!/usr/bin/env node\n\n/**\n * Tag on github.\n */\n\n\"use strict\";\n\nvar pkgPath = require.resolve('../../../package.json'); // Your project package.json path.\n\nvar fs = require('fs'),\n    util = require('util'),\n    async = require('async'),\n    childProcess = require('child_process');\n\n/**\n * Spawn a process and pip stdout/stderr\n * @param {string} command - Command to spawn.\n * @param {string[]} args - Command arguments.\n * @param {function} callback - Callback when done.\n * @returns {*} - Spawned process.\n * @private\n */\nfunction _spawn(command, args, callback) {\n    var spwaned = childProcess.spawn(command, args, {});\n    spwaned.stdout.pipe(process.stdout);\n    spwaned.stderr.pipe(process.stderr);\n    spwaned.on('close', function (exitCode) {\n        var success = exitCode === 0,\n            err = success ? null : new Error(['Spawn', command, 'failed.'].join(' '));\n        callback(err);\n    });\n    return spwaned;\n}\n\n\n/**\n * Read and parse json file.\n * @param {string} filename - Filename to read.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _readJsonFile(filename, callback) {\n    async.waterfall([\n        function (callback) {\n            fs.readFile(filename, callback);\n        },\n        function (buffer, callback) {\n            var data = JSON.parse(buffer.toString());\n            callback(null, data);\n        }\n    ], callback);\n}\n\n/**\n * Tag name of a package json.\n * @param {string} packageJsonPath - File path of package.json\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _tagNameForPackage(packageJsonPath, callback) {\n    async.waterfall([\n        function (callback) {\n            _readJsonFile(packageJsonPath, callback);\n        },\n        function (data, callback) {\n            var tagName = 'v' + data.version;\n            callback(null, tagName);\n        }\n    ], callback);\n}\n\n/**\n * Check if tag alreay exists.\n * @param {string} tagName - Tag name to work with.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _tagExists(tagName, callback) {\n    var command = util.format('git tag -l %s', tagName);\n    childProcess.exec(command, function (err, stdOut, stdErr) {\n        callback(err || stdErr || null, !!stdOut);\n    });\n}\n\n/**\n * Add git tag.\n * @param {string} tagName - Tag name to add.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _addTag(tagName, callback) {\n    _spawn('git', ['tag', tagName], callback);\n}\n\n/**\n * Push tag to remote server.\n * @param {function} callback - Callback when done.\n * @private\n */\nfunction _pushTags(callback) {\n    _spawn('git', ['push', '--tags'], callback);\n}\n\nasync.waterfall([\n    function (callback) {\n        _tagNameForPackage(pkgPath, callback);\n    },\n    function (tagName, callback) {\n        async.waterfall([\n            function (callback) {\n                _tagExists(tagName, callback);\n            },\n            function (exists, callback) {\n                var err = exists ? new Error('Tag already exists.') : null;\n                callback(err);\n            },\n            function (callback) {\n                _addTag(tagName, callback);\n            },\n            function (callback) {\n                _pushTags(callback);\n            }\n        ], callback);\n    }\n], function (err) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log('Tag on git done!');\n    }\n});\n```\n", "tags": ["Node.js", "npm", "\u81ea\u52d5\u5316"]}