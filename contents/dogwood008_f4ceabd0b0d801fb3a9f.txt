{"context": "\u3053\u306e\u8a18\u4e8b\u306f \u7b2c2\u306e\u30c9\u30ef\u30f3\u30b4 Advent Calendar 2016 \u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u30c9\u30ef\u30f3\u30b4\u65b0\u53522\u5e74\u76ee\u306edogwood008\u3068\u7533\u3057\u307e\u3059\u3002\u4ee5\u524d\u9014\u4e2d\u307e\u3067\u7ffb\u8a33\u3057\u305f\uff08Kotlin\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u305f[\u524d\u7de8]\uff09\u306e\u3067\u3059\u304c\u3001\"Other\" \u3084\u305d\u306e\u4ed6\u30e1\u30a4\u30f3\u3067\u306a\u3044\u90e8\u5206\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u7d9a\u304d\u3068\u3057\u3066\u7ffb\u8a33\u3057\u307e\u3057\u305f\u3002\n\u65e5\u672c\u8a9e\u7248Kotlin\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u3068\u3001\u672c\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306f\u540c\u3058\u3067\u3059\u3002\u500b\u5225\u306e\u30da\u30fc\u30b8\u3067\u898b\u305f\u3044\u4eba\u7528\u3068\u3001\u4e00\u89a7\u3067\u898b\u305f\u3044\u4eba\u7528\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u4e0a\u8a18\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u3042\u3066\u308b\u3068\u539f\u6587\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u7ffb\u8a33\u306b\u8aa4\u308a\u304c\u3042\u308c\u3070\u304a\u6559\u3048\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff08PR\u3044\u305f\u3060\u3051\u308b\u3068\u3082\u3063\u3068\u3046\u308c\u3057\u3044\u3067\u3059\uff09\u3002\n\u3061\u306a\u307f\u306b\u3001\u524d\u7de8\u3067\u7ffb\u8a33\u3057\u305f\u3068\u304d\u306e\u6587\u7ae0\u306f\u3001\u5168\u3066\u66f8\u304d\u76f4\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n\u4f55\u3082\u3057\u306a\u3044\u3001\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3060\u3051\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3067\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u6a5f\u80fd\u306f\u3001\u30c7\u30fc\u30bf\u304b\u3089\u6a5f\u68b0\u7684\u306b\u63a8\u8ad6\u3067\u304d\u307e\u3059\u3002Kotlin\u3067\u306f\u3001\u3053\u308c\u306f \u30c7\u30fc\u30bf\u30af\u30e9\u30b9 \u3068\u547c\u3070\u308c\u3001 data \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u307e\u3059\u3002\ndata class User(val name: String, val age: Int)\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u81ea\u52d5\u7684\u306b\u6b21\u306e\u30e1\u30f3\u30d0\u3092\u63a8\u8ad6\u3057\u307e\u3059\uff1a\n\n\nequals() / hashCode() \u306e\u30da\u30a2\u3001\n\n\"User(name=John, age=42)\" \u5f62\u5f0f\u306e toString() \u3001\n\u5ba3\u8a00\u3057\u305f\u9806\u756a\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b componentN() \u95a2\u6570\u3001\n\ncopy() \u95a2\u6570\uff08\u4e0b\u8a18\u53c2\u7167\uff09\u3002\n\n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u30af\u30e9\u30b9\u672c\u4f53\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u57fa\u672c\u578b\u304b\u3089\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002\n\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u8cab\u6027\u3068\u610f\u5473\u306e\u3042\u308b\u52d5\u4f5c\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001\u6b21\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff1a\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 val \u307e\u305f\u306f var \u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001 abstract, open, sealed \u307e\u305f\u306f inner \u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff08\u305f\u3060\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\uff09\u3002\n\n\nJVM\u4e0a\u3067\u3001\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\ndata class User(val name: String = \"\", val age: Int = 0)\n\n\n\n\u30b3\u30d4\u30fc\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e \u3044\u304f\u3064\u304b \u3092\u5909\u66f4\u3057\u3001\u6b8b\u308a\u3092\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3088\u304f\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c copy() \u95a2\u6570\u304c\u4f5c\u6210\u3055\u308c\u308b\u7406\u7531\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306a User \u30af\u30e9\u30b9\u306e\u5834\u5408\u3001\u305d\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)     \n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3068\u5206\u89e3\u5ba3\u8a00 (Destructuring Declarations)\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u305f\u3081\u306b\u751f\u6210\u3057\u305f \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u95a2\u6570 \u306f\u3001\u5206\u89e3\u5ba3\u8a00\u5185\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nval jane = User(\"Jane\", 35) \nval (name, age) = jane\nprintln(\"$name, $age years of age\") // \"Jane, 35 years of age\" \u3092\u51fa\u529b\u3059\u308b\n\n\n\u6a19\u6e96\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001 Pair \u3068 Triple \u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u305f\u3081\u306b\u610f\u5473\u306e\u3042\u308b\u540d\u524d\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001\u3068\u3044\u3046\u306e\u304c\u7406\u7531\u3067\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u540d\u524d\u4ed8\u304d\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001\u8a2d\u8a08\u4e0a\u306e\u3088\u308a\u826f\u3044\u9078\u629e\u3067\u3059\u304c\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\nJava\u3068\u540c\u3058\u3088\u3046\u306b\u3001Kotlin\u306e\u30af\u30e9\u30b9\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\nclass Box<T>(t: T) {\n  var value = t\n}\n\n\u4e00\u822c\u7684\u306b\u3001\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u6211\u3005\u306f\u3001\u578b\u5f15\u6570\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nval box: Box<Int> = Box<Int>(1)\n\n\u3057\u304b\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\uff08\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u304b\u3089\u3001\u307e\u305f\u306f\u4f55\u3089\u304b\u306e\u4ed6\u306e\u624b\u6bb5\u306b\u3088\u3063\u3066\uff09\u3001\u300c1\u300d\u306f\u3001\u578b\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nval box = Box(1) // 1 \u306f Int\u578b\u3092\u3082\u3064\u305f\u3081\u3001\u3053\u3053\u3067\u306f Box<Int> \u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u308f\u304b\u308b\n\n\n\u5206\u6563\nJava\u306e\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u6700\u3082\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u90e8\u5206\u306e\u4e00\u3064\u306f\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u7a2e\u985e\uff08Java\u306e\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306eFAQ\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3067\u3059\u3002\u305d\u3057\u3066\u3001Kotlin\u306f\u3001\u3044\u305a\u308c\u3082\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u30012\u3064\u306e\u5225\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff1a\u5ba3\u8a00\u7b87\u6240\u306e\u5206\u6563\u3068\u578b\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u307e\u305a\u306f\u3001Java\u304c\u3053\u308c\u3089\u306e\u795e\u79d8\u7684\u306a\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5fc5\u8981\u3068\u3059\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u554f\u984c\u306fEffective Java\u306e\u9805\u76ee28\u300cAPI\u306e\u67d4\u8edf\u6027\u3092\u9ad8\u3081\u308b\u305f\u3081\u306e\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u4f7f\u7528\u300d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305a\u3001Java\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306f\u4e0d\u5909\u3067\u3059\u3002\u3053\u308c\u306f\u3001 List<String> \u306f List<Object> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7 \u3067\u306f\u306a\u3044 \u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u306a\u305c\u305d\u3046\u306a\u306e\u304b\uff1f\u3082\u3057\u30ea\u30b9\u30c8\u304c \u4e0d\u5909 \u3067\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u3001\u5b9f\u884c\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u306f\u3001Java\u306e\u914d\u5217\u3088\u308a\u826f\u3044\u3082\u306e\u3067\u306f\u306a\u304b\u3063\u305f\u3067\u3057\u3087\u3046\u3002\n// Java\nList<String> strs = new ArrayList<String>();\nList<Object> objs = strs; // !!! \u4eca\u5f8c\u306e\u554f\u984c\u306e\u539f\u56e0\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002 Java\u306f\u3053\u308c\u3092\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\uff01\nobjs.add(1); // Integer \u3092 Strings \u306e\u30ea\u30b9\u30c8\u3078\u5165\u308c\u308b\nString s = strs.get(0); // !!! ClassCastException: Integer \u3092 String \u3078\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u306a\u3044\n\n\u3064\u307e\u308a\u3001Java\u306e\u5b9f\u884c\u6642\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u7981\u6b62\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 Collection \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u306e addAll() \u30e1\u30bd\u30c3\u30c9\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f\u76f4\u611f\u7684\u306b\u3001\u6211\u3005\u306f\u305d\u308c\u3092\u3053\u306e\u3088\u3046\u306b\u7f6e\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<E> items);\n}\n\n\u3057\u304b\u3057\u3001\u305d\u306e\u5f8c\u3001\u6b21\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u3053\u3068\uff08\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3042\u308b\uff09\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n// Java\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n  to.addAll(from); // !!! addAll\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u5ba3\u8a00\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\uff1a\n                   //       Collection<String> \u306f Collection <Object> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\n}\n\n\uff08Java\u3067\u306f\u3001\u3053\u306e\u6559\u8a13\u306b\u5805\u3044\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002 Effective Java\u306e\u9805\u76ee25\u300c \u914d\u5217\u3088\u308a\u30ea\u30b9\u30c8\u3092\u597d\u3080 \u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\u3053\u308c\u304c\u3001 addAll() \u306e\u5b9f\u969b\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308b\u7406\u7531\u3067\u3059\uff1a\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<? extends E> items);\n}\n\n\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u578b\u5f15\u6570 ? extends T \u306f\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u53d7\u3051\u5165\u308c\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f T \u306e\u30b5\u30d6\u30bf\u30a4\u30d7 \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u3063\u3066\u3001 T \u81ea\u8eab\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u79c1\u305f\u3061\u304c\u5b89\u5168\u306b T \u306e\u9805\u76ee\uff08\u3053\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u306f T \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\uff09\u3092 \u8aad\u307f\u53d6\u308b \u3053\u3068\u304c\u3067\u304d\u3066\u3082\u3001\u672a\u77e5\u306e T \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306b\u5bfe\u3057\u3066\u3001\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5fdc\u3058\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001 \u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u306a\u3044 \u7406\u7531\u306f\u3053\u308c\u3067\u3059\u3002\n\u3053\u306e\u5236\u9650\u3068\u5f15\u304d\u63db\u3048\u306b\u3001\u79c1\u305f\u3061\u306f\u671b\u3093\u3060\u52d5\u4f5c\u3092\u5f97\u307e\u3059\uff1a Collection<String> \u306f Collection<? extends Object> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7 \u3067\u3042\u308b \u3068\u3044\u3046\u3053\u3068\u3002\n\u300c\u8ce2\u3044\u8a00\u8449\u300d\u3067\u8a00\u3044\u63db\u3048\u308b\u3068\u3001 \u62e1\u5f35\u3059\u308b \u30d0\u30a4\u30f3\u30c9\uff08 \u4e0a\u6607 \u306e\u30d0\u30a4\u30f3\u30c9\uff09\u306e\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306f \u578b\u5171\u5909 \u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30ea\u30c3\u30af\u304c\u306a\u305c\u50cd\u304f\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e\u9375\u306f\u3001\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff1a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092 \u53d6\u308a\u51fa\u3059 \u3053\u3068\u3060\u3051\u3067\u304d\u308b\u306e\u306a\u3089\u3070\u3001String \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001 Object \u3067\u8aad\u307f\u51fa\u305b\u3070\u826f\u3044\u306e\u3067\u3059\u3002\n\u53cd\u5bfe\u306b\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u30a2\u30a4\u30c6\u30e0\u3092 \u5165\u308c\u308b \u3053\u3068\u3060\u3051\u3067\u304d\u308b\u306e\u306a\u3089\u3070\u3001 Object \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3001 String \u3092\u5165\u308c\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u3002 Java\u3067\u306f List<Object> \u306e \u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7 \u3067\u3042\u308b\u3001 List<? super String> \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u5f8c\u8005\u306f \u53cd\u5909\u6027 \u3068\u547c\u3070\u308c\u3001 String \u3092 List<? super String> \u306e\u5f15\u6570\u3068\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001 add(String) \u3084 set(int, String) \u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u305f\u3060\u3057\u3001List<T> \u3067 T \u3092\u8fd4\u3059\u4f55\u304b\u3092\u547c\u3093\u3060\u3068\u304d\u3001\u5f97\u308b\u306e\u306f String \u3067\u306f\u306a\u304f Object \u3067\u3059\u304c\u3002\n\u30b8\u30e7\u30b7\u30e5\u30a2\u30fb\u30d6\u30ed\u30c3\u30af (Joshua Bloch) \u306f\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 \u300c \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\uff08\u751f\u7523\u8005\uff09 \u304b\u3089\u306e\u307f \u8aad\u307f\u8fbc\u307f \u3001\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\uff08\u6d88\u8cbb\u8005\uff09 \u306b\u306e\u307f \u66f8\u304d\u8fbc\u3080 \u300d\u3068\u547c\u3073\u307e\u3057\u305f\u3002\u5f7c\u306e\u52e7\u3081\u306b\u3088\u308b\u3068\u3001 \u300c\u6700\u5927\u306e\u67d4\u8edf\u6027\u3092\u5f97\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3084\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u3092\u8868\u3059\u5165\u529b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u30bf\u30a4\u30d7\u3092\u4f7f\u7528\u3059\u308b\u300d \u3002 \u6b21\u306e\u8a18\u61b6\u8853 (mnemonic) \u3082\u63d0\u6848\u3057\u3066\u3044\u307e\u3059\u3002\nPECS\u306fProducer-Extends, Consumer-Super \u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u6ce8 \uff1a\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff08\u305f\u3068\u3048\u3070\u3001 List<? extends Foo> \uff09\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4e0a\u306e add() \u3084 set() \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u4e0d\u5909\uff09 \u3067\u3042\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001 clear() \u306f\u5168\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3089\u306a\u3044\u305f\u3081\u3001\u30ea\u30b9\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u9805\u76ee\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306b clear() \u3092\u547c\u3073\u51fa\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\uff08\u307e\u305f\u306f\u5206\u6563\u306e\u4ed6\u306e\u578b\uff09\u306b\u3088\u3063\u3066\u552f\u4e00\u4fdd\u8a3c\u3055\u308c\u308b\u306e\u306f \u578b\u306e\u5b89\u5168\u6027 \u3067\u3059\u3002\u4e0d\u5909\u6027\u306f\u5168\u304f\u5225\u306e\u8a71\u3067\u3059\u3002\n\n\u5ba3\u8a00\u7b87\u6240\u5206\u6563\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e Source<T> \u304c\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 T \u3092\u3068\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u305f\u305a\u3001 T \u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002 \n// Java\ninterface Source<T> {\n  T nextT();\n}\n\n\u305d\u308c\u306f Source<Object> \u578b\u306e\u5909\u6570\uff08\u547c\u3073\u51fa\u305b\u308b\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\uff09\u5185\u3067 Source<String> \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u306e\u306b\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3059\u3002 -- \u3057\u304b\u3057\u3001Java\u306f\u3053\u308c\u3092\u77e5\u3063\u3066\u3044\u308b\u3057\u3001\u307e\u3060\u305d\u308c\u3092\u7981\u6b62\u3057\u3066\u3044\u307e\u305b\u3093\uff1a\n// Java\nvoid demo(Source<String> strs) {\n  Source<Object> objects = strs; // !!! Java \u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\n  // ...\n}\n\n\u3053\u308c\u3092\u4fee\u6b63\u3059\u308b\u305f\u3081\u306b\u3001Source<? extends Object> \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5168\u3066\u306e\u540c\u30e1\u30bd\u30c3\u30c9\u3092\u524d\u306e\u3088\u3046\u306a\u5909\u6570\u3067\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u9806\u5e8f\u306b\u610f\u5473\u306f\u306a\u304f\u3001\u3088\u308a\u8907\u96d1\u306a\u578b\u3067\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u4fa1\u5024\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u305d\u308c\u3092\u77e5\u308a\u307e\u305b\u3093\u3002\nKotlin\u3067\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3053\u306e\u7a2e\u306e\u554f\u984c\u3092\u8aac\u660e\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001 \u5ba3\u8a00\u7b87\u6240\u5206\u6563 \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\uff1a\u30bd\u30fc\u30b9\u306e \u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092 Source<T> \u306e\u30e1\u30f3\u30d0\u304b\u3089\u306e\u307f \u8fd4\u3057 \uff08\u30d7\u30ed\u30c7\u30e5\u30fc\u30b9\u3059\u308b\uff09\u3001\u6d88\u8cbb\u3055\u308c\u308b\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u6211\u3005\u306f out \u4fee\u98fe\u5b50\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\nabstract class Source<out T> {\n  abstract fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n  val objects: Source<Any> = strs // \u3053\u308c\u306f OK \u3001\u306a\u305c\u306a\u3089 T \u306fout\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u305f\u3081\n  // ...\n}\n\n\u4e00\u822c\u7684\u306a\u30eb\u30fc\u30eb\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30af\u30e9\u30b9 C \u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u304c\u3001 out \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u3001 C \u306e\u30e1\u30f3\u30d0\u306e\u4e2d\u3067 out \u306e\u4f4d\u7f6e\u3067\u306e\u307f\u305d\u308c\u304c\u8d77\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001 C<Base> \u3092\u8fd4\u3059\u3068\u304d\u306f C<Derived> \u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306b\u5b89\u5168\u306b\u306a\u308a\u5f97\u307e\u3059\u3002\n\u300c\u8ce2\u3044\u8a00\u8449\u300d\u3067\u3044\u3046\u3068\u3001\u30af\u30e9\u30b9 C \u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf T \u306b \u5171\u5909 \u3067\u3042\u308b\u3001\u307e\u305f\u306f T \u304c \u5171\u5909 \u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u3068\u306a\u308a\u307e\u3059\u3002 C \u306f T \u306e \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5 \u3067\u3042\u308a\u3001 T \u306e \u30b3\u30f3\u30b7\u30e5\u30fc\u30de \u3067\u306f\u306a\u3044\u3001\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nout \u4fee\u98fe\u5b50\u306f\u3001 \u5206\u6563\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3 \u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5ba3\u8a00\u7b87\u6240\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6211\u3005\u306f \u5ba3\u8a00\u7b87\u6240\u5206\u6563 \u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u304c\u4f7f\u7528\u6642\u306b\u578b\u3092\u5171\u5909\u306b\u3059\u308b\u3001Java\u306e \u4f7f\u7528\u7b87\u6240\u5206\u6563 \u3068\u306f\u5bfe\u7167\u7684\u3067\u3059\u3002\nout \u306b\u52a0\u3048\u3066\u3001Kotlin\u306f in \u3068\u3044\u3046\u88dc\u5b8c\u7684\u306a\u5206\u6563\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e \u53cd\u5909 \u3092\u884c\u3044\u307e\u3059\u3002\u6d88\u8cbb\u3055\u308c\u308b\u306e\u307f\u3067\u3042\u308a\u3001\u6c7a\u3057\u3066\u30d7\u30ed\u30c7\u30e5\u30fc\u30b9\uff08\u751f\u7523\uff09\u3055\u308c\u307e\u305b\u3093\u3002\n\u53cd\u5909\u30af\u30e9\u30b9\u306e\u826f\u3044\u4f8b\u306f Comparable \u3067\u3059\uff1a\nabstract class Comparable<in T> {\n  abstract fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n  x.compareTo(1.0) // 1.0 \u306f Number \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u3042\u308b Double \u578b\u3092\u3082\u3064\n  // \u305d\u308c\u3086\u3048\u3001 x \u3092 Comparable<Double> \u578b\u306e\u5909\u6570\u3078\u4ee3\u5165\u3067\u304d\u308b\n  val y: Comparable<Double> = x // OK!\n}\n\n\uff08C#\u3067\u4f55\u5ea6\u3082\u6210\u529f\u3057\u3066\u3044\u308b\u3088\u3046\u306b\uff09in \u3068 out \u306f\u81ea\u5df1\u8aac\u660e\u7684\u3067\u3042\u308b\u3086\u3048\u306b\u3001\u4ee5\u524d\u8ff0\u3079\u305f\u8a18\u61b6\u8853\uff08\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\uff09\u306f\u672c\u5f53\u306f\u4e0d\u8981\u3067\u3001\u3088\u308a\u9ad8\u6b21\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u8a00\u3044\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\u5b9f\u5b58\u7684\u8a00\u3044\u63db\u3048\uff1a\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\uff08\u6d88\u8cbb\u8005\uff09\u306f in\u3001\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\uff08\u751f\u7523\u8005\uff09\u306f out \uff01 :-)\n\n\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09\n\n\u5229\u7528\u7b87\u6240\u306e\u5206\u6563\uff1a\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\nout \u578b\u30d1\u30e9\u30e1\u30fc\u30bfT\u3092\u5ba3\u8a00\u3057\u3001\u4f7f\u7528\u7b87\u6240\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3068\u306e\u554f\u984c\u304c\u306a\u3044\u3053\u3068\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u305d\u3046\u3001\u305d\u308c\u306f\u554f\u984c\u306e\u30af\u30e9\u30b9\u304c\u5b9f\u969b\u306b T \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307f\u3092\u8fd4\u3059\u3088\u3046\u5236\u9650 \u3067\u304d\u308b \u3068\u304d\u3067\u3059\u304c\u3001\u3067\u304d\u306a\u3044\u306e\u306f\u3069\u3093\u306a\u3068\u304d\u3067\u3057\u3087\u3046\u3002\u3053\u306e\u826f\u3044\u4f8b\u306f\u3001Array\u3067\u3059\u3002\nclass Array<T>(val size: Int) {\n  fun get(index: Int): T { /* ... */ }\n  fun set(index: Int, value: T) { /* ... */ }\n}\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f T \u306e\u5171\u5909\u307e\u305f\u306f\u53cd\u5909\u306e\u3044\u305a\u308c\u304b\u306b\u3082\u306a\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3001\u3053\u308c\u306f\u7279\u5b9a\u306e\u4e0d\u6493\uff08\u3075\u3068\u3046\uff09\u6027\uff08\u66f2\u3052\u3089\u308c\u306a\u3044\u7279\u6027\uff09\u3092\u8ab2\u3057\u3066\u3044\u307e\u3059\u3002\u6b21\u306e\u95a2\u6570\u3092\u8003\u3048\u3066\u307f\u307e\u3059\uff1a\nfun copy(from: Array<Any>, to: Array<Any>) {\n  assert(from.size == to.size)\n  for (i in from.indices)\n    to[i] = from[i]\n}\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u3042\u308b\u914d\u5217\u304b\u3089\u5225\u306e\u914d\u5217\u3078\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u305d\u308c\u3092\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3)\ncopy(ints, any) // \u30a8\u30e9\u30fc\uff1a (Array<Any>, Array<Any>) \u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\n\n\u3053\u3053\u3067\u540c\u3058\u3088\u3046\u306a\u3088\u304f\u3042\u308b\u554f\u984c\u306b\u906d\u9047\u3057\u307e\u3059\uff1a Array<T> \u306f T \u306b\u304a\u3044\u3066 \u4e0d\u5909 \u3067\u3042\u308a\u3001\u3086\u3048\u306b Array<Int> \u3082 Array<Any> \u3082\u4ed6\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3069\u3046\u3057\u3066\uff1f\u30b3\u30d4\u30fc\u304c\u4f55\u304b\u60aa\u3044\u3053\u3068\uff08\u3059\u306a\u308f\u3061 from \u3078\u306e\u6587\u5b57\u5217\u306e \u66f8\u304d\u8fbc\u307f \u3084\u51fa\u529b\u306e\u8a66\u884c\uff09\u3092\u3084\u3063\u3066\u3044\u308b \u53ef\u80fd\u6027\u304c\u3042\u308b \u305f\u3081\u3067\u3059\u3002\u307e\u305f Int \u306e\u914d\u5217\u3092\u5b9f\u969b\u306b\u6e21\u3055\u308c\u308b\u3068\u3001ClassCastException \u304c\u6642\u3005\u5f8c\u3067\u6295\u3052\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n\u3053\u3053\u3067\u3001\u552f\u4e00\u306e\u4fdd\u8a3c\u3057\u305f\u3044\u3053\u3068\u306f\u3001copy() \u304c\u3044\u304b\u306a\u308b\u60aa\u3055\u3082\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 copy() \u304c from \u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3092\u7981\u6b62\u3057\u305f\u304f\u3001\u305d\u308c\u3092\u884c\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u3059\uff1a\nfun copy(from: Array<out Any>, to: Array<Any>) {\n // ...\n}\n\n\u3053\u3053\u3067\u8d77\u3053\u3063\u305f\u3053\u3068\u306f\u3001 \u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09 \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002 from \u306f\u5358\u7d14\u306b\u914d\u5217\u306a\u306e\u3067\u306f\u306a\u304f\u3001\u5236\u9650\u3055\u308c\u305f\uff08 \u6295\u5f71\u3055\u308c\u305f \uff09\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092\u8fd4\u3059\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001 get() \u3092\u547c\u3076\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c\u3001 \u4f7f\u7528\u7b87\u6240\u5206\u6563 \u306e\u305f\u3081\u306e\u6211\u3005\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3042\u308a\u3001Java\u306e Array<? extends Object> \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u304c\u3001\u5c11\u3057\u3060\u3051\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b in \u3067\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a\nfun fill(dest: Array<in String>, value: String) {\n  // ...\n}\n\nArray<in String> \u306f Java\u306e Array<? super String> \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001 CharSequence \u306e\u914d\u5217\u3084 Object \u306e\u914d\u5217\u3092 fill() \u95a2\u6570\u3078\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 (star-projections)\n\u578b\u5f15\u6570\u306b\u3064\u3044\u3066\u4f55\u3082\u77e5\u3089\u306a\u3044\u304c\u3001\u305d\u308c\u3067\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u3067\u4f7f\u7528\u3057\u305f\u3044\u3068\u3001\u6642\u306b\u306f\u8a00\u3044\u305f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306e\u5b89\u5168\u306a\u65b9\u6cd5\u3068\u306f\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u305d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3092\u5177\u4f53\u7684\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3001\u5168\u3066\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\nKotlin\u306f\u3053\u306e\u305f\u3081\u306b\u3001\u3044\u308f\u3086\u308b \u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 (star-projection) \u69cb\u6587\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a\n\n\nFoo <out T> \u306e\u5834\u5408\u3001T \u306f\u4e0a\u9650 TUpper \u3092\u6301\u3064\u5171\u5909\u306e\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308a\u3001 Foo <*> \u306f Foo<out TUpper> \u3068\u7b49\u4fa1\u3067\u3059\u3002\u3053\u308c\u306f\u3001 T \u304c\u4e0d\u660e\u306a\u5834\u5408\u306b\u3001\u5b89\u5168\u306b\u306f Foo <*> \u304b\u3089 TUpper \u306e\u5024\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\nT \u304c\u53cd\u5909\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b Foo<in T> \u306b\u3064\u3044\u3066\u306f\u3001 Foo<*> \u306f Foo <in Nothing> \u3068\u7b49\u4fa1\u3067\u3059\u3002\u305d\u308c\u306f T \u306f\u4e0d\u660e\u3067\u3042\u308b\u5834\u5408\u306f\u5b89\u5168\u306a\u65b9\u6cd5\u3067 Foo <*> \u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u65b9\u6cd5\u304c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\nFoo <T> \u306e\u5834\u5408\u3001 T \u306f\u4e0a\u9650 TUpper \u3092\u6301\u3064\u4e0d\u5909\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308a\u3001\u5024\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e Foo<out TUpper>\u304a\u3088\u3073\u5024\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e Foo<in Nothing> \u3068 Foo <*> \u306f\u540c\u7b49\u3067\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u304c\u3044\u304f\u3064\u304b\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u5834\u5408\u3001\u305d\u308c\u3089\u306f\u72ec\u7acb\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u6295\u5f71\uff09\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u578b\u304c interface Function<in T, out U> \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306a\u3089\u304c\u3001\u6b21\u306e\u3088\u3046\u306a\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u60f3\u50cf\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n\nFunction<*, String> \u306f Function<in Nothing, String> \u3092\u610f\u5473\u3057\u307e\u3059\n\nFunction<Int, *> \u306f Function<Int, out Any?> \u3092\u610f\u5473\u3057\u307e\u3059\n\nFunction<*, *> \u306f Function<in Nothing, out Any?> \u3092\u610f\u5473\u3057\u307e\u3059\n\n\u6ce8\u610f \uff1a\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306f\u975e\u5e38\u306bJava\u306e raw \u30bf\u30a4\u30d7\u306b\u306b\u3066\u3044\u307e\u3059\u304c\u3001\u5b89\u5168\u3067\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u30af\u30e9\u30b9\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u95a2\u6570\u3082\u540c\u3058\u3067\u3059\u3002\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u95a2\u6570\u540d\u306e\u524d\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n\nfun <T> T.basicToString() : String {  // \u62e1\u5f35\u95a2\u6570\n  // ...\n}\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u3001\u95a2\u6570\u540d\u306e \u5f8c\u306b \u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u578b\u5f15\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nval l = singletonList<Int>(1)\n\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u5236\u7d04\n\u4e0e\u3048\u3089\u308c\u308b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u7f6e\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3059\u3079\u3066\u306e\u8a31\u5bb9\u3055\u308c\u308b\u578b\u306e\u96c6\u5408\u306f\u3001 \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u5236\u7d04 \u306b\u3088\u3063\u3066\u5236\u9650\u3055\u308c\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n\u4e0a\u9650 (Upper bounds)\n\u5236\u7d04\u306e\u6700\u3082\u4e00\u822c\u7684\u306a\u30bf\u30a4\u30d7\u306f\u3001Java\u306e extends \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b \u4e0a\u9650 \u3067\u3059\u3002\nfun <T : Comparable<T>> sort(list: List<T>) {\n  // ...\n}\n\n\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u6307\u5b9a\u3055\u308c\u305f\u30bf\u30a4\u30d7\u304c \u4e0a\u9650 \u3067\u3059\u3002 Comparable<T> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306f T \u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\nsort(listOf(1, 2, 3)) // OK. Int \u306f Comparable<Int> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u3059\nsort(listOf(HashMap<Int, String>())) // \u30a8\u30e9\u30fc\uff1a HashMap<Int, String> \u306f Comparable<HashMap<Int, String>> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u306a\u3044\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e0a\u9650\uff08\u3044\u305a\u308c\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\uff09\u306f Any? \u3067\u3059\u3002\u552f\u4e00\u306e\u4e0a\u9650\u3092\u3001\u89d2\u62ec\u5f27\u5185\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u540c\u3058\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8907\u6570\u306e\u4e0a\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f where \u53e5\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff1a\nfun <T> cloneWhenGreater(list: List<T>, threshold: T): List<T>\n    where T : Comparable,\n          T : Cloneable {\n  return list.filter { it > threshold }.map { it.clone() }\n}\n\n\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9\n\u30af\u30e9\u30b9\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u306e\u4e2d\u306b\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nclass Outer {\n  private val bar: Int = 1\n  class Nested {\n    fun foo() = 2\n  }\n}\n\nval demo = Outer.Nested().foo() // == 2\n\n\n\u5185\u90e8\u30af\u30e9\u30b9\n\u30af\u30e9\u30b9\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b inner{:.keyword} \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u5185\u90e8\u30af\u30e9\u30b9\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u3082\u3061\u307e\u3059\uff1a\nclass Outer {\n  private val bar: Int = 1\n  inner class Inner {\n    fun foo() = bar\n  }\n}\n\nval demo = Outer().Inner().foo() // == 1\n\n\u5185\u90e8\u30af\u30e9\u30b9\u5185\u3067\u306e this{:.keyword} \u306e\u66d6\u6627\u3055\u56de\u907f\u306b\u3064\u3044\u3066\u5b66\u3076\u305f\u3081\u306b\u3001\u4fee\u98fe\u3055\u308c\u305f this{:.keyword} \u5f0f\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\n\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a\nwindow.addMouseListener(object: MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6a5f\u80fd\u7684\u306aJava\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u3064\u307e\u308a\u3001\u3042\u308bJava\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u3072\u3068\u3064\u306e\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3072\u3082\u3065\u304f\uff09\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u578b\u304c\u524d\u306b\u4ed8\u3044\u305f\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u7528\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\nval listener = ActionListener { println(\"clicked\") }\n\n\n\u5217\u6319\u578b\u30af\u30e9\u30b9 (Enum Classes)\n\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u6700\u3082\u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5\u306f\u3001\u578b\u5b89\u5168\u306a\u5217\u6319\u578b\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff1a\nenum class Direction {\n  NORTH, SOUTH, WEST, EAST\n}\n\n\u5404\u5217\u6319\u578b\u306e\u5b9a\u6570\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u5217\u6319\u578b\u5b9a\u6570\u306f\u30ab\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\n\n\u521d\u671f\u5316\n\u5404\u5217\u6319\u578b\u306f\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067\u3001\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n\n\n\u7121\u540d\u30af\u30e9\u30b9\n\u5217\u6319\u578b\u5b9a\u6570\u306f\u3001\u72ec\u81ea\u306e\u7121\u540d\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nenum class ProtocolState {\n  WAITING {\n    override fun signal() = TALKING\n  },\n\n  TALKING {\n    override fun signal() = WAITING\n  };\n\n  abstract fun signal(): ProtocolState\n}\n\n\u305d\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u57fa\u672c\u30e1\u30bd\u30c3\u30c9\u3082\u540c\u69d8\u306b\u4f75\u305b\u3066\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002\u5217\u6319\u578b\u30af\u30e9\u30b9\u3067\u30e1\u30f3\u30d0\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001Java\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001\u30e1\u30f3\u30d0\u5b9a\u7fa9\u304b\u3089 \u5217\u6319\u578b \u5b9a\u6570\u5b9a\u7fa9\u3092\u30bb\u30df\u30b3\u30ed\u30f3\u3067\u533a\u5207\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5217\u6319\u578b\u5b9a\u6570\u3092\u4f7f\u7528\u3057\u305f\u4f5c\u696d\n\u3061\u3087\u3046\u3069Java\u3068\u540c\u3058\u3088\u3046\u306b\u3001Kotlin\u306e\u5217\u6319\u578b\u30af\u30e9\u30b9\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u5217\u6319\u578b\u5b9a\u6570\u3092\u7f85\u5217\u3057\u3001\u305d\u306e\u540d\u524d\u3067\u5217\u6319\u578b\u5b9a\u6570\u3092\u5f97\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u5408\u6210\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092 EnumClass \u3068\u4eee\u5b9a\u3057\u3066\uff09\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\nEnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array<EnumClass>\n\n\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u304c\u3001\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5217\u6319\u578b\u5b9a\u6570\u306e\u3044\u305a\u308c\u3068\u3082\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3001valueOf() \u30e1\u30bd\u30c3\u30c9\u306f IllegalArgumentException \u3092\u30b9\u30ed\u30fc\u3057\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u5217\u6319\u578b\u5b9a\u6570\u306f\u3001\u5217\u6319\u578b\u30af\u30e9\u30b9\u5ba3\u8a00\u3067\u305d\u306e\u540d\u524d\u3068\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\u307e\u3059\u3002\nval name: String\nval ordinal: Int\n\n\u5217\u6319\u578b\u5b9a\u6570\u306f\u5217\u6319\u578b\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u9806\u5e8f\u3067\u3042\u308b\u81ea\u7136\u306a\u9806\u5e8f\u3067\u3001Comparable \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u5ba3\u8a00\n\u6642\u306b\u306f\u3042\u308b\u30af\u30e9\u30b9\u3092\u308f\u305a\u304b\u306b\u4fee\u6b63\u3057\u305f\u3060\u3051\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u308c\u306e\u305f\u3081\u306e\u65b0\u3057\u3044\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u660e\u793a\u7684\u306b\u5ba3\u8a00\u305b\u305a\u306b\u3001\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Java\u3067\u306f \u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9 \u3067\u3053\u306e\u4e8b\u4f8b\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\nKotlin\u3067\u306f\u305f\u3063\u305f \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f \u3068 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00 \u3060\u3051\u3067\u3053\u306e\u6982\u5ff5\u3092\u4e00\u822c\u5316\u3057\u307e\u3059\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\n\u3044\u304f\u3064\u304b\u306e\u578b\uff081\u3064\u3067\u3082\u8907\u6570\u3067\u3082\uff09\u304b\u3089\u7d99\u627f\u3059\u308b\u7121\u540d\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff1a\nwindow.addMouseListener(object : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n\n\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u9069\u5207\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u591a\u304f\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306f\u3001\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u30b3\u30f3\u30de\u533a\u5207\u308a\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nopen class A(x: Int) {\n  public open val y: Int = x\n}\n\ninterface B {...}\n\nval ab: A = object : A(1), B {\n  override val y = 15\n}\n\n\u4e07\u304c\u4e00\u3001\u81ea\u660e\u3067\u306a\u3044\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u307f\u300d\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u5358\u7d14\u306b\u6b21\u306e\u3088\u3046\u306b\u8a00\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nval adHoc = object {\n  var x: Int = 0\n  var y: Int = 0\n}\nprint(adHoc.x + adHoc.y)\n\n\u305f\u3060\u3001Java\u306e\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\u306e\u3088\u3046\u306b\u3001\u5185\u5305\u3059\u308b\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u306e\u30b3\u30fc\u30c9\u304c\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08Java\u306e\u3068\u306f\u9055\u3063\u3066\u3001\u3053\u308c\u306f final \u306e\u5909\u6570\u306b\u9650\u5b9a\u3055\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff09\nfun countClicks(window: JComponent) {\n  var clickCount = 0\n  var enterCount = 0\n\n  window.addMouseListener(object : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n      clickCount++\n    }\n\n    override fun mouseEntered(e: MouseEvent) {\n      enterCount++\n    }\n  })\n  // ...\n}\n\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\n\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306f\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3042\u308a\u3001Kotlin\uff08Scala\u306e\u5f8c\u3067\u3059\uff09\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u5bb9\u6613\u306b\u5ba3\u8a00\u3067\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff1a\nobject DataProviderManager {\n  fun registerDataProvider(provider: DataProvider) {\n    // ...\n  }\n\n  val allDataProviders: Collection<DataProvider>\n    get() = // ...\n}\n\n\n\u3053\u308c\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306f\u5e38\u306b object \u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5f8c\u306b\u540d\u524d\u3092\u6301\u3061\u307e\u3059\u3002\u3061\u3087\u3046\u3069\u5909\u6570\u5ba3\u8a00\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306f\u5f0f\u3067\u306f\u306a\u304f\u3001\u4ee3\u5165\u6587\u306e\u53f3\u5074\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u306e\u540d\u524d\u3092\u76f4\u63a5\u4f7f\u7528\u3057\u307e\u3059\u3002\nDataProviderManager.registerDataProvider(...)\n\n\u3053\u306e\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nobject DefaultListener : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n}\n\n\u6ce8\uff1a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff08\u3064\u307e\u308a\u3001\u95a2\u6570\u5185\u3067\u76f4\u63a5\u30cd\u30b9\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u305f\u3060\u3057\u3001\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u307e\u305f\u306f\u975e\u5185\u90e8\u30af\u30e9\u30b9\u306b\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (Companion Objects)\n\u30af\u30e9\u30b9\u5185\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306f\u3001 companion{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass MyClass {\n  companion object Factory {\n    fun create(): MyClass = MyClass()\n  }\n}\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u4fee\u98fe\u5b50\u3068\u3057\u3066\u5358\u306b\u30af\u30e9\u30b9\u540d\u3092\u4f7f\u7528\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nval instance = MyClass.create()\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u540d\u524d\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001 Companion \u3068\u3044\u3046\u540d\u524d\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\nclass MyClass {\n  companion object {\n  }\n}\n\nval x = MyClass.Companion\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30e1\u30f3\u30d0\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u884c\u6642\u306b\u306f\u305d\u308c\u3089\u306f\u307e\u3060\u5b9f\u969b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30f3\u30d0\u3067\u3042\u308a\u3001\u305f\u3068\u3048\u3070\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a\ninterface Factory<T> {\n  fun create(): T\n}\n\n\nclass MyClass {\n  companion object : Factory<MyClass> {\n    override fun create(): MyClass = MyClass()\n  }\n}\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001JVM\u4e0a\u3067\u306f\u3001 @JvmStatic \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u3092\u5b9f\u969b\u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001Java\u306e\u76f8\u4e92\u904b\u7528\u6027\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u5ba3\u8a00\u306e\u9593\u306e\u610f\u5473\u306e\u9055\u3044\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306e\u9593\u306b\u306f\u3001\u3042\u308b\u91cd\u8981\u306a\u610f\u5473\u4e0a\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\uff1a\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u306f \u3059\u3050\u306b \u5b9f\u884c\u3055\u308c\uff08\u521d\u671f\u5316\u3055\u308c\uff09\u3001\u305d\u3053\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u306f\u3001\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b \u9045\u5ef6\u3057\u3066 \u521d\u671f\u5316\u3055\u308c\u307e\u3059\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u304c\u8aad\u307f\u8fbc\u307e\u308c\u305f\uff08\u89e3\u6c7a\uff09\u3055\u308c\u305f\u3068\u304d\u306b\u521d\u671f\u5316\u3055\u308c\u3001\u3053\u308c\u306f Java \u306e\u9759\u7684\u521d\u671f\u5316\u5b50\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u306b\u4e00\u81f4\u3057\u307e\u3059\n\n\n\u59d4\u8b72 (Delegation)\n\n\u30af\u30e9\u30b9\u306e\u59d4\u8b72\nDelegation\u30d1\u30bf\u30fc\u30f3\u306f\u3001\u5b9f\u88c5\u7d99\u627f\u306e\u826f\u3044\u4ee3\u66ff\u624b\u6bb5\u3067\u3042\u308b\u3053\u3068\u304c\u8a3c\u660e\u3055\u308c\u3066\u304a\u308a\u3001Kotlin\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u3067\u305d\u308c\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3001\u304b\u3064\u5b9a\u578b\u30b3\u30fc\u30c9\u3092\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002\nDerivced \u30af\u30e9\u30b9\u306f\u3001 Base \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u7d99\u627f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e public \u30e1\u30bd\u30c3\u30c9\u306e\u3059\u3079\u3066\u3092\u59d4\u8b72\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ninterface Base {\n  fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n  override fun print() { print(x) }\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>) {\n  val b = BaseImpl(10)\n  Derived(b).print() // \u51fa\u529b\uff1a10\n}\n\nDerived \u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u30ea\u30b9\u30c8\u4e2d\u306e by{:.keyword} \u7bc0\u306f\u3001 b \u304c Derived \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5185\u90e8\u7684\u306b\u683c\u7d0d\u3055\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f b \u306b\u53d6\u308a\u6b21\u3050 Base \u306e\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (Delegated Properties)\n\u5fc5\u8981\u306a\u3068\u304d\u306b\u624b\u52d5\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u4e00\u5ea6\u5b9f\u88c5\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u975e\u5e38\u306b\u3046\u308c\u3057\u3044\u3068\u3044\u3063\u305f\u3001\u3042\u308b\u7a2e\u306e\u3088\u304f\u3042\u308b\u4e00\u822c\u7684\u306a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3042\u308a\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u306f\u3001\n\n\u9045\u5ef6\u30d7\u30ed\u30d1\u30c6\u30a3 (lazy properties) \uff1a\u5024\u306f\u6700\u521d\u306e\u30a2\u30af\u30bb\u30b9\u6642\u306b\u521d\u3081\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\n\u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb\u30d7\u30ed\u30d1\u30c6\u30a3 (observable properties) \uff1a\u30ea\u30b9\u30ca\u304c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5909\u66f4\u306b\u95a2\u3059\u308b\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u306f\u5206\u304b\u308c\u3066\u3044\u306a\u3044\u3001map\u5185\u3067\u306e\u30b9\u30c8\u30ed\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (strong properties)\n\n\u3053\u308c\u3089\uff08\u304a\u3088\u3073\u305d\u306e\u4ed6\uff09\u306e\u30b1\u30fc\u30b9\u3092\u30ab\u30d0\u30fc\u3059\u308b\u305f\u3081\u306b\u3001Kotlin\u306f\u3001 \u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (delegated properties) \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nclass Example {\n  var p: String by Delegate()\n}\n\n\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059 val/var <property name>: <Type> by <expression>\nget() \uff08\u3068 set() \uff09\u306f\u305d\u306e getValue() \u304a\u3088\u3073 setValue() \u30e1\u30bd\u30c3\u30c9\u306b\u59d4\u8b72\u3055\u308c\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001 by \u306e\u5f8c\u306b\u7d9a\u304f\u5f0f\u306f\u3001 \u59d4\u8b72 (delegate) \u3067\u3059\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u59d4\u8b72\u306b\u306f\u3001\u4efb\u610f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 getValue() \u95a2\u6570\uff08\u305d\u3057\u3066 setValue() --- var{:.keyword}\u7528\u306b\uff09\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\nclass Delegate {\n  operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n    return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n  }\n\n  operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n    println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n  }\n}\n\nDelegate \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3067\u3042\u308b p \u3092\u8aad\u307f\u8fbc\u3080\u3068\u304d\u3001 Delegate \u306egetValue() \u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u305d\u306e\u6700\u521d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 p \u3092\u8aad\u307f\u53d6\u308b\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u30012\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 p \u81ea\u4f53\u306e\u8aac\u660e\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001\u3042\u306a\u305f\u304c\u305d\u306e\u540d\u524d\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u4f8b\u3048\u3070\uff1a\nval e = Example()\nprintln(e.p)\n\n\u3053\u308c\u306f\u6b21\u306e\u901a\u308a\u51fa\u529b\u3057\u307e\u3059\nExample@33a17727, thank you for delegating \u2018p\u2019 to me!\n\np \u306b\u4ee3\u5165\u3059\u308b\u306e\u3068\u540c\u69d8\u306b\u3001setValue() \u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u6700\u521d\u306e2\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u540c\u3058\u3067\u3042\u308a\u30013\u3064\u76ee\u306f\u3001\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u5024\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\ne.p = \"NEW\"\n\n\u3053\u308c\u306f\u6b21\u306e\u901a\u308a\u51fa\u529b\u3057\u307e\u3059\nNEW has been assigned to \u2018p\u2019 in Example@33a17727.\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u8981\u4ef6\n\u3053\u3053\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u59d4\u8b72\u3059\u308b\u305f\u3081\u306e\u8981\u4ef6\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u30d7\u30ed\u30d1\u30c6\u30a3\uff08\u3059\u306a\u308f\u3061 val{:.keyword}\uff09\u306e\u305f\u3081\u306b\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306f\u3001\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308b getValue \u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30ec\u30b7\u30fc\u30d0 --- \u30d7\u30ed\u30d1\u30c6\u30a3\u6240\u6709\u8005 \u306e\u3082\u306e\u3068\u540c\u3058\u304b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff08\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc --- \u62e1\u5f35\u3055\u308c\u308b\u30bf\u30a4\u30d7\u306e\u5834\u5408\uff09\u3002\n\u30e1\u30bf\u30c7\u30fc\u30bf --- \u578b KProperty <*>\u307e\u305f\u306f\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\uff08\u307e\u305f\u306f\u305d\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\uff09\u3068\u540c\u3058\u578b\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u5909\u66f4\u53ef\u80fd\u306a \u30d7\u30ed\u30d1\u30c6\u30a3 ( var{:.keyword} ) \u306e\u5834\u5408\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306f\u3001\u3055\u3089\u306b\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308a setValue \u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3092 \u8ffd\u52a0\u3067 \u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30ec\u30b7\u30fc\u30d0 --- getValue() \u3068\u540c\u3058\n\u30e1\u30bf\u30c7\u30fc\u30bf --- getValue() \u3068\u540c\u3058\n\u65b0\u3057\u3044\u5024 --- \u30d7\u30ed\u30d1\u30c6\u30a3\u307e\u305f\u306f\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3068\u540c\u3058\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\ngetValue() \u304a\u3088\u3073/\u307e\u305f\u306f setValue() \u95a2\u6570\u306f\u3001\u3044\u305a\u308c\u304b\u306e\u59d4\u8b72\u30af\u30e9\u30b9\u3084\u62e1\u5f35\u6a5f\u80fd\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u59d4\u8b72\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u5f8c\u8005\u304c\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306e\u4e21\u65b9\u3092 operator \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nKotlin\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6709\u7528\u306a\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\u9045\u5ef6 (lazy)\nlazy() \u306f\u30e9\u30e0\u30c0\u3092\u3068\u308a\u3001\u9045\u5ef6\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b Lazy<T> \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002get() \u306e\u6700\u521d\u306e\u547c\u3073\u51fa\u3057\u306f lazy() \u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 \u305d\u308c\u4ee5\u964d\u3001get() \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u5358\u306b\u8a18\u61b6\u3055\u308c\u305f\u7d50\u679c\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u9045\u5ef6\u7279\u6027\u306e\u8a55\u4fa1\u304c \u540c\u671f\u3055\u308c\u307e\u3059 \u3002\u5024\u306f1\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u3058\u5024\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3082\u3057\u521d\u671f\u5316\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u540c\u671f\u304c\u5fc5\u8981\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u3001 \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u6642\u306b\u521d\u671f\u5316\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b LazyThreadSafetyMode.PUBLICATION \u3092 lazy() \u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\u521d\u671f\u5316\u304c\u5e38\u306b\u5358\u4e00\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8d77\u3053\u308b\u3068\u78ba\u4fe1\u3057\u3066\u3044\u308b\u306a\u3089\u3001\u4efb\u610f\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b89\u5168\u6027\u306e\u4fdd\u8a3c\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3057\u306a\u3044 LazyThreadSafetyMode.NONE \u30e2\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb (Observable)\nDelegates.observable() \u306f\u30012\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\u307e\u3059\u3002\u521d\u671f\u5024\u3068\u4fee\u6b63\u306e\u305f\u3081\u306e\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\u30cf\u30f3\u30c9\u30e9\u306f\uff08\u5272\u308a\u5f53\u3066\u304c\u884c\u308f\u308c\u305f \u5f8c \u306b\uff09\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5272\u308a\u5f53\u3066\u308b\u305f\u3073\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u306b\u306f3\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u3001\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3001\u53e4\u3044\u5024\u3001\u305d\u3057\u3066\u65b0\u3057\u3044\u5024\u3067\u3059\uff1a\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"<no name>\") {\n        prop, old, new ->\n        println(\"$old -> $new\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n\n\u3053\u306e\u4f8b\u306e\u51fa\u529b\uff1a\n<no name> -> first\nfirst -> second\n\n\u3082\u3057\u4ee3\u5165\u3092\u508d\u53d7\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057 \u300c\u62d2\u5426\u6a29\u300d\u3092\u767a\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001observable() \u306e\u4ee3\u308f\u308a\u306b vetoable() \u3092\u4f7f\u3044\u307e\u3059\u3002 vetoable \u306b\u6e21\u3055\u308c\u305f\u30cf\u30f3\u30c9\u30e9\u306f\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u5272\u308a\u5f53\u3066\u304c\u884c\u308f\u308c\u308b \u524d \u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\nMap \u4e2d\u306e\u30b9\u30c8\u30a2\u30ea\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (Storing Properties in a Map)\n\u4e00\u822c\u7684\u306a\u4f7f\u7528\u4f8b\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u3001map \u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3092\u8a18\u61b6\u3059\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u306fJSON\u3092\u30d1\u30fc\u30b9\u3057\u305f\u308a\u3001\u4ed6\u306e\u300c\u52d5\u7684\u300d\u306a\u3053\u3068\u3092\u3084\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u983b\u7e41\u306b\u8d77\u3053\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u3001\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3057\u3066 map \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u81ea\u4f53\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001 map \u3092\u53d6\u308a\u307e\u3059\u3002\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\n\n\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u3053\u306e\u30de\u30c3\u30d7\u304b\u3089\uff08\u6587\u5b57\u5217 --- \u3053\u306e\u5834\u5408\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u540d\u524d --- \u306e\u30ad\u30fc\u3092\u4f7f\u3063\u3066\uff09\u5024\u3092\u53d6\u308a\u307e\u3059\uff1a\nprintln(user.name) // \u51fa\u529b\uff1a\"John Doe\"\nprintln(user.age)  // \u51fa\u529b\uff1a25\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528 Map \u306e\u4ee3\u308f\u308a\u306b MutableMap \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3053\u308c\u306f var{:.keyword} \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u3057\u3066\u3082\u52d5\u4f5c\u3057\u307e\u3059\uff1a\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n\n\n\u95a2\u6570\n\n\u95a2\u6570\u306e\u5ba3\u8a00\nKotlin\u306e\u95a2\u6570\u306f fun{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nfun double(x: Int): Int {\n}\n\n\n\u95a2\u6570\u306e\u4f7f\u3044\u65b9\n\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u4f1d\u7d71\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nval result = double(2)\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u30c9\u30c3\u30c8\u8868\u8a18\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nSample().foo() // Sample\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066foo\u3092\u547c\u3076\n\n\n\u4e2d\u7f6e\u8a18\u6cd5\n\u6b21\u306e\u3088\u3046\u306a\u3068\u304d\u3001\u4e2d\u7f6e\u8868\u8a18\u6cd5 (infix notations) \u3092\u4f7f\u7528\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u3067\u3042\u308b\u3068\u304d\n\u5358\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u304d\n\ninfix \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n\n// Int\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\ninfix fun Int.shl(x: Int): Int {\n...\n}\n\n// \u62e1\u5f35\u95a2\u6570\u3092 infix \u30ce\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u547c\u3076\n\n1 shl 2\n\n// \u3053\u308c\u306f\u6b21\u3068\u540c\u3058\n\n1.shl(2)\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30d1\u30b9\u30ab\u30eb\u8a18\u6cd5\u3001\u3059\u306a\u308f\u3061 \u540d\u524d: \u30bf\u30a4\u30d7 \u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ab\u30f3\u30de\u3092\u4f7f\u7528\u3057\u3066\u5206\u96e2\u3055\u308c\u307e\u3059\u3002\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u660e\u793a\u7684\u306b\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nfun powerOf(number: Int, exponent: Int) {\n...\n}\n\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5f15\u6570\n\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u5f15\u6570\u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u3082\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4ed6\u8a00\u8a9e\u306b\u6bd4\u3079\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u6570\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nfun read(b: Array<Byte>, off: Int = 0, len: Int = b.size()) {\n...\n}\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u5024\u3068\u5171\u306b\u8a18\u8ff0\u3057\u305f\u5f8c\u306b = \u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5e38\u306b\u30d9\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u306f\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304b\u3089\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nopen class A {\n    open fun foo(i: Int = 10) { ... }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { ... }  // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\n}\n\n\n\u540d\u524d\u4ed8\u304d\u5f15\u6570\n\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u3001\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u95a2\u6570\u304c\u6ca2\u5c71\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3084\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u5834\u5408\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u6b21\u306e\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\uff1a\nfun reformat(str: String,\n             normalizeCase: Boolean = true,\n             upperCaseFirstLetter: Boolean = true,\n             divideByCamelHumps: Boolean = false,\n             wordSeparator: Char = ' ') {\n...\n}\n\n\u79c1\u305f\u3061\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u3053\u308c\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nreformat(str)\n\n\u3057\u304b\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u7121\u3044\u5834\u5408\u306f\u305d\u308c\u306e\u547c\u3073\u51fa\u3057\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\nreformat(str, true, true, false, '_')\n\n\u540d\u524d\u4ed8\u304d\u5f15\u6570\u3067\u3001\u30b3\u30fc\u30c9\u3092\u306f\u308b\u304b\u306b\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nreformat(str,\n    normalizeCase = true,\n    upperCaseFirstLetter = true,\n    divideByCamelHumps = false,\n    wordSeparator = '_'\n  )\n\n\u3059\u3079\u3066\u306e\u5f15\u6570\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u5834\u5408\uff1a\nreformat(str, wordSeparator = '_')\n\nJava\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306f\u5e38\u306b\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u3092\u4fdd\u5b58\u3057\u306a\u3044\u305f\u3081\u3001Java\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u540d\u524d\u4ed8\u304d\u5f15\u6570\u69cb\u6587\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nUnit \u3092\u8fd4\u3059\u95a2\u6570\n\u95a2\u6570\u304c\u4efb\u610f\u306e\u6709\u7528\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u623b\u308a\u5024\u306e\u578b\u306f Unit \u3067\u3059\u3002 Unit \u306f\u3001\u552f\u4e00\u306e\u5024 ( Unit ) \u3060\u3051\u3092\u6301\u3064\u578b\u3067\u3059\u3002\n\u3053\u306e\u5024\u306f\u3001\u660e\u793a\u7684\u306b return \u3055\u308c\u306a\u304f\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\uff1a\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` \u307e\u305f\u306f `return` \u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\n}\n\nUnit \u306e\u623b\u308a\u578b\u306e\u5ba3\u8a00\u3082\u4efb\u610f\u3067\u3059\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\nfun printHello(name: String?) {\n    ...\n}\n\n\n\u5358\u4e00\u5f0f\u95a2\u6570\n\u95a2\u6570\u306f\u3001\u5358\u4e00\u306e\u5f0f\u3092\u8fd4\u3059\u3068\u4e2d\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u672c\u4f53\u306f = \u8a18\u53f7\u306e\u5f8c\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\uff1a\nfun double(x: Int): Int = x * 2\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6642\u306b\u306f\u3001\u660e\u793a\u7684\u306a\u623b\u308a\u5024\u306e\u578b\u306e\u5ba3\u8a00\u306f\u4efb\u610f\u3067\u3059\uff1a\nfun double(x: Int) = x * 2\n\n\n\u660e\u793a\u7684\u306a\u623b\u308a\u5024\u306e\u578b\nUnit \u3092\u8fd4\u3059\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\u9650\u308a\u3001\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3092\u6301\u3064\u95a2\u6570\u306f\u3001\u305d\u308c\u304c\u4efb\u610f\u3067\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5e38\u306b\u660e\u793a\u7684\u306b\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Kotlin\u306f\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3068\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306f\u672c\u4f53\u5185\u306b\u8907\u96d1\u306a\u5236\u5fa1\u30d5\u30ed\u30fc\u3092\u3082\u3064\u3053\u3068\u304c\u3042\u308a\u3001\u623b\u308a\u5024\u306e\u578b\u304c\u8aad\u307f\u624b\uff08\u6642\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\uff09\u306b\u81ea\u660e\u3067\u306f\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u53ef\u5909\u9577\u5f15\u6570\uff08\u53ef\u5909\u5f15\u6570, Varargs\uff09\n\u95a2\u6570\uff08\u901a\u5e38\u306f\u6700\u5f8c\u306e\u3072\u3068\u3064\uff09\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 vararg \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff1a\nfun <T> asList(vararg ts: T): List<T> {\n  val result = ArrayList<T>()\n  for (t in ts) // ts \u306f\u914d\u5217\n    result.add(t)\n  return result\n}\n\n\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u53ef\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n  val list = asList(1, 2, 3)\n\n\u95a2\u6570\u306e\u4e2d\u3067\u306f\u3001 T \u578b\u306e vararg \u3092\u3064\u3051\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f T \u306e\u914d\u5217\u3068\u3057\u3066\u898b\u3048\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u524d\u8ff0\u4f8b\u3067\u306e ts \u5909\u6570\u306f Array<out T> \u578b\u3092\u6301\u3061\u307e\u3059\u3002\n\u552f\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c vararg \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 vararg \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5909\u6570\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306e\u3072\u3068\u3064\u3067\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u540d\u524d\u4ed8\u304d\u5f15\u6570\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u3001\u307e\u305f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u6570\u578b\u3092\u3082\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u62ec\u5f27\u306e\u5916\u3067\u30e9\u30e0\u30c0\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306b\u304a\u3051\u308b\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \nvararg \u3092\u3082\u3064\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u3001\u4f8b\u3048\u3070 asList(1, 2, 3) \u306e\u3088\u3046\u306b\u3001\u4e00\u3064\u305a\u3064\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u3059\u3067\u306b\u914d\u5217\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u95a2\u6570\u306b\u305d\u306e\u5185\u5bb9\u3092\u6e21\u3057\u305f\u3044\u5834\u5408\u306f\u3001\uff08 * \u3092\u914d\u5217\u540d\u306e\u63a5\u982d\u8f9e\u306b\u3059\u308b\uff09 spread \u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n\n\n\u95a2\u6570\u306e\u30b9\u30b3\u30fc\u30d7\nKotlin\u3067\u306f\u3001\u95a2\u6570\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002Java\u3084C#, Scala\u306a\u3069\u306e\u8a00\u8a9e\u3068\u540c\u3058\u3088\u3046\u306b\u3002\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u306b\u52a0\u3048\u3066\u3001Kotlin\u306e\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u6a5f\u80fd\u3068\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\nKotlin\u306f\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u3001\u3059\u306a\u308f\u3061\u3001\u3042\u308b\u95a2\u6570\u5185\u306e\u5225\u306e\u95a2\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nfun dfs(graph: Graph) {\n  fun dfs(current: Vertex, visited: Set<Vertex>) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v, visited)\n  }\n\n  dfs(graph.vertices[0], HashSet())\n}\n\n\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306f\u3001\u5916\u5074\u306e\u95a2\u6570\uff08\u3059\u306a\u308f\u3061\u30af\u30ed\u30fc\u30b8\u30e3\uff09\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e0a\u8a18\u306e\u5834\u5408\u306b\u306f\u3001 visited \u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nfun dfs(graph: Graph) {\n  val visited = HashSet<Vertex>()\n  fun dfs(current: Vertex) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v)\n  }\n\n  dfs(graph.vertices[0])\n}\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570\n\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u3001\u30af\u30e9\u30b9\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\nclass Sample() {\n  fun foo() { print(\"Foo\") }\n}\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u3001\u30c9\u30c3\u30c8\u8868\u8a18\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\nSample().foo() // Sample\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001 foo \u3092\u547c\u3076\n\n\u30af\u30e9\u30b9\u304a\u3088\u3073\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u30e1\u30f3\u30d0\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30af\u30e9\u30b9\u3068\u7d99\u627f \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\n\u95a2\u6570\u306f\u3001\u95a2\u6570\u540d\u306e\u524d\u306b\u5c71\u62ec\u5f27\uff08\u8a33\u6ce8\uff1a\uff1c\uff1e\u306e\u3053\u3068\u3067\u3059\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306f\u3001 \u3053\u3053 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u62e1\u5f35\u95a2\u6570\n\u62e1\u5f35\u6a5f\u80fd\u306f\u3001 \u62e1\u5f35\u95a2\u6570 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\n\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\u306f\u3001 \u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0 \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u672b\u5c3e\u518d\u5e30\u95a2\u6570\nKotlin\u306f\u672b\u5c3e\u518d\u5e30\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u901a\u5e38\u30eb\u30fc\u30d7\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304b\u308c\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4ee3\u308f\u308a\u306b\u518d\u5e30\u3067\u3001\u3057\u304b\u3057\u3001\u666e\u901a\u306e\u518d\u5e30\u3068\u9055\u3063\u3066\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u30ea\u30b9\u30af\u304c\u306a\u3044\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3067\u3059\u3002\u3042\u308b\u95a2\u6570\u304c tailrec \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3055\u308c\u3001\u5fc5\u8981\u306a\u5f62\u5f0f\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u9ad8\u901f\u304b\u3064\u52b9\u7387\u7684\u306a\u30eb\u30fc\u30d7\u30d9\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6b8b\u3057\u3066\u3001\u518d\u5e30\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002\ntailrec fun findFixPoint(x: Double = 1.0): Double\n        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u6570\u5b66\u5b9a\u6570\u3067\u3042\u308b\u30b3\u30b5\u30a4\u30f3\u306e\u4e0d\u52d5\u70b9\uff08\u56fa\u5b9a\u70b9, fixpoint\uff09\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\u305d\u308c\u306f Math.cos \u3092 1.0 \u304b\u3089\u59cb\u3081\u3066\u7d50\u679c\u306b0.7390851332151607\u306e\u7d50\u679c\u3092\u5f97\u3001\u305d\u308c\u4ee5\u4e0a\u5909\u5316\u3057\u306a\u304f\u306a\u308b\u307e\u3067\u5358\u306b\u7e70\u308a\u8fd4\u3057\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u306e\u3088\u308a\u4f1d\u7d71\u7684\u306a\u30b9\u30bf\u30a4\u30eb\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (x == y) return y\n        x = y\n    }\n}\n\ntailrec \u4fee\u98fe\u5b50\u306e\u5bfe\u8c61\u3068\u306a\u308b\u305f\u3081\u306b\u306f\u3001\u95a2\u6570\u306f\u5b9f\u884c\u3059\u308b\u6700\u5f8c\u306e\u64cd\u4f5c\u3068\u3057\u3066\u81ea\u8eab\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u518d\u5e30\u547c\u3073\u51fa\u3057\u306e\u5f8c\u306b\u591a\u304f\u306e\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u672b\u5c3e\u518d\u5e30\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 try / catch / finally \u30d6\u30ed\u30c3\u30af\u5185\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u305b\u3093\u3002\u73fe\u5728\u3001\u672b\u5c3e\u518d\u5e30\u306fJVM\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\n\n\u9ad8\u968e\u95a2\u6570\n\u9ad8\u968e\u95a2\u6570\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u95a2\u6570\u3092\u53d6\u308b\u304b\u3001\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306e\u826f\u3044\u4f8b\u304c lock() \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306f lock \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001 lock \u3092\u304b\u3051\u3001\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066 lock \u3092\u89e3\u653e\u3057\u307e\u3059\u3002\nfun <T> lock(lock: Lock, body: () -> T): T {\n  lock.lock()\n  try {\n    return body()\n  }\n  finally {\n    lock.unlock()\n  }\n}\n\n\u305d\u308c\u3067\u306f\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 body \u306f\u95a2\u6570\u578b: () -> T \u3092\u6301\u3061\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3089\u305a\u3001\u578b T \u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 body \u306f lock \u306b\u3088\u3063\u3066\u4fdd\u8b77\u3055\u308c\u306a\u304c\u3089\u3001 try{: .keyword } \u30d6\u30ed\u30c3\u30af\u5185\u3067\u547c\u3073\u51fa\u3055\u308c\u3001\u305d\u306e\u7d50\u679c\u306f lock() \u95a2\u6570\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u307e\u3059\u3002\nlock() \u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u95a2\u6570\u306e\u53c2\u7167\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\uff1a\nfun toBeSynchronized() = sharedResource.operation()\n\nval result = lock(lock, ::toBeSynchronized)\n\n\u5225\u624b\u6bb5\u3068\u3057\u3066\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u3088\u308a\u4fbf\u5229\u306a\u65b9\u6cd5\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u3059\u3053\u3068\u3067\u3059\uff1a\nval result = lock(lock, { sharedResource.operation() })\n\n\u30e9\u30e0\u30c0\u5f0f\u306f\u4ee5\u4e0b\u3067\u3088\u308a\u8a73\u7d30\u306b\u8aac\u660e\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u7d99\u7d9a\u3057\u305f\u3044\u306e\u3067\u3001\u4eca\u306f\u7c21\u5358\u306a\u6982\u8981\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a\n\n\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u5e38\u306b\u4e2d\u62ec\u5f27\u3067\u56f2\u307e\u308c\u3066\u3044\u307e\u3059\n\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\uff08\u3082\u3057\u3042\u308c\u3070\uff09 -> \u306e\u524d\u3067\u5ba3\u8a00\u3055\u308c\u307e\u3059\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u3092\u7701\u7565\u3057\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\uff09\n\u672c\u4f53\u304c -> \u306b\u7d9a\u304d\u307e\u3059\uff08\u5b58\u5728\u3059\u308b\u5834\u5408\uff09\n\nKotlin\u3067\u306f\u3001\u95a2\u6570\u306e\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u62ec\u5f27\u306e\u5916\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u6163\u7fd2\u304c\u3042\u308a\u307e\u3059\uff1a\nlock (lock) {\n  sharedResource.operation()\n}\n\n\u5225\u306e\u4f8b\u3067\u9ad8\u968e\u95a2\u6570\u304c map() \u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\nfun <T, R> List<T>.map(transform: (T) -> R): List<R> {\n  val result = arrayListOf<R>()\n  for (item in this)\n    result.add(transform(item))\n  return result\n}\n\n\u3053\u306e\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nval doubled = ints.map { it -> it * 2 }\n\n\u30e9\u30e0\u30c0\u304c\u305d\u306e\u547c\u3073\u51fa\u3057\u306b\u552f\u4e00\u306e\u5f15\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u547c\u3073\u51fa\u3057\u306e\u62ec\u5f27\u3092\u5b8c\u5168\u306b\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nit : \u5358\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6697\u9ed9\u306e\u540d\u524d\n\u3082\u3046\u4e00\u3064\u306e\u6709\u7528\u306a\u6163\u7fd2\u306f\u3001\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u30921\u3064\u3060\u3051\u6301\u3064\u5834\u5408\u3001\u305d\u306e\u5ba3\u8a00\u3092\uff08 -> \u3068\u4e00\u7dd2\u306b\uff09\u7701\u7565\u3057\u3066\u3082\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u305d\u306e\u540d\u524d\u306f\u3001 it \u306b\u306a\u308a\u307e\u3059\u3002\nints.map { it * 2 }\n\n\u3053\u308c\u3089\u306e\u6163\u7fd2\u306b\u3088\u308a\u3001 LINQ\u30b9\u30bf\u30a4\u30eb \u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nstrings.filter { it.length == 5 }.sortBy { it }.map { it.toUpperCase() }\n\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306e\u4f7f\u7528\u306f\u9ad8\u968e\u95a2\u6570\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u306b\u6709\u52b9\u3067\u3059\u3002\n\n\u30e9\u30e0\u30c0\u5f0f\u3068\u7121\u540d\u95a2\u6570\n\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u95a2\u6570\u306f\u300c\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u300d\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u305d\u306e\u95a2\u6570\u306f\u5ba3\u8a00\u3055\u308c\u305f\u306e\u3067\u306f\u306a\u304f\u3001\u8868\u73fe\u3068\u3057\u3066\u3059\u3050\u306b\u6e21\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u6b21\u306e\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3059\uff1a\nmax(strings, { a, b -> a.length < b.length })\n\n\u95a2\u6570 max \u306f\u9ad8\u968e\u95a2\u6570\u3067\u3059\u3002\u3059\u306a\u308f\u30612\u756a\u76ee\u306e\u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u5024\u3092\u3068\u308a\u307e\u3059\u3002\u3053\u306e2\u756a\u76ee\u306e\u5f15\u6570\u306f\u305d\u308c\u81ea\u4f53\u304c\u95a2\u6570\u3067\u3042\u308b\u5f0f\u3001\u3059\u306a\u308f\u3061\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3067\u3059\u3002\u95a2\u6570\u3068\u3057\u3066\u306f\u3001\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\nfun compare(a: String, b: String): Boolean = a.length < b.length\n\n\n\u95a2\u6570\u578b\n\u95a2\u6570\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u95a2\u6570\u578b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306b\u524d\u8ff0\u306e\u95a2\u6570 max \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff1a\nfun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {\n  var max: T? = null\n  for (it in collection)\n    if (max == null || less(max, it))\n      max = it\n  return max\n}\n\n\u30d1\u30e9\u30e1\u30fc\u30bf less \u306f (T, T) -> Boolean \u578b\u3001\u3059\u306a\u308f\u30612\u3064\u306e T \u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3068\u308a\u3001\u524d\u8005\u304c\u5f8c\u8005\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070 Boolean : true \u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\u672c\u4f53\u306e4\u884c\u76ee\u3067\u306f\u3001 less \u306f\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u578b T \u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u305d\u306e\u95a2\u6570\u306f\u547c\u3073\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\u95a2\u6570\u578b\u306f\u524d\u8ff0\u306e\u901a\u308a\u3001\u307e\u305f\u306f\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u610f\u5473\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3059\u308b\u5834\u5408\u306f\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nval compare: (x: T, y: T) -> Int = ...\n\n\n\u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\n\u30e9\u30e0\u30c0\u5f0f\u3001\u3064\u307e\u308a\u95a2\u6570\u578b\u30ea\u30c6\u30e9\u30eb\u306e\u5b8c\u5168\u306a\u69cb\u6587\u5f62\u5f0f\u306f\u3001\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\nval sum = { x: Int, y: Int -> x + y }\n\n\u30e9\u30e0\u30c0\u5f0f\u306f\u5e38\u306b\u4e2d\u62ec\u5f27\u3067\u56f2\u307e\u308c\u3001\u5b8c\u5168\u306a\u69cb\u6587\u5f62\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00\u306f\u30ab\u30c3\u30b3\u5185\u306b\u3042\u308a\u3001\u578b\u6ce8\u91c8\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u3001\u672c\u4f53\u306f -> \u8a18\u53f7\u306e\u5f8c\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002\u5fc5\u9808\u3067\u306f\u306a\u3044\u6ce8\u91c8\u3092\u3059\u3079\u3066\u7701\u7565\u3057\u305f\u5834\u5408\u3001\u6b8b\u3063\u3066\u3044\u308b\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\nval sum: (Int, Int) -> Int = { x, y -> x + y }\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u30921\u3064\u3060\u3051\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3088\u304f\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u3082\u3057Kotlin\u304c\u7f72\u540d\u81ea\u4f53\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001\u552f\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6697\u9ed9\u306e\u3046\u3061\u306b\u305d\u308c\u3092 it \u3068\u3044\u3046\u540d\u3067\u5ba3\u8a00\u3057\u307e\u3059\u3002\nints.filter { it > 0 } // \u3053\u306e\u30ea\u30c6\u30e9\u30eb\u306f '(it: Int) -> Boolean' \u578b\n\n\u95a2\u6570\u304c\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u53d6\u308b\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u306f\u62ec\u5f27\u3067\u56f2\u307e\u308c\u305f\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u5916\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002callSuffix\u306e\u305f\u3081\u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7121\u540d\u95a2\u6570\n\u4e0a\u8a18\u306e\u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u304b\u3089\u4e00\u3064\u6b20\u843d\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306f\u3001\u623b\u308a\u578b\u3092\u81ea\u52d5\u7684\u306b\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u4e0d\u8981\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u5225\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7121\u540d\u95a2\u6570\u3067\u3059\u3002\nfun(x: Int, y: Int): Int = x + y\n\n\u7121\u540d\u95a2\u6570\u306f\u3001\u305d\u306e\u540d\u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u3001\u901a\u5e38\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u3068\u975e\u5e38\u306e\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u672c\u4f53\u306f\u3001\u5f0f\uff08\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff09\u3001\u307e\u305f\u306f\u30d6\u30ed\u30c3\u30af\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\uff1a\nfun(x: Int, y: Int): Int {\n  return x + y\n}\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u304a\u3088\u3073\u623b\u308a\u578b\u306f\u3001\u305d\u308c\u3089\u304c\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3092\u9664\u304d\u3001\u901a\u5e38\u306e\u95a2\u6570\u3068\u540c\u3058\u65b9\u6cd5\u3067\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\nints.filter(fun(item) = item > 0)\n\n\u7121\u540d\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6\u306f\u666e\u901a\u306e\u95a2\u6570\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\uff1a\u623b\u308a\u5024\u306e\u578b\u306f\u5f0f\u672c\u4f53\u3068\u7121\u540d\u95a2\u6570\u306e\u305f\u3081\u306b\u81ea\u52d5\u7684\u306b\u63a8\u8ad6\u3055\u308c\u3001\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3067\u7121\u540d\u95a2\u6570\u306e\u305f\u3081\u306b\u660e\u793a\u7684\u306b\u6307\u5b9a\u3055\u308c\uff08\u307e\u305f\u306f Unit \u3068\u3055\u308c\uff09\u307e\u3059\u3002\n\u7121\u540d\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u5e38\u306b\u304b\u3063\u3053\u5185\u306b\u6e21\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u62ec\u5f27\u306e\u5916\u306e\u95a2\u6570\u3092\u6b8b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u901f\u8a18\u69cb\u6587\u306f\u30e9\u30e0\u30c0\u5f0f\u306b\u5bfe\u3057\u3066\u306e\u307f\u6a5f\u80fd\u3057\u307e\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3068\u7121\u540d\u95a2\u6570\u306e\u9593\u306e\u3082\u3046\u4e00\u3064\u306e\u9055\u3044\u306f\u3001\u975e\u5c40\u6240\u7684\u306a\u30ea\u30bf\u30fc\u30f3\u306e\u52d5\u4f5c\u3067\u3059\u3002\u30e9\u30d9\u30eb\u306a\u3057\u306e return{: .keyword } \u6587\u306f\u3001\u5e38\u306b fun{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u304b\u3089\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u5185\u5074\u304b\u3089\u306e return{: .keyword } \u306f\u56f2\u3093\u3067\u3044\u308b\u95a2\u6570\u304b\u3089\u8fd4\u3055\u308c\u308b\u4e00\u65b9\u3067\u3001\u7121\u540d\u95a2\u6570\u306e\u5185\u90e8 return{: .keyword } \u306f\u7121\u540d\u95a2\u6570\u81ea\u4f53\u304b\u3089\u8fd4\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n\u30af\u30ed\u30fc\u30b8\u30e3\n\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u95a2\u6570\uff08\u306a\u3089\u3073\u306b\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\uff09\u306f\u3001\u305d\u306e \u30af\u30ed\u30fc\u30b8\u30e3 \u3001\u3059\u306a\u308f\u3061\u3001\u5916\u5074\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Java\u3068\u306f\u7570\u306a\u308a\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u53d6\u308a\u8fbc\u307e\u308c\u305f\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nvar sum = 0\nints.filter { it > 0 }.forEach {\n  sum += it\n}\nprint(sum)\n\n\n\u30ec\u30b7\u30fc\u30d0\u4ed8\u304d\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\nKotlin\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f \u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3068\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u547c\u3073\u51fa\u3059\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30ea\u30c6\u30e9\u30eb\u95a2\u6570\u306e\u672c\u4f53\u5185\u3067\u306f\u3001\u4efb\u610f\u306e\u8ffd\u52a0\u306e\u4fee\u98fe\u5b50\u306a\u3057\u3067\u305d\u306e\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u306e\u672c\u4f53\u5185\u306b\u3042\u308b\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u62e1\u5f35\u6a5f\u80fd\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u4f7f\u7528\u6cd5\u306e\u6700\u3082\u91cd\u8981\u306a\u4f8b\u306e\u4e00\u3064\u306f\u3001\u578b\u5b89\u5168\u306eGroovy\u30b9\u30bf\u30a4\u30eb\u306e\u30d3\u30eb\u30c0\u30fc\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u306e\u578b\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u3092\u6301\u3064\u95a2\u6570\u578b\u3067\u3059\uff1a\nsum : Int.(other: Int) -> Int\n\n\u305d\u308c\u306f\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306b\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n1.sum(2)\n\n\u7121\u540d\u95a2\u6570\u306e\u69cb\u6587\u306f\u3001\u76f4\u63a5\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u306e\u30ec\u30b7\u30fc\u30d0\u306e\u7a2e\u985e\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ec\u30b7\u30fc\u30d0\u3092\u6301\u3064\u95a2\u6570\u578b\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u3001\u5f8c\u3067\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\nval sum = fun Int.(other: Int): Int = this + other\n\n\u30ec\u30b7\u30fc\u30d0\u578b\u306f\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3001\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass HTML {\n    fun body() { ... }\n}\n\nfun html(init: HTML.() -> Unit): HTML {\n  val html = HTML()  // \u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n  html.init()        // \u305d\u306e\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30e9\u30e0\u30c0\u306b\u6e21\u3059\n  return html\n}\n\n\nhtml {       // \u30ec\u30b7\u30fc\u30d0\u4ed8\u304d\u30e9\u30e0\u30c0\u304c\u3053\u3053\u304b\u3089\u59cb\u307e\u308b\n    body()   // \u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u308b\n}\n\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u7279\u5b9a\u306e\u30e9\u30f3\u30bf\u30a4\u30e0\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u8ab2\u305b\u3089\u308c\u307e\u3059\u3002\u5404\u95a2\u6570\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u305d\u308c\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3001\u3059\u306a\u308f\u3061\u3001\u95a2\u6570\u306e\u672c\u4f53\u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u305d\u308c\u3089\u306e\u5909\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u307e\u3059\u3002\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\uff08\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30af\u30e9\u30b9\u7528\u306e\u4e21\u65b9\uff09\u3068\u4eee\u60f3\u547c\u3073\u51fa\u3057\u306f\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u62db\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u3053\u306e\u7a2e\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u89e3\u6d88\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u793a\u3059\u95a2\u6570\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306e\u826f\u3044\u4f8b\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001lock() \u95a2\u6570\u306f\u3001\u7c21\u5358\u306b\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306e\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\nlock(l) { foo() }\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3084\u30b3\u30fc\u30eb\u306e\u751f\u6210\u306e\u305f\u3081\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u653e\u51fa\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff1a\nl.lock()\ntry {\n  foo()\n}\nfinally {\n  l.unlock()\n}\n\n\u305d\u308c\u306f\u6211\u3005\u304c\u5f53\u521d\u304b\u3089\u6b32\u3057\u304b\u3063\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u304b\uff1f\n\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3053\u308c\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001 inline \u4fee\u98fe\u5b50\u3067 lock() \u95a2\u6570\u3092\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\ninline fun lock<T>(lock: Lock, body: () -> T): T {\n  // ...\n}\n\ninline \u4fee\u98fe\u5b50\u306f\u3001\u95a2\u6570\u81ea\u4f53\u3084\u305d\u308c\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u306e\u4e21\u65b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u3059\u3079\u3066\u306f\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306e\u4e2d\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\n\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3067\u306f\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u304c\u5927\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5408\u7406\u7684\u306a\u65b9\u6cd5\u3067\uff08\u5927\u304d\u306a\u95a2\u6570\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3057\u306a\u3044\u3067\uff09\u5b9f\u884c\u3059\u308b\u3068\u3001\u7279\u306b\u30eb\u30fc\u30d7\u5185\u306e \u300c\u30e1\u30ac\u30e2\u30fc\u30d5\u30a3\u30c3\u30af (megamorphic)\u300d\u306a\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\n\nnoinline\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u304b\u3060\u3051\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u3044\u304f\u3064\u304b\u306b noinline \u4fee\u98fe\u5b50\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {\n  // ...\n}\n\nInlinable\u30e9\u30e0\u30c0\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u5185\u3067\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u53ef\u80fd\u306a\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001 noinline \u306f\u3001\u597d\u304d\u306a\u3088\u3046\u306b\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4fdd\u6301\u3057\u305f\u308a\u3001\u8ab0\u304b\u306b\u6e21\u3057\u305f\u308a\u7b49\u3002\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u30a4\u30f3\u30e9\u30a4\u30ca\u30d6\u30eb\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u3001\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u8b66\u544a\u3092\u767a\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u306f\u6709\u76ca\u3067\u306f\u306a\u3044\u305f\u3081\u3067\u3059\uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u8b66\u544a\u3092\u6291\u5236\u3067\u304d\u307e\u3059\uff09\u3002\n\n\u975e\u5c40\u6240\u30ea\u30bf\u30fc\u30f3\nKotlin\u3067\u306f\u3001\u540d\u524d\u4ed8\u304d\u95a2\u6570\u307e\u305f\u306f\u7121\u540d\u95a2\u6570\u3092\u7d42\u4e86\u3059\u308b\u306b\u306f\u3001\u901a\u5e38\u3001\u30e9\u30d9\u30eb\u7121\u3057 return \u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e9\u30e0\u30c0\u3092\u7d42\u4e86\u3059\u308b\u306b\u306f\u30e9\u30d9\u30eb\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30e9\u30e0\u30c0\u304c\u81ea\u8eab\u3092\u5185\u5305\u3059\u308b\u95a2\u6570\u304b\u3089\u306e return \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30e9\u30e0\u30c0\u5185\u3067\u306e\u88f8\u306e\u30ea\u30bf\u30fc\u30f3\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\nfun foo() {\n  ordinaryFunction {\n     return // \u30a8\u30e9\u30fc: `foo` \u3092\u3053\u3053\u3067 return \u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\n  }\n}\n\n\u3057\u304b\u3057\u3001\u30e9\u30e0\u30c0\u304c\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u308b\u305f\u3081\u306b\u6e21\u3055\u308c\u305f\u95a2\u6570\u306e\u5834\u5408\u306f\u3001\u30ea\u30bf\u30fc\u30f3\u3082\u540c\u69d8\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nfun foo() {\n  inlineFunction {\n    return // OK: \u30e9\u30e0\u30c0\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\n  }\n}\n\n\uff08\u30e9\u30e0\u30c0\u306b\u4f4d\u7f6e\u3059\u308b\u304c\u3001\u5185\u5305\u3059\u308b\u95a2\u6570\u304b\u3089\u629c\u3051\u308b\uff09\u3053\u306e\u3088\u3046\u306a\u30ea\u30bf\u30fc\u30f3\u306f\u3001 \u975e\u5c40\u6240\u30ea\u30bf\u30fc\u30f3 \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\u79c1\u305f\u3061\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c\u3057\u3070\u3057\u3070\u5185\u5305\u3059\u308b\u3053\u306e\u3088\u3046\u306a\u30eb\u30fc\u30d7\u306e\u69cb\u9020\u306b\u6163\u308c\u3066\u3044\u307e\u3059\u3002\nfun hasZeros(ints: List<Int>): Boolean {\n  ints.forEach {\n    if (it == 0) return true // hasZeros \u304b\u3089 return \u3059\u308b\n  }\n  return false\n}\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306e\u4e2d\u306b\u306f\u3001\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3092\u3001\u95a2\u6570\u672c\u4f53\u304b\u3089\u76f4\u63a5\u3067\u306f\u306a\u304f\u3001\u30ed\u30fc\u30ab\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30cd\u30b9\u30c8\u3055\u308c\u305f\u95a2\u6570\u306a\u3069\u306e\u5225\u306e\u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u547c\u3073\u51fa\u3059\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001\u975e\u5c40\u6240\u5236\u5fa1\u30d5\u30ed\u30fc\u3082\u30e9\u30e0\u30c0\u3067\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u308c\u3092\u793a\u3059\u305f\u3081\u306b\u3001\u30e9\u30e0\u30c0\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 crossinline \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n\nbreak \u3068 continue \u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3067\u306f\u307e\u3060\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u6211\u3005\u306f\u305d\u308c\u3089\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3092\u8a08\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf (Reified type parameters)\n\u6642\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3055\u308c\u305f\u578b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p?.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T\n}\n\n\u3053\u3053\u3067\u306f\u3001\u30c4\u30ea\u30fc\u3092\u305f\u3069\u3063\u3066\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ce\u30fc\u30c9\u306b\u7279\u5b9a\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5168\u304f\u554f\u984c\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u305d\u308c\u307b\u3069\u7f8e\u5473\u3057\u304f\u306a\u308a\u307e\u305b\u3093\uff1a\nmyTree.findParentOfType(MyTreeNodeType::class.java)\n\n\u79c1\u305f\u3061\u304c\u5b9f\u969b\u306b\u3057\u305f\u3044\u306e\u306f\u3053\u306e\u95a2\u6570\u306b\u578b\u3092\u6e21\u3059\u3060\u3051\u3001\u3059\u306a\u308f\u3061\u3001\u3053\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\uff1a\nmyTree.findParentOfType<MyTreeNodeType>()\n\n\u3053\u308c\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c \u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306e\u3067\u3001\u79c1\u305f\u3061\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p?.parent\n    }\n    return p as T\n}\n\n\u79c1\u305f\u3061\u306f reified \u4fee\u98fe\u5b50\u3067\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fee\u98fe\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3067\u3001\u95a2\u6570\u5185\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u3001\u3053\u308c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u3058\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059\u3002\u95a2\u6570\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 !is \u3084 as \u306e\u3088\u3046\u306a\u901a\u5e38\u306e\u6f14\u7b97\u5b50\u304c\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u524d\u8ff0\u3057\u305f\u3088\u3046\u306a\u3084\u308a\u304b\u305f\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1amyTree.findParentOfType<MyTreeNodeType>()\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u591a\u304f\u306e\u5834\u5408\u306b\u5fc5\u8981\u3068\u3055\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n  println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n\n\u901a\u5e38\u306e\u6a5f\u80fd\uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u306a\u3044\uff09\u306f\u5177\u4f53\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u5b9f\u884c\u6642\u8868\u73fe\u3092\u6301\u305f\u306a\u3044\u578b\uff08\u4f8b\u3048\u3070\u3001\u975ereified\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3084 Nothing \u306e\u3088\u3046\u306a\u67b6\u7a7a\u306e\u578b\uff09\u306f\u3001reified \u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5f15\u6570\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\n\u4f4e\u30ec\u30d9\u30eb\u306e\u8aac\u660e\u306b\u3064\u3044\u3066\u306f\u3001\u4ed5\u69d8\u66f8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u203b\u6a29\u5229\u95a2\u4fc2\u306b\u3064\u3044\u3066\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u3092\u4f5c\u3063\u305fJetBrain\u793e\u306fContributing to Kotlin\u3067\u3001\u300c\u3042\u306a\u305f\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3001Web\u30b5\u30a4\u30c8\u4e0a\u3067\u95b2\u89a7\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068\u3092\u6b53\u8fce\u3059\u308b\u3002\u300d ( You are welcome to translate the Kotlin documentation into your own language and to publish your translation on your Web site. ) \u3068\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306fgithub\u4e0a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u793a\u304cApache License ver. 2.0\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092Apache License ver. 2.0\u3068\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f [\u7b2c2\u306e\u30c9\u30ef\u30f3\u30b4 Advent Calendar 2016](http://qiita.com/advent-calendar/2016/dwango2) \u306e19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u30c9\u30ef\u30f3\u30b4\u65b0\u53522\u5e74\u76ee\u306edogwood008\u3068\u7533\u3057\u307e\u3059\u3002\u4ee5\u524d\u9014\u4e2d\u307e\u3067\u7ffb\u8a33\u3057\u305f\uff08[Kotlin\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u305f[\u524d\u7de8]](http://qiita.com/dogwood008/items/6e8d3225ea9bb0fe3099)\uff09\u306e\u3067\u3059\u304c\u3001\"Other\" \u3084\u305d\u306e\u4ed6\u30e1\u30a4\u30f3\u3067\u306a\u3044\u90e8\u5206\u3092\u9664\u3044\u305f\u6b8b\u308a\u3092\u7d9a\u304d\u3068\u3057\u3066\u7ffb\u8a33\u3057\u307e\u3057\u305f\u3002\n\n[\u65e5\u672c\u8a9e\u7248Kotlin\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://dogwood008.github.io/kotlin-web-site-ja/docs/reference/)\n\n\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u3068\u3001\u672c\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306f\u540c\u3058\u3067\u3059\u3002\u500b\u5225\u306e\u30da\u30fc\u30b8\u3067\u898b\u305f\u3044\u4eba\u7528\u3068\u3001\u4e00\u89a7\u3067\u898b\u305f\u3044\u4eba\u7528\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u4e0a\u8a18\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u306f\u3001\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u3042\u3066\u308b\u3068\u539f\u6587\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u7ffb\u8a33\u306b\u8aa4\u308a\u304c\u3042\u308c\u3070\u304a\u6559\u3048\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff08PR\u3044\u305f\u3060\u3051\u308b\u3068\u3082\u3063\u3068\u3046\u308c\u3057\u3044\u3067\u3059\uff09\u3002\n\n\u3061\u306a\u307f\u306b\u3001[\u524d\u7de8\u3067\u7ffb\u8a33\u3057\u305f](http://qiita.com/dogwood008/items/6e8d3225ea9bb0fe3099)\u3068\u304d\u306e\u6587\u7ae0\u306f\u3001\u5168\u3066\u66f8\u304d\u76f4\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n---\n\n# \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n\n<!--original\n# Data Classes\n-->\n\n\u4f55\u3082\u3057\u306a\u3044\u3001\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3060\u3051\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3067\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u6a5f\u80fd\u306f\u3001\u30c7\u30fc\u30bf\u304b\u3089\u6a5f\u68b0\u7684\u306b\u63a8\u8ad6\u3067\u304d\u307e\u3059\u3002Kotlin\u3067\u306f\u3001\u3053\u308c\u306f _\u30c7\u30fc\u30bf\u30af\u30e9\u30b9_ \u3068\u547c\u3070\u308c\u3001 `data` \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nWe frequently create a class to do nothing but hold data. In such a class some standard functionality is often mechanically\nderivable from the data. In Kotlin, this is called a _data class_ and is marked as `data`:\n-->\n \n``` kotlin\ndata class User(val name: String, val age: Int)\n```\n\n<!--original\n``` kotlin\ndata class User(val name: String, val age: Int)\n```\n-->\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u81ea\u52d5\u7684\u306b\u6b21\u306e\u30e1\u30f3\u30d0\u3092\u63a8\u8ad6\u3057\u307e\u3059\uff1a\n\n<!--original\nThe compiler automatically derives the following members from all properties declared in the primary constructor:\n-->\n  \n  * `equals()` / `hashCode()` \u306e\u30da\u30a2\u3001\n  * `\"User(name=John, age=42)\"` \u5f62\u5f0f\u306e `toString()` \u3001\n  * \u5ba3\u8a00\u3057\u305f\u9806\u756a\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b [`componentN()` \u95a2\u6570](multi-declarations.html)\u3001\n  * `copy()` \u95a2\u6570\uff08\u4e0b\u8a18\u53c2\u7167\uff09\u3002\n\n<!--original\n  * `equals()`/`hashCode()` pair, \n  * `toString()` of the form `\"User(name=John, age=42)\"`,\n  * [`componentN()` functions](multi-declarations.html) corresponding to the properties in their order of declaration,\n  * `copy()` function (see below).\n-->\n  \n\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u30af\u30e9\u30b9\u672c\u4f53\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u57fa\u672c\u578b\u304b\u3089\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002\n\n<!--original\nIf any of these functions is explicitly defined in the class body or inherited from the base types, it will not be generated.\n-->\n\n\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u8cab\u6027\u3068\u610f\u5473\u306e\u3042\u308b\u52d5\u4f5c\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001\u6b21\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff1a\n\n<!--original\nTo ensure consistency and meaningful behavior of the generated code, data classes have to fulfil the following requirements:\n-->\n\n  * \u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n  * \u3059\u3079\u3066\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 `val` \u307e\u305f\u306f `var` \u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n  * \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001 abstract, open, sealed \u307e\u305f\u306f inner \u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n  * \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff08\u305f\u3060\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\uff09\u3002\n\n<!--original\n  * The primary constructor needs to have at least one parameter;\n  * All primary constructor parameters need to be marked as `val` or `var`;\n  * Data classes cannot be abstract, open, sealed or inner;\n  * Data classes may not extend other classes (but may implement interfaces).\n-->\n  \n> JVM\u4e0a\u3067\u3001\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08[\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf](classes.html#constructors)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n>\n> ``` kotlin\n> data class User(val name: String = \"\", val age: Int = 0)\n> ```\n\n<!--original\n> On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified\n> (see [Constructors](classes.html#constructors)).\n>\n> ``` kotlin\n> data class User(val name: String = \"\", val age: Int = 0)\n> ```\n-->\n\n## \u30b3\u30d4\u30fc\n\n<!--original\n## Copying\n-->\n  \n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e _\u3044\u304f\u3064\u304b_ \u3092\u5909\u66f4\u3057\u3001\u6b8b\u308a\u3092\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3088\u304f\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c `copy()` \u95a2\u6570\u304c\u4f5c\u6210\u3055\u308c\u308b\u7406\u7531\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306a `User` \u30af\u30e9\u30b9\u306e\u5834\u5408\u3001\u305d\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nIt's often the case that we need to copy an object altering _some_ of its properties, but keeping the rest unchanged. \nThis is what `copy()` function is generated for. For the `User` class above, its implementation would be as follows:\n-->\n\n``` kotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)     \n```     \n\n<!--original\n``` kotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)     \n```     \n-->\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThis allows us to write\n-->\n\n``` kotlin\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n```\n\n<!--original\n``` kotlin\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = jack.copy(age = 2)\n```\n-->\n\n## \u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3068\u5206\u89e3\u5ba3\u8a00 (Destructuring Declarations)\n\n<!--original\n## Data Classes and Destructuring Declarations\n-->\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u305f\u3081\u306b\u751f\u6210\u3057\u305f _\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u95a2\u6570_ \u306f\u3001[\u5206\u89e3\u5ba3\u8a00](multi-declarations.html)\u5185\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n<!--original\n_Component functions_ generated for data classes enable their use in [destructuring declarations](multi-declarations.html):\n-->\n\n``` kotlin\nval jane = User(\"Jane\", 35) \nval (name, age) = jane\nprintln(\"$name, $age years of age\") // \"Jane, 35 years of age\" \u3092\u51fa\u529b\u3059\u308b\n```\n\n<!--original\n``` kotlin\nval jane = User(\"Jane\", 35) \nval (name, age) = jane\nprintln(\"$name, $age years of age\") // prints \"Jane, 35 years of age\"\n```\n-->\n\n## \u6a19\u6e96\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n\n<!--original\n## Standard Data Classes\n-->\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001 `Pair` \u3068 `Triple` \u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u305f\u3081\u306b\u610f\u5473\u306e\u3042\u308b\u540d\u524d\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001\u3068\u3044\u3046\u306e\u304c\u7406\u7531\u3067\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u540d\u524d\u4ed8\u304d\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306f\u3001\u8a2d\u8a08\u4e0a\u306e\u3088\u308a\u826f\u3044\u9078\u629e\u3067\u3059\u304c\u3002\n\n<!--original\nThe standard library provides `Pair` and `Triple`. In most cases, though, named data classes are a better design choice, \nbecause they make the code more readable by providing meaningful names for properties.\n-->\n\n# \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\n\n<!--original\n# Generics\n-->\n\nJava\u3068\u540c\u3058\u3088\u3046\u306b\u3001Kotlin\u306e\u30af\u30e9\u30b9\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nAs in Java, classes in Kotlin may have type parameters:\n-->\n\n``` kotlin\nclass Box<T>(t: T) {\n  var value = t\n}\n```\n\n<!--original\n``` kotlin\nclass Box<T>(t: T) {\n  var value = t\n}\n```\n-->\n\n\u4e00\u822c\u7684\u306b\u3001\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u6211\u3005\u306f\u3001\u578b\u5f15\u6570\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nIn general, to create an instance of such a class, we need to provide the type arguments:\n-->\n\n``` kotlin\nval box: Box<Int> = Box<Int>(1)\n```\n\n<!--original\n``` kotlin\nval box: Box<Int> = Box<Int>(1)\n```\n-->\n\n\u3057\u304b\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u306b\u306f\u3001\uff08\u4f8b\u3048\u3070\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u304b\u3089\u3001\u307e\u305f\u306f\u4f55\u3089\u304b\u306e\u4ed6\u306e\u624b\u6bb5\u306b\u3088\u3063\u3066\uff09\u3001\u300c1\u300d\u306f\u3001\u578b\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nBut if the parameters may be inferred, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:\n-->\n\n``` kotlin\nval box = Box(1) // 1 \u306f Int\u578b\u3092\u3082\u3064\u305f\u3081\u3001\u3053\u3053\u3067\u306f Box<Int> \u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u308f\u304b\u308b\n```\n\n<!--original\n``` kotlin\nval box = Box(1) // 1 has type Int, so the compiler figures out that we are talking about Box<Int>\n```\n-->\n\n## \u5206\u6563\n\n<!--original\n## Variance\n-->\n\nJava\u306e\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u6700\u3082\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u90e8\u5206\u306e\u4e00\u3064\u306f\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u7a2e\u985e\uff08[Java\u306e\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306eFAQ](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3067\u3059\u3002\u305d\u3057\u3066\u3001Kotlin\u306f\u3001\u3044\u305a\u308c\u3082\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u30012\u3064\u306e\u5225\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff1a\u5ba3\u8a00\u7b87\u6240\u306e\u5206\u6563\u3068\u578b\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n<!--original\nOne of the most tricky parts of Java's type system is wildcard types (see [Java Generics FAQ](http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html)).\nAnd Kotlin doesn't have any. Instead, it has two other things: declaration-site variance and type projections.\n-->\n\n\u307e\u305a\u306f\u3001Java\u304c\u3053\u308c\u3089\u306e\u795e\u79d8\u7684\u306a\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5fc5\u8981\u3068\u3059\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u554f\u984c\u306f[Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html)\u306e\u9805\u76ee28\u300cAPI\u306e\u67d4\u8edf\u6027\u3092\u9ad8\u3081\u308b\u305f\u3081\u306e\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305f\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306e\u4f7f\u7528\u300d\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305a\u3001Java\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306f\u4e0d\u5909\u3067\u3059\u3002\u3053\u308c\u306f\u3001 `List<String>` \u306f `List<Object>` \u306e\u30b5\u30d6\u30bf\u30a4\u30d7 **\u3067\u306f\u306a\u3044** \u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u306a\u305c\u305d\u3046\u306a\u306e\u304b\uff1f\u3082\u3057\u30ea\u30b9\u30c8\u304c **\u4e0d\u5909** \u3067\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u3001\u5b9f\u884c\u6642\u306b\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u306f\u3001Java\u306e\u914d\u5217\u3088\u308a\u826f\u3044\u3082\u306e\u3067\u306f\u306a\u304b\u3063\u305f\u3067\u3057\u3087\u3046\u3002\n\n<!--original\nFirst, let's think about why Java needs those mysterious wildcards. The problem is explained in [Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html), Item 28: *Use bounded wildcards to increase API flexibility*.\nFirst, generic types in Java are **invariant**, meaning that `List<String>` is **not** a subtype of `List<Object>`. \nWhy so? If List was not **invariant**, it would have been no \nbetter than Java's arrays, since the following code would have compiled and caused an exception at runtime:\n-->\n\n``` java\n// Java\nList<String> strs = new ArrayList<String>();\nList<Object> objs = strs; // !!! \u4eca\u5f8c\u306e\u554f\u984c\u306e\u539f\u56e0\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002 Java\u306f\u3053\u308c\u3092\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\uff01\nobjs.add(1); // Integer \u3092 Strings \u306e\u30ea\u30b9\u30c8\u3078\u5165\u308c\u308b\nString s = strs.get(0); // !!! ClassCastException: Integer \u3092 String \u3078\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u306a\u3044\n```\n\u3064\u307e\u308a\u3001Java\u306e\u5b9f\u884c\u6642\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u7981\u6b62\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 `Collection` \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u306e `addAll()` \u30e1\u30bd\u30c3\u30c9\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f\u76f4\u611f\u7684\u306b\u3001\u6211\u3005\u306f\u305d\u308c\u3092\u3053\u306e\u3088\u3046\u306b\u7f6e\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n<!--original\n``` java\n// Java\nList<String> strs = new ArrayList<String>();\nList<Object> objs = strs; // !!! The cause of the upcoming problem sits here. Java prohibits this!\nobjs.add(1); // Here we put an Integer into a list of Strings\nString s = strs.get(0); // !!! ClassCastException: Cannot cast Integer to String\n```\nSo, Java prohibits such things in order to guarantee run-time safety. But this has some implications. For example, consider the `addAll()` method from `Collection` \ninterface. What's the signature of this method? Intuitively, we'd put it this way:\n-->\n\n``` java\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<E> items);\n}\n```\n\n<!--original\n``` java\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<E> items);\n}\n```\n-->\n\n\u3057\u304b\u3057\u3001\u305d\u306e\u5f8c\u3001\u6b21\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u3053\u3068\uff08\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3042\u308b\uff09\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nBut then, we would not be able to do the following simple thing (which is perfectly safe):\n-->\n\n``` java\n// Java\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n  to.addAll(from); // !!! addAll\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u5ba3\u8a00\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\uff1a\n                   //       Collection<String> \u306f Collection <Object> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\n}\n```\n\n<!--original\n``` java\n// Java\nvoid copyAll(Collection<Object> to, Collection<String> from) {\n  to.addAll(from); // !!! Would not compile with the naive declaration of addAll:\n                   //       Collection<String> is not a subtype of Collection<Object>\n}\n```\n-->\n\n\uff08Java\u3067\u306f\u3001\u3053\u306e\u6559\u8a13\u306b\u5805\u3044\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002 [Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html)\u306e\u9805\u76ee25\u300c *\u914d\u5217\u3088\u308a\u30ea\u30b9\u30c8\u3092\u597d\u3080* \u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n<!--original\n(In Java, we learned this lesson the hard way, see [Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html), Item 25: *Prefer lists to arrays*)\n\n-->\n\n\u3053\u308c\u304c\u3001 `addAll()` \u306e\u5b9f\u969b\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308b\u7406\u7531\u3067\u3059\uff1a\n\n<!--original\nThat's why the actual signature of `addAll()` is the following:\n-->\n\n``` java\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<? extends E> items);\n}\n```\n\n<!--original\n``` java\n// Java\ninterface Collection<E> ... {\n  void addAll(Collection<? extends E> items);\n}\n```\n-->\n\n**\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u578b\u5f15\u6570** `? extends T` \u306f\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u53d7\u3051\u5165\u308c\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f `T` **\u306e\u30b5\u30d6\u30bf\u30a4\u30d7** \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u3063\u3066\u3001 `T` \u81ea\u8eab\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u79c1\u305f\u3061\u304c\u5b89\u5168\u306b `T` \u306e\u9805\u76ee\uff08\u3053\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u306f `T` \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\uff09\u3092 **\u8aad\u307f\u53d6\u308b** \u3053\u3068\u304c\u3067\u304d\u3066\u3082\u3001\u672a\u77e5\u306e `T` \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306b\u5bfe\u3057\u3066\u3001\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5fdc\u3058\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001 **\u66f8\u304d\u8fbc\u307f\u304c\u3067\u304d\u306a\u3044** \u7406\u7531\u306f\u3053\u308c\u3067\u3059\u3002\n\u3053\u306e\u5236\u9650\u3068\u5f15\u304d\u63db\u3048\u306b\u3001\u79c1\u305f\u3061\u306f\u671b\u3093\u3060\u52d5\u4f5c\u3092\u5f97\u307e\u3059\uff1a `Collection<String>` \u306f `Collection<? extends Object>` \u306e\u30b5\u30d6\u30bf\u30a4\u30d7 *\u3067\u3042\u308b* \u3068\u3044\u3046\u3053\u3068\u3002\n\u300c\u8ce2\u3044\u8a00\u8449\u300d\u3067\u8a00\u3044\u63db\u3048\u308b\u3068\u3001 **\u62e1\u5f35\u3059\u308b** \u30d0\u30a4\u30f3\u30c9\uff08 **\u4e0a\u6607** \u306e\u30d0\u30a4\u30f3\u30c9\uff09\u306e\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u306f **\u578b\u5171\u5909** \u306b\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nThe **wildcard type argument** `? extends T` indicates that this method accepts a collection of objects of *some subtype of* `T`, not `T` itself. \nThis means that we can safely **read** `T`'s from items (elements of this collection are instances of a subclass of T), but **cannot write** to \nit since we do not know what objects comply to that unknown subtype of `T`. \nIn return for this limitation, we have the desired behaviour: `Collection<String>` *is* a subtype of `Collection<? extends Object>`. \nIn \"clever words\", the wildcard with an **extends**\\-bound (**upper** bound) makes the type **covariant**.\n-->\n\n\u3053\u306e\u30c8\u30ea\u30c3\u30af\u304c\u306a\u305c\u50cd\u304f\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e\u9375\u306f\u3001\u304b\u306a\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff1a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u3092 **\u53d6\u308a\u51fa\u3059** \u3053\u3068\u3060\u3051\u3067\u304d\u308b\u306e\u306a\u3089\u3070\u3001`String` \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001 `Object` \u3067\u8aad\u307f\u51fa\u305b\u3070\u826f\u3044\u306e\u3067\u3059\u3002\n\u53cd\u5bfe\u306b\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u30a2\u30a4\u30c6\u30e0\u3092 _\u5165\u308c\u308b_ \u3053\u3068\u3060\u3051\u3067\u304d\u308b\u306e\u306a\u3089\u3070\u3001 `Object` \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3001 `String` \u3092\u5165\u308c\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u3002 Java\u3067\u306f `List<Object>` \u306e **\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7** \u3067\u3042\u308b\u3001 `List<? super String>` \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n<!--original\nThe key to understanding why this trick works is rather simple: if you can only **take** items from a collection, then using a collection of `String`s\nand reading `Object`s from it is fine. Conversely, if you can only _put_ items into the collection, it's OK to take a collection of\n`Object`s and put `String`s into it: in Java we have `List<? super String>` a **supertype** of `List<Object>`.\n-->\n \n\u5f8c\u8005\u306f **\u53cd\u5909\u6027** \u3068\u547c\u3070\u308c\u3001 String \u3092 `List<? super String>` \u306e\u5f15\u6570\u3068\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001 `add(String)` \u3084 `set(int, String)` \u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u305f\u3060\u3057\u3001`List<T>` \u3067 `T` \u3092\u8fd4\u3059\u4f55\u304b\u3092\u547c\u3093\u3060\u3068\u304d\u3001\u5f97\u308b\u306e\u306f `String` \u3067\u306f\u306a\u304f `Object` \u3067\u3059\u304c\u3002\n\n<!--original\nThe latter is called **contravariance**, and you can only call methods that take String as an argument on `List<? super String>` \n(e.g., you can call `add(String)` or `set(int, String)`), while \nif you call something that returns `T` in `List<T>`, you don't get a `String`, but an `Object`.\n-->\n\n\u30b8\u30e7\u30b7\u30e5\u30a2\u30fb\u30d6\u30ed\u30c3\u30af (Joshua Bloch) \u306f\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 \u300c **\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\uff08\u751f\u7523\u8005\uff09** \u304b\u3089\u306e\u307f **\u8aad\u307f\u8fbc\u307f** \u3001**\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\uff08\u6d88\u8cbb\u8005\uff09** \u306b\u306e\u307f **\u66f8\u304d\u8fbc\u3080** \u300d\u3068\u547c\u3073\u307e\u3057\u305f\u3002\u5f7c\u306e\u52e7\u3081\u306b\u3088\u308b\u3068\u3001 *\u300c\u6700\u5927\u306e\u67d4\u8edf\u6027\u3092\u5f97\u308b\u305f\u3081\u306b\u3001\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u3084\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u3092\u8868\u3059\u5165\u529b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u30bf\u30a4\u30d7\u3092\u4f7f\u7528\u3059\u308b\u300d* \u3002 \u6b21\u306e\u8a18\u61b6\u8853 (mnemonic) \u3082\u63d0\u6848\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nJoshua Bloch calls those objects you only **read** from **Producers**, and those you only **write** to **Consumers**. He recommends: \"*For maximum flexibility, use wildcard types on input parameters that represent producers or consumers*\", and proposes the following mnemonic:\n-->\n\n*PECS\u306fProducer-Extends, Consumer-Super \u3092\u610f\u5473\u3057\u307e\u3059\u3002*\n\n<!--original\n*PECS stands for Producer-Extends, Consumer-Super.*\n-->\n\n*\u6ce8* \uff1a\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff08\u305f\u3068\u3048\u3070\u3001 `List<? extends Foo>` \uff09\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4e0a\u306e `add()` \u3084 `set()` \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f **\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u4e0d\u5909\uff09** \u3067\u3042\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001 `clear()` \u306f\u5168\u304f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3089\u306a\u3044\u305f\u3081\u3001\u30ea\u30b9\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u9805\u76ee\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306b `clear()` \u3092\u547c\u3073\u51fa\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\uff08\u307e\u305f\u306f\u5206\u6563\u306e\u4ed6\u306e\u578b\uff09\u306b\u3088\u3063\u3066\u552f\u4e00\u4fdd\u8a3c\u3055\u308c\u308b\u306e\u306f **\u578b\u306e\u5b89\u5168\u6027** \u3067\u3059\u3002\u4e0d\u5909\u6027\u306f\u5168\u304f\u5225\u306e\u8a71\u3067\u3059\u3002\n\n<!--original\n*NOTE*: if you use a producer-object, say, `List<? extends Foo>`, you are not allowed to call `add()` or `set()` on this object, but this does not mean \nthat this object is **immutable**: for example, nothing prevents you from calling `clear()` to remove all items from the list, since `clear()` \ndoes not take any parameters at all. The only thing guaranteed by wildcards (or other types of variance) is **type safety**. Immutability is a completely different story.\n-->\n\n### \u5ba3\u8a00\u7b87\u6240\u5206\u6563\n\n<!--original\n### Declaration-site variance\n-->\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e `Source<T>` \u304c\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 `T` \u3092\u3068\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u305f\u305a\u3001 `T` \u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u307f\u3092\u6301\u3064\u3068\u3057\u307e\u3059\u3002 \n\n<!--original\nSuppose we have a generic interface `Source<T>` that does not have any methods that take `T` as a parameter, only methods that return `T`:\n-->\n\n``` java\n// Java\ninterface Source<T> {\n  T nextT();\n}\n```\n\n<!--original\n``` java\n// Java\ninterface Source<T> {\n  T nextT();\n}\n```\n-->\n\n\u305d\u308c\u306f `Source<Object>` \u578b\u306e\u5909\u6570\uff08\u547c\u3073\u51fa\u305b\u308b\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\uff09\u5185\u3067 `Source<String>` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u306e\u306b\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3059\u3002 -- \u3057\u304b\u3057\u3001Java\u306f\u3053\u308c\u3092\u77e5\u3063\u3066\u3044\u308b\u3057\u3001\u307e\u3060\u305d\u308c\u3092\u7981\u6b62\u3057\u3066\u3044\u307e\u305b\u3093\uff1a\n\n<!--original\nThen, it would be perfectly safe to store a reference to an instance of `Source<String>` in a variable of type `Source<Object>` -- there are no consumer-methods to call. But Java does not know this, and still prohibits it:\n-->\n\n``` java\n// Java\nvoid demo(Source<String> strs) {\n  Source<Object> objects = strs; // !!! Java \u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\n  // ...\n}\n```\n\n<!--original\n``` java\n// Java\nvoid demo(Source<String> strs) {\n  Source<Object> objects = strs; // !!! Not allowed in Java\n  // ...\n}\n```\n-->\n\n\u3053\u308c\u3092\u4fee\u6b63\u3059\u308b\u305f\u3081\u306b\u3001`Source<? extends Object>` \u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5168\u3066\u306e\u540c\u30e1\u30bd\u30c3\u30c9\u3092\u524d\u306e\u3088\u3046\u306a\u5909\u6570\u3067\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u9806\u5e8f\u306b\u610f\u5473\u306f\u306a\u304f\u3001\u3088\u308a\u8907\u96d1\u306a\u578b\u3067\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u4fa1\u5024\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u305d\u308c\u3092\u77e5\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nTo fix this, we have to declare objects of type `Source<? extends Object>`, which is sort of meaningless, because we can call all the same methods on such a variable as before, so there's no value added by the more complex type. But the compiler does not know that.\n-->\n\nKotlin\u3067\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3053\u306e\u7a2e\u306e\u554f\u984c\u3092\u8aac\u660e\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001 **\u5ba3\u8a00\u7b87\u6240\u5206\u6563** \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\uff1a\u30bd\u30fc\u30b9\u306e **\u578b\u30d1\u30e9\u30e1\u30fc\u30bf** `T` \u3092 `Source<T>` \u306e\u30e1\u30f3\u30d0\u304b\u3089\u306e\u307f **\u8fd4\u3057** \uff08\u30d7\u30ed\u30c7\u30e5\u30fc\u30b9\u3059\u308b\uff09\u3001\u6d88\u8cbb\u3055\u308c\u308b\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u6211\u3005\u306f **out** \u4fee\u98fe\u5b50\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n<!--original\nIn Kotlin, there is a way to explain this sort of thing to the compiler. This is called **declaration-site variance**: we can annotate the **type parameter** `T` of Source to make sure that it is only **returned** (produced) from members of `Source<T>`, and never consumed. \nTo do this we provide the **out** modifier:\n-->\n\n``` kotlin\nabstract class Source<out T> {\n  abstract fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n  val objects: Source<Any> = strs // \u3053\u308c\u306f OK \u3001\u306a\u305c\u306a\u3089 T \u306fout\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u305f\u3081\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nabstract class Source<out T> {\n  abstract fun nextT(): T\n}\n\nfun demo(strs: Source<String>) {\n  val objects: Source<Any> = strs // This is OK, since T is an out-parameter\n  // ...\n}\n```\n-->\n\n\u4e00\u822c\u7684\u306a\u30eb\u30fc\u30eb\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30af\u30e9\u30b9 `C` \u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf `T` \u304c\u3001 **out** \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u3001 `C` \u306e\u30e1\u30f3\u30d0\u306e\u4e2d\u3067 **out** \u306e\u4f4d\u7f6e\u3067\u306e\u307f\u305d\u308c\u304c\u8d77\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001 `C<Base>` \u3092\u8fd4\u3059\u3068\u304d\u306f `C<Derived>` \u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306b\u5b89\u5168\u306b\u306a\u308a\u5f97\u307e\u3059\u3002\n\n<!--original\nThe general rule is: when a type parameter `T` of a class `C` is declared **out**, it may occur only in **out**\\-position in the members of `C`, but in return `C<Base>` can safely be a supertype \nof `C<Derived>`.\n-->\n\n\u300c\u8ce2\u3044\u8a00\u8449\u300d\u3067\u3044\u3046\u3068\u3001\u30af\u30e9\u30b9 `C` \u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf `T` \u306b **\u5171\u5909** \u3067\u3042\u308b\u3001\u307e\u305f\u306f `T` \u304c **\u5171\u5909** \u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u3068\u306a\u308a\u307e\u3059\u3002 `C` \u306f `T` \u306e **\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5** \u3067\u3042\u308a\u3001 `T` \u306e **\u30b3\u30f3\u30b7\u30e5\u30fc\u30de** \u3067\u306f\u306a\u3044\u3001\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIn \"clever words\" they say that the class `C` is **covariant** in the parameter `T`, or that `T` is a **covariant** type parameter. \nYou can think of `C` as being a **producer** of `T`'s, and NOT a **consumer** of `T`'s.\n-->\n\n**out** \u4fee\u98fe\u5b50\u306f\u3001 **\u5206\u6563\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3** \u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5ba3\u8a00\u7b87\u6240\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6211\u3005\u306f **\u5ba3\u8a00\u7b87\u6240\u5206\u6563** \u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u304c\u4f7f\u7528\u6642\u306b\u578b\u3092\u5171\u5909\u306b\u3059\u308b\u3001Java\u306e **\u4f7f\u7528\u7b87\u6240\u5206\u6563** \u3068\u306f\u5bfe\u7167\u7684\u3067\u3059\u3002\n\n<!--original\nThe **out** modifier is called a **variance annotation**, and  since it is provided at the type parameter declaration site, we talk about **declaration-site variance**. \nThis is in contrast with Java's **use-site variance** where wildcards in the type usages make the types covariant.\n-->\n\n**out** \u306b\u52a0\u3048\u3066\u3001Kotlin\u306f **in** \u3068\u3044\u3046\u88dc\u5b8c\u7684\u306a\u5206\u6563\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e **\u53cd\u5909** \u3092\u884c\u3044\u307e\u3059\u3002\u6d88\u8cbb\u3055\u308c\u308b\u306e\u307f\u3067\u3042\u308a\u3001\u6c7a\u3057\u3066\u30d7\u30ed\u30c7\u30e5\u30fc\u30b9\uff08\u751f\u7523\uff09\u3055\u308c\u307e\u305b\u3093\u3002\n\u53cd\u5909\u30af\u30e9\u30b9\u306e\u826f\u3044\u4f8b\u306f `Comparable` \u3067\u3059\uff1a\n\n<!--original\nIn addition to **out**, Kotlin provides a complementary variance annotation: **in**. It makes a type parameter **contravariant**: it can only be consumed and never \nproduced. A good example of a contravariant class is `Comparable`:\n-->\n\n``` kotlin\nabstract class Comparable<in T> {\n  abstract fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n  x.compareTo(1.0) // 1.0 \u306f Number \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u3042\u308b Double \u578b\u3092\u3082\u3064\n  // \u305d\u308c\u3086\u3048\u3001 x \u3092 Comparable<Double> \u578b\u306e\u5909\u6570\u3078\u4ee3\u5165\u3067\u304d\u308b\n  val y: Comparable<Double> = x // OK!\n}\n```\n\n<!--original\n``` kotlin\nabstract class Comparable<in T> {\n  abstract fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable<Number>) {\n  x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number\n  // Thus, we can assign x to a variable of type Comparable<Double>\n  val y: Comparable<Double> = x // OK!\n}\n```\n-->\n\n\uff08C#\u3067\u4f55\u5ea6\u3082\u6210\u529f\u3057\u3066\u3044\u308b\u3088\u3046\u306b\uff09**in** \u3068 **out** \u306f\u81ea\u5df1\u8aac\u660e\u7684\u3067\u3042\u308b\u3086\u3048\u306b\u3001\u4ee5\u524d\u8ff0\u3079\u305f\u8a18\u61b6\u8853\uff08\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\uff09\u306f\u672c\u5f53\u306f\u4e0d\u8981\u3067\u3001\u3088\u308a\u9ad8\u6b21\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u8a00\u3044\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nWe believe that the words **in** and **out** are self-explaining (as they were successfully used in C# for quite some time already), \nthus the mnemonic mentioned above is not really needed, and one can rephrase it for a higher purpose:\n-->\n\n**[\u5b9f\u5b58\u7684](http://en.wikipedia.org/wiki/Existentialism)\u8a00\u3044\u63db\u3048\uff1a\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\uff08\u6d88\u8cbb\u8005\uff09\u306f in\u3001\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\uff08\u751f\u7523\u8005\uff09\u306f out \uff01** :-)\n\n<!--original\n**[The Existential](http://en.wikipedia.org/wiki/Existentialism) Transformation: Consumer in, Producer out\\!** :-)\n-->\n\n## \u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09\n\n<!--original\n## Type projections\n-->\n\n### \u5229\u7528\u7b87\u6240\u306e\u5206\u6563\uff1a\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n\n<!--original\n### Use-site variance: Type projections\n-->\n\n*out* \u578b\u30d1\u30e9\u30e1\u30fc\u30bfT\u3092\u5ba3\u8a00\u3057\u3001\u4f7f\u7528\u7b87\u6240\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3068\u306e\u554f\u984c\u304c\u306a\u3044\u3053\u3068\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u305d\u3046\u3001\u305d\u308c\u306f\u554f\u984c\u306e\u30af\u30e9\u30b9\u304c\u5b9f\u969b\u306b `T` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307f\u3092\u8fd4\u3059\u3088\u3046\u5236\u9650 **\u3067\u304d\u308b** \u3068\u304d\u3067\u3059\u304c\u3001\u3067\u304d\u306a\u3044\u306e\u306f\u3069\u3093\u306a\u3068\u304d\u3067\u3057\u3087\u3046\u3002\u3053\u306e\u826f\u3044\u4f8b\u306f\u3001Array\u3067\u3059\u3002\n\n<!--original\nIt is very convenient to declare a type parameter T as *out* and have no trouble with subtyping on the use site. Yes, it is, when the class in question **can** actually be restricted to only return `T`'s, but what if it can't? \nA good example of this is Array:\n-->\n\n``` kotlin\nclass Array<T>(val size: Int) {\n  fun get(index: Int): T { /* ... */ }\n  fun set(index: Int, value: T) { /* ... */ }\n}\n```\n\n<!--original\n``` kotlin\nclass Array<T>(val size: Int) {\n  fun get(index: Int): T { /* ... */ }\n  fun set(index: Int, value: T) { /* ... */ }\n}\n```\n-->\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f `T` \u306e\u5171\u5909\u307e\u305f\u306f\u53cd\u5909\u306e\u3044\u305a\u308c\u304b\u306b\u3082\u306a\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3057\u3066\u3001\u3053\u308c\u306f\u7279\u5b9a\u306e\u4e0d\u6493\uff08\u3075\u3068\u3046\uff09\u6027\uff08\u66f2\u3052\u3089\u308c\u306a\u3044\u7279\u6027\uff09\u3092\u8ab2\u3057\u3066\u3044\u307e\u3059\u3002\u6b21\u306e\u95a2\u6570\u3092\u8003\u3048\u3066\u307f\u307e\u3059\uff1a\n\n<!--original\nThis class cannot be either co\\- or contravariant in `T`. And this imposes certain inflexibilities. Consider the following function:\n-->\n\n``` kotlin\nfun copy(from: Array<Any>, to: Array<Any>) {\n  assert(from.size == to.size)\n  for (i in from.indices)\n    to[i] = from[i]\n}\n```\n\n<!--original\n``` kotlin\nfun copy(from: Array<Any>, to: Array<Any>) {\n  assert(from.size == to.size)\n  for (i in from.indices)\n    to[i] = from[i]\n}\n```\n-->\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u3042\u308b\u914d\u5217\u304b\u3089\u5225\u306e\u914d\u5217\u3078\u3001\u30a2\u30a4\u30c6\u30e0\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306b\u305d\u308c\u3092\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a\n\n<!--original\nThis function is supposed to copy items from one array to another. Let's try to apply it in practice:\n-->\n\n``` kotlin\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3)\ncopy(ints, any) // \u30a8\u30e9\u30fc\uff1a (Array<Any>, Array<Any>) \u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\n```\n\n<!--original\n``` kotlin\nval ints: Array<Int> = arrayOf(1, 2, 3)\nval any = Array<Any>(3)\ncopy(ints, any) // Error: expects (Array<Any>, Array<Any>)\n```\n-->\n\n\u3053\u3053\u3067\u540c\u3058\u3088\u3046\u306a\u3088\u304f\u3042\u308b\u554f\u984c\u306b\u906d\u9047\u3057\u307e\u3059\uff1a `Array<T>` \u306f `T` \u306b\u304a\u3044\u3066 **\u4e0d\u5909** \u3067\u3042\u308a\u3001\u3086\u3048\u306b `Array<Int>` \u3082 `Array<Any>` \u3082\u4ed6\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3069\u3046\u3057\u3066\uff1f\u30b3\u30d4\u30fc\u304c\u4f55\u304b\u60aa\u3044\u3053\u3068\uff08\u3059\u306a\u308f\u3061 `from` \u3078\u306e\u6587\u5b57\u5217\u306e **\u66f8\u304d\u8fbc\u307f** \u3084\u51fa\u529b\u306e\u8a66\u884c\uff09\u3092\u3084\u3063\u3066\u3044\u308b **\u53ef\u80fd\u6027\u304c\u3042\u308b** \u305f\u3081\u3067\u3059\u3002\u307e\u305f `Int` \u306e\u914d\u5217\u3092\u5b9f\u969b\u306b\u6e21\u3055\u308c\u308b\u3068\u3001`ClassCastException` \u304c\u6642\u3005\u5f8c\u3067\u6295\u3052\u3089\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n\n<!--original\nHere we run into the same familiar problem: `Array<T>` is **invariant** in `T`, thus neither of `Array<Int>` and `Array<Any>` \nis a subtype of the other. Why? Again, because copy **might** be doing bad things, i.e. it might attempt to **write**, say, a String to `from`,\nand if we actually passed an array of `Int` there, a `ClassCastException` would have been thrown sometime later.\n-->\n\n\u3053\u3053\u3067\u3001\u552f\u4e00\u306e\u4fdd\u8a3c\u3057\u305f\u3044\u3053\u3068\u306f\u3001`copy()` \u304c\u3044\u304b\u306a\u308b\u60aa\u3055\u3082\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 `copy()` \u304c `from` \u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3092\u7981\u6b62\u3057\u305f\u304f\u3001\u305d\u308c\u3092\u884c\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThen, the only thing we want to ensure is that `copy()` does not do any bad things. We want to prohibit it from **writing** to `from`, and we can:\n-->\n\n``` kotlin\nfun copy(from: Array<out Any>, to: Array<Any>) {\n // ...\n}\n```\n\n<!--original\n``` kotlin\nfun copy(from: Array<out Any>, to: Array<Any>) {\n // ...\n}\n```\n-->\n\n\u3053\u3053\u3067\u8d77\u3053\u3063\u305f\u3053\u3068\u306f\u3001 **\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09** \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002 `from` \u306f\u5358\u7d14\u306b\u914d\u5217\u306a\u306e\u3067\u306f\u306a\u304f\u3001\u5236\u9650\u3055\u308c\u305f\uff08 **\u6295\u5f71\u3055\u308c\u305f** \uff09\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u578b\u30d1\u30e9\u30e1\u30fc\u30bf `T` \u3092\u8fd4\u3059\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001 `get()` \u3092\u547c\u3076\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c\u3001 **\u4f7f\u7528\u7b87\u6240\u5206\u6563** \u306e\u305f\u3081\u306e\u6211\u3005\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3042\u308a\u3001Java\u306e `Array<? extends Object>` \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u304c\u3001\u5c11\u3057\u3060\u3051\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002\n\n<!--original\nWhat has happened here is called **type projection**: we said that `from` is not simply an array, but a restricted (**projected**) one: we can only call those methods that return the type parameter \n`T`, in this case it means that we can only call `get()`. This is our approach to **use-site variance**, and corresponds to Java's `Array<? extends Object>`, \nbut in a slightly simpler way.\n-->\n\n\u3053\u306e\u3088\u3046\u306b **in** \u3067\u30bf\u30a4\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u578b\u6295\u5f71\uff09\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nYou can project a type with **in** as well:\n-->\n\n``` kotlin\nfun fill(dest: Array<in String>, value: String) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun fill(dest: Array<in String>, value: String) {\n  // ...\n}\n```\n-->\n\n`Array<in String>` \u306f Java\u306e `Array<? super String>` \u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001 `CharSequence` \u306e\u914d\u5217\u3084 `Object` \u306e\u914d\u5217\u3092 `fill()` \u95a2\u6570\u3078\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\n`Array<in String>` corresponds to Java's `Array<? super String>`, i.e. you can pass an array of `CharSequence` or an array of `Object` to the `fill()` function.\n-->\n\n### \u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 (star-projections)\n\n<!--original\n### Star-projections\n-->\n\n\u578b\u5f15\u6570\u306b\u3064\u3044\u3066\u4f55\u3082\u77e5\u3089\u306a\u3044\u304c\u3001\u305d\u308c\u3067\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u3067\u4f7f\u7528\u3057\u305f\u3044\u3068\u3001\u6642\u306b\u306f\u8a00\u3044\u305f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306e\u5b89\u5168\u306a\u65b9\u6cd5\u3068\u306f\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u305d\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3092\u5177\u4f53\u7684\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3001\u5168\u3066\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nSometimes you want to say that you know nothing about the type argument, but still want to use it in a safe way.\nThe safe way here is to define such a projection of the generic type, that every concrete instantiation of that generic type would be a subtype of that projection.\n-->\n\nKotlin\u306f\u3053\u306e\u305f\u3081\u306b\u3001\u3044\u308f\u3086\u308b **\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3 (star-projection)** \u69cb\u6587\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a\n\n<!--original\nKotlin provides so called **star-projection** syntax for this:\n-->\n\n - `Foo <out T>` \u306e\u5834\u5408\u3001`T` \u306f\u4e0a\u9650 `TUpper` \u3092\u6301\u3064\u5171\u5909\u306e\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308a\u3001 `Foo <*>` \u306f `Foo<out TUpper>` \u3068\u7b49\u4fa1\u3067\u3059\u3002\u3053\u308c\u306f\u3001 `T` \u304c\u4e0d\u660e\u306a\u5834\u5408\u306b\u3001\u5b89\u5168\u306b\u306f `Foo <*>` \u304b\u3089 `TUpper` \u306e\u5024\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n - `T` \u304c\u53cd\u5909\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b `Foo<in T>` \u306b\u3064\u3044\u3066\u306f\u3001 `Foo<*>` \u306f `Foo <in Nothing>` \u3068\u7b49\u4fa1\u3067\u3059\u3002\u305d\u308c\u306f `T` \u306f\u4e0d\u660e\u3067\u3042\u308b\u5834\u5408\u306f\u5b89\u5168\u306a\u65b9\u6cd5\u3067 `Foo <*>` \u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u65b9\u6cd5\u304c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n - `Foo <T>` \u306e\u5834\u5408\u3001 `T` \u306f\u4e0a\u9650 `TUpper` \u3092\u6301\u3064\u4e0d\u5909\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308a\u3001\u5024\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e `Foo<out TUpper>`\u304a\u3088\u3073\u5024\u3092\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e `Foo<in Nothing>` \u3068 `Foo <*>` \u306f\u540c\u7b49\u3067\u3059\u3002\n\n<!--original\n - For `Foo<out T>`, where `T` is a covariant type parameter with the upper bound `TUpper`, `Foo<*>` is equivalent to `Foo<out TUpper>`. It means that when the `T` is unknown you can safely *read* values of `TUpper` from `Foo<*>`.\n - For `Foo<in T>`, where `T` is a contravariant type parameter, `Foo<*>` is equivalent to `Foo<in Nothing>`. It means there is nothing you can *write* to `Foo<*>` in a safe way when `T` is unknown.\n - For `Foo<T>`, where `T` is an invariant type parameter with the upper bound `TUpper`, `Foo<*>` is equivalent to `Foo<out TUpper>` for reading values and to `Foo<in Nothing>` for writing values.\n-->\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u304c\u3044\u304f\u3064\u304b\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u5834\u5408\u3001\u305d\u308c\u3089\u306f\u72ec\u7acb\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\uff08\u6295\u5f71\uff09\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u578b\u304c `interface Function<in T, out U>` \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306a\u3089\u304c\u3001\u6b21\u306e\u3088\u3046\u306a\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u60f3\u50cf\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf a generic type has several type parameters each of them can be projected independently.\nFor example, if the type is declared as `interface Function<in T, out U>` we can imagine the following star-projections:\n-->\n\n - `Function<*, String>` \u306f `Function<in Nothing, String>` \u3092\u610f\u5473\u3057\u307e\u3059\n - `Function<Int, *>` \u306f `Function<Int, out Any?>` \u3092\u610f\u5473\u3057\u307e\u3059\n - `Function<*, *>` \u306f `Function<in Nothing, out Any?>` \u3092\u610f\u5473\u3057\u307e\u3059\n\n<!--original\n - `Function<*, String>` means `Function<in Nothing, String>`;\n - `Function<Int, *>` means `Function<Int, out Any?>`;\n - `Function<*, *>` means `Function<in Nothing, out Any?>`.\n-->\n\n*\u6ce8\u610f* \uff1a\u30b9\u30bf\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306f\u975e\u5e38\u306bJava\u306e raw \u30bf\u30a4\u30d7\u306b\u306b\u3066\u3044\u307e\u3059\u304c\u3001\u5b89\u5168\u3067\u3059\u3002\n\n<!--original\n*Note*: star-projections are very much like Java's raw types, but safe.\n-->\n\n# \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\n\n<!--original\n# Generic functions\n-->\n\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u30af\u30e9\u30b9\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u95a2\u6570\u3082\u540c\u3058\u3067\u3059\u3002\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u95a2\u6570\u540d\u306e\u524d\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002\n\n<!--original\nNot only classes can have type parameters. Functions can, too. Type parameters are placed before the name of the function:\n-->\n\n``` kotlin\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n\nfun <T> T.basicToString() : String {  // \u62e1\u5f35\u95a2\u6570\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n\nfun <T> T.basicToString() : String {  // extension function\n  // ...\n}\n```\n-->\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u3001\u95a2\u6570\u540d\u306e **\u5f8c\u306b** \u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u578b\u5f15\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n<!--original\nTo call a generic function, specify the type arguments at the call site **after** the name of the function:\n-->\n\n``` kotlin\nval l = singletonList<Int>(1)\n```\n\n<!--original\n``` kotlin\nval l = singletonList<Int>(1)\n```\n-->\n\n# \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u5236\u7d04\n\n<!--original\n# Generic constraints\n-->\n\n\u4e0e\u3048\u3089\u308c\u308b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u7f6e\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3059\u3079\u3066\u306e\u8a31\u5bb9\u3055\u308c\u308b\u578b\u306e\u96c6\u5408\u306f\u3001 **\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u5236\u7d04** \u306b\u3088\u3063\u3066\u5236\u9650\u3055\u308c\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n<!--original\nThe set of all possible types that can be substituted for a given type parameter may be restricted by **generic constraints**.\n-->\n\n## \u4e0a\u9650 (Upper bounds)\n\n<!--original\n## Upper bounds\n-->\n\n\u5236\u7d04\u306e\u6700\u3082\u4e00\u822c\u7684\u306a\u30bf\u30a4\u30d7\u306f\u3001Java\u306e extends \u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b **\u4e0a\u9650** \u3067\u3059\u3002\n\n<!--original\nThe most common type of constraint is an **upper bound** that corresponds to Java's *extends* keyword:\n-->\n\n``` kotlin\nfun <T : Comparable<T>> sort(list: List<T>) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun <T : Comparable<T>> sort(list: List<T>) {\n  // ...\n}\n```\n-->\n\n\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u6307\u5b9a\u3055\u308c\u305f\u30bf\u30a4\u30d7\u304c **\u4e0a\u9650** \u3067\u3059\u3002 `Comparable<T>` \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u306f `T` \u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nThe type specified after a colon is the **upper bound**: only a subtype of `Comparable<T>` may be substituted for `T`. For example\n-->\n\n``` kotlin\nsort(listOf(1, 2, 3)) // OK. Int \u306f Comparable<Int> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u3059\nsort(listOf(HashMap<Int, String>())) // \u30a8\u30e9\u30fc\uff1a HashMap<Int, String> \u306f Comparable<HashMap<Int, String>> \u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u306a\u3044\n```\n\n<!--original\n``` kotlin\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable<Int>\nsort(listOf(HashMap<Int, String>())) // Error: HashMap<Int, String> is not a subtype of Comparable<HashMap<Int, String>>\n```\n-->\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e0a\u9650\uff08\u3044\u305a\u308c\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\uff09\u306f `Any?` \u3067\u3059\u3002\u552f\u4e00\u306e\u4e0a\u9650\u3092\u3001\u89d2\u62ec\u5f27\u5185\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u540c\u3058\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8907\u6570\u306e\u4e0a\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f **where** \u53e5\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\nThe default upper bound (if none specified) is `Any?`. Only one upper bound can be specified inside the angle brackets.\nIf the same type parameter needs more than one upper bound, we need a separate **where**\\-clause:\n-->\n\n``` kotlin\nfun <T> cloneWhenGreater(list: List<T>, threshold: T): List<T>\n    where T : Comparable,\n          T : Cloneable {\n  return list.filter { it > threshold }.map { it.clone() }\n}\n```\n\n<!--original\n``` kotlin\nfun <T> cloneWhenGreater(list: List<T>, threshold: T): List<T>\n    where T : Comparable,\n          T : Cloneable {\n  return list.filter { it > threshold }.map { it.clone() }\n}\n```\n-->\n\n# \u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9\n\n<!--original\n# Nested Classes\n-->\n\n\u30af\u30e9\u30b9\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u306e\u4e2d\u306b\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nClasses can be nested in other classes\n-->\n\n``` kotlin\nclass Outer {\n  private val bar: Int = 1\n  class Nested {\n    fun foo() = 2\n  }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n<!--original\n``` kotlin\nclass Outer {\n  private val bar: Int = 1\n  class Nested {\n    fun foo() = 2\n  }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n-->\n\n## \u5185\u90e8\u30af\u30e9\u30b9\n\n<!--original\n## Inner classes\n-->\n\n\u30af\u30e9\u30b9\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b *inner*{:.keyword} \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u5185\u90e8\u30af\u30e9\u30b9\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u3082\u3061\u307e\u3059\uff1a\n\n<!--original\nA class may be marked as *inner*{: .keyword } to be able to access members of outer class. Inner classes carry a reference to an object of an outer class:\n-->\n\n``` kotlin\nclass Outer {\n  private val bar: Int = 1\n  inner class Inner {\n    fun foo() = bar\n  }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n<!--original\n``` kotlin\nclass Outer {\n  private val bar: Int = 1\n  inner class Inner {\n    fun foo() = bar\n  }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n-->\n\n\u5185\u90e8\u30af\u30e9\u30b9\u5185\u3067\u306e *this*{:.keyword} \u306e\u66d6\u6627\u3055\u56de\u907f\u306b\u3064\u3044\u3066\u5b66\u3076\u305f\u3081\u306b\u3001[\u4fee\u98fe\u3055\u308c\u305f *this*{:.keyword} \u5f0f](this-expressions.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Qualified *this*{: .keyword } expressions](this-expressions.html) to learn about disambiguation of *this*{: .keyword } in inner classes.\n-->\n\n## \u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\n\n<!--original\n## Anonymous inner classes\n-->\n\n\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f[\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f](object-declarations.html#object-expressions)\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a\n\n<!--original\nAnonymous inner class instances are created using an [object expression](object-declarations.html#object-expressions):\n-->\n                                                      \n``` kotlin\nwindow.addMouseListener(object: MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n                                                      \n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n```\n\n<!--original\n``` kotlin\nwindow.addMouseListener(object: MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n                                                      \n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n```\n-->\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6a5f\u80fd\u7684\u306aJava\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u3064\u307e\u308a\u3001\u3042\u308bJava\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u3072\u3068\u3064\u306e\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3072\u3082\u3065\u304f\uff09\u3067\u3042\u308b\u5834\u5408\u306f\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u578b\u304c\u524d\u306b\u4ed8\u3044\u305f\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u7528\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIf the object is an instance of a functional Java interface (i.e. a Java interface with a single abstract method),\nyou can create it using a lambda expression prefixed with the type of the interface:\n-->\n\n``` kotlin\nval listener = ActionListener { println(\"clicked\") }\n```\n\n<!--original\n``` kotlin\nval listener = ActionListener { println(\"clicked\") }\n```\n-->\n\n# \u5217\u6319\u578b\u30af\u30e9\u30b9 (Enum Classes)\n\n<!--original\n# Enum Classes\n-->\n\n\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u6700\u3082\u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5\u306f\u3001\u578b\u5b89\u5168\u306a\u5217\u6319\u578b\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nThe most basic usage of enum classes is implementing type-safe enums\n-->\n\n``` kotlin\nenum class Direction {\n  NORTH, SOUTH, WEST, EAST\n}\n```\n\n<!--original\n``` kotlin\nenum class Direction {\n  NORTH, SOUTH, WEST, EAST\n}\n```\n-->\n\n\u5404\u5217\u6319\u578b\u306e\u5b9a\u6570\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u5217\u6319\u578b\u5b9a\u6570\u306f\u30ab\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\n\n<!--original\nEach enum constant is an object. Enum constants are separated with commas.\n-->\n\n## \u521d\u671f\u5316\n\n<!--original\n## Initialization\n-->\n\n\u5404\u5217\u6319\u578b\u306f\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067\u3001\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nSince each enum is an instance of the enum class, they can be initialized\n-->\n\n``` kotlin\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n```\n\n<!--original\n``` kotlin\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n```\n-->\n\n## \u7121\u540d\u30af\u30e9\u30b9\n\n<!--original\n## Anonymous Classes\n-->\n\n\u5217\u6319\u578b\u5b9a\u6570\u306f\u3001\u72ec\u81ea\u306e\u7121\u540d\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nEnum constants can also declare their own anonymous classes\n-->\n\n``` kotlin\nenum class ProtocolState {\n  WAITING {\n    override fun signal() = TALKING\n  },\n\n  TALKING {\n    override fun signal() = WAITING\n  };\n\n  abstract fun signal(): ProtocolState\n}\n```\n\n<!--original\n``` kotlin\nenum class ProtocolState {\n  WAITING {\n    override fun signal() = TALKING\n  },\n\n  TALKING {\n    override fun signal() = WAITING\n  };\n\n  abstract fun signal(): ProtocolState\n}\n```\n-->\n\n\u305d\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u305f\u57fa\u672c\u30e1\u30bd\u30c3\u30c9\u3082\u540c\u69d8\u306b\u4f75\u305b\u3066\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002\u5217\u6319\u578b\u30af\u30e9\u30b9\u3067\u30e1\u30f3\u30d0\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001Java\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001\u30e1\u30f3\u30d0\u5b9a\u7fa9\u304b\u3089 \u5217\u6319\u578b \u5b9a\u6570\u5b9a\u7fa9\u3092\u30bb\u30df\u30b3\u30ed\u30f3\u3067\u533a\u5207\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nwith their corresponding methods, as well as overriding base methods. Note that if the enum class defines any\nmembers, you need to separate the enum constant definitions from the member definitions with a semicolon, just like\nin Java.\n-->\n\n## \u5217\u6319\u578b\u5b9a\u6570\u3092\u4f7f\u7528\u3057\u305f\u4f5c\u696d\n\n<!--original\n## Working with Enum Constants\n-->\n\n\u3061\u3087\u3046\u3069Java\u3068\u540c\u3058\u3088\u3046\u306b\u3001Kotlin\u306e\u5217\u6319\u578b\u30af\u30e9\u30b9\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u5217\u6319\u578b\u5b9a\u6570\u3092\u7f85\u5217\u3057\u3001\u305d\u306e\u540d\u524d\u3067\u5217\u6319\u578b\u5b9a\u6570\u3092\u5f97\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u5408\u6210\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u5217\u6319\u578b\u30af\u30e9\u30b9\u306e\u540d\u524d\u3092 `EnumClass` \u3068\u4eee\u5b9a\u3057\u3066\uff09\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n<!--original\nJust like in Java, enum classes in Kotlin have synthetic methods allowing to list\nthe defined enum constants and to get an enum constant by its name. The signatures\nof these methods are as follows (assuming the name of the enum class is `EnumClass`):\n-->\n\n``` kotlin\nEnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array<EnumClass>\n```\n\n<!--original\n``` kotlin\nEnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array<EnumClass>\n```\n-->\n\n\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u304c\u3001\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5217\u6319\u578b\u5b9a\u6570\u306e\u3044\u305a\u308c\u3068\u3082\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u3001`valueOf()` \u30e1\u30bd\u30c3\u30c9\u306f `IllegalArgumentException` \u3092\u30b9\u30ed\u30fc\u3057\u307e\u3059\u3002\n\n<!--original\nThe `valueOf()` method throws an `IllegalArgumentException` if the specified name does\nnot match any of the enum constants defined in the class.\n-->\n\n\u3059\u3079\u3066\u306e\u5217\u6319\u578b\u5b9a\u6570\u306f\u3001\u5217\u6319\u578b\u30af\u30e9\u30b9\u5ba3\u8a00\u3067\u305d\u306e\u540d\u524d\u3068\u4f4d\u7f6e\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nEvery enum constant has properties to obtain its name and position in the enum class declaration:\n-->\n\n``` kotlin\nval name: String\nval ordinal: Int\n```\n\n<!--original\n``` kotlin\nval name: String\nval ordinal: Int\n```\n-->\n\n\u5217\u6319\u578b\u5b9a\u6570\u306f\u5217\u6319\u578b\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u9806\u5e8f\u3067\u3042\u308b\u81ea\u7136\u306a\u9806\u5e8f\u3067\u3001[Comparable](/api/latest/jvm/stdlib/kotlin/-comparable/index.html) \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3082\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n<!--original\nThe enum constants also implement the [Comparable](/api/latest/jvm/stdlib/kotlin/-comparable/index.html) interface,\nwith the natural order being the order in which they are defined in the enum class.\n-->\n\n# \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u5ba3\u8a00\n\n<!--original\n# Object Expressions and Declarations\n-->\n\n\u6642\u306b\u306f\u3042\u308b\u30af\u30e9\u30b9\u3092\u308f\u305a\u304b\u306b\u4fee\u6b63\u3057\u305f\u3060\u3051\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u308c\u306e\u305f\u3081\u306e\u65b0\u3057\u3044\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u660e\u793a\u7684\u306b\u5ba3\u8a00\u305b\u305a\u306b\u3001\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Java\u3067\u306f *\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9* \u3067\u3053\u306e\u4e8b\u4f8b\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\nKotlin\u3067\u306f\u305f\u3063\u305f *\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f* \u3068 *\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00* \u3060\u3051\u3067\u3053\u306e\u6982\u5ff5\u3092\u4e00\u822c\u5316\u3057\u307e\u3059\u3002\n\n<!--original\nSometimes we need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it.\nJava handles this case with *anonymous inner classes*.\nKotlin slightly generalizes this concept with *object expressions* and *object declarations*.\n-->\n\n## \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\n\n<!--original\n## Object expressions\n-->\n\n\u3044\u304f\u3064\u304b\u306e\u578b\uff081\u3064\u3067\u3082\u8907\u6570\u3067\u3082\uff09\u304b\u3089\u7d99\u627f\u3059\u308b\u7121\u540d\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u3057\u307e\u3059\uff1a\n\n<!--original\nTo create an object of an anonymous class that inherits from some type (or types), we write:\n-->\n\n``` kotlin\nwindow.addMouseListener(object : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n```\n\n<!--original\n``` kotlin\nwindow.addMouseListener(object : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n})\n```\n-->\n\n\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u9069\u5207\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6e21\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u591a\u304f\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306f\u3001\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u30b3\u30f3\u30de\u533a\u5207\u308a\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf a supertype has a constructor, appropriate constructor parameters must be passed to it.\nMany supertypes may be specified as a comma-separated list after the colon:\n\n-->\n\n``` kotlin\nopen class A(x: Int) {\n  public open val y: Int = x\n}\n\ninterface B {...}\n\nval ab: A = object : A(1), B {\n  override val y = 15\n}\n```\n\n<!--original\n``` kotlin\nopen class A(x: Int) {\n  public open val y: Int = x\n}\n\ninterface B {...}\n\nval ab: A = object : A(1), B {\n  override val y = 15\n}\n```\n-->\n\n\u4e07\u304c\u4e00\u3001\u81ea\u660e\u3067\u306a\u3044\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u307f\u300d\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u5358\u7d14\u306b\u6b21\u306e\u3088\u3046\u306b\u8a00\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf, by any chance, we need \"just an object\", with no nontrivial supertypes, we can simply say:\n-->\n\n``` kotlin\nval adHoc = object {\n  var x: Int = 0\n  var y: Int = 0\n}\nprint(adHoc.x + adHoc.y)\n```\n\n<!--original\n``` kotlin\nval adHoc = object {\n  var x: Int = 0\n  var y: Int = 0\n}\nprint(adHoc.x + adHoc.y)\n```\n-->\n\n\u305f\u3060\u3001Java\u306e\u7121\u540d\u5185\u90e8\u30af\u30e9\u30b9\u306e\u3088\u3046\u306b\u3001\u5185\u5305\u3059\u308b\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u306e\u30b3\u30fc\u30c9\u304c\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08Java\u306e\u3068\u306f\u9055\u3063\u3066\u3001\u3053\u308c\u306f final \u306e\u5909\u6570\u306b\u9650\u5b9a\u3055\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\uff09\n\n<!--original\nJust like Java's anonymous inner classes, code in object expressions can access variables from the enclosing scope.\n(Unlike Java, this is not restricted to final variables.)\n-->\n\n``` kotlin\nfun countClicks(window: JComponent) {\n  var clickCount = 0\n  var enterCount = 0\n\n  window.addMouseListener(object : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n      clickCount++\n    }\n\n    override fun mouseEntered(e: MouseEvent) {\n      enterCount++\n    }\n  })\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun countClicks(window: JComponent) {\n  var clickCount = 0\n  var enterCount = 0\n\n  window.addMouseListener(object : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) {\n      clickCount++\n    }\n\n    override fun mouseEntered(e: MouseEvent) {\n      enterCount++\n    }\n  })\n  // ...\n}\n```\n-->\n\n## \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\n\n<!--original\n## Object declarations\n-->\n\n[\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3](http://en.wikipedia.org/wiki/Singleton_pattern)\u306f\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3042\u308a\u3001Kotlin\uff08Scala\u306e\u5f8c\u3067\u3059\uff09\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u5bb9\u6613\u306b\u5ba3\u8a00\u3067\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff1a\n\n<!--original\n[Singleton](http://en.wikipedia.org/wiki/Singleton_pattern) is a very useful pattern, and Kotlin (after Scala) makes it easy to declare singletons:\n-->\n\n``` kotlin\nobject DataProviderManager {\n  fun registerDataProvider(provider: DataProvider) {\n    // ...\n  }\n\n  val allDataProviders: Collection<DataProvider>\n    get() = // ...\n}\n```\n- \u3053\u308c\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u3068\u547c\u3070\u308c\u3001\u305d\u308c\u306f\u5e38\u306b object \u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u5f8c\u306b\u540d\u524d\u3092\u6301\u3061\u307e\u3059\u3002\u3061\u3087\u3046\u3069\u5909\u6570\u5ba3\u8a00\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306f\u5f0f\u3067\u306f\u306a\u304f\u3001\u4ee3\u5165\u6587\u306e\u53f3\u5074\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n<!--original\n``` kotlin\nobject DataProviderManager {\n  fun registerDataProvider(provider: DataProvider) {\n    // ...\n  }\n\n  val allDataProviders: Collection<DataProvider>\n    get() = // ...\n}\n```\n-\nThis is called an *object declaration*, and it always has a name following the *object*{: .keyword } keyword.\nJust like a variable declaration, an object declaration is not an expression, and cannot be used on the right hand side of an assignment statement.\n-->\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u306e\u540d\u524d\u3092\u76f4\u63a5\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n<!--original\nTo refer to the object, we use its name directly:\n-->\n\n``` kotlin\nDataProviderManager.registerDataProvider(...)\n```\n\n<!--original\n``` kotlin\nDataProviderManager.registerDataProvider(...)\n```\n-->\n\n\u3053\u306e\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nSuch objects can have supertypes:\n-->\n\n``` kotlin\nobject DefaultListener : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n}\n```\n\n<!--original\n``` kotlin\nobject DefaultListener : MouseAdapter() {\n  override fun mouseClicked(e: MouseEvent) {\n    // ...\n  }\n\n  override fun mouseEntered(e: MouseEvent) {\n    // ...\n  }\n}\n```\n-->\n\n**\u6ce8**\uff1a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff08\u3064\u307e\u308a\u3001\u95a2\u6570\u5185\u3067\u76f4\u63a5\u30cd\u30b9\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u305f\u3060\u3057\u3001\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u307e\u305f\u306f\u975e\u5185\u90e8\u30af\u30e9\u30b9\u306b\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\n**NOTE**: object declarations can't be local (i.e. be nested directly inside a function), but they can be nested into other object declarations or non-inner classes.\n\n-->\n\n### \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (Companion Objects)\n\n<!--original\n### Companion Objects\n-->\n\n\u30af\u30e9\u30b9\u5185\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306f\u3001 *companion*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nAn object declaration inside a class can be marked with the *companion*{: .keyword } keyword:\n-->\n\n``` kotlin\nclass MyClass {\n  companion object Factory {\n    fun create(): MyClass = MyClass()\n  }\n}\n```\n\n<!--original\n``` kotlin\nclass MyClass {\n  companion object Factory {\n    fun create(): MyClass = MyClass()\n  }\n}\n```\n-->\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u4fee\u98fe\u5b50\u3068\u3057\u3066\u5358\u306b\u30af\u30e9\u30b9\u540d\u3092\u4f7f\u7528\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nMembers of the companion object can be called by using simply the class name as the qualifier:\n-->\n\n``` kotlin\nval instance = MyClass.create()\n```\n\n<!--original\n``` kotlin\nval instance = MyClass.create()\n```\n-->\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u540d\u524d\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001 `Companion` \u3068\u3044\u3046\u540d\u524d\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nThe name of the companion object can be omitted, in which case the name `Companion` will be used:\n-->\n\n``` kotlin\nclass MyClass {\n  companion object {\n  }\n}\n\nval x = MyClass.Companion\n```\n\n<!--original\n``` kotlin\nclass MyClass {\n  companion object {\n  }\n}\n\nval x = MyClass.Companion\n```\n-->\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u306f\u3001\u4ed6\u306e\u8a00\u8a9e\u306e\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30e1\u30f3\u30d0\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u884c\u6642\u306b\u306f\u305d\u308c\u3089\u306f\u307e\u3060\u5b9f\u969b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30f3\u30d0\u3067\u3042\u308a\u3001\u305f\u3068\u3048\u3070\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nNote that, even though the members of companion objects look like static members in other languages, at runtime those\nare still instance members of real objects, and can, for example, implement interfaces:\n-->\n\n``` kotlin\ninterface Factory<T> {\n  fun create(): T\n}\n\n\nclass MyClass {\n  companion object : Factory<MyClass> {\n    override fun create(): MyClass = MyClass()\n  }\n}\n```\n\n<!--original\n``` kotlin\ninterface Factory<T> {\n  fun create(): T\n}\n\n\nclass MyClass {\n  companion object : Factory<MyClass> {\n    override fun create(): MyClass = MyClass()\n  }\n}\n```\n-->\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001JVM\u4e0a\u3067\u306f\u3001 `@JvmStatic` \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u3092\u5b9f\u969b\u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[Java\u306e\u76f8\u4e92\u904b\u7528\u6027](java-to-kotlin-interop.html#static-fields)\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nHowever, on the JVM you can have members of companion objects generated as real static methods and fields, if you use\nthe `@JvmStatic` annotation. See the [Java interoperability](java-to-kotlin-interop.html#static-fields) section\nfor more details.\n\n-->\n\n### \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u5ba3\u8a00\u306e\u9593\u306e\u610f\u5473\u306e\u9055\u3044\n\n<!--original\n### Semantic difference between object expressions and declarations\n-->\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u306e\u9593\u306b\u306f\u3001\u3042\u308b\u91cd\u8981\u306a\u610f\u5473\u4e0a\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nThere is one important semantic difference between object expressions and object declarations:\n-->\n\n* \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u306f **\u3059\u3050\u306b** \u5b9f\u884c\u3055\u308c\uff08\u521d\u671f\u5316\u3055\u308c\uff09\u3001\u305d\u3053\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\n* \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00\u306f\u3001\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306b **\u9045\u5ef6\u3057\u3066** \u521d\u671f\u5316\u3055\u308c\u307e\u3059\n* \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u30af\u30e9\u30b9\u304c\u8aad\u307f\u8fbc\u307e\u308c\u305f\uff08\u89e3\u6c7a\uff09\u3055\u308c\u305f\u3068\u304d\u306b\u521d\u671f\u5316\u3055\u308c\u3001\u3053\u308c\u306f Java \u306e\u9759\u7684\u521d\u671f\u5316\u5b50\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u306b\u4e00\u81f4\u3057\u307e\u3059\n\n<!--original\n* object expressions are executed (and initialized) **immediately**, where they are used\n* object declarations are initialized **lazily**, when accessed for the first time\n* a companion object is initialized when the corresponding class is loaded (resolved), matching the semantics of a Java static initializer\n-->\n\n# \u59d4\u8b72 (Delegation)\n\n<!--original\n# Delegation\n-->\n\n## \u30af\u30e9\u30b9\u306e\u59d4\u8b72\n\n<!--original\n## Class Delegation\n-->\n\n[Delegation\u30d1\u30bf\u30fc\u30f3](https://en.wikipedia.org/wiki/Delegation_pattern)\u306f\u3001\u5b9f\u88c5\u7d99\u627f\u306e\u826f\u3044\u4ee3\u66ff\u624b\u6bb5\u3067\u3042\u308b\u3053\u3068\u304c\u8a3c\u660e\u3055\u308c\u3066\u304a\u308a\u3001Kotlin\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u3067\u305d\u308c\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3001\u304b\u3064\u5b9a\u578b\u30b3\u30fc\u30c9\u3092\u5fc5\u8981\u3068\u3057\u307e\u305b\u3093\u3002\n`Derivced` \u30af\u30e9\u30b9\u306f\u3001 `Base` \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u7d99\u627f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e public \u30e1\u30bd\u30c3\u30c9\u306e\u3059\u3079\u3066\u3092\u59d4\u8b72\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe [Delegation pattern](https://en.wikipedia.org/wiki/Delegation_pattern) has proven to be a good alternative to implementation inheritance,\nand Kotlin supports it natively requiring zero boilerplate code.\nA class `Derived` can inherit from an interface `Base` and delegate all of its public methods to a specified object:\n-->\n\n``` kotlin\ninterface Base {\n  fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n  override fun print() { print(x) }\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>) {\n  val b = BaseImpl(10)\n  Derived(b).print() // \u51fa\u529b\uff1a10\n}\n```\n\n<!--original\n``` kotlin\ninterface Base {\n  fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n  override fun print() { print(x) }\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main(args: Array<String>) {\n  val b = BaseImpl(10)\n  Derived(b).print() // prints 10\n}\n```\n-->\n\n`Derived` \u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u30ea\u30b9\u30c8\u4e2d\u306e *by*{:.keyword} \u7bc0\u306f\u3001 `b` \u304c `Derived` \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5185\u90e8\u7684\u306b\u683c\u7d0d\u3055\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f `b` \u306b\u53d6\u308a\u6b21\u3050 `Base` \u306e\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n<!--original\nThe *by*{: .keyword }-clause in the supertype list for `Derived` indicates that `b` will be stored internally in objects of `Derived`\nand the compiler will generate all the methods of `Base` that forward to `b`.\n\n-->\n\n# \u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (Delegated Properties)\n\n<!--original\n# Delegated Properties\n-->\n\n\u5fc5\u8981\u306a\u3068\u304d\u306b\u624b\u52d5\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u4e00\u5ea6\u5b9f\u88c5\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u975e\u5e38\u306b\u3046\u308c\u3057\u3044\u3068\u3044\u3063\u305f\u3001\u3042\u308b\u7a2e\u306e\u3088\u304f\u3042\u308b\u4e00\u822c\u7684\u306a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3042\u308a\u307e\u3059\u3002\u4f8b\u3068\u3057\u3066\u306f\u3001\n\n<!--original\nThere are certain common kinds of properties, that, though we can implement them manually every time we need them, \nwould be very nice to implement once and for all, and put into a library. Examples include\n-->\n\n* \u9045\u5ef6\u30d7\u30ed\u30d1\u30c6\u30a3 (lazy properties) \uff1a\u5024\u306f\u6700\u521d\u306e\u30a2\u30af\u30bb\u30b9\u6642\u306b\u521d\u3081\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\n* \u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb\u30d7\u30ed\u30d1\u30c6\u30a3 (observable properties) \uff1a\u30ea\u30b9\u30ca\u304c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5909\u66f4\u306b\u95a2\u3059\u308b\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\n* \u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u306f\u5206\u304b\u308c\u3066\u3044\u306a\u3044\u3001map\u5185\u3067\u306e\u30b9\u30c8\u30ed\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (strong properties)\n\n<!--original\n* lazy properties: the value gets computed only upon first access,\n* observable properties: listeners get notified about changes to this property,\n* storing properties in a map, not in separate field each.\n-->\n\n\u3053\u308c\u3089\uff08\u304a\u3088\u3073\u305d\u306e\u4ed6\uff09\u306e\u30b1\u30fc\u30b9\u3092\u30ab\u30d0\u30fc\u3059\u308b\u305f\u3081\u306b\u3001Kotlin\u306f\u3001 _\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (delegated properties)_ \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nTo cover these (and other) cases, Kotlin supports _delegated properties_:\n-->\n\n``` kotlin\nclass Example {\n  var p: String by Delegate()\n}\n```\n\n<!--original\n``` kotlin\nclass Example {\n  var p: String by Delegate()\n}\n```\n-->\n\n\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059 `val/var <property name>: <Type> by <expression>`\n`get()` \uff08\u3068 `set()` \uff09\u306f\u305d\u306e `getValue()` \u304a\u3088\u3073 `setValue()` \u30e1\u30bd\u30c3\u30c9\u306b\u59d4\u8b72\u3055\u308c\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001 `by` \u306e\u5f8c\u306b\u7d9a\u304f\u5f0f\u306f\u3001 _\u59d4\u8b72 (delegate)_ \u3067\u3059\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u59d4\u8b72\u306b\u306f\u3001\u4efb\u610f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 `getValue()` \u95a2\u6570\uff08\u305d\u3057\u3066 `setValue()` --- *var*{:.keyword}\u7528\u306b\uff09\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nThe syntax is: `val/var <property name>: <Type> by <expression>`. The expression after *by*{:.keyword} is the _delegate_, \nbecause `get()` (and `set()`) corresponding to the property will be delegated to its `getValue()` and `setValue()` methods.\nProperty delegates don\u2019t have to implement any interface, but they have to provide a `getValue()` function (and `setValue()` --- for *var*{:.keyword}'s).\nFor example:\n-->\n\n``` kotlin\nclass Delegate {\n  operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n    return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n  }\n \n  operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n    println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n  }\n}\n```\n\n<!--original\n``` kotlin\nclass Delegate {\n  operator fun getValue(thisRef: Any?, property: KProperty<*>): String {\n    return \"$thisRef, thank you for delegating '${property.name}' to me!\"\n  }\n \n  operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {\n    println(\"$value has been assigned to '${property.name} in $thisRef.'\")\n  }\n}\n```\n-->\n\nDelegate \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3067\u3042\u308b `p` \u3092\u8aad\u307f\u8fbc\u3080\u3068\u304d\u3001 `Delegate` \u306e`getValue()` \u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u305d\u306e\u6700\u521d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 `p` \u3092\u8aad\u307f\u53d6\u308b\u5148\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u30012\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 `p` \u81ea\u4f53\u306e\u8aac\u660e\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001\u3042\u306a\u305f\u304c\u305d\u306e\u540d\u524d\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nWhen we read from `p` that delegates to an instance of `Delegate`, the `getValue()` function from `Delegate` is called,\nso that its first parameter is the object we read `p` from and the second parameter holds a description of `p` itself \n(e.g. you can take its name). For example:\n-->\n\n``` kotlin\nval e = Example()\nprintln(e.p)\n```\n\n<!--original\n``` kotlin\nval e = Example()\nprintln(e.p)\n```\n-->\n\n\u3053\u308c\u306f\u6b21\u306e\u901a\u308a\u51fa\u529b\u3057\u307e\u3059\n\n<!--original\nThis prints \n-->\n\n```\nExample@33a17727, thank you for delegating \u2018p\u2019 to me!\n```\n\n<!--original\n```\nExample@33a17727, thank you for delegating \u2018p\u2019 to me!\n```\n-->\n \n`p` \u306b\u4ee3\u5165\u3059\u308b\u306e\u3068\u540c\u69d8\u306b\u3001`setValue()` \u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u6700\u521d\u306e2\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u540c\u3058\u3067\u3042\u308a\u30013\u3064\u76ee\u306f\u3001\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u5024\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n<!--original\nSimilarly, when we assign to `p`, the `setValue()` function is called. The first two parameters are the same, and the third holds the value being assigned:\n-->\n\n``` kotlin\ne.p = \"NEW\"\n```\n\n<!--original\n``` kotlin\ne.p = \"NEW\"\n```\n-->\n\n\u3053\u308c\u306f\u6b21\u306e\u901a\u308a\u51fa\u529b\u3057\u307e\u3059\n\n<!--original\nThis prints\n-->\n \n```\nNEW has been assigned to \u2018p\u2019 in Example@33a17727.\n```\n\n<!--original\n```\nNEW has been assigned to \u2018p\u2019 in Example@33a17727.\n```\n-->\n\n## \u30d7\u30ed\u30d1\u30c6\u30a3\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u8981\u4ef6\n\n<!--original\n## Property Delegate Requirements\n-->\n\n\u3053\u3053\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u59d4\u8b72\u3059\u308b\u305f\u3081\u306e\u8981\u4ef6\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n<!--original\nHere we summarize requirements to delegate objects. \n-->\n\n**\u8aad\u307f\u53d6\u308a\u5c02\u7528**\u30d7\u30ed\u30d1\u30c6\u30a3\uff08\u3059\u306a\u308f\u3061 *val*{:.keyword}\uff09\u306e\u305f\u3081\u306b\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306f\u3001\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308b `getValue` \u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nFor a **read-only** property (i.e. a *val*{:.keyword}), a delegate has to provide a function named `getValue` that takes the following parameters:\n-->\n\n* \u30ec\u30b7\u30fc\u30d0 --- _\u30d7\u30ed\u30d1\u30c6\u30a3\u6240\u6709\u8005_ \u306e\u3082\u306e\u3068\u540c\u3058\u304b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff08\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u30fc --- \u62e1\u5f35\u3055\u308c\u308b\u30bf\u30a4\u30d7\u306e\u5834\u5408\uff09\u3002\n* \u30e1\u30bf\u30c7\u30fc\u30bf --- \u578b `KProperty <*>`\u307e\u305f\u306f\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n<!--original\n* receiver --- must be the same or a supertype of the _property owner_ (for extension properties --- the type being extended),\n* metadata --- must be of type `KProperty<*>` or its supertype,\n-->\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\uff08\u307e\u305f\u306f\u305d\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\uff09\u3068\u540c\u3058\u578b\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nthis function must return the same type as property (or its subtype).\n-->\n\n**\u5909\u66f4\u53ef\u80fd\u306a** \u30d7\u30ed\u30d1\u30c6\u30a3 ( *var*{:.keyword} ) \u306e\u5834\u5408\u3001\u30c7\u30ea\u30b2\u30fc\u30c8\u306f\u3001\u3055\u3089\u306b\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308a `setValue` \u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3092 _\u8ffd\u52a0\u3067_ \u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nFor a **mutable** property (a *var*{:.keyword}), a delegate has to _additionally_ provide a function named `setValue` that takes the following parameters:\n-->\n \n* \u30ec\u30b7\u30fc\u30d0 --- `getValue()` \u3068\u540c\u3058\n* \u30e1\u30bf\u30c7\u30fc\u30bf --- `getValue()` \u3068\u540c\u3058\n* \u65b0\u3057\u3044\u5024 --- \u30d7\u30ed\u30d1\u30c6\u30a3\u307e\u305f\u306f\u305d\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3068\u540c\u3058\u30bf\u30a4\u30d7\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n<!--original\n* receiver --- same as for `getValue()`,\n* metadata --- same as for `getValue()`,\n* new value --- must be of the same type as a property or its supertype.\n-->\n \n`getValue()` \u304a\u3088\u3073/\u307e\u305f\u306f `setValue()` \u95a2\u6570\u306f\u3001\u3044\u305a\u308c\u304b\u306e\u59d4\u8b72\u30af\u30e9\u30b9\u3084\u62e1\u5f35\u6a5f\u80fd\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u59d4\u8b72\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u5f8c\u8005\u304c\u4fbf\u5229\u3067\u3059\u3002\u95a2\u6570\u306e\u4e21\u65b9\u3092 `operator` \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\n`getValue()` and/or `setValue()` functions may be provided either as member functions of the delegate class or extension functions.\nThe latter is handy when you need to delegate property to an object which doesn't originally provide these functions.\nBoth of the functions need to be marked with the `operator` keyword.\n\n## \u6a19\u6e96\u30c7\u30ea\u30b2\u30fc\u30c8\n\n<!--original\n## Standard Delegates\n-->\n\nKotlin\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6709\u7528\u306a\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n<!--original\nThe Kotlin standard library provides factory methods for several useful kinds of delegates.\n-->\n\n### \u9045\u5ef6 (lazy)\n\n<!--original\n### Lazy\n-->\n\n`lazy()` \u306f\u30e9\u30e0\u30c0\u3092\u3068\u308a\u3001\u9045\u5ef6\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b `Lazy<T>` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002`get()` \u306e\u6700\u521d\u306e\u547c\u3073\u51fa\u3057\u306f `lazy()` \u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 \u305d\u308c\u4ee5\u964d\u3001`get()` \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u5358\u306b\u8a18\u61b6\u3055\u308c\u305f\u7d50\u679c\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n<!--original\n`lazy()` is a function that takes a lambda and returns an instance of `Lazy<T>` which can serve as a delegate for implementing a lazy property:\nthe first call to `get()` executes the lambda passed to `lazy()` and remembers the result, \nsubsequent calls to `get()` simply return the remembered result. \n-->\n\n``` kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n\n<!--original\n``` kotlin\nval lazyValue: String by lazy {\n    println(\"computed!\")\n    \"Hello\"\n}\n\nfun main(args: Array<String>) {\n    println(lazyValue)\n    println(lazyValue)\n}\n```\n-->\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u9045\u5ef6\u7279\u6027\u306e\u8a55\u4fa1\u304c **\u540c\u671f\u3055\u308c\u307e\u3059** \u3002\u5024\u306f1\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u3058\u5024\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3082\u3057\u521d\u671f\u5316\u30c7\u30ea\u30b2\u30fc\u30c8\u306e\u540c\u671f\u304c\u5fc5\u8981\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u3001 \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u6642\u306b\u521d\u671f\u5316\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b `LazyThreadSafetyMode.PUBLICATION` \u3092 `lazy()` \u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\u521d\u671f\u5316\u304c\u5e38\u306b\u5358\u4e00\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8d77\u3053\u308b\u3068\u78ba\u4fe1\u3057\u3066\u3044\u308b\u306a\u3089\u3001\u4efb\u610f\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b89\u5168\u6027\u306e\u4fdd\u8a3c\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3057\u306a\u3044 `LazyThreadSafetyMode.NONE` \u30e2\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nBy default, the evaluation of lazy properties is **synchronized**: the value is computed only in one thread, and all threads\nwill see the same value. If the synchronization of initialization delegate is not required, so that multiple threads\ncan execute it simultaneously, pass `LazyThreadSafetyMode.PUBLICATION` as a parameter to the `lazy()` function. \nAnd if you're sure that the initialization will always happen on a single thread, you can use `LazyThreadSafetyMode.NONE` mode, \nwhich doesn't incur any thread-safety guarantees and the related overhead.\n\n-->\n\n### \u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb (Observable)\n\n<!--original\n### Observable\n-->\n\n`Delegates.observable()` \u306f\u30012\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\u307e\u3059\u3002\u521d\u671f\u5024\u3068\u4fee\u6b63\u306e\u305f\u3081\u306e\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\u30cf\u30f3\u30c9\u30e9\u306f\uff08\u5272\u308a\u5f53\u3066\u304c\u884c\u308f\u308c\u305f _\u5f8c_ \u306b\uff09\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5272\u308a\u5f53\u3066\u308b\u305f\u3073\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u306b\u306f3\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u3001\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3001\u53e4\u3044\u5024\u3001\u305d\u3057\u3066\u65b0\u3057\u3044\u5024\u3067\u3059\uff1a\n\n<!--original\n`Delegates.observable()` takes two arguments: the initial value and a handler for modifications.\nThe handler gets called every time we assign to the property (_after_ the assignment has been performed). It has three\nparameters: a property being assigned to, the old value and the new one:\n-->\n\n``` kotlin\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"<no name>\") {\n        prop, old, new ->\n        println(\"$old -> $new\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n```\n\n<!--original\n``` kotlin\nimport kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(\"<no name>\") {\n        prop, old, new ->\n        println(\"$old -> $new\")\n    }\n}\n\nfun main(args: Array<String>) {\n    val user = User()\n    user.name = \"first\"\n    user.name = \"second\"\n}\n```\n-->\n\n\u3053\u306e\u4f8b\u306e\u51fa\u529b\uff1a\n\n<!--original\nThis example prints\n-->\n\n```\n<no name> -> first\nfirst -> second\n```\n\n<!--original\n```\n<no name> -> first\nfirst -> second\n```\n-->\n\n\u3082\u3057\u4ee3\u5165\u3092\u508d\u53d7\u3057\u3001\u305d\u308c\u306b\u5bfe\u3057 \u300c\u62d2\u5426\u6a29\u300d\u3092\u767a\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001observable() \u306e\u4ee3\u308f\u308a\u306b `vetoable()` \u3092\u4f7f\u3044\u307e\u3059\u3002 `vetoable` \u306b\u6e21\u3055\u308c\u305f\u30cf\u30f3\u30c9\u30e9\u306f\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u5272\u308a\u5f53\u3066\u304c\u884c\u308f\u308c\u308b _\u524d_ \u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nIf you want to be able to intercept an assignment and \"veto\" it, use `vetoable()` instead of `observable()`.\nThe handler passed to the `vetoable` is called _before_ the assignment of a new property value has been performed.\n-->\n\n## Map \u4e2d\u306e\u30b9\u30c8\u30a2\u30ea\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (Storing Properties in a Map)\n\n<!--original\n## Storing Properties in a Map\n-->\n\n\u4e00\u822c\u7684\u306a\u4f7f\u7528\u4f8b\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u3001map \u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3092\u8a18\u61b6\u3059\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u306fJSON\u3092\u30d1\u30fc\u30b9\u3057\u305f\u308a\u3001\u4ed6\u306e\u300c\u52d5\u7684\u300d\u306a\u3053\u3068\u3092\u3084\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u983b\u7e41\u306b\u8d77\u3053\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u3001\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3057\u3066 map \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u81ea\u4f53\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nOne common use case is storing the values of properties in a map.\nThis comes up often in applications like parsing JSON or doing other \u201cdynamic\u201d things.\nIn this case, you can use the map instance itself as the delegate for a delegated property.\n-->\n\n``` kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n```\n\n<!--original\n``` kotlin\nclass User(val map: Map<String, Any?>) {\n    val name: String by map\n    val age: Int     by map\n}\n```\n-->\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001 map \u3092\u53d6\u308a\u307e\u3059\u3002\n\n<!--original\nIn this example, the constructor takes a map:\n-->\n\n``` kotlin\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\n```\n\n<!--original\n``` kotlin\nval user = User(mapOf(\n    \"name\" to \"John Doe\",\n    \"age\"  to 25\n))\n```\n-->\n\n\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u3053\u306e\u30de\u30c3\u30d7\u304b\u3089\uff08\u6587\u5b57\u5217 --- \u3053\u306e\u5834\u5408\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u540d\u524d --- \u306e\u30ad\u30fc\u3092\u4f7f\u3063\u3066\uff09\u5024\u3092\u53d6\u308a\u307e\u3059\uff1a\n\n<!--original\nDelegated properties take values from this map (by the string keys --- names of properties):\n\n-->\n\n``` kotlin\nprintln(user.name) // \u51fa\u529b\uff1a\"John Doe\"\nprintln(user.age)  // \u51fa\u529b\uff1a25\n```\n\n<!--original\n``` kotlin\nprintln(user.name) // Prints \"John Doe\"\nprintln(user.age)  // Prints 25\n```\n-->\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528 `Map` \u306e\u4ee3\u308f\u308a\u306b `MutableMap` \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3053\u308c\u306f *var*{:.keyword} \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u3057\u3066\u3082\u52d5\u4f5c\u3057\u307e\u3059\uff1a\n\n<!--original\nThis works also for *var*{:.keyword}\u2019s properties if you use a `MutableMap` instead of read-only `Map`:\n-->\n\n``` kotlin\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n```\n\n<!--original\n``` kotlin\nclass MutableUser(val map: MutableMap<String, Any?>) {\n    var name: String by map\n    var age: Int     by map\n}\n```\n-->\n\n# \u95a2\u6570\n\n<!--original\n# Functions\n-->\n\n## \u95a2\u6570\u306e\u5ba3\u8a00\n\n<!--original\n## Function Declarations\n-->\n\nKotlin\u306e\u95a2\u6570\u306f *fun*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nFunctions in Kotlin are declared using the *fun*{: .keyword } keyword\n-->\n\n``` kotlin\nfun double(x: Int): Int {\n}\n```\n\n<!--original\n``` kotlin\nfun double(x: Int): Int {\n}\n```\n-->\n\n## \u95a2\u6570\u306e\u4f7f\u3044\u65b9\n\n<!--original\n## Function Usage\n-->\n\n\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u4f1d\u7d71\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nCalling functions uses the traditional approach\n-->\n\n``` kotlin\nval result = double(2)\n```\n\n\n<!--original\n``` kotlin\nval result = double(2)\n```\n\n-->\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u30c9\u30c3\u30c8\u8868\u8a18\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n<!--original\nCalling member functions uses the dot notation\n-->\n\n``` kotlin\nSample().foo() // Sample\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066foo\u3092\u547c\u3076\n```\n\n<!--original\n``` kotlin\nSample().foo() // create instance of class Sample and calls foo\n```\n-->\n\n### \u4e2d\u7f6e\u8a18\u6cd5\n\n<!--original\n### Infix notation\n-->\n\n\u6b21\u306e\u3088\u3046\u306a\u3068\u304d\u3001\u4e2d\u7f6e\u8868\u8a18\u6cd5 (infix notations) \u3092\u4f7f\u7528\u3057\u3066\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nFunctions can also be called using infix notations when\n-->\n\n* \u30e1\u30f3\u30d0\u95a2\u6570\u3084[\u62e1\u5f35\u95a2\u6570](extensions.html)\u3067\u3042\u308b\u3068\u304d\n* \u5358\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u304d\n* `infix` \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n\n<!--original\n* They are member functions or [extension functions](extensions.html)\n* They have a single parameter\n* They are marked with the `infix` keyword\n-->\n\n``` kotlin\n// Int\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\ninfix fun Int.shl(x: Int): Int {\n...\n}\n\n// \u62e1\u5f35\u95a2\u6570\u3092 infix \u30ce\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u547c\u3076\n\n1 shl 2\n\n// \u3053\u308c\u306f\u6b21\u3068\u540c\u3058\n\n1.shl(2)\n```\n\n<!--original\n``` kotlin\n// Define extension to Int\ninfix fun Int.shl(x: Int): Int {\n...\n}\n\n// call extension function using infix notation\n\n1 shl 2\n\n// is the same as\n\n1.shl(2)\n```\n-->\n\n### \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n\n<!--original\n### Parameters\n-->\n\n\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30d1\u30b9\u30ab\u30eb\u8a18\u6cd5\u3001\u3059\u306a\u308f\u3061 *\u540d\u524d*: *\u30bf\u30a4\u30d7* \u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ab\u30f3\u30de\u3092\u4f7f\u7528\u3057\u3066\u5206\u96e2\u3055\u308c\u307e\u3059\u3002\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u660e\u793a\u7684\u306b\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nFunction parameters are defined using Pascal notation, i.e. *name*: *type*. Parameters are separated using commas. Each parameter must be explicitly typed.\n-->\n\n``` kotlin\nfun powerOf(number: Int, exponent: Int) {\n...\n}\n```\n\n<!--original\n``` kotlin\nfun powerOf(number: Int, exponent: Int) {\n...\n}\n```\n-->\n\n### \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5f15\u6570\n\n<!--original\n### Default Arguments\n-->\n\n\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u5bfe\u5fdc\u3059\u308b\u5f15\u6570\u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u3082\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4ed6\u8a00\u8a9e\u306b\u6bd4\u3079\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u6570\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nFunction parameters can have default values, which are used when a corresponding argument is omitted. This allows for a reduced number of overloads compared to\nother languages.\n-->\n\n``` kotlin\nfun read(b: Array<Byte>, off: Int = 0, len: Int = b.size()) {\n...\n}\n```\n\n<!--original\n``` kotlin\nfun read(b: Array<Byte>, off: Int = 0, len: Int = b.size()) {\n...\n}\n```\n-->\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u5024\u3068\u5171\u306b\u8a18\u8ff0\u3057\u305f\u5f8c\u306b **=** \u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nDefault values are defined using the **=** after type along with the value.\n-->\n\n\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5e38\u306b\u30d9\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u306f\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304b\u3089\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nOverriding methods always use the same default parameter values as the base method.\nWhen overriding a method with default parameters values, the default parameter values must be omitted from the signature:\n-->\n\n``` kotlin\nopen class A {\n    open fun foo(i: Int = 10) { ... }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { ... }  // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\n}\n```\n\n<!--original\n``` kotlin\nopen class A {\n    open fun foo(i: Int = 10) { ... }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { ... }  // no default value allowed\n}\n```\n-->\n\n### \u540d\u524d\u4ed8\u304d\u5f15\u6570\n\n<!--original\n### Named Arguments\n-->\n\n\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u3001\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u95a2\u6570\u304c\u6ca2\u5c71\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3084\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u5834\u5408\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n<!--original\nFunction parameters can be named when calling functions. This is very convenient when a function has a high number of parameters or default ones.\n-->\n\n\u6b21\u306e\u95a2\u6570\u3092\u8003\u3048\u307e\u3059\uff1a\n\n<!--original\nGiven the following function\n-->\n\n``` kotlin\nfun reformat(str: String,\n             normalizeCase: Boolean = true,\n             upperCaseFirstLetter: Boolean = true,\n             divideByCamelHumps: Boolean = false,\n             wordSeparator: Char = ' ') {\n...\n}\n```\n\n<!--original\n``` kotlin\nfun reformat(str: String,\n             normalizeCase: Boolean = true,\n             upperCaseFirstLetter: Boolean = true,\n             divideByCamelHumps: Boolean = false,\n             wordSeparator: Char = ' ') {\n...\n}\n```\n-->\n\n\u79c1\u305f\u3061\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u3053\u308c\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nwe could call this using default arguments\n-->\n\n``` kotlin\nreformat(str)\n```\n\n<!--original\n``` kotlin\nreformat(str)\n```\n-->\n\n\u3057\u304b\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u7121\u3044\u5834\u5408\u306f\u305d\u308c\u306e\u547c\u3073\u51fa\u3057\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\nHowever, when calling it with non-default, the call would look something like\n-->\n\n``` kotlin\nreformat(str, true, true, false, '_')\n```\n\n<!--original\n``` kotlin\nreformat(str, true, true, false, '_')\n```\n-->\n\n\u540d\u524d\u4ed8\u304d\u5f15\u6570\u3067\u3001\u30b3\u30fc\u30c9\u3092\u306f\u308b\u304b\u306b\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nWith named arguments we can make the code much more readable\n-->\n\n``` kotlin\nreformat(str,\n    normalizeCase = true,\n    upperCaseFirstLetter = true,\n    divideByCamelHumps = false,\n    wordSeparator = '_'\n  )\n```\n\n<!--original\n``` kotlin\nreformat(str,\n    normalizeCase = true,\n    upperCaseFirstLetter = true,\n    divideByCamelHumps = false,\n    wordSeparator = '_'\n  )\n```\n-->\n\n\u3059\u3079\u3066\u306e\u5f15\u6570\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u5834\u5408\uff1a\n\n<!--original\nand if we do not need all arguments\n-->\n\n``` kotlin\nreformat(str, wordSeparator = '_')\n```\n\n<!--original\n``` kotlin\nreformat(str, wordSeparator = '_')\n```\n-->\n\nJava\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306f\u5e38\u306b\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u3092\u4fdd\u5b58\u3057\u306a\u3044\u305f\u3081\u3001Java\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u540d\u524d\u4ed8\u304d\u5f15\u6570\u69cb\u6587\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that the named argument syntax cannot be used when calling Java functions, because Java bytecode does not\nalways preserve names of function parameters.\n\n-->\n\n### Unit \u3092\u8fd4\u3059\u95a2\u6570\n\n<!--original\n### Unit-returning functions\n-->\n\n\u95a2\u6570\u304c\u4efb\u610f\u306e\u6709\u7528\u306a\u5024\u3092\u8fd4\u3055\u306a\u3044\u5834\u5408\u3001\u305d\u306e\u623b\u308a\u5024\u306e\u578b\u306f `Unit` \u3067\u3059\u3002 `Unit` \u306f\u3001\u552f\u4e00\u306e\u5024 ( `Unit` ) \u3060\u3051\u3092\u6301\u3064\u578b\u3067\u3059\u3002\n\u3053\u306e\u5024\u306f\u3001\u660e\u793a\u7684\u306b return \u3055\u308c\u306a\u304f\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\uff1a\n\n<!--original\nIf a function does not return any useful value, its return type is `Unit`. `Unit` is a type with only one value - `Unit`. This\nvalue does not have to be returned explicitly\n-->\n\n``` kotlin\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` \u307e\u305f\u306f `return` \u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\n}\n```\n\n<!--original\n``` kotlin\nfun printHello(name: String?): Unit {\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` or `return` is optional\n}\n```\n-->\n\n`Unit` \u306e\u623b\u308a\u578b\u306e\u5ba3\u8a00\u3082\u4efb\u610f\u3067\u3059\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\n\n<!--original\nThe `Unit` return type declaration is also optional. The above code is equivalent to\n-->\n\n``` kotlin\nfun printHello(name: String?) {\n    ...\n}\n```\n\n<!--original\n``` kotlin\nfun printHello(name: String?) {\n    ...\n}\n```\n-->\n\n### \u5358\u4e00\u5f0f\u95a2\u6570\n\n<!--original\n### Single-Expression functions\n-->\n\n\u95a2\u6570\u306f\u3001\u5358\u4e00\u306e\u5f0f\u3092\u8fd4\u3059\u3068\u4e2d\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u672c\u4f53\u306f **=** \u8a18\u53f7\u306e\u5f8c\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nWhen a function returns a single expression, the curly braces can be omitted and the body is specified after a **=** symbol\n-->\n\n``` kotlin\nfun double(x: Int): Int = x * 2\n```\n\n<!--original\n``` kotlin\nfun double(x: Int): Int = x * 2\n```\n-->\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6642\u306b\u306f\u3001\u660e\u793a\u7684\u306a\u623b\u308a\u5024\u306e\u578b\u306e\u5ba3\u8a00\u306f\u4efb\u610f\u3067\u3059\uff1a\n\n<!--original\nExplicitly declaring the return type is [optional](#explicit-return-types) when this can be inferred by the compiler\n-->\n\n``` kotlin\nfun double(x: Int) = x * 2\n```\n\n<!--original\n``` kotlin\nfun double(x: Int) = x * 2\n```\n-->\n\n### \u660e\u793a\u7684\u306a\u623b\u308a\u5024\u306e\u578b\n\n<!--original\n### Explicit return types\n-->\n\n`Unit` \u3092\u8fd4\u3059\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\u9650\u308a\u3001\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3092\u6301\u3064\u95a2\u6570\u306f\u3001\u305d\u308c\u304c\u4efb\u610f\u3067\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5e38\u306b\u660e\u793a\u7684\u306b\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Kotlin\u306f\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3068\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306f\u672c\u4f53\u5185\u306b\u8907\u96d1\u306a\u5236\u5fa1\u30d5\u30ed\u30fc\u3092\u3082\u3064\u3053\u3068\u304c\u3042\u308a\u3001\u623b\u308a\u5024\u306e\u578b\u304c\u8aad\u307f\u624b\uff08\u6642\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\uff09\u306b\u81ea\u660e\u3067\u306f\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n<!--original\nFunctions with block body must always specify return types explicitly, unless it's intended for them to return `Unit`, [in which case it is optional](#unit-returning-functions).\nKotlin does not infer return types for functions with block bodies because such functions may have complex control flow in the body, and the return\ntype will be non-obvious to the reader (and sometimes even for the compiler). \n\n-->\n\n### \u53ef\u5909\u9577\u5f15\u6570\uff08\u53ef\u5909\u5f15\u6570, Varargs\uff09\n\n<!--original\n### Variable number of arguments (Varargs)\n-->\n\n\u95a2\u6570\uff08\u901a\u5e38\u306f\u6700\u5f8c\u306e\u3072\u3068\u3064\uff09\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001 `vararg` \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nA parameter of a function (normally the last one) may be marked with `vararg` modifier:\n-->\n\n``` kotlin\nfun <T> asList(vararg ts: T): List<T> {\n  val result = ArrayList<T>()\n  for (t in ts) // ts \u306f\u914d\u5217\n    result.add(t)\n  return result\n}\n```\n\n<!--original\n``` kotlin\nfun <T> asList(vararg ts: T): List<T> {\n  val result = ArrayList<T>()\n  for (t in ts) // ts is an Array\n    result.add(t)\n  return result\n}\n```\n-->\n\n\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u53ef\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nallowing a variable number of arguments to be passed to the function:\n-->\n\n```kotlin\n  val list = asList(1, 2, 3)\n```\n\n<!--original\n```kotlin\n  val list = asList(1, 2, 3)\n```\n-->\n\n\u95a2\u6570\u306e\u4e2d\u3067\u306f\u3001 `T` \u578b\u306e `vararg` \u3092\u3064\u3051\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f `T` \u306e\u914d\u5217\u3068\u3057\u3066\u898b\u3048\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u524d\u8ff0\u4f8b\u3067\u306e `ts` \u5909\u6570\u306f `Array<out T>` \u578b\u3092\u6301\u3061\u307e\u3059\u3002\n\n<!--original\nInside a function a `vararg`-parameter of type `T` is visible as an array of `T`, i.e. the `ts` variable in the example above has type `Array<out T>`.\n-->\n\n\u552f\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c `vararg` \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 `vararg` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5909\u6570\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306e\u3072\u3068\u3064\u3067\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u540d\u524d\u4ed8\u304d\u5f15\u6570\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u3001\u307e\u305f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u6570\u578b\u3092\u3082\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u62ec\u5f27\u306e\u5916\u3067\u30e9\u30e0\u30c0\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306b\u304a\u3051\u308b\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \n\n<!--original\nOnly one parameter may be marked as `vararg`. If a `vararg` parameter is not the last one in the list, values for the\nfollowing parameters can be passed using the named argument syntax, or, if the parameter has a function type, by passing\na lambda outside parentheses.\n-->\n\n`vararg` \u3092\u3082\u3064\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u3001\u4f8b\u3048\u3070 `asList(1, 2, 3)` \u306e\u3088\u3046\u306b\u3001\u4e00\u3064\u305a\u3064\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u3059\u3067\u306b\u914d\u5217\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u95a2\u6570\u306b\u305d\u306e\u5185\u5bb9\u3092\u6e21\u3057\u305f\u3044\u5834\u5408\u306f\u3001\uff08 * \u3092\u914d\u5217\u540d\u306e\u63a5\u982d\u8f9e\u306b\u3059\u308b\uff09 **spread** \u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\n\n<!--original\nWhen we call a `vararg`-function, we can pass arguments one-by-one, e.g. `asList(1, 2, 3)`, or, if we already have an array\n and want to pass its contents to the function, we use the **spread** operator (prefix the array with `*`):\n-->\n\n```kotlin\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n```\n\n<!--original\n```kotlin\nval a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n```\n-->\n\n## \u95a2\u6570\u306e\u30b9\u30b3\u30fc\u30d7\n\n<!--original\n## Function Scope\n-->\n\nKotlin\u3067\u306f\u3001\u95a2\u6570\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002Java\u3084C#, Scala\u306a\u3069\u306e\u8a00\u8a9e\u3068\u540c\u3058\u3088\u3046\u306b\u3002\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u306b\u52a0\u3048\u3066\u3001Kotlin\u306e\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u6a5f\u80fd\u3068\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIn Kotlin functions can be declared at top level in a file, meaning you do not need to create a class to hold a function, like languages such as Java, C# or Scala. In addition\nto top level functions, Kotlin functions can also be declared local, as member functions and extension functions.\n-->\n\n### \u30ed\u30fc\u30ab\u30eb\u95a2\u6570\n\n<!--original\n### Local Functions\n-->\n\nKotlin\u306f\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u3001\u3059\u306a\u308f\u3061\u3001\u3042\u308b\u95a2\u6570\u5185\u306e\u5225\u306e\u95a2\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nKotlin supports local functions, i.e. a function inside another function\n-->\n\n``` kotlin\nfun dfs(graph: Graph) {\n  fun dfs(current: Vertex, visited: Set<Vertex>) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v, visited)\n  }\n\n  dfs(graph.vertices[0], HashSet())\n}\n```\n\n<!--original\n``` kotlin\nfun dfs(graph: Graph) {\n  fun dfs(current: Vertex, visited: Set<Vertex>) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v, visited)\n  }\n\n  dfs(graph.vertices[0], HashSet())\n}\n```\n-->\n\n\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306f\u3001\u5916\u5074\u306e\u95a2\u6570\uff08\u3059\u306a\u308f\u3061\u30af\u30ed\u30fc\u30b8\u30e3\uff09\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e0a\u8a18\u306e\u5834\u5408\u306b\u306f\u3001 visited \u3092\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nLocal function can access local variables of outer functions (i.e. the closure), so in the case above, the *visited* can be a local variable\n-->\n\n``` kotlin\nfun dfs(graph: Graph) {\n  val visited = HashSet<Vertex>()\n  fun dfs(current: Vertex) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v)\n  }\n\n  dfs(graph.vertices[0])\n}\n```\n\n<!--original\n``` kotlin\nfun dfs(graph: Graph) {\n  val visited = HashSet<Vertex>()\n  fun dfs(current: Vertex) {\n    if (!visited.add(current)) return\n    for (v in current.neighbors)\n      dfs(v)\n  }\n\n  dfs(graph.vertices[0])\n}\n```\n-->\n\n### \u30e1\u30f3\u30d0\u95a2\u6570\n\n<!--original\n### Member Functions\n-->\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u3001\u30af\u30e9\u30b9\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\n\n<!--original\nA member function is a function that is defined inside a class or object\n-->\n\n``` kotlin\nclass Sample() {\n  fun foo() { print(\"Foo\") }\n}\n```\n\n<!--original\n``` kotlin\nclass Sample() {\n  fun foo() { print(\"Foo\") }\n}\n```\n-->\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u3001\u30c9\u30c3\u30c8\u8868\u8a18\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nMember functions are called with dot notation\n-->\n\n``` kotlin\nSample().foo() // Sample\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u3001 foo \u3092\u547c\u3076\n```\n\n<!--original\n``` kotlin\nSample().foo() // creates instance of class Sample and calls foo\n```\n-->\n\n\u30af\u30e9\u30b9\u304a\u3088\u3073\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u30e1\u30f3\u30d0\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30af\u30e9\u30b9\u3068\u7d99\u627f \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nFor more information on classes and overriding members see [Classes](classes.html) and [Inheritance](classes.html#inheritance)\n-->\n\n## \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\n\n<!--original\n## Generic Functions\n-->\n\n\u95a2\u6570\u306f\u3001\u95a2\u6570\u540d\u306e\u524d\u306b\u5c71\u62ec\u5f27\uff08\u8a33\u6ce8\uff1a\uff1c\uff1e\u306e\u3053\u3068\u3067\u3059\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nFunctions can have generic parameters which are specified using angle brackets before the function name\n-->\n\n``` kotlin\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun <T> singletonList(item: T): List<T> {\n  // ...\n}\n```\n-->\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u30b8\u30a7\u30cd\u30ea\u30af\u30b9](generics.html) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nFor more information on generic functions see [Generics](generics.html)\n-->\n\n## \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\n<!--original\n## Inline Functions\n-->\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306f\u3001 [\u3053\u3053](inline-functions.html) \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nInline functions are explained [here](inline-functions.html)\n-->\n\n## \u62e1\u5f35\u95a2\u6570\n\n<!--original\n## Extension Functions\n-->\n\n\u62e1\u5f35\u6a5f\u80fd\u306f\u3001 [\u62e1\u5f35\u95a2\u6570](extensions.html) \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nExtension functions are explained in [their own section](extensions.html)\n-->\n\n## \u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\n\n<!--original\n## Higher-Order Functions and Lambdas\n-->\n\n\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\u306f\u3001 [\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0](lambdas.html) \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nHigher-Order functions and Lambdas are explained in [their own section](lambdas.html)\n-->\n\n## \u672b\u5c3e\u518d\u5e30\u95a2\u6570\n\n<!--original\n## Tail recursive functions\n-->\n\nKotlin\u306f[\u672b\u5c3e\u518d\u5e30](https://en.wikipedia.org/wiki/Tail_call)\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u901a\u5e38\u30eb\u30fc\u30d7\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304b\u308c\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4ee3\u308f\u308a\u306b\u518d\u5e30\u3067\u3001\u3057\u304b\u3057\u3001\u666e\u901a\u306e\u518d\u5e30\u3068\u9055\u3063\u3066\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u30ea\u30b9\u30af\u304c\u306a\u3044\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u3067\u3059\u3002\u3042\u308b\u95a2\u6570\u304c `tailrec` \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3055\u308c\u3001\u5fc5\u8981\u306a\u5f62\u5f0f\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u9ad8\u901f\u304b\u3064\u52b9\u7387\u7684\u306a\u30eb\u30fc\u30d7\u30d9\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6b8b\u3057\u3066\u3001\u518d\u5e30\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002\n\n<!--original\nKotlin supports a style of functional programming known as [tail recursion](https://en.wikipedia.org/wiki/Tail_call).\nThis allows some algorithms that would normally be written using loops to instead be written using a recursive function, but without the risk of stack overflow.\nWhen a function is marked with the `tailrec` modifier and meets the required form the compiler optimises out the recursion, leaving behind a fast and efficient loop based version instead.\n-->\n\n``` kotlin\ntailrec fun findFixPoint(x: Double = 1.0): Double\n        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))\n```\n\n<!--original\n``` kotlin\ntailrec fun findFixPoint(x: Double = 1.0): Double\n        = if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))\n```\n-->\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u6570\u5b66\u5b9a\u6570\u3067\u3042\u308b\u30b3\u30b5\u30a4\u30f3\u306e\u4e0d\u52d5\u70b9\uff08\u56fa\u5b9a\u70b9, fixpoint\uff09\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002\u305d\u308c\u306f Math.cos \u3092 1.0 \u304b\u3089\u59cb\u3081\u3066\u7d50\u679c\u306b0.7390851332151607\u306e\u7d50\u679c\u3092\u5f97\u3001\u305d\u308c\u4ee5\u4e0a\u5909\u5316\u3057\u306a\u304f\u306a\u308b\u307e\u3067\u5358\u306b\u7e70\u308a\u8fd4\u3057\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u306e\u3088\u308a\u4f1d\u7d71\u7684\u306a\u30b9\u30bf\u30a4\u30eb\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\n<!--original\nThis code calculates the fixpoint of cosine, which is a mathematical constant. It simply calls Math.cos repeatedly starting at 1.0 until the result doesn't change any more, yielding a result of 0.7390851332151607. The resulting code is equivalent to this more traditional style:\n-->\n\n``` kotlin\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (x == y) return y\n        x = y\n    }\n}\n```\n\n<!--original\n``` kotlin\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (x == y) return y\n        x = y\n    }\n}\n```\n-->\n\n`tailrec` \u4fee\u98fe\u5b50\u306e\u5bfe\u8c61\u3068\u306a\u308b\u305f\u3081\u306b\u306f\u3001\u95a2\u6570\u306f\u5b9f\u884c\u3059\u308b\u6700\u5f8c\u306e\u64cd\u4f5c\u3068\u3057\u3066\u81ea\u8eab\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u518d\u5e30\u547c\u3073\u51fa\u3057\u306e\u5f8c\u306b\u591a\u304f\u306e\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u672b\u5c3e\u518d\u5e30\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 try / catch / finally \u30d6\u30ed\u30c3\u30af\u5185\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u305b\u3093\u3002\u73fe\u5728\u3001\u672b\u5c3e\u518d\u5e30\u306fJVM\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nTo be eligible for the `tailrec` modifier, a function must call itself as the last operation it performs. You cannot use tail recursion when there is more code after the recursive call, and you cannot use it within try/catch/finally blocks. Currently tail recursion is only supported in the JVM backend.\n\n-->\n\n# \u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\n\n<!--original\n# Higher-Order Functions and Lambdas\n-->\n\n## \u9ad8\u968e\u95a2\u6570\n\n<!--original\n## Higher-Order Functions\n-->\n\n\u9ad8\u968e\u95a2\u6570\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u95a2\u6570\u3092\u53d6\u308b\u304b\u3001\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306e\u826f\u3044\u4f8b\u304c `lock()` \u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306f lock \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001 lock \u3092\u304b\u3051\u3001\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066 lock \u3092\u89e3\u653e\u3057\u307e\u3059\u3002\n\n<!--original\nA higher-order function is a function that takes functions as parameters, or returns a function.\nA good example of such a function is `lock()` that takes a lock object and a function, acquires the lock, runs the function and releases the lock:\n-->\n\n``` kotlin\nfun <T> lock(lock: Lock, body: () -> T): T {\n  lock.lock()\n  try {\n    return body()\n  }\n  finally {\n    lock.unlock()\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun <T> lock(lock: Lock, body: () -> T): T {\n  lock.lock()\n  try {\n    return body()\n  }\n  finally {\n    lock.unlock()\n  }\n}\n```\n-->\n\n\u305d\u308c\u3067\u306f\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 `body` \u306f[\u95a2\u6570\u578b](#function-types): `() -> T` \u3092\u6301\u3061\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3089\u305a\u3001\u578b `T` \u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 `body` \u306f `lock` \u306b\u3088\u3063\u3066\u4fdd\u8b77\u3055\u308c\u306a\u304c\u3089\u3001 *try*{: .keyword } \u30d6\u30ed\u30c3\u30af\u5185\u3067\u547c\u3073\u51fa\u3055\u308c\u3001\u305d\u306e\u7d50\u679c\u306f `lock()` \u95a2\u6570\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nLet's examine the code above: `body` has a [function type](#function-types): `() -> T`,\nso it's supposed to be a function that takes no parameters and returns a value of type `T`.\nIt is invoked inside the *try*{: .keyword }-block, while protected by the `lock`, and its result is returned by the `lock()` function.\n-->\n\n`lock()` \u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08[\u95a2\u6570\u306e\u53c2\u7167](reflection.html#function-references)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\uff1a\n\n<!--original\nIf we want to call `lock()`, we can pass another function to it as an argument (see [function references](reflection.html#function-references)):\n-->\n\n``` kotlin\nfun toBeSynchronized() = sharedResource.operation()\n\nval result = lock(lock, ::toBeSynchronized)\n```\n\n<!--original\n``` kotlin\nfun toBeSynchronized() = sharedResource.operation()\n\nval result = lock(lock, ::toBeSynchronized)\n```\n-->\n\n\u5225\u624b\u6bb5\u3068\u3057\u3066\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u3088\u308a\u4fbf\u5229\u306a\u65b9\u6cd5\u306f[\u30e9\u30e0\u30c0\u5f0f](#lambda-expressions-and-anonymous-functions)\u3092\u6e21\u3059\u3053\u3068\u3067\u3059\uff1a\n\n<!--original\nAnother, often more convenient way is to pass a [lambda expression](#lambda-expressions-and-anonymous-functions):\n-->\n\n``` kotlin\nval result = lock(lock, { sharedResource.operation() })\n```\n\n<!--original\n``` kotlin\nval result = lock(lock, { sharedResource.operation() })\n```\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u306f[\u4ee5\u4e0b\u3067\u3088\u308a\u8a73\u7d30\u306b](#lambda-expressions-and-anonymous-functions)\u8aac\u660e\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u7d99\u7d9a\u3057\u305f\u3044\u306e\u3067\u3001\u4eca\u306f\u7c21\u5358\u306a\u6982\u8981\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a\n\n<!--original\nLambda expressions are described in more [detail below](#lambda-expressions-and-anonymous-functions), but for purposes of continuing this section, let's see a brief overview:\n-->\n\n* \u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u5e38\u306b\u4e2d\u62ec\u5f27\u3067\u56f2\u307e\u308c\u3066\u3044\u307e\u3059\n* \u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\uff08\u3082\u3057\u3042\u308c\u3070\uff09 `->` \u306e\u524d\u3067\u5ba3\u8a00\u3055\u308c\u307e\u3059\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u3092\u7701\u7565\u3057\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\uff09\n* \u672c\u4f53\u304c `->` \u306b\u7d9a\u304d\u307e\u3059\uff08\u5b58\u5728\u3059\u308b\u5834\u5408\uff09\n\n<!--original\n* A lambda expression is always surrounded by curly braces,\n* Its parameters (if any) are declared before `->` (parameter types may be omitted),\n* The body goes after `->` (when present).\n-->\n\nKotlin\u3067\u306f\u3001\u95a2\u6570\u306e\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u62ec\u5f27\u306e\u5916\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u6163\u7fd2\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nIn Kotlin, there is a convention that if the last parameter to a function is a function, that parameter can be specified outside of the parentheses:\n-->\n\n``` kotlin\nlock (lock) {\n  sharedResource.operation()\n}\n```\n\n<!--original\n``` kotlin\nlock (lock) {\n  sharedResource.operation()\n}\n```\n-->\n\n\u5225\u306e\u4f8b\u3067\u9ad8\u968e\u95a2\u6570\u304c `map()` \u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nAnother example of a higher-order function would be `map()`:\n-->\n\n``` kotlin\nfun <T, R> List<T>.map(transform: (T) -> R): List<R> {\n  val result = arrayListOf<R>()\n  for (item in this)\n    result.add(transform(item))\n  return result\n}\n```\n\n<!--original\n``` kotlin\nfun <T, R> List<T>.map(transform: (T) -> R): List<R> {\n  val result = arrayListOf<R>()\n  for (item in this)\n    result.add(transform(item))\n  return result\n}\n```\n-->\n\n\u3053\u306e\u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThis function can be called as follows:\n-->\n\n``` kotlin\nval doubled = ints.map { it -> it * 2 }\n```\n\n<!--original\n``` kotlin\nval doubled = ints.map { it -> it * 2 }\n```\n-->\n\n\u30e9\u30e0\u30c0\u304c\u305d\u306e\u547c\u3073\u51fa\u3057\u306b\u552f\u4e00\u306e\u5f15\u6570\u3067\u3042\u308b\u5834\u5408\u3001\u547c\u3073\u51fa\u3057\u306e\u62ec\u5f27\u3092\u5b8c\u5168\u306b\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that the parentheses in a call can be omitted entirely if the lambda is the only argument to that call.\n-->\n\n### `it` : \u5358\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6697\u9ed9\u306e\u540d\u524d\n\n<!--original\n### `it`: implicit name of a single parameter\n-->\n\n\u3082\u3046\u4e00\u3064\u306e\u6709\u7528\u306a\u6163\u7fd2\u306f\u3001\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u30921\u3064\u3060\u3051\u6301\u3064\u5834\u5408\u3001\u305d\u306e\u5ba3\u8a00\u3092\uff08 `->` \u3068\u4e00\u7dd2\u306b\uff09\u7701\u7565\u3057\u3066\u3082\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u305d\u306e\u540d\u524d\u306f\u3001 it \u306b\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nOne other helpful convention is that if a function literal has only one parameter,\nits declaration may be omitted (along with the `->`), and its name will be `it`:\n-->\n\n``` kotlin\nints.map { it * 2 }\n```\n\n<!--original\n``` kotlin\nints.map { it * 2 }\n```\n-->\n\n\u3053\u308c\u3089\u306e\u6163\u7fd2\u306b\u3088\u308a\u3001 [LINQ\u30b9\u30bf\u30a4\u30eb](http://msdn.microsoft.com/en-us/library/bb308959.aspx) \u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThese conventions allow to write [LINQ-style](http://msdn.microsoft.com/en-us/library/bb308959.aspx) code:\n-->\n\n``` kotlin\nstrings.filter { it.length == 5 }.sortBy { it }.map { it.toUpperCase() }\n```\n\n<!--original\n``` kotlin\nstrings.filter { it.length == 5 }.sortBy { it }.map { it.toUpperCase() }\n```\n-->\n\n## \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\n<!--original\n## Inline Functions\n-->\n\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u3001[\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570](inline-functions.html)\u306e\u4f7f\u7528\u306f\u9ad8\u968e\u95a2\u6570\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u306b\u6709\u52b9\u3067\u3059\u3002\n\n<!--original\nSometimes it is beneficial to enhance performance of higher-order functions using [inline functions](inline-functions.html).\n-->\n\n## \u30e9\u30e0\u30c0\u5f0f\u3068\u7121\u540d\u95a2\u6570\n\n<!--original\n## Lambda Expressions and Anonymous Functions\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u95a2\u6570\u306f\u300c\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u300d\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u305d\u306e\u95a2\u6570\u306f\u5ba3\u8a00\u3055\u308c\u305f\u306e\u3067\u306f\u306a\u304f\u3001\u8868\u73fe\u3068\u3057\u3066\u3059\u3050\u306b\u6e21\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u6b21\u306e\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3059\uff1a\n\n<!--original\nA lambda expression or an anonymous function is a \"function literal\", i.e. a function that is not declared,\nbut passed immediately as an expression. Consider the following example:\n-->\n\n``` kotlin\nmax(strings, { a, b -> a.length < b.length })\n```\n\n<!--original\n``` kotlin\nmax(strings, { a, b -> a.length < b.length })\n```\n-->\n\n\u95a2\u6570 `max` \u306f\u9ad8\u968e\u95a2\u6570\u3067\u3059\u3002\u3059\u306a\u308f\u30612\u756a\u76ee\u306e\u5f15\u6570\u3068\u3057\u3066\u95a2\u6570\u5024\u3092\u3068\u308a\u307e\u3059\u3002\u3053\u306e2\u756a\u76ee\u306e\u5f15\u6570\u306f\u305d\u308c\u81ea\u4f53\u304c\u95a2\u6570\u3067\u3042\u308b\u5f0f\u3001\u3059\u306a\u308f\u3061\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3067\u3059\u3002\u95a2\u6570\u3068\u3057\u3066\u306f\u3001\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\n\n<!--original\nFunction `max` is a higher-order function, i.e. it takes a function value as the second argument.\nThis second argument is an expression that is itself a function, i.e. a function literal. As a function, it is equivalent to\n-->\n\n``` kotlin\nfun compare(a: String, b: String): Boolean = a.length < b.length\n```\n\n<!--original\n``` kotlin\nfun compare(a: String, b: String): Boolean = a.length < b.length\n```\n-->\n\n### \u95a2\u6570\u578b\n\n<!--original\n### Function Types\n-->\n\n\u95a2\u6570\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u95a2\u6570\u578b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306b\u524d\u8ff0\u306e\u95a2\u6570 `max` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff1a\n\n<!--original\nFor a function to accept another function as a parameter, we have to specify a function type for that parameter.\nFor example the abovementioned function `max` is defined as follows:\n-->\n\n``` kotlin\nfun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {\n  var max: T? = null\n  for (it in collection)\n    if (max == null || less(max, it))\n      max = it\n  return max\n}\n```\n\n<!--original\n``` kotlin\nfun <T> max(collection: Collection<T>, less: (T, T) -> Boolean): T? {\n  var max: T? = null\n  for (it in collection)\n    if (max == null || less(max, it))\n      max = it\n  return max\n}\n```\n-->\n\n\u30d1\u30e9\u30e1\u30fc\u30bf `less` \u306f `(T, T) -> Boolean` \u578b\u3001\u3059\u306a\u308f\u30612\u3064\u306e `T` \u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3068\u308a\u3001\u524d\u8005\u304c\u5f8c\u8005\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070 `Boolean` : true \u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\n<!--original\nThe parameter `less` is of type `(T, T) -> Boolean`, i.e. a function that takes two parameters of type `T` and returns a `Boolean`:\ntrue if the first one is smaller than the second one.\n-->\n\n\u672c\u4f53\u306e4\u884c\u76ee\u3067\u306f\u3001 `less` \u306f\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u578b `T` \u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u305d\u306e\u95a2\u6570\u306f\u547c\u3073\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\n<!--original\nIn the body, line 4, `less` is used as a function: it is called by passing two arguments of type `T`.\n-->\n\n\u95a2\u6570\u578b\u306f\u524d\u8ff0\u306e\u901a\u308a\u3001\u307e\u305f\u306f\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u610f\u5473\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3059\u308b\u5834\u5408\u306f\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nA function type is written as above, or may have named parameters, if you want to document the meaning of each parameter.\n-->\n\n``` kotlin\nval compare: (x: T, y: T) -> Int = ...\n```\n\n<!--original\n``` kotlin\nval compare: (x: T, y: T) -> Int = ...\n```\n-->\n\n### \u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\n\n<!--original\n### Lambda Expression Syntax\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u3001\u3064\u307e\u308a\u95a2\u6570\u578b\u30ea\u30c6\u30e9\u30eb\u306e\u5b8c\u5168\u306a\u69cb\u6587\u5f62\u5f0f\u306f\u3001\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n<!--original\nThe full syntactic form of lambda expressions, i.e. literals of function types, is as follows:\n-->\n\n``` kotlin\nval sum = { x: Int, y: Int -> x + y }\n```\n\n<!--original\n``` kotlin\nval sum = { x: Int, y: Int -> x + y }\n```\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u306f\u5e38\u306b\u4e2d\u62ec\u5f27\u3067\u56f2\u307e\u308c\u3001\u5b8c\u5168\u306a\u69cb\u6587\u5f62\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00\u306f\u30ab\u30c3\u30b3\u5185\u306b\u3042\u308a\u3001\u578b\u6ce8\u91c8\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u3001\u672c\u4f53\u306f `->` \u8a18\u53f7\u306e\u5f8c\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002\u5fc5\u9808\u3067\u306f\u306a\u3044\u6ce8\u91c8\u3092\u3059\u3079\u3066\u7701\u7565\u3057\u305f\u5834\u5408\u3001\u6b8b\u3063\u3066\u3044\u308b\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\nA lambda expression is always surrounded by curly braces,\nparameter declarations in the full syntactic form go inside parentheses and have optional type annotations,\nthe body goes after an `->` sign.\nIf we leave all the optional annotations out, what's left looks like this:\n-->\n\n``` kotlin\nval sum: (Int, Int) -> Int = { x, y -> x + y }\n```\n\n<!--original\n``` kotlin\nval sum: (Int, Int) -> Int = { x, y -> x + y }\n```\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u30921\u3064\u3060\u3051\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3088\u304f\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u3082\u3057Kotlin\u304c\u7f72\u540d\u81ea\u4f53\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001\u552f\u4e00\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5ba3\u8a00\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6697\u9ed9\u306e\u3046\u3061\u306b\u305d\u308c\u3092 `it` \u3068\u3044\u3046\u540d\u3067\u5ba3\u8a00\u3057\u307e\u3059\u3002\n\n<!--original\nIt's very common that a lambda expression has only one parameter.\nIf Kotlin can figure the signature out itself, it allows us not to declare the only parameter, and will implicitly\ndeclare it for us under the name `it`:\n-->\n\n``` kotlin\nints.filter { it > 0 } // \u3053\u306e\u30ea\u30c6\u30e9\u30eb\u306f '(it: Int) -> Boolean' \u578b\n```\n\n<!--original\n``` kotlin\nints.filter { it > 0 } // this literal is of type '(it: Int) -> Boolean'\n```\n-->\n\n\u95a2\u6570\u304c\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u95a2\u6570\u3092\u53d6\u308b\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u306f\u62ec\u5f27\u3067\u56f2\u307e\u308c\u305f\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u5916\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002[callSuffix](grammar.html#call-suffix)\u306e\u305f\u3081\u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that if a function takes another function as the last parameter, the lambda expression argument can be passed\noutside the parenthesized argument list.\nSee the grammar for [callSuffix](grammar.html#call-suffix).\n-->\n\n### \u7121\u540d\u95a2\u6570\n\n<!--original\n### Anonymous Functions\n-->\n\n\u4e0a\u8a18\u306e\u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u304b\u3089\u4e00\u3064\u6b20\u843d\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306f\u3001\u623b\u308a\u578b\u3092\u81ea\u52d5\u7684\u306b\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u4e0d\u8981\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u5225\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002_\u7121\u540d\u95a2\u6570_\u3067\u3059\u3002\n\n<!--original\nOne thing missing from the lambda expression syntax presented above is the ability to specify the return type of the\nfunction. In most cases, this is unnecessary because the return type can be inferred automatically. However, if you\ndo need to specify it explicitly, you can use an alternative syntax: an _anonymous function_.\n-->\n\n``` kotlin\nfun(x: Int, y: Int): Int = x + y\n```\n\n<!--original\n``` kotlin\nfun(x: Int, y: Int): Int = x + y\n```\n-->\n\n\u7121\u540d\u95a2\u6570\u306f\u3001\u305d\u306e\u540d\u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u9664\u3044\u3066\u3001\u901a\u5e38\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u3068\u975e\u5e38\u306e\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u672c\u4f53\u306f\u3001\u5f0f\uff08\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff09\u3001\u307e\u305f\u306f\u30d6\u30ed\u30c3\u30af\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\nAn anonymous function looks very much like a regular function declaration, except that its name is omitted. Its body\ncan be either an expression (as shown above) or a block:\n-->\n\n``` kotlin\nfun(x: Int, y: Int): Int {\n  return x + y\n}\n```\n\n<!--original\n``` kotlin\nfun(x: Int, y: Int): Int {\n  return x + y\n}\n```\n-->\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u304a\u3088\u3073\u623b\u308a\u578b\u306f\u3001\u305d\u308c\u3089\u304c\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3092\u9664\u304d\u3001\u901a\u5e38\u306e\u95a2\u6570\u3068\u540c\u3058\u65b9\u6cd5\u3067\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nThe parameters and the return type are specified in the same way as for regular functions, except that the parameter\ntypes can be omitted if they can be inferred from context:\n-->\n\n``` kotlin\nints.filter(fun(item) = item > 0)\n```\n\n<!--original\n``` kotlin\nints.filter(fun(item) = item > 0)\n```\n-->\n\n\u7121\u540d\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6\u306f\u666e\u901a\u306e\u95a2\u6570\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\uff1a\u623b\u308a\u5024\u306e\u578b\u306f\u5f0f\u672c\u4f53\u3068\u7121\u540d\u95a2\u6570\u306e\u305f\u3081\u306b\u81ea\u52d5\u7684\u306b\u63a8\u8ad6\u3055\u308c\u3001\u30d6\u30ed\u30c3\u30af\u672c\u4f53\u3067\u7121\u540d\u95a2\u6570\u306e\u305f\u3081\u306b\u660e\u793a\u7684\u306b\u6307\u5b9a\u3055\u308c\uff08\u307e\u305f\u306f `Unit` \u3068\u3055\u308c\uff09\u307e\u3059\u3002\n\n<!--original\nThe return type inference for anonymous functions works just like for normal functions: the return type is inferred\nautomatically for anonymous functions with an expression body and has to be specified explicitly (or is assumed to be\n`Unit`) for anonymous functions with a block body.\n-->\n\n\u7121\u540d\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u5e38\u306b\u304b\u3063\u3053\u5185\u306b\u6e21\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u62ec\u5f27\u306e\u5916\u306e\u95a2\u6570\u3092\u6b8b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u901f\u8a18\u69cb\u6587\u306f\u30e9\u30e0\u30c0\u5f0f\u306b\u5bfe\u3057\u3066\u306e\u307f\u6a5f\u80fd\u3057\u307e\u3059\u3002\n\n<!--original\nNote that anonymous function parameters are always passed inside the parentheses. The shorthand syntax allowing\nto leave the function outside the parentheses works only for lambda expressions.\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u3068\u7121\u540d\u95a2\u6570\u306e\u9593\u306e\u3082\u3046\u4e00\u3064\u306e\u9055\u3044\u306f\u3001[\u975e\u5c40\u6240\u7684\u306a\u30ea\u30bf\u30fc\u30f3](inline-functions.html#non-local-returns)\u306e\u52d5\u4f5c\u3067\u3059\u3002\u30e9\u30d9\u30eb\u306a\u3057\u306e *return*{: .keyword } \u6587\u306f\u3001\u5e38\u306b *fun*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u304b\u3089\u8fd4\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u5185\u5074\u304b\u3089\u306e *return*{: .keyword } \u306f\u56f2\u3093\u3067\u3044\u308b\u95a2\u6570\u304b\u3089\u8fd4\u3055\u308c\u308b\u4e00\u65b9\u3067\u3001\u7121\u540d\u95a2\u6570\u306e\u5185\u90e8 *return*{: .keyword } \u306f\u7121\u540d\u95a2\u6570\u81ea\u4f53\u304b\u3089\u8fd4\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n<!--original\nOne other difference between lambda expressions and anonymous functions is the behavior of\n[non-local returns](inline-functions.html#non-local-returns). A *return*{: .keyword }  statement without a label\nalways returns from the function declared with the *fun*{: .keyword } keyword. This means that a *return*{: .keyword }\ninside a lambda expression will return from the enclosing function, whereas a *return*{: .keyword } inside\nan anonymous function will return from the anonymous function itself.\n-->\n\n### \u30af\u30ed\u30fc\u30b8\u30e3\n\n<!--original\n### Closures\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u95a2\u6570\uff08\u306a\u3089\u3073\u306b[\u30ed\u30fc\u30ab\u30eb\u95a2\u6570](functions.html#local-functions)\u3084[\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f](object-declarations.html#object-expressions)\uff09\u306f\u3001\u305d\u306e _\u30af\u30ed\u30fc\u30b8\u30e3_ \u3001\u3059\u306a\u308f\u3061\u3001\u5916\u5074\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Java\u3068\u306f\u7570\u306a\u308a\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u53d6\u308a\u8fbc\u307e\u308c\u305f\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nA lambda expression or anonymous function (as well as a [local function](functions.html#local-functions) and an [object expression](object-declarations.html#object-expressions))\ncan access its _closure_, i.e. the variables declared in the outer scope. Unlike Java, the variables captured in the closure can be modified:\n-->\n\n``` kotlin\nvar sum = 0\nints.filter { it > 0 }.forEach {\n  sum += it\n}\nprint(sum)\n```\n\n\n<!--original\n``` kotlin\nvar sum = 0\nints.filter { it > 0 }.forEach {\n  sum += it\n}\nprint(sum)\n```\n\n-->\n\n### \u30ec\u30b7\u30fc\u30d0\u4ed8\u304d\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\n\n<!--original\n### Function Literals with Receiver\n-->\n\nKotlin\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f _\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8_ \u3068\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u547c\u3073\u51fa\u3059\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30ea\u30c6\u30e9\u30eb\u95a2\u6570\u306e\u672c\u4f53\u5185\u3067\u306f\u3001\u4efb\u610f\u306e\u8ffd\u52a0\u306e\u4fee\u98fe\u5b50\u306a\u3057\u3067\u305d\u306e\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u306e\u672c\u4f53\u5185\u306b\u3042\u308b\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u62e1\u5f35\u6a5f\u80fd\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u4f7f\u7528\u6cd5\u306e\u6700\u3082\u91cd\u8981\u306a\u4f8b\u306e\u4e00\u3064\u306f\u3001[\u578b\u5b89\u5168\u306eGroovy\u30b9\u30bf\u30a4\u30eb\u306e\u30d3\u30eb\u30c0\u30fc](type-safe-builders.html)\u3067\u3059\u3002\n\n<!--original\nKotlin provides the ability to call a function literal with a specified _receiver object_.\nInside the body of the function literal, you can call methods on that receiver object without any additional qualifiers.\nThis is similar to extension functions, which allow you to access members of the receiver object inside the body of the function.\nOne of the most important examples of their usage is [Type-safe Groovy-style builders](type-safe-builders.html).\n-->\n\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u306e\u578b\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u3092\u6301\u3064\u95a2\u6570\u578b\u3067\u3059\uff1a\n\n<!--original\nThe type of such a function literal is a function type with receiver:\n-->\n\n``` kotlin\nsum : Int.(other: Int) -> Int\n```\n\n<!--original\n``` kotlin\nsum : Int.(other: Int) -> Int\n```\n-->\n\n\u305d\u308c\u306f\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306b\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe function literal can be called as if it were a method on the receiver object:\n-->\n\n``` kotlin\n1.sum(2)\n```\n\n<!--original\n``` kotlin\n1.sum(2)\n```\n-->\n\n\u7121\u540d\u95a2\u6570\u306e\u69cb\u6587\u306f\u3001\u76f4\u63a5\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u306e\u30ec\u30b7\u30fc\u30d0\u306e\u7a2e\u985e\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ec\u30b7\u30fc\u30d0\u3092\u6301\u3064\u95a2\u6570\u578b\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u3001\u5f8c\u3067\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\n<!--original\nThe anonymous function syntax allows you to specify the receiver type of a function literal directly.\nThis can be useful if you need to declare a variable of a function type with receiver, and to use it later.\n-->\n\n``` kotlin\nval sum = fun Int.(other: Int): Int = this + other\n```\n\n<!--original\n``` kotlin\nval sum = fun Int.(other: Int): Int = this + other\n```\n-->\n\n\u30ec\u30b7\u30fc\u30d0\u578b\u306f\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u5408\u3001\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nLambda expressions can be used as function literals with receiver when the receiver type can be inferred from context.\n-->\n\n``` kotlin\nclass HTML {\n    fun body() { ... }\n}\n\nfun html(init: HTML.() -> Unit): HTML {\n  val html = HTML()  // \u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n  html.init()        // \u305d\u306e\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30e9\u30e0\u30c0\u306b\u6e21\u3059\n  return html\n}\n\n\nhtml {       // \u30ec\u30b7\u30fc\u30d0\u4ed8\u304d\u30e9\u30e0\u30c0\u304c\u3053\u3053\u304b\u3089\u59cb\u307e\u308b\n    body()   // \u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u3044\u308b\n}\n```\n\n<!--original\n``` kotlin\nclass HTML {\n    fun body() { ... }\n}\n\nfun html(init: HTML.() -> Unit): HTML {\n  val html = HTML()  // create the receiver object\n  html.init()        // pass the receiver object to the lambda\n  return html\n}\n\n\nhtml {       // lambda with receiver begins here\n    body()   // calling a method on the receiver object\n}\n```\n-->\n\n# \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\n\n<!--original\n# Inline Functions\n-->\n\n[\u9ad8\u968e\u95a2\u6570](lambdas.html)\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u7279\u5b9a\u306e\u30e9\u30f3\u30bf\u30a4\u30e0\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u8ab2\u305b\u3089\u308c\u307e\u3059\u3002\u5404\u95a2\u6570\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u305d\u308c\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3001\u3059\u306a\u308f\u3061\u3001\u95a2\u6570\u306e\u672c\u4f53\u3067\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u305d\u308c\u3089\u306e\u5909\u6570\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u307e\u3059\u3002\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\uff08\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30af\u30e9\u30b9\u7528\u306e\u4e21\u65b9\uff09\u3068\u4eee\u60f3\u547c\u3073\u51fa\u3057\u306f\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u62db\u304d\u307e\u3059\u3002\n\n<!--original\nUsing [higher-order functions](lambdas.html) imposes certain runtime penalties: each function is an object, and it captures a closure,\ni.e. those variables that are accessed in the body of the function.\nMemory allocations (both for function objects and classes) and virtual calls introduce runtime overhead.\n-->\n\n\u3057\u304b\u3057\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u3053\u306e\u7a2e\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u89e3\u6d88\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u793a\u3059\u95a2\u6570\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306e\u826f\u3044\u4f8b\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001`lock()` \u95a2\u6570\u306f\u3001\u7c21\u5358\u306b\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306e\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n<!--original\nBut it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions.\nThe functions shown above are good examples of this situation. I.e., the `lock()` function could be easily inlined at call-sites.\nConsider the following case:\n-->\n\n``` kotlin\nlock(l) { foo() }\n```\n\n<!--original\n``` kotlin\nlock(l) { foo() }\n```\n-->\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3084\u30b3\u30fc\u30eb\u306e\u751f\u6210\u306e\u305f\u3081\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u653e\u51fa\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nInstead of creating a function object for the parameter and generating a call, the compiler could emit the following code\n-->\n\n``` kotlin\nl.lock()\ntry {\n  foo()\n}\nfinally {\n  l.unlock()\n}\n```\n\n<!--original\n``` kotlin\nl.lock()\ntry {\n  foo()\n}\nfinally {\n  l.unlock()\n}\n```\n-->\n\n\u305d\u308c\u306f\u6211\u3005\u304c\u5f53\u521d\u304b\u3089\u6b32\u3057\u304b\u3063\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3059\u304b\uff1f\n\n<!--original\nIsn't it what we wanted from the very beginning?\n-->\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3053\u308c\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001 `inline` \u4fee\u98fe\u5b50\u3067 `lock()` \u95a2\u6570\u3092\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nTo make the compiler do this, we need to mark the `lock()` function with the `inline` modifier:\n-->\n\n``` kotlin\ninline fun lock<T>(lock: Lock, body: () -> T): T {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\ninline fun lock<T>(lock: Lock, body: () -> T): T {\n  // ...\n}\n```\n-->\n\n`inline` \u4fee\u98fe\u5b50\u306f\u3001\u95a2\u6570\u81ea\u4f53\u3084\u305d\u308c\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u306e\u4e21\u65b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u3059\u3079\u3066\u306f\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306e\u4e2d\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nThe `inline` modifier affects both the function itself and the lambdas passed to it: all of those will be inlined\ninto the call site.\n-->\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3067\u306f\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u304c\u5927\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5408\u7406\u7684\u306a\u65b9\u6cd5\u3067\uff08\u5927\u304d\u306a\u95a2\u6570\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3057\u306a\u3044\u3067\uff09\u5b9f\u884c\u3059\u308b\u3068\u3001\u7279\u306b\u30eb\u30fc\u30d7\u5185\u306e \u300c\u30e1\u30ac\u30e2\u30fc\u30d5\u30a3\u30c3\u30af (megamorphic)\u300d\u306a\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\n\n<!--original\nInlining may cause the generated code to grow, but if we do it in a reasonable way (do not inline big functions)\nit will pay off in performance, especially at \"megamorphic\" call-sites inside loops.\n-->\n\n## noinline\n\n<!--original\n## noinline\n-->\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u306e\u3046\u3061\u306e\u3044\u304f\u3064\u304b\u3060\u3051\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u3044\u304f\u3064\u304b\u306b `noinline` \u4fee\u98fe\u5b50\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIn case you want only some of the lambdas passed to an inline function to be inlined, you can mark some of your function\nparameters with the `noinline` modifier:\n-->\n\n``` kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {\n  // ...\n}\n```\n-->\n\nInlinable\u30e9\u30e0\u30c0\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u5185\u3067\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u53ef\u80fd\u306a\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001 `noinline` \u306f\u3001\u597d\u304d\u306a\u3088\u3046\u306b\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4fdd\u6301\u3057\u305f\u308a\u3001\u8ab0\u304b\u306b\u6e21\u3057\u305f\u308a\u7b49\u3002\n\n<!--original\nInlinable lambdas can only be called inside the inline functions or passed as inlinable arguments,\nbut `noinline` ones can be manipulated in any way we like: stored in fields, passed around etc.\n-->\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u30a4\u30f3\u30e9\u30a4\u30ca\u30d6\u30eb\u95a2\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u3001[\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf](#reified-type-parameters)\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u8b66\u544a\u3092\u767a\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u306f\u6709\u76ca\u3067\u306f\u306a\u3044\u305f\u3081\u3067\u3059\uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u8b66\u544a\u3092\u6291\u5236\u3067\u304d\u307e\u3059\uff09\u3002\n\n<!--original\nNote that if an inline function has no inlinable function parameters and no\n[reified type parameters](#reified-type-parameters), the compiler will issue a warning, since inlining such functions is\n very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed).\n-->\n\n## \u975e\u5c40\u6240\u30ea\u30bf\u30fc\u30f3\n\n<!--original\n## Non-local returns\n-->\n\nKotlin\u3067\u306f\u3001\u540d\u524d\u4ed8\u304d\u95a2\u6570\u307e\u305f\u306f\u7121\u540d\u95a2\u6570\u3092\u7d42\u4e86\u3059\u308b\u306b\u306f\u3001\u901a\u5e38\u3001\u30e9\u30d9\u30eb\u7121\u3057 `return` \u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e9\u30e0\u30c0\u3092\u7d42\u4e86\u3059\u308b\u306b\u306f[\u30e9\u30d9\u30eb](returns.html#return-at-labels)\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u30e9\u30e0\u30c0\u304c\u81ea\u8eab\u3092\u5185\u5305\u3059\u308b\u95a2\u6570\u304b\u3089\u306e `return` \u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30e9\u30e0\u30c0\u5185\u3067\u306e\u88f8\u306e\u30ea\u30bf\u30fc\u30f3\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n<!--original\nIn Kotlin, we can only use a normal, unqualified `return` to exit a named function or an anonymous function.\nThis means that to exit a lambda, we have to use a [label](returns.html#return-at-labels), and a bare `return` is forbidden\ninside a lambda, because a lambda can not make the enclosing function return:\n-->\n\n``` kotlin\nfun foo() {\n  ordinaryFunction {\n     return // \u30a8\u30e9\u30fc: `foo` \u3092\u3053\u3053\u3067 return \u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  ordinaryFunction {\n     return // ERROR: can not make `foo` return here\n  }\n}\n```\n-->\n\n\u3057\u304b\u3057\u3001\u30e9\u30e0\u30c0\u304c\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u308b\u305f\u3081\u306b\u6e21\u3055\u308c\u305f\u95a2\u6570\u306e\u5834\u5408\u306f\u3001\u30ea\u30bf\u30fc\u30f3\u3082\u540c\u69d8\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nBut if the function the lambda is passed to is inlined, the return can be inlined as well, so it is allowed:\n-->\n\n``` kotlin\nfun foo() {\n  inlineFunction {\n    return // OK: \u30e9\u30e0\u30c0\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  inlineFunction {\n    return // OK: the lambda is inlined\n  }\n}\n```\n-->\n\n\uff08\u30e9\u30e0\u30c0\u306b\u4f4d\u7f6e\u3059\u308b\u304c\u3001\u5185\u5305\u3059\u308b\u95a2\u6570\u304b\u3089\u629c\u3051\u308b\uff09\u3053\u306e\u3088\u3046\u306a\u30ea\u30bf\u30fc\u30f3\u306f\u3001 *\u975e\u5c40\u6240\u30ea\u30bf\u30fc\u30f3* \u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\u79c1\u305f\u3061\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c\u3057\u3070\u3057\u3070\u5185\u5305\u3059\u308b\u3053\u306e\u3088\u3046\u306a\u30eb\u30fc\u30d7\u306e\u69cb\u9020\u306b\u6163\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nSuch returns (located in a lambda, but exiting the enclosing function) are called *non-local* returns. We are used to\nthis sort of constructs in loops, which inline functions often enclose:\n-->\n\n``` kotlin\nfun hasZeros(ints: List<Int>): Boolean {\n  ints.forEach {\n    if (it == 0) return true // hasZeros \u304b\u3089 return \u3059\u308b\n  }\n  return false\n}\n```\n\n<!--original\n``` kotlin\nfun hasZeros(ints: List<Int>): Boolean {\n  ints.forEach {\n    if (it == 0) return true // returns from hasZeros\n  }\n  return false\n}\n```\n-->\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306e\u4e2d\u306b\u306f\u3001\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3092\u3001\u95a2\u6570\u672c\u4f53\u304b\u3089\u76f4\u63a5\u3067\u306f\u306a\u304f\u3001\u30ed\u30fc\u30ab\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30cd\u30b9\u30c8\u3055\u308c\u305f\u95a2\u6570\u306a\u3069\u306e\u5225\u306e\u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u547c\u3073\u51fa\u3059\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001\u975e\u5c40\u6240\u5236\u5fa1\u30d5\u30ed\u30fc\u3082\u30e9\u30e0\u30c0\u3067\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u308c\u3092\u793a\u3059\u305f\u3081\u306b\u3001\u30e9\u30e0\u30c0\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 `crossinline` \u4fee\u98fe\u5b50\u3067\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\n<!--original\nNote that some inline functions may call the lambdas passed to them as parameters not directly from the function body,\nbut from another execution context, such as a local object or a nested function. In such cases, non-local control flow\nis also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with\nthe `crossinline` modifier:\n-->\n\n``` kotlin\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n```\n\n\n<!--original\n``` kotlin\ninline fun f(crossinline body: () -> Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n```\n\n-->\n\n`break` \u3068 `continue` \u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3067\u306f\u307e\u3060\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u6211\u3005\u306f\u305d\u308c\u3089\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3092\u8a08\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\n> `break` and `continue` are not yet available in inlined lambdas, but we are planning to support them too\n-->\n\n## \u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf (Reified type parameters)\n\n<!--original\n## Reified type parameters\n-->\n\n\u6642\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3055\u308c\u305f\u578b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nSometimes we need to access a type passed to us as a parameter:\n-->\n\n``` kotlin\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p?.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T\n}\n```\n\n<!--original\n``` kotlin\nfun <T> TreeNode.findParentOfType(clazz: Class<T>): T? {\n    var p = parent\n    while (p != null && !clazz.isInstance(p)) {\n        p = p?.parent\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return p as T\n}\n```\n-->\n\n\u3053\u3053\u3067\u306f\u3001\u30c4\u30ea\u30fc\u3092\u305f\u3069\u3063\u3066\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ce\u30fc\u30c9\u306b\u7279\u5b9a\u306e\u30bf\u30a4\u30d7\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5168\u304f\u554f\u984c\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u305d\u308c\u307b\u3069\u7f8e\u5473\u3057\u304f\u306a\u308a\u307e\u305b\u3093\uff1a\n\n<!--original\nHere, we walk up a tree and use reflection to check if a node has a certain type.\nIt\u2019s all fine, but the call site is not very pretty:\n-->\n\n``` kotlin\nmyTree.findParentOfType(MyTreeNodeType::class.java)\n```\n\n<!--original\n``` kotlin\nmyTree.findParentOfType(MyTreeNodeType::class.java)\n```\n-->\n\n\u79c1\u305f\u3061\u304c\u5b9f\u969b\u306b\u3057\u305f\u3044\u306e\u306f\u3053\u306e\u95a2\u6570\u306b\u578b\u3092\u6e21\u3059\u3060\u3051\u3001\u3059\u306a\u308f\u3061\u3001\u3053\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\uff1a\n\n<!--original\nWhat we actually want is simply pass a type to this function, i.e. call it like this:\n-->\n\n``` kotlin\nmyTree.findParentOfType<MyTreeNodeType>()\n```\n\n<!--original\n``` kotlin\nmyTree.findParentOfType<MyTreeNodeType>()\n```\n-->\n\n\u3053\u308c\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u304c *\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf* \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306e\u3067\u3001\u79c1\u305f\u3061\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nTo enable this, inline functions support *reified type parameters*, so we can write something like this:\n-->\n\n``` kotlin\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p?.parent\n    }\n    return p as T\n}\n```\n\n<!--original\n``` kotlin\ninline fun <reified T> TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null && p !is T) {\n        p = p?.parent\n    }\n    return p as T\n}\n```\n-->\n\n\u79c1\u305f\u3061\u306f `reified` \u4fee\u98fe\u5b50\u3067\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fee\u98fe\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3067\u3001\u95a2\u6570\u5185\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u3001\u3053\u308c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u3058\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059\u3002\u95a2\u6570\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 `!is` \u3084 `as` \u306e\u3088\u3046\u306a\u901a\u5e38\u306e\u6f14\u7b97\u5b50\u304c\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u524d\u8ff0\u3057\u305f\u3088\u3046\u306a\u3084\u308a\u304b\u305f\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a`myTree.findParentOfType<MyTreeNodeType>()`\n\n<!--original\nWe qualified the type parameter with the `reified` modifier, now it\u2019s accessible inside the function,\nalmost as if it were a normal class. Since the function is inlined, no reflection is needed, normal operators like `!is`\nand `as` are working now. Also, we can call it as mentioned above: `myTree.findParentOfType<MyTreeNodeType>()`.\n-->\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u591a\u304f\u306e\u5834\u5408\u306b\u5fc5\u8981\u3068\u3055\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u5177\u4f53\u5316\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThough reflection may not be needed in many cases, we can still use it with a reified type parameter:\n-->\n\n``` kotlin\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n  println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n```\n\n<!--original\n``` kotlin\ninline fun <reified T> membersOf() = T::class.members\n\nfun main(s: Array<String>) {\n  println(membersOf<StringBuilder>().joinToString(\"\\n\"))\n}\n```\n-->\n\n\u901a\u5e38\u306e\u6a5f\u80fd\uff08\u30a4\u30f3\u30e9\u30a4\u30f3\u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u306a\u3044\uff09\u306f\u5177\u4f53\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3082\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u5b9f\u884c\u6642\u8868\u73fe\u3092\u6301\u305f\u306a\u3044\u578b\uff08\u4f8b\u3048\u3070\u3001\u975ereified\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3084 `Nothing` \u306e\u3088\u3046\u306a\u67b6\u7a7a\u306e\u578b\uff09\u306f\u3001reified \u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5f15\u6570\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\n\n<!--original\nNormal functions (not marked as inline) can not have reified parameters.\nA type that does not have a run-time representation (e.g. a non-reified type parameter or a fictitious type like `Nothing`)\ncan not be used as an argument for a reified type parameter.\n-->\n\n\u4f4e\u30ec\u30d9\u30eb\u306e\u8aac\u660e\u306b\u3064\u3044\u3066\u306f\u3001[\u4ed5\u69d8\u66f8](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nFor a low-level description, see the [spec document](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md).\n-->\n\n\n---\n\n# \u203b\u6a29\u5229\u95a2\u4fc2\u306b\u3064\u3044\u3066\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u3092\u4f5c\u3063\u305fJetBrain\u793e\u306f[Contributing to Kotlin](https://kotlinlang.org/contribute.html#translations)\u3067\u3001\u300c\u3042\u306a\u305f\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3001Web\u30b5\u30a4\u30c8\u4e0a\u3067\u95b2\u89a7\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068\u3092\u6b53\u8fce\u3059\u308b\u3002\u300d ( _You are welcome to translate the Kotlin documentation into your own language and to publish your translation on your Web site._ ) \u3068\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306f[github\u4e0a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/JetBrains/kotlin-web-site)\u3067\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u793a\u304c[Apache License ver. 2.0](https://github.com/JetBrains/kotlin-web-site/blob/master/LICENSE)\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092[Apache License ver. 2.0](https://github.com/dogwood008/kotlin-web-site-ja/blob/master/LICENSE)\u3068\u3057\u307e\u3059\u3002\n", "tags": ["Kotlin", "Android", "android\u958b\u767a"]}