{"context": "\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067Brainfuck\u51e6\u7406\u7cfb\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u767a\u7aef\u306f\u81ea\u5206\u304c\u958b\u767a\u3057\u3066\u3044\u308bBrainfuck\u51e6\u7406\u7cfb(GitHub - alphaKAI/brainfuck)\u3092\u9ad8\u901f\u5316\u3057\u3066\u3044\u308b\u6642\u306b\u3001\u3075\u3068\u3053\u308c\u3001\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u5316\u51fa\u6765\u308b\u306e\u3067\u306f...?\u3068\u8003\u3048\u3001\u66f8\u3044\u3066\u307f\u305f\u3089\u51fa\u6765\u307e\u3057\u305f\u3002\n\u4f8b\u306b\u3088\u3063\u3066Z Combinator\u306b\u3088\u308b\u7121\u540d\u518d\u5e30\u3092\u591a\u7528\u3057\u3066\u3044\u307e\u3059\n\u4e00\u90e8\u578b\u3092\u7701\u7565\u53ef\u80fd\u306a\u5834\u6240\u304c\u3042\u308a\u307e\u3059\u304c\u53ef\u8aad\u6027\u306e\u305f\u3081\u306b\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n(\u6ce8\u610f: \u8907\u96d1\u306a\u30b3\u30fc\u30c9\u3060\u3068\u5358\u7d14\u306a\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3044\u3001\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093....)\n\u5b8c\u5168\u306a\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u3057\u307e\u3057\u305f\uff01\uff01\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3059\nimport std.algorithm,\n       std.array,\n       std.stdio,\n       std.string,\n       std.conv;\nimport core.memory;\n\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  ((string input) =>\n    (operators =>\n      ((char* code) =>\n        ((ubyte* memory) =>\n          ((ulong memoryIndex) =>\n            (removeTrash =>\n              (process =>\n                process(input)\n              )((string input) =>\n                  ((string[] _code) =>\n                    (\n                      (\n                        GC.realloc(code,   _code.length *  char.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE),\n                        GC.realloc(memory, _code.length * ubyte.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE)\n                      ),\n                      Z((int delegate(int) copy, int i) => i < _code.length ? (code[i] = _code[i].to!char, copy(i + 1)) : 0)(0),\n                      ((int pc) =>\n                        (optimizer =>\n                          ((int delegate() destructor) =>\n                            ((int[int] brackets) =>\n                              (process =>\n                                (\n                                  process(int.init),\n                                  destructor()\n                                )\n                              )(Z((int delegate(int) process, int index) =>\n                                  index < _code.length \n                                  ? ((char current) =>\n                                      (\n                                        (current == '>'\n                                          ? memoryIndex++\n                                       : current == '<'\n                                          ? memoryIndex--\n                                       : current == '+'\n                                          ? memory[memoryIndex]++\n                                       : current == '-'\n                                          ? memory[memoryIndex]--\n                                       : current == '.'\n                                          ? (\n                                              write(memory[memoryIndex].to!char),\n                                              stdout.flush()\n                                            )\n                                       : current == ','\n                                         ? ((string buf) =>\n                                              (\n                                                Z((int delegate() getLine) => ((buf = readln()) == null || !buf.length) ? getLine() : 0)(),\n                                                memory[memoryIndex] = cast(ubyte)buf[0]\n                                              )\n                                           )(string.init)\n                                       : current == '['\n                                         ? (memory[memoryIndex] == 0 ? (index = brackets[index], 0) : 0)\n                                       : current == ']'\n                                         ? (memory[memoryIndex] != 0 ? (index = brackets[index], 0) : 0)\n                                       : 0\n                                        ),\n                                        process(index + 1)\n                                      )\n                                    )(code[index])\n                                  : 0\n                                ))\n                            )(optimizer(int.init, (int[]).init, (int[int]).init))\n                          )(() => (GC.free(code), GC.free(memory), memoryIndex = 0, 0))\n                        )(Z((int[int] delegate(size_t, int[], int[int]) optimizer, size_t i, int[] leftstack, int[int] brackets) => \n                            i < _code.length ? \n                              ((char c) =>\n                                !canFind(operators, _code[i])\n                                  ? optimizer(i + 1, leftstack, brackets)\n                                  : (\n                                      c == '['\n                                        ? (optimizer(i + 1, leftstack ~ pc++, brackets)) \n                                        : (c == ']' && leftstack.length != 0)\n                                            ? (left =>\n                                                (leftstack.popBack(),\n                                                  (right =>\n                                                    (\n                                                      (brackets[left] = right, brackets[right] = left),\n                                                      pc++,\n                                                      optimizer(i + 1, leftstack, brackets)\n                                                    )\n                                                  )(pc))\n                                              )(leftstack[$ - 1])\n                                            : (pc++, optimizer(i + 1, leftstack, brackets))\n                                    )\n                              )(code[i]) : brackets\n                            )\n                        )\n                      )(int.init)\n                    )\n                )(removeTrash(input))\n              )\n            )((string key) => key.split(\"\").filter!(x => operators.canFind(x)).array)\n          )(ulong.init)\n        )(cast(ubyte*)GC.malloc(300000 * ubyte.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE))\n      )(cast(char*) GC.malloc(300000 *  char.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE))\n    )([\">\", \"<\", \"+\", \"-\", \".\", \",\", \"[\", \"]\"])\n  )(\">+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.[-]>++++++++[<++++>-]<.>+++++++++++[<+++++>-]<.>++++++++[<+++>-]<.+++.------.--------.[-]>++++++++[<++++>-]<+.[-]++++++++++.\");\n// => Hello World!\n}\n\n\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067Brainfuck\u51e6\u7406\u7cfb\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u767a\u7aef\u306f\u81ea\u5206\u304c\u958b\u767a\u3057\u3066\u3044\u308b`Brainfuck`\u51e6\u7406\u7cfb([GitHub - alphaKAI/brainfuck](https://github.com/alphaKAI/brainfuck))\u3092\u9ad8\u901f\u5316\u3057\u3066\u3044\u308b\u6642\u306b\u3001\u3075\u3068\u3053\u308c\u3001\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u5316\u51fa\u6765\u308b\u306e\u3067\u306f...?\u3068\u8003\u3048\u3001\u66f8\u3044\u3066\u307f\u305f\u3089\u51fa\u6765\u307e\u3057\u305f\u3002\n\u4f8b\u306b\u3088\u3063\u3066`Z Combinator`\u306b\u3088\u308b\u7121\u540d\u518d\u5e30\u3092\u591a\u7528\u3057\u3066\u3044\u307e\u3059\n\u4e00\u90e8\u578b\u3092\u7701\u7565\u53ef\u80fd\u306a\u5834\u6240\u304c\u3042\u308a\u307e\u3059\u304c\u53ef\u8aad\u6027\u306e\u305f\u3081\u306b\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n(\u6ce8\u610f: \u8907\u96d1\u306a\u30b3\u30fc\u30c9\u3060\u3068\u5358\u7d14\u306a\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3044\u3001\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093....)\n\n\u5b8c\u5168\u306a\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306b\u3057\u307e\u3057\u305f\uff01\uff01\n\n\u3067\u306f\u3001\u4ee5\u4e0b\u306b\u5b8c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3059\n\n```d\nimport std.algorithm,\n       std.array,\n       std.stdio,\n       std.string,\n       std.conv;\nimport core.memory;\n\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nvoid main() {\n  ((string input) =>\n    (operators =>\n      ((char* code) =>\n        ((ubyte* memory) =>\n          ((ulong memoryIndex) =>\n            (removeTrash =>\n              (process =>\n                process(input)\n              )((string input) =>\n                  ((string[] _code) =>\n                    (\n                      (\n                        GC.realloc(code,   _code.length *  char.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE),\n                        GC.realloc(memory, _code.length * ubyte.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE)\n                      ),\n                      Z((int delegate(int) copy, int i) => i < _code.length ? (code[i] = _code[i].to!char, copy(i + 1)) : 0)(0),\n                      ((int pc) =>\n                        (optimizer =>\n                          ((int delegate() destructor) =>\n                            ((int[int] brackets) =>\n                              (process =>\n                                (\n                                  process(int.init),\n                                  destructor()\n                                )\n                              )(Z((int delegate(int) process, int index) =>\n                                  index < _code.length \n                                  ? ((char current) =>\n                                      (\n                                        (current == '>'\n                                          ? memoryIndex++\n                                       : current == '<'\n                                          ? memoryIndex--\n                                       : current == '+'\n                                          ? memory[memoryIndex]++\n                                       : current == '-'\n                                          ? memory[memoryIndex]--\n                                       : current == '.'\n                                          ? (\n                                              write(memory[memoryIndex].to!char),\n                                              stdout.flush()\n                                            )\n                                       : current == ','\n                                         ? ((string buf) =>\n                                              (\n                                                Z((int delegate() getLine) => ((buf = readln()) == null || !buf.length) ? getLine() : 0)(),\n                                                memory[memoryIndex] = cast(ubyte)buf[0]\n                                              )\n                                           )(string.init)\n                                       : current == '['\n                                         ? (memory[memoryIndex] == 0 ? (index = brackets[index], 0) : 0)\n                                       : current == ']'\n                                         ? (memory[memoryIndex] != 0 ? (index = brackets[index], 0) : 0)\n                                       : 0\n                                        ),\n                                        process(index + 1)\n                                      )\n                                    )(code[index])\n                                  : 0\n                                ))\n                            )(optimizer(int.init, (int[]).init, (int[int]).init))\n                          )(() => (GC.free(code), GC.free(memory), memoryIndex = 0, 0))\n                        )(Z((int[int] delegate(size_t, int[], int[int]) optimizer, size_t i, int[] leftstack, int[int] brackets) => \n                            i < _code.length ? \n                              ((char c) =>\n                                !canFind(operators, _code[i])\n                                  ? optimizer(i + 1, leftstack, brackets)\n                                  : (\n                                      c == '['\n                                        ? (optimizer(i + 1, leftstack ~ pc++, brackets)) \n                                        : (c == ']' && leftstack.length != 0)\n                                            ? (left =>\n                                                (leftstack.popBack(),\n                                                  (right =>\n                                                    (\n                                                      (brackets[left] = right, brackets[right] = left),\n                                                      pc++,\n                                                      optimizer(i + 1, leftstack, brackets)\n                                                    )\n                                                  )(pc))\n                                              )(leftstack[$ - 1])\n                                            : (pc++, optimizer(i + 1, leftstack, brackets))\n                                    )\n                              )(code[i]) : brackets\n                            )\n                        )\n                      )(int.init)\n                    )\n                )(removeTrash(input))\n              )\n            )((string key) => key.split(\"\").filter!(x => operators.canFind(x)).array)\n          )(ulong.init)\n        )(cast(ubyte*)GC.malloc(300000 * ubyte.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE))\n      )(cast(char*) GC.malloc(300000 *  char.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE))\n    )([\">\", \"<\", \"+\", \"-\", \".\", \",\", \"[\", \"]\"])\n  )(\">+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.[-]>++++++++[<++++>-]<.>+++++++++++[<+++++>-]<.>++++++++[<+++>-]<.+++.------.--------.[-]>++++++++[<++++>-]<+.[-]++++++++++.\");\n// => Hello World!\n}\n```\n", "tags": ["dlang", "brainfuck", "D\u8a00\u8a9eLisp"]}