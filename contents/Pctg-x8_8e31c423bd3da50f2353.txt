{"context": " More than 1 year has passed since last update.\u307e\u30603D\u6a5f\u80fd\u304c\u672a\u719f\u306aSiv3D\u3067\u3059\u304c\u30013D\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u7269\u7406(\u525b\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3)\u30a8\u30f3\u30b8\u30f3\u3067\u3042\u308b\u300cODE(Open Dynamics Engine)\u300d\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u904a\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nODE\u306f\u5358\u7d14\u306b\u7269\u7406\u60c5\u5831\u3068\u6319\u52d5\u3001\u304a\u3088\u3073\u885d\u7a81\u5224\u5b9a\u306b\u95a2\u3059\u308b\u90e8\u5206\u306e\u307f\u3092\u53d6\u308a\u6271\u3063\u3066\u304a\u308a\u3001\u7d50\u679c\u306e\u63cf\u753b\u306b\u95a2\u3057\u3066\u306f\u5168\u304f\u95a2\u4e0e\u3057\u3066\u3044\u306a\u3044\u306e\u3067Siv3D\u306b\u304b\u304e\u3089\u305a\u3069\u3093\u306a\u30ec\u30f3\u30c0\u30e9\u3067\u3082\u4f75\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u56de\u8ee2\u3082\u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3\u306b\u3088\u308b\u3082\u306e\u3068\u884c\u5217\u306b\u3088\u308b\u3082\u306e\u306e2\u7a2e\u985e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3\u306e\u5b9f\u88c5\u304c\u306a\u3044\u30ec\u30f3\u30c0\u30e9\u3067\u3082\u96e3\u306a\u304f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n\u74b0\u5883\nVisual Studio 2013\u3001Siv3D(June 2015 v2)\u3001ODE 0.13\u3067\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\nODE\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u30d3\u30eb\u30c9\nODE\u306f\u666e\u901a\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306a\u308b\u306e\u3067\u3001\u5148\u306b\u5358\u4f53\u3067\u30d3\u30eb\u30c9\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n1. \u307e\u305a\u306fsourceforge\u306e\u30da\u30fc\u30b8\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002tar.bz2\u3068tar.gz\u304c\u3042\u308a\u307e\u3059\u304c\u3069\u3061\u3089\u3082\u540c\u3058\u3067\u3059\u3002\n2. \u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\u3057\u3001\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u7f6e\u304d\u307e\u3059\u3002\u79c1\u306f\u5229\u4fbf\u6027\u3068\u304b\u3042\u3068\u3044\u308d\u3044\u308d\u304c\u3042\u308b\u306e\u3067C:/libs\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u305d\u3053\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\n3. ODE\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u3067\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u958b\u304d\u3001build\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u307e\u3059(\u307e\u305f\u306fbuild\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u958b\u304d\u307e\u3059)\u3002\n4. \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\npremake4 --with-demos vs2010\n\n2013\u4ee5\u964d\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u307f\u305f\u3044\u306a\u306e\u3067\u30012010\u5411\u3051\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u304b\u30892013\u3067\u5909\u63db\u3057\u3066\u958b\u304d\u307e\u3059\u3002premake4\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u306a\u3051\u308c\u3070build/vs2010/\u4ee5\u4e0b\u306bode.sln\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u307e\u3059\u3002\n5. \u300c\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\u300d\u3067\u300cDebugDoubleLib\u300d\u3092\u9078\u3093\u3067\u30d3\u30eb\u30c9(F7)\u3057\u307e\u3059\u3002Single\u3082\u3042\u308a\u307e\u3059\u304c\u7cbe\u5ea6\u304c\u62c5\u4fdd\u3067\u304d\u306a\u3044\u306e\u3068\u3001float(Single)\u3088\u308adouble\u306e\u307b\u3046\u304c\u8a08\u7b97\u304c\u307b\u3093\u306e\u3061\u3087\u3063\u3074\u308a\u3060\u3051\u65e9\u3044\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067Double\u3092\u9078\u3073\u307e\u3059\u3002Debug\u306f\u30a8\u30e9\u30fc\u7b87\u6240\u306e\u7279\u5b9a\u3092\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001Lib\u306fDLL\u306e\u5834\u6240\u306b\u3088\u308b\u3084\u3084\u3053\u3057\u3044\u3042\u308c\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb(\u521d\u671f\u5316\u3068\u304b\u307e\u3067)\n\u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u611f\u3058\u306b\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002ODE\u306fdInitODE()\u3067\u59cb\u307e\u3063\u3066dCloseODE()\u3067\u7d42\u4e86\u3067\u3059\u3002\u3042\u3001\u30d1\u30b9\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092ode\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306einclude\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092lib/DebugDoubleLib\u306b\u901a\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u52d5\u304b\u3059\u306b\u306f\u30ef\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059(\u672c\u5f53\u306b\u521d\u671f\u5316\u3059\u308b\u3060\u3051\u306a\u3089\u5fc5\u8981\u306a\u3057)\u3002\u3042\u3068\u3001\u5f8c\u3005\u3053\u308c\u3092\u62e1\u5f35\u3057\u3066\u4f5c\u308a\u305f\u3044\u306e\u3067\u7d99\u627f\u53ef\u80fd\u306a\u3088\u3046\u306b\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n#include <Siv3D.hpp>\n\n#define dDOUBLE\n#include <ode/ode.h>\n#pragma comment(lib, \"ode_doubled\")\n\nclass DynamicsWorld\n{\n    // DynamicsWorld: ODE\u3068\u30ef\u30fc\u30eb\u30c9\n\n    dWorldID world;\npublic:\n    DynamicsWorld()\n    {\n        // ODE\u306e\u521d\u671f\u5316\n        dInitODE();\n\n        // \u30ef\u30fc\u30eb\u30c9\u306e\u4f5c\u6210\u3068\u91cd\u529b\u8a2d\u5b9a(Siv3D\u306f+Y\u304c\u4e0a\u306a\u306e\u3067)\n        this->world = dWorldCreate();\n        dWorldSetGravity(this->world, 0.0, -9.81, 0.0);\n    }\n    virtual ~DynamicsWorld()\n    {\n        // \u30ef\u30fc\u30eb\u30c9\u306e\u524a\u9664\u3068ODE\u306e\u5f8c\u59cb\u672b\n        dWorldDestroy(this->world);\n        dCloseODE();\n    }\n};\n\ntemplate<typename WorldT>\nclass DynamicsManager\n{\n    // DynamicsManager: \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u305f\u3081\u306e\u30af\u30e9\u30b9\n\n    static std::unique_ptr<WorldT> _instance;\npublic:\n    static WorldT* init()\n    {\n        if (!_instance) _instance = std::make_unique<WorldT>();\n        return _instance.get();\n    }\n    static WorldT* get() { return _instance.get(); }\n};\ntemplate<typename WorldT>\nstd::unique_ptr<WorldT> DynamicsManager<WorldT>::_instance;\n// \u3053\u3046\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u72ec\u81ea\u306e\u30ef\u30fc\u30eb\u30c9\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u3066\u4f5c\u3063\u305f\u5834\u5408\u306b\u3053\u3053\u3060\u3051\u4fee\u6b63\u3059\u308c\u3070\u5bfe\u5fdc\u304c\u5b8c\u4e86\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\nusing DynamicsSystem = DynamicsManager<DynamicsWorld>;\n\nvoid Main()\n{\n    auto dynamics = DynamicsSystem::init();\n\n    while (System::Update())\n    {\n\n    }\n}\n\n\u3061\u3087\u3063\u3068\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u5f8c\u3005\u306e\u62e1\u5f35\u6027\u3092\u8003\u3048\u308b\u3068\u3053\u3046\u306a\u308b\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u666e\u901a\u306bMain\u5185\u3067dInitODE()\u3068dCloseODE()\u3092\u547c\u3093\u3067\u30ef\u30fc\u30eb\u30c9\u7ba1\u7406\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u4f5c\u3063\u3066\u3044\u304f\u3046\u3061\u306b\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001ODE\u30b7\u30b9\u30c6\u30e0\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u4e00\u3064\u9650\u5b9a\u306a\u306e\u3067Singleton\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5e8a\u3092\u4f5c\u3063\u3066\u7bb1\u3092\u843d\u3068\u3059\n\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u5165\u9580\u3067\u306f\u5b9a\u756a\u306e\u30a2\u30ec\u3067\u3059(\u4eba\u306b\u3088\u3063\u3066\u306f\u7403\u3092\u843d\u3068\u3057\u307e\u3059\u304c\u3001\u898b\u305f\u76ee\u304c\u5730\u5473\u3059\u304e\u308b\u306e\u3067\u79c1\u306f\u7bb1\u306b\u3057\u3066\u3044\u307e\u3059)\u3002\n// include\u306f\u7701\u7565...\n\nclass DynamicsWorld\n{\n    ...\u7701\u7565...\n\n    ///// \u3053\u3053\u304b\u3089\u8ffd\u52a0 //////\n    auto getWorld() const -> decltype(world) { return this->world; }\n    // \u30ef\u30fc\u30eb\u30c9\u306e\u6642\u9593\u3092\u3059\u3059\u3081\u308b\n    void step(dReal time) { dWorldStep(this->world, time); }\n    ///// \u3053\u3053\u307e\u3067\u8ffd\u52a0 /////\n};\n///// \u3053\u3053\u304b\u3089\u8ffd\u52a0\u30af\u30e9\u30b9 /////\nclass SpaceWorld : public DynamicsWorld\n{\n    // SpaceWorld: \u885d\u7a81\u95a2\u4fc2(\u30b9\u30da\u30fc\u30b9\u3068\u885d\u7a81\u70b9\u30b0\u30eb\u30fc\u30d7)\n\n    dSpaceID collSpace;\n    dJointGroupID contactGroup;\npublic:\n    SpaceWorld() : DynamicsWorld()\n    {\n        this->collSpace = dHashSpaceCreate(0);\n        this->contactGroup = dJointGroupCreate(0);\n    }\n    virtual ~SpaceWorld()\n    {\n        dJointGroupDestroy(this->contactGroup);\n        dSpaceDestroy(this->collSpace);\n    }\n\n    auto getCollisionSpace() const -> decltype(collSpace) { return this->collSpace; }\n    auto getContactGroup() const -> decltype(contactGroup) { return this->contactGroup; }\n};\nclass StaticBox final\n{\n    // StaticBox: \u52d5\u304b\u306a\u3044\u7bb1\n\n    Vec3 size;\n    dGeomID geom;\npublic:\n    StaticBox(const Vec3& size);\n    ~StaticBox();\n};\nclass DynamicsBox final\n{\n    // DynamicsBox: \u52d5\u304f\u7bb1\n\n    Vec3 size;\n    dBodyID body;\n    dGeomID geom;\npublic:\n    DynamicsBox(const Vec3& size, dReal totalMass);\n    DynamicsBox(const Vec3& size) : DynamicsBox(size, 1.0) {}\n    ~DynamicsBox();\n\n    // \u4f4d\u7f6e\u3092\u8a2d\u5b9a\n    void setPosition(const Vec3& size);\n    // \u4f4d\u7f6e\u3092\u53d6\u5f97\n    Vec3 getPosition() const;\n    // \u56de\u8ee2\u3092\u8a2d\u5b9a\n    void setRotation(const Quaternion& q);\n    // \u56de\u8ee2\u3092\u53d6\u5f97\n    Quaternion getRotation() const;\n    // \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    Vec3 getSize() const { return this->size; }\n};\nclass EntityWorld final : public SpaceWorld\n{\n    // EntityWorld: \u5b9f\u4f53\u3068\u304b\n\n    std::unique_ptr<StaticBox> pGround;\n    std::unique_ptr<DynamicsBox> pBox;\n\n    static void nearCallback(void*, dGeomID, dGeomID);\npublic:\n    EntityWorld() : SpaceWorld() {}\n    ~EntityWorld() = default;\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3046\n    void setupWorld();\n\n    // \u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\n    void update();\n\n    auto getGround() const -> decltype(pGround.get()) { return this->pGround.get(); }\n    auto getBox() const -> decltype(pBox.get()) { return this->pBox.get(); }\n};\n///// \u3053\u3053\u307e\u3067\u8ffd\u52a0\u30af\u30e9\u30b9 /////\n\ntemplate<typename WorldT> class DynamicsManager { ...\u7701\u7565... }\n...\u3053\u3053\u3082\u7701\u7565...\n// \u5909\u66f4: DynamicsWorld -> EntityWorld\nusing DynamicsSystem = DynamicsManager<EntityWorld>;\n\nvoid Main()\n{\n    auto dynamics = DynamicsSystem::init();\n    // \u8ffd\u52a0\u30b3\u30fc\u30c9: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n    dynamics->setupWorld();\n\n    while (System::Update())\n    {\n        // \u8ffd\u52a0\u30b3\u30fc\u30c9\n        // \u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\n        dynamics->update();\n\n        Box(Vec3::Zero, Vec3(20.0, 0.125, 20.0)).draw(Palette::White);\n        Box(dynamics->getBox()->getPosition(), Vec3(2.0, 1.0, 1.0), dynamics->getBox()->getRotation()).draw(Palette::Red);\n    }\n}\n\n///// \u3053\u3053\u304b\u3089\u6700\u5f8c\u307e\u3067\u8ffd\u52a0\u5206 /////\nStaticBox::StaticBox(const Vec3& size)\n{\n    this->size = size;\n\n    // \u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u4f5c\u6210\n    this->geom = dCreateBox(DynamicsSystem::get()->getCollisionSpace(), size.x, size.y, size.z);\n}\nStaticBox::~StaticBox()\n{\n    dGeomDestroy(this->geom);\n}\nDynamicsBox::DynamicsBox(const Vec3& size, dReal totalMass)\n{\n    this->size = size;\n\n    // \u30dc\u30c7\u30a3\u3092\u4f5c\u3063\u3066\u8cea\u91cf\u3092\u8a2d\u5b9a\u3059\u308b\n    this->body = dBodyCreate(DynamicsSystem::get()->getWorld());\n    dMass mass;\n    dMassSetZero(&mass);\n    dMassSetBoxTotal(&mass, totalMass, size.x, size.y, size.z);\n    dBodySetMass(this->body, &mass);\n\n    // \u30b8\u30aa\u30e1\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u30dc\u30c7\u30a3\u3092\u30a2\u30bf\u30c3\u30c1\n    this->geom = dCreateBox(DynamicsSystem::get()->getCollisionSpace(), size.x, size.y, size.z);\n    dGeomSetBody(this->geom, this->body);\n}\nDynamicsBox::~DynamicsBox()\n{\n    dGeomDestroy(this->geom);\n    dBodyDestroy(this->body);\n}\nvoid DynamicsBox::setPosition(const Vec3& pos)\n{\n    dBodySetPosition(this->body, pos.x, pos.y, pos.z);\n}\nVec3 DynamicsBox::getPosition() const\n{\n    auto values = dBodyGetPosition(this->body);\n    return Vec3(values[0], values[1], values[2]);\n}\nvoid DynamicsBox::setRotation(const Quaternion& q)\n{\n    // ODE\u306eQuaternion\u306f(w, x, y, z)\u306e\u9806\n    dReal qValues[4] = { q.component.fv.w, q.component.fv.x, q.component.fv.y, q.component.fv.z };\n    dBodySetQuaternion(this->body, qValues);\n}\nQuaternion DynamicsBox::getRotation() const\n{\n    auto qValues = dBodyGetQuaternion(this->body);\n    return Quaternion(qValues[1], qValues[2], qValues[3], qValues[0]);\n}\n\nvoid EntityWorld::setupWorld()\n{\n    // \u5730\u9762\u3068\u7bb1\u306e\u521d\u671f\u5316\n    this->pGround = std::make_unique<StaticBox>(Vec3(20.0, 0.125, 20.0));\n    this->pBox = std::make_unique<DynamicsBox>(Vec3(2.0, 1.0, 1.0));\n\n    // \u3061\u3087\u3063\u3068\u4e0a\u306b\n    this->pBox->setPosition(Vec3(0.0, 5.0, 0.0));\n}\n\nvoid EntityWorld::update()\n{\n    // \u885d\u7a81\u5224\u5b9a\n    dSpaceCollide(this->getCollisionSpace(), nullptr, &EntityWorld::nearCallback);\n    // \u30ef\u30fc\u30eb\u30c9\u6642\u9593\u3092\u3059\u3059\u3081\u308b\n    this->step(1.0 / 60.0);\n    // \u8ffd\u52a0\u3055\u308c\u305f\u885d\u7a81\u70b9\u3092\u5168\u6d88\u53bb\u3059\u308b(\u6b21\u306estep\u3067\u4f5c\u7528\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u306e\u3067)\n    dJointGroupEmpty(this->getContactGroup());\n}\nvoid EntityWorld::nearCallback(void*, dGeomID o1, dGeomID o2)\n{\n    // nearCallback(\u8fd1\u4f3c\u7684\u306b\u885d\u7a81\u5224\u5b9a\u3055\u308c\u305f2\u3064\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u8a73\u7d30\u306a\u5f53\u305f\u308a\u5224\u5b9a\u3092\u884c\u3046)\n    // \u6700\u521d\u4f55\u3084\u3063\u3066\u308b\u304b\u308f\u304b\u3089\u3093\u304b\u3063\u305f\u3051\u3069\u3001\u305f\u3076\u3093dCollide\u3067\u6700\u5927N(\u3053\u3053\u3067\u306f10)\u500b\u306e\u885d\u7a81\u70b9\u3092\u53d6\u3063\u3066\n    // \u305d\u308c\u3092\u3082\u3068\u306bContactJoint\u3092\u4f5c\u3063\u3066JointGroup\u306b\u767b\u9332\u3057\u3066\u308b\u3063\u307d\u3044\n    // \u53c2\u7167: http://www.natural-science.or.jp/article/20110211121736.php\n    const int N = 10;\n    dContact contact[N];\n    auto _this = DynamicsSystem::get();\n\n    int n = dCollide(o1, o2, N, &contact[0].geom, sizeof(dContact));\n    for (int i = 0; i < n; i++)\n    {\n        contact[i].surface.mode = dContactBounce;\n        contact[i].surface.mu = dInfinity;\n        contact[i].surface.bounce = 0.25;\n        contact[i].surface.bounce_vel = 0.0;\n        auto joint = dJointCreateContact(_this->getWorld(), _this->getContactGroup(), &contact[i]);\n        dJointAttach(joint, dGeomGetBody(contact[i].geom.g1), dGeomGetBody(contact[i].geom.g2));\n    }\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3046:\n\n45\u5ea6\u56de\u8ee2\u3055\u305b\u308b(setupWorld\u3067setRotation\u3092\u884c\u3046)\u3068\u3053\u3093\u306a\u611f\u3058:\n\n\u3072\u305f\u3059\u3089\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u304b\u306a\u308a\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u3066\u307e\u3059\u3002\n\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\u5e8a\u306f\u7269\u7406\u6319\u52d5\u3092\u884c\u308f\u305a\u885d\u7a81\u5224\u5b9a\u306e\u307f\u3068\u308c\u308b\u3082\u306e\u3068\u3057\u3066\u3001\u8d64\u3044\u7bb1\u306f\u7269\u7406\u6319\u52d5\u3092\u884c\u3046\u3082\u306e\u3068\u3057\u3066ODE\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\u3059\u308b\n\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u51e6\u7406\u306f(\u57fa\u672c\u7684\u306b\u306f)dWorldStep\u3067\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u30bf\u30a4\u30de\u30fc\u3092\u7528\u610f\u3057\u3066\u6b63\u78ba\u306a\u5dee\u5206\u6642\u9593\u3067\u66f4\u65b0\u3057\u3066\u3044\u3051\u3070...\u3068\u8003\u3048\u308b\u4eba\u304c\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001ODE\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u300c\u3080\u3084\u307f\u306b\u6642\u9593\u3092\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u300d\u307f\u305f\u3044\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3084\u3081\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3001\u3068\u8a18\u61b6\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u30010.13\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3069\u3053\u306b\u3082\u305d\u3093\u306a\u611f\u3058\u306e\u8a18\u8ff0\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u306e\u3067\u30bf\u30a4\u30de\u30fc\u4f7f\u3063\u3066\u5b9f\u969b\u306e\u5dee\u5206\u6642\u9593\u3067\u66f4\u65b0\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305f\u3076\u3093\u3002\u6642\u9593\u306e\u5358\u4f4d\u306f\u79d2\u3067\u3001\u5c0f\u6570\u70b9\u6570\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n\u885d\u7a81\u5224\u5b9a\u307e\u308f\u308a\n\u30ef\u30fc\u30eb\u30c9\u6642\u9593\u3092\u9032\u3081\u308b\u524d\u306b\u885d\u7a81\u5224\u5b9a\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306e\u9593\u306b\u885d\u7a81\u306b\u3088\u308b\u53cd\u767a\u3092\u51e6\u7406\u3057\u3066\u3082\u3089\u3046\u305f\u3081\u3067\u3059\u3002\u3055\u3089\u306b\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306e\u9593\u306e\u307f\u53cd\u767a\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u3067\u3001\u6642\u9593\u3092\u9032\u3081\u305f\u5f8c\u306f\u3059\u3050\u306b\u885d\u7a81\u70b9\u30b8\u30e7\u30a4\u30f3\u30c8\u3092\u3059\u3079\u3066\u6d88\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\n2\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u7cbe\u5bc6\u5224\u5b9a(EntityWorld::nearCallback)\u304c\u304b\u306a\u308a\u3084\u3084\u3053\u3057\u3044\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c(\u30b3\u30e1\u30f3\u30c8\u3067\u3082\u66f8\u3044\u3066\u307e\u3059\u304c)\u3001\u8981\u3059\u308b\u306b\u885d\u7a81\u70b9\u3092\u5f97\u3066\u305d\u308c\u3092\u53cd\u767a\u30b8\u30e7\u30a4\u30f3\u30c8\u306b\u4f5c\u308a\u5909\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u3057\u306a\u3044\u3068\u885d\u7a81\u3057\u3066\u3082\u3059\u308a\u629c\u3051\u307e\u3059\u3002\n\n\u305d\u3082\u305d\u3082\u306a\u305c\u7cbe\u5bc6\u306a\u5224\u5b9a\u304c\u5225\u306b\u5fc5\u8981\u306a\u306e\u304b\n\u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\u306f\u304b\u306a\u308a\u91cd\u3044\u51e6\u7406\u3067\u3059\u3002\u51f8\u5305\u540c\u58eb\u306e\u885d\u7a81\u5224\u5b9a\u3067\u306f\u30df\u30f3\u30b3\u30d5\u30b9\u30ad\u30fc\u5dee\u3092\u53d6\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u5199\u50cf\u3068\u304b\u3044\u308d\u3044\u308d\u6c42\u3081\u306a\u304c\u30892\u51f8\u5305\u306e\u30df\u30f3\u30b3\u30d5\u30b9\u30ad\u30fc\u5dee\u304c\u539f\u70b9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u6c42\u3081\u3066\u885d\u7a81\u5224\u5b9a\u3092\u3059\u308b\u3001GJK\u6cd5\u3068\u547c\u3070\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3059\u308b\u3089\u3057\u3044\u3067\u3059\u304c(GJK\u6cd5\u306fBullet\u3067\u4f7f\u308f\u308c\u3066\u308b\u3089\u3057\u3044)\u3001\u3053\u308c\u306f\u30eb\u30fc\u30d7\u3092\u4f7f\u3046\u306e\u3067\u72b6\u6cc1\u6b21\u7b2c\u3067\u306f\u51e6\u7406\u304c\u9577\u304f\u306a\u308a\u307e\u3059\u3002\n\u81a8\u5927(\u307b\u307c\u7121\u9650\u5927)\u306a3D\u7a7a\u9593\u4e0a\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u885d\u7a81\u3059\u308b\u306e\u306f\u6975\u7a00\u306a\u306e\u3067\u3001\u6bce\u56de\u91cd\u3044\u51e6\u7406\u3092\u3057\u3066\u3044\u305f\u3089\u6027\u80fd\u306b\u5927\u304d\u304f\u97ff\u304d\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u304a\u304a\u307e\u304b\u306a\u5f53\u305f\u308a\u5224\u5b9a(\u7a7a\u9593\u5207\u3063\u3066AABB\u3068\u304b\u3067\u5224\u5b9a\u3057\u3066\u308b\u3068\u601d\u3046)\u3092\u884c\u3063\u3066\u3001\u305d\u308c\u3067\u5f53\u305f\u3063\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u3089\u5148\u306b\u66f8\u3044\u305f\u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u30023\u6b21\u5143\u306eAABB\u306a\u3089\u8a08\u7b97\u5f0f3\u3064\u3060\u3051\u3067\u5224\u5b9a\u3067\u304d\u307e\u3059\u306e\u3067\u3002\n\n\u5fdc\u7528\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3082\u3046\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059(\u304a\u304a\u3052\u3055)\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u30af\u30e9\u30b9\u69cb\u6210\u3068\u306f\u82e5\u5e72\u9055\u3063\u3066\u3044\u307e\u3059\u304c\u3001FPS\u307f\u305f\u3044\u306a\u4f55\u304b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f(\u3053\u308c\u304c\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f)\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u53c2\u8003\u307e\u3067\u306b\n\nMain.cpp\n#include <Siv3D.hpp>\n\n#define dDOUBLE\n#include <ode/ode.h>\n#pragma comment(lib, \"ode_doubled\")\n\n// Key Input Shorten Macro\nstruct CameraController\n{\n    static const double MouseSensitivity;\n    static const double MoveSpeed;\n\n    Vec3 point = Vec3::Backward * 5.0 + Vec3::Up * 1.0;\n    Vec2 rotate = Vec2(0.0, 4.0);\npublic:\n    void update()\n    {\n        const auto mouseDeltas = Window::Center() - Mouse::Pos();\n        this->rotate -= mouseDeltas * MouseSensitivity;\n        const auto camForward = this->getQuaternion();\n        auto moveVector = Vec3::Zero;\n        if (Key('W').pressed) moveVector += Vec3::Forward;\n        if (Key('S').pressed) moveVector += Vec3::Backward;\n        if (Key('A').pressed) moveVector += Vec3::Left;\n        if (Key('D').pressed) moveVector += Vec3::Right;\n        this->point += camForward * moveVector * MoveSpeed;\n        if (Key('Q').pressed) this->point += Vec3::Down * MoveSpeed;\n        if (Key('E').pressed) this->point += Vec3::Up * MoveSpeed;\n\n        Graphics3D::SetCamera(Camera(this->point, this->point + camForward * Vec3::Forward, Vec3::Up, 60.0, 0.1));\n    }\n    void printControls()\n    {\n        Println(L\"Controls: \");\n        Println(L\"  WASD: Camera Move / Cursor: Camera Direction\");\n        Println(L\"  Q: Down / E: Up\");\n    }\n\n    Quaternion getQuaternion() const\n    {\n        return Quaternion::Pitch(Math::Radians(this->rotate.y)).yaw(Math::Radians(this->rotate.x));\n    }\n    Vec3 getForward() const { return this->getQuaternion() * Vec3::Forward; }\n};\nconst double CameraController::MouseSensitivity = 1.0 / 8.0;\nconst double CameraController::MoveSpeed = 1.0 / 8.0;\n\nclass DynamicsWorldBase\n{\n    dWorldID world;\npublic:\n    DynamicsWorldBase()\n    {\n        dInitODE2(0);\n        this->world = dWorldCreate();\n        dWorldSetGravity(this->world, 0.0, -9.81, 0.0);\n    }\n    virtual ~DynamicsWorldBase()\n    {\n        dWorldDestroy(this->world);\n        dCloseODE();\n    }\n\n    auto getWorld() const -> decltype(world) { return this->world; }\n    void stepWorld(dReal time) { dWorldStep(this->world, time); }\n};\nclass DynamicsWorld : public DynamicsWorldBase\n{\n    dSpaceID collSpace;\n    dJointGroupID contactGroup;\npublic:\n    DynamicsWorld() : DynamicsWorldBase()\n    {\n        this->collSpace = dHashSpaceCreate(0);\n        this->contactGroup = dJointGroupCreate(0);\n    }\n    virtual ~DynamicsWorld()\n    {\n        dJointGroupDestroy(this->contactGroup);\n        dSpaceDestroy(this->collSpace);\n    }\n\n    auto getCollisionSpace() const -> decltype(collSpace) { return this->collSpace; }\n    auto getContactGroup() const -> decltype(contactGroup) { return this->contactGroup; }\n    void clearContactJoints() { dJointGroupEmpty(this->contactGroup); }\n};\nstruct DynamicsBox\n{\n    dBodyID body; dMass mass; dGeomID geometry;\n    Vec3 size; ColorF color;\n\n    DynamicsBox(dReal totalMass, dReal lx, dReal ly, dReal lz, const ColorF& col);\n    DynamicsBox(DynamicsBox&& t)\n    {\n        OutputLog(LogDescription::App, L\"Move ctor...\");\n        this->body = t.body;\n        this->mass = std::move(t.mass);\n        this->geometry = t.geometry;\n        this->size = t.size;\n        this->color = t.color;\n        t.body = nullptr;\n        t.geometry = nullptr;\n    }\n    ~DynamicsBox();\n\n    Vec3 getPosition() const;\n    Quaternion getRotation() const;\n    void setPosition(const Vec3& v3);\n    void realize() const;\n};\nclass EntityWorld final : public DynamicsWorld\n{\n    dGeomID ground;\n    std::list<DynamicsBox> boxes, projectiles;\n\n    static void nearCallback(void* pData, dGeomID o1, dGeomID o2);\n    void initGroundGeometry(dReal sizeXZ)\n    {\n        this->ground = dCreateBox(this->getCollisionSpace(), sizeXZ, 0.25, sizeXZ);\n    }\npublic:\n    EntityWorld() : DynamicsWorld()\n    {\n        this->initGroundGeometry(20.0);\n    }\n    ~EntityWorld()\n    {\n        dGeomDestroy(this->ground);\n    }\n\n    void update();\n    void addRandomBox();\n    void addProjectile(const Vec3& origin, const Quaternion& fw);\n    void initBoxPositions();\n    void clearProjectiles();\n    void realizeAll() const;\n};\ntemplate<typename WorldT>\nstruct DynamicsManager\n{\n    static std::unique_ptr<WorldT> pWorldInstance;\npublic:\n    static WorldT* init()\n    {\n        if (pWorldInstance == nullptr) pWorldInstance = std::make_unique<WorldT>();\n        return pWorldInstance.get();\n    }\n    static WorldT* get() { return pWorldInstance.get(); }\n};\ntemplate<typename WorldT> std::unique_ptr<WorldT> DynamicsManager<WorldT>::pWorldInstance;\nusing EntityManager = DynamicsManager<EntityWorld>;\n\nconst double Rate = 800.0;\nvoid Main()\n{\n    CameraController camctrl;\n    TimerMillisec retrigger;\n\n    auto dynamics = EntityManager::init();\n\n    // Graphics Settings\n    Graphics3D::SetAmbientLight(ColorF(0.25f));\n    // Graphics3D::SetLight(0, Light::Directional(Vec3(0.25f, 0.5f, 1.0f), Palette::White));\n    Graphics3D::SetLight(0, Light::Point(Vec3(4.0, 0.5, 4.0), 10.0));\n    Graphics3D::SetLight(1, Light::Point(Vec3(-4.0, 0.5, 4.0), 10.0));\n    Graphics3D::SetLight(2, Light::Point(Vec3(4.0, 0.5, -4.0), 10.0));\n    Graphics3D::SetLight(3, Light::Point(Vec3(-4.0, 0.5, -4.0), 10.0));\n\n    // Dynamics Settings\n    dynamics->initBoxPositions();\n\n    Cursor::SetPos(Window::Center());\n    while (System::Update())\n    {\n        ClearPrint();\n\n        // camctrl\n        camctrl.printControls();\n        camctrl.update();\n        Cursor::SetPos(Window::Center());\n\n        // dynamics control\n        Println(L\"R: Reset Positions\");\n        Println(L\"Z: Add new one and reset positions\");\n        if (Key('R').clicked)\n        {\n            dynamics->clearProjectiles();\n            dynamics->initBoxPositions();\n        }\n        if (Key('Z').clicked)\n        {\n            dynamics->addRandomBox();\n            dynamics->clearProjectiles();\n            dynamics->initBoxPositions();\n        }\n        if (Input::MouseL.pressed)\n        {\n            if (!retrigger.isActive)\n            {\n                dynamics->addProjectile(camctrl.point, camctrl.getQuaternion());\n                retrigger.restart();\n            }\n        }\n        if (Input::MouseL.released)\n        {\n            retrigger.reset();\n        }\n        if (retrigger.elapsed() > (60 * 1000) / Rate)\n        {\n            dynamics->addProjectile(camctrl.point, camctrl.getQuaternion());\n            retrigger.restart();\n        }\n        dynamics->update();\n\n        Box(Vec3::Down * 0.125, Vec3(20.0, 0.25, 20.0), Quaternion::Identity()).draw(Palette::White);\n        dynamics->realizeAll();\n    }\n}\n\n// Physics Core\nvoid EntityWorld::clearProjectiles()\n{\n    this->projectiles.clear();\n}\nvoid EntityWorld::initBoxPositions()\n{\n    Vec3 nextPoint = Vec3::Up * 5.0;\n    for (auto& e : this->boxes)\n    {\n        e.setPosition(nextPoint);\n        nextPoint += Vec3::Up * 1.5 + Quaternion(Vec3::Up, Random(0.0, 360.0)) * Vec3::Forward * Random();\n    }\n}\nvoid EntityWorld::addRandomBox()\n{\n    this->boxes.emplace_back(Random(0.125, 4.0), Random(0.25, 1.0), Random(0.25, 1.0), Random(0.25, 1.0), RandomColorH(1.0, 1.0));\n}\nvoid EntityWorld::addProjectile(const Vec3& origin, const Quaternion& fw)\n{\n    this->projectiles.emplace_back(4.0, 0.125, 0.125, 1.0, Palette::Orangered);\n    dQuaternion dq = { fw.component.fv.w, fw.component.fv.x, fw.component.fv.y, fw.component.fv.z };\n    auto fwvec = fw * Vec3::Forward * 1000.0f * 20.0f;\n    fwvec += Quaternion(Vec3::Forward, Random(0.0, 360.0)) * Vec3::Left * Random(0.0, 0.4) * 1000.0f;\n    dBodySetQuaternion(this->projectiles.back().body, dq);\n    dBodySetPosition(this->projectiles.back().body, origin.x, origin.y, origin.z);\n    dBodySetForce(this->projectiles.back().body, fwvec.x, fwvec.y, fwvec.z);\n}\nvoid EntityWorld::realizeAll() const\n{\n    for (const auto& e : this->boxes) e.realize();\n    for (const auto& e : this->projectiles) e.realize();\n}\n\nDynamicsBox::DynamicsBox(dReal totalMass, dReal lx, dReal ly, dReal lz, const ColorF& col)\n    : size(lx, ly, lz), color(col)\n{\n    this->body = dBodyCreate(EntityManager::get()->getWorld());\n    dMassSetZero(&this->mass);\n    dMassSetBoxTotal(&this->mass, totalMass, lx, ly, lz);\n    dBodySetMass(this->body, &this->mass);\n    this->geometry = dCreateBox(EntityManager::get()->getCollisionSpace(), lx, ly, lz);\n    dGeomSetBody(this->geometry, this->body);\n}\nDynamicsBox::~DynamicsBox()\n{\n    dGeomSetData(this->geometry, nullptr);\n    dGeomDestroy(this->geometry);\n    dBodyDestroy(this->body);\n}\n\nvoid EntityWorld::nearCallback(void*, dGeomID o1, dGeomID o2)\n{\n    const int N = 10;\n    dContact contact[N];\n    auto _this = EntityManager::get();\n\n    int n = dCollide(o1, o2, N, &contact[0].geom, sizeof(dContact));\n    if (n > 0)\n    {\n        // Projectile->Destroy Flags\n        dGeomSetData(o1, reinterpret_cast<void*>(1));\n        dGeomSetData(o2, reinterpret_cast<void*>(1));\n    }\n    for (int i = 0; i < n; i++)\n    {\n        contact[i].surface.mode = dContactBounce;\n        contact[i].surface.mu = dInfinity;\n        contact[i].surface.bounce = 0.25;\n        contact[i].surface.bounce_vel = 0.0;\n        dContactJoint c(_this->getWorld(), _this->getContactGroup(), &contact[i]);\n        c.attach(dGeomGetBody(contact[i].geom.g1), dGeomGetBody(contact[i].geom.g2));\n    }\n}\n\nvoid EntityWorld::update()\n{\n    dSpaceCollide(this->getCollisionSpace(), nullptr, &EntityWorld::nearCallback);\n    this->stepWorld(1.0 / 60.0);\n    this->clearContactJoints();\n\n    // Erase_if(remove_if+erase)\u3092\u4f7f\u3044\u305f\u3044\u3093\u3060\u3051\u3069\u306a\u305c\u304b\u4e0d\u5b9a\u671f\u306b\u30a8\u30e9\u30fc\u3067\u843d\u3061\u308b\u306e\u3067\u6614\u306a\u304c\u3089\u306e\u65b9\u6cd5\u3067\n    for (auto& iter = std::begin(this->projectiles); iter != std::end(this->projectiles);)\n    {\n        if (reinterpret_cast<int>(dGeomGetData(iter->geometry)) == 1)\n        {\n            iter = this->projectiles.erase(iter);\n        }\n        else iter++;\n    }\n}\n\nVec3 DynamicsBox::getPosition() const\n{\n    const auto pVec = dBodyGetPosition(this->body);\n    return Vec3(pVec[0], pVec[1], pVec[2]);\n}\nQuaternion DynamicsBox::getRotation() const\n{\n    const auto pVec = dBodyGetQuaternion(this->body);\n    return Quaternion(pVec[1], pVec[2], pVec[3], pVec[0]);\n}\nvoid DynamicsBox::setPosition(const Vec3& v3)\n{\n    dBodySetForce(this->body, 0, 0, 0);\n    dBodySetLinearVel(this->body, 0, 0, 0);\n    dBodySetAngularVel(this->body, 0, 0, 0);\n    dBodySetPosition(this->body, v3.x, v3.y, v3.z);\n}\nvoid DynamicsBox::realize() const\n{\n    Box(this->getPosition(), this->size, this->getRotation()).draw(this->color);\n}\n\n\n\n\u304a\u308f\u308a\u306b\n\u300cODE\u3067\u904a\u3076\u300d\u3068\u3044\u3046\u3086\u308b\u3044\u30c6\u30fc\u30de\u306e\u5272\u306b\u3042\u3093\u307e\u308a\u3086\u308b\u304f\u306a\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059\u304c(\u5f53\u305f\u308a\u5224\u5b9a\u306e\u8a71\u3068\u304b)\u3001\u76ee\u7684\u306f\u4e00\u756a\u6700\u5f8c\u306e\u3084\u3064(FPS\u3082\u3069\u304d)\u306a\u306e\u3067\u3001\u9053\u4e2d\u306a\u3093\u3066\u5225\u306b\u3069\u3046\u3067\u3082\u3088\u3044\u306e\u3067\u3059\uff08\uff1f\uff09\n\u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306f\u6319\u52d5\u304c\u30ea\u30a2\u30eb\u3059\u304e\u308b\u3086\u3048\u30e1\u30a4\u30f3\u3067\u4f7f\u308f\u308c\u305f\u30b2\u30fc\u30e0\u30bf\u30a4\u30c8\u30eb\u306f\u6570\u3048\u308b\u7a0b\u5ea6\u3057\u304b\u5b9f\u969b\u7121\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\u7269\u7406\u6319\u52d5\u3092\u6d3b\u304b\u3057\u305f\u30b2\u30fc\u30e0\u3068\u306a\u308b\u3068\u3044\u308d\u3044\u308d\u9650\u3089\u308c\u3066\u304f\u308b\u3068\u3053\u308d\u3042\u308a\u307e\u3059\u3057\u3002\u305f\u3060\u3001\u82e6\u52b4\u305b\u305a\u30ea\u30a2\u30eb\u306a\u8868\u73fe\u304c\u624b\u306b\u5165\u308b\u3068\u3044\u3046\u70b9\u3067\u306f\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306f(\u8107\u5f79\u3068\u3057\u3066)\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002ODE\u306f\u521d\u8033\u3067\u3082\u300cHavok\u300d\u3068\u3044\u3046\u540d\u524d\u306f\u805e\u3044\u305f\u3053\u3068\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u53c2\u8003\u3068\u3057\u3066Skyrim\u3067\u306f\u3001(\u5b9f\u306fHavok\u306f\u30ad\u30e3\u30e9\u30af\u30bf\u306e\u6319\u52d5\u306b\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u7269\u7406\u6f14\u7b97\u3092\u3059\u308b\u3068\u3044\u3046\u70b9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3092\u5f53\u3066\u308c\u3070\u3001)\u4f8b\u3048\u3070\u673a\u4e0a\u306e\u5c0f\u7269\u304c\u8ee2\u304c\u308a\u843d\u3061\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u8868\u73fe\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bHavok\u306f\u6a5f\u80fd\u9650\u5b9a\u3067\u3059\u304c\u7121\u6599\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d5\u30eb\u30bb\u30c3\u30c8\u306e\u4f7f\u7528\u3084PC\u4ee5\u5916\u3067\u306e\u914d\u5e03\u3001\u6709\u6599($10\u4ee5\u4e0a)\u914d\u5e03\u3092\u8003\u3048\u3066\u3044\u308b\u969b\u306f\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u8cfc\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7121\u6599\u3067\u30d7\u30ed\u30e6\u30fc\u30b9\u306e\u7269\u7406\u6f14\u7b97\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u306e\u306f\u9b45\u529b\u7684\u306a\u306e\u3067\u305c\u3072ODE\u3092\u89e6\u3063\u305f\u5f8c\u306b\u3067\u3082\u5c11\u3057\u89e6\u3063\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nSiv3D\u306e3D\u8868\u73fe\u80fd\u529b\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c(\u5f71\u3059\u3089\u306a\u3044\u306e\u3067)\u3001\u6700\u8fd1\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u59cb\u307e\u3063\u305f\u308aTODO\u306bfbx\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30dd\u30fc\u30c8\u4e88\u5b9a\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u30673D\u65b9\u9762\u3082\u9806\u3005\u306b\u5f37\u5316\u3055\u308c\u3066\u3044\u304f\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3076\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u7269\u7406\u30a8\u30f3\u30b8\u30f3ODE\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7d39\u4ecb\u3068Siv3D\u3068\u306e\u4f75\u7528\u4f8b\u306e\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\n\u53c2\u8003\u6587\u732e\n\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u8b1b\u5ea7ODE (Open Dynamic Engine) \u5165\u9580\uff0fnatural science Laboratory http://www.natural-science.or.jp/laboratory/ode_intro.php\n\n\u60c5\u5831\u30e1\u30c7\u30a3\u30a2\u5b9f\u9a13 http://slis.tsukuba.ac.jp/~fujisawa.makoto.fu/lecture/iml/text/3_collision.html\n\n \u5927\u30d2\u30c3\u30c8\u306e\u30b2\u30fc\u30e0\u4f5c\u54c1\u300eThe Elder Scrolls\u00ae V: Skyrim\u2122\u300f\u304cHavok\u88fd\u54c1\u3092\u63a1\u7528 | Business Wire http://www.businesswire.com/news/home/20111205006732/ja/\n\n\n\n\u307e\u30603D\u6a5f\u80fd\u304c\u672a\u719f\u306aSiv3D\u3067\u3059\u304c\u30013D\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u7269\u7406(\u525b\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3)\u30a8\u30f3\u30b8\u30f3\u3067\u3042\u308b\u300c[ODE(Open Dynamics Engine)](http://www.ode.org/)\u300d\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u904a\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nODE\u306f\u5358\u7d14\u306b\u7269\u7406\u60c5\u5831\u3068\u6319\u52d5\u3001\u304a\u3088\u3073\u885d\u7a81\u5224\u5b9a\u306b\u95a2\u3059\u308b\u90e8\u5206\u306e\u307f\u3092\u53d6\u308a\u6271\u3063\u3066\u304a\u308a\u3001\u7d50\u679c\u306e\u63cf\u753b\u306b\u95a2\u3057\u3066\u306f\u5168\u304f\u95a2\u4e0e\u3057\u3066\u3044\u306a\u3044\u306e\u3067Siv3D\u306b\u304b\u304e\u3089\u305a\u3069\u3093\u306a\u30ec\u30f3\u30c0\u30e9\u3067\u3082\u4f75\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u56de\u8ee2\u3082\u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3\u306b\u3088\u308b\u3082\u306e\u3068\u884c\u5217\u306b\u3088\u308b\u3082\u306e\u306e2\u7a2e\u985e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30a9\u30fc\u30bf\u30cb\u30aa\u30f3\u306e\u5b9f\u88c5\u304c\u306a\u3044\u30ec\u30f3\u30c0\u30e9\u3067\u3082\u96e3\u306a\u304f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\n\n## \u74b0\u5883\nVisual Studio 2013\u3001Siv3D(June 2015 v2)\u3001ODE 0.13\u3067\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n## ODE\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u30d3\u30eb\u30c9\nODE\u306f\u666e\u901a\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306a\u308b\u306e\u3067\u3001\u5148\u306b\u5358\u4f53\u3067\u30d3\u30eb\u30c9\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n1. \u307e\u305a\u306f[sourceforge\u306e\u30da\u30fc\u30b8](http://sourceforge.net/projects/opende/files/)\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002tar.bz2\u3068tar.gz\u304c\u3042\u308a\u307e\u3059\u304c\u3069\u3061\u3089\u3082\u540c\u3058\u3067\u3059\u3002\n2. \u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\u3057\u3001\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u7f6e\u304d\u307e\u3059\u3002\u79c1\u306f\u5229\u4fbf\u6027\u3068\u304b\u3042\u3068\u3044\u308d\u3044\u308d\u304c\u3042\u308b\u306e\u3067C:/libs\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u305d\u3053\u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\u3002\n3. ODE\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u3067\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u958b\u304d\u3001build\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u307e\u3059(\u307e\u305f\u306fbuild\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u958b\u304d\u307e\u3059)\u3002\n4. \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\npremake4 --with-demos vs2010\n```\n2013\u4ee5\u964d\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u307f\u305f\u3044\u306a\u306e\u3067\u30012010\u5411\u3051\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u304b\u30892013\u3067\u5909\u63db\u3057\u3066\u958b\u304d\u307e\u3059\u3002premake4\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u306a\u3051\u308c\u3070build/vs2010/\u4ee5\u4e0b\u306bode.sln\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u307e\u3059\u3002\n5. \u300c\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\u300d\u3067\u300cDebugDoubleLib\u300d\u3092\u9078\u3093\u3067\u30d3\u30eb\u30c9(F7)\u3057\u307e\u3059\u3002Single\u3082\u3042\u308a\u307e\u3059\u304c\u7cbe\u5ea6\u304c\u62c5\u4fdd\u3067\u304d\u306a\u3044\u306e\u3068\u3001float(Single)\u3088\u308adouble\u306e\u307b\u3046\u304c\u8a08\u7b97\u304c\u307b\u3093\u306e\u3061\u3087\u3063\u3074\u308a\u3060\u3051\u65e9\u3044\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\u306e\u3067Double\u3092\u9078\u3073\u307e\u3059\u3002Debug\u306f\u30a8\u30e9\u30fc\u7b87\u6240\u306e\u7279\u5b9a\u3092\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001Lib\u306fDLL\u306e\u5834\u6240\u306b\u3088\u308b\u3084\u3084\u3053\u3057\u3044\u3042\u308c\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u3067\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb(\u521d\u671f\u5316\u3068\u304b\u307e\u3067)\n\u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u611f\u3058\u306b\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002ODE\u306fdInitODE()\u3067\u59cb\u307e\u3063\u3066dCloseODE()\u3067\u7d42\u4e86\u3067\u3059\u3002\u3042\u3001\u30d1\u30b9\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3092ode\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306einclude\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092lib/DebugDoubleLib\u306b\u901a\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u52d5\u304b\u3059\u306b\u306f\u30ef\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u306a\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059(\u672c\u5f53\u306b\u521d\u671f\u5316\u3059\u308b\u3060\u3051\u306a\u3089\u5fc5\u8981\u306a\u3057)\u3002\u3042\u3068\u3001\u5f8c\u3005\u3053\u308c\u3092\u62e1\u5f35\u3057\u3066\u4f5c\u308a\u305f\u3044\u306e\u3067\u7d99\u627f\u53ef\u80fd\u306a\u3088\u3046\u306b\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp\n#include <Siv3D.hpp>\n\n#define dDOUBLE\n#include <ode/ode.h>\n#pragma comment(lib, \"ode_doubled\")\n\nclass DynamicsWorld\n{\n\t// DynamicsWorld: ODE\u3068\u30ef\u30fc\u30eb\u30c9\n\n\tdWorldID world;\npublic:\n\tDynamicsWorld()\n\t{\n\t\t// ODE\u306e\u521d\u671f\u5316\n\t\tdInitODE();\n\t\t\n\t\t// \u30ef\u30fc\u30eb\u30c9\u306e\u4f5c\u6210\u3068\u91cd\u529b\u8a2d\u5b9a(Siv3D\u306f+Y\u304c\u4e0a\u306a\u306e\u3067)\n\t\tthis->world = dWorldCreate();\n\t\tdWorldSetGravity(this->world, 0.0, -9.81, 0.0);\n\t}\n\tvirtual ~DynamicsWorld()\n\t{\n\t\t// \u30ef\u30fc\u30eb\u30c9\u306e\u524a\u9664\u3068ODE\u306e\u5f8c\u59cb\u672b\n\t\tdWorldDestroy(this->world);\n\t\tdCloseODE();\n\t}\n};\n\ntemplate<typename WorldT>\nclass DynamicsManager\n{\n    // DynamicsManager: \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u305f\u3081\u306e\u30af\u30e9\u30b9\n    \n\tstatic std::unique_ptr<WorldT> _instance;\npublic:\n\tstatic WorldT* init()\n\t{\n\t\tif (!_instance) _instance = std::make_unique<WorldT>();\n\t\treturn _instance.get();\n\t}\n\tstatic WorldT* get() { return _instance.get(); }\n};\ntemplate<typename WorldT>\nstd::unique_ptr<WorldT> DynamicsManager<WorldT>::_instance;\n// \u3053\u3046\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u72ec\u81ea\u306e\u30ef\u30fc\u30eb\u30c9\u30af\u30e9\u30b9\u3092\u62e1\u5f35\u3057\u3066\u4f5c\u3063\u305f\u5834\u5408\u306b\u3053\u3053\u3060\u3051\u4fee\u6b63\u3059\u308c\u3070\u5bfe\u5fdc\u304c\u5b8c\u4e86\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\nusing DynamicsSystem = DynamicsManager<DynamicsWorld>;\n\nvoid Main()\n{\n\tauto dynamics = DynamicsSystem::init();\n\n\twhile (System::Update())\n\t{\n\n\t}\n}\n```\n\u3061\u3087\u3063\u3068\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u5f8c\u3005\u306e\u62e1\u5f35\u6027\u3092\u8003\u3048\u308b\u3068\u3053\u3046\u306a\u308b\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u666e\u901a\u306bMain\u5185\u3067dInitODE()\u3068dCloseODE()\u3092\u547c\u3093\u3067\u30ef\u30fc\u30eb\u30c9\u7ba1\u7406\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u4f5c\u3063\u3066\u3044\u304f\u3046\u3061\u306b\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001ODE\u30b7\u30b9\u30c6\u30e0\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u4e00\u3064\u9650\u5b9a\u306a\u306e\u3067Singleton\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u5e8a\u3092\u4f5c\u3063\u3066\u7bb1\u3092\u843d\u3068\u3059\n\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u5165\u9580\u3067\u306f\u5b9a\u756a\u306e\u30a2\u30ec\u3067\u3059(\u4eba\u306b\u3088\u3063\u3066\u306f\u7403\u3092\u843d\u3068\u3057\u307e\u3059\u304c\u3001\u898b\u305f\u76ee\u304c\u5730\u5473\u3059\u304e\u308b\u306e\u3067\u79c1\u306f\u7bb1\u306b\u3057\u3066\u3044\u307e\u3059)\u3002\n\n```cpp\n// include\u306f\u7701\u7565...\n\nclass DynamicsWorld\n{\n\t...\u7701\u7565...\n    \n\t///// \u3053\u3053\u304b\u3089\u8ffd\u52a0 //////\n\tauto getWorld() const -> decltype(world) { return this->world; }\n\t// \u30ef\u30fc\u30eb\u30c9\u306e\u6642\u9593\u3092\u3059\u3059\u3081\u308b\n\tvoid step(dReal time) { dWorldStep(this->world, time); }\n\t///// \u3053\u3053\u307e\u3067\u8ffd\u52a0 /////\n};\n///// \u3053\u3053\u304b\u3089\u8ffd\u52a0\u30af\u30e9\u30b9 /////\nclass SpaceWorld : public DynamicsWorld\n{\n\t// SpaceWorld: \u885d\u7a81\u95a2\u4fc2(\u30b9\u30da\u30fc\u30b9\u3068\u885d\u7a81\u70b9\u30b0\u30eb\u30fc\u30d7)\n\n\tdSpaceID collSpace;\n\tdJointGroupID contactGroup;\npublic:\n\tSpaceWorld() : DynamicsWorld()\n\t{\n\t\tthis->collSpace = dHashSpaceCreate(0);\n\t\tthis->contactGroup = dJointGroupCreate(0);\n\t}\n\tvirtual ~SpaceWorld()\n\t{\n\t\tdJointGroupDestroy(this->contactGroup);\n\t\tdSpaceDestroy(this->collSpace);\n\t}\n\n\tauto getCollisionSpace() const -> decltype(collSpace) { return this->collSpace; }\n\tauto getContactGroup() const -> decltype(contactGroup) { return this->contactGroup; }\n};\nclass StaticBox final\n{\n\t// StaticBox: \u52d5\u304b\u306a\u3044\u7bb1\n\n\tVec3 size;\n\tdGeomID geom;\npublic:\n\tStaticBox(const Vec3& size);\n\t~StaticBox();\n};\nclass DynamicsBox final\n{\n\t// DynamicsBox: \u52d5\u304f\u7bb1\n\t\n\tVec3 size;\n\tdBodyID body;\n\tdGeomID geom;\npublic:\n\tDynamicsBox(const Vec3& size, dReal totalMass);\n\tDynamicsBox(const Vec3& size) : DynamicsBox(size, 1.0) {}\n\t~DynamicsBox();\n\n\t// \u4f4d\u7f6e\u3092\u8a2d\u5b9a\n\tvoid setPosition(const Vec3& size);\n\t// \u4f4d\u7f6e\u3092\u53d6\u5f97\n\tVec3 getPosition() const;\n\t// \u56de\u8ee2\u3092\u8a2d\u5b9a\n\tvoid setRotation(const Quaternion& q);\n\t// \u56de\u8ee2\u3092\u53d6\u5f97\n\tQuaternion getRotation() const;\n\t// \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n\tVec3 getSize() const { return this->size; }\n};\nclass EntityWorld final : public SpaceWorld\n{\n\t// EntityWorld: \u5b9f\u4f53\u3068\u304b\n\n\tstd::unique_ptr<StaticBox> pGround;\n\tstd::unique_ptr<DynamicsBox> pBox;\n\n\tstatic void nearCallback(void*, dGeomID, dGeomID);\npublic:\n\tEntityWorld() : SpaceWorld() {}\n\t~EntityWorld() = default;\n\n\t// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3046\n\tvoid setupWorld();\n\n\t// \u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\n\tvoid update();\n\n\tauto getGround() const -> decltype(pGround.get()) { return this->pGround.get(); }\n\tauto getBox() const -> decltype(pBox.get()) { return this->pBox.get(); }\n};\n///// \u3053\u3053\u307e\u3067\u8ffd\u52a0\u30af\u30e9\u30b9 /////\n\ntemplate<typename WorldT> class DynamicsManager { ...\u7701\u7565... }\n...\u3053\u3053\u3082\u7701\u7565...\n// \u5909\u66f4: DynamicsWorld -> EntityWorld\nusing DynamicsSystem = DynamicsManager<EntityWorld>;\n\nvoid Main()\n{\n\tauto dynamics = DynamicsSystem::init();\n    // \u8ffd\u52a0\u30b3\u30fc\u30c9: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n\tdynamics->setupWorld();\n\n\twhile (System::Update())\n\t{\n\t\t// \u8ffd\u52a0\u30b3\u30fc\u30c9\n\t\t// \u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\n\t\tdynamics->update();\n\n\t\tBox(Vec3::Zero, Vec3(20.0, 0.125, 20.0)).draw(Palette::White);\n\t\tBox(dynamics->getBox()->getPosition(), Vec3(2.0, 1.0, 1.0), dynamics->getBox()->getRotation()).draw(Palette::Red);\n\t}\n}\n\n///// \u3053\u3053\u304b\u3089\u6700\u5f8c\u307e\u3067\u8ffd\u52a0\u5206 /////\nStaticBox::StaticBox(const Vec3& size)\n{\n\tthis->size = size;\n\n\t// \u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u4f5c\u6210\n\tthis->geom = dCreateBox(DynamicsSystem::get()->getCollisionSpace(), size.x, size.y, size.z);\n}\nStaticBox::~StaticBox()\n{\n\tdGeomDestroy(this->geom);\n}\nDynamicsBox::DynamicsBox(const Vec3& size, dReal totalMass)\n{\n\tthis->size = size;\n\n\t// \u30dc\u30c7\u30a3\u3092\u4f5c\u3063\u3066\u8cea\u91cf\u3092\u8a2d\u5b9a\u3059\u308b\n\tthis->body = dBodyCreate(DynamicsSystem::get()->getWorld());\n\tdMass mass;\n\tdMassSetZero(&mass);\n\tdMassSetBoxTotal(&mass, totalMass, size.x, size.y, size.z);\n\tdBodySetMass(this->body, &mass);\n\t\n\t// \u30b8\u30aa\u30e1\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u30dc\u30c7\u30a3\u3092\u30a2\u30bf\u30c3\u30c1\n\tthis->geom = dCreateBox(DynamicsSystem::get()->getCollisionSpace(), size.x, size.y, size.z);\n\tdGeomSetBody(this->geom, this->body);\n}\nDynamicsBox::~DynamicsBox()\n{\n\tdGeomDestroy(this->geom);\n\tdBodyDestroy(this->body);\n}\nvoid DynamicsBox::setPosition(const Vec3& pos)\n{\n\tdBodySetPosition(this->body, pos.x, pos.y, pos.z);\n}\nVec3 DynamicsBox::getPosition() const\n{\n\tauto values = dBodyGetPosition(this->body);\n\treturn Vec3(values[0], values[1], values[2]);\n}\nvoid DynamicsBox::setRotation(const Quaternion& q)\n{\n\t// ODE\u306eQuaternion\u306f(w, x, y, z)\u306e\u9806\n\tdReal qValues[4] = { q.component.fv.w, q.component.fv.x, q.component.fv.y, q.component.fv.z };\n\tdBodySetQuaternion(this->body, qValues);\n}\nQuaternion DynamicsBox::getRotation() const\n{\n\tauto qValues = dBodyGetQuaternion(this->body);\n\treturn Quaternion(qValues[1], qValues[2], qValues[3], qValues[0]);\n}\n\nvoid EntityWorld::setupWorld()\n{\n\t// \u5730\u9762\u3068\u7bb1\u306e\u521d\u671f\u5316\n\tthis->pGround = std::make_unique<StaticBox>(Vec3(20.0, 0.125, 20.0));\n\tthis->pBox = std::make_unique<DynamicsBox>(Vec3(2.0, 1.0, 1.0));\n\n\t// \u3061\u3087\u3063\u3068\u4e0a\u306b\n\tthis->pBox->setPosition(Vec3(0.0, 5.0, 0.0));\n}\n\nvoid EntityWorld::update()\n{\n\t// \u885d\u7a81\u5224\u5b9a\n\tdSpaceCollide(this->getCollisionSpace(), nullptr, &EntityWorld::nearCallback);\n\t// \u30ef\u30fc\u30eb\u30c9\u6642\u9593\u3092\u3059\u3059\u3081\u308b\n\tthis->step(1.0 / 60.0);\n\t// \u8ffd\u52a0\u3055\u308c\u305f\u885d\u7a81\u70b9\u3092\u5168\u6d88\u53bb\u3059\u308b(\u6b21\u306estep\u3067\u4f5c\u7528\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u306e\u3067)\n\tdJointGroupEmpty(this->getContactGroup());\n}\nvoid EntityWorld::nearCallback(void*, dGeomID o1, dGeomID o2)\n{\n\t// nearCallback(\u8fd1\u4f3c\u7684\u306b\u885d\u7a81\u5224\u5b9a\u3055\u308c\u305f2\u3064\u306e\u30b8\u30aa\u30e1\u30c8\u30ea\u306e\u8a73\u7d30\u306a\u5f53\u305f\u308a\u5224\u5b9a\u3092\u884c\u3046)\n\t// \u6700\u521d\u4f55\u3084\u3063\u3066\u308b\u304b\u308f\u304b\u3089\u3093\u304b\u3063\u305f\u3051\u3069\u3001\u305f\u3076\u3093dCollide\u3067\u6700\u5927N(\u3053\u3053\u3067\u306f10)\u500b\u306e\u885d\u7a81\u70b9\u3092\u53d6\u3063\u3066\n\t// \u305d\u308c\u3092\u3082\u3068\u306bContactJoint\u3092\u4f5c\u3063\u3066JointGroup\u306b\u767b\u9332\u3057\u3066\u308b\u3063\u307d\u3044\n\t// \u53c2\u7167: http://www.natural-science.or.jp/article/20110211121736.php\n\tconst int N = 10;\n\tdContact contact[N];\n\tauto _this = DynamicsSystem::get();\n\n\tint n = dCollide(o1, o2, N, &contact[0].geom, sizeof(dContact));\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcontact[i].surface.mode = dContactBounce;\n\t\tcontact[i].surface.mu = dInfinity;\n\t\tcontact[i].surface.bounce = 0.25;\n\t\tcontact[i].surface.bounce_vel = 0.0;\n\t\tauto joint = dJointCreateContact(_this->getWorld(), _this->getContactGroup(), &contact[i]);\n\t\tdJointAttach(joint, dGeomGetBody(contact[i].geom.g1), dGeomGetBody(contact[i].geom.g2));\n\t}\n}\n```\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3046:\n![20151202-005547-282.gif](https://qiita-image-store.s3.amazonaws.com/0/94115/c2e1bb35-8aa3-c40f-65e1-564def38bea3.gif)\n45\u5ea6\u56de\u8ee2\u3055\u305b\u308b(setupWorld\u3067setRotation\u3092\u884c\u3046)\u3068\u3053\u3093\u306a\u611f\u3058:\n![20151202-005759-701.gif](https://qiita-image-store.s3.amazonaws.com/0/94115/0e943898-ba82-deba-9655-d5818bc0f7c2.gif)\n\u3072\u305f\u3059\u3089\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u304b\u306a\u308a\u3084\u3084\u3053\u3057\u304f\u306a\u3063\u3066\u307e\u3059\u3002\n\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\u5e8a\u306f\u7269\u7406\u6319\u52d5\u3092\u884c\u308f\u305a\u885d\u7a81\u5224\u5b9a\u306e\u307f\u3068\u308c\u308b\u3082\u306e\u3068\u3057\u3066\u3001\u8d64\u3044\u7bb1\u306f\u7269\u7406\u6319\u52d5\u3092\u884c\u3046\u3082\u306e\u3068\u3057\u3066ODE\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n### \u30ef\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\u3059\u308b\n\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u51e6\u7406\u306f(\u57fa\u672c\u7684\u306b\u306f)**dWorldStep**\u3067\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u30bf\u30a4\u30de\u30fc\u3092\u7528\u610f\u3057\u3066\u6b63\u78ba\u306a\u5dee\u5206\u6642\u9593\u3067\u66f4\u65b0\u3057\u3066\u3044\u3051\u3070...\u3068\u8003\u3048\u308b\u4eba\u304c\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001ODE\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u300c\u3080\u3084\u307f\u306b\u6642\u9593\u3092\u5909\u66f4\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u300d\u307f\u305f\u3044\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3084\u3081\u305f\u307b\u3046\u304c\u3044\u3044\u3067\u3059\u3001\u3068\u8a18\u61b6\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u30010.13\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3069\u3053\u306b\u3082\u305d\u3093\u306a\u611f\u3058\u306e\u8a18\u8ff0\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u306e\u3067\u30bf\u30a4\u30de\u30fc\u4f7f\u3063\u3066\u5b9f\u969b\u306e\u5dee\u5206\u6642\u9593\u3067\u66f4\u65b0\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305f\u3076\u3093\u3002\u6642\u9593\u306e\u5358\u4f4d\u306f\u79d2\u3067\u3001\u5c0f\u6570\u70b9\u6570\u304c\u4f7f\u3048\u307e\u3059\u3002\n### \u885d\u7a81\u5224\u5b9a\u307e\u308f\u308a\n\u30ef\u30fc\u30eb\u30c9\u6642\u9593\u3092\u9032\u3081\u308b\u524d\u306b\u885d\u7a81\u5224\u5b9a\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306e\u9593\u306b\u885d\u7a81\u306b\u3088\u308b\u53cd\u767a\u3092\u51e6\u7406\u3057\u3066\u3082\u3089\u3046\u305f\u3081\u3067\u3059\u3002\u3055\u3089\u306b\u30ef\u30fc\u30eb\u30c9\u66f4\u65b0\u306e\u9593**\u306e\u307f**\u53cd\u767a\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u3067\u3001\u6642\u9593\u3092\u9032\u3081\u305f\u5f8c\u306f\u3059\u3050\u306b\u885d\u7a81\u70b9\u30b8\u30e7\u30a4\u30f3\u30c8\u3092\u3059\u3079\u3066\u6d88\u3057\u3066\u3044\u307e\u3059\u3002\n### \u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\n2\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u7cbe\u5bc6\u5224\u5b9a(EntityWorld::nearCallback)\u304c\u304b\u306a\u308a\u3084\u3084\u3053\u3057\u3044\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c(\u30b3\u30e1\u30f3\u30c8\u3067\u3082\u66f8\u3044\u3066\u307e\u3059\u304c)\u3001\u8981\u3059\u308b\u306b\u885d\u7a81\u70b9\u3092\u5f97\u3066\u305d\u308c\u3092\u53cd\u767a\u30b8\u30e7\u30a4\u30f3\u30c8\u306b\u4f5c\u308a\u5909\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u3057\u306a\u3044\u3068\u885d\u7a81\u3057\u3066\u3082\u3059\u308a\u629c\u3051\u307e\u3059\u3002\n### \u305d\u3082\u305d\u3082\u306a\u305c\u7cbe\u5bc6\u306a\u5224\u5b9a\u304c\u5225\u306b\u5fc5\u8981\u306a\u306e\u304b\n\u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\u306f\u304b\u306a\u308a\u91cd\u3044\u51e6\u7406\u3067\u3059\u3002\u51f8\u5305\u540c\u58eb\u306e\u885d\u7a81\u5224\u5b9a\u3067\u306f\u30df\u30f3\u30b3\u30d5\u30b9\u30ad\u30fc\u5dee\u3092\u53d6\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u5199\u50cf\u3068\u304b\u3044\u308d\u3044\u308d\u6c42\u3081\u306a\u304c\u30892\u51f8\u5305\u306e\u30df\u30f3\u30b3\u30d5\u30b9\u30ad\u30fc\u5dee\u304c\u539f\u70b9\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3092\u6c42\u3081\u3066\u885d\u7a81\u5224\u5b9a\u3092\u3059\u308b\u3001GJK\u6cd5\u3068\u547c\u3070\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3059\u308b\u3089\u3057\u3044\u3067\u3059\u304c(GJK\u6cd5\u306fBullet\u3067\u4f7f\u308f\u308c\u3066\u308b\u3089\u3057\u3044)\u3001\u3053\u308c\u306f\u30eb\u30fc\u30d7\u3092\u4f7f\u3046\u306e\u3067\u72b6\u6cc1\u6b21\u7b2c\u3067\u306f\u51e6\u7406\u304c\u9577\u304f\u306a\u308a\u307e\u3059\u3002\n\u81a8\u5927(\u307b\u307c\u7121\u9650\u5927)\u306a3D\u7a7a\u9593\u4e0a\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u885d\u7a81\u3059\u308b\u306e\u306f\u6975\u7a00\u306a\u306e\u3067\u3001\u6bce\u56de\u91cd\u3044\u51e6\u7406\u3092\u3057\u3066\u3044\u305f\u3089\u6027\u80fd\u306b\u5927\u304d\u304f\u97ff\u304d\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u304a\u304a\u307e\u304b\u306a\u5f53\u305f\u308a\u5224\u5b9a(\u7a7a\u9593\u5207\u3063\u3066AABB\u3068\u304b\u3067\u5224\u5b9a\u3057\u3066\u308b\u3068\u601d\u3046)\u3092\u884c\u3063\u3066\u3001\u305d\u308c\u3067\u5f53\u305f\u3063\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u3089\u5148\u306b\u66f8\u3044\u305f\u7cbe\u5bc6\u306a\u885d\u7a81\u5224\u5b9a\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u30023\u6b21\u5143\u306eAABB\u306a\u3089\u8a08\u7b97\u5f0f3\u3064\u3060\u3051\u3067\u5224\u5b9a\u3067\u304d\u307e\u3059\u306e\u3067\u3002\n\n## \u5fdc\u7528\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3082\u3046\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059(\u304a\u304a\u3052\u3055)\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u30af\u30e9\u30b9\u69cb\u6210\u3068\u306f\u82e5\u5e72\u9055\u3063\u3066\u3044\u307e\u3059\u304c\u3001FPS\u307f\u305f\u3044\u306a\u4f55\u304b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f(\u3053\u308c\u304c\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f)\u3002\n![20151202-011646-496.gif](https://qiita-image-store.s3.amazonaws.com/0/94115/d77e1bb4-3917-8c18-ab33-c67542d68998.gif)\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\u53c2\u8003\u307e\u3067\u306b\n\n```cpp:Main.cpp\n#include <Siv3D.hpp>\n\n#define dDOUBLE\n#include <ode/ode.h>\n#pragma comment(lib, \"ode_doubled\")\n\n// Key Input Shorten Macro\nstruct CameraController\n{\n\tstatic const double MouseSensitivity;\n\tstatic const double MoveSpeed;\n\n\tVec3 point = Vec3::Backward * 5.0 + Vec3::Up * 1.0;\n\tVec2 rotate = Vec2(0.0, 4.0);\npublic:\n\tvoid update()\n\t{\n\t\tconst auto mouseDeltas = Window::Center() - Mouse::Pos();\n\t\tthis->rotate -= mouseDeltas * MouseSensitivity;\n\t\tconst auto camForward = this->getQuaternion();\n\t\tauto moveVector = Vec3::Zero;\n\t\tif (Key('W').pressed) moveVector += Vec3::Forward;\n\t\tif (Key('S').pressed) moveVector += Vec3::Backward;\n\t\tif (Key('A').pressed) moveVector += Vec3::Left;\n\t\tif (Key('D').pressed) moveVector += Vec3::Right;\n\t\tthis->point += camForward * moveVector * MoveSpeed;\n\t\tif (Key('Q').pressed) this->point += Vec3::Down * MoveSpeed;\n\t\tif (Key('E').pressed) this->point += Vec3::Up * MoveSpeed;\n\n\t\tGraphics3D::SetCamera(Camera(this->point, this->point + camForward * Vec3::Forward, Vec3::Up, 60.0, 0.1));\n\t}\n\tvoid printControls()\n\t{\n\t\tPrintln(L\"Controls: \");\n\t\tPrintln(L\"  WASD: Camera Move / Cursor: Camera Direction\");\n\t\tPrintln(L\"  Q: Down / E: Up\");\n\t}\n\n\tQuaternion getQuaternion() const\n\t{\n\t\treturn Quaternion::Pitch(Math::Radians(this->rotate.y)).yaw(Math::Radians(this->rotate.x));\n\t}\n\tVec3 getForward() const { return this->getQuaternion() * Vec3::Forward; }\n};\nconst double CameraController::MouseSensitivity = 1.0 / 8.0;\nconst double CameraController::MoveSpeed = 1.0 / 8.0;\n\nclass DynamicsWorldBase\n{\n\tdWorldID world;\npublic:\n\tDynamicsWorldBase()\n\t{\n\t\tdInitODE2(0);\n\t\tthis->world = dWorldCreate();\n\t\tdWorldSetGravity(this->world, 0.0, -9.81, 0.0);\n\t}\n\tvirtual ~DynamicsWorldBase()\n\t{\n\t\tdWorldDestroy(this->world);\n\t\tdCloseODE();\n\t}\n\n\tauto getWorld() const -> decltype(world) { return this->world; }\n\tvoid stepWorld(dReal time) { dWorldStep(this->world, time); }\n};\nclass DynamicsWorld : public DynamicsWorldBase\n{\n\tdSpaceID collSpace;\n\tdJointGroupID contactGroup;\npublic:\n\tDynamicsWorld() : DynamicsWorldBase()\n\t{\n\t\tthis->collSpace = dHashSpaceCreate(0);\n\t\tthis->contactGroup = dJointGroupCreate(0);\n\t}\n\tvirtual ~DynamicsWorld()\n\t{\n\t\tdJointGroupDestroy(this->contactGroup);\n\t\tdSpaceDestroy(this->collSpace);\n\t}\n\n\tauto getCollisionSpace() const -> decltype(collSpace) { return this->collSpace; }\n\tauto getContactGroup() const -> decltype(contactGroup) { return this->contactGroup; }\n\tvoid clearContactJoints() { dJointGroupEmpty(this->contactGroup); }\n};\nstruct DynamicsBox\n{\n\tdBodyID body; dMass mass; dGeomID geometry;\n\tVec3 size; ColorF color;\n\n\tDynamicsBox(dReal totalMass, dReal lx, dReal ly, dReal lz, const ColorF& col);\n\tDynamicsBox(DynamicsBox&& t)\n\t{\n\t\tOutputLog(LogDescription::App, L\"Move ctor...\");\n\t\tthis->body = t.body;\n\t\tthis->mass = std::move(t.mass);\n\t\tthis->geometry = t.geometry;\n\t\tthis->size = t.size;\n\t\tthis->color = t.color;\n\t\tt.body = nullptr;\n\t\tt.geometry = nullptr;\n\t}\n\t~DynamicsBox();\n\n\tVec3 getPosition() const;\n\tQuaternion getRotation() const;\n\tvoid setPosition(const Vec3& v3);\n\tvoid realize() const;\n};\nclass EntityWorld final : public DynamicsWorld\n{\n\tdGeomID ground;\n\tstd::list<DynamicsBox> boxes, projectiles;\n\n\tstatic void nearCallback(void* pData, dGeomID o1, dGeomID o2);\n\tvoid initGroundGeometry(dReal sizeXZ)\n\t{\n\t\tthis->ground = dCreateBox(this->getCollisionSpace(), sizeXZ, 0.25, sizeXZ);\n\t}\npublic:\n\tEntityWorld() : DynamicsWorld()\n\t{\n\t\tthis->initGroundGeometry(20.0);\n\t}\n\t~EntityWorld()\n\t{\n\t\tdGeomDestroy(this->ground);\n\t}\n\n\tvoid update();\n\tvoid addRandomBox();\n\tvoid addProjectile(const Vec3& origin, const Quaternion& fw);\n\tvoid initBoxPositions();\n\tvoid clearProjectiles();\n\tvoid realizeAll() const;\n};\ntemplate<typename WorldT>\nstruct DynamicsManager\n{\n\tstatic std::unique_ptr<WorldT> pWorldInstance;\npublic:\n\tstatic WorldT* init()\n\t{\n\t\tif (pWorldInstance == nullptr) pWorldInstance = std::make_unique<WorldT>();\n\t\treturn pWorldInstance.get();\n\t}\n\tstatic WorldT* get() { return pWorldInstance.get(); }\n};\ntemplate<typename WorldT> std::unique_ptr<WorldT> DynamicsManager<WorldT>::pWorldInstance;\nusing EntityManager = DynamicsManager<EntityWorld>;\n\nconst double Rate = 800.0;\nvoid Main()\n{\n\tCameraController camctrl;\n\tTimerMillisec retrigger;\n\n\tauto dynamics = EntityManager::init();\n\n\t// Graphics Settings\n\tGraphics3D::SetAmbientLight(ColorF(0.25f));\n\t// Graphics3D::SetLight(0, Light::Directional(Vec3(0.25f, 0.5f, 1.0f), Palette::White));\n\tGraphics3D::SetLight(0, Light::Point(Vec3(4.0, 0.5, 4.0), 10.0));\n\tGraphics3D::SetLight(1, Light::Point(Vec3(-4.0, 0.5, 4.0), 10.0));\n\tGraphics3D::SetLight(2, Light::Point(Vec3(4.0, 0.5, -4.0), 10.0));\n\tGraphics3D::SetLight(3, Light::Point(Vec3(-4.0, 0.5, -4.0), 10.0));\n\n\t// Dynamics Settings\n\tdynamics->initBoxPositions();\n\n\tCursor::SetPos(Window::Center());\n\twhile (System::Update())\n\t{\n\t\tClearPrint();\n\n\t\t// camctrl\n\t\tcamctrl.printControls();\n\t\tcamctrl.update();\n\t\tCursor::SetPos(Window::Center());\n\n\t\t// dynamics control\n\t\tPrintln(L\"R: Reset Positions\");\n\t\tPrintln(L\"Z: Add new one and reset positions\");\n\t\tif (Key('R').clicked)\n\t\t{\n\t\t\tdynamics->clearProjectiles();\n\t\t\tdynamics->initBoxPositions();\n\t\t}\n\t\tif (Key('Z').clicked)\n\t\t{\n\t\t\tdynamics->addRandomBox();\n\t\t\tdynamics->clearProjectiles();\n\t\t\tdynamics->initBoxPositions();\n\t\t}\n\t\tif (Input::MouseL.pressed)\n\t\t{\n\t\t\tif (!retrigger.isActive)\n\t\t\t{\n\t\t\t\tdynamics->addProjectile(camctrl.point, camctrl.getQuaternion());\n\t\t\t\tretrigger.restart();\n\t\t\t}\n\t\t}\n\t\tif (Input::MouseL.released)\n\t\t{\n\t\t\tretrigger.reset();\n\t\t}\n\t\tif (retrigger.elapsed() > (60 * 1000) / Rate)\n\t\t{\n\t\t\tdynamics->addProjectile(camctrl.point, camctrl.getQuaternion());\n\t\t\tretrigger.restart();\n\t\t}\n\t\tdynamics->update();\n\n\t\tBox(Vec3::Down * 0.125, Vec3(20.0, 0.25, 20.0), Quaternion::Identity()).draw(Palette::White);\n\t\tdynamics->realizeAll();\n\t}\n}\n\n// Physics Core\nvoid EntityWorld::clearProjectiles()\n{\n\tthis->projectiles.clear();\n}\nvoid EntityWorld::initBoxPositions()\n{\n\tVec3 nextPoint = Vec3::Up * 5.0;\n\tfor (auto& e : this->boxes)\n\t{\n\t\te.setPosition(nextPoint);\n\t\tnextPoint += Vec3::Up * 1.5 + Quaternion(Vec3::Up, Random(0.0, 360.0)) * Vec3::Forward * Random();\n\t}\n}\nvoid EntityWorld::addRandomBox()\n{\n\tthis->boxes.emplace_back(Random(0.125, 4.0), Random(0.25, 1.0), Random(0.25, 1.0), Random(0.25, 1.0), RandomColorH(1.0, 1.0));\n}\nvoid EntityWorld::addProjectile(const Vec3& origin, const Quaternion& fw)\n{\n\tthis->projectiles.emplace_back(4.0, 0.125, 0.125, 1.0, Palette::Orangered);\n\tdQuaternion dq = { fw.component.fv.w, fw.component.fv.x, fw.component.fv.y, fw.component.fv.z };\n\tauto fwvec = fw * Vec3::Forward * 1000.0f * 20.0f;\n\tfwvec += Quaternion(Vec3::Forward, Random(0.0, 360.0)) * Vec3::Left * Random(0.0, 0.4) * 1000.0f;\n\tdBodySetQuaternion(this->projectiles.back().body, dq);\n\tdBodySetPosition(this->projectiles.back().body, origin.x, origin.y, origin.z);\n\tdBodySetForce(this->projectiles.back().body, fwvec.x, fwvec.y, fwvec.z);\n}\nvoid EntityWorld::realizeAll() const\n{\n\tfor (const auto& e : this->boxes) e.realize();\n\tfor (const auto& e : this->projectiles) e.realize();\n}\n\nDynamicsBox::DynamicsBox(dReal totalMass, dReal lx, dReal ly, dReal lz, const ColorF& col)\n\t: size(lx, ly, lz), color(col)\n{\n\tthis->body = dBodyCreate(EntityManager::get()->getWorld());\n\tdMassSetZero(&this->mass);\n\tdMassSetBoxTotal(&this->mass, totalMass, lx, ly, lz);\n\tdBodySetMass(this->body, &this->mass);\n\tthis->geometry = dCreateBox(EntityManager::get()->getCollisionSpace(), lx, ly, lz);\n\tdGeomSetBody(this->geometry, this->body);\n}\nDynamicsBox::~DynamicsBox()\n{\n\tdGeomSetData(this->geometry, nullptr);\n\tdGeomDestroy(this->geometry);\n\tdBodyDestroy(this->body);\n}\n\nvoid EntityWorld::nearCallback(void*, dGeomID o1, dGeomID o2)\n{\n\tconst int N = 10;\n\tdContact contact[N];\n\tauto _this = EntityManager::get();\n\n\tint n = dCollide(o1, o2, N, &contact[0].geom, sizeof(dContact));\n\tif (n > 0)\n\t{\n\t\t// Projectile->Destroy Flags\n\t\tdGeomSetData(o1, reinterpret_cast<void*>(1));\n\t\tdGeomSetData(o2, reinterpret_cast<void*>(1));\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcontact[i].surface.mode = dContactBounce;\n\t\tcontact[i].surface.mu = dInfinity;\n\t\tcontact[i].surface.bounce = 0.25;\n\t\tcontact[i].surface.bounce_vel = 0.0;\n\t\tdContactJoint c(_this->getWorld(), _this->getContactGroup(), &contact[i]);\n\t\tc.attach(dGeomGetBody(contact[i].geom.g1), dGeomGetBody(contact[i].geom.g2));\n\t}\n}\n\nvoid EntityWorld::update()\n{\n\tdSpaceCollide(this->getCollisionSpace(), nullptr, &EntityWorld::nearCallback);\n\tthis->stepWorld(1.0 / 60.0);\n\tthis->clearContactJoints();\n\t\n\t// Erase_if(remove_if+erase)\u3092\u4f7f\u3044\u305f\u3044\u3093\u3060\u3051\u3069\u306a\u305c\u304b\u4e0d\u5b9a\u671f\u306b\u30a8\u30e9\u30fc\u3067\u843d\u3061\u308b\u306e\u3067\u6614\u306a\u304c\u3089\u306e\u65b9\u6cd5\u3067\n\tfor (auto& iter = std::begin(this->projectiles); iter != std::end(this->projectiles);)\n\t{\n\t\tif (reinterpret_cast<int>(dGeomGetData(iter->geometry)) == 1)\n\t\t{\n\t\t\titer = this->projectiles.erase(iter);\n\t\t}\n\t\telse iter++;\n\t}\n}\n\nVec3 DynamicsBox::getPosition() const\n{\n\tconst auto pVec = dBodyGetPosition(this->body);\n\treturn Vec3(pVec[0], pVec[1], pVec[2]);\n}\nQuaternion DynamicsBox::getRotation() const\n{\n\tconst auto pVec = dBodyGetQuaternion(this->body);\n\treturn Quaternion(pVec[1], pVec[2], pVec[3], pVec[0]);\n}\nvoid DynamicsBox::setPosition(const Vec3& v3)\n{\n\tdBodySetForce(this->body, 0, 0, 0);\n\tdBodySetLinearVel(this->body, 0, 0, 0);\n\tdBodySetAngularVel(this->body, 0, 0, 0);\n\tdBodySetPosition(this->body, v3.x, v3.y, v3.z);\n}\nvoid DynamicsBox::realize() const\n{\n\tBox(this->getPosition(), this->size, this->getRotation()).draw(this->color);\n}\n```\n\n## \u304a\u308f\u308a\u306b\n\u300cODE\u3067\u904a\u3076\u300d\u3068\u3044\u3046\u3086\u308b\u3044\u30c6\u30fc\u30de\u306e\u5272\u306b\u3042\u3093\u307e\u308a\u3086\u308b\u304f\u306a\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059\u304c(\u5f53\u305f\u308a\u5224\u5b9a\u306e\u8a71\u3068\u304b)\u3001\u76ee\u7684\u306f\u4e00\u756a\u6700\u5f8c\u306e\u3084\u3064(FPS\u3082\u3069\u304d)\u306a\u306e\u3067\u3001\u9053\u4e2d\u306a\u3093\u3066\u5225\u306b\u3069\u3046\u3067\u3082\u3088\u3044\u306e\u3067\u3059\uff08\uff1f\uff09\n\u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306f\u6319\u52d5\u304c\u30ea\u30a2\u30eb\u3059\u304e\u308b\u3086\u3048\u30e1\u30a4\u30f3\u3067\u4f7f\u308f\u308c\u305f\u30b2\u30fc\u30e0\u30bf\u30a4\u30c8\u30eb\u306f\u6570\u3048\u308b\u7a0b\u5ea6\u3057\u304b\u5b9f\u969b\u7121\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\u7269\u7406\u6319\u52d5\u3092\u6d3b\u304b\u3057\u305f\u30b2\u30fc\u30e0\u3068\u306a\u308b\u3068\u3044\u308d\u3044\u308d\u9650\u3089\u308c\u3066\u304f\u308b\u3068\u3053\u308d\u3042\u308a\u307e\u3059\u3057\u3002\u305f\u3060\u3001\u82e6\u52b4\u305b\u305a\u30ea\u30a2\u30eb\u306a\u8868\u73fe\u304c\u624b\u306b\u5165\u308b\u3068\u3044\u3046\u70b9\u3067\u306f\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u306f(\u8107\u5f79\u3068\u3057\u3066)\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002ODE\u306f\u521d\u8033\u3067\u3082\u300cHavok\u300d\u3068\u3044\u3046\u540d\u524d\u306f\u805e\u3044\u305f\u3053\u3068\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u53c2\u8003\u3068\u3057\u3066Skyrim\u3067\u306f\u3001(\u5b9f\u306fHavok\u306f\u30ad\u30e3\u30e9\u30af\u30bf\u306e\u6319\u52d5\u306b\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u7269\u7406\u6f14\u7b97\u3092\u3059\u308b\u3068\u3044\u3046\u70b9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3092\u5f53\u3066\u308c\u3070\u3001)\u4f8b\u3048\u3070\u673a\u4e0a\u306e\u5c0f\u7269\u304c\u8ee2\u304c\u308a\u843d\u3061\u308b\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u8868\u73fe\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bHavok\u306f\u6a5f\u80fd\u9650\u5b9a\u3067\u3059\u304c\u7121\u6599\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d5\u30eb\u30bb\u30c3\u30c8\u306e\u4f7f\u7528\u3084PC\u4ee5\u5916\u3067\u306e\u914d\u5e03\u3001\u6709\u6599($10\u4ee5\u4e0a)\u914d\u5e03\u3092\u8003\u3048\u3066\u3044\u308b\u969b\u306f\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u8cfc\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7121\u6599\u3067\u30d7\u30ed\u30e6\u30fc\u30b9\u306e\u7269\u7406\u6f14\u7b97\u304c\u4f7f\u3048\u308b\u3068\u3044\u3046\u306e\u306f\u9b45\u529b\u7684\u306a\u306e\u3067\u305c\u3072ODE\u3092\u89e6\u3063\u305f\u5f8c\u306b\u3067\u3082\u5c11\u3057\u89e6\u3063\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nSiv3D\u306e3D\u8868\u73fe\u80fd\u529b\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c(\u5f71\u3059\u3089\u306a\u3044\u306e\u3067)\u3001\u6700\u8fd1\u30b7\u30a7\u30fc\u30c0\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u59cb\u307e\u3063\u305f\u308aTODO\u306bfbx\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30dd\u30fc\u30c8\u4e88\u5b9a\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u30673D\u65b9\u9762\u3082\u9806\u3005\u306b\u5f37\u5316\u3055\u308c\u3066\u3044\u304f\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3076\u3093\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u7269\u7406\u30a8\u30f3\u30b8\u30f3ODE\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7d39\u4ecb\u3068Siv3D\u3068\u306e\u4f75\u7528\u4f8b\u306e\u7d39\u4ecb\u3067\u3057\u305f\u3002\n\n## \u53c2\u8003\u6587\u732e\n+ \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u8b1b\u5ea7ODE (Open Dynamic Engine) \u5165\u9580\uff0fnatural science Laboratory http://www.natural-science.or.jp/laboratory/ode_intro.php\n+ \u60c5\u5831\u30e1\u30c7\u30a3\u30a2\u5b9f\u9a13 http://slis.tsukuba.ac.jp/~fujisawa.makoto.fu/lecture/iml/text/3_collision.html\n+  \u5927\u30d2\u30c3\u30c8\u306e\u30b2\u30fc\u30e0\u4f5c\u54c1\u300eThe Elder Scrolls\u00ae V: Skyrim\u2122\u300f\u304cHavok\u88fd\u54c1\u3092\u63a1\u7528 | Business Wire http://www.businesswire.com/news/home/20111205006732/ja/\n", "tags": ["Siv3D", "C++", "OpenDynamicsEngine"]}