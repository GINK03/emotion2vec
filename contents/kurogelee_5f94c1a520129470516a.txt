{"context": " More than 1 year has passed since last update.\uff08\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\uff09\u8907\u6570\u884c\u306b\u5bfe\u3059\u308b\u8907\u6570\u306e\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u306e\u7d50\u679c\u3092\u30de\u30c3\u30d7\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\nre-find\n\u307e\u305a\u306f\u3001\u4e00\u756a\u7c21\u5358\u306are-find\u7d50\u679c\u3092\u30de\u30c3\u30d7\u306b\u5909\u63db\u3059\u308b\u5834\u5408\n\nre-findmap.clj\n(defn wrap-vec [x] (if-not (sequential? x) [x] (vec x)))\n(defn re-find->map [re s & keys]\n  (when-let [v (re-find re s)]\n    (apply hash-map (interleave keys (wrap-vec v)))))\n\n\nuser=> (re-find #\".\\d(.)\" \"some1234abc\")\n[\"e12\" \"2\"]\nuser=> (re-find->map #\".\\d(.)\" \"some1234abc\" :1 :2)\n{:1 \"e12\", :2 \"2\"}\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u8907\u6570\u884c\u3078\u306e\u8907\u6570\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u6700\u521d\u306b\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u3092\u7d50\u679c\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30de\u30c3\u30c1\u6e08\u307f\u306e\u6b63\u898f\u8868\u73fe\u306e\u6bd4\u8f03\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\u4ee5\u964d\u306e\u884c\u3082\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u203breduce\u3092\u4f7f\u3063\u3066\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u304c\u3082\u3063\u3068\u8907\u96d1\u3067\u3057\u305f\u3002\n\u203b\u30b9\u30ad\u30c3\u30d7\u306a\u3057\u306a\u3089re-seq\u306e\u4f8b\u3068\u540c\u3058\u304f\u3089\u3044\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\nre-find-linesmap.clj\n(defn zipseq [& colls] (apply map list colls))\n(defn indexed [coll] (zipseq (range) coll))\n\n(defn- count<> [colls f] (->> (map count colls) (apply f)))\n(defn count<  [& colls] (count<> colls <))\n\n(defn re-find-lines->map [lines & re-keys-pairs]\n  {:pre[(even? (count re-keys-pairs))]}\n  (let [rk-list (indexed (partition 2 re-keys-pairs))\n        m (java.util.LinkedHashMap.)]\n    (doseq [line lines\n            [i [re keys]] rk-list\n            :while (count< m rk-list)\n            :when (not (contains? m i))\n            :let [v (apply re-find->map re line (wrap-vec keys))]\n            :when v] (.put m i v))\n    (apply merge (reverse (vals m)))))\n\n\nuser=> (re-find-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"A\" :a)\n{:a \"A\", :1 \"e12\", :2 \"2\"}\nuser=> (re-find-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"\\d\" :a)\n{:a \"1\", :1 \"e12\", :2 \"2\"}\n\n\nre-seq\nre-seq\u306e\u5834\u5408\u3082\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3067\u304d\u307e\u3059\u3002\n\nre-seqmap.clj\n(defn re-seq->map [re s & keys]\n  (when-let [v (re-seq re s)]\n    (apply hash-map (interleave keys (apply zipseq (map wrap-vec v))))))\n\n\nuser=> (re-seq #\".\\d(.)\" \"some1234abc\")\n([\"e12\" \"2\"] [\"34a\" \"a\"])\nuser=> (re-seq->map #\".\\d(.)\" \"some1234abc\" :1 :2)\n{:1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\n\n\u8907\u6570\u884c\u3001\u8907\u6570\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u3002\nre-find\u306e\u4f8b\u3088\u308a\u7c21\u5358\u3067\u3059\u3002\n\nre-seq-linesmap.clj\n(defn re-seq-lines->map [lines & re-keys-pairs]\n  {:pre[(even? (count re-keys-pairs))]}\n  (->> (for [line lines [re keys] (partition 2 re-keys-pairs)]\n         (apply re-seq->map re line (wrap-vec keys)))\n       (apply merge-with concat)))\n\n\nuser=> (re-seq-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"A\" :a)\n{:a (\"A\"), :1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\nuser=> (re-seq-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"\\d\" :a)\n{:a (\"1\" \"2\" \"3\" \"4\" \"9\"), :1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\n\n\u3046\u307e\u304f\u3067\u304d\u307e\u3057\u305f\u3002\n\uff08\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\uff09\u8907\u6570\u884c\u306b\u5bfe\u3059\u308b\u8907\u6570\u306e\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u306e\u7d50\u679c\u3092\u30de\u30c3\u30d7\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n#### re-find\n\n\u307e\u305a\u306f\u3001\u4e00\u756a\u7c21\u5358\u306are-find\u7d50\u679c\u3092\u30de\u30c3\u30d7\u306b\u5909\u63db\u3059\u308b\u5834\u5408\n\n```re-findmap.clj\n(defn wrap-vec [x] (if-not (sequential? x) [x] (vec x)))\n(defn re-find->map [re s & keys]\n  (when-let [v (re-find re s)]\n    (apply hash-map (interleave keys (wrap-vec v)))))\n```\n\n```\nuser=> (re-find #\".\\d(.)\" \"some1234abc\")\n[\"e12\" \"2\"]\nuser=> (re-find->map #\".\\d(.)\" \"some1234abc\" :1 :2)\n{:1 \"e12\", :2 \"2\"}\n```\n\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u8907\u6570\u884c\u3078\u306e\u8907\u6570\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u6700\u521d\u306b\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u3092\u7d50\u679c\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30de\u30c3\u30c1\u6e08\u307f\u306e\u6b63\u898f\u8868\u73fe\u306e\u6bd4\u8f03\u306f\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\u4ee5\u964d\u306e\u884c\u3082\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u203breduce\u3092\u4f7f\u3063\u3066\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u304c\u3082\u3063\u3068\u8907\u96d1\u3067\u3057\u305f\u3002\n\u203b\u30b9\u30ad\u30c3\u30d7\u306a\u3057\u306a\u3089re-seq\u306e\u4f8b\u3068\u540c\u3058\u304f\u3089\u3044\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\n```re-find-linesmap.clj\n(defn zipseq [& colls] (apply map list colls))\n(defn indexed [coll] (zipseq (range) coll))\n\n(defn- count<> [colls f] (->> (map count colls) (apply f)))\n(defn count<  [& colls] (count<> colls <))\n\n(defn re-find-lines->map [lines & re-keys-pairs]\n  {:pre[(even? (count re-keys-pairs))]}\n  (let [rk-list (indexed (partition 2 re-keys-pairs))\n        m (java.util.LinkedHashMap.)]\n    (doseq [line lines\n            [i [re keys]] rk-list\n            :while (count< m rk-list)\n            :when (not (contains? m i))\n            :let [v (apply re-find->map re line (wrap-vec keys))]\n            :when v] (.put m i v))\n    (apply merge (reverse (vals m)))))\n```\n\n```\nuser=> (re-find-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"A\" :a)\n{:a \"A\", :1 \"e12\", :2 \"2\"}\nuser=> (re-find-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"\\d\" :a)\n{:a \"1\", :1 \"e12\", :2 \"2\"}\n```\n\n#### re-seq\nre-seq\u306e\u5834\u5408\u3082\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3067\u304d\u307e\u3059\u3002\n\n```re-seqmap.clj\n(defn re-seq->map [re s & keys]\n  (when-let [v (re-seq re s)]\n    (apply hash-map (interleave keys (apply zipseq (map wrap-vec v))))))\n```\n\n```\nuser=> (re-seq #\".\\d(.)\" \"some1234abc\")\n([\"e12\" \"2\"] [\"34a\" \"a\"])\nuser=> (re-seq->map #\".\\d(.)\" \"some1234abc\" :1 :2)\n{:1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\n```\n\n\u8907\u6570\u884c\u3001\u8907\u6570\u6b63\u898f\u8868\u73fe\u30de\u30c3\u30c1\u3002\nre-find\u306e\u4f8b\u3088\u308a\u7c21\u5358\u3067\u3059\u3002\n\n```re-seq-linesmap.clj\n(defn re-seq-lines->map [lines & re-keys-pairs]\n  {:pre[(even? (count re-keys-pairs))]}\n  (->> (for [line lines [re keys] (partition 2 re-keys-pairs)]\n         (apply re-seq->map re line (wrap-vec keys)))\n       (apply merge-with concat)))\n```\n\n```\nuser=> (re-seq-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"A\" :a)\n{:a (\"A\"), :1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\nuser=> (re-seq-lines->map [\"some1234abc\", \"A9\"] #\".\\d(.)\" [:1 :2] #\"\\d\" :a)\n{:a (\"1\" \"2\" \"3\" \"4\" \"9\"), :1 (\"e12\" \"34a\"), :2 (\"2\" \"a\")}\n```\n\n\u3046\u307e\u304f\u3067\u304d\u307e\u3057\u305f\u3002", "tags": ["Clojure1.6.0"]}