{"tags": ["Python", "python3", "NLP", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "ngram"], "context": "\n\n\u3010 \u53c2\u8003 \u3011\n\n\nhttp://stackoverflow.com/questions/12488722/counting-bigrams-pair-of-two-words-in-a-file-using-python\n\n\n\n\u3010 \u5099\u8003 \u3011\n\nR\u8a00\u8a9e \u306e RMeCab\u30d1\u30c3\u30b1\u30fc\u30b8 \u306b NgramDF\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u3001\u672c\u8a18\u4e8b \u6a19\u984c\u3068\u540c\u3058\u6a5f\u80fd \u304c \u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u983b\u7e41\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u3001\u672c\u8a18\u4e8b \u3067 \u8aac\u660e\u3059\u308b Python\u306e\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9 \u304c \u5f79\u306b\u7acb\u3061\u307e\u3059\u3002\n\nHirofumiYashima Qiita\u8a18\u4e8b \uff082016/09/09\uff09 \u300c\u3010 R\u8a00\u8a9e \u3067 N-gram \u3011\u300c\u5358\u8a9eA\u6587\u5b57\u5217 \u5358\u8a9eB\u6587\u5b57\u5217 \u5358\u8a9eA\u3068\u5358\u8a9eB\u306e\u5171\u8d77\u56de\u6570\u300d\u306e\uff13\u5217\u5f62\u5f0f \u306e \uff12\u5358\u8a9e \u5171\u8d77\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 \u306e \u4f5c\u308a\u65b9\u300d\n\n\n\u4ee5\u4e0b\u306e\u5b9f\u884c\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u3053\u3068\u304c\u3042\u308b\n\n\nR\nNgram exceeds 40000\nNgramDF(\"trial_japanese_corpus.txt\", type = 1, N = 2) \u3067\u30a8\u30e9\u30fc: \nSET_VECTOR_ELT() can only be applied to a 'list', not a 'character'\n\n\n\n\n\n\n\u3010 \u5b9f\u884c\u74b0\u5883 \u3011\n\n\nMacBook OS X\nPython 3\u74b0\u5883\nPython MeCab\u30e2\u30b8\u30e5\u30fc\u30eb \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\n\nPython 3 \u74b0\u5883 \u306b RMeCab \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u969b\u306e\u624b\u9806\u306f\u3001\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\ngrachro\u3055\u3093 Qiita\u8a18\u4e8b\uff082016/03/01\uff09\u300cPython3\u3067\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3MeCab\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b(2016\u5e743\u6708\u7248)\u300d\n\n\n2-gram\n\n\nsentence2owakati\u30e1\u30bd\u30c3\u30c9\n\n\nsentence2owakati\u30e1\u30bd\u30c3\u30c9\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Owakati\")\n    return m.parse(sentence)\n\n\n\n\n\n\u3010 \u5f8c\u65e5\u8ffd\u8a18 \u3011\n\n\nmecab-ipadic-neologd \uff08 \u6700\u65b0\u6d41\u884c\u8a9e\u30fb\u6642\u4e8b\u7528\u8a9e \u304c \u767b\u9332\u3055\u308c\u305f \u8f9e\u66f8 \uff09\u3092 \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d \u306b\u3059\u308b\u5834\u5408 \u306f\u3001\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3002\n\n\nsentence2owakati\u30e1\u30bd\u30c3\u30c9\uff08\u6539\u826f\uff09\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n    return m.parse(sentence)\n\n\n\uff08 \u53c2\u8003 \uff09\n\nHirofumiYashima Qiita\u8a18\u4e8b \uff082016/08/30\uff09 \u300cmecab-ipadic-neologd \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d\u3059\u308b\u306b\u306f\u3001mecab -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd \u306e \u5f8c\u306b -Owakati \u3092 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u306b \u4e0e\u3048\u308c\u3070 \u51fa\u6765\u308b\u300d\n\n\n\nsentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9\n\n\u4ee5\u4e0b \u304c \u9375\n\nresult = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n\n\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206\n\nzip(sentence_owakati_list, sentence_owakati_list[1:])\n\n\nsentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9\ndef sentence2bigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n\n\n\n\n\uff08 \u4f7f\u3044\u65b9 \uff09\n\n\nPython 3.5.2\n>>> sentence = \"\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\"\n>>> \n\n\n\nPython 3.5.2\n>>> result_list = []\n>>>\n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>> print(tmp_list)\n['\u3002 \\\\n 1', '\u306f \u5ddd 1', '\u307e\u3057 \u305f 1', '\u4f4e \u6c17\u5727 1', '\u6e29\u5e2f \u4f4e 1', '\u3057 \u305f 1', '\u305f \u304c 1', '\u306e \u5317 1', '\u304c \u7d9a\u304d 1', '\u6c17\u5727 \u306b 1', '\u5317\u6d77\u9053 \u306e 1', '\u7d9a\u304d \u3001 1', '\u5ddd \u304c 1', '\u304c \u3001 1', '\u306e \u6c34\u4f4d 1', '\u306b \u5909\u308f\u308a 1', '\u3082 \u3042\u308a 1', '\u304c \u6c3e\u6feb 1', '\u53f0\u98a8 \uff19 1', '\u5ddd \u306e 1', '\u307e\u3059 \u3002 1', '\u3001 \u5ddd 1', '\u306f \u5317\u6d77\u9053 1', '\u3042\u308a \u307e\u3059 1', '\u5730\u57df \u3082 1', '\u3001 \u5317\u6d77\u9053 1', '\u3067 \u306f 1', '\u5317 \u306e 1', '\u304c \u9ad8\u3044 1', '\uff19 \u53f7 1', '\u5317\u6d77\u9053 \u3067 1', '\u53f7 \u306f 1', '\u6c3e\u6feb \u3057 1', '\u5909\u308f\u308a \u307e\u3057 1', '\u6c34\u4f4d \u304c 1', '\u305f \u5730\u57df 1', '\u72b6\u614b \u304c 1', '\u9ad8\u3044 \u72b6\u614b 1', '\u6d77\u4e0a \u3067 1', '\u306e \u6d77\u4e0a 1', '\u3067 \u6e29\u5e2f 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u3002 \\\\n 1',\n '\u306f \u5ddd 1',\n '\u307e\u3057 \u305f 1',\n '\u4f4e \u6c17\u5727 1',\n '\u6e29\u5e2f \u4f4e 1',\n '\u3057 \u305f 1',\n '\u305f \u304c 1',\n '\u306e \u5317 1',\n '\u304c \u7d9a\u304d 1',\n '\u6c17\u5727 \u306b 1',\n '\u5317\u6d77\u9053 \u306e 1',\n '\u7d9a\u304d \u3001 1',\n '\u5ddd \u304c 1',\n '\u304c \u3001 1',\n '\u306e \u6c34\u4f4d 1',\n '\u306b \u5909\u308f\u308a 1',\n '\u3082 \u3042\u308a 1',\n '\u304c \u6c3e\u6feb 1',\n '\u53f0\u98a8 \uff19 1',\n '\u5ddd \u306e 1',\n '\u307e\u3059 \u3002 1',\n '\u3001 \u5ddd 1',\n '\u306f \u5317\u6d77\u9053 1',\n '\u3042\u308a \u307e\u3059 1',\n '\u5730\u57df \u3082 1',\n '\u3001 \u5317\u6d77\u9053 1',\n '\u3067 \u306f 1',\n '\u5317 \u306e 1',\n '\u304c \u9ad8\u3044 1',\n '\uff19 \u53f7 1',\n '\u5317\u6d77\u9053 \u3067 1',\n '\u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 1',\n '\u5909\u308f\u308a \u307e\u3057 1',\n '\u6c34\u4f4d \u304c 1',\n '\u305f \u5730\u57df 1',\n '\u72b6\u614b \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b 1',\n '\u6d77\u4e0a \u3067 1',\n '\u306e \u6d77\u4e0a 1',\n '\u3067 \u6e29\u5e2f 1']\n>>> \n\n\n\n\n3-gram\n\n\u4ee5\u4e0b \u304c \u9375\n\nresult = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:]))\n\n\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206\n\nzip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:])\n\n\nsentence2trigram_freq_list\u30e1\u30bd\u30c3\u30c9\ndef sentence2trigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:]))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n\n\n\n\nPython 3.5.2\n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n\n\n\nPython 3.5.2\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> tmp_list = sentence2trigram_freq_list(sentence, result_list)\n>>>\n>>> from pprint import print\n>>>\n>>> pprint(tmp_list)\n['\u72b6\u614b \u304c \u7d9a\u304d 1',\n '\u307e\u3059 \u3002 \\\\n 1',\n '\u6c3e\u6feb \u3057 \u305f 1',\n '\u6e29\u5e2f \u4f4e \u6c17\u5727 1',\n '\u3067 \u6e29\u5e2f \u4f4e 1',\n '\uff19 \u53f7 \u306f 1',\n '\u3082 \u3042\u308a \u307e\u3059 1',\n '\u3057 \u305f \u5730\u57df 1',\n '\u306f \u5317\u6d77\u9053 \u306e 1',\n '\u305f \u5730\u57df \u3082 1',\n '\u304c \u6c3e\u6feb \u3057 1',\n '\u5ddd \u306e \u6c34\u4f4d 1',\n '\u5317\u6d77\u9053 \u3067 \u306f 1',\n '\u7d9a\u304d \u3001 \u5ddd 1',\n '\u5909\u308f\u308a \u307e\u3057 \u305f 1',\n '\u3001 \u5ddd \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b \u304c 1',\n '\u6c17\u5727 \u306b \u5909\u308f\u308a 1',\n '\u304c \u7d9a\u304d \u3001 1',\n '\u305f \u304c \u3001 1',\n '\u306f \u5ddd \u306e 1',\n '\u53f0\u98a8 \uff19 \u53f7 1',\n '\u5730\u57df \u3082 \u3042\u308a 1',\n '\u307e\u3057 \u305f \u304c 1',\n '\u306e \u5317 \u306e 1',\n '\u306e \u6d77\u4e0a \u3067 1',\n '\u304c \u3001 \u5317\u6d77\u9053 1',\n '\u5ddd \u304c \u6c3e\u6feb 1',\n '\u304c \u9ad8\u3044 \u72b6\u614b 1',\n '\u5317 \u306e \u6d77\u4e0a 1',\n '\u3001 \u5317\u6d77\u9053 \u3067 1',\n '\u4f4e \u6c17\u5727 \u306b 1',\n '\u6d77\u4e0a \u3067 \u6e29\u5e2f 1',\n '\u3042\u308a \u307e\u3059 \u3002 1',\n '\u6c34\u4f4d \u304c \u9ad8\u3044 1',\n '\u5317\u6d77\u9053 \u306e \u5317 1',\n '\u306e \u6c34\u4f4d \u304c 1',\n '\u53f7 \u306f \u5317\u6d77\u9053 1',\n '\u3067 \u306f \u5ddd 1',\n '\u306b \u5909\u308f\u308a \u307e\u3057 1']\n>>> \n\n\n\n\n4-gram\n\n\u4ee5\u4e0b \u304c \u9375\n\nresult = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:]))\n\n\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206\n\nzip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:])\n\n\nsentence_to_4gram_freq_list\n>>> def sentence_to_4gram_freq_list(sentence, output_list):\n...     sentence_owakati = sentence2owakati(sentence)\n...     sentence_owakati_list = sentence_owakati.split(\" \")\n...     result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:]))\n...     for key, value in zip(result.keys(), result.values()):\n...             key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...             value_str = str(value)\n...             key_value_str = \" \".join([key_str, value_str])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n...     return output_list\n... \n>>> \n\n\n\nPython 3.5.2\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> \n>>> tmp_list = sentence_to_4gram_freq_list(sentence, result_list)\n>>> pprint(tmp_list)\n['\u5ddd \u304c \u6c3e\u6feb \u3057 1',\n '\u6d77\u4e0a \u3067 \u6e29\u5e2f \u4f4e 1',\n '\u5317 \u306e \u6d77\u4e0a \u3067 1',\n '\u304c \u6c3e\u6feb \u3057 \u305f 1',\n '\u306f \u5ddd \u306e \u6c34\u4f4d 1',\n '\u307e\u3057 \u305f \u304c \u3001 1',\n '\u3057 \u305f \u5730\u57df \u3082 1',\n '\u306e \u6c34\u4f4d \u304c \u9ad8\u3044 1',\n '\u9ad8\u3044 \u72b6\u614b \u304c \u7d9a\u304d 1',\n '\u3042\u308a \u307e\u3059 \u3002 \\\\n 1',\n '\u7d9a\u304d \u3001 \u5ddd \u304c 1',\n '\u3067 \u6e29\u5e2f \u4f4e \u6c17\u5727 1',\n '\u5730\u57df \u3082 \u3042\u308a \u307e\u3059 1',\n '\u6c17\u5727 \u306b \u5909\u308f\u308a \u307e\u3057 1',\n '\u305f \u304c \u3001 \u5317\u6d77\u9053 1',\n '\u4f4e \u6c17\u5727 \u306b \u5909\u308f\u308a 1',\n '\u6c34\u4f4d \u304c \u9ad8\u3044 \u72b6\u614b 1',\n '\u304c \u7d9a\u304d \u3001 \u5ddd 1',\n '\u306b \u5909\u308f\u308a \u307e\u3057 \u305f 1',\n '\u304c \u3001 \u5317\u6d77\u9053 \u3067 1',\n '\u72b6\u614b \u304c \u7d9a\u304d \u3001 1',\n '\u3067 \u306f \u5ddd \u306e 1',\n '\u5317\u6d77\u9053 \u306e \u5317 \u306e 1',\n '\u306e \u5317 \u306e \u6d77\u4e0a 1',\n '\u3001 \u5ddd \u304c \u6c3e\u6feb 1',\n '\u3082 \u3042\u308a \u307e\u3059 \u3002 1',\n '\u6e29\u5e2f \u4f4e \u6c17\u5727 \u306b 1',\n '\u53f7 \u306f \u5317\u6d77\u9053 \u306e 1',\n '\u5317\u6d77\u9053 \u3067 \u306f \u5ddd 1',\n '\u305f \u5730\u57df \u3082 \u3042\u308a 1',\n '\u53f0\u98a8 \uff19 \u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 \u305f \u5730\u57df 1',\n '\u306f \u5317\u6d77\u9053 \u306e \u5317 1',\n '\u3001 \u5317\u6d77\u9053 \u3067 \u306f 1',\n '\uff19 \u53f7 \u306f \u5317\u6d77\u9053 1',\n '\u5ddd \u306e \u6c34\u4f4d \u304c 1',\n '\u304c \u9ad8\u3044 \u72b6\u614b \u304c 1',\n '\u5909\u308f\u308a \u307e\u3057 \u305f \u304c 1',\n '\u306e \u6d77\u4e0a \u3067 \u6e29\u5e2f 1']\n>>> \n\n\n\n\u9006\u65b9\u5411\u306ebi-gram\n\n\u4ee5\u4e0b \u304c \u9375\n\nresult = Counter(zip(sentence_owakati_list[1:], sentence_owakati_list))\n\n\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206\n\nzip(sentence_owakati_list[1:], sentence_owakati_list)\n\n\nsentence2bigram_freq_reverse_list\u30e1\u30bd\u30c3\u30c9\ndef sentence2bigram_freq_reverse_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list[1:], sentence_owakati_list))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n\n\n\nPython 3.5.2\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> tmp_list = sentence2bigram_freq_reverse_list(sentence, result_list)\n>>> \n>>> pprint(tmp_list)\n['\u305f \u3057 1',\n '\u9ad8\u3044 \u304c 1',\n '\u5ddd \u3001 1',\n '\u5730\u57df \u305f 1',\n '\u3067 \u5317\u6d77\u9053 1',\n '\u304c \u305f 1',\n '\u6c3e\u6feb \u304c 1',\n '\u5317\u6d77\u9053 \u3001 1',\n '\u3042\u308a \u3082 1',\n '\u304c \u5ddd 1',\n '\u306f \u3067 1',\n '\u5ddd \u306f 1',\n '\u6e29\u5e2f \u3067 1',\n '\uff19 \u53f0\u98a8 1',\n '\u304c \u72b6\u614b 1',\n '\u72b6\u614b \u9ad8\u3044 1',\n '\u6d77\u4e0a \u306e 1',\n '\u306f \u53f7 1',\n '\u306e \u5ddd 1',\n '\u6c17\u5727 \u4f4e 1',\n '\u3001 \u7d9a\u304d 1',\n '\u3002 \u307e\u3059 1',\n '\\\\n \u3002 1',\n '\u307e\u3057 \u5909\u308f\u308a 1',\n '\u5317 \u306e 1',\n '\u306b \u6c17\u5727 1',\n '\u306e \u5317 1',\n '\u3057 \u6c3e\u6feb 1',\n '\u53f7 \uff19 1',\n '\u306e \u5317\u6d77\u9053 1',\n '\u7d9a\u304d \u304c 1',\n '\u6c34\u4f4d \u306e 1',\n '\u3001 \u304c 1',\n '\u4f4e \u6e29\u5e2f 1',\n '\u3082 \u5730\u57df 1',\n '\u307e\u3059 \u3042\u308a 1',\n '\u304c \u6c34\u4f4d 1',\n '\u5909\u308f\u308a \u306b 1',\n '\u5317\u6d77\u9053 \u306f 1',\n '\u3067 \u6d77\u4e0a 1',\n '\u305f \u307e\u3057 1']\n>>> \n\n\n\n\u3010 \u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\u904e\u7a0b \u3011\n\n\n\nPython 3.5.2\n>>> words = [\"\u4eca\u65e5\", \"\u306f\", \"\u3068\u3066\u3082\", \"\u6691\u3044\", \"\u65e5\", \"\u3067\u3059\", \"\u3002\", \"\u6691\u3044\", \"\u65e5\", \u201c\u3060\"]\n\n\n\nPython 3.5.2\n>>> from collections import Counter\n>>> result = Counter(zip(words,words[1:]))\n>>> print(result)\nCounter({('\u6691\u3044', '\u65e5'): 2, ('\u3002', '\u6691\u3044'): 1, ('\u3068\u3066\u3082', '\u6691\u3044'): 1, ('\u65e5', '\u3067\u3059'): 1, ('\u306f', '\u3068\u3066\u3082'): 1, ('\u3067\u3059', '\u3002'): 1, ('\u4eca\u65e5', '\u306f'): 1, ('\u65e5', '\u3060'): 1})\n>>> \n\n\n\nPython 3.5.2\n>>> for key, value in zip(result.keys(), result.values()):\n...     print(key, \" \", value)\n... \n('\u3002', '\u6691\u3044')   1\n('\u3068\u3066\u3082', '\u6691\u3044')   1\n('\u65e5', '\u3067\u3059')   1\n('\u306f', '\u3068\u3066\u3082')   1\n('\u6691\u3044', '\u65e5')   2\n('\u3067\u3059', '\u3002')   1\n('\u4eca\u65e5', '\u306f')   1\n('\u65e5', '\u3060')   1\n>>> \n\n\n\nPython 3.5.2\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     value_str = str(value)\n...     key_value_str = \" \".join([key_str, value_str])\n...     output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...     print(output)\n... \n\u3002 \u6691\u3044 1\n\u3068\u3066\u3082 \u6691\u3044 1\n\u65e5 \u3067\u3059 1\n\u306f \u3068\u3066\u3082 1\n\u6691\u3044 \u65e5 2\n\u3067\u3059 \u3002 1\n\u4eca\u65e5 \u306f 1\n\u65e5 \u3060 1\n>>> \n\n\n\nPython 3.5.2\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     value_str = str(value)\n...     key_value_str = \" \".join([key_str, value_str])\n...     output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...     output_list.append(output)\n... \n>>> \n>>> print(output_list)\n['\u3002 \u6691\u3044 1', '\u3068\u3066\u3082 \u6691\u3044 1', '\u65e5 \u3067\u3059 1', '\u306f \u3068\u3066\u3082 1', '\u6691\u3044 \u65e5 2', '\u3067\u3059 \u3002 1', '\u4eca\u65e5 \u306f 1', '\u65e5 \u3060 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(output_list)\n['\u3002 \u6691\u3044 1',\n '\u3068\u3066\u3082 \u6691\u3044 1',\n '\u65e5 \u3067\u3059 1',\n '\u306f \u3068\u3066\u3082 1',\n '\u6691\u3044 \u65e5 2',\n '\u3067\u3059 \u3002 1',\n '\u4eca\u65e5 \u306f 1',\n '\u65e5 \u3060 1']\n>>> \n>>> \n\n\n\n\nsentence2owakati\u30e1\u30bd\u30c3\u30c9\n>>> def sentence2owakati(sentence):\n...     import MeCab\n...     m = MeCab.Tagger(\"-Owakati\")\n...     return m.parse(sentence)\n... \n>>> \n>>> \n>>> sentence = \"\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\"\n>>> \n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n>>> tmp = sentence2owakati(sentence)\n>>> print(tmp)\n\u53f0\u98a8 \uff19 \u53f7 \u306f \u5317\u6d77\u9053 \u306e \u5317 \u306e \u6d77\u4e0a \u3067 \u6e29\u5e2f \u4f4e \u6c17\u5727 \u306b \u5909\u308f\u308a \u307e\u3057 \u305f \u304c \u3001 \u5317\u6d77\u9053 \u3067 \u306f \u5ddd \u306e \u6c34\u4f4d \u304c \u9ad8\u3044 \u72b6\u614b \u304c \u7d9a\u304d \u3001 \u5ddd \u304c \u6c3e\u6feb \u3057 \u305f \u5730\u57df \u3082 \u3042\u308a \u307e\u3059 \u3002 \n\n>>> \n>>> import types\n>>> print(type(tmp))\n<class 'str'>\n>>>\n\n\n\nPython 3.5.2\n>>> print(tmp.split(\" \"))\n['\u53f0\u98a8', '\uff19', '\u53f7', '\u306f', '\u5317\u6d77\u9053', '\u306e', '\u5317', '\u306e', '\u6d77\u4e0a', '\u3067', '\u6e29\u5e2f', '\u4f4e', '\u6c17\u5727', '\u306b', '\u5909\u308f\u308a', '\u307e\u3057', '\u305f', '\u304c', '\u3001', '\u5317\u6d77\u9053', '\u3067', '\u306f', '\u5ddd', '\u306e', '\u6c34\u4f4d', '\u304c', '\u9ad8\u3044', '\u72b6\u614b', '\u304c', '\u7d9a\u304d', '\u3001', '\u5ddd', '\u304c', '\u6c3e\u6feb', '\u3057', '\u305f', '\u5730\u57df', '\u3082', '\u3042\u308a', '\u307e\u3059', '\u3002', '\\n']\n>>> \n\n\n\nsentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9\n>>> def sentence2bigram_freq_list(sentence, output_list):\n...     sentence_owakati = sentence2owakati(sentence)\n...     sentence_owakati_list = sentence_owakati.split(\" \")\n...     from collections import Counter\n...     result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n...     for key, value in zip(result.keys(), result.values()):\n...             key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...             value_str = str(value)\n...             key_value_str = \" \".join([key_str, value_str])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n...     return output_list\n... \n>>> \n\n\n\nPython 3.5.2\n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n\n\n\nPython 3.5.2\n>>> result_list = []\n>>>\n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>> print(tmp_list)\n['\u3002 \\\\n 1', '\u306f \u5ddd 1', '\u307e\u3057 \u305f 1', '\u4f4e \u6c17\u5727 1', '\u6e29\u5e2f \u4f4e 1', '\u3057 \u305f 1', '\u305f \u304c 1', '\u306e \u5317 1', '\u304c \u7d9a\u304d 1', '\u6c17\u5727 \u306b 1', '\u5317\u6d77\u9053 \u306e 1', '\u7d9a\u304d \u3001 1', '\u5ddd \u304c 1', '\u304c \u3001 1', '\u306e \u6c34\u4f4d 1', '\u306b \u5909\u308f\u308a 1', '\u3082 \u3042\u308a 1', '\u304c \u6c3e\u6feb 1', '\u53f0\u98a8 \uff19 1', '\u5ddd \u306e 1', '\u307e\u3059 \u3002 1', '\u3001 \u5ddd 1', '\u306f \u5317\u6d77\u9053 1', '\u3042\u308a \u307e\u3059 1', '\u5730\u57df \u3082 1', '\u3001 \u5317\u6d77\u9053 1', '\u3067 \u306f 1', '\u5317 \u306e 1', '\u304c \u9ad8\u3044 1', '\uff19 \u53f7 1', '\u5317\u6d77\u9053 \u3067 1', '\u53f7 \u306f 1', '\u6c3e\u6feb \u3057 1', '\u5909\u308f\u308a \u307e\u3057 1', '\u6c34\u4f4d \u304c 1', '\u305f \u5730\u57df 1', '\u72b6\u614b \u304c 1', '\u9ad8\u3044 \u72b6\u614b 1', '\u6d77\u4e0a \u3067 1', '\u306e \u6d77\u4e0a 1', '\u3067 \u6e29\u5e2f 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u3002 \\\\n 1',\n '\u306f \u5ddd 1',\n '\u307e\u3057 \u305f 1',\n '\u4f4e \u6c17\u5727 1',\n '\u6e29\u5e2f \u4f4e 1',\n '\u3057 \u305f 1',\n '\u305f \u304c 1',\n '\u306e \u5317 1',\n '\u304c \u7d9a\u304d 1',\n '\u6c17\u5727 \u306b 1',\n '\u5317\u6d77\u9053 \u306e 1',\n '\u7d9a\u304d \u3001 1',\n '\u5ddd \u304c 1',\n '\u304c \u3001 1',\n '\u306e \u6c34\u4f4d 1',\n '\u306b \u5909\u308f\u308a 1',\n '\u3082 \u3042\u308a 1',\n '\u304c \u6c3e\u6feb 1',\n '\u53f0\u98a8 \uff19 1',\n '\u5ddd \u306e 1',\n '\u307e\u3059 \u3002 1',\n '\u3001 \u5ddd 1',\n '\u306f \u5317\u6d77\u9053 1',\n '\u3042\u308a \u307e\u3059 1',\n '\u5730\u57df \u3082 1',\n '\u3001 \u5317\u6d77\u9053 1',\n '\u3067 \u306f 1',\n '\u5317 \u306e 1',\n '\u304c \u9ad8\u3044 1',\n '\uff19 \u53f7 1',\n '\u5317\u6d77\u9053 \u3067 1',\n '\u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 1',\n '\u5909\u308f\u308a \u307e\u3057 1',\n '\u6c34\u4f4d \u304c 1',\n '\u305f \u5730\u57df 1',\n '\u72b6\u614b \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b 1',\n '\u6d77\u4e0a \u3067 1',\n '\u306e \u6d77\u4e0a 1',\n '\u3067 \u6e29\u5e2f 1']\n>>> \n\n\n\n\u3010 \u5099\u8003 \u3011\n\n\nPython 3\u74b0\u5883 \u3067 MeCab \u30e2\u30b8\u30e5\u30fc\u30eb\u4f7f\u3046\u6e96\u5099\n\n\ngrachro\u3055\u3093 Qiita\u8a18\u4e8b\uff082016/03/01\uff09\u300cPython3\u3067\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3MeCab\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b(2016\u5e743\u6708\u7248)\u300d\n\n\nTerminal\nHirofumiYashima-no-MacBook:~ hirofumiyashima$ pip install mecab-python3\nCollecting mecab-python3\n  Downloading mecab-python3-0.7.tar.gz (41kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 1.1MB/s \nInstalling collected packages: mecab-python3\n  Running setup.py install for mecab-python3 ... done\nSuccessfully installed mecab-python3-0.7\nHirofumiYashima-no-MacBook:~ hirofumiyashima$\n\n\n\nPython 3.5.2\n HirofumiYashima-no-MacBook:~ hirofumiyashima$ python\nPython 3.5.2 (default, Jul 23 2016, 14:25:12) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import MeCab\n>>> m = MeCab.Tagger (\"-Ochasen\")\n>>> print(m.parse (\"\u4eca\u65e5\u3082\u3057\u306a\u3044\u3068\u306d\"))\n\u4eca\u65e5  \u30ad\u30e7\u30a6   \u4eca\u65e5  \u540d\u8a5e-\u526f\u8a5e\u53ef\u80fd     \n\u3082 \u30e2 \u3082 \u52a9\u8a5e-\u4fc2\u52a9\u8a5e        \n\u3057 \u30b7 \u3059\u308b  \u52d5\u8a5e-\u81ea\u7acb   \u30b5\u5909\u30fb\u30b9\u30eb \u672a\u7136\u5f62\n\u306a\u3044  \u30ca\u30a4  \u306a\u3044  \u52a9\u52d5\u8a5e   \u7279\u6b8a\u30fb\u30ca\u30a4 \u57fa\u672c\u5f62\n\u3068 \u30c8 \u3068 \u52a9\u8a5e-\u63a5\u7d9a\u52a9\u8a5e     \n\u306d \u30cd \u306d \u52a9\u8a5e-\u7d42\u52a9\u8a5e        \nEOS\n\n>>> \n>>> m = MeCab.Tagger (\"-Owakati\")\n>>> print(m.parse (\"\u4eca\u65e5\u3082\u3057\u306a\u3044\u3068\u306d\"))\n\u4eca\u65e5 \u3082 \u3057 \u306a\u3044 \u3068 \u306d \n\n>>> \n\n\n\n\u3010 \u5f8c\u65e5\u8ffd\u8a18 \u3011\n\n\u300c\u5358\u8a9eA \u5358\u8a9eB \u5358\u8a9eA\u3068\u5358\u8a9eB\u306e\u4e26\u3073\u3067\u306e\u51fa\u73fe\u56de\u6570\u300d\u3000\u3092 \u51fa\u529b\u3059\u308b\u969b\u3001\n\u5358\u8a9e\u306e\uff11\u65b9\u3082\u3057\u304f\u306f\u4e21\u65b9\u304c\u7a7a\u6587\u5b57\u3067\u3042\u3063\u305f\u308a\u3001\u5171\u8d77\u56de\u6570\u306e\u5217\u306b\u6570\u5024\u4ee5\u5916\u306e\u30b4\u30df\u304c\u5165\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u3001\u4ee5\u4e0b \u306b \u6539\u826f\u3002\n\nPython 3.5.2\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     token_pair = key_str.split(\",\")\n...     if (len(token_pair) == 2) and (not token_pair[0] == \"\") and (not token_pair[1] == \"\") and (isinstance(value, int)):\n...             key_value_str = \" \".join([key_str, str(value)])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n... \n>>>\n\n\n\n\n\u6700\u7d42\u7684\u306a\u5b9f\u884c\u4f8b \uff08 2-gram \u306e\u5834\u5408 \uff09\n\n\nTerminal\nHirofumiYashima-no-MacBook:work hirofumiyashima$ emacs corpus2bigram_freq_matrix_file.py\nHirofumiYashima-no-MacBook:work hirofumiyashima$ cat corpus2bigram_freq_matrix_file.py \n\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n    return m.parse(sentence)\n\n\ndef sentence2bigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n\n    for key, value in zip(result.keys(), result.values()):\n    key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n    token_pair = key_str.split(\",\")\n    if (len(token_pair) == 2) and (not token_pair[0] == \"\") and (not token_pair[1] == \"\") and (isinstance(value, int)):\n        key_value_str = \" \".join([key_str, str(value)])\n        output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n        output_list.append(output)\n\n    return output_list\nHirofumiYashima-no-MacBook:work hirofumiyashima$ \n\n\n\n\u30b3\u30fc\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb \u3092 \u7528\u610f\n\n\nPython 3\n>>> from corpus2bigram_freq_matrix_file import *\n>>> \n>>> text = \"\"\"\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n... \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa \u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n... \n... \u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044 \u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e \uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n... \u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n... \uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8 \u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059 \u3002\"\"\"\n>>> \n>>> print(text)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n\n\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>> \n>>> sentence = text.replace(\" \", \"\").strip()\n>>> print(sentence)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n\n\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>> \n>>> sentence = sentence.replace(\"\\n\", \"\")\n>>> print(sentence)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>>\n\n\n\nPython\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb \u3092 import \u3057\u3066\u3001\u5b9f\u884c\n\n\nPython 3\n>>> from corpus2bigram_freq_matrix_file import *\n>>> \n>>> result_list = []\n>>> \n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>>\n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u306f \u3001 2',\n '\u53d7\u3051\u3066 \u5168\u9762 1',\n '\u306e \u5c0e\u5165 2',\n '\u306e \u76ee\u6a19 1',\n '\uff18 \uff10 1',\n '\u898b\u8fbc\u3093 \u3067 1',\n '\u30d7\u30e9\u30b9 \u306b 1',\n '\u6ce8\u76ee \u3057 1',\n '\u682a \u3067\u3057 1',\n '\u3001 \u304a\u3088\u305d 1',\n '\u3092 \u884c\u3046 1',\n '\uff19 \uff10 1',\n '\u306a\u3069 \u306e 1',\n '\u304c \u4e00\u6642 1',\n '\u3092 \u8cb7\u3063 1',\n '\u4e07 \u682a 1',\n '\u7e2e\u5c0f \u3057 1',\n '\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 \u3001 1',\n '\u3066 \u3044 5',\n '\uff0e \uff16 1',\n '\u304c \u51fa\u3066 1',\n '\u308c \u305f 1',\n '\u306b \u6ce8\u76ee 1',\n '\uff1d \u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a 1',\n '\u3067\u3057 \u305f 2',\n '\u306e \u6771\u4eac\u682a\u5f0f\u5e02\u5834 1',\n '\u5168\u9762 \u9ad8 1',\n '\u5024\u4e0a\u304c\u308a \u3057 1',\n '\u306f \u65e5\u9280 1',\n '\uff17 \u3067\u3057 1',\n '\u8cb7\u3044 \u6ce8\u6587 1',\n '\u306e \u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834 1',\n '\u63a8\u79fb \u3059\u308b 1',\n '\u6771\u8a3c\u682a\u4fa1\u6307\u6570 \uff1d 1',\n '\u5229\u3056\u3084 \u304c 1',\n '\u306b \u767a\u8868 1',\n '\u5c0e\u5165 \u306a\u3069 1',\n '\u3066 \u3044\u308b 2',\n '\u300c \u4eca\u56de 1',\n '\uff12 \uff0e 1',\n '\u3060 \u3053\u3068 1',\n '\u4eca\u56de \u3001 1',\n '\u5024\u4e0b\u304c\u308a \u3057 1',\n '\u30a2\u30e1\u30ea\u30ab \u306e 1',\n '\u3088\u3046 \u56fd\u50b5 1',\n '\u3044\u308b \u300d 2',\n '\u305f \u9280\u884c 1',\n '\u3068 \u306a\u308a 1',\n '\uff12 \u4e07 1',\n '\uff11 \uff13 1',\n '\u65e5 \u306e 4',\n '\u3092 \u53d7\u3051 2',\n '\u3068 \u8a71\u3057 2',\n '\uff12 \uff11 3',\n '\u307e\u3059 \u3002 3',\n '\u95a2\u9023 \u9298\u67c4 1',\n '\u306b \u8cb7\u3044 1',\n '\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a \u306e 1',\n '\u3002 \u5186\u76f8\u5834 1',\n '\u3066 \uff11 1',\n '\u300d \u3068 2',\n '\u3002 \u6295\u8cc7\u5bb6 1',\n '\u3067 \u81ea\u52d5\u8eca 1',\n '\u3057 \u307e\u3057 1',\n '\u9593 \u3067 1',\n '\u3002 \u3053\u308c 1',\n '\u5c55\u958b \u3068 1',\n '\u9577\u671f\u91d1\u5229 \u3067 1',\n '\u8ee2\u3058 \u305f 1',\n '\u3067 \u9577\u671f\u91d1\u5229 1',\n '\uff13 \uff11 1',\n '\u5186\u5b89\u30c9\u30eb\u9ad8 \u3082 1',\n '\u3001 \u4f4e\u3044 1',\n '\u3044 \u307e\u3059 3',\n '\u5e02\u5834\u95a2\u4fc2\u8005 \u306f 2',\n '\uff16 \uff12 1',\n '\uff15 \u5104 1',\n '\u306f \uff12 1',\n '\u3066 \u3001 1',\n '\u3057 \u3066 4',\n '\u3001 \u65e5\u9280 2',\n '\uff26\uff32\uff22 \uff1d 1',\n '\u9ad8\u3044 \uff11 1',\n '\u767a\u8868 \u3055 1',\n '\u6ce8\u6587 \u304c 1',\n '\u306e \u5c55\u958b 1',\n '\u53d7\u3051 \u3066 1',\n '\u884c\u3046 \u63aa\u7f6e 1',\n '\u4e2d\u5fc3 \u306b 1',\n '\u58f2\u308b \u52d5\u304d 2',\n '\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 \u306f 1',\n '\u306e \u682a\u5f0f 1',\n '\uff14 \uff17 1',\n '\u7d50\u679c \u3092 1',\n '\u306e \u51fa\u6765\u9ad8 1',\n '\u3002 \u6771\u8a3c\u682a\u4fa1\u6307\u6570 1',\n '\u3092 \u58f2\u308b 2',\n '\u306a\u3044 \u3068 1',\n '\u5186 \u3092 3',\n '\u3082 \u9032\u3093 1',\n '\u8cb7\u3063 \u3066 1',\n '\u3053\u308c \u3092 1',\n '\u3082 \u8cb7\u308f 1',\n '\u3092 \u4e2d\u5fc3 1',\n '\u5186 \u4ee5\u4e0a 1',\n '\uff10 \uff17 1',\n '\uff12 \uff15 1',\n '\u51fa\u3066 \u3001 1',\n '\u9280\u884c \u3084 1',\n '\u4f1a\u5408 \u306e 1',\n '\u3001 \u5186 2',\n '\uff10 \uff12 1',\n '\uff17 \u5186 1',\n '\u81ea\u52d5\u8eca \u306a\u3069 1',\n '\u52d5\u304d \u304c 2',\n '\u3044 \u305f 2',\n '\u3057 \u306a\u3044 1',\n '\u4fdd\u967a\u4f1a\u793e \u306e 1',\n '\u3055 \u308c\u308b 1',\n '\u3092 \u5909\u66f4 1',\n '\u3001 \u3042\u3059 1',\n '\uff18 \uff19 1',\n '\u3092 \u6c7a\u3081 2',\n '\u9032\u3093 \u3060 1',\n '\u5c0e\u5165 \u3092 1',\n '\u92ad \u3002 1',\n '\uff13 \uff10 1',\n '\u3067 \u3001 2',\n '\u682a\u5f0f \u3092 1',\n '\uff11 \u65e5 4',\n '\u306f \u91d1\u878d\u653f\u7b56 1',\n '\u4e07 \uff16 1',\n '\uff16 \uff18 1',\n '\u304a\u3088\u305d \u534a\u5e74 1',\n '\u304c \uff10 1',\n '\u3002 \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 1',\n '\u5186\u76f8\u5834 \u306f 2',\n '\uff15 \u5186 1',\n '\u9577\u671f\u91d1\u5229 \u304c 2',\n '\u306e \u7d42\u5024 1',\n '\u3002 \u5e02\u5834\u95a2\u4fc2\u8005 2',\n '\u5024\u4e0b\u304c\u308a \uff12 1',\n '\u5186 \uff14 1',\n '\u3001 \u5186\u76f8\u5834 1',\n '\uff12 \u92ad 1',\n '\u306e \uff26\uff32\uff22 1',\n '\u300c \u65e5\u9280 1',\n '\u767a\u8868 \u3057 1',\n '\uff13 \uff15 2',\n '\uff17 \u92ad 1',\n '\u65e5\u9280 \u304c 3',\n '\u306f \u5024\u4e0b\u304c\u308a 2',\n '\u91d1\u878d\u653f\u7b56 \u3092 1',\n '\u92ad \u9ad8\u3044 1',\n '\u3042\u3059 \u672a\u660e 1',\n '\u9298\u67c4 \u3082 1',\n '\u8cb7\u308f \u308c 1',\n '\u8cb7\u3044\u5165\u308c \u3092 1',\n '\u4e00\u6642 \u3001 1',\n '\u3084 \u4fdd\u967a\u4f1a\u793e 1',\n '\u306e \u7d50\u679c 2',\n '\u8f38\u51fa \u95a2\u9023 1',\n '\u305f \u3002 6',\n '\u6771\u4eac\u682a\u5f0f\u5e02\u5834 \u306f 1',\n '\u9ad8 \u306e 1',\n '\u306b \u9577\u671f\u91d1\u5229 2',\n '\uff05 \u7a0b\u5ea6 1',\n '\u4e0a\u304c\u3063 \u3066 1',\n '\u5104 \uff18 1',\n '\u306e \u9593 1',\n '\u3002 \\\\n 1',\n '\u304c \u96c6\u307e\u3063 1',\n '\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834 \u306f 1',\n '\u3092 \u53d7\u3051\u3066 1',\n '\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408 \u306e 1',\n '\uff11 \u4e07 1',\n '\uff15 \uff0e 1',\n '\u3067 \u5229\u3056\u3084 1',\n '\uff0e \uff17 1',\n '\u3066 \u5186 1',\n '\u307e\u3057 \u305f 1',\n '\u304c \u51fa 1',\n '\u305f \u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408 1',\n '\u3001 \uff12 1',\n '\u306b \u30d7\u30e9\u30b9 1',\n '\u53d7\u3051 \u3001 1',\n '\u304c \u7e2e\u5c0f 1',\n '\u3001 \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 1',\n '\uff16 \uff17 1',\n '\u306a\u3069 \u3092 1',\n '\u3001 \u4e0a\u304c\u3063 1',\n '\u6295\u8cc7\u5bb6 \u306f 1',\n '\u30c8\u30d4\u30c3\u30af\u30b9 \u306f 1',\n '\u3067 \u63a8\u79fb 1',\n '\u306e \u4f1a\u5408 1',\n '\u306f \u300c 2',\n '\u304c \u767a\u8868 1',\n '\u9577\u671f\u91d1\u5229 \u306e 1',\n '\u4e00\u8ee2 \u3057 1',\n '\uff10 \uff05 1',\n '\u308c\u308b \u30a2\u30e1\u30ea\u30ab 1',\n '\u306f \u524d\u65e5 1',\n '\u3002 \uff11 1',\n '\u3053\u3068 \u3092 1',\n '\u4ee5\u4e0a \u5024\u4e0a\u304c\u308a 1',\n '\u524d\u65e5 \u3088\u308a 1',\n '\u3076\u308a \u306b 1',\n '\u5909\u66f4 \u3057 1',\n '\uff11 \uff15 1',\n '\u306e \u8cb7\u3044\u5165\u308c 1',\n '\u672a\u660e \u306b 1',\n '\uff1d \u30c8\u30d4\u30c3\u30af\u30b9 1',\n '\u51fa\u6765\u9ad8 \u306f 1',\n '\u6c7a\u3081 \u305f 2',\n '\u305f \u3053\u3068 2',\n '\u306b \u8ee2\u3058 1',\n '\u534a\u5e74 \u3076\u308a 1',\n '\u56fd\u50b5 \u306e 1',\n '\uff10 \u3001 1',\n '\u51fa \u3066 1',\n '\u4f4e\u3044 \u9577\u671f\u91d1\u5229 1',\n '\u3068 \u898b\u8fbc\u3093 1',\n '\u3057 \u305f 1',\n '\u3001 \u5186\u5b89\u30c9\u30eb\u9ad8 1',\n '\u63aa\u7f6e \u306e 1',\n '\u305f \u6295\u8cc7\u5bb6 1',\n '\uff10 \u5186 1',\n '\u3053\u3068 \u3067 2',\n '\uff15 \uff12 1',\n '\u5186 \uff16 1',\n '\u76ee\u6a19 \u306e 1',\n '\u3088\u308a \uff13 1',\n '\u307e\u305f \u3001 1',\n '\u3001 \u4e00\u8ee2 1',\n '\uff17 \uff10 1',\n '\u6295\u8cc7\u5bb6 \u306e 1',\n '\u306f \uff13 2',\n '\u306a\u308a \u3001 1',\n '\u96c6\u307e\u3063 \u305f 1',\n '\u7a0b\u5ea6 \u3067 1',\n '\u7d50\u679c \u306b 1',\n '\u3059\u308b \u3088\u3046 1',\n '\u304c \u65b0\u305f 2',\n '\u65b0\u305f \u306b 2',\n '\u8a71\u3057 \u3066 2',\n '\uff10 \uff10 1',\n '\u65e5\u9280 \u306f 1',\n '\u306e \u8f38\u51fa 1',\n '\u7d42\u5024 \u306f 1',\n '\u3002 \u307e\u305f 1']\n>>> \n\n\n\n###__\u3010 \u53c2\u8003 \u3011__\n\n* http://stackoverflow.com/questions/12488722/counting-bigrams-pair-of-two-words-in-a-file-using-python\n\n___\n\n###__\u3010 \u5099\u8003 \u3011__\n\nR\u8a00\u8a9e \u306e RMeCab\u30d1\u30c3\u30b1\u30fc\u30b8 \u306b NgramDF\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u3001\u672c\u8a18\u4e8b \u6a19\u984c\u3068\u540c\u3058\u6a5f\u80fd \u304c \u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u983b\u7e41\u306b\u767a\u751f\u3057\u307e\u3059\u3002\n\n__\u305d\u306e\u3088\u3046\u306a\u3068\u304d\u3001\u672c\u8a18\u4e8b \u3067 \u8aac\u660e\u3059\u308b Python\u306e\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9 \u304c \u5f79\u306b\u7acb\u3061\u307e\u3059\u3002__\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \uff082016/09/09\uff09 \u300c\u3010 R\u8a00\u8a9e \u3067 N-gram \u3011\u300c\u5358\u8a9eA\u6587\u5b57\u5217 \u5358\u8a9eB\u6587\u5b57\u5217 \u5358\u8a9eA\u3068\u5358\u8a9eB\u306e\u5171\u8d77\u56de\u6570\u300d\u306e\uff13\u5217\u5f62\u5f0f \u306e \uff12\u5358\u8a9e \u5171\u8d77\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 \u306e \u4f5c\u308a\u65b9\u300d](http://qiita.com/HirofumiYashima/items/28a4a47d059f974f16ac)\n\n>__\u4ee5\u4e0b\u306e\u5b9f\u884c\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u3053\u3068\u304c\u3042\u308b__\n>\n>>```{R:R}\n>> Ngram exceeds 40000\n>> NgramDF(\"trial_japanese_corpus.txt\", type = 1, N = 2) \u3067\u30a8\u30e9\u30fc: \n>> SET_VECTOR_ELT() can only be applied to a 'list', not a 'character'\n>>``` \n\n___\n\n###__\u3010 \u5b9f\u884c\u74b0\u5883 \u3011__\n\n___\n\nMacBook OS X\nPython 3\u74b0\u5883\nPython MeCab\u30e2\u30b8\u30e5\u30fc\u30eb \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\n___\n\nPython 3 \u74b0\u5883 \u306b RMeCab \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u969b\u306e\u624b\u9806\u306f\u3001\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n* [grachro\u3055\u3093 Qiita\u8a18\u4e8b\uff082016/03/01\uff09\u300cPython3\u3067\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3MeCab\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b(2016\u5e743\u6708\u7248)\u300d](http://qiita.com/grachro/items/4fbc9bf8174c5abb7bdd)\n\n\n##__2-gram__\n\n* __sentence2owakati\u30e1\u30bd\u30c3\u30c9__\n\n```{Python:sentence2owakati\u30e1\u30bd\u30c3\u30c9}\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Owakati\")\n    return m.parse(sentence)\n\n```\n\n___\n\n####__\u3010 \u5f8c\u65e5\u8ffd\u8a18 \u3011__\n\n* mecab-ipadic-neologd \uff08 \u6700\u65b0\u6d41\u884c\u8a9e\u30fb\u6642\u4e8b\u7528\u8a9e \u304c \u767b\u9332\u3055\u308c\u305f \u8f9e\u66f8 \uff09\u3092 \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d \u306b\u3059\u308b\u5834\u5408 \u306f\u3001\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3002\n\n```{Python:sentence2owakati\u30e1\u30bd\u30c3\u30c9\uff08\u6539\u826f\uff09}\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n    return m.parse(sentence)\n```\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \uff082016/08/30\uff09 \u300cmecab-ipadic-neologd \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d\u3059\u308b\u306b\u306f\u3001mecab -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd \u306e \u5f8c\u306b -Owakati \u3092 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u306b \u4e0e\u3048\u308c\u3070 \u51fa\u6765\u308b\u300d](http://qiita.com/HirofumiYashima/items/cb6d00effbb2144d121b)\n\n___\n\n* __sentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9__\n\n__\u4ee5\u4e0b \u304c \u9375__\n\n> result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n\n__\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206__\n\n> zip(sentence_owakati_list, sentence_owakati_list[1:])\n\n```{Python:sentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9}\ndef sentence2bigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n\n```\n\n###__\uff08 \u4f7f\u3044\u65b9 \uff09__\n\n```{Python:Python 3.5.2}\n>>> sentence = \"\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\"\n>>> \n```\n\n```{Python:Python 3.5.2}\n>>> result_list = []\n>>>\n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>> print(tmp_list)\n['\u3002 \\\\n 1', '\u306f \u5ddd 1', '\u307e\u3057 \u305f 1', '\u4f4e \u6c17\u5727 1', '\u6e29\u5e2f \u4f4e 1', '\u3057 \u305f 1', '\u305f \u304c 1', '\u306e \u5317 1', '\u304c \u7d9a\u304d 1', '\u6c17\u5727 \u306b 1', '\u5317\u6d77\u9053 \u306e 1', '\u7d9a\u304d \u3001 1', '\u5ddd \u304c 1', '\u304c \u3001 1', '\u306e \u6c34\u4f4d 1', '\u306b \u5909\u308f\u308a 1', '\u3082 \u3042\u308a 1', '\u304c \u6c3e\u6feb 1', '\u53f0\u98a8 \uff19 1', '\u5ddd \u306e 1', '\u307e\u3059 \u3002 1', '\u3001 \u5ddd 1', '\u306f \u5317\u6d77\u9053 1', '\u3042\u308a \u307e\u3059 1', '\u5730\u57df \u3082 1', '\u3001 \u5317\u6d77\u9053 1', '\u3067 \u306f 1', '\u5317 \u306e 1', '\u304c \u9ad8\u3044 1', '\uff19 \u53f7 1', '\u5317\u6d77\u9053 \u3067 1', '\u53f7 \u306f 1', '\u6c3e\u6feb \u3057 1', '\u5909\u308f\u308a \u307e\u3057 1', '\u6c34\u4f4d \u304c 1', '\u305f \u5730\u57df 1', '\u72b6\u614b \u304c 1', '\u9ad8\u3044 \u72b6\u614b 1', '\u6d77\u4e0a \u3067 1', '\u306e \u6d77\u4e0a 1', '\u3067 \u6e29\u5e2f 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u3002 \\\\n 1',\n '\u306f \u5ddd 1',\n '\u307e\u3057 \u305f 1',\n '\u4f4e \u6c17\u5727 1',\n '\u6e29\u5e2f \u4f4e 1',\n '\u3057 \u305f 1',\n '\u305f \u304c 1',\n '\u306e \u5317 1',\n '\u304c \u7d9a\u304d 1',\n '\u6c17\u5727 \u306b 1',\n '\u5317\u6d77\u9053 \u306e 1',\n '\u7d9a\u304d \u3001 1',\n '\u5ddd \u304c 1',\n '\u304c \u3001 1',\n '\u306e \u6c34\u4f4d 1',\n '\u306b \u5909\u308f\u308a 1',\n '\u3082 \u3042\u308a 1',\n '\u304c \u6c3e\u6feb 1',\n '\u53f0\u98a8 \uff19 1',\n '\u5ddd \u306e 1',\n '\u307e\u3059 \u3002 1',\n '\u3001 \u5ddd 1',\n '\u306f \u5317\u6d77\u9053 1',\n '\u3042\u308a \u307e\u3059 1',\n '\u5730\u57df \u3082 1',\n '\u3001 \u5317\u6d77\u9053 1',\n '\u3067 \u306f 1',\n '\u5317 \u306e 1',\n '\u304c \u9ad8\u3044 1',\n '\uff19 \u53f7 1',\n '\u5317\u6d77\u9053 \u3067 1',\n '\u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 1',\n '\u5909\u308f\u308a \u307e\u3057 1',\n '\u6c34\u4f4d \u304c 1',\n '\u305f \u5730\u57df 1',\n '\u72b6\u614b \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b 1',\n '\u6d77\u4e0a \u3067 1',\n '\u306e \u6d77\u4e0a 1',\n '\u3067 \u6e29\u5e2f 1']\n>>> \n```\n\n___\n\n##__3-gram__\n\n__\u4ee5\u4e0b \u304c \u9375__\n\n> result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:]))\n\n__\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206__\n\n> zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:])\n\n```{Python:sentence2trigram_freq_list\u30e1\u30bd\u30c3\u30c9}\ndef sentence2trigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:]))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n\n```\n\n\n```{Python:Python 3.5.2}\n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> tmp_list = sentence2trigram_freq_list(sentence, result_list)\n>>>\n>>> from pprint import print\n>>>\n>>> pprint(tmp_list)\n['\u72b6\u614b \u304c \u7d9a\u304d 1',\n '\u307e\u3059 \u3002 \\\\n 1',\n '\u6c3e\u6feb \u3057 \u305f 1',\n '\u6e29\u5e2f \u4f4e \u6c17\u5727 1',\n '\u3067 \u6e29\u5e2f \u4f4e 1',\n '\uff19 \u53f7 \u306f 1',\n '\u3082 \u3042\u308a \u307e\u3059 1',\n '\u3057 \u305f \u5730\u57df 1',\n '\u306f \u5317\u6d77\u9053 \u306e 1',\n '\u305f \u5730\u57df \u3082 1',\n '\u304c \u6c3e\u6feb \u3057 1',\n '\u5ddd \u306e \u6c34\u4f4d 1',\n '\u5317\u6d77\u9053 \u3067 \u306f 1',\n '\u7d9a\u304d \u3001 \u5ddd 1',\n '\u5909\u308f\u308a \u307e\u3057 \u305f 1',\n '\u3001 \u5ddd \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b \u304c 1',\n '\u6c17\u5727 \u306b \u5909\u308f\u308a 1',\n '\u304c \u7d9a\u304d \u3001 1',\n '\u305f \u304c \u3001 1',\n '\u306f \u5ddd \u306e 1',\n '\u53f0\u98a8 \uff19 \u53f7 1',\n '\u5730\u57df \u3082 \u3042\u308a 1',\n '\u307e\u3057 \u305f \u304c 1',\n '\u306e \u5317 \u306e 1',\n '\u306e \u6d77\u4e0a \u3067 1',\n '\u304c \u3001 \u5317\u6d77\u9053 1',\n '\u5ddd \u304c \u6c3e\u6feb 1',\n '\u304c \u9ad8\u3044 \u72b6\u614b 1',\n '\u5317 \u306e \u6d77\u4e0a 1',\n '\u3001 \u5317\u6d77\u9053 \u3067 1',\n '\u4f4e \u6c17\u5727 \u306b 1',\n '\u6d77\u4e0a \u3067 \u6e29\u5e2f 1',\n '\u3042\u308a \u307e\u3059 \u3002 1',\n '\u6c34\u4f4d \u304c \u9ad8\u3044 1',\n '\u5317\u6d77\u9053 \u306e \u5317 1',\n '\u306e \u6c34\u4f4d \u304c 1',\n '\u53f7 \u306f \u5317\u6d77\u9053 1',\n '\u3067 \u306f \u5ddd 1',\n '\u306b \u5909\u308f\u308a \u307e\u3057 1']\n>>> \n```\n\n___\n\n##__4-gram__\n__\u4ee5\u4e0b \u304c \u9375__\n\n> result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:]))\n\n\n__\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206__\n\n> zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:])\n\n```{Python:sentence_to_4gram_freq_list}\n>>> def sentence_to_4gram_freq_list(sentence, output_list):\n...     sentence_owakati = sentence2owakati(sentence)\n...     sentence_owakati_list = sentence_owakati.split(\" \")\n...     result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:], sentence_owakati_list[2:], sentence_owakati_list[3:]))\n...     for key, value in zip(result.keys(), result.values()):\n...             key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...             value_str = str(value)\n...             key_value_str = \" \".join([key_str, value_str])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n...     return output_list\n... \n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> \n>>> tmp_list = sentence_to_4gram_freq_list(sentence, result_list)\n>>> pprint(tmp_list)\n['\u5ddd \u304c \u6c3e\u6feb \u3057 1',\n '\u6d77\u4e0a \u3067 \u6e29\u5e2f \u4f4e 1',\n '\u5317 \u306e \u6d77\u4e0a \u3067 1',\n '\u304c \u6c3e\u6feb \u3057 \u305f 1',\n '\u306f \u5ddd \u306e \u6c34\u4f4d 1',\n '\u307e\u3057 \u305f \u304c \u3001 1',\n '\u3057 \u305f \u5730\u57df \u3082 1',\n '\u306e \u6c34\u4f4d \u304c \u9ad8\u3044 1',\n '\u9ad8\u3044 \u72b6\u614b \u304c \u7d9a\u304d 1',\n '\u3042\u308a \u307e\u3059 \u3002 \\\\n 1',\n '\u7d9a\u304d \u3001 \u5ddd \u304c 1',\n '\u3067 \u6e29\u5e2f \u4f4e \u6c17\u5727 1',\n '\u5730\u57df \u3082 \u3042\u308a \u307e\u3059 1',\n '\u6c17\u5727 \u306b \u5909\u308f\u308a \u307e\u3057 1',\n '\u305f \u304c \u3001 \u5317\u6d77\u9053 1',\n '\u4f4e \u6c17\u5727 \u306b \u5909\u308f\u308a 1',\n '\u6c34\u4f4d \u304c \u9ad8\u3044 \u72b6\u614b 1',\n '\u304c \u7d9a\u304d \u3001 \u5ddd 1',\n '\u306b \u5909\u308f\u308a \u307e\u3057 \u305f 1',\n '\u304c \u3001 \u5317\u6d77\u9053 \u3067 1',\n '\u72b6\u614b \u304c \u7d9a\u304d \u3001 1',\n '\u3067 \u306f \u5ddd \u306e 1',\n '\u5317\u6d77\u9053 \u306e \u5317 \u306e 1',\n '\u306e \u5317 \u306e \u6d77\u4e0a 1',\n '\u3001 \u5ddd \u304c \u6c3e\u6feb 1',\n '\u3082 \u3042\u308a \u307e\u3059 \u3002 1',\n '\u6e29\u5e2f \u4f4e \u6c17\u5727 \u306b 1',\n '\u53f7 \u306f \u5317\u6d77\u9053 \u306e 1',\n '\u5317\u6d77\u9053 \u3067 \u306f \u5ddd 1',\n '\u305f \u5730\u57df \u3082 \u3042\u308a 1',\n '\u53f0\u98a8 \uff19 \u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 \u305f \u5730\u57df 1',\n '\u306f \u5317\u6d77\u9053 \u306e \u5317 1',\n '\u3001 \u5317\u6d77\u9053 \u3067 \u306f 1',\n '\uff19 \u53f7 \u306f \u5317\u6d77\u9053 1',\n '\u5ddd \u306e \u6c34\u4f4d \u304c 1',\n '\u304c \u9ad8\u3044 \u72b6\u614b \u304c 1',\n '\u5909\u308f\u308a \u307e\u3057 \u305f \u304c 1',\n '\u306e \u6d77\u4e0a \u3067 \u6e29\u5e2f 1']\n>>> \n```\n\n##__\u9006\u65b9\u5411\u306ebi-gram__\n\n__\u4ee5\u4e0b \u304c \u9375__\n\n> result = Counter(zip(sentence_owakati_list[1:], sentence_owakati_list))\n\n__\u4e0a\u8a18 \u306e \u4ee5\u4e0b \u306e \u90e8\u5206__\n\n> zip(sentence_owakati_list[1:], sentence_owakati_list)\n\n```{Python:sentence2bigram_freq_reverse_list\u30e1\u30bd\u30c3\u30c9}\ndef sentence2bigram_freq_reverse_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list[1:], sentence_owakati_list))\n    for key, value in zip(result.keys(), result.values()):\n            key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n            value_str = str(value)\n            key_value_str = \" \".join([key_str, value_str])\n            output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n            output_list.append(output)\n    return output_list\n```\n \n```{Python:Python 3.5.2}\n>>> del result_list\n>>> del tmp_list\n>>> \n>>> result_list = []\n>>> tmp_list = sentence2bigram_freq_reverse_list(sentence, result_list)\n>>> \n>>> pprint(tmp_list)\n['\u305f \u3057 1',\n '\u9ad8\u3044 \u304c 1',\n '\u5ddd \u3001 1',\n '\u5730\u57df \u305f 1',\n '\u3067 \u5317\u6d77\u9053 1',\n '\u304c \u305f 1',\n '\u6c3e\u6feb \u304c 1',\n '\u5317\u6d77\u9053 \u3001 1',\n '\u3042\u308a \u3082 1',\n '\u304c \u5ddd 1',\n '\u306f \u3067 1',\n '\u5ddd \u306f 1',\n '\u6e29\u5e2f \u3067 1',\n '\uff19 \u53f0\u98a8 1',\n '\u304c \u72b6\u614b 1',\n '\u72b6\u614b \u9ad8\u3044 1',\n '\u6d77\u4e0a \u306e 1',\n '\u306f \u53f7 1',\n '\u306e \u5ddd 1',\n '\u6c17\u5727 \u4f4e 1',\n '\u3001 \u7d9a\u304d 1',\n '\u3002 \u307e\u3059 1',\n '\\\\n \u3002 1',\n '\u307e\u3057 \u5909\u308f\u308a 1',\n '\u5317 \u306e 1',\n '\u306b \u6c17\u5727 1',\n '\u306e \u5317 1',\n '\u3057 \u6c3e\u6feb 1',\n '\u53f7 \uff19 1',\n '\u306e \u5317\u6d77\u9053 1',\n '\u7d9a\u304d \u304c 1',\n '\u6c34\u4f4d \u306e 1',\n '\u3001 \u304c 1',\n '\u4f4e \u6e29\u5e2f 1',\n '\u3082 \u5730\u57df 1',\n '\u307e\u3059 \u3042\u308a 1',\n '\u304c \u6c34\u4f4d 1',\n '\u5909\u308f\u308a \u306b 1',\n '\u5317\u6d77\u9053 \u306f 1',\n '\u3067 \u6d77\u4e0a 1',\n '\u305f \u307e\u3057 1']\n>>> \n```\n\n##__\u3010 \u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\u904e\u7a0b \u3011__\n\n___\n\n```{Python:Python 3.5.2}\n>>> words = [\"\u4eca\u65e5\", \"\u306f\", \"\u3068\u3066\u3082\", \"\u6691\u3044\", \"\u65e5\", \"\u3067\u3059\", \"\u3002\", \"\u6691\u3044\", \"\u65e5\", \u201c\u3060\"]\n```\n\n\n```{Python:Python 3.5.2}\n>>> from collections import Counter\n>>> result = Counter(zip(words,words[1:]))\n>>> print(result)\nCounter({('\u6691\u3044', '\u65e5'): 2, ('\u3002', '\u6691\u3044'): 1, ('\u3068\u3066\u3082', '\u6691\u3044'): 1, ('\u65e5', '\u3067\u3059'): 1, ('\u306f', '\u3068\u3066\u3082'): 1, ('\u3067\u3059', '\u3002'): 1, ('\u4eca\u65e5', '\u306f'): 1, ('\u65e5', '\u3060'): 1})\n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> for key, value in zip(result.keys(), result.values()):\n...     print(key, \" \", value)\n... \n('\u3002', '\u6691\u3044')   1\n('\u3068\u3066\u3082', '\u6691\u3044')   1\n('\u65e5', '\u3067\u3059')   1\n('\u306f', '\u3068\u3066\u3082')   1\n('\u6691\u3044', '\u65e5')   2\n('\u3067\u3059', '\u3002')   1\n('\u4eca\u65e5', '\u306f')   1\n('\u65e5', '\u3060')   1\n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     value_str = str(value)\n...     key_value_str = \" \".join([key_str, value_str])\n...     output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...     print(output)\n... \n\u3002 \u6691\u3044 1\n\u3068\u3066\u3082 \u6691\u3044 1\n\u65e5 \u3067\u3059 1\n\u306f \u3068\u3066\u3082 1\n\u6691\u3044 \u65e5 2\n\u3067\u3059 \u3002 1\n\u4eca\u65e5 \u306f 1\n\u65e5 \u3060 1\n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     value_str = str(value)\n...     key_value_str = \" \".join([key_str, value_str])\n...     output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...     output_list.append(output)\n... \n>>> \n>>> print(output_list)\n['\u3002 \u6691\u3044 1', '\u3068\u3066\u3082 \u6691\u3044 1', '\u65e5 \u3067\u3059 1', '\u306f \u3068\u3066\u3082 1', '\u6691\u3044 \u65e5 2', '\u3067\u3059 \u3002 1', '\u4eca\u65e5 \u306f 1', '\u65e5 \u3060 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(output_list)\n['\u3002 \u6691\u3044 1',\n '\u3068\u3066\u3082 \u6691\u3044 1',\n '\u65e5 \u3067\u3059 1',\n '\u306f \u3068\u3066\u3082 1',\n '\u6691\u3044 \u65e5 2',\n '\u3067\u3059 \u3002 1',\n '\u4eca\u65e5 \u306f 1',\n '\u65e5 \u3060 1']\n>>> \n>>> \n```\n\n___\n\n\n```{Python:sentence2owakati\u30e1\u30bd\u30c3\u30c9}\n>>> def sentence2owakati(sentence):\n...     import MeCab\n...     m = MeCab.Tagger(\"-Owakati\")\n...     return m.parse(sentence)\n... \n>>> \n>>> \n>>> sentence = \"\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\"\n>>> \n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n>>> tmp = sentence2owakati(sentence)\n>>> print(tmp)\n\u53f0\u98a8 \uff19 \u53f7 \u306f \u5317\u6d77\u9053 \u306e \u5317 \u306e \u6d77\u4e0a \u3067 \u6e29\u5e2f \u4f4e \u6c17\u5727 \u306b \u5909\u308f\u308a \u307e\u3057 \u305f \u304c \u3001 \u5317\u6d77\u9053 \u3067 \u306f \u5ddd \u306e \u6c34\u4f4d \u304c \u9ad8\u3044 \u72b6\u614b \u304c \u7d9a\u304d \u3001 \u5ddd \u304c \u6c3e\u6feb \u3057 \u305f \u5730\u57df \u3082 \u3042\u308a \u307e\u3059 \u3002 \n\n>>> \n>>> import types\n>>> print(type(tmp))\n<class 'str'>\n>>>\n```\n\n\n```{Python:Python 3.5.2}\n>>> print(tmp.split(\" \"))\n['\u53f0\u98a8', '\uff19', '\u53f7', '\u306f', '\u5317\u6d77\u9053', '\u306e', '\u5317', '\u306e', '\u6d77\u4e0a', '\u3067', '\u6e29\u5e2f', '\u4f4e', '\u6c17\u5727', '\u306b', '\u5909\u308f\u308a', '\u307e\u3057', '\u305f', '\u304c', '\u3001', '\u5317\u6d77\u9053', '\u3067', '\u306f', '\u5ddd', '\u306e', '\u6c34\u4f4d', '\u304c', '\u9ad8\u3044', '\u72b6\u614b', '\u304c', '\u7d9a\u304d', '\u3001', '\u5ddd', '\u304c', '\u6c3e\u6feb', '\u3057', '\u305f', '\u5730\u57df', '\u3082', '\u3042\u308a', '\u307e\u3059', '\u3002', '\\n']\n>>> \n```\n\n\n```{Python:sentence2bigram_freq_list\u30e1\u30bd\u30c3\u30c9}\n>>> def sentence2bigram_freq_list(sentence, output_list):\n...     sentence_owakati = sentence2owakati(sentence)\n...     sentence_owakati_list = sentence_owakati.split(\" \")\n...     from collections import Counter\n...     result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n...     for key, value in zip(result.keys(), result.values()):\n...             key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...             value_str = str(value)\n...             key_value_str = \" \".join([key_str, value_str])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n...     return output_list\n... \n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> print(sentence)\n\u53f0\u98a8\uff19\u53f7\u306f\u5317\u6d77\u9053\u306e\u5317\u306e\u6d77\u4e0a\u3067\u6e29\u5e2f\u4f4e\u6c17\u5727\u306b\u5909\u308f\u308a\u307e\u3057\u305f\u304c\u3001\u5317\u6d77\u9053\u3067\u306f\u5ddd\u306e\u6c34\u4f4d\u304c\u9ad8\u3044\u72b6\u614b\u304c\u7d9a\u304d\u3001\u5ddd\u304c\u6c3e\u6feb\u3057\u305f\u5730\u57df\u3082\u3042\u308a\u307e\u3059\u3002\n>>> \n```\n\n\n```{Python:Python 3.5.2}\n>>> result_list = []\n>>>\n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>> print(tmp_list)\n['\u3002 \\\\n 1', '\u306f \u5ddd 1', '\u307e\u3057 \u305f 1', '\u4f4e \u6c17\u5727 1', '\u6e29\u5e2f \u4f4e 1', '\u3057 \u305f 1', '\u305f \u304c 1', '\u306e \u5317 1', '\u304c \u7d9a\u304d 1', '\u6c17\u5727 \u306b 1', '\u5317\u6d77\u9053 \u306e 1', '\u7d9a\u304d \u3001 1', '\u5ddd \u304c 1', '\u304c \u3001 1', '\u306e \u6c34\u4f4d 1', '\u306b \u5909\u308f\u308a 1', '\u3082 \u3042\u308a 1', '\u304c \u6c3e\u6feb 1', '\u53f0\u98a8 \uff19 1', '\u5ddd \u306e 1', '\u307e\u3059 \u3002 1', '\u3001 \u5ddd 1', '\u306f \u5317\u6d77\u9053 1', '\u3042\u308a \u307e\u3059 1', '\u5730\u57df \u3082 1', '\u3001 \u5317\u6d77\u9053 1', '\u3067 \u306f 1', '\u5317 \u306e 1', '\u304c \u9ad8\u3044 1', '\uff19 \u53f7 1', '\u5317\u6d77\u9053 \u3067 1', '\u53f7 \u306f 1', '\u6c3e\u6feb \u3057 1', '\u5909\u308f\u308a \u307e\u3057 1', '\u6c34\u4f4d \u304c 1', '\u305f \u5730\u57df 1', '\u72b6\u614b \u304c 1', '\u9ad8\u3044 \u72b6\u614b 1', '\u6d77\u4e0a \u3067 1', '\u306e \u6d77\u4e0a 1', '\u3067 \u6e29\u5e2f 1']\n>>> \n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u3002 \\\\n 1',\n '\u306f \u5ddd 1',\n '\u307e\u3057 \u305f 1',\n '\u4f4e \u6c17\u5727 1',\n '\u6e29\u5e2f \u4f4e 1',\n '\u3057 \u305f 1',\n '\u305f \u304c 1',\n '\u306e \u5317 1',\n '\u304c \u7d9a\u304d 1',\n '\u6c17\u5727 \u306b 1',\n '\u5317\u6d77\u9053 \u306e 1',\n '\u7d9a\u304d \u3001 1',\n '\u5ddd \u304c 1',\n '\u304c \u3001 1',\n '\u306e \u6c34\u4f4d 1',\n '\u306b \u5909\u308f\u308a 1',\n '\u3082 \u3042\u308a 1',\n '\u304c \u6c3e\u6feb 1',\n '\u53f0\u98a8 \uff19 1',\n '\u5ddd \u306e 1',\n '\u307e\u3059 \u3002 1',\n '\u3001 \u5ddd 1',\n '\u306f \u5317\u6d77\u9053 1',\n '\u3042\u308a \u307e\u3059 1',\n '\u5730\u57df \u3082 1',\n '\u3001 \u5317\u6d77\u9053 1',\n '\u3067 \u306f 1',\n '\u5317 \u306e 1',\n '\u304c \u9ad8\u3044 1',\n '\uff19 \u53f7 1',\n '\u5317\u6d77\u9053 \u3067 1',\n '\u53f7 \u306f 1',\n '\u6c3e\u6feb \u3057 1',\n '\u5909\u308f\u308a \u307e\u3057 1',\n '\u6c34\u4f4d \u304c 1',\n '\u305f \u5730\u57df 1',\n '\u72b6\u614b \u304c 1',\n '\u9ad8\u3044 \u72b6\u614b 1',\n '\u6d77\u4e0a \u3067 1',\n '\u306e \u6d77\u4e0a 1',\n '\u3067 \u6e29\u5e2f 1']\n>>> \n```\n\n\n##__\u3010 \u5099\u8003 \u3011__\n\n###__Python 3\u74b0\u5883 \u3067 MeCab \u30e2\u30b8\u30e5\u30fc\u30eb\u4f7f\u3046\u6e96\u5099__\n\n* [grachro\u3055\u3093 Qiita\u8a18\u4e8b\uff082016/03/01\uff09\u300cPython3\u3067\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3MeCab\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b(2016\u5e743\u6708\u7248)\u300d](http://qiita.com/grachro/items/4fbc9bf8174c5abb7bdd)\n\n```{bash:Terminal}\nHirofumiYashima-no-MacBook:~ hirofumiyashima$ pip install mecab-python3\nCollecting mecab-python3\n  Downloading mecab-python3-0.7.tar.gz (41kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 1.1MB/s \nInstalling collected packages: mecab-python3\n  Running setup.py install for mecab-python3 ... done\nSuccessfully installed mecab-python3-0.7\nHirofumiYashima-no-MacBook:~ hirofumiyashima$\n```\n\n\n```{Python:Python 3.5.2}\n HirofumiYashima-no-MacBook:~ hirofumiyashima$ python\nPython 3.5.2 (default, Jul 23 2016, 14:25:12) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import MeCab\n>>> m = MeCab.Tagger (\"-Ochasen\")\n>>> print(m.parse (\"\u4eca\u65e5\u3082\u3057\u306a\u3044\u3068\u306d\"))\n\u4eca\u65e5\t\u30ad\u30e7\u30a6\t\u4eca\u65e5\t\u540d\u8a5e-\u526f\u8a5e\u53ef\u80fd\t\t\n\u3082\t\u30e2\t\u3082\t\u52a9\u8a5e-\u4fc2\u52a9\u8a5e\t\t\n\u3057\t\u30b7\t\u3059\u308b\t\u52d5\u8a5e-\u81ea\u7acb\t\u30b5\u5909\u30fb\u30b9\u30eb\t\u672a\u7136\u5f62\n\u306a\u3044\t\u30ca\u30a4\t\u306a\u3044\t\u52a9\u52d5\u8a5e\t\u7279\u6b8a\u30fb\u30ca\u30a4\t\u57fa\u672c\u5f62\n\u3068\t\u30c8\t\u3068\t\u52a9\u8a5e-\u63a5\u7d9a\u52a9\u8a5e\t\t\n\u306d\t\u30cd\t\u306d\t\u52a9\u8a5e-\u7d42\u52a9\u8a5e\t\t\nEOS\n\n>>> \n>>> m = MeCab.Tagger (\"-Owakati\")\n>>> print(m.parse (\"\u4eca\u65e5\u3082\u3057\u306a\u3044\u3068\u306d\"))\n\u4eca\u65e5 \u3082 \u3057 \u306a\u3044 \u3068 \u306d \n\n>>> \n```\n\n###__\u3010 \u5f8c\u65e5\u8ffd\u8a18 \u3011__\n\n\u300c\u5358\u8a9eA \u5358\u8a9eB \u5358\u8a9eA\u3068\u5358\u8a9eB\u306e\u4e26\u3073\u3067\u306e\u51fa\u73fe\u56de\u6570\u300d\u3000\u3092 \u51fa\u529b\u3059\u308b\u969b\u3001\n\u5358\u8a9e\u306e\uff11\u65b9\u3082\u3057\u304f\u306f\u4e21\u65b9\u304c\u7a7a\u6587\u5b57\u3067\u3042\u3063\u305f\u308a\u3001\u5171\u8d77\u56de\u6570\u306e\u5217\u306b\u6570\u5024\u4ee5\u5916\u306e\u30b4\u30df\u304c\u5165\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u3001\u4ee5\u4e0b \u306b \u6539\u826f\u3002\n\n```{Python:Python 3.5.2}\n>>> for key, value in zip(result.keys(), result.values()):\n...     key_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n...     token_pair = key_str.split(\",\")\n...     if (len(token_pair) == 2) and (not token_pair[0] == \"\") and (not token_pair[1] == \"\") and (isinstance(value, int)):\n...             key_value_str = \" \".join([key_str, str(value)])\n...             output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n...             output_list.append(output)\n... \n>>>\n```\n\n___\n\n##__\u6700\u7d42\u7684\u306a\u5b9f\u884c\u4f8b \uff08 2-gram \u306e\u5834\u5408 \uff09__\n\n\n```{bash:Terminal}\nHirofumiYashima-no-MacBook:work hirofumiyashima$ emacs corpus2bigram_freq_matrix_file.py\nHirofumiYashima-no-MacBook:work hirofumiyashima$ cat corpus2bigram_freq_matrix_file.py \n\ndef sentence2owakati(sentence):\n    import MeCab\n    m = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n    return m.parse(sentence)\n\n\ndef sentence2bigram_freq_list(sentence, output_list):\n    sentence_owakati = sentence2owakati(sentence)\n    sentence_owakati_list = sentence_owakati.split(\" \")\n    from collections import Counter\n    result = Counter(zip(sentence_owakati_list, sentence_owakati_list[1:]))\n\n    for key, value in zip(result.keys(), result.values()):\n\tkey_str = str(key).strip(\"'\").strip(\"(\").strip(\")\")\n\ttoken_pair = key_str.split(\",\")\n\tif (len(token_pair) == 2) and (not token_pair[0] == \"\") and (not token_pair[1] == \"\") and (isinstance(value, int)):\n\t    key_value_str = \" \".join([key_str, str(value)])\n\t    output = key_value_str.replace(\"'\", \"\").replace(\",\", \"\")\n\t    output_list.append(output)\n\n    return output_list\nHirofumiYashima-no-MacBook:work hirofumiyashima$ \n```\n\n\n* __\u30b3\u30fc\u30d1\u30b9\u30d5\u30a1\u30a4\u30eb \u3092 \u7528\u610f__\n\n```{Python:Python 3}\n>>> from corpus2bigram_freq_matrix_file import *\n>>> \n>>> text = \"\"\"\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n... \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa \u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n... \n... \u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044 \u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e \uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n... \u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n... \uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8 \u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059 \u3002\"\"\"\n>>> \n>>> print(text)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n\n\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>> \n>>> sentence = text.replace(\" \", \"\").strip()\n>>> print(sentence)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\n\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\n\n\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>> \n>>> sentence = sentence.replace(\"\\n\", \"\")\n>>> print(sentence)\n\uff12\uff11\u65e5\u306e\u6771\u4eac\u682a\u5f0f\u5e02\u5834\u306f\u65e5\u9280\u304c\u767a\u8868\u3057\u305f\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408\u306e\u7d50\u679c\u3092\u53d7\u3051\u3066\u5168\u9762\u9ad8\u306e\u5c55\u958b\u3068\u306a\u308a\u3001\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306f\uff13\uff10\uff10\u5186\u4ee5\u4e0a\u5024\u4e0a\u304c\u308a\u3057\u307e\u3057\u305f\u3002\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3001\uff12\uff11\u65e5\u306e\u7d42\u5024\u306f\u524d\u65e5\u3088\u308a\uff13\uff11\uff15\u5186\uff14\uff17\u92ad\u9ad8\u3044\uff11\u4e07\uff16\uff18\uff10\uff17\u5186\uff16\uff12\u92ad\u3002\u6771\u8a3c\u682a\u4fa1\u6307\u6570\uff1d\u30c8\u30d4\u30c3\u30af\u30b9\u306f\uff13\uff15\uff0e\uff17\uff10\u3001\u4e0a\u304c\u3063\u3066\uff11\uff13\uff15\uff12\uff0e\uff16\uff17\u3067\u3057\u305f\u3002\uff11\u65e5\u306e\u51fa\u6765\u9ad8\u306f\uff12\uff15\u5104\uff18\uff19\uff10\uff12\u4e07\u682a\u3067\u3057\u305f\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u306e\u76ee\u6a19\u306e\u5c0e\u5165\u3092\u6c7a\u3081\u305f\u3053\u3068\u3067\u9577\u671f\u91d1\u5229\u304c\u4e00\u6642\u3001\u304a\u3088\u305d\u534a\u5e74\u3076\u308a\u306b\u30d7\u30e9\u30b9\u306b\u8ee2\u3058\u305f\u3002\u3053\u308c\u3092\u53d7\u3051\u3001\u4f4e\u3044\u9577\u671f\u91d1\u5229\u3067\u5229\u3056\u3084\u304c\u7e2e\u5c0f\u3057\u3066\u3044\u305f\u9280\u884c\u3084\u4fdd\u967a\u4f1a\u793e\u306e\u682a\u5f0f\u3092\u4e2d\u5fc3\u306b\u8cb7\u3044\u6ce8\u6587\u304c\u96c6\u307e\u3063\u305f\u3002\u307e\u305f\u3001\u5186\u5b89\u30c9\u30eb\u9ad8\u3082\u9032\u3093\u3060\u3053\u3068\u3067\u81ea\u52d5\u8eca\u306a\u3069\u306e\u8f38\u51fa\u95a2\u9023\u9298\u67c4\u3082\u8cb7\u308f\u308c\u305f\u3002\u6295\u8cc7\u5bb6\u306f\u3001\u3042\u3059\u672a\u660e\u306b\u767a\u8868\u3055\u308c\u308b\u30a2\u30e1\u30ea\u30ab\u306e\uff26\uff32\uff22\uff1d\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a\u306e\u4f1a\u5408\u306e\u7d50\u679c\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\uff12\uff11\u65e5\u306e\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834\u306f\u3001\u65e5\u9280\u304c\u65b0\u305f\u306b\u9577\u671f\u91d1\u5229\u304c\uff10\uff05\u7a0b\u5ea6\u3067\u63a8\u79fb\u3059\u308b\u3088\u3046\u56fd\u50b5\u306e\u8cb7\u3044\u5165\u308c\u3092\u884c\u3046\u63aa\u7f6e\u306e\u5c0e\u5165\u306a\u3069\u3092\u6c7a\u3081\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u3001\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3001\u5186\u76f8\u5834\u306f\u5024\u4e0b\u304c\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u5e02\u5834\u95a2\u4fc2\u8005\u306f\u300c\u4eca\u56de\u3001\u65e5\u9280\u306f\u91d1\u878d\u653f\u7b56\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u898b\u8fbc\u3093\u3067\u3001\u5186\u3092\u8cb7\u3063\u3066\u3044\u305f\u6295\u8cc7\u5bb6\u306e\u9593\u3067\u3001\u4e00\u8ee2\u3057\u3066\u5186\u3092\u58f2\u308b\u52d5\u304d\u304c\u51fa\u3066\u3044\u308b\u300d\u3068\u8a71\u3057\u3066\u3044\u307e\u3059\u3002\n>>>\n```\n\n* __Python\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb \u3092 import \u3057\u3066\u3001\u5b9f\u884c__\n\n```{Python:Python 3}\n>>> from corpus2bigram_freq_matrix_file import *\n>>> \n>>> result_list = []\n>>> \n>>> tmp_list = sentence2bigram_freq_list(sentence, result_list)\n>>>\n>>> from pprint import pprint\n>>> pprint(tmp_list)\n['\u306f \u3001 2',\n '\u53d7\u3051\u3066 \u5168\u9762 1',\n '\u306e \u5c0e\u5165 2',\n '\u306e \u76ee\u6a19 1',\n '\uff18 \uff10 1',\n '\u898b\u8fbc\u3093 \u3067 1',\n '\u30d7\u30e9\u30b9 \u306b 1',\n '\u6ce8\u76ee \u3057 1',\n '\u682a \u3067\u3057 1',\n '\u3001 \u304a\u3088\u305d 1',\n '\u3092 \u884c\u3046 1',\n '\uff19 \uff10 1',\n '\u306a\u3069 \u306e 1',\n '\u304c \u4e00\u6642 1',\n '\u3092 \u8cb7\u3063 1',\n '\u4e07 \u682a 1',\n '\u7e2e\u5c0f \u3057 1',\n '\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 \u3001 1',\n '\u3066 \u3044 5',\n '\uff0e \uff16 1',\n '\u304c \u51fa\u3066 1',\n '\u308c \u305f 1',\n '\u306b \u6ce8\u76ee 1',\n '\uff1d \u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a 1',\n '\u3067\u3057 \u305f 2',\n '\u306e \u6771\u4eac\u682a\u5f0f\u5e02\u5834 1',\n '\u5168\u9762 \u9ad8 1',\n '\u5024\u4e0a\u304c\u308a \u3057 1',\n '\u306f \u65e5\u9280 1',\n '\uff17 \u3067\u3057 1',\n '\u8cb7\u3044 \u6ce8\u6587 1',\n '\u306e \u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834 1',\n '\u63a8\u79fb \u3059\u308b 1',\n '\u6771\u8a3c\u682a\u4fa1\u6307\u6570 \uff1d 1',\n '\u5229\u3056\u3084 \u304c 1',\n '\u306b \u767a\u8868 1',\n '\u5c0e\u5165 \u306a\u3069 1',\n '\u3066 \u3044\u308b 2',\n '\u300c \u4eca\u56de 1',\n '\uff12 \uff0e 1',\n '\u3060 \u3053\u3068 1',\n '\u4eca\u56de \u3001 1',\n '\u5024\u4e0b\u304c\u308a \u3057 1',\n '\u30a2\u30e1\u30ea\u30ab \u306e 1',\n '\u3088\u3046 \u56fd\u50b5 1',\n '\u3044\u308b \u300d 2',\n '\u305f \u9280\u884c 1',\n '\u3068 \u306a\u308a 1',\n '\uff12 \u4e07 1',\n '\uff11 \uff13 1',\n '\u65e5 \u306e 4',\n '\u3092 \u53d7\u3051 2',\n '\u3068 \u8a71\u3057 2',\n '\uff12 \uff11 3',\n '\u307e\u3059 \u3002 3',\n '\u95a2\u9023 \u9298\u67c4 1',\n '\u306b \u8cb7\u3044 1',\n '\u9023\u90a6\u6e96\u5099\u5236\u5ea6\u7406\u4e8b\u4f1a \u306e 1',\n '\u3002 \u5186\u76f8\u5834 1',\n '\u3066 \uff11 1',\n '\u300d \u3068 2',\n '\u3002 \u6295\u8cc7\u5bb6 1',\n '\u3067 \u81ea\u52d5\u8eca 1',\n '\u3057 \u307e\u3057 1',\n '\u9593 \u3067 1',\n '\u3002 \u3053\u308c 1',\n '\u5c55\u958b \u3068 1',\n '\u9577\u671f\u91d1\u5229 \u3067 1',\n '\u8ee2\u3058 \u305f 1',\n '\u3067 \u9577\u671f\u91d1\u5229 1',\n '\uff13 \uff11 1',\n '\u5186\u5b89\u30c9\u30eb\u9ad8 \u3082 1',\n '\u3001 \u4f4e\u3044 1',\n '\u3044 \u307e\u3059 3',\n '\u5e02\u5834\u95a2\u4fc2\u8005 \u306f 2',\n '\uff16 \uff12 1',\n '\uff15 \u5104 1',\n '\u306f \uff12 1',\n '\u3066 \u3001 1',\n '\u3057 \u3066 4',\n '\u3001 \u65e5\u9280 2',\n '\uff26\uff32\uff22 \uff1d 1',\n '\u9ad8\u3044 \uff11 1',\n '\u767a\u8868 \u3055 1',\n '\u6ce8\u6587 \u304c 1',\n '\u306e \u5c55\u958b 1',\n '\u53d7\u3051 \u3066 1',\n '\u884c\u3046 \u63aa\u7f6e 1',\n '\u4e2d\u5fc3 \u306b 1',\n '\u58f2\u308b \u52d5\u304d 2',\n '\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 \u306f 1',\n '\u306e \u682a\u5f0f 1',\n '\uff14 \uff17 1',\n '\u7d50\u679c \u3092 1',\n '\u306e \u51fa\u6765\u9ad8 1',\n '\u3002 \u6771\u8a3c\u682a\u4fa1\u6307\u6570 1',\n '\u3092 \u58f2\u308b 2',\n '\u306a\u3044 \u3068 1',\n '\u5186 \u3092 3',\n '\u3082 \u9032\u3093 1',\n '\u8cb7\u3063 \u3066 1',\n '\u3053\u308c \u3092 1',\n '\u3082 \u8cb7\u308f 1',\n '\u3092 \u4e2d\u5fc3 1',\n '\u5186 \u4ee5\u4e0a 1',\n '\uff10 \uff17 1',\n '\uff12 \uff15 1',\n '\u51fa\u3066 \u3001 1',\n '\u9280\u884c \u3084 1',\n '\u4f1a\u5408 \u306e 1',\n '\u3001 \u5186 2',\n '\uff10 \uff12 1',\n '\uff17 \u5186 1',\n '\u81ea\u52d5\u8eca \u306a\u3069 1',\n '\u52d5\u304d \u304c 2',\n '\u3044 \u305f 2',\n '\u3057 \u306a\u3044 1',\n '\u4fdd\u967a\u4f1a\u793e \u306e 1',\n '\u3055 \u308c\u308b 1',\n '\u3092 \u5909\u66f4 1',\n '\u3001 \u3042\u3059 1',\n '\uff18 \uff19 1',\n '\u3092 \u6c7a\u3081 2',\n '\u9032\u3093 \u3060 1',\n '\u5c0e\u5165 \u3092 1',\n '\u92ad \u3002 1',\n '\uff13 \uff10 1',\n '\u3067 \u3001 2',\n '\u682a\u5f0f \u3092 1',\n '\uff11 \u65e5 4',\n '\u306f \u91d1\u878d\u653f\u7b56 1',\n '\u4e07 \uff16 1',\n '\uff16 \uff18 1',\n '\u304a\u3088\u305d \u534a\u5e74 1',\n '\u304c \uff10 1',\n '\u3002 \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 1',\n '\u5186\u76f8\u5834 \u306f 2',\n '\uff15 \u5186 1',\n '\u9577\u671f\u91d1\u5229 \u304c 2',\n '\u306e \u7d42\u5024 1',\n '\u3002 \u5e02\u5834\u95a2\u4fc2\u8005 2',\n '\u5024\u4e0b\u304c\u308a \uff12 1',\n '\u5186 \uff14 1',\n '\u3001 \u5186\u76f8\u5834 1',\n '\uff12 \u92ad 1',\n '\u306e \uff26\uff32\uff22 1',\n '\u300c \u65e5\u9280 1',\n '\u767a\u8868 \u3057 1',\n '\uff13 \uff15 2',\n '\uff17 \u92ad 1',\n '\u65e5\u9280 \u304c 3',\n '\u306f \u5024\u4e0b\u304c\u308a 2',\n '\u91d1\u878d\u653f\u7b56 \u3092 1',\n '\u92ad \u9ad8\u3044 1',\n '\u3042\u3059 \u672a\u660e 1',\n '\u9298\u67c4 \u3082 1',\n '\u8cb7\u308f \u308c 1',\n '\u8cb7\u3044\u5165\u308c \u3092 1',\n '\u4e00\u6642 \u3001 1',\n '\u3084 \u4fdd\u967a\u4f1a\u793e 1',\n '\u306e \u7d50\u679c 2',\n '\u8f38\u51fa \u95a2\u9023 1',\n '\u305f \u3002 6',\n '\u6771\u4eac\u682a\u5f0f\u5e02\u5834 \u306f 1',\n '\u9ad8 \u306e 1',\n '\u306b \u9577\u671f\u91d1\u5229 2',\n '\uff05 \u7a0b\u5ea6 1',\n '\u4e0a\u304c\u3063 \u3066 1',\n '\u5104 \uff18 1',\n '\u306e \u9593 1',\n '\u3002 \\\\n 1',\n '\u304c \u96c6\u307e\u3063 1',\n '\u6771\u4eac\u5916\u56fd\u70ba\u66ff\u5e02\u5834 \u306f 1',\n '\u3092 \u53d7\u3051\u3066 1',\n '\u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408 \u306e 1',\n '\uff11 \u4e07 1',\n '\uff15 \uff0e 1',\n '\u3067 \u5229\u3056\u3084 1',\n '\uff0e \uff17 1',\n '\u3066 \u5186 1',\n '\u307e\u3057 \u305f 1',\n '\u304c \u51fa 1',\n '\u305f \u91d1\u878d\u653f\u7b56\u6c7a\u5b9a\u4f1a\u5408 1',\n '\u3001 \uff12 1',\n '\u306b \u30d7\u30e9\u30b9 1',\n '\u53d7\u3051 \u3001 1',\n '\u304c \u7e2e\u5c0f 1',\n '\u3001 \u65e5\u7d4c\u5e73\u5747\u682a\u4fa1 1',\n '\uff16 \uff17 1',\n '\u306a\u3069 \u3092 1',\n '\u3001 \u4e0a\u304c\u3063 1',\n '\u6295\u8cc7\u5bb6 \u306f 1',\n '\u30c8\u30d4\u30c3\u30af\u30b9 \u306f 1',\n '\u3067 \u63a8\u79fb 1',\n '\u306e \u4f1a\u5408 1',\n '\u306f \u300c 2',\n '\u304c \u767a\u8868 1',\n '\u9577\u671f\u91d1\u5229 \u306e 1',\n '\u4e00\u8ee2 \u3057 1',\n '\uff10 \uff05 1',\n '\u308c\u308b \u30a2\u30e1\u30ea\u30ab 1',\n '\u306f \u524d\u65e5 1',\n '\u3002 \uff11 1',\n '\u3053\u3068 \u3092 1',\n '\u4ee5\u4e0a \u5024\u4e0a\u304c\u308a 1',\n '\u524d\u65e5 \u3088\u308a 1',\n '\u3076\u308a \u306b 1',\n '\u5909\u66f4 \u3057 1',\n '\uff11 \uff15 1',\n '\u306e \u8cb7\u3044\u5165\u308c 1',\n '\u672a\u660e \u306b 1',\n '\uff1d \u30c8\u30d4\u30c3\u30af\u30b9 1',\n '\u51fa\u6765\u9ad8 \u306f 1',\n '\u6c7a\u3081 \u305f 2',\n '\u305f \u3053\u3068 2',\n '\u306b \u8ee2\u3058 1',\n '\u534a\u5e74 \u3076\u308a 1',\n '\u56fd\u50b5 \u306e 1',\n '\uff10 \u3001 1',\n '\u51fa \u3066 1',\n '\u4f4e\u3044 \u9577\u671f\u91d1\u5229 1',\n '\u3068 \u898b\u8fbc\u3093 1',\n '\u3057 \u305f 1',\n '\u3001 \u5186\u5b89\u30c9\u30eb\u9ad8 1',\n '\u63aa\u7f6e \u306e 1',\n '\u305f \u6295\u8cc7\u5bb6 1',\n '\uff10 \u5186 1',\n '\u3053\u3068 \u3067 2',\n '\uff15 \uff12 1',\n '\u5186 \uff16 1',\n '\u76ee\u6a19 \u306e 1',\n '\u3088\u308a \uff13 1',\n '\u307e\u305f \u3001 1',\n '\u3001 \u4e00\u8ee2 1',\n '\uff17 \uff10 1',\n '\u6295\u8cc7\u5bb6 \u306e 1',\n '\u306f \uff13 2',\n '\u306a\u308a \u3001 1',\n '\u96c6\u307e\u3063 \u305f 1',\n '\u7a0b\u5ea6 \u3067 1',\n '\u7d50\u679c \u306b 1',\n '\u3059\u308b \u3088\u3046 1',\n '\u304c \u65b0\u305f 2',\n '\u65b0\u305f \u306b 2',\n '\u8a71\u3057 \u3066 2',\n '\uff10 \uff10 1',\n '\u65e5\u9280 \u306f 1',\n '\u306e \u8f38\u51fa 1',\n '\u7d42\u5024 \u306f 1',\n '\u3002 \u307e\u305f 1']\n>>> \n```\n"}