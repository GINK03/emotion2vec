{"context": "\n\n\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u3066\u53c2\u7167\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bSingleton\n\n\u306f\u3058\u3081\u306b\nshared_ptr\u3092\u4f7f\u7528\u3057\u305fSingleton\u306e\u5b9f\u88c5\nSingleton\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u5f8c\u304b\u3089\u6307\u5b9a (shared_ptr\u3092\u4f7f\u7528\u3057\u305fSingleton\u306e\u5b9f\u88c5\u306e\u7d9a\u304d)\n\u4e0a2\u3064\u306e\u7d9a\u304d\u7684\u306a\u3082\u306e\u3067\u3059\u304c\u8aad\u307e\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\u5b9f\u88c5\n// \u30a2\u30ed\u30b1\u30fc\u30bf\u6307\u5b9a\u7528\ntemplate <typename T>\nstruct singleton_allocator\n{\n  template <typename U>\n  using type = std::allocator<U>;\n};\n\n// singleton\ntemplate <typename T>\nclass singleton\n{\nprivate:\n  struct impl : public T{};\n  using allocator_type = typename singleton_allocator<T>::template type<impl>;\n\nprotected:\n  singleton() = default;\n\npublic:\n  virtual ~singleton() { instance_.reset(); }\n\n  singleton( singleton const& ) = delete;\n  singleton& operator=( singleton const& ) = delete;\n\npublic:\n  static std::shared_ptr<T> get_instance()\n  {\n    auto ret_ptr = instance_.lock();\n    if( ret_ptr )\n    {\n      return ret_ptr;\n    }\n\n    ret_ptr   = std::allocate_shared<impl>( allocator_ );\n    instance_ = std::weak_ptr<T>( ret_ptr );\n    return ret_ptr;\n  }\n\nprivate:\n  static std::weak_ptr<T> instance_;\n  static allocator_type   allocator_;\n}; // class singleton\n\ntemplate <typename T> std::weak_ptr<T> singleton<T>::instance_;\ntemplate <typename T>\ntypename singleton<T>::allocator_type singleton<T>::allocator_;\n\n\n\u4f7f\u3044\u65b9\n\n\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\n\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306b\u3057\u305f\u3044\u30af\u30e9\u30b9\u3092 singleton<T> \u3092\u7d99\u627f\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nclass A : public singleton<A>\n{\nprivate:\n  friend class singleton<A>; // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304cprivate\u306a\u306e\u3067friend\u5ba3\u8a00\u304c\u5fc5\u8981\n  A(){}\npublic:\n  ~A(){}\n\n  void func(){}\n};\n\n\u4f7f\u7528\u4f8b\nint main()\n{\n  std::shared_ptr<A> a1 = A::get_instance(); // \u521d\u56de\u306eget_instance()\u6642\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\n  std::shared_ptr<A> a2 = A::get_instance(); // a1\u3068\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3059\n\n  a1->func(); // shared_ptr\u306a\u306e\u3067\u666e\u901a\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\n} // \u3053\u3053\u3067\u53c2\u7167\u304c0\u306b\u306a\u308b\u306e\u3067\u81ea\u52d5\u3067\u7834\u68c4\u3055\u308c\u308b\n\n\n\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\n\u4f7f\u7528\u3059\u308b\u30a2\u30ed\u30b1\u30fc\u30bf\u3092my_allocator\u3068\u3057\u307e\u3059\u3002\n\u4e0a\u306eclass A\u3092\u5b9a\u7fa9\u3059\u308b\u524d\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\nclass A; // \u524d\u65b9\u5ba3\u8a00\n\ntemplate <>\nstruct pyrite::singleton_allocator<A>\n{\n  template <typename T>\n  using type = my_allocator<T>;\n};\n\n\u5f8c\u306f\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u89e3\u8aac\ntemplate <typename T>\nstruct singleton_allocator\n{\n  template <typename U>\n  using type = std::allocator<U>;\n};\n\n\u306f\u3058\u3081\u306e\u3053\u306e\u90e8\u5206\u306f\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3067\u3059\u3002\nsingleton_allocator \u3092\u90e8\u5206\u7279\u6b8a\u5316\u3059\u308b\u3053\u3068\u3067\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f std::allocator \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u578bT\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304cprivate\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067 allocate_shared<T> \u3084 make_shared<T> \u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057 allocate_shared \u3092\u4f7f\u7528\u3057\u305f\u3044\u306e\u3067\u578bT\u3092\u7d99\u627f\u3057\u305f impl \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nstruct impl : public T{};\n\n\u3053\u306e\u8fba\u306e\u3053\u3068\u306f std::make_shared \u304b\u3089 private \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059 \u306b\u3044\u308d\u3044\u308d\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u662f\u975e\u3002\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067 instance_.reset() \u3057\u3066\u3044\u308b\u306e\u306f make_shared \u306a\u3069\u3067\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306f\u5f31\u53c2\u7167\u304c\u6b8b\u3063\u3066\u3044\u3066\u3082\u958b\u653e\u3055\u308c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u5f8c\u306f\u7279\u306b\u5909\u308f\u3063\u305f\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nSingleton\u306e\u578b\u3092\u5909\u3048\u305a\u306b\u6d3e\u751f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u5074\u3067\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\nSingleton\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u3044\u3068\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3067\u304d\u306a\u3044\u3088\u308a\u3067\u304d\u305f\u307b\u3046\u304c\u826f\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3060\u3051\u3067\u3059\u3002\n\u53c2\u7167\u304c0\u3067 get_instance() \u3092\u547c\u3073\u51fa\u3059\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u81ea\u52d5\u3067\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\n\u6ce8\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u306f\n\n\u5b9f\u969b\u78ba\u4fdd\u3059\u308b\u65b9\u304c singleton<T>::impl \u578b\u3067\u3042\u308b\nT\u578b\u306b final \u3092\u3064\u3051\u3089\u308c\u306a\u3044\n\n\u3042\u305f\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n# \u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u3066\u53c2\u7167\u304c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u7834\u68c4\u3055\u308c\u308bSingleton\n## \u306f\u3058\u3081\u306b\n[shared_ptr\u3092\u4f7f\u7528\u3057\u305fSingleton\u306e\u5b9f\u88c5](http://qiita.com/block/items/5604104ab2b0392590aa)\n[Singleton\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u5f8c\u304b\u3089\u6307\u5b9a (shared_ptr\u3092\u4f7f\u7528\u3057\u305fSingleton\u306e\u5b9f\u88c5\u306e\u7d9a\u304d)](http://qiita.com/block/items/f6c3c56bf6c3e6de4506)\n\u4e0a2\u3064\u306e\u7d9a\u304d\u7684\u306a\u3082\u306e\u3067\u3059\u304c\u8aad\u307e\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\u3002\n\n## \u5b9f\u88c5\n```cpp\n// \u30a2\u30ed\u30b1\u30fc\u30bf\u6307\u5b9a\u7528\ntemplate <typename T>\nstruct singleton_allocator\n{\n  template <typename U>\n  using type = std::allocator<U>;\n};\n\n// singleton\ntemplate <typename T>\nclass singleton\n{\nprivate:\n  struct impl : public T{};\n  using allocator_type = typename singleton_allocator<T>::template type<impl>;\n\nprotected:\n  singleton() = default;\n\npublic:\n  virtual ~singleton() { instance_.reset(); }\n\n  singleton( singleton const& ) = delete;\n  singleton& operator=( singleton const& ) = delete;\n\npublic:\n  static std::shared_ptr<T> get_instance()\n  {\n    auto ret_ptr = instance_.lock();\n    if( ret_ptr )\n    {\n      return ret_ptr;\n    }\n\n    ret_ptr   = std::allocate_shared<impl>( allocator_ );\n    instance_ = std::weak_ptr<T>( ret_ptr );\n    return ret_ptr;\n  }\n\nprivate:\n  static std::weak_ptr<T> instance_;\n  static allocator_type   allocator_;\n}; // class singleton\n\ntemplate <typename T> std::weak_ptr<T> singleton<T>::instance_;\ntemplate <typename T>\ntypename singleton<T>::allocator_type singleton<T>::allocator_;\n```\n\n## \u4f7f\u3044\u65b9\n### \u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\n\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306b\u3057\u305f\u3044\u30af\u30e9\u30b9\u3092 ```singleton<T> ``` \u3092\u7d99\u627f\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cpp\nclass A : public singleton<A>\n{\nprivate:\n  friend class singleton<A>; // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304cprivate\u306a\u306e\u3067friend\u5ba3\u8a00\u304c\u5fc5\u8981\n  A(){}\npublic:\n  ~A(){}\n\n  void func(){}\n};\n```\n\n\u4f7f\u7528\u4f8b\n\n```cpp\nint main()\n{\n  std::shared_ptr<A> a1 = A::get_instance(); // \u521d\u56de\u306eget_instance()\u6642\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\n  std::shared_ptr<A> a2 = A::get_instance(); // a1\u3068\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3059\n\n  a1->func(); // shared_ptr\u306a\u306e\u3067\u666e\u901a\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\n} // \u3053\u3053\u3067\u53c2\u7167\u304c0\u306b\u306a\u308b\u306e\u3067\u81ea\u52d5\u3067\u7834\u68c4\u3055\u308c\u308b\n```\n\n### \u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\n\u4f7f\u7528\u3059\u308b\u30a2\u30ed\u30b1\u30fc\u30bf\u3092```my_allocator```\u3068\u3057\u307e\u3059\u3002\n\u4e0a\u306e```class A```\u3092**\u5b9a\u7fa9\u3059\u308b\u524d**\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\n```cpp\nclass A; // \u524d\u65b9\u5ba3\u8a00\n\ntemplate <>\nstruct pyrite::singleton_allocator<A>\n{\n  template <typename T>\n  using type = my_allocator<T>;\n};\n```\n\n\u5f8c\u306f\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3068\u540c\u3058\u3067\u3059\u3002\n\n## \u89e3\u8aac\n```cpp\ntemplate <typename T>\nstruct singleton_allocator\n{\n  template <typename U>\n  using type = std::allocator<U>;\n};\n```\n\n\u306f\u3058\u3081\u306e\u3053\u306e\u90e8\u5206\u306f\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3067\u3059\u3002\n``` singleton_allocator ``` \u3092\u90e8\u5206\u7279\u6b8a\u5316\u3059\u308b\u3053\u3068\u3067\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ``` std::allocator ``` \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\n\n\n\u578bT\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304cprivate\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067 ` allocate_shared<T> ` \u3084 `make_shared<T> ` \u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057 `allocate_shared` \u3092\u4f7f\u7528\u3057\u305f\u3044\u306e\u3067\u578bT\u3092\u7d99\u627f\u3057\u305f ` impl ` \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cpp\nstruct impl : public T{};\n```\n\n\u3053\u306e\u8fba\u306e\u3053\u3068\u306f [std::make_shared \u304b\u3089 private \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059](http://d.hatena.ne.jp/gintenlabo/20131211/1386771626) \u306b\u3044\u308d\u3044\u308d\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u662f\u975e\u3002\n\n\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067 ` instance_.reset() ` \u3057\u3066\u3044\u308b\u306e\u306f ` make_shared ` \u306a\u3069\u3067\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306f\u5f31\u53c2\u7167\u304c\u6b8b\u3063\u3066\u3044\u3066\u3082\u958b\u653e\u3055\u308c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u5f8c\u306f\u7279\u306b\u5909\u308f\u3063\u305f\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\nSingleton\u306e\u578b\u3092\u5909\u3048\u305a\u306b\u6d3e\u751f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u5074\u3067\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\nSingleton\u306e\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u3044\u3068\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3067\u304d\u306a\u3044\u3088\u308a\u3067\u304d\u305f\u307b\u3046\u304c\u826f\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3060\u3051\u3067\u3059\u3002\n\n\u53c2\u7167\u304c0\u3067 ` get_instance() ` \u3092\u547c\u3073\u51fa\u3059\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u53c2\u7167\u304c0\u306b\u306a\u3063\u305f\u6642\u70b9\u3067\u81ea\u52d5\u3067\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\n\n\u6ce8\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u306f\n\n - \u5b9f\u969b\u78ba\u4fdd\u3059\u308b\u65b9\u304c ` singleton<T>::impl ` \u578b\u3067\u3042\u308b\n - T\u578b\u306b ` final ` \u3092\u3064\u3051\u3089\u308c\u306a\u3044\n\n\u3042\u305f\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["C++", "allocator", "singleton"]}