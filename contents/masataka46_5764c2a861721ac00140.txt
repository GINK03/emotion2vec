{"context": "\n\n\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n\n\u306f\u3058\u3081\u306b\nDeuling Network\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b\uff12\u56de\u76ee\u3002\u524d\u56de\u306fchainer/functions/connection/bilinear.py\u3092\u78ba\u8a8d\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/3ec187a5ff30fb416eae\n\u4eca\u56de\u306f\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066forward()\u3068backward()\u3092\u5909\u66f4\u3057\u3066\u3044\u304f\u3002\n\nforward()\u306e\u5909\u66f4\n\u307e\u305a\u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u3092\u5909\u66f4\u3059\u308b\u3002\u6982\u7565\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nNumpy\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u3048\u3070\u3001\u5927\u304d\u3055\u306e\u9055\u3046\u884c\u5217\u9593\u3067\u3082\u4e00\u5b9a\u306e\u6cd5\u5247\u306e\u3082\u3068\u306b\u8db3\u3057\u5f15\u304d\u3067\u304d\u308b\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\u307e\u305a\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067e1\u3068e2\u3092\u8db3\u3059\u3002\u3053\u308c\u3067e2\u306e\u305d\u308c\u305e\u308c\u306e\u5217\u306b\u5bfe\u3057\u3066e1\u304c\u8db3\u3055\u308c\u308b\u3002\u4e00\u65b9\u3001e2\u3092\u5217\u65b9\u5411\u306b\u5e73\u5747\u5316\u3057\u305f\u3082\u306e\u3092E2\u3068\u3057\u3066\u751f\u6210\u3059\u308b\u3002\u518d\u5ea6\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u5148\u306b\u8db3\u3057\u305f\u3082\u306e\u304b\u3089E2\u3092\u5f15\u304f\u3068y\u304c\u6c42\u307e\u308b\u3002\nforward()\u95a2\u6570\u5185\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n    def forward(self, inputs):\n        e1 = array.as_mat(inputs[0])\n        e2 = array.as_mat(inputs[1])\n        W = inputs[2]\n\n        #modified algorithm\n        y = e1 + e2 - e2.sum(1).reshape(len(e2), 1) / len(e2[0])\n        return y,\n\n\ne1\u306ebackward\u3092\u6c42\u3081\u308b\n\u307e\u305aV\u5074\u3078\u306e\u03b4\u3067\u3042\u308bge1\u3092\u6c42\u3081\u308b\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\uff08\u8a08\u7b97\u9593\u9055\u3063\u3066\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\n\ngy\u3092sum()\u3067\u5217\u65b9\u5411\u306b\u8db3\u3057\u5408\u308f\u305b\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u3002\n        ge1 = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n\n\ne2\u306ebackward\u3092\u6c42\u3081\u308b\n\u6b21\u306bA\u5074\u306e\u03b4\u3067\u3042\u308be2\u3092\u6c42\u3081\u308b\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n\u5de5\u592b\u304c\u5fc5\u8981\u306a\u306e\u306f(gy1+gy2+gy3)\u306e\u90e8\u5206\u3060\u308d\u3046\u304b\u3002\u3053\u3053\u306fcupy.sum()\u95a2\u6570\u3067\u5024\u3092\u8db3\u3057\u3001\u3053\u308c\u3092cupy.tile()\u3067\u5c55\u958b\u3059\u308b\u3002\u3088\u3063\u3066forward()\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3002\n    def backward(self, inputs, grad_outputs):\n        e1 = array.as_mat(inputs[0])\n        e2 = array.as_mat(inputs[1])\n        W = inputs[2]\n        gy = grad_outputs[0]\n        '''\n        xp = cuda.get_array_module(*inputs)\n        if xp is numpy:\n            gW = numpy.einsum('ij,ik,il->jkl', e1, e2, gy)\n            ge1 = numpy.einsum('ik,jkl,il->ij', e2, W, gy)\n            ge2 = numpy.einsum('ij,jkl,il->ik', e1, W, gy)\n        else:\n            kern = cuda.reduce('T in0, T in1, T in2', 'T out',\n                               'in0 * in1 * in2', 'a + b', 'out = a', 0,\n                               'bilinear_product')\n\n            e1_b = e1[:, :, None, None]  # ij\n            e2_b = e2[:, None, :, None]  # ik\n            gy_b = gy[:, None, None, :]  # il\n            W_b = W[None, :, :, :]  # jkl\n\n            gW = kern(e1_b, e2_b, gy_b, axis=0)  # 'ij,ik,il->jkl'\n            ge1 = kern(e2_b, W_b, gy_b, axis=(2, 3))  # 'ik,jkl,il->ij'\n            ge2 = kern(e1_b, W_b, gy_b, axis=(1, 3))  # 'ij,jkl,il->ik'\n        '''\n        ge1 = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n        gy_sum = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n        gy_tile = cupy.tile(gy_sum, len(gy[0])).astype(dtype=gy.dtype, copy=False)\n        ge2 = (gy - gy_tile / len(gy[0])).astype(dtype=gy.dtype, copy=False)\n        gW = cupy.zeros(len(e1[0])*len(e2[0])*len(e2[0])).reshape(len(e1[0]), len(e2[0]), len(e2[0])).astype(dtype=gy.dtype, copy=False)\n\n        ret = ge1.reshape(inputs[0].shape), ge2.reshape(inputs[1].shape), gW\n        if len(inputs) == 6:\n            V1, V2, b = inputs[3:]\n            gV1 = e1.T.dot(gy)\n            gV2 = e2.T.dot(gy)\n            gb = gy.sum(0)\n            ge1 += gy.dot(V1.T)\n            ge2 += gy.dot(V2.T)\n            ret += gV1, gV2, gb\n        return ret\n\n\nLIS\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3059\u308b\nLIS ver2\u306eexample\u30b2\u30fc\u30e0\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3057\u305f\u3002LIS ver2\u306b\u95a2\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3055\u308c\u305f\u3057\u3002\nhttp://qiita.com/masataka46/items/977eba5010c1f000dc1d\n\uff14\uff10\u4e07\u30b9\u30c6\u30c3\u30d7\u307b\u3069\u5b66\u7fd2\u3055\u305b\u305f\u7d50\u679c\u304c\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\n\nDQN(Mnih,2015)\u3088\u308a\u6027\u80fd\u304c\u4e0a\u304c\u3063\u3066\u308b\u6c17\u304c\u3059\u308b\u306a\u301c\u3002\u3061\u3083\u3093\u3068\u3057\u305f\u6bd4\u8f03\u306f\u3057\u3066\u306a\u3044\u3051\u3069\u3002\n\nAtari 2600\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3059\u308b\nAtari 2600\u306eBreakOut\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3057\u305f\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\n\n\u6a2a\u8ef8\u304cepisode\u3067\u3001\u7e26\u8ef8\u304c\u5404episode\u3067\u53d7\u3051\u53d6\u3063\u305freward\u3002\u78ba\u5b9f\u306b\u4e0a\u6607\u3057\u3066\u308b\u306d\u3002\n\n\u30b3\u30fc\u30c9\u306e\u5834\u6240\nLIS ver2\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u307e\u3057\u305f\u3002\nhttps://github.com/masataka46/DuelingNetwork_for_LIS\nAtari2600\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u307e\u3057\u305f\u3002\nhttps://github.com/masataka46/DuelingNetwork\n##\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n##\u306f\u3058\u3081\u306b\nDeuling Network\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b\uff12\u56de\u76ee\u3002\u524d\u56de\u306f`chainer/functions/connection/bilinear.py`\u3092\u78ba\u8a8d\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/3ec187a5ff30fb416eae\n\u4eca\u56de\u306f\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066forward()\u3068backward()\u3092\u5909\u66f4\u3057\u3066\u3044\u304f\u3002\n##forward()\u306e\u5909\u66f4\n\u307e\u305a\u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u3092\u5909\u66f4\u3059\u308b\u3002\u6982\u7565\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n![DN_forward01.png](https://qiita-image-store.s3.amazonaws.com/0/116706/7f65c32d-3666-f626-1904-8813e47c23e9.png)\nNumpy\u306e\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u4f7f\u3048\u3070\u3001\u5927\u304d\u3055\u306e\u9055\u3046\u884c\u5217\u9593\u3067\u3082\u4e00\u5b9a\u306e\u6cd5\u5247\u306e\u3082\u3068\u306b\u8db3\u3057\u5f15\u304d\u3067\u304d\u308b\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\n\u307e\u305a\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067e1\u3068e2\u3092\u8db3\u3059\u3002\u3053\u308c\u3067e2\u306e\u305d\u308c\u305e\u308c\u306e\u5217\u306b\u5bfe\u3057\u3066e1\u304c\u8db3\u3055\u308c\u308b\u3002\u4e00\u65b9\u3001e2\u3092\u5217\u65b9\u5411\u306b\u5e73\u5747\u5316\u3057\u305f\u3082\u306e\u3092E2\u3068\u3057\u3066\u751f\u6210\u3059\u308b\u3002\u518d\u5ea6\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u3001\u5148\u306b\u8db3\u3057\u305f\u3082\u306e\u304b\u3089E2\u3092\u5f15\u304f\u3068y\u304c\u6c42\u307e\u308b\u3002\n\nforward()\u95a2\u6570\u5185\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n\n```py\n    def forward(self, inputs):\n        e1 = array.as_mat(inputs[0])\n        e2 = array.as_mat(inputs[1])\n        W = inputs[2]\n\n        #modified algorithm\n        y = e1 + e2 - e2.sum(1).reshape(len(e2), 1) / len(e2[0])\n        return y,\n```\n\n##e1\u306ebackward\u3092\u6c42\u3081\u308b\n\u307e\u305aV\u5074\u3078\u306e\u03b4\u3067\u3042\u308bge1\u3092\u6c42\u3081\u308b\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\uff08\u8a08\u7b97\u9593\u9055\u3063\u3066\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\n![backward_DN_1018.png](https://qiita-image-store.s3.amazonaws.com/0/116706/429705cd-f30a-b565-45f5-9e28bd0f714d.png)\ngy\u3092sum()\u3067\u5217\u65b9\u5411\u306b\u8db3\u3057\u5408\u308f\u305b\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u3002\n\n```py\n        ge1 = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n```\n\n##e2\u306ebackward\u3092\u6c42\u3081\u308b\n\u6b21\u306bA\u5074\u306e\u03b4\u3067\u3042\u308be2\u3092\u6c42\u3081\u308b\u3002\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n![img_DN_back02.png](https://qiita-image-store.s3.amazonaws.com/0/116706/926c0889-bbf3-a11b-69ee-f447503707ed.png)\n\u5de5\u592b\u304c\u5fc5\u8981\u306a\u306e\u306f(gy1+gy2+gy3)\u306e\u90e8\u5206\u3060\u308d\u3046\u304b\u3002\u3053\u3053\u306f`cupy.sum()`\u95a2\u6570\u3067\u5024\u3092\u8db3\u3057\u3001\u3053\u308c\u3092`cupy.tile()`\u3067\u5c55\u958b\u3059\u308b\u3002\u3088\u3063\u3066forward()\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3002\n\n```py\n    def backward(self, inputs, grad_outputs):\n        e1 = array.as_mat(inputs[0])\n        e2 = array.as_mat(inputs[1])\n        W = inputs[2]\n        gy = grad_outputs[0]\n        '''\n        xp = cuda.get_array_module(*inputs)\n        if xp is numpy:\n            gW = numpy.einsum('ij,ik,il->jkl', e1, e2, gy)\n            ge1 = numpy.einsum('ik,jkl,il->ij', e2, W, gy)\n            ge2 = numpy.einsum('ij,jkl,il->ik', e1, W, gy)\n        else:\n            kern = cuda.reduce('T in0, T in1, T in2', 'T out',\n                               'in0 * in1 * in2', 'a + b', 'out = a', 0,\n                               'bilinear_product')\n\n            e1_b = e1[:, :, None, None]  # ij\n            e2_b = e2[:, None, :, None]  # ik\n            gy_b = gy[:, None, None, :]  # il\n            W_b = W[None, :, :, :]  # jkl\n\n            gW = kern(e1_b, e2_b, gy_b, axis=0)  # 'ij,ik,il->jkl'\n            ge1 = kern(e2_b, W_b, gy_b, axis=(2, 3))  # 'ik,jkl,il->ij'\n            ge2 = kern(e1_b, W_b, gy_b, axis=(1, 3))  # 'ij,jkl,il->ik'\n        '''\n        ge1 = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n        gy_sum = cupy.sum(gy, axis=1).reshape(len(gy), 1).astype(dtype=gy.dtype, copy=False)\n        gy_tile = cupy.tile(gy_sum, len(gy[0])).astype(dtype=gy.dtype, copy=False)\n        ge2 = (gy - gy_tile / len(gy[0])).astype(dtype=gy.dtype, copy=False)\n        gW = cupy.zeros(len(e1[0])*len(e2[0])*len(e2[0])).reshape(len(e1[0]), len(e2[0]), len(e2[0])).astype(dtype=gy.dtype, copy=False)\n\n        ret = ge1.reshape(inputs[0].shape), ge2.reshape(inputs[1].shape), gW\n        if len(inputs) == 6:\n            V1, V2, b = inputs[3:]\n            gV1 = e1.T.dot(gy)\n            gV2 = e2.T.dot(gy)\n            gb = gy.sum(0)\n            ge1 += gy.dot(V1.T)\n            ge2 += gy.dot(V2.T)\n            ret += gV1, gV2, gb\n        return ret\n```\n\n##LIS\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3059\u308b\nLIS ver2\u306eexample\u30b2\u30fc\u30e0\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3057\u305f\u3002LIS ver2\u306b\u95a2\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3055\u308c\u305f\u3057\u3002\nhttp://qiita.com/masataka46/items/977eba5010c1f000dc1d\n\uff14\uff10\u4e07\u30b9\u30c6\u30c3\u30d7\u307b\u3069\u5b66\u7fd2\u3055\u305b\u305f\u7d50\u679c\u304c\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\n![DN_reward_result_161019.png](https://qiita-image-store.s3.amazonaws.com/0/116706/0b53246e-a80b-d0b8-742a-56585a24b0d9.png)\nDQN(Mnih,2015)\u3088\u308a\u6027\u80fd\u304c\u4e0a\u304c\u3063\u3066\u308b\u6c17\u304c\u3059\u308b\u306a\u301c\u3002\u3061\u3083\u3093\u3068\u3057\u305f\u6bd4\u8f03\u306f\u3057\u3066\u306a\u3044\u3051\u3069\u3002\n\n##Atari 2600\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3059\u308b\nAtari 2600\u306eBreakOut\u3067\u6027\u80fd\u3092\u691c\u8a3c\u3057\u305f\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3002\n![reward_161022_DN.png](https://qiita-image-store.s3.amazonaws.com/0/116706/a04b049f-68e2-2d40-b5ee-5cf9c3b6e7de.png)\n\u6a2a\u8ef8\u304cepisode\u3067\u3001\u7e26\u8ef8\u304c\u5404episode\u3067\u53d7\u3051\u53d6\u3063\u305freward\u3002\u78ba\u5b9f\u306b\u4e0a\u6607\u3057\u3066\u308b\u306d\u3002\n\n##\u30b3\u30fc\u30c9\u306e\u5834\u6240\nLIS ver2\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u307e\u3057\u305f\u3002\nhttps://github.com/masataka46/DuelingNetwork_for_LIS\n\nAtari2600\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3042\u3052\u307e\u3057\u305f\u3002\nhttps://github.com/masataka46/DuelingNetwork\n\n", "tags": ["Chainer", "python2.7", "numpy", "DQN", "DeepLearning"]}