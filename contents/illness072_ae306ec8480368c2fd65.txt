{"context": " More than 1 year has passed since last update.\u524d\u56de\uff08kldload\u3059\u308b\u3068\u3053\u307e\u3067\uff09\uff1a http://qiita.com/illness072/items/48fd71b20f6cd372320c\n\u524d\u56de\u306f\u30ed\u30fc\u30c9\u3001\u30a2\u30f3\u30ed\u30fc\u30c9\u307e\u3067\u4e0a\u624b\u304f\u3044\u3063\u3066\u305f\u3063\u307d\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u4e88\u544a\u901a\u308a open/close/read \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u307f\u308b\u3002\nopen \u3068\u304b close \u3068\u304b read \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u30ed\u30fc\u30c9\u3055\u308c\u305f\u3068\u304d\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u4f53\u3092\u4f5c\u3063\u3066\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002DEV_MODULE() \u3067\u6559\u3048\u3066\u3084\u3063\u305f\u30cf\u30f3\u30c9\u30e9\u95a2\u6570 hello_load() \u306e\u306a\u304b\u3067\u3001make_dev() \u3068\u304b destroy_dev() \u3092\u547c\u3093\u3067\u3084\u308b\u308f\u3051\u3060\u3002\u306a\u3093\u3060\u304b\u3059\u3054\u304f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u3073\u3063\u304f\u308a\u3001\u3082\u3063\u3068\u6ce5\u81ed\u3044(?)\u611f\u3058\u304b\u3068\u601d\u3063\u3066\u305f\u3001\u30ab\u30fc\u30cd\u30eb\u30e9\u30f3\u30c9\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067 sys/sys/conf.h \u306b\u3042\u308b struct cdevsw \u3092\u3064\u304b\u3063\u3066\u3001make_dev() \u306b\u6e21\u3059\u305f\u3081\u306e\u5024\u3092\u4f5c\u3063\u3066\u3084\u308b\u3002\n/* cdev\u30dd\u30a4\u30f3\u30bf\u306e\u7f6e\u304d\u5834 */\nstatic struct cdev *hello_dev;\n\n/* \u95a2\u6570\u5b9a\u7fa9 */\nstatic d_open_t    hello_open;\nstatic d_close_t   hello_close;\nstatic d_read_t    hello_read;\n\n/**\n * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9\u3002\n * see: sys/sys/conf.h\n * \u7a7a\u306e\u3082\u306e\u306f\u4f55\u3082\u3057\u306a\u3044\u6271\u3044\u3063\u307d\u3044\uff1f\n */\nstatic struct cdevsw hello_cdevsw = {\n  .d_version = D_VERSION, /* \u3053\u308c\u304c\u4f55\u306a\u306e\u304b\u308f\u304b\u3063\u3066\u306a\u3044 */\n  .d_open = hello_open,\n  .d_close = hello_close,\n  .d_read = hello_read,\n  .d_write = (d_write_t *)nullop, /* \u4f55\u3082\u3057\u306a\u3044\u3088\u3063\u3066\u4e8b\u306e\u8868\u73fe\u3063\u307d\u3044\uff1f */\n  .d_name = \"hello\",\n};\n\n# \u30b3\u30e1\u30f3\u30c8\u304c\u307d\u3044\u307d\u3044\u3046\u308b\u3055\u3044\u3051\u3069\u3001\u52c9\u5f37\u3057\u304c\u3066\u3089\u66f8\u3044\u3066\u308b\u306e\u3067\u52d8\u5f01\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3088\u3046\u306f\u3053\u308c\u304b\u3089\u66f8\u304f hello_open \u3068\u304b\u305d\u3046\u3044\u3046\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u307e\u3068\u3081\u3066\u7a81\u3063\u8fbc\u3093\u3067\u3084\u308b\u307f\u305f\u3044\u3002\n\u305d\u3057\u3066\u5b9f\u969b\u306b\u3053\u306e hello_dev \u3068\u304b hello_cdevsw \u3068\u304b\u3092 make_dev() \u306b\u6e21\u3059\u3088\u3046\u30cf\u30f3\u30c9\u30e9\u3092\u66f8\u304d\u63db\u3048\u308b\u3002\nstatic int\nhello_load(module_t mod __unused, int /* modeventtype_t */ what,\n           void* args __unused)\n{\n  /**\n   * see: man 9 module\n   */\n  int err = 0;\n\n  switch (what) {\n  case MOD_LOAD:\n    printf(\"hello: Load\\n\");\n    hello_dev = make_dev_credf(MAKEDEV_CHECKNAME | MAKEDEV_WAITOK,\n                              &hello_cdevsw, 0,\n                              NULL, UID_ROOT, GID_WHEEL, 0666, \"hello\");\n    break;\n  case MOD_UNLOAD:\n    destroy_dev(hello_dev);\n    printf(\"hello: Unload\\n\");\n    break;\n  case MOD_SHUTDOWN:\n    printf(\"hello: Shutdown\\n\");\n    break;\n  case MOD_QUIESCE:\n    printf(\"hello: Quisce\\n\");\n    break;\n  default:\n    err = EOPNOTSUPP; /* Operation not supported */\n    break;\n  }\n  return err;\n}\n\nMOD_LOAD \u306e\u3068\u304d\u306b make_dev_credf() \u3063\u3066\u306e\u3067 hello_cdevsw \u3092\u6e21\u3057\u3001\u8fd4\u308a\u5024\u3068\u3057\u3066 hello_dev \u3092\u53d7\u3051\u3068\u308b\u3002\u3053\u306e hello_dev \u3063\u3066\u306e\u304c hello \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u307f\u305f\u3044\u306a\u3082\u306e\u307f\u305f\u3044\u3002\n\u3067\u3001MOD_UNLOAD \u306e\u306a\u304b\u3067\u305d\u306e hello_dev \u3092\u6e21\u3057\u3066 destroy_dev() \u3092\u547c\u3076\u3053\u3068\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u4f53\u3092\u524a\u9664\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\u3053\u308c\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306f\u3067\u304d\u3042\u304c\u3063\u305f\u306e\u3067\u3001 open/close/read \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u3084\u308b\u3002\n\u307e\u305a\u306f open \u3068 close \u306e\u5b9f\u88c5\u3002\n/**\n * open \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_open(struct cdev *dev __unused, int oflags __unused, int devtype __unused,\n          struct thread *td __unused)\n{\n  printf(\"hello: Open\\n\");\n  return (0);\n}\n\n/**\n * close \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_close(struct cdev *dev __unused, int fflag __unused, int devtype __unused,\n           struct thread *td __unused)\n{\n  printf(\"hello: Close\\n\");\n  return (0);\n}\n\n\u30c7\u30d0\u30c3\u30b0\u30d7\u30ea\u30f3\u30c8\u3060\u3051\u3057\u3066\u3001\u5b9f\u969b\u306f\u306a\u306b\u3082\u3057\u306a\u3044\u3002\n\u6700\u5f8c\u306b read \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3002\n/**\n * read(2) \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\"Hello!\\n\" \u3092\u8fd4\u3059\n * see: man 9 uiomove, man 2 read\n *\n * - uio \u306b\u5165\u3063\u3066\u304f\u308b\u3082\u306e\uff08\u305f\u3076\u3093\uff09\n *   - read(int d, void *buf, size_t nbytes); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = 1\n *     - uio->uio_iov[0] = *buf\n *     - uio->uio_offset = d\n *     - uio->uio_resid  = nbytes\n *   - readv(int d, const struct iovec *iov, int iovcnt); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = iovcnt\n *     - uio->uio_offset = d\n *     - \u4ed6\u306f\u672a\u8abf\u67fb\n * - uiomove \u306e\u7b2c\u4e8c\u5f15\u6570\u304c 0 \u3060\u3068EOF\u306b\u306a\u308b\u3063\u307d\u3044\n * - 0 \u3092\u8fd4\u305b\u3070\u6210\u529f\u6271\u3044\u3063\u307d\u3044\n */\nstatic int\nhello_read(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)\n{\n  int error;\n  char message[] = \"Hello!\";\n  size_t length = sizeof(message) / sizeof(char);\n  /* \u8fd4\u5374\u30b5\u30a4\u30ba\u8a08\u6e2c\u30020 \u306b\u306a\u308b\u306a\u3089EOF */\n  length = MIN(uio->uio_resid,\n               uio->uio_offset >= length ? 0 : length - uio->uio_offset);\n  /* DEBUG */\n  printf(\"hello: Read: uio: uio_iovcnt=%d, uio_offset=%d, uio_resid=%d,\"\n         \" uio_segflg=%s, uio_rw=%s\\n\",\n         uio->uio_iovcnt, (int)(uio->uio_offset), (int)(uio->uio_resid),\n         uio->uio_segflg == 0 ? \"USERSPACE\"\n                              : uio->uio_segflg == 1 ? \"SYSSPACE\"\n                                                     : \"NOCOPY\",\n         uio->uio_rw == 0 ? \"READ\" : \"WRITE\");\n  /* \u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u306b\u6e21\u3057\u3066\u3084\u308b */\n  error = uiomove(message, length, uio);\n  /* DEBUG */\n  if (error != 0) {\n    printf(\"hello: Read: uiomove failed! (%d)\\n\", error);\n  } else {\n    printf(\"hello: Read: uiomove success, message=\\\"%s\\\", length=%d\\n\",\n           message, (int)length);\n  }\n  return (error);\n}\n\n\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u306b\u306a\u3093\u304b\u8ee2\u9001\u3059\u308b\u306b\u306f uiomove() \u3092\u4f7f\u3046\u3063\u307d\u3044\u3002\u3053\u3044\u3064\u306b\u6e21\u3059 length \u304c\u3001\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u5074\u306e read \u306e\u8fd4\u308a\u5024\u306b\u306a\u308b\u307f\u305f\u3044\u3002\u3064\u307e\u308a\u3053\u3044\u3064\u306b 0 \u3092\u6e21\u305b\u3070\u3001\u3088\u304f\u3042\u308b while ((cnt = read(fd, buf, sizeof(buf))) > 0) { ... } \u307f\u305f\u3044\u306a\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u611f\u3058\u306b\u306a\u308b\u3002\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u306e\u5b9f\u88c5\u3067 open/close/read \u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3068\u306a\u308c\u3070 cat \u304c\u3067\u304d\u308b\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n$ cd sys/modules/hello\n$ make\n$ sudo kldload ./hello.ko\n$ cat /dev/hello\nHello!\n$ sudo kldunload ./hello.ko\n\n\u3088\u3057\u3001\u3067\u304d\u305f\u3002\n\u6700\u5f8c\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u3002\u305d\u308d\u305d\u308d\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u3088\u3046\u3002\n\nhello.c\n/**\n * \u30ad\u30e3\u30e9\u30af\u30bf\u30c7\u30d0\u30a4\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n * printf \u3057\u3066\u308b\u90e8\u5206\u306f dmesg \u306b\u66f8\u304b\u308c\u308b\u3002\n */\n#include <sys/param.h>\n#include <sys/kernel.h>\n#include <sys/module.h>\n#include <sys/conf.h>\n#include <sys/systm.h>\n#include <sys/uio.h>\n\n/* cdev\u30dd\u30a4\u30f3\u30bf\u306e\u7f6e\u304d\u5834 */\nstatic struct cdev *hello_dev;\n\n/* \u95a2\u6570\u5b9a\u7fa9 */\nstatic d_open_t    hello_open;\nstatic d_close_t   hello_close;\nstatic d_read_t    hello_read;\n\n/**\n * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9\u3002\n * see: sys/sys/conf.h\n * \u7a7a\u306e\u3082\u306e\u306f\u4f55\u3082\u3057\u306a\u3044\u6271\u3044\u3063\u307d\u3044\uff1f\n */\nstatic struct cdevsw hello_cdevsw = {\n  .d_version = D_VERSION, /* \u3053\u308c\u304c\u4f55\u306a\u306e\u304b\u308f\u304b\u3063\u3066\u306a\u3044 */\n  .d_open = hello_open,\n  .d_close = hello_close,\n  .d_read = hello_read,\n  .d_write = (d_write_t *)nullop, /* \u4f55\u3082\u3057\u306a\u3044\u3088\u3063\u3066\u4e8b\u306e\u8868\u73fe\u3063\u307d\u3044\uff1f */\n  .d_name = \"hello\",\n};\n\n\n/**\n * read(2) \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\"Hello!\\n\" \u3092\u8fd4\u3059\n * see: man 9 uiomove, man 2 read\n *\n * - uio \u306b\u5165\u3063\u3066\u304f\u308b\u3082\u306e\uff08\u305f\u3076\u3093\uff09\n *   - read(int d, void *buf, size_t nbytes); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = 1\n *     - uio->uio_iov[0] = *buf\n *     - uio->uio_offset = d\n *     - uio->uio_resid  = nbytes\n *   - readv(int d, const struct iovec *iov, int iovcnt); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = iovcnt\n *     - uio->uio_offset = d\n *     - \u4ed6\u306f\u672a\u8abf\u67fb\n * - uiomove \u306e\u7b2c\u4e8c\u5f15\u6570\u304c 0 \u3060\u3068EOF\u306b\u306a\u308b\u3063\u307d\u3044\n * - 0 \u3092\u8fd4\u305b\u3070\u6210\u529f\u6271\u3044\u3063\u307d\u3044\n */\nstatic int\nhello_read(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)\n{\n  int error;\n  char message[] = \"Hello!\";\n  size_t length = sizeof(message) / sizeof(char);\n  /* \u8fd4\u5374\u30b5\u30a4\u30ba\u8a08\u6e2c\u30020 \u306b\u306a\u308b\u306a\u3089EOF */\n  length = MIN(uio->uio_resid,\n               uio->uio_offset >= length ? 0 : length - uio->uio_offset);\n  /* DEBUG */\n  printf(\"hello: Read: uio: uio_iovcnt=%d, uio_offset=%d, uio_resid=%d,\"\n         \" uio_segflg=%s, uio_rw=%s\\n\",\n         uio->uio_iovcnt, (int)(uio->uio_offset), (int)(uio->uio_resid),\n         uio->uio_segflg == 0 ? \"USERSPACE\"\n                              : uio->uio_segflg == 1 ? \"SYSSPACE\"\n                                                     : \"NOCOPY\",\n         uio->uio_rw == 0 ? \"READ\" : \"WRITE\");\n  /* \u30e6\u30fc\u30b6\u30fc\u30e9\u30f3\u30c9\u306b\u6e21\u3057\u3066\u3084\u308b */\n  error = uiomove(message, length, uio);\n  /* DEBUG */\n  if (error != 0) {\n    printf(\"hello: Read: uiomove failed! (%d)\\n\", error);\n  } else {\n    printf(\"hello: Read: uiomove success, message=\\\"%s\\\", length=%d\\n\",\n           message, (int)length);\n  }\n  return (error);\n}\n\n/**\n * open \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_open(struct cdev *dev __unused, int oflags __unused, int devtype __unused,\n          struct thread *td __unused)\n{\n  printf(\"hello: Open\\n\");\n  return (0);\n}\n\n/**\n * close \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_close(struct cdev *dev __unused, int fflag __unused, int devtype __unused,\n           struct thread *td __unused)\n{\n  printf(\"hello: Close\\n\");\n  return (0);\n}\n\nstatic int\nhello_load(module_t mod __unused, int /* modeventtype_t */ what,\n           void* args __unused)\n{\n  /**\n   * see: man 9 module\n   *\n   * - what \u306e\u4e2d\u8eab\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u305f   ... what = MOD_LOAD\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a2\u30f3\u30ed\u30fc\u30c9     ... what = MOD_QUIESCE\n   *   - MOD_QUIESCE \u304c 0 \u3092\u8fd4\u3057\u305f  ... what = MOD_UNLOAD\n   *   - \u30b7\u30b9\u30c6\u30e0\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u6642 ... what = MOD_SHUTDOWN\n   *\n   * - MOD_QUIESCE \u3068 MOD_UNLOAD \u306e\u9055\u3044\uff1a\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4f7f\u7528\u4e2d         ... MOD_QUESCE \u3092\u5931\u6557\u3055\u305b\u308b\n   *   - \u30a2\u30f3\u30ed\u30fc\u30c9\u304c\u4e0d\u53ef\u80fd         ... MOD_UNLOAD \u3092\u5931\u6557\u3055\u305b\u308b\n   *\n   * - what \u306e\u5024\u3092\u8a8d\u8b58\u3067\u304d\u306a\u3044\u5834\u5408\u306f EOPNOTSUPP \u3092\u8fd4\u3059\u3079\u304d\n   */\n  int err = 0;\n\n  switch (what) {\n  case MOD_LOAD:\n    printf(\"hello: Load\\n\");\n    hello_dev = make_dev_credf(MAKEDEV_CHECKNAME | MAKEDEV_WAITOK,\n                              &hello_cdevsw, 0,\n                              NULL, UID_ROOT, GID_WHEEL, 0666, \"hello\");\n    break;\n  case MOD_UNLOAD:\n    destroy_dev(hello_dev);\n    printf(\"hello: Unload\\n\");\n    break;\n  case MOD_SHUTDOWN:\n    printf(\"hello: Shutdown\\n\");\n    break;\n  case MOD_QUIESCE:\n    printf(\"hello: Quisce\\n\");\n    break;\n  default:\n    err = EOPNOTSUPP; /* Operation not supported */\n    break;\n  }\n  return err;\n}\n\n/**\n * see: man 9 DEV_MODULE\n * \u7b2c1\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u524d\n * \u7b2c2\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u540d\n * \u7b2c3\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u306b\u6e21\u3059\u5f15\u6570\n *\n * - DECLARE_MODULE \u306e \u7cd6\u8863\u69cb\u6587\u3063\u307d\u3044\n */\nDEV_MODULE(hello, hello_load, NULL);\n\n/**\n * see: man 9 MODULE_VERSION\n * \u7b2c1\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u524d\n * \u7b2c2\u5f15\u6570\uff1a \u30d0\u30fc\u30b8\u30e7\u30f3(int)\n *\n * - MODULE_DEPEND \u3068\u304b\u3067\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u30d0\u30fc\u30b8\u30e7\u30f3\u4f9d\u5b58\n *   \u3055\u308c\u308b\u3068\u304d\u306b\u4f7f\u3063\u305f\u308a\u3059\u308b\n */\nMODULE_VERSION(hello, 0);\n\n\n\u524d\u56de\uff08kldload\u3059\u308b\u3068\u3053\u307e\u3067\uff09\uff1a http://qiita.com/illness072/items/48fd71b20f6cd372320c\n\n\u524d\u56de\u306f\u30ed\u30fc\u30c9\u3001\u30a2\u30f3\u30ed\u30fc\u30c9\u307e\u3067\u4e0a\u624b\u304f\u3044\u3063\u3066\u305f\u3063\u307d\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u4e88\u544a\u901a\u308a open/close/read \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u307f\u308b\u3002\n\nopen \u3068\u304b close \u3068\u304b read \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u30ed\u30fc\u30c9\u3055\u308c\u305f\u3068\u304d\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u4f53\u3092\u4f5c\u3063\u3066\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002`DEV_MODULE()` \u3067\u6559\u3048\u3066\u3084\u3063\u305f\u30cf\u30f3\u30c9\u30e9\u95a2\u6570 `hello_load()` \u306e\u306a\u304b\u3067\u3001`make_dev()` \u3068\u304b `destroy_dev()` \u3092\u547c\u3093\u3067\u3084\u308b\u308f\u3051\u3060\u3002\u306a\u3093\u3060\u304b\u3059\u3054\u304f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u3073\u3063\u304f\u308a\u3001\u3082\u3063\u3068\u6ce5\u81ed\u3044(?)\u611f\u3058\u304b\u3068\u601d\u3063\u3066\u305f\u3001\u30ab\u30fc\u30cd\u30eb\u30e9\u30f3\u30c9\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067 `sys/sys/conf.h` \u306b\u3042\u308b `struct cdevsw` \u3092\u3064\u304b\u3063\u3066\u3001`make_dev()` \u306b\u6e21\u3059\u305f\u3081\u306e\u5024\u3092\u4f5c\u3063\u3066\u3084\u308b\u3002\n\n```c\n/* cdev\u30dd\u30a4\u30f3\u30bf\u306e\u7f6e\u304d\u5834 */\nstatic struct cdev *hello_dev;\n\n/* \u95a2\u6570\u5b9a\u7fa9 */\nstatic d_open_t    hello_open;\nstatic d_close_t   hello_close;\nstatic d_read_t    hello_read;\n\n/**\n * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9\u3002\n * see: sys/sys/conf.h\n * \u7a7a\u306e\u3082\u306e\u306f\u4f55\u3082\u3057\u306a\u3044\u6271\u3044\u3063\u307d\u3044\uff1f\n */\nstatic struct cdevsw hello_cdevsw = {\n  .d_version = D_VERSION, /* \u3053\u308c\u304c\u4f55\u306a\u306e\u304b\u308f\u304b\u3063\u3066\u306a\u3044 */\n  .d_open = hello_open,\n  .d_close = hello_close,\n  .d_read = hello_read,\n  .d_write = (d_write_t *)nullop, /* \u4f55\u3082\u3057\u306a\u3044\u3088\u3063\u3066\u4e8b\u306e\u8868\u73fe\u3063\u307d\u3044\uff1f */\n  .d_name = \"hello\",\n};\n```\n\n\\# \u30b3\u30e1\u30f3\u30c8\u304c\u307d\u3044\u307d\u3044\u3046\u308b\u3055\u3044\u3051\u3069\u3001\u52c9\u5f37\u3057\u304c\u3066\u3089\u66f8\u3044\u3066\u308b\u306e\u3067\u52d8\u5f01\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3088\u3046\u306f\u3053\u308c\u304b\u3089\u66f8\u304f hello_open \u3068\u304b\u305d\u3046\u3044\u3046\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u307e\u3068\u3081\u3066\u7a81\u3063\u8fbc\u3093\u3067\u3084\u308b\u307f\u305f\u3044\u3002\n\u305d\u3057\u3066\u5b9f\u969b\u306b\u3053\u306e hello_dev \u3068\u304b hello_cdevsw \u3068\u304b\u3092 `make_dev()` \u306b\u6e21\u3059\u3088\u3046\u30cf\u30f3\u30c9\u30e9\u3092\u66f8\u304d\u63db\u3048\u308b\u3002\n\n```c\nstatic int\nhello_load(module_t mod __unused, int /* modeventtype_t */ what,\n           void* args __unused)\n{\n  /**\n   * see: man 9 module\n   */\n  int err = 0;\n\n  switch (what) {\n  case MOD_LOAD:\n    printf(\"hello: Load\\n\");\n    hello_dev = make_dev_credf(MAKEDEV_CHECKNAME | MAKEDEV_WAITOK,\n                              &hello_cdevsw, 0,\n                              NULL, UID_ROOT, GID_WHEEL, 0666, \"hello\");\n    break;\n  case MOD_UNLOAD:\n    destroy_dev(hello_dev);\n    printf(\"hello: Unload\\n\");\n    break;\n  case MOD_SHUTDOWN:\n    printf(\"hello: Shutdown\\n\");\n    break;\n  case MOD_QUIESCE:\n    printf(\"hello: Quisce\\n\");\n    break;\n  default:\n    err = EOPNOTSUPP; /* Operation not supported */\n    break;\n  }\n  return err;\n}\n```\n\nMOD_LOAD \u306e\u3068\u304d\u306b `make_dev_credf()` \u3063\u3066\u306e\u3067 hello_cdevsw \u3092\u6e21\u3057\u3001\u8fd4\u308a\u5024\u3068\u3057\u3066 hello_dev \u3092\u53d7\u3051\u3068\u308b\u3002\u3053\u306e hello_dev \u3063\u3066\u306e\u304c hello \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u307f\u305f\u3044\u306a\u3082\u306e\u307f\u305f\u3044\u3002\n\u3067\u3001MOD_UNLOAD \u306e\u306a\u304b\u3067\u305d\u306e hello_dev \u3092\u6e21\u3057\u3066 `destroy_dev()` \u3092\u547c\u3076\u3053\u3068\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u4f53\u3092\u524a\u9664\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n\u3053\u308c\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306f\u3067\u304d\u3042\u304c\u3063\u305f\u306e\u3067\u3001 open/close/read \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u3084\u308b\u3002\n\u307e\u305a\u306f open \u3068 close \u306e\u5b9f\u88c5\u3002\n\n```c\n/**\n * open \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_open(struct cdev *dev __unused, int oflags __unused, int devtype __unused,\n          struct thread *td __unused)\n{\n  printf(\"hello: Open\\n\");\n  return (0);\n}\n\n/**\n * close \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_close(struct cdev *dev __unused, int fflag __unused, int devtype __unused,\n           struct thread *td __unused)\n{\n  printf(\"hello: Close\\n\");\n  return (0);\n}\n```\n\n\u30c7\u30d0\u30c3\u30b0\u30d7\u30ea\u30f3\u30c8\u3060\u3051\u3057\u3066\u3001\u5b9f\u969b\u306f\u306a\u306b\u3082\u3057\u306a\u3044\u3002\n\u6700\u5f8c\u306b read \u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3002\n\n```c\n/**\n * read(2) \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\"Hello!\\n\" \u3092\u8fd4\u3059\n * see: man 9 uiomove, man 2 read\n *\n * - uio \u306b\u5165\u3063\u3066\u304f\u308b\u3082\u306e\uff08\u305f\u3076\u3093\uff09\n *   - read(int d, void *buf, size_t nbytes); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = 1\n *     - uio->uio_iov[0] = *buf\n *     - uio->uio_offset = d\n *     - uio->uio_resid  = nbytes\n *   - readv(int d, const struct iovec *iov, int iovcnt); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = iovcnt\n *     - uio->uio_offset = d\n *     - \u4ed6\u306f\u672a\u8abf\u67fb\n * - uiomove \u306e\u7b2c\u4e8c\u5f15\u6570\u304c 0 \u3060\u3068EOF\u306b\u306a\u308b\u3063\u307d\u3044\n * - 0 \u3092\u8fd4\u305b\u3070\u6210\u529f\u6271\u3044\u3063\u307d\u3044\n */\nstatic int\nhello_read(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)\n{\n  int error;\n  char message[] = \"Hello!\";\n  size_t length = sizeof(message) / sizeof(char);\n  /* \u8fd4\u5374\u30b5\u30a4\u30ba\u8a08\u6e2c\u30020 \u306b\u306a\u308b\u306a\u3089EOF */\n  length = MIN(uio->uio_resid,\n               uio->uio_offset >= length ? 0 : length - uio->uio_offset);\n  /* DEBUG */\n  printf(\"hello: Read: uio: uio_iovcnt=%d, uio_offset=%d, uio_resid=%d,\"\n         \" uio_segflg=%s, uio_rw=%s\\n\",\n         uio->uio_iovcnt, (int)(uio->uio_offset), (int)(uio->uio_resid),\n         uio->uio_segflg == 0 ? \"USERSPACE\"\n                              : uio->uio_segflg == 1 ? \"SYSSPACE\"\n                                                     : \"NOCOPY\",\n         uio->uio_rw == 0 ? \"READ\" : \"WRITE\");\n  /* \u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u306b\u6e21\u3057\u3066\u3084\u308b */\n  error = uiomove(message, length, uio);\n  /* DEBUG */\n  if (error != 0) {\n    printf(\"hello: Read: uiomove failed! (%d)\\n\", error);\n  } else {\n    printf(\"hello: Read: uiomove success, message=\\\"%s\\\", length=%d\\n\",\n           message, (int)length);\n  }\n  return (error);\n}\n```\n\n\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u306b\u306a\u3093\u304b\u8ee2\u9001\u3059\u308b\u306b\u306f `uiomove()` \u3092\u4f7f\u3046\u3063\u307d\u3044\u3002\u3053\u3044\u3064\u306b\u6e21\u3059 length \u304c\u3001\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u5074\u306e read \u306e\u8fd4\u308a\u5024\u306b\u306a\u308b\u307f\u305f\u3044\u3002\u3064\u307e\u308a\u3053\u3044\u3064\u306b 0 \u3092\u6e21\u305b\u3070\u3001\u3088\u304f\u3042\u308b `while ((cnt = read(fd, buf, sizeof(buf))) > 0) { ... }` \u307f\u305f\u3044\u306a\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u611f\u3058\u306b\u306a\u308b\u3002\n\n\u3055\u3066\u3001\u3053\u3053\u307e\u3067\u306e\u5b9f\u88c5\u3067 open/close/read \u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3068\u306a\u308c\u3070 cat \u304c\u3067\u304d\u308b\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3063\u3066\u307f\u308b\u3002\n\n```shell-session\n$ cd sys/modules/hello\n$ make\n$ sudo kldload ./hello.ko\n$ cat /dev/hello\nHello!\n$ sudo kldunload ./hello.ko\n```\n\n\u3088\u3057\u3001\u3067\u304d\u305f\u3002\n\n\u6700\u5f8c\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u3002\u305d\u308d\u305d\u308d\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u3088\u3046\u3002\n\n```c:hello.c\n/**\n * \u30ad\u30e3\u30e9\u30af\u30bf\u30c7\u30d0\u30a4\u30b9\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n * printf \u3057\u3066\u308b\u90e8\u5206\u306f dmesg \u306b\u66f8\u304b\u308c\u308b\u3002\n */\n#include <sys/param.h>\n#include <sys/kernel.h>\n#include <sys/module.h>\n#include <sys/conf.h>\n#include <sys/systm.h>\n#include <sys/uio.h>\n\n/* cdev\u30dd\u30a4\u30f3\u30bf\u306e\u7f6e\u304d\u5834 */\nstatic struct cdev *hello_dev;\n\n/* \u95a2\u6570\u5b9a\u7fa9 */\nstatic d_open_t    hello_open;\nstatic d_close_t   hello_close;\nstatic d_read_t    hello_read;\n\n/**\n * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9\u3002\n * see: sys/sys/conf.h\n * \u7a7a\u306e\u3082\u306e\u306f\u4f55\u3082\u3057\u306a\u3044\u6271\u3044\u3063\u307d\u3044\uff1f\n */\nstatic struct cdevsw hello_cdevsw = {\n  .d_version = D_VERSION, /* \u3053\u308c\u304c\u4f55\u306a\u306e\u304b\u308f\u304b\u3063\u3066\u306a\u3044 */\n  .d_open = hello_open,\n  .d_close = hello_close,\n  .d_read = hello_read,\n  .d_write = (d_write_t *)nullop, /* \u4f55\u3082\u3057\u306a\u3044\u3088\u3063\u3066\u4e8b\u306e\u8868\u73fe\u3063\u307d\u3044\uff1f */\n  .d_name = \"hello\",\n};\n\n\n/**\n * read(2) \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\"Hello!\\n\" \u3092\u8fd4\u3059\n * see: man 9 uiomove, man 2 read\n *\n * - uio \u306b\u5165\u3063\u3066\u304f\u308b\u3082\u306e\uff08\u305f\u3076\u3093\uff09\n *   - read(int d, void *buf, size_t nbytes); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = 1\n *     - uio->uio_iov[0] = *buf\n *     - uio->uio_offset = d\n *     - uio->uio_resid  = nbytes\n *   - readv(int d, const struct iovec *iov, int iovcnt); \u306e\u5834\u5408\n *     - uio->uio_iovcnt = iovcnt\n *     - uio->uio_offset = d\n *     - \u4ed6\u306f\u672a\u8abf\u67fb\n * - uiomove \u306e\u7b2c\u4e8c\u5f15\u6570\u304c 0 \u3060\u3068EOF\u306b\u306a\u308b\u3063\u307d\u3044\n * - 0 \u3092\u8fd4\u305b\u3070\u6210\u529f\u6271\u3044\u3063\u307d\u3044\n */\nstatic int\nhello_read(struct cdev *dev __unused, struct uio *uio, int ioflag __unused)\n{\n  int error;\n  char message[] = \"Hello!\";\n  size_t length = sizeof(message) / sizeof(char);\n  /* \u8fd4\u5374\u30b5\u30a4\u30ba\u8a08\u6e2c\u30020 \u306b\u306a\u308b\u306a\u3089EOF */\n  length = MIN(uio->uio_resid,\n               uio->uio_offset >= length ? 0 : length - uio->uio_offset);\n  /* DEBUG */\n  printf(\"hello: Read: uio: uio_iovcnt=%d, uio_offset=%d, uio_resid=%d,\"\n         \" uio_segflg=%s, uio_rw=%s\\n\",\n         uio->uio_iovcnt, (int)(uio->uio_offset), (int)(uio->uio_resid),\n         uio->uio_segflg == 0 ? \"USERSPACE\"\n                              : uio->uio_segflg == 1 ? \"SYSSPACE\"\n                                                     : \"NOCOPY\",\n         uio->uio_rw == 0 ? \"READ\" : \"WRITE\");\n  /* \u30e6\u30fc\u30b6\u30fc\u30e9\u30f3\u30c9\u306b\u6e21\u3057\u3066\u3084\u308b */\n  error = uiomove(message, length, uio);\n  /* DEBUG */\n  if (error != 0) {\n    printf(\"hello: Read: uiomove failed! (%d)\\n\", error);\n  } else {\n    printf(\"hello: Read: uiomove success, message=\\\"%s\\\", length=%d\\n\",\n           message, (int)length);\n  }\n  return (error);\n}\n\n/**\n * open \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_open(struct cdev *dev __unused, int oflags __unused, int devtype __unused,\n          struct thread *td __unused)\n{\n  printf(\"hello: Open\\n\");\n  return (0);\n}\n\n/**\n * close \u306b\u5bfe\u3059\u308b\u51e6\u7406\u3002\u4f55\u3082\u3057\u306a\u3044\u3002\n */\nstatic int\nhello_close(struct cdev *dev __unused, int fflag __unused, int devtype __unused,\n           struct thread *td __unused)\n{\n  printf(\"hello: Close\\n\");\n  return (0);\n}\n\nstatic int\nhello_load(module_t mod __unused, int /* modeventtype_t */ what,\n           void* args __unused)\n{\n  /**\n   * see: man 9 module\n   *\n   * - what \u306e\u4e2d\u8eab\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u305f   ... what = MOD_LOAD\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a2\u30f3\u30ed\u30fc\u30c9     ... what = MOD_QUIESCE\n   *   - MOD_QUIESCE \u304c 0 \u3092\u8fd4\u3057\u305f  ... what = MOD_UNLOAD\n   *   - \u30b7\u30b9\u30c6\u30e0\u306e\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u6642 ... what = MOD_SHUTDOWN\n   *\n   * - MOD_QUIESCE \u3068 MOD_UNLOAD \u306e\u9055\u3044\uff1a\n   *   - \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4f7f\u7528\u4e2d         ... MOD_QUESCE \u3092\u5931\u6557\u3055\u305b\u308b\n   *   - \u30a2\u30f3\u30ed\u30fc\u30c9\u304c\u4e0d\u53ef\u80fd         ... MOD_UNLOAD \u3092\u5931\u6557\u3055\u305b\u308b\n   *\n   * - what \u306e\u5024\u3092\u8a8d\u8b58\u3067\u304d\u306a\u3044\u5834\u5408\u306f EOPNOTSUPP \u3092\u8fd4\u3059\u3079\u304d\n   */\n  int err = 0;\n\n  switch (what) {\n  case MOD_LOAD:\n    printf(\"hello: Load\\n\");\n    hello_dev = make_dev_credf(MAKEDEV_CHECKNAME | MAKEDEV_WAITOK,\n                              &hello_cdevsw, 0,\n                              NULL, UID_ROOT, GID_WHEEL, 0666, \"hello\");\n    break;\n  case MOD_UNLOAD:\n    destroy_dev(hello_dev);\n    printf(\"hello: Unload\\n\");\n    break;\n  case MOD_SHUTDOWN:\n    printf(\"hello: Shutdown\\n\");\n    break;\n  case MOD_QUIESCE:\n    printf(\"hello: Quisce\\n\");\n    break;\n  default:\n    err = EOPNOTSUPP; /* Operation not supported */\n    break;\n  }\n  return err;\n}\n\n/**\n * see: man 9 DEV_MODULE\n * \u7b2c1\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u524d\n * \u7b2c2\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u540d\n * \u7b2c3\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u306b\u6e21\u3059\u5f15\u6570\n *\n * - DECLARE_MODULE \u306e \u7cd6\u8863\u69cb\u6587\u3063\u307d\u3044\n */\nDEV_MODULE(hello, hello_load, NULL);\n\n/**\n * see: man 9 MODULE_VERSION\n * \u7b2c1\u5f15\u6570\uff1a \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u524d\n * \u7b2c2\u5f15\u6570\uff1a \u30d0\u30fc\u30b8\u30e7\u30f3(int)\n *\n * - MODULE_DEPEND \u3068\u304b\u3067\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u30d0\u30fc\u30b8\u30e7\u30f3\u4f9d\u5b58\n *   \u3055\u308c\u308b\u3068\u304d\u306b\u4f7f\u3063\u305f\u308a\u3059\u308b\n */\nMODULE_VERSION(hello, 0);\n```\n", "tags": ["FreeBSD10.1"]}