{"context": "Serverspec \u3067\u306f\u69d8\u3005\u306a\u7a2e\u985e\u306e\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001\u5185\u90e8\u3067\u306f Specinfra \u3068\u3044\u3046\u30af\u30e9\u30b9\u3067\u305d\u306e\u30c6\u30b9\u30c8\u306e\u5b9a\u7fa9\u3068\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u30c4\u30fc\u30eb\u306f OS \u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u306e\u5dee\u7570\u3092\u5438\u53ce\u3059\u308b\u90e8\u5206\u3082 Specinfra \u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nVagrant \u304c\u69d8\u3005\u306a\u30db\u30b9\u30c8\u3068\u30b2\u30b9\u30c8 OS \u3067\u30d7\u30ed\u30d3\u30b8\u30e7\u30f3\u51fa\u6765\u308b\u4ed5\u639b\u3051\u3068\u540c\u3058\u3067\u3059\u3002\n\u3055\u3066\u3001\u305d\u306e Specinfra \u3067\u3059\u304c\u3001boot2docker \u3084\u62d9\u4f5c\u306e DockerRoot \u306e\u3088\u3046\u306b Busybox \u304c\u30d9\u30fc\u30b9\u306e OS \u7528\u306e\u8a2d\u5b9a\u304c\u306a\u304f\u3001\u30c6\u30b9\u30c8\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u7c21\u6613\u306a\uff08\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u90e8\u5206\u306e\u307f\uff09 DockerRoot/Busybox \u7528\u62e1\u5f35\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u3001\u5358\u7d14\u306b spec/spec_help.rb \u306b\u8ffd\u52a0\u3057\u3066\u3001\u62e1\u5f35\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\uff08\u672c\u683c\u7684\u306a\u306e\u306f\u9762\u5012\u306a\u306e\u3067\uff57\uff09\n\u305f\u3076\u3093\u3001\u4ed6\u306e\u30bf\u30a4\u30d7\u306e\u30c6\u30b9\u30c8\u3067\u3082\u52d5\u304b\u306a\u3044\u306e\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3059\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u304c\u3001\u9700\u8981\u304c\u7121\u3051\u308c\u3070\u3053\u306e\u307e\u307e\u3067\u3059\uff57\n\nspec/spec_help.rb\n\nclass Specinfra::Command::Busybox\n  class Base < Specinfra::Command::Linux::Base\n    class Group < Specinfra::Command::Base::Group\n      class << self\n        def check_exists(group)\n          \"grep #{escape(group)} /etc/group\"\n        end\n\n        def check_has_gid(group, gid)\n          \"grep #{escape(group)} /etc/group | cut -f 3 -d ':' | grep -w -- #{escape(gid)}\"\n        end\n      end\n    end\n\n    class RoutingTable < Specinfra::Command::Base::RoutingTable\n      class << self\n        def check_has_entry(destination)\n          %Q{ip route show #{destination} | awk '{print $1, \"via\", $5, \"dev\", $3, \" \"}'}\n        end\n\n        alias :get_entry :check_has_entry\n      end\n    end\n\n    class User < Specinfra::Command::Base::User\n      class << self\n        def check_has_home_directory(user, path_to_home)\n          \"grep #{escape(user)} /etc/passwd | cut -f 6 -d ':' | grep -w -- #{escape(path_to_home)}\"\n        end\n\n        def check_has_login_shell(user, path_to_shell)\n          \"grep #{escape(user)} /etc/passwd | cut -f 7 -d ':' | grep -w -- #{escape(path_to_shell)}\"\n        end\n      end\n    end\n  end\nend\n\nclass Specinfra::Helper::DetectOs::DockerRoot < Specinfra::Helper::DetectOs\n  def detect\n    if ( uname = run_command('uname -r').stdout ) && uname =~ /docker-root/i\n      family = nil\n      release = nil\n      os_release = run_command(\"cat /etc/os-release\")\n      if os_release.success?\n        os_release.stdout.each_line do |line|\n          family = line.split('=').last.strip if line =~ /^ID_LIKE=/\n          release = line.split('=').last.strip if line =~ /^VERSION=/\n        end\n      end\n      family ||= 'linux'\n      { :family => family, :release => release }\n    end\n  end\nend\n\n\u4ee5\u4e0b\u306f\u3053\u308c\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nspec/docker-root/docker_spec.rb\n\nrequire 'spec_helper'\n\ndescribe user('docker') do\n  it { should exist }\n  it { should belong_to_group 'docker' }\n  it { should belong_to_primary_group 'docker' }\n  it { should have_uid 1000 }\n  it { should have_home_directory '/home/docker' }\n  it { should have_login_shell '/bin/bash' }\nend\n\ndescribe group('docker') do\n  it { should exist }\n  it { should have_gid 1000 }\nend\n\ndescribe 'Docker Daemon' do\n  context command('/etc/init.d/docker status') do\n    its(:stdout) { should match /^Docker .* is running.$/ }\n  end\n\n  context file('/var/run/docker.sock') do\n    it { should be_socket }\n  end\n\n  context interface('docker0') do\n    it { should exist }\n    it { should be_up }\n  end\n\n  context routing_table do\n    it do\n      should have_entry(\n        :destination => '172.17.0.0/16',\n        :interface   => 'docker0',\n        :gateway     => '172.17.0.1',\n      )\n    end\n  end\nend\n\ndescribe 'Linux kernel parameters' do\n  context linux_kernel_parameter('net.ipv4.ip_forward') do\n    its(:value) { should eq 1 }\n  end\n\n  context linux_kernel_parameter('net.ipv6.conf.all.forwarding') do\n    its(:value) { should eq 1 }\n  end\nend\n\n\nVagrantfile\n\n# A dummy plugin for DockerRoot to set hostname and network correctly at the very first `vagrant up`\nmodule VagrantPlugins\n  module GuestLinux\n    class Plugin < Vagrant.plugin(\"2\")\n      guest_capability(\"linux\", \"change_host_name\") { Cap::ChangeHostName }\n      guest_capability(\"linux\", \"configure_networks\") { Cap::ConfigureNetworks }\n    end\n  end\nend\n\nVagrant.configure(2) do |config|\n  config.vm.define \"docker-root\"\n  config.vm.box = \"ailispaw/docker-root\"\n\n  if Vagrant.has_plugin?(\"vagrant-triggers\") then\n    config.trigger.after [:up, :resume] do\n      info \"Adjusting datetime after suspend and resume.\"\n      run_remote \"sudo sntp -4sSc pool.ntp.org; date\"\n    end\n  end\n\n  # Adjusting datetime before provisioning.\n  config.vm.provision :shell, run: \"always\" do |sh|\n    sh.inline = \"sntp -4sSc pool.ntp.org; date\"\n  end\n\n  config.vm.provision :docker do |docker|\n    docker.pull_images \"busybox\"\n    docker.run \"simple-echo\",\n      image: \"busybox\",\n      args: \"-p 8080:8080 -v /usr/bin/dumb-init:/dumb-init:ro --entrypoint=/dumb-init\",\n      cmd: \"nc -p 8080 -l -l -e echo hello world!\"\n  end\n\n  config.vm.network :forwarded_port, guest: 8080, host: 8080\n\n  if Vagrant.has_plugin?(\"vagrant-serverspec\") then\n    config.vm.provision :serverspec do |spec|\n      spec.pattern = \"spec/docker-root/*_spec.rb\"\n    end\n  end\nend\n\n\u4ed6\u306b\u3082\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u3053\u3061\u3089\u3067\u5b9f\u969b\u306b\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ailispaw/docker-root-packer/tree/serverspec/spec\nServerspec \u3067\u306f\u69d8\u3005\u306a\u7a2e\u985e\u306e\u30c6\u30b9\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3059\u304c\u3001\u5185\u90e8\u3067\u306f Specinfra \u3068\u3044\u3046\u30af\u30e9\u30b9\u3067\u305d\u306e\u30c6\u30b9\u30c8\u306e\u5b9a\u7fa9\u3068\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u30c4\u30fc\u30eb\u306f OS \u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u305d\u306e\u5dee\u7570\u3092\u5438\u53ce\u3059\u308b\u90e8\u5206\u3082 Specinfra \u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nVagrant \u304c\u69d8\u3005\u306a\u30db\u30b9\u30c8\u3068\u30b2\u30b9\u30c8 OS \u3067\u30d7\u30ed\u30d3\u30b8\u30e7\u30f3\u51fa\u6765\u308b\u4ed5\u639b\u3051\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u305d\u306e Specinfra \u3067\u3059\u304c\u3001[boot2docker](http://boot2docker.io/) \u3084\u62d9\u4f5c\u306e [DockerRoot](https://atlas.hashicorp.com/ailispaw/boxes/docker-root) \u306e\u3088\u3046\u306b Busybox \u304c\u30d9\u30fc\u30b9\u306e OS \u7528\u306e\u8a2d\u5b9a\u304c\u306a\u304f\u3001\u30c6\u30b9\u30c8\u304c\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067\u3001\u7c21\u6613\u306a\uff08\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u304b\u3063\u305f\u90e8\u5206\u306e\u307f\uff09 DockerRoot/Busybox \u7528\u62e1\u5f35\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u3001\u5358\u7d14\u306b `spec/spec_help.rb` \u306b\u8ffd\u52a0\u3057\u3066\u3001\u62e1\u5f35\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\uff08\u672c\u683c\u7684\u306a\u306e\u306f\u9762\u5012\u306a\u306e\u3067\uff57\uff09\n\u305f\u3076\u3093\u3001\u4ed6\u306e\u30bf\u30a4\u30d7\u306e\u30c6\u30b9\u30c8\u3067\u3082\u52d5\u304b\u306a\u3044\u306e\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3059\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u304c\u3001\u9700\u8981\u304c\u7121\u3051\u308c\u3070\u3053\u306e\u307e\u307e\u3067\u3059\uff57\n\n## `spec/spec_help.rb`\n\n```ruby\nclass Specinfra::Command::Busybox\n  class Base < Specinfra::Command::Linux::Base\n    class Group < Specinfra::Command::Base::Group\n      class << self\n        def check_exists(group)\n          \"grep #{escape(group)} /etc/group\"\n        end\n\n        def check_has_gid(group, gid)\n          \"grep #{escape(group)} /etc/group | cut -f 3 -d ':' | grep -w -- #{escape(gid)}\"\n        end\n      end\n    end\n\n    class RoutingTable < Specinfra::Command::Base::RoutingTable\n      class << self\n        def check_has_entry(destination)\n          %Q{ip route show #{destination} | awk '{print $1, \"via\", $5, \"dev\", $3, \" \"}'}\n        end\n\n        alias :get_entry :check_has_entry\n      end\n    end\n\n    class User < Specinfra::Command::Base::User\n      class << self\n        def check_has_home_directory(user, path_to_home)\n          \"grep #{escape(user)} /etc/passwd | cut -f 6 -d ':' | grep -w -- #{escape(path_to_home)}\"\n        end\n\n        def check_has_login_shell(user, path_to_shell)\n          \"grep #{escape(user)} /etc/passwd | cut -f 7 -d ':' | grep -w -- #{escape(path_to_shell)}\"\n        end\n      end\n    end\n  end\nend\n\nclass Specinfra::Helper::DetectOs::DockerRoot < Specinfra::Helper::DetectOs\n  def detect\n    if ( uname = run_command('uname -r').stdout ) && uname =~ /docker-root/i\n      family = nil\n      release = nil\n      os_release = run_command(\"cat /etc/os-release\")\n      if os_release.success?\n        os_release.stdout.each_line do |line|\n          family = line.split('=').last.strip if line =~ /^ID_LIKE=/\n          release = line.split('=').last.strip if line =~ /^VERSION=/\n        end\n      end\n      family ||= 'linux'\n      { :family => family, :release => release }\n    end\n  end\nend\n```\n\n\u4ee5\u4e0b\u306f\u3053\u308c\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n## `spec/docker-root/docker_spec.rb`\n\n```ruby\nrequire 'spec_helper'\n\ndescribe user('docker') do\n  it { should exist }\n  it { should belong_to_group 'docker' }\n  it { should belong_to_primary_group 'docker' }\n  it { should have_uid 1000 }\n  it { should have_home_directory '/home/docker' }\n  it { should have_login_shell '/bin/bash' }\nend\n\ndescribe group('docker') do\n  it { should exist }\n  it { should have_gid 1000 }\nend\n\ndescribe 'Docker Daemon' do\n  context command('/etc/init.d/docker status') do\n    its(:stdout) { should match /^Docker .* is running.$/ }\n  end\n\n  context file('/var/run/docker.sock') do\n    it { should be_socket }\n  end\n\n  context interface('docker0') do\n    it { should exist }\n    it { should be_up }\n  end\n\n  context routing_table do\n    it do\n      should have_entry(\n        :destination => '172.17.0.0/16',\n        :interface   => 'docker0',\n        :gateway     => '172.17.0.1',\n      )\n    end\n  end\nend\n\ndescribe 'Linux kernel parameters' do\n  context linux_kernel_parameter('net.ipv4.ip_forward') do\n    its(:value) { should eq 1 }\n  end\n\n  context linux_kernel_parameter('net.ipv6.conf.all.forwarding') do\n    its(:value) { should eq 1 }\n  end\nend\n```\n\n## `Vagrantfile`\n\n```ruby\n# A dummy plugin for DockerRoot to set hostname and network correctly at the very first `vagrant up`\nmodule VagrantPlugins\n  module GuestLinux\n    class Plugin < Vagrant.plugin(\"2\")\n      guest_capability(\"linux\", \"change_host_name\") { Cap::ChangeHostName }\n      guest_capability(\"linux\", \"configure_networks\") { Cap::ConfigureNetworks }\n    end\n  end\nend\n\nVagrant.configure(2) do |config|\n  config.vm.define \"docker-root\"\n  config.vm.box = \"ailispaw/docker-root\"\n\n  if Vagrant.has_plugin?(\"vagrant-triggers\") then\n    config.trigger.after [:up, :resume] do\n      info \"Adjusting datetime after suspend and resume.\"\n      run_remote \"sudo sntp -4sSc pool.ntp.org; date\"\n    end\n  end\n\n  # Adjusting datetime before provisioning.\n  config.vm.provision :shell, run: \"always\" do |sh|\n    sh.inline = \"sntp -4sSc pool.ntp.org; date\"\n  end\n\n  config.vm.provision :docker do |docker|\n    docker.pull_images \"busybox\"\n    docker.run \"simple-echo\",\n      image: \"busybox\",\n      args: \"-p 8080:8080 -v /usr/bin/dumb-init:/dumb-init:ro --entrypoint=/dumb-init\",\n      cmd: \"nc -p 8080 -l -l -e echo hello world!\"\n  end\n\n  config.vm.network :forwarded_port, guest: 8080, host: 8080\n\n  if Vagrant.has_plugin?(\"vagrant-serverspec\") then\n    config.vm.provision :serverspec do |spec|\n      spec.pattern = \"spec/docker-root/*_spec.rb\"\n    end\n  end\nend\n```\n\n\u4ed6\u306b\u3082\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u3053\u3061\u3089\u3067\u5b9f\u969b\u306b\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ailispaw/docker-root-packer/tree/serverspec/spec\n", "tags": ["serverspec", "busybox", "vagrant", "boot2docker", "docker"]}