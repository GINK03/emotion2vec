{"context": "\n\n\u5c0e\u5165\n\n>\u6982\u8981\nopenFrameworks 0.9.~\u304b\u3089C++11\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u306eC++11\u306e\u6a5f\u80fd\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u4e71\u6570\u306e\u751f\u6210\u306b\u5de5\u592b\u304c\u51fa\u6765\u307e\u3059\u3001\u4eca\u56de\u306f\u305d\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u307f\u306a\u3055\u3093\u3001\u3053\u3093\u306a\u7d4c\u9a13\u3042\u308a\u307e\u305b\u3093\u304b\uff1f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\u969b\u3001ofRandom()\u3092\u4f7f\u3046\u3068\u3001\u306e\u3063\u307a\u308a\u3001\u3059\u3079\u3066\u540c\u3058\u78ba\u7387\u3067\u4e71\u6570\u304c\u751f\u6210\u3055\u308c\u3066\u3057\u307e\u3046\u3001\u3001\u3042\u308b\u7b87\u6240\u306b\u96c6\u4e2d\u3055\u305b\u305f\u3044\u3068\u304d\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3093\u3060\u308d\u3046\uff1f\n\u305d\u3093\u306a\u6642\u3001C++11\u306estd::normal_distribution\u3092\u7528\u3044\u308c\u3070\u7c21\u5358\u306b\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u89e3\u8aac\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fgithub\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/Hiroki11x/openFrameworksSample/tree/master/oF_NormalDistributionSample\n\n>\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\n\u3053\u306e\u753b\u50cf\u3082wikipedia\u304b\u3089\u53d6\u3063\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u304c\u3001\u6b63\u898f\u5206\u5e03\u3068\u306f\u5927\u96d1\u628a\u306b\u8a00\u3046\u3068\u3001\u6b63\u898f\u5206\u5e03\u306f\u3042\u308b\u5e73\u5747\u5024\u306b\u96c6\u4e2d\u3057\u3066\u96c6\u307e\u308b\u3088\u3046\u306a\u78ba\u7387\u5206\u5e03\u3067\u3059\u3002(\u8a73\u3057\u304f\u306fwikipedia\u3092)\n\n\u3053\u306e\u5206\u5e03\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u4f8b\u3048\u3070\u4e2d\u5fc3\u306b\u96c6\u4e2d\u3057\u3066\u5186\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u305f\u3044\u5834\u5408\u3001\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5(2\u6b21\u5143)\n\n>\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u5b9a\u7fa9\n\n\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306bC++11\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305fnormal_distribution\u3092\u7528\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b<random>\u3092include\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u751f\u6210\u3057\u305f\u64ec\u4f3c\u4e71\u6570\u3092\u5ea7\u6a19\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u305f\u3081\u306bofVec2f\u578b\u306evector\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include <random>\u3000// <- \u3053\u3053\n\nclass ofApp : public ofBaseApp{\nprivate:\n    vector<ofVec2f> position_vector_2d; // <- \u3053\u3053\npublic:\n    void setup();\n    void update();\n    void draw();\n    void keyPressed(int key);\n    void keyReleased(int key);\n    void mouseMoved(int x, int y );\n    void mouseDragged(int x, int y, int button);\n    void mousePressed(int x, int y, int button);\n    void mouseReleased(int x, int y, int button);\n    void mouseEntered(int x, int y);\n    void mouseExited(int x, int y);\n    void windowResized(int w, int h);\n    void dragEvent(ofDragInfo dragInfo);\n    void gotMessage(ofMessage msg);\n};\n\n\n\n>\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\n\u307e\u305a\u6b63\u898f\u5206\u5e03\u306e\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u306b\u95a2\u3057\u3066\u4ee5\u4e0b\u306eStep\u3067\u884c\u3063\u3066\u3044\u308b\n1. engine\u3068\u3057\u3066default_random_enginemt19937\u3092\u9078\u629e\n2. distribution\u3068\u3057\u3066normal_distribution\u3092\u9078\u629e\n3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306eengine\u3092\u5ba3\u8a00\n4. \u91e3\u9418\u578b\u306e\u6b63\u898f\u5206\u5e03\u3092\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3092\u4e0e\u3048\u3066\u5ba3\u8a00\n5. \u64ec\u4f3c\u4e71\u6570\u751f\u6210\u5668\u3092\u4f5c\u308b\n6. \u751f\u6210\u5668\u304b\u3089\u751f\u6210\u3057\u305f\u4e71\u6570\u3092vector\u306bpush_back\n\u305f\u3060\u3057\n\n\n\n\u7528\u8a9e\n\u8aac\u660e\n\n\n\n\n\u30a8\u30f3\u30b8\u30f3(engine)\n\u4e71\u6570\u307e\u305f\u306f\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\n\n\n\u5206\u5e03(distribution)\n\u751f\u6210\u3057\u305f\u5024\u3092\u4e00\u5b9a\u7bc4\u56f2\u306e\u6570\u5b66\u7684\u5206\u5e03\u3078\u3068\u30de\u30c3\u30d7\u3059\u308b\n\n\n\n\u3042\u3068\u306f\u3001\u305d\u306e\u5ea7\u6a19\u3092\u3082\u3068\u306b\u63cf\u753b\u3092\u884c\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\nbind()\u306b\u95a2\u3057\u3066\u306f\u6700\u5f8c\u306b\u88dc\u8db3\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nnormal_distribution\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n\n    //Normal Distribution\n    using my_engine = mt19937; // <-1\n    using my_distribution = normal_distribution<>; // <-2\n    my_engine mEngine {}; // <-3\n    my_distribution mDistribution {0.0,10.0};// <-4 (\u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b)\n\n    auto generate_random = bind(mDistribution,mEngine);// <-5\n    for(int i = 0 ; i<10000 ; i++){ //<-\u4ee5\u4e0b6\n        float  x = round(generate_random());\n        float y = round(generate_random());\n        position_vector_2d.push_back(ofVec2f(x,y));\n    }\n\n    ofBackground(0);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofSetColor(0,200,255,20);\n    ofPushMatrix();\n    ofTranslate(ofGetWidth()/2,ofGetHeight()/2);\n    for(auto v :position_vector_2d){\n        ofDrawCircle(v.x*10 ,v.y*10 ,5);\n    }\n    ofPopMatrix();\n}\n\n\n\n\u5b9f\u88c5(3\u6b21\u5143)\n2\u6b21\u5143\u306e\u3082\u306e\u30923\u6b21\u5143\u306b\u62e1\u5f35\u3057\u305f\u3060\u3051\u3067\u3059\u3002\u30ab\u30e1\u30e9\u306e\u8ffd\u52a0\u3084\u8996\u70b9\u306e\u79fb\u52d5\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u307b\u307c\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u4ee5\u4e0b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u7d50\u679c\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\nofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include <random>\n\nclass ofApp : public ofBaseApp{\nprivate:\n    vector<ofVec3f> position_vector_3d;\n    ofEasyCam cam;\n    float cam_dist;\n\npublic:\n    void setup();\n    void update();\n    void draw();\n\n    void keyPressed(int key);\n    void keyReleased(int key);\n    void mouseMoved(int x, int y );\n    void mouseDragged(int x, int y, int button);\n    void mousePressed(int x, int y, int button);\n    void mouseReleased(int x, int y, int button);\n    void mouseEntered(int x, int y);\n    void mouseExited(int x, int y);\n    void windowResized(int w, int h);\n    void dragEvent(ofDragInfo dragInfo);\n    void gotMessage(ofMessage msg);\n\n};\n\n\n\nofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n\n    //Normal Distribution\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    auto generate_random = bind(mDistribution,mEngine);\n    for(int i = 0 ; i<10000 ; i++){\n        float x = round(generate_random());\n        float y = round(generate_random());\n        float z = round(generate_random());\n        position_vector_3d.push_back(ofVec3f(x,y,z));\n    }\n\n    ofBackground(0);\n    cam_dist = 600;\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n    cam.setPosition(0, 0, cam_dist);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofSetColor(0,200,255,20);\n    ofPushMatrix();\n    ofTranslate(ofGetWidth()/2,ofGetHeight()/2);\n\n    cam.begin();\n\n    for(auto v :position_vector_3d){\n        ofDrawBox(v.x*10 ,v.y*10 ,v.z*10 ,5);\n    }\n\n    cam.end();\n\n    ofPopMatrix();\n    ofDrawBitmapStringHighlight(\"cam_dist: \"+ofToString(cam_dist), 20,20);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyPressed(int key){\n    if(key == OF_KEY_UP){\n        cam_dist += 10;\n    }else if(key ==OF_KEY_DOWN){\n        cam_dist-= 10;\n    }\n}\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3001\u30ad\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n\n\u88dc\u8db3(bind()\u306b\u3064\u3044\u3066)\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306ebind()\u306f\u4f8b\u3048\u3070\u4eca\u56de\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\nauto generate_random = bind(mDistribution,mEngine);\n\n\u3053\u306e\u6642\u3001\u7b2c\u4e8c\u5f15\u6570\u306emEngine\u3092\u53d7\u3051\u53d6\u308a\u3001\u7b2c\u4e00\u5f15\u6570\u306emDistribution\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3064\u307e\u308agenerate_random()\u306e\u547c\u3073\u51fa\u3057\u81ea\u4f53\u306f\u3001mDistribution(mEngine)\u306e\u547c\u3073\u51fa\u3057\u3068\u7b49\u4fa1\u3067\u3059\u3002\n\n\u8a02\u6b63\u7248\nyumetodo\u3055\u3093\u304b\u3089\u3054\u6307\u6458\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305fpush_back\u91cd\u305d\u3046\u306a\u306e\u3067\u3001std::reserve(),std::generate()\u3092\u4f7f\u3046\u306e\u304c\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u70b9\u3001std::bind()\u3092\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u30b3\u30f3\u30d1\u30a4\u30e9(VS)\u3082\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e09\u6b21\u5143\u306e\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u4fee\u6b63\u3092\u52a0\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306f\u5909\u308f\u3089\u305a\u3001\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb(ofApp.cpp::setup())\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306b\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n1. std::generate()\u3092\u7528\u3044\u308b\u5834\u5408\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n//Normal Distribution /std::generate:32868msec\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    const auto t1 = std::chrono::high_resolution_clock::now();\n    const auto size = position_vector_3d.size();\n    position_vector_3d.resize(size + 100000);\n    std::generate(position_vector_3d.begin()+ size, position_vector_3d.end(),[&mDistribution, &mEngine](){ return ofVec3f(mDistribution(mEngine),mDistribution(mEngine),mDistribution(mEngine));});\n    const auto t2 = std::chrono::high_resolution_clock::now();\n    std::cout << std::chrono::duration_cast<std::chrono::microseconds>(t2-t1).count() << \"msec\" << std::endl;\n    ofBackground(0);\n    cam_dist = 600;\n}\n\n\n2. std::reserve()\u3092\u7528\u3044\u308b\u5834\u5408\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n//Normal Distribution /std::reserve: 30977msec /without reserve -> 32646msec\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    const auto t1 = std::chrono::high_resolution_clock::now();\n    position_vector_3d.reserve(100000);\n    for(int i = 0 ; i<100000 ; i++){//338663microsec/344389microsec\n        float  x = round(mDistribution(mEngine));\n        float y = round(mDistribution(mEngine));\n        float z = round(mDistribution(mEngine));\n        position_vector_3d.push_back(ofVec3f(x,y,z));\n    }\n\n    const auto t2 = std::chrono::high_resolution_clock::now();\n    std::cout << std::chrono::duration_cast<std::chrono::microseconds>(t2-t1).count() << \"msec\" << std::endl;\n    ofBackground(0);\n    cam_dist = 600;\n}\n\n\u307e\u305f\u3001\u30a8\u30f3\u30b8\u30f3\u578b\u306b\u95a2\u3057\u3066default_random_engine\u3088\u308a\u3001mt19937\u3092\u63a1\u7528\u3057\u305f\u65b9\u304c\u3044\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\n3. \u30a8\u30f3\u30b8\u30f3\u578b\u306b\u3064\u3044\u3066\n\n\u64ec\u4f3c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u306f\u3001\u57fa\u672c\u7684\u306b\u306f32\u30d3\u30c3\u30c8\u7248\u30e1\u30eb\u30bb\u30f3\u30cc\u30fb\u30c4\u30a4\u30b9\u30bf\u30fc\u306e\u5b9f\u88c5\u3067\u3042\u308bmt19937\u3001\u3082\u3057\u304f\u306f\u305d\u306e64\u30d3\u30c3\u30c8\u7248\u306e\u5b9f\u88c5\u3067\u3042\u308bmt19937_64\u306e\u3069\u3061\u3089\u304b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3059\u308b\u3002\n\u975e\u5c02\u9580\u7528\u9014\u306e\u305f\u3081\u306edefault_random_engine\u3068\u3044\u3046\u30a8\u30f3\u30b8\u30f3\u578b\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u578b\u306f\u74b0\u5883\u306b\u3088\u3063\u3066\u4e71\u96d1\u5ea6\u304c\u4f4e\u304f\u3001\u5468\u671f\u3082\u77ed\u3044\u64ec\u4f3c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u306e\u5225\u540d\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u3002\nmt19937\u306f\u3001\u72b6\u614b\u306e\u5927\u304d\u3055\u304csizeof(std::uint_fast32_t) * (624 + 1)\u3060\u3051\u3042\u308a\u3001\u5c11\u3005\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u304c\u3001\u305d\u308c\u3092\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u72b6\u6cc1\u3067\u3042\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067mt19937\u3092\u63a1\u7528\u3057\u3088\u3046\u3002\u3053\u306e\u30a8\u30f3\u30b8\u30f3\u3067\u306f\u3001\u4e71\u96d1\u5ea6\u3084\u5468\u671f\u306e\u9577\u3055\u304c\u554f\u984c\u306b\u306a\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3002\ncpprefjp <random>\u30d8\u30c3\u30c0\u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u3002\n\n#\u5c0e\u5165\n###>\u6982\u8981\nopenFrameworks 0.9.~\u304b\u3089`C++11`\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u306e`C++11`\u306e\u6a5f\u80fd\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u4e71\u6570\u306e\u751f\u6210\u306b\u5de5\u592b\u304c\u51fa\u6765\u307e\u3059\u3001\u4eca\u56de\u306f\u305d\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u307f\u306a\u3055\u3093\u3001\u3053\u3093\u306a\u7d4c\u9a13\u3042\u308a\u307e\u305b\u3093\u304b\uff1f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\u969b\u3001`ofRandom()`\u3092\u4f7f\u3046\u3068\u3001\u306e\u3063\u307a\u308a\u3001\u3059\u3079\u3066\u540c\u3058\u78ba\u7387\u3067\u4e71\u6570\u304c\u751f\u6210\u3055\u308c\u3066\u3057\u307e\u3046\u3001\u3001\u3042\u308b\u7b87\u6240\u306b\u96c6\u4e2d\u3055\u305b\u305f\u3044\u3068\u304d\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3093\u3060\u308d\u3046\uff1f\n\u305d\u3093\u306a\u6642\u3001`C++11`\u306e`std::normal_distribution`\u3092\u7528\u3044\u308c\u3070\u7c21\u5358\u306b\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u89e3\u8aac\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fgithub\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/Hiroki11x/openFrameworksSample/tree/master/oF_NormalDistributionSample\n\n\n\n###>\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\n\u3053\u306e\u753b\u50cf\u3082[wikipedia](https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83)\u304b\u3089\u53d6\u3063\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u304c\u3001\u6b63\u898f\u5206\u5e03\u3068\u306f\u5927\u96d1\u628a\u306b\u8a00\u3046\u3068\u3001\u6b63\u898f\u5206\u5e03\u306f\u3042\u308b\u5e73\u5747\u5024\u306b\u96c6\u4e2d\u3057\u3066\u96c6\u307e\u308b\u3088\u3046\u306a\u78ba\u7387\u5206\u5e03\u3067\u3059\u3002(\u8a73\u3057\u304f\u306f[wikipedia](https://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F%E5%88%86%E5%B8%83)\u3092)\n![imgres.png](https://qiita-image-store.s3.amazonaws.com/0/56510/4ae9e71e-2f2f-a1e5-1921-640869203ee0.png)\n\n\u3053\u306e\u5206\u5e03\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u4f8b\u3048\u3070\u4e2d\u5fc3\u306b\u96c6\u4e2d\u3057\u3066\u5186\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u914d\u7f6e\u3057\u305f\u3044\u5834\u5408\u3001\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-12 3.58.56.png](https://qiita-image-store.s3.amazonaws.com/0/56510/0e82586a-78cf-85e6-4e0f-008e1f59dfe7.png)\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\n#\u5b9f\u88c5(2\u6b21\u5143)\n###>\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u5b9a\u7fa9\n1. \u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b`C++11`\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f`normal_distribution`\u3092\u7528\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b`<random>`\u3092include\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n2. \u751f\u6210\u3057\u305f\u64ec\u4f3c\u4e71\u6570\u3092\u5ea7\u6a19\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u305f\u3081\u306b`ofVec2f`\u578b\u306e`vector`\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```ofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include <random>\u3000// <- \u3053\u3053\n\nclass ofApp : public ofBaseApp{\nprivate:\n    vector<ofVec2f> position_vector_2d; // <- \u3053\u3053\npublic:\n    void setup();\n    void update();\n    void draw();\n    void keyPressed(int key);\n    void keyReleased(int key);\n    void mouseMoved(int x, int y );\n    void mouseDragged(int x, int y, int button);\n    void mousePressed(int x, int y, int button);\n    void mouseReleased(int x, int y, int button);\n    void mouseEntered(int x, int y);\n    void mouseExited(int x, int y);\n    void windowResized(int w, int h);\n    void dragEvent(ofDragInfo dragInfo);\n    void gotMessage(ofMessage msg);\n};\n```\n\n###>\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\n\n\u307e\u305a\u6b63\u898f\u5206\u5e03\u306e\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u306b\u95a2\u3057\u3066\u4ee5\u4e0b\u306eStep\u3067\u884c\u3063\u3066\u3044\u308b\n1. `engine`\u3068\u3057\u3066~~`default_random_engine`~~`mt19937`\u3092\u9078\u629e\n2. `distribution`\u3068\u3057\u3066`normal_distribution`\u3092\u9078\u629e\n3. \u30c7\u30d5\u30a9\u30eb\u30c8\u306e`engine`\u3092\u5ba3\u8a00\n4. \u91e3\u9418\u578b\u306e\u6b63\u898f\u5206\u5e03\u3092\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u3092\u4e0e\u3048\u3066\u5ba3\u8a00\n5. \u64ec\u4f3c\u4e71\u6570\u751f\u6210\u5668\u3092\u4f5c\u308b\n6. \u751f\u6210\u5668\u304b\u3089\u751f\u6210\u3057\u305f\u4e71\u6570\u3092`vector`\u306b`push_back`\n\n\u305f\u3060\u3057\n\n|\u7528\u8a9e|\u8aac\u660e|\n|:-----------|:------------|\n|\u30a8\u30f3\u30b8\u30f3(`engine`)|\u4e71\u6570\u307e\u305f\u306f\u64ec\u4f3c\u4e71\u6570\u3092\u751f\u6210\u3059\u308b|\n|\u5206\u5e03(`distribution`)|\u751f\u6210\u3057\u305f\u5024\u3092\u4e00\u5b9a\u7bc4\u56f2\u306e\u6570\u5b66\u7684\u5206\u5e03\u3078\u3068\u30de\u30c3\u30d7\u3059\u308b|\n\n\u3042\u3068\u306f\u3001\u305d\u306e\u5ea7\u6a19\u3092\u3082\u3068\u306b\u63cf\u753b\u3092\u884c\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n`bind()`\u306b\u95a2\u3057\u3066\u306f\u6700\u5f8c\u306b\u88dc\u8db3\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n`normal_distribution`\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f[\u3053\u3061\u3089](http://cpprefjp.github.io/reference/random/normal_distribution.html)\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```ofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n\n    //Normal Distribution\n    using my_engine = mt19937; // <-1\n    using my_distribution = normal_distribution<>; // <-2\n    my_engine mEngine {}; // <-3\n    my_distribution mDistribution {0.0,10.0};// <-4 (\u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b)\n\n    auto generate_random = bind(mDistribution,mEngine);// <-5\n    for(int i = 0 ; i<10000 ; i++){ //<-\u4ee5\u4e0b6\n        float  x = round(generate_random());\n        float y = round(generate_random());\n        position_vector_2d.push_back(ofVec2f(x,y));\n    }\n\n    ofBackground(0);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofSetColor(0,200,255,20);\n    ofPushMatrix();\n    ofTranslate(ofGetWidth()/2,ofGetHeight()/2);\n    for(auto v :position_vector_2d){\n        ofDrawCircle(v.x*10 ,v.y*10 ,5);\n    }\n    ofPopMatrix();\n}\n```\n\n#\u5b9f\u88c5(3\u6b21\u5143)\n2\u6b21\u5143\u306e\u3082\u306e\u30923\u6b21\u5143\u306b\u62e1\u5f35\u3057\u305f\u3060\u3051\u3067\u3059\u3002\u30ab\u30e1\u30e9\u306e\u8ffd\u52a0\u3084\u8996\u70b9\u306e\u79fb\u52d5\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u307b\u307c\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u4ee5\u4e0b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u7d50\u679c\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```ofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include <random>\n\nclass ofApp : public ofBaseApp{\nprivate:\n    vector<ofVec3f> position_vector_3d;\n    ofEasyCam cam;\n    float cam_dist;\n\npublic:\n    void setup();\n    void update();\n    void draw();\n\n    void keyPressed(int key);\n    void keyReleased(int key);\n    void mouseMoved(int x, int y );\n    void mouseDragged(int x, int y, int button);\n    void mousePressed(int x, int y, int button);\n    void mouseReleased(int x, int y, int button);\n    void mouseEntered(int x, int y);\n    void mouseExited(int x, int y);\n    void windowResized(int w, int h);\n    void dragEvent(ofDragInfo dragInfo);\n    void gotMessage(ofMessage msg);\n\n};\n```\n\n```ofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n\n    //Normal Distribution\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    auto generate_random = bind(mDistribution,mEngine);\n    for(int i = 0 ; i<10000 ; i++){\n        float x = round(generate_random());\n        float y = round(generate_random());\n        float z = round(generate_random());\n        position_vector_3d.push_back(ofVec3f(x,y,z));\n    }\n\n    ofBackground(0);\n    cam_dist = 600;\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n    cam.setPosition(0, 0, cam_dist);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofSetColor(0,200,255,20);\n    ofPushMatrix();\n    ofTranslate(ofGetWidth()/2,ofGetHeight()/2);\n\n    cam.begin();\n\n    for(auto v :position_vector_3d){\n        ofDrawBox(v.x*10 ,v.y*10 ,v.z*10 ,5);\n    }\n\n    cam.end();\n\n    ofPopMatrix();\n    ofDrawBitmapStringHighlight(\"cam_dist: \"+ofToString(cam_dist), 20,20);\n}\n\n//--------------------------------------------------------------\nvoid ofApp::keyPressed(int key){\n    if(key == OF_KEY_UP){\n        cam_dist += 10;\n    }else if(key ==OF_KEY_DOWN){\n        cam_dist-= 10;\n    }\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3001\u30ad\u30fc\u64cd\u4f5c\u306b\u3088\u3063\u3066\u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n![gif animation](https://github.com/Hiroki11x/openFrameworksSample/raw/master/oF_NormalDistributionSample/movie.gif)\n\n#\u88dc\u8db3(`bind()`\u306b\u3064\u3044\u3066)\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e`bind()`\u306f\u4f8b\u3048\u3070\u4eca\u56de\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```cpp\nauto generate_random = bind(mDistribution,mEngine);\n```\n\n\u3053\u306e\u6642\u3001\u7b2c\u4e8c\u5f15\u6570\u306e`mEngine`\u3092\u53d7\u3051\u53d6\u308a\u3001\u7b2c\u4e00\u5f15\u6570\u306e`mDistribution`\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3064\u307e\u308a`generate_random()`\u306e\u547c\u3073\u51fa\u3057\u81ea\u4f53\u306f\u3001`mDistribution(mEngine)`\u306e\u547c\u3073\u51fa\u3057\u3068\u7b49\u4fa1\u3067\u3059\u3002\n\n#\u8a02\u6b63\u7248\nyumetodo\u3055\u3093\u304b\u3089\u3054\u6307\u6458\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f`push_back`\u91cd\u305d\u3046\u306a\u306e\u3067\u3001`std::reserve()`,`std::generate()`\u3092\u4f7f\u3046\u306e\u304c\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3044\u3046\u70b9\u3001`std::bind()`\u3092\u6700\u9069\u5316\u3067\u304d\u306a\u3044\u30b3\u30f3\u30d1\u30a4\u30e9(VS)\u3082\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e09\u6b21\u5143\u306e\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u4fee\u6b63\u3092\u52a0\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306f\u5909\u308f\u3089\u305a\u3001\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb(`ofApp.cpp::setup()`)\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306b\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n###1. `std::generate()`\u3092\u7528\u3044\u308b\u5834\u5408\n\n```cpp\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n//Normal Distribution /std::generate:32868msec\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    const auto t1 = std::chrono::high_resolution_clock::now();\n    const auto size = position_vector_3d.size();\n    position_vector_3d.resize(size + 100000);\n    std::generate(position_vector_3d.begin()+ size, position_vector_3d.end(),[&mDistribution, &mEngine](){ return ofVec3f(mDistribution(mEngine),mDistribution(mEngine),mDistribution(mEngine));});\n    const auto t2 = std::chrono::high_resolution_clock::now();\n    std::cout << std::chrono::duration_cast<std::chrono::microseconds>(t2-t1).count() << \"msec\" << std::endl;\n    ofBackground(0);\n    cam_dist = 600;\n}\n```\n\n###2. `std::reserve()`\u3092\u7528\u3044\u308b\u5834\u5408\n\n```cpp\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n//Normal Distribution /std::reserve: 30977msec /without reserve -> 32646msec\n    using my_engine = mt19937;\n    using my_distribution = normal_distribution<>;\n    my_engine mEngine {};\n    my_distribution mDistribution {0.0,10.0};// \u5e73\u57470.0\u3001\u6a19\u6e96\u504f\u5dee10.0\u3067\u5206\u5e03\u3055\u305b\u308b\n\n    const auto t1 = std::chrono::high_resolution_clock::now();\n    position_vector_3d.reserve(100000);\n    for(int i = 0 ; i<100000 ; i++){//338663microsec/344389microsec\n        float  x = round(mDistribution(mEngine));\n        float y = round(mDistribution(mEngine));\n        float z = round(mDistribution(mEngine));\n        position_vector_3d.push_back(ofVec3f(x,y,z));\n    }\n\n    const auto t2 = std::chrono::high_resolution_clock::now();\n    std::cout << std::chrono::duration_cast<std::chrono::microseconds>(t2-t1).count() << \"msec\" << std::endl;\n    ofBackground(0);\n    cam_dist = 600;\n}\n```\n\n\u307e\u305f\u3001\u30a8\u30f3\u30b8\u30f3\u578b\u306b\u95a2\u3057\u3066`default_random_engine`\u3088\u308a\u3001`mt19937`\u3092\u63a1\u7528\u3057\u305f\u65b9\u304c\u3044\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\n###3. \u30a8\u30f3\u30b8\u30f3\u578b\u306b\u3064\u3044\u3066\n> \u64ec\u4f3c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u306f\u3001\u57fa\u672c\u7684\u306b\u306f32\u30d3\u30c3\u30c8\u7248\u30e1\u30eb\u30bb\u30f3\u30cc\u30fb\u30c4\u30a4\u30b9\u30bf\u30fc\u306e\u5b9f\u88c5\u3067\u3042\u308b`mt19937`\u3001\u3082\u3057\u304f\u306f\u305d\u306e64\u30d3\u30c3\u30c8\u7248\u306e\u5b9f\u88c5\u3067\u3042\u308b`mt19937_64`\u306e\u3069\u3061\u3089\u304b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3059\u308b\u3002\n\u975e\u5c02\u9580\u7528\u9014\u306e\u305f\u3081\u306e`default_random_engine`\u3068\u3044\u3046\u30a8\u30f3\u30b8\u30f3\u578b\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u578b\u306f\u74b0\u5883\u306b\u3088\u3063\u3066\u4e71\u96d1\u5ea6\u304c\u4f4e\u304f\u3001\u5468\u671f\u3082\u77ed\u3044\u64ec\u4f3c\u4e71\u6570\u30a8\u30f3\u30b8\u30f3\u306e\u5225\u540d\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n`mt19937`\u306f\u3001\u72b6\u614b\u306e\u5927\u304d\u3055\u304c`sizeof(std::uint_fast32_t) * (624 + 1)`\u3060\u3051\u3042\u308a\u3001\u5c11\u3005\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u304c\u3001\u305d\u308c\u3092\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u72b6\u6cc1\u3067\u3042\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067`mt19937`\u3092\u63a1\u7528\u3057\u3088\u3046\u3002\u3053\u306e\u30a8\u30f3\u30b8\u30f3\u3067\u306f\u3001\u4e71\u96d1\u5ea6\u3084\u5468\u671f\u306e\u9577\u3055\u304c\u554f\u984c\u306b\u306a\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3002\n[cpprefjp \\<random\\>\u30d8\u30c3\u30c0](http://cpprefjp.github.io/reference/random.html)\u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u3002\n", "tags": ["openFrameworks", "C++", "C++11"]}