{"context": "\n\n\u53c2\u8003\n\n\nQuerying \u2014 Idiorm documentation\n\nPHP\u306e\u8584\u3044DB\u30e9\u30a4\u30d6\u30e9\u30ea\u300cIdiorm\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f - Qiita\nPHP\u88fd\u8efd\u91cfORM Idiorm\u306e\u4f7f\u3044\u65b9\u4f8b - Qiita\nTrello \u306e\u30af\u30ed\u30fc\u30f3 php-simple-kanban \u3092\u52d5\u304b\u3057\u3066\u307f\u305f - Qiita\n\n\n\n\u5fc5\u8981\u306a\u3082\u306e : pdo,mysql\n\nidiorm.php\u3060\u3051\u3042\u308c\u3070\u4f7f\u3048\u308b\u624b\u8efd\u3055\nwget \"https://raw.githubusercontent.com/j4mie/idiorm/master/idiorm.php\" \\\n --no-check-certificate\n\n\n\n\u4f8b\n\n\u4f8b1\n<?php\nrequire_once(\"./idiorm.php\");\n\nORM::configure('mysql:host=localhost;dbname=test');\nORM::configure('username', 'root');\nORM::configure('password', '');\n\n//$record = ORM::for_table('\u30c6\u30fc\u30d6\u30eb\u540d')\n//           ->where('\u30ab\u30e9\u30e0\u540d','\u691c\u7d22\u3057\u305f\u3044\u5024')\n//           ->find_one();\n$record = ORM::for_table('\u30c6\u30fc\u30d6\u30eb\u540d')->find_one();\n\nprint_r($record->as_array());\n\n$data = $record->\u30ab\u30e9\u30e0\u540d;\nprint $data;\n\n\n\n\u4f8b1. \u30af\u30ea\u30c3\u30af\u6bce\u306binsert\n\n\ncreate.sql\nCREATE TABLE clicks (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  count int(11) NOT NULL default '0',\n  created_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='\u30af\u30ea\u30c3\u30af\u6570';\n\n\n\nindex.html(jquery)\n<!DOCTYPE html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n<input type=\"button\" id=\"btn1\" value=\"click\" />\n<span id=\"counts\"></span>\n<script>\n$(function() {\n  var counts = 0;\n  $('#btn1').click(function() {\n    $.ajax('countup.php',\n      {\n        type: 'get',\n        data: { count: counts++ }\n      }\n    )\n    .done(function(data) {\n      $(\"#counts\").html('success');\n    })\n    .fail(function() {\n      $(\"#counts\").html('error');\n    });\n  });\n});\n</script>\n\n\n\nmzabriskie/axios: Promise based HTTP client for the browser and node.js\n\n\nindex.html(axios)\n<!DOCTYPE html>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<input type=\"button\" value=\"click\" onclick=\"countup();\" />\n<script>\nvar counts = 0;\nfunction countup() {\n  counts++;\n  axios.get('./countup.php?count='+counts)\n    .then(function (response) {\n      console.log(response.statusText);\n    })\n    .catch(function (error) {\n      console.log(error.statusText);\n    });\n}\n</script>\n\n\n\nhttp://idiorm.readthedocs.io/en/latest/models.html#creating-new-records\n\n\ncountup.php\n<?php\nrequire_once(\"./idiorm.php\");\n$DBNAME='test';\nORM::configure(array(\n    'connection_string' => 'mysql:host=127.0.0.1;dbname='.$DBNAME,\n    'username' => 'root',\n    'password' => ''\n));\n\n# validation\n$count = $_GET[\"count\"];\nif(!is_numeric($count)) {\n        die(\"[quit] not number.\");\n}\n\n# insert\n$click = ORM::for_table('clicks')->create();\n$click->count = $count;\n$click->set_expr('created_at', 'NOW()');\n$click->save();\n\necho \"[success] 200\";\n\n\n\n\n\u4f8b2. user\u30c6\u30fc\u30d6\u30eb\n\n\ncreate.sql\nCREATE TABLE clicks (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  user_id int(11) NOT NULL default '0',\n  count int(11) NOT NULL default '0',\n  updated_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='\u30af\u30ea\u30c3\u30af\u6570';\n\nCREATE TABLE users (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  sessid varchar(32) NOT NULL default '0',\n  updated_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='user';\n\n\n\nindex.php\n<?php session_start(); ?>\n<!DOCTYPE html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n<input type=\"button\" id=\"btn1\" value=\"click\" />\n<span id=\"counts\"></span>\n<script>\n$(function() {\n  var counts = 0;\n  var sessid = '<?php echo $_COOKIE[\"PHPSESSID\"]; ?>';\n  $('#btn1').click(function() {\n    $.ajax('countup.php',\n      {\n        type: 'get',\n        data: {\n            sessid: sessid,\n            count: ++counts,\n        }\n      }\n    )\n    .done(function(data) {\n      $(\"#counts\").html(\"\u30af\u30ea\u30c3\u30af\u56de\u6570:\"+counts);\n    })\n    .fail(function() {\n      $(\"#counts\").html('error');\n    });\n  });\n});\n</script>\n\n\n\ncountup.php\n<?php\nrequire_once(\"./idiorm.php\");\n#------------------------------------------------------------------------------\nclass Counter {\n    public $count;\n    public $sessid;\n    function __construct() {\n        $this->count = $_GET[\"count\"];\n        $this->sessid = $_GET[\"sessid\"];\n    }\n    function db_connect() {\n        $DBNAME='test';\n        ORM::configure(array(\n            'connection_string' => 'mysql:host=127.0.0.1;dbname='.$DBNAME,\n            'username' => 'root',\n            'password' => '',\n            'caching' => true,\n            'caching_auto_clear' => true,\n        ));\n    }\n\n    function validation() {\n        if(!is_numeric($this->count)) {\n            die(\"[quit] not number.\");\n        }\n        if(empty($this->sessid)) {\n            die(\"[quit] no sessid.\");\n        }\n    }\n\n    function up() {\n        $this->validation();\n        $this->db_connect();\n        # user\n        $user = ORM::for_table('users')->where('sessid', $this->sessid)->find_one();\n        if(!$user) {\n            # insert\n            $user = ORM::for_table('users')->create();\n            $user->sessid = $this->sessid;\n            $user->set_expr('updated_at', 'NOW()');\n            $user->save();\n        }\n        $user_id = $user->id();\n\n        # click\u6570\n        $click = ORM::for_table('clicks')->where('user_id', $this->user_id)->find_one();\n        if(!$click) {\n            $click = ORM::for_table('clicks')->create();\n        }\n        $click->count = $this->count;\n        $click->user_id = $user_id;\n        $click->set_expr('updated_at', 'NOW()');\n        $click->save();\n\n        echo \"[success] 200\";\n    }\n}\n#------------------------------------------------------------------------------\n$Counter = new Counter();\n$Counter->up();\n\n\n## \u53c2\u8003\n\n* [Querying \u2014 Idiorm documentation](http://idiorm.readthedocs.io/en/latest/querying.html)\n    * [PHP\u306e\u8584\u3044DB\u30e9\u30a4\u30d6\u30e9\u30ea\u300cIdiorm\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f - Qiita](http://qiita.com/naga3/items/87fef230ac86aeec1eea)\n    * [PHP\u88fd\u8efd\u91cfORM Idiorm\u306e\u4f7f\u3044\u65b9\u4f8b - Qiita](http://qiita.com/benchan/items/35a4c6f20105c0eb652a)\n    * [Trello \u306e\u30af\u30ed\u30fc\u30f3 php-simple-kanban \u3092\u52d5\u304b\u3057\u3066\u307f\u305f - Qiita](http://qiita.com/tukiyo3/items/29cf2fb814d7c34edca5)\n\n\u5fc5\u8981\u306a\u3082\u306e : pdo,mysql\n\n```bash:idiorm.php\u3060\u3051\u3042\u308c\u3070\u4f7f\u3048\u308b\u624b\u8efd\u3055\nwget \"https://raw.githubusercontent.com/j4mie/idiorm/master/idiorm.php\" \\\n --no-check-certificate\n```\n\n## \u4f8b\n\n```php:\u4f8b1\n<?php\nrequire_once(\"./idiorm.php\");\n\nORM::configure('mysql:host=localhost;dbname=test');\nORM::configure('username', 'root');\nORM::configure('password', '');\n\n//$record = ORM::for_table('\u30c6\u30fc\u30d6\u30eb\u540d')\n//           ->where('\u30ab\u30e9\u30e0\u540d','\u691c\u7d22\u3057\u305f\u3044\u5024')\n//           ->find_one();\n$record = ORM::for_table('\u30c6\u30fc\u30d6\u30eb\u540d')->find_one();\n\nprint_r($record->as_array());\n\n$data = $record->\u30ab\u30e9\u30e0\u540d;\nprint $data;\n```\n\n\n## \u4f8b1. \u30af\u30ea\u30c3\u30af\u6bce\u306binsert\n\n![count.png](https://qiita-image-store.s3.amazonaws.com/0/25728/1fa7c95a-d81f-8633-6f61-84d766400fa7.png)\n\n```sql:create.sql \nCREATE TABLE clicks (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  count int(11) NOT NULL default '0',\n  created_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='\u30af\u30ea\u30c3\u30af\u6570';\n```\n\n```html:index.html(jquery)\n<!DOCTYPE html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n<input type=\"button\" id=\"btn1\" value=\"click\" />\n<span id=\"counts\"></span>\n<script>\n$(function() {\n  var counts = 0;\n  $('#btn1').click(function() {\n    $.ajax('countup.php',\n      {\n        type: 'get',\n        data: { count: counts++ }\n      }\n    )\n    .done(function(data) {\n      $(\"#counts\").html('success');\n    })\n    .fail(function() {\n      $(\"#counts\").html('error');\n    });\n  });\n});\n</script>\n```\n\n* [mzabriskie/axios: Promise based HTTP client for the browser and node.js](https://github.com/mzabriskie/axios)\n\n```html:index.html(axios)\n<!DOCTYPE html>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<input type=\"button\" value=\"click\" onclick=\"countup();\" />\n<script>\nvar counts = 0;\nfunction countup() {\n  counts++;\n  axios.get('./countup.php?count='+counts)\n    .then(function (response) {\n      console.log(response.statusText);\n    })\n    .catch(function (error) {\n      console.log(error.statusText);\n    });\n}\n</script>\n```\n\n* http://idiorm.readthedocs.io/en/latest/models.html#creating-new-records\n\n```php:countup.php\n<?php\nrequire_once(\"./idiorm.php\");\n$DBNAME='test';\nORM::configure(array(\n    'connection_string' => 'mysql:host=127.0.0.1;dbname='.$DBNAME,\n    'username' => 'root',\n    'password' => ''\n));\n\n# validation\n$count = $_GET[\"count\"];\nif(!is_numeric($count)) {\n        die(\"[quit] not number.\");\n}\n\n# insert\n$click = ORM::for_table('clicks')->create();\n$click->count = $count;\n$click->set_expr('created_at', 'NOW()');\n$click->save();\n\necho \"[success] 200\";\n```\n\n----\n\n## \u4f8b2. user\u30c6\u30fc\u30d6\u30eb\n\n![count2.png](https://qiita-image-store.s3.amazonaws.com/0/25728/98f984eb-1fe9-65da-dace-7cbe203c06f0.png)\n\n```sql:create.sql\nCREATE TABLE clicks (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  user_id int(11) NOT NULL default '0',\n  count int(11) NOT NULL default '0',\n  updated_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='\u30af\u30ea\u30c3\u30af\u6570';\n\nCREATE TABLE users (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  sessid varchar(32) NOT NULL default '0',\n  updated_at datetime NOT NULL default '0000-00-00 00:00:00',\n  PRIMARY KEY (id)\n) TYPE=InnoDB COMMENT='user';\n```\n\n```html:index.php\n<?php session_start(); ?>\n<!DOCTYPE html>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\n<input type=\"button\" id=\"btn1\" value=\"click\" />\n<span id=\"counts\"></span>\n<script>\n$(function() {\n  var counts = 0;\n  var sessid = '<?php echo $_COOKIE[\"PHPSESSID\"]; ?>';\n  $('#btn1').click(function() {\n    $.ajax('countup.php',\n      {\n        type: 'get',\n        data: {\n            sessid: sessid,\n            count: ++counts,\n        }\n      }\n    )\n    .done(function(data) {\n      $(\"#counts\").html(\"\u30af\u30ea\u30c3\u30af\u56de\u6570:\"+counts);\n    })\n    .fail(function() {\n      $(\"#counts\").html('error');\n    });\n  });\n});\n</script>\n```\n\n```php:countup.php\n<?php\nrequire_once(\"./idiorm.php\");\n#------------------------------------------------------------------------------\nclass Counter {\n    public $count;\n    public $sessid;\n    function __construct() {\n        $this->count = $_GET[\"count\"];\n        $this->sessid = $_GET[\"sessid\"];\n    }\n    function db_connect() {\n        $DBNAME='test';\n        ORM::configure(array(\n            'connection_string' => 'mysql:host=127.0.0.1;dbname='.$DBNAME,\n            'username' => 'root',\n            'password' => '',\n            'caching' => true,\n            'caching_auto_clear' => true,\n        ));\n    }\n\n    function validation() {\n        if(!is_numeric($this->count)) {\n        \tdie(\"[quit] not number.\");\n        }\n        if(empty($this->sessid)) {\n        \tdie(\"[quit] no sessid.\");\n        }\n    }\n    \n    function up() {\n        $this->validation();\n        $this->db_connect();\n        # user\n        $user = ORM::for_table('users')->where('sessid', $this->sessid)->find_one();\n        if(!$user) {\n            # insert\n            $user = ORM::for_table('users')->create();\n            $user->sessid = $this->sessid;\n            $user->set_expr('updated_at', 'NOW()');\n            $user->save();\n        }\n        $user_id = $user->id();\n        \n        # click\u6570\n        $click = ORM::for_table('clicks')->where('user_id', $this->user_id)->find_one();\n        if(!$click) {\n            $click = ORM::for_table('clicks')->create();\n        }\n        $click->count = $this->count;\n        $click->user_id = $user_id;\n        $click->set_expr('updated_at', 'NOW()');\n        $click->save();\n        \n        echo \"[success] 200\";\n    }\n}\n#------------------------------------------------------------------------------\n$Counter = new Counter();\n$Counter->up();\n```\n", "tags": ["Idiorm", "PHP", "MySQL", "PDO"]}