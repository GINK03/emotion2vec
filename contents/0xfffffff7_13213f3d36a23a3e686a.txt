{"tags": ["Linux", "Xcode", "C++", "C", "\u975e\u540c\u671f\u51e6\u7406"], "context": " More than 1 year has passed since last update.\u7c21\u5358\u306aHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f8b\u3067\u3059\u3002\n\u901a\u4fe1\u306b\u554f\u984c\u306a\u3051\u308c\u3070\u30b3\u30f3\u30bd\u30fc\u30eb\u306bgoogle\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306ehtml\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nlibev\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306a\u3069\u306f#1\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string>\n#include <ev.h>\n#include <iostream>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <netdb.h>\n#include <fcntl.h>\n#include <signal.h>\n#include <unistd.h>\n#define SOCKET int\n#define SD_BOTH SHUT_WR\n\n#define READ_BUF_SIZE 4096\n#define BUF_SIZE 4097\n#define PORT 80\n\nvoid close_socket(SOCKET socket){\n    ::close(socket);\n}\n\nint get_error(){\n    return errno;\n}\n\n// TCP\u63a5\u7d9a.\nSOCKET tcp_connect(const char* host){\n\n    struct hostent *hp;\n    struct sockaddr_in addr;\n    SOCKET _socket;\n\n    if (!(hp = gethostbyname(host))){\n        return -1;\n    }\n    memset(&addr, 0, sizeof(addr));\n    addr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(PORT);\n\n    if ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n        return -1;\n    }\n    if (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n        return -1;\n    }\n\n    // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306b\u8a2d\u5b9a\u3059\u308b.\n    int flag = fcntl(_socket, F_GETFL, 0);\n    fcntl(_socket, F_SETFL, flag | O_NONBLOCK);\n\n    return _socket;\n}\n\n\nstatic void io_cb (EV_P_ ev_io *w, int revents)\n{\n    char buf[BUF_SIZE] = { 0 };\n    char* p = buf;\n    int r = (int)::recv(w->fd, p, READ_BUF_SIZE, NULL);\n\n    if(r > 0){\n        std::cout << p;\n    }\n\n\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3067\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u4ee5\u4e0b\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8.\n\n    // I/O\u3068\u30eb\u30fc\u30d7\u306e\u95a2\u9023\u3065\u3051\u3092\u89e3\u9664.\n    //ev_io_stop (EV_A_ w);\n\n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u89e3\u9664.\n    //ev_unloop (EV_A_ EVUNLOOP_ALL);\n}\n\nstatic void timeout_cb (EV_P_ ev_timer *w, int revents)\n{\n    std::cout << \"timeout\\n\";\n\n    // \u30bf\u30a4\u30de\u30fc\u3092\u30b9\u30c8\u30c3\u30d7\u3059\u308b.\n    ev_timer_stop (EV_A_ w);\n\n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u89e3\u9664.\n    ev_unloop (EV_A_ EVUNLOOP_ONE);\n}\n\nint main(int argc, const char * argv[])\n{\n\n    std::string host = \"www.google.co.jp\";\n\n    SOCKET _socket = tcp_connect(host.c_str());\n\n\n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u4f5c\u6210\u3059\u308b.\n    struct ev_loop *loop = ev_loop_new (0);\n\n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8.\n    ev_io io_watcher;\n\n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001\n    // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068FD\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u30bf\u30a4\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_io_init (&io_watcher, io_cb, _socket, EV_READ);\n\n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_io_start (loop, &io_watcher);\n\n\n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b.\n    ev_timer timeout_watcher;\n\n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u95a2\u9023\u3065\u3051\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u6307\u5b9a\u3059\u308b.\n    ev_timer_init (&timeout_watcher, timeout_cb, 20, 0.);\n\n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u3068\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_timer_start (loop, &timeout_watcher);\n\n\n    std::string str = \"GET / HTTP/1.1\\r\\nHost: \" + host;\n    str = str + \"\\r\\n\\r\\n\";\n    int w = (int)::send(_socket, str.c_str(), str.length(), NULL);\n\n    std::cout << \"write count\" << w << \"\\n\";\n\n    // \u30eb\u30fc\u30d7\u958b\u59cb.\n    ev_loop (loop, 0);\n\n    // \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3053\u3046\u3059\u308b.\n    //ev_loop (loop, EVLOOP_NONBLOCK);\n\n\n    std::cout << \"end\\n\";\n\n    // \u4f5c\u6210\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u7834\u68c4\n    ev_loop_destroy(loop);\n\n    close_socket(_socket);\n\n    return 0;\n}\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u65b9\u6cd5\u306f\u4ee5\u4e0b\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u5404\u81ea\u5909\u66f4\u3057\u3066\u3002\ngcc -o test test.cpp -lev -I/usr/local/Cellar/libev/4.15/include/ -L/usr/local/Cellar/libev/4.15/lib/ -lstdc++\n\n\u7c21\u5358\u306aHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f8b\u3067\u3059\u3002\n\u901a\u4fe1\u306b\u554f\u984c\u306a\u3051\u308c\u3070\u30b3\u30f3\u30bd\u30fc\u30eb\u306bgoogle\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306ehtml\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nlibev\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306a\u3069\u306f[#1](http://qiita.com/0xfffffff7/items/c5287067623fdbd2c3cb)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string>\n#include <ev.h>\n#include <iostream>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <netdb.h>\n#include <fcntl.h>\n#include <signal.h>\n#include <unistd.h>\n#define SOCKET int\n#define SD_BOTH SHUT_WR\n\n#define READ_BUF_SIZE 4096\n#define BUF_SIZE 4097\n#define PORT 80\n\nvoid close_socket(SOCKET socket){\n    ::close(socket);\n}\n\nint get_error(){\n    return errno;\n}\n\n// TCP\u63a5\u7d9a.\nSOCKET tcp_connect(const char* host){\n    \n    struct hostent *hp;\n    struct sockaddr_in addr;\n    SOCKET _socket;\n    \n    if (!(hp = gethostbyname(host))){\n        return -1;\n    }\n    memset(&addr, 0, sizeof(addr));\n    addr.sin_addr = *(struct in_addr*)hp->h_addr_list[0];\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(PORT);\n    \n    if ((_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){\n        return -1;\n    }\n    if (connect(_socket, (struct sockaddr *)&addr, sizeof(addr))<0){\n        return -1;\n    }\n    \n    // \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306b\u8a2d\u5b9a\u3059\u308b.\n    int flag = fcntl(_socket, F_GETFL, 0);\n    fcntl(_socket, F_SETFL, flag | O_NONBLOCK);\n    \n    return _socket;\n}\n\n\nstatic void io_cb (EV_P_ ev_io *w, int revents)\n{\n    char buf[BUF_SIZE] = { 0 };\n    char* p = buf;\n    int r = (int)::recv(w->fd, p, READ_BUF_SIZE, NULL);\n    \n    if(r > 0){\n        std::cout << p;\n    }\n    \n    \n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3067\u7d42\u4e86\u3055\u305b\u308b\u305f\u3081\u4ee5\u4e0b\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8.\n    \n    // I/O\u3068\u30eb\u30fc\u30d7\u306e\u95a2\u9023\u3065\u3051\u3092\u89e3\u9664.\n    //ev_io_stop (EV_A_ w);\n    \n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u89e3\u9664.\n    //ev_unloop (EV_A_ EVUNLOOP_ALL);\n}\n\nstatic void timeout_cb (EV_P_ ev_timer *w, int revents)\n{\n    std::cout << \"timeout\\n\";\n\n    // \u30bf\u30a4\u30de\u30fc\u3092\u30b9\u30c8\u30c3\u30d7\u3059\u308b.\n    ev_timer_stop (EV_A_ w);\n    \n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u89e3\u9664.\n    ev_unloop (EV_A_ EVUNLOOP_ONE);\n}\n\nint main(int argc, const char * argv[])\n{\n    \n    std::string host = \"www.google.co.jp\";\n    \n    SOCKET _socket = tcp_connect(host.c_str());\n\n    \n    // \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u4f5c\u6210\u3059\u308b.\n    struct ev_loop *loop = ev_loop_new (0);\n\n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8.\n    ev_io io_watcher;\n    \n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001\n    // \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068FD\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u30bf\u30a4\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_io_init (&io_watcher, io_cb, _socket, EV_READ);\n    \n    // I/O\u306e\u76e3\u8996\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_io_start (loop, &io_watcher);\n\n\n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b.\n    ev_timer timeout_watcher;\n    \n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u95a2\u9023\u3065\u3051\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u6307\u5b9a\u3059\u308b.\n    ev_timer_init (&timeout_watcher, timeout_cb, 20, 0.);\n    \n    // \u30bf\u30a4\u30de\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u3068\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3092\u95a2\u9023\u4ed8\u3051\u308b.\n    ev_timer_start (loop, &timeout_watcher);\n    \n    \n    std::string str = \"GET / HTTP/1.1\\r\\nHost: \" + host;\n    str = str + \"\\r\\n\\r\\n\";\n    int w = (int)::send(_socket, str.c_str(), str.length(), NULL);\n    \n    std::cout << \"write count\" << w << \"\\n\";\n    \n    // \u30eb\u30fc\u30d7\u958b\u59cb.\n    ev_loop (loop, 0);\n\n    // \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3053\u3046\u3059\u308b.\n    //ev_loop (loop, EVLOOP_NONBLOCK);\n\n    \n    std::cout << \"end\\n\";\n    \n    // \u4f5c\u6210\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u306e\u7834\u68c4\n    ev_loop_destroy(loop);\n    \n    close_socket(_socket);\n    \n    return 0;\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u65b9\u6cd5\u306f\u4ee5\u4e0b\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u5404\u81ea\u5909\u66f4\u3057\u3066\u3002\n\n```\ngcc -o test test.cpp -lev -I/usr/local/Cellar/libev/4.15/include/ -L/usr/local/Cellar/libev/4.15/lib/ -lstdc++\n```\n"}