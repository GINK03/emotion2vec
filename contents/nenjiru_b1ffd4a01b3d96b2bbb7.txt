{"context": " More than 1 year has passed since last update.C\u304b\u3089 [0, 1, 0.0005, -0.0009] \u3068\u3044\u3046\u914d\u5217\u3092UDP\u3067\u9001\u308a\u3001Unity\u5074\u3067double\u914d\u5217\u306b\u623b\u3059\u3002\n\u9001\u4fe1\uff08C\uff09\u5074\n\nudp.c\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/socket.h>\n\n#define INTERVAL_TIME 1\n\nvoid udpSend (char* address, int port);\nint port = 20001;\nchar addr[] = \"0.0.0.0\";\ndouble data[] = { 0, 1, 0.0005, -0.0009 };\n\nint main()\n{\n    udpSend(addr,port);\n    return 0;\n}\n\nvoid udpSend(char* address, int port)\n{\n    int udp = socket(AF_INET,SOCK_DGRAM,0);\n    struct sockaddr_in addr;\n    struct hostent *host;\n\n    memset(&addr, 0, sizeof(addr));\n    host = gethostbyname(address);\n    memcpy(host->h_addr, &addr.sin_addr, host->h_length);\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(port);\n\n    while (1)\n    {\n        sendto(udp, (unsigned char*) data, sizeof data, 0, (struct sockaddr *)&addr, sizeof(addr));\n        sleep(INTERVAL_TIME);\n    }\n\n    close(udp);\n}\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u9001\u4fe1\u958b\u59cb\u3002\n$ gcc udp.c\n$ ./a.put\n\n\u53d7\u4fe1\uff08Unity\uff09\u5074\u3002\u9069\u5f53\u306aGameObject\u306b\u304f\u3063\u3064\u3051\u3066\u304a\u304f\n\nUDPReceive.cs\nusing System;\nusing UnityEngine;\nusing System.Collections;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\n\npublic class UDPReceive : MonoBehaviour\n{\n    private const int DATA_LENGTH = 4;\n    private const int DOUBLE_LENGTH = 8;\n    private UdpClient udp;\n    private Thread thread;\n    private byte[] data;\n    private double[] result = new double[DATA_LENGTH];\n\n    void Start ()\n    {\n        udp = new UdpClient (20001);\n        thread = new Thread (new ThreadStart (threadWork));\n        thread.Start (); \n    }\n\n    void Update()\n    {\n        if (data != null)\n        {\n            Debug.LogFormat (\"{0}, {1}, {2}, {3}\", result[0], result[1], result[2], result[3]);\n        }\n    }\n\n    void OnApplicationQuit()\n    {\n        udp.Close ();\n        thread.Abort ();\n    }\n\n    void threadWork()\n    {\n        while(true)\n        {\n            IPEndPoint remoteEP = null;\n            data = udp.Receive(ref remoteEP);\n\n            for (int i = 0; i<DATA_LENGTH; i++)\n            {\n                result[i] = BitConverter.ToDouble(data, i * DOUBLE_LENGTH);\n            }\n        }\n    }\n}\n\n\nC\u304b\u3089 [0, 1, 0.0005, -0.0009] \u3068\u3044\u3046\u914d\u5217\u3092UDP\u3067\u9001\u308a\u3001Unity\u5074\u3067double\u914d\u5217\u306b\u623b\u3059\u3002\n\n\u9001\u4fe1\uff08C\uff09\u5074\n\n```c:udp.c\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/socket.h>\n\n#define INTERVAL_TIME 1\n\nvoid udpSend (char* address, int port);\nint port = 20001;\nchar addr[] = \"0.0.0.0\";\ndouble data[] = { 0, 1, 0.0005, -0.0009 };\n\nint main()\n{\n    udpSend(addr,port);\n    return 0;\n}\n\nvoid udpSend(char* address, int port)\n{\n    int udp = socket(AF_INET,SOCK_DGRAM,0);\n    struct sockaddr_in addr;\n    struct hostent *host;\n\n    memset(&addr, 0, sizeof(addr));\n    host = gethostbyname(address);\n    memcpy(host->h_addr, &addr.sin_addr, host->h_length);\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(port);\n\n    while (1)\n    {\n        sendto(udp, (unsigned char*) data, sizeof data, 0, (struct sockaddr *)&addr, sizeof(addr));\n        sleep(INTERVAL_TIME);\n    }\n\n    close(udp);\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u9001\u4fe1\u958b\u59cb\u3002\n\n```sh\n$ gcc udp.c\n$ ./a.put\n```\n\n\u53d7\u4fe1\uff08Unity\uff09\u5074\u3002\u9069\u5f53\u306aGameObject\u306b\u304f\u3063\u3064\u3051\u3066\u304a\u304f\n\n```UDPReceive.cs\nusing System;\nusing UnityEngine;\nusing System.Collections;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\n\npublic class UDPReceive : MonoBehaviour\n{\n\tprivate const int DATA_LENGTH = 4;\n\tprivate const int DOUBLE_LENGTH = 8;\n\tprivate UdpClient udp;\n\tprivate Thread thread;\n\tprivate byte[] data;\n\tprivate double[] result = new double[DATA_LENGTH];\n\n\tvoid Start ()\n\t{\n\t\tudp = new UdpClient (20001);\n\t\tthread = new Thread (new ThreadStart (threadWork));\n\t\tthread.Start (); \n\t}\n\n\tvoid Update()\n\t{\n\t\tif (data != null)\n\t\t{\n\t\t\tDebug.LogFormat (\"{0}, {1}, {2}, {3}\", result[0], result[1], result[2], result[3]);\n\t\t}\n\t}\n\n\tvoid OnApplicationQuit()\n\t{\n\t\tudp.Close ();\n\t\tthread.Abort ();\n\t}\n\n\tvoid threadWork()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tIPEndPoint remoteEP = null;\n\t\t\tdata = udp.Receive(ref remoteEP);\n\n\t\t\tfor (int i = 0; i<DATA_LENGTH; i++)\n\t\t\t{\n\t\t\t\tresult[i] = BitConverter.ToDouble(data, i * DOUBLE_LENGTH);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n", "tags": ["Unity", "C", "udp"]}