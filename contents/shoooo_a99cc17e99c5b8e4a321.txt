{"context": "\n\n\u6d3e\u624b\u306b\uff01\n\u300c\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u300d\u3092\u6d3e\u624b\u306b\u3067\u304d\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3061\u3087\u3046\u3069\u3044\u3044\u306e\u304c\npeterbrittain/asciimatics: A cross platform package to do curses-like operations and create ASCII art animations\n\nA cross platform package to do curses-like operations and create ASCII art animations\n\n\n\u5b9f\u88c5\n\u30ba\u30f3\u30c9\u30b3\u90e8\u5206\u306f\u4ee5\u4e0b\u304b\u3089\u62dd\u501f\nPython\u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7(\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf) - Qiita\n\n\u30b3\u30fc\u30c9\n# -*- coding: utf-8 -*-\nfrom asciimatics.effects import Cycle, Stars\nfrom asciimatics.renderers import ColourImageFile\nfrom asciimatics.scene import Scene\nfrom asciimatics.screen import Screen\nfrom collections import deque\nimport random\nimport time\n\nz = u'\u30ba\u30f3'\nd = u'\u30c9\u30b3'\n\ndef kiyoshi(screen):\n    effects = [\n        Cycle(\n            screen,\n            ColourImageFile(screen,\"kiyoshi.gif\",15),\n            (screen.height - 15)/ 2)\n        ,Stars(screen, 200)\n    ]\n    screen.play([Scene(effects)], stop_on_resize=True)\n\ndef zndkkys2():\n    state = 0\n    while True:\n        num = random.choice((0, 1, ))\n        # \u30ba\u30f3\u306a\u3089\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\n        if num:\n            yield z\n            state += 1\n        else:\n            yield d\n            # \u30c9\u30b3\u306e\u524d\u306b4\u56de\u4ee5\u4e0a\u30ba\u30f3\u304c\u9023\u7d9a\u3057\u3066\u3044\u305f\u3089\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n            if state >= 4:\n                return\n            # \u30c9\u30b3\u306e\u524d\u306e\u30ba\u30f3\u304c3\u56de\u4ee5\u4e0b\u306a\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u521d\u671f\u5316\n            else:\n                state = 0\n\nif __name__ == '__main__':\n    print ''.join(zndkkys2())\n    time.sleep(1)\n    Screen.wrapper(kiyoshi)\n\n\u4ee5\u4e0b\u306e\u753b\u50cf\u3092\u5143\u306b\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u751f\u6210\n\n\nq\u3067\u505c\u6b62\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u5074\u3067\u306e\u6b62\u3081\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u2026\u2026\uff09\n# \u6d3e\u624b\u306b\uff01\n\u300c\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u300d\u3092\u6d3e\u624b\u306b\u3067\u304d\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3061\u3087\u3046\u3069\u3044\u3044\u306e\u304c\n[peterbrittain/asciimatics: A cross platform package to do curses-like operations and create ASCII art animations](https://github.com/peterbrittain/asciimatics)\n\n> A cross platform package to do curses-like operations and create ASCII art animations\n\n## \u5b9f\u88c5\n\u30ba\u30f3\u30c9\u30b3\u90e8\u5206\u306f\u4ee5\u4e0b\u304b\u3089\u62dd\u501f\n[Python\u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7(\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf) - Qiita](http://qiita.com/ques0942/items/b3762287d8962d489bbf)\n\n### \u30b3\u30fc\u30c9\n```py\n# -*- coding: utf-8 -*-\nfrom asciimatics.effects import Cycle, Stars\nfrom asciimatics.renderers import ColourImageFile\nfrom asciimatics.scene import Scene\nfrom asciimatics.screen import Screen\nfrom collections import deque\nimport random\nimport time\n\nz = u'\u30ba\u30f3'\nd = u'\u30c9\u30b3'\n\ndef kiyoshi(screen):\n    effects = [\n        Cycle(\n            screen,\n            ColourImageFile(screen,\"kiyoshi.gif\",15),\n            (screen.height - 15)/ 2)\n        ,Stars(screen, 200)\n    ]\n    screen.play([Scene(effects)], stop_on_resize=True)\n\ndef zndkkys2():\n    state = 0\n    while True:\n        num = random.choice((0, 1, ))\n        # \u30ba\u30f3\u306a\u3089\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\n        if num:\n            yield z\n            state += 1\n        else:\n            yield d\n            # \u30c9\u30b3\u306e\u524d\u306b4\u56de\u4ee5\u4e0a\u30ba\u30f3\u304c\u9023\u7d9a\u3057\u3066\u3044\u305f\u3089\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n            if state >= 4:\n                return\n            # \u30c9\u30b3\u306e\u524d\u306e\u30ba\u30f3\u304c3\u56de\u4ee5\u4e0b\u306a\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u521d\u671f\u5316\n            else:\n                state = 0\n\nif __name__ == '__main__':\n    print ''.join(zndkkys2())\n    time.sleep(1)\n    Screen.wrapper(kiyoshi)\n```\n\n\u4ee5\u4e0b\u306e\u753b\u50cf\u3092\u5143\u306b\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u751f\u6210\n![kiyoshi.gif](https://qiita-image-store.s3.amazonaws.com/0/54591/62a3a3c0-e0cd-98d0-aa84-2da1f2add44f.gif)\n\n![kiyoshi2.png](https://qiita-image-store.s3.amazonaws.com/0/54591/22593e39-b095-2f77-a647-e59b12c10ee8.png)\n`q`\u3067\u505c\u6b62\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u5074\u3067\u306e\u6b62\u3081\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u2026\u2026\uff09\n", "tags": ["Python", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}