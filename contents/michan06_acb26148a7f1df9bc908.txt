{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\nAWS Device Farm\u306eManagement Console\u3067\u306f\u3001\u30c6\u30b9\u30c8\u4e2d\u306b\u63a1\u53d6\u3057\u305f\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u9806\u756a\u304c\u4fdd\u6301\u3055\u308c\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u4e0d\u4fbf\nuiautomator\u306b\u7279\u5316\u3057\u305f\u554f\u984c\u304b\u3082\u3002\n\u30bd\u30fc\u30b9\u306f\u3001 AWS Glacier\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u901a\u5e38S3\u306b\u623b\u3059\u305f\u3081\u306ePython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f\u3092\u5168\u9762\u7684\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n\u524d\u63d0\n\nWindows\nAWS CLI(\u306e\u6700\u65b0\u7248)\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002(\u6700\u65b0\u7248\u3067\u306a\u3044\u3068\u53d6\u5f97\u3067\u304d\u306a\u3044\u5c5e\u6027\u3042\u308a\u3002\u305f\u3060\u3053\u306e\u30ed\u30b8\u30c3\u30af\u306b\u306f\u95a2\u4fc2\u306a\u3044\u304c\u3002)\nPython 3.4\n\ncurl Win32-Generic\u306eDaren Owen\u3055\u3093\u306e7zip\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f7f\u7528\n\n\n\u30bd\u30fc\u30b9\n\nGetTEstReusltFromAWSDeviceFarm.py\n# -*- coding:utf-8 -*-\nimport subprocess \nimport json\nimport os\n\n# device farm\u306eregion\u540d\u3092\u6307\u5b9a\nregion = 'us-west-2'\n\ndevicefarm_project_arn = 'arn:xxxxxxxxx'\n\n# run\u306eARN\u3092\u6307\u5b9a\n# \u4f55\u3082\u5165\u529b\u3057\u306a\u3044\u3068devicefarm_project_arn\u3067\u6307\u5b9a\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306erun\u3092\u53d6\u5f97\n# \u305f\u3060\u3057run\u6570\u304c\u591a\u304b\u3063\u305f\u5834\u5408\u306e\u7d99\u7d9a\u306b\u306f\u672a\u5bfe\u5fdc\ndevicefarm_run_arn = ''\n\ndef result2str(result):\n    if(result == \"PASSED\"):\n        resultstr = \"o\"\n    elif(result == \"FAILED\"):\n        resultstr = \"x\"\n    else:\n        resultstr = \"=\"\n    return resultstr\n\ndef output_file(filename,str):\n    f = open(filename, 'w')\n    f.write(str)\n    f.close()\n\ndef list_runs(project_arn):\n    list_runs_cmd = ('aws devicefarm list-runs '\n                    ' --arn \"{0}\"' )\n\n    if region != '':\n        list_runs_cmd += ' --region \"{0}\"'.format(region)\n\n    list_runs_cmd = list_runs_cmd.format(project_arn)\n\n    print('-' * 80)\n    print(list_runs_cmd)\n\n    json_str_runs = subprocess.check_output(list_runs_cmd , shell=True)\n    json_str_runs = json_str_runs.decode('cp932')\n    json_obj_runs = json.loads(json_str_runs)\n    run_count = 0\n\n    for run in json_obj_runs['runs']:\n        list_jobs(run,run_count)\n        run_count = run_count + 1\n\n    os.chdir(\"..\")\n\ndef list_jobs(run,run_count):\n    run_arn = run['arn']\n    run_name = run['name']\n\n    print(\"  run={0} {1} {2}\".format(result2str(run['result']),run_arn, run_name ))\n    foldername = \"{0:0>5}_{1}_{2}\".format(run_count,result2str(run['result']),run_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_jobs_cmd = ('aws devicefarm list-jobs'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_jobs_cmd += ' --region \"{0}\"'.format(region)\n\n    list_jobs_cmd = list_jobs_cmd.format(run_arn)\n#    print('-' * 80)\n    print(\"  \" + list_jobs_cmd)\n\n    json_str_jobs = subprocess.check_output(list_jobs_cmd, shell=True)\n    json_str_jobs = json_str_jobs.decode('cp932')\n    json_obj_jobs = json.loads(json_str_jobs)\n    job_count = 0\n\n    for job in json_obj_jobs['jobs']:\n        list_suites(job,job_count)\n        job_count = job_count + 1\n    os.chdir(\"..\")\n\n\ndef list_suites(job,job_count):\n    job_arn = job['arn']\n    job_name = job['name']\n    job_device = job['device']['name']\n    job_device_width = job['device']['resolution']['width']\n    job_device_height = job['device']['resolution']['height']\n    job_device_memory = job['device']['memory']\n    job_device_os = job['device']['os']\n    job_device_manufacturer = job['device']['manufacturer']\n    job_device_model = job['device']['model']\n    job_device_image = job['device']['image']\n    job_device_memory = job['device']['memory']\n    job_device_cpu_arch = job['device']['cpu']['architecture']\n    job_device_cpu_clock = job['device']['cpu']['clock']\n    job_device_form = job['device']['formFactor']\n    job_device_heapSize = job['device']['heapSize']\n    job_device_platform = job['device']['platform']\n    print(\"    job={0} {1} {2}\".format(result2str(job['result']),job_name,job_device))\n    foldername = \"{0:0>5}_{1}_{2}\".format(job_count,result2str(job['result']),job_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    output_file(foldername + \".json\", json.dumps(job, indent=4))\n\n    list_suites_cmd = ('aws devicefarm list-suites'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_suites_cmd += ' --region \"{0}\"'.format(region)\n\n    list_suites_cmd = list_suites_cmd.format(job_arn)\n    json_str_suites = subprocess.check_output(list_suites_cmd, shell=True)\n    json_str_suites = json_str_suites.decode('cp932')\n    json_obj_suites = json.loads(json_str_suites)\n    suite_count = 0\n\n    for suite in json_obj_suites['suites']:\n        list_tests(suite,suite_count)\n        suite_count = suite_count + 1\n\n    os.chdir(\"..\")\n\ndef list_tests(suite,suite_count):\n    suite_arn = suite['arn']\n    suite_name = suite['name']\n    print(\"      suite_name={0} {1}\".format(result2str(suite['result']),suite_name))\n    foldername = \"{0:0>5}_{1}_{2}\".format(suite_count,result2str(suite['result']),suite_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_tests_cmd = ('aws devicefarm list-tests'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_tests_cmd += ' --region \"{0}\"'.format(region)\n\n    list_tests_cmd = list_tests_cmd.format(suite_arn)\n    json_str_tests = subprocess.check_output(list_tests_cmd, shell=True)\n    json_str_tests = json_str_tests.decode('cp932')\n    json_obj_tests = json.loads(json_str_tests)\n    test_count = 0\n\n    for test in json_obj_tests['tests']:\n        list_artifacts(test,test_count)\n        test_count = test_count + 1\n\n    os.chdir(\"..\")\n\ndef list_artifacts(test,test_count):\n    test_arn = test['arn']\n    test_name = test['name']\n    print(\"        test_name={0} {1}\".format(result2str(test['result']), test_name))\n    foldername = \"{0:0>5}_{1}_{2}\".format(test_count,result2str(test['result']),test_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_artifacts_cmd = ('aws devicefarm list-artifacts'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_artifacts_cmd += ' --region \"{0}\"'.format(region)\n\n    list_artifacts_cmd = list_artifacts_cmd.format(test_arn)\n\n    list_artifacts_(list_artifacts_cmd,\"SCREENSHOT\")\n    list_artifacts_(list_artifacts_cmd,\"LOG\")\n    list_artifacts_(list_artifacts_cmd,\"FILE\")\n    os.chdir(\"..\")\n\ndef list_artifacts_(list_artifacts_cmd,type):\n    list_artifacts_cmd += ' --type \"{0}\"'.format(type)\n\n    json_str_artifacts = subprocess.check_output(list_artifacts_cmd, shell=True)\n    json_str_artifacts = json_str_artifacts.decode('cp932')\n    json_obj_artifacts = json.loads(json_str_artifacts)\n    artifact_count = 0\n\n    for artifact in json_obj_artifacts['artifacts']:\n        artifact_arn = artifact['arn']\n        artifact_name = artifact['name']\n        artifact_extension = artifact['extension']\n        artifact_url = artifact['url']\n        artifact_filename = \"{0}.{1}\".format(artifact_name,artifact_extension)\n        print(\"          artifact_filename=\" + artifact_filename)\n        download_file(artifact_filename, artifact_url)\n\n\ndef download_file(artifact_filename, artifact_url):\n    get_artifacts_cmd = ('curl -s -S -o \"{0}\" \"{1}\"' )\n\n    get_artifacts_cmd = get_artifacts_cmd.format(artifact_filename,artifact_url)\n    result = subprocess.check_output(get_artifacts_cmd, shell=True)\n\n\ndef main():\n    if devicefarm_run_arn != '':\n        list_jobs(devicefarm_run_arn,0)\n    else:\n        list_runs(devicefarm_project_arn)\n\nif __name__ == '__main__':\n  main()\n\n\n\nAWS Device Fram\u306b\u3064\u3044\u3066\n\nAWS Device Farm\u3001\u4fbf\u5229\u3067\u3059\u304c\u3001\u5c11\u3005\u304a\u9ad8\u3044\u306e\u304c\u96e3\u70b9\u3002\n\u5b89\u5b9a\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\n\u30c6\u30b9\u30c8\u4e2d\u3001\u610f\u56f3\u305b\u305a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5207\u308c\u3066\u308b\u3053\u3068\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\n\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306f/sdcard/test-screenshots/\u306b\u4fdd\u5b58\u3059\u308c\u3070\u3001Device Farm\u304c\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3001\u30e1\u30bd\u30c3\u30c9\u307e\u3067\u306f\u6574\u7406\u3057\u3066\u304f\u308c\u308b\n\n# \u52d5\u6a5f\nAWS Device Farm\u306eManagement Console\u3067\u306f\u3001\u30c6\u30b9\u30c8\u4e2d\u306b\u63a1\u53d6\u3057\u305f\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u9806\u756a\u304c\u4fdd\u6301\u3055\u308c\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u4e0d\u4fbf\nuiautomator\u306b\u7279\u5316\u3057\u305f\u554f\u984c\u304b\u3082\u3002\n\n\u30bd\u30fc\u30b9\u306f\u3001 [AWS Glacier\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u901a\u5e38S3\u306b\u623b\u3059\u305f\u3081\u306ePython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f](http://wwld.jp/2015/01/08/amazoncli-s3.html)\u3092\u5168\u9762\u7684\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n\n# \u524d\u63d0\n1. Windows\n1. AWS CLI(\u306e\u6700\u65b0\u7248)\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002(\u6700\u65b0\u7248\u3067\u306a\u3044\u3068\u53d6\u5f97\u3067\u304d\u306a\u3044\u5c5e\u6027\u3042\u308a\u3002\u305f\u3060\u3053\u306e\u30ed\u30b8\u30c3\u30af\u306b\u306f\u95a2\u4fc2\u306a\u3044\u304c\u3002)\n1. Python 3.4\n2. [curl](http://curl.haxx.se/download.html) Win32-Generic\u306eDaren Owen\u3055\u3093\u306e7zip\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f7f\u7528\n\n\n# \u30bd\u30fc\u30b9\n```GetTEstReusltFromAWSDeviceFarm.py\n# -*- coding:utf-8 -*-\nimport subprocess \nimport json\nimport os\n\n# device farm\u306eregion\u540d\u3092\u6307\u5b9a\nregion = 'us-west-2'\n\ndevicefarm_project_arn = 'arn:xxxxxxxxx'\n\n# run\u306eARN\u3092\u6307\u5b9a\n# \u4f55\u3082\u5165\u529b\u3057\u306a\u3044\u3068devicefarm_project_arn\u3067\u6307\u5b9a\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306erun\u3092\u53d6\u5f97\n# \u305f\u3060\u3057run\u6570\u304c\u591a\u304b\u3063\u305f\u5834\u5408\u306e\u7d99\u7d9a\u306b\u306f\u672a\u5bfe\u5fdc\ndevicefarm_run_arn = ''\n\ndef result2str(result):\n    if(result == \"PASSED\"):\n        resultstr = \"o\"\n    elif(result == \"FAILED\"):\n        resultstr = \"x\"\n    else:\n        resultstr = \"=\"\n    return resultstr\n\ndef output_file(filename,str):\n    f = open(filename, 'w')\n    f.write(str)\n    f.close()\n\ndef list_runs(project_arn):\n    list_runs_cmd = ('aws devicefarm list-runs '\n                    ' --arn \"{0}\"' )\n\n    if region != '':\n        list_runs_cmd += ' --region \"{0}\"'.format(region)\n\n    list_runs_cmd = list_runs_cmd.format(project_arn)\n\n    print('-' * 80)\n    print(list_runs_cmd)\n\n    json_str_runs = subprocess.check_output(list_runs_cmd , shell=True)\n    json_str_runs = json_str_runs.decode('cp932')\n    json_obj_runs = json.loads(json_str_runs)\n    run_count = 0\n\n    for run in json_obj_runs['runs']:\n        list_jobs(run,run_count)\n        run_count = run_count + 1\n        \n    os.chdir(\"..\")\n\ndef list_jobs(run,run_count):\n    run_arn = run['arn']\n    run_name = run['name']\n\n    print(\"  run={0} {1} {2}\".format(result2str(run['result']),run_arn, run_name ))\n    foldername = \"{0:0>5}_{1}_{2}\".format(run_count,result2str(run['result']),run_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_jobs_cmd = ('aws devicefarm list-jobs'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_jobs_cmd += ' --region \"{0}\"'.format(region)\n\n    list_jobs_cmd = list_jobs_cmd.format(run_arn)\n#    print('-' * 80)\n    print(\"  \" + list_jobs_cmd)\n\n    json_str_jobs = subprocess.check_output(list_jobs_cmd, shell=True)\n    json_str_jobs = json_str_jobs.decode('cp932')\n    json_obj_jobs = json.loads(json_str_jobs)\n    job_count = 0\n    \n    for job in json_obj_jobs['jobs']:\n        list_suites(job,job_count)\n        job_count = job_count + 1\n    os.chdir(\"..\")\n\n\ndef list_suites(job,job_count):\n    job_arn = job['arn']\n    job_name = job['name']\n    job_device = job['device']['name']\n    job_device_width = job['device']['resolution']['width']\n    job_device_height = job['device']['resolution']['height']\n    job_device_memory = job['device']['memory']\n    job_device_os = job['device']['os']\n    job_device_manufacturer = job['device']['manufacturer']\n    job_device_model = job['device']['model']\n    job_device_image = job['device']['image']\n    job_device_memory = job['device']['memory']\n    job_device_cpu_arch = job['device']['cpu']['architecture']\n    job_device_cpu_clock = job['device']['cpu']['clock']\n    job_device_form = job['device']['formFactor']\n    job_device_heapSize = job['device']['heapSize']\n    job_device_platform = job['device']['platform']\n    print(\"    job={0} {1} {2}\".format(result2str(job['result']),job_name,job_device))\n    foldername = \"{0:0>5}_{1}_{2}\".format(job_count,result2str(job['result']),job_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n    \n    output_file(foldername + \".json\", json.dumps(job, indent=4))\n\n    list_suites_cmd = ('aws devicefarm list-suites'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_suites_cmd += ' --region \"{0}\"'.format(region)\n\n    list_suites_cmd = list_suites_cmd.format(job_arn)\n    json_str_suites = subprocess.check_output(list_suites_cmd, shell=True)\n    json_str_suites = json_str_suites.decode('cp932')\n    json_obj_suites = json.loads(json_str_suites)\n    suite_count = 0\n   \n    for suite in json_obj_suites['suites']:\n        list_tests(suite,suite_count)\n        suite_count = suite_count + 1\n        \n    os.chdir(\"..\")\n\ndef list_tests(suite,suite_count):\n    suite_arn = suite['arn']\n    suite_name = suite['name']\n    print(\"      suite_name={0} {1}\".format(result2str(suite['result']),suite_name))\n    foldername = \"{0:0>5}_{1}_{2}\".format(suite_count,result2str(suite['result']),suite_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_tests_cmd = ('aws devicefarm list-tests'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_tests_cmd += ' --region \"{0}\"'.format(region)\n\n    list_tests_cmd = list_tests_cmd.format(suite_arn)\n    json_str_tests = subprocess.check_output(list_tests_cmd, shell=True)\n    json_str_tests = json_str_tests.decode('cp932')\n    json_obj_tests = json.loads(json_str_tests)\n    test_count = 0\n\n    for test in json_obj_tests['tests']:\n        list_artifacts(test,test_count)\n        test_count = test_count + 1\n        \n    os.chdir(\"..\")\n       \ndef list_artifacts(test,test_count):\n    test_arn = test['arn']\n    test_name = test['name']\n    print(\"        test_name={0} {1}\".format(result2str(test['result']), test_name))\n    foldername = \"{0:0>5}_{1}_{2}\".format(test_count,result2str(test['result']),test_name)\n    os.mkdir(foldername)\n    os.chdir(foldername)\n\n    list_artifacts_cmd = ('aws devicefarm list-artifacts'\n                ' --arn \"{0}\"' )\n\n    if region != '':\n        list_artifacts_cmd += ' --region \"{0}\"'.format(region)\n        \n    list_artifacts_cmd = list_artifacts_cmd.format(test_arn)\n    \n    list_artifacts_(list_artifacts_cmd,\"SCREENSHOT\")\n    list_artifacts_(list_artifacts_cmd,\"LOG\")\n    list_artifacts_(list_artifacts_cmd,\"FILE\")\n    os.chdir(\"..\")\n\ndef list_artifacts_(list_artifacts_cmd,type):\n    list_artifacts_cmd += ' --type \"{0}\"'.format(type)\n\n    json_str_artifacts = subprocess.check_output(list_artifacts_cmd, shell=True)\n    json_str_artifacts = json_str_artifacts.decode('cp932')\n    json_obj_artifacts = json.loads(json_str_artifacts)\n    artifact_count = 0\n\n    for artifact in json_obj_artifacts['artifacts']:\n        artifact_arn = artifact['arn']\n        artifact_name = artifact['name']\n        artifact_extension = artifact['extension']\n        artifact_url = artifact['url']\n        artifact_filename = \"{0}.{1}\".format(artifact_name,artifact_extension)\n        print(\"          artifact_filename=\" + artifact_filename)\n        download_file(artifact_filename, artifact_url)\n\n    \ndef download_file(artifact_filename, artifact_url):\n    get_artifacts_cmd = ('curl -s -S -o \"{0}\" \"{1}\"' )\n    \n    get_artifacts_cmd = get_artifacts_cmd.format(artifact_filename,artifact_url)\n    result = subprocess.check_output(get_artifacts_cmd, shell=True)\n    \n\ndef main():\n    if devicefarm_run_arn != '':\n        list_jobs(devicefarm_run_arn,0)\n    else:\n        list_runs(devicefarm_project_arn)\n                   \nif __name__ == '__main__':\n  main()\n```\n\n\n#AWS Device Fram\u306b\u3064\u3044\u3066\n1. AWS Device Farm\u3001\u4fbf\u5229\u3067\u3059\u304c\u3001\u5c11\u3005\u304a\u9ad8\u3044\u306e\u304c\u96e3\u70b9\u3002\n2. \u5b89\u5b9a\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f\u306e\u306f\u96e3\u3057\u3044\n3. \u30c6\u30b9\u30c8\u4e2d\u3001\u610f\u56f3\u305b\u305a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5207\u308c\u3066\u308b\u3053\u3068\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\n4. \u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306f/sdcard/test-screenshots/\u306b\u4fdd\u5b58\u3059\u308c\u3070\u3001Device Farm\u304c\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3001\u30e1\u30bd\u30c3\u30c9\u307e\u3067\u306f\u6574\u7406\u3057\u3066\u304f\u308c\u308b\n", "tags": ["AWS", "aws-cli", "DeviceFarm"]}