{"context": "\n\n\u6ce8\u610f\u4e8b\u9805\n\u3053\u306e\u8a18\u4e8b\u306f\uff0cOpenCV3.x\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e2.x\u3068\u306f\u66f8\u304d\u65b9\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\uff0e\nOpenCV2.x\u306b\u3064\u3044\u3066\u306f\uff0c\u3053\u3061\u3089\u306b\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e\n\ncv::FileStorage\u306b\u3064\u3044\u3066\nOpenCV\u306e\u4e2d\u306bcv::FileStorage\u30af\u30e9\u30b9\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a,cv::Mat\u306e\u4e2d\u8eab\u3084\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306a\u3069\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30921~3\u884c\u7a0b\u5ea6\u3067\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u5f62\u5f0f\u3068\u3057\u3066\u306f\uff0cyml\u5f62\u5f0f\u304bxml\u5f62\u5f0f\u3067\u4fdd\u5b58\u304c\u3067\u304d\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306fOpenCV3.x\u304b\u3089\u4ed5\u69d8\u304c\u5909\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u306bcv::Mat\u3084int\u306a\u3069\u306e\u5909\u6570\u3092\u66f8\u304d\u51fa\u3059\u969b\u306b\uff0c\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u305d\u306e\u305f\u3081\uff0ccv::Mat\u306e\u66f8\u304d\u8fbc\u307f\uff0f\u8aad\u307f\u8fbc\u307f\u304c\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3088\u308a\uff11\u884c\u66f8\u304f\u3060\u3051\u3067\uff0c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\uff0e\n\u53d6\u308a\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u30fb\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306e\u5ea7\u6a19\u306e\u4fdd\u5b58\u3084\uff0c\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u4fdd\u5b58\u306a\u3069\u3067\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u305f\uff0cOpenCV\u3092\u4f7f\u7528\u3057\u3066\u5927\u898f\u6a21\u306a\u958b\u767a\u3092\u72ec\u308a\u3067\u884c\u3063\u3066\u3044\u308b\u6642\u306e\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u3084\uff0c\u5352\u7814\u306a\u3069\u3092\u30c1\u30fc\u30e0\u3067\u3084\u308b\u5834\u5408\u306bXML/YML\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5148\u306b\u6c7a\u3081\u3066\uff0c\u5206\u62c5\u3057\u3066\u958b\u767a\u3059\u308b\u3053\u3068\u306a\u3069\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nXML\u5f62\u5f0f\u304bYML\u5f62\u5f0f\u3069\u3061\u3089\u3067\u51fa\u529b\u3059\u308b\u304b\u306f\uff0c\u958b\u304f\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3067\u81ea\u52d5\u7684\u306b\u6c7a\u307e\u308a\u307e\u3059\uff0e\n\u8a73\u3057\u304f\u306f\uff0cOpenCV\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff08\u82f1\u8a9e\u3067\u3059\uff09\uff0e\n\n\u30c7\u30fc\u30bf\u3092xml\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3059\n\u30b3\u30fc\u30c9\u306e\u4f8b\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n#include<iostream>\n#include<string>\n#include\"OpenCV31.h\"\n\nusing namespace std;\n\nint main(void)\n{\n    //\u66f8\u304d\u8fbc\u307f\u3067XML\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    cv::FileStorage fs(\"test.xml\", cv::FileStorage::WRITE);\n    if (!fs2.isOpened()){\n        std::cout << \"File can not be opened.\" << std::endl;\n        return -1;\n    }\n\n    //int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\n    int formatCount = 4;\n    fs << \"formatCount\" << formatCount;\n\n    //std::string\u306e\u683c\u7d0d\u65b9\u6cd5\n    std::string imgName = \"nantara.bmp\";\n    fs << \"formatName\" << imgName;\n\n    //cv::Mat\u306e\u683c\u7d0d\u65b9\u6cd5(\u753b\u50cf\u884c\u5217\u306e\u4ee3\u308f\u308a\u306b3x3\u306e\u884c\u5217\u3092\u683c\u7d0d)\n    cv::Mat ImgMatrix = (cv::Mat_<double>(3, 3) << 100, 0, 320, 0, 100, 240, 0, 0, 1);\n    fs << \"ImgMatrix\" << ImgMatrix;\n\n    //\u30ce\u30fc\u30c9\u306e\u4f5c\u6210\n    //\u30d0\u30a4\u30ca\u30ea\u30d1\u30bf\u30fc\u30f3\u306e\u4fdd\u5b58\n    fs << \"features\" << \"[\";\n    for (int i = 0; i < 3; i++){\n        int x = rand() % 640;\n        int y = rand() % 480;\n    }\n    fs << \"]\";\n\n    //\u66f8\u304d\u51fa\u3057\n    fs.release();\n    return 0;\n}\n\n\u4e0a\u8a18\u306e\u51e6\u7406\u306b\u3088\u308a\u51fa\u529b\u3055\u308c\u308bXML\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n<?xml version=\"1.0\"?>\n<opencv_storage>\n<formatCount>4</formatCount>\n<formatName>nantara.bmp</formatName>\n<ImgMatrix type_id=\"opencv-matrix\">\n  <rows>3</rows>\n  <cols>3</cols>\n  <dt>d</dt>\n  <data>\n    100. 0. 320. 0. 100. 240. 0. 0. 1.</data></ImgMatrix>\n<features>\n  <_><x>41</x>\n    <y>227</y>\n    <lbp>\n      0 1 1 1 1 1 0 1</lbp></_>\n  <_><x>260</x>\n    <y>449</y>\n    <lbp>\n      0 0 1 1 0 1 1 0</lbp></_>\n  <_><x>598</x>\n    <y>78</y>\n    <lbp>\n      0 1 0 0 1 0 1 0</lbp></_></features>\n</opencv_storage>\n\n\n\u3061\u3087\u3053\u3063\u3068\u89e3\u8aac\n\n\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\n//\u66f8\u304d\u8fbc\u307f\u3067XML\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\ncv::FileStorage fs(\"test.xml\", cv::FileStorage::WRITE);\n\n\u4e0a\u8a18\u306e\u4e00\u884c\u3067\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\n\u5909\u6570\u306e\u5f8c\u306b\uff0c\u958b\u304d\u305f\u3044\uff08\u4f5c\u6210\u3057\u305f\u3044\uff09\u30d5\u30a1\u30a4\u30eb\u540d\u3068\uff0c\u30e2\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\uff0e\n\u30e2\u30fc\u30c9\u306f\u8aad\u307f\u8fbc\u307f\uff08cv::FileStorage::READ\uff09\u3068\u66f8\u304d\u8fbc\u307f\uff08cv::FileStorage::WRITE\uff09\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\n\uff08\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u89b3\u308b\u30682\u7a2e\u985e\u4ee5\u5916\u306b\u3082\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u8aad\u307f\u66f8\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3053\u306e2\u3064\u3067\u3059\uff09\uff0e\n\u306a\u304a\uff0cyml\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\"test.xml\"\u3092\"test.yml\"\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\uff0c\nyml\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff08\u8d85\u4fbf\u5229\uff09\uff0e\n\n\u30aa\u30da\u30ec\u30fc\u30bf\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nfs << \"formatCount\" << formatCount;\n\n\u30aa\u30da\u30ec\u30fc\u30bf\u306f\uff0cint,float,double,std::string,cv::Mat\u306a\u3069\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u5909\u6570\u306b\u6700\u521d\u306b\u5165\u308c\u305f\u6587\u5b57\u5217\u304cxml\u306e\u30bf\u30b0\u306b\u306a\u308a\u307e\u3059\uff0e\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\uff0c\u30bf\u30b0\u306e\u60c5\u5831\u3092\u6700\u521d\u306b\u5165\u308c\u306a\u3044\u3068xml\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u683c\u7d0d\u3055\u308c\u307e\u305b\u3093\uff0e\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u9023\u7d9a\u3067\u6570\u5024\u30c7\u30fc\u30bf\u3092\u5165\u308c\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u307e\u3061\u304c\u3044\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nint errorCount = 5;\nfs << \"formatCount\" << formatCount << errorCount; //\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n\n\u305b\u3044\u304b\u3044\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nint errorCount = 5;\nfs << \"formatCount\" << formatCount << \"errorCount\" << errorCount; //\u5fc5\u305a\u30bf\u30b0\u540d\u3092\u5165\u308c\u308b\n\n\n\u2193\u305b\u3044\u304b\u3044\u306e\u7d50\u679c\u2193\n<?xml version=\"1.0\"?>\n<opencv_storage>\n<formatCount>4</formatCount>\n<errorCount>5</errorCount>\n</opencv_storage>\n\n\u305b\u3044\u304b\u3044\u306e\u5834\u5408\u306f\uff0c\u3061\u3083\u3093\u3068\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff0e\n\n\u307e\u3068\u3081\u308b\n\u7279\u5fb4\u91cf\u3084\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306a\u3069\u6570\u5024\u3092\u307e\u3068\u3081\u3066\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\"[\",\"]\",\"{:\",\"}\",\"[:\",\"]\"\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u533a\u5207\u308a\u307e\u3059\uff0e\n//\u30ce\u30fc\u30c9\u306e\u4f5c\u6210\n//\u30d0\u30a4\u30ca\u30ea\u30d1\u30bf\u30fc\u30f3\u306e\u4fdd\u5b58\nfs << \"features\" << \"[\";  //\u30e1\u30a4\u30f3\u30bf\u30b0\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u958b\u59cb\nfor (int i = 0; i < 3; i++){\n    int x = rand() % 640;\n    int y = rand() % 480;\n    uchar lbp = rand() % 256;\n\n    //\u5404\u8981\u7d20\n    fs << \"{:\" << \"x\" << x << \"y\" << y << \"lbp\" << \"[:\";\n    for (int j = 0; j < 8; j++){\n        fs << ((lbp >> j) & 1);\n    }\n    fs << \"]\" << \"}\";\n}\nfs << \"]\";\n\n\n\u4fdd\u5b58\u3057\u305fxml\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u30b3\u30fc\u30c9\u306e\u4f8b\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nint main(void)\n{\n    cv::FileStorage fs2(\"test.xml\", cv::FileStorage::READ);\n    if (!fs2.isOpened()){\n        std::cout << \"File can not be opened.\" << std::endl;\n        return -1;\n    }\n\n    // first method: use (type) operator on FileNode.\n    int frameCount = (int)fs2[\"frameCount\"];\n\n    cv::Mat cameraMatrix2, distCoeffs2;\n    fs2[\"cameraMatrix\"] >> cameraMatrix2;\n    fs2[\"distCoeffs\"] >> distCoeffs2;\n\n    cout << \"frameCount: \" << frameCount << endl\n        << \"camera matrix: \" << cameraMatrix2 << endl\n        << \"distortion coeffs: \" << distCoeffs2 << endl;\n\n    cv::FileNode features = fs2[\"features\"];\n    cv::FileNodeIterator it = features.begin();\n    cv::FileNodeIterator it_end = features.end();\n    int idx = 0;\n    std::vector<uchar> lbpval;\n\n    // iterate through a sequence using FileNodeIterator\n    for (; it != it_end; ++it, idx++){\n        cout << \"feature #\" << idx << \": \";\n        cout << \"x=\" << (int)(*it)[\"x\"] << \", y=\" << (int)(*it)[\"y\"] << \", lbp: (\";\n        // you can also easily read numerical arrays using FileNode >> std::vector operator.\n        (*it)[\"lbp\"] >> lbpval;\n        for (int i = 0; i < (int)lbpval.size(); i++)\n            cout << \" \" << (int)lbpval[i];\n        cout << \")\" << endl;\n    }\n\n    fs2.release();\n    return 0;\n}\n\n\u8aad\u307f\u8fbc\u307f\u306e\u5834\u5408\u306f\uff0cstd::map<>\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u4f3c\u305f\u3088\u3046\u306b\u4f7f\u3048\u308b\u306e\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u30bf\u30b0\u306e\u60c5\u5831\u304c\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c[]\u306e\u4e2d\u306b\u30bf\u30b0\u540d\u3092\u66f8\u3044\u3066\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u5909\u6570\u306b\u5024\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\uff0e\n\u5909\u6570\u304c\u30ea\u30b9\u30c8\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f,cv::FileNode\u3067\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3057\uff0c\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\uff0e\n\n\u6700\u5f8c\u306b\n\u81ea\u5206\u3082\u6700\u8fd1\u77e5\u3063\u3066\u4f7f\u3063\u3066\u307f\u305f\u3070\u304b\u308a\u306a\u306e\u3067\uff0c\u3082\u3046\u5c11\u3057\u3044\u3044\u66f8\u304d\u65b9\u304c\u3042\u308b\u304b\u3082\u3067\u3059\uff0e\n#\u6ce8\u610f\u4e8b\u9805\n\n\u3053\u306e\u8a18\u4e8b\u306f\uff0cOpenCV3.x\u306e\u66f8\u304d\u65b9\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e2.x\u3068\u306f\u66f8\u304d\u65b9\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\uff0e\nOpenCV2.x\u306b\u3064\u3044\u3066\u306f\uff0c[\u3053\u3061\u3089](http://opencv.jp/opencv2-x-samples/xml_yaml)\u306b\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e\n\n#cv::FileStorage\u306b\u3064\u3044\u3066\n\nOpenCV\u306e\u4e2d\u306bcv::FileStorage\u30af\u30e9\u30b9\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a,cv::Mat\u306e\u4e2d\u8eab\u3084\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306a\u3069\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30921~3\u884c\u7a0b\u5ea6\u3067\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u5f62\u5f0f\u3068\u3057\u3066\u306f\uff0cyml\u5f62\u5f0f\u304bxml\u5f62\u5f0f\u3067\u4fdd\u5b58\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u307e\u305f\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306fOpenCV3.x\u304b\u3089\u4ed5\u69d8\u304c\u5909\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u306bcv::Mat\u3084int\u306a\u3069\u306e\u5909\u6570\u3092\u66f8\u304d\u51fa\u3059\u969b\u306b\uff0c\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u305d\u306e\u305f\u3081\uff0ccv::Mat\u306e\u66f8\u304d\u8fbc\u307f\uff0f\u8aad\u307f\u8fbc\u307f\u304c\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3088\u308a\uff11\u884c\u66f8\u304f\u3060\u3051\u3067\uff0c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\uff0e\n\n\u53d6\u308a\u51fa\u3057\u305f\u7279\u5fb4\u91cf\u30fb\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306e\u5ea7\u6a19\u306e\u4fdd\u5b58\u3084\uff0c\u30ab\u30e1\u30e9\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u4fdd\u5b58\u306a\u3069\u3067\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u305f\uff0cOpenCV\u3092\u4f7f\u7528\u3057\u3066\u5927\u898f\u6a21\u306a\u958b\u767a\u3092\u72ec\u308a\u3067\u884c\u3063\u3066\u3044\u308b\u6642\u306e\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u3084\uff0c\u5352\u7814\u306a\u3069\u3092\u30c1\u30fc\u30e0\u3067\u3084\u308b\u5834\u5408\u306bXML/YML\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5148\u306b\u6c7a\u3081\u3066\uff0c\u5206\u62c5\u3057\u3066\u958b\u767a\u3059\u308b\u3053\u3068\u306a\u3069\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nXML\u5f62\u5f0f\u304bYML\u5f62\u5f0f\u3069\u3061\u3089\u3067\u51fa\u529b\u3059\u308b\u304b\u306f\uff0c\u958b\u304f\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3067\u81ea\u52d5\u7684\u306b\u6c7a\u307e\u308a\u307e\u3059\uff0e\n\n\u8a73\u3057\u304f\u306f\uff0c[OpenCV\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.opencv.org/3.0-beta/modules/core/doc/xml_yaml_persistence.html)\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff08\u82f1\u8a9e\u3067\u3059\uff09\uff0e\n\n#\u30c7\u30fc\u30bf\u3092xml\u5f62\u5f0f\u3067\u66f8\u304d\u51fa\u3059\n\n\u30b3\u30fc\u30c9\u306e\u4f8b\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```cpp\n#include<iostream>\n#include<string>\n#include\"OpenCV31.h\"\n\nusing namespace std;\n\nint main(void)\n{\n\t//\u66f8\u304d\u8fbc\u307f\u3067XML\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n\tcv::FileStorage fs(\"test.xml\", cv::FileStorage::WRITE);\n\tif (!fs2.isOpened()){\n\t\tstd::cout << \"File can not be opened.\" << std::endl;\n\t\treturn -1;\n\t}\n\n\t//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\n\tint formatCount = 4;\n\tfs << \"formatCount\" << formatCount;\n\n\t//std::string\u306e\u683c\u7d0d\u65b9\u6cd5\n\tstd::string imgName = \"nantara.bmp\";\n\tfs << \"formatName\" << imgName;\n\n\t//cv::Mat\u306e\u683c\u7d0d\u65b9\u6cd5(\u753b\u50cf\u884c\u5217\u306e\u4ee3\u308f\u308a\u306b3x3\u306e\u884c\u5217\u3092\u683c\u7d0d)\n\tcv::Mat ImgMatrix = (cv::Mat_<double>(3, 3) << 100, 0, 320, 0, 100, 240, 0, 0, 1);\n\tfs << \"ImgMatrix\" << ImgMatrix;\n\n\t//\u30ce\u30fc\u30c9\u306e\u4f5c\u6210\n\t//\u30d0\u30a4\u30ca\u30ea\u30d1\u30bf\u30fc\u30f3\u306e\u4fdd\u5b58\n\tfs << \"features\" << \"[\";\n\tfor (int i = 0; i < 3; i++){\n\t\tint x = rand() % 640;\n\t\tint y = rand() % 480;\n\t}\n\tfs << \"]\";\n\n\t//\u66f8\u304d\u51fa\u3057\n\tfs.release();\n\treturn 0;\n}\n```\n\n\u4e0a\u8a18\u306e\u51e6\u7406\u306b\u3088\u308a\u51fa\u529b\u3055\u308c\u308bXML\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n```xml\n\n<?xml version=\"1.0\"?>\n<opencv_storage>\n<formatCount>4</formatCount>\n<formatName>nantara.bmp</formatName>\n<ImgMatrix type_id=\"opencv-matrix\">\n  <rows>3</rows>\n  <cols>3</cols>\n  <dt>d</dt>\n  <data>\n    100. 0. 320. 0. 100. 240. 0. 0. 1.</data></ImgMatrix>\n<features>\n  <_><x>41</x>\n    <y>227</y>\n    <lbp>\n      0 1 1 1 1 1 0 1</lbp></_>\n  <_><x>260</x>\n    <y>449</y>\n    <lbp>\n      0 0 1 1 0 1 1 0</lbp></_>\n  <_><x>598</x>\n    <y>78</y>\n    <lbp>\n      0 1 0 0 1 0 1 0</lbp></_></features>\n</opencv_storage>\n```\n\n##\u3061\u3087\u3053\u3063\u3068\u89e3\u8aac\n\n###\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\n\n```cpp\n//\u66f8\u304d\u8fbc\u307f\u3067XML\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\ncv::FileStorage fs(\"test.xml\", cv::FileStorage::WRITE);\n```\n\n\u4e0a\u8a18\u306e\u4e00\u884c\u3067\u30d5\u30a1\u30a4\u30eb\u30aa\u30fc\u30d7\u30f3\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\n\u5909\u6570\u306e\u5f8c\u306b\uff0c\u958b\u304d\u305f\u3044\uff08\u4f5c\u6210\u3057\u305f\u3044\uff09\u30d5\u30a1\u30a4\u30eb\u540d\u3068\uff0c\u30e2\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\uff0e\n\u30e2\u30fc\u30c9\u306f\u8aad\u307f\u8fbc\u307f\uff08cv::FileStorage::READ\uff09\u3068\u66f8\u304d\u8fbc\u307f\uff08cv::FileStorage::WRITE\uff09\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\n\uff08\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u89b3\u308b\u30682\u7a2e\u985e\u4ee5\u5916\u306b\u3082\u30e2\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u8aad\u307f\u66f8\u304d\u306b\u5fc5\u8981\u306a\u306e\u306f\u3053\u306e2\u3064\u3067\u3059\uff09\uff0e\n\u306a\u304a\uff0cyml\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\"test.xml\"\u3092\"test.yml\"\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\uff0c\nyml\u306e\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff08\u8d85\u4fbf\u5229\uff09\uff0e\n\n###\u30aa\u30da\u30ec\u30fc\u30bf\n\n```cpp\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nfs << \"formatCount\" << formatCount;\n```\n\n\u30aa\u30da\u30ec\u30fc\u30bf\u306f\uff0cint,float,double,std::string,cv::Mat\u306a\u3069\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u30d5\u30a1\u30a4\u30eb\u5909\u6570\u306b\u6700\u521d\u306b\u5165\u308c\u305f\u6587\u5b57\u5217\u304cxml\u306e\u30bf\u30b0\u306b\u306a\u308a\u307e\u3059\uff0e\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\uff0c\u30bf\u30b0\u306e\u60c5\u5831\u3092\u6700\u521d\u306b\u5165\u308c\u306a\u3044\u3068xml\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u683c\u7d0d\u3055\u308c\u307e\u305b\u3093\uff0e\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u9023\u7d9a\u3067\u6570\u5024\u30c7\u30fc\u30bf\u3092\u5165\u308c\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n####\u307e\u3061\u304c\u3044\n```cpp\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nint errorCount = 5;\nfs << \"formatCount\" << formatCount << errorCount; //\u5b9f\u884c\u30a8\u30e9\u30fc\u306b\u306a\u308b\n```\n\n####\u305b\u3044\u304b\u3044\n```cpp\n//int\u578b\u306e\u683c\u7d0d\u65b9\u6cd5\nint formatCount = 4;\nint errorCount = 5;\nfs << \"formatCount\" << formatCount << \"errorCount\" << errorCount; //\u5fc5\u305a\u30bf\u30b0\u540d\u3092\u5165\u308c\u308b\n```\n####\u2193\u305b\u3044\u304b\u3044\u306e\u7d50\u679c\u2193\n```xml\n<?xml version=\"1.0\"?>\n<opencv_storage>\n<formatCount>4</formatCount>\n<errorCount>5</errorCount>\n</opencv_storage>\n```\n\u305b\u3044\u304b\u3044\u306e\u5834\u5408\u306f\uff0c\u3061\u3083\u3093\u3068\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff0e\n\n##\u307e\u3068\u3081\u308b\n\u7279\u5fb4\u91cf\u3084\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u70b9\u306a\u3069\u6570\u5024\u3092\u307e\u3068\u3081\u3066\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\"[\",\"]\",\"{:\",\"}\",\"[:\",\"]\"\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u533a\u5207\u308a\u307e\u3059\uff0e\n\n```cpp\n//\u30ce\u30fc\u30c9\u306e\u4f5c\u6210\n//\u30d0\u30a4\u30ca\u30ea\u30d1\u30bf\u30fc\u30f3\u306e\u4fdd\u5b58\nfs << \"features\" << \"[\";  //\u30e1\u30a4\u30f3\u30bf\u30b0\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u958b\u59cb\nfor (int i = 0; i < 3; i++){\n\tint x = rand() % 640;\n\tint y = rand() % 480;\n\tuchar lbp = rand() % 256;\n\n\t//\u5404\u8981\u7d20\n\tfs << \"{:\" << \"x\" << x << \"y\" << y << \"lbp\" << \"[:\";\n\tfor (int j = 0; j < 8; j++){\n\t\tfs << ((lbp >> j) & 1);\n\t}\n\tfs << \"]\" << \"}\";\n}\nfs << \"]\";\n```\n\n\n#\u4fdd\u5b58\u3057\u305fxml\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\n\u30b3\u30fc\u30c9\u306e\u4f8b\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```cpp\nint main(void)\n{\n\tcv::FileStorage fs2(\"test.xml\", cv::FileStorage::READ);\n\tif (!fs2.isOpened()){\n\t\tstd::cout << \"File can not be opened.\" << std::endl;\n\t\treturn -1;\n\t}\n\n\t// first method: use (type) operator on FileNode.\n\tint frameCount = (int)fs2[\"frameCount\"];\n\n\tcv::Mat cameraMatrix2, distCoeffs2;\n\tfs2[\"cameraMatrix\"] >> cameraMatrix2;\n\tfs2[\"distCoeffs\"] >> distCoeffs2;\n\n\tcout << \"frameCount: \" << frameCount << endl\n\t\t<< \"camera matrix: \" << cameraMatrix2 << endl\n\t\t<< \"distortion coeffs: \" << distCoeffs2 << endl;\n\n\tcv::FileNode features = fs2[\"features\"];\n\tcv::FileNodeIterator it = features.begin();\n    cv::FileNodeIterator it_end = features.end();\n\tint idx = 0;\n\tstd::vector<uchar> lbpval;\n\n\t// iterate through a sequence using FileNodeIterator\n\tfor (; it != it_end; ++it, idx++){\n\t\tcout << \"feature #\" << idx << \": \";\n\t\tcout << \"x=\" << (int)(*it)[\"x\"] << \", y=\" << (int)(*it)[\"y\"] << \", lbp: (\";\n\t\t// you can also easily read numerical arrays using FileNode >> std::vector operator.\n\t\t(*it)[\"lbp\"] >> lbpval;\n\t\tfor (int i = 0; i < (int)lbpval.size(); i++)\n\t\t\tcout << \" \" << (int)lbpval[i];\n\t\tcout << \")\" << endl;\n\t}\n\n\tfs2.release();\n\treturn 0;\n}\n```\n\n\u8aad\u307f\u8fbc\u307f\u306e\u5834\u5408\u306f\uff0cstd::map<>\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u4f3c\u305f\u3088\u3046\u306b\u4f7f\u3048\u308b\u306e\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u30bf\u30b0\u306e\u60c5\u5831\u304c\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c[]\u306e\u4e2d\u306b\u30bf\u30b0\u540d\u3092\u66f8\u3044\u3066\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u5909\u6570\u306b\u5024\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\uff0e\n\u5909\u6570\u304c\u30ea\u30b9\u30c8\u5316\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f,cv::FileNode\u3067\u30ce\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3057\uff0c\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\uff0e\n\n#\u6700\u5f8c\u306b\n\n\u81ea\u5206\u3082\u6700\u8fd1\u77e5\u3063\u3066\u4f7f\u3063\u3066\u307f\u305f\u3070\u304b\u308a\u306a\u306e\u3067\uff0c\u3082\u3046\u5c11\u3057\u3044\u3044\u66f8\u304d\u65b9\u304c\u3042\u308b\u304b\u3082\u3067\u3059\uff0e\n\n\n", "tags": ["OpenCV3"]}