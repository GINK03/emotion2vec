{"context": " More than 1 year has passed since last update.Capybara\u3092\u4f7f\u3063\u3066rake spec\u3067\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3089\u3001\nNoMethodError:\n       undefined method `visit' for #<RSpec::Core::ExampleGroup::Nested_7:0x007fff279d8158>\n\n\u3068\u3001Capybara\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8a8d\u8b58\u3057\u306a\u3044\u3068\u3044\u3046\u4e8b\u4ef6\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u3053\u3046\u8a00\u308f\u308c\u305f\u3068\u304d\u306f\u3001\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3068\u304a\u308a\u3001\nhttps://github.com/rspec/rspec-rails/issues/360\nspec_helper.rb\u306eRSpec.configure\u306e\u4e2d\u306bconfig.include Capybara::DSL\u3092\u66f8\u304f\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nspec_helper.rb\nrequire 'rubygems'\nrequire 'spork'\n#uncomment the following line to use spork with the debugger\n#require 'spork/ext/ruby-debug'\n\nSpork.prefork do\n  # This file is copied to spec/ when you run 'rails generate rspec:install'\n  ENV[\"RAILS_ENV\"] ||= 'test'\n  require File.expand_path(\"../../config/environment\", __FILE__)\n  require 'rspec/rails'\n  #require 'rspec/autorun'\n  #require 'capybara/rails'\n  require 'capybara/rspec'\n\n  # Requires supporting ruby files with custom matchers and macros, etc,\n  # in spec/support/ and its subdirectories.\n  Dir[Rails.root.join(\"spec/support/**/*.rb\")].each {|f| require f}\n\n  RSpec.configure do |config|\n    # ## Mock Framework\n    #\n    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:\n    #\n    # config.mock_with :mocha\n    # config.mock_with :flexmock\n    # config.mock_with :rr\n\n    # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n    #config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n\n    # If you're not using ActiveRecord, or you'd prefer not to run each of your\n    # examples within a transaction, remove the following line or assign false\n    # instead of true.\n    # for selenium\n    config.use_transactional_fixtures = false\n\n    # If true, the base class of anonymous controllers will be inferred\n    # automatically. This will be the default behavior in future versions of\n    # rspec-rails.\n    config.infer_base_class_for_anonymous_controllers = false\n\n    #Capybara\u306evisit\u304cundefined\u3068\u8a00\u308f\u308c\u305f\u3068\u304d\u3001Capybara::DSL\u3092\u542b\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3089\u3046\u307e\u304f\u3044\u3063\u305f\n    config.include Capybara::DSL\n    #\n    #\n    config.before(:all) do\n      Capybara.default_selector = :css\n      Capybara.javascript_driver = :webkit\n    end\n    config.before(:suite) do\n      DatabaseCleaner.strategy = :truncation\n    end\n\n    config.before(:each) do\n      DatabaseCleaner.start\n    end\n\n    config.after(:each) do\n      DatabaseCleaner.clean\n    end\n\n\n  end\n\n\n  # Loading more in this block will cause your tests to run faster. However,\n  # if you change any configuration or code from libraries loaded here, you'll\n  # need to restart spork for it take effect.\n\nend\n\nSpork.each_run do\n  FactoryGirl.reload\nend\n\n# --- Instructions ---\n# Sort the contents of this file into a Spork.prefork and a Spork.each_run\n# block.\n#\n# The Spork.prefork block is run only once when the spork server is started.\n# You typically want to place most of your (slow) initializer code in here, in\n# particular, require'ing any 3rd-party gems that you don't normally modify\n# during development.\n#\n# The Spork.each_run block is run each time you run your specs.  In case you\n# need to load files that tend to change during development, require them here.\n# With Rails, your application modules are loaded automatically, so sometimes\n# this block can remain empty.\n#\n# Note: You can modify files loaded *from* the Spork.each_run block without\n# restarting the spork server.  However, this file itself will not be reloaded,\n# so if you change any of the code inside the each_run block, you still need to\n# restart the server.  In general, if you have non-trivial code in this file,\n# it's advisable to move it into a separate file so you can easily edit it\n# without restarting spork.  (For example, with RSpec, you could move\n# non-trivial code into a file spec/support/my_helper.rb, making sure that the\n# spec/support/* files are require'd from inside the each_run block.)\n#\n# Any code that is left outside the two blocks will be run during preforking\n# *and* during each_run -- that's probably not what you want.\n#\n# These instructions should self-destruct in 10 seconds.  If they don't, feel\n# free to delete them.\n\n\n\n\n\nCapybara\u3092\u4f7f\u3063\u3066rake spec\u3067\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3089\u3001\n\n```\nNoMethodError:\n       undefined method `visit' for #<RSpec::Core::ExampleGroup::Nested_7:0x007fff279d8158>\n```\n\n\u3068\u3001Capybara\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8a8d\u8b58\u3057\u306a\u3044\u3068\u3044\u3046\u4e8b\u4ef6\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u3053\u3046\u8a00\u308f\u308c\u305f\u3068\u304d\u306f\u3001\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u3068\u304a\u308a\u3001\nhttps://github.com/rspec/rspec-rails/issues/360\nspec_helper.rb\u306eRSpec.configure\u306e\u4e2d\u306bconfig.include Capybara::DSL\u3092\u66f8\u304f\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u304c\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\n```ruby:spec_helper.rb\nrequire 'rubygems'\nrequire 'spork'\n#uncomment the following line to use spork with the debugger\n#require 'spork/ext/ruby-debug'\n\nSpork.prefork do\n  # This file is copied to spec/ when you run 'rails generate rspec:install'\n  ENV[\"RAILS_ENV\"] ||= 'test'\n  require File.expand_path(\"../../config/environment\", __FILE__)\n  require 'rspec/rails'\n  #require 'rspec/autorun'\n  #require 'capybara/rails'\n  require 'capybara/rspec'\n\n  # Requires supporting ruby files with custom matchers and macros, etc,\n  # in spec/support/ and its subdirectories.\n  Dir[Rails.root.join(\"spec/support/**/*.rb\")].each {|f| require f}\n\n  RSpec.configure do |config|\n    # ## Mock Framework\n    #\n    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:\n    #\n    # config.mock_with :mocha\n    # config.mock_with :flexmock\n    # config.mock_with :rr\n\n    # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n    #config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n\n    # If you're not using ActiveRecord, or you'd prefer not to run each of your\n    # examples within a transaction, remove the following line or assign false\n    # instead of true.\n    # for selenium\n    config.use_transactional_fixtures = false\n\n    # If true, the base class of anonymous controllers will be inferred\n    # automatically. This will be the default behavior in future versions of\n    # rspec-rails.\n    config.infer_base_class_for_anonymous_controllers = false\n\n    #Capybara\u306evisit\u304cundefined\u3068\u8a00\u308f\u308c\u305f\u3068\u304d\u3001Capybara::DSL\u3092\u542b\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3089\u3046\u307e\u304f\u3044\u3063\u305f\n    config.include Capybara::DSL\n    #\n    #\n    config.before(:all) do\n      Capybara.default_selector = :css\n      Capybara.javascript_driver = :webkit\n    end\n    config.before(:suite) do\n      DatabaseCleaner.strategy = :truncation\n    end\n\n    config.before(:each) do\n      DatabaseCleaner.start\n    end\n\n    config.after(:each) do\n      DatabaseCleaner.clean\n    end\n\n\n  end\n\n\n  # Loading more in this block will cause your tests to run faster. However,\n  # if you change any configuration or code from libraries loaded here, you'll\n  # need to restart spork for it take effect.\n\nend\n\nSpork.each_run do\n  FactoryGirl.reload\nend\n\n# --- Instructions ---\n# Sort the contents of this file into a Spork.prefork and a Spork.each_run\n# block.\n#\n# The Spork.prefork block is run only once when the spork server is started.\n# You typically want to place most of your (slow) initializer code in here, in\n# particular, require'ing any 3rd-party gems that you don't normally modify\n# during development.\n#\n# The Spork.each_run block is run each time you run your specs.  In case you\n# need to load files that tend to change during development, require them here.\n# With Rails, your application modules are loaded automatically, so sometimes\n# this block can remain empty.\n#\n# Note: You can modify files loaded *from* the Spork.each_run block without\n# restarting the spork server.  However, this file itself will not be reloaded,\n# so if you change any of the code inside the each_run block, you still need to\n# restart the server.  In general, if you have non-trivial code in this file,\n# it's advisable to move it into a separate file so you can easily edit it\n# without restarting spork.  (For example, with RSpec, you could move\n# non-trivial code into a file spec/support/my_helper.rb, making sure that the\n# spec/support/* files are require'd from inside the each_run block.)\n#\n# Any code that is left outside the two blocks will be run during preforking\n# *and* during each_run -- that's probably not what you want.\n#\n# These instructions should self-destruct in 10 seconds.  If they don't, feel\n# free to delete them.\n\n\n```\n\n", "tags": ["Capybara", "Rails", "RSpec", "Ruby"]}