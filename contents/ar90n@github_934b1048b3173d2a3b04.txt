{"context": " More than 1 year has passed since last update.\n\npyOpenGL\u3092\u5c0e\u5165\u3059\u308b\n\u4eca\u56de\u306fOpenGL\u3067\u306a\u3093\u304b\u4f5c\u308b\u3053\u3068\u3088\u308a\u3082,GLSL\u306b\u3055\u308f\u3063\u3066\u307f\u308b\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067,\npython + pyOpenGL\u3092\u4f7f\u3046\u3053\u3068\u3068\u3057\u305f.\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ed\u30fc\u30c9\u3068\u304b\u3053\u3063\u3061\u306e\u65b9\u304c\u697d\u3060\u3057\u306d\uff01\uff01\uff09\n\u307e\u305a,pyOpenGL\u3068PyOpenGL-Demo\u3092\u5c0e\u5165\u3059\u308b.\n% sudo pip install PyOpenGL PyOpenGL-Demo\n\n\u6b21\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057,\u9069\u5207\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b.\n% cd /Library/Python/2.7/site-package/PyOpenGL-Demo/GLUT/\n% python shader-test.py\n\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u69d8\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u308b.\n\n\n\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u306e\u3072\u306a\u5f62\u3092\u3064\u304f\u308b\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0,\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0,\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3072\u306a\u5f62\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3059\u308b.\u57fa\u672c\u7684\u306b\u4e0a\u3067\u4f7f\u3063\u305fshader-test.py\u3092\u30d1\u30af\u308b\u3053\u3068\u306b\u3057\u305f.\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a.\n\nshader-test.py\n#! /usr/bin/env python\nimport numpy as np\nimport sys\nimport time\nimport Image\nimport OpenGL\nOpenGL.ERROR_ON_COPY = True\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\nfrom OpenGL.GLUT import *\n\n# PyOpenGL 3.0.1 introduces this convenience module...\nfrom OpenGL.GL.shaders import *\n\nvertices = None\nindices = None\n\ndef InitGL( vertex_shade_code, fragment_shader_code, texture_image ):\n    glClearColor(0.0, 0.0, 0.0, 0.0)\n\n    texture_id = glGenTextures( 1 )\n    glPixelStorei( GL_UNPACK_ALIGNMENT, 1 )\n    glActiveTexture( GL_TEXTURE0 )\n    glBindTexture( GL_TEXTURE_2D, texture_id )\n\n    if texture_image.mode == 'RGB':\n        glTexImage2D( GL_TEXTURE_2D,\n                      0,\n                      4,\n                      texture_image.size[0],\n                      texture_image.size[1],\n                      0,\n                      GL_RGB,\n                      GL_UNSIGNED_BYTE,\n                      texture_image.tostring() )\n    else:\n        glTexImage2D( GL_TEXTURE_2D,\n                      0,\n                      4,\n                      texture_image.size[0],\n                      texture_image.size[1],\n                      0,\n                      GL_RGBA,\n                      GL_UNSIGNED_BYTE,\n                      texture_image.tostring() )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE )\n\n    program = compileProgram(\n        compileShader( vertex_shade_code,GL_VERTEX_SHADER),\n        compileShader( fragment_shader_code,GL_FRAGMENT_SHADER),)\n\n    glUseProgram(program)\n    glUniform1i( glGetUniformLocation( program, \"s_texture\" ), 0 );\n    glUniform1f( glGetUniformLocation( program, \"texture_width\" ), float( texture_image.size[ 0 ] ) )\n    glUniform1f( glGetUniformLocation( program, \"texture_height\" ), float( texture_image.size[ 1 ] ) )\n\n\n    global vertices\n    global indices\n    position_vertices = [ -1.0,  1.0, 0.0,\n                          -1.0, -1.0, 0.0,\n                           1.0, -1.0, 0.0,\n                           1.0,  1.0, 0.0, ]\n    texture_vertices = [ 0.0, 0.0,\n                         0.0, texture_image.size[ 1 ],\n                         texture_image.size[ 0 ], texture_image.size[ 1 ],\n                         texture_image.size[ 0 ], 0.0 ]\n\n    indices = [ 0, 1, 2, 0, 2, 3 ]\n\n    position_loc = glGetAttribLocation( program, 'a_position' )\n    glVertexAttribPointer( position_loc,\n                           3,\n                           GL_FLOAT,\n                           GL_FALSE,\n                           3 * 4,\n                           np.array( position_vertices, np.float32 ) )\n\n    tex_loc = glGetAttribLocation( program, 'a_texCoord' )\n    glVertexAttribPointer( tex_loc,\n                           2,\n                           GL_FLOAT,\n                           GL_FALSE,\n                           2 * 4,\n                           np.array( texture_vertices, np.float32 ) )\n\n    glEnableVertexAttribArray( position_loc )\n    glEnableVertexAttribArray( tex_loc )\n\n\ndef ReSizeGLScene(Width, Height):\n    glViewport(0, 0, Width, Height)\n\n# The main drawing function.\ndef DrawGLScene():\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n\n    glEnable( GL_TEXTURE_2D )\n\n    glDrawElements( GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, np.array( indices, np.uint16 ) )\n    glDisable(GL_TEXTURE_2D)\n\n    glutSwapBuffers()\n\ndef keyPressed(*args):\n    # If escape is pressed, kill everything.\n    if args[0] == '\\x1b':\n        sys.exit()\n\ndef usage():\n    print \"usage:%s vertex_shader_file fragment_shader_file texture_file\" % sys.argv[ 0 ]\n\ndef main():\n    try:\n        vertex_shader_file = sys.argv[ 1 ]\n        fragment_shader_file = sys.argv[ 2 ]\n        texture_file = sys.argv[ 3 ]\n    except IndexError:\n        usage()\n        sys.exit( -1 )\n\n    vertex_shade_code = '\\n'.join( open( vertex_shader_file, 'r' ).readlines() )\n    fragment_shader_code = '\\n'.join( open( fragment_shader_file, 'r' ).readlines() )\n    texture_image = Image.open( texture_file )\n    print texture_image.mode\n    assert texture_image.mode == 'RGBA' or texture_image.mode == 'RGB'\n\n    glutInit(sys.argv)\n\n    if texture_image.mode == 'RGBA':\n        glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH)\n    else:\n        glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)\n\n    window_width,window_height = texture_image.size\n    glutInitWindowSize( window_width, window_height )\n\n    # the window starts at the upper left corner of the screen\n    glutInitWindowPosition(0, 0)\n\n    glutCreateWindow( sys.argv[ 0 ] )\n\n    glutDisplayFunc(DrawGLScene)\n\n    # Uncomment this line to get full screen.\n    #glutFullScreen()\n\n    # When we are doing nothing, redraw the scene.\n    glutIdleFunc(DrawGLScene)\n\n    # Register the function called when our window is resized.\n    glutReshapeFunc(ReSizeGLScene)\n\n    # Register the function called when the keyboard is pressed.\n    glutKeyboardFunc(keyPressed)\n\n    # Initialize our window.\n    InitGL( vertex_shade_code, fragment_shader_code, texture_image )\n\n    # Start Event Processing Engine\n    glutMainLoop()\n\nif __name__ == \"__main__\":\n    print \"Hit ESC key to quit.\"\n    main()\n\n\n\u3093\u3067,\u4e0b\u306e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\n\nshader.vert\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_texCoord;\nuniform float texture_width;\nuniform float texture_height;\n\nvoid main() {\n    v_texCoord = a_texCoord;\n    gl_Position = a_position;\n}\n\n\n\u4e0b\u306e\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\n\nshader.frag\nvarying vec2 v_texCoord;\nuniform sampler2D s_texture;\nuniform float texture_width;\nuniform float texture_height;\n\nvoid main() {\n    float t_x = v_texCoord.x / texture_width;\n    float t_y = v_texCoord.y / texture_height;\n    float d_x = 1.0 / texture_width;\n    float d_y = 1.0 / texture_height;\n\n    vec4 v1 = texture2D( s_texture, vec2( t_x, t_y ) + vec2( d_x, 0.0 ) );\n    vec4 v2 = texture2D( s_texture, vec2( t_x, t_y ) - vec2( d_x, 0.0 ) );\n    vec4 v3 = texture2D( s_texture, vec2( t_x, t_y ) + vec2( 0.0, d_y ) );\n    vec4 v4 = texture2D( s_texture, vec2( t_x, t_y ) - vec2( 0.0, d_y ) );\n    gl_FragColor = ( abs( v1 - v2 ) + abs( v3 - v4 ) ) / 2.0;\n}\n\n\n\u3053\u3093\u306a\u611f\u3058\n% python shader-test.py shader.vert shader.frag texture.png\n\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\n\n##pyOpenGL\u3092\u5c0e\u5165\u3059\u308b\n\u4eca\u56de\u306fOpenGL\u3067\u306a\u3093\u304b\u4f5c\u308b\u3053\u3068\u3088\u308a\u3082,GLSL\u306b\u3055\u308f\u3063\u3066\u307f\u308b\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067,\npython + pyOpenGL\u3092\u4f7f\u3046\u3053\u3068\u3068\u3057\u305f.\uff08\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30ed\u30fc\u30c9\u3068\u304b\u3053\u3063\u3061\u306e\u65b9\u304c\u697d\u3060\u3057\u306d\uff01\uff01\uff09\n\n\u307e\u305a,pyOpenGL\u3068PyOpenGL-Demo\u3092\u5c0e\u5165\u3059\u308b.\n\n```sh\n% sudo pip install PyOpenGL PyOpenGL-Demo\n```\n\u6b21\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057,\u9069\u5207\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b.\n\n```sh\n% cd /Library/Python/2.7/site-package/PyOpenGL-Demo/GLUT/\n% python shader-test.py\n```\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u69d8\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u8868\u793a\u3055\u308c\u308b.\n![pyopengl.png](https://qiita-image-store.s3.amazonaws.com/0/16415/a4277fa0-0fd0-411a-6386-d8c56a39e6df.png)\n\n##\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u306e\u3072\u306a\u5f62\u3092\u3064\u304f\u308b\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0,\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0,\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3072\u306a\u5f62\u3092\u3064\u304f\u308b\u3053\u3068\u306b\u3059\u308b.\u57fa\u672c\u7684\u306b\u4e0a\u3067\u4f7f\u3063\u305fshader-test.py\u3092\u30d1\u30af\u308b\u3053\u3068\u306b\u3057\u305f.\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a.\n\n```python:shader-test.py\n#! /usr/bin/env python\nimport numpy as np\nimport sys\nimport time\nimport Image\nimport OpenGL\nOpenGL.ERROR_ON_COPY = True\nfrom OpenGL.GL import *\nfrom OpenGL.GLU import *\nfrom OpenGL.GLUT import *\n\n# PyOpenGL 3.0.1 introduces this convenience module...\nfrom OpenGL.GL.shaders import *\n\nvertices = None\nindices = None\n\ndef InitGL( vertex_shade_code, fragment_shader_code, texture_image ):\n    glClearColor(0.0, 0.0, 0.0, 0.0)\n\n    texture_id = glGenTextures( 1 )\n    glPixelStorei( GL_UNPACK_ALIGNMENT, 1 )\n    glActiveTexture( GL_TEXTURE0 )\n    glBindTexture( GL_TEXTURE_2D, texture_id )\n\n    if texture_image.mode == 'RGB':\n        glTexImage2D( GL_TEXTURE_2D,\n                      0,\n                      4,\n                      texture_image.size[0],\n                      texture_image.size[1],\n                      0,\n                      GL_RGB,\n                      GL_UNSIGNED_BYTE,\n                      texture_image.tostring() )\n    else:\n        glTexImage2D( GL_TEXTURE_2D,\n                      0,\n                      4,\n                      texture_image.size[0],\n                      texture_image.size[1],\n                      0,\n                      GL_RGBA,\n                      GL_UNSIGNED_BYTE,\n                      texture_image.tostring() )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE )\n    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE )\n\n    program = compileProgram(\n        compileShader( vertex_shade_code,GL_VERTEX_SHADER),\n        compileShader( fragment_shader_code,GL_FRAGMENT_SHADER),)\n\n    glUseProgram(program)\n    glUniform1i( glGetUniformLocation( program, \"s_texture\" ), 0 );\n    glUniform1f( glGetUniformLocation( program, \"texture_width\" ), float( texture_image.size[ 0 ] ) )\n    glUniform1f( glGetUniformLocation( program, \"texture_height\" ), float( texture_image.size[ 1 ] ) )\n\n\n    global vertices\n    global indices\n    position_vertices = [ -1.0,  1.0, 0.0,\n                          -1.0, -1.0, 0.0,\n                           1.0, -1.0, 0.0,\n                           1.0,  1.0, 0.0, ]\n    texture_vertices = [ 0.0, 0.0,\n                         0.0, texture_image.size[ 1 ],\n                         texture_image.size[ 0 ], texture_image.size[ 1 ],\n                         texture_image.size[ 0 ], 0.0 ]\n\n    indices = [ 0, 1, 2, 0, 2, 3 ]\n\n    position_loc = glGetAttribLocation( program, 'a_position' )\n    glVertexAttribPointer( position_loc,\n                           3,\n                           GL_FLOAT,\n                           GL_FALSE,\n                           3 * 4,\n                           np.array( position_vertices, np.float32 ) )\n\n    tex_loc = glGetAttribLocation( program, 'a_texCoord' )\n    glVertexAttribPointer( tex_loc,\n                           2,\n                           GL_FLOAT,\n                           GL_FALSE,\n                           2 * 4,\n                           np.array( texture_vertices, np.float32 ) )\n\n    glEnableVertexAttribArray( position_loc )\n    glEnableVertexAttribArray( tex_loc )\n\n\ndef ReSizeGLScene(Width, Height):\n    glViewport(0, 0, Width, Height)\n\n# The main drawing function.\ndef DrawGLScene():\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n\n    glEnable( GL_TEXTURE_2D )\n\n    glDrawElements( GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, np.array( indices, np.uint16 ) )\n    glDisable(GL_TEXTURE_2D)\n\n    glutSwapBuffers()\n\ndef keyPressed(*args):\n    # If escape is pressed, kill everything.\n    if args[0] == '\\x1b':\n        sys.exit()\n\ndef usage():\n    print \"usage:%s vertex_shader_file fragment_shader_file texture_file\" % sys.argv[ 0 ]\n\ndef main():\n    try:\n        vertex_shader_file = sys.argv[ 1 ]\n        fragment_shader_file = sys.argv[ 2 ]\n        texture_file = sys.argv[ 3 ]\n    except IndexError:\n        usage()\n        sys.exit( -1 )\n\n    vertex_shade_code = '\\n'.join( open( vertex_shader_file, 'r' ).readlines() )\n    fragment_shader_code = '\\n'.join( open( fragment_shader_file, 'r' ).readlines() )\n    texture_image = Image.open( texture_file )\n    print texture_image.mode\n    assert texture_image.mode == 'RGBA' or texture_image.mode == 'RGB'\n\n    glutInit(sys.argv)\n\n    if texture_image.mode == 'RGBA':\n        glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH)\n    else:\n        glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)\n\n    window_width,window_height = texture_image.size\n    glutInitWindowSize( window_width, window_height )\n\n    # the window starts at the upper left corner of the screen\n    glutInitWindowPosition(0, 0)\n\n    glutCreateWindow( sys.argv[ 0 ] )\n\n    glutDisplayFunc(DrawGLScene)\n\n    # Uncomment this line to get full screen.\n    #glutFullScreen()\n\n    # When we are doing nothing, redraw the scene.\n    glutIdleFunc(DrawGLScene)\n\n    # Register the function called when our window is resized.\n    glutReshapeFunc(ReSizeGLScene)\n\n    # Register the function called when the keyboard is pressed.\n    glutKeyboardFunc(keyPressed)\n\n    # Initialize our window.\n    InitGL( vertex_shade_code, fragment_shader_code, texture_image )\n\n    # Start Event Processing Engine\n    glutMainLoop()\n\nif __name__ == \"__main__\":\n    print \"Hit ESC key to quit.\"\n    main()\n```\n\u3093\u3067,\u4e0b\u306e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\n\n```glsl:shader.vert\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_texCoord;\nuniform float texture_width;\nuniform float texture_height;\n\nvoid main() {\n    v_texCoord = a_texCoord;\n    gl_Position = a_position;\n}\n```\n\u4e0b\u306e\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\n\n```glsl:shader.frag\nvarying vec2 v_texCoord;\nuniform sampler2D s_texture;\nuniform float texture_width;\nuniform float texture_height;\n\nvoid main() {\n    float t_x = v_texCoord.x / texture_width;\n    float t_y = v_texCoord.y / texture_height;\n    float d_x = 1.0 / texture_width;\n    float d_y = 1.0 / texture_height;\n\n    vec4 v1 = texture2D( s_texture, vec2( t_x, t_y ) + vec2( d_x, 0.0 ) );\n    vec4 v2 = texture2D( s_texture, vec2( t_x, t_y ) - vec2( d_x, 0.0 ) );\n    vec4 v3 = texture2D( s_texture, vec2( t_x, t_y ) + vec2( 0.0, d_y ) );\n    vec4 v4 = texture2D( s_texture, vec2( t_x, t_y ) - vec2( 0.0, d_y ) );\n    gl_FragColor = ( abs( v1 - v2 ) + abs( v3 - v4 ) ) / 2.0;\n}\n```\n\u3053\u3093\u306a\u611f\u3058\n\n```sh\n% python shader-test.py shader.vert shader.frag texture.png\n```\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\n![pygl_result.jpg](https://qiita-image-store.s3.amazonaws.com/0/16415/c116ec03-30d7-af57-3419-68692dba8b17.jpeg)\n", "tags": ["Python", "OpenGL", "pyOpenGL"]}