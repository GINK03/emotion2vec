{"context": " More than 1 year has passed since last update.\u9577\u3044\u3067\u3059\u304c\u30bf\u30a4\u30c8\u30eb\u305d\u306e\u307e\u307e\u306e\u5185\u5bb9\u3067\u3059\uff57\n\ncoincheck\u304b\u3089\u7d04\u5b9a\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\ncoincheck \u306f Bitcoin \u306e\u53d6\u5f15\u6240\u3067\u3001\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u306b\u591a\u6a5f\u80fd\u306aAPI\u3092\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u306e\u4e2d\u3067\u3082\u8a8d\u8a3c\u306a\u3057\u3067\u4f7f\u3048\u308b\u7d04\u5b9a\u5c65\u6b74\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u76f4\u8fd1\u306e\u53d6\u5f15\u984d\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3059\u3002API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306fServant\u3092\u4f7f\u3044\u307e\u3059\u3002\ndata Trade = Trade\n  { amount     :: String\n  , rate       :: Int\n  , order_type :: String\n  , created_at :: String\n  } deriving Generic\n\ninstance FromJSON Trade\n\nTrade\u306f\u7d04\u5b9a\u5c65\u6b74\u306eAPI\u3067\u8fd4\u5374\u3055\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066API\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ntype CoincheckAPI = \"api\" :> \"trades\" :> Get '[JSON] [Trade]\n\ncoincheckAPI :: Proxy CoincheckAPI\ncoincheckAPI = Proxy\n\n\u4eca\u56de\u306f\u7d04\u5b9a\u5c65\u6b74\u3057\u304b\u4f7f\u308f\u306a\u3044\u306e\u3067\u3053\u308c\u3067\u5341\u5206\u3067\u3059\u3002\u4ed6\u306eAPI\u3092\u4f7f\u3044\u305f\u304f\u306a\u3063\u3066\u3082:<|>\u3067\u8ffd\u52a0\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u3002API\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\ngetTrades :: EitherT ServantError IO [Trade]\ngetTrades = client coincheckAPI $ BaseUrl Https \"coincheck.jp\" 443\n\n\u5197\u8ac7\u306e\u3088\u3046\u306b\u77ed\u3044\u3067\u3059\u304c\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\n\nWeb\u30b5\u30fc\u30d0\u30fc\u3067\u753b\u50cf\u3092\u8fd4\u5374\u3059\u308b\nservant-JuicyPixels\u3092\u4f7f\u3044\u307e\u3059\u3002\ntype API = \"trades.png\" :> Get '[PNG] DynamicImage\n\napi :: Proxy API\napi = Proxy\n\n\u3053\u308c\u3067 GET /trades.png \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308c\u3070png\u753b\u50cf\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30b0\u30e9\u30d5\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\n\u3044\u3088\u3044\u3088\u4e00\u756a\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306b\u306fChart\u3092\u4f7f\u3044\u307e\u3059\u3002\nserver :: Server API\nserver = do\n  trades <- bimapEitherT (const err500) id getTrades\n  image <- io $ do\n    let imagePath = \"trades.png\"\n    toFile def imagePath $ plot (line \"price\" $ [[(parseCreatedAt t, rate t) | t <- trades]])\n    readImage imagePath\n  either (const $ left err500) pure image\n    where\n      parseCreatedAt :: Trade -> LocalTime\n      parseCreatedAt trade = parseTimeOrError True defaultTimeLocale (iso8601DateFormat (Just \"%H:%M:%S.000Z\")) (created_at trade)\n\n\u30dd\u30a4\u30f3\u30c8\u306f Servant Client \u304b\u3089 Servant Server \u3078\u306e\u5909\u63db\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u578b\u7684\u306b\u306f EitherT ServantError IO a -> EitherT ServantErr IO a\u3068\u3044\u3046\u5909\u63db\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u3053\u3053\u3067\u306fbimapEitherT :: Functor m => (e -> f) -> (a -> b) -> EitherT e m a -> EitherT f m b\u3092\u5229\u7528\u3057\u3066\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3042\u3068\u306ftoFile\u3067\u30b0\u30e9\u30d5\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3057\u3066readImage\u3067\u66f8\u304d\u3060\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067DynamicImage\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306f\u3053\u3053\u306f\u30d5\u30a1\u30a4\u30eb\u306b\u305b\u305a\u306b\u76f4\u63a5DynamicImage\u306b\u5909\u63db\u3067\u304d\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304cChart\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u77e5\u3063\u3066\u3044\u308b\u4eba\u304c\u3044\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u30a2\u30c9\u30d0\u30a4\u30b9\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3042\u3068\u306f\u5b9f\u884c\u3042\u308b\u306e\u307f\u3067\u3059\u3002\nmain :: IO ()\nmain = do\n  putStrLn \"Listening on 8080\"\n  Warp.run 8080 $ serve api server\n\n\u3053\u308c\u3067 http://localhost:8080/trades.png \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\n\n\u3053\u306e\u3088\u3046\u306b\u30b0\u30e9\u30d5\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059  \n\u6700\u5f8c\u306b cabal \u30d5\u30a1\u30a4\u30eb\u3068\u5168\u3066\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\ncoincheck-trades-image-server.cabal\nname:                coincheck-trades-image-server\nversion:             0.1.0.0\nsynopsis:            Initial project template from stack\nlicense:             BSD3\nbuild-type:          Simple\ncabal-version:       >=1.10\n\nexecutable coincheck-trades-image-server-exe\n  hs-source-dirs:      app\n  main-is:             Main.hs\n  ghc-options:         -threaded -rtsopts -with-rtsopts=-N\n  build-depends:       base\n                     , time\n                     , transformers\n                     , either\n                     , aeson\n                     , servant-server\n                     , servant-client\n                     , Chart\n                     , Chart-cairo\n                     , JuicyPixels\n                     , servant-JuicyPixels\n                     , warp\n  default-language:    Haskell2010\n\n\n\napp/Main.hs\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Main where\n\nimport Codec.Picture\nimport Control.Monad.Trans.Either\nimport Control.Monad.IO.Class\nimport Data.Aeson\nimport Data.Time\nimport Graphics.Rendering.Chart.Easy\nimport Graphics.Rendering.Chart.Backend.Cairo\nimport GHC.Generics\nimport qualified Network.Wai.Handler.Warp as Warp\nimport Servant\nimport Servant.Client\nimport Servant.JuicyPixels\n\ndata Trade = Trade\n  { amount     :: String\n  , rate       :: Int\n  , order_type :: String\n  , created_at :: String\n  } deriving Generic\n\ninstance FromJSON Trade\n\ntype CoincheckAPI = \"api\" :> \"trades\" :> Get '[JSON] [Trade]\n\ncoincheckAPI :: Proxy CoincheckAPI\ncoincheckAPI = Proxy\n\ngetTrades :: EitherT ServantError IO [Trade]\ngetTrades = client coincheckAPI $ BaseUrl Https \"coincheck.jp\" 443\n\ntype API = \"trades.png\" :> Get '[PNG] DynamicImage\n\napi :: Proxy API\napi = Proxy\n\nserver :: Server API\nserver = do\n  trades <- bimapEitherT (const err500) id getTrades\n  image <- liftIO $ do\n    let imagePath = \"trades.png\"\n    toFile def imagePath $ plot (line \"price\" $ [[(parseCreatedAt t, rate t) | t <- trades]])\n    readImage imagePath\n  either (const $ left err500) pure image\n    where\n      parseCreatedAt :: Trade -> LocalTime\n      parseCreatedAt trade = parseTimeOrError True defaultTimeLocale (iso8601DateFormat (Just \"%H:%M:%S.000Z\")) (created_at trade)\n\nmain :: IO ()\nmain = do\n  putStrLn \"Listening on 8080\"\n  Warp.run 8080 $ serve api server\n\n\n\u9577\u3044\u3067\u3059\u304c\u30bf\u30a4\u30c8\u30eb\u305d\u306e\u307e\u307e\u306e\u5185\u5bb9\u3067\u3059\uff57\n\ncoincheck\u304b\u3089\u7d04\u5b9a\u5c65\u6b74\u3092\u53d6\u5f97\u3059\u308b\n=============================\n\ncoincheck \u306f Bitcoin \u306e\u53d6\u5f15\u6240\u3067\u3001\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u306b[\u591a\u6a5f\u80fd\u306aAPI](https://coincheck.jp/documents/exchange/api)\u3092\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u306e\u4e2d\u3067\u3082\u8a8d\u8a3c\u306a\u3057\u3067\u4f7f\u3048\u308b[\u7d04\u5b9a\u5c65\u6b74\u306eAPI](https://coincheck.jp/documents/exchange/api#public-trades)\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u76f4\u8fd1\u306e\u53d6\u5f15\u984d\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3059\u3002API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306fServant\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```hs\ndata Trade = Trade\n  { amount     :: String\n  , rate       :: Int\n  , order_type :: String\n  , created_at :: String\n  } deriving Generic\n\ninstance FromJSON Trade\n```\n\n`Trade`\u306f\u7d04\u5b9a\u5c65\u6b74\u306eAPI\u3067\u8fd4\u5374\u3055\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066API\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```hs\ntype CoincheckAPI = \"api\" :> \"trades\" :> Get '[JSON] [Trade]\n\ncoincheckAPI :: Proxy CoincheckAPI\ncoincheckAPI = Proxy\n```\n\n\u4eca\u56de\u306f\u7d04\u5b9a\u5c65\u6b74\u3057\u304b\u4f7f\u308f\u306a\u3044\u306e\u3067\u3053\u308c\u3067\u5341\u5206\u3067\u3059\u3002\u4ed6\u306eAPI\u3092\u4f7f\u3044\u305f\u304f\u306a\u3063\u3066\u3082`:<|>`\u3067\u8ffd\u52a0\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u3060\u3051\u3067\u3059\u3002API\u3092\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n```hs\ngetTrades :: EitherT ServantError IO [Trade]\ngetTrades = client coincheckAPI $ BaseUrl Https \"coincheck.jp\" 443\n```\n\n\u5197\u8ac7\u306e\u3088\u3046\u306b\u77ed\u3044\u3067\u3059\u304c\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\n\nWeb\u30b5\u30fc\u30d0\u30fc\u3067\u753b\u50cf\u3092\u8fd4\u5374\u3059\u308b\n=========================\n\n[servant-JuicyPixels](https://hackage.haskell.org/package/servant-JuicyPixels)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```hs\ntype API = \"trades.png\" :> Get '[PNG] DynamicImage\n\napi :: Proxy API\napi = Proxy\n```\n\n\u3053\u308c\u3067 `GET /trades.png` \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308c\u3070png\u753b\u50cf\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30b0\u30e9\u30d5\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\n==================\n\n\u3044\u3088\u3044\u3088\u4e00\u756a\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306b\u306f[Chart](http://hackage.haskell.org/package/Chart)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```hs\nserver :: Server API\nserver = do\n  trades <- bimapEitherT (const err500) id getTrades\n  image <- io $ do\n    let imagePath = \"trades.png\"\n    toFile def imagePath $ plot (line \"price\" $ [[(parseCreatedAt t, rate t) | t <- trades]])\n    readImage imagePath\n  either (const $ left err500) pure image\n    where\n      parseCreatedAt :: Trade -> LocalTime\n      parseCreatedAt trade = parseTimeOrError True defaultTimeLocale (iso8601DateFormat (Just \"%H:%M:%S.000Z\")) (created_at trade)\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f Servant Client \u304b\u3089 Servant Server \u3078\u306e\u5909\u63db\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u578b\u7684\u306b\u306f `EitherT ServantError IO a -> EitherT ServantErr IO a`\u3068\u3044\u3046\u5909\u63db\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u3053\u3053\u3067\u306f[`bimapEitherT :: Functor m => (e -> f) -> (a -> b) -> EitherT e m a -> EitherT f m b`](http://hackage.haskell.org/package/either/docs/Control-Monad-Trans-Either.html#v:bimapEitherT)\u3092\u5229\u7528\u3057\u3066\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3042\u3068\u306f`toFile`\u3067\u30b0\u30e9\u30d5\u3092\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3057\u3066`readImage`\u3067\u66f8\u304d\u3060\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067`DynamicImage`\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306f\u3053\u3053\u306f\u30d5\u30a1\u30a4\u30eb\u306b\u305b\u305a\u306b\u76f4\u63a5`DynamicImage`\u306b\u5909\u63db\u3067\u304d\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c`Chart`\u3092\u4f7f\u3063\u3066\u3069\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u77e5\u3063\u3066\u3044\u308b\u4eba\u304c\u3044\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u30a2\u30c9\u30d0\u30a4\u30b9\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u3042\u3068\u306f\u5b9f\u884c\u3042\u308b\u306e\u307f\u3067\u3059\u3002\n\n```hs\nmain :: IO ()\nmain = do\n  putStrLn \"Listening on 8080\"\n  Warp.run 8080 $ serve api server\n```\n\n\u3053\u308c\u3067 <http://localhost:8080/trades.png> \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\n\n![](https://i.gyazo.com/c7a106cd2042a86483b936e72eee4920.png)\n\n\u3053\u306e\u3088\u3046\u306b\u30b0\u30e9\u30d5\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059 :exclamation: \n\n\u6700\u5f8c\u306b `cabal` \u30d5\u30a1\u30a4\u30eb\u3068\u5168\u3066\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```hs:coincheck-trades-image-server.cabal\nname:                coincheck-trades-image-server\nversion:             0.1.0.0\nsynopsis:            Initial project template from stack\nlicense:             BSD3\nbuild-type:          Simple\ncabal-version:       >=1.10\n\nexecutable coincheck-trades-image-server-exe\n  hs-source-dirs:      app\n  main-is:             Main.hs\n  ghc-options:         -threaded -rtsopts -with-rtsopts=-N\n  build-depends:       base\n                     , time\n                     , transformers\n                     , either\n                     , aeson\n                     , servant-server\n                     , servant-client\n                     , Chart\n                     , Chart-cairo\n                     , JuicyPixels\n                     , servant-JuicyPixels\n                     , warp\n  default-language:    Haskell2010\n```\n\n```hs:app/Main.hs\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule Main where\n\nimport Codec.Picture\nimport Control.Monad.Trans.Either\nimport Control.Monad.IO.Class\nimport Data.Aeson\nimport Data.Time\nimport Graphics.Rendering.Chart.Easy\nimport Graphics.Rendering.Chart.Backend.Cairo\nimport GHC.Generics\nimport qualified Network.Wai.Handler.Warp as Warp\nimport Servant\nimport Servant.Client\nimport Servant.JuicyPixels\n\ndata Trade = Trade\n  { amount     :: String\n  , rate       :: Int\n  , order_type :: String\n  , created_at :: String\n  } deriving Generic\n\ninstance FromJSON Trade\n\ntype CoincheckAPI = \"api\" :> \"trades\" :> Get '[JSON] [Trade]\n\ncoincheckAPI :: Proxy CoincheckAPI\ncoincheckAPI = Proxy\n\ngetTrades :: EitherT ServantError IO [Trade]\ngetTrades = client coincheckAPI $ BaseUrl Https \"coincheck.jp\" 443\n\ntype API = \"trades.png\" :> Get '[PNG] DynamicImage\n\napi :: Proxy API\napi = Proxy\n\nserver :: Server API\nserver = do\n  trades <- bimapEitherT (const err500) id getTrades\n  image <- liftIO $ do\n    let imagePath = \"trades.png\"\n    toFile def imagePath $ plot (line \"price\" $ [[(parseCreatedAt t, rate t) | t <- trades]])\n    readImage imagePath\n  either (const $ left err500) pure image\n    where\n      parseCreatedAt :: Trade -> LocalTime\n      parseCreatedAt trade = parseTimeOrError True defaultTimeLocale (iso8601DateFormat (Just \"%H:%M:%S.000Z\")) (created_at trade)\n\nmain :: IO ()\nmain = do\n  putStrLn \"Listening on 8080\"\n  Warp.run 8080 $ serve api server\n```\n", "tags": ["Haskell", "fintech", "Bitcoin"]}