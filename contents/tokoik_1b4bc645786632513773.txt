{"context": "\n\n\u624b\u9806\n\n\n\u8a2d\u5b9a\n\n\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n//\n// Oculus Rift \u95a2\u9023\u306e\u8a2d\u5b9a\n//\n\n// Windows API \u95a2\u9023\u306e\u8a2d\u5b9a\n#if defined(_WIN32)\n#  define NOMINMAX\n#  define GLFW_EXPOSE_NATIVE_WIN32\n#  define GLFW_EXPOSE_NATIVE_WGL\n#  define OVR_OS_WIN32\n#  include <GLFW/glfw3native.h>\n#  if defined(APIENTRY)\n#    undef APIENTRY\n#  endif\n#  define NOTIFY(msg) MessageBox(NULL, TEXT(msg), TEXT(\"\u3059\u307e\u3093\u306e\u3046\"), MB_ICONERROR | MB_OK)\n#else\n#  define NOTIFY(msg) std::cerr << msg << '\\n'\n#endif\n\n// Oculus Rift SDK \u30e9\u30a4\u30d6\u30e9\u30ea (LibOVR) \u306e\u7d44\u307f\u8fbc\u307f\n#include <OVR_CAPI_GL.h>\n#include <Extras/OVR_Math.h>\n\n// Oculus Rift \u306e\u76ee\u306e\u6570\u3068\u8b58\u5225\u5b50\nconst ovrEyeType eyeCount(ovrEye_Count), eyeL(ovrEye_Left), eyeR(ovrEye_Right);\n\n\nOculus Rift CV1 \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n  //\n  // Oculus Rift CV1 \u3092\u4f7f\u3046\u305f\u3081\u306e\u5909\u6570\n  //\n\n  // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\n  const ovrSession session(nullptr);\n\n  // Oculus Rift \u306e\u60c5\u5831\n  ovrHmdDesc hmdDesc;\n\n  // Oculus Rift \u306b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u306e\u756a\u53f7\n  long long frameIndex(0);\n\n  // Oculus Rift \u3078\u306e\u63cf\u753b\u60c5\u5831\n  ovrLayerEyeFov layerData;\n\n  // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30c7\u30d7\u30b9\u30c6\u30af\u30b9\u30c1\u30e3\n  GLuint oculusDepth[eyeCount]{ 0 };\n\n  // Oculus Rift \u8868\u793a\u7528\u306e FBO\n  GLuint oculusFbo[eyeCount]{ 0 };\n\n  // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\n  ovrMirrorTexture mirrorTexture(nullptr);\n\n  // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO\n  GLuint mirrorFbo(0);\n\n\nOculus Rift \u304b\u3089\u53d6\u5f97\u3059\u308b\u60c5\u5831\n  //\n  // OpenGL \u306b\u3088\u308b\u63cf\u753b\u6642\u306b\u53c2\u7167\u3059\u308b\u60c5\u5831\n  //\n\n  // \u8996\u91ce\n  GLfloat fov[eyeCount][4];\n\n  // \u5de6\u53f3\u306e\u76ee\u306e\u982d\u306e\u4f4d\u7f6e\u304b\u3089\u306e\u5909\u4f4d\n  GLfloat offset[eyeCount][3];\n\n  // \u982d\u306e\u4f4d\u7f6e\n  GLfloat position[eyeCount][3];\n\n  // \u982d\u306e\u5411\u304d (\u56db\u5143\u6570)\n  GLfloat orientation[eyeCount][4];\n\n\n\u521d\u671f\u5316\n\nOculus Rift PC SDK (LibOVR) \u306e\u521d\u671f\u5316\n//\n// \u30c7\u30d5\u30a9\u30eb\u30c8\u306e LUID \u3092\u53d6\u5f97\u3059\u308b\n//\nstatic ovrGraphicsLuid GetDefaultAdapterLuid()\n{\n  ovrGraphicsLuid luid = ovrGraphicsLuid();\n\n#if defined(_WIN32)\n  IDXGIFactory* factory = nullptr;\n\n  if (SUCCEEDED(CreateDXGIFactory(IID_PPV_ARGS(&factory))))\n  {\n    IDXGIAdapter* adapter = nullptr;\n\n    if (SUCCEEDED(factory->EnumAdapters(0, &adapter)))\n    {\n      DXGI_ADAPTER_DESC desc;\n\n      adapter->GetDesc(&desc);\n      memcpy(&luid, &desc.AdapterLuid, sizeof(luid));\n      adapter->Release();\n    }\n\n    factory->Release();\n  }\n#endif\n\n  return luid;\n}\n\n//\n// LUID \u3092\u6bd4\u8f03\u3059\u308b\n//\nstatic int Compare(const ovrGraphicsLuid& lhs, const ovrGraphicsLuid& rhs)\n{\n  return memcmp(&lhs, &rhs, sizeof(ovrGraphicsLuid));\n}\n\n  //\n  // Oculus Rift C SDK (LibOVR) \u306e\u521d\u671f\u5316\n  //\n\n  // \u6700\u521d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u3068\u304d\u3060\u3051 true\n  static bool firstTime(true);\n\n  // \u4e00\u5ea6\u3060\u3051\u5b9f\u884c\n  if (firstTime)\n  {\n    // \u5b9f\u884c\u6e08\u307f\u306e\u5370\u3092\u3064\u3051\u308b\n    firstTime = false;\n\n    // GLFW \u3092\u521d\u671f\u5316\u3059\u308b\n    if (glfwInit() == GL_FALSE)\n    {\n      // GLFW \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"GLFW \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\");\n      return;\n    }\n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f GLFW \u3092\u7d42\u4e86\u3059\u308b\n    atexit(glfwTerminate);\n\n    // Oculus Rift (LibOVR) \u3092\u521d\u671f\u5316\u3059\u308b\n    ovrInitParams initParams = { ovrInit_RequestVersion, OVR_MINOR_VERSION, NULL, 0, 0 };\n    if (OVR_FAILURE(ovr_Initialize(&initParams)))\n    {\n      // LibOVR \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"LibOVR \u304c\u521d\u671f\u5316\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f LibOVR \u3092\u7d42\u4e86\u3059\u308b\n    atexit(ovr_Shutdown);\n\n    // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\n    ovrGraphicsLuid luid;\n    if (OVR_FAILURE(ovr_Create(&const_cast<ovrSession>(session), &luid)))\n    {\n      // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u308b\n    if (Compare(luid, GetDefaultAdapterLuid()))\n    {\n      // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\n      NOTIFY(\"OpenGL \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u4ee5\u5916\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // Oculus \u3067\u306f\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\u30e2\u30fc\u30c9\u306b\u3057\u306a\u3044\n    glfwWindowHint(GLFW_DOUBLEBUFFER, GL_FALSE);\n\n    // SRGB \u30e2\u30fc\u30c9\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\n    glfwWindowHint(GLFW_SRGB_CAPABLE, GL_TRUE);\n  }\n\n  // GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u958b\u304f\n  GLFWwindow *const window(glfwCreateWindow(width, height, title, monitor, share));\n  if (!window)\n  {\n    // GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u3051\u306a\u304b\u3063\u305f\n    NOTIFY(\"GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u3051\u307e\u305b\u3093\u3002\");\n    return;\n  }\n\n  //\n  // OpenGL \u306e\u8a2d\u5b9a\n  //\n\n  // sRGB \u30ab\u30e9\u30fc\u30b9\u30da\u30fc\u30b9\u3092\u4f7f\u3046\n  glEnable(GL_FRAMEBUFFER_SRGB);\n\n  // \u8868\u793a\u78ba\u8a8d\u7528\u306b\u80cc\u666f\u8272\u3092\u4ed8\u3051\u3066\u304a\u304f\n  glClearColor(0.2f, 0.3f, 0.4f, 0.0f);\n  //glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\n\nOculus Rift CV1 \u306e\u8a2d\u5b9a\n  //\n  // Oculus Rift \u306e\u8a2d\u5b9a\n  //\n\n  // Oculus Rift \u306b\u8868\u793a\u3059\u308b\u3068\u304d\n  if (session)\n  {\n    // Oculus Rift \u306e\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\n    hmdDesc = ovr_GetHmdDesc(session);\n\n#  if defined(_DEBUG)\n    // Oculus Rift \u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n    std::cout\n      << \"\\nProduct name: \" << hmdDesc.ProductName\n      << \"\\nResolution:   \" << hmdDesc.Resolution.w << \" x \" << hmdDesc.Resolution.h\n      << \"\\nDefault Fov:  (\" << hmdDesc.DefaultEyeFov[ovrEye_Left].LeftTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Left].DownTan\n      << \") - (\" << hmdDesc.DefaultEyeFov[ovrEye_Left].RightTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Left].UpTan\n      << \")\\n              (\" << hmdDesc.DefaultEyeFov[ovrEye_Right].LeftTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Right].DownTan\n      << \") - (\" << hmdDesc.DefaultEyeFov[ovrEye_Right].RightTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Right].UpTan\n      << \")\\nMaximum Fov:  (\" << hmdDesc.MaxEyeFov[ovrEye_Left].LeftTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Left].DownTan\n      << \") - (\" << hmdDesc.MaxEyeFov[ovrEye_Left].RightTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Left].UpTan\n      << \")\\n              (\" << hmdDesc.MaxEyeFov[ovrEye_Right].LeftTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Right].DownTan\n      << \") - (\" << hmdDesc.MaxEyeFov[ovrEye_Right].RightTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Right].UpTan\n      << \")\\n\" << std::endl;\n#  endif\n\n    // Oculus Rift \u306b\u8ee2\u9001\u3059\u308b\u63cf\u753b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\n    layerData.Header.Type = ovrLayerType_EyeFov;\n    layerData.Header.Flags = ovrLayerFlag_TextureOriginAtBottomLeft;   // OpenGL \u306a\u306e\u3067\u5de6\u4e0b\u304c\u539f\u70b9\n\n    // Oculus Rift \u8868\u793a\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    for (int eye = 0; eye < eyeCount; ++eye)\n    {\n      // Oculus Rift \u306e\u8996\u91ce\u3092\u53d6\u5f97\u3059\u308b\n      const auto &eyeFov(hmdDesc.DefaultEyeFov[eye]);\n      layerData.Fov[eye] = eyeFov;\n\n      // \u7247\u76ee\u306e\u8996\u91ce\u3092\u6c42\u3081\u308b\n      fov[eye][0] = -eyeFov.LeftTan;\n      fov[eye][1] =  eyeFov.RightTan;\n      fov[eye][2] = -eyeFov.DownTan;\n      fov[eye][3] =  eyeFov.UpTan;\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30b5\u30a4\u30ba\n      const auto size(ovr_GetFovTextureSize(session, ovrEyeType(eye), eyeFov, 1.0f));\n      layerData.Viewport[eye].Pos = OVR::Vector2i(0, 0);\n      layerData.Viewport[eye].Size = size;\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u306e\u7279\u6027\n      const ovrTextureSwapChainDesc colorDesc =\n      {\n        ovrTexture_2D,                    // Type\n        OVR_FORMAT_R8G8B8A8_UNORM_SRGB,   // Format\n        1,                                // ArraySize\n        size.w,                           // Width\n        size.h,                           // Height\n        1,                                // MipLevels\n        1,                                // SampleCount\n        ovrFalse,                         // StaticImage\n        0, 0\n      };\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n      layerData.ColorTexture[eye] = nullptr;\n      if (OVR_SUCCESS(ovr_CreateTextureSwapChainGL(session, &colorDesc, &layerData.ColorTexture[eye])))\n      {\n        // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n        int length(0);\n        if (OVR_SUCCESS(ovr_GetTextureSwapChainLength(session, layerData.ColorTexture[eye], &length)))\n        {\n          for (int i = 0; i < length; ++i)\n          {\n            GLuint texId;\n            ovr_GetTextureSwapChainBufferGL(session, layerData.ColorTexture[eye], i, &texId);\n            glBindTexture(GL_TEXTURE_2D, texId);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n          }\n        }\n\n        // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30c7\u30d7\u30b9\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n        glGenTextures(1, &oculusDepth[eye]);\n        glBindTexture(GL_TEXTURE_2D, oculusDepth[eye]);\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT32F, size.w, size.h, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n      }\n    }\n\n    // Oculus Rift \u306e\u753b\u9762\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u6c42\u3081\u308b\n    aspect = static_cast<GLfloat>(layerData.Viewport[eyeL].Size.w)\n      / static_cast<GLfloat>(layerData.Viewport[eyeL].Size.h);\n\n    // Oculus Rift \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    glGenFramebuffers(eyeCount, oculusFbo);\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u306e\u7279\u6027\n    const ovrMirrorTextureDesc mirrorDesc =\n    {\n      OVR_FORMAT_R8G8B8A8_UNORM_SRGB,   // Format\n      width,                            // Width\n      height,                           // Height\n      0\n    };\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    if (OVR_SUCCESS(ovr_CreateMirrorTextureGL(session, &mirrorDesc, &mirrorTexture)))\n    {\n      // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3059\u308b\n      GLuint texId;\n      if (OVR_SUCCESS(ovr_GetMirrorTextureBufferGL(session, mirrorTexture, &texId)))\n      {\n        glGenFramebuffers(1, &mirrorFbo);\n        glBindFramebuffer(GL_READ_FRAMEBUFFER, mirrorFbo);\n        glFramebufferTexture2D(GL_READ_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texId, 0);\n        glFramebufferRenderbuffer(GL_READ_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, 0);\n        glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);\n      }\n    }\n\n    // \u59ff\u52e2\u306e\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u304a\u3051\u308b\u5e8a\u306e\u9ad8\u3055\u3092 0 \u306b\u8a2d\u5b9a\u3059\u308b\n    ovr_SetTrackingOriginType(session, ovrTrackingOrigin_FloorLevel);\n  }\n\n\n\u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u524d\u51e6\u7406\n  //\n  // \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u524d\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\n    ovrSessionStatus sessionStatus;\n    ovr_GetSessionStatus(session, &sessionStatus);\n\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30ed\u30fc\u30ba\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n    if (sessionStatus.ShouldQuit) glfwSetWindowShouldClose(window, GL_TRUE);\n\n    // \u73fe\u5728\u306e\u72b6\u614b\u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306e\u539f\u70b9\u306b\u3059\u308b\n    if (sessionStatus.ShouldRecenter) ovr_RecenterTrackingOrigin(session);\n\n    // Oculus Rift \u306b\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u623b\u308b\n    if (!sessionStatus.IsVisible) return false;\n\n    // HmdToEyeOffset \u306a\u3069\u306f\u5b9f\u884c\u6642\u306b\u5909\u5316\u3059\u308b\u306e\u3067\u6bce\u30d5\u30ec\u30fc\u30e0 ovr_GetRenderDesc() \u3067 ovrEyeRenderDesc \u3092\u53d6\u5f97\u3059\u308b\n    const ovrEyeRenderDesc eyeRenderDesc[] =\n    {\n      ovr_GetRenderDesc(session, eyeL, hmdDesc.DefaultEyeFov[0]),\n      ovr_GetRenderDesc(session, eyeR, hmdDesc.DefaultEyeFov[1])\n    };\n\n    // \u6b63\u3057\u3044\u77b3\u5b54\u9593\u9694\u3092\u3082\u3068\u306b\u8996\u70b9\u306e\u59ff\u52e2\u3092\u53d6\u5f97\u3059\u308b\n    const ovrVector3f hmdToEyeOffset[2] =\n    {\n      eyeRenderDesc[0].HmdToEyeOffset,\n      eyeRenderDesc[1].HmdToEyeOffset\n    };\n\n    // Oculus Rift \u306e\u4e21\u76ee\u306e\u982d\u306e\u4f4d\u7f6e\u304b\u3089\u306e\u5909\u4f4d\u3092\u6c42\u3081\u308b\n    mv[0] = ggTranslate(-hmdToEyeOffset[0].x, -hmdToEyeOffset[0].y, -hmdToEyeOffset[0].z);\n    mv[1] = ggTranslate(-hmdToEyeOffset[1].x, -hmdToEyeOffset[1].y, -hmdToEyeOffset[1].z);\n\n    // \u8996\u70b9\u306e\u59ff\u52e2\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    ovr_GetEyePoses(session, frameIndex, ovrTrue, hmdToEyeOffset, layerData.RenderPose, &layerData.SensorSampleTime);\n  }\n\n  // OpenGL \u306b\u3088\u308b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306f true \u306e\u3068\u304d\u306e\u307f\u884c\u3046\n  return true;\n\n\n\u76ee (eye) \u3054\u3068\u306e\u524d\u51e6\u7406\n  //\n  // \u76ee (eye) \u3054\u3068\u306e\u524d\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // Oculus Rift \u306b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b FBO \u306b\u5207\u308a\u66ff\u3048\u308b\n    if (layerData.ColorTexture[eye])\n    {\n      // FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u306b\u4f7f\u3046\u73fe\u5728\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3059\u308b\n      int curIndex;\n      ovr_GetTextureSwapChainCurrentIndex(session, layerData.ColorTexture[eye], &curIndex);\n\n      // FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53d6\u5f97\u3059\u308b\n      GLuint curTexId;\n      ovr_GetTextureSwapChainBufferGL(session, layerData.ColorTexture[eye], curIndex, &curTexId);\n\n      // FBO \u3092\u8a2d\u5b9a\u3059\u308b\n      glBindFramebuffer(GL_FRAMEBUFFER, oculusFbo[eye]);\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, curTexId, 0);\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, oculusDepth[eye], 0);\n\n      // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\n      const auto &vp(layerData.Viewport[eye]);\n      glViewport(vp.Pos.x, vp.Pos.y, vp.Size.w, vp.Size.h);\n\n      // FBO \u3092\u30af\u30ea\u30a2\u3059\u308b\n      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    }\n\n    // Oculus Rift \u306e\u30d8\u30c3\u30c9\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u3088\u308b\u7247\u76ee\u306e\u4f4d\u7f6e\u3092\u6c42\u3081\u308b\n    const auto &p(layerData.RenderPose[eye].Position);\n    position[eye][0] = p.x;\n    position[eye][1] = p.y;\n    position[eye][2] = p.z;\n\n    // Oculus Rift \u306e\u30d8\u30c3\u30c9\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u3088\u308b\u7247\u76ee\u306e\u56de\u8ee2\u3092\u6c42\u3081\u308b\n    const auto &o(layerData.RenderPose[eye].Orientation);\n    orientation[eye][0] = o.x;\n    orientation[eye][1] = o.y;\n    orientation[eye][2] = o.z;\n    orientation[eye][3] = o.w;\n  }\n\n\n\u76ee (eye) \u3054\u3068\u306e\u5f8c\u51e6\u7406\n  //\n  // \u76ee (eye) \u3054\u3068\u306e\u5f8c\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // GL_COLOR_ATTACHMENT0 \u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u304c wglDXUnlockObjectsNV() \u306b\u3088\u3063\u3066\n    // \u30a2\u30f3\u30ed\u30c3\u30af\u3055\u308c\u308b\u305f\u3081\u306b\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u51e6\u7406\u306b\u304a\u3044\u3066\u7121\u52b9\u306a GL_COLOR_ATTACHMENT0 \u304c\n    // FBO \u306b\u7d50\u5408\u3055\u308c\u308b\u306e\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u884c\u3046 (\u3082\u3057\u304b\u3057\u305f\u3089\u4eca\u306f\u4e0d\u8981\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044)\n    glBindFramebuffer(GL_FRAMEBUFFER, oculusFbo[eye]);\n    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 0, 0);\n    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, 0, 0);\n\n    // \u4fdd\u7559\u4e2d\u306e\u5909\u66f4\u3092 layerData.ColorTexture[eye] \u306b\u53cd\u6620\u3057\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3059\u308b\n    ovr_CommitTextureSwapChain(session, layerData.ColorTexture[eye]);\n  }\n\n\n\u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u5f8c\u51e6\u7406\n  //\n  // \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u5f8c\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u63cf\u753b\u30c7\u30fc\u30bf\u3092 Oculus Rift \u306b\u8ee2\u9001\u3059\u308b\n    const auto *const layers(&layerData.Header);\n    if (OVR_FAILURE(ovr_SubmitFrame(session, frameIndex++, nullptr, &layers, 1)))\n    {\n      // \u8ee2\u9001\u306b\u5931\u6557\u3057\u305f\u3089 Oculus Rift \u306e\u8a2d\u5b9a\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3089\u3057\u3044\n      // \u3051\u3069\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3057\u306a\u3044\n    }\n\n    if (/* \u3082\u3057\u30df\u30e9\u30fc\u8868\u793a\u3092\u884c\u3046\u306a\u3089 */)\n    {\n      // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u30df\u30e9\u30fc\u8868\u793a\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u3082\u8ee2\u9001\u3059\u308b\n      glBindFramebuffer(GL_READ_FRAMEBUFFER, mirrorFbo);\n      glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);\n      glBlitFramebuffer(0, height, width, 0, 0, 0, width, height, GL_COLOR_BUFFER_BIT, GL_NEAREST);\n      glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);\n    }\n\n    // \u6b8b\u3063\u3066\u3044\u308b OpenGL \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n    glFlush();\n  }\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306e\u51e6\u7406\n  //\n  // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306e\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    if (mirrorFbo) glDeleteFramebuffers(1, &mirrorFbo);\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u306b\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n    if (mirrorTexture) ovr_DestroyMirrorTexture(session, mirrorTexture);\n\n    // Oculus Rift \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    glDeleteFramebuffers(eyeCount, oculusFbo);\n\n    // Oculus Rift \u8868\u793a\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    for (int eye = 0; eye < eyeCount; ++eye)\n    {\n      // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n      if (layerData.ColorTexture[eye])\n      {\n        ovr_DestroyTextureSwapChain(session, layerData.ColorTexture[eye]);\n        layerData.ColorTexture[eye] = nullptr;\n      }\n\n      // \u30c7\u30d7\u30b9\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n      glDeleteTextures(1, &oculusDepth[eye]);\n      oculusDepth[eye] = 0;\n    }\n\n    // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7834\u68c4\u3059\u308b\n    ovr_Destroy(session);\n    const_cast<ovrSession>(session) = nullptr;\n  }\n\n## \u624b\u9806\n\n![oculus.png](https://qiita-image-store.s3.amazonaws.com/0/100289/69b42ed2-5565-053a-9356-cd6cefb9e47a.png)\n\n## \u8a2d\u5b9a\n\n### \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\n```cpp\n//\n// Oculus Rift \u95a2\u9023\u306e\u8a2d\u5b9a\n//\n\n// Windows API \u95a2\u9023\u306e\u8a2d\u5b9a\n#if defined(_WIN32)\n#  define NOMINMAX\n#  define GLFW_EXPOSE_NATIVE_WIN32\n#  define GLFW_EXPOSE_NATIVE_WGL\n#  define OVR_OS_WIN32\n#  include <GLFW/glfw3native.h>\n#  if defined(APIENTRY)\n#    undef APIENTRY\n#  endif\n#  define NOTIFY(msg) MessageBox(NULL, TEXT(msg), TEXT(\"\u3059\u307e\u3093\u306e\u3046\"), MB_ICONERROR | MB_OK)\n#else\n#  define NOTIFY(msg) std::cerr << msg << '\\n'\n#endif\n\n// Oculus Rift SDK \u30e9\u30a4\u30d6\u30e9\u30ea (LibOVR) \u306e\u7d44\u307f\u8fbc\u307f\n#include <OVR_CAPI_GL.h>\n#include <Extras/OVR_Math.h>\n\n// Oculus Rift \u306e\u76ee\u306e\u6570\u3068\u8b58\u5225\u5b50\nconst ovrEyeType eyeCount(ovrEye_Count), eyeL(ovrEye_Left), eyeR(ovrEye_Right);\n```\n\n### Oculus Rift CV1 \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n\n```cpp\n  //\n  // Oculus Rift CV1 \u3092\u4f7f\u3046\u305f\u3081\u306e\u5909\u6570\n  //\n\n  // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\n  const ovrSession session(nullptr);\n\n  // Oculus Rift \u306e\u60c5\u5831\n  ovrHmdDesc hmdDesc;\n\n  // Oculus Rift \u306b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u306e\u756a\u53f7\n  long long frameIndex(0);\n\n  // Oculus Rift \u3078\u306e\u63cf\u753b\u60c5\u5831\n  ovrLayerEyeFov layerData;\n\n  // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30c7\u30d7\u30b9\u30c6\u30af\u30b9\u30c1\u30e3\n  GLuint oculusDepth[eyeCount]{ 0 };\n\n  // Oculus Rift \u8868\u793a\u7528\u306e FBO\n  GLuint oculusFbo[eyeCount]{ 0 };\n\n  // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30c6\u30af\u30b9\u30c1\u30e3\n  ovrMirrorTexture mirrorTexture(nullptr);\n\n  // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO\n  GLuint mirrorFbo(0);\n```\n\n### Oculus Rift \u304b\u3089\u53d6\u5f97\u3059\u308b\u60c5\u5831\n\n```cpp\n  //\n  // OpenGL \u306b\u3088\u308b\u63cf\u753b\u6642\u306b\u53c2\u7167\u3059\u308b\u60c5\u5831\n  //\n\n  // \u8996\u91ce\n  GLfloat fov[eyeCount][4];\n\n  // \u5de6\u53f3\u306e\u76ee\u306e\u982d\u306e\u4f4d\u7f6e\u304b\u3089\u306e\u5909\u4f4d\n  GLfloat offset[eyeCount][3];\n\n  // \u982d\u306e\u4f4d\u7f6e\n  GLfloat position[eyeCount][3];\n\n  // \u982d\u306e\u5411\u304d (\u56db\u5143\u6570)\n  GLfloat orientation[eyeCount][4];\n```\n\n## \u521d\u671f\u5316\n\n### Oculus Rift PC SDK (LibOVR) \u306e\u521d\u671f\u5316\n\n```cpp\n//\n// \u30c7\u30d5\u30a9\u30eb\u30c8\u306e LUID \u3092\u53d6\u5f97\u3059\u308b\n//\nstatic ovrGraphicsLuid GetDefaultAdapterLuid()\n{\n  ovrGraphicsLuid luid = ovrGraphicsLuid();\n\n#if defined(_WIN32)\n  IDXGIFactory* factory = nullptr;\n\n  if (SUCCEEDED(CreateDXGIFactory(IID_PPV_ARGS(&factory))))\n  {\n    IDXGIAdapter* adapter = nullptr;\n\n    if (SUCCEEDED(factory->EnumAdapters(0, &adapter)))\n    {\n      DXGI_ADAPTER_DESC desc;\n\n      adapter->GetDesc(&desc);\n      memcpy(&luid, &desc.AdapterLuid, sizeof(luid));\n      adapter->Release();\n    }\n\n    factory->Release();\n  }\n#endif\n\n  return luid;\n}\n```\n\n```cpp\n//\n// LUID \u3092\u6bd4\u8f03\u3059\u308b\n//\nstatic int Compare(const ovrGraphicsLuid& lhs, const ovrGraphicsLuid& rhs)\n{\n  return memcmp(&lhs, &rhs, sizeof(ovrGraphicsLuid));\n}\n```\n\n```cpp\n  //\n  // Oculus Rift C SDK (LibOVR) \u306e\u521d\u671f\u5316\n  //\n\n  // \u6700\u521d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u3068\u304d\u3060\u3051 true\n  static bool firstTime(true);\n\n  // \u4e00\u5ea6\u3060\u3051\u5b9f\u884c\n  if (firstTime)\n  {\n    // \u5b9f\u884c\u6e08\u307f\u306e\u5370\u3092\u3064\u3051\u308b\n    firstTime = false;\n\n    // GLFW \u3092\u521d\u671f\u5316\u3059\u308b\n    if (glfwInit() == GL_FALSE)\n    {\n      // GLFW \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"GLFW \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\");\n      return;\n    }\n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f GLFW \u3092\u7d42\u4e86\u3059\u308b\n    atexit(glfwTerminate);\n\n    // Oculus Rift (LibOVR) \u3092\u521d\u671f\u5316\u3059\u308b\n    ovrInitParams initParams = { ovrInit_RequestVersion, OVR_MINOR_VERSION, NULL, 0, 0 };\n    if (OVR_FAILURE(ovr_Initialize(&initParams)))\n    {\n      // LibOVR \u306e\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"LibOVR \u304c\u521d\u671f\u5316\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306b\u306f LibOVR \u3092\u7d42\u4e86\u3059\u308b\n    atexit(ovr_Shutdown);\n\n    // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\n    ovrGraphicsLuid luid;\n    if (OVR_FAILURE(ovr_Create(&const_cast<ovrSession>(session), &luid)))\n    {\n      // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\u306b\u5931\u6557\u3057\u305f\n      NOTIFY(\"Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u308b\n    if (Compare(luid, GetDefaultAdapterLuid()))\n    {\n      // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\n      NOTIFY(\"OpenGL \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30a2\u30c0\u30d7\u30bf\u4ee5\u5916\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\");\n      return;\n    }\n\n    // Oculus \u3067\u306f\u30c0\u30d6\u30eb\u30d0\u30c3\u30d5\u30a1\u30e2\u30fc\u30c9\u306b\u3057\u306a\u3044\n    glfwWindowHint(GLFW_DOUBLEBUFFER, GL_FALSE);\n\n    // SRGB \u30e2\u30fc\u30c9\u3067\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\n    glfwWindowHint(GLFW_SRGB_CAPABLE, GL_TRUE);\n  }\n\n  // GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u958b\u304f\n  GLFWwindow *const window(glfwCreateWindow(width, height, title, monitor, share));\n  if (!window)\n  {\n    // GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u3051\u306a\u304b\u3063\u305f\n    NOTIFY(\"GLFW \u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u3051\u307e\u305b\u3093\u3002\");\n    return;\n  }\n\n  //\n  // OpenGL \u306e\u8a2d\u5b9a\n  //\n\n  // sRGB \u30ab\u30e9\u30fc\u30b9\u30da\u30fc\u30b9\u3092\u4f7f\u3046\n  glEnable(GL_FRAMEBUFFER_SRGB);\n\n  // \u8868\u793a\u78ba\u8a8d\u7528\u306b\u80cc\u666f\u8272\u3092\u4ed8\u3051\u3066\u304a\u304f\n  glClearColor(0.2f, 0.3f, 0.4f, 0.0f);\n  //glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n```\n\n### Oculus Rift CV1 \u306e\u8a2d\u5b9a\n\n```cpp\n  //\n  // Oculus Rift \u306e\u8a2d\u5b9a\n  //\n\n  // Oculus Rift \u306b\u8868\u793a\u3059\u308b\u3068\u304d\n  if (session)\n  {\n    // Oculus Rift \u306e\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\n    hmdDesc = ovr_GetHmdDesc(session);\n\n#  if defined(_DEBUG)\n    // Oculus Rift \u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n    std::cout\n      << \"\\nProduct name: \" << hmdDesc.ProductName\n      << \"\\nResolution:   \" << hmdDesc.Resolution.w << \" x \" << hmdDesc.Resolution.h\n      << \"\\nDefault Fov:  (\" << hmdDesc.DefaultEyeFov[ovrEye_Left].LeftTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Left].DownTan\n      << \") - (\" << hmdDesc.DefaultEyeFov[ovrEye_Left].RightTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Left].UpTan\n      << \")\\n              (\" << hmdDesc.DefaultEyeFov[ovrEye_Right].LeftTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Right].DownTan\n      << \") - (\" << hmdDesc.DefaultEyeFov[ovrEye_Right].RightTan\n      << \",\" << hmdDesc.DefaultEyeFov[ovrEye_Right].UpTan\n      << \")\\nMaximum Fov:  (\" << hmdDesc.MaxEyeFov[ovrEye_Left].LeftTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Left].DownTan\n      << \") - (\" << hmdDesc.MaxEyeFov[ovrEye_Left].RightTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Left].UpTan\n      << \")\\n              (\" << hmdDesc.MaxEyeFov[ovrEye_Right].LeftTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Right].DownTan\n      << \") - (\" << hmdDesc.MaxEyeFov[ovrEye_Right].RightTan\n      << \",\" << hmdDesc.MaxEyeFov[ovrEye_Right].UpTan\n      << \")\\n\" << std::endl;\n#  endif\n\n    // Oculus Rift \u306b\u8ee2\u9001\u3059\u308b\u63cf\u753b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\n    layerData.Header.Type = ovrLayerType_EyeFov;\n    layerData.Header.Flags = ovrLayerFlag_TextureOriginAtBottomLeft;   // OpenGL \u306a\u306e\u3067\u5de6\u4e0b\u304c\u539f\u70b9\n\n    // Oculus Rift \u8868\u793a\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    for (int eye = 0; eye < eyeCount; ++eye)\n    {\n      // Oculus Rift \u306e\u8996\u91ce\u3092\u53d6\u5f97\u3059\u308b\n      const auto &eyeFov(hmdDesc.DefaultEyeFov[eye]);\n      layerData.Fov[eye] = eyeFov;\n\n      // \u7247\u76ee\u306e\u8996\u91ce\u3092\u6c42\u3081\u308b\n      fov[eye][0] = -eyeFov.LeftTan;\n      fov[eye][1] =  eyeFov.RightTan;\n      fov[eye][2] = -eyeFov.DownTan;\n      fov[eye][3] =  eyeFov.UpTan;\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30b5\u30a4\u30ba\n      const auto size(ovr_GetFovTextureSize(session, ovrEyeType(eye), eyeFov, 1.0f));\n      layerData.Viewport[eye].Pos = OVR::Vector2i(0, 0);\n      layerData.Viewport[eye].Size = size;\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u306e\u7279\u6027\n      const ovrTextureSwapChainDesc colorDesc =\n      {\n        ovrTexture_2D,                    // Type\n        OVR_FORMAT_R8G8B8A8_UNORM_SRGB,   // Format\n        1,                                // ArraySize\n        size.w,                           // Width\n        size.h,                           // Height\n        1,                                // MipLevels\n        1,                                // SampleCount\n        ovrFalse,                         // StaticImage\n        0, 0\n      };\n\n      // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n      layerData.ColorTexture[eye] = nullptr;\n      if (OVR_SUCCESS(ovr_CreateTextureSwapChainGL(session, &colorDesc, &layerData.ColorTexture[eye])))\n      {\n        // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n        int length(0);\n        if (OVR_SUCCESS(ovr_GetTextureSwapChainLength(session, layerData.ColorTexture[eye], &length)))\n        {\n          for (int i = 0; i < length; ++i)\n          {\n            GLuint texId;\n            ovr_GetTextureSwapChainBufferGL(session, layerData.ColorTexture[eye], i, &texId);\n            glBindTexture(GL_TEXTURE_2D, texId);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n          }\n        }\n\n        // Oculus Rift \u8868\u793a\u7528\u306e FBO \u306e\u30c7\u30d7\u30b9\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\n        glGenTextures(1, &oculusDepth[eye]);\n        glBindTexture(GL_TEXTURE_2D, oculusDepth[eye]);\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT32F, size.w, size.h, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);\n      }\n    }\n\n    // Oculus Rift \u306e\u753b\u9762\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u6c42\u3081\u308b\n    aspect = static_cast<GLfloat>(layerData.Viewport[eyeL].Size.w)\n      / static_cast<GLfloat>(layerData.Viewport[eyeL].Size.h);\n\n    // Oculus Rift \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    glGenFramebuffers(eyeCount, oculusFbo);\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u30bb\u30c3\u30c8\u306e\u7279\u6027\n    const ovrMirrorTextureDesc mirrorDesc =\n    {\n      OVR_FORMAT_R8G8B8A8_UNORM_SRGB,   // Format\n      width,                            // Width\n      height,                           // Height\n      0\n    };\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u3092\u4f5c\u6210\u3059\u308b\n    if (OVR_SUCCESS(ovr_CreateMirrorTextureGL(session, &mirrorDesc, &mirrorTexture)))\n    {\n      // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u6210\u3059\u308b\n      GLuint texId;\n      if (OVR_SUCCESS(ovr_GetMirrorTextureBufferGL(session, mirrorTexture, &texId)))\n      {\n        glGenFramebuffers(1, &mirrorFbo);\n        glBindFramebuffer(GL_READ_FRAMEBUFFER, mirrorFbo);\n        glFramebufferTexture2D(GL_READ_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texId, 0);\n        glFramebufferRenderbuffer(GL_READ_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, 0);\n        glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);\n      }\n    }\n\n    // \u59ff\u52e2\u306e\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u304a\u3051\u308b\u5e8a\u306e\u9ad8\u3055\u3092 0 \u306b\u8a2d\u5b9a\u3059\u308b\n    ovr_SetTrackingOriginType(session, ovrTrackingOrigin_FloorLevel);\n  }\n```\n\n## \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u524d\u51e6\u7406\n\n```cpp\n  //\n  // \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u524d\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\n    ovrSessionStatus sessionStatus;\n    ovr_GetSessionStatus(session, &sessionStatus);\n\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3092\u8981\u6c42\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u30af\u30ed\u30fc\u30ba\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n    if (sessionStatus.ShouldQuit) glfwSetWindowShouldClose(window, GL_TRUE);\n\n    // \u73fe\u5728\u306e\u72b6\u614b\u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306e\u539f\u70b9\u306b\u3059\u308b\n    if (sessionStatus.ShouldRecenter) ovr_RecenterTrackingOrigin(session);\n\n    // Oculus Rift \u306b\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306f\u623b\u308b\n    if (!sessionStatus.IsVisible) return false;\n\n    // HmdToEyeOffset \u306a\u3069\u306f\u5b9f\u884c\u6642\u306b\u5909\u5316\u3059\u308b\u306e\u3067\u6bce\u30d5\u30ec\u30fc\u30e0 ovr_GetRenderDesc() \u3067 ovrEyeRenderDesc \u3092\u53d6\u5f97\u3059\u308b\n    const ovrEyeRenderDesc eyeRenderDesc[] =\n    {\n      ovr_GetRenderDesc(session, eyeL, hmdDesc.DefaultEyeFov[0]),\n      ovr_GetRenderDesc(session, eyeR, hmdDesc.DefaultEyeFov[1])\n    };\n\n    // \u6b63\u3057\u3044\u77b3\u5b54\u9593\u9694\u3092\u3082\u3068\u306b\u8996\u70b9\u306e\u59ff\u52e2\u3092\u53d6\u5f97\u3059\u308b\n    const ovrVector3f hmdToEyeOffset[2] =\n    {\n      eyeRenderDesc[0].HmdToEyeOffset,\n      eyeRenderDesc[1].HmdToEyeOffset\n    };\n\n    // Oculus Rift \u306e\u4e21\u76ee\u306e\u982d\u306e\u4f4d\u7f6e\u304b\u3089\u306e\u5909\u4f4d\u3092\u6c42\u3081\u308b\n    mv[0] = ggTranslate(-hmdToEyeOffset[0].x, -hmdToEyeOffset[0].y, -hmdToEyeOffset[0].z);\n    mv[1] = ggTranslate(-hmdToEyeOffset[1].x, -hmdToEyeOffset[1].y, -hmdToEyeOffset[1].z);\n\n    // \u8996\u70b9\u306e\u59ff\u52e2\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    ovr_GetEyePoses(session, frameIndex, ovrTrue, hmdToEyeOffset, layerData.RenderPose, &layerData.SensorSampleTime);\n  }\n\n  // OpenGL \u306b\u3088\u308b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306f true \u306e\u3068\u304d\u306e\u307f\u884c\u3046\n  return true;\n```\n\n## \u76ee (eye) \u3054\u3068\u306e\u524d\u51e6\u7406\n\n```cpp\n  //\n  // \u76ee (eye) \u3054\u3068\u306e\u524d\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // Oculus Rift \u306b\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b FBO \u306b\u5207\u308a\u66ff\u3048\u308b\n    if (layerData.ColorTexture[eye])\n    {\n      // FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u306b\u4f7f\u3046\u73fe\u5728\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3059\u308b\n      int curIndex;\n      ovr_GetTextureSwapChainCurrentIndex(session, layerData.ColorTexture[eye], &curIndex);\n\n      // FBO \u306e\u30ab\u30e9\u30fc\u30d0\u30c3\u30d5\u30a1\u306b\u4f7f\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u53d6\u5f97\u3059\u308b\n      GLuint curTexId;\n      ovr_GetTextureSwapChainBufferGL(session, layerData.ColorTexture[eye], curIndex, &curTexId);\n\n      // FBO \u3092\u8a2d\u5b9a\u3059\u308b\n      glBindFramebuffer(GL_FRAMEBUFFER, oculusFbo[eye]);\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, curTexId, 0);\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, oculusDepth[eye], 0);\n\n      // \u30d3\u30e5\u30fc\u30dd\u30fc\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\n      const auto &vp(layerData.Viewport[eye]);\n      glViewport(vp.Pos.x, vp.Pos.y, vp.Size.w, vp.Size.h);\n\n      // FBO \u3092\u30af\u30ea\u30a2\u3059\u308b\n      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    }\n\n    // Oculus Rift \u306e\u30d8\u30c3\u30c9\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u3088\u308b\u7247\u76ee\u306e\u4f4d\u7f6e\u3092\u6c42\u3081\u308b\n    const auto &p(layerData.RenderPose[eye].Position);\n    position[eye][0] = p.x;\n    position[eye][1] = p.y;\n    position[eye][2] = p.z;\n\n    // Oculus Rift \u306e\u30d8\u30c3\u30c9\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306b\u3088\u308b\u7247\u76ee\u306e\u56de\u8ee2\u3092\u6c42\u3081\u308b\n    const auto &o(layerData.RenderPose[eye].Orientation);\n    orientation[eye][0] = o.x;\n    orientation[eye][1] = o.y;\n    orientation[eye][2] = o.z;\n    orientation[eye][3] = o.w;\n  }\n```\n\n## \u76ee (eye) \u3054\u3068\u306e\u5f8c\u51e6\u7406\n\n```cpp\n  //\n  // \u76ee (eye) \u3054\u3068\u306e\u5f8c\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // GL_COLOR_ATTACHMENT0 \u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u304c wglDXUnlockObjectsNV() \u306b\u3088\u3063\u3066\n    // \u30a2\u30f3\u30ed\u30c3\u30af\u3055\u308c\u308b\u305f\u3081\u306b\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u51e6\u7406\u306b\u304a\u3044\u3066\u7121\u52b9\u306a GL_COLOR_ATTACHMENT0 \u304c\n    // FBO \u306b\u7d50\u5408\u3055\u308c\u308b\u306e\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u884c\u3046 (\u3082\u3057\u304b\u3057\u305f\u3089\u4eca\u306f\u4e0d\u8981\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044)\n    glBindFramebuffer(GL_FRAMEBUFFER, oculusFbo[eye]);\n    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, 0, 0);\n    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, 0, 0);\n\n    // \u4fdd\u7559\u4e2d\u306e\u5909\u66f4\u3092 layerData.ColorTexture[eye] \u306b\u53cd\u6620\u3057\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3059\u308b\n    ovr_CommitTextureSwapChain(session, layerData.ColorTexture[eye]);\n  }\n```\n\n## \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u5f8c\u51e6\u7406\n\n```cpp\n  //\n  // \u4e21\u65b9\u306e\u76ee\u306b\u5171\u901a\u306e\u5f8c\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u63cf\u753b\u30c7\u30fc\u30bf\u3092 Oculus Rift \u306b\u8ee2\u9001\u3059\u308b\n    const auto *const layers(&layerData.Header);\n    if (OVR_FAILURE(ovr_SubmitFrame(session, frameIndex++, nullptr, &layers, 1)))\n    {\n      // \u8ee2\u9001\u306b\u5931\u6557\u3057\u305f\u3089 Oculus Rift \u306e\u8a2d\u5b9a\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3089\u3057\u3044\n      // \u3051\u3069\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3057\u306a\u3044\n    }\n\n    if (/* \u3082\u3057\u30df\u30e9\u30fc\u8868\u793a\u3092\u884c\u3046\u306a\u3089 */)\n    {\n      // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u30df\u30e9\u30fc\u8868\u793a\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306b\u3082\u8ee2\u9001\u3059\u308b\n      glBindFramebuffer(GL_READ_FRAMEBUFFER, mirrorFbo);\n      glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);\n      glBlitFramebuffer(0, height, width, 0, 0, 0, width, height, GL_COLOR_BUFFER_BIT, GL_NEAREST);\n      glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);\n    }\n\n    // \u6b8b\u3063\u3066\u3044\u308b OpenGL \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\n    glFlush();\n  }\n```\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306e\u51e6\u7406\n\n```cpp\n  //\n  // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u306e\u51e6\u7406\n  //\n\n  // Oculus Rift \u4f7f\u7528\u6642\n  if (session)\n  {\n    // \u30df\u30e9\u30fc\u8868\u793a\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    if (mirrorFbo) glDeleteFramebuffers(1, &mirrorFbo);\n\n    // \u30df\u30e9\u30fc\u8868\u793a\u306b\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n    if (mirrorTexture) ovr_DestroyMirrorTexture(session, mirrorTexture);\n\n    // Oculus Rift \u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    glDeleteFramebuffers(eyeCount, oculusFbo);\n\n    // Oculus Rift \u8868\u793a\u7528\u306e FBO \u3092\u524a\u9664\u3059\u308b\n    for (int eye = 0; eye < eyeCount; ++eye)\n    {\n      // \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n      if (layerData.ColorTexture[eye])\n      {\n        ovr_DestroyTextureSwapChain(session, layerData.ColorTexture[eye]);\n        layerData.ColorTexture[eye] = nullptr;\n      }\n\n      // \u30c7\u30d7\u30b9\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3063\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u7834\u68c4\u3059\u308b\n      glDeleteTextures(1, &oculusDepth[eye]);\n      oculusDepth[eye] = 0;\n    }\n\n    // Oculus Rift \u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7834\u68c4\u3059\u308b\n    ovr_Destroy(session);\n    const_cast<ovrSession>(session) = nullptr;\n  }\n```\n", "tags": ["OpenGL", "GLFW", "Oculus", "OculusRift", "OculusRiftCV1"]}