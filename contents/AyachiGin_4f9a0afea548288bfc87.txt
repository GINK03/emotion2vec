{"tags": ["Haskell", "Binary"], "context": "\n\n\u6982\u8981\nbinary\u30d1\u30c3\u30b1\u30fc\u30b8\u306eGet\u3068runGet\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nParsec\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306a\u3089\u611f\u899a\u7684\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066MMD\u306e\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3067\u3042\u308bpmx\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8abf\u3079\u305f\u3044\u3068\u601d\u3044\u307e\u3059\n\npmx\u306e\u4ed5\u69d8\npmx\u306e\u4ed5\u69d8\u306f\u306a\u3093\u3068pmx\u30a8\u30c7\u30a3\u30bf\u306b\u540c\u68b1\u3055\u308c\u3066\u307e\u3059\u3002\n\u3068\u3042\u308b\u5de5\u623f\u3067pmx\u30a8\u30c7\u30a3\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u3089Lib/PMX\u4ed5\u69d8/PMX\u4ed5\u69d8.txt\u306b\u3042\u308a\u307e\u3059\u3002\n154\u884c\u76ee\u3042\u305f\u308a\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u901a\u308a\u3001pmx\u306e\u30d8\u30c3\u30c0\u306f\"PMX \"\u3068\u3044\u3046ASCII\u6587\u5b57\u5217(4\u30d0\u30a4\u30c8)\u306e\u5f8c\u306b\u30f4\u30a1\u30fc\u30b8\u30e7\u30f3\u304cfloat(4\u30d0\u30a4\u30c8)\u3067\u66f8\u3044\u3066\u3042\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3053\u308c\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\uff01\n\nHaskell\u306e\u65b9\u306e\u6e96\u5099\nstack new pmx simple\u3057\u3066pmx.cabal\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u3067\n\npmx.cabal\nname:                pmx\nversion:             0.1.0.0\nsynopsis:            Simple project template from stack\ndescription:         Please see README.md\nhomepage:            https://github.com/githubuser/pmx#readme\nlicense:             BSD3\nlicense-file:        LICENSE\nauthor:              Author name here\nmaintainer:          example@example.com\ncopyright:           2016 Author name here\ncategory:            Web\nbuild-type:          Simple\ncabal-version:       >=1.10\n\nexecutable pmx\n  hs-source-dirs:      src\n  main-is:             Main.hs\n  default-language:    Haskell2010\n  build-depends:       base >= 4.7 && < 5\n                     , bytestring\n                     , binary >= 0.8.4.0\n\n\n\n\n\u8aad\u307f\u8fbc\u307f\n\n\u30b3\u30fc\u30c9\n\u5927\u4f53\u898b\u305f\u3089\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5165\u529b\u3055\u308c\u305f\u540d\u524d\u306epmx\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u30d1\u30fc\u30b9\u3057\u3066PmxHeader\u578b\u306b\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u3002\nGet\u306fMonad\u3068Applicative\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067Parsec\u3067\u30d1\u30fc\u30b5\u66f8\u304f\u307f\u305f\u3044\u306a\u611f\u899a\u3067\u66f8\u3051\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066pmx\u306f\u30d0\u30a4\u30c8\u9806\u304c\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u306e\u306bgetFloatle\u3092\u4f7f\u3063\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nMain.hs\nmodule Main where\n\nimport Control.Applicative ()\nimport System.IO\nimport qualified Data.ByteString.Lazy as BL\nimport qualified Data.ByteString as B\nimport Data.Binary.Get\nimport Data.Char (chr)\n\ndata PmxHeader = PmxHeader { getPmxVersion :: Float\n                           } deriving (Show, Read)\n\nmain :: IO ()\nmain = do\n  putStr \">> \"\n  hFlush stdout\n  s <- getLine\n  readPmx s\n\nreadPmx :: String -> IO ()\nreadPmx f = do\n    rh <- openFile f ReadMode\n    i  <- BL.hGetContents rh\n    let d = runGet parsePmxHeader i\n    print d\n\nparsePmxHeader :: Get PmxHeader\nparsePmxHeader = PmxHeader <$> parsePmxVersion\n\nparsePmxVersion :: Get Float\nparsePmxVersion = do\n  s <- getString 4\n  if s == \"PMX \" then getFloat else return 1.0\n\ngetString :: Int -> Get String\ngetString n = map (chr . fromEnum) . B.unpack <$> getByteString n\n\ngetInt :: Get Int\ngetInt = fromIntegral <$> getWord32le\n\ngetFloat :: Get Float\ngetFloat = getFloatle\n\n\n\n\u5b9f\u884c\u7d50\u679c\n$ stack build && stack exec pmx\nSetting codepage to UTF-8 (65001) to ensure correct output from GHC\n>> a.pmx\nPmxHeader {getPmxVersion = 2.0}\n\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n# \u6982\u8981\nbinary\u30d1\u30c3\u30b1\u30fc\u30b8\u306eGet\u3068runGet\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nParsec\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306a\u3089\u611f\u899a\u7684\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066MMD\u306e\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3067\u3042\u308bpmx\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8abf\u3079\u305f\u3044\u3068\u601d\u3044\u307e\u3059\n\n## pmx\u306e\u4ed5\u69d8\npmx\u306e\u4ed5\u69d8\u306f\u306a\u3093\u3068pmx\u30a8\u30c7\u30a3\u30bf\u306b\u540c\u68b1\u3055\u308c\u3066\u307e\u3059\u3002\n[\u3068\u3042\u308b\u5de5\u623f](http://kkhk22.seesaa.net/article/282933265.html)\u3067pmx\u30a8\u30c7\u30a3\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u3089Lib/PMX\u4ed5\u69d8/PMX\u4ed5\u69d8.txt\u306b\u3042\u308a\u307e\u3059\u3002\n\n154\u884c\u76ee\u3042\u305f\u308a\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u901a\u308a\u3001pmx\u306e\u30d8\u30c3\u30c0\u306f\"PMX \"\u3068\u3044\u3046ASCII\u6587\u5b57\u5217(4\u30d0\u30a4\u30c8)\u306e\u5f8c\u306b\u30f4\u30a1\u30fc\u30b8\u30e7\u30f3\u304cfloat(4\u30d0\u30a4\u30c8)\u3067\u66f8\u3044\u3066\u3042\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3053\u308c\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\uff01\n\n## Haskell\u306e\u65b9\u306e\u6e96\u5099\n``` stack new pmx simple ```\u3057\u3066pmx.cabal\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u3067\n\n```pmx.cabal\nname:                pmx\nversion:             0.1.0.0\nsynopsis:            Simple project template from stack\ndescription:         Please see README.md\nhomepage:            https://github.com/githubuser/pmx#readme\nlicense:             BSD3\nlicense-file:        LICENSE\nauthor:              Author name here\nmaintainer:          example@example.com\ncopyright:           2016 Author name here\ncategory:            Web\nbuild-type:          Simple\ncabal-version:       >=1.10\n\nexecutable pmx\n  hs-source-dirs:      src\n  main-is:             Main.hs\n  default-language:    Haskell2010\n  build-depends:       base >= 4.7 && < 5\n                     , bytestring\n                     , binary >= 0.8.4.0\n\n```\n\n## \u8aad\u307f\u8fbc\u307f\n\n### \u30b3\u30fc\u30c9\n\n\u5927\u4f53\u898b\u305f\u3089\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5165\u529b\u3055\u308c\u305f\u540d\u524d\u306epmx\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u30d1\u30fc\u30b9\u3057\u3066PmxHeader\u578b\u306b\u3057\u3066\u8868\u793a\u3059\u308b\u3060\u3051\u3002\nGet\u306fMonad\u3068Applicative\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067Parsec\u3067\u30d1\u30fc\u30b5\u66f8\u304f\u307f\u305f\u3044\u306a\u611f\u899a\u3067\u66f8\u3051\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066pmx\u306f\u30d0\u30a4\u30c8\u9806\u304c\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b```getFloatle```\u3092\u4f7f\u3063\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n```hs:Main.hs\nmodule Main where\n\nimport Control.Applicative ()\nimport System.IO\nimport qualified Data.ByteString.Lazy as BL\nimport qualified Data.ByteString as B\nimport Data.Binary.Get\nimport Data.Char (chr)\n\ndata PmxHeader = PmxHeader { getPmxVersion :: Float\n                           } deriving (Show, Read)\n\nmain :: IO ()\nmain = do\n  putStr \">> \"\n  hFlush stdout\n  s <- getLine\n  readPmx s\n\nreadPmx :: String -> IO ()\nreadPmx f = do\n    rh <- openFile f ReadMode\n    i  <- BL.hGetContents rh\n    let d = runGet parsePmxHeader i\n    print d\n\nparsePmxHeader :: Get PmxHeader\nparsePmxHeader = PmxHeader <$> parsePmxVersion\n\nparsePmxVersion :: Get Float\nparsePmxVersion = do\n  s <- getString 4\n  if s == \"PMX \" then getFloat else return 1.0\n\ngetString :: Int -> Get String\ngetString n = map (chr . fromEnum) . B.unpack <$> getByteString n\n\ngetInt :: Get Int\ngetInt = fromIntegral <$> getWord32le\n\ngetFloat :: Get Float\ngetFloat = getFloatle\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```\n$ stack build && stack exec pmx\nSetting codepage to UTF-8 (65001) to ensure correct output from GHC\n>> a.pmx\nPmxHeader {getPmxVersion = 2.0}\n```\n\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n"}