{"context": "\u305d\u308d\u305d\u308dUWP\u306e\u6a5f\u304c\u719f\u3057\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u624b\u3092\u4ed8\u3051\u3066\u307f\u308b\u3002\nVisualStudio2015\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304b\u3089\n\nVisual C# - Windows - Universal - Blank App\n\n\u3092\u9078\u629e\u3002\n\nXaml\u3092\u3084\u3081\u3066CoreWindow\u306b\u964d\u308a\u308b\nApp.xaml\u3068MainPage.xaml\u3092\u524a\u9664\u3002\n\u65b0\u305f\u306bApp.cs\u3092\u4f5c\u6210\u3059\u308b\u3002\nusing System;\nusing System.Diagnostics;\nusing Windows.ApplicationModel.Core;\nusing Windows.UI.Core;\n\nnamespace App6 // <- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308f\u305b\u308b\n{\n    class App\n    {\n        [MTAThread]\n        private static void Main()\n        {\n            var viewFactory = new FrameworkViewSource();\n            CoreApplication.Run(viewFactory);\n        }\n\n        class FrameworkViewSource : IFrameworkViewSource\n        {\n            public IFrameworkView CreateView()\n            {\n                return new FrameworkView();\n            }\n        }\n\n        class FrameworkView : IFrameworkView\n        {\n            public void Initialize(CoreApplicationView applicationView)\n            {\n                Debug.WriteLine(\"Initialize\");\n            }\n\n            public void Load(string entryPoint)\n            {\n                Debug.WriteLine(\"Load: \"+entryPoint);\n            }\n\n            public void Run()\n            {\n                Debug.WriteLine(\"Run\");\n            }\n\n            public void SetWindow(CoreWindow window)\n            {\n                Debug.WriteLine(\"SetWindow: \"+window);\n            }\n\n            public void Uninitialize()\n            {\n                Debug.WriteLine(\"Uninitialize\");\n            }\n        }\n    }\n}\n\n\u3053\u308c\u3067\u4e00\u5fdc\u5b9f\u884c\u3067\u304d\u308b\u3002UWP\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u6307\u5b9a\u306e\u30af\u30e9\u30b9(App6.App)\u306estatic void Main\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002 Windows.UI.Xaml.Application.Main\u3082\u5b58\u5728\u3057\u3066\u3044\u308b\u304cprivate\u3067\u96a0\u853d\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306c\u3002\n\nSharpDX\u3084\u3063\u3066\u307f\u308b\nIFrameworkView\u3053\u305d\u304cUWP\u3067\u4e00\u756a\u30ed\u30fc\u30ec\u30d9\u30eb\u306eCoreWindow\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u624b\u6bb5\u3089\u3057\u304f\u3001\nWin32API\u304cGDI\u3067\u63cf\u753b\u3057\u3066\u3044\u305f\u3088\u3046\u306b\u3001CoreWindow\u3067\u306fIDXGIFactory2::CreateSwapChainForCoreWindow method\n\u306b\u3088\u308aCoreWindow\u3092\u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3068\u3059\u308bSwapchain\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\nD3D\u304b\u3089\u63cf\u753b\u3092\u884c\u3046\u3002\nIFrameworkView Interface\n\u3092C#+SharpDX\u306b\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n\u307e\u305a\u3001nuget\u304b\u3089SharpDX.Direct3D11\u3068SharpDX.Mathematics\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\u30023.02\u3060\u3063\u305f\u3002\nusing System;\nusing System.Diagnostics;\nusing Windows.ApplicationModel.Activation;\nusing Windows.ApplicationModel.Core;\nusing Windows.UI.Core;\n\nnamespace App6\n{\n    class App\n    {\n        [MTAThread]\n        private static void Main()\n        {\n            var viewFactory = new FrameworkViewSource();\n            CoreApplication.Run(viewFactory);\n        }\n\n        class FrameworkViewSource : IFrameworkViewSource\n        {\n            public IFrameworkView CreateView()\n            {\n                return new FrameworkView();\n            }\n        }\n\n        class FrameworkView : IFrameworkView\n        {\n            CoreWindow m_window;\n            SharpDX.DXGI.SwapChain1 m_swapChain;\n            SharpDX.Direct3D11.Device1 m_d3dDevice;\n            SharpDX.Direct3D11.DeviceContext1 m_d3dDeviceContext;\n            SharpDX.Direct3D11.RenderTargetView m_renderTargetView;\n\n            public void Initialize(CoreApplicationView applicationView)\n            {\n                Debug.WriteLine(\"Initialize\");\n                applicationView.Activated += OnActivated;\n            }\n\n            void OnActivated(\n                 CoreApplicationView applicationView,\n                 IActivatedEventArgs args\n                 )\n            {\n                // Activate the application window, making it visible and enabling it to receive events.\n                CoreWindow.GetForCurrentThread().Activate();\n            }\n\n            public void Load(string entryPoint)\n            {\n                Debug.WriteLine(\"Load: \" + entryPoint);\n            }\n\n            public void Run()\n            {\n                Debug.WriteLine(\"Run\");\n\n                // First, create the Direct3D device.\n\n                // This flag is required in order to enable compatibility with Direct2D.\n                var creationFlags = SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport;\n\n#if DEBUG\n                // If the project is in a debug build, enable debugging via SDK Layers with this flag.\n                creationFlags |= SharpDX.Direct3D11.DeviceCreationFlags.Debug;\n#endif\n\n                // This array defines the ordering of feature levels that D3D should attempt to create.\n                var featureLevels = new SharpDX.Direct3D.FeatureLevel[]\n               {\n                    SharpDX.Direct3D.FeatureLevel.Level_11_1,\n                    SharpDX.Direct3D.FeatureLevel.Level_11_0,\n               };\n\n                using (var d3dDevice = new SharpDX.Direct3D11.Device(SharpDX.Direct3D.DriverType.Hardware\n                    , creationFlags, featureLevels))\n                {\n                    m_d3dDevice = d3dDevice.QueryInterface<SharpDX.Direct3D11.Device1>();\n                }\n                m_d3dDeviceContext = m_d3dDevice.ImmediateContext1;\n\n                // After the D3D device is created, create additional application resources.\n                CreateWindowSizeDependentResources();\n\n                // Enter the render loop.  Note that Windows Store apps should never exit.\n                while (true)\n                {\n                    // Process events incoming to the window.\n                    m_window.Dispatcher.ProcessEvents(CoreProcessEventsOption.ProcessAllIfPresent);\n\n                    // Specify the render target we created as the output target.\n                    m_d3dDeviceContext.OutputMerger.SetRenderTargets(null,\n                        m_renderTargetView\n                        );\n\n                    // Clear the render target to a solid color.\n                    m_d3dDeviceContext.ClearRenderTargetView(\n                        m_renderTargetView,\n                        new SharpDX.Color4(0.071f, 0.04f, 0.561f, 1.0f)\n                        );\n\n                    // Present the rendered image to the window.  Because the maximum frame latency is set to 1,\n                    // the render loop will generally be throttled to the screen refresh rate, typically around\n                    // 60Hz, by sleeping the application on Present until the screen is refreshed.\n                    m_swapChain.Present(1, 0);\n                }\n            }\n\n            public void SetWindow(CoreWindow window)\n            {\n                Debug.WriteLine(\"SetWindow: \" + window);\n                m_window = window;\n\n                // Specify the cursor type as the standard arrow cursor.\n                m_window.PointerCursor = new CoreCursor(CoreCursorType.Arrow, 0);\n\n                // Allow the application to respond when the window size changes.\n                m_window.SizeChanged += OnWindowSizeChanged;\n            }\n\n            void OnWindowSizeChanged(\n                CoreWindow sender,\n                WindowSizeChangedEventArgs args\n                )\n            {\n                m_renderTargetView = null;\n                CreateWindowSizeDependentResources();\n            }\n\n            public void Uninitialize()\n            {\n                Debug.WriteLine(\"Uninitialize\");\n            }\n\n            // This method creates all application resources that depend on\n            // the application window size.  It is called at app initialization,\n            // and whenever the application window size changes.\n            void CreateWindowSizeDependentResources()\n            {\n                if (m_swapChain != null)\n                {\n                    // If the swap chain already exists, resize it.\n                    m_swapChain.ResizeBuffers(\n                        2,\n                        0,\n                        0,\n                        SharpDX.DXGI.Format.B8G8R8A8_UNorm,\n                        0\n                    );\n                }\n                else\n                {\n                    // If the swap chain does not exist, create it.\n                    var swapChainDesc = new SharpDX.DXGI.SwapChainDescription1\n                    {\n                        Stereo = false,\n                        Usage = SharpDX.DXGI.Usage.RenderTargetOutput,\n                        Scaling = SharpDX.DXGI.Scaling.None,\n                        Flags = 0,\n                    };\n\n                    // Use automatic sizing.\n                    swapChainDesc.Width = 0;\n                    swapChainDesc.Height = 0;\n\n                    // This is the most common swap chain format.\n                    swapChainDesc.Format = SharpDX.DXGI.Format.B8G8R8A8_UNorm;\n\n                    // Don't use multi-sampling.\n                    swapChainDesc.SampleDescription.Count = 1;\n                    swapChainDesc.SampleDescription.Quality = 0;\n\n                    // Use two buffers to enable flip effect.\n                    swapChainDesc.BufferCount = 2;\n\n                    // We recommend using this swap effect for all applications.\n                    swapChainDesc.SwapEffect = SharpDX.DXGI.SwapEffect.FlipSequential;\n\n                    // Once the swap chain description is configured, it must be\n                    // created on the same adapter as the existing D3D Device.\n\n                    // First, retrieve the underlying DXGI Device from the D3D Device.\n                    using (var dxgiDevice = m_d3dDevice.QueryInterface<SharpDX.DXGI.Device2>())\n                    {\n\n                        // Ensure that DXGI does not queue more than one frame at a time. This both reduces\n                        // latency and ensures that the application will only render after each VSync, minimizing\n                        // power consumption.\n                        dxgiDevice.MaximumFrameLatency = 1;\n\n                        // Next, get the parent factory from the DXGI Device.\n                        using (var dxgiAdapter = dxgiDevice.Adapter)\n                        using (var dxgiFactory = dxgiAdapter.GetParent<SharpDX.DXGI.Factory2>())\n                        // Finally, create the swap chain.\n                        using (var coreWindow = new SharpDX.ComObject(m_window))\n                        {\n                            m_swapChain = new SharpDX.DXGI.SwapChain1(dxgiFactory\n                                , m_d3dDevice, coreWindow, ref swapChainDesc);\n                        }\n                    }\n                }\n\n                // Once the swap chain is created, create a render target view.  This will\n                // allow Direct3D to render graphics to the window.\n                using (var backBuffer = m_swapChain.GetBackBuffer<SharpDX.Direct3D11.Texture2D>(0))\n                {\n                    m_renderTargetView = new SharpDX.Direct3D11.RenderTargetView(m_d3dDevice, backBuffer);\n\n                    // After the render target view is created, specify that the viewport,\n                    // which describes what portion of the window to draw to, should cover\n                    // the entire window.\n\n                    var backBufferDesc = backBuffer.Description;\n\n                    var viewport = new SharpDX.ViewportF\n                    {\n                        X = 0.0f,\n                        Y = 0.0f,\n                        Width = backBufferDesc.Width,\n                        Height = backBufferDesc.Height,\n                        MinDepth = 0,\n                        MaxDepth = 1,\n                    };\n\n                    m_d3dDeviceContext.Rasterizer.SetViewport(viewport);\n                }\n            }\n        }\n    }\n}\n\n\u30ec\u30f3\u30c0\u30fc\u30eb\u30fc\u30d7\u3067\u753b\u9762\u3092\u30af\u30ea\u30a2\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u305f\u3002CreateWindow\u306e\u304f\u3060\u308a\u304c\u7121\u3044\u5206Win32API\u7248\u3088\u308a\u3060\u3044\u3076\u697d\u3002VisualStudio2015\u306e C++ - Windows - Universal - DirectX12App \u3084 DirectX11 and XAML App\u3082\u308f\u308a\u3068\u7c21\u5358\u306b\u79fb\u690d\u3067\u304d\u305d\u3046\u3060\u3002\n\n\u53c2\u8003\n\nhttps://www.packtpub.com/game-development/direct3d-rendering-cookbook\n\n\u3061\u3087\u3063\u3068\u524d\u306e\u672c\u306a\u306e\u3067Windows8.1 + D3D11(SharpDX)\u3002UWP + D3D12\u7248\u304c\u51fa\u306a\u3044\u304b\u306a\u30fc\u3002\n\u305d\u308d\u305d\u308dUWP\u306e\u6a5f\u304c\u719f\u3057\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u624b\u3092\u4ed8\u3051\u3066\u307f\u308b\u3002\n\nVisualStudio2015\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304b\u3089\n\n* Visual C# - Windows - Universal - Blank App\n\n\u3092\u9078\u629e\u3002\n\n# Xaml\u3092\u3084\u3081\u3066CoreWindow\u306b\u964d\u308a\u308b\nApp.xaml\u3068MainPage.xaml\u3092\u524a\u9664\u3002\n\u65b0\u305f\u306bApp.cs\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing Windows.ApplicationModel.Core;\nusing Windows.UI.Core;\n\nnamespace App6 // <- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308f\u305b\u308b\n{\n    class App\n    {\n        [MTAThread]\n        private static void Main()\n        {\n            var viewFactory = new FrameworkViewSource();\n            CoreApplication.Run(viewFactory);\n        }\n\n        class FrameworkViewSource : IFrameworkViewSource\n        {\n            public IFrameworkView CreateView()\n            {\n                return new FrameworkView();\n            }\n        }\n\n        class FrameworkView : IFrameworkView\n        {\n            public void Initialize(CoreApplicationView applicationView)\n            {\n                Debug.WriteLine(\"Initialize\");\n            }\n\n            public void Load(string entryPoint)\n            {\n                Debug.WriteLine(\"Load: \"+entryPoint);\n            }\n\n            public void Run()\n            {\n                Debug.WriteLine(\"Run\");\n            }\n\n            public void SetWindow(CoreWindow window)\n            {\n                Debug.WriteLine(\"SetWindow: \"+window);\n            }\n\n            public void Uninitialize()\n            {\n                Debug.WriteLine(\"Uninitialize\");\n            }\n        }\n    }\n}\n```\n\n\u3053\u308c\u3067\u4e00\u5fdc\u5b9f\u884c\u3067\u304d\u308b\u3002UWP\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u6307\u5b9a\u306e\u30af\u30e9\u30b9(App6.App)\u306estatic void Main\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002 Windows.UI.Xaml.Application.Main\u3082\u5b58\u5728\u3057\u3066\u3044\u308b\u304cprivate\u3067\u96a0\u853d\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306c\u3002\n\n# SharpDX\u3084\u3063\u3066\u307f\u308b\n\nIFrameworkView\u3053\u305d\u304cUWP\u3067\u4e00\u756a\u30ed\u30fc\u30ec\u30d9\u30eb\u306eCoreWindow\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u624b\u6bb5\u3089\u3057\u304f\u3001\nWin32API\u304cGDI\u3067\u63cf\u753b\u3057\u3066\u3044\u305f\u3088\u3046\u306b\u3001CoreWindow\u3067\u306f[IDXGIFactory2::CreateSwapChainForCoreWindow method](https://msdn.microsoft.com/ja-jp/library/windows/desktop/hh404559(v=vs.85).aspx)\n\u306b\u3088\u308aCoreWindow\u3092\u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3068\u3059\u308bSwapchain\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\nD3D\u304b\u3089\u63cf\u753b\u3092\u884c\u3046\u3002\n\n[IFrameworkView Interface](https://msdn.microsoft.com/library/windows/apps/hh700478)\n\u3092C#+SharpDX\u306b\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n\n\u307e\u305a\u3001nuget\u304b\u3089SharpDX.Direct3D11\u3068SharpDX.Mathematics\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304f\u30023.02\u3060\u3063\u305f\u3002\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing Windows.ApplicationModel.Activation;\nusing Windows.ApplicationModel.Core;\nusing Windows.UI.Core;\n\nnamespace App6\n{\n    class App\n    {\n        [MTAThread]\n        private static void Main()\n        {\n            var viewFactory = new FrameworkViewSource();\n            CoreApplication.Run(viewFactory);\n        }\n\n        class FrameworkViewSource : IFrameworkViewSource\n        {\n            public IFrameworkView CreateView()\n            {\n                return new FrameworkView();\n            }\n        }\n\n        class FrameworkView : IFrameworkView\n        {\n            CoreWindow m_window;\n            SharpDX.DXGI.SwapChain1 m_swapChain;\n            SharpDX.Direct3D11.Device1 m_d3dDevice;\n            SharpDX.Direct3D11.DeviceContext1 m_d3dDeviceContext;\n            SharpDX.Direct3D11.RenderTargetView m_renderTargetView;\n\n            public void Initialize(CoreApplicationView applicationView)\n            {\n                Debug.WriteLine(\"Initialize\");\n                applicationView.Activated += OnActivated;\n            }\n\n            void OnActivated(\n                 CoreApplicationView applicationView,\n                 IActivatedEventArgs args\n                 )\n            {\n                // Activate the application window, making it visible and enabling it to receive events.\n                CoreWindow.GetForCurrentThread().Activate();\n            }\n\n            public void Load(string entryPoint)\n            {\n                Debug.WriteLine(\"Load: \" + entryPoint);\n            }\n\n            public void Run()\n            {\n                Debug.WriteLine(\"Run\");\n\n                // First, create the Direct3D device.\n\n                // This flag is required in order to enable compatibility with Direct2D.\n                var creationFlags = SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport;\n\n#if DEBUG\n                // If the project is in a debug build, enable debugging via SDK Layers with this flag.\n                creationFlags |= SharpDX.Direct3D11.DeviceCreationFlags.Debug;\n#endif\n\n                // This array defines the ordering of feature levels that D3D should attempt to create.\n                var featureLevels = new SharpDX.Direct3D.FeatureLevel[]\n               {\n                    SharpDX.Direct3D.FeatureLevel.Level_11_1,\n                    SharpDX.Direct3D.FeatureLevel.Level_11_0,\n               };\n\n                using (var d3dDevice = new SharpDX.Direct3D11.Device(SharpDX.Direct3D.DriverType.Hardware\n                    , creationFlags, featureLevels))\n                {\n                    m_d3dDevice = d3dDevice.QueryInterface<SharpDX.Direct3D11.Device1>();\n                }\n                m_d3dDeviceContext = m_d3dDevice.ImmediateContext1;\n\n                // After the D3D device is created, create additional application resources.\n                CreateWindowSizeDependentResources();\n\n                // Enter the render loop.  Note that Windows Store apps should never exit.\n                while (true)\n                {\n                    // Process events incoming to the window.\n                    m_window.Dispatcher.ProcessEvents(CoreProcessEventsOption.ProcessAllIfPresent);\n\n                    // Specify the render target we created as the output target.\n                    m_d3dDeviceContext.OutputMerger.SetRenderTargets(null,\n                        m_renderTargetView\n                        );\n\n                    // Clear the render target to a solid color.\n                    m_d3dDeviceContext.ClearRenderTargetView(\n                        m_renderTargetView,\n                        new SharpDX.Color4(0.071f, 0.04f, 0.561f, 1.0f)\n                        );\n\n                    // Present the rendered image to the window.  Because the maximum frame latency is set to 1,\n                    // the render loop will generally be throttled to the screen refresh rate, typically around\n                    // 60Hz, by sleeping the application on Present until the screen is refreshed.\n                    m_swapChain.Present(1, 0);\n                }\n            }\n\n            public void SetWindow(CoreWindow window)\n            {\n                Debug.WriteLine(\"SetWindow: \" + window);\n                m_window = window;\n\n                // Specify the cursor type as the standard arrow cursor.\n                m_window.PointerCursor = new CoreCursor(CoreCursorType.Arrow, 0);\n\n                // Allow the application to respond when the window size changes.\n                m_window.SizeChanged += OnWindowSizeChanged;\n            }\n\n            void OnWindowSizeChanged(\n                CoreWindow sender,\n                WindowSizeChangedEventArgs args\n                )\n            {\n                m_renderTargetView = null;\n                CreateWindowSizeDependentResources();\n            }\n\n            public void Uninitialize()\n            {\n                Debug.WriteLine(\"Uninitialize\");\n            }\n\n            // This method creates all application resources that depend on\n            // the application window size.  It is called at app initialization,\n            // and whenever the application window size changes.\n            void CreateWindowSizeDependentResources()\n            {\n                if (m_swapChain != null)\n                {\n                    // If the swap chain already exists, resize it.\n                    m_swapChain.ResizeBuffers(\n                        2,\n                        0,\n                        0,\n                        SharpDX.DXGI.Format.B8G8R8A8_UNorm,\n                        0\n                    );\n                }\n                else\n                {\n                    // If the swap chain does not exist, create it.\n                    var swapChainDesc = new SharpDX.DXGI.SwapChainDescription1\n                    {\n                        Stereo = false,\n                        Usage = SharpDX.DXGI.Usage.RenderTargetOutput,\n                        Scaling = SharpDX.DXGI.Scaling.None,\n                        Flags = 0,\n                    };\n\n                    // Use automatic sizing.\n                    swapChainDesc.Width = 0;\n                    swapChainDesc.Height = 0;\n\n                    // This is the most common swap chain format.\n                    swapChainDesc.Format = SharpDX.DXGI.Format.B8G8R8A8_UNorm;\n\n                    // Don't use multi-sampling.\n                    swapChainDesc.SampleDescription.Count = 1;\n                    swapChainDesc.SampleDescription.Quality = 0;\n\n                    // Use two buffers to enable flip effect.\n                    swapChainDesc.BufferCount = 2;\n\n                    // We recommend using this swap effect for all applications.\n                    swapChainDesc.SwapEffect = SharpDX.DXGI.SwapEffect.FlipSequential;\n\n                    // Once the swap chain description is configured, it must be\n                    // created on the same adapter as the existing D3D Device.\n\n                    // First, retrieve the underlying DXGI Device from the D3D Device.\n                    using (var dxgiDevice = m_d3dDevice.QueryInterface<SharpDX.DXGI.Device2>())\n                    {\n\n                        // Ensure that DXGI does not queue more than one frame at a time. This both reduces\n                        // latency and ensures that the application will only render after each VSync, minimizing\n                        // power consumption.\n                        dxgiDevice.MaximumFrameLatency = 1;\n\n                        // Next, get the parent factory from the DXGI Device.\n                        using (var dxgiAdapter = dxgiDevice.Adapter)\n                        using (var dxgiFactory = dxgiAdapter.GetParent<SharpDX.DXGI.Factory2>())\n                        // Finally, create the swap chain.\n                        using (var coreWindow = new SharpDX.ComObject(m_window))\n                        {\n                            m_swapChain = new SharpDX.DXGI.SwapChain1(dxgiFactory\n                                , m_d3dDevice, coreWindow, ref swapChainDesc);\n                        }\n                    }\n                }\n\n                // Once the swap chain is created, create a render target view.  This will\n                // allow Direct3D to render graphics to the window.\n                using (var backBuffer = m_swapChain.GetBackBuffer<SharpDX.Direct3D11.Texture2D>(0))\n                {\n                    m_renderTargetView = new SharpDX.Direct3D11.RenderTargetView(m_d3dDevice, backBuffer);\n\n                    // After the render target view is created, specify that the viewport,\n                    // which describes what portion of the window to draw to, should cover\n                    // the entire window.\n\n                    var backBufferDesc = backBuffer.Description;\n\n                    var viewport = new SharpDX.ViewportF\n                    {\n                        X = 0.0f,\n                        Y = 0.0f,\n                        Width = backBufferDesc.Width,\n                        Height = backBufferDesc.Height,\n                        MinDepth = 0,\n                        MaxDepth = 1,\n                    };\n\n                    m_d3dDeviceContext.Rasterizer.SetViewport(viewport);\n                }\n            }\n        }\n    }\n}\n```\n\n\u30ec\u30f3\u30c0\u30fc\u30eb\u30fc\u30d7\u3067\u753b\u9762\u3092\u30af\u30ea\u30a2\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u305f\u3002CreateWindow\u306e\u304f\u3060\u308a\u304c\u7121\u3044\u5206Win32API\u7248\u3088\u308a\u3060\u3044\u3076\u697d\u3002VisualStudio2015\u306e C++ - Windows - Universal - DirectX12App \u3084 DirectX11 and XAML App\u3082\u308f\u308a\u3068\u7c21\u5358\u306b\u79fb\u690d\u3067\u304d\u305d\u3046\u3060\u3002\n\n# \u53c2\u8003\n* https://www.packtpub.com/game-development/direct3d-rendering-cookbook\n\n\u3061\u3087\u3063\u3068\u524d\u306e\u672c\u306a\u306e\u3067Windows8.1 + D3D11(SharpDX)\u3002UWP + D3D12\u7248\u304c\u51fa\u306a\u3044\u304b\u306a\u30fc\u3002\n", "tags": ["UWP", "SharpDX", "DirectX"]}