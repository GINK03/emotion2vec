{"context": "\u203b\u6ce8\u610f\u4e8b\u9805\u203b\n\u203b\u308a\u3093\u306aAPI\u306f\u3001Microsoft\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3059\u3002\n\u203bAITalk\u306f\u3001\u682a\u5f0f\u4f1a\u793eAI\uff08\u30a8\u30fc\u30a2\u30a4\uff09\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3059\u3002\n\u203b\u5404\u7a2eAPI\u306f\u3001\u30cf\u30c3\u30ab\u30bd\u30f3\u3067\u63d0\u4f9b\u3055\u308c\u305f\u3082\u306e\u3067\u3059\u3002\n\u300ePepper\u3092\u4ecb\u3057\u3066\u3001MS\u306eAI\u5973\u5b50\u9ad8\u751f\u308a\u3093\u306a\u3068\u4f1a\u8a71\u300f\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u308a\u3093\u306a\u306e\u5fdc\u7b54\u306fjson\u3067\u623b\u308b\u306e\u3067\u3001AI\u306eAITalk\u3067JK\u98a8\u306e\u97f3\u58f0\u306b\u3057\u3066Pepper\u3067\u518d\u751f\u3057\u307e\u3059\u3002 \n\nChoregraphe\n\u5b9f\u88c5\u306e\u5185\u5bb9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\uff11\uff0ePepper\u3067\u53ce\u96c6\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092Google Speech API\u3067\u30c6\u30ad\u30b9\u30c8\u5316\n\uff12\uff0e\u30c6\u30ad\u30b9\u30c8\u3092\u308a\u3093\u306aAPI\u306b\u9001\u4fe1\u3057\u3001\u308a\u3093\u306a\u306e\u5fdc\u7b54\u30c6\u30ad\u30b9\u30c8\uff08JSON\u30c7\u30fc\u30bf\uff09\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u53d6\u5f97\u3059\u308b\n\uff13\uff0e\u5fdc\u7b54\u30c6\u30ad\u30b9\u30c8\u3092AITalk\u3000API\u306b\u9001\u4fe1\u3057\u3001\u97f3\u58f0\u5408\u6210\u3055\u308c\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u53d6\u5f97\u3059\u308b\n\uff14\uff0e\u97f3\u58f0\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092Pepper\u3067\u518d\u751f\u3059\u308b\nPepper\u304c\u805e\u304f\u30e2\u30fc\u30c9\u306e\u6642\u306b\u89e3\u308a\u3084\u3059\u3044\u3088\u3046\u76ee\u3092\u9752\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nGoogle Speech API\nGoogle Speech API\u306e\u66f8\u304d\u65b9\u306f http://qiita.com/lethe2211/items/7c9b1b82c7eda40dafa9 \u3092\u53c2\u7167\nstt.py\u3092\u5c11\u3057\u4fee\u6b63\u3057\u305f\u306e\u3067\u3001\u3053\u3053\u3060\u3051UP\u3057\u307e\u3059\u3002\u4ed6\u306f\u305d\u306e\u307e\u307e\u3067\u52d5\u304d\u307e\u3057\u305f\u3002\n`import sys\n import os\n import json\n import requests\n import urllib\n\n#apikey = os.environ.get(\"GOOGLE_API_KEY\")\napikey = \"\u81ea\u5206\u306e\u30ad\u30fc\u3092\u8a18\u5165\"\nTIMEOUT 30\n\ndef stt_google_wav(filename):\n    q = {\"output\": \"json\", \"lang\": \"ja-JP\", \"key\": apikey}\n\n    url = \"http://www.google.com/speech-api/v2/recognize?%s\" % (urllib.parse.urlencode(q))\n\n    headers = {\"Content-Type\": \"audio/l16; rate=16000\"}\n    data = open(filename, \"rb\").read()\n\n    response = requests.post(\n        url,\n        headers=headers,\n        data=data,\n        timeout=TIMEOUT\n    )\n\n    #jsonunits = response.text.split(os.linesep)\n    jsonunits = response.text.split(\"\\n\")\n    res = \"\"\n\n    for unit in jsonunits:\n        if not unit:\n            continue\n        #print(unit)\n        #print([ord(x) for x in unit])\n        #print('---------\\n\\n')\n        obj = json.loads(unit)\n        alternatives = obj[\"result\"]\n\n        if len(alternatives) > 0:\n            breakflag = False\n            for obj in alternatives:\n                results = obj[\"alternative\"]\n                for result in results:\n                    res = result[\"transcript\"]\n                    breakflag = True\n                    break\n\n                if breakflag:\n                    break\n\n    return res\nif __name__ == '__main__':\n    print(stt_google_wav(sys.argv[1]))`\n\n\n\u308a\u3093\u306aAPI\n\u30cf\u30c3\u30ab\u30bd\u30f3\u3067MS\u306e\u62c5\u5f53\u8005\u306e\u65b9\u304cCloud Robotics API\u3092HTTPS\u30d9\u30fc\u30b9\u3067\u547c\u3073\u51fa\u3059\u30b5\u30f3\u30d7\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\u305d\u308c\u3092\u53c2\u8003\u306b\u5fdc\u7b54\u304b\u3089\u30bb\u30ea\u30d5\u3092\u629c\u304d\u51fa\u3057\u307e\u3059\u3002\n   `headers = None\n    body = None\n    resCode = None\n    #while True:\n    for x in range(5):\n        time.sleep(0.5)\n        try:\n            request = urllib2.Request(p_url2, None, p_headers2)\n            response = urllib2.urlopen(request)\n            headers = response.info()\n            body = response.read()\n            resCode = response.code\n            if resCode == 200:\n                messageId = headers['ETag'].replace('\\\"','')\n                rinMsg0 = json.loads(body)#['RbBody']['talkListByRinna'][0]['SayText'].encode(\"utf-8\")\n                rinMsg = rinMsg0['RbBody']['talkListByRinna'][0]['SayText'].encode(\"utf-8\")\n                break\n        except urllib2.HTTPError as he:\n            break\n        except Exception as e:\n            break\n        else:\n            if resCode == 204: # No Content\n                continue`\n\n\nAITalk API\nAITalk\u306fphp\u306eAPI\u30b5\u30f3\u30d7\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\u305d\u3061\u3089\u3092python\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n  `import sys, os\n    self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\n\n    if self.folderName not in sys.path:\n        sys.path.append(self.folderName)\n\n    import requests\n    filepath='test.wav'\n\n    username='********'\n    password='********'\n    speakername='********' #JK\u3063\u307d\u3044\u30bb\u30ec\u30af\u30c8\u306b\u3057\u307e\u3059\n\n    url = 'http://***********' #AITalk\u63d0\u4f9bAPI\u306eURL\n    params = {\n        'username':username,\n        'password':password,\n        'text':p,\n        'speaker_name':speakername,\n        'input_type':'text',\n        'output_type':'sound',\n        'ext':'wav',\n        'pitch':'1.50',\n        'range':'1.50',\n        'style':{'j':'1.0'}\n    }\n    r = requests.get(url, params=params)\n\n\n    if( self.getParameter(\"Temporary storage\") ):\n        import tempfile\n        path = tempfile.mkdtemp() + \"/\"\n    else:\n        path = os.path.expanduser('~') + \"/recordings/microphones/\"\n\n    filepath = path+\"test.wav\"\n    #self.logger.info(filepath)\n    with open(filepath, 'wb') as f:\n        f.write(r.content)\n\n    self.onStopped(filepath)`\n\n\n\u304a\u308f\u308a\n\u3069\u306eAPI\u3082\u4f7f\u3044\u3084\u3059\u304f\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\u6b21\u56de\u30cf\u30c3\u30ab\u30bd\u30f3\u3067\u3082\u8272\u3005\u306aAPI\u306b\u6311\u6226\u3057\u305f\u3044\u3067\u3059\u3002\n\u500b\u4eba\u7684\u306b\u308a\u3093\u306a\u306e\u5869\u5bfe\u5fdc\u304cPepper\u304b\u3089\u6d41\u308c\u308b\u69d8\u5b50\u306f\u9762\u767d\u304b\u3063\u305f\u3067\u3059\uff01\n\u203b\u6ce8\u610f\u4e8b\u9805\u203b\n\u203b\u308a\u3093\u306aAPI\u306f\u3001Microsoft\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3059\u3002\n\u203bAITalk\u306f\u3001\u682a\u5f0f\u4f1a\u793eAI\uff08\u30a8\u30fc\u30a2\u30a4\uff09\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u3067\u3059\u3002\n\u203b\u5404\u7a2eAPI\u306f\u3001\u30cf\u30c3\u30ab\u30bd\u30f3\u3067\u63d0\u4f9b\u3055\u308c\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n\u300ePepper\u3092\u4ecb\u3057\u3066\u3001MS\u306eAI\u5973\u5b50\u9ad8\u751f\u308a\u3093\u306a\u3068\u4f1a\u8a71\u300f\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u308a\u3093\u306a\u306e\u5fdc\u7b54\u306fjson\u3067\u623b\u308b\u306e\u3067\u3001AI\u306eAITalk\u3067JK\u98a8\u306e\u97f3\u58f0\u306b\u3057\u3066Pepper\u3067\u518d\u751f\u3057\u307e\u3059\u3002 \n\n#Choregraphe\n\n\u5b9f\u88c5\u306e\u5185\u5bb9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\uff11\uff0ePepper\u3067\u53ce\u96c6\u3057\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092Google Speech API\u3067\u30c6\u30ad\u30b9\u30c8\u5316\n\uff12\uff0e\u30c6\u30ad\u30b9\u30c8\u3092\u308a\u3093\u306aAPI\u306b\u9001\u4fe1\u3057\u3001\u308a\u3093\u306a\u306e\u5fdc\u7b54\u30c6\u30ad\u30b9\u30c8\uff08JSON\u30c7\u30fc\u30bf\uff09\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u53d6\u5f97\u3059\u308b\n\uff13\uff0e\u5fdc\u7b54\u30c6\u30ad\u30b9\u30c8\u3092AITalk\u3000API\u306b\u9001\u4fe1\u3057\u3001\u97f3\u58f0\u5408\u6210\u3055\u308c\u305f\u97f3\u58f0\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u53d6\u5f97\u3059\u308b\n\uff14\uff0e\u97f3\u58f0\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092Pepper\u3067\u518d\u751f\u3059\u308b\nPepper\u304c\u805e\u304f\u30e2\u30fc\u30c9\u306e\u6642\u306b\u89e3\u308a\u3084\u3059\u3044\u3088\u3046\u76ee\u3092\u9752\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n![choregraphe.PNG](https://qiita-image-store.s3.amazonaws.com/0/129894/c7f6f157-b17a-21f1-4501-89c9a84363e2.png)\n\n#Google Speech API\n\nGoogle Speech API\u306e\u66f8\u304d\u65b9\u306f http://qiita.com/lethe2211/items/7c9b1b82c7eda40dafa9 \u3092\u53c2\u7167\nstt.py\u3092\u5c11\u3057\u4fee\u6b63\u3057\u305f\u306e\u3067\u3001\u3053\u3053\u3060\u3051UP\u3057\u307e\u3059\u3002\u4ed6\u306f\u305d\u306e\u307e\u307e\u3067\u52d5\u304d\u307e\u3057\u305f\u3002\n\n\t`import sys\n\t import os\n\t import json\n\t import requests\n\t import urllib\n\t\n\t#apikey = os.environ.get(\"GOOGLE_API_KEY\")\n\tapikey = \"\u81ea\u5206\u306e\u30ad\u30fc\u3092\u8a18\u5165\"\n\tTIMEOUT 30\n\t\n\tdef stt_google_wav(filename):\n\t    q = {\"output\": \"json\", \"lang\": \"ja-JP\", \"key\": apikey}\n\t\n\t    url = \"http://www.google.com/speech-api/v2/recognize?%s\" % (urllib.parse.urlencode(q))\n\t\n\t    headers = {\"Content-Type\": \"audio/l16; rate=16000\"}\n\t    data = open(filename, \"rb\").read()\n\t\n\t    response = requests.post(\n\t        url,\n\t        headers=headers,\n\t        data=data,\n\t        timeout=TIMEOUT\n\t    )\n\t\n\t    #jsonunits = response.text.split(os.linesep)\n\t    jsonunits = response.text.split(\"\\n\")\n\t    res = \"\"\n\t\n\t    for unit in jsonunits:\n\t        if not unit:\n\t            continue\n\t        #print(unit)\n\t        #print([ord(x) for x in unit])\n\t        #print('---------\\n\\n')\n\t        obj = json.loads(unit)\n\t        alternatives = obj[\"result\"]\n\t\n\t        if len(alternatives) > 0:\n\t            breakflag = False\n\t            for obj in alternatives:\n\t                results = obj[\"alternative\"]\n\t                for result in results:\n\t                    res = result[\"transcript\"]\n\t                    breakflag = True\n\t                    break\n\t\n\t                if breakflag:\n\t                    break\n\t\n\t    return res\n\tif __name__ == '__main__':\n\t    print(stt_google_wav(sys.argv[1]))`\n\n\n# \u308a\u3093\u306aAPI\n\u30cf\u30c3\u30ab\u30bd\u30f3\u3067MS\u306e\u62c5\u5f53\u8005\u306e\u65b9\u304cCloud Robotics API\u3092HTTPS\u30d9\u30fc\u30b9\u3067\u547c\u3073\u51fa\u3059\u30b5\u30f3\u30d7\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\u305d\u308c\u3092\u53c2\u8003\u306b\u5fdc\u7b54\u304b\u3089\u30bb\u30ea\u30d5\u3092\u629c\u304d\u51fa\u3057\u307e\u3059\u3002\n\n       `headers = None\n        body = None\n        resCode = None\n        #while True:\n        for x in range(5):\n            time.sleep(0.5)\n            try:\n                request = urllib2.Request(p_url2, None, p_headers2)\n                response = urllib2.urlopen(request)\n                headers = response.info()\n                body = response.read()\n                resCode = response.code\n                if resCode == 200:\n                    messageId = headers['ETag'].replace('\\\"','')\n                    rinMsg0 = json.loads(body)#['RbBody']['talkListByRinna'][0]['SayText'].encode(\"utf-8\")\n                    rinMsg = rinMsg0['RbBody']['talkListByRinna'][0]['SayText'].encode(\"utf-8\")\n                    break\n            except urllib2.HTTPError as he:\n                break\n            except Exception as e:\n                break\n            else:\n                if resCode == 204: # No Content\n                    continue`\n\n# AITalk API\n\nAITalk\u306fphp\u306eAPI\u30b5\u30f3\u30d7\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\u305d\u3061\u3089\u3092python\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n      `import sys, os\n        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), \"../lib\")\n\n        if self.folderName not in sys.path:\n            sys.path.append(self.folderName)\n\n        import requests\n        filepath='test.wav'\n\n        username='********'\n        password='********'\n        speakername='********' #JK\u3063\u307d\u3044\u30bb\u30ec\u30af\u30c8\u306b\u3057\u307e\u3059\n\n        url = 'http://***********' #AITalk\u63d0\u4f9bAPI\u306eURL\n        params = {\n            'username':username,\n            'password':password,\n            'text':p,\n            'speaker_name':speakername,\n            'input_type':'text',\n            'output_type':'sound',\n            'ext':'wav',\n            'pitch':'1.50',\n            'range':'1.50',\n            'style':{'j':'1.0'}\n        }\n        r = requests.get(url, params=params)\n\n\n        if( self.getParameter(\"Temporary storage\") ):\n            import tempfile\n            path = tempfile.mkdtemp() + \"/\"\n        else:\n            path = os.path.expanduser('~') + \"/recordings/microphones/\"\n\n        filepath = path+\"test.wav\"\n        #self.logger.info(filepath)\n        with open(filepath, 'wb') as f:\n            f.write(r.content)\n\n        self.onStopped(filepath)`\n\n#\u304a\u308f\u308a\n\u3069\u306eAPI\u3082\u4f7f\u3044\u3084\u3059\u304f\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\u6b21\u56de\u30cf\u30c3\u30ab\u30bd\u30f3\u3067\u3082\u8272\u3005\u306aAPI\u306b\u6311\u6226\u3057\u305f\u3044\u3067\u3059\u3002\n\n\u500b\u4eba\u7684\u306b\u308a\u3093\u306a\u306e\u5869\u5bfe\u5fdc\u304cPepper\u304b\u3089\u6d41\u308c\u308b\u69d8\u5b50\u306f\u9762\u767d\u304b\u3063\u305f\u3067\u3059\uff01\n\n\n\n", "tags": ["Pepper", "Choregraphe"]}