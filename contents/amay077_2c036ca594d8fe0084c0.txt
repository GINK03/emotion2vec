{"context": " More than 1 year has passed since last update.\u975e\u540c\u671f\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u3063\u3066\u3001\u7686\u3055\u3093\u3069\u3046\u3084\u3063\u3066\u308b\u3093\u3067\u3057\u3087\u3046\uff1f\n\u3061\u3087\u3063\u3068\u30b0\u30b0\u3063\u3066\u307f\u305f\u3051\u3069\u300cObject.wait \u3068\u304b CountDownLatch \u3068\u304b Future \u3067\u5f85\u3066\u300d\u3068\u304b\u3042\u3093\u307e\u308a\u826f\u3044\u7b54\u3048\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u307e\u3042 CountDownLatch \u3067\u5f85\u3063\u3066\u308b\u3060\u3051\u306a\u3093\u3067\u3059\u3051\u3069\u3082\u3002\n2013.1.10 \u4fee\u6b63:\u30e1\u30bd\u30c3\u30c9\u306b\u5168\u90e8 synchronized \u3064\u3051\u305f\u3089\u52d5\u304b\u3093\u3084\u3093\u3001\u6065\u305a\u304b\u3057\u2026\n\nFutureResult.java\n/**\n * success \u307e\u305f\u306f error \u304c\u547c\u3070\u308c\u308b\u307e\u3067 get() \u3067\u5f85\u3063\u3066\u308b Future \u307f\u305f\u3044\u306a\u30af\u30e9\u30b9\n * \n * @author @amay077\n */\npublic class FutureResult<T> {\n    private final int TIMEOUT = 10;\n    private final TimeUnit TIMEOUT_UNIT = TimeUnit.SECONDS;\n\n    private final CountDownLatch _latch = new CountDownLatch(1);\n    private T _value;\n    private Exception _error;\n\n    public static class FutureResultException extends Exception {\n        private static final long serialVersionUID = 1L;\n\n        public FutureResultException(Exception detailException) {\n            super(detailException);\n        }\n    }\n\n    /**\n     * \u975e\u540c\u671f\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u3089\u547c\u3076\u30e1\u30bd\u30c3\u30c9\n     */\n    public synchronized void success(T value) {\n        _value = value;\n        _latch.countDown();\n    }\n\n    /**\n     * \u975e\u540c\u671f\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3089\u547c\u3076\u30e1\u30bd\u30c3\u30c9\n     */\n    public synchronized void error(Exception ex) {\n        _error = ex;\n        _latch.countDown();\n    }\n\n    /**\n     * \u975e\u540c\u671f\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3063\u3066\u7d50\u679c\u3092\u8fd4\u3059\u3002\n     * \u30a8\u30e9\u30fc\u3060\u3063\u305f\u3089\u4f8b\u5916\u3092\u6295\u3052\u308b\u3002\n     */\n    public T get() throws Exception {\n        try {\n            if (!_latch.await(TIMEOUT, TIMEOUT_UNIT)) {\n                throw new FutureResultException(new TimeoutException());\n            }\n        } catch (Exception ex) {\n            throw new FutureResultException(ex);\n        }\n\n        if (_error != null) {\n            throw _error;\n        }\n\n        return _value;\n    }\n\n}\n\n\nFuture \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092 implements \u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3051\u3069\u6570\u304c\u591a\u304f\u3066\u3084\u3081\u305f\uff57\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nAsyncMethodTest.java\npublic void testAsyncMethod() {\n    final FutureResult<Integer> result = new FutureResult<Integer>();\n\n    // \u975e\u540c\u671f\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n    hoge.asyncMethod(new OnReceiveListener() {\n        @Override\n        public void onReceive(Integer data) {\n            // \u6b63\u305d\u3046\u306a\u5024\u3092\u53d7\u4fe1\u3057t\u3089 success \u3092\u547c\u3076\n            result.success(data);\n        }\n\n        @Override\n        public void onError(Exception ex) {\n            // \u30a8\u30e9\u30fc\u3092\u53d7\u4fe1\u3057\u305f\u5834\u5408\u306f error \u3092\u547c\u3076\n            result.error(ex);\n        }\n    });\n\n    // \u691c\u8a3c\n    try {\n        // get \u3067 success \u304b error \u304b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3059\u308b\u307e\u3067\u5f85\u3063\u3066\u308b\u3002\n        Assert.assertEquals(0, result.get()); \n    } catch (Exception e) {\n        fail(e.getMessage());\n    }\n}\n\n\n\n\n\u53c2\u8003\n\u306a\u3093\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u3042\u3068\u306b\u3082\u3063\u304b\u3044\u30b0\u30b0\u3063\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3088\u3046\u3067\u3002\u8a73\u7d30\u306f\u307e\u3060\u898b\u3066\u306a\u3044\u3002\n\n\nAwaitility - Awaitility is a small Java-based DSL for synchronizing asynchronous operations. It makes it easy to test asynchronous code. - Google Project Hosting\n\n\n\u975e\u540c\u671f\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u3063\u3066\u3001\u7686\u3055\u3093\u3069\u3046\u3084\u3063\u3066\u308b\u3093\u3067\u3057\u3087\u3046\uff1f\n\u3061\u3087\u3063\u3068\u30b0\u30b0\u3063\u3066\u307f\u305f\u3051\u3069\u300c```Object.wait``` \u3068\u304b ```CountDownLatch``` \u3068\u304b ```Future``` \u3067\u5f85\u3066\u300d\u3068\u304b\u3042\u3093\u307e\u308a\u826f\u3044\u7b54\u3048\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u307e\u3042 CountDownLatch \u3067\u5f85\u3063\u3066\u308b\u3060\u3051\u306a\u3093\u3067\u3059\u3051\u3069\u3082\u3002\n\n2013.1.10 \u4fee\u6b63:\u30e1\u30bd\u30c3\u30c9\u306b\u5168\u90e8 ``synchronized`` \u3064\u3051\u305f\u3089\u52d5\u304b\u3093\u3084\u3093\u3001\u6065\u305a\u304b\u3057\u2026\n\n```java:FutureResult.java\n/**\n * success \u307e\u305f\u306f error \u304c\u547c\u3070\u308c\u308b\u307e\u3067 get() \u3067\u5f85\u3063\u3066\u308b Future \u307f\u305f\u3044\u306a\u30af\u30e9\u30b9\n * \n * @author @amay077\n */\npublic class FutureResult<T> {\n\tprivate final int TIMEOUT = 10;\n\tprivate final TimeUnit TIMEOUT_UNIT = TimeUnit.SECONDS;\n\t\n\tprivate final CountDownLatch _latch = new CountDownLatch(1);\n\tprivate T _value;\n\tprivate Exception _error;\n\n\tpublic static class FutureResultException extends Exception {\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tpublic FutureResultException(Exception detailException) {\n\t\t\tsuper(detailException);\n\t\t}\n\t}\n\t\n\t/**\n\t * \u975e\u540c\u671f\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u3089\u547c\u3076\u30e1\u30bd\u30c3\u30c9\n\t */\n\tpublic synchronized void success(T value) {\n\t\t_value = value;\n\t\t_latch.countDown();\n\t}\n\n\t/**\n\t * \u975e\u540c\u671f\u51e6\u7406\u304c\u5931\u6557\u3057\u305f\u3089\u547c\u3076\u30e1\u30bd\u30c3\u30c9\n\t */\n\tpublic synchronized void error(Exception ex) {\n\t\t_error = ex;\n\t\t_latch.countDown();\n\t}\n\n\t/**\n\t * \u975e\u540c\u671f\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3063\u3066\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\t * \u30a8\u30e9\u30fc\u3060\u3063\u305f\u3089\u4f8b\u5916\u3092\u6295\u3052\u308b\u3002\n\t */\n\tpublic T get() throws Exception {\n\t\ttry {\n\t\t\tif (!_latch.await(TIMEOUT, TIMEOUT_UNIT)) {\n\t\t\t\tthrow new FutureResultException(new TimeoutException());\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tthrow new FutureResultException(ex);\n\t\t}\n\t\t\n\t\tif (_error != null) {\n\t\t\tthrow _error;\n\t\t}\n\t\t\n\t\treturn _value;\n\t}\n\n}\n```\n\nFuture \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092 implements \u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3051\u3069\u6570\u304c\u591a\u304f\u3066\u3084\u3081\u305f\uff57\n\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```java:AsyncMethodTest.java\npublic void testAsyncMethod() {\n\tfinal FutureResult<Integer> result = new FutureResult<Integer>();\n\t\n\t// \u975e\u540c\u671f\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\thoge.asyncMethod(new OnReceiveListener() {\n\t\t@Override\n\t\tpublic void onReceive(Integer data) {\n\t\t\t// \u6b63\u305d\u3046\u306a\u5024\u3092\u53d7\u4fe1\u3057t\u3089 success \u3092\u547c\u3076\n\t\t\tresult.success(data);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onError(Exception ex) {\n\t\t\t// \u30a8\u30e9\u30fc\u3092\u53d7\u4fe1\u3057\u305f\u5834\u5408\u306f error \u3092\u547c\u3076\n\t\t\tresult.error(ex);\n\t\t}\n\t});\n\t\n\t// \u691c\u8a3c\n\ttry {\n\t\t// get \u3067 success \u304b error \u304b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3059\u308b\u307e\u3067\u5f85\u3063\u3066\u308b\u3002\n\t\tAssert.assertEquals(0, result.get()); \n\t} catch (Exception e) {\n\t\tfail(e.getMessage());\n\t}\n}\n\n```\n\n## \u53c2\u8003\n\n\u306a\u3093\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u3042\u3068\u306b\u3082\u3063\u304b\u3044\u30b0\u30b0\u3063\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3088\u3046\u3067\u3002\u8a73\u7d30\u306f\u307e\u3060\u898b\u3066\u306a\u3044\u3002\n\n* [Awaitility](http://code.google.com/p/awaitility/) - Awaitility is a small Java-based DSL for synchronizing asynchronous operations. It makes it easy to test asynchronous code. - Google Project Hosting", "tags": ["JUnit3.0", "Java1.6"]}