{"tags": ["avx512"], "context": "\u6d6e\u52d5\u5c0f\u6570\u306e\u4e57\u7b97\u306f\u3001\u6574\u6570\u306e\u4e57\u7b97\u3088\u308abit\u6570\u304c\u5c11\u306a\u304f\u6e08\u307f\u307e\u3059\u3002\nIEEE754\u6d6e\u52d5\u5c0f\u6570\u3060\u3068\u3001\n(2^expA * mantA) * (2^expB * mantB) \n\u306f\u3001\n(2^(expA+expB) * (mantA * mantB))\n\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001double \u3060\u3068\u300111bit\u306e\u52a0\u7b97 + 52bit\u306e\u4e57\u7b97\u3001float \u3060\u3068\u30018bit\u306e\u52a0\u7b97 + 23bit\u306e\u4e57\u7b97\u304c\u3042\u308c\u3070\u3088\u3044\u308f\u3051\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001long long \u304c64bit\u306e\u4e57\u7b97\u3001int \u304c 32bit \u306e\u4e57\u7b97\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u306b\u6bd4\u3079\u308b\u3068\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u7684\u306b\u30ea\u30bd\u30fc\u30b9\u304c\u5c11\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\u306d\u3002\n\u4e16\u9593\u7684\u306b\u3001double \u306e\u4e57\u7b97\u306f\u5fc5\u8981\u6027\u304c\u304b\u306a\u308a\u9ad8\u3044\u3067\u3059\u304c\u3001long long \u306e\u4e57\u7b97\u306f\u305d\u308c\u307b\u3069\u4f7f\u3046\u6a5f\u4f1a\u306f\u7121\u3044\u3067\u3059\u3002\n\u7d50\u679c\u3068\u3057\u3066\u3001x64 + SSE2,AVX\u306eCPU\u3067\u306f\u4e57\u7b97\u547d\u4ee4\u304c\u3001\n\n\n\n\nsimd\nscalar\n\n\n\n\n32bit \u6574\u6570\n\u6709\u308b\n\u6709\u308b\n\n\n64bit \u6574\u6570\n\u7121\u3044\n\u6709\u308b\n\n\n32bit \u6d6e\u52d5\u5c0f\u6570\n\u6709\u308b\n\u6709\u308b\n\n\n64bit \u6d6e\u52d5\u5c0f\u6570\n\u6709\u308b\n\u6709\u308b\n\n\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u300164bit \u6574\u6570\u4e57\u7b97\u306f\u3001\u4e26\u5217\u306b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u307e\u3042\u3067\u3082\u300152bit\u4e57\u7b97\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u3093\u3067\u306f\u306a\u3044\uff1f\u3068\u3044\u3046\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\u305d\u308c\u3092\u5b9f\u88c5\u3057\u305f\u306e\u304c\u3001vpmadd52luq, vpmadd52huq \u3067\u3059\u3002\nIEEE754\u3068\u304b\u8003\u3048\u306a\u304f\u3066\u3082\u3001long long \u306e\u4e57\u7b97\u304c\u9045\u304f\u3066\u3001double \u306e\u4e57\u7b97\u304c\u901f\u3044CPU\u304c\u3042\u3063\u305f\u3068\u3059\u308b\u3068\u3001long long \u3092\u4e00\u65e6double \u306b\u5909\u63db\u3057\u3066\u3001\u4e57\u7b97\u3057\u3066\u3001long long \u306b\u623b\u3059\u30c6\u30af\u30cb\u30c3\u30af\u3068\u304b\u8003\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u308c\u306e\u7121\u99c4\u3092\u7701\u3044\u3066\u3044\u308b\u3068\u3082\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\nvpmadd52luq \u306f\u300152bit x 52bit \u3067\u4e57\u7b97\u3057\u3066\u51fa\u308b\u3001104bit\u306e\u3046\u3061\u4e0b\u4f4d52bit \u3092\u3001vpmadd52huq \u306f 104bit \u306e\u3046\u3061\u4e0a\u4f4d52bit\u3092\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u3068 1\u500b\u76ee\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u5024\u309264bit\u52a0\u7b97\u3057\u307e\u3059\u3002\n#include <immintrin.h>\n#include <stdio.h>\n\nunsigned long long in0[8] = {0x8000000000000001ULL, 0x0000000000000001ULL, 0};\nunsigned long long in1[8] = {0xffffffffffffffffULL, 0x0008000000000000ULL, ~0ULL};\nunsigned long long in2[8] = {0x0000000080000000ULL, 0x0008000000000000ULL, ~0ULL};\nunsigned long long out[8];\n\n\nstatic void\ntest_l(void)\n{\n    register __m512i dest __asm__(\"zmm0\") = _mm512_loadu_si512(in0);\n    register __m512i src1 __asm__(\"zmm1\") = _mm512_loadu_si512(in1);\n    register __m512i src2 __asm__(\"zmm2\") = _mm512_loadu_si512(in2);\n\n    __asm__ __volatile__ (\".byte 0x62, 0xf2, 0xf5, 0x48, 0xb4, 0xc2 # vpmadd52luq %%zmm2, %%zmm1, %%zmm0\\n\\t\"\n                          :[dest]\"+v\"(dest)\n                          :[src1]\"v\"(src1),\n                           [src2]\"v\"(src2));\n\n    _mm512_storeu_si512(out, dest);\n\n    int i;\n    for (i=0; i<3; i++) {\n        long long r64 = in1[i] * in2[i] + in0[i];\n        printf(\"%2d:%016llx, %016llx\\n\", i, out[i], r64);\n    }\n}\n\nstatic void\ntest_h(void)\n{\n    register __m512i dest __asm__(\"zmm0\") = _mm512_loadu_si512(in0);\n    register __m512i src1 __asm__(\"zmm1\") = _mm512_loadu_si512(in1);\n    register __m512i src2 __asm__(\"zmm2\") = _mm512_loadu_si512(in2);\n\n    __asm__ __volatile__ (\".byte 0x62, 0xf2, 0xf5, 0x48, 0xb5, 0xc2 # vpmadd52huq %%zmm2, %%zmm1, %%zmm0\\n\\t\"\n                          :[dest]\"+v\"(dest)\n                          :[src1]\"v\"(src1),\n                           [src2]\"v\"(src2));\n\n    _mm512_storeu_si512(out, dest);\n\n    int i;\n    for (i=0; i<3; i++) {\n        printf(\"%2d:%016llx, ________________\\n\", i, out[i]);\n    }\n}\n\n\nint\nmain()\n{\n    printf(\"   %-16s, %-16s\\n\", \"madd52\", \"scalar\");\n    puts(\"vpmadd52luq\");\n    test_l();\n    puts(\"vpmadd52huq\");\n    test_h();\n}\n\n\n $ ./sde -cnl -- ./a.out \n   madd52          , scalar          \nvpmadd52luq\n 0:800fffff80000001, 7fffffff80000001\n 1:0000000000000001, 0000000000000001\n 2:0000000000000004, 0000000000000004\nvpmadd52huq\n 0:8000000080000000, ________________\n 1:0004000000000001, ________________\n 2:000ffffffffffffc, ________________\n\n\u3053\u308c\u306f\u307e\u305f\u5225\u306e AVX-512IFMA52 \u3068\u3044\u3046\u62e1\u5f35\u306b\u306a\u3063\u3066\u3044\u3066\u3001KNL\u3067\u3082Skylake\u3067\u3082\u52d5\u304d\u307e\u305b\u3093\u3002\n\"cnl\" \u306f\u3001Cannonlake \u306e\u3053\u3068\u3067\u3001Skylake\u306e\u6b21\u306eCPU\u306e\u3088\u3046\u3067\u3059\u3002\n\u660e\u65e5\u306f @tanakmura \u304c\u305d\u3046\u3044\u3048\u3070\u66f8\u3044\u3066\u3044\u306a\u304b\u3063\u305f kor \u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\u6d6e\u52d5\u5c0f\u6570\u306e\u4e57\u7b97\u306f\u3001\u6574\u6570\u306e\u4e57\u7b97\u3088\u308abit\u6570\u304c\u5c11\u306a\u304f\u6e08\u307f\u307e\u3059\u3002\n\n\nIEEE754\u6d6e\u52d5\u5c0f\u6570\u3060\u3068\u3001\n\n(2^expA * mantA) * (2^expB * mantB) \n\n\u306f\u3001\n\n(2^(expA+expB) * (mantA * mantB))\n\n\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001double \u3060\u3068\u300111bit\u306e\u52a0\u7b97 + 52bit\u306e\u4e57\u7b97\u3001float \u3060\u3068\u30018bit\u306e\u52a0\u7b97 + 23bit\u306e\u4e57\u7b97\u304c\u3042\u308c\u3070\u3088\u3044\u308f\u3051\u3067\u3059\u3002\n\n\u3053\u308c\u306f\u3001long long \u304c64bit\u306e\u4e57\u7b97\u3001int \u304c 32bit \u306e\u4e57\u7b97\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u306b\u6bd4\u3079\u308b\u3068\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u7684\u306b\u30ea\u30bd\u30fc\u30b9\u304c\u5c11\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\u306d\u3002\n\n\u4e16\u9593\u7684\u306b\u3001double \u306e\u4e57\u7b97\u306f\u5fc5\u8981\u6027\u304c\u304b\u306a\u308a\u9ad8\u3044\u3067\u3059\u304c\u3001long long \u306e\u4e57\u7b97\u306f\u305d\u308c\u307b\u3069\u4f7f\u3046\u6a5f\u4f1a\u306f\u7121\u3044\u3067\u3059\u3002\n\n\u7d50\u679c\u3068\u3057\u3066\u3001x64 + SSE2,AVX\u306eCPU\u3067\u306f\u4e57\u7b97\u547d\u4ee4\u304c\u3001\n\n|                   | simd | scalar |\n|------------------|-----|-------|\n| 32bit \u6574\u6570        | \u6709\u308b | \u6709\u308b   |\n| 64bit \u6574\u6570        | **\u7121\u3044** | \u6709\u308b   |\n| 32bit \u6d6e\u52d5\u5c0f\u6570    | \u6709\u308b | \u6709\u308b   |\n| 64bit \u6d6e\u52d5\u5c0f\u6570    | \u6709\u308b | \u6709\u308b   |\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u300164bit \u6574\u6570\u4e57\u7b97\u306f\u3001\u4e26\u5217\u306b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u307e\u3042\u3067\u3082\u300152bit\u4e57\u7b97\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u3060\u304b\u3089\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u3093\u3067\u306f\u306a\u3044\uff1f\u3068\u3044\u3046\u6c17\u304c\u3057\u307e\u3059\u306d\u3002\u305d\u308c\u3092\u5b9f\u88c5\u3057\u305f\u306e\u304c\u3001vpmadd52luq, vpmadd52huq \u3067\u3059\u3002\n\n\nIEEE754\u3068\u304b\u8003\u3048\u306a\u304f\u3066\u3082\u3001long long \u306e\u4e57\u7b97\u304c\u9045\u304f\u3066\u3001double \u306e\u4e57\u7b97\u304c\u901f\u3044CPU\u304c\u3042\u3063\u305f\u3068\u3059\u308b\u3068\u3001long long \u3092\u4e00\u65e6double \u306b\u5909\u63db\u3057\u3066\u3001\u4e57\u7b97\u3057\u3066\u3001long long \u306b\u623b\u3059\u30c6\u30af\u30cb\u30c3\u30af\u3068\u304b\u8003\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u308c\u306e\u7121\u99c4\u3092\u7701\u3044\u3066\u3044\u308b\u3068\u3082\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\nvpmadd52luq \u306f\u300152bit x 52bit \u3067\u4e57\u7b97\u3057\u3066\u51fa\u308b\u3001104bit\u306e\u3046\u3061\u4e0b\u4f4d52bit \u3092\u3001vpmadd52huq \u306f 104bit \u306e\u3046\u3061\u4e0a\u4f4d52bit\u3092\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u3068 1\u500b\u76ee\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u5024\u309264bit\u52a0\u7b97\u3057\u307e\u3059\u3002\n\n\n```cpp\n#include <immintrin.h>\n#include <stdio.h>\n\nunsigned long long in0[8] = {0x8000000000000001ULL, 0x0000000000000001ULL, 0};\nunsigned long long in1[8] = {0xffffffffffffffffULL, 0x0008000000000000ULL, ~0ULL};\nunsigned long long in2[8] = {0x0000000080000000ULL, 0x0008000000000000ULL, ~0ULL};\nunsigned long long out[8];\n\n\nstatic void\ntest_l(void)\n{\n    register __m512i dest __asm__(\"zmm0\") = _mm512_loadu_si512(in0);\n    register __m512i src1 __asm__(\"zmm1\") = _mm512_loadu_si512(in1);\n    register __m512i src2 __asm__(\"zmm2\") = _mm512_loadu_si512(in2);\n\n    __asm__ __volatile__ (\".byte 0x62, 0xf2, 0xf5, 0x48, 0xb4, 0xc2 # vpmadd52luq %%zmm2, %%zmm1, %%zmm0\\n\\t\"\n                          :[dest]\"+v\"(dest)\n                          :[src1]\"v\"(src1),\n                           [src2]\"v\"(src2));\n\n    _mm512_storeu_si512(out, dest);\n\n    int i;\n    for (i=0; i<3; i++) {\n        long long r64 = in1[i] * in2[i] + in0[i];\n        printf(\"%2d:%016llx, %016llx\\n\", i, out[i], r64);\n    }\n}\n\nstatic void\ntest_h(void)\n{\n    register __m512i dest __asm__(\"zmm0\") = _mm512_loadu_si512(in0);\n    register __m512i src1 __asm__(\"zmm1\") = _mm512_loadu_si512(in1);\n    register __m512i src2 __asm__(\"zmm2\") = _mm512_loadu_si512(in2);\n\n    __asm__ __volatile__ (\".byte 0x62, 0xf2, 0xf5, 0x48, 0xb5, 0xc2 # vpmadd52huq %%zmm2, %%zmm1, %%zmm0\\n\\t\"\n                          :[dest]\"+v\"(dest)\n                          :[src1]\"v\"(src1),\n                           [src2]\"v\"(src2));\n\n    _mm512_storeu_si512(out, dest);\n\n    int i;\n    for (i=0; i<3; i++) {\n        printf(\"%2d:%016llx, ________________\\n\", i, out[i]);\n    }\n}\n\n\nint\nmain()\n{\n    printf(\"   %-16s, %-16s\\n\", \"madd52\", \"scalar\");\n    puts(\"vpmadd52luq\");\n    test_l();\n    puts(\"vpmadd52huq\");\n    test_h();\n}\n\n```\n\n```\n $ ./sde -cnl -- ./a.out \n   madd52          , scalar          \nvpmadd52luq\n 0:800fffff80000001, 7fffffff80000001\n 1:0000000000000001, 0000000000000001\n 2:0000000000000004, 0000000000000004\nvpmadd52huq\n 0:8000000080000000, ________________\n 1:0004000000000001, ________________\n 2:000ffffffffffffc, ________________\n```\n\n\n\u3053\u308c\u306f\u307e\u305f\u5225\u306e AVX-512IFMA52 \u3068\u3044\u3046\u62e1\u5f35\u306b\u306a\u3063\u3066\u3044\u3066\u3001KNL\u3067\u3082Skylake\u3067\u3082\u52d5\u304d\u307e\u305b\u3093\u3002\n\n\"cnl\" \u306f\u3001Cannonlake \u306e\u3053\u3068\u3067\u3001Skylake\u306e\u6b21\u306eCPU\u306e\u3088\u3046\u3067\u3059\u3002\n\n\n\u660e\u65e5\u306f @tanakmura \u304c\u305d\u3046\u3044\u3048\u3070\u66f8\u3044\u3066\u3044\u306a\u304b\u3063\u305f kor \u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n"}