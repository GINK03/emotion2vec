{"context": "Spark\u30b7\u30ea\u30fc\u30ba\u7b2c\uff12\u5f3e\u3067\u3059\u3002\u4eca\u5ea6\u306fMLlib\u3092\u4f7f\u3063\u3066\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u7528\u3044\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\u7b2c\u4e00\u5f3e\n\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011iPython Notebook\u3067Spark\u3092\u8d77\u52d5\u3055\u305b\u3066MLlib\u3092\u8a66\u3059\n\u3000\u3000\u3000http://qiita.com/kenmatsu4/items/00ad151e857d546a97c3\n\u74b0\u5883\n\nOS: Mac OSX Yosemite 10.10.3\nSpark: spark-1.5.0-bin-hadoop2.6\nPython: 2.7.10 |Anaconda 2.2.0 (x86_64)| (default, May 28 2015, 17:04:42) \n\n\u672c\u7a3f\u3067\u306f\u4e0a\u8a18\u306e\u74b0\u5883\u3067\u884c\u3063\u305f\u3082\u306e\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4ed6\u306e\u74b0\u5883\u3067\u306f\u8a2d\u5b9a\u304c\u7570\u306a\u308b\u5834\u5408\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u57fa\u672c\u7684\u306biPython Notebook\u3067\u306eSpark\u306e\u5b9f\u884c\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u3001\u524d\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n1. Spark\u306e\u8d77\u52d5\n\u307e\u305a\u306fSpark\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n# Spark\u306e\u8d77\u52d5\nimport os, sys\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime as dt\nprint \"loading PySpark setting...\"\nspark_home = os.environ.get('SPARK_HOME', None)\nprint spark_home\nif not spark_home:\n    raise ValueError('SPARK_HOME environment variable is not set')\nsys.path.insert(0, os.path.join(spark_home, 'python'))\nsys.path.insert(0, os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip'))\nexecfile(os.path.join(spark_home, 'python/pyspark/shell.py'))\n\n\n2.\u30c7\u30fc\u30bf\u306e\u6e96\u5099\nSpark\u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3067\u3001MovieLens\u3068\u3044\u3046\u6620\u753b\u306e\u30ec\u30d3\u30e5\u30fc\u60c5\u5831\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3001SPARK_HOME\u306b\u3042\u308b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n# Example\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ndf = pd.read_csv(os.path.join(spark_home, 'data/mllib/als/sample_movielens_ratings.txt'),\n                 delimiter='::', names=('uid', 'iid', 'rating','time'),engine='python')\npv_rating = df.pivot(index='uid', columns='iid', values='rating').fillna(0)\n\nprint pv_rating\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\nuid\u306f\u30e6\u30fc\u30b6\u30fcID, iid\u306f\u30a2\u30a4\u30c6\u30e0(\u6620\u753b)ID\u3001\u4e2d\u306e\u30c7\u30fc\u30bf\u306f\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306e\u6620\u753b\u306erating\u3067\u3059\u3002\n\n\n\nuid\uff3ciid\n0\n1\n2\n3\n4\n...\n95\n96\n97\n98\n99\n\n\n\n\n0\n0\n0\n3\n1\n0\n...\n2\n1\n0\n1\n1\n\n\n1\n0\n0\n2\n1\n2\n...\n0\n1\n1\n0\n0\n\n\n2\n0\n0\n0\n0\n3\n...\n0\n0\n0\n0\n0\n\n\n3\n1\n1\n1\n0\n0\n...\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n...\n\n\n\n\n\n\n\n27\n1\n0\n0\n0\n0\n...\n1\n0\n0\n1\n0\n\n\n28\n3\n1\n4\n1\n0\n...\n2\n0\n0\n1\n1\n\n\n29\n0\n0\n0\n1\n1\n...\n0\n0\n1\n0\n1\n\n\n\n\n3. \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\n\u307e\u305a\u306f\u3069\u3093\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308b\u304b\u3001\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n# Rating\u306e\u53ef\u8996\u5316\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nn_y, n_x = pv_rating.shape\nX, Y = np.meshgrid(range(n_x+1), range(n_y+1))\nZ = pv_rating.as_matrix()\nZ.astype(np.float32)\nZ = Z[::-1,:]\nprint Z.shape\nfig = plt.figure(figsize=(19,5))\nax = plt.subplot(111)\nplt.ylim(0,30)\nplt.xlim(0,99)\nax.set_xticks([])\nax.set_yticks([])\ncax = ax.pcolor(X, Y, Z, cmap=cm.get_cmap('ocean_r'), alpha=0.6)\n\ncbar = fig.colorbar(cax, ticks=range(6))\n#cbar.ax.set_yticklabels(['5', '4', '3', '2', '1', '0'])# vertically oriented colorbar\nplt.show()\n\n\u7e26\u8ef8\u304c\u30e6\u30fc\u30b6\u30fc\u3001\u6a2a\u8ef8\u304c\u6620\u753b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u767d\u3044\u3068\u3053\u308d\u306frating(\u6620\u753b\u306e\u8a55\u4fa1)\u304c\u306a\u3044\u3068\u3053\u308d\u3002\u8272\u304c\u3042\u308b\u3068\u3053\u308d\u306frating\u60c5\u5831\u304c\u3042\u308a\u3001\u53f3\u306e\u30d0\u30fc\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u6570\u5024\u304c\u8272\u5206\u3051\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n4.\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\n\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u3002Spark\u306b\u4ed8\u5c5e\u306eMLlib\u306b\u3042\u308bALS(Alternating Least Squares)\u3068\u3044\u3046\u624b\u6cd5\u3067\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u3044\u3046\u624b\u6cd5\u3067\u3001\u3042\u308b\u30e6\u30fc\u30b6\u3068\u55dc\u597d(\u3053\u3053\u3067\u306f\u6620\u753b\u306erating)\u306e\u985e\u4f3c\u3057\u305f\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u60c5\u5831\u3092\u7528\u3044\u3066\u63a8\u8ad6\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3059\u3002\u6620\u753b\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3042\u308b\u610f\u5473\u7121\u8996\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u884c\u52d5\u304b\u3089\u63a8\u8ad6\u3059\u308b\u3068\u3053\u308d\u304c\u7279\u5fb4\u306e\u4e00\u3064\u3067\u3059\u3002\n\u3055\u3063\u305d\u304f\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\nfrom pyspark.mllib.recommendation import ALS, MatrixFactorizationModel, Rating\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u6e96\u5099\nsc_rating = sc.parallelize(df.as_matrix())\nratings = sc_rating.map(lambda l: Rating(int(l[0]), int(l[1]), float(l[2])))\n\n# ALS(Alternating Least Squares)\u3067\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u751f\u6210\nrank = 10\nnumIterations = 10\nmodel = ALS.train(ratings, rank, numIterations)\n\n# \u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u304b\u3089\u30c7\u30fc\u30bf\u304c\u306a\u304b\u3063\u305f\u90e8\u5206\u306brating\u3092\u4ed8\u4e0e\u3059\u308b \nn_y, n_x = pv_rating.shape\nX, Y = np.meshgrid(range(n_x+1), range(n_y+1))\nf_XY = np.c_[Y.flatten(), X.flatten()]\npredictions_all = model.predictAll(sc.parallelize(f_XY)).map(lambda r: ((r[0], r[1]), limitter(r[2]) ))\n\ndef selector(x, y):\n    if x is None:\n        return y\n    elif x != 0:\n        return x\n    else:\n        return y\n\n# \u3059\u3067\u306brating\u304c\u3042\u308b\u3068\u3053\u308d\u306f\u30ad\u30fc\u30d7\u3057\u3066\u3001\u7121\u3044\u3068\u3053\u308d\u306bALS\u3067\u8a08\u7b97\u3057\u305f\u5024\u3092\u4ee3\u5165\nratesAndPreds = ratings.map(lambda r: ((r[0], r[1]), r[2])).rightOuterJoin(predictions_all).map(lambda r: ((r[0][0], r[0][1]), selector(r[1][0], r[1][1])) )\n\nresult = np.array(ratesAndPreds.sortBy(lambda x: (x[0], x[1])).collect())\nZ = result[:,1]\nZ = Z.astype(np.float32).reshape(pv_rating.shape)[::-1,:]\n\n\u63a8\u6e2c\u3057\u305f\u7d50\u679c\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\u524d\u306e\u30b0\u30e9\u30d5\u3060\u3068\u3001\u767d\u3044\u90e8\u5206\uff08rating\u304c\u306a\u3044\u90e8\u5206\uff09\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u307b\u3068\u3093\u3069\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff01\u3053\u306e\u3001\u7a7a\u767d\u3060\u3063\u305f\u3068\u3053\u308d\u306b\u6570\u5024\u304c\u5165\u3063\u305f\u3068\u3053\u308d\u304c\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u60c5\u5831\u3067\u3059\u3002\u3053\u308c\u3092\u4e00\u5b9a\u306e\u95be\u5024\u3092\u8a2d\u3051\u3066\u300c\u305d\u308c\u4ee5\u4e0a\u306a\u3089\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u300d\u3001\u3068\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u306d  \nfig = plt.figure(figsize=(19,5))\nax = plt.subplot(111)\nplt.ylim(0,29)\nplt.xlim(0,99)\nax.set_xticks([])\nax.set_yticks([])\n\ncax = ax.pcolor(X, Y, Z, cmap=cm.get_cmap('ocean_r'), alpha=0.6)\ncbar = fig.colorbar(cax, ticks=range(6))\n\nplt.show()\n\n\n\u6700\u5f8c\u306b\u3001\u4eca\u56de\u306e\u5b66\u7fd2\u306e\u7cbe\u5ea6\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u3082\u3068\u3082\u3068rating\u304c\u3042\u308b\u3068\u3053\u308d\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u3057\u305f\u6570\u5024\u304c\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3001\u3092\u5e73\u5747\uff12\u4e57\u8aa4\u5dee\u3067\u6e2c\u308a\u307e\u3059\u3002\n# \u7cbe\u5ea6\u306e\u8a08\u7b97\ntestdata = ratings.map(lambda p: (p[0], p[1]))\n\npredictions = model.predictAll(testdata).map(lambda r: ((r[0], r[1]), limitter(r[2]) ))\n\nratesAndPreds = ratings.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\n\nMSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\nprint(\"Mean Squared Error = \" + str(MSE))\n\n\nout\n# \u5e73\u5747\uff12\u4e57\u8aa4\u5dee\nMean Squared Error = 0.0558736464582\n\n\n\u307e\u305f\u3001\u7d50\u679c\u3092\u6570\u5024\u3067\u898b\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002rating\u304c\u3042\u308b\u3068\u3053\u308d\u306f\u8fd1\u3044\u6570\u5b57\u306b\u306a\u3063\u3066\u304a\u308a\u3001None\u306e\u3068\u3053\u308d\u306f\u4e88\u6e2c\u3057\u305frating\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\nout\n ((uid, iid), (rating, predict))\n[((29, 17), (3.0, 2.9547048179008057)),\n ((23, 51), (None, 1.421916504776083)),\n ((11, 7), (None, 1.9669319580489901)),\n ((28, 10), (None, 0.06769150007295854)),\n ((9, 93), (None, 2.349846935916598)),\n ((23, 91), (None, 2.597452490149535)),\n ((17, 13), (2.0, 2.0700773308441507)),\n ((16, 38), (1.0, 0.8512992797830536)),\n ((22, 12), (None, 3.331810711043588)),\n ((12, 50), (4.0, 4.095528922729588)),\n ((11, 15), (None, 1.1874705514088135)),\n ((22, 52), (None, 3.4707062021048283)),\n ((0, 14), (None, 0.503229802782621)),\n ((8, 94), (None, 1.0007500227764983)),\n ((29, 89), (None, 0.4272431835442813)),\n ((5, 1), (1.0, 1.2148556310982808)),\n ((4, 42), (None, 1.030942641195369)),\n ((25, 13), (None, 1.5033919417064503)),\n ((3, 55), (None, 2.50649511105159))]\n\n\n\n\u53c2\u8003\nSpark 1.5.0 Machine Learning Library (MLlib) Guide\n\u3000http://spark.apache.org/docs/latest/mllib-guide.html\nMLlib - Collaborative Filtering\n\u3000http://spark.apache.org/docs/latest/mllib-collaborative-filtering.html\nMovie Recommendation with MLlib\n\u3000https://databricks-training.s3.amazonaws.com/movie-recommendation-with-mllib.html\n\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9(GitHub)\nhttps://github.com/matsuken92/Qiita_Contents/blob/master/MLlib_recommendation/Spark_MLlib-recommendation.ipynb\nSpark\u30b7\u30ea\u30fc\u30ba\u7b2c\uff12\u5f3e\u3067\u3059\u3002\u4eca\u5ea6\u306fMLlib\u3092\u4f7f\u3063\u3066\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u7528\u3044\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\n**\u7b2c\u4e00\u5f3e**\n\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011iPython Notebook\u3067Spark\u3092\u8d77\u52d5\u3055\u305b\u3066MLlib\u3092\u8a66\u3059\n\u3000\u3000\u3000http://qiita.com/kenmatsu4/items/00ad151e857d546a97c3\n\n**\u74b0\u5883**\n\n* OS: Mac OSX Yosemite 10.10.3\n* Spark: spark-1.5.0-bin-hadoop2.6\n* Python: 2.7.10 |Anaconda 2.2.0 (x86_64)| (default, May 28 2015, 17:04:42) \n\n\u672c\u7a3f\u3067\u306f\u4e0a\u8a18\u306e\u74b0\u5883\u3067\u884c\u3063\u305f\u3082\u306e\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4ed6\u306e\u74b0\u5883\u3067\u306f\u8a2d\u5b9a\u304c\u7570\u306a\u308b\u5834\u5408\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u57fa\u672c\u7684\u306biPython Notebook\u3067\u306eSpark\u306e\u5b9f\u884c\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u3001[\u524d\u8a18\u4e8b](http://qiita.com/kenmatsu4/items/00ad151e857d546a97c3)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n#1. Spark\u306e\u8d77\u52d5\n\n\u307e\u305a\u306fSpark\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```py \n# Spark\u306e\u8d77\u52d5\nimport os, sys\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime as dt\nprint \"loading PySpark setting...\"\nspark_home = os.environ.get('SPARK_HOME', None)\nprint spark_home\nif not spark_home:\n    raise ValueError('SPARK_HOME environment variable is not set')\nsys.path.insert(0, os.path.join(spark_home, 'python'))\nsys.path.insert(0, os.path.join(spark_home, 'python/lib/py4j-0.8.2.1-src.zip'))\nexecfile(os.path.join(spark_home, 'python/pyspark/shell.py'))\n```\n\n# 2.\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\nSpark\u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3067\u3001MovieLens\u3068\u3044\u3046\u6620\u753b\u306e\u30ec\u30d3\u30e5\u30fc\u60c5\u5831\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3001SPARK_HOME\u306b\u3042\u308b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```py \n# Example\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ndf = pd.read_csv(os.path.join(spark_home, 'data/mllib/als/sample_movielens_ratings.txt'),\n                 delimiter='::', names=('uid', 'iid', 'rating','time'),engine='python')\npv_rating = df.pivot(index='uid', columns='iid', values='rating').fillna(0)\n\nprint pv_rating\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\nuid\u306f\u30e6\u30fc\u30b6\u30fcID, iid\u306f\u30a2\u30a4\u30c6\u30e0(\u6620\u753b)ID\u3001\u4e2d\u306e\u30c7\u30fc\u30bf\u306f\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306e\u6620\u753b\u306erating\u3067\u3059\u3002\n\n<table>\n  <thead>\n    <tr>\n      <th>uid\uff3ciid</th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>...</th>\n      <th>95</th>\n      <th>96</th>\n      <th>97</th>\n      <th>98</th>\n      <th>99</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th></th>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>...</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n\n\n# 3. \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\n\u307e\u305a\u306f\u3069\u3093\u306a\u30c7\u30fc\u30bf\u3067\u3042\u308b\u304b\u3001\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py \n# Rating\u306e\u53ef\u8996\u5316\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nn_y, n_x = pv_rating.shape\nX, Y = np.meshgrid(range(n_x+1), range(n_y+1))\nZ = pv_rating.as_matrix()\nZ.astype(np.float32)\nZ = Z[::-1,:]\nprint Z.shape\nfig = plt.figure(figsize=(19,5))\nax = plt.subplot(111)\nplt.ylim(0,30)\nplt.xlim(0,99)\nax.set_xticks([])\nax.set_yticks([])\ncax = ax.pcolor(X, Y, Z, cmap=cm.get_cmap('ocean_r'), alpha=0.6)\n\ncbar = fig.colorbar(cax, ticks=range(6))\n#cbar.ax.set_yticklabels(['5', '4', '3', '2', '1', '0'])# vertically oriented colorbar\nplt.show()\n```\n\n\u7e26\u8ef8\u304c\u30e6\u30fc\u30b6\u30fc\u3001\u6a2a\u8ef8\u304c\u6620\u753b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u767d\u3044\u3068\u3053\u308d\u306frating(\u6620\u753b\u306e\u8a55\u4fa1)\u304c\u306a\u3044\u3068\u3053\u308d\u3002\u8272\u304c\u3042\u308b\u3068\u3053\u308d\u306frating\u60c5\u5831\u304c\u3042\u308a\u3001\u53f3\u306e\u30d0\u30fc\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u6570\u5024\u304c\u8272\u5206\u3051\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![rating1-compressor.png](https://qiita-image-store.s3.amazonaws.com/0/50670/5a9d8072-7ddf-0419-d3ad-ed0945b4f191.png)\n\n\n# 4.\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\n\n\u3053\u3053\u304b\u3089\u304c\u672c\u984c\u3002Spark\u306b\u4ed8\u5c5e\u306eMLlib\u306b\u3042\u308bALS(Alternating Least Squares)\u3068\u3044\u3046\u624b\u6cd5\u3067\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u3044\u3046\u624b\u6cd5\u3067\u3001\u3042\u308b\u30e6\u30fc\u30b6\u3068\u55dc\u597d(\u3053\u3053\u3067\u306f\u6620\u753b\u306erating)\u306e\u985e\u4f3c\u3057\u305f\u4ed6\u306e\u30e6\u30fc\u30b6\u306e\u60c5\u5831\u3092\u7528\u3044\u3066\u63a8\u8ad6\u3092\u884c\u3046\u65b9\u6cd5\u3067\u3059\u3002\u6620\u753b\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3042\u308b\u610f\u5473\u7121\u8996\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u884c\u52d5\u304b\u3089\u63a8\u8ad6\u3059\u308b\u3068\u3053\u308d\u304c\u7279\u5fb4\u306e\u4e00\u3064\u3067\u3059\u3002\n\n\n\u3055\u3063\u305d\u304f\u3001\u30c7\u30fc\u30bf\u304b\u3089\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\n```py \nfrom pyspark.mllib.recommendation import ALS, MatrixFactorizationModel, Rating\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u6e96\u5099\nsc_rating = sc.parallelize(df.as_matrix())\nratings = sc_rating.map(lambda l: Rating(int(l[0]), int(l[1]), float(l[2])))\n\n# ALS(Alternating Least Squares)\u3067\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u751f\u6210\nrank = 10\nnumIterations = 10\nmodel = ALS.train(ratings, rank, numIterations)\n\n# \u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u304b\u3089\u30c7\u30fc\u30bf\u304c\u306a\u304b\u3063\u305f\u90e8\u5206\u306brating\u3092\u4ed8\u4e0e\u3059\u308b \nn_y, n_x = pv_rating.shape\nX, Y = np.meshgrid(range(n_x+1), range(n_y+1))\nf_XY = np.c_[Y.flatten(), X.flatten()]\npredictions_all = model.predictAll(sc.parallelize(f_XY)).map(lambda r: ((r[0], r[1]), limitter(r[2]) ))\n\ndef selector(x, y):\n    if x is None:\n        return y\n    elif x != 0:\n        return x\n    else:\n        return y\n\n# \u3059\u3067\u306brating\u304c\u3042\u308b\u3068\u3053\u308d\u306f\u30ad\u30fc\u30d7\u3057\u3066\u3001\u7121\u3044\u3068\u3053\u308d\u306bALS\u3067\u8a08\u7b97\u3057\u305f\u5024\u3092\u4ee3\u5165\nratesAndPreds = ratings.map(lambda r: ((r[0], r[1]), r[2])).rightOuterJoin(predictions_all).map(lambda r: ((r[0][0], r[0][1]), selector(r[1][0], r[1][1])) )\n                                                                  \nresult = np.array(ratesAndPreds.sortBy(lambda x: (x[0], x[1])).collect())\nZ = result[:,1]\nZ = Z.astype(np.float32).reshape(pv_rating.shape)[::-1,:]\n```\n\n\u63a8\u6e2c\u3057\u305f\u7d50\u679c\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\u3002\u524d\u306e\u30b0\u30e9\u30d5\u3060\u3068\u3001\u767d\u3044\u90e8\u5206\uff08rating\u304c\u306a\u3044\u90e8\u5206\uff09\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u307b\u3068\u3093\u3069\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff01\u3053\u306e\u3001\u7a7a\u767d\u3060\u3063\u305f\u3068\u3053\u308d\u306b\u6570\u5024\u304c\u5165\u3063\u305f\u3068\u3053\u308d\u304c\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u60c5\u5831\u3067\u3059\u3002\u3053\u308c\u3092\u4e00\u5b9a\u306e\u95be\u5024\u3092\u8a2d\u3051\u3066\u300c\u305d\u308c\u4ee5\u4e0a\u306a\u3089\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u300d\u3001\u3068\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u306d :smile: \n\n```py \nfig = plt.figure(figsize=(19,5))\nax = plt.subplot(111)\nplt.ylim(0,29)\nplt.xlim(0,99)\nax.set_xticks([])\nax.set_yticks([])\n\ncax = ax.pcolor(X, Y, Z, cmap=cm.get_cmap('ocean_r'), alpha=0.6)\ncbar = fig.colorbar(cax, ticks=range(6))\n\nplt.show()\n```\n\n![rating2-compressor.png](https://qiita-image-store.s3.amazonaws.com/0/50670/7e508802-0e25-e87a-49cf-3b4f89c0a8de.png)\n\n\n\u6700\u5f8c\u306b\u3001\u4eca\u56de\u306e\u5b66\u7fd2\u306e\u7cbe\u5ea6\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u3082\u3068\u3082\u3068rating\u304c\u3042\u308b\u3068\u3053\u308d\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u3057\u305f\u6570\u5024\u304c\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3001\u3092\u5e73\u5747\uff12\u4e57\u8aa4\u5dee\u3067\u6e2c\u308a\u307e\u3059\u3002\n\n```py \n# \u7cbe\u5ea6\u306e\u8a08\u7b97\ntestdata = ratings.map(lambda p: (p[0], p[1]))\n\npredictions = model.predictAll(testdata).map(lambda r: ((r[0], r[1]), limitter(r[2]) ))\n\nratesAndPreds = ratings.map(lambda r: ((r[0], r[1]), r[2])).join(predictions)\n\nMSE = ratesAndPreds.map(lambda r: (r[1][0] - r[1][1])**2).mean()\nprint(\"Mean Squared Error = \" + str(MSE))\n```\n\n```log:out\n# \u5e73\u5747\uff12\u4e57\u8aa4\u5dee\nMean Squared Error = 0.0558736464582\n```\n\n\u307e\u305f\u3001\u7d50\u679c\u3092\u6570\u5024\u3067\u898b\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002rating\u304c\u3042\u308b\u3068\u3053\u308d\u306f\u8fd1\u3044\u6570\u5b57\u306b\u306a\u3063\u3066\u304a\u308a\u3001None\u306e\u3068\u3053\u308d\u306f\u4e88\u6e2c\u3057\u305frating\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\n```log:out\n ((uid, iid), (rating, predict))\n[((29, 17), (3.0, 2.9547048179008057)),\n ((23, 51), (None, 1.421916504776083)),\n ((11, 7), (None, 1.9669319580489901)),\n ((28, 10), (None, 0.06769150007295854)),\n ((9, 93), (None, 2.349846935916598)),\n ((23, 91), (None, 2.597452490149535)),\n ((17, 13), (2.0, 2.0700773308441507)),\n ((16, 38), (1.0, 0.8512992797830536)),\n ((22, 12), (None, 3.331810711043588)),\n ((12, 50), (4.0, 4.095528922729588)),\n ((11, 15), (None, 1.1874705514088135)),\n ((22, 52), (None, 3.4707062021048283)),\n ((0, 14), (None, 0.503229802782621)),\n ((8, 94), (None, 1.0007500227764983)),\n ((29, 89), (None, 0.4272431835442813)),\n ((5, 1), (1.0, 1.2148556310982808)),\n ((4, 42), (None, 1.030942641195369)),\n ((25, 13), (None, 1.5033919417064503)),\n ((3, 55), (None, 2.50649511105159))]\n```\n\n# \u53c2\u8003\nSpark 1.5.0 Machine Learning Library (MLlib) Guide\n\u3000http://spark.apache.org/docs/latest/mllib-guide.html\n\nMLlib - Collaborative Filtering\n\u3000http://spark.apache.org/docs/latest/mllib-collaborative-filtering.html\n\nMovie Recommendation with MLlib\n\u3000https://databricks-training.s3.amazonaws.com/movie-recommendation-with-mllib.html\n\n\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9(GitHub)\nhttps://github.com/matsuken92/Qiita_Contents/blob/master/MLlib_recommendation/Spark_MLlib-recommendation.ipynb\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "Spark", "MachineLearning", "MLlib"]}