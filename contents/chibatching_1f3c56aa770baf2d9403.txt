{"tags": ["Android", "Kotlin", "RxAndroid"], "context": "\n\n(\u8ffd\u8a18)\n\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u518d\u751f\u6210\u6642\u306b\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u7279\u5225\u306a\u4e8b\u60c5\u304c\u306a\u3044\u9650\u308a\u4f7f\u7528\u3057\u306a\u3044\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3067\u3059\u304c\u3001DialogFragment\u3067\u751f\u6210\u3057\u305f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u30dc\u30bf\u30f3\u30af\u30ea\u30c3\u30af\u3092RxAndroid(RxJava)\u306eObservable\u3068\u3057\u3066\u6271\u3044\u305f\u304f\u3066\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u306e\u30e1\u30e2\u3002\n\nObservable\u306b\u3057\u305f\u3044\u3051\u3069\u2026\n\u500b\u4eba\u7684\u306a\u597d\u307f\u306e\u554f\u984c\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304cDialogFragment\u3092show\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067Observable\u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001DialogFragment\u306b\u304a\u3044\u3066\u30c0\u30a4\u30a2\u30ed\u30b0\u672c\u4f53\u306e\u751f\u6210\u306fonCreateDialog\u3067\u884c\u3063\u3066\u3044\u308b\u305f\u3081show\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u306f\u751f\u6210\u6e08\u307f\u3067\u3059\u3002\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u30dc\u30bf\u30f3\uff06\u30af\u30ea\u30c3\u30af\u306e\u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0\u3057\u3066\u3082\u30dc\u30bf\u30f3\u81ea\u4f53\u304c\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\nshow\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u81ea\u5206\u81ea\u8eab\u3092FragmentManager\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\u2026\n\u306a\u306e\u3067\u3001onCreateDialog\u3067\u751f\u6210\u3057\u305f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u30dc\u30bf\u30f3\u30af\u30ea\u30c3\u30af\u6642\u306e\u52d5\u4f5c\u3092show\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nObservable\u306aDialogFragment(\u306e\u30c0\u30a4\u30a2\u30ed\u30b0)\n\nDialogFragment\u5074\u306e\u5b9f\u88c5\nshow\u306e\u4ee3\u308f\u308a\u306b\u5b9f\u884c\u3059\u308bshowObservableDialog\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nonCreateDialog\u306e\u6642\u70b9\u3067\u306f\u3001\u4eee\u306e\u4f55\u3082\u3057\u306a\u3044\u95a2\u6570\u3092\u7a81\u3063\u8fbc\u3093\u3067\u304a\u3044\u3066Observable.create\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067onNext\u7b49\u3005\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\nLoginDialog\npublic class LoginDialog : DialogFragment() {\n\n    private var mOnPositiveClick = { }\n    private var mOnNegativeClick = { }\n\n    fun showObservableDialog(manager: FragmentManager, tag: String?): Observable<Boolean> {\n        super.show(manager, tag)\n        return Observable.create<Boolean> {\n            mOnPositiveClick = {\n                it.onNext(true)\n                it.onCompleted()\n                this.dismiss()\n            }\n            mOnNegativeClick = {\n                it.onCompleted()\n                this.dismiss()\n            }\n        }.subscribeOn(AndroidSchedulers.mainThread())\n    }\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog? {\n        return AlertDialog.Builder(getActivity())\n                .setTitle(R.string.login)\n                .setMessage(R.string.login_message)\n                .setPositiveButton(R.string.login, { dialog, witch -> mOnPositiveClick() })\n                .setNegativeButton(R.string.cancel, { dialog, witch -> mOnNegativeClick() })\n                .create()\n    }\n}\n\n\n\n\u547c\u3073\u51fa\u3057\u5074\u306e\u5b9f\u88c5\n\u4eca\u56de\u306f\u3053\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8d77\u70b9\u306b\u306a\u308b\u306e\u3067\u3001\u6700\u521d\u306bshowObservableDialog\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089\u7d9a\u304f\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fWebView\u3067OAuth\u8a8d\u8a3c\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\nAuthActivity\nLoginDialog().showObservableDialog(getSupportFragmentManager(), null)\n                .flatMap { retrieveRequestToken() }\n                .flatMap { showLoginWebView(it) }\n                .flatMap { retrieveAccessToken(it) }\n                .flatMap { getUserInfo(it) }\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe (\n                        { success -> this.finish() },\n                        { error -> toast(\"Error!\") } )\n\n\n\n\u304a\u308f\u308a\n\u9762\u5012\u306a\u3053\u3068\u3084\u3063\u3066\u308b\u3051\u3069\u3001\u601d\u3063\u305f\u3088\u308a\u3059\u3063\u304d\u308a\u66f8\u3051\u305f\u3002\n\u4eca\u56de\u306e\u4f8b\u3060\u3068\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8d77\u70b9\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u306e\u5229\u70b9\u306f\u7121\u3044\u3051\u3069\u3001\u51e6\u7406\u306e\u9014\u4e2d\u3067\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u5fc5\u8981\u306a\u3068\u304d\u306f\u5f79\u306b\u7acb\u3064\u3068\u601d\u3046\u3002\nJava\u3060\u3068Interface\u4f7f\u3048\u3070\u3084\u308c\u305d\u3046\uff1f\uff08\u8a66\u3057\u3066\u306a\u3044\uff09\n## **(\u8ffd\u8a18)**\n\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u518d\u751f\u6210\u6642\u306b\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u7279\u5225\u306a\u4e8b\u60c5\u304c\u306a\u3044\u9650\u308a\u4f7f\u7528\u3057\u306a\u3044\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3067\u3059\u304c\u3001DialogFragment\u3067\u751f\u6210\u3057\u305f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u30dc\u30bf\u30f3\u30af\u30ea\u30c3\u30af\u3092RxAndroid(RxJava)\u306eObservable\u3068\u3057\u3066\u6271\u3044\u305f\u304f\u3066\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u306e\u30e1\u30e2\u3002\n\n## Observable\u306b\u3057\u305f\u3044\u3051\u3069\u2026\n\n\u500b\u4eba\u7684\u306a\u597d\u307f\u306e\u554f\u984c\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304cDialogFragment\u3092`show`\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067Observable\u3092\u8fd4\u3057\u3066\u307b\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001DialogFragment\u306b\u304a\u3044\u3066\u30c0\u30a4\u30a2\u30ed\u30b0\u672c\u4f53\u306e\u751f\u6210\u306f`onCreateDialog`\u3067\u884c\u3063\u3066\u3044\u308b\u305f\u3081`show`\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u30c0\u30a4\u30a2\u30ed\u30b0\u306f\u751f\u6210\u6e08\u307f\u3067\u3059\u3002\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30c0\u30a4\u30a2\u30ed\u30b0\u306b\u30dc\u30bf\u30f3\uff06\u30af\u30ea\u30c3\u30af\u306e\u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0\u3057\u3066\u3082\u30dc\u30bf\u30f3\u81ea\u4f53\u304c\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\n`show`\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u81ea\u5206\u81ea\u8eab\u3092FragmentManager\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\u2026\n\n\n\u306a\u306e\u3067\u3001`onCreateDialog`\u3067\u751f\u6210\u3057\u305f\u30c0\u30a4\u30a2\u30ed\u30b0\u306e\u30dc\u30bf\u30f3\u30af\u30ea\u30c3\u30af\u6642\u306e\u52d5\u4f5c\u3092`show`\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n## Observable\u306aDialogFragment(\u306e\u30c0\u30a4\u30a2\u30ed\u30b0)\n\n### DialogFragment\u5074\u306e\u5b9f\u88c5\n\n`show`\u306e\u4ee3\u308f\u308a\u306b\u5b9f\u884c\u3059\u308b`showObservableDialog`\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n`onCreateDialog`\u306e\u6642\u70b9\u3067\u306f\u3001\u4eee\u306e\u4f55\u3082\u3057\u306a\u3044\u95a2\u6570\u3092\u7a81\u3063\u8fbc\u3093\u3067\u304a\u3044\u3066`Observable.create`\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067`onNext`\u7b49\u3005\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\n```kotlin:LoginDialog\npublic class LoginDialog : DialogFragment() {\n\n    private var mOnPositiveClick = { }\n    private var mOnNegativeClick = { }\n\n    fun showObservableDialog(manager: FragmentManager, tag: String?): Observable<Boolean> {\n        super.show(manager, tag)\n        return Observable.create<Boolean> {\n            mOnPositiveClick = {\n                it.onNext(true)\n                it.onCompleted()\n                this.dismiss()\n            }\n            mOnNegativeClick = {\n                it.onCompleted()\n                this.dismiss()\n            }\n        }.subscribeOn(AndroidSchedulers.mainThread())\n    }\n\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog? {\n        return AlertDialog.Builder(getActivity())\n                .setTitle(R.string.login)\n                .setMessage(R.string.login_message)\n                .setPositiveButton(R.string.login, { dialog, witch -> mOnPositiveClick() })\n                .setNegativeButton(R.string.cancel, { dialog, witch -> mOnNegativeClick() })\n                .create()\n    }\n}\n```\n\n### \u547c\u3073\u51fa\u3057\u5074\u306e\u5b9f\u88c5\n\n\u4eca\u56de\u306f\u3053\u306e\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8d77\u70b9\u306b\u306a\u308b\u306e\u3067\u3001\u6700\u521d\u306b`showObservableDialog`\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089\u7d9a\u304f\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fWebView\u3067OAuth\u8a8d\u8a3c\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:AuthActivity\nLoginDialog().showObservableDialog(getSupportFragmentManager(), null)\n                .flatMap { retrieveRequestToken() }\n                .flatMap { showLoginWebView(it) }\n                .flatMap { retrieveAccessToken(it) }\n                .flatMap { getUserInfo(it) }\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe (\n                        { success -> this.finish() },\n                        { error -> toast(\"Error!\") } )\n```\n\n## \u304a\u308f\u308a\n\n\u9762\u5012\u306a\u3053\u3068\u3084\u3063\u3066\u308b\u3051\u3069\u3001\u601d\u3063\u305f\u3088\u308a\u3059\u3063\u304d\u308a\u66f8\u3051\u305f\u3002\n\u4eca\u56de\u306e\u4f8b\u3060\u3068\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8d77\u70b9\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u306e\u5229\u70b9\u306f\u7121\u3044\u3051\u3069\u3001\u51e6\u7406\u306e\u9014\u4e2d\u3067\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u5fc5\u8981\u306a\u3068\u304d\u306f\u5f79\u306b\u7acb\u3064\u3068\u601d\u3046\u3002\n\nJava\u3060\u3068Interface\u4f7f\u3048\u3070\u3084\u308c\u305d\u3046\uff1f\uff08\u8a66\u3057\u3066\u306a\u3044\uff09\n"}