{"tags": ["scikit-learn", "Python", "\u6a5f\u68b0\u5b66\u7fd2"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3084\u4ea4\u5dee\u691c\u5b9a\u306b\u3064\u3044\u3066\u306f\u8272\u3005\u306a\u3068\u3053\u308d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u74b0\u5883\n\npython: 2.7.6\nscikit-learn: 0.17.1\n\n\n\u5185\u5bb9\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\n\u307e\u305a\u306f\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002scikit-learn\u306f\u3042\u3089\u304b\u3058\u3081\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u6a5f\u68b0\u5b66\u7fd2\u3092\u59cb\u3081\u3066\u307f\u308b\u306e\u306b\u6700\u9069\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a73\u7d30\u306f\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3067\u5206\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\niris = datasets.load_iris()\n\n\n\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\n\u6b21\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u307e\u3059\u3002\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u5b9f\u65bd\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3067\u304d\u308b\u3053\u3068\u3082scikit-learn\u306e\u9b45\u529b\u306e\u4e00\u3064\u3067\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u547c\u3076\u3068\u30ab\u30c3\u30b3\u30a4\u30a4\u266a\n\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\nparameters = {\n    'C':[1, 3, 5],\n    'loss':('hinge', 'squared_hinge')\n}\n\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u5b9f\u884c\nclf = grid_search.GridSearchCV(svm.LinearSVC(), parameters)\nclf.fit(iris.data, iris.target)\n\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u7d50\u679c(\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf)\u3092\u53d6\u5f97\nGS_loss, GS_C = clf.best_params_.values()\nprint \"\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{}\".format(clf.best_params_)\n\n\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c'GS_loss'\u3068'GS_C'\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u4e00\u5ea6\u8868\u793a\u3055\u305b\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u756a\u3092\u78ba\u8a8d\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u756a\u306f\u516c\u5f0f\u30b5\u30a4\u30c8(sklearn.svm.LinearSVC)\u306eParameters\u306e\u9806\u756a\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u2026\n\n\u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\n\u6700\u5f8c\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3057\u307e\u3059\u3002\n\n\u4ea4\u5dee\u691c\u5b9a\n# \u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3092\u5b9f\u884c\nclf = svm.LinearSVC(loss=GS_loss, C=GS_C)\nscore = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)\n\n# \u4ea4\u5dee\u691c\u5b9a\u306e\u7d50\u679c\u3092\u8868\u793a\nprint \"\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a{}\".format(score.mean())\nprint \"\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a{}\".format(score.min())\nprint \"\u6b63\u89e3\u7387(\u6700\u5927)\uff1a{}\".format(score.max())\nprint \"\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a{}\".format(score.std())\nprint \"\u6b63\u89e3\u7387(\u5168\u3066)\uff1a{}\".format(score)\n\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\n\n\u5168\u4f53\n# -*- coding: utf-8 -*-\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn import grid_search\nfrom sklearn import cross_validation\n\n# main\nif __name__ == \"__main__\":\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\n    iris = datasets.load_iris()\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n    parameters = {\n        'C':[1, 3, 5],\n        'loss':('hinge', 'squared_hinge')\n    }\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u5b9f\u884c\n    clf = grid_search.GridSearchCV(svm.LinearSVC(), parameters)\n    clf.fit(iris.data, iris.target)\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u7d50\u679c(\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf)\u3092\u53d6\u5f97\n    GS_loss, GS_C = clf.best_params_.values()\n    print \"\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{}\".format(clf.best_params_)\n\n    # \u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3092\u5b9f\u884c\n    clf = svm.LinearSVC(loss=GS_loss, C=GS_C)\n    score = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)\n\n    # \u4ea4\u5dee\u691c\u5b9a\u306e\u7d50\u679c\u3092\u8868\u793a\n    print \"\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a{}\".format(score.mean())\n    print \"\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a{}\".format(score.min())\n    print \"\u6b63\u89e3\u7387(\u6700\u5927)\uff1a{}\".format(score.max())\n    print \"\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a{}\".format(score.std())\n    print \"\u6b63\u89e3\u7387(\u5168\u3066)\uff1a{}\".format(score)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u5b9f\u884c\u7d50\u679c\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{'loss': 'squared_hinge', 'C': 1}\n\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a0.966666666667\n\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a0.9\n\u6b63\u89e3\u7387(\u6700\u5927)\uff1a1.0\n\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a0.0421637021356\n\u6b63\u89e3\u7387(\u5168\u3066)\uff1a[ 1.          1.          0.93333333  0.9         1.        ]\n\n\n\n\n\u307e\u3068\u3081\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u304cLinearSVC()\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u4e00\u7dd2\u3060\u3063\u305f\u306e\u306f\u5c11\u3057\u6b8b\u5ff5\u3067\u3057\u305f\u304c\u3001\u3072\u3068\u307e\u305a\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u7d50\u679c\u3092\u4f7f\u7528\u3057\u3066\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u82f1\u8a9e\u30a2\u30ec\u30eb\u30ae\u30fc\u306a\u306e\u3067\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u898b\u306a\u304c\u3089\u5b66\u7fd2\u3059\u308b\u306e\u306f\u4e00\u82e6\u52b4\u3067\u3057\u305f\u3002\n\n\u53c2\u8003\nscikit-learn \u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u516c\u5f0f\u30b5\u30a4\u30c8(sklearn.svm.LinearSVC)\npython\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eascikit-learn\u306e\u7d39\u4ecb\n# \u306f\u3058\u3081\u306b\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3084\u4ea4\u5dee\u691c\u5b9a\u306b\u3064\u3044\u3066\u306f\u8272\u3005\u306a\u3068\u3053\u308d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u3053\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# \u74b0\u5883\n+ python: 2.7.6\n+ scikit-learn: 0.17.1\n\n# \u5185\u5bb9\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\n\u307e\u305a\u306f\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002scikit-learn\u306f\u3042\u3089\u304b\u3058\u3081\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u6a5f\u68b0\u5b66\u7fd2\u3092\u59cb\u3081\u3066\u307f\u308b\u306e\u306b\u6700\u9069\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a73\u7d30\u306f[\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8](http://pythondatascience.plavox.info/scikit-learn/scikit-learn\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8/)\u3067\u5206\u304b\u308a\u3084\u3059\u304f\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n``` python:\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\niris = datasets.load_iris()\n```\n\n## \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\n\u6b21\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u307e\u3059\u3002\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3057\u3066\u5b9f\u65bd\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3067\u304d\u308b\u3053\u3068\u3082scikit-learn\u306e\u9b45\u529b\u306e\u4e00\u3064\u3067\u3059\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u547c\u3076\u3068\u30ab\u30c3\u30b3\u30a4\u30a4\u266a\n\n\n``` python:\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\nparameters = {\n    'C':[1, 3, 5],\n    'loss':('hinge', 'squared_hinge')\n}\n\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u5b9f\u884c\nclf = grid_search.GridSearchCV(svm.LinearSVC(), parameters)\nclf.fit(iris.data, iris.target)\n\n# \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u7d50\u679c(\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf)\u3092\u53d6\u5f97\nGS_loss, GS_C = clf.best_params_.values()\nprint \"\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{}\".format(clf.best_params_)\n```\n\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c'GS_loss'\u3068'GS_C'\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u4e00\u5ea6\u8868\u793a\u3055\u305b\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u756a\u3092\u78ba\u8a8d\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u756a\u306f[\u516c\u5f0f\u30b5\u30a4\u30c8(sklearn.svm.LinearSVC)](http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html)\u306eParameters\u306e\u9806\u756a\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u2026\n\n## \u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\n\u6700\u5f8c\u306b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u3092\u3082\u3068\u306b\u4ea4\u5dee\u691c\u5b9a\u3057\u307e\u3059\u3002\n\n\n``` python:\u4ea4\u5dee\u691c\u5b9a\n# \u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3092\u5b9f\u884c\nclf = svm.LinearSVC(loss=GS_loss, C=GS_C)\nscore = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)\n\n# \u4ea4\u5dee\u691c\u5b9a\u306e\u7d50\u679c\u3092\u8868\u793a\nprint \"\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a{}\".format(score.mean())\nprint \"\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a{}\".format(score.min())\nprint \"\u6b63\u89e3\u7387(\u6700\u5927)\uff1a{}\".format(score.max())\nprint \"\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a{}\".format(score.std())\nprint \"\u6b63\u89e3\u7387(\u5168\u3066)\uff1a{}\".format(score)\n```\n    \n## \u30b3\u30fc\u30c9\u5168\u4f53\n``` python:\u5168\u4f53\n# -*- coding: utf-8 -*-\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn import grid_search\nfrom sklearn import cross_validation\n\n# main\nif __name__ == \"__main__\":\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\n    iris = datasets.load_iris()\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n    parameters = {\n        'C':[1, 3, 5],\n        'loss':('hinge', 'squared_hinge')\n    }\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u5b9f\u884c\n    clf = grid_search.GridSearchCV(svm.LinearSVC(), parameters)\n    clf.fit(iris.data, iris.target)\n\n    # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u7d50\u679c(\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf)\u3092\u53d6\u5f97\n    GS_loss, GS_C = clf.best_params_.values()\n    print \"\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{}\".format(clf.best_params_)\n\n    # \u4ea4\u5dee\u691c\u5b9a(\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3)\u3092\u5b9f\u884c\n    clf = svm.LinearSVC(loss=GS_loss, C=GS_C)\n    score = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)\n\n    # \u4ea4\u5dee\u691c\u5b9a\u306e\u7d50\u679c\u3092\u8868\u793a\n    print \"\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a{}\".format(score.mean())\n    print \"\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a{}\".format(score.min())\n    print \"\u6b63\u89e3\u7387(\u6700\u5927)\uff1a{}\".format(score.max())\n    print \"\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a{}\".format(score.std())\n    print \"\u6b63\u89e3\u7387(\u5168\u3066)\uff1a{}\".format(score)\n```\n\n# \u5b9f\u884c\u7d50\u679c\n``` python:\u5b9f\u884c\u7d50\u679c\n\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a{'loss': 'squared_hinge', 'C': 1}\n\u6b63\u89e3\u7387(\u5e73\u5747)\uff1a0.966666666667\n\u6b63\u89e3\u7387(\u6700\u5c0f)\uff1a0.9\n\u6b63\u89e3\u7387(\u6700\u5927)\uff1a1.0\n\u6b63\u89e3\u7387(\u6a19\u6e96\u504f\u5dee)\uff1a0.0421637021356\n\u6b63\u89e3\u7387(\u5168\u3066)\uff1a[ 1.          1.          0.93333333  0.9         1.        ]\n\n```\n\n\n\n# \u307e\u3068\u3081\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u305f\u7d50\u679c\u304cLinearSVC()\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u4e00\u7dd2\u3060\u3063\u305f\u306e\u306f\u5c11\u3057\u6b8b\u5ff5\u3067\u3057\u305f\u304c\u3001\u3072\u3068\u307e\u305a\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u7d50\u679c\u3092\u4f7f\u7528\u3057\u3066\u4ea4\u5dee\u691c\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u82f1\u8a9e\u30a2\u30ec\u30eb\u30ae\u30fc\u306a\u306e\u3067\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u898b\u306a\u304c\u3089\u5b66\u7fd2\u3059\u308b\u306e\u306f\u4e00\u82e6\u52b4\u3067\u3057\u305f\u3002\n\n# \u53c2\u8003\n[scikit-learn \u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8](http://pythondatascience.plavox.info/scikit-learn/scikit-learn\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8/)\n\n[\u516c\u5f0f\u30b5\u30a4\u30c8(sklearn.svm.LinearSVC)](http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html)\n\n[python\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eascikit-learn\u306e\u7d39\u4ecb](http://sucrose.hatenablog.com/entry/2013/05/25/133021)\n"}