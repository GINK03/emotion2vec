{"tags": ["\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Swift", "Xcode", "Swift3.0", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"], "context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015 \u304c\u306a\u304b\u306a\u304b\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001Swift 3.0(\u307e\u3082\u306a\u304f\u30ea\u30ea\u30fc\u30b9\u3067\u3059\u304c\u307e\u3060\u30d9\u30fc\u30bf)\u306b\u3066\u59cb\u3081\u3066\u307f\u307e\u3057\u305f\u3002\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea: mono0926/nlp100-swift: http://www.cl.ecei.tohoku.ac.jp/nlp100/\n\u3053\u3093\u306a\u611f\u3058\u3067\u66f8\u3044\u3066\u3044\u307e\u3059:\n\n\n\u306a\u305c\u59cb\u3081\u305f\u304b\n\n\u4f55\u3068\u306a\u304fSwift\u3067\u8272\u3005\u51e6\u7406\u66f8\u304d\u305f\u3044\u3053\u3068\u304c\u3042\u308b\u3082\u306e\u306e\u3001\u66f8\u304f\u30a2\u30c6\u304c\u7121\u304b\u3063\u305f\u308a\u3059\u308b\u6642\u306e\u6c17\u5206\u8ee2\u63db\u306b\u826f\u3055\u305d\u3046\n\n\niOS\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u753b\u9762\u5b9f\u88c5\u306a\u3069\u4e2d\u5fc3\u3067\u3001\u5b9f\u306f\u7d30\u3005\u3068\u3057\u305f\u51e6\u7406\u66f8\u304f\u6a5f\u4f1a\u304c\u3042\u307e\u308a\u7121\u3044\n\u3055\u3089\u306b\u3001\u65e2\u5b58\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fGM\u7248\u30ea\u30ea\u30fc\u30b9\u30ae\u30ea\u30ae\u30ea\u307e\u3067\u6b63\u5f0f\u7248\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6700\u65b0\u30d9\u30fc\u30bf\u7248\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u307e\u308a\u7121\u3044\n\n\nSwift\u306b\u3088\u308b\u8a00\u8a9e\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3042\u307e\u308a\u898b\u306a\u3044\u306e\u3067\u3001\u826f\u3044\u4f8b\u306b\u306a\u308b\u304b\u3082\uff1f\n\u6700\u65b0Swift\u30ad\u30e3\u30c3\u30c1\u30a2\u30c3\u30d7\u306b\u3082\u306a\u308a\u305d\u3046\n\n\n\u5e38\u306b\u30d9\u30fc\u30bf\u7248\u542b\u3081\u305f\u6700\u65b0Xcode\u30fbSwift\u3067\u66f8\u304f\u3064\u3082\u308a\u306a\u306e\u3067\u3001\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u3088\u308b\u5f71\u97ff\u3092\u76f4\u306b\u611f\u3058\u3089\u308c\u3066\u826f\u3055\u305d\u3046\n\n\n\n\n\u65b9\u91dd\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u4ee5\u5916\u306f\u4f7f\u308f\u306a\u3044\n\n\n\u6c4e\u7528\u51e6\u7406\u306f\u81ea\u5206\u3067extension\u306a\u3069\u3092\u66f8\u304f\n\n\nTDD\u307d\u304f\u66f8\u304f\n\u30b3\u30e1\u30f3\u30c8\u306f\u3001Markdown\u307d\u3044\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3092\u6d3b\u7528\n\u53ef\u8aad\u6027\u30fbSwift API\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306a\u3069\u3082\u3001\u6975\u529b\u610f\u8b58\u3057\u305f\u3044\nPlayground\u306f\u3069\u3046\u3057\u3088\u3046\u304b\u60a9\u3080\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3068\u5f79\u5272\u304c\u88ab\u308b\u304b\u3089\u7701\u7565\u3067\u3044\u3044\u304b\u306a\u6c17\u5206\n\n\n\n\n\u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n\n\u7b2c1\u7ae0\u306f\u3001\u8a00\u8a9e\u51e6\u7406\u3068\u3044\u3046\u3088\u308a\u3001(\u6587\u5b57\u5217\u306e)\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u3068\u3044\u3046\u611f\u3058\nSwift 3\u3067\u306e\u5909\u66f4\u306e\u5f71\u97ff\u3067\u3084\u306f\u308a\u3051\u3063\u3053\u3046\u624b\u9593\u53d6\u308b\n\nString\u3084Collection\u306eIndex\u5468\u308a\u306e\u6271\u3044\u96e3\u3057\u3044\n\u7b2c1\u7ae0\u3082\u6e96\u5099\u904b\u52d5\u3068\u306f\u3044\u3048\u3051\u3063\u3053\u3046\u52c9\u5f37\u306b\u306a\u3063\u305f\u3057\u3001\u7b2c2\u7ae0\u4ee5\u964d\u7d9a\u3051\u305f\u3044\n\u57fa\u672cGitHub\u3067\u9ed9\u3005\u3068\u66f8\u304d\u9032\u3081\u3066\u3001Qiita\u8a18\u4e8b\u306f\u4f55\u304b\u6c17\u4ed8\u304d\u304c\u3042\u308c\u3070\u66f8\u304f\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u3057\u305f\u3044\n\n\n\nChapter1\u89e3\u7b54\n\u4ee5\u4e0b\u8cbc\u308a\u4ed8\u3051\u305f\u30b3\u30fc\u30c9\u306f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3042\u307e\u308a\u3057\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u6700\u65b0\u7248\u306f https://github.com/mono0926/nlp100-swift \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u672c\u4f53\u30b3\u30fc\u30c9\n\n\nreduce\u591a\u7528\u3057\u305f\u611f\n\nfileprivate(Swift 2\u307e\u3067\u306eprivate\u3068\u4e00\u7dd2)\u3092\u521d\u3081\u3066\u4f7f\u3063\u305f\n\nimport Foundation\n\nstruct Chapter1 {\n    /**\n    # 00. \u6587\u5b57\u5217\u306e\u9006\u9806\n\n     \u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n    */\n    static func q0(_ input: String) -> String {\n        return String(input.characters.reversed())\n    }\n    /**\n    # 01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n     \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n    */\n    static func q1(_ input: String) -> String {\n        return String(input.characters.enumerated()\n            .filter { i, _ in i % 2 == 1 }\n            .map { $1 })\n    }\n    /**\n    # 02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\n    \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n    */\n    static func q2(_ input1: String, _ input2: String) -> String {\n        return zip(input1.characters, input2.characters)\n            .map { String($0) + String($1) }\n            .reduce(\"\", +)\n    }\n    /**\n    # 03. \u5186\u5468\u7387\n\n    \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n    */\n    static func q3(_ input: String) -> [Int] {\n        return input.components(separatedBy: \" \")\n            .map { $0.trimmingCharacters(in: CharacterSet(charactersIn: \",.\")).characters.count }\n    }\n    /**\n    # 04. \u5143\u7d20\u8a18\u53f7\n\n    \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n    */\n    static func q4(_ input: String, condition: [Int]) -> [String: Int] {\n        return input.components(separatedBy: \" \").enumerated()\n            .map { (i, v) in condition.contains(i + 1) ? (i, v[0..<1]!) : (i, v[0..<2]!) }\n            .reduce([String: Int]()) { sum, v in\n                var sum = sum\n                sum[v.1] = v.0 + 1\n                return sum\n        }\n    }\n    /**\n    # 05. n-gram\n\n     \u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n    */\n    static func q5Word(_ input: String) -> [[String]] {\n        return ngramWord(input, n: 2)\n    }\n    static func q5Char(_ input: String) -> [String] {\n        return ngramChar(input, n: 2)\n    }\n    /**\n    # 06. \u96c6\u5408\n\n    \"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n    */\n    static func q6(_ input1: String, _ input2: String) -> (sum: Set<String>, diff1: Set<String>, diff2: Set<String>, product: Set<String>)  {\n        let n = 2\n        let X = ngramChar(input1, n: n)\n        let Y = ngramChar(input2, n: n)\n        let XSet = Set(X)\n        let YSet = Set(Y)\n        let sum = Set(X + Y)\n        let diff1 = XSet.subtracting(YSet)\n        let diff2 = YSet.subtracting(XSet)\n        let product = XSet.intersection(YSet)\n        return (sum: sum, diff1: diff1, diff2: diff2, product: product)\n    }\n    static func q6IsContainAsBiGram(sentence: String, word: String) -> Bool {\n        let bigram = ngramChar(sentence, n: 2)\n        return bigram.contains(word)\n    }\n    /**\n    # 07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\n    \u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n    */\n    static func q7(x: Int, y: AnyObject, z: AnyObject) -> String {\n        return \"\\(x)\u6642\u306e\\(y)\u306f\\(z)\"\n    }\n    /**\n    # 08. \u6697\u53f7\u6587\n\n    \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n    - \u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n    - \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\n    \u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n    */\n    static func q8(_ input: String) -> String {\n        return cipher(input)\n    }\n    /**\n    # 09. Typoglycemia\n\n    \u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n    */\n    static func q9(_ input: String) -> String {\n        let separator = \" \"\n        var words = input.components(separatedBy: separator)\n        guard words.count > 4 else { return input }\n        let first = words.removeFirst()\n        let last = words.removeLast()\n        words.shuffle()\n        return ([first] + words + [last]).joined(separator: separator)\n    }\n}\n\nfileprivate extension Chapter1 {\n    // TODO: \u3061\u3087\u3063\u3068\u6c5a\u3044(\u3000\u00b4\uff65\u203f\uff65\uff40)\n    fileprivate static func ngramWord(_ input: String, n: Int) -> [[String]] {\n        let words = input.components(separatedBy: \" \") + (0..<n-1).map { _ in \"\" }\n        return words.reduce([[String]]()) { sum, word in\n            var sum = sum\n            var words: [String] = { () -> [String] in\n                if let lasts = sum.last?.dropFirst() {\n                    return Array(lasts)\n                }\n                return []\n            }()\n            words = (0..<(n - 1 - words.count)).map { _ in \"\" } + words\n            sum.append(words + [word])\n            return sum\n        }\n    }\n    fileprivate static func ngramChar(_ input: String, n: Int) -> [String] {\n        return input.characters.reduce([String]()) { sum, char in\n            var sum = sum\n            let count = sum.last?.characters.count ?? 0\n            let first = sum.last?[count - (n - 1)..<count] ?? \" \"\n            sum.append(first + String(char))\n            return sum\n            }\n            .filter { !$0.contains(\" \") }\n    }\n    fileprivate static func cipher(_ input: String) -> String {\n        return input.characters.map { c in\n            let s = String(c)\n            let lowercased = s.lowercased()\n            return lowercased == s ? String(Character(asciiCode: (219 - c.asciiCode()))!) : s\n            }\n            .joined(separator: \"\")\n    }\n}\n\n\n\u672c\u4f53\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nimport XCTest\n@testable import NLP100Swift\n\nclass NLP100SwiftTests: XCTestCase {\n    func testQ0() {\n        XCTAssertEqual(Chapter1.q0(\"stressed\"), \"desserts\")\n    }\n    func testQ1() {\n        XCTAssertEqual(Chapter1.q1(\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"), \"\u30bf\u30af\u30b7\u30fc\")\n    }\n    func testQ2() {\n        XCTAssertEqual(Chapter1.q2(\"\u30d1\u30c8\u30ab\u30fc\", \"\u30bf\u30af\u30b7\u30fc\"), \"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\")\n    }\n    func testQ3() {\n        XCTAssertEqual(Chapter1.q3(\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"), [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9])\n    }\n    func testQ4() {\n        XCTAssertEqual(\n            Chapter1.q4(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\", condition: [1, 5, 6, 7, 8, 9, 15, 16, 19]),\n            [\"H\": 1, \"Ne\": 10, \"Be\": 4, \"Al\": 13, \"B\": 5, \"O\": 8, \"Li\": 3, \"F\": 9, \"He\": 2, \"S\": 16, \"Cl\": 17, \"K\": 19, \"Ar\": 18, \"C\": 6, \"N\": 7, \"Mi\": 12, \"Si\": 14, \"Ca\": 20, \"P\": 15, \"Na\": 11])\n    }\n    func testQ5Word() {\n        let result = Chapter1.q5Word(\"I am an NLPer\")\n        print(result)\n        let expected = [[\"\", \"I\"], [\"I\", \"am\"], [\"am\", \"an\"], [\"an\", \"NLPer\"], [\"NLPer\", \"\"]]\n        XCTAssertEqual(result.count, expected.count)\n        result.enumerated().forEach {\n            XCTAssertEqual($1[0], expected[$0][0])\n            XCTAssertEqual($1[1], expected[$0][1])\n        }\n    }\n    func testQ5Char() {\n        let result = Chapter1.q5Char(\"I am an NLPer\")\n        let expected = [\"am\", \"an\", \"NL\", \"LP\", \"Pe\", \"er\"]\n        XCTAssertEqual(result, expected)\n    }\n    func testQ6() {\n        let input1 = \"paraparaparadise\"\n        let input2 = \"paragraph\"\n        let result = Chapter1.q6(input1, input2)\n        XCTAssertEqual(result.sum, Set([\"pa\", \"se\", \"ad\", \"ap\", \"ra\", \"gr\", \"ag\", \"ph\", \"ar\", \"di\", \"is\"]))\n        XCTAssertEqual(result.diff1, Set([\"se\", \"ad\", \"di\", \"is\"]))\n        XCTAssertEqual(result.diff2, Set([\"gr\", \"ag\", \"ph\"]))\n        XCTAssertEqual(result.product, Set([\"pa\", \"ar\", \"ap\", \"ra\"]))\n        let word = \"se\"\n        XCTAssertTrue(Chapter1.q6IsContainAsBiGram(sentence: input1, word: word))\n        XCTAssertFalse(Chapter1.q6IsContainAsBiGram(sentence: input2, word: word))\n    }\n    func testQ7() {\n        XCTAssertEqual(Chapter1.q7(x: 12, y: \"\u6c17\u6e29\" as AnyObject, z: 22.4 as AnyObject), \"12\u6642\u306e\u6c17\u6e29\u306f22.4\")\n    }\n    func testQ8() {\n        XCTAssertEqual(Chapter1.q8(\"Masayuki Ono\"), \"Mzhzbfpr\u00bbOml\")\n        XCTAssertEqual(Chapter1.q8(\"Mzhzbfpr\u00bbOml\"), \"Masayuki Ono\")\n    }\n    func testQ9() {\n        let inputLong = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n        let resultLong = Chapter1.q9(inputLong)\n        print(\"Q9. resultLong: \\(resultLong)\")\n        XCTAssertNotEqual(resultLong, inputLong)\n        XCTAssertTrue(resultLong.hasPrefix(\"I \"))\n        XCTAssertTrue(resultLong.hasSuffix(\" .\"))\n        let inputShort = \"I couldn't believe .\"\n        let resultShort = Chapter1.q9(inputShort)\n        XCTAssertEqual(resultShort, inputShort)\n\n    }\n}\n\n\nextension\n\n\n\u6a19\u6e96\u3067\u306f\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u307e\u308a\u7121\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u751f\u3084\u3059\u5fc5\u8981\u3042\u308a\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f5c\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6c4e\u7528\u6027\u306f\u305d\u3053\u307e\u3067\u9ad8\u304f\u3057\u3066\u3044\u306a\u3044(String\u306esubscript\u306erange\u3067\u30de\u30a4\u30ca\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3001\u306a\u3069)\n\n\n\u9006\u306b\u8a00\u3046\u3068\u3001\u968f\u6642extension\u3067\u6a5f\u80fd\u88dc\u586b\u3057\u3066\u3044\u3051\u3070\u3001\u8a00\u8a9e\u51e6\u7406\u3082\u307e\u3042\u307e\u3042\u5feb\u9069\u306b\u66f8\u3051\u305d\u3046(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\nimport Foundation\n\nextension String {\n\n    subscript (range: Range<Int>) -> String? {\n        let count = characters.count\n        let lower = range.lowerBound\n        let upper = range.upperBound\n        if lower >= count || upper > count { return nil }\n        let startIndex = characters.index(characters.startIndex, offsetBy: lower)\n        let endIndex = characters.index(characters.startIndex, offsetBy: upper)\n        return String(characters[startIndex..<endIndex])\n    }\n    func asciiCode() -> UInt32? {\n        guard characters.count == 1 else { return nil }\n        return characters.first!.asciiCode()\n    }\n}\n\nextension Character\n{\n    func asciiCode() -> UInt32 {\n        let characterString = String(self)\n        let scalars = characterString.unicodeScalars\n\n        return scalars[scalars.startIndex].value\n    }\n    init?(asciiCode: UInt32) {\n        guard let scalar = UnicodeScalar(asciiCode) else {\n            return nil\n        }        \n        self = Character(scalar)\n    }\n}\n\nextension Collection {\n    func shuffled() -> [Generator.Element] {\n        var list = Array(self)\n        list.shuffle()\n        return list\n    }\n}\n\nextension MutableCollection where Index == Int {\n    mutating func shuffle() {\n        let c = Int(count.toIntMax())\n        guard c > 1 else { return }\n\n        for i in 0..<(c - 1) {\n            let j = Int(arc4random_uniform(UInt32(c - i))) + i\n            guard i != j else { continue }\n            swap(&self[i], &self[j])\n        }\n    }\n}\n\n\nextension\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nimport XCTest\n@testable import NLP100Swift\n\nclass ExtensionsTests: XCTestCase {\n    func testSuscript() {\n        XCTAssertEqual(\"foo\"[0..<0], \"\")\n        XCTAssertEqual(\"foo\"[0..<1], \"f\")\n        XCTAssertEqual(\"foo\"[0..<2], \"fo\")\n        XCTAssertEqual(\"foo\"[0..<3], \"foo\")\n        XCTAssertEqual(\"foo\"[0..<4], nil)\n        XCTAssertEqual(\"foo\"[1..<1], \"\")\n        XCTAssertEqual(\"foo\"[1..<2], \"o\")\n        XCTAssertEqual(\"foo\"[1..<3], \"oo\")\n        XCTAssertEqual(\"foo\"[1..<4], nil)\n    }\n\n    func testToAsciiCode() {\n        XCTAssertEqual(\"A\".asciiCode(), 65)\n        XCTAssertEqual(\"a\".asciiCode(), 97)\n    }\n    func testFromAsciiCode() {\n        XCTAssertEqual(Character(asciiCode: 65), \"A\")\n        XCTAssertEqual(Character(asciiCode: 97), \"a\")\n    }\n    // TODO: \u30e9\u30f3\u30c0\u30e0\u306a\u306e\u3067\u3001\u305f\u307e\u306b\u5931\u6557\u3059\u308b\u306e\u304c\u8ab2\u984c\ud83e\udd14\n    func testShuffle() {\n        let input = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n        let result = input.shuffled()\n        XCTAssertNotEqual(result, input)\n        XCTAssertEqual(Set(result), Set(input))\n    }\n}\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/) \u304c\u306a\u304b\u306a\u304b\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001Swift 3.0(\u307e\u3082\u306a\u304f\u30ea\u30ea\u30fc\u30b9\u3067\u3059\u304c\u307e\u3060\u30d9\u30fc\u30bf)\u306b\u3066\u59cb\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\nGitHub\u30ea\u30dd\u30b8\u30c8\u30ea: [mono0926/nlp100-swift: http://www.cl.ecei.tohoku.ac.jp/nlp100/](https://github.com/mono0926/nlp100-swift)\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u66f8\u3044\u3066\u3044\u307e\u3059:\n![Screen Shot 2016-09-01 at 2.17.29 PM.png](https://qiita-image-store.s3.amazonaws.com/0/19398/ef0c0176-1ad1-0065-0576-9b8d4bd9a15d.png)\n\n\n# \u306a\u305c\u59cb\u3081\u305f\u304b\n\n- \u4f55\u3068\u306a\u304fSwift\u3067\u8272\u3005\u51e6\u7406\u66f8\u304d\u305f\u3044\u3053\u3068\u304c\u3042\u308b\u3082\u306e\u306e\u3001\u66f8\u304f\u30a2\u30c6\u304c\u7121\u304b\u3063\u305f\u308a\u3059\u308b\u6642\u306e\u6c17\u5206\u8ee2\u63db\u306b\u826f\u3055\u305d\u3046\n  - iOS\u30a2\u30d7\u30ea\u958b\u767a\u3067\u306f\u753b\u9762\u5b9f\u88c5\u306a\u3069\u4e2d\u5fc3\u3067\u3001\u5b9f\u306f\u7d30\u3005\u3068\u3057\u305f\u51e6\u7406\u66f8\u304f\u6a5f\u4f1a\u304c\u3042\u307e\u308a\u7121\u3044\n  - \u3055\u3089\u306b\u3001\u65e2\u5b58\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fGM\u7248\u30ea\u30ea\u30fc\u30b9\u30ae\u30ea\u30ae\u30ea\u307e\u3067\u6b63\u5f0f\u7248\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6700\u65b0\u30d9\u30fc\u30bf\u7248\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u307e\u308a\u7121\u3044\n- Swift\u306b\u3088\u308b\u8a00\u8a9e\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3042\u307e\u308a\u898b\u306a\u3044\u306e\u3067\u3001\u826f\u3044\u4f8b\u306b\u306a\u308b\u304b\u3082\uff1f\n- \u6700\u65b0Swift\u30ad\u30e3\u30c3\u30c1\u30a2\u30c3\u30d7\u306b\u3082\u306a\u308a\u305d\u3046\n  - \u5e38\u306b\u30d9\u30fc\u30bf\u7248\u542b\u3081\u305f\u6700\u65b0Xcode\u30fbSwift\u3067\u66f8\u304f\u3064\u3082\u308a\u306a\u306e\u3067\u3001\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u3088\u308b\u5f71\u97ff\u3092\u76f4\u306b\u611f\u3058\u3089\u308c\u3066\u826f\u3055\u305d\u3046\n\n# \u65b9\u91dd\n\n- \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u4ee5\u5916\u306f\u4f7f\u308f\u306a\u3044\n  - \u6c4e\u7528\u51e6\u7406\u306f\u81ea\u5206\u3067`extension`\u306a\u3069\u3092\u66f8\u304f\n- TDD\u307d\u304f\u66f8\u304f\n- \u30b3\u30e1\u30f3\u30c8\u306f\u3001[Markdown\u307d\u3044\u30de\u30fc\u30af\u30a2\u30c3\u30d7](https://developer.apple.com/library/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/)\u3092\u6d3b\u7528\n- \u53ef\u8aad\u6027\u30fb[Swift API\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3](http://qiita.com/mono0926/items/11203c8cce0d7f4548db)\u306a\u3069\u3082\u3001\u6975\u529b\u610f\u8b58\u3057\u305f\u3044\n- Playground\u306f\u3069\u3046\u3057\u3088\u3046\u304b\u60a9\u3080\n  - \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3068\u5f79\u5272\u304c\u88ab\u308b\u304b\u3089\u7701\u7565\u3067\u3044\u3044\u304b\u306a\u6c17\u5206\n\n# \u3084\u3063\u3066\u307f\u305f\u611f\u60f3\n\n- \u7b2c1\u7ae0\u306f\u3001\u8a00\u8a9e\u51e6\u7406\u3068\u3044\u3046\u3088\u308a\u3001(\u6587\u5b57\u5217\u306e)\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u3068\u3044\u3046\u611f\u3058\n- Swift 3\u3067\u306e\u5909\u66f4\u306e\u5f71\u97ff\u3067\u3084\u306f\u308a\u3051\u3063\u3053\u3046\u624b\u9593\u53d6\u308b\n- `String`\u3084`Collection`\u306e`Index`\u5468\u308a\u306e\u6271\u3044\u96e3\u3057\u3044\n- \u7b2c1\u7ae0\u3082\u6e96\u5099\u904b\u52d5\u3068\u306f\u3044\u3048\u3051\u3063\u3053\u3046\u52c9\u5f37\u306b\u306a\u3063\u305f\u3057\u3001\u7b2c2\u7ae0\u4ee5\u964d\u7d9a\u3051\u305f\u3044\n- \u57fa\u672cGitHub\u3067\u9ed9\u3005\u3068\u66f8\u304d\u9032\u3081\u3066\u3001Qiita\u8a18\u4e8b\u306f\u4f55\u304b\u6c17\u4ed8\u304d\u304c\u3042\u308c\u3070\u66f8\u304f\u3001\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u3057\u305f\u3044\n\n---\n\n# Chapter1\u89e3\u7b54\n\n\u4ee5\u4e0b\u8cbc\u308a\u4ed8\u3051\u305f\u30b3\u30fc\u30c9\u306f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3042\u307e\u308a\u3057\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u6700\u65b0\u7248\u306f https://github.com/mono0926/nlp100-swift \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n## \u672c\u4f53\u30b3\u30fc\u30c9\n\n- `reduce`\u591a\u7528\u3057\u305f\u611f\n- `fileprivate`(Swift 2\u307e\u3067\u306e`private`\u3068\u4e00\u7dd2)\u3092\u521d\u3081\u3066\u4f7f\u3063\u305f\n\n```swift\nimport Foundation\n\nstruct Chapter1 {\n    /**\n    # 00. \u6587\u5b57\u5217\u306e\u9006\u9806\n     \n     \u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n    */\n    static func q0(_ input: String) -> String {\n        return String(input.characters.reversed())\n    }\n    /**\n    # 01. \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n     \n     \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n    */\n    static func q1(_ input: String) -> String {\n        return String(input.characters.enumerated()\n            .filter { i, _ in i % 2 == 1 }\n            .map { $1 })\n    }\n    /**\n    # 02. \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n \n    \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n    */\n    static func q2(_ input1: String, _ input2: String) -> String {\n        return zip(input1.characters, input2.characters)\n            .map { String($0) + String($1) }\n            .reduce(\"\", +)\n    }\n    /**\n    # 03. \u5186\u5468\u7387\n \n    \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n    */\n    static func q3(_ input: String) -> [Int] {\n        return input.components(separatedBy: \" \")\n            .map { $0.trimmingCharacters(in: CharacterSet(charactersIn: \",.\")).characters.count }\n    }\n    /**\n    # 04. \u5143\u7d20\u8a18\u53f7\n    \n    \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n    */\n    static func q4(_ input: String, condition: [Int]) -> [String: Int] {\n        return input.components(separatedBy: \" \").enumerated()\n            .map { (i, v) in condition.contains(i + 1) ? (i, v[0..<1]!) : (i, v[0..<2]!) }\n            .reduce([String: Int]()) { sum, v in\n                var sum = sum\n                sum[v.1] = v.0 + 1\n                return sum\n        }\n    }\n    /**\n    # 05. n-gram\n     \n     \u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n    */\n    static func q5Word(_ input: String) -> [[String]] {\n        return ngramWord(input, n: 2)\n    }\n    static func q5Char(_ input: String) -> [String] {\n        return ngramChar(input, n: 2)\n    }\n    /**\n    # 06. \u96c6\u5408\n \n    \"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n    */\n    static func q6(_ input1: String, _ input2: String) -> (sum: Set<String>, diff1: Set<String>, diff2: Set<String>, product: Set<String>)  {\n        let n = 2\n        let X = ngramChar(input1, n: n)\n        let Y = ngramChar(input2, n: n)\n        let XSet = Set(X)\n        let YSet = Set(Y)\n        let sum = Set(X + Y)\n        let diff1 = XSet.subtracting(YSet)\n        let diff2 = YSet.subtracting(XSet)\n        let product = XSet.intersection(YSet)\n        return (sum: sum, diff1: diff1, diff2: diff2, product: product)\n    }\n    static func q6IsContainAsBiGram(sentence: String, word: String) -> Bool {\n        let bigram = ngramChar(sentence, n: 2)\n        return bigram.contains(word)\n    }\n    /**\n    # 07. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n \n    \u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n    */\n    static func q7(x: Int, y: AnyObject, z: AnyObject) -> String {\n        return \"\\(x)\u6642\u306e\\(y)\u306f\\(z)\"\n    }\n    /**\n    # 08. \u6697\u53f7\u6587\n \n    \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n \n    - \u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n    - \u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n \n    \u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n    */\n    static func q8(_ input: String) -> String {\n        return cipher(input)\n    }\n    /**\n    # 09. Typoglycemia\n \n    \u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n    */\n    static func q9(_ input: String) -> String {\n        let separator = \" \"\n        var words = input.components(separatedBy: separator)\n        guard words.count > 4 else { return input }\n        let first = words.removeFirst()\n        let last = words.removeLast()\n        words.shuffle()\n        return ([first] + words + [last]).joined(separator: separator)\n    }\n}\n\nfileprivate extension Chapter1 {\n    // TODO: \u3061\u3087\u3063\u3068\u6c5a\u3044(\u3000\u00b4\uff65\u203f\uff65\uff40)\n    fileprivate static func ngramWord(_ input: String, n: Int) -> [[String]] {\n        let words = input.components(separatedBy: \" \") + (0..<n-1).map { _ in \"\" }\n        return words.reduce([[String]]()) { sum, word in\n            var sum = sum\n            var words: [String] = { () -> [String] in\n                if let lasts = sum.last?.dropFirst() {\n                    return Array(lasts)\n                }\n                return []\n            }()\n            words = (0..<(n - 1 - words.count)).map { _ in \"\" } + words\n            sum.append(words + [word])\n            return sum\n        }\n    }\n    fileprivate static func ngramChar(_ input: String, n: Int) -> [String] {\n        return input.characters.reduce([String]()) { sum, char in\n            var sum = sum\n            let count = sum.last?.characters.count ?? 0\n            let first = sum.last?[count - (n - 1)..<count] ?? \" \"\n            sum.append(first + String(char))\n            return sum\n            }\n            .filter { !$0.contains(\" \") }\n    }\n    fileprivate static func cipher(_ input: String) -> String {\n        return input.characters.map { c in\n            let s = String(c)\n            let lowercased = s.lowercased()\n            return lowercased == s ? String(Character(asciiCode: (219 - c.asciiCode()))!) : s\n            }\n            .joined(separator: \"\")\n    }\n}\n```\n\n## \u672c\u4f53\u30b3\u30fc\u30c9\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```swift\nimport XCTest\n@testable import NLP100Swift\n\nclass NLP100SwiftTests: XCTestCase {\n    func testQ0() {\n        XCTAssertEqual(Chapter1.q0(\"stressed\"), \"desserts\")\n    }\n    func testQ1() {\n        XCTAssertEqual(Chapter1.q1(\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"), \"\u30bf\u30af\u30b7\u30fc\")\n    }\n    func testQ2() {\n        XCTAssertEqual(Chapter1.q2(\"\u30d1\u30c8\u30ab\u30fc\", \"\u30bf\u30af\u30b7\u30fc\"), \"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\")\n    }\n    func testQ3() {\n        XCTAssertEqual(Chapter1.q3(\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"), [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9])\n    }\n    func testQ4() {\n        XCTAssertEqual(\n            Chapter1.q4(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\", condition: [1, 5, 6, 7, 8, 9, 15, 16, 19]),\n            [\"H\": 1, \"Ne\": 10, \"Be\": 4, \"Al\": 13, \"B\": 5, \"O\": 8, \"Li\": 3, \"F\": 9, \"He\": 2, \"S\": 16, \"Cl\": 17, \"K\": 19, \"Ar\": 18, \"C\": 6, \"N\": 7, \"Mi\": 12, \"Si\": 14, \"Ca\": 20, \"P\": 15, \"Na\": 11])\n    }\n    func testQ5Word() {\n        let result = Chapter1.q5Word(\"I am an NLPer\")\n        print(result)\n        let expected = [[\"\", \"I\"], [\"I\", \"am\"], [\"am\", \"an\"], [\"an\", \"NLPer\"], [\"NLPer\", \"\"]]\n        XCTAssertEqual(result.count, expected.count)\n        result.enumerated().forEach {\n            XCTAssertEqual($1[0], expected[$0][0])\n            XCTAssertEqual($1[1], expected[$0][1])\n        }\n    }\n    func testQ5Char() {\n        let result = Chapter1.q5Char(\"I am an NLPer\")\n        let expected = [\"am\", \"an\", \"NL\", \"LP\", \"Pe\", \"er\"]\n        XCTAssertEqual(result, expected)\n    }\n    func testQ6() {\n        let input1 = \"paraparaparadise\"\n        let input2 = \"paragraph\"\n        let result = Chapter1.q6(input1, input2)\n        XCTAssertEqual(result.sum, Set([\"pa\", \"se\", \"ad\", \"ap\", \"ra\", \"gr\", \"ag\", \"ph\", \"ar\", \"di\", \"is\"]))\n        XCTAssertEqual(result.diff1, Set([\"se\", \"ad\", \"di\", \"is\"]))\n        XCTAssertEqual(result.diff2, Set([\"gr\", \"ag\", \"ph\"]))\n        XCTAssertEqual(result.product, Set([\"pa\", \"ar\", \"ap\", \"ra\"]))\n        let word = \"se\"\n        XCTAssertTrue(Chapter1.q6IsContainAsBiGram(sentence: input1, word: word))\n        XCTAssertFalse(Chapter1.q6IsContainAsBiGram(sentence: input2, word: word))\n    }\n    func testQ7() {\n        XCTAssertEqual(Chapter1.q7(x: 12, y: \"\u6c17\u6e29\" as AnyObject, z: 22.4 as AnyObject), \"12\u6642\u306e\u6c17\u6e29\u306f22.4\")\n    }\n    func testQ8() {\n        XCTAssertEqual(Chapter1.q8(\"Masayuki Ono\"), \"Mzhzbfpr\u00bbOml\")\n        XCTAssertEqual(Chapter1.q8(\"Mzhzbfpr\u00bbOml\"), \"Masayuki Ono\")\n    }\n    func testQ9() {\n        let inputLong = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n        let resultLong = Chapter1.q9(inputLong)\n        print(\"Q9. resultLong: \\(resultLong)\")\n        XCTAssertNotEqual(resultLong, inputLong)\n        XCTAssertTrue(resultLong.hasPrefix(\"I \"))\n        XCTAssertTrue(resultLong.hasSuffix(\" .\"))\n        let inputShort = \"I couldn't believe .\"\n        let resultShort = Chapter1.q9(inputShort)\n        XCTAssertEqual(resultShort, inputShort)\n        \n    }\n}\n```\n\n## `extension`\n\n- \u6a19\u6e96\u3067\u306f\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u307e\u308a\u7121\u3044\u306e\u3067\u3001\u81ea\u5206\u3067\u751f\u3084\u3059\u5fc5\u8981\u3042\u308a\n  - \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f5c\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6c4e\u7528\u6027\u306f\u305d\u3053\u307e\u3067\u9ad8\u304f\u3057\u3066\u3044\u306a\u3044(`String`\u306e`subscript`\u306e`range`\u3067\u30de\u30a4\u30ca\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3001\u306a\u3069)\n- \u9006\u306b\u8a00\u3046\u3068\u3001\u968f\u6642`extension`\u3067\u6a5f\u80fd\u88dc\u586b\u3057\u3066\u3044\u3051\u3070\u3001\u8a00\u8a9e\u51e6\u7406\u3082\u307e\u3042\u307e\u3042\u5feb\u9069\u306b\u66f8\u3051\u305d\u3046(\u3000\u00b4\uff65\u203f\uff65\uff40)\n\n```swift\nimport Foundation\n\nextension String {\n    \n    subscript (range: Range<Int>) -> String? {\n        let count = characters.count\n        let lower = range.lowerBound\n        let upper = range.upperBound\n        if lower >= count || upper > count { return nil }\n        let startIndex = characters.index(characters.startIndex, offsetBy: lower)\n        let endIndex = characters.index(characters.startIndex, offsetBy: upper)\n        return String(characters[startIndex..<endIndex])\n    }\n    func asciiCode() -> UInt32? {\n        guard characters.count == 1 else { return nil }\n        return characters.first!.asciiCode()\n    }\n}\n\nextension Character\n{\n    func asciiCode() -> UInt32 {\n        let characterString = String(self)\n        let scalars = characterString.unicodeScalars\n        \n        return scalars[scalars.startIndex].value\n    }\n    init?(asciiCode: UInt32) {\n        guard let scalar = UnicodeScalar(asciiCode) else {\n            return nil\n        }        \n        self = Character(scalar)\n    }\n}\n\nextension Collection {\n    func shuffled() -> [Generator.Element] {\n        var list = Array(self)\n        list.shuffle()\n        return list\n    }\n}\n\nextension MutableCollection where Index == Int {\n    mutating func shuffle() {\n        let c = Int(count.toIntMax())\n        guard c > 1 else { return }\n        \n        for i in 0..<(c - 1) {\n            let j = Int(arc4random_uniform(UInt32(c - i))) + i\n            guard i != j else { continue }\n            swap(&self[i], &self[j])\n        }\n    }\n}\n```\n\n## `extension`\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```swift\nimport XCTest\n@testable import NLP100Swift\n\nclass ExtensionsTests: XCTestCase {\n    func testSuscript() {\n        XCTAssertEqual(\"foo\"[0..<0], \"\")\n        XCTAssertEqual(\"foo\"[0..<1], \"f\")\n        XCTAssertEqual(\"foo\"[0..<2], \"fo\")\n        XCTAssertEqual(\"foo\"[0..<3], \"foo\")\n        XCTAssertEqual(\"foo\"[0..<4], nil)\n        XCTAssertEqual(\"foo\"[1..<1], \"\")\n        XCTAssertEqual(\"foo\"[1..<2], \"o\")\n        XCTAssertEqual(\"foo\"[1..<3], \"oo\")\n        XCTAssertEqual(\"foo\"[1..<4], nil)\n    }\n    \n    func testToAsciiCode() {\n        XCTAssertEqual(\"A\".asciiCode(), 65)\n        XCTAssertEqual(\"a\".asciiCode(), 97)\n    }\n    func testFromAsciiCode() {\n        XCTAssertEqual(Character(asciiCode: 65), \"A\")\n        XCTAssertEqual(Character(asciiCode: 97), \"a\")\n    }\n    // TODO: \u30e9\u30f3\u30c0\u30e0\u306a\u306e\u3067\u3001\u305f\u307e\u306b\u5931\u6557\u3059\u308b\u306e\u304c\u8ab2\u984c\ud83e\udd14\n    func testShuffle() {\n        let input = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n        let result = input.shuffled()\n        XCTAssertNotEqual(result, input)\n        XCTAssertEqual(Set(result), Set(input))\n    }\n}\n```\n"}