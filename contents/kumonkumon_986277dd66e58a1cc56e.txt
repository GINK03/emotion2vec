{"tags": ["TensorFlow", "DeepLearning", "CNN", "ConvolutionalNeuralNetworks", "\u6df1\u5c64\u5b66\u7fd2"], "context": "(\u76ee\u6b21\u306f\u3053\u3061\u3089)\n\n\u306f\u3058\u3081\u306b\n\u3053\u308c\u307e\u3067\u306e\u8a18\u4e8b \u3067\u898b\u3066\u304d\u305f\u3001Deep Neural Networks / Convolutional Neural Networks \u3067\u306f\u3001\u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b\u4e2d\u9593\u5c64\u3092\u5897\u3084\u3059\u3068\u3001\u305d\u308c\u306b\u4f34\u3044\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3082\u591a\u304f\u306a\u308a\u3001\u305d\u308c\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u3055\u3089\u306b\u591a\u304f\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u3002\u753b\u50cf\u8a8d\u8b58\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306a\u3069\u3067\u4e0a\u4f4d\u306b\u6765\u308b\u3088\u3046\u306a\u3082\u306e\u306f\u3001\u8907\u6570\u306eGPU\u3092\u5229\u7528\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u5f53\u7136\u306e\u3088\u3046\u306b\u5b66\u7fd2\u306b\u6570\u9031\u9593\u4ee5\u4e0a\u304b\u304b\u3063\u3066\u3044\u308b\u3002\n\u6b63\u76f4\u3001\u3053\u3093\u306a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3082\u306e\u306a\u3093\u3066\u3001\u983b\u7e41\u306b\u5b66\u7fd2\u3057\u305f\u304f\u306a\u3044\u3002\u30ab\u30c6\u30b4\u30ea\u8b58\u5225\u306b\u304a\u3044\u3066\u3001\u305f\u3068\u3048\u3070\u3001\u30ab\u30c6\u30b4\u30ea\u30921\u3064\u8ffd\u52a0\u3057\u305f\u304f\u306a\u3063\u305f\u6642\u3001\u307e\u305f\u6570\u9031\u9593\u5f85\u3064\u3093\u3060\u308d\u3046\u304b\uff1f\uff1f \u5acc\u3060\u3002\u3053\u3093\u306a\u3068\u304d\u306b\u7528\u3044\u3089\u308c\u308b\u306e\u304c\u3001\u8ee2\u79fb\u5b66\u7fd2 (transfer learning) / deep features\u3067\u3042\u308b\u3002\n\n\u8ee2\u79fb\u5b66\u7fd2 (transfer learning) / deep features\n\u3053\u308c\u306f\u3001\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u3001\u51fa\u529b\u5c64\u3067\u306e\u7d50\u679c\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u3082\u306e\u3002\n\u305d\u3046\u3084\u3063\u3066\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u3092\u4f7f\u3063\u3066SVM\u306a\u3069\u306e\u8b58\u5225\u5668\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3092\u3001\u8ee2\u79fb\u5b66\u7fd2\u3068\u3088\u3073\u3001Deep Neural Networks\u304b\u3089\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u306f\u3001deep features\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3002\u5168\u7d50\u5408\u5c64\u306e\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u304c\u3001\u3082\u3063\u3068\u524d\u6bb5\u306e\u51fa\u529b\u3092\u4f7f\u3063\u3066\u3044\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070\u3001\u300c\u753b\u50cf\u30921000\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3059\u308b\u300d\u3068\u3044\u3046\u554f\u984c\u8a2d\u5b9a\u3067\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u30ab\u30c6\u30b4\u30ea\u304c1\u3064\u5897\u3048\u307e\u3057\u305f\u3063\u3066\u6642\u306b\u3001\u6700\u521d\u304b\u3089\u5b66\u7fd2\u3057\u76f4\u3059\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u9762\u5012\u3001\u3063\u3066\u3068\u304d\u306b\u975e\u5e38\u306b\u6709\u52b9\u3002\n\u3055\u3089\u306b\u3001\u30ab\u30c6\u30b4\u30ea\u304c\u5897\u3048\u305f\u6642\u3060\u3051\u3067\u306a\u304f\u3001\u5225\u306e\u7528\u9014\u306b\u4f7f\u3063\u3066\u3082\u3001\u308f\u308a\u3068\u3088\u3044\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u305f\u308a\u3059\u308b\u306e\u3067\u307e\u305f\u9762\u767d\u3044\u3002\n\n\u3084\u3063\u3066\u307f\u308b\n\u8ee2\u79fb\u5b66\u7fd2\u3067\u306f\u306a\u304f\u3001deep features\u3092\u4f7f\u3063\u3066\u3001\u985e\u4f3c\u753b\u50cf\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3002\n\n\u30c7\u30fc\u30bf\ngoogle image search\u3067\u30011408\u679a\u306e\u96fb\u8eca\u306e\u753b\u50cf\u3092\u96c6\u3081\u305f\u3002\n\u3044\u3061\u304a\u3046\u3001\"\u975e\u55b6\u5229\u76ee\u7684\u3067\u306e\u518d\u4f7f\u7528\u304c\u8a31\u53ef\u3055\u308c\u305f\u753b\u50cf\"\u3063\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3002\n\u4ee5\u4e0b\u3001img_0000.jpg \u301c img_1407.jpg \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\u524d\u63d0\u3002\n\n\u65b9\u6cd5\ntensorflow\u3067\u3001inception-v3\u30e2\u30c7\u30eb\u3063\u3066\u306e\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3002\n\n\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb (inception v3)\nhttp://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz\n\n\u304b\u3089\u3001classify_image_graph_def.pb\u3092\u62bd\u51fa\u3002\n\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001 ILSVRC 2012\u3068\u3044\u30461000\u30ab\u30c6\u30b4\u30ea\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u3044\u3066\u30015\u3064\u30ab\u30c6\u30b4\u30ea\u9078\u629e\u3057\u305f\u6642\u306e\u6b63\u89e3\u7387\u306f\u300196.54%\u3089\u3057\u3044\u3002\u3061\u306a\u307f\u306b\u3001Andrej Karpathy\u3063\u3066\u4eba\u306f\u3001\u4eba\u9593\u304c\u540c\u3058\u30c7\u30fc\u30bf\u3067\u9811\u5f35\u308b\u3068\u300194.9%\u3060\u3063\u305f\u305d\u3046\u306a\u3002\n\n\u30b3\u30fc\u30c9\ndeep_features.py\n\ndeep_features.py\nfrom helper import *\n\nIMG_DIR = '/path/to/img'\nMODEL_PATH = '/path/to/classify_image_graph_def.pb'\nIMG_NUM = 1408\nQUERY_IMG = 22\nCANDIDATES = 5\n\nwith tf.gfile.FastGFile(MODEL_PATH, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    pool3 = sess.graph.get_tensor_by_name('pool_3:0')\n    features = []\n    for i in range(IMG_NUM):\n        image_data = tf.gfile.FastGFile('%s/img_%04d.jpg' % (IMG_DIR, i), 'rb').read()\n        pool3_features = sess.run(pool3,{'DecodeJpeg/contents:0': image_data})\n        features.append(np.squeeze(pool3_features))\n\nquery_feat = features[QUERY_IMG]\nsims = [(k, round(1 - spatial.distance.cosine(query_feat, v), 3)) for k,v in enumerate(features)]\nprint(sorted(sims, key=operator.itemgetter(1), reverse=True)[:CANDIDATES + 1])\n\n\n\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\n\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nwith tf.gfile.FastGFile(MODEL_PATH, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\n\n\u51fa\u529b\u7b87\u6240\u306e\u9078\u629e\npool_3\u3068\u3044\u3046\u51fa\u529b\u5c64\u306e\u4e00\u3064\u624b\u524d\u306e\u51fa\u529b\u3092\u4f7f\u3046\u3002\n    pool3 = sess.graph.get_tensor_by_name('pool_3:0')\n\n\ndeep features\n\u5168\u753b\u50cf\u306b\u5bfe\u3057\u3066\u7279\u5fb4\u62bd\u51fa\u3002\u5404\u753b\u50cf\u306b\u304a\u3044\u30662048\u6b21\u5143\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u304c\u5f97\u3089\u308c\u308b\u3002\n    for i in range(IMG_NUM):\n        image_data = tf.gfile.FastGFile('%s/img_%04d.jpg' % (IMG_DIR, i), 'rb').read()\n        pool3_features = sess.run(pool3,{'DecodeJpeg/contents:0': image_data})\n        features.append(np.squeeze(pool3_features))\n\n\n\u985e\u4f3c\u753b\u50cf\u691c\u7d22\n\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u540c\u58eb\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3068\u305d\u306e\u4ed6\u306e\u753b\u50cf\u3067\u7b97\u51fa\u3057\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u4e26\u3079\u308b\u3002\n\u3053\u3053\u3067\u306f\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3092\u9664\u304b\u305a\u306b\u5168\u753b\u50cf\u306b\u5bfe\u3057\u3066\u985e\u4f3c\u5ea6\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3068\u30af\u30a8\u30ea\u753b\u50cf\u3092\u6bd4\u8f03\u3057\u305f\u6642\u306e\u7d50\u679c\u306f1.0(\u53b3\u5bc6\u306b\u306f\u30011.0\u306b\u9650\u308a\u306a\u304f\u8fd1\u3044\u5024)\u306b\u306a\u308b\u3002\nquery_feat = features[QUERY_IMG]\nsims = [(k, round(1 - spatial.distance.cosine(query_feat, v), 3)) for k,v in enumerate(features)]\nprint(sorted(sims, key=operator.itemgetter(1), reverse=True)[:CANDIDATES + 1])\n\n\n\u5b9f\u884c\n\u4f7f\u3063\u3066\u3044\u308btensorflow\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306f\u3001Warning\u304c\u5927\u91cf\u306b\u51fa\u308b\u3051\u3069\u3001\u7121\u8996\u3002\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3002img_0022 \u304c\u985e\u4f3c\u5ea61.0\u3067\u3001img_0120 \u304c\u985e\u4f3c\u5ea60.911\u3067\u3001\u4ee5\u4e0b\u540c\u69d8\u3002\n[(22, 1.0), (120, 0.911), (1363, 0.901), (516, 0.882), (974, 0.870), (809, 0.867)]\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u30af\u30a8\u30ea\u753b\u50cf\u3092\u691c\u7d22\u5bfe\u8c61\u304b\u3089\u629c\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u985e\u4f3c\u5ea61.0\u306e\u3082\u306e\u304c\u51fa\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u3001\u3044\u308d\u3044\u308d\u306a\u7d50\u679c\u3092\u898b\u3084\u3059\u304f\u52a0\u5de5\u3057\u305f\u3082\u306e\u3092\u3002\n\n\u7d50\u679c\n1\u679a\u305a\u3064\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001deep_features_retrieval.pdf\u306b\u3002\n\u2193\u3053\u3093\u306a\u611f\u3058\u3002\u6700\u5de6\u5217\u304c\u30af\u30a8\u30ea\u753b\u50cf\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u3001\u4f3c\u3066\u3044\u308b\u3068\u8a8d\u8b58\u3055\u308c\u305f\u753b\u50cf\u3002\u5c0f\u6570\u306e\u6570\u5024\u306f\u3001\u985e\u4f3c\u5ea6(0-1)\u3067\u3001\u5927\u304d\u3044\u307b\u3069\u985e\u4f3c\u6027\u304c\u9ad8\u3044\u3002\n\n\u4f55\u3092\u4ee5\u3063\u3066\u4f3c\u3066\u3044\u308b\u3068\u8a8d\u8b58\u3055\u308c\u305f\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u7d50\u679c\u3082\u3042\u308b\u304c\u3001\u307e\u3041\u305d\u308c\u306f\u3057\u3087\u3046\u304c\u306a\u3044\u3002\n\u2193\u3044\u3044\u611f\u3058\u3002\n\n\u2193\u3053\u308c\u306f\u3001\u3042\u307e\u308a\u3046\u307e\u304f\u3044\u3063\u3066\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u304c\u3001\u5b9f\u306f\u3001\u8def\u9762\u96fb\u8eca\u304c\u96c6\u307e\u3063\u3066\u3044\u3066\u9762\u767d\u3044\u3002\n\n1000\u30ab\u30c6\u30b4\u30ea\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306a\u306e\u306b\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u304c\u6d41\u7528\u3067\u304d\u308b\uff08\u6c4e\u7528\u6027\u304c\u3042\u308b\uff09\u3053\u3068\u304c\u975e\u5e38\u306b\u8208\u5473\u6df1\u3044\u3002\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u8ee2\u79fb\u5b66\u7fd2\u306e\u7d39\u4ecb\u3068\u3068\u3082\u306b\u3001\u5b66\u7fd2\u6e08\u307f\u306eCNN\u306e\u30e2\u30c7\u30eb\u3092\u6d41\u7528\u3057\u305fdeep features\u3092\u4f7f\u3063\u3066\u3001\u985e\u4f3c\u753b\u50cf\u691c\u7d22\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u306b\u6c4e\u7528\u6027\u304c\u3042\u308b\u306a\u3093\u3066\u8208\u5473\u6df1\u3044\u3002\n([\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/kumonkumon/items/6fd05963df92e9eec8c0))\n\n# \u306f\u3058\u3081\u306b\n[\u3053\u308c\u307e\u3067\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/4c94e90e548696aba85c) \u3067\u898b\u3066\u304d\u305f\u3001Deep Neural Networks / Convolutional Neural Networks \u3067\u306f\u3001\u7cbe\u5ea6\u3092\u9ad8\u3081\u308b\u305f\u3081\u306b\u4e2d\u9593\u5c64\u3092\u5897\u3084\u3059\u3068\u3001\u305d\u308c\u306b\u4f34\u3044\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3082\u591a\u304f\u306a\u308a\u3001\u305d\u308c\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u3055\u3089\u306b\u591a\u304f\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u3002\u753b\u50cf\u8a8d\u8b58\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306a\u3069\u3067\u4e0a\u4f4d\u306b\u6765\u308b\u3088\u3046\u306a\u3082\u306e\u306f\u3001\u8907\u6570\u306eGPU\u3092\u5229\u7528\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u5f53\u7136\u306e\u3088\u3046\u306b\u5b66\u7fd2\u306b\u6570\u9031\u9593\u4ee5\u4e0a\u304b\u304b\u3063\u3066\u3044\u308b\u3002\n\n\u6b63\u76f4\u3001\u3053\u3093\u306a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3082\u306e\u306a\u3093\u3066\u3001\u983b\u7e41\u306b\u5b66\u7fd2\u3057\u305f\u304f\u306a\u3044\u3002\u30ab\u30c6\u30b4\u30ea\u8b58\u5225\u306b\u304a\u3044\u3066\u3001\u305f\u3068\u3048\u3070\u3001\u30ab\u30c6\u30b4\u30ea\u30921\u3064\u8ffd\u52a0\u3057\u305f\u304f\u306a\u3063\u305f\u6642\u3001\u307e\u305f\u6570\u9031\u9593\u5f85\u3064\u3093\u3060\u308d\u3046\u304b\uff1f\uff1f \u5acc\u3060\u3002\u3053\u3093\u306a\u3068\u304d\u306b\u7528\u3044\u3089\u308c\u308b\u306e\u304c\u3001\u8ee2\u79fb\u5b66\u7fd2 (transfer learning) / deep features\u3067\u3042\u308b\u3002\n\n# \u8ee2\u79fb\u5b66\u7fd2 (transfer learning) / deep features\n\n\u3053\u308c\u306f\u3001\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u3001\u51fa\u529b\u5c64\u3067\u306e\u7d50\u679c\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u3082\u306e\u3002\n\n\u305d\u3046\u3084\u3063\u3066\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u3092\u4f7f\u3063\u3066SVM\u306a\u3069\u306e\u8b58\u5225\u5668\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3092\u3001\u8ee2\u79fb\u5b66\u7fd2\u3068\u3088\u3073\u3001Deep Neural Networks\u304b\u3089\u5f97\u3089\u308c\u305f\u7279\u5fb4\u91cf\u306f\u3001deep features\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3002\u5168\u7d50\u5408\u5c64\u306e\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u304c\u3001\u3082\u3063\u3068\u524d\u6bb5\u306e\u51fa\u529b\u3092\u4f7f\u3063\u3066\u3044\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308b\u3002\n\n\u305f\u3068\u3048\u3070\u3001\u300c\u753b\u50cf\u30921000\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3059\u308b\u300d\u3068\u3044\u3046\u554f\u984c\u8a2d\u5b9a\u3067\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u30ab\u30c6\u30b4\u30ea\u304c1\u3064\u5897\u3048\u307e\u3057\u305f\u3063\u3066\u6642\u306b\u3001\u6700\u521d\u304b\u3089\u5b66\u7fd2\u3057\u76f4\u3059\u306e\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u9762\u5012\u3001\u3063\u3066\u3068\u304d\u306b\u975e\u5e38\u306b\u6709\u52b9\u3002\n\n\u3055\u3089\u306b\u3001\u30ab\u30c6\u30b4\u30ea\u304c\u5897\u3048\u305f\u6642\u3060\u3051\u3067\u306a\u304f\u3001\u5225\u306e\u7528\u9014\u306b\u4f7f\u3063\u3066\u3082\u3001\u308f\u308a\u3068\u3088\u3044\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u305f\u308a\u3059\u308b\u306e\u3067\u307e\u305f\u9762\u767d\u3044\u3002\n\n## \u3084\u3063\u3066\u307f\u308b\n\u8ee2\u79fb\u5b66\u7fd2\u3067\u306f\u306a\u304f\u3001deep features\u3092\u4f7f\u3063\u3066\u3001\u985e\u4f3c\u753b\u50cf\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3002\n\n### \u30c7\u30fc\u30bf\ngoogle image search\u3067\u30011408\u679a\u306e\u96fb\u8eca\u306e\u753b\u50cf\u3092\u96c6\u3081\u305f\u3002\n\u3044\u3061\u304a\u3046\u3001\"\u975e\u55b6\u5229\u76ee\u7684\u3067\u306e\u518d\u4f7f\u7528\u304c\u8a31\u53ef\u3055\u308c\u305f\u753b\u50cf\"\u3063\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3002\n\u4ee5\u4e0b\u3001img_0000.jpg \u301c img_1407.jpg \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u4fdd\u5b58\u3057\u3066\u3044\u308b\u524d\u63d0\u3002\n\n### \u65b9\u6cd5\ntensorflow\u3067\u3001inception-v3\u30e2\u30c7\u30eb\u3063\u3066\u306e\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u5229\u7528\u3059\u308b\u3002\n\n### \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb (inception v3)\n\n```\nhttp://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz\n```\n\n\u304b\u3089\u3001`classify_image_graph_def.pb`\u3092\u62bd\u51fa\u3002\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001 `ILSVRC 2012`\u3068\u3044\u30461000\u30ab\u30c6\u30b4\u30ea\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u3044\u3066\u30015\u3064\u30ab\u30c6\u30b4\u30ea\u9078\u629e\u3057\u305f\u6642\u306e\u6b63\u89e3\u7387\u306f\u300196.54%\u3089\u3057\u3044\u3002\u3061\u306a\u307f\u306b\u3001[Andrej Karpathy](http://karpathy.github.io/2014/09/02/what-i-learned-from-competing-against-a-convnet-on-imagenet/)\u3063\u3066\u4eba\u306f\u3001\u4eba\u9593\u304c\u540c\u3058\u30c7\u30fc\u30bf\u3067\u9811\u5f35\u308b\u3068\u300194.9%\u3060\u3063\u305f\u305d\u3046\u306a\u3002\n\n### \u30b3\u30fc\u30c9\n\n[deep_features.py](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/deep_features.py)\n\n```py:deep_features.py\nfrom helper import *\n\nIMG_DIR = '/path/to/img'\nMODEL_PATH = '/path/to/classify_image_graph_def.pb'\nIMG_NUM = 1408\nQUERY_IMG = 22\nCANDIDATES = 5\n\nwith tf.gfile.FastGFile(MODEL_PATH, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    pool3 = sess.graph.get_tensor_by_name('pool_3:0')\n    features = []\n    for i in range(IMG_NUM):\n        image_data = tf.gfile.FastGFile('%s/img_%04d.jpg' % (IMG_DIR, i), 'rb').read()\n        pool3_features = sess.run(pool3,{'DecodeJpeg/contents:0': image_data})\n        features.append(np.squeeze(pool3_features))\n\nquery_feat = features[QUERY_IMG]\nsims = [(k, round(1 - spatial.distance.cosine(query_feat, v), 3)) for k,v in enumerate(features)]\nprint(sorted(sims, key=operator.itemgetter(1), reverse=True)[:CANDIDATES + 1])\n```\n\n### \u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\n#### \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n```py\nwith tf.gfile.FastGFile(MODEL_PATH, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n```\n\n#### \u51fa\u529b\u7b87\u6240\u306e\u9078\u629e\npool_3\u3068\u3044\u3046\u51fa\u529b\u5c64\u306e\u4e00\u3064\u624b\u524d\u306e\u51fa\u529b\u3092\u4f7f\u3046\u3002\n\n```py\n    pool3 = sess.graph.get_tensor_by_name('pool_3:0')\n```\n\n#### deep features\n\n\u5168\u753b\u50cf\u306b\u5bfe\u3057\u3066\u7279\u5fb4\u62bd\u51fa\u3002\u5404\u753b\u50cf\u306b\u304a\u3044\u30662048\u6b21\u5143\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u304c\u5f97\u3089\u308c\u308b\u3002\n\n```py\n    for i in range(IMG_NUM):\n        image_data = tf.gfile.FastGFile('%s/img_%04d.jpg' % (IMG_DIR, i), 'rb').read()\n        pool3_features = sess.run(pool3,{'DecodeJpeg/contents:0': image_data})\n        features.append(np.squeeze(pool3_features))\n```\n\n#### \u985e\u4f3c\u753b\u50cf\u691c\u7d22\n\n\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u540c\u58eb\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3068\u305d\u306e\u4ed6\u306e\u753b\u50cf\u3067\u7b97\u51fa\u3057\u3001\u5927\u304d\u3044\u65b9\u304b\u3089\u4e26\u3079\u308b\u3002\n\u3053\u3053\u3067\u306f\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3092\u9664\u304b\u305a\u306b\u5168\u753b\u50cf\u306b\u5bfe\u3057\u3066\u985e\u4f3c\u5ea6\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30a8\u30ea\u753b\u50cf\u3068\u30af\u30a8\u30ea\u753b\u50cf\u3092\u6bd4\u8f03\u3057\u305f\u6642\u306e\u7d50\u679c\u306f1.0(\u53b3\u5bc6\u306b\u306f\u30011.0\u306b\u9650\u308a\u306a\u304f\u8fd1\u3044\u5024)\u306b\u306a\u308b\u3002\n\n```py\nquery_feat = features[QUERY_IMG]\nsims = [(k, round(1 - spatial.distance.cosine(query_feat, v), 3)) for k,v in enumerate(features)]\nprint(sorted(sims, key=operator.itemgetter(1), reverse=True)[:CANDIDATES + 1])\n```\n\n### \u5b9f\u884c\n\u4f7f\u3063\u3066\u3044\u308btensorflow\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306f\u3001`Warning`\u304c\u5927\u91cf\u306b\u51fa\u308b\u3051\u3069\u3001\u7121\u8996\u3002\n\n```\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\nW tensorflow/core/kernels/batch_norm_op.cc:36] Op is deprecated. It will cease to work in GraphDef version 9. Use tf.nn.batch_normalization().\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3002img_0022 \u304c\u985e\u4f3c\u5ea61.0\u3067\u3001img_0120 \u304c\u985e\u4f3c\u5ea60.911\u3067\u3001\u4ee5\u4e0b\u540c\u69d8\u3002\n\n```\n[(22, 1.0), (120, 0.911), (1363, 0.901), (516, 0.882), (974, 0.870), (809, 0.867)]\n```\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u30af\u30a8\u30ea\u753b\u50cf\u3092\u691c\u7d22\u5bfe\u8c61\u304b\u3089\u629c\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u985e\u4f3c\u5ea61.0\u306e\u3082\u306e\u304c\u51fa\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u3001\u3044\u308d\u3044\u308d\u306a\u7d50\u679c\u3092\u898b\u3084\u3059\u304f\u52a0\u5de5\u3057\u305f\u3082\u306e\u3092\u3002\n\n### \u7d50\u679c\n\n1\u679a\u305a\u3064\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001[deep_features_retrieval.pdf](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/deep_features_retrieval.pdf)\u306b\u3002\n\n\u2193\u3053\u3093\u306a\u611f\u3058\u3002\u6700\u5de6\u5217\u304c\u30af\u30a8\u30ea\u753b\u50cf\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u3001\u4f3c\u3066\u3044\u308b\u3068\u8a8d\u8b58\u3055\u308c\u305f\u753b\u50cf\u3002\u5c0f\u6570\u306e\u6570\u5024\u306f\u3001\u985e\u4f3c\u5ea6(0-1)\u3067\u3001\u5927\u304d\u3044\u307b\u3069\u985e\u4f3c\u6027\u304c\u9ad8\u3044\u3002\n![deep_features_retrieval](https://qiita-image-store.s3.amazonaws.com/0/127038/5f04a66b-4d76-53ba-451c-ce3ec3d9d82e.png)\n\n\u4f55\u3092\u4ee5\u3063\u3066\u4f3c\u3066\u3044\u308b\u3068\u8a8d\u8b58\u3055\u308c\u305f\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u7d50\u679c\u3082\u3042\u308b\u304c\u3001\u307e\u3041\u305d\u308c\u306f\u3057\u3087\u3046\u304c\u306a\u3044\u3002\n\n\u2193\u3044\u3044\u611f\u3058\u3002\n![deep_features_retrieval](https://qiita-image-store.s3.amazonaws.com/0/127038/65f2f7d2-a4eb-0a4a-bf0c-31a8cf05a9e2.png)\n\n\u2193\u3053\u308c\u306f\u3001\u3042\u307e\u308a\u3046\u307e\u304f\u3044\u3063\u3066\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u304c\u3001\u5b9f\u306f\u3001\u8def\u9762\u96fb\u8eca\u304c\u96c6\u307e\u3063\u3066\u3044\u3066\u9762\u767d\u3044\u3002\n![deep_features_retrieval](https://qiita-image-store.s3.amazonaws.com/0/127038/0acc2b82-abf7-a580-322d-052664fbd9f0.png)\n\n1000\u30ab\u30c6\u30b4\u30ea\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306a\u306e\u306b\u3001\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u304c\u6d41\u7528\u3067\u304d\u308b\uff08\u6c4e\u7528\u6027\u304c\u3042\u308b\uff09\u3053\u3068\u304c\u975e\u5e38\u306b\u8208\u5473\u6df1\u3044\u3002\n\n# \u304a\u308f\u308a\u306b\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u8ee2\u79fb\u5b66\u7fd2\u306e\u7d39\u4ecb\u3068\u3068\u3082\u306b\u3001\u5b66\u7fd2\u6e08\u307f\u306eCNN\u306e\u30e2\u30c7\u30eb\u3092\u6d41\u7528\u3057\u305fdeep features\u3092\u4f7f\u3063\u3066\u3001\u985e\u4f3c\u753b\u50cf\u691c\u7d22\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\u4e2d\u9593\u5c64\u306e\u51fa\u529b\u306b\u6c4e\u7528\u6027\u304c\u3042\u308b\u306a\u3093\u3066\u8208\u5473\u6df1\u3044\u3002\n"}