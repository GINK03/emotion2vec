{"context": "\n\n\u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0cPredicting Red Hat Business Value\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u57fa\u672c\u7684\u306a\u89e3\u6790\u306b\u95a2\u3057\u3066\u306f\uff0cKaggle\u307e\u3068\u3081:RedHat(\u524d\u7de8)\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u5b9f\u8df5\u7684\u306a\u30b3\u30fc\u30c9\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n\u6982\u8981\n\n\u524d\u7de8\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\uff0c\u5143\u3005\u306e\u30c7\u30fc\u30bf\u304c\u7279\u5fb4\u91cf\u3092\u5341\u5206\u306b\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\u51dd\u3063\u305f\u624b\u6cd5\u3092\u4f7f\u308f\u306a\u304f\u3068\u308295%\u4ee5\u4e0a\u306e\u30b9\u30b3\u30a2\u304c\u51fa\u308b\u305f\u3081\uff0c\u9006\u306b\u6b8b\u308a\u306e\u6570%\u3092\u3069\u306e\u3088\u3046\u306b\u8a70\u3081\u308b\u304b\u3067\u8272\u3005\u306a\u89e3\u6cd5\u304c\u8a66\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u6c4e\u7528\u6027\u306e\u9ad8\u3044\u624b\u6cd5\u3084\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3092\u5206\u985e\u554f\u984c\u3078\u6d3b\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3082\u767b\u5834\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u4ee5\u4e0b\u306e4\u3064\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n1st solution\n2nd solution\nXGBoost\u3092\u7528\u3044\u305f\u4e88\u6e2c\nKeras\u3092\u7528\u3044\u305f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\n\n1,2\u306b\u306f\u7279\u306b\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u306a\u304f\uff0c3, 4\u306f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7684\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30c9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\n1. 1st solution\n\u512a\u52dd\u8005\u306e\u8aac\u660e\u3092\u8f09\u305b\u3066\u884c\u304d\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u5206\u6563\u306e\u53ef\u8996\u5316\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u307e\u305f\uff0c\u3053\u306e\u8fba\u308a\u306e\u30b5\u30a4\u30c8\u3082\u56f3\u304c\u3042\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\u65e5\u672c\u8a9e\u3092\u8aad\u3093\u3067\u5206\u304b\u308b\u901a\u308a\uff0c\u5ef6\u3005\u3068\u9577\u8a71\u304c\u7d9a\u3044\u3066\u304a\u308a\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u306f\u51fa\u3066\u304d\u307e\u305b\u3093\uff0e\u4e0b\u306b\u884c\u304f\u307b\u3069\u65e5\u672c\u8a9e\u8a33\u304c\u3060\u3093\u3060\u3093\u96d1\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u308f\u304b\u308a\u306b\u304f\u3044\u4eba\u306f\u82f1\u8a9e\u672c\u6587\u304b\u53c2\u7167\u5143\u306e\u30b5\u30a4\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u4e0a\u4f4d\uff13\u30b0\u30eb\u30fc\u30d7\u3068\u306e\u5dee\u304c\u57cb\u307e\u3089\u305a\uff0cRadder\u304c\u304b\u306a\u308a\u30b9\u30c8\u30ec\u30b9\u30d5\u30eb\u306a\u65e5\u3005\u3092\u904e\u3054\u3057\u305f\u3053\u3068\u3060\u3051\u306f\u306f\u3063\u304d\u308a\u4f1d\u308f\u3063\u3066\u304d\u307e\u3059\uff0e\n\n\n\u4eca\u56de\u306e\u30e2\u30c7\u30eb\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff0e\u9069\u5207\u306a\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u975e\u5e38\u306b\u91cd\u8981\u3067\uff0c\u6b21\u306e\u3088\u3046\u306a\u624b\u6cd5\u3067CV\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n1)group_1=17304\u3092train, test\u30c7\u30fc\u30bf\u304b\u3089\u53d6\u308a\u9664\u304d\u307e\u3059\uff0e\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u30c7\u30fc\u30bf\u306ftraining\u30c7\u30fc\u30bf\u306e30%\u3092\u5360\u3081\u3066\u304a\u308a\uff0c\u5168\u3066outcome=0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n2)group1\u306b\u5bfe\u3057\u3066\u306f\u5225\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\uff0e\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306f3000\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u3067\u3042\u308b\uff0e(\u3053\u3053\u304c\u91cd\u8981)\n3)people file\u306b\u5bfe\u3057\uff0cstratified\u3055\u308c\u3066\u3044\u306a\u30445-fold CV\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\uff0e\n\n\n\n\u79c1\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3069\u3061\u3089\u304b\u3068\u3044\u3048\u3070\u5358\u7d14\u306a\u65b9\u3067\u3059\uff0e\u5143\u3005\u306e\u554f\u984c\u3092\u5c11\u6570\u306e\u5c0f\u3055\u3044\u554f\u984c\u3078\u524a\u6e1b\u3057\uff0c\u30bb\u30ab\u30f3\u30c9\u30ec\u30d9\u30eb\u306e\u30e2\u30c7\u30eb\u3067\u305d\u308c\u3089\u3092\u7d50\u5408\u3055\u305b\u308b\uff0e\u4ee5\u4e0b\u306b\u5247\u3063\u3066\u3044\u304f\u3064\u304b\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\na)group_1\u306e\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u304b\u3089activity\u3092select\u3059\u308b(\u4eca\u56de\u306f\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u306efirst/last activity\u3092\u4f7f\u7528\u3057\u305f)\nb)\u540c\u69d8\u306eoutcome\u3092\u3082\u3064\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u5168\u3066\u306eactivity\u3092\u96c6\u3081\u308b\nc)\u7279\u5fb4\u91cf\u3092\u5727\u7e2e\u3059\u308b\uff0etf-idf\u304c\u7279\u306b\u4fbf\u5229\uff0e\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u306e\u7279\u6027\u8a08\u7b97\u3092\u884c\u306a\u3063\u305f\uff0e(\u5404\u30b0\u30eb\u30fc\u30d7\u5185\u3084\u5168\u4f53\u3067\u540c\u3058\u5c5e\u6027\u3092\u3082\u3064\u4eba\u3005\u306b\u5bfe\u3057\u3066)\nd)\u5358\u7d14\u306a\uff0c\u5358\u7d14\u3067\u306a\u3044\u7279\u5fb4\u91cf\u3092\u4ed8\u52a0\u3059\u308b\uff0e(group_1 id\u306e\u5024\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u306eactivity\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u4eba\u3005\uff0c\u65e5\u4ed8\u306e\u6700\u5927\u6700\u5c0f\uff0c\u306a\u3069)\u4eca\u56de\u306f\u7279\u9577\u91cf\u9593\u306e\u76f8\u4e92\u95a2\u4fc2\u3084\u78ba\u7387\u60c5\u5831\u306f\u7528\u3044\u306a\u304b\u3063\u305f\uff0e\ne)\u5206\u985e\u5668\u3092\u4f5c\u6210\u3059\u308b\uff0e\u4eca\u56de\u306fXGBoost\u3060\u3051\u3092\u4f7f\u7528\u3057\u305f\uff0e\u305d\u308c\u5358\u4f53\u30670.84AUC\u307e\u3067\u9054\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\uff0e(\u30ea\u30fc\u30af\u30c7\u30fc\u30bf\u306e\u4f7f\u7528\u306f\u306a\u3057)\n\n\n\n\u4e0a\u8a18\u306e\u624b\u6cd5\u3092\u9069\u5207\u306b\u884c\u3046\u305f\u3081\uff0c\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044CV\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\u4eca\u56de\u306e\u5206\u89e3\u65b9\u6cd5\u306fpeople_id, \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u3044\u3066\u884c\u308f\u308c\u3066\u3044\u308b\uff0e\u3053\u306eCV\u306f\u3044\u304f\u3064\u304b\u306eaggregated CV split scheme\u3092\u5143\u306b\u3057\u3066\u3044\u308b\uff0e\u3053\u306e\u624b\u6cd5\u306f\u9996\u5c3e\u3088\u304f\u52d5\u4f5c\u3059\u308b\u304c\uff0c15\u3082\u306eXGBoost\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u4e8c\u3064\u306e\u30ec\u30d9\u30eb\u3092\u4f5c\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff0e\u3053\u306e\u3088\u3046\u306aCV\u306e\u8003\u3048\u65b9\u306f\u91cd\u8981\u306b\u306a\u308b\u304c\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u304f\uff0e\n\u3053\u3053\u3067\u306f\uff0c4\u3064\u306e\u3088\u304f\u52d5\u4f5c\u3059\u308b1st level\u30e2\u30c7\u30eb\u3092\u7d39\u4ecb\u3059\u308b\uff0e(\u305d\u306e\u3046\u30612\u3064\u306fpublic LB\u3067\u3088\u304f\u52d5\u4f5c\u3059\u308b\uff0c\u6b8b\u308a\u306e2\u3064\u306f2nd level\u30e2\u30c7\u30eb\u306b\u3066\u6700\u3082\u512a\u308c\u305fCV\u30b9\u30b3\u30a2\u3092\u51fa\u3059)2nd layer\u30e2\u30c7\u30eb\u306b\u306f\u975e\u5e38\u306b\u6ce8\u610f\u6df1\u3044\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0\u30b9\u30ad\u30eb\u3092\u5fc5\u8981\u3068\u3059\u308b\uff0e\u307e\u305f\uff0c\u30ea\u30fc\u30af\u3055\u308c\u305f\u89e3\u653e\u3092\u542b\u3081\u305f\u89e3\u653e\u3092CV\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\uff0coutcome\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u306e\u4e88\u6e2c\u304cML\u3067\u5b66\u7fd2\u3055\u308c\u308b\uff1f\uff0e2nd level\u30e2\u30c7\u30eb\u306f2\u3064\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\uff0e\u30ea\u30fc\u30af\u60c5\u5831\u306b\u95a2\u9023\u3057\u305f\u4e88\u6e2c\u78ba\u7387\u3068\uff0c\u305d\u3057\u3066\u30ea\u30fc\u30af\u60c5\u5831\u306b\u7121\u95a2\u4fc2\u306a\u4e88\u6e2c\u78ba\u7387\u3067\u3042\u308b\uff0e\u30e2\u30c7\u30eb\u81ea\u4f53\u306f\u30b7\u30f3\u30d7\u30eb\u3060\u304c\uff0cgroup/population\u306e\u6642\u9593\u5909\u5316\u3092\u6349\u3048\u308b\u305f\u3081\uff0c\u3044\u304f\u3064\u304b\u306e\u30b9\u30de\u30fc\u30c8\u306a\u7279\u9577\u91cf\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\uff0e\n\u4e0a\u8a18\u306e\u72b6\u614b(\u307e\u3068\u3082\u306a\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f7f\u7528)\uff0c\u30b3\u30f3\u30da\u306e\u9014\u4e2d\u7d4c\u904e\u30674\u4f4d\u3060\u3063\u305f\uff0e\uff13\u4f4d\u4ee5\u4e0a\u306e\u53c2\u52a0\u8005\u304c\u65e5\u306b\u65e5\u306b\u30b9\u30b3\u30a2\u3092\u5411\u4e0a\u3055\u305b\u3066\u3044\u304f\u306e\u3092\u898b\u305f\uff0e\u305d\u3053\u3067\uff0c\u5f7c\u3089\u304cpublic LB\u3067\u30ea\u30fc\u30af(\u4e88\u6e2c\u6f0f\u308c\uff1f)\u3092\u5897\u3084\u3059\u305f\u3081\u306b\u624b\u4f5c\u696d\u3067\u958b\u62d3\u3057\u3066\u3044\u308b\u5185\u5bb9\u306b\u3064\u3044\u3066\u8003\u3048\u305f\uff0e(\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u969b\u306e)public/private\u306e\u30c7\u30fc\u30bf\u5206\u5272\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u3042\u308b\uff0e\u3042\u308b\u4eba\u306f\u624b\u4f5c\u308a\u306etest group submission\u3092\u3057\uff0c\u30b9\u30b3\u30a2\u3092\u5f97\u308b\u305f\u3081\u7279\u5b9a\u30b0\u30eb\u30fc\u30d7\u306e\u30ea\u30fc\u30af\u306b\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u3092\u4f7f\u7528\u3057\u305f\uff0e\u305d\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5168\u4f53\u306eoutcome\u306e\u78ba\u7387\u304c\u3069\u308c\u3060\u3051\u304b\u3092\u6c7a\u5b9a\u3057\u305f\uff0e(???)\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\uff0c\u53ef\u80fd\u306a\u9650\u308a\u6700\u3082\u5927\u304d\u3044group_1\u304c\u624b\u306b\u5165\u308b\u3088\u3046\u5927\u91cf\u306esubmission\u3092\u3057\uff0c\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6\u304c\u60aa\u3044\u5e7e\u3064\u304b\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u767a\u898b\u3057\u305f\uff0e\u305d\u308c\u3092\u5ff5\u982d\u306b\u304a\u3044\u3066\u3044\u304f\u3064\u304b\u306e\u512a\u308c\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\uff0e(\u3064\u307e\u308a\u30e2\u30c7\u30eb\u3084CV\u65b9\u6cd5\u306b\u5fae\u8abf\u6574\u3092\u52a0\u3048\u3066\u3069\u3093\u3069\u3093\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\uff0c\u90fd\u5408\u306e\u826f\u3044\u30b0\u30eb\u30fc\u30d7\u304c\u30e9\u30f3\u30c0\u30e0\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u4f55\u5ea6\u3082submission\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u3044\u3046\u3053\u3068\uff1f)\n\u305d\u3057\u3066\u6700\u5f8c\u306esubmission\u3067\u306f\uff0c\u5358\u7d14\u306b\u4eca\u307e\u3067\u306eLB, CV\u305d\u308c\u305e\u308c\u3067\u6700\u3082\u3088\u304f\u6a5f\u80fd\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5358\u7d14\u306b\u5e73\u5747\u5316\u3057\u305f\uff0e\u9a5a\u304f\u3079\u304d\u3053\u3068\u306b\uff0c\u3053\u308c\u306f\u4eca\u307e\u3067\u3067\u6700\u3082\u9ad8\u3044\u30b9\u30b3\u30a2\u3092\u51fa\u3057\u305f\uff0e\n\n\n2. 2nd solution\n\u4eca\u56de\u306fRadder(\u512a\u52dd\u8005)\u304c\u7d06\u4f59\u66f2\u6298\u3057\u3066\u512a\u52dd\u3057\u305f\u305f\u3081\u304b\uff0c\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3067\u306f\u3088\u308a\u30b9\u30de\u30fc\u30c8\u306a\u89e3\u6cd5\u3092\u63d0\u6848\u3057\u305f2\u4f4d\u4ee5\u4e0b\u306e\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u306e\u65b9\u304c\u4eba\u6c17\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff12\u4f4d\u306e\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3092\u8a18\u8ff0\u3057\u307e\u3059\uff0e\n\nstep 1\ntraining\u30b5\u30f3\u30d7\u30eb\u306b\u767b\u5834\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3078\uff0c\u3044\u304f\u3064\u304b\u306e\u78ba\u7387\u88dc\u5b8c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\u6b21\u306e\u56f3\u306fgroup 7\u3092\u6642\u7cfb\u5217\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u4e88\u6e2c\u78ba\u7387\u3067\u3059\uff0e\n\ntraining\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u78ba\u7387\u306f\uff11\uff0c\u5225\u306e\u65e5\u3067\u306f\u78ba\u7387\u304c\u4f4e\u4e0b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6b21\u306e\u56f3\u306f\u540c\u69d8\u306e\u4e88\u6e2c\u7d50\u679c\u3067\u3059\u304c\uff0c\u5168\u30c7\u30fc\u30bf\u7bc4\u56f2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\nstep 2\n\u4eca\u56de\u306f34224\u3082\u306e\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u304c\u30c7\u30fc\u30bf\u306b\u3042\u308a\u307e\u3059\uff0e\u30b0\u30eb\u30fc\u30d7\u306f\u7d71\u8a08\u7684\u89b3\u70b9\u304b\u3089\u5358\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u305f\u3081\uff0c\u3053\u306e\u6570\u5024\u306f\u5b9f\u969b\u306e\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u3067\u3059(?)\uff0e\n\u554f\u984c\u70b9\u3068\u3057\u3066\u306f\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u7570\u306a\u308b\u5024\u3092\u3068\u308b\u7279\u5fb4\u91cf\u3067\u3059\uff0e\u3059\u3079\u3066\u306e\u30b0\u30eb\u30fc\u30d7\uff0c\u3059\u3079\u3066\u306e\u7279\u5fb4\u91cf\u3067\uff0c\u6211\u3005\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8a08\u7b97\u3057\u305f\uff0e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306ebins\u306f\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3067\u3059\uff0e\u3053\u308c\u306f\u30d0\u30a4\u30ca\u30ea\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\"fuzzy\"\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059(?)\uff0e\n\u4e88\u6e2c\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\uff0e\nA) Logistic regression\nB) KNN\nC) XGBoost based public scripts\n\nstep 3\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\uff0cLB\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u53c2\u8003\u306b\u6539\u826f\u3057\u307e\u3059\uff0e\n\n3. XGBoost\u3092\u7528\u3044\u305f\u4e88\u6e2c\n\u6700\u3082\u52b9\u679c\u7684\u304b\u3064\u4e00\u822c\u7684\u306aXGBoost\u3092\u7528\u3044\u305f\u624b\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\u4f5c\u6210\u8005\u306e\u30b3\u30fc\u30c9(Abriosi)\u306e\u30b3\u30fc\u30c9\u304b\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u975e\u5e38\u306b\u5358\u7d14\u3067\uff0c\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\uff0cXGBoost\u3067\u4e88\u6e2c\u3059\u308b\u3068\u3044\u3046\u5185\u5bb9\u3067\u3059\uff0e\n\u8981\u70b9\u3060\u3051\u89e3\u8aac\u3057\u3066\u884c\u304d\u307e\u3059\uff0e\npd.read()\u3092\u3057\u305f\u5f8c\uff0cchar_10\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\uff0e(\u6b20\u640d\u5024\u304c\u591a\u3044\u304b\u3089\uff1f)\nact_train_data=act_train_data.drop('char_10',axis=1)\nact_test_data=act_test_data.drop('char_10',axis=1)\n\nchar_10\u3092\u53d6\u308a\u9664\u3044\u305fact_train_data\u3084\u4ed6\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3078\uff0cact_data_treatment\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\nact_train_data  = act_data_treatment(act_train_data)\nact_test_data   = act_data_treatment(act_test_data)\npeople_data = act_data_treatment(people_data)\n\nact_data_treatment\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\ndef act_data_treatment(dsname):\n    dataset = dsname\n\n    for col in list(dataset.columns):\n        if col not in ['people_id', 'activity_id', 'date', 'char_38', 'outcome']:\n            if dataset[col].dtype == 'object':\n                dataset[col].fillna('type 0', inplace=True)\n                dataset[col] = dataset[col].apply(lambda x: x.split(' ')[1]).astype(np.int32)\n            elif dataset[col].dtype == 'bool':\n                dataset[col] = dataset[col].astype(np.int8)\n\n    dataset['year'] = dataset['date'].dt.year\n    dataset['month'] = dataset['date'].dt.month\n    dataset['day'] = dataset['date'].dt.day\n    dataset['isweekend'] = (dataset['date'].dt.weekday >= 5).astype(int)\n    dataset = dataset.drop('date', axis = 1)\n\n    return dataset\n\n\u8981\u3059\u308b\u306b['people_id', 'activity_id', 'date', 'char_38', 'outcome']\u4ee5\u5916\u306e\u5168\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\uff0c['date']\u3092\u5e74\u6708\u65e5\u9031\u3078\u5206\u3051\u3066\u3044\u308b\u3060\u3051\u3067\u3059\uff0e\n\u305d\u3057\u3066\uff0ctrain, test\u3092\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u3078reduce_dimen\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\nwhole=pd.concat([train,test],ignore_index=True)\ncategorical=['group_1','activity_category','char_1_x','char_2_x','char_3_x','char_4_x','char_5_x','char_6_x','char_7_x','char_8_x','char_9_x','char_2_y','char_3_y','char_4_y','char_5_y','char_6_y','char_7_y','char_8_y','char_9_y']\nfor category in categorical:\n    whole=reduce_dimen(whole,category,9999999)\n\nX=whole[:len(train)]\nX_test=whole[len(train):]\n\ndel train\ndel whole\n\nreduce_dimen\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\ndef reduce_dimen(dataset,column,toreplace):\n    for index,i in dataset[column].duplicated(keep=False).iteritems():\n        if i==False:\n            dataset.set_value(index,column,toreplace)\n    return dataset\n\n\u5165\u529bX\u306e\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092OneHotEncoder\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\uff0e\n\u3053\u308c\u306b\u3088\u308a0\u30681\u306e\u30b9\u30d1\u30fc\u30b9\u306a\u884c\u5217X_sparse\u304c\u5b8c\u6210\u3057\u307e\u3059\uff0e\nenc = OneHotEncoder(handle_unknown='ignore')\nenc=enc.fit(pd.concat([X[categorical],X_test[categorical]]))\nX_cat_sparse=enc.transform(X[categorical])\nX_test_cat_sparse=enc.transform(X_test[categorical])\nfrom scipy.sparse import hstack\nX_sparse=hstack((X[not_categorical], X_cat_sparse))\nX_test_sparse=hstack((X_test[not_categorical], X_test_cat_sparse))\n\nX_sparse\u3092DMatrix\u3078\u5909\u63db\u3057\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff0e\n\u5404parameter\u306e\u5185\u5bb9\u306f\uff0c\u8a73\u3057\u304f\u7d39\u4ecb\u3057\u3066\u3044\u308b\u30b5\u30a4\u30c8\u304c\u591a\u6570\u3042\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u304d\u307e\u3059\uff0e\n\u3060\u3044\u305f\u3044\u30e1\u30a4\u30f3\u306f{'max_depth':10, 'eta':0.02, 'silent':1, 'objective':'binary:logistic' }\u306e4\u3064\u3067\u3059\uff0e\nprint(\"Training data: \" + format(X_sparse.shape))\nprint(\"Test data: \" + format(X_test_sparse.shape))\nprint(\"###########\")\nprint(\"One Hot enconded Test Dataset Script\")\n\ndtrain = xgb.DMatrix(X_sparse,label=y)\ndtest = xgb.DMatrix(X_test_sparse)\n\nparam = {'max_depth':10, 'eta':0.02, 'silent':1, 'objective':'binary:logistic' }\nparam['nthread'] = 4\nparam['eval_metric'] = 'auc'\nparam['subsample'] = 0.7\nparam['colsample_bytree']= 0.7\nparam['min_child_weight'] = 0\nparam['booster'] = \"gblinear\"\n\nXGBoost\u3067\u5b66\u7fd2\u3057\uff0c\u4e88\u6e2c\u3092\u3057\u3066\u7d42\u4e86\u3067\u3059\uff0e\nwatchlist  = [(dtrain,'train')]\nnum_round = 300\nearly_stopping_rounds=10\nbst = xgb.train(param, dtrain, num_round, watchlist,early_stopping_rounds=early_stopping_rounds)\n\nypred = bst.predict(dtest)\noutput = pd.DataFrame({ 'activity_id' : test['activity_id'], 'outcome': ypred })\noutput.head()\n\n\u3053\u308c\u306798%\u8fd1\u3044\u30b9\u30b3\u30a2\u304c\u51fa\u307e\u3059\uff0e\n\n4. Keras\u3092\u7528\u3044\u305f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\n\u3068\u308a\u3042\u3048\u305a\u30cb\u30e5\u30fc\u30e9\u30eb\u7684\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3084\u3063\u3066\u307f\u305f\uff0c\u3068\u3044\u3046\u4eba\u306f\u7d50\u69cb\u3044\u307e\u3059\uff0e\n\u57fa\u672c\u7684\u306b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306f\u753b\u50cf\u30c7\u30fc\u30bf\u4ee5\u5916\u3067Best model\u3068\u306a\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u304c\uff0cXGBoost\u3084RandomForest\u3068\u4e88\u6e2c\u7d50\u679c\u306e\u76f8\u95a2\u304c\u4f4e\u3044\u305f\u3081\u304b\uff0c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067XGBoost\u3092\u88dc\u5f37\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\uff0e\n2016\u5e74\u306eKaggle\u3067\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3068\u3044\u3048\u3070\u307b\u3068\u3093\u3069Keras\u3067\u3057\u305f\uff0e\n\u3053\u3053\u3067\u306fKeras\u3092\u7528\u3044\u305f\u30af\u30e9\u30b9\u5206\u985e\u3092\u884c\u3044\u307e\u3059\uff0e\n\n4.1. \u30e2\u30c7\u30eb\u8a2d\u8a08\u307e\u3067\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\nimport pandas as pd\nimport numpy as np\nfrom scipy import sparse as ssp\nimport pylab as plt\nfrom sklearn.preprocessing import LabelEncoder,LabelBinarizer,MinMaxScaler,OneHotEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD,NMF,PCA,FactorAnalysis\nfrom sklearn.feature_selection import SelectFromModel,SelectPercentile,f_classif\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.metrics import log_loss,roc_auc_score\nfrom sklearn.pipeline import Pipeline,make_pipeline\nfrom sklearn.cross_validation import StratifiedKFold,KFold\nfrom keras.preprocessing import sequence\nfrom keras.callbacks import ModelCheckpoint,Callback\nfrom keras import backend as K\nfrom keras.layers import Input, Embedding, LSTM, Dense,Flatten, Dropout, merge,Convolution1D,MaxPooling1D,Lambda,AveragePooling1D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import SGD\nfrom keras.layers.advanced_activations import PReLU,LeakyReLU,ELU,SReLU\nfrom keras.models import Model\n\nKeras, tensorflow(theano)\u306f\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\uff0e\n\u65e5\u672c\u8a9e\u3067\u66f8\u304b\u308c\u305f\u30b5\u30a4\u30c8\u3082\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\uff0e\n\u6b21\u306b\u30c7\u30fc\u30bf\u30d1\u30b9\u3068\u30b7\u30fc\u30c9\u306e\u8a2d\u5b9a\u3067\u3059\uff0e\nseed = 1\nnp.random.seed(seed)\ndim = 32\nhidden=64\n\npath = \"../input/\"\n\ntrain, test, people\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u3092data\u3068\u3057\u307e\u3059\uff0e\ndata\u306f\u5165\u529b\uff0c\u4e2d\u9593\uff0c\u51fa\u529b\u5c64\u306e\u4f5c\u6210\u306e\u305f\u3081\u306b\u5229\u7528\u3057\uff0c\u30e2\u30c7\u30ea\u30f3\u30b0\u304c\u5b8c\u4e86\u3059\u308c\u3070\u524a\u9664\u3059\u308b\u5909\u6570\u3067\u3059\uff0e\ntrain = pd.read_csv(path+'act_train.csv')\ntest = pd.read_csv(path+'act_test.csv')\npeople = pd.read_csv(path+'people.csv')\ncolumns = people.columns\ntest['outcome'] = np.nan\ndata = pd.concat([train,test])\n\ndata = pd.merge(data,people,how='left',on='people_id').fillna('missing')\ntrain = data[:train.shape[0]]\ntest = data[train.shape[0]:]\n\n\u3053\u3053\u307e\u3067\u3067\uff0cdata\u306eshape\u306f(2695978, 55)\uff0cpeople_id, activity_id\u3092\u542b\u3093\u3060DataFrame\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u6b21\u306b\u30ab\u30e9\u30e0\u60c5\u5831\u3092columns\u3068\u3057\uff0csklearn\u306eLabelEncoder\u3067data\u306e\u5024\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\uff0e\ndata\u306e\u4e2d\u306b\u306fmissing\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3061\u3089\u3082\u901a\u5e38\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3068\u540c\u69d8\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3059\uff0e\n\u304b\u306a\u308a\u4e01\u5be7\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9577\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\uff0e\ncolumns = train.columns.tolist()\ncolumns.remove('activity_id')\ncolumns.remove('outcome')\ndata = pd.concat([train,test])\nfor c in columns:\n    data[c] = LabelEncoder().fit_transform(data[c].values)\n\ntrain = data[:train.shape[0]]\ntest = data[train.shape[0]:]\ndata = pd.concat([train,test])\ncolumns = train.columns.tolist()\ncolumns.remove('activity_id')\ncolumns.remove('outcome')\n\n\u30c7\u30fc\u30bf\u306e\u4e0b\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3068\u3053\u308d\u3067\uff0c\u30ec\u30a4\u30e4\u30fc\u306e\u8a2d\u5b9a\u3092\u59cb\u3081\u307e\u3059\uff0e\nKeras\u306eInput layer, Embedding layer\u3092\u6e96\u5099\u3057\uff0c\u4f5c\u6210\u3057\u305fcolumns\u306b\u6cbf\u3063\u3066layer\u3092\u6e96\u5099\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5404\u5c64\u306e\u8a73\u7d30\u306fKeras\u306e\u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3\u306e\"Input(Embedding + Flatten) + Layer + Dropout + Output\"\u3067\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8a73\u7d30\u3092\u7701\u304d\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306b\u5b8c\u6210\u3057\u305fmodel\u3092\u53ef\u8996\u5316\u3057\u305f\u56f3\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n\n4.2. \u5165\u529b\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u304b\u3089model.fit\u307e\u3067\n\u5148\u307b\u3069\u4f7f\u7528\u3057\u305fdata\u306fmodel\u4f5c\u6210\u7528\u3060\u3063\u305f\u306e\u3067\uff0c\u5165\u529b\u7528\u306bX,y\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\nskf\u3067\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3057\uff0cX_train, X_test\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\nX = train[columns].values\nX_t = test[columns].values\ny = train[\"outcome\"].values\npeople_id = train[\"people_id\"].values\nactivity_id = test['activity_id']\ndel train\ndel test\n\nskf = StratifiedKFold(y, n_folds=4, shuffle=True, random_state=seed)\nfor ind_tr, ind_te in skf:\n    X_train = X[ind_tr]\n    X_test = X[ind_te]\n\n    y_train = y[ind_tr]\n    y_test = y[ind_te]\n    break\n\nX_train = [X_train[:,i] for i in range(X.shape[1])]\nX_test = [X_test[:,i] for i in range(X.shape[1])]\n\ndel X\n\n\u5143\u306e\u30b3\u30fc\u30c9\u3067\u306f\uff0c\u6b21\u306bModelCheckpoint\u3092\u7528\u3044\u3066model\u306e\u4fdd\u5b58\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3057\u304b\u3057\u7d50\u5c40model.fit\u3067checkpoint\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8a73\u7d30\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\uff0e\n\u6700\u5f8c\u306bmodel.fit\u3068model.predict\u3092\u3057\u3066\u5b8c\u4e86\u3067\u3059\uff0e\nmodel.fit(\n    X_train, \n    y_train,\n    batch_size=batch_size, \n    nb_epoch=nb_epoch, \n    verbose=1, \n    shuffle=True,\n    validation_data=[X_test,y_test],\n    callbacks = [\n        model_checkpoint,\n        auc_callback,\n        ],\n    )\n\n\u4e88\u6e2c\u7cbe\u5ea6\u306e\u30b9\u30b3\u30a2\u306f\u6700\u59270.98\u3067\u3059\uff0e\n\u5143\u3005\u306e\u30c7\u30fc\u30bf\u304c\u4e88\u6e2c\u3057\u3084\u3059\u3044\u30c7\u30fc\u30bf\u306a\u306e\u3067\uff0c\u7279\u306b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u304c\u512a\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\n# \u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0c[Predicting Red Hat Business Value](https://www.kaggle.com/c/predicting-red-hat-business-value)\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u57fa\u672c\u7684\u306a\u89e3\u6790\u306b\u95a2\u3057\u3066\u306f\uff0c[Kaggle\u307e\u3068\u3081:RedHat(\u524d\u7de8)](http://qiita.com/TomHortons/items/039852bca3714b43e887)\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u5b9f\u8df5\u7684\u306a\u30b3\u30fc\u30c9\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n# \u6982\u8981\n\n![front_page.png](https://kaggle2.blob.core.windows.net/competitions/kaggle/5261/media/Red_Hat_Kaggle_Co-brand_rgb_logo.png)\n\n[\u524d\u7de8](http://qiita.com/TomHortons/items/039852bca3714b43e887)\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\uff0c\u5143\u3005\u306e\u30c7\u30fc\u30bf\u304c\u7279\u5fb4\u91cf\u3092\u5341\u5206\u306b\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\u51dd\u3063\u305f\u624b\u6cd5\u3092\u4f7f\u308f\u306a\u304f\u3068\u308295%\u4ee5\u4e0a\u306e\u30b9\u30b3\u30a2\u304c\u51fa\u308b\u305f\u3081\uff0c\u9006\u306b\u6b8b\u308a\u306e\u6570%\u3092\u3069\u306e\u3088\u3046\u306b\u8a70\u3081\u308b\u304b\u3067\u8272\u3005\u306a\u89e3\u6cd5\u304c\u8a66\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u6c4e\u7528\u6027\u306e\u9ad8\u3044\u624b\u6cd5\u3084\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3092\u5206\u985e\u554f\u984c\u3078\u6d3b\u7528\u3059\u308b\u30b3\u30fc\u30c9\u3082\u767b\u5834\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u672c\u8a18\u4e8b\u3067\u306f\u4ee5\u4e0b\u306e4\u3064\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n1. 1st solution\n2. 2nd solution\n3. XGBoost\u3092\u7528\u3044\u305f\u4e88\u6e2c\n4. Keras\u3092\u7528\u3044\u305f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\n\n1,2\u306b\u306f\u7279\u306b\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u306a\u304f\uff0c3, 4\u306f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7684\u306a\u30b5\u30f3\u30d7\u30eb\u30b3\u30c9\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\n# 1. 1st solution\n\n[\u512a\u52dd\u8005\u306e\u8aac\u660e](https://www.kaggle.com/c/predicting-red-hat-business-value/forums/t/23786/long-story-of-1-solution?forumMessageId=136176)\u3092\u8f09\u305b\u3066\u884c\u304d\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u5206\u6563\u306e\u53ef\u8996\u5316\u306f[\u3053\u3061\u3089](http://qiita.com/TomHortons/items/039852bca3714b43e887)\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u307e\u305f\uff0c[\u3053\u306e\u8fba\u308a\u306e\u30b5\u30a4\u30c8](http://blog.kaggle.com/2016/11/03/red-hat-business-value-competition-1st-place-winners-interview-darius-barusauskas/)\u3082\u56f3\u304c\u3042\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\n\u65e5\u672c\u8a9e\u3092\u8aad\u3093\u3067\u5206\u304b\u308b\u901a\u308a\uff0c\u5ef6\u3005\u3068\u9577\u8a71\u304c\u7d9a\u3044\u3066\u304a\u308a\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u306f\u51fa\u3066\u304d\u307e\u305b\u3093\uff0e\u4e0b\u306b\u884c\u304f\u307b\u3069\u65e5\u672c\u8a9e\u8a33\u304c\u3060\u3093\u3060\u3093\u96d1\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u308f\u304b\u308a\u306b\u304f\u3044\u4eba\u306f\u82f1\u8a9e\u672c\u6587\u304b\u53c2\u7167\u5143\u306e\u30b5\u30a4\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u4e0a\u4f4d\uff13\u30b0\u30eb\u30fc\u30d7\u3068\u306e\u5dee\u304c\u57cb\u307e\u3089\u305a\uff0cRadder\u304c\u304b\u306a\u308a\u30b9\u30c8\u30ec\u30b9\u30d5\u30eb\u306a\u65e5\u3005\u3092\u904e\u3054\u3057\u305f\u3053\u3068\u3060\u3051\u306f\u306f\u3063\u304d\u308a\u4f1d\u308f\u3063\u3066\u304d\u307e\u3059\uff0e\n\n\n![Screen Shot 2017-01-19 at 14.30.18.png](https://qiita-image-store.s3.amazonaws.com/0/72093/6dc7c148-aad4-020a-6e5e-1dedd2c3ea28.png)\n\n>\u4eca\u56de\u306e\u30e2\u30c7\u30eb\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff0e\u9069\u5207\u306a\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u975e\u5e38\u306b\u91cd\u8981\u3067\uff0c\u6b21\u306e\u3088\u3046\u306a\u624b\u6cd5\u3067CV\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n>1)group_1=17304\u3092train, test\u30c7\u30fc\u30bf\u304b\u3089\u53d6\u308a\u9664\u304d\u307e\u3059\uff0e\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u30c7\u30fc\u30bf\u306ftraining\u30c7\u30fc\u30bf\u306e30%\u3092\u5360\u3081\u3066\u304a\u308a\uff0c\u5168\u3066outcome=0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n>2)group1\u306b\u5bfe\u3057\u3066\u306f\u5225\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\uff0e\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306f3000\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u3067\u3042\u308b\uff0e(\u3053\u3053\u304c\u91cd\u8981)\n>3)people file\u306b\u5bfe\u3057\uff0cstratified\u3055\u308c\u3066\u3044\u306a\u30445-fold CV\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3059\u308b\uff0e\n\n![Screen Shot 2017-01-19 at 14.30.51.png](https://qiita-image-store.s3.amazonaws.com/0/72093/d077b00d-e882-4ef3-1296-4aad65647bc3.png)\n\n>\u79c1\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3069\u3061\u3089\u304b\u3068\u3044\u3048\u3070\u5358\u7d14\u306a\u65b9\u3067\u3059\uff0e\u5143\u3005\u306e\u554f\u984c\u3092\u5c11\u6570\u306e\u5c0f\u3055\u3044\u554f\u984c\u3078\u524a\u6e1b\u3057\uff0c\u30bb\u30ab\u30f3\u30c9\u30ec\u30d9\u30eb\u306e\u30e2\u30c7\u30eb\u3067\u305d\u308c\u3089\u3092\u7d50\u5408\u3055\u305b\u308b\uff0e\u4ee5\u4e0b\u306b\u5247\u3063\u3066\u3044\u304f\u3064\u304b\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n>a)group_1\u306e\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u304b\u3089activity\u3092select\u3059\u308b(\u4eca\u56de\u306f\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\u306efirst/last activity\u3092\u4f7f\u7528\u3057\u305f)\n>b)\u540c\u69d8\u306eoutcome\u3092\u3082\u3064\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u5168\u3066\u306eactivity\u3092\u96c6\u3081\u308b\n>c)\u7279\u5fb4\u91cf\u3092\u5727\u7e2e\u3059\u308b\uff0e[tf-idf](https://ja.wikipedia.org/wiki/Tf-idf)\u304c\u7279\u306b\u4fbf\u5229\uff0e\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u306e\u7279\u6027\u8a08\u7b97\u3092\u884c\u306a\u3063\u305f\uff0e(\u5404\u30b0\u30eb\u30fc\u30d7\u5185\u3084\u5168\u4f53\u3067\u540c\u3058\u5c5e\u6027\u3092\u3082\u3064\u4eba\u3005\u306b\u5bfe\u3057\u3066)\n>d)\u5358\u7d14\u306a\uff0c\u5358\u7d14\u3067\u306a\u3044\u7279\u5fb4\u91cf\u3092\u4ed8\u52a0\u3059\u308b\uff0e(group_1 id\u306e\u5024\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u306eactivity\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u4eba\u3005\uff0c\u65e5\u4ed8\u306e\u6700\u5927\u6700\u5c0f\uff0c\u306a\u3069)\u4eca\u56de\u306f\u7279\u9577\u91cf\u9593\u306e\u76f8\u4e92\u95a2\u4fc2\u3084\u78ba\u7387\u60c5\u5831\u306f\u7528\u3044\u306a\u304b\u3063\u305f\uff0e\n>e)\u5206\u985e\u5668\u3092\u4f5c\u6210\u3059\u308b\uff0e**\u4eca\u56de\u306fXGBoost\u3060\u3051\u3092\u4f7f\u7528\u3057\u305f\uff0e**\u305d\u308c\u5358\u4f53\u30670.84AUC\u307e\u3067\u9054\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\uff0e(\u30ea\u30fc\u30af\u30c7\u30fc\u30bf\u306e\u4f7f\u7528\u306f\u306a\u3057)\n\n![Screen Shot 2017-01-19 at 14.32.22.png](https://qiita-image-store.s3.amazonaws.com/0/72093/dd9a77cd-5ded-e1f9-a05f-4c1d006f2e44.png)\n\n>\u4e0a\u8a18\u306e\u624b\u6cd5\u3092\u9069\u5207\u306b\u884c\u3046\u305f\u3081\uff0c\u3042\u307e\u308a\u4e00\u822c\u7684\u3067\u306f\u306a\u3044CV\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\u4eca\u56de\u306e\u5206\u89e3\u65b9\u6cd5\u306fpeople_id, \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u3044\u3066\u884c\u308f\u308c\u3066\u3044\u308b\uff0e\u3053\u306eCV\u306f\u3044\u304f\u3064\u304b\u306eaggregated CV split scheme\u3092\u5143\u306b\u3057\u3066\u3044\u308b\uff0e\u3053\u306e\u624b\u6cd5\u306f\u9996\u5c3e\u3088\u304f\u52d5\u4f5c\u3059\u308b\u304c\uff0c15\u3082\u306eXGBoost\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u4e8c\u3064\u306e\u30ec\u30d9\u30eb\u3092\u4f5c\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\uff0e\u3053\u306e\u3088\u3046\u306aCV\u306e\u8003\u3048\u65b9\u306f\u91cd\u8981\u306b\u306a\u308b\u304c\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u304f\uff0e\n\n>\u3053\u3053\u3067\u306f\uff0c4\u3064\u306e\u3088\u304f\u52d5\u4f5c\u3059\u308b1st level\u30e2\u30c7\u30eb\u3092\u7d39\u4ecb\u3059\u308b\uff0e(\u305d\u306e\u3046\u30612\u3064\u306fpublic LB\u3067\u3088\u304f\u52d5\u4f5c\u3059\u308b\uff0c\u6b8b\u308a\u306e2\u3064\u306f2nd level\u30e2\u30c7\u30eb\u306b\u3066\u6700\u3082\u512a\u308c\u305fCV\u30b9\u30b3\u30a2\u3092\u51fa\u3059)[2nd layer\u30e2\u30c7\u30eb\u306b\u306f\u975e\u5e38\u306b\u6ce8\u610f\u6df1\u3044\u30b9\u30af\u30ea\u30d7\u30c6\u30a3\u30f3\u30b0\u30b9\u30ad\u30eb\u3092\u5fc5\u8981\u3068\u3059\u308b](http://qiita.com/TomHortons/items/2a05b72be180eb83a204)\uff0e\u307e\u305f\uff0c[\u30ea\u30fc\u30af\u3055\u308c\u305f\u89e3\u653e](http://qiita.com/TomHortons/items/039852bca3714b43e887)\u3092\u542b\u3081\u305f\u89e3\u653e\u3092CV\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\uff0coutcome\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u306e\u4e88\u6e2c\u304cML\u3067\u5b66\u7fd2\u3055\u308c\u308b\uff1f\uff0e2nd level\u30e2\u30c7\u30eb\u306f2\u3064\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\uff0e\u30ea\u30fc\u30af\u60c5\u5831\u306b\u95a2\u9023\u3057\u305f\u4e88\u6e2c\u78ba\u7387\u3068\uff0c\u305d\u3057\u3066\u30ea\u30fc\u30af\u60c5\u5831\u306b\u7121\u95a2\u4fc2\u306a\u4e88\u6e2c\u78ba\u7387\u3067\u3042\u308b\uff0e\u30e2\u30c7\u30eb\u81ea\u4f53\u306f\u30b7\u30f3\u30d7\u30eb\u3060\u304c\uff0cgroup/population\u306e\u6642\u9593\u5909\u5316\u3092\u6349\u3048\u308b\u305f\u3081\uff0c\u3044\u304f\u3064\u304b\u306e\u30b9\u30de\u30fc\u30c8\u306a\u7279\u9577\u91cf\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\uff0e\n\n>\u4e0a\u8a18\u306e\u72b6\u614b(\u307e\u3068\u3082\u306a\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f7f\u7528)\uff0c\u30b3\u30f3\u30da\u306e\u9014\u4e2d\u7d4c\u904e\u30674\u4f4d\u3060\u3063\u305f\uff0e\uff13\u4f4d\u4ee5\u4e0a\u306e\u53c2\u52a0\u8005\u304c\u65e5\u306b\u65e5\u306b\u30b9\u30b3\u30a2\u3092\u5411\u4e0a\u3055\u305b\u3066\u3044\u304f\u306e\u3092\u898b\u305f\uff0e\u305d\u3053\u3067\uff0c\u5f7c\u3089\u304cpublic LB\u3067\u30ea\u30fc\u30af(\u4e88\u6e2c\u6f0f\u308c\uff1f)\u3092\u5897\u3084\u3059\u305f\u3081\u306b\u624b\u4f5c\u696d\u3067\u958b\u62d3\u3057\u3066\u3044\u308b\u5185\u5bb9\u306b\u3064\u3044\u3066\u8003\u3048\u305f\uff0e(\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u969b\u306e)public/private\u306e\u30c7\u30fc\u30bf\u5206\u5272\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u3042\u308b\uff0e\u3042\u308b\u4eba\u306f\u624b\u4f5c\u308a\u306etest group submission\u3092\u3057\uff0c\u30b9\u30b3\u30a2\u3092\u5f97\u308b\u305f\u3081\u7279\u5b9a\u30b0\u30eb\u30fc\u30d7\u306e\u30ea\u30fc\u30af\u306b\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u3092\u4f7f\u7528\u3057\u305f\uff0e\u305d\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5168\u4f53\u306eoutcome\u306e\u78ba\u7387\u304c\u3069\u308c\u3060\u3051\u304b\u3092\u6c7a\u5b9a\u3057\u305f\uff0e(???)\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\uff0c\u53ef\u80fd\u306a\u9650\u308a\u6700\u3082\u5927\u304d\u3044group_1\u304c\u624b\u306b\u5165\u308b\u3088\u3046\u5927\u91cf\u306esubmission\u3092\u3057\uff0c\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6\u304c\u60aa\u3044\u5e7e\u3064\u304b\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u767a\u898b\u3057\u305f\uff0e\u305d\u308c\u3092\u5ff5\u982d\u306b\u304a\u3044\u3066\u3044\u304f\u3064\u304b\u306e\u512a\u308c\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\uff0e(\u3064\u307e\u308a\u30e2\u30c7\u30eb\u3084CV\u65b9\u6cd5\u306b\u5fae\u8abf\u6574\u3092\u52a0\u3048\u3066\u3069\u3093\u3069\u3093\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\uff0c\u90fd\u5408\u306e\u826f\u3044\u30b0\u30eb\u30fc\u30d7\u304c\u30e9\u30f3\u30c0\u30e0\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u4f55\u5ea6\u3082submission\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u3044\u3046\u3053\u3068\uff1f)\n\n>\u305d\u3057\u3066\u6700\u5f8c\u306esubmission\u3067\u306f\uff0c\u5358\u7d14\u306b\u4eca\u307e\u3067\u306eLB, CV\u305d\u308c\u305e\u308c\u3067\u6700\u3082\u3088\u304f\u6a5f\u80fd\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5358\u7d14\u306b\u5e73\u5747\u5316\u3057\u305f\uff0e\u9a5a\u304f\u3079\u304d\u3053\u3068\u306b\uff0c\u3053\u308c\u306f\u4eca\u307e\u3067\u3067\u6700\u3082\u9ad8\u3044\u30b9\u30b3\u30a2\u3092\u51fa\u3057\u305f\uff0e\n\n\n# 2. 2nd solution\n\n\u4eca\u56de\u306fRadder(\u512a\u52dd\u8005)\u304c\u7d06\u4f59\u66f2\u6298\u3057\u3066\u512a\u52dd\u3057\u305f\u305f\u3081\u304b\uff0c\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc\u3067\u306f\u3088\u308a\u30b9\u30de\u30fc\u30c8\u306a\u89e3\u6cd5\u3092\u63d0\u6848\u3057\u305f2\u4f4d\u4ee5\u4e0b\u306e\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u306e\u65b9\u304c\u4eba\u6c17\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f[\uff12\u4f4d\u306e\u30a4\u30f3\u30bf\u30d3\u30e5\u30fc](https://www.kaggle.com/c/predicting-red-hat-business-value/forums/t/23824/2-solution)\u3092\u8a18\u8ff0\u3057\u307e\u3059\uff0e\n\n\n### step 1\ntraining\u30b5\u30f3\u30d7\u30eb\u306b\u767b\u5834\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3078\uff0c\u3044\u304f\u3064\u304b\u306e\u78ba\u7387\u88dc\u5b8c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\u6b21\u306e\u56f3\u306fgroup 7\u3092\u6642\u7cfb\u5217\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u4e88\u6e2c\u78ba\u7387\u3067\u3059\uff0e\n\n![f1.gif](https://qiita-image-store.s3.amazonaws.com/0/72093/44cc0db2-f03d-acf7-2755-0216ffc996ba.gif)\n\ntraining\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u78ba\u7387\u306f\uff11\uff0c\u5225\u306e\u65e5\u3067\u306f\u78ba\u7387\u304c\u4f4e\u4e0b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6b21\u306e\u56f3\u306f\u540c\u69d8\u306e\u4e88\u6e2c\u7d50\u679c\u3067\u3059\u304c\uff0c\u5168\u30c7\u30fc\u30bf\u7bc4\u56f2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\n\n![f2.gif](https://qiita-image-store.s3.amazonaws.com/0/72093/7b8d45de-1208-6716-b62c-64befe950561.gif)\n\n### step 2\n\u4eca\u56de\u306f34224\u3082\u306e\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u304c\u30c7\u30fc\u30bf\u306b\u3042\u308a\u307e\u3059\uff0e\u30b0\u30eb\u30fc\u30d7\u306f\u7d71\u8a08\u7684\u89b3\u70b9\u304b\u3089\u5358\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u305f\u3081\uff0c\u3053\u306e\u6570\u5024\u306f\u5b9f\u969b\u306e\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u3067\u3059(?)\uff0e\n\u554f\u984c\u70b9\u3068\u3057\u3066\u306f\uff0c\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u7570\u306a\u308b\u5024\u3092\u3068\u308b\u7279\u5fb4\u91cf\u3067\u3059\uff0e\u3059\u3079\u3066\u306e\u30b0\u30eb\u30fc\u30d7\uff0c\u3059\u3079\u3066\u306e\u7279\u5fb4\u91cf\u3067\uff0c\u6211\u3005\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8a08\u7b97\u3057\u305f\uff0e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306ebins\u306f\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3067\u3059\uff0e\u3053\u308c\u306f\u30d0\u30a4\u30ca\u30ea\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\"fuzzy\"\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059(?)\uff0e\n\u4e88\u6e2c\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\uff0e\n\nA) Logistic regression\nB) KNN\nC) XGBoost based public scripts\n\n### step 3\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\uff0cLB\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u53c2\u8003\u306b\u6539\u826f\u3057\u307e\u3059\uff0e\n\n\n\n# 3. XGBoost\u3092\u7528\u3044\u305f\u4e88\u6e2c\n\n\u6700\u3082\u52b9\u679c\u7684\u304b\u3064\u4e00\u822c\u7684\u306aXGBoost\u3092\u7528\u3044\u305f\u624b\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n[\u4f5c\u6210\u8005\u306e\u30b3\u30fc\u30c9(Abriosi)](https://www.kaggle.com/abriosi/predicting-red-hat-business-value/raddar-0-98-xgboost-sparse-matrix-python/discussion)\u306e\u30b3\u30fc\u30c9\u304b[\u3053\u3061\u3089](https://gist.github.com/TomHortons/009cbc32f1853c7c3a768dd42f600213)\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u975e\u5e38\u306b\u5358\u7d14\u3067\uff0c\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\uff0cXGBoost\u3067\u4e88\u6e2c\u3059\u308b\u3068\u3044\u3046\u5185\u5bb9\u3067\u3059\uff0e\n\n\u8981\u70b9\u3060\u3051\u89e3\u8aac\u3057\u3066\u884c\u304d\u307e\u3059\uff0e\npd.read()\u3092\u3057\u305f\u5f8c\uff0cchar_10\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\uff0e(\u6b20\u640d\u5024\u304c\u591a\u3044\u304b\u3089\uff1f)\n\n```\nact_train_data=act_train_data.drop('char_10',axis=1)\nact_test_data=act_test_data.drop('char_10',axis=1)\n```\nchar_10\u3092\u53d6\u308a\u9664\u3044\u305fact_train_data\u3084\u4ed6\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3078\uff0cact_data_treatment\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\n\n```\nact_train_data  = act_data_treatment(act_train_data)\nact_test_data   = act_data_treatment(act_test_data)\npeople_data = act_data_treatment(people_data)\n```\n\nact_data_treatment\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```\ndef act_data_treatment(dsname):\n    dataset = dsname\n    \n    for col in list(dataset.columns):\n        if col not in ['people_id', 'activity_id', 'date', 'char_38', 'outcome']:\n            if dataset[col].dtype == 'object':\n                dataset[col].fillna('type 0', inplace=True)\n                dataset[col] = dataset[col].apply(lambda x: x.split(' ')[1]).astype(np.int32)\n            elif dataset[col].dtype == 'bool':\n                dataset[col] = dataset[col].astype(np.int8)\n    \n    dataset['year'] = dataset['date'].dt.year\n    dataset['month'] = dataset['date'].dt.month\n    dataset['day'] = dataset['date'].dt.day\n    dataset['isweekend'] = (dataset['date'].dt.weekday >= 5).astype(int)\n    dataset = dataset.drop('date', axis = 1)\n    \n    return dataset\n```\n\n\u8981\u3059\u308b\u306b['people_id', 'activity_id', 'date', 'char_38', 'outcome']\u4ee5\u5916\u306e\u5168\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\uff0c['date']\u3092\u5e74\u6708\u65e5\u9031\u3078\u5206\u3051\u3066\u3044\u308b\u3060\u3051\u3067\u3059\uff0e\n\u305d\u3057\u3066\uff0ctrain, test\u3092\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u3078reduce_dimen\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\n\n```\nwhole=pd.concat([train,test],ignore_index=True)\ncategorical=['group_1','activity_category','char_1_x','char_2_x','char_3_x','char_4_x','char_5_x','char_6_x','char_7_x','char_8_x','char_9_x','char_2_y','char_3_y','char_4_y','char_5_y','char_6_y','char_7_y','char_8_y','char_9_y']\nfor category in categorical:\n    whole=reduce_dimen(whole,category,9999999)\n    \nX=whole[:len(train)]\nX_test=whole[len(train):]\n\ndel train\ndel whole\n```\n\nreduce_dimen\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n```\ndef reduce_dimen(dataset,column,toreplace):\n    for index,i in dataset[column].duplicated(keep=False).iteritems():\n        if i==False:\n            dataset.set_value(index,column,toreplace)\n    return dataset\n```\n\u5165\u529bX\u306e\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092[OneHotEncoder](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\uff0e\n\u3053\u308c\u306b\u3088\u308a0\u30681\u306e\u30b9\u30d1\u30fc\u30b9\u306a\u884c\u5217X_sparse\u304c\u5b8c\u6210\u3057\u307e\u3059\uff0e\n\n```\nenc = OneHotEncoder(handle_unknown='ignore')\nenc=enc.fit(pd.concat([X[categorical],X_test[categorical]]))\nX_cat_sparse=enc.transform(X[categorical])\nX_test_cat_sparse=enc.transform(X_test[categorical])\nfrom scipy.sparse import hstack\nX_sparse=hstack((X[not_categorical], X_cat_sparse))\nX_test_sparse=hstack((X_test[not_categorical], X_test_cat_sparse))\n```\nX_sparse\u3092DMatrix\u3078\u5909\u63db\u3057\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff0e\n\u5404parameter\u306e\u5185\u5bb9\u306f\uff0c\u8a73\u3057\u304f\u7d39\u4ecb\u3057\u3066\u3044\u308b\u30b5\u30a4\u30c8\u304c\u591a\u6570\u3042\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u304d\u307e\u3059\uff0e\n\u3060\u3044\u305f\u3044\u30e1\u30a4\u30f3\u306f{'max_depth':10, 'eta':0.02, 'silent':1, 'objective':'binary:logistic' }\u306e4\u3064\u3067\u3059\uff0e\n\n```\nprint(\"Training data: \" + format(X_sparse.shape))\nprint(\"Test data: \" + format(X_test_sparse.shape))\nprint(\"###########\")\nprint(\"One Hot enconded Test Dataset Script\")\n\ndtrain = xgb.DMatrix(X_sparse,label=y)\ndtest = xgb.DMatrix(X_test_sparse)\n\nparam = {'max_depth':10, 'eta':0.02, 'silent':1, 'objective':'binary:logistic' }\nparam['nthread'] = 4\nparam['eval_metric'] = 'auc'\nparam['subsample'] = 0.7\nparam['colsample_bytree']= 0.7\nparam['min_child_weight'] = 0\nparam['booster'] = \"gblinear\"\n```\nXGBoost\u3067\u5b66\u7fd2\u3057\uff0c\u4e88\u6e2c\u3092\u3057\u3066\u7d42\u4e86\u3067\u3059\uff0e\n\n```\nwatchlist  = [(dtrain,'train')]\nnum_round = 300\nearly_stopping_rounds=10\nbst = xgb.train(param, dtrain, num_round, watchlist,early_stopping_rounds=early_stopping_rounds)\n\nypred = bst.predict(dtest)\noutput = pd.DataFrame({ 'activity_id' : test['activity_id'], 'outcome': ypred })\noutput.head()\n```\n\n\u3053\u308c\u306798%\u8fd1\u3044\u30b9\u30b3\u30a2\u304c\u51fa\u307e\u3059\uff0e\n\n\n# 4. Keras\u3092\u7528\u3044\u305f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\n\n\u3068\u308a\u3042\u3048\u305a\u30cb\u30e5\u30fc\u30e9\u30eb\u7684\u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u3084\u3063\u3066\u307f\u305f\uff0c\u3068\u3044\u3046\u4eba\u306f\u7d50\u69cb\u3044\u307e\u3059\uff0e\n\u57fa\u672c\u7684\u306b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306f\u753b\u50cf\u30c7\u30fc\u30bf\u4ee5\u5916\u3067Best model\u3068\u306a\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u304c\uff0cXGBoost\u3084RandomForest\u3068\u4e88\u6e2c\u7d50\u679c\u306e\u76f8\u95a2\u304c\u4f4e\u3044\u305f\u3081\u304b\uff0c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067XGBoost\u3092\u88dc\u5f37\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\uff0e\n\n2016\u5e74\u306eKaggle\u3067\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3068\u3044\u3048\u3070\u307b\u3068\u3093\u3069Keras\u3067\u3057\u305f\uff0e\n\u3053\u3053\u3067\u306fKeras\u3092\u7528\u3044\u305f\u30af\u30e9\u30b9\u5206\u985e\u3092\u884c\u3044\u307e\u3059\uff0e\n\n\n## 4.1. \u30e2\u30c7\u30eb\u8a2d\u8a08\u307e\u3067\n\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\n\n```\nimport pandas as pd\nimport numpy as np\nfrom scipy import sparse as ssp\nimport pylab as plt\nfrom sklearn.preprocessing import LabelEncoder,LabelBinarizer,MinMaxScaler,OneHotEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD,NMF,PCA,FactorAnalysis\nfrom sklearn.feature_selection import SelectFromModel,SelectPercentile,f_classif\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.metrics import log_loss,roc_auc_score\nfrom sklearn.pipeline import Pipeline,make_pipeline\nfrom sklearn.cross_validation import StratifiedKFold,KFold\nfrom keras.preprocessing import sequence\nfrom keras.callbacks import ModelCheckpoint,Callback\nfrom keras import backend as K\nfrom keras.layers import Input, Embedding, LSTM, Dense,Flatten, Dropout, merge,Convolution1D,MaxPooling1D,Lambda,AveragePooling1D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import SGD\nfrom keras.layers.advanced_activations import PReLU,LeakyReLU,ELU,SReLU\nfrom keras.models import Model\n```\n\nKeras, tensorflow(theano)\u306f\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\uff0e\n[\u65e5\u672c\u8a9e\u3067\u66f8\u304b\u308c\u305f\u30b5\u30a4\u30c8](https://keras.io/ja/)\u3082\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\uff0e\n\n\u6b21\u306b\u30c7\u30fc\u30bf\u30d1\u30b9\u3068\u30b7\u30fc\u30c9\u306e\u8a2d\u5b9a\u3067\u3059\uff0e\n\n```\nseed = 1\nnp.random.seed(seed)\ndim = 32\nhidden=64\n\npath = \"../input/\"\n```\n\ntrain, test, people\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u9023\u7d50\u3057\u305f\u30c7\u30fc\u30bf\u3092data\u3068\u3057\u307e\u3059\uff0e\ndata\u306f\u5165\u529b\uff0c\u4e2d\u9593\uff0c\u51fa\u529b\u5c64\u306e\u4f5c\u6210\u306e\u305f\u3081\u306b\u5229\u7528\u3057\uff0c\u30e2\u30c7\u30ea\u30f3\u30b0\u304c\u5b8c\u4e86\u3059\u308c\u3070\u524a\u9664\u3059\u308b\u5909\u6570\u3067\u3059\uff0e\n\n```\ntrain = pd.read_csv(path+'act_train.csv')\ntest = pd.read_csv(path+'act_test.csv')\npeople = pd.read_csv(path+'people.csv')\ncolumns = people.columns\ntest['outcome'] = np.nan\ndata = pd.concat([train,test])\n    \ndata = pd.merge(data,people,how='left',on='people_id').fillna('missing')\ntrain = data[:train.shape[0]]\ntest = data[train.shape[0]:]\n```\n\u3053\u3053\u307e\u3067\u3067\uff0cdata\u306eshape\u306f(2695978, 55)\uff0cpeople_id, activity_id\u3092\u542b\u3093\u3060DataFrame\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u6b21\u306b\u30ab\u30e9\u30e0\u60c5\u5831\u3092columns\u3068\u3057\uff0csklearn\u306eLabelEncoder\u3067data\u306e\u5024\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\uff0e\ndata\u306e\u4e2d\u306b\u306fmissing\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3061\u3089\u3082\u901a\u5e38\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3068\u540c\u69d8\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3059\uff0e\n\u304b\u306a\u308a\u4e01\u5be7\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9577\u304f\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\uff0e\n\n```\ncolumns = train.columns.tolist()\ncolumns.remove('activity_id')\ncolumns.remove('outcome')\ndata = pd.concat([train,test])\nfor c in columns:\n    data[c] = LabelEncoder().fit_transform(data[c].values)\n\ntrain = data[:train.shape[0]]\ntest = data[train.shape[0]:]\ndata = pd.concat([train,test])\ncolumns = train.columns.tolist()\ncolumns.remove('activity_id')\ncolumns.remove('outcome')\n```\n\n\u30c7\u30fc\u30bf\u306e\u4e0b\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3068\u3053\u308d\u3067\uff0c\u30ec\u30a4\u30e4\u30fc\u306e\u8a2d\u5b9a\u3092\u59cb\u3081\u307e\u3059\uff0e\nKeras\u306eInput layer, Embedding layer\u3092\u6e96\u5099\u3057\uff0c\u4f5c\u6210\u3057\u305fcolumns\u306b\u6cbf\u3063\u3066layer\u3092\u6e96\u5099\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5404\u5c64\u306e\u8a73\u7d30\u306f[Keras\u306e\u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3](http://qiita.com/TomHortons/items/f76b1a338e237906249f)\u306e\"Input(Embedding + Flatten) + Layer + Dropout + Output\"\u3067\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8a73\u7d30\u3092\u7701\u304d\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306b\u5b8c\u6210\u3057\u305fmodel\u3092\u53ef\u8996\u5316\u3057\u305f\u56f3\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n<img width=\"1014\" alt=\"Screen Shot 2017-01-18 at 9.53.33.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/72093/e7fd6ed5-8e2a-da80-096c-8aa387b9c235.png\">\n\n## 4.2. \u5165\u529b\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u304b\u3089model.fit\u307e\u3067\n\n\u5148\u307b\u3069\u4f7f\u7528\u3057\u305fdata\u306fmodel\u4f5c\u6210\u7528\u3060\u3063\u305f\u306e\u3067\uff0c\u5165\u529b\u7528\u306bX,y\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\nskf\u3067\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3057\uff0cX_train, X_test\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n```\nX = train[columns].values\nX_t = test[columns].values\ny = train[\"outcome\"].values\npeople_id = train[\"people_id\"].values\nactivity_id = test['activity_id']\ndel train\ndel test\n\nskf = StratifiedKFold(y, n_folds=4, shuffle=True, random_state=seed)\nfor ind_tr, ind_te in skf:\n    X_train = X[ind_tr]\n    X_test = X[ind_te]\n\n    y_train = y[ind_tr]\n    y_test = y[ind_te]\n    break\n\nX_train = [X_train[:,i] for i in range(X.shape[1])]\nX_test = [X_test[:,i] for i in range(X.shape[1])]\n\ndel X\n```\n\n\u5143\u306e\u30b3\u30fc\u30c9\u3067\u306f\uff0c\u6b21\u306bModelCheckpoint\u3092\u7528\u3044\u3066model\u306e\u4fdd\u5b58\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3057\u304b\u3057\u7d50\u5c40model.fit\u3067checkpoint\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u3053\u3053\u3067\u306f\u8a73\u7d30\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\uff0e\n\n\u6700\u5f8c\u306bmodel.fit\u3068model.predict\u3092\u3057\u3066\u5b8c\u4e86\u3067\u3059\uff0e\n\n```\nmodel.fit(\n    X_train, \n    y_train,\n    batch_size=batch_size, \n    nb_epoch=nb_epoch, \n    verbose=1, \n    shuffle=True,\n    validation_data=[X_test,y_test],\n    callbacks = [\n        model_checkpoint,\n        auc_callback,\n        ],\n    )\n```\n\n\u4e88\u6e2c\u7cbe\u5ea6\u306e\u30b9\u30b3\u30a2\u306f\u6700\u59270.98\u3067\u3059\uff0e\n\u5143\u3005\u306e\u30c7\u30fc\u30bf\u304c\u4e88\u6e2c\u3057\u3084\u3059\u3044\u30c7\u30fc\u30bf\u306a\u306e\u3067\uff0c\u7279\u306b\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u304c\u512a\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\n", "tags": ["Kaggle", "analytics", "Python", "xgboost", "Keras"]}