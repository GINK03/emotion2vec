{"context": "Python\u30b3\u30fc\u30c9\u3092Numba\u3067\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2\n\u306e\u7d9a\u304d\u3068\u3044\u3046\u304b\u3001\u88dc\u8db3\u3067\u3059\u3002\npandas\u306f\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306b\u4fbf\u5229\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u307e\u307efor\u6587\u3092\u4f7f\u3046\u3068\u6975\u7aef\u306b\u9045\u304f\u306a\u308a\u307e\u3059\u3002\nimport numpy as np\nimport pandas as pd\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\n\ndef LWMA(s, ma_period):\n    y = pd.Series(0.0, index=s.index)\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += s[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return y\n\n%time MA = LWMA(dataM1['Close'], 10)\n\nWall time: 3min 10s\n\n\u30c7\u30fc\u30bf\u6570\u304c37\u4e07\u500b\u3068\u591a\u3044\u306e\u3067\u3059\u304c\u300110\u30b5\u30f3\u30d7\u30eb\u306e\u79fb\u52d5\u5e73\u5747\u30673\u5206\u304b\u304b\u308b\u306e\u306f\u53b3\u3057\u3044\u3067\u3059\u3002\u671f\u9593\u3092\u3082\u3063\u3068\u9577\u304f\u3059\u308b\u3068\u300110\u5206\u4ee5\u4e0a\u304b\u304b\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\uff08Core i7-6700 3.4GHz\uff09\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001array\u306b\u7f6e\u304d\u63db\u3048\u3066Numba\u3092\u4f7f\u3063\u3066\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u3001array\u306b\u3059\u308b\u3060\u3051\u3067\u3082\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\ndef LWMA1(s, ma_period):\n    a = s.values\n    y = np.zeros(len(a))\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += a[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return pd.Series(y, index=s.index)\n\n%timeit MA = LWMA1(dataM1['Close'], 10)\n\n1 loop, best of 3: 1.92 s per loop\n\nNumba\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001pandas\u306b\u6bd4\u3079\u308b\u3068\u3001100\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3053\u306e\u72b6\u614b\u3060\u3068\u3001Numba\u3092\u4f7f\u3046\u3068\u3082\u3063\u3068\u901f\u304f\u306a\u308a\u307e\u3059\u3002\nfrom numba import jit\n@jit\ndef LWMA2(s, ma_period):\n    a = s.values\n    y = np.zeros(len(a))\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += a[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return pd.Series(y, index=s.index)\n\n%timeit MA = LWMA2(dataM1['Close'], 10)\n\n100 loops, best of 3: 5.31 ms per loop\n\npandas\u3067for\u6587\u3092\u4f7f\u3046\u5834\u5408\u3067\u3082\u3001array\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u30b1\u30fc\u30b9(index\u304c\u95a2\u4fc2\u306a\u3044\u30b1\u30fc\u30b9)\u3067\u3042\u308c\u3070\u3001\u305d\u3046\u3059\u308b\u3053\u3068\u304c\u8ce2\u660e\u3067\u3059\u3002pandas\u3068\u3046\u307e\u304f\u3064\u304d\u3042\u3046\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30b3\u30c4\u304c\u5fc5\u8981\u306a\u3088\u3046\u3067\u3059\u3002\n[Python\u30b3\u30fc\u30c9\u3092Numba\u3067\u9ad8\u901f\u5316\u3057\u305f\u3068\u304d\u306e\u30e1\u30e2](http://qiita.com/toyolab/items/b5d95bd38b3c7c66b510)\n\u306e\u7d9a\u304d\u3068\u3044\u3046\u304b\u3001\u88dc\u8db3\u3067\u3059\u3002\n\npandas\u306f\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306b\u4fbf\u5229\u306a\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u307e\u307efor\u6587\u3092\u4f7f\u3046\u3068\u6975\u7aef\u306b\u9045\u304f\u306a\u308a\u307e\u3059\u3002\n\n````py\nimport numpy as np\nimport pandas as pd\ndataM1 = pd.read_csv('DAT_ASCII_EURUSD_M1_2015.csv', sep=';',\n                     names=('Time','Open','High','Low','Close', ''),\n                     index_col='Time', parse_dates=True)\n\ndef LWMA(s, ma_period):\n    y = pd.Series(0.0, index=s.index)\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += s[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return y\n\n%time MA = LWMA(dataM1['Close'], 10)\n````\n    Wall time: 3min 10s\n\n\u30c7\u30fc\u30bf\u6570\u304c37\u4e07\u500b\u3068\u591a\u3044\u306e\u3067\u3059\u304c\u300110\u30b5\u30f3\u30d7\u30eb\u306e\u79fb\u52d5\u5e73\u5747\u30673\u5206\u304b\u304b\u308b\u306e\u306f\u53b3\u3057\u3044\u3067\u3059\u3002\u671f\u9593\u3092\u3082\u3063\u3068\u9577\u304f\u3059\u308b\u3068\u300110\u5206\u4ee5\u4e0a\u304b\u304b\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\uff08Core i7-6700 3.4GHz\uff09\n\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/toyolab/items/b5d95bd38b3c7c66b510)\u3067\u306f\u3001array\u306b\u7f6e\u304d\u63db\u3048\u3066Numba\u3092\u4f7f\u3063\u3066\u9ad8\u901f\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u3001array\u306b\u3059\u308b\u3060\u3051\u3067\u3082\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\n\n````py\ndef LWMA1(s, ma_period):\n    a = s.values\n    y = np.zeros(len(a))\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += a[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return pd.Series(y, index=s.index)\n\n%timeit MA = LWMA1(dataM1['Close'], 10)\n````\n    1 loop, best of 3: 1.92 s per loop\n\nNumba\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001pandas\u306b\u6bd4\u3079\u308b\u3068\u3001100\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3082\u3061\u308d\u3093\u3053\u306e\u72b6\u614b\u3060\u3068\u3001Numba\u3092\u4f7f\u3046\u3068\u3082\u3063\u3068\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n````py\nfrom numba import jit\n@jit\ndef LWMA2(s, ma_period):\n    a = s.values\n    y = np.zeros(len(a))\n    for i in range(len(y)):\n        for j in range(ma_period):\n            y[i] += a[i-j]*(ma_period-j)\n        y[i] /= ma_period*(ma_period+1)/2\n    return pd.Series(y, index=s.index)\n\n%timeit MA = LWMA2(dataM1['Close'], 10)\n````\n    100 loops, best of 3: 5.31 ms per loop\n\npandas\u3067for\u6587\u3092\u4f7f\u3046\u5834\u5408\u3067\u3082\u3001array\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u30b1\u30fc\u30b9(index\u304c\u95a2\u4fc2\u306a\u3044\u30b1\u30fc\u30b9)\u3067\u3042\u308c\u3070\u3001\u305d\u3046\u3059\u308b\u3053\u3068\u304c\u8ce2\u660e\u3067\u3059\u3002pandas\u3068\u3046\u307e\u304f\u3064\u304d\u3042\u3046\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u30b3\u30c4\u304c\u5fc5\u8981\u306a\u3088\u3046\u3067\u3059\u3002\n", "tags": ["Python", "pandas", "Numba", "\u79fb\u52d5\u5e73\u5747"]}