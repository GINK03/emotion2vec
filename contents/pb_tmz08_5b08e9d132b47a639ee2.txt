{"context": "\n\nN-Gram \u3068\u306f\u306a\u3093\u305e\u3084\n\u3053\u3061\u3089\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002N-Gram (wikipedia)\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u81ea\u4f5c\u3067\u3059\u3002\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u3092\u3082\u3068\u306b\u7c21\u5358\u5316\u3057\u307e\u3057\u305f\u3002\n\nStringConverter.class.php\n<?php\nclass StringConverter\n{\n    /**\n     * \u521d\u671f\u8a2d\u5b9a\n     *\n     * @return object\n     */\n    final private static function _init()\n    {\n        if (! defined('SYSTEM_LANG')) {\n            define('SYSTEM_LANG', 'UTF-8');\n        }\n    }\n\n\n    /**\n     * This is N-gram algorithm.\n     * N-grapm is ...\n     * ex) $str = 'ABCDE' ---> when N(2) = 'AB BC CD DE'\n     * ex) $str = 'ABCDE' ---> when N(3) = 'ABC BCD CDE'\n     *\n     * addPlus flag is used by MySQL FULLTEXT INDEX SEARCH.\n     *\n     * @return object\n     */\n    final public static function ngramX(string $str='', int $num=0, bool $addPlus=false): string\n    {\n        $prefix = $addPlus ? \"\\x2B\" : '';\n\n        if ($num < 1) {\n            return $str;\n        }\n\n        if ($num < 2) {\n            $_chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);\n            return $prefix.implode($_chars, \"\\x20\".$prefix);\n        }\n\n        self::_init();\n        $_len = mb_strlen($str, SYSTEM_LANG);\n        $_items = [];\n        for ($i=0; $i<=$_len-$num; $i++) {\n            $_items[] = $prefix.mb_substr($str, $i, $num, SYSTEM_LANG);\n        }\n\n        return implode($_items, \"\\x20\");\n    }\n}\n\n\n\uff08\u6ce81\uff09\uff1a[PHP] \u6587\u5b57\u5217\u3092\u4e00\u6587\u5b57\u305a\u3064\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\n\u5b9f\u969b\u306eN-Gram\u3067\u306f\u3001\n'ABCDE' \u306b\u5bfe\u3057\u3001N(3) = 'ABC BCD CDE DE E'\n\u3068\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\n'ABCDE' \u306b\u5bfe\u3057\u3001N(3) = 'ABC BCD CDE'\n\u3068\u306a\u308a\u307e\u3059\u3002\n\ntest\n<?php\nrequire_once 'StringConverter.class.php';\n\nvar_dump(StringConverter::ngramX('ABCDEF', 3, false)); // string(15) \"ABC BCD CDE DEF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 3, true)); // string(19) \"+ABC +BCD +CDE +DEF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 3, false)); // string(29) \"\u3042\u3044\u3046 \u3044\u3046\u3048 \u3046\u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 3, true)); // string(32) \"+\u3042\u3044\u3046 +\u3044\u3046\u3048 +\u3046\u3048\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 2, false)); // string(14) \"AB BC CD DE EF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 2, true)); // string(19) \"+AB +BC +CD +DE +EF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 2, false)); // string(27) \"\u3042\u3044 \u3044\u3046 \u3046\u3048 \u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 2, true)); // string(31) \"+\u3042\u3044 +\u3044\u3046 +\u3046\u3048 +\u3048\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 1, false)); // string(11) \"A B C D E F\"\nvar_dump(StringConverter::ngramX('ABCDEF', 1, true)); // string(17) \"+A +B +C +D +E +F\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 1, false)); // string(19) \"\u3042 \u3044 \u3046 \u3048 \u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 1, true)); // string(24) \"+\u3042 +\u3044 +\u3046 +\u3048 +\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 0, false)); // string(6) \"ABCDEF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 0, true)); // string(6) \"ABCDEF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 0, false)); // string(15) \"\u3042\u3044\u3046\u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 0, true)); // string(15) \"\u3042\u3044\u3046\u3048\u304a\"\n\n\n\n## N-Gram \u3068\u306f\u306a\u3093\u305e\u3084\n\u3053\u3061\u3089\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002[N-Gram (wikipedia)](http://ja.wikipedia.org/wiki/%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2#N-Gram)\n\n## \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u81ea\u4f5c\u3067\u3059\u3002\u3044\u305f\u3060\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u3092\u3082\u3068\u306b\u7c21\u5358\u5316\u3057\u307e\u3057\u305f\u3002\n\n```php:StringConverter.class.php\n<?php\nclass StringConverter\n{\n    /**\n     * \u521d\u671f\u8a2d\u5b9a\n     *\n     * @return object\n     */\n    final private static function _init()\n    {\n        if (! defined('SYSTEM_LANG')) {\n            define('SYSTEM_LANG', 'UTF-8');\n        }\n    }\n\n\n    /**\n     * This is N-gram algorithm.\n     * N-grapm is ...\n     * ex) $str = 'ABCDE' ---> when N(2) = 'AB BC CD DE'\n     * ex) $str = 'ABCDE' ---> when N(3) = 'ABC BCD CDE'\n     *\n     * addPlus flag is used by MySQL FULLTEXT INDEX SEARCH.\n     *\n     * @return object\n     */\n    final public static function ngramX(string $str='', int $num=0, bool $addPlus=false): string\n    {\n        $prefix = $addPlus ? \"\\x2B\" : '';\n\n        if ($num < 1) {\n            return $str;\n        }\n\n        if ($num < 2) {\n            $_chars = preg_split('//u', $str, -1, PREG_SPLIT_NO_EMPTY);\n            return $prefix.implode($_chars, \"\\x20\".$prefix);\n        }\n\n        self::_init();\n        $_len = mb_strlen($str, SYSTEM_LANG);\n        $_items = [];\n        for ($i=0; $i<=$_len-$num; $i++) {\n            $_items[] = $prefix.mb_substr($str, $i, $num, SYSTEM_LANG);\n        }\n\n        return implode($_items, \"\\x20\");\n    }\n}\n```\n\n\uff08\u6ce81\uff09\uff1a[[PHP] \u6587\u5b57\u5217\u3092\u4e00\u6587\u5b57\u305a\u3064\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b](http://qiita.com/pb_tmz08/items/154464f2ffa93be29275)\n\n\u5b9f\u969b\u306eN-Gram\u3067\u306f\u3001\n'ABCDE' \u306b\u5bfe\u3057\u3001N(3) = 'ABC BCD CDE DE E'\n\u3068\u306a\u308b\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\n'ABCDE' \u306b\u5bfe\u3057\u3001N(3) = 'ABC BCD CDE'\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n```php:test\n<?php\nrequire_once 'StringConverter.class.php';\n\nvar_dump(StringConverter::ngramX('ABCDEF', 3, false)); // string(15) \"ABC BCD CDE DEF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 3, true)); // string(19) \"+ABC +BCD +CDE +DEF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 3, false)); // string(29) \"\u3042\u3044\u3046 \u3044\u3046\u3048 \u3046\u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 3, true)); // string(32) \"+\u3042\u3044\u3046 +\u3044\u3046\u3048 +\u3046\u3048\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 2, false)); // string(14) \"AB BC CD DE EF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 2, true)); // string(19) \"+AB +BC +CD +DE +EF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 2, false)); // string(27) \"\u3042\u3044 \u3044\u3046 \u3046\u3048 \u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 2, true)); // string(31) \"+\u3042\u3044 +\u3044\u3046 +\u3046\u3048 +\u3048\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 1, false)); // string(11) \"A B C D E F\"\nvar_dump(StringConverter::ngramX('ABCDEF', 1, true)); // string(17) \"+A +B +C +D +E +F\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 1, false)); // string(19) \"\u3042 \u3044 \u3046 \u3048 \u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 1, true)); // string(24) \"+\u3042 +\u3044 +\u3046 +\u3048 +\u304a\"\n\nvar_dump(StringConverter::ngramX('ABCDEF', 0, false)); // string(6) \"ABCDEF\"\nvar_dump(StringConverter::ngramX('ABCDEF', 0, true)); // string(6) \"ABCDEF\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 0, false)); // string(15) \"\u3042\u3044\u3046\u3048\u304a\"\nvar_dump(StringConverter::ngramX('\u3042\u3044\u3046\u3048\u304a', 0, true)); // string(15) \"\u3042\u3044\u3046\u3048\u304a\"\n\n```\n", "tags": ["PHP7", "algorithm", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}