{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u6700\u8fd1\u3001\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u307e\u3057\u305f\u3002\n\u3053\u308c\u307e\u3067\u306f\u3001UI\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001\u7e70\u308a\u8fd4\u3057\u898b\u76f4\u3055\u306a\u3044\u3068\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3048\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u591a\u304f\u3042\u308a\u307e\u3057\u305f\u3002UI\u30a4\u30d9\u30f3\u30c8\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u5fdc\u3058\u3066\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3066\u3044\u305f\u305b\u3044\u3067\u3001UI\u30a4\u30d9\u30f3\u30c8\u3054\u3068\u306b\u3069\u306e\u3088\u3046\u306a\u72b6\u614b\u306b\u5909\u308f\u308b\u306e\u304b\u3001\u628a\u63e1\u304c\u5fc5\u8981\u3060\u3063\u305f\u305f\u3081\u3067\u3059\u3002\n\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5c0e\u5165\u3057\u305f\u7d50\u679c\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fUI\u30a4\u30d9\u30f3\u30c8\u3092\u52a0\u5de5\u3059\u308b\u51e6\u7406\u3092\u7e4b\u3052\u308b\u3053\u3068\u3067\u3001UI\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3001\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u4e0b\u3078\u8aad\u3080\u3060\u3051\u3067\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3044\u3084\u3059\u304f\u306a\u3063\u305f\u3068\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u3001Unity\u4e0a\u3067UniRx\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3067\u753b\u9762\u3092\u62e1\u5927\u30fb\u7e2e\u5c0f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u3001\u305d\u306e\u51e6\u7406\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u52d5\u4f5c\u4f8b\u306f\u3001\u4ee5\u4e0b\u306e\u52d5\u753b\u306e\u901a\u308a\u3067\u3059\u3002\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u64cd\u4f5c\u306b\u5408\u308f\u305b\u3066\u3001\u77e9\u5f62\u304c\u62e1\u5927\u30fb\u7e2e\u5c0f\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3092\u7403\u3067\u793a\u3057\u307e\u3059\u3002\n\nUnity\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fUnity 5.0.0f4 Personal\u3067\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u5f53\u65b9\u3067\u306f\u3001Android 4.3, 4.4\u3067\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u4e0b\u8a18\u306e3\u30af\u30e9\u30b9\u3067\u3059\u3002\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u3092\u8868\u3059\u30af\u30e9\u30b9\u3001\u305d\u306e\u60c5\u5831\u3092\u6c42\u3081\u308b\u30af\u30e9\u30b9\u3001\u7d50\u679c\u3092\u63cf\u753b\u3059\u308b\u30af\u30e9\u30b9\u3067\u69cb\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\nScaling\u30af\u30e9\u30b9\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002\nPinchGesture\u30af\u30e9\u30b9\n\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3092\u691c\u77e5\u3057\u3066\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u3001\u305d\u306e\u60c5\u5831\u3092\u9001\u308a\u307e\u3059\u3002\nMainCamera\u30af\u30e9\u30b9\nPinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3092\u5143\u306b\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\n\u3053\u308c\u304b\u3089\u5404\u30af\u30e9\u30b9\u3054\u3068\u306b\u3001\u4e0b\u8a18\u306e\u5185\u5bb9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u306e\u30b3\u30fc\u30c9\u5168\u4f53\n\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\n\u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5404\u30aa\u30da\u30ec\u30fc\u30bf\u3084\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u51e6\u7406\n\n\nScaling\u30af\u30e9\u30b9\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002\n\nScaling.cs\nusing UnityEngine;\n\npublic sealed class Scaling\n{\n    public Vector2 Center { get; private set; }\n\n    public float Scale { get; private set; }\n\n    public Scaling(Vector2 center, float scale)\n    {\n        Center = center;\n        Scale = scale;\n    }\n}\n\n\nCenter\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09\u3092\u8868\u3057\u307e\u3059\u3002Scale\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002\n\nPinchGesture\u30af\u30e9\u30b9\n\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3092\u691c\u77e5\u3057\u3066\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\n\nPinchGesture.cs\nusing UnityEngine;\nusing UnityEngine.Events;\nusing UniRx;\nusing System;\nusing System.Linq;\n\npublic sealed class PinchGesture : MonoBehaviour\n{\n    [SerializeField]\n    private ScaleEvent _scaleEvent;\n\n    private CompositeDisposable _subscribers;\n\n    private static float GetMaxLength(Touch[] touches)\n    {\n        float maxLength = 0;\n\n        for (var i = 0; i < touches.Length - 1; i++)\n        {\n            for (var j = i + 1; j < touches.Length; j++)\n            {\n                maxLength = Mathf.Max(\n                    maxLength,\n                    Vector2.Distance(\n                        touches[i].position,\n                        touches[j].position));\n            }\n        }\n\n        return maxLength;\n    }\n\n    private static Vector2 GetCenter(Touch[] touches)\n    {\n        return touches\n            .Select(touch => touch.position)\n            .Aggregate(\n                Vector2.zero,\n                (previous, current) => previous + current) /\n            touches.Length;\n    }\n\n    private void OnEnable()\n    {\n        _subscribers = new CompositeDisposable();\n\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n\n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n\n        _subscribers.Add(touchStream.Connect());\n        _subscribers.Add(scalingSubscriber);\n    }\n\n    private void OnDisable()\n    {\n        _subscribers.Dispose();\n    }\n\n    [Serializable]\n    private sealed class ScaleEvent : UnityEvent<Scaling>\n    {\n    }\n}\n\n\n\u4e0b\u8a18\u306eOnEnable\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3001\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u306e\u691c\u77e5\u3068\u3001\u4e2d\u5fc3\u70b9\u30fb\u62e1\u7e2e\u7387\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n    private void OnEnable()\n    {\n        _subscribers = new CompositeDisposable();\n\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n\n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n\n        _subscribers.Add(touchStream.Connect());\n        _subscribers.Add(scalingSubscriber);\n    }\n\n\u5b9a\u7fa9\u3057\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\ntouchStream\nUpdate\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001\u30bf\u30c3\u30c1\u5165\u529b\u306e\u60c5\u5831\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n\n\u5f8c\u7d9a\u306e\u8907\u6570\u306e\u7b87\u6240\u3067\u3001\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304b\u3089\u3001Input.touches\u30921\u56de\u3060\u3051\u547c\u3076\u3088\u3046\u306bConnectableObserver\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\ncenterStream\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n\n\nBuffer(2, 1)\ntouchStream\u304b\u3089\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5404Update\u3054\u3068\u306bA, B, C, D\u306e\u9806\u3067\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u5834\u5408\u3001(A, B), (B, C), (C, D)\u3068\u3044\u3046\u5f62\u306b\u307e\u3068\u307e\u308a\u307e\u3059\u3002\nWhere(touches => touches[0].Length <= 1 && 2 <= touches[1].Length)\n2\u70b9\u4ee5\u4e0a\u306e\u30bf\u30c3\u30c1\u304c\u59cb\u307e\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nSelect(touches => GetCenter(touches[1]))\n\u4eca\u56de\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u304b\u3089\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n\nscaleStream\n\u62e1\u7e2e\u7387\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n\n\nBuffer(2, 1)\ntouchStream\u304b\u3089\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5404Update\u3054\u3068\u306bA, B, C, D\u306e\u9806\u3067\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u5834\u5408\u3001(A, B), (B, C), (C, D)\u3068\u3044\u3046\u5f62\u306b\u307e\u3068\u307e\u308a\u307e\u3059\u3002\nWhere(touches => touches.All(touch => 2 <= touch.Length))\n\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u306e\u3046\u3061\u3001\u4e21\u65b9\u3068\u30822\u70b9\u4ee5\u4e0a\u306e\u30bf\u30c3\u30c1\u3092\u884c\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nSelect(touches => GetMaxLength(touches[1]) / GetMaxLength(touches[0]))\n\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u3068\u6bd4\u3079\u3066\u3069\u308c\u3060\u3051\u6307\u540c\u58eb\u306e\u5e45\u304c\u7e2e\u307e\u3063\u305f\u308a\u5e83\u304c\u3063\u305f\u308a\u3057\u305f\u304b\u3001\u305d\u306e\u5272\u5408\u3092\u6c42\u3081\u307e\u3059\u3002GetMaxLength\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30bf\u30c3\u30c1\u60c5\u5831\u304b\u3089\u3001\u6307\u540c\u58eb\u306e\u6700\u5927\u8ddd\u96e2\u3092\u6c42\u3081\u307e\u3059\u3002\n\nScan(1f, (scale, rate) => scale * rate)\n\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\nSkip(1)\nScan\u306e\u521d\u671f\u5024\u3092\u7121\u8996\u3057\u307e\u3059\u3002UniRx\u306e\u5b9f\u88c5\u3067\u306f\u3001Scan\u306b\u6307\u5b9a\u3057\u305f\u521d\u671f\u5024\u304c\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5024\u3092\u6d41\u3059\u5834\u5408\u306fUpdate\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u30671\u3064\u306e\u307f\u6d41\u3057\u305f\u3044\u305f\u3081\u3001\u521d\u671f\u5024\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\nscalingSubscriber\n\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u3092\u767a\u884c\u3059\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3059\u3002\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u306f\u3001Scaling\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n\n\ncenterStream.CombineLatest(scaleStream, (center, scale) => new Scaling(center, scale))\n2\u70b9\u4ee5\u4e0a\u30bf\u30c3\u30c1\u3055\u308c\u59cb\u3081\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u308c\u305f\u4e2d\u5fc3\u70b9\u3068\u3001\u73fe\u884c\u306e\u62e1\u7e2e\u7387\u3068\u3092Scaling\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u3068\u3081\u307e\u3059\u3002\nSubscribe(_scaleEvent.Invoke)\n\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3068\u62e1\u7e2e\u7387\u3092\u9001\u308a\u307e\u3059\u3002\n\n\nMainCamera\u30af\u30e9\u30b9\nPinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3092\u5143\u306b\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\nMainCamera.cs\nusing UnityEngine;\nusing UniRx;\nusing System;\n\n[RequireComponent(typeof(Camera))]\npublic sealed class MainCamera : MonoBehaviour\n{\n    [SerializeField]\n    private GameObject _centerObject;\n\n    private Subject<Scaling> _scalingStream;\n\n    private CompositeDisposable _subscribers;\n\n    public void OnScale(Scaling scaling)\n    {\n        _scalingStream.OnNext(scaling);\n    }\n\n    // Use this for initialization\n    private void Start()\n    {\n        Camera camera = GetComponent<Camera>();\n\n        _scalingStream = new Subject<Scaling>();\n        _subscribers = new CompositeDisposable();\n\n        float firstOrthographicSize = camera.orthographicSize;\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n\n        _subscribers.Add(_scalingStream);\n        _subscribers.Add(scalingSubscriber);\n    }\n\n    private void OnDestroy()\n    {\n        _subscribers.Dispose();\n    }\n}\n\n\n\u4e0b\u8a18\u306eStart\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n    private void Start()\n    {\n        Camera camera = GetComponent<Camera>();\n\n        _scalingStream = new Subject<Scaling>();\n        _subscribers = new CompositeDisposable();\n\n        float firstOrthographicSize = camera.orthographicSize;\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n\n\u5b9a\u7fa9\u3057\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\nscaleVariationRateStream\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u969b\u306b\u3001\u524d\u56de\u304b\u3089\u5909\u5316\u3057\u305f\u62e1\u7e2e\u7387\u306e\u5272\u5408\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\u753b\u9762\u306e\u4e2d\u5fc3\u4ee5\u5916\u306e\u5834\u6240\u3092\u57fa\u70b9\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3092\u884c\u3046\u5834\u5408\u3001\u30ab\u30e1\u30e9\u306e\u30ba\u30fc\u30e0\u30a4\u30f3\u3001\u30ba\u30fc\u30e0\u30a2\u30a6\u30c8\u3060\u3051\u3067\u306a\u304f\u5e73\u884c\u79fb\u52d5\u3082\u3055\u305b\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u3001\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u308b\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n\n\nSelect(scaling => scaling.Scale)\nPinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u304b\u3089\u3001\u62e1\u7e2e\u7387\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\nStartWith(1f)\n\u521d\u671f\u5024\u3068\u3057\u3066\u62e1\u7e2e\u73871\u3092\u6d41\u3057\u307e\u3059\u3002\nBuffer(2, 1)\n\u4eca\u56de\u3068\u524d\u56de\u306e\u62e1\u7e2e\u7387\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\nSelect(scaleHistory => scaleHistory[1] / scaleHistory[0])\n\u524d\u56de\u3068\u6bd4\u8f03\u3057\u305f\u4eca\u56de\u306e\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\nscalingSubscriber\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u304b\u3089\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3068Camera\u3092\u79fb\u52d5\u3055\u305b\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3059\u3002\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n\n\nZip(scaleVariationRateStream, (scaling, scaleVariationRate) => new { Center = scaling.Center, Scale = scaling.Scale, ScaleVariationRate = scaleVariationRate })\nPinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3068\u3001scaleVariationRateStream\u3067\u8a08\u7b97\u3057\u305f\u3001\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u307e\u3068\u3081\u307e\u3059\u3002\nSubscribe\nScaling\u306b\u542b\u307e\u308c\u308b\u4e2d\u5fc3\u70b9\u306b\u7403\u3092\u79fb\u52d5\u3055\u305b\u3001\u62e1\u7e2e\u7387\u306b\u5fdc\u3058\u3066Camera\u306e\u30d3\u30e5\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u4e2d\u5fc3\u70b9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3055\u308c\u3066\u898b\u3048\u308b\u3088\u3046\u306b\u3001\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u5143\u306bCamera\u3092\u5e73\u884c\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\u3010\u7ffb\u8a33\u3011\u3042\u306a\u305f\u304c\u6c42\u3081\u3066\u3044\u305f\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\n\n\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5165\u9580\u306b\u5f79\u7acb\u3061\u307e\u3057\u305f\u3002\n\n\u672a\u6765\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6280\u8853\u3092Unity\u3067 -UniRx-\n\nUniRx\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u4f8b\u304c\u8c4a\u5bcc\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nReactiveX\n\nRx\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u63a2\u3059\u969b\u306b\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nUnity3D:\u4efb\u610f\u306e\u70b9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u7e2e\u5c0f(\u30d4\u30f3\u30c1\u30a4\u30f3/\u30a2\u30a6\u30c8)\n\n\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u306e\u5b9f\u88c5\u306e\u969b\u306b\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n# \u306f\u3058\u3081\u306b\n\n\u6700\u8fd1\u3001\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u307e\u3067\u306f\u3001UI\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001\u7e70\u308a\u8fd4\u3057\u898b\u76f4\u3055\u306a\u3044\u3068\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3048\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u591a\u304f\u3042\u308a\u307e\u3057\u305f\u3002UI\u30a4\u30d9\u30f3\u30c8\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u5fdc\u3058\u3066\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3066\u3044\u305f\u305b\u3044\u3067\u3001UI\u30a4\u30d9\u30f3\u30c8\u3054\u3068\u306b\u3069\u306e\u3088\u3046\u306a\u72b6\u614b\u306b\u5909\u308f\u308b\u306e\u304b\u3001\u628a\u63e1\u304c\u5fc5\u8981\u3060\u3063\u305f\u305f\u3081\u3067\u3059\u3002\n\n\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5c0e\u5165\u3057\u305f\u7d50\u679c\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fUI\u30a4\u30d9\u30f3\u30c8\u3092\u52a0\u5de5\u3059\u308b\u51e6\u7406\u3092\u7e4b\u3052\u308b\u3053\u3068\u3067\u3001UI\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u305d\u306e\u7d50\u679c\u3001\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u4e0b\u3078\u8aad\u3080\u3060\u3051\u3067\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3044\u3084\u3059\u304f\u306a\u3063\u305f\u3068\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u3001Unity\u4e0a\u3067[UniRx](http://u3d.as/content/neuecc/uni-rx-reactive-extensions-for-unity/7tT)\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3067\u753b\u9762\u3092\u62e1\u5927\u30fb\u7e2e\u5c0f\u3059\u308b\u51e6\u7406\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u306e\u3072\u3068\u3064\u3068\u3057\u3066\u3001\u305d\u306e\u51e6\u7406\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u52d5\u4f5c\u4f8b\u306f\u3001\u4ee5\u4e0b\u306e\u52d5\u753b\u306e\u901a\u308a\u3067\u3059\u3002\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u64cd\u4f5c\u306b\u5408\u308f\u305b\u3066\u3001\u77e9\u5f62\u304c\u62e1\u5927\u30fb\u7e2e\u5c0f\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3092\u7403\u3067\u793a\u3057\u307e\u3059\u3002\n\n![edited.gif](https://qiita-image-store.s3.amazonaws.com/0/30639/b595031a-cf68-1e10-73b0-e77fca8511b0.gif)\n\n[Unity\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3042\u308a\u307e\u3059](https://github.com/mikanbako/example-unity-pinch-gesture-with-rx)\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fUnity 5.0.0f4 Personal\u3067\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u5f53\u65b9\u3067\u306f\u3001Android 4.3, 4.4\u3067\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u4e0b\u8a18\u306e3\u30af\u30e9\u30b9\u3067\u3059\u3002\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u3092\u8868\u3059\u30af\u30e9\u30b9\u3001\u305d\u306e\u60c5\u5831\u3092\u6c42\u3081\u308b\u30af\u30e9\u30b9\u3001\u7d50\u679c\u3092\u63cf\u753b\u3059\u308b\u30af\u30e9\u30b9\u3067\u69cb\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n<dl>\n<dt>Scaling\u30af\u30e9\u30b9</dt>\n  <dd>\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002</dd>\n<dt>PinchGesture\u30af\u30e9\u30b9</dt>\n  <dd>\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3092\u691c\u77e5\u3057\u3066\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u3001\u305d\u306e\u60c5\u5831\u3092\u9001\u308a\u307e\u3059\u3002</dd>\n<dt>MainCamera\u30af\u30e9\u30b9</dt>\n  <dd>PinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3092\u5143\u306b\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002</dd>\n</dl>\n\n\u3053\u308c\u304b\u3089\u5404\u30af\u30e9\u30b9\u3054\u3068\u306b\u3001\u4e0b\u8a18\u306e\u5185\u5bb9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n1. \u30af\u30e9\u30b9\u306e\u30b3\u30fc\u30c9\u5168\u4f53\n2. \u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\n3. \u30b9\u30c8\u30ea\u30fc\u30e0\u5185\u306e\u5404\u30aa\u30da\u30ec\u30fc\u30bf\u3084\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u51e6\u7406\n\n## Scaling\u30af\u30e9\u30b9\n\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002\n\n```csharp:Scaling.cs\nusing UnityEngine;\n\npublic sealed class Scaling\n{\n    public Vector2 Center { get; private set; }\n\n    public float Scale { get; private set; }\n\n    public Scaling(Vector2 center, float scale)\n    {\n        Center = center;\n        Scale = scale;\n    }\n}\n```\n\nCenter\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\uff08\u30b9\u30af\u30ea\u30fc\u30f3\u5ea7\u6a19\uff09\u3092\u8868\u3057\u307e\u3059\u3002Scale\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u62e1\u7e2e\u7387\u3092\u8868\u3057\u307e\u3059\u3002\n\n## PinchGesture\u30af\u30e9\u30b9\n\n\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u3092\u691c\u77e5\u3057\u3066\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u304a\u3088\u3073\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002\n\n```csharp:PinchGesture.cs\nusing UnityEngine;\nusing UnityEngine.Events;\nusing UniRx;\nusing System;\nusing System.Linq;\n\npublic sealed class PinchGesture : MonoBehaviour\n{\n    [SerializeField]\n    private ScaleEvent _scaleEvent;\n\n    private CompositeDisposable _subscribers;\n\n    private static float GetMaxLength(Touch[] touches)\n    {\n        float maxLength = 0;\n\n        for (var i = 0; i < touches.Length - 1; i++)\n        {\n            for (var j = i + 1; j < touches.Length; j++)\n            {\n                maxLength = Mathf.Max(\n                    maxLength,\n                    Vector2.Distance(\n                        touches[i].position,\n                        touches[j].position));\n            }\n        }\n\n        return maxLength;\n    }\n\n    private static Vector2 GetCenter(Touch[] touches)\n    {\n        return touches\n            .Select(touch => touch.position)\n            .Aggregate(\n                Vector2.zero,\n                (previous, current) => previous + current) /\n            touches.Length;\n    }\n\n    private void OnEnable()\n    {\n        _subscribers = new CompositeDisposable();\n\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n       \n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n\n        _subscribers.Add(touchStream.Connect());\n        _subscribers.Add(scalingSubscriber);\n    }\n\n    private void OnDisable()\n    {\n        _subscribers.Dispose();\n    }\n\n    [Serializable]\n    private sealed class ScaleEvent : UnityEvent<Scaling>\n    {\n    }\n}\n```\n\n\u4e0b\u8a18\u306eOnEnable\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3001\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u306e\u691c\u77e5\u3068\u3001\u4e2d\u5fc3\u70b9\u30fb\u62e1\u7e2e\u7387\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n\n```csharp\n    private void OnEnable()\n    {\n        _subscribers = new CompositeDisposable();\n\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n       \n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n\n        _subscribers.Add(touchStream.Connect());\n        _subscribers.Add(scalingSubscriber);\n    }\n```\n\n\u5b9a\u7fa9\u3057\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### touchStream\n\nUpdate\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001\u30bf\u30c3\u30c1\u5165\u529b\u306e\u60c5\u5831\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n\n```csharp\n        IConnectableObservable<Touch[]> touchStream =\n            Observable.EveryUpdate()\n                .Select(_ => Input.touches)\n                .Publish();\n```\n\n\u5f8c\u7d9a\u306e\u8907\u6570\u306e\u7b87\u6240\u3067\u3001\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304b\u3089\u3001Input.touches\u30921\u56de\u3060\u3051\u547c\u3076\u3088\u3046\u306bConnectableObserver\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n### centerStream\n\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n\n```csharp\n        IObservable<Vector2> centerStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches => touches[0].Length <= 1 &&\n                2 <= touches[1].Length)\n            .Select(touches => GetCenter(touches[1]));\n```\n\n<dl>\n<dt>Buffer(2, 1)</dt>\n<dd>touchStream\u304b\u3089\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5404Update\u3054\u3068\u306bA, B, C, D\u306e\u9806\u3067\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u5834\u5408\u3001(A, B), (B, C), (C, D)\u3068\u3044\u3046\u5f62\u306b\u307e\u3068\u307e\u308a\u307e\u3059\u3002</dd>\n<dt>Where(touches => touches[0].Length &lt;= 1 && 2 &lt;= touches[1].Length)</dt>\n<dd>2\u70b9\u4ee5\u4e0a\u306e\u30bf\u30c3\u30c1\u304c\u59cb\u307e\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002</dd>\n<dt>Select(touches => GetCenter(touches[1]))</dt>\n<dd>\u4eca\u56de\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u304b\u3089\u4e2d\u5fc3\u70b9\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002</dd>\n</dl>\n\n### scaleStream\n\n\u62e1\u7e2e\u7387\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\n\n```csharp\n        IObservable<float> scaleStream = touchStream\n            .Buffer(2, 1)\n            .Where(touches =>\n                touches.All(touch => 2 <= touch.Length))\n            .Select(touches =>\n                GetMaxLength(touches[1]) /\n                    GetMaxLength(touches[0]))\n            .Scan(1f, (scale, rate) => scale * rate)\n            .Skip(1);\n```\n\n<dl>\n<dt>Buffer(2, 1)</dt>\n<dd>touchStream\u304b\u3089\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5404Update\u3054\u3068\u306bA, B, C, D\u306e\u9806\u3067\u30bf\u30c3\u30c1\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u5834\u5408\u3001(A, B), (B, C), (C, D)\u3068\u3044\u3046\u5f62\u306b\u307e\u3068\u307e\u308a\u307e\u3059\u3002</dd>\n<dt>Where(touches => touches.All(touch => 2 &lt;= touch.Length))</dt>\n<dd>\u4eca\u56de\u3068\u305d\u306e\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u60c5\u5831\u306e\u3046\u3061\u3001\u4e21\u65b9\u3068\u30822\u70b9\u4ee5\u4e0a\u306e\u30bf\u30c3\u30c1\u3092\u884c\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002</dd>\n<dt>Select(touches => GetMaxLength(touches[1]) / GetMaxLength(touches[0]))</dt>\n<dd>\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u3068\u6bd4\u3079\u3066\u3069\u308c\u3060\u3051\u6307\u540c\u58eb\u306e\u5e45\u304c\u7e2e\u307e\u3063\u305f\u308a\u5e83\u304c\u3063\u305f\u308a\u3057\u305f\u304b\u3001\u305d\u306e\u5272\u5408\u3092\u6c42\u3081\u307e\u3059\u3002GetMaxLength\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30bf\u30c3\u30c1\u60c5\u5831\u304b\u3089\u3001\u6307\u540c\u58eb\u306e\u6700\u5927\u8ddd\u96e2\u3092\u6c42\u3081\u307e\u3059\u3002\n<dt>Scan(1f, (scale, rate) => scale * rate)</dt>\n<dd>\u62e1\u7e2e\u7387\u3092\u6c42\u3081\u307e\u3059\u3002</dd>\n<dt>Skip(1)</dt>\n<dd>Scan\u306e\u521d\u671f\u5024\u3092\u7121\u8996\u3057\u307e\u3059\u3002UniRx\u306e\u5b9f\u88c5\u3067\u306f\u3001Scan\u306b\u6307\u5b9a\u3057\u305f\u521d\u671f\u5024\u304c\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5024\u3092\u6d41\u3059\u5834\u5408\u306fUpdate\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u30671\u3064\u306e\u307f\u6d41\u3057\u305f\u3044\u305f\u3081\u3001\u521d\u671f\u5024\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002</dd>\n</dl>\n\n### scalingSubscriber\n\n\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u3092\u767a\u884c\u3059\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3059\u3002\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u306f\u3001Scaling\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n```csharp\n        IDisposable scalingSubscriber = centerStream\n            .CombineLatest(\n                scaleStream,\n                (center, scale) => new Scaling(center, scale))\n            .Subscribe(_scaleEvent.Invoke);\n```\n\n<dl>\n<dt>centerStream.CombineLatest(scaleStream, (center, scale) => new Scaling(center, scale))</dt>\n<dd>2\u70b9\u4ee5\u4e0a\u30bf\u30c3\u30c1\u3055\u308c\u59cb\u3081\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a08\u7b97\u3055\u308c\u305f\u4e2d\u5fc3\u70b9\u3068\u3001\u73fe\u884c\u306e\u62e1\u7e2e\u7387\u3068\u3092Scaling\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u3068\u3081\u307e\u3059\u3002</dd>\n<dt>Subscribe(_scaleEvent.Invoke)</dt>\n<dd>\u767b\u9332\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u306b\u3001\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u4e2d\u5fc3\u70b9\u3068\u62e1\u7e2e\u7387\u3092\u9001\u308a\u307e\u3059\u3002</dd>\n</dl>\n\n## MainCamera\u30af\u30e9\u30b9\n\nPinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3092\u5143\u306b\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\n```csharp:MainCamera.cs\nusing UnityEngine;\nusing UniRx;\nusing System;\n\n[RequireComponent(typeof(Camera))]\npublic sealed class MainCamera : MonoBehaviour\n{\n    [SerializeField]\n    private GameObject _centerObject;\n\n    private Subject<Scaling> _scalingStream;\n\n    private CompositeDisposable _subscribers;\n\n    public void OnScale(Scaling scaling)\n    {\n        _scalingStream.OnNext(scaling);\n    }\n\n    // Use this for initialization\n    private void Start()\n    {\n        Camera camera = GetComponent<Camera>();\n\n        _scalingStream = new Subject<Scaling>();\n        _subscribers = new CompositeDisposable();\n\n        float firstOrthographicSize = camera.orthographicSize;\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n\n        _subscribers.Add(_scalingStream);\n        _subscribers.Add(scalingSubscriber);\n    }\n\n    private void OnDestroy()\n    {\n        _subscribers.Dispose();\n    }\n}\n```\n\n\u4e0b\u8a18\u306eStart\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3001Camera\u3084\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3092\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002\n\n```csharp\n    private void Start()\n    {\n        Camera camera = GetComponent<Camera>();\n\n        _scalingStream = new Subject<Scaling>();\n        _subscribers = new CompositeDisposable();\n\n        float firstOrthographicSize = camera.orthographicSize;\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n```\n\n\u5b9a\u7fa9\u3057\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n### scaleVariationRateStream\n\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u969b\u306b\u3001\u524d\u56de\u304b\u3089\u5909\u5316\u3057\u305f\u62e1\u7e2e\u7387\u306e\u5272\u5408\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3002\u753b\u9762\u306e\u4e2d\u5fc3\u4ee5\u5916\u306e\u5834\u6240\u3092\u57fa\u70b9\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3092\u884c\u3046\u5834\u5408\u3001\u30ab\u30e1\u30e9\u306e\u30ba\u30fc\u30e0\u30a4\u30f3\u3001\u30ba\u30fc\u30e0\u30a2\u30a6\u30c8\u3060\u3051\u3067\u306a\u304f\u5e73\u884c\u79fb\u52d5\u3082\u3055\u305b\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u3001\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u308b\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```csharp\n\n        IObservable<float> scaleVariationRateStream =\n            _scalingStream\n                .Select(scaling => scaling.Scale)\n                .StartWith(1f)\n                .Buffer(2, 1)\n                .Select(scaleHistory =>\n                    scaleHistory[1] / scaleHistory[0]);\n```\n\n<dl>\n<dt>Select(scaling => scaling.Scale)</dt>\n<dd>PinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u304b\u3089\u3001\u62e1\u7e2e\u7387\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002</dd>\n<dt>StartWith(1f)</dt>\n<dd>\u521d\u671f\u5024\u3068\u3057\u3066\u62e1\u7e2e\u73871\u3092\u6d41\u3057\u307e\u3059\u3002</dd>\n<dt>Buffer(2, 1)</dt>\n<dd>\u4eca\u56de\u3068\u524d\u56de\u306e\u62e1\u7e2e\u7387\u3092\u307e\u3068\u3081\u307e\u3059\u3002<dd>\n<dt>Select(scaleHistory => scaleHistory[1] / scaleHistory[0])</dt>\n<dd>\u524d\u56de\u3068\u6bd4\u8f03\u3057\u305f\u4eca\u56de\u306e\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u6c42\u3081\u307e\u3059\u3002</dd>\n</dl>\n\n### scalingSubscriber\n\n\u62e1\u5927\u30fb\u7e2e\u5c0f\u306e\u60c5\u5831\u304b\u3089\u3001\u4e2d\u5fc3\u70b9\u3092\u8868\u3059\u7403\u3068Camera\u3092\u79fb\u52d5\u3055\u305b\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3059\u3002\n\n```csharp\n        IDisposable scalingSubscriber = _scalingStream\n            .Zip(\n                scaleVariationRateStream,\n                (scaling, scaleVariationRate) =>\n                    new\n                    {\n                        Center = scaling.Center,\n                        Scale = scaling.Scale,\n                        ScaleVariationRate = scaleVariationRate\n                    })\n            .Subscribe(current =>\n            {\n                Vector2 centerPosition = camera\n                        .ScreenToWorldPoint(current.Center);\n\n                _centerObject.transform.position = centerPosition;\n\n                camera.orthographicSize =\n                    firstOrthographicSize / current.Scale;\n\n                Vector2 centerTranslate =\n                   (centerPosition -\n                            (Vector2)transform.position) *\n                        (current.ScaleVariationRate - 1);\n\n                transform.position += (Vector3)centerTranslate;\n            });\n```\n\n<dl>\n<dt>Zip(scaleVariationRateStream, (scaling, scaleVariationRate) => new { Center = scaling.Center, Scale = scaling.Scale, ScaleVariationRate = scaleVariationRate })</dt>\n<dd>PinchGesture\u304b\u3089\u53d7\u3051\u53d6\u3063\u305fScaling\u3068\u3001scaleVariationRateStream\u3067\u8a08\u7b97\u3057\u305f\u3001\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u307e\u3068\u3081\u307e\u3059\u3002</dd>\n<dt>Subscribe</dt>\n<dd>Scaling\u306b\u542b\u307e\u308c\u308b\u4e2d\u5fc3\u70b9\u306b\u7403\u3092\u79fb\u52d5\u3055\u305b\u3001\u62e1\u7e2e\u7387\u306b\u5fdc\u3058\u3066Camera\u306e\u30d3\u30e5\u30fc\u30dd\u30a4\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u4e2d\u5fc3\u70b9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u30fb\u7e2e\u5c0f\u3055\u308c\u3066\u898b\u3048\u308b\u3088\u3046\u306b\u3001\u62e1\u7e2e\u7387\u306e\u5909\u5316\u7387\u3092\u5143\u306bCamera\u3092\u5e73\u884c\u79fb\u52d5\u3055\u305b\u307e\u3059\u3002</dd>\n</dl>\n\n# \u53c2\u8003\u6587\u732e\n\n<dl>\n<dt><a href=\"http://ninjinkun.hatenablog.com/entry/introrxja\">\u3010\u7ffb\u8a33\u3011\u3042\u306a\u305f\u304c\u6c42\u3081\u3066\u3044\u305f\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580</a></dt>\n<dd>\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5165\u9580\u306b\u5f79\u7acb\u3061\u307e\u3057\u305f\u3002</dd>\n<dt><a href=\"http://www.slideshare.net/torisoup/unity-unirx\">\u672a\u6765\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6280\u8853\u3092Unity\u3067 -UniRx-</a></dt>\n<dd>UniRx\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u4f8b\u304c\u8c4a\u5bcc\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002</dd>\n<dt><a href=\"http://reactivex.io/\">ReactiveX</a></dt>\n<dd>Rx\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u63a2\u3059\u969b\u306b\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002</dd>\n<dt><a href=\"http://narudesign.com/devlog/unity-pinch-in-out/\">Unity3D:\u4efb\u610f\u306e\u70b9\u3092\u4e2d\u5fc3\u306b\u62e1\u5927\u7e2e\u5c0f(\u30d4\u30f3\u30c1\u30a4\u30f3/\u30a2\u30a6\u30c8)</dt>\n<dd>\u30d4\u30f3\u30c1\u30a4\u30f3\u3001\u30d4\u30f3\u30c1\u30a2\u30a6\u30c8\u306e\u5b9f\u88c5\u306e\u969b\u306b\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002</dd>\n</dt>\n", "tags": ["Unity", "UniRx", "ReactiveExtensions", "C#"]}