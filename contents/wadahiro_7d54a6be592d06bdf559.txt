{"context": "\n\n\u306f\u3058\u3081\u306b\nredux-saga\u3067\u975e\u540c\u671f\u51e6\u7406\u3068\u6226\u3046 - API\u547c\u3073\u51fa\u3057\u306e\u30b9\u30ed\u30c3\u30c8\u30ea\u30f3\u30b0\u3067\u306f\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u3092put\u3068get\u3001\u4e8c\u91cd\u30eb\u30fc\u30d7\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u305f\u304c\u3001redux-saga\u306echannel\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u7d39\u4ecb\u3059\u308b\u3002\n\nchannel\u306b\u3088\u308b\u5236\u5fa1\u65b9\u6cd5\n\u5b9f\u306f\u30ba\u30d0\u30ea\u3084\u308a\u305f\u3044\u3053\u3068\u304c redux-saga\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 - 3.11. Using Channels > Using channels to communicate between Sagas \u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\u3084\u308b\u3053\u3068\u306f\u3001\n\n\nchannel \u3092\u751f\u6210\u3059\u308b\u3002\u751f\u6210\u3057\u305fchannel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30ad\u30e5\u30fc\u306b\u306a\u308b\u3002\n\u540c\u6642\u5b9f\u884c\u6570\u306e\u6570\u3060\u3051\u30bf\u30b9\u30af\u3092fork\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u969b\u3001\u751f\u6210\u3057\u305fchannel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\u30bf\u30b9\u30af\u306b\u6e21\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u30bf\u30b9\u30af\u304c\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3002\n\u30bf\u30b9\u30af\u306e\u51e6\u7406\u3067\u306f\u3001\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305fchannel\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089take\u3067\u5f85\u3064\u3002take\u3067\u53d6\u308c\u305f\u3089\u3084\u308a\u305f\u3044\u51e6\u7406(\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u3092\u304b\u3051\u305f\u3044\u91cd\u3044\u51e6\u7406\u306a\u3069)\u3092\u5b9f\u884c\u3057\u3001\u7d42\u4e86\u5f8c\u307e\u305ftake\u3067\u5f85\u3064\u3002\n\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u5225\u306b\u3001\u51e6\u7406\u306e\u53d7\u4ed8\u3092takeEvery\u3067\u884c\u3044\u3001put\u3067\u7b2c\u4e00\u5f15\u6570\u306b\u5148\u307b\u3069\u306echannel\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u6e21\u3057\u305f\u3044\u4efb\u610f\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u30013\u306etake\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u4efb\u610f\u30c7\u30fc\u30bf\u304c\u6e21\u3055\u308c\u3064\u3064\u3001\u51e6\u7406\u304c\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306b\u5f15\u304d\u7d99\u304c\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3002\u306a\u304a\u3001redux-saga\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b\u30b3\u30fc\u30c9\u4f8b\u3060\u3068takeEvery\u306e\u7b87\u6240\u306fwhile\u3067\u5358\u7d14\u306btake\u3001put\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u304c\u3001\u79c1\u306e\u74b0\u5883\u3060\u3068take\u306e\u53d6\u308a\u3053\u307c\u3057\u304c\u767a\u751f\u3059\u308b\u30b1\u30fc\u30b9\u304c\u3042\u3063\u305f\u305f\u3081takeEvery\u306b\u5909\u3048\u3066\u3044\u308b(takeEvery\u3060\u3068\u4eca\u306e\u3068\u3053\u308d\u53d6\u308a\u3053\u307c\u3057\u306f\u306a\u3044)\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\n// \u91cd\u3044\u975e\u540c\u671f\u51e6\u7406\u306e\u30c0\u30df\u30fc\u5b9f\u88c5\nfunction heavyProcess() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(true);\n    }, 2000);\n  });\n}\n\nfunction* watchRequests() {\n  // channel\u306e\u751f\u6210\n  const chan = yield call(channel);\n\n  // \u540c\u6642\u5b9f\u884c\u6570\u5206fork\u3059\u308b (\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u308b\u30a4\u30e1\u30fc\u30b8)\n  for (let i = 0; i < 3; i++) {\n    yield fork(handleRequest, chan);\n  }\n\n  // fork\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u51e6\u7406\u3092\u59d4\u8b72\u3055\u305b\u308b\u3060\u3051\u306e\u51e6\u7406\u3092takeEvery\u3067\u5b9f\u884c\u3055\u305b\u308b\n  // 'request'\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u6765\u305f\u3089\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306b\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3059\u308b\u3060\u3051\u306e\u53d7\u4ed8\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30a4\u30e1\u30fc\u30b8\n  yield * takeEvery('request', function*(action) {\n    yield put(chan, action);\n  });\n}\n\n// \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u51e6\u7406\nfunction* handleRequest(chan) {\n  while (true) {\n    const action = yield take(chan);\n\n    console.log('start: ', action.payload.id);\n    yield call(heavyProcess);\n    console.log('end: ', action.payload.id);\n  }\n}\n\nfunction* saga() {\n  yield fork(watchRequests);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = Redux.createStore(\n  () => {},\n  Redux.applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(saga);\n\n// 'request'\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5927\u91cf\u306b\u5b9f\u884c\nfor (let i = 0; i < 20; i++) {\n  store.dispatch({\n    type: 'request',\n    payload: {\n      id: i\n    }\n  });\n}\n\n\n\u5b9f\u884c\u4f8b\n\u4f8b\u3067\u306f\u540c\u6642\u5b9f\u884c\u6570\u306f3\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u30013\u3064\u305a\u3064\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\nstart:  0\nstart:  1\nstart:  2\nend:  0\nstart:  3\nend:  1\nstart:  4\nend:  2\nstart:  5\nend:  3\nstart:  6\nend:  4\nstart:  7\nend:  5\nstart:  8\n...\n\n\u306a\u304a\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f JSFiddle \u3067Chrome\u306a\u3089\u52d5\u304b\u305b\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\n[redux-saga\u3067\u975e\u540c\u671f\u51e6\u7406\u3068\u6226\u3046 - API\u547c\u3073\u51fa\u3057\u306e\u30b9\u30ed\u30c3\u30c8\u30ea\u30f3\u30b0](http://qiita.com/kuy/items/716affc808ebb3e1e8ac#api%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%AE%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%83%AA%E3%83%B3%E3%82%B0)\u3067\u306f\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u3092`put`\u3068`get`\u3001\u4e8c\u91cd\u30eb\u30fc\u30d7\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u305f\u304c\u3001redux-saga\u306e`channel`\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u7d39\u4ecb\u3059\u308b\u3002\n\n# channel\u306b\u3088\u308b\u5236\u5fa1\u65b9\u6cd5\n\n\u5b9f\u306f\u30ba\u30d0\u30ea\u3084\u308a\u305f\u3044\u3053\u3068\u304c [redux-saga\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 - 3.11. Using Channels > Using channels to communicate between Sagas](http://yelouafi.github.io/redux-saga/docs/advanced/Channels.html) \u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\n\u3084\u308b\u3053\u3068\u306f\u3001\n\n1. `channel` \u3092\u751f\u6210\u3059\u308b\u3002\u751f\u6210\u3057\u305f`channel`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30ad\u30e5\u30fc\u306b\u306a\u308b\u3002\n2. \u540c\u6642\u5b9f\u884c\u6570\u306e\u6570\u3060\u3051\u30bf\u30b9\u30af\u3092`fork`\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u969b\u3001\u751f\u6210\u3057\u305f`channel`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\u30bf\u30b9\u30af\u306b\u6e21\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u30bf\u30b9\u30af\u304c\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3002\n3. \u30bf\u30b9\u30af\u306e\u51e6\u7406\u3067\u306f\u3001\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305f`channel`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089`take`\u3067\u5f85\u3064\u3002`take`\u3067\u53d6\u308c\u305f\u3089\u3084\u308a\u305f\u3044\u51e6\u7406(\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u3092\u304b\u3051\u305f\u3044\u91cd\u3044\u51e6\u7406\u306a\u3069)\u3092\u5b9f\u884c\u3057\u3001\u7d42\u4e86\u5f8c\u307e\u305f`take`\u3067\u5f85\u3064\u3002\n4. \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u5225\u306b\u3001\u51e6\u7406\u306e\u53d7\u4ed8\u3092`takeEvery`\u3067\u884c\u3044\u3001`put`\u3067\u7b2c\u4e00\u5f15\u6570\u306b\u5148\u307b\u3069\u306e`channel`\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u6e21\u3057\u305f\u3044\u4efb\u610f\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u30013\u306e`take`\u306e\u623b\u308a\u5024\u3068\u3057\u3066\u4efb\u610f\u30c7\u30fc\u30bf\u304c\u6e21\u3055\u308c\u3064\u3064\u3001\u51e6\u7406\u304c\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306b\u5f15\u304d\u7d99\u304c\u308c\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3002\u306a\u304a\u3001[redux-saga\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b\u30b3\u30fc\u30c9\u4f8b](http://yelouafi.github.io/redux-saga/docs/advanced/Channels.html)\u3060\u3068`takeEvery`\u306e\u7b87\u6240\u306f`while`\u3067\u5358\u7d14\u306b`take`\u3001`put`\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u304c\u3001\u79c1\u306e\u74b0\u5883\u3060\u3068`take`\u306e\u53d6\u308a\u3053\u307c\u3057\u304c\u767a\u751f\u3059\u308b\u30b1\u30fc\u30b9\u304c\u3042\u3063\u305f\u305f\u3081`takeEvery`\u306b\u5909\u3048\u3066\u3044\u308b(`takeEvery`\u3060\u3068\u4eca\u306e\u3068\u3053\u308d\u53d6\u308a\u3053\u307c\u3057\u306f\u306a\u3044)\u3002\n\n## \u30b3\u30fc\u30c9\u4f8b\n\n```js\n// \u91cd\u3044\u975e\u540c\u671f\u51e6\u7406\u306e\u30c0\u30df\u30fc\u5b9f\u88c5\nfunction heavyProcess() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(true);\n    }, 2000);\n  });\n}\n\nfunction* watchRequests() {\n  // channel\u306e\u751f\u6210\n  const chan = yield call(channel);\n\n  // \u540c\u6642\u5b9f\u884c\u6570\u5206fork\u3059\u308b (\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u308b\u30a4\u30e1\u30fc\u30b8)\n  for (let i = 0; i < 3; i++) {\n    yield fork(handleRequest, chan);\n  }\n\n  // fork\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306b\u51e6\u7406\u3092\u59d4\u8b72\u3055\u305b\u308b\u3060\u3051\u306e\u51e6\u7406\u3092takeEvery\u3067\u5b9f\u884c\u3055\u305b\u308b\n  // 'request'\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u6765\u305f\u3089\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306b\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3059\u308b\u3060\u3051\u306e\u53d7\u4ed8\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30a4\u30e1\u30fc\u30b8\n  yield * takeEvery('request', function*(action) {\n    yield put(chan, action);\n  });\n}\n\n// \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u51e6\u7406\nfunction* handleRequest(chan) {\n  while (true) {\n    const action = yield take(chan);\n\n    console.log('start: ', action.payload.id);\n    yield call(heavyProcess);\n    console.log('end: ', action.payload.id);\n  }\n}\n\nfunction* saga() {\n  yield fork(watchRequests);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = Redux.createStore(\n  () => {},\n  Redux.applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(saga);\n\n// 'request'\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5927\u91cf\u306b\u5b9f\u884c\nfor (let i = 0; i < 20; i++) {\n  store.dispatch({\n    type: 'request',\n    payload: {\n      id: i\n    }\n  });\n}\n```\n\n\n## \u5b9f\u884c\u4f8b\n\n\u4f8b\u3067\u306f\u540c\u6642\u5b9f\u884c\u6570\u306f3\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u30013\u3064\u305a\u3064\u52d5\u4f5c\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n```bash\nstart:  0\nstart:  1\nstart:  2\nend:  0\nstart:  3\nend:  1\nstart:  4\nend:  2\nstart:  5\nend:  3\nstart:  6\nend:  4\nstart:  7\nend:  5\nstart:  8\n...\n```\n\n\u306a\u304a\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f [JSFiddle](http://jsfiddle.net/wadahiro/1x9tnhdb/) \u3067Chrome\u306a\u3089\u52d5\u304b\u305b\u307e\u3059\u3002\n\n", "tags": ["redux", "redux-saga", "reactjs"]}