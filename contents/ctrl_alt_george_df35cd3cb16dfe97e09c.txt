{"context": " More than 1 year has passed since last update.\n\nFsControl\nFsControl\u3068\u3044\u3046\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3002\n\u3053\u308c\u306fHaskell\u306e\u578b\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3002\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306fFSharpPlus\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u826f\u3044\u3002\u5b9f\u969b\u306e\u4f7f\u3044\u65b9\u304c\u3088\u304f\u5206\u304b\u308b\u3002\n\u4eca\u56de\u306f\u3001FsControl\u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u304f\u308c\u3066\u3044\u308bCont\u578b\u3092\u4f7f\u3063\u3066\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\n\u9650\u5b9a\u7d99\u7d9a\n\u300eF#\u3067 shift\uff0freset \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3002\u9650\u5b9a\u7d99\u7d9a\uff08\u98a8\uff09\u30e2\u30ca\u30c9\u3067\u56db\u5929\u738b\u554f\u984c\u3092\u89e3\u304f\u3002 - Bug Catharsis\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\u30b3\u30fc\u30c9\u306f\u307b\u307chttp://www.haskell.org/haskellwiki/MonadCont_done_right\u306e\u7ffb\u8a33\u3067\u3042\u308b\u3002\n\n\u30b3\u30fc\u30c9\n\nopen FsControl.Core.Types\nopen FsControl.Core.TypeMethods\nopen FsControl.Core.TypeMethods.Applicative\nopen FsControl.Core.TypeMethods.Monad\n\n//https://github.com/gmpl/FsControl/blob/master/FsControl.Core/Samples/Haskell.fsx\nlet inline return' x = Inline.instance Pure x\nlet inline (>>=) x (f:_->'R) : 'R = Inline.instance (Bind, x) f \ntype DoNotationBuilder() =\n    member inline b.Return(x)    = return' x\n    member inline b.Bind(p,rest) = p >>= rest\n    member        b.Let (p,rest) = rest p\n    member    b.ReturnFrom(expr) = expr\nlet do' = new DoNotationBuilder()\n\nlet runCont = Cont.run\nlet callCC' = Cont.callCC\nlet inline when'  p s = if p then s else return' ()\nlet inline unless p s = when' (not p) s\n\n//let returnCont = fun n -> Cont(fun k -> k n)\nlet returnCont :'a->Cont<'b, 'a> = return'\n\n//\u9650\u5b9a\u7d99\u7d9a\uff08http://www.haskell.org/haskellwiki/MonadCont_done_right\uff09\nlet reset e = returnCont <| runCont e id\nlet shift e = Cont <| fun k -> runCont (e (returnCont << k)) id\n\n[<EntryPoint>]\nlet main argv = \n    reset <| do'{\n        let! first = shift <| fun k -> do'{\n            let! second = k(1)\n            printfn \"%A\" (second, \"2\")\n            return 3\n        }\n        printfn \"%A\" (first, \"1\")\n        return 2\n    }\n    |> runCont <|\n        fun third -> printfn \"%A\" (third, \"3\")\n\n    0\n\n\n\n\u304b\u3063\u3053\u3044\u3044\n\u3044\u308d\u3044\u308d\u904a\u3079\u305d\u3046\n#FsControl\n[FsControl](https://github.com/gmpl/FsControl)\u3068\u3044\u3046\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3002\n\u3053\u308c\u306fHaskell\u306e\u578b\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u3059\u308b\u3002\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f[FSharpPlus](https://github.com/gmpl/FSharpPlus)\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u826f\u3044\u3002\u5b9f\u969b\u306e\u4f7f\u3044\u65b9\u304c\u3088\u304f\u5206\u304b\u308b\u3002\n\u4eca\u56de\u306f\u3001FsControl\u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u304f\u308c\u3066\u3044\u308bCont\u578b\u3092\u4f7f\u3063\u3066\u9650\u5b9a\u7d99\u7d9a\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\n#\u9650\u5b9a\u7d99\u7d9a\n\u300e[F#\u3067 shift\uff0freset \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3002\u9650\u5b9a\u7d99\u7d9a\uff08\u98a8\uff09\u30e2\u30ca\u30c9\u3067\u56db\u5929\u738b\u554f\u984c\u3092\u89e3\u304f\u3002 - Bug Catharsis](http://zecl.hatenablog.com/entry/20120630/p1)\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\n\u30b3\u30fc\u30c9\u306f\u307b\u307c[http://www.haskell.org/haskellwiki/MonadCont_done_right](http://www.haskell.org/haskellwiki/MonadCont_done_right)\u306e\u7ffb\u8a33\u3067\u3042\u308b\u3002\n\n#\u30b3\u30fc\u30c9\n\n```fsharp\n\nopen FsControl.Core.Types\nopen FsControl.Core.TypeMethods\nopen FsControl.Core.TypeMethods.Applicative\nopen FsControl.Core.TypeMethods.Monad\n\n//https://github.com/gmpl/FsControl/blob/master/FsControl.Core/Samples/Haskell.fsx\nlet inline return' x = Inline.instance Pure x\nlet inline (>>=) x (f:_->'R) : 'R = Inline.instance (Bind, x) f \ntype DoNotationBuilder() =\n    member inline b.Return(x)    = return' x\n    member inline b.Bind(p,rest) = p >>= rest\n    member        b.Let (p,rest) = rest p\n    member    b.ReturnFrom(expr) = expr\nlet do' = new DoNotationBuilder()\n\nlet runCont = Cont.run\nlet callCC' = Cont.callCC\nlet inline when'  p s = if p then s else return' ()\nlet inline unless p s = when' (not p) s\n\n//let returnCont = fun n -> Cont(fun k -> k n)\nlet returnCont :'a->Cont<'b, 'a> = return'\n\n//\u9650\u5b9a\u7d99\u7d9a\uff08http://www.haskell.org/haskellwiki/MonadCont_done_right\uff09\nlet reset e = returnCont <| runCont e id\nlet shift e = Cont <| fun k -> runCont (e (returnCont << k)) id\n\n[<EntryPoint>]\nlet main argv = \n    reset <| do'{\n        let! first = shift <| fun k -> do'{\n            let! second = k(1)\n            printfn \"%A\" (second, \"2\")\n            return 3\n        }\n        printfn \"%A\" (first, \"1\")\n        return 2\n    }\n    |> runCont <|\n        fun third -> printfn \"%A\" (third, \"3\")\n    \n    0\n\n```\n\n#\u304b\u3063\u3053\u3044\u3044\n\u3044\u308d\u3044\u308d\u904a\u3079\u305d\u3046", "tags": ["F#"]}