{"context": "\u5b8c\u5168\u306b\u8abf\u5b50\u306b\u4e57\u3063\u3066\u3084\u3063\u3061\u3083\u3063\u305f\u7cfb\u3067\u3059\u3002\n\u300c\u30c9\u30e1\u30a4\u30f3\u53d6\u5f97\u304cJS\u3067\u3067\u304d\u308b\u306a\u3089\u3001\u30c9\u30e1\u30a4\u30f3\u53d6\u5f97\u2192\u30b5\u30fc\u30d0\u30fc\u7acb\u3061\u4e0a\u3052\u307e\u3067\u5168\u90e8\u3084\u3063\u3061\u3083\u3048\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u52e2\u3044\u306b\u4efb\u305b\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3057\u308c\u3063\u3068ES6\u306e\u30b3\u30fc\u30c9\u3068\u304b\u3001promise\u4f7f\u3063\u3066\u305f\u308a\u3059\u308b\u306e\u3067Node\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u8981\u6ce8\u610f\u3067\u3059\u3002\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\n$ tree -I node_modules\n.\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 parameters.js\n\n\u30bb\u30ad\u30e5\u30a2\u306a\u5024\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u7cfb\u3092config.js / parameters.js\u306b\u5207\u308a\u51fa\u3057\u3066.gitignore\u3055\u305b\u3066\u307e\u3059\u3002\n\n\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30fc\u30c9\n\nindex.js\nvar AWS = require('aws-sdk');\nvar conf = require('./config.js');\nvar params = require('./parameters.js');\nvar parameters = params.getParams();\n\ncreateWebServerStack( parameters );\nfunction createWebServerStack( parameters ) {\n    console.log('Check Route53 Domains Status');\n    var config = conf.getConf();\n    var route53domains = new AWS.Route53Domains({\n        apiVersion: '2014-05-15',\n        accessKeyId: config.accessKeyId,\n        secretAccessKey: config.secretAccessKey,\n        region: config.region\n    });\n    var params = {\n      DomainName: parameters.route53.domain,\n    };\n    route53domains.checkDomainAvailability(params).promise().then(\n        function(data){\n            var response = domain + ' is ' + data. Availability;\n            if ( data.Availability == 'AVAILABLE') {\n                return data;\n            } else {\n                throw response;\n            }\n        }\n    ).then( (data) => {\n        console.log('Register your Domain in Route53Domains');\n        var params = {\n          AdminContact: parameters.route53.contacts.admin,\n          DomainName: domain,\n          DurationInYears: 1,\n          RegistrantContact: parameters.route53.contacts.registrant,\n          TechContact: parameters.route53.contacts.tech,\n          AutoRenew: true,\n          PrivacyProtectAdminContact: true,\n          PrivacyProtectRegistrantContact: true,\n          PrivacyProtectTechContact: true\n        };\n        return route53domains.registerDomain(params).promise();\n        //context.succeed(data. Availability);\n    }).then( (data) => {\n        console.log('Domain Registration is Succeeded');\n        console.log(data);\n        return data;\n    }).catch( (err) => {\n        console.log('Fail to registration Domain.');\n        console.log(err);\n        //context.fail(err);\n        return err;\n    }).then( (data) => {\n        console.log('Create EC2 KeyPair');\n\n        var ec2 = new AWS.EC2({\n            apiVersion: '2015-10-01',\n            accessKeyId: config.accessKeyId,\n            secretAccessKey: config.secretAccessKey,\n            region: config.region\n        });\n\n        var params = {\n          KeyName: \"keyfile-\" + parameters.accountNo,\n          DryRun: false\n        };\n        return ec2.createKeyPair(params).promise();\n    }).then( (data) => {\n        console.log('Send EC2 Keypair to S3 Bucket');\n        AWS.config.apiVersions = {\n          s3: '2006-03-01',\n          accessKeyId: config.accessKeyId,\n          secretAccessKey: config.secretAccessKey,\n        };\n\n        var s3 = new AWS.S3();\n        var params = {\n          Bucket: config.KeyFileBucket,\n          Key: 'keypair/' + data.KeyName + '.pem',\n          ACL: 'bucket-owner-full-control',\n          Body: data.KeyMaterial,\n          ContentType: 'application/x-pem-file',\n          Expires: new Date()\n        };\n        return s3.putObject(params).promise();\n    }).then( (data) => {\n        console.log('Create CloudFormation Stack');\n        var cloudformation = new AWS.CloudFormation({\n            apiVersion: '2010-05-15',\n            accessKeyId: config.accessKeyId,\n            secretAccessKey: config.secretAccessKey,\n            region: config.region\n        });\n\n        var ParamKeyName = {\n            ParameterKey: 'KeyName',\n            ParameterValue: parameters.accountNo,\n            UsePreviousValue: true\n        };\n        var ParamKeyAccountNo = {\n            ParameterKey: 'AccountNo',\n            ParameterValue: parameters.accountNo,\n            UsePreviousValue: true\n        };\n        var ParamDomainName = {\n            ParameterKey: 'DomainName',\n            ParameterValue: parameters.route53.domain,\n            UsePreviousValue: true\n        };\n        parameters.cloudformation.parameters.push(ParamKeyName);\n        parameters.cloudformation.parameters.push(ParamKeyAccountNo);\n        parameters.cloudformation.parameters.push(ParamDomainName);\n        var cfnParams = {\n              StackName: parameters.accountNo, /* required */\n              Capabilities: [\n                'CAPABILITY_IAM',\n              ],\n              NotificationARNs: [\n                config.CfnStatusArn\n              ],\n              Parameters: parameters.cloudformation.parameters,\n              OnFailure: 'DELETE',\n              TemplateURL: config.TemplateURL,\n              TimeoutInMinutes: 100\n        };\n        return cloudformation.createStack(cfnParams).promise();\n    }).then( (data) => {\n        console.log('Succeeded to Create CloudFormation');\n        console.log(data);\n    }).catch( (err) => {\n        console.log('Fail to create CloudFormation');\n        console.log(err);\n        //context.fail(err);\n    });\n}\n\n\n\nconfig.js\nexports.getConf = function() {\n    return {\n        accessKeyId: \"AWS_ACCESS_KEY\",\n        secretAccessKey: \"AWS_SECRET_KEY\",\n        TemplateURL: 'CLOUDFORMATION_JSON_FILE_URL',\n        region: 'REGION',\n        KeyFileBucket: 'S3_KEY_FILE_BUCKET_NAME',\n        CfnStatusArn: 'SNS_ARN'\n    };\n};\n\n\n\nparameters.js\nexports.getParams = function() {\n    var baseContact = {\n        AddressLine1: 'ADDRESS_LINE_1',\n        AddressLine2: 'ADDRESS_LINE_2',\n        City: 'CITY',\n        ContactType: 'COMPANY',\n        CountryCode: 'JP',\n        Email: 'EMAIL@ADDRESS',\n        FirstName: 'FIRST_NAME',\n        LastName: 'LAST_NAME',\n        OrganizationName: 'ORGANIZATION_NAME',\n        ZipCode: 'XXX-XXXX',\n        PhoneNumber : '+81.XXXXXXXXX'\n    };\n    return {\n        accountNo: 'STACK_ID',\n        route53: {\n            domain: 'DOMAIN',\n            contacts: {\n                admin: baseContact,\n                registrant: baseContact,\n                tech: baseContact\n            }\n        },\n        cloudformation: {\n            parameters : [\n                {\n                    ParameterKey: 'SSHLocation4EC2',\n                    ParameterValue: 'SSH_LOCATION',\n                    UsePreviousValue: true\n                },{\n                    ParameterKey: 'AvailabilityZone',\n                    ParameterValue: 'AVAILABILITY_ZONE',\n                    UsePreviousValue: true\n                },{\n                    ParameterKey: 'InstanceType',\n                    ParameterValue: 'INSTANCE_TYPE',\n                    UsePreviousValue: true\n                }\n            ]\n        }\n    };\n};\n\n\n\u3053\u3053\u307e\u3067\u6e96\u5099\u3057\u3066index.js\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n- Route53 Domains\u3067\u30c9\u30e1\u30a4\u30f3\u304c\u53d6\u5f97\u53ef\u80fd\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n- \u53d6\u5f97\u53ef\u80fd\u306a\u3089Route53 Domains\u3067\u30c9\u30e1\u30a4\u30f3\u3092\u53d6\u5f97\u3059\u308b\n- \u53d6\u5f97\u306e\u6210\u5426\u306b\u95a2\u308f\u3089\u305aCloudFormation\u306e\u7acb\u3061\u4e0a\u3052\u306f\u5b9f\u884c\u3055\u308c\u308b\n- CloudFormation\u3067\u7acb\u3061\u4e0a\u3052\u308bEC2\u306e\u305f\u3081\u306bKeyPair\u3092\u751f\u6210\u3057\u3001S3\u30d0\u30b1\u30c3\u30c8\u306b\u4fdd\u5b58\u3059\u308b\n- parametes.js\u306e\u5024\u306a\u3069\u3092\u4f7f\u3063\u3066CloudFormation\u3092\u8d77\u52d5\u3059\u308b\n\u3092\u52dd\u624b\u306b\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\u53d6\u5f97\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u306e\u627f\u8a8d\u30e1\u30fc\u30eb\u78ba\u8a8d\u3084\u3001\u30c9\u30e1\u30a4\u30f3\u3068EC2\u306e\u63a5\u7d9a\u306a\u3069\u306f\u5225\u9014\u5bfe\u5fdc\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u8af8\u3005\u4e00\u767a\u3067\u3042\u304c\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u4ed5\u4e8b\u304c\u6357\u308b\u304b\u306a\u3068\u3061\u3087\u3063\u3068\u5922\u898b\u3066\u307e\u3059\u3002\n\n\u5b8c\u5168\u306b\u8abf\u5b50\u306b\u4e57\u3063\u3066\u3084\u3063\u3061\u3083\u3063\u305f\u7cfb\u3067\u3059\u3002\n\n\u300c\u30c9\u30e1\u30a4\u30f3\u53d6\u5f97\u304cJS\u3067\u3067\u304d\u308b\u306a\u3089\u3001\u30c9\u30e1\u30a4\u30f3\u53d6\u5f97\u2192\u30b5\u30fc\u30d0\u30fc\u7acb\u3061\u4e0a\u3052\u307e\u3067\u5168\u90e8\u3084\u3063\u3061\u3083\u3048\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u52e2\u3044\u306b\u4efb\u305b\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3057\u308c\u3063\u3068ES6\u306e\u30b3\u30fc\u30c9\u3068\u304b\u3001promise\u4f7f\u3063\u3066\u305f\u308a\u3059\u308b\u306e\u3067Node\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u8981\u6ce8\u610f\u3067\u3059\u3002\n\n## \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\n```\n$ tree -I node_modules\n.\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 parameters.js\n```\n\u30bb\u30ad\u30e5\u30a2\u306a\u5024\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u7cfb\u3092config.js / parameters.js\u306b\u5207\u308a\u51fa\u3057\u3066.gitignore\u3055\u305b\u3066\u307e\u3059\u3002\n\n##\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30fc\u30c9\n\n```index.js\nvar AWS = require('aws-sdk');\nvar conf = require('./config.js');\nvar params = require('./parameters.js');\nvar parameters = params.getParams();\n\ncreateWebServerStack( parameters );\nfunction createWebServerStack( parameters ) {\n\tconsole.log('Check Route53 Domains Status');\n\tvar config = conf.getConf();\n\tvar route53domains = new AWS.Route53Domains({\n\t\tapiVersion: '2014-05-15',\n\t\taccessKeyId: config.accessKeyId,\n\t\tsecretAccessKey: config.secretAccessKey,\n\t\tregion: config.region\n\t});\n\tvar params = {\n\t  DomainName: parameters.route53.domain,\n\t};\n\troute53domains.checkDomainAvailability(params).promise().then(\n\t\tfunction(data){\n\t\t\tvar response = domain + ' is ' + data. Availability;\n\t\t\tif ( data.Availability == 'AVAILABLE') {\n\t\t\t\treturn data;\n\t\t\t} else {\n\t\t\t\tthrow response;\n\t\t\t}\n\t\t}\n\t).then( (data) => {\n\t\tconsole.log('Register your Domain in Route53Domains');\n\t\tvar params = {\n\t\t  AdminContact: parameters.route53.contacts.admin,\n\t\t  DomainName: domain,\n\t\t  DurationInYears: 1,\n\t\t  RegistrantContact: parameters.route53.contacts.registrant,\n\t\t  TechContact: parameters.route53.contacts.tech,\n\t\t  AutoRenew: true,\n\t\t  PrivacyProtectAdminContact: true,\n\t\t  PrivacyProtectRegistrantContact: true,\n\t\t  PrivacyProtectTechContact: true\n\t\t};\n\t\treturn route53domains.registerDomain(params).promise();\n\t\t//context.succeed(data. Availability);\n\t}).then( (data) => {\n\t\tconsole.log('Domain Registration is Succeeded');\n\t\tconsole.log(data);\n\t\treturn data;\n\t}).catch( (err) => {\n\t\tconsole.log('Fail to registration Domain.');\n\t\tconsole.log(err);\n\t\t//context.fail(err);\n\t\treturn err;\n\t}).then( (data) => {\n\t\tconsole.log('Create EC2 KeyPair');\n\n\t\tvar ec2 = new AWS.EC2({\n\t\t\tapiVersion: '2015-10-01',\n\t\t\taccessKeyId: config.accessKeyId,\n\t\t\tsecretAccessKey: config.secretAccessKey,\n\t\t\tregion: config.region\n\t\t});\n\n\t\tvar params = {\n\t\t  KeyName: \"keyfile-\" + parameters.accountNo,\n\t\t  DryRun: false\n\t\t};\n\t\treturn ec2.createKeyPair(params).promise();\n\t}).then( (data) => {\n\t\tconsole.log('Send EC2 Keypair to S3 Bucket');\n\t\tAWS.config.apiVersions = {\n\t\t  s3: '2006-03-01',\n\t\t  accessKeyId: config.accessKeyId,\n\t\t  secretAccessKey: config.secretAccessKey,\n\t\t};\n\n\t\tvar s3 = new AWS.S3();\n\t\tvar params = {\n\t\t  Bucket: config.KeyFileBucket,\n\t\t  Key: 'keypair/' + data.KeyName + '.pem',\n\t\t  ACL: 'bucket-owner-full-control',\n\t\t  Body: data.KeyMaterial,\n\t\t  ContentType: 'application/x-pem-file',\n\t\t  Expires: new Date()\n\t\t};\n\t\treturn s3.putObject(params).promise();\n\t}).then( (data) => {\n\t\tconsole.log('Create CloudFormation Stack');\n\t\tvar cloudformation = new AWS.CloudFormation({\n\t\t\tapiVersion: '2010-05-15',\n\t\t\taccessKeyId: config.accessKeyId,\n\t\t\tsecretAccessKey: config.secretAccessKey,\n\t\t\tregion: config.region\n\t\t});\n\n\t\tvar ParamKeyName = {\n\t\t\tParameterKey: 'KeyName',\n\t\t\tParameterValue: parameters.accountNo,\n\t\t\tUsePreviousValue: true\n\t\t};\n\t\tvar ParamKeyAccountNo = {\n\t\t\tParameterKey: 'AccountNo',\n\t\t\tParameterValue: parameters.accountNo,\n\t\t\tUsePreviousValue: true\n\t\t};\n\t\tvar ParamDomainName = {\n\t\t\tParameterKey: 'DomainName',\n\t\t\tParameterValue: parameters.route53.domain,\n\t\t\tUsePreviousValue: true\n\t\t};\n\t\tparameters.cloudformation.parameters.push(ParamKeyName);\n\t\tparameters.cloudformation.parameters.push(ParamKeyAccountNo);\n\t\tparameters.cloudformation.parameters.push(ParamDomainName);\n\t\tvar cfnParams = {\n\t\t\t  StackName: parameters.accountNo, /* required */\n\t\t\t  Capabilities: [\n\t\t\t\t'CAPABILITY_IAM',\n\t\t\t  ],\n\t\t\t  NotificationARNs: [\n\t\t\t\tconfig.CfnStatusArn\n\t\t\t  ],\n\t\t\t  Parameters: parameters.cloudformation.parameters,\n\t\t\t  OnFailure: 'DELETE',\n\t\t\t  TemplateURL: config.TemplateURL,\n\t\t\t  TimeoutInMinutes: 100\n\t\t};\n\t\treturn cloudformation.createStack(cfnParams).promise();\n\t}).then( (data) => {\n\t\tconsole.log('Succeeded to Create CloudFormation');\n\t\tconsole.log(data);\n\t}).catch( (err) => {\n\t\tconsole.log('Fail to create CloudFormation');\n\t\tconsole.log(err);\n\t\t//context.fail(err);\n\t});\n}\n```\n\n\n```config.js\nexports.getConf = function() {\n\treturn {\n\t\taccessKeyId: \"AWS_ACCESS_KEY\",\n\t\tsecretAccessKey: \"AWS_SECRET_KEY\",\n\t\tTemplateURL: 'CLOUDFORMATION_JSON_FILE_URL',\n\t\tregion: 'REGION',\n\t\tKeyFileBucket: 'S3_KEY_FILE_BUCKET_NAME',\n\t\tCfnStatusArn: 'SNS_ARN'\n\t};\n};\n```\n\n```parameters.js\nexports.getParams = function() {\n\tvar baseContact = {\n\t\tAddressLine1: 'ADDRESS_LINE_1',\n\t\tAddressLine2: 'ADDRESS_LINE_2',\n\t\tCity: 'CITY',\n\t\tContactType: 'COMPANY',\n\t\tCountryCode: 'JP',\n\t\tEmail: 'EMAIL@ADDRESS',\n\t\tFirstName: 'FIRST_NAME',\n\t\tLastName: 'LAST_NAME',\n\t\tOrganizationName: 'ORGANIZATION_NAME',\n\t\tZipCode: 'XXX-XXXX',\n\t\tPhoneNumber : '+81.XXXXXXXXX'\n\t};\n\treturn {\n\t\taccountNo: 'STACK_ID',\n\t\troute53: {\n\t\t\tdomain: 'DOMAIN',\n\t\t\tcontacts: {\n\t\t\t\tadmin: baseContact,\n\t\t\t\tregistrant: baseContact,\n\t\t\t\ttech: baseContact\n\t\t\t}\n\t\t},\n\t\tcloudformation: {\n\t\t\tparameters : [\n\t\t\t\t{\n\t\t\t\t\tParameterKey: 'SSHLocation4EC2',\n\t\t\t\t\tParameterValue: 'SSH_LOCATION',\n\t\t\t\t\tUsePreviousValue: true\n\t\t\t\t},{\n\t\t\t\t\tParameterKey: 'AvailabilityZone',\n\t\t\t\t\tParameterValue: 'AVAILABILITY_ZONE',\n\t\t\t\t\tUsePreviousValue: true\n\t\t\t\t},{\n\t\t\t\t\tParameterKey: 'InstanceType',\n\t\t\t\t\tParameterValue: 'INSTANCE_TYPE',\n\t\t\t\t\tUsePreviousValue: true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t};\n};\n```\n\n\u3053\u3053\u307e\u3067\u6e96\u5099\u3057\u3066index.js\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n- Route53 Domains\u3067\u30c9\u30e1\u30a4\u30f3\u304c\u53d6\u5f97\u53ef\u80fd\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n- \u53d6\u5f97\u53ef\u80fd\u306a\u3089Route53 Domains\u3067\u30c9\u30e1\u30a4\u30f3\u3092\u53d6\u5f97\u3059\u308b\n- \u53d6\u5f97\u306e\u6210\u5426\u306b\u95a2\u308f\u3089\u305aCloudFormation\u306e\u7acb\u3061\u4e0a\u3052\u306f\u5b9f\u884c\u3055\u308c\u308b\n- CloudFormation\u3067\u7acb\u3061\u4e0a\u3052\u308bEC2\u306e\u305f\u3081\u306bKeyPair\u3092\u751f\u6210\u3057\u3001S3\u30d0\u30b1\u30c3\u30c8\u306b\u4fdd\u5b58\u3059\u308b\n- parametes.js\u306e\u5024\u306a\u3069\u3092\u4f7f\u3063\u3066CloudFormation\u3092\u8d77\u52d5\u3059\u308b\n\n\u3092\u52dd\u624b\u306b\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\u53d6\u5f97\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u306e\u627f\u8a8d\u30e1\u30fc\u30eb\u78ba\u8a8d\u3084\u3001\u30c9\u30e1\u30a4\u30f3\u3068EC2\u306e\u63a5\u7d9a\u306a\u3069\u306f\u5225\u9014\u5bfe\u5fdc\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u8af8\u3005\u4e00\u767a\u3067\u3042\u304c\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u4ed5\u4e8b\u304c\u6357\u308b\u304b\u306a\u3068\u3061\u3087\u3063\u3068\u5922\u898b\u3066\u307e\u3059\u3002\n", "tags": ["CloudFormation", "route53domains", "aws-sdk"]}