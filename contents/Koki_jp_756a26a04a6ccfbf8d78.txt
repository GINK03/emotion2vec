{"context": " More than 1 year has passed since last update.\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u66f8\u304f\u3068\u3001\u666e\u901a\u306b\u6311\u3080\u3068\u3059\u3054\u3044\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306eFibonacci\u30af\u30e9\u30b9\uff09\n\u3061\u3087\u3063\u3068\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5165\u308c\u3066\u3084\u308b\u3060\u3051\u3067\u3001n = 139\u307e\u3067\u306f\u5272\u3068\u7d20\u65e9\u304f\u7b97\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306eFibonacciWithCache\u30af\u30e9\u30b9\uff09\n139\u4ee5\u4e0a\u306f\u3001decimal\u304coverflow\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u4e0a\u306fC#\u3067\u666e\u901a\u306b\u3084\u308b\u3068\u6c42\u3081\u3089\u308c\u307e\u305b\u3093\u3002\n\nProgram.cs\nnamespace FibonacciOnConsole\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var fib = new FibonacciCUI();\n            fib.Calc(new FibonacciWithCache());\n        }\n    }\n}\n\n\n\n\nFibonacciCUI.cs\nusing System;\nusing System.Diagnostics;\n\nnamespace FibonacciOnConsole\n{\n    public class FibonacciCUI\n    {\n        public void Calc(IFibonacciStrategy strategy)\n        {\n            ConsoleKeyInfo cki;\n            Console.TreatControlCAsInput = true;\n            do\n            {\n                Console.WriteLine(\"Please input fibonacci number.\");\n                Console.WriteLine(\"Press ESC key if you want to finish this console.\");\n                var inputtedString = Console.ReadLine();\n\n                var inputtedNum = default(decimal);\n                if (decimal.TryParse(inputtedString, out inputtedNum))\n                {\n                    inputtedNum = (inputtedNum >= 139) ? 139 : inputtedNum;\n\n                    Console.WriteLine(\"Begin process.\");\n                    for (decimal i = 0; i < inputtedNum; i++)\n                    {\n                        var sw = new Stopwatch();\n                        sw.Start();\n                        var ret = strategy.Calc(i);\n                        sw.Stop();\n                        var ts = sw.Elapsed;\n                        Console.WriteLine(string.Format(\"{0, 4} Fibonacci={1, 30} Time:{2}\", i, ret, ts));\n                    }\n                    Console.WriteLine(\"End process.\");\n                }\n                else\n                {\n                    Console.WriteLine(\"Please input number.\");\n                }\n\n                cki = Console.ReadKey();\n                Console.Clear();\n\n            } while (cki.Key != ConsoleKey.Escape);\n        }\n    }\n}\n\n\n\nFibonacci.cs\nusing System.Collections.Generic;\n\nnamespace FibonacciOnConsole\n{\n\n    public interface IFibonacciStrategy\n    {\n        decimal Calc(decimal i);\n    }\n\n    public class Fibonacci : IFibonacciStrategy\n    {\n        public decimal Calc(decimal i)\n        {\n            if( i == 0 )\n            {\n                return 0;\n            }\n            if( i == 1 )\n            {\n                return 1;\n            }\n            return Calc(i - 1) + Calc(i - 2);\n        }\n\n\n    }\n\n    public class FibonacciWithCache : IFibonacciStrategy\n    {\n        Dictionary<decimal, decimal> _cache = new Dictionary<decimal, decimal>();\n\n        public decimal Calc(decimal i)\n        {\n            if (i == 0)\n            {\n                return 0;\n            }\n            if (i == 1)\n            {\n                return 1;\n            }\n            decimal cachedValue = 0;\n            if (_cache.TryGetValue(i, out cachedValue))\n            {\n                return cachedValue;\n            }\n\n            var ret = Calc(i - 1) + Calc(i - 2);\n            _cache.Add(i, ret);\n            return ret;\n        }\n\n    }\n}\n\n\n\n\u518d\u5e30\u306e\u5834\u5408\u3001\u51e6\u7406\u6642\u9593\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u3059\u306d\u3002\nGitHub\u306b\u3082\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/Koki-Shimizu/Fibonacci.git\n\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u66f8\u304f\u3068\u3001\u666e\u901a\u306b\u6311\u3080\u3068\u3059\u3054\u3044\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306eFibonacci\u30af\u30e9\u30b9\uff09\n\n\u3061\u3087\u3063\u3068\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5165\u308c\u3066\u3084\u308b\u3060\u3051\u3067\u3001n = 139\u307e\u3067\u306f\u5272\u3068\u7d20\u65e9\u304f\u7b97\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u4e0b\u8a18\u306eFibonacciWithCache\u30af\u30e9\u30b9\uff09\n139\u4ee5\u4e0a\u306f\u3001decimal\u304coverflow\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u4e0a\u306fC#\u3067\u666e\u901a\u306b\u3084\u308b\u3068\u6c42\u3081\u3089\u308c\u307e\u305b\u3093\u3002\n\n```lang:Program.cs\nnamespace FibonacciOnConsole\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var fib = new FibonacciCUI();\n            fib.Calc(new FibonacciWithCache());\n        }\n    }\n}\n\n```\n\n```lang:FibonacciCUI.cs\nusing System;\nusing System.Diagnostics;\n\nnamespace FibonacciOnConsole\n{\n    public class FibonacciCUI\n    {\n        public void Calc(IFibonacciStrategy strategy)\n        {\n            ConsoleKeyInfo cki;\n            Console.TreatControlCAsInput = true;\n            do\n            {\n                Console.WriteLine(\"Please input fibonacci number.\");\n                Console.WriteLine(\"Press ESC key if you want to finish this console.\");\n                var inputtedString = Console.ReadLine();\n\n                var inputtedNum = default(decimal);\n                if (decimal.TryParse(inputtedString, out inputtedNum))\n                {\n                    inputtedNum = (inputtedNum >= 139) ? 139 : inputtedNum;\n\n                    Console.WriteLine(\"Begin process.\");\n                    for (decimal i = 0; i < inputtedNum; i++)\n                    {\n                        var sw = new Stopwatch();\n                        sw.Start();\n                        var ret = strategy.Calc(i);\n                        sw.Stop();\n                        var ts = sw.Elapsed;\n                        Console.WriteLine(string.Format(\"{0, 4} Fibonacci={1, 30} Time:{2}\", i, ret, ts));\n                    }\n                    Console.WriteLine(\"End process.\");\n                }\n                else\n                {\n                    Console.WriteLine(\"Please input number.\");\n                }\n\n                cki = Console.ReadKey();\n                Console.Clear();\n\n            } while (cki.Key != ConsoleKey.Escape);\n        }\n    }\n}\n```\n\n```lang:Fibonacci.cs\nusing System.Collections.Generic;\n\nnamespace FibonacciOnConsole\n{\n\n    public interface IFibonacciStrategy\n    {\n        decimal Calc(decimal i);\n    }\n\n    public class Fibonacci : IFibonacciStrategy\n    {\n        public decimal Calc(decimal i)\n        {\n            if( i == 0 )\n            {\n                return 0;\n            }\n            if( i == 1 )\n            {\n                return 1;\n            }\n            return Calc(i - 1) + Calc(i - 2);\n        }\n\n        \n    }\n\n    public class FibonacciWithCache : IFibonacciStrategy\n    {\n        Dictionary<decimal, decimal> _cache = new Dictionary<decimal, decimal>();\n\n        public decimal Calc(decimal i)\n        {\n            if (i == 0)\n            {\n                return 0;\n            }\n            if (i == 1)\n            {\n                return 1;\n            }\n            decimal cachedValue = 0;\n            if (_cache.TryGetValue(i, out cachedValue))\n            {\n                return cachedValue;\n            }\n\n            var ret = Calc(i - 1) + Calc(i - 2);\n            _cache.Add(i, ret);\n            return ret;\n        }\n\n    }\n}\n\n```\n\n\u518d\u5e30\u306e\u5834\u5408\u3001\u51e6\u7406\u6642\u9593\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u3059\u306d\u3002\nGitHub\u306b\u3082\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/Koki-Shimizu/Fibonacci.git\n", "tags": ["\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217", "C#", "\u518d\u5e30", "\u30ad\u30e3\u30c3\u30b7\u30e5"]}