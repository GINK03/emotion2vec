{"context": "Core Bluetooth \u306e Swift \u30b3\u30fc\u30c9 + Objective-C \u306e\u304a\u307e\u3051\u4ed8\u304d\u30b9\u30cb\u30da\u30c3\u30c8\u96c6\u3067\u3059\u3002\nCore Bluetooth \u306e\u5404\u7a2e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u5b9f\u884c\u30ad\u30e5\u30fc\u3092\u6307\u5b9a\u3067\u304d\u305f\u308a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u305f\u308a\u3068\u304b\u8272\u3005\u3042\u308a\u307e\u3059\u304c\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\u305f\u3081\u3053\u3053\u3067\u306f\u7701\u3051\u308b\u3082\u306e\u306f\u3067\u304d\u308b\u3060\u3051\u7701\u304f\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u66f4\u65b0\u30e1\u30e2\n\n2015.10.12 Swift 2 \u5bfe\u5fdc\n\n\n\uff08\u672c\u984c\u306b\u5165\u308b\u524d\u306b\u30fb\u30fb\u30fb\uff09\n\u3053\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u96c6\u306f\u3001\u4e0b\u8a18\u66f8\u7c4d\u306e\u57f7\u7b46\u306b\u3042\u305f\u308a\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3059\u3002\u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u5b9f\u88c5\u306e\u57fa\u790e\u7684\u306a\u3068\u3053\u308d\u306f\u3001ObjC\u30fbSwift\u4e21\u65b9\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002 \n\n\n\n\niOS\u00d7BLE Core Bluetooth\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0posted with amazlet at 15.03.11\n\n\u5824 \u4fee\u4e00 \u677e\u6751 \u793c\u592e \u30bd\u30b7\u30e0 \u58f2\u308a\u4e0a\u3052\u30e9\u30f3\u30ad\u30f3\u30b0: 1,106\n\nAmazon.co.jp\u3067\u8a73\u7d30\u3092\u898b\u308b\n\n\n\n\u672c\u8a18\u4e8b\u306f\u30b3\u30fc\u30c9\u3060\u3051\u3067\u3059\u304c\u3001\u66f8\u7c4d\u5185\u3067\u306f\u304b\u306a\u308a\u4e01\u5be7\u306b\u89e3\u8aac\u3057\u3066\u3042\u308a\u307e\u3059\uff01\niOS x BLE \u3068\u3044\u3046\u30cb\u30c3\u30c1\u306a\u5185\u5bb9\u3067480\u30da\u30fc\u30b8\uff01 \u3069\u3046\u305e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\n\u6280\u8853\u66f8\u300eiOS\u00d7BLE Core Bluetooth \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\u306e\u7d39\u4ecb - Qiita\n\n\u66f8\u7c4d\u306e\u8a73\u3057\u3044\u7d39\u4ecb\n\n\n\nBLE\u3068\u79c1 - Over&Out \u305d\u306e\u5f8c\n\n\u66f8\u7c4d\u3092\u66f8\u304f\u307e\u3067\u306e\u7d4c\u7def\n\n\n\n\n\u30a4\u30f3\u30dd\u30fc\u30c8\n\u4f55\u306f\u3068\u3082\u3042\u308c\u307e\u305a\u306f import \u304b\u3089\u3002\n\nobjc\n@import CoreBluetooth;\n\n\n\nswift\nimport CoreBluetooth\n\n\n\n\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u7de8\n\n\u30b9\u30ad\u30e3\u30f3\u3001\u63a5\u7d9a\n\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u521d\u671f\u5316\u3057\u3066\u3001\u30b9\u30ad\u30e3\u30f3\u3001\u767a\u898b\u3057\u305f\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306b\u63a5\u7d9a\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3002\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u6e96\u62e0\u306e\u5ba3\u8a00\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u5b9a\u7fa9\n\nobjc\n@interface SomeClass () <CBCentralManagerDelegate>\n@property (nonatomic, strong) CBCentralManager *centralManager;\n@property (nonatomic, strong) CBPeripheral *peripheral;\n@end\n\n\n\nswift\nclass SomeClass: SomeSuperclass, CBCentralManagerDelegate {\n    var centralManager: CBCentralManager!\n    var peripheral: CBPeripheral!\n\n\n\nCBCentralManager\u3092\u521d\u671f\u5316\u3059\u308b\n\nobjc\nself.centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];\n\n\n\nswift\ncentralManager = CBCentralManager(delegate: self, queue: nil)\n\n\n\n\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u72b6\u614b\u5909\u5316\u3092\u53d6\u5f97\u3059\u308b\n\u203b\u3053\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306f @required \u306a\u306e\u3067\u5fc5\u9808\u3002\n\nobjc\n- (void)centralManagerDidUpdateState:(CBCentralManager *)central {\n\n    NSLog(@\"state:%ld\", (long)central.state);\n}\n\n\n\nswift\nfunc centralManagerDidUpdateState(central: CBCentralManager) {\n\n    print(\"state: \\(central.state)\")\n}\n\n\n\n\u30b9\u30ad\u30e3\u30f3\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[self.centralManager scanForPeripheralsWithServices:nil options:nil];\n\n\n\nswift\ncentralManager.scanForPeripheralsWithServices(nil, options: nil)\n\n\n\n\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n\nobjc\n- (void)   centralManager:(CBCentralManager *)central\n    didDiscoverPeripheral:(CBPeripheral *)peripheral\n        advertisementData:(NSDictionary *)advertisementData\n                     RSSI:(NSNumber *)RSSI\n{\n    NSLog(@\"peripheral\uff1a%@\", peripheral);\n}\n\n\n\nswift\nfunc centralManager(central: CBCentralManager,\n    didDiscoverPeripheral peripheral: CBPeripheral,\n    advertisementData: [String : AnyObject],\n    RSSI: NSNumber!)\n{\n    print(\"peripheral: \\(peripheral)\")\n}\n\n\n\n\u30b9\u30ad\u30e3\u30f3\u3092\u505c\u6b62\u3059\u308b\n\nobjc\n[self.centralManager stopScan];\n\n\n\nswift\ncentralManager.stopScan()\n\n\n\n\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[self.centralManager connectPeripheral:peripheral options:nil];\n\n\n\n\nswift\ncentralManager.connectPeripheral(peripheral, options: nil)\n\n\n\n\u63a5\u7d9a\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u6210\u529f\u3059\u308b\u3068\u547c\u3070\u308c\u308b\n- (void)  centralManager:(CBCentralManager *)central\n    didConnectPeripheral:(CBPeripheral *)peripheral\n{\n    NSLog(@\"connected!\");\n}\n\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u5931\u6557\u3059\u308b\u3068\u547c\u3070\u308c\u308b\n- (void)        centralManager:(CBCentralManager *)central\n    didFailToConnectPeripheral:(CBPeripheral *)peripheral\n                         error:(NSError *)error\n{\n    NSLog(@\"failed...\");\n}\n\n\n\nswift\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u6210\u529f\u3059\u308b\u3068\u547c\u3070\u308c\u308b\nfunc centralManager(central: CBCentralManager,\n    didConnectPeripheral peripheral: CBPeripheral)\n{\n    print(\"connected!\")\n}\n\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u5931\u6557\u3059\u308b\u3068\u547c\u3070\u308c\u308b\nfunc centralManager(central: CBCentralManager,\n    didFailToConnectPeripheral peripheral: CBPeripheral,\n    error: NSError?)\n{\n    print(\"failed...\")\n}\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\n\u63a5\u7d9a\u3057\u305f\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u30b5\u30fc\u30d3\u30b9\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u63a2\u7d22\u3059\u308b\n\nCBPeripheralDelegate \u30d7\u30ed\u30c8\u30b3\u30eb\u3078\u306e\u6e96\u62e0\u3092\u5ba3\u8a00\u3059\u308b\n\nobjc\n@interface SomeClass () <CBCentralManagerDelegate, CBPeripheralDelegate>\n\n\n\nswift\nclass SomeClass: SomeSuperclass, CBCentralManagerDelegate, CBPeripheralDelegate {\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u63a2\u7d22\u3092\u958b\u59cb\u3059\u308b\n\nobjc\nperipheral.delegate = self;\n[peripheral discoverServices:nil];\n\n\n\nswift\nperipheral.delegate = self\nperipheral.discoverServices(nil)\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u63a2\u7d22\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n\nobjc\n- (void)     peripheral:(CBPeripheral *)peripheral\n    didDiscoverServices:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"error: %@\", error);\n        return;\n    }\n\n    NSArray *services = peripheral.services;\n    NSLog(@\"Found %lu services! :%@\", (unsigned long)services.count, services);\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral, didDiscoverServices error: NSError?) {\n\n    if let error = error {\n        print(\"error: \\(error)\")\n        return\n    }\n\n    let services = peripheral.services\n    print(\"Found \\(services.count) services! :\\(services)\")\n}\n\n\n\n\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[peripheral discoverCharacteristics:nil forService:service];\n\n\n\nswift\nperipheral.discoverCharacteristics(nil, forService: service)\n\n\n\n\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)                      peripheral:(CBPeripheral *)peripheral\n    didDiscoverCharacteristicsForService:(CBService *)service\n                                   error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"error: %@\", error);\n        return;\n    }\n\n    NSArray *characteristics = service.characteristics;\n    NSLog(@\"Found %lu characteristics! : %@\", (unsigned long)characteristics.count, characteristics);\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral,\n    didDiscoverCharacteristicsForService service: CBService,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"error: \\(error)\")\n        return\n    }\n\n    let characteristics = service.characteristics\n    print(\"Found \\(characteristics.count) characteristics! : \\(characteristics)\")\n}\n\n\n\nRead\n\nRead\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[peripheral readValueForCharacteristic:characteristic];\n\n\n\nswift\nperipheral.readValueForCharacteristic(characteristic)\n\n\n\nRead\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)                 peripheral:(CBPeripheral *)peripheral\n    didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic\n                              error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Failed... error: %@\", error);\n        return;\n    }\n\n    NSLog(@\"Succeeded\uff01 service uuid:%@, characteristice uuid:%@, value%@\",\n          characteristic.service.UUID, characteristic.UUID, characteristic.value);\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"Failed... error: \\(error)\")\n        return\n    }\n\n    print(\"Succeeded! service uuid: \\(characteristic.service.UUID), characteristic uuid: \\(characteristic.UUID), value: \\(characteristic.value)\")\n}\n\n\n\nWrite\n\n\u30c7\u30fc\u30bf\u66f8\u304d\u8fbc\u307f\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[peripheral writeValue:data\n     forCharacteristic:characteristic\n                  type:CBCharacteristicWriteWithResponse];\n\n\n\nswift\nperipheral.writeValue(data, forCharacteristic: characteristic, type: CBCharacteristicWriteType.WithResponse)\n\n\n\nNSData \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u4f8b\u305d\u306e1\uff1a\u6587\u5b57\u5217\u304b\u3089\n\nobjc\nNSData *data = [@\"hello\" dataUsingEncoding:NSUTF8StringEncoding];\n\n\n\nswift\nlet data = \"hello\".dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion:true)\n\n\n\nNSData \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u4f8b\u305d\u306e2\uff1a1\u30d0\u30a4\u30c8\u306eunsigned\u306a\u6574\u6570\u5024\n\nobjc\nunsigned char value = 0x01;\nNSData *data = [[NSData alloc] initWithBytes:&value length:1];\n\n\n\nswift\nvar value: CUnsignedChar = 0x01\nlet data = NSData(bytes: &value, length: 1)\n\n\n\n\u30c7\u30fc\u30bf\u66f8\u304d\u8fbc\u307f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)                peripheral:(CBPeripheral *)peripheral\n    didWriteValueForCharacteristic:(CBCharacteristic *)characteristic\n                             error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Write\u5931\u6557...error:%@\", error);\n        return;\n    }\n\n    NSLog(@\"Write\u6210\u529f\uff01\");\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral,\n    didWriteValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"Write\u5931\u6557...error: \\(error)\")\n        return\n    }\n\n    print(\"Write\u6210\u529f\uff01\")\n}\n\n\n\nNotify\n\n\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u958b\u59cb\u3059\u308b\n\nobjc\n[peripheral setNotifyValue:YES\n         forCharacteristic:characteristic];\n\n\n\nswift\nperipheral.setNotifyValue(true, forCharacteristic: characteristic)\n\n\n\n\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u505c\u6b62\u3059\u308b\n\nobjc\n[peripheral setNotifyValue:NO\n         forCharacteristic:characteristic];\n\n\n\nswift\nperipheral.setNotifyValue(false, forCharacteristic: characteristic)\n\n\n\n\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u53d7\u3051\u53d6\u308a\u958b\u59cb\uff0f\u505c\u6b62\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)                             peripheral:(CBPeripheral *)peripheral\n    didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic\n                                          error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Notify\u72b6\u614b\u66f4\u65b0\u5931\u6557...error:%@\", error);\n    }\n    else {\n        NSLog(@\"Notify\u72b6\u614b\u66f4\u65b0\u6210\u529f\uff01 isNotifying:%d\", characteristic.isNotifying);\n    }\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateNotificationStateForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {        \n        print(\"Notify\u72b6\u614b\u66f4\u65b0\u5931\u6557...error: \\(error)\")\n    } else {\n        print(\"Notify\u72b6\u614b\u66f4\u65b0\u6210\u529f\uff01 isNotifying: \\(characteristic.isNotifying)\")\n    }\n}\n\n\n\n\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308b\n\nobjc\n- (void)                 peripheral:(CBPeripheral *)peripheral\n    didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic\n                              error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u30a8\u30e9\u30fc:%@\", error);\n        return;\n    }\n\n    NSLog(@\"\u30c7\u30fc\u30bf\u66f4\u65b0\uff01 characteristic UUID:%@, value:%@\",\n          characteristic.UUID, characteristic.value);\n}\n\n\n\nswift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u30a8\u30e9\u30fc: \\(error)\")\n        return\n    }\n\n    print(\"\u30c7\u30fc\u30bf\u66f4\u65b0\uff01 characteristic UUID: \\(characteristic.UUID), value: \\(characteristic.value)\")\n}\n\n\n\n\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7de8\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u6e96\u62e0\u306e\u5ba3\u8a00\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u5b9a\u7fa9\n\nobjc\n@interface SomeClass () <CBPeripheralManagerDelegate>\n@property (nonatomic, strong) CBPeripheralManager *peripheralManager;\n@end\n\n\n\nswift\nclass SomeClass: SomeSuperclass, CBPeripheralManagerDelegate {\n    var peripheralManager: CBPeripheralManager!\n\n\n\nCBPeripheralManager \u3092\u521d\u671f\u5316\u3059\u308b\n\nobjc\nself.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self\n                                                                 queue:nil\n                                                               options:nil];\n\n\n\nswift\nperipheralManager = CBPeripheralManager(delegate: self, queue: nil, options: nil)\n\n\n\n\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u72b6\u614b\u5909\u5316\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral {\n\n    NSLog(@\"state:%ld\", (long)peripheral.state);\n}\n\n\n\nswift\nfunc peripheralManagerDidUpdateState(peripheral: CBPeripheralManager) {\n\n    print(\"state: \\(peripheral.state)\")\n}\n\n\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u958b\u59cb\u3059\u308b\n\nobjc\nNSDictionary *advertisementData = @{CBAdvertisementDataLocalNameKey: @\"Test Device\"};\n[self.peripheralManager startAdvertising:advertisementData];\n\n\n\nswift\nlet advertisementData = [CBAdvertisementDataLocalNameKey: \"Test Device\"]\nperipheralManager.startAdvertising(advertisementData)\n\n\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u958b\u59cb\u51e6\u7406\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral\n                                       error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Failed... error:%@\", error);\n        return;\n    }\n\n    NSLog(@\"Succeeded!\");\n}\n\n\n\nswift\nfunc peripheralManagerDidStartAdvertising(peripheral: CBPeripheralManager, error: NSError?) {\n\n    if let error = error {\n        print(\"Failed... error: \\(error)\")\n        return\n    }\n\n    print(\"Succeeded!\")\n}\n\n\n\n\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62\u3059\u308b\n\nobjc\n[self.peripheralManager stopAdvertising];\n\n\n\nswift\nperipheralManager.stopAdvertising()\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\n\n\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\nobjc\nCBUUID *serviceUUID = [CBUUID UUIDWithString:kServiceUUID];\nCBMutableService *service = [[CBMutableService alloc] initWithType:serviceUUID\n                                                           primary:YES];\n\n\n\nswift\nlet serviceUUID = CBUUID(string: kServiceUUID)\nlet service = CBMutableService(type: serviceUUID, primary: true)\n\n\n\n\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\n\nobjc\nCBUUID *characteristicUUID = [CBUUID UUIDWithString:kCharacteristicUUID];\n\nCBCharacteristicProperties properties = (\n                                         CBCharacteristicPropertyNotify |\n                                         CBCharacteristicPropertyRead |\n                                         CBCharacteristicPropertyWrite\n                                         );\nCBAttributePermissions permissions = (CBAttributePermissionsReadable | CBAttributePermissionsWriteable);\nCBMutableCharacteristic *characteristic = [[CBMutableCharacteristic alloc] initWithType:characteristicUUID\n                                                                             properties:properties\n                                                                                  value:nil\n                                                                            permissions:permissions];\n\n\n\nswift\nlet characteristicUUID = CBUUID(string: kCharacteristicUUID)\nlet properties: CBCharacteristicProperties = [.Notify, .Read, .Write]\nlet permissions: CBAttributePermissions = [.Readable, .Writeable]\nlet characteristic = CBMutableCharacteristic(type: characteristicUUID, properties: properties,\n    value: nil, permissions: permissions)\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u306b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u8ffd\u52a0\n\nobjc\nservice.characteristics = @[characteristic];\n\n\n\nswift\nservice.characteristics = [characteristic]\n\n\n\n\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u8ffd\u52a0\n\nobjc\n[self.peripheralManager addService:service];\n\n\n\nswift\nperipheralManager.addService(service)\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nobjc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n            didAddService:(CBService *)service\n                    error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u5931\u6557\uff01 error:%@\", error);\n        return;\n    }\n\n    NSLog(@\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u6210\u529f\uff01 service:%@\", service);\n}\n\n\n\nswift\nfunc peripheralManager(peripheral: CBPeripheralManager, didAddService service: CBService, error: NSError?) {\n\n    if let error = error {\n        print(\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u5931\u6557\uff01 error: \\(error)\")\n        return\n    }\n\n    print(\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u6210\u529f\uff01\")\n}\n\n\n\nRead\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n\nobjc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n    didReceiveReadRequest:(CBATTRequest *)request\n{\n    if ([request.characteristic.UUID isEqual:self.characteristic.UUID]) {\n\n        // CBMutableCharacteristic\u306evalue\u3092CBATTRequest\u306evalue\u306b\u30bb\u30c3\u30c8\n        request.value = self.characteristic.value;\n\n        // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n        [self.peripheralManager respondToRequest:request\n                                      withResult:CBATTErrorSuccess];\n    }\n}\n\n\n\nswift\nfunc peripheralManager(peripheral: CBPeripheralManager, didReceiveReadRequest request: CBATTRequest) {\n\n    if request.characteristic.UUID.isEqual(characteristic.UUID) {\n\n        // CBMutableCharacteristic\u306evalue\u3092CBATTRequest\u306evalue\u306b\u30bb\u30c3\u30c8\n        request.value = characteristic.value\n\n        // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n        peripheralManager.respondToRequest(request, withResult: .Success)\n    }\n}\n\n\n\nWrite\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n\nobjc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral didReceiveWriteRequests:(NSArray *)requests {\n\n    for (CBATTRequest *aRequest in requests) {\n\n        if ([aRequest.characteristic.UUID isEqual:self.characteristic.UUID]) {\n\n            // CBCharacteristic\u306evalue\u306b\u3001CBATTRequest\u306evalue\u3092\u30bb\u30c3\u30c8\n            self.characteristic.value = aRequest.value;\n        }\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n    [self.peripheralManager respondToRequest:requests[0]\n                                  withResult:CBATTErrorSuccess];\n}\n\n\n\nswift\nfunc peripheralManager(peripheral: CBPeripheralManager, didReceiveWriteRequests requests: [CBATTRequest]) {\n\n    for request in requests {\n\n        if request.characteristic.UUID.isEqual(characteristic.UUID) {\n\n            // CBCharacteristic\u306evalue\u306b\u3001CBATTRequest\u306evalue\u3092\u30bb\u30c3\u30c8\n            characteristic.value = request.value\n        }\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n    peripheralManager.respondToRequest(requests[0], withResult: .Success)\n}\n\n\n\nNotification / Indication \u3078\u306e\u5fdc\u7b54\n\nSubscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n\nobjc\n- (void)       peripheralManager:(CBPeripheralManager *)peripheral\n                         central:(CBCentral *)central\n    didSubscribeToCharacteristic:(CBCharacteristic *)characteristic\n{\n    NSLog(@\"Subscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\");\n    NSLog(@\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: %@\", self.characteristic.subscribedCentrals);\n}\n\n\n\nswift\nfunc peripheralManager(peripheral: CBPeripheralManager, central: CBCentral, didSubscribeToCharacteristic characteristic: CBCharacteristic)\n{\n    print(\"Subscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\")\n    print(\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: \\(characteristic.subscribedCentrals)\")\n}\n\n\n\nUnsubscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n\nobjc\n- (void)           peripheralManager:(CBPeripheralManager *)peripheral\n                             central:(CBCentral *)central\n    didUnsubscribeFromCharacteristic:(CBCharacteristic *)characteristic\n{\n    NSLog(@\"Unsubscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\");\n    NSLog(@\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: %@\", self.characteristic.subscribedCentrals);\n}\n\n\n\nswift\nfunc peripheralManager(peripheral: CBPeripheralManager, central: CBCentral, didUnsubscribeFromCharacteristic characteristic: CBCharacteristic)\n{\n    print(\"Notify\u505c\u6b62\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\")\n    print(\"Notify\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: \\(characteristic.subscribedCentrals)\")\n}\n\n\n\n\u5024\u3092\u66f4\u65b0\u3057\u3001\u901a\u77e5\u3059\u308b\n\nobjc\nself.characteristic.value = data;\n\n[self.peripheralManager updateValue:data\n                  forCharacteristic:self.characteristic\n               onSubscribedCentrals:nil];\n\n\n\nswift\ncharacteristic.value = data\n\nperipheralManager.updateValue(data, forCharacteristic: characteristic, onSubscribedCentrals: nil)\n\n\n**Core Bluetooth \u306e Swift \u30b3\u30fc\u30c9 + Objective-C \u306e\u304a\u307e\u3051\u4ed8\u304d\u30b9\u30cb\u30da\u30c3\u30c8\u96c6**\u3067\u3059\u3002\n\nCore Bluetooth \u306e\u5404\u7a2e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u5b9f\u884c\u30ad\u30e5\u30fc\u3092\u6307\u5b9a\u3067\u304d\u305f\u308a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3067\u304d\u305f\u308a\u3068\u304b\u8272\u3005\u3042\u308a\u307e\u3059\u304c\u3001**\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\u305f\u3081\u3053\u3053\u3067\u306f\u7701\u3051\u308b\u3082\u306e\u306f\u3067\u304d\u308b\u3060\u3051\u7701\u304f**\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u66f4\u65b0\u30e1\u30e2\n\n- 2015.10.12 Swift 2 \u5bfe\u5fdc\n\n\n##\uff08\u672c\u984c\u306b\u5165\u308b\u524d\u306b\u30fb\u30fb\u30fb\uff09\n\n\u3053\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u96c6\u306f\u3001\u4e0b\u8a18\u66f8\u7c4d\u306e\u57f7\u7b46\u306b\u3042\u305f\u308a\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3059\u3002\u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u5b9f\u88c5\u306e\u57fa\u790e\u7684\u306a\u3068\u3053\u308d\u306f\u3001**ObjC\u30fbSwift\u4e21\u65b9**\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002 \n\n<div class=\"amazlet-box\" style=\"margin-bottom:0px;\"><div class=\"amazlet-image\" style=\"float:left;margin:0px 12px 1px 0px;\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4883379736/22301-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\"><img src=\"http://ecx.images-amazon.com/images/I/51XxjzdT%2BKL._SL160_.jpg\" alt=\"iOS\u00d7BLE Core Bluetooth\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\" style=\"border: none;\" /></a></div><div class=\"amazlet-info\" style=\"line-height:120%; margin-bottom: 10px\"><div class=\"amazlet-name\" style=\"margin-bottom:10px;line-height:120%\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4883379736/22301-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\">iOS\u00d7BLE Core Bluetooth\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</a><div class=\"amazlet-powered-date\" style=\"font-size:80%;margin-top:5px;line-height:120%\">posted with <a href=\"http://www.amazlet.com/\" title=\"amazlet\" target=\"_blank\">amazlet</a> at 15.03.11</div></div><div class=\"amazlet-detail\">\u5824 \u4fee\u4e00 \u677e\u6751 \u793c\u592e <br />\u30bd\u30b7\u30e0 <br />\u58f2\u308a\u4e0a\u3052\u30e9\u30f3\u30ad\u30f3\u30b0: 1,106<br /></div><div class=\"amazlet-sub-info\" style=\"float: left;\"><div class=\"amazlet-link\" style=\"margin-top: 5px\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4883379736/22301-22/ref=nosim/\" name=\"amazletlink\" target=\"_blank\">Amazon.co.jp\u3067\u8a73\u7d30\u3092\u898b\u308b</a></div></div></div><div class=\"amazlet-footer\" style=\"clear: left\"></div></div>\n\n**\u672c\u8a18\u4e8b\u306f\u30b3\u30fc\u30c9\u3060\u3051\u3067\u3059\u304c\u3001\u66f8\u7c4d\u5185\u3067\u306f\u304b\u306a\u308a\u4e01\u5be7\u306b\u89e3\u8aac**\u3057\u3066\u3042\u308a\u307e\u3059\uff01\n\n**iOS x BLE \u3068\u3044\u3046\u30cb\u30c3\u30c1\u306a\u5185\u5bb9\u3067480\u30da\u30fc\u30b8\uff01** \u3069\u3046\u305e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n- [\u6280\u8853\u66f8\u300eiOS\u00d7BLE Core Bluetooth \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\u306e\u7d39\u4ecb - Qiita](http://qiita.com/shu223/items/e1c91f176a48475cd2ad)\n  - \u66f8\u7c4d\u306e\u8a73\u3057\u3044\u7d39\u4ecb\n- <a href=\"http://d.hatena.ne.jp/shu223/20150324/1427086780\" >BLE\u3068\u79c1 - Over&Out \u305d\u306e\u5f8c</a>\n  - \u66f8\u7c4d\u3092\u66f8\u304f\u307e\u3067\u306e\u7d4c\u7def\n\n##\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u4f55\u306f\u3068\u3082\u3042\u308c\u307e\u305a\u306f import \u304b\u3089\u3002\n\n```objc:objc\n@import CoreBluetooth;\n```\n\n```swift:swift\nimport CoreBluetooth\n```\n\n#\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u7de8\n\n##\u30b9\u30ad\u30e3\u30f3\u3001\u63a5\u7d9a\n\n\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u521d\u671f\u5316\u3057\u3066\u3001\u30b9\u30ad\u30e3\u30f3\u3001\u767a\u898b\u3057\u305f\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306b\u63a5\u7d9a\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3002\n\n###\u30d7\u30ed\u30c8\u30b3\u30eb\u6e96\u62e0\u306e\u5ba3\u8a00\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u5b9a\u7fa9\n\n```objc:objc\n@interface SomeClass () <CBCentralManagerDelegate>\n@property (nonatomic, strong) CBCentralManager *centralManager;\n@property (nonatomic, strong) CBPeripheral *peripheral;\n@end\n```\n\n```swift:swift\nclass SomeClass: SomeSuperclass, CBCentralManagerDelegate {\n    var centralManager: CBCentralManager!\n    var peripheral: CBPeripheral!\n```\n\n###CBCentralManager\u3092\u521d\u671f\u5316\u3059\u308b\n\n```objc:objc\nself.centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];\n```\n\n```swift:swift\ncentralManager = CBCentralManager(delegate: self, queue: nil)\n```\n\n###\u30bb\u30f3\u30c8\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u72b6\u614b\u5909\u5316\u3092\u53d6\u5f97\u3059\u308b\n\n\u203b\u3053\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u306f `@required` \u306a\u306e\u3067\u5fc5\u9808\u3002\n\n```objc:objc\n- (void)centralManagerDidUpdateState:(CBCentralManager *)central {\n\n    NSLog(@\"state:%ld\", (long)central.state);\n}\n```\n\n```swift:swift\nfunc centralManagerDidUpdateState(central: CBCentralManager) {\n\n    print(\"state: \\(central.state)\")\n}\n```\n\n###\u30b9\u30ad\u30e3\u30f3\u3092\u958b\u59cb\u3059\u308b\n\n\n```objc:objc\n[self.centralManager scanForPeripheralsWithServices:nil options:nil];\n```\n\n```swift:swift\ncentralManager.scanForPeripheralsWithServices(nil, options: nil)\n```\n\n###\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n\n```objc:objc\n- (void)   centralManager:(CBCentralManager *)central\n    didDiscoverPeripheral:(CBPeripheral *)peripheral\n        advertisementData:(NSDictionary *)advertisementData\n                     RSSI:(NSNumber *)RSSI\n{\n    NSLog(@\"peripheral\uff1a%@\", peripheral);\n}\n```\n\n```swift:swift\nfunc centralManager(central: CBCentralManager,\n    didDiscoverPeripheral peripheral: CBPeripheral,\n    advertisementData: [String : AnyObject],\n    RSSI: NSNumber!)\n{\n    print(\"peripheral: \\(peripheral)\")\n}\n```\n\n###\u30b9\u30ad\u30e3\u30f3\u3092\u505c\u6b62\u3059\u308b\n\n```objc:objc\n[self.centralManager stopScan];\n```\n\n```swift:swift\ncentralManager.stopScan()\n```\n\n###\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\n[self.centralManager connectPeripheral:peripheral options:nil];\n\n```\n\n```swift:swift\ncentralManager.connectPeripheral(peripheral, options: nil)\n```\n\n###\u63a5\u7d9a\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u6210\u529f\u3059\u308b\u3068\u547c\u3070\u308c\u308b\n- (void)  centralManager:(CBCentralManager *)central\n    didConnectPeripheral:(CBPeripheral *)peripheral\n{\n    NSLog(@\"connected!\");\n}\n\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u5931\u6557\u3059\u308b\u3068\u547c\u3070\u308c\u308b\n- (void)        centralManager:(CBCentralManager *)central\n    didFailToConnectPeripheral:(CBPeripheral *)peripheral\n                         error:(NSError *)error\n{\n    NSLog(@\"failed...\");\n}\n```\n\n```swift:swift\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u6210\u529f\u3059\u308b\u3068\u547c\u3070\u308c\u308b\nfunc centralManager(central: CBCentralManager,\n    didConnectPeripheral peripheral: CBPeripheral)\n{\n    print(\"connected!\")\n}\n\n// \u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3078\u306e\u63a5\u7d9a\u304c\u5931\u6557\u3059\u308b\u3068\u547c\u3070\u308c\u308b\nfunc centralManager(central: CBCentralManager,\n    didFailToConnectPeripheral peripheral: CBPeripheral,\n    error: NSError?)\n{\n    print(\"failed...\")\n}\n```\n\n##\u30b5\u30fc\u30d3\u30b9\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\n\n\u63a5\u7d9a\u3057\u305f\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306e\u30b5\u30fc\u30d3\u30b9\u30fb\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u63a2\u7d22\u3059\u308b\n\n###CBPeripheralDelegate \u30d7\u30ed\u30c8\u30b3\u30eb\u3078\u306e\u6e96\u62e0\u3092\u5ba3\u8a00\u3059\u308b\n\n```objc:objc\n@interface SomeClass () <CBCentralManagerDelegate, CBPeripheralDelegate>\n```\n\n```swift:swift\nclass SomeClass: SomeSuperclass, CBCentralManagerDelegate, CBPeripheralDelegate {\n```\n\n###\u30b5\u30fc\u30d3\u30b9\u63a2\u7d22\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\nperipheral.delegate = self;\n[peripheral discoverServices:nil];\n```\n\n```swift:swift\nperipheral.delegate = self\nperipheral.discoverServices(nil)\n```\n\n###\u30b5\u30fc\u30d3\u30b9\u63a2\u7d22\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n\n```objc:objc\n- (void)     peripheral:(CBPeripheral *)peripheral\n    didDiscoverServices:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"error: %@\", error);\n        return;\n    }\n    \n    NSArray *services = peripheral.services;\n    NSLog(@\"Found %lu services! :%@\", (unsigned long)services.count, services);\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral, didDiscoverServices error: NSError?) {\n    \n    if let error = error {\n        print(\"error: \\(error)\")\n        return\n    }\n\n    let services = peripheral.services\n    print(\"Found \\(services.count) services! :\\(services)\")\n}\n```\n\n###\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\n[peripheral discoverCharacteristics:nil forService:service];\n```\n\n```swift:swift\nperipheral.discoverCharacteristics(nil, forService: service)\n```\n\n###\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u63a2\u7d22\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)                      peripheral:(CBPeripheral *)peripheral\n    didDiscoverCharacteristicsForService:(CBService *)service\n                                   error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"error: %@\", error);\n        return;\n    }\n    \n    NSArray *characteristics = service.characteristics;\n    NSLog(@\"Found %lu characteristics! : %@\", (unsigned long)characteristics.count, characteristics);\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral,\n    didDiscoverCharacteristicsForService service: CBService,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"error: \\(error)\")\n        return\n    }\n    \n    let characteristics = service.characteristics\n    print(\"Found \\(characteristics.count) characteristics! : \\(characteristics)\")\n}\n```\n\n##Read\n\n###Read\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\n[peripheral readValueForCharacteristic:characteristic];\n```\n\n```swift:swift\nperipheral.readValueForCharacteristic(characteristic)\n```\n\n###Read\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)                 peripheral:(CBPeripheral *)peripheral\n    didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic\n                              error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Failed... error: %@\", error);\n        return;\n    }\n    \n    NSLog(@\"Succeeded\uff01 service uuid:%@, characteristice uuid:%@, value%@\",\n          characteristic.service.UUID, characteristic.UUID, characteristic.value);\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"Failed... error: \\(error)\")\n        return\n    }\n    \n    print(\"Succeeded! service uuid: \\(characteristic.service.UUID), characteristic uuid: \\(characteristic.UUID), value: \\(characteristic.value)\")\n}\n```\n\n##Write\n\n###\u30c7\u30fc\u30bf\u66f8\u304d\u8fbc\u307f\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\n[peripheral writeValue:data\n     forCharacteristic:characteristic\n                  type:CBCharacteristicWriteWithResponse];\n```\n\n```swift:swift\nperipheral.writeValue(data, forCharacteristic: characteristic, type: CBCharacteristicWriteType.WithResponse)\n```\n\n####NSData \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u4f8b\u305d\u306e1\uff1a\u6587\u5b57\u5217\u304b\u3089\n\n```objc:objc\nNSData *data = [@\"hello\" dataUsingEncoding:NSUTF8StringEncoding];\n```\n\n```swift:swift\nlet data = \"hello\".dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion:true)\n```\n\n####NSData \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u4f8b\u305d\u306e2\uff1a1\u30d0\u30a4\u30c8\u306eunsigned\u306a\u6574\u6570\u5024\n\n```objc:objc\nunsigned char value = 0x01;\nNSData *data = [[NSData alloc] initWithBytes:&value length:1];\n```\n\n```swift:swift\nvar value: CUnsignedChar = 0x01\nlet data = NSData(bytes: &value, length: 1)\n```\n\n\n###\u30c7\u30fc\u30bf\u66f8\u304d\u8fbc\u307f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)                peripheral:(CBPeripheral *)peripheral\n    didWriteValueForCharacteristic:(CBCharacteristic *)characteristic\n                             error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Write\u5931\u6557...error:%@\", error);\n        return;\n    }\n    \n    NSLog(@\"Write\u6210\u529f\uff01\");\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral,\n    didWriteValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"Write\u5931\u6557...error: \\(error)\")\n        return\n    }\n    \n    print(\"Write\u6210\u529f\uff01\")\n}\n```\n\n\n\n##Notify\n\n###\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\n[peripheral setNotifyValue:YES\n         forCharacteristic:characteristic];\n```\n\n```swift:swift\nperipheral.setNotifyValue(true, forCharacteristic: characteristic)\n```\n\n###\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u306e\u53d7\u3051\u53d6\u308a\u3092\u505c\u6b62\u3059\u308b\n\n```objc:objc\n[peripheral setNotifyValue:NO\n         forCharacteristic:characteristic];\n```\n\n```swift:swift\nperipheral.setNotifyValue(false, forCharacteristic: characteristic)\n```\n\n###\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u53d7\u3051\u53d6\u308a\u958b\u59cb\uff0f\u505c\u6b62\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)                             peripheral:(CBPeripheral *)peripheral\n    didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic\n                                          error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Notify\u72b6\u614b\u66f4\u65b0\u5931\u6557...error:%@\", error);\n    }\n    else {\n        NSLog(@\"Notify\u72b6\u614b\u66f4\u65b0\u6210\u529f\uff01 isNotifying:%d\", characteristic.isNotifying);\n    }\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateNotificationStateForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {        \n        print(\"Notify\u72b6\u614b\u66f4\u65b0\u5931\u6557...error: \\(error)\")\n    } else {\n        print(\"Notify\u72b6\u614b\u66f4\u65b0\u6210\u529f\uff01 isNotifying: \\(characteristic.isNotifying)\")\n    }\n}\n```\n\n###\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308b\n\n```objc:objc\n- (void)                 peripheral:(CBPeripheral *)peripheral\n    didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic\n                              error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u30a8\u30e9\u30fc:%@\", error);\n        return;\n    }\n    \n    NSLog(@\"\u30c7\u30fc\u30bf\u66f4\u65b0\uff01 characteristic UUID:%@, value:%@\",\n          characteristic.UUID, characteristic.value);\n}\n```\n\n```swift:swift\nfunc peripheral(peripheral: CBPeripheral,\n    didUpdateValueForCharacteristic characteristic: CBCharacteristic,\n    error: NSError?)\n{\n    if let error = error {\n        print(\"\u30c7\u30fc\u30bf\u66f4\u65b0\u901a\u77e5\u30a8\u30e9\u30fc: \\(error)\")\n        return\n    }\n    \n    print(\"\u30c7\u30fc\u30bf\u66f4\u65b0\uff01 characteristic UUID: \\(characteristic.UUID), value: \\(characteristic.value)\")\n}\n```\n\n#\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u7de8\n\n##\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\n\n###\u30d7\u30ed\u30c8\u30b3\u30eb\u6e96\u62e0\u306e\u5ba3\u8a00\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u5b9a\u7fa9\n\n```objc:objc\n@interface SomeClass () <CBPeripheralManagerDelegate>\n@property (nonatomic, strong) CBPeripheralManager *peripheralManager;\n@end\n```\n\n```swift:swift\nclass SomeClass: SomeSuperclass, CBPeripheralManagerDelegate {\n    var peripheralManager: CBPeripheralManager!\n```\n\n###CBPeripheralManager \u3092\u521d\u671f\u5316\u3059\u308b\n\n\n```objc:objc\nself.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self\n                                                                 queue:nil\n                                                               options:nil];\n```\n\n```swift:swift\nperipheralManager = CBPeripheralManager(delegate: self, queue: nil, options: nil)\n```\n\n###\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u72b6\u614b\u5909\u5316\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral {\n\n    NSLog(@\"state:%ld\", (long)peripheral.state);\n}\n```\n\n```swift:swift\nfunc peripheralManagerDidUpdateState(peripheral: CBPeripheralManager) {\n    \n    print(\"state: \\(peripheral.state)\")\n}\n```\n\n\n###\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u958b\u59cb\u3059\u308b\n\n```objc:objc\nNSDictionary *advertisementData = @{CBAdvertisementDataLocalNameKey: @\"Test Device\"};\n[self.peripheralManager startAdvertising:advertisementData];\n```\n\n```swift:swift\nlet advertisementData = [CBAdvertisementDataLocalNameKey: \"Test Device\"]\nperipheralManager.startAdvertising(advertisementData)\n```\n\n\n###\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u958b\u59cb\u51e6\u7406\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral\n                                       error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"Failed... error:%@\", error);\n        return;\n    }\n    \n    NSLog(@\"Succeeded!\");\n}\n```\n\n```swift:swift\nfunc peripheralManagerDidStartAdvertising(peripheral: CBPeripheralManager, error: NSError?) {\n    \n    if let error = error {\n        print(\"Failed... error: \\(error)\")\n        return\n    }\n\n    print(\"Succeeded!\")\n}\n```\n\n###\u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62\u3059\u308b\n\n```objc:objc\n[self.peripheralManager stopAdvertising];\n```\n\n```swift:swift\nperipheralManager.stopAdvertising()\n```\n\n##\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\n\n###\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\n```objc:objc\nCBUUID *serviceUUID = [CBUUID UUIDWithString:kServiceUUID];\nCBMutableService *service = [[CBMutableService alloc] initWithType:serviceUUID\n                                                           primary:YES];\n```\n\n```swift:swift\nlet serviceUUID = CBUUID(string: kServiceUUID)\nlet service = CBMutableService(type: serviceUUID, primary: true)\n```\n\n###\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u4f5c\u6210\u3059\u308b\n\n```objc:objc\nCBUUID *characteristicUUID = [CBUUID UUIDWithString:kCharacteristicUUID];\n\nCBCharacteristicProperties properties = (\n                                         CBCharacteristicPropertyNotify |\n                                         CBCharacteristicPropertyRead |\n                                         CBCharacteristicPropertyWrite\n                                         );\nCBAttributePermissions permissions = (CBAttributePermissionsReadable | CBAttributePermissionsWriteable);\nCBMutableCharacteristic *characteristic = [[CBMutableCharacteristic alloc] initWithType:characteristicUUID\n                                                                             properties:properties\n                                                                                  value:nil\n                                                                            permissions:permissions];\n```\n\n```swift:swift\nlet characteristicUUID = CBUUID(string: kCharacteristicUUID)\nlet properties: CBCharacteristicProperties = [.Notify, .Read, .Write]\nlet permissions: CBAttributePermissions = [.Readable, .Writeable]\nlet characteristic = CBMutableCharacteristic(type: characteristicUUID, properties: properties,\n    value: nil, permissions: permissions)\n```\n\n\n###\u30b5\u30fc\u30d3\u30b9\u306b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u8ffd\u52a0\n\n```objc:objc\nservice.characteristics = @[characteristic];\n```\n\n```swift:swift\nservice.characteristics = [characteristic]\n```\n\n###\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u8ffd\u52a0\n\n```objc:objc\n[self.peripheralManager addService:service];\n```\n\n```swift:swift\nperipheralManager.addService(service)\n```\n\n\n###\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\n```objc:objc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n            didAddService:(CBService *)service\n                    error:(NSError *)error\n{\n    if (error) {\n        NSLog(@\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u5931\u6557\uff01 error:%@\", error);\n        return;\n    }\n    \n    NSLog(@\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u6210\u529f\uff01 service:%@\", service);\n}\n```\n\n```swift:swift\nfunc peripheralManager(peripheral: CBPeripheralManager, didAddService service: CBService, error: NSError?) {\n    \n    if let error = error {\n        print(\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u5931\u6557\uff01 error: \\(error)\")\n        return\n    }\n    \n    print(\"\u30b5\u30fc\u30d3\u30b9\u8ffd\u52a0\u6210\u529f\uff01\")\n}\n```\n\n##Read\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n\n```objc:objc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral\n    didReceiveReadRequest:(CBATTRequest *)request\n{\n    if ([request.characteristic.UUID isEqual:self.characteristic.UUID]) {\n        \n        // CBMutableCharacteristic\u306evalue\u3092CBATTRequest\u306evalue\u306b\u30bb\u30c3\u30c8\n        request.value = self.characteristic.value;\n        \n        // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n        [self.peripheralManager respondToRequest:request\n                                      withResult:CBATTErrorSuccess];\n    }\n}\n```\n\n```swift:swift\nfunc peripheralManager(peripheral: CBPeripheralManager, didReceiveReadRequest request: CBATTRequest) {\n    \n    if request.characteristic.UUID.isEqual(characteristic.UUID) {\n        \n        // CBMutableCharacteristic\u306evalue\u3092CBATTRequest\u306evalue\u306b\u30bb\u30c3\u30c8\n        request.value = characteristic.value\n        \n        // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n        peripheralManager.respondToRequest(request, withResult: .Success)\n    }\n}\n```\n\n##Write\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n\n```objc:objc\n- (void)peripheralManager:(CBPeripheralManager *)peripheral didReceiveWriteRequests:(NSArray *)requests {\n    \n    for (CBATTRequest *aRequest in requests) {\n\n        if ([aRequest.characteristic.UUID isEqual:self.characteristic.UUID]) {\n            \n            // CBCharacteristic\u306evalue\u306b\u3001CBATTRequest\u306evalue\u3092\u30bb\u30c3\u30c8\n            self.characteristic.value = aRequest.value;\n        }\n    }\n    \n    // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n    [self.peripheralManager respondToRequest:requests[0]\n                                  withResult:CBATTErrorSuccess];\n}\n```\n\n```swift:swift\nfunc peripheralManager(peripheral: CBPeripheralManager, didReceiveWriteRequests requests: [CBATTRequest]) {\n\n    for request in requests {\n        \n        if request.characteristic.UUID.isEqual(characteristic.UUID) {\n                \n            // CBCharacteristic\u306evalue\u306b\u3001CBATTRequest\u306evalue\u3092\u30bb\u30c3\u30c8\n            characteristic.value = request.value\n        }\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u7b54\n    peripheralManager.respondToRequest(requests[0], withResult: .Success)\n}\n```\n\n##Notification / Indication \u3078\u306e\u5fdc\u7b54\n\n###Subscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n\n```objc:objc\n- (void)       peripheralManager:(CBPeripheralManager *)peripheral\n                         central:(CBCentral *)central\n    didSubscribeToCharacteristic:(CBCharacteristic *)characteristic\n{\n    NSLog(@\"Subscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\");\n    NSLog(@\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: %@\", self.characteristic.subscribedCentrals);\n}\n```\n\n```swift:swift\nfunc peripheralManager(peripheral: CBPeripheralManager, central: CBCentral, didSubscribeToCharacteristic characteristic: CBCharacteristic)\n{\n    print(\"Subscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\")\n    print(\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: \\(characteristic.subscribedCentrals)\")\n}\n```\n\n###Unsubscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n\n```objc:objc\n- (void)           peripheralManager:(CBPeripheralManager *)peripheral\n                             central:(CBCentral *)central\n    didUnsubscribeFromCharacteristic:(CBCharacteristic *)characteristic\n{\n    NSLog(@\"Unsubscribe\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\");\n    NSLog(@\"Subscribe\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: %@\", self.characteristic.subscribedCentrals);\n}\n```\n\n```swift:swift\nfunc peripheralManager(peripheral: CBPeripheralManager, central: CBCentral, didUnsubscribeFromCharacteristic characteristic: CBCharacteristic)\n{\n    print(\"Notify\u505c\u6b62\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u4fe1\")\n    print(\"Notify\u4e2d\u306e\u30bb\u30f3\u30c8\u30e9\u30eb: \\(characteristic.subscribedCentrals)\")\n}\n```\n\n\n###\u5024\u3092\u66f4\u65b0\u3057\u3001\u901a\u77e5\u3059\u308b\n\n```objc:objc\nself.characteristic.value = data;\n\n[self.peripheralManager updateValue:data\n                  forCharacteristic:self.characteristic\n               onSubscribedCentrals:nil];\n```\n\n```swift:swift\ncharacteristic.value = data\n\nperipheralManager.updateValue(data, forCharacteristic: characteristic, onSubscribedCentrals: nil)\n```\n", "tags": ["Swift2", "bluetooth", "Objective-C", "iOS", "IoT"]}