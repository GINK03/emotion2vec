{"context": "\n\n\u3068\u308a\u3042\u3048\u305a\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\nAkka-Persistence\u3067Kryo\u3092\u3068\u308a\u3042\u3048\u305a\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u66f8\u3044\u305f\u3002\nAkka-Persistence\u30b3\u30c8\u30cf\u30b8\u30e1#serializer\u3068\u3057\u3066kryo\u3092\u4f7f\u3046\n\nserializer\u9078\u629e\u306b\u3064\u3044\u3066\nAkka-Persistence\u306ePersistentActor#persist\u3067\u6c38\u7d9a\u5316\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fserialize\u3057\u3066\u304b\u3089\u6c38\u7d9a\u5316\u3057\u3066\u3044\u308b\u3002\n\u305d\u306e\u969b\u306b\u4f7f\u7528\u3067\u304d\u308bSerializer\u3092\u516c\u5f0f\u304c\u63d0\u793a\u3057\u3066\u3044\u308b\u3002\nExternal Akka Serializers\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3067\u3082serializer\u9078\u629e\u306f\u5927\u4e8b\u3060\u3068\u5f37\u8abf\u3057\u3066\u304a\u308a\u3001\u3053\u3061\u3089\u3067\u306fGoogle Protobuf/Apache Thrift/Apache Avro\u304c\u63d0\u793a\u3055\u308c\u3066\u3044\u308b\u3002\nPicking the right serialization format\nProtobuf\u306f\u4f55\u3068\u306a\u304f\u4f7f\u3046\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u305d\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u3042\u3063\u305f\u306e\u3067\u697d\u305d\u3046\u306aKryo\u3092\u4f7f\u3046\u3002\n\u4ed6\u306b\u3082JSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306aSerializer\u5b9f\u88c5\u3068\u3057\u3066scalapenos/stamina\u304c\u3042\u308b\u3002\n\nserializer\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\nserializer\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\u306f2\u30d1\u30bf\u30fc\u30f3\u3042\u308a\u305d\u3046\u3060\u3063\u305f\u3002\n\nakka\u306e\u3084\u308a\u65b9\u306b\u81ea\u5206\u3067\u5f93\u3046\u30d1\u30bf\u30fc\u30f3\n\nromix/akka-kryo-serialization\u3092\u304c\u3063\u3064\u308a\u4f7f\u3046\u30d1\u30bf\u30fc\u30f3\n\n\nkryo\u4ee5\u5916\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3067\u306f\u89e6\u308c\u306a\u3044\n\n\n\n\u305d\u308c\u305e\u308c\u3084\u3063\u3066\u307f\u308b\u3002\n\nserialize(persist)\u3059\u308b\u578b\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u3046\u578b\u3002\nTodo\u30a2\u30d7\u30ea\u306b\u304a\u3044\u3066\u65b0\u3057\u304fTask\u3092\u8ffd\u52a0\u3059\u308bRegister\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Akka-Persistence\u3067persist\u3059\u308b\u5bfe\u8c61\u3068\u3059\u308b\u3002\nsealed trait CommandEvent\ncase class Register(task: Task) extends CommandEvent\n\nTask\u306e\u5b9a\u7fa9\u306f\u3053\u3093\u306a\u611f\u3058\u3067id\u3068title\u3068state\u3092\u6301\u3064\u3002\n\u82e5\u5e72DDD\u3063\u307d\u304f\u305d\u308c\u305e\u308c\u306b\u3061\u3083\u3093\u3068\u578b\u3092\u7528\u610f\u3057\u305f\u3002\ncase class Task(id: TaskId, title: TaskTitle, state: TaskState = TaskState.Todo)\n\ncase class TaskId(value: String) extends AnyVal\ncase class TaskTitle(value: String) extends AnyVal\n\n// enumlike\nsealed abstract class TaskState(val value: Int) extends Serializable\nobject TaskState {\n  case object Completed extends TaskState(1)\n  case object Todo extends TaskState(0)\n\n  private val values = Completed :: Todo :: Nil\n  // [[TaskState]] factory\n  val from: Int => TaskState = n => values.find(_.value == n).get\n}\n\n\nakka\u306e\u3084\u308a\u65b9\u306b\u5f93\u3063\u3066\u72ec\u81easerializer\u3092\u5b9f\u88c5\u3059\u308b\nCustomization\u3092\u53c2\u7167\u3002\nakka.serialization.Serializer\u3092\u5b9f\u88c5\u3057\u3066\u3084\u308c\u3070\u826f\u3044\u3002\n\ntwitter/chill\u3092\u4f7f\u3046\nKryo\u3092\u76f4\u63a5\u4f7f\u3046\u306e\u3067\u306f\u306a\u305c\u304b\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001twitter/chill\u3092\u5229\u7528\u3059\u308b\u3002\n\u53c2\u8003\uff1atakezoux2\u306e\u30d6\u30ed\u30b0: chill\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30b9\u5b9a\u7fa9\u5909\u66f4\u306b\u5f37\u3044\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u5b9f\u73fe\nbuild.sbt\u306b\u4f9d\u5b58\u3092\u8ffd\u52a0\u3002\nlibraryDependencies += \"com.twitter\" %% \"chill-bijection\" % \"0.8.0\"\n\ntwitter/chill\u3092\u4f7f\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306bRegister\u306eSerializer\u3092\u5b9f\u88c5\u3059\u308b\u3002\nclass RegisterKryoSerializer extends akka.serialization.Serializer {\n  private val CLAZZ = classOf[Register]\n\n  override def identifier: Int = 1000\n\n  override def includeManifest: Boolean = true\n\n  override def toBinary(o: AnyRef): Array[Byte] = {\n    // \u3053\u308c\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n    // val kryo = new Kryo()\n    // val baos = new ByteArrayOutputStream()\n    // kryo.writeObject(new Output(baos), o)\n    // baos.toByteArray\n\n    KryoInjection.apply(o)\n  }\n\n  override def fromBinary(bytes: Array[Byte], manifest: Option[Class[_]]): AnyRef = {\n    manifest match {\n      case Some(CLAZZ) =>\n        // \u3053\u308c\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n        // val kryo = new Kryo()\n        // val input = new Input(new ByteArrayInputStream(bytes))\n        // kryo.readObject(input, CLAZZ)\n        KryoInjection.invert(bytes).get\n      case _ => sys.error(s\"unknown manifest: $manifest\")\n    }\n  }\n}\n\n\u3053\u306e\u3088\u3046\u306bKryoInjection#apply\u3068KryoInjection#invert\u3092\u4f7f\u3063\u305f\u3089Serializer\u306f\u304a\u624b\u8efd\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u3053\u308c\u3067\u306fKryoInjection\u306bserialize/deserialize\u3092\u4efb\u305b\u3063\u304d\u308a\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u305d\u3082\u305d\u3082\u3084\u308a\u305f\u304b\u3063\u305f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u51fa\u6765\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3046\u307e\u304f\u3044\u3063\u305f\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u66f8\u304f\u3002\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u81ea\u5206\u306a\u308a\u306bArray[Byte]\u3068Register\u306eserialize/deserialize\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3046\u307e\u304f\u51fa\u6765\u306a\u304b\u3063\u305f\u3002\n\u305d\u306e\u969b\u306eStackTrace\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n[ERROR] swallowing exception during message send\ncom.esotericsoftware.kryo.KryoException: Buffer underflow.\n at com.esotericsoftware.kryo.io.Input.require(Input.java:199)\n at com.esotericsoftware.kryo.io.Input.readString(Input.java:470)\n ...\n\n\u3053\u308c\u304c\u89e3\u6c7a\u51fa\u6765\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044...\u3002\n\nromix/akka-kryo-serialization\u3092\u4f7f\u3046\n\u3053\u3061\u3089\u306e\u5834\u5408\u306fcom.esotericsoftware.kryo.Serializer\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u3002\n// (`accesptsNull` = false, `immutable` = true)\nabstract class KryoSerializerBase[T] extends com.esotericsoftware.kryo.Serializer[T](false, true)\n\nclass RegisterKryoSerializer extends KryoSerializerBase[Register] {\n  override def write(kryo: Kryo, output: Output, `object`: Register): Unit = {\n    output.writeString(`object`.task.id.value)\n    output.writeString(`object`.task.name.value)\n    output.writeInt(`object`.task.state.value)\n  }\n\n  override def read(kryo: Kryo, input: Input, `type`: Class[Register]): Register = {\n    val taskId = TaskId(input.readString)\n    val taskTitle = TaskTitle(input.readString)\n    val taskState = TaskState.from(input.readInt)\n    Register(Task(taskId, taskTitle, taskState))\n  }\n}\n\n\u3053\u3053\u3067\u5b9f\u88c5\u3057\u305fRegisterKryoSerializer\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u5b9f\u884c\u3067\u304d\u308c\u3070\u3044\u3044\u304c\u3001\nkryo\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3069\u3046\u3084\u3063\u3066\u624b\u306b\u5165\u308c\u308b\u304b\u304c\u96e3\u3057\u3044\u3002\nkryo.addDefaultSerializer(classOf[Register], classOf[RegisterKryoSerializer])\n\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306bKryo\u306einitializer\u3092\u72ec\u81ea\u306b\u5b9f\u88c5\u3057\u3066\u521d\u671f\u5316\u51e6\u7406\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3088\u3044\u3002\nHow to create a custom initializer for Kryo\n\ninitializer\u3092\u7528\u610f\u3059\u308b\nextends\u3059\u308btrait\u306a\u3069\u306f\u306a\u304f\u3001customize(kryo: Kryo)\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064class\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3002\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u3066\u3053\u306e\u8fba\u308a\u306b\u305d\u306e\u5b9f\u88c5\u304c\u3042\u308b\u3002\nkryo\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306eaddDefaultSerializer\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u306eclass\u3092\u7528\u610f\u3057\u305f\u3002\nclass CustomKryoSerializerInitializer {\n  def customize(kryo: Kryo) = {\n    kryo.setDefaultSerializer(classOf[CompatibleFieldSerializer[Any]])\n    kryo.addDefaultSerializer(classOf[Register], classOf[RegisterKryoSerializer])\n    println(s\"after - ${kryo.getSerializer(classOf[Register])}\")\n  }\n}\n\n\ninitializer\u3092conf\u306b\u8ffd\u52a0\u3059\u308b\napplication.conf\u306b\u8ffd\u52a0\u3059\u308b\u3002\n\u8a72\u5f53\u7b87\u6240\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nextensions = [\"com.romix.akka.serialization.kryo.KryoSerializationExtension$\"]\n\nakka {\n  actor {\n    serializers {\n      java = \"akka.serialization.JavaSerializer\"\n      kryo = \"com.romix.akka.serialization.kryo.KryoSerializer\"\n    }\n    warn-about-java-serializer-usage = false\n    serialization-bindings {\n      \"java.io.Serializable\" = java\n      \"net.petitviolet.ex.persistence.task.actor.Register\" = kryo\n    }\n    kryo {\n      type = \"graph\"\n      idstrategy = \"default\"\n      kryo-trace = true\n      // \u3053\u3053\uff01\n      kryo-custom-serializer-init = \"net.petitviolet.ex.persistence.task.model.support.CustomKryoSerializerInitializer\"\n    }\n  }\n}\n\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n[info] 00:00 TRACE: [kryo] Registration required: false\n[info] 00:00 TRACE: [kryo] Register class name: net.petitviolet.ex.persistence.task.actor.Register (net.petitviolet.ex.persistence.task.model.support.RegisterKryoSerializer)\n[info] after - net.petitviolet.ex.persistence.task.model.support.RegisterKryoSerializer@550c6251\n\nkryo-custom-serializer-init\u306b\u7528\u610f\u3057\u305finitializer\u3092\u8a2d\u5b9a\u3057\u3066\u3084\u308c\u3070customize\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001Register\u306b\u5bfe\u3059\u308bserializer\u3092\u767b\u9332\u3059\u308b\u4e8b\u304c\u51fa\u6765\u305f\u3002\n\n\u611f\u60f3\nAkka-Persistence\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6050\u3089\u304f\u91cd\u8981\u306a\u610f\u601d\u6c7a\u5b9a\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044Serializer\u306e\u9078\u629e\u3002\n\u30d7\u30ed\u30c0\u30af\u30c8\u958b\u767a\u306b\u304a\u3044\u3066\u306fpersist\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30a4\u30d9\u30f3\u30c8\u3082\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u308b\u305f\u3081\u3001\n\u5148\u307e\u3067\u898b\u636e\u3048\u3066Serializer\u306f\u5c0e\u5165\u6bb5\u968e\u304b\u3089\u7cbe\u67fb\u3057\u3066\u304d\u3063\u3061\u308a\u5b9f\u88c5\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u305d\u3046\u3002\n\u3061\u306a\u307f\u306b\u30a4\u30d9\u30f3\u30c8\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306eAkka\u516c\u5f0f\u306a\u8a18\u4e8b\u3002\nPersistence - Schema Evolution\n\u672c\u5f53\u306f\u3053\u3053\u307e\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u304c\u3001Akka-Persistence\u306eSerializer\u3068\u3057\u3066Kryo\u306f\u5411\u3044\u3066\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u632b\u6298\u3002\n\u30a4\u30d9\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\u306b\u5bfe\u5fdc\u3057\u305fKryo\u306aSerializer\u5b9f\u88c5\u306f\u3042\u308b\u3093\u3060\u308d\u3046\u304b...\uff1f\n# \u3068\u308a\u3042\u3048\u305a\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\nAkka-Persistence\u3067Kryo\u3092\u3068\u308a\u3042\u3048\u305a\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u66f8\u3044\u305f\u3002\n[Akka-Persistence\u30b3\u30c8\u30cf\u30b8\u30e1#serializer\u3068\u3057\u3066kryo\u3092\u4f7f\u3046](http://qiita.com/petitviolet/items/92826357bd10aace14f5#serializer%E3%81%A8%E3%81%97%E3%81%A6kryo%E3%82%92%E4%BD%BF%E3%81%86)\n\n# serializer\u9078\u629e\u306b\u3064\u3044\u3066\n\nAkka-Persistence\u306e`PersistentActor#persist`\u3067\u6c38\u7d9a\u5316\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fserialize\u3057\u3066\u304b\u3089\u6c38\u7d9a\u5316\u3057\u3066\u3044\u308b\u3002\n\u305d\u306e\u969b\u306b\u4f7f\u7528\u3067\u304d\u308bSerializer\u3092\u516c\u5f0f\u304c\u63d0\u793a\u3057\u3066\u3044\u308b\u3002\n[External Akka Serializers](http://doc.akka.io/docs/akka/current/scala/serialization.html#External_Akka_Serializers)\n\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3067\u3082serializer\u9078\u629e\u306f\u5927\u4e8b\u3060\u3068\u5f37\u8abf\u3057\u3066\u304a\u308a\u3001\u3053\u3061\u3089\u3067\u306fGoogle Protobuf/Apache Thrift/Apache Avro\u304c\u63d0\u793a\u3055\u308c\u3066\u3044\u308b\u3002\n[Picking the right serialization format](http://doc.akka.io/docs/akka/current/scala/persistence-schema-evolution.html#Picking_the_right_serialization_format)\n\nProtobuf\u306f\u4f55\u3068\u306a\u304f\u4f7f\u3046\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u305d\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u3042\u3063\u305f\u306e\u3067\u697d\u305d\u3046\u306aKryo\u3092\u4f7f\u3046\u3002\n\n\u4ed6\u306b\u3082JSON\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306aSerializer\u5b9f\u88c5\u3068\u3057\u3066[scalapenos/stamina](https://github.com/scalapenos/stamina)\u304c\u3042\u308b\u3002\n\n## serializer\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\n\nserializer\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\u306f2\u30d1\u30bf\u30fc\u30f3\u3042\u308a\u305d\u3046\u3060\u3063\u305f\u3002\n\n- akka\u306e\u3084\u308a\u65b9\u306b\u81ea\u5206\u3067\u5f93\u3046\u30d1\u30bf\u30fc\u30f3\n- [romix/akka-kryo-serialization](https://github.com/romix/akka-kryo-serialization)\u3092\u304c\u3063\u3064\u308a\u4f7f\u3046\u30d1\u30bf\u30fc\u30f3\n    - kryo\u4ee5\u5916\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3067\u306f\u89e6\u308c\u306a\u3044\n\n\u305d\u308c\u305e\u308c\u3084\u3063\u3066\u307f\u308b\u3002\n\n## serialize(persist)\u3059\u308b\u578b\n\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u3046\u578b\u3002\nTodo\u30a2\u30d7\u30ea\u306b\u304a\u3044\u3066\u65b0\u3057\u304f`Task`\u3092\u8ffd\u52a0\u3059\u308b`Register`\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Akka-Persistence\u3067`persist`\u3059\u308b\u5bfe\u8c61\u3068\u3059\u308b\u3002\n\n```scala\nsealed trait CommandEvent\ncase class Register(task: Task) extends CommandEvent\n```\n\n`Task`\u306e\u5b9a\u7fa9\u306f\u3053\u3093\u306a\u611f\u3058\u3067`id`\u3068`title`\u3068`state`\u3092\u6301\u3064\u3002\n\u82e5\u5e72DDD\u3063\u307d\u304f\u305d\u308c\u305e\u308c\u306b\u3061\u3083\u3093\u3068\u578b\u3092\u7528\u610f\u3057\u305f\u3002\n\n```scala\ncase class Task(id: TaskId, title: TaskTitle, state: TaskState = TaskState.Todo)\n\ncase class TaskId(value: String) extends AnyVal\ncase class TaskTitle(value: String) extends AnyVal\n\n// enumlike\nsealed abstract class TaskState(val value: Int) extends Serializable\nobject TaskState {\n  case object Completed extends TaskState(1)\n  case object Todo extends TaskState(0)\n\n  private val values = Completed :: Todo :: Nil\n  // [[TaskState]] factory\n  val from: Int => TaskState = n => values.find(_.value == n).get\n}\n```\n\n# akka\u306e\u3084\u308a\u65b9\u306b\u5f93\u3063\u3066\u72ec\u81easerializer\u3092\u5b9f\u88c5\u3059\u308b\n\n[Customization](http://doc.akka.io/docs/akka/current/scala/serialization.html#Customization)\u3092\u53c2\u7167\u3002\n`akka.serialization.Serializer`\u3092\u5b9f\u88c5\u3057\u3066\u3084\u308c\u3070\u826f\u3044\u3002\n\n## twitter/chill\u3092\u4f7f\u3046\n\nKryo\u3092\u76f4\u63a5\u4f7f\u3046\u306e\u3067\u306f\u306a\u305c\u304b\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001[twitter/chill](https://github.com/twitter/chill)\u3092\u5229\u7528\u3059\u308b\u3002\n\u53c2\u8003\uff1a[takezoux2\u306e\u30d6\u30ed\u30b0: chill\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30b9\u5b9a\u7fa9\u5909\u66f4\u306b\u5f37\u3044\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u5b9f\u73fe](http://takezoux2.blogspot.jp/2013/07/chill.html)\n\nbuild.sbt\u306b\u4f9d\u5b58\u3092\u8ffd\u52a0\u3002\n\n```\nlibraryDependencies += \"com.twitter\" %% \"chill-bijection\" % \"0.8.0\"\n```\n\ntwitter/chill\u3092\u4f7f\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306b`Register`\u306e`Serializer`\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\n```scala\nclass RegisterKryoSerializer extends akka.serialization.Serializer {\n  private val CLAZZ = classOf[Register]\n\n  override def identifier: Int = 1000\n\n  override def includeManifest: Boolean = true\n\n  override def toBinary(o: AnyRef): Array[Byte] = {\n    // \u3053\u308c\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n    // val kryo = new Kryo()\n    // val baos = new ByteArrayOutputStream()\n    // kryo.writeObject(new Output(baos), o)\n    // baos.toByteArray\n\n    KryoInjection.apply(o)\n  }\n\n  override def fromBinary(bytes: Array[Byte], manifest: Option[Class[_]]): AnyRef = {\n    manifest match {\n      case Some(CLAZZ) =>\n        // \u3053\u308c\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n        // val kryo = new Kryo()\n        // val input = new Input(new ByteArrayInputStream(bytes))\n        // kryo.readObject(input, CLAZZ)\n        KryoInjection.invert(bytes).get\n      case _ => sys.error(s\"unknown manifest: $manifest\")\n    }\n  }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b`KryoInjection#apply`\u3068`KryoInjection#invert`\u3092\u4f7f\u3063\u305f\u3089`Serializer`\u306f\u304a\u624b\u8efd\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u3053\u308c\u3067\u306f`KryoInjection`\u306bserialize/deserialize\u3092\u4efb\u305b\u3063\u304d\u308a\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u305d\u3082\u305d\u3082\u3084\u308a\u305f\u304b\u3063\u305f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u304c\u51fa\u6765\u306a\u3044\u3002\n\u306a\u306e\u3067\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3046\u307e\u304f\u3044\u3063\u305f\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u66f8\u304f\u3002\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u81ea\u5206\u306a\u308a\u306b`Array[Byte]`\u3068`Register`\u306eserialize/deserialize\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3046\u307e\u304f\u51fa\u6765\u306a\u304b\u3063\u305f\u3002\n\u305d\u306e\u969b\u306eStackTrace\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```\n[ERROR] swallowing exception during message send\ncom.esotericsoftware.kryo.KryoException: Buffer underflow.\n at com.esotericsoftware.kryo.io.Input.require(Input.java:199)\n at com.esotericsoftware.kryo.io.Input.readString(Input.java:470)\n ...\n```\n\n\u3053\u308c\u304c\u89e3\u6c7a\u51fa\u6765\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044...\u3002\n\n# romix/akka-kryo-serialization\u3092\u4f7f\u3046\n\n\u3053\u3061\u3089\u306e\u5834\u5408\u306f`com.esotericsoftware.kryo.Serializer`\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u3002\n\n```scala\n// (`accesptsNull` = false, `immutable` = true)\nabstract class KryoSerializerBase[T] extends com.esotericsoftware.kryo.Serializer[T](false, true)\n\nclass RegisterKryoSerializer extends KryoSerializerBase[Register] {\n  override def write(kryo: Kryo, output: Output, `object`: Register): Unit = {\n    output.writeString(`object`.task.id.value)\n    output.writeString(`object`.task.name.value)\n    output.writeInt(`object`.task.state.value)\n  }\n\n  override def read(kryo: Kryo, input: Input, `type`: Class[Register]): Register = {\n    val taskId = TaskId(input.readString)\n    val taskTitle = TaskTitle(input.readString)\n    val taskState = TaskState.from(input.readInt)\n    Register(Task(taskId, taskTitle, taskState))\n  }\n}\n```\n\n\u3053\u3053\u3067\u5b9f\u88c5\u3057\u305f`RegisterKryoSerializer`\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u5b9f\u884c\u3067\u304d\u308c\u3070\u3044\u3044\u304c\u3001\n`kryo`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3069\u3046\u3084\u3063\u3066\u624b\u306b\u5165\u308c\u308b\u304b\u304c\u96e3\u3057\u3044\u3002\n\n```scala\nkryo.addDefaultSerializer(classOf[Register], classOf[RegisterKryoSerializer])\n```\n\n\u3053\u3053\u306b\u3042\u308b\u3088\u3046\u306bKryo\u306einitializer\u3092\u72ec\u81ea\u306b\u5b9f\u88c5\u3057\u3066\u521d\u671f\u5316\u51e6\u7406\u306b\u8ffd\u52a0\u3059\u308c\u3070\u3088\u3044\u3002\n[How to create a custom initializer for Kryo](https://github.com/romix/akka-kryo-serialization#how-to-create-a-custom-initializer-for-kryo)\n\n## initializer\u3092\u7528\u610f\u3059\u308b\n\nextends\u3059\u308btrait\u306a\u3069\u306f\u306a\u304f\u3001`customize(kryo: Kryo)`\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064class\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3002\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u3066[\u3053\u306e\u8fba\u308a\u306b\u305d\u306e\u5b9f\u88c5\u304c\u3042\u308b]( https://github.com/romix/akka-kryo-serialization/blob/c5ec10b519c95a7fd8724986a6d9c27ed1e0a76b/src/main/scala/com/romix/akka/serialization/kryo/KryoSerializer.scala#L246)\u3002\n\n`kryo`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e`addDefaultSerializer`\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u306eclass\u3092\u7528\u610f\u3057\u305f\u3002\n\n```scala\nclass CustomKryoSerializerInitializer {\n  def customize(kryo: Kryo) = {\n    kryo.setDefaultSerializer(classOf[CompatibleFieldSerializer[Any]])\n    kryo.addDefaultSerializer(classOf[Register], classOf[RegisterKryoSerializer])\n    println(s\"after - ${kryo.getSerializer(classOf[Register])}\")\n  }\n}\n```\n\n## initializer\u3092conf\u306b\u8ffd\u52a0\u3059\u308b\n\napplication.conf\u306b\u8ffd\u52a0\u3059\u308b\u3002\n\u8a72\u5f53\u7b87\u6240\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```\nextensions = [\"com.romix.akka.serialization.kryo.KryoSerializationExtension$\"]\n\nakka {\n  actor {\n    serializers {\n      java = \"akka.serialization.JavaSerializer\"\n      kryo = \"com.romix.akka.serialization.kryo.KryoSerializer\"\n    }\n    warn-about-java-serializer-usage = false\n    serialization-bindings {\n      \"java.io.Serializable\" = java\n      \"net.petitviolet.ex.persistence.task.actor.Register\" = kryo\n    }\n    kryo {\n      type = \"graph\"\n      idstrategy = \"default\"\n      kryo-trace = true\n      // \u3053\u3053\uff01\n      kryo-custom-serializer-init = \"net.petitviolet.ex.persistence.task.model.support.CustomKryoSerializerInitializer\"\n    }\n  }\n}\n```\n\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n> [info] 00:00 TRACE: [kryo] Registration required: false\n> [info] 00:00 TRACE: [kryo] Register class name: net.petitviolet.ex.persistence.task.actor.Register (net.petitviolet.ex.persistence.task.model.support.RegisterKryoSerializer)\n> [info] after - net.petitviolet.ex.persistence.task.model.support.RegisterKryoSerializer@550c6251\n\n`kryo-custom-serializer-init`\u306b\u7528\u610f\u3057\u305finitializer\u3092\u8a2d\u5b9a\u3057\u3066\u3084\u308c\u3070`customize`\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001`Register`\u306b\u5bfe\u3059\u308bserializer\u3092\u767b\u9332\u3059\u308b\u4e8b\u304c\u51fa\u6765\u305f\u3002\n\n# \u611f\u60f3\n\nAkka-Persistence\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6050\u3089\u304f\u91cd\u8981\u306a\u610f\u601d\u6c7a\u5b9a\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044Serializer\u306e\u9078\u629e\u3002\n\u30d7\u30ed\u30c0\u30af\u30c8\u958b\u767a\u306b\u304a\u3044\u3066\u306f`persist`\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30a4\u30d9\u30f3\u30c8\u3082\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u308b\u305f\u3081\u3001\n\u5148\u307e\u3067\u898b\u636e\u3048\u3066Serializer\u306f\u5c0e\u5165\u6bb5\u968e\u304b\u3089\u7cbe\u67fb\u3057\u3066\u304d\u3063\u3061\u308a\u5b9f\u88c5\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u305d\u3046\u3002\n\n\u3061\u306a\u307f\u306b\u30a4\u30d9\u30f3\u30c8\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306eAkka\u516c\u5f0f\u306a\u8a18\u4e8b\u3002\n[Persistence - Schema Evolution](http://doc.akka.io/docs/akka/current/scala/persistence-schema-evolution.html)\n\u672c\u5f53\u306f\u3053\u3053\u307e\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u304c\u3001Akka-Persistence\u306eSerializer\u3068\u3057\u3066Kryo\u306f\u5411\u3044\u3066\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u632b\u6298\u3002\n\u30a4\u30d9\u30f3\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\u306b\u5bfe\u5fdc\u3057\u305fKryo\u306aSerializer\u5b9f\u88c5\u306f\u3042\u308b\u3093\u3060\u308d\u3046\u304b...\uff1f\n", "tags": ["Scala", "Akka", "actor"]}