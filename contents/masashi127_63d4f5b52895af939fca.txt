{"context": " More than 1 year has passed since last update.8\u30d1\u30ba\u30eb\u3092\u984c\u6750\u306b\u3057\u3066\u3001\u57fa\u672c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5e45\u512a\u5148\u63a2\u7d22\u3068\u53cc\u65b9\u5411\u63a2\u7d22\u3092\u5b9f\u88c5\n\n\u5e45\u512a\u5148\u63a2\u7d22\n\n\u624b\u9806\n\n\u958b\u59cb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n\u958b\u59cb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n\u30ad\u30e5\u30fc\u306e\u5148\u982d\u304b\u3089\u30d1\u30ba\u30eb\u3092\u53d6\u5f97\n\u30d1\u30ba\u30eb\u3092\u4e0a\u4e0b\u5de6\u53f3\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30ba\u30eb\u3092\u65b0\u898f\u4f5c\u6210\n\u305d\u306e\u30d1\u30ba\u30eb\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u30b4\u30fc\u30eb\u306a\u3089\u7d42\u4e86\n\u305d\u306e\u30d1\u30ba\u30eb\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u6e08\u307f\u304b\u78ba\u8a8d\n\u65e2\u306b\u51fa\u73fe\u3057\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u65b9\u89d2\u306e\u30d1\u30ba\u30eb\u306b\u5bfe\u3057\u30665\u304b\u3089\u7e70\u308a\u8fd4\u3059\n\u307e\u3060\u51fa\u73fe\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u30ad\u30e5\u30fc\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n5 \u304b\u3089 8 \u307e\u3067\u3092\u3001\u5404\u65b9\u89d2\u306e\u30d1\u30ba\u30eb\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3059\n3 \u304b\u3089 9 \u307e\u3067\u3092\u3001\u30ad\u30e5\u30fc\u304c\u7a7a\u306b\u306a\u308b\u307e\u3067\u7d9a\u3051\u308b \n\n\n\u30dd\u30a4\u30f3\u30c8\n\n\u51fa\u73fe\u6e08\u307f\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3053\u3068\n\u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3001\u81ea\u8eab\u304c\u901a\u904e\u3057\u3066\u304d\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u3053\u3068\n\nclass Queue:\n    '''\n    \u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u30ad\u30e5\u30fc\u30af\u30e9\u30b9\n    '''\n    def __init__(self, puzzle):\n        self.puzzle_list = []\n\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u672b\u7aef\u306b\u8ffd\u52a0\n    def enqueue(self, puzzle):\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\n    def dequeue(self):\n        return self.puzzle_list.pop(0)\n\n    # \u30d1\u30ba\u30eb\u30ea\u30b9\u30c8\u304c\u7a7a\u304b\u30c1\u30a7\u30c3\u30af\n    def is_empty(self):\n        return len(self.puzzle_list) == 0\n\n\nclass Puzzle:\n    '''\n    \u73fe\u5728\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3001\u30c1\u30a7\u30c3\u30af\u3057\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u30ea\u30b9\u30c8\u3001\u30d1\u30ba\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u6301\u3064\u30d1\u30ba\u30eb\u30af\u30e9\u30b9\n    '''\n    def __init__(self, panel_list, state_list, size):\n        self.panel_list = panel_list\n\n        # \u81ea\u8eab\u304c\u901a\u904e\u3057\u3066\u304d\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u30ea\u30b9\u30c8\n        self.state_list = state_list\n        self.state_list.append(panel_list)\n\n        self.size = size\n\n    # \u30d1\u30cd\u30eb\u306e0\u3092\u5de6\u53f3\u4e0a\u4e0b\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8fd4\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\n    def gene_next_panel(self, puzzle):\n        zero_pos = puzzle.panel_list.index(0)\n\n        col = zero_pos // self.size\n        raw = zero_pos % self.size\n\n        def __get_next_panel():\n            panel_list = puzzle.panel_list[:]\n            n = panel_list[next_pos]\n            panel_list[next_pos] = 0\n            panel_list[zero_pos] = n\n            return panel_list\n\n        if self.size > col + 1:\n            next_pos = (col + 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if col - 1 >= 0:\n            next_pos = (col - 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if self.size > raw + 1:\n            next_pos = col * self.size + raw + 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if raw - 1 >= 0:\n            next_pos = col * self.size + raw - 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n    def result_print(self):\n\n        for s in self.state_list:\n            print(s)\n\ndef breadth_first(size, goal, panel_list):\n    puzzle = Puzzle(panel_list, [], size)\n    queue = Queue(puzzle)\n    checked_dict = {}\n\n    while queue.is_empty() is False:\n        puzzle = queue.dequeue()\n\n        for next_panel in puzzle.gene_next_panel(puzzle):\n            next_puzzle = Puzzle(list(next_panel), puzzle.state_list[:], size)\n\n            if next_panel in checked_dict:\n                continue\n\n            if list(next_panel) == goal:\n                return next_puzzle\n\n            # \u51fa\u73fe\u6e08\u307f\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8a18\u9332\n            checked_dict[next_panel] = True\n            queue.enqueue(next_puzzle)\n\nif __name__ == '__main__':\n    size = 3\n    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n    panel_list = [5, 4, 2, 6, 7, 0, 8, 1, 3]\n\n    puzzle = breadth_first(size, goal, panel_list)\n\n    puzzle.result_print()\n\n\n\u53cc\u65b9\u5411\u63a2\u7d22\n\n\u624b\u9806\n\n\u958b\u59cb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n\u958b\u59cb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n\u30b4\u30fc\u30eb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n\u30b4\u30fc\u30eb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n\u30ad\u30e5\u30fc\u306e\u5148\u982d\u304b\u3089\u30d1\u30ba\u30eb\u3092\u53d6\u5f97\n\u30d1\u30ba\u30eb\u3092\u4e0a\u4e0b\u5de6\u53f3\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u751f\u6210\n\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u6e08\u307f\u304b\u78ba\u8a8d\n\u65e2\u306b\u51fa\u73fe\u3057\u3066\u3044\u308c\u3070\u3001\u904e\u53bb\u306b\u305d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u3044\u305f\u30d1\u30ba\u30eb\u3068\u30c1\u30a7\u30c3\u30af\u4e2d\u306e\u30d1\u30ba\u30eb\u306e\u5411\u304d\u3092\u78ba\u8a8d\n\u30d1\u30ba\u30eb\u306e\u5411\u304d\u304c\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u30b4\u30fc\u30eb\n\u307e\u3060\u51fa\u73fe\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u78ba\u8a8d\u7528\u8f9e\u66f8\u3068\u30ad\u30e5\u30fc\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n5 \u304b\u3089 8 \u307e\u3067\u3092\u3001\u751f\u6210\u3057\u305f\u5404\u65b9\u89d2\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u306b\u5bfe\u3057\u3066\u5b9f\u65bd\n5 \u304b\u3089 10 \u307e\u3067\u3092\u3001\u30ad\u30e5\u30fc\u304c\u7a7a\u306b\u306a\u308b\u307e\u3067\u7d9a\u3051\u308b \n\n\n\u30dd\u30a4\u30f3\u30c8\n\n\u78ba\u8a8d\u7528\u8f9e\u66f8\u306b\u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3057\u3066\u304a\u304f\u3053\u3068\n\u904e\u53bb\u306b\u540c\u3058\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u3057\u305f\u969b\u3001\u305d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u6240\u6301\u3057\u3066\u3044\u305f\u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u901a\u904e\u8a18\u9332\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\nclass Queue:\n    '''\n    \u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u30ad\u30e5\u30fc\u30af\u30e9\u30b9\n    '''\n    def __init__(self, puzzle):\n        self.puzzle_list = []\n\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u672b\u7aef\u306b\u8ffd\u52a0\n    def enqueue(self, puzzle):\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\n    def dequeue(self):\n        return self.puzzle_list.pop(0)\n\n    # \u30d1\u30ba\u30eb\u30ea\u30b9\u30c8\u304c\u7a7a\u304b\u30c1\u30a7\u30c3\u30af\n    def is_empty(self):\n        return len(self.puzzle_list) == 0\n\n\nclass Puzzle:\n    '''\n    \u73fe\u5728\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3001\u30c1\u30a7\u30c3\u30af\u3057\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u30ea\u30b9\u30c8\u3001\u30d1\u30ba\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u6301\u3064\u30d1\u30ba\u30eb\u30af\u30e9\u30b9\n    '''\n    def __init__(self, panel_list, state_list, size, direction):\n        self.panel_list = panel_list\n        self.state_list = state_list\n        self.state_list.append(panel_list)\n        self.size = size\n        self.direction = direction\n\n    def gene_next_panel(self, puzzle):\n        zero_pos = puzzle.panel_list.index(0)\n\n        col = zero_pos // self.size\n        raw = zero_pos % self.size\n\n        def __get_next_panel():\n            panel_list = puzzle.panel_list[:]\n            n = panel_list[next_pos]\n            panel_list[next_pos] = 0\n            panel_list[zero_pos] = n\n            return panel_list\n\n        if self.size > col + 1:\n            next_pos = (col + 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if col - 1 >= 0:\n            next_pos = (col - 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if self.size > raw + 1:\n            next_pos = col * self.size + raw + 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if raw - 1 >= 0:\n            next_pos = col * self.size + raw - 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n    def result_print(self):\n\n        for s in self.state_list:\n            print(s)\n\n    def back_result_print(self):\n\n        for s in self.state_list[::-1]:\n            print(s)\n\ndef bidirectional_search(size, goal, panel_list):\n    start_puzzle = Puzzle(panel_list, [], size, 'S')\n    queue = Queue(start_puzzle)\n    goal_puzzle = Puzzle(goal, [], size, 'G')\n    queue.enqueue(goal_puzzle)\n\n    checked_dict = {}\n    checked_dict[tuple(panel_list)] = start_puzzle\n    checked_dict[tuple(goal)] = goal_puzzle\n\n    while queue.is_empty() is False:\n        puzzle = queue.dequeue()\n\n        for next_panel in puzzle.gene_next_panel(puzzle):\n\n            if next_panel in checked_dict:\n                checked_puzzle = checked_dict[next_panel]\n\n                if checked_puzzle.direction != puzzle.direction:\n                    return puzzle, checked_puzzle\n\n            else:\n                new_puzzle = Puzzle(list(next_panel), puzzle.state_list[:], size, puzzle.direction)\n                # \u78ba\u8a8d\u7528\u8f9e\u66f8\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n                checked_dict[next_panel] = new_puzzle\n                queue.enqueue(new_puzzle)\n\nif __name__ == '__main__':\n    size = 3\n    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n    panel_list = [5, 4, 2, 6, 7, 0, 8, 1, 3]\n\n    front_puzzle, back_puzzle = bidirectional_search(size, goal, panel_list)\n\n    front_puzzle.result_print()\n    back_puzzle.back_result_print()\n\n\n\u53c2\u7167\n\nAlgorithms with Python / \u5e45\u512a\u5148\u63a2\u7d22\u3068\u53cd\u5fa9\u6df1\u5316\n\n8\u30d1\u30ba\u30eb\u3092\u984c\u6750\u306b\u3057\u3066\u3001\u57fa\u672c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5e45\u512a\u5148\u63a2\u7d22\u3068\u53cc\u65b9\u5411\u63a2\u7d22\u3092\u5b9f\u88c5\n\n# \u5e45\u512a\u5148\u63a2\u7d22\n\n## \u624b\u9806\n\n1. \u958b\u59cb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n2. \u958b\u59cb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n3. \u30ad\u30e5\u30fc\u306e\u5148\u982d\u304b\u3089\u30d1\u30ba\u30eb\u3092\u53d6\u5f97\n4. \u30d1\u30ba\u30eb\u3092\u4e0a\u4e0b\u5de6\u53f3\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30ba\u30eb\u3092\u65b0\u898f\u4f5c\u6210\n5. \u305d\u306e\u30d1\u30ba\u30eb\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u30b4\u30fc\u30eb\u306a\u3089\u7d42\u4e86\n6. \u305d\u306e\u30d1\u30ba\u30eb\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u6e08\u307f\u304b\u78ba\u8a8d\n7. \u65e2\u306b\u51fa\u73fe\u3057\u3066\u3044\u308c\u3070\u3001\u6b21\u306e\u65b9\u89d2\u306e\u30d1\u30ba\u30eb\u306b\u5bfe\u3057\u30665\u304b\u3089\u7e70\u308a\u8fd4\u3059\n8. \u307e\u3060\u51fa\u73fe\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u30ad\u30e5\u30fc\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n9. 5 \u304b\u3089 8 \u307e\u3067\u3092\u3001\u5404\u65b9\u89d2\u306e\u30d1\u30ba\u30eb\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3059\n10. 3 \u304b\u3089 9 \u307e\u3067\u3092\u3001\u30ad\u30e5\u30fc\u304c\u7a7a\u306b\u306a\u308b\u307e\u3067\u7d9a\u3051\u308b \n\n## \u30dd\u30a4\u30f3\u30c8\n\n- \u51fa\u73fe\u6e08\u307f\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3053\u3068\n- \u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3001\u81ea\u8eab\u304c\u901a\u904e\u3057\u3066\u304d\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u3053\u3068\n\n\n```py\nclass Queue:\n    '''\n    \u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u30ad\u30e5\u30fc\u30af\u30e9\u30b9\n    '''\n    def __init__(self, puzzle):\n        self.puzzle_list = []\n\n        self.puzzle_list.append(puzzle)\n    \n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u672b\u7aef\u306b\u8ffd\u52a0\n    def enqueue(self, puzzle):\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\n    def dequeue(self):\n        return self.puzzle_list.pop(0)\n\n    # \u30d1\u30ba\u30eb\u30ea\u30b9\u30c8\u304c\u7a7a\u304b\u30c1\u30a7\u30c3\u30af\n    def is_empty(self):\n        return len(self.puzzle_list) == 0\n\n\nclass Puzzle:\n    '''\n    \u73fe\u5728\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3001\u30c1\u30a7\u30c3\u30af\u3057\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u30ea\u30b9\u30c8\u3001\u30d1\u30ba\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u6301\u3064\u30d1\u30ba\u30eb\u30af\u30e9\u30b9\n    '''\n    def __init__(self, panel_list, state_list, size):\n        self.panel_list = panel_list\n\n        # \u81ea\u8eab\u304c\u901a\u904e\u3057\u3066\u304d\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u72b6\u614b\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u30ea\u30b9\u30c8\n        self.state_list = state_list\n        self.state_list.append(panel_list)\n\n        self.size = size\n\n    # \u30d1\u30cd\u30eb\u306e0\u3092\u5de6\u53f3\u4e0a\u4e0b\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8fd4\u3059\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\n    def gene_next_panel(self, puzzle):\n        zero_pos = puzzle.panel_list.index(0)\n\n        col = zero_pos // self.size\n        raw = zero_pos % self.size\n\n        def __get_next_panel():\n            panel_list = puzzle.panel_list[:]\n            n = panel_list[next_pos]\n            panel_list[next_pos] = 0\n            panel_list[zero_pos] = n\n            return panel_list\n\n        if self.size > col + 1:\n            next_pos = (col + 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if col - 1 >= 0:\n            next_pos = (col - 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if self.size > raw + 1:\n            next_pos = col * self.size + raw + 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if raw - 1 >= 0:\n            next_pos = col * self.size + raw - 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n    def result_print(self):\n\n        for s in self.state_list:\n            print(s)\n\ndef breadth_first(size, goal, panel_list):\n    puzzle = Puzzle(panel_list, [], size)\n    queue = Queue(puzzle)\n    checked_dict = {}\n\n    while queue.is_empty() is False:\n        puzzle = queue.dequeue()\n\n        for next_panel in puzzle.gene_next_panel(puzzle):\n            next_puzzle = Puzzle(list(next_panel), puzzle.state_list[:], size)\n\n            if next_panel in checked_dict:\n                continue\n\n            if list(next_panel) == goal:\n                return next_puzzle\n\n            # \u51fa\u73fe\u6e08\u307f\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u8a18\u9332\n            checked_dict[next_panel] = True\n            queue.enqueue(next_puzzle)\n\nif __name__ == '__main__':\n    size = 3\n    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n    panel_list = [5, 4, 2, 6, 7, 0, 8, 1, 3]\n\n    puzzle = breadth_first(size, goal, panel_list)\n\n    puzzle.result_print()\n```\n\n# \u53cc\u65b9\u5411\u63a2\u7d22\n\n## \u624b\u9806\n\n1. \u958b\u59cb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n2. \u958b\u59cb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n3. \u30b4\u30fc\u30eb\u30d1\u30ba\u30eb\u3092\u751f\u6210\n4. \u30b4\u30fc\u30eb\u30d1\u30ba\u30eb\u3092\u30ad\u30e5\u30fc\u306b\u683c\u7d0d\n5. \u30ad\u30e5\u30fc\u306e\u5148\u982d\u304b\u3089\u30d1\u30ba\u30eb\u3092\u53d6\u5f97\n6. \u30d1\u30ba\u30eb\u3092\u4e0a\u4e0b\u5de6\u53f3\u306b\u79fb\u52d5\u3055\u305b\u305f\u3068\u304d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u751f\u6210\n7. \u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u6e08\u307f\u304b\u78ba\u8a8d\n8. \u65e2\u306b\u51fa\u73fe\u3057\u3066\u3044\u308c\u3070\u3001\u904e\u53bb\u306b\u305d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u3044\u305f\u30d1\u30ba\u30eb\u3068\u30c1\u30a7\u30c3\u30af\u4e2d\u306e\u30d1\u30ba\u30eb\u306e\u5411\u304d\u3092\u78ba\u8a8d\n9. \u30d1\u30ba\u30eb\u306e\u5411\u304d\u304c\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u30b4\u30fc\u30eb\n10. \u307e\u3060\u51fa\u73fe\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u3001\u78ba\u8a8d\u7528\u8f9e\u66f8\u3068\u30ad\u30e5\u30fc\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n11. 5 \u304b\u3089 8 \u307e\u3067\u3092\u3001\u751f\u6210\u3057\u305f\u5404\u65b9\u89d2\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u306b\u5bfe\u3057\u3066\u5b9f\u65bd\n12. 5 \u304b\u3089 10 \u307e\u3067\u3092\u3001\u30ad\u30e5\u30fc\u304c\u7a7a\u306b\u306a\u308b\u307e\u3067\u7d9a\u3051\u308b \n\n## \u30dd\u30a4\u30f3\u30c8\n- \u78ba\u8a8d\u7528\u8f9e\u66f8\u306b\u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3057\u3066\u304a\u304f\u3053\u3068\n- \u904e\u53bb\u306b\u540c\u3058\u30d1\u30cd\u30eb\u914d\u7f6e\u304c\u51fa\u73fe\u3057\u305f\u969b\u3001\u305d\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3092\u6240\u6301\u3057\u3066\u3044\u305f\u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u901a\u904e\u8a18\u9332\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n```py\nclass Queue:\n    '''\n    \u30d1\u30ba\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u30ad\u30e5\u30fc\u30af\u30e9\u30b9\n    '''\n    def __init__(self, puzzle):\n        self.puzzle_list = []\n\n        self.puzzle_list.append(puzzle)\n    \n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u672b\u7aef\u306b\u8ffd\u52a0\n    def enqueue(self, puzzle):\n        self.puzzle_list.append(puzzle)\n\n    # \u30d1\u30ba\u30eb\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u53d6\u5f97\n    def dequeue(self):\n        return self.puzzle_list.pop(0)\n\n    # \u30d1\u30ba\u30eb\u30ea\u30b9\u30c8\u304c\u7a7a\u304b\u30c1\u30a7\u30c3\u30af\n    def is_empty(self):\n        return len(self.puzzle_list) == 0\n\n\nclass Puzzle:\n    '''\n    \u73fe\u5728\u306e\u30d1\u30cd\u30eb\u914d\u7f6e\u3001\u30c1\u30a7\u30c3\u30af\u3057\u305f\u30d1\u30cd\u30eb\u914d\u7f6e\u306e\u30ea\u30b9\u30c8\u3001\u30d1\u30ba\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u6301\u3064\u30d1\u30ba\u30eb\u30af\u30e9\u30b9\n    '''\n    def __init__(self, panel_list, state_list, size, direction):\n        self.panel_list = panel_list\n        self.state_list = state_list\n        self.state_list.append(panel_list)\n        self.size = size\n        self.direction = direction\n\n    def gene_next_panel(self, puzzle):\n        zero_pos = puzzle.panel_list.index(0)\n\n        col = zero_pos // self.size\n        raw = zero_pos % self.size\n\n        def __get_next_panel():\n            panel_list = puzzle.panel_list[:]\n            n = panel_list[next_pos]\n            panel_list[next_pos] = 0\n            panel_list[zero_pos] = n\n            return panel_list\n\n        if self.size > col + 1:\n            next_pos = (col + 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if col - 1 >= 0:\n            next_pos = (col - 1) * self.size + raw\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if self.size > raw + 1:\n            next_pos = col * self.size + raw + 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n        if raw - 1 >= 0:\n            next_pos = col * self.size + raw - 1\n            panel_list = __get_next_panel()\n            yield tuple(panel_list)\n\n    def result_print(self):\n\n        for s in self.state_list:\n            print(s)\n\n    def back_result_print(self):\n\n        for s in self.state_list[::-1]:\n            print(s)\n\ndef bidirectional_search(size, goal, panel_list):\n    start_puzzle = Puzzle(panel_list, [], size, 'S')\n    queue = Queue(start_puzzle)\n    goal_puzzle = Puzzle(goal, [], size, 'G')\n    queue.enqueue(goal_puzzle)\n\n    checked_dict = {}\n    checked_dict[tuple(panel_list)] = start_puzzle\n    checked_dict[tuple(goal)] = goal_puzzle\n\n    while queue.is_empty() is False:\n        puzzle = queue.dequeue()\n\n        for next_panel in puzzle.gene_next_panel(puzzle):\n\n            if next_panel in checked_dict:\n                checked_puzzle = checked_dict[next_panel]\n\n                if checked_puzzle.direction != puzzle.direction:\n                    return puzzle, checked_puzzle\n\n            else:\n                new_puzzle = Puzzle(list(next_panel), puzzle.state_list[:], size, puzzle.direction)\n                # \u78ba\u8a8d\u7528\u8f9e\u66f8\u306b\u30d1\u30ba\u30eb\u3092\u683c\u7d0d\n                checked_dict[next_panel] = new_puzzle\n                queue.enqueue(new_puzzle)\n\nif __name__ == '__main__':\n    size = 3\n    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n    panel_list = [5, 4, 2, 6, 7, 0, 8, 1, 3]\n\n    front_puzzle, back_puzzle = bidirectional_search(size, goal, panel_list)\n\n    front_puzzle.result_print()\n    back_puzzle.back_result_print()\n```\n\n# \u53c2\u7167\n- [Algorithms with Python / \u5e45\u512a\u5148\u63a2\u7d22\u3068\u53cd\u5fa9\u6df1\u5316](http://www.geocities.jp/m_hiroi/light/pyalgo27.html)\n", "tags": ["Python", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}