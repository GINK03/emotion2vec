{"tags": ["Swift", "MVVM", "DependencyInjection", "ReactiveCocoa", "Swinject"], "context": " More than 1 year has passed since last update.\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u7ffb\u8a33\u3067\u3059\u3002\nDependency Injection in MVVM Architecture with ReactiveCocoa Part 5: Asynchronous Image Load\n\n\u524d\u56de\u306e\u8a18\u4e8b\u307e\u3067\u3067\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u57fa\u3044\u3066\u3001Pixabay\u306e\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3055\u308c\u305f\u753b\u50cf\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u4f8b\u984c\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u975e\u540c\u671f\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u975e\u540c\u671f\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3068\u540c\u69d8\u306bReactiveCocoa\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u958b\u767a\u3092\u901a\u3057\u3066\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3068Dependency Injection\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u306a\u304c\u3089MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n\nSwinjectMVVMExample: \u767a\u5c55\u5f62\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\nSwinjectMVVMExample_ForBlog: (Xcode\u3084\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u66f4\u65b0\u3092\u9664\u304d) \u30d6\u30ed\u30b0\u8a18\u4e8b\u306b\u6cbf\u3063\u305f\u8aac\u660e\u306e\u305f\u3081\u306e\u7c21\u7565\u5316\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n\nModel\n\u6700\u521d\u306b\u3001\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u6a5f\u80fd\u3092Model\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002Networking\u30d7\u30ed\u30c8\u30b3\u30eb\u306brequestImage\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u753b\u50cf\u306eURL\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u753b\u50cf\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u9001\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002\nNetworking.swift\nimport ReactiveCocoa\n\npublic protocol Networking {\n    // \u7701\u7565\n\n    func requestImage(url: String) -> SignalProducer<UIImage, NetworkError>\n}\n\nrequestImage\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306bNetwork\u30af\u30e9\u30b9\u3092\u4fee\u6b63\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u306f\u3001SignalProducer\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u4e0e\u3048\u308b\u30c8\u30ec\u30fc\u30ea\u30f3\u30b0\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3044\u3001Alamofire\u304b\u3089\u306e\u975e\u540c\u671f\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092ReactiveCocoa\u306eSignal\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002Alamofire\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u3057\u3066\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u3001.Next\u3068.Completed\u30a4\u30d9\u30f3\u30c8\u3092observer\u306b\u9001\u51fa\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f.Failed\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002Alamofire\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u305f\u3081\u3001Alamofire\u306b\u30b7\u30ea\u30a2\u30eb\u30ad\u30e5\u30fc\u3092\u6e21\u3057\u3066\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nNetwork.swift\nimport ReactiveCocoa\nimport Alamofire\n\npublic final class Network: Networking {\n    private let queue = dispatch_queue_create(\n        \"SwinjectMMVMExample.ExampleModel.Network.Queue\",\n        DISPATCH_QUEUE_SERIAL)\n\n    // \u7701\u7565\n\n    public func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n        return SignalProducer { observer, disposable in\n            let serializer = Alamofire.Request.dataResponseSerializer()\n            Alamofire.request(.GET, url)\n                .response(queue: self.queue, responseSerializer: serializer) {\n                    response in\n                    switch response.result {\n                    case .Success(let data):\n                        guard let image = UIImage(data: data) else {\n                            observer.sendFailed(.IncorrectDataReturned)\n                            return\n                        }\n                        observer.sendNext(image)\n                        observer.sendCompleted()\n                    case .Failure(let error):\n                        observer.sendFailed(NetworkError(error: error))\n                    }\n            }\n        }\n    }\n}\n\nNetworking\u30d7\u30ed\u30c8\u30b3\u30eb\u306brequestImage\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001ImageSearchSpec\u3067\u4f7f\u3063\u3066\u3044\u308b\u30b9\u30bf\u30d6\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u305d\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u306f\u7279\u306brequestImage\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7a7a\u306eSignalProducer\u3092\u30b9\u30bf\u30d6\u304c\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nImageSearchSpec.swift\nimport Quick\nimport Nimble\nimport ReactiveCocoa\n@testable import ExampleModel\n\nclass ImageSearchSpec: QuickSpec {\n    // MARK: Stub\n    class GoodStubNetwork: Networking {\n        // \u7701\u7565\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer.empty\n        }\n    }\n\n    class BadStubNetwork: Networking {\n        // \u7701\u7565\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer.empty\n        }\n    }\n\n    class ErrorStubNetwork: Networking {\n        // \u7701\u7565\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer.empty\n        }\n    }\n\n    // \u7701\u7565\n}\n\n\u305d\u308c\u3067\u306f\u3001requestImage\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092NetworkSpec\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306e\u5b89\u5b9a\u3057\u305f\u30b5\u30fc\u30d0\u3068\u3057\u3066httpbin.org\u3092\u4f7f\u3044\u307e\u3059\u3002\nNetworkSpec.swift\nimport Quick\nimport Nimble\n@testable import ExampleModel\n\nclass NetworkSpec: QuickSpec {\n    override func spec() {\n        var network: Network!\n        beforeEach {\n            network = Network()\n        }\n\n        // \u7701\u7565\n\n        describe(\"Image\") {\n            it(\"eventually gets an image.\") {\n                var image: UIImage?\n                network.requestImage(\"https://httpbin.org/image/jpeg\")\n                    .on(next: { image = $0 })\n                    .start()\n\n                expect(image).toEventuallyNot(beNil(), timeout: 5)\n            }\n            it(\"eventually gets an error if incorrect data for an image is returned.\") {\n                var error: NetworkError?\n                network.requestImage(\"https://httpbin.org/get\")\n                    .on(failed: { error = $0 })\n                    .start()\n\n                expect(error).toEventually(\n                    equal(NetworkError.IncorrectDataReturned), timeout: 5)\n            }\n            it(\"eventually gets an error if the network has a problem.\") {\n                var error: NetworkError? = nil\n                network.requestImage(\"https://not.existing.server.comm/image/jpeg\")\n                    .on(failed: { error = $0 })\n                    .start()\n\n                expect(error).toEventually(\n                    equal(NetworkError.NotReachedServer), timeout: 5)\n            }\n        }\n    }\n}\n\n1\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6210\u529f\u3059\u308b\u30b1\u30fc\u30b9\u3068\u3057\u3066Network\u304c\u975e\u540c\u671f\u306b\u753b\u50cf\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30022\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30b5\u30fc\u30d0\u304b\u3089\u753b\u50cf\u3067\u306a\u3044\u30c7\u30fc\u30bf\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306bNetwork\u304cNetworkError.IncorrectDataReturned\u30a8\u30e9\u30fc\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30023\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001Alamofire\u304b\u3089\u306e\u30a8\u30e9\u30fc\u304c\u5bfe\u5fdc\u3059\u308bNetworkError\u306b\u5909\u63db\u3055\u308c\u3066Network\u304b\u3089\u9001\u51fa\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\nCommand-U\u3092\u5165\u529b\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\nViewModel\n\u305d\u308c\u3067\u306f\u3001Model\u304b\u3089\u753b\u50cf\u3092\u53d7\u3051\u53d6\u308aView\u306e\u305f\u3081\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308bViewModel\u3078\u3068\u79fb\u308a\u307e\u3057\u3087\u3046\u3002\u59cb\u3081\u306b\u3001ExampleViewModel\u30b0\u30eb\u30fc\u30d7\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eRACUtil.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u3001ExampleViewModel\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nRACUtil.swift\nimport Foundation\nimport ReactiveCocoa\n\ninternal extension NSObject {\n    internal var racutil_willDeallocProducer: SignalProducer<(), NoError>  {\n        return self.rac_willDeallocSignal()\n            .toSignalProducer()\n            .map { _ in }\n            .flatMapError { _ in SignalProducer(value: ()) }\n    }\n}\n\nNSObject\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u4e2d\u3067rac_willDeallocSignal\u3092\u5909\u63db\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7834\u68c4\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7a7a\u306e\u30bf\u30d7\u30eb\u3092\u9001\u51fa\u3059\u308bSignalProducer\u3092\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u305f\u306e\u306f\u3001ReactiveCocoa\u306eSwift API\u3067\u306fObjective-C API\u306b\u3042\u308brac_willDeallocSignal\u306b\u76f8\u5f53\u3059\u308b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c\u307e\u3060\u306a\u3044\u305f\u3081\u3067\u3059\u3002toSignalProducer\u306b\u3088\u308aObjective-C\u306eSignal\u3092Swift\u306eSignalProducer\u306b\u5909\u63db\u3057\u3001map\u3068flatMapError\u3067\u30a4\u30d9\u30f3\u30c8\u3068\u30a8\u30e9\u30fc\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\nImageSearchTableViewCellModeling\u30d7\u30ed\u30c8\u30b3\u30eb\u3068ImageSearchTableViewCellModel\u30af\u30e9\u30b9\u306bgetPreviewImage\u30e1\u30bd\u30c3\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nImageSearchTableViewCellModeling.swift\nimport ReactiveCocoa\n\npublic protocol ImageSearchTableViewCellModeling {\n    var id: UInt64 { get }\n    var pageImageSizeText: String { get }\n    var tagText: String { get }\n\n    func getPreviewImage() -> SignalProducer<UIImage?, NoError>\n}\n\nImageSearchTableViewCellModel.swift\nimport ReactiveCocoa\nimport ExampleModel\n\npublic final class ImageSearchTableViewCellModel\n    : NSObject, ImageSearchTableViewCellModeling\n{\n    public let id: UInt64\n    public let pageImageSizeText: String\n    public let tagText: String\n\n    private let network: Networking\n    private let previewURL: String\n    private var previewImage: UIImage?\n\n    internal init(image: ImageEntity, network: Networking) {\n        id = image.id\n        pageImageSizeText = \"\\(image.pageImageWidth) x \\(image.pageImageHeight)\"\n        tagText = image.tags.joinWithSeparator(\", \")\n\n        self.network = network\n        previewURL = image.previewURL\n\n        super.init()\n    }\n\n    public func getPreviewImage() -> SignalProducer<UIImage?, NoError> {\n        if let previewImage = self.previewImage {\n            return SignalProducer(value: previewImage).observeOn(UIScheduler())\n        }\n        else {\n            let imageProducer = network.requestImage(previewURL)\n                .takeUntil(self.racutil_willDeallocProducer)\n                .on(next: { self.previewImage = $0 })\n                .map { $0 as UIImage? }\n                .flatMapError { _ in SignalProducer<UIImage?, NoError>(value: nil) }\n\n            return SignalProducer(value: nil)\n                .concat(imageProducer)\n                .observeOn(UIScheduler())\n        }\n    }\n}\n\ngetPreviewImage\u30e1\u30bd\u30c3\u30c9\u306fUIImage\u3092\u9001\u51fa\u3059\u308bSignalProducer\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u753b\u50cf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u304cpreviewImage\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5b58\u5728\u3057\u305f\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u753b\u50cf\u3092\u4f7f\u3046SignalProducer\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070Networking\u306b\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308bSignalProducer\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f8c\u8005\u306e\u5834\u5408\u306eSignalProducer\u306fconcat\u3067\u7e4b\u304c\u308c\u305f2\u3064\u306e\u90e8\u5206\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u30021\u3064\u76ee\u306f\u3001\u3059\u3050\u306bnil\u3092\u9001\u51fa\u3057\u3066\u7d42\u4e86\u3059\u308bSignalProducer(value: nil)\u3067\u3059\u3002\u6700\u521d\u306bnil\u3092\u9001\u51fa\u3059\u308b\u306e\u306f\u3001\u518d\u5229\u7528\u3055\u308c\u305f\u30bb\u30eb\u306eUIImageView\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u53e4\u3044\u753b\u50cf\u3092\u53d6\u308a\u9664\u304f\u305f\u3081\u3067\u3059\u30022\u3064\u76ee\u306f\u3001Networking\u306b\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308bimageProducer\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u30d3\u30e5\u30fc\u306e\u5404\u30bb\u30eb\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u306e\u3067\u3001flatMapError\u3092\u7528\u3044\u3066\u30a8\u30e9\u30fc\u3092nil\u306b\u5909\u63db\u3057\u3066\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002ImageSearchTableViewCellModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u305f\u6642\u306bSignalProducer\u3092\u505c\u6b62\u3059\u308b\u305f\u3081\u3001racutil_willDeallocProducer\u3092\u5f15\u6570\u306b\u3057\u3066takeUntil\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002NSObject\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001ImageSearchTableViewCellModel\u306fNSObject\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u30591\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bNetworking\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046ImageSearchTableViewModel\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002Networking\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6ce8\u5165\u3067\u304d\u308b\u3088\u3046\u306b\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002startSearch\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u3001Networking\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092ImageSearchTableViewCellModel\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u6e21\u3057\u307e\u3059\u3002\nImageSearchTableViewModel.swift\nimport ReactiveCocoa\nimport ExampleModel\n\npublic final class ImageSearchTableViewModel: ImageSearchTableViewModeling {\n    public var cellModels: AnyProperty<[ImageSearchTableViewCellModeling]> {\n        return AnyProperty(_cellModels)\n    }\n    private let _cellModels = MutableProperty<[ImageSearchTableViewCellModeling]>([])\n    private let imageSearch: ImageSearching\n    private let network: Networking\n\n    public init(imageSearch: ImageSearching, network: Networking) {\n        self.imageSearch = imageSearch\n        self.network = network\n    }\n\n    public func startSearch() {\n        imageSearch.searchImages()\n            .map { response in\n                response.images.map {\n                    ImageSearchTableViewCellModel(image: $0, network: self.network)\n                        as ImageSearchTableViewCellModeling\n                }\n            }\n            .observeOn(UIScheduler())\n            .on(next: { cellModels in\n                self._cellModels.value = cellModels\n            })\n            .start()\n    }\n}\n\n\u6700\u5f8c\u306b\u3001Dependency Injection\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306bAppDelegate\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306bNetworking\u3092ImageSearchTableViewModel\u306b\u6ce8\u5165\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nAppDelegate.swift\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n    let container = Container() { container in\n        // Models\n        container.register(Networking.self) { _ in Network() }\n        container.register(ImageSearching.self) { r in\n            ImageSearch(network: r.resolve(Networking.self)!)\n        }\n\n        // View models\n        container.register(ImageSearchTableViewModeling.self) { r in\n            ImageSearchTableViewModel(\n                imageSearch: r.resolve(ImageSearching.self)!,\n                network: r.resolve(Networking.self)!)\n        }\n\n        // Views\n        container.registerForStoryboard(ImageSearchTableViewController.self) { r, c in\n            c.viewModel = r.resolve(ImageSearchTableViewModeling.self)!\n        }\n    }\n\n    // \u7701\u7565\n}\n\n\u305d\u308c\u3067\u306f\u3001ViewModel\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u5408\u308f\u305b\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u30fb\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\u6700\u521d\u306bImageSearchTableViewModelSpec\u3092\u4fee\u6b63\u3057\u3001StubNetwork\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001ImageSearchTableViewModel\u306e\u4fee\u6b63\u3057\u305f\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u6e21\u3059\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002\nImageSearchTableViewModelSpec.swift\nclass ImageSearchTableViewModelSpec: QuickSpec {\n    // MARK: Stub\n    class StubImageSearch: ImageSearching {\n        func searchImages() -> SignalProducer<ResponseEntity, NetworkError> {\n            return SignalProducer { observer, disposable in\n                observer.sendNext(dummyResponse)\n                observer.sendCompleted()\n            }\n            .observeOn(QueueScheduler())\n        }\n    }\n\n    class StubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            return SignalProducer.empty\n        }\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer.empty\n        }\n    }\n\n    // MARK: Spec\n    override func spec() {\n        var viewModel: ImageSearchTableViewModel!\n        beforeEach {\n            viewModel = ImageSearchTableViewModel(\n                imageSearch: StubImageSearch(),\n                network: StubNetwork())\n        }\n\n        // \u7701\u7565\n    }\n}\n\n\u5f8c\u3067\u4f7f\u3046\u305f\u3081\u3001DummyResponse.swift\u306b\u30c0\u30df\u30fc\u306e\u753b\u50cf\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nDummyResponse.swift\nlet image1x1: UIImage = {\n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(1, 1), true, 0)\n    let image = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return image\n}()\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b9\u30bf\u30d6\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092ImageSearchTableViewCellModelSpec\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nImageSearchTableViewCellModelSpec.swift\nimport Foundation\nimport Quick\nimport Nimble\nimport ReactiveCocoa\n@testable import ExampleModel\n@testable import ExampleViewModel\n\nclass ImageSearchTableViewCellModelSpec: QuickSpec {\n    // MARK: Stubs\n    class StubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            return SignalProducer.empty\n        }\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer(value: image1x1).observeOn(QueueScheduler())\n        }\n    }\n\n    class ErrorStubNetwork: Networking {\n        func requestJSON(url: String, parameters: [String : AnyObject]?)\n            -> SignalProducer<AnyObject, NetworkError>\n        {\n            return SignalProducer.empty\n        }\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n            return SignalProducer(error: .NotConnectedToInternet)\n        }\n    }\n\n    // MARK: Spec\n    override func spec() {\n        var viewModel: ImageSearchTableViewCellModel!\n        beforeEach {\n            viewModel = ImageSearchTableViewCellModel(\n                image: dummyResponse.images[0],\n                network: StubNetwork())\n        }\n\n        describe(\"Constant values\") {\n            it(\"sets id.\") {\n                expect(viewModel.id).toEventually(equal(10000))\n            }\n            it(\"formats tag and page image size texts.\") {\n                expect(viewModel.pageImageSizeText)\n                    .toEventually(equal(\"1000 x 2000\"))\n                expect(viewModel.tagText).toEventually(equal(\"a, b\"))\n            }\n        }\n        describe(\"Preview image\") {\n            it(\"returns nil at the first time.\") {\n                var image: UIImage? = image1x1\n                viewModel.getPreviewImage()\n                    .take(1)\n                    .on(next: { image = $0 })\n                    .start()\n\n                expect(image).toEventually(beNil())\n            }\n            it(\"eventually returns an image.\") {\n                var image: UIImage? = nil\n                viewModel.getPreviewImage()\n                    .on(next: { image = $0 })\n                    .start()\n\n                expect(image).toEventuallyNot(beNil())\n            }\n            it(\"returns an image on the main thread.\") {\n                var onMainThread = false\n                viewModel.getPreviewImage()\n                    .skip(1) // Skips the first nil.\n                    .on(next: { _ in onMainThread = NSThread.isMainThread() })\n                    .start()\n\n                expect(onMainThread).toEventually(beTrue())\n            }\n            context(\"with an image already downloaded\") {\n                it(\"immediately returns the image omitting the first nil.\") {\n                    var image: UIImage? = nil\n                    viewModel.getPreviewImage().start(completed: {\n                        viewModel.getPreviewImage()\n                            .take(1)\n                            .on(next: { image = $0 })\n                            .start()\n                    })\n\n                    expect(image).toEventuallyNot(beNil())\n                }\n            }\n            context(\"on error\") {\n                it(\"returns nil.\") {\n                    var image: UIImage? = image1x1\n                    let viewModel = ImageSearchTableViewCellModel(\n                        image: dummyResponse.images[0],\n                        network: ErrorStubNetwork())\n                    viewModel.getPreviewImage()\n                        .skip(1) // Skips the first nil.\n                        .on(next: { image = $0 })\n                        .start()\n\n                    expect(image).toEventually(beNil())\n                }\n            }\n        }\n    }\n}\n\nStubNetwork\u306erequestImage\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5148\u307b\u3069\u306e\u30c0\u30df\u30fc\u753b\u50cf\u3092\u9001\u51fa\u3059\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002ErrorStubNetwork\u306e\u540c\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a8\u30e9\u30fc\u3092\u9001\u51fa\u3059\u308bSignalProducer\u3092\u8fd4\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u524d\u306b\u3001spec\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u65e2\u5b58\u306e\u30c6\u30b9\u30c8\u3092describe(\"Constant values\")\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\ndescribe(\"Preview image\")\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306b\u306f\u3001getPreviewImage\u30e1\u30bd\u30c3\u30c9\u306e\u305f\u3081\u306e\u65b0\u3057\u3044\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u30925\u3064\u8ffd\u52a0\u3057\u307e\u3057\u305f\u30021\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001SignalProducer\u304c\u6700\u521d\u306e\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066nil\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30022\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6210\u529f\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u753b\u50cf\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30023\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u753b\u50cf\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30024\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u753b\u50cf\u3092\u5373\u5ea7\u306b\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u306f\u7279\u5b9a\u306e\u6761\u4ef6\u4e0b\u3067\u306e\u78ba\u8a8d\u306e\u305f\u3081\u3001context\u3067\u3055\u3089\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u3042\u308a\u307e\u3059\u30025\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001Networking\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u306e\u30a8\u30e9\u30fc\u3092nil\u306b\u5909\u63db\u3057\u3066\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u3082context`\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nCommand-U\u3092\u5165\u529b\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u308c\u3067\u306f\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u79fb\u308a\u3001View\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nView\n\u59cb\u3081\u306b\u3001NSObject\u306e\u6642\u3068\u540c\u69d8\u306bUITableViewCell\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u30592\u3002ExampleView\u30b0\u30eb\u30fc\u30d6\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eRACUtil.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u3001ReactiveCocoa\u306eObjective-C API\u306erac_prepareForReuseSignal\u3092Swift\u306e\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002UITableViewCell\u306eprepareForReuse\u304c\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001\u7a7a\u306e\u30bf\u30d7\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u9001\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nRACUtil.swift\nimport UIKit\nimport ReactiveCocoa\n\ninternal extension UITableViewCell {\n    internal var racutil_prepareForReuseProducer: SignalProducer<(), NoError>  {\n        return self.rac_prepareForReuseSignal\n            .toSignalProducer()\n            .map { _ in }\n            .flatMapError { _ in SignalProducer(value: ()) }\n    }\n}\n\n\u6b21\u306b\u3001ImageSearchTableViewCell\u3092\u4fee\u6b63\u3057\u3001viewModel\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642\u306b\u30a4\u30e1\u30fc\u30b8\u30d3\u30e5\u30fc\u3092\u66f4\u65b0\u3059\u308b\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\u904e\u304e\u53bb\u3063\u305fRow\u306e\u305f\u3081\u306e\u753b\u50cf\u3067\u9593\u9055\u3063\u3066\u30bb\u30eb\u304c\u66f4\u65b0\u3055\u308c\u306a\u3044\u3088\u3046\u3001\u30bb\u30eb\u304c\u4ed6\u306eRow\u306e\u305f\u3081\u306b\u518d\u5229\u7528\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067getPreviewImage\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u505c\u6b62\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nImageSearchTableViewCell.swift\nimport UIKit\nimport ExampleViewModel\nimport ReactiveCocoa\n\ninternal final class ImageSearchTableViewCell: UITableViewCell {\n    internal var viewModel: ImageSearchTableViewCellModeling? {\n        didSet {\n            tagLabel.text = viewModel?.tagText\n            imageSizeLabel.text = viewModel?.pageImageSizeText\n\n            if let viewModel = viewModel {\n                viewModel.getPreviewImage()\n                    .takeUntil(self.racutil_prepareForReuseProducer)\n                    .on(next: { self.previewImageView.image = $0 })\n                    .start()\n            }\n            else {\n                previewImageView.image = nil\n            }\n        }\n    }\n\n    @IBOutlet weak var previewImageView: UIImageView!\n    @IBOutlet weak var tagLabel: UILabel!\n    @IBOutlet weak var imageSizeLabel: UILabel!\n}\n\nCommand-R\u3092\u5165\u529b\u3057\u3066\u30a2\u30d7\u30ea\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4e0b\u306e\u3088\u3046\u306b\u3001\u5404\u30a4\u30e1\u30fc\u30b8\u30d3\u30e5\u30fc\u306b\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u6700\u5f8c\u306b\u3001ExampleViewTests\u30b0\u30eb\u30fc\u30d6\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306eImageSearchTableViewCellSpec.swift\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002ExampleViewTests\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\nImageSearchTableViewCellSpec.swift\nimport Quick\nimport Nimble\nimport ReactiveCocoa\nimport ExampleViewModel\n@testable import ExampleView\n\nclass ImageSearchTableViewCellSpec: QuickSpec {\n    class MockViewModel: ImageSearchTableViewCellModeling {\n        let id: UInt64 = 0\n        let pageImageSizeText = \"\"\n        let tagText = \"\"\n\n        var getPreviewImageStarted = false\n\n        func getPreviewImage() -> SignalProducer<UIImage?, NoError> {\n            return SignalProducer<UIImage?, NoError> { observer, _ in\n                self.getPreviewImageStarted = true\n                observer.sendCompleted()\n            }\n        }\n    }\n\n    override func spec() {\n        it(\"starts getPreviewImage signal producer when its view model is set.\") {\n            let viewModel = MockViewModel()\n            let view = createTableViewCell()\n\n            expect(viewModel.getPreviewImageStarted) == false\n            view.viewModel = viewModel\n            expect(viewModel.getPreviewImageStarted) == true\n        }\n    }\n}\n\nprivate func createTableViewCell() -> ImageSearchTableViewCell {\n    let bundle = NSBundle(forClass: ImageSearchTableViewCell.self)\n    let storyboard = UIStoryboard(name: \"Main\", bundle: bundle)\n    let tableViewController = storyboard\n        .instantiateViewControllerWithIdentifier(\"ImageSearchTableViewController\")\n        as! ImageSearchTableViewController\n    return tableViewController.tableView\n        .dequeueReusableCellWithIdentifier(\"ImageSearchTableViewCell\")\n        as! ImageSearchTableViewCell\n}\n\n\u3053\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001ImageSearchTableViewCell\u306eviewModel\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642\u306bgetPreviewImage\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3092ImageSearchTableViewCellModeling\u306e\u30e2\u30c3\u30af\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\nCommand-U\u3092\u62bc\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\uff01\u3053\u308c\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u975e\u540c\u671f\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u30d3\u30e5\u30fc\u3092\u5b9f\u88c5\u3057\u7d42\u3048\u307e\u3057\u305f\u3002\u5b9f\u88c5\u3060\u3051\u3067\u306a\u304f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u3042\u308b\u306e\u3067\u3001\u52d5\u304f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u81ea\u4fe1\u3092\u6301\u3063\u3066\u958b\u767a\u3057\u7d9a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\uff01\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u753b\u50cf\u3092UIImageView\u306b\u975e\u540c\u671f\u3067\u30ed\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u3092MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f4\u65b0\u3059\u308b\u3068\u3068\u3082\u306b\u3001Model\u3001ViewModel\u3001View\u306e\u5404\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u65b0\u3057\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u624b\u9806\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u5b9f\u88c5\u306e\u969b\u3001ViewModel\u306b\u5bfe\u3059\u308bDependency Injection\u3082\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u307e\u3057\u305f\u3002\u62bd\u8c61\u5316\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u9001\u51fa\u3068\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306bReactiveCocoa\u3092Model\u3001ViewModel\u3001View\u306e\u3059\u3079\u3066\u306b\u304a\u3044\u3066\u7528\u3044\u307e\u3057\u305f\u3002\n\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u30b7\u30ea\u30fc\u30ba\u3092\u901a\u3057\u3066\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\n\nPart 1: MVVM\u3068ReactiveCocoa\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u57fa\u672c\nPart 2: MVVM\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u308bXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3068Carthage\u306b\u3088\u308b\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nPart 3: \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u306e\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u30a2\u30d7\u30ea\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u3063\u305fModel\u306e\u8a2d\u8a08\nPart 4: ViewModel\u3068View\u306e\u5b9f\u88c5\u304a\u3088\u3073AppDelegate\u304b\u3089\u306eDependency Injection\nPart 5: \u65b0\u3057\u3044\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306eModel\u3001ViewModel\u3001View\u306e\u4fee\u6b63\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f4\u65b0\n\n\u3053\u308c\u307e\u3067\u5358\u306b\u4f8b\u984c\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001MVVM\u306e\u5883\u754c\u3068\u306a\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u30b9\u30bf\u30d6\u3084\u30e2\u30c3\u30af\u3092\u7528\u3044\u305f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u304d\u307e\u3057\u305f3\u3002MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e2d\u3067\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u5b9f\u88c5\u3001\u305d\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u30b5\u30a4\u30af\u30eb\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u9032\u3081\u3066\u3044\u304f\u969b\u306e\u81ea\u4fe1\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002ReactiveCocoa\u306e\u62bd\u8c61\u5316\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u3068Swinject\u306b\u3088\u308bDependency Injection\u3067Model\u3001View\u3001ViewModel\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u3053\u3068\u304c\u305d\u306e\u30b5\u30a4\u30af\u30eb\u306e\u9375\u3068\u306a\u308a\u307e\u30594\u3002\n\u3053\u308c\u3067\u672c\u30b7\u30ea\u30fc\u30ba\u306f\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001GitHub\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u753b\u50cf\u306e\u8a73\u7d30\u30d3\u30e5\u30fc\u306e\u8868\u793a\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4e0b\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u306b\u8ffd\u52a0\u3067\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3001\u30ed\u30fc\u30ab\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3001\u3088\u308a\u9032\u3093\u3060\u958b\u767a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u8208\u5473\u304c\u3042\u308c\u3070\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002GitHub\u4e0a\u306eSwinject\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30b9\u30bf\u30fc\u3092\u4ed8\u3051\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52b1\u307f\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u30b7\u30ea\u30fc\u30ba\u306e\u7ffb\u8a33\u306f\u7d42\u4e86\u3067\u3059\u3002\n\u8a18\u4e8b\u306e\u4e2d\u3067\u306f\u3001MVVM\u306e\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u304d\u3063\u3061\u308a\u5206\u3051\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3042\u307e\u308a\u3084\u308a\u904e\u304e\u308b\u3068\u958b\u767a\u306e\u30b9\u30d4\u30fc\u30c9\u3092\u843d\u3068\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba (\u958b\u767a\u8005\u306e\u4eba\u6570\u3084\u30a2\u30d7\u30ea\u306e\u30b5\u30a4\u30ba) \u306b\u5408\u308f\u305b\u3066\u9069\u5b9c\u8abf\u6574\u3059\u308b\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7279\u306b\u3001UI\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u308b\u306a\u3089\u3001View\u304b\u3089ViewModel\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4ecb\u3055\u305a\u306b\u5b9f\u4f53\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u5341\u5206\u3060\u3068\u601d\u3044\u307e\u3059\u3002ReactiveCocoa\u306eMutableProperty\u3092AnyProperty\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u30e9\u30c3\u30d7\u3057\u3066\u3001\u5916\u90e8\u304b\u3089\u306f\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u30011\u4eba\u3067\u958b\u767a\u3059\u308b\u3088\u3046\u306a\u5c0f\u3055\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308c\u3070\u3053\u308c\u3082\u5c11\u3057\u7169\u96d1\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nMVVM\u306e\u4ed6\u306b\u3082VIPER\u306a\u3069\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u958b\u767a\u898f\u6a21\u306b\u5fdc\u3058\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u9078\u629e\u3068\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3057\u3087\u3046\u3002\n\n\n\n\n\u8a33\u6ce8: \u3053\u3053\u3067\u306f\u7c21\u4fbf\u306e\u305f\u3081NSObject\u3092\u7d99\u627f\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001Swift\u3060\u3051\u3067\u540c\u7b49\u306e\u4e8b\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u8a33\u6ce8: UITableViewCell\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001UIKit\u306e\u4e00\u90e8\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304cRex\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u3044\u3064\u3082\u6a5f\u80fd\u306e\u5b9f\u88c5\u3092\u3057\u305f\u3042\u3068\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u30c6\u30b9\u30c8\u3092\u5148\u306b\u66f8\u304f\u304b\u6a5f\u80fd\u306e\u5b9f\u88c5\u3068\u4e00\u7dd2\u306b\u66f8\u3044\u3066\u3044\u304f\u307b\u3046\u304c\u826f\u3044\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u8a33\u6ce8: \u5c11\u3057\u8a00\u3044\u904e\u304e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3082\u3068\u3082\u3068\u82f1\u8a9e\u306e\u6587\u7ae0\u3060\u3063\u305f\u306e\u3067\u3002\u00a0\u21a9\n\n\n\n\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\n[Dependency Injection in MVVM Architecture with ReactiveCocoa Part 5: Asynchronous Image Load](https://yoichitgy.github.io/post/dependency-injection-in-mvvm-architecture-with-reactivecocoa-part-5-asynchronous-image-load/)\n\n* * *\n\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/yoichitgy/items/2857b98807e6c4b3fec1)\u307e\u3067\u3067\u3001MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u57fa\u3044\u3066\u3001[Pixabay](https://pixabay.com/)\u306e\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3055\u308c\u305f\u753b\u50cf\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u4f8b\u984c\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u975e\u540c\u671f\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u975e\u540c\u671f\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u3068\u540c\u69d8\u306b[ReactiveCocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u958b\u767a\u3092\u901a\u3057\u3066\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3068Dependency Injection\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u306a\u304c\u3089MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGitHub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n- [SwinjectMVVMExample](https://github.com/Swinject/SwinjectMVVMExample): \u767a\u5c55\u5f62\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n- [SwinjectMVVMExample_ForBlog](https://github.com/yoichitgy/SwinjectMVVMExample_ForBlog): (Xcode\u3084\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u66f4\u65b0\u3092\u9664\u304d) \u30d6\u30ed\u30b0\u8a18\u4e8b\u306b\u6cbf\u3063\u305f\u8aac\u660e\u306e\u305f\u3081\u306e\u7c21\u7565\u5316\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n## Model\n\n\u6700\u521d\u306b\u3001\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u6a5f\u80fd\u3092Model\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002`Networking`\u30d7\u30ed\u30c8\u30b3\u30eb\u306b`requestImage`\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u753b\u50cf\u306eURL\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u753b\u50cf\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u9001\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n**Networking.swift**\n\n    import ReactiveCocoa\n\n    public protocol Networking {\n        // \u7701\u7565\n\n        func requestImage(url: String) -> SignalProducer<UIImage, NetworkError>\n    }\n\n`requestImage`\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b`Network`\u30af\u30e9\u30b9\u3092\u4fee\u6b63\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u306f\u3001`SignalProducer`\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u4e0e\u3048\u308b\u30c8\u30ec\u30fc\u30ea\u30f3\u30b0\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3044\u3001Alamofire\u304b\u3089\u306e\u975e\u540c\u671f\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092`ReactiveCocoa`\u306e`Signal`\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002Alamofire\u304b\u3089\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u3057\u3066\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u3001`.Next`\u3068`.Completed`\u30a4\u30d9\u30f3\u30c8\u3092`observer`\u306b\u9001\u51fa\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f`.Failed`\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u51fa\u3057\u307e\u3059\u3002Alamofire\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u305f\u3081\u3001Alamofire\u306b\u30b7\u30ea\u30a2\u30eb\u30ad\u30e5\u30fc\u3092\u6e21\u3057\u3066\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**Network.swift**\n\n```\nimport ReactiveCocoa\nimport Alamofire\n\npublic final class Network: Networking {\n    private let queue = dispatch_queue_create(\n        \"SwinjectMMVMExample.ExampleModel.Network.Queue\",\n        DISPATCH_QUEUE_SERIAL)\n\n    // \u7701\u7565\n\n    public func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n        return SignalProducer { observer, disposable in\n            let serializer = Alamofire.Request.dataResponseSerializer()\n            Alamofire.request(.GET, url)\n                .response(queue: self.queue, responseSerializer: serializer) {\n                    response in\n                    switch response.result {\n                    case .Success(let data):\n                        guard let image = UIImage(data: data) else {\n                            observer.sendFailed(.IncorrectDataReturned)\n                            return\n                        }\n                        observer.sendNext(image)\n                        observer.sendCompleted()\n                    case .Failure(let error):\n                        observer.sendFailed(NetworkError(error: error))\n                    }\n            }\n        }\n    }\n}\n```\n\n`Networking`\u30d7\u30ed\u30c8\u30b3\u30eb\u306b`requestImage`\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001`ImageSearchSpec`\u3067\u4f7f\u3063\u3066\u3044\u308b\u30b9\u30bf\u30d6\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u305d\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u306f\u7279\u306b`requestImage`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u7a7a\u306e`SignalProducer`\u3092\u30b9\u30bf\u30d6\u304c\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**ImageSearchSpec.swift**\n\n    import Quick\n    import Nimble\n    import ReactiveCocoa\n    @testable import ExampleModel\n\n    class ImageSearchSpec: QuickSpec {\n        // MARK: Stub\n        class GoodStubNetwork: Networking {\n            // \u7701\u7565\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer.empty\n            }\n        }\n\n        class BadStubNetwork: Networking {\n            // \u7701\u7565\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer.empty\n            }\n        }\n\n        class ErrorStubNetwork: Networking {\n            // \u7701\u7565\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer.empty\n            }\n        }\n\n        // \u7701\u7565\n    }\n\n\u305d\u308c\u3067\u306f\u3001`requestImage`\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092`NetworkSpec`\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306e\u5b89\u5b9a\u3057\u305f\u30b5\u30fc\u30d0\u3068\u3057\u3066[httpbin.org](http://httpbin.org)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n**NetworkSpec.swift**\n\n    import Quick\n    import Nimble\n    @testable import ExampleModel\n\n    class NetworkSpec: QuickSpec {\n        override func spec() {\n            var network: Network!\n            beforeEach {\n                network = Network()\n            }\n\n            // \u7701\u7565\n\n            describe(\"Image\") {\n                it(\"eventually gets an image.\") {\n                    var image: UIImage?\n                    network.requestImage(\"https://httpbin.org/image/jpeg\")\n                        .on(next: { image = $0 })\n                        .start()\n\n                    expect(image).toEventuallyNot(beNil(), timeout: 5)\n                }\n                it(\"eventually gets an error if incorrect data for an image is returned.\") {\n                    var error: NetworkError?\n                    network.requestImage(\"https://httpbin.org/get\")\n                        .on(failed: { error = $0 })\n                        .start()\n\n                    expect(error).toEventually(\n                        equal(NetworkError.IncorrectDataReturned), timeout: 5)\n                }\n                it(\"eventually gets an error if the network has a problem.\") {\n                    var error: NetworkError? = nil\n                    network.requestImage(\"https://not.existing.server.comm/image/jpeg\")\n                        .on(failed: { error = $0 })\n                        .start()\n\n                    expect(error).toEventually(\n                        equal(NetworkError.NotReachedServer), timeout: 5)\n                }\n            }\n        }\n    }\n\n1\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6210\u529f\u3059\u308b\u30b1\u30fc\u30b9\u3068\u3057\u3066`Network`\u304c\u975e\u540c\u671f\u306b\u753b\u50cf\u3092\u8fd4\u3059\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30022\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30b5\u30fc\u30d0\u304b\u3089\u753b\u50cf\u3067\u306a\u3044\u30c7\u30fc\u30bf\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306b`Network`\u304c`NetworkError.IncorrectDataReturned`\u30a8\u30e9\u30fc\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30023\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001Alamofire\u304b\u3089\u306e\u30a8\u30e9\u30fc\u304c\u5bfe\u5fdc\u3059\u308b`NetworkError`\u306b\u5909\u63db\u3055\u308c\u3066`Network`\u304b\u3089\u9001\u51fa\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n`Command-U`\u3092\u5165\u529b\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\n\n## ViewModel\n\n\u305d\u308c\u3067\u306f\u3001Model\u304b\u3089\u753b\u50cf\u3092\u53d7\u3051\u53d6\u308aView\u306e\u305f\u3081\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308bViewModel\u3078\u3068\u79fb\u308a\u307e\u3057\u3087\u3046\u3002\u59cb\u3081\u306b\u3001`ExampleViewModel`\u30b0\u30eb\u30fc\u30d7\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`RACUtil.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u306e\u969b\u3001`ExampleViewModel`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**RACUtil.swift**\n\n    import Foundation\n    import ReactiveCocoa\n\n    internal extension NSObject {\n        internal var racutil_willDeallocProducer: SignalProducer<(), NoError>  {\n            return self.rac_willDeallocSignal()\n                .toSignalProducer()\n                .map { _ in }\n                .flatMapError { _ in SignalProducer(value: ()) }\n        }\n    }\n\n`NSObject`\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u4e2d\u3067`rac_willDeallocSignal`\u3092\u5909\u63db\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7834\u68c4\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7a7a\u306e\u30bf\u30d7\u30eb\u3092\u9001\u51fa\u3059\u308b`SignalProducer`\u3092\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u305f\u306e\u306f\u3001ReactiveCocoa\u306eSwift API\u3067\u306fObjective-C API\u306b\u3042\u308b`rac_willDeallocSignal`\u306b\u76f8\u5f53\u3059\u308b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c\u307e\u3060\u306a\u3044\u305f\u3081\u3067\u3059\u3002`toSignalProducer`\u306b\u3088\u308aObjective-C\u306e`Signal`\u3092Swift\u306e`SignalProducer`\u306b\u5909\u63db\u3057\u3001`map`\u3068`flatMapError`\u3067\u30a4\u30d9\u30f3\u30c8\u3068\u30a8\u30e9\u30fc\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n`ImageSearchTableViewCellModeling`\u30d7\u30ed\u30c8\u30b3\u30eb\u3068`ImageSearchTableViewCellModel`\u30af\u30e9\u30b9\u306b`getPreviewImage`\u30e1\u30bd\u30c3\u30c9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**ImageSearchTableViewCellModeling.swift**\n\n    import ReactiveCocoa\n\n    public protocol ImageSearchTableViewCellModeling {\n        var id: UInt64 { get }\n        var pageImageSizeText: String { get }\n        var tagText: String { get }\n\n        func getPreviewImage() -> SignalProducer<UIImage?, NoError>\n    }\n\n**ImageSearchTableViewCellModel.swift**\n\n    import ReactiveCocoa\n    import ExampleModel\n\n    public final class ImageSearchTableViewCellModel\n        : NSObject, ImageSearchTableViewCellModeling\n    {\n        public let id: UInt64\n        public let pageImageSizeText: String\n        public let tagText: String\n\n        private let network: Networking\n        private let previewURL: String\n        private var previewImage: UIImage?\n\n        internal init(image: ImageEntity, network: Networking) {\n            id = image.id\n            pageImageSizeText = \"\\(image.pageImageWidth) x \\(image.pageImageHeight)\"\n            tagText = image.tags.joinWithSeparator(\", \")\n\n            self.network = network\n            previewURL = image.previewURL\n\n            super.init()\n        }\n\n        public func getPreviewImage() -> SignalProducer<UIImage?, NoError> {\n            if let previewImage = self.previewImage {\n                return SignalProducer(value: previewImage).observeOn(UIScheduler())\n            }\n            else {\n                let imageProducer = network.requestImage(previewURL)\n                    .takeUntil(self.racutil_willDeallocProducer)\n                    .on(next: { self.previewImage = $0 })\n                    .map { $0 as UIImage? }\n                    .flatMapError { _ in SignalProducer<UIImage?, NoError>(value: nil) }\n\n                return SignalProducer(value: nil)\n                    .concat(imageProducer)\n                    .observeOn(UIScheduler())\n            }\n        }\n    }\n\n`getPreviewImage`\u30e1\u30bd\u30c3\u30c9\u306f`UIImage`\u3092\u9001\u51fa\u3059\u308b`SignalProducer`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\u753b\u50cf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u304c`previewImage`\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5b58\u5728\u3057\u305f\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u753b\u50cf\u3092\u4f7f\u3046`SignalProducer`\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070`Networking`\u306b\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b`SignalProducer`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5f8c\u8005\u306e\u5834\u5408\u306e`SignalProducer`\u306f`concat`\u3067\u7e4b\u304c\u308c\u305f2\u3064\u306e\u90e8\u5206\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u30021\u3064\u76ee\u306f\u3001\u3059\u3050\u306b`nil`\u3092\u9001\u51fa\u3057\u3066\u7d42\u4e86\u3059\u308b`SignalProducer(value: nil)`\u3067\u3059\u3002\u6700\u521d\u306b`nil`\u3092\u9001\u51fa\u3059\u308b\u306e\u306f\u3001\u518d\u5229\u7528\u3055\u308c\u305f\u30bb\u30eb\u306e`UIImageView`\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u53e4\u3044\u753b\u50cf\u3092\u53d6\u308a\u9664\u304f\u305f\u3081\u3067\u3059\u30022\u3064\u76ee\u306f\u3001`Networking`\u306b\u753b\u50cf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b`imageProducer`\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u30d3\u30e5\u30fc\u306e\u5404\u30bb\u30eb\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u306e\u3067\u3001`flatMapError`\u3092\u7528\u3044\u3066\u30a8\u30e9\u30fc\u3092`nil`\u306b\u5909\u63db\u3057\u3066\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002`ImageSearchTableViewCellModel`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u305f\u6642\u306b`SignalProducer`\u3092\u505c\u6b62\u3059\u308b\u305f\u3081\u3001`racutil_willDeallocProducer`\u3092\u5f15\u6570\u306b\u3057\u3066`takeUntil`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002`NSObject`\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001`ImageSearchTableViewCellModel`\u306f`NSObject`\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059[^\u8a33\u6ce81]\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Networking`\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046`ImageSearchTableViewModel`\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002`Networking`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6ce8\u5165\u3067\u304d\u308b\u3088\u3046\u306b\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002`startSearch`\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u3001`Networking`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092`ImageSearchTableViewCellModel`\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u6e21\u3057\u307e\u3059\u3002\n\n**ImageSearchTableViewModel.swift**\n\n```\nimport ReactiveCocoa\nimport ExampleModel\n\npublic final class ImageSearchTableViewModel: ImageSearchTableViewModeling {\n    public var cellModels: AnyProperty<[ImageSearchTableViewCellModeling]> {\n        return AnyProperty(_cellModels)\n    }\n    private let _cellModels = MutableProperty<[ImageSearchTableViewCellModeling]>([])\n    private let imageSearch: ImageSearching\n    private let network: Networking\n\n    public init(imageSearch: ImageSearching, network: Networking) {\n        self.imageSearch = imageSearch\n        self.network = network\n    }\n\n    public func startSearch() {\n        imageSearch.searchImages()\n            .map { response in\n                response.images.map {\n                    ImageSearchTableViewCellModel(image: $0, network: self.network)\n                        as ImageSearchTableViewCellModeling\n                }\n            }\n            .observeOn(UIScheduler())\n            .on(next: { cellModels in\n                self._cellModels.value = cellModels\n            })\n            .start()\n    }\n}\n```\n\n\u6700\u5f8c\u306b\u3001Dependency Injection\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306b`AppDelegate`\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Networking`\u3092`ImageSearchTableViewModel`\u306b\u6ce8\u5165\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**AppDelegate.swift**\n\n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let container = Container() { container in\n            // Models\n            container.register(Networking.self) { _ in Network() }\n            container.register(ImageSearching.self) { r in\n                ImageSearch(network: r.resolve(Networking.self)!)\n            }\n\n            // View models\n            container.register(ImageSearchTableViewModeling.self) { r in\n                ImageSearchTableViewModel(\n                    imageSearch: r.resolve(ImageSearching.self)!,\n                    network: r.resolve(Networking.self)!)\n            }\n\n            // Views\n            container.registerForStoryboard(ImageSearchTableViewController.self) { r, c in\n                c.viewModel = r.resolve(ImageSearchTableViewModeling.self)!\n            }\n        }\n\n        // \u7701\u7565\n    }\n\n\u305d\u308c\u3067\u306f\u3001ViewModel\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u5408\u308f\u305b\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u30fb\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\u6700\u521d\u306b`ImageSearchTableViewModelSpec`\u3092\u4fee\u6b63\u3057\u3001`StubNetwork`\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001`ImageSearchTableViewModel`\u306e\u4fee\u6b63\u3057\u305f\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306b\u6e21\u3059\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n**ImageSearchTableViewModelSpec.swift**\n\n    class ImageSearchTableViewModelSpec: QuickSpec {\n        // MARK: Stub\n        class StubImageSearch: ImageSearching {\n            func searchImages() -> SignalProducer<ResponseEntity, NetworkError> {\n                return SignalProducer { observer, disposable in\n                    observer.sendNext(dummyResponse)\n                    observer.sendCompleted()\n                }\n                .observeOn(QueueScheduler())\n            }\n        }\n\n        class StubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                return SignalProducer.empty\n            }\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer.empty\n            }\n        }\n\n        // MARK: Spec\n        override func spec() {\n            var viewModel: ImageSearchTableViewModel!\n            beforeEach {\n                viewModel = ImageSearchTableViewModel(\n                    imageSearch: StubImageSearch(),\n                    network: StubNetwork())\n            }\n\n            // \u7701\u7565\n        }\n    }\n\n\u5f8c\u3067\u4f7f\u3046\u305f\u3081\u3001`DummyResponse.swift`\u306b\u30c0\u30df\u30fc\u306e\u753b\u50cf\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**DummyResponse.swift**\n\n    let image1x1: UIImage = {\n        UIGraphicsBeginImageContextWithOptions(CGSizeMake(1, 1), true, 0)\n        let image = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return image\n    }()\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b9\u30bf\u30d6\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092`ImageSearchTableViewCellModelSpec`\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n**ImageSearchTableViewCellModelSpec.swift**\n\n    import Foundation\n    import Quick\n    import Nimble\n    import ReactiveCocoa\n    @testable import ExampleModel\n    @testable import ExampleViewModel\n\n    class ImageSearchTableViewCellModelSpec: QuickSpec {\n        // MARK: Stubs\n        class StubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                return SignalProducer.empty\n            }\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer(value: image1x1).observeOn(QueueScheduler())\n            }\n        }\n\n        class ErrorStubNetwork: Networking {\n            func requestJSON(url: String, parameters: [String : AnyObject]?)\n                -> SignalProducer<AnyObject, NetworkError>\n            {\n                return SignalProducer.empty\n            }\n\n            func requestImage(url: String) -> SignalProducer<UIImage, NetworkError> {\n                return SignalProducer(error: .NotConnectedToInternet)\n            }\n        }\n\n        // MARK: Spec\n        override func spec() {\n            var viewModel: ImageSearchTableViewCellModel!\n            beforeEach {\n                viewModel = ImageSearchTableViewCellModel(\n                    image: dummyResponse.images[0],\n                    network: StubNetwork())\n            }\n\n            describe(\"Constant values\") {\n                it(\"sets id.\") {\n                    expect(viewModel.id).toEventually(equal(10000))\n                }\n                it(\"formats tag and page image size texts.\") {\n                    expect(viewModel.pageImageSizeText)\n                        .toEventually(equal(\"1000 x 2000\"))\n                    expect(viewModel.tagText).toEventually(equal(\"a, b\"))\n                }\n            }\n            describe(\"Preview image\") {\n                it(\"returns nil at the first time.\") {\n                    var image: UIImage? = image1x1\n                    viewModel.getPreviewImage()\n                        .take(1)\n                        .on(next: { image = $0 })\n                        .start()\n\n                    expect(image).toEventually(beNil())\n                }\n                it(\"eventually returns an image.\") {\n                    var image: UIImage? = nil\n                    viewModel.getPreviewImage()\n                        .on(next: { image = $0 })\n                        .start()\n\n                    expect(image).toEventuallyNot(beNil())\n                }\n                it(\"returns an image on the main thread.\") {\n                    var onMainThread = false\n                    viewModel.getPreviewImage()\n                        .skip(1) // Skips the first nil.\n                        .on(next: { _ in onMainThread = NSThread.isMainThread() })\n                        .start()\n\n                    expect(onMainThread).toEventually(beTrue())\n                }\n                context(\"with an image already downloaded\") {\n                    it(\"immediately returns the image omitting the first nil.\") {\n                        var image: UIImage? = nil\n                        viewModel.getPreviewImage().start(completed: {\n                            viewModel.getPreviewImage()\n                                .take(1)\n                                .on(next: { image = $0 })\n                                .start()\n                        })\n\n                        expect(image).toEventuallyNot(beNil())\n                    }\n                }\n                context(\"on error\") {\n                    it(\"returns nil.\") {\n                        var image: UIImage? = image1x1\n                        let viewModel = ImageSearchTableViewCellModel(\n                            image: dummyResponse.images[0],\n                            network: ErrorStubNetwork())\n                        viewModel.getPreviewImage()\n                            .skip(1) // Skips the first nil.\n                            .on(next: { image = $0 })\n                            .start()\n\n                        expect(image).toEventually(beNil())\n                    }\n                }\n            }\n        }\n    }\n\n`StubNetwork`\u306e`requestImage`\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5148\u307b\u3069\u306e\u30c0\u30df\u30fc\u753b\u50cf\u3092\u9001\u51fa\u3059\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002`ErrorStubNetwork`\u306e\u540c\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a8\u30e9\u30fc\u3092\u9001\u51fa\u3059\u308b`SignalProducer`\u3092\u8fd4\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u524d\u306b\u3001`spec`\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u65e2\u5b58\u306e\u30c6\u30b9\u30c8\u3092`describe(\"Constant values\")`\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\n`describe(\"Preview image\")`\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306b\u306f\u3001`getPreviewImage`\u30e1\u30bd\u30c3\u30c9\u306e\u305f\u3081\u306e\u65b0\u3057\u3044\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u30925\u3064\u8ffd\u52a0\u3057\u307e\u3057\u305f\u30021\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001`SignalProducer\u304c\u6700\u521d\u306e\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066`nil`\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30022\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u6210\u529f\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u753b\u50cf\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30023\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u753b\u50cf\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u30024\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u753b\u50cf\u3092\u5373\u5ea7\u306b\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u306f\u7279\u5b9a\u306e\u6761\u4ef6\u4e0b\u3067\u306e\u78ba\u8a8d\u306e\u305f\u3081\u3001`context`\u3067\u3055\u3089\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u3042\u308a\u307e\u3059\u30025\u756a\u76ee\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001`Networking`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089\u306e\u30a8\u30e9\u30fc\u3092`nil`\u306b\u5909\u63db\u3057\u3066\u9001\u51fa\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c6\u30b9\u30c8\u3082`context`\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n`Command-U`\u3092\u5165\u529b\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u308c\u3067\u306f\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u79fb\u308a\u3001View\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## View\n\n\u59cb\u3081\u306b\u3001`NSObject`\u306e\u6642\u3068\u540c\u69d8\u306b`UITableViewCell`\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059[^\u8a33\u6ce82]\u3002`ExampleView`\u30b0\u30eb\u30fc\u30d6\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`RACUtil.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u4e2d\u3067\u3001ReactiveCocoa\u306eObjective-C API\u306e`rac_prepareForReuseSignal`\u3092Swift\u306e\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002`UITableViewCell`\u306e`prepareForReuse`\u304c\u547c\u3070\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001\u7a7a\u306e\u30bf\u30d7\u30eb\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u9001\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n**RACUtil.swift**\n\n    import UIKit\n    import ReactiveCocoa\n\n    internal extension UITableViewCell {\n        internal var racutil_prepareForReuseProducer: SignalProducer<(), NoError>  {\n            return self.rac_prepareForReuseSignal\n                .toSignalProducer()\n                .map { _ in }\n                .flatMapError { _ in SignalProducer(value: ()) }\n        }\n    }\n\n\u6b21\u306b\u3001`ImageSearchTableViewCell`\u3092\u4fee\u6b63\u3057\u3001`viewModel`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642\u306b\u30a4\u30e1\u30fc\u30b8\u30d3\u30e5\u30fc\u3092\u66f4\u65b0\u3059\u308b\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\u904e\u304e\u53bb\u3063\u305fRow\u306e\u305f\u3081\u306e\u753b\u50cf\u3067\u9593\u9055\u3063\u3066\u30bb\u30eb\u304c\u66f4\u65b0\u3055\u308c\u306a\u3044\u3088\u3046\u3001\u30bb\u30eb\u304c\u4ed6\u306eRow\u306e\u305f\u3081\u306b\u518d\u5229\u7528\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067`getPreviewImage`\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u505c\u6b62\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n**ImageSearchTableViewCell.swift**\n\n    import UIKit\n    import ExampleViewModel\n    import ReactiveCocoa\n\n    internal final class ImageSearchTableViewCell: UITableViewCell {\n        internal var viewModel: ImageSearchTableViewCellModeling? {\n            didSet {\n                tagLabel.text = viewModel?.tagText\n                imageSizeLabel.text = viewModel?.pageImageSizeText\n\n                if let viewModel = viewModel {\n                    viewModel.getPreviewImage()\n                        .takeUntil(self.racutil_prepareForReuseProducer)\n                        .on(next: { self.previewImageView.image = $0 })\n                        .start()\n                }\n                else {\n                    previewImageView.image = nil\n                }\n            }\n        }\n\n        @IBOutlet weak var previewImageView: UIImageView!\n        @IBOutlet weak var tagLabel: UILabel!\n        @IBOutlet weak var imageSizeLabel: UILabel!\n    }\n\n`Command-R`\u3092\u5165\u529b\u3057\u3066\u30a2\u30d7\u30ea\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4e0b\u306e\u3088\u3046\u306b\u3001\u5404\u30a4\u30e1\u30fc\u30b8\u30d3\u30e5\u30fc\u306b\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n![SwinjectMVVMExample Images Displayed in Table View Cells](https://qiita-image-store.s3.amazonaws.com/0/86677/946522bb-a2ac-128b-5191-3ff22893f7b6.png \"SwinjectMVVMExampleCellsWithImagesScreenshot.png\")\n\n\u3067\u306f\u6700\u5f8c\u306b\u3001`ExampleViewTests`\u30b0\u30eb\u30fc\u30d6\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306e`ImageSearchTableViewCellSpec.swift`\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002`ExampleViewTests`\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\n**ImageSearchTableViewCellSpec.swift**\n\n    import Quick\n    import Nimble\n    import ReactiveCocoa\n    import ExampleViewModel\n    @testable import ExampleView\n\n    class ImageSearchTableViewCellSpec: QuickSpec {\n        class MockViewModel: ImageSearchTableViewCellModeling {\n            let id: UInt64 = 0\n            let pageImageSizeText = \"\"\n            let tagText = \"\"\n\n            var getPreviewImageStarted = false\n\n            func getPreviewImage() -> SignalProducer<UIImage?, NoError> {\n                return SignalProducer<UIImage?, NoError> { observer, _ in\n                    self.getPreviewImageStarted = true\n                    observer.sendCompleted()\n                }\n            }\n        }\n\n        override func spec() {\n            it(\"starts getPreviewImage signal producer when its view model is set.\") {\n                let viewModel = MockViewModel()\n                let view = createTableViewCell()\n\n                expect(viewModel.getPreviewImageStarted) == false\n                view.viewModel = viewModel\n                expect(viewModel.getPreviewImageStarted) == true\n            }\n        }\n    }\n\n    private func createTableViewCell() -> ImageSearchTableViewCell {\n        let bundle = NSBundle(forClass: ImageSearchTableViewCell.self)\n        let storyboard = UIStoryboard(name: \"Main\", bundle: bundle)\n        let tableViewController = storyboard\n            .instantiateViewControllerWithIdentifier(\"ImageSearchTableViewController\")\n            as! ImageSearchTableViewController\n        return tableViewController.tableView\n            .dequeueReusableCellWithIdentifier(\"ImageSearchTableViewCell\")\n            as! ImageSearchTableViewCell\n    }\n\n\u3053\u306e\u30c6\u30b9\u30c8\u3067\u306f\u3001`ImageSearchTableViewCell`\u306e`viewModel`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u6642\u306b`getPreviewImage`\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3092`ImageSearchTableViewCellModeling`\u306e\u30e2\u30c3\u30af\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n`Command-U`\u3092\u62bc\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002\u30d1\u30b9\u3057\u307e\u3057\u305f\uff01\u3053\u308c\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u975e\u540c\u671f\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8868\u793a\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u30d3\u30e5\u30fc\u3092\u5b9f\u88c5\u3057\u7d42\u3048\u307e\u3057\u305f\u3002\u5b9f\u88c5\u3060\u3051\u3067\u306a\u304f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u3042\u308b\u306e\u3067\u3001\u52d5\u304f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u81ea\u4fe1\u3092\u6301\u3063\u3066\u958b\u767a\u3057\u7d9a\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\uff01\n\n## \u307e\u3068\u3081\n\n\u4eca\u56de\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u753b\u50cf\u3092`UIImageView`\u306b\u975e\u540c\u671f\u3067\u30ed\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u3092MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f4\u65b0\u3059\u308b\u3068\u3068\u3082\u306b\u3001Model\u3001ViewModel\u3001View\u306e\u5404\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u65b0\u3057\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u624b\u9806\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u5b9f\u88c5\u306e\u969b\u3001ViewModel\u306b\u5bfe\u3059\u308bDependency Injection\u3082\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u307e\u3057\u305f\u3002\u62bd\u8c61\u5316\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u9001\u51fa\u3068\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306bReactiveCocoa\u3092Model\u3001ViewModel\u3001View\u306e\u3059\u3079\u3066\u306b\u304a\u3044\u3066\u7528\u3044\u307e\u3057\u305f\u3002\n\n\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u30b7\u30ea\u30fc\u30ba\u3092\u901a\u3057\u3066\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\n\n- Part 1: MVVM\u3068ReactiveCocoa\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u57fa\u672c\n- Part 2: MVVM\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u308bXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3068[Carthage](https://github.com/Carthage/Carthage)\u306b\u3088\u308b\u5916\u90e8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n- Part 3: \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u306e\u5916\u90e8\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u30a2\u30d7\u30ea\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4f7f\u3063\u305fModel\u306e\u8a2d\u8a08\n- Part 4: ViewModel\u3068View\u306e\u5b9f\u88c5\u304a\u3088\u3073`AppDelegate`\u304b\u3089\u306eDependency Injection\n- Part 5: \u65b0\u3057\u3044\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306eModel\u3001ViewModel\u3001View\u306e\u4fee\u6b63\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f4\u65b0\n\n\u3053\u308c\u307e\u3067\u5358\u306b\u4f8b\u984c\u30a2\u30d7\u30ea\u3092\u5b9f\u88c5\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001MVVM\u306e\u5883\u754c\u3068\u306a\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u30b9\u30bf\u30d6\u3084\u30e2\u30c3\u30af\u3092\u7528\u3044\u305f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u304d\u307e\u3057\u305f[^1]\u3002MVVM\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e2d\u3067\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u5b9f\u88c5\u3001\u305d\u3057\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u30b5\u30a4\u30af\u30eb\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u9032\u3081\u3066\u3044\u304f\u969b\u306e\u81ea\u4fe1\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002[ReactiveCocoa](https://github.com/Swinject/Swinject)\u306e\u62bd\u8c61\u5316\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u3068[Swinject](https://github.com/Swinject/Swinject)\u306b\u3088\u308bDependency Injection\u3067Model\u3001View\u3001ViewModel\u3092\u758e\u7d50\u5408\u306b\u3059\u308b\u3053\u3068\u304c\u305d\u306e\u30b5\u30a4\u30af\u30eb\u306e\u9375\u3068\u306a\u308a\u307e\u3059[^\u8a33\u6ce83]\u3002\n\n\u3053\u308c\u3067\u672c\u30b7\u30ea\u30fc\u30ba\u306f\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001[GitHub\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/Swinject/SwinjectMVVMExample)\u3067\u306f\u3001\u753b\u50cf\u306e\u8a73\u7d30\u30d3\u30e5\u30fc\u306e\u8868\u793a\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4e0b\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u306b\u8ffd\u52a0\u3067\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u6a5f\u80fd\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3001\u30ed\u30fc\u30ab\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3001\u3088\u308a\u9032\u3093\u3060\u958b\u767a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u8208\u5473\u304c\u3042\u308c\u3070\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002[GitHub\u4e0a\u306eSwinject\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/Swinject/Swinject)\u306b\u30b9\u30bf\u30fc\u3092\u4ed8\u3051\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52b1\u307f\u306b\u306a\u308a\u307e\u3059\u3002\n\n* * *\n\n\u4ee5\u4e0a\u3067\u30b7\u30ea\u30fc\u30ba\u306e\u7ffb\u8a33\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n\u8a18\u4e8b\u306e\u4e2d\u3067\u306f\u3001MVVM\u306e\u3059\u3079\u3066\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u304d\u3063\u3061\u308a\u5206\u3051\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3042\u307e\u308a\u3084\u308a\u904e\u304e\u308b\u3068\u958b\u767a\u306e\u30b9\u30d4\u30fc\u30c9\u3092\u843d\u3068\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba (\u958b\u767a\u8005\u306e\u4eba\u6570\u3084\u30a2\u30d7\u30ea\u306e\u30b5\u30a4\u30ba) \u306b\u5408\u308f\u305b\u3066\u9069\u5b9c\u8abf\u6574\u3059\u308b\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7279\u306b\u3001UI\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u308b\u306a\u3089\u3001View\u304b\u3089ViewModel\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u4ecb\u3055\u305a\u306b\u5b9f\u4f53\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u5341\u5206\u3060\u3068\u601d\u3044\u307e\u3059\u3002ReactiveCocoa\u306e`MutableProperty`\u3092`AnyProperty`\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u30e9\u30c3\u30d7\u3057\u3066\u3001\u5916\u90e8\u304b\u3089\u306f\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u30011\u4eba\u3067\u958b\u767a\u3059\u308b\u3088\u3046\u306a\u5c0f\u3055\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308c\u3070\u3053\u308c\u3082\u5c11\u3057\u7169\u96d1\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nMVVM\u306e\u4ed6\u306b\u3082[VIPER](https://www.objc.io/issues/13-architecture/viper/)\u306a\u3069\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u958b\u767a\u898f\u6a21\u306b\u5fdc\u3058\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u9078\u629e\u3068\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3057\u3087\u3046\u3002\n\n[^\u8a33\u6ce81]: \u8a33\u6ce8: \u3053\u3053\u3067\u306f\u7c21\u4fbf\u306e\u305f\u3081`NSObject`\u3092\u7d99\u627f\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001Swift\u3060\u3051\u3067\u540c\u7b49\u306e\u4e8b\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n[^\u8a33\u6ce82]: \u8a33\u6ce8: `UITableViewCell`\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001UIKit\u306e\u4e00\u90e8\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c[Rex](https://github.com/neilpa/Rex)\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n[^\u8a33\u6ce83]: \u8a33\u6ce8: \u5c11\u3057\u8a00\u3044\u904e\u304e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3082\u3068\u3082\u3068\u82f1\u8a9e\u306e\u6587\u7ae0\u3060\u3063\u305f\u306e\u3067\u3002\n[^1]: \u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u306f\u3001\u3044\u3064\u3082\u6a5f\u80fd\u306e\u5b9f\u88c5\u3092\u3057\u305f\u3042\u3068\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u30c6\u30b9\u30c8\u3092\u5148\u306b\u66f8\u304f\u304b\u6a5f\u80fd\u306e\u5b9f\u88c5\u3068\u4e00\u7dd2\u306b\u66f8\u3044\u3066\u3044\u304f\u307b\u3046\u304c\u826f\u3044\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u3059\u3002\n"}