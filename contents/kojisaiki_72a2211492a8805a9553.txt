{"context": "\n\n\u74b0\u5883\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5f62\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bSpringBoot\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b8\u30e7\u30d6\u306e\u4e3b\u51e6\u7406\u3068\u3057\u3066\u30ed\u30b0\u51fa\u529b\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30ed\u30b0\u51fa\u529b\u306e\u65b9\u5f0f\u306f\u4e3b\u65e8\u3068\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\nQuartz:2.2.1\n\nSpringBoot:1.3.5.RELEASE\n\n\n\n\u52d5\u4f5c\n\nWEB\u30b5\u30fc\u30d0\u306e\u5f62\u5f0f\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n/api/job/onetime?value=foo\u306bPOST\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3068\u3001\u30b8\u30e7\u30d6\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u3055\u307e\u30ec\u30b9\u30dd\u30f3\u30b9200\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u304b\u30891\u5206\u5f8c\u3001\u30b8\u30e7\u30d6\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001\u30b5\u30fc\u30d0\u30ed\u30b0\u306b\u300cExecutiong HelloJob ! : [value\u306e\u5024\"foo\"] | at [\u5b9f\u884c\u65e5\u6642]\u300d\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\n\u30b3\u30fc\u30c9\n\n\u30b8\u30e7\u30d6\u306e\u5b9a\u7fa9\n\u3053\u306e\u8a18\u8ff0\u306f\u3001\u30a2\u30d7\u30ea\u306b\u3088\u3063\u3066\u3082\u305d\u3093\u306a\u306b\u30d6\u30ec\u306a\u3044\u3068\u601d\u3063\u3066\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\norg.quartz.Job\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\nOverride\u3057\u305fexecute()\u304c\u4e3b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\n\u30b8\u30e7\u30d6\u30d1\u30e9\u30e1\u30fc\u30bf\u306fJobDataMap\u3092\u7d4c\u7531\u3057\u3066\u53d7\u3051\u53d6\u308a\u307e\u3059\n\n\nHelloJob.java\npublic class HelloJob implements Job {\n\n    private final Logger log = LoggerFactory.getLogger(HelloJob.class);\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n        JobDataMap data = context.getJobDetail().getJobDataMap();\n        String value = data.getString(\"value\");\n\n        // \u30b8\u30e7\u30d6\u306e\u4e3b\u51e6\u7406\n        log.info(\"Executiong HelloJob ! : \" + value + \" | at \" + new Date());\n    }\n\n}\n\n\n\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u5b9a\u7fa9\u30fb\u751f\u6210\n\u3053\u308c\u306f\u30a2\u30d7\u30ea\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3059\u308b\u5834\u6240\u3084\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u304b\u306a\u308a\u9055\u3063\u3066\u304d\u305d\u3046\u3067\u3059\u3002\n\u4eca\u56de\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u552f\u4e00\u306b\u3059\u308bScheduler\u3092Bean\u5316\u3057\u3066\u3001\u69d8\u3005\u306a\u5834\u6240\u306bDI\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\nScheduler\u3092\u30a2\u30d7\u30ea\uff08\u30b5\u30fc\u30d0\uff09\u8d77\u52d5\u6642\u70b9\u3067\u958b\u59cb\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff08\u203b\u672c\u756a\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u3001\u304a\u305d\u3089\u304fScheduler.shutdown()\u3084\u518d\u8d77\u52d5\u51e6\u7406\u306a\u3069\u3092\u5b9a\u7fa9\u3057\u305f\u5225\u306e\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\uff09\n\n\nQuartzConfiguration.java\n@Configuration\npublic class QuartzConfiguration {\n\n    @Bean\n    public Scheduler scheduler() throws SchedulerException {\n        SchedulerFactory sf = new StdSchedulerFactory();\n        Scheduler sched = sf.getScheduler();\n\n        sched.start();\n\n        return sched;\n    }\n\n}\n\n\n\nHelloJob\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\uff08REST\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff09\n\u4eca\u56de\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u30b8\u30e7\u30d6\u30fb\u30c8\u30ea\u30ac\u30fc\u306e\u767b\u9332\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u30b5\u30fc\u30d3\u30b9\u5c64\u306b\u79fb\u52d5\u3057\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\nJobResource.java\n@RestController\n@RequestMapping(\"/api/job\")\n@Api(tags = {\"\u30b8\u30e7\u30d6\u30c6\u30b9\u30c8\u7528API\"})\npublic class JobResource {\n\n    private final Logger log = LoggerFactory.getLogger(JobResource.class);\n\n    @Autowired\n    private Scheduler scheduler; // \u8aac\u660e\uff1a\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092DI\u3067\u53d6\u5f97\n\n    /**\n     * \u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\n     *\n     * @param value\n     * @return\n     * @throws URISyntaxException\n     */\n    @ApiOperation(value = \"\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\", notes = \"\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u30b8\u30e7\u30d6\u306e\u767b\u9332\u51e6\u7406\u3060\u3051\u3067\u3059\u3050\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\")\n    @RequestMapping(value = \"/onetime\",\n        method = RequestMethod.POST,\n        produces = MediaType.APPLICATION_JSON_VALUE)\n    @Timed\n    public ResponseEntity<String> addOnetimeJob(\n        @RequestParam(value = \"value\", defaultValue = \"lol\") String value\n    ) throws URISyntaxException, SchedulerException {\n        log.debug(\"REST request to exec one time job with param : \" + value);\n\n        // \u3053\u3053\u304b\u3089\u53c2\u8003\uff1ahttp://www.quartz-scheduler.org/documentation/quartz-2.x/examples/Example1.html\n\n        // [\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u5b9f\u65bd\u6e08\u307f]SchedulerFactory sf = new StdSchedulerFactory();\n        // [DI\u3067\u5bfe\u5fdc]Scheduler sched = schedulerFactory.getScheduler();\n\n        JobDetail job = newJob(HelloJob.class)\n            .withIdentity(\"job1\", \"group1\")\n            .build();\n        job.getJobDataMap().put(\"value\", value);\n\n        Date runTime = evenMinuteDate(new Date()); // \u8aac\u660e\uff1a1\u5206\u5f8c\u306e\u6642\u9593\u3092runTime\u306b\u3059\u308b\n\n        Trigger trigger = newTrigger()\n            .withIdentity(\"trigger1\", \"group1\")\n            .startAt(runTime)\n            .build();\n\n        scheduler.scheduleJob(job, trigger);\n        // [\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u5b9f\u65bd\u6e08\u307f]sched.start();\n\n        // \u3053\u3053\u307e\u3067\u53c2\u8003\n\n        return ResponseEntity.ok().body(\"one time batch registered! : \" + value);\n    }\n\n\n\n\u53c2\u8003\nhttp://www.quartz-scheduler.org/documentation/quartz-2.x/examples/Example1.html\n\n\u304a\u307e\u3051\nQuartz\u306f\u300130\u79d2\u3054\u3068\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30c8\u30ea\u30ac\u30fc\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3057\u3001\u30c8\u30ea\u30ac\u30fc\u304c\u3042\u308c\u3070\u767a\u706b\u3059\u308b\u304b\u78ba\u8a8d\u21d2\u30b8\u30e7\u30d6\u5b9f\u884c\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u3064\u307e\u308a\u30b8\u30e7\u30d6\u306e\u5b9f\u884c\u6642\u9593\u308230\u79d2\u5358\u4f4d\u3002\n\u305d\u308c\u3092\u53f8\u3063\u3066\u3044\u308b\u306e\u306f\u6b21\u306eQuartzSchedulerThread\u30af\u30e9\u30b9\u306e\u3088\u3046\u3067\u3059\u3002\n\nQuartzSchedulerThread.java\n...\n\n    @Override\n    public void run() {\n        boolean lastAcquireFailed = false;\n\n        while (!halted.get()) {\n\n...\n\n                    try {\n                        triggers = qsRsrcs.getJobStore().acquireNextTriggers(\n                                now + idleWaitTime, Math.min(availThreadCount, qsRsrcs.getMaxBatchSize()), qsRsrcs.getBatchTimeWindow());\n                        lastAcquireFailed = false;\n                        if (log.isDebugEnabled()) \n                            log.debug(\"batch acquisition of \" + (triggers == null ? 0 : triggers.size()) + \" triggers\");\n                    } catch (JobPersistenceException jpe) {\n\n...\n\n                    }\n\n                    if (triggers != null && !triggers.isEmpty()) { // \u8aac\u660e\uff1a\u30c8\u30ea\u30ac\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u51e6\u7406\u958b\u59cb\n\n...\n\n\n                        for (int i = 0; i < bndles.size(); i++) {\n\n...\n\n\n                            JobRunShell shell = null;\n                            try {\n                                shell = qsRsrcs.getJobRunShellFactory().createJobRunShell(bndle);\n                                shell.initialize(qs);\n                            } catch (SchedulerException se) {\n                                qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);\n                                continue;\n                            }\n\n                            if (qsRsrcs.getThreadPool().runInThread(shell) == false) { // \u8aac\u660e\uff1aJobRunShell.run()\u304c\u3001\u5225\u30b9\u30ec\u30c3\u30c9\uff08QuartzSchedulerResources.ThreadPool\u306e\u3044\u305a\u308c\u304b\u306e\u30b9\u30ec\u30c3\u30c9\uff09\u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\n                                // this case should never happen, as it is indicative of the\n                                // scheduler being shutdown or a bug in the thread pool or\n                                // a thread pool being used concurrently - which the docs\n                                // say not to do...\n                                getLog().error(\"ThreadPool.runInThread() return false!\");\n                                qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);\n                            }\n\n...\n\n\n\n\n\u304a\u307e\u3051\u7d9a\u304d\n\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u3068\u3001URL\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u767a\u751f\u3059\u308b\u305f\u3073\u306b\u30c8\u30ea\u30ac\u30fc\u3068\u30b8\u30e7\u30d6\u304c\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n\u304a\u307e\u3051\u306e\u52d5\u4f5c\u3092\u898b\u308b\u3068\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u767b\u9332\u3055\u308c\u305f\u30c8\u30ea\u30ac\u30fc\u306f\u524a\u9664\u3092\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u30b8\u30e7\u30d6\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3061\u3083\u3093\u3068\u30af\u30ea\u30a2\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u30c8\u30ea\u30ac\u30fc\u3068\u30b8\u30e7\u30d6\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n\n\n\u30c8\u30ea\u30ac\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u5f8c\n\n\u30b8\u30e7\u30d6\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u3061\u3083\u3093\u3068\u53d6\u308a\u9664\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u5b89\u5fc3\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u304d\u3063\u3068GC\u304c\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u5225\u306e\u304a\u307e\u3051\n\u6700\u521d\u306f\u3001\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\u3068\u4f75\u305b\u3066\u3001\u30b8\u30e7\u30d6\u3067\u5b9f\u884c\u3055\u308c\u308b\u5185\u5bb9\u3092\u30a2\u30d7\u30ea\u304b\u3089\u540c\u671f\u7684\u306b\u5b9f\u884c\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u6b21\u306e\u5185\u5bb9\u3092\u8aad\u3093\u3067\u3001\u30b8\u30e7\u30d6\u306f\u30b8\u30e7\u30d6\u3068\u3057\u3066\u3001\u30a2\u30d7\u30ea\u6a5f\u80fd\u306f\u30a2\u30d7\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3088\u3046\u3068\u8003\u3048\u306a\u304a\u3057\u307e\u3057\u305f\u3002\njava - Run Quartz job synchronous - Stack Overflow\n\n\n## \u74b0\u5883\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5f62\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bSpringBoot\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b8\u30e7\u30d6\u306e\u4e3b\u51e6\u7406\u3068\u3057\u3066\u30ed\u30b0\u51fa\u529b\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30ed\u30b0\u51fa\u529b\u306e\u65b9\u5f0f\u306f\u4e3b\u65e8\u3068\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n- Quartz:`2.2.1`\n- SpringBoot:`1.3.5.RELEASE`\n\n\n## \u52d5\u4f5c\n\n1. WEB\u30b5\u30fc\u30d0\u306e\u5f62\u5f0f\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n1. `/api/job/onetime?value=foo`\u306bPOST\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3068\u3001\u30b8\u30e7\u30d6\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u3055\u307e\u30ec\u30b9\u30dd\u30f3\u30b9200\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n1. \u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u304b\u30891\u5206\u5f8c\u3001\u30b8\u30e7\u30d6\u304c\u5b9f\u884c\u3055\u308c\u3066\u3001\u30b5\u30fc\u30d0\u30ed\u30b0\u306b\u300c`Executiong HelloJob ! : [value\u306e\u5024\"foo\"] | at [\u5b9f\u884c\u65e5\u6642]`\u300d\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n## \u30b3\u30fc\u30c9\n\n### \u30b8\u30e7\u30d6\u306e\u5b9a\u7fa9\n\n\u3053\u306e\u8a18\u8ff0\u306f\u3001\u30a2\u30d7\u30ea\u306b\u3088\u3063\u3066\u3082\u305d\u3093\u306a\u306b\u30d6\u30ec\u306a\u3044\u3068\u601d\u3063\u3066\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n- org.quartz.Job\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\n- Override\u3057\u305fexecute()\u304c\u4e3b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\n- \u30b8\u30e7\u30d6\u30d1\u30e9\u30e1\u30fc\u30bf\u306fJobDataMap\u3092\u7d4c\u7531\u3057\u3066\u53d7\u3051\u53d6\u308a\u307e\u3059\n\n```java:HelloJob.java\npublic class HelloJob implements Job {\n\n    private final Logger log = LoggerFactory.getLogger(HelloJob.class);\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n        JobDataMap data = context.getJobDetail().getJobDataMap();\n        String value = data.getString(\"value\");\n\n        // \u30b8\u30e7\u30d6\u306e\u4e3b\u51e6\u7406\n        log.info(\"Executiong HelloJob ! : \" + value + \" | at \" + new Date());\n    }\n\n}\n```\n\n### \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u5b9a\u7fa9\u30fb\u751f\u6210\n\n\u3053\u308c\u306f\u30a2\u30d7\u30ea\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3059\u308b\u5834\u6240\u3084\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u304b\u306a\u308a\u9055\u3063\u3066\u304d\u305d\u3046\u3067\u3059\u3002\n\u4eca\u56de\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n- \u30a2\u30d7\u30ea\u5168\u4f53\u3067\u552f\u4e00\u306b\u3059\u308bScheduler\u3092Bean\u5316\u3057\u3066\u3001\u69d8\u3005\u306a\u5834\u6240\u306bDI\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\n- Scheduler\u3092\u30a2\u30d7\u30ea\uff08\u30b5\u30fc\u30d0\uff09\u8d77\u52d5\u6642\u70b9\u3067\u958b\u59cb\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff08\u203b\u672c\u756a\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u3001\u304a\u305d\u3089\u304fScheduler.shutdown()\u3084\u518d\u8d77\u52d5\u51e6\u7406\u306a\u3069\u3092\u5b9a\u7fa9\u3057\u305f\u5225\u306e\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\uff09\n\n```java:QuartzConfiguration.java\n@Configuration\npublic class QuartzConfiguration {\n\n    @Bean\n    public Scheduler scheduler() throws SchedulerException {\n        SchedulerFactory sf = new StdSchedulerFactory();\n        Scheduler sched = sf.getScheduler();\n\n        sched.start();\n\n        return sched;\n    }\n\n}\n```\n\n### HelloJob\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\uff08REST\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff09\n\n\u4eca\u56de\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u30b8\u30e7\u30d6\u30fb\u30c8\u30ea\u30ac\u30fc\u306e\u767b\u9332\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u30b5\u30fc\u30d3\u30b9\u5c64\u306b\u79fb\u52d5\u3057\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```java:JobResource.java\n@RestController\n@RequestMapping(\"/api/job\")\n@Api(tags = {\"\u30b8\u30e7\u30d6\u30c6\u30b9\u30c8\u7528API\"})\npublic class JobResource {\n\n    private final Logger log = LoggerFactory.getLogger(JobResource.class);\n\n    @Autowired\n    private Scheduler scheduler; // \u8aac\u660e\uff1a\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092DI\u3067\u53d6\u5f97\n\n    /**\n     * \u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\n     *\n     * @param value\n     * @return\n     * @throws URISyntaxException\n     */\n    @ApiOperation(value = \"\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\", notes = \"\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u30b8\u30e7\u30d6\u306e\u767b\u9332\u51e6\u7406\u3060\u3051\u3067\u3059\u3050\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\")\n    @RequestMapping(value = \"/onetime\",\n        method = RequestMethod.POST,\n        produces = MediaType.APPLICATION_JSON_VALUE)\n    @Timed\n    public ResponseEntity<String> addOnetimeJob(\n        @RequestParam(value = \"value\", defaultValue = \"lol\") String value\n    ) throws URISyntaxException, SchedulerException {\n        log.debug(\"REST request to exec one time job with param : \" + value);\n\n        // \u3053\u3053\u304b\u3089\u53c2\u8003\uff1ahttp://www.quartz-scheduler.org/documentation/quartz-2.x/examples/Example1.html\n        \n        // [\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u5b9f\u65bd\u6e08\u307f]SchedulerFactory sf = new StdSchedulerFactory();\n        // [DI\u3067\u5bfe\u5fdc]Scheduler sched = schedulerFactory.getScheduler();\n\n        JobDetail job = newJob(HelloJob.class)\n            .withIdentity(\"job1\", \"group1\")\n            .build();\n        job.getJobDataMap().put(\"value\", value);\n\n        Date runTime = evenMinuteDate(new Date()); // \u8aac\u660e\uff1a1\u5206\u5f8c\u306e\u6642\u9593\u3092runTime\u306b\u3059\u308b\n\n        Trigger trigger = newTrigger()\n            .withIdentity(\"trigger1\", \"group1\")\n            .startAt(runTime)\n            .build();\n\n        scheduler.scheduleJob(job, trigger);\n        // [\u30b5\u30fc\u30d0\u8d77\u52d5\u6642\u306b\u5b9f\u65bd\u6e08\u307f]sched.start();\n\n        // \u3053\u3053\u307e\u3067\u53c2\u8003\n\n        return ResponseEntity.ok().body(\"one time batch registered! : \" + value);\n    }\n```\n\n\n## \u53c2\u8003\n\nhttp://www.quartz-scheduler.org/documentation/quartz-2.x/examples/Example1.html\n\n\n## \u304a\u307e\u3051\n\nQuartz\u306f\u300130\u79d2\u3054\u3068\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30c8\u30ea\u30ac\u30fc\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3057\u3001\u30c8\u30ea\u30ac\u30fc\u304c\u3042\u308c\u3070\u767a\u706b\u3059\u308b\u304b\u78ba\u8a8d\u21d2\u30b8\u30e7\u30d6\u5b9f\u884c\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3064\u307e\u308a\u30b8\u30e7\u30d6\u306e\u5b9f\u884c\u6642\u9593\u308230\u79d2\u5358\u4f4d\u3002\n\n\u305d\u308c\u3092\u53f8\u3063\u3066\u3044\u308b\u306e\u306f\u6b21\u306eQuartzSchedulerThread\u30af\u30e9\u30b9\u306e\u3088\u3046\u3067\u3059\u3002\n\n```java:QuartzSchedulerThread.java\n...\n\n    @Override\n    public void run() {\n        boolean lastAcquireFailed = false;\n\n        while (!halted.get()) {\n\n...\n\n                    try {\n                        triggers = qsRsrcs.getJobStore().acquireNextTriggers(\n                                now + idleWaitTime, Math.min(availThreadCount, qsRsrcs.getMaxBatchSize()), qsRsrcs.getBatchTimeWindow());\n                        lastAcquireFailed = false;\n                        if (log.isDebugEnabled()) \n                            log.debug(\"batch acquisition of \" + (triggers == null ? 0 : triggers.size()) + \" triggers\");\n                    } catch (JobPersistenceException jpe) {\n                            \n...\n\n                    }\n\n                    if (triggers != null && !triggers.isEmpty()) { // \u8aac\u660e\uff1a\u30c8\u30ea\u30ac\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u51e6\u7406\u958b\u59cb\n\n...\n\n\n                        for (int i = 0; i < bndles.size(); i++) {\n\n...\n\n\n                            JobRunShell shell = null;\n                            try {\n                                shell = qsRsrcs.getJobRunShellFactory().createJobRunShell(bndle);\n                                shell.initialize(qs);\n                            } catch (SchedulerException se) {\n                                qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);\n                                continue;\n                            }\n\n                            if (qsRsrcs.getThreadPool().runInThread(shell) == false) { // \u8aac\u660e\uff1aJobRunShell.run()\u304c\u3001\u5225\u30b9\u30ec\u30c3\u30c9\uff08QuartzSchedulerResources.ThreadPool\u306e\u3044\u305a\u308c\u304b\u306e\u30b9\u30ec\u30c3\u30c9\uff09\u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\n                                // this case should never happen, as it is indicative of the\n                                // scheduler being shutdown or a bug in the thread pool or\n                                // a thread pool being used concurrently - which the docs\n                                // say not to do...\n                                getLog().error(\"ThreadPool.runInThread() return false!\");\n                                qsRsrcs.getJobStore().triggeredJobComplete(triggers.get(i), bndle.getJobDetail(), CompletedExecutionInstruction.SET_ALL_JOB_TRIGGERS_ERROR);\n                            }\n\n...\n                            \n```\n\n## \u304a\u307e\u3051\u7d9a\u304d\n\n\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u3068\u3001URL\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u767a\u751f\u3059\u308b\u305f\u3073\u306b\u30c8\u30ea\u30ac\u30fc\u3068\u30b8\u30e7\u30d6\u304c\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n\n\u304a\u307e\u3051\u306e\u52d5\u4f5c\u3092\u898b\u308b\u3068\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u767b\u9332\u3055\u308c\u305f\u30c8\u30ea\u30ac\u30fc\u306f\u524a\u9664\u3092\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u30b8\u30e7\u30d6\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3061\u3083\u3093\u3068\u30af\u30ea\u30a2\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n### \u30c8\u30ea\u30ac\u30fc\u3068\u30b8\u30e7\u30d6\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n\n![quartz_1.png](https://qiita-image-store.s3.amazonaws.com/0/68978/f9a95bf6-6bd8-6e46-40f7-b453fbffdb34.png)\n\n### \u30c8\u30ea\u30ac\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u5f8c\n\n![quartz_2.png](https://qiita-image-store.s3.amazonaws.com/0/68978/6e1ab965-69d9-3618-25f0-392fd860b29f.png)\n\n\u30b8\u30e7\u30d6\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u3061\u3083\u3093\u3068\u53d6\u308a\u9664\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u5b89\u5fc3\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u304d\u3063\u3068GC\u304c\u3046\u307e\u3044\u3053\u3068\u3084\u3063\u3066\u304f\u308c\u308b\u3067\u3057\u3087\u3046\u3002\n\n## \u5225\u306e\u304a\u307e\u3051\n\n\u6700\u521d\u306f\u3001\u30ef\u30f3\u30bf\u30a4\u30e0\u30b8\u30e7\u30d6\u306e\u767b\u9332\u3068\u4f75\u305b\u3066\u3001\u30b8\u30e7\u30d6\u3067\u5b9f\u884c\u3055\u308c\u308b\u5185\u5bb9\u3092\u30a2\u30d7\u30ea\u304b\u3089\u540c\u671f\u7684\u306b\u5b9f\u884c\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u6b21\u306e\u5185\u5bb9\u3092\u8aad\u3093\u3067\u3001\u30b8\u30e7\u30d6\u306f\u30b8\u30e7\u30d6\u3068\u3057\u3066\u3001\u30a2\u30d7\u30ea\u6a5f\u80fd\u306f\u30a2\u30d7\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3088\u3046\u3068\u8003\u3048\u306a\u304a\u3057\u307e\u3057\u305f\u3002\n\n[java - Run Quartz job synchronous - Stack Overflow](http://stackoverflow.com/questions/33492860/run-quartz-job-synchronous)\n", "tags": ["Java", "Quartz", "spring", "SpringBoot"]}