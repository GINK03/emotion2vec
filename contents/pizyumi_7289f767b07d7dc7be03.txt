{"tags": ["Scala", "\u518d\u5e30"], "context": " More than 1 year has passed since last update.Scala\u3067\u518d\u5e302\u306e\u7d9a\u304d\u3002\n\u6b21\u306f\u3001\u300c\u300c\u300c\u300c\u521d\u671f\u5024\u3068\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e2\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e3\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u30fb\u30fb\u30fb\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059fold\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u3067\u3059\u3002\ndef fold[T, S](func: Function[T, Function[S, T]])(init: T)(xs: List[S]): T = xs match {\n    case Nil => init\n    case x :: xs => fold(func)(func(init)(x))(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nfold\u95a2\u6570\u3092\u4f7f\u3063\u3066sum\u95a2\u6570\u3068length\u95a2\u6570\u3068forall\u95a2\u6570\u3068exists\u95a2\u6570\u3068find\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nscala> def sum(xs: List[Int]): Int = fold((acc: Int) => (x: Int) => acc + x)(0)(xs)\nsum: (xs: List[Int])Int\n\nscala> sum(4 :: 3 :: 2 :: 1 :: Nil)\nres178: Int = 10\n\nscala> def length[T](xs: List[T]): Int = fold((acc: Int) => (x: T) => acc + 1)(0)(xs)\nlength: [T](xs: List[T])Int\n\nscala> length(4 :: 3 :: 2 :: 1 :: Nil)\nres180: Int = 4\n\nscala> def forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = fold((acc: Boolean) => (x: T) => acc && pred(x))(true)(xs)\nforall: [T](pred: Function[T,Boolean])(xs: List[T])Boolean\n\nscala> forall((x: Int) => x % 2 == 1)(4 :: 3 :: 2 :: 1 :: Nil)\nres181: Boolean = false\n\nscala> def exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = fold((acc: Boolean) => (x: T) => acc || pred(x))(false)(xs)\nexists: [T](pred: Function[T,Boolean])(xs: List[T])Boolean\n\nscala> exists((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres182: Boolean = true\n\nscala> def find[T](pred: Function[T, Boolean])(xs: List[T]): Option[T] = fold((acc: Option[T]) => (x: T) => if (acc == None && pred(x)) Some(x) else acc)(None)(\nxs)\nfind: [T](pred: Function[T,Boolean])(xs: List[T])Option[T]\n\nscala> find((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres183: Option[Int] = Some(4)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002foldLeft\u95a2\u6570\u3067\u3059\u3002/:\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(0)((acc, x) => acc + x)\nres184: Int = 10\n\nscala> (0 /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc + x)\nres185: Int = 10\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(0)((acc, x) => acc + 1)\nres186: Int = 4\n\nscala> (0 /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc + 1)\nres187: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(true)((acc, x) => acc && x % 2 == 1)\nres188: Boolean = false\n\nscala> (true /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc && x % 2 == 1)\nres189: Boolean = false\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(false)((acc, x) => acc || x % 2 == 0)\nres190: Boolean = true\n\nscala> (false /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc || x % 2 == 0)\nres191: Boolean = true\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(None: Option[Int])((acc: Option[Int], x) => if (acc == None && x % 2 == 0) Some(x) else acc)\nres192: Option[Int] = Some(4)\n\nscala> ((None: Option[Int]) /: (4 :: 3 :: 2 :: 1 :: Nil))((acc: Option[Int], x) => if (acc == None && x % 2 == 0) Some(x) else acc)\nres193: Option[Int] = Some(4)\n\n\u6b21\u306f\u3001\u300c\u300c\u300c\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u3068\u5217\u306e2\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e3\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u30fb\u30fb\u30fb\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059fold\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u3067\u3059\u3002\ndef reduce[T](func: Function[T, Function[T, T]])(xs: List[T]): T = xs match {\n    case x :: xs => fold(func)(x)(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nfold\u95a2\u6570\u3092\u4f7f\u3063\u3066max\u95a2\u6570\u3068min\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nscala> def max(xs: List[Int]): Int = reduce((acc: Int) => (x: Int) => if (x > acc) x else acc)(xs)\nmax: (xs: List[Int])Int\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres194: Int = 4\n\nscala> def min(xs: List[Int]): Int = reduce((acc: Int) => (x: Int) => if (x < acc) x else acc)(xs)\nmin: (xs: List[Int])Int\n\nscala> min(4 :: 3 :: 2 :: 1 :: Nil)\nres195: Int = 1\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002reduceLeft\u95a2\u6570\u3067\u3059\u3002\nscala> (4 :: 3 :: 2 :: 1 :: Nil).reduceLeft((acc, x) => if (x > acc) x else acc)\nres196: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).reduceLeft((acc, x) => if (x < acc) x else acc)\nres197: Int = 1\n\n\u6b21\u306f\u3001\u300c\u521d\u671f\u5024\u3068\u30fb\u30fb\u30fb\u300c\u5217\u306e\u6700\u5f8c\u304b\u30893\u756a\u76ee\u306e\u8981\u7d20\u3068\u300c\u5217\u306e\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u8981\u7d20\u3068\u300c\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3068\u521d\u671f\u5024\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u30fb\u30fb\u30fb\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059foldBack\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u3067\u3059\u3002\ndef foldBack[T, S](func: Function[T, Function[S, S]])(xs: List[T])(init: S): S = xs match {\n    case Nil => init\n    case x :: xs => func(x)(foldBack(func)(xs)(init))\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nfoldBack\u95a2\u6570\u3092\u4f7f\u3063\u3066skip\u95a2\u6570\u3068take\u95a2\u6570\u3068skipWhile\u95a2\u6570\u3068takeWhile\u95a2\u6570\u3068map\u95a2\u6570\u3068filter\u95a2\u6570\u3068partition\u95a2\u6570\u3068collect\u95a2\u6570\u3068choose\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nscala> def skip[T](n: Int)(xs: List[T]): List[T] = {\n     | def f[T]: Function[T, Function[Function[Int, List[T]], Function[Int, List[T]]]] = (x) => (acc) => (n) => n match {\n     | case 0 => x :: acc(0)\n     | case n => acc(n - 1)\n     | }\n     | foldBack(f[T])(xs)((n) => Nil)(n)\n     | }\nskip: [T](n: Int)(xs: List[T])List[T]\n\nscala> skip(2)(4 :: 3 :: 2 :: 1 :: Nil)\nres198: List[Int] = List(2, 1)\n\nscala> def take[T](n: Int)(xs: List[T]): List[T] = {\n     | def f[T]: Function[T, Function[Function[Int, List[T]], Function[Int, List[T]]]] = (x) => (acc) => (n) => n match {\n     | case 0 => Nil\n     | case n => x :: acc(n - 1)\n     | }\n     | foldBack(f[T])(xs)((n) => Nil)(n)\n     | }\ntake: [T](n: Int)(xs: List[T])List[T]\n\nscala> take(2)(4 :: 3 :: 2 :: 1 :: Nil)\nres199: List[Int] = List(4, 3)\n\nscala> def skipWhile[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = {\n     | def f: Function[T, Function[Function[Boolean, List[T]], Function[Boolean, List[T]]]] = (x) => (acc) => (b) => b match {\n     | case false => x :: acc(false)\n     | case true => if (pred(x)) acc(true) else x :: acc(false)\n     | }\n     | foldBack(f)(xs)((b) => Nil)(true)\n     | }\nskipWhile: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> skipWhile((x: Int) => x < 3)(1 :: 2 :: 3 :: 4 :: 5 :: 1 :: 2 :: 3 :: Nil)\nres200: List[Int] = List(3, 4, 5, 1, 2, 3)\n\nscala> def takeWhile[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = {\n     | def f: Function[T, Function[Function[Boolean, List[T]], Function[Boolean, List[T]]]] = (x) => (acc) => (b) => b match {\n     | case false => Nil\n     | case true => if (pred(x)) x :: acc(true) else Nil\n     | }\n     | foldBack(f)(xs)((b) => Nil)(true)\n     | }\ntakeWhile: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> takeWhile((x: Int) => x < 3)(1 :: 2 :: 3 :: 4 :: 5 :: 1 :: 2 :: 3 :: Nil)\nres201: List[Int] = List(1, 2)\n\nscala> def map[T, S](func: Function[T, S])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) :: acc)(xs)(Nil)\nmap: [T, S](func: Function[T,S])(xs: List[T])List[S]\n\nscala> map((x: Int) => x * 2)(4 :: 3 :: 2 :: 1 :: Nil)\nres202: List[Int] = List(8, 6, 4, 2)\n\nscala> def filter[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = foldBack((x: T) => (acc: List[T]) => if (pred(x)) x :: acc else acc)(xs)(Nil)\nfilter: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> filter((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres203: List[Int] = List(4, 2)\n\nscala> def partition[T](pred: Function[T, Boolean])(xs: List[T]): (List[T], List[T]) = foldBack((x: T) => (acc: (List[T], List[T])) => if (pred(x)) (x :: acc._1\n, acc._2) else (acc._1, x :: acc._2))(xs)(Nil, Nil)\npartition: [T](pred: Function[T,Boolean])(xs: List[T])(List[T], List[T])\n\nscala> partition((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres204: (List[Int], List[Int]) = (List(4, 2),List(3, 1))\n\nscala> def collect[T, S](func: Function[T, List[S]])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) ++ acc)(xs)(Nil)\ncollect: [T, S](func: Function[T,List[S]])(xs: List[T])List[S]\n\nscala> collect((x: Int) => x :: x * 2 :: Nil)(4 :: 3 :: 2 :: 1 :: Nil)\nres205: List[Int] = List(4, 8, 3, 6, 2, 4, 1, 2)\n\nscala> def choose[T, S](func: Function[T, Option[S]])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) match {\n     | case Some(x) => x :: acc\n     | case None => acc\n     | })(xs)(Nil)\nchoose: [T, S](func: Function[T,Option[S]])(xs: List[T])List[S]\n\nscala> choose((x: Int) => if (x % 2 == 0) Some(x * 2) else None)(4 :: 3 :: 2 :: 1 :: Nil)\nres206: List[Int] = List(8, 4)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002foldRight\u95a2\u6570\u3067\u3059\u3002:\\\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\u6b21\u306f\u3001\u300c\u5217\u306e\u6700\u521d\u306e\u8981\u7d20\u3068\u30fb\u30fb\u30fb\u300c\u5217\u306e\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u8981\u7d20\u3068\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u30fb\u30fb\u30fb\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059reduceBack\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u3067\u3059\u3002\ndef reduceBack[T](func: Function[T, Function[T, T]])(xs: List[T]): T = xs match {\n    case x :: xs => foldBack(func)(xs)(x)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u305d\u308d\u305d\u308d\u75b2\u308c\u3066\u304d\u305f\u306e\u3067\u4f7f\u7528\u4f8b\u306f\u306a\u3057\u3067\u3002\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002reduceRight\u95a2\u6570\u3067\u3059\u3002\n\u6b21\u306f\u3001fold\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059scan\u95a2\u6570\u3002\ndef scan[T, S](func: Function[T, Function[S, T]])(init: T)(xs: List[S]): List[T] = xs match {\n    case Nil => init :: Nil\n    case x :: xs => init :: scan(func)(func(init)(x))(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> scan((acc: Int) => (x: Int) => acc + x)(0)(4 :: 3 :: 2 :: 1 :: Nil)\nres207: List[Int] = List(0, 4, 7, 9, 10)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306ffold\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002scanLeft\u95a2\u6570\u3067\u3059\u3002\nscala> (4 :: 3 :: 2 :: 1 :: Nil).scanLeft(0)((x, acc) => x + acc)\nres208: List[Int] = List(0, 4, 7, 9, 10)\n\n\u6b21\u306f\u3001foldBack\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059scanBack\u95a2\u6570\u3002\nscala> def scanBack[T, S](func: Function[T, Function[S, S]])(xs: List[T])(init: S): List[S] = xs match {\n     | case Nil => init :: Nil\n     | case x :: xs => { val r = scanBack(func)(xs)(init); func(x)(r.head) :: r }\n     | }\nscanBack: [T, S](func: Function[T,Function[S,S]])(xs: List[T])(init: S)List[S]\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> scanBack((acc: Int) => (x: Int) => acc + x)(4 :: 3 :: 2 :: 1 :: Nil)(0)\nres209: List[Int] = List(10, 6, 3, 1, 0)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306ffoldBack\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002scanRight\u95a2\u6570\u3067\u3059\u3002\nscala> (4 :: 3 :: 2 :: 1 :: Nil).scanRight(0)((x, acc) => x + acc)\nres210: List[Int] = List(10, 6, 3, 1, 0)\n\n[Scala\u3067\u518d\u5e302](http://qiita.com/pizyumi/items/89436df075b976f22a0e)\u306e\u7d9a\u304d\u3002\n\n\u6b21\u306f\u3001\u300c\u300c\u300c\u300c\u521d\u671f\u5024\u3068\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e2\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e3\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u30fb\u30fb\u30fb\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059fold\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u3067\u3059\u3002\n\n```scala\ndef fold[T, S](func: Function[T, Function[S, T]])(init: T)(xs: List[S]): T = xs match {\n    case Nil => init\n    case x :: xs => fold(func)(func(init)(x))(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\nfold\u95a2\u6570\u3092\u4f7f\u3063\u3066sum\u95a2\u6570\u3068length\u95a2\u6570\u3068forall\u95a2\u6570\u3068exists\u95a2\u6570\u3068find\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```scala\nscala> def sum(xs: List[Int]): Int = fold((acc: Int) => (x: Int) => acc + x)(0)(xs)\nsum: (xs: List[Int])Int\n\nscala> sum(4 :: 3 :: 2 :: 1 :: Nil)\nres178: Int = 10\n\nscala> def length[T](xs: List[T]): Int = fold((acc: Int) => (x: T) => acc + 1)(0)(xs)\nlength: [T](xs: List[T])Int\n\nscala> length(4 :: 3 :: 2 :: 1 :: Nil)\nres180: Int = 4\n\nscala> def forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = fold((acc: Boolean) => (x: T) => acc && pred(x))(true)(xs)\nforall: [T](pred: Function[T,Boolean])(xs: List[T])Boolean\n\nscala> forall((x: Int) => x % 2 == 1)(4 :: 3 :: 2 :: 1 :: Nil)\nres181: Boolean = false\n\nscala> def exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = fold((acc: Boolean) => (x: T) => acc || pred(x))(false)(xs)\nexists: [T](pred: Function[T,Boolean])(xs: List[T])Boolean\n\nscala> exists((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres182: Boolean = true\n\nscala> def find[T](pred: Function[T, Boolean])(xs: List[T]): Option[T] = fold((acc: Option[T]) => (x: T) => if (acc == None && pred(x)) Some(x) else acc)(None)(\nxs)\nfind: [T](pred: Function[T,Boolean])(xs: List[T])Option[T]\n\nscala> find((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres183: Option[Int] = Some(4)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002foldLeft\u95a2\u6570\u3067\u3059\u3002/:\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\n```scala\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(0)((acc, x) => acc + x)\nres184: Int = 10\n\nscala> (0 /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc + x)\nres185: Int = 10\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(0)((acc, x) => acc + 1)\nres186: Int = 4\n\nscala> (0 /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc + 1)\nres187: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(true)((acc, x) => acc && x % 2 == 1)\nres188: Boolean = false\n\nscala> (true /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc && x % 2 == 1)\nres189: Boolean = false\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(false)((acc, x) => acc || x % 2 == 0)\nres190: Boolean = true\n\nscala> (false /: (4 :: 3 :: 2 :: 1 :: Nil))((acc, x) => acc || x % 2 == 0)\nres191: Boolean = true\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).foldLeft(None: Option[Int])((acc: Option[Int], x) => if (acc == None && x % 2 == 0) Some(x) else acc)\nres192: Option[Int] = Some(4)\n\nscala> ((None: Option[Int]) /: (4 :: 3 :: 2 :: 1 :: Nil))((acc: Option[Int], x) => if (acc == None && x % 2 == 0) Some(x) else acc)\nres193: Option[Int] = Some(4)\n```\n\n\u6b21\u306f\u3001\u300c\u300c\u300c\u5217\u306e1\u756a\u76ee\u306e\u8981\u7d20\u3068\u5217\u306e2\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3068\u5217\u306e3\u756a\u76ee\u306e\u8981\u7d20\u300d\u3092\u30fb\u30fb\u30fb\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059fold\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u3067\u3059\u3002\n\n```scala\ndef reduce[T](func: Function[T, Function[T, T]])(xs: List[T]): T = xs match {\n    case x :: xs => fold(func)(x)(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\nfold\u95a2\u6570\u3092\u4f7f\u3063\u3066max\u95a2\u6570\u3068min\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```scala\nscala> def max(xs: List[Int]): Int = reduce((acc: Int) => (x: Int) => if (x > acc) x else acc)(xs)\nmax: (xs: List[Int])Int\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres194: Int = 4\n\nscala> def min(xs: List[Int]): Int = reduce((acc: Int) => (x: Int) => if (x < acc) x else acc)(xs)\nmin: (xs: List[Int])Int\n\nscala> min(4 :: 3 :: 2 :: 1 :: Nil)\nres195: Int = 1\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5de6\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002reduceLeft\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (4 :: 3 :: 2 :: 1 :: Nil).reduceLeft((acc, x) => if (x > acc) x else acc)\nres196: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).reduceLeft((acc, x) => if (x < acc) x else acc)\nres197: Int = 1\n```\n\n\u6b21\u306f\u3001\u300c\u521d\u671f\u5024\u3068\u30fb\u30fb\u30fb\u300c\u5217\u306e\u6700\u5f8c\u304b\u30893\u756a\u76ee\u306e\u8981\u7d20\u3068\u300c\u5217\u306e\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u8981\u7d20\u3068\u300c\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3068\u521d\u671f\u5024\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u30fb\u30fb\u30fb\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059foldBack\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u3067\u3059\u3002\n\n```scala\ndef foldBack[T, S](func: Function[T, Function[S, S]])(xs: List[T])(init: S): S = xs match {\n    case Nil => init\n    case x :: xs => func(x)(foldBack(func)(xs)(init))\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\nfoldBack\u95a2\u6570\u3092\u4f7f\u3063\u3066skip\u95a2\u6570\u3068take\u95a2\u6570\u3068skipWhile\u95a2\u6570\u3068takeWhile\u95a2\u6570\u3068map\u95a2\u6570\u3068filter\u95a2\u6570\u3068partition\u95a2\u6570\u3068collect\u95a2\u6570\u3068choose\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```scala\nscala> def skip[T](n: Int)(xs: List[T]): List[T] = {\n     | def f[T]: Function[T, Function[Function[Int, List[T]], Function[Int, List[T]]]] = (x) => (acc) => (n) => n match {\n     | case 0 => x :: acc(0)\n     | case n => acc(n - 1)\n     | }\n     | foldBack(f[T])(xs)((n) => Nil)(n)\n     | }\nskip: [T](n: Int)(xs: List[T])List[T]\n\nscala> skip(2)(4 :: 3 :: 2 :: 1 :: Nil)\nres198: List[Int] = List(2, 1)\n\nscala> def take[T](n: Int)(xs: List[T]): List[T] = {\n     | def f[T]: Function[T, Function[Function[Int, List[T]], Function[Int, List[T]]]] = (x) => (acc) => (n) => n match {\n     | case 0 => Nil\n     | case n => x :: acc(n - 1)\n     | }\n     | foldBack(f[T])(xs)((n) => Nil)(n)\n     | }\ntake: [T](n: Int)(xs: List[T])List[T]\n\nscala> take(2)(4 :: 3 :: 2 :: 1 :: Nil)\nres199: List[Int] = List(4, 3)\n\nscala> def skipWhile[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = {\n     | def f: Function[T, Function[Function[Boolean, List[T]], Function[Boolean, List[T]]]] = (x) => (acc) => (b) => b match {\n     | case false => x :: acc(false)\n     | case true => if (pred(x)) acc(true) else x :: acc(false)\n     | }\n     | foldBack(f)(xs)((b) => Nil)(true)\n     | }\nskipWhile: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> skipWhile((x: Int) => x < 3)(1 :: 2 :: 3 :: 4 :: 5 :: 1 :: 2 :: 3 :: Nil)\nres200: List[Int] = List(3, 4, 5, 1, 2, 3)\n\nscala> def takeWhile[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = {\n     | def f: Function[T, Function[Function[Boolean, List[T]], Function[Boolean, List[T]]]] = (x) => (acc) => (b) => b match {\n     | case false => Nil\n     | case true => if (pred(x)) x :: acc(true) else Nil\n     | }\n     | foldBack(f)(xs)((b) => Nil)(true)\n     | }\ntakeWhile: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> takeWhile((x: Int) => x < 3)(1 :: 2 :: 3 :: 4 :: 5 :: 1 :: 2 :: 3 :: Nil)\nres201: List[Int] = List(1, 2)\n\nscala> def map[T, S](func: Function[T, S])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) :: acc)(xs)(Nil)\nmap: [T, S](func: Function[T,S])(xs: List[T])List[S]\n\nscala> map((x: Int) => x * 2)(4 :: 3 :: 2 :: 1 :: Nil)\nres202: List[Int] = List(8, 6, 4, 2)\n\nscala> def filter[T](pred: Function[T, Boolean])(xs: List[T]): List[T] = foldBack((x: T) => (acc: List[T]) => if (pred(x)) x :: acc else acc)(xs)(Nil)\nfilter: [T](pred: Function[T,Boolean])(xs: List[T])List[T]\n\nscala> filter((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres203: List[Int] = List(4, 2)\n\nscala> def partition[T](pred: Function[T, Boolean])(xs: List[T]): (List[T], List[T]) = foldBack((x: T) => (acc: (List[T], List[T])) => if (pred(x)) (x :: acc._1\n, acc._2) else (acc._1, x :: acc._2))(xs)(Nil, Nil)\npartition: [T](pred: Function[T,Boolean])(xs: List[T])(List[T], List[T])\n\nscala> partition((x: Int) => x % 2 == 0)(4 :: 3 :: 2 :: 1 :: Nil)\nres204: (List[Int], List[Int]) = (List(4, 2),List(3, 1))\n\nscala> def collect[T, S](func: Function[T, List[S]])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) ++ acc)(xs)(Nil)\ncollect: [T, S](func: Function[T,List[S]])(xs: List[T])List[S]\n\nscala> collect((x: Int) => x :: x * 2 :: Nil)(4 :: 3 :: 2 :: 1 :: Nil)\nres205: List[Int] = List(4, 8, 3, 6, 2, 4, 1, 2)\n\nscala> def choose[T, S](func: Function[T, Option[S]])(xs: List[T]): List[S] = foldBack((x: T) => (acc: List[S]) => func(x) match {\n     | case Some(x) => x :: acc\n     | case None => acc\n     | })(xs)(Nil)\nchoose: [T, S](func: Function[T,Option[S]])(xs: List[T])List[S]\n\nscala> choose((x: Int) => if (x % 2 == 0) Some(x * 2) else None)(4 :: 3 :: 2 :: 1 :: Nil)\nres206: List[Int] = List(8, 4)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u3042\u308a\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002foldRight\u95a2\u6570\u3067\u3059\u3002:\\\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\n\u6b21\u306f\u3001\u300c\u5217\u306e\u6700\u521d\u306e\u8981\u7d20\u3068\u30fb\u30fb\u30fb\u300c\u5217\u306e\u6700\u5f8c\u304b\u30892\u756a\u76ee\u306e\u8981\u7d20\u3068\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u300d\u30fb\u30fb\u30fb\u300d\u3092\u95a2\u6570\u306b\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059reduceBack\u95a2\u6570\u3002\u3059\u306a\u308f\u3061\u3001\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u3067\u3059\u3002\n\n```scala\ndef reduceBack[T](func: Function[T, Function[T, T]])(xs: List[T]): T = xs match {\n    case x :: xs => foldBack(func)(xs)(x)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u305d\u308d\u305d\u308d\u75b2\u308c\u3066\u304d\u305f\u306e\u3067\u4f7f\u7528\u4f8b\u306f\u306a\u3057\u3067\u3002\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u53f3\u7573\u307f\u8fbc\u307f\u95a2\u6570\uff08\u521d\u671f\u5024\u306a\u3057\uff09\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002reduceRight\u95a2\u6570\u3067\u3059\u3002\n\n\u6b21\u306f\u3001fold\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059scan\u95a2\u6570\u3002\n\n```scala\ndef scan[T, S](func: Function[T, Function[S, T]])(init: T)(xs: List[S]): List[T] = xs match {\n    case Nil => init :: Nil\n    case x :: xs => init :: scan(func)(func(init)(x))(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> scan((acc: Int) => (x: Int) => acc + x)(0)(4 :: 3 :: 2 :: 1 :: Nil)\nres207: List[Int] = List(0, 4, 7, 9, 10)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306ffold\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002scanLeft\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (4 :: 3 :: 2 :: 1 :: Nil).scanLeft(0)((x, acc) => x + acc)\nres208: List[Int] = List(0, 4, 7, 9, 10)\n```\n\n\u6b21\u306f\u3001foldBack\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059scanBack\u95a2\u6570\u3002\n\n```scala\nscala> def scanBack[T, S](func: Function[T, Function[S, S]])(xs: List[T])(init: S): List[S] = xs match {\n     | case Nil => init :: Nil\n     | case x :: xs => { val r = scanBack(func)(xs)(init); func(x)(r.head) :: r }\n     | }\nscanBack: [T, S](func: Function[T,Function[S,S]])(xs: List[T])(init: S)List[S]\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> scanBack((acc: Int) => (x: Int) => acc + x)(4 :: 3 :: 2 :: 1 :: Nil)(0)\nres209: List[Int] = List(10, 6, 3, 1, 0)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306ffoldBack\u95a2\u6570\u306e\u9014\u4e2d\u7d50\u679c\u3082\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002scanRight\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (4 :: 3 :: 2 :: 1 :: Nil).scanRight(0)((x, acc) => x + acc)\nres210: List[Int] = List(10, 6, 3, 1, 0)\n```\n"}