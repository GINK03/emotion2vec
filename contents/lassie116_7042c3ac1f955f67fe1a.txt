{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nlinuxOS\u4e0a\u3067\u66f8\u3044\u305f\u30c6\u30ad\u30b9\u30c8\u3092Qiita\u306b\u6295\u7a3f\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001Qiita API\u3092\u4f7f\u3063\u305f\u6295\u7a3f\u30b9\u30af\u30ea\u30d7\u30c8\u3092Ruby\u3067\u66f8\u3044\u305f\u3002\u597d\u304d\u306a\u30a8\u30c7\u30a3\u30bf\u3067\u66f8\u3044\u3066\u3001\u3053\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u6295\u7a3f\u3057\u3066\u3001\u30d6\u30e9\u30a6\u30b6\u3067\u7d50\u679c\u78ba\u8a8d\u3001\u3068\u3044\u3046\u4f5c\u696d\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u6295\u7a3f\u6a5f\u80fd\u3057\u304b\u306a\u3044\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6295\u7a3f\u3082\u305d\u3046\u3057\u3066\u66f8\u3044\u3066\u3044\u308b\u3002\u3055\u3089\u306b\u3061\u306a\u3080\u3068Qiita gem\u3068\u3044\u3046\u3082\u306e\u306e\u5b58\u5728\u306f\u4eca\u306f\u3058\u3081\u3066\u77e5\u3063\u305f\u3002\u307e\u3044\u3063\u304b\u3002\n\n\u52d5\u4f5c\u74b0\u5883\nruby\u88fd\u3002\u624b\u5143\u3067\u306f2.0.0\u3067\u52d5\u4f5c\u3055\u305b\u3066\u308b\u3051\u3069\u30011.9\u3067\u3082\u52d5\u304f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3002\u6a19\u6e96\u74b0\u5883\u306b\u52a0\u3048\u3066\u3001\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3092\u4f5c\u308bthor\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u4f8b\u306b\u3088\u3063\u3066ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5206\u96e2\u3057\u3066\u304f\u308c\u308bpit\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3002\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306a\u3069\u306fUnix\u30e9\u30a4\u30af\u306a\u3082\u306e\u3092\u60f3\u5b9a\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067Windows\u3067\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u52d5\u304b\u306a\u3044\u304b\u3082\u3002\n\u3042\u3068Qiita API\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067github\u3084twitter\u306e\u8a8d\u8a3c\u3060\u3051\u3067\u306f\u99c4\u76ee\u3067\u3001\u6295\u7a3f\u3057\u305f\u3044Qiita\u30e6\u30fc\u30b6\u30fc\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u52d5\u4f5c\u306e\u8aac\u660e\n\n\u8d77\u52d5\nqiita.thor\u30d5\u30a1\u30a4\u30eb\u306e\u3042\u308b\u5834\u6240\u3067thor qiita \u30b3\u30de\u30f3\u30c9\u3059\u308b\u306a\u308athor install qiita.thor\u3057\u3066\u304a\u3044\u3066\u597d\u304d\u306a\u5834\u6240\u3067thor qiita \u30b3\u30de\u30f3\u30c9\u3059\u308b\u306a\u308a\u3002\n\n\u30b3\u30de\u30f3\u30c9\n\u30b3\u30de\u30f3\u30c9\u306fnew\u3068edit\u3057\u304b\u306a\u304f\u3066new\u306f\u65b0\u898f\u4f5c\u6210\u3001edit\u306f\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3001\u3082\u3057\u304f\u306f\u3001\u7121\u6307\u5b9a\u306a\u3089\u76f4\u524d\u306b\u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\u3069\u3061\u3089\u3082\u30a8\u30c7\u30a3\u30bf\u304c\u81ea\u52d5\u3067\u7acb\u3061\u3042\u304c\u308b(\u74b0\u5883\u5909\u6570 EDITOR\u5fc5\u9808)\u306e\u3067\u7de8\u96c6\u3057\u3066\u9589\u3058\u308b\u3068upload\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u3066\u304f\u308b\u3002\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u6c7a\u3081\u3046\u3061\u3067~/qiita\u4ee5\u4e0b\u306b\u7f6e\u304b\u308c\u308b\u3002\u521d\u56de\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306b\u306fpit\u306e\u6a5f\u80fd\u3067Qiita\u306e\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5165\u529b\u3092\u6c42\u3081\u3089\u308c\u308b\u3002\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306b\u5e73\u6587\u3067\u4fdd\u5b58\u3055\u308c\u3066\u5f8c\u306f\u4f7f\u3044\u307e\u308f\u3055\u308c\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306f\u9069\u5f53\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6295\u7a3f\u8a2d\u5b9a\n\u30bf\u30b0\u3084\u516c\u958b\u7bc4\u56f2\u306e\u8a2d\u5b9a\u306f\u3001\u5404\u3005\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u982d\u306bYAML Front-matter\u306e\u5f62\u3067\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3068upload\u6642\u306b\u89e3\u91c8\u3059\u308b\u3002upload\u6642\u306b\u306f(\u65b0\u898f\u6295\u7a3f\u6642\u306b\u81ea\u52d5\u8a2d\u5b9a\u3055\u308c\u308b)uuid\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u65b0\u898f\u304b\u66f4\u65b0\u304b\u3082\u81ea\u52d5\u5224\u5225\u3002\nupload\u306e\u307f\u3092\u884c\u3046\u6a5f\u80fd\u306f\u306a\u3044\u3051\u3069\u3001\u81ea\u5206\u306e\u7528\u9014\u3068\u3057\u3066\u306fedit\u3067\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u3057\u3066\u4e00\u56de\u958b\u3044\u3066\u304b\u3089upload\n\u3059\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3002\n\n\u5236\u7d04\nthor\u3092\u4f7f\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u672c\u6765\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5206\u3051\u308b\u90e8\u5206\u30821\u30d5\u30a1\u30a4\u30eb\u306b\u305b\u3056\u308b\u3092\u5f97\u306a\u304b\u3063\u305f\u3002200\u884c\u8db3\u3089\u305a\u306a\u306e\u3067\u3001\u307e\u3042\u3044\u3044\u3063\u3061\u3083\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u3002thor\u3067\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306erequire\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u4e21\u7acb\u3055\u305b\u308b\u65b9\u6cd5\u3092\u3054\u5b58\u77e5\u306e\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u3001\u753b\u50cf\u306e\u6295\u7a3f\u306f\u3067\u304d\u306a\u3044\u3002\u307e\u3042\u3057\u3087\u3046\u304c\u306a\u3044\u3002\n\n\u30bd\u30fc\u30b9\n\nqiita.thor\n# -*- coding: utf-8 -*-\nrequire 'yaml'\nrequire 'pp'\nrequire 'net/http'\nrequire 'net/https'\nrequire 'json'\nrequire 'pit'\n\nQiitaDir = \"~/qiita\"\nQiitaLatest = \"#{QiitaDir}/latest\"\n\nclass Qiita < Thor\n  include Thor::Actions\n\n  desc \"new\", \"\u65b0\u898f\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304f\"\n  def new\n    file_path = make_entry_file\n    edit_and_upload(file_path)\n  end\n\n  desc \"edit\", \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u30a8\u30f3\u30c8\u30ea\u3092\u7de8\u96c6\u3059\u308b\u3002\u6307\u5b9a\u306a\u3057\u306a\u3089\u76f4\u524d\u306b\u7de8\u96c6\u3057\u305f\u30a8\u30f3\u30c8\u30ea\"\n  def edit(file_path=nil)\n    file_path = File.read(File.expand_path(QiitaLatest)).chomp unless file_path\n    edit_and_upload(file_path)\n  end\n\n  no_commands do\n    def make_entry_file\n      qiita_dir = QiitaDir\n      now = Time.now\n      file_title = now.strftime(\"%Y-%m-%d-%H%M%S\")\n      year = now.strftime(\"%Y\")\n      month = now.strftime(\"%m\")\n      sep = '---'\n      body = <<EOS\n#{sep}\nuuid: \ntitle: \ntags:\n- name: \nprivate: true\n#{sep}\nEOS\n      file_path = \"#{qiita_dir}/#{year}/#{month}/#{file_title}.md\"\n      create_file file_path, body\n      file_path\n    end\n\n    def qiita_agent\n      config = Pit.get(\"qiita\",:require=>{\n                         \"user\" => \"user id\",\n                         \"pass\" => \"password\"\n                       })\n      agent = QiitaAPI.new\n      agent.auth(config[\"user\"],config[\"pass\"])\n      agent\n    end\n\n    def edit_and_upload(file_path)\n      system \"#{ENV[\"EDITOR\"]} #{file_path}\"\n      save_latest(file_path)\n      puts \"edit done\"\n      if yes?(\"#{file_path} upload? (y/N)\")\n        upload(file_path)\n        puts \"uploaded\"\n      end\n    end\n\n    def upload(file_path)\n      path = File.expand_path(file_path)\n      str = File.read(path)\n      ar = str.split(\"---\\n\")\n      yaml_str = ar[1]\n      body = ar[2]\n      config = YAML.load(yaml_str)\n      puts yaml_str\n      pp config\n      config[\"body\"] = body\n      qa = qiita_agent\n\n      unless config[\"uuid\"]\n        result = qa.post_entry(config)\n        config[\"uuid\"] = result[\"uuid\"]\n        config.delete(\"body\")\n        yaml_str = config.to_yaml\n        File.open(path,\"w\") do |f|\n          f.puts yaml_str\n          f.puts \"---\"\n          f.puts body\n        end\n      else\n        qa.put_entry(config)\n      end\n\n    end\n\n    def save_latest(file_path)\n      open(File.expand_path(QiitaLatest),\"w\") do |f|\n        f.puts file_path\n      end\n    end\n  end\nend\n\nclass QiitaAPI\n\n  ### JSON HTTPS\n\n  def http_setup(url_str)\n    url = URI.parse(url_str)\n    http = Net::HTTP.new(url.host,url.port)\n    http.use_ssl = true\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n    # http.set_debug_output $stderr\n    [url,http]\n  end\n\n  def get(url_str)\n    url, http = http_setup(url_str)\n    res = http.get(url.request_uri)\n    JSON.parse(res.body)\n  end\n\n  def post(url_str,data)\n    url, http = http_setup(url_str)\n    json_str = JSON.generate(data)\n    res = http.post(url.request_uri,\n                    json_str,{'Content-Type' =>'application/json'})\n    JSON.parse(res.body)\n  end\n\n  def put(url_str,data)\n    url, http = http_setup(url_str)\n    json_str = JSON.generate(data)\n    res = http.put(url.request_uri,\n                   json_str,{'Content-Type' =>'application/json'})\n    JSON.parse(res.body)\n  end\n\n  ### main\n\n  def initialize\n    @base_url = 'https://qiita.com/api/v1'\n  end\n\n  def auth?\n    @token != nil\n  end\n\n  def auth(user,pass)\n    r = post(\"#{@base_url}/auth\",{url_name: user,password: pass})\n    @token = r[\"token\"]\n  end\n\n  def make_url(child_path)\n    path = \"#{@base_url}/#{child_path}\"\n    unless auth?\n      path\n    else\n      \"#{path}?token=#{@token}\"\n    end\n  end\n\n  ### methods\n\n  def rate_limit\n    get(make_url('rate_limit'))\n  end\n\n  def user\n    raise \"require auth\" unless auth?\n    get(make_url('user'))\n  end\n\n  def users(name)\n    get(make_url(\"users/#{name}\"))\n  end\n\n  def items\n    raise \"require auth\" unless auth?\n    get(make_url('items'))\n  end\n\n  def post_entry(data)\n    raise \"require auth\" unless auth?\n    post(make_url(\"items\"),data)\n  end\n\n  def put_entry(data)\n    raise \"require auth\" unless auth?\n    uuid = data[\"uuid\"]\n    put(make_url(\"items/#{uuid}\"),data)\n  end\nend\n\n\n# \u6982\u8981\nlinuxOS\u4e0a\u3067\u66f8\u3044\u305f\u30c6\u30ad\u30b9\u30c8\u3092Qiita\u306b\u6295\u7a3f\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001Qiita API\u3092\u4f7f\u3063\u305f\u6295\u7a3f\u30b9\u30af\u30ea\u30d7\u30c8\u3092Ruby\u3067\u66f8\u3044\u305f\u3002\u597d\u304d\u306a\u30a8\u30c7\u30a3\u30bf\u3067\u66f8\u3044\u3066\u3001\u3053\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u6295\u7a3f\u3057\u3066\u3001\u30d6\u30e9\u30a6\u30b6\u3067\u7d50\u679c\u78ba\u8a8d\u3001\u3068\u3044\u3046\u4f5c\u696d\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u6295\u7a3f\u6a5f\u80fd\u3057\u304b\u306a\u3044\u3002\u3061\u306a\u307f\u306b\u3053\u306e\u6295\u7a3f\u3082\u305d\u3046\u3057\u3066\u66f8\u3044\u3066\u3044\u308b\u3002\u3055\u3089\u306b\u3061\u306a\u3080\u3068Qiita gem\u3068\u3044\u3046\u3082\u306e\u306e\u5b58\u5728\u306f\u4eca\u306f\u3058\u3081\u3066\u77e5\u3063\u305f\u3002\u307e\u3044\u3063\u304b\u3002\n\n# \u52d5\u4f5c\u74b0\u5883\nruby\u88fd\u3002\u624b\u5143\u3067\u306f2.0.0\u3067\u52d5\u4f5c\u3055\u305b\u3066\u308b\u3051\u3069\u30011.9\u3067\u3082\u52d5\u304f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3002\u6a19\u6e96\u74b0\u5883\u306b\u52a0\u3048\u3066\u3001\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3092\u4f5c\u308bthor\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u4f8b\u306b\u3088\u3063\u3066ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5206\u96e2\u3057\u3066\u304f\u308c\u308bpit\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3002\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306a\u3069\u306fUnix\u30e9\u30a4\u30af\u306a\u3082\u306e\u3092\u60f3\u5b9a\u3057\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067Windows\u3067\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u52d5\u304b\u306a\u3044\u304b\u3082\u3002\n\u3042\u3068Qiita API\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067github\u3084twitter\u306e\u8a8d\u8a3c\u3060\u3051\u3067\u306f\u99c4\u76ee\u3067\u3001\u6295\u7a3f\u3057\u305f\u3044Qiita\u30e6\u30fc\u30b6\u30fc\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n# \u52d5\u4f5c\u306e\u8aac\u660e\n## \u8d77\u52d5\nqiita.thor\u30d5\u30a1\u30a4\u30eb\u306e\u3042\u308b\u5834\u6240\u3067`thor qiita \u30b3\u30de\u30f3\u30c9`\u3059\u308b\u306a\u308a`thor install qiita.thor`\u3057\u3066\u304a\u3044\u3066\u597d\u304d\u306a\u5834\u6240\u3067`thor qiita \u30b3\u30de\u30f3\u30c9`\u3059\u308b\u306a\u308a\u3002\n## \u30b3\u30de\u30f3\u30c9\n\u30b3\u30de\u30f3\u30c9\u306f`new`\u3068`edit`\u3057\u304b\u306a\u304f\u3066`new`\u306f\u65b0\u898f\u4f5c\u6210\u3001`edit`\u306f\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3001\u3082\u3057\u304f\u306f\u3001\u7121\u6307\u5b9a\u306a\u3089\u76f4\u524d\u306b\u7de8\u96c6\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3002\u3069\u3061\u3089\u3082\u30a8\u30c7\u30a3\u30bf\u304c\u81ea\u52d5\u3067\u7acb\u3061\u3042\u304c\u308b(\u74b0\u5883\u5909\u6570 EDITOR\u5fc5\u9808)\u306e\u3067\u7de8\u96c6\u3057\u3066\u9589\u3058\u308b\u3068upload\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u3066\u304f\u308b\u3002\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u6c7a\u3081\u3046\u3061\u3067~/qiita\u4ee5\u4e0b\u306b\u7f6e\u304b\u308c\u308b\u3002\u521d\u56de\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306b\u306fpit\u306e\u6a5f\u80fd\u3067Qiita\u306e\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5165\u529b\u3092\u6c42\u3081\u3089\u308c\u308b\u3002\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306b\u5e73\u6587\u3067\u4fdd\u5b58\u3055\u308c\u3066\u5f8c\u306f\u4f7f\u3044\u307e\u308f\u3055\u308c\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306f\u9069\u5f53\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u6295\u7a3f\u8a2d\u5b9a\n\u30bf\u30b0\u3084\u516c\u958b\u7bc4\u56f2\u306e\u8a2d\u5b9a\u306f\u3001\u5404\u3005\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u982d\u306bYAML Front-matter\u306e\u5f62\u3067\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3068upload\u6642\u306b\u89e3\u91c8\u3059\u308b\u3002upload\u6642\u306b\u306f(\u65b0\u898f\u6295\u7a3f\u6642\u306b\u81ea\u52d5\u8a2d\u5b9a\u3055\u308c\u308b)uuid\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u65b0\u898f\u304b\u66f4\u65b0\u304b\u3082\u81ea\u52d5\u5224\u5225\u3002\nupload\u306e\u307f\u3092\u884c\u3046\u6a5f\u80fd\u306f\u306a\u3044\u3051\u3069\u3001\u81ea\u5206\u306e\u7528\u9014\u3068\u3057\u3066\u306fedit\u3067\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\u3057\u3066\u4e00\u56de\u958b\u3044\u3066\u304b\u3089upload\n\u3059\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3002\n\n# \u5236\u7d04\nthor\u3092\u4f7f\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u672c\u6765\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5206\u3051\u308b\u90e8\u5206\u30821\u30d5\u30a1\u30a4\u30eb\u306b\u305b\u3056\u308b\u3092\u5f97\u306a\u304b\u3063\u305f\u3002200\u884c\u8db3\u3089\u305a\u306a\u306e\u3067\u3001\u307e\u3042\u3044\u3044\u3063\u3061\u3083\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u3002thor\u3067\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306erequire\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u4e21\u7acb\u3055\u305b\u308b\u65b9\u6cd5\u3092\u3054\u5b58\u77e5\u306e\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3060\u3057\u3001\u753b\u50cf\u306e\u6295\u7a3f\u306f\u3067\u304d\u306a\u3044\u3002\u307e\u3042\u3057\u3087\u3046\u304c\u306a\u3044\u3002\n\n# \u30bd\u30fc\u30b9\n```ruby:qiita.thor\n# -*- coding: utf-8 -*-\nrequire 'yaml'\nrequire 'pp'\nrequire 'net/http'\nrequire 'net/https'\nrequire 'json'\nrequire 'pit'\n\nQiitaDir = \"~/qiita\"\nQiitaLatest = \"#{QiitaDir}/latest\"\n\nclass Qiita < Thor\n  include Thor::Actions\n\n  desc \"new\", \"\u65b0\u898f\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304f\"\n  def new\n    file_path = make_entry_file\n    edit_and_upload(file_path)\n  end\n\n  desc \"edit\", \"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u30a8\u30f3\u30c8\u30ea\u3092\u7de8\u96c6\u3059\u308b\u3002\u6307\u5b9a\u306a\u3057\u306a\u3089\u76f4\u524d\u306b\u7de8\u96c6\u3057\u305f\u30a8\u30f3\u30c8\u30ea\"\n  def edit(file_path=nil)\n    file_path = File.read(File.expand_path(QiitaLatest)).chomp unless file_path\n    edit_and_upload(file_path)\n  end\n\n  no_commands do\n    def make_entry_file\n      qiita_dir = QiitaDir\n      now = Time.now\n      file_title = now.strftime(\"%Y-%m-%d-%H%M%S\")\n      year = now.strftime(\"%Y\")\n      month = now.strftime(\"%m\")\n      sep = '---'\n      body = <<EOS\n#{sep}\nuuid: \ntitle: \ntags:\n- name: \nprivate: true\n#{sep}\nEOS\n      file_path = \"#{qiita_dir}/#{year}/#{month}/#{file_title}.md\"\n      create_file file_path, body\n      file_path\n    end\n\n    def qiita_agent\n      config = Pit.get(\"qiita\",:require=>{\n                         \"user\" => \"user id\",\n                         \"pass\" => \"password\"\n                       })\n      agent = QiitaAPI.new\n      agent.auth(config[\"user\"],config[\"pass\"])\n      agent\n    end\n\n    def edit_and_upload(file_path)\n      system \"#{ENV[\"EDITOR\"]} #{file_path}\"\n      save_latest(file_path)\n      puts \"edit done\"\n      if yes?(\"#{file_path} upload? (y/N)\")\n        upload(file_path)\n        puts \"uploaded\"\n      end\n    end\n\n    def upload(file_path)\n      path = File.expand_path(file_path)\n      str = File.read(path)\n      ar = str.split(\"---\\n\")\n      yaml_str = ar[1]\n      body = ar[2]\n      config = YAML.load(yaml_str)\n      puts yaml_str\n      pp config\n      config[\"body\"] = body\n      qa = qiita_agent\n      \n      unless config[\"uuid\"]\n        result = qa.post_entry(config)\n        config[\"uuid\"] = result[\"uuid\"]\n        config.delete(\"body\")\n        yaml_str = config.to_yaml\n        File.open(path,\"w\") do |f|\n          f.puts yaml_str\n          f.puts \"---\"\n          f.puts body\n        end\n      else\n        qa.put_entry(config)\n      end\n\n    end\n\n    def save_latest(file_path)\n      open(File.expand_path(QiitaLatest),\"w\") do |f|\n        f.puts file_path\n      end\n    end\n  end\nend\n\nclass QiitaAPI\n\n  ### JSON HTTPS\n\n  def http_setup(url_str)\n    url = URI.parse(url_str)\n    http = Net::HTTP.new(url.host,url.port)\n    http.use_ssl = true\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n    # http.set_debug_output $stderr\n    [url,http]\n  end\n\n  def get(url_str)\n    url, http = http_setup(url_str)\n    res = http.get(url.request_uri)\n    JSON.parse(res.body)\n  end\n\n  def post(url_str,data)\n    url, http = http_setup(url_str)\n    json_str = JSON.generate(data)\n    res = http.post(url.request_uri,\n                    json_str,{'Content-Type' =>'application/json'})\n    JSON.parse(res.body)\n  end\n  \n  def put(url_str,data)\n    url, http = http_setup(url_str)\n    json_str = JSON.generate(data)\n    res = http.put(url.request_uri,\n                   json_str,{'Content-Type' =>'application/json'})\n    JSON.parse(res.body)\n  end\n\n  ### main\n\n  def initialize\n    @base_url = 'https://qiita.com/api/v1'\n  end\n\n  def auth?\n    @token != nil\n  end\n\n  def auth(user,pass)\n    r = post(\"#{@base_url}/auth\",{url_name: user,password: pass})\n    @token = r[\"token\"]\n  end\n\n  def make_url(child_path)\n    path = \"#{@base_url}/#{child_path}\"\n    unless auth?\n      path\n    else\n      \"#{path}?token=#{@token}\"\n    end\n  end\n\n  ### methods\n\n  def rate_limit\n    get(make_url('rate_limit'))\n  end\n\n  def user\n    raise \"require auth\" unless auth?\n    get(make_url('user'))\n  end\n\n  def users(name)\n    get(make_url(\"users/#{name}\"))\n  end\n\n  def items\n    raise \"require auth\" unless auth?\n    get(make_url('items'))\n  end\n\n  def post_entry(data)\n    raise \"require auth\" unless auth?\n    post(make_url(\"items\"),data)\n  end\n  \n  def put_entry(data)\n    raise \"require auth\" unless auth?\n    uuid = data[\"uuid\"]\n    put(make_url(\"items/#{uuid}\"),data)\n  end\nend\n```\n\n\n", "tags": ["Ruby", "thor", "Qiita", "QiitaAPI"]}