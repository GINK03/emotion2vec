{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3084\u308a\u307e\u3059\u3002\u74b0\u5883\u306fPython2.7 + Ubuntu15.10\u3067\u3059\u3002\n\u5148\u6708\u3001\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u3092\u554f\u984c25\u307e\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u304c\u3060\u3081\u3060\u3081\u306a\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u3066\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3068\u3044\u3046\u672c\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u6539\u3081\u3066\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u306b\u6c17\u3092\u3064\u3051\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7b2c1\u7ae0: \u6e96\u5099\u904b\u52d5\n\n00.\u6587\u5b57\u5217\u306e\u9006\u9806\n\u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n00.py\n#coding: UTF-8\ns = \"stressed\"\nprint s[::-1]\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp00_stringreverse.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint \"stressed\"[::-1]\n\n\n\u5b9f\u884c\u7d50\u679c\nharuka@ubuntu:~/NLP100$ python 00.py\ndesserts\n\n01.\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n01.py\n#coding: UTF-8\n\ns = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint  s[0:1] + s[2:3] + s[4:5] + s[6:7]\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp01_char_of_string_link.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"[::2]\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30d1\u30c8\u30ab\u30fc\n\n02.\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n02.py\n#coding: UTF-8\n\np = u'\u30d1\u30c8\u30ab\u30fc'\nt = u'\u30bf\u30af\u30b7\u30fc'\n\nstr = \"\".join(i+j for i,j in (zip(p,t)))\nprint str\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp02_char_of_string_alternate_link.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint \"\".join(char_pa + char_ta for char_pa,char_ta in (zip(u\"\u30d1\u30c8\u30ab\u30fc\",u\"\u30bf\u30af\u30b7\u30fc\")))\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\n\n03.\u5186\u5468\u7387\n\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n03.py\n#coding: UTF-8\ns = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\n\ns = s.replace(',',\"\")\ns = s.replace('.',\"\")\nlist =[]\n\nfor i in s.split():\n   list.append(len(i))\n\nprint list\n\n\n\u3000\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp03_number_of_letters_of_word.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\n\n#\u5358\u8a9e\u306e\u6587\u5b57\u6570\u3092\u6570\u3048\u305f\u3044\u305f\u3081sentence\u304b\u3089\",\"\u3068\".\"\u3092\u9664\u304f\nsentence = sentence.replace(',',\"\")\nsentence = sentence.replace('.',\"\")\n\n#\u6587\u7ae0\u3092\u7a7a\u767d\u3067\u533a\u5207\u308a\u5404\u5358\u8a9e\u306e\u6587\u5b57\u6570\u3092\u6570\u3048\u3066\u3044\u304f\nnumber_of_letters =[]\nfor char_of_sentence in sentence.split():\n    number_of_letters.append(len(char_of_sentence))\n\nprint number_of_letters\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]\n\n04.\u5143\u7d20\u8a18\u53f7\n\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n04.py\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n\nnum = [1,5,6,7,8,9,15,16,19]\ndic = {}\n\nfor (i,x) in enumerate(text.split(),1):\n  if i in num:\n    dic[x[0:1]] = i\n  else:\n    dic[x[0:2]] = i\n\nprint dic\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp04_wordhead_and_wordposition_map.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n\nwordhead_1char = [1,5,6,7,8,9,15,16,19]\nwordhead_and_wordposition = {}\n\nfor (wordhead,word) in enumerate(sentence.split(), start = 1):\n    if wordhead in wordhead_1char:\n        wordhead_and_wordposition[word[:1]] = wordhead\n    else:\n        wordhead_and_wordposition[word[:2]] = wordhead\n\nprint wordhead_and_wordposition\n\n\n\u5b9f\u884c\u7d50\u679c\n{'Be': 4, 'C': 6, 'B': 5, 'Ca': 20, 'F': 9, 'S': 16, 'H': 1, 'K': 19, 'Al': 13, 'Mi': 12, 'Ne': 10, 'O': 8, 'Li': 3, 'P': 15, 'Si': 14, 'Ar': 18, 'Na': 11, 'N': 7, 'Cl': 17, 'He': 2}\n\n05.n-gram\n\u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n05.py\n#coding: UTF-8\ntext = \"I am an NLPer\"\n\ndef ngram(text,n):\n  list = []\n  if len(text) >= n:\n      for i in xrange(len(text) - n + 1):\n          list.append(text[i:i+n])\n  return list\n\nprint ngram(text,2)\nprint ngram(text.split(),2)\n\n\n\u3000\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp05_bigram.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"I am an NLPer\"\n\n#\u95a2\u6570ngram n\u6587\u5b57\u3067\u5358\u8a9e\u3092\u533a\u5207\u308b\ndef ngram(sentence,n):\n    word_separate = []\n    if len(sentence) >= n:\n        for separate_start in xrange(len(sentence) - n + 1):\n            word_separate.append(sentence[separate_start:separate_start\n            +n])\n    return word_separate\n\n#word_bigram\nprint ngram(sentence,2)\n\n#char_bigram\nprint ngram(sentence.split(),2)\n\n\n\u5b9f\u884c\u7d50\u679c\n['I ', ' a', 'am', 'm ', ' a', 'an', 'n ', ' N', 'NL', 'LP', 'Pe', 'er']\n[['I', 'am'], ['am', 'an'], ['an', 'NLPer']]\n\n06.\u96c6\u5408\n\"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n06.py\n#coding: UTF-8\ntxt1 = \"paraparaparadise\"\ntxt2 = \"paragraph\"\n\ndef ngram(text,n):\n  list = []\n  if len(text) >= n:\n      for i in xrange(len(text) - n + 1):\n          list.append(text[i:i+n])\n  return list\n\nX = set(ngram(txt1,2))\nY = set(ngram(txt2,2))\n\nprint X,Y\n\nprint (\"wa:%s\" % list(X|Y))\nprint (\"seki:%s\" % list(X&Y))\nprint (\"sa:%s\" % list(X-Y))\n\nprint u\"\\\"se\\\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(X)\n\nprint u\"\\\"se\\\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(Y)\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp06_bigram_union_intersection_difference.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u95a2\u6570ngram n\u6587\u5b57\u3067\u5358\u8a9e\u3092\u533a\u5207\u308b\ndef ngram(sentence,n):\n    word_separate = []\n    if len(sentence) >= n:\n        for separate_start in xrange(len(sentence) - n + 1):\n            word_separate.append(sentence[separate_start:separate_start\n            +n])\n    return word_separate\n\nX = set(ngram(\"paraparaparadise\",2))\nY = set(ngram(\"paragraph\",2))\n\nprint (\"union:%s\" % list(X|Y))\nprint (\"intersection:%s\" % list(X&Y))\nprint (\"difference:%s\" % list(X-Y))\n\nprint u\"\\\"se\\\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(X)\n\nprint u\"\\\"se\\\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(Y)\n\n\n\u5b9f\u884c\u7d50\u679c\nunion:['ad', 'ag', 'di', 'is', 'ap', 'pa', 'ra', 'ph', 'ar', 'se', 'gr']\nintersection:['ap', 'pa', 'ar', 'ra']\ndifference:['is', 'ad', 'se', 'di']\n\"se\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\nTrue\n\"se\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\nFalse\n\n07.\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n07.py\n#coding: UTF-8\n\ndef template(x,y,z):\n  print \"%s\u6642\u306e%s\u306f%s\" % (x,y,z)\n\ntemplate(12,\"\u6c17\u6e29\",22.4)\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp07_argument_string.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u5f15\u6570x,y,z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\ndef argument_string(x,y,z):\n    print \"%s\u6642\u306e%s\u306f%s\" % (x,y,z)\n\nargument_string(12,\"\u6c17\u6e29\",22.4)\n\n\n\u5b9f\u884c\u7d50\u679c\n12\u6642\u306e\u6c17\u6e29\u306f22.4\n\n08.\u6697\u53f7\u6587\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n08.py\n#coding: UTF-8\ntext = \"This is a pen\"\n\ndef cipher(text):\n  ans = \"\"\n  for i in text:\n    if i.islower():\n      str = 219 - ord(i)\n      ans += chr(str)\n    else:\n      ans += i\n  return ans\n\nprint cipher(text)\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp08_cipher_219\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\u3001\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u95a2>\u6570\u30021\u56de\u884c\u3046\u3068\u6697\u53f7\u5316\u30012\u56de\u884c\u3046\u3068\u5fa9\u53f7\u3059\u308b\u3002\ndef cipher(sentence):\n    encrypt_sentence = \"\"\n    for char in sentence:\n        if char.islower():\n            encrypt_lower = 219 - ord(char)\n            encrypt_sentence += chr(encrypt_lower)\n        else:\n            encrypt_sentence += char\n    return encrypt_sentence\n\n#\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\"This is a pen\"\u3092\u6697\u53f7\u5316\u3059\u308b\u3002\nprint cipher(\"This is a pen\")\n\n\n\u5b9f\u884c\u7d50\u679c\nTsrh rh z kvm\n\n09. Typoglycemia\n\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\nnlp09.py\n#coding: UTF-8\nimport random\n\ntext = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n\nans = []\nanslist = []\n\nfor i in text.split():\n  if len(i) <= 4:\n      anslist.append(i)\n  else:\n      naka = list(i[1:-1])\n      random.shuffle(naka)\n      anslist.append(i[0:1] + \"\".join(naka) + i[-1])\n\nprint \" \".join(anslist)\n\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\nnlp09_content_of_word_random\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport random\n\nsentence = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n\n#\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u3002\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3002\ncontent_of_word_random = []\nfor word in sentence.split():\n    if len(word) <= 4:\n        content_of_word_random.append(word)\n    else:\n        word_mid = list(word[1:-1])\n        random.shuffle(word_mid)\n        content_of_word_random.append(word[0:1] + \"\".join(word_mid) + word[-1])\n\nprint \" \".join(content_of_word_random)\n\n\n\u5b9f\u884c\u7d50\u679c\nI c'nodlut bvleeie that I colud aucltlay untanresdd what I was reandig : the phmneaeonl power of the hamun mind .\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3084\u308a\u307e\u3059\u3002\u74b0\u5883\u306fPython2.7 + Ubuntu15.10\u3067\u3059\u3002\n\u5148\u6708\u3001\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u3092\u554f\u984c25\u307e\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u304c\u3060\u3081\u3060\u3081\u306a\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u3066\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3068\u3044\u3046\u672c\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u6539\u3081\u3066\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u306b\u6c17\u3092\u3064\u3051\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u7b2c1\u7ae0: \u6e96\u5099\u904b\u52d5\n\n##00.\u6587\u5b57\u5217\u306e\u9006\u9806\n\u6587\u5b57\u5217\"stressed\"\u306e\u6587\u5b57\u3092\u9006\u306b\uff08\u672b\u5c3e\u304b\u3089\u5148\u982d\u306b\u5411\u304b\u3063\u3066\uff09\u4e26\u3079\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:00.py\n#coding: UTF-8\ns = \"stressed\"\nprint s[::-1]\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp00_stringreverse.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint \"stressed\"[::-1]\n```\n\n\u5b9f\u884c\u7d50\u679c\nharuka@ubuntu:~/NLP100$ python 00.py\ndesserts\n\n##01.\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306e1,3,5,7\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u5f97\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:01.py\n#coding: UTF-8\n\ns = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint  s[0:1] + s[2:3] + s[4:5] + s[6:7]\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp01_char_of_string_link.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"[::2]\n```\n\n\u5b9f\u884c\u7d50\u679c\n\u30d1\u30c8\u30ab\u30fc\n\n##02.\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\n\u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\u306e\u6587\u5b57\u3092\u5148\u982d\u304b\u3089\u4ea4\u4e92\u306b\u9023\u7d50\u3057\u3066\u6587\u5b57\u5217\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\u3092\u5f97\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:02.py\n#coding: UTF-8\n\np = u'\u30d1\u30c8\u30ab\u30fc'\nt = u'\u30bf\u30af\u30b7\u30fc'\n\nstr = \"\".join(i+j for i,j in (zip(p,t)))\nprint str\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp02_char_of_string_alternate_link.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nprint \"\".join(char_pa + char_ta for char_pa,char_ta in (zip(u\"\u30d1\u30c8\u30ab\u30fc\",u\"\u30bf\u30af\u30b7\u30fc\")))\n```\n\n\u5b9f\u884c\u7d50\u679c\n\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\n\n##03.\u5186\u5468\u7387\n\"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c\u5404\u5358\u8a9e\u306e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\uff09\u6587\u5b57\u6570\u3092\u5148\u982d\u304b\u3089\u51fa\u73fe\u9806\u306b\u4e26\u3079\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:03.py\n#coding: UTF-8\ns = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\n\ns = s.replace(',',\"\")\ns = s.replace('.',\"\")\nlist =[]\n\nfor i in s.split():\n   list.append(len(i))\n\nprint list\n```\n\u3000\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp03_number_of_letters_of_word.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\n\n#\u5358\u8a9e\u306e\u6587\u5b57\u6570\u3092\u6570\u3048\u305f\u3044\u305f\u3081sentence\u304b\u3089\",\"\u3068\".\"\u3092\u9664\u304f\nsentence = sentence.replace(',',\"\")\nsentence = sentence.replace('.',\"\")\n\n#\u6587\u7ae0\u3092\u7a7a\u767d\u3067\u533a\u5207\u308a\u5404\u5358\u8a9e\u306e\u6587\u5b57\u6570\u3092\u6570\u3048\u3066\u3044\u304f\nnumber_of_letters =[]\nfor char_of_sentence in sentence.split():\n    number_of_letters.append(len(char_of_sentence))\n\nprint number_of_letters\n```\n\n\u5b9f\u884c\u7d50\u679c\n[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]\n\n##04.\u5143\u7d20\u8a18\u53f7\n\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\u3068\u3044\u3046\u6587\u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\uff0c1, 5, 6, 7, 8, 9, 15, 16, 19\u756a\u76ee\u306e\u5358\u8a9e\u306f\u5148\u982d\u306e1\u6587\u5b57\uff0c\u305d\u308c\u4ee5\u5916\u306e\u5358\u8a9e\u306f\u5148\u982d\u306b2\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\uff0c\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\u304b\u3089\u5358\u8a9e\u306e\u4f4d\u7f6e\uff08\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u306e\u5358\u8a9e\u304b\uff09\u3078\u306e\u9023\u60f3\u914d\u5217\uff08\u8f9e\u66f8\u578b\u3082\u3057\u304f\u306f\u30de\u30c3\u30d7\u578b\uff09\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:04.py\ntext = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n\nnum = [1,5,6,7,8,9,15,16,19]\ndic = {}\n\nfor (i,x) in enumerate(text.split(),1):\n  if i in num:\n    dic[x[0:1]] = i\n  else:\n    dic[x[0:2]] = i\n\nprint dic\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp04_wordhead_and_wordposition_map.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\n\nwordhead_1char = [1,5,6,7,8,9,15,16,19]\nwordhead_and_wordposition = {}\n\nfor (wordhead,word) in enumerate(sentence.split(), start = 1):\n    if wordhead in wordhead_1char:\n        wordhead_and_wordposition[word[:1]] = wordhead\n    else:\n        wordhead_and_wordposition[word[:2]] = wordhead\n\nprint wordhead_and_wordposition\n```\n\n\u5b9f\u884c\u7d50\u679c\n{'Be': 4, 'C': 6, 'B': 5, 'Ca': 20, 'F': 9, 'S': 16, 'H': 1, 'K': 19, 'Al': 13, 'Mi': 12, 'Ne': 10, 'O': 8, 'Li': 3, 'P': 15, 'Si': 14, 'Ar': 18, 'Na': 11, 'N': 7, 'Cl': 17, 'He': 2}\n\n##05.n-gram\n\u4e0e\u3048\u3089\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u6587\u5b57\u5217\u3084\u30ea\u30b9\u30c8\u306a\u3069\uff09\u304b\u3089n-gram\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff0e\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\"I am an NLPer\"\u3068\u3044\u3046\u6587\u304b\u3089\u5358\u8a9ebi-gram\uff0c\u6587\u5b57bi-gram\u3092\u5f97\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:05.py\n#coding: UTF-8\ntext = \"I am an NLPer\"\n\ndef ngram(text,n):\n  list = []\n  if len(text) >= n:\n      for i in xrange(len(text) - n + 1):\n          list.append(text[i:i+n])\n  return list\n\nprint ngram(text,2)\nprint ngram(text.split(),2)\n```\n\u3000\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp05_bigram.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nsentence = \"I am an NLPer\"\n\n#\u95a2\u6570ngram n\u6587\u5b57\u3067\u5358\u8a9e\u3092\u533a\u5207\u308b\ndef ngram(sentence,n):\n    word_separate = []\n    if len(sentence) >= n:\n        for separate_start in xrange(len(sentence) - n + 1):\n            word_separate.append(sentence[separate_start:separate_start\n            +n])\n    return word_separate\n\n#word_bigram\nprint ngram(sentence,2)\n\n#char_bigram\nprint ngram(sentence.split(),2)\n```\n\n\u5b9f\u884c\u7d50\u679c\n['I ', ' a', 'am', 'm ', ' a', 'an', 'n ', ' N', 'NL', 'LP', 'Pe', 'er']\n[['I', 'am'], ['am', 'an'], ['an', 'NLPer']]\n\n##06.\u96c6\u5408\n\"paraparaparadise\"\u3068\"paragraph\"\u306b\u542b\u307e\u308c\u308b\u6587\u5b57bi-gram\u306e\u96c6\u5408\u3092\uff0c\u305d\u308c\u305e\u308c, X\u3068Y\u3068\u3057\u3066\u6c42\u3081\uff0cX\u3068Y\u306e\u548c\u96c6\u5408\uff0c\u7a4d\u96c6\u5408\uff0c\u5dee\u96c6\u5408\u3092\u6c42\u3081\u3088\uff0e\u3055\u3089\u306b\uff0c'se'\u3068\u3044\u3046bi-gram\u304cX\u304a\u3088\u3073Y\u306b\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:06.py\n#coding: UTF-8\ntxt1 = \"paraparaparadise\"\ntxt2 = \"paragraph\"\n\ndef ngram(text,n):\n  list = []\n  if len(text) >= n:\n      for i in xrange(len(text) - n + 1):\n          list.append(text[i:i+n])\n  return list\n\nX = set(ngram(txt1,2))\nY = set(ngram(txt2,2))\n\nprint X,Y\n\nprint (\"wa:%s\" % list(X|Y))\nprint (\"seki:%s\" % list(X&Y))\nprint (\"sa:%s\" % list(X-Y))\n\nprint u\"\\\"se\\\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(X)\n\nprint u\"\\\"se\\\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(Y)\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp06_bigram_union_intersection_difference.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u95a2\u6570ngram n\u6587\u5b57\u3067\u5358\u8a9e\u3092\u533a\u5207\u308b\ndef ngram(sentence,n):\n    word_separate = []\n    if len(sentence) >= n:\n        for separate_start in xrange(len(sentence) - n + 1):\n            word_separate.append(sentence[separate_start:separate_start\n            +n])\n    return word_separate\n\nX = set(ngram(\"paraparaparadise\",2))\nY = set(ngram(\"paragraph\",2))\n\nprint (\"union:%s\" % list(X|Y))\nprint (\"intersection:%s\" % list(X&Y))\nprint (\"difference:%s\" % list(X-Y))\n\nprint u\"\\\"se\\\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(X)\n\nprint u\"\\\"se\\\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\"\nprint \"se\" in list(Y)\n```\n\n\u5b9f\u884c\u7d50\u679c\nunion:['ad', 'ag', 'di', 'is', 'ap', 'pa', 'ra', 'ph', 'ar', 'se', 'gr']\nintersection:['ap', 'pa', 'ar', 'ra']\ndifference:['is', 'ad', 'se', 'di']\n\"se\"\u306fX\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\nTrue\n\"se\"\u306fY\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b:\nFalse\n\n##07.\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\n\u5f15\u6570x, y, z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3055\u3089\u306b\uff0cx=12, y=\"\u6c17\u6e29\", z=22.4\u3068\u3057\u3066\uff0c\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:07.py\n#coding: UTF-8\n\ndef template(x,y,z):\n  print \"%s\u6642\u306e%s\u306f%s\" % (x,y,z)\n\ntemplate(12,\"\u6c17\u6e29\",22.4)\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp07_argument_string.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u5f15\u6570x,y,z\u3092\u53d7\u3051\u53d6\u308a\u300cx\u6642\u306ey\u306fz\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\ndef argument_string(x,y,z):\n    print \"%s\u6642\u306e%s\u306f%s\" % (x,y,z)\n\nargument_string(12,\"\u6c17\u6e29\",22.4)\n```\n\n\u5b9f\u884c\u7d50\u679c\n12\u6642\u306e\u6c17\u6e29\u306f22.4\n\n##08.\u6697\u53f7\u6587\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\n\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\n\u3053\u306e\u95a2\u6570\u3092\u7528\u3044\uff0c\u82f1\u8a9e\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u305b\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:08.py\n#coding: UTF-8\ntext = \"This is a pen\"\n\ndef cipher(text):\n  ans = \"\"\n  for i in text:\n    if i.islower():\n      str = 219 - ord(i)\n      ans += chr(str)\n    else:\n      ans += i\n  return ans\n\nprint cipher(text)\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp08_cipher_219\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#\u82f1\u5c0f\u6587\u5b57\u306a\u3089\u3070(219 - \u6587\u5b57\u30b3\u30fc\u30c9)\u306e\u6587\u5b57\u306b\u7f6e\u63db\u3001\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u95a2>\u6570\u30021\u56de\u884c\u3046\u3068\u6697\u53f7\u5316\u30012\u56de\u884c\u3046\u3068\u5fa9\u53f7\u3059\u308b\u3002\ndef cipher(sentence):\n    encrypt_sentence = \"\"\n    for char in sentence:\n        if char.islower():\n            encrypt_lower = 219 - ord(char)\n            encrypt_sentence += chr(encrypt_lower)\n        else:\n            encrypt_sentence += char\n    return encrypt_sentence\n\n#\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\"This is a pen\"\u3092\u6697\u53f7\u5316\u3059\u308b\u3002\nprint cipher(\"This is a pen\")\n```\n\n\u5b9f\u884c\u7d50\u679c\nTsrh rh z kvm\n\n##09. Typoglycemia\n\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3053\u3068\u3068\u3059\u308b\uff0e\u9069\u5f53\u306a\u82f1\u8a9e\u306e\u6587\uff08\u4f8b\u3048\u3070\"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\uff09\u3092\u4e0e\u3048\uff0c\u305d\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u305b\u3088\uff0e\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u524d\n\n```py:nlp09.py\n#coding: UTF-8\nimport random\n\ntext = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n\nans = []\nanslist = []\n\nfor i in text.split():\n  if len(i) <= 4:\n      anslist.append(i)\n  else:\n      naka = list(i[1:-1])\n      random.shuffle(naka)\n      anslist.append(i[0:1] + \"\".join(naka) + i[-1])\n\nprint \" \".join(anslist)\n```\n\n\u2193\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u5f8c\n\n```py:nlp09_content_of_word_random\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport random\n\nsentence = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind .\"\n\n#\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u5217\u306b\u5bfe\u3057\u3066\uff0c\u5404\u5358\u8a9e\u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u6587\u5b57\u306f\u6b8b\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\u308b\u3002\u305f\u3060\u3057\uff0c\u9577\u3055\u304c\uff14\u4ee5\u4e0b\u306e\u5358\u8a9e\u306f\u4e26\u3073\u66ff\u3048\u306a\u3044\u3002\ncontent_of_word_random = []\nfor word in sentence.split():\n    if len(word) <= 4:\n        content_of_word_random.append(word)\n    else:\n        word_mid = list(word[1:-1])\n        random.shuffle(word_mid)\n        content_of_word_random.append(word[0:1] + \"\".join(word_mid) + word[-1])\n\nprint \" \".join(content_of_word_random)\n```\n\n\u5b9f\u884c\u7d50\u679c\nI c'nodlut bvleeie that I colud aucltlay untanresdd what I was reandig : the phmneaeonl power of the hamun mind .\n", "tags": ["Python", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0", "\u30ea\u30fc\u30c0\u30d6\u30eb\u30b3\u30fc\u30c9"]}