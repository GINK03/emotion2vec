{"context": "\n\n\u306f\u3058\u3081\u306b\nprocfs\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u306f\u30ab\u30fc\u30cd\u30eb\u3084\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u306e\u30b3\u30fc\u30c9\u306b\u3088\u304f\u73fe\u308c\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u3088\u304f\u898b\u304b\u3051\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u300cseq_\u300d\u3068\u306a\u3063\u3066\u3044\u308b\u95a2\u6570\u540d\u3067\u3059\u3002\nstatic const struct file_operations proc_schedstat_operations = {\n    .open    = schedstat_open,\n    .read    = seq_read,\n    .llseek  = seq_lseek,\n    .release = seq_release,\n};\n\n\u3053\u308c\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u547c\u3070\u308c\u308b\u4ed5\u7d44\u307f\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308bI/F\u306b\u306a\u308a\u307e\u3059\u3002seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u3044\u308d\u3044\u308d\u306a\u76ee\u7684\u304c\u3042\u308a\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u3064\u3044\u3066\u306e\u6587\u66f8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u4eca\u56de\u8aad\u3093\u3060Linux\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f4.9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305aDocument\u3092\u8aad\u3080\n\nDocumentation/filesystems/seq_file.txt\n  8 There are numerous ways for a device driver (or other kernel component) to\n  9 provide information to the user or system administrator.  One useful\n 10 technique is the creation of virtual files, in debugfs, /proc or elsewhere.\n 11 Virtual files can provide human-readable output that is easy to get at\n 12 without any special utility programs; they can also make life easier for\n 13 script writers. It is not surprising that the use of virtual files has\n 14 grown over the years.\n\n\n\u8981\u7d04\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u3084\u30b7\u30b9\u30c6\u30e0\u7ba1\u7406\u8005\u306b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u4fdd\u6709\u3059\u308b\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u624b\u6bb5\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u3067\u3082\u6709\u7528\u306a\u624b\u6bb5\u306e\u3072\u3068\u3064\u304c/proc\u306a\u3069\u306b\u4ee3\u8868\u3055\u308c\u308b\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u3092\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u90fd\u5ea6\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3042\u308a\u3001\u304b\u3064\u540c\u3058\u3088\u3046\u306a\u5b9f\u88c5\u304c\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u826f\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3088\u3063\u3066\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7684\u306a\u3082\u306e\u3092\u63d0\u4f9b\u3057\u305f\u30fb\u30fb\u30fb\u3068\u3044\u3046\u306e\u304cseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304c\u751f\u307e\u308c\u305f\u52d5\u6a5f\u3067\u3059\u3002\n\nDocumentation/filesystems/seq_file.txt\n 67 The iterator interface\n 68 \n 69 Modules implementing a virtual file with seq_file must implement a simple\n 70 iterator object that allows stepping through the data of interest.\n 71 Iterators must be able to move to a specific position - like the file they\n 72 implement - but the interpretation of that position is up to the iterator\n 73 itself. A seq_file implementation that is formatting firewall rules, for\n 74 example, could interpret position N as the Nth rule in the chain.\n 75 Positioning can thus be done in whatever way makes the most sense for the\n 76 generator of the data, which need not be aware of how a position translates\n 77 to an offset in the virtual file. The one obvious exception is that a\n 78 position of zero should indicate the beginning of the file.\n 79 \n 80 The /proc/sequence iterator just uses the count of the next number it\n 81 will output as its position.\n 82 \n 83 Four functions must be implemented to make the iterator work. The first,\n 84 called start() takes a position as an argument and returns an iterator\n 85 which will start reading at that position. For our simple sequence example,\n 86 the start() function looks like:\n\n\n\u5b9f\u88c5\u8005\u304c\u3053\u306e\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u300c\u63d0\u4f9b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u6271\u3046\u305f\u3081\u306e\u30a4\u30c6\u30ec\u30fc\u30bfI/F\u300d\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3053\u306eI/F\u306f4\u3064\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\n\nI/F\n\u5f79\u5272\n\n\n\n\nvoid *start(struct seq_file *s, loff_t *pos)\n\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u306b\u5bfe\u5fdc\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\n\n\nvoid *next(struct seq_file *s, void *v, loff_t *pos)\n\u7b2c\u4e09\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u306b\u5bfe\u5fdc\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\u4e00\u822c\u7684\u306b\u306f\u7b2c\u4e09\u5f15\u6570\u306f\u300c\u6b21\u300d\u306e\u4f4d\u7f6e\u3092\u6307\u3057\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u300c\u73fe\u5728\u306e\u300d\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3002\n\n\nvoid stop(struct seq_file *s, void *v)\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u305f\u30c7\u30fc\u30bf\u306e\u6a2a\u65ad\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\u4e00\u822c\u306b\u306f\u5f8c\u59cb\u672b\u51e6\u7406\u3067\u3042\u308a\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u5f8c\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3002\n\n\nint show(struct seq_file *s, void *v)\nseq_file\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u5fdc\u3057\u305f\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u3080\u3002\u300cseq_file\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u300d\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3002\n\n\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u306fvoid *\u3067\u3042\u308a\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u63d0\u4f9b\u5074\u306b\u3068\u3063\u3066\u610f\u5473\u306e\u3042\u308b\u300c\u4f55\u304b\u300d\u3092\u6307\u3057\u793a\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3042\u3063\u3066\u3082\u69cb\u308f\u306a\u3044\u70b9\u306b\u7559\u610f\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u4e0a\u306e\u8868\u306e\u8aac\u660e\u306b\u3042\u308bI/F\u306e\u4ed5\u69d8\u3092\u77e5\u308b\u306b\u306f\u3001Documentation\u3060\u3051\u3067\u306f\u3044\u3055\u3055\u304b\u8aad\u307f\u53d6\u308a\u306b\u304f\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u4e00\u7dd2\u306b\u5b9f\u88c5\u3092\u8aad\u3093\u3067\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n4\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bfI/F\nLinux\u306e\u30bd\u30fc\u30b9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4f7f\u3044\u65b9\u304c\u5b9f\u306b\u308f\u304b\u308a\u3084\u3059\u3044seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u95a2\u6570\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u4e0a\u8a184\u3064\u306eI/F\u306e\u76ee\u7684\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nfs/seq_file.c\nstatic int traverse(struct seq_file *m, loff_t offset)\n{\n    // \u7565\n    index = 0;\n    // \u7565\n    // \u5148\u982d\u306e\u30c7\u30fc\u30bf\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3002void *\u306a\u306e\u3067\u300c\u4f55\u304b\u300d\u3092\u6307\u3057\u3066\u3044\u308b\u306b\u904e\u304e\u306a\u3044\u3002\n    // I/F\u3092\u63d0\u4f9b\u3059\u308b\u5074\u306b\u3068\u3063\u3066\u610f\u5473\u306e\u3042\u308b\u4f55\u304b\u3067\u3042\u308a\u3001\u3053\u306e\u30ec\u30a4\u30e4\u3067\u4e2d\u8eab\u306f\u8a6e\u7d22\u3057\u306a\u3044\u3002\n    p = m->op->start(m, &index);\n    while (p) {\n        // \u7565\n        // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u60c5\u5831\u3092\u8868\u793a\n        error = m->op->show(m, p);\n        // \u7565\u3002index\u306e\u66f4\u65b0\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n        // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u6b21\u306e\u4f4d\u7f6e\u3092\u793a\u3059index\u3092\u6e21\u3057\u3066\u3001\u6b21\u306e\u60c5\u5831\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3002\n        p = m->op->next(m, p, &index);\n    }\n    // \u5168\u3066\u306e\u60c5\u5831\u3092\u8fbf\u3063\u305f\u306e\u3067\u3001\u5f8c\u59cb\u672b\u51e6\u7406\n    m->op->stop(m, p);\n    // \u7565\n}\n\n\n\n\u4f7f\u7528\u4f8b\u304b\u3089\u4f7f\u3044\u65b9\u3092\u628a\u63e1\u3059\u308b\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066/proc/schedstat\u3092\u6319\u3052\u307e\u3059\u3002\u306a\u304a\u3001schedstat\u51fa\u529b\u306b\u3068\u3063\u3066\u91cd\u8981\u306a\u7b87\u6240\u3067\u3042\u3063\u3066\u3082\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u4f7f\u3044\u65b9\u306b\u3068\u3063\u3066\u4e9b\u7d30\u3068\u601d\u308f\u308c\u308b\u7b87\u6240\u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u88c5\u306e\u6982\u8981\u56f3\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u3082\u3068\u306b\u3001\u4ee5\u4e0b\u5f15\u7528\u30bd\u30fc\u30b9\u3092\u8aad\u307e\u308c\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n\nkernel/sched/stats.c\n/*\n * bump this up when changing the output format or the meaning of an existin    g\n * format, so that tools can adapt (or abort)\n */\n#define SCHEDSTAT_VERSION 15\n\nstatic int show_schedstat(struct seq_file *seq, void *v)\n{\n    int cpu;\n    // \u521d\u56de\n    if (v == (void *)1) {\n        seq_printf(seq, \"version %d\\n\", SCHEDSTAT_VERSION);\n        seq_printf(seq, \"timestamp %lu\\n\", jiffies);\n    } else {\n    // \u4e8c\u56de\u76ee\u4ee5\u964d(\u4e00\u90e8\u51e6\u7406\u3092\u7565\n        cpu = (unsigned long)(v - 2);\n        rq = cpu_rq(cpu);\n\n        /* runqueue-specific stats */\n        seq_printf(seq,\n            \"cpu%d %u 0 %u %u %u %u %llu %llu %lu\",\n            cpu, rq->yld_count,\n            rq->sched_count, rq->sched_goidle,\n            rq->ttwu_count, rq->ttwu_local,\n            rq->rq_cpu_time,\n            rq->rq_sched_info.run_delay, rq->rq_sched_info.pcount);\n\n        seq_printf(seq, \"\\n\");\n        // \u7565\n#endif\n    }\n    return 0;\n}\n\n/*\n * This itererator needs some explanation.\n * It returns 1 for the header position.\n * This means 2 is cpu 0.\n * In a hotplugged system some cpus, including cpu 0, may be missing so we have\n * to use cpumask_* to iterate over the cpus.\n */\nstatic void *schedstat_start(struct seq_file *file, loff_t *offset)\n{   \n    unsigned long n = *offset;\n\n    if (n == 0)\n        return (void *) 1;\n\n    // \u6b21\u306e\u30aa\u30d5\u30bb\u30c3\u30c8(n)\u3092\u8a08\u7b97\u3059\u308b\u3002\u8a73\u7d30\u306f\u7565\u3002\n\n    *offset = n + 1;\n\n    if (n < nr_cpu_ids)\n        return (void *)(unsigned long)(n + 2);\n    return NULL;\n}\n\nstatic void *schedstat_next(struct seq_file *file, void *data, loff_t *offset)\n{   \n    (*offset)++;\n    return schedstat_start(file, offset);\n}\n\nstatic void schedstat_stop(struct seq_file *file, void *data)\n{\n}\n\nstatic const struct seq_operations schedstat_sops = {\n    .start = schedstat_start,\n    .next  = schedstat_next,\n    .stop  = schedstat_stop,\n    .show  = show_schedstat,\n};\n\nstatic int schedstat_open(struct inode *inode, struct file *file)\n{\n    return seq_open(file, &schedstat_sops);\n}\n\nstatic const struct file_operations proc_schedstat_operations = {\n    .open    = schedstat_open,\n    .read    = seq_read,\n    .llseek  = seq_lseek,\n    .release = seq_release,\n};\n\nstatic int __init proc_schedstat_init(void)\n{\n    proc_create(\"schedstat\", 0, NULL, &proc_schedstat_operations);\n    return 0;\n}\nsubsys_initcall(proc_schedstat_init);\n\n\n\nseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u5b9f\u88c5\u3092\u5c11\u3057\u8997\u304f\nseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u50cd\u304d\u3092\u3088\u308a\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u3001\u5185\u90e8\u5b9f\u88c5\u3092\u5c11\u3057\u8997\u304d\u307e\u3059\u3002\n\nseq_open()\nseq_file\u69cb\u9020\u4f53\u306e\u5272\u5f53\u3068\u521d\u671f\u5316\u304c\u4e3b\u306a\u51e6\u7406\u3067\u3059\u3002\n\u307e\u305f\u3001\u4e0a\u4f4d\u30ec\u30a4\u30e4\u304b\u3089\u6e21\u3055\u308c\u305ffile\u69cb\u9020\u4f53\u306eprivate_data\u306bseq_file\u69cb\u9020\u4f53\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\nfs/seq_file.c\nint seq_open(struct file *file, const struct seq_operations *op) \n{\n    struct seq_file *p;\n\n    WARN_ON(file->private_data);\n\n    p = kzalloc(sizeof(*p), GFP_KERNEL);\n    if (!p) \n        return -ENOMEM;\n\n    file->private_data = p; \n\n    mutex_init(&p->lock);\n    p->op = op;\n\n    // No refcounting: the lifetime of 'p' is constrained\n    // to the lifetime of the file.\n    p->file = file;\n\n    // \u7565\n\n    return 0;\n}\nEXPORT_SYMBOL(seq_open);\n\n\n\nseq_read()\nseq_read()\u304c\u3084\u3063\u3066\u3044\u308b\u306e\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u3059\u3002\n\n\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u304c\u78ba\u4fdd\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1(m->buf)\u3092\u78ba\u4fdd\u3059\u308b\u3002\n\u78ba\u4fdd\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u3042\u3089\u304b\u3058\u3081\u8caf\u3081\u3053\u307e\u308c\u305f or seq_read()\u5185\u3067\u8caf\u3081\u3053\u3093\u3060\u30c7\u30fc\u30bf\u3092copy_to_user()\u3067\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306b\u6e21\u3059\u3002\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u304b\u3089\u8981\u6c42\u3055\u308c\u308b\u8aad\u307f\u51fa\u3057\u30b5\u30a4\u30ba\u306f\u7b2c\u4e09\u5f15\u6570\u7d4c\u7531\u3067\u6e21\u3055\u308c\u308b\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u306f\u3001\u300cseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3061\u3001\u305d\u3053\u306b\u8caf\u3081\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30e6\u30fc\u30b6\u306b\u6e21\u3059\u300d\u3067\u3059\u3002\n\nfs/seq_file.c\nssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)\n{\n    struct seq_file *m = file->private_data;\n    size_t copied = 0;\n    loff_t pos;\n    size_t n;\n    void *p;\n    int err = 0;\n\n    // \u7565\n\n    // \u30d0\u30c3\u30d5\u30a1\u5272\u5f53\n    /* grab buffer if we didn't have one */\n    if (!m->buf) {\n        m->buf = seq_buf_alloc(m->size = PAGE_SIZE);\n        if (!m->buf)\n            goto Enomem;\n    }\n    // \u30d0\u30c3\u30d5\u30a1\u306e\u4e2d\u306b\u30c7\u30fc\u30bf\u304c\u6b8b\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u30e6\u30fc\u30b6\u306b\u6e21\u3059\n    /* if not empty - flush it first */\n    if (m->count) {\n        n = min(m->count, size);\n        err = copy_to_user(buf, m->buf + m->from, n);\n    // \u7565\n    }\n    // \n    /* we need at least one record in buffer */\n    pos = m->index;\n    p = m->op->start(m, &pos);\n    while (1) {\n    // \u5148\u306b\u7d39\u4ecb\u3057\u305ftraverse\u985e\u4f3c\u306e\u51e6\u7406\u3002start(), next(), show(), stop()\u3092\u4f7f\u3044\u3001\n    // \u60c5\u5831\u3092\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\u7d30\u304b\u306a\u51e6\u7406\u306f\u7565\u3002\n    }\n    m->op->stop(m, p);\n    m->count = 0;\n    goto Done;\nFill:\n    // \u7565\n}\nEXPORT_SYMBOL(seq_read);\n\n\n\n\u30c7\u30fc\u30bf\u306e\u51fa\u529b\n\u3053\u3053\u3067\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3082\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3002\u3057\u305f\u304c\u3063\u3066seq_read()\u306f\u3001\u300c\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u6e21\u3055\u308c\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3093\u3067\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306b\u6e21\u3059\u300d\u3068\u3044\u3046\u672c\u6765\u306eread()\u306e\u7d04\u675f\u4e8b\u3092\u8e0f\u8972\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u306f\u3001\u5148\u306b\u7d39\u4ecb\u3057\u305fshow() I/F\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u540d\u524d\u304b\u3089\u3001printk()\u306a\u3069\u3067\u30c7\u30fc\u30bf\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\u3059\u308b\u3068\u52d8\u9055\u3044\u3057\u304c\u3061\u3067\u3059\u304c\u3001show()\u306b\u671f\u5f85\u3055\u308c\u308b\u306e\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u7528\u610f\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3067\u3059\u3002\n\u3067\u306f\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u304c\u4f55\u3067\u3001\u305d\u306e\u3069\u3053\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306e\u304b\u30fb\u30fb\u30fb\u3068\u884c\u3063\u305f\u7d30\u304b\u306a\u3053\u3068\u3092\u3044\u3061\u3044\u3061\u610f\u8b58\u3057\u3001\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u3092\u81ea\u524d\u3067\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u7279\u5225\u306a\u3053\u3068\u304c\u306a\u3044\u9650\u308a\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3067\u5b9f\u65bd\u3057\u307e\u3059\u3002\n(\u203b\u3082\u3057\u304f\u306fseq_read()\u304c\u5b9f\u65bd\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u3053\u308c\u306f\u610f\u8b58\u3057\u306a\u304f\u3066\u3082\u826f\u3044)\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u306e\u4ee3\u8868\u4f8b\u306f\u3001seq_printf()\u3067\u3059\u3002\u3057\u304b\u3057\u3001seq_printf()\u81ea\u4f53\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\nseq_printf()\u306f\u5185\u90e8\u3067vsnprintf()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\nfs/seq_file.c\nvoid seq_vprintf(struct seq_file *m, const char *f, va_list args)\n{\n    int len;\n\n    if (m->count < m->size) {\n        len = vsnprintf(m->buf + m->count, m->size - m->count, f, args);\n        if (m->count + len < m->size) {\n            m->count += len;\n            return;\n        }\n    }\n    seq_set_overflow(m);\n}\nEXPORT_SYMBOL(seq_vprintf);\n\n\nvsnprintf()\u306f\u4ee5\u4e0b\u30b3\u30e1\u30f3\u30c8\u306e\u901a\u308a\u3001\u30e1\u30e2\u30ea\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u3059\u3002\u30b3\u30f3\u30bd\u30fc\u30eb\u3078\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\nlib/vsprintf.c\n * vsnprintf - Format a string and place it in a buffer\n\n\n\u4eca\u56de\u306e\u5834\u5408\u3001vsnprintf()\u306e\u66f8\u304d\u8fbc\u307f\u5148\u3068\u306a\u308b\u30d0\u30c3\u30d5\u30a1\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304c\u7528\u610f\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u306a\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u4e3b\u306bshow() -- seq_printf()\u306a\u3069 --> \u5185\u90e8\u30d0\u30c3\u30d5\u30a1 --- seq_read() ---> \u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u6e21\u3057\u3066\u304d\u305f\u30d0\u30c3\u30d5\u30a1\n\n\u3088\u3063\u3066\u3001show()\u3067\u306f\u3001printk()\u3092\u4f7f\u3063\u305f\u51fa\u529b\u3092\u3059\u308b\u306e\u3067\u306a\u304f\u3001seq_printf()\u306a\u3069\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u3001\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001Documentation/filesystems/seq_file.txt \u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nsimple\u7cfb\u306eI/F\u306b\u3064\u3044\u3066\nseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3063\u305f\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u306e\u6a5f\u80fd\u3067\u3042\u308a\u304c\u3061\u306a\u306e\u306f\u3001\u4ee5\u4e0b\u306b\u66f8\u3044\u305f\u3088\u3046\u306a\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u3088\u3046\u306a\u7279\u5225\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u3002\u4f4d\u7f6e\u60c5\u5831\u3060\u3051\u53d7\u3051\u53d6\u308c\u3070\u305d\u308c\u3067\u8db3\u308a\u308b\n\u4f4d\u7f6e\u60c5\u5831\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7684\u306a\u4f7f\u3044\u65b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3002\nnext()\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u201d\u6b21\u306b\u79fb\u308b\"\u3060\u3051\u3067\u5341\u5206\nshow()\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u3060\u3051\u8cb0\u3048\u308c\u3070\u8868\u793a\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u304c\u4f55\u3067\u3001\u305d\u308c\u3092\u3069\u3046\u8868\u793a\u3059\u308c\u3070\u3088\u3044\u306e\u304b\u308f\u304b\u308b\nstop()\u3067\u3001\u7279\u306b\u3084\u308b\u3079\u304d\u5f8c\u59cb\u672b\u51e6\u7406\u306f\u306a\u3044\n\n\u305d\u3046\u3044\u3046\u5834\u5408\u3001\u3044\u3061\u3044\u3061start(), next(), stop()\u3092\u66f8\u304f\u306e\u306f\u7c21\u5358\u3067\u3059\u304c\u9762\u5012\u3067\u3059\u306d\u3002\n\u305d\u3093\u306a\u4eba\u306e\u305f\u3081\u306b\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u306fsingle_open(), single_release()\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5185\u90e8\u5b9f\u88c5\u3092\u76f4\u63a5\u898b\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u5b9f\u88c5\u3092\u4ee5\u4e0b\u306b\u5f15\u7528\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nstart(), next(), stop()\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3055\u308c\u305f\u51e6\u7406\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002\nsingle_open()\u3092\u4f7f\u3046\u5b9f\u88c5\u8005\u306f\u3001show()\u3092\u6e21\u3059\u3002\n\n\nfs/seq_file.c\nint single_open(struct file *file, int (*show)(struct seq_file *, void *),\n        void *data)\n{\n    struct seq_operations *op = kmalloc(sizeof(*op), GFP_KERNEL);\n    int res = -ENOMEM;\n\n    if (op) {\n    // start(), next(), stop()\u306f\u7528\u610f\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u3061\u3089\u3067\u7528\u610f\u3059\u308b\u306e\u306fshow()\u306e\u307f\n        op->start = single_start;\n        op->next = single_next;\n        op->stop = single_stop;\n        op->show = show;\n        res = seq_open(file, op);\n        if (!res)\n            ((struct seq_file *)file->private_data)->private = data;\n        else\n            kfree(op);\n    }\n    return res;\n}\nEXPORT_SYMBOL(single_open);\n\n\n\u307e\u305f\u3001start(), next(), stop()\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u95a2\u6570\u7fa4\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u5b9f\u306b\u7c21\u6f54\u306a\u51e6\u7406\u3067\u3059\u3002\n\nfs/seq_file.c\nstatic void *single_start(struct seq_file *p, loff_t *pos)\n{\n    return NULL + (*pos == 0);\n}\n\nstatic void *single_next(struct seq_file *p, void *v, loff_t *pos)\n{\n    ++*pos;\n    return NULL;\n}\n\nstatic void single_stop(struct seq_file *p, void *v)\n{\n}\n\n\nsingle_open()\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u4e0a\u4f4d\u30ec\u30a4\u30e4\u304copen()\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30b3\u30fc\u30c9\u3067single_open()\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001proc\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5834\u5408\u3001proc_create()\u306b\u6e21\u3059file_operations\u69cb\u9020\u4f53\u306eopen\u30e1\u30f3\u30d0\u3067\u6e21\u3057\u305f\u95a2\u6570\u3067\u3001single_open()\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nsingle_open()\u547c\u3073\u51fa\u3057\u6642\u3001\u5b9f\u88c5\u8005\u304c\u5b9a\u7fa9\u3057\u305fshow()\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3059\u3002\u3055\u3059\u304c\u306b\u300c\u306a\u3093\u306e\u60c5\u5831\u3092\u3069\u306e\u3088\u3046\u306b\u6271\u3046\u304b\u300d\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30ec\u30d9\u30eb\u3067\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u306e\u3067\u3001show()\u306f\u81ea\u524d\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u898b\u308b\u3068\u4f7f\u3044\u65b9\u304c\u3064\u304b\u3081\u308b\u304b\u306a\u3001\u3068\u601d\u3044\u307e\u3059\u3002\n\nkernel/irq/irqdomain.c\nstatic int virq_debug_open(struct inode *inode, struct file *file)\n{   \n    return single_open(file, virq_debug_show, inode->i_private);\n}\n\nstatic const struct file_operations virq_debug_fops = {\n    // procfs(/proc/irq_domain_mapping)\u3092open()\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\n    .open = virq_debug_open,\n    // single_open()\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001seq_read, seq_lseek\u3092\u4f7f\u3046\u306e\u304c\u7121\u96e3\u3001\u3068\u3044\u3046\u304b\u666e\u901a\u3002\n    .read = seq_read,\n    .llseek = seq_lseek,\n    // release\u306fsingle_release()\u3067\u3002\n    .release = single_release,\n};\n\nstatic int __init irq_debugfs_init(void)\n{\n    // proc\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u30a8\u30f3\u30c8\u30ea\u3092\u767b\u9332\u3059\u308b\u969b\u3001file_operation\u3092\u6e21\u3057\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306eI/F\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n    if (debugfs_create_file(\"irq_domain_mapping\", S_IRUGO, NULL,\n                 NULL, &virq_debug_fops) == NULL)\n        return -ENOMEM;\n\n    return 0;\n}\n\n\n## \u306f\u3058\u3081\u306b\n\nprocfs\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u306f\u30ab\u30fc\u30cd\u30eb\u3084\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u306e\u30b3\u30fc\u30c9\u306b\u3088\u304f\u73fe\u308c\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u3088\u304f\u898b\u304b\u3051\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u300cseq_\u300d\u3068\u306a\u3063\u3066\u3044\u308b\u95a2\u6570\u540d\u3067\u3059\u3002\n\n```c\nstatic const struct file_operations proc_schedstat_operations = {\n    .open    = schedstat_open,\n    .read    = seq_read,\n    .llseek  = seq_lseek,\n    .release = seq_release,\n};\n```\n\n\u3053\u308c\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u547c\u3070\u308c\u308b\u4ed5\u7d44\u307f\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308bI/F\u306b\u306a\u308a\u307e\u3059\u3002seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3068\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u3044\u308d\u3044\u308d\u306a\u76ee\u7684\u304c\u3042\u308a\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u3064\u3044\u3066\u306e\u6587\u66f8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u4eca\u56de\u8aad\u3093\u3060Linux\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f4.9\u306b\u306a\u308a\u307e\u3059\u3002\n\n### \u307e\u305aDocument\u3092\u8aad\u3080\n\n```text:Documentation/filesystems/seq_file.txt\n  8 There are numerous ways for a device driver (or other kernel component) to\n  9 provide information to the user or system administrator.  One useful\n 10 technique is the creation of virtual files, in debugfs, /proc or elsewhere.\n 11 Virtual files can provide human-readable output that is easy to get at\n 12 without any special utility programs; they can also make life easier for\n 13 script writers. It is not surprising that the use of virtual files has\n 14 grown over the years.\n```\n\n\u8981\u7d04\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b6\u3084\u30b7\u30b9\u30c6\u30e0\u7ba1\u7406\u8005\u306b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u4fdd\u6709\u3059\u308b\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u624b\u6bb5\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4e2d\u3067\u3082\u6709\u7528\u306a\u624b\u6bb5\u306e\u3072\u3068\u3064\u304c/proc\u306a\u3069\u306b\u4ee3\u8868\u3055\u308c\u308b\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u3092\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u90fd\u5ea6\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3042\u308a\u3001\u304b\u3064\u540c\u3058\u3088\u3046\u306a\u5b9f\u88c5\u304c\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u826f\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3088\u3063\u3066\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7684\u306a\u3082\u306e\u3092\u63d0\u4f9b\u3057\u305f\u30fb\u30fb\u30fb\u3068\u3044\u3046\u306e\u304cseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304c\u751f\u307e\u308c\u305f\u52d5\u6a5f\u3067\u3059\u3002\n\n```text:Documentation/filesystems/seq_file.txt\n 67 The iterator interface\n 68 \n 69 Modules implementing a virtual file with seq_file must implement a simple\n 70 iterator object that allows stepping through the data of interest.\n 71 Iterators must be able to move to a specific position - like the file they\n 72 implement - but the interpretation of that position is up to the iterator\n 73 itself. A seq_file implementation that is formatting firewall rules, for\n 74 example, could interpret position N as the Nth rule in the chain.\n 75 Positioning can thus be done in whatever way makes the most sense for the\n 76 generator of the data, which need not be aware of how a position translates\n 77 to an offset in the virtual file. The one obvious exception is that a\n 78 position of zero should indicate the beginning of the file.\n 79 \n 80 The /proc/sequence iterator just uses the count of the next number it\n 81 will output as its position.\n 82 \n 83 Four functions must be implemented to make the iterator work. The first,\n 84 called start() takes a position as an argument and returns an iterator\n 85 which will start reading at that position. For our simple sequence example,\n 86 the start() function looks like:\n```\n\n\u5b9f\u88c5\u8005\u304c\u3053\u306e\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u300c\u63d0\u4f9b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u6271\u3046\u305f\u3081\u306e\u30a4\u30c6\u30ec\u30fc\u30bfI/F\u300d\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u3053\u306eI/F\u306f4\u3064\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n| I/F | \u5f79\u5272 |\n|:---|:---|\n| void *start(struct seq_file *s, loff_t *pos) | \u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u306b\u5bfe\u5fdc\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059|\n| void *next(struct seq_file *s, void *v, loff_t *pos) | \u7b2c\u4e09\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u4f4d\u7f6e\u60c5\u5831\u306b\u5bfe\u5fdc\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\u4e00\u822c\u7684\u306b\u306f\u7b2c\u4e09\u5f15\u6570\u306f\u300c\u6b21\u300d\u306e\u4f4d\u7f6e\u3092\u6307\u3057\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u300c\u73fe\u5728\u306e\u300d\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3002|\n| void stop(struct seq_file *s, void *v) | \u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u305f\u30c7\u30fc\u30bf\u306e\u6a2a\u65ad\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\u4e00\u822c\u306b\u306f\u5f8c\u59cb\u672b\u51e6\u7406\u3067\u3042\u308a\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u5f8c\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308b\u3002|\n| int show(struct seq_file *s, void *v) | seq_file\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u3067\u6e21\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u5fdc\u3057\u305f\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u3080\u3002\u300cseq_file\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u300d\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3002 |\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u306fvoid *\u3067\u3042\u308a\u3001\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u63d0\u4f9b\u5074\u306b\u3068\u3063\u3066\u610f\u5473\u306e\u3042\u308b\u300c\u4f55\u304b\u300d\u3092\u6307\u3057\u793a\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3042\u3063\u3066\u3082\u69cb\u308f\u306a\u3044\u70b9\u306b\u7559\u610f\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u4e0a\u306e\u8868\u306e\u8aac\u660e\u306b\u3042\u308bI/F\u306e\u4ed5\u69d8\u3092\u77e5\u308b\u306b\u306f\u3001Documentation\u3060\u3051\u3067\u306f\u3044\u3055\u3055\u304b\u8aad\u307f\u53d6\u308a\u306b\u304f\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u4e00\u7dd2\u306b\u5b9f\u88c5\u3092\u8aad\u3093\u3067\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n### 4\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bfI/F\n\nLinux\u306e\u30bd\u30fc\u30b9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u3001\u4f7f\u3044\u65b9\u304c\u5b9f\u306b\u308f\u304b\u308a\u3084\u3059\u3044seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u95a2\u6570\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u4e0a\u8a184\u3064\u306eI/F\u306e\u76ee\u7684\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```c:fs/seq_file.c\nstatic int traverse(struct seq_file *m, loff_t offset)\n{\n    // \u7565\n    index = 0;\n    // \u7565\n    // \u5148\u982d\u306e\u30c7\u30fc\u30bf\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3002void *\u306a\u306e\u3067\u300c\u4f55\u304b\u300d\u3092\u6307\u3057\u3066\u3044\u308b\u306b\u904e\u304e\u306a\u3044\u3002\n    // I/F\u3092\u63d0\u4f9b\u3059\u308b\u5074\u306b\u3068\u3063\u3066\u610f\u5473\u306e\u3042\u308b\u4f55\u304b\u3067\u3042\u308a\u3001\u3053\u306e\u30ec\u30a4\u30e4\u3067\u4e2d\u8eab\u306f\u8a6e\u7d22\u3057\u306a\u3044\u3002\n    p = m->op->start(m, &index);\n    while (p) {\n        // \u7565\n        // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3057\u3066\u3044\u308b\u60c5\u5831\u3092\u8868\u793a\n        error = m->op->show(m, p);\n        // \u7565\u3002index\u306e\u66f4\u65b0\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n        // \u73fe\u5728\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u6b21\u306e\u4f4d\u7f6e\u3092\u793a\u3059index\u3092\u6e21\u3057\u3066\u3001\u6b21\u306e\u60c5\u5831\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\u3002\n        p = m->op->next(m, p, &index);\n    }\n    // \u5168\u3066\u306e\u60c5\u5831\u3092\u8fbf\u3063\u305f\u306e\u3067\u3001\u5f8c\u59cb\u672b\u51e6\u7406\n    m->op->stop(m, p);\n    // \u7565\n}\n```\n\n### \u4f7f\u7528\u4f8b\u304b\u3089\u4f7f\u3044\u65b9\u3092\u628a\u63e1\u3059\u308b\n\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066/proc/schedstat\u3092\u6319\u3052\u307e\u3059\u3002\u306a\u304a\u3001schedstat\u51fa\u529b\u306b\u3068\u3063\u3066\u91cd\u8981\u306a\u7b87\u6240\u3067\u3042\u3063\u3066\u3082\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u4f7f\u3044\u65b9\u306b\u3068\u3063\u3066\u4e9b\u7d30\u3068\u601d\u308f\u308c\u308b\u7b87\u6240\u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\u306e\u6982\u8981\u56f3\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u3082\u3068\u306b\u3001\u4ee5\u4e0b\u5f15\u7528\u30bd\u30fc\u30b9\u3092\u8aad\u307e\u308c\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n![seqfs.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/b3899041-0e7e-930a-61ae-1b490f85a841.jpeg)\n\n\n```c:kernel/sched/stats.c\n/*\n * bump this up when changing the output format or the meaning of an existin    g\n * format, so that tools can adapt (or abort)\n */\n#define SCHEDSTAT_VERSION 15\n\nstatic int show_schedstat(struct seq_file *seq, void *v)\n{\n    int cpu;\n    // \u521d\u56de\n    if (v == (void *)1) {\n        seq_printf(seq, \"version %d\\n\", SCHEDSTAT_VERSION);\n        seq_printf(seq, \"timestamp %lu\\n\", jiffies);\n    } else {\n    // \u4e8c\u56de\u76ee\u4ee5\u964d(\u4e00\u90e8\u51e6\u7406\u3092\u7565\n        cpu = (unsigned long)(v - 2);\n        rq = cpu_rq(cpu);\n\n        /* runqueue-specific stats */\n        seq_printf(seq,\n            \"cpu%d %u 0 %u %u %u %u %llu %llu %lu\",\n            cpu, rq->yld_count,\n            rq->sched_count, rq->sched_goidle,\n            rq->ttwu_count, rq->ttwu_local,\n            rq->rq_cpu_time,\n            rq->rq_sched_info.run_delay, rq->rq_sched_info.pcount);\n \n        seq_printf(seq, \"\\n\");\n        // \u7565\n#endif\n    }\n    return 0;\n}\n \n/*\n * This itererator needs some explanation.\n * It returns 1 for the header position.\n * This means 2 is cpu 0.\n * In a hotplugged system some cpus, including cpu 0, may be missing so we have\n * to use cpumask_* to iterate over the cpus.\n */\nstatic void *schedstat_start(struct seq_file *file, loff_t *offset)\n{   \n    unsigned long n = *offset;\n     \n    if (n == 0)\n        return (void *) 1;\n     \n    // \u6b21\u306e\u30aa\u30d5\u30bb\u30c3\u30c8(n)\u3092\u8a08\u7b97\u3059\u308b\u3002\u8a73\u7d30\u306f\u7565\u3002\n     \n    *offset = n + 1;\n     \n    if (n < nr_cpu_ids)\n        return (void *)(unsigned long)(n + 2);\n    return NULL;\n}\n \nstatic void *schedstat_next(struct seq_file *file, void *data, loff_t *offset)\n{   \n    (*offset)++;\n    return schedstat_start(file, offset);\n}\n \nstatic void schedstat_stop(struct seq_file *file, void *data)\n{\n}\n \nstatic const struct seq_operations schedstat_sops = {\n    .start = schedstat_start,\n    .next  = schedstat_next,\n    .stop  = schedstat_stop,\n    .show  = show_schedstat,\n};\n \nstatic int schedstat_open(struct inode *inode, struct file *file)\n{\n    return seq_open(file, &schedstat_sops);\n}\n \nstatic const struct file_operations proc_schedstat_operations = {\n    .open    = schedstat_open,\n    .read    = seq_read,\n    .llseek  = seq_lseek,\n    .release = seq_release,\n};\n \nstatic int __init proc_schedstat_init(void)\n{\n    proc_create(\"schedstat\", 0, NULL, &proc_schedstat_operations);\n    return 0;\n}\nsubsys_initcall(proc_schedstat_init);\n```\n\n## seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5185\u90e8\u5b9f\u88c5\u3092\u5c11\u3057\u8997\u304f\n\nseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u50cd\u304d\u3092\u3088\u308a\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u3001\u5185\u90e8\u5b9f\u88c5\u3092\u5c11\u3057\u8997\u304d\u307e\u3059\u3002\n\n### seq_open()\n\nseq_file\u69cb\u9020\u4f53\u306e\u5272\u5f53\u3068\u521d\u671f\u5316\u304c\u4e3b\u306a\u51e6\u7406\u3067\u3059\u3002\n\u307e\u305f\u3001\u4e0a\u4f4d\u30ec\u30a4\u30e4\u304b\u3089\u6e21\u3055\u308c\u305ffile\u69cb\u9020\u4f53\u306eprivate_data\u306bseq_file\u69cb\u9020\u4f53\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n```c:fs/seq_file.c\nint seq_open(struct file *file, const struct seq_operations *op) \n{\n    struct seq_file *p;\n\n    WARN_ON(file->private_data);\n\n    p = kzalloc(sizeof(*p), GFP_KERNEL);\n    if (!p) \n        return -ENOMEM;\n\n    file->private_data = p; \n\n    mutex_init(&p->lock);\n    p->op = op;\n\n    // No refcounting: the lifetime of 'p' is constrained\n    // to the lifetime of the file.\n    p->file = file;\n\n    // \u7565\n\n    return 0;\n}\nEXPORT_SYMBOL(seq_open);\n```\n\n### seq_read()\n\nseq_read()\u304c\u3084\u3063\u3066\u3044\u308b\u306e\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u3059\u3002\n\n - \u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u304c\u78ba\u4fdd\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1(m->buf)\u3092\u78ba\u4fdd\u3059\u308b\u3002\n - \u78ba\u4fdd\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u3042\u3089\u304b\u3058\u3081\u8caf\u3081\u3053\u307e\u308c\u305f or seq_read()\u5185\u3067\u8caf\u3081\u3053\u3093\u3060\u30c7\u30fc\u30bf\u3092copy_to_user()\u3067\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306b\u6e21\u3059\u3002\u30e6\u30fc\u30b6\u30e9\u30f3\u30c9\u304b\u3089\u8981\u6c42\u3055\u308c\u308b\u8aad\u307f\u51fa\u3057\u30b5\u30a4\u30ba\u306f\u7b2c\u4e09\u5f15\u6570\u7d4c\u7531\u3067\u6e21\u3055\u308c\u308b\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u306f\u3001\u300c**seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3061\u3001\u305d\u3053\u306b\u8caf\u3081\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30e6\u30fc\u30b6\u306b\u6e21\u3059**\u300d\u3067\u3059\u3002\n\n```c:fs/seq_file.c\nssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)\n{\n    struct seq_file *m = file->private_data;\n    size_t copied = 0;\n    loff_t pos;\n    size_t n;\n    void *p;\n    int err = 0;\n\n    // \u7565\n\n    // \u30d0\u30c3\u30d5\u30a1\u5272\u5f53\n    /* grab buffer if we didn't have one */\n    if (!m->buf) {\n        m->buf = seq_buf_alloc(m->size = PAGE_SIZE);\n        if (!m->buf)\n            goto Enomem;\n    }\n    // \u30d0\u30c3\u30d5\u30a1\u306e\u4e2d\u306b\u30c7\u30fc\u30bf\u304c\u6b8b\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u30e6\u30fc\u30b6\u306b\u6e21\u3059\n    /* if not empty - flush it first */\n    if (m->count) {\n        n = min(m->count, size);\n        err = copy_to_user(buf, m->buf + m->from, n);\n    // \u7565\n    }\n    // \n    /* we need at least one record in buffer */\n    pos = m->index;\n    p = m->op->start(m, &pos);\n    while (1) {\n    // \u5148\u306b\u7d39\u4ecb\u3057\u305ftraverse\u985e\u4f3c\u306e\u51e6\u7406\u3002start(), next(), show(), stop()\u3092\u4f7f\u3044\u3001\n    // \u60c5\u5831\u3092\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3002\u7d30\u304b\u306a\u51e6\u7406\u306f\u7565\u3002\n    }\n    m->op->stop(m, p);\n    m->count = 0;\n    goto Done;\nFill:\n    // \u7565\n}\nEXPORT_SYMBOL(seq_read);\n```\n\n### \u30c7\u30fc\u30bf\u306e\u51fa\u529b\n\n\u3053\u3053\u3067\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3082\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3002\u3057\u305f\u304c\u3063\u3066seq_read()\u306f\u3001\u300c\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u6e21\u3055\u308c\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3093\u3067\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u306b\u6e21\u3059\u300d\u3068\u3044\u3046\u672c\u6765\u306eread()\u306e\u7d04\u675f\u4e8b\u3092\u8e0f\u8972\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u306f\u3001\u5148\u306b\u7d39\u4ecb\u3057\u305fshow() I/F\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u540d\u524d\u304b\u3089\u3001printk()\u306a\u3069\u3067\u30c7\u30fc\u30bf\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\u3059\u308b\u3068\u52d8\u9055\u3044\u3057\u304c\u3061\u3067\u3059\u304c\u3001**show()\u306b\u671f\u5f85\u3055\u308c\u308b\u306e\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u3067\u7528\u610f\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3067\u3059**\u3002\n\n\u3067\u306f\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u304c\u4f55\u3067\u3001\u305d\u306e\u3069\u3053\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u306e\u304b\u30fb\u30fb\u30fb\u3068\u884c\u3063\u305f\u7d30\u304b\u306a\u3053\u3068\u3092\u3044\u3061\u3044\u3061\u610f\u8b58\u3057\u3001\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u3092\u81ea\u524d\u3067\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u7279\u5225\u306a\u3053\u3068\u304c\u306a\u3044\u9650\u308a\u3001\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306f\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u90e8\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3067\u5b9f\u65bd\u3057\u307e\u3059\u3002\n(\u203b\u3082\u3057\u304f\u306fseq_read()\u304c\u5b9f\u65bd\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u3053\u308c\u306f\u610f\u8b58\u3057\u306a\u304f\u3066\u3082\u826f\u3044)\n\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u306e\u4ee3\u8868\u4f8b\u306f\u3001seq_printf()\u3067\u3059\u3002\u3057\u304b\u3057\u3001**seq_printf()\u81ea\u4f53\u306f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u305b\u3093**\u3002\nseq_printf()\u306f\u5185\u90e8\u3067vsnprintf()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```c:fs/seq_file.c\nvoid seq_vprintf(struct seq_file *m, const char *f, va_list args)\n{\n    int len;\n\n    if (m->count < m->size) {\n        len = vsnprintf(m->buf + m->count, m->size - m->count, f, args);\n        if (m->count + len < m->size) {\n            m->count += len;\n            return;\n        }\n    }\n    seq_set_overflow(m);\n}\nEXPORT_SYMBOL(seq_vprintf);\n```\n\nvsnprintf()\u306f\u4ee5\u4e0b\u30b3\u30e1\u30f3\u30c8\u306e\u901a\u308a\u3001\u30e1\u30e2\u30ea\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u3059\u3002\u30b3\u30f3\u30bd\u30fc\u30eb\u3078\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\n```c:lib/vsprintf.c\n * vsnprintf - Format a string and place it in a buffer\n```\n\n\u4eca\u56de\u306e\u5834\u5408\u3001vsnprintf()\u306e\u66f8\u304d\u8fbc\u307f\u5148\u3068\u306a\u308b\u30d0\u30c3\u30d5\u30a1\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304c\u7528\u610f\u3057\u305f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u306a\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```\n\u4e3b\u306bshow() -- seq_printf()\u306a\u3069 --> \u5185\u90e8\u30d0\u30c3\u30d5\u30a1 --- seq_read() ---> \u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u6e21\u3057\u3066\u304d\u305f\u30d0\u30c3\u30d5\u30a1\n```\n\n\n\u3088\u3063\u3066\u3001**show()\u3067\u306f\u3001printk()\u3092\u4f7f\u3063\u305f\u51fa\u529b\u3092\u3059\u308b\u306e\u3067\u306a\u304f\u3001seq_printf()\u306a\u3069\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002**\n\u306a\u304a\u3001\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001Documentation/filesystems/seq_file.txt \u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## simple\u7cfb\u306eI/F\u306b\u3064\u3044\u3066\n\nseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3063\u305f\u4eee\u60f3\u30d5\u30a1\u30a4\u30eb\u306e\u6a5f\u80fd\u3067\u3042\u308a\u304c\u3061\u306a\u306e\u306f\u3001\u4ee5\u4e0b\u306b\u66f8\u3044\u305f\u3088\u3046\u306a\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n - \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u3088\u3046\u306a\u7279\u5225\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u3002\u4f4d\u7f6e\u60c5\u5831\u3060\u3051\u53d7\u3051\u53d6\u308c\u3070\u305d\u308c\u3067\u8db3\u308a\u308b\n - \u4f4d\u7f6e\u60c5\u5831\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7684\u306a\u4f7f\u3044\u65b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3002\n - next()\u3067\u4f4d\u7f6e\u60c5\u5831\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u201d\u6b21\u306b\u79fb\u308b\"\u3060\u3051\u3067\u5341\u5206\n - show()\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u3060\u3051\u8cb0\u3048\u308c\u3070\u8868\u793a\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u304c\u4f55\u3067\u3001\u305d\u308c\u3092\u3069\u3046\u8868\u793a\u3059\u308c\u3070\u3088\u3044\u306e\u304b\u308f\u304b\u308b\n - stop()\u3067\u3001\u7279\u306b\u3084\u308b\u3079\u304d\u5f8c\u59cb\u672b\u51e6\u7406\u306f\u306a\u3044\n\n\u305d\u3046\u3044\u3046\u5834\u5408\u3001\u3044\u3061\u3044\u3061start(), next(), stop()\u3092\u66f8\u304f\u306e\u306f\u7c21\u5358\u3067\u3059\u304c\u9762\u5012\u3067\u3059\u306d\u3002\n\u305d\u3093\u306a\u4eba\u306e\u305f\u3081\u306b\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u306fsingle_open(), single_release()\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u5185\u90e8\u5b9f\u88c5\u3092\u76f4\u63a5\u898b\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u5b9f\u88c5\u3092\u4ee5\u4e0b\u306b\u5f15\u7528\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n - start(), next(), stop()\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3055\u308c\u305f\u51e6\u7406\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u3002\n - single_open()\u3092\u4f7f\u3046\u5b9f\u88c5\u8005\u306f\u3001show()\u3092\u6e21\u3059\u3002\n\n```c:fs/seq_file.c\nint single_open(struct file *file, int (*show)(struct seq_file *, void *),\n        void *data)\n{\n    struct seq_operations *op = kmalloc(sizeof(*op), GFP_KERNEL);\n    int res = -ENOMEM;\n\n    if (op) {\n    // start(), next(), stop()\u306f\u7528\u610f\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u3061\u3089\u3067\u7528\u610f\u3059\u308b\u306e\u306fshow()\u306e\u307f\n        op->start = single_start;\n        op->next = single_next;\n        op->stop = single_stop;\n        op->show = show;\n        res = seq_open(file, op);\n        if (!res)\n            ((struct seq_file *)file->private_data)->private = data;\n        else\n            kfree(op);\n    }\n    return res;\n}\nEXPORT_SYMBOL(single_open);\n```\n\n\u307e\u305f\u3001start(), next(), stop()\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u95a2\u6570\u7fa4\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u5b9f\u306b\u7c21\u6f54\u306a\u51e6\u7406\u3067\u3059\u3002\n\n```c:fs/seq_file.c\nstatic void *single_start(struct seq_file *p, loff_t *pos)\n{\n    return NULL + (*pos == 0);\n}\n\nstatic void *single_next(struct seq_file *p, void *v, loff_t *pos)\n{\n    ++*pos;\n    return NULL;\n}\n\nstatic void single_stop(struct seq_file *p, void *v)\n{\n}\n```\n\nsingle_open()\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001\u4e0a\u4f4d\u30ec\u30a4\u30e4\u304copen()\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u30b3\u30fc\u30c9\u3067single_open()\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001proc\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u5834\u5408\u3001proc_create()\u306b\u6e21\u3059file_operations\u69cb\u9020\u4f53\u306eopen\u30e1\u30f3\u30d0\u3067\u6e21\u3057\u305f\u95a2\u6570\u3067\u3001single_open()\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nsingle_open()\u547c\u3073\u51fa\u3057\u6642\u3001\u5b9f\u88c5\u8005\u304c\u5b9a\u7fa9\u3057\u305fshow()\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3059\u3002\u3055\u3059\u304c\u306b\u300c\u306a\u3093\u306e\u60c5\u5831\u3092\u3069\u306e\u3088\u3046\u306b\u6271\u3046\u304b\u300d\u306fseq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30ec\u30d9\u30eb\u3067\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u306e\u3067\u3001show()\u306f\u81ea\u524d\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u3053\u308c\u3092\u898b\u308b\u3068\u4f7f\u3044\u65b9\u304c\u3064\u304b\u3081\u308b\u304b\u306a\u3001\u3068\u601d\u3044\u307e\u3059\u3002\n\n```c:kernel/irq/irqdomain.c\nstatic int virq_debug_open(struct inode *inode, struct file *file)\n{   \n    return single_open(file, virq_debug_show, inode->i_private);\n}\n\nstatic const struct file_operations virq_debug_fops = {\n    // procfs(/proc/irq_domain_mapping)\u3092open()\u3057\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\u3002\n    .open = virq_debug_open,\n    // single_open()\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001seq_read, seq_lseek\u3092\u4f7f\u3046\u306e\u304c\u7121\u96e3\u3001\u3068\u3044\u3046\u304b\u666e\u901a\u3002\n    .read = seq_read,\n    .llseek = seq_lseek,\n    // release\u306fsingle_release()\u3067\u3002\n    .release = single_release,\n};\n\nstatic int __init irq_debugfs_init(void)\n{\n    // proc\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u30a8\u30f3\u30c8\u30ea\u3092\u767b\u9332\u3059\u308b\u969b\u3001file_operation\u3092\u6e21\u3057\u3001seq\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306eI/F\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3059\u308b\n    if (debugfs_create_file(\"irq_domain_mapping\", S_IRUGO, NULL,\n                 NULL, &virq_debug_fops) == NULL)\n        return -ENOMEM;\n\n    return 0;\n}\n```\n\n\n", "tags": ["Linux", "filesystem", "\u30c7\u30d0\u30c3\u30b0", "kernel"]}