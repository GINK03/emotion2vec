{"context": " More than 1 year has passed since last update.\u300c\u4e00\u6642\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u300d\u3068\u306f:\n\nhttp://aws.amazon.com/jp/iam/faqs/#How_can_temporary_security_credentials_be_used_to_call_AWS_service_APIs\nQ: \u4e00\u6642\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u3068\u306f\u4f55\u3067\u3059\u304b?\n\u4e00\u6642\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u306f\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fc ID\u3001\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3001\u304a\u3088\u3073\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c8\u30fc\u30af\u30f3\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u6307\u5b9a\u3055\u308c\u305f\u671f\u9593\u3068\u7279\u5b9a\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u4e00\u5f0f\u306b\u6709\u52b9\u3067\u3059\u3002\u4e00\u6642\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a3c\u660e\u66f8\u306f\u3001\u5358\u306b\u300c\u30c8\u30fc\u30af\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u306f\u3001IAM \u30e6\u30fc\u30b6\u30fc\u7528\u306b\u3001\u307e\u305f\u306f\u81ea\u8eab\u306e\u793e\u5185\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u7ba1\u7406\u3059\u308b\u30d5\u30a7\u30c7\u30ec\u30fc\u30c6\u30a3\u30c3\u30c9\u30e6\u30fc\u30b6\u30fc\u7528\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u6e96\u5099\n\n\u30ea\u30bd\u30fc\u30b9\u4f5c\u6210\n\u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u3001CloudFormation\u3067\u4f5c\u6210\u3059\u308b\u3002\n\n\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306eS3\u30d0\u30b1\u30c3\u30c8\n\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u767a\u884c\u3059\u308bIAM\u30e6\u30fc\u30b6\u30fc\n\n\nsample.template\n{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n  \"Description\" : \"Sample Template S3_Bucket and IAM_User for federation.\",\n\n  \"Resources\" : {\n\n    \"S3PrivateBucket\" : {\n      \"Type\"       : \"AWS::S3::Bucket\",\n      \"Properties\" : { \"AccessControl\" : \"Private\" }\n    },\n\n    \"Publisher\" : { \"Type\" : \"AWS::IAM::User\" },\n\n    \"PublisherPolicy\" : {\n      \"Type\"       : \"AWS::IAM::Policy\",\n      \"Properties\" : {\n        \"Users\"          : [ { \"Ref\" : \"Publisher\" } ],\n        \"PolicyName\"     : \"PublisherPolicy\",\n        \"PolicyDocument\" : {\n          \"Statement\" : [\n            {\n              \"Effect\"   : \"Allow\",\n              \"Action\"   : [ \"sts:GetFederationToken\" ],\n              \"Resource\" : [ \"*\" ]\n            },\n            {\n              \"Effect\"   : \"Allow\",\n              \"Action\"   : [ \"s3:PutObject\" ],\n              \"Resource\" : [ \"arn:aws:s3:::*\" ]\n            }\n          ]\n        }\n      }\n    },\n\n    \"PublisherKeys\" : {\n      \"Type\"       : \"AWS::IAM::AccessKey\",\n      \"Properties\" : { \"UserName\" : { \"Ref\": \"Publisher\" } }\n    }\n  },\n\n  \"Outputs\" : {\n    \"S3BucketName\" : {\n      \"Description\" : \"Name of S3 bucket\",\n      \"Value\"       : { \"Ref\" : \"S3PrivateBucket\" }\n    },\n    \"AccessKey\" : {\n      \"Description\" : \"AWSAccessKeyId of new user\",\n      \"Value\"       : { \"Ref\" : \"PublisherKeys\" }\n    },\n    \"SecretKey\" : {\n      \"Description\" : \"AWSSecretKey of new user\",\n      \"Value\"       : { \"Fn::GetAtt\" : [\"PublisherKeys\", \"SecretAccessKey\"]}\n    }\n  }\n}\n\n\n\n\u88dc\u8db3\nIAM\u30e6\u30fc\u30b6\u30fc\uff08Publisher\uff09\u306b\u3082S3\u30d0\u30b1\u30c3\u30c8\u3078\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u53ef\u80fd\u306a\u6a29\u9650\u304c\u5fc5\u8981\u3002\n\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u767a\u884c\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306b\u306f\u767a\u884c\u8005\u4ee5\u4e0a\u306e\u64cd\u4f5c\u6a29\u9650\u3092\u4ed8\u4e0e\u3067\u304d\u306a\u3044\u3002\n\u30c8\u30fc\u30af\u30f3\u306e\u767a\u884c\u6642\u306b\u306f\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30cf\u30de\u308a\u3084\u3059\u3044\u30dd\u30a4\u30f3\u30c8\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\n\n\u6295\u7a3f\n\u5b9f\u969b\u306b\u6295\u7a3f\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nsample.rb\nrequire 'logger'\nrequire 'aws'\n\n(file_path, bucket_name, object_key_prefix) = ARGV\nunless file_path && bucket_name && object_key_prefix\n  puts \"Usage: #{File.basename(__FILE__)} <FILE_PATH> <BUCKET_NAME> <OBJECT_KEY_PREFIX>\"\n  exit 1\nend\nraise \"File(#{file_path}) not found\" unless File.exist?(file_path)\n\nusername      = \"TemporaryUser\"\nduration      = 900\ns3_arn        = \"arn:aws:s3:::#{bucket_name}/#{object_key_prefix}/*\"\ns3_object_key = File.basename(file_path)\n\nAWS.config(logger: Logger.new($stdout))\n\nupload_policy  = AWS::STS::Policy.new {|policy| policy.allow( actions: ['s3:PutObject'], resources: s3_arn) }\nupload_session = AWS::STS.new.new_federated_session(username, policy: upload_policy, duration: duration)\n\ns3     = AWS::S3.new(upload_session.credentials.select {|k,v| [:access_key_id, :secret_access_key, :session_token].include?(k) })\nbucket = s3.buckets[bucket_name]\nraise 'Bucket not exists' unless bucket.exists?\n\n# success\ns3_object_key = \"#{object_key_prefix}/\" + File.basename(file_path)\nbucket.objects[s3_object_key].write(file: file_path)\n\n# deny path\ns3_object_key = \"deny_#{object_key_prefix}/\" + File.basename(file_path)\nbucket.objects[s3_object_key].write(file: file_path)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n$ ruby sample.rb upload_file s3bukect_name object_key_prefix\nI, [2014-06-05T02:38:33.113917 #18497]  INFO -- : [AWS STS 200 1.202314 0 retries] get_federation_token(:duration_seconds=>900,:name=>\"TemporaryUser\",:policy=>\"{\\\"Version\\\":\\\"2008-10-17\\\",\\\"Statement\\\":[{\\\"Sid\\\":\\\"****\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Resource\\\":[\\\"arn:aws:s3:::s3bukect_name/object_key_prefix/*\\\"],\\\"Action\\\":[\\\"s3:PutObject\\\"]}]}\")  \n\nI, [2014-06-05T02:38:34.012440 #18497]  INFO -- : [AWS S3 200 0.149033 0 retries] put_object(:bucket_name=>\"s3bukect_name\",:content_length=>0,:data=>#<File:upload_file (0 bytes)>,:key=>\"object_key_prefix/upload_file\")  \n\nI, [2014-06-05T02:38:34.147673 #18497]  INFO -- : [AWS S3 403 0.134181 0 retries] put_object(:bucket_name=>\"s3bukect_name\",:content_length=>0,:data=>#<File:upload_file (0 bytes)>,:key=>\"deny_object_key_prefix/upload_file\") AWS::S3::Errors::AccessDenied Access Denied\n\n\u300c\u4e00\u6642\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u300d\u3068\u306f:\n> http://aws.amazon.com/jp/iam/faqs/#How_can_temporary_security_credentials_be_used_to_call_AWS_service_APIs\nQ: \u4e00\u6642\u7684\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u3068\u306f\u4f55\u3067\u3059\u304b?\n\u4e00\u6642\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a8d\u8a3c\u60c5\u5831\u306f\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fc ID\u3001\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3001\u304a\u3088\u3073\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c8\u30fc\u30af\u30f3\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u6307\u5b9a\u3055\u308c\u305f\u671f\u9593\u3068\u7279\u5b9a\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u4e00\u5f0f\u306b\u6709\u52b9\u3067\u3059\u3002\u4e00\u6642\u7684\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a3c\u660e\u66f8\u306f\u3001\u5358\u306b\u300c\u30c8\u30fc\u30af\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u306f\u3001IAM \u30e6\u30fc\u30b6\u30fc\u7528\u306b\u3001\u307e\u305f\u306f\u81ea\u8eab\u306e\u793e\u5185\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u7ba1\u7406\u3059\u308b\u30d5\u30a7\u30c7\u30ec\u30fc\u30c6\u30a3\u30c3\u30c9\u30e6\u30fc\u30b6\u30fc\u7528\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u6e96\u5099\n\n### \u30ea\u30bd\u30fc\u30b9\u4f5c\u6210\n\u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u3001CloudFormation\u3067\u4f5c\u6210\u3059\u308b\u3002\n\n* \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306eS3\u30d0\u30b1\u30c3\u30c8\n* \u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u767a\u884c\u3059\u308bIAM\u30e6\u30fc\u30b6\u30fc\n\n```json:sample.template\n{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n  \"Description\" : \"Sample Template S3_Bucket and IAM_User for federation.\",\n\n  \"Resources\" : {\n\n    \"S3PrivateBucket\" : {\n      \"Type\"       : \"AWS::S3::Bucket\",\n      \"Properties\" : { \"AccessControl\" : \"Private\" }\n    },\n\n    \"Publisher\" : { \"Type\" : \"AWS::IAM::User\" },\n\n    \"PublisherPolicy\" : {\n      \"Type\"       : \"AWS::IAM::Policy\",\n      \"Properties\" : {\n        \"Users\"          : [ { \"Ref\" : \"Publisher\" } ],\n        \"PolicyName\"     : \"PublisherPolicy\",\n        \"PolicyDocument\" : {\n          \"Statement\" : [\n            {\n              \"Effect\"   : \"Allow\",\n              \"Action\"   : [ \"sts:GetFederationToken\" ],\n              \"Resource\" : [ \"*\" ]\n            },\n            {\n              \"Effect\"   : \"Allow\",\n              \"Action\"   : [ \"s3:PutObject\" ],\n              \"Resource\" : [ \"arn:aws:s3:::*\" ]\n            }\n          ]\n        }\n      }\n    },\n\n    \"PublisherKeys\" : {\n      \"Type\"       : \"AWS::IAM::AccessKey\",\n      \"Properties\" : { \"UserName\" : { \"Ref\": \"Publisher\" } }\n    }\n  },\n\n  \"Outputs\" : {\n    \"S3BucketName\" : {\n      \"Description\" : \"Name of S3 bucket\",\n      \"Value\"       : { \"Ref\" : \"S3PrivateBucket\" }\n    },\n    \"AccessKey\" : {\n      \"Description\" : \"AWSAccessKeyId of new user\",\n      \"Value\"       : { \"Ref\" : \"PublisherKeys\" }\n    },\n    \"SecretKey\" : {\n      \"Description\" : \"AWSSecretKey of new user\",\n      \"Value\"       : { \"Fn::GetAtt\" : [\"PublisherKeys\", \"SecretAccessKey\"]}\n    }\n  }\n}\n```\n\n### \u88dc\u8db3\nIAM\u30e6\u30fc\u30b6\u30fc\uff08Publisher\uff09\u306b\u3082S3\u30d0\u30b1\u30c3\u30c8\u3078\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u53ef\u80fd\u306a\u6a29\u9650\u304c\u5fc5\u8981\u3002\n\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u767a\u884c\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306b\u306f\u767a\u884c\u8005\u4ee5\u4e0a\u306e\u64cd\u4f5c\u6a29\u9650\u3092\u4ed8\u4e0e\u3067\u304d\u306a\u3044\u3002\n\u30c8\u30fc\u30af\u30f3\u306e\u767a\u884c\u6642\u306b\u306f\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30cf\u30de\u308a\u3084\u3059\u3044\u30dd\u30a4\u30f3\u30c8\u3002\n\n### \u5b9f\u884c\u7d50\u679c\n![Screenshot_from_2014-06-05 11:17:40.png](https://qiita-image-store.s3.amazonaws.com/0/24703/a6826d36-cde8-1d83-998c-11e88a784284.png)\n\n## \u6295\u7a3f\n\n\u5b9f\u969b\u306b\u6295\u7a3f\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```rb:sample.rb\nrequire 'logger'\nrequire 'aws'\n\n(file_path, bucket_name, object_key_prefix) = ARGV\nunless file_path && bucket_name && object_key_prefix\n  puts \"Usage: #{File.basename(__FILE__)} <FILE_PATH> <BUCKET_NAME> <OBJECT_KEY_PREFIX>\"\n  exit 1\nend\nraise \"File(#{file_path}) not found\" unless File.exist?(file_path)\n\nusername      = \"TemporaryUser\"\nduration      = 900\ns3_arn        = \"arn:aws:s3:::#{bucket_name}/#{object_key_prefix}/*\"\ns3_object_key = File.basename(file_path)\n\nAWS.config(logger: Logger.new($stdout))\n\nupload_policy  = AWS::STS::Policy.new {|policy| policy.allow( actions: ['s3:PutObject'], resources: s3_arn) }\nupload_session = AWS::STS.new.new_federated_session(username, policy: upload_policy, duration: duration)\n\ns3     = AWS::S3.new(upload_session.credentials.select {|k,v| [:access_key_id, :secret_access_key, :session_token].include?(k) })\nbucket = s3.buckets[bucket_name]\nraise 'Bucket not exists' unless bucket.exists?\n\n# success\ns3_object_key = \"#{object_key_prefix}/\" + File.basename(file_path)\nbucket.objects[s3_object_key].write(file: file_path)\n\n# deny path\ns3_object_key = \"deny_#{object_key_prefix}/\" + File.basename(file_path)\nbucket.objects[s3_object_key].write(file: file_path)\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```bash\n$ ruby sample.rb upload_file s3bukect_name object_key_prefix\nI, [2014-06-05T02:38:33.113917 #18497]  INFO -- : [AWS STS 200 1.202314 0 retries] get_federation_token(:duration_seconds=>900,:name=>\"TemporaryUser\",:policy=>\"{\\\"Version\\\":\\\"2008-10-17\\\",\\\"Statement\\\":[{\\\"Sid\\\":\\\"****\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Resource\\\":[\\\"arn:aws:s3:::s3bukect_name/object_key_prefix/*\\\"],\\\"Action\\\":[\\\"s3:PutObject\\\"]}]}\")  \n\nI, [2014-06-05T02:38:34.012440 #18497]  INFO -- : [AWS S3 200 0.149033 0 retries] put_object(:bucket_name=>\"s3bukect_name\",:content_length=>0,:data=>#<File:upload_file (0 bytes)>,:key=>\"object_key_prefix/upload_file\")  \n\nI, [2014-06-05T02:38:34.147673 #18497]  INFO -- : [AWS S3 403 0.134181 0 retries] put_object(:bucket_name=>\"s3bukect_name\",:content_length=>0,:data=>#<File:upload_file (0 bytes)>,:key=>\"deny_object_key_prefix/upload_file\") AWS::S3::Errors::AccessDenied Access Denied\n```\n", "tags": ["AWS", "CloudFormation", "IAM", "Ruby"]}