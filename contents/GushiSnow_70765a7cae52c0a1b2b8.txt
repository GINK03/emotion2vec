{"context": "\n\nWHY\n\n\u79c1\u304c\u5b66\u751f\u306e\u6642\u4ee3\u3084\u7814\u4fee\u3067\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u3084\u308a\u65b9\u306f\u7fd2\u3044\u307e\u3057\u305f\u304c\u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306a\u30b7\u30c1\u30e5\u30a8\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u6b20\u70b9\u3001\u5229\u70b9\u304c\u3042\u308b\u304b\u307e\u3067\u8a00\u53ca\u3057\u3066\u6559\u308f\u3063\u305f\u7d4c\u9a13\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u201d\u5fc5\u8981\u306f\u767a\u660e\u306e\u6bcd\u201d\u3068\u3044\u3046\u8a00\u8449\u304c\u3042\u308b\u3088\u3046\u306b\u73fe\u5b9f\u7684\u306b\u4f7f\u3048\u308b\u5f62\u306b\u3057\u306a\u3044\u3068\u4e38\u6697\u8a18\u3057\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\n\u305d\u3053\u3067\u4eca\u56de\u306e\u30bf\u30a4\u30c8\u30eb\u306f\u201d\u6b8b\u696d\u3057\u305f\u304f\u306a\u3044\u201d\u3092\u62bc\u3057\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u628a\u63e1\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u91cf\u3084\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u304c\u5927\u5e45\u306b\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\n\u3064\u307e\u308a\u3053\u308c\u3092\u7fd2\u5f97\u3059\u308b\u3060\u3051\u3067\u30b3\u30b9\u30c8\u30c0\u30a6\u30f3\u3084\u7121\u99c4\u306a\u6b8b\u696d\u306e\u6291\u5236\u306b\u3064\u306a\u304c\u308a\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u308b\u53ef\u80fd\u6027\u3092\u79d8\u3081\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\n\u4eca\u306e\u6642\u4ee3\u306f\u30b0\u30b0\u308c\u3070\u624b\u6cd5\u81ea\u4f53\u306f\u3067\u3066\u304d\u307e\u3059\u3002\u305f\u3060\u3069\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u3069\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3001\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u826f\u3044\u304b\u306f\u72b6\u6cc1\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\u305d\u306e\u9078\u629e\u306e\u6307\u6a19\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306b\u3088\u3063\u3066\u4e00\u4eba\u3067\u3082\u591a\u304f\u306e\u65b9\u306e\u6642\u9593\u3092\u4f5c\u308c\u3066\u5e78\u305b\u306b\u306a\u3063\u3066\u304f\u308c\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\u6ce8\u610f\uff1a\u7b46\u8005\u306e\u77e5\u8b58\u3067\u5206\u304b\u308b\u7bc4\u56f2\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\u77e5\u898b\u306e\u3042\u308b\u8a73\u3057\u3044\u65b9\u304c\u898b\u3066\u9593\u9055\u3044\u304c\u5206\u304b\u308c\u3070\u9762\u5012\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u6307\u6458\u3057\u3066\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\u79c1\u3060\u3051\u3067\u306a\u304f\u79c1\u4ee5\u5916\u306e\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u306e\u305f\u3081\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nWHAT\n\u672c\u8cea\u7684\u306b\u5927\u4e8b\u306b\u306a\u3063\u3066\u304f\u308b\u8003\u3048\u65b9\u304c\u6271\u3046\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3001\u7a2e\u985e\u3001\u5fc5\u8981\u3068\u3055\u308c\u308b\u51e6\u7406\u306b\u3088\u3063\u3066\u9078\u629e\u3059\u3079\u304d\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u78ba\u8a8d\u3059\u3079\u304d\u624b\u9806\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\n\u73fe\u72b6\u306e\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304c\u30c7\u30fc\u30bf\u69cb\u9020\u307e\u305f\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u9023\u3057\u3066\u3044\u305d\u3046\u304b\u8abf\u67fb\n\u6271\u3046\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3001\u7a2e\u985e\u3092\u78ba\u8a8d\n\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u9078\u629e\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u629e(\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u4f9d\u5b58\u3057\u3066\u5b9f\u88c5\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u6c7a\u307e\u308b)\n\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\uff08\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u307f\u5b9f\u88c5\uff09\n\u8a08\u6e2c\n\u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u5ea6\u5408\u3044\u306e\u6bd4\u8f03\n\u554f\u984c\u306a\u3051\u308c\u3070\u63a1\u7528\n\n\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u306f\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306e\u89e3\u6d88\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30c7\u30fc\u30bf\u69cb\u9020\u4ee5\u5916\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308c\u3070\u305d\u306e\u90e8\u5206\u306b\u5f15\u304d\u3065\u3089\u308c\u3066\u901f\u5ea6\u304c\u843d\u3061\u307e\u3059\u3002\n\u305d\u308c\u3092\u9632\u3050\u305f\u3081\u306b\u6700\u521d\u306b\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u3054\u3068\u306e\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u5358\u7d14\u306b\u9ad8\u901f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u3082\u8a08\u6e2c\u3057\u305f\u969b\u306b\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30b9\u30ef\u30c3\u30d7\u3068\u547c\u3070\u308c\u308b\u7269\u7406\u30e1\u30e2\u30ea\u7a7a\u9593\u306b\u5165\u308a\u304d\u3089\u306a\u304b\u3063\u305f\u30c7\u30fc\u30bf\u3092HDD\u306a\u3069\u306b\u9000\u907f\u3055\u305b\u308b\u51e6\u7406\u304c\u983b\u7e41\u306b\u8d77\u3053\u308b\u3068\u767a\u751f\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u5177\u5408\u306e\u78ba\u8a8d\u306f\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6271\u3046\u30c7\u30fc\u30bf\u306e\u898b\u308b\u3079\u304d\u6307\u6a19\n\n\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\uff08\u30e1\u30e2\u30ea\u3092\u5927\u91cf\u306b\u4f7f\u7528\u3057\u305d\u3046\u304b\uff09\n\u633f\u5165\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u306e\u983b\u5ea6\n\u691c\u7d22\u983b\u5ea6\n\n\u4e0a\u8a18\u306e\u6307\u6a19\u306b\u3088\u3063\u3066\u6271\u3046\u3079\u304d\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6c7a\u307e\u3063\u3066\u304d\u307e\u3059\u3002\n\u633f\u5165\u30fb\u524a\u9664\u3001\u66f4\u65b0\u306f\u57fa\u672c\u7684\u306b\u30c7\u30fc\u30bf\u306e\u672b\u5c3e\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u306e\u4e2d\u9593\u90e8\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u69cb\u9020\n\nArray\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u901a\u3057\u3066\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3002\u672b\u5c3e\u306e\u30c7\u30fc\u30bf\u633f\u5165\u3001\u524a\u9664\u306f\u9ad8\u901f\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u5927\u91cf\u306e\u30e1\u30e2\u30ea\u3092\u6d88\u8cbb\u3059\u308b\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4e2d\u9593\u90e8\u5206\u3078\u306e\u30c7\u30fc\u30bf\u306e\u633f\u5165\u3001\u524a\u9664\u304c\u9045\u3044 \n\n\nLinked List\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u3092\u3069\u306e\u90e8\u5206\u3067\u3042\u3063\u3066\u3082\u633f\u5165\u3001\u524a\u9664\u304c\u5bb9\u6613\u306a\u305f\u3081\u30ea\u30b5\u30a4\u30ba\u304c\u5bb9\u6613\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a \u30ea\u30f3\u30af\u3092\u8fbf\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u306e\u30a2\u30af\u30bb\u30b9\u304c\u9045\u3044\u3002\u6b21\u306e\u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u305d\u306e\u5206\u5927\u304d\u304f\u306a\u308b\u3002\n\n\nBinary Tree\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u633f\u5165\u3001\u66f4\u65b0\u304cLinked List\u306e\u3088\u3046\u306b\u9ad8\u901f\u306b\u3067\u304d\u3001\u306a\u304a\u304b\u3064\u691c\u7d22\u3082\u65e9\u3044\u3002\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u6df1\u3055\u304c\u5e73\u8861\u3057\u3066\u3044\u306a\u3044\u3068\u6027\u80fd\u306b\u60aa\u5f71\u97ff\u3092\u4e0e\u3048\u308b\n\n\nTrie\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u8f9e\u66f8\u306a\u3069\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30d1\u30bf\u30fc\u30f3\u3092\u9ad8\u901f\u306b\u6271\u3044\u305f\u3044\u5834\u5408\u306b\u4f7f\u7528\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u591a\u3044\n\n\nGraph \n\n\n\u30e1\u30ea\u30c3\u30c8\uff1aTree\u3084Trie\u3067\u306f\u6271\u3048\u306a\u3044\u5faa\u74b0\u578b\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u6642\u306b\u4f7f\u7528\u3002node\u3054\u3068\u306e\u30b3\u30b9\u30c8\u3092\u5272\u308a\u632f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u6700\u9069\u306a\u30eb\u30fc\u30c8\u3084\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u308b\u554f\u984c\u306b\u3082\u9069\u7528\u53ef\u80fd\u3002\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a \u8907\u96d1\u306a\u70ba\u3001\u6271\u3046\u306e\u304c\u96e3\u3057\u3044\n\n\nStack\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9ad8\u901f\u3002\u518d\u5e30\u7684\u306a\u51e6\u7406\u306a\u3069\u3068\u76f8\u6027\u304c\u826f\u3044\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u4f55\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068Stack Over Flow\u306e\u3088\u3046\u306a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u8d77\u3053\u3059\u3002\u4e2d\u9593\u306e\u30c7\u30fc\u30bf\u306b\u306f\u30a2\u30af\u30bb\u30b9\u4e0d\u53ef\n\n\nQueue\n\n\n\u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9ad8\u901f\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u3084WEB\u304b\u3089\u306e\u30c7\u30fc\u30bf\u5165\u51fa\u529b\u306a\u3069\u3068\u76f8\u6027\u304c\u826f\u3044\n\u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30b9\u30bf\u30c3\u30af\u3068\u540c\u69d8\u3067\u4f55\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u8d77\u3053\u3059\u3002\u4e2d\u9593\u306e\u30c7\u30fc\u30bf\u306b\u306f\u30a2\u30af\u30bb\u30b9\u4e0d\u53ef\n\n\n\n\n\n\n\u30c7\u30fc\u30bf\u69cb\u9020\n\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\n\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\n\u4e2d\u9593\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u633f\u5165\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u306e\u983b\u5ea6\n\u4e2d\u9593\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u691c\u7d22\u983b\u5ea6\n\n\n\n\nArray\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09\n\u5c11\u306a\u3044\n\u591a\u3044\n\n\nLinked List\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09\n\u591a\u3044\n\u5c11\u306a\u3044\n\n\nBinary Tree\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09\n\u591a\u3044\n\u591a\u3044\n\n\nStack\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u5c11\u306a\u3044\uff09\n\u7121\u3057\n\u7121\u3057\n\n\nQueue\n\u5916\u90e8\u5165\u51fa\u529b\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09\n\u7121\u3057\n\u7121\u3057\n\n\nTrie\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\n\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u5927\u304d\u3044\uff09\n\u7121\u3057\n\u7121\u3057\n\n\n\nGraph\u306f\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u3084\u7528\u9014\u304c\u7279\u6b8a\u306a\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u306e\u3067\u4e0a\u8a18\u306e\u6307\u6a19\u3068\u306f\u5225\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nGraph\uff1a\u98db\u884c\u6a5f\u306e\u30eb\u30fc\u30c8\u3084\u30b3\u30b9\u30c8\u8a08\u7b97\u306a\u3069\u5de1\u56de\u578b\u304b\u3064\u5404node\u9593\u306b\u30b3\u30b9\u30c8\u3092\u632f\u308a\u305f\u3044\u554f\u984c\u306b\u4f7f\u7528\n\n\u9078\u629e\u3059\u3079\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\n\u4f7f\u7528\u3067\u304d\u308b\u30ea\u30bd\u30fc\u30b9\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3088\u3063\u3066\u306f\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u6069\u6075\u3092\u3046\u3051\u3089\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u30bd\u30fc\u30c8\u306b\u3088\u308b\u6069\u6075\u304c\u53d7\u3051\u3089\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\n\n\nArray\n\n\n\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\nBinary Tree\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\n\u6728\u69cb\u9020\u306e\u64cd\u4f5c\n\n\nGraph\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\n\u5e45\u512a\u5148\u63a2\u7d22\n\n\nArray\u306e\u4f5c\u6210\u524d\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u57fa\u672c\u7684\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\u305f\u3060\u3057\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u4ed6\u306e\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\u4e00\u822c\u7684\u306b\u9ad8\u901f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u305f\u3081\u4f7f\u7528\u3055\u308c\u308b\u6a5f\u4f1a\u304c\u591a\u3044 \n\n\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\n\u4e26\u5217\u3067\u51e6\u7406\u304c\u53ef\u80fd\u306a\u305f\u3081\u3001\u30e1\u30e2\u30ea\u3068CPU\u306e\u4e26\u5217\u6570\u304c\u8c4a\u5bcc\u306a\u5834\u5408\u306b\u4f7f\u7528\u3002 \n\n\n\n\u633f\u5165\u30bd\u30fc\u30c8\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3084\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u6bd4\u3079\u3001\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u5b89\u5b9a\u7684\u306b\u30bd\u30fc\u30c8\u53ef\u80fd\u3002\u4e3b\u306b\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3084\u3059\u3067\u306b\u307b\u3068\u3093\u3069\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u306b\u4f7f\u7528 \n\n\n\n\u30ab\u30a6\u30f3\u30c6\u30a3\u30f3\u30b0\u30bd\u30fc\u30c8\n\n\u30b7\u30f3\u30d7\u30eb\u304b\u3064\u9ad8\u901f\u306a\u30bd\u30fc\u30c8\u3002\u30e1\u30e2\u30ea\u304c\u8c4a\u5bcc\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3068\u30de\u30c3\u30c1\u3057\u3066\u3044\u308c\u3070\u3053\u306e\u624b\u6cd5\u304c\u4e00\u756a\u826f\u3044\n\n\n\n\u9ad8\u901f\u5316\u306e\u305f\u3081\u306e\u30c6\u30af\u30cb\u30c3\u30af\n\n\u52d5\u7684\u8a08\u753b\u6cd5\n\n\n\n\nHOW\n\u3053\u3053\u3067\u91cd\u8981\u306b\u306a\u308b\u306e\u304c\u5b9f\u969b\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u7406\u7531\u306f\u5b9f\u969b\u306b\u8a18\u8ff0\u3067\u304d\u306a\u3044\u3068\u4e2d\u8eab\u304c\u5206\u304b\u3089\u305a\u3001\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u305f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u65e9\u304f\u5e30\u308b\u305f\u3081\u306b\u3053\u306e\u624b\u9593\u3092\u60dc\u3057\u307e\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u307e\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6c4e\u7528\u6027\u304c\u9ad8\u3044\u305f\u3081\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u8a00\u8a9e\u95a2\u4fc2\u306a\u304f\u5229\u7528\u3067\u304d\u308b\u305f\u3081\u5fdc\u7528\u7bc4\u56f2\u304c\u5e83\u3044\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\u8457\u8005\u306f\u52c9\u5f37\u306e\u305f\u3081\u306bC++\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\nArray\u306f\u7c21\u5358\u306a\u306e\u3067\u30bd\u30fc\u30c8\u3068\u5408\u308f\u305b\u3066\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\nArray\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u306e\u30dd\u30a4\u30f3\u30c8\u306f\n\n\u4e2d\u9593\u306e\u5024\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n\u4e2d\u9593\u306e\u5024\u3092\u5229\u7528\u3057\u30662\u3064\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n\u305d\u308c\u3089\u3092\u6607\u9806\u306b\u3059\u308b\u305f\u3081\u306b\u4ea4\u63db\u3059\u308b\u3053\u3068\n\nvoid Merge(int *data_array, int left, int mid, int right){\n    int n1 = mid - left;\n    int n2 = right - mid;\n    int *L = new int[n1];\n    int *R = new int[n2];\n    for(int i = 0; i < n1; i++){\n        L[i] = data_array[left + i];\n    }\n    for(int i = 0; i < n2; i++){\n        R[i] = data_array[mid + i];\n    }\n    L[n1] = ENDNUMBER;\n    R[n2] = ENDNUMBER;\n    int i = 0;\n    int j = 0;\n    for(int k = left; k < right - 1 ; k++){\n        if(L[i] < R[j]){\n            data_array[k] = L[i];\n            i = i + 1;\n        }else{\n            data_array[k] = R[j];\n            j = j + 1;\n        }\n    }\n}\n\nvoid merge_sort::merge_method(int *data_array, int left, int right){\n    int mid = (left + right) / 2;\n    if(left + 1 < right){\n        merge_method(data_array, left, mid);\n        merge_method(data_array, mid, right);\n        Merge(data_array, left, mid , right);\n    }\n}\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u30dd\u30a4\u30f3\u30c8\u306f\n\n\u4e2d\u9593\u306e\u5024\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n\u4e2d\u9593\u306e\u5024\u306b\u8fd1\u3044\u5024\u540c\u58eb\u3092\u6bd4\u8f03\u3057\u6607\u9806\u306b\u5165\u308c\u66ff\u3048\n\u4e2d\u9593\u306e\u5024\u3092\u5229\u7528\u3057\u3066\u518d\u5e30\u7684\u306b\u51e6\u7406\n\nint med3(int x, int y, int z){\n    if(x < y){\n        if(y < z){\n            return y;\n        }else {\n            if(z < x){\n                return x;\n            }else{\n                return z;\n            }\n        }\n    }else{\n        if(z < y){\n            return y;\n        }else {\n            if(x < z){\n                return x;\n            }else{\n                return z;\n            }\n        }\n    }\n}\n\nvoid quick::quick_method(int *data_array, int left, int right){\n    if (left < right){\n        int i = left;\n        int j = right;\n        int tmp;\n        int piviot = med3(data_array[i], data_array[i + (j - i) / 2], data_array[j]);\n        while(1){\n            while (data_array[i] < piviot) i++;\n            while (piviot < data_array[j]) j--;\n            if(i >= j){\n                break;\n            }\n            tmp = data_array[i];\n            data_array[i] = data_array[j];\n            data_array[j] = tmp;\n            i++;\n            j--;\n        }\n        quick_method(data_array, left, i - 1);\n        quick_method(data_array, j + 1, right);\n    }\n}\n\n\n\u633f\u5165\u30bd\u30fc\u30c8\n\u633f\u5165\u30bd\u30fc\u30c8\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u7279\u306b\u30dd\u30a4\u30f3\u30c8\u306f\u306a\u3044\u3067\u3059\u3002\n\u914d\u5217\u4e2d\u306e\u4e00\u3064\u524d\u306e\u5024\u304c\u5927\u304d\u3051\u308c\u3070\u4ea4\u63db\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\nvoid insert_sort::insert_method(int *data_array){\n    int tmp;\n    int j;\n    for(int i = 1; i < ARRAY_SIZE; i++){\n        tmp = data_array[i];\n        for(j = i; j > 0 && data_array[j - 1] > tmp; j--){\n            data_array[j] = data_array[j - 1];\n        }\n            data_array[j] = tmp;\n    }\n}\n\n\n\u30ab\u30a6\u30f3\u30c6\u30a3\u30f3\u30b0\u30bd\u30fc\u30c8\n\u5404\u5024\u306e\u983b\u5ea6\u5206\u5e03\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u983b\u5ea6\u5206\u5e03\u306b\u6cbf\u3063\u3066\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nvoid counting_sort::counting_sort_method(int *sort_data){\n    int *counting_sort_array = new int[ARRAY_SIZE];\n\n    for(int i = 0; i < ARRAY_SIZE; i++){\n        counting_sort_array[i] = 0;\n    }\n\n    for(int i = 0; i < ARRAY_SIZE; i++){\n        counting_sort_array[sort_data[i]]++;\n    }\n    int output_index = 0;\n    // counting_sort_array is zero not add data\n    for(int j=0;j < ARRAY_SIZE; j++){\n        while(counting_sort_array[j]--){\n            sort_data[output_index++] = j;\n        }\n    }\n}\n\n\nBinary Tree\n\u6728\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u3066\u5404\u7a2e\u6728\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u6728\u69cb\u8535\u306e\u5b9a\u7fa9\nstruct node{\n    int key_value;\n    node *p_left;\n    node *p_right;\n};\n\n\n\u6728\u306e\u64cd\u4f5c\n\u633f\u5165\u51e6\u7406\u3067\u3059\u3002\u518d\u5e30\u7684\u306a\u51e6\u7406\u306b\u3088\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u5b9f\u73fe\u3067\u304d\u308b\u306e\u304c\u6728\u306e\u5229\u70b9\u3067\u3059\u3002\nnode* binary_tree::insert(node *p_tree, int key){\n\n    if(p_tree == NULL){\n        node *p_new_tree = new node;\n        p_new_tree->key_value = key;\n        p_new_tree->p_left = NULL;\n        p_new_tree->p_right = NULL;\n        return p_new_tree;\n    }\n    if(key < p_tree->key_value){\n        p_tree->p_left = insert(p_tree->p_left, key);\n    }\n    if(key > p_tree->key_value){\n        p_tree->p_right = insert(p_tree->p_right, key);\n    }\n    return p_tree;\n}\n\n\n\u63a2\u7d22\n\u691c\u7d22\u51e6\u7406\u3067\u3059\u3002\u3053\u308c\u3082Binary Tree\u3067\u4f5c\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5358\u7d14\u306a\u5b9f\u88c5\u3067\u5b9f\u73fe\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\nint binary_tree::search(node *p_tree, int key){\n    if(p_tree == NULL){\n        return NULL;\n    }\n    if(p_tree->key_value == key){\n        return p_tree->key_value;\n    }\n    else if(key < p_tree->key_value){\n        return search(p_tree->p_left, key);\n    }else if(key > p_tree->key_value){\n        return search(p_tree->p_right, key);\n    }\n}\n\n\n\u6728\u306e\u524a\u9664\nnode binary_tree::destroy_tree(node *p_tree){\n    if(p_tree != NULL){\n        destroy_tree(p_tree->p_left);\n        destroy_tree(p_tree->p_right);\n        delete p_tree;\n    }\n}\n\n\n\u6700\u5927\u306e\u8981\u7d20\u3092\u63a2\u3059\nint binary_tree::find_max(node *p_tree){\n    if(p_tree == NULL){\n        return NULL;\n    }else if(p_tree->p_right == NULL){\n        return p_tree->key_value;\n    }else{\n        return find_max(p_tree->p_right);\n    }\n}\n\n\n\u6700\u5c0f\u306e\u8981\u7d20\u3092\u63a2\u3059\nint binary_tree::find_min(node *p_tree){\n    if(p_tree == NULL){\n        return NULL;\n    }else if(p_tree->p_left == NULL){\n        return p_tree->key_value;\n    }else{\n        return find_max(p_tree->p_left);\n    }\n}\n\n\n\u8981\u7d20\u306e\u524a\u9664\n\u8981\u7d20\u306e\u524a\u9664\u306f\u6728\u306e\u69cb\u9020\u3092\u4fdd\u3064\u305f\u3081\u306b\u5c11\u3057\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6728\u306e\u4e2d\u306e\u8981\u7d20\u6700\u5927\u306enode\u3092\u898b\u3064\u3051\u308b\u51e6\u7406\u3092\u8a18\u8ff0\uff08\u3053\u308c\u306f\u5f8c\u307b\u3069\u5fc5\u8981\uff09\n\u6728\u3068\u524a\u9664\u3057\u305f\u3044\u8981\u7d20\u3092\u4e0e\u3048\u308b\n\nnode* binary_tree::remove(node *p_tree, int remove_value){\n    if(p_tree == NULL){\n        return NULL;\n    }\n    if(p_tree->key_value == remove_value){\n        if(p_tree->p_left == NULL){\n            node *p_right_sub_tree = p_tree->p_right;\n            delete p_tree;\n            return p_right_sub_tree;\n        }\n        if(p_tree->p_right == NULL){\n            node *p_left_sub_tree = p_tree->p_left;\n            delete p_tree;\n            return p_left_sub_tree;\n        }\n        node *p_max_node = find_max(p_tree->p_left);\n        p_max_node->p_left = remove_max_node(p_tree->p_left, p_max_node);\n        p_max_node->p_right = p_tree->p_right;\n        delete p_tree;\n        return p_max_node;\n    }else if(p_tree->key_value < remove_value){\n        remove(p_tree->p_left, remove_value);\n    }else{\n        remove(p_tree->p_right, remove_value);\n    }\n    return NULL;\n}\n\n\nGraph\n\n\u30b0\u30e9\u30d5\u306e\u4f5c\u6210\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3068\u5e45\u512a\u5148\u63a2\u7d22\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\nclass graph {\npublic:\n    graph();\n    virtual ~graph();\n    graph(int V);\n    void addEdge(int v, int w);\n    void depth_first_search(int v);\n    void breadth_first_search(int s);\nprivate:\n    int V;\n    list<int> *adj;\n    void depth_first_search_util(int v, bool visited[]);\n};\n\n\n\u30a8\u30c3\u30b8\u306e\u8ffd\u52a0\nvoid graph::addEdge(int v, int edge){\n    adj[v].push_back(edge);\n}\n\n\u4f5c\u6210\u3055\u308c\u305f\u30b0\u30e9\u30d5\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\nvoid graph::depth_first_search_util(int v, bool visited[]){\n    visited[v] = true;\n    cout << v << \" \" << endl;\n    list<int>::iterator i;\n    for(i = adj[v].begin(); i != adj[v].end(); ++i){\n        if(!visited[*i]){\n            depth_first_search_util(*i, visited);\n        }\n    }\n}\n\nvoid graph::depth_first_search(int v){\n    bool *visited = new bool[V];\n    for(int i = 0; i < V; i++){\n        visited[i] = false;\n    }\n    for(int i = 0; i < V; i++){\n        if(visited[i] == false){\n            depth_first_search_util(i, visited);\n        }\n    }\n}\n\n\n\u5e45\u512a\u5148\u63a2\u7d22\n\u5e45\u512a\u5148\u63a2\u7d22\u306e\u30dd\u30a4\u30f3\u30c8\u306fQueue\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\nQueue\u306b\u63a2\u7d22\u5e45\u5206\u306e\u5024\u3092\u5165\u308c\u3066\u3001\u9806\u306b\u691c\u7d22\u3059\u308b\u3053\u3068\u3067Queue\u306e\u6027\u8cea\u3067\u3042\u308bFirst in First out\u306b\u3088\u308a\u5e45\u512a\u5148\u63a2\u7d22\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\nvoid graph::breadth_first_search(int s){\n\n    bool *visited = new bool[V];\n    for(int i = 0; i < V; i++){\n        visited[i] = false;\n    }\n    list<int> queue;\n\n    visited[s] = true;\n    queue.push_back(s);\n\n    list<int>::iterator i;\n\n    while(!queue.empty()){\n        s = queue.front();\n        cout << s << \" \" << endl;\n        queue.pop_front();\n        for(i = adj[s].begin(); i != adj[s].end(); ++i){\n            if(!visited[*i]){\n                visited[*i] = true;\n                queue.push_back(*i);\n            }\n        }\n    }\n}\n\n\nTrie\n\u4eca\u56de\u5b9a\u7fa9\u3057\u305f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30d1\u30bf\u30fc\u30f3\u6570#define ALPHABETS 26\nvector\u306eint\u578b\u306e\u30c7\u30fc\u30bf\u3092\u30d8\u30c3\u30c0\u30fc\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nvector<int> occurrences;\n\n\u30c8\u30e9\u30a4\u6728\u306e\u633f\u5165\u51e6\u7406\u3067\u3059\u3002\n\u30c8\u30e9\u30a4\u6728\u306e\u30eb\u30fc\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\n\u767a\u751f\u56de\u6570\u3092index\u56de\u6570\u5206\u8ffd\u52a0\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\nvoid trie_tree_node::insert(char text[], int index){\n    vector<char> word(text, text + strlen(text));\n    trie_tree_node *temp = this->root;\n\n    int i = 0;\n\n    while(i < word.size()){\n        if(temp->children[word[i] - 'a'] == NULL){\n            temp->children[word[i] - 'a'] = new trie_tree_node();\n            temp->children[word[i] - 'a']->parent = temp;\n        }\n        temp = temp->children[word[i] - 'a'];\n        ++i;\n    }\n    temp->occurrences.push_back(index);\n}\n\n\u6728\u306e\u5024\u306e\u8868\u793a\u90e8\u5206\u3067\u3059\u3002\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u9806\u306b\u8ffd\u3063\u3066\u3044\u304d\u3001\u6728\u306e\u5b50\u30ce\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308c\u3070\u8868\u793a\u7528\u306e\u5217\u306b\u5b50\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u5b50\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u518d\u5e30\u7684\u306b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u767a\u751f\u56de\u6570\u304c0\u3067\u306a\u3051\u308c\u3070\u6587\u5b57\u306e\u8868\u793a\u3068\u305d\u306e\u56de\u6570\u3092\u518d\u5e30\u7684\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\nvoid trie_tree_node::lexicographPrint(trie_tree_node *trie_tree, vector<char> printUtilVectr){\n    int i;\n    bool noChild = true;\n\n    for(i = 0; i < ALPHABETS; i++){\n        if(trie_tree->children[i] != NULL){\n            noChild = false;\n            printUtilVectr.push_back('a' + i);\n            lexicographPrint(trie_tree->children[i], printUtilVectr);\n            printUtilVectr.pop_back();\n        }\n    }\n    if (trie_tree->occurrences.size() == 0){\n        return;\n    }else{\n        for(vector<char>::iterator itr = printUtilVectr.begin(); itr != printUtilVectr.end(); ++itr){\n            cout << *itr;\n        }\n        cout << \" -> @ index \" ;\n\n        for(vector<int>::iterator counter = trie_tree->occurrences.begin(); counter != trie_tree->occurrences.end(); ++counter){\n            cout << *counter << \" \";\n        }\n        cout << endl;\n    }\n\n    printUtilVectr.pop_back();\n}\n\n\u30c8\u30e9\u30a4\u6728\u304b\u3089\u5358\u8a9e\u3092\u691c\u7d22\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\u691c\u7d22\u3092\u884c\u3046\u5358\u8a9e\u306e\u6700\u521d\u306e\u4f4d\u7f6e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\"apple\"\u3060\u3068a\u304c\u898b\u3064\u304b\u308c\u3070\u305d\u306e\u6587\u5b57\u304b\u3089\u5b50\u30ce\u30fc\u30c9\u3092\u3068\u3063\u3066\u304d\u3066\u6587\u5b57\u30b5\u30a4\u30ba\u304c0\u306b\u306a\u308b\u307e\u3067\u884c\u3046\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\ntrie_tree_node* trie_tree_node::searchWord(trie_tree_node* trie_tree_data, char *text){\n\n    vector<char> word(text, text + strlen(text));\n    trie_tree_node *temp = trie_tree_data;\n\n    while(word.size() != 0){\n        if(temp->children[word[0] - 'a'] != NULL){\n            temp = temp->children[word[0] - 'a'];\n            word.erase(word.begin());\n        } else {\n            break;\n        }\n    }\n\n    if(word.size() == 0 && temp->occurrences.size() != 0) {\n        return temp;\n    } else {\n        return NULL;\n    }\n}\n\n\u5358\u8a9e\u306e\u524a\u9664\u51e6\u7406\u3067\u3059\u3002\n\u524a\u9664\u5bfe\u8c61\u306e\u5358\u8a9e\u304c\u3042\u308b\u30ce\u30fc\u30c9\u3092\u63a2\u3057\u3066\u304d\u307e\u3059\u3002\n\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u767a\u751f\u56de\u6570\u5206\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u5b50\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3082\u524a\u9664\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\nvoid trie_tree_node::removeWord(trie_tree_node *trie_tree_data, char *word){\n    trie_tree_node *temp = searchWord(trie_tree_data, word);\n    if(temp == NULL){\n        return;\n    }\n\n    temp->occurrences.pop_back();\n\n    bool noChild = true;\n\n    int childCount = 0;\n    int i;\n\n    for(i = 0; i < ALPHABETS; ++i){\n        if(temp->children[i] != NULL){\n            noChild = false;\n            ++childCount;\n        }\n    }\n    if(!noChild){\n        return;\n    }\n\n    trie_tree_node *traverse;\n\n    while(temp->occurrences.size() == 0 && temp->parent != NULL && childCount < 2){\n        traverse = temp->parent;\n\n        for(i = 0; i < ALPHABETS; ++i){\n            if(temp == traverse->children[i]){\n                traverse->children[i] = NULL;\n                break;\n            }\n        }\n        temp = traverse;\n\n        for(i = 0; i < ALPHABETS; ++i){\n            if(temp->children[i] != NULL){\n                ++childCount;\n            }\n        }\n    }\n}\n\n\n\n\u52d5\u7684\u8a08\u753b\u6cd5\n\u3042\u3089\u304b\u3058\u3081\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u518d\u5229\u7528\u3057\u3066\u52b9\u7387\u826f\u304f\u89e3\u304f\u624b\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\nint dynamic_programing::lis_bottom_up(int arr[], int n){\n    int i, j, max = 0;\n    int *lis = new int[n]();\n\n    for(i = 0; i < n; i++){\n        lis[i] = 1;\n    }\n\n    for(int i = 1; i < n; i++){\n        for(int j = 0; j < i; j++){\n            if( arr[i] > arr[j] && lis[i] < lis[j] + 1){\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n\n    for(int i = 0; i < n; i++){\n        if(max < lis[i]){\n            max = lis[i];\n        }\n    }\n\n    delete lis;\n\n    return max;\n}\n\n\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/SnowMasaya/C_plus_plus_algorithm_Study/tree/master/data_structure_algorithm\n\n\u30ea\u30bd\u30fc\u30b9\u306e\u8a08\u6e2c\u65b9\u6cd5\ntime\u30b3\u30de\u30f3\u30c9\u3067\u5358\u7d14\u306a\u5b9f\u884c\u901f\u5ea6\u306f\u56f3\u308c\u307e\u3059\u3002\ndstat\u30b3\u30de\u30f3\u30c9\u3067\u3042\u308c\u3070\u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u91cf\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u53f3\u304b\u3089cpu\u306e\u4f7f\u7528\u91cf\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIO\u3001\u30c7\u30a3\u30b9\u30af\u306eIO\u3001\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u304c\u628a\u63e1\u3067\u304d\u307e\u3059\u3002\n\n\n\u6ce8\u610f\u70b9\n\u5927\u4e8b\u306a\u306e\u306f\u81ea\u5206\u306e\u74b0\u5883\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u8a08\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u672c\u756a\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u8a00\u3048\u307e\u3059\u3002\u672c\u756a\u74b0\u5883\u3067\u8a66\u3059\u5834\u5408\u306b\u306f\u4ed6\u306e\u8981\u56e0\u304c\u7d61\u3093\u3067\u304f\u308b\u3068\u601d\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5927\u4e8b\u3060\u3068\u5206\u304b\u3063\u3061\u3083\u3044\u308b\u3051\u3069\u624b\u3092\u51fa\u3057\u3066\u3044\u306a\u3044\u30fb\u30fb\u30fb\n\u305d\u3093\u306a\u3042\u306a\u305f\u3082\u662f\u975e\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u81ea\u5206\u306e\u5927\u5207\u306a\u6642\u9593\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\n\u3082\u3063\u3068\u6df1\u304f\u3084\u308a\u305f\u3044\u65b9\u306f\u4e0b\u8a18\u304c\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\nGeeksforGeeks A computer science portal for geeks\n\n\u53c2\u8003\nJumping into C++\n\u30bd\u30fc\u30c8 \n\u30c8\u30e9\u30a4\u6728 \nData Science Tutorials\nIntroduction to Graphs and Their Data Structures: Section 1\nGeeksforGeeks A computer science portal for geeks\nTrie Tree Implementation\n#WHY\n\n<img width=\"300\" alt=\"00_PP22_PP_TP_V.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/10496/feda706f-843a-2efa-20d5-5c66b4ad4b4f.jpeg\">\n\n\u79c1\u304c\u5b66\u751f\u306e\u6642\u4ee3\u3084\u7814\u4fee\u3067\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u3084\u308a\u65b9\u306f\u7fd2\u3044\u307e\u3057\u305f\u304c\u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306a\u30b7\u30c1\u30e5\u30a8\u30fc\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u6b20\u70b9\u3001\u5229\u70b9\u304c\u3042\u308b\u304b\u307e\u3067\u8a00\u53ca\u3057\u3066\u6559\u308f\u3063\u305f\u7d4c\u9a13\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u201d\u5fc5\u8981\u306f\u767a\u660e\u306e\u6bcd\u201d\u3068\u3044\u3046\u8a00\u8449\u304c\u3042\u308b\u3088\u3046\u306b\u73fe\u5b9f\u7684\u306b\u4f7f\u3048\u308b\u5f62\u306b\u3057\u306a\u3044\u3068\u4e38\u6697\u8a18\u3057\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u4eca\u56de\u306e\u30bf\u30a4\u30c8\u30eb\u306f\u201d\u6b8b\u696d\u3057\u305f\u304f\u306a\u3044\u201d\u3092\u62bc\u3057\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u628a\u63e1\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u91cf\u3084\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u304c\u5927\u5e45\u306b\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3053\u308c\u3092\u7fd2\u5f97\u3059\u308b\u3060\u3051\u3067\u30b3\u30b9\u30c8\u30c0\u30a6\u30f3\u3084\u7121\u99c4\u306a\u6b8b\u696d\u306e\u6291\u5236\u306b\u3064\u306a\u304c\u308a\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u308b\u53ef\u80fd\u6027\u3092\u79d8\u3081\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\n\u4eca\u306e\u6642\u4ee3\u306f\u30b0\u30b0\u308c\u3070\u624b\u6cd5\u81ea\u4f53\u306f\u3067\u3066\u304d\u307e\u3059\u3002\u305f\u3060\u3069\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u3069\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3001\u3069\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u826f\u3044\u304b\u306f\u72b6\u6cc1\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\u305d\u306e\u9078\u629e\u306e\u6307\u6a19\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3088\u3063\u3066\u4e00\u4eba\u3067\u3082\u591a\u304f\u306e\u65b9\u306e\u6642\u9593\u3092\u4f5c\u308c\u3066\u5e78\u305b\u306b\u306a\u3063\u3066\u304f\u308c\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u6ce8\u610f\uff1a\u7b46\u8005\u306e\u77e5\u8b58\u3067\u5206\u304b\u308b\u7bc4\u56f2\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\u77e5\u898b\u306e\u3042\u308b\u8a73\u3057\u3044\u65b9\u304c\u898b\u3066\u9593\u9055\u3044\u304c\u5206\u304b\u308c\u3070\u9762\u5012\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u6307\u6458\u3057\u3066\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\u79c1\u3060\u3051\u3067\u306a\u304f\u79c1\u4ee5\u5916\u306e\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u306e\u305f\u3081\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n#WHAT\n\n\u672c\u8cea\u7684\u306b\u5927\u4e8b\u306b\u306a\u3063\u3066\u304f\u308b\u8003\u3048\u65b9\u304c\u6271\u3046\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3001\u7a2e\u985e\u3001\u5fc5\u8981\u3068\u3055\u308c\u308b\u51e6\u7406\u306b\u3088\u3063\u3066\u9078\u629e\u3059\u3079\u304d\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u78ba\u8a8d\u3059\u3079\u304d\u624b\u9806\u306f\u4e0b\u8a18\u3067\u3059\u3002\n\n- \u73fe\u72b6\u306e\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304c\u30c7\u30fc\u30bf\u69cb\u9020\u307e\u305f\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u9023\u3057\u3066\u3044\u305d\u3046\u304b\u8abf\u67fb\n- \u6271\u3046\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\u3001\u7a2e\u985e\u3092\u78ba\u8a8d\n- \u30c7\u30fc\u30bf\u69cb\u9020\u3092\u9078\u629e\n- \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u629e(\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u4f9d\u5b58\u3057\u3066\u5b9f\u88c5\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u6c7a\u307e\u308b)\n- \u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\uff08\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u307f\u5b9f\u88c5\uff09\n- \u8a08\u6e2c\n- \u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u5ea6\u5408\u3044\u306e\u6bd4\u8f03\n- \u554f\u984c\u306a\u3051\u308c\u3070\u63a1\u7528\n\n\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u306f\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306e\u89e3\u6d88\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30c7\u30fc\u30bf\u69cb\u9020\u4ee5\u5916\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308c\u3070\u305d\u306e\u90e8\u5206\u306b\u5f15\u304d\u3065\u3089\u308c\u3066\u901f\u5ea6\u304c\u843d\u3061\u307e\u3059\u3002\n\u305d\u308c\u3092\u9632\u3050\u305f\u3081\u306b\u6700\u521d\u306b\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u3054\u3068\u306e\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u5358\u7d14\u306b\u9ad8\u901f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u3082\u8a08\u6e2c\u3057\u305f\u969b\u306b\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30b9\u30ef\u30c3\u30d7\u3068\u547c\u3070\u308c\u308b\u7269\u7406\u30e1\u30e2\u30ea\u7a7a\u9593\u306b\u5165\u308a\u304d\u3089\u306a\u304b\u3063\u305f\u30c7\u30fc\u30bf\u3092HDD\u306a\u3069\u306b\u9000\u907f\u3055\u305b\u308b\u51e6\u7406\u304c\u983b\u7e41\u306b\u8d77\u3053\u308b\u3068\u767a\u751f\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u5177\u5408\u306e\u78ba\u8a8d\u306f\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u6271\u3046\u30c7\u30fc\u30bf\u306e\u898b\u308b\u3079\u304d\u6307\u6a19\n\n- \u30c7\u30fc\u30bf\u306e\u7a2e\u985e\n- \u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\uff08\u30e1\u30e2\u30ea\u3092\u5927\u91cf\u306b\u4f7f\u7528\u3057\u305d\u3046\u304b\uff09\n- \u633f\u5165\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u306e\u983b\u5ea6\n- \u691c\u7d22\u983b\u5ea6\n\n\u4e0a\u8a18\u306e\u6307\u6a19\u306b\u3088\u3063\u3066\u6271\u3046\u3079\u304d\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u6c7a\u307e\u3063\u3066\u304d\u307e\u3059\u3002\n\u633f\u5165\u30fb\u524a\u9664\u3001\u66f4\u65b0\u306f\u57fa\u672c\u7684\u306b\u30c7\u30fc\u30bf\u306e\u672b\u5c3e\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u306e\u4e2d\u9593\u90e8\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u30c7\u30fc\u30bf\u69cb\u9020\n\n- Array\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u901a\u3057\u3066\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3002\u672b\u5c3e\u306e\u30c7\u30fc\u30bf\u633f\u5165\u3001\u524a\u9664\u306f\u9ad8\u901f\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u5927\u91cf\u306e\u30e1\u30e2\u30ea\u3092\u6d88\u8cbb\u3059\u308b\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4e2d\u9593\u90e8\u5206\u3078\u306e\u30c7\u30fc\u30bf\u306e\u633f\u5165\u3001\u524a\u9664\u304c\u9045\u3044 \n- Linked List\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u3092\u3069\u306e\u90e8\u5206\u3067\u3042\u3063\u3066\u3082\u633f\u5165\u3001\u524a\u9664\u304c\u5bb9\u6613\u306a\u305f\u3081\u30ea\u30b5\u30a4\u30ba\u304c\u5bb9\u6613\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a \u30ea\u30f3\u30af\u3092\u8fbf\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u306e\u30a2\u30af\u30bb\u30b9\u304c\u9045\u3044\u3002\u6b21\u306e\u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u305d\u306e\u5206\u5927\u304d\u304f\u306a\u308b\u3002\n- Binary Tree\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u633f\u5165\u3001\u66f4\u65b0\u304cLinked List\u306e\u3088\u3046\u306b\u9ad8\u901f\u306b\u3067\u304d\u3001\u306a\u304a\u304b\u3064\u691c\u7d22\u3082\u65e9\u3044\u3002\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u6df1\u3055\u304c\u5e73\u8861\u3057\u3066\u3044\u306a\u3044\u3068\u6027\u80fd\u306b\u60aa\u5f71\u97ff\u3092\u4e0e\u3048\u308b\n- Trie\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u8f9e\u66f8\u306a\u3069\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30d1\u30bf\u30fc\u30f3\u3092\u9ad8\u901f\u306b\u6271\u3044\u305f\u3044\u5834\u5408\u306b\u4f7f\u7528\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u591a\u3044\n- Graph \n - \u30e1\u30ea\u30c3\u30c8\uff1aTree\u3084Trie\u3067\u306f\u6271\u3048\u306a\u3044\u5faa\u74b0\u578b\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u6642\u306b\u4f7f\u7528\u3002node\u3054\u3068\u306e\u30b3\u30b9\u30c8\u3092\u5272\u308a\u632f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u6700\u9069\u306a\u30eb\u30fc\u30c8\u3084\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u308b\u554f\u984c\u306b\u3082\u9069\u7528\u53ef\u80fd\u3002\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a \u8907\u96d1\u306a\u70ba\u3001\u6271\u3046\u306e\u304c\u96e3\u3057\u3044\n- Stack\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9ad8\u901f\u3002\u518d\u5e30\u7684\u306a\u51e6\u7406\u306a\u3069\u3068\u76f8\u6027\u304c\u826f\u3044\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u4f55\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068Stack Over Flow\u306e\u3088\u3046\u306a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u8d77\u3053\u3059\u3002\u4e2d\u9593\u306e\u30c7\u30fc\u30bf\u306b\u306f\u30a2\u30af\u30bb\u30b9\u4e0d\u53ef\n- Queue\n - \u30e1\u30ea\u30c3\u30c8\uff1a\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306f\u9ad8\u901f\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u5165\u51fa\u529b\u3084WEB\u304b\u3089\u306e\u30c7\u30fc\u30bf\u5165\u51fa\u529b\u306a\u3069\u3068\u76f8\u6027\u304c\u826f\u3044\n - \u30c7\u30e1\u30ea\u30c3\u30c8\uff1a\u30b9\u30bf\u30c3\u30af\u3068\u540c\u69d8\u3067\u4f55\u3082\u8003\u3048\u305a\u306b\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u8d77\u3053\u3059\u3002\u4e2d\u9593\u306e\u30c7\u30fc\u30bf\u306b\u306f\u30a2\u30af\u30bb\u30b9\u4e0d\u53ef\n\n|\u30c7\u30fc\u30bf\u69cb\u9020 | \u30c7\u30fc\u30bf\u306e\u7a2e\u985e | \u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba |\u4e2d\u9593\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u633f\u5165\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u306e\u983b\u5ea6 |\u4e2d\u9593\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u691c\u7d22\u983b\u5ea6 |\n|:-----------|------------:|------------:|------------:|------------:|:------------:|\n| Array | \u30d7\u30ed\u30b0\u30e9\u30e0\u5185 | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09 |\u5c11\u306a\u3044 |\u591a\u3044 |\n| Linked List | \u30d7\u30ed\u30b0\u30e9\u30e0\u5185 | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09 |\u591a\u3044 |\u5c11\u306a\u3044 |\n| Binary Tree | \u30d7\u30ed\u30b0\u30e9\u30e0\u5185 | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09 |\u591a\u3044 |\u591a\u3044 |\n| Stack | \u30d7\u30ed\u30b0\u30e9\u30e0\u5185 | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u5c11\u306a\u3044\uff09 |\u7121\u3057 |\u7121\u3057 |\n| Queue | \u5916\u90e8\u5165\u51fa\u529b | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u4e2d\u7a0b\u5ea6\uff09 |\u7121\u3057 |\u7121\u3057 |\n| Trie | \u30d7\u30ed\u30b0\u30e9\u30e0\u5185 | \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\uff08\u5927\u304d\u3044\uff09 |\u7121\u3057 |\u7121\u3057 |\n\nGraph\u306f\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u3084\u7528\u9014\u304c\u7279\u6b8a\u306a\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u306e\u3067\u4e0a\u8a18\u306e\u6307\u6a19\u3068\u306f\u5225\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nGraph\uff1a\u98db\u884c\u6a5f\u306e\u30eb\u30fc\u30c8\u3084\u30b3\u30b9\u30c8\u8a08\u7b97\u306a\u3069\u5de1\u56de\u578b\u304b\u3064\u5404node\u9593\u306b\u30b3\u30b9\u30c8\u3092\u632f\u308a\u305f\u3044\u554f\u984c\u306b\u4f7f\u7528\n\n## \u9078\u629e\u3059\u3079\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n- \u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\n- \u4f7f\u7528\u3067\u304d\u308b\u30ea\u30bd\u30fc\u30b9\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3088\u3063\u3066\u306f\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u6069\u6075\u3092\u3046\u3051\u3089\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\n\n- \u30bd\u30fc\u30c8\u306b\u3088\u308b\u6069\u6075\u304c\u53d7\u3051\u3089\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\n - Array\n\n### \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n- Binary Tree\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n - \u6728\u69cb\u9020\u306e\u64cd\u4f5c\n- Graph\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n - \u6df1\u3055\u512a\u5148\u63a2\u7d22\n - \u5e45\u512a\u5148\u63a2\u7d22\n- Array\u306e\u4f5c\u6210\u524d\u3067\u4f7f\u7528\u3055\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c\u57fa\u672c\u7684\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\u305f\u3060\u3057\u6761\u4ef6\u306b\u3088\u3063\u3066\u306f\u4ed6\u306e\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\n- \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n   - \u4e00\u822c\u7684\u306b\u9ad8\u901f\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u305f\u3081\u4f7f\u7528\u3055\u308c\u308b\u6a5f\u4f1a\u304c\u591a\u3044 \n- \u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n   - \u4e26\u5217\u3067\u51e6\u7406\u304c\u53ef\u80fd\u306a\u305f\u3081\u3001\u30e1\u30e2\u30ea\u3068CPU\u306e\u4e26\u5217\u6570\u304c\u8c4a\u5bcc\u306a\u5834\u5408\u306b\u4f7f\u7528\u3002 \n- \u633f\u5165\u30bd\u30fc\u30c8\n   - \u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3084\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u6bd4\u3079\u3001\u30c7\u30fc\u30bf\u306e\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u5b89\u5b9a\u7684\u306b\u30bd\u30fc\u30c8\u53ef\u80fd\u3002\u4e3b\u306b\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u3084\u3059\u3067\u306b\u307b\u3068\u3093\u3069\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u306b\u4f7f\u7528 \n- \u30ab\u30a6\u30f3\u30c6\u30a3\u30f3\u30b0\u30bd\u30fc\u30c8\n   - \u30b7\u30f3\u30d7\u30eb\u304b\u3064\u9ad8\u901f\u306a\u30bd\u30fc\u30c8\u3002\u30e1\u30e2\u30ea\u304c\u8c4a\u5bcc\u3067\u6271\u3046\u30c7\u30fc\u30bf\u3068\u30de\u30c3\u30c1\u3057\u3066\u3044\u308c\u3070\u3053\u306e\u624b\u6cd5\u304c\u4e00\u756a\u826f\u3044\n\n- \u9ad8\u901f\u5316\u306e\u305f\u3081\u306e\u30c6\u30af\u30cb\u30c3\u30af\n - \u52d5\u7684\u8a08\u753b\u6cd5\n\n#HOW\n\n\u3053\u3053\u3067\u91cd\u8981\u306b\u306a\u308b\u306e\u304c\u5b9f\u969b\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u7406\u7531\u306f\u5b9f\u969b\u306b\u8a18\u8ff0\u3067\u304d\u306a\u3044\u3068\u4e2d\u8eab\u304c\u5206\u304b\u3089\u305a\u3001\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u305f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u65e9\u304f\u5e30\u308b\u305f\u3081\u306b\u3053\u306e\u624b\u9593\u3092\u60dc\u3057\u307e\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u307e\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6c4e\u7528\u6027\u304c\u9ad8\u3044\u305f\u3081\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u8a00\u8a9e\u95a2\u4fc2\u306a\u304f\u5229\u7528\u3067\u304d\u308b\u305f\u3081\u5fdc\u7528\u7bc4\u56f2\u304c\u5e83\u3044\u306e\u3082\u5229\u70b9\u3067\u3059\u3002\n\u8457\u8005\u306f\u52c9\u5f37\u306e\u305f\u3081\u306bC++\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\nArray\u306f\u7c21\u5358\u306a\u306e\u3067\u30bd\u30fc\u30c8\u3068\u5408\u308f\u305b\u3066\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n## Array\n### \u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u306e\u30dd\u30a4\u30f3\u30c8\u306f\n\n- \u4e2d\u9593\u306e\u5024\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n- \u4e2d\u9593\u306e\u5024\u3092\u5229\u7528\u3057\u30662\u3064\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n- \u305d\u308c\u3089\u3092\u6607\u9806\u306b\u3059\u308b\u305f\u3081\u306b\u4ea4\u63db\u3059\u308b\u3053\u3068\n\n```c++\nvoid Merge(int *data_array, int left, int mid, int right){\n\tint n1 = mid - left;\n\tint n2 = right - mid;\n\tint *L = new int[n1];\n\tint *R = new int[n2];\n\tfor(int i = 0; i < n1; i++){\n\t\tL[i] = data_array[left + i];\n\t}\n\tfor(int i = 0; i < n2; i++){\n\t\tR[i] = data_array[mid + i];\n\t}\n\tL[n1] = ENDNUMBER;\n\tR[n2] = ENDNUMBER;\n\tint i = 0;\n\tint j = 0;\n\tfor(int k = left; k < right - 1 ; k++){\n\t\tif(L[i] < R[j]){\n\t\t\tdata_array[k] = L[i];\n\t\t\ti = i + 1;\n\t\t}else{\n\t\t\tdata_array[k] = R[j];\n\t\t\tj = j + 1;\n\t\t}\n\t}\n}\n\nvoid merge_sort::merge_method(int *data_array, int left, int right){\n\tint mid = (left + right) / 2;\n\tif(left + 1 < right){\n\t\tmerge_method(data_array, left, mid);\n\t\tmerge_method(data_array, mid, right);\n\t\tMerge(data_array, left, mid , right);\n\t}\n}\n```\n### \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u30dd\u30a4\u30f3\u30c8\u306f\n\n- \u4e2d\u9593\u306e\u5024\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\n- \u4e2d\u9593\u306e\u5024\u306b\u8fd1\u3044\u5024\u540c\u58eb\u3092\u6bd4\u8f03\u3057\u6607\u9806\u306b\u5165\u308c\u66ff\u3048\n- \u4e2d\u9593\u306e\u5024\u3092\u5229\u7528\u3057\u3066\u518d\u5e30\u7684\u306b\u51e6\u7406\n\n```c++\nint med3(int x, int y, int z){\n\tif(x < y){\n\t\tif(y < z){\n\t\t\treturn y;\n\t\t}else {\n\t\t\tif(z < x){\n\t\t\t\treturn x;\n\t\t\t}else{\n\t\t\t\treturn z;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tif(z < y){\n\t\t\treturn y;\n\t\t}else {\n\t\t\tif(x < z){\n\t\t\t\treturn x;\n\t\t\t}else{\n\t\t\t\treturn z;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid quick::quick_method(int *data_array, int left, int right){\n\tif (left < right){\n\t\tint i = left;\n\t\tint j = right;\n\t\tint tmp;\n\t\tint piviot = med3(data_array[i], data_array[i + (j - i) / 2], data_array[j]);\n\t\twhile(1){\n\t\t\twhile (data_array[i] < piviot) i++;\n\t\t\twhile (piviot < data_array[j]) j--;\n\t\t\tif(i >= j){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttmp = data_array[i];\n\t\t\tdata_array[i] = data_array[j];\n\t\t\tdata_array[j] = tmp;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tquick_method(data_array, left, i - 1);\n\t\tquick_method(data_array, j + 1, right);\n\t}\n}\n```\n### \u633f\u5165\u30bd\u30fc\u30c8\n\n\u633f\u5165\u30bd\u30fc\u30c8\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\u7279\u306b\u30dd\u30a4\u30f3\u30c8\u306f\u306a\u3044\u3067\u3059\u3002\n\n\u914d\u5217\u4e2d\u306e\u4e00\u3064\u524d\u306e\u5024\u304c\u5927\u304d\u3051\u308c\u3070\u4ea4\u63db\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\n\n```c++\nvoid insert_sort::insert_method(int *data_array){\n\tint tmp;\n\tint j;\n\tfor(int i = 1; i < ARRAY_SIZE; i++){\n\t\ttmp = data_array[i];\n\t\tfor(j = i; j > 0 && data_array[j - 1] > tmp; j--){\n\t\t\tdata_array[j] = data_array[j - 1];\n\t\t}\n\t        data_array[j] = tmp;\n\t}\n}\n```\n\n### \u30ab\u30a6\u30f3\u30c6\u30a3\u30f3\u30b0\u30bd\u30fc\u30c8\n\n\u5404\u5024\u306e\u983b\u5ea6\u5206\u5e03\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u983b\u5ea6\u5206\u5e03\u306b\u6cbf\u3063\u3066\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nvoid counting_sort::counting_sort_method(int *sort_data){\n\tint *counting_sort_array = new int[ARRAY_SIZE];\n\n\tfor(int i = 0; i < ARRAY_SIZE; i++){\n\t\tcounting_sort_array[i] = 0;\n\t}\n\n\tfor(int i = 0; i < ARRAY_SIZE; i++){\n\t\tcounting_sort_array[sort_data[i]]++;\n\t}\n\tint output_index = 0;\n\t// counting_sort_array is zero not add data\n\tfor(int j=0;j < ARRAY_SIZE; j++){\n\t\twhile(counting_sort_array[j]--){\n\t\t\tsort_data[output_index++] = j;\n\t\t}\n\t}\n}\n```\n\n## Binary Tree\n\n\u6728\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u3066\u5404\u7a2e\u6728\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\n\n## \u6728\u69cb\u8535\u306e\u5b9a\u7fa9\n\n```cpp\nstruct node{\n\tint key_value;\n\tnode *p_left;\n\tnode *p_right;\n};\n```\n\n## \u6728\u306e\u64cd\u4f5c\n\n\u633f\u5165\u51e6\u7406\u3067\u3059\u3002\u518d\u5e30\u7684\u306a\u51e6\u7406\u306b\u3088\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u5b9f\u73fe\u3067\u304d\u308b\u306e\u304c\u6728\u306e\u5229\u70b9\u3067\u3059\u3002\n\n```cpp\nnode* binary_tree::insert(node *p_tree, int key){\n\n\tif(p_tree == NULL){\n\t\tnode *p_new_tree = new node;\n\t\tp_new_tree->key_value = key;\n\t\tp_new_tree->p_left = NULL;\n\t\tp_new_tree->p_right = NULL;\n\t\treturn p_new_tree;\n\t}\n\tif(key < p_tree->key_value){\n\t\tp_tree->p_left = insert(p_tree->p_left, key);\n\t}\n\tif(key > p_tree->key_value){\n\t\tp_tree->p_right = insert(p_tree->p_right, key);\n\t}\n\treturn p_tree;\n}\n```\n\n### \u63a2\u7d22\n\n\u691c\u7d22\u51e6\u7406\u3067\u3059\u3002\u3053\u308c\u3082Binary Tree\u3067\u4f5c\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5358\u7d14\u306a\u5b9f\u88c5\u3067\u5b9f\u73fe\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nint binary_tree::search(node *p_tree, int key){\n\tif(p_tree == NULL){\n\t\treturn NULL;\n\t}\n\tif(p_tree->key_value == key){\n\t\treturn p_tree->key_value;\n\t}\n\telse if(key < p_tree->key_value){\n\t\treturn search(p_tree->p_left, key);\n\t}else if(key > p_tree->key_value){\n\t\treturn search(p_tree->p_right, key);\n\t}\n}\n```\n\n###\u6728\u306e\u524a\u9664\n\n```cpp\nnode binary_tree::destroy_tree(node *p_tree){\n\tif(p_tree != NULL){\n\t    destroy_tree(p_tree->p_left);\n\t    destroy_tree(p_tree->p_right);\n\t\tdelete p_tree;\n\t}\n}\n``` \n\n### \u6700\u5927\u306e\u8981\u7d20\u3092\u63a2\u3059\n\n```cpp\nint binary_tree::find_max(node *p_tree){\n\tif(p_tree == NULL){\n\t\treturn NULL;\n\t}else if(p_tree->p_right == NULL){\n\t\treturn p_tree->key_value;\n\t}else{\n\t\treturn find_max(p_tree->p_right);\n\t}\n}\n```\n\n### \u6700\u5c0f\u306e\u8981\u7d20\u3092\u63a2\u3059\n\n```cpp\nint binary_tree::find_min(node *p_tree){\n\tif(p_tree == NULL){\n\t\treturn NULL;\n\t}else if(p_tree->p_left == NULL){\n\t\treturn p_tree->key_value;\n\t}else{\n\t\treturn find_max(p_tree->p_left);\n\t}\n}\n```\n\n### \u8981\u7d20\u306e\u524a\u9664\n\n\u8981\u7d20\u306e\u524a\u9664\u306f\u6728\u306e\u69cb\u9020\u3092\u4fdd\u3064\u305f\u3081\u306b\u5c11\u3057\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\n\n- \u6728\u306e\u4e2d\u306e\u8981\u7d20\u6700\u5927\u306enode\u3092\u898b\u3064\u3051\u308b\u51e6\u7406\u3092\u8a18\u8ff0\uff08\u3053\u308c\u306f\u5f8c\u307b\u3069\u5fc5\u8981\uff09\n- \u6728\u3068\u524a\u9664\u3057\u305f\u3044\u8981\u7d20\u3092\u4e0e\u3048\u308b\n\n\n```cpp\nnode* binary_tree::remove(node *p_tree, int remove_value){\n\tif(p_tree == NULL){\n\t\treturn NULL;\n\t}\n\tif(p_tree->key_value == remove_value){\n\t    if(p_tree->p_left == NULL){\n\t    \tnode *p_right_sub_tree = p_tree->p_right;\n\t    \tdelete p_tree;\n\t    \treturn p_right_sub_tree;\n\t    }\n\t    if(p_tree->p_right == NULL){\n\t    \tnode *p_left_sub_tree = p_tree->p_left;\n\t    \tdelete p_tree;\n\t    \treturn p_left_sub_tree;\n\t    }\n\t    node *p_max_node = find_max(p_tree->p_left);\n\t    p_max_node->p_left = remove_max_node(p_tree->p_left, p_max_node);\n\t    p_max_node->p_right = p_tree->p_right;\n\t    delete p_tree;\n\t    return p_max_node;\n\t}else if(p_tree->key_value < remove_value){\n\t\tremove(p_tree->p_left, remove_value);\n\t}else{\n\t\tremove(p_tree->p_right, remove_value);\n\t}\n\treturn NULL;\n}\n```\n\n## Graph\n\n### \u30b0\u30e9\u30d5\u306e\u4f5c\u6210\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3068\u5e45\u512a\u5148\u63a2\u7d22\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\n\n```cpp\nclass graph {\npublic:\n\tgraph();\n\tvirtual ~graph();\n\tgraph(int V);\n\tvoid addEdge(int v, int w);\n\tvoid depth_first_search(int v);\n\tvoid breadth_first_search(int s);\nprivate:\n\tint V;\n\tlist<int> *adj;\n\tvoid depth_first_search_util(int v, bool visited[]);\n};\n\n```\n\n\u30a8\u30c3\u30b8\u306e\u8ffd\u52a0\n\n```cpp\nvoid graph::addEdge(int v, int edge){\n\tadj[v].push_back(edge);\n}\n```\n\n\u4f5c\u6210\u3055\u308c\u305f\u30b0\u30e9\u30d5\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u6df1\u3055\u512a\u5148\u63a2\u7d22\n\n```cpp\nvoid graph::depth_first_search_util(int v, bool visited[]){\n\tvisited[v] = true;\n\tcout << v << \" \" << endl;\n\tlist<int>::iterator i;\n\tfor(i = adj[v].begin(); i != adj[v].end(); ++i){\n\t\tif(!visited[*i]){\n\t\t\tdepth_first_search_util(*i, visited);\n\t\t}\n\t}\n}\n\nvoid graph::depth_first_search(int v){\n\tbool *visited = new bool[V];\n\tfor(int i = 0; i < V; i++){\n\t\tvisited[i] = false;\n\t}\n\tfor(int i = 0; i < V; i++){\n\t    if(visited[i] == false){\n\t    \tdepth_first_search_util(i, visited);\n\t    }\n\t}\n}\n```\n\n### \u5e45\u512a\u5148\u63a2\u7d22\n\n\u5e45\u512a\u5148\u63a2\u7d22\u306e\u30dd\u30a4\u30f3\u30c8\u306fQueue\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\nQueue\u306b\u63a2\u7d22\u5e45\u5206\u306e\u5024\u3092\u5165\u308c\u3066\u3001\u9806\u306b\u691c\u7d22\u3059\u308b\u3053\u3068\u3067Queue\u306e\u6027\u8cea\u3067\u3042\u308bFirst in First out\u306b\u3088\u308a\u5e45\u512a\u5148\u63a2\u7d22\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nvoid graph::breadth_first_search(int s){\n\n\tbool *visited = new bool[V];\n\tfor(int i = 0; i < V; i++){\n\t\tvisited[i] = false;\n\t}\n\tlist<int> queue;\n\n\tvisited[s] = true;\n\tqueue.push_back(s);\n\n\tlist<int>::iterator i;\n\n\twhile(!queue.empty()){\n\t\ts = queue.front();\n\t\tcout << s << \" \" << endl;\n\t\tqueue.pop_front();\n\t\tfor(i = adj[s].begin(); i != adj[s].end(); ++i){\n\t\t\tif(!visited[*i]){\n\t\t\t\tvisited[*i] = true;\n\t\t\t\tqueue.push_back(*i);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Trie\n\n\u4eca\u56de\u5b9a\u7fa9\u3057\u305f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u30d1\u30bf\u30fc\u30f3\u6570`#define ALPHABETS 26`\n\n\nvector\u306eint\u578b\u306e\u30c7\u30fc\u30bf\u3092\u30d8\u30c3\u30c0\u30fc\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nvector<int> occurrences;\n```\n\n\u30c8\u30e9\u30a4\u6728\u306e\u633f\u5165\u51e6\u7406\u3067\u3059\u3002\n\u30c8\u30e9\u30a4\u6728\u306e\u30eb\u30fc\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\n\u767a\u751f\u56de\u6570\u3092`index`\u56de\u6570\u5206\u8ffd\u52a0\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\n```cpp\nvoid trie_tree_node::insert(char text[], int index){\n\tvector<char> word(text, text + strlen(text));\n\ttrie_tree_node *temp = this->root;\n\n\tint i = 0;\n\n\twhile(i < word.size()){\n\t\tif(temp->children[word[i] - 'a'] == NULL){\n\t\t\ttemp->children[word[i] - 'a'] = new trie_tree_node();\n\t\t\ttemp->children[word[i] - 'a']->parent = temp;\n\t\t}\n\t\ttemp = temp->children[word[i] - 'a'];\n\t\t++i;\n\t}\n\ttemp->occurrences.push_back(index);\n}\n```\n\n\u6728\u306e\u5024\u306e\u8868\u793a\u90e8\u5206\u3067\u3059\u3002\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u9806\u306b\u8ffd\u3063\u3066\u3044\u304d\u3001\u6728\u306e\u5b50\u30ce\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308c\u3070\u8868\u793a\u7528\u306e\u5217\u306b\u5b50\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u5b50\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u518d\u5e30\u7684\u306b\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u767a\u751f\u56de\u6570\u304c0\u3067\u306a\u3051\u308c\u3070\u6587\u5b57\u306e\u8868\u793a\u3068\u305d\u306e\u56de\u6570\u3092\u518d\u5e30\u7684\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n\nvoid trie_tree_node::lexicographPrint(trie_tree_node *trie_tree, vector<char> printUtilVectr){\n\tint i;\n\tbool noChild = true;\n\n\tfor(i = 0; i < ALPHABETS; i++){\n\t\tif(trie_tree->children[i] != NULL){\n\t\t\tnoChild = false;\n\t\t\tprintUtilVectr.push_back('a' + i);\n\t\t\tlexicographPrint(trie_tree->children[i], printUtilVectr);\n\t\t\tprintUtilVectr.pop_back();\n\t\t}\n\t}\n\tif (trie_tree->occurrences.size() == 0){\n\t\treturn;\n\t}else{\n\t\tfor(vector<char>::iterator itr = printUtilVectr.begin(); itr != printUtilVectr.end(); ++itr){\n\t\t\tcout << *itr;\n\t\t}\n\t\tcout << \" -> @ index \" ;\n\n\t\tfor(vector<int>::iterator counter = trie_tree->occurrences.begin(); counter != trie_tree->occurrences.end(); ++counter){\n\t\t\tcout << *counter << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\n\tprintUtilVectr.pop_back();\n}\n```\n\n\u30c8\u30e9\u30a4\u6728\u304b\u3089\u5358\u8a9e\u3092\u691c\u7d22\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\n\u691c\u7d22\u3092\u884c\u3046\u5358\u8a9e\u306e\u6700\u521d\u306e\u4f4d\u7f6e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\"apple\"\u3060\u3068a\u304c\u898b\u3064\u304b\u308c\u3070\u305d\u306e\u6587\u5b57\u304b\u3089\u5b50\u30ce\u30fc\u30c9\u3092\u3068\u3063\u3066\u304d\u3066\u6587\u5b57\u30b5\u30a4\u30ba\u304c0\u306b\u306a\u308b\u307e\u3067\u884c\u3046\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```cpp\n\ntrie_tree_node* trie_tree_node::searchWord(trie_tree_node* trie_tree_data, char *text){\n\n\tvector<char> word(text, text + strlen(text));\n\ttrie_tree_node *temp = trie_tree_data;\n\n\twhile(word.size() != 0){\n\t\tif(temp->children[word[0] - 'a'] != NULL){\n\t\t\ttemp = temp->children[word[0] - 'a'];\n\t\t\tword.erase(word.begin());\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif(word.size() == 0 && temp->occurrences.size() != 0) {\n\t\treturn temp;\n\t} else {\n\t\treturn NULL;\n\t}\n}\n```\n\n\u5358\u8a9e\u306e\u524a\u9664\u51e6\u7406\u3067\u3059\u3002\n\u524a\u9664\u5bfe\u8c61\u306e\u5358\u8a9e\u304c\u3042\u308b\u30ce\u30fc\u30c9\u3092\u63a2\u3057\u3066\u304d\u307e\u3059\u3002\n\u305d\u306e\u30ce\u30fc\u30c9\u304b\u3089\u767a\u751f\u56de\u6570\u5206\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u5b50\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3082\u524a\u9664\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n```cpp\n\nvoid trie_tree_node::removeWord(trie_tree_node *trie_tree_data, char *word){\n\ttrie_tree_node *temp = searchWord(trie_tree_data, word);\n\tif(temp == NULL){\n\t\treturn;\n\t}\n\n\ttemp->occurrences.pop_back();\n\n\tbool noChild = true;\n\n\tint childCount = 0;\n\tint i;\n\n\tfor(i = 0; i < ALPHABETS; ++i){\n\t\tif(temp->children[i] != NULL){\n\t\t\tnoChild = false;\n\t\t\t++childCount;\n\t\t}\n\t}\n\tif(!noChild){\n\t\treturn;\n\t}\n\n\ttrie_tree_node *traverse;\n\n\twhile(temp->occurrences.size() == 0 && temp->parent != NULL && childCount < 2){\n\t\ttraverse = temp->parent;\n\n\t\tfor(i = 0; i < ALPHABETS; ++i){\n\t\t\tif(temp == traverse->children[i]){\n\t\t\t\ttraverse->children[i] = NULL;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t    temp = traverse;\n\n\t    for(i = 0; i < ALPHABETS; ++i){\n\t    \tif(temp->children[i] != NULL){\n\t    \t\t++childCount;\n\t    \t}\n\t    }\n\t}\n}\n\n```\n\n## \u52d5\u7684\u8a08\u753b\u6cd5\n\n\u3042\u3089\u304b\u3058\u3081\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u518d\u5229\u7528\u3057\u3066\u52b9\u7387\u826f\u304f\u89e3\u304f\u624b\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nint dynamic_programing::lis_bottom_up(int arr[], int n){\n\tint i, j, max = 0;\n\tint *lis = new int[n]();\n\n\tfor(i = 0; i < n; i++){\n\t\tlis[i] = 1;\n\t}\n\n\tfor(int i = 1; i < n; i++){\n\t    for(int j = 0; j < i; j++){\n\t    \tif( arr[i] > arr[j] && lis[i] < lis[j] + 1){\n\t    \t\tlis[i] = lis[j] + 1;\n\t    \t}\n\t    }\n\t}\n\n\tfor(int i = 0; i < n; i++){\n\t\tif(max < lis[i]){\n\t\t\tmax = lis[i];\n\t\t}\n\t}\n\n\tdelete lis;\n\n\treturn max;\n}\n```\n\n## \u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\n\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/SnowMasaya/C_plus_plus_algorithm_Study/tree/master/data_structure_algorithm\n\n# \u30ea\u30bd\u30fc\u30b9\u306e\u8a08\u6e2c\u65b9\u6cd5\n\n`time`\u30b3\u30de\u30f3\u30c9\u3067\u5358\u7d14\u306a\u5b9f\u884c\u901f\u5ea6\u306f\u56f3\u308c\u307e\u3059\u3002\n[dstat](http://dag.wiee.rs/home-made/dstat/)\u30b3\u30de\u30f3\u30c9\u3067\u3042\u308c\u3070\u30ea\u30bd\u30fc\u30b9\u306e\u6d88\u8cbb\u91cf\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u53f3\u304b\u3089cpu\u306e\u4f7f\u7528\u91cf\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIO\u3001\u30c7\u30a3\u30b9\u30af\u306eIO\u3001\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u304c\u628a\u63e1\u3067\u304d\u307e\u3059\u3002\n\n![Screen Shot 2016-12-26 at 6.13.24 AM.png](https://qiita-image-store.s3.amazonaws.com/0/10496/cee0f00a-5283-d055-e994-661a712ce1e6.png)\n\n#\u6ce8\u610f\u70b9\n\n\u5927\u4e8b\u306a\u306e\u306f\u81ea\u5206\u306e\u74b0\u5883\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u8a08\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u672c\u756a\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u8a00\u3048\u307e\u3059\u3002\u672c\u756a\u74b0\u5883\u3067\u8a66\u3059\u5834\u5408\u306b\u306f\u4ed6\u306e\u8981\u56e0\u304c\u7d61\u3093\u3067\u304f\u308b\u3068\u601d\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n#\u307e\u3068\u3081\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5927\u4e8b\u3060\u3068\u5206\u304b\u3063\u3061\u3083\u3044\u308b\u3051\u3069\u624b\u3092\u51fa\u3057\u3066\u3044\u306a\u3044\u30fb\u30fb\u30fb\n\u305d\u3093\u306a\u3042\u306a\u305f\u3082\u662f\u975e\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u81ea\u5206\u306e\u5927\u5207\u306a\u6642\u9593\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\n\n\u3082\u3063\u3068\u6df1\u304f\u3084\u308a\u305f\u3044\u65b9\u306f\u4e0b\u8a18\u304c\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\n\n[GeeksforGeeks A computer science portal for geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)\n\n# \u53c2\u8003\n\n[Jumping into C++](https://www.amazon.com/Jumping-into-C-Alex-Allain/dp/0988927802)\n[\u30bd\u30fc\u30c8 ](https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%83%88#.E3.82.BD.E3.83.BC.E3.83.88.E3.82.A2.E3.83.AB.E3.82.B4.E3.83.AA.E3.82.BA.E3.83.A0.E3.81.AE.E5.88.86.E9.A1.9E)\n[\u30c8\u30e9\u30a4\u6728 ](https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8#.E5.88.A9.E7.82.B9.E3.81.A8.E6.AC.A0.E7.82.B9.EF.BC.882.E5.88.86.E6.8E.A2.E7.B4.A2.E6.9C.A8.E3.81.A8.E3.81.AE.E6.AF.94.E8.BC.83.EF.BC.89)\n[Data Science Tutorials](http://www.topcoder.com/community/data-science/data-science-tutorials/)\n[Introduction to Graphs and Their Data Structures: Section 1](https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-1/)\n[GeeksforGeeks A computer science portal for geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)\n[Trie Tree Implementation](http://theoryofprogramming.com/2015/01/16/trie-tree-implementation/)\n", "tags": ["\u30c7\u30fc\u30bf\u69cb\u9020", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}