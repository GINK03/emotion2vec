{"tags": ["PHP", "\u6b63\u898f\u8868\u73fe"], "context": " More than 1 year has passed since last update.\n\n\u6b63\u898f\u8868\u73fe\nPascalCase, camelCase, snake_case \u3068\u304b\u3044\u308d\u3044\u308d\u3042\u308b\u3051\u3069\u4e00\u62ec\u3057\u3066\u3069\u308c\u304b\u306b\u63c3\u3048\u305f\u3044\u306a\u30fc\u3063\u3066\u3068\u304d\u306b\u4f7f\u3048\u308b\u6b63\u898f\u8868\u73fe\u3067\u3059\u3002\n/[A-Z0-9][^A-Z0-9_]*+|(?:\\A|(?<=_))[^A-Z0-9_]++|\\A\\z/\n\n\n\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\n\n\u30af\u30e9\u30b9\u5b9a\u7fa9\nclass CaseUtil {\n\n    public static function pascalize($string) {\n        return implode('', array_map('ucfirst', self::parse($string)));\n    }\n\n    public static function camelize($string) {\n        return lcfirst(self::pascalize($string));\n    }\n\n    public static function snakify($string) {\n        return implode('_', array_map('lcfirst', self::parse($string)));\n    }\n\n    private static function parse($string) {\n        preg_match_all(\n            '/[A-Z0-9][^A-Z0-9_]*+|(?:\\A|(?<=_))[^A-Z0-9_]++|\\A\\z/',\n            $string,\n            $matches\n        );\n        return $matches[0];\n    }\n\n}\n\n\n\u30c6\u30b9\u30c8\n\u666e\u6bb5\u30c6\u30b9\u30c8\u66f8\u304b\u306a\u3044\u30af\u30ba\u30d7\u30ed\u30b0\u30e9\u30de\u3060\u3051\u3069PHP\u30cd\u30a4\u30c6\u30a3\u30d6\u306e assert \u95a2\u6570\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002PHPUnit\u5c0e\u5165\u3081\u3093\u3069\u304f\u3055\u304f\u3066\n$tests = array(\n    'pascalize' => array(\n        'SampleMethodTest'          => 'SampleMethodTest',\n        'sampleMethodTest'          => 'SampleMethodTest',\n        'sample_method_test'        => 'SampleMethodTest',\n        'Sample_Method_Test'        => 'SampleMethodTest',\n        'SampleMethod_Test'         => 'SampleMethodTest',\n        '_sampleMethod_____Test___' => 'SampleMethodTest',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'A\u3042I\u3044U\u3046E\u3048O\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n    'camelize' => array(\n        'SampleMethodTest'          => 'sampleMethodTest',\n        'sampleMethodTest'          => 'sampleMethodTest',\n        'sample_method_test'        => 'sampleMethodTest',\n        'Sample_Method_Test'        => 'sampleMethodTest',\n        'SampleMethod_Test'         => 'sampleMethodTest',\n        '_sampleMethod_____Test___' => 'sampleMethodTest',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'a\u3042I\u3044U\u3046E\u3048O\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n    'snakify' => array(\n        'SampleMethodTest'          => 'sample_method_test',\n        'sampleMethodTest'          => 'sample_method_test',\n        'sample_method_test'        => 'sample_method_test',\n        'Sample_Method_Test'        => 'sample_method_test',\n        'SampleMethod_Test'         => 'sample_method_test',\n        '_sampleMethod_____Test___' => 'sample_method_test',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'a\u3042_i\u3044_u\u3046_e\u3048_o\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n);\n\nforeach ($tests as $func => $group) {\n    foreach ($group as $from => $to) {\n        assert(\"CaseUtil::$func('$from') === '$to'\");\n    }\n}\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u5931\u6557\u3057\u305f\u5834\u6240\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u5909\u6570\u5c55\u958b\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\u5931\u6557\u3057\u306a\u3044\u3051\u3069\u3002\n# \u6b63\u898f\u8868\u73fe\n\n*PascalCase*, *camelCase*, *snake_case* \u3068\u304b\u3044\u308d\u3044\u308d\u3042\u308b\u3051\u3069\u4e00\u62ec\u3057\u3066\u3069\u308c\u304b\u306b\u63c3\u3048\u305f\u3044\u306a\u30fc\u3063\u3066\u3068\u304d\u306b\u4f7f\u3048\u308b\u6b63\u898f\u8868\u73fe\u3067\u3059\u3002\n\n```ruby\n/[A-Z0-9][^A-Z0-9_]*+|(?:\\A|(?<=_))[^A-Z0-9_]++|\\A\\z/\n```\n\n# \u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\n\n## \u30af\u30e9\u30b9\u5b9a\u7fa9\n\n```php\nclass CaseUtil {\n \n    public static function pascalize($string) {\n        return implode('', array_map('ucfirst', self::parse($string)));\n    }\n \n    public static function camelize($string) {\n        return lcfirst(self::pascalize($string));\n    }\n \n    public static function snakify($string) {\n        return implode('_', array_map('lcfirst', self::parse($string)));\n    }\n \n    private static function parse($string) {\n        preg_match_all(\n            '/[A-Z0-9][^A-Z0-9_]*+|(?:\\A|(?<=_))[^A-Z0-9_]++|\\A\\z/',\n            $string,\n            $matches\n        );\n        return $matches[0];\n    }\n \n}\n```\n\n## \u30c6\u30b9\u30c8\n\n\u666e\u6bb5\u30c6\u30b9\u30c8\u66f8\u304b\u306a\u3044\u30af\u30ba\u30d7\u30ed\u30b0\u30e9\u30de\u3060\u3051\u3069PHP\u30cd\u30a4\u30c6\u30a3\u30d6\u306e `assert` \u95a2\u6570\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002<del>PHPUnit\u5c0e\u5165\u3081\u3093\u3069\u304f\u3055\u304f\u3066</del>\n\n```php\n$tests = array(\n    'pascalize' => array(\n        'SampleMethodTest'          => 'SampleMethodTest',\n        'sampleMethodTest'          => 'SampleMethodTest',\n        'sample_method_test'        => 'SampleMethodTest',\n        'Sample_Method_Test'        => 'SampleMethodTest',\n        'SampleMethod_Test'         => 'SampleMethodTest',\n        '_sampleMethod_____Test___' => 'SampleMethodTest',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'A\u3042I\u3044U\u3046E\u3048O\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n    'camelize' => array(\n        'SampleMethodTest'          => 'sampleMethodTest',\n        'sampleMethodTest'          => 'sampleMethodTest',\n        'sample_method_test'        => 'sampleMethodTest',\n        'Sample_Method_Test'        => 'sampleMethodTest',\n        'SampleMethod_Test'         => 'sampleMethodTest',\n        '_sampleMethod_____Test___' => 'sampleMethodTest',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'a\u3042I\u3044U\u3046E\u3048O\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n    'snakify' => array(\n        'SampleMethodTest'          => 'sample_method_test',\n        'sampleMethodTest'          => 'sample_method_test',\n        'sample_method_test'        => 'sample_method_test',\n        'Sample_Method_Test'        => 'sample_method_test',\n        'SampleMethod_Test'         => 'sample_method_test',\n        '_sampleMethod_____Test___' => 'sample_method_test',\n        'A\u3042I\u3044U\u3046E\u3048O\u304a'            => 'a\u3042_i\u3044_u\u3046_e\u3048_o\u304a',\n        '\u3042\u3044\u3046\u3048\u304a'                 => '\u3042\u3044\u3046\u3048\u304a',\n        '_'                         => '',\n        ''                          => '',\n    ),\n);\n \nforeach ($tests as $func => $group) {\n    foreach ($group as $from => $to) {\n        assert(\"CaseUtil::$func('$from') === '$to'\");\n    }\n}\n```\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u5931\u6557\u3057\u305f\u5834\u6240\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u5909\u6570\u5c55\u958b\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\u5931\u6557\u3057\u306a\u3044\u3051\u3069\u3002"}