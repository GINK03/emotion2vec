{"context": "\n\n\u306f\u3058\u3081\u306b\nKeras\u306fTheano\uff0cTensorFlow\u30d9\u30fc\u30b9\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0e\u5927\u307e\u304b\u306a\u4f7f\u3044\u65b9\u306f\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u306e\u3067\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0eKeras\u306b\u306f\u3044\u304f\u3064\u304b\u4fbf\u5229\u306acallback\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff0cmodel\u3084parameter\u3092\u66f8\u304d\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3084TensorBoard\u3078\u306e\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u516c\u5f0f\u30b5\u30a4\u30c8\uff09\uff0e\u4eca\u56de\u306f\u305d\u308c\u3089\u306ecallback\u3092\uff0c\u5b9f\u969b\u306b\u8a66\u3057\u306a\u304c\u3089\u307f\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n1. \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4f5c\u6210\nes_cb = keras.callbacks.EarlyStopping(monitor='val_loss', patience=0, verbose=0, mode='auto')\ntb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n\n\u307e\u305a\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u6b21\u8aac\u3067\u7c21\u5358\u306b\u89e3\u8aac\u3057\u307e\u3059\u304c\uff0cKeras\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f55\u7a2e\u985e\u304b\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4e0a\u306e\u4f8b\u3067\u306f\uff0c\u5b66\u7fd2\u304c\u53ce\u675f\u3057\u305f\u969b\u306b\u9014\u4e2d\u3067\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\u7528\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\uff0cTensorFlow\u306eTensorBoard\u306b\u66f8\u304d\u51fa\u3059\u7528\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\uff0e\n\n2. \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306efit()\u3078\u306e\u8a2d\u5b9a\n1.\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306f\uff0cmodel.fit()\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\uff0c\u4e0b\u8a18\u306e\u3088\u3046\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\nmodel.fit(X_train, Y_train, batch_size=128, nb_epoch=20, verbose=0, validation_data=(X_test, Y_test), callbacks=[es_cb, tb_cb])\n\ncollbacks\u306b\uff0c\u767b\u9332\u3057\u305f\u3044\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u914d\u5217\u5f62\u5f0f\u3067\u6e21\u3057\u307e\u3059\uff0e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u547c\u3070\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u95a2\u6570\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\uff0e\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u7a2e\u985e\n\nEarlyStopping\n\u5b66\u7fd2\u30eb\u30fc\u30d7\u306b\u53ce\u675f\u5224\u5b9a\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u76e3\u8996\u3059\u308b\u5024\u3092\u8a2d\u5b9a\u3057\uff0c\u305d\u308c\u304c\u53ce\u675f\u3057\u305f\u3089\u81ea\u52d5\u7684\u306b\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\uff0e\nkeras.callbacks.EarlyStopping(monitor='val_loss', patience=0, verbose=0, mode='auto')\n\n\n\n\narguments\ndescription\n\n\n\n\nmonitor\n\u76e3\u8996\u5024\u6307\u5b9a\uff0e\u4f8b\u3048\u3070\uff0cmonitor='val_loss'\n\n\npatience\n\u30eb\u30fc\u30d7\u306e\u6700\u4f4e\u6570\n\n\nverbose\n\u4fdd\u5b58\u6642\u306b\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u51fa\u3059\u304b\u6307\u5b9a\uff0e{0, 1}\n\n\nmode\n\u4e0a\u9650\uff0c\u4e0b\u9650\u3069\u3061\u3089\u306e\u5074\u306b\u53ce\u675f\u3057\u305f\u5834\u5408\u306b\u53ce\u675f\u5224\u5b9a\u3092\u51fa\u3059\u304b\u306e\u898f\u5b9a\uff0e{auto, min, max}\n\n\n\n\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b66\u7fd2\u30eb\u30fc\u30d7\u9014\u4e2d\u3067\u3042\u3063\u3066\u3082\u53ce\u675f\u5224\u5b9a\u304c\u304b\u304b\u308a\uff0c\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u4e0b\u8a18\u306e\u8868\u793a\u306fverbose=1\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u5834\u5408)\uff0e\nEpoch 5/15\n3325/3325 [==============================] - 23s - loss: 0.0138 - val_loss: 0.0070\nEpoch 6/15\n3000/3325 [==========================>...] - ETA: 2s - loss: 0.0088\nEpoch 00005: early stopping\n3325/3325 [==============================] - 25s - loss: 0.0087 - val_loss: 0.0089\n\n\nTensorBoard\nTensorFlow\u306e\u53ef\u8996\u5316\u30c4\u30fc\u30eb\u3067\u3042\u308bTensorboard\u3092\u4f7f\u3046\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\uff0e\u5b66\u7fd2\u306e\u76f4\u524d\u3068\u6bceepoch\u306e\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\nkeras.callbacks.TensorBoard(log_dir='./logs', histogram_freq=0, write_graph=True)\n\n\n\n\narguments\ndescription\n\n\n\n\nlog_dir\nlog\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6307\u5b9a\n\n\nhistogram_freq\nTensorboard\u306ehistogram\u7528\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u983b\u5ea6\u306e\u6307\u5b9a\uff0ehistogram_freq=1\u306e\u5834\u5408\u306f\u6bceepoch\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b\n\n\nwrite_graph\n\u30e2\u30c7\u30eb\u306e\u30b0\u30e9\u30d5\u3092\u51fa\u529b\u3059\u308b\u304b\u5426\u304b\u306e\u6307\u5b9a\n\n\n\n\u88cf\u3067\u306f\uff0c\u5b66\u7fd2\u306e\u76f4\u524d\u306btf.merge_all_summaries\u3068tf.train.SummaryWriter\u304c\u547c\u3070\u308c\uff0c\u6bceepoch\u306e\u7d42\u308f\u308a\u306badd_summary\u304c\u547c\u3070\u308c\u3066log\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\uff0eTensorBoard\u306blog\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306b\u306f\uff0ckeras.backend.tensorflow_backend\u3092\u5229\u7528\u3057\u3066\u660e\u793a\u7684\u306btensorflow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u306e\u4f8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\nModelCheckpoint\nKeras\u306b\u304a\u3051\u308b\uff0cmodel\uff0cparameter\u306e\u4fdd\u5b58\uff0c\u8aad\u307f\u8fbc\u307f\u306fjson, yaml\u5f62\u5f0f\u3067\u884c\u3044\u307e\u3059\uff0e\nmodel\u306e\u4fdd\u5b58\uff0c\u8aad\u307f\u8fbc\u307f\u306fmodel.to_json()/model.to_yaml()\uff0cmodel_from_json()/model_from_yaml()\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\nfrom keras.models import Sequential, model_from_json\n\njson_string = model.to_json()\nmodel = model_from_json(json_string)\n\n\u5b66\u7fd2\u3057\u305fParameter\u306e\u4fdd\u5b58\uff06\u8aad\u307f\u8fbc\u307f\u306f\uff0csave_weights/load_weights\u3092\u4f7f\u7528\u3057\u307e\u3059(h5py\u304c\u5fc5\u8981)\uff0e\nmodel.save_weights('param.hdf5')\nmodel.load_weights('param.hdf5')\n\nParameter\u306e\u4fdd\u5b58\u306b\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306fModelCheckpoint\u3067\u3059\uff0e \u3053\u306e\u95a2\u6570\u306f\u6bceepoch\u306e\u7d42\u308f\u308a\u3067\u547c\u3070\u308c\u307e\u3059\n\n\n\narguments\ndescription\n\n\n\n\nfilepath\n\u4fdd\u5b58\u30d5\u30a1\u30a4\u30eb\u540d\n\n\nmonitor\n\u76e3\u8996\u5024\u6307\u5b9a\uff0e\u4f8b\u3048\u3070\uff0cmonitor='val_loss'\n\n\nverbose\n\u4fdd\u5b58\u6642\u306b\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u51fa\u3059\u304b\u6307\u5b9a\uff0e{0, 1}\n\n\nsave_best_only\n\u7cbe\u5ea6\u304c\u3088\u304f\u306a\u3063\u305f\u6642\u3060\u3051\u4fdd\u5b58\u3059\u308b\u304b\u3069\u3046\u304b\u6307\u5b9a\uff0eFalse\u306e\u5834\u5408\u306f\u6bceepoch\u4fdd\u5b58\uff0e\n\n\nmode \u4e0a\u9650\uff0c\u4e0b\u9650\u3069\u3061\u3089\u306e\u5074\u306b\u53ce\u675f\u3057\u305f\u5834\u5408\u306b\u53ce\u675f\u5224\u5b9a\u3092\u51fa\u3059\u304b\u306e\u898f\u5b9a\uff0e{auto, min, max}\n\n\n\n\nfilepath\u304c\u540c\u3058\u540d\u524d\u5834\u5408\u4e0a\u66f8\u304d\u3055\u308c\u308b\u306e\u3067\uff0c\u540d\u524d\u3092\u5909\u3048\u308b\u305f\u3081\u306b\u6307\u5b9a\u3057\u305f\u5909\u6570\u306e\u5024\u3092\u81ea\u52d5\u5165\u529b\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u6307\u5b9a\u3067\u304d\u308b\u5909\u6570\u306f\u3001epoch, loss, acc, val_loss, val_acc\u3067\u3059\uff0e\n\u4f8b\u3048\u3070filepath\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u305d\u306e\u6642\u306e\u5024\u3092\u81ea\u52d5\u3067\u5165\u308c\u3066\u304f\u308c\u307e\u3059\uff0e\nfpath = 'weights.{epoch:02d}-{loss:.2f}-{acc:.2f}-{val_loss:.2f}-{val_acc:.2f}.hdf5'\ncp_cb = keras.callbacks.ModelCheckpoint(filepath = fpath ), monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n\n\nLearningRateScheduler\n\u5b66\u7fd2\u4fc2\u6570\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u4f8b\u3048\u3070\uff0c\nstart = 0.03\nstop = 0.001\nnb_epoch = 1000\nlearning_rates = np.linspace(start, stop, nb_epoch)\n\nlr_cb = keras.callbacks.LearningRateScheduler(lambda epoch: float(learning_rates[epoch]))\n\n\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0cepoch\u306b\u5fdc\u3058\u3066\u5b66\u7fd2\u4fc2\u6570\u3092\u5909\u52d5\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u308b\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u969b\u306bRNN\u306bsin\u6ce2\u3092\u5b66\u7fd2\u3055\u305b\u308b\u30b5\u30f3\u30d7\u30eb\u4e0a\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\uff0e\u30b3\u30fc\u30c9\u81ea\u4f53\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u307e\u305a\uff0c\u5b66\u7fd2\uff0c\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\uff0e\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\nrandom.seed(0)\nrandom_factor = 0.05\nsteps_per_cycle = 80\nnumber_of_cycles = 50\n\ndf = pd.DataFrame(np.arange(steps_per_cycle * number_of_cycles + 1), columns=[\"t\"])\ndf[\"sin_t\"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)+ random.uniform(-1.0, +1.0) * random_factor))\n(X_train, y_train), (X_test, y_test) = train_test_split(df[[\"sin_t\"]], n_prev =length_of_sequences)  \n\n\u7d9a\u3044\u3066\uff0ckeras\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\uff0c\u5b66\u7fd2\u3092\u56de\u3057\u307e\u3059\uff0e\nfrom keras.models import Sequential  \nfrom keras.layers.core import Dense, Activation  \nfrom keras.layers.recurrent import LSTM\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\nfrom keras.callbacks import EarlyStopping, TensorBoard, ModelCheckpoint\nimport os\n\nin_out_neurons = 1\nhidden_neurons = 300\nlength_of_sequences = 100\n\nold_session = KTF.get_session()\n\nwith tf.Graph().as_default():\n    session = tf.Session('')\n    KTF.set_session(session)\n    KTF.set_learning_phase(1)\n    model = Sequential()  \n    with tf.name_scope(\"inference\") as scope:\n        model.add(LSTM(hidden_neurons, input_shape=(length_of_sequences, in_out_neurons), return_sequences=False))  \n        model.add(Dense(in_out_neurons))  \n        model.add(Activation(\"linear\"))       \n    model.summary()\n    fpath = './tensorlog/weights.{epoch:02d}-{loss:.2f}-{val_loss:.2f}.hdf5'\n    cp_cb = ModelCheckpoint(filepath = fpath, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n    es_cb = EarlyStopping(monitor='val_loss', patience=2, verbose=1, mode='auto')\n    tb_cb = TensorBoard(log_dir=\"./tensorlog\", histogram_freq=1)\n    model.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\",  metrics=['accuracy'])  \n    model.fit(X_train, y_train, batch_size=600, nb_epoch=10, validation_split=0.05, verbose=1, callbacks=[cp_cb, es_cb, tb_cb]) \njson_string = model.to_json()\nopen(os.path.join(f_model,'./tensorlog/rnn_model.json'), 'w').write(json_string)\nKTF.set_session(old_session)\n\n\u5404\u7a2e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\uff0cfit\u95a2\u6570\u306ecallbacks\u306b\u307e\u3068\u3081\u3066\u767b\u9332\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff0ctensorboard\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7528\u3044\u308b\u969b\u306f\uff0ctf.Session('')\u3067\u660e\u793a\u7684\u306btensorflow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\uff0cset_session\u95a2\u6570\u306b\u3088\u308akeras\u5074\u306b\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4ee5\u4e0a\u306e\u51e6\u7406\u306b\u3088\u3063\u3066\uff0c./tensorlog\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\uff0cweights.01-0.02-0.00.hdf5\u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30ed\u30b0\u7b49\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff0e\n\n\u304a\u308f\u308a\u306b\n\u4eca\u56de\u306fKeras\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u7d39\u4ecb\u3057\uff0c\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u547c\u3073\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u7b49\u3092\u3055\u3089\u306b\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\uff0c\u81ea\u524d\u3067\u95a2\u6570\u3092\u898f\u5b9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n## \u306f\u3058\u3081\u306b\n\n[Keras](http://keras.io/)\u306fTheano\uff0cTensorFlow\u30d9\u30fc\u30b9\u306e\u6df1\u5c64\u5b66\u7fd2\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0e\u5927\u307e\u304b\u306a\u4f7f\u3044\u65b9\u306f[\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f](http://qiita.com/yukiB/items/5d5b202af86e3c587843)\u306e\u3067\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\uff0eKeras\u306b\u306f\u3044\u304f\u3064\u304b\u4fbf\u5229\u306acallback\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\uff0cmodel\u3084parameter\u3092\u66f8\u304d\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3084[TensorBoard]()\u3078\u306e\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08[\u516c\u5f0f\u30b5\u30a4\u30c8](http://keras.io/callbacks/)\uff09\uff0e\u4eca\u56de\u306f\u305d\u308c\u3089\u306ecallback\u3092\uff0c\u5b9f\u969b\u306b\u8a66\u3057\u306a\u304c\u3089\u307f\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\n\n### 1. \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4f5c\u6210\n\n```py\nes_cb = keras.callbacks.EarlyStopping(monitor='val_loss', patience=0, verbose=0, mode='auto')\ntb_cb = keras.callbacks.TensorBoard(log_dir=log_filepath, histogram_freq=1)\n```\n\n\u307e\u305a\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u6b21\u8aac\u3067\u7c21\u5358\u306b\u89e3\u8aac\u3057\u307e\u3059\u304c\uff0cKeras\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f55\u7a2e\u985e\u304b\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4e0a\u306e\u4f8b\u3067\u306f\uff0c\u5b66\u7fd2\u304c\u53ce\u675f\u3057\u305f\u969b\u306b\u9014\u4e2d\u3067\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\u7528\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\uff0cTensorFlow\u306eTensorBoard\u306b\u66f8\u304d\u51fa\u3059\u7528\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\uff0e\n\n### 2. \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306efit()\u3078\u306e\u8a2d\u5b9a\n\n1.\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306f\uff0cmodel.fit()\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\uff0c\u4e0b\u8a18\u306e\u3088\u3046\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\n\n```py\nmodel.fit(X_train, Y_train, batch_size=128, nb_epoch=20, verbose=0, validation_data=(X_test, Y_test), callbacks=[es_cb, tb_cb])\n```\n\ncollbacks\u306b\uff0c\u767b\u9332\u3057\u305f\u3044\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u914d\u5217\u5f62\u5f0f\u3067\u6e21\u3057\u307e\u3059\uff0e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u547c\u3070\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u95a2\u6570\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\uff0e\n\n## \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u7a2e\u985e\n\n### EarlyStopping\n\n\u5b66\u7fd2\u30eb\u30fc\u30d7\u306b\u53ce\u675f\u5224\u5b9a\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u76e3\u8996\u3059\u308b\u5024\u3092\u8a2d\u5b9a\u3057\uff0c\u305d\u308c\u304c\u53ce\u675f\u3057\u305f\u3089\u81ea\u52d5\u7684\u306b\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```py\nkeras.callbacks.EarlyStopping(monitor='val_loss', patience=0, verbose=0, mode='auto')\n```\n\n| arguments | description                                    | \n|-----------|------------------------------------------------| \n| monitor   | \u76e3\u8996\u5024\u6307\u5b9a\uff0e\u4f8b\u3048\u3070\uff0cmonitor='val_loss'                   | \n| patience  | \u30eb\u30fc\u30d7\u306e\u6700\u4f4e\u6570                                        | \n| verbose   | \u4fdd\u5b58\u6642\u306b\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u51fa\u3059\u304b\u6307\u5b9a\uff0e{0, 1}                     | \n| mode      | \u4e0a\u9650\uff0c\u4e0b\u9650\u3069\u3061\u3089\u306e\u5074\u306b\u53ce\u675f\u3057\u305f\u5834\u5408\u306b\u53ce\u675f\u5224\u5b9a\u3092\u51fa\u3059\u304b\u306e\u898f\u5b9a\uff0e{auto, min, max} | \n\n\n\u4e0a\u8a18\u306e\u8a2d\u5b9a\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b66\u7fd2\u30eb\u30fc\u30d7\u9014\u4e2d\u3067\u3042\u3063\u3066\u3082\u53ce\u675f\u5224\u5b9a\u304c\u304b\u304b\u308a\uff0c\u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u4e0b\u8a18\u306e\u8868\u793a\u306fverbose=1\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u5834\u5408)\uff0e\n\n```\nEpoch 5/15\n3325/3325 [==============================] - 23s - loss: 0.0138 - val_loss: 0.0070\nEpoch 6/15\n3000/3325 [==========================>...] - ETA: 2s - loss: 0.0088\nEpoch 00005: early stopping\n3325/3325 [==============================] - 25s - loss: 0.0087 - val_loss: 0.0089\n```\n\n### TensorBoard\n\nTensorFlow\u306e\u53ef\u8996\u5316\u30c4\u30fc\u30eb\u3067\u3042\u308bTensorboard\u3092\u4f7f\u3046\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\uff0e\u5b66\u7fd2\u306e\u76f4\u524d\u3068\u6bceepoch\u306e\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\n\n```py\nkeras.callbacks.TensorBoard(log_dir='./logs', histogram_freq=0, write_graph=True)\n```\n| arguments      | description                                                             | \n|----------------|-------------------------------------------------------------------------| \n| log_dir        | log\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6307\u5b9a                                                   | \n| histogram_freq | Tensorboard\u306ehistogram\u7528\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u983b\u5ea6\u306e\u6307\u5b9a\uff0ehistogram_freq=1\u306e\u5834\u5408\u306f\u6bceepoch\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b | \n| write_graph    | \u30e2\u30c7\u30eb\u306e\u30b0\u30e9\u30d5\u3092\u51fa\u529b\u3059\u308b\u304b\u5426\u304b\u306e\u6307\u5b9a                                                      | \n\n\n\u88cf\u3067\u306f\uff0c\u5b66\u7fd2\u306e\u76f4\u524d\u306b`tf.merge_all_summaries`\u3068`tf.train.SummaryWriter`\u304c\u547c\u3070\u308c\uff0c\u6bceepoch\u306e\u7d42\u308f\u308a\u306b`add_summary`\u304c\u547c\u3070\u308c\u3066log\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\uff0e**TensorBoard\u306blog\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306b\u306f\uff0c`keras.backend.tensorflow_backend`\u3092\u5229\u7528\u3057\u3066\u660e\u793a\u7684\u306btensorflow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e**\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u306e\u4f8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n### ModelCheckpoint\n\nKeras\u306b\u304a\u3051\u308b\uff0cmodel\uff0cparameter\u306e\u4fdd\u5b58\uff0c\u8aad\u307f\u8fbc\u307f\u306fjson, yaml\u5f62\u5f0f\u3067\u884c\u3044\u307e\u3059\uff0e\n\nmodel\u306e\u4fdd\u5b58\uff0c\u8aad\u307f\u8fbc\u307f\u306f`model.to_json()/model.to_yaml()`\uff0c`model_from_json()/model_from_yaml()`\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\n```py\nfrom keras.models import Sequential, model_from_json\n\njson_string = model.to_json()\nmodel = model_from_json(json_string)\n```\n\n\u5b66\u7fd2\u3057\u305fParameter\u306e\u4fdd\u5b58\uff06\u8aad\u307f\u8fbc\u307f\u306f\uff0csave_weights/load_weights\u3092\u4f7f\u7528\u3057\u307e\u3059(h5py\u304c\u5fc5\u8981)\uff0e\n\n```py\nmodel.save_weights('param.hdf5')\nmodel.load_weights('param.hdf5')\n```\n\nParameter\u306e\u4fdd\u5b58\u306b\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306fModelCheckpoint\u3067\u3059\uff0e \u3053\u306e\u95a2\u6570\u306f\u6bceepoch\u306e\u7d42\u308f\u308a\u3067\u547c\u3070\u308c\u307e\u3059\n\n| arguments                                           | description                              | \n|-----------------------------------------------------|------------------------------------------| \n| filepath                                            | \u4fdd\u5b58\u30d5\u30a1\u30a4\u30eb\u540d                                  | \n| monitor                                             | \u76e3\u8996\u5024\u6307\u5b9a\uff0e\u4f8b\u3048\u3070\uff0cmonitor='val_loss'             | \n| verbose                                             | \u4fdd\u5b58\u6642\u306b\u6a19\u6e96\u51fa\u529b\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u51fa\u3059\u304b\u6307\u5b9a\uff0e{0, 1}               | \n| save_best_only                                      | \u7cbe\u5ea6\u304c\u3088\u304f\u306a\u3063\u305f\u6642\u3060\u3051\u4fdd\u5b58\u3059\u308b\u304b\u3069\u3046\u304b\u6307\u5b9a\uff0eFalse\u306e\u5834\u5408\u306f\u6bceepoch\u4fdd\u5b58\uff0e | \n| mode \u4e0a\u9650\uff0c\u4e0b\u9650\u3069\u3061\u3089\u306e\u5074\u306b\u53ce\u675f\u3057\u305f\u5834\u5408\u306b\u53ce\u675f\u5224\u5b9a\u3092\u51fa\u3059\u304b\u306e\u898f\u5b9a\uff0e{auto, min, max} |                                          | \n\n\nfilepath\u304c\u540c\u3058\u540d\u524d\u5834\u5408\u4e0a\u66f8\u304d\u3055\u308c\u308b\u306e\u3067\uff0c\u540d\u524d\u3092\u5909\u3048\u308b\u305f\u3081\u306b\u6307\u5b9a\u3057\u305f\u5909\u6570\u306e\u5024\u3092\u81ea\u52d5\u5165\u529b\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u6307\u5b9a\u3067\u304d\u308b\u5909\u6570\u306f\u3001epoch, loss, acc, val_loss, val_acc\u3067\u3059\uff0e\n\u4f8b\u3048\u3070filepath\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u305d\u306e\u6642\u306e\u5024\u3092\u81ea\u52d5\u3067\u5165\u308c\u3066\u304f\u308c\u307e\u3059\uff0e\n\n```py\nfpath = 'weights.{epoch:02d}-{loss:.2f}-{acc:.2f}-{val_loss:.2f}-{val_acc:.2f}.hdf5'\ncp_cb = keras.callbacks.ModelCheckpoint(filepath = fpath ), monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n```\n\n### LearningRateScheduler\n\n\u5b66\u7fd2\u4fc2\u6570\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u95a2\u6570\u3067\u3059\uff0e\n\n\u4f8b\u3048\u3070\uff0c\n\n```\nstart = 0.03\nstop = 0.001\nnb_epoch = 1000\nlearning_rates = np.linspace(start, stop, nb_epoch)\n\nlr_cb = keras.callbacks.LearningRateScheduler(lambda epoch: float(learning_rates[epoch]))\n```\n\n\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0cepoch\u306b\u5fdc\u3058\u3066\u5b66\u7fd2\u4fc2\u6570\u3092\u5909\u52d5\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n## \u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u308b\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u969b\u306b[RNN\u306bsin\b\u6ce2\u3092\u5b66\u7fd2\u3055\u305b\u308b\u30b5\u30f3\u30d7\u30eb](http://qiita.com/yukiB/items/5d5b202af86e3c587843)\u4e0a\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\uff0e\u30b3\u30fc\u30c9\u81ea\u4f53\u306e\u8a73\u3057\u3044\u89e3\u8aac\u306f\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u307e\u305a\uff0c\u5b66\u7fd2\uff0c\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\uff0e\n\n```py\nimport pandas as pd\nimport numpy as np\nimport math\nimport random\nrandom.seed(0)\nrandom_factor = 0.05\nsteps_per_cycle = 80\nnumber_of_cycles = 50\n\ndf = pd.DataFrame(np.arange(steps_per_cycle * number_of_cycles + 1), columns=[\"t\"])\ndf[\"sin_t\"] = df.t.apply(lambda x: math.sin(x * (2 * math.pi / steps_per_cycle)+ random.uniform(-1.0, +1.0) * random_factor))\n(X_train, y_train), (X_test, y_test) = train_test_split(df[[\"sin_t\"]], n_prev =length_of_sequences)  \n```\n\n\u7d9a\u3044\u3066\uff0ckeras\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\uff0c\u5b66\u7fd2\u3092\u56de\u3057\u307e\u3059\uff0e\n\n```py\nfrom keras.models import Sequential  \nfrom keras.layers.core import Dense, Activation  \nfrom keras.layers.recurrent import LSTM\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\nfrom keras.callbacks import EarlyStopping, TensorBoard, ModelCheckpoint\nimport os\n\nin_out_neurons = 1\nhidden_neurons = 300\nlength_of_sequences = 100\n\nold_session = KTF.get_session()\n\nwith tf.Graph().as_default():\n    session = tf.Session('')\n    KTF.set_session(session)\n    KTF.set_learning_phase(1)\n    model = Sequential()  \n    with tf.name_scope(\"inference\") as scope:\n        model.add(LSTM(hidden_neurons, input_shape=(length_of_sequences, in_out_neurons), return_sequences=False))  \n        model.add(Dense(in_out_neurons))  \n        model.add(Activation(\"linear\"))       \n    model.summary()\n    fpath = './tensorlog/weights.{epoch:02d}-{loss:.2f}-{val_loss:.2f}.hdf5'\n    cp_cb = ModelCheckpoint(filepath = fpath, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n    es_cb = EarlyStopping(monitor='val_loss', patience=2, verbose=1, mode='auto')\n    tb_cb = TensorBoard(log_dir=\"./tensorlog\", histogram_freq=1)\n    model.compile(loss=\"mean_squared_error\", optimizer=\"rmsprop\",  metrics=['accuracy'])  \n    model.fit(X_train, y_train, batch_size=600, nb_epoch=10, validation_split=0.05, verbose=1, callbacks=[cp_cb, es_cb, tb_cb]) \njson_string = model.to_json()\nopen(os.path.join(f_model,'./tensorlog/rnn_model.json'), 'w').write(json_string)\nKTF.set_session(old_session)\n```\n\n\u5404\u7a2e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3057\uff0cfit\u95a2\u6570\u306ecallbacks\u306b\u307e\u3068\u3081\u3066\u767b\u9332\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff0ctensorboard\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7528\u3044\u308b\u969b\u306f\uff0c`tf.Session('')`\u3067\u660e\u793a\u7684\u306btensorflow\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\uff0cset_session\u95a2\u6570\u306b\u3088\u308akeras\u5074\u306b\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u4ee5\u4e0a\u306e\u51e6\u7406\u306b\u3088\u3063\u3066\uff0c`./tensorlog`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\uff0c` weights.01-0.02-0.00.hdf5`\u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30ed\u30b0\u7b49\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\uff0e\n\n## \u304a\u308f\u308a\u306b\n\n\u4eca\u56de\u306fKeras\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u7d39\u4ecb\u3057\uff0c\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u547c\u3073\u51fa\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u7b49\u3092\u3055\u3089\u306b\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\uff0c\u81ea\u524d\u3067\u95a2\u6570\u3092\u898f\u5b9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n\n", "tags": ["Keras", "TensorFlow", "Python", "DeepLearning", "\u6a5f\u68b0\u5b66\u7fd2"]}