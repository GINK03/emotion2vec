{"context": "\u3060\u3044\u3076\u524d\u306b\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u3044\u305f\u6642\u306b\u9069\u5f53\u306b\u66f8\u3044\u305f\u3082\u306e\uff08\u30d5\u30eb\u30e1\u30c3\u30b7\u30e5\u3067\u3059\uff09\u3092\u3042\u3052\u3066\u304a\u304d\u307e\u3059\n\n<html>\n  <head>\n    <title></title>\n    <style type=\"text/css\">\n      <!--\n        video {\n          width: 200px;\n          height: 200px;\n        }\n      -->\n    </style>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n  </head>\n  <body>\n    <div>\n      <strong id=\"srcId\" ></strong>\n    </div>\n    <div>\n      <input id=\"dstId\" type=\"text\" />\n      <input type=\"button\" value=\"connect\" onclick=\"connect()\" />\n    </div>\n    <div id=\"local\">\n      <video id=\"localVideo\" autoplay />\n    </div>\n    <hr />\n    <div id=\"remote\">\n    </div>\n\n    <script>\n      var RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n      var RTCSessionDescription = window.RTCSessionDescription;\n      var RTCIceCandidate = window.RTCIceCandidate || window.RTCIceCandidate;\n\n      navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      var ws;\n      var pcs = {};\n      var dcs = {};\n      var dcLabel = 'label';\n\n      var localStream;\n\n      function getMedia() {\n        navigator.getUserMedia(\n          {video: true},\n          function(stream) {\n            localStream = stream\n            localVideo.src = window.URL.createObjectURL(stream)\n            localVideo.play();\n          },\n          function(error) {\n            console.error(error);\n          }\n        )\n      }\n\n      getMedia();\n\n\n      function getId() {\n        var url = 'http://' + location.host + '/id';\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url)\n        xhr.onreadystatechange = function() {\n          if (this.readyState == xhr.DONE && this.status == 200) {\n            var message = JSON.parse(this.responseText);\n            var id = message.id\n            var srcId = $('#srcId');\n            srcId.text(id);\n\n            wsConnect(id);\n          }\n        };\n\n        xhr.send(null);\n      }\n\n      function wsConnect(id) {\n        ws_url = 'ws://' + location.host + '/ws/' + id;\n        ws = new WebSocket(this.ws_url);\n        ws.onopen = function() {\n          console.log('WebSocket open');\n        };\n\n        ws.onmessage = handleMessage;\n        ws.onclose = function(event) {\n          console.log('close');\n        };\n      }\n\n      function handleMessage(event) {\n        var message = JSON.parse(event.data);\n        var id = message.id;\n        if (message.type === 'offer') {\n          var config = {'iceServers': []};\n          var pc = new RTCPeerConnection(config);\n          var dc = pc.createDataChannel(dcLabel);\n          pcs[id] = pc;\n          dcs[id] = dc;\n\n          var sessionDescription = new RTCSessionDescription({type: message.type,\n                                                              sdp: message.sdp})\n          pc.setRemoteDescription(sessionDescription);\n          pc.onicecandidate = function(event) {\n            var candidate = event.candidate;\n            if (candidate) {\n              pc.addIceCandidate(candidate);\n              var message = JSON.stringify({type: \"candidate\",\n                                            id: id,\n                                            sdpMid: candidate.sdpMid,\n                                            candidate: candidate.candidate});\n              ws.send(message);\n            }\n          };\n          pc.onclose = function(event) {\n            console.log('close');\n          };\n          pc.onerror = function(error) {\n            console.error(error);\n          };\n\n          pc.addStream(localStream);\n          pc.onaddstream = function(event) {\n            var remote = $('#remote');\n            var remoteVideo = $('<video>');\n            remoteVideo.attr('src', window.URL.createObjectURL(event.stream));\n            remoteVideo.attr('autoplay', '');\n            remote.append(remoteVideo);\n          };\n\n          sendAnswer(pc, ws, id);\n        } else if (message.type === 'answer') {\n          var sessionDescription = new RTCSessionDescription({type: message.type,\n                                                              sdp: message.sdp})\n          pc = pcs[id];\n          pc.setRemoteDescription(sessionDescription);\n        } else if (message.type === 'candidate') {\n          var iceCandidate = new RTCIceCandidate({sdpMLineIndex: message.sdpMLineIndex,\n                                                  candidate: message.candidate})\n          pc = pcs[id];\n          pc.addIceCandidate(iceCandidate);\n        } else if (message.type === 'connections') {\n          console.log(message)\n        }\n      }\n\n      function connect(id) {\n        var id = id || $(\"#dstId\").val();\n        var config = {'iceServers': []};\n        var pc = new RTCPeerConnection(config);\n        pcs[id] = pc;\n        pc.onicecandidate = function(event) {\n          var candidate = event.candidate\n          if (candidate) {\n            var message = JSON.stringify({type: \"candidate\",\n                                          id: id,\n                                          sdpMLineIndex: candidate.sdpMLineIndex,\n                                          candidate: candidate.candidate});\n            ws.send(message);\n          }\n        };\n        pc.onclose = function(event) {\n          console.log('close');\n        };\n        pc.onerror = function(error) {\n          console.error(error);\n        };\n        pc.addStream(localStream);\n        pc.onaddstream = function(event) {\n          var remote = $('#remote');\n          var remoteVideo = $('<video>');\n          remoteVideo.attr('src', window.URL.createObjectURL(event.stream));\n          remoteVideo.attr('autoplay', '');\n          remote.append(remoteVideo);\n        };\n\n        var dc = pc.createDataChannel(dcLabel);\n        dcs[id] = dc;\n        dc.onmessage = function(event) {\n          var message = JSON.parse(event.data);\n          if (message.type === 'connections') {\n            var srcId = $('#srcId').text();\n            var dcIds = Object.keys(dcs);\n            var ids = message.ids.filter(function(e) { return dcIds.indexOf(e) < 0 });\n            ids.forEach(function(channelId) {\n              if (channelId !== srcId) {\n                connect(channelId);\n              }\n            })\n          }\n        };\n        dc.onopen = function(event) {\n          console.log('open');\n          var ids = Object.keys(dcs);\n          dc.send(JSON.stringify({type: 'connections', ids: ids}));\n        };\n        dc.onclose = function(event) {\n          console.log('close');\n          for (id in dcs) {\n            if (this === dcs[id]) {\n              delete dcs[id];\n            }\n          }\n        };\n        pcs[id] = pc;\n        dcs[id] = dc;\n\n        sendOffer(pc, ws, id);\n      };\n\n      function sendOffer(pc, ws, id)  {\n        var options = {};\n        pc.createOffer(options)\n          .then(sessionDescription => {\n            return pc.setLocalDescription(sessionDescription)\n          })\n          .then(() => {\n            var message = JSON.stringify({type: pc.localDescription.type,\n                                          id: id,\n                                          sdp: pc.localDescription.sdp});\n            ws.send(message);\n          })\n          .catch(reason => console.error(reason));\n      }\n\n      function sendAnswer(pc, ws, id) {\n        var options = {};\n        pc.createAnswer(options)\n          .then(sessionDescription => {\n            return pc.setLocalDescription(sessionDescription)\n          })\n          .then(() => {\n            pc.ondatachannel = function(event) {\n              var dc = event.channel;\n              dcs[id] = dc;\n              dc.onmessage = function(event) {\n                var message = JSON.parse(event.data);\n                if (message.type === 'connections') {\n                  var srcId = $('#srcId').text();\n                  var dcIds = Object.keys(dcs);\n                  var ids = message.ids.filter(function(e) { return dcIds.indexOf(e) < 0 });\n                  ids.forEach(function(channelId) {\n                    if (channelId !== srcId) {\n                      connect(channelId);\n                    }\n                  })\n                }\n              };\n              dc.onopen = function(event) {\n                var ids = Object.keys(dcs);\n                dc.send(JSON.stringify({type: 'connections', ids: ids}));\n              };\n              dc.onclose = function(event) {\n                console.log('close');\n                for (id in dcs) {\n                  if (this === dcs[id]) {\n                    delete dcs[id];\n                  }\n                }\n              };\n            };\n\n            var message = JSON.stringify({type: pc.localDescription.type,\n                                          id: id,\n                                          sdp: pc.localDescription.sdp});\n            ws.send(message);\n          })\n          .catch(reason => console.error(reason));\n      }\n\n      getId();\n    </script>\n  </body>\n</html>\n\n\u624b\u52d5\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3092\u7528\u610f\u3057\u307e\u3057\u305f\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport hashlib\nimport simplejson\nimport tornado.web\nimport tornado.websocket\n\nCONNECTIONS = {}\n\nclass BasicHandler(tornado.web.RequestHandler):\n    pass\n\nclass MainHandler(BasicHandler):\n    def get(self):\n        self.render('index.html')\n\nclass IdHandler(BasicHandler):\n    def generate_id(self):\n        return hashlib.sha1(str(id(self))).hexdigest()\n\n    def get(self):\n        id = self.generate_id()\n        res = simplejson.dumps({'id': id})\n        self.write(res)\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def initialize(self):\n        self.source_id = ''\n\n    def push_handler(self, id, handler):\n        CONNECTIONS[id] = handler\n\n    def remove_handler(self, id):\n        del CONNECTIONS[id]\n\n    def get_handler(self, id):\n        return CONNECTIONS.get(id)\n\n    def open(self, id):\n        self.source_id = id\n        self.push_handler(id, handler = self)\n        print('open: ' + id)\n\n    def on_message(self, message):\n        payload = simplejson.loads(message)\n        id = payload['id']\n        handler = self.get_handler(id)\n        payload['id'] = self.source_id\n        json = simplejson.dumps(payload)\n        handler.write_message(json)\n\n    def on_close(self):\n        print('close')\n\n    def close(self):\n        self.write_message('close')\n\nif __name__ == '__main__':\n    application = tornado.web.Application([\n        (r'/', MainHandler),\n        (r'/id', IdHandler),\n        (r'/ws/(.+)', WebSocketHandler),\n    ], debug=True)\n    application.listen(9999)\n    tornado.ioloop.IOLoop.instance().start()\n\n\u3060\u3044\u3076\u524d\u306b\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u3044\u305f\u6642\u306b\u9069\u5f53\u306b\u66f8\u3044\u305f\u3082\u306e\uff08\u30d5\u30eb\u30e1\u30c3\u30b7\u30e5\u3067\u3059\uff09\u3092\u3042\u3052\u3066\u304a\u304d\u307e\u3059\n\n![Screenshot_2015-06-03-22-53-19.jpg](https://qiita-image-store.s3.amazonaws.com/0/36202/25296df4-f510-d23d-dbeb-55097988dac9.jpeg)\n\n\n```html\n<html>\n  <head>\n    <title></title>\n    <style type=\"text/css\">\n      <!--\n        video {\n          width: 200px;\n          height: 200px;\n        }\n      -->\n    </style>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n  </head>\n  <body>\n    <div>\n      <strong id=\"srcId\" ></strong>\n    </div>\n    <div>\n      <input id=\"dstId\" type=\"text\" />\n      <input type=\"button\" value=\"connect\" onclick=\"connect()\" />\n    </div>\n    <div id=\"local\">\n      <video id=\"localVideo\" autoplay />\n    </div>\n    <hr />\n    <div id=\"remote\">\n    </div>\n\n    <script>\n      var RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection;\n      var RTCSessionDescription = window.RTCSessionDescription;\n      var RTCIceCandidate = window.RTCIceCandidate || window.RTCIceCandidate;\n\n      navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      var ws;\n      var pcs = {};\n      var dcs = {};\n      var dcLabel = 'label';\n\n      var localStream;\n\n      function getMedia() {\n        navigator.getUserMedia(\n          {video: true},\n          function(stream) {\n            localStream = stream\n            localVideo.src = window.URL.createObjectURL(stream)\n            localVideo.play();\n          },\n          function(error) {\n            console.error(error);\n          }\n        )\n      }\n\n      getMedia();\n\n\n      function getId() {\n        var url = 'http://' + location.host + '/id';\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url)\n        xhr.onreadystatechange = function() {\n          if (this.readyState == xhr.DONE && this.status == 200) {\n            var message = JSON.parse(this.responseText);\n            var id = message.id\n            var srcId = $('#srcId');\n            srcId.text(id);\n\n            wsConnect(id);\n          }\n        };\n\n        xhr.send(null);\n      }\n\n      function wsConnect(id) {\n        ws_url = 'ws://' + location.host + '/ws/' + id;\n        ws = new WebSocket(this.ws_url);\n        ws.onopen = function() {\n          console.log('WebSocket open');\n        };\n\n        ws.onmessage = handleMessage;\n        ws.onclose = function(event) {\n          console.log('close');\n        };\n      }\n\n      function handleMessage(event) {\n        var message = JSON.parse(event.data);\n        var id = message.id;\n        if (message.type === 'offer') {\n          var config = {'iceServers': []};\n          var pc = new RTCPeerConnection(config);\n          var dc = pc.createDataChannel(dcLabel);\n          pcs[id] = pc;\n          dcs[id] = dc;\n\n          var sessionDescription = new RTCSessionDescription({type: message.type,\n                                                              sdp: message.sdp})\n          pc.setRemoteDescription(sessionDescription);\n          pc.onicecandidate = function(event) {\n            var candidate = event.candidate;\n            if (candidate) {\n              pc.addIceCandidate(candidate);\n              var message = JSON.stringify({type: \"candidate\",\n                                            id: id,\n                                            sdpMid: candidate.sdpMid,\n                                            candidate: candidate.candidate});\n              ws.send(message);\n            }\n          };\n          pc.onclose = function(event) {\n            console.log('close');\n          };\n          pc.onerror = function(error) {\n            console.error(error);\n          };\n\n          pc.addStream(localStream);\n          pc.onaddstream = function(event) {\n            var remote = $('#remote');\n            var remoteVideo = $('<video>');\n            remoteVideo.attr('src', window.URL.createObjectURL(event.stream));\n            remoteVideo.attr('autoplay', '');\n            remote.append(remoteVideo);\n          };\n\n          sendAnswer(pc, ws, id);\n        } else if (message.type === 'answer') {\n          var sessionDescription = new RTCSessionDescription({type: message.type,\n                                                              sdp: message.sdp})\n          pc = pcs[id];\n          pc.setRemoteDescription(sessionDescription);\n        } else if (message.type === 'candidate') {\n          var iceCandidate = new RTCIceCandidate({sdpMLineIndex: message.sdpMLineIndex,\n                                                  candidate: message.candidate})\n          pc = pcs[id];\n          pc.addIceCandidate(iceCandidate);\n        } else if (message.type === 'connections') {\n          console.log(message)\n        }\n      }\n\n      function connect(id) {\n        var id = id || $(\"#dstId\").val();\n        var config = {'iceServers': []};\n        var pc = new RTCPeerConnection(config);\n        pcs[id] = pc;\n        pc.onicecandidate = function(event) {\n          var candidate = event.candidate\n          if (candidate) {\n            var message = JSON.stringify({type: \"candidate\",\n                                          id: id,\n                                          sdpMLineIndex: candidate.sdpMLineIndex,\n                                          candidate: candidate.candidate});\n            ws.send(message);\n          }\n        };\n        pc.onclose = function(event) {\n          console.log('close');\n        };\n        pc.onerror = function(error) {\n          console.error(error);\n        };\n        pc.addStream(localStream);\n        pc.onaddstream = function(event) {\n          var remote = $('#remote');\n          var remoteVideo = $('<video>');\n          remoteVideo.attr('src', window.URL.createObjectURL(event.stream));\n          remoteVideo.attr('autoplay', '');\n          remote.append(remoteVideo);\n        };\n\n        var dc = pc.createDataChannel(dcLabel);\n        dcs[id] = dc;\n        dc.onmessage = function(event) {\n          var message = JSON.parse(event.data);\n          if (message.type === 'connections') {\n            var srcId = $('#srcId').text();\n            var dcIds = Object.keys(dcs);\n            var ids = message.ids.filter(function(e) { return dcIds.indexOf(e) < 0 });\n            ids.forEach(function(channelId) {\n              if (channelId !== srcId) {\n                connect(channelId);\n              }\n            })\n          }\n        };\n        dc.onopen = function(event) {\n          console.log('open');\n          var ids = Object.keys(dcs);\n          dc.send(JSON.stringify({type: 'connections', ids: ids}));\n        };\n        dc.onclose = function(event) {\n          console.log('close');\n          for (id in dcs) {\n            if (this === dcs[id]) {\n              delete dcs[id];\n            }\n          }\n        };\n        pcs[id] = pc;\n        dcs[id] = dc;\n\n        sendOffer(pc, ws, id);\n      };\n\n      function sendOffer(pc, ws, id)  {\n        var options = {};\n        pc.createOffer(options)\n          .then(sessionDescription => {\n            return pc.setLocalDescription(sessionDescription)\n          })\n          .then(() => {\n            var message = JSON.stringify({type: pc.localDescription.type,\n                                          id: id,\n                                          sdp: pc.localDescription.sdp});\n            ws.send(message);\n          })\n          .catch(reason => console.error(reason));\n      }\n\n      function sendAnswer(pc, ws, id) {\n        var options = {};\n        pc.createAnswer(options)\n          .then(sessionDescription => {\n            return pc.setLocalDescription(sessionDescription)\n          })\n          .then(() => {\n            pc.ondatachannel = function(event) {\n              var dc = event.channel;\n              dcs[id] = dc;\n              dc.onmessage = function(event) {\n                var message = JSON.parse(event.data);\n                if (message.type === 'connections') {\n                  var srcId = $('#srcId').text();\n                  var dcIds = Object.keys(dcs);\n                  var ids = message.ids.filter(function(e) { return dcIds.indexOf(e) < 0 });\n                  ids.forEach(function(channelId) {\n                    if (channelId !== srcId) {\n                      connect(channelId);\n                    }\n                  })\n                }\n              };\n              dc.onopen = function(event) {\n                var ids = Object.keys(dcs);\n                dc.send(JSON.stringify({type: 'connections', ids: ids}));\n              };\n              dc.onclose = function(event) {\n                console.log('close');\n                for (id in dcs) {\n                  if (this === dcs[id]) {\n                    delete dcs[id];\n                  }\n                }\n              };\n            };\n\n            var message = JSON.stringify({type: pc.localDescription.type,\n                                          id: id,\n                                          sdp: pc.localDescription.sdp});\n            ws.send(message);\n          })\n          .catch(reason => console.error(reason));\n      }\n\n      getId();\n    </script>\n  </body>\n</html>\n```\n\n\n\u624b\u52d5\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30b7\u30b0\u30ca\u30ea\u30f3\u30b0\u30b5\u30fc\u30d0\u3092\u7528\u610f\u3057\u307e\u3057\u305f\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport hashlib\nimport simplejson\nimport tornado.web\nimport tornado.websocket\n\nCONNECTIONS = {}\n\nclass BasicHandler(tornado.web.RequestHandler):\n    pass\n\nclass MainHandler(BasicHandler):\n    def get(self):\n        self.render('index.html')\n\nclass IdHandler(BasicHandler):\n    def generate_id(self):\n        return hashlib.sha1(str(id(self))).hexdigest()\n\n    def get(self):\n        id = self.generate_id()\n        res = simplejson.dumps({'id': id})\n        self.write(res)\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n\n    def initialize(self):\n        self.source_id = ''\n\n    def push_handler(self, id, handler):\n        CONNECTIONS[id] = handler\n\n    def remove_handler(self, id):\n        del CONNECTIONS[id]\n\n    def get_handler(self, id):\n        return CONNECTIONS.get(id)\n\n    def open(self, id):\n        self.source_id = id\n        self.push_handler(id, handler = self)\n        print('open: ' + id)\n\n    def on_message(self, message):\n        payload = simplejson.loads(message)\n        id = payload['id']\n        handler = self.get_handler(id)\n        payload['id'] = self.source_id\n        json = simplejson.dumps(payload)\n        handler.write_message(json)\n\n    def on_close(self):\n        print('close')\n\n    def close(self):\n        self.write_message('close')\n\nif __name__ == '__main__':\n    application = tornado.web.Application([\n        (r'/', MainHandler),\n        (r'/id', IdHandler),\n        (r'/ws/(.+)', WebSocketHandler),\n    ], debug=True)\n    application.listen(9999)\n    tornado.ioloop.IOLoop.instance().start()\n```\n", "tags": ["WebRTC"]}