{"context": "\n\n\u53cd\u5fa9\u6761\u4ef6\u4ed8\u304d\u30e2\u30fc\u30c9\u3068\u306f\n\u53cd\u5fa9\u6761\u4ef6\u4ed8\u304d\u30e2\u30fc\u30c9\u306fICM\u3068\u3082\u3088\u3070\u308c\uff0c\u30de\u30eb\u30b3\u30d5\u78ba\u7387\u5834\u4e0a\u3067\u5404\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u9806\u756a\u306b\u5909\u66f4\u3057\u306a\u304c\u3089\uff0c\u30ce\u30fc\u30c9\u5168\u4f53\u306e\u72b6\u614b\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\uff0e\u3057\u304b\u3057\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30ce\u30fc\u30c9\u6bce\u306b\u52fe\u914d\u6cd5\u3092\u9069\u7528\u3059\u308b\u3060\u3051\u306a\u306e\u3067\uff0c\u5927\u57df\u89e3\u306b\u53ce\u675f\u305b\u305a\u5c40\u6240\u89e3\u3057\u304b\u6c42\u3081\u3089\u308c\u307e\u305b\u3093\uff0e\n\n\u4f7f\u7528\u30c7\u30fc\u30bf\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u89e3\u8aac\n\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\uff0c\u5404\u30ce\u30fc\u30c9\u306b\u304a\u3044\u3066\uff0c\u305d\u306e\u30ce\u30fc\u30c9\u304c\u3068\u308a\u3046\u308b\u72b6\u614b\u5168\u3066\u306b\u3064\u3044\u3066\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6c42\u3081\u3066\u3042\u3052\u307e\u3059\uff0e\u3053\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u306f\u305d\u306e\u30ce\u30fc\u30c9\u304c\u3069\u306e\u72b6\u614b\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u5ea6\u5408\u3044\u3092\u8868\u3057\uff0c\u5404\u30ce\u30fc\u30c9\u306f\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u6700\u3082\u4f4e\u304f\u306a\u308b\u72b6\u614b\u3092\u3068\u308a\u307e\u3059\uff0e\n\u307e\u305areference\u5909\u6570\u306b\u30ce\u30a4\u30ba\u753b\u50cf\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\uff0e\u3053\u308c\u304c\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\uff0e\u6b21\u306b\u5404\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u96a3\u63a5\u3059\u308b\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8abf\u3079\u306a\u304c\u3089\u81ea\u5206\u304c\u3069\u306e\u72b6\u614b\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u8a08\u7b97\u3057\u307e\u3059\uff0e\nfor i in range(1, height - 1):\n    for j in range(1, width - 1):\n        for k in range(len(dy)):\n\n            #\u8fd1\u508d\u306e\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8003\u616e\u3059\u308b\n            if reference[i+dy[k],j+dx[k]] == 1:\n               prob1[i,j] -= beta\n               prob0[i,j] += beta\n            else:\n               prob1[i,j] += beta\n               prob0[i,j] -= beta\n\n\u6b21\u306b\u89b3\u6e2c\u5024(\u30ce\u30a4\u30ba\u753b\u50cf)\u306e\u307f\u3092\u8003\u616e\u3057\u3066\u5404\u30ce\u30fc\u30c9\u304c\u3069\u306e\u5024\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u8a08\u7b97\u3057\u3066\u3042\u3052\u307e\u3059\uff0e\u305d\u308c\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e\nprob1[image == 1] -= alpha\nprob0[image == 0] -= alpha\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\uff0e\n#encoding:utf-8\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nfrom skimage.filters import threshold_otsu\n\ndef MRF(image):\n    iter = 30\n    height, width = image.shape\n    dy = [-1,-1,-1,0,0,1,1,1]\n    dx = [-1,0,1,-1,1,-1,0,1]\n    reference = np.copy(image)\n    alpha = 2.5\n    beta = 4.0\n\n    for t in range(iter):\n        print(t)\n\n        prob0 = np.zeros(reference.shape)\n        prob1 = np.zeros(reference.shape)\n\n        for i in range(1, height - 1):\n            for j in range(1, width - 1):\n                for k in range(len(dy)):\n\n                    #\u8fd1\u508d\u306e\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8003\u616e\u3059\u308b\n                    if reference[i+dy[k],j+dx[k]] == 1:\n                        prob1[i,j] -= beta\n                        prob0[i,j] += beta\n                    else:\n                        prob1[i,j] += beta\n                        prob0[i,j] -= beta\n\n        #\u89b3\u6e2c\u5024\u3092\u8003\u616e\u3059\u308b\n        prob1[image == 1] -= alpha\n        prob0[image == 0] -= alpha\n\n        reference[prob1 > prob0] = 0\n        reference[prob1 < prob0] = 1\n\n    return reference\n\n\ndef addNoise(image):\n    output = np.copy(image)\n    flags  = np.random.binomial(n=1, p=0.05, size=image.shape)\n\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            if flags[i,j]:\n                output[i,j] = not(output[i,j])\n\n    return output\n\ndef main():\n    image = cv2.imread(\"Lenna.png\", 0)\n    binary = image > threshold_otsu(image)\n    noise = addNoise(binary.astype(np.int))\n    denoise = MRF(noise)\n\n    plt.gray()\n    plt.subplot(131)\n    plt.imshow(image)\n    plt.subplot(132)\n    plt.imshow(noise)\n    plt.subplot(133)\n    plt.imshow(denoise)\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u78ba\u304b\u306b\u30ce\u30a4\u30ba\u304c\u9664\u53bb\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\uff29\uff23\uff2d\u306f\u975e\u5e38\u306b\u7c21\u5358\u306b\u7d44\u3081\u308b\u306e\u3067\u30de\u30eb\u30b3\u30d5\u78ba\u7387\u5834\u306e\u5165\u9580\u306b\u306f\u304a\u52e7\u3081\u3067\u3059\uff0e\n#\u53cd\u5fa9\u6761\u4ef6\u4ed8\u304d\u30e2\u30fc\u30c9\u3068\u306f\n\u53cd\u5fa9\u6761\u4ef6\u4ed8\u304d\u30e2\u30fc\u30c9\u306fICM\u3068\u3082\u3088\u3070\u308c\uff0c\u30de\u30eb\u30b3\u30d5\u78ba\u7387\u5834\u4e0a\u3067\u5404\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u9806\u756a\u306b\u5909\u66f4\u3057\u306a\u304c\u3089\uff0c\u30ce\u30fc\u30c9\u5168\u4f53\u306e\u72b6\u614b\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\uff0e\u3057\u304b\u3057\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u30ce\u30fc\u30c9\u6bce\u306b\u52fe\u914d\u6cd5\u3092\u9069\u7528\u3059\u308b\u3060\u3051\u306a\u306e\u3067\uff0c\u5927\u57df\u89e3\u306b\u53ce\u675f\u305b\u305a\u5c40\u6240\u89e3\u3057\u304b\u6c42\u3081\u3089\u308c\u307e\u305b\u3093\uff0e\n\n#\u4f7f\u7528\u30c7\u30fc\u30bf\n![\u4f7f\u7528\u30c7\u30fc\u30bf.png](https://qiita-image-store.s3.amazonaws.com/0/66915/ccd39d3b-6c7c-6d5b-6a1e-be53f149f1e1.png)\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u89e3\u8aac\n<p>\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\uff0c\u5404\u30ce\u30fc\u30c9\u306b\u304a\u3044\u3066\uff0c\u305d\u306e\u30ce\u30fc\u30c9\u304c\u3068\u308a\u3046\u308b\u72b6\u614b\u5168\u3066\u306b\u3064\u3044\u3066\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u6c42\u3081\u3066\u3042\u3052\u307e\u3059\uff0e\u3053\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u306f\u305d\u306e\u30ce\u30fc\u30c9\u304c\u3069\u306e\u72b6\u614b\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u5ea6\u5408\u3044\u3092\u8868\u3057\uff0c\u5404\u30ce\u30fc\u30c9\u306f\u30a8\u30cd\u30eb\u30ae\u30fc\u304c\u6700\u3082\u4f4e\u304f\u306a\u308b\u72b6\u614b\u3092\u3068\u308a\u307e\u3059\uff0e</p>\n\n<p>\u307e\u305areference\u5909\u6570\u306b\u30ce\u30a4\u30ba\u753b\u50cf\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\uff0e\u3053\u308c\u304c\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\uff0e\u6b21\u306b\u5404\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u96a3\u63a5\u3059\u308b\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8abf\u3079\u306a\u304c\u3089\u81ea\u5206\u304c\u3069\u306e\u72b6\u614b\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u8a08\u7b97\u3057\u307e\u3059\uff0e</p>\n\n```python:\nfor i in range(1, height - 1):\n    for j in range(1, width - 1):\n        for k in range(len(dy)):\n                    \n            #\u8fd1\u508d\u306e\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8003\u616e\u3059\u308b\n            if reference[i+dy[k],j+dx[k]] == 1:\n               prob1[i,j] -= beta\n               prob0[i,j] += beta\n            else:\n               prob1[i,j] += beta\n               prob0[i,j] -= beta\n```\n\n<p>\u6b21\u306b\u89b3\u6e2c\u5024(\u30ce\u30a4\u30ba\u753b\u50cf)\u306e\u307f\u3092\u8003\u616e\u3057\u3066\u5404\u30ce\u30fc\u30c9\u304c\u3069\u306e\u5024\u3092\u3068\u308b\u3079\u304d\u304b\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u3092\u8a08\u7b97\u3057\u3066\u3042\u3052\u307e\u3059\uff0e\u305d\u308c\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e</p>\n\n```python:\nprob1[image == 1] -= alpha\nprob0[image == 0] -= alpha\n```\n\n<p>\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\uff0e</p>\n\n```python:\n#encoding:utf-8\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nfrom skimage.filters import threshold_otsu\n\ndef MRF(image):\n    iter = 30\n    height, width = image.shape\n    dy = [-1,-1,-1,0,0,1,1,1]\n    dx = [-1,0,1,-1,1,-1,0,1]\n    reference = np.copy(image)\n    alpha = 2.5\n    beta = 4.0\n\n    for t in range(iter):\n        print(t)\n\n        prob0 = np.zeros(reference.shape)\n        prob1 = np.zeros(reference.shape)\n\n        for i in range(1, height - 1):\n            for j in range(1, width - 1):\n                for k in range(len(dy)):\n                    \n                    #\u8fd1\u508d\u306e\u30ce\u30fc\u30c9\u306e\u72b6\u614b\u3092\u8003\u616e\u3059\u308b\n                    if reference[i+dy[k],j+dx[k]] == 1:\n                        prob1[i,j] -= beta\n                        prob0[i,j] += beta\n                    else:\n                        prob1[i,j] += beta\n                        prob0[i,j] -= beta\n        \n        #\u89b3\u6e2c\u5024\u3092\u8003\u616e\u3059\u308b\n        prob1[image == 1] -= alpha\n        prob0[image == 0] -= alpha\n\n        reference[prob1 > prob0] = 0\n        reference[prob1 < prob0] = 1\n\n    return reference\n\n\ndef addNoise(image):\n    output = np.copy(image)\n    flags  = np.random.binomial(n=1, p=0.05, size=image.shape)\n\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            if flags[i,j]:\n                output[i,j] = not(output[i,j])\n\n    return output\n\ndef main():\n    image = cv2.imread(\"Lenna.png\", 0)\n    binary = image > threshold_otsu(image)\n    noise = addNoise(binary.astype(np.int))\n    denoise = MRF(noise)\n\n    plt.gray()\n    plt.subplot(131)\n    plt.imshow(image)\n    plt.subplot(132)\n    plt.imshow(noise)\n    plt.subplot(133)\n    plt.imshow(denoise)\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n```\n\n#\u5b9f\u884c\u7d50\u679c\n![\u5b9f\u884c\u7d50\u679c.png](https://qiita-image-store.s3.amazonaws.com/0/66915/53e3a74b-6b4f-485e-c026-8ceb7ea8d61a.png)\n\n<p>\u78ba\u304b\u306b\u30ce\u30a4\u30ba\u304c\u9664\u53bb\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\uff29\uff23\uff2d\u306f\u975e\u5e38\u306b\u7c21\u5358\u306b\u7d44\u3081\u308b\u306e\u3067\u30de\u30eb\u30b3\u30d5\u78ba\u7387\u5834\u306e\u5165\u9580\u306b\u306f\u304a\u52e7\u3081\u3067\u3059\uff0e</p>\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "\u753b\u50cf\u51e6\u7406", "Python"]}