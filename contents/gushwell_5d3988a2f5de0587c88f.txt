{"tags": ["C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#"], "context": "\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9 (\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044)\u3092\u4f7f\u3063\u305f\u7d20\u6570\u3092\u6c42\u3081\u308bC#\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u306b\u3064\u3044\u3066\u306f\u3001Wikipedia\u306e \u3053\u3061\u3089\u3092\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30ce\u30fc\u30de\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\nPrimes\u304c\u7d20\u6570\u3092\u6c42\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u30022\u304b\u3089\u5f15\u6570\u3067\u4e0e\u3048\u305f\u6574\u6570(maxnum)\u306e\u9593\u306e\u7d20\u6570\u3092\u5217\u6319\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u5f15\u6570\u306e\u5024\u3067\u3001\u5185\u90e8\u3067\u3075\u308b\u3044\u7528\u306e\u914d\u5217(sieve)\u306e\u8981\u7d20\u6570\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u623b\u308a\u5024\u306f\u3001IEnumerable<T>\u3067\u3059\u3002\n\nSieveOfEratosthenes.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n\n    class Program {\n        static void Main(string[] args) {\n            foreach(var n in Primes(200))\n                Console.Write(\"{0,3} \",n);\n            Console.WriteLine();\n            Console.ReadLine();\n        }\n\n        static IEnumerable<int> Primes(int maxnum) {\n            int[] sieve = Enumerable.Range(0, maxnum + 1).ToArray();\n            sieve[1] = 0;  // 0 : \u7d20\u6570\u3067\u306f\u306a\u3044\n            int squareroot = (int)Math.Sqrt(maxnum);\n            for (int i = 2; i <= squareroot; i++) {\n                if (sieve[i] <= 0)\n                    continue;\n                for (int n = i * 2; n <= maxnum; n += i)\n                    sieve[n] = 0;\n            }\n            return sieve.Where(n => n > 0);\n        }\n    }\n}\n\n\n\n\u7701\u30e1\u30e2\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\n\u3082\u3046\u5c11\u3057\u3001\u30e1\u30e2\u30ea\u52b9\u7387\u3092\u826f\u304f\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002int\u306e\u914d\u5217\u3067\u306f\u306a\u304f\u3066\u3001bool\u306e\u914d\u5217\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nPrimesSavingMemory.cs\n static IEnumerable<int> Primes(int maxnum) {\n     // var sieve = new BitArray(maxnum + 1, true);\n     bool[] sieve = Enumerable.Repeat(true, maxnum + 1).ToArray();\n     int squareroot = (int)Math.Sqrt(maxnum);\n     for (int i = 2; i <= squareroot; i++) {\n         if (sieve[i] == false)\n             continue;\n         for (int n = i * 2; n <= maxnum; n += i)\n             sieve[n] = false;\n     }\n     for (int i = 2; i <= maxnum; i++)\n         if (sieve[i] == true)\n             yield return i;\n }\n\n\n\u30b3\u30e1\u30f3\u30c8\u306e\u3088\u3046\u306bBitArray\u4f7f\u3048\u3070\u3001\u3082\u3063\u3068\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u826f\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\n\u3068\u3053\u308d\u3067\u3001\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5217\u6319\u304c\u59cb\u307e\u308b\u306e\u304c\u9045\u3059\u304e\u308b\u306e\u304c\u96e3\u70b9\u3067\u3059\u306d\u3002\u5168\u90e8\u306e\u7d20\u6570\u304c\u6c42\u307e\u3089\u306a\u3044\u3068\u5217\u6319\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\n\u6700\u521d\u306efor\u6587\u306e\u4e2d\u3067\u3001yield return \u3092\u66f8\u3051\u308c\u3070\u3001\u5217\u6319\u3092\u958b\u59cb\u3059\u308b\u306e\u304c\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\u3044\u304f\u3064\u307e\u3067\u306e\u7d20\u6570\u304c\u5fc5\u8981\u304b\u308f\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u5217\u6319\u958b\u59cb\u304c\u901f\u304f\u306a\u308c\u3070\u3001\u30c8\u30fc\u30bf\u30eb\u306e\u51e6\u7406\u6642\u9593\u3082\u77ed\u304f\u306a\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\u3067\u3001\u66f8\u3044\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nPrimesStartDash.cs\n static IEnumerable<int> Primes(int maxnum) {\n     var sieve = new BitArray(maxnum + 1, true);\n     int squareroot = (int)Math.Sqrt(maxnum);\n     for (int i = 2; i <= squareroot; i++) {\n         if (sieve[i] == false)\n             continue;\n         for (int n = i * 2; n <= maxnum; n += i)\n             sieve[n] = false;\n         if (sieve[i])\n             yield return i;  // \u3053\u3053\u3067\u5217\u6319\u3057\u3066\u3057\u307e\u3046\n     }\n     for (int i = squareroot + 1; i <= maxnum; i++)\n         if (sieve[i] == true)\n             yield return i;\n }\n\n\n\u3046\u30fc\u30fc\u3093\u3001\u3067\u3082\u3001Math.Sqrt(maxnum) \u306e\u5024\u307e\u3067\u3057\u304b\u5217\u6319\u958b\u59cb\u3092\u65e9\u3081\u3089\u308c\u306a\u3044\u304b\u3089\u3001\u307b\u3068\u3093\u3069\u30e1\u30ea\u30c3\u30c8\u7121\u3044\u304b\u306a\u3002\n\u4e00\u77ac\u3001\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c...\n\u3082\u3063\u3068\u7a81\u304d\u8a70\u3081\u3066\u8003\u3048\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u5b9f\u7528\u7684\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u6b62\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u8ffd\u8a18 (\"\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\"\u306e\u6539\u826f\u30d0\u30fc\u30b8\u30e7\u30f3)\n\u3082\u3046\u5c11\u3057\u3001\u7a81\u304d\u8a70\u3081\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u826f\u304f\u8003\u3048\u3066\u307f\u308b\u3068\u3001\n\n\u6574\u65702\u3067\u7be9\u3092\u639b\u3051\u305f\u5f8c\u306e\u914d\u5217\u306e\u72b6\u614b\u3092\u898b\u308b\u3068\u30012,3,5,7 \u307e\u3067\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u5f8c3\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300111,13\u306e\u7d20\u6570\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b4\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300117, 19, 23\u306e\u7d20\u6570\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\uff08\u5b9f\u969b\u306b\u306f\u30014\u3067\u7be9\u3092\u639b\u3051\u3066\u3082\u914d\u5217\u306e\u72b6\u614b\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u3053\u3046\u66f8\u3044\u3066\u304a\u304f)\n\u3055\u3089\u306b5\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300129, 31\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u6574\u6570n\u3067\u7be9\u3092\u639b\u3051\u7d42\u308f\u3063\u305f\u6642\u306b\u306f\u3001(n+1) * (n+1) - 1 \u4ee5\u4e0b\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5b9f\u8cea\u7684\u306b\u3001n+1\u3067\u7be9\u3092\u639b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u3001(n+1)*(n+1)\u304b\u3089\u3067\u3042\u308a\u3001\u3053\u308c\u3088\u308a\u5c0f\u3055\u3044\u5024\u306f\u3001n\u4ee5\u4e0b\u306e\u5024\u3067\u3059\u3067\u306b\u7be9\u3092\u639b\u3051\u3066\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u305d\u3053\u3067\u66f8\u304d\u63db\u3048\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001sieve\u306etrue\u3068false\u306e\u610f\u5473\u3092\u53cd\u5bfe\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nPrimesStartDash2.cs\n static IEnumerable<int> Primes(int maxnum) {\n    yield return 2;\n    yield return 3;\n    var sieve = new BitArray(maxnum + 1);\n    int squareroot = (int)Math.Sqrt(maxnum);\n    for (int i = 2; i <= squareroot; i++) {\n        if (sieve[i] == false) {\n            for (int n = i * 2; n <= maxnum; n += i)\n                sieve[n] = true;\n        }\n        for (int n = i * i + 1; n <= maxnum && n < (i + 1) * (i + 1); n++) {\n            if (!sieve[n])\n                yield return n;\n        }\n    }\n }\n\n\n\n2\u3064\u76ee\u306efor\u6587\u304c\u306a\u304f\u306a\u308a\u3001yield return\u306f\u3001\u6700\u521d\u306efor\u6587\u306e\u4e2d\u306b\u5168\u3066\u79fb\u52d5\u3067\u304d\u305f\u95a2\u4fc2\u3067\u3001\u6700\u521d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304b\u3089\u6bd4\u3079\u308b\u3068\u3001\u30b9\u30e0\u30fc\u30ba\u306b\u5217\u6319\u304c\u9032\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u305d\u308c\u3068\u3001\u300c\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\u300d\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u3088\u308a\u3082\u3001\u30b3\u30fc\u30c9\u3082\u305d\u308c\u307b\u3069\u8907\u96d1\u306b\u306a\u3089\u305a\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\u3068\u306f\u8a00\u3048\u3001\u5f15\u6570\u306b\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u6b20\u70b9\u306f\u6b8b\u308a\u307e\u3059\u3002\u300c1000\u307e\u3067\u306e\u7d20\u6570\u3092\u6c42\u3081\u305f\u3044\u300d\u3068\u3044\u3046\u8981\u6c42\u306b\u306f\u7b54\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u300c\u5c0f\u3055\u3044\u9806\u306b1000\u500b\u306e\u7d20\u6570\u3092\u6c42\u3081\u305f\u3044\u300d\u3068\u3044\u3046\u8981\u6c42\u306b\u306f\u3001\u3046\u307e\u304f\u5bfe\u5fdc\u3067\u304d\u307e\u305b\u3093\u3002\nyone64\u3055\u3093\u304c\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u304f\u308c\u305f\u3088\u3046\u306a\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u6642\u9593\u304c\u3067\u304d\u305f\u6642\u306b\u3001\u518d\u5ea6\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9 (\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044)\u3092\u4f7f\u3063\u305f\u7d20\u6570\u3092\u6c42\u3081\u308bC#\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u306b\u3064\u3044\u3066\u306f\u3001Wikipedia\u306e [\u3053\u3061\u3089](http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9)\u3092\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n##\u30ce\u30fc\u30de\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\nPrimes\u304c\u7d20\u6570\u3092\u6c42\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u30022\u304b\u3089\u5f15\u6570\u3067\u4e0e\u3048\u305f\u6574\u6570(maxnum)\u306e\u9593\u306e\u7d20\u6570\u3092\u5217\u6319\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u5f15\u6570\u306e\u5024\u3067\u3001\u5185\u90e8\u3067\u3075\u308b\u3044\u7528\u306e\u914d\u5217(sieve)\u306e\u8981\u7d20\u6570\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u623b\u308a\u5024\u306f\u3001```IEnumerable<T>```\u3067\u3059\u3002\n\n```csharp:SieveOfEratosthenes.cs  \nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    \n    class Program {\n        static void Main(string[] args) {\n            foreach(var n in Primes(200))\n                Console.Write(\"{0,3} \",n);\n            Console.WriteLine();\n            Console.ReadLine();\n        }\n\n        static IEnumerable<int> Primes(int maxnum) {\n            int[] sieve = Enumerable.Range(0, maxnum + 1).ToArray();\n            sieve[1] = 0;  // 0 : \u7d20\u6570\u3067\u306f\u306a\u3044\n            int squareroot = (int)Math.Sqrt(maxnum);\n            for (int i = 2; i <= squareroot; i++) {\n                if (sieve[i] <= 0)\n                    continue;\n                for (int n = i * 2; n <= maxnum; n += i)\n                    sieve[n] = 0;\n            }\n            return sieve.Where(n => n > 0);\n        }\n    }\n}\n```\n\n##\u7701\u30e1\u30e2\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\u3082\u3046\u5c11\u3057\u3001\u30e1\u30e2\u30ea\u52b9\u7387\u3092\u826f\u304f\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002int\u306e\u914d\u5217\u3067\u306f\u306a\u304f\u3066\u3001bool\u306e\u914d\u5217\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp:PrimesSavingMemory.cs\n static IEnumerable<int> Primes(int maxnum) {\n     // var sieve = new BitArray(maxnum + 1, true);\n     bool[] sieve = Enumerable.Repeat(true, maxnum + 1).ToArray();\n     int squareroot = (int)Math.Sqrt(maxnum);\n     for (int i = 2; i <= squareroot; i++) {\n         if (sieve[i] == false)\n             continue;\n         for (int n = i * 2; n <= maxnum; n += i)\n             sieve[n] = false;\n     }\n     for (int i = 2; i <= maxnum; i++)\n         if (sieve[i] == true)\n             yield return i;\n }\n```\n\n\u30b3\u30e1\u30f3\u30c8\u306e\u3088\u3046\u306bBitArray\u4f7f\u3048\u3070\u3001\u3082\u3063\u3068\u30e1\u30e2\u30ea\u52b9\u7387\u306f\u826f\u304f\u306a\u308a\u307e\u3059\u3002\n\n##\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\n\u3068\u3053\u308d\u3067\u3001\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u601d\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5217\u6319\u304c\u59cb\u307e\u308b\u306e\u304c\u9045\u3059\u304e\u308b\u306e\u304c\u96e3\u70b9\u3067\u3059\u306d\u3002\u5168\u90e8\u306e\u7d20\u6570\u304c\u6c42\u307e\u3089\u306a\u3044\u3068\u5217\u6319\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\n\u6700\u521d\u306efor\u6587\u306e\u4e2d\u3067\u3001```yield return``` \u3092\u66f8\u3051\u308c\u3070\u3001\u5217\u6319\u3092\u958b\u59cb\u3059\u308b\u306e\u304c\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\u3044\u304f\u3064\u307e\u3067\u306e\u7d20\u6570\u304c\u5fc5\u8981\u304b\u308f\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u5217\u6319\u958b\u59cb\u304c\u901f\u304f\u306a\u308c\u3070\u3001\u30c8\u30fc\u30bf\u30eb\u306e\u51e6\u7406\u6642\u9593\u3082\u77ed\u304f\u306a\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u3067\u3001\u66f8\u3044\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```csharp:PrimesStartDash.cs\n static IEnumerable<int> Primes(int maxnum) {\n     var sieve = new BitArray(maxnum + 1, true);\n     int squareroot = (int)Math.Sqrt(maxnum);\n     for (int i = 2; i <= squareroot; i++) {\n         if (sieve[i] == false)\n             continue;\n         for (int n = i * 2; n <= maxnum; n += i)\n             sieve[n] = false;\n         if (sieve[i])\n             yield return i;  // \u3053\u3053\u3067\u5217\u6319\u3057\u3066\u3057\u307e\u3046\n     }\n     for (int i = squareroot + 1; i <= maxnum; i++)\n         if (sieve[i] == true)\n             yield return i;\n }\n```\n\n\u3046\u30fc\u30fc\u3093\u3001\u3067\u3082\u3001```Math.Sqrt(maxnum)``` \u306e\u5024\u307e\u3067\u3057\u304b\u5217\u6319\u958b\u59cb\u3092\u65e9\u3081\u3089\u308c\u306a\u3044\u304b\u3089\u3001\u307b\u3068\u3093\u3069\u30e1\u30ea\u30c3\u30c8\u7121\u3044\u304b\u306a\u3002\n\u4e00\u77ac\u3001\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c...\n\u3082\u3063\u3068\u7a81\u304d\u8a70\u3081\u3066\u8003\u3048\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u5b9f\u7528\u7684\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u6b62\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n##\u8ffd\u8a18 (\"\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\"\u306e\u6539\u826f\u30d0\u30fc\u30b8\u30e7\u30f3)\n\n\u3082\u3046\u5c11\u3057\u3001\u7a81\u304d\u8a70\u3081\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u826f\u304f\u8003\u3048\u3066\u307f\u308b\u3068\u3001\n\n- \u6574\u65702\u3067\u7be9\u3092\u639b\u3051\u305f\u5f8c\u306e\u914d\u5217\u306e\u72b6\u614b\u3092\u898b\u308b\u3068\u30012,3,5,7 \u307e\u3067\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n- \u305d\u306e\u5f8c3\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300111,13\u306e\u7d20\u6570\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n- \u3055\u3089\u306b4\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300117, 19, 23\u306e\u7d20\u6570\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\uff08\u5b9f\u969b\u306b\u306f\u30014\u3067\u7be9\u3092\u639b\u3051\u3066\u3082\u914d\u5217\u306e\u72b6\u614b\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u8aac\u660e\u306e\u90fd\u5408\u4e0a\u3001\u3053\u3046\u66f8\u3044\u3066\u304a\u304f)\n- \u3055\u3089\u306b5\u3067\u7be9\u3092\u304b\u3051\u308b\u3068\u300129, 31\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u6574\u6570n\u3067\u7be9\u3092\u639b\u3051\u7d42\u308f\u3063\u305f\u6642\u306b\u306f\u3001(n+1) * (n+1) - 1 \u4ee5\u4e0b\u306e\u7d20\u6570\u304c\u6c42\u307e\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5b9f\u8cea\u7684\u306b\u3001n+1\u3067\u7be9\u3092\u639b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u306f\u3001(n+1)*(n+1)\u304b\u3089\u3067\u3042\u308a\u3001\u3053\u308c\u3088\u308a\u5c0f\u3055\u3044\u5024\u306f\u3001n\u4ee5\u4e0b\u306e\u5024\u3067\u3059\u3067\u306b\u7be9\u3092\u639b\u3051\u3066\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u66f8\u304d\u63db\u3048\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001sieve\u306etrue\u3068false\u306e\u610f\u5473\u3092\u53cd\u5bfe\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```csharp:PrimesStartDash2.cs\n static IEnumerable<int> Primes(int maxnum) {\n    yield return 2;\n    yield return 3;\n    var sieve = new BitArray(maxnum + 1);\n    int squareroot = (int)Math.Sqrt(maxnum);\n    for (int i = 2; i <= squareroot; i++) {\n        if (sieve[i] == false) {\n            for (int n = i * 2; n <= maxnum; n += i)\n                sieve[n] = true;\n        }\n        for (int n = i * i + 1; n <= maxnum && n < (i + 1) * (i + 1); n++) {\n            if (!sieve[n])\n                yield return n;\n        }\n    }\n }\n        \n```\n\n2\u3064\u76ee\u306efor\u6587\u304c\u306a\u304f\u306a\u308a\u3001```yield return```\u306f\u3001\u6700\u521d\u306efor\u6587\u306e\u4e2d\u306b\u5168\u3066\u79fb\u52d5\u3067\u304d\u305f\u95a2\u4fc2\u3067\u3001\u6700\u521d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304b\u3089\u6bd4\u3079\u308b\u3068\u3001\u30b9\u30e0\u30fc\u30ba\u306b\u5217\u6319\u304c\u9032\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u305d\u308c\u3068\u3001\u300c\u5217\u6319\u958b\u59cb\u3092\u65e9\u304f\u3059\u308b\u300d\u3067\u793a\u3057\u305f\u30b3\u30fc\u30c9\u3088\u308a\u3082\u3001\u30b3\u30fc\u30c9\u3082\u305d\u308c\u307b\u3069\u8907\u96d1\u306b\u306a\u3089\u305a\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n\n\u3068\u306f\u8a00\u3048\u3001\u5f15\u6570\u306b\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u6b20\u70b9\u306f\u6b8b\u308a\u307e\u3059\u3002\u300c1000\u307e\u3067\u306e\u7d20\u6570\u3092\u6c42\u3081\u305f\u3044\u300d\u3068\u3044\u3046\u8981\u6c42\u306b\u306f\u7b54\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u300c\u5c0f\u3055\u3044\u9806\u306b1000\u500b\u306e\u7d20\u6570\u3092\u6c42\u3081\u305f\u3044\u300d\u3068\u3044\u3046\u8981\u6c42\u306b\u306f\u3001\u3046\u307e\u304f\u5bfe\u5fdc\u3067\u304d\u307e\u305b\u3093\u3002\nyone64\u3055\u3093\u304c\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u304f\u308c\u305f\u3088\u3046\u306a\u5de5\u592b\u304c\u5fc5\u8981\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u6642\u9593\u304c\u3067\u304d\u305f\u6642\u306b\u3001\u518d\u5ea6\u8003\u3048\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n-----------------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n"}