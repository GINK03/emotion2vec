{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\u306eQiita\u6295\u7a3f\u8a18\u4e8b \u300c\u3010Python \u3067\u6570\u5024\u89e3\u6cd5\u3011\u57fa\u672c\u7d71\u8a08\u91cf\u30fb\u591a\u5909\u91cf\u89e3\u6790\u30fb\u6a5f\u68b0\u5b66\u7fd2\uff08\u6700\u9069\u5316\u8a08\u7b97\uff09\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u81ea\u529b\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u5b66\u7fd2 \uff5e \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u6cd5\uff08Gauss\u306e\u6d88\u53bb\u6cd5\uff09\u7de8\u300d\u306b\u5f15\u304d\u7d9a\u304d\u3001\u300c\u6383\u304d\u51fa\u3057\u6cd5\u300d\u3067\u9023\u7acb\uff11\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\u6570\u5024\u8a08\u7b97\u6cd5\u3092\u30b3\u30fc\u30c9\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e pp.89\uff5e91 \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u3092Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava2\u306b\u3088\u308b\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09\n\n\n\n\nPython \u30b9\u30af\u30ea\u30d7\u30c8 \uff08inverse_matrix.py\uff09\n\n\n\u524d\u56de\uff08Gauss\u306e\u6d88\u53bb\u6cd5\uff09\u5b9f\u88c5\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u306e\u5909\u66f4\u70b9\n\n\n1. 41\u884c\u76ee\u4ee5\u964d\u3001\u300c\u524d\u9032\u6d88\u53bb\u300d\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9 forel() \u3092\u524a\u9664\u3057\u3066\u3001sweep() \u306b\u5909\u66f4\n    * \u203b \u6383\u304d\u51fa\u3057\u6cd5\u306e\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9 sweep() \u3092\u65b0\u898f\u306b\u8a18\u8ff0\n2. \u5f8c\u9000\u4ee3\u5165\u306e\u51e6\u7406\u30b3\u30fc\u30c9\u3092\u524a\u9664\n3. \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3 \uff08\uff58\uff58\uff58\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\uff09\u3092\u30eb\u30fc\u30d7\u51e6\u7406\u3067\u51fa\u529b\u3059\u308b\u90e8\u5206\u3067\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u4e2d\u306b\u3001x[k] = eq[k][n]\u3092\u8ffd\u8a18\n\n\ninverse_matrix.py\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*-                                                                                  \n\nimport math\nimport numpy as np\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(\"\u300c\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u672c\u6570\uff08\u4fc2\u6570\u884c\u5217\u306e\u884c\u6570\uff09\u300d\u3068\u300c\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u300d\u304c\u540c\u3058\u5834\u5408\u306e\u5909\u6570\u306e\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\\n\")\n    print(\"\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n    n = int(raw_input())\n    print(\"\\n\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u3092 %d\u3000\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\" % n)\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u306e\u8981\u7d20\u6570\u3092\u3082\u3064\uff11\u6b21\u5143\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u3092\u8981\u7d20 0 \u3067\u521d\u671f\u5316\n    x = [0 for col in range(n)]\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306e\u6700\u5f8c\u306e\u5217\u306b\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u53f3\u8fba\u306e\u6570\u5024\u5217\u3092\uff11\u5217\u52a0\u3048\u305f\u884c\u5217\u3092\u521d\u671f\u5316\n    eq = [[0 for col in range(n+1)] for row in range(n)]\n\n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217eq \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(\"\\n\\n\u5404\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u3092\u9806\u306b\u5165\u529b\u3057\u305f\u3042\u3068\u3001\u65b9\u7a0b\u5f0f\u306e\u53f3\u8fba\u306e\u6570\u5b57\u3092\u884c\u5217eq\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\")\n\n    for i in range(n):\n        for j in range(n+1):\n            print(\"\\n\u884c\u5217eq \u306e\u8981\u7d20 eq({i}, {j}) \u306b\u5024\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            eq[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089\u89e3\u3092\u6c42\u3081\u308b\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306b\u3001\u53f3\u8fba\u306e\u5024\u306e\u5217\u3092\u52a0\u3048\u305f\u884c\u5217eq \u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n {eq}\".format(eq=np.array(eq)))\n\n    #\u884c\u5217eq \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n\n    print(\"\\n\\n\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3063\u3066\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u884c\u5217eq \u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\\n\")\n\n    for k in range(n):  # \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3046 pivot()\u30e1\u30bd\u30c3\u30c9\u306b\u30eb\u30fc\u30d7\u3067k\u306e\u5024\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u9806\u6b21\u5b9f\u884c\n        pivot(k, n, eq)\n        if eq[k][k] == 0.0: # \u89e3\u306e\u5b58\u5728\u5224\u5b9a\u3092\u5b9f\u65bd \n            print(\"\u89e3\u306a\u3057\")\n        sweep(k, n, eq) #\u6383\u304d\u51fa\u3057\u64cd\u4f5c\u3092\u884c\u3046 sweepp()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\n    print(\"\u6c42\u3081\u305f\u4e0a\u4e09\u89d2\u884c\u5217 :\\n {eq}\".format(eq=np.array(eq)))\n\n    print(\"\\n\\n\u6383\u304d\u51fa\u3057\u6cd5\u3067\u6c42\u3081\u305f\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u5c0f\u6570\u70b9\u7b2c3\u4f4d\u306b\u307e\u308b\u3081\u3066\u3044\u307e\u3059\uff09\\n\")\n    for k in range(n):\n        x[k] = eq[k][n]\n        print(\"x[{k}] = {element}\".format(k=k, element=round(x[k], 3)))\n\n    print(\"\\n\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### pivot\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\uff1d\uff1d\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c\uff10\u306e\u5834\u5408\u3001\u884c\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef pivot(k, n, eq):\n    max = math.fabs(eq[k][k])\n    c = k\n    if(k != (n-1)):\n        a = (k+1)\n        while(a < n):\n            if(math.fabs(eq[a][k]) > max):\n                max = math.fabs(eq[a][k])\n                c = a\n            a += 1\n\n        if(c != k):\n            b = k\n            while(b <= n):\n                temp = eq[k][b]\n                eq[k][b] = eq[c][b]\n                eq[c][b] = temp\n                b += 1\n\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef sweep(k, n, eq):\n    f = eq[k][k]\n\n    b = k\n    while(b <= n):\n        eq[k][b] = float(eq[k][b])/float(f)\n        b += 1\n\n    for a in range(n):\n        g = eq[a][k]\n        if(a != k):\n            b = k\n            while(b <= n):\n                eq[a][b] = eq[a][b] - g*eq[k][b]\n                b += 1\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n\n\n\n\uff08 \u5b9f\u884c \uff09\n\n\u4ee5\u4e0b\u306e\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\\left\\{\n\\begin{array}{l}\ny+2z = 3 \\\\\nx+2y+z = 6 \\\\\nx-y+z = 3\n\\end{array}\n\\right.\n{y+2z=3x+2y+z=6x\u2212y+z=3{\\left\\{\n\\begin{array}{l}\ny+2z = 3 \\\\\nx+2y+z = 6 \\\\\nx-y+z = 3\n\\end{array}\n\\right.\n}\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306e\u8981\u7d20\u306e\u5024\u3092\uff11\u3064\u305a\u3064\u5165\u529b\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6e21\u3057\u307e\u3059\u3002\n\\left(\n\\begin{array}{l} 0 & 1 & 2 & 3\\\\\n                 1 & 2 & 1 & 6\\\\\n                 1 & -1 & 1 & 3\\\\\n\\end{array}\n\\right)\n(012312161\u2212113){\\left(\n\\begin{array}{l} 0 & 1 & 2 & 3\\\\\n                 1 & 2 & 1 & 6\\\\\n                 1 & -1 & 1 & 3\\\\\n\\end{array}\n\\right)\n}\n\u4e0a\u8a18\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u884c\u5217\u5909\u5f62\u64cd\u4f5c\u3092\u884c\u3044\u3001\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306e\u3046\u3061\u3001\u4e00\u756a\u53f3\u5074\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u3092\u9664\u3044\u305f \u4fc2\u6570\u884c\u5217\u306e\u90e8\u5206\u3092\u5358\u4f4d\u884c\u5217\u306b\u5909\u63db\u3055\u305b\u307e\u3059\u3002\n1. \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08pivoting\uff09\n2. \u6383\u304d\u51fa\u3057\u6cd5 \uff08sweeping method\uff09\n\u4e0a\u8a18\u306e\u64cd\u4f5c\u306e\u7d50\u679c\u3001\u4e00\u756a\u53f3\u5074\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u306e\u5024\u3082\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u306e\u5909\u5316\u3057\u305f\u7d50\u679c\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u304c\u3001\u6c42\u3081\u308b\u3079\u304d\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u3067\u3042\u308b x \u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nPython 2.7\npython inverse_matrix.py\n\n\n\n\n\n\uff08 \u8a08\u7b97\u7d50\u679c \uff09\n\nx = 3.0\\\\\ny = 1.0\\\\\nz = 1.0\nx=3.0y=1.0z=1.0{x = 3.0\\\\\ny = 1.0\\\\\nz = 1.0\n}\n\n\n\u7d50\u679c\u306e\u691c\u8a3c\n\nsympy \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u591a\u5143\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u305f\u7d50\u679c\u306e\u6570\u5024\u3068\u3064\u304d\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002\n\nPython 2.7\nfrom sympy import *\n\nx, y, z = symbols('x y z')\nsolve([y + 2*z -3, x + 2*y + z -6, x - y + z -3], [x, y, z])\n\n\n\n\n\u7d50\u679c\u306f\u4e00\u81f4\u3057\u307e\u3057\u305f\uff01\n\nx = 3\\\\\ny = 1\\\\\nz = 1\nx=3y=1z=1{x = 3\\\\\ny = 1\\\\\nz = 1\n}\n#### \u524d\u56de\u306e_Qiita_\u6295\u7a3f\u8a18\u4e8b __[\u300c\u3010Python \u3067\u6570\u5024\u89e3\u6cd5\u3011\u57fa\u672c\u7d71\u8a08\u91cf\u30fb\u591a\u5909\u91cf\u89e3\u6790\u30fb\u6a5f\u68b0\u5b66\u7fd2\uff08\u6700\u9069\u5316\u8a08\u7b97\uff09\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u81ea\u529b\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u5b66\u7fd2 \uff5e \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u6cd5\uff08Gauss\u306e\u6d88\u53bb\u6cd5\uff09\u7de8\u300d](http://qiita.com/HirofumiYashima/items/1be386f6c1faa425ae46)__\u306b\u5f15\u304d\u7d9a\u304d\u3001\u300c\u6383\u304d\u51fa\u3057\u6cd5\u300d\u3067\u9023\u7acb\uff11\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\u6570\u5024\u8a08\u7b97\u6cd5\u3092\u30b3\u30fc\u30c9\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n#### **\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e _pp.89\uff5e91_ \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u3092Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002**\n\n* __[\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava2\u306b\u3088\u308b\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09](http://gihodobooks.jp/book/3321-2.html)__\n\n![3321-2.jpg](https://qiita-image-store.s3.amazonaws.com/0/43487/56aee095-829e-0988-30ca-30d9eb669eda.jpeg)\n\n___\n\n#### **Python \u30b9\u30af\u30ea\u30d7\u30c8 \uff08__inverse_matrix.py__\uff09**\n\n##### __\u524d\u56de\uff08Gauss\u306e\u6d88\u53bb\u6cd5\uff09\u5b9f\u88c5\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u306e\u5909\u66f4\u70b9__\n\n___\n__1. 41\u884c\u76ee\u4ee5\u964d\u3001\u300c\u524d\u9032\u6d88\u53bb\u300d\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9 forel() \u3092\u524a\u9664\u3057\u3066\u3001sweep() \u306b\u5909\u66f4__\n    * __\u203b \u6383\u304d\u51fa\u3057\u6cd5\u306e\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9 _sweep()_ \u3092\u65b0\u898f\u306b\u8a18\u8ff0__\n__2. \u5f8c\u9000\u4ee3\u5165\u306e\u51e6\u7406\u30b3\u30fc\u30c9\u3092\u524a\u9664__\n__3. \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3 \uff08$\uff58$\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\uff09\u3092\u30eb\u30fc\u30d7\u51e6\u7406\u3067\u51fa\u529b\u3059\u308b\u90e8\u5206\u3067\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u4e2d\u306b\u3001x[k] = eq[k][n]\u3092\u8ffd\u8a18__\n\n___\n\n\n\n```{Python:inverse_matrix.py}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*-                                                                                  \n\nimport math\nimport numpy as np\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(\"\u300c\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u672c\u6570\uff08\u4fc2\u6570\u884c\u5217\u306e\u884c\u6570\uff09\u300d\u3068\u300c\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u300d\u304c\u540c\u3058\u5834\u5408\u306e\u5909\u6570\u306e\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\\n\")\n    print(\"\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\")\n    n = int(raw_input())\n    print(\"\\n\u65b9\u7a0b\u5f0f\u306e\u5909\u6570\uff08\u5143\uff09\u306e\u6570\u3092 %d\u3000\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u305f\u3002\" % n)\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u306e\u8981\u7d20\u6570\u3092\u3082\u3064\uff11\u6b21\u5143\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u3092\u8981\u7d20 0 \u3067\u521d\u671f\u5316\n    x = [0 for col in range(n)]\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306e\u6700\u5f8c\u306e\u5217\u306b\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u53f3\u8fba\u306e\u6570\u5024\u5217\u3092\uff11\u5217\u52a0\u3048\u305f\u884c\u5217\u3092\u521d\u671f\u5316\n    eq = [[0 for col in range(n+1)] for row in range(n)]\n    \n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217eq \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(\"\\n\\n\u5404\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u3092\u9806\u306b\u5165\u529b\u3057\u305f\u3042\u3068\u3001\u65b9\u7a0b\u5f0f\u306e\u53f3\u8fba\u306e\u6570\u5b57\u3092\u884c\u5217eq\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\")\n\n    for i in range(n):\n        for j in range(n+1):\n            print(\"\\n\u884c\u5217eq \u306e\u8981\u7d20 eq({i}, {j}) \u306b\u5024\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            eq[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089\u89e3\u3092\u6c42\u3081\u308b\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306b\u3001\u53f3\u8fba\u306e\u5024\u306e\u5217\u3092\u52a0\u3048\u305f\u884c\u5217eq \u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n {eq}\".format(eq=np.array(eq)))\n\n    #\u884c\u5217eq \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n\n    print(\"\\n\\n\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3063\u3066\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u884c\u5217eq \u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\\n\")\n\n    for k in range(n):  # \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3046 pivot()\u30e1\u30bd\u30c3\u30c9\u306b\u30eb\u30fc\u30d7\u3067k\u306e\u5024\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u9806\u6b21\u5b9f\u884c\n        pivot(k, n, eq)\n        if eq[k][k] == 0.0: # \u89e3\u306e\u5b58\u5728\u5224\u5b9a\u3092\u5b9f\u65bd \n            print(\"\u89e3\u306a\u3057\")\n        sweep(k, n, eq) #\u6383\u304d\u51fa\u3057\u64cd\u4f5c\u3092\u884c\u3046 sweepp()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\n    print(\"\u6c42\u3081\u305f\u4e0a\u4e09\u89d2\u884c\u5217 :\\n {eq}\".format(eq=np.array(eq)))\n\n    print(\"\\n\\n\u6383\u304d\u51fa\u3057\u6cd5\u3067\u6c42\u3081\u305f\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u5c0f\u6570\u70b9\u7b2c3\u4f4d\u306b\u307e\u308b\u3081\u3066\u3044\u307e\u3059\uff09\\n\")\n    for k in range(n):\n        x[k] = eq[k][n]\n        print(\"x[{k}] = {element}\".format(k=k, element=round(x[k], 3)))\n\n    print(\"\\n\")\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### pivot\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\uff1d\uff1d\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c\uff10\u306e\u5834\u5408\u3001\u884c\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef pivot(k, n, eq):\n    max = math.fabs(eq[k][k])\n    c = k\n    if(k != (n-1)):\n        a = (k+1)\n        while(a < n):\n            if(math.fabs(eq[a][k]) > max):\n                max = math.fabs(eq[a][k])\n                c = a\n            a += 1\n\n        if(c != k):\n            b = k\n            while(b <= n):\n                temp = eq[k][b]\n                eq[k][b] = eq[c][b]\n                eq[c][b] = temp\n                b += 1\n\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef sweep(k, n, eq):\n    f = eq[k][k]\n\n    b = k\n    while(b <= n):\n        eq[k][b] = float(eq[k][b])/float(f)\n        b += 1\n    \n    for a in range(n):\n        g = eq[a][k]\n        if(a != k):\n            b = k\n            while(b <= n):\n                eq[a][b] = eq[a][b] - g*eq[k][b]\n                b += 1\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n```\n\n### **\uff08 \u5b9f\u884c \uff09**\n__\u4ee5\u4e0b\u306e\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u3066\u307f\u307e\u3059\u3002__\n\n```{math}\n\\left\\{\n\\begin{array}{l}\ny+2z = 3 \\\\\nx+2y+z = 6 \\\\\nx-y+z = 3\n\\end{array}\n\\right.\n```\n\n**\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306e\u8981\u7d20\u306e\u5024\u3092\uff11\u3064\u305a\u3064\u5165\u529b\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6e21\u3057\u307e\u3059\u3002**\n\n```{math}\n\\left(\n\\begin{array}{l} 0 & 1 & 2 & 3\\\\\n                 1 & 2 & 1 & 6\\\\\n                 1 & -1 & 1 & 3\\\\\n\\end{array}\n\\right)\n```\n\n**\u4e0a\u8a18\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306b\u5bfe\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u884c\u5217\u5909\u5f62\u64cd\u4f5c\u3092\u884c\u3044\u3001\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306e\u3046\u3061\u3001\u4e00\u756a\u53f3\u5074\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u3092\u9664\u3044\u305f \u4fc2\u6570\u884c\u5217\u306e\u90e8\u5206\u3092\u5358\u4f4d\u884c\u5217\u306b\u5909\u63db\u3055\u305b\u307e\u3059\u3002**\n\n__1. \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08_pivoting_\uff09__\n__2. \u6383\u304d\u51fa\u3057\u6cd5 \uff08_sweeping method_\uff09__\n\n**\u4e0a\u8a18\u306e\u64cd\u4f5c\u306e\u7d50\u679c\u3001\u4e00\u756a\u53f3\u5074\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u306e\u5024\u3082\u5909\u5316\u3057\u307e\u3059\u3002\u3053\u306e\u5909\u5316\u3057\u305f\u7d50\u679c\u306e\u5b9a\u6570\u5217\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u304c\u3001\u6c42\u3081\u308b\u3079\u304d\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u3067\u3042\u308b _x_ \u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002**\n\n\n\n___\n\n\n```{Python:Python 2.7}\npython inverse_matrix.py\n```\n\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/6e162f04-82e1-9e7f-f2a0-532a447dcb31.png)\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/1539eea5-9945-cb02-2a33-802d1d8b73a8.png)\n\n### **\uff08 \u8a08\u7b97\u7d50\u679c \uff09**\n\n```{math}\nx = 3.0\\\\\ny = 1.0\\\\\nz = 1.0\n```\n\n___\n\n### __\u7d50\u679c\u306e\u691c\u8a3c__\n\n**_sympy_ \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u591a\u5143\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u305f\u7d50\u679c\u306e\u6570\u5024\u3068\u3064\u304d\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002**\n\n\n```{Python:Python 2.7}\nfrom sympy import *\n\nx, y, z = symbols('x y z')\nsolve([y + 2*z -3, x + 2*y + z -6, x - y + z -3], [x, y, z])\n```\n\n![pic_3.png](https://qiita-image-store.s3.amazonaws.com/0/43487/cab51585-a1eb-790a-71f6-ebc7e438197e.png)\n\n\n#### __\u7d50\u679c\u306f\u4e00\u81f4\u3057\u307e\u3057\u305f\uff01__\n\n```{math}\nx = 3\\\\\ny = 1\\\\\nz = 1\n```\n", "tags": ["Python2.7", "\u6570\u5024\u8a08\u7b97", "\u6570\u5b66", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "statistics"]}