{"context": "\n\nrancher-server\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3088\u3046\n\n\n\u95a2\u9023\u8a18\u4e8b\n\nRancherOS\u3067\u672c\u683c\u7684\u306a\u81ea\u5b85\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\u3057\u3088\u3046\nRancherOS\u3067rancher-server\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3088\u3046 \u2190\u3000\u4eca\u3053\u3053\nRancherOS\u3067rancher-agent\u3092\u69cb\u7bc9\u3057\u3088\u3046\nRancherOS\u3067GlusterFS\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u6c38\u7d9a\u5316\u3057\u3088\u3046\nRancherOS\u3067private registory \u3067docker image\u3092\u7ba1\u7406\u3057\u3088\u3046\nRancher\u306eCATALOG\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u4e00\u89a7 \n\n\nrancherOS\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\niso\u306e\u5834\u5408\n\n\nhttps://releases.rancher.com/os/latest/rancheros.iso \u3092CD\u306b\u713c\u304f\nCD\u8d77\u52d5\u3000(ID:rancher,Pass:rancher)\ntouch cloud-donfig.yml\n\ncloud-config.yml \u306e\u7de8\u96c6\n    #cloud-config\n    ssh_authorized_keys:\n      - ssh-rsa AAA...ZZZ example1@rancher\n      - ssh-rsa BBB...ZZZ example2@rancher\n\n    \u30e1\u30e2\n    \u57fa\u672c\u7684\u306a\u8a2d\u5b9a\u306fauthorized_keys\u3092\u66f8\u304f\u3060\u3051\u3067\u826f\u3044\u3002\n    tls\u306e\u8a2d\u5b9a\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u516c\u5f0fdoc\u306b\u3042\u308b\u3088\u3046\u306asystem-docker\u306b\u5909\u6570\u3092\u308f\u305f\u3059\u3084\u3064\u3092\u3059\u308b\u3068file\u30b7\u30b9\u30c6\u30e0\u304c\u58ca\u308c\u3066\u3057\u307e\u3063\u305f(\u30d0\u30b0\uff1f)\u306e\u3067\u6ce8\u610f\n    \u305d\u306e\u6642\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u306b\uff11\u5ea6centos\u3092\u5165\u308c\u76f4\u3057\u3066\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3092\u524a\u9664\u3057\u3066\u304b\u3089\u307e\u305f\u3001rancherOS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u3057\u306a\u3044\u3068\u6cbb\u3089\u306a\u3044\u73fe\u8c61\u304c\u304a\u304d\u305f\n\n    rancher:\n        docker:\n            tls_args: [--tlsverify, --tlscacert=ca.pem, --tlscert=server-cert.pem, --tlskey=server-key.pem,\n              '-H=0.0.0.0:2376']\n            args: [daemon, --log-opt, max-size=25m, --log-opt, max-file=2, -s, overlay, -G, docker, -H, 'unix:///var/run/docker.sock', --userland-proxy=false, (--insecue-registry docker.oooo.com:5000) \u3053\u308c\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u58ca\u308c\u305f\u3001\u306a\u304f\u3066\u3082\u3053\u308f\u308c\u305f\u3002]\n\n\n\nssh\u306e\u8a2d\u5b9a\n    \u57fa\u672c\u7684\u306b\u306f\u4f55\u3082\u3055\u308f\u3063\u3066\u306a\u3044\n    RancherOS\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067pass\u30ed\u30b0\u30a4\u30f3\u304c\u7981\u6b62\u3055\u308c\u308b\u304b\u3089\u3001\u4e0a\u306e\u9375\u767b\u9332\u306f\u7d76\u5bfe\u305b\u3093\u3068\u3044\u304b\u3093\u3070\u3044\u3002\n\n\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n    $ mkfs.ext4 -L RANCHER_STATE /dev/sda\n    $ sudo ros install -c cloud-config.yml -d /dev/sda\n\n\n\n\naws\u306e\u5834\u5408\n\n\nES2/ECS\u3067\u4f5c\u6210\n\n\nVPC\u3092\u4f5c\u6210\u3057\u3066\u305d\u306e\u4e2d\u3067\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7acb\u3066\u308b\nrancheros-v0.4.3-0-amazon-ecs-optimized\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\n\n\n\n            80 - 80\n            22 - 22\n            8080 - 8080\n            5000 - 5000(private registry\u7528)\n\n\nECS\u3067\u4f5c\u6210\n    ECS\u3067\u4f5c\u6210\u3057\u3066\u3082\u3044\u3044\u304c\u3001private registry\u306e\u3068\u304d\u306b\u5c11\u3057\u30cf\u30de\u3063\u305f\u304c\u3001\n    ECS\u74b0\u5883\u3067\u306f\u3001ECS\u30af\u30e9\u30b9\u30bf\u306b\u53c2\u52a0\u3059\u308b\u305f\u3081\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u6642\u306bamazon/amazon-ecs-agent\u30b3\u30f3\u30c6\u30ca\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5f8c\u3067docker\u30b5\u30fc\u30d3\u30b9\u306e\u307f\u3092\u518d\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u518d\u8d77\u52d5\u3082\u691c\u8a0e\u3057\u307e\u3057\u3087\u3046\u3002\n    \u3063\u3066\u3001(http://dev.classmethod.jp/cloud/docker-registry-recipes/)\n    \u6b63\u76f4ec2\u306e\u307b\u3046\u304c\u4f5c\u308a\u3084\u3059\u304b\u3063\u305f\u3002rancher\u306b\u3059\u308b\u306a\u3089\u306a\u304a\u3055\u3089\u3002\n\n\nvagrant\u306e\u5834\u5408\n\n\n\nhttps://github.com/rancher/os-vagrant.git \u3092clone\nVagrantfile\u3092\u7de8\u96c6\n\n    -- 8\u884c\u76ee$number_of_nodes = 1\n    ++ 8\u884c\u76ee$number_of_nodes = 3\n    # \u30ce\u30fc\u30c9\u306e\u6570\u306b\u5408\u308f\u305b\u3066\u5909\u3048\u308c\u3070\u3088\u308d\u3057\n\n    #vm\u9593\u3067\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n        #\u3053\u3053\u306f\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u30d6\u30ea\u30c3\u30b8\u306b\u3059\u308b\u306a\u3089public\u3067\n    -- web.vm.network :private_network, ip: ip\n    ++ web.vm.network :public_network, ip: ip, virtualbox__intnet: \"intnet\"\n\n\n\n    $ vagrant up\n\n\n\u30e1\u30e2\n    up\u3057\u305f\u3089vagrant\u306e\u30a8\u30e9\u30fc\u30671\u500b\u3057\u304b\u7acb\u3061\u4e0a\u304c\u3089\u3093\u3051\u3093\u30ce\u30fc\u30c9\u306e\u56de\u6570\n    vagrant up\u305b\u3093\u3068\u3044\u304b\u3093\u3063\u307d\u3044\n\n\n    $ vagrant ssh {rancher-01<\u3053\u3053\u306fvagrantfile\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u308b\u540d\u524d01..03>}\n\n\n\u7ba1\u7406\u753b\u9762\u3092\u8d70\u3089\u305b\u308b\n\n\ndocker run\n\n\nrun\u306b\u306f1GB\u306e\u7a7a\u304d\u5bb9\u91cf\u304c\u5fc5\u8981\u3089\u3057\u3044\n$ docker run -d --restart=always -p 8080:8080 rancher/server\n\n    \u30e1\u30e2\n        --restart=always\u3092\u3064\u3051\u3066\u8d77\u52d5\u3059\u308b\u3068\u3001\n        docker\u30c7\u30fc\u30e2\u30f3\u306e\u518d\u8d77\u52d5\n        \u30de\u30b7\u30f3\u306e\u518d\u8d77\u52d5\n        \u3069\u3061\u3089\u3067\u3082\u3001\u30b3\u30f3\u30c6\u30ca\u304c\u81ea\u52d5\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u308b\n\n--restart=always\u306b\u3064\u3044\u3066\u306e\u8003\u5bdf\n\n\u6570\u5206\u5f8crancher-server\u306e8080\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u7ba1\u7406\u753b\u9762\u304c\u73fe\u308c\u308b\n\n\n\n\n\nHAProxy\n\n\nRancherOS\u3067\u672c\u683c\u7684\u306a\u81ea\u5b85\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\u3057\u3088\u3046\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u6210\u306b\u3059\u308b\u305f\u3081\u306bproxy\u3092\u8a2d\u7f6e\n\n        rancher-server\u306b\u3057\u304b80\u3068443\u30dd\u30fc\u30c8\u3092\u958b\u3051\u3066\u306a\u3044\u306e\u3067\n        agent01\u3068agent02\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n        \u3055\u3089\u306b\u3001http\u3092https\u3067\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u304b\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n        \u306a\u304a\u3001\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b7\u30f3\u30b0\u65b9\u6cd5\u306froundrobin\u3092\u63a1\u7528\n\n\n\n\u4f5c\u696d\u30d5\u30a9\u30eb\u30c0\u3092\u3064\u304f\u308b\n$ cd\n$ mkdir haproxy\n$ cd haproxy\n$ touch Dockerfile\n$ touch proxy.cfg\n\n\n\nhaproxy.cfg\n\nglobal\n    maxconn     4192\n\ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option                  http-server-close\n    option                  forwardfor\n    option                  redispatch\n    retries                 3\n    timeout http-request    10s\n    timeout queue           1m\n    timeout connect         10s\n    timeout client          1m\n    timeout server          1m\n    timeout http-keep-alive 10s\n    timeout check           10s\n    maxconn                 3000\n\nfrontend  http *:80\n    \uff03redirect scheme https code 301 if !{ ssl_fc }\n    # ssl \u3092\u4f7f\u3046\u306a\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u304b\u3051\u308b\n\n    default_backend agent\n\n#\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u306a\u3069\u3067\u4ee3\u7528\u3082\u3057\u304f\u306f\u66f8\u304b\u306a\u3044\n#frontend  https\n#    bind *:443 ssl crt ~/ssl/okamu.ro.pem\n#    default_backend agent\n\nfrontend registry *:5000\n    default_backend registry\n\nbackend agent\n    balance     roundrobin\n    server      agent01 192.168.3.101:80\n    server      agent02 192.168.3.102:80\n\nbackend registry\n    balance roundrobin\n    server  agent01 192.168.3.101:5000\n    server  agent02 192.168.3.102:5000\n\n\n\n\nDockerfile\nFROM haproxy:1.5\nADD haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg\n#\u8a3c\u660e\u66f8\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\n#RUN mkdir -p ~/ssl\n#ADD ssl/okamu.ro.pem ~/ssl/okamu.ro.pem\nEXPOSE 80\n#EXPOSE 443\nEXPOSE 5000\n\n\n\n\nproxy run\ndocker build -t proxy .\ndocker run -d --restart=always -p 80:80 -p 443:443 -p 5000:5000 proxy\n\n\n\n\nrancherOS(\u30b5\u30fc\u30d0\u30fc)\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3084\u7ba1\u7406\n\nrancher/server\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n\nrancher/server\u306e\u505c\u6b62\n$ docker stop <container_id_of_original_server>\n\n\n\n\u4e00\u6642\u7684\u306bvolume\u306b\u9000\u907f\n$ docker create --volumes-from <container_name_of_original_server> --name rancher-data rancher/server:<tag_of_previous_rancher_server>\n\n\n\n\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306erancher/server\u3092pull\n$ docker pull rancher/server:latest\n\n\n\n\u9000\u907f\u3057\u3066\u304a\u3044\u305fvolume\u304b\u3089rancher/server\u3092run\u3059\u308b\n$ docker run -d --volumes-from rancher-data --restart=always -p 8080:8080 rancher/server:latest\n\n\n\n\n\u305d\u306e\u4ed6\n\nrancher\u30b5\u30fc\u30d0\u30fc\u304c\u843d\u3061\u3066\u3057\u307e\u3063\u305f\u3089\n\nrancherOS\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u624b\u9806\u3092\u8e0f\u3081\u3070\u3088\u308d\u3057\n\n# rancher-server\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3088\u3046\n\n![rancher-docker.png](https://qiita-image-store.s3.amazonaws.com/0/62822/8c5b23af-8d32-19ff-2922-ac75b50ce7e8.png)\n\n\n## \u95a2\u9023\u8a18\u4e8b\n+ [RancherOS\u3067\u672c\u683c\u7684\u306a\u81ea\u5b85\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\u3057\u3088\u3046](http://qiita.com/okasho1010/items/da52b4dc12221feca55c)\n+ **[RancherOS\u3067rancher-server\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3088\u3046](http://qiita.com/okasho1010/items/305e0af4545901d44a94) \u2190\u3000\u4eca\u3053\u3053**\n\n+ [RancherOS\u3067rancher-agent\u3092\u69cb\u7bc9\u3057\u3088\u3046](http://qiita.com/okasho1010/items/500c3705d2f4610cebe0)\n\n+ [RancherOS\u3067GlusterFS\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u6c38\u7d9a\u5316\u3057\u3088\u3046](http://qiita.com/okasho1010/items/2620da1b2e93437e8a74)\n\n+ [RancherOS\u3067private registory \u3067docker image\u3092\u7ba1\u7406\u3057\u3088\u3046](http://qiita.com/okasho1010/items/cf0a9569638d00a9e451)\n\n\n+ [Rancher\u306eCATALOG\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u4e00\u89a7](http://qiita.com/okasho1010/items/f6875d5bce2ac6752758) \n\n##rancherOS\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n![Rancher-Logo-Final-1.png](https://qiita-image-store.s3.amazonaws.com/0/62822/8a734e4d-b41d-7427-d09d-e033c8fd53f2.png)\n\n### iso\u306e\u5834\u5408\n\n- https://releases.rancher.com/os/latest/rancheros.iso \u3092CD\u306b\u713c\u304f\n- CD\u8d77\u52d5\u3000(ID:rancher,Pass:rancher)\n- touch cloud-donfig.yml\n- cloud-config.yml \u306e\u7de8\u96c6\n\n\t```\n\t\t#cloud-config\n\t\tssh_authorized_keys:\n\t\t  - ssh-rsa AAA...ZZZ example1@rancher\n\t\t  - ssh-rsa BBB...ZZZ example2@rancher\n\t```\n\n\t```\n\t\t\u30e1\u30e2\n\t\t\u57fa\u672c\u7684\u306a\u8a2d\u5b9a\u306fauthorized_keys\u3092\u66f8\u304f\u3060\u3051\u3067\u826f\u3044\u3002\n\t\ttls\u306e\u8a2d\u5b9a\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u516c\u5f0fdoc\u306b\u3042\u308b\u3088\u3046\u306asystem-docker\u306b\u5909\u6570\u3092\u308f\u305f\u3059\u3084\u3064\u3092\u3059\u308b\u3068file\u30b7\u30b9\u30c6\u30e0\u304c\u58ca\u308c\u3066\u3057\u307e\u3063\u305f(\u30d0\u30b0\uff1f)\u306e\u3067\u6ce8\u610f\n\t\t\u305d\u306e\u6642\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u306b\uff11\u5ea6centos\u3092\u5165\u308c\u76f4\u3057\u3066\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3092\u524a\u9664\u3057\u3066\u304b\u3089\u307e\u305f\u3001rancherOS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u3057\u306a\u3044\u3068\u6cbb\u3089\u306a\u3044\u73fe\u8c61\u304c\u304a\u304d\u305f\n\t```\n\n\t```\n\t\trancher:\n\t\t  \tdocker:\n\t\t\t    tls_args: [--tlsverify, --tlscacert=ca.pem, --tlscert=server-cert.pem, --tlskey=server-key.pem,\n\t\t\t      '-H=0.0.0.0:2376']\n\t\t\t    args: [daemon, --log-opt, max-size=25m, --log-opt, max-file=2, -s, overlay, -G, docker, -H, 'unix:///var/run/docker.sock', --userland-proxy=false, (--insecue-registry docker.oooo.com:5000) \u3053\u308c\u3092\u66f8\u3053\u3046\u3068\u3057\u3066\u58ca\u308c\u305f\u3001\u306a\u304f\u3066\u3082\u3053\u308f\u308c\u305f\u3002]\n\t```\n\n- ssh\u306e\u8a2d\u5b9a\n\n\t```\n\t\t\u57fa\u672c\u7684\u306b\u306f\u4f55\u3082\u3055\u308f\u3063\u3066\u306a\u3044\n\t\tRancherOS\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067pass\u30ed\u30b0\u30a4\u30f3\u304c\u7981\u6b62\u3055\u308c\u308b\u304b\u3089\u3001\u4e0a\u306e\u9375\u767b\u9332\u306f\u7d76\u5bfe\u305b\u3093\u3068\u3044\u304b\u3093\u3070\u3044\u3002\n\t```\n\n- \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\t\n\t```\n\t\t$ mkfs.ext4 -L RANCHER_STATE /dev/sda\n\t\t$ sudo ros install -c cloud-config.yml -d /dev/sda\n\t```\n\n\n### aws\u306e\u5834\u5408\n![2000px-AWS_Simple_Icons_AWS_Cloud.svg.png](https://qiita-image-store.s3.amazonaws.com/0/62822/422aa7b8-8111-6ff2-7be0-e34f05532e03.png)\n\n- ES2/ECS\u3067\u4f5c\u6210\n\t* VPC\u3092\u4f5c\u6210\u3057\u3066\u305d\u306e\u4e2d\u3067\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7acb\u3066\u308b\n\t* rancheros-v0.4.3-0-amazon-ecs-optimized\n\t* \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\n\n```\n\t\t\t80 - 80\n\t\t\t22 - 22\n\t\t\t8080 - 8080\n\t\t\t5000 - 5000(private registry\u7528)\n```\n\n- ECS\u3067\u4f5c\u6210\n\t\tECS\u3067\u4f5c\u6210\u3057\u3066\u3082\u3044\u3044\u304c\u3001private registry\u306e\u3068\u304d\u306b\u5c11\u3057\u30cf\u30de\u3063\u305f\u304c\u3001\n\t\tECS\u74b0\u5883\u3067\u306f\u3001ECS\u30af\u30e9\u30b9\u30bf\u306b\u53c2\u52a0\u3059\u308b\u305f\u3081\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u6642\u306bamazon/amazon-ecs-agent\u30b3\u30f3\u30c6\u30ca\u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5f8c\u3067docker\u30b5\u30fc\u30d3\u30b9\u306e\u307f\u3092\u518d\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u518d\u8d77\u52d5\u3082\u691c\u8a0e\u3057\u307e\u3057\u3087\u3046\u3002\n\t\t\u3063\u3066\u3001(http://dev.classmethod.jp/cloud/docker-registry-recipes/)\n\t\t\u6b63\u76f4ec2\u306e\u307b\u3046\u304c\u4f5c\u308a\u3084\u3059\u304b\u3063\u305f\u3002rancher\u306b\u3059\u308b\u306a\u3089\u306a\u304a\u3055\u3089\u3002\n\n### vagrant\u306e\u5834\u5408\n![963dd071-cdbb-35d7-666b-489ac950fbd3.png](https://qiita-image-store.s3.amazonaws.com/0/62822/a7ceb332-b747-02cb-9fb1-ebaab99b42bf.png)\n\n\n- https://github.com/rancher/os-vagrant.git \u3092clone\n- Vagrantfile\u3092\u7de8\u96c6\n\t\n```\n\t-- 8\u884c\u76ee$number_of_nodes = 1\n\t++ 8\u884c\u76ee$number_of_nodes = 3\n\t# \u30ce\u30fc\u30c9\u306e\u6570\u306b\u5408\u308f\u305b\u3066\u5909\u3048\u308c\u3070\u3088\u308d\u3057\n\n\t#vm\u9593\u3067\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n        #\u3053\u3053\u306f\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u30d6\u30ea\u30c3\u30b8\u306b\u3059\u308b\u306a\u3089public\u3067\n\t-- web.vm.network :private_network, ip: ip\n\t++ web.vm.network :public_network, ip: ip, virtualbox__intnet: \"intnet\"\n\n```\n\n```\n\n\t$ vagrant up\n\n```\n\n\n```\n\u30e1\u30e2\n\tup\u3057\u305f\u3089vagrant\u306e\u30a8\u30e9\u30fc\u30671\u500b\u3057\u304b\u7acb\u3061\u4e0a\u304c\u3089\u3093\u3051\u3093\u30ce\u30fc\u30c9\u306e\u56de\u6570\n\tvagrant up\u305b\u3093\u3068\u3044\u304b\u3093\u3063\u307d\u3044\n\n```\n\n```\n\t$ vagrant ssh {rancher-01<\u3053\u3053\u306fvagrantfile\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u308b\u540d\u524d01..03>}\n```\n\n\n\n## \u7ba1\u7406\u753b\u9762\u3092\u8d70\u3089\u305b\u308b\n+ docker run\n\t- run\u306b\u306f1GB\u306e\u7a7a\u304d\u5bb9\u91cf\u304c\u5fc5\u8981\u3089\u3057\u3044\n\n\t\t```\n\t\t$ docker run -d --restart=always -p 8080:8080 rancher/server\n\t\t```\n\n\t\t```\n\t\t\t\u30e1\u30e2\n\t\t\t\t--restart=always\u3092\u3064\u3051\u3066\u8d77\u52d5\u3059\u308b\u3068\u3001\n\t\t\t\tdocker\u30c7\u30fc\u30e2\u30f3\u306e\u518d\u8d77\u52d5\n\t\t\t\t\u30de\u30b7\u30f3\u306e\u518d\u8d77\u52d5\n\t\t\t\t\u3069\u3061\u3089\u3067\u3082\u3001\u30b3\u30f3\u30c6\u30ca\u304c\u81ea\u52d5\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u308b\n\t\t```\n\t\t[--restart=always\u306b\u3064\u3044\u3066\u306e\u8003\u5bdf](http://qiita.com/manabuishiirb/items/f7edf11572f9256018b2)\n\n\t- \u6570\u5206\u5f8crancher-server\u306e8080\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u7ba1\u7406\u753b\u9762\u304c\u73fe\u308c\u308b\n\t\n<img width=\"1680\" alt=\"Screen Shot 2016-06-07 at 00.02.59.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/62822/7695661e-1fdf-4cb6-996c-9547a69eb1cb.png\">\n\n\n## HAProxy\n- [RancherOS\u3067\u672c\u683c\u7684\u306a\u81ea\u5b85\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\u3057\u3088\u3046](http://qiita.com/okasho1010/items/da52b4dc12221feca55c)\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u6210\u306b\u3059\u308b\u305f\u3081\u306bproxy\u3092\u8a2d\u7f6e\n\n```\n\t\trancher-server\u306b\u3057\u304b80\u3068443\u30dd\u30fc\u30c8\u3092\u958b\u3051\u3066\u306a\u3044\u306e\u3067\n\t\tagent01\u3068agent02\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u632f\u308a\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\t\t\u3055\u3089\u306b\u3001http\u3092https\u3067\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u304b\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\t\t\u306a\u304a\u3001\u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b7\u30f3\u30b0\u65b9\u6cd5\u306froundrobin\u3092\u63a1\u7528\n```\n\n+ \u4f5c\u696d\u30d5\u30a9\u30eb\u30c0\u3092\u3064\u304f\u308b\n\n\n\t```\n\t$ cd\n\t$ mkdir haproxy\n\t$ cd haproxy\n\t$ touch Dockerfile\n\t$ touch proxy.cfg\n\t```\n\n- haproxy.cfg\n\n\t```\n\n\tglobal\n\t\tmaxconn     4192\n\n\tdefaults\n\t    mode                    http\n\t    log                     global\n\t    option                  httplog\n\t    option                  dontlognull\n\t    option                  http-server-close\n\t    option                  forwardfor\n\t    option                  redispatch\n\t    retries                 3\n\t    timeout http-request    10s\n\t    timeout queue           1m\n\t    timeout connect         10s\n\t    timeout client          1m\n\t    timeout server          1m\n\t    timeout http-keep-alive 10s\n\t    timeout check           10s\n\t    maxconn                 3000\n\n\tfrontend  http *:80\n\t    \uff03redirect scheme https code 301 if !{ ssl_fc }\n\t    # ssl \u3092\u4f7f\u3046\u306a\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3092\u304b\u3051\u308b\n\n\t    default_backend agent\n\n\t#\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u306a\u3069\u3067\u4ee3\u7528\u3082\u3057\u304f\u306f\u66f8\u304b\u306a\u3044\n\t#frontend  https\n\t#    bind *:443 ssl crt ~/ssl/okamu.ro.pem\n\t#    default_backend agent\n\n\tfrontend registry *:5000\n\t    default_backend registry\n\n\tbackend agent\n\t    balance     roundrobin\n\t    server      agent01 192.168.3.101:80\n\t    server      agent02 192.168.3.102:80\n\n\tbackend registry\n\t    balance roundrobin\n\t    server \tagent01 192.168.3.101:5000\n\t    server \tagent02 192.168.3.102:5000\n\n\t```\n\n- Dockerfile\n\n\t```\n\tFROM haproxy:1.5\n\tADD haproxy.cfg /usr/local/etc/haproxy/haproxy.cfg\n\t#\u8a3c\u660e\u66f8\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\n\t#RUN mkdir -p ~/ssl\n\t#ADD ssl/okamu.ro.pem ~/ssl/okamu.ro.pem\n\tEXPOSE 80\n\t#EXPOSE 443\n\tEXPOSE 5000\n\n\t```\n- proxy run\n\n\t```\n\tdocker build -t proxy .\n\tdocker run -d --restart=always -p 80:80 -p 443:443 -p 5000:5000 proxy\n\t```\n\n##rancherOS(\u30b5\u30fc\u30d0\u30fc)\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3084\u7ba1\u7406\n### rancher/server\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n0. rancher/server\u306e\u505c\u6b62\n\n\t```\n\t$ docker stop <container_id_of_original_server>\n\t```\n0. \u4e00\u6642\u7684\u306bvolume\u306b\u9000\u907f\n\n\t```\n\t$ docker create --volumes-from <container_name_of_original_server> --name rancher-data rancher/server:<tag_of_previous_rancher_server>\n\t```\n0. \u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306erancher/server\u3092pull\n\n\t```\n\t$ docker pull rancher/server:latest\n\t```\n0. \u9000\u907f\u3057\u3066\u304a\u3044\u305fvolume\u304b\u3089rancher/server\u3092run\u3059\u308b\n\n\t```\n\t$ docker run -d --volumes-from rancher-data --restart=always -p 8080:8080 rancher/server:latest\n\t```\n\n##\u305d\u306e\u4ed6\n###rancher\u30b5\u30fc\u30d0\u30fc\u304c\u843d\u3061\u3066\u3057\u307e\u3063\u305f\u3089\n- rancherOS\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u624b\u9806\u3092\u8e0f\u3081\u3070\u3088\u308d\u3057\n", "tags": ["rancher", "docker", "server", "\u65b0\u4eba\u30d7\u30ed\u30b0\u30e9\u30de\u5fdc\u63f4"]}