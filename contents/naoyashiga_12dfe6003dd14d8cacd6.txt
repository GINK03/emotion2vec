{"context": "\n\n\u4e8c\u91cd\u632f\u308a\u5b50\u306f\u30ab\u30aa\u30b9\u306a\u904b\u52d5\u3092\u3059\u308b\u3053\u3068\u3067\u77e5\u3089\u308c\u3066\u3044\u308b\u3002\u305d\u306e\u8ecc\u8de1\u3092Processing\u3067\u66f8\u304f\u3068\u7f8e\u3057\u3044\u3002\nhttps://ja.wikipedia.org/wiki/%E4%BA%8C%E9%87%8D%E6%8C%AF%E3%82%8A%E5%AD%90\n\n\u5358\u632f\u308a\u5b50\u306e\u4f5c\u308a\u65b9\nThe Nature of Code\u300c3.9 Trigonometry and Forces: The Pendulum\u300d\u3092\u8aad\u3082\u3046\u3002\nhttp://natureofcode.com/book/chapter-3-oscillation/\n\n\u4e8c\u91cd\u632f\u308a\u5b50\u306e\u52a0\u901f\u5ea6\n\\theta_1'' = \\frac{-g(2m_1 + m_2){\\sin \\theta_1} - m_2g{\\sin (\\theta_1 - 2\\theta_2) -2{\\sin (\\theta_1 - \\theta_2)}}m_2(\\theta_2'^2L_2+\\theta_1'^2L_1{\\cos(\\theta_1 - \\theta_2))}}{L_1(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n$${\\theta_1'' = \\frac{-g(2m_1 + m_2){\\sin \\theta_1} - m_2g{\\sin (\\theta_1 - 2\\theta_2) -2{\\sin (\\theta_1 - \\theta_2)}}m_2(\\theta_2'^2L_2+\\theta_1'^2L_1{\\cos(\\theta_1 - \\theta_2))}}{L_1(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n}$$\n\\theta_2'' = \\frac{2{\\sin (\\theta_1 - \\theta_2)(\\theta_1'^2L_1(m_1+m_2)+g(m_1+m_2){\\cos \\theta_1}}+\\theta_2'^2L_2m_2{\\cos(\\theta_1 - \\theta_2))}}{L_2(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n$${\\theta_2'' = \\frac{2{\\sin (\\theta_1 - \\theta_2)(\\theta_1'^2L_1(m_1+m_2)+g(m_1+m_2){\\cos \\theta_1}}+\\theta_2'^2L_2m_2{\\cos(\\theta_1 - \\theta_2))}}{L_2(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n}$$\n\u4e8c\u91cd\u632f\u308a\u5b50\u306e\u52a0\u901f\u5ea6\u306f\u4e0a\u306e\u3088\u3046\u306a\u30a8\u30b0\u3044\u6570\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\n\n\u89aa\u306e\u632f\u308a\u5b50\n\u5185\u5074\u306e\u632f\u308a\u5b50\u3092\u89aa\u3068\u3059\u308b\u3002\n\n\u89d2\u901f\u5ea6\n\u89d2\u5ea6\u306e\u4e00\u56de\u5fae\u5206\u304c\u89d2\u901f\u5ea6\u306b\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002\nfloat alpha = -gravity * (2 * mass1 + mass2) * sin(angle)-mass2 * gravity * sin(angle - 2 * childAngle) - 2 * sin(angle - childAngle) * mass2 *(childAngleVelocity * childAngleVelocity * l2 + angleVelocity * angleVelocity * l1 * cos(angle - childAngle));\n\nfloat beta = l1 * (2 * mass1 + mass2 - mass2 * cos(2 * angle - 2 * childAngle));\n\nangleAcceleration = alpha / beta;\n\n\n\u89d2\u5ea6\u3092\u6c42\u3081\u308b\nangleVelocity += angleAcceleration;\nangle += angleVelocity;\n\n\n\u5b50\u306e\u632f\u308a\u5b50\n\u5916\u5074\u306e\u632f\u308a\u5b50\u3092\u5b50\u3068\u3059\u308b\u3002\n\n\u89d2\u901f\u5ea6\nfloat gunnma = 2 * sin(angle - childAngle) * (angleVelocity * angleVelocity * l1 *(mass1 + mass2) + gravity * (mass1 + mass2) * cos(angle) + childAngleVelocity * childAngleVelocity * l2 * mass2 * cos(angle - childAngle));\n\nfloat phai = l2 * (2 * mass1 + mass2 - mass2 * cos(2 * angle - 2 * childAngle));\n\n\nchildAngleAcceleration = gunnma / phai;\n\n\n\u89d2\u5ea6\u3092\u6c42\u3081\u308b\nchildAngleVelocity += childAngleAcceleration;\nchildAngle += childAngleVelocity;\n\n\n\u63cf\u753b\nvoid display() {\n\u3000// \u89aa\u306e\u632f\u308a\u5b50\n  location.set(l1 * sin(angle), l1 * cos(angle), 0);\n\n  location.add(origin);\n\n  translate(0, height / 3);\n  float c = map(location.x,0, width, 0, 255);\n  stroke(96, 230,c);\n  fill(255);\n\n\n  line(origin.x, origin.y, location.x, location.y);\n  ellipse(location.x, location.y, mass1 * 3, mass1 * 3);\n\n  // \u5b50\u306e\u632f\u308a\u5b50\n  childLocation = location.get();\n  childLocation.add(l2 * sin(childAngle), l2 * cos(childAngle));\n\n  line(location.x, location.y, childLocation.x, childLocation.y);\n  ellipse(childLocation.x, childLocation.y, mass2 * 3, mass2 * 3);\n  // ellipse(childLocation.x, childLocation.y, 1, 1);\n}\n\n\n\u53c2\u8003\n\nhttp://www.myphysicslab.com/dbl_pendulum.html\n\n\n\n<img width=\"692\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-16 17.33.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/26043/9205b00f-5ab2-f9b1-082e-07df7388c85c.png\">\n<img width=\"633\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-16 17.33.56.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/26043/ba6e2f0f-7d15-c4f6-529d-72f6f354da90.png\">\n\u4e8c\u91cd\u632f\u308a\u5b50\u306f\u30ab\u30aa\u30b9\u306a\u904b\u52d5\u3092\u3059\u308b\u3053\u3068\u3067\u77e5\u3089\u308c\u3066\u3044\u308b\u3002\u305d\u306e\u8ecc\u8de1\u3092Processing\u3067\u66f8\u304f\u3068\u7f8e\u3057\u3044\u3002\n\nhttps://ja.wikipedia.org/wiki/%E4%BA%8C%E9%87%8D%E6%8C%AF%E3%82%8A%E5%AD%90\n\n# \u5358\u632f\u308a\u5b50\u306e\u4f5c\u308a\u65b9\nThe Nature of Code\u300c3.9 Trigonometry and Forces: The Pendulum\u300d\u3092\u8aad\u3082\u3046\u3002\nhttp://natureofcode.com/book/chapter-3-oscillation/\n\n# \u4e8c\u91cd\u632f\u308a\u5b50\u306e\u52a0\u901f\u5ea6\n```math\n\\theta_1'' = \\frac{-g(2m_1 + m_2){\\sin \\theta_1} - m_2g{\\sin (\\theta_1 - 2\\theta_2) -2{\\sin (\\theta_1 - \\theta_2)}}m_2(\\theta_2'^2L_2+\\theta_1'^2L_1{\\cos(\\theta_1 - \\theta_2))}}{L_1(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n```\n\n```math\n\\theta_2'' = \\frac{2{\\sin (\\theta_1 - \\theta_2)(\\theta_1'^2L_1(m_1+m_2)+g(m_1+m_2){\\cos \\theta_1}}+\\theta_2'^2L_2m_2{\\cos(\\theta_1 - \\theta_2))}}{L_2(2m_1+m_2-m_2{\\cos(2\\theta_1 - 2\\theta_2))}}\n```\n\u4e8c\u91cd\u632f\u308a\u5b50\u306e\u52a0\u901f\u5ea6\u306f\u4e0a\u306e\u3088\u3046\u306a\u30a8\u30b0\u3044\u6570\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\n\n\n## \u89aa\u306e\u632f\u308a\u5b50\n\u5185\u5074\u306e\u632f\u308a\u5b50\u3092\u89aa\u3068\u3059\u308b\u3002\n###\u89d2\u901f\u5ea6\n\u89d2\u5ea6\u306e\u4e00\u56de\u5fae\u5206\u304c\u89d2\u901f\u5ea6\u306b\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002\n\n```java\nfloat alpha = -gravity * (2 * mass1 + mass2) * sin(angle)-mass2 * gravity * sin(angle - 2 * childAngle) - 2 * sin(angle - childAngle) * mass2 *(childAngleVelocity * childAngleVelocity * l2 + angleVelocity * angleVelocity * l1 * cos(angle - childAngle));\n\nfloat beta = l1 * (2 * mass1 + mass2 - mass2 * cos(2 * angle - 2 * childAngle));\n\nangleAcceleration = alpha / beta;\n```\n\n###\u89d2\u5ea6\u3092\u6c42\u3081\u308b\n```java\nangleVelocity += angleAcceleration;\nangle += angleVelocity;\n```\n\n## \u5b50\u306e\u632f\u308a\u5b50\n\u5916\u5074\u306e\u632f\u308a\u5b50\u3092\u5b50\u3068\u3059\u308b\u3002\n###\u89d2\u901f\u5ea6\n```java\nfloat gunnma = 2 * sin(angle - childAngle) * (angleVelocity * angleVelocity * l1 *(mass1 + mass2) + gravity * (mass1 + mass2) * cos(angle) + childAngleVelocity * childAngleVelocity * l2 * mass2 * cos(angle - childAngle));\n\nfloat phai = l2 * (2 * mass1 + mass2 - mass2 * cos(2 * angle - 2 * childAngle));\n\n\nchildAngleAcceleration = gunnma / phai;\n```\n\n###\u89d2\u5ea6\u3092\u6c42\u3081\u308b\n```java\nchildAngleVelocity += childAngleAcceleration;\nchildAngle += childAngleVelocity;\n```\n\n# \u63cf\u753b\n```java\nvoid display() {\n\u3000// \u89aa\u306e\u632f\u308a\u5b50\n  location.set(l1 * sin(angle), l1 * cos(angle), 0);\n\n  location.add(origin);\n\n  translate(0, height / 3);\n  float c = map(location.x,0, width, 0, 255);\n  stroke(96, 230,c);\n  fill(255);\n\n\n  line(origin.x, origin.y, location.x, location.y);\n  ellipse(location.x, location.y, mass1 * 3, mass1 * 3);\n\n  // \u5b50\u306e\u632f\u308a\u5b50\n  childLocation = location.get();\n  childLocation.add(l2 * sin(childAngle), l2 * cos(childAngle));\n\n  line(location.x, location.y, childLocation.x, childLocation.y);\n  ellipse(childLocation.x, childLocation.y, mass2 * 3, mass2 * 3);\n  // ellipse(childLocation.x, childLocation.y, 1, 1);\n}\n```\n\n- \u53c2\u8003  \n    - http://www.myphysicslab.com/dbl_pendulum.html\n", "tags": ["processing"]}