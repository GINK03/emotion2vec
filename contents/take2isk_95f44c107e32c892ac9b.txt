{"tags": ["Ruby", "Twitter", "TwitterAPI"], "context": " More than 1 year has passed since last update.\n\nRuby(rails)\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\u969b\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n1. \u30a2\u30d7\u30ea\u767b\u9332\u6642\u306b\u767a\u884c\u3055\u308c\u305fAPI_KEY\u3001API_SECRET\u3092\u4f7f\u3063\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b\n2. \u30ea\u30af\u30a8\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u3057\u3066\u3001twitter\u306e\u8a8d\u8a3c\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\n3. \u30e6\u30fc\u30b6\u30fc\u304c\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3067\u30a2\u30d7\u30ea\u3092\u8a8d\u8a3c\n4. \u8a8d\u8a3c\u5b8c\u4e86\u5f8c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306boauth_token\u3068oauth_verifier\u3092\u6301\u3063\u3066\u3001\u5e30\u3063\u3066\u304f\u308b\n5. \u30a2\u30d7\u30ea\u767b\u9332\u6642\u306b\u767a\u884c\u3055\u308c\u305fAPI_KEY\u3001API_SECRET\u30014\u3067\u624b\u306b\u5165\u3063\u305f\u5024\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\n\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u304b\u3001\u304b\u306a\u308a\u96d1\u3067\u3059\u3002\u53c2\u8003\u7a0b\u5ea6\u306b\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\u300c\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u300d\u306a\u767a\u60f3\u306e\u5143\u306b\u4f5c\u3063\u305f\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u5316\u3068\u304b\u7121\u8996\u3057\u3066\u307e\u3059\u3002\n\nget_access_token.rb\n\n  def index\n    request_tokens = get_request_token\n    oauth_token = request_tokens[\"oauth_token\"]\n    redirect_url = \"https://api.twitter.com/oauth/authenticate?oauth_token=#{oauth_token}\"\n    session[:oauth_token] = oauth_token\n    redirect_to redirect_url\n  end\n\n  def callback\n    oauth_token = params[:oauth_token]\n    oauth_verifier = params[:oauth_verifier]\n    denied = params[:denied]\n    if denied.present?\n      render text: \"Procedure canceled.\"\n      return\n    end\n    if session[:oauth_token].blank? || session[:oauth_token] != oauth_token\n      render text: \"oauth_token is not matched.\"\n      return\n    end\n\n    res = get_access_token(oauth_token, oauth_verifier)\n    res_oauth_token = res[\"oauth_token\"]\n    res_oauth_token_secret = res[\"oauth_token_secret\"]\n    res_user_id = res[\"user_id\"]\n    screen_name = res[\"screen_name\"]\n    x_auth_expires = res[\"x_auth_expires\"]\n    str = \"res_oauth_token: #{res_oauth_token}, res_oauth_token_secret: #{res_oauth_token_secret},\"+\n            \"res_user_id #{res_user_id}, screen_name #{screen_name}, x_auth_expires #{x_auth_expires}\"\n    render text: str\n  end\n\n  def get_request_token\n    api_key = 'hogehogehogehoge'\n    api_secret = 'fugofugofugofugo'\n    access_token = ''\n    access_token_secret = ''\n    callback_url = 'http://127.0.0.1:3000/callback'\n    params = {\n        \"oauth_callback\" => callback_url,\n        \"oauth_consumer_key\" => URI.escape(api_key),\n        \"oauth_nonce\" => URI.escape(SecureRandom.uuid),\n        \"oauth_signature_method\" => URI.escape('HMAC-SHA1'), \n        \"oauth_timestamp\" => URI.escape(Time.now.to_i.to_s),\n        \"oauth_version\" => URI.escape('1.0')\n    }\n    signature_key = \"#{URI.escape(api_secret)}&#{URI.escape(access_token_secret)}\"\n    method = 'POST'\n    request_url = 'https://api.twitter.com/oauth/request_token'\n    request_oauth_header = sort_and_concat(params, \"&\")\n    signature_data = \"#{URI.escape(method)}&#{escape(request_url)}&#{escape(request_oauth_header)}\"\n    hash = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, signature_data)\n    signature = escape(Base64.strict_encode64(hash))\n    params[\"oauth_signature\"] = signature\n    header_params = sort_and_concat(params, ',')\n\n    twitter_uri = URI.parse(request_url)\n    https = Net::HTTP.new(twitter_uri.host, twitter_uri.port)\n    https.use_ssl = true\n    https.verify_mode =  OpenSSL::SSL::VERIFY_NONE\n    req = Net::HTTP::Post.new(twitter_uri)\n    req[\"Authorization\"] = \"OAuth #{header_params}\"\n    https.set_debug_output $stderr\n    res = https.request(req)\n    #res.code + \"/\" +res.body\n    param_hash = Hash.new \n    array = res.body.split('&')\n    array.each { |e|\n      param = e.split('=')\n      param_hash[param[0]] = param[1]\n    }\n    return param_hash\n  end\n\n  def get_access_token(oauth_token, oauth_verifier)\n    oauth_token_secret = session[:oauth_token_secret]\n    if oauth_token_secret.blank?\n      return \"oauth_token_secret is not arrive in session.\"\n    end\n\n    api_key = 'hogehogehogehoge'\n    api_secret = 'fugofugofugofugo'\n    access_token = ''\n    access_token_secret = ''\n    params = {\n        \"oauth_consumer_key\" => URI.escape(api_key),\n        \"oauth_nonce\" => URI.escape(SecureRandom.uuid),\n        \"oauth_signature_method\" => URI.escape('HMAC-SHA1'), \n        \"oauth_timestamp\" => URI.escape(Time.now.to_i.to_s),\n        \"oauth_token\" => oauth_token,\n        \"oauth_verifier\" => URI.escape(oauth_verifier),\n        \"oauth_version\" => URI.escape('1.0')\n    }\n    signature_key = \"#{URI.escape(api_secret)}&#{URI.escape(access_token_secret)}\"\n    method = 'POST'\n    request_url = 'https://api.twitter.com/oauth/access_token'\n    request_oauth_header = sort_and_concat(params, \"&\")\n    signature_data = \"#{URI.escape(method)}&#{escape(request_url)}&#{escape(request_oauth_header)}\"\n    hash = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, signature_data)\n    signature = escape(Base64.strict_encode64(hash))\n    params[\"oauth_signature\"] = signature\n    header_params = sort_and_concat(params, ',')\n    twitter_uri = URI.parse(request_url)\n    https = Net::HTTP.new(twitter_uri.host, twitter_uri.port)\n    https.use_ssl = true\n    https.verify_mode =  OpenSSL::SSL::VERIFY_NONE\n    req = Net::HTTP::Post.new(twitter_uri)\n    req[\"Authorization\"] = \"OAuth #{header_params}\"\n    https.set_debug_output $stderr\n    res = https.request(req)\n    param_hash = Hash.new \n    if res.code == \"200\"\n      array = res.body.split('&')\n      array.each { |e|\n        param = e.split('=')\n        param_hash[param[0]] = param[1]\n      }\n    else\n      param_hash[\"error_msg\"] = res.body\n    end\n    return param_hash\n  end\n\n  def sort_and_concat(params, delimiter)\n    params = params.sort\n    str = params.collect{|k, v| \"#{k}=#{v}\"}.join(delimiter)\n    return str\n  end\n\n  def escape(str)\n    return ERB::Util.url_encode(str)\n  end\n\n\n\n\n\u53c2\u8003\nTwitter API\u306e\u4f7f\u3044\u65b9\u307e\u3068\u3081\u3092\u53c2\u8003\u306b\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3069\u3053\u306e\u30b5\u30a4\u30c8\u3082gem\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u52a9\u304b\u308a\u307e\u3057\u305f\uff01\n#Ruby(rails)\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\u969b\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n\n**1. \u30a2\u30d7\u30ea\u767b\u9332\u6642\u306b\u767a\u884c\u3055\u308c\u305fAPI_KEY\u3001API_SECRET\u3092\u4f7f\u3063\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u767a\u884c\u3059\u308b**\n\n**2. \u30ea\u30af\u30a8\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306b\u3057\u3066\u3001twitter\u306e\u8a8d\u8a3c\u753b\u9762\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b**\n\n**3. \u30e6\u30fc\u30b6\u30fc\u304c\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3067\u30a2\u30d7\u30ea\u3092\u8a8d\u8a3c**\n\n**4. \u8a8d\u8a3c\u5b8c\u4e86\u5f8c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306boauth_token\u3068oauth_verifier\u3092\u6301\u3063\u3066\u3001\u5e30\u3063\u3066\u304f\u308b**\n\n**5. \u30a2\u30d7\u30ea\u767b\u9332\u6642\u306b\u767a\u884c\u3055\u308c\u305fAPI_KEY\u3001API_SECRET\u30014\u3067\u624b\u306b\u5165\u3063\u305f\u5024\u3092\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b**\n\n\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u304b\u3001\u304b\u306a\u308a\u96d1\u3067\u3059\u3002\u53c2\u8003\u7a0b\u5ea6\u306b\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\u300c\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u300d\u306a\u767a\u60f3\u306e\u5143\u306b\u4f5c\u3063\u305f\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u5316\u3068\u304b\u7121\u8996\u3057\u3066\u307e\u3059\u3002\n\n```lang:get_access_token.rb\n\n  def index\n    request_tokens = get_request_token\n    oauth_token = request_tokens[\"oauth_token\"]\n    redirect_url = \"https://api.twitter.com/oauth/authenticate?oauth_token=#{oauth_token}\"\n    session[:oauth_token] = oauth_token\n    redirect_to redirect_url\n  end\n  \n  def callback\n    oauth_token = params[:oauth_token]\n    oauth_verifier = params[:oauth_verifier]\n    denied = params[:denied]\n    if denied.present?\n      render text: \"Procedure canceled.\"\n      return\n    end\n    if session[:oauth_token].blank? || session[:oauth_token] != oauth_token\n      render text: \"oauth_token is not matched.\"\n      return\n    end\n\n    res = get_access_token(oauth_token, oauth_verifier)\n    res_oauth_token = res[\"oauth_token\"]\n    res_oauth_token_secret = res[\"oauth_token_secret\"]\n    res_user_id = res[\"user_id\"]\n    screen_name = res[\"screen_name\"]\n    x_auth_expires = res[\"x_auth_expires\"]\n    str = \"res_oauth_token: #{res_oauth_token}, res_oauth_token_secret: #{res_oauth_token_secret},\"+\n            \"res_user_id #{res_user_id}, screen_name #{screen_name}, x_auth_expires #{x_auth_expires}\"\n    render text: str\n  end\n\n  def get_request_token\n    api_key = 'hogehogehogehoge'\n    api_secret = 'fugofugofugofugo'\n    access_token = ''\n    access_token_secret = ''\n    callback_url = 'http://127.0.0.1:3000/callback'\n    params = {\n        \"oauth_callback\" => callback_url,\n        \"oauth_consumer_key\" => URI.escape(api_key),\n        \"oauth_nonce\" => URI.escape(SecureRandom.uuid),\n        \"oauth_signature_method\" => URI.escape('HMAC-SHA1'), \n        \"oauth_timestamp\" => URI.escape(Time.now.to_i.to_s),\n        \"oauth_version\" => URI.escape('1.0')\n    }\n    signature_key = \"#{URI.escape(api_secret)}&#{URI.escape(access_token_secret)}\"\n    method = 'POST'\n    request_url = 'https://api.twitter.com/oauth/request_token'\n    request_oauth_header = sort_and_concat(params, \"&\")\n    signature_data = \"#{URI.escape(method)}&#{escape(request_url)}&#{escape(request_oauth_header)}\"\n    hash = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, signature_data)\n    signature = escape(Base64.strict_encode64(hash))\n    params[\"oauth_signature\"] = signature\n    header_params = sort_and_concat(params, ',')\n\n    twitter_uri = URI.parse(request_url)\n    https = Net::HTTP.new(twitter_uri.host, twitter_uri.port)\n    https.use_ssl = true\n    https.verify_mode =  OpenSSL::SSL::VERIFY_NONE\n    req = Net::HTTP::Post.new(twitter_uri)\n    req[\"Authorization\"] = \"OAuth #{header_params}\"\n    https.set_debug_output $stderr\n    res = https.request(req)\n    #res.code + \"/\" +res.body\n    param_hash = Hash.new \n    array = res.body.split('&')\n    array.each { |e|\n      param = e.split('=')\n      param_hash[param[0]] = param[1]\n    }\n    return param_hash\n  end\n\n  def get_access_token(oauth_token, oauth_verifier)\n    oauth_token_secret = session[:oauth_token_secret]\n    if oauth_token_secret.blank?\n      return \"oauth_token_secret is not arrive in session.\"\n    end\n    \n    api_key = 'hogehogehogehoge'\n    api_secret = 'fugofugofugofugo'\n    access_token = ''\n    access_token_secret = ''\n    params = {\n        \"oauth_consumer_key\" => URI.escape(api_key),\n        \"oauth_nonce\" => URI.escape(SecureRandom.uuid),\n        \"oauth_signature_method\" => URI.escape('HMAC-SHA1'), \n        \"oauth_timestamp\" => URI.escape(Time.now.to_i.to_s),\n        \"oauth_token\" => oauth_token,\n        \"oauth_verifier\" => URI.escape(oauth_verifier),\n        \"oauth_version\" => URI.escape('1.0')\n    }\n    signature_key = \"#{URI.escape(api_secret)}&#{URI.escape(access_token_secret)}\"\n    method = 'POST'\n    request_url = 'https://api.twitter.com/oauth/access_token'\n    request_oauth_header = sort_and_concat(params, \"&\")\n    signature_data = \"#{URI.escape(method)}&#{escape(request_url)}&#{escape(request_oauth_header)}\"\n    hash = OpenSSL::HMAC.digest(OpenSSL::Digest::SHA1.new, signature_key, signature_data)\n    signature = escape(Base64.strict_encode64(hash))\n    params[\"oauth_signature\"] = signature\n    header_params = sort_and_concat(params, ',')\n    twitter_uri = URI.parse(request_url)\n    https = Net::HTTP.new(twitter_uri.host, twitter_uri.port)\n    https.use_ssl = true\n    https.verify_mode =  OpenSSL::SSL::VERIFY_NONE\n    req = Net::HTTP::Post.new(twitter_uri)\n    req[\"Authorization\"] = \"OAuth #{header_params}\"\n    https.set_debug_output $stderr\n    res = https.request(req)\n    param_hash = Hash.new \n    if res.code == \"200\"\n      array = res.body.split('&')\n      array.each { |e|\n        param = e.split('=')\n        param_hash[param[0]] = param[1]\n      }\n    else\n      param_hash[\"error_msg\"] = res.body\n    end\n    return param_hash\n  end\n\n  def sort_and_concat(params, delimiter)\n    params = params.sort\n    str = params.collect{|k, v| \"#{k}=#{v}\"}.join(delimiter)\n    return str\n  end\n  \n  def escape(str)\n    return ERB::Util.url_encode(str)\n  end\n\n```\n\n#\u53c2\u8003\n[Twitter API\u306e\u4f7f\u3044\u65b9\u307e\u3068\u3081](https://syncer.jp/twitter-api-matome)\u3092\u53c2\u8003\u306b\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u3069\u3053\u306e\u30b5\u30a4\u30c8\u3082gem\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u52a9\u304b\u308a\u307e\u3057\u305f\uff01\n"}