{"context": " More than 1 year has passed since last update.Android\u306e\u30a2\u30d7\u30ea\u3067\u3001token\u3084\u30e6\u30fc\u30b6\u306e\u500b\u4eba\u60c5\u5831\u306a\u3069\u306e\u79d8\u533f\u60c5\u5831\u3092\u30bb\u30ad\u30e5\u30a2\u306b\u4fdd\u6301\u3059\u308b\u305f\u3081\u306b\u3001Android Keystore \u3092\u4f7f\u3063\u3066\u6697\u53f7\u5316\u3057\u3066Shared preference\u3084sqlite\u306b\u4fdd\u6301\u3059\u308b\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3002\n\nAndroid Keystore System\nAndroid Keystore System\u3092\u4f7f\u3063\u3066\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u4fdd\u6301\u3059\u308b\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nAndroid Keystore\u306e\u30ed\u30fc\u30c9\n  mKeyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n  mKeyStore.load(null);\n\n\n\u9375\u30da\u30a2\u306e\u751f\u6210\n\u9375\u30da\u30a2\u304c\u306a\u3051\u308c\u3070KeyPairGenerator\u3092\u4f7f\u3063\u3066\u65b0\u3057\u304fpublid/private key\u3092\u751f\u6210\u3059\u308b\u3002\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\n    KeyProperties.KEY_ALGORITHM_RSA, KEY_PROVIDER);\nkeyPairGenerator.initialize(\n    new KeyGenParameterSpec.Builder(...) /* key parameters */\n    .build());\nkeyPairGenerator.generateKeyPair();\n\n\n\u6697\u53f7\u5316\npublic key\u3067\u6697\u53f7\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\uff08\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u6697\u53f7\u5316\u3068\u540c\u6642\u306bBase64 encode\u3057\u3066\u3044\u308b\uff09\u3002\nCipherOutputStream\u306b\u6697\u53f7\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\nPublicKey publicKey = keyStore.getCertificate(alias).getPublicKey();\n\nCipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\nCipherOutputStream cipherOutputStream = new CipherOutputStream(\n    outputStream, cipher);\ncipherOutputStream.write(plainText.getBytes(\"UTF-8\"));\ncipherOutputStream.close();\n\n\n\u5fa9\u53f7\n\u4fdd\u6301\u3057\u305f\u30c7\u30fc\u30bf\u306fprivate key\u3067\u5fa9\u53f7\u3057\u3066\u5229\u7528\u3059\u308b\u3002CipherInputStream\u304b\u3089\u5fa9\u53f7\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nPrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, null);\n\nCipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(Cipher.DECRYPT_MODE, privateKey);\nCipherInputStream cipherInputStream = new CipherInputStream(\n    new ByteArrayInputStream(Base64.decode(encryptedText, Base64.DEFAULT)), cipher);\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nMainActivity.java\npackage jp.gr.java_conf.fofn.sample.keystoreprovider;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport android.security.keystore.KeyGenParameterSpec;\nimport android.security.keystore.KeyProperties;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStreamReader;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.KeyStore;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.util.ArrayList;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\n\npublic class MainActivity extends Activity {\n    private static final String TAG = \"KeyStoreProviderSample\";\n\n    private static final String KEY_PROVIDER = \"AndroidKeyStore\";\n    private static final String KEY_ALIAS = \"sample key\";\n    private static final String ALGORITHM = \"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\";\n\n    private KeyStore mKeyStore = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        prepareKeyStore();\n\n        Button button = (Button)findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View v) {\n                TextView view;\n                view = (TextView)findViewById(R.id.text);\n                String plainText = view.getText().toString();\n\n                // encrypt\n                String encryptedText = encryptString(mKeyStore, KEY_ALIAS, plainText);\n                view = (TextView)findViewById(R.id.enc);\n                view.setText(encryptedText);\n\n                // decrypt\n                String decryptedText = decryptString(mKeyStore, KEY_ALIAS, encryptedText);\n                view = (TextView)findViewById(R.id.dec);\n                view.setText(decryptedText);\n            }\n        });\n    }\n\n    private void prepareKeyStore() {\n        try {\n            mKeyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n            mKeyStore.load(null);\n            createNewKey(mKeyStore, KEY_ALIAS);\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n    }\n\n    /**\n     * Create new key pair if needed.\n     *\n     * Create RSA key pair for encryption/decryption using RSA OAEP.\n     * See KeyGenParameterSpec document.\n     *\n     * @param keyStore key store\n     * @param alias key alias\n     */\n    private void createNewKey(KeyStore keyStore, String alias) {\n        try {\n            // Create new key if needed\n            if (!keyStore.containsAlias(alias)) {\n                KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\n                    KeyProperties.KEY_ALGORITHM_RSA, KEY_PROVIDER);\n                keyPairGenerator.initialize(\n                    new KeyGenParameterSpec.Builder(\n                        alias,\n                        KeyProperties.PURPOSE_DECRYPT)\n                        .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)\n                        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)\n                        .build());\n                keyPairGenerator.generateKeyPair();\n            }\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n    }\n\n    /**\n     * Encrypt string text\n     *\n     * @param keyStore key store used\n     * @param alias key alias\n     * @param plainText string to be encrypted\n     *\n     * @return base64 encoded cipher text\n     */\n    private String encryptString(KeyStore keyStore, String alias, String plainText) {\n        String encryptedText = null;\n        try {\n            PublicKey publicKey = keyStore.getCertificate(alias).getPublicKey();\n\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            CipherOutputStream cipherOutputStream = new CipherOutputStream(\n                outputStream, cipher);\n            cipherOutputStream.write(plainText.getBytes(\"UTF-8\"));\n            cipherOutputStream.close();\n\n            byte [] bytes = outputStream.toByteArray();\n            encryptedText = Base64.encodeToString(bytes, Base64.DEFAULT);\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n        return encryptedText;\n    }\n\n    /**\n     * Decrypt base64 encoded cipher text\n     *\n     * @param keyStore key store used\n     * @param alias key alias\n     * @param encryptedText base64 encoded cipher text\n     *\n     * @return plain text string\n     */\n    private String decryptString(KeyStore keyStore, String alias, String encryptedText) {\n        String plainText = null;\n        try {\n            PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, null);\n\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n            CipherInputStream cipherInputStream = new CipherInputStream(\n                new ByteArrayInputStream(Base64.decode(encryptedText, Base64.DEFAULT)), cipher);\n\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            int b;\n            while ((b = cipherInputStream.read()) != -1) {\n                outputStream.write(b);\n            }\n            outputStream.close();\n            plainText = outputStream.toString(\"UTF-8\");\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n        return plainText;\n    }\n}\n\n\n\u5b9f\u884c\u4e2d\u306eScreenshot:\n\nAndroid\u306e\u30a2\u30d7\u30ea\u3067\u3001token\u3084\u30e6\u30fc\u30b6\u306e\u500b\u4eba\u60c5\u5831\u306a\u3069\u306e\u79d8\u533f\u60c5\u5831\u3092\u30bb\u30ad\u30e5\u30a2\u306b\u4fdd\u6301\u3059\u308b\u305f\u3081\u306b\u3001Android Keystore \u3092\u4f7f\u3063\u3066\u6697\u53f7\u5316\u3057\u3066Shared preference\u3084sqlite\u306b\u4fdd\u6301\u3059\u308b\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3002\n\n# Android Keystore System\n[Android Keystore System](http://developer.android.com/intl/ja/training/articles/keystore.html)\u3092\u4f7f\u3063\u3066\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3066\u4fdd\u6301\u3059\u308b\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n## Android Keystore\u306e\u30ed\u30fc\u30c9\n\n```java\n  mKeyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n  mKeyStore.load(null);\n```\n\n## \u9375\u30da\u30a2\u306e\u751f\u6210\n\u9375\u30da\u30a2\u304c\u306a\u3051\u308c\u3070[KeyPairGenerator](http://developer.android.com/intl/ja/reference/java/security/KeyPairGenerator.html)\u3092\u4f7f\u3063\u3066\u65b0\u3057\u304fpublid/private key\u3092\u751f\u6210\u3059\u308b\u3002\n\n```java\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\n    KeyProperties.KEY_ALGORITHM_RSA, KEY_PROVIDER);\nkeyPairGenerator.initialize(\n    new KeyGenParameterSpec.Builder(...) /* key parameters */\n    .build());\nkeyPairGenerator.generateKeyPair();\n```\n\n## \u6697\u53f7\u5316\npublic key\u3067\u6697\u53f7\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\uff08\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f\u6697\u53f7\u5316\u3068\u540c\u6642\u306bBase64 encode\u3057\u3066\u3044\u308b\uff09\u3002\nCipherOutputStream\u306b\u6697\u53f7\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```java\nPublicKey publicKey = keyStore.getCertificate(alias).getPublicKey();\n\nCipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\nCipherOutputStream cipherOutputStream = new CipherOutputStream(\n    outputStream, cipher);\ncipherOutputStream.write(plainText.getBytes(\"UTF-8\"));\ncipherOutputStream.close();\n```\n\n## \u5fa9\u53f7\n\u4fdd\u6301\u3057\u305f\u30c7\u30fc\u30bf\u306fprivate key\u3067\u5fa9\u53f7\u3057\u3066\u5229\u7528\u3059\u308b\u3002CipherInputStream\u304b\u3089\u5fa9\u53f7\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```java\nPrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, null);\n\nCipher cipher = Cipher.getInstance(ALGORITHM);\ncipher.init(Cipher.DECRYPT_MODE, privateKey);\nCipherInputStream cipherInputStream = new CipherInputStream(\n    new ByteArrayInputStream(Base64.decode(encryptedText, Base64.DEFAULT)), cipher);\n```\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```java:MainActivity.java\npackage jp.gr.java_conf.fofn.sample.keystoreprovider;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport android.security.keystore.KeyGenParameterSpec;\nimport android.security.keystore.KeyProperties;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStreamReader;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.KeyStore;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.util.ArrayList;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.CipherInputStream;\nimport javax.crypto.CipherOutputStream;\n\npublic class MainActivity extends Activity {\n    private static final String TAG = \"KeyStoreProviderSample\";\n\n    private static final String KEY_PROVIDER = \"AndroidKeyStore\";\n    private static final String KEY_ALIAS = \"sample key\";\n    private static final String ALGORITHM = \"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\";\n\n    private KeyStore mKeyStore = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        prepareKeyStore();\n\n        Button button = (Button)findViewById(R.id.button);\n        button.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View v) {\n                TextView view;\n                view = (TextView)findViewById(R.id.text);\n                String plainText = view.getText().toString();\n\n                // encrypt\n                String encryptedText = encryptString(mKeyStore, KEY_ALIAS, plainText);\n                view = (TextView)findViewById(R.id.enc);\n                view.setText(encryptedText);\n\n                // decrypt\n                String decryptedText = decryptString(mKeyStore, KEY_ALIAS, encryptedText);\n                view = (TextView)findViewById(R.id.dec);\n                view.setText(decryptedText);\n            }\n        });\n    }\n\n    private void prepareKeyStore() {\n        try {\n            mKeyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n            mKeyStore.load(null);\n            createNewKey(mKeyStore, KEY_ALIAS);\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n    }\n\n    /**\n     * Create new key pair if needed.\n     *\n     * Create RSA key pair for encryption/decryption using RSA OAEP.\n     * See KeyGenParameterSpec document.\n     *\n     * @param keyStore key store\n     * @param alias key alias\n     */\n    private void createNewKey(KeyStore keyStore, String alias) {\n        try {\n            // Create new key if needed\n            if (!keyStore.containsAlias(alias)) {\n                KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\n                    KeyProperties.KEY_ALGORITHM_RSA, KEY_PROVIDER);\n                keyPairGenerator.initialize(\n                    new KeyGenParameterSpec.Builder(\n                        alias,\n                        KeyProperties.PURPOSE_DECRYPT)\n                        .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)\n                        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)\n                        .build());\n                keyPairGenerator.generateKeyPair();\n            }\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n    }\n\n    /**\n     * Encrypt string text\n     *\n     * @param keyStore key store used\n     * @param alias key alias\n     * @param plainText string to be encrypted\n     *\n     * @return base64 encoded cipher text\n     */\n    private String encryptString(KeyStore keyStore, String alias, String plainText) {\n        String encryptedText = null;\n        try {\n            PublicKey publicKey = keyStore.getCertificate(alias).getPublicKey();\n\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            CipherOutputStream cipherOutputStream = new CipherOutputStream(\n                outputStream, cipher);\n            cipherOutputStream.write(plainText.getBytes(\"UTF-8\"));\n            cipherOutputStream.close();\n\n            byte [] bytes = outputStream.toByteArray();\n            encryptedText = Base64.encodeToString(bytes, Base64.DEFAULT);\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n        return encryptedText;\n    }\n\n    /**\n     * Decrypt base64 encoded cipher text\n     *\n     * @param keyStore key store used\n     * @param alias key alias\n     * @param encryptedText base64 encoded cipher text\n     *\n     * @return plain text string\n     */\n    private String decryptString(KeyStore keyStore, String alias, String encryptedText) {\n        String plainText = null;\n        try {\n            PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, null);\n\n            Cipher cipher = Cipher.getInstance(ALGORITHM);\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\n            CipherInputStream cipherInputStream = new CipherInputStream(\n                new ByteArrayInputStream(Base64.decode(encryptedText, Base64.DEFAULT)), cipher);\n\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            int b;\n            while ((b = cipherInputStream.read()) != -1) {\n                outputStream.write(b);\n            }\n            outputStream.close();\n            plainText = outputStream.toString(\"UTF-8\");\n        } catch (Exception e) {\n            Log.e(TAG, e.toString());\n        }\n        return plainText;\n    }\n}\n```\n\u5b9f\u884c\u4e2d\u306eScreenshot:\n![screen_1.png](https://qiita-image-store.s3.amazonaws.com/0/88598/7fa05ddd-1ddc-ba90-122c-83b127a272c7.png)\n\n", "tags": ["Android", "Security", "keystore"]}