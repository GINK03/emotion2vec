{"context": " More than 1 year has passed since last update.\n\n\u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u3068\u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\n\u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u306f\u4e8c\u4e57\u8aa4\u5dee\u306e\u7dcf\u548c\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u4fc2\u6570\u3092\u6c42\u3081\u308b\u306e\u306b\u5bfe\u3057\u3066\u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\u306f\u7d76\u5bfe\u5024\u6700\u5927\u306e\u8aa4\u5dee\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b\u4fc2\u6570\u3092\u6c42\u3081\u307e\u3059\u3002\u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u3088\u308a\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u3002\u67d0\u97f3\u30b2\u30fc\u3067\u4f8b\u3048\u308b\u3068\u30e9\u30a4\u30d6\u6210\u529f\u3068\u30d5\u30eb\u30b3\u30f3\u30dc\u306e\u9055\u3044\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n\u6700\u5c0f\u4e8c\u4e57\u30d5\u30a3\u30eb\u30bf\n\u906e\u65ad\u5468\u6ce2\u6570\u304c1.0\u306e51\u6b21\u306e\u6700\u5c0f\u4e8c\u4e57\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002Raspberry Pi\u306eMathematica\u3067\u304a\u624b\u8efd\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\n\u7b49\u30ea\u30d7\u30eb\u30d5\u30a3\u30eb\u30bf\n\u906e\u65ad\u5468\u6ce2\u6570\u304c1.0\u306e51\u6b21\u306e\u7b49\u30ea\u30d7\u30eb\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u81ea\u524d\u3067\u8a08\u7b97\u3059\u308b\u306e\u304c\u76ee\u6a19\u3067\u3059\u3002\n\n\n\u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\n\n\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\n$f(x)$\u306f\u533a\u9593$[a,b]$\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308b$n$\u6b21\u591a\u9805\u5f0f\u3092\nf_n(x)=\\sum_{k=0}^n a_k x^k\n$${f_n(x)=\\sum_{k=0}^n a_k x^k\n}$$\n\u3068\u3057\u307e\u3059\u3002$n$\u3092\u56fa\u5b9a\u3057\u305f\u3068\u304d\u306b\n \\max_{a<x<b} |f(x)-f_n(x)|\n$${ \\max_{a<x<b} |f(x)-f_n(x)|\n}$$\n\u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a\u591a\u9805\u5f0f\u3092\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3068\u3044\u3044\u307e\u3059\u3002\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n$f_n(x)$\u304c\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3067\u3042\u308b\u305f\u3081\u306e\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u3092\n\\epsilon(x) = f(x)-f_n(x)\n$${\\epsilon(x) = f(x)-f_n(x)\n}$$\n\u3068\u7f6e\u3044\u305f\u3068\u304d\u3001$|\\epsilon(x)|$\u304c\u533a\u9593$[a,b]$\u3067\u5c11\u306a\u304f\u3068\u3082$n+2$\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b$\\epsilon(x)$\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u3042\u3068\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4e00\u610f\u6027\u306b\u3064\u3044\u3066\u3082\u3044\u308f\u306a\u3044\u3068\u3067\u3059\u304c\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u6700\u826f\u8fd1\u4f3c\u4e09\u89d2\u591a\u9805\u5f0f\n$g(x)$\u306f\u533a\u9593$[0,\\pi]$\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308b\u4e09\u89d2\u591a\u9805\u5f0f\u3092\ng_n(x)= \\sum_{k=0}^n a_k \\cos(kx)\n$${g_n(x)= \\sum_{k=0}^n a_k \\cos(kx)\n}$$\n\u3068\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u5076\u95a2\u6570\u3092\u6271\u3046\u306e\u3067$\\sin$\u95a2\u6570\u306f\u7121\u3057\u3068\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u306f\u591a\u9805\u5f0f\u306e\u5834\u5408\u3068\u540c\u3058\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n$g_n$\u304c\u533a\u9593$[0,\\pi]$\u3067\u9023\u7d9a\u306a\u95a2\u6570$g$\u306e\u6700\u826f\u8fd1\u4f3c\u3068\u306e\u306a\u308b\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u3092\n\\epsilon(x) = g(x)-g_n(x)\n$${\\epsilon(x) = g(x)-g_n(x)\n}$$\n\u3068\u7f6e\u3044\u305f\u3068\u304d\u3001$|\\epsilon(x)|$\u304c\u533a\u9593$[0,\\pi]$\u3067\u5c11\u306a\u304f\u3068\u3082$n+2$\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b$\\epsilon(x)$\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\n\nRemez algorithm\n\u4eca\u56de\u306fRemez algorithm\u3092\u7528\u3044\u3066\u7b49\u30ea\u30d7\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\u533a\u9593$[0, \\pi]$\u4e0a\u306b$n+2$\u500b\u306e\u691c\u67fb\u70b9$x_0, \\cdots x_{n+1}$\u3092\u9069\u5f53\u306b\u7528\u610f\u3059\u308b\n\u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3076\u3088\u3046\u306a\u4e09\u89d2\u591a\u9805\u5f0f$g(x)$\u306e\u4fc2\u6570$a_0, \\cdots, a_n$\u3068\u8aa4\u5dee$d$\u3092\u6c42\u3081\u3001\u4e09\u89d2\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\n\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308b$n+2$\u500b\u306e\u70b9$x_0, \\cdots x_{n+1}$\u3092\u6c42\u3081\u3001\u691c\u67fb\u70b9\u3092\u66f4\u65b0\u3059\u308b\n\u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30702\u3078\u623b\u308b\n\n\n4\u306f\u305d\u306e\u307e\u3093\u307e\u30012\u306f\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u3051\u3070\u826f\u3055\u305d\u3046\uff08\u89e3\u304d\u65b9\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\uff09\u3001\u3057\u304b\u30571\u30683\u306f\u8a66\u884c\u932f\u8aa4\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u5b9f\u88c5\nPython\u3067200\u884c\u7a0b\u5ea6\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5165\u529b\u5024\u306b\u3088\u3063\u3066\u306f\u30b3\u30b1\u308b\u306e\u3067\u4e07\u80fd\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\nhttps://github.com/fukuroder/Remez_algorithm_test\n\n\nRemez algorithm\uff08\u672c\u4f53\uff09\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n######################\n# Remez algorithm \u672c\u4f53\n######################\ndef remez(\n    order,         # \u30d5\u30a3\u30eb\u30bf\u306e\u6b21\u6570\n    w0,            # \u906e\u65ad\u5468\u6ce2\u6570\n    h,             # \u9077\u79fb\u5e45\n    max_iter=100): # \u6700\u5927\u53cd\u5fa9\u56de\u6570\n\n    n = (order-1)//2 # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n\n    # Remez algorithm --step1--\n    # \u691c\u67fb\u70b9\u306e\u521d\u671f\u5024\u3092\u751f\u6210\n    list_x = initialize_extreme_points(n, w0, h)\n\n    for count in range(1, max_iter+1):\n        # Remez algorithm --step2--\n        # \u691c\u67fb\u70b9(x[0],...,x[n+1])\u3067\u306e\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\n        # \u4e09\u89d2\u591a\u9805\u5f0f\u4fc2\u6570(a[0],...a[n])\u3068\u8aa4\u5deed\u3092\u6c42\u3081\u308b\n        list_a, d = update_tri_polynomial_coefficients(list_x, w0)\n\n        # Remez algorithm --step3--\n        # \u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u6c42\u3081\u308b\n        list_x = update_maximum_error_points(list_a, w0, h)\n\n        # Remez algorithm --step4--\n        # \u53ce\u675f\u5224\u5b9a\uff08\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\uff09\n        if check_convergence(list_a, list_x, w0):\n            # cos\u95a2\u6570\u7cfb\u304b\u3089exp\u95a2\u6570\u7cfb\u306e\u8868\u73fe\u306b\u5909\u63db\n            list_h = [a*0.5 for a in reversed(list_a[1:])] + \\\n                     [list_a[0]] + \\\n                     [a*0.5 for a in list_a[1:]]\n            return list_h, d, list_x, count\n    else:\n        raise Exception(\"[ERROR]Remez algorithm failed\")\n\n\n\nRemez algorithm step1\uff08\u521d\u671f\u70b9\u306e\u751f\u6210\uff09\n\u9069\u5f53\u306b\u7b49\u9593\u9694\u3067n+2\u500b\u306e\u70b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u9077\u79fb\u57df\u306b\u70b9\u304c\u5165\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n###########################\n# Remez algorithm --step1--\n# \u691c\u67fb\u70b9\u306e\u521d\u671f\u5024\u3092\u751f\u6210\n###########################\ndef initialize_extreme_points(\n    n,  # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n    w0, # \u906e\u65ad\u5468\u6ce2\u6570\n    h): # \u9077\u79fb\u5e45\n\n    # \u901a\u904e\u57df\u70b9\u6570\uff0b\u963b\u6b62\u57df\u70b9\u6570\n    num_point = n+2;\n\n    # \u901a\u904e\u57df\u70b9\u6570\n    num_passband_point = int(num_point*w0/math.pi)\n\n    # \u963b\u6b62\u57df\u70b9\u6570\n    num_stopband_point = num_point-num_passband_point\n\n    # \u521d\u671f\u70b9\u3092\u751f\u6210\n    return numpy.append(\n        numpy.linspace(     0.0, w0-0.5*h, num_passband_point),\n        numpy.linspace(w0+0.5*h,  math.pi, num_stopband_point))\n\n\n\n\nRemez algorithm step2\uff08\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u66f4\u65b0\uff09\n\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306e\u7d44\u307f\u7acb\u3066\u3068\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u767b\u5834\u3059\u308b\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306f\u5c0f\u898f\u6a21\u306a\u5bc6\u884c\u5217\u306a\u306e\u3067\u7d20\u76f4\u306b\u76f4\u63a5\u6cd5\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n##########################################################\n# Remez algorithm --step2--\n# \u691c\u67fb\u70b9(x[0],...,x[n+1])\u3067\u306e\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\n# \u4e09\u89d2\u591a\u9805\u5f0f\u4fc2\u6570(a[0],...a[n])\u3068\u8aa4\u5deed\u3092\u6c42\u3081\u308b\n##########################################################\ndef update_tri_polynomial_coefficients(\n    list_x, # \u691c\u67fb\u70b9\n    w0):    # \u906e\u65ad\u5468\u6ce2\u6570\n\n    # \u884c\u5217A\u4f5c\u6210\n    matrix_A = numpy.array(\n        [[math.cos(x*k) for k in range(len(list_x)-1)] + [(-1)**j] \\\n                        for j,x in enumerate(list_x)])\n\n    # \u30d9\u30af\u30c8\u30ebb\u4f5c\u6210\n    vector_b = numpy.array([ideal_lowpass_filter(x, w0) for x in list_x])\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\n    u = numpy.linalg.solve(matrix_A, vector_b)\n\n    # a[0],...,a[n], d\n    return u[:-1], u[-1]\n\n\n\n\nRemez algorithm step3\uff08\u691c\u67fb\u70b9\u306e\u66f4\u65b0\uff09\n\u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u65b0\u3057\u3044\u691c\u67fb\u70b9\u3068\u3057\u307e\u3059\u3002\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u306f\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u306e\u307f\u3067\u306f\u76ee\u6a19\u306en+2\u500b\u306b\u5230\u9054\u3057\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u9077\u79fb\u57df\u306e\u958b\u59cb\u7d42\u4e86\u4f4d\u7f6e\u3082\u691c\u67fb\u70b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u691c\u67fb\u70b9\u306f\u4e01\u5ea6n+2\u500b\u3067\u306a\u3044\u3068step2\u3067\u30b3\u30b1\u307e\u3059\u306e\u3067\u7834\u7dbb\u3057\u306a\u3044\u3088\u3046\u306b\u9069\u5f53\u306b\u8abf\u6574\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u5165\u529b\u5024\u306b\u3088\u3063\u3066\u306f\u30b3\u30b1\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3082\u3046\u5c11\u3057\u304c\u3093\u3070\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3059\u304c\u6ce5\u81ed\u304f\u306a\u308b\u306e\u3067\u8ae6\u3081\u307e\u3057\u305f\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n###########################################\n# Remez algorithm --step3--\n# \u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u6c42\u3081\u308b\n###########################################\ndef update_maximum_error_points(\n    list_a, # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    w0,     # \u906e\u65ad\u5468\u6ce2\u6570\n    h):     # \u9077\u79fb\u5e45\n\n    # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n    n = len(list_a)-1\n\n    # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u3092\u6c42\u3081\u308b\n    extreme_points = search_extreme_points(list_a, (n+2)*10)\n\n    # \u9077\u79fb\u57df\u306e\u958b\u59cb\u7d42\u4e86\u4f4d\u7f6e\u3082\u6975\u5024\u70b9\u3060\u3068\u601d\u3046\n    extreme_points.append(w0-h*0.5)\n    extreme_points.append(w0+h*0.5)\n    extreme_points.sort()\n\n    if len(extreme_points) == n+1:\n        # \u6975\u5024\u70b9\u6570\u304cn+1\u306a\u3089\u3070\u7aef\u70b9(x=pi)\u3082\u6975\u5024\u70b9\u3060\u3068\u601d\u3046\n        extreme_points.append(math.pi)\n        return extreme_points\n\n    elif len(extreme_points) == n+2:\n        # \u305d\u306e\u307e\u307e\u3067OK\n        return extreme_points\n\n    elif len(extreme_points) == n+3:\n        # \u6975\u5024\u70b9\u6570\u304cn+3\u306a\u3089\u3070\u7aef\u70b9(x=0)\u3092\u6975\u5024\u70b9\u304b\u3089\u5916\u3059\n        extreme_points.pop(0)\n        return extreme_points\n\n    else:\n        raise Exception(\"[ERROR]number of extreme point \" + \\\n            str(n+2) + \"->\" + str(len(extreme_points)))\n\n\n\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u3092\u5168\u3066\u6c42\u3081\u308b\u65b9\u6cd5\u3067\u3059\u304c\u3001\u9069\u5f53\u306b\u70b9\u5217\u3092\u767a\u751f\u3055\u305b\u3066\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4e00\u6b21\u5c0e\u95a2\u6570\u306e\u7b26\u53f7\u304c\u5909\u308f\u308b\u533a\u9593\u3092\u63a2\u3057\u3066\u6975\u5024\u70b9\u306e\u3042\u305f\u308a\u3092\u4ed8\u3051\u307e\u3059\u3002\u305d\u306e\u3042\u3068\u306b\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3067\u89e3\u3092\u6c42\u3081\u307e\u3059\u3002\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u65b9\u6cd5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u30fb\u30fb\u30fb\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n# \u6975\u5024\u70b9\u3092\u5168\u3066\u6c42\u3081\u308b\ndef search_extreme_points(\n    list_a,      # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    div):        # \u5206\u5272\u6570\n\n    # f(x)\n    def f(x):\n        return d_tri_polynomial(x, list_a);\n\n    # f(x)\u306e\u5c0e\u95a2\u6570\n    def df(x):\n        return dd_tri_polynomial(x, list_a);\n\n    # \u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\n    def newton(x0):\n        x = x0\n        for _ in range(100):\n            x_next = x - f(x)/df(x)\n            if abs(x_next - x) < 1.0e-8:\n                break\n            x = x_next\n        else:\n            print(\"[WARNING]Newton method iterations reached the limit(x=\" + str(x0) + \")\")\n        return x\n\n    # \u70b9\u5217\u3092\u751f\u6210\n    check_points = numpy.linspace(0.0, math.pi, div)\n\n    # f(x)\u306e\u7b26\u53f7\u304c\u5909\u308f\u308b\u533a\u9593\u3092\u63a2\u3059\n    sign_reverse_section = \\\n        [p for p in zip(check_points, check_points[1:]) if f(p[0])*f(p[1]) <= 0.0]\n\n    # f(x)=0\u306b\u306a\u308bx\u3092\u5168\u3066\u6c42\u3081\u308b\n    return [newton(x) for x,_ in sign_reverse_section]\n\n\n\n\nRemez algorithm step4\uff08\u53ce\u675f\u5224\u5b9a\uff09\n\u3084\u308a\u65b9\u306f\u4f55\u3067\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u5206\u6563\u304c\u307b\u3068\u3093\u30690\u3060\u3063\u305f\u5834\u5408\u306bOK\u3068\u3057\u307e\u3057\u305f\u3002\n\nFIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n#############################################################\n# Remez algorithm --step4--\n# \u53ce\u675f\u5224\u5b9a\uff08\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\uff09\n#############################################################\ndef check_convergence(\n    list_a, # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    list_x, # \u691c\u67fb\u70b9\u5217\n    w0):    # \u906e\u65ad\u5468\u6ce2\u6570\n\n    # \u8aa4\u5dee\u95a2\u6570\n    def ef(x):\n        return tri_polynomial(x, list_a)-ideal_lowpass_filter(x, w0)\n\n    return numpy.var([ef(x)*(-1)**k for k,x in enumerate(list_x)]) < 1.0e-12\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30d5\u30a3\u30eb\u30bf\u6b21\u6570:51\u3001\u906e\u65ad\u5468\u6ce2\u6570:1.0\u3001\u9077\u79fb\u5e450.1\u3067\u5b9f\u884c\u3002\n\n\u30d5\u30a3\u30eb\u30bf\u4fc2\u6570\n0.0107713139262\n-0.0468904946135\n-0.01738547837\n-0.00180941392864\n0.0101732465807\n0.0121972695875\n0.00214384802868\n-0.0115676650969\n-0.0159117634133\n-0.00513805260228\n0.0125239879163\n0.0207019219532\n0.00957031009648\n-0.0133710951659\n-0.027463740521\n-0.0165888267131\n0.0140691206175\n0.0382895442729\n0.0292522135743\n-0.0145891015438\n-0.0603882456453\n-0.0598120634071\n0.0149097733243\n0.144466447581\n0.267735413885\n0.318315208685\n0.267735413885\n0.144466447581\n0.0149097733243\n-0.0598120634071\n-0.0603882456453\n-0.0145891015438\n0.0292522135743\n0.0382895442729\n0.0140691206175\n-0.0165888267131\n-0.027463740521\n-0.0133710951659\n0.00957031009648\n0.0207019219532\n0.0125239879163\n-0.00513805260228\n-0.0159117634133\n-0.0115676650969\n0.00214384802868\n0.0121972695875\n0.0101732465807\n-0.00180941392864\n-0.01738547837\n-0.0468904946135\n0.0107713139262\n\n\n\nMathematica\u306e\u7d50\u679c\u3068\u6bd4\u8f03\u3059\u308b\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u4fc2\u6570\u304c\u5fae\u5999\u306b\u5408\u3063\u3066\u306a\u3044\u3088\u3046\u306a\u6c17\u3082\u3057\u307e\u3059\u304c\u3002\n\n\u53c2\u8003\u6587\u732e\n\n\u52a0\u85e4\u654f\u592b\u3001\u5fa9\u520a \u4f4d\u76f8\u89e3\u6790(\u5171\u7acb\u51fa\u7248)\n\u8c37\u8429\u9686\u55e3\u3001\u30c7\u30a3\u30b8\u30bf\u30eb\u30d5\u30a3\u30eb\u30bf\u3068\u4fe1\u53f7\u51e6\u7406(\u30b3\u30ed\u30ca\u793e)\n\n# \u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u3068\u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\n\n\u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u306f\u4e8c\u4e57\u8aa4\u5dee\u306e\u7dcf\u548c\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u4fc2\u6570\u3092\u6c42\u3081\u308b\u306e\u306b\u5bfe\u3057\u3066\u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\u306f\u7d76\u5bfe\u5024\u6700\u5927\u306e\u8aa4\u5dee\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b\u4fc2\u6570\u3092\u6c42\u3081\u307e\u3059\u3002\u6700\u5c0f\u4e8c\u4e57\u8fd1\u4f3c\u3088\u308a\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u3002\u67d0\u97f3\u30b2\u30fc\u3067\u4f8b\u3048\u308b\u3068\u30e9\u30a4\u30d6\u6210\u529f\u3068\u30d5\u30eb\u30b3\u30f3\u30dc\u306e\u9055\u3044\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n## \u6700\u5c0f\u4e8c\u4e57\u30d5\u30a3\u30eb\u30bf\n\u906e\u65ad\u5468\u6ce2\u6570\u304c1.0\u306e51\u6b21\u306e\u6700\u5c0f\u4e8c\u4e57\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002Raspberry Pi\u306eMathematica\u3067\u304a\u624b\u8efd\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n![least-squares.png](https://qiita-image-store.s3.amazonaws.com/0/42791/954b44ed-317c-6181-c8f9-21742007f602.png)\n\n## \u7b49\u30ea\u30d7\u30eb\u30d5\u30a3\u30eb\u30bf\n\u906e\u65ad\u5468\u6ce2\u6570\u304c1.0\u306e51\u6b21\u306e\u7b49\u30ea\u30d7\u30eb\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u81ea\u524d\u3067\u8a08\u7b97\u3059\u308b\u306e\u304c\u76ee\u6a19\u3067\u3059\u3002\n![remez.png](https://qiita-image-store.s3.amazonaws.com/0/42791/b2a63250-e0fb-6d6a-825c-6889e4a75549.png)\n\n# \u30df\u30cb\u30de\u30c3\u30af\u30b9\u8fd1\u4f3c\n## \u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\n\n$f(x)$\u306f\u533a\u9593$[a,b]$\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308b$n$\u6b21\u591a\u9805\u5f0f\u3092\n\n```math\nf_n(x)=\\sum_{k=0}^n a_k x^k\n```\n\n\u3068\u3057\u307e\u3059\u3002$n$\u3092\u56fa\u5b9a\u3057\u305f\u3068\u304d\u306b\n\n```math\n \\max_{a<x<b} |f(x)-f_n(x)|\n```\n\n\u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a\u591a\u9805\u5f0f\u3092**\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f**\u3068\u3044\u3044\u307e\u3059\u3002\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306f\u6b21\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n> $f_n(x)$\u304c\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u3067\u3042\u308b\u305f\u3081\u306e\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u3092\n>\n> ```math\n> \\epsilon(x) = f(x)-f_n(x)\n> ```\n>\n>\u3068\u7f6e\u3044\u305f\u3068\u304d\u3001$|\\epsilon(x)|$\u304c\u533a\u9593$[a,b]$\u3067\u5c11\u306a\u304f\u3068\u3082$n+2$\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b$\\epsilon(x)$\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u3042\u3068\u6700\u826f\u8fd1\u4f3c\u591a\u9805\u5f0f\u306e\u4e00\u610f\u6027\u306b\u3064\u3044\u3066\u3082\u3044\u308f\u306a\u3044\u3068\u3067\u3059\u304c\u5272\u611b\u3057\u307e\u3059\u3002\n\n## \u6700\u826f\u8fd1\u4f3c\u4e09\u89d2\u591a\u9805\u5f0f\n\n$g(x)$\u306f\u533a\u9593$[0,\\pi]$\u3067\u9023\u7d9a\u306a\u95a2\u6570\u3067\u305d\u308c\u3092\u8fd1\u4f3c\u3059\u308b\u4e09\u89d2\u591a\u9805\u5f0f\u3092\n\n```math\ng_n(x)= \\sum_{k=0}^n a_k \\cos(kx)\n```\n\n\u3068\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u5076\u95a2\u6570\u3092\u6271\u3046\u306e\u3067$\\sin$\u95a2\u6570\u306f\u7121\u3057\u3068\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u306f\u591a\u9805\u5f0f\u306e\u5834\u5408\u3068\u540c\u3058\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n> $g_n$\u304c\u533a\u9593$[0,\\pi]$\u3067\u9023\u7d9a\u306a\u95a2\u6570$g$\u306e\u6700\u826f\u8fd1\u4f3c\u3068\u306e\u306a\u308b\u5fc5\u8981\u5341\u5206\u6761\u4ef6\u306f\u3001\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u3092\n>\n> ```math\n> \\epsilon(x) = g(x)-g_n(x)\n> ```\n>\n> \u3068\u7f6e\u3044\u305f\u3068\u304d\u3001$|\\epsilon(x)|$\u304c\u533a\u9593$[0,\\pi]$\u3067\u5c11\u306a\u304f\u3068\u3082$n+2$\u70b9\u3067\u7b49\u3057\u3044\u6700\u5927\u5024\u3092\u3068\u308a\u3001\u6700\u5927\u5024\u306b\u304a\u3051\u308b$\\epsilon(x)$\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308b\u3053\u3068\u3067\u3042\u308b\u3002\n\n# Remez algorithm\n\n\u4eca\u56de\u306f[Remez algorithm](https://en.wikipedia.org/wiki/Remez_algorithm)\u3092\u7528\u3044\u3066\u7b49\u30ea\u30d7\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n> 1. \u533a\u9593$[0, \\pi]$\u4e0a\u306b$n+2$\u500b\u306e\u691c\u67fb\u70b9$x_0, \\cdots x_{n+1}$\u3092\u9069\u5f53\u306b\u7528\u610f\u3059\u308b\n> 2. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3076\u3088\u3046\u306a\u4e09\u89d2\u591a\u9805\u5f0f$g(x)$\u306e\u4fc2\u6570$a_0, \\cdots, a_n$\u3068\u8aa4\u5dee$d$\u3092\u6c42\u3081\u3001\u4e09\u89d2\u591a\u9805\u5f0f\u3092\u66f4\u65b0\u3059\u308b\n> 3. \u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308b$n+2$\u500b\u306e\u70b9$x_0, \\cdots x_{n+1}$\u3092\u6c42\u3081\u3001\u691c\u67fb\u70b9\u3092\u66f4\u65b0\u3059\u308b\n> 4. \u691c\u67fb\u70b9\u3067\u306e\u8aa4\u5dee\u95a2\u6570$\\epsilon(x)$\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30702\u3078\u623b\u308b\n\n4\u306f\u305d\u306e\u307e\u3093\u307e\u30012\u306f\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u3051\u3070\u826f\u3055\u305d\u3046\uff08\u89e3\u304d\u65b9\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c\uff09\u3001\u3057\u304b\u30571\u30683\u306f\u8a66\u884c\u932f\u8aa4\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u306d\u3002\n\n# \u5b9f\u88c5\n\nPython\u3067200\u884c\u7a0b\u5ea6\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5165\u529b\u5024\u306b\u3088\u3063\u3066\u306f\u30b3\u30b1\u308b\u306e\u3067\u4e07\u80fd\u3067\u306f\u306a\u3044\u3067\u3059\u3002\n\n- https://github.com/fukuroder/Remez_algorithm_test\n\n## Remez algorithm\uff08\u672c\u4f53\uff09\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n######################\n# Remez algorithm \u672c\u4f53\n######################\ndef remez(\n    order,         # \u30d5\u30a3\u30eb\u30bf\u306e\u6b21\u6570\n    w0,            # \u906e\u65ad\u5468\u6ce2\u6570\n    h,             # \u9077\u79fb\u5e45\n    max_iter=100): # \u6700\u5927\u53cd\u5fa9\u56de\u6570\n\n    n = (order-1)//2 # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n\n    # Remez algorithm --step1--\n    # \u691c\u67fb\u70b9\u306e\u521d\u671f\u5024\u3092\u751f\u6210\n    list_x = initialize_extreme_points(n, w0, h)\n\n    for count in range(1, max_iter+1):\n        # Remez algorithm --step2--\n        # \u691c\u67fb\u70b9(x[0],...,x[n+1])\u3067\u306e\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\n        # \u4e09\u89d2\u591a\u9805\u5f0f\u4fc2\u6570(a[0],...a[n])\u3068\u8aa4\u5deed\u3092\u6c42\u3081\u308b\n        list_a, d = update_tri_polynomial_coefficients(list_x, w0)\n\n        # Remez algorithm --step3--\n        # \u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u6c42\u3081\u308b\n        list_x = update_maximum_error_points(list_a, w0, h)\n\n        # Remez algorithm --step4--\n        # \u53ce\u675f\u5224\u5b9a\uff08\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\uff09\n        if check_convergence(list_a, list_x, w0):\n            # cos\u95a2\u6570\u7cfb\u304b\u3089exp\u95a2\u6570\u7cfb\u306e\u8868\u73fe\u306b\u5909\u63db\n            list_h = [a*0.5 for a in reversed(list_a[1:])] + \\\n                     [list_a[0]] + \\\n                     [a*0.5 for a in list_a[1:]]\n            return list_h, d, list_x, count\n    else:\n        raise Exception(\"[ERROR]Remez algorithm failed\")\n```\n\n## Remez algorithm step1\uff08\u521d\u671f\u70b9\u306e\u751f\u6210\uff09\n\n\u9069\u5f53\u306b\u7b49\u9593\u9694\u3067n+2\u500b\u306e\u70b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u9077\u79fb\u57df\u306b\u70b9\u304c\u5165\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n###########################\n# Remez algorithm --step1--\n# \u691c\u67fb\u70b9\u306e\u521d\u671f\u5024\u3092\u751f\u6210\n###########################\ndef initialize_extreme_points(\n    n,  # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n    w0, # \u906e\u65ad\u5468\u6ce2\u6570\n    h): # \u9077\u79fb\u5e45\n\n    # \u901a\u904e\u57df\u70b9\u6570\uff0b\u963b\u6b62\u57df\u70b9\u6570\n    num_point = n+2;\n\n    # \u901a\u904e\u57df\u70b9\u6570\n    num_passband_point = int(num_point*w0/math.pi)\n\n    # \u963b\u6b62\u57df\u70b9\u6570\n    num_stopband_point = num_point-num_passband_point\n\n    # \u521d\u671f\u70b9\u3092\u751f\u6210\n    return numpy.append(\n        numpy.linspace(     0.0, w0-0.5*h, num_passband_point),\n        numpy.linspace(w0+0.5*h,  math.pi, num_stopband_point))\n```\n\n![initialize_extreme_points.png](https://qiita-image-store.s3.amazonaws.com/0/42791/308903e6-9f99-4bd1-c20f-a923815e2f26.png)\n\n## Remez algorithm step2\uff08\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u66f4\u65b0\uff09\n\n\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306e\u7d44\u307f\u7acb\u3066\u3068\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u767b\u5834\u3059\u308b\u9023\u7acb\u4e00\u6b21\u65b9\u7a0b\u5f0f\u306f\u5c0f\u898f\u6a21\u306a\u5bc6\u884c\u5217\u306a\u306e\u3067\u7d20\u76f4\u306b\u76f4\u63a5\u6cd5\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n##########################################################\n# Remez algorithm --step2--\n# \u691c\u67fb\u70b9(x[0],...,x[n+1])\u3067\u306e\u8aa4\u5dee\u306e\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306a\n# \u4e09\u89d2\u591a\u9805\u5f0f\u4fc2\u6570(a[0],...a[n])\u3068\u8aa4\u5deed\u3092\u6c42\u3081\u308b\n##########################################################\ndef update_tri_polynomial_coefficients(\n    list_x, # \u691c\u67fb\u70b9\n    w0):    # \u906e\u65ad\u5468\u6ce2\u6570\n\n    # \u884c\u5217A\u4f5c\u6210\n    matrix_A = numpy.array(\n        [[math.cos(x*k) for k in range(len(list_x)-1)] + [(-1)**j] \\\n                        for j,x in enumerate(list_x)])\n\n    # \u30d9\u30af\u30c8\u30ebb\u4f5c\u6210\n    vector_b = numpy.array([ideal_lowpass_filter(x, w0) for x in list_x])\n\n    # \u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\n    u = numpy.linalg.solve(matrix_A, vector_b)\n\n    # a[0],...,a[n], d\n    return u[:-1], u[-1]\n```\n\n![06_update_tri_polynomial_coefficients_2.png](https://qiita-image-store.s3.amazonaws.com/0/42791/e9182e93-9708-140d-8437-4ce6d82ef17d.png)\n\n## Remez algorithm step3\uff08\u691c\u67fb\u70b9\u306e\u66f4\u65b0\uff09\n\n\u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u65b0\u3057\u3044\u691c\u67fb\u70b9\u3068\u3057\u307e\u3059\u3002\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u306f\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u306e\u307f\u3067\u306f\u76ee\u6a19\u306en+2\u500b\u306b\u5230\u9054\u3057\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u9077\u79fb\u57df\u306e\u958b\u59cb\u7d42\u4e86\u4f4d\u7f6e\u3082\u691c\u67fb\u70b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u691c\u67fb\u70b9\u306f\u4e01\u5ea6n+2\u500b\u3067\u306a\u3044\u3068step2\u3067\u30b3\u30b1\u307e\u3059\u306e\u3067\u7834\u7dbb\u3057\u306a\u3044\u3088\u3046\u306b\u9069\u5f53\u306b\u8abf\u6574\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u5165\u529b\u5024\u306b\u3088\u3063\u3066\u306f\u30b3\u30b1\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3082\u3046\u5c11\u3057\u304c\u3093\u3070\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3059\u304c\u6ce5\u81ed\u304f\u306a\u308b\u306e\u3067\u8ae6\u3081\u307e\u3057\u305f\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n###########################################\n# Remez algorithm --step3--\n# \u8aa4\u5dee\u95a2\u6570\u306e\u7d76\u5bfe\u5024\u304c\u6700\u5927\u3068\u306a\u308bn+2\u500b\u306e\u70b9\u3092\u6c42\u3081\u308b\n###########################################\ndef update_maximum_error_points(\n    list_a, # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    w0,     # \u906e\u65ad\u5468\u6ce2\u6570\n    h):     # \u9077\u79fb\u5e45\n\n    # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6b21\u6570\n    n = len(list_a)-1\n\n    # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u3092\u6c42\u3081\u308b\n    extreme_points = search_extreme_points(list_a, (n+2)*10)\n\n    # \u9077\u79fb\u57df\u306e\u958b\u59cb\u7d42\u4e86\u4f4d\u7f6e\u3082\u6975\u5024\u70b9\u3060\u3068\u601d\u3046\n    extreme_points.append(w0-h*0.5)\n    extreme_points.append(w0+h*0.5)\n    extreme_points.sort()\n\n    if len(extreme_points) == n+1:\n        # \u6975\u5024\u70b9\u6570\u304cn+1\u306a\u3089\u3070\u7aef\u70b9(x=pi)\u3082\u6975\u5024\u70b9\u3060\u3068\u601d\u3046\n        extreme_points.append(math.pi)\n        return extreme_points\n\n    elif len(extreme_points) == n+2:\n        # \u305d\u306e\u307e\u307e\u3067OK\n        return extreme_points\n\n    elif len(extreme_points) == n+3:\n        # \u6975\u5024\u70b9\u6570\u304cn+3\u306a\u3089\u3070\u7aef\u70b9(x=0)\u3092\u6975\u5024\u70b9\u304b\u3089\u5916\u3059\n        extreme_points.pop(0)\n        return extreme_points\n\n    else:\n        raise Exception(\"[ERROR]number of extreme point \" + \\\n            str(n+2) + \"->\" + str(len(extreme_points)))\n```\n\n\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u6975\u5024\u70b9\u3092\u5168\u3066\u6c42\u3081\u308b\u65b9\u6cd5\u3067\u3059\u304c\u3001\u9069\u5f53\u306b\u70b9\u5217\u3092\u767a\u751f\u3055\u305b\u3066\u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4e00\u6b21\u5c0e\u95a2\u6570\u306e\u7b26\u53f7\u304c\u5909\u308f\u308b\u533a\u9593\u3092\u63a2\u3057\u3066\u6975\u5024\u70b9\u306e\u3042\u305f\u308a\u3092\u4ed8\u3051\u307e\u3059\u3002\u305d\u306e\u3042\u3068\u306b\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3067\u89e3\u3092\u6c42\u3081\u307e\u3059\u3002\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u65b9\u6cd5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u30fb\u30fb\u30fb\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n# \u6975\u5024\u70b9\u3092\u5168\u3066\u6c42\u3081\u308b\ndef search_extreme_points(\n    list_a,      # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    div):        # \u5206\u5272\u6570\n\n    # f(x)\n    def f(x):\n        return d_tri_polynomial(x, list_a);\n\n    # f(x)\u306e\u5c0e\u95a2\u6570\n    def df(x):\n        return dd_tri_polynomial(x, list_a);\n\n    # \u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\n    def newton(x0):\n        x = x0\n        for _ in range(100):\n            x_next = x - f(x)/df(x)\n            if abs(x_next - x) < 1.0e-8:\n                break\n            x = x_next\n        else:\n            print(\"[WARNING]Newton method iterations reached the limit(x=\" + str(x0) + \")\")\n        return x\n\n    # \u70b9\u5217\u3092\u751f\u6210\n    check_points = numpy.linspace(0.0, math.pi, div)\n\n    # f(x)\u306e\u7b26\u53f7\u304c\u5909\u308f\u308b\u533a\u9593\u3092\u63a2\u3059\n    sign_reverse_section = \\\n        [p for p in zip(check_points, check_points[1:]) if f(p[0])*f(p[1]) <= 0.0]\n\n    # f(x)=0\u306b\u306a\u308bx\u3092\u5168\u3066\u6c42\u3081\u308b\n    return [newton(x) for x,_ in sign_reverse_section]\n```\n\n![07_update_maximum_error_points_2.png](https://qiita-image-store.s3.amazonaws.com/0/42791/4b3149e8-c7b1-17e5-b7c7-72f4954899d9.png)\n\n## Remez algorithm step4\uff08\u53ce\u675f\u5224\u5b9a\uff09\n\n\u3084\u308a\u65b9\u306f\u4f55\u3067\u3082\u3044\u3044\u3067\u3059\u304c\u3001\u5206\u6563\u304c\u307b\u3068\u3093\u30690\u3060\u3063\u305f\u5834\u5408\u306bOK\u3068\u3057\u307e\u3057\u305f\u3002\n\n```py3:FIR-LPF-Remez-algorithm.py(\u629c\u7c8b)\n#############################################################\n# Remez algorithm --step4--\n# \u53ce\u675f\u5224\u5b9a\uff08\u8aa4\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u7b49\u3057\u304f\u304b\u3064\u7b26\u53f7\u304c\u4ea4\u4e92\u306b\u4e26\u3093\u3067\u3044\u308c\u3070\u7d42\u4e86\uff09\n#############################################################\ndef check_convergence(\n    list_a, # \u4e09\u89d2\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u5217\n    list_x, # \u691c\u67fb\u70b9\u5217\n    w0):    # \u906e\u65ad\u5468\u6ce2\u6570\n\n    # \u8aa4\u5dee\u95a2\u6570\n    def ef(x):\n        return tri_polynomial(x, list_a)-ideal_lowpass_filter(x, w0)\n\n    return numpy.var([ef(x)*(-1)**k for k,x in enumerate(list_x)]) < 1.0e-12\n```\n\n![08_update_maximum_error_points_2.png](https://qiita-image-store.s3.amazonaws.com/0/42791/31bfee15-40d1-8c60-e49d-3058df7f9fd2.png)\n\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u30d5\u30a3\u30eb\u30bf\u6b21\u6570:51\u3001\u906e\u65ad\u5468\u6ce2\u6570:1.0\u3001\u9077\u79fb\u5e450.1\u3067\u5b9f\u884c\u3002\n\n```text:\u30d5\u30a3\u30eb\u30bf\u4fc2\u6570\n0.0107713139262\n-0.0468904946135\n-0.01738547837\n-0.00180941392864\n0.0101732465807\n0.0121972695875\n0.00214384802868\n-0.0115676650969\n-0.0159117634133\n-0.00513805260228\n0.0125239879163\n0.0207019219532\n0.00957031009648\n-0.0133710951659\n-0.027463740521\n-0.0165888267131\n0.0140691206175\n0.0382895442729\n0.0292522135743\n-0.0145891015438\n-0.0603882456453\n-0.0598120634071\n0.0149097733243\n0.144466447581\n0.267735413885\n0.318315208685\n0.267735413885\n0.144466447581\n0.0149097733243\n-0.0598120634071\n-0.0603882456453\n-0.0145891015438\n0.0292522135743\n0.0382895442729\n0.0140691206175\n-0.0165888267131\n-0.027463740521\n-0.0133710951659\n0.00957031009648\n0.0207019219532\n0.0125239879163\n-0.00513805260228\n-0.0159117634133\n-0.0115676650969\n0.00214384802868\n0.0121972695875\n0.0101732465807\n-0.00180941392864\n-0.01738547837\n-0.0468904946135\n0.0107713139262\n```\n\n![result.png](https://qiita-image-store.s3.amazonaws.com/0/42791/7cdf57b0-e667-fb5f-0c7d-b751d9abdedd.png)\n\nMathematica\u306e\u7d50\u679c\u3068\u6bd4\u8f03\u3059\u308b\u3068\u30d5\u30a3\u30eb\u30bf\u306e\u4fc2\u6570\u304c\u5fae\u5999\u306b\u5408\u3063\u3066\u306a\u3044\u3088\u3046\u306a\u6c17\u3082\u3057\u307e\u3059\u304c\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n+ \u52a0\u85e4\u654f\u592b\u3001\u5fa9\u520a \u4f4d\u76f8\u89e3\u6790(\u5171\u7acb\u51fa\u7248)\n+ \u8c37\u8429\u9686\u55e3\u3001\u30c7\u30a3\u30b8\u30bf\u30eb\u30d5\u30a3\u30eb\u30bf\u3068\u4fe1\u53f7\u51e6\u7406(\u30b3\u30ed\u30ca\u793e)\n", "tags": ["\u6570\u5024\u8a08\u7b97", "\u4fe1\u53f7\u51e6\u7406"]}