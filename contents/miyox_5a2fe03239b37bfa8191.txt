{"context": "GCC\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u304a\u3082\u3063\u3066\uff0cWeb\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u307f\u3066\u307f\u308b\u3068\uff0c4.7\u30844.8\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u3067\u3042\u308d\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u591a\u3005\u307f\u3064\u304b\u308b\uff0e\u30d7\u30e9\u30b0\u30a4\u30f3\u306f4.5\u4ee5\u964d\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3051\u3069\uff0c\u3044\u308d\u3044\u308d\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u9055\u3044\u304c\u3042\u308b\u3088\u3046\uff0e\n\u305f\u3068\u3048\u3070\uff0cNarrow Escape GCC plugin\u3092\u8a66\u3057\u3066\u307f\u308b\u3082\u305d\u306e\u4e00\u3064\u3067\uff0c4.7\u3092\u5bfe\u8c61\u3068\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\uff0e\n\u30b7\u30f3\u30d7\u30eb\u3067\u3088\u3055\u305d\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u3060\u3063\u305f\u306e\u3067\u30a8\u30f3\u30c8\u30ea\u3068\u3057\u3066\u8a66\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\uff0c\u5f8c\u534a\u306e\u65b9\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u4fee\u6b63\u3057\u3066\u307f\u305f\uff0e\u4fee\u6b63\u7b87\u6240\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n--- orig.cpp    2016-11-30 15:18:08.797853450 +0900\n+++ my_gcc_plugin3.cpp  2016-11-30 15:02:28.085853450 +0900\n@@ -1,14 +1,52 @@\n #include <gcc-plugin.h>\n #include <coretypes.h>\n #include <diagnostic.h>\n-#include <gimple.h>\n #include <tree.h>\n-#include <tree-flow.h>\n+#include <function.h>\n+#include <basic-block.h>\n+#include <coretypes.h>\n+#include <is-a.h>\n+#include <predict.h>\n+#include <internal-fn.h>\n+#include <tree-ssa-alias.h>\n+#include <gimple-expr.h>\n+#include <gimple.h>\n #include <tree-pass.h>\n+#include <context.h>\n #include <execinfo.h>\n\n int plugin_is_GPL_compatible;\n\n+namespace{\n+\n+const pass_data pass_data_PLUGIN_PASS_MANAGER_SETUP_pass =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"PLUGIN_PASS_MANAGER_SETUP\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_gimple_any, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class PLUGIN_PASS_MANAGER_SETUP_pass : public gimple_opt_pass\n+{\n+public:\n+  PLUGIN_PASS_MANAGER_SETUP_pass(gcc::context *ctxt)\n+    : gimple_opt_pass(pass_data_PLUGIN_PASS_MANAGER_SETUP_pass, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *);\n+\n+}; // class one_pass\n+\n+}\n+\n #define __pr_dbg(...)                           \\\n   do {                                          \\\n     fprintf(stderr, __VA_ARGS__);               \\\n@@ -86,38 +124,26 @@ static void pr_curr_func(void)\n   __pr_dbg(\")\\n\");\n }\n\n-static bool PLUGIN_PASS_MANAGER_SETUP_gate(void)\n+bool PLUGIN_PASS_MANAGER_SETUP_pass::gate(function *)\n {\n   return true;\n }\n\n-static unsigned PLUGIN_PASS_MANAGER_SETUP_exec(void)\n+unsigned PLUGIN_PASS_MANAGER_SETUP_pass::execute(function *)\n {\n   pr_curr_func();\n   return 0;\n }\n\n-static struct gimple_opt_pass PLUGIN_PASS_MANAGER_SETUP_pass = \n-  {\n-    {\n-      .type = GIMPLE_PASS,\n-      .name = \"PLUGIN_PASS_MANAGER_SETUP\",\n-      .gate = PLUGIN_PASS_MANAGER_SETUP_gate,\n-      .execute = PLUGIN_PASS_MANAGER_SETUP_exec,\n-    }\n-  };\n- \n int plugin_init(struct plugin_name_args *args,\n                 struct plugin_gcc_version *version)\n {\n-  struct register_pass_info pass =\n-    {\n-      .pass = &PLUGIN_PASS_MANAGER_SETUP_pass.pass,\n-      .reference_pass_name = \"cfg\",\n-      .ref_pass_instance_number = 1,\n-      .pos_op = PASS_POS_INSERT_AFTER,\n-    };\n-  register_callback(args->base_name, PLUGIN_PASS_MANAGER_SETUP,\n-                    NULL, &pass);\n+  struct register_pass_info pass;\n+  pass.pass = new PLUGIN_PASS_MANAGER_SETUP_pass(g);\n+  pass.reference_pass_name = \"cfg\",\n+  pass.ref_pass_instance_number = 1,\n+  pass.pos_op = PASS_POS_INSERT_AFTER,\n+\n+  register_callback(args->base_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass);\n   return 0;\n }\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u304d\u3082\ng++ -Wall -I`g++ -print-file-name=plugin`/include -fPIC -fno-rtti -shared my_gcc_plugin3.cpp -o my_gcc_plugin3.so\n\n\u3068\uff0c-fno-rtti\u3092\u3064\u3051\u306a\u3044\u3068\u30b7\u30f3\u30dc\u30eb\u304c\u89e3\u6c7a\u3055\u308c\u306a\u304f\u3066\u4f7f\u3048\u306a\u3044\uff0e\n\u8a73\u3057\u304f\u306f\u3042\u3068\u3067\uff0e\nGCC\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u304a\u3082\u3063\u3066\uff0cWeb\u30b5\u30a4\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u307f\u3066\u307f\u308b\u3068\uff0c4.7\u30844.8\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u3067\u3042\u308d\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u591a\u3005\u307f\u3064\u304b\u308b\uff0e\u30d7\u30e9\u30b0\u30a4\u30f3\u306f4.5\u4ee5\u964d\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3051\u3069\uff0c\u3044\u308d\u3044\u308d\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u9055\u3044\u304c\u3042\u308b\u3088\u3046\uff0e\n\n\u305f\u3068\u3048\u3070\uff0c[Narrow Escape GCC plugin\u3092\u8a66\u3057\u3066\u307f\u308b](http://www.hiroom2.com/2014/02/05/gcc-plugin\u3092\u8a66\u3057\u3066\u307f\u308b/)\u3082\u305d\u306e\u4e00\u3064\u3067\uff0c4.7\u3092\u5bfe\u8c61\u3068\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u304c\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\uff0e\n\n\u30b7\u30f3\u30d7\u30eb\u3067\u3088\u3055\u305d\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u3060\u3063\u305f\u306e\u3067\u30a8\u30f3\u30c8\u30ea\u3068\u3057\u3066\u8a66\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3060\u3051\u3069\uff0c\u5f8c\u534a\u306e\u65b9\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u305d\u306e\u307e\u307e\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u4fee\u6b63\u3057\u3066\u307f\u305f\uff0e\u4fee\u6b63\u7b87\u6240\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n```\n--- orig.cpp    2016-11-30 15:18:08.797853450 +0900\n+++ my_gcc_plugin3.cpp  2016-11-30 15:02:28.085853450 +0900\n@@ -1,14 +1,52 @@\n #include <gcc-plugin.h>\n #include <coretypes.h>\n #include <diagnostic.h>\n-#include <gimple.h>\n #include <tree.h>\n-#include <tree-flow.h>\n+#include <function.h>\n+#include <basic-block.h>\n+#include <coretypes.h>\n+#include <is-a.h>\n+#include <predict.h>\n+#include <internal-fn.h>\n+#include <tree-ssa-alias.h>\n+#include <gimple-expr.h>\n+#include <gimple.h>\n #include <tree-pass.h>\n+#include <context.h>\n #include <execinfo.h>\n  \n int plugin_is_GPL_compatible;\n  \n+namespace{\n+\n+const pass_data pass_data_PLUGIN_PASS_MANAGER_SETUP_pass =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"PLUGIN_PASS_MANAGER_SETUP\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_gimple_any, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class PLUGIN_PASS_MANAGER_SETUP_pass : public gimple_opt_pass\n+{\n+public:\n+  PLUGIN_PASS_MANAGER_SETUP_pass(gcc::context *ctxt)\n+    : gimple_opt_pass(pass_data_PLUGIN_PASS_MANAGER_SETUP_pass, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *);\n+  virtual unsigned int execute (function *);\n+\n+}; // class one_pass\n+\n+}\n+\n #define __pr_dbg(...)                           \\\n   do {                                          \\\n     fprintf(stderr, __VA_ARGS__);               \\\n@@ -86,38 +124,26 @@ static void pr_curr_func(void)\n   __pr_dbg(\")\\n\");\n }\n  \n-static bool PLUGIN_PASS_MANAGER_SETUP_gate(void)\n+bool PLUGIN_PASS_MANAGER_SETUP_pass::gate(function *)\n {\n   return true;\n }\n  \n-static unsigned PLUGIN_PASS_MANAGER_SETUP_exec(void)\n+unsigned PLUGIN_PASS_MANAGER_SETUP_pass::execute(function *)\n {\n   pr_curr_func();\n   return 0;\n }\n  \n-static struct gimple_opt_pass PLUGIN_PASS_MANAGER_SETUP_pass = \n-  {\n-    {\n-      .type = GIMPLE_PASS,\n-      .name = \"PLUGIN_PASS_MANAGER_SETUP\",\n-      .gate = PLUGIN_PASS_MANAGER_SETUP_gate,\n-      .execute = PLUGIN_PASS_MANAGER_SETUP_exec,\n-    }\n-  };\n- \n int plugin_init(struct plugin_name_args *args,\n                 struct plugin_gcc_version *version)\n {\n-  struct register_pass_info pass =\n-    {\n-      .pass = &PLUGIN_PASS_MANAGER_SETUP_pass.pass,\n-      .reference_pass_name = \"cfg\",\n-      .ref_pass_instance_number = 1,\n-      .pos_op = PASS_POS_INSERT_AFTER,\n-    };\n-  register_callback(args->base_name, PLUGIN_PASS_MANAGER_SETUP,\n-                    NULL, &pass);\n+  struct register_pass_info pass;\n+  pass.pass = new PLUGIN_PASS_MANAGER_SETUP_pass(g);\n+  pass.reference_pass_name = \"cfg\",\n+  pass.ref_pass_instance_number = 1,\n+  pass.pos_op = PASS_POS_INSERT_AFTER,\n+\n+  register_callback(args->base_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass);\n   return 0;\n }\n\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u304d\u3082\n\n```\ng++ -Wall -I`g++ -print-file-name=plugin`/include -fPIC -fno-rtti -shared my_gcc_plugin3.cpp -o my_gcc_plugin3.so\n```\n\n\u3068\uff0c-fno-rtti\u3092\u3064\u3051\u306a\u3044\u3068\u30b7\u30f3\u30dc\u30eb\u304c\u89e3\u6c7a\u3055\u308c\u306a\u304f\u3066\u4f7f\u3048\u306a\u3044\uff0e\n\n\u8a73\u3057\u304f\u306f\u3042\u3068\u3067\uff0e\n", "tags": ["GCC"]}