{"context": "D\u8a00\u8a9e\u3068\u3044\u3048\u3070\u30c7\u30d0\u30c3\u30b0\u30fb\u691c\u8a3c(\u3068\u601d\u3044\u8fbc\u3093\u3067\u307e\u3059).\n\u3053\u3053\u3067\u306f\u3001\u691c\u8a3c\u306b\u4f7f\u3048\u305d\u3046\u306a\u5f0f\u3092\u307e\u3068\u3081\u307e\u3057\u305f.\n\nmain\u6587\u306a\u3057\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\nD\u8a00\u8a9e\u3067\u306f-main\u3092\u6307\u5b9a\u3059\u308c\u3070main\u6587\u306a\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u308b\u3088\u3046.\n$dmd -main hoge.d\n\n\n\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u53c2\u8003\u306b\u3088\u308b\u3068, \u5951\u7d04\u3068\u306f\u5e38\u306btrue\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5f0f\u306e\u3053\u3068\u3067\u3059. \u3064\u307e\u308a, false\u306b\u306a\u3063\u305f\u3068\u304d\u306berror\u3092\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d.\n\u4e00\u756a\u57fa\u672c\u7684\u306a\u3082\u306e\u3068\u3057\u3066assert()\u304c\u6319\u3052\u3089\u308c\u307e\u3059.\n//\u5f0f\u304cfalse\u3060\u3063\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u529b\u3055\u308c\u308b\nassert(\u5f0f);\n\n//\u51fa\u529b\u6587\u5b57\u3092\u8a2d\u5b9a\nassert(A==B,\"\u51fa\u529b\");\n\n//\u5230\u9054\u4e0d\u80fd\n//\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30a8\u30e9\u30fc\u3092\u51fa\u529b\nassert(0);\n\n\n\u3061\u306a\u307f\u306b, -release\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068assert(false)\u3084assert(0)\u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u7d76\u5bfe\u306b\u5931\u6557\u3059\u308b\u3068\u308f\u304b\u308b\u3082\u306e\u4ee5\u5916, assert\u5f0f\u306f\u6d88\u3048\u308b\u3088\u3046\u3067\u3059.\n\n\u4e8b\u524d\u30fb\u4e8b\u5f8c\u6761\u4ef6\n\u304b\u306a\u308a\u610f\u8a33\u3067\u3059\u304c, \u81ea\u5206\u306a\u308a\u306e\u89e3\u91c8\u3092\nin  : \u5f15\u6570\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nout : \u5b9f\u884c\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nbody: \u5b9f\u884c\u5185\u5bb9\n...\u3068\u3057\u3066\u691c\u8a3c\u3092\u884c\u3044\u307e\u3059.\n//\u516c\u5f0f\u30b5\u30a4\u30c8\u4e38\u30d1\u30af\u30ea\nlong square_root(long x)\n  in {\n    //\u524d\u63d0\u3068\u3057\u3066x\u304c0\u4ee5\u4e0a\u3058\u3083\u306a\u3044\u3068\u5e73\u65b9\u6839\u306f\u6c42\u307e\u3089\u306a\u3044\n    assert(x >= 0);\n  }\n  out (result) {\n    //\u5b9f\u884c\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u6027\u8cea\u306b\u5f53\u3066\u306f\u3081\u3066\u691c\u8a3c\u3057\u3066\u307f\u308b\n    assert((result * result) <= x && (result+1) * (result+1) >= x);\n  }\n  body {\n    //\u5b9f\u884c\u5185\u5bb9\n    return cast(long)std.math.sqrt(cast(real)x);\n  }\n\n//\u5f15\u6570\u304c\u306a\u3044\u3068\u304d\u306a\u3069\u306bin\u304c\u306a\u3044\u691c\u8a3c\u3082\u884c\u3048\u308b\nvoid func()\n  out {\n    ~~~\n  }\n  body {\n    ...\n  }\n\n\n\u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\nerror.d\nvoid func() {\n  in {\n  } out {\n    ~~~\n  }\n  body {\n    ...\n  }\n}\n\nvoid main(){ ~~ }\n\n\n$rdmd error.d\nerror.d(): Error: found 'in' instead of statement\nerror.d(): Error: declaration expected, not 'out'\nerror.d(): Error: unrecognized declaration\n\n\u53c2\u8003:\n\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\nD\u8a00\u8a9eassert(failse)\u306b\u3064\u3044\u3066\n\n\u5358\u4f53\u30c6\u30b9\u30c8\nunittest {\n assert(~~);\n\n out {\n  ~~\n }\n body {\n  --\n }\n //\u51e6\u7406\u3092\u3064\u3089\u3064\u3089\n}\n\nunittest\u3092\u4f7f\u3046\u306b\u306f-unittest\u3092\u6307\u5b9a\u3057\u307e\u3059\n$dmd -unittest hoge.d\n\n\u203b\u3069\u3046\u3084\u3089unittest\u306fmain\u306e\u4e2d\u3067\u306f\u4f7f\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\n\u53c2\u8003:\n\u5358\u4f53\u30c6\u30b9\u30c8\n\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u62e1\u5f35\n\n\u30a8\u30e9\u30fc\u51e6\u7406\n\u5b9f\u884c\u4e2d\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3068\u304d\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3059\u308b\u3082\u306e\u3067\u3059.\u307e\u3055\u304b\u306e\u5834\u5408\u304c\u8d77\u304d\u305f\u3068\u304d\u306e\u51e6\u7406\u3067\u3059\u306d.\n\u30a8\u30e9\u30fc\u306e\u4f8b\u306f\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u898b\u3066\u304f\u3060\u3055\u3044.\n\nthrow(\u610f\u8a33)\n\u3053\u308c\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u305d\u306e\u90e8\u5206\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9032\u307e\u306a\u304f\u306a\u308a,\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059.\u305d\u3057\u3066\u30a8\u30e9\u30fc\u3092\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u306f\u4e0a\u4f4d\u306e\u95a2\u6570\u3078\u30a8\u30e9\u30fc\u3092\u8fd4\u3057...\n\u3053\u308c\u3092main\u95a2\u6570\u3088\u308a\u4e0a\u4f4d\u306b\u6765\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3057,\u6700\u7d42\u7684\u306b\u306f\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u8868\u793a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u307e\u3059.\n\nthrow.d\nint warizan(int x){\n  if (x == 0) throw new Exception(\"0\u3067\u306f\u5272\u308c\u306a\u3044\u3088\");\n  return 20 / x;\n}\n\n\n\ntry-catch-finally(\u610f\u8a33)\ntry{}\u306e\u4e2d\u3067throw\u3055\u308c\u305f\u4f8b\u5916\u306fcatch\u3067\u3068\u3089\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u307e\u305f, \u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082finally{}\u306e\u4e2d\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059.\n\ntry-catch-finally.d\nint func_ko{\n  if(num == 0) throw new Exception(\"0\u306f\u3060\u3081\")\n\n  return num;\n}\n\nvoid func2_oya{\n  try{\n    func_ko(num);\n  }catch(Exception e){\n    //\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306e\u51e6\u7406\n    ~~~\n  }finally{\n    writeln(\"\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u306f\u5b9f\u884c\u3055\u308c\u308b\");\n  }\n    writeln(\"\u4f8b\u5916\u304c\u8d77\u304d\u305f\u3089\u5b9f\u884c\u3055\u308c\u306a\u3044\u3051\u3069\u4f8b\u5916\u304c\u8d77\u304d\u306a\u3051\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\");\n}\n\n\n\u53c2\u8003:\nD\u8a00\u8a9e\u53cb\u306e\u4f1a-\u4f8b\u5916\n\n\u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9\n\u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9\u6587\u306f\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u308b\u3068\u304d\u306b\u4ee5\u4e0b\u306e\u4e09\u3064\u306e\u72b6\u614b\u306b\u5206\u3051\u3066\u3042\u3068\u304b\u3089\u66f8\u3044\u305f\u9806\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059.\nscope (exit)    //\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u308b\u3068\u304d\u306b\u5fc5\u305a\u5b9f\u884c\nscope (success) //\u30b9\u30b3\u30fc\u30d7\u3092\u4f8b\u5916\u4ee5\u5916\u3067\u629c\u3051\u308b\u3068\u304d\u306b\u5b9f\u884c\nscope (failure) //\u30b9\u30b3\u30fc\u30d7\u3092\u4f8b\u5916\u3067\u629c\u3051\u308b\u3068\u304d\u306b\u5b9f\u884c\n\n\u3068\u308a\u3042\u3048\u305a\u30b7\u30f3\u30d7\u30eb\u306b\n//{}\u304c\u30b9\u30b3\u30fc\u30d7\u5185\n{\n  scope(failure) writeln(\"failure\");\n  scope(success) writeln(\"success\");\n  scope(exit)    writeln(\"exit\");\n\n  func1();\n}\n\nfunc1()\u3067\u4f8b\u5916\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u3068\u304d\u306e\u5b9f\u884c\u7d50\u679c\n$exit\n$success\n\nfunc1()\u3067\u4f8b\u5916\u767a\u751f\u3057\u305f\u3068\u304d\u306e\u5b9f\u884c\u7d50\u679c\n$exit\n$failure\n\n\nTypeid\u5f0f\n\u578b\u540d\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\nclass A { }\nclass B : A { }\n\nvoid main() {\n  writeln(typeid(int));  // int\n  uint i;\n  writeln(typeid(i++));  // uint\n  writeln(i);            // 1\n  A a = new B();\n  writeln(typeid(a));    // B\n  writeln(typeid(typeof(a)));  // A\n}\n\n\u53c2\u8003:\n\u5f0f\n\nIs\u5f0f\n\u5185\u5bb9\u304c\u610f\u5473\u7684\u306b\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u307e\u3059.\n\u4ee5\u4e0b\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u5bc4\u305b\u96c6\u3081\nalias int func(int);    // func \u306f\u95a2\u6570\u578b\u3078\u306e alias\nvoid foo() {\n  if (is(func[]) ) // \u95a2\u6570\u306e\u914d\u5217\u306f\u4f5c\u308c\u306a\u3044\u306e\u3067\u3001\n                        // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u306a\u3044\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n\n  if (is([][]))  // \u30a8\u30e9\u30fc\u3002[][] \u306f\u6587\u6cd5\u7684\u306b\u6b63\u3057\u3044\u578b\u3067\u306a\u3044\n    ...\n}\n\nalias short bar;\nvoid foo(bar x) {\n  if ( is(bar : int) )   // short\u306fint\u306b\u6697\u9ed9\u5909\u63db\u3055\u308c\u308b\u306e\u3067\n                              // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u308b\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n}\n\nvoid test(bar x) {\n  if ( is(bar == int) ) // short\u306fint\u3068\u540c\u3058\u578b\u3067\u306f\u306a\u3044\u306e\u3067\u3001\n                        // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u306a\u3044\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n}\n\n\u3053\u308c\u306f\u5fdc\u7528\u4f8b\u304b\u306a\nimport std.stdio;\n\nvoid main() {\n  alias long[char[]] AA;\n\n  static if (is(AA T : T[U], U : const char[]))\n  {\n    writeln(typeid(T));  // long\n    writeln(typeid(U));  // const char[]\n  }\n\n  static if (is(AA A : A[B], B : int))\n  {\n    assert(0);  // B\u306fint\u3067\u306f\u306a\u3044\u306e\u3067\u30de\u30c3\u30c1\u3057\u306a\u3044\n  }\n\n  static if (is(int[10] W : W[V], int V))\n  {\n    writeln(typeid(W));  // int\n    writeln(V);          // 10\n  }\n\n  static if (is(int[10] X : X[Y], int Y : 5))\n  {\n    assert(0);  // Y\u306f10\u306a\u306e\u3067\u30de\u30c3\u30c1\u3057\u306a\u3044\n  }\n}\n\n\nstd.exception\n\n\u4f8b\u5916\u3084,\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb. \u53d7\u9a13\u306a\u3069\u4e00\u901a\u308a\u7d42\u308f\u3063\u305f\u3089\u624b\u3092\u51fa\u3057\u307e\u3059.\n\u203b\nD\u3092\u6559\u3048\u3066\u304f\u308c\u3066\u308by_ukatama\u6c0f\u306b\u3088\u308b\u3068std.exception.enforce\u306f\u300c\u30a8\u30e9\u30fc\u306fnull\u3001\u6210\u529f\u306a\u3089\u30cf\u30f3\u30c9\u30eb\u3092\u8fd4\u3059\u300d\u7684\u306a\u95a2\u6570\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u30b9\u30de\u30fc\u30c8\u306b\u3067\u304d\u308b\u3088\u3046.\nWin32 API \u306e\u30a8\u30e9\u30fc\u3092FormatMessage\u3067\u6587\u5b57\u5217\u5316\u3057\u3066\u304f\u308c\u308b\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066enforceEx\u3092\u3064\u304b\u3046\u3068\u6357\u308b\u3088\u3068\u8a00\u3063\u3066\u3044\u307e\u3057\u305f.\n\u307e\u305f,assert\u7684\u306a\u4f7f\u3044\u65b9\u304c\u3042\u3063\u305f\u308a, \u610f\u5916\u3068\u5965\u304c\u6df1\u305d\u3046\u3067\u3059.\n\n\u30ed\u30b0\u51fa\u529b\n\u3042\u3093\u307e\u30cd\u30c3\u30c8\u3067\u307f\u306a\u3044\u3082\u306e\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3060\u3068\u601d\u3044\u307e\u3059.\u3053\u3053\u3067\u306frepeatedly\u3055\u3093\u306estd.experimental.logger\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\n\n\u6700\u5f8c\u306b\n\u3068\u308a\u3042\u3048\u305a\u4e00\u901a\u308a\u7d42\u308f\u308a\u307e\u3057\u305f\u304c\u9069\u5b9c\u4fee\u6b63\u3092\u52a0\u3048\u308b\u304b\u3068, \u306a\u3093\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u9023\u7d61\u304f\u3060\u3055\u3044.\nD\u8a00\u8a9e\u3068\u3044\u3048\u3070\u30c7\u30d0\u30c3\u30b0\u30fb\u691c\u8a3c(\u3068\u601d\u3044\u8fbc\u3093\u3067\u307e\u3059).\n\u3053\u3053\u3067\u306f\u3001\u691c\u8a3c\u306b\u4f7f\u3048\u305d\u3046\u306a\u5f0f\u3092\u307e\u3068\u3081\u307e\u3057\u305f.\n\n#main\u6587\u306a\u3057\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\nD\u8a00\u8a9e\u3067\u306f-main\u3092\u6307\u5b9a\u3059\u308c\u3070main\u6587\u306a\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u308b\u3088\u3046.\n\n```\n$dmd -main hoge.d\n```\n\n#\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u53c2\u8003\u306b\u3088\u308b\u3068, \u5951\u7d04\u3068\u306f\u5e38\u306btrue\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5f0f\u306e\u3053\u3068\u3067\u3059. \u3064\u307e\u308a, false\u306b\u306a\u3063\u305f\u3068\u304d\u306berror\u3092\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d.\n\n\u4e00\u756a\u57fa\u672c\u7684\u306a\u3082\u306e\u3068\u3057\u3066assert()\u304c\u6319\u3052\u3089\u308c\u307e\u3059.\n\n```d\n//\u5f0f\u304cfalse\u3060\u3063\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u529b\u3055\u308c\u308b\nassert(\u5f0f);\n\n//\u51fa\u529b\u6587\u5b57\u3092\u8a2d\u5b9a\nassert(A==B,\"\u51fa\u529b\");\n\n//\u5230\u9054\u4e0d\u80fd\n//\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30a8\u30e9\u30fc\u3092\u51fa\u529b\nassert(0);\n\n```\n\n\u3061\u306a\u307f\u306b, -release\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068assert(false)\u3084assert(0)\u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u7d76\u5bfe\u306b\u5931\u6557\u3059\u308b\u3068\u308f\u304b\u308b\u3082\u306e\u4ee5\u5916, assert\u5f0f\u306f\u6d88\u3048\u308b\u3088\u3046\u3067\u3059.\n\n##\u4e8b\u524d\u30fb\u4e8b\u5f8c\u6761\u4ef6\n\u304b\u306a\u308a\u610f\u8a33\u3067\u3059\u304c, \u81ea\u5206\u306a\u308a\u306e\u89e3\u91c8\u3092\n\nin  : \u5f15\u6570\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nout : \u5b9f\u884c\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nbody: \u5b9f\u884c\u5185\u5bb9\n...\u3068\u3057\u3066\u691c\u8a3c\u3092\u884c\u3044\u307e\u3059.\n\n```d\n//\u516c\u5f0f\u30b5\u30a4\u30c8\u4e38\u30d1\u30af\u30ea\nlong square_root(long x)\n  in {\n    //\u524d\u63d0\u3068\u3057\u3066x\u304c0\u4ee5\u4e0a\u3058\u3083\u306a\u3044\u3068\u5e73\u65b9\u6839\u306f\u6c42\u307e\u3089\u306a\u3044\n    assert(x >= 0);\n  }\n  out (result) {\n    //\u5b9f\u884c\u7d50\u679c\u304c\u6b63\u3057\u3044\u304b\u6027\u8cea\u306b\u5f53\u3066\u306f\u3081\u3066\u691c\u8a3c\u3057\u3066\u307f\u308b\n    assert((result * result) <= x && (result+1) * (result+1) >= x);\n  }\n  body {\n    //\u5b9f\u884c\u5185\u5bb9\n    return cast(long)std.math.sqrt(cast(real)x);\n  }\n\n//\u5f15\u6570\u304c\u306a\u3044\u3068\u304d\u306a\u3069\u306bin\u304c\u306a\u3044\u691c\u8a3c\u3082\u884c\u3048\u308b\nvoid func()\n  out {\n    ~~~\n  }\n  body {\n    ...\n  }\n\n```\n\n\u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002\n\n```d:error.d\nvoid func() {\n  in {\n  } out {\n    ~~~\n  }\n  body {\n    ...\n  }\n}\n\nvoid main(){ ~~ }\n```\n\n```\n$rdmd error.d\nerror.d(): Error: found 'in' instead of statement\nerror.d(): Error: declaration expected, not 'out'\nerror.d(): Error: unrecognized declaration\n```\n\n\u53c2\u8003:\n[\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://www.kmonos.net/alang/d/dbc.html)\n[D\u8a00\u8a9eassert(failse)\u306b\u3064\u3044\u3066](http://www.codelogy.org/entry/2013/04/18/090406)\n\n#\u5358\u4f53\u30c6\u30b9\u30c8\n\n```d\nunittest {\n assert(~~);\n\n out {\n  ~~\n }\n body {\n  --\n }\n //\u51e6\u7406\u3092\u3064\u3089\u3064\u3089\n}\n```\n\nunittest\u3092\u4f7f\u3046\u306b\u306f-unittest\u3092\u6307\u5b9a\u3057\u307e\u3059\n\n```\n$dmd -unittest hoge.d\n```\n\n\u203b\u3069\u3046\u3084\u3089unittest\u306fmain\u306e\u4e2d\u3067\u306f\u4f7f\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\n\n\u53c2\u8003:\n[\u5358\u4f53\u30c6\u30b9\u30c8](http://www.kmonos.net/alang/d/unittest.html)\n[\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u62e1\u5f35](http://www.kmonos.net/alang/d/techtips/unittests.html)\n\n#\u30a8\u30e9\u30fc\u51e6\u7406\n\u5b9f\u884c\u4e2d\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3068\u304d\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3059\u308b\u3082\u306e\u3067\u3059.\u307e\u3055\u304b\u306e\u5834\u5408\u304c\u8d77\u304d\u305f\u3068\u304d\u306e\u51e6\u7406\u3067\u3059\u306d.\n\u30a8\u30e9\u30fc\u306e\u4f8b\u306f[\u30a8\u30e9\u30fc\u51e6\u7406](http://www.kmonos.net/alang/d/errors.html)\u3092\u898b\u3066\u304f\u3060\u3055\u3044.\n\n##throw(\u610f\u8a33)\n\u3053\u308c\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u305d\u306e\u90e8\u5206\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9032\u307e\u306a\u304f\u306a\u308a,\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059.\u305d\u3057\u3066\u30a8\u30e9\u30fc\u3092\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u306f\u4e0a\u4f4d\u306e\u95a2\u6570\u3078\u30a8\u30e9\u30fc\u3092\u8fd4\u3057...\n\u3053\u308c\u3092main\u95a2\u6570\u3088\u308a\u4e0a\u4f4d\u306b\u6765\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3057,\u6700\u7d42\u7684\u306b\u306f\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u8868\u793a\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u307e\u3059.\n\n```d:throw.d\nint warizan(int x){\n  if (x == 0) throw new Exception(\"0\u3067\u306f\u5272\u308c\u306a\u3044\u3088\");\n  return 20 / x;\n}\n```\n\n##try-catch-finally(\u610f\u8a33)\ntry{}\u306e\u4e2d\u3067throw\u3055\u308c\u305f\u4f8b\u5916\u306fcatch\u3067\u3068\u3089\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u307e\u305f, \u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082finally{}\u306e\u4e2d\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059.\n\n```d:try-catch-finally.d\nint func_ko{\n  if(num == 0) throw new Exception(\"0\u306f\u3060\u3081\")\n\n  return num;\n}\n\nvoid func2_oya{\n  try{\n    func_ko(num);\n  }catch(Exception e){\n    //\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306e\u51e6\u7406\n    ~~~\n  }finally{\n    writeln(\"\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u306f\u5b9f\u884c\u3055\u308c\u308b\");\n  }\n    writeln(\"\u4f8b\u5916\u304c\u8d77\u304d\u305f\u3089\u5b9f\u884c\u3055\u308c\u306a\u3044\u3051\u3069\u4f8b\u5916\u304c\u8d77\u304d\u306a\u3051\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\");\n}\n```\n\n\u53c2\u8003:\n[D\u8a00\u8a9e\u53cb\u306e\u4f1a-\u4f8b\u5916](http://dusers.dip.jp/modules/wiki/?Articles%2FD%E8%A8%80%E8%AA%9E%E5%85%A5%E9%96%80%E8%AC%9B%E5%BA%A7%2F%E7%AC%AC25%E7%AB%A0%20-%20%E4%BE%8B%E5%A4%96)\n\n##\u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9\n\u30b9\u30b3\u30fc\u30d7\u30ac\u30fc\u30c9\u6587\u306f\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u308b\u3068\u304d\u306b\u4ee5\u4e0b\u306e\u4e09\u3064\u306e\u72b6\u614b\u306b\u5206\u3051\u3066\u3042\u3068\u304b\u3089\u66f8\u3044\u305f\u9806\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059.\n\n```d\nscope (exit)    //\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u308b\u3068\u304d\u306b\u5fc5\u305a\u5b9f\u884c\nscope (success) //\u30b9\u30b3\u30fc\u30d7\u3092\u4f8b\u5916\u4ee5\u5916\u3067\u629c\u3051\u308b\u3068\u304d\u306b\u5b9f\u884c\nscope (failure) //\u30b9\u30b3\u30fc\u30d7\u3092\u4f8b\u5916\u3067\u629c\u3051\u308b\u3068\u304d\u306b\u5b9f\u884c\n```\n\n\u3068\u308a\u3042\u3048\u305a\u30b7\u30f3\u30d7\u30eb\u306b\n\n```d\n//{}\u304c\u30b9\u30b3\u30fc\u30d7\u5185\n{\n  scope(failure) writeln(\"failure\");\n  scope(success) writeln(\"success\");\n  scope(exit)    writeln(\"exit\");\n\n  func1();\n}\n```\n\nfunc1()\u3067\u4f8b\u5916\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u3068\u304d\u306e\u5b9f\u884c\u7d50\u679c\n\n```\n$exit\n$success\n```\n\nfunc1()\u3067\u4f8b\u5916\u767a\u751f\u3057\u305f\u3068\u304d\u306e\u5b9f\u884c\u7d50\u679c\n\n```\n$exit\n$failure\n```\n\n#Typeid\u5f0f\n\u578b\u540d\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\n\n```d\nclass A { }\nclass B : A { }\n\nvoid main() {\n  writeln(typeid(int));  // int\n  uint i;\n  writeln(typeid(i++));  // uint\n  writeln(i);            // 1\n  A a = new B();\n  writeln(typeid(a));    // B\n  writeln(typeid(typeof(a)));  // A\n}\n```\n\n\u53c2\u8003:\n[\u5f0f](http://www.kmonos.net/alang/d/expression.html)\n\n#Is\u5f0f\n\u5185\u5bb9\u304c\u610f\u5473\u7684\u306b\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u307e\u3059.\n\u4ee5\u4e0b[\u516c\u5f0f\u30b5\u30a4\u30c8](http://www.kmonos.net/alang/d/expression.html)\u306e\u5bc4\u305b\u96c6\u3081\n\n```d\nalias int func(int);    // func \u306f\u95a2\u6570\u578b\u3078\u306e alias\nvoid foo() {\n  if (is(func[]) ) // \u95a2\u6570\u306e\u914d\u5217\u306f\u4f5c\u308c\u306a\u3044\u306e\u3067\u3001\n                        // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u306a\u3044\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n\n  if (is([][]))  // \u30a8\u30e9\u30fc\u3002[][] \u306f\u6587\u6cd5\u7684\u306b\u6b63\u3057\u3044\u578b\u3067\u306a\u3044\n    ...\n}\n\nalias short bar;\nvoid foo(bar x) {\n  if ( is(bar : int) )   // short\u306fint\u306b\u6697\u9ed9\u5909\u63db\u3055\u308c\u308b\u306e\u3067\n                              // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u308b\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n}\n\nvoid test(bar x) {\n  if ( is(bar == int) ) // short\u306fint\u3068\u540c\u3058\u578b\u3067\u306f\u306a\u3044\u306e\u3067\u3001\n                        // \u6761\u4ef6\u306f\u6e80\u305f\u3055\u308c\u306a\u3044\n    writeln(\"satisfied\");\n  else\n    writeln(\"not satisfied\");\n}\n```\n\n\u3053\u308c\u306f\u5fdc\u7528\u4f8b\u304b\u306a\n\n```d\nimport std.stdio;\n\nvoid main() {\n  alias long[char[]] AA;\n\n  static if (is(AA T : T[U], U : const char[]))\n  {\n    writeln(typeid(T));  // long\n    writeln(typeid(U));  // const char[]\n  }\n\n  static if (is(AA A : A[B], B : int))\n  {\n    assert(0);  // B\u306fint\u3067\u306f\u306a\u3044\u306e\u3067\u30de\u30c3\u30c1\u3057\u306a\u3044\n  }\n\n  static if (is(int[10] W : W[V], int V))\n  {\n    writeln(typeid(W));  // int\n    writeln(V);          // 10\n  }\n\n  static if (is(int[10] X : X[Y], int Y : 5))\n  {\n    assert(0);  // Y\u306f10\u306a\u306e\u3067\u30de\u30c3\u30c1\u3057\u306a\u3044\n  }\n}\n```\n\n#[std.exception](http://www.kmonos.net/alang/d/phobos/std_exception.html)\n\u4f8b\u5916\u3084,\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb. \u53d7\u9a13\u306a\u3069\u4e00\u901a\u308a\u7d42\u308f\u3063\u305f\u3089\u624b\u3092\u51fa\u3057\u307e\u3059.\n\n\u203b\nD\u3092\u6559\u3048\u3066\u304f\u308c\u3066\u308b[y_ukatama](http://qiita.com/y_ukatama)\u6c0f\u306b\u3088\u308b\u3068std.exception.enforce\u306f\u300c\u30a8\u30e9\u30fc\u306fnull\u3001\u6210\u529f\u306a\u3089\u30cf\u30f3\u30c9\u30eb\u3092\u8fd4\u3059\u300d\u7684\u306a\u95a2\u6570\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u30b9\u30de\u30fc\u30c8\u306b\u3067\u304d\u308b\u3088\u3046.\nWin32 API \u306e\u30a8\u30e9\u30fc\u3092FormatMessage\u3067\u6587\u5b57\u5217\u5316\u3057\u3066\u304f\u308c\u308b\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066enforceEx\u3092\u3064\u304b\u3046\u3068\u6357\u308b\u3088\u3068\u8a00\u3063\u3066\u3044\u307e\u3057\u305f.\n\u307e\u305f,assert\u7684\u306a\u4f7f\u3044\u65b9\u304c\u3042\u3063\u305f\u308a, \u610f\u5916\u3068\u5965\u304c\u6df1\u305d\u3046\u3067\u3059.\n\n#\u30ed\u30b0\u51fa\u529b\n\u3042\u3093\u307e\u30cd\u30c3\u30c8\u3067\u307f\u306a\u3044\u3082\u306e\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3060\u3068\u601d\u3044\u307e\u3059.\u3053\u3053\u3067\u306frepeatedly\u3055\u3093\u306e[std.experimental.logger](http://qiita.com/repeatedly/items/27d4656e76fa4c78201c)\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\n\n#\u6700\u5f8c\u306b\n\u3068\u308a\u3042\u3048\u305a\u4e00\u901a\u308a\u7d42\u308f\u308a\u307e\u3057\u305f\u304c\u9069\u5b9c\u4fee\u6b63\u3092\u52a0\u3048\u308b\u304b\u3068, \u306a\u3093\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u9023\u7d61\u304f\u3060\u3055\u3044.\n", "tags": ["D\u8a00\u8a9e", "dlang", "Dlanguage"]}