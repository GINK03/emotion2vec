{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u5b66\u751f\u30a8\u30f3\u30b8\u30cb\u30a2 Advent Calendar 2015\u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n\u666e\u6bb5\u306fEmacs\u3092\u4f7f\u3044\u307e\u3059\u304c\u305f\u307e\u306bVi(m)\u3092\u4f7f\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u969bVi\u306e\u3088\u3055\u6c17\u306a\u6a5f\u80fd\u3092\u898b\u3064\u3051\u3066\u7fa8\u3080\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u5927\u62b5\u306f\u8a2d\u5b9a\u66f8\u304b\u306a\u304f\u3066\u3082Emacs\u4e0a\u306b\u3042\u308b\u3093\u3067\u3059\u304c\uff0c\u3084\u306f\u308a\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u66f4\u306b\u7fa8\u3080\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067\uff0c\u4eca\u307e\u3067\u81ea\u5206\u3067\u30dd\u30fc\u30c8\u3057\u305fVi\u306e\u30ad\u30fc\u30d0\u30f3\u30c9\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\u3061\u306a\u307f\u306b\u305d\u306e\u307e\u307eelisp\u66f8\u304f\u3068\u6b7b\u306c\u307b\u3069\u3060\u308b\u3044\u306e\u3067dash.el\u3068\u304bs.el\u3068\u304b\u3092\u4f7f\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u9069\u5b9c\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n(\u5927\u4f53\u3053\u306e\u8fba\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067require\u306e\u5fc5\u8981\u306f\u307b\u307c\u306a\u3044\u3068\u601d\u3044\u307e\u3059)\n\n\u5bfe\u5fdc\u3059\u308b\u62ec\u5f27\u306b\u98db\u3076\n\u5bfe\u5fdc\u3059\u308b\u62ec\u5f27\u306b\u98db\u3076\u30b3\u30de\u30f3\u30c9\u3067\u3059\uff0e\nVi\u4e0a\u3067\u306f%\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\nEmacs\u3060\u3068forward-list\u3068\u3044\u3046\u95a2\u6570\u3067\u5bfe\u5fdc\u3059\u308b(\u306f\u98db\u3079\u307e\u3059\uff0e\u3057\u304b\u3057[\u3084{\u306b\u98db\u3076\u30b3\u30de\u30f3\u30c9\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u304d\u307e\u3057\u305f\uff0e\n(defun close-paren-at-point-p ()\n  \"Check closed paren at point.\"\n  (let ((s (char-to-string (char-after (point)))))\n    (s-contains? s \")]}\")))\n\n(defun not-paren-matching-at-point-p ()\n  \"Check not matching paren at point.\"\n  (let ((s (char-to-string (char-after (point)))))\n    (not (s-contains? s \"{}[]()\"))))\n\n(defun goto-matching-paren ()\n  \"Jump to matching paren.\"\n  (interactive)\n  (cond ((close-paren-at-point-p)\n         (forward-char)\n         (-if-let (p (show-paren--default))\n             (goto-char (nth 2 p))\n           (backward-char)))\n        ((not-paren-matching-at-point-p)\n         (when (search-forward-regexp \"[(\\\\[\\[{)}]\" (point-at-eol) t 1)\n           (backward-char)))\n        (t\n         (-if-let (p (show-paren--default))\n             (goto-char (nth 2 p))))))\n\n(global-set-key (kbd \"C-%\") 'goto-matching-paren)\n\n\n\u5165\u529b\u3057\u305f\u6587\u5b57\u307e\u3067\u98db\u3076\n\u30ab\u30bd\u30fc\u30eb\u4f4d\u7f6e\u304b\u3089\u884c\u672b\u4e2d\u306b\u5165\u529b\u3057\u305f\u6587\u5b57\u304c\u3042\u308c\u3070\u305d\u306e\u6587\u5b57\u307e\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u307e\u3059\uff0e\nVi\u4e0a\u3060\u3068f \u3084 F \u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\u30ad\u30fc\u30d0\u30f3\u30c9\u4e00\u3064\u3067\u98db\u3079\u305f\u3089\u4fbf\u5229\u3060\u306a\u3068\u601d\u3044\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\n\u307e\u305a\uff0cRight-Command\u3092Hyper\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u3067Emacs\u4e0a\u3067\u53f3Command\u306fHyper\u3068\u3044\u3046\u30ad\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3042\u3068\u306fHyper-<\u6587\u5b57\u5217>\u3068\u3044\u3046\u30ad\u30fc\u30d0\u30f3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306bcl-loop\u3068\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\u4ee5\u4e0a(\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b)\u8a2d\u5b9a\u3092\u3059\u308b\u3068a\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3044\u3068\u304d\u306f\u53f3Commad(Hyper)+a\u3068\u6253\u3064\u3060\u3051\u3067\u30b8\u30e3\u30f3\u30d7\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n;; Right-Command\u3092Hyper\u306b\u5909\u66f4\n(setq ns-right-command-modifier (quote hyper))\n\n(defun forward-to-char (char)\n  \"Vim like f. Forward until CHAR will appear.\"\n  (let ((point-char (char-after (point))))\n    (when (or (= point-char char)\n              (and ((or (<= ?a c) (>= ?z c)) char)\n                   (= point-char (upcase-initials char))))\n      (forward-char))\n    (search-forward (char-to-string char) (point-at-eol) nil 1)\n    (backward-char)))\n\n(defun backward-to-char (char)\n  \"Vim liken F. Backword until CHAR will appear.\"\n  (search-backward (char-to-string char) (point-at-bol) nil 1))\n\n(defun add-keys-to-vim-likef (prefix c &optional mode)\n  \"Define macrow with PREFIX and C for MODE.\"\n  (define-key global-map\n    (read-kbd-macro (concat prefix (string c)))\n    `(lambda ()\n       (interactive)\n       (funcall (if (eq ',mode 'word)\n                    #'backward-to-char\n                  #'forward-to-char) ,c))))\n\n(cl-loop for c from ?0 to ?9 do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?a to ?z do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?! to ?~ do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?0 to ?9 do (add-keys-to-vim-likef \"H-C-\" c 'word))\n(cl-loop for c from ?a to ?z do (add-keys-to-vim-likef \"H-C-\" c 'word))\n(cl-loop for c from ?! to ?~ do (add-keys-to-vim-likef \"H-C-\" c 'word))\n\n\n\u30b8\u30e3\u30f3\u30d7\u30ea\u30b9\u30c8\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3059\u308b\n\u30b8\u30e3\u30f3\u30d7\u30ea\u30b9\u30c8\u3092\u9032\u3093\u3060\u308a\u623b\u3063\u305f\u308a\u3057\u307e\u3059\uff0e\nVi\u3067\u306fC-o\u3068C-O\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\u3061\u3087\u3063\u3068\u30b3\u30fc\u30c9\u91cf\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\nhttps://github.com/ganmacs/jumplist\n\n\u5c0e\u5165\u65b9\u6cd5\nmelpa\u306b\u767b\u9332\u3057\u3066\u3042\u308b\u306e\u3067package.el\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\ncask\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bCask\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\uff0e\n(depends-on \"jumplist\")\n\n\n\u3044\u3044\u611f\u3058\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\nVi\u306ejumplist\u3067\u306f\u3067\u304d\u306a\u3044\u3067\u3059\u304c\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3068jumplist-hook-commands\u306b\u899a\u3048\u3055\u305b\u305f\u3044hook\u3092\u767b\u9332\u3067\u304d\u307e\u3059\uff0e\n\u3064\u307e\u308a\u3001\u30b8\u30e3\u30f3\u30d7\u5730\u70b9\u3092\u81ea\u5206\u306e\u597d\u304d\u306a\u30a4\u30d9\u30f3\u30c8\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u8a2d\u5b9a\u4f8b\n(require 'jumplist)\n(global-set-key (kbd \"C-<\") 'jumplist-previous)\n(global-set-key (kbd \"C->\") 'jumplist-next)\n(custom-set-variables\n '(jumplist-hook-commands\n   '(helm-swoop dired-jump helm-for-files\n     isearch-forward end-of-buffer beginning-of-buffer\n     find-file)))\n\n\u307e\u305f (setq jumplist-ex-mode t)\u3068\u3059\u308b\u3053\u3068\u3067\u30d6\u30e9\u30a6\u30b6\u306e\u623b\u308b\u30dc\u30bf\u30f3\u307f\u305f\u3044\u306b\u623b\u308b\u4e8b\u306e\u3067\u304d\u308b\u30e2\u30fc\u30c9\u306b\u3082\u306a\u308a\u307e\u3059\uff0e\n\u3053\u306e\u8a18\u4e8b\u306f[\u5b66\u751f\u30a8\u30f3\u30b8\u30cb\u30a2 Advent Calendar 2015](http://www.adventar.org/calendars/1158)\u306e25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n\n\u666e\u6bb5\u306fEmacs\u3092\u4f7f\u3044\u307e\u3059\u304c\u305f\u307e\u306bVi(m)\u3092\u4f7f\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u969bVi\u306e\u3088\u3055\u6c17\u306a\u6a5f\u80fd\u3092\u898b\u3064\u3051\u3066\u7fa8\u3080\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u5927\u62b5\u306f\u8a2d\u5b9a\u66f8\u304b\u306a\u304f\u3066\u3082Emacs\u4e0a\u306b\u3042\u308b\u3093\u3067\u3059\u304c\uff0c\u3084\u306f\u308a\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u66f4\u306b\u7fa8\u3080\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067\uff0c\u4eca\u307e\u3067\u81ea\u5206\u3067\u30dd\u30fc\u30c8\u3057\u305fVi\u306e\u30ad\u30fc\u30d0\u30f3\u30c9\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u3061\u306a\u307f\u306b~~\u305d\u306e\u307e\u307eelisp\u66f8\u304f\u3068\u6b7b\u306c\u307b\u3069\u3060\u308b\u3044\u306e\u3067~~[dash.el](https://github.com/magnars/dash.el)\u3068\u304b[s.el](https://github.com/magnars/s.el)\u3068\u304b\u3092\u4f7f\u3063\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u9069\u5b9c\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n(\u5927\u4f53\u3053\u306e\u8fba\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067require\u306e\u5fc5\u8981\u306f\u307b\u307c\u306a\u3044\u3068\u601d\u3044\u307e\u3059)\n\n## \u5bfe\u5fdc\u3059\u308b\u62ec\u5f27\u306b\u98db\u3076\n\u5bfe\u5fdc\u3059\u308b\u62ec\u5f27\u306b\u98db\u3076\u30b3\u30de\u30f3\u30c9\u3067\u3059\uff0e\nVi\u4e0a\u3067\u306f<kbd>%</kbd>\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\nEmacs\u3060\u3068`forward-list`\u3068\u3044\u3046\u95a2\u6570\u3067\u5bfe\u5fdc\u3059\u308b`(`\u306f\u98db\u3079\u307e\u3059\uff0e\u3057\u304b\u3057`[`\u3084`{`\u306b\u98db\u3076\u30b3\u30de\u30f3\u30c9\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u304d\u307e\u3057\u305f\uff0e\n\n```lisp\n(defun close-paren-at-point-p ()\n  \"Check closed paren at point.\"\n  (let ((s (char-to-string (char-after (point)))))\n    (s-contains? s \")]}\")))\n\n(defun not-paren-matching-at-point-p ()\n  \"Check not matching paren at point.\"\n  (let ((s (char-to-string (char-after (point)))))\n    (not (s-contains? s \"{}[]()\"))))\n\n(defun goto-matching-paren ()\n  \"Jump to matching paren.\"\n  (interactive)\n  (cond ((close-paren-at-point-p)\n         (forward-char)\n         (-if-let (p (show-paren--default))\n             (goto-char (nth 2 p))\n           (backward-char)))\n        ((not-paren-matching-at-point-p)\n         (when (search-forward-regexp \"[(\\\\[\\[{)}]\" (point-at-eol) t 1)\n           (backward-char)))\n        (t\n         (-if-let (p (show-paren--default))\n             (goto-char (nth 2 p))))))\n\n(global-set-key (kbd \"C-%\") 'goto-matching-paren)\n```\n\n## \u5165\u529b\u3057\u305f\u6587\u5b57\u307e\u3067\u98db\u3076\n\u30ab\u30bd\u30fc\u30eb\u4f4d\u7f6e\u304b\u3089\u884c\u672b\u4e2d\u306b\u5165\u529b\u3057\u305f\u6587\u5b57\u304c\u3042\u308c\u3070\u305d\u306e\u6587\u5b57\u307e\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u79fb\u52d5\u3057\u307e\u3059\uff0e\nVi\u4e0a\u3060\u3068<kbd>f</kbd> \u3084 <kbd>F</kbd> \u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u30ad\u30fc\u30d0\u30f3\u30c9\u4e00\u3064\u3067\u98db\u3079\u305f\u3089\u4fbf\u5229\u3060\u306a\u3068\u601d\u3044\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\n\u307e\u305a\uff0cRight-Command\u3092Hyper\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u3067Emacs\u4e0a\u3067\u53f3Command\u306fHyper\u3068\u3044\u3046\u30ad\u30fc\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3042\u3068\u306fHyper-<\u6587\u5b57\u5217>\u3068\u3044\u3046\u30ad\u30fc\u30d0\u30f3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b`cl-loop`\u3068\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\n\u4ee5\u4e0a(\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b)\u8a2d\u5b9a\u3092\u3059\u308b\u3068a\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3044\u3068\u304d\u306f`\u53f3Commad(Hyper)+a`\u3068\u6253\u3064\u3060\u3051\u3067\u30b8\u30e3\u30f3\u30d7\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```lisp\n;; Right-Command\u3092Hyper\u306b\u5909\u66f4\n(setq ns-right-command-modifier (quote hyper))\n\n(defun forward-to-char (char)\n  \"Vim like f. Forward until CHAR will appear.\"\n  (let ((point-char (char-after (point))))\n    (when (or (= point-char char)\n              (and ((or (<= ?a c) (>= ?z c)) char)\n                   (= point-char (upcase-initials char))))\n      (forward-char))\n    (search-forward (char-to-string char) (point-at-eol) nil 1)\n    (backward-char)))\n\n(defun backward-to-char (char)\n  \"Vim liken F. Backword until CHAR will appear.\"\n  (search-backward (char-to-string char) (point-at-bol) nil 1))\n\n(defun add-keys-to-vim-likef (prefix c &optional mode)\n  \"Define macrow with PREFIX and C for MODE.\"\n  (define-key global-map\n    (read-kbd-macro (concat prefix (string c)))\n    `(lambda ()\n       (interactive)\n       (funcall (if (eq ',mode 'word)\n                    #'backward-to-char\n                  #'forward-to-char) ,c))))\n\n(cl-loop for c from ?0 to ?9 do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?a to ?z do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?! to ?~ do (add-keys-to-vim-likef \"H-\" c))\n(cl-loop for c from ?0 to ?9 do (add-keys-to-vim-likef \"H-C-\" c 'word))\n(cl-loop for c from ?a to ?z do (add-keys-to-vim-likef \"H-C-\" c 'word))\n(cl-loop for c from ?! to ?~ do (add-keys-to-vim-likef \"H-C-\" c 'word))\n```\n## \u30b8\u30e3\u30f3\u30d7\u30ea\u30b9\u30c8\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3059\u308b\n\n\u30b8\u30e3\u30f3\u30d7\u30ea\u30b9\u30c8\u3092\u9032\u3093\u3060\u308a\u623b\u3063\u305f\u308a\u3057\u307e\u3059\uff0e\nVi\u3067\u306f<kbd>C-o</kbd>\u3068<kbd>C-O</kbd>\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u3061\u3087\u3063\u3068\u30b3\u30fc\u30c9\u91cf\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\nhttps://github.com/ganmacs/jumplist\n\n### \u5c0e\u5165\u65b9\u6cd5\n\nmelpa\u306b\u767b\u9332\u3057\u3066\u3042\u308b\u306e\u3067package.el\u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\ncask\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Cask`\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\uff0e\n\n```lisp\n(depends-on \"jumplist\")\n```\n\n### \u3044\u3044\u611f\u3058\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\n\nVi\u306ejumplist\u3067\u306f\u3067\u304d\u306a\u3044\u3067\u3059\u304c\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3068`jumplist-hook-commands`\u306b\u899a\u3048\u3055\u305b\u305f\u3044hook\u3092\u767b\u9332\u3067\u304d\u307e\u3059\uff0e\n\u3064\u307e\u308a\u3001\u30b8\u30e3\u30f3\u30d7\u5730\u70b9\u3092\u81ea\u5206\u306e\u597d\u304d\u306a\u30a4\u30d9\u30f3\u30c8\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n### \u8a2d\u5b9a\u4f8b\n\n```lisp\n(require 'jumplist)\n(global-set-key (kbd \"C-<\") 'jumplist-previous)\n(global-set-key (kbd \"C->\") 'jumplist-next)\n(custom-set-variables\n '(jumplist-hook-commands\n   '(helm-swoop dired-jump helm-for-files\n     isearch-forward end-of-buffer beginning-of-buffer\n     find-file)))\n```\n\n\u307e\u305f `(setq jumplist-ex-mode t)`\u3068\u3059\u308b\u3053\u3068\u3067\u30d6\u30e9\u30a6\u30b6\u306e\u623b\u308b\u30dc\u30bf\u30f3\u307f\u305f\u3044\u306b\u623b\u308b\u4e8b\u306e\u3067\u304d\u308b\u30e2\u30fc\u30c9\u306b\u3082\u306a\u308a\u307e\u3059\uff0e\n", "tags": ["Emacs", "emacs-lisp"]}