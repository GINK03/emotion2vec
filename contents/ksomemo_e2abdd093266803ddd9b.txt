{"context": " More than 1 year has passed since last update.\u82f1\u8a9e\u3067\u66f8\u3044\u305f\u307e\u3068\u3081\u3068\u57fa\u672c\u7684\u306a\u6587\u6cd5\u306a\u3069\n\nVisual Basic for Applications\nprogramming language\n\n\nExcel\n\nbook\nsheet\ncell\n\nThese are objects in VBA.\n\nObject\nObjects have properties and methods.\n\nEnviroment\n\nOS\nWindows 7\n\nversion\nExcel 2013\n\nVBE\nVBE is Visual Basic Editor. How do I use this editor?\n\nDevelopment Menu\n\nOpen Excel's options. Select File menu and then click Options.\nSelect the Ribbon settings. (Customize Ribbon)\nCheck the Development checkbox.\n\nAccept your changes until you return to the Ribbon. You should now see the development tab.\n\n\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8ffd\u52a0\n[\u633f\u5165]-[\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb]\n\nfile extensions\n\nbas\nfrm\ncls\nctl\npag\ndob\ndsr\nvb\n\nAttribute VB_Name = \"Module1\"\nOption Explicit\n' \u5909\u6570\u5ba3\u8a00\u306e\u5f37\u5236\n\n' \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\nType user\n    name As String\n    birthDateTime As Date\n    birthDate As Date\n    birthTime As Date\nEnd Type\n\n\nSub Main()\n    ' comment\n    Debug.Print \"Open imediate window.\"\n\n    ' \u6570\u5024\n    Dim int_val As Integer\n    Dim long_val As Long\n    Dim single_val As Single\n    Dim double_val As Double\n    Debug.Print \"init: \" & int_val & long_val & single_val & double_val\n\n    int_val = 5\n    long_val = 6000\n    single_val = 0.71\n    double_val = 8.2\n    Debug.Print Format(int_val, \"Currency\")\n    Debug.Print Format(long_val, \"Fixed\")\n    Debug.Print Format(long_val, \"Standard\")\n    Debug.Print Format(single_val, \"Percent\")\n    Debug.Print Format(0, \"Yes/No\")\n    Debug.Print Format(1, \"Yes/No\")\n    Debug.Print Format(0, \"True/False\")\n    Debug.Print Format(2, \"True/False\")\n    Debug.Print Format(0, \"On/Off\")\n    Debug.Print Format(-1, \"On/Off\")\n    'printf -> http://www.freevbcode.com/ShowCode.asp?ID=5014\n\n    Debug.Print \"5 + 2 = \" & (int_val + 2)\n    Debug.Print \"5 - 2 = \" & (int_val - 2)\n    Debug.Print \"5 * 2 = \" & (int_val * 2)\n    Debug.Print \"-5 * -2 = \" & (-int_val * -2)\n    Debug.Print \"5 / 2 = \" & (int_val / 2)\n    Debug.Print \"5 \\ 2 = \" & (int_val \\ 2)\n    Debug.Print \"5 mod 2 = \" & (int_val Mod 2)\n    Debug.Print \"5 ^ 2 = \" & (int_val ^ 2)\n\n    ' Boolean\n    Dim bool_f As Boolean\n    Dim bool_t As Boolean\n    Debug.Print \"init: \" & bool_t\n\n    bool_f = False\n    bool_t = True\n    Debug.Print \"False And False is \" & (bool_f And bool_f)\n    Debug.Print \"False And True  is \" & (bool_f And bool_t)\n    Debug.Print \"True  And False is \" & (bool_t And bool_f)\n    Debug.Print \"True  And True  is \" & (bool_t And bool_t)\n\n    Debug.Print \"False Or False is \" & (bool_f Or bool_f)\n    Debug.Print \"False Or True  is \" & (bool_f Or bool_t)\n    Debug.Print \"True  Or False is \" & (bool_t Or bool_f)\n    Debug.Print \"True  Or True  is \" & (bool_t Or bool_t)\n\n    Debug.Print \"Not True  is \" & (Not bool_t)\n    Debug.Print \"Not False is \" & (Not bool_f)\n\n    Debug.Print \"int_val = long_val is \" & (int_val = long_val)\n    Debug.Print \"int_val <> long_val is \" & (int_val <> long_val)\n    Debug.Print \"single_val >= double_val is \" & (single_val >= double_val)\n    Debug.Print \"single_val <= double_val is \" & (int_val <= double_val)\n    Debug.Print \"int_val = int_val is \" & (int_val = int_val)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n\n    If False Then\n        Debug.Print \"If\"\n    ElseIf False Then\n        Debug.Print \"ElseIf\"\n    Else\n        Debug.Print \"Else\"\n    End If\n\n    ' \u6587\u5b57\u5217\u578b\n    Dim hello As String\n    Dim world As String\n    Dim refVal As String\n    Debug.Print \"init: [\" & hello & \"]\"\n\n    hello = \"Hello\"\n    world = \"World\"\n    refVal = \"refVal\"\n    MySubMsgBox hello, world, refVal\n    Debug.Print world\n    Debug.Print refVal\n    Debug.Print MyFuncLen(hello)\n    Debug.Print MyFuncLen(hello, 2)\n    ExitInSub\n    Debug.Print ExitInFunction\n    Debug.Print RecursiveFactorial(4)\n\n    ' \u914d\u5217\n    Dim fixary(2) As String\n    fixary(0) = \"ab\"\n    fixary(1) = \"cd\"\n    Dim joined As String\n    joined = Join(fixary, \",\")\n    Debug.Print joined\n\n    ' Loop\n    Dim varary() As String\n    varary = Split(joined, \",\")\n    varary(2) = \"gh\"\n    Dim str As Variant\n    For Each str In varary\n        Debug.Print str\n    Next str\n    Dim idx As Integer\n    For idx = 0 To UBound(varary) Step 2\n        Debug.Print idx & \":\" & varary(idx)\n    Next idx\n\n    Dim i As Integer\n    Do\n        i = i + 1\n        Debug.Print \"do statement while:\" & i\n    Loop While False\n    Do\n        i = i + 1\n        Debug.Print \"do statement until:\" & i\n    Loop Until True\n    Do While i < 4\n        i = i + 1\n        Debug.Print \"do while statement:\" & i\n    Loop\n    Do Until i = 1\n        i = i - 1\n        Debug.Print \"do until statement:\" & i\n    Loop\n\n    ' \u65e5\u4ed8\u578b\n    Dim date_val As Date\n    Debug.Print \"init: \" & date_val\n\n    Dim my As user\n    Debug.Print \"my.name type: \" & TypeName(my.name)\n    Debug.Print \"my.birthDateTime type: \" & TypeName(my.birthDateTime)\n    ' Debug.Print \"my type: \" & TypeName(my)\n    ' \u30d1\u30d6\u30ea\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30e2\u30b8\u30e5\u30fc\u30eb?\n\n    my.name = \"my name\"\n    my.birthDateTime = #11/12/2014 1:02:03 AM#\n    my.birthDate = #11/12/2014#\n    my.birthTime = #1:02:03 AM#\n    date_val = #1:24:35 PM#\n    Debug.Print \"DateTime: \" & my.birthDateTime\n    Debug.Print \"Date: \" & my.birthDate\n    Debug.Print \"AM Time: \" & my.birthTime\n    Debug.Print \"PM Time: \" & date_val\n    Debug.Print vbCrLf & Chr(13) & Chr(10)\n\n    my.birthDateTime = \"2014/12/11 01:02:03 AM\"\n    my.birthDate = \"2014/12/11\"\n    my.birthTime = \"1:02:03 AM\"\n    date_val = \"01:24:35 PM\"\n    Debug.Print \"DateTime: \" & my.birthDateTime\n    Debug.Print \"Date: \" & my.birthDate\n    Debug.Print \"AM Time: \" & my.birthTime\n    Debug.Print \"PM Time: \" & date_val\n\n    Debug.Print \"my.birthDateTime(from str) type: \" & TypeName(my.birthDateTime)\n    Debug.Print \"DateTime(from str) type: \" & TypeName(\"2014/12/11 01:02:03 AM\")\n    Debug.Print \"DateTime(from str) type(Casted): \" & TypeName(CDate(\"2014/12/11 01:02:03 AM\"))\n    Debug.Print \"DateTime(from str) isDate: \" & IsDate(\"2014/12/11 01:02:03 AM\")\n    Debug.Print \"DateTime(from str) isDate(Casted): \" & IsDate(CDate(\"2014/12/11 01:02:03 AM\"))\n\nEnd Sub\n\n' no return value\nSub MySubMsgBox(ByVal str1 As String, ByVal str2 As String, refVal As String)\n    refVal = \"\u53c2\u7167\u6e21\u3057\"\n    str2 = str2 & \"!\"\n    MsgBox str1 & \"_\" & str2\nEnd Sub\n\nSub ExitInSub()\n    Debug.Print \"Before Exit Sub\"\n    Exit Sub\n    Debug.Print \"After Exit Sub\"\nEnd Sub\n\n' exists return value\nFunction MyFuncLen(ByVal str As String, Optional ByVal opt As Integer) As Integer\n    MyFuncLen = Len(str) + opt\nEnd Function\n\nFunction ExitInFunction() As String\n    ExitInFunction = \"Before Exit Function\"\n    Exit Function\n    ExitInFunction = \"After Exit Function\"\nEnd Function\n\nFunction RecursiveFactorial(ByVal num As Integer) As Integer\n    If num <= 0 Then\n        RecursiveFactorial = 1\n    Else\n        RecursiveFactorial = num * RecursiveFactorial(num - 1)\n    End If\nEnd Function\n\nVERSION 1.0 CLASS\nBEGIN\n  MultiUse = -1  'True\nEND\nAttribute VB_Name = \"Class1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = False\nAttribute VB_Exposed = False\n\nVERSION 5.00\nBegin {xxxxxx} UserForm1 \n   Caption         =   \"UserForm1\"\n   ClientHeight    =   3180\n   ClientLeft      =   45\n   ClientTop       =   375\n   ClientWidth     =   4710\n   OleObjectBlob   =   \"UserForm1.frx\":0000\n   StartUpPosition =   1  '\u30aa\u30fc\u30ca\u30fc \u30d5\u30a9\u30fc\u30e0\u306e\u4e2d\u592e\nEnd\nAttribute VB_Name = \"UserForm1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\n\n\nProcessing Cell\nSub Main()\n    ' select sheet\n    Worksheets(\"Sheet1\").Range(\"A1\").Value = \"a1\"\n\n    ' selected sheet\n    Range(\"A2\").Value = \"a2\"\n    Cells(3, 1).Value = \"a3\"\n    Cells(3, 1).Offset(1, 1).Value = \"b4\"\n\n    ' cells\n    Range(\"A5\", \"B6\").Value = \"a5 to b6\"\n    Range(\"A7:C8\").Value = \"a7 to c8\"\n\n    ' row, column\n    Range(\"9:9\").Value = \"row9\"\n    ' Range(\"D:D\").Value = \"col D\"\n    Range(\"B9\").Clear\n    Range(\"A10\").Value = \"A10\"\n\n    ' with\n    Dim ary As Variant\n    Dim str As Variant\n    ary = Array(\"C1-red\", \"D1-blue\", \"E1-green\", \"F1-other\")\n    For Each str In ary\n        Dim c As Range\n        Dim posColor As Variant\n        posColor = Split(str, \"-\")\n        Set c = Range(posColor(0))\n        With c\n            .Value = posColor(0)\n            With .Font\n                .Bold = True\n                .Size = 16\n            End With\n            .Interior.color = color(c:=posColor(1))\n        End With\n    Next str\n\n    ' named arguments\n    Range(\"A9\").Delete shift:=xlShiftUp\n\n    ' dialog box\n    btnVal = MsgBox(\"\u3059\u3079\u3066\u306e\u30bb\u30eb\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u304b\uff1f\" _\n        , vbOKCancel, \"\u30bb\u30eb\u306e\u521d\u671f\u5316\")\n    If btnVal = vbOK Then\n        Cells.Clear\n    End If\n\nEnd Sub\n\nFunction color(ByVal c As String) As Long\n    Select Case c\n    Case \"red\"\n        color = vbRed\n    Case \"blue\"\n        color = vbBlue\n    Case \"green\"\n        color = vbGreen\n    Case Else\n        color = vbWhite\n    End Select\nEnd Function\n\n\u82f1\u8a9e\u3067\u66f8\u3044\u305f\u307e\u3068\u3081\u3068\u57fa\u672c\u7684\u306a\u6587\u6cd5\u306a\u3069\n\n* Visual Basic for Applications\n* programming language\n\n## Excel\n* book\n* sheet\n* cell\n\nThese are objects in VBA.\n\n## Object\nObjects have properties and methods.\n\n## Enviroment\n### OS\nWindows 7\n\n### version\nExcel 2013\n\n## VBE\nVBE is Visual Basic Editor. How do I use this editor?\n\n### Development Menu\n1. Open Excel's options. Select File menu and then click Options.\n2. Select the Ribbon settings. (Customize Ribbon)\n3. Check the Development checkbox.\n\nAccept your changes until you return to the Ribbon. You should now see the development tab.\n\n## \u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8ffd\u52a0\n[\u633f\u5165]-[\u6a19\u6e96\u30e2\u30b8\u30e5\u30fc\u30eb]\n\n## file extensions\n* bas\n* frm\n* cls\n* ctl\n* pag\n* dob\n* dsr\n* vb\n\n```vb\nAttribute VB_Name = \"Module1\"\nOption Explicit\n' \u5909\u6570\u5ba3\u8a00\u306e\u5f37\u5236\n\n' \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\nType user\n    name As String\n    birthDateTime As Date\n    birthDate As Date\n    birthTime As Date\nEnd Type\n\n\nSub Main()\n    ' comment\n    Debug.Print \"Open imediate window.\"\n\n    ' \u6570\u5024\n    Dim int_val As Integer\n    Dim long_val As Long\n    Dim single_val As Single\n    Dim double_val As Double\n    Debug.Print \"init: \" & int_val & long_val & single_val & double_val\n    \n    int_val = 5\n    long_val = 6000\n    single_val = 0.71\n    double_val = 8.2\n    Debug.Print Format(int_val, \"Currency\")\n    Debug.Print Format(long_val, \"Fixed\")\n    Debug.Print Format(long_val, \"Standard\")\n    Debug.Print Format(single_val, \"Percent\")\n    Debug.Print Format(0, \"Yes/No\")\n    Debug.Print Format(1, \"Yes/No\")\n    Debug.Print Format(0, \"True/False\")\n    Debug.Print Format(2, \"True/False\")\n    Debug.Print Format(0, \"On/Off\")\n    Debug.Print Format(-1, \"On/Off\")\n    'printf -> http://www.freevbcode.com/ShowCode.asp?ID=5014\n\n    Debug.Print \"5 + 2 = \" & (int_val + 2)\n    Debug.Print \"5 - 2 = \" & (int_val - 2)\n    Debug.Print \"5 * 2 = \" & (int_val * 2)\n    Debug.Print \"-5 * -2 = \" & (-int_val * -2)\n    Debug.Print \"5 / 2 = \" & (int_val / 2)\n    Debug.Print \"5 \\ 2 = \" & (int_val \\ 2)\n    Debug.Print \"5 mod 2 = \" & (int_val Mod 2)\n    Debug.Print \"5 ^ 2 = \" & (int_val ^ 2)\n    \n    ' Boolean\n    Dim bool_f As Boolean\n    Dim bool_t As Boolean\n    Debug.Print \"init: \" & bool_t\n\n    bool_f = False\n    bool_t = True\n    Debug.Print \"False And False is \" & (bool_f And bool_f)\n    Debug.Print \"False And True  is \" & (bool_f And bool_t)\n    Debug.Print \"True  And False is \" & (bool_t And bool_f)\n    Debug.Print \"True  And True  is \" & (bool_t And bool_t)\n    \n    Debug.Print \"False Or False is \" & (bool_f Or bool_f)\n    Debug.Print \"False Or True  is \" & (bool_f Or bool_t)\n    Debug.Print \"True  Or False is \" & (bool_t Or bool_f)\n    Debug.Print \"True  Or True  is \" & (bool_t Or bool_t)\n    \n    Debug.Print \"Not True  is \" & (Not bool_t)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    \n    Debug.Print \"int_val = long_val is \" & (int_val = long_val)\n    Debug.Print \"int_val <> long_val is \" & (int_val <> long_val)\n    Debug.Print \"single_val >= double_val is \" & (single_val >= double_val)\n    Debug.Print \"single_val <= double_val is \" & (int_val <= double_val)\n    Debug.Print \"int_val = int_val is \" & (int_val = int_val)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    Debug.Print \"Not False is \" & (Not bool_f)\n    \n    If False Then\n        Debug.Print \"If\"\n    ElseIf False Then\n        Debug.Print \"ElseIf\"\n    Else\n        Debug.Print \"Else\"\n    End If\n\n    ' \u6587\u5b57\u5217\u578b\n    Dim hello As String\n    Dim world As String\n    Dim refVal As String\n    Debug.Print \"init: [\" & hello & \"]\"\n    \n    hello = \"Hello\"\n    world = \"World\"\n    refVal = \"refVal\"\n    MySubMsgBox hello, world, refVal\n    Debug.Print world\n    Debug.Print refVal\n    Debug.Print MyFuncLen(hello)\n    Debug.Print MyFuncLen(hello, 2)\n    ExitInSub\n    Debug.Print ExitInFunction\n    Debug.Print RecursiveFactorial(4)\n    \n    ' \u914d\u5217\n    Dim fixary(2) As String\n    fixary(0) = \"ab\"\n    fixary(1) = \"cd\"\n    Dim joined As String\n    joined = Join(fixary, \",\")\n    Debug.Print joined\n    \n    ' Loop\n    Dim varary() As String\n    varary = Split(joined, \",\")\n    varary(2) = \"gh\"\n    Dim str As Variant\n    For Each str In varary\n        Debug.Print str\n    Next str\n    Dim idx As Integer\n    For idx = 0 To UBound(varary) Step 2\n        Debug.Print idx & \":\" & varary(idx)\n    Next idx\n    \n    Dim i As Integer\n    Do\n        i = i + 1\n        Debug.Print \"do statement while:\" & i\n    Loop While False\n    Do\n        i = i + 1\n        Debug.Print \"do statement until:\" & i\n    Loop Until True\n    Do While i < 4\n        i = i + 1\n        Debug.Print \"do while statement:\" & i\n    Loop\n    Do Until i = 1\n        i = i - 1\n        Debug.Print \"do until statement:\" & i\n    Loop\n    \n    ' \u65e5\u4ed8\u578b\n    Dim date_val As Date\n    Debug.Print \"init: \" & date_val\n    \n    Dim my As user\n    Debug.Print \"my.name type: \" & TypeName(my.name)\n    Debug.Print \"my.birthDateTime type: \" & TypeName(my.birthDateTime)\n    ' Debug.Print \"my type: \" & TypeName(my)\n    ' \u30d1\u30d6\u30ea\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30e2\u30b8\u30e5\u30fc\u30eb?\n    \n    my.name = \"my name\"\n    my.birthDateTime = #11/12/2014 1:02:03 AM#\n    my.birthDate = #11/12/2014#\n    my.birthTime = #1:02:03 AM#\n    date_val = #1:24:35 PM#\n    Debug.Print \"DateTime: \" & my.birthDateTime\n    Debug.Print \"Date: \" & my.birthDate\n    Debug.Print \"AM Time: \" & my.birthTime\n    Debug.Print \"PM Time: \" & date_val\n    Debug.Print vbCrLf & Chr(13) & Chr(10)\n\n    my.birthDateTime = \"2014/12/11 01:02:03 AM\"\n    my.birthDate = \"2014/12/11\"\n    my.birthTime = \"1:02:03 AM\"\n    date_val = \"01:24:35 PM\"\n    Debug.Print \"DateTime: \" & my.birthDateTime\n    Debug.Print \"Date: \" & my.birthDate\n    Debug.Print \"AM Time: \" & my.birthTime\n    Debug.Print \"PM Time: \" & date_val\n\n    Debug.Print \"my.birthDateTime(from str) type: \" & TypeName(my.birthDateTime)\n    Debug.Print \"DateTime(from str) type: \" & TypeName(\"2014/12/11 01:02:03 AM\")\n    Debug.Print \"DateTime(from str) type(Casted): \" & TypeName(CDate(\"2014/12/11 01:02:03 AM\"))\n    Debug.Print \"DateTime(from str) isDate: \" & IsDate(\"2014/12/11 01:02:03 AM\")\n    Debug.Print \"DateTime(from str) isDate(Casted): \" & IsDate(CDate(\"2014/12/11 01:02:03 AM\"))\n\nEnd Sub\n\n' no return value\nSub MySubMsgBox(ByVal str1 As String, ByVal str2 As String, refVal As String)\n    refVal = \"\u53c2\u7167\u6e21\u3057\"\n    str2 = str2 & \"!\"\n    MsgBox str1 & \"_\" & str2\nEnd Sub\n\nSub ExitInSub()\n    Debug.Print \"Before Exit Sub\"\n    Exit Sub\n    Debug.Print \"After Exit Sub\"\nEnd Sub\n\n' exists return value\nFunction MyFuncLen(ByVal str As String, Optional ByVal opt As Integer) As Integer\n    MyFuncLen = Len(str) + opt\nEnd Function\n\nFunction ExitInFunction() As String\n    ExitInFunction = \"Before Exit Function\"\n    Exit Function\n    ExitInFunction = \"After Exit Function\"\nEnd Function\n\nFunction RecursiveFactorial(ByVal num As Integer) As Integer\n    If num <= 0 Then\n        RecursiveFactorial = 1\n    Else\n        RecursiveFactorial = num * RecursiveFactorial(num - 1)\n    End If\nEnd Function\n```\n\n```vb\nVERSION 1.0 CLASS\nBEGIN\n  MultiUse = -1  'True\nEND\nAttribute VB_Name = \"Class1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = False\nAttribute VB_Exposed = False\n```\n\n\n```vb\nVERSION 5.00\nBegin {xxxxxx} UserForm1 \n   Caption         =   \"UserForm1\"\n   ClientHeight    =   3180\n   ClientLeft      =   45\n   ClientTop       =   375\n   ClientWidth     =   4710\n   OleObjectBlob   =   \"UserForm1.frx\":0000\n   StartUpPosition =   1  '\u30aa\u30fc\u30ca\u30fc \u30d5\u30a9\u30fc\u30e0\u306e\u4e2d\u592e\nEnd\nAttribute VB_Name = \"UserForm1\"\nAttribute VB_GlobalNameSpace = False\nAttribute VB_Creatable = False\nAttribute VB_PredeclaredId = True\nAttribute VB_Exposed = False\n```\n\n## Processing Cell\n```vb\nSub Main()\n    ' select sheet\n    Worksheets(\"Sheet1\").Range(\"A1\").Value = \"a1\"\n    \n    ' selected sheet\n    Range(\"A2\").Value = \"a2\"\n    Cells(3, 1).Value = \"a3\"\n    Cells(3, 1).Offset(1, 1).Value = \"b4\"\n    \n    ' cells\n    Range(\"A5\", \"B6\").Value = \"a5 to b6\"\n    Range(\"A7:C8\").Value = \"a7 to c8\"\n    \n    ' row, column\n    Range(\"9:9\").Value = \"row9\"\n    ' Range(\"D:D\").Value = \"col D\"\n    Range(\"B9\").Clear\n    Range(\"A10\").Value = \"A10\"\n    \n    ' with\n    Dim ary As Variant\n    Dim str As Variant\n    ary = Array(\"C1-red\", \"D1-blue\", \"E1-green\", \"F1-other\")\n    For Each str In ary\n        Dim c As Range\n        Dim posColor As Variant\n        posColor = Split(str, \"-\")\n        Set c = Range(posColor(0))\n        With c\n            .Value = posColor(0)\n            With .Font\n                .Bold = True\n                .Size = 16\n            End With\n            .Interior.color = color(c:=posColor(1))\n        End With\n    Next str\n    \n    ' named arguments\n    Range(\"A9\").Delete shift:=xlShiftUp\n            \n    ' dialog box\n    btnVal = MsgBox(\"\u3059\u3079\u3066\u306e\u30bb\u30eb\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u304b\uff1f\" _\n        , vbOKCancel, \"\u30bb\u30eb\u306e\u521d\u671f\u5316\")\n    If btnVal = vbOK Then\n        Cells.Clear\n    End If\n        \nEnd Sub\n\nFunction color(ByVal c As String) As Long\n    Select Case c\n    Case \"red\"\n        color = vbRed\n    Case \"blue\"\n        color = vbBlue\n    Case \"green\"\n        color = vbGreen\n    Case Else\n        color = vbWhite\n    End Select\nEnd Function\n```\n", "tags": ["VBA"]}