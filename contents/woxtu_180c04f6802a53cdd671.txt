{"tags": ["dlang"], "context": " More than 1 year has passed since last update.\u3000\u3084\u3063\u306f\u308d\u30fc\u3002\u3082\u3046\u65e5\u4ed8\u306f\u904e\u304e\u3066\u3044\u307e\u3059\u3051\u3069\u3001\u98db\u3073\u5165\u308a\u3067\u53c2\u52a0\u3057\u307e\u3059\u3002\n\u3000Ruby \u306e method_missing \u3084 Scala \u306e applyDinamic \u306e\u3088\u3046\u306b\u3001D\u8a00\u8a9e\u3067\u3082 opDispatch \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3060\u3068\u304d\u306e\u52d5\u4f5c\u3092\u30d5\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport std.stdio, std.string;\n\nstruct Foo {\n    string opDispatch(string name)() const {\n        return [\"Call\", name, \"!\"].join(\" \");\n    }\n\n    string opDispatch(string name)(string arg) const {\n        return [\"Call\", name, \"with\", arg, \"!\"].join(\" \");\n    }\n}\n\nvoid main() {\n    auto foo = new Foo();\n    writeln(foo.bar()); // Call bar !\n    writeln(foo.baz(\"qux\")); // Call baz with qux !\n}\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u53d6\u308b\u4ed6\u306f\u666e\u901a\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u3067\u3059\u3002\n\u3000\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001XML \u3092\u51fa\u529b\u3059\u308b\u5185\u90e8 DSL \u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nimport std.algorithm, std.ascii, std.range, std.regex, std.string;\n\nstruct XMLGenerator {\n    struct XMLElement {\n        string elem;\n        string[string] attr;\n        string text;\n        XMLElement[] children;\n\n        string toString(int level = 0) const {\n            auto indent = \"  \".repeat(level).join;\n            auto attribute = (attr.length)? \" \" ~ attr.keys.map!(k => k ~ `=\"` ~ attr[k] ~ `\"`).join(\" \"): \"\";\n\n            return [\n                indent ~ \"<\" ~ elem ~ attribute ~ \">\",\n                (text.length)? indent ~ \"  \" ~ text: null,\n                children.map!(x => x.toString(level + 1)).join(newline),\n                indent ~ \"</\" ~ elem ~ \">\"\n            ].filter!(x => x).join(newline);\n        }\n    }\n\n    alias E = XMLElement;\n\n    static E opDispatch(string elem)(E[] children) const {\n        return XMLGenerator.opDispatch!elem(null, null, children);\n    }\n\n    static E opDispatch(string elem)(string text, E[] children = null) const {\n        return XMLGenerator.opDispatch!elem(null, text, children);\n    }\n\n    static E opDispatch(string elem)(string[string] attribute = null, string text = null, E[] children = null) const {\n        return E(elem.replaceAll(regex(\"^_\"), \"\"), attribute, text, children);\n    }\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\nimport std.stdio;\n\nvoid main() {\n    alias XML = XMLGenerator;\n    writeln(\n        XML.html([\n            XML.head([\n                XML.title(\"D Programming Language\")\n            ]),\n            XML._body([\n                XML.h1([\n                    XML.font([\"color\": \"#ff0000\"], \"D \"),\n                    XML.span(\"Programming Language\")\n                ]),\n                XML.b(\"Hello world!\")\n            ])\n        ])\n    );\n}\n\n<html>\n  <head>\n    <title>\n      D Programming Language\n    </title>\n  </head>\n  <body>\n    <h1>\n      <font color=\"#ff0000\">\n        D \n      </font>\n      <span>\n        Programming Language\n      </span>\n    </h1>\n    <b>\n      Hello world!\n    </b>\n  </body>\n</html>\n\nmixin \u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u3089\u5316\u3051\u305d\u3046\u3067\u3059\u3002\u304a\u7c97\u672b\u3055\u307e\u3067\u3057\u305f\u3002\n\nOperator Overloading - D Programming Language\n\n\u3000\u3084\u3063\u306f\u308d\u30fc\u3002\u3082\u3046\u65e5\u4ed8\u306f\u904e\u304e\u3066\u3044\u307e\u3059\u3051\u3069\u3001\u98db\u3073\u5165\u308a\u3067\u53c2\u52a0\u3057\u307e\u3059\u3002\n\n\u3000Ruby \u306e `method_missing` \u3084 Scala \u306e `applyDinamic` \u306e\u3088\u3046\u306b\u3001D\u8a00\u8a9e\u3067\u3082 `opDispatch` \u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3060\u3068\u304d\u306e\u52d5\u4f5c\u3092\u30d5\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```d\nimport std.stdio, std.string;\n\nstruct Foo {\n    string opDispatch(string name)() const {\n        return [\"Call\", name, \"!\"].join(\" \");\n    }\n\n    string opDispatch(string name)(string arg) const {\n        return [\"Call\", name, \"with\", arg, \"!\"].join(\" \");\n    }\n}\n\nvoid main() {\n    auto foo = new Foo();\n    writeln(foo.bar()); // Call bar !\n    writeln(foo.baz(\"qux\")); // Call baz with qux !\n}\n```\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u53d6\u308b\u4ed6\u306f\u666e\u901a\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u3000\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001XML \u3092\u51fa\u529b\u3059\u308b\u5185\u90e8 DSL \u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```d\nimport std.algorithm, std.ascii, std.range, std.regex, std.string;\n\nstruct XMLGenerator {\n    struct XMLElement {\n        string elem;\n        string[string] attr;\n        string text;\n        XMLElement[] children;\n\n        string toString(int level = 0) const {\n            auto indent = \"  \".repeat(level).join;\n            auto attribute = (attr.length)? \" \" ~ attr.keys.map!(k => k ~ `=\"` ~ attr[k] ~ `\"`).join(\" \"): \"\";\n\n            return [\n                indent ~ \"<\" ~ elem ~ attribute ~ \">\",\n                (text.length)? indent ~ \"  \" ~ text: null,\n                children.map!(x => x.toString(level + 1)).join(newline),\n                indent ~ \"</\" ~ elem ~ \">\"\n            ].filter!(x => x).join(newline);\n        }\n    }\n\n    alias E = XMLElement;\n\n    static E opDispatch(string elem)(E[] children) const {\n        return XMLGenerator.opDispatch!elem(null, null, children);\n    }\n\n    static E opDispatch(string elem)(string text, E[] children = null) const {\n        return XMLGenerator.opDispatch!elem(null, text, children);\n    }\n\n    static E opDispatch(string elem)(string[string] attribute = null, string text = null, E[] children = null) const {\n        return E(elem.replaceAll(regex(\"^_\"), \"\"), attribute, text, children);\n    }\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\u3002\n\n```d\nimport std.stdio;\n\nvoid main() {\n    alias XML = XMLGenerator;\n    writeln(\n        XML.html([\n            XML.head([\n                XML.title(\"D Programming Language\")\n            ]),\n            XML._body([\n                XML.h1([\n                    XML.font([\"color\": \"#ff0000\"], \"D \"),\n                    XML.span(\"Programming Language\")\n                ]),\n                XML.b(\"Hello world!\")\n            ])\n        ])\n    );\n}\n```\n\n```html\n<html>\n  <head>\n    <title>\n      D Programming Language\n    </title>\n  </head>\n  <body>\n    <h1>\n      <font color=\"#ff0000\">\n        D \n      </font>\n      <span>\n        Programming Language\n      </span>\n    </h1>\n    <b>\n      Hello world!\n    </b>\n  </body>\n</html>\n```\n\n`mixin` \u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u3089\u5316\u3051\u305d\u3046\u3067\u3059\u3002\u304a\u7c97\u672b\u3055\u307e\u3067\u3057\u305f\u3002\n\n> [Operator Overloading - D Programming Language](http://dlang.org/operatoroverloading.html#Dispatch)"}