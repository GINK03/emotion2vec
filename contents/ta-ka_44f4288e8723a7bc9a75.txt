{"tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u6b21\u5143\u5727\u7e2e\u624b\u6cd5\u3068\u3057\u3066\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3068\u4e3b\u6210\u5206\u5206\u6790\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u6559\u79d1\u66f8\u3068\u3057\u3066\u300e\u6df1\u5c64\u5b66\u7fd2\u300f\u3068\u300e\u306f\u3058\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u300f\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n\u672c\u8a18\u4e8b\u306e\u69cb\u6210\n\n\u306f\u3058\u3081\u306b\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\n\u4e3b\u6210\u5206\u5206\u6790\n2\u3064\u306e\u624b\u6cd5\u306e\u95a2\u4fc2\npython\u3067\u306e\u5b9f\u88c5\n\n\nauto encoder\nPCA\n\n\n\u7d50\u679c\n\u304a\u308f\u308a\u306b\n\n\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\uff08auto encoder\uff09 \u3068\u306f\uff0c\u5165\u529b\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u3044\uff0c\u30c7\u30fc\u30bf\u3092\u3088\u304f\u8868\u3059\u7279\u5fb4\u3092\u7372\u5f97\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\uff0e\n\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u306a\u3044\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306b\u5206\u985e\u3055\u308c\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u524d\u5b66\u7fd2\u3084\u521d\u671f\u5024\u306e\u6c7a\u5b9a\u306a\u3069\u306e\u5229\u7528\u3055\u308c\u307e\u3059\uff0e\n\u3067\u306f\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u306e\u8aac\u660e\u306b\u79fb\u308a\u307e\u3059\uff0e\n\u4ee5\u4e0b\u306e\u56f3\u306b\u793a\u3059\u3088\u3046\u306a3\u5c64\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8003\u3048\u307e\u3059\uff0e\u6d3b\u6027\u5316\u95a2\u6570\u306f\u6052\u7b49\u5199\u50cf\u95a2\u6570 g(a)=ag(a)=ag(a) = a \u3067\u3059\uff0e\n\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024 zjzjz_j \u304a\u3088\u3073\u51fa\u529b\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024 ykyky_k \u306f\uff0c\u5165\u529b\u3092\u9806\u4f1d\u64ad\u3055\u305b\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\n\\begin{align}\n& z_j = \\sum_i w_{ji} x_i \\\\\n& \\\\\n& y_k = \\sum_j \\tilde w_{kj} z_j\n\\end{align}\nzj=\u2211iwjixiyk=\u2211j\u02dcwkjzjzj=\u2211iwjixiyk=\u2211jw~kjzj{\\begin{align}\n& z_j = \\sum_i w_{ji} x_i \\\\\n& \\\\\n& y_k = \\sum_j \\tilde w_{kj} z_j\n\\end{align}\n}\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024\u3092\u4e26\u3079\u305f\u30d9\u30af\u30c8\u30eb\u3092 z\\boldsymbol z\uff0c\u51fa\u529b\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024\u3092\u4e26\u3079\u305f\u30d9\u30af\u30c8\u30eb\u3092 y\\boldsymbol y\uff0c\nwjiw_{ji} \u3092 (\u00a0j,i\u00a0)( \\ j, i \\ ) \u6210\u5206\u306b\u6301\u3064\u884c\u5217\u3092 W\\boldsymbol W \u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3067\u304d\u307e\u3059\uff0e\n\\begin{align}\n& \\boldsymbol z = \\boldsymbol W \\boldsymbol x \\\\\n& \\\\\n& \\boldsymbol y = \\boldsymbol{\\tilde W} \\boldsymbol z\n\\end{align}\nz=Wxy=\u02dcWz{\\begin{align}\n& \\boldsymbol z = \\boldsymbol W \\boldsymbol x \\\\\n& \\\\\n& \\boldsymbol y = \\boldsymbol{\\tilde W} \\boldsymbol z\n\\end{align}\n}\n\u4e2d\u9593\u5c64 z\\boldsymbol z \u3078\u306e\u5909\u63db\u3092 \u7b26\u53f7\u5316\uff0c\u51fa\u529b\u5c64 y\\boldsymbol y \u3078\u306e\u5909\u63db\u3092 \u5fa9\u53f7\u5316 \u3068\u547c\u3073\u307e\u3059\uff0e\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3067\u306f\uff0c\u5fa9\u53f7\u5316\u3055\u308c\u305f y\\boldsymbol y \u304c\uff0c\u5165\u529b x\\boldsymbol x \u306b\u8fd1\u304f\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c\u5165\u529b\u6b21\u5143\u3088\u308a\u3082\u5c0f\u3055\u304f\uff0c\u5165\u529b\u3092\u518d\u73fe\u3067\u304d\u308c\u3070\uff0c\u6b21\u5143\u3092\u5727\u7e2e\u3067\u304d\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\u8a73\u7d30\u306a\u5b66\u7fd2\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u300epython\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5b9f\u88c5\u300f\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6d3b\u6027\u5316\u95a2\u6570\u304c\u6052\u7b49\u5199\u50cf\u95a2\u6570\u306a\u306e\u3067\uff0c\u5fae\u5206\u5024\u306f\u5e38\u306b 11 \u3068\u306a\u308a\uff0c\u8a08\u7b97\u304c\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u4e3b\u6210\u5206\u5206\u6790\n\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09 \u3068\u306f\uff0c\u5b66\u7fd2\u30c7\u30fc\u30bf xi=(xi1,...,xid)T\\boldsymbol x_i = (x_{i1}, ..., x_{id})^T \u306e\u5206\u6563\u304c\u6700\u5927\u306b\u306a\u308b\u65b9\u5411\u3078\u306e\u7dda\u5f62\u5909\u63db\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\uff0e\nNN \u500b\u306e\u30c7\u30fc\u30bf\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u884c\u5217\u3092 X=(x1,...,xN)T\\boldsymbol X = (\\boldsymbol x_1, ..., \\boldsymbol x_N)^T\uff0c\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092 \u02c9x=(\u02c9x1,...,\u02c9xd)T\\boldsymbol{\\bar x} = (\\bar x_1, ..., \\bar x_d)^T \u3068\u3057\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092\u5f15\u3044\u305f\u30c7\u30fc\u30bf\u884c\u5217 \u02c9X\\boldsymbol{\\bar X}\uff0c\u5171\u5206\u6563\u884c\u5217 \u03a3\\boldsymbol \\Sigma \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\\begin{align}\n& \\boldsymbol{\\bar X} = (\\boldsymbol x_1 - \\boldsymbol{\\bar x}, ..., \\boldsymbol x_N - \\boldsymbol{\\bar x})^T \\\\\n& \\\\\n& \\boldsymbol \\Sigma = Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} = \\frac{1}{N} \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X}\n\\end{align}\n\u02c9X=(x1\u2212\u02c9x,...,xN\u2212\u02c9x)T\u03a3=Var{\u02c9X}=1N\u02c9XT\u02c9X{\\begin{align}\n& \\boldsymbol{\\bar X} = (\\boldsymbol x_1 - \\boldsymbol{\\bar x}, ..., \\boldsymbol x_N - \\boldsymbol{\\bar x})^T \\\\\n& \\\\\n& \\boldsymbol \\Sigma = Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} = \\frac{1}{N} \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X}\n\\end{align}\n}\n\u30c7\u30fc\u30bf\u884c\u5217 \u02c9X\\boldsymbol{\\bar X} \u3092\u3042\u308b\u4fc2\u6570\u30d9\u30af\u30c8\u30eb aj\\boldsymbol a_j \u3067\u7dda\u5f62\u5909\u63db\u3057\u305f\u3082\u306e\u3092 sj\\boldsymbol s_j \u3059\u308b\u3068\uff0c\u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u306e\u5206\u6563\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\\begin{align}\n& \\boldsymbol s_j = (s_{1j}, ..., s_{Nj})^T \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol s_j \\bigr\\} \\varpropto \\boldsymbol s_j^T \\boldsymbol s_j = \\bigl(\\boldsymbol{\\bar X} \\boldsymbol a_j \\bigr)^T \\boldsymbol{\\bar X} \\boldsymbol a_j =  \\boldsymbol a_j^T \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X} \\boldsymbol a_j \\varpropto \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j\n\\end{align}\nsj=(s1j,...,sNj)TVar{sj}\u221dsTjsj=(\u02c9Xaj)T\u02c9Xaj=aTj\u02c9XT\u02c9Xaj\u221daTjVar{\u02c9X}aj{\\begin{align}\n& \\boldsymbol s_j = (s_{1j}, ..., s_{Nj})^T \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol s_j \\bigr\\} \\varpropto \\boldsymbol s_j^T \\boldsymbol s_j = \\bigl(\\boldsymbol{\\bar X} \\boldsymbol a_j \\bigr)^T \\boldsymbol{\\bar X} \\boldsymbol a_j =  \\boldsymbol a_j^T \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X} \\boldsymbol a_j \\varpropto \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j\n\\end{align}\n}\n\u3053\u306e\u5206\u6563\u3092\u6700\u5927\u306b\u3059\u308b\u5c04\u5f71\u30d9\u30af\u30c8\u30eb aj\\boldsymbol a_j \u306f\uff0c\u30ce\u30eb\u30e0\u3092 11 \u306b\u5236\u7d04\u3057\u305f\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u95a2\u6570\u3092\u6700\u5927\u5316\u3059\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\n\\begin{align}\n& E(\\boldsymbol a_j) = \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - \\lambda (\\boldsymbol a_j^T \\boldsymbol a_j - 1) \\\\\n& \\\\\n& \\frac{\\partial E(\\boldsymbol a_j)}{\\partial \\boldsymbol a_j} = 2 Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - 2 \\lambda \\boldsymbol a_j = 0 \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j = \\lambda \\boldsymbol a_j \\tag{*}\n\\end{align}\nE(aj)=aTjVar{\u02c9X}aj\u2212\u03bb(aTjaj\u22121)\u2202E(aj)\u2202aj=2Var{\u02c9X}aj\u22122\u03bbaj=0Var{\u02c9X}aj=\u03bbaj{\\begin{align}\n& E(\\boldsymbol a_j) = \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - \\lambda (\\boldsymbol a_j^T \\boldsymbol a_j - 1) \\\\\n& \\\\\n& \\frac{\\partial E(\\boldsymbol a_j)}{\\partial \\boldsymbol a_j} = 2 Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - 2 \\lambda \\boldsymbol a_j = 0 \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j = \\lambda \\boldsymbol a_j \\tag{*}\n\\end{align}\n}\n\u5f0f(\u2217\\ast)\u306f\uff0c\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5171\u5206\u6563\u884c\u5217\u306b\u95a2\u3059\u308b\u56fa\u6709\u5024\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\uff0c\u5206\u6563\u3092\u6700\u5927\u306b\u3059\u308b\u5c04\u5f71\u30d9\u30af\u30c8\u30eb aj\\boldsymbol a_j \u304c\u5f97\u3089\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5f0f(\u2217\\ast)\u3092\u89e3\u3044\u3066\u5f97\u3089\u308c\u308b\u56fa\u6709\u5024\u3092 \u03bb1\u2265...\u2265\u03bbd\\lambda_1 \\geq ... \\geq \\lambda_d \u3068\u3057\uff0c\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092 a1,...,ad\\boldsymbol a_1, ..., \\boldsymbol a_d \u3068\u3057\u307e\u3059\uff0e\n\u5171\u5206\u6563\u884c\u5217\u306f\u5b9f\u5bfe\u79f0\u884c\u5217\u3067\u3042\u308b\u305f\u3081\uff0c\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f\u4e92\u3044\u306b\u76f4\u4ea4\u3057\u307e\u3059\uff0e\n\\boldsymbol a_i^T \\boldsymbol a_j = \\delta_{ij} = \\begin{cases}\n1 \\ ( \\ i = j \\ ) \\\\\n\\\\\n0 \\ ( \\ i \\ne j \\ )\n\\end{cases}\naTiaj=\u03b4ij={1\u00a0(\u00a0i=j\u00a0)0\u00a0(\u00a0i\u2260j\u00a0){\\boldsymbol a_i^T \\boldsymbol a_j = \\delta_{ij} = \\begin{cases}\n1 \\ ( \\ i = j \\ ) \\\\\n\\\\\n0 \\ ( \\ i \\ne j \\ )\n\\end{cases}\n}\n\u6700\u5927\u56fa\u6709\u5024\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306b\u3088\u308a\u7dda\u5f62\u5909\u63db\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7b2c 11 \u4e3b\u6210\u5206\uff0c\nkk \u756a\u76ee\u306e\u56fa\u6709\u5024\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306b\u3088\u308a\u7dda\u5f62\u5909\u63db\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7b2c kk \u4e3b\u6210\u5206\u3068\u547c\u3073\u307e\u3059\uff0e\n\u5168\u5206\u6563\u91cf VtotalV_{total}\uff0c\u7b2c kk \u4e3b\u6210\u5206\u306e\u5bc4\u4e0e\u7387 ckc_k\uff0c\u7b2c kk \u4e3b\u6210\u5206\u307e\u3067\u306e\u7d2f\u7a4d\u5bc4\u4e0e\u7387 rkr_k \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\\begin{align}\n& V_{total} = \\sum_{i = 1}^d \\lambda_i \\\\\n& \\\\\n& c_k = \\frac{\\lambda_k}{V_{total}} \\\\\n& \\\\\n& r_k = \\frac{\\sum_{i = 1}^k \\lambda_i}{V_{total}}\n\\end{align}\nVtotal=d\u2211i=1\u03bbick=\u03bbkVtotalrk=\u2211ki=1\u03bbiVtotal{\\begin{align}\n& V_{total} = \\sum_{i = 1}^d \\lambda_i \\\\\n& \\\\\n& c_k = \\frac{\\lambda_k}{V_{total}} \\\\\n& \\\\\n& r_k = \\frac{\\sum_{i = 1}^k \\lambda_i}{V_{total}}\n\\end{align}\n}\n\n2\u3064\u306e\u624b\u6cd5\u306e\u95a2\u4fc2\n\u56fa\u6709\u5024\u306e\u964d\u9806\u306b \u03a3\\boldsymbol \\Sigma \u306e DyD_y \u500b\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u9078\u3073\uff0c\u3053\u308c\u3092\u884c\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u683c\u7d0d\u3057\u305f\u884c\u5217\u3092 UDy\\boldsymbol U_{D_y} \u3068\u3057\u307e\u3059\uff0e\n\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u6570\u3092 DxD_x \u3068\u3059\u308b\u3068\uff0cDy<DxD_y < D_x \u306e\u3068\u304d\u6b21\u5143\u304c\u5727\u7e2e\u3055\u308c\u307e\u3059\uff0e\nUDy\\boldsymbol U_{D_y} \u304a\u3088\u3073 \u02c9x\\boldsymbol{\\bar x} \u306f\uff0c\u4ee5\u4e0b\u306e\u6700\u5c0f\u5316\u554f\u984c\u306e\u89e3 (\u0393,\u03be)=(UDy,\u02c9x)(\\boldsymbol \\Gamma, \\boldsymbol \\xi) = (\\boldsymbol U_{D_y}, \\boldsymbol{\\bar x}) \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\\min_{\\boldsymbol \\Gamma, \\boldsymbol \\xi} \\sum_{n = 1}^N \\bigl\\| \\ (\\boldsymbol x_n - \\boldsymbol \\xi) - \\boldsymbol \\Gamma^T \\boldsymbol \\Gamma(\\boldsymbol x_n - \\boldsymbol \\xi) \\ \\bigr\\|^2 \\tag{**}\nmin\u0393,\u03beN\u2211n=1\u2225\u00a0(xn\u2212\u03be)\u2212\u0393T\u0393(xn\u2212\u03be)\u00a0\u22252{\\min_{\\boldsymbol \\Gamma, \\boldsymbol \\xi} \\sum_{n = 1}^N \\bigl\\| \\ (\\boldsymbol x_n - \\boldsymbol \\xi) - \\boldsymbol \\Gamma^T \\boldsymbol \\Gamma(\\boldsymbol x_n - \\boldsymbol \\xi) \\ \\bigr\\|^2 \\tag{**}\n}\n\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\uff0cDxD_x \u6b21\u5143\u7a7a\u9593\u5185\u306e\u5404\u30c7\u30fc\u30bf\u3092\uff0c\u4e8c\u4e57\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u6700\u3082\u3088\u304f\u8868\u3059 DyD_y \u6b21\u5143\u90e8\u5206\u7a7a\u9593\u3092\u4e0e\u3048\u3066\u3044\u308b\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\uff0e\n\u4e2d\u9593\u5c64\u304a\u3088\u3073\u51fa\u529b\u5c64\u306e\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u3092 W=\u0393,b=\u2212\u0393\u03be,\u02dcW=\u0393T,\u02dcb=\u03be\\boldsymbol W = \\boldsymbol \\Gamma, \\boldsymbol b = -\\boldsymbol \\Gamma \\boldsymbol \\xi, \\boldsymbol{\\tilde W} = \\boldsymbol \\Gamma^T, \\boldsymbol{\\tilde b} = \\boldsymbol \\xi \u3068\u3059\u308b\u3068\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u306e\u8aa4\u5dee\u95a2\u6570\u306f\u5f0f(\u2217\u2217\\ast\\ast)\u3068\u4e00\u81f4\u3057\u307e\u3059\uff0e\n\u3064\u307e\u308a\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3067\u306f\uff0c(\u0393,\u03be)=(UDy,\u02c9x)(\\boldsymbol \\Gamma, \\boldsymbol \\xi) = (\\boldsymbol U_{D_y}, \\boldsymbol{\\bar x}) \u304c\u8aa4\u5dee\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u306a\u308a\u307e\u3059\uff0e\n\npython\u3067\u306e\u5b9f\u88c5\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u5206\u3051\u3066\u63b2\u8f09\u3057\u307e\u3059\uff0e\n\nauto encoder\n\u5727\u7e2e\u6b21\u5143\u3092 5050 \u3068\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5b66\u7fd2\u7387 \u03b5=0.00001\\varepsilon = 0.00001 \u3067\uff0c1000010000 \u30a8\u30dd\u30c3\u30af\u56de\u3057\u3066\u3044\u307e\u3059\uff0e\n\nauto_encoder.py\nimport numpy\n\nclass AutoEncoder:\n\n    def __init__(self, n_input, n_hidden):\n        self.hidden_weight = numpy.random.randn(n_hidden, n_input + 1)\n        self.output_weight = numpy.random.randn(n_input, n_hidden + 1)\n\n    def fit(self, X, epsilon, epoch):\n        self.error = numpy.zeros(epoch)\n        N = X.shape[0]\n        for epo in range(epoch):\n            print u'epoch: %d' % epo\n            for x in X:\n                self.__update_weight(x, epsilon)\n\n            self.error[epo] = self.__calc_error(X)\n\n    def encode(self, X):\n        Z = numpy.zeros((X.shape[0], self.hidden_weight.shape[0]))\n        Y = numpy.zeros(X.shape)\n        for (i, x) in enumerate(X):\n            z, y = self.__forward(x)\n            Z[i, :] = z\n            Y[i, :] = y\n\n        return (Z, Y)\n\n    def __forward(self, x):\n        z = self.hidden_weight.dot(numpy.hstack((1, x)))\n        y = self.output_weight.dot(numpy.hstack((1, z)))\n\n        return (z, y)\n\n    def __update_weight(self, x, epsilon):\n        z, y = self.__forward(x)\n\n        # update output_weight\n        output_delta = y - x\n        self.output_weight -= epsilon * output_delta.reshape(-1, 1) * numpy.hstack((1, z))\n\n        # update hidden_weight\n        hidden_delta = self.output_weight[:, 1:].T.dot(output_delta)\n        self.hidden_weight -= epsilon * hidden_delta.reshape(-1, 1) * numpy.hstack((1, x))\n\n    def __calc_error(self, X):\n        N = X.shape[0]\n        err = 0.0\n        for x in X:\n            _, y = self.__forward(x)\n            err += (y - x).dot(y - x) / 2.0\n\n        return err\n\n\n\nmain.py\nimport numpy\nimport cv2\nfrom sklearn.datasets import fetch_mldata\nfrom auto_encoder import AutoEncoder\n\nif __name__ == '__main__':\n\n    print 'read data...'\n    mnist = fetch_mldata('MNIST original', data_home = '.')\n    _max = mnist.data[:, :-1].max()\n    X = mnist.data[:, :-1] * 1.0 / _max\n    input_size = X.shape[1]\n    hidden_size = 50\n    epsilon = 0.00001\n    epoch = 10000\n    stride = 50\n\n    print 'auto encoder init...'\n    auto = AutoEncoder(input_size, hidden_size)\n\n    print 'train...'\n    auto.fit(X[::stride], epsilon, epoch)\n\n    print 'encode...'\n    Z, Y = auto.encode(X[::stride])\n    for (i, y) in enumerate(Y * _max):\n        cv2.imwrite('result/%04d.png' % i, y.reshape(28, 28))\n\n\n\nPCA\n\u5727\u7e2e\u6b21\u5143\u3092 5050 \u3068\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u304a\u3088\u3073\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\uff0e\n\npca.py\nimport numpy\n\nclass PCA:\n\n    def __init__(self, n_components):\n        self.n_components = n_components\n\n    def fit(self, X):\n        self.bar = self.__bar(X)\n        self.cov = self.__cov()\n        self.lamda, self.A, self.ccr = self.__solve_eigen_porblem()\n        self.S = self.__transformation()\n\n    def decode(self):\n        return self.S.dot(self.A.T)\n\n    def __bar(self, X):\n        return X - X.mean(axis = 0)\n\n    def __cov(self):\n        return numpy.cov(self.bar, rowvar = 0)\n\n    def __solve_eigen_porblem(self):\n        _lamda, _A = numpy.linalg.eig(self.cov)\n        lamda = _lamda[:self.n_components]\n        A = _A[:, :self.n_components]\n        ccr = lamda.sum() / _lamda.sum()\n\n        return (lamda, A, ccr)\n\n    def __transformation(self):\n        return self.bar.dot(self.A)\n\n\n\nmain.py\nimport cv2\nfrom matplotlib import pyplot\nfrom sklearn.datasets import fetch_mldata\nimport os\nfrom pca import PCA\n\nif __name__ == '__main__':\n\n    print 'read data...'\n    mnist = fetch_mldata('MNIST original', data_home = '.')\n    X = mnist.data\n    n_components = 50\n    p_dir = 'projection/'\n    d_dir = 'decoded/'\n\n    print 'train...'\n    pca = PCA(n_components)\n    pca.fit(X)\n    print 'cumulative contribution ratio: %f' % pca.ccr\n\n    print 'decode...'\n    Xhat = pca.decode()\n\n    print 'save projection vector...'\n    if not os.path.exists(p_dir):\n        os.mkdir(p_dir)\n    for (i, a) in enumerate(pca.A.T):\n        fig, ax = pyplot.subplots()\n        heatmap = ax.pcolor(a.reshape(28, 28)[:, ::-1], cmap = pyplot.cm.RdYlBu)\n        pyplot.savefig(p_dir + '%04d.png' % i, dpi = 25)\n        pyplot.clf()\n\n    print 'save decoded images...'\n    if not os.path.exists(d_dir):\n        os.mkdir(d_dir)\n    for (i, xhat) in enumerate(Xhat[::50]):\n        cv2.imwrite(d_dir + '%04d.png' % i, xhat.reshape(28, 28))\n\n    n_components = 30\n    pca = PCA(n_components)\n    pca.fit(X)\n\n    Xhat = pca.A.dot(pca.S.T)\n    for (i, xhat) in enumerate(Xhat.T):\n        cv2.imwrite('result/%04d.png' % i, xhat.reshape(28, 28))\n\n\n\n\u7d50\u679c\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\uff0e\n\nauto encoder\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\n\n\u8aa4\u5dee\n\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u306f\u898b\u6804\u3048\u306e\u3044\u3044\u3082\u306e\u3092\u9078\u3073\u307e\u3057\u305f\uff0e\n5050 \u6b21\u5143\u306b\u5727\u7e2e\u3057\u305f\u7279\u5fb4\u91cf\u304b\u3089 784784 \u6b21\u5143\u3078\u5fa9\u53f7\u5316\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\n\u8aa4\u5dee\u306e\u30b0\u30e9\u30d5\u306f\u6a2a\u8ef8\u306b\u30a8\u30dd\u30c3\u30af\u6570\uff0c\u7e26\u8ef8\u306b\u8aa4\u5dee\u306e\u5024\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\n\u8aa4\u5dee\u306e\u6841\u306e\u5dee\u304c\u5927\u304d\u3059\u304e\u305f\u305f\u3081\uff0c\u5bfe\u6570\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\n\u53b3\u5bc6\u306a\u8aa4\u5dee\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u5358\u8abf\u306b\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\uff0e\n\nPCA\n\u53ef\u8996\u5316\u3057\u305f\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\n\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\n\n\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u306f\uff0c\u56fa\u6709\u5024\u306e\u5927\u304d\u3044\u9806\u756a\u306b\uff0c\u5bfe\u5fdc\u3059\u308b\u30d9\u30af\u30c8\u30eb\u309210\u500b\u9078\u629e\u3057\u307e\u3057\u305f\uff0e\n\u5de6\u4e0a\u306e\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u304c\u6700\u3082\u5206\u6563\u306e\u5927\u304d\u3044\u7b2c1\u4e3b\u6210\u5206\u3078\u5c04\u5f71\u3057\u307e\u3059\uff0e\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u306f\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u540c\u69d8\uff0c\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u304a\u308f\u308a\u306b\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u304a\u3088\u3073\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u3063\u3066\u6b21\u5143\u3092\u5727\u7e2e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n# \u306f\u3058\u3081\u306b\n\n\u6b21\u5143\u5727\u7e2e\u624b\u6cd5\u3068\u3057\u3066\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3068\u4e3b\u6210\u5206\u5206\u6790\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u6559\u79d1\u66f8\u3068\u3057\u3066[\u300e\u6df1\u5c64\u5b66\u7fd2\u300f](https://www.amazon.co.jp/\u6df1\u5c64\u5b66\u7fd2-\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba-\u5ca1\u8c37-\u8cb4\u4e4b/dp/4061529021)\u3068[\u300e\u306f\u3058\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u300f](https://www.amazon.co.jp/\u306f\u3058\u3081\u3066\u306e\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58-\u5e73\u4e95-\u6709\u4e09/dp/4627849710)\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n\n\u672c\u8a18\u4e8b\u306e\u69cb\u6210\n\n* \u306f\u3058\u3081\u306b\n* \u81ea\u5df1\u7b26\u53f7\u5316\u5668\n* \u4e3b\u6210\u5206\u5206\u6790\n* 2\u3064\u306e\u624b\u6cd5\u306e\u95a2\u4fc2\n* python\u3067\u306e\u5b9f\u88c5\n    * auto encoder\n    * PCA\n* \u7d50\u679c\n* \u304a\u308f\u308a\u306b\n\n\n# \u81ea\u5df1\u7b26\u53f7\u5316\u5668\n\n**\u81ea\u5df1\u7b26\u53f7\u5316\u5668\uff08auto encoder\uff09** \u3068\u306f\uff0c\u5165\u529b\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u3044\uff0c\u30c7\u30fc\u30bf\u3092\u3088\u304f\u8868\u3059\u7279\u5fb4\u3092\u7372\u5f97\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\uff0e\n\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u306a\u3044\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306b\u5206\u985e\u3055\u308c\uff0c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u524d\u5b66\u7fd2\u3084\u521d\u671f\u5024\u306e\u6c7a\u5b9a\u306a\u3069\u306e\u5229\u7528\u3055\u308c\u307e\u3059\uff0e\n\u3067\u306f\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u306e\u8aac\u660e\u306b\u79fb\u308a\u307e\u3059\uff0e\n\u4ee5\u4e0b\u306e\u56f3\u306b\u793a\u3059\u3088\u3046\u306a3\u5c64\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8003\u3048\u307e\u3059\uff0e\u6d3b\u6027\u5316\u95a2\u6570\u306f\u6052\u7b49\u5199\u50cf\u95a2\u6570 $g(a) = a$ \u3067\u3059\uff0e\n\n<img width=\"420\" alt=\"network.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/0bee98e3-bbf6-58f9-f196-d52fd3ef3e29.png\">\n\n\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024 $z_j$ \u304a\u3088\u3073\u51fa\u529b\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024 $y_k$ \u306f\uff0c\u5165\u529b\u3092\u9806\u4f1d\u64ad\u3055\u305b\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& z_j = \\sum_i w_{ji} x_i \\\\\n& \\\\\n& y_k = \\sum_j \\tilde w_{kj} z_j\n\\end{align}\n```\n\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024\u3092\u4e26\u3079\u305f\u30d9\u30af\u30c8\u30eb\u3092 $\\boldsymbol z$\uff0c\u51fa\u529b\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u5024\u3092\u4e26\u3079\u305f\u30d9\u30af\u30c8\u30eb\u3092 $\\boldsymbol y$\uff0c\n$w_{ji}$ \u3092 $( \\ j, i \\ )$ \u6210\u5206\u306b\u6301\u3064\u884c\u5217\u3092 $\\boldsymbol W$ \u3068\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3067\u304d\u307e\u3059\uff0e\n\n\n```math\n\\begin{align}\n& \\boldsymbol z = \\boldsymbol W \\boldsymbol x \\\\\n& \\\\\n& \\boldsymbol y = \\boldsymbol{\\tilde W} \\boldsymbol z\n\\end{align}\n```\n\n\u4e2d\u9593\u5c64 $\\boldsymbol z$ \u3078\u306e\u5909\u63db\u3092 **\u7b26\u53f7\u5316**\uff0c\u51fa\u529b\u5c64 $\\boldsymbol y$ \u3078\u306e\u5909\u63db\u3092 **\u5fa9\u53f7\u5316** \u3068\u547c\u3073\u307e\u3059\uff0e\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3067\u306f\uff0c\u5fa9\u53f7\u5316\u3055\u308c\u305f $\\boldsymbol y$ \u304c\uff0c\u5165\u529b $\\boldsymbol x$ \u306b\u8fd1\u304f\u306a\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c\u5165\u529b\u6b21\u5143\u3088\u308a\u3082\u5c0f\u3055\u304f\uff0c\u5165\u529b\u3092\u518d\u73fe\u3067\u304d\u308c\u3070\uff0c\u6b21\u5143\u3092\u5727\u7e2e\u3067\u304d\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\u8a73\u7d30\u306a\u5b66\u7fd2\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f[\u300epython\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5b9f\u88c5\u300f](http://qiita.com/ta-ka/items/bcdfd2d9903146c51dcb)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6d3b\u6027\u5316\u95a2\u6570\u304c\u6052\u7b49\u5199\u50cf\u95a2\u6570\u306a\u306e\u3067\uff0c\u5fae\u5206\u5024\u306f\u5e38\u306b $1$ \u3068\u306a\u308a\uff0c\u8a08\u7b97\u304c\u3057\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\n# \u4e3b\u6210\u5206\u5206\u6790\n\n**\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09** \u3068\u306f\uff0c\u5b66\u7fd2\u30c7\u30fc\u30bf $\\boldsymbol x_i = (x_{i1}, ..., x_{id})^T$ \u306e\u5206\u6563\u304c\u6700\u5927\u306b\u306a\u308b\u65b9\u5411\u3078\u306e\u7dda\u5f62\u5909\u63db\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\uff0e\n$N$ \u500b\u306e\u30c7\u30fc\u30bf\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u884c\u5217\u3092 $\\boldsymbol X = (\\boldsymbol x_1, ..., \\boldsymbol x_N)^T$\uff0c\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092 $\\boldsymbol{\\bar x} = (\\bar x_1, ..., \\bar x_d)^T$ \u3068\u3057\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092\u5f15\u3044\u305f\u30c7\u30fc\u30bf\u884c\u5217 $\\boldsymbol{\\bar X}$\uff0c\u5171\u5206\u6563\u884c\u5217 $\\boldsymbol \\Sigma$ \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& \\boldsymbol{\\bar X} = (\\boldsymbol x_1 - \\boldsymbol{\\bar x}, ..., \\boldsymbol x_N - \\boldsymbol{\\bar x})^T \\\\\n& \\\\\n& \\boldsymbol \\Sigma = Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} = \\frac{1}{N} \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X}\n\\end{align}\n```\n\n\u30c7\u30fc\u30bf\u884c\u5217 $\\boldsymbol{\\bar X}$ \u3092\u3042\u308b\u4fc2\u6570\u30d9\u30af\u30c8\u30eb $\\boldsymbol a_j$ \u3067\u7dda\u5f62\u5909\u63db\u3057\u305f\u3082\u306e\u3092 $\\boldsymbol s_j$ \u3059\u308b\u3068\uff0c\u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\u306e\u5206\u6563\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& \\boldsymbol s_j = (s_{1j}, ..., s_{Nj})^T \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol s_j \\bigr\\} \\varpropto \\boldsymbol s_j^T \\boldsymbol s_j = \\bigl(\\boldsymbol{\\bar X} \\boldsymbol a_j \\bigr)^T \\boldsymbol{\\bar X} \\boldsymbol a_j =  \\boldsymbol a_j^T \\boldsymbol{\\bar X}^T \\boldsymbol{\\bar X} \\boldsymbol a_j \\varpropto \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j\n\\end{align}\n```\n\n\u3053\u306e\u5206\u6563\u3092\u6700\u5927\u306b\u3059\u308b\u5c04\u5f71\u30d9\u30af\u30c8\u30eb $\\boldsymbol a_j$ \u306f\uff0c\u30ce\u30eb\u30e0\u3092 $1$ \u306b\u5236\u7d04\u3057\u305f\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u95a2\u6570\u3092\u6700\u5927\u5316\u3059\u308b\u3053\u3068\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& E(\\boldsymbol a_j) = \\boldsymbol a_j^T Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - \\lambda (\\boldsymbol a_j^T \\boldsymbol a_j - 1) \\\\\n& \\\\\n& \\frac{\\partial E(\\boldsymbol a_j)}{\\partial \\boldsymbol a_j} = 2 Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j - 2 \\lambda \\boldsymbol a_j = 0 \\\\\n& \\\\\n& Var\\bigl\\{\\boldsymbol{\\bar X}\\bigr\\} \\boldsymbol a_j = \\lambda \\boldsymbol a_j \\tag{*}\n\\end{align}\n```\n\n\u5f0f($\\ast$)\u306f\uff0c\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5171\u5206\u6563\u884c\u5217\u306b\u95a2\u3059\u308b\u56fa\u6709\u5024\u554f\u984c\u3092\u89e3\u304f\u3053\u3068\u3067\uff0c\u5206\u6563\u3092\u6700\u5927\u306b\u3059\u308b\u5c04\u5f71\u30d9\u30af\u30c8\u30eb $\\boldsymbol a_j$ \u304c\u5f97\u3089\u308c\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5f0f($\\ast$)\u3092\u89e3\u3044\u3066\u5f97\u3089\u308c\u308b\u56fa\u6709\u5024\u3092 $\\lambda_1 \\geq ... \\geq \\lambda_d$ \u3068\u3057\uff0c\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092 $\\boldsymbol a_1, ..., \\boldsymbol a_d$ \u3068\u3057\u307e\u3059\uff0e\n\u5171\u5206\u6563\u884c\u5217\u306f\u5b9f\u5bfe\u79f0\u884c\u5217\u3067\u3042\u308b\u305f\u3081\uff0c\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306f\u4e92\u3044\u306b\u76f4\u4ea4\u3057\u307e\u3059\uff0e\n\n```math\n\\boldsymbol a_i^T \\boldsymbol a_j = \\delta_{ij} = \\begin{cases}\n1 \\ ( \\ i = j \\ ) \\\\\n\\\\\n0 \\ ( \\ i \\ne j \\ )\n\\end{cases}\n```\n\n\u6700\u5927\u56fa\u6709\u5024\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306b\u3088\u308a\u7dda\u5f62\u5909\u63db\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7b2c $1$ \u4e3b\u6210\u5206\uff0c\n$k$ \u756a\u76ee\u306e\u56fa\u6709\u5024\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306b\u3088\u308a\u7dda\u5f62\u5909\u63db\u3055\u308c\u305f\u7279\u5fb4\u91cf\u3092\u7b2c $k$ \u4e3b\u6210\u5206\u3068\u547c\u3073\u307e\u3059\uff0e\n\u5168\u5206\u6563\u91cf $V_{total}$\uff0c\u7b2c $k$ \u4e3b\u6210\u5206\u306e\u5bc4\u4e0e\u7387 $c_k$\uff0c\u7b2c $k$ \u4e3b\u6210\u5206\u307e\u3067\u306e\u7d2f\u7a4d\u5bc4\u4e0e\u7387 $r_k$ \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```math\n\\begin{align}\n& V_{total} = \\sum_{i = 1}^d \\lambda_i \\\\\n& \\\\\n& c_k = \\frac{\\lambda_k}{V_{total}} \\\\\n& \\\\\n& r_k = \\frac{\\sum_{i = 1}^k \\lambda_i}{V_{total}}\n\\end{align}\n```\n\n\n# 2\u3064\u306e\u624b\u6cd5\u306e\u95a2\u4fc2\n\n\u56fa\u6709\u5024\u306e\u964d\u9806\u306b $\\boldsymbol \\Sigma$ \u306e $D_y$ \u500b\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u3092\u9078\u3073\uff0c\u3053\u308c\u3092\u884c\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u683c\u7d0d\u3057\u305f\u884c\u5217\u3092 $\\boldsymbol U_{D_y}$ \u3068\u3057\u307e\u3059\uff0e\n\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u6570\u3092 $D_x$ \u3068\u3059\u308b\u3068\uff0c$D_y < D_x$ \u306e\u3068\u304d\u6b21\u5143\u304c\u5727\u7e2e\u3055\u308c\u307e\u3059\uff0e\n$\\boldsymbol U_{D_y}$ \u304a\u3088\u3073 $\\boldsymbol{\\bar x}$ \u306f\uff0c\u4ee5\u4e0b\u306e\u6700\u5c0f\u5316\u554f\u984c\u306e\u89e3 $(\\boldsymbol \\Gamma, \\boldsymbol \\xi) = (\\boldsymbol U_{D_y}, \\boldsymbol{\\bar x})$ \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n```math\n\\min_{\\boldsymbol \\Gamma, \\boldsymbol \\xi} \\sum_{n = 1}^N \\bigl\\| \\ (\\boldsymbol x_n - \\boldsymbol \\xi) - \\boldsymbol \\Gamma^T \\boldsymbol \\Gamma(\\boldsymbol x_n - \\boldsymbol \\xi) \\ \\bigr\\|^2 \\tag{**}\n```\n\n\u4e3b\u6210\u5206\u5206\u6790\u3067\u306f\uff0c$D_x$ \u6b21\u5143\u7a7a\u9593\u5185\u306e\u5404\u30c7\u30fc\u30bf\u3092\uff0c\u4e8c\u4e57\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u6700\u3082\u3088\u304f\u8868\u3059 $D_y$ \u6b21\u5143\u90e8\u5206\u7a7a\u9593\u3092\u4e0e\u3048\u3066\u3044\u308b\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\uff0e\n\u4e2d\u9593\u5c64\u304a\u3088\u3073\u51fa\u529b\u5c64\u306e\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u3092 $\\boldsymbol W = \\boldsymbol \\Gamma, \\boldsymbol b = -\\boldsymbol \\Gamma \\boldsymbol \\xi, \\boldsymbol{\\tilde W} = \\boldsymbol \\Gamma^T, \\boldsymbol{\\tilde b} = \\boldsymbol \\xi$ \u3068\u3059\u308b\u3068\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u306e\u8aa4\u5dee\u95a2\u6570\u306f\u5f0f($\\ast\\ast$)\u3068\u4e00\u81f4\u3057\u307e\u3059\uff0e\n\u3064\u307e\u308a\uff0c\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u3067\u306f\uff0c$(\\boldsymbol \\Gamma, \\boldsymbol \\xi) = (\\boldsymbol U_{D_y}, \\boldsymbol{\\bar x})$ \u304c\u8aa4\u5dee\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u306a\u308a\u307e\u3059\uff0e\n\n\n# python\u3067\u306e\u5b9f\u88c5\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\uff0c\u4e3b\u6210\u5206\u5206\u6790\u3092\u5206\u3051\u3066\u63b2\u8f09\u3057\u307e\u3059\uff0e\n\n## auto encoder\n\n\u5727\u7e2e\u6b21\u5143\u3092 $50$ \u3068\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5b66\u7fd2\u7387 $\\varepsilon = 0.00001$ \u3067\uff0c$10000$ \u30a8\u30dd\u30c3\u30af\u56de\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```auto_encoder.py\nimport numpy\n\nclass AutoEncoder:\n\n    def __init__(self, n_input, n_hidden):\n        self.hidden_weight = numpy.random.randn(n_hidden, n_input + 1)\n        self.output_weight = numpy.random.randn(n_input, n_hidden + 1)\n\n    def fit(self, X, epsilon, epoch):\n        self.error = numpy.zeros(epoch)\n        N = X.shape[0]\n        for epo in range(epoch):\n            print u'epoch: %d' % epo\n            for x in X:\n                self.__update_weight(x, epsilon)\n\n            self.error[epo] = self.__calc_error(X)\n\n    def encode(self, X):\n        Z = numpy.zeros((X.shape[0], self.hidden_weight.shape[0]))\n        Y = numpy.zeros(X.shape)\n        for (i, x) in enumerate(X):\n            z, y = self.__forward(x)\n            Z[i, :] = z\n            Y[i, :] = y\n\n        return (Z, Y)\n\n    def __forward(self, x):\n        z = self.hidden_weight.dot(numpy.hstack((1, x)))\n        y = self.output_weight.dot(numpy.hstack((1, z)))\n\n        return (z, y)\n\n    def __update_weight(self, x, epsilon):\n        z, y = self.__forward(x)\n\n        # update output_weight\n        output_delta = y - x\n        self.output_weight -= epsilon * output_delta.reshape(-1, 1) * numpy.hstack((1, z))\n\n        # update hidden_weight\n        hidden_delta = self.output_weight[:, 1:].T.dot(output_delta)\n        self.hidden_weight -= epsilon * hidden_delta.reshape(-1, 1) * numpy.hstack((1, x))\n\n    def __calc_error(self, X):\n        N = X.shape[0]\n        err = 0.0\n        for x in X:\n            _, y = self.__forward(x)\n            err += (y - x).dot(y - x) / 2.0\n\n        return err\n```\n\n```main.py\nimport numpy\nimport cv2\nfrom sklearn.datasets import fetch_mldata\nfrom auto_encoder import AutoEncoder\n\nif __name__ == '__main__':\n\n    print 'read data...'\n    mnist = fetch_mldata('MNIST original', data_home = '.')\n    _max = mnist.data[:, :-1].max()\n    X = mnist.data[:, :-1] * 1.0 / _max\n    input_size = X.shape[1]\n    hidden_size = 50\n    epsilon = 0.00001\n    epoch = 10000\n    stride = 50\n\n    print 'auto encoder init...'\n    auto = AutoEncoder(input_size, hidden_size)\n\n    print 'train...'\n    auto.fit(X[::stride], epsilon, epoch)\n\n    print 'encode...'\n    Z, Y = auto.encode(X[::stride])\n    for (i, y) in enumerate(Y * _max):\n        cv2.imwrite('result/%04d.png' % i, y.reshape(28, 28))\n```\n\n## PCA\n\n\u5727\u7e2e\u6b21\u5143\u3092 $50$ \u3068\u3057\u3066\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u304a\u3088\u3073\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u3092\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```pca.py\nimport numpy\n\nclass PCA:\n\n    def __init__(self, n_components):\n        self.n_components = n_components\n\n    def fit(self, X):\n        self.bar = self.__bar(X)\n        self.cov = self.__cov()\n        self.lamda, self.A, self.ccr = self.__solve_eigen_porblem()\n        self.S = self.__transformation()\n\n    def decode(self):\n        return self.S.dot(self.A.T)\n\n    def __bar(self, X):\n        return X - X.mean(axis = 0)\n\n    def __cov(self):\n        return numpy.cov(self.bar, rowvar = 0)\n\n    def __solve_eigen_porblem(self):\n        _lamda, _A = numpy.linalg.eig(self.cov)\n        lamda = _lamda[:self.n_components]\n        A = _A[:, :self.n_components]\n        ccr = lamda.sum() / _lamda.sum()\n\n        return (lamda, A, ccr)\n\n    def __transformation(self):\n        return self.bar.dot(self.A)\n```\n\n```main.py\nimport cv2\nfrom matplotlib import pyplot\nfrom sklearn.datasets import fetch_mldata\nimport os\nfrom pca import PCA\n\nif __name__ == '__main__':\n\n    print 'read data...'\n    mnist = fetch_mldata('MNIST original', data_home = '.')\n    X = mnist.data\n    n_components = 50\n    p_dir = 'projection/'\n    d_dir = 'decoded/'\n\n    print 'train...'\n    pca = PCA(n_components)\n    pca.fit(X)\n    print 'cumulative contribution ratio: %f' % pca.ccr\n\n    print 'decode...'\n    Xhat = pca.decode()\n\n    print 'save projection vector...'\n    if not os.path.exists(p_dir):\n        os.mkdir(p_dir)\n    for (i, a) in enumerate(pca.A.T):\n        fig, ax = pyplot.subplots()\n        heatmap = ax.pcolor(a.reshape(28, 28)[:, ::-1], cmap = pyplot.cm.RdYlBu)\n        pyplot.savefig(p_dir + '%04d.png' % i, dpi = 25)\n        pyplot.clf()\n\n    print 'save decoded images...'\n    if not os.path.exists(d_dir):\n        os.mkdir(d_dir)\n    for (i, xhat) in enumerate(Xhat[::50]):\n        cv2.imwrite(d_dir + '%04d.png' % i, xhat.reshape(28, 28))\n\n    n_components = 30\n    pca = PCA(n_components)\n    pca.fit(X)\n\n    Xhat = pca.A.dot(pca.S.T)\n    for (i, xhat) in enumerate(Xhat.T):\n        cv2.imwrite('result/%04d.png' % i, xhat.reshape(28, 28))\n```\n\n\n# \u7d50\u679c\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\uff0e\n\n### auto encoder\n\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\n\n<img width=\"720\" alt=\"decode_auto_encoder.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/b76aae58-68f1-6245-c5a2-1cead979c23b.png\">\n\n\n\n\u8aa4\u5dee\n\n<img width=\"640\" alt=\"error_log.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/77c69011-78bb-d7cb-8ddb-877b2a7d2f4f.png\">\n\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u306f\u898b\u6804\u3048\u306e\u3044\u3044\u3082\u306e\u3092\u9078\u3073\u307e\u3057\u305f\uff0e\n$50$ \u6b21\u5143\u306b\u5727\u7e2e\u3057\u305f\u7279\u5fb4\u91cf\u304b\u3089 $784$ \u6b21\u5143\u3078\u5fa9\u53f7\u5316\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\n\u8aa4\u5dee\u306e\u30b0\u30e9\u30d5\u306f\u6a2a\u8ef8\u306b\u30a8\u30dd\u30c3\u30af\u6570\uff0c\u7e26\u8ef8\u306b\u8aa4\u5dee\u306e\u5024\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\n\u8aa4\u5dee\u306e\u6841\u306e\u5dee\u304c\u5927\u304d\u3059\u304e\u305f\u305f\u3081\uff0c\u5bfe\u6570\u3092\u3068\u3063\u3066\u3044\u307e\u3059\uff0e\n\u53b3\u5bc6\u306a\u8aa4\u5dee\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u5358\u8abf\u306b\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\uff0e\n\n\n### PCA\n\n\u53ef\u8996\u5316\u3057\u305f\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\n\n<img width=\"735\" alt=\"projection_vector.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/ddf13f2b-a1c5-52a1-1460-b6ccd2b6c563.png\">\n\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\n\n<img width=\"720\" alt=\"decode_pca.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/8829b870-21fd-9748-087e-ab415bdd71af.png\">\n\n\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u306f\uff0c\u56fa\u6709\u5024\u306e\u5927\u304d\u3044\u9806\u756a\u306b\uff0c\u5bfe\u5fdc\u3059\u308b\u30d9\u30af\u30c8\u30eb\u309210\u500b\u9078\u629e\u3057\u307e\u3057\u305f\uff0e\n\u5de6\u4e0a\u306e\u5c04\u5f71\u30d9\u30af\u30c8\u30eb\u304c\u6700\u3082\u5206\u6563\u306e\u5927\u304d\u3044\u7b2c1\u4e3b\u6210\u5206\u3078\u5c04\u5f71\u3057\u307e\u3059\uff0e\n\u5fa9\u53f7\u5316\u3057\u305f\u753b\u50cf\u306f\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u540c\u69d8\uff0c\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n# \u304a\u308f\u308a\u306b\n\n\u81ea\u5df1\u7b26\u53f7\u5316\u5668\u304a\u3088\u3073\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u3063\u3066\u6b21\u5143\u3092\u5727\u7e2e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n"}