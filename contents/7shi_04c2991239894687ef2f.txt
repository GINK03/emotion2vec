{"context": "\u30d1\u30fc\u30b5\u30fc\u4f5c\u308a\u306e\u7df4\u7fd2\u3068\u3057\u3066F#\u3067JSON\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u203b \u7df4\u7fd2\u3068\u3057\u3066\u4f5c\u308b\u306e\u304c\u76ee\u7684\u306e\u305f\u3081\u65e2\u5b58\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u30fc\u3092\u5229\u7528\u3057\u305f\u8a18\u4e8b\u3067\u3059\u3002\n\n\nHAR\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u62bd\u51fa\u3059\u308b 2016.12.27\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u610f\u8b58\u3057\u305f\u518d\u5e30\u4e0b\u964d\u30d1\u30fc\u30b5\u30fc\u3092\u624b\u66f8\u304d\u3057\u307e\u3059\u3002\u8a73\u7d30\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\nJava \u518d\u5e30\u4e0b\u964d\u69cb\u6587\u89e3\u6790 \u8d85\u5165\u9580 2016.05.16\n\nJava \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2016.05.12\n\nJava \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2 2016.05.14\n\nC++11 \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2015.11.27\n\nC++11 \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2 2015.11.30\n\nHaskell \u69cb\u6587\u89e3\u6790 \u8d85\u5165\u9580 2015.07.31\n\n\n\u7c21\u6613\u30d1\u30fc\u30b5\u30fc\n\u6c4e\u7528\u306e\u7c21\u6613\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\u95a2\u6570\u540d\u306f Parsec \u306b\u4f3c\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\n\n1\u6587\u5b57\u8aad\u307f\u53d6\u308a\n\u4efb\u610f\u306e\u6587\u5b57\u30921\u6587\u5b57\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u7d42\u7aef\u306a\u3089\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\nJSONParser.fsx\nopen System\nopen System.IO\n\nlet parseTest parser src =\n    use sr = new StringReader(src)\n    try\n        printfn \"%A\" (parser sr)\n    with e ->\n        printfn \"%s\" e.Message\n\nlet anyChar (tr:TextReader) =\n    let ch = tr.Read()\n    if ch >= 0 then char ch else\n    failwith \"anyChar: unexpected end of input\"\n\nparseTest anyChar \"abc\"\nparseTest anyChar \"\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n'a'\nanyChar: unexpected end of input\n\n\n\n\u9023\u7d9a\u8aad\u307f\u53d6\u308a\n\u8907\u6570\u306e\u30d1\u30fc\u30b5\u30fc\u3092\u30ea\u30b9\u30c8\u3067\u8868\u3057\u3066\u9023\u7d9a\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet plist list tr = [for p in list -> p tr]\n\nparseTest (plist [anyChar; anyChar]) \"abc\"\nparseTest (plist [anyChar; anyChar]) \"a\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n['a'; 'b']\nanyChar: unexpected end of input\n\n\n\n\u6587\u5b57\u78ba\u8a8d\n\u73fe\u5728\u4f4d\u7f6e\u3092\u79fb\u52d5\u305b\u305a\u306b\u6587\u5b57\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u7d42\u7aef\u306a\u3089\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet peek (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch >= 0 then char ch else\n    failwith \"peek: unexpected end of input\"\n\nparseTest (plist [anyChar; peek; anyChar]) \"abc\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n['a'; 'b'; 'b']\n\n\n\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u304b\u78ba\u8a8d\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u3069\u308c\u304b\u306b\u8a72\u5f53\u3059\u308c\u3070\u73fe\u5728\u4f4d\u7f6e\u3092\u9032\u3081\u3066 true \u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 false \u3092\u8fd4\u3057\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet isOneOf (s:string) (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch = -1 || s.IndexOf(char ch) < 0 then false else\n    tr.Read() |> ignore\n    true\n\nparseTest (isOneOf \"ab\") \"abc\"\nparseTest (isOneOf \"ab\") \"def\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u8aad\u307f\u53d6\u308a\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u3069\u308c\u304b\u306b\u8a72\u5f53\u3059\u308c\u3070\u8aad\u307f\u53d6\u3063\u3066\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet oneOf (s:string) (tr:TextReader) =\n    let ch = tr.Peek()\n    if isOneOf s tr then char ch else\n    failwith <| sprintf \"oneOf: '%c' is not in \\\"%s\\\"\" (char ch) s\n\nparseTest (oneOf \"ab\") \"abc\"\nparseTest (oneOf \"ab\") \"def\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n'a'\noneOf: 'd' is not in \"ab\"\n\n\n\n\u6761\u4ef6\u306b\u5408\u3046\u9650\u308a\u8aad\u307f\u7d9a\u3051\u308b\n\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u5408\u3046\u9650\u308a\u6587\u5b57\u5217\u3092\u8aad\u307f\u7d9a\u3051\u307e\u3059\u30021\u6587\u5b57\u3082\u5408\u81f4\u3057\u306a\u3051\u308c\u3070\u7a7a\u767d\u304c\u8fd4\u308b\u305f\u3081\u4f8b\u5916\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet many f (tr:TextReader) =\n    use sw = new StringWriter()\n    let rec g() =\n        let ch = tr.Peek()\n        if ch >= 0 && f (char ch) then\n            sw.Write(char ch)\n            tr.Read() |> ignore\n            g()\n    g()\n    sw.ToString()\n\nparseTest (many Char.IsDigit) \"123abc\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\"123\"\n\n\n\n\u7a7a\u767d\u306e\u8aad\u307f\u98db\u3070\u3057\n\u7a7a\u767d\u3092\u8aad\u307f\u98db\u3070\u3057\u307e\u3059\u3002\u30d1\u30fc\u30b5\u30fc\u3092\u7d50\u5408\u3059\u308b\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet isSpace (ch:char) = \" \\r\\n\\t\".IndexOf ch >= 0\n\nlet rec spaces (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch >= 0 && isSpace (char ch) then\n        tr.Read() |> ignore\n        spaces tr\n\nlet (@>>) a b = fun tr -> a tr |> ignore; b tr\nlet (@<<) a b = fun tr -> let r = a tr in b tr |> ignore; r\n\nparseTest (spaces @>> anyChar) \"   123\"\nparseTest (plist [anyChar @<< spaces; anyChar]) \"1   23\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n'1'\n['1'; '2']\n\n\n@>> \u3084 @<< \u306f\u8a55\u4fa1\u9806\u3092\u8868\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u8a55\u4fa1\u9806\u306f\u3069\u3061\u3089\u3082\u300c\u5de6\u2192\u53f3\u300d\u3067\u3059\u3002\u7247\u65b9\u306e\u623b\u308a\u5024\u306f\u6368\u3066\u3066\u3001\u7247\u65b9\u306e\u623b\u308a\u5024\u3060\u3051\u3092\u6b8b\u3057\u307e\u3059\uff08\u6f14\u7b97\u5b50\u3092\u77e2\u5370\u3068\u898b\u306a\u3057\u305f\u6642\u306e\u6307\u3059\u5148\u306e\u95a2\u6570\u304c\u6b8b\u3059\u5bfe\u8c61\uff09\u3002\n\nJSON\u30d1\u30fc\u30b5\u30fc\n\u57fa\u790e\u7684\u306a\u30d1\u30fc\u30b5\u30fc\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u5229\u7528\u3057\u3066JSON\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u6587\u5b57\u5217\u306e\u8aad\u307f\u53d6\u308a\n\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u307e\u305f\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307e\u308c\u305f\u6587\u5b57\u5217\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u51e6\u7406\u304c\u3084\u3084\u8907\u96d1\u3067\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonHex tr =\n    match anyChar tr with\n    | ch when '0' <= ch && ch <= '9' -> int ch - int '0'\n    | ch when 'A' <= ch && ch <= 'F' -> int ch - int 'A' + 10\n    | ch when 'a' <= ch && ch <= 'f' -> int ch - int 'a' + 10\n    | ch -> failwith <| sprintf \"hexChar: '%c' is not hex char\" ch\n\nlet jsonUnescape tr =\n    match anyChar tr with\n    | 'b' -> '\\b'\n    | 't' -> '\\t'\n    | 'n' -> '\\n'\n    | 'v' -> char 11\n    | 'f' -> char 12\n    | 'r' -> '\\r'\n    | 'x' -> (jsonHex tr <<<  4) ||| (jsonHex tr) |> char\n    | 'u' -> (jsonHex tr <<< 12) ||| (jsonHex tr <<< 8) |||\n             (jsonHex tr <<<  4) ||| (jsonHex tr) |> char\n    | ch  -> ch\n\nlet jsonString tr =\n    let start = oneOf \"'\\\"\" tr\n    use sw = new StringWriter()\n    let rec f() =\n        match anyChar tr with\n        | ch when ch = start -> ()\n        | '\\\\' -> sw.Write (jsonUnescape tr); f()\n        | ch -> sw.Write ch; f()\n    f()\n    sw.ToString()\n\nparseTest jsonString \"\\\"abc\\\"\"\nparseTest jsonString @\"'a\\\\b\\\\c'\"\nparseTest jsonString @\"'A\\x42\\u0043'\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\"abc\"\n\"a\\b\\c\"\n\"ABC\"\n\n\n\n\u6570\u5024\u306e\u8aad\u307f\u53d6\u308a\n\u6570\u5024\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u30de\u30a4\u30ca\u30b9\u3084\u5c0f\u6570\u70b9\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet rec jsonNumber tr =\n    if isOneOf \"-\" tr then \"-\" + jsonNumber tr else\n    let n1 = many Char.IsDigit tr\n    if not <| isOneOf \".\" tr then n1 else\n    n1 + \".\" + many Char.IsDigit tr\n\nparseTest jsonNumber \"123\"\nparseTest jsonNumber \"-3.14\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\"123\"\n\"-3.14\"\n\n\n\n\u5024\u306e\u8aad\u307f\u53d6\u308a\n\u6587\u5b57\u5217\u307e\u305f\u306f\u6570\u5024\u307e\u305f\u306f\u30b7\u30f3\u30dc\u30eb\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonValue tr =\n    match peek tr with\n    | '\\'' | '\"' -> jsonString tr\n    | '-'        -> jsonNumber tr\n    | ch when Char.IsDigit  ch -> jsonNumber tr\n    | ch when Char.IsLetter ch -> many Char.IsLetterOrDigit tr\n    | ch -> failwith <| sprintf \"jsonValue: unknown '%c'\" ch\n\nparseTest jsonValue \"abc 456\"\nparseTest jsonValue \"-1,2\"\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\"abc\"\n\"-1\"\n\n\n\n\u672c\u4f53\n\u672c\u4f53\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u5148\u306b\u5fc5\u8981\u306a\u90e8\u54c1\u3092\u63c3\u3048\u305f\u306e\u3067\u3001\u5272\u3068\u3042\u3063\u3055\u308a\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\n\u30b7\u30fc\u30b1\u30f3\u30b9\u3067JSON\u3092\u30d1\u30fc\u30b9\u3057\u306a\u304c\u3089\u3001\u9805\u76ee\u306b\u5f53\u305f\u308c\u3070 yield \u3057\u307e\u3059\u3002\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u4e2d\u3067\u518d\u5e30\u3059\u308b\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u30cd\u30b9\u30c8\u3057\u307e\u3059\u304c\u3001yield! \u3092\u4f7f\u3048\u3070\u5916\u304b\u3089\u306f\u30d5\u30e9\u30c3\u30c8\u306b\u898b\u3048\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonParser (tr:TextReader) =\n    let rec value stack = seq {\n        match (spaces @>> peek) tr with\n        | '{' ->\n            while isOneOf \"{,\" tr && (spaces @>> peek) tr <> '}' do\n                match peek tr with\n                | '\\'' | '\"' ->\n                    let name = (jsonString @<< spaces @<< oneOf \":\") tr\n                    let ch = (spaces @>> peek) tr\n                    match ch with\n                    | '{' | '[' ->\n                        yield name, ch, \"\", stack\n                        yield! value (name::stack)\n                        yield name, (if ch = '{' then '}' else ']'), \"\", stack\n                    | _ ->\n                        yield name, ':', jsonValue tr, stack\n                | ch ->\n                    failwith <| sprintf \"jsonParser: unknown '%c'\" ch\n            (spaces @<< oneOf \"}\") tr\n        | '[' ->\n            while isOneOf \"[,\" tr && (spaces @>> peek) tr <> ']' do\n                let ch = peek tr\n                match ch with\n                | '{' | '[' ->\n                    yield \"\", ch, \"\", stack\n                    yield! value (\"\"::stack)\n                    yield \"\", (if ch = '{' then '}' else ']'), \"\", stack\n                | _ ->\n                    yield \"\", ':', jsonValue tr, stack\n            (spaces @<< oneOf \"]\") tr\n        | ch ->\n            failwith <| sprintf \"jsonParser: unknown '%c'\" ch }\n    value []\n\nlet test = \"\"\"\n{\n  \"log\": {\n    \"version\": \"1.1\",\n    \"creator\": {\n      \"name\": \"Foo\",\n      \"version\": \"1.0\" },\n    \"pages\": [\n      { \"id\": \"page_1\", \"title\": \"Test1\" },\n      { \"id\": \"page_2\", \"title\": \"Test2\" }\n    ],\n    \"test\": [-1.23, null, [1, 2, 3]]\n  }\n}\n\"\"\"\n\ntry\n    use sr = new StringReader(test)\n    for (n, t, v, st) in jsonParser sr do\n        let v = if v.Length < 20 then v else v.[..19] + \"..\"\n        printfn \"%A %A %c %A\" (List.rev st) n t v\nwith e ->\n    printf \"%A\" e\n\n\n\n\u5b9f\u884c\u7d50\u679c\n[] \"log\" { \"\"\n[\"log\"] \"version\" : \"1.1\"\n[\"log\"] \"creator\" { \"\"\n[\"log\"; \"creator\"] \"name\" : \"Foo\"\n[\"log\"; \"creator\"] \"version\" : \"1.0\"\n[\"log\"] \"creator\" } \"\"\n[\"log\"] \"pages\" [ \"\"\n[\"log\"; \"pages\"] \"\" { \"\"\n[\"log\"; \"pages\"; \"\"] \"id\" : \"page_1\"\n[\"log\"; \"pages\"; \"\"] \"title\" : \"Test1\"\n[\"log\"; \"pages\"] \"\" } \"\"\n[\"log\"; \"pages\"] \"\" { \"\"\n[\"log\"; \"pages\"; \"\"] \"id\" : \"page_2\"\n[\"log\"; \"pages\"; \"\"] \"title\" : \"Test2\"\n[\"log\"; \"pages\"] \"\" } \"\"\n[\"log\"] \"pages\" ] \"\"\n[\"log\"] \"test\" [ \"\"\n[\"log\"; \"test\"] \"\" : \"-1.23\"\n[\"log\"; \"test\"] \"\" : \"null\"\n[\"log\"; \"test\"] \"\" [ \"\"\n[\"log\"; \"test\"; \"\"] \"\" : \"1\"\n[\"log\"; \"test\"; \"\"] \"\" : \"2\"\n[\"log\"; \"test\"; \"\"] \"\" : \"3\"\n[\"log\"; \"test\"] \"\" ] \"\"\n[\"log\"] \"test\" ] \"\"\n[] \"log\" } \"\"\n\n\n\u30cd\u30b9\u30c8\u3092\u628a\u63e1\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u9589\u3058\u30bf\u30b0\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u3067\u30e9\u30c3\u30d7\n\u3053\u306e\u307e\u307e\u3060\u3068\u8352\u524a\u308a\u3067\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u3001\u30af\u30e9\u30b9\u3067\u30e9\u30c3\u30d7\u3057\u3066\u691c\u7d22\u3068\u5b50\u8981\u7d20\u306e\u5217\u6319\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nJSONParser.fsx\uff08\u7d9a\u304d\uff09\ntype JSONParser(tr:TextReader) =\n    let en = (jsonParser tr).GetEnumerator()\n    member x.Dispose() = tr.Dispose()\n    interface IDisposable with\n        member x.Dispose() = x.Dispose()\n    member x.Current = en.Current\n    member x.Name  = let (n, _, _, _) = en.Current in n\n    member x.Type  = let (_, t, _, _) = en.Current in t\n    member x.Value = let (_, _, v, _) = en.Current in v\n    member x.Stack = let (_, _, _, s) = en.Current in s\n    member x.Read() = en.MoveNext()\n    member x.Find(name:string) =\n        let rec f() =\n            if not <| x.Read() then false\n            elif x.Name = name then true else f()\n        f()\n    member x.Each() =\n        let len = x.Stack.Length\n        let num = ref 0\n        seq {\n            while x.Read() && x.Stack.Length <> len do\n                yield !num\n                num := !num + 1 }\n\ntry\n    use jp = new JSONParser(new StringReader(test))\n    if jp.Find \"pages\" then\n        for i in jp.Each() do\n        for j in jp.Each() do\n        printfn \"%d:%d. %s = %s\" i j jp.Name jp.Value\nwith e ->\n    printf \"%A\" e\n\n\n\n\u5b9f\u884c\u7d50\u679c\n0:0. id = page_1\n0:1. title = Test1\n1:0. id = page_2\n1:1. title = Test2\n\n\n\u624b\u3063\u53d6\u308a\u65e9\u304f\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001\u3053\u308c\u3060\u3051\u3042\u308c\u3070\u5927\u62b5\u306e\u7528\u306f\u8db3\u308a\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u4ee5\u524d\u4f5c\u3063\u305fXML\u30d1\u30fc\u30b5\u30fc\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nPython\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0 2012.07.01\n\n\n\u307e\u3068\u3081\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n\nhttp://ideone.com/4V8oNB\n\n\u30d1\u30fc\u30b5\u30fc\u4f5c\u308a\u306e\u7df4\u7fd2\u3068\u3057\u3066F#\u3067JSON\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u203b \u7df4\u7fd2\u3068\u3057\u3066\u4f5c\u308b\u306e\u304c\u76ee\u7684\u306e\u305f\u3081\u65e2\u5b58\u306e\u30d1\u30fc\u30b5\u30fc\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u30fc\u3092\u5229\u7528\u3057\u305f\u8a18\u4e8b\u3067\u3059\u3002\n\n* [HAR\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u62bd\u51fa\u3059\u308b](http://qiita.com/7shi/items/2e08418eeb448a343723) 2016.12.27\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u610f\u8b58\u3057\u305f\u518d\u5e30\u4e0b\u964d\u30d1\u30fc\u30b5\u30fc\u3092\u624b\u66f8\u304d\u3057\u307e\u3059\u3002\u8a73\u7d30\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [Java \u518d\u5e30\u4e0b\u964d\u69cb\u6587\u89e3\u6790 \u8d85\u5165\u9580](http://qiita.com/7shi/items/64261a67081d49f941e3) 2016.05.16\n* [Java \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580](http://qiita.com/7shi/items/68228e19552c271bea81) 2016.05.12\n* [Java \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2](http://qiita.com/7shi/items/39a9ddffcc5bdf2c0142) 2016.05.14\n* [C++11 \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580](http://qiita.com/7shi/items/6a12160276a8db358e34) 2015.11.27\n* [C++11 \u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf \u8d85\u5165\u9580 2](http://qiita.com/7shi/items/f86f2f7ad68cfff1b399) 2015.11.30\n* [Haskell \u69cb\u6587\u89e3\u6790 \u8d85\u5165\u9580](http://qiita.com/7shi/items/b8c741e78a96ea2c10fe) 2015.07.31\n\n# \u7c21\u6613\u30d1\u30fc\u30b5\u30fc\n\n\u6c4e\u7528\u306e\u7c21\u6613\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\u95a2\u6570\u540d\u306f Parsec \u306b\u4f3c\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\n\n## 1\u6587\u5b57\u8aad\u307f\u53d6\u308a\n\n\u4efb\u610f\u306e\u6587\u5b57\u30921\u6587\u5b57\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u7d42\u7aef\u306a\u3089\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\nopen System\nopen System.IO\n\nlet parseTest parser src =\n    use sr = new StringReader(src)\n    try\n        printfn \"%A\" (parser sr)\n    with e ->\n        printfn \"%s\" e.Message\n\nlet anyChar (tr:TextReader) =\n    let ch = tr.Read()\n    if ch >= 0 then char ch else\n    failwith \"anyChar: unexpected end of input\"\n\nparseTest anyChar \"abc\"\nparseTest anyChar \"\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n'a'\nanyChar: unexpected end of input\n```\n\n## \u9023\u7d9a\u8aad\u307f\u53d6\u308a\n\n\u8907\u6570\u306e\u30d1\u30fc\u30b5\u30fc\u3092\u30ea\u30b9\u30c8\u3067\u8868\u3057\u3066\u9023\u7d9a\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet plist list tr = [for p in list -> p tr]\n\nparseTest (plist [anyChar; anyChar]) \"abc\"\nparseTest (plist [anyChar; anyChar]) \"a\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n['a'; 'b']\nanyChar: unexpected end of input\n```\n\n## \u6587\u5b57\u78ba\u8a8d\n\n\u73fe\u5728\u4f4d\u7f6e\u3092\u79fb\u52d5\u305b\u305a\u306b\u6587\u5b57\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u7d42\u7aef\u306a\u3089\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet peek (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch >= 0 then char ch else\n    failwith \"peek: unexpected end of input\"\n\nparseTest (plist [anyChar; peek; anyChar]) \"abc\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n['a'; 'b'; 'b']\n```\n\n## \u6307\u5b9a\u3057\u305f\u6587\u5b57\u304b\u78ba\u8a8d\n\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u3069\u308c\u304b\u306b\u8a72\u5f53\u3059\u308c\u3070\u73fe\u5728\u4f4d\u7f6e\u3092\u9032\u3081\u3066 `true` \u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 `false` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet isOneOf (s:string) (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch = -1 || s.IndexOf(char ch) < 0 then false else\n    tr.Read() |> ignore\n    true\n\nparseTest (isOneOf \"ab\") \"abc\"\nparseTest (isOneOf \"ab\") \"def\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n## \u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u8aad\u307f\u53d6\u308a\n\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u306e\u3069\u308c\u304b\u306b\u8a72\u5f53\u3059\u308c\u3070\u8aad\u307f\u53d6\u3063\u3066\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet oneOf (s:string) (tr:TextReader) =\n    let ch = tr.Peek()\n    if isOneOf s tr then char ch else\n    failwith <| sprintf \"oneOf: '%c' is not in \\\"%s\\\"\" (char ch) s\n\nparseTest (oneOf \"ab\") \"abc\"\nparseTest (oneOf \"ab\") \"def\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n'a'\noneOf: 'd' is not in \"ab\"\n```\n\n## \u6761\u4ef6\u306b\u5408\u3046\u9650\u308a\u8aad\u307f\u7d9a\u3051\u308b\n\n\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u5408\u3046\u9650\u308a\u6587\u5b57\u5217\u3092\u8aad\u307f\u7d9a\u3051\u307e\u3059\u30021\u6587\u5b57\u3082\u5408\u81f4\u3057\u306a\u3051\u308c\u3070\u7a7a\u767d\u304c\u8fd4\u308b\u305f\u3081\u4f8b\u5916\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet many f (tr:TextReader) =\n    use sw = new StringWriter()\n    let rec g() =\n        let ch = tr.Peek()\n        if ch >= 0 && f (char ch) then\n            sw.Write(char ch)\n            tr.Read() |> ignore\n            g()\n    g()\n    sw.ToString()\n\nparseTest (many Char.IsDigit) \"123abc\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n\"123\"\n```\n\n## \u7a7a\u767d\u306e\u8aad\u307f\u98db\u3070\u3057\n\n\u7a7a\u767d\u3092\u8aad\u307f\u98db\u3070\u3057\u307e\u3059\u3002\u30d1\u30fc\u30b5\u30fc\u3092\u7d50\u5408\u3059\u308b\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet isSpace (ch:char) = \" \\r\\n\\t\".IndexOf ch >= 0\n\nlet rec spaces (tr:TextReader) =\n    let ch = tr.Peek()\n    if ch >= 0 && isSpace (char ch) then\n        tr.Read() |> ignore\n        spaces tr\n\nlet (@>>) a b = fun tr -> a tr |> ignore; b tr\nlet (@<<) a b = fun tr -> let r = a tr in b tr |> ignore; r\n\nparseTest (spaces @>> anyChar) \"   123\"\nparseTest (plist [anyChar @<< spaces; anyChar]) \"1   23\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n'1'\n['1'; '2']\n```\n\n`@>>` \u3084 `@<<` \u306f\u8a55\u4fa1\u9806\u3092\u8868\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u8a55\u4fa1\u9806\u306f\u3069\u3061\u3089\u3082\u300c\u5de6\u2192\u53f3\u300d\u3067\u3059\u3002\u7247\u65b9\u306e\u623b\u308a\u5024\u306f\u6368\u3066\u3066\u3001\u7247\u65b9\u306e\u623b\u308a\u5024\u3060\u3051\u3092\u6b8b\u3057\u307e\u3059\uff08\u6f14\u7b97\u5b50\u3092\u77e2\u5370\u3068\u898b\u306a\u3057\u305f\u6642\u306e\u6307\u3059\u5148\u306e\u95a2\u6570\u304c\u6b8b\u3059\u5bfe\u8c61\uff09\u3002\n\n# JSON\u30d1\u30fc\u30b5\u30fc\n\n\u57fa\u790e\u7684\u306a\u30d1\u30fc\u30b5\u30fc\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u5f8c\u306f\u3053\u308c\u3092\u5229\u7528\u3057\u3066JSON\u30d1\u30fc\u30b5\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n## \u6587\u5b57\u5217\u306e\u8aad\u307f\u53d6\u308a\n\n\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u307e\u305f\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307e\u308c\u305f\u6587\u5b57\u5217\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u51e6\u7406\u304c\u3084\u3084\u8907\u96d1\u3067\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonHex tr =\n    match anyChar tr with\n    | ch when '0' <= ch && ch <= '9' -> int ch - int '0'\n    | ch when 'A' <= ch && ch <= 'F' -> int ch - int 'A' + 10\n    | ch when 'a' <= ch && ch <= 'f' -> int ch - int 'a' + 10\n    | ch -> failwith <| sprintf \"hexChar: '%c' is not hex char\" ch\n\nlet jsonUnescape tr =\n    match anyChar tr with\n    | 'b' -> '\\b'\n    | 't' -> '\\t'\n    | 'n' -> '\\n'\n    | 'v' -> char 11\n    | 'f' -> char 12\n    | 'r' -> '\\r'\n    | 'x' -> (jsonHex tr <<<  4) ||| (jsonHex tr) |> char\n    | 'u' -> (jsonHex tr <<< 12) ||| (jsonHex tr <<< 8) |||\n             (jsonHex tr <<<  4) ||| (jsonHex tr) |> char\n    | ch  -> ch\n\nlet jsonString tr =\n    let start = oneOf \"'\\\"\" tr\n    use sw = new StringWriter()\n    let rec f() =\n        match anyChar tr with\n        | ch when ch = start -> ()\n        | '\\\\' -> sw.Write (jsonUnescape tr); f()\n        | ch -> sw.Write ch; f()\n    f()\n    sw.ToString()\n\nparseTest jsonString \"\\\"abc\\\"\"\nparseTest jsonString @\"'a\\\\b\\\\c'\"\nparseTest jsonString @\"'A\\x42\\u0043'\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n\"abc\"\n\"a\\b\\c\"\n\"ABC\"\n```\n\n## \u6570\u5024\u306e\u8aad\u307f\u53d6\u308a\n\n\u6570\u5024\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u30de\u30a4\u30ca\u30b9\u3084\u5c0f\u6570\u70b9\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet rec jsonNumber tr =\n    if isOneOf \"-\" tr then \"-\" + jsonNumber tr else\n    let n1 = many Char.IsDigit tr\n    if not <| isOneOf \".\" tr then n1 else\n    n1 + \".\" + many Char.IsDigit tr\n\nparseTest jsonNumber \"123\"\nparseTest jsonNumber \"-3.14\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n\"123\"\n\"-3.14\"\n```\n\n## \u5024\u306e\u8aad\u307f\u53d6\u308a\n\n\u6587\u5b57\u5217\u307e\u305f\u306f\u6570\u5024\u307e\u305f\u306f\u30b7\u30f3\u30dc\u30eb\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonValue tr =\n    match peek tr with\n    | '\\'' | '\"' -> jsonString tr\n    | '-'        -> jsonNumber tr\n    | ch when Char.IsDigit  ch -> jsonNumber tr\n    | ch when Char.IsLetter ch -> many Char.IsLetterOrDigit tr\n    | ch -> failwith <| sprintf \"jsonValue: unknown '%c'\" ch\n\nparseTest jsonValue \"abc 456\"\nparseTest jsonValue \"-1,2\"\n```\n```text:\u5b9f\u884c\u7d50\u679c\n\"abc\"\n\"-1\"\n```\n\n## \u672c\u4f53\n\n\u672c\u4f53\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u5148\u306b\u5fc5\u8981\u306a\u90e8\u54c1\u3092\u63c3\u3048\u305f\u306e\u3067\u3001\u5272\u3068\u3042\u3063\u3055\u308a\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u3067JSON\u3092\u30d1\u30fc\u30b9\u3057\u306a\u304c\u3089\u3001\u9805\u76ee\u306b\u5f53\u305f\u308c\u3070 `yield` \u3057\u307e\u3059\u3002\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u4e2d\u3067\u518d\u5e30\u3059\u308b\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u30cd\u30b9\u30c8\u3057\u307e\u3059\u304c\u3001`yield!` \u3092\u4f7f\u3048\u3070\u5916\u304b\u3089\u306f\u30d5\u30e9\u30c3\u30c8\u306b\u898b\u3048\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\nlet jsonParser (tr:TextReader) =\n    let rec value stack = seq {\n        match (spaces @>> peek) tr with\n        | '{' ->\n            while isOneOf \"{,\" tr && (spaces @>> peek) tr <> '}' do\n                match peek tr with\n                | '\\'' | '\"' ->\n                    let name = (jsonString @<< spaces @<< oneOf \":\") tr\n                    let ch = (spaces @>> peek) tr\n                    match ch with\n                    | '{' | '[' ->\n                        yield name, ch, \"\", stack\n                        yield! value (name::stack)\n                        yield name, (if ch = '{' then '}' else ']'), \"\", stack\n                    | _ ->\n                        yield name, ':', jsonValue tr, stack\n                | ch ->\n                    failwith <| sprintf \"jsonParser: unknown '%c'\" ch\n            (spaces @<< oneOf \"}\") tr\n        | '[' ->\n            while isOneOf \"[,\" tr && (spaces @>> peek) tr <> ']' do\n                let ch = peek tr\n                match ch with\n                | '{' | '[' ->\n                    yield \"\", ch, \"\", stack\n                    yield! value (\"\"::stack)\n                    yield \"\", (if ch = '{' then '}' else ']'), \"\", stack\n                | _ ->\n                    yield \"\", ':', jsonValue tr, stack\n            (spaces @<< oneOf \"]\") tr\n        | ch ->\n            failwith <| sprintf \"jsonParser: unknown '%c'\" ch }\n    value []\n\nlet test = \"\"\"\n{\n  \"log\": {\n    \"version\": \"1.1\",\n    \"creator\": {\n      \"name\": \"Foo\",\n      \"version\": \"1.0\" },\n    \"pages\": [\n      { \"id\": \"page_1\", \"title\": \"Test1\" },\n      { \"id\": \"page_2\", \"title\": \"Test2\" }\n    ],\n    \"test\": [-1.23, null, [1, 2, 3]]\n  }\n}\n\"\"\"\n\ntry\n    use sr = new StringReader(test)\n    for (n, t, v, st) in jsonParser sr do\n        let v = if v.Length < 20 then v else v.[..19] + \"..\"\n        printfn \"%A %A %c %A\" (List.rev st) n t v\nwith e ->\n    printf \"%A\" e\n```\n```text:\u5b9f\u884c\u7d50\u679c\n[] \"log\" { \"\"\n[\"log\"] \"version\" : \"1.1\"\n[\"log\"] \"creator\" { \"\"\n[\"log\"; \"creator\"] \"name\" : \"Foo\"\n[\"log\"; \"creator\"] \"version\" : \"1.0\"\n[\"log\"] \"creator\" } \"\"\n[\"log\"] \"pages\" [ \"\"\n[\"log\"; \"pages\"] \"\" { \"\"\n[\"log\"; \"pages\"; \"\"] \"id\" : \"page_1\"\n[\"log\"; \"pages\"; \"\"] \"title\" : \"Test1\"\n[\"log\"; \"pages\"] \"\" } \"\"\n[\"log\"; \"pages\"] \"\" { \"\"\n[\"log\"; \"pages\"; \"\"] \"id\" : \"page_2\"\n[\"log\"; \"pages\"; \"\"] \"title\" : \"Test2\"\n[\"log\"; \"pages\"] \"\" } \"\"\n[\"log\"] \"pages\" ] \"\"\n[\"log\"] \"test\" [ \"\"\n[\"log\"; \"test\"] \"\" : \"-1.23\"\n[\"log\"; \"test\"] \"\" : \"null\"\n[\"log\"; \"test\"] \"\" [ \"\"\n[\"log\"; \"test\"; \"\"] \"\" : \"1\"\n[\"log\"; \"test\"; \"\"] \"\" : \"2\"\n[\"log\"; \"test\"; \"\"] \"\" : \"3\"\n[\"log\"; \"test\"] \"\" ] \"\"\n[\"log\"] \"test\" ] \"\"\n[] \"log\" } \"\"\n```\n\n\u30cd\u30b9\u30c8\u3092\u628a\u63e1\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u9589\u3058\u30bf\u30b0\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30af\u30e9\u30b9\u3067\u30e9\u30c3\u30d7\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u8352\u524a\u308a\u3067\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u3001\u30af\u30e9\u30b9\u3067\u30e9\u30c3\u30d7\u3057\u3066\u691c\u7d22\u3068\u5b50\u8981\u7d20\u306e\u5217\u6319\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```fsharp:JSONParser.fsx\uff08\u7d9a\u304d\uff09\ntype JSONParser(tr:TextReader) =\n    let en = (jsonParser tr).GetEnumerator()\n    member x.Dispose() = tr.Dispose()\n    interface IDisposable with\n        member x.Dispose() = x.Dispose()\n    member x.Current = en.Current\n    member x.Name  = let (n, _, _, _) = en.Current in n\n    member x.Type  = let (_, t, _, _) = en.Current in t\n    member x.Value = let (_, _, v, _) = en.Current in v\n    member x.Stack = let (_, _, _, s) = en.Current in s\n    member x.Read() = en.MoveNext()\n    member x.Find(name:string) =\n        let rec f() =\n            if not <| x.Read() then false\n            elif x.Name = name then true else f()\n        f()\n    member x.Each() =\n        let len = x.Stack.Length\n        let num = ref 0\n        seq {\n            while x.Read() && x.Stack.Length <> len do\n                yield !num\n                num := !num + 1 }\n\ntry\n    use jp = new JSONParser(new StringReader(test))\n    if jp.Find \"pages\" then\n        for i in jp.Each() do\n        for j in jp.Each() do\n        printfn \"%d:%d. %s = %s\" i j jp.Name jp.Value\nwith e ->\n    printf \"%A\" e\n```\n```text:\u5b9f\u884c\u7d50\u679c\n0:0. id = page_1\n0:1. title = Test1\n1:0. id = page_2\n1:1. title = Test2\n```\n\n\u624b\u3063\u53d6\u308a\u65e9\u304f\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u3001\u3053\u308c\u3060\u3051\u3042\u308c\u3070\u5927\u62b5\u306e\u7528\u306f\u8db3\u308a\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u4ee5\u524d\u4f5c\u3063\u305fXML\u30d1\u30fc\u30b5\u30fc\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n* [Python\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0](http://7shi.hateblo.jp/entry/2012/07/01/223222) 2012.07.01\n\n# \u307e\u3068\u3081\n\n\u30b3\u30fc\u30c9\u5168\u4f53\u306f\u4ee5\u4e0b\u306b\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n* http://ideone.com/4V8oNB\n", "tags": ["F#", "JSON"]}