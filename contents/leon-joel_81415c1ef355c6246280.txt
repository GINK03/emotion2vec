{"tags": ["C++", "C++11", "C++14"], "context": "\u4e45\u3057\u3076\u308a\u306bC++\uff08VC14, VisualStudio2015\uff09\u3092\u89e6\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u6700\u8fd1\u306eC++\u306b\u3064\u3044\u3066\u304a\u52c9\u5f37\u3057\u3066\u307f\u305f\u3002\uff08VisualStudio\u306eVC++11,14,17\u6a5f\u80fd\u5bfe\u5fdc\u8868\uff09\n\u300c\u4f7f\u3044\u305d\u3046\u300d\u3001\u300c\u4f7f\u3046\u3068\u3044\u3044\u3053\u3068\u3042\u308b\u304b\u3082\u300d\u3001\u300c\u5c11\u306a\u304f\u3068\u3082\u8aad\u3081\u308b\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u304a\u304d\u305f\u3044\u300d\u3068\u3044\u3046\u65b0\u6a5f\u80fd\u3092\u4e2d\u5fc3\u306b\u5217\u6319\u3057\u3066\u304a\u304f\u3002\n\u203b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5404\u53c2\u7167\u30da\u30fc\u30b8\u3088\u308a\u5f15\u7528\n\nC++11\n\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u6a5f\u80fd\u306f\u3053\u3053\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3002\n\u4eca\u3059\u3050\u306b\u4f7f\u3044\u305f\u3044C++11\u306e\u65b0\u6a5f\u80fd\n\nnullptr\nC++11 \u3067\u306f NULL \u3067\u306f\u306a\u304f nullptr \u3092\u4f7f\u3046\n\nnullptr\u306e\u8a18\u8ff0\u30d1\u30bf\u30fc\u30f3\u3092\u3044\u304f\u3064\u304b\u6319\u3052\u308b\n// \u3053\u3046\u3067\u306f\u306a\u304f\nsetDescription(buffer, (void*)NULL);\n// \u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3079\u304d\nsetDescription(buffer, nullptr);\n\n// \u30dd\u30a4\u30f3\u30bf\u306e\u521d\u671f\u5316\nchar* p2 = nullptr;\n\n// \u6761\u4ef6\u5f0f\nchar* a;\nif (a == nullptr){\n    :\n}\n\n\n\n\u7d71\u4e00\u521d\u671f\u5316\u8a18\u6cd5(Uniform Initialization)\nC++11 Universal Initialization \u306f\u3001\u3044\u3064\u3067\u3082\u4f7f\u3046\u3079\u304d\u306a\u306e\u304b\n\u3053\u3093\u306a\u611f\u3058\u3067C#\u3063\u307d\u304f\u66f8\u3051\u308b\u3002\nint x { 3 };\nint a[] { 0, 1, 2, 3 };\nstruct S1 { int a, b; } s { 0, 1 };\nstd::vector<int> v { 0, 1, 2, 3 };\n\nmap\u306e\u521d\u671f\u5316\u3082\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3002\nmap<string, int> m {{\"aaa\", 10}, {\"bbb\", 20}, {\"ccc\", 30}};\n\n\n\u7bc4\u56f2\u30d9\u30fc\u30b9\u306e for-loop\n\u7bc4\u56f2\u30d9\u30fc\u30b9 for \u30eb\u30fc\u30d7\n\n\u578b\u63a8\u6e2cauto\u3092\u4f7f\u3046\u3068\u4fbf\u5229\nstd::vector<int> v{1, 2, 3, 4, 5, 6, 7};\nfor(auto x : v) {\n  std::cout << x << \"\\n\";\n}\n\n\n\n\u53c2\u7167\u3092\u4f7f\u3048\u3070\u8981\u7d20\u306e\u66f8\u304d\u63db\u3048\u3082\u51fa\u6765\u308b\nint ar[] = {3, 1, 4, 1, 5, 9};\nfor(int &x : ar) {\n  if( x == 1 )            // \u5024\u304c\uff11\u3060\u3063\u305f\u3089\n    x = 123;           // 123 \u306b\u66f8\u304d\u63db\u3048\u308b\n}\n\n\n\n\u53f3\u8fba\u5024\u53c2\u7167\n\u5927\u30c7\u30fc\u30bf\u3092\u6271\u3046\u30af\u30e9\u30b9\u3092\u81ea\u4f5c\u3059\u308b\u6642\u306b\u306f\u3001\uff08\u53ef\u80fd\u306a\u3089\uff09\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3079\u304d\u304b\u3082\u3002\nC++0x \u306e\u53f3\u8fba\u5024\u53c2\u7167\u304c\u3053\u3093\u306a\u306b\u96e3\u3057\u3044\u308f\u3051\u304c\u306a\u3044\n\u672c\u5f53\u306f\u6016\u304f\u306a\u3044\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\nC++\u306e\u30e0\u30fc\u30d6\u3068\u5b8c\u5168\u8ee2\u9001\u3092\u77e5\u308b\nC++\u9ad8\u901f\u5316 \u8a73\u7d30\u306a\u5b9f\u9a13\u304c\u7d20\u6674\u3089\u3057\u3059\u304e\u308b(^^)\n\n\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\nPointer(Pointer&& f) {\n    this->ptr = f.ptr;    // \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\n    f.ptr = nullptr;      // \u30e0\u30fc\u30d6\u5143\u306fnullptr\u3067\u30af\u30ea\u30a2\n}\nPointer& operator=(Pointer&& rhs) {\n    if (this == &rhs) return;\n    this->ptr = rhs.ptr;  // \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\n    rhs.ptr = nullptr;      // \u30e0\u30fc\u30d6\u5143\u306fnullptr\u3067\u30af\u30ea\u30a2\n    return *this;\n}\n\n\n\n\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf unique_ptr<T> shared_ptr<T> weak_ptr<T>\n\n\u975e\u5e38\u306b\u6709\u7528\u3002\u3067\u3082\u3001\u6027\u8cea\u3092\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3068\u9006\u306b\u5371\u967a\u3002\nC++11\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u5165\u9580\n\n\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\ntypedef \u306f C++11 \u3067\u306f\u30aa\u30ef\u30b3\u30f3\ntypedef void (*f)(int, char);    // typedef\u306f\u5206\u304b\u308a\u3065\u3089\u3044\nusing f = void (*)(int, char);   // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u306f\u30ca\u30a4\u30b9\uff01 C#\u3063\u307d\u3044\u3002 \n\n// \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3068\u306e\u76f8\u6027\u3082Good!\ntemplate<class Value>\nusing dict = std::map<std::string, Value>;\n\n\n\u95a2\u6570\u306edefault\uff0fdelete\u5ba3\u8a00\n\u95a2\u6570\u306edefault\uff0fdelete\u5ba3\u8a00\n\n\u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3092\u300e\u5b9f\u88c5\u306fdefault\u306e\u307e\u307e\u300fvirtual/inline\u5316\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u308a\nclass X {\npublic:\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u6319\u52d5\u3092\u3059\u308b\u3001\n  // \u4eee\u60f3\u95a2\u6570\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n  virtual ~X() = default;\n\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u6319\u52d5\u3092\u3059\u308b\u3001\n  // \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306e\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n  inline X(const X&) = default;\n};\n\n\n\n\u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3092delete\u3059\u308b\u3053\u3068\u3082\nclass X {\npublic:\n  // \u30b3\u30d4\u30fc\u3092\u7981\u6b62\u3057\u3001\u30e0\u30fc\u30d6\u3092\u8a31\u53ef\u3059\u308b\n  X(const X&) = delete;\n  X& operator=(const X&) = delete;\n\n  // \u7279\u6b8a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3082\u3057\u304f\u306fdelete\u3057\u305f\u5834\u5408\u3001\n  // \u305d\u308c\u4ee5\u5916\u306e\u7279\u6b8a\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3082\u3057\u304f\u306fdefault\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u306a\u3044\n  X(X&&) = default;\n  X() = default;\n  X& operator=(X&&) = default;\n};\n\nint main()\n{\n  X x1;\n//X x2 = x1;  // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff01X\u306e\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306fdelete\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\n  X x3 = X(); // OK : \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u306f\u3067\u304d\u308b\n\n  X x4;\n//x4 = x1;    // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff01X\u306e\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306fdelete\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\n\n  X x5;\n  x5 = X();   // OK : \u30e0\u30fc\u30d6\u4ee3\u5165\u306f\u3067\u304d\u308b\n}\n\n\n\n\u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff08Variadic Templates\uff09\n\u53ef\u5909\u5024\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(MSDN)\n\n\u53ef\u5909\u9577\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\ntemplate <typename... Arguments>\nint fname(Arguments... args);\n\n\n\n\u5177\u4f53\u7684\u306a\u4f8b\ntemplate<typename... Arguments>\n// const\u3084&, &&, * \u306a\u3069\u306e\u4fee\u98fe\u3082\u53ef\u80fd\nvoid tfunc(const Arguments&... args)\n{\n    // sizeof...\u3067\u5f15\u6570\u306e\u500b\u6570\u3082\u53d6\u5f97\u51fa\u6765\u308b\n    const unsigned numargs = sizeof...(Arguments);\n    X xobj[numargs]; // array of some previously defined type X\n\n    // args... \u3067\u4ed6\u306e\u95a2\u6570\u306b\u6e21\u305b\u308b\n    helper_func(xobj, args...);\n}\n\n\n\nC++14\n\nconstexpr \u203bconstant expression (\u5b9a\u6570\u5f0f)\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u51e6\u7406\u3002\nC++11\u304b\u3089\u5c0e\u5165\u3055\u308c\u3001C++14\u3067\u5927\u5e45\u306b\u5236\u9650\u304c\u7de9\u548c\u3055\u308c\u305f\u3002\u304c\u3001VC14\u306f\u307e\u3060C++11\u76f8\u5f53\u306e\u6a5f\u80fd\u3057\u304b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\uff08VisualStudio\u306eVC++11,14,17\u6a5f\u80fd\u5bfe\u5fdc\u8868\uff09\nconstexpr\u95a2\u6570\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u51e6\u7406\u3002\u3053\u308c\u306f\u3044\u3044\u3002\u5b9f\u884c\u6642\u304c\u971e\u3093\u3067\u898b\u3048\u308b\u3002cpu\u306e\u5b0c\u58f0\u304c\u805e\u3053\u3048\u3066\u304d\u305d\u3046\u3060 \nconstexpr\u6307\u5b9a\u306e\u5909\u6570 \uff1d \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\n\nconstexpr\u6307\u5b9a\u306e\u5909\u6570\nconstexpr unsigned N = 10; // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306f\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u4f7f\u7528\u53ef\u80fd\nstd::array<int, N> arr = {{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }};\n\n\nconstexpr \u6307\u5b9a\u306e\u95a2\u6570 \uff1d \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\uff08\u3082\uff09\u547c\u51fa\u53ef\u80fd\n\nconstexpr\u95a2\u6570\ntemplate<typename T>\nconstexpr T square(T const& t) { return t * t; }\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nconstexpr int s = square(16);\nstatic_assert(s == 256, \"\");\n\n\nconstexpr\u95a2\u6570\u306e\u5236\u9650\u7de9\u548c \u203bVC14(VS2015)\u306f\u672a\u5bfe\u5fdc\n\nVC14(VS2015)\u3067\u306f\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\ntemplate < typename T >\nconstexpr T sqrt(T s) const\n{\n    T x = s / 2.0;  // [VC14] error C3250: 'x': \u5ba3\u8a00\u306f 'constexpr' \u95a2\u6570\u672c\u4f53\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\n    T prev = 0.0;   // [VC14] \u540c\u4e0a\n    :\n}\n\n\nconstexpr\n\n\u30e9\u30e0\u30c0\u5f0f\nC++14\u3067\u6a5f\u80fd\u5f37\u5316\u3002\nC++14 \u306e\u30e9\u30e0\u30c0\u5f0f \u5b8c\u5168\u89e3\u8aac\n\n\u305d\u306e\u4ed6\u53c2\u8003\u30da\u30fc\u30b8\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306e C++11/C++14\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u3058\u3083\u306a\u304f\u3066\u3082\u305f\u3081\u306b\u306a\u308b\u3002\n\u4e45\u3057\u3076\u308a\u306bC++\uff08VC14, VisualStudio2015\uff09\u3092\u89e6\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u6700\u8fd1\u306eC++\u306b\u3064\u3044\u3066\u304a\u52c9\u5f37\u3057\u3066\u307f\u305f\u3002\uff08[VisualStudio\u306eVC++11,14,17\u6a5f\u80fd\u5bfe\u5fdc\u8868](https://msdn.microsoft.com/ja-jp/library/hh567368.aspx)\uff09\n\u300c\u4f7f\u3044\u305d\u3046\u300d\u3001\u300c\u4f7f\u3046\u3068\u3044\u3044\u3053\u3068\u3042\u308b\u304b\u3082\u300d\u3001\u300c\u5c11\u306a\u304f\u3068\u3082\u8aad\u3081\u308b\u3088\u3046\u306b\u306f\u306a\u3063\u3066\u304a\u304d\u305f\u3044\u300d\u3068\u3044\u3046\u65b0\u6a5f\u80fd\u3092\u4e2d\u5fc3\u306b\u5217\u6319\u3057\u3066\u304a\u304f\u3002\n\n\u203b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5404\u53c2\u7167\u30da\u30fc\u30b8\u3088\u308a\u5f15\u7528\n\n## C++11\n\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u6a5f\u80fd\u306f\u3053\u3053\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3002\n[\u4eca\u3059\u3050\u306b\u4f7f\u3044\u305f\u3044C++11\u306e\u65b0\u6a5f\u80fd](http://minus9d.hatenablog.com/entry/20130815/1376557665)\n\n### nullptr\n\n[C++11 \u3067\u306f NULL \u3067\u306f\u306a\u304f nullptr \u3092\u4f7f\u3046](http://program.station.ez-net.jp/special/handbook/cpp/syntax/nullptr.asp)\n\n```c++:nullptr\u306e\u8a18\u8ff0\u30d1\u30bf\u30fc\u30f3\u3092\u3044\u304f\u3064\u304b\u6319\u3052\u308b\n// \u3053\u3046\u3067\u306f\u306a\u304f\nsetDescription(buffer, (void*)NULL);\n// \u3053\u306e\u3088\u3046\u306b\u66f8\u304f\u3079\u304d\nsetDescription(buffer, nullptr);\n\n// \u30dd\u30a4\u30f3\u30bf\u306e\u521d\u671f\u5316\nchar* p2 = nullptr;\n\n// \u6761\u4ef6\u5f0f\nchar* a;\nif (a == nullptr){\n\t:\n}\n```\n\n### \u7d71\u4e00\u521d\u671f\u5316\u8a18\u6cd5(Uniform Initialization)\n\n[C++11 Universal Initialization \u306f\u3001\u3044\u3064\u3067\u3082\u4f7f\u3046\u3079\u304d\u306a\u306e\u304b](http://qiita.com/h2suzuki/items/d033679afde821d04af8)\n\n\u3053\u3093\u306a\u611f\u3058\u3067C#\u3063\u307d\u304f\u66f8\u3051\u308b\u3002\n\n```c++\nint x { 3 };\nint a[] { 0, 1, 2, 3 };\nstruct S1 { int a, b; } s { 0, 1 };\nstd::vector<int> v { 0, 1, 2, 3 };\n```\n\nmap\u306e\u521d\u671f\u5316\u3082\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3002\n\n```c++\nmap<string, int> m {{\"aaa\", 10}, {\"bbb\", 20}, {\"ccc\", 30}};\n```\n\n### \u7bc4\u56f2\u30d9\u30fc\u30b9\u306e for-loop\n\n[\u7bc4\u56f2\u30d9\u30fc\u30b9 for \u30eb\u30fc\u30d7](http://vivi.dyndns.org/tech/cpp/range-for.html)\n\n```c++:\u578b\u63a8\u6e2cauto\u3092\u4f7f\u3046\u3068\u4fbf\u5229\nstd::vector<int> v{1, 2, 3, 4, 5, 6, 7};\nfor(auto x : v) {\n  std::cout << x << \"\\n\";\n}\n```\n\n```c++:\u53c2\u7167\u3092\u4f7f\u3048\u3070\u8981\u7d20\u306e\u66f8\u304d\u63db\u3048\u3082\u51fa\u6765\u308b\nint ar[] = {3, 1, 4, 1, 5, 9};\nfor(int &x : ar) {\n  if( x == 1 )            // \u5024\u304c\uff11\u3060\u3063\u305f\u3089\n    x = 123;           // 123 \u306b\u66f8\u304d\u63db\u3048\u308b\n}\n```\n\n### \u53f3\u8fba\u5024\u53c2\u7167\n\u5927\u30c7\u30fc\u30bf\u3092\u6271\u3046\u30af\u30e9\u30b9\u3092\u81ea\u4f5c\u3059\u308b\u6642\u306b\u306f\u3001\uff08\u53ef\u80fd\u306a\u3089\uff09\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3079\u304d\u304b\u3082\u3002\n\n[C++0x \u306e\u53f3\u8fba\u5024\u53c2\u7167\u304c\u3053\u3093\u306a\u306b\u96e3\u3057\u3044\u308f\u3051\u304c\u306a\u3044](http://d.hatena.ne.jp/osyo-manga/20101117/1289958984)\n[\u672c\u5f53\u306f\u6016\u304f\u306a\u3044\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9](http://yohhoy.hatenablog.jp/entry/2012/12/15/120839)\n[C++\u306e\u30e0\u30fc\u30d6\u3068\u5b8c\u5168\u8ee2\u9001\u3092\u77e5\u308b](http://proc-cpuinfo.fixstars.com/2016/03/c.html)\n[C++\u9ad8\u901f\u5316](https://heavywatal.github.io/cxx/speed.html) \u8a73\u7d30\u306a\u5b9f\u9a13\u304c\u7d20\u6674\u3089\u3057\u3059\u304e\u308b(^^)\n\n```c++:\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\nPointer(Pointer&& f) {\n    this->ptr = f.ptr;    // \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\n    f.ptr = nullptr;      // \u30e0\u30fc\u30d6\u5143\u306fnullptr\u3067\u30af\u30ea\u30a2\n}\nPointer& operator=(Pointer&& rhs) {\n    if (this == &rhs) return;\n    this->ptr = rhs.ptr;  // \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\n    rhs.ptr = nullptr;      // \u30e0\u30fc\u30d6\u5143\u306fnullptr\u3067\u30af\u30ea\u30a2\n    return *this;\n}\n```\n\n### \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf ```unique_ptr<T> shared_ptr<T> weak_ptr<T>```\n\n\u975e\u5e38\u306b\u6709\u7528\u3002\u3067\u3082\u3001\u6027\u8cea\u3092\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3068\u9006\u306b\u5371\u967a\u3002\n[C++11\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u5165\u9580](http://qiita.com/hmito/items/db3b14917120b285112f)\n\n### \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\n[typedef \u306f C++11 \u3067\u306f\u30aa\u30ef\u30b3\u30f3](http://qiita.com/Linda_pp/items/44a67c64c14cba00eef1)\n\n```c++\ntypedef void (*f)(int, char);    // typedef\u306f\u5206\u304b\u308a\u3065\u3089\u3044\nusing f = void (*)(int, char);   // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u306f\u30ca\u30a4\u30b9\uff01 C#\u3063\u307d\u3044\u3002 \n```\n\n```c++\n// \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3068\u306e\u76f8\u6027\u3082Good!\ntemplate<class Value>\nusing dict = std::map<std::string, Value>;\n```\n\n### \u95a2\u6570\u306edefault\uff0fdelete\u5ba3\u8a00\n\n[\u95a2\u6570\u306edefault\uff0fdelete\u5ba3\u8a00](http://cpprefjp.github.io/lang/cpp11/defaulted_and_deleted_functions.html)\n\n```c++:\u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3092\u300e\u5b9f\u88c5\u306fdefault\u306e\u307e\u307e\u300fvirtual/inline\u5316\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305f\u308a\nclass X {\npublic:\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u6319\u52d5\u3092\u3059\u308b\u3001\n  // \u4eee\u60f3\u95a2\u6570\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n  virtual ~X() = default;\n\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u6319\u52d5\u3092\u3059\u308b\u3001\n  // \u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306e\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n  inline X(const X&) = default;\n};\n```\n\n```c++:\u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u3092delete\u3059\u308b\u3053\u3068\u3082\nclass X {\npublic:\n  // \u30b3\u30d4\u30fc\u3092\u7981\u6b62\u3057\u3001\u30e0\u30fc\u30d6\u3092\u8a31\u53ef\u3059\u308b\n  X(const X&) = delete;\n  X& operator=(const X&) = delete;\n\n  // \u7279\u6b8a\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3082\u3057\u304f\u306fdelete\u3057\u305f\u5834\u5408\u3001\n  // \u305d\u308c\u4ee5\u5916\u306e\u7279\u6b8a\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3082\u3057\u304f\u306fdefault\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\n  // \u6697\u9ed9\u5b9a\u7fa9\u3055\u308c\u306a\u3044\n  X(X&&) = default;\n  X() = default;\n  X& operator=(X&&) = default;\n};\n\nint main()\n{\n  X x1;\n//X x2 = x1;  // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff01X\u306e\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306fdelete\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\n  X x3 = X(); // OK : \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u306f\u3067\u304d\u308b\n\n  X x4;\n//x4 = x1;    // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff01X\u306e\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306fdelete\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\n\n  X x5;\n  x5 = X();   // OK : \u30e0\u30fc\u30d6\u4ee3\u5165\u306f\u3067\u304d\u308b\n}\n```\n\n### \u53ef\u5909\u500b\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff08Variadic Templates\uff09\n\n[\u53ef\u5909\u5024\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(MSDN)](https://msdn.microsoft.com/ja-jp/library/dn439779.aspx)\n\n```c++:\u53ef\u5909\u9577\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\ntemplate <typename... Arguments>\nint fname(Arguments... args);\n```\n\n```c++:\u5177\u4f53\u7684\u306a\u4f8b\ntemplate<typename... Arguments>\n// const\u3084&, &&, * \u306a\u3069\u306e\u4fee\u98fe\u3082\u53ef\u80fd\nvoid tfunc(const Arguments&... args)\n{\n    // sizeof...\u3067\u5f15\u6570\u306e\u500b\u6570\u3082\u53d6\u5f97\u51fa\u6765\u308b\n    const unsigned numargs = sizeof...(Arguments);\n    X xobj[numargs]; // array of some previously defined type X\n\n    // args... \u3067\u4ed6\u306e\u95a2\u6570\u306b\u6e21\u305b\u308b\n    helper_func(xobj, args...);\n}\n```\n\n## C++14\n\n### constexpr \u203bconstant expression (\u5b9a\u6570\u5f0f)\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u51e6\u7406\u3002\nC++11\u304b\u3089\u5c0e\u5165\u3055\u308c\u3001C++14\u3067\u5927\u5e45\u306b\u5236\u9650\u304c\u7de9\u548c\u3055\u308c\u305f\u3002\u304c\u3001VC14\u306f\u307e\u3060C++11\u76f8\u5f53\u306e\u6a5f\u80fd\u3057\u304b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\uff08[VisualStudio\u306eVC++11,14,17\u6a5f\u80fd\u5bfe\u5fdc\u8868](https://msdn.microsoft.com/ja-jp/library/hh567368.aspx)\uff09\n\n[constexpr\u95a2\u6570\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u51e6\u7406\u3002\u3053\u308c\u306f\u3044\u3044\u3002\u5b9f\u884c\u6642\u304c\u971e\u3093\u3067\u898b\u3048\u308b\u3002cpu\u306e\u5b0c\u58f0\u304c\u805e\u3053\u3048\u3066\u304d\u305d\u3046\u3060](http://www.slideshare.net/GenyaMurakami/onstexprcpu) \n\nconstexpr\u6307\u5b9a\u306e\u5909\u6570 \uff1d \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\n\n```c++:constexpr\u6307\u5b9a\u306e\u5909\u6570\nconstexpr unsigned N = 10; // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306f\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u4f7f\u7528\u53ef\u80fd\nstd::array<int, N> arr = {{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }};\n```\n\nconstexpr \u6307\u5b9a\u306e\u95a2\u6570 \uff1d \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\uff08\u3082\uff09\u547c\u51fa\u53ef\u80fd\n\n```c++:constexpr\u95a2\u6570\ntemplate<typename T>\nconstexpr T square(T const& t) { return t * t; }\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nconstexpr int s = square(16);\nstatic_assert(s == 256, \"\");\n```\n\n[constexpr\u95a2\u6570\u306e\u5236\u9650\u7de9\u548c](https://cpplover.blogspot.jp/2014/10/c14-constexpr.html) \u203bVC14(VS2015)\u306f\u672a\u5bfe\u5fdc\n\n```c++:VC14(VS2015)\u3067\u306f\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\ntemplate < typename T >\nconstexpr T sqrt(T s) const\n{\n\tT x = s / 2.0;  // [VC14] error C3250: 'x': \u5ba3\u8a00\u306f 'constexpr' \u95a2\u6570\u672c\u4f53\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\n\tT prev = 0.0;   // [VC14] \u540c\u4e0a\n\t:\n}\n```\n\n[constexpr](http://cpprefjp.github.io/lang/cpp11/constexpr.html)\n\n### \u30e9\u30e0\u30c0\u5f0f\nC++14\u3067\u6a5f\u80fd\u5f37\u5316\u3002\n\n[C++14 \u306e\u30e9\u30e0\u30c0\u5f0f \u5b8c\u5168\u89e3\u8aac](http://d.hatena.ne.jp/gintenlabo/20130516/1368711542)\n## \u305d\u306e\u4ed6\u53c2\u8003\u30da\u30fc\u30b8\n\n[\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306e C++11/C++14](http://www.slideshare.net/Reputeless/c11c14)\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u3058\u3083\u306a\u304f\u3066\u3082\u305f\u3081\u306b\u306a\u308b\u3002\n"}