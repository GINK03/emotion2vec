{"context": "Xcode 7\u306b\u3042\u308b\u3001Scene Kit\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff08\u5b87\u5b99\u8239\u304c\u30af\u30eb\u30af\u30eb\u56de\u308b\u3001\u30a2\u30ec\uff09\u3092\u3001\u3059\u3053\u3057\u66f8\u304d\u63db\u3048\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092Scene\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3067\u306a\u304f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002Scene Kit\u521d\u5b66\u8005\u306e\u307f\u306a\u3055\u3093\u306b\u306f\u3001\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\nGameViewController.swift\nimport UIKit\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // create a new scene\n        let scene = SCNScene()\n\n        // create and add a camera to the scene\n        let cameraNode = SCNNode()\n        cameraNode.camera = SCNCamera()\n        scene.rootNode.addChildNode(cameraNode)\n\n        // place the camera\n        cameraNode.position = SCNVector3(x: 0, y: 0, z: 15)\n\n        // create and add a light to the scene\n        let lightNode = SCNNode()\n        lightNode.light = SCNLight()\n        lightNode.light!.type = SCNLightTypeOmni\n        lightNode.position = SCNVector3(x: 0, y: 10, z: 10)\n        scene.rootNode.addChildNode(lightNode)\n\n        // create and add an ambient light to the scene\n        let ambientLightNode = SCNNode()\n        ambientLightNode.light = SCNLight()\n        ambientLightNode.light!.type = SCNLightTypeAmbient\n        ambientLightNode.light!.color = UIColor.darkGrayColor()\n        scene.rootNode.addChildNode(ambientLightNode)\n\n        // create a cube node\n        let cubeGeometry = SCNBox(width: 2.0, height: 2.0, length: 2.0, chamferRadius: 0.0)\n        // create cube textures\n        if let frontImage = UIImage(named: \"front\"),\n        let backImage = UIImage(named: \"back\"),\n        let leftImage = UIImage(named: \"left\"),\n        let rightImage = UIImage(named: \"right\"),\n        let topImage = UIImage(named: \"top\"),\n        let bottomImage = UIImage(named: \"bottom\") {\n            let frontMaterial = SCNMaterial()\n            frontMaterial.diffuse.contents = frontImage\n            let backMaterial = SCNMaterial()\n            backMaterial.diffuse.contents = backImage\n            let leftMaterial = SCNMaterial()\n            leftMaterial.diffuse.contents = leftImage\n            let rightMaterial = SCNMaterial()\n            rightMaterial.diffuse.contents = rightImage\n            let topMaterial = SCNMaterial()\n            topMaterial.diffuse.contents = topImage\n            let bottomMaterial = SCNMaterial()\n            bottomMaterial.diffuse.contents = bottomImage\n\n            cubeGeometry.materials = [frontMaterial, rightMaterial, backMaterial, leftMaterial, topMaterial, bottomMaterial]\n        }\n        let cubeNode = SCNNode(geometry: cubeGeometry)\n        cubeNode.position = SCNVector3(x: 0, y: 0, z: 0)\n        scene.rootNode.addChildNode(cubeNode)\n\n        // animate the 3d object\n        cubeNode.runAction(SCNAction.repeatActionForever(SCNAction.rotateByX(0, y: 2, z: 0, duration: 1)))\n\n        // retrieve the SCNView\n        let scnView = self.view as! SCNView\n\n        // set the scene to the view\n        scnView.scene = scene\n\n        // allows the user to manipulate the camera\n        scnView.allowsCameraControl = true\n\n        // show statistics such as fps and timing information\n        scnView.showsStatistics = true\n\n        // configure the view\n        scnView.backgroundColor = UIColor.blackColor()\n\n        // add a tap gesture recognizer\n        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))\n        scnView.addGestureRecognizer(tapGesture)\n    }\n\n    func handleTap(gestureRecognize: UIGestureRecognizer) {\n        // retrieve the SCNView\n        let scnView = self.view as! SCNView\n\n        // check what nodes are tapped\n        let p = gestureRecognize.locationInView(scnView)\n        let hitResults = scnView.hitTest(p, options: nil)\n        // check that we clicked on at least one object\n        if hitResults.count > 0 {\n            // retrieved the first clicked object\n            let result: AnyObject! = hitResults[0]\n\n            // get its material\n            let material = result.node!.geometry!.firstMaterial!\n\n            // highlight it\n            SCNTransaction.begin()\n            SCNTransaction.setAnimationDuration(0.5)\n\n            // on completion - unhighlight\n            SCNTransaction.setCompletionBlock {\n                SCNTransaction.begin()\n                SCNTransaction.setAnimationDuration(0.5)\n\n                material.emission.contents = UIColor.blackColor()\n\n                SCNTransaction.commit()\n            }\n\n            material.emission.contents = UIColor.redColor()\n\n            SCNTransaction.commit()\n        }\n    }\n\n    override func shouldAutorotate() -> Bool {\n        return true\n    }\n\n    override func prefersStatusBarHidden() -> Bool {\n        return true\n    }\n\n    override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {\n        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {\n            return .AllButUpsideDown\n        } else {\n            return .All\n        }\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Release any cached data, images, etc that aren't in use.\n    }\n\n}\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u7acb\u65b9\u4f53SCNBox\u3067\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u30666\u679a\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3SCNMaterial\u306e\u8cbc\u308a\u4ed8\u3051\u65b9\u306f\u3001\u6700\u521d\u306b\u3064\u307e\u3065\u304d\u3084\u3059\u3044\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u30026\u3064\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u30016\u9762\u306b\u3069\u3046\u3044\u3046\u9806\u756a\u3067\u8cbc\u308a\u4ed8\u3051\u3089\u308c\u308b\u306e\u304b\u3001\u30b7\u30df\u30e5\u30fc\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3057\u3066\u3001\u3088\u304f\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u6642\u9593\u304c\u3067\u304d\u305f\u3089\u3001Scene Kit\u521d\u5b66\u8005\u5411\u3051\u306e\u5c0f\u30cd\u30bf\u3092\u3001\u8f09\u305b\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u3001\u8003\u3048\u3066\u3044\u307e\u3059\u3002\nXcode 7\u306b\u3042\u308b\u3001Scene Kit\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff08\u5b87\u5b99\u8239\u304c\u30af\u30eb\u30af\u30eb\u56de\u308b\u3001\u30a2\u30ec\uff09\u3092\u3001\u3059\u3053\u3057\u66f8\u304d\u63db\u3048\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092Scene\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3067\u306a\u304f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002Scene Kit\u521d\u5b66\u8005\u306e\u307f\u306a\u3055\u3093\u306b\u306f\u3001\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift:GameViewController.swift\nimport UIKit\nimport SceneKit\n\nclass GameViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // create a new scene\n        let scene = SCNScene()\n        \n        // create and add a camera to the scene\n        let cameraNode = SCNNode()\n        cameraNode.camera = SCNCamera()\n        scene.rootNode.addChildNode(cameraNode)\n        \n        // place the camera\n        cameraNode.position = SCNVector3(x: 0, y: 0, z: 15)\n        \n        // create and add a light to the scene\n        let lightNode = SCNNode()\n        lightNode.light = SCNLight()\n        lightNode.light!.type = SCNLightTypeOmni\n        lightNode.position = SCNVector3(x: 0, y: 10, z: 10)\n        scene.rootNode.addChildNode(lightNode)\n        \n        // create and add an ambient light to the scene\n        let ambientLightNode = SCNNode()\n        ambientLightNode.light = SCNLight()\n        ambientLightNode.light!.type = SCNLightTypeAmbient\n        ambientLightNode.light!.color = UIColor.darkGrayColor()\n        scene.rootNode.addChildNode(ambientLightNode)\n        \n        // create a cube node\n        let cubeGeometry = SCNBox(width: 2.0, height: 2.0, length: 2.0, chamferRadius: 0.0)\n        // create cube textures\n        if let frontImage = UIImage(named: \"front\"),\n        let backImage = UIImage(named: \"back\"),\n        let leftImage = UIImage(named: \"left\"),\n        let rightImage = UIImage(named: \"right\"),\n        let topImage = UIImage(named: \"top\"),\n        let bottomImage = UIImage(named: \"bottom\") {\n            let frontMaterial = SCNMaterial()\n            frontMaterial.diffuse.contents = frontImage\n            let backMaterial = SCNMaterial()\n            backMaterial.diffuse.contents = backImage\n            let leftMaterial = SCNMaterial()\n            leftMaterial.diffuse.contents = leftImage\n            let rightMaterial = SCNMaterial()\n            rightMaterial.diffuse.contents = rightImage\n            let topMaterial = SCNMaterial()\n            topMaterial.diffuse.contents = topImage\n            let bottomMaterial = SCNMaterial()\n            bottomMaterial.diffuse.contents = bottomImage\n            \n            cubeGeometry.materials = [frontMaterial, rightMaterial, backMaterial, leftMaterial, topMaterial, bottomMaterial]\n        }\n        let cubeNode = SCNNode(geometry: cubeGeometry)\n        cubeNode.position = SCNVector3(x: 0, y: 0, z: 0)\n        scene.rootNode.addChildNode(cubeNode)\n        \n        // animate the 3d object\n        cubeNode.runAction(SCNAction.repeatActionForever(SCNAction.rotateByX(0, y: 2, z: 0, duration: 1)))\n        \n        // retrieve the SCNView\n        let scnView = self.view as! SCNView\n        \n        // set the scene to the view\n        scnView.scene = scene\n        \n        // allows the user to manipulate the camera\n        scnView.allowsCameraControl = true\n        \n        // show statistics such as fps and timing information\n        scnView.showsStatistics = true\n        \n        // configure the view\n        scnView.backgroundColor = UIColor.blackColor()\n        \n        // add a tap gesture recognizer\n        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))\n        scnView.addGestureRecognizer(tapGesture)\n    }\n    \n    func handleTap(gestureRecognize: UIGestureRecognizer) {\n        // retrieve the SCNView\n        let scnView = self.view as! SCNView\n        \n        // check what nodes are tapped\n        let p = gestureRecognize.locationInView(scnView)\n        let hitResults = scnView.hitTest(p, options: nil)\n        // check that we clicked on at least one object\n        if hitResults.count > 0 {\n            // retrieved the first clicked object\n            let result: AnyObject! = hitResults[0]\n            \n            // get its material\n            let material = result.node!.geometry!.firstMaterial!\n            \n            // highlight it\n            SCNTransaction.begin()\n            SCNTransaction.setAnimationDuration(0.5)\n            \n            // on completion - unhighlight\n            SCNTransaction.setCompletionBlock {\n                SCNTransaction.begin()\n                SCNTransaction.setAnimationDuration(0.5)\n                \n                material.emission.contents = UIColor.blackColor()\n                \n                SCNTransaction.commit()\n            }\n            \n            material.emission.contents = UIColor.redColor()\n            \n            SCNTransaction.commit()\n        }\n    }\n    \n    override func shouldAutorotate() -> Bool {\n        return true\n    }\n    \n    override func prefersStatusBarHidden() -> Bool {\n        return true\n    }\n    \n    override func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {\n        if UIDevice.currentDevice().userInterfaceIdiom == .Phone {\n            return .AllButUpsideDown\n        } else {\n            return .All\n        }\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Release any cached data, images, etc that aren't in use.\n    }\n\n}\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u7acb\u65b9\u4f53`SCNBox`\u3067\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u3057\u30666\u679a\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8cbc\u308a\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\u30c6\u30af\u30b9\u30c1\u30e3`SCNMaterial`\u306e\u8cbc\u308a\u4ed8\u3051\u65b9\u306f\u3001\u6700\u521d\u306b\u3064\u307e\u3065\u304d\u3084\u3059\u3044\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u30026\u3064\u306e\u30a4\u30e1\u30fc\u30b8\u304c\u30016\u9762\u306b\u3069\u3046\u3044\u3046\u9806\u756a\u3067\u8cbc\u308a\u4ed8\u3051\u3089\u308c\u308b\u306e\u304b\u3001\u30b7\u30df\u30e5\u30fc\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3057\u3066\u3001\u3088\u304f\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n![Simulator Screen Shot 2016.06.13 17.04.14.png](https://qiita-image-store.s3.amazonaws.com/0/83254/0d0c7f96-d534-ca44-dbfa-71013585aa78.png)\n\n\u6642\u9593\u304c\u3067\u304d\u305f\u3089\u3001Scene Kit\u521d\u5b66\u8005\u5411\u3051\u306e\u5c0f\u30cd\u30bf\u3092\u3001\u8f09\u305b\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u3001\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n", "tags": ["Xcode", "iOS", "SceneKit", "Swift", "Swift2.2"]}