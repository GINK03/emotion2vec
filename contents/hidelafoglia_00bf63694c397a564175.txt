{"context": " More than 1 year has passed since last update.\n\ndjango makemessages \u3067 py\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u751f\u6210\u3057\u305f django.po\u306e\u307b\u304b\u306b\u3001\u624b\u52d5\u3067\u5b9a\u7fa9\u3057\u305f po \u30d5\u30a1\u30a4\u30eb\u3082\u4f7f\u3044\u305f\u3044\u3002\n\ndjango.utils.translation.ugettext \u306b\u5909\u6570\u3092\u6e21\u3059\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3002\n\n$ tree locale/\nlocale/\n\u2514\u2500\u2500 ja\n    \u2514\u2500\u2500 LC_MESSAGES\n        \u251c\u2500\u2500 django.mo\n        \u251c\u2500\u2500 django.po\n        \u2514\u2500\u2500 imports.po\n\n\ncmsgs.py\n\nDjango \u306e compilemessages \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\npython manage.py cmsgs \u3059\u308b\u3068 LC_MESSAGES\u4ee5\u4e0b\u306e po \u30d5\u30a1\u30a4\u30eb\u3092\u30de\u30fc\u30b8\u3057\u3066\u304b\u3089msgfmt\u3057\u307e\u3059\u3002\n\n\nfrom __future__ import unicode_literals\n\n# import codecs\nimport glob\nimport os\n\nfrom django.core.management.base import CommandError\nfrom django.core.management.utils import find_command, popen_wrapper\nfrom django.utils._os import upath\nfrom django.core.management.commands.compilemessages import (\n    Command as CompileCommand\n)\n\n\nclass Command(CompileCommand):\n\n    def handle(self, **options):\n        locale = options.get('locale')\n        exclude = options.get('exclude')\n        self.verbosity = int(options.get('verbosity'))\n        if options.get('fuzzy'):\n            self.program_options = self.program_options + ['-f']\n\n        if find_command(self.program) is None:\n            raise CommandError(\"Can't find %s. Make sure you have GNU gettext \"\n                               \"tools 0.15 or newer installed.\" % self.program)\n\n        basedirs = [os.path.join('conf', 'locale'), 'locale']\n        if os.environ.get('DJANGO_SETTINGS_MODULE'):\n            from django.conf import settings\n            basedirs.extend(upath(path) for path in settings.LOCALE_PATHS)\n\n        # Gather existing directories.\n        basedirs = set(map(os.path.abspath, filter(os.path.isdir, basedirs)))\n\n        if not basedirs:\n            raise CommandError(\"This script should be run from the Django Git \"\n                               \"checkout or your project or app tree, or with \"\n                               \"the settings module specified.\")\n\n        # Build locale list\n        all_locales = []\n        for basedir in basedirs:\n            locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % basedir))\n            all_locales.extend(map(os.path.basename, locale_dirs))\n\n        # Account for excluded locales\n        locales = locale or all_locales\n        locales = set(locales) - set(exclude)\n\n        for basedir in basedirs:\n            if locales:\n                dirs = [os.path.join(basedir, l, 'LC_MESSAGES')\n                        for l in locales]\n            else:\n                dirs = [basedir]\n\n            # \u3053\u3053\u3088\u308a\u4e0a\u306fcompilemsssages.py \u3068\u540c\u3058\n            for i in dirs:\n                self.merge_and_compile_messages(i)\n\n    def merge_and_compile_messages(self, msgdir):                                   \n        src = os.path.join(msgdir, '.po')                                     \n        dst = os.path.join(msgdir, 'django.mo')                                     \n        pos = [os.path.join(msgdir, f) for f in glob.glob1(msgdir, '*.po')]         \n        self.run(['msgcat', '--use-first', '-o', src] + pos)                        \n        self.run([self.program] + self.program_options +                            \n                 ['--use-fuzzy', '-o', dst, src])                                   \n        self.run(['rm', src]) \n\n    def run(self, args):\n        output, errors, status = popen_wrapper(args)\n        if not status:\n            return\n\n        msg = \"Execution of {0} failed: {1}\".format(args[0], errors or '')\n        raise CommandError(msg)\n\n\n- `django makemessages` \u3067 py\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u751f\u6210\u3057\u305f django.po\u306e\u307b\u304b\u306b\u3001\u624b\u52d5\u3067\u5b9a\u7fa9\u3057\u305f po \u30d5\u30a1\u30a4\u30eb\u3082\u4f7f\u3044\u305f\u3044\u3002\n- `django.utils.translation.ugettext` \u306b\u5909\u6570\u3092\u6e21\u3059\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3002\n\n~~~\n$ tree locale/\nlocale/\n\u2514\u2500\u2500 ja\n    \u2514\u2500\u2500 LC_MESSAGES\n        \u251c\u2500\u2500 django.mo\n        \u251c\u2500\u2500 django.po\n        \u2514\u2500\u2500 imports.po\n~~~\n\n# cmsgs.py \n\n- Django \u306e compilemessages \u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n- `python manage.py cmsgs` \u3059\u308b\u3068 LC_MESSAGES\u4ee5\u4e0b\u306e po \u30d5\u30a1\u30a4\u30eb\u3092\u30de\u30fc\u30b8\u3057\u3066\u304b\u3089msgfmt\u3057\u307e\u3059\u3002\n\n~~~python\n\nfrom __future__ import unicode_literals\n\n# import codecs\nimport glob\nimport os\n\nfrom django.core.management.base import CommandError\nfrom django.core.management.utils import find_command, popen_wrapper\nfrom django.utils._os import upath\nfrom django.core.management.commands.compilemessages import (\n    Command as CompileCommand\n)\n\n\nclass Command(CompileCommand):\n\n    def handle(self, **options):\n        locale = options.get('locale')\n        exclude = options.get('exclude')\n        self.verbosity = int(options.get('verbosity'))\n        if options.get('fuzzy'):\n            self.program_options = self.program_options + ['-f']\n\n        if find_command(self.program) is None:\n            raise CommandError(\"Can't find %s. Make sure you have GNU gettext \"\n                               \"tools 0.15 or newer installed.\" % self.program)\n\n        basedirs = [os.path.join('conf', 'locale'), 'locale']\n        if os.environ.get('DJANGO_SETTINGS_MODULE'):\n            from django.conf import settings\n            basedirs.extend(upath(path) for path in settings.LOCALE_PATHS)\n\n        # Gather existing directories.\n        basedirs = set(map(os.path.abspath, filter(os.path.isdir, basedirs)))\n\n        if not basedirs:\n            raise CommandError(\"This script should be run from the Django Git \"\n                               \"checkout or your project or app tree, or with \"\n                               \"the settings module specified.\")\n\n        # Build locale list\n        all_locales = []\n        for basedir in basedirs:\n            locale_dirs = filter(os.path.isdir, glob.glob('%s/*' % basedir))\n            all_locales.extend(map(os.path.basename, locale_dirs))\n\n        # Account for excluded locales\n        locales = locale or all_locales\n        locales = set(locales) - set(exclude)\n\n        for basedir in basedirs:\n            if locales:\n                dirs = [os.path.join(basedir, l, 'LC_MESSAGES')\n                        for l in locales]\n            else:\n                dirs = [basedir]\n                \n\t\t    # \u3053\u3053\u3088\u308a\u4e0a\u306fcompilemsssages.py \u3068\u540c\u3058\n      \t\tfor i in dirs:\n                self.merge_and_compile_messages(i)\n\n    def merge_and_compile_messages(self, msgdir):                                   \n        src = os.path.join(msgdir, '.po')                                     \n        dst = os.path.join(msgdir, 'django.mo')                                     \n        pos = [os.path.join(msgdir, f) for f in glob.glob1(msgdir, '*.po')]         \n        self.run(['msgcat', '--use-first', '-o', src] + pos)                        \n        self.run([self.program] + self.program_options +                            \n                 ['--use-fuzzy', '-o', dst, src])                                   \n        self.run(['rm', src]) \n\n    def run(self, args):\n        output, errors, status = popen_wrapper(args)\n        if not status:\n            return\n\n        msg = \"Execution of {0} failed: {1}\".format(args[0], errors or '')\n        raise CommandError(msg)\n~~~\n", "tags": ["Django", "I18n"]}