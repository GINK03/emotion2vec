{"context": " More than 1 year has passed since last update.\n\nwebmock\u3068\u306f\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092stub\u3059\u308bgem\u3067\u3059\u3002\nNet::HTTP\u3060\u3051\u3067\u306a\u304f\u3001TCPSocket\u3092\u4f7f\u3063\u305f\u5834\u5408\u3082stub\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u4ee5\u524d\u3001sham_rack\u4f7f\u3063\u3066\u307f\u305f\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\nsham_rack\u306fNet::HTTP\u306estub\u3057\u304b\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3059\u3002\nTCPSocket\u3092stub\u3057\u3066\u304f\u308c\u308bgem\u3092\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u3053\u306egem\u306b\u51fa\u4f1a\u3044\u307e\u3057\u305f\u3002\n\n\u4f55\u304c\u3067\u304d\u308b\u304b\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30db\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u6295\u3052\u308b\u524d\u306b\u30d5\u30c3\u30af\u3057\u3066\u3001\u3042\u305f\u304b\u3082\u51e6\u7406\u3055\u308c\u305f\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u3001Stub\u3084Mock\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3057\u304b\u3082\u3001Net::HTTP\u3060\u3051\u3067\u306a\u304fTCPSocket\u3082\u5bfe\u5fdc\u3057\u3066\u304f\u308c\u308b\u3002\n=> HTTPClient\u3084Excon\u3082stub\u3067\u304d\u308b\u3053\u3068\u306b\uff01\n\u6709\u540d\u306agem\u306a\u306e\u3067\u3001\u3044\u308d\u3093\u306a\u65b9\u304c\u8a18\u4e8b\u306b\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u4e2d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306estub\u306b\u5229\u7528\u3059\u308b\u30b1\u30fc\u30b9\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\n(\u30c6\u30b9\u30c8\u3067\u306e\u4f7f\u3044\u65b9\u306f\u8a18\u4e8b\u306b\u3055\u308c\u3066\u3044\u308b\u65b9\u304c\u305f\u304f\u3055\u3093\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044)\n\u57fa\u672c\u7684\u306b\u306f\u3001WebMock::API\u3092\u8a72\u5f53\u30af\u30e9\u30b9\u306binclude\u3059\u308b\u3053\u3068\u3067stub\u3092\u767b\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u3060\u3068\u3001stub\u3092\u767b\u9332\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nstub\u3092\u767b\u9332\u305b\u305a\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\nrequire 'webmock'\ninclude WebMock::API\nres = Net::HTTP.get(\"www.example.com\", \"/\")  #=> WebMock::NetConnectNotAllowedError\n\n__END__\n\n\u5177\u4f53\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n/home/aries/.rvm/gems/ruby-2.1.5@ironna/gems/webmock-1.21.0/lib/webmock/http_lib_adapters/net_http.rb:114:in `request': Real HTTP connections are disabled. Unregistered request: GET http://www.example.com/ with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'} (WebMock::NetConnectNotAllowedError)\n\nYou can stub this request with the following snippet:\n\nstub_request(:get, \"http://www.example.com/\").\n  with(:headers => {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'}).\n  to_return(:status => 200, :body => \"\", :headers => {})\n\n\nstub_request (stub\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u767b\u9332)\nstub_request\u3067\u767b\u9332\u3059\u308b\u3002\n\u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bd\u30c3\u30c9\u540d(:any\u306b\u3059\u308b\u3068\u4f55\u3067\u3082)\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u30db\u30b9\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3002\nrequire 'net/http'\nrequire 'webmock'\ninclude WebMock::API\n\nstub_request(:any, \"www.example.com\").to_return(\n  :body => \"test ok\",\n  :status => 200,\n  :headers => { 'Content-Length' => 7 }\n)\n\nres = Net::HTTP.get(\"www.example.com\", \"/\")\np res  #=> \"abc\"\n\n\nallow_net_connect! (stub\u767b\u9332\u3057\u305f\u30db\u30b9\u30c8\u4ee5\u5916\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u8a31\u53ef\u3059\u308b)\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\n\nstub_request(:any, \"www.example.com\").to_return(\n  :body => \"test ok\",\n  :status => 200,\n  :headers => { 'Content-Length' => 7 }\n)\n\nhttp = HTTPClient.new\nres = http.get \"http://www.example.com/\"\np res.status  #=> 200\np res.body    #=> \"test_ok\"\n\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306eHTML\n\n\nenable!/disable! (WebMock\u306eon/off\u5207\u308a\u66ff\u3048)\n\u3053\u306e\u6a5f\u80fd\u304c\u4e00\u756a\u4f7f\u3044\u305f\u304b\u3063\u305f\u3084\u3064!!\nrequire 'httpclient'\nrequire 'webmock'\ninclude WebMock::API\n\n## include\u3057\u3066stub_request\u3057\u305f\u6642\u70b9\u3067WebMock\u306f\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\n\nstub_request(:any, \"www.google.co.jp\").to_return(\n :body => \"mock response\",\n :status => 200,\n :headers => { 'Content-Length' => 13 }\n)\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status       #=> 200\np res.body[0..30]  #=> \"mock response\"\n\nWebMock.disable!  #=> \u7121\u52b9\u5316\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\n\nWebMock.enable!  #=> \u6709\u52b9\u5316\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> \"mock response\"\n\n\nreset! (\u767b\u9332\u3057\u305fstub\u306e\u30ea\u30bb\u30c3\u30c8)\nrequire 'httpclient'\n\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\nstub_request(:any, \"www.google.co.jp\").to_return(\n :body => \"mock response\",\n :status => 200,\n :headers => { 'Content-Length' => 13 }\n)\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> \"mock response\"\n\nWebMock.reset!  #=> stub_request\u3067\u767b\u9332\u3057\u305fStub\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\n\n\nstub_request().to_rack (rack\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b)\nFbGraph\u3092\u4f7f\u3063\u305f\u3001GraphAPI\u3078\u306e/me\u30ea\u30af\u30a8\u30b9\u30c8\u3092WebMock\u3067mock\u3057\u3066\u307f\u305f\u3002\nrequire 'fb_graph'\nrequire 'dotenv'\nrequire 'nenv'\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\nDotenv.load\n\nclass MyRackApp\n  def call(env)\n    [ 500, {}, [ \"{}\" ] ]\n  end\nend\n\nclass MyMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = Rack::Request.new(env)\n    if request.path == \"/me\"\n      test_data = { \"name\" => \"Test User\" }.to_json\n      [ 200, { \"Content-Type\" => \"application/json\" }, [ test_data ] ]\n    else\n      @app.call(env)\n    end\n  end\nend\n\napp = MyRackApp.new\napp = MyMiddleware.new(app)\nstub_request(:any, /graph\\.facebook\\.com/).to_rack(app)\n\nuser = FbGraph::User.me(Nenv.access_token).fetch\np user.name  #=> \"Test User\"\n\n# [webmock](https://github.com/bblimke/webmock)\u3068\u306f\n\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092stub\u3059\u308bgem\u3067\u3059\u3002\nNet::HTTP\u3060\u3051\u3067\u306a\u304f\u3001TCPSocket\u3092\u4f7f\u3063\u305f\u5834\u5408\u3082stub\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u4ee5\u524d\u3001[sham_rack\u4f7f\u3063\u3066\u307f\u305f](http://qiita.com/ogawatti/items/9cb87c3f6228e209c502)\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\nsham_rack\u306fNet::HTTP\u306estub\u3057\u304b\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3059\u3002\nTCPSocket\u3092stub\u3057\u3066\u304f\u308c\u308bgem\u3092\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u3053\u306egem\u306b\u51fa\u4f1a\u3044\u307e\u3057\u305f\u3002\n\n# \u4f55\u304c\u3067\u304d\u308b\u304b\n\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30db\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u6295\u3052\u308b\u524d\u306b\u30d5\u30c3\u30af\u3057\u3066\u3001\u3042\u305f\u304b\u3082\u51e6\u7406\u3055\u308c\u305f\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u3001Stub\u3084Mock\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3057\u304b\u3082\u3001Net::HTTP\u3060\u3051\u3067\u306a\u304fTCPSocket\u3082\u5bfe\u5fdc\u3057\u3066\u304f\u308c\u308b\u3002\n\n=> HTTPClient\u3084Excon\u3082stub\u3067\u304d\u308b\u3053\u3068\u306b\uff01\n\n\u6709\u540d\u306agem\u306a\u306e\u3067\u3001\u3044\u308d\u3093\u306a\u65b9\u304c\u8a18\u4e8b\u306b\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u4e2d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306estub\u306b\u5229\u7528\u3059\u308b\u30b1\u30fc\u30b9\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\n# \u4f7f\u3044\u65b9\n\n(\u30c6\u30b9\u30c8\u3067\u306e\u4f7f\u3044\u65b9\u306f\u8a18\u4e8b\u306b\u3055\u308c\u3066\u3044\u308b\u65b9\u304c\u305f\u304f\u3055\u3093\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044)\n\n\u57fa\u672c\u7684\u306b\u306f\u3001WebMock::API\u3092\u8a72\u5f53\u30af\u30e9\u30b9\u306binclude\u3059\u308b\u3053\u3068\u3067stub\u3092\u767b\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3051\u3060\u3068\u3001stub\u3092\u767b\u9332\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### stub\u3092\u767b\u9332\u305b\u305a\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n```rb\nrequire 'webmock'\ninclude WebMock::API\nres = Net::HTTP.get(\"www.example.com\", \"/\")  #=> WebMock::NetConnectNotAllowedError\n\n__END__\n\n\u5177\u4f53\u7684\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n/home/aries/.rvm/gems/ruby-2.1.5@ironna/gems/webmock-1.21.0/lib/webmock/http_lib_adapters/net_http.rb:114:in `request': Real HTTP connections are disabled. Unregistered request: GET http://www.example.com/ with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'} (WebMock::NetConnectNotAllowedError)\n\nYou can stub this request with the following snippet:\n\nstub_request(:get, \"http://www.example.com/\").\n  with(:headers => {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'}).\n  to_return(:status => 200, :body => \"\", :headers => {})\n```\n\n### stub_request (stub\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u767b\u9332)\n\nstub_request\u3067\u767b\u9332\u3059\u308b\u3002\n\u7b2c\u4e00\u5f15\u6570\u306b\u30e1\u30bd\u30c3\u30c9\u540d(:any\u306b\u3059\u308b\u3068\u4f55\u3067\u3082)\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u30db\u30b9\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```rb\nrequire 'net/http'\nrequire 'webmock'\ninclude WebMock::API\n\nstub_request(:any, \"www.example.com\").to_return(\n  :body => \"test ok\",\n  :status => 200,\n  :headers => { 'Content-Length' => 7 }\n)\n\nres = Net::HTTP.get(\"www.example.com\", \"/\")\np res  #=> \"abc\"\n```\n\n### allow_net_connect! (stub\u767b\u9332\u3057\u305f\u30db\u30b9\u30c8\u4ee5\u5916\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u8a31\u53ef\u3059\u308b)\n\n```rb\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\n\nstub_request(:any, \"www.example.com\").to_return(\n  :body => \"test ok\",\n  :status => 200,\n  :headers => { 'Content-Length' => 7 }\n)\n\nhttp = HTTPClient.new\nres = http.get \"http://www.example.com/\"\np res.status  #=> 200\np res.body    #=> \"test_ok\"\n\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306eHTML\n```\n\n\n### enable!/disable! (WebMock\u306eon/off\u5207\u308a\u66ff\u3048)\n\n\u3053\u306e\u6a5f\u80fd\u304c\u4e00\u756a\u4f7f\u3044\u305f\u304b\u3063\u305f\u3084\u3064!!\n\n```rb\nrequire 'httpclient'\nrequire 'webmock'\ninclude WebMock::API\n\n## include\u3057\u3066stub_request\u3057\u305f\u6642\u70b9\u3067WebMock\u306f\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\n\nstub_request(:any, \"www.google.co.jp\").to_return(\n :body => \"mock response\",\n :status => 200,\n :headers => { 'Content-Length' => 13 }\n)\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status       #=> 200\np res.body[0..30]  #=> \"mock response\"\n\nWebMock.disable!  #=> \u7121\u52b9\u5316\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\n\nWebMock.enable!  #=> \u6709\u52b9\u5316\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> \"mock response\"\n```\n\n### reset! (\u767b\u9332\u3057\u305fstub\u306e\u30ea\u30bb\u30c3\u30c8)\n\n```rb\nrequire 'httpclient'\n\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\nstub_request(:any, \"www.google.co.jp\").to_return(\n :body => \"mock response\",\n :status => 200,\n :headers => { 'Content-Length' => 13 }\n)\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> \"mock response\"\n\nWebMock.reset!  #=> stub_request\u3067\u767b\u9332\u3057\u305fStub\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\nhttp = HTTPClient.new\nres = http.get \"http://www.google.co.jp/\"\np res.status  #=> 200\np res.body    #=> Google\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\n```\n\n### stub_request().to_rack (rack\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b)\n\nFbGraph\u3092\u4f7f\u3063\u305f\u3001GraphAPI\u3078\u306e/me\u30ea\u30af\u30a8\u30b9\u30c8\u3092WebMock\u3067mock\u3057\u3066\u307f\u305f\u3002\n\n```rb\nrequire 'fb_graph'\nrequire 'dotenv'\nrequire 'nenv'\nrequire 'webmock'\ninclude WebMock::API\n\nWebMock.allow_net_connect!\nDotenv.load\n\nclass MyRackApp\n  def call(env)\n    [ 500, {}, [ \"{}\" ] ]\n  end\nend\n\nclass MyMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = Rack::Request.new(env)\n    if request.path == \"/me\"\n      test_data = { \"name\" => \"Test User\" }.to_json\n      [ 200, { \"Content-Type\" => \"application/json\" }, [ test_data ] ]\n    else\n      @app.call(env)\n    end\n  end\nend\n\napp = MyRackApp.new\napp = MyMiddleware.new(app)\nstub_request(:any, /graph\\.facebook\\.com/).to_rack(app)\n\nuser = FbGraph::User.me(Nenv.access_token).fetch\np user.name  #=> \"Test User\"\n```\n", "tags": ["Ruby", "Gem"]}