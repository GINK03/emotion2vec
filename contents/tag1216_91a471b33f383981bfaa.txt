{"context": "Java\u3067\u65e5\u4ed8/\u6642\u9593\u3092\u6271\u3046\u306b\u306f\u5f93\u6765\u306fData/Calendar/DateFormat\u7b49\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u305f\u304c(\u4ee5\u4e0b\u3001\u65e7API)\u3001Java8\u304b\u3089\u306fjava.time\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u65b0\u3057\u304fAPI\u304c\u8ffd\u52a0\u3055\u308c\u305f(\u4ee5\u4e0b\u3001\u65b0API)\u3002\n\u3057\u304b\u3057\u65b0API\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\u6570\u304c5\u3001\u30af\u30e9\u30b9\u6570\u306f69\u3082\u3042\u308a\u6700\u521d\u306f\u3069\u308c\u3092\u3069\u3046\u4f7f\u3046\u306e\u304b\u6238\u60d1\u3063\u3066\u3057\u307e\u3046\u3002\n\u305d\u3053\u3067\u6700\u4f4e\u9650\u3053\u308c\u3060\u3051\u899a\u3048\u3066\u304a\u3051\u3070\u65e7API\u3068\u540c\u3058\u4e8b\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u7a0b\u5ea6\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n\u65b0API\u306e\u7279\u5fb4\n\n\u65e7API\u3068\u306f\u5168\u304f\u5225\u306eAPI\u3002\n\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306f\u3001\u65e5\u6642/\u65e5\u4ed8\u306e\u307f/\u6642\u9593\u306e\u307f\u306a\u3069\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3084\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u6709\u7121\u306a\u3069\u3067\u3001\u8907\u6570\u306e\u30af\u30e9\u30b9\u304b\u3089\u9078\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u30c7\u30fc\u30bf\u4fdd\u6301\u3068\u65e5\u4ed8\u64cd\u4f5c(\u5e74/\u6708/\u65e5\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u53d6\u5f97/\u5909\u66f4\u306a\u3069)\u304c1\u30af\u30e9\u30b9\u3067\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n(\u65e7API\u3067\u306f\u30c7\u30fc\u30bf\u4fdd\u6301\u306fDate\u30af\u30e9\u30b9\u3001\u65e5\u4ed8\u64cd\u4f5c\u306fCalendar\u30af\u30e9\u30b9\u3068\u5206\u304b\u308c\u3066\u3044\u305f)\n\n\u65e5\u6642\u30af\u30e9\u30b9\u306fImmutable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u305f\u3002\u65e2\u5b58\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u969b\u306f\u65b0\u3057\u304f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u4e8b\u306b\u306a\u308b\u3002\n\u65e7API\u3067\u6708\u306e\u5024\u306f0-11\u3060\u3063\u305f\u304c\u3001\u65b0API\u3067\u306f1-12\u306b\u306a\u3063\u305f\u3002\n\n\n\u3053\u306e\u30af\u30e9\u30b9\u3060\u3051\u899a\u3048\u3068\u3051\n\u6700\u4f4e\u9650\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u30af\u30e9\u30b9\u3002\n\n\u65e5\u6642\u30af\u30e9\u30b9\n\n\njava.time.LocalDateTime\n\n\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u306a\u3044\u65e5\u6642\u3002\n\u5185\u90e8\u306bLocalDate\u3068LocalTime\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u3063\u3066\u3044\u308b\u3002\n\n\u4f8b\uff1a2015-12-15T23:30:59.999\n\n\n\njava.time.ZonedDateTime\n\n\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u4ed8\u304d\u306e\u65e5\u6642\u3002\n\u4f8b\uff1a2015-12-15T23:30:59.999+09:00[Asia/Tokyo]\n\n\n\njava.time.OffsetDateTime\n\n\u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u306e\u65e5\u6642\u3002\n\u4f8b\uff1a2015-12-15T23:30:59.999+09:00\n\n\n\n\u7279\u5fb4\n\n\u65e7API\u306eDate\u3068Calendar\u3092\u5408\u308f\u305b\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u3002\n\u6642\u9593\u306f\u30ca\u30ce\u79d2\u307e\u3067\u683c\u7d0d\u3067\u304d\u308b\u3002\n\u65e5\u6642\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306f\u4ed6\u306b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u3051\u3069\u4f7f\u3044\u65b9\u306f\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u521d\u3081\u306fLocalDateTime\u306e\u4f7f\u3044\u65b9\u3092\u899a\u3048\u308c\u3070\u4ed6\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\n\n\njava.time.fomat.DateTimeFormatter\n\n\u65e5\u4ed8\u30fb\u6642\u523b\u306e\u6587\u5b57\u5217\u51fa\u529b\u3001\u89e3\u6790\u3092\u884c\u3046\u3002\n\u65e7API\u306eSimpleDateFormat\u306b\u76f8\u5f53\u3002\nISO\u6a19\u6e96\u5f62\u5f0f\u7b49\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3082\u5b9a\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u3002\n\n\n\n\nDate\u3068\u306e\u76f8\u4e92\u5909\u63db\n\n\njava.time.Instant\n\n\u30a8\u30dd\u30c3\u30af\u79d2\u3092\u8868\u3059long\u5024\u30681\u79d2\u672a\u6e80\u306e\u30ca\u30ce\u79d2\u3092\u8868\u3059int\u5024(0-999,999,999)\u304b\u3089\u306a\u308b\u65e5\u6642\u3002\n\u65b0API\u306e\u65e5\u6642\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u552f\u4e00Date\u3068\u306e\u76f8\u4e92\u5909\u63db\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u3002\n\u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u3082Instant\u3092\u7d4c\u7531\u3057\u3066Date\u3068\u306e\u76f8\u4e92\u5909\u63db\u304c\u53ef\u80fd\u3002\n\n\n\n\n\u305d\u306e\u4ed6\n\n\njava.time.ZoneId\n\n\u30bf\u30a4\u30e0\u30be\u30fc\u30f3ID\u3002(Asia/Tokyo\u306a\u3069)\n\nZonedDateTime\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306a\u3069\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n\n\njava.time.ZoneOffset\n\n\u30b0\u30ea\u30cb\u30c3\u30b8/UTC\u304b\u3089\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u30fb\u30aa\u30d5\u30bb\u30c3\u30c8(+09:00\u306a\u3069)\u3002\nOffsetDateTime\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306a\u3069\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n\n\njava.time.temporal.ChronoField\n\n\u300c\u5e74\u300d\u300c\u6708\u300d\u306a\u3069\u306e\u65e5\u6642\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8868\u3059\u5217\u6319\u578b\u3002\n\nTemporalField\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3002\n\u65e5\u6642\u30af\u30e9\u30b9\u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u306a\u3069\u3001TemporalField\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u7528\u3059\u308b\u3002\n\n\n\njava.time.temporal.ChronoUnit\n\n\u300c1\u5e74\u300d\u300c1\u30f6\u6708\u300d\u306a\u3069\u3001\u65e5\u6642\u306e\u5358\u4f4d\u3092\u8868\u3059\u5217\u6319\u578b\u3002\n\nTemporalUnit\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3002\n\nTemporalUnit\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u7528\u3059\u308b\u3002\n\n\n\n\n\u4f7f\u3044\u65b9\n\n\u4e3b\u306bLocalDateTime\u306e\u4f7f\u3044\u65b9\u306e\u4f8b\u3002\n\u30e1\u30bd\u30c3\u30c9\u540d\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u3082\u307b\u307c\u4e00\u7dd2\u3002\n\u3053\u3053\u306b\u66f8\u3044\u305f\u306e\u306f\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u306a\u306e\u3067\u3001\u8a73\u7d30\u306f\u5404\u30af\u30e9\u30b9\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\n\u73fe\u5728\u65e5\u6642\u306e\u53d6\u5f97 - now\nLocalDateTime d = LocalDateTime.now();\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 - of\n//\u5e74\u6708\u65e5\u6642\u5206\u79d2\u3092\u6307\u5b9a\nLocalDateTime d1 = LocalDateTime.of(2015, 12, 15, 23, 30, 59);\n//\u5e74\u6708\u65e5\u6642\u5206\u79d2\u30681\u79d2\u672a\u6e80\u306e\u30ca\u30ce\u79d2\u3092\u6307\u5b9a\nLocalDateTime d2 = LocalDateTime.of(2015, 12, 15, 23, 30, 59, 999999999);\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u53d6\u5f97 - get\n\n\u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\nCalendar.get()\u306b\u76f8\u5f53\u3002\n\nLocalDateTime d = LocalDateTime.now();\nSystem.out.println(d.getYear());\nSystem.out.println(d.getMonth());\nSystem.out.println(d.getDayOfMonth());\nSystem.out.println(d.getHour());\nSystem.out.println(d.getMinute());\nSystem.out.println(d.getSecond());\nSystem.out.println(d.getNano());\nSystem.out.println(d.get(ChronoField.YEAR));\n\n\n\u5024\u3092\u5909\u66f4\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 - plus/minus/with\n\n\u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u65b0\u3057\u3044\u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\nCalendar.set()\u3084Calendar.add()\u306b\u76f8\u5f53\u3002\n\nLocalDateTime d = LocalDateTime.of(2015, 12, 15, 23, 30, 59);\nSystem.out.println(d.plusDays(20));       //2016-01-04T23:30:59\nSystem.out.println(d.minusDays(20));      //2015-11-25T23:30:59\nSystem.out.println(d.withDayOfMonth(20)); //2015-12-20T23:30:59\n\n\n\u6642\u9593\u3092\u5207\u308a\u6368\u3066\u308b - truncatedTo\nLocalDateTime.of(2015, 12, 15, 23, 30, 59).truncatedTo(ChronoUnit.HOURS);\n// 2015-12-15T23:00\n\n\n\u6765\u67081\u65e5\u306e12\u6642\nLocalDateTime d = \n        LocalDateTime.now()\n        .plusMonths(1)\n        .withDayOfMonth(1)\n        .withHour(12)\n        .truncatedTo(ChronoUnit.HOURS);\n\n\nZoneId/ZoneOffset\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\nZoneId zoneId = ZoneId.systemDefault();\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\nZoneOffset offset = ZoneOffset.UTC;\nZoneOffset offset = ZoneOffset.ofHours(9);\nZoneOffset offset = ZoneId.systemDefault().getRules().getOffset(Instant.now());\n\n\n\u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u306b\u5909\u63db - to/at\nLocalDateTime ldt = LocalDateTime.now();\n//LocalDateTime -> ZoneDateTime\nZonedDateTime zdt = ldt.atZone(ZoneId.systemDefault());\n//LocalDateTime -> OffsetDateTime\nOffsetDateTime odt = ldt.atOffset(ZoneOffset.ofHours(9));\n//LocalDateTime -> Instant\nInstant instant = ldt.toInstant(ZoneOffset.UTC);\n\n\nISO\u65e5\u6642\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n\n\u65e5\u6642\u30af\u30e9\u30b9\u306b\u306f\u4e88\u3081ISO\u65e5\u6642\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3092\u4f7f\u3063\u305f\u6587\u5b57\u5217\u304b\u3089\u65e5\u6642\u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\nLocalDateTime.parse(\"2015-12-15T23:30\");\nLocalDateTime.parse(\"2015-12-15T23:30:59\");\nLocalDateTime.parse(\"2015-12-15T23:30:59.999\");\n\n\n\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\nDateTimeFormatter f = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\nLocalDateTime d = LocalDateTime.parse(\"2015/12/15 23:30:59\", f);\nSystem.out.println(d.format(f));\n\n\u6ce8\u610f\u70b9\n\n*DateTime\u30af\u30e9\u30b9\u306eparse()\u3092\u4f7f\u3046\u6642\u306f\u6642\u523b\u3082\u542b\u3081\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n\nDate\u3068\u306e\u76f8\u4e92\u5909\u63db\n\n\u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068Date\u9593\u306e\u5909\u63db\u306fInstant\u30af\u30e9\u30b9\u3092\u7d4c\u7531\u3057\u3066\u884c\u3046\u3002\n\n//Date -> *DateTime\nDate date = new Date();\nZonedDateTime zdt = date.toInstant().atZone(ZoneId.systemDefault());\nLocalDateTime ldt = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\nOffsetDateTime odt = OffsetDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\n\n//ZonedDateTime -> Date\nZonedDateTime zdt = ZonedDateTime.now();\nDate date = Date.from(zdt.toInstant());\n\n//OffsetDateTime -> Date\nOffsetDateTime odt = OffsetDateTime.now();\nDate date = Date.from(odt.toInstant());\n\n//LocalDateTime -> Date\nLocalDateTime ldt = LocalDateTime.now();\nDate date = Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());\n\n\n\u65e5\u6642\u30af\u30e9\u30b9\u306e\u4e00\u89a7\n\u6700\u5f8c\u306b\u3001\u4f7f\u3048\u305d\u3046\u306a\u65e5\u6642\u30af\u30e9\u30b9\u306e\u4e00\u89a7\u3002\n\u65e5\u6642\u30af\u30e9\u30b9\u306fTemporal\u53c8\u306fTemporalAccessor\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3001\u6642\u9593\u91cf\u3092\u8868\u3059\u30af\u30e9\u30b9\u306fTemporalAmount\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u4ee3\u8868\u7684\u306a\u65e5\u6642\u30af\u30e9\u30b9\n\n\n\n\n\u65e5\u4ed8\u3068\u6642\u9593\n\u65e5\u4ed8\u306e\u307f\n\u6642\u9593\u306e\u307f\n\n\n\n\n\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306a\u3057\nLocalDateTime\nLocalDate\nLocalTime\n\n\n\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3042\u308a\nZonedDateTime\n\n\n\n\n\u30aa\u30d5\u30bb\u30c3\u30c8\u3042\u308a\nOffsetDateTime\n\nOffsetTime\n\n\n\n\n\u65e5\u4ed8\u306e\u4e00\u90e8\u5206\u3060\u3051\u3092\u6301\u3064\u30af\u30e9\u30b9\n\nYear\nMonth\nYearMonth\nMonthDay\nDayOfWeek\n\n\n\u305d\u306e\u4ed6\u306e\u65e5\u6642\n\nJapaneseDate\nInstant\n\n\n\u6642\u9593\u91cf\n\n\nDuration\n\n\u6642\u9593\u30d9\u30fc\u30b9\u306e\u6642\u9593\n\n\n\nPeriod\n\n\u65e5\u4ed8\u30d9\u30fc\u30b9\u306e\u6642\u9593\u91cf\n\n\n\nJava\u3067\u65e5\u4ed8/\u6642\u9593\u3092\u6271\u3046\u306b\u306f\u5f93\u6765\u306fData/Calendar/DateFormat\u7b49\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u305f\u304c(\u4ee5\u4e0b\u3001\u65e7API)\u3001Java8\u304b\u3089\u306fjava.time\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u65b0\u3057\u304fAPI\u304c\u8ffd\u52a0\u3055\u308c\u305f(\u4ee5\u4e0b\u3001\u65b0API)\u3002\n\n\u3057\u304b\u3057\u65b0API\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\u6570\u304c5\u3001\u30af\u30e9\u30b9\u6570\u306f69\u3082\u3042\u308a\u6700\u521d\u306f\u3069\u308c\u3092\u3069\u3046\u4f7f\u3046\u306e\u304b\u6238\u60d1\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u305d\u3053\u3067\u6700\u4f4e\u9650\u3053\u308c\u3060\u3051\u899a\u3048\u3066\u304a\u3051\u3070\u65e7API\u3068\u540c\u3058\u4e8b\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u7a0b\u5ea6\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n# \u65b0API\u306e\u7279\u5fb4\n\n- \u65e7API\u3068\u306f\u5168\u304f\u5225\u306eAPI\u3002\n- \u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306f\u3001\u65e5\u6642/\u65e5\u4ed8\u306e\u307f/\u6642\u9593\u306e\u307f\u306a\u3069\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3084\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u6709\u7121\u306a\u3069\u3067\u3001\u8907\u6570\u306e\u30af\u30e9\u30b9\u304b\u3089\u9078\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n- \u30c7\u30fc\u30bf\u4fdd\u6301\u3068\u65e5\u4ed8\u64cd\u4f5c(\u5e74/\u6708/\u65e5\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u53d6\u5f97/\u5909\u66f4\u306a\u3069)\u304c1\u30af\u30e9\u30b9\u3067\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002  \n  (\u65e7API\u3067\u306f\u30c7\u30fc\u30bf\u4fdd\u6301\u306fDate\u30af\u30e9\u30b9\u3001\u65e5\u4ed8\u64cd\u4f5c\u306fCalendar\u30af\u30e9\u30b9\u3068\u5206\u304b\u308c\u3066\u3044\u305f)  \n- \u65e5\u6642\u30af\u30e9\u30b9\u306fImmutable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u305f\u3002\u65e2\u5b58\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u969b\u306f\u65b0\u3057\u304f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u4e8b\u306b\u306a\u308b\u3002\n- \u65e7API\u3067\u6708\u306e\u5024\u306f0-11\u3060\u3063\u305f\u304c\u3001\u65b0API\u3067\u306f1-12\u306b\u306a\u3063\u305f\u3002\n\n# \u3053\u306e\u30af\u30e9\u30b9\u3060\u3051\u899a\u3048\u3068\u3051\n\n\u6700\u4f4e\u9650\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u30af\u30e9\u30b9\u3002\n\n## \u65e5\u6642\u30af\u30e9\u30b9\n\n- [java.time.LocalDateTime][LocalDateTime]  \n    - \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u306a\u3044\u65e5\u6642\u3002\n    - \u5185\u90e8\u306b[LocalDate][LocalDate]\u3068[LocalTime][LocalTime]\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u3063\u3066\u3044\u308b\u3002  \n    - \u4f8b\uff1a2015-12-15T23:30:59.999\n- [java.time.ZonedDateTime][ZonedDateTime]\n    - \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u4ed8\u304d\u306e\u65e5\u6642\u3002\n    - \u4f8b\uff1a2015-12-15T23:30:59.999+09:00[Asia/Tokyo]\n- [java.time.OffsetDateTime][OffsetDateTime]\n    - \u30aa\u30d5\u30bb\u30c3\u30c8\u4ed8\u304d\u306e\u65e5\u6642\u3002\n    - \u4f8b\uff1a2015-12-15T23:30:59.999+09:00\n\n\u7279\u5fb4\n\n- \u65e7API\u306eDate\u3068Calendar\u3092\u5408\u308f\u305b\u305f\u3088\u3046\u306a\u30af\u30e9\u30b9\u3002\n- \u6642\u9593\u306f\u30ca\u30ce\u79d2\u307e\u3067\u683c\u7d0d\u3067\u304d\u308b\u3002\n- \u65e5\u6642\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306f\u4ed6\u306b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u3051\u3069\u4f7f\u3044\u65b9\u306f\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u521d\u3081\u306fLocalDateTime\u306e\u4f7f\u3044\u65b9\u3092\u899a\u3048\u308c\u3070\u4ed6\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n## \u30d5\u30a9\u30fc\u30de\u30c3\u30bf\n\n- [java.time.fomat.DateTimeFormatter][DateTimeFormatter]\n  - \u65e5\u4ed8\u30fb\u6642\u523b\u306e\u6587\u5b57\u5217\u51fa\u529b\u3001\u89e3\u6790\u3092\u884c\u3046\u3002\n  - \u65e7API\u306eSimpleDateFormat\u306b\u76f8\u5f53\u3002\n  - ISO\u6a19\u6e96\u5f62\u5f0f\u7b49\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3082\u5b9a\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u3002\n\n## Date\u3068\u306e\u76f8\u4e92\u5909\u63db\n\n- [java.time.Instant][Instant]\n  - \u30a8\u30dd\u30c3\u30af\u79d2\u3092\u8868\u3059long\u5024\u30681\u79d2\u672a\u6e80\u306e\u30ca\u30ce\u79d2\u3092\u8868\u3059int\u5024(0-999,999,999)\u304b\u3089\u306a\u308b\u65e5\u6642\u3002\n  - \u65b0API\u306e\u65e5\u6642\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u552f\u4e00Date\u3068\u306e\u76f8\u4e92\u5909\u63db\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u3002\n  - \u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u3082Instant\u3092\u7d4c\u7531\u3057\u3066Date\u3068\u306e\u76f8\u4e92\u5909\u63db\u304c\u53ef\u80fd\u3002\n\n## \u305d\u306e\u4ed6\n\n- [java.time.ZoneId][ZoneId]\n  - \u30bf\u30a4\u30e0\u30be\u30fc\u30f3ID\u3002(Asia/Tokyo\u306a\u3069)  \n  - ZonedDateTime\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306a\u3069\u306b\u4f7f\u7528\u3059\u308b\u3002\n- [java.time.ZoneOffset][ZoneOffset]\n  - \u30b0\u30ea\u30cb\u30c3\u30b8/UTC\u304b\u3089\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u30fb\u30aa\u30d5\u30bb\u30c3\u30c8(+09:00\u306a\u3069)\u3002\n  - OffsetDateTime\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u6642\u306a\u3069\u306b\u4f7f\u7528\u3059\u308b\u3002\n- [java.time.temporal.ChronoField][ChronoField]\n  - \u300c\u5e74\u300d\u300c\u6708\u300d\u306a\u3069\u306e\u65e5\u6642\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8868\u3059\u5217\u6319\u578b\u3002\n  - [TemporalField][TemporalField]\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3002\n  - \u65e5\u6642\u30af\u30e9\u30b9\u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u306a\u3069\u3001[TemporalField\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9][class-use/TemporalField]\u3067\u4f7f\u7528\u3059\u308b\u3002\n- [java.time.temporal.ChronoUnit][ChronoUnit]\n  - \u300c1\u5e74\u300d\u300c1\u30f6\u6708\u300d\u306a\u3069\u3001\u65e5\u6642\u306e\u5358\u4f4d\u3092\u8868\u3059\u5217\u6319\u578b\u3002\n  - [TemporalUnit][TemporalUnit]\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3002\n  - [TemporalUnit\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9][class-use/TemporalUnit]\u3067\u4f7f\u7528\u3059\u308b\u3002\n\n# \u4f7f\u3044\u65b9\n\n- \u4e3b\u306bLocalDateTime\u306e\u4f7f\u3044\u65b9\u306e\u4f8b\u3002\n- \u30e1\u30bd\u30c3\u30c9\u540d\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u3082\u307b\u307c\u4e00\u7dd2\u3002\n- \u3053\u3053\u306b\u66f8\u3044\u305f\u306e\u306f\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u306a\u306e\u3067\u3001\u8a73\u7d30\u306f\u5404\u30af\u30e9\u30b9\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n## \u73fe\u5728\u65e5\u6642\u306e\u53d6\u5f97 - now\n\n```java:\nLocalDateTime d = LocalDateTime.now();\n```\n\n## \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 - of\n\n```java:\n//\u5e74\u6708\u65e5\u6642\u5206\u79d2\u3092\u6307\u5b9a\nLocalDateTime d1 = LocalDateTime.of(2015, 12, 15, 23, 30, 59);\n//\u5e74\u6708\u65e5\u6642\u5206\u79d2\u30681\u79d2\u672a\u6e80\u306e\u30ca\u30ce\u79d2\u3092\u6307\u5b9a\nLocalDateTime d2 = LocalDateTime.of(2015, 12, 15, 23, 30, 59, 999999999);\n```\n\n## \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u53d6\u5f97 - get\n\n- \u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\n- Calendar.get()\u306b\u76f8\u5f53\u3002\n\n```java:\nLocalDateTime d = LocalDateTime.now();\nSystem.out.println(d.getYear());\nSystem.out.println(d.getMonth());\nSystem.out.println(d.getDayOfMonth());\nSystem.out.println(d.getHour());\nSystem.out.println(d.getMinute());\nSystem.out.println(d.getSecond());\nSystem.out.println(d.getNano());\nSystem.out.println(d.get(ChronoField.YEAR));\n```\n\n## \u5024\u3092\u5909\u66f4\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 \b- plus/minus/with\n\n- \u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u65b0\u3057\u3044\u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n- Calendar.set()\u3084Calendar.add()\u306b\u76f8\u5f53\u3002\n\n```java:\nLocalDateTime d = LocalDateTime.of(2015, 12, 15, 23, 30, 59);\nSystem.out.println(d.plusDays(20));       //2016-01-04T23:30:59\nSystem.out.println(d.minusDays(20));      //2015-11-25T23:30:59\nSystem.out.println(d.withDayOfMonth(20)); //2015-12-20T23:30:59\n```\n\n## \u6642\u9593\u3092\u5207\u308a\u6368\u3066\u308b - truncatedTo\n\n```java:\nLocalDateTime.of(2015, 12, 15, 23, 30, 59).truncatedTo(ChronoUnit.HOURS);\n// 2015-12-15T23:00\n```\n\n## \u6765\u67081\u65e5\u306e12\u6642\n\n```java:\nLocalDateTime d = \n        LocalDateTime.now()\n        .plusMonths(1)\n        .withDayOfMonth(1)\n        .withHour(12)\n        .truncatedTo(ChronoUnit.HOURS);\n```\n\n## ZoneId/ZoneOffset\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\n\n```java:\nZoneId zoneId = ZoneId.systemDefault();\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\nZoneOffset offset = ZoneOffset.UTC;\nZoneOffset offset = ZoneOffset.ofHours(9);\nZoneOffset offset = ZoneId.systemDefault().getRules().getOffset(Instant.now());\n```\n\n## \u4ed6\u306e\u65e5\u6642\u30af\u30e9\u30b9\u306b\u5909\u63db - to/at\n\n```java:\nLocalDateTime ldt = LocalDateTime.now();\n//LocalDateTime -> ZoneDateTime\nZonedDateTime zdt = ldt.atZone(ZoneId.systemDefault());\n//LocalDateTime -> OffsetDateTime\nOffsetDateTime odt = ldt.atOffset(ZoneOffset.ofHours(9));\n//LocalDateTime -> Instant\nInstant instant = ldt.toInstant(ZoneOffset.UTC);\n```\n\n## ISO\u65e5\u6642\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n\n- \u65e5\u6642\u30af\u30e9\u30b9\u306b\u306f\u4e88\u3081ISO\u65e5\u6642\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u3092\u4f7f\u3063\u305f\u6587\u5b57\u5217\u304b\u3089\u65e5\u6642\u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n```java:\nLocalDateTime.parse(\"2015-12-15T23:30\");\nLocalDateTime.parse(\"2015-12-15T23:30:59\");\nLocalDateTime.parse(\"2015-12-15T23:30:59.999\");\n```\n\n## \u30d5\u30a9\u30fc\u30de\u30c3\u30bf\n\n```java:\nDateTimeFormatter f = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\nLocalDateTime d = LocalDateTime.parse(\"2015/12/15 23:30:59\", f);\nSystem.out.println(d.format(f));\n```\n\n\u6ce8\u610f\u70b9\n\n- *DateTime\u30af\u30e9\u30b9\u306eparse()\u3092\u4f7f\u3046\u6642\u306f\u6642\u523b\u3082\u542b\u3081\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n\n## Date\u3068\u306e\u76f8\u4e92\u5909\u63db\n\n- \u65e5\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068Date\u9593\u306e\u5909\u63db\u306fInstant\u30af\u30e9\u30b9\u3092\u7d4c\u7531\u3057\u3066\u884c\u3046\u3002\n\n```java:\n//Date -> *DateTime\nDate date = new Date();\nZonedDateTime zdt = date.toInstant().atZone(ZoneId.systemDefault());\nLocalDateTime ldt = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\nOffsetDateTime odt = OffsetDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\n\n//ZonedDateTime -> Date\nZonedDateTime zdt = ZonedDateTime.now();\nDate date = Date.from(zdt.toInstant());\n\n//OffsetDateTime -> Date\nOffsetDateTime odt = OffsetDateTime.now();\nDate date = Date.from(odt.toInstant());\n\n//LocalDateTime -> Date\nLocalDateTime ldt = LocalDateTime.now();\nDate date = Date.from(ldt.atZone(ZoneId.systemDefault()).toInstant());\n```\n\n# \u65e5\u6642\u30af\u30e9\u30b9\u306e\u4e00\u89a7\n\n\u6700\u5f8c\u306b\u3001\u4f7f\u3048\u305d\u3046\u306a\u65e5\u6642\u30af\u30e9\u30b9\u306e\u4e00\u89a7\u3002\n\n\u65e5\u6642\u30af\u30e9\u30b9\u306f[Temporal][Temporal]\u53c8\u306f[TemporalAccessor][TemporalAccessor]\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3001\u6642\u9593\u91cf\u3092\u8868\u3059\u30af\u30e9\u30b9\u306f[TemporalAmount][TemporalAmount]\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n#### \u4ee3\u8868\u7684\u306a\u65e5\u6642\u30af\u30e9\u30b9\n\n||\u65e5\u4ed8\u3068\u6642\u9593|\u65e5\u4ed8\u306e\u307f|\u6642\u9593\u306e\u307f|\n|:---:|:---:|:---:|:---:|\n|\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306a\u3057|[LocalDateTime][LocalDateTime]|[LocalDate][LocalDate]|[LocalTime][LocalTime]|\n|\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3042\u308a|[ZonedDateTime][ZonedDateTime]|||\n|\u30aa\u30d5\u30bb\u30c3\u30c8\u3042\u308a|[OffsetDateTime][OffsetDateTime]||[OffsetTime][OffsetTime]|\n\n#### \u65e5\u4ed8\u306e\u4e00\u90e8\u5206\u3060\u3051\u3092\u6301\u3064\u30af\u30e9\u30b9\n\n- [Year][Year]\n- [Month][Month]\n- [YearMonth][YearMonth]\n- [MonthDay][MonthDay]\n- [DayOfWeek][DayOfWeek]\n\n#### \u305d\u306e\u4ed6\u306e\u65e5\u6642\n\n- [JapaneseDate][JapaneseDate]\n- [Instant][Instant]\n\n#### \u6642\u9593\u91cf\n\n- \b[Duration][Duration]\n    - \u6642\u9593\u30d9\u30fc\u30b9\u306e\u6642\u9593\n- [Period][Period]\n    - \u65e5\u4ed8\u30d9\u30fc\u30b9\u306e\u6642\u9593\u91cf\n\n[LocalDateTime]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/LocalDateTime.html\n[ZonedDateTime]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/ZonedDateTime.html\n[OffsetDateTime]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/OffsetDateTime.html\n[DateTimeFormatter]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/format/DateTimeFormatter.html\n[Instant]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/Instant.html\n[ZoneId]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/ZoneId.html\n[ZoneOffset]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/ZoneOffset.html\n[ChronoField]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/ChronoField.html\n[ChronoUnit]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/ChronoUnit.html\n\n[LocalDate]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/LocalDate.html\n[LocalTime]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/LocalTime.html\n[OffsetTime]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/OffsetTime.html\n[Year]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/Year.html\n[Month]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/Month.html\n[YearMonth]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/YearMonth.html\n[MonthDay]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/MonthDay.html\n[DayOfWeek]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/DayOfWeek.html\n\n[JapaneseDate]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/chrono/JapaneseDate.html\n\n[Duration]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/Duration.html\n[Period]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/Period.html\n\n[TemporalField]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/TemporalField.html\n[TemporalUnit]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/TemporalUnit.html\n\n[Temporal]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/Temporal.html\n[TemporalAccessor]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/TemporalAccessor.html\n[TemporalAmount]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/TemporalAmount.html\n\n[class-use/TemporalField]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/class-use/TemporalField.html#java.time\n[class-use/TemporalUnit]:http://docs.oracle.com/javase/jp/8/docs/api/java/time/temporal/class-use/TemporalUnit.html#java.time\n", "tags": ["Java", "java8"]}