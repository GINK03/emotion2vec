{"context": "\u5f53\u521d\u3001Eclipse Paho\u3092\u4f7f\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u4f5c\u308d\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001TLS\u3067\u632b\u6298\u3057\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u306fEclipse Mosquitto\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u4f8b\u3067\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nMosquitto\u306e\u958b\u767a\u30d1\u30c3\u30b1\u30fc\u30b8\u306fOS\u6a19\u6e96\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3082\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u306a\u308b\u3079\u304f\u6700\u65b0\u306e\u3082\u306e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002\u4ee5\u524d\u3001\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u4f7f\u3063\u3066\u3044\u305f\u3089\u3001SSL\uff0fTLS\u95a2\u9023\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u30db\u30fc\u30eb\u5bfe\u7b56\u306e\u5f71\u97ff\u3067Broker\u306b\u63a5\u7d9a\u3067\u304d\u306a\u304f\u306a\u308a\u3001\u539f\u56e0\u89e3\u6790\u306b\u6642\u9593\u3092\u53d6\u3089\u308c\u307e\u3057\u305f...\n\nCentOS\n$ sudo wget http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo -O \"/etc/yum.repos.d/Mosquitto.repo\"\n$ sudo yum install mosquitto-devel\n\n\nDebian\uff0fUbuntu Linux\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:mosquitto-dev/mosquitto-ppa\n$ sudo apt-get install libmosquitto-dev\n\n\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u5834\u5408\u3068\u3001BSD\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u3046\u3061\u6687\u306a\u6642\u306b\u8abf\u3079\u3066\u307f\u307e\u3059\uff0e\uff0e\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u3042\u307e\u308a\u96e3\u3057\u3044\u3053\u3068\u306f\u8003\u3048\u305a\u306b\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u3070\u3044\u3044\u3084\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u6700\u512a\u5148\u306b\u3057\u3066\u3001Eclipse Mosquitto\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308btar\u30d5\u30a1\u30a4\u30eb\u306eclient\u306e\u30bd\u30fc\u30b9\u3092\u5207\u308a\u8cbc\u308a\u3057\u307e\u3057\u305f\u3002\u4e00\u5fdc\u3001AWS IoT\u76f8\u624b\u3067\u3082\u901a\u4fe1\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\u6b63\u3057\u3044\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3044\u65b9\u306ftar\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nEclipse Mosquitto\u306eclient\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u3042\u308a\u304b\n$ wget http://mosquitto.org/files/source/mosquitto-1.4.9.tar.gz\n$ tar zxvf mosquitto-1.4.9.tar.gz\n$ cd mosquitto-1.4.9/client/\n\n\nPublisher\n\nmqtt_pub.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <mosquitto.h>\n\n#ifndef TRUE\n#define TRUE 1\n#endif\n\n#ifndef FALSE\n#define FALSE 0\n#endif\n\nchar *topic   = NULL;\nchar *message = NULL;\nint connect_desire = TRUE;\n/* debug mode flag */\nint is_debug = FALSE;\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u6210\u529f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_connect(struct mosquitto *mosq, void *obj, int result)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n    mosquitto_publish(mosq, NULL, topic, strlen(message), message, 0, false);\n}\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_disconnect(struct mosquitto *mosq, void *obj, int rc)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n}\n\n/**\n * Broker\u306bMQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nstatic void on_publish(struct mosquitto *mosq, void *userdata, int mid)\n{\n    connect_desire = FALSE;\n    mosquitto_disconnect(mosq);\n}\n\n/**\n * \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u30a8\u30e9\u30fc\u8868\u793a\u95a2\u6570\n */\nvoid usage()\n{\n    printf(\"mqtt_pub -t <topic> -m <message> [-d]\\n\");\n    printf(\"  Required\\n\");\n    printf(\"    -t topic\\n\");\n    printf(\"    -m message\\n\");\n    printf(\"  SSL Option\\n\");\n    printf(\"    -C : CA cert file\\n\");\n    printf(\"    -c : client cert file\\n\");\n    printf(\"    -k : client private file\\n\");\n    printf(\"  Optional\\n\");\n    printf(\"    -p : port number(no ssl:1883:default, ssl:8883)\\n\");\n    printf(\"    -d : debug mode\\n\");\n    exit(EXIT_FAILURE);\n}\n\n/**\n * mqtt_pub\u30e1\u30a4\u30f3\u95a2\u6570\n */\nint main(int argc, char *argv[])\n{\n    int   ret           = 0;\n    int   cmdopt        = 0;\n    char *id            = \"mqtt/pub\";\n    char *host          = \"localhost\";\n    int   port          = 1883;\n    char *cafile        = NULL;\n    char *certfile      = NULL;\n    char *keyfile       = NULL;\n    int   keepalive     = 60;\n    bool  clean_session = true;\n    struct mosquitto *mosq = NULL;\n\n    while((cmdopt=getopt(argc, argv, \"h:p:C:c:k:t:m:d\")) > 0) {\n        switch(cmdopt) {\n        case 'h':               /* broker uri */\n            host = (char*)strdup(optarg);\n            break;\n        case 'p':               /* port number */\n            port = atoi(optarg);\n            break;\n        case 'C':               /* cafile cert file */\n            cafile = (char*)strdup(optarg);\n            break;\n        case 'c':               /* client cert file */\n            certfile = (char*)strdup(optarg);\n            break;\n        case 'k':               /* client key file */\n            keyfile = (char*)strdup(optarg);\n            break;\n        case 't':               /* Topic */\n            topic = (char*)strdup(optarg);\n            break;\n        case 'm':               /* Message */\n            message = (char*)strdup(optarg);\n            break;\n        case 'd':               /* debug mode */\n            is_debug = TRUE;\n            break;\n        default:\n            usage();\n        }\n    }\n    /* topic\u3068message\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5f15\u6570NG */\n    if((topic == NULL) || (message == NULL)) {\n        usage();\n    }\n    /* \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u79d8\u5bc6\u9375\u306f\u3069\u3061\u3089\u304b\u4e00\u65b9\u3092\n     * \u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u4ed6\u65b9\u306e\u6307\u5b9a\u3082\u5fc5\u9808\n     */\n    if(\n       ((certfile == NULL) && (keyfile != NULL)) ||\n       ((certfile != NULL) && (keyfile == NULL))\n    ) {\n        usage();\n    }\n\n    if(is_debug) {\n        printf(\"  %s\\n\", host);\n        printf(\"  %d\\n\", port);\n        printf(\"  %s\\n\", cafile);\n        printf(\"  %s\\n\", certfile);\n        printf(\"  %s\\n\", keyfile);\n        printf(\"  %s\\n\", topic);\n        printf(\"  %s\\n\", message);\n    }\n\n    mosquitto_lib_init();\n    mosq = mosquitto_new(id, clean_session, NULL);\n    if(!mosq){\n        fprintf(stderr, \"Cannot create mosquitto object\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n    mosquitto_connect_callback_set(mosq, on_connect);\n    mosquitto_disconnect_callback_set(mosq, on_disconnect);\n    mosquitto_publish_callback_set(mosq, on_publish);\n\n    if(cafile != NULL) {\n        ret = mosquitto_tls_set(mosq, cafile, NULL, certfile, keyfile, NULL);\n        if(ret != MOSQ_ERR_SUCCESS) {\n            printf(\"mosquitto_tls_set function is failed.\\n\");\n        }\n        mosquitto_tls_insecure_set(mosq, true);\n    }\n\n    if(mosquitto_connect_bind(mosq, host, port, keepalive, NULL)){\n        fprintf(stderr, \"failed to connect broker.\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n\n    do {\n        ret = mosquitto_loop_forever(mosq, -1, 1);\n    } while((ret == MOSQ_ERR_SUCCESS) && (connect_desire != FALSE));\n\n    mosquitto_destroy(mosq);\n    mosquitto_lib_cleanup();\n\n    return(EXIT_SUCCESS);\n}\n\n\n$ gcc -Wall -g mqtt_pub.c -o mqtt_pub -lmosquitto\n\n\nSubscriber\n\nmqtt_sub.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <mosquitto.h>\n\n#ifndef TRUE\n#define TRUE 1\n#endif\n\n#ifndef FALSE\n#define FALSE 0\n#endif\n\nchar *topic   = NULL;\n/* debug mode flag */\nint is_debug = FALSE;\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u6210\u529f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_connect(struct mosquitto *mosq, void *obj, int result)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n    mosquitto_subscribe(mosq, NULL, topic, 0);\n}\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_disconnect(struct mosquitto *mosq, void *obj, int rc)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n}\n\n/**\n * \u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u51e6\u7406\n */\nvoid on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n\n    if(message->payloadlen){\n        printf(\"%s \", message->topic);\n        fwrite(message->payload, 1, message->payloadlen, stdout);\n        printf(\"\\n\");\n    }else{\n        printf(\"%s (null)\\n\", message->topic);\n    }\n    fflush(stdout);\n}\n\n/**\n * \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u30a8\u30e9\u30fc\u8868\u793a\u95a2\u6570\n */\nvoid usage()\n{\n    printf(\"mqtt_pub -t <topic> [-d]\\n\");\n    printf(\"  Required\\n\");\n    printf(\"    -t topic\\n\");\n    printf(\"  SSL Option\\n\");\n    printf(\"    -C : CA cert file\\n\");\n    printf(\"    -c : client cert file\\n\");\n    printf(\"    -k : client private file\\n\");\n    printf(\"  Optional\\n\");\n    printf(\"    -p : port number(no ssl:1883:default, ssl:8883)\\n\");\n    printf(\"    -d : debug mode\\n\");\n    exit(EXIT_FAILURE);\n}\n\n/**\n * mqtt_sub\u30e1\u30a4\u30f3\u95a2\u6570\n */\nint main(int argc, char *argv[])\n{\n    int   ret           = 0;\n    int   cmdopt        = 0;\n    char *id            = \"mqtt/sub\";\n    char *host          = \"localhost\";\n    int   port          = 1883;\n    char *cafile        = NULL;\n    char *certfile      = NULL;\n    char *keyfile       = NULL;\n    int   keepalive     = 60;\n    bool  clean_session = true;\n    struct mosquitto *mosq = NULL;\n\n    while((cmdopt=getopt(argc, argv, \"h:p:C:c:k:t:m:d\")) > 0) {\n        switch(cmdopt) {\n        case 'h':               /* broker uri */\n            host = (char*)strdup(optarg);\n            break;\n        case 'p':               /* port number */\n            port = atoi(optarg);\n            break;\n        case 'C':               /* cafile cert file */\n            cafile = (char*)strdup(optarg);\n            break;\n        case 'c':               /* client cert file */\n            certfile = (char*)strdup(optarg);\n            break;\n        case 'k':               /* client key file */\n            keyfile = (char*)strdup(optarg);\n            break;\n        case 't':               /* Topic */\n            topic = (char*)strdup(optarg);\n            break;\n        case 'd':               /* debug mode */\n            is_debug = TRUE;\n            break;\n        default:\n            usage();\n        }\n    }\n    /* topic\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5f15\u6570NG */\n    if(topic == NULL) {\n        usage();\n    }\n    /* \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u79d8\u5bc6\u9375\u306f\u3069\u3061\u3089\u304b\u4e00\u65b9\u3092\n     * \u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u4ed6\u65b9\u306e\u6307\u5b9a\u3082\u5fc5\u9808\n     */\n    if(\n       ((certfile == NULL) && (keyfile != NULL)) ||\n       ((certfile != NULL) && (keyfile == NULL))\n    ) {\n        usage();\n    }\n\n    if(is_debug) {\n        printf(\"  %s\\n\", host);\n        printf(\"  %d\\n\", port);\n        printf(\"  %s\\n\", cafile);\n        printf(\"  %s\\n\", certfile);\n        printf(\"  %s\\n\", keyfile);\n        printf(\"  %s\\n\", topic);\n    }\n\n    mosquitto_lib_init();\n    mosq = mosquitto_new(id, clean_session, NULL);\n    if(!mosq){\n        fprintf(stderr, \"Cannot create mosquitto object\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n    mosquitto_connect_callback_set(mosq, on_connect);\n    mosquitto_disconnect_callback_set(mosq, on_disconnect);\n    mosquitto_message_callback_set(mosq, on_message);\n\n    if(cafile != NULL) {\n        ret = mosquitto_tls_set(mosq, cafile, NULL, certfile, keyfile, NULL);\n        if(ret != MOSQ_ERR_SUCCESS) {\n            printf(\"mosquitto_tls_set function is failed.\\n\");\n        }\n        mosquitto_tls_insecure_set(mosq, true);\n    }\n\n    if(mosquitto_connect_bind(mosq, host, port, keepalive, NULL)){\n        fprintf(stderr, \"failed to connect broker.\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n\n    ret = mosquitto_loop_forever(mosq, -1, 1);\n\n    mosquitto_destroy(mosq);\n    mosquitto_lib_cleanup();\n\n    return(EXIT_SUCCESS);\n}\n\n\n$ gcc -Wall -g mqtt_sub.c -o mqtt_sub -lmosquitto\n\n\n\u305d\u306e\u4ed6\u30e1\u30e2\n\nSubscriber\u3067\u6307\u5b9a\u3059\u308b\u30c8\u30d4\u30c3\u30af\nSubscriber\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30c8\u30d4\u30c3\u30af\u306b\u300c#\u300d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u300c\u3059\u3079\u3066\u306e\u30c8\u30d4\u30c3\u30af\u300d\u306e\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002Subscriber\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u305f\u6642\u306b\u30c8\u30d4\u30c3\u30af\u95a2\u9023\u51e6\u7406\u306e\u30d0\u30b0\u304b\u3069\u3046\u304b\u306e\u5207\u308a\u5206\u3051\u306b\u5f79\u7acb\u3064\u3053\u3068\u304c\u3001\u305f\u307e\u306b\u3001\u3042\u308a\u307e\u3059\u3002\n\n\u4e00\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Publisher\uff0fSubscriber\u306e\u4e21\u65b9\u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\n\nPublisher\uff0fSubscriber\u3054\u3068\u306bMosquitto\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8cbc\u308b\u306e\u3067\u306f\u306a\u304f\u3001\uff11\u3064\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3067\u4e21\u65b9\u306e\u901a\u4fe1\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30df\u30b9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5225\u3005\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8cbc\u3063\u3066\u901a\u4fe1\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u843d\u3061\u307e\u3057\u305f\uff0e\uff0e\uff0e\nMQTT\u5c02\u7528\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308c\u3070\u7279\u306b\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4ed6\u306b\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u3084\u3089\u305b\u305f\u308a\u3057\u3088\u3046\u3068\u3059\u308b\u5834\u5408\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3088\u308a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u65b9\u304c\u3001\u683c\u6bb5\u306b\u3084\u308a\u3084\u3059\u305d\u3046\u3067\u3059\u3002Subscriber\u306e\u5b9f\u88c5\u3092select\u5f85\u3061\u3067\u3084\u308b\u306e\u306f\u7d50\u69cb\u9762\u5012\u3067\u3001\u4e00\u5fdc\u9811\u5f35\u3063\u3066\u306f\u307f\u307e\u3057\u305f\u304c\u3001\u30bd\u30b1\u30c3\u30c8\u304b\u3089\u53d6\u5f97\u3057\u305f\u96fb\u6587\u89e3\u6790\u3067\u8ae6\u3081\u307e\u3057\u305f\u3002\n\n\u5f53\u521d\u3001[Eclipse Paho](https://eclipse.org/paho/clients/c/)\u3092\u4f7f\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u4f5c\u308d\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001TLS\u3067\u632b\u6298\u3057\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u5185\u5bb9\u306f[Eclipse Mosquitto](https://mosquitto.org/)\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u4f8b\u3067\u3059\u3002\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nMosquitto\u306e\u958b\u767a\u30d1\u30c3\u30b1\u30fc\u30b8\u306fOS\u6a19\u6e96\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u3082\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u306a\u308b\u3079\u304f\u6700\u65b0\u306e\u3082\u306e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002\u4ee5\u524d\u3001\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u4f7f\u3063\u3066\u3044\u305f\u3089\u3001SSL\uff0fTLS\u95a2\u9023\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u30db\u30fc\u30eb\u5bfe\u7b56\u306e\u5f71\u97ff\u3067Broker\u306b\u63a5\u7d9a\u3067\u304d\u306a\u304f\u306a\u308a\u3001\u539f\u56e0\u89e3\u6790\u306b\u6642\u9593\u3092\u53d6\u3089\u308c\u307e\u3057\u305f...\n\n## CentOS\n\n```\n$ sudo wget http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/home:oojah:mqtt.repo -O \"/etc/yum.repos.d/Mosquitto.repo\"\n$ sudo yum install mosquitto-devel\n```\n\n\n## Debian\uff0fUbuntu Linux\n\n\n```\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:mosquitto-dev/mosquitto-ppa\n$ sudo apt-get install libmosquitto-dev\n```\n\n\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u5834\u5408\u3068\u3001BSD\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u3046\u3061\u6687\u306a\u6642\u306b\u8abf\u3079\u3066\u307f\u307e\u3059\uff0e\uff0e\uff0e\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u3042\u307e\u308a\u96e3\u3057\u3044\u3053\u3068\u306f\u8003\u3048\u305a\u306b\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u3051\u3070\u3044\u3044\u3084\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u6700\u512a\u5148\u306b\u3057\u3066\u3001[Eclipse Mosquitto](https://mosquitto.org/)\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30da\u30fc\u30b8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308btar\u30d5\u30a1\u30a4\u30eb\u306eclient\u306e\u30bd\u30fc\u30b9\u3092\u5207\u308a\u8cbc\u308a\u3057\u307e\u3057\u305f\u3002\u4e00\u5fdc\u3001AWS IoT\u76f8\u624b\u3067\u3082\u901a\u4fe1\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u6b63\u3057\u3044\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3044\u65b9\u306ftar\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n## Eclipse Mosquitto\u306eclient\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u3042\u308a\u304b\n\n```\n$ wget http://mosquitto.org/files/source/mosquitto-1.4.9.tar.gz\n$ tar zxvf mosquitto-1.4.9.tar.gz\n$ cd mosquitto-1.4.9/client/\n```\n\n\n## Publisher\n\n```c:mqtt_pub.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <mosquitto.h>\n\n#ifndef TRUE\n#define TRUE 1\n#endif\n\n#ifndef FALSE\n#define FALSE 0\n#endif\n\nchar *topic   = NULL;\nchar *message = NULL;\nint connect_desire = TRUE;\n/* debug mode flag */\nint is_debug = FALSE;\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u6210\u529f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_connect(struct mosquitto *mosq, void *obj, int result)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n    mosquitto_publish(mosq, NULL, topic, strlen(message), message, 0, false);\n}\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_disconnect(struct mosquitto *mosq, void *obj, int rc)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n}\n\n/**\n * Broker\u306bMQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nstatic void on_publish(struct mosquitto *mosq, void *userdata, int mid)\n{\n    connect_desire = FALSE;\n    mosquitto_disconnect(mosq);\n}\n\n/**\n * \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u30a8\u30e9\u30fc\u8868\u793a\u95a2\u6570\n */\nvoid usage()\n{\n    printf(\"mqtt_pub -t <topic> -m <message> [-d]\\n\");\n    printf(\"  Required\\n\");\n    printf(\"    -t topic\\n\");\n    printf(\"    -m message\\n\");\n    printf(\"  SSL Option\\n\");\n    printf(\"    -C : CA cert file\\n\");\n    printf(\"    -c : client cert file\\n\");\n    printf(\"    -k : client private file\\n\");\n    printf(\"  Optional\\n\");\n    printf(\"    -p : port number(no ssl:1883:default, ssl:8883)\\n\");\n    printf(\"    -d : debug mode\\n\");\n    exit(EXIT_FAILURE);\n}\n\n/**\n * mqtt_pub\u30e1\u30a4\u30f3\u95a2\u6570\n */\nint main(int argc, char *argv[])\n{\n    int   ret           = 0;\n    int   cmdopt        = 0;\n    char *id            = \"mqtt/pub\";\n    char *host          = \"localhost\";\n    int   port          = 1883;\n    char *cafile        = NULL;\n    char *certfile      = NULL;\n    char *keyfile       = NULL;\n    int   keepalive     = 60;\n    bool  clean_session = true;\n    struct mosquitto *mosq = NULL;\n\n    while((cmdopt=getopt(argc, argv, \"h:p:C:c:k:t:m:d\")) > 0) {\n        switch(cmdopt) {\n        case 'h':               /* broker uri */\n            host = (char*)strdup(optarg);\n            break;\n        case 'p':               /* port number */\n            port = atoi(optarg);\n            break;\n        case 'C':               /* cafile cert file */\n            cafile = (char*)strdup(optarg);\n            break;\n        case 'c':               /* client cert file */\n            certfile = (char*)strdup(optarg);\n            break;\n        case 'k':               /* client key file */\n            keyfile = (char*)strdup(optarg);\n            break;\n        case 't':               /* Topic */\n            topic = (char*)strdup(optarg);\n            break;\n        case 'm':               /* Message */\n            message = (char*)strdup(optarg);\n            break;\n        case 'd':               /* debug mode */\n            is_debug = TRUE;\n            break;\n        default:\n            usage();\n        }\n    }\n    /* topic\u3068message\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5f15\u6570NG */\n    if((topic == NULL) || (message == NULL)) {\n        usage();\n    }\n    /* \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u79d8\u5bc6\u9375\u306f\u3069\u3061\u3089\u304b\u4e00\u65b9\u3092\n     * \u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u4ed6\u65b9\u306e\u6307\u5b9a\u3082\u5fc5\u9808\n     */\n    if(\n       ((certfile == NULL) && (keyfile != NULL)) ||\n       ((certfile != NULL) && (keyfile == NULL))\n    ) {\n        usage();\n    }\n\n    if(is_debug) {\n        printf(\"  %s\\n\", host);\n        printf(\"  %d\\n\", port);\n        printf(\"  %s\\n\", cafile);\n        printf(\"  %s\\n\", certfile);\n        printf(\"  %s\\n\", keyfile);\n        printf(\"  %s\\n\", topic);\n        printf(\"  %s\\n\", message);\n    }\n\n    mosquitto_lib_init();\n    mosq = mosquitto_new(id, clean_session, NULL);\n    if(!mosq){\n        fprintf(stderr, \"Cannot create mosquitto object\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n    mosquitto_connect_callback_set(mosq, on_connect);\n    mosquitto_disconnect_callback_set(mosq, on_disconnect);\n    mosquitto_publish_callback_set(mosq, on_publish);\n\n    if(cafile != NULL) {\n        ret = mosquitto_tls_set(mosq, cafile, NULL, certfile, keyfile, NULL);\n        if(ret != MOSQ_ERR_SUCCESS) {\n            printf(\"mosquitto_tls_set function is failed.\\n\");\n        }\n        mosquitto_tls_insecure_set(mosq, true);\n    }\n\n    if(mosquitto_connect_bind(mosq, host, port, keepalive, NULL)){\n        fprintf(stderr, \"failed to connect broker.\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n\n    do {\n        ret = mosquitto_loop_forever(mosq, -1, 1);\n    } while((ret == MOSQ_ERR_SUCCESS) && (connect_desire != FALSE));\n\n    mosquitto_destroy(mosq);\n    mosquitto_lib_cleanup();\n\n    return(EXIT_SUCCESS);\n}\n```\n\n```\n$ gcc -Wall -g mqtt_pub.c -o mqtt_pub -lmosquitto\n```\n\n## Subscriber\n\n```c:mqtt_sub.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <mosquitto.h>\n\n#ifndef TRUE\n#define TRUE 1\n#endif\n\n#ifndef FALSE\n#define FALSE 0\n#endif\n\nchar *topic   = NULL;\n/* debug mode flag */\nint is_debug = FALSE;\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u6210\u529f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_connect(struct mosquitto *mosq, void *obj, int result)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n    mosquitto_subscribe(mosq, NULL, topic, 0);\n}\n\n/**\n * Broker\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3057\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308bcallback\u95a2\u6570\n */\nvoid on_disconnect(struct mosquitto *mosq, void *obj, int rc)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n}\n\n/**\n * \u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u51e6\u7406\n */\nvoid on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)\n{\n    if(is_debug) {\n        printf(\"%s(%d)\\n\", __FUNCTION__, __LINE__);\n    }\n\n    if(message->payloadlen){\n        printf(\"%s \", message->topic);\n        fwrite(message->payload, 1, message->payloadlen, stdout);\n        printf(\"\\n\");\n    }else{\n        printf(\"%s (null)\\n\", message->topic);\n    }\n    fflush(stdout);\n}\n\n/**\n * \u30b3\u30de\u30f3\u30c9\u5f15\u6570\u30a8\u30e9\u30fc\u8868\u793a\u95a2\u6570\n */\nvoid usage()\n{\n    printf(\"mqtt_pub -t <topic> [-d]\\n\");\n    printf(\"  Required\\n\");\n    printf(\"    -t topic\\n\");\n    printf(\"  SSL Option\\n\");\n    printf(\"    -C : CA cert file\\n\");\n    printf(\"    -c : client cert file\\n\");\n    printf(\"    -k : client private file\\n\");\n    printf(\"  Optional\\n\");\n    printf(\"    -p : port number(no ssl:1883:default, ssl:8883)\\n\");\n    printf(\"    -d : debug mode\\n\");\n    exit(EXIT_FAILURE);\n}\n\n/**\n * mqtt_sub\u30e1\u30a4\u30f3\u95a2\u6570\n */\nint main(int argc, char *argv[])\n{\n    int   ret           = 0;\n    int   cmdopt        = 0;\n    char *id            = \"mqtt/sub\";\n    char *host          = \"localhost\";\n    int   port          = 1883;\n    char *cafile        = NULL;\n    char *certfile      = NULL;\n    char *keyfile       = NULL;\n    int   keepalive     = 60;\n    bool  clean_session = true;\n    struct mosquitto *mosq = NULL;\n\n    while((cmdopt=getopt(argc, argv, \"h:p:C:c:k:t:m:d\")) > 0) {\n        switch(cmdopt) {\n        case 'h':               /* broker uri */\n            host = (char*)strdup(optarg);\n            break;\n        case 'p':               /* port number */\n            port = atoi(optarg);\n            break;\n        case 'C':               /* cafile cert file */\n            cafile = (char*)strdup(optarg);\n            break;\n        case 'c':               /* client cert file */\n            certfile = (char*)strdup(optarg);\n            break;\n        case 'k':               /* client key file */\n            keyfile = (char*)strdup(optarg);\n            break;\n        case 't':               /* Topic */\n            topic = (char*)strdup(optarg);\n            break;\n        case 'd':               /* debug mode */\n            is_debug = TRUE;\n            break;\n        default:\n            usage();\n        }\n    }\n    /* topic\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5f15\u6570NG */\n    if(topic == NULL) {\n        usage();\n    }\n    /* \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a3c\u660e\u66f8\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u79d8\u5bc6\u9375\u306f\u3069\u3061\u3089\u304b\u4e00\u65b9\u3092\n     * \u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u4ed6\u65b9\u306e\u6307\u5b9a\u3082\u5fc5\u9808\n     */\n    if(\n       ((certfile == NULL) && (keyfile != NULL)) ||\n       ((certfile != NULL) && (keyfile == NULL))\n    ) {\n        usage();\n    }\n\n    if(is_debug) {\n        printf(\"  %s\\n\", host);\n        printf(\"  %d\\n\", port);\n        printf(\"  %s\\n\", cafile);\n        printf(\"  %s\\n\", certfile);\n        printf(\"  %s\\n\", keyfile);\n        printf(\"  %s\\n\", topic);\n    }\n\n    mosquitto_lib_init();\n    mosq = mosquitto_new(id, clean_session, NULL);\n    if(!mosq){\n        fprintf(stderr, \"Cannot create mosquitto object\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n    mosquitto_connect_callback_set(mosq, on_connect);\n    mosquitto_disconnect_callback_set(mosq, on_disconnect);\n    mosquitto_message_callback_set(mosq, on_message);\n\n    if(cafile != NULL) {\n        ret = mosquitto_tls_set(mosq, cafile, NULL, certfile, keyfile, NULL);\n        if(ret != MOSQ_ERR_SUCCESS) {\n            printf(\"mosquitto_tls_set function is failed.\\n\");\n        }\n        mosquitto_tls_insecure_set(mosq, true);\n    }\n\n    if(mosquitto_connect_bind(mosq, host, port, keepalive, NULL)){\n        fprintf(stderr, \"failed to connect broker.\\n\");\n        mosquitto_lib_cleanup();\n        return(EXIT_FAILURE);\n    }\n\n    ret = mosquitto_loop_forever(mosq, -1, 1);\n\n    mosquitto_destroy(mosq);\n    mosquitto_lib_cleanup();\n\n    return(EXIT_SUCCESS);\n}\n```\n\n```\n$ gcc -Wall -g mqtt_sub.c -o mqtt_sub -lmosquitto\n```\n\n# \u305d\u306e\u4ed6\u30e1\u30e2\n\n## Subscriber\u3067\u6307\u5b9a\u3059\u308b\u30c8\u30d4\u30c3\u30af\n\nSubscriber\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30c8\u30d4\u30c3\u30af\u306b\u300c#\u300d\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u300c\u3059\u3079\u3066\u306e\u30c8\u30d4\u30c3\u30af\u300d\u306e\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002Subscriber\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u305f\u6642\u306b\u30c8\u30d4\u30c3\u30af\u95a2\u9023\u51e6\u7406\u306e\u30d0\u30b0\u304b\u3069\u3046\u304b\u306e\u5207\u308a\u5206\u3051\u306b\u5f79\u7acb\u3064\u3053\u3068\u304c\u3001\u305f\u307e\u306b\u3001\u3042\u308a\u307e\u3059\u3002\n\n\n## \u4e00\u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067Publisher\uff0fSubscriber\u306e\u4e21\u65b9\u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\n\n- Publisher\uff0fSubscriber\u3054\u3068\u306bMosquitto\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8cbc\u308b\u306e\u3067\u306f\u306a\u304f\u3001\uff11\u3064\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3067\u4e21\u65b9\u306e\u901a\u4fe1\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30df\u30b9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5225\u3005\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8cbc\u3063\u3066\u901a\u4fe1\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u843d\u3061\u307e\u3057\u305f\uff0e\uff0e\uff0e\n\n- MQTT\u5c02\u7528\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308c\u3070\u7279\u306b\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4ed6\u306b\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u3084\u3089\u305b\u305f\u308a\u3057\u3088\u3046\u3068\u3059\u308b\u5834\u5408\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3088\u308a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u65b9\u304c\u3001\u683c\u6bb5\u306b\u3084\u308a\u3084\u3059\u305d\u3046\u3067\u3059\u3002Subscriber\u306e\u5b9f\u88c5\u3092select\u5f85\u3061\u3067\u3084\u308b\u306e\u306f\u7d50\u69cb\u9762\u5012\u3067\u3001\u4e00\u5fdc\u9811\u5f35\u3063\u3066\u306f\u307f\u307e\u3057\u305f\u304c\u3001\u30bd\u30b1\u30c3\u30c8\u304b\u3089\u53d6\u5f97\u3057\u305f\u96fb\u6587\u89e3\u6790\u3067\u8ae6\u3081\u307e\u3057\u305f\u3002\n", "tags": ["C", "mqtt", "mosquitto"]}