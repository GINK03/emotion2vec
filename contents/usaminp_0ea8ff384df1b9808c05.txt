{"tags": ["Python", "NLP"], "context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\n\n\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u9069\u5f53\u306a\u3068\u3053\u308d\u304c\u591a\u3005\u3042\u308a\u307e\u3059.\n# coding:utf-8\n# 00 \u6587\u5b57\u5217\u306e\u9006\u9806\nstring = \"stressed\"\nprint string[::-1]\nprint \"\".join(reversed(string))\n\n\n# 01 \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\nstring = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint string[0::2]\nprint string[1::2]\n\n\n# 02 \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\nstring1 = u\"\u30d1\u30c8\u30ab\u30fc\"\nstring2 = u\"\u30bf\u30af\u30b7\u30fc\"\nret = \"\"\nfor s1, s2 in zip(string1, string2):\n    ret+=(s1+s2)\n\nprint ret\n\n\n# 03 \u5186\u5468\u7387\nstring = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\nstring.replace(\", \", \"\").replace(\".\", \"\")\nwords = string.split(\" \")\nprint \"\".join(map(lambda x: str(len(x)), words))\n\n\n# 04 \u5143\u7d20\u8a18\u53f7\nstring = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nwords = string.split(\" \")\nn = [1, 5, 6, 7, 8, 9, 15, 16, 19]\nd = {}\nfor idx, word in enumerate(words):\n    if idx+1 in n:\n        d[idx+1] = word[0]\n    else:\n        d[idx+1] = word[0:2]\n\nprint d\n\n\n# 05 n-gram\ndef ngram(seq, n=2):\n    ret = []\n    N = len(seq)-n+1\n    for i in xrange(N):\n        ret.append(seq[i:i+n])\n\n    return ret\n\nseq1 = \"I am an NLPer\"\nseq2 = seq1.split(\" \")\n\nprint ngram(seq1)\nprint ngram(seq2)\n\n\n# 06 \u96c6\u5408\nseq1 = \"paraparaparadise\"\nseq2 = \"paragraph\"\nX = set(ngram(seq1))\nY = set(ngram(seq2))\nprint \"X: %s\"%X\nprint \"Y: %s\"%Y\nprint \"X+Y: %s\"%(X|Y)\nprint \"X-Y: %s\"%(X-Y)\nprint \"X&Y: %s\"%(X&Y)\n\n\n# 07 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\ndef template(x=12, y=\"\u6c17\u6e29\", z=22.4):\n    return \"%s\u6642\u306e%s\u306f%s\"%(x, y, z)\n\nprint template()\n\n\n# 08 \u6697\u53f7\u6587\nstring = u\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\"\ndef cipher(string):\n    l = \"abcdefghijklmnopqrstuvwxyz\"\n    ret = \"\"\n    for s in string:\n        if s in l:\n            s = chr(219-ord(s))\n\n        ret += s\n\n    return ret\n\nprint cipher(string)# encode\nprint cipher(cipher(string))# decode\n\n\n# 09 Typoglycemia\nimport random\n\ndef typoglycemia(string):\n    ret = []\n    for word in string.split(\" \"):\n        if len(word) <= 4:\n            ret.append(word)\n\n        else:\n            typo = word[0] + \"\".join(random.sample(word[1:-1], len(word[1:-1]))) + word[-1]\n            ret.append(typo)\n\n    return \" \".join(ret)\n\nstring = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind.\"\nprint typoglycemia(string)\n\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\n***\n\u6642\u9593\u304c\u306a\u3044\u306e\u3067\u9069\u5f53\u306a\u3068\u3053\u308d\u304c\u591a\u3005\u3042\u308a\u307e\u3059.\n\n```py\n# coding:utf-8\n# 00 \u6587\u5b57\u5217\u306e\u9006\u9806\nstring = \"stressed\"\nprint string[::-1]\nprint \"\".join(reversed(string))\n\n\n# 01 \u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\nstring = u\"\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\"\nprint string[0::2]\nprint string[1::2]\n\n\n# 02 \u300c\u30d1\u30c8\u30ab\u30fc\u300d\uff0b\u300c\u30bf\u30af\u30b7\u30fc\u300d\uff1d\u300c\u30d1\u30bf\u30c8\u30af\u30ab\u30b7\u30fc\u30fc\u300d\nstring1 = u\"\u30d1\u30c8\u30ab\u30fc\"\nstring2 = u\"\u30bf\u30af\u30b7\u30fc\"\nret = \"\"\nfor s1, s2 in zip(string1, string2):\n    ret+=(s1+s2)\n\nprint ret\n\n\n# 03 \u5186\u5468\u7387\nstring = \"Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.\"\nstring.replace(\", \", \"\").replace(\".\", \"\")\nwords = string.split(\" \")\nprint \"\".join(map(lambda x: str(len(x)), words))\n\n\n# 04 \u5143\u7d20\u8a18\u53f7\nstring = \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nwords = string.split(\" \")\nn = [1, 5, 6, 7, 8, 9, 15, 16, 19]\nd = {}\nfor idx, word in enumerate(words):\n    if idx+1 in n:\n        d[idx+1] = word[0]\n    else:\n        d[idx+1] = word[0:2]\n\nprint d\n\n\n# 05 n-gram\ndef ngram(seq, n=2):\n    ret = []\n    N = len(seq)-n+1\n    for i in xrange(N):\n        ret.append(seq[i:i+n])\n\n    return ret\n\nseq1 = \"I am an NLPer\"\nseq2 = seq1.split(\" \")\n\nprint ngram(seq1)\nprint ngram(seq2)\n\n\n# 06 \u96c6\u5408\nseq1 = \"paraparaparadise\"\nseq2 = \"paragraph\"\nX = set(ngram(seq1))\nY = set(ngram(seq2))\nprint \"X: %s\"%X\nprint \"Y: %s\"%Y\nprint \"X+Y: %s\"%(X|Y)\nprint \"X-Y: %s\"%(X-Y)\nprint \"X&Y: %s\"%(X&Y)\n\n\n# 07 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308b\u6587\u751f\u6210\ndef template(x=12, y=\"\u6c17\u6e29\", z=22.4):\n    return \"%s\u6642\u306e%s\u306f%s\"%(x, y, z)\n\nprint template()\n\n\n# 08 \u6697\u53f7\u6587\nstring = u\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u3092\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3067\u5909\u63db\u3059\u308b\u95a2\u6570cipher\u3092\u5b9f\u88c5\u305b\u3088\uff0e\"\ndef cipher(string):\n    l = \"abcdefghijklmnopqrstuvwxyz\"\n    ret = \"\"\n    for s in string:\n        if s in l:\n            s = chr(219-ord(s))\n\n        ret += s\n\n    return ret\n\nprint cipher(string)# encode\nprint cipher(cipher(string))# decode\n\n\n# 09 Typoglycemia\nimport random\n\ndef typoglycemia(string):\n    ret = []\n    for word in string.split(\" \"):\n        if len(word) <= 4:\n            ret.append(word)\n\n        else:\n            typo = word[0] + \"\".join(random.sample(word[1:-1], len(word[1:-1]))) + word[-1]\n            ret.append(typo)\n\n    return \" \".join(ret)\n\nstring = \"I couldn't believe that I could actually understand what I was reading : the phenomenal power of the human mind.\"\nprint typoglycemia(string)\n```\n\n"}