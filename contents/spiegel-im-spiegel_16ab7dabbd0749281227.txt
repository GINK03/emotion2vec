{"context": " More than 1 year has passed since last update.Go \u8a00\u8a9e\u3067\u6587\u5b57\u5217\u306e\u9023\u7d50\u3092\u884c\u3046\u969b\u306b\u3069\u3046\u3084\u308b\u306e\u304c\u4e00\u756a\u901f\u3044\u304b\uff0c\u3068\u3044\u3046\u8a71\u3002\n\n\u6587\u5b57\u5217\u9023\u7d50\u3092\u884c\u30464\u3064\u306e\u65b9\u6cd5\nGo \u8a00\u8a9e\u3067\u6587\u5b57\u5217\u306e\u9023\u7d50\u3092\u884c\u3046\u969b\u306b\u306f\u6982\u306d\u4ee5\u4e0b\u306e4\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n\u201c+\u201d \u6f14\u7b97\u5b50\u3067\u9023\u7d50\u3059\u308b\n\nstrings.Join \u3067\u9023\u7d50\u3059\u308b\n\nbytes.Buffer \u3067\u8ffd\u8a18\u3059\u308b\n\n[]byte \u306b append \u3059\u308b\n\nstring \u578b\u306f\u300c\u4e0d\u5909\uff08immutable\uff09\u300d\u306a\u306e\u3067\uff0c\u6700\u521d\u306e2\u3064\u304c\u9ad8\u30b3\u30b9\u30c8\u306b\u306a\u308b\u3060\u308d\u3046\u3053\u3068\u306f\u3059\u3050\u306b\u60f3\u50cf\u304c\u3064\u304f\u3002\n\nGo\u3067\u306f\u6587\u5b57\u5217\u9023\u7d50\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u64cd\u4f5c - Qiita\nGo\u8a00\u8a9e\u3067\u52b9\u7387\u826f\u304f\u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b\u8a71 #golang - memo\u30e1\u30e2\n\n\u3067\u306f\u6b8b\u308a\u306e2\u3064\u306f\u3069\u3046\u306a\u306e\u304b\u3068\u3044\u3046\u3068\n\nGo\u306e\u6587\u5b57\u5217\u7d50\u5408\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 - Qiita\n\n\u306b\u3088\u308b\u3068\u6700\u5f8c\u306e\u304c\u4e00\u756a\u901f\u3044\u3089\u3057\u3044\u3002\u307b\u3093\u3058\u3083\u307e\u3041\uff0c\u78ba\u304b\u3081\u3066\u307f\u308b\u304b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u7528\u610f\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u8a55\u4fa1\u3057\u3066\u307f\u308b\u3002\n\njoin.go\npackage main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"io\"\n)\n\n//Read content (text data) from buffer\nfunc ContentText(inStream io.Reader) ([]string, error) {\n    scanner := bufio.NewScanner(inStream)\n    list := make([]string, 0)\n    for scanner.Scan() {\n        list = append(list, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return list, nil\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1(lines []string) []byte {\n    //write to byte buffer\n    content := make([]byte, 0)\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content = append(content, line...)\n        content = append(content, recode...)\n    }\n    return content\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1Cap128(lines []string) []byte {\n    //write to byte buffer\n    content := make([]byte, 0, 128) //128 bytes capacity\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content = append(content, line...)\n        content = append(content, recode...)\n    }\n    return content\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1Cap1K(lines []string) []byte {\n    //write to byte buffer\n    content := make([]byte, 0, 1024) //1K bytes capacity\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content = append(content, line...)\n        content = append(content, recode...)\n    }\n    return content\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2(lines []string) []byte {\n    //write to byte buffer\n    content := bytes.NewBuffer(make([]byte, 0))\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content.WriteString(line)\n        content.WriteString(recode)\n    }\n    return content.Bytes()\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2Cap128(lines []string) []byte {\n    //write to byte buffer\n    content := bytes.NewBuffer(make([]byte, 0, 128)) //128 bytes capacity\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content.WriteString(line)\n        content.WriteString(recode)\n    }\n    return content.Bytes()\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2Cap1K(lines []string) []byte {\n    //write to byte buffer\n    content := bytes.NewBuffer(make([]byte, 0, 1024)) //1K bytes capacity\n    recode := \"\\r\\n\"\n    for _, line := range lines {\n        content.WriteString(line)\n        content.WriteString(recode)\n    }\n    return content.Bytes()\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\njoin_test.go\npackage main\n\nimport (\n    \"os\"\n    \"testing\"\n)\n\nvar list []string\n\nfunc readFile() {\n    file, err := os.Open(\"CollisionsForHashFunctions.txt\") //maybe file path\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n    list, err = ContentText(file)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc BenchmarkWriteBuffer1(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer1(list)\n        _ = content\n    }\n}\n\nfunc BenchmarkWriteBuffer1Cap128(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer1Cap128(list)\n        _ = content\n    }\n}\n\nfunc BenchmarkWriteBuffer1Cap1K(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer1Cap1K(list)\n        _ = content\n    }\n}\n\nfunc BenchmarkWriteBuffer2(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer2(list)\n        _ = content\n    }\n}\n\nfunc BenchmarkWriteBuffer2Cap128(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer2Cap128(list)\n        _ = content\n    }\n}\n\nfunc BenchmarkWriteBuffer2Cap1K(b *testing.B) {\n    readFile()\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        content := WriteBuffer2Cap1K(list)\n        _ = content\n    }\n}\n\n\n\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3060\u304c\uff0c\u5c0f\u3055\u3044\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u30c6\u30b9\u30c8\u306b\u306a\u3089\u306a\u3044\u6c17\u304c\u3057\u305f\u306e\u3067\uff0c\u5927\u6614\u306b\u66f8\u3044\u305f\u30c6\u30ad\u30b9\u30c8 CollisionsForHashFunctions.txt \u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\u3002\u30b5\u30a4\u30ba\u306f70\u884c\uff0c8KB \u307b\u3069\u3002\n\n\u30c6\u30b9\u30c8\u7d50\u679c\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\nC:>go test -bench WriteBuffer -benchmen\ntesting: warning: no tests to run\nPASS\nBenchmarkWriteBuffer1-4           100000     12220 ns/op  28864 B/op  11 allocs/op\nBenchmarkWriteBuffer1Cap128-4     100000     11620 ns/op  28800 B/op  10 allocs/op\nBenchmarkWriteBuffer1Cap1K-4      200000     11605 ns/op  27904 B/op   7 allocs/op\nBenchmarkWriteBuffer2-4           100000     14200 ns/op  25568 B/op   9 allocs/op\nBenchmarkWriteBuffer2Cap128-4     100000     15790 ns/op  26800 B/op   8 allocs/op\nBenchmarkWriteBuffer2Cap1K-4      200000     10305 ns/op  17520 B/op   5 allocs/op\nok      join    13.260s\n\n\u3042\u308a\u3083\u308a\u3083\u3002 bytes.Buffer \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u901f\u3044\u307f\u305f\u3044\uff08capacity \u3092\u5927\u304d\u304f\u3068\u308c\u3070\uff09\u3002\n\u305d\u308c\u306a\u3089\uff0c\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u4e00\u6c17\u306b\u5c0f\u3055\u304f\u3057\u30669\u884c\uff0c1KB \u306b\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3002\nC:>go test -bench WriteBuffer -benchmen\ntesting: warning: no tests to run\nPASS\nBenchmarkWriteBuffer1-4          3000000       443 ns/op    448 B/op   3 allocs/op\nBenchmarkWriteBuffer1Cap128-4    5000000       345 ns/op    384 B/op   2 allocs/op\nBenchmarkWriteBuffer1Cap1K-4     3000000       561 ns/op   1024 B/op   1 allocs/op\nBenchmarkWriteBuffer2-4          1000000      1079 ns/op    544 B/op   4 allocs/op\nBenchmarkWriteBuffer2Cap128-4    2000000       727 ns/op    560 B/op   3 allocs/op\nBenchmarkWriteBuffer2Cap1K-4     2000000       663 ns/op   1136 B/op   2 allocs/op\nok      join    11.987s\n\n\u4eca\u5ea6\u306f []bytes \u306e\u65b9\u304c\u901f\u304f\u306a\u3063\u305f\u3002\n\u307e\u3041\u3067\u3082\u4e88\u60f3\u901a\u308a\u304b\u306a\u3002\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u308c\u3070\u30d0\u30c3\u30d5\u30a1\u64cd\u4f5c\u306e\u307b\u3046\u304c\u6709\u5229\u306b\u306a\u308b\u306e\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3063\u3061\u3083\u3042\u5206\u304b\u308a\u3084\u3059\u3044\u3002\u6ce8\u76ee\u3059\u3079\u304d\u306f BenchmarkWriteBuffer1Cap128 \u3068 BenchmarkWriteBuffer1Cap1K \u3067\uff0c capacity \u3092 1KB \u53d6\u3063\u305f\u307b\u3046\u304c\u82e5\u5e72\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u8fba\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3069\u3046\u3059\u308b\u304b\uff0c\u3068\u3044\u3046\u3068\u3053\u308d\u306a\u306e\u3060\u308d\u3046\u3002\nGo \u8a00\u8a9e\u3067\u6587\u5b57\u5217\u306e\u9023\u7d50\u3092\u884c\u3046\u969b\u306b\u3069\u3046\u3084\u308b\u306e\u304c\u4e00\u756a\u901f\u3044\u304b\uff0c\u3068\u3044\u3046\u8a71\u3002\n\n## \u6587\u5b57\u5217\u9023\u7d50\u3092\u884c\u30464\u3064\u306e\u65b9\u6cd5\n\nGo \u8a00\u8a9e\u3067\u6587\u5b57\u5217\u306e\u9023\u7d50\u3092\u884c\u3046\u969b\u306b\u306f\u6982\u306d\u4ee5\u4e0b\u306e4\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n1. \u201c`+`\u201d \u6f14\u7b97\u5b50\u3067\u9023\u7d50\u3059\u308b\n1. [`strings`](http://golang.org/pkg/strings/)`.Join` \u3067\u9023\u7d50\u3059\u308b\n1. [`bytes`](http://golang.org/pkg/bytes/)`.Buffer` \u3067\u8ffd\u8a18\u3059\u308b\n1. `[]byte` \u306b append \u3059\u308b\n\n`string` \u578b\u306f\u300c\u4e0d\u5909\uff08immutable\uff09\u300d\u306a\u306e\u3067\uff0c\u6700\u521d\u306e2\u3064\u304c\u9ad8\u30b3\u30b9\u30c8\u306b\u306a\u308b\u3060\u308d\u3046\u3053\u3068\u306f\u3059\u3050\u306b\u60f3\u50cf\u304c\u3064\u304f\u3002\n\n- [Go\u3067\u306f\u6587\u5b57\u5217\u9023\u7d50\u306f\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u64cd\u4f5c - Qiita](http://qiita.com/ruiu/items/2bb83b29baeae2433a79)\n- [Go\u8a00\u8a9e\u3067\u52b9\u7387\u826f\u304f\u6587\u5b57\u5217\u3092\u9023\u7d50\u3059\u308b\u8a71 #golang - memo\u30e1\u30e2](http://atotto.hatenadiary.jp/entry/2013/04/26/202701)\n\n\u3067\u306f\u6b8b\u308a\u306e2\u3064\u306f\u3069\u3046\u306a\u306e\u304b\u3068\u3044\u3046\u3068\n\n- [Go\u306e\u6587\u5b57\u5217\u7d50\u5408\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 - Qiita](http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37)\n\n\u306b\u3088\u308b\u3068\u6700\u5f8c\u306e\u304c\u4e00\u756a\u901f\u3044\u3089\u3057\u3044\u3002\u307b\u3093\u3058\u3083\u307e\u3041\uff0c\u78ba\u304b\u3081\u3066\u307f\u308b\u304b\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u7528\u610f\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u8a55\u4fa1\u3057\u3066\u307f\u308b\u3002\n\n```go:join.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"io\"\n)\n\n//Read content (text data) from buffer\nfunc ContentText(inStream io.Reader) ([]string, error) {\n\tscanner := bufio.NewScanner(inStream)\n\tlist := make([]string, 0)\n\tfor scanner.Scan() {\n\t\tlist = append(list, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn list, nil\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := make([]byte, 0)\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent = append(content, line...)\n\t\tcontent = append(content, recode...)\n\t}\n\treturn content\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1Cap128(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := make([]byte, 0, 128) //128 bytes capacity\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent = append(content, line...)\n\t\tcontent = append(content, recode...)\n\t}\n\treturn content\n}\n\n//Write content (text data) to buffer\nfunc WriteBuffer1Cap1K(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := make([]byte, 0, 1024) //1K bytes capacity\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent = append(content, line...)\n\t\tcontent = append(content, recode...)\n\t}\n\treturn content\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := bytes.NewBuffer(make([]byte, 0))\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent.WriteString(line)\n\t\tcontent.WriteString(recode)\n\t}\n\treturn content.Bytes()\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2Cap128(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := bytes.NewBuffer(make([]byte, 0, 128)) //128 bytes capacity\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent.WriteString(line)\n\t\tcontent.WriteString(recode)\n\t}\n\treturn content.Bytes()\n}\n\n//Write content (text data) to buffer (buffered I/O)\nfunc WriteBuffer2Cap1K(lines []string) []byte {\n\t//write to byte buffer\n\tcontent := bytes.NewBuffer(make([]byte, 0, 1024)) //1K bytes capacity\n\trecode := \"\\r\\n\"\n\tfor _, line := range lines {\n\t\tcontent.WriteString(line)\n\t\tcontent.WriteString(recode)\n\t}\n\treturn content.Bytes()\n}\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```go:join_test.go\npackage main\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nvar list []string\n\nfunc readFile() {\n\tfile, err := os.Open(\"CollisionsForHashFunctions.txt\") //maybe file path\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\tlist, err = ContentText(file)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc BenchmarkWriteBuffer1(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer1(list)\n\t\t_ = content\n\t}\n}\n\nfunc BenchmarkWriteBuffer1Cap128(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer1Cap128(list)\n\t\t_ = content\n\t}\n}\n\nfunc BenchmarkWriteBuffer1Cap1K(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer1Cap1K(list)\n\t\t_ = content\n\t}\n}\n\nfunc BenchmarkWriteBuffer2(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer2(list)\n\t\t_ = content\n\t}\n}\n\nfunc BenchmarkWriteBuffer2Cap128(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer2Cap128(list)\n\t\t_ = content\n\t}\n}\n\nfunc BenchmarkWriteBuffer2Cap1K(b *testing.B) {\n\treadFile()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tcontent := WriteBuffer2Cap1K(list)\n\t\t_ = content\n\t}\n}\n```\n\n\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u3060\u304c\uff0c\u5c0f\u3055\u3044\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u30c6\u30b9\u30c8\u306b\u306a\u3089\u306a\u3044\u6c17\u304c\u3057\u305f\u306e\u3067\uff0c\u5927\u6614\u306b\u66f8\u3044\u305f\u30c6\u30ad\u30b9\u30c8 [`CollisionsForHashFunctions.txt`](http://www.baldanders.info/spiegel/archive/CollisionsForHashFunctions.txt) \u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\u3002\u30b5\u30a4\u30ba\u306f70\u884c\uff0c8KB \u307b\u3069\u3002\n\n## \u30c6\u30b9\u30c8\u7d50\u679c\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n```shell\nC:>go test -bench WriteBuffer -benchmen\ntesting: warning: no tests to run\nPASS\nBenchmarkWriteBuffer1-4           100000     12220 ns/op  28864 B/op  11 allocs/op\nBenchmarkWriteBuffer1Cap128-4     100000     11620 ns/op  28800 B/op  10 allocs/op\nBenchmarkWriteBuffer1Cap1K-4      200000     11605 ns/op  27904 B/op   7 allocs/op\nBenchmarkWriteBuffer2-4           100000     14200 ns/op  25568 B/op   9 allocs/op\nBenchmarkWriteBuffer2Cap128-4     100000     15790 ns/op  26800 B/op   8 allocs/op\nBenchmarkWriteBuffer2Cap1K-4      200000     10305 ns/op  17520 B/op   5 allocs/op\nok      join    13.260s\n```\n\n\u3042\u308a\u3083\u308a\u3083\u3002 [`bytes`](http://golang.org/pkg/bytes/)`.Buffer` \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u901f\u3044\u307f\u305f\u3044\uff08capacity \u3092\u5927\u304d\u304f\u3068\u308c\u3070\uff09\u3002\n\n\u305d\u308c\u306a\u3089\uff0c\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u4e00\u6c17\u306b\u5c0f\u3055\u304f\u3057\u30669\u884c\uff0c1KB \u306b\u3057\u3066\u3084\u3063\u3066\u307f\u308b\u3002\n\n```shell\nC:>go test -bench WriteBuffer -benchmen\ntesting: warning: no tests to run\nPASS\nBenchmarkWriteBuffer1-4          3000000       443 ns/op    448 B/op   3 allocs/op\nBenchmarkWriteBuffer1Cap128-4    5000000       345 ns/op    384 B/op   2 allocs/op\nBenchmarkWriteBuffer1Cap1K-4     3000000       561 ns/op   1024 B/op   1 allocs/op\nBenchmarkWriteBuffer2-4          1000000      1079 ns/op    544 B/op   4 allocs/op\nBenchmarkWriteBuffer2Cap128-4    2000000       727 ns/op    560 B/op   3 allocs/op\nBenchmarkWriteBuffer2Cap1K-4     2000000       663 ns/op   1136 B/op   2 allocs/op\nok      join    11.987s\n```\n\n\u4eca\u5ea6\u306f `[]bytes` \u306e\u65b9\u304c\u901f\u304f\u306a\u3063\u305f\u3002\n\n\u307e\u3041\u3067\u3082\u4e88\u60f3\u901a\u308a\u304b\u306a\u3002\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u308c\u3070\u30d0\u30c3\u30d5\u30a1\u64cd\u4f5c\u306e\u307b\u3046\u304c\u6709\u5229\u306b\u306a\u308b\u306e\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3063\u3061\u3083\u3042\u5206\u304b\u308a\u3084\u3059\u3044\u3002\u6ce8\u76ee\u3059\u3079\u304d\u306f `BenchmarkWriteBuffer1Cap128` \u3068 `BenchmarkWriteBuffer1Cap1K` \u3067\uff0c capacity \u3092 1KB \u53d6\u3063\u305f\u307b\u3046\u304c\u82e5\u5e72\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u3053\u306e\u8fba\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3069\u3046\u3059\u308b\u304b\uff0c\u3068\u3044\u3046\u3068\u3053\u308d\u306a\u306e\u3060\u308d\u3046\u3002\n", "tags": ["golang", "Go", "\u30d9\u30f3\u30c1\u30de\u30fc\u30af"]}