{"context": " More than 1 year has passed since last update.\ndao package\u3092\u4f7f\u3046\ndi\u3092\u4f7f\u3046\ndb\u306fmysql\n\n\u306e\u5834\u5408\u3001\u8a2d\u5b9a\u5099\u5fd8\u9332\n\nbuild.scala\nname := \"activator-play-slick\"\n\nversion := \"1.0-SNAPSHOT\"\n\nscalaVersion := \"2.11.7\" // or \"2.10.4\"\n\nlibraryDependencies ++= Seq(\n  \"org.webjars\" %% \"webjars-play\" % \"2.3.0-2\",\n  \"com.typesafe.play\" %% \"play-slick\" % \"1.1.0\",\n  \"com.typesafe.play\" %% \"play-slick-evolutions\" % \"1.1.0\",\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.36\"\n)\n\nfork in Test := false\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nroutesGenerator := InjectedRoutesGenerator\n\n\n\nplugin.sbt\n// The Typesafe repository\nresolvers += \"Typesafe repository\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.4.3\")\n\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n\n\n\nCatDao\npackage dao\n\nimport models.Models.Cat\n\nimport scala.concurrent.Future\n\nimport javax.inject.Inject\n\nimport play.api.db.slick.DatabaseConfigProvider\nimport play.api.db.slick.HasDatabaseConfigProvider\n\nimport slick.driver.JdbcProfile\n\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nclass CatDao @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n\n  import driver.api._\n\n  private val cats = TableQuery[CatsTable]\n\n  // ddl\n  {\n    val schema = cats.schema\n    db.run(schema.create)\n  }\n\n  def all(): Future[Seq[Cat]] = db.run(cats.result)\n\n  def insert(cat: Cat): Future[Unit] = db.run(cats += cat).map { _ => () }\n\n  private class CatsTable(tag: Tag) extends Table[Cat](tag, \"CAT\") {\n    def name  = column[String](\"name\", O.PrimaryKey)\n    def color = column[String](\"color\")\n\n    def * = (name, color) <> (Cat.tupled, Cat.unapply _)\n  }\n}\n\n\n\nApplication.scala\npackage controllers\n\nimport javax.inject.Inject\n\nimport play.api.libs.concurrent.Execution.Implicits.defaultContext\n\nimport dao.CatDao\nimport models.Models.Cat\n\nimport play.api.data._\nimport play.api.data.Forms._\nimport play.api.mvc._\n\nclass Application @Inject() (cats: CatDao) extends Controller {\n  val catForm = Form(\n    mapping(\n\n  \"name\" -> text(),\n      \"color\" -> text()\n    )(Cat.apply)(Cat.unapply)\n  )\n  def index = Action.async {\n    cats.all.map { case cs => Ok(views.html.index(cs)) }\n  }\n\n  def insert = Action.async { implicit rs =>\n    val cat: Cat = catForm.bindFromRequest.get\n    cats.insert(cat).map(_ => Redirect(routes.Application.index))\n  }\n}\n\n\n\n- dao package\u3092\u4f7f\u3046\n- di\u3092\u4f7f\u3046\n- db\u306fmysql\n\n\u306e\u5834\u5408\u3001\u8a2d\u5b9a\u5099\u5fd8\u9332\n\n```lang:build.scala\nname := \"activator-play-slick\"\n\nversion := \"1.0-SNAPSHOT\"\n\nscalaVersion := \"2.11.7\" // or \"2.10.4\"\n\nlibraryDependencies ++= Seq(\n  \"org.webjars\" %% \"webjars-play\" % \"2.3.0-2\",\n  \"com.typesafe.play\" %% \"play-slick\" % \"1.1.0\",\n  \"com.typesafe.play\" %% \"play-slick-evolutions\" % \"1.1.0\",\n  \"mysql\" % \"mysql-connector-java\" % \"5.1.36\"\n)\n\nfork in Test := false\n\nlazy val root = (project in file(\".\")).enablePlugins(PlayScala)\n\nroutesGenerator := InjectedRoutesGenerator\n```\n\n\n```lang:plugin.sbt\n// The Typesafe repository\nresolvers += \"Typesafe repository\" at \"http://repo.typesafe.com/typesafe/releases/\"\n\n// Use the Play sbt plugin for Play projects\naddSbtPlugin(\"com.typesafe.play\" % \"sbt-plugin\" % \"2.4.3\")\n\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n```\n\n\n\n```lang:CatDao\npackage dao\n\nimport models.Models.Cat\n\nimport scala.concurrent.Future\n\nimport javax.inject.Inject\n\nimport play.api.db.slick.DatabaseConfigProvider\nimport play.api.db.slick.HasDatabaseConfigProvider\n\nimport slick.driver.JdbcProfile\n\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nclass CatDao @Inject()(protected val dbConfigProvider: DatabaseConfigProvider)\n  extends HasDatabaseConfigProvider[JdbcProfile] {\n\n  import driver.api._\n\n  private val cats = TableQuery[CatsTable]\n\n  // ddl\n  {\n    val schema = cats.schema\n    db.run(schema.create)\n  }\n\n  def all(): Future[Seq[Cat]] = db.run(cats.result)\n\n  def insert(cat: Cat): Future[Unit] = db.run(cats += cat).map { _ => () }\n\n  private class CatsTable(tag: Tag) extends Table[Cat](tag, \"CAT\") {\n    def name  = column[String](\"name\", O.PrimaryKey)\n    def color = column[String](\"color\")\n\n    def * = (name, color) <> (Cat.tupled, Cat.unapply _)\n  }\n}\n```\n\n```lang:Application.scala\npackage controllers\n\nimport javax.inject.Inject\n\nimport play.api.libs.concurrent.Execution.Implicits.defaultContext\n\nimport dao.CatDao\nimport models.Models.Cat\n\nimport play.api.data._\nimport play.api.data.Forms._\nimport play.api.mvc._\n\nclass Application @Inject() (cats: CatDao) extends Controller {\n  val catForm = Form(\n    mapping(\n\n  \"name\" -> text(),\n      \"color\" -> text()\n    )(Cat.apply)(Cat.unapply)\n  )\n  def index = Action.async {\n    cats.all.map { case cs => Ok(views.html.index(cs)) }\n  }\n\n  def insert = Action.async { implicit rs =>\n    val cat: Cat = catForm.bindFromRequest.get\n    cats.insert(cat).map(_ => Redirect(routes.Application.index))\n  }\n}\n```\n\n", "tags": ["Scala", "PlayFramework", "slick"]}