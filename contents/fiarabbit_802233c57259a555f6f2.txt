{"tags": ["Python", "dlib"], "context": "\n\n\u4eca\u65e5\u306e\u8ab2\u984c\n\n\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u65b9\u5f0f\u3067\u70ba\u3059\u3079\u304d\u3053\u3068\u3092\u70ba\u3059\n\n2017/01/31\n\n\nOpenCV3\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\n\nOpenCV3\u306b\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\u304c\u3071\u3063\u3068\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067dlib\u306b\u65b9\u91dd\u5909\u63db\n\n\ndlib\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\n\n\ndlib\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\n\n\ndlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nconda install -c menpo dlib=18.18\n\n\n\nhoge\n\ndlib_face_alignment.py\nimport cv2, dlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nIMAGE_PATH = \"/home/hashimoto/Lenna.jpg\"\nPREDICTOR_PATH = \"/home/hashimoto/shape_predictor_68_face_landmarks.dat\"\n\ndetector = dlib.get_frontal_face_detector()\npredictor = dlib.shape_predictor('./shape_predictor_68_face_landmarks.dat')\n\ndef main():\n    img  = cv2.imread('Lenna.jpg')\n    # tuple run((fhog_object_detector)arg1, (object)image[, (int)upsample_num_times=0[, (float)adjust_threshold=0.0]])\n    rects, scores, types = detector.run(image=img, upsample_num_times=1)\n    for i, rect in enumerate(rects):\n        shape = predictor(img,rect)\n        points = shape.parts()\n        #x = np.zeros(len(points))\n        #y = np.zeros(len(points))\n        #for j, point in enumerate(points):\n        #    x[j], y[j] = point.x, point.y\n        x = [point.x for point in points]\n        y = [point.y for point in points]\n        ax_img =  plt.subplot(1,1,1)\n        ax_img.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))\n        plt.scatter(x,y,s=5,c='blue')\n        plt.show()\n\n\n\n\n\n# \u4eca\u65e5\u306e\u8ab2\u984c\n## \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u65b9\u5f0f\u3067\u70ba\u3059\u3079\u304d\u3053\u3068\u3092\u70ba\u3059\n### 2017/01/31\n- ~~OpenCV3\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa~~\n    - OpenCV3\u306b\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\u304c\u3071\u3063\u3068\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067dlib\u306b\u65b9\u91dd\u5909\u63db\n- dlib\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\n\n## dlib\u3067\u9854\u7279\u5fb4\u70b9\u62bd\u51fa\n- dlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n    ```\n    conda install -c menpo dlib=18.18\n    ```\n- hoge\n\n    ```dlib_face_alignment.py\n    import cv2, dlib\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    IMAGE_PATH = \"/home/hashimoto/Lenna.jpg\"\n    PREDICTOR_PATH = \"/home/hashimoto/shape_predictor_68_face_landmarks.dat\"\n    \n    detector = dlib.get_frontal_face_detector()\n    predictor = dlib.shape_predictor('./shape_predictor_68_face_landmarks.dat')\n    \n    def main():\n        img  = cv2.imread('Lenna.jpg')\n        # tuple run((fhog_object_detector)arg1, (object)image[, (int)upsample_num_times=0[, (float)adjust_threshold=0.0]])\n        rects, scores, types = detector.run(image=img, upsample_num_times=1)\n        for i, rect in enumerate(rects):\n            shape = predictor(img,rect)\n            points = shape.parts()\n            #x = np.zeros(len(points))\n            #y = np.zeros(len(points))\n            #for j, point in enumerate(points):\n            #    x[j], y[j] = point.x, point.y\n            x = [point.x for point in points]\n            y = [point.y for point in points]\n            ax_img =  plt.subplot(1,1,1)\n            ax_img.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))\n            plt.scatter(x,y,s=5,c='blue')\n            plt.show()\n\n    \n    ```\n\n### \n"}