{"context": "\u3053\u306e\u8a18\u4e8b\u306f\u3001\u300cElixir\u304b\u3089Rust\u306e\u95a2\u6570\u3092\u3064\u304b\u3046 \u2192 \u306f\u3084\u3044\u300d\u306e\u7d9a\u7de8\u3060\u3002\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u6700\u901f\u3060\u3063\u305f Rust \u306b\u3088\u308b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001\u5c11\u306a\u3044\u52b4\u529b\u3067 SIMD \u5316\u3057\u3066\u3001\u3055\u3089\u306a\u308b\u9ad8\u901f\u5316\u3092\u56f3\u308b\u3002\n\u5b9f\u306f\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u5c11\u3057\u524d\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3060\u304c\u3001\u306a\u304b\u306a\u304b\u672c\u6587\u3092\u66f8\u304d\u9032\u3081\u308b\u6642\u9593\u304c\u3068\u308c\u305a\u3001\u4eca\u56de\u306f\u3001\u99c6\u3051\u8db3\u3067\u8aac\u660e\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u8aac\u660e\u4e0d\u8db3\u306a\u70b9\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u7591\u554f\u3068\u304b\u3001\u8a66\u3057\u3066\u307f\u305f\u3051\u3069\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3068\u304b\u3042\u308c\u3070\u3001\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u8cea\u554f\u3057\u3066\u307b\u3057\u3044\u3002\n\n\u524d\u56de\u3084\u3063\u305f\u3053\u3068\n\u524d\u56de \u306e\u8a18\u4e8b\u3067\u306f\u3001Elixir \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3057\u305f\u3002\u8a08\u7b97\u65b9\u6cd5\u306f\u300c\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\u300d\u3068\u3044\u3046\u3001\u3068\u3066\u3082\u7d20\u6734\u306a\u65b9\u6cd5\u3060\u3063\u305f\u3002\n\u3053\u308c\u3092\u9078\u3093\u3060\u306e\u306f\u6b21\u306e\u3088\u3046\u306a\u7406\u7531\u3060\u3063\u305f\u3002\n\n\u5b9f\u88c5\u304c\u975e\u5e38\u306b\u7c21\u5358\n\u8a08\u7b97\u304c\u9069\u5ea6\u306b\u91cd\u3044\n\u30de\u30eb\u30c1\u30b3\u30a2 CPU \u3092\u6d3b\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u3084\u3059\u3044\n\n\u4ee5\u4e0b\u306e\u6bb5\u53d6\u308a\u3067\u3001\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u308a\u306a\u304c\u3089\u958b\u767a\u3092\u9032\u3081\u3001\uff11\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3088\u308a\u3082\uff14\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u65b9\u304c \u7d0465\u500d\u901f\u3044 \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3002\n\nElixir\uff1a\u5358\u4e00\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\nElixir\uff1a\u8907\u6570\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3067\u30de\u30eb\u30c1\u30b3\u30a2\u8a08\u7b97\nElixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\nElixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\n\u5f53\u6642\u3001\u4f7f\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nCore i7 \u30d7\u30ed\u30bb\u30c3\u30b5\u642d\u8f09\u306e2012\u5e74\u88fd Mac mini\nElixir 1.2.0 \uff0b Erlang/OTP 18.2.1\nRust 1.5.0 \u5b89\u5b9a\u7248\n\n\u4eca\u56de\u3082\u540c\u3058 Mac mini \u3092\u4f7f\u3046\u304c\u3001Rust \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0a\u304c\u3063\u3066\u3044\u308b\uff08\u5f8c\u8ff0\uff09\u3002\u4eca\u56de\u306f Elixir \u306f\u4f7f\u7528\u3057\u306a\u3044\u3002\u5177\u4f53\u7684\u306a\u8a08\u7b97\u65b9\u6cd5\u3084\u3001\u524d\u56de\u4f7f\u7528\u3057\u305f Elixir \u3068 Rust \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\u524d\u56de \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3002\n\n\u4eca\u56de\u3084\u308b\u3053\u3068\n\u4eca\u56de\u306f\u3001\u524d\u56de\u6700\u901f\u3060\u3063\u305f Rust \u306b\u3088\u308b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5c11\u3057\u66f8\u304d\u63db\u3048\u3066\u3001CPU \u304c\u6301\u3064 SIMD(Single Instruction Multiple Data) \u6a5f\u69cb\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3002\u79c1\u306e Mac \u306b\u642d\u8f09\u3055\u308c\u3066\u3044\u308b CPU \u306f Intel \u306e AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u3053\u308c\u306a\u3089\u3001\u6a5f\u68b0\u8a9e\u306e\uff11\u547d\u4ee4\u306764\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u3092\uff14\u3064\u4e26\u5217\u3067\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3001\u8a08\u7b97\u304c\u3055\u3089\u306b\u9ad8\u901f\u5316\u3059\u308b\u306f\u305a\u3060\u3002\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Rust \u3092\u4f7f\u7528\u3059\u308b\u3002\n\nRust 1.12.0 \u5b89\u5b9a\u7248\nRust 1.14.0 nightly \u7248\uff082016-10-15\uff09\n\n\u3061\u306a\u307f\u306b OS \u3060\u304c\u3001\u3053\u306e Mac \u306b\u30c8\u30ea\u30d7\u30eb\u30d6\u30fc\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b FreeBSD 10.3-RELEASE\u3001Arch Linux\u3001Mac OS X Yosemite El Capitan \u3092\u4f7f\u7528\u3057\u305f\u3002\u3069\u306e OS \u3067\u3082\u540c\u3058\u7d50\u679c\u3060\u3063\u305f\u3002\n\nSIMD \u5316\u306e\uff12\u3064\u306e\u65b9\u6cd5\nRust \u3067 SIMD \u547d\u4ee4\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\uff12\u3064\u3042\u308b\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e SIMD intrinsic \u3092\u4f7f\u3046\n\n\uff11\u306f rustc \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u4f7f\u3063\u3066\u3044\u308b LLVM \u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b\u65b9\u6cd5\u3060\u3002cargo build --release \u307e\u305f\u306f rustc -O \u3068\u3059\u308b\u3060\u3051\u3067\u3001\u914d\u5217\u306b\u5bfe\u3059\u308b\u5358\u7d14\u306a\u30eb\u30fc\u30d7\u51e6\u7406\u304f\u3089\u3044\u306a\u3089\u3001\u81ea\u52d5\u7684\u306b SIMD \u3092\u4f7f\u3063\u305f\u6a5f\u68b0\u8a9e\u547d\u4ee4\u3078\u3068\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u306e\u65b9\u6cd5\u306f\u3001\u5b89\u5b9a\u7248\u306e Rust \u3092\u542b\u3081\u305f\u5168\u3066\u306e\u30ea\u30ea\u30fc\u30b9\u30c1\u30e3\u30cd\u30eb\u3067\u4f7f\u7528\u3067\u304d\u308b\u304c\u30011.9.0 \u3060\u3051\u306f\u3001\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u306e\u4f5c\u6210\u6642\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3001\u3053\u306e\u6a5f\u80fd\u304c\u30aa\u30d5\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u306a\u306e\u3067\u3001\u305d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u907f\u3051\u305f\u307b\u3046\u304c\u3044\u3044\u3002\uff08\u73fe\u6642\u70b9\u306e\u6700\u65b0\u7248\u306f 1.12.0\uff09\n\u307e\u305f\u3001\u6700\u9069\u5316\u306e\u5185\u5bb9\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u306f LLVM \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u300cAuto-Vectorization in LLVM\u300d\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002\n\uff12\u306f rustc \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b SIMD \u95a2\u9023\u306e intrinsic \u3092\u4f7f\u3046\u65b9\u6cd5\u3060\u3002Intrinsic \u306f\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u5916\u90e8\u95a2\u6570\u306e\u3088\u3046\u306a\u898b\u305f\u76ee\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3060\u3002\u305d\u308c\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u5bfe\u5fdc\u3059\u308b LLVM \u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u308b\u3057\u304f\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n2016\u5e7410\u6708\u73fe\u5728\u3067\u306f\u3001SIMD \u95a2\u9023\u306e intrinsic \u306f\u975e\u5b89\u5b9a\u6271\u3044\u306a\u306e\u3067\u3001\u5229\u7528\u8005\u5074\u306e\u30b3\u30fc\u30c9\u3067 feature gate \u3092\u901a\u3057\u3066\u3053\u306e\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001Rust \u306e\u5b89\u5b9a\u7248\u30ea\u30ea\u30fc\u30b9\u3068\u30d9\u30fc\u30bf\u7248\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u3002\u3064\u307e\u308a\u3001SIMD intrinsic \u3092\u5229\u7528\u3059\u308b\u306b\u306f\u3001nightly \u7248\u306e Rust \u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\u9069\u5207\u306a config \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066 Rust \u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4eca\u56de\u306f rustup \u3067\u7c21\u5358\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b nightly \u7248\u3092\u4f7f\u7528\u3059\u308b\u3002\n\u306a\u304a\u3001Rust \u306e SIMD \u95a2\u9023\u6a5f\u80fd\u306e\u958b\u767a\u72b6\u6cc1\u306f\u3001Tracking issue for SIMD support #27731 \u3067\u78ba\u8a8d\u3067\u304d\u308b\u3002SIMD \u95a2\u9023\u306e intrinsic \u306f\u3001\u73fe\u72b6\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u306a\u3044\u3088\u3046\u3060\u304c\u3001\u3053\u3053\u3068\u304b\u3001\u3053\u3053\u3068\u304b \u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u96f0\u56f2\u6c17\u306f\u3064\u304b\u3081\u308b\u3060\u308d\u3046\u3002\nIntrinsic \u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u4f7f\u3044\u3065\u3089\u3044\u3002\u3053\u308c\u3092\u30e9\u30c3\u30d7\u3057\u305f SIMD \u30af\u30ec\u30fc\u30c8 \u3092\u4f7f\u3046\u3068\u3001\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306a\u3069\u306e Rust \u306a\u3089\u3067\u306f\u306e\u62bd\u8c61\u5316\u6a5f\u69cb\u3092\u6d3b\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u884c\u3048\u308b\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\u5bc4\u308a\u9053\uff1a\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u3088\u308b SIMD \u5316\u3092\u4f53\u9a13\n\u305d\u306e\u524d\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u3088\u308b SIMD \u5316\u3092\u4f53\u9a13\u3057\u3066\u307f\u3088\u3046\u3002\n\u4f8b\u3068\u3057\u3066\u3001\u5de8\u5927\u306a\u914d\u5217 x \u3068 y \u306e saxpy\u3001\u3064\u307e\u308a\u3001a * x[i] + y[i] \u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\nRust\u306b\u3088\u308bSIMD\u3092\u5229\u7528\u3057\u305f\u6570\u5024\u8a08\u7b97\n\n\u305f\u3060\u3001\u4eca\u56de\u306f\u305d\u308c\u3092\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u5165\u529b\u3068\u7d50\u679c\u306e\u51fa\u529b\u3092\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u904e\u5ea6\u306a\u6700\u9069\u5316\u3092\u9632\u3050\u305f\u3081\u306e\u3082\u306e\u3060\u3002\u3082\u3057\u8a08\u7b97\u7d50\u679c\u3092\u51fa\u529b\u3057\u306a\u3044\u3068\u3001\u6700\u60aa\u306e\u5834\u5408\u3001\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u8a08\u7b97\u81ea\u4f53\u304c\u7701\u304b\u308c\u3066\u3057\u307e\u3046\u3002\n\nsrc/main.rs\n// -*- coding:utf-8-unix -*-\n\nextern crate rand;\nextern crate time;\n\nuse rand::{Rand, Rng, SeedableRng, StdRng};\n\nuse std::error::Error;\nuse std::ops::{Add, Mul};\n\nfn print_help() {\n    println!(\"\nUsage:\n    saxpy <size of array> [<item numbers in array z> ...]\n\n\");\n}\n\n// \u6642\u9593\u8a08\u6e2c\u306e\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3059\u308b\u30de\u30af\u30ed\nmacro_rules! timeit {\n    ($label: expr, $code: expr) => ({\n        let start = time::get_time();\n        let ret = $code;\n        let end = time::get_time();\n\n        let microsecs = (end.sec - start.sec) as f64 * 1_000_000.0 +\n            (end.nsec - start.nsec) as f64 / 1_000.0;\n\n        println!(\"{}: {} micro-seconds\", $label, microsecs);\n\n        ret\n    })\n}\n\nfn main() {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u6570\u5024\u306b\u5909\u63db\n    match parse_args() {\n        Err(e) => {\n            println!(\"\\nError: {}\", e.description());\n            print_help();\n        }\n        Ok((size, item_numbers)) => {\n            // \u4e71\u6570\u751f\u6210\u5668\u3092\u521d\u671f\u5316\uff08\u6bce\u56de\u540c\u3058\u30b7\u30fc\u30c9\u3092\u4f7f\u7528\uff09\n            let seed = [1, 2, 3, 4];\n            let mut rng: StdRng = SeedableRng::from_seed(&seed[..]);\n\n            // a, x, y \u3092\u4e71\u6570\u3067\u521d\u671f\u5316\n            let a: f64 = rng.gen();\n\n            let (x, y) = timeit!(\"init x and y\", {\n                (init_array(&mut rng, size),\n                 init_array(&mut rng, size))\n            });\n\n            // z \u3092 0 \u3067\u521d\u671f\u5316\n            let mut z = timeit!(\"init z\", vec![0.0; size]);\n\n            // saxpy\u3001\u3064\u307e\u308a\u3001a * x[i] + y[i] \u3092\u8a08\u7b97\u3057\u3001z[i] \u306b\u683c\u7d0d\u3059\u308b\u3002\n            timeit!(\"saxpy\", saxpy(a, &x, &y, &mut z));\n\n            // \u7d50\u679c\u3092\u8868\u793a\n            println!(\"\");\n            for i in item_numbers {\n                println!(\"{}: x:{:.4}, y:{:.4}, z:{:.4}\", i, x[i], y[i], z[i]);\n            }\n        }\n    }\n}\n\nfn parse_args() -> Result<(usize, Vec<usize>), Box<Error>> {\n    let mut args = std::env::args().skip(1);\n\n    // \u5f15\u6570\u304c1\u3064\u3082\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\n    let size_str = try!(args.next()\n        .ok_or::<Box<Error>>(From::from(\"Please specify the size of the array.\")));\n    // \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n    let size = try!(size_str.parse::<usize>());\n\n    let mut ns = Vec::with_capacity(args.len());\n    for n_str in args {\n        // \u914d\u5217\u306e\u8981\u7d20\u756a\u53f7\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n        let n = try!(n_str.parse::<usize>());\n        // \u8981\u7d20\u756a\u53f7\u304c\u914d\u5217\u306e\u7bc4\u56f2\u5916\u3060\u3063\u305f\u3089\u30a8\u30e9\u30fc\n        if n >= size {\n            return Err(From::from(format!(\"The item with the item number does not exist. \\\n                                           (size of the array: {}, item number: {})\\n\\\n                                           NOTE: The array is 0-based.\",\n                                          n,\n                                          size)));\n        }\n        ns.push(n);\n    }\n    Ok((size, ns))\n}\n\nfn init_array<R: Rng, T: Rand>(rng: &mut R, size: usize) -> Vec<T> {\n    // rng.gen_iter() \u306f\u4e71\u6570\u3092\u7121\u9650\u306b\u751f\u6210\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3002\n    // take(size) \u3067 size \u500b\u5206\u306e\u4e71\u6570\u3092\u53ce\u96c6\u3057 Vec<T> \u306b\u5165\u308c\u308b\u3002\n    rng.gen_iter().take(size).collect()\n}\n\nfn saxpy<T>(a: T, x: &[T], y: &[T], z: &mut [T])\n    where T: Copy + Add<T, Output = T> + Mul<T, Output = T>\n{\n    for ((&xi, &yi), zi) in x.iter().zip(y.iter()).zip(z.iter_mut()) {\n        *zi = a * xi + yi;\n    }\n}\n\n\n\n\nSIMD \u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30b3\u30fc\u30c9\nsaxpy() \u95a2\u6570\u306e\u3053\u306e\u30eb\u30fc\u30d7\u8a08\u7b97\u304c\u3001LLVM \u306e\u6700\u9069\u5316\u306b\u3088\u308a SIMD \u5316\u3055\u308c\u308b\u3002\n    for ((&xi, &yi), zi) in x.iter().zip(y.iter()).zip(z.iter_mut()) {\n        *zi = a * xi + yi;\n    }\n\n\u6163\u308c\u306a\u3044\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u3046\u66f8\u304f\u306e\u3068\u307b\u307c\u540c\u3058\u3060\u3002\n    for i in 0..x.len() {\n        z[i] = a * x[i] + y[i];\n    }\n\n\u3053\u3046\u3044\u3046\u5358\u7d14\u306a\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306f\u3001\u6a5f\u68b0\u7684\u306a\u66f8\u304d\u63db\u3048\u3067 SIMD \u5316\u3057\u3084\u3059\u3044\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\nRust \u306e\u5b89\u5b9a\u7248\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3082\u3057 Rust \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u3089\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307b\u3057\u3044\u3002\n\nrustup \u3067 Rust \u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u7c21\u5358\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f\u3089\u3001\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new saxpy --bin\n$ cd saxpy\n\n\u305d\u3057\u3066\u3001Cargo.toml \u306b\u4ee5\u4e0b\u306e\u4f9d\u5b58\u30af\u30ec\u30fc\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\nCargo.toml\n[dependencies]\nrand = \"0.3.14\"\ntime = \"0.1.35\"\n\n\n\u6700\u5f8c\u306b\u3001src/main.rs \u306e\u5185\u5bb9\u3092\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7f6e\u304d\u63db\u3048\u308c\u3070 OK \u3060\u3002\n\n\u6700\u9069\u5316\u3042\u308a\u3001target-feature \u6307\u5b9a\u306a\u3057\u3067\u5b9f\u884c\u3059\u308b\n\u6700\u9069\u5316\u3042\u308a\uff08--release \u30d5\u30e9\u30b0\u306e\u307f\u6307\u5b9a\uff09\u3067\u5b9f\u884c\u3057\u3088\u3046\u3002\n$ cargo run --release -- 50000000 0 100 49999999\n\n-- \u4ee5\u964d\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u4e0e\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u300150000000\uff08\uff15\u5343\u4e07\uff09\u306f\u914d\u5217\u306e\u5927\u304d\u3055\u3001\u305d\u308c\u306b\u7d9a\u304f\u6570\u5b57\u306f\u3001\u914d\u5217 X\u3001Y\u3001Z \u306b\u3064\u3044\u3066\u3001\u8981\u7d20\u756a\u53f7 0\u3001100\u300149999999 \u306e\u5024\u3092\u8868\u793a\u3057\u308d\u3068\u3044\u3046\u6307\u793a\u3060\u3002\n\u5b9f\u884c\u306b\u6210\u529f\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u3002\u8a08\u7b97\u7d50\u679c\u3060\u3051\u3067\u306a\u304f\u3001\u914d\u5217\u306e\u521d\u671f\u5316\u3084\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3082\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8868\u793a\u3055\u308c\u308b\u3002\ninit x and y: 738325.583 micro-seconds\ninit z: 133700.386 micro-seconds\nsaxpy: 99319.297 micro-seconds\n\n0: x:0.1363, y:0.8950, z:0.9653\n100: x:0.3087, y:0.4003, z:0.5596\n49999999: x:0.3535, y:0.5883, z:0.7707\n\n\nx \u3068 y \u306e\u521d\u671f\u5316\uff08init\uff09\u51e6\u7406\u306e\u5b9f\u884c\u6642\u9593\u306f\u3001\u5168\u9805\u76ee\u3092\u4e71\u6570\u3067\u521d\u671f\u5316\u3059\u308b\u3068\u3044\u3046\u8a08\u7b97\u306e\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5168\u4f53\u306e\u5b9f\u884c\u6642\u9593\u306e76%\u3092\u5360\u3081\u3066\u3044\u308b\u3002\nz \u306e 0.0 \u306b\u3088\u308b\u521d\u671f\u5316\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3001\u5168\u4f53\u306e\u7d0414%\u3002\nsaxpy \u306e\u8a08\u7b97\u306b\u8981\u3057\u305f\u6642\u9593\u306f\u5168\u4f53\u306e\u7d0410%\u3060\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u30d3\u30eb\u30c9\u3068\u540c\u6642\u306b\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3002\n$ RUSTFLAGS='--emit asm' cargo build --release\n\n\u5168\u3066\u306e x86_64 \u30d7\u30ed\u30bb\u30c3\u30b5\u306f SSE2 \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001SIMD \u547d\u4ee4\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306f\u305a\u3060\u3002\n$ grep xmm target/release/saxpy.s\n    movdqu  1352(%rsp), %xmm0\n    movdqu  1368(%rsp), %xmm1\n    movdqa  %xmm1, 160(%rsp)\n    movdqa  %xmm0, 144(%rsp)\n    movdqa  144(%rsp), %xmm0\n    movdqa  160(%rsp), %xmm1\n    movapd  176(%rsp), %xmm2\n    movapd  %xmm2, 96(%rsp)\n    movdqa  %xmm1, 80(%rsp)\n    movdqa  %xmm0, 64(%rsp)\n    movaps  .LCPI8_0(%rip), %xmm0\n    movaps  %xmm0, 1392(%rsp)\n    movdqa  .LCPI8_1(%rip), %xmm0\n    movdqa  %xmm0, 1408(%rsp)\n    xorps   %xmm0, %xmm0\n    cvtsi2sdq   %rax, %xmm0\n    mulsd   .LCPI8_3(%rip), %xmm0\n    cvtsi2sdl   %ecx, %xmm1\n    divsd   .LCPI8_4(%rip), %xmm1\n    addsd   %xmm0, %xmm1\n    movsd   %xmm1, 352(%rsp)\n...\n\n$ grep -c xmm target/release/saxpy.s\n99\n\n\u3084\u306f\u308a\u3001SIMD \u547d\u4ee4\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\u547d\u4ee4\u6570\u306f99\u500b\u3042\u3063\u305f\u3002\n\n\u6700\u9069\u5316\u3042\u308a\u3001target-feature \u6307\u5b9a\u3042\u308a\u3067\u5b9f\u884c\u3059\u308b\n\u3053\u306e Mac \u306f\u3001AVX \u547d\u4ee4\u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3055\u3089\u306b\u6700\u9069\u5316\u3067\u304d\u308b\u3002RUSTFLAGS \u306b -C target-feature=+avx \u3092\u8ffd\u52a0\u3057\u3088\u3046\u3002\u306a\u304a\u3001\u3053\u306e Mac \u306e\u5834\u5408\u3001-C target-cpu=native \u3068\u6307\u5b9a\u3057\u3066\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3002\n$ RUSTFLAGS='--emit asm -C target-feature=+avx' cargo run --release -- 50000000 0 100 49999999\n\ninit x and y: 731802.102 micro-seconds\ninit z: 132771.348 micro-seconds\nsaxpy: 95226.379 micro-seconds\n\n0: x:0.1363, y:0.8950, z:0.9653\n100: x:0.3087, y:0.4003, z:0.5596\n49999999: x:0.3535, y:0.5883, z:0.7707\n\nsaxpy \u306e\u8a08\u7b97\u306e\u3068\u3053\u308d\u304c\u3001\u7d044%\u901f\u304f\u306a\u3063\u305f\u3002\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3088\u3046\u3002\n$ grep xmm target/release/saxpy.s\n    vxorps  %xmm0, %xmm0, %xmm0\n    vcvtsi2sdq  %rax, %xmm0, %xmm0\n    vmulsd  .LCPI8_2(%rip), %xmm0, %xmm0\n    vcvtsi2sdl  %ecx, %xmm0, %xmm1\n    vdivsd  .LCPI8_3(%rip), %xmm1, %xmm1\n    vaddsd  %xmm1, %xmm0, %xmm0\n    vmovsd  %xmm0, 384(%rsp)\n    vmovq   %rax, %xmm1\n    vmovq   %rax, %xmm0\n    vmovdqa %xmm1, 464(%rsp)\n    vpunpcklqdq %xmm1, %xmm0, %xmm0\n    vmovdqa %xmm0, 960(%rsp)\n    vxorps  %xmm0, %xmm0, %xmm0\n    vcvtsi2sdq  %rax, %xmm0, %xmm0\n    vmulsd  .LCPI8_2(%rip), %xmm0, %xmm0\n    vcvtsi2sdl  %ecx, %xmm0, %xmm1\n    vdivsd  .LCPI8_3(%rip), %xmm1, %xmm1\n...\n\n$ grep -c xmm target/release/saxpy.s\n53\n\n\u547d\u4ee4\u304c\u5909\u308f\u3063\u305f\u306e\u306b\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304b\uff08\u4f8b\uff1aaddsd \u2192 vaddsd\uff09\u3002SSE2 \u304b\u3089 AVX \u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u3088\u308a\u52b9\u7387\u306e\u3088\u3044\u547d\u4ee4\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u547d\u4ee4\u6570\u304c53\u306b\u6e1b\u3063\u3066\u3044\u308b\u3002\n\nSIMD \u30af\u30ec\u30fc\u30c8\u3067\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3059\u308b\n\u3067\u306f\u3001\u3044\u3088\u3044\u3088\u672c\u984c\u306e\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092 SIMD \u5316\u3057\u3088\u3046\u3002\nSMID \u30af\u30ec\u30fc\u30c8\u7d4c\u7531\u3067\u3001SIMD intrinsics \u3092\u4f7f\u3046\u306e\u3067\u3001nightly \u7248\u306e Rust \u304c\u5fc5\u8981\u3060\u3002\u79c1\u304c\u4f7f\u7528\u3057\u305f\u306e\u306f\u30011.14.0 \u306e 2016-10-15 nightly \u30d3\u30eb\u30c9\u7248\u3060\u3002rustup \u3067\u5168\u304f\u540c\u3058\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n$ rustup update nightly-2016-10-17\n\n\u65e5\u4ed8\u304c\u5f8c\u308d\u306b\u305a\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\u3069\u3046\u3084\u3089 nightly \u7248\u306e Rust \u306f\u65e5\u66dc\u65e5\u4ee5\u5916\u306e\u6bce\u6669\u30d3\u30eb\u30c9\u3055\u308c\u3001\u305d\u306e\u30d0\u30a4\u30ca\u30ea\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u7fcc\u65e5\u306b\u4f5c\u3089\u308c\u308b\u3088\u3046\u3060\u3002\n\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new calcpi --bin\n$ cd calcpi\n$ mkdir src/pi_fallback\n$ mkdir src/pi_simd\n\n\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f nightly \u7248\u3067\u30d3\u30eb\u30c9\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3002\n$ rustup override add nightly-2016-10-17\n$ rustup override list\n/usr/home/tatsuya/rust-projects/calcpi      nightly-2016-10-17-x86_64-unknown-freebsd\n\n\nCargo.toml \u306e\u7de8\u96c6\nCargo.toml \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7de8\u96c6\u3059\u308b\u3002\n\nCargo.toml\n[dependencies]\nsimd = { version = \"0.1.1\", optional = true }\n\n[features]\n# Enable to use simd acceleration.\nsimd-accel = [\"simd\"]\n\n\n\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30af\u30ec\u30fc\u30c8\u3068\u3057\u3066 simd \u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u3001\u3055\u3089\u306b\u3001simd-accel \u3068\u3044\u3046\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u5b9a\u7fa9\u3057\u305f\u3002\u3053\u306e\u5f8c\u3001src/lib.rs \u306e\u4e2d\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u3053\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3001\u304b\u3064\u3001CPU \u304c AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6642\u3060\u3051\u3001SIMD \u5316\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u5143\u306e\u95a2\u6570\nSIMD \u5316\u524d\u306e calc_pi_range() \u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u8a08\u7b97\u5185\u5bb9\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u306f \u524d\u56de \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\nsrc/pi_fallback/calcpi.rs\npub fn display_name() -> String {\n    \"calc_pi() with no simd support.\".to_string()\n}\n\npub fn calc_pi_range(n: u64, offset: u64, count: u64) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut s = 0.0;\n    for i in offset..(offset + count) {\n        let x = (i as f64) * w;\n        s += (1.0 - x * x).sqrt();\n    }\n    4.0 * w * s\n}\n\n\n\u3053\u306e\u30ed\u30b8\u30c3\u30af\u3060\u3068\u3001LLVM \u306e\u81ea\u52d5 SIMD \u5316\u306f\u50cd\u304b\u306a\u304b\u3063\u305f\u3002\n\nSIMD \u5316\u3057\u305f\u95a2\u6570\nSIMD \u30af\u30ec\u30fc\u30c8\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u4f53\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066 SIMD \u5316\u3059\u308b\u3068\u3053\u3046\u306a\u308b\u3002\n\nsrc/pi_simd/calcpi.rs\nuse simd::x86::avx::{f64x4, AvxF64x4};\n\npub fn display_name() -> String {\n    \"calc_pi() with avx simd support.\".to_string()\n}\n\npub fn calc_pi_range(n: u64, offset: u64, count: u64) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut sv = f64x4::splat(0.0);\n\n    let o64 = offset as f64;\n    let mut iv = f64x4::new(o64, o64 + 1.0, o64 + 2.0, o64 + 3.0);\n\n    for _ in 0..(count / 4) {\n        let xv = iv * f64x4::splat(w);\n        sv = sv + (f64x4::splat(1.0) - xv * xv).sqrt();\n        iv = iv + f64x4::splat(4.0);\n    }\n    let s = (0..4).fold(0.0, |acc, i| acc + sv.extract(i));\n\n    4.0 * w * s\n}\n\n\nf64x4 \u304c f64\uff0864\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\uff09\u3092\uff14\u4e26\u5217\u3067\u6f14\u7b97\u3059\u308b\u305f\u3081\u306e \u30e2\u30b8\u30e5\u30fc\u30eb \u69cb\u9020\u4f53\u3067\u3001avx \u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u4e0b\u306b\u3042\u308b\u3002calc_pi_range() \u3067\u306f\u3001f64x4 \u578b\u306e\u5909\u6570\u3092\u898b\u5206\u3051\u3084\u3059\u3044\u3088\u3046\u3001sv \u3084 iv \u306e\u3088\u3046\u306b\u3001\u540d\u524d\u306b v \u3092\u4ed8\u3051\u3066\u3044\u308b\u3002\n\n\nf64x4::splat(0.0) \u306a\u3089\u3001\uff14\u3064\u3068\u3082 0.0 \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\nf64x4::new(o64, o64 + 1.0, o64 + 2.0, o64 + 3.0) \u306a\u3089\u3001\uff14\u3064\u304c\u305d\u308c\u305e\u308c\u6307\u5b9a\u3057\u305f\u5024\u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\nSIMD \u30af\u30ec\u30fc\u30c8\u306f\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001sv = sv + (f64x4::splat(1.0) - xv * xv).sqrt() \u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\u4fbf\u5229\u3002\n\n(0..4).fold(0.0, |acc, i| acc + sv.extract(i)) \u3068\u3057\u3066\u3001\u5909\u6570 s \u306e\uff14\u3064\u306e\u5024\u3092\u9806\u306b\u53d6\u308a\u51fa\u3057\u3001\u305d\u306e\u5408\u8a08\u3092\u6c42\u3081\u3066\u3044\u308b\u3002\n\n\n\u547c\u3073\u51fa\u3057\u5143\u306e\u95a2\u6570\n\u3053\u308c\u3089\u3092\u547c\u3073\u51fa\u3059\u5074\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nsrc/lib.rs\n#![cfg_attr(feature = \"simd-accel\", feature(cfg_target_feature))]\n\n#[cfg(feature = \"simd-accel\")]\nextern crate simd;\n\nuse std::thread;\n\n#[cfg(feature = \"simd-accel\")]\n#[cfg(target_feature = \"avx\")]\n#[path = \"./pi_simd/calcpi.rs\"]\nmod calcpi;\n\n#[cfg_attr(feature = \"simd-accel\", cfg(not(target_feature = \"avx\")))]\n#[path = \"./pi_fallback/calcpi.rs\"]\nmod calcpi;\n\nconst MAX_THREADS: u64 = 64;\n\n// Require Rust 1.11.0 or newer because of sum()\npub fn calc_pi_parallel(n: u64, num_threads: u64) -> Result<f64, String> {\n    try!(check_pi_params(n, num_threads));\n\n    println!(\"Using {}\", calcpi::display_name());\n\n    let len = n / num_threads;\n    let handles: Vec<_> = (0..num_threads)\n        .map(|i| thread::spawn(move || calcpi::calc_pi_range(n, len * i, len)))\n        .collect();\n\n    let results = handles.into_iter().map(|h| h.join().unwrap());\n    let pi = results.into_iter().sum();\n    Ok(pi)\n}\n\nfn check_pi_params(n: u64, num_threads: u64) -> Result<(), String> {\n    if num_threads <= 0 || num_threads > MAX_THREADS {\n        Err(format!(\"Invalid num_threads {}. It must be > 0 and <= {}\",\n                    num_threads,\n                    MAX_THREADS))\n    } else if n % num_threads != 0 {\n        Err(format!(\"n must be a multiple of num_threads. (n = {}, num_threads = {})\",\n                    n,\n                    num_threads))\n    } else if (n / num_threads) % 4 != 0 {\n        Err(format!(\"n / num_threads must be a multiple of 4. (n / num_threads = {})\",\n                    n / num_threads))\n    } else {\n        Ok(())\n    }\n}\n\n\n\n\n#[cfg(feature = \"simd-accel\")]\u3001#[cfg(target_feature = \"avx\")] \u3092\u4f7f\u3063\u3066\u3001simd-accel \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3001\u304b\u3064\u3001CPU \u304c AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6642\u3060\u3051\u3001SIMD \u5316\u3055\u308c\u305f calc_pi_range() \u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\u305d\u3046\u3067\u306a\u3044\u6642\u306f\u3001\u5143\u306e SIMD \u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3002\n\ncalc_pi_parallel() \u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u306b num_threads \u3067\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3001calc_pi_range() \u3092\u547c\u3073\u51fa\u3059\u3002\u8a73\u3057\u304f\u306f \u524d\u56de \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002\n\n\u6700\u5f8c\u306b main() \u95a2\u6570\u3002\n\nsrc/main.rs\nextern crate calcpi as pi;\n\nfn main() {\n    let num_threads = 8;\n    let n = 500_000_000 * num_threads * 4;\n\n    match pi::calc_pi_parallel(n, num_threads) {\n        Ok(pi) => println!(\"pi = {}\", pi),\n        Err(e) => println!(\"ERROR: {}\", e),\n    }\n}\n\n\n\n\u56db\u5206\u5186\u3092 50\u5104\u5206\u5272 160\u5104\u5206\u5272\u3057\u3066\u8fd1\u4f3c\u3059\u308b\u3002\uff08\u524d\u56de\u306f10\u5104\u5206\u5272\uff09\n\uff18\u30b9\u30ec\u30c3\u30c9\u306b\u4e26\u5217\u5316\u3002\uff18\u3064\u306e\u8ad6\u7406\u30b3\u30a2\uff08\uff14\u30b3\u30a2 x Hyper Threading\uff09\u3092\u4f7f\u3044\u5207\u308b\n\u3082\u3057 simd-accel \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u3001CPU \u30b3\u30a2\u6bce\u306b SIMD \u306b\u3088\u308b\uff14\u4e26\u5217\u6f14\u7b97\u3092\u884c\u3046\u3002\uff08\u305d\u306e\u5207\u308a\u66ff\u3048\u306f\u3001lib.rs \u5074\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u65bd\u3059\u308b\uff09\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u592732\u4e26\u5217\u3067\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u3092\u56de\u3057\u3066\u3044\u3053\u3046\u3002\n\n\u5b9f\u884c\u3059\u308b \u2192 \u306f\u3084\u3044\n\u3067\u306f\u5b9f\u884c\u3057\u3088\u3046\u3002\u307e\u305a\u306f\u3001SIMD \u306a\u3057\u3002\uff18\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u308b\uff18\u4e26\u5217\u6f14\u7b97\u3002\n$ rustc --version\nrustc 1.14.0-nightly (98a3502da 2016-10-15)\n\n$ cargo build --release\n\n$ time ./target/release/calcpi\nUsing calc_pi() with no simd support.\npi = 3.141592653714508\n./target/release/calcpi  132.06s user 0.02s system 788% cpu 16.747 total\n\n\u7d9a\u3044\u3066\u3001SIMD \u3042\u308a\u3002\uff18\u30b9\u30ec\u30c3\u30c9 x SIMD \u306b\u3088\u308b32\u4e26\u5217\u6f14\u7b97\u3002\n$ RUSTFLAGS='-C target-feature=+avx' cargo build --release --features=simd-accel\n\n$ time ./target/release/calcpi\nUsing calc_pi() with avx simd support.\npi = 3.1415926537147785\n./target/release/calcpi  65.80s user 0.00s system 792% cpu 8.303 total\n\n\u5c0f\u6570\u70b9\u4ee5\u4e0b13\u6841\u76ee\u4ee5\u964d\u304c\u5fae\u5999\u306b\u9055\u3046\u306e\u306f\u3001\u8a08\u7b97\u306e\u9806\u756a\u304c\u7570\u306a\u308b\u3053\u3068\u306b\u3088\u308b\u8aa4\u5dee\u3060\u308d\u3046\u304b\u3002\u306a\u306b\u306f\u3068\u3082\u3042\u308c\u3001\u7d04\uff12\u500d\u306e\u9ad8\u901f\u5316\u3092\u9054\u6210\u3067\u304d\u305f\uff01\n\n\u307e\u3068\u3081\n\nRust \u3067 SIMD \u5316\u3059\u308b\u306b\u306f\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b \u2192 \u5b89\u5b9a\u7248 Rust \u3092\u542b\u3080\u5168\u3066\u306e\u30ea\u30ea\u30fc\u30b9\u30c1\u30e3\u30cd\u30eb\u3067\u5229\u7528\u3067\u304d\u308b\u3002\u3054\u304f\u7c21\u5358\u306a\u30d1\u30bf\u30fc\u30f3\u306a\u3089 SIMD \u5316\u3055\u308c\u308b\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e SIMD intrinsic \u3092\u4f7f\u3046 \u2192 \u73fe\u6642\u70b9\u3067\u306f\u975e\u5b89\u5b9a\u3002SIMD \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u3068\u3001Rust \u3089\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u306e\u307e\u307e SIMD \u5316\u3067\u304d\u308b\u3002\n\n\n\u4eca\u56de\u306e\u8a08\u7b97\u5185\u5bb9\uff08\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\uff09\u3068\u79c1\u306e\u5b9f\u884c\u74b0\u5883\u3067\u306f\u3001SIMD \u5316\u306b\u3088\u3063\u3066\u3001\u8a08\u7b97\u901f\u5ea6\u304c\u7d04\uff12\u500d\u306b\u9ad8\u901f\u5316\u3055\u308c\u305f\u3002\n\u4eca\u56de\u306e\u3088\u3046\u306b\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u3067\u306f\u3001SIMD \u5316\u306e\u6069\u6075\u3092\u53d7\u3051\u3084\u3059\u3044\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001\u300c[Elixir\u304b\u3089Rust\u306e\u95a2\u6570\u3092\u3064\u304b\u3046 \u2192 \u306f\u3084\u3044][prev-article]\u300d\u306e\u7d9a\u7de8\u3060\u3002\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u6700\u901f\u3060\u3063\u305f Rust \u306b\u3088\u308b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001\u5c11\u306a\u3044\u52b4\u529b\u3067 SIMD \u5316\u3057\u3066\u3001\u3055\u3089\u306a\u308b\u9ad8\u901f\u5316\u3092\u56f3\u308b\u3002\n\n\u5b9f\u306f\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u5c11\u3057\u524d\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3060\u304c\u3001\u306a\u304b\u306a\u304b\u672c\u6587\u3092\u66f8\u304d\u9032\u3081\u308b\u6642\u9593\u304c\u3068\u308c\u305a\u3001\u4eca\u56de\u306f\u3001\u99c6\u3051\u8db3\u3067\u8aac\u660e\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u8aac\u660e\u4e0d\u8db3\u306a\u70b9\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u7591\u554f\u3068\u304b\u3001\u8a66\u3057\u3066\u307f\u305f\u3051\u3069\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3068\u304b\u3042\u308c\u3070\u3001\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u8cea\u554f\u3057\u3066\u307b\u3057\u3044\u3002\n\n[prev-article]:http://qiita.com/tatsuya6502/items/52c2817b5ccae6d51197\n\n\n## \u524d\u56de\u3084\u3063\u305f\u3053\u3068\n\n[\u524d\u56de][prev-article] \u306e\u8a18\u4e8b\u3067\u306f\u3001Elixir \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3057\u305f\u3002\u8a08\u7b97\u65b9\u6cd5\u306f\u300c\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\u300d\u3068\u3044\u3046\u3001\u3068\u3066\u3082\u7d20\u6734\u306a\u65b9\u6cd5\u3060\u3063\u305f\u3002\n\n\u3053\u308c\u3092\u9078\u3093\u3060\u306e\u306f\u6b21\u306e\u3088\u3046\u306a\u7406\u7531\u3060\u3063\u305f\u3002\n\n- \u5b9f\u88c5\u304c\u975e\u5e38\u306b\u7c21\u5358\n- \u8a08\u7b97\u304c\u9069\u5ea6\u306b\u91cd\u3044\n- \u30de\u30eb\u30c1\u30b3\u30a2 CPU \u3092\u6d3b\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u3084\u3059\u3044\n\n\u4ee5\u4e0b\u306e\u6bb5\u53d6\u308a\u3067\u3001\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u308a\u306a\u304c\u3089\u958b\u767a\u3092\u9032\u3081\u3001\uff11\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3088\u308a\u3082\uff14\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u65b9\u304c **\u7d0465\u500d\u901f\u3044** \u3068\u3044\u3046\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3002\n\n1. Elixir\uff1a\u5358\u4e00\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n2. Elixir\uff1a\u8907\u6570\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3067\u30de\u30eb\u30c1\u30b3\u30a2\u8a08\u7b97\n3. Elixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\n4. Elixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\n\u5f53\u6642\u3001\u4f7f\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n- Core i7 \u30d7\u30ed\u30bb\u30c3\u30b5\u642d\u8f09\u306e2012\u5e74\u88fd Mac mini\n- Elixir 1.2.0 \uff0b Erlang/OTP 18.2.1\n- Rust 1.5.0 \u5b89\u5b9a\u7248\n\n\u4eca\u56de\u3082\u540c\u3058 Mac mini \u3092\u4f7f\u3046\u304c\u3001Rust \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0a\u304c\u3063\u3066\u3044\u308b\uff08\u5f8c\u8ff0\uff09\u3002\u4eca\u56de\u306f Elixir \u306f\u4f7f\u7528\u3057\u306a\u3044\u3002\u5177\u4f53\u7684\u306a\u8a08\u7b97\u65b9\u6cd5\u3084\u3001\u524d\u56de\u4f7f\u7528\u3057\u305f Elixir \u3068 Rust \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u306f\u3001[\u524d\u56de][prev-article] \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3002\n\n## \u4eca\u56de\u3084\u308b\u3053\u3068\n\n\u4eca\u56de\u306f\u3001\u524d\u56de\u6700\u901f\u3060\u3063\u305f Rust \u306b\u3088\u308b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5c11\u3057\u66f8\u304d\u63db\u3048\u3066\u3001CPU \u304c\u6301\u3064 SIMD(Single Instruction Multiple Data) \u6a5f\u69cb\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3002\u79c1\u306e Mac \u306b\u642d\u8f09\u3055\u308c\u3066\u3044\u308b CPU \u306f Intel \u306e AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u3053\u308c\u306a\u3089\u3001\u6a5f\u68b0\u8a9e\u306e\uff11\u547d\u4ee4\u306764\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u3092\uff14\u3064\u4e26\u5217\u3067\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3001\u8a08\u7b97\u304c\u3055\u3089\u306b\u9ad8\u901f\u5316\u3059\u308b\u306f\u305a\u3060\u3002\n\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Rust \u3092\u4f7f\u7528\u3059\u308b\u3002\n\n- Rust 1.12.0 \u5b89\u5b9a\u7248\n- Rust 1.14.0 nightly \u7248\uff082016-10-15\uff09\n\n\u3061\u306a\u307f\u306b OS \u3060\u304c\u3001\u3053\u306e Mac \u306b\u30c8\u30ea\u30d7\u30eb\u30d6\u30fc\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b FreeBSD 10.3-RELEASE\u3001Arch Linux\u3001Mac OS X ~~Yosemite~~ El Capitan \u3092\u4f7f\u7528\u3057\u305f\u3002\u3069\u306e OS \u3067\u3082\u540c\u3058\u7d50\u679c\u3060\u3063\u305f\u3002\n\n\n## SIMD \u5316\u306e\uff12\u3064\u306e\u65b9\u6cd5\n\nRust \u3067 SIMD \u547d\u4ee4\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\uff12\u3064\u3042\u308b\u3002\n\n1. \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b\n2. \u30b3\u30f3\u30d1\u30a4\u30e9\u306e SIMD intrinsic \u3092\u4f7f\u3046\n\n\uff11\u306f rustc \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306b\u4f7f\u3063\u3066\u3044\u308b LLVM \u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b\u65b9\u6cd5\u3060\u3002`cargo build --release` \u307e\u305f\u306f `rustc -O` \u3068\u3059\u308b\u3060\u3051\u3067\u3001\u914d\u5217\u306b\u5bfe\u3059\u308b\u5358\u7d14\u306a\u30eb\u30fc\u30d7\u51e6\u7406\u304f\u3089\u3044\u306a\u3089\u3001\u81ea\u52d5\u7684\u306b SIMD \u3092\u4f7f\u3063\u305f\u6a5f\u68b0\u8a9e\u547d\u4ee4\u3078\u3068\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u306e\u65b9\u6cd5\u306f\u3001\u5b89\u5b9a\u7248\u306e Rust \u3092\u542b\u3081\u305f\u5168\u3066\u306e\u30ea\u30ea\u30fc\u30b9\u30c1\u30e3\u30cd\u30eb\u3067\u4f7f\u7528\u3067\u304d\u308b\u304c\u30011.9.0 \u3060\u3051\u306f\u3001\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u306e\u4f5c\u6210\u6642\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3001\u3053\u306e\u6a5f\u80fd\u304c\u30aa\u30d5\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u306a\u306e\u3067\u3001\u305d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u907f\u3051\u305f\u307b\u3046\u304c\u3044\u3044\u3002\uff08\u73fe\u6642\u70b9\u306e\u6700\u65b0\u7248\u306f 1.12.0\uff09\n\n\u307e\u305f\u3001\u6700\u9069\u5316\u306e\u5185\u5bb9\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u306f LLVM \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u300c[Auto-Vectorization in LLVM](http://llvm.org/docs/Vectorizers.html#slp-vectorizer)\u300d\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002\n\n\uff12\u306f rustc \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b SIMD \u95a2\u9023\u306e intrinsic \u3092\u4f7f\u3046\u65b9\u6cd5\u3060\u3002Intrinsic \u306f\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u5916\u90e8\u95a2\u6570\u306e\u3088\u3046\u306a\u898b\u305f\u76ee\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3060\u3002\u305d\u308c\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u5bfe\u5fdc\u3059\u308b LLVM \u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u308b\u3057\u304f\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n2016\u5e7410\u6708\u73fe\u5728\u3067\u306f\u3001SIMD \u95a2\u9023\u306e intrinsic \u306f\u975e\u5b89\u5b9a\u6271\u3044\u306a\u306e\u3067\u3001\u5229\u7528\u8005\u5074\u306e\u30b3\u30fc\u30c9\u3067 feature gate \u3092\u901a\u3057\u3066\u3053\u306e\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001Rust \u306e\u5b89\u5b9a\u7248\u30ea\u30ea\u30fc\u30b9\u3068\u30d9\u30fc\u30bf\u7248\u30ea\u30ea\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u6a5f\u80fd\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u3002\u3064\u307e\u308a\u3001SIMD intrinsic \u3092\u5229\u7528\u3059\u308b\u306b\u306f\u3001nightly \u7248\u306e Rust \u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\u9069\u5207\u306a config \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066 Rust \u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4eca\u56de\u306f rustup \u3067\u7c21\u5358\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u308b nightly \u7248\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\u306a\u304a\u3001Rust \u306e SIMD \u95a2\u9023\u6a5f\u80fd\u306e\u958b\u767a\u72b6\u6cc1\u306f\u3001[Tracking issue for SIMD support #27731](https://github.com/rust-lang/rust/issues/27731) \u3067\u78ba\u8a8d\u3067\u304d\u308b\u3002SIMD \u95a2\u9023\u306e intrinsic \u306f\u3001\u73fe\u72b6\u3067\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u306a\u3044\u3088\u3046\u3060\u304c\u3001[\u3053\u3053\u3068\u304b](https://github.com/rust-lang/rust/blob/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6/src/test/run-pass/simd-generics.rs)\u3001[\u3053\u3053\u3068\u304b](https://github.com/rust-lang/rust/blob/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6/src/test/run-pass/simd-intrinsic-generic-arithmetic.rs) \u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u96f0\u56f2\u6c17\u306f\u3064\u304b\u3081\u308b\u3060\u308d\u3046\u3002\n\nIntrinsic \u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u95a2\u6570\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3067\u306f\u4f7f\u3044\u3065\u3089\u3044\u3002\u3053\u308c\u3092\u30e9\u30c3\u30d7\u3057\u305f [SIMD \u30af\u30ec\u30fc\u30c8](https://crates.io/crates/simd) \u3092\u4f7f\u3046\u3068\u3001\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306a\u3069\u306e Rust \u306a\u3089\u3067\u306f\u306e\u62bd\u8c61\u5316\u6a5f\u69cb\u3092\u6d3b\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u884c\u3048\u308b\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\n## \u5bc4\u308a\u9053\uff1a\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u3088\u308b SIMD \u5316\u3092\u4f53\u9a13\n\n\u305d\u306e\u524d\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u3088\u308b SIMD \u5316\u3092\u4f53\u9a13\u3057\u3066\u307f\u3088\u3046\u3002\n\n\u4f8b\u3068\u3057\u3066\u3001\u5de8\u5927\u306a\u914d\u5217 x \u3068 y \u306e saxpy\u3001\u3064\u307e\u308a\u3001`a * x[i] + y[i]` \u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\n- [Rust\u306b\u3088\u308bSIMD\u3092\u5229\u7528\u3057\u305f\u6570\u5024\u8a08\u7b97](http://qiita.com/ksakiyama134/items/6bba618c56ab548764b6)\n\n\u305f\u3060\u3001\u4eca\u56de\u306f\u305d\u308c\u3092\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u5165\u529b\u3068\u7d50\u679c\u306e\u51fa\u529b\u3092\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u904e\u5ea6\u306a\u6700\u9069\u5316\u3092\u9632\u3050\u305f\u3081\u306e\u3082\u306e\u3060\u3002\u3082\u3057\u8a08\u7b97\u7d50\u679c\u3092\u51fa\u529b\u3057\u306a\u3044\u3068\u3001\u6700\u60aa\u306e\u5834\u5408\u3001\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u8a08\u7b97\u81ea\u4f53\u304c\u7701\u304b\u308c\u3066\u3057\u307e\u3046\u3002\n\n```rust:src/main.rs\n// -*- coding:utf-8-unix -*-\n\nextern crate rand;\nextern crate time;\n\nuse rand::{Rand, Rng, SeedableRng, StdRng};\n\nuse std::error::Error;\nuse std::ops::{Add, Mul};\n\nfn print_help() {\n    println!(\"\nUsage:\n    saxpy <size of array> [<item numbers in array z> ...]\n\n\");\n}\n\n// \u6642\u9593\u8a08\u6e2c\u306e\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3059\u308b\u30de\u30af\u30ed\nmacro_rules! timeit {\n    ($label: expr, $code: expr) => ({\n        let start = time::get_time();\n        let ret = $code;\n        let end = time::get_time();\n\n        let microsecs = (end.sec - start.sec) as f64 * 1_000_000.0 +\n            (end.nsec - start.nsec) as f64 / 1_000.0;\n\n        println!(\"{}: {} micro-seconds\", $label, microsecs);\n\n        ret\n    })\n}\n\nfn main() {\n    // \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u6570\u5024\u306b\u5909\u63db\n    match parse_args() {\n        Err(e) => {\n            println!(\"\\nError: {}\", e.description());\n            print_help();\n        }\n        Ok((size, item_numbers)) => {\n            // \u4e71\u6570\u751f\u6210\u5668\u3092\u521d\u671f\u5316\uff08\u6bce\u56de\u540c\u3058\u30b7\u30fc\u30c9\u3092\u4f7f\u7528\uff09\n            let seed = [1, 2, 3, 4];\n            let mut rng: StdRng = SeedableRng::from_seed(&seed[..]);\n\n            // a, x, y \u3092\u4e71\u6570\u3067\u521d\u671f\u5316\n            let a: f64 = rng.gen();\n\n            let (x, y) = timeit!(\"init x and y\", {\n                (init_array(&mut rng, size),\n                 init_array(&mut rng, size))\n            });\n\n            // z \u3092 0 \u3067\u521d\u671f\u5316\n            let mut z = timeit!(\"init z\", vec![0.0; size]);\n\n            // saxpy\u3001\u3064\u307e\u308a\u3001a * x[i] + y[i] \u3092\u8a08\u7b97\u3057\u3001z[i] \u306b\u683c\u7d0d\u3059\u308b\u3002\n            timeit!(\"saxpy\", saxpy(a, &x, &y, &mut z));\n\n            // \u7d50\u679c\u3092\u8868\u793a\n            println!(\"\");\n            for i in item_numbers {\n                println!(\"{}: x:{:.4}, y:{:.4}, z:{:.4}\", i, x[i], y[i], z[i]);\n            }\n        }\n    }\n}\n\nfn parse_args() -> Result<(usize, Vec<usize>), Box<Error>> {\n    let mut args = std::env::args().skip(1);\n\n    // \u5f15\u6570\u304c1\u3064\u3082\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\n    let size_str = try!(args.next()\n        .ok_or::<Box<Error>>(From::from(\"Please specify the size of the array.\")));\n    // \u914d\u5217\u306e\u8981\u7d20\u6570\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n    let size = try!(size_str.parse::<usize>());\n\n    let mut ns = Vec::with_capacity(args.len());\n    for n_str in args {\n        // \u914d\u5217\u306e\u8981\u7d20\u756a\u53f7\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u30a8\u30e9\u30fc\n        let n = try!(n_str.parse::<usize>());\n        // \u8981\u7d20\u756a\u53f7\u304c\u914d\u5217\u306e\u7bc4\u56f2\u5916\u3060\u3063\u305f\u3089\u30a8\u30e9\u30fc\n        if n >= size {\n            return Err(From::from(format!(\"The item with the item number does not exist. \\\n                                           (size of the array: {}, item number: {})\\n\\\n                                           NOTE: The array is 0-based.\",\n                                          n,\n                                          size)));\n        }\n        ns.push(n);\n    }\n    Ok((size, ns))\n}\n\nfn init_array<R: Rng, T: Rand>(rng: &mut R, size: usize) -> Vec<T> {\n    // rng.gen_iter() \u306f\u4e71\u6570\u3092\u7121\u9650\u306b\u751f\u6210\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3002\n    // take(size) \u3067 size \u500b\u5206\u306e\u4e71\u6570\u3092\u53ce\u96c6\u3057 Vec<T> \u306b\u5165\u308c\u308b\u3002\n    rng.gen_iter().take(size).collect()\n}\n\nfn saxpy<T>(a: T, x: &[T], y: &[T], z: &mut [T])\n    where T: Copy + Add<T, Output = T> + Mul<T, Output = T>\n{\n    for ((&xi, &yi), zi) in x.iter().zip(y.iter()).zip(z.iter_mut()) {\n        *zi = a * xi + yi;\n    }\n}\n\n```\n\n\n### SIMD \u5316\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30b3\u30fc\u30c9\n\n`saxpy()` \u95a2\u6570\u306e\u3053\u306e\u30eb\u30fc\u30d7\u8a08\u7b97\u304c\u3001LLVM \u306e\u6700\u9069\u5316\u306b\u3088\u308a SIMD \u5316\u3055\u308c\u308b\u3002\n\n```rust\n    for ((&xi, &yi), zi) in x.iter().zip(y.iter()).zip(z.iter_mut()) {\n        *zi = a * xi + yi;\n    }\n```\n\n\u6163\u308c\u306a\u3044\u3068\u308f\u304b\u308a\u306b\u304f\u3044\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u3046\u66f8\u304f\u306e\u3068\u307b\u307c\u540c\u3058\u3060\u3002\n\n```rust\n    for i in 0..x.len() {\n        z[i] = a * x[i] + y[i];\n    }\n```\n\n\u3053\u3046\u3044\u3046\u5358\u7d14\u306a\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306f\u3001\u6a5f\u68b0\u7684\u306a\u66f8\u304d\u63db\u3048\u3067 SIMD \u5316\u3057\u3084\u3059\u3044\u3002\n\n\n### \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\nRust \u306e\u5b89\u5b9a\u7248\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u3082\u3057 Rust \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u3089\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307b\u3057\u3044\u3002\n\n- [rustup \u3067 Rust \u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u7c21\u5358\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb](http://qiita.com/chikoski/items/b6461367e8c3875bb235)\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f\u3089\u3001\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new saxpy --bin\n$ cd saxpy\n```\n\n\u305d\u3057\u3066\u3001Cargo.toml \u306b\u4ee5\u4e0b\u306e\u4f9d\u5b58\u30af\u30ec\u30fc\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n```toml:Cargo.toml\n[dependencies]\nrand = \"0.3.14\"\ntime = \"0.1.35\"\n```\n\n\u6700\u5f8c\u306b\u3001src/main.rs \u306e\u5185\u5bb9\u3092\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7f6e\u304d\u63db\u3048\u308c\u3070 OK \u3060\u3002\n\n\n### \u6700\u9069\u5316\u3042\u308a\u3001target-feature \u6307\u5b9a\u306a\u3057\u3067\u5b9f\u884c\u3059\u308b\n\n\u6700\u9069\u5316\u3042\u308a\uff08`--release` \u30d5\u30e9\u30b0\u306e\u307f\u6307\u5b9a\uff09\u3067\u5b9f\u884c\u3057\u3088\u3046\u3002\n\n```\n$ cargo run --release -- 50000000 0 100 49999999\n```\n\n`--` \u4ee5\u964d\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u4e0e\u3048\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u300150000000\uff08\uff15\u5343\u4e07\uff09\u306f\u914d\u5217\u306e\u5927\u304d\u3055\u3001\u305d\u308c\u306b\u7d9a\u304f\u6570\u5b57\u306f\u3001\u914d\u5217 X\u3001Y\u3001Z \u306b\u3064\u3044\u3066\u3001\u8981\u7d20\u756a\u53f7 0\u3001100\u300149999999 \u306e\u5024\u3092\u8868\u793a\u3057\u308d\u3068\u3044\u3046\u6307\u793a\u3060\u3002\n\n\u5b9f\u884c\u306b\u6210\u529f\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u3002\u8a08\u7b97\u7d50\u679c\u3060\u3051\u3067\u306a\u304f\u3001\u914d\u5217\u306e\u521d\u671f\u5316\u3084\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3082\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8868\u793a\u3055\u308c\u308b\u3002\n\n\n```\ninit x and y: 738325.583 micro-seconds\ninit z: 133700.386 micro-seconds\nsaxpy: 99319.297 micro-seconds\n\n0: x:0.1363, y:0.8950, z:0.9653\n100: x:0.3087, y:0.4003, z:0.5596\n49999999: x:0.3535, y:0.5883, z:0.7707\n```\n\n- x \u3068 y \u306e\u521d\u671f\u5316\uff08init\uff09\u51e6\u7406\u306e\u5b9f\u884c\u6642\u9593\u306f\u3001\u5168\u9805\u76ee\u3092\u4e71\u6570\u3067\u521d\u671f\u5316\u3059\u308b\u3068\u3044\u3046\u8a08\u7b97\u306e\u91cd\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u5168\u4f53\u306e\u5b9f\u884c\u6642\u9593\u306e76%\u3092\u5360\u3081\u3066\u3044\u308b\u3002\n- z \u306e 0.0 \u306b\u3088\u308b\u521d\u671f\u5316\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3001\u5168\u4f53\u306e\u7d0414%\u3002\n- saxpy \u306e\u8a08\u7b97\u306b\u8981\u3057\u305f\u6642\u9593\u306f\u5168\u4f53\u306e\u7d0410%\u3060\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u30d3\u30eb\u30c9\u3068\u540c\u6642\u306b\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3002\n\n```\n$ RUSTFLAGS='--emit asm' cargo build --release\n```\n\n\u5168\u3066\u306e x86_64 \u30d7\u30ed\u30bb\u30c3\u30b5\u306f SSE2 \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001SIMD \u547d\u4ee4\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u306f\u305a\u3060\u3002\n\n```\n$ grep xmm target/release/saxpy.s\n\tmovdqu\t1352(%rsp), %xmm0\n\tmovdqu\t1368(%rsp), %xmm1\n\tmovdqa\t%xmm1, 160(%rsp)\n\tmovdqa\t%xmm0, 144(%rsp)\n\tmovdqa\t144(%rsp), %xmm0\n\tmovdqa\t160(%rsp), %xmm1\n\tmovapd\t176(%rsp), %xmm2\n\tmovapd\t%xmm2, 96(%rsp)\n\tmovdqa\t%xmm1, 80(%rsp)\n\tmovdqa\t%xmm0, 64(%rsp)\n\tmovaps\t.LCPI8_0(%rip), %xmm0\n\tmovaps\t%xmm0, 1392(%rsp)\n\tmovdqa\t.LCPI8_1(%rip), %xmm0\n\tmovdqa\t%xmm0, 1408(%rsp)\n\txorps\t%xmm0, %xmm0\n\tcvtsi2sdq\t%rax, %xmm0\n\tmulsd\t.LCPI8_3(%rip), %xmm0\n\tcvtsi2sdl\t%ecx, %xmm1\n\tdivsd\t.LCPI8_4(%rip), %xmm1\n\taddsd\t%xmm0, %xmm1\n\tmovsd\t%xmm1, 352(%rsp)\n...\n\n$ grep -c xmm target/release/saxpy.s\n99\n```\n\n\u3084\u306f\u308a\u3001SIMD \u547d\u4ee4\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\u547d\u4ee4\u6570\u306f99\u500b\u3042\u3063\u305f\u3002\n\n\n### \u6700\u9069\u5316\u3042\u308a\u3001target-feature \u6307\u5b9a\u3042\u308a\u3067\u5b9f\u884c\u3059\u308b\n\n\u3053\u306e Mac \u306f\u3001AVX \u547d\u4ee4\u307e\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3055\u3089\u306b\u6700\u9069\u5316\u3067\u304d\u308b\u3002`RUSTFLAGS` \u306b `-C target-feature=+avx` \u3092\u8ffd\u52a0\u3057\u3088\u3046\u3002\u306a\u304a\u3001\u3053\u306e Mac \u306e\u5834\u5408\u3001`-C target-cpu=native` \u3068\u6307\u5b9a\u3057\u3066\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3002\n\n```\n$ RUSTFLAGS='--emit asm -C target-feature=+avx' cargo run --release -- 50000000 0 100 49999999\n```\n\n```\ninit x and y: 731802.102 micro-seconds\ninit z: 132771.348 micro-seconds\nsaxpy: 95226.379 micro-seconds\n\n0: x:0.1363, y:0.8950, z:0.9653\n100: x:0.3087, y:0.4003, z:0.5596\n49999999: x:0.3535, y:0.5883, z:0.7707\n```\n\nsaxpy \u306e\u8a08\u7b97\u306e\u3068\u3053\u308d\u304c\u3001\u7d044%\u901f\u304f\u306a\u3063\u305f\u3002\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u3088\u3046\u3002\n\n```\n$ grep xmm target/release/saxpy.s\n\tvxorps\t%xmm0, %xmm0, %xmm0\n\tvcvtsi2sdq\t%rax, %xmm0, %xmm0\n\tvmulsd\t.LCPI8_2(%rip), %xmm0, %xmm0\n\tvcvtsi2sdl\t%ecx, %xmm0, %xmm1\n\tvdivsd\t.LCPI8_3(%rip), %xmm1, %xmm1\n\tvaddsd\t%xmm1, %xmm0, %xmm0\n\tvmovsd\t%xmm0, 384(%rsp)\n\tvmovq\t%rax, %xmm1\n\tvmovq\t%rax, %xmm0\n\tvmovdqa\t%xmm1, 464(%rsp)\n\tvpunpcklqdq\t%xmm1, %xmm0, %xmm0\n\tvmovdqa\t%xmm0, 960(%rsp)\n\tvxorps\t%xmm0, %xmm0, %xmm0\n\tvcvtsi2sdq\t%rax, %xmm0, %xmm0\n\tvmulsd\t.LCPI8_2(%rip), %xmm0, %xmm0\n\tvcvtsi2sdl\t%ecx, %xmm0, %xmm1\n\tvdivsd\t.LCPI8_3(%rip), %xmm1, %xmm1\n...\n\n$ grep -c xmm target/release/saxpy.s\n53\n```\n\n\u547d\u4ee4\u304c\u5909\u308f\u3063\u305f\u306e\u306b\u304a\u6c17\u3065\u304d\u3060\u308d\u3046\u304b\uff08\u4f8b\uff1a`addsd` \u2192 `vaddsd`\uff09\u3002SSE2 \u304b\u3089 AVX \u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u3088\u308a\u52b9\u7387\u306e\u3088\u3044\u547d\u4ee4\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u547d\u4ee4\u6570\u304c53\u306b\u6e1b\u3063\u3066\u3044\u308b\u3002\n\n\n## SIMD \u30af\u30ec\u30fc\u30c8\u3067\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3059\u308b\n\n\u3067\u306f\u3001\u3044\u3088\u3044\u3088\u672c\u984c\u306e\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092 SIMD \u5316\u3057\u3088\u3046\u3002\n\nSMID \u30af\u30ec\u30fc\u30c8\u7d4c\u7531\u3067\u3001SIMD intrinsics \u3092\u4f7f\u3046\u306e\u3067\u3001nightly \u7248\u306e Rust \u304c\u5fc5\u8981\u3060\u3002\u79c1\u304c\u4f7f\u7528\u3057\u305f\u306e\u306f\u30011.14.0 \u306e 2016-10-15 nightly \u30d3\u30eb\u30c9\u7248\u3060\u3002rustup \u3067\u5168\u304f\u540c\u3058\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n\n```\n$ rustup update nightly-2016-10-17\n```\n\n\u65e5\u4ed8\u304c\u5f8c\u308d\u306b\u305a\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002\u3069\u3046\u3084\u3089 nightly \u7248\u306e Rust \u306f\u65e5\u66dc\u65e5\u4ee5\u5916\u306e\u6bce\u6669\u30d3\u30eb\u30c9\u3055\u308c\u3001\u305d\u306e\u30d0\u30a4\u30ca\u30ea\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u7fcc\u65e5\u306b\u4f5c\u3089\u308c\u308b\u3088\u3046\u3060\u3002\n\n\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```\n$ cd \u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n$ cargo new calcpi --bin\n$ cd calcpi\n$ mkdir src/pi_fallback\n$ mkdir src/pi_simd\n```\n\n\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f nightly \u7248\u3067\u30d3\u30eb\u30c9\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3002\n\n```\n$ rustup override add nightly-2016-10-17\n$ rustup override list\n/usr/home/tatsuya/rust-projects/calcpi  \tnightly-2016-10-17-x86_64-unknown-freebsd\n```\n\n\n### Cargo.toml \u306e\u7de8\u96c6\n\nCargo.toml \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7de8\u96c6\u3059\u308b\u3002\n\n```toml:Cargo.toml\n[dependencies]\nsimd = { version = \"0.1.1\", optional = true }\n\n[features]\n# Enable to use simd acceleration.\nsimd-accel = [\"simd\"]\n```\n\n\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30af\u30ec\u30fc\u30c8\u3068\u3057\u3066 simd \u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u3001\u3055\u3089\u306b\u3001simd-accel \u3068\u3044\u3046\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u5b9a\u7fa9\u3057\u305f\u3002\u3053\u306e\u5f8c\u3001src/lib.rs \u306e\u4e2d\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u3053\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3001\u304b\u3064\u3001CPU \u304c AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6642\u3060\u3051\u3001SIMD \u5316\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\n### \u5143\u306e\u95a2\u6570\n\nSIMD \u5316\u524d\u306e `calc_pi_range()` \u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u8a08\u7b97\u5185\u5bb9\u306b\u3064\u3044\u3066\u3001\u8a73\u3057\u304f\u306f [\u524d\u56de][prev-article] \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n```rust:src/pi_fallback/calcpi.rs\npub fn display_name() -> String {\n    \"calc_pi() with no simd support.\".to_string()\n}\n\npub fn calc_pi_range(n: u64, offset: u64, count: u64) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut s = 0.0;\n    for i in offset..(offset + count) {\n        let x = (i as f64) * w;\n        s += (1.0 - x * x).sqrt();\n    }\n    4.0 * w * s\n}\n```\n\n\u3053\u306e\u30ed\u30b8\u30c3\u30af\u3060\u3068\u3001LLVM \u306e\u81ea\u52d5 SIMD \u5316\u306f\u50cd\u304b\u306a\u304b\u3063\u305f\u3002\n\n\n### SIMD \u5316\u3057\u305f\u95a2\u6570\n\nSIMD \u30af\u30ec\u30fc\u30c8\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u4f53\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066 SIMD \u5316\u3059\u308b\u3068\u3053\u3046\u306a\u308b\u3002\n\n```rust:src/pi_simd/calcpi.rs\nuse simd::x86::avx::{f64x4, AvxF64x4};\n\npub fn display_name() -> String {\n    \"calc_pi() with avx simd support.\".to_string()\n}\n\npub fn calc_pi_range(n: u64, offset: u64, count: u64) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut sv = f64x4::splat(0.0);\n\n    let o64 = offset as f64;\n    let mut iv = f64x4::new(o64, o64 + 1.0, o64 + 2.0, o64 + 3.0);\n\n    for _ in 0..(count / 4) {\n        let xv = iv * f64x4::splat(w);\n        sv = sv + (f64x4::splat(1.0) - xv * xv).sqrt();\n        iv = iv + f64x4::splat(4.0);\n    }\n    let s = (0..4).fold(0.0, |acc, i| acc + sv.extract(i));\n\n    4.0 * w * s\n}\n```\n\n`f64x4` \u304c `f64`\uff0864\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\uff09\u3092\uff14\u4e26\u5217\u3067\u6f14\u7b97\u3059\u308b\u305f\u3081\u306e ~~\u30e2\u30b8\u30e5\u30fc\u30eb~~ \u69cb\u9020\u4f53\u3067\u3001`avx` \u30e2\u30b8\u30e5\u30fc\u30eb\u914d\u4e0b\u306b\u3042\u308b\u3002`calc_pi_range()` \u3067\u306f\u3001`f64x4` \u578b\u306e\u5909\u6570\u3092\u898b\u5206\u3051\u3084\u3059\u3044\u3088\u3046\u3001`sv` \u3084 `iv` \u306e\u3088\u3046\u306b\u3001\u540d\u524d\u306b `v` \u3092\u4ed8\u3051\u3066\u3044\u308b\u3002\n\n- `f64x4::splat(0.0)` \u306a\u3089\u3001\uff14\u3064\u3068\u3082 `0.0` \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n- `f64x4::new(o64, o64 + 1.0, o64 + 2.0, o64 + 3.0)` \u306a\u3089\u3001\uff14\u3064\u304c\u305d\u308c\u305e\u308c\u6307\u5b9a\u3057\u305f\u5024\u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n- SIMD \u30af\u30ec\u30fc\u30c8\u306f\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001`sv = sv + (f64x4::splat(1.0) - xv * xv).sqrt()` \u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\u4fbf\u5229\u3002\n- `(0..4).fold(0.0, |acc, i| acc + sv.extract(i))` \u3068\u3057\u3066\u3001\u5909\u6570 `s` \u306e\uff14\u3064\u306e\u5024\u3092\u9806\u306b\u53d6\u308a\u51fa\u3057\u3001\u305d\u306e\u5408\u8a08\u3092\u6c42\u3081\u3066\u3044\u308b\u3002\n\n\n### \u547c\u3073\u51fa\u3057\u5143\u306e\u95a2\u6570\n\n\u3053\u308c\u3089\u3092\u547c\u3073\u51fa\u3059\u5074\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rust:src/lib.rs\n#![cfg_attr(feature = \"simd-accel\", feature(cfg_target_feature))]\n\n#[cfg(feature = \"simd-accel\")]\nextern crate simd;\n\nuse std::thread;\n\n#[cfg(feature = \"simd-accel\")]\n#[cfg(target_feature = \"avx\")]\n#[path = \"./pi_simd/calcpi.rs\"]\nmod calcpi;\n\n#[cfg_attr(feature = \"simd-accel\", cfg(not(target_feature = \"avx\")))]\n#[path = \"./pi_fallback/calcpi.rs\"]\nmod calcpi;\n\nconst MAX_THREADS: u64 = 64;\n\n// Require Rust 1.11.0 or newer because of sum()\npub fn calc_pi_parallel(n: u64, num_threads: u64) -> Result<f64, String> {\n    try!(check_pi_params(n, num_threads));\n\n    println!(\"Using {}\", calcpi::display_name());\n\n    let len = n / num_threads;\n    let handles: Vec<_> = (0..num_threads)\n        .map(|i| thread::spawn(move || calcpi::calc_pi_range(n, len * i, len)))\n        .collect();\n\n    let results = handles.into_iter().map(|h| h.join().unwrap());\n    let pi = results.into_iter().sum();\n    Ok(pi)\n}\n\nfn check_pi_params(n: u64, num_threads: u64) -> Result<(), String> {\n    if num_threads <= 0 || num_threads > MAX_THREADS {\n        Err(format!(\"Invalid num_threads {}. It must be > 0 and <= {}\",\n                    num_threads,\n                    MAX_THREADS))\n    } else if n % num_threads != 0 {\n        Err(format!(\"n must be a multiple of num_threads. (n = {}, num_threads = {})\",\n                    n,\n                    num_threads))\n    } else if (n / num_threads) % 4 != 0 {\n        Err(format!(\"n / num_threads must be a multiple of 4. (n / num_threads = {})\",\n                    n / num_threads))\n    } else {\n        Ok(())\n    }\n}\n```\n\n- `#[cfg(feature = \"simd-accel\")]`\u3001`#[cfg(target_feature = \"avx\")]` \u3092\u4f7f\u3063\u3066\u3001simd-accel \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3001\u304b\u3064\u3001CPU \u304c AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u6642\u3060\u3051\u3001SIMD \u5316\u3055\u308c\u305f `calc_pi_range()` \u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\u305d\u3046\u3067\u306a\u3044\u6642\u306f\u3001\u5143\u306e SIMD \u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3002\n- `calc_pi_parallel()` \u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u306b `num_threads` \u3067\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3001`calc_pi_range()` \u3092\u547c\u3073\u51fa\u3059\u3002\u8a73\u3057\u304f\u306f [\u524d\u56de][prev-article] \u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044\u3002\n\n\u6700\u5f8c\u306b `main()` \u95a2\u6570\u3002\n\n```rust:src/main.rs\nextern crate calcpi as pi;\n\nfn main() {\n    let num_threads = 8;\n    let n = 500_000_000 * num_threads * 4;\n\n    match pi::calc_pi_parallel(n, num_threads) {\n        Ok(pi) => println!(\"pi = {}\", pi),\n        Err(e) => println!(\"ERROR: {}\", e),\n    }\n}\n```\n\n- \u56db\u5206\u5186\u3092 ~~50\u5104\u5206\u5272~~ 160\u5104\u5206\u5272\u3057\u3066\u8fd1\u4f3c\u3059\u308b\u3002\uff08\u524d\u56de\u306f10\u5104\u5206\u5272\uff09\n- \uff18\u30b9\u30ec\u30c3\u30c9\u306b\u4e26\u5217\u5316\u3002\uff18\u3064\u306e\u8ad6\u7406\u30b3\u30a2\uff08\uff14\u30b3\u30a2 x Hyper Threading\uff09\u3092\u4f7f\u3044\u5207\u308b\n- \u3082\u3057 simd-accel \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u3001CPU \u30b3\u30a2\u6bce\u306b SIMD \u306b\u3088\u308b\uff14\u4e26\u5217\u6f14\u7b97\u3092\u884c\u3046\u3002\uff08\u305d\u306e\u5207\u308a\u66ff\u3048\u306f\u3001lib.rs \u5074\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u65bd\u3059\u308b\uff09\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u592732\u4e26\u5217\u3067\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6f14\u7b97\u3092\u56de\u3057\u3066\u3044\u3053\u3046\u3002\n\n\n### \u5b9f\u884c\u3059\u308b \u2192 \u306f\u3084\u3044\n\n\u3067\u306f\u5b9f\u884c\u3057\u3088\u3046\u3002\u307e\u305a\u306f\u3001SIMD \u306a\u3057\u3002\uff18\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u308b\uff18\u4e26\u5217\u6f14\u7b97\u3002\n\n```\n$ rustc --version\nrustc 1.14.0-nightly (98a3502da 2016-10-15)\n\n$ cargo build --release\n\n$ time ./target/release/calcpi\nUsing calc_pi() with no simd support.\npi = 3.141592653714508\n./target/release/calcpi  132.06s user 0.02s system 788% cpu 16.747 total\n```\n\n\u7d9a\u3044\u3066\u3001SIMD \u3042\u308a\u3002\uff18\u30b9\u30ec\u30c3\u30c9 x SIMD \u306b\u3088\u308b32\u4e26\u5217\u6f14\u7b97\u3002\n\n```\n$ RUSTFLAGS='-C target-feature=+avx' cargo build --release --features=simd-accel\n\n$ time ./target/release/calcpi\nUsing calc_pi() with avx simd support.\npi = 3.1415926537147785\n./target/release/calcpi  65.80s user 0.00s system 792% cpu 8.303 total\n```\n\n\u5c0f\u6570\u70b9\u4ee5\u4e0b13\u6841\u76ee\u4ee5\u964d\u304c\u5fae\u5999\u306b\u9055\u3046\u306e\u306f\u3001\u8a08\u7b97\u306e\u9806\u756a\u304c\u7570\u306a\u308b\u3053\u3068\u306b\u3088\u308b\u8aa4\u5dee\u3060\u308d\u3046\u304b\u3002\u306a\u306b\u306f\u3068\u3082\u3042\u308c\u3001**\u7d04\uff12\u500d\u306e\u9ad8\u901f\u5316\u3092\u9054\u6210\u3067\u304d\u305f\uff01**\n\n\n## \u307e\u3068\u3081\n\n- Rust \u3067 SIMD \u5316\u3059\u308b\u306b\u306f\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308b\n  * **\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u306b\u4efb\u305b\u308b** \u2192 \u5b89\u5b9a\u7248 Rust \u3092\u542b\u3080\u5168\u3066\u306e\u30ea\u30ea\u30fc\u30b9\u30c1\u30e3\u30cd\u30eb\u3067\u5229\u7528\u3067\u304d\u308b\u3002\u3054\u304f\u7c21\u5358\u306a\u30d1\u30bf\u30fc\u30f3\u306a\u3089 SIMD \u5316\u3055\u308c\u308b\u3002\n  * **\u30b3\u30f3\u30d1\u30a4\u30e9\u306e SIMD intrinsic \u3092\u4f7f\u3046** \u2192 \u73fe\u6642\u70b9\u3067\u306f\u975e\u5b89\u5b9a\u3002SIMD \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u3068\u3001Rust \u3089\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u306e\u307e\u307e SIMD \u5316\u3067\u304d\u308b\u3002\n- \u4eca\u56de\u306e\u8a08\u7b97\u5185\u5bb9\uff08\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\uff09\u3068\u79c1\u306e\u5b9f\u884c\u74b0\u5883\u3067\u306f\u3001SIMD \u5316\u306b\u3088\u3063\u3066\u3001\u8a08\u7b97\u901f\u5ea6\u304c\u7d04\uff12\u500d\u306b\u9ad8\u901f\u5316\u3055\u308c\u305f\u3002\n- \u4eca\u56de\u306e\u3088\u3046\u306b\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u3067\u306f\u3001SIMD \u5316\u306e\u6069\u6075\u3092\u53d7\u3051\u3084\u3059\u3044\u3002\n", "tags": ["rust"]}