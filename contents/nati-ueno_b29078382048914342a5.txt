{"context": "JSON Web Token (JWT)\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u8a8d\u8a3c\u3001\u8a8d\u53ef\u306b\u4f7f\u3048\u308b\u7f72\u540d\u4ed8\u304dJSON\u3002\u30e6\u30fc\u30b6\u306f\u5185\u5bb9\u3092\u6539\u3056\u3093\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30b5\u30fc\u30d0\u5074\u306b\u8a8d\u8a3c\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u4fdd\u6301\u3057\u306a\u304f\u3066\u826f\u3044\u3057\u3001\u691c\u8a3c\u6642\u306b\u8a8d\u8a3c\u30b5\u30fc\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u4e0d\u8981\u3002\u306a\u306e\u3067\u3001\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a\u8a8d\u8a3c\u30b5\u30fc\u30d3\u30b9\u3092JSON\u306e\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u640d\u306a\u308f\u305a\u5b9f\u88c5\u3067\u304d\u308b\u3002Google\u306fOAuth2\u306e\u30c8\u30fc\u30af\u30f3\u306b\u63a1\u7528\u3057\u3066\u3044\u308b\u3057\u3001\u5e83\u304f\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u6a19\u6e96\u3068\u8a00\u3048\u308b\u3002\nEcho\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u306f\u3001JWT Middleware\u3092\u4f7f\u7528\u53ef\u80fd\u3002\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\n\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u5171\u6709\u79d8\u5bc6\u9375\u3092\u4f7f\u3063\u305f\u7f72\u540d\u3067\u3042\u308bHMAC\u3092\u4f7f\u3063\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306b\u904b\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u79d8\u5bc6\u9375\u3092\u500b\u5225\u306e\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u8907\u88fd\u3057\u306a\u304f\u3066\u826f\u3044\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u306e\u7f72\u540d\u306e\u65b9\u304c\u697d\u306a\u306e\u3067\u3001\u3084\u308a\u304b\u305f\u3092\u8abf\u3079\u3066\u307f\u305f\u3002\n\u7f72\u540d\u65b9\u6cd5\u3092RSA\u306b\u3057\u3066\u3001JWTWithConfig\u3092\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306b\u6e21\u3057\u3066\u3042\u3052\u308b\u3060\u3051\u3002\u697d\u30c1\u30f3\u3067\u3059\u306d\u3000:)\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"net/http\"\n    \"time\"\n\n    jwt \"github.com/dgrijalva/jwt-go\"\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n)\n\nfunc login(c echo.Context) error {\n    username := c.FormValue(\"username\")\n    password := c.FormValue(\"password\")\n\n    if username == \"jon\" && password == \"shhh!\" {\n        // Create token\n        token := jwt.New(jwt.SigningMethodRS512)\n\n        // Set claims\n        claims := token.Claims.(jwt.MapClaims)\n        claims[\"name\"] = \"Jon Snow\"\n        claims[\"admin\"] = true\n        claims[\"exp\"] = time.Now().Add(time.Hour * 72).Unix()\n\n        keyData, _ := ioutil.ReadFile(\"sample_key\")\n        key, _ := jwt.ParseRSAPrivateKeyFromPEM(keyData)\n        // Generate encoded token and send it as response.\n        t, err := token.SignedString(key)\n        if err != nil {\n            return err\n        }\n        return c.JSON(http.StatusOK, map[string]string{\n            \"token\": t,\n        })\n    }\n\n    return echo.ErrUnauthorized\n}\n\nfunc accessible(c echo.Context) error {\n    return c.String(http.StatusOK, \"Accessible\")\n}\n\nfunc restricted(c echo.Context) error {\n    user := c.Get(\"user\").(*jwt.Token)\n    claims := user.Claims.(jwt.MapClaims)\n    name := claims[\"name\"].(string)\n    return c.String(http.StatusOK, \"Welcome \"+name+\"!\")\n}\n\nfunc main() {\n    e := echo.New()\n\n    // Middleware\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n\n    // Login route\n    e.POST(\"/login\", login)\n\n    // Unauthenticated route\n    e.GET(\"/\", accessible)\n\n    // Restricted group\n    r := e.Group(\"/restricted\")\n\n    keyData, _ := ioutil.ReadFile(\"sample_key.pub\")\n    key, _ := jwt.ParseRSAPublicKeyFromPEM(keyData)\n\n    r.Use(middleware.JWTWithConfig(middleware.JWTConfig{\n        SigningKey:    key,\n        SigningMethod: \"RS512\",\n    }))\n    r.GET(\"\", restricted)\n\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n\n\n[JSON Web Token](https://jwt.io/introduction/) (JWT)\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u8a8d\u8a3c\u3001\u8a8d\u53ef\u306b\u4f7f\u3048\u308b\u7f72\u540d\u4ed8\u304dJSON\u3002\u30e6\u30fc\u30b6\u306f\u5185\u5bb9\u3092\u6539\u3056\u3093\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30b5\u30fc\u30d0\u5074\u306b\u8a8d\u8a3c\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u4fdd\u6301\u3057\u306a\u304f\u3066\u826f\u3044\u3057\u3001\u691c\u8a3c\u6642\u306b\u8a8d\u8a3c\u30b5\u30fc\u30d0\u306b\u30a2\u30af\u30bb\u30b9\u4e0d\u8981\u3002\u306a\u306e\u3067\u3001\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a\u8a8d\u8a3c\u30b5\u30fc\u30d3\u30b9\u3092JSON\u306e\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u640d\u306a\u308f\u305a\u5b9f\u88c5\u3067\u304d\u308b\u3002Google\u306fOAuth2\u306e\u30c8\u30fc\u30af\u30f3\u306b\u63a1\u7528\u3057\u3066\u3044\u308b\u3057\u3001\u5e83\u304f\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u6a19\u6e96\u3068\u8a00\u3048\u308b\u3002\n\nEcho\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u306f\u3001JWT Middleware\u3092\u4f7f\u7528\u53ef\u80fd\u3002[\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb](https://echo.labstack.com/cookbook/jwt)\n\n\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u5171\u6709\u79d8\u5bc6\u9375\u3092\u4f7f\u3063\u305f\u7f72\u540d\u3067\u3042\u308bHMAC\u3092\u4f7f\u3063\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306b\u904b\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u79d8\u5bc6\u9375\u3092\u500b\u5225\u306e\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u8907\u88fd\u3057\u306a\u304f\u3066\u826f\u3044\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u306e\u7f72\u540d\u306e\u65b9\u304c\u697d\u306a\u306e\u3067\u3001\u3084\u308a\u304b\u305f\u3092\u8abf\u3079\u3066\u307f\u305f\u3002\n\n\u7f72\u540d\u65b9\u6cd5\u3092RSA\u306b\u3057\u3066\u3001JWTWithConfig\u3092\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u306b\u6e21\u3057\u3066\u3042\u3052\u308b\u3060\u3051\u3002\u697d\u30c1\u30f3\u3067\u3059\u306d\u3000:)\n\n``` Go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc login(c echo.Context) error {\n\tusername := c.FormValue(\"username\")\n\tpassword := c.FormValue(\"password\")\n\n\tif username == \"jon\" && password == \"shhh!\" {\n\t\t// Create token\n\t\ttoken := jwt.New(jwt.SigningMethodRS512)\n\n\t\t// Set claims\n\t\tclaims := token.Claims.(jwt.MapClaims)\n\t\tclaims[\"name\"] = \"Jon Snow\"\n\t\tclaims[\"admin\"] = true\n\t\tclaims[\"exp\"] = time.Now().Add(time.Hour * 72).Unix()\n\n\t\tkeyData, _ := ioutil.ReadFile(\"sample_key\")\n\t\tkey, _ := jwt.ParseRSAPrivateKeyFromPEM(keyData)\n\t\t// Generate encoded token and send it as response.\n\t\tt, err := token.SignedString(key)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"token\": t,\n\t\t})\n\t}\n\n\treturn echo.ErrUnauthorized\n}\n\nfunc accessible(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Accessible\")\n}\n\nfunc restricted(c echo.Context) error {\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(jwt.MapClaims)\n\tname := claims[\"name\"].(string)\n\treturn c.String(http.StatusOK, \"Welcome \"+name+\"!\")\n}\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Login route\n\te.POST(\"/login\", login)\n\n\t// Unauthenticated route\n\te.GET(\"/\", accessible)\n\n\t// Restricted group\n\tr := e.Group(\"/restricted\")\n\n\tkeyData, _ := ioutil.ReadFile(\"sample_key.pub\")\n\tkey, _ := jwt.ParseRSAPublicKeyFromPEM(keyData)\n\n\tr.Use(middleware.JWTWithConfig(middleware.JWTConfig{\n\t\tSigningKey:    key,\n\t\tSigningMethod: \"RS512\",\n\t}))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n\n```\n\n\n", "tags": ["Go", "golang", "echo", "JWT"]}