{"context": " More than 1 year has passed since last update.Python\u3067\u6570\u5024\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e2\u56de\u76ee\u3067\u3059\uff0e\n\u4eca\u56de\u306f\u62e1\u6563\u5f8b\u901f\u51dd\u96c6\uff08DLA\uff09\u306b\u3064\u3044\u3066\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u306e\u5185\u5bb9\u306f\u8a08\u7b97\u7269\u7406\u5b66\u306e\u3088\u3044\u6559\u79d1\u66f8\u3067\u3042\u308b\uff0c \n\n\n\n\u8a08\u7b97\u7269\u7406\u5b66\u5165\u9580(2000/12)\u30cf\u30fc\u30d9\u30a4 \u30b4\u30fc\u30eb\u30c9\u3001\u30b8\u30e3\u30f3 \u30c8\u30dc\u30c1\u30cb\u30af \u4ed6\u5546\u54c1\u8a73\u7d30\u3092\u898b\u308b\n\n\n\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u96ea\u306e\u7d50\u6676\u3084\u5730\u8cea\u5b66\u7684\u306a\u65ad\u5c64\u306b\u304a\u3051\u308b\u7a32\u59bb\u5f62\u306e\u3072\u3073\u5272\u308c\u306e\u5f62\u6210\uff0c\u30d0\u30af\u30c6\u30ea\u30a2\u306e\u30b3\u30ed\u30cb\u30fc\u306e\u6210\u9577\u306a\u3069\uff0c\u81ea\u7136\u754c\u306b\u306f\u57fa\u672c\u3068\u306a\u308b\u5358\u4f4d\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4ed8\u3051\u52a0\u3048\u3066\u3044\u304f\u3053\u3068\u3067\u6210\u9577\u3059\u308b\u3082\u306e\u3092\u591a\u304f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u3088\u304f\u77e5\u3089\u308c\u305f\u30e2\u30c7\u30eb\u306e1\u3064\u306b\u62e1\u6563\u5f8b\u901f\u51dd\u96c6(Diffusion-Limited Aggregation: DLA)\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u306a\u904b\u52d5\u304c\u3044\u304b\u306b\u7f8e\u3057\u3044\u81ea\u5df1\u76f8\u4f3c\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u751f\u307f\u51fa\u3059\u304b\u3092\u793a\u3059\u4f8b\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u6210\u9577\u306e\u30b9\u30c6\u30c3\u30d7\u306f\uff0c\n\n1\u3064\u306e\u7a2e\u306e\u7c92\u5b50\u30671\u3064\u306e\u683c\u5b50\u70b9\u3092\u5360\u6709\n\u7a2e\u3092\u4e2d\u5fc3\u3068\u3059\u308b\u5186\u306e\u5468\u56f2\u304b\u30891\u3064\u306e\u7c92\u5b50\u3092\u653e\u51fa\n\u305d\u306e\u7c92\u5b50\u3092\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3055\u305b\uff0c\n1\u3064\u306e\u5468\u8fba\u306e\u70b9\u306b\u5230\u9054\u3059\u308b\u3068\u305d\u3053\u306b\u4ed8\u7740\u21922\u3078\n\n\u5927\u304d\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u5f62\u6210\u3055\u308c\u308b\u307e\u3067\uff0c\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059(\u5178\u578b\u7684\u306b\u306f\u6570\u5343\u304b\u3089\u6570100\u4e07\u56de\u306e\u7a0b\u5ea6)\uff0e\u307e\u305f\uff0c\u8a08\u7b97\u91cf\u3092\u5c11\u306a\u304f\u3059\u308b\u305f\u3081\uff0c3\u306e\u6bb5\u968e\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u304f\u306b\u884c\u304d\u904e\u304e\u305f\u7c92\u5b50\u306f\u53d6\u308a\u9664\u304d\uff0c2\u304b\u3089\u3084\u308a\u76f4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\n\u3053\u306e\u64cd\u4f5c\u3092\u5b9f\u969b\u306b\u5b9f\u73fe\u3059\u308b\u306b\u306f\uff0c\u683c\u5b50\u3092\u8868\u3059\u884c\u5217\u3068\uff0c\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5468\u8fba\u306e\u70b9\u3092\u8a18\u9332\u3059\u308b\u914d\u5217\u304c\u6709\u308c\u3070\u3088\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u90e8\u5206\u306f\uff0c\u4f55\u5ea6\u3082\u6d41\u7528\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u304c\uff0c\u4e00\u69d8\u4e71\u6570\u3092\u751f\u6210\u3057\uff0c\u305d\u306e\u5024\u306e\u5927\u304d\u3055\u3067\u4e0a\u4e0b\u5de6\u53f3\u306e\u65b9\u5411\u3092\u6c7a\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u307e\u305f\uff0c\u5b9f\u969b\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3068\uff0c\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u3044\u4f4d\u7f6e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u304c\uff0cCPU\u6642\u9593\u306e\u307b\u3068\u3093\u3069\u3068\u306a\u308a\uff0c\u52b9\u7387\u304c\u60aa\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\uff0c\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u3044\u3068\u3053\u308d\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u6b69\u5e45\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u5b9f\u969b\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\uff08N=200, 500, 1000\u306e\u5834\u5408\u306b\u3064\u3044\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u751f\u6210\uff09\u3057\u305f\u69d8\u5b50\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u306e\u3067\uff0c\u4ee5\u4e0b\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e\nhttp://youtu.be/qLii4DlBnv0\n\u4f55\u3082\u7de8\u96c6\u3057\u3066\u306a\u3044\u306e\u3067\u30b0\u30c0\u30b0\u30c0\u3067\u3059\u304cw\na,b,c\u3068\u3044\u3046\u306e\u306f\u6559\u79d1\u66f8\u306e\u554f\u984c\u306ea,b,c\u3092\u610f\u5473\u3057\u3066\u304a\u308a\uff0ca\u306f\u30a8\u30f3\u30c8\u30ea\u30fc\u30dc\u30c3\u30af\u30b9\u3067\u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u7c92\u5b50\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3082\u306e\u3067\u3059\uff0eb,c\u306f\uff0c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u4ed8\u7740\u78ba\u7387\u3092\u6c42\u3081\u308b\u3082\u306e\u3068\uff0c\u30d5\u30e9\u30af\u30bf\u30eb\u6b21\u5143\u3092\u5b9f\u969b\u306b\u6c42\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u307e\u305f\uff0cN=500\u306e\u3068\u304d\u5f97\u3089\u308c\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u30ea\u30f3\u30af\u5148\uff08\u3089\u304f\u3089\u304f\u5316\u5b66\u5b9f\u9a13 - \u7f8e\u3057\u3044\u9280\u6a39\u3092\u4f5c\u308b\uff09\u306e\u9280\u6a39\u306e\u753b\u50cf\u3068\u6bd4\u3079\u3066\u3082\uff0c\u3088\u304f\u4f3c\u3066\u308b\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u5b9f\u969b\uff0c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306f\u62e1\u6563\u3068\u7b49\u4fa1\u306a\u306e\u3067\uff0c\u3053\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u81ea\u4f53\u306f\uff0c\u307e\u308b\u3063\u304d\u308a\u91d1\u5c5e\u6a39\u306e\u751f\u6210\u3092\u57fa\u306b\u3057\u3066\u3044\u308b\u3068\u8a00\u3063\u3066\u3082\u3088\u304f\uff0c\u5f53\u7136\u51fa\u6765\u4e0a\u304c\u3063\u305f\u56f3\u5f62\u306e\u5f62\u306f\u3088\u304f\u4f3c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\n\u4ee5\u4e0b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5168\u3066\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\uff0e\nCanvas\u306e\u4fdd\u5b58\u306e\u305f\u3081\u306e\u95a2\u6570pr\u306f\uff0c\u3053\u308c\u304b\u3089\u3082\u3088\u304f\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\uff0eSetParameter\u3082\u9577\u304f\u4f7f\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4e00\u3064\u3067\u3059\uff0e\u3082\u3046\u5c11\u3057\u307e\u3068\u3081\u305f\u3044\u6c17\u6301\u3061\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u73fe\u72b6\u3053\u308c\u3067\u56f0\u3063\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u3057\u3070\u3089\u304f\u306f\u3053\u306e\u307e\u307e\u4f7f\u3044\u7d9a\u3051\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\nDLA.py\n#! /usr/bin/env python \n# -*- coding:utf-8 -*-\n#\n# written by ssh0, August 2014. \n\nfrom Tkinter import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nimport time\n\n\nclass DLA(object):\n\n    def __init__(self, N, view=True, color=True):\n        self.r = 3\n        self.N = N\n        self.view = view\n        self.color = color\n        self.L = int(self.N**(0.78))\n\n        if self.view:\n            self.default_size = 640 # default size of canvas\n            self.rsize = int(self.default_size/(2*self.L))\n            if self.rsize == 0:\n                self.rsize = 1\n            fig_size = 2*self.rsize*self.L\n            self.margin = 10\n            self.sub = Toplevel()\n            self.canvas = Canvas(self.sub, width=fig_size+2*self.margin,\n                                 height=fig_size+2*self.margin)\n            self.c = self.canvas.create_rectangle\n            self.update = self.canvas.update\n\n            self.sub.title('DLA cluster')\n            self.c(self.margin, self.margin,\n                   fig_size+self.margin, fig_size+self.margin,\n                   outline='black', fill='white')\n            self.canvas.pack()\n            self.start_time = time.time()\n\n    def grow_cluster(self):\n        lattice = np.zeros([self.L*2+1, self.L*2+1], dtype=int)\n        # \u7a2e\u306e\u683c\u5b50\u70b9\n        self.center = self.L\n        lattice[self.center, self.center] = 1\n        if self.view:\n            c = self.c\n            rect = c((2*self.center-self.L)*self.rsize+self.margin,\n                     (2*self.center-self.L)*self.rsize+self.margin,\n                     (2*(self.center+1)-self.L)*self.rsize+self.margin-1,\n                     (2*(self.center+1)-self.L)*self.rsize+self.margin-1,\n                     outline='black', fill='black')\n\n        rn = np.random.rand\n\n        def reset():\n            \"\"\"\u521d\u671f\u70b9\u306e\u9078\u629e\"\"\"\n            theta = 2*np.pi*rn()\n            x = int((self.r+2)*np.cos(theta))+self.center\n            y = int((self.r+2)*np.sin(theta))+self.center\n            return x, y\n\n        x, y = reset()\n        l = 1\n\n        n = 0\n        while n < self.N:\n\n            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5468\u8fba\u304b\u3089\u9060\u3044\u3068\u3053\u308d\u3067\u306f\u6b69\u5e45\u3092\u5927\u304d\u304f\u3059\u308b\n            r = np.sqrt((x-self.center)**2+(y-self.center)**2)\n            if r > self.r+2:\n                l = int(r-self.r-2)\n                if l == 0: l = 1\n            else:\n                l = 1\n\n            # \u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\n            p = rn()*4\n            if   p < 1:\n                x += l\n            elif p < 2:\n                x -= l\n            elif p < 3:\n                y += l\n            else:\n                y -= l\n\n            r = np.sqrt((x-self.center)**2+(y-self.center)**2)\n\n            # \u4e2d\u5fc3\u70b9\u304b\u3089\u96e2\u308c\u305f\u70b9\u3067\u904e\u7a0b\u3092\u3084\u308a\u76f4\u3059\n            if r >= 2*self.r:\n                x, y = reset()\n                continue\n\n            judge = np.sum(lattice[x-1,y]+lattice[x+1,y]\n                           +lattice[x,y-1]+lattice[x,y+1])\n\n            # \u7c92\u5b50\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u53d6\u308a\u8fbc\u3080\n            if judge > 0:\n                lattice[x, y] = 1\n\n                # \u63cf\u753b\n                if self.view:\n                    if self.color:\n                        colors = ['#ff0000', '#ff8000', '#ffff00', '#80ff00',\n                                  '#00ff00', '#00ff80', '#00ffff', '#0080ff', \n                                  '#0000ff', '#8000ff', '#ff00ff', '#ff0080']\n                        color = colors[int(n/100)%len(colors)]\n                    else:\n                        color = \"black\"\n                    rect = c((2*x-self.L)*self.rsize+self.margin,\n                                    (2*y-self.L)*self.rsize+self.margin,\n                             (2*(x+1)-self.L)*self.rsize+self.margin-1,\n                             (2*(y+1)-self.L)*self.rsize+self.margin-1,\n                             outline=color, fill=color)\n                    self.update()\n\n                # rmax\u306e\u66f4\u65b0\n                if int(r)+1 > self.r:\n                    self.r = int(r) + 1\n                x, y = reset()\n                n += 1\n        else:\n            if self.view:\n                self.end_time = time.time()\n                t = self.end_time-self.start_time\n                print \"done; N = %d, time = \" % self.N + str(t) + ' (s)' \n        return lattice\n\n\nclass SetParameter():\n\n    def show_setting_window(self, parameters, commands):\n        \"\"\" Show a parameter setting window.\n\n        parameters: A list of dictionaries {'parameter name': default_value}\n        commands: A list of dictionary {'name of button': command}\n        \"\"\"\n        self.root = Tk()\n        self.root.title('Parameter')\n\n        frame1 = Frame(self.root, padx=5, pady=5)\n        frame1.pack(side='top')\n\n        self.entry = []\n        for i, parameter in enumerate(parameters):\n            label = Label(frame1, text=parameter.items()[0][0] + ' = ')\n            label.grid(row=i, column=0, sticky=E)\n            self.entry.append(Entry(frame1, width=10))\n            self.entry[i].grid(row=i, column=1)\n            self.entry[i].delete(0, END)\n            self.entry[i].insert(0, parameter.items()[0][1])\n        self.entry[0].focus_set()\n\n        frame2 = Frame(self.root, padx=5, pady=5)\n        frame2.pack(side='bottom')\n\n        self.button = []\n        for i, command in enumerate(commands):\n            self.button.append(Button(frame2, text=command.items()[0][0],\n                                      command=command.items()[0][1]))\n            self.button[i].grid(row=0, column=i)\n\n        self.root.mainloop()\n\n\nclass Main(object):\n\n    def __init__(self):\n        import sys\n        self.sp = SetParameter()\n        self.dla = None\n        self.b = None\n        self.sp.show_setting_window([{'N': 200}],\n                                    [{'a': self.exp_a},\n                                     {'b': self.exp_b},\n                                     {'c': self.exp_c},\n                                     {'c:fit': self.fitting},\n                                     {'save': self.pr},\n                                     {'quit': sys.exit}])\n\n    def exp_a(self):\n        self.N = int(self.sp.entry[0].get())\n        self.dla = DLA(self.N)\n        lattice = self.dla.grow_cluster()\n\n    def exp_b(self):\n        trial = 3000\n        self.dla2 = DLA(2, view=False)\n        self.dla2.L = 6\n        distribution = {'p': 0, 'q': 0, 'r': 0, 's': 0}\n\n        # \u5206\u985e\n        for i in range(trial):\n            lattice = self.dla2.grow_cluster()\n            l = lattice[self.dla2.L-1:self.dla2.L+2,\n                        self.dla2.L-1:self.dla2.L+2]\n            if np.sum(l) == 2:\n                distribution['r'] += 1\n            elif np.sum(l[0,1]+l[1,0]+l[1,2]+l[2,1]) == 1:\n                distribution['p'] += 1\n            elif max(max(np.sum(l, 0)), max(np.sum(l, 1))) == 3:\n                distribution['s'] += 1\n            else:\n                distribution['q'] += 1\n\n        for k, v in distribution.items():\n            distribution[k] = float(v)/trial\n        distribution['p'] = distribution['p']/2.\n        distribution['q'] = distribution['q']/2.\n        print 'trial = %d' % trial\n        print distribution\n\n    def exp_c(self):\n        self.N = int(self.sp.entry[0].get())\n        self.dla3 = DLA(self.N, view=False)\n        self.lattice = self.dla3.grow_cluster()\n        self.view_expansion()\n        self.plot()\n\n    def view_expansion(self):\n        lattice = self.lattice\n        center = self.dla3.center\n        M_b = []\n        s = np.sum\n        ave = np.average\n        append = M_b.append\n        for k in range(1, center):\n            nonzero = np.nonzero(lattice[k:-k,k:-k])\n            tmp = np.array([0])\n            for i, j in zip(nonzero[0]+k, nonzero[1]+k):\n                tmp = np.append(tmp, s(lattice[i-k:i+k+1, j-k:j+k+1]))\n            append(ave(tmp))\n        self.b = np.array([2.*k+1 for k in range(1, center)])\n        self.M_b = np.array(M_b)\n\n    def plot(self):\n        fig = plt.figure(\"Fractal Dimension\")\n        self.ax = fig.add_subplot(111)\n        self.ax.plot(self.b, self.M_b, '-o')\n        self.ax.set_xlabel(r'$b$', fontsize=16)\n        self.ax.set_ylabel(r'$M(b)$', fontsize=16)\n        self.ax.set_xscale('log')\n        self.ax.set_yscale('log')\n        self.ax.set_ymargin(0.05)\n        fig.tight_layout()\n        plt.show()\n\n    def fitting(self):\n        if self.b == None:\n            return\n        import scipy.optimize as optimize\n\n        def fit_func(parameter0, b, M_b):\n            log = np.log\n            c1 = parameter0[0]\n            c2 = parameter0[1]\n            residual = log(M_b) - c1 - c2*log(b)\n            return residual\n\n        def fitted(b, c1, D):\n            return np.exp(c1)*(b**D)\n\n        cut_from = int(raw_input(\"from ? (index) >>> \"))\n        cut_to = int(raw_input(\"to ? (index) >>> \"))\n        cut_b = np.array(list(self.b)[cut_from:cut_to])\n        cut_M_b = np.array(list(self.M_b)[cut_from:cut_to])\n        parameter0 = [0.1, 2.0]\n        result = optimize.leastsq(fit_func, parameter0, args=(cut_b, cut_M_b))\n        c1 = result[0][0]\n        D = result[0][1]\n\n        self.ax.plot(cut_b, fitted(cut_b, c1, D),\n                    lw=2, label=\"fit func: D = %f\" % D)\n        plt.legend(loc='best')\n        plt.show()\n\n    def pr(self):\n        import tkFileDialog\n        import os\n\n        if self.dla is None:\n            print \"first you should run 'a'.\"\n            return\n        fTyp=[('eps flle','*.eps'), ('all files','*')]\n        filename = tkFileDialog.asksaveasfilename(filetypes=fTyp,\n                                                  initialdir=os.getcwd(),\n                                                  initialfile=\"figure_1.eps\")\n        if filename == None:\n            return\n        self.dla.canvas.postscript(file=filename)\n\nif __name__ == '__main__':\n\n    Main()\n\n\nPython\u3067\u6570\u5024\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e2\u56de\u76ee\u3067\u3059\uff0e\n\n\u4eca\u56de\u306f\u62e1\u6563\u5f8b\u901f\u51dd\u96c6\uff08DLA\uff09\u306b\u3064\u3044\u3066\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u306e\u5185\u5bb9\u306f\u8a08\u7b97\u7269\u7406\u5b66\u306e\u3088\u3044\u6559\u79d1\u66f8\u3067\u3042\u308b\uff0c \n\n\n<table style=\"width:75%;border:0;\" border=\"0\"><tr><td style=\"border:none;\" valign=\"top\" align=\"center\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4894713187/fc2blog06-22/ref=nosim/\" target=\"_blank\"><img src=\"http://ecx.images-amazon.com/images/I/31809RWN9JL._SL75_.jpg\" alt=\"\u8a08\u7b97\u7269\u7406\u5b66\u5165\u9580\" border=\"0\"></a></td><td style=\"padding:0 0.4em;border:0;\" valign=\"top\"><a href=\"http://blog.fc2.com/goods/4894713187/fc2blog06-22\" target=\"_blank\">\u8a08\u7b97\u7269\u7406\u5b66\u5165\u9580</a><br />(2000/12)<br />\u30cf\u30fc\u30d9\u30a4 \u30b4\u30fc\u30eb\u30c9\u3001\u30b8\u30e3\u30f3 \u30c8\u30dc\u30c1\u30cb\u30af \u4ed6<br /><br /><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4894713187/fc2blog06-22/ref=nosim/\" target=\"_blank\">\u5546\u54c1\u8a73\u7d30\u3092\u898b\u308b</a></td></tr></table>\n\n\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u96ea\u306e\u7d50\u6676\u3084\u5730\u8cea\u5b66\u7684\u306a\u65ad\u5c64\u306b\u304a\u3051\u308b\u7a32\u59bb\u5f62\u306e\u3072\u3073\u5272\u308c\u306e\u5f62\u6210\uff0c\u30d0\u30af\u30c6\u30ea\u30a2\u306e\u30b3\u30ed\u30cb\u30fc\u306e\u6210\u9577\u306a\u3069\uff0c\u81ea\u7136\u754c\u306b\u306f\u57fa\u672c\u3068\u306a\u308b\u5358\u4f4d\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4ed8\u3051\u52a0\u3048\u3066\u3044\u304f\u3053\u3068\u3067\u6210\u9577\u3059\u308b\u3082\u306e\u3092\u591a\u304f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u3088\u304f\u77e5\u3089\u308c\u305f\u30e2\u30c7\u30eb\u306e1\u3064\u306b\u62e1\u6563\u5f8b\u901f\u51dd\u96c6(Diffusion-Limited Aggregation: DLA)\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u306f\uff0c\u30e9\u30f3\u30c0\u30e0\u306a\u904b\u52d5\u304c\u3044\u304b\u306b\u7f8e\u3057\u3044\u81ea\u5df1\u76f8\u4f3c\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u751f\u307f\u51fa\u3059\u304b\u3092\u793a\u3059\u4f8b\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u6210\u9577\u306e\u30b9\u30c6\u30c3\u30d7\u306f\uff0c\n\n1. 1\u3064\u306e\u7a2e\u306e\u7c92\u5b50\u30671\u3064\u306e\u683c\u5b50\u70b9\u3092\u5360\u6709\n2. \u7a2e\u3092\u4e2d\u5fc3\u3068\u3059\u308b\u5186\u306e\u5468\u56f2\u304b\u30891\u3064\u306e\u7c92\u5b50\u3092\u653e\u51fa\n3. \u305d\u306e\u7c92\u5b50\u3092\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u3055\u305b\uff0c\n4. 1\u3064\u306e\u5468\u8fba\u306e\u70b9\u306b\u5230\u9054\u3059\u308b\u3068\u305d\u3053\u306b\u4ed8\u7740\u21922\u3078\n\n\u5927\u304d\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u5f62\u6210\u3055\u308c\u308b\u307e\u3067\uff0c\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059(\u5178\u578b\u7684\u306b\u306f\u6570\u5343\u304b\u3089\u6570100\u4e07\u56de\u306e\u7a0b\u5ea6)\uff0e\u307e\u305f\uff0c\u8a08\u7b97\u91cf\u3092\u5c11\u306a\u304f\u3059\u308b\u305f\u3081\uff0c3\u306e\u6bb5\u968e\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u304f\u306b\u884c\u304d\u904e\u304e\u305f\u7c92\u5b50\u306f\u53d6\u308a\u9664\u304d\uff0c2\u304b\u3089\u3084\u308a\u76f4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\n\n\u3053\u306e\u64cd\u4f5c\u3092\u5b9f\u969b\u306b\u5b9f\u73fe\u3059\u308b\u306b\u306f\uff0c\u683c\u5b50\u3092\u8868\u3059\u884c\u5217\u3068\uff0c\u5360\u6709\u3055\u308c\u305f\u683c\u5b50\u70b9\u306e\u5468\u8fba\u306e\u70b9\u3092\u8a18\u9332\u3059\u308b\u914d\u5217\u304c\u6709\u308c\u3070\u3088\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u90e8\u5206\u306f\uff0c\u4f55\u5ea6\u3082\u6d41\u7528\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u304c\uff0c\u4e00\u69d8\u4e71\u6570\u3092\u751f\u6210\u3057\uff0c\u305d\u306e\u5024\u306e\u5927\u304d\u3055\u3067\u4e0a\u4e0b\u5de6\u53f3\u306e\u65b9\u5411\u3092\u6c7a\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u307e\u305f\uff0c\u5b9f\u969b\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3068\uff0c\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u3044\u4f4d\u7f6e\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u304c\uff0cCPU\u6642\u9593\u306e\u307b\u3068\u3093\u3069\u3068\u306a\u308a\uff0c\u52b9\u7387\u304c\u60aa\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\uff0c\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u3044\u3068\u3053\u308d\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306e\u6b69\u5e45\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u5b9f\u969b\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\uff08N=200, 500, 1000\u306e\u5834\u5408\u306b\u3064\u3044\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u751f\u6210\uff09\u3057\u305f\u69d8\u5b50\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u306e\u3067\uff0c\u4ee5\u4e0b\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e\n\nhttp://youtu.be/qLii4DlBnv0\n\n\u4f55\u3082\u7de8\u96c6\u3057\u3066\u306a\u3044\u306e\u3067\u30b0\u30c0\u30b0\u30c0\u3067\u3059\u304cw\n\na,b,c\u3068\u3044\u3046\u306e\u306f\u6559\u79d1\u66f8\u306e\u554f\u984c\u306ea,b,c\u3092\u610f\u5473\u3057\u3066\u304a\u308a\uff0ca\u306f\u30a8\u30f3\u30c8\u30ea\u30fc\u30dc\u30c3\u30af\u30b9\u3067\u6307\u5b9a\u3057\u305f\u500b\u6570\u306e\u7c92\u5b50\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3082\u306e\u3067\u3059\uff0eb,c\u306f\uff0c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u4ed8\u7740\u78ba\u7387\u3092\u6c42\u3081\u308b\u3082\u306e\u3068\uff0c\u30d5\u30e9\u30af\u30bf\u30eb\u6b21\u5143\u3092\u5b9f\u969b\u306b\u6c42\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u307e\u305f\uff0cN=500\u306e\u3068\u304d\u5f97\u3089\u308c\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n<a href=\"http://yuzugosho.blog.fc2.com/img/figure_1.png/\" target=\"_blank\"><img src=\"http://blog-imgs-64.fc2.com/y/u/z/yuzugosho/figure_1.png\" alt=\"DLA(N=500)\" border=\"0\" width=\"443\" height=\"443\" /></a>\n\n\u30ea\u30f3\u30af\u5148\uff08<a href=\"http://rakuchem.com/ginju.html\" target=\"_blank\" title=\"\u3089\u304f\u3089\u304f\u5316\u5b66\u5b9f\u9a13 - \u7f8e\u3057\u3044\u9280\u6a39\u3092\u4f5c\u308b\">\u3089\u304f\u3089\u304f\u5316\u5b66\u5b9f\u9a13 - \u7f8e\u3057\u3044\u9280\u6a39\u3092\u4f5c\u308b</a>\uff09\u306e\u9280\u6a39\u306e\u753b\u50cf\u3068\u6bd4\u3079\u3066\u3082\uff0c\u3088\u304f\u4f3c\u3066\u308b\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\u5b9f\u969b\uff0c\u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\u306f\u62e1\u6563\u3068\u7b49\u4fa1\u306a\u306e\u3067\uff0c\u3053\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u81ea\u4f53\u306f\uff0c\u307e\u308b\u3063\u304d\u308a\u91d1\u5c5e\u6a39\u306e\u751f\u6210\u3092\u57fa\u306b\u3057\u3066\u3044\u308b\u3068\u8a00\u3063\u3066\u3082\u3088\u304f\uff0c\u5f53\u7136\u51fa\u6765\u4e0a\u304c\u3063\u305f\u56f3\u5f62\u306e\u5f62\u306f\u3088\u304f\u4f3c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\n\n\n\u4ee5\u4e0b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5168\u3066\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\uff0e\n\nCanvas\u306e\u4fdd\u5b58\u306e\u305f\u3081\u306e\u95a2\u6570pr\u306f\uff0c\u3053\u308c\u304b\u3089\u3082\u3088\u304f\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\uff0eSetParameter\u3082\u9577\u304f\u4f7f\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4e00\u3064\u3067\u3059\uff0e\u3082\u3046\u5c11\u3057\u307e\u3068\u3081\u305f\u3044\u6c17\u6301\u3061\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u73fe\u72b6\u3053\u308c\u3067\u56f0\u3063\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u3057\u3070\u3089\u304f\u306f\u3053\u306e\u307e\u307e\u4f7f\u3044\u7d9a\u3051\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n```py:DLA.py\n#! /usr/bin/env python \n# -*- coding:utf-8 -*-\n#\n# written by ssh0, August 2014. \n\nfrom Tkinter import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random\nimport time\n\n\nclass DLA(object):\n\n    def __init__(self, N, view=True, color=True):\n        self.r = 3\n        self.N = N\n        self.view = view\n        self.color = color\n        self.L = int(self.N**(0.78))\n        \n        if self.view:\n            self.default_size = 640 # default size of canvas\n            self.rsize = int(self.default_size/(2*self.L))\n            if self.rsize == 0:\n                self.rsize = 1\n            fig_size = 2*self.rsize*self.L\n            self.margin = 10\n            self.sub = Toplevel()\n            self.canvas = Canvas(self.sub, width=fig_size+2*self.margin,\n                                 height=fig_size+2*self.margin)\n            self.c = self.canvas.create_rectangle\n            self.update = self.canvas.update\n\n            self.sub.title('DLA cluster')\n            self.c(self.margin, self.margin,\n                   fig_size+self.margin, fig_size+self.margin,\n                   outline='black', fill='white')\n            self.canvas.pack()\n            self.start_time = time.time()\n\n    def grow_cluster(self):\n        lattice = np.zeros([self.L*2+1, self.L*2+1], dtype=int)\n        # \u7a2e\u306e\u683c\u5b50\u70b9\n        self.center = self.L\n        lattice[self.center, self.center] = 1\n        if self.view:\n            c = self.c\n            rect = c((2*self.center-self.L)*self.rsize+self.margin,\n                     (2*self.center-self.L)*self.rsize+self.margin,\n                     (2*(self.center+1)-self.L)*self.rsize+self.margin-1,\n                     (2*(self.center+1)-self.L)*self.rsize+self.margin-1,\n                     outline='black', fill='black')\n        \n        rn = np.random.rand\n        \n        def reset():\n            \"\"\"\u521d\u671f\u70b9\u306e\u9078\u629e\"\"\"\n            theta = 2*np.pi*rn()\n            x = int((self.r+2)*np.cos(theta))+self.center\n            y = int((self.r+2)*np.sin(theta))+self.center\n            return x, y\n        \n        x, y = reset()\n        l = 1\n        \n        n = 0\n        while n < self.N:\n            \n            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5468\u8fba\u304b\u3089\u9060\u3044\u3068\u3053\u308d\u3067\u306f\u6b69\u5e45\u3092\u5927\u304d\u304f\u3059\u308b\n            r = np.sqrt((x-self.center)**2+(y-self.center)**2)\n            if r > self.r+2:\n                l = int(r-self.r-2)\n                if l == 0: l = 1\n            else:\n                l = 1\n            \n            # \u30e9\u30f3\u30c0\u30e0\u30a6\u30a9\u30fc\u30af\n            p = rn()*4\n            if   p < 1:\n                x += l\n            elif p < 2:\n                x -= l\n            elif p < 3:\n                y += l\n            else:\n                y -= l\n            \n            r = np.sqrt((x-self.center)**2+(y-self.center)**2)\n            \n            # \u4e2d\u5fc3\u70b9\u304b\u3089\u96e2\u308c\u305f\u70b9\u3067\u904e\u7a0b\u3092\u3084\u308a\u76f4\u3059\n            if r >= 2*self.r:\n                x, y = reset()\n                continue\n            \n            judge = np.sum(lattice[x-1,y]+lattice[x+1,y]\n                           +lattice[x,y-1]+lattice[x,y+1])\n            \n            # \u7c92\u5b50\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u53d6\u308a\u8fbc\u3080\n            if judge > 0:\n                lattice[x, y] = 1\n                \n                # \u63cf\u753b\n                if self.view:\n                    if self.color:\n                        colors = ['#ff0000', '#ff8000', '#ffff00', '#80ff00',\n                                  '#00ff00', '#00ff80', '#00ffff', '#0080ff', \n                                  '#0000ff', '#8000ff', '#ff00ff', '#ff0080']\n                        color = colors[int(n/100)%len(colors)]\n                    else:\n                        color = \"black\"\n                    rect = c((2*x-self.L)*self.rsize+self.margin,\n                                    (2*y-self.L)*self.rsize+self.margin,\n                             (2*(x+1)-self.L)*self.rsize+self.margin-1,\n                             (2*(y+1)-self.L)*self.rsize+self.margin-1,\n                             outline=color, fill=color)\n                    self.update()\n                \n                # rmax\u306e\u66f4\u65b0\n                if int(r)+1 > self.r:\n                    self.r = int(r) + 1\n                x, y = reset()\n                n += 1\n        else:\n            if self.view:\n                self.end_time = time.time()\n                t = self.end_time-self.start_time\n                print \"done; N = %d, time = \" % self.N + str(t) + ' (s)' \n        return lattice\n        \n\nclass SetParameter():\n\n    def show_setting_window(self, parameters, commands):\n        \"\"\" Show a parameter setting window.\n                \n        parameters: A list of dictionaries {'parameter name': default_value}\n        commands: A list of dictionary {'name of button': command}\n        \"\"\"\n        self.root = Tk()\n        self.root.title('Parameter')\n        \n        frame1 = Frame(self.root, padx=5, pady=5)\n        frame1.pack(side='top')\n        \n        self.entry = []\n        for i, parameter in enumerate(parameters):\n            label = Label(frame1, text=parameter.items()[0][0] + ' = ')\n            label.grid(row=i, column=0, sticky=E)\n            self.entry.append(Entry(frame1, width=10))\n            self.entry[i].grid(row=i, column=1)\n            self.entry[i].delete(0, END)\n            self.entry[i].insert(0, parameter.items()[0][1])\n        self.entry[0].focus_set()\n       \n        frame2 = Frame(self.root, padx=5, pady=5)\n        frame2.pack(side='bottom')\n        \n        self.button = []\n        for i, command in enumerate(commands):\n            self.button.append(Button(frame2, text=command.items()[0][0],\n                                      command=command.items()[0][1]))\n            self.button[i].grid(row=0, column=i)\n        \n        self.root.mainloop()\n\n\nclass Main(object):\n\n    def __init__(self):\n        import sys\n        self.sp = SetParameter()\n        self.dla = None\n        self.b = None\n        self.sp.show_setting_window([{'N': 200}],\n                                    [{'a': self.exp_a},\n                                     {'b': self.exp_b},\n                                     {'c': self.exp_c},\n                                     {'c:fit': self.fitting},\n                                     {'save': self.pr},\n                                     {'quit': sys.exit}])\n        \n    def exp_a(self):\n        self.N = int(self.sp.entry[0].get())\n        self.dla = DLA(self.N)\n        lattice = self.dla.grow_cluster()\n    \n    def exp_b(self):\n        trial = 3000\n        self.dla2 = DLA(2, view=False)\n        self.dla2.L = 6\n        distribution = {'p': 0, 'q': 0, 'r': 0, 's': 0}\n        \n        # \u5206\u985e\n        for i in range(trial):\n            lattice = self.dla2.grow_cluster()\n            l = lattice[self.dla2.L-1:self.dla2.L+2,\n                        self.dla2.L-1:self.dla2.L+2]\n            if np.sum(l) == 2:\n                distribution['r'] += 1\n            elif np.sum(l[0,1]+l[1,0]+l[1,2]+l[2,1]) == 1:\n                distribution['p'] += 1\n            elif max(max(np.sum(l, 0)), max(np.sum(l, 1))) == 3:\n                distribution['s'] += 1\n            else:\n                distribution['q'] += 1\n        \n        for k, v in distribution.items():\n            distribution[k] = float(v)/trial\n        distribution['p'] = distribution['p']/2.\n        distribution['q'] = distribution['q']/2.\n        print 'trial = %d' % trial\n        print distribution\n    \n    def exp_c(self):\n        self.N = int(self.sp.entry[0].get())\n        self.dla3 = DLA(self.N, view=False)\n        self.lattice = self.dla3.grow_cluster()\n        self.view_expansion()\n        self.plot()\n    \n    def view_expansion(self):\n        lattice = self.lattice\n        center = self.dla3.center\n        M_b = []\n        s = np.sum\n        ave = np.average\n        append = M_b.append\n        for k in range(1, center):\n            nonzero = np.nonzero(lattice[k:-k,k:-k])\n            tmp = np.array([0])\n            for i, j in zip(nonzero[0]+k, nonzero[1]+k):\n                tmp = np.append(tmp, s(lattice[i-k:i+k+1, j-k:j+k+1]))\n            append(ave(tmp))\n        self.b = np.array([2.*k+1 for k in range(1, center)])\n        self.M_b = np.array(M_b)\n    \n    def plot(self):\n        fig = plt.figure(\"Fractal Dimension\")\n        self.ax = fig.add_subplot(111)\n        self.ax.plot(self.b, self.M_b, '-o')\n        self.ax.set_xlabel(r'$b$', fontsize=16)\n        self.ax.set_ylabel(r'$M(b)$', fontsize=16)\n        self.ax.set_xscale('log')\n        self.ax.set_yscale('log')\n        self.ax.set_ymargin(0.05)\n        fig.tight_layout()\n        plt.show()\n    \n    def fitting(self):\n        if self.b == None:\n            return\n        import scipy.optimize as optimize\n        \n        def fit_func(parameter0, b, M_b):\n            log = np.log\n            c1 = parameter0[0]\n            c2 = parameter0[1]\n            residual = log(M_b) - c1 - c2*log(b)\n            return residual\n\n        def fitted(b, c1, D):\n            return np.exp(c1)*(b**D)\n\n        cut_from = int(raw_input(\"from ? (index) >>> \"))\n        cut_to = int(raw_input(\"to ? (index) >>> \"))\n        cut_b = np.array(list(self.b)[cut_from:cut_to])\n        cut_M_b = np.array(list(self.M_b)[cut_from:cut_to])\n        parameter0 = [0.1, 2.0]\n        result = optimize.leastsq(fit_func, parameter0, args=(cut_b, cut_M_b))\n        c1 = result[0][0]\n        D = result[0][1]\n        \n        self.ax.plot(cut_b, fitted(cut_b, c1, D),\n                    lw=2, label=\"fit func: D = %f\" % D)\n        plt.legend(loc='best')\n        plt.show()\n    \n    def pr(self):\n        import tkFileDialog\n        import os\n        \n        if self.dla is None:\n            print \"first you should run 'a'.\"\n            return\n        fTyp=[('eps flle','*.eps'), ('all files','*')]\n        filename = tkFileDialog.asksaveasfilename(filetypes=fTyp,\n                                                  initialdir=os.getcwd(),\n                                                  initialfile=\"figure_1.eps\")\n        if filename == None:\n            return\n        self.dla.canvas.postscript(file=filename)\n    \nif __name__ == '__main__':\n\n    Main()\n```\n\n\n", "tags": ["Python", "numpy", "Tk"]}