{"tags": ["scipy", "Python", "numpy"], "context": "\u304a\u3088\u305dPC\u3067\u306a\u3093\u304b\u3092\u3059\u308b\u6642\u306b\u3001Excel\u306e\u4f7f\u7528\u306f\u907f\u3051\u3066\u901a\u308c\u306a\u3044\u3002\u30a4\u30de\u30c9\u30ad\u3001\u300cMicrosoft\u5acc\u3044\u306a\u3093\u3067\u300d\u3068\u304b\u8a00\u3063\u3066\u3001Lotus 1-2-3\u3092\u4f7f\u3046\u30d2\u30c8\u3082\u5c45\u3089\u3093\u3067\u3057\u3087\u3046\u3002\u306a\u3093\u304b\u306e\u6e2c\u5b9a\u30c7\u30fc\u30bf\u7b49\u306fExcel\u306e\u30b7\u30fc\u30c8\u4e0a\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3002\u3068\u306a\u3063\u305f\u3089\u3001Excel\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u304f\u3089\u3044\u306f\u3067\u304d\u305f\u65b9\u304c\u3044\u3044\u3002\n\nCSV\u3067\u306f\u30a4\u30ab\u30f3\u306e\u304b\nExcel\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u3001CSV\u3068\u304b\u30bf\u30d6\u533a\u5207\u308a\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3068\u304b\u3067\u4fdd\u5b58\u3059\u308b\u305d\u306e\u4e00\u624b\u9593\u3092\u304b\u3051\u308b\u4f59\u88d5\u304c\u3042\u308b\u6642\u306f\u3001\u3082\u3061\u308d\u3093\u305d\u308c\u3067\u3044\u3044\u3002\n\u3067\u3082\u3001\u305f\u307e\u306b\u3042\u308b\u3093\u3060\u3088\u300230\u65e5\u9593\u306e\u5b9f\u9a13\u7d50\u679c\u304c30\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u304b\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30a1\u30a4\u30eb\u30921\u500b\u305a\u3064\u958b\u3044\u3066\u306fCSV\u306b\u4fdd\u5b58\u3057\u76f4\u3059\u3068\u3044\u3046\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\u304b\u3001\u305d\u306e\u64cd\u4f5c\u3092\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308bExcel VBA\u3092\u66f8\u304f\u304b\u3001\u3046\u30fc\u3093\u30bd\u30ec\u3082\u3044\u3044\u306a\u3001Excel\u306e\u3053\u3068\u306fExcel\u3067\u3002\n\u305d\u3046\u3082\u8a00\u3063\u3066\u3089\u308c\u306a\u3044\u306e\u3067\u3001conda\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bExcel\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u304c\u3067\u304d\u305d\u3046\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3059\u3002\u3053\u3046\u3044\u3046\u6642\u306f\u30b0\u30b0\u308b\u3057\u304b\u306a\u3044\u3002xlrd\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n% anaconda search -t conda xlrd\nUsing Anaconda API: https://api.anaconda.org/\nRun 'anaconda show <USER/PACKAGE>' to get more details:\nPackages:\n     Name                      |  Version | Package Types   | Platforms\n     ------------------------- |   ------ | --------------- | ---------------\n     RMG/xlrd                  |    0.9.4 | conda           | linux-64, win-32, win-64, linux-32, osx-64\n     RahulJain/xlrd            |    1.0.0 | conda           | win-64\n     aetrial/xlrd              |          | conda           | linux-64, osx-64\n     anaconda/xlrd             |    1.0.0 | conda           | linux-64, win-32, win-64, linux-32, osx-64\n     auto/xlrd                 |    0.8.0 | conda           | linux-64\n                                          : http://www.python-excel.org/\n     jetztcast/xlrd            |    0.9.3 | conda           | linux-64, osx-64\n                                          : Library for developers to extract data from Microsoft Excel (tm) spreadsheet files\nFound 6 packages\n% anaconda show anaconda/xlrd\nUsing Anaconda API: https://api.anaconda.org/\nName:    xlrd\nSummary:\nAccess:  public\nPackage Types:  conda\nVersions:\n   + 0.9.2\n   + 0.9.4\n   + 0.9.3\n   + 0.9.0\n   + 0.9.1\n   + 1.0.0\n\nTo install this package with conda run:\n     conda install --channel https://conda.anaconda.org/anaconda xlrd\n\n\nExcel\u306e\u30b7\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n\u5358\u8eab\u8d74\u4efb\u3067\u4eac\u90fd\u306b\u4f4f\u3093\u3067\u305f\u9803\u306b\u300c\u4eac\u90fd\u306f\u6691\u3044\u3067\u3057\u3087\u3046\u300d\u3063\u3066\u3088\u304f\u8a00\u308f\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u691c\u8a3c\u306e\u305f\u3081\u306b2016\u5e747\u6708\u306e\u6771\u4eac\u3068\u4eac\u90fd\u306e\u65e5\u6bce\u306e\u6700\u9ad8\u6c17\u6e29\u306e\u30c7\u30fc\u30bf\u3092\u6c17\u8c61\u5e81\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066Excel\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n\u3053\u308c\u3001\u898b\u308b\u3060\u3051\u3067\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u306a\u3002Python\u3067\u89e3\u6790\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u308f\u3002\u3067\u3082\u3001\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u3001\u4e21\u90fd\u5e02\u306e\u5e73\u5747\u6c17\u6e29\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\nimport xlrd\nimport os.path\nimport numpy as np\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows-1\n    ncols = sheet1.ncols \n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    for r in range(1, nrows+1):\n        for c in range(0, ncols):\n            data[r-1,c] = sheet1.cell(r,c).value\n    tokyo = data[:,1].mean()\n    kyoto = data[:,2].mean()\n    msg = \"Tokyo(mean): %.2f\\nKyoto(mean): %.2f\" % (tokyo, kyoto)\n    print(msg)\n\nnp.zeros()\u3067\u4e2d\u8eab0\u306e\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001reshape()\u30672\u6b21\u5143\u914d\u5217\u306b\u5909\u5f62\u3059\u308b\u3002Excel\u306e1\u884c\u76ee\u306f\u30d8\u30c3\u30c0\u306a\u306e\u3067\u3001sheet1.nrows\u306e\u5024\u304b\u30891\u5f15\u3044\u3068\u304f\u3002numpy\u306earray\u306a\u306e\u3067\u3001\u5e73\u5747\u3092\u6c42\u3081\u305f\u304b\u3063\u305f\u3089mean()\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u7d50\u679c\u3092\u898b\u308b\u3068\u3001\u3084\u3063\u3071\u308a\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u3063\u30b9\u306d\u3002\n\n\u691c\u5b9a\n\u3068\u3053\u308d\u3067\u3001\u5e73\u5747\u5024\u306e\u6bd4\u8f03\u3060\u3051\u3067\u672c\u5f53\u306b\u4eac\u90fd\u304c\u6691\u3044\u3068\u6c7a\u3081\u3066\u3082\u826f\u3044\u3060\u308d\u3046\u304b\uff1f\u3053\u3053\u306f\u3084\u3063\u3071\u308a\u7d71\u8a08\u7684\u306b\u6709\u610f\u306a\u5dee\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u5b9a\u3057\u305f\u65b9\u304c\u3044\u3044\u3002\n\u5e73\u5747\u5024\u306e\u5dee\u306e\u691c\u5b9a\u306f\u3001scipy\u306estats\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\nimport xlrd\nimport os.path\nimport numpy as np\nfrom scipy import stats\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows-1\n    ncols = sheet1.ncols\n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    for r in range(1, nrows):\n        for c in range(0, ncols):\n            data[r-1,c] = sheet1.cell(r,c).value\n    tokyo = data[:,1]\n    kyoto = data[:,2]\n    t,p = stats.ttest_ind(tokyo, kyoto, equal_var=False))\n    msg = \"p-value: %.5f\" % p\n    print(msg)\n\n\u306a\u304a\u3001\u6771\u4eac\u3068\u4eac\u90fd\u306e\u6c17\u6e29\u3067\u306f\u3001\u300c\u6771\u4eac\u306e\u65b9\u304c\u4f4e\u3044\u300d\u3068\u3044\u3046\u4eee\u8aac\u3092\u691c\u5b9a\u3059\u308b\u3068\u304d\u306f\u3001\u7247\u5074\u691c\u5b9a\u306b\u306a\u308b\u3093\u3060\u3051\u308c\u3069\u3001\u7247\u5074\u691c\u5b9a\u3067\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3059\u308boption\u304cstats.ttest_ind()\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u3088\u3046\u3060\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306e\u5834\u5408\u306f\u3001t\u5024\u304c\u8ca0\u306e\u5024\u3067p-value \u304c0.025\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u3067\u305d\u306e\u4ee3\u66ff\u3068\u3059\u308b\u3002\n\u3067\u3001\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\nt: -4.09874\np-value: 0.00014\n\n\n\u30b0\u30e9\u30d5\u63cf\u753b\nExcel\u30b7\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u306e\u3067\u3001\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u308b\u3002\nR\u306a\u3089\u3070ggplot2\u3092\u4f7f\u3046\u5834\u9762\u3060\u3051\u308c\u3069\u3001Anaconda\u74b0\u5883\u306ePython\u306a\u3089\u3070matplotlib\u3067\u3067\u304d\u308b\u3002\nimport xlrd\nimport os.path\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom matplotlib import pyplot as plt\n%matplotlib inline \n\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows - 1\n    ncols = sheet1.ncols\n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    date = []\n    for r in range(1, nrows+1):\n        for c in range(0, ncols):\n            if c==0:\n                d =  xlrd.xldate.xldate_as_datetime(sheet1.cell(r,c).value, xls.datemode)\n                date.append(d)\n            else:\n                data[r-1,c] = sheet1.cell(r,c).value\n\n    tokyo = data[:,1]\n    kyoto = data[:,2]\n\n    plt.plot(date, tokyo, label=\"Tokyo\")\n    plt.plot(date, kyoto, label=\"Kyoto\")\n    plt.legend()\n    plt.show()\n\n\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u306b\u3042\u305f\u3063\u3066\u3001X\u8ef8\u306fExcel\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u65e5\u4ed8\u3092\u4f7f\u3044\u305f\u3044\u3002Excel\u306e\u30d5\u30a1\u30a4\u30eb\u4e0a\u30672016/07/01\u3063\u3066\u3044\u3046\u65e5\u4ed8\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642\u306f\u3001\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306f\u201d41090\u201d\u3068\u3044\u3046\u6570\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u30b3\u30ec\u3092\u898b\u30667/1\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\u5909\u63db\u3059\u308b\u3002\u305d\u308c\u304c\u3001\u4ee5\u4e0b\u306e\u884c\u3002\nd =  xlrd.xldate.xldate_as_datetime(sheet1.cell(r,c).value, xls.datemode)\n\n\u3053\u308c\u3067\u3001datetime\u578b\u306b\u5909\u63db\u3055\u308c\u3001\u201d41090\u201d\u306f\u201d2016-07-01 00:00:00\u201d\u306b\u306a\u308b\u3002\u306a\u306e\u3067\u3001date=[]\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u304a\u3044\u305f\u30ea\u30b9\u30c8\u306b\u3001\u9010\u4e00date.append(d)\u3057\u3066\u304a\u304f\u3002\n\u3068\u3053\u308d\u3067\u3001\u5909\u6570d\u3092print()\u3059\u308b\u3068\u304d\u306f\u3001d.strftime(\u201c%m/%d\u201d) \u3068\u304b\u3059\u308c\u3070\u30017/1\u3063\u3066\u3001\u6708/\u65e5\u3060\u3051\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3082\u3067\u304d\u308b\u3002\u3067\u304d\u308b\u3093\u3060\u3051\u308c\u3069\u3001\u305d\u3046\u3084\u3063\u3066\u5909\u63db\u3057\u305f\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8date\u306bappend\u3059\u308b\u3068\u3001plt.plot()\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3061\u3083\u3046\u306e\u3067\u3001\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u3093\u3067\u3057\u3087\u3046\u306d\u3002\n\u3068\u3044\u3046\u30ef\u30b1\u3067\u3001\u63cf\u3051\u305f\u30b0\u30e9\u30d5\u306f\u3053\u3093\u306a\u611f\u3058\u3002\u3084\u3063\u3071\u308aX\u8ef8\u304c\u8aad\u307f\u3065\u3089\u3044\u3002\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u306a\u3002\u3053\u306e\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3001\u691c\u5b9a\u3059\u308b\u307e\u3067\u3082\u306a\u304f\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u3053\u3068\u306f\u5206\u304b\u308b(\u3059\u306a\u308f\u3061\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306f\u5927\u4e8b)\u3002\n\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\n\nhttps://github.com/fukuit/Python_SelfLearning/blob/master/read_excel.py\nhttps://github.com/fukuit/Python_SelfLearning/blob/master/temperature.xlsx\n\n\n\u304a\u3088\u305dPC\u3067\u306a\u3093\u304b\u3092\u3059\u308b\u6642\u306b\u3001Excel\u306e\u4f7f\u7528\u306f\u907f\u3051\u3066\u901a\u308c\u306a\u3044\u3002\u30a4\u30de\u30c9\u30ad\u3001\u300cMicrosoft\u5acc\u3044\u306a\u3093\u3067\u300d\u3068\u304b\u8a00\u3063\u3066\u3001Lotus 1-2-3\u3092\u4f7f\u3046\u30d2\u30c8\u3082\u5c45\u3089\u3093\u3067\u3057\u3087\u3046\u3002\u306a\u3093\u304b\u306e\u6e2c\u5b9a\u30c7\u30fc\u30bf\u7b49\u306fExcel\u306e\u30b7\u30fc\u30c8\u4e0a\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3002\u3068\u306a\u3063\u305f\u3089\u3001Excel\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u304f\u3089\u3044\u306f\u3067\u304d\u305f\u65b9\u304c\u3044\u3044\u3002\n\n# CSV\u3067\u306f\u30a4\u30ab\u30f3\u306e\u304b\n\nExcel\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u3001CSV\u3068\u304b\u30bf\u30d6\u533a\u5207\u308a\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3068\u304b\u3067\u4fdd\u5b58\u3059\u308b\u305d\u306e\u4e00\u624b\u9593\u3092\u304b\u3051\u308b\u4f59\u88d5\u304c\u3042\u308b\u6642\u306f\u3001\u3082\u3061\u308d\u3093\u305d\u308c\u3067\u3044\u3044\u3002\n\u3067\u3082\u3001\u305f\u307e\u306b\u3042\u308b\u3093\u3060\u3088\u300230\u65e5\u9593\u306e\u5b9f\u9a13\u7d50\u679c\u304c30\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u304b\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30a1\u30a4\u30eb\u30921\u500b\u305a\u3064\u958b\u3044\u3066\u306fCSV\u306b\u4fdd\u5b58\u3057\u76f4\u3059\u3068\u3044\u3046\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\u304b\u3001\u305d\u306e\u64cd\u4f5c\u3092\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308bExcel VBA\u3092\u66f8\u304f\u304b\u3001\u3046\u30fc\u3093\u30bd\u30ec\u3082\u3044\u3044\u306a\u3001Excel\u306e\u3053\u3068\u306fExcel\u3067\u3002\n\n\u305d\u3046\u3082\u8a00\u3063\u3066\u3089\u308c\u306a\u3044\u306e\u3067\u3001conda\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bExcel\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u304c\u3067\u304d\u305d\u3046\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3059\u3002\u3053\u3046\u3044\u3046\u6642\u306f\u30b0\u30b0\u308b\u3057\u304b\u306a\u3044\u3002xlrd\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\n```\n% anaconda search -t conda xlrd\nUsing Anaconda API: https://api.anaconda.org/\nRun 'anaconda show <USER/PACKAGE>' to get more details:\nPackages:\n     Name                      |  Version | Package Types   | Platforms\n     ------------------------- |   ------ | --------------- | ---------------\n     RMG/xlrd                  |    0.9.4 | conda           | linux-64, win-32, win-64, linux-32, osx-64\n     RahulJain/xlrd            |    1.0.0 | conda           | win-64\n     aetrial/xlrd              |          | conda           | linux-64, osx-64\n     anaconda/xlrd             |    1.0.0 | conda           | linux-64, win-32, win-64, linux-32, osx-64\n     auto/xlrd                 |    0.8.0 | conda           | linux-64\n                                          : http://www.python-excel.org/\n     jetztcast/xlrd            |    0.9.3 | conda           | linux-64, osx-64\n                                          : Library for developers to extract data from Microsoft Excel (tm) spreadsheet files\nFound 6 packages\n% anaconda show anaconda/xlrd\nUsing Anaconda API: https://api.anaconda.org/\nName:    xlrd\nSummary:\nAccess:  public\nPackage Types:  conda\nVersions:\n   + 0.9.2\n   + 0.9.4\n   + 0.9.3\n   + 0.9.0\n   + 0.9.1\n   + 1.0.0\n\nTo install this package with conda run:\n     conda install --channel https://conda.anaconda.org/anaconda xlrd\n```\n\n# Excel\u306e\u30b7\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n\n\u5358\u8eab\u8d74\u4efb\u3067\u4eac\u90fd\u306b\u4f4f\u3093\u3067\u305f\u9803\u306b\u300c\u4eac\u90fd\u306f\u6691\u3044\u3067\u3057\u3087\u3046\u300d\u3063\u3066\u3088\u304f\u8a00\u308f\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u691c\u8a3c\u306e\u305f\u3081\u306b2016\u5e747\u6708\u306e\u6771\u4eac\u3068\u4eac\u90fd\u306e\u65e5\u6bce\u306e\u6700\u9ad8\u6c17\u6e29\u306e\u30c7\u30fc\u30bf\u3092\u6c17\u8c61\u5e81\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066Excel\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n![20160831001.jpg](https://qiita-image-store.s3.amazonaws.com/0/15553/302c78f3-35d2-4b60-a5d8-189e8530e772.jpeg \"20160831001.jpg\")\n\n\u3053\u308c\u3001\u898b\u308b\u3060\u3051\u3067\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u306a\u3002Python\u3067\u89e3\u6790\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u308f\u3002\u3067\u3082\u3001\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u3001\u4e21\u90fd\u5e02\u306e\u5e73\u5747\u6c17\u6e29\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\n\n```python\nimport xlrd\nimport os.path\nimport numpy as np\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows-1\n    ncols = sheet1.ncols \n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    for r in range(1, nrows+1):\n        for c in range(0, ncols):\n            data[r-1,c] = sheet1.cell(r,c).value\n    tokyo = data[:,1].mean()\n    kyoto = data[:,2].mean()\n    msg = \"Tokyo(mean): %.2f\\nKyoto(mean): %.2f\" % (tokyo, kyoto)\n    print(msg)\n```\n\nnp.zeros()\u3067\u4e2d\u8eab0\u306e\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001reshape()\u30672\u6b21\u5143\u914d\u5217\u306b\u5909\u5f62\u3059\u308b\u3002Excel\u306e1\u884c\u76ee\u306f\u30d8\u30c3\u30c0\u306a\u306e\u3067\u3001sheet1.nrows\u306e\u5024\u304b\u30891\u5f15\u3044\u3068\u304f\u3002numpy\u306earray\u306a\u306e\u3067\u3001\u5e73\u5747\u3092\u6c42\u3081\u305f\u304b\u3063\u305f\u3089mean()\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u7d50\u679c\u3092\u898b\u308b\u3068\u3001\u3084\u3063\u3071\u308a\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u3063\u30b9\u306d\u3002\n\n## \u691c\u5b9a\n\u3068\u3053\u308d\u3067\u3001\u5e73\u5747\u5024\u306e\u6bd4\u8f03\u3060\u3051\u3067\u672c\u5f53\u306b\u4eac\u90fd\u304c\u6691\u3044\u3068\u6c7a\u3081\u3066\u3082\u826f\u3044\u3060\u308d\u3046\u304b\uff1f\u3053\u3053\u306f\u3084\u3063\u3071\u308a\u7d71\u8a08\u7684\u306b\u6709\u610f\u306a\u5dee\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u5b9a\u3057\u305f\u65b9\u304c\u3044\u3044\u3002\n\n\u5e73\u5747\u5024\u306e\u5dee\u306e\u691c\u5b9a\u306f\u3001scipy\u306estats\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\n\n```python\nimport xlrd\nimport os.path\nimport numpy as np\nfrom scipy import stats\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows-1\n    ncols = sheet1.ncols\n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    for r in range(1, nrows):\n        for c in range(0, ncols):\n            data[r-1,c] = sheet1.cell(r,c).value\n    tokyo = data[:,1]\n    kyoto = data[:,2]\n    t,p = stats.ttest_ind(tokyo, kyoto, equal_var=False))\n    msg = \"p-value: %.5f\" % p\n    print(msg)\n```\n\n\u306a\u304a\u3001\u6771\u4eac\u3068\u4eac\u90fd\u306e\u6c17\u6e29\u3067\u306f\u3001\u300c\u6771\u4eac\u306e\u65b9\u304c\u4f4e\u3044\u300d\u3068\u3044\u3046\u4eee\u8aac\u3092\u691c\u5b9a\u3059\u308b\u3068\u304d\u306f\u3001\u7247\u5074\u691c\u5b9a\u306b\u306a\u308b\u3093\u3060\u3051\u308c\u3069\u3001\u7247\u5074\u691c\u5b9a\u3067\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3059\u308boption\u304cstats.ttest_ind()\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u3088\u3046\u3060\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306e\u5834\u5408\u306f\u3001t\u5024\u304c\u8ca0\u306e\u5024\u3067p-value \u304c0.025\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u3067\u305d\u306e\u4ee3\u66ff\u3068\u3059\u308b\u3002\n\n\u3067\u3001\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\tt: -4.09874\n\tp-value: 0.00014\n\n\n## \u30b0\u30e9\u30d5\u63cf\u753b\n\nExcel\u30b7\u30fc\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u306e\u3067\u3001\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u308b\u3002\nR\u306a\u3089\u3070ggplot2\u3092\u4f7f\u3046\u5834\u9762\u3060\u3051\u308c\u3069\u3001Anaconda\u74b0\u5883\u306ePython\u306a\u3089\u3070matplotlib\u3067\u3067\u304d\u308b\u3002\n\n```python\nimport xlrd\nimport os.path\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom matplotlib import pyplot as plt\n%matplotlib inline \n\nxlfile = \"test.xlsx\"\nif os.path.exists(xlfile):\n    xls = xlrd.open_workbook(xlfile)\n    sheet1 = xls.sheet_by_index(0)\n    nrows = sheet1.nrows - 1\n    ncols = sheet1.ncols\n    data = np.zeros(ncols*nrows).reshape((nrows, ncols))\n    date = []\n    for r in range(1, nrows+1):\n        for c in range(0, ncols):\n            if c==0:\n                d =  xlrd.xldate.xldate_as_datetime(sheet1.cell(r,c).value, xls.datemode)\n                date.append(d)\n            else:\n                data[r-1,c] = sheet1.cell(r,c).value\n\n    tokyo = data[:,1]\n    kyoto = data[:,2]\n    \n    plt.plot(date, tokyo, label=\"Tokyo\")\n    plt.plot(date, kyoto, label=\"Kyoto\")\n    plt.legend()\n    plt.show()\n```\n\n\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u306b\u3042\u305f\u3063\u3066\u3001X\u8ef8\u306fExcel\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u65e5\u4ed8\u3092\u4f7f\u3044\u305f\u3044\u3002Excel\u306e\u30d5\u30a1\u30a4\u30eb\u4e0a\u30672016/07/01\u3063\u3066\u3044\u3046\u65e5\u4ed8\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642\u306f\u3001\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306f\u201d41090\u201d\u3068\u3044\u3046\u6570\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u30b3\u30ec\u3092\u898b\u30667/1\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\u5909\u63db\u3059\u308b\u3002\u305d\u308c\u304c\u3001\u4ee5\u4e0b\u306e\u884c\u3002\n\n```python\nd =  xlrd.xldate.xldate_as_datetime(sheet1.cell(r,c).value, xls.datemode)\n```\n\u3053\u308c\u3067\u3001datetime\u578b\u306b\u5909\u63db\u3055\u308c\u3001\u201d41090\u201d\u306f\u201d2016-07-01 00:00:00\u201d\u306b\u306a\u308b\u3002\u306a\u306e\u3067\u3001date=[]\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u304a\u3044\u305f\u30ea\u30b9\u30c8\u306b\u3001\u9010\u4e00date.append(d)\u3057\u3066\u304a\u304f\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u5909\u6570d\u3092print()\u3059\u308b\u3068\u304d\u306f\u3001d.strftime(\u201c%m/%d\u201d) \u3068\u304b\u3059\u308c\u3070\u30017/1\u3063\u3066\u3001\u6708/\u65e5\u3060\u3051\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3082\u3067\u304d\u308b\u3002\u3067\u304d\u308b\u3093\u3060\u3051\u308c\u3069\u3001\u305d\u3046\u3084\u3063\u3066\u5909\u63db\u3057\u305f\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8date\u306bappend\u3059\u308b\u3068\u3001plt.plot()\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3061\u3083\u3046\u306e\u3067\u3001\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u3093\u3067\u3057\u3087\u3046\u306d\u3002\n\n\u3068\u3044\u3046\u30ef\u30b1\u3067\u3001\u63cf\u3051\u305f\u30b0\u30e9\u30d5\u306f\u3053\u3093\u306a\u611f\u3058\u3002\u3084\u3063\u3071\u308aX\u8ef8\u304c\u8aad\u307f\u3065\u3089\u3044\u3002\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u306a\u3002\u3053\u306e\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068\u3001\u691c\u5b9a\u3059\u308b\u307e\u3067\u3082\u306a\u304f\u4eac\u90fd\u306e\u65b9\u304c\u6691\u3044\u3053\u3068\u306f\u5206\u304b\u308b(\u3059\u306a\u308f\u3061\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u306f\u5927\u4e8b)\u3002\n\n![20160831003.png](https://qiita-image-store.s3.amazonaws.com/0/15553/402308b6-29f9-7db0-7d9e-27a6149b0777.png \"20160831003.png\")\n\n## \u4eca\u56de\u306e\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\n\n- https://github.com/fukuit/Python_SelfLearning/blob/master/read_excel.py\n- https://github.com/fukuit/Python_SelfLearning/blob/master/temperature.xlsx\n"}