{"tags": ["iOS9.1", "iPad", "ApplePencil"], "context": "\n\n\u306f\u3058\u3081\u306b\n\uf8ffPencil \u306e\u5b9f\u7269\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067 API \u3092\u773a\u3081\u308b\u306e\u307f\u3002\n\u99b4\u67d3\u307f\u306a\u3044\u5358\u8a9e\uff1a\n\nAzimuth\u2026 \u65b9\u4f4d\u89d2\nAltitude\u2026 \u9ad8\u5ea6\n\n\n\u3053\u306e\u56f3\u306b Observer \u3092\u7b46\u5148\u3001Star \u3092 Lightning \u7aef\u5b50\u3068\u5f53\u3066\u306f\u3081\u308c\u3070\u826f\u3044\u306e\u304b\u306a\u3002\n\nUITouch\n\nUITouchType\n\u30bf\u30c3\u30c1\u306e\u7a2e\u5225\u306b Stylus\uff08\u2252Apple Pencil\uff09\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\nUITouchType\ntypedef NS_ENUM(NSInteger, UITouchType) {\n    UITouchTypeDirect,                       // A direct touch from a finger (on a screen)\n    UITouchTypeIndirect,                     // An indirect touch (not a screen)\n    UITouchTypeStylus NS_AVAILABLE_IOS(9_1), // A touch from a stylus\n} NS_ENUM_AVAILABLE_IOS(9_0);\n\n\n\n\nUITouchTypeDirect: \u6307\u30bf\u30c3\u30c1\n\nUITouchTypeIndirect: \u8a73\u7d30\u4e0d\u660e\n\nUITouchTypeStylus: Pencil\n\nUITouchTypeIndirect \u306b\u95a2\u3057\u3066\u306e\u8a18\u8ff0\u306f\u7279\u306b\u306a\u304f\u3001\u7528\u9014\u4e0d\u660e\u3002\u300c\u30b9\u30af\u30ea\u30fc\u30f3\u5916\u306e\u9593\u63a5\u7684\u306a\u30bf\u30c3\u30c1\u300d\u3068\u3044\u3046\u65e8\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30d5\u30a9\u30fc\u30b9\u30bf\u30c3\u30c1\u304b\u3001\u3042\u308b\u3044\u306f\u5c06\u6765 Siri Remote \u306e\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u30bf\u30c3\u30c1\u5ea7\u6a19\u3092\u6c42\u3081\u308b\n\nUITouch\n// Use these methods to gain additional precision that may be available from touches.\n// Do not use precise locations for hit testing. A touch may hit test inside a view, yet have a precise location that lies just outside.\n@available(iOS 9.1, *)\npublic func preciseLocationInView(view: UIView?) -> CGPoint\n@available(iOS 9.1, *)\npublic func precisePreviousLocationInView(view: UIView?) -> CGPoint\n\n\n\n\u7cbe\u5ea6\u306e\u9ad8\u3044\u5ea7\u6a19\u3068\u306f\niOS 9.1 \u3088\u308a\u3001\u6307\u3068 Pencil \u4e21\u65b9\u3067\u3088\u308a\u6b63\u78ba\u3067\u7cbe\u5ea6\u306e\u9ad8\u3044\u30bf\u30c3\u30c1\u5ea7\u6a19\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u306f\u65e2\u5b58\u306e -locationInView: \u306e\u4ee3\u308f\u308a\u306b\u4e0a\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u5927\u304d\u306a\u753b\u9762\u3092\u6301\u3064\u7aef\u672b\u306b\u306f\u6709\u52b9\u3002\n\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5bfe\u5fdc\n\n\n\n\n\u901a\u5e38\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19\n\u9ad8\u7cbe\u5ea6\u306a\u30bf\u30c3\u30c1\u5ea7\u6a19\n\n\n\n\n\u73fe\u5728\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19\nlocationInView()\npreciseLocationInView()\n\n\n\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19\npreviousLocationInView()\nprecisePreviousLocationInView()\n\n\n\n\n\u65b9\u4f4d\u89d2\uff08Azimuth\uff09\u3092\u5f97\u308b\n\u65b9\u4f4d\u89d2\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\n\nUITouch\n// Azimuth angle. Valid only for stylus touch types. Zero radians points along the positive X axis.\n// Passing a nil for the view parameter will return the azimuth relative to the touch's window.\n@available(iOS 9.1, *)\npublic func azimuthAngleInView(view: UIView?) -> CGFloat\n\n\n\u65b9\u4f4d\u89d2\u306e\u65b9\u5411\u3092\u6307\u3059\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\n\nUITouch\n// A unit vector that points in the direction of the azimuth angle. Valid only for stylus touch types.\n// Passing nil for the view parameter will return a unit vector relative to the touch's window.\n@available(iOS 9.1, *)\npublic func azimuthUnitVectorInView(view: UIView?) -> CGVector\n\n\n\u53c2\u8003\u307e\u3067\u306b CGVector\n\nCGGeometry\npublic struct CGVector {\n    public var dx: CGFloat\n    public var dy: CGFloat\n    public init()\n    public init(dx: CGFloat, dy: CGFloat)\n}\n\n\n\n\u9ad8\u5ea6\u89d2\uff08Altitude\uff09\u3092\u5f97\u308b\n\u9ad8\u5ea6\u89d2\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\nM_PI/2 \u30e9\u30b8\u30a2\u30f3\u306f Pencil \u304c\u753b\u9762\u306b\u5782\u76f4\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u30020\u30e9\u30b8\u30a2\u30f3\u306f Pencil \u304c\u753b\u9762\u3068\u5e73\u884c\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nUITouch\n// Altitude angle. Valid only for stylus touch types.\n// Zero radians indicates that the stylus is parallel to the screen surface,\n// while M_PI/2 radians indicates that it is normal to the screen surface.\n@available(iOS 9.1, *)\npublic var altitudeAngle: CGFloat { get }\n\n\n\n\u5099\u8003\uff1a\u30e9\u30b8\u30a2\u30f3\uff0f\u5f27\u5ea6\u6cd5\n\n\n\nestimationUpdateIndex\n\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3080\u5404\u30bf\u30c3\u30c1\u3067\u305f\u3060\u5897\u52a0\u3057\u307e\u3059\u3002\u9069\u5207\u306a\u30bf\u30c3\u30c1\u306b\u30bf\u30c3\u30c1\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u63a8\u5b9a\u307e\u305f\u306f\u66f4\u65b0\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u3044\u305a\u308c\u304b\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306bnil\u3092\u8fd4\u3059\u3002\uff08Google\u7ffb\u8a33\uff09\n\u2026\u2026\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30bf\u30c3\u30c1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7684\u306a\u3082\u306e\u3089\u3057\u3044\u3002\n\nUITouch\n// An index which allows you to correlate updates with the original touch.\n// Is only guaranteed non-nil if this UITouch expects or is an update.\n@available(iOS 9.1, *)\npublic var estimationUpdateIndex: NSNumber? { get }\n\n\n\nUITouchProperties\n\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3002\n\nUITouchProperties\n@available(iOS 9.1, *)\npublic struct UITouchProperties : OptionSetType {\n    public init(rawValue: Int)\n\n    public static var Force: UITouchProperties { get }\n    public static var Azimuth: UITouchProperties { get }\n    public static var Altitude: UITouchProperties { get }\n    public static var Location: UITouchProperties { get } // For predicted Touches\n}\n\n\n\u305d\u308c\u305e\u308c Pencil \u306e\u7b46\u5727\u3001\u65b9\u4f4d\u3001\u9ad8\u5ea6\u3001\u5ea7\u6a19 \u3092\u8868\u3059\u3002\n\nestimatedProperties\n\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5f97\u308b\u3002\n\nUITouch\n// A set of properties that has estimated values\n// Only denoting properties that are currently estimated\n@available(iOS 9.1, *)\npublic var estimatedProperties: UITouchProperties { get }\n// A set of properties that expect to have incoming updates in the future.\n// If no updates are expected for an estimated property the current value is our final estimate.\n// This happens e.g. for azimuth/altitude values when entering from the edges\n@available(iOS 9.1, *)\npublic var estimatedPropertiesExpectingUpdates: UITouchProperties { get }\n\n\n\n\u53c2\u8003\u8cc7\u6599\nUITouch Class Reference\nWhat's New in iOS 9.1\nHow to track finger position and touch force in iOS 9\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nTouchCanvas: Using UITouch efficiently and effectively\n# \u306f\u3058\u3081\u306b\n\n\uf8ffPencil \u306e\u5b9f\u7269\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067 API \u3092\u773a\u3081\u308b\u306e\u307f\u3002\n\n\u99b4\u67d3\u307f\u306a\u3044\u5358\u8a9e\uff1a\n\n> Azimuth\u2026 \u65b9\u4f4d\u89d2\n> Altitude\u2026 \u9ad8\u5ea6\n\n![\u56f3](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Azimuth-Altitude_schematic.svg/498px-Azimuth-Altitude_schematic.svg.png)\n\n\u3053\u306e\u56f3\u306b `Observer` \u3092\u7b46\u5148\u3001`Star` \u3092 Lightning \u7aef\u5b50\u3068\u5f53\u3066\u306f\u3081\u308c\u3070\u826f\u3044\u306e\u304b\u306a\u3002\n\n# UITouch\n\n## UITouchType\n\n\u30bf\u30c3\u30c1\u306e\u7a2e\u5225\u306b Stylus\uff08\u2252Apple Pencil\uff09\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\n```objc:UITouchType\ntypedef NS_ENUM(NSInteger, UITouchType) {\n    UITouchTypeDirect,                       // A direct touch from a finger (on a screen)\n    UITouchTypeIndirect,                     // An indirect touch (not a screen)\n    UITouchTypeStylus NS_AVAILABLE_IOS(9_1), // A touch from a stylus\n} NS_ENUM_AVAILABLE_IOS(9_0);\n```\n\n- **UITouchTypeDirect**: \u6307\u30bf\u30c3\u30c1\n- **UITouchTypeIndirect**: \u8a73\u7d30\u4e0d\u660e\n- **UITouchTypeStylus**: Pencil\n\n`UITouchTypeIndirect` \u306b\u95a2\u3057\u3066\u306e\u8a18\u8ff0\u306f\u7279\u306b\u306a\u304f\u3001\u7528\u9014\u4e0d\u660e\u3002\u300c\u30b9\u30af\u30ea\u30fc\u30f3\u5916\u306e\u9593\u63a5\u7684\u306a\u30bf\u30c3\u30c1\u300d\u3068\u3044\u3046\u65e8\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u30d5\u30a9\u30fc\u30b9\u30bf\u30c3\u30c1\u304b\u3001\u3042\u308b\u3044\u306f\u5c06\u6765 Siri Remote \u306e\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n## \u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u30bf\u30c3\u30c1\u5ea7\u6a19\u3092\u6c42\u3081\u308b\n\n```swift:UITouch\n// Use these methods to gain additional precision that may be available from touches.\n// Do not use precise locations for hit testing. A touch may hit test inside a view, yet have a precise location that lies just outside.\n@available(iOS 9.1, *)\npublic func preciseLocationInView(view: UIView?) -> CGPoint\n@available(iOS 9.1, *)\npublic func precisePreviousLocationInView(view: UIView?) -> CGPoint\n```\n\n### \u7cbe\u5ea6\u306e\u9ad8\u3044\u5ea7\u6a19\u3068\u306f\n\niOS 9.1 \u3088\u308a\u3001\u6307\u3068 Pencil \u4e21\u65b9\u3067\u3088\u308a\u6b63\u78ba\u3067\u7cbe\u5ea6\u306e\u9ad8\u3044\u30bf\u30c3\u30c1\u5ea7\u6a19\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u306f\u65e2\u5b58\u306e `-locationInView:` \u306e\u4ee3\u308f\u308a\u306b\u4e0a\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u5927\u304d\u306a\u753b\u9762\u3092\u6301\u3064\u7aef\u672b\u306b\u306f\u6709\u52b9\u3002\n\n**\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5bfe\u5fdc**\n\n| |\u901a\u5e38\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19|\u9ad8\u7cbe\u5ea6\u306a\u30bf\u30c3\u30c1\u5ea7\u6a19|\n|---|---|---|\n|\u73fe\u5728\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19|locationInView()|preciseLocationInView()|\n|\u76f4\u524d\u306e\u30bf\u30c3\u30c1\u5ea7\u6a19|previousLocationInView()|precisePreviousLocationInView()|\n\n\n## \u65b9\u4f4d\u89d2\uff08Azimuth\uff09\u3092\u5f97\u308b\n\n\u65b9\u4f4d\u89d2\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\n\n```swift:UITouch\n// Azimuth angle. Valid only for stylus touch types. Zero radians points along the positive X axis.\n// Passing a nil for the view parameter will return the azimuth relative to the touch's window.\n@available(iOS 9.1, *)\npublic func azimuthAngleInView(view: UIView?) -> CGFloat\n```\n\n\u65b9\u4f4d\u89d2\u306e\u65b9\u5411\u3092\u6307\u3059\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\n\n```swift:UITouch\n// A unit vector that points in the direction of the azimuth angle. Valid only for stylus touch types.\n// Passing nil for the view parameter will return a unit vector relative to the touch's window.\n@available(iOS 9.1, *)\npublic func azimuthUnitVectorInView(view: UIView?) -> CGVector\n```\n\n\u53c2\u8003\u307e\u3067\u306b CGVector\n\n```swift:CGGeometry\npublic struct CGVector {\n    public var dx: CGFloat\n    public var dy: CGFloat\n    public init()\n    public init(dx: CGFloat, dy: CGFloat)\n}\n```\n\n## \u9ad8\u5ea6\u89d2\uff08Altitude\uff09\u3092\u5f97\u308b\n\n\u9ad8\u5ea6\u89d2\u3092\u5f97\u308b\u3002UITouchTypeStylus \u306e\u307f\u3067\u6709\u52b9\u3002\n`M_PI/2` \u30e9\u30b8\u30a2\u30f3\u306f Pencil \u304c\u753b\u9762\u306b\u5782\u76f4\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u30020\u30e9\u30b8\u30a2\u30f3\u306f Pencil \u304c\u753b\u9762\u3068\u5e73\u884c\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\n```swift:UITouch\n// Altitude angle. Valid only for stylus touch types.\n// Zero radians indicates that the stylus is parallel to the screen surface,\n// while M_PI/2 radians indicates that it is normal to the screen surface.\n@available(iOS 9.1, *)\npublic var altitudeAngle: CGFloat { get }\n```\n\n### [\u5099\u8003\uff1a\u30e9\u30b8\u30a2\u30f3\uff0f\u5f27\u5ea6\u6cd5](https://ja.wikipedia.org/wiki/\u30e9\u30b8\u30a2\u30f3)\n\n![radian](https://upload.wikimedia.org/wikipedia/commons/4/4e/Circle_radians.gif)\n\n## estimationUpdateIndex\n\n\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u542b\u3080\u5404\u30bf\u30c3\u30c1\u3067\u305f\u3060\u5897\u52a0\u3057\u307e\u3059\u3002\u9069\u5207\u306a\u30bf\u30c3\u30c1\u306b\u30bf\u30c3\u30c1\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u63a8\u5b9a\u307e\u305f\u306f\u66f4\u65b0\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u3044\u305a\u308c\u304b\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306bnil\u3092\u8fd4\u3059\u3002\uff08Google\u7ffb\u8a33\uff09\n\n\u2026\u2026\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30bf\u30c3\u30c1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7684\u306a\u3082\u306e\u3089\u3057\u3044\u3002\n\n```swift:UITouch\n// An index which allows you to correlate updates with the original touch.\n// Is only guaranteed non-nil if this UITouch expects or is an update.\n@available(iOS 9.1, *)\npublic var estimationUpdateIndex: NSNumber? { get }\n```\n\n## UITouchProperties\n\n\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3002\n\n```swift:UITouchProperties\n@available(iOS 9.1, *)\npublic struct UITouchProperties : OptionSetType {\n    public init(rawValue: Int)\n    \n    public static var Force: UITouchProperties { get }\n    public static var Azimuth: UITouchProperties { get }\n    public static var Altitude: UITouchProperties { get }\n    public static var Location: UITouchProperties { get } // For predicted Touches\n}\n```\n\n\u305d\u308c\u305e\u308c Pencil \u306e\u7b46\u5727\u3001\u65b9\u4f4d\u3001\u9ad8\u5ea6\u3001\u5ea7\u6a19 \u3092\u8868\u3059\u3002\n\n## estimatedProperties\n\n\u63a8\u5b9a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5f97\u308b\u3002\n\n```swift:UITouch\n// A set of properties that has estimated values\n// Only denoting properties that are currently estimated\n@available(iOS 9.1, *)\npublic var estimatedProperties: UITouchProperties { get }\n// A set of properties that expect to have incoming updates in the future.\n// If no updates are expected for an estimated property the current value is our final estimate.\n// This happens e.g. for azimuth/altitude values when entering from the edges\n@available(iOS 9.1, *)\npublic var estimatedPropertiesExpectingUpdates: UITouchProperties { get }\n```\n\n# \u53c2\u8003\u8cc7\u6599\n\n[UITouch Class Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITouch_Class/index.html)\n[What's New in iOS 9.1](https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9_1.html)\n[How to track finger position and touch force in iOS 9](http://pinkstone.co.uk/how-to-track-finger-position-and-touch-force-in-ios-9/)\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n[TouchCanvas: Using UITouch efficiently and effectively](https://developer.apple.com/library/ios/samplecode/TouchCanvas/Introduction/Intro.html)\n"}