{"context": "\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044Activity\u306e\u5b9f\u88c5\u3068\u30ed\u30b0\u30a2\u30a6\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u8a66\u884c\u932f\u8aa4\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\u524d\u63d0\u3068\u3057\u3066Activity\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u90fd\u5ea6\u7834\u68c4\u30fb\u751f\u6210\u3092\u3059\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002\n\n\u30ed\u30b0\u30a4\u30f3\u72b6\u614b\u306e\u5b9a\u7fa9\n\nSharedPreference\u306buserId\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b (\u307e\u305f\u306fAccessToken)\n\n\n\u5b9f\u88c5\nAppCompatActivity\u3092\u7d99\u627f\u3057\u305fBaseActivity\u3092\u4f5c\u6210\u3057\u3001\u5229\u7528\u3059\u308bActivity\u306f\u5168\u3066BaseActivity\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\nBaseActivity\u306f\u305d\u306eActivity\u304c\u8a8d\u8a3c\u304c\u5fc5\u8981\u304b\u3069\u3046\u304b\u3092\u6c7a\u3081\u308b\u30d5\u30e9\u30b0 (isAuthorizationRequired) \u3092\u6301\u3061\u307e\u3059\u3002\u5b50Activity\u306f #allowGuestAccess \u3092\u547c\u3076\u3053\u3068\u306b\u3088\u308a\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u3092\u8a31\u53ef\u3067\u304d\u307e\u3059\u3002\n\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u305d\u306e\u30d5\u30e9\u30b0\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u30ed\u30b0\u30a2\u30a6\u30c8\u51e6\u7406\u306f\u3001Intent\u3092Broadcast\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u4f7f\u3044\u307e\u3059\u3002BaseActivity\u306e #logout \u3092\u5b9f\u884c\u3059\u308b\u3068\u5168\u4f53\u306b \"\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3088\" \u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u884c\u3057\u3001\u5b58\u5728\u3059\u308bActivity\u306f\u305d\u308c\u3092\u53d7\u3051 (Activity\u306f\u3059\u3079\u3066BaseActivity\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3089\u30ec\u30b7\u30fc\u30d6\u3067\u304d\u308b\uff09 \u81ea\u8eab\u306e\u751f\u547d\u3092\u7d76\u3061\u307e\u3059\u3002\n\u8a8d\u8a3c\u306b\u95a2\u3059\u308b\u3055\u307e\u3056\u307e\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u767a\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u77ac\u9593\u306b\u5404Activity\u306b\u4f55\u304b\u3055\u305b\u305f\u3044\u3063\u3066\u30b1\u30fc\u30b9\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u306d\u3002\nBaseActivity\npublic class BaseActivity extends AppCompatActivity implements AuthEventsReceiver.Receivable {\n  private boolean isAuthorizationRequired = true;\n  private int userId;\n  private BroadcastReceiver broadcastReceiver;\n\n  // readable setter\n  public void allowGuestAccess() {\n    this.isAuthorizationRequired = false;\n  }\n  // define getter for isAuthorizationRequired\n\n  // define accessor for userId\n  // set null if the userId is a negative number\n\n  protected void onCreate(Bundle savedInstanceState) {\n    // \u7565\n\n    if (getIsAuhorizationRequired()) {\n        registerReceivers();\n        ensureAuthorized();\n    }\n  }\n\n  private void ensureAuthorized() {\n    setUserId(getDefaultSharedPreferences(this).getInt(USER_ID, -1));\n    if (getUserId == null) {\n      // do that what you want to do with unauthorized user\n    }\n  }\n\n  protected void logout() {\n    // ensure nullify the userId on the shared preferences\n\n    Intent broadcastIntent = new Intent();\n    broadcastIntent.setAction(AuthEventsReceiver.ACTION_LOGOUT);\n    sendBroadcast(broadcastIntent);\n\n    startLoginActivity();\n  }\n\n  @Override\n  protected void onLogout() {\n    finish();\n  }\n\n  protected void startLoginActivity() {\n    // start your activity\n  }\n\n  private void registerReceivers() {\n      IntentFilter intentFilter = new IntentFilter(AuthEventsReceiver.ACTION_LOGOUT);\n      broadcastReceiver = new AuthEventsReceiver(this);\n      registerReceiver(broadcastReceiver, intentFilter);\n  }\n\n  @Override\n  protected void onDestroy() {\n      super.onDestroy();\n      unregisterReceiver(broadcastReceiver);\n  }\n}\n\npublic class AuthEventsReceiver extends BroadCastReceiver {\n  public static final String ACTION_LOGOUT = \"com.example.sozu.hoge.action_logout\";\n  private Activity activity;\n\n  public AuthEventsReceiver(Activity activity) { this.activity = activity; }\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    try {\n      AuthReceiver receiver = (Receivable) activity;\n      switch (intent.getAction()) {\n        case ACTION_LOGOUT:\n          receivable.onLogout();\n          break;\n        case default:\n          break;\n      }\n    } catch (ClassCastException e) {\n      throw new ClassCastException(\"Activity must implement AuthEventsReceiver.AuthReceivable\");\n    }\n  }\n\n  public interface Receivable {\n    void onLogout();\n  }\n}\n\n\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044Activity\u306e\u5b9f\u88c5\u3068\u30ed\u30b0\u30a2\u30a6\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u8a66\u884c\u932f\u8aa4\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\u524d\u63d0\u3068\u3057\u3066Activity\u306e\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u90fd\u5ea6\u7834\u68c4\u30fb\u751f\u6210\u3092\u3059\u308b\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3067\u3059\u3002\n\n# \u30ed\u30b0\u30a4\u30f3\u72b6\u614b\u306e\u5b9a\u7fa9\n\n- SharedPreference\u306buserId\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b (\u307e\u305f\u306fAccessToken)\n\n# \u5b9f\u88c5\n\nAppCompatActivity\u3092\u7d99\u627f\u3057\u305fBaseActivity\u3092\u4f5c\u6210\u3057\u3001\u5229\u7528\u3059\u308bActivity\u306f\u5168\u3066BaseActivity\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\n\nBaseActivity\u306f\u305d\u306eActivity\u304c\u8a8d\u8a3c\u304c\u5fc5\u8981\u304b\u3069\u3046\u304b\u3092\u6c7a\u3081\u308b\u30d5\u30e9\u30b0 (isAuthorizationRequired) \u3092\u6301\u3061\u307e\u3059\u3002\u5b50Activity\u306f `#allowGuestAccess` \u3092\u547c\u3076\u3053\u3068\u306b\u3088\u308a\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\u3092\u8a31\u53ef\u3067\u304d\u307e\u3059\u3002\n\n\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u305d\u306e\u30d5\u30e9\u30b0\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u30ed\u30b0\u30a2\u30a6\u30c8\u51e6\u7406\u306f\u3001Intent\u3092Broadcast\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u4f7f\u3044\u307e\u3059\u3002BaseActivity\u306e `#logout` \u3092\u5b9f\u884c\u3059\u308b\u3068\u5168\u4f53\u306b \"\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3088\" \u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u884c\u3057\u3001\u5b58\u5728\u3059\u308bActivity\u306f\u305d\u308c\u3092\u53d7\u3051 (Activity\u306f\u3059\u3079\u3066BaseActivity\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3089\u30ec\u30b7\u30fc\u30d6\u3067\u304d\u308b\uff09 \u81ea\u8eab\u306e\u751f\u547d\u3092\u7d76\u3061\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u306b\u95a2\u3059\u308b\u3055\u307e\u3056\u307e\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u767a\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u77ac\u9593\u306b\u5404Activity\u306b\u4f55\u304b\u3055\u305b\u305f\u3044\u3063\u3066\u30b1\u30fc\u30b9\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u306d\u3002\n\nBaseActivity\n\n```java\npublic class BaseActivity extends AppCompatActivity implements AuthEventsReceiver.Receivable {\n  private boolean isAuthorizationRequired = true;\n  private int userId;\n  private BroadcastReceiver broadcastReceiver;\n\n  // readable setter\n  public void allowGuestAccess() {\n    this.isAuthorizationRequired = false;\n  }\n  // define getter for isAuthorizationRequired\n\n  // define accessor for userId\n  // set null if the userId is a negative number\n\n  protected void onCreate(Bundle savedInstanceState) {\n    // \u7565\n\n    if (getIsAuhorizationRequired()) {\n        registerReceivers();\n        ensureAuthorized();\n    }\n  }\n\n  private void ensureAuthorized() {\n    setUserId(getDefaultSharedPreferences(this).getInt(USER_ID, -1));\n    if (getUserId == null) {\n      // do that what you want to do with unauthorized user\n    }\n  }\n\n  protected void logout() {\n    // ensure nullify the userId on the shared preferences\n    \n    Intent broadcastIntent = new Intent();\n    broadcastIntent.setAction(AuthEventsReceiver.ACTION_LOGOUT);\n    sendBroadcast(broadcastIntent);\n\n    startLoginActivity();\n  }\n\n  @Override\n  protected void onLogout() {\n    finish();\n  }\n\n  protected void startLoginActivity() {\n    // start your activity\n  }\n\n  private void registerReceivers() {\n      IntentFilter intentFilter = new IntentFilter(AuthEventsReceiver.ACTION_LOGOUT);\n      broadcastReceiver = new AuthEventsReceiver(this);\n      registerReceiver(broadcastReceiver, intentFilter);\n  }\n\n  @Override\n  protected void onDestroy() {\n      super.onDestroy();\n      unregisterReceiver(broadcastReceiver);\n  }\n}\n\npublic class AuthEventsReceiver extends BroadCastReceiver {\n  public static final String ACTION_LOGOUT = \"com.example.sozu.hoge.action_logout\";\n  private Activity activity;\n  \n  public AuthEventsReceiver(Activity activity) { this.activity = activity; }\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    try {\n      AuthReceiver receiver = (Receivable) activity;\n      switch (intent.getAction()) {\n        case ACTION_LOGOUT:\n          receivable.onLogout();\n          break;\n        case default:\n          break;\n      }\n    } catch (ClassCastException e) {\n      throw new ClassCastException(\"Activity must implement AuthEventsReceiver.AuthReceivable\");\n    }\n  }\n\n  public interface Receivable {\n    void onLogout();\n  }\n}\n```\n\n", "tags": ["android\u958b\u767a", "Android"]}