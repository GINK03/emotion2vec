{"context": " More than 1 year has passed since last update.\u5927\u304d\u306a\u753b\u50cf\u3092\u9078\u3093\u3067Canvas\u3067\u7e2e\u5c0f\u3059\u308b\u3068\u3001\u4e0b\u306e\u65b9\u304c\u771f\u3063\u9ed2\u306b\u306a\u3063\u3066\u3042\u308c\u3042\u308c\uff1f\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3068\u601d\u3046\u3002\n\u203b\u30b3\u30e1\u30f3\u30c8\u6234\u3044\u305f\u5185\u5bb9\u304b\u3089\u3001\u4e0b\u8a18\u306e\u8a71\u984c\u3078\u7d9a\u304f\u3002\nhttp://qiita.com/ms2sato/items/d1e6a58b23af41e0090a\niOS6\u304b\u3089\u306e\u30d0\u30b0\u306e\u69d8\u5b50\u3002\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3059\u3079\u3057\u3002\nhttp://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n\u30b3\u30fc\u30c9\u4fdd\u5168\u306e\u305f\u3081\u4e00\u5fdc\u8ee2\u8f09\u3002\n/**\n * Detecting vertical squash in loaded image.\n * Fixes a bug which squash image vertically while drawing into canvas for some images.\n * This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel\n * \n */\nfunction detectVerticalSquash(img) {\n    var iw = img.naturalWidth, ih = img.naturalHeight;\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = ih;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    var data = ctx.getImageData(0, 0, 1, ih).data;\n    // search image edge pixel position in case it is squashed vertically.\n    var sy = 0;\n    var ey = ih;\n    var py = ih;\n    while (py > sy) {\n        var alpha = data[(py - 1) * 4 + 3];\n        if (alpha === 0) {\n            ey = py;\n        } else {\n            sy = py;\n        }\n        py = (ey + sy) >> 1;\n    }\n    var ratio = (py / ih);\n    return (ratio===0)?1:ratio;\n}\n\n/**\n * A replacement for context.drawImage\n * (args are for source and destination).\n */\nfunction drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var vertSquashRatio = detectVerticalSquash(img);\n    ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n}\n\n\u4e0a\u8a18\u3092\u3069\u3053\u304b\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3002\n    //context.drawImage(img, 0, 0, canvaswidth, canvasheight); //\u3053\u308c\u306f\u30c0\u30e1\u3060\u3063\u305f\n    drawImageIOSFix(context, img, 0, 0, width, height, 0, 0, canvaswidth, canvasheight);\n\n\u5927\u304d\u306a\u753b\u50cf\u3092\u9078\u3093\u3067Canvas\u3067\u7e2e\u5c0f\u3059\u308b\u3068\u3001\u4e0b\u306e\u65b9\u304c\u771f\u3063\u9ed2\u306b\u306a\u3063\u3066\u3042\u308c\u3042\u308c\uff1f\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3068\u601d\u3046\u3002\n\n\u203b\u30b3\u30e1\u30f3\u30c8\u6234\u3044\u305f\u5185\u5bb9\u304b\u3089\u3001\u4e0b\u8a18\u306e\u8a71\u984c\u3078\u7d9a\u304f\u3002\nhttp://qiita.com/ms2sato/items/d1e6a58b23af41e0090a\n\n\niOS6\u304b\u3089\u306e\u30d0\u30b0\u306e\u69d8\u5b50\u3002\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3059\u3079\u3057\u3002\nhttp://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\n\n\u30b3\u30fc\u30c9\u4fdd\u5168\u306e\u305f\u3081\u4e00\u5fdc\u8ee2\u8f09\u3002\n\n```js\n/**\n * Detecting vertical squash in loaded image.\n * Fixes a bug which squash image vertically while drawing into canvas for some images.\n * This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel\n * \n */\nfunction detectVerticalSquash(img) {\n    var iw = img.naturalWidth, ih = img.naturalHeight;\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = ih;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    var data = ctx.getImageData(0, 0, 1, ih).data;\n    // search image edge pixel position in case it is squashed vertically.\n    var sy = 0;\n    var ey = ih;\n    var py = ih;\n    while (py > sy) {\n        var alpha = data[(py - 1) * 4 + 3];\n        if (alpha === 0) {\n            ey = py;\n        } else {\n            sy = py;\n        }\n        py = (ey + sy) >> 1;\n    }\n    var ratio = (py / ih);\n    return (ratio===0)?1:ratio;\n}\n\n/**\n * A replacement for context.drawImage\n * (args are for source and destination).\n */\nfunction drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var vertSquashRatio = detectVerticalSquash(img);\n    ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n}\n```\n\n\u4e0a\u8a18\u3092\u3069\u3053\u304b\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3002\n\n```js\n    //context.drawImage(img, 0, 0, canvaswidth, canvasheight); //\u3053\u308c\u306f\u30c0\u30e1\u3060\u3063\u305f\n    drawImageIOSFix(context, img, 0, 0, width, height, 0, 0, canvaswidth, canvasheight);\n```\n", "tags": ["HTML5", "canvas", "iPhone"]}