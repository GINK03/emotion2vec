{"context": "\u8907\u6570\u306e\u5b9b\u5148\u306bping\u9001\u4fe1\u3057\u3066\u30019\u5272NG\u3060\u3063\u305f\u3068\u304d\u306b\u30a8\u30e9\u30fc\u3068\u5224\u5b9a\u3057\u3066\u30e1\u30fc\u30eb\u9001\u4fe1\uff08Gmail)\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u56de\u6570\u9023\u7d9a\u3057\u3066ping\u304cOK\u3060\u3063\u305f\u3089\u5fa9\u65e7\u5224\u5b9a\u3057\u307e\u3059\u3002\n\u6700\u521d\u306e\u30bd\u30fc\u30b9\u306f\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3057\u3066\u307e\u3059\u304c\u3001\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u306a\u305c\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u3044\u307e\u3044\u3061\u308f\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30d0\u30b0\u304c\u78ba\u5b9f\u306b\u3042\u308b\u306e\u3067\u8aa4\u3063\u305f\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\u5f8c\u534a\u306b\u30d0\u30b0\u304c\u306a\u3044\u306f\u305a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001\u5f8c\u534a\u3067\u306f\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3057\u307e\u3059\u30022016/12/29\u4fee\u6b63\uff1a\u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u5f8c\u534a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30bd\u30fc\u30b9\u306e\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u8a73\u7d30\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u5fa1\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u305d\u308c\u3067\u306f\u8aa4\u3063\u305f\u30bd\u30fc\u30b9\u306e\u89e3\u8aac\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001import\u3067\u3059\u3002\nimport pandas as pd\nimport smtplib\nimport os, platform\nimport threading\n\n\u6b21\u306b\u3001Gmail\u9001\u4fe1\u306e\u95a2\u6570\u3067\u3059\u3002Gmail\u9001\u4fe1\u3059\u308b\u3068\u304d\u306b\u306f\u3001POP\u30a2\u30af\u30bb\u30b9\u3092\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u6709\u52b9\u306b\u3057\u3066\u3001\u5b89\u5168\u6027\u306e\u4f4e\u3044\u30a2\u30d7\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u3082\u8a31\u53ef\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u691c\u7d22\u3059\u308b\u3068\u3001GUI\u753b\u9762\u3082\u6dfb\u4ed8\u3057\u305f\u89aa\u5207\u306a\u89e3\u8aac\u304c\u898b\u3064\u304b\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u304a\u307e\u304b\u305b\u3057\u307e\u3059\u3002\ndef sendGmail(text):\n    user = '****@gmail.com'  # username\n    password = '******'  # password\n    to = ['****@gmail.com'] # your favorite mail address\n    sub = 'mail title'\n    msg = '''From: %s\\nTo: %s\\nSubject: %s\\n\\n%s\n    ''' % (user, ','.join(to), sub, text)\n\n    server = smtplib.SMTP_SSL(\"smtp.gmail.com\", 465)\n    server.ehlo()\n    server.login(user, password)\n    server.sendmail(user, to, msg)\n    server.close()\n\n\u6b21\u306b\u3001ping\u9001\u4fe1\u306e\u95a2\u6570\u3067\u3059\u3002log\u306fDataFrame\u3067\u3059\u3002\u5225\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u6163\u308c\u3066\u3044\u308b\u306e\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002ping\u306e\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306b\u3001\u305f\u304f\u3055\u3093\u306e\u5f15\u6570\u304c\u3042\u3063\u3066\u3001\u3053\u3053\u304c\u6c5a\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\ndef ping(address, current_position, log):\n    ping_str = '-n 1' if platform.system().lower() == 'windows' else '-c 1'\n    response = os.system('ping ' + ping_str + ' ' + address)\n\n    if response == 1:\n        log[address][current_position] = 1\n\n\u6b21\u306bmain\u95a2\u6570\u3067\u3059\u3002\n\u9806\u6b21\u3001log\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3001ping\u306e\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u3093\u3067\u3044\u3063\u3066\u3001\u90fd\u5ea6\u3001\u6700\u65b0\u306e\u30ed\u30b0\u304b\u3089700\u500b\u3055\u304b\u306e\u307c\u3063\u305f\u3068\u304d\u3001600\u500b\u4ee5\u4e0aping\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001\u30e1\u30fc\u30eb\u304c\u98db\u3076\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nif __name__ == '__main__':\n\n    domain_list = ['***address***'] # your favorite address\n\n    log = pd.DataFrame(0, index=range(60 * 60), columns=domain_list)\n    #\u3068\u308a\u3042\u3048\u305a\u3001\u5927\u304d\u3081\u306eDataFrame\u3092\u4f5c\u6210\u3002\n    current_position = 0\n    sum_of_seconds = 0\n\n    sendGmail('tool has started.')\n\n    while True:\n        text = []\n        for address in domain_list:\n            p = threading.Thread(target=ping, args=(address, current_position, log))\n            p.start()\n\n            sum_error = 0\n\n            for i in range(700):#\u3053\u3053\u304c\u975e\u52b9\u7387\u3068\u611f\u3058\u308b\n                 sum_error += log.ix[current_position - i if current_position >= i else 60 * 15 - (i - current_position), address]\n\n            if sum_error > 600:\n                text.append(address)\n\n        if (sum_of_seconds % 600 == 0) and (text != []):\n            sendGmail(text)\n\n        current_position += 1\n        if current_position >= 60 * 15:\n            current_position = 0\n\n        sum_of_seconds += 1\n        time.sleep(1)\n\n\n\u4e0a\u306e\u30bd\u30fc\u30b9\u3092\u66f8\u3044\u305f\u6b21\u306e\u65e5\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u307b\u3046\u304c\u3088\u3044\u3060\u308d\u3046\u3068\u601d\u3044\u3001\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002dict\u578b\u304c\u306f\u3058\u3081\u3066\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u307e\u305a\u3001Gmail\u9001\u4fe1\u90e8\u5206\u306f\u540c\u3058\u3067\u3059\u3002\n\u6b21\u306b\u3001Ping\u9001\u4fe1\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6539\u3081\u307e\u3057\u305f\u3002\nimport multiprocessing as mp\n\ndef ping(address, result):\n ping_str = '-n 1' if platform.system().lower() == 'windows' else '-c 1'\n response = subprocess.call('ping '+ ping_str + ' '+address)\n\n if response = 1:\n  result[address] = 1\n else:\n  result[address] = 0\n\nresult\u306f\u3001dict\u578b\u3067\u3059\u3002\u3042\u3068\u3067\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3057\u307e\u3059\u3002\nping\u306f\u3001os.system\u3059\u308b\u3088\u308a\u3001subprocess.call\u304c\u826f\u3044\u305d\u3046\u306a\u306e\u3067\u3001\u7406\u89e3\u305b\u305a\u306b\u3001\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b\u3001main\u95a2\u6570\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\nif __name__ == '__main__':\n    manager = mp.Manager()\n\n    current_position = 0\n    bottom = 60*60\n    evaluate_range = 5 # x5\n    recover_range = 2 #10\n    evaluate_ratio = 0.9\n    before_result = pd.Series()\n    act_num = 0\n\n    domain_list = ['***', '****']\n\n    log = pd.DataFrame(0, index=range(bottom), columns=domain_list)\n    #ping\u5b9f\u884c\u3057\u305f\u3042\u3068\u306e\u3001\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308bDataFrame\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n    while True:\n        proc = [] #\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u305f\u3081\n        result = manager.dict() #\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u5171\u6709\u3059\u308bdict\u3092\u5b9a\u7fa9\n        for address in domain_list:\n            p1 = mp.Process(target=ping, args=(address, result,))\n            proc.append(p1)\n\n        for p1 in proc:\n            p1.start()\n\n        for p1 in proc:\n            p1.join()\n\n        #dict\u578bresult\u304b\u3089\u3001DataFrame\u306elog\u306bping\u306e\u7d50\u679c\u3092\u30b3\u30d4\u30fc\u3002\n        for address in domain_list:\n            log.ix[current_position, address] = result[address]\n\n       #log\u306f\u3050\u308b\u3050\u308b\u56de\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u308b\u306e\u3067\u3001\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308bcurrent position\u306e\n       #\u5024\u306b\u5fdc\u3058\u3066\u3001dataframe.sum()\u3067\u96c6\u8a08\u3059\u308b\u7bc4\u56f2\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n        value = log.ix[current_position-evaluate_range:current_position, :].sum() if current_position >= evaluate_range else \\\n            log.ix[0:current_position, :].sum() + log.ix[bottom-(evaluate_range-current_position):bottom,:].sum()\n\n        #ping OK\u6642\u306e\u5224\u5b9a\u3092\u65e9\u3081\u306b\u53cd\u6620\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u4e0a\u306evalue\u3068\u540c\u69d8\u306b\u3001\u5c11\u3057\u30c1\u30a7\u30c3\u30af\u30ec\u30f3\u30b8\u306e\u77ed\u3044recover_value\u3092\u8a08\u7b97\n       recover_value = log.ix[current_position-recover_range:current_position, :].sum() if current_position >= recover_range else \\\n            log.ix[0:current_position, :].sum() + log.ix[bottom-(recover_range-current_position):bottom,:].sum()\n        result = value[(value > evaluate_range*evaluate_ratio) & (recover_value != 0)]\n\n        #\u901a\u77e5\u30e1\u30fc\u30eb\u304c\u98db\u3073\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u3001result\u304c\u5909\u5316\u3057\u305f\u3068\u304d\u306b\u3060\u3051sendGmail\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n        #ping NG\u306e\u56de\u6570\u306e\u8a73\u7d30\u306f\u898b\u306a\u3044\u8a2d\u8a08\u306a\u306e\u3067\u3001index\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n        #.difference()\u306f\u3001\u53cc\u65b9\u5411\u3067diff\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001or\u3067\u7247\u65b9\u5411\u30c1\u30a7\u30c3\u30af\u3092\u3064\u306a\u3044\u3067\u3044\u307e\u3059\u3002\n        if not pd.Series().index.equals(result.index.difference(before_result.index)) or not pd.Series().index.equals(before_result.index.difference(result.index)):\n            if result.size != 0:\n                sendGmail(result.index.str.cat(sep='\\n'))\n                before_result = result\n            else:\n                sendGmail('All server are normally operating.')\n                before_result = result\n\n        current_position += 1\n        if current_position > bottom:\n            current_position = 0\n        time.sleep(1)\n\nlog\u306e\u96c6\u8a08\u306f\u4f7f\u3044\u6163\u308c\u305fpandas\u304c\u3088\u3044\u306e\u3067\u3001pandas\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u305f\u3081\u306b\u306f\u3001\u306a\u3093\u3089\u304b\u306e\u5171\u6709\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u3001result = manager.dict()\u3057\u3066\u3001ping\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u8907\u6570\u306e\u5b9b\u5148\u306bping\u9001\u4fe1\u3057\u3066\u30019\u5272NG\u3060\u3063\u305f\u3068\u304d\u306b\u30a8\u30e9\u30fc\u3068\u5224\u5b9a\u3057\u3066\u30e1\u30fc\u30eb\u9001\u4fe1\uff08Gmail)\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u56de\u6570\u9023\u7d9a\u3057\u3066ping\u304cOK\u3060\u3063\u305f\u3089\u5fa9\u65e7\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n\n\u6700\u521d\u306e\u30bd\u30fc\u30b9\u306f\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3057\u3066\u307e\u3059\u304c\u3001\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u306a\u305c\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u3044\u307e\u3044\u3061\u308f\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30d0\u30b0\u304c\u78ba\u5b9f\u306b\u3042\u308b\u306e\u3067\u8aa4\u3063\u305f\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\n\u5f8c\u534a\u306b\u30d0\u30b0\u304c\u306a\u3044\u306f\u305a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001\u5f8c\u534a\u3067\u306f\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3057\u307e\u3059\u30022016/12/29\u4fee\u6b63\uff1a\u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u5f8c\u534a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30bd\u30fc\u30b9\u306e\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u8a73\u7d30\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u5fa1\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u305d\u308c\u3067\u306f\u8aa4\u3063\u305f\u30bd\u30fc\u30b9\u306e\u89e3\u8aac\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001import\u3067\u3059\u3002\n\n\n```.py\nimport pandas as pd\nimport smtplib\nimport os, platform\nimport threading\n```\n\n\n\u6b21\u306b\u3001Gmail\u9001\u4fe1\u306e\u95a2\u6570\u3067\u3059\u3002Gmail\u9001\u4fe1\u3059\u308b\u3068\u304d\u306b\u306f\u3001POP\u30a2\u30af\u30bb\u30b9\u3092\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u6709\u52b9\u306b\u3057\u3066\u3001\u5b89\u5168\u6027\u306e\u4f4e\u3044\u30a2\u30d7\u30ea\u306e\u30a2\u30af\u30bb\u30b9\u3082\u8a31\u53ef\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u691c\u7d22\u3059\u308b\u3068\u3001GUI\u753b\u9762\u3082\u6dfb\u4ed8\u3057\u305f\u89aa\u5207\u306a\u89e3\u8aac\u304c\u898b\u3064\u304b\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u304a\u307e\u304b\u305b\u3057\u307e\u3059\u3002\n\n```.py\ndef sendGmail(text):\n    user = '****@gmail.com'  # username\n    password = '******'  # password\n    to = ['****@gmail.com'] # your favorite mail address\n    sub = 'mail title'\n    msg = '''From: %s\\nTo: %s\\nSubject: %s\\n\\n%s\n    ''' % (user, ','.join(to), sub, text)\n\n    server = smtplib.SMTP_SSL(\"smtp.gmail.com\", 465)\n    server.ehlo()\n    server.login(user, password)\n    server.sendmail(user, to, msg)\n    server.close()\n```\n\n\n\u6b21\u306b\u3001ping\u9001\u4fe1\u306e\u95a2\u6570\u3067\u3059\u3002log\u306fDataFrame\u3067\u3059\u3002\u5225\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u6163\u308c\u3066\u3044\u308b\u306e\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002ping\u306e\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306b\u3001\u305f\u304f\u3055\u3093\u306e\u5f15\u6570\u304c\u3042\u3063\u3066\u3001\u3053\u3053\u304c\u6c5a\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n\n```.py\ndef ping(address, current_position, log):\n    ping_str = '-n 1' if platform.system().lower() == 'windows' else '-c 1'\n    response = os.system('ping ' + ping_str + ' ' + address)\n\n    if response == 1:\n        log[address][current_position] = 1\n```\n\n\n\u6b21\u306bmain\u95a2\u6570\u3067\u3059\u3002\n\u9806\u6b21\u3001log\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3001ping\u306e\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u3093\u3067\u3044\u3063\u3066\u3001\u90fd\u5ea6\u3001\u6700\u65b0\u306e\u30ed\u30b0\u304b\u3089700\u500b\u3055\u304b\u306e\u307c\u3063\u305f\u3068\u304d\u3001600\u500b\u4ee5\u4e0aping\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001\u30e1\u30fc\u30eb\u304c\u98db\u3076\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```.py\nif __name__ == '__main__':\n\n    domain_list = ['***address***'] # your favorite address\n\n    log = pd.DataFrame(0, index=range(60 * 60), columns=domain_list)\n    #\u3068\u308a\u3042\u3048\u305a\u3001\u5927\u304d\u3081\u306eDataFrame\u3092\u4f5c\u6210\u3002\n    current_position = 0\n    sum_of_seconds = 0\n\n    sendGmail('tool has started.')\n\n    while True:\n        text = []\n        for address in domain_list:\n            p = threading.Thread(target=ping, args=(address, current_position, log))\n            p.start()\n\n            sum_error = 0\n\n            for i in range(700):#\u3053\u3053\u304c\u975e\u52b9\u7387\u3068\u611f\u3058\u308b\n                 sum_error += log.ix[current_position - i if current_position >= i else 60 * 15 - (i - current_position), address]\n\n            if sum_error > 600:\n                text.append(address)\n\n        if (sum_of_seconds % 600 == 0) and (text != []):\n            sendGmail(text)\n\n        current_position += 1\n        if current_position >= 60 * 15:\n            current_position = 0\n\n        sum_of_seconds += 1\n        time.sleep(1)\n\n```\n\n\u4e0a\u306e\u30bd\u30fc\u30b9\u3092\u66f8\u3044\u305f\u6b21\u306e\u65e5\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u307b\u3046\u304c\u3088\u3044\u3060\u308d\u3046\u3068\u601d\u3044\u3001\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002dict\u578b\u304c\u306f\u3058\u3081\u3066\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u3001Gmail\u9001\u4fe1\u90e8\u5206\u306f\u540c\u3058\u3067\u3059\u3002\n\u6b21\u306b\u3001Ping\u9001\u4fe1\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6539\u3081\u307e\u3057\u305f\u3002\n\n```.py\nimport multiprocessing as mp\n\ndef ping(address, result):\n ping_str = '-n 1' if platform.system().lower() == 'windows' else '-c 1'\n response = subprocess.call('ping '+ ping_str + ' '+address)\n\n if response = 1:\n  result[address] = 1\n else:\n  result[address] = 0\n```\nresult\u306f\u3001dict\u578b\u3067\u3059\u3002\u3042\u3068\u3067\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3057\u307e\u3059\u3002\nping\u306f\u3001os.system\u3059\u308b\u3088\u308a\u3001subprocess.call\u304c\u826f\u3044\u305d\u3046\u306a\u306e\u3067\u3001\u7406\u89e3\u305b\u305a\u306b\u3001\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306b\u3001main\u95a2\u6570\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```.py\nif __name__ == '__main__':\n    manager = mp.Manager()\n \n    current_position = 0\n    bottom = 60*60\n    evaluate_range = 5 # x5\n    recover_range = 2 #10\n    evaluate_ratio = 0.9\n    before_result = pd.Series()\n    act_num = 0\n \n    domain_list = ['***', '****']\n \n    log = pd.DataFrame(0, index=range(bottom), columns=domain_list)\n    #ping\u5b9f\u884c\u3057\u305f\u3042\u3068\u306e\u3001\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308bDataFrame\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n \n    while True:\n        proc = [] #\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u305f\u3081\n        result = manager.dict() #\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u5171\u6709\u3059\u308bdict\u3092\u5b9a\u7fa9\n        for address in domain_list:\n            p1 = mp.Process(target=ping, args=(address, result,))\n            proc.append(p1)\n \n        for p1 in proc:\n            p1.start()\n \n        for p1 in proc:\n            p1.join()\n \n        #dict\u578bresult\u304b\u3089\u3001DataFrame\u306elog\u306bping\u306e\u7d50\u679c\u3092\u30b3\u30d4\u30fc\u3002\n        for address in domain_list:\n            log.ix[current_position, address] = result[address]\n\n       #log\u306f\u3050\u308b\u3050\u308b\u56de\u3057\u3066\u4f7f\u3044\u7d9a\u3051\u308b\u306e\u3067\u3001\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308bcurrent position\u306e\n       #\u5024\u306b\u5fdc\u3058\u3066\u3001dataframe.sum()\u3067\u96c6\u8a08\u3059\u308b\u7bc4\u56f2\u3092\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n        value = log.ix[current_position-evaluate_range:current_position, :].sum() if current_position >= evaluate_range else \\\n            log.ix[0:current_position, :].sum() + log.ix[bottom-(evaluate_range-current_position):bottom,:].sum()\n\n        #ping OK\u6642\u306e\u5224\u5b9a\u3092\u65e9\u3081\u306b\u53cd\u6620\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u4e0a\u306evalue\u3068\u540c\u69d8\u306b\u3001\u5c11\u3057\u30c1\u30a7\u30c3\u30af\u30ec\u30f3\u30b8\u306e\u77ed\u3044recover_value\u3092\u8a08\u7b97\n       recover_value = log.ix[current_position-recover_range:current_position, :].sum() if current_position >= recover_range else \\\n            log.ix[0:current_position, :].sum() + log.ix[bottom-(recover_range-current_position):bottom,:].sum()\n        result = value[(value > evaluate_range*evaluate_ratio) & (recover_value != 0)]\n\n        #\u901a\u77e5\u30e1\u30fc\u30eb\u304c\u98db\u3073\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u3001result\u304c\u5909\u5316\u3057\u305f\u3068\u304d\u306b\u3060\u3051sendGmail\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n        #ping NG\u306e\u56de\u6570\u306e\u8a73\u7d30\u306f\u898b\u306a\u3044\u8a2d\u8a08\u306a\u306e\u3067\u3001index\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u3002\n        #.difference()\u306f\u3001\u53cc\u65b9\u5411\u3067diff\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001or\u3067\u7247\u65b9\u5411\u30c1\u30a7\u30c3\u30af\u3092\u3064\u306a\u3044\u3067\u3044\u307e\u3059\u3002\n        if not pd.Series().index.equals(result.index.difference(before_result.index)) or not pd.Series().index.equals(before_result.index.difference(result.index)):\n            if result.size != 0:\n                sendGmail(result.index.str.cat(sep='\\n'))\n                before_result = result\n            else:\n                sendGmail('All server are normally operating.')\n                before_result = result\n \n        current_position += 1\n        if current_position > bottom:\n            current_position = 0\n        time.sleep(1)\n```\n\n\nlog\u306e\u96c6\u8a08\u306f\u4f7f\u3044\u6163\u308c\u305fpandas\u304c\u3088\u3044\u306e\u3067\u3001pandas\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306e\u305f\u3081\u306b\u306f\u3001\u306a\u3093\u3089\u304b\u306e\u5171\u6709\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u3001result = manager.dict()\u3057\u3066\u3001ping\u95a2\u6570\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n", "tags": ["ping", "\u6b7b\u6d3b\u76e3\u8996", "gmail", "Python"]}