{"context": "\n\n\u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001Stream\u901a\u4fe1\u306b\u3066\u5c11\u3057\u305a\u3064HTML\u3092\u9001\u4fe1\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306fPreset\u306b\u3066\u5c11\u3057\u305a\u3064Response\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nCowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\nCowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n1.0.4\n\n\n\n\ncowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n2.0.0-pre4\n\n\n\n\nPreset \u306b\u3088\u308b response\u306e\u8a2d\u5b9a\n\u4eca\u56de\u306fPreset\u3001\u3064\u307e\u308aHeader\u3084Body\u306a\u3069\u306e\u60c5\u5831\u30921\u3064\u305a\u3064\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u3001\u6700\u7d42\u7684\u306breplay\u306b\u3066\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n\n\n\nlib/elixir_cowboy_example/preset_response_handler.ex\ndefmodule ElixirCowboyExample.PresetResponseHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n\n    IO.inspect req\n\n    # Header\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    req = :cowboy_req.set_resp_header(\"allow\", \"GET\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # body\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\n    req = :cowboy_req.set_resp_body(\"Hello world!\", req)\n\n    # \u4e0a\u3068\u306f\u9055\u3044\u3001Function\u306b\u3066Body\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f\u4e0b\u8a18\u304b\u3089\n#    body_fun = fn(socket, transport) ->\n#      transport.send(socket, \"Hello world!\")\n#    end\n#    req = :cowboy_req.set_resp_body_fun(12, body_fun, req)\n\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # \u8a2d\u5b9a\u3055\u308c\u305f\u60c5\u5831\u3092\u4e00\u62ec\u9001\u4fe1\n    :cowboy_req.reply(200, req)\n\n    {:ok, req, state}\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\ncowboy 2.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n\n\n\nlib/elixir_cowboy_example/preset_response_handler.ex\ndefmodule ElixirCowboyExample.PresetResponseHandler do\n  def init(req, opts) do\n\n    IO.inspect req\n\n    # Header\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    req = :cowboy_req.set_resp_header(\"allow\", \"GET\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # Body\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    # Cowboy2.0\u3067\u306f :cowboy_req.set_resp_body_fun \u3067\u306f\u3067\u304d\u306a\u3044\u6a21\u69d8\n    req = :cowboy_req.set_resp_body(\"Hello world!\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    :cowboy_req.reply(200, req)\n\n    {:ok, req, opts}\n  end\n\nend\n\n\n\n\u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a iex -S mix \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001http://localhost:4000/preset\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u753b\u9762\u304b\u3089\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001IO.inspect\u306b\u3066\u8868\u793a\u3055\u308c\u305f\u5185\u5bb9\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\nCowboy 1.0\u306e\u5834\u5408\n#\u53d7\u4fe1\u6642\u306ereq\u60c5\u5831\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [], \"\", :undefined}\n\n#Header\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u305f\u969b\u306ereq\u60c5\u5831\u3001[{\"allow\", \"PUT\"}]\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [{\"allow\", \"PUT\"}], \"\", :undefined}\n\n# \u6700\u7d42\u7684\u306b\u9001\u4fe1\u3055\u308c\u308b req\u60c5\u5831\u3001\"Hello world!\"\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [{\"allow\", \"GET\"}], \"Hello world!\", :undefined}\n\n\nCowboy 2.0\u306e\u5834\u5408\n#\u53d7\u4fe1\u6642\u306ereq\u60c5\u5831\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, scheme: \"http\", streamid: 1,\n  version: :\"HTTP/1.1\"}\n\n#Header\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u305f\u969b\u306ereq\u60c5\u5831\u3001resp_headers: %{\"allow\" => \"GET\"}\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, resp_headers: %{\"allow\" => \"GET\"},\n  scheme: \"http\", streamid: 1, version: :\"HTTP/1.1\"}\n\n# \u6700\u7d42\u7684\u306b\u9001\u4fe1\u3055\u308c\u308b req\u60c5\u5831\u3001resp_body: \"Hello world!\"\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, resp_body: \"Hello world!\",\n  resp_headers: %{\"allow\" => \"GET\"}, scheme: \"http\", streamid: 1,\n  version: :\"HTTP/1.1\"}\n\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u306fHeader\u60c5\u5831\u3084Body\u60c5\u5831\u30921\u3064\u305a\u3064\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\u30e1\u30bd\u30c3\u30c9\u5206\u3051\u306a\u3069\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4eca\u307e\u3067\u3068\u4f55\u304c\u9055\u3046\u306e\u304b\u3063\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3044\u304b\u304c\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nCowboy User Guide\nCowboy User Guide\n# \u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n[\u524d\u56de](http://qiita.com/hayabusa333/items/97ebfad8a38d132266ba)\u306e\u8a18\u4e8b\u3067\u306f\u3001Stream\u901a\u4fe1\u306b\u3066\u5c11\u3057\u305a\u3064HTML\u3092\u9001\u4fe1\u3057\u3066\u3044\u304f\u65b9\u6cd5\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306fPreset\u306b\u3066\u5c11\u3057\u305a\u3064Response\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n[Cowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/preset_response_cowboy)\n\n[Cowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/preset_response_cowboy_two_pre4)\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 1.0.4 |\n\n## cowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 2.0.0-pre4 |\n\n# Preset \u306b\u3088\u308b response\u306e\u8a2d\u5b9a\n\n\u4eca\u56de\u306fPreset\u3001\u3064\u307e\u308aHeader\u3084Body\u306a\u3069\u306e\u60c5\u5831\u30921\u3064\u305a\u3064\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u3001\u6700\u7d42\u7684\u306breplay\u306b\u3066\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n```\n\n``` elixir:lib/elixir_cowboy_example/preset_response_handler.ex\ndefmodule ElixirCowboyExample.PresetResponseHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n\n    IO.inspect req\n\n    # Header\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    req = :cowboy_req.set_resp_header(\"allow\", \"GET\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # body\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\n    req = :cowboy_req.set_resp_body(\"Hello world!\", req)\n\n    # \u4e0a\u3068\u306f\u9055\u3044\u3001Function\u306b\u3066Body\u306e\u60c5\u5831\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f\u4e0b\u8a18\u304b\u3089\n#    body_fun = fn(socket, transport) ->\n#      transport.send(socket, \"Hello world!\")\n#    end\n#    req = :cowboy_req.set_resp_body_fun(12, body_fun, req)\n\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # \u8a2d\u5b9a\u3055\u308c\u305f\u60c5\u5831\u3092\u4e00\u62ec\u9001\u4fe1\n    :cowboy_req.reply(200, req)\n\n    {:ok, req, state}\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n## cowboy 2.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n```\n\n``` elixir:lib/elixir_cowboy_example/preset_response_handler.ex\ndefmodule ElixirCowboyExample.PresetResponseHandler do\n  def init(req, opts) do\n\n    IO.inspect req\n\n    # Header\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    req = :cowboy_req.set_resp_header(\"allow\", \"GET\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    # Body\u60c5\u5831\u306e\u8a2d\u5b9a\u3092\u5b9f\u65bd\u3059\u308b\n    # Cowboy2.0\u3067\u306f :cowboy_req.set_resp_body_fun \u3067\u306f\u3067\u304d\u306a\u3044\u6a21\u69d8\n    req = :cowboy_req.set_resp_body(\"Hello world!\", req)\n    IO.puts \"----------------\"\n    IO.inspect req\n\n    :cowboy_req.reply(200, req)\n\n    {:ok, req, opts}\n  end\n\nend\n```\n\n# \u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a `iex -S mix` \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001`http://localhost:4000/preset`\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u753b\u9762\u304b\u3089\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001`IO.inspect`\u306b\u3066\u8868\u793a\u3055\u308c\u305f\u5185\u5bb9\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Cowboy 1.0\u306e\u5834\u5408\n\n```cmd\n#\u53d7\u4fe1\u6642\u306ereq\u60c5\u5831\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [], \"\", :undefined}\n\n#Header\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u305f\u969b\u306ereq\u60c5\u5831\u3001[{\"allow\", \"PUT\"}]\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [{\"allow\", \"PUT\"}], \"\", :undefined}\n\n# \u6700\u7d42\u7684\u306b\u9001\u4fe1\u3055\u308c\u308b req\u60c5\u5831\u3001\"Hello world!\"\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n [{\"connection\", [\"keep-alive\"]}], :undefined, [], :waiting, \"\", :undefined,\n false, :waiting, [{\"allow\", \"GET\"}], \"Hello world!\", :undefined}\n```\n\n# Cowboy 2.0\u306e\u5834\u5408\n\n```cmd\n#\u53d7\u4fe1\u6642\u306ereq\u60c5\u5831\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, scheme: \"http\", streamid: 1,\n  version: :\"HTTP/1.1\"}\n\n#Header\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u305f\u969b\u306ereq\u60c5\u5831\u3001resp_headers: %{\"allow\" => \"GET\"}\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, resp_headers: %{\"allow\" => \"GET\"},\n  scheme: \"http\", streamid: 1, version: :\"HTTP/1.1\"}\n\n# \u6700\u7d42\u7684\u306b\u9001\u4fe1\u3055\u308c\u308b req\u60c5\u5831\u3001resp_body: \"Hello world!\"\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\n----------------\n  path_info: :undefined, peer: {{127, 0, 0, 1}, 61335}, pid: #PID<0.254.0>,\n  port: 4000, qs: \"\", ref: :http, resp_body: \"Hello world!\",\n  resp_headers: %{\"allow\" => \"GET\"}, scheme: \"http\", streamid: 1,\n  version: :\"HTTP/1.1\"}\n```\n\n# \u6700\u5f8c\u306b\n\n\u4eca\u56de\u306fHeader\u60c5\u5831\u3084Body\u60c5\u5831\u30921\u3064\u305a\u3064\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\u30e1\u30bd\u30c3\u30c9\u5206\u3051\u306a\u3069\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4eca\u307e\u3067\u3068\u4f55\u304c\u9055\u3046\u306e\u304b\u3063\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3044\u304b\u304c\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/1.0/guide/)\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/2.0/guide/)\n", "tags": ["Elixir", "cowboy"]}