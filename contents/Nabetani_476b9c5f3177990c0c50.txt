{"context": " More than 1 year has passed since last update.\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde01rotbk/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/4bf43031749c81c35526\n\u554f\u984c\u306f\u96e3\u3057\u304b\u3063\u305f\u6a21\u69d8\u3002\n\u3067\u3002\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3092\u4e8c\u4ef6\u3002\n\u203b \u4e00\u65b9\u306f\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u305f\u3051\u3069\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u5927\u534a\u306f\u7701\u7565\u3067\u3002\n\n\u77ed\u304f\u3066\u7c21\u5358\u3067\u9045\u3044\u5b9f\u88c5\n\u307e\u305a\u306f\u3001\u77ed\u304f\u3066\u7c21\u5358\u3067\u9045\u3044\u65b9\u3002\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u305f\u3051\u3069\u3002\n\nruby\ndef fill( w, a )\n  a.each.with_object( [nil]*(w*w) ) do |s,m|\n    y,x=(0..(w*w)).find{ |ix| !m[ix] }.divmod(w)\n    s.times do|dy|\n      m[(y+dy)*w+x,s]=[s]*s\n    end\n  end\nend\n\ndef bk(w,m)\n  0.upto(w-1).map{ |x|\n    (w-1).downto(0).map{ |y| m[x+y*w] }.uniq\n  }.inject([]) do |code,line|\n    code+line.chunk{ |c| code.flatten.include?(c) && :_separator }.map(&:last)\n  end\nend\n\ndef solve(src0)\n  bkcode=src0.split(\":\").last\n  gn=src0.split(\":\").first.to_i-1\n  w=bkcode.split(/[\\(\\)]/)[1].split(\",\").map(&:to_i).inject(&:+)\n  m=fill( w, bkcode.scan( /\\d+/ ).to_a .map(&:to_i))\n  \"(\"+bk(w,m)[gn].join(\",\")+\")\"\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split(/\\s+/)\n  actual=nil\n  actual = solve( src )\n  ok = actual==expected\n  puts( \"%d %s : %s / %s\" % [ num.to_i, (ok ? \"ok\" : \"**NG**\" ), actual, expected ] )\n  ok\n}.tap{ |x| puts( x.all? ? \"all ok\" : \"something wrong\" ) }\n\n__END__\n9 6:(240,168,187)(149,19)(206)(163,77)(86,82,58)(40,18)(22,202)(4,78)(192,61)(62)(48,13)(35,118)(83)  (4,82)\n0 4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)  (32,31)\n1 6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19) (6,17,2)\n\n\n\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u52aa\u529b\u3092\u5168\u7136\u3057\u3066\u306a\u3044\u3002\n\u7f8e\u3057\u304f\u306a\u3044\u3051\u3069\u300110\u79d2\u3050\u3089\u3044\u3067\u8a08\u7b97\u304c\u7d42\u308f\u308b\u306e\u3067\u3088\u3057\u3002\n\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306e\u3088\u3046\u306a\u5730\u56f3\u3092\u4f5c\u308b\n\u56de\u8ee2\u3059\u308b\n\u884c\u306e\u3042\u3064\u307e\u308a\u3092 uniq \u3059\u308b\n\u884c\u5185\u3092 chunk \u3059\u308b\n\n\u3067\u3001\u3060\u3044\u305f\u3044\u51fa\u6765\u4e0a\u304c\u308a\u3002\nruby \u306e chunk \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u4fbf\u5229\u3067\u3001\n\nruby\n[4, 3, 0, 2, 6, 7, 5, 9, 4, 6].chunk( &:odd? ).to_a\n#=> \"[[false, [4]], [true, [3]], [false, [0, 2, 6]], [true, [7, 5, 9]], [false, [4, 6]]]\"\n\n\n\u3068\u3044\u3046\u98a8\u306b\u3001\u6027\u8cea\u304c\u5909\u308f\u3089\u306a\u3044\u9593\u3092\u3072\u3068\u307e\u3068\u307e\u308a\u306b\u3057\u3066\u304f\u308c\u308b\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u300c :_separator \u3092\u8fd4\u3059\u3068\u914d\u5217\u304c\u4f5c\u3089\u308c\u306a\u3044\u300d\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u3063\u3066\u3001\n\nruby\n[1, 3, 0, 3, 6, 0, 5, 9, 4, 6].chunk{|x|x==0 ? :_separator : x.odd? }.to_a.inspect\n#=> \"[[true, [1, 3]], [true, [3]], [false, [6]], [true, [5, 9]], [false, [4, 6]]]\"\n[11]\n\n\n\u3068\u3001\u3044\u3089\u306a\u3044\u3082\u306e\u3092\u6368\u3066\u3066\u304f\u308c\u308b\u3002\u4eca\u56de\u306f\u767a\u898b\u6e08\u307f\u306e\u3082\u306e\u306f\u4e0d\u8981\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6368\u3066\u3066\u3044\u308b\u3002\n\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u52aa\u529b\u306f\u4e00\u5207\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u9045\u3044\u3057\u30e1\u30e2\u30ea\u3082\u305f\u304f\u3055\u3093\u4f7f\u3046\u3051\u3069\u3001\u4eca\u56de\u306e\u30cb\u30fc\u30ba\u306b\u306f\u3053\u308c\u3067\u5341\u5206\u3002\n\n\u6bd4\u8f03\u7684\u3061\u3083\u3093\u3068\u3057\u305f\u5b9f\u88c5\n\u6bd4\u8f03\u7684\u3061\u3083\u3093\u3068\u3057\u305f\u5b9f\u88c5\u306f\u4ee5\u4e0b\uff1a\n\nruby\nclass Sq < Struct.new(:x, :y, :s )\n  def r; x+s; end\n  def b; y+s; end\n  def rot; Sq.new( -b, x, s ); end\nend\n\ndef find_xy(sqs, len, y=0)\n  loop do\n    aty=sqs.select{ |sq| sq.y<=y && y<sq.b }\n    if aty.empty? || aty.map(&:s).inject(&:+)<len\n      x=0\n      aty.sort_by(&:x).each do |sq|\n        break unless x==sq.x\n        x=sq.r\n      end\n      return [x,y]\n    else\n      y=aty.map{ |sq| sq.b }.min\n    end\n  end\nend\n\ndef extract(src)\n  len=src.split(/[\\(\\)]/)[1].split(\",\").map(&:to_i).inject(&:+)\n  m=src.scan( /\\d+/ ).to_a .map(&:to_i)\n  m.each.with_object([]) do |s, sqs|\n    sqs.push(Sq.new(*find_xy(sqs,len),s))\n  end\nend\n\ndef bouwkamp(sqs)\n  sqs=sqs.sort_by{ |sq| [sq.y,sq.x] }\n  sqs.drop(1).each.with_object([[sqs.first]]) do |sq,g|\n    pre=g.last.last\n    if pre.y==sq.y && pre.r==sq.x\n      g.last.push sq\n    else\n      g.push [sq]\n    end\n  end\nend\n\ndef solve(src0)\n  num=src0.split(\":\")[0].to_i\n  src=src0.split(\":\")[1]\n  sqs = extract(src)\n  rotated=sqs.map{ |s| s.rot }\n  \"(\"+bouwkamp(rotated)[num-1].map{ |x| x.s }.join(\",\")+\")\"\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  ok = actual==expected\n  puts( \"%d %s : %s / %s\" % [ num.to_i, (ok ? \"ok\" : \"**NG**\" ), actual, expected ] )\n  ok\n}.tap{ |x| puts( x.all? ? \"all ok\" : \"something wrong\" ) }\n\n__END__\n0 4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)  (32,31)\n1 6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19) (6,17,2)\n2 7:(60,50)(23,27)(24,22,14)(7,16)(8,6)(12,15)(13)(2,28)(26)(4,21,3)(18)(17)  (4,16)\n\n\nfind_xy \u306e\u5b9f\u88c5\u304c\u306a\u304b\u306a\u304b\u3053\u308c\u4ee5\u4e0a\u7c21\u5358\u306b\u306a\u3089\u306a\u3044\u3002\n\u4e0d\u5341\u5206\u3060\u3068\u601d\u3046\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u8aac\u660e\u3057\u3066\u307f\u308b\u3002\n\u5168\u4f53\u3068\u3057\u3066\u306f\n\n\nextract \u3067\u3001bouwkamp code \u3092\u6b63\u65b9\u5f62\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3002\n\nSq#rot \u3067\u3001\u6b63\u65b9\u5f62\u3092\u56de\u8ee2\u3059\u308b\n\nbouwcamp \u3067\u3001\u6b63\u65b9\u5f62\u306e\u914d\u5217\u3092 bouwcamp code \u306b\u5909\u63db\u3059\u308b\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\u9762\u5012\u306a\u306e\u306f\u3001 extract \u5185\u306e find_xy \u3060\u3051\u3060\u3068\u601d\u3046\u306e\u3067\u305d\u3053\u306b\u7d5e\u308b\u3002\naty \u306f\u3001\u73fe\u5728\u306e y \u5ea7\u6a19\u306e\u5834\u6240\u306b\u3044\u308b\u6b63\u65b9\u5f62\u3002\naty \u306b\u3042\u308b\u6b63\u65b9\u5f62\u306e\u8fba\u306e\u9577\u3055\u306e\u5408\u8a08\u3092\u898b\u308b\u3068\u3001\u4f59\u767d\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u5206\u304b\u308b\u3002\n\u4f59\u767d\u304c\u3042\u308b\u5834\u5408\u3001x=0 \u304b\u3089\u9806\u306b\u4f59\u767d\u3092\u63a2\u3059\u3002\n\u3000\u3044\u307e\u6ce8\u76ee\u3057\u3066\u3044\u308b x \u306b\u6b63\u65b9\u5f62\u304c\u3042\u3063\u305f\u3089\u3001\u305d\u306e\u6b63\u65b9\u5f62\u306e\u53f3\u7aef\u306b\u6ce8\u76ee\u3059\u308b\n\u3000\u306a\u304b\u3063\u305f\u3089\u3001[x,y] \u304c\u3001\u6b63\u65b9\u5f62\u3092\u7f6e\u304f\u3079\u304d\u5834\u6240\u3002\n\u4f59\u767d\u304c\u306a\u3044\u5834\u5408\u3001aty \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u6b63\u65b9\u5f62\u306e\u4e0b\u7aef\u304c\u306e\u6700\u5c0f\u5024\u3092\u65b0\u305f\u306a y \u306b\u3057\u3066\u3001\u3082\u3046\u4e00\u56de\u3002\n\u3068\u3044\u3046\u611f\u3058\u3002  \n\u554f\u984c http://nabetani.sakura.ne.jp/hena/orde01rotbk/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/4bf43031749c81c35526\n\n\u554f\u984c\u306f\u96e3\u3057\u304b\u3063\u305f\u6a21\u69d8\u3002\n\n\u3067\u3002\n\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3092\u4e8c\u4ef6\u3002\n\u203b \u4e00\u65b9\u306f\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u305f\u3051\u3069\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u5927\u534a\u306f\u7701\u7565\u3067\u3002\n\n# \u77ed\u304f\u3066\u7c21\u5358\u3067\u9045\u3044\u5b9f\u88c5\n\n\u307e\u305a\u306f\u3001\u77ed\u304f\u3066\u7c21\u5358\u3067\u9045\u3044\u65b9\u3002\u3061\u3087\u3063\u3068\u4fee\u6b63\u3057\u305f\u3051\u3069\u3002\n\n```ruby:ruby\ndef fill( w, a )\n  a.each.with_object( [nil]*(w*w) ) do |s,m|\n    y,x=(0..(w*w)).find{ |ix| !m[ix] }.divmod(w)\n    s.times do|dy|\n      m[(y+dy)*w+x,s]=[s]*s\n    end\n  end\nend\n\ndef bk(w,m)\n  0.upto(w-1).map{ |x|\n    (w-1).downto(0).map{ |y| m[x+y*w] }.uniq\n  }.inject([]) do |code,line|\n    code+line.chunk{ |c| code.flatten.include?(c) && :_separator }.map(&:last)\n  end\nend\n\ndef solve(src0)\n  bkcode=src0.split(\":\").last\n  gn=src0.split(\":\").first.to_i-1\n  w=bkcode.split(/[\\(\\)]/)[1].split(\",\").map(&:to_i).inject(&:+)\n  m=fill( w, bkcode.scan( /\\d+/ ).to_a .map(&:to_i))\n  \"(\"+bk(w,m)[gn].join(\",\")+\")\"\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split(/\\s+/)\n  actual=nil\n  actual = solve( src )\n  ok = actual==expected\n  puts( \"%d %s : %s / %s\" % [ num.to_i, (ok ? \"ok\" : \"**NG**\" ), actual, expected ] )\n  ok\n}.tap{ |x| puts( x.all? ? \"all ok\" : \"something wrong\" ) }\n\n__END__\n9 6:(240,168,187)(149,19)(206)(163,77)(86,82,58)(40,18)(22,202)(4,78)(192,61)(62)(48,13)(35,118)(83)  (4,82)\n0 4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)  (32,31)\n1 6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19) (6,17,2)\n```\n\n\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u52aa\u529b\u3092\u5168\u7136\u3057\u3066\u306a\u3044\u3002\n\u7f8e\u3057\u304f\u306a\u3044\u3051\u3069\u300110\u79d2\u3050\u3089\u3044\u3067\u8a08\u7b97\u304c\u7d42\u308f\u308b\u306e\u3067\u3088\u3057\u3002\n\n+ \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306e\u3088\u3046\u306a\u5730\u56f3\u3092\u4f5c\u308b\n+ \u56de\u8ee2\u3059\u308b\n+ \u884c\u306e\u3042\u3064\u307e\u308a\u3092 `uniq` \u3059\u308b\n+ \u884c\u5185\u3092 `chunk` \u3059\u308b\n\n\u3067\u3001\u3060\u3044\u305f\u3044\u51fa\u6765\u4e0a\u304c\u308a\u3002\n\nruby \u306e `chunk` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u4fbf\u5229\u3067\u3001\n\n```ruby:ruby\n[4, 3, 0, 2, 6, 7, 5, 9, 4, 6].chunk( &:odd? ).to_a\n#=> \"[[false, [4]], [true, [3]], [false, [0, 2, 6]], [true, [7, 5, 9]], [false, [4, 6]]]\"\n```\n\n\u3068\u3044\u3046\u98a8\u306b\u3001\u6027\u8cea\u304c\u5909\u308f\u3089\u306a\u3044\u9593\u3092\u3072\u3068\u307e\u3068\u307e\u308a\u306b\u3057\u3066\u304f\u308c\u308b\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u300c `:_separator` \u3092\u8fd4\u3059\u3068\u914d\u5217\u304c\u4f5c\u3089\u308c\u306a\u3044\u300d\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u3063\u3066\u3001\n\n```ruby:ruby\n[1, 3, 0, 3, 6, 0, 5, 9, 4, 6].chunk{|x|x==0 ? :_separator : x.odd? }.to_a.inspect\n#=> \"[[true, [1, 3]], [true, [3]], [false, [6]], [true, [5, 9]], [false, [4, 6]]]\"\n[11]\n```\n\n\u3068\u3001\u3044\u3089\u306a\u3044\u3082\u306e\u3092\u6368\u3066\u3066\u304f\u308c\u308b\u3002\u4eca\u56de\u306f\u767a\u898b\u6e08\u307f\u306e\u3082\u306e\u306f\u4e0d\u8981\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6368\u3066\u3066\u3044\u308b\u3002\n\n\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u52aa\u529b\u306f\u4e00\u5207\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u9045\u3044\u3057\u30e1\u30e2\u30ea\u3082\u305f\u304f\u3055\u3093\u4f7f\u3046\u3051\u3069\u3001\u4eca\u56de\u306e\u30cb\u30fc\u30ba\u306b\u306f\u3053\u308c\u3067\u5341\u5206\u3002\n\n# \u6bd4\u8f03\u7684\u3061\u3083\u3093\u3068\u3057\u305f\u5b9f\u88c5\n\n\u6bd4\u8f03\u7684\u3061\u3083\u3093\u3068\u3057\u305f\u5b9f\u88c5\u306f\u4ee5\u4e0b\uff1a\n\n```ruby:ruby\nclass Sq < Struct.new(:x, :y, :s )\n  def r; x+s; end\n  def b; y+s; end\n  def rot; Sq.new( -b, x, s ); end\nend\n\ndef find_xy(sqs, len, y=0)\n  loop do\n    aty=sqs.select{ |sq| sq.y<=y && y<sq.b }\n    if aty.empty? || aty.map(&:s).inject(&:+)<len\n      x=0\n      aty.sort_by(&:x).each do |sq|\n        break unless x==sq.x\n        x=sq.r\n      end\n      return [x,y]\n    else\n      y=aty.map{ |sq| sq.b }.min\n    end\n  end\nend\n\ndef extract(src)\n  len=src.split(/[\\(\\)]/)[1].split(\",\").map(&:to_i).inject(&:+)\n  m=src.scan( /\\d+/ ).to_a .map(&:to_i)\n  m.each.with_object([]) do |s, sqs|\n    sqs.push(Sq.new(*find_xy(sqs,len),s))\n  end\nend\n\ndef bouwkamp(sqs)\n  sqs=sqs.sort_by{ |sq| [sq.y,sq.x] }\n  sqs.drop(1).each.with_object([[sqs.first]]) do |sq,g|\n    pre=g.last.last\n    if pre.y==sq.y && pre.r==sq.x\n      g.last.push sq\n    else\n      g.push [sq]\n    end\n  end\nend\n\ndef solve(src0)\n  num=src0.split(\":\")[0].to_i\n  src=src0.split(\":\")[1]\n  sqs = extract(src)\n  rotated=sqs.map{ |s| s.rot }\n  \"(\"+bouwkamp(rotated)[num-1].map{ |x| x.s }.join(\",\")+\")\"\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  ok = actual==expected\n  puts( \"%d %s : %s / %s\" % [ num.to_i, (ok ? \"ok\" : \"**NG**\" ), actual, expected ] )\n  ok\n}.tap{ |x| puts( x.all? ? \"all ok\" : \"something wrong\" ) }\n\n__END__\n0 4:(55,44,48)(40,4)(52)(26,29)(23,3)(20,31,21)(5,47)(43)(9,17)(1,8)(32)(25)  (32,31)\n1 6:(33,29,50)(4,25)(37)(15,35)(16,9)(7,2)(17)(42,18)(6,11)(8,27)(24)(19) (6,17,2)\n2 7:(60,50)(23,27)(24,22,14)(7,16)(8,6)(12,15)(13)(2,28)(26)(4,21,3)(18)(17)  (4,16)\n```\n\n`find_xy` \u306e\u5b9f\u88c5\u304c\u306a\u304b\u306a\u304b\u3053\u308c\u4ee5\u4e0a\u7c21\u5358\u306b\u306a\u3089\u306a\u3044\u3002\n\n\u4e0d\u5341\u5206\u3060\u3068\u601d\u3046\u3051\u3069\u3001\u3061\u3087\u3063\u3068\u8aac\u660e\u3057\u3066\u307f\u308b\u3002\n\u5168\u4f53\u3068\u3057\u3066\u306f\n\n* `extract` \u3067\u3001bouwkamp code \u3092\u6b63\u65b9\u5f62\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3002\n* `Sq#rot` \u3067\u3001\u6b63\u65b9\u5f62\u3092\u56de\u8ee2\u3059\u308b\n* `bouwcamp` \u3067\u3001\u6b63\u65b9\u5f62\u306e\u914d\u5217\u3092 bouwcamp code \u306b\u5909\u63db\u3059\u308b\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\u9762\u5012\u306a\u306e\u306f\u3001 `extract` \u5185\u306e `find_xy` \u3060\u3051\u3060\u3068\u601d\u3046\u306e\u3067\u305d\u3053\u306b\u7d5e\u308b\u3002\n\n`aty` \u306f\u3001\u73fe\u5728\u306e y \u5ea7\u6a19\u306e\u5834\u6240\u306b\u3044\u308b\u6b63\u65b9\u5f62\u3002\n`aty` \u306b\u3042\u308b\u6b63\u65b9\u5f62\u306e\u8fba\u306e\u9577\u3055\u306e\u5408\u8a08\u3092\u898b\u308b\u3068\u3001\u4f59\u767d\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u5206\u304b\u308b\u3002\n\u4f59\u767d\u304c\u3042\u308b\u5834\u5408\u3001`x=0` \u304b\u3089\u9806\u306b\u4f59\u767d\u3092\u63a2\u3059\u3002\n\u3000\u3044\u307e\u6ce8\u76ee\u3057\u3066\u3044\u308b `x` \u306b\u6b63\u65b9\u5f62\u304c\u3042\u3063\u305f\u3089\u3001\u305d\u306e\u6b63\u65b9\u5f62\u306e\u53f3\u7aef\u306b\u6ce8\u76ee\u3059\u308b\n\u3000\u306a\u304b\u3063\u305f\u3089\u3001`[x,y]` \u304c\u3001\u6b63\u65b9\u5f62\u3092\u7f6e\u304f\u3079\u304d\u5834\u6240\u3002\n\u4f59\u767d\u304c\u306a\u3044\u5834\u5408\u3001`aty` \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u6b63\u65b9\u5f62\u306e\u4e0b\u7aef\u304c\u306e\u6700\u5c0f\u5024\u3092\u65b0\u305f\u306a `y` \u306b\u3057\u3066\u3001\u3082\u3046\u4e00\u56de\u3002\n\n\u3068\u3044\u3046\u611f\u3058\u3002  \n\n", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Ruby"]}