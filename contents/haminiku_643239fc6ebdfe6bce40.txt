{"context": " More than 1 year has passed since last update.3\u65e5\u9593\u306b10\u56de\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u4eba\u3092\u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u3068\u8a8d\u8b58\u3057\u3066\u3001\u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u306b\u3060\u3051\u30a2\u30d7\u30ea\u306e\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u3057\u305f\u7d50\u679c90%\u304c\u661f5\u8a55\u4fa1\u3092\u3064\u3051\u305f\u3068\u3044\u3046\u4e8b\u4f8b\u304cAML\u304b\u3089\u767a\u8868\u3055\u308c\u307e\u3057\u305f\u3002\u76ee\u304b\u3089\u9c57\u3060\u3063\u305f\u306e\u3067\u8a72\u5f53\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5143\u30cd\u30bf\u306f\u306a\u3093\u3067\u305d\u3093\u306a\u53ef\u611b\u3044\u7d75\u3070\u3063\u304b\u308a\u66f8\u3051\u308b\u3068\u8a71\u984c\u306eAML\u306e\u8a18\u4e8b\u30a2\u30d7\u30ea\u8a55\u4fa1\u304c\u2605\uff12\u2192\u2605\uff14\u306b\u6539\u5584\u3055\u308c\u308b\u3068\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7387\u304c5.4\u500d\u306b\u3002\u30a2\u30d7\u30ea\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u4e0e\u3048\u308b\u5f71\u97ff\u3068\u3001\u30ec\u30d3\u30e5\u30fc\u6539\u55842\u3064\u306e\u6210\u529f\u4e8b\u4f8b\u3067\u3059\u3002\u6700\u521d\u306b\u300c\u697d\u3057\u3093\u3067\u308b\uff1f\u300d\u3068\u30e6\u30fc\u30b6\u306b\u5c0b\u306d\u308b\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\u3059\u308b\u306e\u306f\u3001\u7c21\u5358\u3067\u3059\u304c\u52b9\u679c\u7684\u306a\u826f\u3044\u65b9\u6cd5\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u25a0 \u5143\u8a18\u4e8b\u304b\u3089\u753b\u50cf\u8ee2\u8f09\n\n\n\u4ed5\u69d8\n\u305f\u3076\u3093\u3053\u3093\u306a\u4ed5\u69d8\u306b\u306a\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u30fc\n\n\u30a2\u30d7\u30ea\u8d77\u52d5\u56de\u6570\u306f\u30b5\u30fc\u30d0\u3067\u8a18\u9332(\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u3089\u5831\u916c\u4ed8\u4e0e\u3059\u308b\u305f\u3081)\n3\u65e5\u9593\u306b10\u56de\u4ee5\u4e0a\u8d77\u52d5\u3057\u305f\u4eba\u306b\u3060\u3051\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\n1\u5ea6\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u3092\u51fa\u3057\u305f\u308924\u6642\u9593\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u6a29\u5229\u3092\u30e6\u30fc\u30b6\u304c\u5f97\u308b(\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u3089\u5831\u916c\u4ed8\u4e0e\u3059\u308b\u305f\u3081)\n\u8d77\u52d5\u56de\u6570\u306e\u8a18\u9332\u306bredis\u4f7f\u3063\u3066\u307f\u305f\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nredis\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install redis\n\n\n\u25a0 \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n\n\n\u4f7f\u3044\u65b9\n\nmain.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom review.review import ReviewManager\n\nUSER_ID = \"B00001\"\n\nmanager = ReviewManager(USER_ID)\n\n# \u6a29\u5229\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\nmanager.can_review()\n\n# \u30a2\u30d7\u30ea\u8d77\u52d5\u3092\u8a18\u9332\nmanager.app_startup()\n\n\n\n\n\u4e3b\u30ed\u30b8\u30c3\u30af\n\nreview.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport datetime\nfrom pip.utils import cached_property\nimport redis\n\nPREFIX = 'REVIEW'\n\n# 3\u65e5\u9593\u306e\u3046\u3061\u306b10\u56de\u8d77\u52d5\u3059\u308c\u3070\u30ec\u30d3\u30e5\u30fc\u6a5f\u80fd\u304c\u6709\u52b9\nSTARTUP_SPAN = 3600 * 24 * 3  # 3days\nSTARTUP_COUNT = 10\nSTARTUP_MAX_COUNT = 100\n\n# \u30ec\u30d3\u30e5\u30fc\u6a5f\u80fd\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u308924\u6642\u9593\u6709\u52b9\nEXPIRE_REVIEW_RIGHTS = 3600 * 24 * 1  # 1days\n\n# \u30ec\u30d3\u30e5\u30fc\u3059\u308b\u6a29\u5229 string\u578b\nKEY_REVIEW = '%s:REVIEW:{user_id}' % PREFIX\n\n# \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u5c65\u6b74 list\u578b\nKEY_STARTUP_HISTORY = '%s:STARTUP-HISTORY:{user_id}' % PREFIX\n\n\ndef get_unix_time(now=None):\n    \"\"\"\n    UnixTime\u3092\u8fd4\u5374\n    :rtype : int\n    \"\"\"\n    if now:\n        return now.strftime('%s')\n    return datetime.datetime.now().strftime('%s')\n\n\ndef unix_time_to_datetime(unix_time):\n    \"\"\"\n    UnixTime\u3092datetime\u306b\u5909\u63db\n    :rtype : datetime\n    \"\"\"\n    return datetime.datetime.fromtimestamp(float(unix_time))\n\n\nclass ReviewManager(object):\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    @cached_property\n    def storage(self):\n        \"\"\"\n        :rtype : Storage\n        \"\"\"\n        return Storage(self.user_id)\n\n    def can_review(self):\n        \"\"\"\n        3\u65e5\u9593\u306e\u3046\u3061\u306b10\u56de\u4ee5\u4e0a\u8d77\u52d5\u3057\u3066\u3044\u3066\u30ec\u30d3\u30e5\u30fc\u3067\u304d\u308b\u6a29\u5229\u3092\u6301\u3064\n        \u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u306a\u3089True\u3092\u8fd4\u5374\n        :rtype : bool\n        \"\"\"\n        startup_history = self.storage.get_range_startup_history(20)\n        now = datetime.datetime.now()\n        startup_count = sum([self._within(ut, now=now) for ut in startup_history])\n        return startup_count >= STARTUP_COUNT\n\n    def _within(self, unix_time, now=None):\n        \"\"\"\n        \u5bfe\u8c61\u306eunix_time\u304c3\u65e5\u4ee5\u5185\u306e\u65e5\u4ed8\u3067\u3042\u308c\u3070\u6b21\u306e\u5024\u3092\u8fd4\u5374\n        \u671f\u9593\u5185\u306a\u30891\n        \u671f\u9593\u5916\u306a\u30890\n        \"\"\"\n        if now is None:\n            now = datetime.datetime.now()\n        point_time = get_unix_time(now=now - datetime.timedelta(seconds=STARTUP_SPAN))\n        if point_time <= unix_time:\n            return 1\n        return 0\n\n    def app_startup(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u3092\u8a18\u9332\n        :rtype : None\n        \"\"\"\n        # \u30a2\u30d7\u30ea\u8d77\u52d5\u3092\u8a18\u9332\n        self.storage.push_startup_history()\n\n        # \u3082\u3057\u76f4\u8fd13\u65e5\u9593\u306b10\u56de\u8d77\u52d5\u3057\u3066\u3044\u305f\u3089\u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u671f\u9593\u3092\u5ef6\u9577\n        if self.can_review():\n            self.storage.set_review()\n            self.storage.touch_review()\n        return\n\n    def _debug_reset(self):\n        self.storage.client.delete(self.storage.key_review)\n        self.storage.client.delete(self.storage.key_startup_history)\n\n\nclass Storage(object):\n    _cli = None\n\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    @property\n    def client(self):\n        \"\"\"\n        Redis\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u5374\n        :rtype : Redis\n        \"\"\"\n        if Storage._cli is None:\n            Storage._cli = redis.Redis(host='localhost', port=6379, db=3)\n        return Storage._cli\n\n    @property\n    def key_review(self):\n        \"\"\"\n        :rtype : str\n        \"\"\"\n        return KEY_REVIEW.format(user_id=self.user_id)\n\n    @property\n    def key_startup_history(self):\n        \"\"\"\n        :rtype : str\n        \"\"\"\n        return KEY_STARTUP_HISTORY.format(user_id=self.user_id)\n\n    def touch(self, key, expire):\n        self.client.expire(key, expire)\n\n    def touch_review(self):\n        \"\"\"\n        \u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u3092\u5ef6\u9577\n        \"\"\"\n        self.touch(self.key_review, EXPIRE_REVIEW_RIGHTS)\n\n    def touch_startup_history(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u306e\u4fdd\u5b58\u671f\u9593\u3092\u5ef6\u9577\n        \"\"\"\n        self.touch(self.key_startup_history, STARTUP_SPAN)\n\n    def set_review(self):\n        \"\"\"\n        \u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u3092\u4ed8\u4e0e\n        \"\"\"\n        self.client.set(self.key_review, 1)\n        self.touch_review()\n\n    def push_startup_history(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u9593\u3092UnixTime\u3067\u8a18\u9332\u3059\u308b\u3002\n        \u8d77\u52d5\u5c65\u6b74\u304c{STARTUP_MAX_COUNT}\u306e\u3068\u304d\u306f\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u3092\u6700\u65b0\u306e10\u4ef6\u3092\u6b8b\u3057\u3066\u6d88\u3059\u3002\n        \"\"\"\n        # redis\u306b\u8d77\u52d5\u6642\u9593\u306eUnixTime\u3092\u8a18\u9332\n        self.client.lpush(self.key_startup_history, get_unix_time())\n        self.touch_review()\n\n        # \u8d77\u52d5\u5c65\u6b74\u304c{STARTUP_MAX_COUNT}\u306e\u3068\u304d\u306f\u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u3092\u6700\u65b0\u306e10\u4ef6\u3092\u6b8b\u3057\u3066\u6d88\u3059\u3002\n        count = self.client.llen(self.key_startup_history)\n        if STARTUP_MAX_COUNT >= count:\n            self.client.ltrim(self.key_startup_history, (STARTUP_MAX_COUNT - 11) * -1, -1)\n\n    def get_range_startup_history(self, count):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u9593\u3092N\u4ef6\u53d6\u5f97\n        :rtype : list[int]\n        \"\"\"\n        return self.client.lrange(self.key_startup_history, 0, count - 1)\n\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\ntests.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport datetime\nfrom .review.review import Storage, get_unix_time, unix_time_to_datetime, ReviewManager\n\nUSER_ID = \"A00001\"\nUSER_ID2 = \"A00002\"\n\n\ndef test_storage():\n    s = Storage(USER_ID)\n    s.client\n    assert USER_ID in s.key_review\n    assert USER_ID in s.key_startup_history\n    s.touch_review()\n    s.touch_startup_history()\n\n\ndef test_unix_time():\n    # unix_time\u306e\u5909\u63db\u306e\u8aa4\u5dee\u304c5\u79d2\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u306e\u8a66\u9a13\n    now = datetime.datetime.now()\n    unix_time = get_unix_time()\n    print unix_time\n    assert type(unix_time) == str\n    float(unix_time)\n    convert_unix_time = unix_time_to_datetime(unix_time)\n    print now - convert_unix_time, convert_unix_time\n    _delta = now - convert_unix_time\n    assert _delta.seconds < 5\n\n\ndef test_manager():\n    manager = ReviewManager(USER_ID)\n    manager_user2 = ReviewManager(USER_ID2)\n\n    # \u5168\u30ea\u30bb\u30c3\u30c8\n    manager._debug_reset()\n    manager_user2._debug_reset()\n\n    # 1\u5ea6\u3082\u8d77\u52d5\u3057\u3066\u3044\u306a\u3044\n    assert manager.can_review() is False\n\n    # 1\u56de\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is False\n\n    # \u8ffd\u52a0\u30678\u56de\u8d77\u52d5(\u8a089\u56de)\n    for x in xrange(8):\n        manager.app_startup()\n    assert manager.can_review() is False\n\n    # 10\u56de\u76ee\u306e\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is True\n\n    # 11\u56de\u76ee\u306e\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is True\n\n    # \u8ffd\u52a0\u3067200\u56de\u8d77\u52d5(\u8a08211\u56de)\n    for x in xrange(200):\n        manager.app_startup()\n    assert manager.can_review() is True\n\n    # \u8d77\u52d5\u5c65\u6b74\u304ctrim\u3055\u308c\u3066100\u4ef6\u4ee5\u4e0b\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\n    ct = manager.storage.client.llen(manager.storage.key_startup_history)\n    assert ct <= 100\n\n    # \u30e6\u30fc\u30b61\u30682\u304c\u6df7\u3056\u3063\u3066\u3044\u306a\u3044\u3053\u3068\n    assert manager_user2.can_review() is False\n    for x in xrange(10):\n        manager_user2.app_startup()\n    assert manager_user2.can_review() is True\n\n\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n>>>py.test ./tests.py \n=============================================================================== test session starts ===============================================================================\nplatform darwin -- Python 2.7.5, pytest-2.8.3, py-1.4.30, pluggy-0.3.1\nrootdir: /Users/ikeda/punk/qiita/heavy_user, inifile: \ncollected 3 items \n\ntests.py ...\n\n============================================================================ 3 passed in 0.50 seconds =============================================================================\n\n\n3\u65e5\u9593\u306b10\u56de\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u4eba\u3092\u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u3068\u8a8d\u8b58\u3057\u3066\u3001\u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u306b\u3060\u3051\u30a2\u30d7\u30ea\u306e\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u3057\u305f\u7d50\u679c90%\u304c\u661f5\u8a55\u4fa1\u3092\u3064\u3051\u305f\u3068\u3044\u3046\u4e8b\u4f8b\u304cAML\u304b\u3089\u767a\u8868\u3055\u308c\u307e\u3057\u305f\u3002\u76ee\u304b\u3089\u9c57\u3060\u3063\u305f\u306e\u3067\u8a72\u5f53\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5143\u30cd\u30bf\u306f\u306a\u3093\u3067\u305d\u3093\u306a\u53ef\u611b\u3044\u7d75\u3070\u3063\u304b\u308a\u66f8\u3051\u308b\u3068\u8a71\u984c\u306eAML\u306e\u8a18\u4e8b[\u30a2\u30d7\u30ea\u8a55\u4fa1\u304c\u2605\uff12\u2192\u2605\uff14\u306b\u6539\u5584\u3055\u308c\u308b\u3068\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u7387\u304c5.4\u500d\u306b\u3002\u30a2\u30d7\u30ea\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u4e0e\u3048\u308b\u5f71\u97ff\u3068\u3001\u30ec\u30d3\u30e5\u30fc\u6539\u55842\u3064\u306e\u6210\u529f\u4e8b\u4f8b](http://appmarketinglabo.net/appstore-review/)\u3067\u3059\u3002\u6700\u521d\u306b\u300c\u697d\u3057\u3093\u3067\u308b\uff1f\u300d\u3068\u30e6\u30fc\u30b6\u306b\u5c0b\u306d\u308b\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\u3059\u308b\u306e\u306f\u3001\u7c21\u5358\u3067\u3059\u304c\u52b9\u679c\u7684\u306a\u826f\u3044\u65b9\u6cd5\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u25a0 \u5143\u8a18\u4e8b\u304b\u3089\u753b\u50cf\u8ee2\u8f09\n![s5.png](https://qiita-image-store.s3.amazonaws.com/0/65312/6b50a54a-7712-99f9-8d0e-47a5626c2db6.png)\n\n# \u4ed5\u69d8\n\u305f\u3076\u3093\u3053\u3093\u306a\u4ed5\u69d8\u306b\u306a\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u30fc\n\n1. \u30a2\u30d7\u30ea\u8d77\u52d5\u56de\u6570\u306f\u30b5\u30fc\u30d0\u3067\u8a18\u9332(\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u3089\u5831\u916c\u4ed8\u4e0e\u3059\u308b\u305f\u3081)\n2. 3\u65e5\u9593\u306b10\u56de\u4ee5\u4e0a\u8d77\u52d5\u3057\u305f\u4eba\u306b\u3060\u3051\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u8868\u793a\n3. 1\u5ea6\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u3092\u51fa\u3057\u305f\u308924\u6642\u9593\u30ec\u30d3\u30e5\u30fc\u4f9d\u983c\u6a29\u5229\u3092\u30e6\u30fc\u30b6\u304c\u5f97\u308b(\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u3089\u5831\u916c\u4ed8\u4e0e\u3059\u308b\u305f\u3081)\n4. \u8d77\u52d5\u56de\u6570\u306e\u8a18\u9332\u306bredis\u4f7f\u3063\u3066\u307f\u305f\n\n# \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```shell-session:redis\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install redis\n```\n\n\u25a0 \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-25 19.04.37.png](https://qiita-image-store.s3.amazonaws.com/0/65312/10086775-795c-137f-7d4a-a439afeb9641.png)\n\n## \u4f7f\u3044\u65b9\n```py:main.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom review.review import ReviewManager\n\nUSER_ID = \"B00001\"\n\nmanager = ReviewManager(USER_ID)\n\n# \u6a29\u5229\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\nmanager.can_review()\n\n# \u30a2\u30d7\u30ea\u8d77\u52d5\u3092\u8a18\u9332\nmanager.app_startup()\n\n```\n\n## \u4e3b\u30ed\u30b8\u30c3\u30af\n```py:review.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport datetime\nfrom pip.utils import cached_property\nimport redis\n\nPREFIX = 'REVIEW'\n\n# 3\u65e5\u9593\u306e\u3046\u3061\u306b10\u56de\u8d77\u52d5\u3059\u308c\u3070\u30ec\u30d3\u30e5\u30fc\u6a5f\u80fd\u304c\u6709\u52b9\nSTARTUP_SPAN = 3600 * 24 * 3  # 3days\nSTARTUP_COUNT = 10\nSTARTUP_MAX_COUNT = 100\n\n# \u30ec\u30d3\u30e5\u30fc\u6a5f\u80fd\u304c\u6709\u52b9\u306b\u306a\u3063\u305f\u308924\u6642\u9593\u6709\u52b9\nEXPIRE_REVIEW_RIGHTS = 3600 * 24 * 1  # 1days\n\n# \u30ec\u30d3\u30e5\u30fc\u3059\u308b\u6a29\u5229 string\u578b\nKEY_REVIEW = '%s:REVIEW:{user_id}' % PREFIX\n\n# \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u5c65\u6b74 list\u578b\nKEY_STARTUP_HISTORY = '%s:STARTUP-HISTORY:{user_id}' % PREFIX\n\n\ndef get_unix_time(now=None):\n    \"\"\"\n    UnixTime\u3092\u8fd4\u5374\n    :rtype : int\n    \"\"\"\n    if now:\n        return now.strftime('%s')\n    return datetime.datetime.now().strftime('%s')\n\n\ndef unix_time_to_datetime(unix_time):\n    \"\"\"\n    UnixTime\u3092datetime\u306b\u5909\u63db\n    :rtype : datetime\n    \"\"\"\n    return datetime.datetime.fromtimestamp(float(unix_time))\n\n\nclass ReviewManager(object):\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    @cached_property\n    def storage(self):\n        \"\"\"\n        :rtype : Storage\n        \"\"\"\n        return Storage(self.user_id)\n\n    def can_review(self):\n        \"\"\"\n        3\u65e5\u9593\u306e\u3046\u3061\u306b10\u56de\u4ee5\u4e0a\u8d77\u52d5\u3057\u3066\u3044\u3066\u30ec\u30d3\u30e5\u30fc\u3067\u304d\u308b\u6a29\u5229\u3092\u6301\u3064\n        \u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u306a\u3089True\u3092\u8fd4\u5374\n        :rtype : bool\n        \"\"\"\n        startup_history = self.storage.get_range_startup_history(20)\n        now = datetime.datetime.now()\n        startup_count = sum([self._within(ut, now=now) for ut in startup_history])\n        return startup_count >= STARTUP_COUNT\n\n    def _within(self, unix_time, now=None):\n        \"\"\"\n        \u5bfe\u8c61\u306eunix_time\u304c3\u65e5\u4ee5\u5185\u306e\u65e5\u4ed8\u3067\u3042\u308c\u3070\u6b21\u306e\u5024\u3092\u8fd4\u5374\n        \u671f\u9593\u5185\u306a\u30891\n        \u671f\u9593\u5916\u306a\u30890\n        \"\"\"\n        if now is None:\n            now = datetime.datetime.now()\n        point_time = get_unix_time(now=now - datetime.timedelta(seconds=STARTUP_SPAN))\n        if point_time <= unix_time:\n            return 1\n        return 0\n\n    def app_startup(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u3092\u8a18\u9332\n        :rtype : None\n        \"\"\"\n        # \u30a2\u30d7\u30ea\u8d77\u52d5\u3092\u8a18\u9332\n        self.storage.push_startup_history()\n\n        # \u3082\u3057\u76f4\u8fd13\u65e5\u9593\u306b10\u56de\u8d77\u52d5\u3057\u3066\u3044\u305f\u3089\u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u671f\u9593\u3092\u5ef6\u9577\n        if self.can_review():\n            self.storage.set_review()\n            self.storage.touch_review()\n        return\n\n    def _debug_reset(self):\n        self.storage.client.delete(self.storage.key_review)\n        self.storage.client.delete(self.storage.key_startup_history)\n\n\nclass Storage(object):\n    _cli = None\n\n    def __init__(self, user_id):\n        self.user_id = user_id\n\n    @property\n    def client(self):\n        \"\"\"\n        Redis\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u5374\n        :rtype : Redis\n        \"\"\"\n        if Storage._cli is None:\n            Storage._cli = redis.Redis(host='localhost', port=6379, db=3)\n        return Storage._cli\n\n    @property\n    def key_review(self):\n        \"\"\"\n        :rtype : str\n        \"\"\"\n        return KEY_REVIEW.format(user_id=self.user_id)\n\n    @property\n    def key_startup_history(self):\n        \"\"\"\n        :rtype : str\n        \"\"\"\n        return KEY_STARTUP_HISTORY.format(user_id=self.user_id)\n\n    def touch(self, key, expire):\n        self.client.expire(key, expire)\n\n    def touch_review(self):\n        \"\"\"\n        \u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u3092\u5ef6\u9577\n        \"\"\"\n        self.touch(self.key_review, EXPIRE_REVIEW_RIGHTS)\n\n    def touch_startup_history(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u306e\u4fdd\u5b58\u671f\u9593\u3092\u5ef6\u9577\n        \"\"\"\n        self.touch(self.key_startup_history, STARTUP_SPAN)\n\n    def set_review(self):\n        \"\"\"\n        \u30ec\u30d3\u30e5\u30fc\u6a29\u5229\u3092\u4ed8\u4e0e\n        \"\"\"\n        self.client.set(self.key_review, 1)\n        self.touch_review()\n\n    def push_startup_history(self):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u9593\u3092UnixTime\u3067\u8a18\u9332\u3059\u308b\u3002\n        \u8d77\u52d5\u5c65\u6b74\u304c{STARTUP_MAX_COUNT}\u306e\u3068\u304d\u306f\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u3092\u6700\u65b0\u306e10\u4ef6\u3092\u6b8b\u3057\u3066\u6d88\u3059\u3002\n        \"\"\"\n        # redis\u306b\u8d77\u52d5\u6642\u9593\u306eUnixTime\u3092\u8a18\u9332\n        self.client.lpush(self.key_startup_history, get_unix_time())\n        self.touch_review()\n\n        # \u8d77\u52d5\u5c65\u6b74\u304c{STARTUP_MAX_COUNT}\u306e\u3068\u304d\u306f\u30a2\u30d7\u30ea\u8d77\u52d5\u5c65\u6b74\u3092\u6700\u65b0\u306e10\u4ef6\u3092\u6b8b\u3057\u3066\u6d88\u3059\u3002\n        count = self.client.llen(self.key_startup_history)\n        if STARTUP_MAX_COUNT >= count:\n            self.client.ltrim(self.key_startup_history, (STARTUP_MAX_COUNT - 11) * -1, -1)\n\n    def get_range_startup_history(self, count):\n        \"\"\"\n        \u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u9593\u3092N\u4ef6\u53d6\u5f97\n        :rtype : list[int]\n        \"\"\"\n        return self.client.lrange(self.key_startup_history, 0, count - 1)\n\n```\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n```py:tests.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport datetime\nfrom .review.review import Storage, get_unix_time, unix_time_to_datetime, ReviewManager\n\nUSER_ID = \"A00001\"\nUSER_ID2 = \"A00002\"\n\n\ndef test_storage():\n    s = Storage(USER_ID)\n    s.client\n    assert USER_ID in s.key_review\n    assert USER_ID in s.key_startup_history\n    s.touch_review()\n    s.touch_startup_history()\n\n\ndef test_unix_time():\n    # unix_time\u306e\u5909\u63db\u306e\u8aa4\u5dee\u304c5\u79d2\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u306e\u8a66\u9a13\n    now = datetime.datetime.now()\n    unix_time = get_unix_time()\n    print unix_time\n    assert type(unix_time) == str\n    float(unix_time)\n    convert_unix_time = unix_time_to_datetime(unix_time)\n    print now - convert_unix_time, convert_unix_time\n    _delta = now - convert_unix_time\n    assert _delta.seconds < 5\n\n\ndef test_manager():\n    manager = ReviewManager(USER_ID)\n    manager_user2 = ReviewManager(USER_ID2)\n\n    # \u5168\u30ea\u30bb\u30c3\u30c8\n    manager._debug_reset()\n    manager_user2._debug_reset()\n\n    # 1\u5ea6\u3082\u8d77\u52d5\u3057\u3066\u3044\u306a\u3044\n    assert manager.can_review() is False\n\n    # 1\u56de\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is False\n\n    # \u8ffd\u52a0\u30678\u56de\u8d77\u52d5(\u8a089\u56de)\n    for x in xrange(8):\n        manager.app_startup()\n    assert manager.can_review() is False\n\n    # 10\u56de\u76ee\u306e\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is True\n\n    # 11\u56de\u76ee\u306e\u8d77\u52d5\n    manager.app_startup()\n    assert manager.can_review() is True\n\n    # \u8ffd\u52a0\u3067200\u56de\u8d77\u52d5(\u8a08211\u56de)\n    for x in xrange(200):\n        manager.app_startup()\n    assert manager.can_review() is True\n\n    # \u8d77\u52d5\u5c65\u6b74\u304ctrim\u3055\u308c\u3066100\u4ef6\u4ee5\u4e0b\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\n    ct = manager.storage.client.llen(manager.storage.key_startup_history)\n    assert ct <= 100\n\n    # \u30e6\u30fc\u30b61\u30682\u304c\u6df7\u3056\u3063\u3066\u3044\u306a\u3044\u3053\u3068\n    assert manager_user2.can_review() is False\n    for x in xrange(10):\n        manager_user2.app_startup()\n    assert manager_user2.can_review() is True\n\n```\n\n```shell-session:\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n>>>py.test ./tests.py \n=============================================================================== test session starts ===============================================================================\nplatform darwin -- Python 2.7.5, pytest-2.8.3, py-1.4.30, pluggy-0.3.1\nrootdir: /Users/ikeda/punk/qiita/heavy_user, inifile: \ncollected 3 items \n\ntests.py ...\n\n============================================================================ 3 passed in 0.50 seconds =============================================================================\n```\n\n", "tags": ["iOS", "Android", "Python", "Redis"]}