{"context": "\uff08 \u76f8\u95a2\u5206\u6790\u3092\u884c\u3046\u524d\u306b\u3001\uff12\u3064\u306e\u6570\u5024\u7cfb\u5217 \u3092 \u6b63\u898f\u5316 \u3057\u3066\u3001\u3055\u3089\u306b\u3001\u5358\u4f4d\u6839\u691c\u5b9a \u3092\u3000\u884c\u3044\u3001\u5bfe\u6570 \u3084 \u968e\u5dee \u3092 \u3068\u308b\u5fc5\u8981 \u304c \u3042\u308b \u304c\u3001\u305d\u308c \u306f \u307e\u305f \u5225\u8a18\u4e8b \u306b\u3066\uff09\n\n\u3010 \u7528\u9014\u4f8b \u3011\n\n\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u3092\u9078\u629e\u3059\u308b\u969b\u3001\u591a\u91cd\u5171\u7dda\u6027 \u3092 \u907f\u3051\u308b\u305f\u3081\u306b\u3001\u76f8\u95a2\u306e\u9ad8\u3044\u30c7\u30fc\u30bf\u9805\u76ee\u306f\u3044\u305a\u308c\u304b\u7247\u65b9 \u3092\u6368\u3066\u308b\u3002\n\n\uff08 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u524d\u7a7a\u9593 \u3068 \u30c7\u30fc\u30bf\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 \u7528\u610f \uff09\n\n\nPython 3.5\nimport pandas as pd\n# data_df = pd.read_csv(\"WorldEconomicOutlook_2016annual.csv\")\n\n\n\n\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\n\n\nPython 3.5\ndef get_col_pair_name_and_corr_value_dict_list(dataframe_obj, corr_min_criteria):\n    corr_matrix_df = dataframe_obj.corr()\n    col_name_list = list(corr_matrix_df.columns)\n    row_name_list = list(corr_matrix_df.index)\n    output = [{(row, col) : corr_matrix_df.ix[row, col]} for row in row_name_list for col in col_name_list if (corr_matrix_df.ix[row, col] > float(corr_min_criteria)) and not(row == col)]\n    return output\n\n\n\n\n\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\n\n\u76f8\u95a2\u4fc2\u6570 0.7 \u3092 \u8d85\u3048\u308b \u5217\u30da\u30a2 \u3092 \u62bd\u51fa\n\u8fd4\u308a\u5024\uff1a {(\uff11\u3064\u76ee\u306e\u5217\u540d, \uff12\u3064\u76ee\u306e\u5217\u540d) : \uff12\u3064\u306e\u5217\u9593\u306e\u76f8\u95a2\u4fc2\u6570 } \u3092 \u8981\u7d20 \u306b \u6301\u3064 \u30ea\u30b9\u30c8 \n\n\nPython 3.5\ntwo_col_corr_dict_list =  get_col_pair_name_and_corr_value_dict_list(data_df, 0.7)\n\n\n\nPython 3.5\n>>> from pprint import pprint # pprint\u3067\u3001list\u306e\u8981\u7d20\u304c\u4e00\u884c\u3054\u3068\u3001\u6574\u5f62\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u308b\u3002\n>>> pprint(two_col_corr_dict)\n\n>>>\n>>> two_col_corr_dict_list[100]\n{('GDP_JPN', 'Nikkei_225'): 0.8744097584581}\n>>>\n\n\n\n\u8fd4\u308a\u5024 \u304b\u3089\u3001\u7d50\u679c\u306e\u5024 \u3092 \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u3067 \u53d6\u308a\u51fa\u3059\n\n\n\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u306f \u5931\u6557\n\n\nPython 3.5\n>>> {(a, b) : c} =  two_col_corr_dict_list[100]\n  File \"<stdin>\", line 1\nSyntaxError: can't assign to literal\n>>>\n\n\n( \u5931\u6557 )\n\nPython 3.5\n>>> (a, b) = two_col_corr_dict_list[100].keys()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: need more than 1 value to unpack\n>>>\n\n\n\n\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d \u306b \u5305\u307e\u308c\u3066\u3044\u308b\n\n\nPython 3.5\n>>> two_col_corr_dict_list[100].keys()\n[('GDP_JPN', 'Nikkei_225')]\n>>>\n\n\n\uff08 \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u6210\u529f \uff09\n\nPython 3.5\n>>> [(a, b)] = two_col_corr_dict_list[100].keys()\n>>> a\n'GDP_JPN'\n>>>\n>>> b\n'Nikkei_225'\n>>>\n>>>\n>>> two_col_corr_dict_list[100].values()\n[0.8744097584581]\n>>>\n\n\n\uff08 \u306a\u3093\u3068\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u3082 \u6210\u529f \uff09\n\nPython 3.5\n>>> [c] = two_col_corr_dict_list[100].values()\n>>> c\n 0.8744097584581\n>>>\n>>> c2 = two_col_corr_dict_list[100].values()[0]\n>>> c2\n0.8744097584581\n>>>\n\n\n\n\u3010 \u53c2\u8003 \u3011\n\n\n\u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u3067 \u30d3\u30b8\u30e5\u30a2\u30eb \u3067\u53ef\u8996\u5316\u3059\u308b \u65b9\u6cd5 \u3082 \u3042\u308b\u3002\n\n\nO'Reilly Cyrille Rossant\uff08\u8457\uff09\u300ePython \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30af\u30c3\u30af\u30d6\u30c3\u30af\u300fpp.198-199 \u6240\u53ce\u30b3\u30fc\u30c9 \u306b \u4ee5\u4e0b \u304c \u3042\u308b\u3002\n\nimport bumpy as np\nimport matplotlib.pyplot as pet\nimport seaboarn as sns\n\nx1 = np.random.randn(80)\nx2 = np.random.randn(80)\ny1 = .5 + 2 * x1 - x2 + 2.5 * x3 + 3 * np.random.randn(80)\ny2 = .5 + 2 * x1 - x2 + 2.5 * np.random.randn(80)\ny3 = y2 + np.random.randn(80)\n\ndf = pd.DataFrame(dict(x1=x1, x2=x2, x3=x3, \n                       y1=y1, y2=y2, y3=y3))\nsns.corrplot(df)\n\n\n\u3057\u304b\u3057\u3001seaborn \u304b\u3089\u306f\u3001\u3059\u3067 \u306b corrplot() \u30e1\u30bd\u30c3\u30c9 \u306f \u53d6\u308a\u9664\u304b\u308c\u3066\u3044\u308b\u3002\n>>> sns.corrplot()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'corrplot'\n>>> \n\n\n\uff08 GitHub \uff09mwaskom/seaborn\u3000How to recreate corrplot #663 \n\n\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5 \u3067 \u5bfe\u5fdc\u3059\u308b\u3002\n\n\nHirofumiYashima Qiita\u8a18\u4e8b \u300c\u3010 Python \u3067 \u6570\u5024\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2 \u53ef\u8996\u5316 \u3011\u3044\u308d\u3044\u308d\u306a\u53ef\u8996\u5316\u8868\u73fe\u65b9\u6cd5 \u3092 \u307e\u3068\u3081\u3066\u307f\u305f \u301c \u2460\u6563\u5e03\u56f3\u884c\u5217\u3001\u2461\u6563\u5e03\u56f3\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4ed8\u304d\uff09\u3001\u2462\u6563\u5e03\u56f3\uff08\u30c7\u30fc\u30bf\u4ef6\u6570 \u8272\u52fe\u914d\u8868\u793a\uff09\u3001\u2463\u76f8\u95a2\u4fc2\u6570\u884c\u5217\uff08\u76f8\u95a2\u5024\u306e\u5927\u5c0f \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u8272\u52fe\u914d\u8868\u793a\uff09\u300d\n\n\npandas.DataFrame \u306e corr\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b\n\n\nsns.heatmap\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b\n\n\n\nPython\nfrom matplotlib import pyplot as pet\nimport seaborn as sns\n\na = np.array([[0,0,4,6,7,0,0],\n             [0,0,19,8,6,8,0],\n             [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\nsns.heatmap(a_df.corr().as_matrix(), annot=True)\nplt.show()\n\n\n\n\n\n\n( \u8ffd\u8a18 )\n\na_df.corr().as_matrix()\u3057\u306a\u3044\u3067\u3001a_df.corr()\u3092sns.heatmap()\u306b\u6e21\u3057\u3066\u3082\u3088\u3044\u3002\n\u3009new_df = a_df.copy()\n \u3009new_df_2 = new_df\uff3bnew_df > 0.7].fillna(0)\n \u3009del new_dl\n \u3009sns.heatmap(new_df_2, annot=True)\n \u3009plt.show()\n( \u53c2\u8003 )\nhttp://chrisalbon.com/python/pandas_with_seaborn.html\n\n\nimshow\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b\n\n\n\nPython\na_df = pd.DataFrame(a)\n\na_df.corr()\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nplt.imshow(a_df.corr(), interpolation='none')\nplt.gray()\nplt.show()\n\n\n\nPython\nfrom matplotlib import pyplot as pet\nimport seaborn as sns\n\na = np.array([[0,0,4,6,7,0,0],\n             [0,0,19,8,6,8,0],\n             [0,0,9,4,0,0,0]]).T\n\na_df = pd.DataFrame(a)\n\nprint(a_df.corr())\n#           A         B         C\n# A  1.000000  0.509333  0.431003\n# B  0.509333  1.000000  0.880573\n# C  0.431003  0.880573  1.000000\n\nprint(a_df.corr().as_matrix())\n# [[ 1.          0.50933349  0.43100256]\n#  [ 0.50933349  1.          0.88057287]\n#  [ 0.43100256  0.88057287  1.        ]]\n\nplt.imshow(a_df.corr().as_matrix(), interpolation='none')\nplt.gray()\nplt.show()\n\n\n\n\n\nynakayama\u3055\u3093 Qiita\u8a18\u4e8b\u300cPython + matplotlib \u306b\u3088\u308b\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u300d\n\n\n\u591a\u6b21\u5143\u914d\u5217\u304b\u3089\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u304f\nmatplotlib \u306e pcolor \u95a2\u6570\u3067\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304c\u4f7f\u3048\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306f n x m \u884c\u5217\u3068 X \u304a\u3088\u3073 Y \u8ef8\u306e\u30e9\u30d9\u30eb\u3092\u884c\u5217\u3067\u6e21\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u304d\u307e\u3059\u3002\n\n# \u6b63\u65b9\u884c\u5217\u3068 X \u304a\u3088\u3073 Y \u306e\u30e9\u30d9\u30eb\u306e\u884c\u5217\u3092\u6e21\u3059\ndef draw_heatmap(data, row_labels, column_labels):\n   # \u63cf\u753b\u3059\u308b\n   fig, ax = plt.subplots()\n   heatmap = ax.pcolor(data, cmap=plt.cm.Blues)\n\n   ax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False)\n   ax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False)\n\n   ax.invert_yaxis()\n   ax.xaxis.tick_top()\n\n   ax.set_xticklabels(row_labels, minor=False)\n   ax.set_yticklabels(column_labels, minor=False)\n   plt.show()\n   plt.savefig('image.png')\n\n   return heat map\n\n\n\n\n\u4e0a\u8a18\u306e\u8a18\u4e8b \u3067\u3001\n\n\n\u5f15\u6570 \u306b \u6e21\u3059\u3001DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u4e0a\u8a18\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5909\u6570\u540d \u306f data\uff09\u3068\u3057\u3066\u3001\ndataframe_obj.corr() \u3067 \u4f5c\u6210\u3057\u305f corr_matrix_df\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 \u9078\u629e\u3059\u308b\n\n\n\u3053\u3068 \u3067\u3001dataframe_obj \u306e \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u3067 \u53ef\u8996\u5316\u3057\u305f\u30b0\u30e9\u30d5 \u3092 \u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u3042\u308b\u5217\u30e9\u30d9\u30eb\uff08Y\u8ef8\uff09\u3068 \u3042\u308b\u5217\u30e9\u30d9\u30eb\uff08X\u8ef8\uff09\u3068\u306e\u9593\u306e\uff12\u5909\u6570\uff08 \uff1d\uff12\u5217 \uff09\u9593 \u306e \u76f8\u95a2\u4fc2\u6570 \u306e \u6570\u5024\u306e\u5927\u304d\u3055 \u3067\u3001\u8272 \u304c \u4ed8\u3051\u3089\u308c\u308b\u3002\n\uff08 \u4ee5\u4e0b \u3082 \u53c2\u8003 \u306b \u306a\u308b \uff09\n\n\nstackoverflow, Heatmap in matplotlib with pcolor?\nOpenBook Masato Naka \u300c[Pandas]DataFrame\u306e\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u300d\nhik0107\u3055\u3093 Quita\u8a18\u4e8b\u300cPython\u3067Pandas\u306ePlot\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u30c7\u30fc\u30bf\u52a0\u5de5\u304b\u3089\u30b0\u30e9\u30d5\u4f5c\u6210\u307e\u3067\u30de\u30b8\u3067\u30b7\u30fc\u30e0\u30ec\u30b9\u300d\nhik0107\u3055\u3093 Quita\u8a18\u4e8b \u300cPython \u3067\u30c7\u30fc\u30bf\u53ef\u8996\u5316 - \u30ab\u30c3\u30b3\u3044\u3044\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u3053\u3046\u300d\n\n\ndataframe_obj.corr() \u3067 \u5f97\u3089\u308c\u308b \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u306f\u3001\u540c\u3058\u300c\uff12\u3064\u306e\u30c7\u30fc\u30bf\u9805\u76ee\uff08\u30c7\u30fc\u30bf\u5217\uff09\u9593\u306e\u76f8\u95a2\u4fc2\u6570\u300d\u304c \u8868\u793a\u3055\u308c\u308b \u30bb\u30eb \u304c\u3001\u4e0a\u4e09\u89d2\u884c\u5217\uff08\u4ee5\u4e0b \u306e \u300c\uff11\u300d \u3067 \u57cb\u3081\u305f\u9818\u57df\uff09\u3068\u3001\u4e0b\u4e09\u89d2\u884c\u5217\uff08\u4ee5\u4e0b \u306e \u300c\uff10\u300d \u3067 \u57cb\u3081\u305f\u9818\u57df\uff09\u306e\uff12\u304b\u6240 \u306b \u51fa\u73fe\u3059\u308b\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b \u306e \u3088\u3046 \u306b\u3001\u300c\uff11\u300d\u306e\u90e8\u5206\uff08\uff1d\u4e0a\u4e09\u89d2\u884c\u5217\uff09 \u3092 \u30de\u30b9\u30ad\u30f3\u30b0\u51e6\u7406 \u3067 \u6368\u3066\u308b \u3068 \u3088\u3044\u3002\n\nTomHortons\u3055\u3093 Qiita\u8a18\u4e8b \u300c\u76f8\u95a2\u4fc2\u6570\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089\u5206\u985e\u554f\u984c\u3078\u5f79\u7acb\u3064\u5909\u6570\u3092\u898b\u3064\u3051\u308b\u300d\n\n\uff08 \u4ee5\u4e0b\u3001TomHorton\u3055\u3093 \u306e \u8a18\u4e8b \u3088\u308a \u8ee2\u8f09 \uff09\n\n\uff08 \u4ee5\u4e0b\u3001TomHorton\u3055\u3093 \u306e \u8a18\u4e8b \u3088\u308a \u8ee2\u8f09 \uff09\n\n\uff08 \u6700\u521d \u306b \u8ee2\u8f09\u3055\u305b\u3066\u9802\u3044\u305f \u753b\u9762\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u4e2d\u306e\u30b3\u30fc\u30c9 \u306f\u3001 \u6a2a\u65b9\u5411\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u3068 \u5168\u4f53 \u304c \u898b\u3048\u306a\u3044 \u306e\u3067\u3001\u4ee5\u4e0b \u306b \u518d\u8ee2\u8f09 \uff09\n\n\n\uff08 \u76f8\u95a2\u5206\u6790\u3092\u884c\u3046\u524d\u306b\u3001\uff12\u3064\u306e\u6570\u5024\u7cfb\u5217 \u3092 \u6b63\u898f\u5316 \u3057\u3066\u3001\u3055\u3089\u306b\u3001\u5358\u4f4d\u6839\u691c\u5b9a \u3092\u3000\u884c\u3044\u3001\u5bfe\u6570 \u3084 \u968e\u5dee \u3092 \u3068\u308b\u5fc5\u8981 \u304c \u3042\u308b \u304c\u3001\u305d\u308c \u306f \u307e\u305f \u5225\u8a18\u4e8b \u306b\u3066\uff09\n\n##__\u3010 \u7528\u9014\u4f8b \u3011__\n\n\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u6295\u5165\u3059\u308b\u8aac\u660e\u5909\u6570\u3092\u9078\u629e\u3059\u308b\u969b\u3001\u591a\u91cd\u5171\u7dda\u6027 \u3092 \u907f\u3051\u308b\u305f\u3081\u306b\u3001\u76f8\u95a2\u306e\u9ad8\u3044\u30c7\u30fc\u30bf\u9805\u76ee\u306f\u3044\u305a\u308c\u304b\u7247\u65b9 \u3092\u6368\u3066\u308b\u3002\n\n###__\uff08 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u524d\u7a7a\u9593 \u3068 \u30c7\u30fc\u30bf\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 \u7528\u610f \uff09__\n\n```{python:Python 3.5}\nimport pandas as pd\n# data_df = pd.read_csv(\"WorldEconomicOutlook_2016annual.csv\")\n```\n\n###__\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9__\n\n```{python:Python 3.5}\ndef get_col_pair_name_and_corr_value_dict_list(dataframe_obj, corr_min_criteria):\n\tcorr_matrix_df = dataframe_obj.corr()\n\tcol_name_list = list(corr_matrix_df.columns)\n\trow_name_list = list(corr_matrix_df.index)\n\toutput = [{(row, col) : corr_matrix_df.ix[row, col]} for row in row_name_list for col in col_name_list if (corr_matrix_df.ix[row, col] > float(corr_min_criteria)) and not(row == col)]\n\treturn output\n\n```\n\n###__\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c__\n\n* __\u76f8\u95a2\u4fc2\u6570 0.7 \u3092 \u8d85\u3048\u308b \u5217\u30da\u30a2 \u3092 \u62bd\u51fa__\n* \u8fd4\u308a\u5024\uff1a {(\uff11\u3064\u76ee\u306e\u5217\u540d, \uff12\u3064\u76ee\u306e\u5217\u540d) : \uff12\u3064\u306e\u5217\u9593\u306e\u76f8\u95a2\u4fc2\u6570 } \u3092 \u8981\u7d20 \u306b \u6301\u3064 \u30ea\u30b9\u30c8 \n\n\n```{python:Python 3.5}\ntwo_col_corr_dict_list =  get_col_pair_name_and_corr_value_dict_list(data_df, 0.7)\n```\n\n\n```{python:Python 3.5}\n>>> from pprint import pprint # pprint\u3067\u3001list\u306e\u8981\u7d20\u304c\u4e00\u884c\u3054\u3068\u3001\u6574\u5f62\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u308b\u3002\n>>> pprint(two_col_corr_dict)\n\n>>>\n>>> two_col_corr_dict_list[100]\n{('GDP_JPN', 'Nikkei_225'): 0.8744097584581}\n>>>\n```\n\n###__\u8fd4\u308a\u5024 \u304b\u3089\u3001\u7d50\u679c\u306e\u5024 \u3092 \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u3067 \u53d6\u308a\u51fa\u3059__\n\n* __\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u306f \u5931\u6557__\n\n```{python:Python 3.5}\n>>> {(a, b) : c} =  two_col_corr_dict_list[100]\n  File \"<stdin>\", line 1\nSyntaxError: can't assign to literal\n>>>\n```\n\n ( \u5931\u6557 )\n\n```{python:Python 3.5}\n>>> (a, b) = two_col_corr_dict_list[100].keys()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: need more than 1 value to unpack\n>>>\n```\n\n* \u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d \u306b \u5305\u307e\u308c\u3066\u3044\u308b\n\n```{python:Python 3.5}\n>>> two_col_corr_dict_list[100].keys()\n[('GDP_JPN', 'Nikkei_225')]\n>>>\n````\n\n\uff08 \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u6210\u529f \uff09\n\n```{python:Python 3.5}\n>>> [(a, b)] = two_col_corr_dict_list[100].keys()\n>>> a\n'GDP_JPN'\n>>>\n>>> b\n'Nikkei_225'\n>>>\n>>>\n>>> two_col_corr_dict_list[100].values()\n[0.8744097584581]\n>>>\n```\n\n\uff08 \u306a\u3093\u3068\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1 \u3082 \u6210\u529f \uff09\n\n```{python:Python 3.5}\n>>> [c] = two_col_corr_dict_list[100].values()\n>>> c\n 0.8744097584581\n>>>\n>>> c2 = two_col_corr_dict_list[100].values()[0]\n>>> c2\n0.8744097584581\n>>>\n```\n\n\n#__\u3010 \u53c2\u8003 \u3011__\n\n###__\u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u3067 \u30d3\u30b8\u30e5\u30a2\u30eb \u3067\u53ef\u8996\u5316\u3059\u308b \u65b9\u6cd5 \u3082 \u3042\u308b\u3002__\n\n___\n\n__O'Reilly Cyrille Rossant\uff08\u8457\uff09\u300ePython \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30af\u30c3\u30af\u30d6\u30c3\u30af\u300f*pp.198-199* \u6240\u53ce\u30b3\u30fc\u30c9 \u306b \u4ee5\u4e0b \u304c \u3042\u308b\u3002__\n\n>```{python:}\n> import bumpy as np\n> import matplotlib.pyplot as pet\n> import seaboarn as sns\n>\n> x1 = np.random.randn(80)\n> x2 = np.random.randn(80)\n> y1 = .5 + 2 * x1 - x2 + 2.5 * x3 + 3 * np.random.randn(80)\n> y2 = .5 + 2 * x1 - x2 + 2.5 * np.random.randn(80)\n> y3 = y2 + np.random.randn(80)\n>\n> df = pd.DataFrame(dict(x1=x1, x2=x2, x3=x3, \n                       y1=y1, y2=y2, y3=y3))\n> sns.corrplot(df)\n>```\n\n__\u3057\u304b\u3057\u3001seaborn \u304b\u3089\u306f\u3001\u3059\u3067 \u306b corrplot() \u30e1\u30bd\u30c3\u30c9 \u306f \u53d6\u308a\u9664\u304b\u308c\u3066\u3044\u308b\u3002__\n\n\n```{python:}\n>>> sns.corrplot()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute 'corrplot'\n>>> \n```\n\n* [\uff08 GitHub \uff09mwaskom/seaborn\u3000_How to recreate corrplot #663_ ](https://github.com/mwaskom/seaborn/issues/663)\n\n<img width=\"1272\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-14 23.27.50.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/eda1381b-e996-5c26-2326-8da1f5945555.png\">\n\n__\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5 \u3067 \u5bfe\u5fdc\u3059\u308b\u3002__\n\n___\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \u300c\u3010 Python \u3067 \u6570\u5024\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2 \u53ef\u8996\u5316 \u3011\u3044\u308d\u3044\u308d\u306a\u53ef\u8996\u5316\u8868\u73fe\u65b9\u6cd5 \u3092 \u307e\u3068\u3081\u3066\u307f\u305f \u301c \u2460\u6563\u5e03\u56f3\u884c\u5217\u3001\u2461\u6563\u5e03\u56f3\uff08\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u4ed8\u304d\uff09\u3001\u2462\u6563\u5e03\u56f3\uff08\u30c7\u30fc\u30bf\u4ef6\u6570 \u8272\u52fe\u914d\u8868\u793a\uff09\u3001\u2463\u76f8\u95a2\u4fc2\u6570\u884c\u5217\uff08\u76f8\u95a2\u5024\u306e\u5927\u5c0f \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u8272\u52fe\u914d\u8868\u793a\uff09\u300d](http://qiita.com/HirofumiYashima/items/0c9b88a6c21a35b099df)\n\n####__pandas.DataFrame \u306e corr\u30e1\u30bd\u30c3\u30c9 \u3067 \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u7b97\u51fa => \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u56f3\u51fa\u529b__\n\n* __sns.heatmap\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b__\n\n>```{python:Python}\n> from matplotlib import pyplot as pet\n> import seaborn as sns\n>\n> a = np.array([[0,0,4,6,7,0,0],\n>              [0,0,19,8,6,8,0],\n>              [0,0,9,4,0,0,0]]).T\n>\n>a_df = pd.DataFrame(a)\n>sns.heatmap(a_df.corr().as_matrix(), annot=True)\n>plt.show()\n>```\n\n<img width=\"676\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-14 23.21.10.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e48ef038-d28f-0d2b-9af1-e55aa5d9bc3b.png\">\n\n\n___\n\n##__( \u8ffd\u8a18 )__\n\na_df.corr().as_matrix()\u3057\u306a\u3044\u3067\u3001a_df.corr()\u3092sns.heatmap()\u306b\u6e21\u3057\u3066\u3082\u3088\u3044\u3002\n\n \u3009new_df = a_df.copy()\n \u3009new_df_2 = new_df\uff3bnew_df > 0.7].fillna(0)\n \u3009del new_dl\n \u3009sns.heatmap(new_df_2, annot=True)\n \u3009plt.show()\n\n( \u53c2\u8003 )\n\nhttp://chrisalbon.com/python/pandas_with_seaborn.html\n\n___\n\n* __imshow\u30e1\u30bd\u30c3\u30c9 \u3067 \u51fa\u529b__\n\n>```{python:Python}\n>a_df = pd.DataFrame(a)\n>\n>a_df.corr()\n>#           A         B         C\n># A  1.000000  0.509333  0.431003\n># B  0.509333  1.000000  0.880573\n># C  0.431003  0.880573  1.000000\n>\n>plt.imshow(a_df.corr(), interpolation='none')\n>plt.gray()\n>plt.show()\n>```\n\n\n>```{python:Python}\n> from matplotlib import pyplot as pet\n> import seaborn as sns\n>\n> a = np.array([[0,0,4,6,7,0,0],\n>              [0,0,19,8,6,8,0],\n>              [0,0,9,4,0,0,0]]).T\n>\n>a_df = pd.DataFrame(a)\n>\n>print(a_df.corr())\n>#           A         B         C\n># A  1.000000  0.509333  0.431003\n># B  0.509333  1.000000  0.880573\n># C  0.431003  0.880573  1.000000\n>\n>print(a_df.corr().as_matrix())\n># [[ 1.          0.50933349  0.43100256]\n>#  [ 0.50933349  1.          0.88057287]\n>#  [ 0.43100256  0.88057287  1.        ]]\n>\n>plt.imshow(a_df.corr().as_matrix(), interpolation='none')\n>plt.gray()\n>plt.show()\n>```\n\n<img width=\"664\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-14 23.20.48.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/06c48a3d-98b1-5711-96f7-32ac66026c09.png\">\n\n\n\n* [ynakayama\u3055\u3093 Qiita\u8a18\u4e8b\u300cPython + matplotlib \u306b\u3088\u308b\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u300d](http://qiita.com/ynakayama/items/7dc01f45caf6d87a981b)\n\n> __\u591a\u6b21\u5143\u914d\u5217\u304b\u3089\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u304f__\n>\n>matplotlib \u306e pcolor \u95a2\u6570\u3067\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304c\u4f7f\u3048\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u306f n x m \u884c\u5217\u3068 X \u304a\u3088\u3073 Y \u8ef8\u306e\u30e9\u30d9\u30eb\u3092\u884c\u5217\u3067\u6e21\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u304d\u307e\u3059\u3002\n>\n>>```{python:}\n>># \u6b63\u65b9\u884c\u5217\u3068 X \u304a\u3088\u3073 Y \u306e\u30e9\u30d9\u30eb\u306e\u884c\u5217\u3092\u6e21\u3059\n>>def draw_heatmap(data, row_labels, column_labels):\n>>    # \u63cf\u753b\u3059\u308b\n>>    fig, ax = plt.subplots()\n>>    heatmap = ax.pcolor(data, cmap=plt.cm.Blues)\n>>\n>>    ax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False)\n>>    ax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False)\n>>\n>>    ax.invert_yaxis()\n>>    ax.xaxis.tick_top()\n>>\n>>    ax.set_xticklabels(row_labels, minor=False)\n>>    ax.set_yticklabels(column_labels, minor=False)\n>>    plt.show()\n>>    plt.savefig('image.png')\n>>\n>>    return heat map\n>>\n>>```\n>\n\n\u4e0a\u8a18\u306e\u8a18\u4e8b \u3067\u3001\n\n___\n\n* \u5f15\u6570 \u306b \u6e21\u3059\u3001DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u4e0a\u8a18\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5909\u6570\u540d \u306f *data*\uff09\u3068\u3057\u3066\u3001\n* dataframe_obj.corr() \u3067 \u4f5c\u6210\u3057\u305f corr_matrix_df\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092 \u9078\u629e\u3059\u308b\n\n___\n\n\u3053\u3068 \u3067\u3001dataframe_obj \u306e \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u3092 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u3067 \u53ef\u8996\u5316\u3057\u305f\u30b0\u30e9\u30d5 \u3092 \u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3042\u308b\u5217\u30e9\u30d9\u30eb\uff08Y\u8ef8\uff09\u3068 \u3042\u308b\u5217\u30e9\u30d9\u30eb\uff08X\u8ef8\uff09\u3068\u306e\u9593\u306e\uff12\u5909\u6570\uff08 \uff1d\uff12\u5217 \uff09\u9593 \u306e \u76f8\u95a2\u4fc2\u6570 \u306e \u6570\u5024\u306e\u5927\u304d\u3055 \u3067\u3001\u8272 \u304c \u4ed8\u3051\u3089\u308c\u308b\u3002\n\n\n__\uff08 \u4ee5\u4e0b \u3082 \u53c2\u8003 \u306b \u306a\u308b \uff09__\n\n___\n\n* [stackoverflow, _Heatmap in matplotlib with pcolor?_](http://stackoverflow.com/questions/14391959/heatmap-in-matplotlib-with-pcolor)\n\n* [OpenBook Masato Naka \u300c[Pandas]DataFrame\u306e\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u300d](https://openbook4.me/users/7/sections/1398)\n\n* [hik0107\u3055\u3093 Quita\u8a18\u4e8b\u300cPython\u3067Pandas\u306ePlot\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u30c7\u30fc\u30bf\u52a0\u5de5\u304b\u3089\u30b0\u30e9\u30d5\u4f5c\u6210\u307e\u3067\u30de\u30b8\u3067\u30b7\u30fc\u30e0\u30ec\u30b9\u300d](http://qiita.com/hik0107/items/de5785f680096df93efa)\n* [hik0107\u3055\u3093 Quita\u8a18\u4e8b \u300cPython \u3067\u30c7\u30fc\u30bf\u53ef\u8996\u5316 - \u30ab\u30c3\u30b3\u3044\u3044\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u63cf\u3053\u3046\u300d](http://qiita.com/hik0107/items/67ad4cfbc9e84032fc6b)\n\n___\n\n__dataframe_obj.corr() \u3067 \u5f97\u3089\u308c\u308b \u76f8\u95a2\u4fc2\u6570\u884c\u5217 \u306f\u3001\u540c\u3058\u300c\uff12\u3064\u306e\u30c7\u30fc\u30bf\u9805\u76ee\uff08\u30c7\u30fc\u30bf\u5217\uff09\u9593\u306e\u76f8\u95a2\u4fc2\u6570\u300d\u304c \u8868\u793a\u3055\u308c\u308b \u30bb\u30eb \u304c\u3001\u4e0a\u4e09\u89d2\u884c\u5217\uff08\u4ee5\u4e0b \u306e \u300c\uff11\u300d \u3067 \u57cb\u3081\u305f\u9818\u57df\uff09\u3068\u3001\u4e0b\u4e09\u89d2\u884c\u5217\uff08\u4ee5\u4e0b \u306e \u300c\uff10\u300d \u3067 \u57cb\u3081\u305f\u9818\u57df\uff09\u306e\uff12\u304b\u6240 \u306b \u51fa\u73fe\u3059\u308b\u3002__\n\n__\u4ee5\u4e0b\u306e\u8a18\u4e8b \u306e \u3088\u3046 \u306b\u3001\u300c\uff11\u300d\u306e\u90e8\u5206\uff08\uff1d\u4e0a\u4e09\u89d2\u884c\u5217\uff09 \u3092 \u30de\u30b9\u30ad\u30f3\u30b0\u51e6\u7406 \u3067 \u6368\u3066\u308b \u3068 \u3088\u3044\u3002__\n\n* [TomHortons\u3055\u3093 Qiita\u8a18\u4e8b \u300c\u76f8\u95a2\u4fc2\u6570\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089\u5206\u985e\u554f\u984c\u3078\u5f79\u7acb\u3064\u5909\u6570\u3092\u898b\u3064\u3051\u308b\u300d](http://qiita.com/TomHortons/items/a9e1eddc54a8cecaf797)\n\n\uff08 \u4ee5\u4e0b\u3001TomHorton\u3055\u3093 \u306e \u8a18\u4e8b \u3088\u308a \u8ee2\u8f09 \uff09\n\n<img width=\"896\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-11 21.25.51.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/681bf217-94d5-a966-e634-00293fcfa025.png\">\n\n\uff08 \u4ee5\u4e0b\u3001TomHorton\u3055\u3093 \u306e \u8a18\u4e8b \u3088\u308a \u8ee2\u8f09 \uff09\n\n<img width=\"888\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-11 21.31.59.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/c5911876-517b-4e59-934d-d1be1ee4c856.png\">\n\n\uff08 \u6700\u521d \u306b \u8ee2\u8f09\u3055\u305b\u3066\u9802\u3044\u305f \u753b\u9762\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u4e2d\u306e\u30b3\u30fc\u30c9 \u306f\u3001 \u6a2a\u65b9\u5411\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u306a\u3044\u3068 \u5168\u4f53 \u304c \u898b\u3048\u306a\u3044 \u306e\u3067\u3001\u4ee5\u4e0b \u306b \u518d\u8ee2\u8f09 \uff09\n\n<img width=\"897\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-11 21.38.33.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/cc8bd960-ad82-a509-3db4-2bcd6c1ec62a.png\">\n\n<img width=\"887\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-11 21.38.47.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/0b15ed96-a1d5-725f-815f-beb2e3715235.png\">\n", "tags": ["Python", "python3", "pandas", "DataFrame", "\u30c7\u30fc\u30bf\u5206\u6790"]}