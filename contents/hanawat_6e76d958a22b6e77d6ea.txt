{"context": "Swift3\u304c\u843d\u3061\u7740\u3044\u3066\u3001\u305d\u308d\u305d\u308dSwift4\u306b\u5411\u3051\u3066\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u3092\u8003\u3048\u59cb\u3081\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u9803\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u305d\u3046\u3001\u4f11\u307f\u306a\u3093\u3066\u306a\u3044\u3093\u3067\u3059\ud83d\ude2d Swift Evolution\u306e\u898b\u3084\u3059\u3044\u30b5\u30a4\u30c8\u304c\u3067\u304d\u3066\u3044\u3044\u6a5f\u4f1a\u3060\u3063\u305f\u306e\u3067\u30012017.1.27\u6642\u70b9\u306e Accepted \u3067\u672a\u5b9f\u88c5\u306e\u3082\u306e\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nSE-0068 Expanding Swift Self to class members and value types\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md\nSwift3.0\u304b\u3089\u306f dynamicType \u304b\u3089 type(of:) \u306b\u306a\u3063\u305f\u81ea\u8eab\u306e\u30af\u30e9\u30b9\u307e\u305f\u306f\u578b\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u304c Self \u3067\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001\u540d\u524d\u304c\u9577\u3044\u3068\u3046\u3093\u3056\u308a\u3057\u3066\u305f\u306e\u3067\u5730\u5473\u306b\u5b09\u3057\u3044\u3067\u3059\u3002\nstruct FooFooFooFooFoo {\n    static func bar() { }\n    func baz() {\n        FooFooFooFooFoo.bar() // Before\n        type(of: self).bar()  // Before\n        Self.bar() // After\n    }\n}\n\n\nSE-0042 Flattening the function type of unapplied method references\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md\nUnapplied Method Reference (\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u578b\u304b\u3089\u76f4\u63a5\u547c\u3073\u51fa\u3057\u3066\u95a2\u6570\u3068\u3057\u3066\u5f97\u308b\u3082\u306e)\u306e\u8fd4\u308a\u5024\u304c\u30d5\u30e9\u30c3\u30c8\u306a\u72b6\u614b\u3067\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u901a\u5e38\u30ab\u30fc\u30ea\u30fc\u5316\u3067\u306f f(1)(2) \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u3068\u308b\u306e\u3067\u73fe\u72b6\u304c\u6b63\u3057\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u304c\u3001Swift\u306e\u5834\u5408\u306f reduce(0, +) \u306e\u3088\u3046\u306b\u5f15\u6570\u3092\u4e26\u3079\u3066\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306b\u5408\u308f\u305b\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\u4e0b\u8a18\u306e\u3088\u3046\u306b map \u306b Unapplied Method Reference \u3092\u305d\u306e\u307e\u307e\u6e21\u3057\u3066\u3082\u3001\u95a2\u6570\u306e\u30cd\u30b9\u30c8\u304c\u3072\u3068\u3064\u6df1\u3044\u306e\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3057\u307e\u3059\u3002\nfunc sortedArrays<T: Comparable>(arrays: [[T]]) -> [T] {\n\n    // Error: `map` expects [T] -> [T], but\n    // `Array.sorted` has type ([T]) -> () -> [T]\n    return arrays.map(Array.sorted)\n}\n\nstruct Foo {\n    let x: Int\n    func bar(y: Int) -> Int {\n        return x + y\n    }\n}\n\nlet f = Foo.bar // (Foo) -> (Int) -> Int\n\nlet g = f(Foo(x: 2))(3) // Before\nlet g = f(Foo(x: 2), 3) // After\n\n\nSE-0075 Adding a Build Configuration Import Test\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md\n\u4eca\u307e\u3067\u4f7f\u3048\u308b\u6a5f\u80fd(\u30e2\u30b8\u30e5\u30fc\u30eb)\u306f #if !os(OSX) \u306e\u3088\u3046\u306bOS\u3067\u5224\u5b9a\u3059\u308b\u3057\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u5f8c\u305d\u306eOS\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5bfe\u5fdc\u3057\u305f\u5834\u5408\u30b3\u30fc\u30c9\u306e\u6539\u4fee\u304c\u5fc5\u8981\u306b\u306a\u308a\u3001\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u591a\u3044Swift\u3067\u306f\u8106\u3044\u5b9f\u88c5\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3002\u305d\u3053\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b canImport(Cocoa) \u3067\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u5224\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n#if canImport(UIKit)\n   // UIKit-based code\n   #elseif canImport(Cocoa)\n   // OSX code\n   #elseif\n   // Workaround/text, whatever\n#endif\n\n\nSE-0104 Protocol-oriented integers\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md\nSwift\u306e\u6574\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u9069\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u307f\u305f\u3044\u3067 Int8 \u3084 Int16 \u306a\u3069\u3092\u53d7\u3051\u53d6\u308b\u6574\u6570\u578b\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306a\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u51e6\u7406\u306a\u3069\u3092\u66f8\u304f\u306e\u306f\u5bb9\u6613\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3053\u306e\u30d6\u30ed\u30b0\u3067\u306f\u6574\u6570\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6301\u305f\u305b\u3088\u3046\u3068\u8a66\u307f\u3066\u307e\u3059\u3002\nlet foo: Int8 = 1\nlet bar = 2\n\n// error: binary operator '<<' cannot be applied\n// to operands of type 'Int8' and 'Int'\nlet baz = foo << bar\n\n\u4eca\u5f8c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u306e\u4f53\u578b\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u4e0a\u8a18\u306e\u3088\u3046\u306a\u578b\u306e\u9055\u3044\u306b\u3088\u308b\u6f14\u7b97\u304c\u884c\u3048\u306a\u3044\u72b6\u614b\u3092\u89e3\u6d88\u3055\u308c\u3001\u6574\u6570\u306e\u3069\u306e\u578b\u306a\u306e\u304b\u6c17\u306b\u3057\u306a\u304c\u3089\u6f14\u7b97\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u3042\u3068\u306f\u6574\u6570\u306e\u62e1\u5f35\u304c\u5bb9\u6613\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u3061\u3087\u3063\u3068\u3069\u3093\u306a\u7528\u9014\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u2026\n                +--------------+  +-------------+\n        +------>+  Arithmetic  |  | Comparable  |\n        |       |   (+,-,*,/)  |  | (==,<,>,...)|\n        |       +-------------++  +---+---------+\n        |                     ^       ^\n+-------+------------+        |       |\n|  SignedArithmetic  |      +-+-------+------+\n|     (unary -)      |      |  BinaryInteger |\n+------+-------------+      |  (words,%,...) |\n       ^                    ++---+-----+-----+\n       |         +-----------^   ^     ^-----------+\n       |         |               |                 |\n+------+---------++    +---------+-------------+  ++------------------+\n|  SignedInteger  |    |  FixedWidthInteger    |  |  UnsignedInteger  |\n|                 |    | (bitwise,overflow,...)|  |                   |\n+---------------+-+    +-+-----------------+---+  ++------------------+\n                ^        ^                 ^       ^\n                |        |                 |       |\n                |        |                 |       |\n               ++--------+-+             +-+-------+-+\n               |Int family |-+           |UInt family|-+\n               +-----------+ |           +-----------+ |\n                 +-----------+             +-----------+\n\n\nSE-0142 Permit where clauses to constrain associated types\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md\nassociatedtype \u306b where \u53e5\u304c\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u7d50\u69cb\u5b09\u3057\u3044\u72b6\u6cc1\u304c\u51fa\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u4f8b\u3048\u3070 Sequence \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6e96\u62e0\u3057\u305f associatedtype \u3092\u5ba3\u8a00\u3059\u308b\u6642\u306b\u4e2d\u8eab\u306e Element \u306e\u578b\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u95a2\u6570\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308b\u306e\u3067\u6271\u3044\u3084\u3059\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\nprotocol Foo {\n    associatedtype Bar: Sequence where Bar.Iterator.Element == Int\n    func baz() -> Bar\n}\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306e\u4fee\u6b63\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30d7\u30ed\u30c8\u30b3\u30eb\u5ba3\u8a00\u6642\u306b\u3082 where \u53e5\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nprotocol Foo : Sequence where Iterator.Element == Int { ... }\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u5ba3\u8a00\u6642\u306b\u4f7f\u3048\u308b where \u53e5\u306f\u89aa\u306e\u30d7\u30ed\u30c8\u30b3\u30eb(\u3053\u306e\u5834\u5408 Sequence )\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u578b\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u307f\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u6642\u306f associatedtype \u3092\u4f7f\u3048\u3070\u3044\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n// error: Use of undefined associated type 'Counter'\nprotocol Foo: Sequence where Counter: Bar {\n    associatedtype Counter\n}\n\nprotocol Foo: Sequence {\n    associatedtype Counter: Bar\n}\n\n\nSE-0143 Conditional conformances\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md\n\u578b\u306e\u62e1\u5f35\u3092\u3059\u308b\u6642\u306b where \u53e5\u3092\u4f7f\u3063\u3066\u3001\u3042\u308b\u6761\u4ef6\u4e0b\u306e\u6642\u306e\u307f\u62e1\u5f35\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070 Array \u306e\u4e2d\u8eab\u306e Element \u304c Equatable \u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070 Array \u81ea\u4f53\u3082 Equatable \u306b\u6e96\u62e0\u3055\u305b\u308b\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\nextension Array: Equatable where Element: Equatable {\n  static func ==(lhs: Array<Element>, rhs: Array<Element>) -> Bool { ... }\n}\n\n\u203b \u73fe\u72b6\u306e Array \u3067\u3082\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u4f7f\u3048\u308b\u306e\u306f\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3053\u308c\u3088\u308a\u3082\u4e0a\u8a18\u306e\u6761\u4ef6\u4ed8\u304d\u62e1\u5f35\u306e\u65b9\u304c\u3069\u3093\u306a Array \u3067\u3042\u308c\u3070\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u3064\u304b\u3048\u308b\u306e\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\npublic func ==<Element : Equatable>(lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool\n\nSE-0142\u3068\u5408\u308f\u305b\u3066\u307f\u308b\u3068\u578b\u30c1\u30a7\u30c3\u30af\u304c\u52d5\u7684\u306b\u884c\u3048\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\u4eca\u307e\u3067\u306f Type Erasure \u306e\u3088\u3046\u306a\u9b54\u6cd5\u304c\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u5f8c\u306f\u610f\u8b58\u3057\u306a\u3044\u3067\u3082\u81ea\u7136\u306b\u52d5\u7684\u306a\u578b\u30c1\u30a7\u30c3\u30af\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u4eca\u5f8c\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8997\u3044\u3066\u307f\u3066\u3082\u3044\u3044\u304b\u3082\u3067\u3059\ud83d\udc4f\nSwift3\u304c\u843d\u3061\u7740\u3044\u3066\u3001\u305d\u308d\u305d\u308dSwift4\u306b\u5411\u3051\u3066\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u3092\u8003\u3048\u59cb\u3081\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u9803\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u305d\u3046\u3001\u4f11\u307f\u306a\u3093\u3066\u306a\u3044\u3093\u3067\u3059\ud83d\ude2d [Swift Evolution](https://apple.github.io/swift-evolution/)\u306e\u898b\u3084\u3059\u3044\u30b5\u30a4\u30c8\u304c\u3067\u304d\u3066\u3044\u3044\u6a5f\u4f1a\u3060\u3063\u305f\u306e\u3067\u30012017.1.27\u6642\u70b9\u306e *Accepted* \u3067\u672a\u5b9f\u88c5\u306e\u3082\u306e\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# SE-0068 Expanding Swift Self to class members and value types\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md\n\nSwift3.0\u304b\u3089\u306f `dynamicType` \u304b\u3089 `type(of:)` \u306b\u306a\u3063\u305f\u81ea\u8eab\u306e\u30af\u30e9\u30b9\u307e\u305f\u306f\u578b\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u304c `Self` \u3067\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u4f7f\u7528\u3059\u308b\u969b\u306b\u3001\u540d\u524d\u304c\u9577\u3044\u3068\u3046\u3093\u3056\u308a\u3057\u3066\u305f\u306e\u3067\u5730\u5473\u306b\u5b09\u3057\u3044\u3067\u3059\u3002\n\n```swift\nstruct FooFooFooFooFoo {\n    static func bar() { }\n    func baz() {\n        FooFooFooFooFoo.bar() // Before\n        type(of: self).bar()  // Before\n        Self.bar() // After\n    }\n}\n```\n\n# SE-0042 Flattening the function type of unapplied method references\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0042-flatten-method-types.md\n\n*Unapplied Method Reference* (\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u578b\u304b\u3089\u76f4\u63a5\u547c\u3073\u51fa\u3057\u3066\u95a2\u6570\u3068\u3057\u3066\u5f97\u308b\u3082\u306e)\u306e\u8fd4\u308a\u5024\u304c\u30d5\u30e9\u30c3\u30c8\u306a\u72b6\u614b\u3067\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u901a\u5e38\u30ab\u30fc\u30ea\u30fc\u5316\u3067\u306f `f(1)(2)` \u306e\u3088\u3046\u306b\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u3068\u308b\u306e\u3067\u73fe\u72b6\u304c\u6b63\u3057\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u304c\u3001Swift\u306e\u5834\u5408\u306f `reduce(0, +)` \u306e\u3088\u3046\u306b\u5f15\u6570\u3092\u4e26\u3079\u3066\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u306b\u5408\u308f\u305b\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306b `map` \u306b *Unapplied Method Reference* \u3092\u305d\u306e\u307e\u307e\u6e21\u3057\u3066\u3082\u3001\u95a2\u6570\u306e\u30cd\u30b9\u30c8\u304c\u3072\u3068\u3064\u6df1\u3044\u306e\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3057\u307e\u3059\u3002\n\n```swift\nfunc sortedArrays<T: Comparable>(arrays: [[T]]) -> [T] {\n\n    // Error: `map` expects [T] -> [T], but\n    // `Array.sorted` has type ([T]) -> () -> [T]\n    return arrays.map(Array.sorted)\n}\n```\n\n```swift\nstruct Foo {\n    let x: Int\n    func bar(y: Int) -> Int {\n        return x + y\n    }\n}\n\nlet f = Foo.bar // (Foo) -> (Int) -> Int\n\nlet g = f(Foo(x: 2))(3) // Before\nlet g = f(Foo(x: 2), 3) // After\n```\n\n# SE-0075 Adding a Build Configuration Import Test\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md\n\n\u4eca\u307e\u3067\u4f7f\u3048\u308b\u6a5f\u80fd(\u30e2\u30b8\u30e5\u30fc\u30eb)\u306f `#if !os(OSX)` \u306e\u3088\u3046\u306bOS\u3067\u5224\u5b9a\u3059\u308b\u3057\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u5f8c\u305d\u306eOS\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5bfe\u5fdc\u3057\u305f\u5834\u5408\u30b3\u30fc\u30c9\u306e\u6539\u4fee\u304c\u5fc5\u8981\u306b\u306a\u308a\u3001\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u591a\u3044Swift\u3067\u306f\u8106\u3044\u5b9f\u88c5\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3002\u305d\u3053\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b `canImport(Cocoa)` \u3067\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u5224\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\n#if canImport(UIKit)\n   // UIKit-based code\n   #elseif canImport(Cocoa)\n   // OSX code\n   #elseif\n   // Workaround/text, whatever\n#endif\n```\n\n# SE-0104 Protocol-oriented integers\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md\n\nSwift\u306e\u6574\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u9069\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u307f\u305f\u3044\u3067 `Int8` \u3084 `Int16` \u306a\u3069\u3092\u53d7\u3051\u53d6\u308b\u6574\u6570\u578b\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306a\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u51e6\u7406\u306a\u3069\u3092\u66f8\u304f\u306e\u306f\u5bb9\u6613\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002[\u3053\u306e\u30d6\u30ed\u30b0](http://blog.krzyzanowskim.com/2015/03/01/swift_madness_of_generic_integer/)\u3067\u306f\u6574\u6570\u306b\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6301\u305f\u305b\u3088\u3046\u3068\u8a66\u307f\u3066\u307e\u3059\u3002\n\n```swift\nlet foo: Int8 = 1\nlet bar = 2\n\n// error: binary operator '<<' cannot be applied\n// to operands of type 'Int8' and 'Int'\nlet baz = foo << bar\n```\n\n\u4eca\u5f8c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u306e\u4f53\u578b\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u4e0a\u8a18\u306e\u3088\u3046\u306a\u578b\u306e\u9055\u3044\u306b\u3088\u308b\u6f14\u7b97\u304c\u884c\u3048\u306a\u3044\u72b6\u614b\u3092\u89e3\u6d88\u3055\u308c\u3001\u6574\u6570\u306e\u3069\u306e\u578b\u306a\u306e\u304b\u6c17\u306b\u3057\u306a\u304c\u3089\u6f14\u7b97\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u3042\u3068\u306f\u6574\u6570\u306e\u62e1\u5f35\u304c\u5bb9\u6613\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u3061\u3087\u3063\u3068\u3069\u3093\u306a\u7528\u9014\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u2026\n\n```\n                +--------------+  +-------------+\n        +------>+  Arithmetic  |  | Comparable  |\n        |       |   (+,-,*,/)  |  | (==,<,>,...)|\n        |       +-------------++  +---+---------+\n        |                     ^       ^\n+-------+------------+        |       |\n|  SignedArithmetic  |      +-+-------+------+\n|     (unary -)      |      |  BinaryInteger |\n+------+-------------+      |  (words,%,...) |\n       ^                    ++---+-----+-----+\n       |         +-----------^   ^     ^-----------+\n       |         |               |                 |\n+------+---------++    +---------+-------------+  ++------------------+\n|  SignedInteger  |    |  FixedWidthInteger    |  |  UnsignedInteger  |\n|                 |    | (bitwise,overflow,...)|  |                   |\n+---------------+-+    +-+-----------------+---+  ++------------------+\n                ^        ^                 ^       ^\n                |        |                 |       |\n                |        |                 |       |\n               ++--------+-+             +-+-------+-+\n               |Int family |-+           |UInt family|-+\n               +-----------+ |           +-----------+ |\n                 +-----------+             +-----------+\n ```\n\n# SE-0142 Permit where clauses to constrain associated types\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md\n\n`associatedtype` \u306b `where` \u53e5\u304c\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u7d50\u69cb\u5b09\u3057\u3044\u72b6\u6cc1\u304c\u51fa\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u4f8b\u3048\u3070 `Sequence` \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u6e96\u62e0\u3057\u305f `associatedtype` \u3092\u5ba3\u8a00\u3059\u308b\u6642\u306b\u4e2d\u8eab\u306e `Element` \u306e\u578b\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306a\u3069\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u95a2\u6570\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308b\u306e\u3067\u6271\u3044\u3084\u3059\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n```swift\nprotocol Foo {\n    associatedtype Bar: Sequence where Bar.Iterator.Element == Int\n    func baz() -> Bar\n}\n```\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306e\u4fee\u6b63\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30d7\u30ed\u30c8\u30b3\u30eb\u5ba3\u8a00\u6642\u306b\u3082 `where` \u53e5\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n```swift\nprotocol Foo : Sequence where Iterator.Element == Int { ... }\n```\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u5ba3\u8a00\u6642\u306b\u4f7f\u3048\u308b `where` \u53e5\u306f\u89aa\u306e\u30d7\u30ed\u30c8\u30b3\u30eb(\u3053\u306e\u5834\u5408 `Sequence` )\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u578b\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u307f\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u6642\u306f `associatedtype` \u3092\u4f7f\u3048\u3070\u3044\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n\n```swift\n// error: Use of undefined associated type 'Counter'\nprotocol Foo: Sequence where Counter: Bar {\n    associatedtype Counter\n}\n\nprotocol Foo: Sequence {\n    associatedtype Counter: Bar\n}\n```\n\n# SE-0143 Conditional conformances\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md\n\n\u578b\u306e\u62e1\u5f35\u3092\u3059\u308b\u6642\u306b `where` \u53e5\u3092\u4f7f\u3063\u3066\u3001\u3042\u308b\u6761\u4ef6\u4e0b\u306e\u6642\u306e\u307f\u62e1\u5f35\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070 `Array` \u306e\u4e2d\u8eab\u306e `Element` \u304c `Equatable` \u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070 `Array` \u81ea\u4f53\u3082 `Equatable` \u306b\u6e96\u62e0\u3055\u305b\u308b\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\n\n```swift\nextension Array: Equatable where Element: Equatable {\n  static func ==(lhs: Array<Element>, rhs: Array<Element>) -> Bool { ... }\n}\n```\n\n\u203b \u73fe\u72b6\u306e `Array` \u3067\u3082\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u4f7f\u3048\u308b\u306e\u306f\u4e0b\u8a18\u306e\u95a2\u6570\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3053\u308c\u3088\u308a\u3082\u4e0a\u8a18\u306e\u6761\u4ef6\u4ed8\u304d\u62e1\u5f35\u306e\u65b9\u304c\u3069\u3093\u306a `Array` \u3067\u3042\u308c\u3070\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u3064\u304b\u3048\u308b\u306e\u304b\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n```swift\npublic func ==<Element : Equatable>(lhs: ContiguousArray<Element>, rhs: ContiguousArray<Element>) -> Bool\n```\n\nSE-0142\u3068\u5408\u308f\u305b\u3066\u307f\u308b\u3068\u578b\u30c1\u30a7\u30c3\u30af\u304c\u52d5\u7684\u306b\u884c\u3048\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\u4eca\u307e\u3067\u306f *Type Erasure* \u306e\u3088\u3046\u306a\u9b54\u6cd5\u304c\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u5f8c\u306f\u610f\u8b58\u3057\u306a\u3044\u3067\u3082\u81ea\u7136\u306b\u52d5\u7684\u306a\u578b\u30c1\u30a7\u30c3\u30af\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002[\u3053\u3053](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md)\u3067\u4eca\u5f8c\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8997\u3044\u3066\u307f\u3066\u3082\u3044\u3044\u304b\u3082\u3067\u3059\ud83d\udc4f\n", "tags": ["Swift", "swift3", "swift4"]}