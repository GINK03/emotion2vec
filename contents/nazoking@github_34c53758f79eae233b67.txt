{"context": "http://scikit-learn.org/stable/tutorial/statistical_inference/unsupervised_learning.html \u3092 google\u7ffb\u8a33\u3057\u305f\nscikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21\n\u79d1\u5b66\u7684\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u7d71\u8a08\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21\n\u524d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8\n\n\n\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\uff1a\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u3092\u6c42\u3081\u308b\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff1a\u89b3\u6e2c\u5024\u3092\u307e\u3068\u3081\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u89e3\u6c7a\u3055\u308c\u305f\u554f\u984c\n\u8679\u5f69\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u30013\u7a2e\u985e\u306e\u8679\u5f69\u304c\u3042\u308b\u304c\u3001\u30bf\u30ad\u30bd\u30ce\u30df\u30b9\u30c8\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\u305f\u3081\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u304c\u306a\u3044\u5834\u5408\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30bf\u30b9\u30af\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\u89b3\u6e2c\u3092\u30af\u30e9\u30b9\u30bf\u3068\u547c\u3070\u308c\u308b\u3088\u304f\u5206\u96e2\u3055\u308c\u305f\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\nK\u5e73\u5747\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u7570\u306a\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u57fa\u6e96\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u591a\u6570\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u3082\u5358\u7d14\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f K\u5e73\u5747 \u3067\u3042\u308b\u3002\n\n>>> from sklearn import cluster, datasets\n>>> iris = datasets.load_iris()\n>>> X_iris = iris.data\n>>> y_iris = iris.target\n\n>>> k_means = cluster.KMeans(n_clusters=3)\n>>> k_means.fit(X_iris) \nKMeans(algorithm='auto', copy_x=True, init='k-means++', ...\n>>> print(k_means.labels_[::10])\n[1 1 1 1 1 0 0 0 0 0 2 2 2 2 2]\n>>> print(y_iris[::10])\n[0 0 0 0 0 1 1 1 1 1 2 2 2 2 2]\n\n\u8b66\u544a \u5730\u4e0a\u306e\u771f\u5b9f\u3092\u56de\u5fa9\u3059\u308b\u3053\u3068\u306f\u7d76\u5bfe\u306b\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305a\u3001\u9069\u5207\u306a\u6570\u306e\u30af\u30e9\u30b9\u30bf\u3092\u9078\u629e\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u7b2c2\u306b\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u521d\u671f\u5024\u306b\u654f\u611f\u3067\u3042\u308a\u3001scikit-learn \u306f\u3053\u306e\u554f\u984c\u3092\u7de9\u548c\u3059\u308b\u305f\u3081\u306b\u3044\u304f\u3064\u304b\u306e\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u304c\u3001\u5c40\u6240\u7684\u306a\u6700\u5c0f\u5024\u306b\u53ce\u307e\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\n\n\u60aa\u3044\u521d\u671f\u5316\n8\u3064\u306e\u30af\u30e9\u30b9\u30bf\nGround truth\n\n\n\n\n\n\n\n\n\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u904e\u5ea6\u306b\u89e3\u91c8\u3057\u306a\u3044\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f8b\uff1a\u30d9\u30af\u30c8\u30eb\u91cf\u5b50\u5316\n\u4e00\u822c\u7684\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3084KMeans\u306f\u3001\u60c5\u5831\u3092\u5727\u7e2e\u3059\u308b\u305f\u3081\u306e\u5c11\u6570\u306e\u6a21\u7bc4\u3092\u9078\u629e\u3059\u308b\u65b9\u6cd5\u3068\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u30d9\u30af\u30c8\u30eb\u91cf\u5b50\u5316\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3053\u308c\u306f\u30a4\u30e1\u30fc\u30b8\u3092\u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n>>> import scipy as sp\n>>> try:\n...    face = sp.face(gray=True)\n... except AttributeError:\n...    from scipy import misc\n...    face = misc.face(gray=True)\n>>> X = face.reshape((-1, 1)) # We need an (n_sample, n_feature) array\n>>> k_means = cluster.KMeans(n_clusters=5, n_init=1)\n>>> k_means.fit(X) \nKMeans(algorithm='auto', copy_x=True, init='k-means++', ...\n>>> values = k_means.cluster_centers_.squeeze()\n>>> labels = k_means.labels_\n>>> face_compressed = np.choose(labels, values)\n>>> face_compressed.shape = face.shape\n\n\n\n\n\u751f\u306e\u753b\u50cf\nK-\u91cf\u5b50\u5316\n\u7b49\u3057\u3044\u30d3\u30f3\n\u753b\u50cf\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\n\n\n\n\n\n\n\n\n\n\n\n\u968e\u5c64\u7684\u51dd\u96c6\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff1a\u30a6\u30a9\u30fc\u30c9\u6cd5\n\u968e\u5c64\u7684\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u65b9\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30bf\u306e\u968e\u5c64\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f\u30af\u30e9\u30b9\u30bf\u5206\u6790\u306e\u4e00\u7a2e\u3067\u3059\u3002\u4e00\u822c\u306b\u3001\u3053\u306e\u6280\u8853\u306e\u69d8\u3005\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\n\n\n\u51dd\u96c6\u578b - \u30dc\u30c8\u30e0\u30a2\u30c3\u30d7\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u5404\u89b3\u6e2c\u306f\u305d\u308c\u81ea\u8eab\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u3067\u958b\u59cb\u3057\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u7d50\u5408\u57fa\u6e96\u3092\u6700\u5c0f\u9650\u306b\u3059\u308b\u3088\u3046\u306a\u65b9\u6cd5\u3067\u96c6\u4e2d\u7684\u306b\u30de\u30fc\u30b8\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u95a2\u5fc3\u306e\u3042\u308b\u30af\u30e9\u30b9\u30bf\u304c\u307b\u3093\u306e\u308f\u305a\u304b\u306e\u89b3\u5bdf\u304b\u3089\u4f5c\u3089\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u7279\u306b\u8208\u5473\u6df1\u3044\u3002\u30af\u30e9\u30b9\u30bf\u306e\u6570\u304c\u591a\u3044\u5834\u5408\u3001k\u5e73\u5747\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u8a08\u7b97\u52b9\u7387\u304c\u826f\u3044\u3002\n\n\u5206\u679d\u578b - \u30c8\u30c3\u30d7\u30c0\u30a6\u30f3\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u3059\u3079\u3066\u306e\u89b3\u6e2c\u306f1\u3064\u306e\u30af\u30e9\u30b9\u30bf\u304b\u3089\u958b\u59cb\u3055\u308c\u3001\u968e\u5c64\u5185\u3092\u79fb\u52d5\u3059\u308b\u306b\u3064\u308c\u3066\u53cd\u5fa9\u7684\u306b\u5206\u5272\u3055\u308c\u307e\u3059\u3002\u591a\u6570\u306e\u30af\u30e9\u30b9\u30bf\u3092\u898b\u7a4d\u3082\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\uff081\u3064\u306e\u30af\u30e9\u30b9\u30bf\u3068\u3057\u3066\u958b\u59cb\u3057\u3001\u518d\u5e30\u7684\u306b\u5206\u5272\u3059\u308b\u3059\u3079\u3066\u306e\u89b3\u6e2c\u306e\u305f\u3081\u306b\uff09\u9045\u304f\u3001\u7d71\u8a08\u7684\u306b\u60aa\u610f\u306e\u3042\u308b\u3082\u306e\u3067\u3059\u3002\n\n\n\u63a5\u7d9a\u6027\u306b\u5236\u7d04\u306e\u3042\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u51dd\u96c6\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u63a5\u7d9a\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 scikit\u5185\u306e\u30b0\u30e9\u30d5\u306f\u3001\u305d\u306e\u96a3\u63a5\u884c\u5217\u306b\u3088\u3063\u3066\u8868\u3055\u308c\u307e\u3059\u3002\u591a\u304f\u306e\u5834\u5408\u3001\u30b9\u30d1\u30fc\u30b9\u884c\u5217\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u305f\u3068\u3048\u3070\u3001\u30a4\u30e1\u30fc\u30b8\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3068\u304d\u306b\u3001\u63a5\u7d9a\u3055\u308c\u305f\u9818\u57df\uff08\u63a5\u7d9a\u3055\u308c\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\uff09\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.image import grid_to_graph\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.utils.testing import SkipTest\nfrom sklearn.utils.fixes import sp_version\n\nif sp_version < (0, 12):\n    raise SkipTest(\"Skipping because SciPy version earlier than 0.12.0 and \"\n                   \"thus does not include the scipy.misc.face() image.\")\n\n\n###############################################################################\n# Generate data\ntry:\n    face = sp.face(gray=True)\nexcept AttributeError:\n    # Newer versions of scipy have face in misc\n    from scipy import misc\n    face = misc.face(gray=True)\n\n# Resize it to 10% of the original size to speed up the processing\nface = sp.misc.imresize(face, 0.10) / 255.\n\n\n\u7279\u5fb4\u306e\u51dd\u96c6\n\u6211\u3005\u306f\u3001\u6b21\u5143\u6570\u306e\u546a\u7e1b\u3001\u3059\u306a\u308f\u3061\u7279\u5fb4\u306e\u6570\u306b\u6bd4\u3079\u3066\u89b3\u5bdf\u91cf\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u3053\u3068\u3092\u7de9\u548c\u3059\u308b\u305f\u3081\u306b\u5e0c\u8584\u3055\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u51fa\u3057\u305f\u3002 \u3082\u30461\u3064\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u540c\u69d8\u306e\u7279\u5fb4\u3092\u7d71\u5408\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u7279\u5fb4\u306e\u51dd\u96c6\u3067\u3059\u3002 \u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u7279\u5fb4\u65b9\u5411\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3001\u63db\u8a00\u3059\u308b\u3068\u8ee2\u7f6e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n>>> digits = datasets.load_digits()\n>>> images = digits.images\n>>> X = np.reshape(images, (len(images), -1))\n>>> connectivity = grid_to_graph(*images[0].shape)\n\n>>> agglo = cluster.FeatureAgglomeration(connectivity=connectivity,\n...                                      n_clusters=32)\n>>> agglo.fit(X) \nFeatureAgglomeration(affinity='euclidean', compute_full_tree='auto',...\n>>> X_reduced = agglo.transform(X)\n\n>>> X_approx = agglo.inverse_transform(X_reduced)\n>>> images_approx = np.reshape(X_approx, images.shape)\n\n\ntransform \u30e1\u30bd\u30c3\u30c9\u3068 inverse_transform \u30e1\u30bd\u30c3\u30c9\n\u3044\u304f\u3064\u304b\u306e\u63a8\u5b9a\u5668\u306f\u3001\u4f8b\u3048\u3070\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6b21\u5143\u6570\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b transform \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n\u5206\u89e3\uff1a\u30b7\u30b0\u30ca\u30eb\u304b\u3089\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304a\u3088\u3073\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u307e\u3067\n\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\nX \u304c\u79c1\u305f\u3061\u306e\u591a\u5909\u91cf\u30c7\u30fc\u30bf\u3067\u3042\u308b\u306a\u3089\u3070\u3001\u6211\u3005\u304c\u89e3\u6c7a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u554f\u984c\u306f\u3001\u305d\u308c\u3092\u5225\u306e\u89b3\u5bdf\u57fa\u6e96\u3067\u66f8\u304d\u76f4\u3059\u3053\u3068\u3067\u3059\uff1a\u6211\u3005\u306f\u3001\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0 $L$ \u3068 $X=L C$ \u306e\u3088\u3046\u306a\u69cb\u6210\u8981\u7d20 $C$ \u306e\u96c6\u5408\u3092\u5b66\u7fd2\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\u69cb\u6210\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306e\u7570\u306a\u308b\u57fa\u6e96\u304c\u5b58\u5728\u3059\u308b\u3002\n\n\u4e3b\u6210\u5206\u5206\u6790\uff1aPCA\n\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09\u306f\u3001\u4fe1\u53f7\u306e\u6700\u5927\u5206\u6563\u3092\u8aac\u660e\u3059\u308b\u9023\u7d9a\u6210\u5206\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n \n\u4e0a\u8a18\u306e\u89b3\u6e2c\u7d50\u679c\u306b\u307e\u305f\u304c\u308b\u70b9\u7fa4\u306f\u3001\u3042\u308b\u65b9\u5411\u3067\u306f\u975e\u5e38\u306b\u5e73\u5766\u3067\u3059.3\u3064\u306e\u5358\u5909\u91cf\u7279\u5fb4\u306e\u3046\u3061\u306e1\u3064\u306f\u3001\u4ed6\u306e2\u3064\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u307b\u307c\u6b63\u78ba\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 PCA\u306f\u3001\u30c7\u30fc\u30bf\u304c\u5e73\u3089\u3067\u306a\u3044\u65b9\u5411\u3092\u898b\u3064\u3051\u308b\nPCA\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5909\u63db\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u4e3b\u306a\u90e8\u5206\u7a7a\u9593\u306b\u6295\u5f71\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> # \u6709\u52b9\u306a2\u3064\u306e\u6b21\u5143\u3060\u3051\u3092\u6301\u3064\u30b7\u30b0\u30ca\u30eb\u3092\u4f5c\u6210\u3059\u308b\n>>> x1 = np.random.normal(size=100)\n>>> x2 = np.random.normal(size=100)\n>>> x3 = x1 + x2\n>>> X = np.c_[x1, x2, x3]\n\n>>> from sklearn import decomposition\n>>> pca = decomposition.PCA()\n>>> pca.fit(X)\nPCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False)\n>>> print(pca.explained_variance_)  \n[  2.18565811e+00   1.19346747e+00   8.43026679e-32]\n\n>>> # \u898b\u3066\u306e\u901a\u308a\u3001\u6700\u521d\u306e2\u3064\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\n>>> pca.n_components = 2\n>>> X_reduced = pca.fit_transform(X)\n>>> X_reduced.shape\n(100, 2)\n\n\n\u72ec\u7acb\u6210\u5206\u5206\u6790\uff1aICA\n\u72ec\u7acb\u6210\u5206\u5206\u6790\uff08ICA\uff09 \u306f\u3001\u305d\u306e\u6210\u5206\u306e\u5206\u5e03\u304c\u6700\u5927\u91cf\u306e\u72ec\u7acb\u3057\u305f\u60c5\u5831\u3092\u904b\u3076\u3088\u3046\u306b\u6210\u5206\u3092\u9078\u629e\u3059\u308b\u3002 \u975e\u30ac\u30a6\u30b9 \u72ec\u7acb\u4fe1\u53f7\u3092\u5fa9\u5143\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n>>> # Generate sample data\n>>> time = np.linspace(0, 10, 2000)\n>>> s1 = np.sin(2 * time)  # Signal 1 : sinusoidal signal\n>>> s2 = np.sign(np.sin(3 * time))  # Signal 2 : square signal\n>>> S = np.c_[s1, s2]\n>>> S += 0.2 * np.random.normal(size=S.shape)  # Add noise\n>>> S /= S.std(axis=0)  # Standardize data\n>>> # Mix data\n>>> A = np.array([[1, 1], [0.5, 2]])  # Mixing matrix\n>>> X = np.dot(S, A.T)  # Generate observations\n\n>>> # Compute ICA\n>>> ica = decomposition.FastICA()\n>>> S_ = ica.fit_transform(X)  # Get the estimated sources\n>>> A_ = ica.mixing_.T\n>>> np.allclose(X,  np.dot(S_, A_) + ica.mean_)\nTrue\n\n\n\u6b21\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\nhttp://scikit-learn.org/stable/tutorial/statistical_inference/unsupervised_learning.html \u3092 google\u7ffb\u8a33\u3057\u305f\n[scikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21](http://qiita.com/nazoking@github/items/5160c11d1a5b3fe8f34c)\n[\u79d1\u5b66\u7684\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u7d71\u8a08\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21](http://qiita.com/nazoking@github/items/051911b0062a0bf48dc3)\n[\u524d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8](http://qiita.com/nazoking@github/items/1c5106a844084cd8539a)\n\n----\n\n# \u6559\u5e2b\u306a\u3057\u5b66\u7fd2\uff1a\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u3092\u6c42\u3081\u308b\n\n## \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff1a\u89b3\u6e2c\u5024\u3092\u307e\u3068\u3081\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\n\n### \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u89e3\u6c7a\u3055\u308c\u305f\u554f\u984c\n\u8679\u5f69\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u30013\u7a2e\u985e\u306e\u8679\u5f69\u304c\u3042\u308b\u304c\u3001\u30bf\u30ad\u30bd\u30ce\u30df\u30b9\u30c8\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\u305f\u3081\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u304c\u306a\u3044\u5834\u5408\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30bf\u30b9\u30af\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\u89b3\u6e2c\u3092\u30af\u30e9\u30b9\u30bf\u3068\u547c\u3070\u308c\u308b\u3088\u304f\u5206\u96e2\u3055\u308c\u305f\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n### K\u5e73\u5747\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\n\u7570\u306a\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u57fa\u6e96\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u591a\u6570\u5b58\u5728\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u3082\u5358\u7d14\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f [K\u5e73\u5747](http://scikit-learn.org/stable/modules/clustering.html#k-means) \u3067\u3042\u308b\u3002\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_cluster_iris_002.png)\n\n```python\n>>> from sklearn import cluster, datasets\n>>> iris = datasets.load_iris()\n>>> X_iris = iris.data\n>>> y_iris = iris.target\n\n>>> k_means = cluster.KMeans(n_clusters=3)\n>>> k_means.fit(X_iris) \nKMeans(algorithm='auto', copy_x=True, init='k-means++', ...\n>>> print(k_means.labels_[::10])\n[1 1 1 1 1 0 0 0 0 0 2 2 2 2 2]\n>>> print(y_iris[::10])\n[0 0 0 0 0 1 1 1 1 1 2 2 2 2 2]\n```\n\n\u8b66\u544a \u5730\u4e0a\u306e\u771f\u5b9f\u3092\u56de\u5fa9\u3059\u308b\u3053\u3068\u306f\u7d76\u5bfe\u306b\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305a\u3001\u9069\u5207\u306a\u6570\u306e\u30af\u30e9\u30b9\u30bf\u3092\u9078\u629e\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u7b2c2\u306b\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u521d\u671f\u5024\u306b\u654f\u611f\u3067\u3042\u308a\u3001scikit-learn \u306f\u3053\u306e\u554f\u984c\u3092\u7de9\u548c\u3059\u308b\u305f\u3081\u306b\u3044\u304f\u3064\u304b\u306e\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u304c\u3001\u5c40\u6240\u7684\u306a\u6700\u5c0f\u5024\u306b\u53ce\u307e\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n|\u60aa\u3044\u521d\u671f\u5316 | 8\u3064\u306e\u30af\u30e9\u30b9\u30bf | Ground truth|\n|-------|------|------|\n|![](http://scikit-learn.org/stable/_images/sphx_glr_plot_cluster_iris_003.png) |![](http://scikit-learn.org/stable/_images/sphx_glr_plot_cluster_iris_001.png) |![](http://scikit-learn.org/stable/_images/sphx_glr_plot_cluster_iris_004.png)|\n\n**\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u904e\u5ea6\u306b\u89e3\u91c8\u3057\u306a\u3044**\n\n#### \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4f8b\uff1a\u30d9\u30af\u30c8\u30eb\u91cf\u5b50\u5316\n\n\u4e00\u822c\u7684\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3084KMeans\u306f\u3001\u60c5\u5831\u3092\u5727\u7e2e\u3059\u308b\u305f\u3081\u306e\u5c11\u6570\u306e\u6a21\u7bc4\u3092\u9078\u629e\u3059\u308b\u65b9\u6cd5\u3068\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u3001\u30d9\u30af\u30c8\u30eb\u91cf\u5b50\u5316\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3053\u308c\u306f\u30a4\u30e1\u30fc\u30b8\u3092\u30dd\u30b9\u30bf\u30e9\u30a4\u30ba\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n```python\n>>> import scipy as sp\n>>> try:\n...    face = sp.face(gray=True)\n... except AttributeError:\n...    from scipy import misc\n...    face = misc.face(gray=True)\n>>> X = face.reshape((-1, 1)) # We need an (n_sample, n_feature) array\n>>> k_means = cluster.KMeans(n_clusters=5, n_init=1)\n>>> k_means.fit(X) \nKMeans(algorithm='auto', copy_x=True, init='k-means++', ...\n>>> values = k_means.cluster_centers_.squeeze()\n>>> labels = k_means.labels_\n>>> face_compressed = np.choose(labels, values)\n>>> face_compressed.shape = face.shape\n```\n\n|\u751f\u306e\u753b\u50cf|K-\u91cf\u5b50\u5316 |\u7b49\u3057\u3044\u30d3\u30f3|\u753b\u50cf\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0|\n|------|-----|-----|----|\n|![](http://scikit-learn.org/stable/_images/sphx_glr_plot_face_compress_001.png)| ![](http://scikit-learn.org/stable/_images/sphx_glr_plot_face_compress_003.png)| ![](http://scikit-learn.org/stable/_images/sphx_glr_plot_face_compress_002.png) | ![](http://scikit-learn.org/stable/_images/sphx_glr_plot_face_compress_004.png)|\n\n### \u968e\u5c64\u7684\u51dd\u96c6\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff1a\u30a6\u30a9\u30fc\u30c9\u6cd5\n\n\u968e\u5c64\u7684\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u65b9\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30bf\u306e\u968e\u5c64\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u305f\u30af\u30e9\u30b9\u30bf\u5206\u6790\u306e\u4e00\u7a2e\u3067\u3059\u3002\u4e00\u822c\u306b\u3001\u3053\u306e\u6280\u8853\u306e\u69d8\u3005\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\n\n  - **\u51dd\u96c6\u578b** - \u30dc\u30c8\u30e0\u30a2\u30c3\u30d7\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u5404\u89b3\u6e2c\u306f\u305d\u308c\u81ea\u8eab\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u3067\u958b\u59cb\u3057\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u7d50\u5408\u57fa\u6e96\u3092\u6700\u5c0f\u9650\u306b\u3059\u308b\u3088\u3046\u306a\u65b9\u6cd5\u3067\u96c6\u4e2d\u7684\u306b\u30de\u30fc\u30b8\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u95a2\u5fc3\u306e\u3042\u308b\u30af\u30e9\u30b9\u30bf\u304c\u307b\u3093\u306e\u308f\u305a\u304b\u306e\u89b3\u5bdf\u304b\u3089\u4f5c\u3089\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u7279\u306b\u8208\u5473\u6df1\u3044\u3002\u30af\u30e9\u30b9\u30bf\u306e\u6570\u304c\u591a\u3044\u5834\u5408\u3001k\u5e73\u5747\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u8a08\u7b97\u52b9\u7387\u304c\u826f\u3044\u3002\n  - **\u5206\u679d\u578b** - \u30c8\u30c3\u30d7\u30c0\u30a6\u30f3\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u3059\u3079\u3066\u306e\u89b3\u6e2c\u306f1\u3064\u306e\u30af\u30e9\u30b9\u30bf\u304b\u3089\u958b\u59cb\u3055\u308c\u3001\u968e\u5c64\u5185\u3092\u79fb\u52d5\u3059\u308b\u306b\u3064\u308c\u3066\u53cd\u5fa9\u7684\u306b\u5206\u5272\u3055\u308c\u307e\u3059\u3002\u591a\u6570\u306e\u30af\u30e9\u30b9\u30bf\u3092\u898b\u7a4d\u3082\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\uff081\u3064\u306e\u30af\u30e9\u30b9\u30bf\u3068\u3057\u3066\u958b\u59cb\u3057\u3001\u518d\u5e30\u7684\u306b\u5206\u5272\u3059\u308b\u3059\u3079\u3066\u306e\u89b3\u6e2c\u306e\u305f\u3081\u306b\uff09\u9045\u304f\u3001\u7d71\u8a08\u7684\u306b\u60aa\u610f\u306e\u3042\u308b\u3082\u306e\u3067\u3059\u3002\n\n#### \u63a5\u7d9a\u6027\u306b\u5236\u7d04\u306e\u3042\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\n\u51dd\u96c6\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u63a5\u7d9a\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 scikit\u5185\u306e\u30b0\u30e9\u30d5\u306f\u3001\u305d\u306e\u96a3\u63a5\u884c\u5217\u306b\u3088\u3063\u3066\u8868\u3055\u308c\u307e\u3059\u3002\u591a\u304f\u306e\u5834\u5408\u3001\u30b9\u30d1\u30fc\u30b9\u884c\u5217\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u305f\u3068\u3048\u3070\u3001\u30a4\u30e1\u30fc\u30b8\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3068\u304d\u306b\u3001\u63a5\u7d9a\u3055\u308c\u305f\u9818\u57df\uff08\u63a5\u7d9a\u3055\u308c\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\uff09\u3092\u53d6\u5f97\u3059\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_face_ward_segmentation_001.png)\n\n```python\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.image import grid_to_graph\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.utils.testing import SkipTest\nfrom sklearn.utils.fixes import sp_version\n\nif sp_version < (0, 12):\n    raise SkipTest(\"Skipping because SciPy version earlier than 0.12.0 and \"\n                   \"thus does not include the scipy.misc.face() image.\")\n\n\n###############################################################################\n# Generate data\ntry:\n    face = sp.face(gray=True)\nexcept AttributeError:\n    # Newer versions of scipy have face in misc\n    from scipy import misc\n    face = misc.face(gray=True)\n\n# Resize it to 10% of the original size to speed up the processing\nface = sp.misc.imresize(face, 0.10) / 255.\n```\n\n#### \u7279\u5fb4\u306e\u51dd\u96c6\n\n\u6211\u3005\u306f\u3001\u6b21\u5143\u6570\u306e\u546a\u7e1b\u3001\u3059\u306a\u308f\u3061\u7279\u5fb4\u306e\u6570\u306b\u6bd4\u3079\u3066\u89b3\u5bdf\u91cf\u304c\u4e0d\u5341\u5206\u3067\u3042\u308b\u3053\u3068\u3092\u7de9\u548c\u3059\u308b\u305f\u3081\u306b\u5e0c\u8584\u3055\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u51fa\u3057\u305f\u3002 \u3082\u30461\u3064\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u540c\u69d8\u306e\u7279\u5fb4\u3092\u7d71\u5408\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u7279\u5fb4\u306e\u51dd\u96c6\u3067\u3059\u3002 \u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u7279\u5fb4\u65b9\u5411\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3001\u63db\u8a00\u3059\u308b\u3068\u8ee2\u7f6e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_agglomeration_001.png)\n\n```python\n>>> digits = datasets.load_digits()\n>>> images = digits.images\n>>> X = np.reshape(images, (len(images), -1))\n>>> connectivity = grid_to_graph(*images[0].shape)\n\n>>> agglo = cluster.FeatureAgglomeration(connectivity=connectivity,\n...                                      n_clusters=32)\n>>> agglo.fit(X) \nFeatureAgglomeration(affinity='euclidean', compute_full_tree='auto',...\n>>> X_reduced = agglo.transform(X)\n\n>>> X_approx = agglo.inverse_transform(X_reduced)\n>>> images_approx = np.reshape(X_approx, images.shape)\n```\n\n##### `transform` \u30e1\u30bd\u30c3\u30c9\u3068 `inverse_transform` \u30e1\u30bd\u30c3\u30c9\n\n\u3044\u304f\u3064\u304b\u306e\u63a8\u5b9a\u5668\u306f\u3001\u4f8b\u3048\u3070\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6b21\u5143\u6570\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b `transform` \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n## \u5206\u89e3\uff1a\u30b7\u30b0\u30ca\u30eb\u304b\u3089\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304a\u3088\u3073\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u307e\u3067\n\n### \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\n\n`X` \u304c\u79c1\u305f\u3061\u306e\u591a\u5909\u91cf\u30c7\u30fc\u30bf\u3067\u3042\u308b\u306a\u3089\u3070\u3001\u6211\u3005\u304c\u89e3\u6c7a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u554f\u984c\u306f\u3001\u305d\u308c\u3092\u5225\u306e\u89b3\u5bdf\u57fa\u6e96\u3067\u66f8\u304d\u76f4\u3059\u3053\u3068\u3067\u3059\uff1a\u6211\u3005\u306f\u3001\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0 $L$ \u3068 $X=L C$ \u306e\u3088\u3046\u306a\u69cb\u6210\u8981\u7d20 $C$ \u306e\u96c6\u5408\u3092\u5b66\u7fd2\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\u69cb\u6210\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306e\u7570\u306a\u308b\u57fa\u6e96\u304c\u5b58\u5728\u3059\u308b\u3002\n\n### \u4e3b\u6210\u5206\u5206\u6790\uff1aPCA\n\n[\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09](http://scikit-learn.org/stable/modules/decomposition.html#pca)\u306f\u3001\u4fe1\u53f7\u306e\u6700\u5927\u5206\u6563\u3092\u8aac\u660e\u3059\u308b\u9023\u7d9a\u6210\u5206\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_pca_3d_001.png) ![](http://scikit-learn.org/stable/_images/sphx_glr_plot_pca_3d_002.png)\n\n\u4e0a\u8a18\u306e\u89b3\u6e2c\u7d50\u679c\u306b\u307e\u305f\u304c\u308b\u70b9\u7fa4\u306f\u3001\u3042\u308b\u65b9\u5411\u3067\u306f\u975e\u5e38\u306b\u5e73\u5766\u3067\u3059.3\u3064\u306e\u5358\u5909\u91cf\u7279\u5fb4\u306e\u3046\u3061\u306e1\u3064\u306f\u3001\u4ed6\u306e2\u3064\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u307b\u307c\u6b63\u78ba\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 PCA\u306f\u3001\u30c7\u30fc\u30bf\u304c\u5e73\u3089\u3067\u306a\u3044\u65b9\u5411\u3092\u898b\u3064\u3051\u308b\nPCA\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5909\u63db\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u4e3b\u306a\u90e8\u5206\u7a7a\u9593\u306b\u6295\u5f71\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```python\n>>> # \u6709\u52b9\u306a2\u3064\u306e\u6b21\u5143\u3060\u3051\u3092\u6301\u3064\u30b7\u30b0\u30ca\u30eb\u3092\u4f5c\u6210\u3059\u308b\n>>> x1 = np.random.normal(size=100)\n>>> x2 = np.random.normal(size=100)\n>>> x3 = x1 + x2\n>>> X = np.c_[x1, x2, x3]\n\n>>> from sklearn import decomposition\n>>> pca = decomposition.PCA()\n>>> pca.fit(X)\nPCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False)\n>>> print(pca.explained_variance_)  \n[  2.18565811e+00   1.19346747e+00   8.43026679e-32]\n\n>>> # \u898b\u3066\u306e\u901a\u308a\u3001\u6700\u521d\u306e2\u3064\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3060\u3051\u304c\u5f79\u306b\u7acb\u3061\u307e\u3059\n>>> pca.n_components = 2\n>>> X_reduced = pca.fit_transform(X)\n>>> X_reduced.shape\n(100, 2)\n```\n\n### \u72ec\u7acb\u6210\u5206\u5206\u6790\uff1aICA\n\n[\u72ec\u7acb\u6210\u5206\u5206\u6790\uff08ICA\uff09](http://scikit-learn.org/stable/modules/decomposition.html#ica) \u306f\u3001\u305d\u306e\u6210\u5206\u306e\u5206\u5e03\u304c\u6700\u5927\u91cf\u306e\u72ec\u7acb\u3057\u305f\u60c5\u5831\u3092\u904b\u3076\u3088\u3046\u306b\u6210\u5206\u3092\u9078\u629e\u3059\u308b\u3002 **\u975e\u30ac\u30a6\u30b9** \u72ec\u7acb\u4fe1\u53f7\u3092\u5fa9\u5143\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_ica_blind_source_separation_001.png)\n\n```python\n>>> # Generate sample data\n>>> time = np.linspace(0, 10, 2000)\n>>> s1 = np.sin(2 * time)  # Signal 1 : sinusoidal signal\n>>> s2 = np.sign(np.sin(3 * time))  # Signal 2 : square signal\n>>> S = np.c_[s1, s2]\n>>> S += 0.2 * np.random.normal(size=S.shape)  # Add noise\n>>> S /= S.std(axis=0)  # Standardize data\n>>> # Mix data\n>>> A = np.array([[1, 1], [0.5, 2]])  # Mixing matrix\n>>> X = np.dot(S, A.T)  # Generate observations\n\n>>> # Compute ICA\n>>> ica = decomposition.FastICA()\n>>> S_ = ica.fit_transform(X)  # Get the estimated sources\n>>> A_ = ica.mixing_.T\n>>> np.allclose(X,  np.dot(S_, A_) + ica.mean_)\nTrue\n```\n\n----\n[\u6b21\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8](http://qiita.com/nazoking@github/items/ffc840037c31c0f37171)\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "scikit-learn"]}