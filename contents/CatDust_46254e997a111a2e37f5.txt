{"context": "\u65e2\u306b\u88fd\u54c1\u3068\u3057\u3066\u306e\u6d3b\u7528\u4e8b\u4f8b\u304c\u3042\u308bPepper\u3000\u00d7\u3000MS Azure\u306eFaceAPI\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3057\u3063\u304b\u308a\u3057\u3066\u3044\u3066\u3001\u5b9f\u88c5\u3057\u3084\u3059\u3044\u306e\u3067\u662f\u975e\u304a\u8a66\u3057\u3092..\n\nAzure FaceAPI\u3000\u3056\u3063\u304f\u308a\u3057\u305f\u307e\u3068\u3081\nFaceAPI\u306b\u306f\u3001\u9854\u8a8d\u8a3c\u306b\u6b20\u304b\u305b\u306a\u3044\u4e3b\u306aAPI\u304c5\u3064\u3042\u308a\u307e\u3059\u3002\u9854\u306e\u691c\u51fa\u3092\u884c\u3046Detect\u3001\u9854\u306e\u8a8d\u8b58\u3092\u884c\u3046Identify\u3001Verify\u3001Find Similar\u3001Group\u3067\u3059\u3002\n\nFace Detection(\u9854\u306e\u691c\u51fa)\n\nDetect\n\u5199\u771f\u304b\u3089\u4eba\u9593\u306e\u9854\u3092\u691c\u51fa\u3059\u308bAPI\u3002\n\n\u691c\u51fa\u3055\u308c\u305f\u9854\u306b\u306fFaceId\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002FaceId\u306e\u671f\u9650\u306f\u3001Detect\u30b3\u30fc\u30eb\u5f8c24\u6642\u9593\u3002\n\u4e00\u3064\u306e\u753b\u50cf\u304b\u3089\u6700\u592764\u306e\u9854\u3092\u691c\u51fa\n\u753b\u50cf\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u3082\u3057\u304f\u306fURL\u3067\u6307\u5b9a\n\u691c\u51fa\u3057\u305f\u9854\u306e\u793a\u3059\u56db\u89d2\u5f62\uff08left, top, width, height\uff09\u3092\u53d6\u5f97\u3067\u304d\u308b\n\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001gender, age, head pose, facial hair, glasses\u7b49\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3067\u304d\u308b\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\n\nFace Recognition(\u9854\u8a8d\u8b58)\n\u9854\u3092\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306eAPI\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff14\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\nIdentify\uff08\u9854\u8b58\u5225\uff09\nDetect\u306b\u3088\u308a\u5272\u308a\u632f\u3089\u308c\u305fFaceId\u3068\u4e00\u81f4\u3059\u308b\u9854\u3092\u3001\u6307\u5b9a\u3059\u308bPersonGroup\uff08\u5f8c\u8ff0\u3001\u9854\u306e\u30bb\u30c3\u30c8\uff09\u304b\u3089\u691c\u7d22\u3057\u3001\u5019\u88dc\u8005\u3092\u8fd4\u3059API\u3002\n\n\u5019\u88dc\u306e\u9854\u306f\u3001\u985e\u4f3c\u70b9\u3092\u8a08\u7b97\u3057PersonGroup\u306e\u4e2d\u304b\u3089\u9ad8\u3044\u9806\u306b\u5019\u88dc\u3092\u8fd4\u3059\u3002\nPersonGroup\u304c\u4e8b\u524d\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\uff11\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306710\u4eba\u4ee5\u5185\u306e\u9854\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\n\nVerify\uff08\u9854\u691c\u8a3c\uff09\n2\u3064\u306e\u9854\uff082\u3064\u306eDetect\u3055\u308c\u305f\u9854\u3001\u3082\u3057\u304f\u306f\u30011\u3064\u306eDetect\u3055\u308c\u305f\u9854\u3068Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u304c\u540c\u4e00\u4eba\u7269\u306e\u3082\u306e\u304b\u3069\u3046\u304b\u306e\u8a8d\u8a3c\u3092\u3059\u308bAPI\u3002\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\n\nFind Similar\uff08\u985e\u4f3c\u306e\u9854\u3092\u691c\u51fa\uff09\n\u9854\u306e\u30bb\u30c3\u30c8\uff08FaceList\uff09\u3092\u4e0e\u3048\u3066\u3001\u305d\u306e\u4e2d\u304b\u3089\u554f\u3044\u5408\u308f\u305b\u305f\u9854\uff08Detect\u3055\u308c\u305f\u9854\uff09\u3068\u985e\u4f3c\u306e\u9854\u3092\u691c\u7d22\u3059\u308bAPI\u3002\n\n\u691c\u7d22\u306b\u4f7f\u3046\u9854\u306e\u30bb\u30c3\u30c8\u306b\u306f\u3001FaceList\uff08\u5f8c\u8ff0\uff09\u3001\u3082\u3057\u304f\u306f\u3001Detect\u3055\u308c\u305fFaceId\u306e\u914d\u5217\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nmatchPerson\u3068matchFace\u306e2\u3064\u306e\u30e2\u30fc\u30c9\u304c\u3042\u308b\u3002\n\n\n\nmatchPerson\u306f\u3001\u9854\u306e\u95be\u5024\u3092\u5229\u7528\u3057\u3066\u3067\u304d\u308b\u3060\u3051\u540c\u3058\u4eba\u306e\u9854\u3092\u691c\u7d22\u3059\u308b\u3002\uff08\u306a\u3044\u5834\u5408\u306f\u7a7a\u3067\u8fd4\u3055\u308c\u308b\uff09\n\nmatchFace\u306f\u3001\u95be\u5024\u306f\u7121\u8996\u3057\u3066\u3001\u985e\u4f3c\u6027\u306f\u4f4e\u304f\u3068\u3082\u3001\u3068\u306b\u304b\u304f\u985e\u4f3c\u306e\u9854\u3068\u3057\u3066\u30e9\u30f3\u30af\u3055\u308c\u305f\u3082\u306e\u3092\u8fd4\u3059\n\n\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\n\nGroup\uff08\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u5316\uff09\nDetect\u306b\u3088\u308a\u691c\u51fa\u3055\u308c\u305f\u8907\u6570\u306e\u9854\u3092\u3001\u898b\u305f\u76ee\u306e\u985e\u4f3c\u6027\u306b\u57fa\u3065\u3044\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308bAPI\u3002\n\n\u30b0\u30eb\u30fc\u30d7\u306f\u3000\u3001\u4f3c\u3066\u3044\u308b\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u3001MessyGroup\uff08\u4f3c\u3066\u3044\u308b\u9854\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u9854\u306e\u30b0\u30eb\u30fc\u30d7\uff09\u306b\u5206\u3051\u3089\u308c\u308b\u3002\n\u5c11\u306a\u304f\u3068\u30822\u4ee5\u4e0a\u306e\u9854\u3092\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u6700\u5927\u30671000\u306e\u9854\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u540c\u4e00\u4eba\u7269\u306e\u9854\u304c\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395238\n\n\u9854\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306b\u4e8b\u524d\u306b\u7528\u610f\u3059\u308b\u9854\u306e\u30bb\u30c3\u30c8\n\u4e0a\u8a185\u3064\u306eAPI\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u9854\u306e\u30bb\u30c3\u30c8\u3092\u4e8b\u524d\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u9854\u306e\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001PersonGroup\u3068FaceList\u306e2\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4f7f\u7528\u3059\u308bAPI\u306b\u3088\u3063\u3066\u3001PersonGroup\u3068FaceList\u3092\u4f7f\u3044\u5206\u3051\u308b\u3002\n\nPerson Group\nIdentify\u3067\u4f7f\u7528\u3055\u308c\u308b\u9854\u306e\u30bb\u30c3\u30c8\u3002\n\n\u30b0\u30eb\u30fc\u30d7\u306e\u4e2d\u306b\u3001\u4e00\u4eba\u306e\u9854\u3092\u8868\u3059Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u5f8c\u8ff0\uff09\u3092\u3001\u6700\u5927\u30671000\u307e\u3067\u767b\u9332\u3067\u304d\u308b\u3002\nIdentify\u3067\u306f\u3001Person Group\u306e\u4e2d\u306ePerson\u306e\u9854\u304b\u3089\u7279\u5b9a\u3059\u308b\u3002\nPerson Group\u3092\u64cd\u4f5c\u3059\u308bAPI\u3068\u3057\u3066\u3001\u751f\u6210\u30fb\u524a\u9664\u306a\u3069\u306eAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\nPersonGroup\u306b\u65b0\u3057\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u305f\u308a\u3001Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3057\u305f\u5834\u5408\u3001PersonGroup\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\uff08\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u308b\u307e\u3067\u60c5\u5831\u306f\u66f4\u65b0\u3055\u308c\u306a\u3044\u3002\uff09\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\n\nPerson\nPerson Group\u306b\u542b\u307e\u308c\u308b\u3001\u4e00\u4eba\u306e\u60c5\u5831\u3092\u8868\u3059\u306e\u304cPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001248\u679a\u307e\u3067\u306e\u753b\u50cf\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u4e2d\u306b\u542b\u307e\u308c\u308b\u9854\u306e\u60c5\u5831\u306f\u3001persistedFaceId\u3068\u3057\u3066\u4fdd\u6301\u3055\u308c\u308b\u3002\uff08FaceId\u306e\u3088\u3046\u306a\u671f\u9650\u306f\u306a\u3044\uff09\nURL\u3082\u3057\u304f\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306b\u3088\u308a\u9854\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002\n\nPerson Group\u3068Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u95a2\u4fc2\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\nIdentify\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aPerson\u3092\u542b\u3080Person Group\u306e\u3069\u308c\u304b\u3092\u6307\u5b9a\u3057\u3001\u9854\u3092\u8a8d\u8a3c\u3057\u307e\u3059\u3002\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\n\nFace List\nFace List\u306f\u3001Find Similar\u3067\u4f7f\u7528\u3055\u308c\u308b\u9854\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\n\nFace List\u306f\u3001\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3001\u4e2d\u306b\u6700\u59271000\u307e\u3067\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nFace List\u306b\u8ffd\u52a0\u3055\u308c\u305f\u9854\u306b\u671f\u9650\u306f\u306a\u3044\u3002\nFace List\u3092\u64cd\u4f5c\u3059\u308bAPI\u3068\u3057\u3066\u3001\u8ffd\u52a0\u30fb\u524a\u9664\u7b49\u306eAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250\n\nPython\u3067\u5b9f\u88c5\u3002\n\u9854\u306e\u767b\u9332\u3068\u8a8d\u8a3c\u3092Pepper\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u8a8d\u8a3c\u306fIdentify\u3067\u884c\u3044\u307e\u3059\u3002\n\n\u9854\u306e\u767b\u9332\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9854\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u203b\u5148\u306bPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306ePerson Group\u3092\u751f\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n[\u6d41\u308c]\n\nPepper\u306e\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u5165\u529b\u3055\u308c\u305f\u540d\u524d\uff08\u767b\u9332\u540d\u3068\u306a\u308b\uff09\u3092\u53d7\u3051\u53d6\u308b\u3002\n\u5165\u529b\u3055\u308c\u305f\u540d\u524d\u3092\u767b\u9332\u540d\u3068\u3057\u3066\u3001Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\uff08Create a Person\uff09\n\u4f5c\u3063\u305fPerson\u306bPepper\u306e\u30ab\u30e1\u30e9\u3067\u64ae\u3063\u305f\u9854\u3092\u8ffd\u52a0\u3059\u308b\uff08Add a Person Face\uff09\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u9854\u306e\u8ffd\u52a0\u304c\u6210\u529f\u3057\u305f\u3089\u3001PersonGroup\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u3059\u308b\uff08Train Person Group\uff09\n\nChoregraphe\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\nCreate a Person\n\u30bf\u30d6\u30ec\u30c3\u30c8\u304b\u3089\u540d\u524d\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001Create a Person\u3067\u3001\u7279\u5b9a\u306ePerson Group\u306b\u65b0\u3057\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nCreate a Person API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n#-----------------------------------\n# Create a Person POST Request\n# param1: name--Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u767b\u9332\u540d\n# param2: user_data--\u8aac\u660e\uff08Optional\uff09\n#-----------------------------------\ndef create(self, name, user_data=None):\n    import requests, json\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\"\n    url += str(self.memory.getData(\"AzureData/PersonGroupId\"))\n    url += \"/persons\"\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    #Request Body\n    payload = {\n        'name': name,\n        'userData': user_data\n    }\n\n    try:\n        res = requests.post(url, data=json.dumps(payload), headers=headers)\n        if res.status_code == 200:\n            return res.json()\n        else:\n            error = res.json()\n            errorCode = error[\"error\"][\"code\"].encode(\"utf8\")\n            self.logger.info(errorCode)\n            errorMessage = error[\"error\"][\"message\"].encode(\"utf8\")\n            self.logger.info(errorMessage)\n            return None\n\n    except requests.exceptions.RequestException as e:\n        self.logger.info(e)\n        return None\n\n\nAdd a Person Face\n\u7d9a\u3044\u3066\u3001\u751f\u6210\u3055\u308c\u305fPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9854\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nAdd a Person Face API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n#--------------------------------------------------------------\n# Add a Person Face POST Request\n# param1: image--\u753b\u50cf\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\n# param2: person_id--Create a Person\u3067\u751f\u6210\u3055\u308c\u305fPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\n# param3: user_data--(Optional)\n# param4: target_face--(Optional)\n#--------------------------------------------------------------\ndef add_face(self, image, person_id, user_data=None, target_face=None):\n    import requests\n\n    personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\" + personGroupId + \"/persons/\" + person_id + \"/persistedFaces\"\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/octet-stream\",\n      'cache-control': \"no-cache\",\n    }\n\n    #Request Body\n    params = {\n        'userData': user_data,\n        'targetFace': target_face,\n    }\n\n    try:\n        res = requests.post(url, headers=headers, params=params, data=image)\n        if res.status_code == 200:\n            return res.json()\n        else:\n            error = res.json()\n            errorCode = error[\"error\"][\"code\"].encode(\"utf8\")\n            self.logger.info(errorCode)\n            errorMessage = error[\"error\"][\"message\"].encode(\"utf8\")\n            self.logger.info(errorMessage)\n\n            #self.onFailure(errorMessage)\n\n    except requests.exceptions.RequestException as e:\n        self.logger.info(e)\n        #self.onFailure(e)\n\n\n\nTrain Person Group\n\u9854\u304c\u767b\u9332\u3067\u304d\u305f\u3089\u3001\u6700\u5f8c\u306bPerson Group\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\nTrain a Person Group API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n#----------------------------\n# Train a Person Group POST\n#----------------------------\ndef train(self):\n   import requests, json\n\n   #SubscriptionKey  \n   subscriptionKey = self.memory.getData(\"AzureData/SubscriptionKey\")\n   #Person Group ID\n   personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n\n   url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\"\n   url += str(personGroupId)\n   url += \"/train\"\n\n   #Request Header\n   headers = {\n      'ocp-apim-subscription-key': str(subscriptionKey),\n      'Content-Type': \"application/json\"\n   }\n\n   #Request Body\n   payload = {\n       'personGroupId': person_group_id\n   }\n\n   try:\n       res = requests.post(url, data=json.dumps(payload), headers=headers)\n       if res.status_code == 202:\n           return res\n       else:\n           self.logger.info(res.status_code)\n           #self.onFailure()\n\n   except requests.exceptions.RequestException as e:\n       self.logger.info(e)\n       #self.onFailure(e)\n\n\n\n\u9854\u306e\u8a8d\u8a3c\nIdentify\u3067\u3001\u6307\u5b9a\u3057\u305fPersonGroup\u306e\u4e2d\u306e\u9854\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u3042\u308b\u304b\u3001\u691c\u7d22\u3059\u308b\u3002\n[\u6d41\u308c]\n1. Pepper\u306e\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u306b\u4eba\u9593\u306e\u9854\u304c\u3042\u308b\u304b\u3001\u691c\u77e5\u3059\u308b\u3002\uff08Detect\uff09\n2. Detect\u3067\u691c\u77e5\u3057\u305fFaceId\u3092\u4f7f\u7528\u3057\u3066\u3001PersonGroup\u304b\u3089\u9854\u306e\u8a8d\u8a3c\u3092\u884c\u3046\u3002\uff08Identify\uff09\n3. \u5019\u88dc\u8005\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u898b\u3064\u304b\u3063\u305f\u4eba\u306ePersonID\u304b\u3089\u3001\u305d\u306e\u4eba\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\uff08Get a Person\uff09\nChoregraphe\u306f\u3001\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\n\n\nDetect\nPepper\u3067\u30a4\u30e1\u30fc\u30b8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3001\u9854\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u306b\u884c\u304f\u3002\u8fd4\u3055\u308c\u308bFaceId\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306eIdentify\u3092\u884c\u3046\u3002\nDetect API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n#-------------------------------\n# Detect POST Request\n# param1: image--\u753b\u50cf\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\n#-------------------------------\ndef detect(self, image):\n    import requests\n\n    url = \"https://api.projectoxford.ai/face/v1.0/detect\"\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/octet-stream\",\n      'cache-control': \"no-cache\",\n    }\n\n    #Request Parameter\n    params = {\n        'returnFaceId': True,\n        'returnFaceLandmarks': False,\n        'returnFaceAttributes': \"age,gender\"\n    }\n\n    try:\n        res = requests.post(url, headers=headers, params=params, data=image)\n\n        if res == []:    \n            self.noFaceDetected()\n        else:\n            self.logger.info(res)\n            if res.status_code == 200:\n                data = res.json()\n                #self.logger.info(data)\n                if data == []:    #\u914d\u5217\u304c\u7a7a\u306e\u5834\u5408\u3001\u9854\u304c\u691c\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\n                    self.noFaceDetected(data)    \n                else:\n                    #FaceId\n                    faceid = data[0][\"faceId\"].encode(\"utf8\")\n                    #Gender\n                    gender = data[0][\"faceAttributes\"][\"gender\"].encode(\"utf8\")\n                    self.memory.insertData(\"AzureData/Gender\", gender)\n                    #Age\n                    age = data[0][\"faceAttributes\"][\"age\"]\n                    self.memory.insertData(\"AzureData/Age\", age)\n\n                    self.onSuccess(faceid)\n            else:\n                self.logger.info(res.status_code)\n                error = res.json()\n                self.logger.info(error[\"error\"][\"message\"].encode(\"utf8\"))\n                self.onFailure(res.status_code)\n\n    except requests.exceptions.RequestException as e:\n            self.logger.info(e)\n            self.onFailure(e)\n\n\n\nIdentify\nDetect\u304b\u3089\u8fd4\u3055\u308c\u308bFaceId\u3067\u3001\u6307\u5b9a\u306ePersonGroup\u304b\u3089\u4e00\u81f4\u3059\u308b\u9854\u3092\u691c\u7d22\u3059\u308b\u3002\nIdentify API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n#-------------------------------\n# Identify POST Request\n# param1: face_ids --Detect\u3067\u8fd4\u3055\u308c\u308bFace ID\u306e\u914d\u5217\n# param2: max_candidates_return --Optional\n# param3: threshold --Optional\n#-------------------------------\ndef identify(self, face_ids, max_candidates_return=1, threshold=None):\n    import requests, json\n    url = 'https://api.projectoxford.ai/face/v1.0/identify'\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    #Request Body\n    payload = {\n        'personGroupId': self.memory.getData(\"AzureData/PersonGroupId\"),\n        'faceIds': face_ids,\n        'maxNumOfCandidatesReturned': max_candidates_return,\n        'confidenceThreshold': threshold,\n    }\n\n    return requests.post(url, data=json.dumps(payload), headers=headers).json()\n\n\n\n\nGet a Person\nIdentify\u3067\u7279\u5b9a\u3055\u308c\u305f\u5019\u88dc\u8005\u306ePersonId\u304b\u3089\u3001Get a Person\u3067\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u3002\nGet a Person API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\nPythonScript.py\n#-------------------------------\n# Get a Person GET Request\n# param1: personId --\u53d6\u5f97\u3057\u305f\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\n#-------------------------------\ndef get_a_person(self, personId):\n    import requests\n    personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\" + personGroupId + \"/persons/\" + personId\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    return requests.get(url, headers=headers)\n\n\n\n\u5b9f\u969b\u306b\u9854\u8a8d\u8a3c\u3057\u3066\u307f\u3066\u3002\n\u8a8d\u8a3c\u306f\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3057\u305f\uff01\n\u5e74\u9f62\u3084\u7b11\u9854\u3068\u3044\u3063\u305f\u8981\u7d20\u306f\u3001\u5c11\u3057\u602a\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u8a8d\u8a3c\u306f\u7d20\u6674\u3089\u3057\u3044...\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30015\u679a\u307b\u3069\u9854\u3092\u767b\u9332\u3057\u307e\u3057\u305f\u3002\n\u591a\u304f\u5199\u771f\u3092\u767b\u9332\u3059\u308b\u3070\u3001\u3088\u308a\u6b63\u78ba\u306a\u30c7\u30fc\u30bf\u304c\u5f97\u3089\u308c\u308b\u306e\u304b\u30fb\u30fb\u30fb\uff1f\n\n\u65e2\u306b\u88fd\u54c1\u3068\u3057\u3066\u306e\u6d3b\u7528\u4e8b\u4f8b\u304c\u3042\u308bPepper\u3000\u00d7\u3000MS Azure\u306eFaceAPI\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3057\u3063\u304b\u308a\u3057\u3066\u3044\u3066\u3001\u5b9f\u88c5\u3057\u3084\u3059\u3044\u306e\u3067\u662f\u975e\u304a\u8a66\u3057\u3092..:heart_eyes:\n\n#Azure FaceAPI\u3000\u3056\u3063\u304f\u308a\u3057\u305f\u307e\u3068\u3081\nFaceAPI\u306b\u306f\u3001\u9854\u8a8d\u8a3c\u306b\u6b20\u304b\u305b\u306a\u3044\u4e3b\u306aAPI\u304c5\u3064\u3042\u308a\u307e\u3059\u3002\u9854\u306e\u691c\u51fa\u3092\u884c\u3046Detect\u3001\u9854\u306e\u8a8d\u8b58\u3092\u884c\u3046Identify\u3001Verify\u3001Find Similar\u3001Group\u3067\u3059\u3002\n\n##Face Detection(\u9854\u306e\u691c\u51fa)\n####Detect\n\u5199\u771f\u304b\u3089\u4eba\u9593\u306e\u9854\u3092\u691c\u51fa\u3059\u308bAPI\u3002\n\n- \u691c\u51fa\u3055\u308c\u305f\u9854\u306b\u306fFaceId\u304c\u5272\u308a\u632f\u3089\u308c\u308b\u3002FaceId\u306e\u671f\u9650\u306f\u3001Detect\u30b3\u30fc\u30eb\u5f8c24\u6642\u9593\u3002\n- \u4e00\u3064\u306e\u753b\u50cf\u304b\u3089\u6700\u592764\u306e\u9854\u3092\u691c\u51fa\n- \u753b\u50cf\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u3082\u3057\u304f\u306fURL\u3067\u6307\u5b9a\n- \u691c\u51fa\u3057\u305f\u9854\u306e\u793a\u3059\u56db\u89d2\u5f62\uff08left, top, width, height\uff09\u3092\u53d6\u5f97\u3067\u304d\u308b\n- \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001gender, age, head pose, facial hair, glasses\u7b49\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3067\u304d\u308b\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\n\n##Face Recognition(\u9854\u8a8d\u8b58)\n\u9854\u3092\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306eAPI\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\uff14\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n####Identify\uff08\u9854\u8b58\u5225\uff09\nDetect\u306b\u3088\u308a\u5272\u308a\u632f\u3089\u308c\u305fFaceId\u3068\u4e00\u81f4\u3059\u308b\u9854\u3092\u3001\u6307\u5b9a\u3059\u308bPersonGroup\uff08\u5f8c\u8ff0\u3001\u9854\u306e\u30bb\u30c3\u30c8\uff09\u304b\u3089\u691c\u7d22\u3057\u3001\u5019\u88dc\u8005\u3092\u8fd4\u3059API\u3002\n\n- \u5019\u88dc\u306e\u9854\u306f\u3001\u985e\u4f3c\u70b9\u3092\u8a08\u7b97\u3057PersonGroup\u306e\u4e2d\u304b\u3089\u9ad8\u3044\u9806\u306b\u5019\u88dc\u3092\u8fd4\u3059\u3002\n- PersonGroup\u304c\u4e8b\u524d\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n- \uff11\u56de\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306710\u4eba\u4ee5\u5185\u306e\u9854\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\n\n####Verify\uff08\u9854\u691c\u8a3c\uff09\n2\u3064\u306e\u9854\uff082\u3064\u306eDetect\u3055\u308c\u305f\u9854\u3001\u3082\u3057\u304f\u306f\u30011\u3064\u306eDetect\u3055\u308c\u305f\u9854\u3068Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u304c\u540c\u4e00\u4eba\u7269\u306e\u3082\u306e\u304b\u3069\u3046\u304b\u306e\u8a8d\u8a3c\u3092\u3059\u308bAPI\u3002\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\n\n####Find Similar\uff08\u985e\u4f3c\u306e\u9854\u3092\u691c\u51fa\uff09\n\u9854\u306e\u30bb\u30c3\u30c8\uff08FaceList\uff09\u3092\u4e0e\u3048\u3066\u3001\u305d\u306e\u4e2d\u304b\u3089\u554f\u3044\u5408\u308f\u305b\u305f\u9854\uff08Detect\u3055\u308c\u305f\u9854\uff09\u3068\u985e\u4f3c\u306e\u9854\u3092\u691c\u7d22\u3059\u308bAPI\u3002\n\n- \u691c\u7d22\u306b\u4f7f\u3046\u9854\u306e\u30bb\u30c3\u30c8\u306b\u306f\u3001FaceList\uff08\u5f8c\u8ff0\uff09\u3001\u3082\u3057\u304f\u306f\u3001Detect\u3055\u308c\u305fFaceId\u306e\u914d\u5217\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- `matchPerson`\u3068`matchFace`\u306e2\u3064\u306e\u30e2\u30fc\u30c9\u304c\u3042\u308b\u3002\n    - `matchPerson`\u306f\u3001\u9854\u306e\u95be\u5024\u3092\u5229\u7528\u3057\u3066\u3067\u304d\u308b\u3060\u3051\u540c\u3058\u4eba\u306e\u9854\u3092\u691c\u7d22\u3059\u308b\u3002\uff08\u306a\u3044\u5834\u5408\u306f\u7a7a\u3067\u8fd4\u3055\u308c\u308b\uff09\n    - `matchFace`\u306f\u3001\u95be\u5024\u306f\u7121\u8996\u3057\u3066\u3001\u985e\u4f3c\u6027\u306f\u4f4e\u304f\u3068\u3082\u3001\u3068\u306b\u304b\u304f\u985e\u4f3c\u306e\u9854\u3068\u3057\u3066\u30e9\u30f3\u30af\u3055\u308c\u305f\u3082\u306e\u3092\u8fd4\u3059\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\u3002\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\n\n####Group\uff08\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u5316\uff09\nDetect\u306b\u3088\u308a\u691c\u51fa\u3055\u308c\u305f\u8907\u6570\u306e\u9854\u3092\u3001\u898b\u305f\u76ee\u306e\u985e\u4f3c\u6027\u306b\u57fa\u3065\u3044\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308bAPI\u3002\n\n- \u30b0\u30eb\u30fc\u30d7\u306f\u3000\u3001\u4f3c\u3066\u3044\u308b\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u3001MessyGroup\uff08\u4f3c\u3066\u3044\u308b\u9854\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u9854\u306e\u30b0\u30eb\u30fc\u30d7\uff09\u306b\u5206\u3051\u3089\u308c\u308b\u3002\n- \u5c11\u306a\u304f\u3068\u30822\u4ee5\u4e0a\u306e\u9854\u3092\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u6700\u5927\u30671000\u306e\u9854\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- \u540c\u4e00\u4eba\u7269\u306e\u9854\u304c\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3001\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395238\n\n##\u9854\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306b\u4e8b\u524d\u306b\u7528\u610f\u3059\u308b\u9854\u306e\u30bb\u30c3\u30c8\n\u4e0a\u8a185\u3064\u306eAPI\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u9854\u306e\u30bb\u30c3\u30c8\u3092\u4e8b\u524d\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u9854\u306e\u30bb\u30c3\u30c8\u3068\u3057\u3066\u3001PersonGroup\u3068FaceList\u306e2\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4f7f\u7528\u3059\u308bAPI\u306b\u3088\u3063\u3066\u3001PersonGroup\u3068FaceList\u3092\u4f7f\u3044\u5206\u3051\u308b\u3002\n\n####Person Group\nIdentify\u3067\u4f7f\u7528\u3055\u308c\u308b\u9854\u306e\u30bb\u30c3\u30c8\u3002\n\n- \u30b0\u30eb\u30fc\u30d7\u306e\u4e2d\u306b\u3001\u4e00\u4eba\u306e\u9854\u3092\u8868\u3059Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u5f8c\u8ff0\uff09\u3092\u3001\u6700\u5927\u30671000\u307e\u3067\u767b\u9332\u3067\u304d\u308b\u3002\n- Identify\u3067\u306f\u3001Person Group\u306e\u4e2d\u306ePerson\u306e\u9854\u304b\u3089\u7279\u5b9a\u3059\u308b\u3002\n- Person Group\u3092\u64cd\u4f5c\u3059\u308bAPI\u3068\u3057\u3066\u3001\u751f\u6210\u30fb\u524a\u9664\u306a\u3069\u306eAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n- PersonGroup\u306b\u65b0\u3057\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u305f\u308a\u3001Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3057\u305f\u5834\u5408\u3001PersonGroup\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\uff08\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u308b\u307e\u3067\u60c5\u5831\u306f\u66f4\u65b0\u3055\u308c\u306a\u3044\u3002\uff09\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\n\n####Person\nPerson Group\u306b\u542b\u307e\u308c\u308b\u3001\u4e00\u4eba\u306e\u60c5\u5831\u3092\u8868\u3059\u306e\u304cPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\n- Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001248\u679a\u307e\u3067\u306e\u753b\u50cf\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n- \u4e2d\u306b\u542b\u307e\u308c\u308b\u9854\u306e\u60c5\u5831\u306f\u3001persistedFaceId\u3068\u3057\u3066\u4fdd\u6301\u3055\u308c\u308b\u3002\uff08FaceId\u306e\u3088\u3046\u306a\u671f\u9650\u306f\u306a\u3044\uff09\n- URL\u3082\u3057\u304f\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306b\u3088\u308a\u9854\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002\n\nPerson Group\u3068Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u95a2\u4fc2\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\nIdentify\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aPerson\u3092\u542b\u3080Person Group\u306e\u3069\u308c\u304b\u3092\u6307\u5b9a\u3057\u3001\u9854\u3092\u8a8d\u8a3c\u3057\u307e\u3059\u3002\n![personGroup_person.png](https://qiita-image-store.s3.amazonaws.com/0/68056/5357a17b-b4e4-fa25-6b82-c2c2432ca6fa.png)\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\n\n####Face List\nFace List\u306f\u3001Find Similar\u3067\u4f7f\u7528\u3055\u308c\u308b\u9854\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\n\n- Face List\u306f\u3001\u9854\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3001\u4e2d\u306b\u6700\u59271000\u307e\u3067\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- Face List\u306b\u8ffd\u52a0\u3055\u308c\u305f\u9854\u306b\u671f\u9650\u306f\u306a\u3044\u3002\n- Face List\u3092\u64cd\u4f5c\u3059\u308bAPI\u3068\u3057\u3066\u3001\u8ffd\u52a0\u30fb\u524a\u9664\u7b49\u306eAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\nhttps://dev.projectoxford.ai/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250\n\n\n#Python\u3067\u5b9f\u88c5\u3002\n\u9854\u306e\u767b\u9332\u3068\u8a8d\u8a3c\u3092Pepper\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u8a8d\u8a3c\u306fIdentify\u3067\u884c\u3044\u307e\u3059\u3002\n\n##\u9854\u306e\u767b\u9332\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9854\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u203b\u5148\u306bPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306ePerson Group\u3092\u751f\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n[\u6d41\u308c]\n\n1. Pepper\u306e\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u5165\u529b\u3055\u308c\u305f\u540d\u524d\uff08\u767b\u9332\u540d\u3068\u306a\u308b\uff09\u3092\u53d7\u3051\u53d6\u308b\u3002\n2. \u5165\u529b\u3055\u308c\u305f\u540d\u524d\u3092\u767b\u9332\u540d\u3068\u3057\u3066\u3001Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\uff08Create a Person\uff09\n3. \u4f5c\u3063\u305fPerson\u306bPepper\u306e\u30ab\u30e1\u30e9\u3067\u64ae\u3063\u305f\u9854\u3092\u8ffd\u52a0\u3059\u308b\uff08Add a Person Face\uff09\n4. Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u9854\u306e\u8ffd\u52a0\u304c\u6210\u529f\u3057\u305f\u3089\u3001PersonGroup\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u3059\u308b\uff08Train Person Group\uff09\n\n\nChoregraphe\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-30 11.47.26.png](https://qiita-image-store.s3.amazonaws.com/0/68056/2bb55c69-00e8-7231-3ea7-58074730a2da.png)\n\n\n###Create a Person\n\u30bf\u30d6\u30ec\u30c3\u30c8\u304b\u3089\u540d\u524d\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001Create a Person\u3067\u3001\u7279\u5b9a\u306ePerson Group\u306b\u65b0\u3057\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nCreate a Person API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```\n#-----------------------------------\n# Create a Person POST Request\n# param1: name--Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u767b\u9332\u540d\n# param2: user_data--\u8aac\u660e\uff08Optional\uff09\n#-----------------------------------\ndef create(self, name, user_data=None):\n    import requests, json\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\"\n    url += str(self.memory.getData(\"AzureData/PersonGroupId\"))\n    url += \"/persons\"\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    #Request Body\n    payload = {\n        'name': name,\n        'userData': user_data\n    }\n\n    try:\n        res = requests.post(url, data=json.dumps(payload), headers=headers)\n        if res.status_code == 200:\n            return res.json()\n        else:\n            error = res.json()\n            errorCode = error[\"error\"][\"code\"].encode(\"utf8\")\n            self.logger.info(errorCode)\n            errorMessage = error[\"error\"][\"message\"].encode(\"utf8\")\n            self.logger.info(errorMessage)\n            return None\n\n    except requests.exceptions.RequestException as e:\n        self.logger.info(e)\n        return None\n```\n\n###Add a Person Face\n\u7d9a\u3044\u3066\u3001\u751f\u6210\u3055\u308c\u305fPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9854\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nAdd a Person Face API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```\n#--------------------------------------------------------------\n# Add a Person Face POST Request\n# param1: image--\u753b\u50cf\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\n# param2: person_id--Create a Person\u3067\u751f\u6210\u3055\u308c\u305fPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\n# param3: user_data--(Optional)\n# param4: target_face--(Optional)\n#--------------------------------------------------------------\ndef add_face(self, image, person_id, user_data=None, target_face=None):\n    import requests\n        \n    personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\" + personGroupId + \"/persons/\" + person_id + \"/persistedFaces\"\n        \n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/octet-stream\",\n      'cache-control': \"no-cache\",\n    }\n\n    #Request Body\n    params = {\n        'userData': user_data,\n        'targetFace': target_face,\n    }\n\n    try:\n        res = requests.post(url, headers=headers, params=params, data=image)\n        if res.status_code == 200:\n            return res.json()\n        else:\n            error = res.json()\n            errorCode = error[\"error\"][\"code\"].encode(\"utf8\")\n            self.logger.info(errorCode)\n            errorMessage = error[\"error\"][\"message\"].encode(\"utf8\")\n            self.logger.info(errorMessage)\n\n            #self.onFailure(errorMessage)\n\n    except requests.exceptions.RequestException as e:\n        self.logger.info(e)\n        #self.onFailure(e)\n\n```\n\n\n###Train Person Group\n\u9854\u304c\u767b\u9332\u3067\u304d\u305f\u3089\u3001\u6700\u5f8c\u306bPerson Group\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\nTrain a Person Group API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```\n#----------------------------\n# Train a Person Group POST\n#----------------------------\ndef train(self):\n   import requests, json\n   \n   #SubscriptionKey  \n   subscriptionKey = self.memory.getData(\"AzureData/SubscriptionKey\")\n   #Person Group ID\n   personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n        \n   url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\"\n   url += str(personGroupId)\n   url += \"/train\"\n\n   #Request Header\n   headers = {\n      'ocp-apim-subscription-key': str(subscriptionKey),\n      'Content-Type': \"application/json\"\n   }\n\n   #Request Body\n   payload = {\n       'personGroupId': person_group_id\n   }\n\n   try:\n       res = requests.post(url, data=json.dumps(payload), headers=headers)\n       if res.status_code == 202:\n           return res\n       else:\n           self.logger.info(res.status_code)\n           #self.onFailure()\n                \n   except requests.exceptions.RequestException as e:\n       self.logger.info(e)\n       #self.onFailure(e)\n\n```\n\n##\u9854\u306e\u8a8d\u8a3c\nIdentify\u3067\u3001\u6307\u5b9a\u3057\u305fPersonGroup\u306e\u4e2d\u306e\u9854\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u3042\u308b\u304b\u3001\u691c\u7d22\u3059\u308b\u3002\n\n[\u6d41\u308c]\n1. Pepper\u306e\u30ab\u30e1\u30e9\u306e\u753b\u50cf\u306b\u4eba\u9593\u306e\u9854\u304c\u3042\u308b\u304b\u3001\u691c\u77e5\u3059\u308b\u3002\uff08Detect\uff09\n2. Detect\u3067\u691c\u77e5\u3057\u305fFaceId\u3092\u4f7f\u7528\u3057\u3066\u3001PersonGroup\u304b\u3089\u9854\u306e\u8a8d\u8a3c\u3092\u884c\u3046\u3002\uff08Identify\uff09\n3. \u5019\u88dc\u8005\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u898b\u3064\u304b\u3063\u305f\u4eba\u306ePersonID\u304b\u3089\u3001\u305d\u306e\u4eba\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\uff08Get a Person\uff09\n\nChoregraphe\u306f\u3001\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-30 13.17.18.png](https://qiita-image-store.s3.amazonaws.com/0/68056/e0b56a0b-cbe5-9036-a9bd-75bf327bab01.png)\n\n\n###Detect\nPepper\u3067\u30a4\u30e1\u30fc\u30b8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3001\u9854\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u306b\u884c\u304f\u3002\u8fd4\u3055\u308c\u308bFaceId\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306eIdentify\u3092\u884c\u3046\u3002\nDetect API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```\n#-------------------------------\n# Detect POST Request\n# param1: image--\u753b\u50cf\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\n#-------------------------------\ndef detect(self, image):\n    import requests\n\n    url = \"https://api.projectoxford.ai/face/v1.0/detect\"\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/octet-stream\",\n      'cache-control': \"no-cache\",\n    }\n\n    #Request Parameter\n    params = {\n        'returnFaceId': True,\n        'returnFaceLandmarks': False,\n        'returnFaceAttributes': \"age,gender\"\n    }\n    \n    try:\n        res = requests.post(url, headers=headers, params=params, data=image)\n\n        if res == []:    \n            self.noFaceDetected()\n        else:\n            self.logger.info(res)\n            if res.status_code == 200:\n                data = res.json()\n                #self.logger.info(data)\n                if data == []:    #\u914d\u5217\u304c\u7a7a\u306e\u5834\u5408\u3001\u9854\u304c\u691c\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\n                    self.noFaceDetected(data)    \n                else:\n                    #FaceId\n                    faceid = data[0][\"faceId\"].encode(\"utf8\")\n                    #Gender\n                    gender = data[0][\"faceAttributes\"][\"gender\"].encode(\"utf8\")\n                    self.memory.insertData(\"AzureData/Gender\", gender)\n                    #Age\n                    age = data[0][\"faceAttributes\"][\"age\"]\n                    self.memory.insertData(\"AzureData/Age\", age)\n\n                    self.onSuccess(faceid)\n            else:\n                self.logger.info(res.status_code)\n                error = res.json()\n                self.logger.info(error[\"error\"][\"message\"].encode(\"utf8\"))\n                self.onFailure(res.status_code)\n\n    except requests.exceptions.RequestException as e:\n            self.logger.info(e)\n            self.onFailure(e)\n   \n```\n\n###Identify\nDetect\u304b\u3089\u8fd4\u3055\u308c\u308bFaceId\u3067\u3001\u6307\u5b9a\u306ePersonGroup\u304b\u3089\u4e00\u81f4\u3059\u308b\u9854\u3092\u691c\u7d22\u3059\u308b\u3002\nIdentify API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```\n#-------------------------------\n# Identify POST Request\n# param1: face_ids --Detect\u3067\u8fd4\u3055\u308c\u308bFace ID\u306e\u914d\u5217\n# param2: max_candidates_return --Optional\n# param3: threshold --Optional\n#-------------------------------\ndef identify(self, face_ids, max_candidates_return=1, threshold=None):\n    import requests, json\n    url = 'https://api.projectoxford.ai/face/v1.0/identify'\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    #Request Body\n    payload = {\n        'personGroupId': self.memory.getData(\"AzureData/PersonGroupId\"),\n        'faceIds': face_ids,\n        'maxNumOfCandidatesReturned': max_candidates_return,\n        'confidenceThreshold': threshold,\n    }\n\n    return requests.post(url, data=json.dumps(payload), headers=headers).json()\n\n\n```\n\n###Get a Person\nIdentify\u3067\u7279\u5b9a\u3055\u308c\u305f\u5019\u88dc\u8005\u306ePersonId\u304b\u3089\u3001Get a Person\u3067\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\u3002\nGet a Person API\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n\n```ruby:PythonScript.py\n#-------------------------------\n# Get a Person GET Request\n# param1: personId --\u53d6\u5f97\u3057\u305f\u3044Person\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\n#-------------------------------\ndef get_a_person(self, personId):\n    import requests\n    personGroupId = self.memory.getData(\"AzureData/PersonGroupId\")\n    url = \"https://api.projectoxford.ai/face/v1.0/persongroups/\" + personGroupId + \"/persons/\" + personId\n\n    #Request Header\n    headers = {\n      'ocp-apim-subscription-key': self.memory.getData(\"AzureData/SubscriptionKey\"),\n      'Content-Type': \"application/json\"\n    }\n\n    return requests.get(url, headers=headers)\n```\n\n#\u5b9f\u969b\u306b\u9854\u8a8d\u8a3c\u3057\u3066\u307f\u3066\u3002\n\n\u8a8d\u8a3c\u306f\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3057\u305f\uff01\n\u5e74\u9f62\u3084\u7b11\u9854\u3068\u3044\u3063\u305f\u8981\u7d20\u306f\u3001\u5c11\u3057\u602a\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u8a8d\u8a3c\u306f\u7d20\u6674\u3089\u3057\u3044...:clap::clap:\nPerson\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30015\u679a\u307b\u3069\u9854\u3092\u767b\u9332\u3057\u307e\u3057\u305f\u3002\n\u591a\u304f\u5199\u771f\u3092\u767b\u9332\u3059\u308b\u3070\u3001\u3088\u308a\u6b63\u78ba\u306a\u30c7\u30fc\u30bf\u304c\u5f97\u3089\u308c\u308b\u306e\u304b\u30fb\u30fb\u30fb\uff1f\n![IMG_1455.JPG](https://qiita-image-store.s3.amazonaws.com/0/68056/6d773ffe-278c-64d3-1939-f05d4d0af37f.jpeg)\n\n\n", "tags": ["Azure", "Pepper"]}