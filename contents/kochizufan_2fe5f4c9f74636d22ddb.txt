{"context": " More than 1 year has passed since last update.\n\n\u6ce8\u610f\nmysql\u3067\u7a7a\u9593\u691c\u7d22\u3092\u3059\u308b\u5834\u5408\u3001InnoDB\u3067\u306f\u3001\u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u304c\u4f5c\u308c\u306a\u3044\u305f\u3081\u3001\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306b\u3088\u308b\u691c\u7d22\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\nMyISAM\u3067\u3082\u554f\u984c\u306a\u3044\u5834\u5408\u306f\u3001\u7a7a\u9593\u691c\u7d22\u901f\u5ea6\u304c\u901f\u3044\u306e\u3067\u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u306e\u5229\u7528\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u691c\u7d22\u306e\u57fa\u672c\n\u8003\u3048\u65b9\u306e\u57fa\u672c\u306b\u3064\u3044\u3066\u306f\u3001\u3082\u3063\u3068\u3082\u6d41\u884c\u3063\u3066\u3044\u308b\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3067\u3042\u308b\u3001GeoHash\u306b\u3064\u3044\u3066\u306e\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08 http://blog.masuidrive.jp/index.php/2010/01/13/geohash/ \uff09\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u63a1\u7528\u3059\u308b\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3044\u304f\u3089\u306e\u30e1\u30c3\u30b7\u30e5\u304c\u3001\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u7def\u5ea6\u3067\u3001\u30e1\u30c3\u30b7\u30e5\u306e\u77ed\u8fba\u304c\u6c42\u3081\u305f\u3044\u691c\u7d22\u534a\u5f84\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u304b\u3092\u8abf\u3079\u307e\u3059\u3002\n\u6c42\u3081\u305f\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3067\u3001\u691c\u7d22\u4e2d\u5fc3\u306e\u7d4c\u7def\u5ea6\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u6c42\u3081\u307e\u3059\u3002\n\u305d\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306e\u3001\u5468\u8fba8\u3064\uff08\u81ea\u5206\u81ea\u8eab\u3082\u542b\u3081\u308b\u30689\u3064\uff09\u306e\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u6c42\u3081\u307e\u3059\u3002\n9\u3064\u6c42\u3081\u308b\u7406\u7531\u306f\u3001\u691c\u7d22\u4e2d\u5fc3\u7d4c\u7def\u5ea6\u304c\u4e2d\u5fc3\u30e1\u30c3\u30b7\u30e5\u306e\u3069\u3053\u306b\u4f4d\u7f6e\u3057\u3066\u3082\u3001\u5fc5\u305a\u691c\u7d22\u534a\u5f84\u304c9\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\u6c42\u3081\u305f9\u3064\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3067\u3001\u4f4d\u7f6e\u60c5\u5831\u30c6\u30fc\u30d6\u30eb\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u30ab\u30e9\u30e0\u306b\u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u304b\u3051\u307e\u3059\u3002\n\u691c\u7d22\u534a\u5f84\u5916\u306e\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u3051\u308c\u3070\u3001\u3053\u306e\u691c\u7d22\u7d50\u679c\u3092\u8868\u793a\u3059\u308c\u3070\u7d42\u4e86\u3067\u3059\u3002\n\u3082\u3057\u53b3\u5bc6\u306b\u691c\u7d22\u7bc4\u56f2\u5185\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u691c\u7d22\u7d50\u679c\u306e\u5168\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3001\u305d\u308c\u3067\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u6b63\u78ba\u306a\u534a\u5f84\u5185\u30c7\u30fc\u30bf\u3092\u6d17\u3044\u51fa\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u304c\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306b\u3088\u308b\u534a\u5f84\u691c\u7d22\u306e\u57fa\u672c\u7684\u8003\u3048\u65b9\u3067\u3059\u3002\n\nquadkey\n\u4e16\u9593\u3067\u306f\u3001GeoHash\u304c\u6d41\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u540c\u3058\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u691c\u7d22\u3092\u3059\u308b\u306a\u3089\u3070\u3001GeoHash\u3088\u308a\u691c\u7d22\u52b9\u7387\u306e\u3088\u3044quadkey\u3092\u4f7f\u3046\u3079\u304d\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\nquadkey\u3068\u306f \u21d2 http://msdn.microsoft.com/en-us/library/bb259689.aspx \u3053\u306eURL\u306e\u4e0b\u534a\u5206\u3001Tile Coordinates and Quadkeys\u3042\u305f\u308a\nquadkey\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u7406\u7531\uff1a\n\n\u30b3\u30fc\u30c9\u30e1\u30c3\u30b7\u30e5\u306e\u5f62\u304c\u3001\u5b9f\u8ddd\u96e2\u306b\u7f6e\u3044\u3066\u3082\u6b63\u3057\u304f\u6b63\u65b9\u5f62\n\u5730\u56f3\u30d9\u30fc\u30b9\u306e\u6280\u8853\u306a\u306e\u3067\u5f53\u7136\u3001\u7def\u5ea6\u304c\u5927\u304d\u304f\u9055\u3048\u3070\u540c\u3058\u7cbe\u5ea6\u30ec\u30d9\u30eb\u306e\u30e1\u30c3\u30b7\u30e5\u3067\u3082\u8fba\u306e\u9577\u3055\u306f\u7570\u306a\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u306f1\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u4e2d\u3067\u306f\u3001\u7d4c\u5ea6\u65b9\u5411\u3068\u7def\u5ea6\u65b9\u5411\u306e\u9577\u3055\u304c\u540c\u3058\u3001\u6b63\u65b9\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u534a\u5f84\u30d9\u30fc\u30b9\u306e\u691c\u7d22\u3092\u3059\u308b\u969b\u3001\u4f7f\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nGeoHash\u306f\u5143\u3005\u9577\u65b9\u5f62\u306a\u4e0a\u3001\u30e1\u30eb\u30ab\u30c8\u30eb\u56f3\u6cd5\u5ea7\u6a19\u3067\u306f\u306a\u304f\u751f\u7d4c\u7def\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u5272\u5408\u3082\u7def\u5ea6\u3054\u3068\u306b\u5927\u9055\u3044\u3067\u3001\u534a\u5f84\u3092\u542b\u3080\u30e1\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba\u3092\u6c42\u3081\u308b\u306e\u304c\u3081\u3093\u3069\u3044\u3057\u3001\u6700\u9069\u5316\u3055\u308c\u306a\u3044\u3002\n\u30e1\u30c3\u30b7\u30e5\u4e0a\u4f4d\u3068\u4e0b\u4f4d\u306e\u5206\u5272\u304c\u30014\u5206\u6728\u3067\u30de\u30a4\u30eb\u30c9\nquadkey\u306f\u4e0a\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u304b\u3089\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3078\u306e\u5206\u5272\u304c4\u5206\u5272\u306a\u306e\u3067\u3001\u7cbe\u5ea6\u30ec\u30d9\u30eb\u306e\u8abf\u6574\u304c\u52b9\u304d\u3084\u3059\u304f\u3001\u7121\u99c4\u306a\u7bc4\u56f2\u306e\u691c\u7d22\u304c\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\u3002\nGeoHash\u306f\u4e0a\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u304b\u3089\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3078\u306e\u5206\u5272\u304c32\u5206\u5272\u306a\u306e\u3067\u3001\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3067\u306f\u8db3\u308a\u306a\u3044\u304b\u3089\u3068\u4e0a\u306e\u30ec\u30d9\u30eb\u306b\u4e0a\u3052\u308b\u3068\u4e00\u6c17\u306b32\u500d\u306e\u7bc4\u56f2\u3092\u691c\u7d22\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u7121\u99c4\u304c\u5927\u304d\u3044\u3067\u3059\u3002\n\u96a3\u63a5\u30bf\u30a4\u30eb\u306e\u53d6\u5f97\u30ed\u30b8\u30c3\u30af\u304c\u7c21\u5358\n\u30e1\u30c3\u30b7\u30e5\u306e\u30ab\u30d0\u30fc\u3059\u308b\u8ddd\u96e2\u5224\u5b9a\u3082\u7c21\u5358\n\n\u3068\u3044\u3063\u305f\u70b9\u3067\u512a\u308c\u3066\u3044\u307e\u3059\u3002\nquadkey\u306e\u6b20\u70b9\u306f\u3001GeoHash\u306b\u6bd4\u3079\u3066\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u30c7\u30fc\u30bf\u91cf\u304c\u5897\u5927\u3059\u308b\uff08\u5358\u7d14\u8a08\u7b97\u3067\u540c\u3058\u7cbe\u5ea6\u306a\u30892.5\u500d\uff09\u3053\u3068\u3067\u3059\u304c\u3001\u304d\u3087\u3046\u3073BLOB\u30c7\u30fc\u30bf\u3082\u6271\u3063\u305f\u308a\u3059\u308b\u6642\u4ee3\u306b8\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u304c20\u30d0\u30a4\u30c8\u3067\u3082\u305d\u3053\u307e\u3067\u5927\u5dee\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3057\u3001InnoDB\u3067\u3042\u308c\u3070\u524d\u65b9\u4e00\u81f4\u3067\u306e\u691c\u7d22\u306b\u30b3\u30fc\u30c9\u9577\u3055\u306b\u3088\u308b\u30c7\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u3088\u3046\u306a\u306e\u3067\uff08MyISAM\u3060\u3068\u82e5\u5e72\u3042\u308b\u6a21\u69d8\uff09\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u3001GeoHash\u3001quadkey\u9593\u306e\u6bd4\u8f03\n\u6bd4\u8f03\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u8f09\u305b\u307e\u3059\u3002\n\u6761\u4ef6\u306f\u3001\n\n\u65e5\u672c\u306e\u7bc4\u56f2\u306b\u8fd1\u3044\u5317\u7def20\u5ea6\uff5e50\u5ea6\u3001\u6771\u7d4c120\u5ea6\uff5e150\u5ea6\u306e\u9818\u57df\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u306b100\u4e07\u70b9\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u6563\u308a\u3070\u3081\u3066\u3001\u7a7a\u9593\u30ab\u30e9\u30e0\u3001GeoHash\u3001quadkey\u306e3\u5024\u306b\u76f4\u3057\u305f\u5f62\u3067\u30ec\u30b3\u30fc\u30c9\u306b\u6301\u3064\u30c6\u30fc\u30d6\u30eb\u3092\u3001MyISAM\u3068InnoDB\u3067\u305d\u308c\u305e\u308c\u6e96\u5099\u3002\n\u3082\u3061\u308d\u3093\u3001\u30b7\u30b9\u30c6\u30e0\u975e\u5bfe\u5fdc\u306e\u305f\u3081\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5f35\u308c\u306a\u3044InnoDB\u306e\u7a7a\u9593\u30ab\u30e9\u30e0\u4ee5\u5916\u306f\u3001\u5168\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5f35\u3063\u3066\u3044\u307e\u3059\u3002\n\u8d70\u3089\u305b\u305f\u691c\u7d22\u306f\u3001\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u534a\u5f8410km\u306e\u691c\u7d22\u3002\n\u7a7a\u9593\u691c\u7d22\u306f\u7a7a\u9593\u30a4\u30f3\u30c7\u30c3\u30af\u30b9/GeoHash/quadkey\u554f\u308f\u305a\u3001\u3044\u304d\u306a\u308a\u5186\u5185\u691c\u7d22\u306f\u3067\u304d\u305a\u3001\u307e\u305a\u5186\u3092\u5185\u5305\u3059\u308b\u77e9\u5f62\uff08quadkey,GeoHash\u3067\u306f\u8fd1\u508d9\u30e1\u30c3\u30b7\u30e5\uff09\u3067\u691c\u7d22\u3057\u3001\u305d\u306e\u5f8c\u4e2d\u5fc3\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u3084\u308b\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u691c\u7d22\u7d50\u679c\u6bd4\u8f03\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u3092\u4e26\u3079\u307e\u3059\u3002\n\n\n\u4e8b\u524d\u306e\u77e9\u5f62\u691c\u7d22\u6642\u306e\u3001\u691c\u7d22\u901f\u5ea6\u306e\u6bd4\u8f03\n\u4e8b\u524d\u306e\u77e9\u5f62\u691c\u7d22\u3067\u3001\u672c\u6765\u5fc5\u8981\u306a\u691c\u7d22\u7d50\u679c\u6570\u3068\u6bd4\u8f03\u3057\u3066\u3069\u308c\u304f\u3089\u3044\u4f59\u5206\u306b\u62fe\u3063\u3066\u3057\u307e\u3063\u305f\u304b\n\u305d\u306e\u5f8c\u306e\u5186\u5185\u7be9\u3044\u307e\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306e\u3001\u691c\u7d22\u901f\u5ea6\u306e\u6bd4\u8f03\uff08SQL\u4e0a\u3067\u3084\u3063\u3066\u307e\u3059\uff09\n\n\n\u691c\u7d22\u901f\u5ea6\u306f\u5404\u30055\u56de\u8a66\u884c\u306e\u5e73\u5747\u30015\u56de\u306e\u3046\u3061\u6700\u521d2\u56de\u306f\u5404sql\u4ea4\u4e92\u306b\u5b9f\u884c\u30013\u56de\u306f\u540c\u3058sql\u3092\u9023\u7d9a\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\u5b9f\u65bd\u6761\u4ef6\n\u3075\u308b\u3044\u524d\u5b9f\u884c\u6642\u9593\n\u3075\u308b\u3044\u524d\u691c\u7d22\u6570\n\u6700\u7d42\u5b9f\u884c\u6642\u9593\n\u6700\u7d42\u691c\u7d22\u6570\n\n\n\n\n\u7a7a\u9593\u691c\u7d22:MyISAM\n0.78ms\n43\n0.86ms\n36\n\n\nquadkey:MyISAM\n1.96ms\n269\n3.22ms\n36\n\n\nGeoHash:MyISAM\n1.52ms\n664\n7.04ms\n36\n\n\nquadkey:InnoDB\n1.04ms\n269\n2.00ms\n36\n\n\nGeoHash:InnoDB\n1.08ms\n664\n4.36ms\n36\n\n\n\n\n\u5b9f\u9a13\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u5b9f\u9a13\u306e\u5b9f\u884c\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\n\nSQL\u691c\u7d22\u6761\u4ef6\u53d6\u5f97\u30b3\u30fc\u30c9\nphp\u4e0a\u3067\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u53d6\u5f97\u65b9\u6cd5\u8abf\u67fb\u3092\u30b5\u30dc\u3063\u305f\u306e\u3067\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u3067WHERE\u6761\u4ef6\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092phpMyAdmin\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002\n\nSQL\u691c\u7d22\u6761\u4ef6\u53d6\u5f97\u30b3\u30fc\u30c9\n<?php\n\nrequire_once('./GeoHash.php');\nrequire_once('./QuadKey.php');\nrequire_once('./Spatial.php');\n\n$gh = new GeoHash(35.0000000,135.0000000); //GeoHash\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $gh->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n\n$qk = new QUadKey(35.0000000,135.0000000); //quadkey\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $qk->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n\n$sp = new Spatial(35.0000000,135.0000000); //\u7a7a\u9593\u691c\u7d22\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $sp->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n?>\n\n\n\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u305fWHERE\u6761\u4ef6\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\u3044\u305a\u308c\u3082\u30011\u884c\u76ee\u304c\u77e9\u5f62\u6761\u4ef6\u30012\u884c\u76ee\u304c\u534a\u5f84\u6761\u4ef6\u3067\u3059\u3002\n\u7a7a\u9593\u691c\u7d22\uff1a\n\n\u7a7a\u9593\u691c\u7d22\nWHERE MBRWithin(`geometry`, GeomFromText('LineString(134.89033595285 34.910168471588, 135.10966404715 35.089831528412)', 4326) ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n\n\nquadkey\uff1a\n\nquadkey\nWHERE ( `quadkey` LIKE '13211313131%' OR `quadkey` LIKE '13300202020%' OR `quadkey` LIKE '13300202021%' OR `quadkey` LIKE '13211313133%' OR `quadkey` LIKE '13300202022%' OR `quadkey` LIKE '13300202023%' OR `quadkey` LIKE '13211313311%' OR `quadkey` LIKE '13300202200%' OR `quadkey` LIKE '13300202201%' ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n\n\nGeoHash\uff1a\n\nGeoHash\nWHERE ( `geohash` LIKE 'wyr8%' OR `geohash` LIKE 'wyrb%' OR `geohash` LIKE 'xn20%' OR `geohash` LIKE 'wypx%' OR `geohash` LIKE 'wypz%' OR `geohash` LIKE 'xn0p%' OR `geohash` LIKE 'wypw%' OR `geohash` LIKE 'wypy%' OR `geohash` LIKE 'xn0n%' ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n\n\n\nquadkey\u30af\u30e9\u30b9\n\nquadkey\u30af\u30e9\u30b9\n<?php\n/**\n * QuadKey\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092QuadKey\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n * \n *\n * 2012/10/04 1.0      \u521d\u671f\u7248\n * 2012/12/13 1.1      \u5730\u7403\u306e\u7aef\u3067\u306e\u5883\u754c\u6761\u4ef6\u3092\u8ffd\u52a0\n * 2012/12/19 1.2      \u5909\u63db\u30ed\u30b8\u30c3\u30af\u3092\u7c21\u5358\u5316\n *\n * @package \n * @access  public\n * @author  OHTSUKA Ko-hei\n * @create  2012/10/04\n * @version 1.2\n **/\n\nclass QuadKey {\n\n    const M_ON_EQ       = 40075016.68557849;   //\u5730\u7403\u3092\u534a\u5f846378.137km\u306e\u7403\u3068\u3057\u3066\u8d64\u9053\u3067\u306e\u5468(m)\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    const EarthRadius   = 6378137;\n    const MinLatitude   = -85.05112878;\n    const MaxLatitude   = 85.05112878;\n    const MinLongitude  = -180;\n    const MaxLongitude  = 180;\n\n    private $codingMap=array();\n\n    private $add = array( 'right'  =>  1,\n                          'left'   => -1,\n                          'top'    => -2,\n                          'bottom' =>  2);\n\n    public  $lat;\n    public  $long;\n    public  $hash;\n    public  $level;\n\n    public function QuadKey($alathash=null,$along=null,$alevel=null)\n    {\n        if ($alathash !== null) {\n            if ($along !== null) {\n                $this->setLatLng($alathash,$along,$alevel);\n            } else {\n                $this->setHash($alathash);\n            }\n        }\n    }\n\n    public function setLatLng($alat,$along,$alevel=null)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n        if ($alevel !== null) {\n            $this->level = $alevel;\n        } else {\n            $this->level = 18;\n        }\n\n        $this->hash = $this->LatLngToQuadKey($this->lat,$this->long,$this->level);\n    }\n\n    public function setHash($ahash) {\n        $this->hash = $ahash;\n        $coord = $this->QuadKeyToLatLng($ahash);\n\n        $this->lat   = $coord[0];\n        $this->long  = $coord[1];\n\n        $this->level = strlen($ahash);\n    }\n\n    public function getWhere($radius) {\n        $this->setOptimizedLevel($radius);\n        $list = $this->getNeighbors();\n\n        if ($list === 'all_globe') {\n            return 'WHERE 1 ';\n        }\n\n        //null\u3084\u91cd\u8907\u304c\u3042\u308a\u5f97\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\n        $cleaning = array();\n\n        foreach ($list as $qkey) {\n            if ($qkey !== null) $cleaning[$qkey] = 1;\n        }\n\n        $where = join(\"%' OR `quadkey` LIKE '\",array_keys($cleaning));\n        $where = \"WHERE ( `quadkey` LIKE '\" . $where .\"%' ) \";\n\n        return $where;\n    }\n\n    /**\n     * \u250c\u2500\u252c\u2500\u252c\u2500\u2510\n     * \u2502\uff10\u2502\uff11\u2502\uff12\u2502\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff13\u2502\uff14\u2502\uff15\u2502 4=mine\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff16\u2502\uff17\u2502\uff18\u2502\n     * \u2514\u2500\u2534\u2500\u2534\u2500\u2518\n     * \n     */\n    public function getNeighbors($srcHash=null) {\n        if ($srcHash === null) {\n            $srcHash = $this->hash;\n        }\n        // \u5730\u7403\u5168\u4f53\u3068\u304b\u5927\u304d\u3059\u304e\n        if ($srcHash === '' || preg_match('/^[0-3]$/',$srcHash)) return 'all_globe';\n\n        // 3x3\u306e9\u30de\u30b9\u3092\u96a3\u63a5\u3068\u3057\u3066\u8fd4\u3059\n        $matrix = array(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);\n\n        $matrix[4] = $srcHash;\n        $matrix[1] = $this->calculateAdjacent($srcHash, 'top');\n        $matrix[3] = $this->calculateAdjacent($srcHash, 'left');\n        $matrix[5] = $this->calculateAdjacent($srcHash, 'right');\n        $matrix[7] = $this->calculateAdjacent($srcHash, 'bottom');\n\n        $matrix[0] = $this->calculateAdjacent($matrix[1], 'left');\n        $matrix[6] = $this->calculateAdjacent($matrix[7], 'left');\n\n        $matrix[2] = $this->calculateAdjacent($matrix[1], 'right');\n        $matrix[8] = $this->calculateAdjacent($matrix[7], 'right');\n\n        return $matrix;\n    }\n\n    /**\n     * $dir = top / left / bottom / right\n     */\n    public function calculateAdjacent($srcHash, $dir=null) {\n        if ($srcHash === null) return null;\n\n        if ($dir === null) {\n            $dir     = $srcHash;\n            $srcHash = $this->hash;\n        }\n\n        //\u6975\u57df\u306e\u5883\u754c\u6761\u4ef6\n        if (preg_match('/^[01]+$/',$srcHash) && $dir == 'top') {\n            return null;\n        } else if (preg_match('/^[23]+$/',$srcHash) && $dir == 'bottom') {\n            return null;\n        }\n\n        $tileXY = $this->QuadKeyToTileXY($srcHash);\n        if ($dir == 'top') {\n            $tileXY[1]--;\n        } else if ($dir == 'bottom') {\n            $tileXY[1]++;\n        }\n        if ($dir == 'left') {\n            $tileXY[0]--;\n        } else if ($dir == 'right') {\n            $tileXY[0]++;\n        }\n        return $this->TileXYToQuadKey($tileXY[0],$tileXY[1],strlen($srcHash));\n    }    \n\n    /**\n    * calcurate precise of given latlng\n    */\n    public function setOptimizedLevel($radius) {\n        $this->level = $this->getOptimizedLevel($radius);\n\n        $this->hash  = substr($this->hash,0,$this->level);\n    }\n\n    /**\n    * calcurate optimized level of given radius\n    */\n    public function getOptimizedLevel($alat, $along=null, $radius=null) {\n        if ($along === null) {\n            $radius = $alat;\n            $alat   = $this->lat;\n            $along  = $this->long;\n        }\n\n        $norm_radius = $radius / cos($alat * self::DEG_TO_RAD);\n\n        for ($lv=18;$lv>0;$lv--) {\n            $lat_bit = self::M_ON_EQ / pow(2, $lv);\n\n            if ($lat_bit >= $norm_radius) {\n                return $lv;\n            }\n        }\n\n        return 0;\n    }\n\n    private function _Clip($n, $minValue, $maxValue) {\n        return min(max($n, $minValue), $maxValue);\n    }\n\n    public function MapSize($levelOfDetail) {\n        return 256 << $levelOfDetail;\n    }\n\n    public function LatLngToPixelXY($lat, $lng, $levelOfDetail) {\n        $lat = $this->_Clip($lat, self::MinLatitude, self::MaxLatitude);\n        $lng = $this->_Clip($lng, self::MinLongitude, self::MaxLongitude);\n\n        $x = ($lng + 180) / 360;\n        $sinLat = sin($lat * M_PI / 180);\n        $y = 0.5 - log((1 + $sinLat) / (1 - $sinLat)) / (4 * M_PI);\n\n        $mapSize = $this->MapSize($levelOfDetail);\n        $pixelX  = (int) $this->_Clip($x * $mapSize + 0.5, 0, $mapSize - 1);\n        $pixelY  = (int) $this->_Clip($y * $mapSize + 0.5, 0, $mapSize - 1);\n\n        return array($pixelX, $pixelY);\n    }\n\n    public function pixelXYToLatLng($pixelX, $pixelY, $levelOfDetail) {\n        $mapSize = $this->MapSize($levelOfDetail);\n        $x = ($this->_Clip($pixelX, 0, $mapSize - 1) / $mapSize) - 0.5;\n        $y = 0.5 - ($this->_Clip($pixelY, 0, $mapSize - 1) / $mapSize);\n\n        $lat = 90 - 360 * atan(exp(-$y * 2 * M_PI)) / M_PI;\n        $lng = 360 * $x;\n\n        return array($lat, $lng);\n    }\n\n    public function PixelXYToTileXY($pixelX, $pixelY) {\n        $tileX = $pixelX / 256;\n        $tileY = $pixelY / 256;\n        return array((int)$tileX, (int)$tileY);\n    }\n\n    public function TileXYToPixelXY($tileX, $tileY) {\n        $pixelX = $tileX * 256;\n        $pixelY = $tileY * 256;\n        return array($pixelX, $pixelY);\n    }\n\n    public function TileXYToQuadKey($tileX, $tileY, $levelOfDetail) {\n        $xbin = substr(decbin($tileX), -$levelOfDetail);\n        $ybin = substr(decbin($tileY), -$levelOfDetail);\n\n        $quadKey = substr('00000000000000000000' . ($xbin + $ybin * 2) , -$levelOfDetail);\n\n        return $quadKey;\n    }\n\n    public function QuadKeyToTileXY($quadKey) {\n        $xbin  = preg_replace(array('/[13]/','/[02]/'),array('1','0'),$quadKey);\n        $ybin  = preg_replace(array('/[01]/','/[23]/'),array('0','1'),$quadKey);\n\n        $tileX = bindec($xbin);\n        $tileY = bindec($ybin);\n\n        return array($tileX, $tileY);\n    }\n\n    public function LatLngToTileXY($lat, $lng, $levelOfDetail) {\n        list($px, $py) = $this->LatLngToPixelXY($lat, $lng, $levelOfDetail);\n        return $this->PixelXYToTileXY($px, $py);\n    }\n\n    public function LatLngToQuadKey($lat, $lng, $levelOfDetail) {\n        list($px, $py) = $this->LatLngToPixelXY($lat, $lng, $levelOfDetail);\n        list($x, $y) = $this->PixelXYToTileXY($px, $py);\n\n        $quadKey = $this->TileXYToQuadKey($x, $y, $levelOfDetail);\n        return $quadKey;\n    }\n\n    public function QuadKeyToLatLng($quadKey) {\n        list($x, $y) = $this->QuadKeyToTileXY($quadKey);\n        list($pixelX, $pixelY) = $this->TileXYToPixelXY($x, $y);\n        return $this->pixelXYToLatLng($pixelX, $pixelY, strlen($quadKey));\n    }\n}\n?>\n\n\n\nGeoHash\u30af\u30e9\u30b9\n\u7d4c\u5ea6180\u5ea6\u3092\u307e\u305f\u3050\u5834\u5408\u3084\u3001\u5317\u6975\u5357\u6975\u4ed8\u8fd1\u3067\u7121\u9650\u30eb\u30fc\u30d7\u30a8\u30e9\u30fc\u304c\u751f\u3058\u307e\u3059\u304c\u4fee\u6b63\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nGeoHash\u30af\u30e9\u30b9\n<?php\n/**\n * GeoHash\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092GeoHash\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n * \n *\n * 2010/11/01 0.1      \u521d\u671f\u7248\n * 2012/10/04 1.1      \u6539\u5909\n *\n * @package \n * @access  public\n * @author  TakanoriYAMAZAKI\n * @modifier OHTSUKA Ko-hei\n * @create  2010/11/01\n * @modified 2012/10/04\n * @version 1.1\n **/\n\nclass GeoHash {\n\n    const M_PER_DEGREE  = 111319.49079327357;   //\u7def\u5ea61\u5ea6\u3042\u305f\u308a\u306ekm, \u5730\u7403\u3092\u534a\u5f84378.137km\u306e\u7403\u3068\u3057\u3066\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    private $coding                                         =\"0123456789bcdefghjkmnpqrstuvwxyz\";\n    private $codingMap=array();\n\n    private $NEIGHBORS = array( 'right'  => array( 'even' => \"bc01fg45238967deuvhjyznpkmstqrwx\"),\n                                'left'   => array( 'even' => \"238967debc01fg45kmstqrwxuvhjyznp\"),\n                                'top'    => array( 'even' => \"p0r21436x8zb9dcf5h7kjnmqesgutwvy\"),\n                                'bottom' => array( 'even' => \"14365h7k9dcfesgujnmqp0r2twvyx8zb\"));\n    private $BORDERS   = array( 'right'  => array( 'even' => \"bcfguvyz\"),\n                                'left'   => array( 'even' => \"0145hjnp\"),\n                                'top'    => array( 'even' => \"prxz\"),\n                                'bottom' => array( 'even' => \"028b\"));\n\n    public  $lat;\n    public  $long;\n    public  $hash;\n    public  $level;\n\n    public function GeoHash($alathash=null,$along=null,$alevel=null)\n    {\n        //build map from encoding char to 0 padded bitfield\n        for($i=0; $i<32; $i++)\n        {\n            $this->codingMap[substr($this->coding,$i,1)]=str_pad(decbin($i), 5, \"0\", STR_PAD_LEFT);\n        }\n\n        $this->NEIGHBORS['bottom']['odd']    = $this->NEIGHBORS['left']['even'];\n        $this->NEIGHBORS['top']['odd']        = $this->NEIGHBORS['right']['even'];\n        $this->NEIGHBORS['left']['odd']        = $this->NEIGHBORS['bottom']['even'];\n        $this->NEIGHBORS['right']['odd']    = $this->NEIGHBORS['top']['even'];\n\n        $this->BORDERS['bottom']['odd']        = $this->BORDERS['left']['even'];\n        $this->BORDERS['top']['odd']        = $this->BORDERS['right']['even'];\n        $this->BORDERS['left']['odd']        = $this->BORDERS['bottom']['even'];\n        $this->BORDERS['right']['odd']        = $this->BORDERS['top']['even'];\n\n        if ($alathash !== null) {\n            if ($along !== null) {\n                $this->setLatLng($alathash,$along,$alevel);\n            } else {\n                $this->setHash($alathash);\n            }\n        }\n    }\n\n    public function setLatLng($alat,$along,$alevel=null)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n        if ($alevel !== null) {\n            $this->level = $alevel;\n        } else {\n            $this->level = 12;\n        }\n\n        $this->hash = substr($this->encode($this->lat,$this->long),0,$this->level);\n    }\n\n    public function setHash($ahash) {\n        $this->hash = $ahash;\n        $coord = $this->decode($ahash);\n\n        $this->lat   = $coord[0];\n        $this->long  = $coord[1];\n\n        $this->level = strlen($ahash);\n    }\n\n    public function getWhere($radius) {\n        $this->setOptimizedLevel($radius);\n        $list = $this->getNeighbors();\n\n        $where = join(\"%' OR `geohash` LIKE '\",$list);\n        $where = \"WHERE ( `geohash` LIKE '\" . $where .\"%' ) \";\n\n        return $where;\n    }\n\n    /**\n     * \u250c\u2500\u252c\u2500\u252c\u2500\u2510\n     * \u2502\uff10\u2502\uff11\u2502\uff12\u2502\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff13\u2502\uff14\u2502\uff15\u2502 4=mine\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff16\u2502\uff17\u2502\uff18\u2502\n     * \u2514\u2500\u2534\u2500\u2534\u2500\u2518\n     * \n     */\n    public function getNeighbors($srcHash=null) {\n        if ($srcHash === null) {\n            $srcHash = $this->hash;\n        }\n\n        // 3x3\u306e9\u30de\u30b9\u3092\u96a3\u63a5\u3068\u3057\u3066\u8fd4\u3059\n        $matrix = array(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);\n\n        $matrix[4] = $srcHash;\n        $matrix[1] = $this->calculateAdjacent($srcHash, 'top');\n        $matrix[3] = $this->calculateAdjacent($srcHash, 'left');\n        $matrix[5] = $this->calculateAdjacent($srcHash, 'right');\n        $matrix[7] = $this->calculateAdjacent($srcHash, 'bottom');\n\n        $matrix[0] = $this->calculateAdjacent($matrix[1], 'left');\n        $matrix[6] = $this->calculateAdjacent($matrix[7], 'left');\n\n        $matrix[2] = $this->calculateAdjacent($matrix[1], 'right');\n        $matrix[8] = $this->calculateAdjacent($matrix[7], 'right');\n\n        return $matrix;\n    }\n\n    /**\n     * $dir = top / left / bottom / right\n     */\n    public function calculateAdjacent($srcHash, $dir=null) {\n        if ($dir === null) {\n            $dir     = $srcHash;\n            $srcHash = $this->hash;\n        }\n\n        $dir = strtolower($dir);\n        $srcHash = strtolower($srcHash);\n\n        $lastChr = substr($srcHash, -1);\n        $type = strlen($srcHash) % 2 ? 'odd' : 'even';\n        $base = substr($srcHash, 0, strlen($srcHash)-1);\n        if (strpos($this->BORDERS[$dir][$type], $lastChr)!==false) {\n            $base = $this->calculateAdjacent($base, $dir);\n        }\n\n        return $base . $this->coding[strpos($this->NEIGHBORS[$dir][$type], $lastChr)];\n    }\n\n    /**\n    * Decode a geohash and return an array with decimal lat,long in it\n    */\n    public function decode($hash)\n    {\n        //decode hash into binary string\n        $binary=\"\";\n        $hl=strlen($hash);\n        for($i=0; $i<$hl; $i++)\n        {\n            $binary.=$this->codingMap[substr($hash,$i,1)];\n        }\n\n        //split the binary into lat and log binary strings\n        $bl=strlen($binary);\n        $blat=\"\";\n        $blong=\"\";\n        for ($i=0; $i<$bl; $i++)\n        {\n            if ($i%2)\n                $blat=$blat.substr($binary,$i,1);\n            else\n                $blong=$blong.substr($binary,$i,1);\n\n        }\n\n        //now concert to decimal\n        $lat=$this->binDecode($blat,-90,90);\n        $long=$this->binDecode($blong,-180,180);\n\n        //figure out how precise the bit count makes this calculation\n        $latErr=$this->calcError(strlen($blat),-90,90);\n        $longErr=$this->calcError(strlen($blong),-180,180);\n\n        //how many decimal places should we use? There's a little art to\n        //this to ensure I get the same roundings as geohash.org\n        $latPlaces=max(1, -round(log10($latErr))) - 1;\n        $longPlaces=max(1, -round(log10($longErr))) - 1;\n\n        //round it\n        $lat=round($lat, $latPlaces);\n        $long=round($long, $longPlaces);\n\n        return array($lat,$long);\n    }\n\n    /**\n    * Encode a hash from given lat and long\n    */\n    public function encode($lat,$long)\n    {\n        //how many bits does latitude need?    \n        /*$plat=$this->precision($lat);\n        $latbits=1;\n        $err=45;\n        while($err>$plat)\n        {\n            $latbits++;\n            $err/=2;\n        }\n\n        //how many bits does longitude need?\n        $plong=$this->precision($long);\n        $longbits=1;\n        $err=90;\n        while($err>$plong)\n        {\n            $longbits++;\n            $err/=2;\n        }\n\n        //bit counts need to be equal\n        $bits=max($latbits,$longbits);*/\n\n        //as the hash create bits in groups of 5, lets not\n        //waste any bits - lets bulk it up to a multiple of 5\n        //and favour the longitude for any odd bits\n        $bits= 30;\n        $longbits=$bits;\n        $latbits=$bits;\n        $addlong=1;\n        while (($longbits+$latbits)%5 != 0)\n        {\n            $longbits+=$addlong;\n            $latbits+=!$addlong;\n            $addlong=!$addlong;\n        }\n\n        //encode each as binary string\n        $blat=$this->binEncode($lat,-90,90, $latbits);\n        $blong=$this->binEncode($long,-180,180,$longbits);\n\n        //merge lat and long together\n        $binary=\"\";\n        $uselong=1;\n        while (strlen($blat)+strlen($blong))\n        {\n            if ($uselong)\n            {\n                $binary=$binary.substr($blong,0,1);\n                $blong=substr($blong,1);\n            }\n            else\n            {\n                $binary=$binary.substr($blat,0,1);\n                $blat=substr($blat,1);\n            }\n            $uselong=!$uselong;\n        }\n\n        //convert binary string to hash\n        $hash=\"\";\n        for ($i=0; $i<strlen($binary); $i+=5)\n        {\n            $n=bindec(substr($binary,$i,5));\n            $hash=$hash.$this->coding[$n];\n        }\n\n        return $hash;\n    }\n\n    /**\n    * What's the maximum error for $bits bits covering a range $min to $max\n    */\n    private function calcError($bits,$min,$max)\n    {\n        $err=($max-$min)/2;\n        while ($bits--)\n            $err/=2;\n        return $err;\n    }\n\n    /*\n    * returns precision of number\n    * precision of 42 is 0.5\n    * precision of 42.4 is 0.05\n    * precision of 42.41 is 0.005 etc\n    */\n    private function precision($number)\n    {\n        $precision=0;\n        $pt=strpos($number,'.');\n        if ($pt!==false)\n        {\n            $precision=-(strlen($number)-$pt-1);\n        }\n\n        return pow(10,$precision)/2;\n    }\n\n    /**\n    * create binary encoding of number as detailed in http://en.wikipedia.org/wiki/Geohash#Example\n    * removing the tail recursion is left an exercise for the reader\n    */\n    private function binEncode($number, $min, $max, $bitcount)\n    {\n        if ($bitcount==0)\n            return \"\";\n\n        #echo \"$bitcount: $min $max<br>\";\n\n        //this is our mid point - we will produce a bit to say\n        //whether $number is above or below this mid point\n        $mid=($min+$max)/2;\n        if ($number>$mid)\n            return \"1\".$this->binEncode($number, $mid, $max,$bitcount-1);\n        else\n            return \"0\".$this->binEncode($number, $min, $mid,$bitcount-1);\n    }\n\n    /**\n    * decodes binary encoding of number as detailed in http://en.wikipedia.org/wiki/Geohash#Example\n    * removing the tail recursion is left an exercise for the reader\n    */\n    private function binDecode($binary, $min, $max)\n    {\n        $mid=($min+$max)/2;\n\n        if (strlen($binary)==0)\n            return $mid;\n\n        $bit=substr($binary,0,1);\n        $binary=substr($binary,1);\n\n        if ($bit==1)\n            return $this->binDecode($binary, $mid, $max);\n        else\n            return $this->binDecode($binary, $min, $mid);\n    }\n\n    /**\n    * calcurate precise of given latlng\n    */\n    public function setOptimizedLevel($radius) {\n        $this->level = $this->getOptimizedLevel($radius);\n\n        $this->hash  = substr($this->hash,0,$this->level);\n    }\n\n    /**\n    * calcurate optimized level of given radius\n    */\n    public function getOptimizedLevel($alat, $along=null, $radius=null) {\n        if ($along === null) {\n            $radius = $alat;\n            $alat   = $this->lat;\n            $along  = $this->long;\n        }\n\n        $lat_m_per_deg = self::M_PER_DEGREE;\n        $lng_m_per_deg = cos($alat * self::DEG_TO_RAD) * self::M_PER_DEGREE;\n\n        for ($lv=12;$lv>0;$lv--) {\n            $lng_bit = ceil(  5 * $lv / 2.0 );\n            $lat_bit = floor( 5 * $lv / 2.0 );\n            $lng_grid_size = (360.0 / pow(2, $lng_bit)) * $lng_m_per_deg;\n            $lat_grid_size = (360.0 / pow(2, $lat_bit)) * $lat_m_per_deg;\n\n            if ($lng_grid_size >= $radius && $lat_grid_size >= $radius) {\n                return $lv;\n            }\n        }\n\n        return 0;\n    }\n}\n?>\n\n\n\n\u7a7a\u9593\u691c\u7d22\u30af\u30e9\u30b9\n\n\u7a7a\u9593\u691c\u7d22\u30af\u30e9\u30b9\n<?php\n/**\n * Spatial\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092Spatial\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u77e9\u5f62\u3092\u306f\u304d\u307e\u3059\u3002\n * \n *\n * 2012/10/04 0.1      \u521d\u671f\u7248\n *\n * @package \n * @access  public\n * @author  OHTSUKA Ko-hei\n * @create  2012/10/04\n * @version 0.1\n **/\n\nclass Spatial {\n\n    const M_PER_DEGREE  = 111319.49079327357;   //\u7def\u5ea61\u5ea6\u3042\u305f\u308a\u306ekm, \u5730\u7403\u3092\u534a\u5f84378.137km\u306e\u7403\u3068\u3057\u3066\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    public  $lat;\n    public  $long;\n\n    public function Spatial($alat,$along)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n    }\n\n    public function getWhere($radius) {\n        $lat_m_per_deg = self::M_PER_DEGREE;\n        $lng_m_per_deg = cos($this->lat * self::DEG_TO_RAD) * self::M_PER_DEGREE;\n\n        $d_lat = $radius / $lat_m_per_deg;\n        $d_lng = $radius / $lng_m_per_deg;\n\n        $where = \"WHERE MBRWithin(`geometry`, GeomFromText('LineString(\" . ($this->long - $d_lng ) . \" \" . ($this->lat - $d_lat ) . \", \" . ($this->long + $d_lng ) . \" \" . ($this->lat + $d_lat ) . \")', 4326)) \";\n        $where .= \"AND SQRT(POWER((X(`geometry`) - \" . $this->long . \") * \" . $lng_m_per_deg . \",2) + POWER((Y(`geometry`) - \" . $this->lat . \") * \" . $lat_m_per_deg . \",2)) < \" . $radius;\n\n        return $where;\n    }\n}\n?>\n\n\n## \u6ce8\u610f\nmysql\u3067\u7a7a\u9593\u691c\u7d22\u3092\u3059\u308b\u5834\u5408\u3001InnoDB\u3067\u306f\u3001\u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u304c\u4f5c\u308c\u306a\u3044\u305f\u3081\u3001\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306b\u3088\u308b\u691c\u7d22\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\nMyISAM\u3067\u3082\u554f\u984c\u306a\u3044\u5834\u5408\u306f\u3001\u7a7a\u9593\u691c\u7d22\u901f\u5ea6\u304c\u901f\u3044\u306e\u3067[\u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u306e\u5229\u7528](http://qiita.com/kochizufan/items/a68b30ba74849483f75c)\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### \u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u691c\u7d22\u306e\u57fa\u672c\n\u8003\u3048\u65b9\u306e\u57fa\u672c\u306b\u3064\u3044\u3066\u306f\u3001\u3082\u3063\u3068\u3082\u6d41\u884c\u3063\u3066\u3044\u308b\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3067\u3042\u308b\u3001GeoHash\u306b\u3064\u3044\u3066\u306e\u3053\u3061\u3089\u306e\u8a18\u4e8b\uff08 http://blog.masuidrive.jp/index.php/2010/01/13/geohash/ \uff09\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* \u63a1\u7528\u3059\u308b\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3044\u304f\u3089\u306e\u30e1\u30c3\u30b7\u30e5\u304c\u3001\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u7def\u5ea6\u3067\u3001\u30e1\u30c3\u30b7\u30e5\u306e\u77ed\u8fba\u304c\u6c42\u3081\u305f\u3044\u691c\u7d22\u534a\u5f84\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u304b\u3092\u8abf\u3079\u307e\u3059\u3002\n* \u6c42\u3081\u305f\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3067\u3001\u691c\u7d22\u4e2d\u5fc3\u306e\u7d4c\u7def\u5ea6\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u6c42\u3081\u307e\u3059\u3002\n* \u305d\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306e\u3001\u5468\u8fba8\u3064\uff08\u81ea\u5206\u81ea\u8eab\u3082\u542b\u3081\u308b\u30689\u3064\uff09\u306e\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u6c42\u3081\u307e\u3059\u3002  \n9\u3064\u6c42\u3081\u308b\u7406\u7531\u306f\u3001\u691c\u7d22\u4e2d\u5fc3\u7d4c\u7def\u5ea6\u304c\u4e2d\u5fc3\u30e1\u30c3\u30b7\u30e5\u306e\u3069\u3053\u306b\u4f4d\u7f6e\u3057\u3066\u3082\u3001\u5fc5\u305a\u691c\u7d22\u534a\u5f84\u304c9\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n* \u6c42\u3081\u305f9\u3064\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3067\u3001\u4f4d\u7f6e\u60c5\u5831\u30c6\u30fc\u30d6\u30eb\u306e\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u30ab\u30e9\u30e0\u306b\u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u304b\u3051\u307e\u3059\u3002\n* \u691c\u7d22\u534a\u5f84\u5916\u306e\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u3051\u308c\u3070\u3001\u3053\u306e\u691c\u7d22\u7d50\u679c\u3092\u8868\u793a\u3059\u308c\u3070\u7d42\u4e86\u3067\u3059\u3002  \n\u3082\u3057\u53b3\u5bc6\u306b\u691c\u7d22\u7bc4\u56f2\u5185\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u691c\u7d22\u7d50\u679c\u306e\u5168\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3001\u305d\u308c\u3067\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u6b63\u78ba\u306a\u534a\u5f84\u5185\u30c7\u30fc\u30bf\u3092\u6d17\u3044\u51fa\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u304c\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u306b\u3088\u308b\u534a\u5f84\u691c\u7d22\u306e\u57fa\u672c\u7684\u8003\u3048\u65b9\u3067\u3059\u3002\n\n### quadkey\n\n\u4e16\u9593\u3067\u306f\u3001GeoHash\u304c\u6d41\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u540c\u3058\u4e00\u6b21\u5143\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u691c\u7d22\u3092\u3059\u308b\u306a\u3089\u3070\u3001GeoHash\u3088\u308a\u691c\u7d22\u52b9\u7387\u306e\u3088\u3044quadkey\u3092\u4f7f\u3046\u3079\u304d\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\nquadkey\u3068\u306f \u21d2 http://msdn.microsoft.com/en-us/library/bb259689.aspx \u3053\u306eURL\u306e\u4e0b\u534a\u5206\u3001Tile Coordinates and Quadkeys\u3042\u305f\u308a\n\nquadkey\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u7406\u7531\uff1a\n\n* \u30b3\u30fc\u30c9\u30e1\u30c3\u30b7\u30e5\u306e\u5f62\u304c\u3001\u5b9f\u8ddd\u96e2\u306b\u7f6e\u3044\u3066\u3082\u6b63\u3057\u304f\u6b63\u65b9\u5f62\n* \u5730\u56f3\u30d9\u30fc\u30b9\u306e\u6280\u8853\u306a\u306e\u3067\u5f53\u7136\u3001\u7def\u5ea6\u304c\u5927\u304d\u304f\u9055\u3048\u3070\u540c\u3058\u7cbe\u5ea6\u30ec\u30d9\u30eb\u306e\u30e1\u30c3\u30b7\u30e5\u3067\u3082\u8fba\u306e\u9577\u3055\u306f\u7570\u306a\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u306f1\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u4e2d\u3067\u306f\u3001\u7d4c\u5ea6\u65b9\u5411\u3068\u7def\u5ea6\u65b9\u5411\u306e\u9577\u3055\u304c\u540c\u3058\u3001\u6b63\u65b9\u5f62\u306b\u306a\u308a\u307e\u3059\u3002  \n\u3053\u308c\u306f\u534a\u5f84\u30d9\u30fc\u30b9\u306e\u691c\u7d22\u3092\u3059\u308b\u969b\u3001\u4f7f\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \nGeoHash\u306f\u5143\u3005\u9577\u65b9\u5f62\u306a\u4e0a\u3001\u30e1\u30eb\u30ab\u30c8\u30eb\u56f3\u6cd5\u5ea7\u6a19\u3067\u306f\u306a\u304f\u751f\u7d4c\u7def\u5ea6\u304b\u3089\u7b97\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u5272\u5408\u3082\u7def\u5ea6\u3054\u3068\u306b\u5927\u9055\u3044\u3067\u3001\u534a\u5f84\u3092\u542b\u3080\u30e1\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba\u3092\u6c42\u3081\u308b\u306e\u304c\u3081\u3093\u3069\u3044\u3057\u3001\u6700\u9069\u5316\u3055\u308c\u306a\u3044\u3002\n* \u30e1\u30c3\u30b7\u30e5\u4e0a\u4f4d\u3068\u4e0b\u4f4d\u306e\u5206\u5272\u304c\u30014\u5206\u6728\u3067\u30de\u30a4\u30eb\u30c9  \nquadkey\u306f\u4e0a\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u304b\u3089\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3078\u306e\u5206\u5272\u304c4\u5206\u5272\u306a\u306e\u3067\u3001\u7cbe\u5ea6\u30ec\u30d9\u30eb\u306e\u8abf\u6574\u304c\u52b9\u304d\u3084\u3059\u304f\u3001\u7121\u99c4\u306a\u7bc4\u56f2\u306e\u691c\u7d22\u304c\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\u3002  \nGeoHash\u306f\u4e0a\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u304b\u3089\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3078\u306e\u5206\u5272\u304c32\u5206\u5272\u306a\u306e\u3067\u3001\u4e0b\u306e\u7cbe\u5ea6\u30ec\u30d9\u30eb\u3067\u306f\u8db3\u308a\u306a\u3044\u304b\u3089\u3068\u4e0a\u306e\u30ec\u30d9\u30eb\u306b\u4e0a\u3052\u308b\u3068\u4e00\u6c17\u306b32\u500d\u306e\u7bc4\u56f2\u3092\u691c\u7d22\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u7121\u99c4\u304c\u5927\u304d\u3044\u3067\u3059\u3002\n* \u96a3\u63a5\u30bf\u30a4\u30eb\u306e\u53d6\u5f97\u30ed\u30b8\u30c3\u30af\u304c\u7c21\u5358\n* \u30e1\u30c3\u30b7\u30e5\u306e\u30ab\u30d0\u30fc\u3059\u308b\u8ddd\u96e2\u5224\u5b9a\u3082\u7c21\u5358\n\n\u3068\u3044\u3063\u305f\u70b9\u3067\u512a\u308c\u3066\u3044\u307e\u3059\u3002\n\nquadkey\u306e\u6b20\u70b9\u306f\u3001GeoHash\u306b\u6bd4\u3079\u3066\u30b3\u30fc\u30c9\u30b5\u30a4\u30ba\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u30c7\u30fc\u30bf\u91cf\u304c\u5897\u5927\u3059\u308b\uff08\u5358\u7d14\u8a08\u7b97\u3067\u540c\u3058\u7cbe\u5ea6\u306a\u30892.5\u500d\uff09\u3053\u3068\u3067\u3059\u304c\u3001\u304d\u3087\u3046\u3073BLOB\u30c7\u30fc\u30bf\u3082\u6271\u3063\u305f\u308a\u3059\u308b\u6642\u4ee3\u306b8\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u304c20\u30d0\u30a4\u30c8\u3067\u3082\u305d\u3053\u307e\u3067\u5927\u5dee\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3057\u3001InnoDB\u3067\u3042\u308c\u3070\u524d\u65b9\u4e00\u81f4\u3067\u306e\u691c\u7d22\u306b\u30b3\u30fc\u30c9\u9577\u3055\u306b\u3088\u308b\u30c7\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u3088\u3046\u306a\u306e\u3067\uff08MyISAM\u3060\u3068\u82e5\u5e72\u3042\u308b\u6a21\u69d8\uff09\u3001\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n### \u7a7a\u9593\u30c6\u30fc\u30d6\u30eb\u3001GeoHash\u3001quadkey\u9593\u306e\u6bd4\u8f03\n\u6bd4\u8f03\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u8f09\u305b\u307e\u3059\u3002\n\u6761\u4ef6\u306f\u3001\n\n* \u65e5\u672c\u306e\u7bc4\u56f2\u306b\u8fd1\u3044\u5317\u7def20\u5ea6\uff5e50\u5ea6\u3001\u6771\u7d4c120\u5ea6\uff5e150\u5ea6\u306e\u9818\u57df\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u306b100\u4e07\u70b9\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u6563\u308a\u3070\u3081\u3066\u3001\u7a7a\u9593\u30ab\u30e9\u30e0\u3001GeoHash\u3001quadkey\u306e3\u5024\u306b\u76f4\u3057\u305f\u5f62\u3067\u30ec\u30b3\u30fc\u30c9\u306b\u6301\u3064\u30c6\u30fc\u30d6\u30eb\u3092\u3001MyISAM\u3068InnoDB\u3067\u305d\u308c\u305e\u308c\u6e96\u5099\u3002  \n\u3082\u3061\u308d\u3093\u3001\u30b7\u30b9\u30c6\u30e0\u975e\u5bfe\u5fdc\u306e\u305f\u3081\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5f35\u308c\u306a\u3044InnoDB\u306e\u7a7a\u9593\u30ab\u30e9\u30e0\u4ee5\u5916\u306f\u3001\u5168\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5f35\u3063\u3066\u3044\u307e\u3059\u3002\n* \u8d70\u3089\u305b\u305f\u691c\u7d22\u306f\u3001\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u534a\u5f8410km\u306e\u691c\u7d22\u3002\n* \u7a7a\u9593\u691c\u7d22\u306f\u7a7a\u9593\u30a4\u30f3\u30c7\u30c3\u30af\u30b9/GeoHash/quadkey\u554f\u308f\u305a\u3001\u3044\u304d\u306a\u308a\u5186\u5185\u691c\u7d22\u306f\u3067\u304d\u305a\u3001\u307e\u305a\u5186\u3092\u5185\u5305\u3059\u308b\u77e9\u5f62\uff08quadkey,GeoHash\u3067\u306f\u8fd1\u508d9\u30e1\u30c3\u30b7\u30e5\uff09\u3067\u691c\u7d22\u3057\u3001\u305d\u306e\u5f8c\u4e2d\u5fc3\u3068\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u3084\u308b\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u691c\u7d22\u7d50\u679c\u6bd4\u8f03\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u3092\u4e26\u3079\u307e\u3059\u3002\n * \u4e8b\u524d\u306e\u77e9\u5f62\u691c\u7d22\u6642\u306e\u3001\u691c\u7d22\u901f\u5ea6\u306e\u6bd4\u8f03\n * \u4e8b\u524d\u306e\u77e9\u5f62\u691c\u7d22\u3067\u3001\u672c\u6765\u5fc5\u8981\u306a\u691c\u7d22\u7d50\u679c\u6570\u3068\u6bd4\u8f03\u3057\u3066\u3069\u308c\u304f\u3089\u3044\u4f59\u5206\u306b\u62fe\u3063\u3066\u3057\u307e\u3063\u305f\u304b\n * \u305d\u306e\u5f8c\u306e\u5186\u5185\u7be9\u3044\u307e\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306e\u3001\u691c\u7d22\u901f\u5ea6\u306e\u6bd4\u8f03\uff08SQL\u4e0a\u3067\u3084\u3063\u3066\u307e\u3059\uff09\n* \u691c\u7d22\u901f\u5ea6\u306f\u5404\u30055\u56de\u8a66\u884c\u306e\u5e73\u5747\u30015\u56de\u306e\u3046\u3061\u6700\u521d2\u56de\u306f\u5404sql\u4ea4\u4e92\u306b\u5b9f\u884c\u30013\u56de\u306f\u540c\u3058sql\u3092\u9023\u7d9a\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n|\u5b9f\u65bd\u6761\u4ef6|\u3075\u308b\u3044\u524d\u5b9f\u884c\u6642\u9593|\u3075\u308b\u3044\u524d\u691c\u7d22\u6570|\u6700\u7d42\u5b9f\u884c\u6642\u9593|\u6700\u7d42\u691c\u7d22\u6570|\n|:--|:--|:--|:--|:--|\n|\u7a7a\u9593\u691c\u7d22:MyISAM|0.78ms|43|0.86ms|36|\n|quadkey:MyISAM|1.96ms|269|3.22ms|36|\n|GeoHash:MyISAM|1.52ms|664|7.04ms|36|\n|quadkey:InnoDB|1.04ms|269|2.00ms|36|\n|GeoHash:InnoDB|1.08ms|664|4.36ms|36|\n\n### \u5b9f\u9a13\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u5b9f\u9a13\u306e\u5b9f\u884c\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059\u3002\n\n#### SQL\u691c\u7d22\u6761\u4ef6\u53d6\u5f97\u30b3\u30fc\u30c9\nphp\u4e0a\u3067\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u53d6\u5f97\u65b9\u6cd5\u8abf\u67fb\u3092\u30b5\u30dc\u3063\u305f\u306e\u3067\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u3067WHERE\u6761\u4ef6\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092phpMyAdmin\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002\n\n```php:SQL\u691c\u7d22\u6761\u4ef6\u53d6\u5f97\u30b3\u30fc\u30c9\n<?php\n\nrequire_once('./GeoHash.php');\nrequire_once('./QuadKey.php');\nrequire_once('./Spatial.php');\n\n$gh = new GeoHash(35.0000000,135.0000000); //GeoHash\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $gh->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n\n$qk = new QUadKey(35.0000000,135.0000000); //quadkey\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $qk->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n\n$sp = new Spatial(35.0000000,135.0000000); //\u7a7a\u9593\u691c\u7d22\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6771\u7d4c135\u5ea6\u3001\u5317\u7def35\u5ea6\u3092\u4e2d\u5fc3\u306b\u751f\u6210\necho $sp->getWhere(10000) . \"\\n\";          //\u4e0a\u8a18\u3067\u534a\u5f8410km\u306e\u691c\u7d22\u3092\u884c\u3046Where\u6761\u4ef6\u3092\u8868\u793a\n?>\n```\n\u5b9f\u969b\u306b\u767a\u884c\u3055\u308c\u305fWHERE\u6761\u4ef6\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\u3044\u305a\u308c\u3082\u30011\u884c\u76ee\u304c\u77e9\u5f62\u6761\u4ef6\u30012\u884c\u76ee\u304c\u534a\u5f84\u6761\u4ef6\u3067\u3059\u3002\n\n*\u7a7a\u9593\u691c\u7d22\uff1a*\n\n```sql:\u7a7a\u9593\u691c\u7d22\nWHERE MBRWithin(`geometry`, GeomFromText('LineString(134.89033595285 34.910168471588, 135.10966404715 35.089831528412)', 4326) ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n```\n\n*quadkey\uff1a*\n\n```sql:quadkey\nWHERE ( `quadkey` LIKE '13211313131%' OR `quadkey` LIKE '13300202020%' OR `quadkey` LIKE '13300202021%' OR `quadkey` LIKE '13211313133%' OR `quadkey` LIKE '13300202022%' OR `quadkey` LIKE '13300202023%' OR `quadkey` LIKE '13211313311%' OR `quadkey` LIKE '13300202200%' OR `quadkey` LIKE '13300202201%' ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n```\n\n*GeoHash\uff1a*\n\n```sql:GeoHash\nWHERE ( `geohash` LIKE 'wyr8%' OR `geohash` LIKE 'wyrb%' OR `geohash` LIKE 'xn20%' OR `geohash` LIKE 'wypx%' OR `geohash` LIKE 'wypz%' OR `geohash` LIKE 'xn0p%' OR `geohash` LIKE 'wypw%' OR `geohash` LIKE 'wypy%' OR `geohash` LIKE 'xn0n%' ) \nAND SQRT( POWER( ( X( `geometry` ) - 135 ) * 91187.58845252,2 ) + POWER( ( Y( `geometry` ) - 35 ) * 111319.49079327,2 ) ) < 10000\n```\n\n#### quadkey\u30af\u30e9\u30b9 \n\n```php:quadkey\u30af\u30e9\u30b9\n<?php\n/**\n * QuadKey\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092QuadKey\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n * \n *\n * 2012/10/04 1.0      \u521d\u671f\u7248\n * 2012/12/13 1.1      \u5730\u7403\u306e\u7aef\u3067\u306e\u5883\u754c\u6761\u4ef6\u3092\u8ffd\u52a0\n * 2012/12/19 1.2      \u5909\u63db\u30ed\u30b8\u30c3\u30af\u3092\u7c21\u5358\u5316\n *\n * @package \n * @access  public\n * @author  OHTSUKA Ko-hei\n * @create  2012/10/04\n * @version 1.2\n **/\n\nclass QuadKey {\n\n    const M_ON_EQ       = 40075016.68557849;   //\u5730\u7403\u3092\u534a\u5f846378.137km\u306e\u7403\u3068\u3057\u3066\u8d64\u9053\u3067\u306e\u5468(m)\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    const EarthRadius   = 6378137;\n    const MinLatitude   = -85.05112878;\n    const MaxLatitude   = 85.05112878;\n    const MinLongitude  = -180;\n    const MaxLongitude  = 180;\n\n    private $codingMap=array();\n\n    private $add = array( 'right'  =>  1,\n                          'left'   => -1,\n                          'top'    => -2,\n                          'bottom' =>  2);\n\n    public  $lat;\n    public  $long;\n    public  $hash;\n    public  $level;\n\n    public function QuadKey($alathash=null,$along=null,$alevel=null)\n    {\n        if ($alathash !== null) {\n            if ($along !== null) {\n                $this->setLatLng($alathash,$along,$alevel);\n            } else {\n                $this->setHash($alathash);\n            }\n        }\n    }\n\n    public function setLatLng($alat,$along,$alevel=null)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n        if ($alevel !== null) {\n            $this->level = $alevel;\n        } else {\n            $this->level = 18;\n        }\n\n        $this->hash = $this->LatLngToQuadKey($this->lat,$this->long,$this->level);\n    }\n\n    public function setHash($ahash) {\n        $this->hash = $ahash;\n        $coord = $this->QuadKeyToLatLng($ahash);\n\n        $this->lat   = $coord[0];\n        $this->long  = $coord[1];\n\n        $this->level = strlen($ahash);\n    }\n\n    public function getWhere($radius) {\n        $this->setOptimizedLevel($radius);\n        $list = $this->getNeighbors();\n\n        if ($list === 'all_globe') {\n            return 'WHERE 1 ';\n        }\n\n        //null\u3084\u91cd\u8907\u304c\u3042\u308a\u5f97\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\n        $cleaning = array();\n\n        foreach ($list as $qkey) {\n            if ($qkey !== null) $cleaning[$qkey] = 1;\n        }\n\n        $where = join(\"%' OR `quadkey` LIKE '\",array_keys($cleaning));\n        $where = \"WHERE ( `quadkey` LIKE '\" . $where .\"%' ) \";\n\n        return $where;\n    }\n\n    /**\n     * \u250c\u2500\u252c\u2500\u252c\u2500\u2510\n     * \u2502\uff10\u2502\uff11\u2502\uff12\u2502\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff13\u2502\uff14\u2502\uff15\u2502 4=mine\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff16\u2502\uff17\u2502\uff18\u2502\n     * \u2514\u2500\u2534\u2500\u2534\u2500\u2518\n     * \n     */\n    public function getNeighbors($srcHash=null) {\n        if ($srcHash === null) {\n            $srcHash = $this->hash;\n        }\n        // \u5730\u7403\u5168\u4f53\u3068\u304b\u5927\u304d\u3059\u304e\n        if ($srcHash === '' || preg_match('/^[0-3]$/',$srcHash)) return 'all_globe';\n\n        // 3x3\u306e9\u30de\u30b9\u3092\u96a3\u63a5\u3068\u3057\u3066\u8fd4\u3059\n        $matrix = array(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);\n\n        $matrix[4] = $srcHash;\n        $matrix[1] = $this->calculateAdjacent($srcHash, 'top');\n        $matrix[3] = $this->calculateAdjacent($srcHash, 'left');\n        $matrix[5] = $this->calculateAdjacent($srcHash, 'right');\n        $matrix[7] = $this->calculateAdjacent($srcHash, 'bottom');\n\n        $matrix[0] = $this->calculateAdjacent($matrix[1], 'left');\n        $matrix[6] = $this->calculateAdjacent($matrix[7], 'left');\n\n        $matrix[2] = $this->calculateAdjacent($matrix[1], 'right');\n        $matrix[8] = $this->calculateAdjacent($matrix[7], 'right');\n\n        return $matrix;\n    }\n\n    /**\n     * $dir = top / left / bottom / right\n     */\n    public function calculateAdjacent($srcHash, $dir=null) {\n        if ($srcHash === null) return null;\n\n        if ($dir === null) {\n            $dir     = $srcHash;\n            $srcHash = $this->hash;\n        }\n\n        //\u6975\u57df\u306e\u5883\u754c\u6761\u4ef6\n        if (preg_match('/^[01]+$/',$srcHash) && $dir == 'top') {\n            return null;\n        } else if (preg_match('/^[23]+$/',$srcHash) && $dir == 'bottom') {\n            return null;\n        }\n\n        $tileXY = $this->QuadKeyToTileXY($srcHash);\n        if ($dir == 'top') {\n            $tileXY[1]--;\n        } else if ($dir == 'bottom') {\n            $tileXY[1]++;\n        }\n        if ($dir == 'left') {\n            $tileXY[0]--;\n        } else if ($dir == 'right') {\n            $tileXY[0]++;\n        }\n        return $this->TileXYToQuadKey($tileXY[0],$tileXY[1],strlen($srcHash));\n    }    \n\n    /**\n    * calcurate precise of given latlng\n    */\n    public function setOptimizedLevel($radius) {\n        $this->level = $this->getOptimizedLevel($radius);\n\n        $this->hash  = substr($this->hash,0,$this->level);\n    }\n\n    /**\n    * calcurate optimized level of given radius\n    */\n    public function getOptimizedLevel($alat, $along=null, $radius=null) {\n        if ($along === null) {\n            $radius = $alat;\n            $alat   = $this->lat;\n            $along  = $this->long;\n        }\n\n        $norm_radius = $radius / cos($alat * self::DEG_TO_RAD);\n\n        for ($lv=18;$lv>0;$lv--) {\n            $lat_bit = self::M_ON_EQ / pow(2, $lv);\n\n            if ($lat_bit >= $norm_radius) {\n                return $lv;\n            }\n        }\n\n        return 0;\n    }\n\n    private function _Clip($n, $minValue, $maxValue) {\n        return min(max($n, $minValue), $maxValue);\n    }\n\n    public function MapSize($levelOfDetail) {\n        return 256 << $levelOfDetail;\n    }\n\n    public function LatLngToPixelXY($lat, $lng, $levelOfDetail) {\n        $lat = $this->_Clip($lat, self::MinLatitude, self::MaxLatitude);\n        $lng = $this->_Clip($lng, self::MinLongitude, self::MaxLongitude);\n\n        $x = ($lng + 180) / 360;\n        $sinLat = sin($lat * M_PI / 180);\n        $y = 0.5 - log((1 + $sinLat) / (1 - $sinLat)) / (4 * M_PI);\n\n        $mapSize = $this->MapSize($levelOfDetail);\n        $pixelX  = (int) $this->_Clip($x * $mapSize + 0.5, 0, $mapSize - 1);\n        $pixelY  = (int) $this->_Clip($y * $mapSize + 0.5, 0, $mapSize - 1);\n\n        return array($pixelX, $pixelY);\n    }\n\n    public function pixelXYToLatLng($pixelX, $pixelY, $levelOfDetail) {\n        $mapSize = $this->MapSize($levelOfDetail);\n        $x = ($this->_Clip($pixelX, 0, $mapSize - 1) / $mapSize) - 0.5;\n        $y = 0.5 - ($this->_Clip($pixelY, 0, $mapSize - 1) / $mapSize);\n\n        $lat = 90 - 360 * atan(exp(-$y * 2 * M_PI)) / M_PI;\n        $lng = 360 * $x;\n\n        return array($lat, $lng);\n    }\n\n    public function PixelXYToTileXY($pixelX, $pixelY) {\n        $tileX = $pixelX / 256;\n        $tileY = $pixelY / 256;\n        return array((int)$tileX, (int)$tileY);\n    }\n\n    public function TileXYToPixelXY($tileX, $tileY) {\n        $pixelX = $tileX * 256;\n        $pixelY = $tileY * 256;\n        return array($pixelX, $pixelY);\n    }\n\n    public function TileXYToQuadKey($tileX, $tileY, $levelOfDetail) {\n        $xbin = substr(decbin($tileX), -$levelOfDetail);\n        $ybin = substr(decbin($tileY), -$levelOfDetail);\n\n        $quadKey = substr('00000000000000000000' . ($xbin + $ybin * 2) , -$levelOfDetail);\n\n        return $quadKey;\n    }\n\n    public function QuadKeyToTileXY($quadKey) {\n        $xbin  = preg_replace(array('/[13]/','/[02]/'),array('1','0'),$quadKey);\n        $ybin  = preg_replace(array('/[01]/','/[23]/'),array('0','1'),$quadKey);\n\n        $tileX = bindec($xbin);\n        $tileY = bindec($ybin);\n\n        return array($tileX, $tileY);\n    }\n\n    public function LatLngToTileXY($lat, $lng, $levelOfDetail) {\n        list($px, $py) = $this->LatLngToPixelXY($lat, $lng, $levelOfDetail);\n        return $this->PixelXYToTileXY($px, $py);\n    }\n\n    public function LatLngToQuadKey($lat, $lng, $levelOfDetail) {\n        list($px, $py) = $this->LatLngToPixelXY($lat, $lng, $levelOfDetail);\n        list($x, $y) = $this->PixelXYToTileXY($px, $py);\n\n        $quadKey = $this->TileXYToQuadKey($x, $y, $levelOfDetail);\n        return $quadKey;\n    }\n\n    public function QuadKeyToLatLng($quadKey) {\n        list($x, $y) = $this->QuadKeyToTileXY($quadKey);\n        list($pixelX, $pixelY) = $this->TileXYToPixelXY($x, $y);\n        return $this->pixelXYToLatLng($pixelX, $pixelY, strlen($quadKey));\n    }\n}\n?>\n```\n\n#### GeoHash\u30af\u30e9\u30b9\n\n\u7d4c\u5ea6180\u5ea6\u3092\u307e\u305f\u3050\u5834\u5408\u3084\u3001\u5317\u6975\u5357\u6975\u4ed8\u8fd1\u3067\u7121\u9650\u30eb\u30fc\u30d7\u30a8\u30e9\u30fc\u304c\u751f\u3058\u307e\u3059\u304c\u4fee\u6b63\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```php:GeoHash\u30af\u30e9\u30b9\n<?php\n/**\n * GeoHash\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092GeoHash\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n * \n *\n * 2010/11/01 0.1      \u521d\u671f\u7248\n * 2012/10/04 1.1      \u6539\u5909\n *\n * @package \n * @access  public\n * @author  TakanoriYAMAZAKI\n * @modifier OHTSUKA Ko-hei\n * @create  2010/11/01\n * @modified 2012/10/04\n * @version 1.1\n **/\n\nclass GeoHash {\n\n    const M_PER_DEGREE  = 111319.49079327357;   //\u7def\u5ea61\u5ea6\u3042\u305f\u308a\u306ekm, \u5730\u7403\u3092\u534a\u5f84378.137km\u306e\u7403\u3068\u3057\u3066\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    private $coding                                         =\"0123456789bcdefghjkmnpqrstuvwxyz\";\n    private $codingMap=array();\n\n    private $NEIGHBORS = array( 'right'  => array( 'even' => \"bc01fg45238967deuvhjyznpkmstqrwx\"),\n                                'left'   => array( 'even' => \"238967debc01fg45kmstqrwxuvhjyznp\"),\n                                'top'    => array( 'even' => \"p0r21436x8zb9dcf5h7kjnmqesgutwvy\"),\n                                'bottom' => array( 'even' => \"14365h7k9dcfesgujnmqp0r2twvyx8zb\"));\n    private $BORDERS   = array( 'right'  => array( 'even' => \"bcfguvyz\"),\n                                'left'   => array( 'even' => \"0145hjnp\"),\n                                'top'    => array( 'even' => \"prxz\"),\n                                'bottom' => array( 'even' => \"028b\"));\n\n    public  $lat;\n    public  $long;\n    public  $hash;\n    public  $level;\n\n    public function GeoHash($alathash=null,$along=null,$alevel=null)\n    {\n        //build map from encoding char to 0 padded bitfield\n        for($i=0; $i<32; $i++)\n        {\n            $this->codingMap[substr($this->coding,$i,1)]=str_pad(decbin($i), 5, \"0\", STR_PAD_LEFT);\n        }\n\n        $this->NEIGHBORS['bottom']['odd']    = $this->NEIGHBORS['left']['even'];\n        $this->NEIGHBORS['top']['odd']        = $this->NEIGHBORS['right']['even'];\n        $this->NEIGHBORS['left']['odd']        = $this->NEIGHBORS['bottom']['even'];\n        $this->NEIGHBORS['right']['odd']    = $this->NEIGHBORS['top']['even'];\n\n        $this->BORDERS['bottom']['odd']        = $this->BORDERS['left']['even'];\n        $this->BORDERS['top']['odd']        = $this->BORDERS['right']['even'];\n        $this->BORDERS['left']['odd']        = $this->BORDERS['bottom']['even'];\n        $this->BORDERS['right']['odd']        = $this->BORDERS['top']['even'];\n\n        if ($alathash !== null) {\n            if ($along !== null) {\n                $this->setLatLng($alathash,$along,$alevel);\n            } else {\n                $this->setHash($alathash);\n            }\n        }\n    }\n\n    public function setLatLng($alat,$along,$alevel=null)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n        if ($alevel !== null) {\n            $this->level = $alevel;\n        } else {\n            $this->level = 12;\n        }\n\n        $this->hash = substr($this->encode($this->lat,$this->long),0,$this->level);\n    }\n\n    public function setHash($ahash) {\n        $this->hash = $ahash;\n        $coord = $this->decode($ahash);\n\n        $this->lat   = $coord[0];\n        $this->long  = $coord[1];\n\n        $this->level = strlen($ahash);\n    }\n\n    public function getWhere($radius) {\n        $this->setOptimizedLevel($radius);\n        $list = $this->getNeighbors();\n\n        $where = join(\"%' OR `geohash` LIKE '\",$list);\n        $where = \"WHERE ( `geohash` LIKE '\" . $where .\"%' ) \";\n\n        return $where;\n    }\n\n    /**\n     * \u250c\u2500\u252c\u2500\u252c\u2500\u2510\n     * \u2502\uff10\u2502\uff11\u2502\uff12\u2502\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff13\u2502\uff14\u2502\uff15\u2502 4=mine\n     * \u251c\u2500\u253c\u2500\u253c\u2500\u2524\n     * \u2502\uff16\u2502\uff17\u2502\uff18\u2502\n     * \u2514\u2500\u2534\u2500\u2534\u2500\u2518\n     * \n     */\n    public function getNeighbors($srcHash=null) {\n        if ($srcHash === null) {\n            $srcHash = $this->hash;\n        }\n\n        // 3x3\u306e9\u30de\u30b9\u3092\u96a3\u63a5\u3068\u3057\u3066\u8fd4\u3059\n        $matrix = array(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);\n\n        $matrix[4] = $srcHash;\n        $matrix[1] = $this->calculateAdjacent($srcHash, 'top');\n        $matrix[3] = $this->calculateAdjacent($srcHash, 'left');\n        $matrix[5] = $this->calculateAdjacent($srcHash, 'right');\n        $matrix[7] = $this->calculateAdjacent($srcHash, 'bottom');\n\n        $matrix[0] = $this->calculateAdjacent($matrix[1], 'left');\n        $matrix[6] = $this->calculateAdjacent($matrix[7], 'left');\n\n        $matrix[2] = $this->calculateAdjacent($matrix[1], 'right');\n        $matrix[8] = $this->calculateAdjacent($matrix[7], 'right');\n\n        return $matrix;\n    }\n\n    /**\n     * $dir = top / left / bottom / right\n     */\n    public function calculateAdjacent($srcHash, $dir=null) {\n        if ($dir === null) {\n            $dir     = $srcHash;\n            $srcHash = $this->hash;\n        }\n\n        $dir = strtolower($dir);\n        $srcHash = strtolower($srcHash);\n\n        $lastChr = substr($srcHash, -1);\n        $type = strlen($srcHash) % 2 ? 'odd' : 'even';\n        $base = substr($srcHash, 0, strlen($srcHash)-1);\n        if (strpos($this->BORDERS[$dir][$type], $lastChr)!==false) {\n            $base = $this->calculateAdjacent($base, $dir);\n        }\n\n        return $base . $this->coding[strpos($this->NEIGHBORS[$dir][$type], $lastChr)];\n    }\n\n    /**\n    * Decode a geohash and return an array with decimal lat,long in it\n    */\n    public function decode($hash)\n    {\n        //decode hash into binary string\n        $binary=\"\";\n        $hl=strlen($hash);\n        for($i=0; $i<$hl; $i++)\n        {\n            $binary.=$this->codingMap[substr($hash,$i,1)];\n        }\n\n        //split the binary into lat and log binary strings\n        $bl=strlen($binary);\n        $blat=\"\";\n        $blong=\"\";\n        for ($i=0; $i<$bl; $i++)\n        {\n            if ($i%2)\n                $blat=$blat.substr($binary,$i,1);\n            else\n                $blong=$blong.substr($binary,$i,1);\n\n        }\n\n        //now concert to decimal\n        $lat=$this->binDecode($blat,-90,90);\n        $long=$this->binDecode($blong,-180,180);\n\n        //figure out how precise the bit count makes this calculation\n        $latErr=$this->calcError(strlen($blat),-90,90);\n        $longErr=$this->calcError(strlen($blong),-180,180);\n\n        //how many decimal places should we use? There's a little art to\n        //this to ensure I get the same roundings as geohash.org\n        $latPlaces=max(1, -round(log10($latErr))) - 1;\n        $longPlaces=max(1, -round(log10($longErr))) - 1;\n\n        //round it\n        $lat=round($lat, $latPlaces);\n        $long=round($long, $longPlaces);\n\n        return array($lat,$long);\n    }\n\n    /**\n    * Encode a hash from given lat and long\n    */\n    public function encode($lat,$long)\n    {\n        //how many bits does latitude need?    \n        /*$plat=$this->precision($lat);\n        $latbits=1;\n        $err=45;\n        while($err>$plat)\n        {\n            $latbits++;\n            $err/=2;\n        }\n\n        //how many bits does longitude need?\n        $plong=$this->precision($long);\n        $longbits=1;\n        $err=90;\n        while($err>$plong)\n        {\n            $longbits++;\n            $err/=2;\n        }\n\n        //bit counts need to be equal\n        $bits=max($latbits,$longbits);*/\n\n        //as the hash create bits in groups of 5, lets not\n        //waste any bits - lets bulk it up to a multiple of 5\n        //and favour the longitude for any odd bits\n        $bits= 30;\n        $longbits=$bits;\n        $latbits=$bits;\n        $addlong=1;\n        while (($longbits+$latbits)%5 != 0)\n        {\n            $longbits+=$addlong;\n            $latbits+=!$addlong;\n            $addlong=!$addlong;\n        }\n\n        //encode each as binary string\n        $blat=$this->binEncode($lat,-90,90, $latbits);\n        $blong=$this->binEncode($long,-180,180,$longbits);\n\n        //merge lat and long together\n        $binary=\"\";\n        $uselong=1;\n        while (strlen($blat)+strlen($blong))\n        {\n            if ($uselong)\n            {\n                $binary=$binary.substr($blong,0,1);\n                $blong=substr($blong,1);\n            }\n            else\n            {\n                $binary=$binary.substr($blat,0,1);\n                $blat=substr($blat,1);\n            }\n            $uselong=!$uselong;\n        }\n\n        //convert binary string to hash\n        $hash=\"\";\n        for ($i=0; $i<strlen($binary); $i+=5)\n        {\n            $n=bindec(substr($binary,$i,5));\n            $hash=$hash.$this->coding[$n];\n        }\n\n        return $hash;\n    }\n\n    /**\n    * What's the maximum error for $bits bits covering a range $min to $max\n    */\n    private function calcError($bits,$min,$max)\n    {\n        $err=($max-$min)/2;\n        while ($bits--)\n            $err/=2;\n        return $err;\n    }\n\n    /*\n    * returns precision of number\n    * precision of 42 is 0.5\n    * precision of 42.4 is 0.05\n    * precision of 42.41 is 0.005 etc\n    */\n    private function precision($number)\n    {\n        $precision=0;\n        $pt=strpos($number,'.');\n        if ($pt!==false)\n        {\n            $precision=-(strlen($number)-$pt-1);\n        }\n\n        return pow(10,$precision)/2;\n    }\n\n    /**\n    * create binary encoding of number as detailed in http://en.wikipedia.org/wiki/Geohash#Example\n    * removing the tail recursion is left an exercise for the reader\n    */\n    private function binEncode($number, $min, $max, $bitcount)\n    {\n        if ($bitcount==0)\n            return \"\";\n\n        #echo \"$bitcount: $min $max<br>\";\n\n        //this is our mid point - we will produce a bit to say\n        //whether $number is above or below this mid point\n        $mid=($min+$max)/2;\n        if ($number>$mid)\n            return \"1\".$this->binEncode($number, $mid, $max,$bitcount-1);\n        else\n            return \"0\".$this->binEncode($number, $min, $mid,$bitcount-1);\n    }\n\n    /**\n    * decodes binary encoding of number as detailed in http://en.wikipedia.org/wiki/Geohash#Example\n    * removing the tail recursion is left an exercise for the reader\n    */\n    private function binDecode($binary, $min, $max)\n    {\n        $mid=($min+$max)/2;\n\n        if (strlen($binary)==0)\n            return $mid;\n\n        $bit=substr($binary,0,1);\n        $binary=substr($binary,1);\n\n        if ($bit==1)\n            return $this->binDecode($binary, $mid, $max);\n        else\n            return $this->binDecode($binary, $min, $mid);\n    }\n\n    /**\n    * calcurate precise of given latlng\n    */\n    public function setOptimizedLevel($radius) {\n        $this->level = $this->getOptimizedLevel($radius);\n\n        $this->hash  = substr($this->hash,0,$this->level);\n    }\n\n    /**\n    * calcurate optimized level of given radius\n    */\n    public function getOptimizedLevel($alat, $along=null, $radius=null) {\n        if ($along === null) {\n            $radius = $alat;\n            $alat   = $this->lat;\n            $along  = $this->long;\n        }\n\n        $lat_m_per_deg = self::M_PER_DEGREE;\n        $lng_m_per_deg = cos($alat * self::DEG_TO_RAD) * self::M_PER_DEGREE;\n\n        for ($lv=12;$lv>0;$lv--) {\n            $lng_bit = ceil(  5 * $lv / 2.0 );\n            $lat_bit = floor( 5 * $lv / 2.0 );\n            $lng_grid_size = (360.0 / pow(2, $lng_bit)) * $lng_m_per_deg;\n            $lat_grid_size = (360.0 / pow(2, $lat_bit)) * $lat_m_per_deg;\n\n            if ($lng_grid_size >= $radius && $lat_grid_size >= $radius) {\n                return $lv;\n            }\n        }\n\n        return 0;\n    }\n}\n?>\n```\n\n#### \u7a7a\u9593\u691c\u7d22\u30af\u30e9\u30b9\n\n```php:\u7a7a\u9593\u691c\u7d22\u30af\u30e9\u30b9\n<?php\n/**\n * Spatial\u30af\u30e9\u30b9\n *\n * GPS\u4e16\u754c\u5ea7\u6a19\u7cfb\u306e\u5ea7\u6a19\u3092Spatial\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u77e9\u5f62\u3092\u306f\u304d\u307e\u3059\u3002\n * \n *\n * 2012/10/04 0.1      \u521d\u671f\u7248\n *\n * @package \n * @access  public\n * @author  OHTSUKA Ko-hei\n * @create  2012/10/04\n * @version 0.1\n **/\n\nclass Spatial {\n\n    const M_PER_DEGREE  = 111319.49079327357;   //\u7def\u5ea61\u5ea6\u3042\u305f\u308a\u306ekm, \u5730\u7403\u3092\u534a\u5f84378.137km\u306e\u7403\u3068\u3057\u3066\n    const DEG_TO_RAD    = 0.017453292519943295; //\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u3059\u308b\u305f\u3081\u306e\u5b9a\u6570\n\n    public  $lat;\n    public  $long;\n\n    public function Spatial($alat,$along)\n    {\n        $this->lat   = $alat;\n        $this->long  = $along;\n    }\n\n    public function getWhere($radius) {\n        $lat_m_per_deg = self::M_PER_DEGREE;\n        $lng_m_per_deg = cos($this->lat * self::DEG_TO_RAD) * self::M_PER_DEGREE;\n\n        $d_lat = $radius / $lat_m_per_deg;\n        $d_lng = $radius / $lng_m_per_deg;\n\n        $where = \"WHERE MBRWithin(`geometry`, GeomFromText('LineString(\" . ($this->long - $d_lng ) . \" \" . ($this->lat - $d_lat ) . \", \" . ($this->long + $d_lng ) . \" \" . ($this->lat + $d_lat ) . \")', 4326)) \";\n        $where .= \"AND SQRT(POWER((X(`geometry`) - \" . $this->long . \") * \" . $lng_m_per_deg . \",2) + POWER((Y(`geometry`) - \" . $this->lat . \") * \" . $lat_m_per_deg . \",2)) < \" . $radius;\n\n        return $where;\n    }\n}\n?>\n```\n", "tags": ["GIS", "geohash", "quadkey"]}