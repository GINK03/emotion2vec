{"context": "\n\n\u306f\u3058\u3081\u306b\nChainer\u3067\u5b66\u7fd2\u3055\u305b\u305f\u30e2\u30c7\u30eb\u3092C++\u3067\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3044\u305f\u3044\u3002\u3057\u304b\u3057\u3001Chainer\u306fPython\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u305f\u3081\u3001\u306a\u3093\u3089\u304b\u306e\u30c7\u30fc\u30bf\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u666e\u901a\u306bChainer\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u6642\u306fchainer.serializers.save_npz\u3092\u4f7f\u3046\u3068\u601d\u3046\u3002\u3053\u308c\u306fnumpy\u306enpz\u5f62\u5f0f\u3067\u3001\u5b9f\u4f53\u306fZip\u30a2\u30fc\u30ab\u30a4\u30d6\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307eC++\u304b\u3089\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3068\u3001zlib\u3092\u4f7f\u3063\u3066zip\u3092\u89e3\u6790\u3057\u3066\u30fb\u30fb\u30fb\u3068\u306a\u308b\u3068\u601d\u3046\u304c\u3001\u3053\u308c\u306f\u3068\u3066\u3082\u9762\u5012\u304f\u3055\u3044\u3002Python\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092C++\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3088\u308a\u3001C++\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092Python\u5074\u304b\u3089\u66f8\u304d\u51fa\u3057\u3066\u3057\u307e\u3046\u65b9\u304c\u697d\u3060\u308d\u3046\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\n\n\u5b66\u7fd2\u3055\u305b\u305f\u30e2\u30c7\u30eb\u3092chainer.serializers.save_npz\u3067\u4fdd\u5b58\u3059\u308b\n\u4fdd\u5b58\u3057\u305f\u30c7\u30fc\u30bf\u3092Python\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3001\u751ffloat\u306e\u30d0\u30a4\u30ca\u30ea\u3067\u4fdd\u5b58\u3059\u308b\nC++\u3067\u751ffloat\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5b9f\u969b\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u3044\u304f\u3002\n\n\u5b66\u7fd2\uff0b\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n\u307e\u305a\u306f\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u3001\u8ad6\u7406\u6f14\u7b97\u3092\u5b66\u7fd2\u3055\u305b\u308b\u30022\u5165\u529b2\u51fa\u529b\u306e\u3001\u8ad6\u7406\u7a4d(AND)\u3092\u5b66\u7fd2\u3055\u305b\u3001\u305d\u308c\u3092save_npz\u3067\u3001and.model\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3002\u5f8c\u306e\u4e00\u822c\u5316\u306e\u305f\u3081\u3001\u5185\u90e8\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f3\u306b\u3057\u3066\u3042\u308b1\u3002\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\ntrain.py\nfrom __future__ import print_function\nimport numpy as np\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\n# Network definition\nclass MLP(chainer.Chain):\n    def __init__(self, n_units, n_out):\n      super(MLP, self).__init__(\n            l1 = L.Linear(None, n_units), \n            l2 = L.Linear(None, n_out)\n            )\n\n    def __call__(self, x):\n        return self.l2(F.relu(self.l1(x)))\n\n# Data Preparation\ndef make_data(N):\n    x = np.empty((N,2),dtype=np.float32)\n    y = np.empty(N,dtype=np.int32)\n    for i in range(N):\n        x1 = i%2\n        x2 = (i/2)%2\n        x[i][0] = x1\n        x[i][1] = x2\n        y[i] =x1 & x2\n    return chainer.datasets.TupleDataset(x,y)\n\ndef main():\n    epoch = 20\n    batchsize = 100\n    unit = 3\n    model = L.Classifier(MLP(unit, 2))\n    optimizer = chainer.optimizers.Adam()\n    optimizer.setup(model)\n    test = make_data(100)\n    train = make_data(10000)\n    train_iter = chainer.iterators.SerialIterator(train, batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, batchsize, repeat=False, shuffle=False)\n    updater = training.StandardUpdater(train_iter, optimizer)\n    trainer = training.Trainer(updater, (epoch, 'epoch'), out='result')\n\n    trainer.extend(extensions.Evaluator(test_iter, model))\n    trainer.extend(extensions.dump_graph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=(epoch, 'epoch'))\n    trainer.extend(extensions.LogReport())\n    trainer.extend(extensions.PrintReport(\n                ['epoch', 'main/loss', 'validation/main/loss',\n                'main/accuracy', 'validation/main/accuracy']))\n    trainer.extend(extensions.ProgressBar())\n\n    # Training\n    trainer.run()\n    chainer.serializers.save_npz('and.model',model)\n\n    # Results\n    x = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32)\n    y = model.predictor(x).data\n    for i in range(4):\n        print (x[i],np.argmax(y[i]),y[i])\n\nif __name__ == '__main__':\n    main()\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u51fa\u529b\u306b\u306a\u308a\u3001and.model\u304c\u4fdd\u5b58\u3055\u308c\u308b\u3002\u7121\u99c4\u306bepoch\u304c\u5927\u304d\u304b\u3063\u305f\u308a\u3059\u308b\u304c\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3059\u308b\u3002\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.659301    0.609888              0.6771         0.75                      \n2           0.573191    0.535238              0.9976         1                         \n3           0.495501    0.453446              1              1                         \n4           0.413051    0.372437              1              1                         \n5           0.335372    0.299022              1              1                         \n6           0.267259    0.236726              1              1                         \n7           0.210785    0.186187              1              1                         \n8           0.165747    0.146453              1              1                         \n9           0.130642    0.115821              1              1                         \n10          0.103705    0.0923906             1              1                         \n11          0.0831349   0.0744629             1              1                         \n12          0.0673614   0.0607088             1              1                         \n13          0.0551783   0.050024              1              1                         \n14          0.0456828   0.0416145             1              1                         \n15          0.0381965   0.0349596             1              1                         \n16          0.0322445   0.0296493             1              1                         \n17          0.0274508   0.0253534             1              1                         \n18          0.0235528   0.0218315             1              1                         \n19          0.020354    0.0189316             1              1                         \n20          0.0177069   0.0165223             1              1                         \n[ 0.  0.] 0 [ 4.44186878 -2.4494648 ]\n[ 0.  1.] 0 [ 3.35240507 -0.62914503]\n[ 1.  0.] 0 [ 2.42167044 -1.39461792]\n[ 1.  1.] 1 [-0.70726597  2.97649908]\n\n\u6b63\u3057\u304fAND\u304c\u5b66\u7fd2\u3055\u308c\u305f\u3002\u6700\u5f8c\u306e\u51fa\u529b\u306f\u3001\u4e00\u756a\u5de6\u304c\u5165\u529b\u3001\u6b21\u304c\u51fa\u529b\u3001\u6700\u5f8c\u304c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b\u3002\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b(\u9577\u30552\u306e\u30d9\u30af\u30c8\u30eb)\u306eargmax\u304c\u51fa\u529b\u306e\u30e9\u30d9\u30eb\u3068\u306a\u308b\u3002\n\u51fa\u529b\u3055\u308c\u305fand.model\u3092\u78ba\u8a8d\u3059\u308b\u3002\n$ zipinfo and.model\nArchive:  and.model\nZip file size: 815 bytes, number of entries: 4\n-rw-------  2.0 unx      104 b- defN 16-Oct-17 18:33 predictor/l2/W.npy\n-rw-------  2.0 unx       92 b- defN 16-Oct-17 18:33 predictor/l1/b.npy\n-rw-------  2.0 unx       88 b- defN 16-Oct-17 18:33 predictor/l2/b.npy\n-rw-------  2.0 unx      104 b- defN 16-Oct-17 18:33 predictor/l1/W.npy\n4 files, 388 bytes uncompressed, 345 bytes compressed:  11.1%\n\nmodel\u306epredicor\u306el1,l2\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001W.npy\u3068b.npy\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\nC++\u5411\u3051\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n\u51fa\u529b\u3055\u308c\u305fand.model\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u51fa\u529b\u3059\u308bpython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f2\u3002\n\u307e\u305a\u3001\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\u3053\u308c\u306f\u5148\u7a0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u540c\u69d8\u306b\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001\nunit = 3\nmodel = L.Classifier(MLP(unit, 2))\nchainer.serializers.load_npz('and.model', model)\n\n\u3068\u3059\u308c\u3070\u826f\u3044\u3002\u5404\u30c7\u30fc\u30bf\u3001\u4f8b\u3048\u3070L1\u306eW\u306b\u306fmodel.predictor.l1.W.data\u3068\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\u3053\u308c\u306f2\u00d73\u306e\u884c\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306breshape\u3057\u3066\u3001bytearray\u306bstruct.pack\u3092\u4f7f\u3063\u3066\u8db3\u3057\u3066\u3044\u304f\u3002\nd = bytearray()\nfor v in model.predictor.l1.W.data.reshape(2*unit):\n    d += struct.pack('f',v)\n\n\u3053\u308c\u3092L1.b\u3084L2.W\u306a\u3069\u306b\u3064\u3044\u3066\u7e70\u308a\u8fd4\u3057\u305f\u5f8c\u3001and.dat\u3068\u3044\u3046\u540d\u524d\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3002\nopen(\"and.dat\",'w').write(d);\n\n\u3064\u3044\u3067\u306b\u6b63\u3057\u304f\u8aad\u307f\u8fbc\u3081\u305f\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3082\u3057\u3066\u304a\u3053\u3046\u3002\u5168\u3066\u3092\u307e\u3068\u3081\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nexport.py\nfrom __future__ import print_function\nimport struct\nimport numpy as np\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\n# Network definition\nclass MLP(chainer.Chain):\n    def __init__(self, n_units, n_out):\n      super(MLP, self).__init__(\n            l1 = L.Linear(None, n_units),\n            l2 = L.Linear(None, n_out)\n            )\n\n    def __call__(self, x):\n        return self.l2(F.relu(self.l1(x)))\n\nunit = 3\nmodel = L.Classifier(MLP(unit, 2))\nchainer.serializers.load_npz('and.model', model)\n\nd = bytearray()\n\nfor v in model.predictor.l1.W.data.reshape(2*unit):\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l1.b.data:\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l2.W.data.reshape(unit*2):\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l2.b.data:\n    d += struct.pack('f',v)\n\nopen(\"and.dat\",'w').write(d);\n\n# Results\nx = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32)\ny = model.predictor(x).data\nfor i in range(4):\n    print (x[i],np.argmax(y[i]),y[i])\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3084unit\u306a\u3069\u306e\u5b9a\u6570\u304c\u5197\u9577\u306a\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306fmodule\u5316\u3057\u305f\u308a\u3057\u3066\u5171\u901a\u5316\u3059\u308c\u3070\u3044\u3044\u3068\u601d\u3046\u3002\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n$ python export.py \n[ 0.  0.] 0 [ 4.44186878 -2.4494648 ]\n[ 0.  1.] 0 [ 3.35240507 -0.62914503]\n[ 1.  0.] 0 [ 2.42167044 -1.39461792]\n[ 1.  1.] 1 [-0.70726597  2.97649908]\n\n\u5b66\u7fd2\u76f4\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nC++\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\n\u751f\u30d0\u30a4\u30ca\u30ea\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u3070\u826f\u3044\u3002\u4f55\u4f7f\u3063\u3066\u3082\u826f\u3044\u304c\u3001std::ifstream\u306eread\u4f7f\u3046\u306e\u304c\u7d20\u76f4\u304b\u306a\u3002W\u304c\u884c\u5217\u3001b\u304c\u30d9\u30af\u30c8\u30eb\u3060\u304c\u3001\u3069\u3061\u3089\u3082\u4e00\u6b21\u5143\u306efloat\u306estd::vector\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3057\u307e\u304a\u3046\u3002\n\u5404\u5c64\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u306b\u884c\u5217\u306e\u639b\u3051\u7b97\u3067\u3001\u5165\u529b\u3092x\u3001\u5185\u90e8\u884c\u5217\u3092W\u3001\u51fa\u529b\u3092y\u3068\u3059\u308b\u3068\u3001\u5358\u7d14\u306b\ny = W x + b\ny=Wx+by=Wx+b{y = W x + b\n}\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3002\u305f\u3060\u3057\u3001L1\u3067\u306f\u6700\u5f8c\u306bReLU\u3092\u304b\u3051\u3066\u3044\u308b\u3002ReLU\u3068\u3044\u3046\u306e\u306f\u3001\u8981\u3059\u308b\u306b\u5165\u529b\u304c\u8ca0\u306a\u30890\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u3082\u306e\u3067\u3001\u6570\u5f0f\u3067\u66f8\u3051\u3070\nf(x) := \\max(x,0)\nf(x):=max(x,0)f(x):=max(x,0){f(x) := \\max(x,0)\n}\n\u3068\u306a\u308b\u3057\u3001C++\u306a\u3089\u4e09\u9805\u6f14\u7b97\u5b50\u3067\u3001\n  float relu(float x) {\n    return (x > 0) ? x : 0;\n  }\n\n\u3068\u304b\u66f8\u3051\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002max\u4f7f\u3063\u3066\u3082\u3044\u3044\u3051\u3069\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Link\u30af\u30e9\u30b93\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\u30af\u30e9\u30b9\u3068\u3057\u3066\u306f\n\n\u5165\u529b\u306e\u6b21\u5143\u3001\u51fa\u529b\u306e\u6b21\u5143\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u53d7\u3051\u53d6\u308a\u3001W\u3068b\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u5b9a\u3059\u308b\u3002\nread\u3067\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\nget\u304c\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u51fa\u529b\u3092\u8fd4\u3059\nget_relu\u306f\u51fa\u529b\u3092ReLU\u3067\u4fee\u6b63\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n\n\u3068\u3044\u3063\u305f\u4ed5\u69d8\u306b\u3059\u308b\u3002\n\u9577\u3044\u304c\u30bd\u30fc\u30b9\u3092\u305d\u306e\u307e\u307e\u63b2\u8f09\u3059\u308b\u3002\n\nimport.cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n\ntypedef std::vector<float> vf;\n\nclass Link {\nprivate:\n  vf W;\n  vf b;\n  float relu(float x) {\n    return (x > 0) ? x : 0;\n  }\n  const int n_in, n_out;\npublic:\n  Link(int in, int out) : n_in(in), n_out(out) {\n    W.resize(n_in * n_out);\n    b.resize(n_out);\n  }\n  void read(std::ifstream &ifs) {\n    ifs.read((char*)W.data(), sizeof(float)*n_in * n_out);\n    ifs.read((char*)b.data(), sizeof(float)*n_out);\n  }\n\n  vf get(vf x) {\n    vf y(n_out);\n    for (int i = 0; i < n_out; i++) {\n      y[i] = 0.0;\n      for (int j = 0; j < n_in; j++) {\n        y[i] += W[i * n_in + j] * x[j];\n      }\n      y[i] += b[i];\n    }\n    return y;\n  }\n\n  vf get_relu(vf x) {\n    vf y = get(x);\n    for (int i = 0; i < n_out; i++) {\n      y[i] = relu(y[i]);\n    }\n    return y;\n  }\n};\n\nint\nargmax(vf &v) {\n  float max = v[0];\n  int max_i = 0;\n  for (int i = 1; i < v.size(); i++) {\n    if (max < v[i]) {\n      max_i = i;\n      max = v[i];\n    }\n  }\n  return max_i;\n}\n\nint\nmain(void) {\n  const int n_in = 2;\n  const int n_units = 3;\n  const int n_out = 2;\n  std::ifstream ifs(\"and.dat\");\n  Link l1(n_in, n_units), l2(n_units, n_out);\n  l1.read(ifs);\n  l2.read(ifs);\n  float x[4][2] = {{0, 0}, {0, 1}, {1, 0}, {1, 1}};\n  for (int i = 0; i < 4; i++) {\n    vf x2;\n    x2.push_back(x[i][0]);\n    x2.push_back(x[i][1]);\n    vf y = l2.get(l1.get_relu(x2));\n    printf(\"[%f %f] %d: [%f %f]\\n\", x2[0], x2[1], argmax(y), y[0], y[1]);\n  }\n}\n\n\n\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002and.dat\u304c\u5b58\u5728\u3059\u308b\u72b6\u6cc1\u3067\u4ee5\u4e0b\u3092\u5b9f\u884c\u3059\u308b\u3002\n$ g++ import.cpp\n$ ./a.out\n[0.000000 0.000000] 0: [4.441869 -2.449465]\n[0.000000 1.000000] 0: [3.352405 -0.629145]\n[1.000000 0.000000] 0: [2.421670 -1.394618]\n[1.000000 1.000000] 1: [-0.707266 2.976499]\n\n\u5165\u529b\u306b\u5bfe\u3057\u3066\u3061\u3083\u3093\u3068\u8ad6\u7406\u7a4d\u3092\u8fd4\u3057\u3066\u304a\u308a\u3001\u304b\u3064\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b(\u4f8b\u3048\u3070[0 0]\u306e\u5165\u529b\u306b\u5bfe\u3059\u308b\u91cd\u307f[4.441869 -2.449465])\u3082\u6b63\u3057\u3044\u3053\u3068\u304b\u3089\u3001\u8ad6\u7406\u7a4d\u3092\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u6b63\u3057\u304f\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\u307e\u3068\u3081\nChainer\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u3001Python\u3067\u751f\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3001C++\u3067\u8aad\u307f\u8fbc\u307f\u3001\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u305f\u3002\u672c\u5f53\u306fhdf5\u3068\u304bnpz\u3068\u304b\u3092\u3061\u3083\u3093\u3068\u89e3\u6790\u3057\u3066\u8aad\u307f\u8fbc\u3080\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3060\u307b\u3046\u304c\u4e00\u822c\u7684\u306a\u306e\u3060\u308d\u3046\u304c\u3001zlib\u3092\u3061\u3083\u3093\u3068\u89e3\u6790\u3059\u308b\u3068\u304b\u9762\u5012\u3060\u3057\u3001\u591a\u5206Python\u5074\u3067\u751f\u30c7\u30fc\u30bf\u5410\u304f\u30b3\u30fc\u30c9\u306e\u65b9\u304cZip\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u5bfe\u5fdc\u3057\u305fC++\u30b3\u30fc\u30c9\u66f8\u304f\u3088\u308a\u7c21\u5358\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u826f\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n\n\n\n\n\u5358\u306bAND\u3092\u5b66\u7fd2\u3055\u305b\u308b\u3060\u3051\u306a\u30892\u5165\u529b\u3001\u5185\u90e8\u30e6\u30cb\u30c3\u30c8\u65702\u30012\u51fa\u529b\u3067\u826f\u3044\u306e\u3060\u304c\u3001\u3053\u308c\u3060\u3068\u884c\u5217\u306e\u639b\u3051\u7b97\u3067\u884c\u3068\u5217\u3092\u9593\u9055\u3048\u3066\u3044\u3066\u3082\u6c17\u304c\u4ed8\u304b\u306a\u3044\u306e\u3067\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u30923\u306b\u3057\u3066\u307f\u305f\u3002\u3053\u3046\u3059\u308b\u3068\u3001L1\u306eW\u306f3\u884c2\u5217\u3001L2\u306eW\u306f2\u884c3\u5217\u306b\u306a\u308b\u3002\u00a0\u21a9\n\n\n\u5b66\u7fd2\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u305d\u306e\u307e\u307e\u7d44\u307f\u8fbc\u307e\u306a\u304b\u3063\u305f\u306e\u306f\u3001\u30c6\u30b9\u30c8\u306e\u305f\u3073\u306b\u5b66\u7fd2\u3055\u305b\u306a\u304a\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3067\u4fdd\u5b58\u3057\u305f\u30e2\u30c7\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u30c6\u30b9\u30c8\u3092\u517c\u306d\u3066\u308b\u305f\u3081\u3067\u3042\u308b\u3002\u00a0\u21a9\n\n\n\u3053\u306e\u540d\u524d\u304c\u9069\u5207\u304b\u3042\u3093\u307e\u308a\u81ea\u4fe1\u304c\u7121\u3044\u3002\u00a0\u21a9\n\n\n\n# \u306f\u3058\u3081\u306b\n\nChainer\u3067\u5b66\u7fd2\u3055\u305b\u305f\u30e2\u30c7\u30eb\u3092C++\u3067\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u3044\u305f\u3044\u3002\u3057\u304b\u3057\u3001Chainer\u306fPython\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u305f\u3081\u3001\u306a\u3093\u3089\u304b\u306e\u30c7\u30fc\u30bf\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u666e\u901a\u306bChainer\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u6642\u306f`chainer.serializers.save_npz`\u3092\u4f7f\u3046\u3068\u601d\u3046\u3002\u3053\u308c\u306fnumpy\u306enpz\u5f62\u5f0f\u3067\u3001\u5b9f\u4f53\u306fZip\u30a2\u30fc\u30ab\u30a4\u30d6\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307eC++\u304b\u3089\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3059\u308b\u3068\u3001zlib\u3092\u4f7f\u3063\u3066zip\u3092\u89e3\u6790\u3057\u3066\u30fb\u30fb\u30fb\u3068\u306a\u308b\u3068\u601d\u3046\u304c\u3001\u3053\u308c\u306f\u3068\u3066\u3082\u9762\u5012\u304f\u3055\u3044\u3002Python\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092C++\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3088\u308a\u3001C++\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092Python\u5074\u304b\u3089\u66f8\u304d\u51fa\u3057\u3066\u3057\u307e\u3046\u65b9\u304c\u697d\u3060\u308d\u3046\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\n\n1. \u5b66\u7fd2\u3055\u305b\u305f\u30e2\u30c7\u30eb\u3092`chainer.serializers.save_npz`\u3067\u4fdd\u5b58\u3059\u308b\n2. \u4fdd\u5b58\u3057\u305f\u30c7\u30fc\u30bf\u3092Python\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3001\u751ffloat\u306e\u30d0\u30a4\u30ca\u30ea\u3067\u4fdd\u5b58\u3059\u308b\n3. C++\u3067\u751ffloat\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5b9f\u969b\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u3044\u304f\u3002\n\n# \u5b66\u7fd2\uff0b\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n\n\u307e\u305a\u306f\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u3001\u8ad6\u7406\u6f14\u7b97\u3092\u5b66\u7fd2\u3055\u305b\u308b\u30022\u5165\u529b2\u51fa\u529b\u306e\u3001\u8ad6\u7406\u7a4d(AND)\u3092\u5b66\u7fd2\u3055\u305b\u3001\u305d\u308c\u3092save_npz\u3067\u3001`and.model`\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3002\u5f8c\u306e\u4e00\u822c\u5316\u306e\u305f\u3081\u3001\u5185\u90e8\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f3\u306b\u3057\u3066\u3042\u308b[^3]\u3002\u30bd\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```py:train.py\nfrom __future__ import print_function\nimport numpy as np\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\n# Network definition\nclass MLP(chainer.Chain):\n    def __init__(self, n_units, n_out):\n      super(MLP, self).__init__(\n            l1 = L.Linear(None, n_units), \n            l2 = L.Linear(None, n_out)\n            )\n\n    def __call__(self, x):\n        return self.l2(F.relu(self.l1(x)))\n\n# Data Preparation\ndef make_data(N):\n    x = np.empty((N,2),dtype=np.float32)\n    y = np.empty(N,dtype=np.int32)\n    for i in range(N):\n        x1 = i%2\n        x2 = (i/2)%2\n        x[i][0] = x1\n        x[i][1] = x2\n        y[i] =x1 & x2\n    return chainer.datasets.TupleDataset(x,y)\n\ndef main():\n    epoch = 20\n    batchsize = 100\n    unit = 3\n    model = L.Classifier(MLP(unit, 2))\n    optimizer = chainer.optimizers.Adam()\n    optimizer.setup(model)\n    test = make_data(100)\n    train = make_data(10000)\n    train_iter = chainer.iterators.SerialIterator(train, batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, batchsize, repeat=False, shuffle=False)\n    updater = training.StandardUpdater(train_iter, optimizer)\n    trainer = training.Trainer(updater, (epoch, 'epoch'), out='result')\n\n    trainer.extend(extensions.Evaluator(test_iter, model))\n    trainer.extend(extensions.dump_graph('main/loss'))\n    trainer.extend(extensions.snapshot(), trigger=(epoch, 'epoch'))\n    trainer.extend(extensions.LogReport())\n    trainer.extend(extensions.PrintReport(\n                ['epoch', 'main/loss', 'validation/main/loss',\n                'main/accuracy', 'validation/main/accuracy']))\n    trainer.extend(extensions.ProgressBar())\n\n    # Training\n    trainer.run()\n    chainer.serializers.save_npz('and.model',model)\n\n    # Results\n    x = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32)\n    y = model.predictor(x).data\n    for i in range(4):\n        print (x[i],np.argmax(y[i]),y[i])\n\nif __name__ == '__main__':\n    main()\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u51fa\u529b\u306b\u306a\u308a\u3001and.model\u304c\u4fdd\u5b58\u3055\u308c\u308b\u3002\u7121\u99c4\u306bepoch\u304c\u5927\u304d\u304b\u3063\u305f\u308a\u3059\u308b\u304c\u6c17\u306b\u3057\u306a\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n\n```shell-session\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.659301    0.609888              0.6771         0.75                      \n2           0.573191    0.535238              0.9976         1                         \n3           0.495501    0.453446              1              1                         \n4           0.413051    0.372437              1              1                         \n5           0.335372    0.299022              1              1                         \n6           0.267259    0.236726              1              1                         \n7           0.210785    0.186187              1              1                         \n8           0.165747    0.146453              1              1                         \n9           0.130642    0.115821              1              1                         \n10          0.103705    0.0923906             1              1                         \n11          0.0831349   0.0744629             1              1                         \n12          0.0673614   0.0607088             1              1                         \n13          0.0551783   0.050024              1              1                         \n14          0.0456828   0.0416145             1              1                         \n15          0.0381965   0.0349596             1              1                         \n16          0.0322445   0.0296493             1              1                         \n17          0.0274508   0.0253534             1              1                         \n18          0.0235528   0.0218315             1              1                         \n19          0.020354    0.0189316             1              1                         \n20          0.0177069   0.0165223             1              1                         \n[ 0.  0.] 0 [ 4.44186878 -2.4494648 ]\n[ 0.  1.] 0 [ 3.35240507 -0.62914503]\n[ 1.  0.] 0 [ 2.42167044 -1.39461792]\n[ 1.  1.] 1 [-0.70726597  2.97649908]\n```\n\n\u6b63\u3057\u304fAND\u304c\u5b66\u7fd2\u3055\u308c\u305f\u3002\u6700\u5f8c\u306e\u51fa\u529b\u306f\u3001\u4e00\u756a\u5de6\u304c\u5165\u529b\u3001\u6b21\u304c\u51fa\u529b\u3001\u6700\u5f8c\u304c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b\u3002\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b(\u9577\u30552\u306e\u30d9\u30af\u30c8\u30eb)\u306eargmax\u304c\u51fa\u529b\u306e\u30e9\u30d9\u30eb\u3068\u306a\u308b\u3002\n\n\u51fa\u529b\u3055\u308c\u305fand.model\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n```shell-session\n$ zipinfo and.model\nArchive:  and.model\nZip file size: 815 bytes, number of entries: 4\n-rw-------  2.0 unx      104 b- defN 16-Oct-17 18:33 predictor/l2/W.npy\n-rw-------  2.0 unx       92 b- defN 16-Oct-17 18:33 predictor/l1/b.npy\n-rw-------  2.0 unx       88 b- defN 16-Oct-17 18:33 predictor/l2/b.npy\n-rw-------  2.0 unx      104 b- defN 16-Oct-17 18:33 predictor/l1/W.npy\n4 files, 388 bytes uncompressed, 345 bytes compressed:  11.1%\n```\n\nmodel\u306epredicor\u306el1,l2\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001W.npy\u3068b.npy\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n# C++\u5411\u3051\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n\n\u51fa\u529b\u3055\u308c\u305fand.model\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u51fa\u529b\u3059\u308bpython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f[^1]\u3002\n\n\u307e\u305a\u3001\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002\u3053\u308c\u306f\u5148\u7a0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u540c\u69d8\u306b\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001\n\n```py\nunit = 3\nmodel = L.Classifier(MLP(unit, 2))\nchainer.serializers.load_npz('and.model', model)\n```\n\n\u3068\u3059\u308c\u3070\u826f\u3044\u3002\u5404\u30c7\u30fc\u30bf\u3001\u4f8b\u3048\u3070L1\u306eW\u306b\u306f`model.predictor.l1.W.data`\u3068\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002\u3053\u308c\u306f2\u00d73\u306e\u884c\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306breshape\u3057\u3066\u3001bytearray\u306bstruct.pack\u3092\u4f7f\u3063\u3066\u8db3\u3057\u3066\u3044\u304f\u3002\n\n```py\nd = bytearray()\nfor v in model.predictor.l1.W.data.reshape(2*unit):\n    d += struct.pack('f',v)\n```\n\n\u3053\u308c\u3092`L1.b`\u3084`L2.W`\u306a\u3069\u306b\u3064\u3044\u3066\u7e70\u308a\u8fd4\u3057\u305f\u5f8c\u3001`and.dat`\u3068\u3044\u3046\u540d\u524d\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n```py\nopen(\"and.dat\",'w').write(d);\n```\n\n\u3064\u3044\u3067\u306b\u6b63\u3057\u304f\u8aad\u307f\u8fbc\u3081\u305f\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3082\u3057\u3066\u304a\u3053\u3046\u3002\u5168\u3066\u3092\u307e\u3068\u3081\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```py:export.py\nfrom __future__ import print_function\nimport struct\nimport numpy as np\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import training\nfrom chainer.training import extensions\n\n# Network definition\nclass MLP(chainer.Chain):\n    def __init__(self, n_units, n_out):\n      super(MLP, self).__init__(\n            l1 = L.Linear(None, n_units),\n            l2 = L.Linear(None, n_out)\n            )\n\n    def __call__(self, x):\n        return self.l2(F.relu(self.l1(x)))\n\nunit = 3\nmodel = L.Classifier(MLP(unit, 2))\nchainer.serializers.load_npz('and.model', model)\n\nd = bytearray()\n\nfor v in model.predictor.l1.W.data.reshape(2*unit):\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l1.b.data:\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l2.W.data.reshape(unit*2):\n    d += struct.pack('f',v)\n\nfor v in model.predictor.l2.b.data:\n    d += struct.pack('f',v)\n\nopen(\"and.dat\",'w').write(d);\n\n# Results\nx = np.array([[0,0],[0,1],[1,0],[1,1]],dtype=np.float32)\ny = model.predictor(x).data\nfor i in range(4):\n    print (x[i],np.argmax(y[i]),y[i])\n```\n\n\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3084unit\u306a\u3069\u306e\u5b9a\u6570\u304c\u5197\u9577\u306a\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306fmodule\u5316\u3057\u305f\u308a\u3057\u3066\u5171\u901a\u5316\u3059\u308c\u3070\u3044\u3044\u3068\u601d\u3046\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```shell-session\n$ python export.py \n[ 0.  0.] 0 [ 4.44186878 -2.4494648 ]\n[ 0.  1.] 0 [ 3.35240507 -0.62914503]\n[ 1.  0.] 0 [ 2.42167044 -1.39461792]\n[ 1.  1.] 1 [-0.70726597  2.97649908]\n```\n\n\u5b66\u7fd2\u76f4\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n# C++\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\n\n\u751f\u30d0\u30a4\u30ca\u30ea\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u8aad\u307f\u8fbc\u3081\u3070\u826f\u3044\u3002\u4f55\u4f7f\u3063\u3066\u3082\u826f\u3044\u304c\u3001`std::ifstream`\u306e`read`\u4f7f\u3046\u306e\u304c\u7d20\u76f4\u304b\u306a\u3002W\u304c\u884c\u5217\u3001b\u304c\u30d9\u30af\u30c8\u30eb\u3060\u304c\u3001\u3069\u3061\u3089\u3082\u4e00\u6b21\u5143\u306e`float`\u306e`std::vector`\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3057\u307e\u304a\u3046\u3002\n\n\u5404\u5c64\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u306b\u884c\u5217\u306e\u639b\u3051\u7b97\u3067\u3001\u5165\u529b\u3092x\u3001\u5185\u90e8\u884c\u5217\u3092W\u3001\u51fa\u529b\u3092y\u3068\u3059\u308b\u3068\u3001\u5358\u7d14\u306b\n\n```math\ny = W x + b\n```\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3002\u305f\u3060\u3057\u3001L1\u3067\u306f\u6700\u5f8c\u306bReLU\u3092\u304b\u3051\u3066\u3044\u308b\u3002ReLU\u3068\u3044\u3046\u306e\u306f\u3001\u8981\u3059\u308b\u306b\u5165\u529b\u304c\u8ca0\u306a\u30890\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u3082\u306e\u3067\u3001\u6570\u5f0f\u3067\u66f8\u3051\u3070\n\n```math\nf(x) := \\max(x,0)\n```\n\n\u3068\u306a\u308b\u3057\u3001C++\u306a\u3089\u4e09\u9805\u6f14\u7b97\u5b50\u3067\u3001\n\n```cpp\n  float relu(float x) {\n    return (x > 0) ? x : 0;\n  }\n```\n\u3068\u304b\u66f8\u3051\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002max\u4f7f\u3063\u3066\u3082\u3044\u3044\u3051\u3069\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Link\u30af\u30e9\u30b9[^2]\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\u30af\u30e9\u30b9\u3068\u3057\u3066\u306f\n\n* \u5165\u529b\u306e\u6b21\u5143\u3001\u51fa\u529b\u306e\u6b21\u5143\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u53d7\u3051\u53d6\u308a\u3001W\u3068b\u306e\u30b5\u30a4\u30ba\u3092\u6c7a\u5b9a\u3059\u308b\u3002\n* read\u3067\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\n* get\u304c\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u51fa\u529b\u3092\u8fd4\u3059\n* get_relu\u306f\u51fa\u529b\u3092ReLU\u3067\u4fee\u6b63\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n\n\u3068\u3044\u3063\u305f\u4ed5\u69d8\u306b\u3059\u308b\u3002\n\n\u9577\u3044\u304c\u30bd\u30fc\u30b9\u3092\u305d\u306e\u307e\u307e\u63b2\u8f09\u3059\u308b\u3002\n\n```cpp:import.cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n\ntypedef std::vector<float> vf;\n\nclass Link {\nprivate:\n  vf W;\n  vf b;\n  float relu(float x) {\n    return (x > 0) ? x : 0;\n  }\n  const int n_in, n_out;\npublic:\n  Link(int in, int out) : n_in(in), n_out(out) {\n    W.resize(n_in * n_out);\n    b.resize(n_out);\n  }\n  void read(std::ifstream &ifs) {\n    ifs.read((char*)W.data(), sizeof(float)*n_in * n_out);\n    ifs.read((char*)b.data(), sizeof(float)*n_out);\n  }\n\n  vf get(vf x) {\n    vf y(n_out);\n    for (int i = 0; i < n_out; i++) {\n      y[i] = 0.0;\n      for (int j = 0; j < n_in; j++) {\n        y[i] += W[i * n_in + j] * x[j];\n      }\n      y[i] += b[i];\n    }\n    return y;\n  }\n\n  vf get_relu(vf x) {\n    vf y = get(x);\n    for (int i = 0; i < n_out; i++) {\n      y[i] = relu(y[i]);\n    }\n    return y;\n  }\n};\n\nint\nargmax(vf &v) {\n  float max = v[0];\n  int max_i = 0;\n  for (int i = 1; i < v.size(); i++) {\n    if (max < v[i]) {\n      max_i = i;\n      max = v[i];\n    }\n  }\n  return max_i;\n}\n\nint\nmain(void) {\n  const int n_in = 2;\n  const int n_units = 3;\n  const int n_out = 2;\n  std::ifstream ifs(\"and.dat\");\n  Link l1(n_in, n_units), l2(n_units, n_out);\n  l1.read(ifs);\n  l2.read(ifs);\n  float x[4][2] = {{0, 0}, {0, 1}, {1, 0}, {1, 1}};\n  for (int i = 0; i < 4; i++) {\n    vf x2;\n    x2.push_back(x[i][0]);\n    x2.push_back(x[i][1]);\n    vf y = l2.get(l1.get_relu(x2));\n    printf(\"[%f %f] %d: [%f %f]\\n\", x2[0], x2[1], argmax(y), y[0], y[1]);\n  }\n}\n```\n\n\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002`and.dat`\u304c\u5b58\u5728\u3059\u308b\u72b6\u6cc1\u3067\u4ee5\u4e0b\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```shell-session\n$ g++ import.cpp\n$ ./a.out\n[0.000000 0.000000] 0: [4.441869 -2.449465]\n[0.000000 1.000000] 0: [3.352405 -0.629145]\n[1.000000 0.000000] 0: [2.421670 -1.394618]\n[1.000000 1.000000] 1: [-0.707266 2.976499]\n```\n\n\u5165\u529b\u306b\u5bfe\u3057\u3066\u3061\u3083\u3093\u3068\u8ad6\u7406\u7a4d\u3092\u8fd4\u3057\u3066\u304a\u308a\u3001\u304b\u3064\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306e\u751f\u306e\u51fa\u529b(\u4f8b\u3048\u3070[0 0]\u306e\u5165\u529b\u306b\u5bfe\u3059\u308b\u91cd\u307f[4.441869 -2.449465])\u3082\u6b63\u3057\u3044\u3053\u3068\u304b\u3089\u3001\u8ad6\u7406\u7a4d\u3092\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u6b63\u3057\u304f\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n# \u307e\u3068\u3081\n\nChainer\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u3001Python\u3067\u751f\u30d0\u30a4\u30ca\u30ea\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3001C++\u3067\u8aad\u307f\u8fbc\u307f\u3001\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u305f\u3002\u672c\u5f53\u306fhdf5\u3068\u304bnpz\u3068\u304b\u3092\u3061\u3083\u3093\u3068\u89e3\u6790\u3057\u3066\u8aad\u307f\u8fbc\u3080\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3060\u307b\u3046\u304c\u4e00\u822c\u7684\u306a\u306e\u3060\u308d\u3046\u304c\u3001zlib\u3092\u3061\u3083\u3093\u3068\u89e3\u6790\u3059\u308b\u3068\u304b\u9762\u5012\u3060\u3057\u3001\u591a\u5206Python\u5074\u3067\u751f\u30c7\u30fc\u30bf\u5410\u304f\u30b3\u30fc\u30c9\u306e\u65b9\u304cZip\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u5bfe\u5fdc\u3057\u305fC++\u30b3\u30fc\u30c9\u66f8\u304f\u3088\u308a\u7c21\u5358\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u826f\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n\n[^3]: \u5358\u306bAND\u3092\u5b66\u7fd2\u3055\u305b\u308b\u3060\u3051\u306a\u30892\u5165\u529b\u3001\u5185\u90e8\u30e6\u30cb\u30c3\u30c8\u65702\u30012\u51fa\u529b\u3067\u826f\u3044\u306e\u3060\u304c\u3001\u3053\u308c\u3060\u3068\u884c\u5217\u306e\u639b\u3051\u7b97\u3067\u884c\u3068\u5217\u3092\u9593\u9055\u3048\u3066\u3044\u3066\u3082\u6c17\u304c\u4ed8\u304b\u306a\u3044\u306e\u3067\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u30923\u306b\u3057\u3066\u307f\u305f\u3002\u3053\u3046\u3059\u308b\u3068\u3001L1\u306eW\u306f3\u884c2\u5217\u3001L2\u306eW\u306f2\u884c3\u5217\u306b\u306a\u308b\u3002\n[^1]: \u5b66\u7fd2\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u305d\u306e\u307e\u307e\u7d44\u307f\u8fbc\u307e\u306a\u304b\u3063\u305f\u306e\u306f\u3001\u30c6\u30b9\u30c8\u306e\u305f\u3073\u306b\u5b66\u7fd2\u3055\u305b\u306a\u304a\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3068\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3067\u4fdd\u5b58\u3057\u305f\u30e2\u30c7\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u30c6\u30b9\u30c8\u3092\u517c\u306d\u3066\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n[^2]: \u3053\u306e\u540d\u524d\u304c\u9069\u5207\u304b\u3042\u3093\u307e\u308a\u81ea\u4fe1\u304c\u7121\u3044\u3002\n", "tags": ["Chainer", "C++"]}