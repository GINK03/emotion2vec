{"context": "\n\n\u524d\u7f6e\u304d\n\u884c\u5217\u3082\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u6e80\u305f\u3059\u306e\u3067\u3001\u30d9\u30af\u30c8\u30eb\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002Fortran\u306b\u6163\u308c\u3066\u3044\u308c\u3070\u3001\u591a\u6b21\u5143\u914d\u5217\u306f\u30e1\u30e2\u30ea\u30fc\u306b\uff11\u6b21\u5143\u306b\u4e26\u3093\u3067\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u884c\u5217\u3092\u4e00\u672c\u306e\u30d9\u30af\u30c8\u30eb\u3068\u898b\u306a\u3059\u3053\u3068\u6709\u308a\u304b\u306a\u3068\u7d0d\u5f97\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3046\u306a\u308b\u3068\u3001\u884c\u5217\u306b\u5185\u7a4d\u3092\u8003\u3048\u3066\u3001\u305f\u3060\u306e\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u304b\u3089\u8a08\u91cf\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u306b\u9032\u307f\u305f\u3044\u6c17\u6301\u3061\u3082\u6e67\u3044\u3066\u304f\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u30d2\u30eb\u30d9\u30eb\u30c8\uff1d\u30b7\u30e5\u30df\u30c3\u30c8\u578b\u306e\u5185\u7a4d\u306f\u3001\u305d\u3046\u3044\u3046\u4e8c\u3064\u306e\u884c\u5217\u306e\u9593\u306e\u5185\u7a4d\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u3001\n<A|B>={\\rm Tr}(A^*B)\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067$A^*$\u306f\u884c\u5217$A$\u306e\u30a8\u30eb\u30df\u30fc\u30c8\u5171\u5f79\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u898b\u304b\u3051\u306f\u9762\u5012\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u884c\u5217$A$\u306e\u8907\u7d20\u5171\u5f79\u3068\u884c\u5217$B$\u306e\u5bfe\u5fdc\u3059\u308b\u5404\u6210\u5206\u306e\u7a4d\u306e\u548c\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u884c\u5217\u3092\u4e00\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u3057\u305f\u3068\u304d\u3001\u666e\u901a\u306e\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n{\\rm Tr}(A^*B)=\\sum_{i, j}(\\bar{A}_{i,j})({B}_{i,j})\n\n\u6210\u5206\u3067\u66f8\u3044\u3066\u3042\u308b\u65b9\u304c\u5358\u7d14\u3067\u3059\u304c\u3001Trace \u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3042\u308b\u3068\u7d50\u679c\u304c\u57fa\u5e95\u306b\u4f9d\u3089\u306a\u3044\u3053\u3068\u304c\u660e\u767d\u306b\u306a\u3063\u3066\u3001\u597d\u307e\u3057\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n\u8a08\u7b97\u3067\u306e\u78ba\u8a8d\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n    module m_subs\n      implicit none\n    contains \n      complex function Hilbert_Schmidt(c, d) \n        complex, intent(in) :: c(:, :), d(:, :)\n        Hilbert_Schmidt = trace(matmul(Hermitian_Conjugate(c), d))\n      end function Hilbert_Schmidt\n\n      function Hermitian_Conjugate(c)\n        complex, intent(in) :: c(:, :)\n        complex, allocatable :: Hermitian_Conjugate(:, :)\n        Hermitian_Conjugate = transpose(conjg(c))\n      end function Hermitian_Conjugate  \n\n      complex function trace(c)\n        complex, intent(in) :: c(:, :)\n        integer :: i\n        trace = sum( [(c(i, i), i = 1, size(c, 1))] )\n      end function trace\n    end module m_subs\n\n    program HS\n      use m_subs\n      implicit none\n      integer, parameter :: n = 10\n      complex :: a(n, n), b(n, n), c, d, e\n      complex, allocatable :: s(:), t(:)\n      real :: x(n, n), y(n, n)\n      call random_seed()\n      call random_number(x)\n      call random_number(y)\n      a = cmplx(x, y)\n      call random_number(x)\n      call random_number(y)\n      b = cmplx(x, y)\n      s = reshape(a, [size(a)]) ! 1-dimensional array of size n^2\n      t = reshape(b, [size(b)]) ! 1-dimensional array of size n^2\n\n      c = Hilbert_Schmidt(a, b) ! Trace(A* B)\n      d = sum(conjg(a) * b)     ! sum (A_ij)* (B_ij)\n      e = dot_product(s, t)     ! inner-product(A, B) \n      print *, c, d, abs(c - d) / abs(c)\n      print *, d, e, abs(d - e) / abs(d)\n    end program HS\n\n\n\u5b9f\u884c\u7d50\u679c\n\u4e71\u6570\u3067\u884c\u5217\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u306e\u3067\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u5358\u7cbe\u5ea6\u306e\u7bc4\u56f2\u3067\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n (51.86407,-2.380983) (51.86405,-2.380983) 2.9404126E-07\n (51.86405,-2.380983) (51.86405,-2.380983) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n (54.13935,4.021431) (54.13936,4.021432) 2.8161699E-07\n (54.13936,4.021432) (54.13936,4.021432) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n (48.62010,5.180973) (48.62009,5.180972) 7.8624716E-08\n (48.62009,5.180972) (48.62009,5.180972) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n#\u524d\u7f6e\u304d\n\u884c\u5217\u3082\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u6e80\u305f\u3059\u306e\u3067\u3001\u30d9\u30af\u30c8\u30eb\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002Fortran\u306b\u6163\u308c\u3066\u3044\u308c\u3070\u3001\u591a\u6b21\u5143\u914d\u5217\u306f\u30e1\u30e2\u30ea\u30fc\u306b\uff11\u6b21\u5143\u306b\u4e26\u3093\u3067\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u884c\u5217\u3092\u4e00\u672c\u306e\u30d9\u30af\u30c8\u30eb\u3068\u898b\u306a\u3059\u3053\u3068\u6709\u308a\u304b\u306a\u3068\u7d0d\u5f97\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u3046\u306a\u308b\u3068\u3001\u884c\u5217\u306b\u5185\u7a4d\u3092\u8003\u3048\u3066\u3001\u305f\u3060\u306e\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u304b\u3089\u8a08\u91cf\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u306b\u9032\u307f\u305f\u3044\u6c17\u6301\u3061\u3082\u6e67\u3044\u3066\u304f\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u30d2\u30eb\u30d9\u30eb\u30c8\uff1d\u30b7\u30e5\u30df\u30c3\u30c8\u578b\u306e\u5185\u7a4d\u306f\u3001\u305d\u3046\u3044\u3046\u4e8c\u3064\u306e\u884c\u5217\u306e\u9593\u306e\u5185\u7a4d\u3067\u3059\u3002\u5b9a\u7fa9\u306f\u3001\n\n```math\n<A|B>={\\rm Tr}(A^*B)\n```\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067$A^*$\u306f\u884c\u5217$A$\u306e\u30a8\u30eb\u30df\u30fc\u30c8\u5171\u5f79\u3067\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u898b\u304b\u3051\u306f\u9762\u5012\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u884c\u5217$A$\u306e\u8907\u7d20\u5171\u5f79\u3068\u884c\u5217$B$\u306e\u5bfe\u5fdc\u3059\u308b\u5404\u6210\u5206\u306e\u7a4d\u306e\u548c\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u884c\u5217\u3092\u4e00\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u3057\u305f\u3068\u304d\u3001\u666e\u901a\u306e\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\n```math\n{\\rm Tr}(A^*B)=\\sum_{i, j}(\\bar{A}_{i,j})({B}_{i,j})\n```\n\u6210\u5206\u3067\u66f8\u3044\u3066\u3042\u308b\u65b9\u304c\u5358\u7d14\u3067\u3059\u304c\u3001Trace \u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3042\u308b\u3068\u7d50\u679c\u304c\u57fa\u5e95\u306b\u4f9d\u3089\u306a\u3044\u3053\u3068\u304c\u660e\u767d\u306b\u306a\u3063\u3066\u3001\u597d\u307e\u3057\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n#\u8a08\u7b97\u3067\u306e\u78ba\u8a8d\n##\u30d7\u30ed\u30b0\u30e9\u30e0\n```fortran\n    module m_subs\n      implicit none\n    contains \n      complex function Hilbert_Schmidt(c, d) \n        complex, intent(in) :: c(:, :), d(:, :)\n        Hilbert_Schmidt = trace(matmul(Hermitian_Conjugate(c), d))\n      end function Hilbert_Schmidt\n     \n      function Hermitian_Conjugate(c)\n        complex, intent(in) :: c(:, :)\n        complex, allocatable :: Hermitian_Conjugate(:, :)\n        Hermitian_Conjugate = transpose(conjg(c))\n      end function Hermitian_Conjugate  \n      \n      complex function trace(c)\n        complex, intent(in) :: c(:, :)\n        integer :: i\n        trace = sum( [(c(i, i), i = 1, size(c, 1))] )\n      end function trace\n    end module m_subs\n    \n    program HS\n      use m_subs\n      implicit none\n      integer, parameter :: n = 10\n      complex :: a(n, n), b(n, n), c, d, e\n      complex, allocatable :: s(:), t(:)\n      real :: x(n, n), y(n, n)\n      call random_seed()\n      call random_number(x)\n      call random_number(y)\n      a = cmplx(x, y)\n      call random_number(x)\n      call random_number(y)\n      b = cmplx(x, y)\n      s = reshape(a, [size(a)]) ! 1-dimensional array of size n^2\n      t = reshape(b, [size(b)]) ! 1-dimensional array of size n^2\n      \n      c = Hilbert_Schmidt(a, b) ! Trace(A* B)\n      d = sum(conjg(a) * b)     ! sum (A_ij)* (B_ij)\n      e = dot_product(s, t)     ! inner-product(A, B) \n      print *, c, d, abs(c - d) / abs(c)\n      print *, d, e, abs(d - e) / abs(d)\n    end program HS\n```\n##\u5b9f\u884c\u7d50\u679c\n\u4e71\u6570\u3067\u884c\u5217\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u306e\u3067\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u5358\u7cbe\u5ea6\u306e\u7bc4\u56f2\u3067\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n```\n (51.86407,-2.380983) (51.86405,-2.380983) 2.9404126E-07\n (51.86405,-2.380983) (51.86405,-2.380983) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n (54.13935,4.021431) (54.13936,4.021432) 2.8161699E-07\n (54.13936,4.021432) (54.13936,4.021432) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n (48.62010,5.180973) (48.62009,5.180972) 7.8624716E-08\n (48.62009,5.180972) (48.62009,5.180972) 0.000000\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n```\n", "tags": ["Fortran"]}