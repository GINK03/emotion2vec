{"tags": ["CommonLisp", "common-lisp"], "context": " More than 1 year has passed since last update.QuickLisp\u3092Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\nproxy authentication\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001\u6700\u521d\u306eGET\u3092\u6295\u3052\u305f\u3068\u304d\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u898b\u3066\u3057\u304b\u308b\u3079\u304d\u5024\u3092\u30d8\u30c3\u30c0\u306b\u5165\u308c\u3066\u3082\u3046\u4e00\u5ea6\u6295\u3052\u308c\u3070\u826f\u3044\u306f\u305a\u3067\u3059\u3002\n\n\u89e3\u6790\nGET\u3092\u6295\u3052\u3066\u3044\u308b\u90e8\u5206\u306f\u3053\u306e\u95a2\u6570\u3002\u30b9\u30c6\u30fc\u30bf\u30b9\u304c300\u756a\u53f0\u306e\u5834\u5408\u306f\u30ea\u30c8\u30e9\u30a4\u3057\u3066\n\u3044\u308b\u306e\u3067\u3001400\u756a\u53f0\u306e\u5834\u5408\u3092\u4f5c\u308c\u3070\u3088\u3055\u305d\u3046\u3068\u5f53\u305f\u308a\u3092\u3064\u3051\u307e\u3059\u3002\nhttps://github.com/quicklisp/quicklisp-bootstrap/blob/master/quicklisp.lisp\n1361\u884c\u76ee\uff5e\u30b3\u30e1\u30f3\u30c8\u3092\u9069\u5b9c\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n(defun fetch (url file &key (follow-redirects t) quietly\n              (maximum-redirects *maximum-redirects*))\n  \"Request URL and write the body of the response to FILE.\"\n  (setf url (merge-urls url *default-url-defaults*))\n  (setf file (merge-pathnames file))\n  (let ((redirect-count 0)\n        (original-url url)\n        (connect-url (or (url *proxy-url*) url))\n        (stream (if quietly\n                    (make-broadcast-stream)\n                    *trace-output*)))\n    (loop\n     (when (<= maximum-redirects redirect-count)\n       (error \"Too many redirects for ~A\" original-url))\n     (with-connection (connection (hostname connect-url) (port connect-url))\n       (let ((cbuf (make-instance 'cbuf :connection connection))\n             ;; cbuf : \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d0\u30c3\u30d5\u30a1\n             (request (request-buffer \"GET\" url)))\n             ;; request : \u30ea\u30af\u30a8\u30b9\u30c8\u30d0\u30c3\u30d5\u30a1\n             ;; request-buffer \u3067 proxy-url \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n\n         ;; \u3053\u3053\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u307e\u3059\n         (write-octets request connection)\n\n         (let ((header (read-http-header cbuf)))\n               ;; header : \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\n           (loop while (= (status header) 100)\n                 do (setf header (read-http-header cbuf)))\n\n           (cond ((= (status header) 200)\n                  ;; 200 OK\n                  (let ((size (content-length header)))\n                    (format stream \"~&; Fetching ~A~%\" url)\n                    (if (and (numberp size)\n                             (plusp size))\n                        (format stream \"; ~$KB~%\" (/ size 1024))\n                        (format stream \"; Unknown size~%\"))\n                    (if quietly\n                        (save-response file header cbuf)\n                        (call-with-progress-bar (content-length header)\n                                                (lambda ()\n                                                  (save-response file header cbuf))))))\n                 ;; 300\u756a\u53f0\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n                 ((not (<= 300 (status header) 399))\n                  (error \"Unexpected status for ~A: ~A\"\n                         url (status header))))\n\n           (if (and follow-redirects (<= 300 (status header) 399))\n               ;; 300\u756a\u53f0\u306e\u5834\u5408\u306f location \u3067\u793a\u3055\u308c\u305f URL \u3092\u8aad\u307f\u8fbc\u307f\u3057\u76f4\u3057\n               (let ((new-urlstring (ascii-header-value \"location\" header)))\n                 (when (not new-urlstring)\n                   (error \"Redirect code ~D received, but no Location: header\"\n                          (status header)))\n                 (incf redirect-count)\n                 (setf url (merge-urls new-urlstring\n                                       url))\n                 (format stream \"~&; Redirecting to ~A~%\" url))\n               ;; 200 \u306e\u5834\u5408\u306f\u6b63\u5e38\u306b\u623b\u308b\n               (return (values header (and file (probe-file file)))))))))))\n\n\n\u52d5\u4f5c\u306e\u78ba\u8a8d\nproxy authentication \u74b0\u5883\u4e0b\u3067\u4f55\u3082\u8a2d\u5b9a\u3057\u306a\u3044\u3068 \"Unexpected status for\"\u3068\u304b\u8a00\u3063\u3066\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u308b\u306e\u3067\u3001\u305d\u3053\u3067\u5404\u7a2e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nSLIME\u306e\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u305f\u3089\u3001\u30d5\u30ec\u30fc\u30e0\u306b\u3042\u308b\u5024\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nBacktrace:\n  0: ((:INTERNAL QLQS-HTTP:FETCH) #<BASIC-TCP-STREAM ISO-8859-1 (SOCKET/1752) #x2100D1737D>)\n  1: (#<STANDARD-METHOD QLQS-NETWORK::%CALL-WITH-CONNECTION (T T T T)> #<QLQS-IMPL:CCL #x2100B71EBD> \"beta.quicklisp.org\" 80 #<COMPILED-LEXICAL-CLOSURE (:INTERNAL QLQS-HTTP:FETCH) #x2100D176AF>)\n  2: (QLQS-HTTP:FETCH #<URL \"http://proxyserver....\"> #P\"/tmp/fetch.dat\" :FOLLOW-RED..\n\n0\u306e\u884c\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u5408\u308f\u305b\u3066e\u3092\u62bc\u3057\u3066\u5f0f\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n Eval in frame (QLQS-HTTP)> (headers-alist header)\n => ((\"cache-control\" . \"no-cache\") (\"pragma\" . \"no-cache\") (\"www-authenticate\" . \"NEGOTIATE\") (\"www-authenticate\" . \"NEGOTIATE\") (\"www-authenticate\" . \"NEGOTICATE\") ...)\n\nwww-authenticate \u3068 NEGOTIATE \u304c\u7e70\u308a\u8fd4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u540c\u540d\u306e\u9805\u76ee\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u3046\u307e\u304f\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u3001Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3055\u305b\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3060\u3068Proxy\u30b5\u30fc\u30d0\u304cBasic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u304b\u3069\u3046\u304b\u5224\u5225\u304c\u3064\u304d\u307e\u305b\u3093\u3002\n\n\u3055\u3089\u306b\u52d5\u4f5c\u306e\u78ba\u8a8d\n\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u540c\u540d\u306e\u9805\u76ee\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u539f\u56e0\u306f\u3001header-value-indexes\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3082\u3068\u306b\u305d\u306eValue\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u304c\u540c\u540d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u524d\u63d0\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\u5b9f\u969b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u898b\u308b\u305f\u3081\u306b\u3001all-field-names\u3068\u3044\u3046\u95a2\u6570\u3092\u5143\u306b\u66f8\u3044\u305f\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u30c7\u30d0\u30c3\u30ac\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n(map 'list (lambda (start end)\n             (ascii-subseq (data header) start end))\n     (value-starts header)\n     (value-ends header))\n=> ((\"no-cache\" \"no-cache\" \"NEGOTIATE\" \"NTLM\" \"BASIC realm=\\\"proxy\\\"\" ...)\n\n\u3046\u307e\u304f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u306e\u95a2\u6570\u3092all-field-values\u3068\u5b9a\u7fa9\u3057\u3001\u3059\u3079\u3066\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\uff0f\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n(defun all-field-values (header)\n  (map 'list (lambda (start end)\n           (ascii-subseq (data header) start end))\n       (value-starts header)\n       (value-ends header)))\n\n(defun all-fields (header)\n  (mapcar #'cons (all-field-names header)\n      (all-field-values header)))\n\n\u307e\u305f\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u5024\uff08\u8907\u6570\uff09\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3001\u304a\u3088\u3073Basic\u8a8d\u8a3c\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n(defun get-fields-by-name (field-name header)\n  (let ((fields-list (all-fields header)))\n    (loop for field in fields-list\n      if (string= (car field) field-name)\n      collect field)))\n\n(defun basic-authenticate-p (header)\n  (let ((auth-fields (get-fields-by-name header)))\n    (loop for field in auth-fields\n      if (search \"BASIC realm=\" (cdr field))\n      return t)))\n\n\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u305f\u3042\u3068\u3001(basic-authenticate-p header)\u3092\u3059\u308b\u3068\u3001Basic\u8a8d\u8a3c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u307e\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306fID/PASSWORD\u3092Base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\nQuickLisp\u3092Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\nproxy authentication\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u306b\u306f\u3001\u6700\u521d\u306eGET\u3092\u6295\u3052\u305f\u3068\u304d\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u898b\u3066\u3057\u304b\u308b\u3079\u304d\u5024\u3092\u30d8\u30c3\u30c0\u306b\u5165\u308c\u3066\u3082\u3046\u4e00\u5ea6\u6295\u3052\u308c\u3070\u826f\u3044\u306f\u305a\u3067\u3059\u3002\n\n## \u89e3\u6790\n\nGET\u3092\u6295\u3052\u3066\u3044\u308b\u90e8\u5206\u306f\u3053\u306e\u95a2\u6570\u3002\u30b9\u30c6\u30fc\u30bf\u30b9\u304c300\u756a\u53f0\u306e\u5834\u5408\u306f\u30ea\u30c8\u30e9\u30a4\u3057\u3066\n\u3044\u308b\u306e\u3067\u3001400\u756a\u53f0\u306e\u5834\u5408\u3092\u4f5c\u308c\u3070\u3088\u3055\u305d\u3046\u3068\u5f53\u305f\u308a\u3092\u3064\u3051\u307e\u3059\u3002\n\n\nhttps://github.com/quicklisp/quicklisp-bootstrap/blob/master/quicklisp.lisp\n1361\u884c\u76ee\uff5e\u30b3\u30e1\u30f3\u30c8\u3092\u9069\u5b9c\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\n```cl:\n(defun fetch (url file &key (follow-redirects t) quietly\n              (maximum-redirects *maximum-redirects*))\n  \"Request URL and write the body of the response to FILE.\"\n  (setf url (merge-urls url *default-url-defaults*))\n  (setf file (merge-pathnames file))\n  (let ((redirect-count 0)\n        (original-url url)\n        (connect-url (or (url *proxy-url*) url))\n        (stream (if quietly\n                    (make-broadcast-stream)\n                    *trace-output*)))\n    (loop\n     (when (<= maximum-redirects redirect-count)\n       (error \"Too many redirects for ~A\" original-url))\n     (with-connection (connection (hostname connect-url) (port connect-url))\n       (let ((cbuf (make-instance 'cbuf :connection connection))\n             ;; cbuf : \u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d0\u30c3\u30d5\u30a1\n             (request (request-buffer \"GET\" url)))\n             ;; request : \u30ea\u30af\u30a8\u30b9\u30c8\u30d0\u30c3\u30d5\u30a1\n             ;; request-buffer \u3067 proxy-url \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n\n         ;; \u3053\u3053\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u307e\u3059\n         (write-octets request connection)\n\n         (let ((header (read-http-header cbuf)))\n               ;; header : \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\n           (loop while (= (status header) 100)\n                 do (setf header (read-http-header cbuf)))\n\n           (cond ((= (status header) 200)\n                  ;; 200 OK\n                  (let ((size (content-length header)))\n                    (format stream \"~&; Fetching ~A~%\" url)\n                    (if (and (numberp size)\n                             (plusp size))\n                        (format stream \"; ~$KB~%\" (/ size 1024))\n                        (format stream \"; Unknown size~%\"))\n                    (if quietly\n                        (save-response file header cbuf)\n                        (call-with-progress-bar (content-length header)\n                                                (lambda ()\n                                                  (save-response file header cbuf))))))\n                 ;; 300\u756a\u53f0\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n                 ((not (<= 300 (status header) 399))\n                  (error \"Unexpected status for ~A: ~A\"\n                         url (status header))))\n\n           (if (and follow-redirects (<= 300 (status header) 399))\n               ;; 300\u756a\u53f0\u306e\u5834\u5408\u306f location \u3067\u793a\u3055\u308c\u305f URL \u3092\u8aad\u307f\u8fbc\u307f\u3057\u76f4\u3057\n               (let ((new-urlstring (ascii-header-value \"location\" header)))\n                 (when (not new-urlstring)\n                   (error \"Redirect code ~D received, but no Location: header\"\n                          (status header)))\n                 (incf redirect-count)\n                 (setf url (merge-urls new-urlstring\n                                       url))\n                 (format stream \"~&; Redirecting to ~A~%\" url))\n               ;; 200 \u306e\u5834\u5408\u306f\u6b63\u5e38\u306b\u623b\u308b\n               (return (values header (and file (probe-file file)))))))))))\n```\n\n## \u52d5\u4f5c\u306e\u78ba\u8a8d\n\nproxy authentication \u74b0\u5883\u4e0b\u3067\u4f55\u3082\u8a2d\u5b9a\u3057\u306a\u3044\u3068 \"Unexpected status for\"\u3068\u304b\u8a00\u3063\u3066\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u308b\u306e\u3067\u3001\u305d\u3053\u3067\u5404\u7a2e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nSLIME\u306e\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u305f\u3089\u3001\u30d5\u30ec\u30fc\u30e0\u306b\u3042\u308b\u5024\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n    Backtrace:\n      0: ((:INTERNAL QLQS-HTTP:FETCH) #<BASIC-TCP-STREAM ISO-8859-1 (SOCKET/1752) #x2100D1737D>)\n      1: (#<STANDARD-METHOD QLQS-NETWORK::%CALL-WITH-CONNECTION (T T T T)> #<QLQS-IMPL:CCL #x2100B71EBD> \"beta.quicklisp.org\" 80 #<COMPILED-LEXICAL-CLOSURE (:INTERNAL QLQS-HTTP:FETCH) #x2100D176AF>)\n      2: (QLQS-HTTP:FETCH #<URL \"http://proxyserver....\"> #P\"/tmp/fetch.dat\" :FOLLOW-RED..\n\n\n0\u306e\u884c\u306b\u30ab\u30fc\u30bd\u30eb\u3092\u5408\u308f\u305b\u3066```e```\u3092\u62bc\u3057\u3066\u5f0f\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\n```cl:\n Eval in frame (QLQS-HTTP)> (headers-alist header)\n => ((\"cache-control\" . \"no-cache\") (\"pragma\" . \"no-cache\") (\"www-authenticate\" . \"NEGOTIATE\") (\"www-authenticate\" . \"NEGOTIATE\") (\"www-authenticate\" . \"NEGOTICATE\") ...)\n```\n\nwww-authenticate \u3068 NEGOTIATE \u304c\u7e70\u308a\u8fd4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u540c\u540d\u306e\u9805\u76ee\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u3046\u307e\u304f\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u3001Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3055\u305b\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3060\u3068Proxy\u30b5\u30fc\u30d0\u304cBasic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u304b\u3069\u3046\u304b\u5224\u5225\u304c\u3064\u304d\u307e\u305b\u3093\u3002\n\n\n## \u3055\u3089\u306b\u52d5\u4f5c\u306e\u78ba\u8a8d\n\n\u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u540c\u540d\u306e\u9805\u76ee\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u539f\u56e0\u306f\u3001```header-value-indexes```\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u3082\u3068\u306b\u305d\u306eValue\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u95a2\u6570\u304c\u540c\u540d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u524d\u63d0\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u5b9f\u969b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u898b\u308b\u305f\u3081\u306b\u3001```all-field-names```\u3068\u3044\u3046\u95a2\u6570\u3092\u5143\u306b\u66f8\u3044\u305f\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u30c7\u30d0\u30c3\u30ac\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cl:\n(map 'list (lambda (start end)\n             (ascii-subseq (data header) start end))\n     (value-starts header)\n     (value-ends header))\n=> ((\"no-cache\" \"no-cache\" \"NEGOTIATE\" \"NTLM\" \"BASIC realm=\\\"proxy\\\"\" ...)\n```\n\n\u3046\u307e\u304f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u306e\u95a2\u6570\u3092```all-field-values```\u3068\u5b9a\u7fa9\u3057\u3001\u3059\u3079\u3066\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\uff0f\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```cl:\n(defun all-field-values (header)\n  (map 'list (lambda (start end)\n\t       (ascii-subseq (data header) start end))\n       (value-starts header)\n       (value-ends header)))\n\n(defun all-fields (header)\n  (mapcar #'cons (all-field-names header)\n\t  (all-field-values header)))\n```\n\n\u307e\u305f\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u5024\uff08\u8907\u6570\uff09\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3001\u304a\u3088\u3073Basic\u8a8d\u8a3c\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cl:\n(defun get-fields-by-name (field-name header)\n  (let ((fields-list (all-fields header)))\n    (loop for field in fields-list\n\t  if (string= (car field) field-name)\n\t  collect field)))\n\n(defun basic-authenticate-p (header)\n  (let ((auth-fields (get-fields-by-name header)))\n    (loop for field in auth-fields\n\t  if (search \"BASIC realm=\" (cdr field))\n\t  return t)))\n```\n\n\u30c7\u30d0\u30c3\u30ac\u306b\u843d\u3061\u305f\u3042\u3068\u3001```(basic-authenticate-p header)```\u3092\u3059\u308b\u3068\u3001Basic\u8a8d\u8a3c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n\u307e\u305a\u306f\u3001Basic\u8a8d\u8a3c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u307e\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306fID/PASSWORD\u3092Base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\n"}