{"context": "\n\n\u306f\u3058\u3081\u306b\nRajawali\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u3044\u3066\u30013D\u30e2\u30c7\u30eb\u306e\u62e1\u5927 -> \u56de\u8ee2 -> \u79fb\u52d5\u306e\u64cd\u4f5c\u3092\u540c\u6642\u306b\u9069\u7528\u3057\u305f\u3068\u304d\u306b\u610f\u56f3\u3057\u305f\u9806\u756a\u306b\u306a\u3089\u305a\u306b\u306f\u307e\u3063\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\nRajawali\u3068\u306f\uff1f\nAndroid \u7528 OpenGL\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n2016\u5e7411\u6708\u73fe\u57280.9., 1.0., 1.1.\u7cfb\u304c\u30ea\u30ea\u30fc\u30b9\u6e08\u307f\u3067\u30012.\u7cfb\u3092\u958b\u767a\u4e2d\u307f\u305f\u3044\u3067\u3059\u3002\nhttps://github.com/Rajawali/Rajawali\n0.9\u7cfb\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\nhttp://dev.classmethod.jp/smartphone/android/android-rajawali-tutorials-01/\n0.9\u30681.0\u4ee5\u964d\u306f\u4e92\u63db\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306f1.1\u306b\u3064\u3044\u3066\u306e\u3082\u306e\u3067\u3059\u3002\n\n\u554f\u984c\nRajawali\u3067\u306f\u79fb\u52d5\u30fb\u56de\u8ee2\u30fb\u62e1\u7e2e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8868\u73fe\u3059\u308bATransformable3D\u3068\u3044\u3046\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u4e0a\u8a18\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305fObject3D\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u3001\u57fa\u672c\u7684\u306b\u3053\u306e\u30af\u30e9\u30b9\u3092\u64cd\u4f5c\u3057\u30663D\u30e2\u30c7\u30eb\u306e\u751f\u6210\u30fb\u63cf\u753b\u3092\u884c\u3046\uff09\nATransformable3D\u306b\u306f\n- setScale\n- setOrientation/ setRotation\n- setPosition\n\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3069\u306e\u9806\u756a\u3067\u547c\u3073\u51fa\u3057\u3066\u3082\u56de\u8ee2 -> \u62e1\u7e2e -> \u79fb\u52d5\u306e\u9806\u756a\u3067\u9069\u7528\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u203b\u3053\u306e\u9806\u756a\u304c\u72c2\u3046\u3068\u306a\u305c\u56f0\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttp://www.asahi-net.or.jp/~va5n-okmt/pov/tutorial/tra_rota_scl.html\nATransformable3D\u30af\u30e9\u30b9\u306f\u5185\u90e8\u7684\u306b\n- mPosition ... \u5e73\u884c\u79fb\u52d5\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setPosition\u3067\u64cd\u4f5c\uff09\n- mScale ... \u62e1\u7e2e\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setScale\u3067\u64cd\u4f5c\uff09\n- mOrientation ... \u56de\u8ee2\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setOrientation/ setRotation\u3067\u64cd\u4f5c\uff09\n- mMMatrix ... \u4e0a\u8a183\u3064\u3092\u5408\u6210\u3057\u305f\u30e2\u30c7\u30eb\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\n\u306e\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30e2\u30c7\u30eb\u884c\u5217\u306e\u8a08\u7b97\u3092\u884c\u3046calculateModelMatrix\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u308b\u3068\n\ncalculateModelMatrix\n    /**\n     * Calculates the model matrix for this {@link ATransformable3D} object.\n     *\n     * @param parentMatrix {@link Matrix4} The parent matrix, if any, to apply to this object.\n     */\n    public void calculateModelMatrix(final Matrix4 parentMatrix) {\n        mMMatrix.setAll(mPosition, mScale, mOrientation);\n        if (parentMatrix != null) {\n            mMMatrix.leftMultiply(parentMatrix);\n        }\n    }\n\n\n\u3055\u3089\u306bcalculateModelMatrix\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308bsetAll\u306e\u5185\u5bb9\u306f\n\nsetAll\n    /**\n     * Sets the values of this {@link Matrix4} to the values corresponding to a Translation x Scale x Rotation.\n     * This is useful for composing a model matrix as efficiently as possible, eliminating any extraneous calculations.\n     *\n     * @param position {@link Vector3} representing the translation.\n     * @param scale {@link Vector3} representing the scaling.\n     * @param rotation {@link Quaternion} representing the rotation.\n     * @return A reference to this {@link Matrix4} to facilitate chaining.\n     */\n    public Matrix4 setAll(final Vector3 position, final Vector3 scale, final Quaternion rotation) {\n        // Precompute these factors for speed\n        final double x2 = rotation.x * rotation.x;\n        final double y2 = rotation.y * rotation.y;\n        final double z2 = rotation.z * rotation.z;\n        final double xy = rotation.x * rotation.y;\n        final double xz = rotation.x * rotation.z;\n        final double yz = rotation.y * rotation.z;\n        final double wx = rotation.w * rotation.x;\n        final double wy = rotation.w * rotation.y;\n        final double wz = rotation.w * rotation.z;\n\n        // Column 0\n        m[M00] = scale.x * (1.0 - 2.0 * (y2 + z2));\n        m[M10] = 2.0 * scale.y * (xy - wz);\n        m[M20] = 2.0 * scale.z * (xz + wy);\n        m[M30] = 0;\n\n        // Column 1\n        m[M01] = 2.0 * scale.x * (xy + wz);\n        m[M11] = scale.y * (1.0 - 2.0 * (x2 + z2));\n        m[M21] = 2.0 * scale.z * (yz - wx);\n        m[M31] = 0;\n\n        // Column 2\n        m[M02] = 2.0 * scale.x * (xz - wy);\n        m[M12] = 2.0 * scale.y * (yz + wx);\n        m[M22] = scale.z * (1.0 - 2.0 * (x2 + y2));\n        m[M32] = 0;\n\n        // Column 3\n        m[M03] = position.x;\n        m[M13] = position.y;\n        m[M23] = position.z;\n        m[M33] = 1.0;\n        return this;\n    }\n\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001mMMatrix\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u5bfe\u5fdc\n // obj\u3092\u56de\u8ee2 -> \u79fb\u52d5 -> \u62e1\u7e2e\u306e\u9806\u756a\u3067\u64cd\u4f5c\n Object3D obj = (\u7565)...;\n obj.setScale(1.0f, 2.0f, 1.5f); // \u62e1\u7e2e\n\n Object3D parent= new Object3D(); // \u7a7a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8parent\u3092\u4f5c\u6210\n Quaternion q = (\u7565)...;\n parent.setOrientation(q);\n parent.setPosition(5.0f, 6.0f, 7.0f);\n\n parent.addChild(obj);\n\n\n\u306e\u3088\u3046\u306bObject3D\u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u3064\u304f\u308a\u3001\u5148\u306b\u9069\u7528\u3057\u305f\u3044\u64cd\u4f5c\u3092\u89aa\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u884c\u3046\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n# \u306f\u3058\u3081\u306b\nRajawali\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u3044\u3066\u30013D\u30e2\u30c7\u30eb\u306e\u62e1\u5927 -> \u56de\u8ee2 -> \u79fb\u52d5\u306e\u64cd\u4f5c\u3092\u540c\u6642\u306b\u9069\u7528\u3057\u305f\u3068\u304d\u306b\u610f\u56f3\u3057\u305f\u9806\u756a\u306b\u306a\u3089\u305a\u306b\u306f\u307e\u3063\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n# Rajawali\u3068\u306f\uff1f\nAndroid \u7528 OpenGL\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n2016\u5e7411\u6708\u73fe\u57280.9.*, 1.0.*, 1.1.*\u7cfb\u304c\u30ea\u30ea\u30fc\u30b9\u6e08\u307f\u3067\u30012.*\u7cfb\u3092\u958b\u767a\u4e2d\u307f\u305f\u3044\u3067\u3059\u3002\n\nhttps://github.com/Rajawali/Rajawali\n\n0.9\u7cfb\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\nhttp://dev.classmethod.jp/smartphone/android/android-rajawali-tutorials-01/\n\n0.9\u30681.0\u4ee5\u964d\u306f\u4e92\u63db\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306f1.1\u306b\u3064\u3044\u3066\u306e\u3082\u306e\u3067\u3059\u3002\n\n# \u554f\u984c\nRajawali\u3067\u306f\u79fb\u52d5\u30fb\u56de\u8ee2\u30fb\u62e1\u7e2e\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8868\u73fe\u3059\u308bATransformable3D\u3068\u3044\u3046\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u4e0a\u8a18\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305fObject3D\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u3001\u57fa\u672c\u7684\u306b\u3053\u306e\u30af\u30e9\u30b9\u3092\u64cd\u4f5c\u3057\u30663D\u30e2\u30c7\u30eb\u306e\u751f\u6210\u30fb\u63cf\u753b\u3092\u884c\u3046\uff09\n\nATransformable3D\u306b\u306f\n- setScale\n- setOrientation/ setRotation\n- setPosition\n\n\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3069\u306e\u9806\u756a\u3067\u547c\u3073\u51fa\u3057\u3066\u3082\u56de\u8ee2 -> \u62e1\u7e2e -> \u79fb\u52d5\u306e\u9806\u756a\u3067\u9069\u7528\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u203b\u3053\u306e\u9806\u756a\u304c\u72c2\u3046\u3068\u306a\u305c\u56f0\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhttp://www.asahi-net.or.jp/~va5n-okmt/pov/tutorial/tra_rota_scl.html\n\n\nATransformable3D\u30af\u30e9\u30b9\u306f\u5185\u90e8\u7684\u306b\n- mPosition ... \u5e73\u884c\u79fb\u52d5\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setPosition\u3067\u64cd\u4f5c\uff09\n- mScale ... \u62e1\u7e2e\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setScale\u3067\u64cd\u4f5c\uff09\n- mOrientation ... \u56de\u8ee2\u7528\u306e\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\uff08setOrientation/ setRotation\u3067\u64cd\u4f5c\uff09\n- mMMatrix ... \u4e0a\u8a183\u3064\u3092\u5408\u6210\u3057\u305f\u30e2\u30c7\u30eb\u884c\u5217\u3092\u683c\u7d0d\u3059\u308b\u30e1\u30f3\u30d0\n\u306e\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30e2\u30c7\u30eb\u884c\u5217\u306e\u8a08\u7b97\u3092\u884c\u3046calculateModelMatrix\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u308b\u3068\n\n\n```java:calculateModelMatrix\n    /**\n     * Calculates the model matrix for this {@link ATransformable3D} object.\n     *\n     * @param parentMatrix {@link Matrix4} The parent matrix, if any, to apply to this object.\n     */\n    public void calculateModelMatrix(final Matrix4 parentMatrix) {\n        mMMatrix.setAll(mPosition, mScale, mOrientation);\n        if (parentMatrix != null) {\n            mMMatrix.leftMultiply(parentMatrix);\n        }\n    }\n```\n\n\u3055\u3089\u306bcalculateModelMatrix\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308bsetAll\u306e\u5185\u5bb9\u306f\n\n```java:setAll\n    /**\n     * Sets the values of this {@link Matrix4} to the values corresponding to a Translation x Scale x Rotation.\n     * This is useful for composing a model matrix as efficiently as possible, eliminating any extraneous calculations.\n     *\n     * @param position {@link Vector3} representing the translation.\n     * @param scale {@link Vector3} representing the scaling.\n     * @param rotation {@link Quaternion} representing the rotation.\n     * @return A reference to this {@link Matrix4} to facilitate chaining.\n     */\n    public Matrix4 setAll(final Vector3 position, final Vector3 scale, final Quaternion rotation) {\n        // Precompute these factors for speed\n        final double x2 = rotation.x * rotation.x;\n        final double y2 = rotation.y * rotation.y;\n        final double z2 = rotation.z * rotation.z;\n        final double xy = rotation.x * rotation.y;\n        final double xz = rotation.x * rotation.z;\n        final double yz = rotation.y * rotation.z;\n        final double wx = rotation.w * rotation.x;\n        final double wy = rotation.w * rotation.y;\n        final double wz = rotation.w * rotation.z;\n\n        // Column 0\n        m[M00] = scale.x * (1.0 - 2.0 * (y2 + z2));\n        m[M10] = 2.0 * scale.y * (xy - wz);\n        m[M20] = 2.0 * scale.z * (xz + wy);\n        m[M30] = 0;\n\n        // Column 1\n        m[M01] = 2.0 * scale.x * (xy + wz);\n        m[M11] = scale.y * (1.0 - 2.0 * (x2 + z2));\n        m[M21] = 2.0 * scale.z * (yz - wx);\n        m[M31] = 0;\n\n        // Column 2\n        m[M02] = 2.0 * scale.x * (xz - wy);\n        m[M12] = 2.0 * scale.y * (yz + wx);\n        m[M22] = scale.z * (1.0 - 2.0 * (x2 + y2));\n        m[M32] = 0;\n\n        // Column 3\n        m[M03] = position.x;\n        m[M13] = position.y;\n        m[M23] = position.z;\n        m[M33] = 1.0;\n        return this;\n    }\n```\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001mMMatrix\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\n# \u5bfe\u5fdc\n\n```java:\n // obj\u3092\u56de\u8ee2 -> \u79fb\u52d5 -> \u62e1\u7e2e\u306e\u9806\u756a\u3067\u64cd\u4f5c\n Object3D obj = (\u7565)...;\n obj.setScale(1.0f, 2.0f, 1.5f); // \u62e1\u7e2e\n\n Object3D parent= new Object3D(); // \u7a7a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8parent\u3092\u4f5c\u6210\n Quaternion q = (\u7565)...;\n parent.setOrientation(q);\n parent.setPosition(5.0f, 6.0f, 7.0f);\n\n parent.addChild(obj);\n\n```\n\n\u306e\u3088\u3046\u306bObject3D\u306e\u89aa\u5b50\u95a2\u4fc2\u3092\u3064\u304f\u308a\u3001\u5148\u306b\u9069\u7528\u3057\u305f\u3044\u64cd\u4f5c\u3092\u89aa\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u884c\u3046\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n", "tags": ["rajawali", "OpenGLES", "Android", "Java"]}