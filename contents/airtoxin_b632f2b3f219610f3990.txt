{"tags": ["f2py", "Fortran", "Python"], "context": " More than 1 year has passed since last update.python\u66f8\u304d\u3084\u3059\u3044\u3051\u3069\u901f\u5ea6\u304c\u306d\u301c \u2192 \u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092fortran\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\n\uff01\uff01\uff01\u901f\u3044\uff01\uff01\uff01\nFortran\u306e\u7df4\u7fd2\u3082\u517c\u306d\u3066\u524d\u66f8\u3044\u305f\u7d20\u6570\u8868\u793a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066\u307f\u308b\u3002\n\n\u74b0\u5883\nf2py\uff08scipy\u306b\u4ed8\u5c5e\uff09\ngfortran4.7.2\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u305f\u3044\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\u3002\n\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u5f15\u6570\u306fCf2py\u3067in\u3092\u5ba3\u8a00\u3059\u308b\u3002\n\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u623b\u308a\u5024\uff08\u3064\u307e\u308apython\u5074\u3067\u53d7\u3051\u53d6\u308b\u623b\u308a\u5024\uff09\u306fCf2py\u3067out\u3092\u5ba3\u8a00\u3059\u308b\u3002\nCf2py\u306e\u5ba3\u8a00\u306f\u884c\u982d\u304b\u3089\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u672c\u4f53\u306f\u30b9\u30da\u30fc\u30b96\u500b\u958b\u3051\u3066\u304b\u3089\u66f8\u304b\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u3069\u3046\u3084\u3089Cf2py\u3088\u308a\u3082\u30a4\u30f3\u30c7\u30f3\u30c8\u7684\u306b\u5f8c\u308d\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3063\u307d\u3044\uff08\u3081\u3093\u3069\u304f\u3055\u3044\uff01\uff01\uff09\n\nprimepy.f90\n      subroutine prime_number(max_num, ret)\n         implicit none\n         integer max_num\n         integer ret(max_num)\n         integer i, j, list(max_num)\nCf2py intent(in) max_num\nCf2py intent(out) ret\n\n         !l\u3092\u8a2d\u5b9a\n         do i=1, max_num, 1\n            list(i) = i\n         enddo\n         list(1) = 0\n\n         !\u7d20\u6570\u3092\u8a2d\u5b9a\n         do i=1, max_num, 1\n            if (.not. list(i) == 0) then\n               do j = i*2, max_num, i\n                  list(j) = 0\n               end do\n            endif\n         enddo\n\n         !\u7d20\u6570\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n         do i=1, max_num, 1\n            ret(i) = list(i)\n         enddo\n      end subroutine prime_number\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\nf2py -c --fcompiler=gfortran -m prime primepy.f90\n-c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\n--fcompiler\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u6307\u5b9a\n-m\u306e\u5f8c\u304c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\n\u6700\u5f8c\u306bFortran\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d5\u30a1\u30a4\u30eb\n\u3042\u3068\u306f-h\u3067\u30d8\u30eb\u30d7\u78ba\u8a8d\nprime.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u308c\u3070\u6210\u529f\u3002\n\n\u5b9f\u884c\npython\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3001\n>>> import prime\n>>> a = prime.prime_number(100)\n>>> a\narray([ 0,  2,  3,  0,  5,  0,  7,  0,  0,  0, 11,  0, 13,  0,  0,  0, 17,\n        0, 19,  0,  0,  0, 23,  0,  0,  0,  0,  0, 29,  0, 31,  0,  0,  0,\n        0,  0, 37,  0,  0,  0, 41,  0, 43,  0,  0,  0, 47,  0,  0,  0,  0,\n        0, 53,  0,  0,  0,  0,  0, 59,  0, 61,  0,  0,  0,  0,  0, 67,  0,\n        0,  0, 71,  0, 73,  0,  0,  0,  0,  0, 79,  0,  0,  0, 83,  0,  0,\n        0,  0,  0, 89,  0,  0,  0,  0,  0,  0,  0, 97,  0,  0,  0], dtype=int32)\n\n\uff94\uff6f\uff80\uff70\n0\u4ee5\u5916\u3060\u3051\u3092\u8fd4\u3059\u7c21\u5358\u306a\u3084\u308a\u65b9\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u308c\u306fpython\u5074\u3067a.take(a.nonzero()[0])\u3092\u3059\u308b\u3002\n\n\u7d50\u8ad6\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3082\u89e3\u6d88\u3067\u304d\u3066\u30cf\u30c3\u30d4\u30fc\nfortran\u3067\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3089python\u5074\u3067\u51e6\u7406\u3057\u308d\uff01\uff01\npython\u306e\u30ea\u30b9\u30c8\u6700\u9ad8\uff01\uff01\uff01\npython\u66f8\u304d\u3084\u3059\u3044\u3051\u3069\u901f\u5ea6\u304c\u306d\u301c \u2192 \u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092fortran\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\n\uff01\uff01\uff01\u901f\u3044\uff01\uff01\uff01\n\nFortran\u306e\u7df4\u7fd2\u3082\u517c\u306d\u3066\u524d\u66f8\u3044\u305f\u7d20\u6570\u8868\u793a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066\u307f\u308b\u3002\n\n#\u74b0\u5883\nf2py\uff08scipy\u306b\u4ed8\u5c5e\uff09\ngfortran4.7.2\n\n#\u30b9\u30af\u30ea\u30d7\u30c8\n\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u305f\u3044\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\u3002\n\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u5f15\u6570\u306fCf2py\u3067in\u3092\u5ba3\u8a00\u3059\u308b\u3002\n\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u623b\u308a\u5024\uff08\u3064\u307e\u308apython\u5074\u3067\u53d7\u3051\u53d6\u308b\u623b\u308a\u5024\uff09\u306fCf2py\u3067out\u3092\u5ba3\u8a00\u3059\u308b\u3002\nCf2py\u306e\u5ba3\u8a00\u306f\u884c\u982d\u304b\u3089\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u672c\u4f53\u306f\u30b9\u30da\u30fc\u30b96\u500b\u958b\u3051\u3066\u304b\u3089\u66f8\u304b\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u3069\u3046\u3084\u3089Cf2py\u3088\u308a\u3082\u30a4\u30f3\u30c7\u30f3\u30c8\u7684\u306b\u5f8c\u308d\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3063\u307d\u3044\uff08\u3081\u3093\u3069\u304f\u3055\u3044\uff01\uff01\uff09\n\n```Fortran:primepy.f90\n      subroutine prime_number(max_num, ret)\n         implicit none\n         integer max_num\n         integer ret(max_num)\n         integer i, j, list(max_num)\nCf2py intent(in) max_num\nCf2py intent(out) ret\n         \n         !l\u3092\u8a2d\u5b9a\n         do i=1, max_num, 1\n            list(i) = i\n         enddo\n         list(1) = 0\n\n         !\u7d20\u6570\u3092\u8a2d\u5b9a\n         do i=1, max_num, 1\n            if (.not. list(i) == 0) then\n               do j = i*2, max_num, i\n                  list(j) = 0\n               end do\n            endif\n         enddo\n\n         !\u7d20\u6570\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n         do i=1, max_num, 1\n            ret(i) = list(i)\n         enddo\n      end subroutine prime_number\n```\n\n#\u30b3\u30f3\u30d1\u30a4\u30eb\n`f2py -c --fcompiler=gfortran -m prime primepy.f90`\n-c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\n--fcompiler\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u6307\u5b9a\n-m\u306e\u5f8c\u304c\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\n\u6700\u5f8c\u306bFortran\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30d5\u30a1\u30a4\u30eb\n\u3042\u3068\u306f-h\u3067\u30d8\u30eb\u30d7\u78ba\u8a8d\n\nprime.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u308c\u3070\u6210\u529f\u3002\n\n#\u5b9f\u884c\npython\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3001\n\n```\n>>> import prime\n>>> a = prime.prime_number(100)\n>>> a\narray([ 0,  2,  3,  0,  5,  0,  7,  0,  0,  0, 11,  0, 13,  0,  0,  0, 17,\n        0, 19,  0,  0,  0, 23,  0,  0,  0,  0,  0, 29,  0, 31,  0,  0,  0,\n        0,  0, 37,  0,  0,  0, 41,  0, 43,  0,  0,  0, 47,  0,  0,  0,  0,\n        0, 53,  0,  0,  0,  0,  0, 59,  0, 61,  0,  0,  0,  0,  0, 67,  0,\n        0,  0, 71,  0, 73,  0,  0,  0,  0,  0, 79,  0,  0,  0, 83,  0,  0,\n        0,  0,  0, 89,  0,  0,  0,  0,  0,  0,  0, 97,  0,  0,  0], dtype=int32)\n```\n\uff94\uff6f\uff80\uff70\n\n0\u4ee5\u5916\u3060\u3051\u3092\u8fd4\u3059\u7c21\u5358\u306a\u3084\u308a\u65b9\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u308c\u306fpython\u5074\u3067`a.take(a.nonzero()[0])`\u3092\u3059\u308b\u3002\n\n#\u7d50\u8ad6\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3082\u89e3\u6d88\u3067\u304d\u3066\u30cf\u30c3\u30d4\u30fc\nfortran\u3067\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3089python\u5074\u3067\u51e6\u7406\u3057\u308d\uff01\uff01\npython\u306e\u30ea\u30b9\u30c8\u6700\u9ad8\uff01\uff01\uff01"}