{"context": "\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u53c2\u7167\u3002\u3068\u308a\u3042\u3048\u305aRust\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\nC#\u3067\u300c\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u300d\u3067\u300c2.6\u79d2\u3067\u767e\u4e07\u500b\u300d\u306e\u7d20\u6570\u3092\u8a08\u7b97\u3067\u304d\u308b\u300c\u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u3092\u4f5c\u3063\u3066\u307f\u305f\nGolang\u3067\u300c\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u300d\u3067\u300c2.1\u79d2\u3067\u767e\u4e07\u500b\u300d\u306e\u7d20\u6570\u3092\u8a08\u7b97\u3067\u304d\u308b\u300c\u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u3092\u4f5c\u3063\u3066\u307f\u305f\n\n\nuse std::collections::HashMap;\n\nfn main() {\n    let mut dict = HashMap::new();\n    let mut iter = (1..).filter_map(|j| {\n        let i = 2 * j + 1;\n        let (factor, is_prime) = match dict.remove(&i) {\n            Some(f) => (f, false),\n            None => (i * 2, true),\n        };\n        let key = (1..)\n            .filter_map(|j| {\n                let k = i + j * factor;\n                if dict.contains_key(&k) { None } else { Some(k) }\n            })\n            .next()\n            .unwrap();\n        dict.insert(key, factor);\n        if is_prime { Some(i) } else { None }\n    });\n    println!(\"{}\", iter.nth(1000_000 - 2).unwrap());\n}\n\n\nstep_by\u304c\u6b32\u3057\u304b\u3063\u305f\u3002\n\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u53c2\u7167\u3002\u3068\u308a\u3042\u3048\u305aRust\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\n- [C#\u3067\u300c\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u300d\u3067\u300c2.6\u79d2\u3067\u767e\u4e07\u500b\u300d\u306e\u7d20\u6570\u3092\u8a08\u7b97\u3067\u304d\u308b\u300c\u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u3092\u4f5c\u3063\u3066\u307f\u305f](https://tail-island.github.io/programming/2016/04/15/lazy-primes.html)\n- [Golang\u3067\u300c\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u300d\u3067\u300c2.1\u79d2\u3067\u767e\u4e07\u500b\u300d\u306e\u7d20\u6570\u3092\u8a08\u7b97\u3067\u304d\u308b\u300c\u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u3092\u4f5c\u3063\u3066\u307f\u305f](http://qiita.com/cia_rana/items/2a878181da41033ec1d8)\n\n```rust\n\nuse std::collections::HashMap;\n\nfn main() {\n    let mut dict = HashMap::new();\n    let mut iter = (1..).filter_map(|j| {\n        let i = 2 * j + 1;\n        let (factor, is_prime) = match dict.remove(&i) {\n            Some(f) => (f, false),\n            None => (i * 2, true),\n        };\n        let key = (1..)\n            .filter_map(|j| {\n                let k = i + j * factor;\n                if dict.contains_key(&k) { None } else { Some(k) }\n            })\n            .next()\n            .unwrap();\n        dict.insert(key, factor);\n        if is_prime { Some(i) } else { None }\n    });\n    println!(\"{}\", iter.nth(1000_000 - 2).unwrap());\n}\n\n```\n\n[step_by](https://github.com/rust-lang/rust/issues/27741)\u304c\u6b32\u3057\u304b\u3063\u305f\u3002\n", "tags": ["rust"]}