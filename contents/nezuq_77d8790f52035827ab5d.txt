{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nFacebook\u30b0\u30eb\u30fc\u30d7\u300e\u6771\u5927\u306e\u7d71\u8a08\u5b66\u6559\u79d1\u66f8\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u300f\u3067\u3001\n\u7d71\u8a08\u5b66\u5165\u9580\uff08\u901a\u79f0\uff1a\u8d64\u672c\uff09\u306e\u8aad\u307f\u9032\u3081\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u8d64\u672c\u306e\u7d71\u8a08\u51e6\u7406\u3092Julia\u3067\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u9023\u306d\u3066\u3044\u307e\u3059\u3002\n\n\u7d71\u8a08\u5b66\u5165\u9580\uff08\u901a\u79f0\uff1a\u8d64\u672c\uff09\u3068\u306f\uff1f\n\u300c\u6771\u4eac\u5927\u5b66\u6559\u990a\u5b66\u90e8\u7d71\u8a08\u5b66\u6559\u5ba4 \u7de8\u300d\u306e\u7d71\u8a08\u5b66\u5165\u9580\u66f8\u3067\u3059\u3002\u53e4\u5178\u3067\u3059\u3002\n\u53c2\u8003\uff1a\u7d71\u8a08\u5b66\u5165\u9580\n\nJulia\u3068\u306f\uff1f\n\u79d1\u5b66\u8a08\u7b97\u5411\u3051\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\u30dd\u30b9\u30c8R\u30fb\u30d9\u30bf\u30fcMATLAB\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\u53c2\u8003\uff1aJulia\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\n\n\u8abf\u67fb\u5bfe\u8c61\u306e\u7ae0\n\u7b2c3\u7ae0\u300c2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u300d\n\n\u30b3\u30fc\u30c9\n\nsec03.jl\nblood_mtrx = [35 114; 45 124; 55 143; 65 158; 75 166;]\n\n# [\u6563\u5e03\u56f3 scattergram]\nPkg.add(\"Gadfly\")\nusing Gadfly\nplot(x=blood_mtrx[:, 1], y=blood_mtrx[:, 2], Guide.XLabel(\"\u5e74\u9f62\"), Guide.YLabel(\"\u8840\u5727\"), Geom.point)\n\n# [\u5206\u5272\u8868 contigency table]\n## \u30ab\u30a6\u30f3\u30c8\ncount(x -> 150 < x, blood_mtrx[:, 2]) \n## \u5408\u8a08\nsum(blood_mtrx, 1) #\u7e26\u8a08\nsum(blood_mtrx, 2) #\u6a2a\u8a08\n\n# [\u5171\u5206\u6563 covariance]\ncov(blood_mtrx[:, 1], blood_mtrx[:, 2], corrected = false)\n  #sum([(blood_mtrx[i, 1] - mean(blood_mtrx[:, 1])) * (blood_mtrx[i, 2] - mean(blood_mtrx[:, 2])) for i = 1:size(blood_mtrx, 1)]) / size(blood_mtrx,1)\n\n# [\u30d4\u30a2\u30bd\u30f3\u306e\u7a4d\u7387\u76f8\u95a2\u4fc2\u6570 product-moment correlation coefficient]\ncor(blood_mtrx[:, 1], blood_mtrx[:, 2])\n  #sum([(blood_mtrx[i, 1] - mean(blood_mtrx[:, 1])) * (blood_mtrx[i, 2] - mean(blood_mtrx[:, 2])) for i = 1:size(blood_mtrx, 1)]) / size(blood_mtrx,1) / (sqrt(sum([(x - mean(blood_mtrx[:, 1]))  ^ 2 for x = blood_mtrx[:, 1]]) / size(blood_mtrx,1))  * sqrt(sum([(y - mean(blood_mtrx[:, 2]))  ^ 2 for y = blood_mtrx[:, 2]]) / size(blood_mtrx,1)))\n\n# [\u504f\u76f8\u95a2\u4fc2\u6570 partial correlation coefficient]\nPkg.add(\"RDatasets\")\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\npcor(x, y, z) = (cor(x, y) - (cor(x, z) * cor(y, z))) / (sqrt(1 - (cor(x, z) ^ 2)) * sqrt(1 - (cor(y, z) ^ 2)))\npcor(iris[:, :SepalLength], iris[:, :PetalWidth], iris[:, :PetalLength])\n\n# [\u4e26\u3073\u66ff\u3048 sort]\nsort(blood_mtrx[:, 2])\nblood_mtrx[:, 2][sortperm(blood_mtrx[:, 2])]\n\n# [\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570 rank correlation coefficient]\nPkg.add(\"DataFrames\")\nusing DataFrames\nflower_mtrx = [1 3; 2 1; 3 2; 4 5; 5 4; 6 7; 7 6; 8 8;]\n## \u30b9\u30d4\u30a2\u30de\u30f3 Spearman\nPkg.add(\"StatsBase\")\nusing StatsBase\ncorspearman(flower_mtrx[:, 1], flower_mtrx[:, 2])\n  #1 - ((6 / ((size(flower_mtrx, 1) ^ 3) - size(flower_mtrx, 1))) * sum([(flower_mtrx[i, 1] - flower_mtrx[i, 2]) ^ 2 for i = 1:size(flower_mtrx, 1)]))\n## \u30b1\u30f3\u30c9\u30fc\u30eb Kendall\nusing StatsBase\ncorkendall(flower_mtrx[:, 1], flower_mtrx[:, 2])\n#flower_mtrx |>\n#  x -> [(x[i, 1] < x[i + 1, 1]) == (x[i, 2] < x[i + 1, 2]) for i = 1:(size(x, 1) - 1)] |>\n#  x -> (countnz(x) + count(x1 -> !x1, x)) / (((length(x) + 1) * length(x)) / 2)\n\n# [\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8]\nusing RDatasets\narbuthnot = dataset(\"HistData\", \"Arbuthnot\")\nusing Gadfly\nplot(arbuthnot, x = :Year, y = :Mortality, Geom.line)\n# [\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 auto correlation coefficient]\nusing StatsBase\nautocor(arbuthnot[:, :Mortality], 1)\n#arbuthnot[:, :Mortality] |>\n#  ts -> sum([(ts[i] - mean(ts)) * (ts[i + 1] - mean(ts)) / (length(ts) - 1) for i = 1:(size(ts, 1) - 1)]) / sum([(x - mean(ts)) ^ 2 / length(ts) for x = ts])\n\n# [\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0 correlogram]\nusing Gadfly\nplot(x = 1:(size(arbuthnot, 1) - 1), y = [autocor(arbuthnot[:, :Mortality], i) for i = 1:(size(arbuthnot, 1) - 1)], Geom.line)\n\n# [\u7dda\u5f62\u56de\u5e30 liner regression]\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\nsepal_length = convert(Array{Float64,1}, iris[:, :SepalLength])\npetal_length = convert(Array{Float64,1}, iris[:, :PetalLength])\na, b = linreg(sepal_length, petal_length) #y = a + b * x\n\n# [\u7dda\u5f62\u56de\u5e30\u306e\u30d7\u30ed\u30c3\u30c8]\nplot(\n  layer(x=sepal_length, y=petal_length, Geom.point),\n  layer(x=ifloor(minimum(sepal_length)):iceil(maximum(sepal_length)), y=[a + b * x for x = ifloor(minimum(sepal_length)):iceil(maximum(sepal_length))], Geom.line)\n  )\n\n# [\u591a\u9805\u5f0f\u56de\u5e30 polynomial regression]\nPkg.add(\"GLM\")\nusing GLM\nusing RDatasets\nLifeCycleSavings = dataset(\"datasets\", \"LifeCycleSavings\")\nfm2 = fit(LinearModel, SR ~ Pop15 + Pop75 + DPI + DDPI, LifeCycleSavings)\n\n\n# [\u7df4\u7fd2\u554f\u984c]\n# 3.1 \u793e\u4f1a\u7d4c\u6e08\u6307\u6a19\u3068\u6295\u7968\u884c\u52d5\nvhrate_mtrx = {\n  41.4 52.8;\n  76.3 71.2;\n  59.2 72.6;\n  51.8 63.7;\n  52.5 81.3;\n  53.2 81.8;\n  62.4 70.9;\n  55.0 74.0;\n  57.7 73.2;\n  63.2 72.9;\n  37.5 66.7;\n  48.5 65.7;\n  32.4 43.7;\n  20.5 55.5;\n  47.9 79.6;\n  68.9 85.7;\n  68.5 75.3;\n  52.5 80.5;\n  63.3 73.0;\n  58.8 77.0;\n  59.7 77.5;\n  48.4 69.2;\n  40.7 60.0;\n  51.0 78.2;\n  50.9 79.5;\n  34.3 61.8;\n  25.8 49.6;\n  32.1 59.6;\n  34.4 72.1;\n  55.1 71.0;\n  60.3 76.3;\n  57.0 72.8;\n  45.6 71.8;\n  54.2 60.7;\n  55.1 67.0;\n  55.7 71.8;\n  70.3 71.2;\n  61.8 68.3;\n  47.6 68.5;\n  42.5 54.8;\n  71.3 76.0;\n  55.2 65.8;\n  65.2 69.4;\n  42.9 66.9;\n  54.7 69.7;\n  62.0 71.2;\n  48.2 59.6;\n  }\nplot(x = vhrate_mtrx[:, 1], y = vhrate_mtrx[:, 2], Guide.XLabel(\"\u81ea\u6c11\u5f97\u7968\u7387\"), Guide.YLabel(\"\u6301\u3061\u5bb6\u6bd4\u7387\"), Geom.point)\ncor(vhrate_mtrx[:, 1], vhrate_mtrx[:, 2])\n\n# 3.2 \u7d71\u8a08\u7684\u306a\u95a2\u9023\n# (\u7565)\n\n# 3.3 \u793e\u4f1a\u7684\u30ea\u30b9\u30af\u306e\u9806\u4f4d\u3065\u3051\nriskeval_mtrx = [\n  1 1 8 20;\n  2 5 3 1;\n  3 2 1 4;\n  4 3 4 2;\n  5 6 2 6;\n  6 7 5 3;\n  7 15 11 12;\n  8 8 7 17;\n  9 4 15 8;\n  10 11 9 5;\n  11 10 6 18;\n  12 14 13 13;\n  13 18 10 23;\n  14 13 22 26;\n  15 22 12 29;\n  16 24 14 15;\n  17 16 18 16;\n  18 19 19 9;\n  19 30 17 10;\n  20 9 22 11;\n  21 25 16 30;\n  22 17 24 7;\n  23 26 21 27;\n  24 23 20 19;\n  25 12 28 14;\n  26 20 30 21;\n  27 28 25 28;\n  28 21 26 24;\n  29 27 27 22;\n  30 29 29 25;\n  ]\n## \u30b9\u30d4\u30a2\u30de\u30f3 Spearman\nusing StatsBase\ncorspearman(riskeval_mtrx[:, 1], riskeval_mtrx[:, 2])\n## \u30b1\u30f3\u30c9\u30fc\u30eb Kendall\nusing StatsBase\ncorkendall(riskeval_mtrx[:, 1], riskeval_mtrx[:, 2])\n\n## 3.4 \u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\n# \u2170)\niceil(rand()*11)\n## \u2171)\nheight_mtrx = [\n  71 69;\n  68 64;\n  66 65;\n  67 63;\n  70 65;\n  71 62;\n  70 65;\n  73 64;\n  72 66;\n  65 59;\n  66 62;\n  ]\nbootstrap(mtrx, cnt) =\n  reduce(vcat, [mtrx[iceil(rand()*11), :] for i = 1:cnt]) |>\n  boot_mtrx -> cor(boot_mtrx[:, 1], boot_mtrx[:, 2])\nbootstrap(height_mtrx, 11)\n## \u2172)\nplot(x=[bootstrap(height_mtrx, i) for i = 1:200], Geom.histogram)\n\n\n\n\n\u611f\u60f3\nGLM.jl\u306efit\u95a2\u6570\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002\nGithub\u306eReadme.md\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\nv0.3.0\u306b\u4f34\u3046\u8a00\u8a9e\u306e\u4ed5\u69d8\u5909\u66f4\u304c\u539f\u56e0\u3060\u3068\u601d\u3048\u308b\u3002\nv1.0.0\u304c\u5f85\u305f\u308c\u308b\u3002\n[2014/9/12]\nGlm.jl\u3092v0.4.2\u306b\u66f4\u65b0\u3057\u305f\u6240\u3001fit\u95a2\u6570\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3089\u306a\u304f\u306a\u3063\u305f\u3002\n#\u306f\u3058\u3081\u306b\n[Facebook\u30b0\u30eb\u30fc\u30d7\u300e\u6771\u5927\u306e\u7d71\u8a08\u5b66\u6559\u79d1\u66f8\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u300f](https://t.co/rKKbPbEIjt)\u3067\u3001\n[\u7d71\u8a08\u5b66\u5165\u9580\uff08\u901a\u79f0\uff1a\u8d64\u672c\uff09](http://www.amazon.co.jp/%E7%B5%B1%E8%A8%88%E5%AD%A6%E5%85%A5%E9%96%80-%E5%9F%BA%E7%A4%8E%E7%B5%B1%E8%A8%88%E5%AD%A6-%E6%9D%B1%E4%BA%AC%E5%A4%A7%E5%AD%A6%E6%95%99%E9%A4%8A%E5%AD%A6%E9%83%A8%E7%B5%B1%E8%A8%88%E5%AD%A6%E6%95%99%E5%AE%A4/dp/4130420658)\u306e\u8aad\u307f\u9032\u3081\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u8d64\u672c\u306e\u7d71\u8a08\u51e6\u7406\u3092Julia\u3067\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u9023\u306d\u3066\u3044\u307e\u3059\u3002\n\n#\u7d71\u8a08\u5b66\u5165\u9580\uff08\u901a\u79f0\uff1a\u8d64\u672c\uff09\u3068\u306f\uff1f\n\u300c\u6771\u4eac\u5927\u5b66\u6559\u990a\u5b66\u90e8\u7d71\u8a08\u5b66\u6559\u5ba4 \u7de8\u300d\u306e\u7d71\u8a08\u5b66\u5165\u9580\u66f8\u3067\u3059\u3002\u53e4\u5178\u3067\u3059\u3002\n[\u53c2\u8003\uff1a\u7d71\u8a08\u5b66\u5165\u9580](http://www.qmss.jp/qmss/related/stat02.htm)\n\n#Julia\u3068\u306f\uff1f\n\u79d1\u5b66\u8a08\u7b97\u5411\u3051\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\u30dd\u30b9\u30c8R\u30fb\u30d9\u30bf\u30fcMATLAB\u3068\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n[\u53c2\u8003\uff1aJulia\u306e\u516c\u5f0f\u30b5\u30a4\u30c8](http://julialang.org/)\n\n#\u8abf\u67fb\u5bfe\u8c61\u306e\u7ae0\n\u7b2c3\u7ae0\u300c2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u300d\n\n#\u30b3\u30fc\u30c9\n\n```jl:sec03.jl\nblood_mtrx = [35 114; 45 124; 55 143; 65 158; 75 166;]\n\n# [\u6563\u5e03\u56f3 scattergram]\nPkg.add(\"Gadfly\")\nusing Gadfly\nplot(x=blood_mtrx[:, 1], y=blood_mtrx[:, 2], Guide.XLabel(\"\u5e74\u9f62\"), Guide.YLabel(\"\u8840\u5727\"), Geom.point)\n\n# [\u5206\u5272\u8868 contigency table]\n## \u30ab\u30a6\u30f3\u30c8\ncount(x -> 150 < x, blood_mtrx[:, 2]) \n## \u5408\u8a08\nsum(blood_mtrx, 1) #\u7e26\u8a08\nsum(blood_mtrx, 2) #\u6a2a\u8a08\n\n# [\u5171\u5206\u6563 covariance]\ncov(blood_mtrx[:, 1], blood_mtrx[:, 2], corrected = false)\n  #sum([(blood_mtrx[i, 1] - mean(blood_mtrx[:, 1])) * (blood_mtrx[i, 2] - mean(blood_mtrx[:, 2])) for i = 1:size(blood_mtrx, 1)]) / size(blood_mtrx,1)\n\n# [\u30d4\u30a2\u30bd\u30f3\u306e\u7a4d\u7387\u76f8\u95a2\u4fc2\u6570 product-moment correlation coefficient]\ncor(blood_mtrx[:, 1], blood_mtrx[:, 2])\n  #sum([(blood_mtrx[i, 1] - mean(blood_mtrx[:, 1])) * (blood_mtrx[i, 2] - mean(blood_mtrx[:, 2])) for i = 1:size(blood_mtrx, 1)]) / size(blood_mtrx,1) / (sqrt(sum([(x - mean(blood_mtrx[:, 1]))  ^ 2 for x = blood_mtrx[:, 1]]) / size(blood_mtrx,1))  * sqrt(sum([(y - mean(blood_mtrx[:, 2]))  ^ 2 for y = blood_mtrx[:, 2]]) / size(blood_mtrx,1)))\n\n# [\u504f\u76f8\u95a2\u4fc2\u6570 partial correlation coefficient]\nPkg.add(\"RDatasets\")\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\npcor(x, y, z) = (cor(x, y) - (cor(x, z) * cor(y, z))) / (sqrt(1 - (cor(x, z) ^ 2)) * sqrt(1 - (cor(y, z) ^ 2)))\npcor(iris[:, :SepalLength], iris[:, :PetalWidth], iris[:, :PetalLength])\n\n# [\u4e26\u3073\u66ff\u3048 sort]\nsort(blood_mtrx[:, 2])\nblood_mtrx[:, 2][sortperm(blood_mtrx[:, 2])]\n\n# [\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570 rank correlation coefficient]\nPkg.add(\"DataFrames\")\nusing DataFrames\nflower_mtrx = [1 3; 2 1; 3 2; 4 5; 5 4; 6 7; 7 6; 8 8;]\n## \u30b9\u30d4\u30a2\u30de\u30f3 Spearman\nPkg.add(\"StatsBase\")\nusing StatsBase\ncorspearman(flower_mtrx[:, 1], flower_mtrx[:, 2])\n  #1 - ((6 / ((size(flower_mtrx, 1) ^ 3) - size(flower_mtrx, 1))) * sum([(flower_mtrx[i, 1] - flower_mtrx[i, 2]) ^ 2 for i = 1:size(flower_mtrx, 1)]))\n## \u30b1\u30f3\u30c9\u30fc\u30eb Kendall\nusing StatsBase\ncorkendall(flower_mtrx[:, 1], flower_mtrx[:, 2])\n#flower_mtrx |>\n#  x -> [(x[i, 1] < x[i + 1, 1]) == (x[i, 2] < x[i + 1, 2]) for i = 1:(size(x, 1) - 1)] |>\n#  x -> (countnz(x) + count(x1 -> !x1, x)) / (((length(x) + 1) * length(x)) / 2)\n\n# [\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8]\nusing RDatasets\narbuthnot = dataset(\"HistData\", \"Arbuthnot\")\nusing Gadfly\nplot(arbuthnot, x = :Year, y = :Mortality, Geom.line)\n# [\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 auto correlation coefficient]\nusing StatsBase\nautocor(arbuthnot[:, :Mortality], 1)\n#arbuthnot[:, :Mortality] |>\n#  ts -> sum([(ts[i] - mean(ts)) * (ts[i + 1] - mean(ts)) / (length(ts) - 1) for i = 1:(size(ts, 1) - 1)]) / sum([(x - mean(ts)) ^ 2 / length(ts) for x = ts])\n\n# [\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0 correlogram]\nusing Gadfly\nplot(x = 1:(size(arbuthnot, 1) - 1), y = [autocor(arbuthnot[:, :Mortality], i) for i = 1:(size(arbuthnot, 1) - 1)], Geom.line)\n\n# [\u7dda\u5f62\u56de\u5e30 liner regression]\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\nsepal_length = convert(Array{Float64,1}, iris[:, :SepalLength])\npetal_length = convert(Array{Float64,1}, iris[:, :PetalLength])\na, b = linreg(sepal_length, petal_length) #y = a + b * x\n\n# [\u7dda\u5f62\u56de\u5e30\u306e\u30d7\u30ed\u30c3\u30c8]\nplot(\n  layer(x=sepal_length, y=petal_length, Geom.point),\n  layer(x=ifloor(minimum(sepal_length)):iceil(maximum(sepal_length)), y=[a + b * x for x = ifloor(minimum(sepal_length)):iceil(maximum(sepal_length))], Geom.line)\n  )\n\n# [\u591a\u9805\u5f0f\u56de\u5e30 polynomial regression]\nPkg.add(\"GLM\")\nusing GLM\nusing RDatasets\nLifeCycleSavings = dataset(\"datasets\", \"LifeCycleSavings\")\nfm2 = fit(LinearModel, SR ~ Pop15 + Pop75 + DPI + DDPI, LifeCycleSavings)\n\n\n# [\u7df4\u7fd2\u554f\u984c]\n# 3.1 \u793e\u4f1a\u7d4c\u6e08\u6307\u6a19\u3068\u6295\u7968\u884c\u52d5\nvhrate_mtrx = {\n  41.4 52.8;\n  76.3 71.2;\n  59.2 72.6;\n  51.8 63.7;\n  52.5 81.3;\n  53.2 81.8;\n  62.4 70.9;\n  55.0 74.0;\n  57.7 73.2;\n  63.2 72.9;\n  37.5 66.7;\n  48.5 65.7;\n  32.4 43.7;\n  20.5 55.5;\n  47.9 79.6;\n  68.9 85.7;\n  68.5 75.3;\n  52.5 80.5;\n  63.3 73.0;\n  58.8 77.0;\n  59.7 77.5;\n  48.4 69.2;\n  40.7 60.0;\n  51.0 78.2;\n  50.9 79.5;\n  34.3 61.8;\n  25.8 49.6;\n  32.1 59.6;\n  34.4 72.1;\n  55.1 71.0;\n  60.3 76.3;\n  57.0 72.8;\n  45.6 71.8;\n  54.2 60.7;\n  55.1 67.0;\n  55.7 71.8;\n  70.3 71.2;\n  61.8 68.3;\n  47.6 68.5;\n  42.5 54.8;\n  71.3 76.0;\n  55.2 65.8;\n  65.2 69.4;\n  42.9 66.9;\n  54.7 69.7;\n  62.0 71.2;\n  48.2 59.6;\n  }\nplot(x = vhrate_mtrx[:, 1], y = vhrate_mtrx[:, 2], Guide.XLabel(\"\u81ea\u6c11\u5f97\u7968\u7387\"), Guide.YLabel(\"\u6301\u3061\u5bb6\u6bd4\u7387\"), Geom.point)\ncor(vhrate_mtrx[:, 1], vhrate_mtrx[:, 2])\n\n# 3.2 \u7d71\u8a08\u7684\u306a\u95a2\u9023\n# (\u7565)\n\n# 3.3 \u793e\u4f1a\u7684\u30ea\u30b9\u30af\u306e\u9806\u4f4d\u3065\u3051\nriskeval_mtrx = [\n  1 1 8 20;\n  2 5 3 1;\n  3 2 1 4;\n  4 3 4 2;\n  5 6 2 6;\n  6 7 5 3;\n  7 15 11 12;\n  8 8 7 17;\n  9 4 15 8;\n  10 11 9 5;\n  11 10 6 18;\n  12 14 13 13;\n  13 18 10 23;\n  14 13 22 26;\n  15 22 12 29;\n  16 24 14 15;\n  17 16 18 16;\n  18 19 19 9;\n  19 30 17 10;\n  20 9 22 11;\n  21 25 16 30;\n  22 17 24 7;\n  23 26 21 27;\n  24 23 20 19;\n  25 12 28 14;\n  26 20 30 21;\n  27 28 25 28;\n  28 21 26 24;\n  29 27 27 22;\n  30 29 29 25;\n  ]\n## \u30b9\u30d4\u30a2\u30de\u30f3 Spearman\nusing StatsBase\ncorspearman(riskeval_mtrx[:, 1], riskeval_mtrx[:, 2])\n## \u30b1\u30f3\u30c9\u30fc\u30eb Kendall\nusing StatsBase\ncorkendall(riskeval_mtrx[:, 1], riskeval_mtrx[:, 2])\n\n## 3.4 \u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\n# \u2170)\niceil(rand()*11)\n## \u2171)\nheight_mtrx = [\n  71 69;\n  68 64;\n  66 65;\n  67 63;\n  70 65;\n  71 62;\n  70 65;\n  73 64;\n  72 66;\n  65 59;\n  66 62;\n  ]\nbootstrap(mtrx, cnt) =\n  reduce(vcat, [mtrx[iceil(rand()*11), :] for i = 1:cnt]) |>\n  boot_mtrx -> cor(boot_mtrx[:, 1], boot_mtrx[:, 2])\nbootstrap(height_mtrx, 11)\n## \u2172)\nplot(x=[bootstrap(height_mtrx, i) for i = 1:200], Geom.histogram)\n\n```\n\n#\u611f\u60f3\n~~GLM.jl\u306efit\u95a2\u6570\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002~~\n~~Github\u306eReadme.md\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001~~\n~~v0.3.0\u306b\u4f34\u3046\u8a00\u8a9e\u306e\u4ed5\u69d8\u5909\u66f4\u304c\u539f\u56e0\u3060\u3068\u601d\u3048\u308b\u3002~~\n~~v1.0.0\u304c\u5f85\u305f\u308c\u308b\u3002~~\n[2014/9/12]\nGlm.jl\u3092v0.4.2\u306b\u66f4\u65b0\u3057\u305f\u6240\u3001fit\u95a2\u6570\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3089\u306a\u304f\u306a\u3063\u305f\u3002\n", "tags": ["Julia0.3.0", "\u7d71\u8a08\u5b66", "\u7d71\u8a08\u5b66\u5165\u9580"]}