{"context": " More than 1 year has passed since last update.Selenium-IDE\u3067\u5b8c\u5168\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u305f\u3081\u306b\u3001JavaScript\u306bmb_strwidth\u3068mb_strimwidth\u3092\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\u305d\u306e\u969b\u306bPHP\u306emb_strimwidth\u3067\u7a7a\u6587\u5b57\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u4e8b\u3092\u767a\u898b\u3057\u305f\u305f\u3081\u3001\u4f75\u305b\u3066\u8a18\u8f09\u3059\u308b\u3002\n\n\u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\nPHP 5.6.15\n\n\u79fb\u690d\u3057\u305f\u30b3\u30fc\u30c9\n\nfromChatCodeExt\uff08\u79fb\u690d\u30b3\u30fc\u30c9\u3067\u306f\u306a\u3044\u304c\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6587\u5b57\u5217\u5316\u306b\u5fc5\u8981\uff09\n\nfromChatCodeExt\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     code_point  UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction fromChatCodeExt (code_point) {\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7121\u3057\u306e\u6587\u5b57\u306e\u5834\u5408\n    if (code_point < 0x10000) {\n        //\u7d20\u76f4\u306b\u51e6\u7406\u3057\u3066\u8fd4\u3059\n        return String.fromCharCode(code_point);\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u4ed8\u306e\u6587\u5b57\u306e\u5834\u5408\n    code_point -= 0x10000;\n    return String.fromCharCode(0xD800 + (code_point >> 10), 0xDC00 + (code_point & 0x3FF));\n}\n\n\n\nmb_strwidth\n\nmb_strwidth\n/**\n * \u6587\u5b57\u5217\u306e\u5e45\u3092\u8fd4\u3059\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str \u5e45\u3092\u6e2c\u308a\u305f\u3044\u6587\u5b57\u5217\n * @return  int     \u6587\u5b57\u5217\u5e45\n */\nfunction mb_strwidth (str) {\n    var i = 0;\n    var str_width = 0;\n    var next_char_code = 0;\n    var char_code = 0;\n\n    //\u4e00\u6587\u5b57\u305a\u3064\u51e6\u7406\n    while (!Number.isNaN((char_code = str.charCodeAt(i++)))) {\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= char_code && char_code <= 0xDBFF) {\n            next_char_code = str.charCodeAt(i);\n            char_code = ((char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n            i++;\n        }\n\n        if (0x0 <= char_code && char_code <= 0x10FF) {\n            str_width += 1;\n        } else if (0x1100 <= char_code && char_code <= 0x115F) {\n            str_width += 2;\n        } else if (0x1160 <= char_code && char_code <= 0x11A2) {\n            str_width += 1;\n        } else if (0x11A3 <= char_code && char_code <= 0x11A7) {\n            str_width += 2;\n        } else if (0x11A8 <= char_code && char_code <= 0x11F9) {\n            str_width += 1;\n        } else if (0x11FA <= char_code && char_code <= 0x11FF) {\n            str_width += 2;\n        } else if (0x1200 <= char_code && char_code <= 0x2328) {\n            str_width += 1;\n        } else if (0x2329 <= char_code && char_code <= 0x232A) {\n            str_width += 2;\n        } else if (0x232B <= char_code && char_code <= 0x2E7F) {\n            str_width += 1;\n        } else if (0x2E80 <= char_code && char_code <= 0x2E99) {\n            str_width += 2;\n        } else if (0x2E9A <= char_code && char_code <= 0x2E9A) {\n            str_width += 1;\n        } else if (0x2E9B <= char_code && char_code <= 0x2EF3) {\n            str_width += 2;\n        } else if (0x2EF4 <= char_code && char_code <= 0x2EFF) {\n            str_width += 1;\n        } else if (0x2F00 <= char_code && char_code <= 0x2FD5) {\n            str_width += 2;\n        } else if (0x2FD6 <= char_code && char_code <= 0x2FEF) {\n            str_width += 1;\n        } else if (0x2FF0 <= char_code && char_code <= 0x2FFB) {\n            str_width += 2;\n        } else if (0x2FFC <= char_code && char_code <= 0x2FFF) {\n            str_width += 1;\n        } else if (0x3000 <= char_code && char_code <= 0x303E) {\n            str_width += 2;\n        } else if (0x303F <= char_code && char_code <= 0x3040) {\n            str_width += 1;\n        } else if (0x3041 <= char_code && char_code <= 0x3096) {\n            str_width += 2;\n        } else if (0x3097 <= char_code && char_code <= 0x3098) {\n            str_width += 1;\n        } else if (0x3099 <= char_code && char_code <= 0x30FF) {\n            str_width += 2;\n        } else if (0x3100 <= char_code && char_code <= 0x3104) {\n            str_width += 1;\n        } else if (0x3105 <= char_code && char_code <= 0x312D) {\n            str_width += 2;\n        } else if (0x312E <= char_code && char_code <= 0x3130) {\n            str_width += 1;\n        } else if (0x3131 <= char_code && char_code <= 0x318E) {\n            str_width += 2;\n        } else if (0x318F <= char_code && char_code <= 0x318F) {\n            str_width += 1;\n        } else if (0x3190 <= char_code && char_code <= 0x31BA) {\n            str_width += 2;\n        } else if (0x31BB <= char_code && char_code <= 0x31BF) {\n            str_width += 1;\n        } else if (0x31C0 <= char_code && char_code <= 0x31E3) {\n            str_width += 2;\n        } else if (0x31E4 <= char_code && char_code <= 0x31EF) {\n            str_width += 1;\n        } else if (0x31F0 <= char_code && char_code <= 0x321E) {\n            str_width += 2;\n        } else if (0x321F <= char_code && char_code <= 0x321F) {\n            str_width += 1;\n        } else if (0x3220 <= char_code && char_code <= 0x3247) {\n            str_width += 2;\n        } else if (0x3248 <= char_code && char_code <= 0x324F) {\n            str_width += 1;\n        } else if (0x3250 <= char_code && char_code <= 0x32FE) {\n            str_width += 2;\n        } else if (0x32FF <= char_code && char_code <= 0x32FF) {\n            str_width += 1;\n        } else if (0x3300 <= char_code && char_code <= 0x4DBF) {\n            str_width += 2;\n        } else if (0x4DC0 <= char_code && char_code <= 0x4DFF) {\n            str_width += 1;\n        } else if (0x4E00 <= char_code && char_code <= 0xA48C) {\n            str_width += 2;\n        } else if (0xA48D <= char_code && char_code <= 0xA48F) {\n            str_width += 1;\n        } else if (0xA490 <= char_code && char_code <= 0xA4C6) {\n            str_width += 2;\n        } else if (0xA4C7 <= char_code && char_code <= 0xA95F) {\n            str_width += 1;\n        } else if (0xA960 <= char_code && char_code <= 0xA97C) {\n            str_width += 2;\n        } else if (0xA97D <= char_code && char_code <= 0xABFF) {\n            str_width += 1;\n        } else if (0xAC00 <= char_code && char_code <= 0xD7A3) {\n            str_width += 2;\n        } else if (0xD7A4 <= char_code && char_code <= 0xD7AF) {\n            str_width += 1;\n        } else if (0xD7B0 <= char_code && char_code <= 0xD7C6) {\n            str_width += 2;\n        } else if (0xD7C7 <= char_code && char_code <= 0xD7CA) {\n            str_width += 1;\n        } else if (0xD7CB <= char_code && char_code <= 0xD7FB) {\n            str_width += 2;\n        } else if (0xD7FC <= char_code && char_code <= 0xF8FF) {\n            str_width += 1;\n        } else if (0xF900 <= char_code && char_code <= 0xFAFF) {\n            str_width += 2;\n        } else if (0xFB00 <= char_code && char_code <= 0xFE0F) {\n            str_width += 1;\n        } else if (0xFE10 <= char_code && char_code <= 0xFE19) {\n            str_width += 2;\n        } else if (0xFE1A <= char_code && char_code <= 0xFE2F) {\n            str_width += 1;\n        } else if (0xFE30 <= char_code && char_code <= 0xFE52) {\n            str_width += 2;\n        } else if (0xFE53 <= char_code && char_code <= 0xFE53) {\n            str_width += 1;\n        } else if (0xFE54 <= char_code && char_code <= 0xFE66) {\n            str_width += 2;\n        } else if (0xFE67 <= char_code && char_code <= 0xFE67) {\n            str_width += 1;\n        } else if (0xFE68 <= char_code && char_code <= 0xFE6B) {\n            str_width += 2;\n        } else if (0xFE6C <= char_code && char_code <= 0xFF00) {\n            str_width += 1;\n        } else if (0xFF01 <= char_code && char_code <= 0xFF60) {\n            str_width += 2;\n        } else if (0xFF61 <= char_code && char_code <= 0xFFDF) {\n            str_width += 1;\n        } else if (0xFFE0 <= char_code && char_code <= 0xFFE6) {\n            str_width += 2;\n        } else if (0xFFE7 <= char_code && char_code <= 0x1AFFF) {\n            str_width += 1;\n        } else if (0x1B000 <= char_code && char_code <= 0x1B001) {\n            str_width += 2;\n        } else if (0x1B002 <= char_code && char_code <= 0x1F1FF) {\n            str_width += 1;\n        } else if (0x1F200 <= char_code && char_code <= 0x1F202) {\n            str_width += 2;\n        } else if (0x1F203 <= char_code && char_code <= 0x1F20F) {\n            str_width += 1;\n        } else if (0x1F210 <= char_code && char_code <= 0x1F23A) {\n            str_width += 2;\n        } else if (0x1F23B <= char_code && char_code <= 0x1F23F) {\n            str_width += 1;\n        } else if (0x1F240 <= char_code && char_code <= 0x1F248) {\n            str_width += 2;\n        } else if (0x1F249 <= char_code && char_code <= 0x1F24F) {\n            str_width += 1;\n        } else if (0x1F250 <= char_code && char_code <= 0x1F251) {\n            str_width += 2;\n        } else if (0x1F252 <= char_code && char_code <= 0x1FFFF) {\n            str_width += 1;\n        } else if (0x20000 <= char_code && char_code <= 0x2FFFD) {\n            str_width += 2;\n        } else if (0x2FFFE <= char_code && char_code <= 0x2FFFF) {\n            str_width += 1;\n        } else if (0x30000 <= char_code && char_code <= 0x3FFFD) {\n            str_width += 2;\n        } else if (0x3FFFE <= char_code && char_code <= 0x10FFFF) {\n            str_width += 1;\n        }\n    }\n\n    return str_width;\n}\n\n\n\nmb_strimwidth\n\nmb_strimwidth\n/**\n * \u6307\u5b9a\u3057\u305f\u5e45\u3067\u6587\u5b57\u5217\u3092\u4e38\u3081\u308b\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strimwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str         \u4e38\u3081\u305f\u3044\u6587\u5b57\u5217\n * @param   int     start       \u958b\u59cb\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3002\u6587\u5b57\u5217\u306e\u59cb\u3081\u304b\u3089\u306e\u6587\u5b57\u6570 (\u6700\u521d\u306e\u6587\u5b57\u306f 0) \u3067\u3059\n * @param   int     width       \u4e38\u3081\u308b\u5e45\n * @param   string  trimmarker  \u4e38\u3081\u305f\u5f8c\u306b\u305d\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u308b\u6587\u5b57\u5217\n * @return  string  \u4e38\u3081\u3089\u308c\u305f\u6587\u5b57\u5217\n */\nfunction mb_strimwidth (str, start, width, trimmarker) {\n    //============================================\n    // \u521d\u671f\u5316\n    //============================================\n    //\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u521d\u671f\u5316\n    if (trimmarker == null) {\n        trimmarker = '';\n    }\n\n    var trimmarker_width = mb_strwidth(trimmarker);\n\n    var stacker             = []\n    var total_width         = 0;\n\n    var current_char        = '';\n    var current_char_code   = 0;\n    var current_width       = 0;\n\n    var next_char           = '';\n    var next_char_code      = 0;\n    var next_width          = 0;\n\n    //============================================\n    // mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n    //============================================\n    // \u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n    // \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n    // \u30fb\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n    // \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08illegal_range_list\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n    //\n    // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u305d\u308c\u306e\u81ea\u52d5\u691c\u77e5\u7528\u306e\u72b6\u614b\u3001\u5024\u3092\u5b9a\u7fa9\u3059\u308b\n    //============================================\n\n    //\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304b\u3089\u4f8b\u5916\u5bfe\u5fdc\u6709\u7121\u3092\u5224\u5b9a\n    var irregular_caution       = (str.charCodeAt(0) < 0x21 || 0x7E < str.charCodeAt(0)) && trimmarker == '' && width == 1;\n\n    //\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u3068\u306a\u308b\u6587\u5b57\u5217\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\n    //2\u6b21\u5143\u76ee\u306e\u914d\u5217\u306e\u7b2c\u4e00\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u59cb\u70b9\u3001\u7b2c\u4e8c\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7d42\u70b9\n    //\u4f8b\uff09[0x1100, 0x115F]\u306e\u5834\u5408\n    // 0x1100 <= code_point && code_point <= 0x115F \u304c\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3068\u306a\u308b\n    var illegal_range_list  = [\n        [0x1100, 0x115F],\n        [0x11A3, 0x11A7],\n        [0x11FA, 0x11FF],\n        [0x2329, 0x2329],\n        [0x232A, 0x232A],\n        [0x2E80, 0x2E99],\n        [0x2E9B, 0x2EF3],\n        [0x2F00, 0x2FD5],\n        [0x2FF0, 0x2FFB],\n        [0x3000, 0x303E],\n        [0x3041, 0x3096],\n        [0x3099, 0x30FF],\n        [0x3105, 0x312D],\n        [0x3131, 0x318E],\n        [0x3190, 0x31BA],\n        [0x31C0, 0x31E3],\n        [0x31F0, 0x321E],\n        [0x3220, 0x3247],\n        [0x3250, 0x32FE],\n        [0x3300, 0x4DBF],\n        [0x4E00, 0xA48C],\n        [0xA490, 0xA4C6],\n        [0xA960, 0xA97C],\n        [0xAC00, 0xD7A3],\n        [0xD7B0, 0xD7C6],\n        [0xD7CB, 0xD7FB],\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7bc4\u56f2\u3082\u5bfe\u8c61\u3068\u306a\u308b\u304c\u3001\u5358\u4f53\u3067\u6e21\u3059\u4e8b\u81ea\u4f53\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u4ed5\u69d8\u3068\u3057\u3066\u306f\u53d6\u308a\u8fbc\u307e\u306a\u3044\n        [0xF900, 0xFAFF],\n        [0xFE10, 0xFE19],\n        [0xFE30, 0xFE52],\n        [0xFE54, 0xFE66],\n        [0xFE68, 0xFE6B],\n        [0xFF01, 0xFF60],\n        [0xFFE0, 0xFFE6],\n        [0x1B000, 0x1B001],\n        [0x1F200, 0x1F202],\n        [0x1F210, 0x1F23A],\n        [0x1F240, 0x1F248],\n        [0x1F250, 0x1F251],\n        [0x20000, 0x2FFFD],\n        [0x30000, 0x3FFFD]\n    ];\n    var illegal_range_length = illegal_range_list.length;\n\n    /**\n     * \u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u304b\u3069\u3046\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002\n     *\n     * @param   int     char_code   \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n     * @return  bool    \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u306e\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\n     */\n    var irregular_pattern           = function (char_code) {\n        for (var i = 0; i < illegal_range_length;i++) {\n            if (illegal_range_list[i][0] <= char_code && char_code <= illegal_range_list[i][1]) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    //============================================\n    // \u5b9f\u51e6\u7406\n    //============================================\n    for (var i = start, length = start + width;i < length;i++) {\n        current_char_code   = str.charCodeAt(i);\n        next_char_code      = str.charCodeAt(1 + i);\n\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= current_char_code && current_char_code <= 0xDBFF) {\n            current_char_code = ((current_char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n            i++;\n            next_char_code = str.charCodeAt(i + 1);\n        }\n\n        //\u6b21\u306e\u6587\u5b57\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= next_char_code && next_char_code <= 0xDBFF) {\n            i++;\n            next_char_code = ((next_char_code - 0xD800) * 0x400) + (str.charCodeAt(i + 1) - 0xDC00) + 0x10000;\n        }\n\n        //mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n        if (irregular_caution) {\n            if (irregular_pattern(current_char_code)) {\n                return '';\n            }\n            if (irregular_pattern(next_char_code)) {\n                return '';\n            }\n        }\n\n        if (Number.isNaN(current_char_code)) {\n            break;\n        }\n\n        current_char = fromChatCodeExt(current_char_code);\n        next_char = Number.isNaN(next_char_code) ? '' : fromChatCodeExt(next_char_code);\n\n        current_width       = mb_strwidth(current_char);\n        next_width          = mb_strwidth(next_char);\n\n        if (width < total_width + next_width + trimmarker_width) {\n            stacker.push(trimmarker);\n            break;\n        }\n\n        total_width         += current_width;\n        stacker.push(current_char);\n\n        if (width <= total_width) {\n            break;\n        }\n    }\n\n    return stacker.join('');\n}\n\n\n\n\u7d50\u8ad6\nmb_strimwidth\u3067\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u9664\u304d\u300140\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3067\u7a7a\u6587\u5b57\u304c\u8fd4\u308b\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u6761\u4ef6\n\u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n- \u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n- \u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n- \u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08[\u5bfe\u8c61\u7bc4\u56f2]\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n\n\u5bfe\u8c61\u7bc4\u56f2\n\n\n\ncode point\n\n\n\n\nU+1100 - U+115F\n\n\nU+11A3 - U+11A7\n\n\nU+11FA - U+11FF\n\n\nU+2329 - U+2329\n\n\nU+232A - U+232A\n\n\nU+2E80 - U+2E99\n\n\nU+2E9B - U+2EF3\n\n\nU+2F00 - U+2FD5\n\n\nU+2FF0 - U+2FFB\n\n\nU+3000 - U+303E\n\n\nU+3041 - U+3096\n\n\nU+3099 - U+30FF\n\n\nU+3105 - U+312D\n\n\nU+3131 - U+318E\n\n\nU+3190 - U+31BA\n\n\nU+31C0 - U+31E3\n\n\nU+31F0 - U+321E\n\n\nU+3220 - U+3247\n\n\nU+3250 - U+32FE\n\n\nU+3300 - U+4DBF\n\n\nU+4E00 - U+A48C\n\n\nU+A490 - U+A4C6\n\n\nU+A960 - U+A97C\n\n\nU+AC00 - U+D7A3\n\n\nU+D7B0 - U+D7C6\n\n\nU+D7CB - U+D7FB\n\n\nU+F900 - U+FAFF\n\n\nU+FE10 - U+FE19\n\n\nU+FE30 - U+FE52\n\n\nU+FE54 - U+FE66\n\n\nU+FE68 - U+FE6B\n\n\nU+FF01 - U+FF60\n\n\nU+FFE0 - U+FFE6\n\n\nU+1B000 - U+1B001\n\n\nU+1F200 - U+1F202\n\n\nU+1F210 - U+1F23A\n\n\nU+1F240 - U+1F248\n\n\nU+1F250 - U+1F251\n\n\nU+20000 - U+2FFFD\n\n\nU+30000 - U+3FFFD\n\n\n\n\n\u691c\u8a3c\n\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u7a7a\u30c6\u30fc\u30d6\u30eb\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3002\n\uff01\uff01\u6ce8\u610f\uff01\uff01\n- \u30d6\u30e9\u30a6\u30b6\u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n- \u691c\u8a3c\u5bfe\u8c61\u6587\u5b57\u6570\u304c1,114,111\u6587\u5b57\u3042\u308b\u305f\u3081\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\n- \u691c\u8a3c\u51e6\u7406\u306fJavaScript\u3067\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u72b6\u6cc1\u306b\u3088\u308a\u30d6\u30e9\u30a6\u30b6\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\n- 543\u56de\u30da\u30fc\u30b8\u306e\u81ea\u52d5\u9077\u79fb\u304c\u884c\u308f\u308c\u307e\u3059\n<?php\n//============================================\n// \u521d\u671f\u5316\n//============================================\n//\u691c\u8a3c\u7bc4\u56f2\u6700\u5927\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n$max = hexdec('0x10FFFF');\n\n//1\u63cf\u753b\u5f53\u305f\u308a\u306e\u691c\u8a3c\u4ef6\u6570\n$range = 2048;\n\n//\u73fe\u5728\u306e\u30da\u30fc\u30b8\u306e\u7b97\u51fa\n$page = isset($_GET['page']) ? $_GET['page'] - 1 : 0;\n\n//\u4eca\u56de\u63cf\u753b\u7bc4\u56f2\u306e\u78ba\u5b9a\n$start = $range * $page;\n$end = $range + $start;\n\n//\u30b9\u30bf\u30c3\u30ab\u306e\u521d\u671f\u5316\n$stacker = [];\n\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     $code_point UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction int2utf8($code_point) {\n    //UTF-16\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5185\u5224\u5b9a\n    if ($code_point < 0) {\n        throw new \\Exception(sprintf('%1$s is out of range UTF-16 code point (0x000000 - 0x10FFFF)', $code_point));\n    }\n    if (0x10FFFF < $code_point) {\n        throw new \\Exception(sprintf('0x%1$X is out of range UTF-16 code point (0x000000 - 0x10FFFF)', $code_point));\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5224\u5b9a\n    if (0xD800 <= $code_point && $code_point <= 0xDFFF) {\n        throw new \\Exception(sprintf('0x%X is in of range surrogate pair code point (0xD800 - 0xDFFF)', $code_point));\n    }\n\n    //1\u756a\u76ee\u306e\u30d0\u30a4\u30c8\u306e\u307f\u3067chr\u95a2\u6570\u304c\u4f7f\u3048\u308b\u30b1\u30fc\u30b9\n    if ($code_point < 0x80) {\n        return chr($code_point);\n    }\n\n    //2\u756a\u76ee\u306e\u30d0\u30a4\u30c8\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30b1\u30fc\u30b9\n    if ($code_point < 0xA0) {\n        return chr(0xC0 | $code_point >> 6) . chr(0x80 | $code_point & 0x3F);\n    }\n\n    //\u6570\u5024\u5b9f\u4f53\u53c2\u7167\u8868\u8a18\u304b\u3089\u306e\u5909\u63db\n    return html_entity_decode('&#'. $code_point .';');\n}\n?><html>\n<head>\n<script type=\"text/javascript\">\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     code_point  UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction fromChatCodeExt (code_point) {\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7121\u3057\u306e\u6587\u5b57\u306e\u5834\u5408\n    if (code_point < 0x10000) {\n        //\u7d20\u76f4\u306b\u51e6\u7406\u3057\u3066\u8fd4\u3059\n        return String.fromCharCode(code_point);\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u4ed8\u306e\u6587\u5b57\u306e\u5834\u5408\n    code_point -= 0x10000;\n    return String.fromCharCode(0xD800 + (code_point >> 10), 0xDC00 + (code_point & 0x3FF));\n}\n\n/**\n * \u6587\u5b57\u5217\u306e\u5e45\u3092\u8fd4\u3059\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str \u5e45\u3092\u6e2c\u308a\u305f\u3044\u6587\u5b57\u5217\n * @return  int     \u6587\u5b57\u5217\u5e45\n */\nfunction mb_strwidth (str) {\n    var i = 0;\n    var str_width = 0;\n    var next_char_code = 0;\n    var char_code = 0;\n\n    //\u4e00\u6587\u5b57\u305a\u3064\u51e6\u7406\n    while (!Number.isNaN((char_code = str.charCodeAt(i++)))) {\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= char_code && char_code <= 0xDBFF) {\n            next_char_code = str.charCodeAt(i);\n            char_code = ((char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n            i++;\n        }\n\n        if (0x0 <= char_code && char_code <= 0x10FF) {\n            str_width += 1;\n        } else if (0x1100 <= char_code && char_code <= 0x115F) {\n            str_width += 2;\n        } else if (0x1160 <= char_code && char_code <= 0x11A2) {\n            str_width += 1;\n        } else if (0x11A3 <= char_code && char_code <= 0x11A7) {\n            str_width += 2;\n        } else if (0x11A8 <= char_code && char_code <= 0x11F9) {\n            str_width += 1;\n        } else if (0x11FA <= char_code && char_code <= 0x11FF) {\n            str_width += 2;\n        } else if (0x1200 <= char_code && char_code <= 0x2328) {\n            str_width += 1;\n        } else if (0x2329 <= char_code && char_code <= 0x232A) {\n            str_width += 2;\n        } else if (0x232B <= char_code && char_code <= 0x2E7F) {\n            str_width += 1;\n        } else if (0x2E80 <= char_code && char_code <= 0x2E99) {\n            str_width += 2;\n        } else if (0x2E9A <= char_code && char_code <= 0x2E9A) {\n            str_width += 1;\n        } else if (0x2E9B <= char_code && char_code <= 0x2EF3) {\n            str_width += 2;\n        } else if (0x2EF4 <= char_code && char_code <= 0x2EFF) {\n            str_width += 1;\n        } else if (0x2F00 <= char_code && char_code <= 0x2FD5) {\n            str_width += 2;\n        } else if (0x2FD6 <= char_code && char_code <= 0x2FEF) {\n            str_width += 1;\n        } else if (0x2FF0 <= char_code && char_code <= 0x2FFB) {\n            str_width += 2;\n        } else if (0x2FFC <= char_code && char_code <= 0x2FFF) {\n            str_width += 1;\n        } else if (0x3000 <= char_code && char_code <= 0x303E) {\n            str_width += 2;\n        } else if (0x303F <= char_code && char_code <= 0x3040) {\n            str_width += 1;\n        } else if (0x3041 <= char_code && char_code <= 0x3096) {\n            str_width += 2;\n        } else if (0x3097 <= char_code && char_code <= 0x3098) {\n            str_width += 1;\n        } else if (0x3099 <= char_code && char_code <= 0x30FF) {\n            str_width += 2;\n        } else if (0x3100 <= char_code && char_code <= 0x3104) {\n            str_width += 1;\n        } else if (0x3105 <= char_code && char_code <= 0x312D) {\n            str_width += 2;\n        } else if (0x312E <= char_code && char_code <= 0x3130) {\n            str_width += 1;\n        } else if (0x3131 <= char_code && char_code <= 0x318E) {\n            str_width += 2;\n        } else if (0x318F <= char_code && char_code <= 0x318F) {\n            str_width += 1;\n        } else if (0x3190 <= char_code && char_code <= 0x31BA) {\n            str_width += 2;\n        } else if (0x31BB <= char_code && char_code <= 0x31BF) {\n            str_width += 1;\n        } else if (0x31C0 <= char_code && char_code <= 0x31E3) {\n            str_width += 2;\n        } else if (0x31E4 <= char_code && char_code <= 0x31EF) {\n            str_width += 1;\n        } else if (0x31F0 <= char_code && char_code <= 0x321E) {\n            str_width += 2;\n        } else if (0x321F <= char_code && char_code <= 0x321F) {\n            str_width += 1;\n        } else if (0x3220 <= char_code && char_code <= 0x3247) {\n            str_width += 2;\n        } else if (0x3248 <= char_code && char_code <= 0x324F) {\n            str_width += 1;\n        } else if (0x3250 <= char_code && char_code <= 0x32FE) {\n            str_width += 2;\n        } else if (0x32FF <= char_code && char_code <= 0x32FF) {\n            str_width += 1;\n        } else if (0x3300 <= char_code && char_code <= 0x4DBF) {\n            str_width += 2;\n        } else if (0x4DC0 <= char_code && char_code <= 0x4DFF) {\n            str_width += 1;\n        } else if (0x4E00 <= char_code && char_code <= 0xA48C) {\n            str_width += 2;\n        } else if (0xA48D <= char_code && char_code <= 0xA48F) {\n            str_width += 1;\n        } else if (0xA490 <= char_code && char_code <= 0xA4C6) {\n            str_width += 2;\n        } else if (0xA4C7 <= char_code && char_code <= 0xA95F) {\n            str_width += 1;\n        } else if (0xA960 <= char_code && char_code <= 0xA97C) {\n            str_width += 2;\n        } else if (0xA97D <= char_code && char_code <= 0xABFF) {\n            str_width += 1;\n        } else if (0xAC00 <= char_code && char_code <= 0xD7A3) {\n            str_width += 2;\n        } else if (0xD7A4 <= char_code && char_code <= 0xD7AF) {\n            str_width += 1;\n        } else if (0xD7B0 <= char_code && char_code <= 0xD7C6) {\n            str_width += 2;\n        } else if (0xD7C7 <= char_code && char_code <= 0xD7CA) {\n            str_width += 1;\n        } else if (0xD7CB <= char_code && char_code <= 0xD7FB) {\n            str_width += 2;\n        } else if (0xD7FC <= char_code && char_code <= 0xF8FF) {\n            str_width += 1;\n        } else if (0xF900 <= char_code && char_code <= 0xFAFF) {\n            str_width += 2;\n        } else if (0xFB00 <= char_code && char_code <= 0xFE0F) {\n            str_width += 1;\n        } else if (0xFE10 <= char_code && char_code <= 0xFE19) {\n            str_width += 2;\n        } else if (0xFE1A <= char_code && char_code <= 0xFE2F) {\n            str_width += 1;\n        } else if (0xFE30 <= char_code && char_code <= 0xFE52) {\n            str_width += 2;\n        } else if (0xFE53 <= char_code && char_code <= 0xFE53) {\n            str_width += 1;\n        } else if (0xFE54 <= char_code && char_code <= 0xFE66) {\n            str_width += 2;\n        } else if (0xFE67 <= char_code && char_code <= 0xFE67) {\n            str_width += 1;\n        } else if (0xFE68 <= char_code && char_code <= 0xFE6B) {\n            str_width += 2;\n        } else if (0xFE6C <= char_code && char_code <= 0xFF00) {\n            str_width += 1;\n        } else if (0xFF01 <= char_code && char_code <= 0xFF60) {\n            str_width += 2;\n        } else if (0xFF61 <= char_code && char_code <= 0xFFDF) {\n            str_width += 1;\n        } else if (0xFFE0 <= char_code && char_code <= 0xFFE6) {\n            str_width += 2;\n        } else if (0xFFE7 <= char_code && char_code <= 0x1AFFF) {\n            str_width += 1;\n        } else if (0x1B000 <= char_code && char_code <= 0x1B001) {\n            str_width += 2;\n        } else if (0x1B002 <= char_code && char_code <= 0x1F1FF) {\n            str_width += 1;\n        } else if (0x1F200 <= char_code && char_code <= 0x1F202) {\n            str_width += 2;\n        } else if (0x1F203 <= char_code && char_code <= 0x1F20F) {\n            str_width += 1;\n        } else if (0x1F210 <= char_code && char_code <= 0x1F23A) {\n            str_width += 2;\n        } else if (0x1F23B <= char_code && char_code <= 0x1F23F) {\n            str_width += 1;\n        } else if (0x1F240 <= char_code && char_code <= 0x1F248) {\n            str_width += 2;\n        } else if (0x1F249 <= char_code && char_code <= 0x1F24F) {\n            str_width += 1;\n        } else if (0x1F250 <= char_code && char_code <= 0x1F251) {\n            str_width += 2;\n        } else if (0x1F252 <= char_code && char_code <= 0x1FFFF) {\n            str_width += 1;\n        } else if (0x20000 <= char_code && char_code <= 0x2FFFD) {\n            str_width += 2;\n        } else if (0x2FFFE <= char_code && char_code <= 0x2FFFF) {\n            str_width += 1;\n        } else if (0x30000 <= char_code && char_code <= 0x3FFFD) {\n            str_width += 2;\n        } else if (0x3FFFE <= char_code && char_code <= 0x10FFFF) {\n            str_width += 1;\n        }\n    }\n\n    return str_width;\n}\n\n/**\n * \u6307\u5b9a\u3057\u305f\u5e45\u3067\u6587\u5b57\u5217\u3092\u4e38\u3081\u308b\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strimwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str         \u4e38\u3081\u305f\u3044\u6587\u5b57\u5217\n * @param   int     start       \u958b\u59cb\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3002\u6587\u5b57\u5217\u306e\u59cb\u3081\u304b\u3089\u306e\u6587\u5b57\u6570 (\u6700\u521d\u306e\u6587\u5b57\u306f 0) \u3067\u3059\n * @param   int     width       \u4e38\u3081\u308b\u5e45\n * @param   string  trimmarker  \u4e38\u3081\u305f\u5f8c\u306b\u305d\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u308b\u6587\u5b57\u5217\n * @return  string  \u4e38\u3081\u3089\u308c\u305f\u6587\u5b57\u5217\n */\nfunction mb_strimwidth (str, start, width, trimmarker) {\n    //============================================\n    // \u521d\u671f\u5316\n    //============================================\n    //\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u521d\u671f\u5316\n    if (trimmarker == null) {\n        trimmarker = '';\n    }\n\n    var trimmarker_width = mb_strwidth(trimmarker);\n\n    var stacker             = []\n    var total_width         = 0;\n\n    var current_char        = '';\n    var current_char_code   = 0;\n    var current_width       = 0;\n\n    var next_char           = '';\n    var next_char_code      = 0;\n    var next_width          = 0;\n\n    //============================================\n    // mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n    //============================================\n    // \u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n    // \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n    // \u30fb\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n    // \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08illegal_range_list\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n    //\n    // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u305d\u308c\u306e\u81ea\u52d5\u691c\u77e5\u7528\u306e\u72b6\u614b\u3001\u5024\u3092\u5b9a\u7fa9\u3059\u308b\n    //============================================\n\n    //\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304b\u3089\u4f8b\u5916\u5bfe\u5fdc\u6709\u7121\u3092\u5224\u5b9a\n    var irregular_caution       = (str.charCodeAt(0) < 0x21 || 0x7E < str.charCodeAt(0)) && trimmarker == '' && width == 1;\n\n    //\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u3068\u306a\u308b\u6587\u5b57\u5217\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\n    //2\u6b21\u5143\u76ee\u306e\u914d\u5217\u306e\u7b2c\u4e00\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u59cb\u70b9\u3001\u7b2c\u4e8c\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7d42\u70b9\n    //\u4f8b\uff09[0x1100, 0x115F]\u306e\u5834\u5408\n    // 0x1100 <= code_point && code_point <= 0x115F \u304c\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3068\u306a\u308b\n    var illegal_range_list  = [\n        [0x1100, 0x115F],\n        [0x11A3, 0x11A7],\n        [0x11FA, 0x11FF],\n        [0x2329, 0x2329],\n        [0x232A, 0x232A],\n        [0x2E80, 0x2E99],\n        [0x2E9B, 0x2EF3],\n        [0x2F00, 0x2FD5],\n        [0x2FF0, 0x2FFB],\n        [0x3000, 0x303E],\n        [0x3041, 0x3096],\n        [0x3099, 0x30FF],\n        [0x3105, 0x312D],\n        [0x3131, 0x318E],\n        [0x3190, 0x31BA],\n        [0x31C0, 0x31E3],\n        [0x31F0, 0x321E],\n        [0x3220, 0x3247],\n        [0x3250, 0x32FE],\n        [0x3300, 0x4DBF],\n        [0x4E00, 0xA48C],\n        [0xA490, 0xA4C6],\n        [0xA960, 0xA97C],\n        [0xAC00, 0xD7A3],\n        [0xD7B0, 0xD7C6],\n        [0xD7CB, 0xD7FB],\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7bc4\u56f2\u3082\u5bfe\u8c61\u3068\u306a\u308b\u304c\u3001\u5358\u4f53\u3067\u6e21\u3059\u4e8b\u81ea\u4f53\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u4ed5\u69d8\u3068\u3057\u3066\u306f\u53d6\u308a\u8fbc\u307e\u306a\u3044\n        [0xF900, 0xFAFF],\n        [0xFE10, 0xFE19],\n        [0xFE30, 0xFE52],\n        [0xFE54, 0xFE66],\n        [0xFE68, 0xFE6B],\n        [0xFF01, 0xFF60],\n        [0xFFE0, 0xFFE6],\n        [0x1B000, 0x1B001],\n        [0x1F200, 0x1F202],\n        [0x1F210, 0x1F23A],\n        [0x1F240, 0x1F248],\n        [0x1F250, 0x1F251],\n        [0x20000, 0x2FFFD],\n        [0x30000, 0x3FFFD]\n    ];\n    var illegal_range_length = illegal_range_list.length;\n\n    /**\n     * \u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u304b\u3069\u3046\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002\n     *\n     * @param   int     char_code   \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n     * @return  bool    \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u306e\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\n     */\n    var irregular_pattern           = function (char_code) {\n        for (var i = 0; i < illegal_range_length;i++) {\n            if (illegal_range_list[i][0] <= char_code && char_code <= illegal_range_list[i][1]) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    //============================================\n    // \u5b9f\u51e6\u7406\n    //============================================\n    for (var i = start, length = start + width;i < length;i++) {\n        current_char_code   = str.charCodeAt(i);\n        next_char_code      = str.charCodeAt(1 + i);\n\n        //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= current_char_code && current_char_code <= 0xDBFF) {\n            current_char_code = ((current_char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n            i++;\n            next_char_code = str.charCodeAt(i + 1);\n        }\n\n        //\u6b21\u306e\u6587\u5b57\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n        if (0xD800 <= next_char_code && next_char_code <= 0xDBFF) {\n            i++;\n            next_char_code = ((next_char_code - 0xD800) * 0x400) + (str.charCodeAt(i + 1) - 0xDC00) + 0x10000;\n        }\n\n        //mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n        if (irregular_caution) {\n            if (irregular_pattern(current_char_code)) {\n                return '';\n            }\n            if (irregular_pattern(next_char_code)) {\n                return '';\n            }\n        }\n\n        if (Number.isNaN(current_char_code)) {\n            break;\n        }\n\n        current_char = fromChatCodeExt(current_char_code);\n        next_char = Number.isNaN(next_char_code) ? '' : fromChatCodeExt(next_char_code);\n\n        current_width       = mb_strwidth(current_char);\n        next_width          = mb_strwidth(next_char);\n\n        if (width < total_width + next_width + trimmarker_width) {\n            stacker.push(trimmarker);\n            break;\n        }\n\n        total_width         += current_width;\n        stacker.push(current_char);\n\n        if (width <= total_width) {\n            break;\n        }\n    }\n\n    return stacker.join('');\n}\n\n//============================================\n// \u691c\u8a3c\u30b3\u30fc\u30c9\u81ea\u52d5\u69cb\u7bc9\n//============================================\nvar list = [];\n<?php\n\nfor ($i = $start;$i < $end;$i++) {\n    if (0xD800 <= $i && $i <= 0xDFFF) {\n        continue;\n    }\n\n    $char = int2utf8($i);\n?>\nlist.push({char : fromChatCodeExt(<?= $i ?>), code : <?= $i ?>, hex_code : '<?= sprintf('0x%X', $i) ?>', width : <?= mb_strwidth($char) ?>, imwidth : [<?php for ($n = 1;$n < 6;$n++) { ?><?php if ($n > 1) {echo ', ';} ?>[<?= mb_strwidth(mb_strimwidth($char, 0, $n, \"\")) ?>, <?= mb_strwidth(mb_strimwidth($char, 0, $n, \".\")) ?>, <?= mb_strwidth(mb_strimwidth($char, 0, $n, \"\u2026\")) ?>]<?php } ?>]});\n<?php\n}\n?>\n\nvar error_list = [];\nvar element = null;\nvar n = 0;\nvar m = 0;\n\nfor (var i = 0, length = list.length;i < length;i++) {\n    element = list[i];\n\n    if (element.width != mb_strwidth(element.char)) {\n        error_list.push({char : element.char, code : element.hex_code, message : 'width un match. php:'+ element.width +' js:'+ mb_strwidth(element.char)});\n    }\n\n    for (n = 0;n < 5;n++) {\n        m = 1 + n;\n        if (element.imwidth[n][0] != mb_strwidth(mb_strimwidth(element.char, 0, m, ''))) {\n            error_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\"\". width param:'+ m +' php:'+ element.imwidth[n][0] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '')) +' char:'+ mb_strimwidth(element.char, 0, m, '')});\n        }\n        if (element.imwidth[n][1] != mb_strwidth(mb_strimwidth(element.char, 0, m, '.'))) {\n            error_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\".\". width param:'+ m +' php:'+ element.imwidth[n][1] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '.')) +' char:'+ mb_strimwidth(element.char, 0, m, '.')});\n        }\n        if (element.imwidth[n][2] != mb_strwidth(mb_strimwidth(element.char, 0, m, '\u2026'))) {\n            error_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\"\u2026\". width param:'+ m +' php:'+ element.imwidth[n][2] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '\u2026')) +' char:'+ mb_strimwidth(element.char, 0, m, '\u2026')});\n        }\n    }\n}\n\n//\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u6700\u5927\u306b\u306a\u308b\u307e\u3067\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067\u691c\u8a3c\u3092\u7d9a\u3051\u3066\u3044\u304f\nif (error_list.length == 0 && <?= $end + $range <= $max ? 'true' : 'false' ?>) {\n    document.location = './?page='+ <?= (isset($_GET['page']) ? $_GET['page'] : 0) + 1 ?>;\n}\n\n</script>\n</head>\n<body>\n\n<a href=\"./\">restart</a>\n<hr />\n<table border=\"1\">\n    <tbody>\n        <tr>\n            <td>char</td>\n            <td>char code</td>\n            <td>message</td>\n        </tr>\n<script type=\"text/javascript\">\nfor (var i = 0, length = error_list.length;i < length;i++) {\n    element = error_list[i];\n    document.write('<tr>');\n    document.write('<td>'+ element.char +'</td>');\n    document.write('<td>'+ element.code +'</td>');\n    document.write('<td>'+ element.message +'</td>');\n    document.write('</tr>');\n}\n</script>\n    </tbody>\n</table>\n\n</body>\n</html>\n\n\nSelenium-IDE\u3067\u5b8c\u5168\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u305f\u3081\u306b\u3001JavaScript\u306bmb_strwidth\u3068mb_strimwidth\u3092\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\n\u305d\u306e\u969b\u306bPHP\u306emb_strimwidth\u3067\u7a7a\u6587\u5b57\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u4e8b\u3092\u767a\u898b\u3057\u305f\u305f\u3081\u3001\u4f75\u305b\u3066\u8a18\u8f09\u3059\u308b\u3002\n\n## \u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\n PHP 5.6.15\n \n## \u79fb\u690d\u3057\u305f\u30b3\u30fc\u30c9\n\n### fromChatCodeExt\uff08\u79fb\u690d\u30b3\u30fc\u30c9\u3067\u306f\u306a\u3044\u304c\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6587\u5b57\u5217\u5316\u306b\u5fc5\u8981\uff09\n\n```javascript:fromChatCodeExt\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     code_point  UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction fromChatCodeExt (code_point) {\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7121\u3057\u306e\u6587\u5b57\u306e\u5834\u5408\n    if (code_point < 0x10000) {\n        //\u7d20\u76f4\u306b\u51e6\u7406\u3057\u3066\u8fd4\u3059\n        return String.fromCharCode(code_point);\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u4ed8\u306e\u6587\u5b57\u306e\u5834\u5408\n    code_point -= 0x10000;\n    return String.fromCharCode(0xD800 + (code_point >> 10), 0xDC00 + (code_point & 0x3FF));\n}\n```\n\n### mb_strwidth\n\n```javascript:mb_strwidth\n/**\n * \u6587\u5b57\u5217\u306e\u5e45\u3092\u8fd4\u3059\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str \u5e45\u3092\u6e2c\u308a\u305f\u3044\u6587\u5b57\u5217\n * @return  int     \u6587\u5b57\u5217\u5e45\n */\nfunction mb_strwidth (str) {\n\tvar i = 0;\n\tvar str_width = 0;\n\tvar next_char_code = 0;\n\tvar char_code = 0;\n\n\t//\u4e00\u6587\u5b57\u305a\u3064\u51e6\u7406\n\twhile (!Number.isNaN((char_code = str.charCodeAt(i++)))) {\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= char_code && char_code <= 0xDBFF) {\n\t\t\tnext_char_code = str.charCodeAt(i);\n\t\t\tchar_code = ((char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n\t\t\ti++;\n\t\t}\n\n\t\tif (0x0 <= char_code && char_code <= 0x10FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1100 <= char_code && char_code <= 0x115F) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1160 <= char_code && char_code <= 0x11A2) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x11A3 <= char_code && char_code <= 0x11A7) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x11A8 <= char_code && char_code <= 0x11F9) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x11FA <= char_code && char_code <= 0x11FF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1200 <= char_code && char_code <= 0x2328) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2329 <= char_code && char_code <= 0x232A) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x232B <= char_code && char_code <= 0x2E7F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2E80 <= char_code && char_code <= 0x2E99) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2E9A <= char_code && char_code <= 0x2E9A) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2E9B <= char_code && char_code <= 0x2EF3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2EF4 <= char_code && char_code <= 0x2EFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2F00 <= char_code && char_code <= 0x2FD5) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FD6 <= char_code && char_code <= 0x2FEF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2FF0 <= char_code && char_code <= 0x2FFB) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FFC <= char_code && char_code <= 0x2FFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3000 <= char_code && char_code <= 0x303E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x303F <= char_code && char_code <= 0x3040) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3041 <= char_code && char_code <= 0x3096) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3097 <= char_code && char_code <= 0x3098) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3099 <= char_code && char_code <= 0x30FF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3100 <= char_code && char_code <= 0x3104) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3105 <= char_code && char_code <= 0x312D) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x312E <= char_code && char_code <= 0x3130) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3131 <= char_code && char_code <= 0x318E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x318F <= char_code && char_code <= 0x318F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3190 <= char_code && char_code <= 0x31BA) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x31BB <= char_code && char_code <= 0x31BF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x31C0 <= char_code && char_code <= 0x31E3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x31E4 <= char_code && char_code <= 0x31EF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x31F0 <= char_code && char_code <= 0x321E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x321F <= char_code && char_code <= 0x321F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3220 <= char_code && char_code <= 0x3247) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3248 <= char_code && char_code <= 0x324F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3250 <= char_code && char_code <= 0x32FE) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x32FF <= char_code && char_code <= 0x32FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3300 <= char_code && char_code <= 0x4DBF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x4DC0 <= char_code && char_code <= 0x4DFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x4E00 <= char_code && char_code <= 0xA48C) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA48D <= char_code && char_code <= 0xA48F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xA490 <= char_code && char_code <= 0xA4C6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA4C7 <= char_code && char_code <= 0xA95F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xA960 <= char_code && char_code <= 0xA97C) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA97D <= char_code && char_code <= 0xABFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xAC00 <= char_code && char_code <= 0xD7A3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7A4 <= char_code && char_code <= 0xD7AF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xD7B0 <= char_code && char_code <= 0xD7C6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7C7 <= char_code && char_code <= 0xD7CA) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xD7CB <= char_code && char_code <= 0xD7FB) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7FC <= char_code && char_code <= 0xF8FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xF900 <= char_code && char_code <= 0xFAFF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFB00 <= char_code && char_code <= 0xFE0F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE10 <= char_code && char_code <= 0xFE19) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE1A <= char_code && char_code <= 0xFE2F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE30 <= char_code && char_code <= 0xFE52) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE53 <= char_code && char_code <= 0xFE53) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE54 <= char_code && char_code <= 0xFE66) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE67 <= char_code && char_code <= 0xFE67) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE68 <= char_code && char_code <= 0xFE6B) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE6C <= char_code && char_code <= 0xFF00) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFF01 <= char_code && char_code <= 0xFF60) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFF61 <= char_code && char_code <= 0xFFDF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFFE0 <= char_code && char_code <= 0xFFE6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFFE7 <= char_code && char_code <= 0x1AFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1B000 <= char_code && char_code <= 0x1B001) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1B002 <= char_code && char_code <= 0x1F1FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F200 <= char_code && char_code <= 0x1F202) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F203 <= char_code && char_code <= 0x1F20F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F210 <= char_code && char_code <= 0x1F23A) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F23B <= char_code && char_code <= 0x1F23F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F240 <= char_code && char_code <= 0x1F248) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F249 <= char_code && char_code <= 0x1F24F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F250 <= char_code && char_code <= 0x1F251) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F252 <= char_code && char_code <= 0x1FFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x20000 <= char_code && char_code <= 0x2FFFD) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FFFE <= char_code && char_code <= 0x2FFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x30000 <= char_code && char_code <= 0x3FFFD) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3FFFE <= char_code && char_code <= 0x10FFFF) {\n\t\t\tstr_width += 1;\n\t\t}\n\t}\n\n\treturn str_width;\n}\n```\n\n### mb_strimwidth\n\n```javascript:mb_strimwidth\n/**\n * \u6307\u5b9a\u3057\u305f\u5e45\u3067\u6587\u5b57\u5217\u3092\u4e38\u3081\u308b\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strimwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str         \u4e38\u3081\u305f\u3044\u6587\u5b57\u5217\n * @param   int     start       \u958b\u59cb\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3002\u6587\u5b57\u5217\u306e\u59cb\u3081\u304b\u3089\u306e\u6587\u5b57\u6570 (\u6700\u521d\u306e\u6587\u5b57\u306f 0) \u3067\u3059\n * @param   int     width       \u4e38\u3081\u308b\u5e45\n * @param   string  trimmarker  \u4e38\u3081\u305f\u5f8c\u306b\u305d\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u308b\u6587\u5b57\u5217\n * @return  string  \u4e38\u3081\u3089\u308c\u305f\u6587\u5b57\u5217\n */\nfunction mb_strimwidth (str, start, width, trimmarker) {\n\t//============================================\n\t// \u521d\u671f\u5316\n\t//============================================\n\t//\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u521d\u671f\u5316\n\tif (trimmarker == null) {\n\t\ttrimmarker = '';\n\t}\n\n\tvar trimmarker_width = mb_strwidth(trimmarker);\n\n\tvar stacker\t\t\t\t= []\n\tvar total_width\t\t\t= 0;\n\n\tvar current_char\t\t= '';\n\tvar current_char_code\t= 0;\n\tvar current_width\t\t= 0;\n\n\tvar next_char\t\t\t= '';\n\tvar next_char_code\t\t= 0;\n\tvar next_width\t\t\t= 0;\n\n\t//============================================\n\t// mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n\t//============================================\n\t// \u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n\t// \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n\t// \u30fb\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n\t// \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08illegal_range_list\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n\t//\n\t// \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u305d\u308c\u306e\u81ea\u52d5\u691c\u77e5\u7528\u306e\u72b6\u614b\u3001\u5024\u3092\u5b9a\u7fa9\u3059\u308b\n\t//============================================\n\n\t//\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304b\u3089\u4f8b\u5916\u5bfe\u5fdc\u6709\u7121\u3092\u5224\u5b9a\n\tvar irregular_caution\t\t= (str.charCodeAt(0) < 0x21 || 0x7E < str.charCodeAt(0)) && trimmarker == '' && width == 1;\n\n\t//\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u3068\u306a\u308b\u6587\u5b57\u5217\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\n\t//2\u6b21\u5143\u76ee\u306e\u914d\u5217\u306e\u7b2c\u4e00\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u59cb\u70b9\u3001\u7b2c\u4e8c\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7d42\u70b9\n\t//\u4f8b\uff09[0x1100, 0x115F]\u306e\u5834\u5408\n\t// 0x1100 <= code_point && code_point <= 0x115F \u304c\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3068\u306a\u308b\n\tvar illegal_range_list\t= [\n\t\t[0x1100, 0x115F],\n\t\t[0x11A3, 0x11A7],\n\t\t[0x11FA, 0x11FF],\n\t\t[0x2329, 0x2329],\n\t\t[0x232A, 0x232A],\n\t\t[0x2E80, 0x2E99],\n\t\t[0x2E9B, 0x2EF3],\n\t\t[0x2F00, 0x2FD5],\n\t\t[0x2FF0, 0x2FFB],\n\t\t[0x3000, 0x303E],\n\t\t[0x3041, 0x3096],\n\t\t[0x3099, 0x30FF],\n\t\t[0x3105, 0x312D],\n\t\t[0x3131, 0x318E],\n\t\t[0x3190, 0x31BA],\n\t\t[0x31C0, 0x31E3],\n\t\t[0x31F0, 0x321E],\n\t\t[0x3220, 0x3247],\n\t\t[0x3250, 0x32FE],\n\t\t[0x3300, 0x4DBF],\n\t\t[0x4E00, 0xA48C],\n\t\t[0xA490, 0xA4C6],\n\t\t[0xA960, 0xA97C],\n\t\t[0xAC00, 0xD7A3],\n\t\t[0xD7B0, 0xD7C6],\n\t\t[0xD7CB, 0xD7FB],\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7bc4\u56f2\u3082\u5bfe\u8c61\u3068\u306a\u308b\u304c\u3001\u5358\u4f53\u3067\u6e21\u3059\u4e8b\u81ea\u4f53\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u4ed5\u69d8\u3068\u3057\u3066\u306f\u53d6\u308a\u8fbc\u307e\u306a\u3044\n\t\t[0xF900, 0xFAFF],\n\t\t[0xFE10, 0xFE19],\n\t\t[0xFE30, 0xFE52],\n\t\t[0xFE54, 0xFE66],\n\t\t[0xFE68, 0xFE6B],\n\t\t[0xFF01, 0xFF60],\n\t\t[0xFFE0, 0xFFE6],\n\t\t[0x1B000, 0x1B001],\n\t\t[0x1F200, 0x1F202],\n\t\t[0x1F210, 0x1F23A],\n\t\t[0x1F240, 0x1F248],\n\t\t[0x1F250, 0x1F251],\n\t\t[0x20000, 0x2FFFD],\n\t\t[0x30000, 0x3FFFD]\n\t];\n\tvar illegal_range_length = illegal_range_list.length;\n\n\t/**\n\t * \u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u304b\u3069\u3046\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002\n\t *\n\t * @param\tint\t\tchar_code\t\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n\t * @return\tbool\t\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u306e\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\n\t */\n\tvar irregular_pattern\t\t\t= function (char_code) {\n\t\tfor (var i = 0; i < illegal_range_length;i++) {\n\t\t\tif (illegal_range_list[i][0] <= char_code && char_code <= illegal_range_list[i][1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\t//============================================\n\t// \u5b9f\u51e6\u7406\n\t//============================================\n\tfor (var i = start, length = start + width;i < length;i++) {\n\t\tcurrent_char_code\t= str.charCodeAt(i);\n\t\tnext_char_code\t\t= str.charCodeAt(1 + i);\n\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= current_char_code && current_char_code <= 0xDBFF) {\n\t\t\tcurrent_char_code = ((current_char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n\t\t\ti++;\n\t\t\tnext_char_code = str.charCodeAt(i + 1);\n\t\t}\n\n\t\t//\u6b21\u306e\u6587\u5b57\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= next_char_code && next_char_code <= 0xDBFF) {\n\t\t\ti++;\n\t\t\tnext_char_code = ((next_char_code - 0xD800) * 0x400) + (str.charCodeAt(i + 1) - 0xDC00) + 0x10000;\n\t\t}\n\n\t\t//mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n\t\tif (irregular_caution) {\n\t\t\tif (irregular_pattern(current_char_code)) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tif (irregular_pattern(next_char_code)) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\tif (Number.isNaN(current_char_code)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrent_char = fromChatCodeExt(current_char_code);\n\t\tnext_char = Number.isNaN(next_char_code) ? '' : fromChatCodeExt(next_char_code);\n\n\t\tcurrent_width\t\t= mb_strwidth(current_char);\n\t\tnext_width\t\t\t= mb_strwidth(next_char);\n\n\t\tif (width < total_width + next_width + trimmarker_width) {\n\t\t\tstacker.push(trimmarker);\n\t\t\tbreak;\n\t\t}\n\n\t\ttotal_width\t\t\t+= current_width;\n\t\tstacker.push(current_char);\n\n\t\tif (width <= total_width) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn stacker.join('');\n}\n```\n\n## \u7d50\u8ad6\n\nmb_strimwidth\u3067\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u9664\u304d\u300140\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3067\u7a7a\u6587\u5b57\u304c\u8fd4\u308b\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n## \u6761\u4ef6\n\n\u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n- \u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n- \u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n- \u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08[\u5bfe\u8c61\u7bc4\u56f2]\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n\n### \u5bfe\u8c61\u7bc4\u56f2\n\n| code point      |\n|:----------------|\n| U+1100 - U+115F |\n| U+11A3 - U+11A7 |\n| U+11FA - U+11FF |\n| U+2329 - U+2329 |\n| U+232A - U+232A |\n| U+2E80 - U+2E99 |\n| U+2E9B - U+2EF3 |\n| U+2F00 - U+2FD5 |\n| U+2FF0 - U+2FFB |\n| U+3000 - U+303E |\n| U+3041 - U+3096 |\n| U+3099 - U+30FF |\n| U+3105 - U+312D |\n| U+3131 - U+318E |\n| U+3190 - U+31BA |\n| U+31C0 - U+31E3 |\n| U+31F0 - U+321E |\n| U+3220 - U+3247 |\n| U+3250 - U+32FE |\n| U+3300 - U+4DBF |\n| U+4E00 - U+A48C |\n| U+A490 - U+A4C6 |\n| U+A960 - U+A97C |\n| U+AC00 - U+D7A3 |\n| U+D7B0 - U+D7C6 |\n| U+D7CB - U+D7FB |\n| U+F900 - U+FAFF |\n| U+FE10 - U+FE19 |\n| U+FE30 - U+FE52 |\n| U+FE54 - U+FE66 |\n| U+FE68 - U+FE6B |\n| U+FF01 - U+FF60 |\n| U+FFE0 - U+FFE6 |\n| U+1B000 - U+1B001 |\n| U+1F200 - U+1F202 |\n| U+1F210 - U+1F23A |\n| U+1F240 - U+1F248 |\n| U+1F250 - U+1F251 |\n| U+20000 - U+2FFFD |\n| U+30000 - U+3FFFD |\n\n## \u691c\u8a3c\n\n\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u7a7a\u30c6\u30fc\u30d6\u30eb\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3002\n\uff01\uff01\u6ce8\u610f\uff01\uff01\n- \u30d6\u30e9\u30a6\u30b6\u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n- \u691c\u8a3c\u5bfe\u8c61\u6587\u5b57\u6570\u304c1,114,111\u6587\u5b57\u3042\u308b\u305f\u3081\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\n- \u691c\u8a3c\u51e6\u7406\u306fJavaScript\u3067\u884c\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u72b6\u6cc1\u306b\u3088\u308a\u30d6\u30e9\u30a6\u30b6\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\n- 543\u56de\u30da\u30fc\u30b8\u306e\u81ea\u52d5\u9077\u79fb\u304c\u884c\u308f\u308c\u307e\u3059\n\n```php\n<?php\n//============================================\n// \u521d\u671f\u5316\n//============================================\n//\u691c\u8a3c\u7bc4\u56f2\u6700\u5927\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n$max = hexdec('0x10FFFF');\n\n//1\u63cf\u753b\u5f53\u305f\u308a\u306e\u691c\u8a3c\u4ef6\u6570\n$range = 2048;\n\n//\u73fe\u5728\u306e\u30da\u30fc\u30b8\u306e\u7b97\u51fa\n$page = isset($_GET['page']) ? $_GET['page'] - 1 : 0;\n\n//\u4eca\u56de\u63cf\u753b\u7bc4\u56f2\u306e\u78ba\u5b9a\n$start = $range * $page;\n$end = $range + $start;\n\n//\u30b9\u30bf\u30c3\u30ab\u306e\u521d\u671f\u5316\n$stacker = [];\n\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     $code_point UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction int2utf8($code_point) {\n    //UTF-16\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5185\u5224\u5b9a\n    if ($code_point < 0) {\n        throw new \\Exception(sprintf('%1$s is out of range UTF-16 code point (0x000000 - 0x10FFFF)', $code_point));\n    }\n    if (0x10FFFF < $code_point) {\n        throw new \\Exception(sprintf('0x%1$X is out of range UTF-16 code point (0x000000 - 0x10FFFF)', $code_point));\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5224\u5b9a\n    if (0xD800 <= $code_point && $code_point <= 0xDFFF) {\n        throw new \\Exception(sprintf('0x%X is in of range surrogate pair code point (0xD800 - 0xDFFF)', $code_point));\n    }\n\n    //1\u756a\u76ee\u306e\u30d0\u30a4\u30c8\u306e\u307f\u3067chr\u95a2\u6570\u304c\u4f7f\u3048\u308b\u30b1\u30fc\u30b9\n    if ($code_point < 0x80) {\n        return chr($code_point);\n    }\n\n    //2\u756a\u76ee\u306e\u30d0\u30a4\u30c8\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30b1\u30fc\u30b9\n    if ($code_point < 0xA0) {\n        return chr(0xC0 | $code_point >> 6) . chr(0x80 | $code_point & 0x3F);\n    }\n\n    //\u6570\u5024\u5b9f\u4f53\u53c2\u7167\u8868\u8a18\u304b\u3089\u306e\u5909\u63db\n    return html_entity_decode('&#'. $code_point .';');\n}\n?><html>\n<head>\n<script type=\"text/javascript\">\n/**\n * \u6574\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092UTF-8\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3002\n *\n * @param   int     code_point  UTF-8\u6587\u5b57\u306b\u5909\u63db\u3057\u305f\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n * @return  string  \u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4f5c\u6210\u3057\u305fUTF-8\u6587\u5b57\n */\nfunction fromChatCodeExt (code_point) {\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7121\u3057\u306e\u6587\u5b57\u306e\u5834\u5408\n    if (code_point < 0x10000) {\n        //\u7d20\u76f4\u306b\u51e6\u7406\u3057\u3066\u8fd4\u3059\n        return String.fromCharCode(code_point);\n    }\n\n    //\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u4ed8\u306e\u6587\u5b57\u306e\u5834\u5408\n    code_point -= 0x10000;\n    return String.fromCharCode(0xD800 + (code_point >> 10), 0xDC00 + (code_point & 0x3FF));\n}\n\n/**\n * \u6587\u5b57\u5217\u306e\u5e45\u3092\u8fd4\u3059\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str \u5e45\u3092\u6e2c\u308a\u305f\u3044\u6587\u5b57\u5217\n * @return  int     \u6587\u5b57\u5217\u5e45\n */\nfunction mb_strwidth (str) {\n\tvar i = 0;\n\tvar str_width = 0;\n\tvar next_char_code = 0;\n\tvar char_code = 0;\n\n\t//\u4e00\u6587\u5b57\u305a\u3064\u51e6\u7406\n\twhile (!Number.isNaN((char_code = str.charCodeAt(i++)))) {\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= char_code && char_code <= 0xDBFF) {\n\t\t\tnext_char_code = str.charCodeAt(i);\n\t\t\tchar_code = ((char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n\t\t\ti++;\n\t\t}\n\n\t\tif (0x0 <= char_code && char_code <= 0x10FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1100 <= char_code && char_code <= 0x115F) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1160 <= char_code && char_code <= 0x11A2) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x11A3 <= char_code && char_code <= 0x11A7) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x11A8 <= char_code && char_code <= 0x11F9) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x11FA <= char_code && char_code <= 0x11FF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1200 <= char_code && char_code <= 0x2328) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2329 <= char_code && char_code <= 0x232A) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x232B <= char_code && char_code <= 0x2E7F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2E80 <= char_code && char_code <= 0x2E99) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2E9A <= char_code && char_code <= 0x2E9A) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2E9B <= char_code && char_code <= 0x2EF3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2EF4 <= char_code && char_code <= 0x2EFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2F00 <= char_code && char_code <= 0x2FD5) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FD6 <= char_code && char_code <= 0x2FEF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x2FF0 <= char_code && char_code <= 0x2FFB) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FFC <= char_code && char_code <= 0x2FFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3000 <= char_code && char_code <= 0x303E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x303F <= char_code && char_code <= 0x3040) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3041 <= char_code && char_code <= 0x3096) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3097 <= char_code && char_code <= 0x3098) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3099 <= char_code && char_code <= 0x30FF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3100 <= char_code && char_code <= 0x3104) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3105 <= char_code && char_code <= 0x312D) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x312E <= char_code && char_code <= 0x3130) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3131 <= char_code && char_code <= 0x318E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x318F <= char_code && char_code <= 0x318F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3190 <= char_code && char_code <= 0x31BA) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x31BB <= char_code && char_code <= 0x31BF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x31C0 <= char_code && char_code <= 0x31E3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x31E4 <= char_code && char_code <= 0x31EF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x31F0 <= char_code && char_code <= 0x321E) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x321F <= char_code && char_code <= 0x321F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3220 <= char_code && char_code <= 0x3247) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3248 <= char_code && char_code <= 0x324F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3250 <= char_code && char_code <= 0x32FE) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x32FF <= char_code && char_code <= 0x32FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x3300 <= char_code && char_code <= 0x4DBF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x4DC0 <= char_code && char_code <= 0x4DFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x4E00 <= char_code && char_code <= 0xA48C) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA48D <= char_code && char_code <= 0xA48F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xA490 <= char_code && char_code <= 0xA4C6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA4C7 <= char_code && char_code <= 0xA95F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xA960 <= char_code && char_code <= 0xA97C) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xA97D <= char_code && char_code <= 0xABFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xAC00 <= char_code && char_code <= 0xD7A3) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7A4 <= char_code && char_code <= 0xD7AF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xD7B0 <= char_code && char_code <= 0xD7C6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7C7 <= char_code && char_code <= 0xD7CA) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xD7CB <= char_code && char_code <= 0xD7FB) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xD7FC <= char_code && char_code <= 0xF8FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xF900 <= char_code && char_code <= 0xFAFF) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFB00 <= char_code && char_code <= 0xFE0F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE10 <= char_code && char_code <= 0xFE19) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE1A <= char_code && char_code <= 0xFE2F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE30 <= char_code && char_code <= 0xFE52) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE53 <= char_code && char_code <= 0xFE53) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE54 <= char_code && char_code <= 0xFE66) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE67 <= char_code && char_code <= 0xFE67) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFE68 <= char_code && char_code <= 0xFE6B) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFE6C <= char_code && char_code <= 0xFF00) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFF01 <= char_code && char_code <= 0xFF60) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFF61 <= char_code && char_code <= 0xFFDF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0xFFE0 <= char_code && char_code <= 0xFFE6) {\n\t\t\tstr_width += 2;\n\t\t} else if (0xFFE7 <= char_code && char_code <= 0x1AFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1B000 <= char_code && char_code <= 0x1B001) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1B002 <= char_code && char_code <= 0x1F1FF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F200 <= char_code && char_code <= 0x1F202) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F203 <= char_code && char_code <= 0x1F20F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F210 <= char_code && char_code <= 0x1F23A) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F23B <= char_code && char_code <= 0x1F23F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F240 <= char_code && char_code <= 0x1F248) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F249 <= char_code && char_code <= 0x1F24F) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x1F250 <= char_code && char_code <= 0x1F251) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x1F252 <= char_code && char_code <= 0x1FFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x20000 <= char_code && char_code <= 0x2FFFD) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x2FFFE <= char_code && char_code <= 0x2FFFF) {\n\t\t\tstr_width += 1;\n\t\t} else if (0x30000 <= char_code && char_code <= 0x3FFFD) {\n\t\t\tstr_width += 2;\n\t\t} else if (0x3FFFE <= char_code && char_code <= 0x10FFFF) {\n\t\t\tstr_width += 1;\n\t\t}\n\t}\n\n\treturn str_width;\n}\n\n/**\n * \u6307\u5b9a\u3057\u305f\u5e45\u3067\u6587\u5b57\u5217\u3092\u4e38\u3081\u308b\u3002\n *\n * \u3053\u306e\u95a2\u6570\u306fPHP\u306emb_strimwidth\u4e92\u63db\u3067\u3059\u3002\n *\n * @param   string  str         \u4e38\u3081\u305f\u3044\u6587\u5b57\u5217\n * @param   int     start       \u958b\u59cb\u4f4d\u7f6e\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3002\u6587\u5b57\u5217\u306e\u59cb\u3081\u304b\u3089\u306e\u6587\u5b57\u6570 (\u6700\u521d\u306e\u6587\u5b57\u306f 0) \u3067\u3059\n * @param   int     width       \u4e38\u3081\u308b\u5e45\n * @param   string  trimmarker  \u4e38\u3081\u305f\u5f8c\u306b\u305d\u306e\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u308b\u6587\u5b57\u5217\n * @return  string  \u4e38\u3081\u3089\u308c\u305f\u6587\u5b57\u5217\n */\nfunction mb_strimwidth (str, start, width, trimmarker) {\n\t//============================================\n\t// \u521d\u671f\u5316\n\t//============================================\n\t//\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u7a7a\u6587\u5b57\u3068\u3057\u3066\u521d\u671f\u5316\n\tif (trimmarker == null) {\n\t\ttrimmarker = '';\n\t}\n\n\tvar trimmarker_width = mb_strwidth(trimmarker);\n\n\tvar stacker\t\t\t\t= []\n\tvar total_width\t\t\t= 0;\n\n\tvar current_char\t\t= '';\n\tvar current_char_code\t= 0;\n\tvar current_width\t\t= 0;\n\n\tvar next_char\t\t\t= '';\n\tvar next_char_code\t\t= 0;\n\tvar next_width\t\t\t= 0;\n\n\t//============================================\n\t// mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n\t//============================================\n\t// \u6b21\u306e\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u3001mb_strimwidth\u306f\u5e38\u306b\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3002\n\t// \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306e1\u6587\u5b57\u76ee\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c0x20\u4ee5\u4e0b\u307e\u305f\u306f0x7E\u4ee5\u4e0a\n\t// \u30fb\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304c\u7a7a\u6587\u5b57\n\t// \u30fb\u5bfe\u8c61\u6587\u5b57\u5217\u306b\u7279\u5b9a\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\uff08illegal_range_list\u306b\u3042\u308b\u3082\u306e\uff09\u5185\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\n\t//\n\t// \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u305d\u308c\u306e\u81ea\u52d5\u691c\u77e5\u7528\u306e\u72b6\u614b\u3001\u5024\u3092\u5b9a\u7fa9\u3059\u308b\n\t//============================================\n\n\t//\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30c8\u30ea\u30e0\u30de\u30fc\u30ab\u30fc\u304b\u3089\u4f8b\u5916\u5bfe\u5fdc\u6709\u7121\u3092\u5224\u5b9a\n\tvar irregular_caution\t\t= (str.charCodeAt(0) < 0x21 || 0x7E < str.charCodeAt(0)) && trimmarker == '' && width == 1;\n\n\t//\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u3068\u306a\u308b\u6587\u5b57\u5217\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u5b9a\u7fa9\n\t//2\u6b21\u5143\u76ee\u306e\u914d\u5217\u306e\u7b2c\u4e00\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u59cb\u70b9\u3001\u7b2c\u4e8c\u8981\u7d20\u304c\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7d42\u70b9\n\t//\u4f8b\uff09[0x1100, 0x115F]\u306e\u5834\u5408\n\t// 0x1100 <= code_point && code_point <= 0x115F \u304c\u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u7bc4\u56f2\u3068\u306a\u308b\n\tvar illegal_range_list\t= [\n\t\t[0x1100, 0x115F],\n\t\t[0x11A3, 0x11A7],\n\t\t[0x11FA, 0x11FF],\n\t\t[0x2329, 0x2329],\n\t\t[0x232A, 0x232A],\n\t\t[0x2E80, 0x2E99],\n\t\t[0x2E9B, 0x2EF3],\n\t\t[0x2F00, 0x2FD5],\n\t\t[0x2FF0, 0x2FFB],\n\t\t[0x3000, 0x303E],\n\t\t[0x3041, 0x3096],\n\t\t[0x3099, 0x30FF],\n\t\t[0x3105, 0x312D],\n\t\t[0x3131, 0x318E],\n\t\t[0x3190, 0x31BA],\n\t\t[0x31C0, 0x31E3],\n\t\t[0x31F0, 0x321E],\n\t\t[0x3220, 0x3247],\n\t\t[0x3250, 0x32FE],\n\t\t[0x3300, 0x4DBF],\n\t\t[0x4E00, 0xA48C],\n\t\t[0xA490, 0xA4C6],\n\t\t[0xA960, 0xA97C],\n\t\t[0xAC00, 0xD7A3],\n\t\t[0xD7B0, 0xD7C6],\n\t\t[0xD7CB, 0xD7FB],\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u7bc4\u56f2\u3082\u5bfe\u8c61\u3068\u306a\u308b\u304c\u3001\u5358\u4f53\u3067\u6e21\u3059\u4e8b\u81ea\u4f53\u304c\u304a\u304b\u3057\u3044\u306e\u3067\u4ed5\u69d8\u3068\u3057\u3066\u306f\u53d6\u308a\u8fbc\u307e\u306a\u3044\n\t\t[0xF900, 0xFAFF],\n\t\t[0xFE10, 0xFE19],\n\t\t[0xFE30, 0xFE52],\n\t\t[0xFE54, 0xFE66],\n\t\t[0xFE68, 0xFE6B],\n\t\t[0xFF01, 0xFF60],\n\t\t[0xFFE0, 0xFFE6],\n\t\t[0x1B000, 0x1B001],\n\t\t[0x1F200, 0x1F202],\n\t\t[0x1F210, 0x1F23A],\n\t\t[0x1F240, 0x1F248],\n\t\t[0x1F250, 0x1F251],\n\t\t[0x20000, 0x2FFFD],\n\t\t[0x30000, 0x3FFFD]\n\t];\n\tvar illegal_range_length = illegal_range_list.length;\n\n\t/**\n\t * \u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u304b\u3069\u3046\u304b\u691c\u8a3c\u3057\u307e\u3059\u3002\n\t *\n\t * @param\tint\t\tchar_code\t\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\n\t * @return\tbool\t\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304cmb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\u5bfe\u8c61\u6587\u5b57\u306e\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\n\t */\n\tvar irregular_pattern\t\t\t= function (char_code) {\n\t\tfor (var i = 0; i < illegal_range_length;i++) {\n\t\t\tif (illegal_range_list[i][0] <= char_code && char_code <= illegal_range_list[i][1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\t//============================================\n\t// \u5b9f\u51e6\u7406\n\t//============================================\n\tfor (var i = start, length = start + width;i < length;i++) {\n\t\tcurrent_char_code\t= str.charCodeAt(i);\n\t\tnext_char_code\t\t= str.charCodeAt(1 + i);\n\n\t\t//\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= current_char_code && current_char_code <= 0xDBFF) {\n\t\t\tcurrent_char_code = ((current_char_code - 0xD800) * 0x400) + (next_char_code - 0xDC00) + 0x10000;\n\t\t\ti++;\n\t\t\tnext_char_code = str.charCodeAt(i + 1);\n\t\t}\n\n\t\t//\u6b21\u306e\u6587\u5b57\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u5fdc\n\t\tif (0xD800 <= next_char_code && next_char_code <= 0xDBFF) {\n\t\t\ti++;\n\t\t\tnext_char_code = ((next_char_code - 0xD800) * 0x400) + (str.charCodeAt(i + 1) - 0xDC00) + 0x10000;\n\t\t}\n\n\t\t//mb_strimwidth\u4e92\u63db \u4f8b\u5916\u5bfe\u5fdc\n\t\tif (irregular_caution) {\n\t\t\tif (irregular_pattern(current_char_code)) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tif (irregular_pattern(next_char_code)) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\tif (Number.isNaN(current_char_code)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrent_char = fromChatCodeExt(current_char_code);\n\t\tnext_char = Number.isNaN(next_char_code) ? '' : fromChatCodeExt(next_char_code);\n\n\t\tcurrent_width\t\t= mb_strwidth(current_char);\n\t\tnext_width\t\t\t= mb_strwidth(next_char);\n\n\t\tif (width < total_width + next_width + trimmarker_width) {\n\t\t\tstacker.push(trimmarker);\n\t\t\tbreak;\n\t\t}\n\n\t\ttotal_width\t\t\t+= current_width;\n\t\tstacker.push(current_char);\n\n\t\tif (width <= total_width) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn stacker.join('');\n}\n\n//============================================\n// \u691c\u8a3c\u30b3\u30fc\u30c9\u81ea\u52d5\u69cb\u7bc9\n//============================================\nvar list = [];\n<?php\n\nfor ($i = $start;$i < $end;$i++) {\n\tif (0xD800 <= $i && $i <= 0xDFFF) {\n\t\tcontinue;\n\t}\n\n\t$char = int2utf8($i);\n?>\nlist.push({char : fromChatCodeExt(<?= $i ?>), code : <?= $i ?>, hex_code : '<?= sprintf('0x%X', $i) ?>', width : <?= mb_strwidth($char) ?>, imwidth : [<?php for ($n = 1;$n < 6;$n++) { ?><?php if ($n > 1) {echo ', ';} ?>[<?= mb_strwidth(mb_strimwidth($char, 0, $n, \"\")) ?>, <?= mb_strwidth(mb_strimwidth($char, 0, $n, \".\")) ?>, <?= mb_strwidth(mb_strimwidth($char, 0, $n, \"\u2026\")) ?>]<?php } ?>]});\n<?php\n}\n?>\n\nvar error_list = [];\nvar element = null;\nvar n = 0;\nvar m = 0;\n\nfor (var i = 0, length = list.length;i < length;i++) {\n\telement = list[i];\n\n\tif (element.width != mb_strwidth(element.char)) {\n\t\terror_list.push({char : element.char, code : element.hex_code, message : 'width un match. php:'+ element.width +' js:'+ mb_strwidth(element.char)});\n\t}\n\n\tfor (n = 0;n < 5;n++) {\n\t\tm = 1 + n;\n\t\tif (element.imwidth[n][0] != mb_strwidth(mb_strimwidth(element.char, 0, m, ''))) {\n\t\t\terror_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\"\". width param:'+ m +' php:'+ element.imwidth[n][0] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '')) +' char:'+ mb_strimwidth(element.char, 0, m, '')});\n\t\t}\n\t\tif (element.imwidth[n][1] != mb_strwidth(mb_strimwidth(element.char, 0, m, '.'))) {\n\t\t\terror_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\".\". width param:'+ m +' php:'+ element.imwidth[n][1] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '.')) +' char:'+ mb_strimwidth(element.char, 0, m, '.')});\n\t\t}\n\t\tif (element.imwidth[n][2] != mb_strwidth(mb_strimwidth(element.char, 0, m, '\u2026'))) {\n\t\t\terror_list.push({char : element.char, code : element.hex_code, message : 'imwidth un match. trimmarker:\"\u2026\". width param:'+ m +' php:'+ element.imwidth[n][2] +' js:'+ mb_strwidth(mb_strimwidth(element.char, 0, m, '\u2026')) +' char:'+ mb_strimwidth(element.char, 0, m, '\u2026')});\n\t\t}\n\t}\n}\n\n//\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u6700\u5927\u306b\u306a\u308b\u307e\u3067\u3001\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067\u691c\u8a3c\u3092\u7d9a\u3051\u3066\u3044\u304f\nif (error_list.length == 0 && <?= $end + $range <= $max ? 'true' : 'false' ?>) {\n\tdocument.location = './?page='+ <?= (isset($_GET['page']) ? $_GET['page'] : 0) + 1 ?>;\n}\n\n</script>\n</head>\n<body>\n\n<a href=\"./\">restart</a>\n<hr />\n<table border=\"1\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>char</td>\n\t\t\t<td>char code</td>\n\t\t\t<td>message</td>\n\t\t</tr>\n<script type=\"text/javascript\">\nfor (var i = 0, length = error_list.length;i < length;i++) {\n\telement = error_list[i];\n\tdocument.write('<tr>');\n\tdocument.write('<td>'+ element.char +'</td>');\n\tdocument.write('<td>'+ element.code +'</td>');\n\tdocument.write('<td>'+ element.message +'</td>');\n\tdocument.write('</tr>');\n}\n</script>\n\t</tbody>\n</table>\n\n</body>\n</html>\n```\n", "tags": ["PHP", "JavaScript", "I18n"]}