{"context": " More than 1 year has passed since last update.\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067oauth\u30d8\u30c3\u30c0\u8a08\u7b97\u3059\u308b\u3084\u3064(3-legged)\n\u6700\u521dbash\u3060\u3051\u3067\u306a\u3093\u3068\u304b\u3067\u304d\u306a\u3044\u304b\u306a\u30fc\u3001\u3068\u9811\u5f35\u3063\u3066\u307f\u305f\u3051\u3069\u3001\nurlencode\u306e\u3068\u3053\u3060\u3051\u306f\u3069\u3046\u306b\u3082\u306a\u3089\u306a\u304f\u3066\u3001\u305d\u3053\u3060\u3051\u59a5\u5354\u3057\u3066perl\u4f7f\u3046\u4e8b\u306b\u3057\u305f\u3002\n\u306e\u306f\u3044\u3044\u3082\u306e\u306e\u3001\n\u3058\u3083\u3042\u3082\u3046\u5168\u90e8perl\u3067\u3044\u3044\u3058\u3083\u3093\u3001\u3063\u3066\u3053\u3068\u3067\u7d50\u5c40\u3053\u3046\u306a\u3063\u305f\u3002\n\u306a\u3093\u3068\u304bbash\u3060\u3051\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u306a\u3041\u2026\n\n\u8a08\u7b97\u3059\u308b\u3084\u3064\n\nCPAN\u3067\u9069\u5f53\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u5165\u308c\u3066\u304a\u3044\u3066\u3002\n\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3068\u304b\u3057\u3066\u306a\u3044\u306e\u3067\u4f7f\u3046\u3068\u304d\u306f\u6ce8\u610f\u3002\n\u8981\u66f8\u63db\u7b87\u6240\u3002\n\n\nCONSUMER_KEY\nCONSUMER_SECRET\nACCESS_KEY\nACCESS_SECRET\n\n\n2-legged\u306f\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3067\u3059\u3002\n\n\n\u3051\u3069\u3001\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u524a\u308b\u3060\u3051\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u76f4\u3057\u3059\u308c\u3070\u3044\u3051\u308b\u3068\u601d\u3046\u3002\n\n\n\nget \u4ee5\u5916\u3082\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3067\u3059\u3002\n\n\npost data\u304c\u3042\u308b\u5834\u5408\u306f\u7f72\u540d\u306b\u542b\u3081\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u3081\u3093\u3069\u304f\u3055\u3044\u304b\u3089\u975e\u5bfe\u5fdc\u3002\n\n\n\n\noauth_header.pl\n#!/usr/bin/perl\n\nuse strict; \nuse warnings;\nuse URI::Escape;\nuse MIME::Base64;\nuse Digest::HMAC_SHA1;\nuse String::Random qw( random_regex );\n\nuse constant CONSUMER_KEY    => \"YOUR_CONSUMER_KEY\";\nuse constant CONSUMER_SECRET => \"YOUR_CONSUMER_SECRET\";\nuse constant ACCESS_KEY      => \"YOUR_ACCESS_KEY\";\nuse constant ACCESS_SECRET   => \"YOUR_ACCESS_TOKEN\";\n\nsub oauth_header {\n    my ($method, $url) = @_;\n\n    my $timestamp = time();\n    my $nonce     = sub {\n        return random_regex('[a-zA-Z0-9_]{32}');\n    }->();\n\n    my $signature = sub {\n        my $base_string = sub {\n            my %parray = (\n                'oauth_version'          => \"1.0\",\n                'oauth_nonce'            => $nonce,\n                'oauth_timestamp'        => $timestamp,\n                'oauth_consumer_key'     => CONSUMER_KEY,\n                'oauth_token'            => ACCESS_KEY,\n                'oauth_signature_method' => \"HMAC-SHA1\",\n            );\n\n            my @sorted_params = ();\n            foreach my $key (sort keys %parray) {\n                push(@sorted_params, $key . \"=\" . $parray{$key});\n            }\n            return uri_escape( join(\"&\", @sorted_params) );\n        }->();\n\n        my $sig_string = uc($method) . \"&\" . uri_escape($url) . \"&\" . $base_string;\n        my $hmac_sha1_key = CONSUMER_SECRET . \"&\" . ACCESS_SECRET;\n        my $sig_base64 = encode_base64(Digest::HMAC_SHA1::hmac_sha1($sig_string, $hmac_sha1_key));\n        chomp($sig_base64);\n\n        return uri_escape($sig_base64);\n    }->();\n\n    my %params = (\n        \"oauth_consumer_key\"     => CONSUMER_KEY,\n        \"oauth_nonce\"            => $nonce,\n        \"oauth_signature\"        => $signature,\n        \"oauth_signature_method\" => \"HMAC-SHA1\",\n        \"oauth_timestamp\"        => $timestamp,\n        \"oauth_token\"            => ACCESS_KEY,\n        \"oauth_version\"          => \"1.0\",\n    );\n\n    my @joined_params = ();\n    foreach my $key (sort keys %params) {\n        push(@joined_params, $key . '=\"' . $params{$key} . '\"');\n    }\n\n    my $header = \"Authorization: OAuth \";\n    return $header . join(\", \", @joined_params);\n}\n\n\nmy $method = $ARGV[0];\nmy $url    = $ARGV[1];\n\nprint oauth_header($method, $url);\n\n\n\n\u4f7f\u3046\u3084\u3064\n\u3068\u308a\u3042\u3048\u305atwitter\u306etimeline\u53e9\u3044\u3066\u307f\u308b\u3002\npost data\u7121\u3057\u306a\u3089post\u3068\u304b\u3067\u3082\u305f\u3076\u3093\u3044\u3051\u308b\u3002\n\naccess.sh\n#!/bin/bash\n\nMETHOD=GET\nURL=https://api.twitter.com/1.1/statuses/home_timeline.json\n\ncurl --silent -X $METHOD --header \"`./oauth_header.pl $METHOD $URL`\" $URL\n\n\n\n\u3061\u306a\u307f\u306bbash\u3060\u3068\n\u9014\u4e2d\u307e\u3067bash\u3067\u66f8\u3044\u3066\u305f\u3064\u3044\u3067\u306b\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u306e\u3067\u3001\u53c2\u8003\u307e\u3067\u306b\u3002\n\nhmac-sha1\necho -n \"hoge\" | openssl dgst -sha1 -hmac \"key\"\n\nbase64\necho -n \"hoge\" | openssl base64\n\nnonce\n/dev/urandom \u3068 base64\u3042\u305f\u308a\u4f7f\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u601d\u3046\u3002\n\n\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\ndate +%s\n\nurlencode\n\u9014\u4e2d\u307e\u3067nkf\u3067\u3044\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u305f\u3051\u3069\u3001\n\u3053\u308c\u3060\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u307e\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u8ae6\u3081\u305f\u3002\necho \u307b\u3052\u307b\u3052 | nkf -wMQ | tr = %\n\u3082\u3057\u304b\u3057\u305f\u3089 sed -e \"s/\\%5F/_/g\" \u306b\u6d41\u305b\u3070\u623b\u305b\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\n\u305d\u3082\u305d\u3082\u3061\u3083\u3093\u3068\u3057\u305furlencode\u7528\u306e\u51e6\u7406\u3058\u3083\u306a\u3044\u3063\u307d\u3044\u306e\u3067\u3001\n\u4ed6\u306b\u3082\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u305d\u3046\u306a\u306e\u3067\u3001\u65ad\u5ff5\u3002\n# \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067oauth\u30d8\u30c3\u30c0\u8a08\u7b97\u3059\u308b\u3084\u3064(3-legged)\n\n\u6700\u521dbash\u3060\u3051\u3067\u306a\u3093\u3068\u304b\u3067\u304d\u306a\u3044\u304b\u306a\u30fc\u3001\u3068\u9811\u5f35\u3063\u3066\u307f\u305f\u3051\u3069\u3001\n`urlencode`\u306e\u3068\u3053\u3060\u3051\u306f\u3069\u3046\u306b\u3082\u306a\u3089\u306a\u304f\u3066\u3001\u305d\u3053\u3060\u3051\u59a5\u5354\u3057\u3066perl\u4f7f\u3046\u4e8b\u306b\u3057\u305f\u3002\n\n\u306e\u306f\u3044\u3044\u3082\u306e\u306e\u3001\n\u3058\u3083\u3042\u3082\u3046\u5168\u90e8perl\u3067\u3044\u3044\u3058\u3083\u3093\u3001\u3063\u3066\u3053\u3068\u3067\u7d50\u5c40\u3053\u3046\u306a\u3063\u305f\u3002\n\n\u306a\u3093\u3068\u304bbash\u3060\u3051\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u306a\u3041\u2026\n\n## \u8a08\u7b97\u3059\u308b\u3084\u3064\n\n* CPAN\u3067\u9069\u5f53\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u5165\u308c\u3066\u304a\u3044\u3066\u3002\n* \u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3068\u304b\u3057\u3066\u306a\u3044\u306e\u3067\u4f7f\u3046\u3068\u304d\u306f\u6ce8\u610f\u3002\n* \u8981\u66f8\u63db\u7b87\u6240\u3002\n  * `CONSUMER_KEY`\n  * `CONSUMER_SECRET`\n  * `ACCESS_KEY`\n  * `ACCESS_SECRET`\n* 2-legged\u306f\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3067\u3059\u3002\n  * \u3051\u3069\u3001\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u524a\u308b\u3060\u3051\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u76f4\u3057\u3059\u308c\u3070\u3044\u3051\u308b\u3068\u601d\u3046\u3002\n* `get` \u4ee5\u5916\u3082\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3067\u3059\u3002\n  * post data\u304c\u3042\u308b\u5834\u5408\u306f\u7f72\u540d\u306b\u542b\u3081\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u3081\u3093\u3069\u304f\u3055\u3044\u304b\u3089\u975e\u5bfe\u5fdc\u3002\n\n```perl:oauth_header.pl\n#!/usr/bin/perl\n\nuse strict; \nuse warnings;\nuse URI::Escape;\nuse MIME::Base64;\nuse Digest::HMAC_SHA1;\nuse String::Random qw( random_regex );\n\nuse constant CONSUMER_KEY    => \"YOUR_CONSUMER_KEY\";\nuse constant CONSUMER_SECRET => \"YOUR_CONSUMER_SECRET\";\nuse constant ACCESS_KEY      => \"YOUR_ACCESS_KEY\";\nuse constant ACCESS_SECRET   => \"YOUR_ACCESS_TOKEN\";\n\nsub oauth_header {\n    my ($method, $url) = @_;\n\n    my $timestamp = time();\n    my $nonce     = sub {\n        return random_regex('[a-zA-Z0-9_]{32}');\n    }->();\n\n    my $signature = sub {\n        my $base_string = sub {\n            my %parray = (\n                'oauth_version'          => \"1.0\",\n                'oauth_nonce'            => $nonce,\n                'oauth_timestamp'        => $timestamp,\n                'oauth_consumer_key'     => CONSUMER_KEY,\n                'oauth_token'            => ACCESS_KEY,\n                'oauth_signature_method' => \"HMAC-SHA1\",\n            );\n\n            my @sorted_params = ();\n            foreach my $key (sort keys %parray) {\n                push(@sorted_params, $key . \"=\" . $parray{$key});\n            }\n            return uri_escape( join(\"&\", @sorted_params) );\n        }->();\n\n        my $sig_string = uc($method) . \"&\" . uri_escape($url) . \"&\" . $base_string;\n        my $hmac_sha1_key = CONSUMER_SECRET . \"&\" . ACCESS_SECRET;\n        my $sig_base64 = encode_base64(Digest::HMAC_SHA1::hmac_sha1($sig_string, $hmac_sha1_key));\n        chomp($sig_base64);\n\n        return uri_escape($sig_base64);\n    }->();\n\n    my %params = (\n        \"oauth_consumer_key\"     => CONSUMER_KEY,\n        \"oauth_nonce\"            => $nonce,\n        \"oauth_signature\"        => $signature,\n        \"oauth_signature_method\" => \"HMAC-SHA1\",\n        \"oauth_timestamp\"        => $timestamp,\n        \"oauth_token\"            => ACCESS_KEY,\n        \"oauth_version\"          => \"1.0\",\n    );\n\n    my @joined_params = ();\n    foreach my $key (sort keys %params) {\n        push(@joined_params, $key . '=\"' . $params{$key} . '\"');\n    }\n\n    my $header = \"Authorization: OAuth \";\n    return $header . join(\", \", @joined_params);\n}\n\n\nmy $method = $ARGV[0];\nmy $url    = $ARGV[1];\n\nprint oauth_header($method, $url);\n```\n\n## \u4f7f\u3046\u3084\u3064\n\n\u3068\u308a\u3042\u3048\u305atwitter\u306etimeline\u53e9\u3044\u3066\u307f\u308b\u3002\n\npost data\u7121\u3057\u306a\u3089`post`\u3068\u304b\u3067\u3082\u305f\u3076\u3093\u3044\u3051\u308b\u3002\n\n```bash:access.sh\n#!/bin/bash\n\nMETHOD=GET\nURL=https://api.twitter.com/1.1/statuses/home_timeline.json\n\ncurl --silent -X $METHOD --header \"`./oauth_header.pl $METHOD $URL`\" $URL\n```\n\n## \u3061\u306a\u307f\u306bbash\u3060\u3068\n\n\u9014\u4e2d\u307e\u3067bash\u3067\u66f8\u3044\u3066\u305f\u3064\u3044\u3067\u306b\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u306e\u3067\u3001\u53c2\u8003\u307e\u3067\u306b\u3002\n\n### hmac-sha1\n\n`echo -n \"hoge\" | openssl dgst -sha1 -hmac \"key\"`\n\n### base64\n\n`echo -n \"hoge\" | openssl base64`\n\n### nonce\n\n`/dev/urandom` \u3068 base64\u3042\u305f\u308a\u4f7f\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u3068\u601d\u3046\u3002\n\n### \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n\n`date +%s`\n\n### urlencode\n\n\u9014\u4e2d\u307e\u3067`nkf`\u3067\u3044\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u305f\u3051\u3069\u3001\n\u3053\u308c\u3060\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u307e\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u8ae6\u3081\u305f\u3002\n\n`echo \u307b\u3052\u307b\u3052 | nkf -wMQ | tr = %`\n\n\u3082\u3057\u304b\u3057\u305f\u3089 `sed -e \"s/\\%5F/_/g\"` \u306b\u6d41\u305b\u3070\u623b\u305b\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\n\u305d\u3082\u305d\u3082\u3061\u3083\u3093\u3068\u3057\u305f`urlencode`\u7528\u306e\u51e6\u7406\u3058\u3083\u306a\u3044\u3063\u307d\u3044\u306e\u3067\u3001\n\u4ed6\u306b\u3082\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u305d\u3046\u306a\u306e\u3067\u3001\u65ad\u5ff5\u3002\n", "tags": ["Perl", "Bash", "OAuth"]}