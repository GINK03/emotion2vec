{"context": " More than 1 year has passed since last update.boost\u30e9\u30a4\u30d6\u30e9\u30ea\u3000& c++11\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\u518d\u5e30\u3092\u5229\u7528\u3057\u3066\u307e\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3(windows)\nmingw32-g++ -std=c++11 -Ic:\\boost\\include\\boost-1_53 hukashigi.cpp\n#include <iostream>\n#include <string>\n#include <boost/algorithm/string.hpp>\n\nstruct table\n{\n  int t[11][11];\n};\n\nstruct position \n{\n  int p[2];\n};\n\nenum E_POS { ROW, COL };\n\nlong move(const struct table & ct, const struct position & cpos, long cnt)\n{\n  const int t_move[2] = {-1,1};\n  if(cpos.p[ROW] == 9 && cpos.p[COL] == 9) return (++cnt);\n  for(int i = 0; i < 2; ++i) //ROW,COL\n  {\n    for(int j = 0; j < 2; ++j) //\u4e0a\u4e0b\u3001\u5de6\u53f3\n    {\n      struct table t = ct;\n      struct position pos = cpos;\n      pos.p[i] += t_move[j];\n      if(t.t[pos.p[ROW]][pos.p[COL]] != 0) continue;\n      pos.p[i] += t_move[j];\n      if(t.t[pos.p[ROW]][pos.p[COL]] != 0) continue;\n      t.t[pos.p[ROW]][pos.p[COL]] = 1;\n      cnt = move(t, pos, cnt);\n    }\n  }\n  return cnt;\n}\n\nint solve(const std::string & input)\n{\n  struct table t = \n  {{\n    1,1,1,1,1,1,1,1,1,1,1,\n    1,1,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,1,1,1,1,1,1,1,1,1,1,\n  }};\n  if(input.length() != 0)\n  {\n    std::list<std::string> results;\n    boost::split(results, input, boost::is_any_of(\" \"));\n    for(const std::string str: results)\n      t.t[(((str.at(0)-'a')/5*2+1)+((str.at(1)-'a')/5*2+1))/2]\n         [(((str.at(0)-'a')%5*2+1)+((str.at(1)-'a')%5*2+1))/2] = 1;\n  }\n  struct position pos = {{1,1}};\n  long cnt = 0;\n  cnt = move(t, pos, cnt);\n  return cnt;\n}\n\nvoid test(const std::string & input, int ans)\n{\n  std::string check = (solve(input)==ans) ? \n    \"\u30fe(*\u2267\u2200\u2266)\uff89\uff9e \u5b09\uff7d\uff68\uff5e\u2605\u266a\": \"\uff61\uff65\uff9f\uff65(*\uff89\u0414`*)\uff65\uff9f\uff65\u3002\";\n  std::cout << check << std::endl;\n}\n\nint main(void)\n{\n  test(\"\",8512);\n  test(\"af\",4256);\n  test(\"xy\",4256);\n  test(\"pq qr rs st di in ns sx\",184);\n  test(\"af pq qr rs st di in ns sx\",92);\n  test(\"bg ch di ij no st\",185);\n  test(\"bc af ch di no kp mr ns ot pu rs\",16);\n  test(\"ab af\",0);\n  test(\"ty xy\",0);\n  test(\"bg ch ej gh lm lq mr ot rs sx\",11);\n  test(\"ty ch hi mn kp mr rs sx\",18);\n  test(\"xy ch hi mn kp mr rs sx\",32);\n  test(\"ch hi mn kp mr rs sx\",50);\n  test(\"ab cd uv wx\",621);\n  test(\"gh mn st lq qr\",685);\n  test(\"fg gl lm mr rs\",171);\n  return 0;\n}\n\n\nboost\u30e9\u30a4\u30d6\u30e9\u30ea\u3000& c++11\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\u518d\u5e30\u3092\u5229\u7528\u3057\u3066\u307e\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3(windows)\nmingw32-g++ -std=c++11 -Ic:\\boost\\include\\boost-1_53 hukashigi.cpp\n\n```cpp:\n#include <iostream>\n#include <string>\n#include <boost/algorithm/string.hpp>\n\nstruct table\n{\n  int t[11][11];\n};\n\nstruct position \n{\n  int p[2];\n};\n\nenum E_POS { ROW, COL };\n\nlong move(const struct table & ct, const struct position & cpos, long cnt)\n{\n  const int t_move[2] = {-1,1};\n  if(cpos.p[ROW] == 9 && cpos.p[COL] == 9) return (++cnt);\n  for(int i = 0; i < 2; ++i) //ROW,COL\n  {\n    for(int j = 0; j < 2; ++j) //\u4e0a\u4e0b\u3001\u5de6\u53f3\n    {\n      struct table t = ct;\n      struct position pos = cpos;\n      pos.p[i] += t_move[j];\n      if(t.t[pos.p[ROW]][pos.p[COL]] != 0) continue;\n      pos.p[i] += t_move[j];\n      if(t.t[pos.p[ROW]][pos.p[COL]] != 0) continue;\n      t.t[pos.p[ROW]][pos.p[COL]] = 1;\n      cnt = move(t, pos, cnt);\n    }\n  }\n  return cnt;\n}\n\nint solve(const std::string & input)\n{\n  struct table t = \n  {{\n    1,1,1,1,1,1,1,1,1,1,1,\n    1,1,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,0,0,0,0,0,0,0,0,0,1,\n    1,1,1,1,1,1,1,1,1,1,1,\n  }};\n  if(input.length() != 0)\n  {\n    std::list<std::string> results;\n    boost::split(results, input, boost::is_any_of(\" \"));\n    for(const std::string str: results)\n      t.t[(((str.at(0)-'a')/5*2+1)+((str.at(1)-'a')/5*2+1))/2]\n         [(((str.at(0)-'a')%5*2+1)+((str.at(1)-'a')%5*2+1))/2] = 1;\n  }\n  struct position pos = {{1,1}};\n  long cnt = 0;\n  cnt = move(t, pos, cnt);\n  return cnt;\n}\n\nvoid test(const std::string & input, int ans)\n{\n  std::string check = (solve(input)==ans) ? \n    \"\u30fe(*\u2267\u2200\u2266)\uff89\uff9e \u5b09\uff7d\uff68\uff5e\u2605\u266a\": \"\uff61\uff65\uff9f\uff65(*\uff89\u0414`*)\uff65\uff9f\uff65\u3002\";\n  std::cout << check << std::endl;\n}\n\nint main(void)\n{\n  test(\"\",8512);\n  test(\"af\",4256);\n  test(\"xy\",4256);\n  test(\"pq qr rs st di in ns sx\",184);\n  test(\"af pq qr rs st di in ns sx\",92);\n  test(\"bg ch di ij no st\",185);\n  test(\"bc af ch di no kp mr ns ot pu rs\",16);\n  test(\"ab af\",0);\n  test(\"ty xy\",0);\n  test(\"bg ch ej gh lm lq mr ot rs sx\",11);\n  test(\"ty ch hi mn kp mr rs sx\",18);\n  test(\"xy ch hi mn kp mr rs sx\",32);\n  test(\"ch hi mn kp mr rs sx\",50);\n  test(\"ab cd uv wx\",621);\n  test(\"gh mn st lq qr\",685);\n  test(\"fg gl lm mr rs\",171);\n  return 0;\n}\n\n```", "tags": ["C++", "\u3069\u3046\u66f8\u304f", "yhpg"]}