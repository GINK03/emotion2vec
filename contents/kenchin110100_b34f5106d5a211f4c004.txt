{"tags": ["Python", "Chainer", "DeepLearning", "\u6a5f\u68b0\u5b66\u7fd2", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"], "context": "chainer\u3067sequence to sequence\u306e\u5b9f\u88c5\u3092\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u30b3\u30fc\u30c9\u3068\u691c\u8a3c\n\n\u306f\u3058\u3081\u306b\nRNN\u7cfb\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u305f\u6587\u306e\u751f\u6210\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001\u6709\u540d\u306a\u3082\u306e\u306bsequence to sequence\uff08Seq2Seq\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3053\u306eSeq2Seq\u3092chainer\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u305f\u969b\u306e\u65b9\u6cd5\u3068\u691c\u8a3c\u306b\u7d50\u679c\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\nSequence to Sequence\uff08Seq2Seq\uff09\nSeq2Seq\u3068\u306f\u3001RNN\u3092\u7528\u3044\u305fEncoderDecoder\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3042\u308a\u3001\u6a5f\u68b0\u5bfe\u8a71\u3084\u6a5f\u68b0\u7ffb\u8a33\u306a\u3069\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5143\u8ad6\u6587\u306f\u3053\u308c\nSutskever, Ilya, Oriol Vinyals, and Quoc V. Le. \"Sequence to sequence learning with neural networks.\" Advances in neural information processing systems. 2014.\nSeq2Seq\u306e\u30d5\u30ed\u30fc\u306e\u6982\u7565\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\n\n\u4f8b\u3048\u3070\u3001\u300c\u6c17\u5206\u306f\u3069\u3046\uff1f\u300d\u3001\u300c\u304b\u306a\u308a\u826f\u3044\u3067\u3059\u306d\u300d\u3068\u8a00\u3063\u305f\u767a\u8a71\u3068\u5fdc\u7b54\u304c\u3042\u3063\u305f\u5834\u5408\u3001Encoder\uff08\u56f3\u4e2d\u306e\u9752\u8272\uff09\u5074\u3067\u3001\u767a\u8a71\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3001Decoder\uff08\u56f3\u4e2d\u306e\u8d64\u8272\uff09\u5074\u3067\u3001\u5fdc\u7b54\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306bRNN\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\u300c<'EOS'>\u300d\u306fEnd Of Statement\u306e\u7565\u3067\u3001\u6587\u304c\u3053\u3053\u3067\u7d42\u308f\u308a\u3067\u3059\u3088\u3068\u3044\u3046\u5408\u56f3\u3002\nSeq2Seq\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u767a\u8a71\u3092\u9006\u5411\u304d\u304b\u3089\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3042\u308a\u3001\u300c\u6c17\u5206\u306f\u3069\u3046\uff1f\u300d\u3068\u3044\u3046\u767a\u8a71\u306a\u3089\u3001\u300c<?>\u3001<\u3069\u3046>\u3001<\u306f>\u3001<\u6c17\u5206>\u300d\u3068\u3044\u3046\u9806\u306bEncoder\u306b\u5165\u529b\u3057\u307e\u3059\u3002\nEncoder\u5074\u3068Decoder\u5074\u3067\u306f\u305d\u308c\u305e\u308c\u5225\u3005\u306eEmbed\u3092\u4f7f\u3044\u3001\u751f\u6210\u3055\u308c\u305f\u4e2d\u9593\u5c64\uff08\u56f3\u4e2d\u306e\u8d64\u7dda\uff09\u306e\u307f\u3092\u5171\u6709\u3057\u307e\u3059\u3002\nSeq2Seq\u306fRNN\u7cfb\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306fLong Short Term Memory\uff08LSTM\uff09\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nLSTM\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3001\nhttp://qiita.com/t_Signull/items/21b82be280b46f467d1b\nhttp://qiita.com/KojiOhki/items/89cd7b69a8a6239d67ca\n\u3042\u305f\u308a\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3002\nLSTM\u306e\u30dd\u30a4\u30f3\u30c8\u306fLSTM\u81ea\u4f53\u304c\u30e1\u30e2\u30ea\u30bb\u30eb\uff08\u8a18\u61b6\u306e\u96c6\u7a4d\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3092\u3082\u3061\u3001\u65b0\u305f\u306a\u5165\u529b\u304c\u3055\u308c\u305f\u969b\u306b\u3001\u30e1\u30e2\u30ea\u30bb\u30eb\u3092\u3001\u5fd8\u308c\u308b\uff08Forget Gate\uff09\u3001\u899a\u3048\u308b\uff08Input Gate\uff09\u3001\u51fa\u3059\uff08Output Gate\uff09\u3068\u3044\u3046\u64cd\u4f5c\u3092\u3059\u308b\u70b9\u3067\u3059\u3002\n\n\u5b9f\u88c5\n\u4eca\u56de\u306fchainer\u3092\u4f7f\u3063\u3066Seq2Seq\u306e\u5b9f\u88c5\u3057\u305f\u3002\nSeq2Seq\u3092chainer\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3088\u3046\u306b\u5fc3\u304c\u3051\u305f\uff08\u3064\u3082\u308a\u3067\u3042\u308b\uff09\u3002\n\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\u306f\nhttps://github.com/odashi/chainer_examples\n\u3067\u3059\u3002\noda\u69d8\u3001\u3044\u3064\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nchainer\u3067\u306f\u3001NN\u306e\u30e2\u30c7\u30eb\u3092\u30af\u30e9\u30b9\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nEncoder\n\u307e\u305a\u3001\u767a\u8a71\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306eEncoder\n\nencoder.py\n\nclass LSTM_Encoder(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size):\n        \"\"\"\n        \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\n        :param vocab_size: \u4f7f\u308f\u308c\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff08\u8a9e\u5f59\u6570\uff09\n        :param embed_size: \u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3057\u305f\u969b\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u5c64\u306e\u30b5\u30a4\u30ba\n        \"\"\"\n        super(LSTM_Encoder, self).__init__(\n            # \u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            xe = links.EmbedID(vocab_size, embed_size, ignore_label=-1),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u96a0\u308c\u5c64\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            eh = links.Linear(embed_size, 4 * hidden_size),\n            # \u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u5c64\u30924\u500d\u306e\u30b5\u30a4\u30ba\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u5c64\n            hh = links.Linear(hidden_size, 4 * hidden_size)\n        )\n\n    def __call__(self, x, c, h):\n        \"\"\"\n        Encoder\u306e\u52d5\u4f5c\n        :param x: one-hot\u306a\u30d9\u30af\u30c8\u30eb\n        :param c: \u5185\u90e8\u30e1\u30e2\u30ea\n        :param h: \u96a0\u308c\u5c64\n        :return: \u6b21\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u6b21\u306e\u96a0\u308c\u5c64\n        \"\"\"\n        # xe\u3067\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3092tanh\u306b\u304b\u3051\u308b\n        e = functions.tanh(self.xe(x))\n        # \u524d\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u306e\u5024\u3068\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u30b5\u30a4\u30ba\u3001\u4e2d\u9593\u5c64\u306e4\u500d\u30b5\u30a4\u30ba\u3092\u8db3\u3057\u5408\u308f\u305b\u3066\u5165\u529b\n        return functions.lstm(c, self.eh(e) + self.hh(h))\n\n\n\nEncoder\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u306a\u305c\u6307\u5b9a\u3057\u305f\u96a0\u308c\u5c64\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306b\u30d9\u30af\u30c8\u30eb\u3092\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u70b9\u306b\u3042\u308b\u3002\nchainer\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3067\u306f\u3001\n\n\u3068\u3042\u308b\u3002\n\u3064\u307e\u308a\u3001\u300c\u5165\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092forget\u7528\u3001input\u7528\u3001output\u7528\u3001cell\u7528\u306b\u5206\u3051\u308b\u304b\u30894\u500d\u306e\u30b5\u30a4\u30ba\u306b\u3057\u3066\u306d\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\nchainer\u306efunctions.lstm\u3067\u306f\u3001\u95a2\u6570\u306e\u8a08\u7b97\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u3060\u3051\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u884c\u3063\u3066\u304f\u308c\u306a\u3044\u3002\u305d\u3053\u3067\u3001\u30b3\u30fc\u30c9\u4e2d\u306eeh\u3084hh\u304c\u4ee3\u308f\u308a\u306b\u305d\u306e\u5f79\u5272\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u3053\u3093\u306a\u3081\u3093\u3069\u304f\u3055\u3044\u3053\u3068\u3057\u306a\u304f\u3066\u3082chainer\u306b\u306flinks.LSTM\u3068\u3044\u3046\u3001\u5165\u529b\u3055\u3048\u5165\u308c\u308c\u3070\u3001\u51fa\u529b\u3060\u3051\u3092\u51fa\u3057\u3066\u3001\u5b66\u7fd2\u307e\u3067\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u5b58\u5728\u3059\u308b\u306e\u3060\u304c\u3001\u4eca\u56de\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u305c\u306a\u3089\u96a0\u308c\u5c64\u306e\u5024\u3092Encoder\u3068Decoder\u3067\u5171\u6709\u3055\u305b\u305f\u3044\u304b\u3089\uff08\u305d\u308c\u3067\u3082links.LSTM\u304c\u4f7f\u3048\u308b\u3068\u306f\u601d\u3046\u304c\u3001\u4eca\u56de\u306f\u4eca\u5f8c\u306e\u305f\u3081\u3068\u3044\u3046\u3053\u3068\u3067\u30fb\u30fb\u30fb\uff09\u3002\n\u306a\u306e\u3067\u8a08\u7b97\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3001\u7dda\u304c\u91cd\u306a\u3063\u3066\u898b\u306b\u304f\u3044\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\n\nDecoder\n\u6b21\u306bDecoder\u306b\u3064\u3044\u3066\u3001\n\ndecoder.py\n\nclass LSTM_Decoder(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size):\n        \"\"\"\n        \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\n        :param vocab_size: \u4f7f\u308f\u308c\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff08\u8a9e\u5f59\u6570\uff09\n        :param embed_size: \u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3057\u305f\u969b\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        \"\"\"\n        super(LSTM_Decoder, self).__init__(\n            # \u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            ye = links.EmbedID(vocab_size, embed_size, ignore_label=-1),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            eh = links.Linear(embed_size, 4 * hidden_size),\n            # \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            hh = links.Linear(hidden_size, 4 * hidden_size),\n            # \u51fa\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\u306b\u5909\u63db\u3059\u308b\u5c64\n            he = links.Linear(hidden_size, embed_size),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\uff08one-hot\u306a\u30d9\u30af\u30c8\u30eb\uff09\u306b\u5909\u63db\u3059\u308b\u5c64\n            ey = links.Linear(embed_size, vocab_size)\n        )\n\n    def __call__(self, y, c, h):\n        \"\"\"\n\n        :param y: one-hot\u306a\u30d9\u30af\u30c8\u30eb\n        :param c: \u5185\u90e8\u30e1\u30e2\u30ea\n        :param h: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        :return: \u4e88\u6e2c\u5358\u8a9e\u3001\u6b21\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u6b21\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        \"\"\"\n        # \u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3001tanh\u306b\u304b\u3051\u308b\n        e = functions.tanh(self.ye(y))\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e4\u500d+\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u3092LSTM\u306b\u304b\u3051\u308b\n        c, h = functions.lstm(c, self.eh(e) + self.hh(h))\n        # \u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u30b5\u30a4\u30ba\u306e\u51fa\u529b\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n        t = self.ey(functions.tanh(self.he(h)))\n        return t, c, h\n\n\n\nDecoder\u3067\u3082\u540c\u3058\u304f\u30d9\u30af\u30c8\u30eb\u30924\u500d\u306e\u30b5\u30a4\u30ba\u306b\u3057\u307e\u3059\u3002\u9055\u3046\u70b9\u306f\u3001\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u6570\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u70b9\u3002\n\u3057\u305f\u304c\u3063\u3066\u3001Encoder\u306b\u306f\u306a\u304b\u3063\u305f\u3001he\u3001ey\u3068\u3044\u3046\u5c64\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a08\u7b97\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u56f3\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u611f\u3058\n\nDecorder\u3067\u3001\u51fa\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\n\nSeq2Seq\n\u3053\u308c\u3089\u306eEncoder, Decoder\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u6210\u3057\u305fSeq2Seq\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\nseq2seq.py\n\nclass Seq2Seq(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size, batch_size, flag_gpu=True):\n        \"\"\"\n        Seq2Seq\u306e\u521d\u671f\u5316\n        :param vocab_size: \u8a9e\u5f59\u30b5\u30a4\u30ba\n        :param embed_size: \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        :param batch_size: \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u30b5\u30a4\u30ba\n        :param flag_gpu: GPU\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\n        \"\"\"\n        super(Seq2Seq, self).__init__(\n            # Encoder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n            encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # Decoder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n            decoder = LSTM_Decoder(vocab_size, embed_size, hidden_size)\n        )\n        self.vocab_size = vocab_size\n        self.embed_size = embed_size\n        self.hidden_size = hidden_size\n        self.batch_size = batch_size\n        # GPU\u3067\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fcupy\u3092CPU\u3067\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fnumpy\u3092\u4f7f\u3046\n        if flag_gpu:\n            self.ARR = cuda.cupy\n        else:\n            self.ARR = np\n\n    def encode(self, words):\n        \"\"\"\n        Encoder\u3092\u8a08\u7b97\u3059\u308b\u90e8\u5206\n        :param words: \u5358\u8a9e\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :return:\n        \"\"\"\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n        # \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u5358\u8a9e\u3092\u9806\u756a\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b\n        for w in words:\n            c, h = self.encoder(w, c, h)\n\n        # \u8a08\u7b97\u3057\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u5f15\u304d\u7d99\u3050\u305f\u3081\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u3059\u308b\n        self.h = h\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u306f\u5f15\u304d\u7d99\u304c\u306a\u3044\u306e\u3067\u3001\u521d\u671f\u5316\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n    def decode(self, w):\n        \"\"\"\n        \u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u8a08\u7b97\u3059\u308b\u90e8\u5206\n        :param w: \u5358\u8a9e\n        :return: \u5358\u8a9e\u6570\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3059\u308b\n        \"\"\"\n        t, self.c, self.h = self.decoder(w, self.c, self.h)\n        return t\n\n    def reset(self):\n        \"\"\"\n        \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u52fe\u914d\u306e\u521d\u671f\u5316\n        :return:\n        \"\"\"\n        self.h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n        self.zerograds()\n\n\n\nSeq2Seq\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u884c\u3046\u3002\n\nforward.py\n\ndef forward(enc_words, dec_words, model, ARR):\n    \"\"\"\n    \u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\n    :param enc_words: \u767a\u8a71\u6587\u306e\u5358\u8a9e\u3092\u8a18\u9332\u3057\u305f\u30ea\u30b9\u30c8\n    :param dec_words: \u5fdc\u7b54\u6587\u306e\u5358\u8a9e\u3092\u8a18\u9332\u3057\u305f\u30ea\u30b9\u30c8\n    :param model: Seq2Seq\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    :param ARR: cuda.cupy\u304bnumpy\u304b\n    :return: \u8a08\u7b97\u3057\u305f\u640d\u5931\u306e\u5408\u8a08\n    \"\"\"\n    # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a18\u9332\n    batch_size = len(enc_words[0])\n    # model\u5185\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u52fe\u914d\u3092\u30ea\u30bb\u30c3\u30c8\n    model.reset()\n    # \u767a\u8a71\u30ea\u30b9\u30c8\u5185\u306e\u5358\u8a9e\u3092\u3001chainer\u306e\u578b\u3067\u3042\u308bVariable\u578b\u306b\u5909\u66f4\n    enc_words = [Variable(ARR.array(row, dtype='int32')) for row in enc_words]\n    # \u30a8\u30f3\u30b3\u30fc\u30c9\u306e\u8a08\u7b97 \u2474\n    model.encode(enc_words)\n    # \u640d\u5931\u306e\u521d\u671f\u5316\n    loss = Variable(ARR.zeros((), dtype='float32'))\n    # <eos>\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b (2)\n    t = Variable(ARR.array([0 for _ in range(batch_size)], dtype='int32'))\n    # \u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u8a08\u7b97\n    for w in dec_words:\n        # 1\u5358\u8a9e\u305a\u3064\u30c7\u30b3\u30fc\u30c9\u3059\u308b (3)\n        y = model.decode(t)\n        # \u6b63\u89e3\u5358\u8a9e\u3092Variable\u578b\u306b\u5909\u63db\n        t = Variable(ARR.array(w, dtype='int32'))\n        # \u6b63\u89e3\u5358\u8a9e\u3068\u4e88\u6e2c\u5358\u8a9e\u3092\u7167\u3089\u3057\u5408\u308f\u305b\u3066\u640d\u5931\u3092\u8a08\u7b97 (4)\n        loss += functions.softmax_cross_entropy(y, t)\n    return loss\n\n\n\n\u3053\u306e\u8a08\u7b97\u306e\u6d41\u308c\u3092\u56f3\u793a\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n\u5b66\u7fd2\u3055\u305b\u308benc_words\u3001dec_words\u5185\u306e\u5358\u8a9e\u306f\u3042\u3089\u304b\u3058\u3081ID\u5316\uff08\u6570\u5b57\u306b\u76f4\u3059\uff09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u640d\u5931\u306e\u8a08\u7b97\u306b\u306fsoftmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\u3042\u3068\u306fforward\u3067\u8a08\u7b97\u3057\u305f\u640d\u5931\u3092chainer\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u66f4\u65b0\u3001\u3068\u3044\u3046\u7e70\u308a\u8fd4\u3057\u3092\u884c\u3046\u3060\u3051\u3002\n\u5b66\u7fd2\u306e\u30e1\u30a4\u30f3\u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\ntrain.py\n\ndef train():\n    # \u8a9e\u5f59\u6570\u306e\u78ba\u8a8d\n    vocab_size = len(word_to_id)\n    # \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n    model = Seq2Seq(vocab_size=vocab_size,\n                    embed_size=EMBED_SIZE,\n                    hidden_size=HIDDEN_SIZE,\n                    batch_size=BATCH_SIZE,\n                    flag_gpu=FLAG_GPU)\n    # \u30e2\u30c7\u30eb\u306e\u521d\u671f\u5316\n    model.reset()\n    # GPU\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u6c7a\u3081\u308b\n    if FLAG_GPU:\n        ARR = cuda.cupy\n        # \u30e2\u30c7\u30eb\u3092GPU\u306e\u30e1\u30e2\u30ea\u306b\u5165\u308c\u308b\n        cuda.get_device(0).use()\n        model.to_gpu(0)\n    else:\n        ARR = np\n\n    # \u5b66\u7fd2\u958b\u59cb\n    for epoch in range(EPOCH_NUM):\n        # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306boptimizer\u306e\u521d\u671f\u5316\n        # \u7121\u96e3\u306bAdam\u3092\u4f7f\u3044\u307e\u3059\n        opt = optimizers.Adam()\n        # \u30e2\u30c7\u30eb\u3092optimizer\u306b\u30bb\u30c3\u30c8\n        opt.setup(model)\n        # \u52fe\u914d\u304c\u5927\u304d\u3059\u304e\u308b\u5834\u5408\u306b\u8abf\u6574\u3059\u308b\n        opt.add_hook(optimizer.GradientClipping(5))\n\n        # \u3042\u3089\u304b\u3058\u3081\u4f5c\u3063\u3066\u304a\u3044\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n        data = Filer.read_pkl(path)\n        # \u30c7\u30fc\u30bf\u306e\u30b7\u30e3\u30c3\u30d5\u30eb\n        random.shuffle(data)\n        # \u30d0\u30c3\u30c1\u5b66\u7fd2\u306e\u30b9\u30bf\u30fc\u30c8\n        for num in range(len(data)//BATCH_SIZE):\n            # \u4efb\u610f\u306e\u30b5\u30a4\u30ba\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u4f5c\u6210\n            minibatch = data[num*BATCH_SIZE: (num+1)*BATCH_SIZE]\n            # \u8aad\u307f\u8fbc\u307f\u7528\u306e\u30c7\u30fc\u30bf\u4f5c\u6210\n            enc_words, dec_words = make_minibatch(minibatch)\n            # \u9806\u4f1d\u64ad\u3067\u640d\u5931\u306e\u8a08\u7b97\n            total_loss = forward(enc_words=enc_words,\n                                 dec_words=dec_words,\n                                 model=model,\n                                 ARR=ARR)\n            # \u8aa4\u5dee\u9006\u4f1d\u64ad\u3067\u52fe\u914d\u306e\u8a08\u7b97\n            total_loss.backward()\n            # \u8a08\u7b97\u3057\u305f\u52fe\u914d\u3092\u4f7f\u3063\u3066\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u66f4\u65b0\n            opt.update()\n            # \u8a18\u9332\u3055\u308c\u305f\u52fe\u914d\u3092\u521d\u671f\u5316\u3059\u308b\n            opt.zero_grads()\n        # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n        serializers.save_hdf5(outputpath, model)\n\n\n\n\u304b\u306a\u308a\u9577\u304b\u3063\u305f\u3067\u3059\u304c\u30b3\u30fc\u30c9\u306e\u8aac\u660e\u306f\u4ee5\u4e0a\u3002\n\u3061\u306a\u307f\u306b\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\nhttps://github.com/kenchin110100/machine_learning/blob/master/sampleSeq2Sep.py\n\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u5b9f\u9a13\n\n\u30b3\u30fc\u30d1\u30b9\n\u5bfe\u8a71\u7834\u7dbb\u30b3\u30fc\u30d1\u30b9\nhttps://sites.google.com/site/dialoguebreakdowndetection/chat-dialogue-corpus\n\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u307b\u3093\u3068\u306f\u3082\u3063\u3068\u9577\u3044\u30b3\u30fc\u30d1\u30b9\u3067\u5b66\u7fd2\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u8ae6\u3081\u307e\u3057\u305f\u30fb\u30fb\u30fb\n\n\u5b9f\u9a13\u7d50\u679c\n\u767a\u8a71\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e4\u3064\n\ntoken1 = '\u304a\u306f\u3088\u3046'\ntoken2 = '\u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f'\ntoken3 = '\u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f'\ntoken4 = '\u4eca\u65e5\u306f\u6691\u3044\u3067\u3059'\n\nEpoch\u3054\u3068\u306b\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\u307e\u305a1 Epoch\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u306f\u3044', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u9000\u5c48', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u305d\u3046', '\u3067\u3059', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u305d\u3046', '\u3067\u3059', '</s>']\n\n\u54f2\u5b66\u8005\u3067\u3059\u304b\uff1f\n\u6b21\u306b3 Epoch\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u30b9\u30a4\u30ab', '\u306f', '\u5927\u597d\u304d', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u305d\u3046', '\u306a', '\u3093', '\u3067\u3059', '\u304b', '?', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4f55', '\u304b', '\u306b', '\u884c\u3063', '\u3066', '\u307e\u3059', '\u304b', '?', '</s>']\n\n\u3069\u3053\u306b\u3082\u884c\u3063\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\n5 Epoch\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u6d77', '\u306f', '\u4e00', '\u4eba', '\u3067', '\u884c\u3063', '\u3066', '\u307e\u3059', '\u304b', '?', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u3046\u3093', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4f55', '\u3092', '\u98df\u3079', '\u307e\u3057', '\u305f', '\u304b', '?', '</s>']\n\n\u6d77\u306b\u3082\u884c\u3063\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\n8 Epoch\u306a\u3089\u30fb\u30fb\u30fb\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u30af\u30e9\u30b2', '\u306f', '\u3044\u3044', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u540c\u3058\u304f', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u71b1\u4e2d\u75c7', '\u306b', '\u6c17', '\u3092', '\u3064\u3051', '\u306a\u3044', '\u3093', '\u3067\u3059', '\u304b', '?', '</s>']\n\n\u3060\u3044\u3076\u60dc\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u304f\u3089\u3044\u304c\u9650\u754c\u3067\u3057\u3087\u3046\u304b\u30fb\u30fb\u30fb\n\u3053\u308c\u4ee5\u4e0a\u306eEpoch\u3082\u8a66\u3057\u3066\u898b\u307e\u3057\u305f\u304c\u3001\u3042\u3093\u307e\u308a\u7cbe\u5ea6\u306f\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u7d50\u8ad6\nchainer\u3092\u4f7f\u3063\u3066\u4eca\u66f4Seq2Seq\u306e\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u5927\u304d\u3044\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u3048\u3070\u7cbe\u5ea6\u304c\u826f\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u3068\u306a\u304b\u306a\u304b\u53ce\u675f\u3057\u307e\u305b\u3093\u30fb\u30fb\u30fb\n\u3061\u306a\u307f\u306b\u30bf\u30a4\u30c8\u30eb\u306b\uff081\uff09\u3068\u3064\u3051\u305f\u306e\u306f\u7b2c2\u5f3e\u3001\u7b2c3\u5f3e\u3092\u8003\u3048\u3066\u3044\u308b\u304b\u3089\u3067\u3059\uff01\uff01\n\u6b21\u306f\u3001\u3053\u306eSeq2Seq\u306bAttention\u3092\u3064\u3051\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nchainer\u3067sequence to sequence\u306e\u5b9f\u88c5\u3092\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u30b3\u30fc\u30c9\u3068\u691c\u8a3c\n\n# \u306f\u3058\u3081\u306b\n\nRNN\u7cfb\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u305f\u6587\u306e\u751f\u6210\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001\u6709\u540d\u306a\u3082\u306e\u306bsequence to sequence\uff08Seq2Seq\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3053\u306eSeq2Seq\u3092chainer\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u305f\u969b\u306e\u65b9\u6cd5\u3068\u691c\u8a3c\u306b\u7d50\u679c\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n# Sequence to Sequence\uff08Seq2Seq\uff09\n\nSeq2Seq\u3068\u306f\u3001RNN\u3092\u7528\u3044\u305fEncoderDecoder\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3042\u308a\u3001\u6a5f\u68b0\u5bfe\u8a71\u3084\u6a5f\u68b0\u7ffb\u8a33\u306a\u3069\u306e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5143\u8ad6\u6587\u306f\u3053\u308c\nSutskever, Ilya, Oriol Vinyals, and Quoc V. Le. \"Sequence to sequence learning with neural networks.\" Advances in neural information processing systems. 2014.\n\nSeq2Seq\u306e\u30d5\u30ed\u30fc\u306e\u6982\u7565\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\n\n![seq2seq.png](https://qiita-image-store.s3.amazonaws.com/0/155619/9e8679d4-6c53-67ce-d83a-50e529b7ac90.png)\n\n\u4f8b\u3048\u3070\u3001\u300c\u6c17\u5206\u306f\u3069\u3046\uff1f\u300d\u3001\u300c\u304b\u306a\u308a\u826f\u3044\u3067\u3059\u306d\u300d\u3068\u8a00\u3063\u305f\u767a\u8a71\u3068\u5fdc\u7b54\u304c\u3042\u3063\u305f\u5834\u5408\u3001Encoder\uff08\u56f3\u4e2d\u306e\u9752\u8272\uff09\u5074\u3067\u3001\u767a\u8a71\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3001Decoder\uff08\u56f3\u4e2d\u306e\u8d64\u8272\uff09\u5074\u3067\u3001\u5fdc\u7b54\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306bRNN\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u300c<'EOS'>\u300d\u306fEnd Of Statement\u306e\u7565\u3067\u3001\u6587\u304c\u3053\u3053\u3067\u7d42\u308f\u308a\u3067\u3059\u3088\u3068\u3044\u3046\u5408\u56f3\u3002\n\nSeq2Seq\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u767a\u8a71\u3092\u9006\u5411\u304d\u304b\u3089\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u3042\u308a\u3001\u300c\u6c17\u5206\u306f\u3069\u3046\uff1f\u300d\u3068\u3044\u3046\u767a\u8a71\u306a\u3089\u3001\u300c<?>\u3001<\u3069\u3046>\u3001<\u306f>\u3001<\u6c17\u5206>\u300d\u3068\u3044\u3046\u9806\u306bEncoder\u306b\u5165\u529b\u3057\u307e\u3059\u3002\n\nEncoder\u5074\u3068Decoder\u5074\u3067\u306f\u305d\u308c\u305e\u308c\u5225\u3005\u306eEmbed\u3092\u4f7f\u3044\u3001\u751f\u6210\u3055\u308c\u305f\u4e2d\u9593\u5c64\uff08\u56f3\u4e2d\u306e\u8d64\u7dda\uff09\u306e\u307f\u3092\u5171\u6709\u3057\u307e\u3059\u3002\n\nSeq2Seq\u306fRNN\u7cfb\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306fLong Short Term Memory\uff08LSTM\uff09\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\nLSTM\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3001\nhttp://qiita.com/t_Signull/items/21b82be280b46f467d1b\nhttp://qiita.com/KojiOhki/items/89cd7b69a8a6239d67ca\n\u3042\u305f\u308a\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3002\n\nLSTM\u306e\u30dd\u30a4\u30f3\u30c8\u306fLSTM\u81ea\u4f53\u304c\u30e1\u30e2\u30ea\u30bb\u30eb\uff08\u8a18\u61b6\u306e\u96c6\u7a4d\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3092\u3082\u3061\u3001\u65b0\u305f\u306a\u5165\u529b\u304c\u3055\u308c\u305f\u969b\u306b\u3001\u30e1\u30e2\u30ea\u30bb\u30eb\u3092\u3001\u5fd8\u308c\u308b\uff08Forget Gate\uff09\u3001\u899a\u3048\u308b\uff08Input Gate\uff09\u3001\u51fa\u3059\uff08Output Gate\uff09\u3068\u3044\u3046\u64cd\u4f5c\u3092\u3059\u308b\u70b9\u3067\u3059\u3002\n\n# \u5b9f\u88c5\n\n\u4eca\u56de\u306fchainer\u3092\u4f7f\u3063\u3066Seq2Seq\u306e\u5b9f\u88c5\u3057\u305f\u3002\n\nSeq2Seq\u3092chainer\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u304f\u3088\u3046\u306b\u5fc3\u304c\u3051\u305f\uff08\u3064\u3082\u308a\u3067\u3042\u308b\uff09\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u30b3\u30fc\u30c9\u306f\nhttps://github.com/odashi/chainer_examples\n\u3067\u3059\u3002\noda\u69d8\u3001\u3044\u3064\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\nchainer\u3067\u306f\u3001NN\u306e\u30e2\u30c7\u30eb\u3092\u30af\u30e9\u30b9\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n## Encoder\n\n\u307e\u305a\u3001\u767a\u8a71\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306eEncoder\n\n```encoder.py\n\nclass LSTM_Encoder(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size):\n        \"\"\"\n        \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\n        :param vocab_size: \u4f7f\u308f\u308c\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff08\u8a9e\u5f59\u6570\uff09\n        :param embed_size: \u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3057\u305f\u969b\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u5c64\u306e\u30b5\u30a4\u30ba\n        \"\"\"\n        super(LSTM_Encoder, self).__init__(\n            # \u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            xe = links.EmbedID(vocab_size, embed_size, ignore_label=-1),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u96a0\u308c\u5c64\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            eh = links.Linear(embed_size, 4 * hidden_size),\n            # \u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u5c64\u30924\u500d\u306e\u30b5\u30a4\u30ba\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u5c64\n            hh = links.Linear(hidden_size, 4 * hidden_size)\n        )\n\n    def __call__(self, x, c, h):\n        \"\"\"\n        Encoder\u306e\u52d5\u4f5c\n        :param x: one-hot\u306a\u30d9\u30af\u30c8\u30eb\n        :param c: \u5185\u90e8\u30e1\u30e2\u30ea\n        :param h: \u96a0\u308c\u5c64\n        :return: \u6b21\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u6b21\u306e\u96a0\u308c\u5c64\n        \"\"\"\n        # xe\u3067\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3066\u3001\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3092tanh\u306b\u304b\u3051\u308b\n        e = functions.tanh(self.xe(x))\n        # \u524d\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u306e\u5024\u3068\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u30b5\u30a4\u30ba\u3001\u4e2d\u9593\u5c64\u306e4\u500d\u30b5\u30a4\u30ba\u3092\u8db3\u3057\u5408\u308f\u305b\u3066\u5165\u529b\n        return functions.lstm(c, self.eh(e) + self.hh(h))\n\n```\n\nEncoder\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u306a\u305c\u6307\u5b9a\u3057\u305f\u96a0\u308c\u5c64\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306b\u30d9\u30af\u30c8\u30eb\u3092\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u304b\u3068\u3044\u3046\u70b9\u306b\u3042\u308b\u3002\n\nchainer\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3067\u306f\u3001\n<img width=\"671\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-23 18.06.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/155619/c0b4779b-1475-558c-ce20-b67943a3c5a7.png\">\n\u3068\u3042\u308b\u3002\n\n\u3064\u307e\u308a\u3001\u300c\u5165\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092forget\u7528\u3001input\u7528\u3001output\u7528\u3001cell\u7528\u306b\u5206\u3051\u308b\u304b\u30894\u500d\u306e\u30b5\u30a4\u30ba\u306b\u3057\u3066\u306d\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\nchainer\u306efunctions.lstm\u3067\u306f\u3001\u95a2\u6570\u306e\u8a08\u7b97\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u3060\u3051\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u884c\u3063\u3066\u304f\u308c\u306a\u3044\u3002\u305d\u3053\u3067\u3001\u30b3\u30fc\u30c9\u4e2d\u306eeh\u3084hh\u304c\u4ee3\u308f\u308a\u306b\u305d\u306e\u5f79\u5272\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u306f\u3053\u3093\u306a\u3081\u3093\u3069\u304f\u3055\u3044\u3053\u3068\u3057\u306a\u304f\u3066\u3082chainer\u306b\u306flinks.LSTM\u3068\u3044\u3046\u3001\u5165\u529b\u3055\u3048\u5165\u308c\u308c\u3070\u3001\u51fa\u529b\u3060\u3051\u3092\u51fa\u3057\u3066\u3001\u5b66\u7fd2\u307e\u3067\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u304c\u5b58\u5728\u3059\u308b\u306e\u3060\u304c\u3001\u4eca\u56de\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u305c\u306a\u3089\u96a0\u308c\u5c64\u306e\u5024\u3092Encoder\u3068Decoder\u3067\u5171\u6709\u3055\u305b\u305f\u3044\u304b\u3089\uff08\u305d\u308c\u3067\u3082links.LSTM\u304c\u4f7f\u3048\u308b\u3068\u306f\u601d\u3046\u304c\u3001\u4eca\u56de\u306f\u4eca\u5f8c\u306e\u305f\u3081\u3068\u3044\u3046\u3053\u3068\u3067\u30fb\u30fb\u30fb\uff09\u3002\n\n\u306a\u306e\u3067\u8a08\u7b97\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3001\u7dda\u304c\u91cd\u306a\u3063\u3066\u898b\u306b\u304f\u3044\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\n![encoder.png](https://qiita-image-store.s3.amazonaws.com/0/155619/7dec98e1-be77-7d69-4fbd-f946c2428780.png)\n\n## Decoder\n\n\u6b21\u306bDecoder\u306b\u3064\u3044\u3066\u3001\n\n```decoder.py\n\nclass LSTM_Decoder(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size):\n        \"\"\"\n        \u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\n        :param vocab_size: \u4f7f\u308f\u308c\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u6570\uff08\u8a9e\u5f59\u6570\uff09\n        :param embed_size: \u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3057\u305f\u969b\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        \"\"\"\n        super(LSTM_Decoder, self).__init__(\n            # \u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            ye = links.EmbedID(vocab_size, embed_size, ignore_label=-1),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            eh = links.Linear(embed_size, 4 * hidden_size),\n            # \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u5c64\n            hh = links.Linear(hidden_size, 4 * hidden_size),\n            # \u51fa\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\u306b\u5909\u63db\u3059\u308b\u5c64\n            he = links.Linear(hidden_size, embed_size),\n            # \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\uff08one-hot\u306a\u30d9\u30af\u30c8\u30eb\uff09\u306b\u5909\u63db\u3059\u308b\u5c64\n            ey = links.Linear(embed_size, vocab_size)\n        )\n\n    def __call__(self, y, c, h):\n        \"\"\"\n\n        :param y: one-hot\u306a\u30d9\u30af\u30c8\u30eb\n        :param c: \u5185\u90e8\u30e1\u30e2\u30ea\n        :param h: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        :return: \u4e88\u6e2c\u5358\u8a9e\u3001\u6b21\u306e\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u6b21\u306e\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\n        \"\"\"\n        # \u5165\u529b\u3055\u308c\u305f\u5358\u8a9e\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3001tanh\u306b\u304b\u3051\u308b\n        e = functions.tanh(self.ye(y))\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e4\u500d+\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e4\u500d\u3092LSTM\u306b\u304b\u3051\u308b\n        c, h = functions.lstm(c, self.eh(e) + self.hh(h))\n        # \u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u3001\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u30b5\u30a4\u30ba\u306e\u51fa\u529b\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n        t = self.ey(functions.tanh(self.he(h)))\n        return t, c, h\n\n```\n\nDecoder\u3067\u3082\u540c\u3058\u304f\u30d9\u30af\u30c8\u30eb\u30924\u500d\u306e\u30b5\u30a4\u30ba\u306b\u3057\u307e\u3059\u3002\u9055\u3046\u70b9\u306f\u3001\u51fa\u529b\u3055\u308c\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u8a9e\u5f59\u6570\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u70b9\u3002\n\n\u3057\u305f\u304c\u3063\u3066\u3001Encoder\u306b\u306f\u306a\u304b\u3063\u305f\u3001he\u3001ey\u3068\u3044\u3046\u5c64\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u8a08\u7b97\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u56f3\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u611f\u3058\n\n![decoder.png](https://qiita-image-store.s3.amazonaws.com/0/155619/27324a88-3cdf-e57b-3c29-191e1d826bb2.png)\n\n\nDecorder\u3067\u3001\u51fa\u529b\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3059\u3002\n\n## Seq2Seq\n\n\u3053\u308c\u3089\u306eEncoder, Decoder\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u6210\u3057\u305fSeq2Seq\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```seq2seq.py\n\nclass Seq2Seq(Chain):\n    def __init__(self, vocab_size, embed_size, hidden_size, batch_size, flag_gpu=True):\n        \"\"\"\n        Seq2Seq\u306e\u521d\u671f\u5316\n        :param vocab_size: \u8a9e\u5f59\u30b5\u30a4\u30ba\n        :param embed_size: \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        :param hidden_size: \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\n        :param batch_size: \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u30b5\u30a4\u30ba\n        :param flag_gpu: GPU\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\n        \"\"\"\n        super(Seq2Seq, self).__init__(\n            # Encoder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n            encoder = LSTM_Encoder(vocab_size, embed_size, hidden_size),\n            # Decoder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n            decoder = LSTM_Decoder(vocab_size, embed_size, hidden_size)\n        )\n        self.vocab_size = vocab_size\n        self.embed_size = embed_size\n        self.hidden_size = hidden_size\n        self.batch_size = batch_size\n        # GPU\u3067\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fcupy\u3092CPU\u3067\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fnumpy\u3092\u4f7f\u3046\n        if flag_gpu:\n            self.ARR = cuda.cupy\n        else:\n            self.ARR = np\n\n    def encode(self, words):\n        \"\"\"\n        Encoder\u3092\u8a08\u7b97\u3059\u308b\u90e8\u5206\n        :param words: \u5358\u8a9e\u304c\u8a18\u9332\u3055\u308c\u305f\u30ea\u30b9\u30c8\n        :return:\n        \"\"\"\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u3001\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u306e\u521d\u671f\u5316\n        c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n        # \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u5358\u8a9e\u3092\u9806\u756a\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b\n        for w in words:\n            c, h = self.encoder(w, c, h)\n\n        # \u8a08\u7b97\u3057\u305f\u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u5f15\u304d\u7d99\u3050\u305f\u3081\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u3059\u308b\n        self.h = h\n        # \u5185\u90e8\u30e1\u30e2\u30ea\u306f\u5f15\u304d\u7d99\u304c\u306a\u3044\u306e\u3067\u3001\u521d\u671f\u5316\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n    def decode(self, w):\n        \"\"\"\n        \u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u8a08\u7b97\u3059\u308b\u90e8\u5206\n        :param w: \u5358\u8a9e\n        :return: \u5358\u8a9e\u6570\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3059\u308b\n        \"\"\"\n        t, self.c, self.h = self.decoder(w, self.c, self.h)\n        return t\n\n    def reset(self):\n        \"\"\"\n        \u4e2d\u9593\u30d9\u30af\u30c8\u30eb\u3001\u5185\u90e8\u30e1\u30e2\u30ea\u3001\u52fe\u914d\u306e\u521d\u671f\u5316\n        :return:\n        \"\"\"\n        self.h = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n        self.c = Variable(self.ARR.zeros((self.batch_size, self.hidden_size), dtype='float32'))\n\n        self.zerograds()\n\n```\n\nSeq2Seq\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u884c\u3046\u3002\n\n```forward.py\n\ndef forward(enc_words, dec_words, model, ARR):\n    \"\"\"\n    \u9806\u4f1d\u64ad\u306e\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\n    :param enc_words: \u767a\u8a71\u6587\u306e\u5358\u8a9e\u3092\u8a18\u9332\u3057\u305f\u30ea\u30b9\u30c8\n    :param dec_words: \u5fdc\u7b54\u6587\u306e\u5358\u8a9e\u3092\u8a18\u9332\u3057\u305f\u30ea\u30b9\u30c8\n    :param model: Seq2Seq\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    :param ARR: cuda.cupy\u304bnumpy\u304b\n    :return: \u8a08\u7b97\u3057\u305f\u640d\u5931\u306e\u5408\u8a08\n    \"\"\"\n    # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a18\u9332\n    batch_size = len(enc_words[0])\n    # model\u5185\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u52fe\u914d\u3092\u30ea\u30bb\u30c3\u30c8\n    model.reset()\n    # \u767a\u8a71\u30ea\u30b9\u30c8\u5185\u306e\u5358\u8a9e\u3092\u3001chainer\u306e\u578b\u3067\u3042\u308bVariable\u578b\u306b\u5909\u66f4\n    enc_words = [Variable(ARR.array(row, dtype='int32')) for row in enc_words]\n    # \u30a8\u30f3\u30b3\u30fc\u30c9\u306e\u8a08\u7b97 \u2474\n    model.encode(enc_words)\n    # \u640d\u5931\u306e\u521d\u671f\u5316\n    loss = Variable(ARR.zeros((), dtype='float32'))\n    # <eos>\u3092\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b (2)\n    t = Variable(ARR.array([0 for _ in range(batch_size)], dtype='int32'))\n    # \u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u8a08\u7b97\n    for w in dec_words:\n        # 1\u5358\u8a9e\u305a\u3064\u30c7\u30b3\u30fc\u30c9\u3059\u308b (3)\n        y = model.decode(t)\n        # \u6b63\u89e3\u5358\u8a9e\u3092Variable\u578b\u306b\u5909\u63db\n        t = Variable(ARR.array(w, dtype='int32'))\n        # \u6b63\u89e3\u5358\u8a9e\u3068\u4e88\u6e2c\u5358\u8a9e\u3092\u7167\u3089\u3057\u5408\u308f\u305b\u3066\u640d\u5931\u3092\u8a08\u7b97 (4)\n        loss += functions.softmax_cross_entropy(y, t)\n    return loss\n\n```\n\n\u3053\u306e\u8a08\u7b97\u306e\u6d41\u308c\u3092\u56f3\u793a\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n![forward.png](https://qiita-image-store.s3.amazonaws.com/0/155619/4a758fdb-16e1-6ba8-c56f-bec306f0a531.png)\n\n\u5b66\u7fd2\u3055\u305b\u308benc_words\u3001dec_words\u5185\u306e\u5358\u8a9e\u306f\u3042\u3089\u304b\u3058\u3081ID\u5316\uff08\u6570\u5b57\u306b\u76f4\u3059\uff09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u640d\u5931\u306e\u8a08\u7b97\u306b\u306fsoftmax\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\n\u3042\u3068\u306fforward\u3067\u8a08\u7b97\u3057\u305f\u640d\u5931\u3092chainer\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u66f4\u65b0\u3001\u3068\u3044\u3046\u7e70\u308a\u8fd4\u3057\u3092\u884c\u3046\u3060\u3051\u3002\n\n\u5b66\u7fd2\u306e\u30e1\u30a4\u30f3\u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```train.py\n\ndef train():\n    # \u8a9e\u5f59\u6570\u306e\u78ba\u8a8d\n    vocab_size = len(word_to_id)\n    # \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n    model = Seq2Seq(vocab_size=vocab_size,\n                    embed_size=EMBED_SIZE,\n                    hidden_size=HIDDEN_SIZE,\n                    batch_size=BATCH_SIZE,\n                    flag_gpu=FLAG_GPU)\n    # \u30e2\u30c7\u30eb\u306e\u521d\u671f\u5316\n    model.reset()\n    # GPU\u3092\u4f7f\u3046\u304b\u3069\u3046\u304b\u6c7a\u3081\u308b\n    if FLAG_GPU:\n        ARR = cuda.cupy\n        # \u30e2\u30c7\u30eb\u3092GPU\u306e\u30e1\u30e2\u30ea\u306b\u5165\u308c\u308b\n        cuda.get_device(0).use()\n        model.to_gpu(0)\n    else:\n        ARR = np\n\n    # \u5b66\u7fd2\u958b\u59cb\n    for epoch in range(EPOCH_NUM):\n        # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306boptimizer\u306e\u521d\u671f\u5316\n        # \u7121\u96e3\u306bAdam\u3092\u4f7f\u3044\u307e\u3059\n        opt = optimizers.Adam()\n        # \u30e2\u30c7\u30eb\u3092optimizer\u306b\u30bb\u30c3\u30c8\n        opt.setup(model)\n        # \u52fe\u914d\u304c\u5927\u304d\u3059\u304e\u308b\u5834\u5408\u306b\u8abf\u6574\u3059\u308b\n        opt.add_hook(optimizer.GradientClipping(5))\n        \n        # \u3042\u3089\u304b\u3058\u3081\u4f5c\u3063\u3066\u304a\u3044\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n        data = Filer.read_pkl(path)\n        # \u30c7\u30fc\u30bf\u306e\u30b7\u30e3\u30c3\u30d5\u30eb\n        random.shuffle(data)\n        # \u30d0\u30c3\u30c1\u5b66\u7fd2\u306e\u30b9\u30bf\u30fc\u30c8\n        for num in range(len(data)//BATCH_SIZE):\n            # \u4efb\u610f\u306e\u30b5\u30a4\u30ba\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u4f5c\u6210\n            minibatch = data[num*BATCH_SIZE: (num+1)*BATCH_SIZE]\n            # \u8aad\u307f\u8fbc\u307f\u7528\u306e\u30c7\u30fc\u30bf\u4f5c\u6210\n            enc_words, dec_words = make_minibatch(minibatch)\n            # \u9806\u4f1d\u64ad\u3067\u640d\u5931\u306e\u8a08\u7b97\n            total_loss = forward(enc_words=enc_words,\n                                 dec_words=dec_words,\n                                 model=model,\n                                 ARR=ARR)\n            # \u8aa4\u5dee\u9006\u4f1d\u64ad\u3067\u52fe\u914d\u306e\u8a08\u7b97\n            total_loss.backward()\n            # \u8a08\u7b97\u3057\u305f\u52fe\u914d\u3092\u4f7f\u3063\u3066\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u66f4\u65b0\n            opt.update()\n            # \u8a18\u9332\u3055\u308c\u305f\u52fe\u914d\u3092\u521d\u671f\u5316\u3059\u308b\n            opt.zero_grads()\n        # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n        serializers.save_hdf5(outputpath, model)\n\n```\n\n\u304b\u306a\u308a\u9577\u304b\u3063\u305f\u3067\u3059\u304c\u30b3\u30fc\u30c9\u306e\u8aac\u660e\u306f\u4ee5\u4e0a\u3002\n\u3061\u306a\u307f\u306b\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\nhttps://github.com/kenchin110100/machine_learning/blob/master/sampleSeq2Sep.py\n\u306b\u3042\u308a\u307e\u3059\u3002\n\n# \u5b9f\u9a13\n\n## \u30b3\u30fc\u30d1\u30b9\n\n\u5bfe\u8a71\u7834\u7dbb\u30b3\u30fc\u30d1\u30b9\nhttps://sites.google.com/site/dialoguebreakdowndetection/chat-dialogue-corpus\n\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u307b\u3093\u3068\u306f\u3082\u3063\u3068\u9577\u3044\u30b3\u30fc\u30d1\u30b9\u3067\u5b66\u7fd2\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u5b66\u7fd2\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u8ae6\u3081\u307e\u3057\u305f\u30fb\u30fb\u30fb\n\n## \u5b9f\u9a13\u7d50\u679c\n\n\u767a\u8a71\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e4\u3064\n\n* token1 = '\u304a\u306f\u3088\u3046'\n* token2 = '\u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f'\n* token3 = '\u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f'\n* token4 = '\u4eca\u65e5\u306f\u6691\u3044\u3067\u3059'\n\nEpoch\u3054\u3068\u306b\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\n\u307e\u305a1 Epoch\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u306f\u3044', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u9000\u5c48', '\u306f', '\u597d\u304d', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u305d\u3046', '\u3067\u3059', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u305d\u3046', '\u3067\u3059', '</s>']\n```\n\u54f2\u5b66\u8005\u3067\u3059\u304b\uff1f\n\n\u6b21\u306b3 Epoch\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u30b9\u30a4\u30ab', '\u306f', '\u5927\u597d\u304d', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u305d\u3046', '\u306a', '\u3093', '\u3067\u3059', '\u304b', '?', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4f55', '\u304b', '\u306b', '\u884c\u3063', '\u3066', '\u307e\u3059', '\u304b', '?', '</s>']\n```\n\u3069\u3053\u306b\u3082\u884c\u3063\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\n\n5 Epoch\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u6d77', '\u306f', '\u4e00', '\u4eba', '\u3067', '\u884c\u3063', '\u3066', '\u307e\u3059', '\u304b', '?', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u3046\u3093', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u4f55', '\u3092', '\u98df\u3079', '\u307e\u3057', '\u305f', '\u304b', '?', '</s>']\n```\n\u6d77\u306b\u3082\u884c\u3063\u3066\u307e\u305b\u3093\u30fb\u30fb\u30fb\n\n8 Epoch\u306a\u3089\u30fb\u30fb\u30fb\n\n```text\n\u767a\u8a71:  \u304a\u306f\u3088\u3046 => \u5fdc\u7b54:  ['\u304a\u306f\u3088\u3046', '\u3054\u3056\u3044', '\u307e\u3059', '</s>']\n\u767a\u8a71:  \u8abf\u5b50\u306f\u3069\u3046\u3067\u3059\u304b\uff1f => \u5fdc\u7b54:  ['\u30af\u30e9\u30b2', '\u306f', '\u3044\u3044', '\u3067\u3059', '\u306d', '</s>']\n\u767a\u8a71:  \u304a\u8179\u304c\u7a7a\u304d\u307e\u3057\u305f => \u5fdc\u7b54:  ['\u540c\u3058\u304f', '</s>']\n\u767a\u8a71:  \u4eca\u65e5\u306f\u6691\u3044\u3067\u3059 => \u5fdc\u7b54:  ['\u71b1\u4e2d\u75c7', '\u306b', '\u6c17', '\u3092', '\u3064\u3051', '\u306a\u3044', '\u3093', '\u3067\u3059', '\u304b', '?', '</s>']\n```\n\n\u3060\u3044\u3076\u60dc\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u304f\u3089\u3044\u304c\u9650\u754c\u3067\u3057\u3087\u3046\u304b\u30fb\u30fb\u30fb\n\u3053\u308c\u4ee5\u4e0a\u306eEpoch\u3082\u8a66\u3057\u3066\u898b\u307e\u3057\u305f\u304c\u3001\u3042\u3093\u307e\u308a\u7cbe\u5ea6\u306f\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u3002\n\n# \u7d50\u8ad6\n\nchainer\u3092\u4f7f\u3063\u3066\u4eca\u66f4Seq2Seq\u306e\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u3002\n\u3082\u3063\u3068\u5927\u304d\u3044\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u3048\u3070\u7cbe\u5ea6\u304c\u826f\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u3068\u306a\u304b\u306a\u304b\u53ce\u675f\u3057\u307e\u305b\u3093\u30fb\u30fb\u30fb\n\n\u3061\u306a\u307f\u306b\u30bf\u30a4\u30c8\u30eb\u306b\uff081\uff09\u3068\u3064\u3051\u305f\u306e\u306f\u7b2c2\u5f3e\u3001\u7b2c3\u5f3e\u3092\u8003\u3048\u3066\u3044\u308b\u304b\u3089\u3067\u3059\uff01\uff01\n\u6b21\u306f\u3001\u3053\u306eSeq2Seq\u306bAttention\u3092\u3064\u3051\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n"}