{"context": " More than 1 year has passed since last update.\u4eca\u66f4\u611f\u305f\u3063\u3077\u308a\u306a\u3046\u3048\u306b\u3001\u9014\u4e2d\u304b\u3089\u8da3\u65e8\u9055\u3063\u3066\u304d\u305f\u30fb\u30fb\u30fb\n\u3051\u3069\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3067\u6652\u305d\u3046\u3002\n\n\u554f\u984c\nhttp://qiita.com/Nabetani/items/7ba11167ea28c929fcf2\n\n\u611f\u60f3\n\u9577\u3044\u306e\u3067\u5148\u306b\u3002\n\nStream API \u4f7f\u3063\u3066\u305f\u3089\u697d\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001for \u6587\u7981\u6b62\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n\n\n.stream() \u3063\u3066\u66f8\u304f\u306e\u98fd\u304d\u305d\u3046\u3002Collection \u2192 Stream \u306e\u5909\u63db\u304f\u3089\u3044\u306f\u81ea\u52d5\u3067\u3084\u3063\u3066\u6b32\u3057\u3044\nflatMap \u5730\u5473\u306b\u5c0e\u5165\u3057\u3065\u3089\u3044\n\u3053\u308c\u5f8c\u304b\u3089\u30e1\u30f3\u30c6\u3068\u304b\u7121\u7406\u305d\u3046\n\n\n\u7dcf\u5f53\u308a\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u7d4c\u8def\u672b\u5c3e\u306e\u5019\u88dc\u3092\u4e8b\u524d\u306b\u62bd\u51fa\u3057\u305f\u3051\u3069\u3001\u7d50\u5c40\u30e1\u30e2\u5316\u3068\u304b\u3067\u304d\u3066\u306a\u3044\u304b\u3089\u30aa\u30fc\u30c0\u30fc\u306f\u30fb\u30fb\u30fborz\n\n\n\u56de\u7b54\n\nKunekune.java\npackage heignamerican;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\nimport org.junit.Test;\n\npublic class Kunekune {\n    @Test\n    public void testAll() {\n        /*0*/test(\"01224/82925/69076/32298/21065\", \"6\");\n        /*1*/test(\"03478/12569/03478/12569/03478\", \"10\");\n        /*2*/test(\"09900/28127/87036/76545/87650\", \"10\");\n        /*3*/test(\"77777/77777/77777/77777/77777\", \"1\");\n        /*4*/test(\"00000/11111/22222/33333/44444\", \"5\");\n        /*5*/test(\"01234/12345/23456/34567/45678\", \"9\");\n        /*6*/test(\"10135/21245/43456/55567/77789\", \"8\");\n        /*7*/test(\"33333/33333/55555/55555/77777\", \"2\");\n        /*8*/test(\"01234/11234/22234/33334/44444\", \"5\");\n        /*9*/test(\"98765/88765/77765/66665/55555\", \"5\");\n        /*10*/test(\"01234/10325/23016/32107/45670\", \"8\");\n        /*11*/test(\"34343/43434/34343/43434/34343\", \"2\");\n        /*12*/test(\"14714/41177/71141/17414/47141\", \"3\");\n        /*13*/test(\"13891/31983/89138/98319/13891\", \"4\");\n        /*14*/test(\"01369/36901/90136/13690/69013\", \"5\");\n        /*15*/test(\"02468/24689/46898/68986/89864\", \"6\");\n        /*16*/test(\"86420/68642/46864/24686/02468\", \"5\");\n        /*17*/test(\"77777/75557/75357/75557/77777\", \"3\");\n        /*18*/test(\"53135/33133/11111/33133/53135\", \"3\");\n        /*19*/test(\"01356/23501/45024/61246/13461\", \"5\");\n        /*20*/test(\"46803/68025/91358/34792/78136\", \"4\");\n        /*21*/test(\"66788/56789/55799/43210/33211\", \"9\");\n        /*22*/test(\"40000/94321/96433/97644/98654\", \"9\");\n        /*23*/test(\"58950/01769/24524/24779/17069\", \"6\");\n        /*24*/test(\"97691/01883/98736/51934/81403\", \"4\");\n        /*25*/test(\"92049/27798/69377/45936/80277\", \"5\");\n        /*26*/test(\"97308/77113/08645/62578/44774\", \"5\");\n        /*27*/test(\"90207/17984/01982/31272/60926\", \"6\");\n        /*28*/test(\"62770/65146/06512/15407/89570\", \"4\");\n        /*29*/test(\"93914/46889/27554/58581/18703\", \"5\");\n        /*30*/test(\"42035/12430/60728/30842/90381\", \"5\");\n        /*31*/test(\"90347/53880/67954/95256/68777\", \"6\");\n        /*32*/test(\"05986/60473/01606/16425/46292\", \"5\");\n        /*33*/test(\"18053/90486/24320/04250/03853\", \"5\");\n        /*34*/test(\"36865/13263/67280/18600/12774\", \"5\");\n        /*35*/test(\"72456/72052/79971/14656/41151\", \"5\");\n        /*36*/test(\"94888/28649/05561/76571/97567\", \"5\");\n        /*37*/test(\"50214/94693/88718/78922/55359\", \"5\");\n        /*38*/test(\"76502/99325/17987/31737/93874\", \"7\");\n        /*39*/test(\"87142/14764/13014/00248/73105\", \"6\");\n        /*40*/test(\"24573/71679/48704/19786/91834\", \"7\");\n        /*41*/test(\"20347/61889/06074/61263/20519\", \"7\");\n        /*42*/test(\"74344/97459/97302/14439/35689\", \"6\");\n        /*43*/test(\"04794/52198/50294/09340/24160\", \"5\");\n        /*44*/test(\"41065/69344/64698/54167/43348\", \"7\");\n        /*45*/test(\"39947/15696/03482/19574/70235\", \"7\");\n        /*46*/test(\"92767/16790/84897/69765/75734\", \"7\");\n        /*47*/test(\"09654/79610/05070/23456/74687\", \"8\");\n        /*48*/test(\"73998/98799/98707/05633/23915\", \"8\");\n        /*49*/test(\"35661/17480/89723/64335/27217\", \"7\");\n        /*50*/test(\"02489/77571/84873/03879/84460\", \"7\");\n    }\n\n    private void test(String input, String expected) {\n        assertThat(Program.solve(input).getKey(), is(Integer.parseInt(expected, 10)));\n    }\n\n    public static Entry<Integer, List<List<Pos>>> solve(final String input) {\n        final List<List<Integer>> table = Arrays.asList(input.split(\"/\")).stream()\n            .map(line -> line.chars()\n                .map(c -> c - '0')\n                .boxed()\n                .collect(Collectors.toList())\n            )\n            .collect(Collectors.toList());\n\n        final int rowSize = table.size();\n        final int colSize = table.get(0).size();\n\n        final Function<Pos, Integer> toCell = (final Pos pos) -> table.get(pos.row).get(pos.col);\n        final Function<? super Pos, Stream<Pos>> toArround = pos -> Stream.of(\n            new Pos(pos.col, pos.row - 1),\n            new Pos(pos.col - 1, pos.row),\n            new Pos(pos.col + 1, pos.row),\n            new Pos(pos.col, pos.row + 1)\n            )\n            .filter(x -> (0 <= x.row && x.row < rowSize && 0 <= x.col && x.col < colSize));\n\n        final Function<List<List<Pos>>, List<List<Pos>>> search = new Function<List<List<Pos>>, List<List<Pos>>>() {\n            @Override\n            public List<List<Pos>> apply(final List<List<Pos>> paths) { //\u672b\u5c3e\u304b\u3089\u306e\u63a2\u7d22\n                final List<List<Pos>> nexts = paths.stream()\n                    .flatMap(path -> (Stream<List<Pos>>) toArround.apply(path.get(0))\n                        .filter(x -> toCell.apply(x) < toCell.apply(path.get(0)))\n                        .map(x -> Stream.concat(Stream.of(x), path.stream()).collect(Collectors.toList()))\n                    ).collect(Collectors.toList());\n\n                return nexts.size() == 0 ? paths : apply(nexts);\n            }\n        };\n\n        return IntStream.range(0, rowSize).boxed()\n            .flatMap(row -> IntStream.range(0, colSize).boxed()\n                .map((Function<Integer, Pos>) col -> new Pos(col, row))\n            ) // \u5168\u5ea7\u6a19\n            .filter(pos -> toArround.apply(pos)\n                .noneMatch(neighbor -> toCell.apply(pos) < toCell.apply(neighbor))\n            ) // \u672b\u5c3e\u5019\u88dc\n            .map(tail -> Arrays.asList(Arrays.asList(tail)))\n            .map(search) //\u672b\u5c3e\u304b\u3089\u306e\u63a2\u7d22\n            .flatMap(x -> x.stream()) // flatten\n            .collect(Collectors.groupingBy(keiro -> keiro.size())) // \u7d4c\u8def\u9577\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n            .entrySet().stream().sorted((x, y) -> y.getKey() - x.getKey()).findFirst().get() // \u7d4c\u8def\u6700\u9577\u306e\u307f\n        ;\n    }\n\n    public static class Pos {\n        public final int row;\n        public final int col;\n\n        public Pos(final int col, final int row) {\n            this.row = row;\n            this.col = col;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"(%d,%d)\", col, row);\n        }\n    }\n}\n\n\n\u4eca\u66f4\u611f\u305f\u3063\u3077\u308a\u306a\u3046\u3048\u306b\u3001\u9014\u4e2d\u304b\u3089\u8da3\u65e8\u9055\u3063\u3066\u304d\u305f\u30fb\u30fb\u30fb\n\u3051\u3069\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3067\u6652\u305d\u3046\u3002\n\n# \u554f\u984c\nhttp://qiita.com/Nabetani/items/7ba11167ea28c929fcf2\n\n# \u611f\u60f3\n\u9577\u3044\u306e\u3067\u5148\u306b\u3002\n\n* Stream API \u4f7f\u3063\u3066\u305f\u3089\u697d\u3057\u304f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3001for \u6587\u7981\u6b62\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n    * `.stream()` \u3063\u3066\u66f8\u304f\u306e\u98fd\u304d\u305d\u3046\u3002Collection \u2192 Stream \u306e\u5909\u63db\u304f\u3089\u3044\u306f\u81ea\u52d5\u3067\u3084\u3063\u3066\u6b32\u3057\u3044\n    * flatMap \u5730\u5473\u306b\u5c0e\u5165\u3057\u3065\u3089\u3044\n    * \u3053\u308c\u5f8c\u304b\u3089\u30e1\u30f3\u30c6\u3068\u304b\u7121\u7406\u305d\u3046\n* \u7dcf\u5f53\u308a\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u7d4c\u8def\u672b\u5c3e\u306e\u5019\u88dc\u3092\u4e8b\u524d\u306b\u62bd\u51fa\u3057\u305f\u3051\u3069\u3001\u7d50\u5c40\u30e1\u30e2\u5316\u3068\u304b\u3067\u304d\u3066\u306a\u3044\u304b\u3089\u30aa\u30fc\u30c0\u30fc\u306f\u30fb\u30fb\u30fborz\n\n# \u56de\u7b54\n```java:Kunekune.java\npackage heignamerican;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\nimport org.junit.Test;\n\npublic class Kunekune {\n\t@Test\n\tpublic void testAll() {\n\t\t/*0*/test(\"01224/82925/69076/32298/21065\", \"6\");\n\t\t/*1*/test(\"03478/12569/03478/12569/03478\", \"10\");\n\t\t/*2*/test(\"09900/28127/87036/76545/87650\", \"10\");\n\t\t/*3*/test(\"77777/77777/77777/77777/77777\", \"1\");\n\t\t/*4*/test(\"00000/11111/22222/33333/44444\", \"5\");\n\t\t/*5*/test(\"01234/12345/23456/34567/45678\", \"9\");\n\t\t/*6*/test(\"10135/21245/43456/55567/77789\", \"8\");\n\t\t/*7*/test(\"33333/33333/55555/55555/77777\", \"2\");\n\t\t/*8*/test(\"01234/11234/22234/33334/44444\", \"5\");\n\t\t/*9*/test(\"98765/88765/77765/66665/55555\", \"5\");\n\t\t/*10*/test(\"01234/10325/23016/32107/45670\", \"8\");\n\t\t/*11*/test(\"34343/43434/34343/43434/34343\", \"2\");\n\t\t/*12*/test(\"14714/41177/71141/17414/47141\", \"3\");\n\t\t/*13*/test(\"13891/31983/89138/98319/13891\", \"4\");\n\t\t/*14*/test(\"01369/36901/90136/13690/69013\", \"5\");\n\t\t/*15*/test(\"02468/24689/46898/68986/89864\", \"6\");\n\t\t/*16*/test(\"86420/68642/46864/24686/02468\", \"5\");\n\t\t/*17*/test(\"77777/75557/75357/75557/77777\", \"3\");\n\t\t/*18*/test(\"53135/33133/11111/33133/53135\", \"3\");\n\t\t/*19*/test(\"01356/23501/45024/61246/13461\", \"5\");\n\t\t/*20*/test(\"46803/68025/91358/34792/78136\", \"4\");\n\t\t/*21*/test(\"66788/56789/55799/43210/33211\", \"9\");\n\t\t/*22*/test(\"40000/94321/96433/97644/98654\", \"9\");\n\t\t/*23*/test(\"58950/01769/24524/24779/17069\", \"6\");\n\t\t/*24*/test(\"97691/01883/98736/51934/81403\", \"4\");\n\t\t/*25*/test(\"92049/27798/69377/45936/80277\", \"5\");\n\t\t/*26*/test(\"97308/77113/08645/62578/44774\", \"5\");\n\t\t/*27*/test(\"90207/17984/01982/31272/60926\", \"6\");\n\t\t/*28*/test(\"62770/65146/06512/15407/89570\", \"4\");\n\t\t/*29*/test(\"93914/46889/27554/58581/18703\", \"5\");\n\t\t/*30*/test(\"42035/12430/60728/30842/90381\", \"5\");\n\t\t/*31*/test(\"90347/53880/67954/95256/68777\", \"6\");\n\t\t/*32*/test(\"05986/60473/01606/16425/46292\", \"5\");\n\t\t/*33*/test(\"18053/90486/24320/04250/03853\", \"5\");\n\t\t/*34*/test(\"36865/13263/67280/18600/12774\", \"5\");\n\t\t/*35*/test(\"72456/72052/79971/14656/41151\", \"5\");\n\t\t/*36*/test(\"94888/28649/05561/76571/97567\", \"5\");\n\t\t/*37*/test(\"50214/94693/88718/78922/55359\", \"5\");\n\t\t/*38*/test(\"76502/99325/17987/31737/93874\", \"7\");\n\t\t/*39*/test(\"87142/14764/13014/00248/73105\", \"6\");\n\t\t/*40*/test(\"24573/71679/48704/19786/91834\", \"7\");\n\t\t/*41*/test(\"20347/61889/06074/61263/20519\", \"7\");\n\t\t/*42*/test(\"74344/97459/97302/14439/35689\", \"6\");\n\t\t/*43*/test(\"04794/52198/50294/09340/24160\", \"5\");\n\t\t/*44*/test(\"41065/69344/64698/54167/43348\", \"7\");\n\t\t/*45*/test(\"39947/15696/03482/19574/70235\", \"7\");\n\t\t/*46*/test(\"92767/16790/84897/69765/75734\", \"7\");\n\t\t/*47*/test(\"09654/79610/05070/23456/74687\", \"8\");\n\t\t/*48*/test(\"73998/98799/98707/05633/23915\", \"8\");\n\t\t/*49*/test(\"35661/17480/89723/64335/27217\", \"7\");\n\t\t/*50*/test(\"02489/77571/84873/03879/84460\", \"7\");\n\t}\n\n\tprivate void test(String input, String expected) {\n\t\tassertThat(Program.solve(input).getKey(), is(Integer.parseInt(expected, 10)));\n\t}\n\n\tpublic static Entry<Integer, List<List<Pos>>> solve(final String input) {\n\t\tfinal List<List<Integer>> table = Arrays.asList(input.split(\"/\")).stream()\n\t\t\t.map(line -> line.chars()\n\t\t\t\t.map(c -> c - '0')\n\t\t\t\t.boxed()\n\t\t\t\t.collect(Collectors.toList())\n\t\t\t)\n\t\t\t.collect(Collectors.toList());\n\n\t\tfinal int rowSize = table.size();\n\t\tfinal int colSize = table.get(0).size();\n\n\t\tfinal Function<Pos, Integer> toCell = (final Pos pos) -> table.get(pos.row).get(pos.col);\n\t\tfinal Function<? super Pos, Stream<Pos>> toArround = pos -> Stream.of(\n\t\t\tnew Pos(pos.col, pos.row - 1),\n\t\t\tnew Pos(pos.col - 1, pos.row),\n\t\t\tnew Pos(pos.col + 1, pos.row),\n\t\t\tnew Pos(pos.col, pos.row + 1)\n\t\t\t)\n\t\t\t.filter(x -> (0 <= x.row && x.row < rowSize && 0 <= x.col && x.col < colSize));\n\n\t\tfinal Function<List<List<Pos>>, List<List<Pos>>> search = new Function<List<List<Pos>>, List<List<Pos>>>() {\n\t\t\t@Override\n\t\t\tpublic List<List<Pos>> apply(final List<List<Pos>> paths) { //\u672b\u5c3e\u304b\u3089\u306e\u63a2\u7d22\n\t\t\t\tfinal List<List<Pos>> nexts = paths.stream()\n\t\t\t\t\t.flatMap(path -> (Stream<List<Pos>>) toArround.apply(path.get(0))\n\t\t\t\t\t\t.filter(x -> toCell.apply(x) < toCell.apply(path.get(0)))\n\t\t\t\t\t\t.map(x -> Stream.concat(Stream.of(x), path.stream()).collect(Collectors.toList()))\n\t\t\t\t\t).collect(Collectors.toList());\n\n\t\t\t\treturn nexts.size() == 0 ? paths : apply(nexts);\n\t\t\t}\n\t\t};\n\n\t\treturn IntStream.range(0, rowSize).boxed()\n\t\t\t.flatMap(row -> IntStream.range(0, colSize).boxed()\n\t\t\t\t.map((Function<Integer, Pos>) col -> new Pos(col, row))\n\t\t\t) // \u5168\u5ea7\u6a19\n\t\t\t.filter(pos -> toArround.apply(pos)\n\t\t\t\t.noneMatch(neighbor -> toCell.apply(pos) < toCell.apply(neighbor))\n\t\t\t) // \u672b\u5c3e\u5019\u88dc\n\t\t\t.map(tail -> Arrays.asList(Arrays.asList(tail)))\n\t\t\t.map(search) //\u672b\u5c3e\u304b\u3089\u306e\u63a2\u7d22\n\t\t\t.flatMap(x -> x.stream()) // flatten\n\t\t\t.collect(Collectors.groupingBy(keiro -> keiro.size())) // \u7d4c\u8def\u9577\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n\t\t\t.entrySet().stream().sorted((x, y) -> y.getKey() - x.getKey()).findFirst().get() // \u7d4c\u8def\u6700\u9577\u306e\u307f\n\t\t;\n\t}\n\n\tpublic static class Pos {\n\t\tpublic final int row;\n\t\tpublic final int col;\n\n\t\tpublic Pos(final int col, final int row) {\n\t\t\tthis.row = row;\n\t\t\tthis.col = col;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn String.format(\"(%d,%d)\", col, row);\n\t\t}\n\t}\n}\n```\n", "tags": ["java8"]}