{"context": "Siv3D Advent Calendar 2016 16\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u672c\u8a18\u4e8b\u3067\u306f\u753b\u50cf\u306e\u3088\u3046\u306a\u30e1\u30cb\u30e5\u30fc\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\n\u672c\u8a18\u4e8b\u3067\u306eSiv3D\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fAugust2016v2\u3067\u3059\u3002\n\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u753b\u50cf\u3068\u3057\u3066\u3001\u306d\u304f\u3089\u3055\u3093\u306e\u753b\u50cf\u7d20\u6750\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u3092\u30b5\u30a4\u30ba\u3092\u5909\u3048\u3066\u8868\u793a\u3059\u308b\n\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u753b\u50cf\u3068\u3057\u3066\u67a0\u306b\u88c5\u98fe\u306e\u3042\u308b\u304b\u3063\u3053\u3044\u3044\u7d20\u6750\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u305f\u3044\u5927\u304d\u3055\u306b\u62e1\u5927\u3059\u308b\u3068\u88c5\u98fe\u304c\u5d29\u308c\u3066\u3057\u307e\u3044\u53f0\u7121\u3057\u3067\u3059\u3002\n\n\u5143\u306e\u753b\u50cf\u30929\u5206\u5272\u3057\u3066\u3001\u753b\u50cf\u306e2,5,8\u306e\u90e8\u5206\u3092\u6a2a\u65b9\u5411\u306b\u62e1\u5927\u30014,5,6\u306e\u90e8\u5206\u3092\u7e26\u65b9\u5411\u306b\u62e1\u5927\u3059\u308b\u3053\u3068\u3067\u67a0\u306e\u5f62\u3092\u5d29\u3059\u3053\u3068\u306a\u304f\u62e1\u5927\u3067\u304d\u307e\u3059\u3002\n\n\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u3092\u88c5\u98fe\u3092\u5d29\u3055\u306a\u3044\u3088\u3046\u306b\u5927\u304d\u3055\u3092\u5909\u3048\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u306e5\u306e\u90e8\u5206\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4e2d\u306b\u4f55\u304b\u3092\u8868\u793a\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u306e\u3067\u3001\u3053\u306e\u9818\u57df\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3082\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\nMain.cpp\n# include <Siv3D.hpp>\n\nclass VariableWindow\n{\nprivate:\n    Texture texture_m;  // \u753b\u50cf\u7d20\u6750\u306e\u30c6\u30af\u30b9\u30c1\u30e3\n    Point pos_m;        // \u5de6\u4e0a\u306e\u5ea7\u6a19\n    Size size_m;        // \u63cf\u753b\u3059\u308b\u30b5\u30a4\u30ba        \npublic:\n    VariableWindow(Texture texture, Point pos, Size size)\n        : texture_m(texture)\n        , pos_m(pos)\n        , size_m(size)\n    {};\n    // \u63cf\u753b\n    void draw()const {\n        const int w = texture_m.width / 3;\n        const int h = texture_m.height / 3;\n        const std::array<int, 3> width = { w, size_m.x - 2 * w, w };\n        const std::array<int, 3> height = { h, size_m.y - 2 * h, h };\n        Point p(pos_m);\n        for (int y = 0; y < 3; y++) {\n            for (int x = 0; x < 3; x++) {\n                texture_m({ w*x,h*y }, { w, h }).resize(width[x], height[y]).draw(p);\n                p.x += width[x];\n            }\n            p.x = pos_m.x;\n            p.y += height[y];\n        }\n    };\n    // \u771f\u3093\u4e2d\u306e\u90e8\u5206\u3092\u56db\u89d2\u5f62\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n    Rect getCenterRect()const {\n        const Point p(texture_m.size / 3);\n        const Size size(size_m - texture_m.size * 2 / 3);\n        return Rect(pos_m + p, size);\n    };\n};\n\nvoid Main() {\n    // \u753b\u50cf\u7d20\u6750\u304c\u9ed2\u3063\u307d\u3044\u306e\u3067\u80cc\u666f\u8272\u3092\u5909\u3048\u308b\n    Graphics::SetBackground(Palette::Blue);\n\n     //\u7d20\u6750\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u4f4d\u7f6e\u3001\u30b5\u30a4\u30ba\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\n    VariableWindow variableWindow(Texture(L\"WindowBase_b_02.png\"), { 10,10 }, { 200,300 }); \n\n    while (System::Update())\n    {\n        variableWindow.draw();\n    }\n}\n\n\n\n\u9078\u629e\u80a2\u3092\u3064\u304f\u308b\n\n\u9078\u629e\u80a2\u306e\u4e00\u3064\u4e00\u3064\u304c\u6301\u3063\u3066\u3044\u308b\u3068\u826f\u3044\u8981\u7d20\u306f\u3001\u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308b\u3068\u304d\u306e\u300c\u6587\u5b57\u5217\u300d\u3068\u9078\u3070\u308c\u305f\u3068\u304d\u5b9f\u884c\u3059\u308b\u300c\u95a2\u6570\u300d\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001STL\u306epair\u3092\u4f7f\u3046\u3068\u304a\u624b\u8efd\u3067\u3059\u3002\n// \u6587\u5b57\u5217\u3068\u95a2\u6570\u306e\u30da\u30a2\u3092\u4f5c\u308b\nstd::pair< String,std::function<void(void)> > pair = std::make_pair( L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n\n// \u30da\u30a2\u306e\uff11\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u8868\u793a\nPrintln(pair.first);\n\n// \u30da\u30a2\u306e\uff12\u3064\u76ee\u306e\u95a2\u6570\u3092\u5b9f\u884c\npair.second();\n\n\u3069\u306e\u9078\u629e\u80a2\u3092\u9078\u3093\u3067\u308b\u304b\u3092\u793a\u3059\u30ab\u30fc\u30bd\u30eb\u3092\u7528\u610f\u3057\u3001\u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3057\u3001Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3057\u3066\u3044\u308b\u9078\u629e\u80a2\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nMain.cpp\n\n# include <Siv3D.hpp>\n\nclass Menu {\nprivate:    \n    const Point pos_m;          // \u30e1\u30cb\u30e5\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19   \n    const Font font_m;          // \u9078\u629e\u80a2\u8868\u793a\u306e\u30d5\u30a9\u30f3\u30c8\n    const int width_m;          // \u30ab\u30fc\u30bd\u30eb\u306e\u5e45\n    const int height_m;         // \u9078\u629e\u80a2\u4e00\u3064\u4e00\u3064\u306e\u9ad8\u3055\n    int cursor_m;               // \u30ab\u30fc\u30bd\u30eb\n    std::vector<std::pair<String, std::function<void(void)>>> choices_m;    // \u9078\u629e\u80a2\u306e\u53ef\u5909\u9577\u914d\u5217\npublic:\n    Menu(Point pos, Font font,int width,int height)\n        : pos_m(pos)\n        , font_m(font)  \n        , width_m(width)\n        , height_m(height)\n        , cursor_m(0)\n    {}\n\n    // \u9078\u629e\u80a2\u3092\u8ffd\u52a0\n    void add(String text, std::function<void()> function) {\n        choices_m.push_back(std::make_pair(text, function));\n    }\n\n    void update() {\n\n        // \u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059\n        cursor_m += Input::KeyDown.clicked - Input::KeyUp.clicked;\n\n        // \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n        cursor_m = (cursor_m < 0)? choices_m.size() - 1 : cursor_m % choices_m.size();\n\n        // Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3059\u9078\u629e\u80a2\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n        if ( (Input::KeyZ | Input::KeyEnter).clicked ){\n            choices_m[cursor_m].second();\n        }\n    }\n\n    void draw()const {\n        // \u9078\u629e\u80a2\u306e\u8868\u793a\n        for (unsigned i = 0; i < choices_m.size(); i++) {\n            font_m.draw(choices_m[i].first, pos_m.movedBy(0,i*height_m));\n        }\n        // \u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\n        Rect(pos_m.movedBy(0, height_m * cursor_m), width_m,height_m).draw(Color(Palette::White).setAlpha(64));\n    }\n};\n\nvoid Main() {\n\n    Menu menu({ 200,100 }, Font(15), 150, 30);\n\n    menu.add(L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n    menu.add(L\"\u9078\u629e\u80a2\uff12\", []() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); });\n    menu.add(L\"\u9078\u629e\u80a2\uff13\", []() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); });\n    menu.add(L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint);\n\n    while (System::Update())\n    {\n        menu.update();\n        menu.draw();\n    }\n}\n\n\n\n\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n\u73fe\u72b6\u306e\u30e1\u30cb\u30e5\u30fc\u306f\u2191\u2193\u30ad\u30fc\u3092\u62bc\u3057\u305f\u77ac\u9593\u306b\uff11\u3064\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304d\u307e\u3059\u304c\u3001\u2191\u2193\u30ad\u30fc\u306e\u62bc\u3057\u3063\u3071\u306a\u3057\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u5e7e\u3064\u304b\u5148\u306e\u9078\u629e\u80a2\u306b\u52d5\u304b\u305b\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u30ad\u30fc\u3092\u62bc\u3057\u3066\u308b\u9593\u3001\u5e38\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u3068\u30ab\u30fc\u30bd\u30eb\u304c\u65e9\u3059\u304e\u3066\u5236\u5fa1\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7406\u60f3\u7684\u306a\u30ab\u30fc\u30bd\u30eb\u306e\u52d5\u4f5c\u306f\n1.\u3000\u62bc\u3057\u305f\u77ac\u9593\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u4e00\u3064\u52d5\u304f\n 2.\u3000\u62bc\u3057\u59cb\u3081\u3066\u304b\u30890.5~1\u79d2\u306f\u66f4\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3053\u3068\u306f\u306a\u3044\n 3.\u3000\u305d\u308c\u4ee5\u964d\u306f0.1\u79d2\u3054\u3068\u306b\u4e00\u3064\u52d5\u304f\n\u3068\u3044\u3046\u611f\u3058\u3067\u52d5\u3044\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nMain.cpp\n# include <Siv3D.hpp>\n\nclass RepeatableKey {\nprivate:\n    Key key_m;\n    int pressedTime_m;                  // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\n    const int delayUntilRepeat_m;       // \u30ea\u30d4\u30fc\u30c8\u5165\u529b\u307e\u3067\u306e\u6642\u9593\n    const int keyRepeat_m;              // \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306e\u9593\u9694\npublic:\n    RepeatableKey(Key key, int delayUntilRepeat = 30, int keyRepeat = 6)\n        : key_m(key)\n        , delayUntilRepeat_m(delayUntilRepeat)\n        , keyRepeat_m(keyRepeat)\n    {}\n    // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u304b\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\n    void update() {\n        pressedTime_m = (key_m.pressed)? (pressedTime_m + 1) % INT_MAX : 0;\n    }\n    // \u30ad\u30fc\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u304dtrue\u3092\u8fd4\u3059\n    bool get()const {\n        return (pressedTime_m > delayUntilRepeat_m)? pressedTime_m % keyRepeat_m == 0 : pressedTime_m == 1;\n    }\n};\n\nvoid Main() {\n\n    // \u300c\u6587\u5b57\u5217\u3000\u3068\u3000\u95a2\u6570\u3000\u306e\u30da\u30a2\u300d\u3000\u306e\u53ef\u5909\u914d\u5217\n    std::vector< std::pair< String , std::function<void(void)> > > choices;\n\n    // \u53ef\u5909\u914d\u5217\u306b\u4f5c\u3063\u305f\u30da\u30a2\u3092\u8ffd\u52a0\u3059\u308b\n    choices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); }));\n    choices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff12\", []() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); }));\n    choices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff13\", []() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); }));\n    choices.push_back( std::make_pair( L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint));\n\n    Font font(15);      // \u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u30d5\u30a9\u30f3\u30c8    \n    int cursor = 0;     // \u4eca\u4f55\u3092\u9078\u3093\u3067\u308b\u304b\u306e\u30ab\u30fc\u30bd\u30eb\n    RepeatableKey up(Input::KeyUp), down(Input::KeyDown);   //\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u305f\u30ad\u30fc\n\n    while (System::Update()) {\n\n        // \u9078\u629e\u80a2\u3092\u63cf\u753b\n        for (unsigned i = 0; i < choices.size(); i++) {\n            font.draw(choices[i].first, { 200,30 * i });\n        }\n\n        // \u2191\u30ad\u30fc\u3068\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059(\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u5bfe\u5fdc)\n        up.update();\n        down.update();\n        cursor += up.get() ? -1 : down.get() ? 1 : 0;\n        //cursor += Input::KeyDown.clicked - Input::KeyUp.clicked;  \n\n        // \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n        if (cursor < 0) { \n            cursor = choices.size() - 1;\n        }           \n        cursor %= choices.size();                                   \n\n        //\u30ab\u30fc\u30bd\u30eb\u3092\u534a\u900f\u660e\u306a\u56db\u89d2\u3067\u63cf\u753b\n        Rect({ 200 ,cursor * 30 }, { 150,30 }).draw(Color(Palette::Wheat).setAlpha(64));\n\n        // Enter\u30ad\u30fc\u3000\u304b\u3000Z\u30ad\u30fc\u3000\u3092\u62bc\u3059\u3068\u9078\u629e\u3057\u305f\u95a2\u6570\u3092\u5b9f\u884c\n        if ((Input::KeyEnter | Input::KeyZ).clicked) {\n            choices[cursor].second();\n        }\n    }\n}\n\n\n\u3053\u308c\u3067\u3044\u3044\u611f\u3058\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u5b8c\u6210\u5f62\n\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u306e\u771f\u3093\u4e2d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u5ea7\u6a19\u3068\u5e45\u306b\u5408\u308f\u305b\u3066\u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308c\u3070RPG\u98a8\u306e\u30e1\u30cb\u30e5\u30fc\u306e\u5b8c\u6210\u3067\u3059\u3002\n\nMain.cpp\n# include <Siv3D.hpp>\n\nclass VariableWindow\n{\nprivate:\n    Texture texture_m;  // \u753b\u50cf\u7d20\u6750\u306e\u30c6\u30af\u30b9\u30c1\u30e3\n    Point pos_m;        // \u5de6\u4e0a\u306e\u5ea7\u6a19\n    Size size_m;        // \u63cf\u753b\u3059\u308b\u30b5\u30a4\u30ba\npublic:\n    VariableWindow(Texture texture, Point pos, Size size)\n        : texture_m(texture)\n        , pos_m(pos)\n        , size_m(size)\n    {};\n    void draw()const {\n        const int w = texture_m.width / 3;\n        const int h = texture_m.height / 3; \n        const std::array<int, 3> width = { w, size_m.x - 2 * w, w };\n        const std::array<int, 3> height = { h, size_m.y - 2 * h, h };\n        Point p(pos_m);                         // \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u8868\u793a\u3059\u308b\u5ea7\u6a19(\u8868\u793a\u3059\u308b\u305f\u3073\u306b\u305a\u3089\u3057\u3066\u3044\u304f)\n        for (int y = 0; y < 3; y++) {\n            for (int x = 0; x < 3; x++) {\n                texture_m({ w*x,h*y }, { w, h }).resize(width[x], height[y]).draw(p);\n                p.x += width[x];\n            }\n            p.x = pos_m.x;\n            p.y += height[y];\n        }\n    }\n    // \u771f\u3093\u4e2d\u306e\u90e8\u5206\u3092\u56db\u89d2\u5f62\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n    Rect getCenterRect()const {\n        const Point p(texture_m.size / 3);\n        const Size size(size_m - texture_m.size * 2 / 3);\n        return Rect(pos_m + p, size);\n    }\n};\n\nclass RepeatableKey {\nprivate:\n    Key key_m;\n    int pressedTime_m;                  // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\n    const int delayUntilRepeat_m;       // \u30ea\u30d4\u30fc\u30c8\u5165\u529b\u307e\u3067\u306e\u6642\u9593\n    const int keyRepeat_m;              // \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306e\u9593\u9694\npublic:\n    RepeatableKey(Key key, int delayUntilRepeat = 30, int keyRepeat = 6)\n        : key_m(key)\n        , delayUntilRepeat_m(delayUntilRepeat)\n        , keyRepeat_m(keyRepeat)\n    {}\n    // \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u304b\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\n    void update() {\n        pressedTime_m = (key_m.pressed)? (pressedTime_m + 1) % INT_MAX : 0;\n    }\n    // \u30ad\u30fc\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u304dtrue\u3092\u8fd4\u3059\n    bool get()const {\n        return (pressedTime_m > delayUntilRepeat_m)? pressedTime_m % keyRepeat_m == 0 : pressedTime_m == 1;\n    }\n};\n\nclass Menu {\nprivate:    \n    const Point pos_m;          // \u30e1\u30cb\u30e5\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19   \n    const Font font_m;          // \u9078\u629e\u80a2\u8868\u793a\u306e\u30d5\u30a9\u30f3\u30c8\n    const int width_m;          // \u30ab\u30fc\u30bd\u30eb\u306e\u5e45\n    const int height_m;         // \u9078\u629e\u80a2\u4e00\u3064\u4e00\u3064\u306e\u9ad8\u3055\n    int cursor_m;               // \u30ab\u30fc\u30bd\u30eb\n    std::vector<std::pair<String, std::function<void(void)>>> choices_m;    // \u9078\u629e\u80a2\u306e\u914d\u5217\n    RepeatableKey up_m, down_m; // \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u305f\u30ad\u30fc\npublic:\n    Menu(Point pos, Font font = Font(20),int width=300,int height=30)\n        : pos_m(pos)\n        , font_m(font)  \n        , width_m(width)\n        , height_m(height)\n        , cursor_m(0)\n        , up_m(Input::KeyUp)\n        , down_m(Input::KeyDown)\n    {}\n\n    void update() {\n\n        // \u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059\n        down_m.update();\n        up_m.update();\n        cursor_m += down_m.get() ? 1 : up_m.get() ? -1 : 0;\n\n        // \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n        cursor_m = (cursor_m < 0)? choices_m.size() - 1 : cursor_m % choices_m.size();\n\n        // Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3059\u9078\u629e\u80a2\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n        if ( (Input::KeyZ | Input::KeyEnter).clicked ){\n            choices_m[cursor_m].second();\n        }\n    }\n\n    void draw()const {\n        // \u9078\u629e\u80a2\u306e\u8868\u793a\n        for (unsigned i = 0; i < choices_m.size(); i++) {\n            font_m.draw(choices_m[i].first, pos_m.movedBy(0,i*height_m));\n        }\n        // \u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\n        Rect(pos_m.movedBy(0, height_m * cursor_m), width_m,height_m).draw(Color(Palette::White).setAlpha(64));\n    }\n\n    // \u9078\u629e\u80a2\u3092\u8ffd\u52a0\n    void add(String text, std::function<void()> function) {\n        choices_m.push_back(std::make_pair(text, function));\n    }\n};\n\nvoid Main()\n{\n    Graphics::SetBackground(Palette::Blue);\n\n    VariableWindow variableWindow(Texture(L\"WindowBase_b_02.png\"), { 200,50 }, { 200,210 });\n    Rect r(variableWindow.getCenterRect());         // \u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u306e\u771f\u3093\u4e2d\u306e\u9818\u57df\n    Menu menu(r.tl, Font(15), r.w, 30);             // \u2191\u306b\u5408\u308f\u305b\u3066\u9078\u629e\u80a2\u3092\u4f5c\u308b\n\n    menu.add(L\"\u9078\u629e\u80a2\uff11\",   []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n    menu.add(L\"\u9078\u629e\u80a2\uff12\",   []() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); });\n    menu.add(L\"\u9078\u629e\u80a2\uff13\",   []() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); });\n    menu.add(L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint);\n    menu.add(L\"\u30b2\u30fc\u30e0\u7d42\u4e86\", System::Exit);\n\n    while (System::Update())\n    {\n        variableWindow.draw();\n        menu.update();\n        menu.draw();\n    }\n}\n\n\n\nSiv3D Advent Calendar 2016 16\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n***\n\n\u672c\u8a18\u4e8b\u3067\u306f\u753b\u50cf\u306e\u3088\u3046\u306a\u30e1\u30cb\u30e5\u30fc\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n![\u5b8c\u6210\u5f62](https://qiita-image-store.s3.amazonaws.com/0/151567/cd5b0497-ac5d-7391-309c-e72901ff00a7.png)\n\n\u672c\u8a18\u4e8b\u3067\u306eSiv3D\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fAugust2016v2\u3067\u3059\u3002\n\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u753b\u50cf\u3068\u3057\u3066\u3001\u306d\u304f\u3089\u3055\u3093\u306e\u753b\u50cf\u7d20\u6750\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n#\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u3092\u30b5\u30a4\u30ba\u3092\u5909\u3048\u3066\u8868\u793a\u3059\u308b\n\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u753b\u50cf\u3068\u3057\u3066\u67a0\u306b\u88c5\u98fe\u306e\u3042\u308b\u304b\u3063\u3053\u3044\u3044\u7d20\u6750\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u4f7f\u3044\u305f\u3044\u5927\u304d\u3055\u306b\u62e1\u5927\u3059\u308b\u3068\u88c5\u98fe\u304c\u5d29\u308c\u3066\u3057\u307e\u3044\u53f0\u7121\u3057\u3067\u3059\u3002\n\n![Siv3D App 2016_12_14 21_05_26.png](https://qiita-image-store.s3.amazonaws.com/0/151567/99700db1-0d03-5d79-f309-0175b4804a7b.png)\n\n\u5143\u306e\u753b\u50cf\u30929\u5206\u5272\u3057\u3066\u3001\u753b\u50cf\u306e2,5,8\u306e\u90e8\u5206\u3092\u6a2a\u65b9\u5411\u306b\u62e1\u5927\u30014,5,6\u306e\u90e8\u5206\u3092\u7e26\u65b9\u5411\u306b\u62e1\u5927\u3059\u308b\u3053\u3068\u3067\u67a0\u306e\u5f62\u3092\u5d29\u3059\u3053\u3068\u306a\u304f\u62e1\u5927\u3067\u304d\u307e\u3059\u3002\n\n![9\u5206\u5272\u3057\u3066\u62e1\u5927](https://qiita-image-store.s3.amazonaws.com/0/151567/f99657b3-6443-dfc9-fdab-c406d1baf7a5.png)\n\n\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u3092\u88c5\u98fe\u3092\u5d29\u3055\u306a\u3044\u3088\u3046\u306b\u5927\u304d\u3055\u3092\u5909\u3048\u3066\u8868\u793a\u3059\u308b\u3053\u3068\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u306e5\u306e\u90e8\u5206\u306e\u9818\u57df\u3092\u53d6\u5f97\u3067\u304d\u308b\u3068\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4e2d\u306b\u4f55\u304b\u3092\u8868\u793a\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u306e\u3067\u3001\u3053\u306e\u9818\u57df\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3082\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```Main.cpp\n# include <Siv3D.hpp>\n\nclass VariableWindow\n{\nprivate:\n\tTexture texture_m;\t// \u753b\u50cf\u7d20\u6750\u306e\u30c6\u30af\u30b9\u30c1\u30e3\n\tPoint pos_m;\t\t// \u5de6\u4e0a\u306e\u5ea7\u6a19\n\tSize size_m;\t\t// \u63cf\u753b\u3059\u308b\u30b5\u30a4\u30ba\t\t\npublic:\n\tVariableWindow(Texture texture, Point pos, Size size)\n\t\t: texture_m(texture)\n\t\t, pos_m(pos)\n\t\t, size_m(size)\n\t{};\n\t// \u63cf\u753b\n\tvoid draw()const {\n\t\tconst int w = texture_m.width / 3;\n\t\tconst int h = texture_m.height / 3;\n\t\tconst std::array<int, 3> width = { w, size_m.x - 2 * w, w };\n\t\tconst std::array<int, 3> height = { h, size_m.y - 2 * h, h };\n\t\tPoint p(pos_m);\n\t\tfor (int y = 0; y < 3; y++) {\n\t\t\tfor (int x = 0; x < 3; x++) {\n\t\t\t\ttexture_m({ w*x,h*y }, { w, h }).resize(width[x], height[y]).draw(p);\n\t\t\t\tp.x += width[x];\n\t\t\t}\n\t\t\tp.x = pos_m.x;\n\t\t\tp.y += height[y];\n\t\t}\n\t};\n\t// \u771f\u3093\u4e2d\u306e\u90e8\u5206\u3092\u56db\u89d2\u5f62\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n\tRect getCenterRect()const {\n\t\tconst Point p(texture_m.size / 3);\n\t\tconst Size size(size_m - texture_m.size * 2 / 3);\n\t\treturn Rect(pos_m + p, size);\n\t};\n};\n\nvoid Main() {\n\t// \u753b\u50cf\u7d20\u6750\u304c\u9ed2\u3063\u307d\u3044\u306e\u3067\u80cc\u666f\u8272\u3092\u5909\u3048\u308b\n\tGraphics::SetBackground(Palette::Blue);\n\n\t //\u7d20\u6750\u753b\u50cf\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u4f4d\u7f6e\u3001\u30b5\u30a4\u30ba\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\n\tVariableWindow variableWindow(Texture(L\"WindowBase_b_02.png\"), { 10,10 }, { 200,300 }); \n\n\twhile (System::Update())\n\t{\n\t\tvariableWindow.draw();\n\t}\n}\n```\n\n#\u9078\u629e\u80a2\u3092\u3064\u304f\u308b\n\n![Siv3D App 2016_12_15 18_48_08.png](https://qiita-image-store.s3.amazonaws.com/0/151567/798f4ad8-43c4-1b6d-38ed-5979752176a9.png)\n\n\u9078\u629e\u80a2\u306e\u4e00\u3064\u4e00\u3064\u304c\u6301\u3063\u3066\u3044\u308b\u3068\u826f\u3044\u8981\u7d20\u306f\u3001\u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308b\u3068\u304d\u306e\u300c\u6587\u5b57\u5217\u300d\u3068\u9078\u3070\u308c\u305f\u3068\u304d\u5b9f\u884c\u3059\u308b\u300c\u95a2\u6570\u300d\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001STL\u306epair\u3092\u4f7f\u3046\u3068\u304a\u624b\u8efd\u3067\u3059\u3002\n\n```cpp\n// \u6587\u5b57\u5217\u3068\u95a2\u6570\u306e\u30da\u30a2\u3092\u4f5c\u308b\nstd::pair< String,std::function<void(void)> > pair = std::make_pair( L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n\n// \u30da\u30a2\u306e\uff11\u3064\u76ee\u306e\u6587\u5b57\u5217\u3092\u8868\u793a\nPrintln(pair.first);\n\n// \u30da\u30a2\u306e\uff12\u3064\u76ee\u306e\u95a2\u6570\u3092\u5b9f\u884c\npair.second();\n```\n\u3069\u306e\u9078\u629e\u80a2\u3092\u9078\u3093\u3067\u308b\u304b\u3092\u793a\u3059\u30ab\u30fc\u30bd\u30eb\u3092\u7528\u610f\u3057\u3001\u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3057\u3001Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3057\u3066\u3044\u308b\u9078\u629e\u80a2\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```Main.cpp\n\n# include <Siv3D.hpp>\n\nclass Menu {\nprivate:\t\n\tconst Point pos_m;\t\t\t// \u30e1\u30cb\u30e5\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\t\n\tconst Font font_m;\t\t\t// \u9078\u629e\u80a2\u8868\u793a\u306e\u30d5\u30a9\u30f3\u30c8\n\tconst int width_m;\t\t\t// \u30ab\u30fc\u30bd\u30eb\u306e\u5e45\n\tconst int height_m;\t\t\t// \u9078\u629e\u80a2\u4e00\u3064\u4e00\u3064\u306e\u9ad8\u3055\n\tint cursor_m;\t\t\t\t// \u30ab\u30fc\u30bd\u30eb\n\tstd::vector<std::pair<String, std::function<void(void)>>> choices_m;\t// \u9078\u629e\u80a2\u306e\u53ef\u5909\u9577\u914d\u5217\npublic:\n\tMenu(Point pos, Font font,int width,int height)\n\t\t: pos_m(pos)\n\t\t, font_m(font)\t\n\t\t, width_m(width)\n\t\t, height_m(height)\n\t\t, cursor_m(0)\n\t{}\n\n\t// \u9078\u629e\u80a2\u3092\u8ffd\u52a0\n\tvoid add(String text, std::function<void()> function) {\n\t\tchoices_m.push_back(std::make_pair(text, function));\n\t}\n\n\tvoid update() {\n\n\t\t// \u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059\n\t\tcursor_m += Input::KeyDown.clicked - Input::KeyUp.clicked;\n\n\t\t// \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n\t\tcursor_m = (cursor_m < 0)? choices_m.size() - 1 : cursor_m % choices_m.size();\n\n\t\t// Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3059\u9078\u629e\u80a2\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n\t\tif ( (Input::KeyZ | Input::KeyEnter).clicked ){\n\t\t\tchoices_m[cursor_m].second();\n\t\t}\n\t}\n\n\tvoid draw()const {\n\t\t// \u9078\u629e\u80a2\u306e\u8868\u793a\n\t\tfor (unsigned i = 0; i < choices_m.size(); i++) {\n\t\t\tfont_m.draw(choices_m[i].first, pos_m.movedBy(0,i*height_m));\n\t\t}\n\t\t// \u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\n\t\tRect(pos_m.movedBy(0, height_m * cursor_m), width_m,height_m).draw(Color(Palette::White).setAlpha(64));\n\t}\n};\n\nvoid Main() {\n\n\tMenu menu({ 200,100 }, Font(15), 150, 30);\n\n\tmenu.add(L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n\tmenu.add(L\"\u9078\u629e\u80a2\uff12\", []() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); });\n\tmenu.add(L\"\u9078\u629e\u80a2\uff13\", []() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); });\n\tmenu.add(L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint);\n\n\twhile (System::Update())\n\t{\n\t\tmenu.update();\n\t\tmenu.draw();\n\t}\n}\n```\n\n#\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n\u73fe\u72b6\u306e\u30e1\u30cb\u30e5\u30fc\u306f\u2191\u2193\u30ad\u30fc\u3092\u62bc\u3057\u305f\u77ac\u9593\u306b\uff11\u3064\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304d\u307e\u3059\u304c\u3001\u2191\u2193\u30ad\u30fc\u306e\u62bc\u3057\u3063\u3071\u306a\u3057\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u5e7e\u3064\u304b\u5148\u306e\u9078\u629e\u80a2\u306b\u52d5\u304b\u305b\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u30ad\u30fc\u3092\u62bc\u3057\u3066\u308b\u9593\u3001\u5e38\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u3068\u30ab\u30fc\u30bd\u30eb\u304c\u65e9\u3059\u304e\u3066\u5236\u5fa1\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7406\u60f3\u7684\u306a\u30ab\u30fc\u30bd\u30eb\u306e\u52d5\u4f5c\u306f\n\n 1.\u3000\u62bc\u3057\u305f\u77ac\u9593\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u4e00\u3064\u52d5\u304f\n 2.\u3000\u62bc\u3057\u59cb\u3081\u3066\u304b\u30890.5~1\u79d2\u306f\u66f4\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3053\u3068\u306f\u306a\u3044\n 3.\u3000\u305d\u308c\u4ee5\u964d\u306f0.1\u79d2\u3054\u3068\u306b\u4e00\u3064\u52d5\u304f\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u52d5\u3044\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304f\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```Main.cpp\n# include <Siv3D.hpp>\n\nclass RepeatableKey {\nprivate:\n\tKey key_m;\n\tint pressedTime_m;\t\t\t\t\t// \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\n\tconst int delayUntilRepeat_m;\t\t// \u30ea\u30d4\u30fc\u30c8\u5165\u529b\u307e\u3067\u306e\u6642\u9593\n\tconst int keyRepeat_m;\t\t\t\t// \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306e\u9593\u9694\npublic:\n\tRepeatableKey(Key key, int delayUntilRepeat = 30, int keyRepeat = 6)\n\t\t: key_m(key)\n\t\t, delayUntilRepeat_m(delayUntilRepeat)\n\t\t, keyRepeat_m(keyRepeat)\n\t{}\n\t// \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u304b\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\n\tvoid update() {\n\t\tpressedTime_m = (key_m.pressed)? (pressedTime_m + 1) % INT_MAX : 0;\n\t}\n\t// \u30ad\u30fc\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u304dtrue\u3092\u8fd4\u3059\n\tbool get()const {\n\t\treturn (pressedTime_m > delayUntilRepeat_m)? pressedTime_m % keyRepeat_m == 0 : pressedTime_m == 1;\n\t}\n};\n\nvoid Main() {\n\n\t// \u300c\u6587\u5b57\u5217\u3000\u3068\u3000\u95a2\u6570\u3000\u306e\u30da\u30a2\u300d\u3000\u306e\u53ef\u5909\u914d\u5217\n\tstd::vector< std::pair< String , std::function<void(void)> > > choices;\n\n\t// \u53ef\u5909\u914d\u5217\u306b\u4f5c\u3063\u305f\u30da\u30a2\u3092\u8ffd\u52a0\u3059\u308b\n\tchoices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff11\", []() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); }));\n\tchoices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff12\", []() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); }));\n\tchoices.push_back( std::make_pair( L\"\u9078\u629e\u80a2\uff13\", []() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); }));\n\tchoices.push_back( std::make_pair( L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint));\n\n\tFont font(15);\t\t// \u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u30d5\u30a9\u30f3\u30c8\t\n\tint cursor = 0;\t\t// \u4eca\u4f55\u3092\u9078\u3093\u3067\u308b\u304b\u306e\u30ab\u30fc\u30bd\u30eb\n\tRepeatableKey up(Input::KeyUp), down(Input::KeyDown);\t//\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u305f\u30ad\u30fc\n\n\twhile (System::Update()) {\n\n\t\t// \u9078\u629e\u80a2\u3092\u63cf\u753b\n\t\tfor (unsigned i = 0; i < choices.size(); i++) {\n\t\t\tfont.draw(choices[i].first, { 200,30 * i });\n\t\t}\n\n\t\t// \u2191\u30ad\u30fc\u3068\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059(\u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u5bfe\u5fdc)\n\t\tup.update();\n\t\tdown.update();\n\t\tcursor += up.get() ? -1 : down.get() ? 1 : 0;\n\t\t//cursor += Input::KeyDown.clicked - Input::KeyUp.clicked;\t\n\n\t\t// \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n\t\tif (cursor < 0) { \n\t\t\tcursor = choices.size() - 1;\n\t\t}\t\t\t\n\t\tcursor %= choices.size();\t\t\t\t\t\t\t\t\t\n\n\t\t//\u30ab\u30fc\u30bd\u30eb\u3092\u534a\u900f\u660e\u306a\u56db\u89d2\u3067\u63cf\u753b\n\t\tRect({ 200 ,cursor * 30 }, { 150,30 }).draw(Color(Palette::Wheat).setAlpha(64));\n\n\t\t// Enter\u30ad\u30fc\u3000\u304b\u3000Z\u30ad\u30fc\u3000\u3092\u62bc\u3059\u3068\u9078\u629e\u3057\u305f\u95a2\u6570\u3092\u5b9f\u884c\n\t\tif ((Input::KeyEnter | Input::KeyZ).clicked) {\n\t\t\tchoices[cursor].second();\n\t\t}\n\t}\n}\n```\n\u3053\u308c\u3067\u3044\u3044\u611f\u3058\u306b\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n#\u5b8c\u6210\u5f62\n\u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u306e\u771f\u3093\u4e2d\u306e\u9818\u57df\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u5ea7\u6a19\u3068\u5e45\u306b\u5408\u308f\u305b\u3066\u9078\u629e\u80a2\u3092\u8868\u793a\u3059\u308c\u3070RPG\u98a8\u306e\u30e1\u30cb\u30e5\u30fc\u306e\u5b8c\u6210\u3067\u3059\u3002\n\n```Main.cpp\n# include <Siv3D.hpp>\n\nclass VariableWindow\n{\nprivate:\n\tTexture texture_m;\t// \u753b\u50cf\u7d20\u6750\u306e\u30c6\u30af\u30b9\u30c1\u30e3\n\tPoint pos_m;\t\t// \u5de6\u4e0a\u306e\u5ea7\u6a19\n\tSize size_m;\t\t// \u63cf\u753b\u3059\u308b\u30b5\u30a4\u30ba\npublic:\n\tVariableWindow(Texture texture, Point pos, Size size)\n\t\t: texture_m(texture)\n\t\t, pos_m(pos)\n\t\t, size_m(size)\n\t{};\n\tvoid draw()const {\n\t\tconst int w = texture_m.width / 3;\n\t\tconst int h = texture_m.height / 3;\t\n\t\tconst std::array<int, 3> width = { w, size_m.x - 2 * w, w };\n\t\tconst std::array<int, 3> height = { h, size_m.y - 2 * h, h };\n\t\tPoint p(pos_m);\t\t\t\t\t\t\t// \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4e00\u90e8\u3092\u8868\u793a\u3059\u308b\u5ea7\u6a19(\u8868\u793a\u3059\u308b\u305f\u3073\u306b\u305a\u3089\u3057\u3066\u3044\u304f)\n\t\tfor (int y = 0; y < 3; y++) {\n\t\t\tfor (int x = 0; x < 3; x++) {\n\t\t\t\ttexture_m({ w*x,h*y }, { w, h }).resize(width[x], height[y]).draw(p);\n\t\t\t\tp.x += width[x];\n\t\t\t}\n\t\t\tp.x = pos_m.x;\n\t\t\tp.y += height[y];\n\t\t}\n\t}\n\t// \u771f\u3093\u4e2d\u306e\u90e8\u5206\u3092\u56db\u89d2\u5f62\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\n\tRect getCenterRect()const {\n\t\tconst Point p(texture_m.size / 3);\n\t\tconst Size size(size_m - texture_m.size * 2 / 3);\n\t\treturn Rect(pos_m + p, size);\n\t}\n};\n\nclass RepeatableKey {\nprivate:\n\tKey key_m;\n\tint pressedTime_m;\t\t\t\t\t// \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u6642\u9593\n\tconst int delayUntilRepeat_m;\t\t// \u30ea\u30d4\u30fc\u30c8\u5165\u529b\u307e\u3067\u306e\u6642\u9593\n\tconst int keyRepeat_m;\t\t\t\t// \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306e\u9593\u9694\npublic:\n\tRepeatableKey(Key key, int delayUntilRepeat = 30, int keyRepeat = 6)\n\t\t: key_m(key)\n\t\t, delayUntilRepeat_m(delayUntilRepeat)\n\t\t, keyRepeat_m(keyRepeat)\n\t{}\n\t// \u30ad\u30fc\u304c\u62bc\u3055\u308c\u7d9a\u3051\u3066\u3044\u308b\u304b\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\n\tvoid update() {\n\t\tpressedTime_m = (key_m.pressed)? (pressedTime_m + 1) % INT_MAX : 0;\n\t}\n\t// \u30ad\u30fc\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u304dtrue\u3092\u8fd4\u3059\n\tbool get()const {\n\t\treturn (pressedTime_m > delayUntilRepeat_m)? pressedTime_m % keyRepeat_m == 0 : pressedTime_m == 1;\n\t}\n};\n\nclass Menu {\nprivate:\t\n\tconst Point pos_m;\t\t\t// \u30e1\u30cb\u30e5\u30fc\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\t\n\tconst Font font_m;\t\t\t// \u9078\u629e\u80a2\u8868\u793a\u306e\u30d5\u30a9\u30f3\u30c8\n\tconst int width_m;\t\t\t// \u30ab\u30fc\u30bd\u30eb\u306e\u5e45\n\tconst int height_m;\t\t\t// \u9078\u629e\u80a2\u4e00\u3064\u4e00\u3064\u306e\u9ad8\u3055\n\tint cursor_m;\t\t\t\t// \u30ab\u30fc\u30bd\u30eb\n\tstd::vector<std::pair<String, std::function<void(void)>>> choices_m;\t// \u9078\u629e\u80a2\u306e\u914d\u5217\n\tRepeatableKey up_m, down_m;\t// \u30ad\u30fc\u30ea\u30d4\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u305f\u30ad\u30fc\npublic:\n\tMenu(Point pos, Font font = Font(20),int width=300,int height=30)\n\t\t: pos_m(pos)\n\t\t, font_m(font)\t\n\t\t, width_m(width)\n\t\t, height_m(height)\n\t\t, cursor_m(0)\n\t\t, up_m(Input::KeyUp)\n\t\t, down_m(Input::KeyDown)\n\t{}\n\n\tvoid update() {\n\n\t\t// \u2191\u2193\u30ad\u30fc\u3067\u30ab\u30fc\u30bd\u30eb\u3092\u52d5\u304b\u3059\n\t\tdown_m.update();\n\t\tup_m.update();\n\t\tcursor_m += down_m.get() ? 1 : up_m.get() ? -1 : 0;\n\n\t\t// \u30ab\u30fc\u30bd\u30eb\u3092\u4e0a\u4e0b\u3067\u30eb\u30fc\u30d7\u3055\u305b\u308b\n\t\tcursor_m = (cursor_m < 0)? choices_m.size() - 1 : cursor_m % choices_m.size();\n\n\t\t// Z\u30ad\u30fc\u304bEnter\u30ad\u30fc\u3067\u3001\u30ab\u30fc\u30bd\u30eb\u304c\u6307\u3059\u9078\u629e\u80a2\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n\t\tif ( (Input::KeyZ | Input::KeyEnter).clicked ){\n\t\t\tchoices_m[cursor_m].second();\n\t\t}\n\t}\n\n\tvoid draw()const {\n\t\t// \u9078\u629e\u80a2\u306e\u8868\u793a\n\t\tfor (unsigned i = 0; i < choices_m.size(); i++) {\n\t\t\tfont_m.draw(choices_m[i].first, pos_m.movedBy(0,i*height_m));\n\t\t}\n\t\t// \u30ab\u30fc\u30bd\u30eb\u306e\u8868\u793a\n\t\tRect(pos_m.movedBy(0, height_m * cursor_m), width_m,height_m).draw(Color(Palette::White).setAlpha(64));\n\t}\n\n\t// \u9078\u629e\u80a2\u3092\u8ffd\u52a0\n\tvoid add(String text, std::function<void()> function) {\n\t\tchoices_m.push_back(std::make_pair(text, function));\n\t}\n};\n\nvoid Main()\n{\n\tGraphics::SetBackground(Palette::Blue);\n\n\tVariableWindow variableWindow(Texture(L\"WindowBase_b_02.png\"), { 200,50 }, { 200,210 });\n\tRect r(variableWindow.getCenterRect());\t\t\t// \u30a6\u30a3\u30f3\u30c9\u30a6\u753b\u50cf\u306e\u771f\u3093\u4e2d\u306e\u9818\u57df\n\tMenu menu(r.tl, Font(15), r.w, 30);\t\t\t\t// \u2191\u306b\u5408\u308f\u305b\u3066\u9078\u629e\u80a2\u3092\u4f5c\u308b\n\n\tmenu.add(L\"\u9078\u629e\u80a2\uff11\",\t[]() {Println(L\"\u9078\u629e\u80a2\uff11\u304c\u9078\u3070\u308c\u307e\u3057\u305f\"); });\n\tmenu.add(L\"\u9078\u629e\u80a2\uff12\",\t[]() {Println(L\"\u9078\u629e\u80a2\uff12\u304c\u9078\u3070\u308c\u305f\u3088\uff5e\"); });\n\tmenu.add(L\"\u9078\u629e\u80a2\uff13\",\t[]() {Println(L\"\u9078\u3070\u308c\u305f\u306e\u306f\u9078\u629e\u80a2\uff13\uff01\uff01\"); });\n\tmenu.add(L\"\u8868\u793a\u3092\u6d88\u3059\", ClearPrint);\n\tmenu.add(L\"\u30b2\u30fc\u30e0\u7d42\u4e86\", System::Exit);\n\n\twhile (System::Update())\n\t{\n\t\tvariableWindow.draw();\n\t\tmenu.update();\n\t\tmenu.draw();\n\t}\n}\n```\n\n![\u5b8c\u6210\u5f62](https://qiita-image-store.s3.amazonaws.com/0/151567/cd5b0497-ac5d-7391-309c-e72901ff00a7.png)\n\n\n\n", "tags": ["Siv3D", "C++"]}