{"context": "\n\n\u306f\u3058\u3081\u306b\nPython\u3001\u4e26\u5217\u51e6\u7406\u3067\u30b0\u30b0\u308b\u3068\u3001multiprocessing\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n[Python]FX\u30b7\u30b9\u30c8\u30ec\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3084\u3063\u3066\u307f\u308b\n\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u305f\u304f\u3055\u3093\u306e\u500b\u4f53\u3092\u8a55\u4fa1\u3057\u3066\u305d\u306e\u9069\u5fdc\u5ea6\u306b\u3088\u308a\u9078\u629e\u3001\u4ea4\u53c9\u306a\u3069\u306e\u907a\u4f1d\u7684\u51e6\u7406\u3092\u884c\u3046\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u500b\u4f53\u306e\u8a55\u4fa1\u306f\u5b8c\u5168\u306b\u72ec\u7acb\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e26\u5217\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u3082\u305d\u306e\u500b\u4f53\u8a55\u4fa1\u306e\u90e8\u5206\u306b\u4e26\u5217\u51e6\u7406\u3092\u9069\u5fdc\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n\u3082\u3068\u306e\u30b3\u30fc\u30c9\n\u4e26\u5217\u5316\u3055\u305b\u308b\u524d\u306e\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\u4e0a\u306e\u8a18\u4e8b\u306e\u30b7\u30b9\u30c8\u30ec\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u306b\u4f7f\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u6c4e\u7528\u7684\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u524d\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u7701\u7565\u3057\u307e\u3059\u3002\ndef Optimize(ohlc, Prange):\n    def shift(x, n=1): return np.concatenate((np.zeros(n), x[:-n])) #\u30b7\u30d5\u30c8\u95a2\u6570\n\n    SlowMA = np.empty([len(Prange[0]), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[0])):\n        SlowMA[i] = ind.iMA(ohlc, Prange[0][i])\n\n    FastMA = np.empty([len(Prange[1]), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[1])):\n        FastMA[i] = ind.iMA(ohlc, Prange[1][i])\n\n    ExitMA = np.empty([len(Prange[2]), len(ohlc)]) #\u6c7a\u6e08\u7528\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[2])):\n        ExitMA[i] = ind.iMA(ohlc, Prange[2][i])\n\n    Close = ohlc['Close'].values #\u7d42\u5024\n\n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 6])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        for k in range(M):\n            i0 = Param[k,0]\n            i1 = Param[k,1]\n            i2 = Param[k,2]\n            #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyEntry = (FastMA[i1] > SlowMA[i0]) & (shift(FastMA[i1]) <= shift(SlowMA[i0]))\n            #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellEntry = (FastMA[i1] < SlowMA[i0]) & (shift(FastMA[i1]) >= shift(SlowMA[i0]))\n            #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            BuyExit = (Close < ExitMA[i2]) & (shift(Close) >= shift(ExitMA[i2]))\n            #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            SellExit = (Close > ExitMA[i2]) & (shift(Close) <= shift(ExitMA[i2]))\n            #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n            Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n            Eval[k] = BacktestReport(Trade, PL)\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n\n\u3053\u306e\u307e\u307e\u5b9f\u884c\u3055\u305b\u3066\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\nimport time\n\nstart = time.perf_counter()\nresult = Optimize(ohlc, [SlowMAperiod, FastMAperiod, ExitMAperiod])\nprint(\"elapsed_time = {0} sec\".format(time.perf_counter()-start))\n\nelapsed_time = 11.180512751173708 sec\n\n\nmap\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\n\u3082\u3068\u306e\u30b3\u30fc\u30c9\u306e\u306a\u304b\u3067\u3001\u4e26\u5217\u5316\u3055\u305b\u308b\u306e\u306f\u3001for\u6587\u306e\u9593\u3067\u3059\u3002\u5404\u500b\u4f53\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u884c\u3044\u3001\u8a55\u4fa1\u3092\u884c\u3046\u90e8\u5206\u3067\u3001\u305d\u3053\u305d\u3053\u6642\u9593\u306e\u304b\u304b\u308b\u3068\u3053\u308d\u3067\u3059\u3002multiprocessing\u3092\u4f7f\u3046\u5834\u5408\u3001map\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u306a\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u305a\u306f\u3001for\u6587\u3092map\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u3001\u7e70\u308a\u8fd4\u3059\u90e8\u5206\u3092\u95a2\u6570\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u3061\u3087\u3063\u3068\u6ce8\u610f\u3059\u308b\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060map\u95a2\u6570\u306b\u3059\u308b\u3060\u3051\u306a\u3089\u3001Optimize\u95a2\u6570\u306e\u306a\u304b\u3067\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u306e\u3067\u3059\u304c\u3001multiprocessing\u3092\u4f7f\u3046\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001Optimize\u95a2\u6570\u306e\u5916\u5074\u3067evaluate\u3068\u3044\u3046\u540d\u524d\u3067\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u305f\u3002\nmap\u306b\u6e21\u3059\u90fd\u5408\u4e0a\u3001evaluate\u95a2\u6570\u306e\u5f15\u6570\u306fk\u3060\u3051\u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u305d\u3053\u3067\u3001SlowMA\u3001FastMA\u306a\u3069\u306e\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u5909\u6570\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u3001Param\u306f\u95a2\u6570\u306e\u5f15\u6570\u306b\u3057\u307e\u3057\u305f\u3002\nSlowMA = np.empty([len(SlowMAperiod), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\nfor i in range(len(SlowMAperiod)):\n    SlowMA[i] = ind.iMA(ohlc, SlowMAperiod[i])\n\nFastMA = np.empty([len(FastMAperiod), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\nfor i in range(len(FastMAperiod)):\n    FastMA[i] = ind.iMA(ohlc, FastMAperiod[i])\n\nExitMA = np.empty([len(ExitMAperiod), len(ohlc)]) #\u6c7a\u6e08\u7528\u79fb\u52d5\u5e73\u5747\nfor i in range(len(ExitMAperiod)):\n    ExitMA[i] = ind.iMA(ohlc, ExitMAperiod[i])\n\nClose = ohlc['Close'].values #\u7d42\u5024\n\n#\u30b7\u30d5\u30c8\u95a2\u6570\ndef shift(x, n=1):\n    return np.concatenate((np.zeros(n), x[:-n]))\n\n#\u4e26\u5217\u51e6\u7406\u3055\u305b\u308b\u95a2\u6570\ndef evaluate(k,Param):\n    i0 = Param[k,0]\n    i1 = Param[k,1]\n    i2 = Param[k,2]\n    #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n    BuyEntry = (FastMA[i1] > SlowMA[i0]) & (shift(FastMA[i1]) <= shift(SlowMA[i0]))\n    #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n    SellEntry = (FastMA[i1] < SlowMA[i0]) & (shift(FastMA[i1]) >= shift(SlowMA[i0]))\n    #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n    BuyExit = (Close < ExitMA[i2]) & (shift(Close) >= shift(ExitMA[i2]))\n    #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n    SellExit = (Close > ExitMA[i2]) & (shift(Close) <= shift(ExitMA[i2]))\n    #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n    Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n    return BacktestReport(Trade, PL)\n\nfor\u6587\u306e\u4ee3\u308f\u308a\u306bmap\u95a2\u6570\u3067\u7f6e\u304d\u63db\u3048\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\nimport functools\n\ndef Optimize(ohlc, Prange):\n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 4])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        #for k in range(M): Eval[k] = evaluate(k,Param)\n        Eval = np.array(list(map(functools.partial(evaluate, Param=Param), np.arange(M))))\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n\n\u5b9f\u969b\u306b\u306fmap\u3060\u3051\u3067\u7c21\u5358\u306b\u306f\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002map\u95a2\u6570\u306e\u6700\u521d\u306e\u5f15\u6570\u306b\u3001\u7e70\u308a\u8fd4\u3059\u95a2\u6570evaluate\u3092\u5165\u308c\u308b\u306e\u3067\u3059\u304c\u3001evaluate\u95a2\u6570\u306e\u5f15\u6570\u304c\u4e8c\u3064\u3042\u308b\u306e\u3067\u3001\u4e8c\u3064\u76ee\u306e\u5f15\u6570Param\u306fParam\u306b\u56fa\u5b9a\u3059\u308b\u3088\u3046functools.partial\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305fmap\u306e\u623b\u308a\u5024\u306fNumPy\u306earray\u306b\u5909\u63db\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u524d\u306blist\u306b\u5909\u63db\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\uff08Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305d\u3046\u3067\u3059\u3002\u4eca\u56de\u8a66\u3057\u305f\u306e\u306f\u3001Python 3.5.1\u3067\u3059\u3002\uff09\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\u3002\nelapsed_time = 11.157917446009389 sec\n\nfor\u6587\u3092map\u306b\u5909\u3048\u3066\u3082\u5b9f\u884c\u6642\u9593\u306f\u305f\u3044\u3057\u3066\u5909\u308f\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\nmultiprocessing\nmap\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308c\u3070\u3001multiprocessing\u3092\u5c0e\u5165\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\u3002\nimport functools\nimport multiprocessing as mp\n\ndef Optimize(ohlc, Prange):\n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 4])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    pool = mp.Pool() #\u30d7\u30ed\u30bb\u30b9\u30d7\u30fc\u30eb\u306e\u4f5c\u6210\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        #for k in range(M): Eval[k] = evaluate(k,Param)\n        Eval = np.array(list(pool.map(functools.partial(evaluate, Param=Param), np.arange(M))))\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n\nPool\u30af\u30e9\u30b9\u3067\u30d7\u30ed\u30bb\u30b9\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u5148\u307b\u3069\u306emap\u306e\u90e8\u5206\u3092pool.map\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002Pool\u306e\u5f15\u6570\u3067\u30d7\u30ed\u30bb\u30b9\u306e\u500b\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5f15\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u3001CPU\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3059\u3079\u3066\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u7c21\u5358\u306a\u51e6\u7406\u3060\u3051\u306a\u3089\u30b9\u30ec\u30c3\u30c9\u3092\u3059\u3079\u3066\u4f7f\u3063\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4ed6\u306b\u3082\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u56de\u306f\u534a\u5206\u5f37\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u304c\u6700\u3082\u9ad8\u901f\u5316\u3067\u304d\u307e\u3057\u305f\u3002\nCorei7\u306e8\u30b9\u30ec\u30c3\u30c9\u3060\u3063\u305f\u306e\u3067\u3001Pool(5)\u306b\u3057\u3066\u8d70\u3089\u305b\u305f\u7d50\u679c\u304c\nelapsed_time = 5.766524394366197 sec\n\n\u3067\u3059\u3002\u3060\u3044\u305f\u3044\uff12\u500d\u304f\u3089\u3044\u306e\u901f\u3055\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3082\u3046\u5c11\u3057\u901f\u304f\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u500b\u4f53\u306e\u7e70\u308a\u8fd4\u3057\u4ee5\u5916\u306b\u3082\u907a\u4f1d\u7684\u51e6\u7406\u304c\u3042\u3063\u305f\u308a\u3057\u305f\u305f\u3081\u3067\u3057\u3087\u3046\u3002\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306b\u3082\u3063\u3068\u6642\u9593\u306e\u304b\u304b\u308b\u30b7\u30b9\u30c6\u30e0\u306a\u3089\u3001\u3082\u3046\u5c11\u3057\u4e26\u5217\u5316\u306e\u52b9\u679c\u304c\u4e0a\u304c\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n# \u306f\u3058\u3081\u306b\nPython\u3001\u4e26\u5217\u51e6\u7406\u3067\u30b0\u30b0\u308b\u3068\u3001multiprocessing\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n[[Python]FX\u30b7\u30b9\u30c8\u30ec\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u3092\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3084\u3063\u3066\u307f\u308b](http://qiita.com/toyolab/items/569c263d58b69b1a6b42)\n\n\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u305f\u304f\u3055\u3093\u306e\u500b\u4f53\u3092\u8a55\u4fa1\u3057\u3066\u305d\u306e\u9069\u5fdc\u5ea6\u306b\u3088\u308a\u9078\u629e\u3001\u4ea4\u53c9\u306a\u3069\u306e\u907a\u4f1d\u7684\u51e6\u7406\u3092\u884c\u3046\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u500b\u4f53\u306e\u8a55\u4fa1\u306f\u5b8c\u5168\u306b\u72ec\u7acb\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4e26\u5217\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u3082\u305d\u306e\u500b\u4f53\u8a55\u4fa1\u306e\u90e8\u5206\u306b\u4e26\u5217\u51e6\u7406\u3092\u9069\u5fdc\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n# \u3082\u3068\u306e\u30b3\u30fc\u30c9\n\n\u4e26\u5217\u5316\u3055\u305b\u308b\u524d\u306e\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\u4e0a\u306e\u8a18\u4e8b\u306e\u30b7\u30b9\u30c8\u30ec\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u306b\u4f7f\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u6c4e\u7528\u7684\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u524d\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\n````py\ndef Optimize(ohlc, Prange):\n    def shift(x, n=1): return np.concatenate((np.zeros(n), x[:-n])) #\u30b7\u30d5\u30c8\u95a2\u6570\n\n    SlowMA = np.empty([len(Prange[0]), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[0])):\n        SlowMA[i] = ind.iMA(ohlc, Prange[0][i])\n\n    FastMA = np.empty([len(Prange[1]), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[1])):\n        FastMA[i] = ind.iMA(ohlc, Prange[1][i])\n    \n    ExitMA = np.empty([len(Prange[2]), len(ohlc)]) #\u6c7a\u6e08\u7528\u79fb\u52d5\u5e73\u5747\n    for i in range(len(Prange[2])):\n        ExitMA[i] = ind.iMA(ohlc, Prange[2][i])\n    \n    Close = ohlc['Close'].values #\u7d42\u5024\n    \n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 6])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        for k in range(M):\n            i0 = Param[k,0]\n            i1 = Param[k,1]\n            i2 = Param[k,2]\n            #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            BuyEntry = (FastMA[i1] > SlowMA[i0]) & (shift(FastMA[i1]) <= shift(SlowMA[i0]))\n            #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n            SellEntry = (FastMA[i1] < SlowMA[i0]) & (shift(FastMA[i1]) >= shift(SlowMA[i0]))\n            #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            BuyExit = (Close < ExitMA[i2]) & (shift(Close) >= shift(ExitMA[i2]))\n            #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n            SellExit = (Close > ExitMA[i2]) & (shift(Close) <= shift(ExitMA[i2]))\n            #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n            Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n            Eval[k] = BacktestReport(Trade, PL)\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n````\n\n\u3053\u306e\u307e\u307e\u5b9f\u884c\u3055\u305b\u3066\u5b9f\u884c\u6642\u9593\u3092\u6e2c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n````py\nimport time\n\nstart = time.perf_counter()\nresult = Optimize(ohlc, [SlowMAperiod, FastMAperiod, ExitMAperiod])\nprint(\"elapsed_time = {0} sec\".format(time.perf_counter()-start))\n````\n    elapsed_time = 11.180512751173708 sec\n\n# map\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\n\n\u3082\u3068\u306e\u30b3\u30fc\u30c9\u306e\u306a\u304b\u3067\u3001\u4e26\u5217\u5316\u3055\u305b\u308b\u306e\u306f\u3001`for`\u6587\u306e\u9593\u3067\u3059\u3002\u5404\u500b\u4f53\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u3092\u884c\u3044\u3001\u8a55\u4fa1\u3092\u884c\u3046\u90e8\u5206\u3067\u3001\u305d\u3053\u305d\u3053\u6642\u9593\u306e\u304b\u304b\u308b\u3068\u3053\u308d\u3067\u3059\u3002multiprocessing\u3092\u4f7f\u3046\u5834\u5408\u3001`map`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u306a\u305d\u3046\u306a\u306e\u3067\u3001\u307e\u305a\u306f\u3001`for`\u6587\u3092`map`\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u3001\u7e70\u308a\u8fd4\u3059\u90e8\u5206\u3092\u95a2\u6570\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u3061\u3087\u3063\u3068\u6ce8\u610f\u3059\u308b\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060`map`\u95a2\u6570\u306b\u3059\u308b\u3060\u3051\u306a\u3089\u3001`Optimize`\u95a2\u6570\u306e\u306a\u304b\u3067\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u306e\u3067\u3059\u304c\u3001multiprocessing\u3092\u4f7f\u3046\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001`Optimize`\u95a2\u6570\u306e\u5916\u5074\u3067`evaluate`\u3068\u3044\u3046\u540d\u524d\u3067\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u305f\u3002\n\n`map`\u306b\u6e21\u3059\u90fd\u5408\u4e0a\u3001`evaluate`\u95a2\u6570\u306e\u5f15\u6570\u306f`k`\u3060\u3051\u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u305d\u3053\u3067\u3001`SlowMA`\u3001`FastMA`\u306a\u3069\u306e\u30c6\u30af\u30cb\u30ab\u30eb\u6307\u6a19\u306e\u5909\u6570\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u3001`Param`\u306f\u95a2\u6570\u306e\u5f15\u6570\u306b\u3057\u307e\u3057\u305f\u3002\n\n````py\nSlowMA = np.empty([len(SlowMAperiod), len(ohlc)]) #\u9577\u671f\u79fb\u52d5\u5e73\u5747\nfor i in range(len(SlowMAperiod)):\n    SlowMA[i] = ind.iMA(ohlc, SlowMAperiod[i])\n\nFastMA = np.empty([len(FastMAperiod), len(ohlc)]) #\u77ed\u671f\u79fb\u52d5\u5e73\u5747\nfor i in range(len(FastMAperiod)):\n    FastMA[i] = ind.iMA(ohlc, FastMAperiod[i])\n\nExitMA = np.empty([len(ExitMAperiod), len(ohlc)]) #\u6c7a\u6e08\u7528\u79fb\u52d5\u5e73\u5747\nfor i in range(len(ExitMAperiod)):\n    ExitMA[i] = ind.iMA(ohlc, ExitMAperiod[i])\n\nClose = ohlc['Close'].values #\u7d42\u5024\n\n#\u30b7\u30d5\u30c8\u95a2\u6570\ndef shift(x, n=1):\n    return np.concatenate((np.zeros(n), x[:-n]))\n\n#\u4e26\u5217\u51e6\u7406\u3055\u305b\u308b\u95a2\u6570\ndef evaluate(k,Param):\n    i0 = Param[k,0]\n    i1 = Param[k,1]\n    i2 = Param[k,2]\n    #\u8cb7\u3044\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n    BuyEntry = (FastMA[i1] > SlowMA[i0]) & (shift(FastMA[i1]) <= shift(SlowMA[i0]))\n    #\u58f2\u308a\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30b0\u30ca\u30eb\n    SellEntry = (FastMA[i1] < SlowMA[i0]) & (shift(FastMA[i1]) >= shift(SlowMA[i0]))\n    #\u8cb7\u3044\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n    BuyExit = (Close < ExitMA[i2]) & (shift(Close) >= shift(ExitMA[i2]))\n    #\u58f2\u308a\u30a8\u30b0\u30b8\u30c3\u30c8\u30b7\u30b0\u30ca\u30eb\n    SellExit = (Close > ExitMA[i2]) & (shift(Close) <= shift(ExitMA[i2]))\n    #\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\n    Trade, PL = Backtest(ohlc, BuyEntry, SellEntry, BuyExit, SellExit) \n    return BacktestReport(Trade, PL)\n````\n`for`\u6587\u306e\u4ee3\u308f\u308a\u306b`map`\u95a2\u6570\u3067\u7f6e\u304d\u63db\u3048\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n````py\nimport functools\n\ndef Optimize(ohlc, Prange):\n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 4])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        #for k in range(M): Eval[k] = evaluate(k,Param)\n        Eval = np.array(list(map(functools.partial(evaluate, Param=Param), np.arange(M))))\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n````\n\u5b9f\u969b\u306b\u306f`map`\u3060\u3051\u3067\u7c21\u5358\u306b\u306f\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002`map`\u95a2\u6570\u306e\u6700\u521d\u306e\u5f15\u6570\u306b\u3001\u7e70\u308a\u8fd4\u3059\u95a2\u6570`evaluate`\u3092\u5165\u308c\u308b\u306e\u3067\u3059\u304c\u3001`evaluate`\u95a2\u6570\u306e\u5f15\u6570\u304c\u4e8c\u3064\u3042\u308b\u306e\u3067\u3001\u4e8c\u3064\u76ee\u306e\u5f15\u6570`Param`\u306f`Param`\u306b\u56fa\u5b9a\u3059\u308b\u3088\u3046`functools.partial`\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f`map`\u306e\u623b\u308a\u5024\u306fNumPy\u306earray\u306b\u5909\u63db\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u524d\u306blist\u306b\u5909\u63db\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\uff08Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305d\u3046\u3067\u3059\u3002\u4eca\u56de\u8a66\u3057\u305f\u306e\u306f\u3001Python 3.5.1\u3067\u3059\u3002\uff09\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n    elapsed_time = 11.157917446009389 sec\n\n`for`\u6587\u3092`map`\u306b\u5909\u3048\u3066\u3082\u5b9f\u884c\u6642\u9593\u306f\u305f\u3044\u3057\u3066\u5909\u308f\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n# multiprocessing\n\n`map`\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308c\u3070\u3001multiprocessing\u3092\u5c0e\u5165\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\u3002\n\n````py\nimport functools\nimport multiprocessing as mp\n\ndef Optimize(ohlc, Prange):\n    M = 20 #\u500b\u4f53\u6570\n    Eval = np.zeros([M, 4])  #\u8a55\u4fa1\u9805\u76ee\n    Param = InitParam(Prange, M) #\u30d1\u30e9\u30e1\u30fc\u30bf\u521d\u671f\u5316\n    pool = mp.Pool() #\u30d7\u30ed\u30bb\u30b9\u30d7\u30fc\u30eb\u306e\u4f5c\u6210\n    gens = 0 #\u4e16\u4ee3\u6570\n    while gens < 100:\n        #for k in range(M): Eval[k] = evaluate(k,Param)\n        Eval = np.array(list(pool.map(functools.partial(evaluate, Param=Param), np.arange(M))))\n        # \u4e16\u4ee3\u306e\u4ea4\u4ee3\n        Param = Evolution(Param, Eval[:,0], Prange)\n        gens += 1\n        #print(gens, Eval[0,0])\n    Slow = Prange[0][Param[:,0]]\n    Fast = Prange[1][Param[:,1]]\n    Exit = Prange[2][Param[:,2]]\n    return pd.DataFrame({'Slow':Slow, 'Fast':Fast, 'Exit':Exit, 'Profit': Eval[:,0], 'Trades':Eval[:,1],\n                         'Average':Eval[:,2],'PF':Eval[:,3], 'MDD':Eval[:,4], 'RF':Eval[:,5]},\n                         columns=['Slow','Fast','Exit','Profit','Trades','Average','PF','MDD','RF'])\n````\n\n`Pool`\u30af\u30e9\u30b9\u3067\u30d7\u30ed\u30bb\u30b9\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u5148\u307b\u3069\u306e`map`\u306e\u90e8\u5206\u3092`pool.map`\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002`Pool`\u306e\u5f15\u6570\u3067\u30d7\u30ed\u30bb\u30b9\u306e\u500b\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5f15\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u3001CPU\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3059\u3079\u3066\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7c21\u5358\u306a\u51e6\u7406\u3060\u3051\u306a\u3089\u30b9\u30ec\u30c3\u30c9\u3092\u3059\u3079\u3066\u4f7f\u3063\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4ed6\u306b\u3082\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u56de\u306f\u534a\u5206\u5f37\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u304c\u6700\u3082\u9ad8\u901f\u5316\u3067\u304d\u307e\u3057\u305f\u3002\n\nCorei7\u306e8\u30b9\u30ec\u30c3\u30c9\u3060\u3063\u305f\u306e\u3067\u3001`Pool(5)`\u306b\u3057\u3066\u8d70\u3089\u305b\u305f\u7d50\u679c\u304c\n\n    elapsed_time = 5.766524394366197 sec\n\n\u3067\u3059\u3002\u3060\u3044\u305f\u3044\uff12\u500d\u304f\u3089\u3044\u306e\u901f\u3055\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3082\u3046\u5c11\u3057\u901f\u304f\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u500b\u4f53\u306e\u7e70\u308a\u8fd4\u3057\u4ee5\u5916\u306b\u3082\u907a\u4f1d\u7684\u51e6\u7406\u304c\u3042\u3063\u305f\u308a\u3057\u305f\u305f\u3081\u3067\u3057\u3087\u3046\u3002\u30d0\u30c3\u30af\u30c6\u30b9\u30c8\u306b\u3082\u3063\u3068\u6642\u9593\u306e\u304b\u304b\u308b\u30b7\u30b9\u30c6\u30e0\u306a\u3089\u3001\u3082\u3046\u5c11\u3057\u4e26\u5217\u5316\u306e\u52b9\u679c\u304c\u4e0a\u304c\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["Python", "multiprocessing", "\u907a\u4f1d\u7684\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u30b7\u30b9\u30c8\u30ec", "\u6700\u9069\u5316"]}