{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u3067\u306fNode.js\u3092\u7528\u3044\u3066SQLSERVER\u3092\u64cd\u4f5c\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3059\u308b\n\nnode-mssql\nnode-mssql \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001Windows\u4ee5\u5916\u306eOS\u304b\u3089SQLSERVER\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3002\nhttps://github.com/patriksimek/node-mssql\n\u4ee5\u4e0b\u306enode-sqlserver\u3067\u3082SQLSERVER\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u3060\u304c\u3001Windows\u3067\u306a\u3044\u3068\u52d5\u4f5c\u3057\u306a\u3044\u3002\nhttps://github.com/Azure/node-sqlserver\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\nnpm install mssql\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\n\u63a5\u7d9a\u65b9\u6cd5\n\u3082\u3063\u3068\u3082\u5358\u7d14\u306a\u63a5\u7d9a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306b\u793a\u3059\u3002\nmssql.connect\u3067\u63a5\u7d9a\u3057\u3066\u3001\u4e0d\u8981\u306b\u306a\u3063\u305f\u3089close\u3092\u884c\u3046\nvar mssql = require('mssql');\nvar config = {\n  user: 'sa',\n  password: 'XXXX',\n  server: '\u30db\u30b9\u30c8\u540d\\\\SQLEXPRESS', // You can use 'localhost\\\\instance' to connect to named instance\n  database: 'Sample001',\n  stream: true, // You can enable streaming globally\n\n  options: {\n    encrypt: true // Use this if you're on Windows Azure\n  }\n}\nmssql.connect(config, function(err) {\n  console.log(err);\n  mssql.close();\n});\n\n\nSQL\u306e\u767a\u884c\u65b9\u6cd5\nconnect\u304c\u5b8c\u4e86\u3057\u305f\u3089Request\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u767a\u884c\u3059\u308b\nSQLSERVER\u306e\u5834\u5408\u3001\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001recordset\u30a4\u30d9\u30f3\u30c8\u3067\u305d\u308c\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u3002\n    var request = new mssql.Request(); // or: var request = connection.request();\n    request.query('select * from T01Prefecture');\n    request.on('recordset', function(columns) {\n       // \u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u305f\u3073\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n       console.log(columns);\n    });\n    request.on('row', function(row) {\n       // \u884c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3073\u306b\u547c\u3070\u308c\u308b\n       console.log(row);\n    });\n\n    request.on('error', function(err) {\n       // \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u305f\u3073\u306b\u3088\u3070\u308c\u308b\n       console.log(err);\n    });\n\n    request.on('done', function(returnValue) {\n        // \u5e38\u6642\u6700\u5f8c\u306b\u3088\u3070\u308c\u308b\n        console.log(returnValue);\n    })\n\n\nPreparedStatement\nPreparedStatement \u3092\u4f7f\u7528\u3059\u308b\u306b\u306finput\u30e1\u30bd\u30c3\u30c9\u3067\u30ad\u30fc\u306b\u306a\u308b\u6587\u5b57\u5217\u3068\u5024\u3092\u95a2\u9023\u4ed8\u3051\u308b\u3002\nVARCHAR\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001mssql.NVarChar\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u6587\u5b57\u5316\u3051\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n  var request = new mssql.Request();\n  request.input('id', mssql.Int, 102);\n  request.input('name', mssql.NVarChar, '\u30ed\u30fc\u30eb'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  request.query('INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name)');\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\nmssql.Transaction()\u3092\u7528\u3044\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u308b\u3002\nRequest\u6642\u306b\u305d\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5f15\u6570\u3068\u3059\u308b\u3002\n\u30af\u30a8\u30ea\u30fc\u5b9f\u884c\u5f8c\u3001commit\u307e\u305f\u306frollback\u3092\u884c\u3048\u3070\u3088\u3044\u3002\n    var tran = new mssql.Transaction();\n    tran.begin(function(err) {\n    var request = new mssql.Request(tran); // or: var request = connection.request();\n      request.query('select * from T01Prefecture');\n      request.on('done', function(returnValue) {\n          // \u5e38\u6642\u6700\u5f8c\u306b\u3088\u3070\u308c\u308b\n          console.log(returnValue);\n          tran.commit(function(err, ret) { // or rollback\n             // TODO\n             console.log('Commit');\n          });\n      })\n    });\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nPython\u3067\u8272\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u3068\u540c\u69d8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\nvar mssql = require('mssql');\nvar async = require('async');\nvar util = require('util');\n\nvar config = {\n  user: 'sa',\n  password: 'sa',\n  server: 'hostname\\\\SQLEXPRESS', // You can use 'localhost\\\\instance' to connect to named instance\n  database: 'Sample001',\n  stream: true, // You can enable streaming globally\n\n  options: {\n    encrypt: true // Use this if you're on Windows Azure\n  }\n}\nvar tasks = [];\n\n// \u63a5\u7d9a\ntasks.push(function(next) {\n  mssql.connect(config, function(err) {\n    next(err);\n  });\n});\n\n// TEST\u30c7\u30fc\u30bf\u524a\u9664\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 100);\n  requestSql(request, 'DELETE FROM T01Prefecture WHERE PREF_CD >= @from', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// PREPARESTATEMENT\u3092\u7528\u3044\u305fSELECT\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n////////////////////////////////////////\n// \u30b3\u30df\u30c3\u30c8\u306e\u8a66\u9a13\n////////////////////////////////////////\n// \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u958b\u59cb\ntasks.push(function(next) {\n  var transaction = new mssql.Transaction();\n  transaction.begin(function(err) {\n    next(err, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 100);\n  request.input('name', mssql.NVarChar, '\u30e2\u30c6\u30e2\u30c6\u56fd'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 101);\n  request.input('name', mssql.NVarChar, '\u91ce\u671b\u306e\u56fd'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30b3\u30df\u30c3\u30c8\u524d---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  transaction.commit(function(err, ret) {\n     next(err);\n  });\n});\n\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30b3\u30df\u30c3\u30c8\u5f8c---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n////////////////////////////////////////\n// \u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u8a66\u9a13\n////////////////////////////////////////\ntasks.push(function(next) {\n  var transaction = new mssql.Transaction();\n  transaction.begin(function(err) {\n    next(err, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 102);\n  request.input('name', mssql.NVarChar, '\u30ed\u30fc\u30eb'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u524d---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  transaction.rollback(function(err, ret) {\n     next(err);\n  });\n});\n\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u5f8c---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// \u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13\ntasks.push(function(next) {\n  console.log('\u5358\u4e00\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13');\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 1);\n  request.input('to', mssql.Int, 10);\n  requestSql(request, 'exec test_sp @from , @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// \u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13\ntasks.push(function(next) {\n  console.log('\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13');\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 1);\n  request.input('to', mssql.Int, 10);\n  requestSql(request, 'exec test_sp2 @from , @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n\nasync.waterfall(tasks, function(err) {\n  if(err) {\n    console.log(err);\n    process.exit();\n  }\n  mssql.close();\n});\n\nfunction requestSql(request, sql, callback) \n{\n  var errors = [];\n  var result = [];\n  var records = [];\n  request.query(sql);\n  request.on('recordset', function(columns) {\n    // Emitted once for each recordset in a query\n    //console.log(columns);\n    var rec = {\n      columns:columns,\n      records: []\n    };\n    result.push(rec);\n  });\n\n  request.on('row', function(row) {\n    // Emitted for each row in a recordset\n    result[result.length - 1].records.push(row);\n  });\n\n  request.on('error', function(err) {\n    // May be emitted multiple times\n    errors.push(err);\n  });\n\n  request.on('done', function(returnValue) {\n    console.log(returnValue);\n    // Always emitted as the last one\n    if (errors.length == 0) {\n      callback(null, result);\n    } else {\n      callback(errors, result);\n    }\n  });\n}\n\n\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fNode.js\u3092\u7528\u3044\u3066SQLSERVER\u3092\u64cd\u4f5c\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3059\u308b\n\n#node-mssql\nnode-mssql \u3092\u4f7f\u7528\u3059\u308c\u3070\u3001Windows\u4ee5\u5916\u306eOS\u304b\u3089SQLSERVER\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3002\nhttps://github.com/patriksimek/node-mssql\n\n\u4ee5\u4e0b\u306enode-sqlserver\u3067\u3082SQLSERVER\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u3060\u304c\u3001Windows\u3067\u306a\u3044\u3068\u52d5\u4f5c\u3057\u306a\u3044\u3002\nhttps://github.com/Azure/node-sqlserver\n\n##\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n```\nnpm install mssql\n```\n\n##\u4f7f\u7528\u65b9\u6cd5\n### \u63a5\u7d9a\u65b9\u6cd5\n\u3082\u3063\u3068\u3082\u5358\u7d14\u306a\u63a5\u7d9a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306b\u793a\u3059\u3002\nmssql.connect\u3067\u63a5\u7d9a\u3057\u3066\u3001\u4e0d\u8981\u306b\u306a\u3063\u305f\u3089close\u3092\u884c\u3046\n\n```js\nvar mssql = require('mssql');\nvar config = {\n  user: 'sa',\n  password: 'XXXX',\n  server: '\u30db\u30b9\u30c8\u540d\\\\SQLEXPRESS', // You can use 'localhost\\\\instance' to connect to named instance\n  database: 'Sample001',\n  stream: true, // You can enable streaming globally\n\n  options: {\n    encrypt: true // Use this if you're on Windows Azure\n  }\n}\nmssql.connect(config, function(err) {\n  console.log(err);\n  mssql.close();\n});\n```\n\n###SQL\u306e\u767a\u884c\u65b9\u6cd5\nconnect\u304c\u5b8c\u4e86\u3057\u305f\u3089Request\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u767a\u884c\u3059\u308b\nSQLSERVER\u306e\u5834\u5408\u3001\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001recordset\u30a4\u30d9\u30f3\u30c8\u3067\u305d\u308c\u3092\u691c\u77e5\u3059\u308b\u3053\u3068\u3002\n\n```js\n    var request = new mssql.Request(); // or: var request = connection.request();\n    request.query('select * from T01Prefecture');\n    request.on('recordset', function(columns) {\n       // \u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u305f\u3073\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n       console.log(columns);\n    });\n    request.on('row', function(row) {\n       // \u884c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3073\u306b\u547c\u3070\u308c\u308b\n       console.log(row);\n    });\n\n    request.on('error', function(err) {\n       // \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u305f\u3073\u306b\u3088\u3070\u308c\u308b\n       console.log(err);\n    });\n   \n    request.on('done', function(returnValue) {\n        // \u5e38\u6642\u6700\u5f8c\u306b\u3088\u3070\u308c\u308b\n        console.log(returnValue);\n    })\n```\n\n### PreparedStatement \nPreparedStatement \u3092\u4f7f\u7528\u3059\u308b\u306b\u306finput\u30e1\u30bd\u30c3\u30c9\u3067\u30ad\u30fc\u306b\u306a\u308b\u6587\u5b57\u5217\u3068\u5024\u3092\u95a2\u9023\u4ed8\u3051\u308b\u3002\nVARCHAR\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001mssql.NVarChar\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u6587\u5b57\u5316\u3051\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n```js\n  var request = new mssql.Request();\n  request.input('id', mssql.Int, 102);\n  request.input('name', mssql.NVarChar, '\u30ed\u30fc\u30eb'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  request.query('INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name)');\n```\n\n### \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\nmssql.Transaction()\u3092\u7528\u3044\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3067\u304d\u308b\u3002\nRequest\u6642\u306b\u305d\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5f15\u6570\u3068\u3059\u308b\u3002\n\u30af\u30a8\u30ea\u30fc\u5b9f\u884c\u5f8c\u3001commit\u307e\u305f\u306frollback\u3092\u884c\u3048\u3070\u3088\u3044\u3002\n\n```js\n    var tran = new mssql.Transaction();\n    tran.begin(function(err) {\n    var request = new mssql.Request(tran); // or: var request = connection.request();\n      request.query('select * from T01Prefecture');\n      request.on('done', function(returnValue) {\n          // \u5e38\u6642\u6700\u5f8c\u306b\u3088\u3070\u308c\u308b\n          console.log(returnValue);\n          tran.commit(function(err, ret) { // or rollback\n             // TODO\n             console.log('Commit');\n          });\n      })\n    });\n\n```\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n[Python\u3067\u8272\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b](http://qiita.com/mima_ita/items/9a5ab3b45c7575776b06 \"Python\u3067\u8272\u3005\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\")\u3068\u540c\u69d8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\n\n\n```js\nvar mssql = require('mssql');\nvar async = require('async');\nvar util = require('util');\n\nvar config = {\n  user: 'sa',\n  password: 'sa',\n  server: 'hostname\\\\SQLEXPRESS', // You can use 'localhost\\\\instance' to connect to named instance\n  database: 'Sample001',\n  stream: true, // You can enable streaming globally\n\n  options: {\n    encrypt: true // Use this if you're on Windows Azure\n  }\n}\nvar tasks = [];\n\n// \u63a5\u7d9a\ntasks.push(function(next) {\n  mssql.connect(config, function(err) {\n    next(err);\n  });\n});\n\n// TEST\u30c7\u30fc\u30bf\u524a\u9664\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 100);\n  requestSql(request, 'DELETE FROM T01Prefecture WHERE PREF_CD >= @from', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// PREPARESTATEMENT\u3092\u7528\u3044\u305fSELECT\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n////////////////////////////////////////\n// \u30b3\u30df\u30c3\u30c8\u306e\u8a66\u9a13\n////////////////////////////////////////\n// \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u958b\u59cb\ntasks.push(function(next) {\n  var transaction = new mssql.Transaction();\n  transaction.begin(function(err) {\n    next(err, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 100);\n  request.input('name', mssql.NVarChar, '\u30e2\u30c6\u30e2\u30c6\u56fd'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 101);\n  request.input('name', mssql.NVarChar, '\u91ce\u671b\u306e\u56fd'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30b3\u30df\u30c3\u30c8\u524d---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  transaction.commit(function(err, ret) {\n     next(err);\n  });\n});\n\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30b3\u30df\u30c3\u30c8\u5f8c---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n////////////////////////////////////////\n// \u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u8a66\u9a13\n////////////////////////////////////////\ntasks.push(function(next) {\n  var transaction = new mssql.Transaction();\n  transaction.begin(function(err) {\n    next(err, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('id', mssql.Int, 102);\n  request.input('name', mssql.NVarChar, '\u30ed\u30fc\u30eb'); // VARCHAR\u3060\u308d\u3046\u304cNVarChar\u306b\u3057\u3068\u304b\u306a\u3044\u3068\u5316\u3051\u308b\n  requestSql(request, 'INSERT INTO t01prefecture(PREF_CD,PREF_NAME) VALUES(@id,  @name) ', function(errors, ret) {\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  var request = new mssql.Request(transaction);\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u524d---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors, transaction);\n  });\n});\n\ntasks.push(function(transaction, next) {\n  transaction.rollback(function(err, ret) {\n     next(err);\n  });\n});\n\ntasks.push(function(next) {\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 45);\n  request.input('to', mssql.Int, 999);\n  requestSql(request, 'SELECT * FROM T01Prefecture WHERE PREF_CD BETWEEN @from AND @to', function(errors, ret) {\n    console.log('\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u5f8c---------------');\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// \u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13\ntasks.push(function(next) {\n  console.log('\u5358\u4e00\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13');\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 1);\n  request.input('to', mssql.Int, 10);\n  requestSql(request, 'exec test_sp @from , @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n// \u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13\ntasks.push(function(next) {\n  console.log('\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u8fd4\u3059\u30b9\u30c8\u30a2\u30c9\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306e\u8a66\u9a13');\n  var request = new mssql.Request();\n  request.input('from', mssql.Int, 1);\n  request.input('to', mssql.Int, 10);\n  requestSql(request, 'exec test_sp2 @from , @to', function(errors, ret) {\n    console.log(util.inspect(ret,false,null));\n    next(errors);\n  });\n});\n\n\nasync.waterfall(tasks, function(err) {\n  if(err) {\n    console.log(err);\n    process.exit();\n  }\n  mssql.close();\n});\n\nfunction requestSql(request, sql, callback) \n{\n  var errors = [];\n  var result = [];\n  var records = [];\n  request.query(sql);\n  request.on('recordset', function(columns) {\n    // Emitted once for each recordset in a query\n    //console.log(columns);\n    var rec = {\n      columns:columns,\n      records: []\n    };\n    result.push(rec);\n  });\n\n  request.on('row', function(row) {\n    // Emitted for each row in a recordset\n    result[result.length - 1].records.push(row);\n  });\n\n  request.on('error', function(err) {\n    // May be emitted multiple times\n    errors.push(err);\n  });\n\n  request.on('done', function(returnValue) {\n    console.log(returnValue);\n    // Always emitted as the last one\n    if (errors.length == 0) {\n      callback(null, result);\n    } else {\n      callback(errors, result);\n    }\n  });\n}\n\n\n```\n", "tags": ["Node.js", "JavaScript", "SQLServer"]}