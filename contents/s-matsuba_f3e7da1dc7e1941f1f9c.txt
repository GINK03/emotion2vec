{"tags": ["C#", "\u6570\u5b66"], "context": "\n\n\u9ad8\u5ea6\u5408\u6210\u6570\u3068\u306f\nWiki\u3067\u306f\u3001\n\n\u81ea\u7136\u6570\u3067\u3001\u305d\u308c\u672a\u6e80\u306e\u3069\u306e\u81ea\u7136\u6570\u3088\u308a\u3082\u7d04\u6570\u306e\u500b\u6570\u304c\u591a\u3044\u3082\u306e\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u76f4\u611f\u7684\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3046\u3068\n\u5272\u308c\u308b\u6570\u304c\u591a\u3044\u5272\u306b\u5c0f\u3055\u3044\u6570\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3060\u308d\u3046\u304b\u3002\n12\uff0c24\uff0c36\u3068\u3044\u3063\u305f\u6570\u304c\u305d\u308c\u306b\u8a72\u5f53\u3059\u308b\u3002\n\u805e\u304d\u99b4\u67d3\u307f\u304c\u3042\u308b\u6570\u3060\u3068\u601d\u308f\u308c\u308b\u3002\n\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u30b5\u30a4\u30c8\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3067\u3001\n\u8a73\u3057\u304f\u306f\u305d\u3061\u3089\u3078(\u00b4\u2200\uff40)\n\n\u672c\u984c\n\u3068\u308a\u3042\u3048\u305a\u5b9a\u7fa9\u3069\u304a\u308a\u306b\u7d20\u76f4\u306b\u7d44\u3093\u3067\u307f\u305f\u306e\u3067\u3001\u3044\u3044\u611f\u3058\u306e\u52b9\u7387\u5316\u3092\u601d\u3044\u3064\u3051\u3070\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\nHighlyCompositeNumber.cs\n//EnumerableExtention.HighlyCompositeNumber(10000);\n//result:2,4,12,24,36,60,120,180,240,360,720,840,1260,1680,2520,5040,7560\npublic static IEnumerable<int> HighlyCompositeNumber(int limit)\n{\n    var maxDivisorCount = 0;\n    for (int i = 2; i < limit; i++)\n    {\n        var divisorCount = CountDivisor(i);\n        if (maxDivisorCount < divisorCount)\n        {\n            yield return i;\n            maxDivisorCount = divisorCount;\n        }\n    }\n}\n\nprivate static int CountDivisor(int value)\n{\n    if (value <= 1) { return 1; }\n    var divisors = new List<int>();\n    for (int i = 1; i < value; i++)\n    {\n        if (value % i != 0) { continue; }\n\n        var f = value / i;\n        if (divisors.Contains(f)) { break; }\n        divisors.Add(i);\n        if (i == f) { break; }\n    }\n    return divisors.Count;\n}\n\n\n#\u9ad8\u5ea6\u5408\u6210\u6570\u3068\u306f\nWiki\u3067\u306f\u3001\n\n>\u81ea\u7136\u6570\u3067\u3001\u305d\u308c\u672a\u6e80\u306e\u3069\u306e\u81ea\u7136\u6570\u3088\u308a\u3082\u7d04\u6570\u306e\u500b\u6570\u304c\u591a\u3044\u3082\u306e\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u76f4\u611f\u7684\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3046\u3068\n**\u5272\u308c\u308b\u6570\u304c\u591a\u3044\u5272\u306b\u5c0f\u3055\u3044\u6570**\n\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3060\u308d\u3046\u304b\u3002\n12\uff0c24\uff0c36\u3068\u3044\u3063\u305f\u6570\u304c\u305d\u308c\u306b\u8a72\u5f53\u3059\u308b\u3002\n\u805e\u304d\u99b4\u67d3\u307f\u304c\u3042\u308b\u6570\u3060\u3068\u601d\u308f\u308c\u308b\u3002\n\n\u308f\u304b\u308a\u3084\u3059\u304f\u89e3\u8aac\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u30b5\u30a4\u30c8\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3067\u3001\n\u8a73\u3057\u304f\u306f\u305d\u3061\u3089\u3078(\u00b4\u2200\uff40)\n\n#\u672c\u984c\n\u3068\u308a\u3042\u3048\u305a\u5b9a\u7fa9\u3069\u304a\u308a\u306b\u7d20\u76f4\u306b\u7d44\u3093\u3067\u307f\u305f\u306e\u3067\u3001\u3044\u3044\u611f\u3058\u306e\u52b9\u7387\u5316\u3092\u601d\u3044\u3064\u3051\u3070\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n```Csharp:HighlyCompositeNumber.cs\n//EnumerableExtention.HighlyCompositeNumber(10000);\n//result:2,4,12,24,36,60,120,180,240,360,720,840,1260,1680,2520,5040,7560\npublic static IEnumerable<int> HighlyCompositeNumber(int limit)\n{\n\tvar maxDivisorCount = 0;\n\tfor (int i = 2; i < limit; i++)\n\t{\n\t\tvar divisorCount = CountDivisor(i);\n\t\tif (maxDivisorCount < divisorCount)\n\t\t{\n\t\t\tyield return i;\n\t\t\tmaxDivisorCount = divisorCount;\n\t\t}\n\t}\n}\n\nprivate static int CountDivisor(int value)\n{\n\tif (value <= 1) { return 1; }\n\tvar divisors = new List<int>();\n\tfor (int i = 1; i < value; i++)\n\t{\n\t\tif (value % i != 0) { continue; }\n\n\t\tvar f = value / i;\n\t\tif (divisors.Contains(f)) { break; }\n\t\tdivisors.Add(i);\n\t\tif (i == f) { break; }\n\t}\n\treturn divisors.Count;\n}\n```\n"}