{"tags": ["Python", "\u6700\u9069\u5316", "\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6570\u5b66"], "context": "\n\n\u3053\u308c\u306a\u306b\n12/2 \u306b\u884c\u308f\u308c\u305f\u6700\u9069\u5316\u306e\u30bb\u30df\u30ca\u30fc Gurobi Optimizer\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30bb\u30df\u30ca\u30fc2016 \u3067\u3001\u5b66\u6821\u306e\u5b66\u533a\u6c7a\u3081\u3092\u591a\u54c1\u7a2e\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u3068\u3057\u3066\u89e3\u3051\u308b\u3053\u3068\u3092\u805e\u3044\u305f\u306e\u3067\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\u770c\u5225\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30eajapanmap\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u672c\u5dde\u306e34\u90fd\u5e9c\u770c\u3092\u5bfe\u8c61\u306b\u3057\u30011\u770c\u306b1\u4eba\u5b66\u751f\u304c\u3044\u308b\u3068\u3057\u307e\u3059\u3002\n\u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u306b\u5b66\u6821\u304c\u3042\u308a\u3001\u5b9a\u54e1\u306f\u305d\u308c\u305e\u308c 7\u300121\u30016\u4eba\u3068\u3057\u307e\u3059\u3002\n\u96a3\u63a5\u770c\u3078\u306e\u79fb\u52d5\u6642\u9593\u306f\u30011\u3068\u3057\u307e\u3059\u3002\n\u5404\u5b66\u751f\u304c3\u3064\u306e\u5b66\u6821\u306e\u3044\u305a\u308c\u304b\u306b\u901a\u3046\u3053\u3068\u3068\u3057\u3001\u5168\u5b66\u751f\u306e\u7dcf\u79fb\u52d5\u6642\u9593\u3092\u6700\u5c0f\u5316\u3059\u308b\u5b66\u533a\u306e\u5272\u5f53\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\n\u8003\u3048\u65b9\n\n34\u90fd\u5e9c\u770c\u306e\u9700\u8981\u70b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u306e\u9700\u8981\u3092\u305d\u308c\u305e\u308c(\u81ea\u5206\u3092\u9664\u3044\u305f)6\u300120\u30015\u3001\u305d\u306e\u4ed6\u306f-1\u3068\u3057\u307e\u3059\u3002\n\u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u3092\u4ee3\u8868\u3068\u3059\u308b3\u3064\u306e\u65e5\u672c(\u7dd1\u65e5\u672c\u3001\u9752\u65e5\u672c\u3001\u8d64\u65e5\u672c)\u3092\u8003\u3048\u3001\u3053\u306e\u5404\u65e5\u672c\u306e\u4e2d\u3067\u96a3\u63a5\u3055\u305b\u307e\u3059\u3002(\u591a\u54c1\u7a2e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af)\n\u4ee3\u8868\u70b9\u4ee5\u5916\u306e\u9700\u8981\u70b9\u304b\u30893\u3064\u306e\u65e5\u672c\u306e\u540c\u3058\u770c\u306b\u30ea\u30f3\u30af\u3092\u306f\u308a\u307e\u3059\u3002\n\u4ee3\u8868\u70b9\u306e\u9700\u8981\u70b9\u3078\u3001\u305d\u306e\u4ee3\u8868\u70b9\u3092\u4ee3\u8868\u3068\u3059\u308b\u5404\u65e5\u672c\u306e\u540c\u3058\u770c\u304b\u3089\u30ea\u30f3\u30af\u3092\u306f\u308a\u307e\u3059\u3002\n\n\n\u3053\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u3067\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u3092\u89e3\u304d\u307e\u3059\u3002\n\nPython \u3067\u3084\u3063\u3066\u307f\u308b\n\npython3\nimport numpy as np, networkx as nx\nfrom japanmap import adjacent, pref_code, pref_map\n\u672c\u5dde = np.arange(2,36)\n\u4ee3\u8868\u70b9 = {pref_code('\u9752\u68ee'):7, pref_code('\u5c71\u68a8'):21, pref_code('\u5c71\u53e3'):6}\n# \u30b0\u30e9\u30d5\u4f5c\u6210\ng = nx.DiGraph()\ng.add_nodes_from(\u672c\u5dde, demand=-1)\nfor i, d in \u4ee3\u8868\u70b9.items():\n    nwl = i*100\n    g.node[i]['demand'] = d-1\n    g.add_nodes_from(nwl+\u672c\u5dde, demand=0)\n    g.add_edge(nwl+i,i)\n    g.add_edges_from((j,nwl+j) for j in \u672c\u5dde if j not in \u4ee3\u8868\u70b9)\n    g.add_edges_from(((nwl+j,nwl+k) for j in \u672c\u5dde for k in adjacent(j)), weight=1)\nr = nx.min_cost_flow(g)\n# \u7d50\u679c\u8868\u793a\ndc = dict(zip(\u4ee3\u8868\u70b9,['red','green','blue']))\ndc.update({i:dc[j//100]for i, t in r.items() for j, v in t.items() if v and i < 100})\npref_map(\u672c\u5dde,cols=list(dc.values()), width=4)\n\n\n\n\u601d\u3063\u305f\u901a\u308a\u306b\u89e3\u3051\u307e\u3057\u305f\u3002\n\n\u767a\u5c55\n\u73fe\u5b9f\u306b\u306f\u3001\u3044\u308d\u3044\u308d\u306a\u8981\u7d20\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u306a\u308b\u3079\u304f\u524d\u3068\u540c\u3058\u5b66\u533a\u304c\u671b\u307e\u3057\u3044\u3002\n\u7279\u5b9a\u306e\u3068\u3053\u308d\u3067\u5fc5\u305a\u308f\u3051\u305f\u3044\u3002\n\u30db\u30c3\u30d7\u6570\u3067\u306f\u306a\u304f\u8ddd\u96e2\u306b\u3059\u308b\u3002\n\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u6570\u306f\u3074\u3063\u305f\u308a\u3067\u306a\u3044\u3002\n\n\u5b9a\u5f0f\u5316\u3092\u76f4\u305b\u3070\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u4ee5\u4e0a\n# \u3053\u308c\u306a\u306b\n12/2 \u306b\u884c\u308f\u308c\u305f[\u6700\u9069\u5316](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u306e\u30bb\u30df\u30ca\u30fc [Gurobi Optimizer\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30bb\u30df\u30ca\u30fc2016](https://www.octobersky.jp/event/20161021.html) \u3067\u3001\u5b66\u6821\u306e\u5b66\u533a\u6c7a\u3081\u3092\u591a\u54c1\u7a2e[\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c](http://qiita.com/Tsutomu-KKE@github/items/41d625df63f1946c7216)\u3068\u3057\u3066\u89e3\u3051\u308b\u3053\u3068\u3092\u805e\u3044\u305f\u306e\u3067\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n- [\u770c\u5225\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316](http://qiita.com/Tsutomu-KKE@github/items/6d17889ba47357e44131)\u30e9\u30a4\u30d6\u30e9\u30eajapanmap\u3092\u4f7f\u3044\u307e\u3059\u3002\n- \u672c\u5dde\u306e34\u90fd\u5e9c\u770c\u3092\u5bfe\u8c61\u306b\u3057\u30011\u770c\u306b1\u4eba\u5b66\u751f\u304c\u3044\u308b\u3068\u3057\u307e\u3059\u3002\n- \u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u306b\u5b66\u6821\u304c\u3042\u308a\u3001\u5b9a\u54e1\u306f\u305d\u308c\u305e\u308c 7\u300121\u30016\u4eba\u3068\u3057\u307e\u3059\u3002\n- \u96a3\u63a5\u770c\u3078\u306e\u79fb\u52d5\u6642\u9593\u306f\u30011\u3068\u3057\u307e\u3059\u3002\n- \u5404\u5b66\u751f\u304c3\u3064\u306e\u5b66\u6821\u306e\u3044\u305a\u308c\u304b\u306b\u901a\u3046\u3053\u3068\u3068\u3057\u3001\u5168\u5b66\u751f\u306e\u7dcf\u79fb\u52d5\u6642\u9593\u3092\u6700\u5c0f\u5316\u3059\u308b\u5b66\u533a\u306e\u5272\u5f53\u3092\u6c42\u3081\u307e\u3059\u3002\n\n# \u8003\u3048\u65b9\n\n- 34\u90fd\u5e9c\u770c\u306e\u9700\u8981\u70b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n- \u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u306e\u9700\u8981\u3092\u305d\u308c\u305e\u308c(\u81ea\u5206\u3092\u9664\u3044\u305f)6\u300120\u30015\u3001\u305d\u306e\u4ed6\u306f-1\u3068\u3057\u307e\u3059\u3002\n- \u9752\u68ee\u3001\u5c71\u68a8\u3001\u5c71\u53e3\u3092\u4ee3\u8868\u3068\u3059\u308b3\u3064\u306e\u65e5\u672c(\u7dd1\u65e5\u672c\u3001\u9752\u65e5\u672c\u3001\u8d64\u65e5\u672c)\u3092\u8003\u3048\u3001\u3053\u306e\u5404\u65e5\u672c\u306e\u4e2d\u3067\u96a3\u63a5\u3055\u305b\u307e\u3059\u3002(\u591a\u54c1\u7a2e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af)\n- \u4ee3\u8868\u70b9\u4ee5\u5916\u306e\u9700\u8981\u70b9\u304b\u30893\u3064\u306e\u65e5\u672c\u306e\u540c\u3058\u770c\u306b\u30ea\u30f3\u30af\u3092\u306f\u308a\u307e\u3059\u3002\n- \u4ee3\u8868\u70b9\u306e\u9700\u8981\u70b9\u3078\u3001\u305d\u306e\u4ee3\u8868\u70b9\u3092\u4ee3\u8868\u3068\u3059\u308b\u5404\u65e5\u672c\u306e\u540c\u3058\u770c\u304b\u3089\u30ea\u30f3\u30af\u3092\u306f\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/890ea35d-be5f-ad19-d32e-c82a410a894e.png)\n\n\u3053\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u3067\u6700\u5c0f\u8cbb\u7528\u6d41\u554f\u984c\u3092\u89e3\u304d\u307e\u3059\u3002\n\n# Python \u3067\u3084\u3063\u3066\u307f\u308b\n```py3:python3\nimport numpy as np, networkx as nx\nfrom japanmap import adjacent, pref_code, pref_map\n\u672c\u5dde = np.arange(2,36)\n\u4ee3\u8868\u70b9 = {pref_code('\u9752\u68ee'):7, pref_code('\u5c71\u68a8'):21, pref_code('\u5c71\u53e3'):6}\n# \u30b0\u30e9\u30d5\u4f5c\u6210\ng = nx.DiGraph()\ng.add_nodes_from(\u672c\u5dde, demand=-1)\nfor i, d in \u4ee3\u8868\u70b9.items():\n    nwl = i*100\n    g.node[i]['demand'] = d-1\n    g.add_nodes_from(nwl+\u672c\u5dde, demand=0)\n    g.add_edge(nwl+i,i)\n    g.add_edges_from((j,nwl+j) for j in \u672c\u5dde if j not in \u4ee3\u8868\u70b9)\n    g.add_edges_from(((nwl+j,nwl+k) for j in \u672c\u5dde for k in adjacent(j)), weight=1)\nr = nx.min_cost_flow(g)\n# \u7d50\u679c\u8868\u793a\ndc = dict(zip(\u4ee3\u8868\u70b9,['red','green','blue']))\ndc.update({i:dc[j//100]for i, t in r.items() for j, v in t.items() if v and i < 100})\npref_map(\u672c\u5dde,cols=list(dc.values()), width=4)\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/9ef2ea61-f323-dbba-9d15-c6b393dfb65a.png)\n\n\u601d\u3063\u305f\u901a\u308a\u306b\u89e3\u3051\u307e\u3057\u305f\u3002\n\n# \u767a\u5c55\n\u73fe\u5b9f\u306b\u306f\u3001\u3044\u308d\u3044\u308d\u306a\u8981\u7d20\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n- \u306a\u308b\u3079\u304f\u524d\u3068\u540c\u3058\u5b66\u533a\u304c\u671b\u307e\u3057\u3044\u3002\n- \u7279\u5b9a\u306e\u3068\u3053\u308d\u3067\u5fc5\u305a\u308f\u3051\u305f\u3044\u3002\n- \u30db\u30c3\u30d7\u6570\u3067\u306f\u306a\u304f\u8ddd\u96e2\u306b\u3059\u308b\u3002\n- \u30b0\u30eb\u30fc\u30d7\u5185\u306e\u6570\u306f\u3074\u3063\u305f\u308a\u3067\u306a\u3044\u3002\n\n\u5b9a\u5f0f\u5316\u3092\u76f4\u305b\u3070\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u4ee5\u4e0a\n"}