{"tags": ["SICP", "Scheme"], "context": "\n\n2.3.4 \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\n;; \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\n\n;\u4e00\u822c\u7684\u306b\u3001\u7b26\u53f7\u5316\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u76f8\u5bfe\u983b\u5ea6\u3092\u5229\u7528\u3057\u305f\u53ef\u5909\u9577\u63a5\u982d\u7b26\u53f7\u3092\n;\u4f7f\u3048\u3070\u3001\u304b\u306a\u308a\u306e\u7bc0\u7d04\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u6226\u7565\u306e\u3072\u3068\u3064\u306b\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\n;\u6cd5\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 p174\n\n;\u5de6\u306e\u679d\u3092\u4e0b\u308a\u308b\u305f\u3073\u306b\u7b26\u53f7\u306b 0 \u3092\u8ffd\u52a0\u3057\u3001\u53f3\u306e\u679d\u3092\u4e0b\u308a\u308b\u305f\u3073\u306b 1 \u3092\u8ffd\u52a0\u3057\u307e\u3059 p175\n;\u307e\u305a\u3001\u7b26\u53f7\u69cb\u7bc9\u5bfe\u8c61\u306e\u521d\u671f\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u3001\u8a18\u53f7\u3068\u983b\u5ea6\n;\u3092\u6301\u3064\u8449\u30ce\u30fc\u30c9\u306e\u96c6\u5408\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u91cd\u307f\u304c\u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\u4e8c\u3064\u306e\u8449\n;\u3092\u9078\u3073\u3001\u4e8c\u3064\u3092\u304f\u3063\u3064\u3051\u3066\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u306e\u5de6\u3068\u53f3\u306e\u679d\u304c\n;\u305d\u306e\u4e8c\u3064\u306e\u30ce\u30fc\u30c9\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n;list\u306e\u982d\u306b'leaf \u3064\u3051\u3066 leaf \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u3066\u308b\n\n(define (make-code-tree left right)\n    (list \n        left\n        right\n        (append (symbols left) (symbols right)) ; \u30b7\u30f3\u30dc\u30eb\u306e\u96c6\u5408\n        (+ (weight left) (weight right))        ; \u30b7\u30f3\u30dc\u30eb\u306e\u5408\u8a08weight\n    )\n)\n\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if \n        (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)\n    )\n)\n\n(define (weight tree)\n    (if \n        (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)\n    )\n)\n\n\n; \u5fa9\u53f7\u5316\u624b\u7d9a\u304d\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if \n            (null? bits)\n            '()\n            (let \n                (\n                    (next-branch\n                    (choose-branch (car bits) current-branch))\n                )\n                (if \n                    (leaf? next-branch)\n                    (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch )\n                )\n            )))\n    (decode-1 bits tree)\n)\n\n(define (choose-branch bit branch)\n    (cond \n        ((= bit 0) (left-branch branch))\n        ((= bit 1) (right-branch branch))\n    (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n\n; tree\u306emerge\u306e\u624b\u7d9a\u304d\n(define (adjoin-set x set)\n    (cond \n        ((null? set) (list x))\n        ((< (weight x) (weight (car set))) (cons x set))\n    (else (cons (car set)\n(adjoin-set x (cdr set))))))\n\n\n; \u30ea\u30b9\u30c8\u3092left\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\n(define (make-leaf-set pairs)\n    (if \n        (null? pairs)\n        '()\n        (let \n            ((pair (car pairs)))\n            (adjoin-set \n                (make-leaf (car pair) (cadr pair))\n                (make-leaf-set (cdr pairs)))\n        )\n    )\n)\n\n(define _pairs '((A 4) (B 2) (C 1) (D 1)) )\n(print \"pairs:\" _pairs)\n(print \"  => make-leaf-set:\" (make-leaf-set _pairs))\n\n\n\nEx 2.67\n\u3084\u308b\u3060\u3051\u301c\n(print \"===Ex.2.67===\")\n\n(define sample-tree\n    (make-code-tree \n        (make-leaf 'A 4)\n        (make-code-tree\n            (make-leaf 'B 2)\n            (make-code-tree (make-leaf 'D 1) (make-leaf 'C 1)))))\n\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n\n(print (decode sample-message sample-tree)) ;(A D A B B C A)\n\n\nEx 2.68\n\u3068\u308a\u3042\u3048\u305a\u6bce\u56de\uff12\u3064\u5c0f\u3055\u3044\u306e\u3092\u63a2\u3057\u3066\u306f\u3001\n\u6728\u306b\u3057\u3066\u304f\u611f\u3058\u306e\u5b9f\u88c5\u3002\n\n(print \"===Ex 2.68===\")\n;encode-symbol\u3092\u8a2d\u8a08\u3059\u308b\n\n(define (encode message tree)\n    (if (null? message)\n        '()\n        (append (encode-symbol (car message) tree) (encode (cdr message) tree))))\n\n(define (encode-symbol char tree)\n    (define (itr char tree code)\n        ;(print \"left: \" (left-branch tree) \" right: \" (right-branch tree))\n        (cond \n            ((leaf? tree) code)\n            ((contains-symbol? char (left-branch tree)) (itr char (left-branch tree) (cons 0 code)))\n            ((contains-symbol? char (right-branch tree)) (itr char (right-branch tree) (cons 1 code)))\n            (else #f)\n        )\n    )\n    (reverse (itr char tree '()))\n)\n\n(define (contains-symbol? char tree)\n    (memq char (symbols tree))\n)\n\n(define sample-message '(A D A B B C A))\n(print (encode sample-message sample-tree))\n; \u6b63\u89e3\uff1a(0 1 1 0 0 1 0 1 0 1 1 1 0)\n; \u7d50\u679c\uff1a(0 1 1 0 0 1 0 1 0 1 1 1 0)\n\n(\u5225\u89e3)hio\u3055\u3093\u307f\u305f\u3044\u306bcons\u306e\u4e2d\u3067itr\u547c\u3073\u51fa\u3059\u5f62\u306b\u3059\u308c\u3070\u3001\nreverse\u3057\u306a\u304f\u3066\u3064\u306a\u3052\u308b\uff01\n\u2193\u2193\n(define (encode-symbol char tree)\n    (define (iter current-tree)\n        (cond\n            ((leaf? current-tree)\n                '())\n            ((memq char (symbols (left-branch current-tree)))\n                (cons 0 (iter (left-branch current-tree))))\n            ((memq char (symbols (right-branch current-tree)))\n                (cons 1 (iter (right-branch current-tree))))\n            (else\n                (error \"NEVER REACH HERE\"))))\n\n    (if\n        (memq char (symbols tree))\n        (iter tree)\n        (error \"bad char:\" char \"not in tree\" tree)))\n\n\nEx 2.69\n(print \"===Ex 2.69===\")\n; \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\u5b9f\u88c5\n\n(define (generate-huffman-tree pairs)\n    (successive-merge (make-leaf-set pairs)))\n\n; \u6700\u5c0f\u306e\u3082\u306e\u540c\u58eb\u3092merge\n(define (successive-merge leafs)\n    (define (join x lst) \n        (if \n            (null? x)\n            lst\n            (cons x lst)))\n    (define (create-min-tree leafs lst l1 l2)\n        (print \"leafs:\" leafs \" lst:\" lst \" l1:\" l1 \" l2:\" l2)\n        (cond\n            ((null? leafs) \n                (if\n                    (null? lst)\n                    (make-code-tree l1 l2)\n                    (create-min-tree (join (make-code-tree l1 l2) lst) '() '() '())))\n            ((null? l1) (create-min-tree (cdr leafs) lst (car leafs) l2))\n            ((null? l2) (create-min-tree (cdr leafs) lst l1 (car leafs)))\n            ((> (weight l1) (weight (car leafs)))\n                (create-min-tree (cdr leafs) (join l1 lst) (car leafs) l2))\n            ((> (weight l2) (weight (car leafs))) \n                (create-min-tree (cdr leafs) (join l2 lst) l1 (car leafs)))\n        (else (create-min-tree (cdr leafs) (join (car leafs) lst) l1 l2))))\n    (create-min-tree leafs '() '() '())\n)\n\n(define _pairs '((A 4) (B 2) (C 1) (D 1) (E 1)) )\n(print (make-leaf-set _pairs))\n(print (generate-huffman-tree _pairs))\n\n\u52d5\u304d\n((leaf E 1) (leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4))\nleafs:((leaf E 1) (leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:() l2:()\nleafs:((leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:(leaf E 1) l2:()\nleafs:((leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:(leaf E 1) l2:(leaf D 1)\nleafs:((leaf B 2) (leaf A 4)) lst:((leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:((leaf A 4)) lst:((leaf B 2) (leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:() lst:((leaf A 4) (leaf B 2) (leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4) (leaf B 2) (leaf C 1)) lst:() l1:() l2:()\nleafs:((leaf A 4) (leaf B 2) (leaf C 1)) lst:() l1:((leaf E 1) (leaf D 1) (E D) 2) l2:()\nleafs:((leaf B 2) (leaf C 1)) lst:() l1:((leaf E 1) (leaf D 1) (E D) 2) l2:(leaf A 4)\nleafs:((leaf C 1)) lst:((leaf A 4)) l1:((leaf E 1) (leaf D 1) (E D) 2) l2:(leaf B 2)\nleafs:() lst:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) l1:(leaf C 1) l2:(leaf B 2)\nleafs:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) lst:() l1:() l2:()\nleafs:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) lst:() l1:((leaf C 1) (leaf B 2) (C B) 3) l2:()\nleafs:((leaf A 4)) lst:() l1:((leaf C 1) (leaf B 2) (C B) 3) l2:((leaf E 1) (leaf D 1) (E D) 2)\nleafs:() lst:((leaf A 4)) l1:((leaf C 1) (leaf B 2) (C B) 3) l2:((leaf E 1) (leaf D 1) (E D) 2)\nleafs:((((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) (leaf A 4)) lst:() l1:() l2:()\nleafs:((leaf A 4)) lst:() l1:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) l2:()\nleafs:() lst:() l1:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) l2:(leaf A 4)\n((((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) (leaf A 4) (C B E D A) 9)\n\n(\u5225\u89e3) hio\u3055\u3093\u306e\nadjoin-set\u3067\u3055\u3089\u3063\u3068\u304b\u3051\u308b\uff01\n(define (successive-merge leaves)\n    (cond\n        ; \u8981\u7d20\u6570 == 0:\n        ((null? leaves)\n            (error \"leaves must have at least one element\"))\n        ; \u8981\u7d20\u6570 == 1:\n        ((null? (cdr leaves))\n            (car leaves))\n        ; \u8981\u7d20\u6570 >= 2:\n        (else\n            (successive-merge\n                (adjoin-set\n                    (make-code-tree\n                        (car leaves)\n                        (cadr leaves))\n                    (cddr leaves))))))\n\n\n\nEx 2.70\n(print \"===Ex 2.70===\")\n(define _pairs '((na 16) (yip 9) (sha 3) (a 2) (get 2) (job 1) (wah 1) (boom 1)))\n(define tree (generate-huffman-tree _pairs))\n(print tree)\n\n(define sample-message '(get a job \n    sha na na na na na na na na\n    get a job\n    sha na na na na na na na na\n    wah yip yip yip yip yip yip yip yip yip\n    sha boom))\n(print sample-message)\n(define encoded (encode sample-message tree))\n(print encoded)\n;(1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0\n; 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 \n; 0 0 0 0 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 \n; 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0)\n(print (length encoded)) ;84\n\n\u5143\u306e\u6587\u7ae0\u3060\u3068124\u5b57=(8 * 124=992) bit -> huffman\u7b26\u53f7\u531684bit\n\u56fa\u5b9a\u9577\u3060\u3068\u30018\u7a2e\u985e\u306a\u306e\u3067, log_2 8 = 3 \u30673\u6841\u3067\u8868\u305b\u308b\u3002\n3 * (16 + 9 + 3 + 2 + 2 + 2 + 1 + 1)\n= 3 * 36\n= 108\n\n\u56fa\u5b9a\u9577\u3060\u3068108bit => huffman\u301c\u306784bit!\n\n\n\n\ncount\n\n\n\n\nna\n16\n\n\nyip\n9\n\n\nSha\n3\n\n\na\n2\n\n\nGet\n2\n\n\njob\n2\n\n\nWah\n1\n\n\nboom\n1\n\n\n\n\nEx. 2.71\n(print \"===Ex 2.71===\")\n;n \u8a18\u53f7\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u30cf\u30d5\u30de\u30f3\u6728\u304c\u3042\n;\u308a\u3001\u8a18\u53f7\u306e\u76f8\u5bfe\u983b\u5ea6\u306f 1, 2, 4, . . . , 2^n\u22121 \u3067\u3042\u308b\u3068\u3059\u308b\u3002n = 5\u3001n = 10\n;\u306e\u5834\u5408\u306e\u6728\u3092\u30b9\u30b1\u30c3\u30c1\u305b\u3088\u3002\u305d\u306e\u3088\u3046\u306a\u6728\u3067\u306f\u3001(\u4e00\u822c\u306e n \u306b\u3064\u3044\n;\u3066) \u6700\u3082\u983b\u5ea6\u306e\u9ad8\u3044\u8a18\u53f7\u3092\u7b26\u53f7\u5316\u3059\u308b\u306e\u306b\u4f55\u30d3\u30c3\u30c8\u5fc5\u8981\u306b\u306a\u308b\u3060\n;\u308d\u3046\u304b\u3002\u6700\u3082\u983b\u5ea6\u306e\u4f4e\u3044\u8a18\u53f7\u306f\u3069\u3046\u3060\u308d\u3046\u304b\u3002\n\n(define n_3_sample '((A 1) (B 2) (C 4)))\n(define tree (generate-huffman-tree n_3_sample))\n(print (encode '(A) tree)) ;(0 0 0 0)\n\n\n(define n_5_sample '((A 1) (B 2) (C 4) (D 8) (E 16)))\n(define tree (generate-huffman-tree n_5_sample))\n(print (encode '(A) tree)) ;(0 0 0 0)\n\n(define n_10_sample '((A 1) (B 2) (C 4) (D 8) (E 16) (F 32) (G 64) (H 128) (I 256) (J 512)))\n(define tree (generate-huffman-tree n_10_sample))\n(print (encode '(A) tree)) ;(0 0 0 0 0 0 0 0 0) \u9577\u30559\n\n\n\u6700\u3082\u983b\u5ea6\u304c\u9ad8\u3044 1bit\n\u6700\u3082\u983b\u5ea6\u304c\u4f4e\u3044 n-1 bit\n\n\nEx.2.72\n\n\u983b\u5ea6\u7d30\u5927\u306e\u8a18\u53f7\u306e\u7b26\u53f7\u5316\n\nencode-symbol 1\u56de\nontains-symbol? 1\u56de\n\nO(1)\n\n\n\u983b\u5ea6\u6700\u5c0f\u306e\u8a18\u53f7\u306e\u7b26\u53f7\u5316\nencode-symbol n\u56de\n ontains-symbol? n\u56de\nO(n^2)\n\n\n# 2.3.4 \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\n\n```lisp \n;; \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\n\n;\u4e00\u822c\u7684\u306b\u3001\u7b26\u53f7\u5316\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u76f8\u5bfe\u983b\u5ea6\u3092\u5229\u7528\u3057\u305f\u53ef\u5909\u9577\u63a5\u982d\u7b26\u53f7\u3092\n;\u4f7f\u3048\u3070\u3001\u304b\u306a\u308a\u306e\u7bc0\u7d04\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u6226\u7565\u306e\u3072\u3068\u3064\u306b\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\n;\u6cd5\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 p174\n\n;\u5de6\u306e\u679d\u3092\u4e0b\u308a\u308b\u305f\u3073\u306b\u7b26\u53f7\u306b 0 \u3092\u8ffd\u52a0\u3057\u3001\u53f3\u306e\u679d\u3092\u4e0b\u308a\u308b\u305f\u3073\u306b 1 \u3092\u8ffd\u52a0\u3057\u307e\u3059 p175\n;\u307e\u305a\u3001\u7b26\u53f7\u69cb\u7bc9\u5bfe\u8c61\u306e\u521d\u671f\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u3001\u8a18\u53f7\u3068\u983b\u5ea6\n;\u3092\u6301\u3064\u8449\u30ce\u30fc\u30c9\u306e\u96c6\u5408\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u91cd\u307f\u304c\u5c0f\u3055\u3044\u307b\u3046\u304b\u3089\u4e8c\u3064\u306e\u8449\n;\u3092\u9078\u3073\u3001\u4e8c\u3064\u3092\u304f\u3063\u3064\u3051\u3066\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u4f5c\u308a\u3001\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u306e\u5de6\u3068\u53f3\u306e\u679d\u304c\n;\u305d\u306e\u4e8c\u3064\u306e\u30ce\u30fc\u30c9\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n(define (make-leaf symbol weight) (list 'leaf symbol weight))\n(define (leaf? object) (eq? (car object) 'leaf))\n(define (symbol-leaf x) (cadr x))\n(define (weight-leaf x) (caddr x))\n\n;list\u306e\u982d\u306b'leaf \u3064\u3051\u3066 leaf \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u3066\u308b\n\n(define (make-code-tree left right)\n    (list \n        left\n        right\n        (append (symbols left) (symbols right)) ; \u30b7\u30f3\u30dc\u30eb\u306e\u96c6\u5408\n        (+ (weight left) (weight right))        ; \u30b7\u30f3\u30dc\u30eb\u306e\u5408\u8a08weight\n    )\n)\n\n(define (left-branch tree) (car tree))\n(define (right-branch tree) (cadr tree))\n(define (symbols tree)\n    (if \n        (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)\n    )\n)\n\n(define (weight tree)\n    (if \n        (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)\n    )\n)\n\n\n; \u5fa9\u53f7\u5316\u624b\u7d9a\u304d\n(define (decode bits tree)\n    (define (decode-1 bits current-branch)\n        (if \n            (null? bits)\n            '()\n            (let \n                (\n                    (next-branch\n                    (choose-branch (car bits) current-branch))\n                )\n                (if \n                    (leaf? next-branch)\n                    (cons (symbol-leaf next-branch) (decode-1 (cdr bits) tree))\n                    (decode-1 (cdr bits) next-branch )\n                )\n            )))\n    (decode-1 bits tree)\n)\n\n(define (choose-branch bit branch)\n    (cond \n        ((= bit 0) (left-branch branch))\n        ((= bit 1) (right-branch branch))\n    (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n\n; tree\u306emerge\u306e\u624b\u7d9a\u304d\n(define (adjoin-set x set)\n    (cond \n        ((null? set) (list x))\n        ((< (weight x) (weight (car set))) (cons x set))\n    (else (cons (car set)\n(adjoin-set x (cdr set))))))\n\n\n; \u30ea\u30b9\u30c8\u3092left\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\n(define (make-leaf-set pairs)\n    (if \n        (null? pairs)\n        '()\n        (let \n            ((pair (car pairs)))\n            (adjoin-set \n                (make-leaf (car pair) (cadr pair))\n                (make-leaf-set (cdr pairs)))\n        )\n    )\n)\n\n(define _pairs '((A 4) (B 2) (C 1) (D 1)) )\n(print \"pairs:\" _pairs)\n(print \"  => make-leaf-set:\" (make-leaf-set _pairs))\n\n```\n\n\n## Ex 2.67\n\n\u3084\u308b\u3060\u3051\u301c\n\n```lisp\n(print \"===Ex.2.67===\")\n\n(define sample-tree\n    (make-code-tree \n        (make-leaf 'A 4)\n        (make-code-tree\n            (make-leaf 'B 2)\n            (make-code-tree (make-leaf 'D 1) (make-leaf 'C 1)))))\n\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n\n(print (decode sample-message sample-tree)) ;(A D A B B C A)\n```\n\n## Ex 2.68\n\n\u3068\u308a\u3042\u3048\u305a\u6bce\u56de\uff12\u3064\u5c0f\u3055\u3044\u306e\u3092\u63a2\u3057\u3066\u306f\u3001\n\u6728\u306b\u3057\u3066\u304f\u611f\u3058\u306e\u5b9f\u88c5\u3002\n\n```lisp\n\n(print \"===Ex 2.68===\")\n;encode-symbol\u3092\u8a2d\u8a08\u3059\u308b\n\n(define (encode message tree)\n    (if (null? message)\n        '()\n        (append (encode-symbol (car message) tree) (encode (cdr message) tree))))\n\n(define (encode-symbol char tree)\n    (define (itr char tree code)\n        ;(print \"left: \" (left-branch tree) \" right: \" (right-branch tree))\n        (cond \n            ((leaf? tree) code)\n            ((contains-symbol? char (left-branch tree)) (itr char (left-branch tree) (cons 0 code)))\n            ((contains-symbol? char (right-branch tree)) (itr char (right-branch tree) (cons 1 code)))\n            (else #f)\n        )\n    )\n    (reverse (itr char tree '()))\n)\n\n(define (contains-symbol? char tree)\n    (memq char (symbols tree))\n)\n\n(define sample-message '(A D A B B C A))\n(print (encode sample-message sample-tree))\n; \u6b63\u89e3\uff1a(0 1 1 0 0 1 0 1 0 1 1 1 0)\n; \u7d50\u679c\uff1a(0 1 1 0 0 1 0 1 0 1 1 1 0)\n```\n\n\n(\u5225\u89e3)hio\u3055\u3093\u307f\u305f\u3044\u306bcons\u306e\u4e2d\u3067itr\u547c\u3073\u51fa\u3059\u5f62\u306b\u3059\u308c\u3070\u3001\nreverse\u3057\u306a\u304f\u3066\u3064\u306a\u3052\u308b\uff01\n\u2193\u2193\n\n```lisp\n(define (encode-symbol char tree)\n    (define (iter current-tree)\n        (cond\n            ((leaf? current-tree)\n                '())\n            ((memq char (symbols (left-branch current-tree)))\n                (cons 0 (iter (left-branch current-tree))))\n            ((memq char (symbols (right-branch current-tree)))\n                (cons 1 (iter (right-branch current-tree))))\n            (else\n                (error \"NEVER REACH HERE\"))))\n\n    (if\n        (memq char (symbols tree))\n        (iter tree)\n        (error \"bad char:\" char \"not in tree\" tree)))\n```\n\n## Ex 2.69\n\n```lisp\n(print \"===Ex 2.69===\")\n; \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u6728\u5b9f\u88c5\n\n(define (generate-huffman-tree pairs)\n    (successive-merge (make-leaf-set pairs)))\n\n; \u6700\u5c0f\u306e\u3082\u306e\u540c\u58eb\u3092merge\n(define (successive-merge leafs)\n    (define (join x lst) \n        (if \n            (null? x)\n            lst\n            (cons x lst)))\n    (define (create-min-tree leafs lst l1 l2)\n        (print \"leafs:\" leafs \" lst:\" lst \" l1:\" l1 \" l2:\" l2)\n        (cond\n            ((null? leafs) \n                (if\n                    (null? lst)\n                    (make-code-tree l1 l2)\n                    (create-min-tree (join (make-code-tree l1 l2) lst) '() '() '())))\n            ((null? l1) (create-min-tree (cdr leafs) lst (car leafs) l2))\n            ((null? l2) (create-min-tree (cdr leafs) lst l1 (car leafs)))\n            ((> (weight l1) (weight (car leafs)))\n                (create-min-tree (cdr leafs) (join l1 lst) (car leafs) l2))\n            ((> (weight l2) (weight (car leafs))) \n                (create-min-tree (cdr leafs) (join l2 lst) l1 (car leafs)))\n        (else (create-min-tree (cdr leafs) (join (car leafs) lst) l1 l2))))\n    (create-min-tree leafs '() '() '())\n)\n\n(define _pairs '((A 4) (B 2) (C 1) (D 1) (E 1)) )\n(print (make-leaf-set _pairs))\n(print (generate-huffman-tree _pairs))\n```\n\n\u52d5\u304d\n\n```\n((leaf E 1) (leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4))\nleafs:((leaf E 1) (leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:() l2:()\nleafs:((leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:(leaf E 1) l2:()\nleafs:((leaf C 1) (leaf B 2) (leaf A 4)) lst:() l1:(leaf E 1) l2:(leaf D 1)\nleafs:((leaf B 2) (leaf A 4)) lst:((leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:((leaf A 4)) lst:((leaf B 2) (leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:() lst:((leaf A 4) (leaf B 2) (leaf C 1)) l1:(leaf E 1) l2:(leaf D 1)\nleafs:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4) (leaf B 2) (leaf C 1)) lst:() l1:() l2:()\nleafs:((leaf A 4) (leaf B 2) (leaf C 1)) lst:() l1:((leaf E 1) (leaf D 1) (E D) 2) l2:()\nleafs:((leaf B 2) (leaf C 1)) lst:() l1:((leaf E 1) (leaf D 1) (E D) 2) l2:(leaf A 4)\nleafs:((leaf C 1)) lst:((leaf A 4)) l1:((leaf E 1) (leaf D 1) (E D) 2) l2:(leaf B 2)\nleafs:() lst:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) l1:(leaf C 1) l2:(leaf B 2)\nleafs:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) lst:() l1:() l2:()\nleafs:(((leaf E 1) (leaf D 1) (E D) 2) (leaf A 4)) lst:() l1:((leaf C 1) (leaf B 2) (C B) 3) l2:()\nleafs:((leaf A 4)) lst:() l1:((leaf C 1) (leaf B 2) (C B) 3) l2:((leaf E 1) (leaf D 1) (E D) 2)\nleafs:() lst:((leaf A 4)) l1:((leaf C 1) (leaf B 2) (C B) 3) l2:((leaf E 1) (leaf D 1) (E D) 2)\nleafs:((((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) (leaf A 4)) lst:() l1:() l2:()\nleafs:((leaf A 4)) lst:() l1:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) l2:()\nleafs:() lst:() l1:(((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) l2:(leaf A 4)\n((((leaf C 1) (leaf B 2) (C B) 3) ((leaf E 1) (leaf D 1) (E D) 2) (C B E D) 5) (leaf A 4) (C B E D A) 9)\n```\n\n\n(\u5225\u89e3) hio\u3055\u3093\u306e\nadjoin-set\u3067\u3055\u3089\u3063\u3068\u304b\u3051\u308b\uff01\n\n```lisp\n(define (successive-merge leaves)\n    (cond\n        ; \u8981\u7d20\u6570 == 0:\n        ((null? leaves)\n            (error \"leaves must have at least one element\"))\n        ; \u8981\u7d20\u6570 == 1:\n        ((null? (cdr leaves))\n            (car leaves))\n        ; \u8981\u7d20\u6570 >= 2:\n        (else\n            (successive-merge\n                (adjoin-set\n                    (make-code-tree\n                        (car leaves)\n                        (cadr leaves))\n                    (cddr leaves))))))\n\n```\n\n\n## Ex 2.70\n\n```lisp\n(print \"===Ex 2.70===\")\n(define _pairs '((na 16) (yip 9) (sha 3) (a 2) (get 2) (job 1) (wah 1) (boom 1)))\n(define tree (generate-huffman-tree _pairs))\n(print tree)\n\n(define sample-message '(get a job \n    sha na na na na na na na na\n    get a job\n    sha na na na na na na na na\n    wah yip yip yip yip yip yip yip yip yip\n    sha boom))\n(print sample-message)\n(define encoded (encode sample-message tree))\n(print encoded)\n;(1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 0 0 0\n; 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 \n; 0 0 0 0 0 0 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1 0 \n; 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0)\n(print (length encoded)) ;84\n```\n\u5143\u306e\u6587\u7ae0\u3060\u3068124\u5b57=(8 * 124=992) bit -> huffman\u7b26\u53f7\u531684bit\n\u56fa\u5b9a\u9577\u3060\u3068\u30018\u7a2e\u985e\u306a\u306e\u3067, log_2 8 = 3 \u30673\u6841\u3067\u8868\u305b\u308b\u3002\n\n\t3 * (16 + 9 + 3 + 2 + 2 + 2 + 1 + 1)\n\t= 3 * 36\n\t= 108\n\t\n\u56fa\u5b9a\u9577\u3060\u3068108bit => huffman\u301c\u306784bit!\n\n\n||count|\n|:--|:--|\n|na|16|\n|yip|9|\n|Sha|3|\n|a|2|\n|Get|2|\n|job|2|\n|Wah|1|\n|boom|1|\n\n## Ex. 2.71\n\n```lisp\n(print \"===Ex 2.71===\")\n;n \u8a18\u53f7\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u30cf\u30d5\u30de\u30f3\u6728\u304c\u3042\n;\u308a\u3001\u8a18\u53f7\u306e\u76f8\u5bfe\u983b\u5ea6\u306f 1, 2, 4, . . . , 2^n\u22121 \u3067\u3042\u308b\u3068\u3059\u308b\u3002n = 5\u3001n = 10\n;\u306e\u5834\u5408\u306e\u6728\u3092\u30b9\u30b1\u30c3\u30c1\u305b\u3088\u3002\u305d\u306e\u3088\u3046\u306a\u6728\u3067\u306f\u3001(\u4e00\u822c\u306e n \u306b\u3064\u3044\n;\u3066) \u6700\u3082\u983b\u5ea6\u306e\u9ad8\u3044\u8a18\u53f7\u3092\u7b26\u53f7\u5316\u3059\u308b\u306e\u306b\u4f55\u30d3\u30c3\u30c8\u5fc5\u8981\u306b\u306a\u308b\u3060\n;\u308d\u3046\u304b\u3002\u6700\u3082\u983b\u5ea6\u306e\u4f4e\u3044\u8a18\u53f7\u306f\u3069\u3046\u3060\u308d\u3046\u304b\u3002\n\n(define n_3_sample '((A 1) (B 2) (C 4)))\n(define tree (generate-huffman-tree n_3_sample))\n(print (encode '(A) tree)) ;(0 0 0 0)\n\n\n(define n_5_sample '((A 1) (B 2) (C 4) (D 8) (E 16)))\n(define tree (generate-huffman-tree n_5_sample))\n(print (encode '(A) tree)) ;(0 0 0 0)\n\n(define n_10_sample '((A 1) (B 2) (C 4) (D 8) (E 16) (F 32) (G 64) (H 128) (I 256) (J 512)))\n(define tree (generate-huffman-tree n_10_sample))\n(print (encode '(A) tree)) ;(0 0 0 0 0 0 0 0 0) \u9577\u30559\n```\n\n- \u6700\u3082\u983b\u5ea6\u304c\u9ad8\u3044 1bit\n- \u6700\u3082\u983b\u5ea6\u304c\u4f4e\u3044 n-1 bit\n\n## Ex.2.72\n\n### \u983b\u5ea6\u7d30\u5927\u306e\u8a18\u53f7\u306e\u7b26\u53f7\u5316\n- encode-symbol 1\u56de\n- ontains-symbol? 1\u56de\n\n```math\nO(1)\n```\n\n### \u983b\u5ea6\u6700\u5c0f\u306e\u8a18\u53f7\u306e\u7b26\u53f7\u5316 \n encode-symbol n\u56de\n ontains-symbol? n\u56de\n\n```math\nO(n^2)\n```\n\n\n\n\n\n"}