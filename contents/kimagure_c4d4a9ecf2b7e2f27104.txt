{"context": " More than 1 year has passed since last update.\n\nTOC\n\n(this page)\npart 2\npart 3\npart 4\n\n\nDisclaimer\nThis was written against React 0.11.x, but the only changes you need to make are to either transform to use Object.assign or use lodash's _.assign instead of React's merge and copyProperties. The code in this example will work either way, and React will present you with warning messages.\n\nWhy yet another tutorial?\nI've been pretty disappointed in the quality of react/flux examples I've read so far. To this effort, I'm going to try to write a series of Qiita posts on how to do some parts of modern React/Flux development. I'll touch on profiling performance in the last bits. Not that I will be much better, sorry.\nIf you already have your project set up, skip to part 3 for actually useful bits.\n\nGithub repo\nGithub repo for this article here: https://github.com/kimagure/react-flux-example/tree/master\n\nProject dependencies\n\"devDependencies\": {\n  \"gulp\": \"^3.8.9\",\n  \"gulp-util\": \"^3.0.1\",\n  \"jest\": \"^0.1.37\",\n  \"jsx-loader\": \"^0.11.2\",\n  \"webpack\": \"^1.4.8\"\n},\n\"dependencies\": {\n  \"flux\": \"^2.0.1\",\n  \"react\": \"^0.11.2\"\n}\n\nYou need React if you're going to use React, and you're going to need a pretty good Dispatcher for your Flux application, so why not just take advantage of the dispatcher that comes from facebook/flux?\n\nQuick overview of Flux\nThere's too many super wordy explanations of Flux out there, and it just discourages people from ever taking a stab at it. Here's all you need to understand to use it.\nMain parts:\n\nStore - this is where your app state lives and gets modified.\nDispatcher - this is what takes actions and feeds them into the store, one by one.\nAction - this is what your view triggers so that the dispatcher can handle them appropriately.\n\nSummary of what happens:\n\n\n\nPart\nWhat it does\nWhat gets called to do something\n\n\n\n\nAction\nHandle view/server events\nDispatcher, to handle actions\n\n\nDispatcher\nFeed store jobs to do\nStore, to consume actions\n\n\nStore\nHandle dispatched actions\nStore, to emit changes\n\n\nStore\nUpdate app state and emit change event\nStore, to handle change emit events\n\n\nStore\nHandle change event\nCallbacks registered to the store (your application)\n\n\n\nIn a glorious diagram:\n|--------|     |------------|     |--------------|     |------------------|     |-------------|\n| Action | --> | Dispatcher | --> | Store (emit) | --> | Store (consumer) | --> | Application |\n|--------|     |------------|     |--------------|     |------------------|     |-------------|\n\n\nWhat next?\nPart 2\n\nSet up project for Flux work\nHave a simple build process\nBabby's first create entity\n\n## TOC\n\n1. (this page)\n\n2. [part 2](http://qiita.com/kimagure/items/c97a85487d941900ab72)\n\n3. [part 3](http://qiita.com/kimagure/items/b59dae2b7e1116e0087e)\n\n4. [part 4](http://qiita.com/kimagure/items/ce3e889399f4ac416223)\n\n## Disclaimer\n\nThis was written against React 0.11.x, but the only changes you need to make are to either transform to use Object.assign or use lodash's _.assign instead of React's merge and copyProperties. The code in this example will work either way, and React will present you with warning messages.\n\n\n## Why yet another tutorial?\n\nI've been pretty disappointed in the quality of react/flux examples I've read so far. To this effort, I'm going to try to write a series of Qiita posts on how to do some parts of modern React/Flux development. I'll touch on profiling performance in the last bits. Not that I will be much better, sorry.\n\nIf you already have your project set up, skip to [part 3](http://qiita.com/kimagure/items/b59dae2b7e1116e0087e) for actually useful bits.\n\n\n## Github repo\n\nGithub repo for this article here: https://github.com/kimagure/react-flux-example/tree/master\n\n\n## Project dependencies\n\n```json\n\"devDependencies\": {\n  \"gulp\": \"^3.8.9\",\n  \"gulp-util\": \"^3.0.1\",\n  \"jest\": \"^0.1.37\",\n  \"jsx-loader\": \"^0.11.2\",\n  \"webpack\": \"^1.4.8\"\n},\n\"dependencies\": {\n  \"flux\": \"^2.0.1\",\n  \"react\": \"^0.11.2\"\n}\n```\n\nYou need React if you're going to use React, and you're going to need a pretty good Dispatcher for your Flux application, so why not just take advantage of the dispatcher that comes from facebook/flux?\n\n## Quick overview of Flux\n\nThere's too many super wordy explanations of Flux out there, and it just discourages people from ever taking a stab at it. Here's all you need to understand to use it.\n\nMain parts:\n\n* Store - this is where your app state lives and gets modified.\n* Dispatcher - this is what takes actions and feeds them into the store, one by one.\n* Action - this is what your view triggers so that the dispatcher can handle them appropriately.\n\nSummary of what happens:\n\n| Part | What it does | What gets called to do something |\n|------|--------------|----------------------------------|\n| Action | Handle view/server events | Dispatcher, to handle actions |\n| Dispatcher | Feed store jobs to do | Store, to consume actions |\n| Store | Handle dispatched actions | Store, to emit changes |\n| Store | Update app state and emit change event | Store, to handle change emit events |\n| Store | Handle change event | Callbacks registered to the store (your application)\n\nIn a glorious diagram:\n\n```\n|--------|     |------------|     |--------------|     |------------------|     |-------------|\n| Action | --> | Dispatcher | --> | Store (emit) | --> | Store (consumer) | --> | Application |\n|--------|     |------------|     |--------------|     |------------------|     |-------------|\n```\n\n\n## What next?\n\n[Part 2](http://qiita.com/kimagure/items/c97a85487d941900ab72)\n\n1. Set up project for Flux work\n\n2. Have a simple build process\n\n3. Babby's first create entity\n", "tags": ["JavaScript", "flux", "reactjs"]}