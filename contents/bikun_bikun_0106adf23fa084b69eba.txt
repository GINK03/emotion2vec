{"context": "\n\n1. \u524d\u63d0\n\nFuelPHP 1.7\nSimpleAuth\u3092\u5229\u7528\n\u30e6\u30fc\u30b6\u4f5c\u6210\u3092SimpleAuth \u306b\u307e\u304b\u305b\u3066\u3044\u308b\u3002\n\n\n2. \u3069\u3046\u5b9f\u88c5\u3057\u3088\u3046\uff1f\n\nauth\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u3092\u76f4\u63a5\u7de8\u96c6\nauth\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u62e1\u5f35\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3092\u5229\u7528\n\n\uff12\uff0e\u306e\u65b9\u304c\u5f8c\u3005\u697d\u305d\u3046\u3002\n\n3. \u305d\u3082\u305d\u3082\u306a\u305cEmail\u306e\u5fc5\u9808\u3092\u5916\u3059\u306e\u304b\uff1f\n\u7406\u7531\u306f\u3044\u308d\u3044\u308d\u3068\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u793e\u5185\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u306b\u3042\u305f\u308a\u3001\u767b\u9332\u4e88\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u4e2d\u306b\u793e\u5185\u30e1\u30fc\u30eb\u306e\u5272\u5f53\u304c\u306a\u3044\u3068\u304b\u3001\u7279\u5b9a\u30e6\u30fc\u30b6\u90e1\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30e1\u30fc\u30ea\u30b9\u306b\u3057\u3066\u767b\u9332\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u3068\u304b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n4. \u7528\u610f\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002\n\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u304c\u6094\u3084\u307e\u308c\u308b\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4e0b\u8a18\u306b\u914d\u7f6e\u3059\u308b\u3002\npackages\u00a5customauth\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306f\u3053\u3093\u306a\u611f\u3058\n\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092auth\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3089\u30b3\u30d4\u30fc\npackages\u00a5auth\u00a5classes\u00a5login\u00a5simpleauth.php\npackages\u00a5auth\u00a5bootstrap.php\n\n\u30b3\u30d4\u30fc\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\n- packages\n    \u2517 customauth\n        \u2517 classes\n            \u2517 auth\n                \u2517 login\n                    simpleauth.php\n            bootstrap.php\n\n\n5. \u4e2d\u8eab\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\u30b3\u30d4\u30fc\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8210\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u4f5c\u6210\u30e1\u30bd\u30c3\u30c9\npackages\u00a5customauth\u00a5classes\u00a5login\u00a5simpleauth.php\u5185\u306e\u30fb\u30fb\u30fb\n\u3053\u306e\u8fba\u304c\u3042\u3084\u3057\u3044\u30fb\u30fb\u30fb\u3068\u3044\u3046\u304b\u307e\u3093\u307e\u3060\uff01\n\u7de8\u96c6\u524d\n\n    /**\n     * Create new user\n     *\n     * @param   string\n     * @param   string\n     * @param   string  must contain valid email address\n     * @param   int     group id\n     * @param   Array\n     * @return  bool\n     */\n    public function create_user($username, $password, $email, $group = 1, Array $profile_fields = array())\n    {\n        $password = trim($password);\n        $email = filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n\n        if (empty($username) or empty($password) or empty($email))\n        {\n            throw new \\SimpleUserUpdateException('Username, password or email address is not given, or email address is invalid', 1);\n        }\n\n        $same_users = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where('username', '=', $username)\n            ->or_where('email', '=', $email)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        if ($same_users->count() > 0)\n        {\n            if (in_array(strtolower($email), array_map('strtolower', $same_users->current())))\n            {\n                throw new \\SimpleUserUpdateException('Email address already exists', 2);\n            }\n            else\n            {\n                throw new \\SimpleUserUpdateException('Username already exists', 3);\n            }\n        }\n\n        $user = array(\n            'username'        => (string) $username,\n            'password'        => $this->hash_password((string) $password),\n            'email'           => $email,\n            'group'           => (int) $group,\n            'profile_fields'  => serialize($profile_fields),\n            'last_login'      => 0,\n            'login_hash'      => '',\n            'created_at'      => \\Date::forge()->get_timestamp(),\n        );\n        $result = \\DB::insert(\\Config::get('simpleauth.table_name'))\n            ->set($user)\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        return ($result[1] > 0) ? $result[0] : false;\n    }\n\n\n\n\u4e0a\u8a18\u30bd\u30fc\u30b9\u3092\u4e0b\u8a18\u306b\u6539\u5b9a\u3002\n\n    /**\n     * Create new user\n     *\n     * @param   string\n     * @param   string\n     * @param   string\n     * @param   int     group id\n     * @param   Array\n     * @return  bool\n     */\n    public function create_user($username, $password, $email = null, $group = 1, Array $profile_fields = array())\n    {\n        $password = trim($password);\n\n        if(!empty($email))\n        {\n            $email = filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n            if(empty($email))\n            {\n                throw new \\SimpleUserUpdateException('email\u306e\u5f62\u5f0f\u304c\u4e0d\u6b63\u3067\u3059\u3002', 1);\n            }\n        }\n\n        if (empty($username) or empty($password))\n        {\n            throw new \\SimpleUserUpdateException('Username, password is not given, or email address is invalid', 1);\n        }\n\n        $same_users = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where('username', '=', $username)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        if ($same_users->count() > 0)\n        {\n            throw new \\SimpleUserUpdateException('Username already exists', 3);\n        }\n\n        $user = array(\n            'username'        => (string) $username,\n            'password'        => $this->hash_password((string) $password),\n            'email'           => $email,\n            'group'           => (int) $group,\n            'profile_fields'  => serialize($profile_fields),\n            'last_login'      => 0,\n            'login_hash'      => '',\n            'created_at'      => \\Date::forge()->get_timestamp(),\n        );\n        $result = \\DB::insert(\\Config::get('simpleauth.table_name'))\n            ->set($user)\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        return ($result[1] > 0) ? $result[0] : false;\n    }\n\n\n\n\u3053\u3093\u306a\u611f\u3058\u3002\n\n\u30ed\u30b0\u30a4\u30f3\u30c1\u30a7\u30c3\u30af\n\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u30e6\u30fc\u30b6\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u767a\u898b\u3057\u305f\u306e\u3067\u3053\u308c\u3082email\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3057\u3066\u304a\u304f\u3002\n    /**\n     * Check the user exists\n     *\n     * @return  bool\n     */\n    public function validate_user($username_or_email = '', $password = '')\n    {\n        $username_or_email = trim($username_or_email) ?: trim(\\Input::post(\\Config::get('simpleauth.username_post_key', 'username')));\n        $password = trim($password) ?: trim(\\Input::post(\\Config::get('simpleauth.password_post_key', 'password')));\n\n        if (empty($username_or_email) or empty($password))\n        {\n            return false;\n        }\n\n        $password = $this->hash_password($password);\n        $user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where_open()\n            ->where('username', '=', $username_or_email)\n            ->or_where('email', '=', $username_or_email)\n            ->where_close()\n            ->where('password', '=', $password)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'))->current();\n\n        return $user ?: false;\n    }\n\nemail\u5468\u308a\u3092\u3054\u3063\u305d\u308a\u524a\u9664\n    /**\n     * Check the user exists\n     *\n     * @return  bool\n     */\n    public function validate_user($username = '', $password = '')\n    {\n        $username = trim($username) ?: trim(\\Input::post(\\Config::get('simpleauth.username_post_key', 'username')));\n        $password = trim($password) ?: trim(\\Input::post(\\Config::get('simpleauth.password_post_key', 'password')));\n\n        if (empty($username) or empty($password))\n        {\n            return false;\n        }\n\n        $password = $this->hash_password($password);\n        $user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where_open()\n            ->where('username', '=', $username)\n            ->where_close()\n            ->where('password', '=', $password)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'))->current();\n\n        return $user ?: false;\n    }\n\n\n\u30ed\u30b0\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\n\u91cd\u8981\u3058\u3083\u306a\u3044\u3051\u3069\u5909\u6570\u540d\u306b\u9055\u548c\u611f\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u4fee\u6b63\u3057\u3066\u304a\u304f\u3002\n    /**\n     * Login user\n     *\n     * @param   string\n     * @param   string\n     * @return  bool\n     */\n    public function login($username_or_email = '', $password = '')\n    {\n        if ( ! ($this->user = $this->validate_user($username_or_email, $password)))\n        {\n            $this->user = \\Config::get('simpleauth.guest_login', true) ? static::$guest_login : false;\n            \\Session::delete('username');\n            \\Session::delete('login_hash');\n            return false;\n        }\n\n        // register so Auth::logout() can find us\n        Auth::_register_verified($this);\n\n        \\Session::set('username', $this->user['username']);\n        \\Session::set('login_hash', $this->create_login_hash());\n        \\Session::instance()->rotate();\n        return true;\n    }\n\n\n    /**\n     * Login user\n     *\n     * @param   string\n     * @param   string\n     * @return  bool\n     */\n    public function login($username = '', $password = '')\n    {\n        if ( ! ($this->user = $this->validate_user($username, $password)))\n        {\n            $this->user = \\Config::get('simpleauth.guest_login', true) ? static::$guest_login : false;\n            \\Session::delete('username');\n            \\Session::delete('login_hash');\n            return false;\n        }\n\n        // register so Auth::logout() can find us\n        Auth::_register_verified($this);\n\n        \\Session::set('username', $this->user['username']);\n        \\Session::set('login_hash', $this->create_login_hash());\n        \\Session::instance()->rotate();\n        return true;\n    }\n\n\n\n\u30e6\u30fc\u30b6\u60c5\u5831\u66f4\u65b0\u30e1\u30bd\u30c3\u30c9\n\u3053\u3044\u3064\u3082email\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3068\u304b\u3057\u3066\u308b\u306e\u3067\u4fee\u6b63\u304c\u5fc5\u8981\u3002\n    /**\n     * Update a user's properties\n     * Note: Username cannot be updated, to update password the old password must be passed as old_password\n     *\n     * @param   Array  properties to be updated including profile fields\n     * @param   string\n     * @return  bool\n     */\n    public function update_user($values, $username = null)\n    {\n        $username = $username ?: $this->user['username'];\n        $current_values = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where('username', '=', $username)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        if (empty($current_values))\n        {\n            throw new \\SimpleUserUpdateException('Username not found', 4);\n        }\n\n        $update = array();\n        if (array_key_exists('username', $values))\n        {\n            throw new \\SimpleUserUpdateException('Username cannot be changed.', 5);\n        }\n        if (array_key_exists('password', $values))\n        {\n            if (empty($values['old_password'])\n                or $current_values->get('password') != $this->hash_password(trim($values['old_password'])))\n            {\n                throw new \\SimpleUserWrongPassword('Old password is invalid');\n            }\n\n            $password = trim(strval($values['password']));\n            if ($password === '')\n            {\n                throw new \\SimpleUserUpdateException('Password can\\'t be empty.', 6);\n            }\n            $update['password'] = $this->hash_password($password);\n            unset($values['password']);\n        }\n        if (array_key_exists('old_password', $values))\n        {\n            unset($values['old_password']);\n        }\n        if (array_key_exists('email', $values))\n        {\n            $email = filter_var(trim($values['email']), FILTER_VALIDATE_EMAIL);\n            if ( ! $email)\n            {\n                throw new \\SimpleUserUpdateException('Email address is not valid', 7);\n            }\n            $matches = \\DB::select()\n                ->where('email', '=', $email)\n                ->where('id', '!=', $current_values[0]['id'])\n                ->from(\\Config::get('simpleauth.table_name'))\n                ->execute(\\Config::get('simpleauth.db_connection'));\n            if (count($matches))\n            {\n                throw new \\SimpleUserUpdateException('Email address is already in use', 11);\n            }\n            $update['email'] = $email;\n            unset($values['email']);\n        }\n        if (array_key_exists('group', $values))\n        {\n            if (is_numeric($values['group']))\n            {\n                $update['group'] = (int) $values['group'];\n            }\n            unset($values['group']);\n        }\n        if ( ! empty($values))\n        {\n            $profile_fields = @unserialize($current_values->get('profile_fields')) ?: array();\n            foreach ($values as $key => $val)\n            {\n                if ($val === null)\n                {\n                    unset($profile_fields[$key]);\n                }\n                else\n                {\n                    $profile_fields[$key] = $val;\n                }\n            }\n            $update['profile_fields'] = serialize($profile_fields);\n        }\n\n        $update['updated_at'] = \\Date::forge()->get_timestamp();\n\n        $affected_rows = \\DB::update(\\Config::get('simpleauth.table_name'))\n            ->set($update)\n            ->where('username', '=', $username)\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        // Refresh user\n        if ($this->user['username'] == $username)\n        {\n            $this->user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n                ->where('username', '=', $username)\n                ->from(\\Config::get('simpleauth.table_name'))\n                ->execute(\\Config::get('simpleauth.db_connection'))->current();\n        }\n\n        return $affected_rows > 0;\n    }\n\n\n    /**\n     * Update a user's properties\n     * Note: Username cannot be updated, to update password the old password must be passed as old_password\n     *\n     * @param   Array  properties to be updated including profile fields\n     * @param   string\n     * @return  bool\n     */\n    public function update_user($values, $username = null)\n    {\n        $username = $username ?: $this->user['username'];\n        $current_values = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n            ->where('username', '=', $username)\n            ->from(\\Config::get('simpleauth.table_name'))\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        if (empty($current_values))\n        {\n            throw new \\SimpleUserUpdateException('Username not found', 4);\n        }\n\n        $update = array();\n        if (array_key_exists('username', $values))\n        {\n            throw new \\SimpleUserUpdateException('Username cannot be changed.', 5);\n        }\n        if (array_key_exists('password', $values))\n        {\n            if (empty($values['old_password'])\n                or $current_values->get('password') != $this->hash_password(trim($values['old_password'])))\n            {\n                throw new \\SimpleUserWrongPassword('Old password is invalid');\n            }\n\n            $password = trim(strval($values['password']));\n            if ($password === '')\n            {\n                throw new \\SimpleUserUpdateException('Password can\\'t be empty.', 6);\n            }\n            $update['password'] = $this->hash_password($password);\n            unset($values['password']);\n        }\n        if (array_key_exists('old_password', $values))\n        {\n            unset($values['old_password']);\n        }\n        if (array_key_exists('email', $values))\n        {\n            $email = filter_var(trim($values['email']), FILTER_VALIDATE_EMAIL);\n            if ( ! $email)\n            {\n                throw new \\SimpleUserUpdateException('Email address is not valid', 7);\n            }\n            $update['email'] = $email;\n            unset($values['email']);\n        }\n        if (array_key_exists('group', $values))\n        {\n            if (is_numeric($values['group']))\n            {\n                $update['group'] = (int) $values['group'];\n            }\n            unset($values['group']);\n        }\n        if ( ! empty($values))\n        {\n            $profile_fields = @unserialize($current_values->get('profile_fields')) ?: array();\n            foreach ($values as $key => $val)\n            {\n                if ($val === null)\n                {\n                    unset($profile_fields[$key]);\n                }\n                else\n                {\n                    $profile_fields[$key] = $val;\n                }\n            }\n            $update['profile_fields'] = serialize($profile_fields);\n        }\n\n        $update['updated_at'] = \\Date::forge()->get_timestamp();\n\n        $affected_rows = \\DB::update(\\Config::get('simpleauth.table_name'))\n            ->set($update)\n            ->where('username', '=', $username)\n            ->execute(\\Config::get('simpleauth.db_connection'));\n\n        // Refresh user\n        if ($this->user['username'] == $username)\n        {\n            $this->user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n                ->where('username', '=', $username)\n                ->from(\\Config::get('simpleauth.table_name'))\n                ->execute(\\Config::get('simpleauth.db_connection'))->current();\n        }\n\n        return $affected_rows > 0;\n    }\n\n\n\nnamespace\u306e\u6c7a\u5b9a\nnamespace Auth;\n\nnamespace CustomAuth;\n\n\nclass \u306e\u7d99\u627f\u5143\u5909\u66f4\nclass Auth_Login_Simpleauth extends \\Auth_Login_Driver\n\nclass Auth_Login_Simpleauth extends \\Auth\\Auth_Login_Simpleauth\n\n\nbootstrap.php\u306e\u4fee\u6b63\n\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b\u3002\npackages\u00a5auth\u00a5bootstrap.php\n<?php\n/**\n * Fuel\n *\n * Fuel is a fast, lightweight, community driven PHP5 framework.\n *\n * @package    Fuel\n * @version    1.7\n * @author     Fuel Development Team\n * @license    MIT License\n * @copyright  2010 - 2015 Fuel Development Team\n * @link       http://fuelphp.com\n */\n\n\\Autoloader::add_core_namespace('Auth');\n\n\\Autoloader::add_classes(array(\n    'Auth\\\\Auth'                        => __DIR__.'/classes/auth.php',\n    'Auth\\\\AuthException'               => __DIR__.'/classes/auth.php',\n\n    'Auth\\\\Auth_Driver'                 => __DIR__.'/classes/auth/driver.php',\n\n    'Auth\\\\Auth_Opauth'                 => __DIR__.'/classes/auth/opauth.php',\n\n    'Auth\\\\Auth_Acl_Driver'             => __DIR__.'/classes/auth/acl/driver.php',\n    'Auth\\\\Auth_Acl_Simpleacl'          => __DIR__.'/classes/auth/acl/simpleacl.php',\n    'Auth\\\\Auth_Acl_Ormacl'             => __DIR__.'/classes/auth/acl/ormacl.php',\n\n    'Auth\\\\Auth_Group_Driver'           => __DIR__.'/classes/auth/group/driver.php',\n    'Auth\\\\Auth_Group_Simplegroup'      => __DIR__.'/classes/auth/group/simplegroup.php',\n    'Auth\\\\Auth_Group_Ormgroup'         => __DIR__.'/classes/auth/group/ormgroup.php',\n\n    'Auth\\\\Auth_Login_Driver'           => __DIR__.'/classes/auth/login/driver.php',\n    'Auth\\\\Auth_Login_Simpleauth'       => __DIR__.'/classes/auth/login/simpleauth.php',\n    'Auth\\\\Auth_Login_Ormauth'          => __DIR__.'/classes/auth/login/ormauth.php',\n\n    'Auth\\\\SimpleUserUpdateException'   => __DIR__.'/classes/auth/exceptions.php',\n    'Auth\\\\SimpleUserWrongPassword'     => __DIR__.'/classes/auth/exceptions.php',\n    'Auth\\\\OpauthException'             => __DIR__.'/classes/auth/exceptions.php',\n\n    'Auth\\\\Model\\\\Auth_User'            => __DIR__.'/classes/model/auth/user.php',\n    'Auth\\\\Model\\\\Auth_Userpermission'  => __DIR__.'/classes/model/auth/userpermission.php',\n    'Auth\\\\Model\\\\Auth_Metadata'        => __DIR__.'/classes/model/auth/metadata.php',\n    'Auth\\\\Model\\\\Auth_Group'           => __DIR__.'/classes/model/auth/group.php',\n    'Auth\\\\Model\\\\Auth_Grouppermission' => __DIR__.'/classes/model/auth/grouppermission.php',\n    'Auth\\\\Model\\\\Auth_Role'            => __DIR__.'/classes/model/auth/role.php',\n    'Auth\\\\Model\\\\Auth_Rolepermission'  => __DIR__.'/classes/model/auth/rolepermission.php',\n    'Auth\\\\Model\\\\Auth_Permission'      => __DIR__.'/classes/model/auth/permission.php',\n    'Auth\\\\Model\\\\Auth_Provider'        => __DIR__.'/classes/model/auth/provider.php',\n));\n\n\n<?php\n\n\\Autoloader::add_core_namespace('CustomAuth');\n\n\\Autoloader::add_classes(array(\n    'CustomAuth\\\\Auth_Login_Simpleauth'       => __DIR__.'/classes/auth/login/simpleauth.php',\n));\n\n\n\n\u7d50\u69cb\u3044\u308d\u3044\u308d\u76f4\u3057\u305f\u306a\u3041\u30fb\u30fb\u30fb\n\u4e0a\u8a18\u3067\u52d5\u304f\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6ce8\u610f\n\n\u4e0a\u8a18\u4fee\u6b63\u306f\u4e00\u8cab\u3057\u3066\u30bd\u30fc\u30b9\u5468\u308a\u3060\u3051\u3067\u3059\u3002\nmigration\u30d5\u30a1\u30a4\u30eb\u3067DB\u4f5c\u6210\u3092\u884c\u3063\u3066\u3044\u308b\u5834\u5408\u3001email\u306bUK,NN\u5236\u7d04\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u3067\u5916\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\n\nGitHub Link\nhttps://github.com/unagiya/FuelPHP_1_7_CustomAuth\nhttps://github.com/bikun-bikun/FuelPHP_1_7_CustomAuth\n\n2015-12-14\u8ffd\u8a18\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001config\u304b\u3089\u8a72\u5f53\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u3067\u3057\u305f\u3002\n\nconfig.php\u304b\u3089\u4f5c\u6210\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u3081\u308b\u3088\u3046\u306b\u4fee\u6b63\n\u4fee\u6b63\u3059\u308b\u30d5\u30a1\u30a4\u30eb\nfuel\\app\\config\\config.php\n\nconfig.php\u4fee\u6b63\u524d\n        'packages'  => array(\n            'auth',\n            'parser',\n            'orm',\n            'less',\n        ),\n\n\n\n\nconfig.php\u4fee\u6b63\u5f8c\n        'packages'  => array(\n            'auth',\n            'parser',\n            'orm',\n            'less',\n            'customauth',\n        ),\n\n\n\n# 1. \u524d\u63d0\n1. FuelPHP 1.7\n2. SimpleAuth\u3092\u5229\u7528\n3. \u30e6\u30fc\u30b6\u4f5c\u6210\u3092SimpleAuth \u306b\u307e\u304b\u305b\u3066\u3044\u308b\u3002\n\n# 2. \u3069\u3046\u5b9f\u88c5\u3057\u3088\u3046\uff1f\n1. auth\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u3092\u76f4\u63a5\u7de8\u96c6\n2. auth\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u62e1\u5f35\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3092\u5229\u7528\n\n\uff12\uff0e\u306e\u65b9\u304c\u5f8c\u3005\u697d\u305d\u3046\u3002\n\n# 3. \u305d\u3082\u305d\u3082\u306a\u305cEmail\u306e\u5fc5\u9808\u3092\u5916\u3059\u306e\u304b\uff1f\n\u7406\u7531\u306f\u3044\u308d\u3044\u308d\u3068\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u793e\u5185\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u306b\u3042\u305f\u308a\u3001\u767b\u9332\u4e88\u5b9a\u306e\u30e6\u30fc\u30b6\u306e\u4e2d\u306b\u793e\u5185\u30e1\u30fc\u30eb\u306e\u5272\u5f53\u304c\u306a\u3044\u3068\u304b\u3001\u7279\u5b9a\u30e6\u30fc\u30b6\u90e1\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30e1\u30fc\u30ea\u30b9\u306b\u3057\u3066\u767b\u9332\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u3068\u304b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# 4. \u7528\u610f\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002\n\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u304c\u6094\u3084\u307e\u308c\u308b\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4e0b\u8a18\u306b\u914d\u7f6e\u3059\u308b\u3002\n`packages\u00a5customauth`\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306f\u3053\u3093\u306a\u611f\u3058\n\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092auth\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3089\u30b3\u30d4\u30fc\n\n```\u30b3\u30d4\u30fc\u5143\npackages\u00a5auth\u00a5classes\u00a5login\u00a5simpleauth.php\npackages\u00a5auth\u00a5bootstrap.php\n```\n\n\u30b3\u30d4\u30fc\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\n\n``` dir\n- packages\n\t\u2517 customauth\n\t\t\u2517 classes\n\t\t\t\u2517 auth\n\t\t\t\t\u2517 login\n\t\t\t\t\tsimpleauth.php\n\t\t\tbootstrap.php\n```\n\n# 5. \u4e2d\u8eab\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\u30b3\u30d4\u30fc\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8210\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u30e6\u30fc\u30b6\u4f5c\u6210\u30e1\u30bd\u30c3\u30c9\n`packages\u00a5customauth\u00a5classes\u00a5login\u00a5simpleauth.php`\u5185\u306e\u30fb\u30fb\u30fb\n\u3053\u306e\u8fba\u304c\u3042\u3084\u3057\u3044\u30fb\u30fb\u30fb\u3068\u3044\u3046\u304b\u307e\u3093\u307e\u3060\uff01\n\n\u7de8\u96c6\u524d\n\n``` php\n\n\t/**\n\t * Create new user\n\t *\n\t * @param   string\n\t * @param   string\n\t * @param   string  must contain valid email address\n\t * @param   int     group id\n\t * @param   Array\n\t * @return  bool\n\t */\n\tpublic function create_user($username, $password, $email, $group = 1, Array $profile_fields = array())\n\t{\n\t\t$password = trim($password);\n\t\t$email = filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n\n\t\tif (empty($username) or empty($password) or empty($email))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username, password or email address is not given, or email address is invalid', 1);\n\t\t}\n\n\t\t$same_users = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where('username', '=', $username)\n\t\t\t->or_where('email', '=', $email)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\tif ($same_users->count() > 0)\n\t\t{\n\t\t\tif (in_array(strtolower($email), array_map('strtolower', $same_users->current())))\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Email address already exists', 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Username already exists', 3);\n\t\t\t}\n\t\t}\n\n\t\t$user = array(\n\t\t\t'username'        => (string) $username,\n\t\t\t'password'        => $this->hash_password((string) $password),\n\t\t\t'email'           => $email,\n\t\t\t'group'           => (int) $group,\n\t\t\t'profile_fields'  => serialize($profile_fields),\n\t\t\t'last_login'      => 0,\n\t\t\t'login_hash'      => '',\n\t\t\t'created_at'      => \\Date::forge()->get_timestamp(),\n\t\t);\n\t\t$result = \\DB::insert(\\Config::get('simpleauth.table_name'))\n\t\t\t->set($user)\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\treturn ($result[1] > 0) ? $result[0] : false;\n\t}\n\n\n```\n\n\u4e0a\u8a18\u30bd\u30fc\u30b9\u3092\u4e0b\u8a18\u306b\u6539\u5b9a\u3002\n\n``` php\n\n\t/**\n\t * Create new user\n\t *\n\t * @param   string\n\t * @param   string\n\t * @param   string\n\t * @param   int     group id\n\t * @param   Array\n\t * @return  bool\n\t */\n\tpublic function create_user($username, $password, $email = null, $group = 1, Array $profile_fields = array())\n\t{\n\t\t$password = trim($password);\n\n\t\tif(!empty($email))\n\t\t{\n\t\t\t$email = filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n\t\t\tif(empty($email))\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('email\u306e\u5f62\u5f0f\u304c\u4e0d\u6b63\u3067\u3059\u3002', 1);\n\t\t\t}\n\t\t}\n\n\t\tif (empty($username) or empty($password))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username, password is not given, or email address is invalid', 1);\n\t\t}\n\n\t\t$same_users = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where('username', '=', $username)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\tif ($same_users->count() > 0)\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username already exists', 3);\n\t\t}\n\n\t\t$user = array(\n\t\t\t'username'        => (string) $username,\n\t\t\t'password'        => $this->hash_password((string) $password),\n\t\t\t'email'           => $email,\n\t\t\t'group'           => (int) $group,\n\t\t\t'profile_fields'  => serialize($profile_fields),\n\t\t\t'last_login'      => 0,\n\t\t\t'login_hash'      => '',\n\t\t\t'created_at'      => \\Date::forge()->get_timestamp(),\n\t\t);\n\t\t$result = \\DB::insert(\\Config::get('simpleauth.table_name'))\n\t\t\t->set($user)\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\treturn ($result[1] > 0) ? $result[0] : false;\n\t}\n\n\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3002\n\n## \u30ed\u30b0\u30a4\u30f3\u30c1\u30a7\u30c3\u30af\n\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u30e6\u30fc\u30b6\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u767a\u898b\u3057\u305f\u306e\u3067\u3053\u308c\u3082email\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3057\u3066\u304a\u304f\u3002\n\n``` \u4fee\u6b63\u524dphp\n\t/**\n\t * Check the user exists\n\t *\n\t * @return  bool\n\t */\n\tpublic function validate_user($username_or_email = '', $password = '')\n\t{\n\t\t$username_or_email = trim($username_or_email) ?: trim(\\Input::post(\\Config::get('simpleauth.username_post_key', 'username')));\n\t\t$password = trim($password) ?: trim(\\Input::post(\\Config::get('simpleauth.password_post_key', 'password')));\n\n\t\tif (empty($username_or_email) or empty($password))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$password = $this->hash_password($password);\n\t\t$user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where_open()\n\t\t\t->where('username', '=', $username_or_email)\n\t\t\t->or_where('email', '=', $username_or_email)\n\t\t\t->where_close()\n\t\t\t->where('password', '=', $password)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'))->current();\n\n\t\treturn $user ?: false;\n\t}\n```\n\nemail\u5468\u308a\u3092\u3054\u3063\u305d\u308a\u524a\u9664\n\n``` \u4fee\u6b63\u5f8cphp\n\t/**\n\t * Check the user exists\n\t *\n\t * @return  bool\n\t */\n\tpublic function validate_user($username = '', $password = '')\n\t{\n\t\t$username = trim($username) ?: trim(\\Input::post(\\Config::get('simpleauth.username_post_key', 'username')));\n\t\t$password = trim($password) ?: trim(\\Input::post(\\Config::get('simpleauth.password_post_key', 'password')));\n\n\t\tif (empty($username) or empty($password))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$password = $this->hash_password($password);\n\t\t$user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where_open()\n\t\t\t->where('username', '=', $username)\n\t\t\t->where_close()\n\t\t\t->where('password', '=', $password)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'))->current();\n\n\t\treturn $user ?: false;\n\t}\n```\n\n## \u30ed\u30b0\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\n\u91cd\u8981\u3058\u3083\u306a\u3044\u3051\u3069\u5909\u6570\u540d\u306b\u9055\u548c\u611f\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u4fee\u6b63\u3057\u3066\u304a\u304f\u3002\n\n``` \u4fee\u6b63\u524dphp\n\t/**\n\t * Login user\n\t *\n\t * @param   string\n\t * @param   string\n\t * @return  bool\n\t */\n\tpublic function login($username_or_email = '', $password = '')\n\t{\n\t\tif ( ! ($this->user = $this->validate_user($username_or_email, $password)))\n\t\t{\n\t\t\t$this->user = \\Config::get('simpleauth.guest_login', true) ? static::$guest_login : false;\n\t\t\t\\Session::delete('username');\n\t\t\t\\Session::delete('login_hash');\n\t\t\treturn false;\n\t\t}\n\n\t\t// register so Auth::logout() can find us\n\t\tAuth::_register_verified($this);\n\n\t\t\\Session::set('username', $this->user['username']);\n\t\t\\Session::set('login_hash', $this->create_login_hash());\n\t\t\\Session::instance()->rotate();\n\t\treturn true;\n\t}\n\n```\n\n``` \u4fee\u6b63\u5f8cphp\n\t/**\n\t * Login user\n\t *\n\t * @param   string\n\t * @param   string\n\t * @return  bool\n\t */\n\tpublic function login($username = '', $password = '')\n\t{\n\t\tif ( ! ($this->user = $this->validate_user($username, $password)))\n\t\t{\n\t\t\t$this->user = \\Config::get('simpleauth.guest_login', true) ? static::$guest_login : false;\n\t\t\t\\Session::delete('username');\n\t\t\t\\Session::delete('login_hash');\n\t\t\treturn false;\n\t\t}\n\n\t\t// register so Auth::logout() can find us\n\t\tAuth::_register_verified($this);\n\n\t\t\\Session::set('username', $this->user['username']);\n\t\t\\Session::set('login_hash', $this->create_login_hash());\n\t\t\\Session::instance()->rotate();\n\t\treturn true;\n\t}\n\n```\n\n## \u30e6\u30fc\u30b6\u60c5\u5831\u66f4\u65b0\u30e1\u30bd\u30c3\u30c9\n\u3053\u3044\u3064\u3082email\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3068\u304b\u3057\u3066\u308b\u306e\u3067\u4fee\u6b63\u304c\u5fc5\u8981\u3002\n\n``` \u4fee\u6b63\u524dphp\n\t/**\n\t * Update a user's properties\n\t * Note: Username cannot be updated, to update password the old password must be passed as old_password\n\t *\n\t * @param   Array  properties to be updated including profile fields\n\t * @param   string\n\t * @return  bool\n\t */\n\tpublic function update_user($values, $username = null)\n\t{\n\t\t$username = $username ?: $this->user['username'];\n\t\t$current_values = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where('username', '=', $username)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\tif (empty($current_values))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username not found', 4);\n\t\t}\n\n\t\t$update = array();\n\t\tif (array_key_exists('username', $values))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username cannot be changed.', 5);\n\t\t}\n\t\tif (array_key_exists('password', $values))\n\t\t{\n\t\t\tif (empty($values['old_password'])\n\t\t\t\tor $current_values->get('password') != $this->hash_password(trim($values['old_password'])))\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserWrongPassword('Old password is invalid');\n\t\t\t}\n\n\t\t\t$password = trim(strval($values['password']));\n\t\t\tif ($password === '')\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Password can\\'t be empty.', 6);\n\t\t\t}\n\t\t\t$update['password'] = $this->hash_password($password);\n\t\t\tunset($values['password']);\n\t\t}\n\t\tif (array_key_exists('old_password', $values))\n\t\t{\n\t\t\tunset($values['old_password']);\n\t\t}\n\t\tif (array_key_exists('email', $values))\n\t\t{\n\t\t\t$email = filter_var(trim($values['email']), FILTER_VALIDATE_EMAIL);\n\t\t\tif ( ! $email)\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Email address is not valid', 7);\n\t\t\t}\n\t\t\t$matches = \\DB::select()\n\t\t\t\t->where('email', '=', $email)\n\t\t\t\t->where('id', '!=', $current_values[0]['id'])\n\t\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\t\t\tif (count($matches))\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Email address is already in use', 11);\n\t\t\t}\n\t\t\t$update['email'] = $email;\n\t\t\tunset($values['email']);\n\t\t}\n\t\tif (array_key_exists('group', $values))\n\t\t{\n\t\t\tif (is_numeric($values['group']))\n\t\t\t{\n\t\t\t\t$update['group'] = (int) $values['group'];\n\t\t\t}\n\t\t\tunset($values['group']);\n\t\t}\n\t\tif ( ! empty($values))\n\t\t{\n\t\t\t$profile_fields = @unserialize($current_values->get('profile_fields')) ?: array();\n\t\t\tforeach ($values as $key => $val)\n\t\t\t{\n\t\t\t\tif ($val === null)\n\t\t\t\t{\n\t\t\t\t\tunset($profile_fields[$key]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$profile_fields[$key] = $val;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$update['profile_fields'] = serialize($profile_fields);\n\t\t}\n\n\t\t$update['updated_at'] = \\Date::forge()->get_timestamp();\n\n\t\t$affected_rows = \\DB::update(\\Config::get('simpleauth.table_name'))\n\t\t\t->set($update)\n\t\t\t->where('username', '=', $username)\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\t// Refresh user\n\t\tif ($this->user['username'] == $username)\n\t\t{\n\t\t\t$this->user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t\t->where('username', '=', $username)\n\t\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t\t->execute(\\Config::get('simpleauth.db_connection'))->current();\n\t\t}\n\n\t\treturn $affected_rows > 0;\n\t}\n\n```\n\n``` \u4fee\u6b63\u5f8cphp\n\t/**\n\t * Update a user's properties\n\t * Note: Username cannot be updated, to update password the old password must be passed as old_password\n\t *\n\t * @param   Array  properties to be updated including profile fields\n\t * @param   string\n\t * @return  bool\n\t */\n\tpublic function update_user($values, $username = null)\n\t{\n\t\t$username = $username ?: $this->user['username'];\n\t\t$current_values = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t->where('username', '=', $username)\n\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\tif (empty($current_values))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username not found', 4);\n\t\t}\n\n\t\t$update = array();\n\t\tif (array_key_exists('username', $values))\n\t\t{\n\t\t\tthrow new \\SimpleUserUpdateException('Username cannot be changed.', 5);\n\t\t}\n\t\tif (array_key_exists('password', $values))\n\t\t{\n\t\t\tif (empty($values['old_password'])\n\t\t\t\tor $current_values->get('password') != $this->hash_password(trim($values['old_password'])))\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserWrongPassword('Old password is invalid');\n\t\t\t}\n\n\t\t\t$password = trim(strval($values['password']));\n\t\t\tif ($password === '')\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Password can\\'t be empty.', 6);\n\t\t\t}\n\t\t\t$update['password'] = $this->hash_password($password);\n\t\t\tunset($values['password']);\n\t\t}\n\t\tif (array_key_exists('old_password', $values))\n\t\t{\n\t\t\tunset($values['old_password']);\n\t\t}\n\t\tif (array_key_exists('email', $values))\n\t\t{\n\t\t\t$email = filter_var(trim($values['email']), FILTER_VALIDATE_EMAIL);\n\t\t\tif ( ! $email)\n\t\t\t{\n\t\t\t\tthrow new \\SimpleUserUpdateException('Email address is not valid', 7);\n\t\t\t}\n\t\t\t$update['email'] = $email;\n\t\t\tunset($values['email']);\n\t\t}\n\t\tif (array_key_exists('group', $values))\n\t\t{\n\t\t\tif (is_numeric($values['group']))\n\t\t\t{\n\t\t\t\t$update['group'] = (int) $values['group'];\n\t\t\t}\n\t\t\tunset($values['group']);\n\t\t}\n\t\tif ( ! empty($values))\n\t\t{\n\t\t\t$profile_fields = @unserialize($current_values->get('profile_fields')) ?: array();\n\t\t\tforeach ($values as $key => $val)\n\t\t\t{\n\t\t\t\tif ($val === null)\n\t\t\t\t{\n\t\t\t\t\tunset($profile_fields[$key]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$profile_fields[$key] = $val;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$update['profile_fields'] = serialize($profile_fields);\n\t\t}\n\n\t\t$update['updated_at'] = \\Date::forge()->get_timestamp();\n\n\t\t$affected_rows = \\DB::update(\\Config::get('simpleauth.table_name'))\n\t\t\t->set($update)\n\t\t\t->where('username', '=', $username)\n\t\t\t->execute(\\Config::get('simpleauth.db_connection'));\n\n\t\t// Refresh user\n\t\tif ($this->user['username'] == $username)\n\t\t{\n\t\t\t$this->user = \\DB::select_array(\\Config::get('simpleauth.table_columns', array('*')))\n\t\t\t\t->where('username', '=', $username)\n\t\t\t\t->from(\\Config::get('simpleauth.table_name'))\n\t\t\t\t->execute(\\Config::get('simpleauth.db_connection'))->current();\n\t\t}\n\n\t\treturn $affected_rows > 0;\n\t}\n\n```\n\n## namespace\u306e\u6c7a\u5b9a\n\n\n``` \u4fee\u6b63\u524dphp\nnamespace Auth;\n```\n\n``` \u4fee\u6b63\u5f8cphp\nnamespace CustomAuth;\n```\n\n## class \u306e\u7d99\u627f\u5143\u5909\u66f4\n\n``` \u4fee\u6b63\u524dphp\nclass Auth_Login_Simpleauth extends \\Auth_Login_Driver\n```\n\n``` \u4fee\u6b63\u5f8cphp\nclass Auth_Login_Simpleauth extends \\Auth\\Auth_Login_Simpleauth\n```\n\n## bootstrap.php\u306e\u4fee\u6b63\n\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b\u3002\n`packages\u00a5auth\u00a5bootstrap.php`\n\n``` \u4fee\u6b63\u524dphp\n<?php\n/**\n * Fuel\n *\n * Fuel is a fast, lightweight, community driven PHP5 framework.\n *\n * @package    Fuel\n * @version    1.7\n * @author     Fuel Development Team\n * @license    MIT License\n * @copyright  2010 - 2015 Fuel Development Team\n * @link       http://fuelphp.com\n */\n\n\\Autoloader::add_core_namespace('Auth');\n\n\\Autoloader::add_classes(array(\n\t'Auth\\\\Auth'                        => __DIR__.'/classes/auth.php',\n\t'Auth\\\\AuthException'               => __DIR__.'/classes/auth.php',\n\n\t'Auth\\\\Auth_Driver'                 => __DIR__.'/classes/auth/driver.php',\n\n\t'Auth\\\\Auth_Opauth'                 => __DIR__.'/classes/auth/opauth.php',\n\n\t'Auth\\\\Auth_Acl_Driver'             => __DIR__.'/classes/auth/acl/driver.php',\n\t'Auth\\\\Auth_Acl_Simpleacl'          => __DIR__.'/classes/auth/acl/simpleacl.php',\n\t'Auth\\\\Auth_Acl_Ormacl'             => __DIR__.'/classes/auth/acl/ormacl.php',\n\n\t'Auth\\\\Auth_Group_Driver'           => __DIR__.'/classes/auth/group/driver.php',\n\t'Auth\\\\Auth_Group_Simplegroup'      => __DIR__.'/classes/auth/group/simplegroup.php',\n\t'Auth\\\\Auth_Group_Ormgroup'         => __DIR__.'/classes/auth/group/ormgroup.php',\n\n\t'Auth\\\\Auth_Login_Driver'           => __DIR__.'/classes/auth/login/driver.php',\n\t'Auth\\\\Auth_Login_Simpleauth'       => __DIR__.'/classes/auth/login/simpleauth.php',\n\t'Auth\\\\Auth_Login_Ormauth'          => __DIR__.'/classes/auth/login/ormauth.php',\n\n\t'Auth\\\\SimpleUserUpdateException'   => __DIR__.'/classes/auth/exceptions.php',\n\t'Auth\\\\SimpleUserWrongPassword'     => __DIR__.'/classes/auth/exceptions.php',\n\t'Auth\\\\OpauthException'             => __DIR__.'/classes/auth/exceptions.php',\n\n\t'Auth\\\\Model\\\\Auth_User'            => __DIR__.'/classes/model/auth/user.php',\n\t'Auth\\\\Model\\\\Auth_Userpermission'  => __DIR__.'/classes/model/auth/userpermission.php',\n\t'Auth\\\\Model\\\\Auth_Metadata'        => __DIR__.'/classes/model/auth/metadata.php',\n\t'Auth\\\\Model\\\\Auth_Group'           => __DIR__.'/classes/model/auth/group.php',\n\t'Auth\\\\Model\\\\Auth_Grouppermission' => __DIR__.'/classes/model/auth/grouppermission.php',\n\t'Auth\\\\Model\\\\Auth_Role'            => __DIR__.'/classes/model/auth/role.php',\n\t'Auth\\\\Model\\\\Auth_Rolepermission'  => __DIR__.'/classes/model/auth/rolepermission.php',\n\t'Auth\\\\Model\\\\Auth_Permission'      => __DIR__.'/classes/model/auth/permission.php',\n\t'Auth\\\\Model\\\\Auth_Provider'        => __DIR__.'/classes/model/auth/provider.php',\n));\n\n```\n\n``` \u4fee\u6b63\u5f8cphp\n<?php\n\n\\Autoloader::add_core_namespace('CustomAuth');\n\n\\Autoloader::add_classes(array(\n\t'CustomAuth\\\\Auth_Login_Simpleauth'       => __DIR__.'/classes/auth/login/simpleauth.php',\n));\n\n```\n\n# \u7d50\u69cb\u3044\u308d\u3044\u308d\u76f4\u3057\u305f\u306a\u3041\u30fb\u30fb\u30fb\n\u4e0a\u8a18\u3067\u52d5\u304f\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# *\u6ce8\u610f*\n\u4e0a\u8a18\u4fee\u6b63\u306f\u4e00\u8cab\u3057\u3066\u30bd\u30fc\u30b9\u5468\u308a\u3060\u3051\u3067\u3059\u3002\nmigration\u30d5\u30a1\u30a4\u30eb\u3067DB\u4f5c\u6210\u3092\u884c\u3063\u3066\u3044\u308b\u5834\u5408\u3001email\u306bUK,NN\u5236\u7d04\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u3067\u5916\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\n\n# GitHub Link\n~~https://github.com/unagiya/FuelPHP_1_7_CustomAuth~~\nhttps://github.com/bikun-bikun/FuelPHP_1_7_CustomAuth\n\n# 2015-12-14\u8ffd\u8a18\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u8ffd\u52a0\u3057\u305f\u306e\u3067\u3001config\u304b\u3089\u8a72\u5f53\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u3067\u3057\u305f\u3002\n\n## config.php\u304b\u3089\u4f5c\u6210\u3057\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u3081\u308b\u3088\u3046\u306b\u4fee\u6b63\n\u4fee\u6b63\u3059\u308b\u30d5\u30a1\u30a4\u30eb\n`fuel\\app\\config\\config.php`\n\n``` config.php\u4fee\u6b63\u524d\n\t\t'packages'  => array(\n\t\t\t'auth',\n\t\t\t'parser',\n\t\t \t'orm',\n\t\t\t'less',\n\t\t),\n\n```\n\n``` config.php\u4fee\u6b63\u5f8c\n\t\t'packages'  => array(\n\t\t\t'auth',\n\t\t\t'parser',\n\t\t \t'orm',\n\t\t\t'less',\n            'customauth',\n\t\t),\n\n```\n", "tags": ["FuelPHP", "PHP"]}