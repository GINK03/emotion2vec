{"context": " More than 1 year has passed since last update.\n\nAkka-Stream\u5b66\u7fd2\u30b7\u30ea\u30fc\u30ba\n\n\u89e6\u3063\u3066\u307f\u305f\nMat\u3063\u3066\u4f55\uff1f\n\n\nSource,Flow,Sink\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u307f\u308b\nSource\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff12\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306f\u3053\u306eSource\u304b\u3089\u51fa\u3066\u3044\u304fOutput\u306e\u578b\u3001\u3082\u3046\uff11\u3064\u306fMat\u3002\n\nSink\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff12\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306f\u3053\u306eSink\u306b\u5165\u3063\u3066\u304f\u308bInput\u306e\u578b\u3002\u3082\u3046\uff11\u3064\u306fMat\u3002\n\nFlow\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff13\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306fInput\u306e\u578b\u3001\u3082\u3046\uff11\u3064\u306fOutput\u306e\u578b\u3002\u3082\u3046\uff11\u3064\u306fMat\u3002\n\n\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3067\u304d\u308bRunnableGraph\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff11\u3064\u53d6\u308a\u3001Mat\u3002\n\nMat\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3084\u3053\u3053\u306b\u8aac\u660e\u3042\u308a\u3002\n\nRemember those mysterious Mat type parameters on Source[+Out, +Mat], Flow[-In, +Out, +Mat] and Sink[-In, +Mat]? They represent the type of values these processing parts return when materialized. When you chain these together, you can explicitly combine their materialized values\n\n\u5206\u304b\u3063\u305f\u3088\u3046\u306a\u308f\u304b\u3089\u306a\u3044\u3088\u3046\u306a\u3002\n\u5177\u4f53\u7684\u306a\u4f8b\u304c\u6b32\u3057\u3044\u3002\n\n\u4f8b\n\nSink\u306eMat\u4f8b\n\u307e\u305a\u306fSink\u306eMat\u578b\u3092\u53d6\u308b\u4f8b\u3002\nval foldSink: Sink[Int, Future[String]] = Sink.fold(\"\"){ _ + _.toString }\nval result: Future[String] = Source(1 to 10).runWith(foldSink)\n\n\u3053\u306e\u4f8b\u306e\u5834\u5408\u306fSink\u3078\u306eInput\u578b\u306fInt\u3060\u304c\u3001Mat\u578b\u306fSink\u3067\u306e\u96c6\u8a08\u51e6\u7406\u3092\u3057\u305f\u7d50\u679c\u306eString\u578b\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\nSource\u306eMat\u4f8b\nval source: Source[Int, ActorRef] = Source.actorPublisher[Int](Props[SampleActor])\nval rg: RunnableGraph[ActorRef] = source.to(Sink.foreach(println))\nval actor = rg.run()\n\nThread.sleep(1000) // \u8abf\u6574\u306e\u305f\u3081\u306esleep\n\nactor ! Message(1)\nactor ! Message(2)\nactor ! Message(3)\nactor ! END\n\n\u3061\u306a\u307f\u306bActor\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3002\ncase class Message(n: Int)\ncase object END\n\nclass SampleActor extends ActorPublisher[Int] {\n  def receive = {\n    case Message(n) => onNext(n)\n    case END => onComplete() // \u203b\u3061\u3083\u3093\u3068\u7d42\u4e86\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u3089\u306a\u3044\u3068fold\u306e\u3088\u3046\u306a\u51e6\u7406\u304cDownstream\u306b\u3044\u305f\u5834\u5408\u3001\u3069\u3053\u304c\u30c7\u30fc\u30bf\u306e\u7d42\u4e86\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066fold\u304c\u7d42\u308f\u3089\u306a\u304f\u306a\u308b\n  }\n}\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001Source\u304b\u3089\u306eOutput\u306fInt\u578b\u3001Mat\u306fActorRef\u578b\u3002\nActor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u542b\u307e\u308c\u308b\u6570\u5b57\u304cOutput\u3068\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u308c\u3066\u3044\u304f\u3002\n\nSource\u3068Sink\u306bMat\u304c\u3042\u308b\u5834\u5408\u306f\uff1f\n\u4e0a\u8a18\u4f8b\u306e\u3088\u3046\u306bSource\u306b\u3082Sink\u306b\u3082\u305d\u308c\u305e\u308cMat\u578b\u3092\u3082\u3064\u5834\u5408\u3001RunnableGraph\u3092run\u3057\u305f\u969b\u306b\u53d6\u308c\u308bMat\u306f\u3069\u3061\u3089\u306b\u306a\u308b\u3093\u3060\u308d\u3046\uff1f\n\u3069\u3061\u3089\u304b\u4e00\u65b9\u3001\u3067\u306f\u306a\u304f\u3066\u4e21\u65b9\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\nval source: Source[Int, ActorRef] = Source.actorPublisher[Int](Props[SampleActor])\nval sink: Sink[Int, Future[String]] = Sink.fold[String,Int](\"\"){ _ + _.toString }\n\nval rg: RunnableGraph[(ActorRef, Future[String])] = source.toMat(sink)(Keep.both)\n\nval (actor, result) = rg.run()\n\n\u4e00\u65b9\u3060\u3051\u306b\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u308b\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306fSource\u306e\u65b9\u306eMat\u3092\u4f7f\u3046\u3002\n\u203b\u4eca\u56de\u306e\u4f8b\u306e\u5834\u5408\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u3068fold\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u306a\u3044\u3002\nval rg: RunnableGraph[ActorRef] = source.toMat(sink)(Keep.left)\n\n\u4ee5\u4e0b\u306e\u4f8b\u306fSink\u306e\u65b9\u306eMat\u3092\u4f7f\u3046\u3002\n\u203b\u4eca\u56de\u306e\u4f8b\u306e\u5834\u5408\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u3068actor\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067\u4f55\u3082\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u306a\u3044\u3002\nval rg: RunnableGraph[Future[String]] = source.toMat(sink)(Keep.right)\n\n\n\u5b9f\u88c5\u3092\u8997\u304f\n\u3061\u306a\u307f\u306b source.to(sink) \u3068\u3057\u3066\u3044\u308bto\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\ndef to[Mat2](sink: Graph[SinkShape[Out], Mat2]): RunnableGraph[Mat] = toMat(sink)(Keep.left)\n\n\u304a\u304a\u3001toMat\u304cleft\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\u3064\u307e\u308a\u3053\u306e\u5834\u5408\u306fsink\u306eMat\u304c\u7121\u8996\u3055\u308c\u3066source\u306eMat\u304c\u63a1\u7528\u3055\u308c\u308b\u3002\n\u3053\u308c source.runWith(sink) \u306f\u3069\u3046\u3060\u308d\u3046\uff1f \ndef runWith[Mat2](sink: Graph[SinkShape[Out], Mat2])(implicit materializer: Materializer): Mat2 = toMat(sink)(Keep.right).run()\n\n\u304a\u304a\u3001\u3053\u3063\u3061\u306ftoMat\u304cright\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\u3067\u306f\u3067\u306f source.runForeach(println) \u3068\u304b source.runFold(\"\"){ _ + _.toString } \u306f\u3068\u3044\u3046\u3068\u3001\u3001\u3001\ndef runFold[U](zero: U)(f: (U, Out) \u21d2 U)(implicit materializer: Materializer): Future[U] =\n    runWith(Sink.fold(zero)(f))\n\ndef runForeach(f: Out \u21d2 Unit)(implicit materializer: Materializer): Future[Unit] = runWith(Sink.foreach(f))\n\n\u305d\u308c\u305e\u308crunWith\u306b\u59d4\u8b72\u3057\u3066\u3044\u308b\u3002\u3068\u3044\u3046\u3053\u3068\u306fright\u3060\u3002\n\u3053\u3053\u306b\u8272\u3093\u306a\u30b5\u30f3\u30d7\u30eb\u3042\u308a\n# Akka-Stream\u5b66\u7fd2\u30b7\u30ea\u30fc\u30ba\n- [\u89e6\u3063\u3066\u307f\u305f](http://qiita.com/mtoyoshi/items/52d0d87d0115be7741e9)\n- [Mat\u3063\u3066\u4f55\uff1f](http://qiita.com/mtoyoshi/items/d3a1dfac273a0ab98bc1)\n\n# Source,Flow,Sink\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u307f\u308b\nSource\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff12\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306f\u3053\u306eSource\u304b\u3089\u51fa\u3066\u3044\u304fOutput\u306e\u578b\u3001\u3082\u3046\uff11\u3064\u306fMat\u3002\n![source.png](https://qiita-image-store.s3.amazonaws.com/0/159/061a5555-eecb-d00d-b89b-b9cdbdf88b74.png)\n\nSink\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff12\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306f\u3053\u306eSink\u306b\u5165\u3063\u3066\u304f\u308bInput\u306e\u578b\u3002\u3082\u3046\uff11\u3064\u306fMat\u3002\n![sink.png](https://qiita-image-store.s3.amazonaws.com/0/159/8d41b64a-e10e-b38f-2fea-2950bacb02c8.png)\n\nFlow\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff13\u3064\u53d6\u308b\u3002\n\uff11\u3064\u306fInput\u306e\u578b\u3001\u3082\u3046\uff11\u3064\u306fOutput\u306e\u578b\u3002\u3082\u3046\uff11\u3064\u306fMat\u3002\n![flow.png](https://qiita-image-store.s3.amazonaws.com/0/159/798e16f6-9c8b-9d4f-339b-389c19d29657.png)\n\n\u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3067\u304d\u308bRunnableGraph\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\uff11\u3064\u53d6\u308a\u3001Mat\u3002\n![rg.png](https://qiita-image-store.s3.amazonaws.com/0/159/dcc3f854-f63e-4a1c-0f53-036aaec9cfbe.png)\n\n\nMat\u306b\u3064\u3044\u3066\u306f[\u3053\u3053](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-quickstart.html#materialized-values-quick-scala)\u3084[\u3053\u3053](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-flows-and-basics.html#Stream_Materialization)\u306b\u8aac\u660e\u3042\u308a\u3002\n\n> Remember those mysterious Mat type parameters on Source[+Out, +Mat], Flow[-In, +Out, +Mat] and Sink[-In, +Mat]? They represent the type of values these processing parts return when materialized. When you chain these together, you can explicitly combine their materialized values\n\n\u5206\u304b\u3063\u305f\u3088\u3046\u306a\u308f\u304b\u3089\u306a\u3044\u3088\u3046\u306a\u3002\n\u5177\u4f53\u7684\u306a\u4f8b\u304c\u6b32\u3057\u3044\u3002\n\n# \u4f8b\n\n## Sink\u306eMat\u4f8b\n\u307e\u305a\u306fSink\u306eMat\u578b\u3092\u53d6\u308b\u4f8b\u3002\n\n```scala\nval foldSink: Sink[Int, Future[String]] = Sink.fold(\"\"){ _ + _.toString }\nval result: Future[String] = Source(1 to 10).runWith(foldSink)\n```\n\n\u3053\u306e\u4f8b\u306e\u5834\u5408\u306fSink\u3078\u306eInput\u578b\u306fInt\u3060\u304c\u3001Mat\u578b\u306fSink\u3067\u306e\u96c6\u8a08\u51e6\u7406\u3092\u3057\u305f\u7d50\u679c\u306eString\u578b\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n## Source\u306eMat\u4f8b\n\n```scala\nval source: Source[Int, ActorRef] = Source.actorPublisher[Int](Props[SampleActor])\nval rg: RunnableGraph[ActorRef] = source.to(Sink.foreach(println))\nval actor = rg.run()\n\nThread.sleep(1000) // \u8abf\u6574\u306e\u305f\u3081\u306esleep\n\nactor ! Message(1)\nactor ! Message(2)\nactor ! Message(3)\nactor ! END\n```\n\n\u3061\u306a\u307f\u306bActor\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```scala\ncase class Message(n: Int)\ncase object END\n\nclass SampleActor extends ActorPublisher[Int] {\n  def receive = {\n    case Message(n) => onNext(n)\n    case END => onComplete() // \u203b\u3061\u3083\u3093\u3068\u7d42\u4e86\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u3089\u306a\u3044\u3068fold\u306e\u3088\u3046\u306a\u51e6\u7406\u304cDownstream\u306b\u3044\u305f\u5834\u5408\u3001\u3069\u3053\u304c\u30c7\u30fc\u30bf\u306e\u7d42\u4e86\u304b\u308f\u304b\u3089\u306a\u304f\u306a\u3063\u3066fold\u304c\u7d42\u308f\u3089\u306a\u304f\u306a\u308b\n  }\n}\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001Source\u304b\u3089\u306eOutput\u306fInt\u578b\u3001Mat\u306fActorRef\u578b\u3002\nActor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u542b\u307e\u308c\u308b\u6570\u5b57\u304cOutput\u3068\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u308c\u3066\u3044\u304f\u3002\n\n## Source\u3068Sink\u306bMat\u304c\u3042\u308b\u5834\u5408\u306f\uff1f\n\u4e0a\u8a18\u4f8b\u306e\u3088\u3046\u306bSource\u306b\u3082Sink\u306b\u3082\u305d\u308c\u305e\u308cMat\u578b\u3092\u3082\u3064\u5834\u5408\u3001RunnableGraph\u3092run\u3057\u305f\u969b\u306b\u53d6\u308c\u308bMat\u306f\u3069\u3061\u3089\u306b\u306a\u308b\u3093\u3060\u308d\u3046\uff1f\n\n\u3069\u3061\u3089\u304b\u4e00\u65b9\u3001\u3067\u306f\u306a\u304f\u3066\u4e21\u65b9\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n```scala\nval source: Source[Int, ActorRef] = Source.actorPublisher[Int](Props[SampleActor])\nval sink: Sink[Int, Future[String]] = Sink.fold[String,Int](\"\"){ _ + _.toString }\n  \nval rg: RunnableGraph[(ActorRef, Future[String])] = source.toMat(sink)(Keep.both)\n\nval (actor, result) = rg.run()\n```\n\n\u4e00\u65b9\u3060\u3051\u306b\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u308b\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306fSource\u306e\u65b9\u306eMat\u3092\u4f7f\u3046\u3002\n\u203b\u4eca\u56de\u306e\u4f8b\u306e\u5834\u5408\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u3068fold\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u306a\u3044\u3002\n\n```scala\nval rg: RunnableGraph[ActorRef] = source.toMat(sink)(Keep.left)\n```\n\n\u4ee5\u4e0b\u306e\u4f8b\u306fSink\u306e\u65b9\u306eMat\u3092\u4f7f\u3046\u3002\n\u203b\u4eca\u56de\u306e\u4f8b\u306e\u5834\u5408\u306f\u3053\u3046\u3057\u3066\u3057\u307e\u3046\u3068actor\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067\u4f55\u3082\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u306a\u3044\u3002\n\n```scala\nval rg: RunnableGraph[Future[String]] = source.toMat(sink)(Keep.right)\n```\n\n# \u5b9f\u88c5\u3092\u8997\u304f\n\n\u3061\u306a\u307f\u306b ```source.to(sink)``` \u3068\u3057\u3066\u3044\u308bto\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n```scala\ndef to[Mat2](sink: Graph[SinkShape[Out], Mat2]): RunnableGraph[Mat] = toMat(sink)(Keep.left)\n```\n\n\u304a\u304a\u3001toMat\u304cleft\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\u3064\u307e\u308a\u3053\u306e\u5834\u5408\u306fsink\u306eMat\u304c\u7121\u8996\u3055\u308c\u3066source\u306eMat\u304c\u63a1\u7528\u3055\u308c\u308b\u3002\n\n\u3053\u308c ```source.runWith(sink)``` \u306f\u3069\u3046\u3060\u308d\u3046\uff1f \n\n```scala\ndef runWith[Mat2](sink: Graph[SinkShape[Out], Mat2])(implicit materializer: Materializer): Mat2 = toMat(sink)(Keep.right).run()\n```\n\n\u304a\u304a\u3001\u3053\u3063\u3061\u306ftoMat\u304cright\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\n\u3067\u306f\u3067\u306f ```source.runForeach(println)``` \u3068\u304b ```source.runFold(\"\"){ _ + _.toString }``` \u306f\u3068\u3044\u3046\u3068\u3001\u3001\u3001\n\n```scala\ndef runFold[U](zero: U)(f: (U, Out) \u21d2 U)(implicit materializer: Materializer): Future[U] =\n    runWith(Sink.fold(zero)(f))\n\ndef runForeach(f: Out \u21d2 Unit)(implicit materializer: Materializer): Future[Unit] = runWith(Sink.foreach(f))\n```\n\n\u305d\u308c\u305e\u308crunWith\u306b\u59d4\u8b72\u3057\u3066\u3044\u308b\u3002\u3068\u3044\u3046\u3053\u3068\u306fright\u3060\u3002\n\n[\u3053\u3053\u306b\u8272\u3093\u306a\u30b5\u30f3\u30d7\u30eb\u3042\u308a](http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala/stream-flows-and-basics.html#Combining_materialized_values)\n", "tags": ["Scala", "Akka", "Akka-Stream"]}