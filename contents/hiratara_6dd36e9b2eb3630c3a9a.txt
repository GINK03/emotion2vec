{"context": " More than 1 year has passed since last update.Tick-Tack-Toe\u306e\u5224\u5b9a\u3092\u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3002\u3053\u308c\u306f\u306a\u3044\u306a\u30fc\u3063\u3066\u30b3\u30fc\u30c9\u3060\u3051\u3069\u4e00\u5fdc\u3002\n\nTickTackToe.pm\npackage TickTackToe;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw/solve/;\n\nour @LINES = (\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 6],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7],\n);\n\nsub contains {\n    my ($item, @list) = @_;\n    my %flags = map {$_ => 1} @list;\n    return $flags{$item};\n}\n\nsub solve($) {\n    my $input = shift;\n    my @nums = (split //, $input)[0 .. 8];\n\n    my $player = 0;\n    my @players = qw/o x/;\n\n    my %done;\n    my @slot = (-1) x @LINES;\n    my @slot_count = (0) x @LINES;\n    for my $n (@nums) {\n        return \"Foul : $players[!$player] won.\" if $done{$n}++;\n\n        for (0 .. $#LINES) {\n            next if $slot_count[$_] < 0;\n            next unless contains $n => @{$LINES[$_]};\n            if ($slot[$_] == ! $player) {\n                $slot_count[$_] = -1;\n            } else {\n                $slot[$_] = $player;\n                $slot_count[$_]++;\n                return \"$players[$player] won.\" if $slot_count[$_] >= 3;\n            }\n        }\n\n        $player = ! $player;\n    }\n\n    return \"Draw game.\";\n}\n\n1;\n\n\n\ntick_tack_toe.t\nuse strict;\nuse warnings;\nuse TickTackToe qw(solve);\nuse Test::More;\n\nwhile (<DATA>) {\n    tr/\\r\\n//d;\n    my ($no, $input, $output) = split /\\t/, $_, 3;\n    is +(solve $input), $output;\n}\n\ndone_testing;\n\n__END__\n1   79538246    x won.\n2   35497162193 x won.\n3   61978543    x won.\n4   254961323121    x won.\n5   6134278187  x won.\n6   4319581 Foul : x won.\n7   9625663381  Foul : x won.\n8   7975662 Foul : x won.\n9   2368799597  Foul : x won.\n10  18652368566 Foul : x won.\n11  965715  o won.\n12  38745796    o won.\n13  371929  o won.\n14  758698769   o won.\n15  42683953    o won.\n16  618843927   Foul : o won.\n17  36535224    Foul : o won.\n18  882973  Foul : o won.\n19  653675681   Foul : o won.\n20  9729934662  Foul : o won.\n21  972651483927    Draw game.\n22  5439126787  Draw game.\n23  142583697   Draw game.\n24  42198637563 Draw game.\n25  657391482   Draw game.\n\n\n\u3061\u3087\u3063\u3068\u76f4\u3057\u305f\u7248\u3002\u3067\u3082\u3044\u307e\u3044\u3061\u3002\n\nTickTackToe.pm\npackage TickTackToe;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw/solve/;\nour $SIZE = 3;\n\nsub lines($) {\n    my @lines;\n    for my $x (0 .. $SIZE - 1) {\n        push @lines, [map { $_ + $x * $SIZE } 0 .. $SIZE - 1];\n    }\n\n    for my $y (0 .. $SIZE - 1) {\n        push @lines, [map { $_ * $SIZE + $y } 0 .. $SIZE - 1];\n    }\n\n    push @lines, [map { $_ * $SIZE + $_ } 0 .. $SIZE - 1];\n    push @lines, [map { $_ * $SIZE + $SIZE - $_ - 1} 0 .. $SIZE - 1];\n\n    return @lines;\n}\n\nsub contains {\n    my ($item, @list) = @_;\n    my %flags = map {$_ => 1} @list;\n    return $flags{$item};\n}\n\n{\n    my $lines;\n    sub winner {\n        my @board = @_;\n        $lines ||= [lines $SIZE];\n\n        for my $slots (@$lines) {\n            my %sum;\n            $sum{$board[$_]}++ for grep {defined $board[$_]} @$slots;\n\n            defined $sum{$_} && $sum{$_} >= $SIZE and return $_ for 0, 1;\n        }\n\n        return -1;\n    }\n}\n\nsub solve($) {\n    my $input = shift;\n\n    my @nums = grep {defined $_} (map {$_ - 1} split //, $input)[0 .. $SIZE ** 2 - 1];\n\n    my $player = 0;\n    my @players = qw/o x/;\n\n    my @board;\n    for my $n (@nums) {\n        return \"Foul : $players[!$player] won.\" if defined $board[$n];\n        $board[$n] = $player;\n\n        my $winner = winner @board;\n        if ($winner >= 0) {\n            return \"$players[$winner] won.\";\n        }\n\n        $player = $player ? 0 : 1;\n    }\n\n    return \"Draw game.\";\n}\n\n1;\n\n\n\n[Tick-Tack-Toe\u306e\u5224\u5b9a](http://nabetani.sakura.ne.jp/hena/1/)\u3092\u3068\u308a\u3042\u3048\u305a\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3002\u3053\u308c\u306f\u306a\u3044\u306a\u30fc\u3063\u3066\u30b3\u30fc\u30c9\u3060\u3051\u3069\u4e00\u5fdc\u3002\n\n```TickTackToe.pm\npackage TickTackToe;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw/solve/;\n\nour @LINES = (\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 6],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7],\n);\n\nsub contains {\n    my ($item, @list) = @_;\n    my %flags = map {$_ => 1} @list;\n    return $flags{$item};\n}\n\nsub solve($) {\n    my $input = shift;\n    my @nums = (split //, $input)[0 .. 8];\n\n    my $player = 0;\n    my @players = qw/o x/;\n\n    my %done;\n    my @slot = (-1) x @LINES;\n    my @slot_count = (0) x @LINES;\n    for my $n (@nums) {\n        return \"Foul : $players[!$player] won.\" if $done{$n}++;\n\n        for (0 .. $#LINES) {\n            next if $slot_count[$_] < 0;\n            next unless contains $n => @{$LINES[$_]};\n            if ($slot[$_] == ! $player) {\n                $slot_count[$_] = -1;\n            } else {\n                $slot[$_] = $player;\n                $slot_count[$_]++;\n                return \"$players[$player] won.\" if $slot_count[$_] >= 3;\n            }\n        }\n\n        $player = ! $player;\n    }\n\n    return \"Draw game.\";\n}\n\n1;\n```\n\n```tick_tack_toe.t\nuse strict;\nuse warnings;\nuse TickTackToe qw(solve);\nuse Test::More;\n\nwhile (<DATA>) {\n    tr/\\r\\n//d;\n    my ($no, $input, $output) = split /\\t/, $_, 3;\n    is +(solve $input), $output;\n}\n\ndone_testing;\n\n__END__\n1\t79538246\tx won.\n2\t35497162193\tx won.\n3\t61978543\tx won.\n4\t254961323121\tx won.\n5\t6134278187\tx won.\n6\t4319581\tFoul : x won.\n7\t9625663381\tFoul : x won.\n8\t7975662\tFoul : x won.\n9\t2368799597\tFoul : x won.\n10\t18652368566\tFoul : x won.\n11\t965715\to won.\n12\t38745796\to won.\n13\t371929\to won.\n14\t758698769\to won.\n15\t42683953\to won.\n16\t618843927\tFoul : o won.\n17\t36535224\tFoul : o won.\n18\t882973\tFoul : o won.\n19\t653675681\tFoul : o won.\n20\t9729934662\tFoul : o won.\n21\t972651483927\tDraw game.\n22\t5439126787\tDraw game.\n23\t142583697\tDraw game.\n24\t42198637563\tDraw game.\n25\t657391482\tDraw game.\n```\n\n\u3061\u3087\u3063\u3068\u76f4\u3057\u305f\u7248\u3002\u3067\u3082\u3044\u307e\u3044\u3061\u3002\n\n```TickTackToe.pm\npackage TickTackToe;\nuse strict;\nuse warnings;\nuse Exporter qw(import);\n\nour @EXPORT_OK = qw/solve/;\nour $SIZE = 3;\n\nsub lines($) {\n    my @lines;\n    for my $x (0 .. $SIZE - 1) {\n        push @lines, [map { $_ + $x * $SIZE } 0 .. $SIZE - 1];\n    }\n\n    for my $y (0 .. $SIZE - 1) {\n        push @lines, [map { $_ * $SIZE + $y } 0 .. $SIZE - 1];\n    }\n\n    push @lines, [map { $_ * $SIZE + $_ } 0 .. $SIZE - 1];\n    push @lines, [map { $_ * $SIZE + $SIZE - $_ - 1} 0 .. $SIZE - 1];\n\n    return @lines;\n}\n\nsub contains {\n    my ($item, @list) = @_;\n    my %flags = map {$_ => 1} @list;\n    return $flags{$item};\n}\n\n{\n    my $lines;\n    sub winner {\n        my @board = @_;\n        $lines ||= [lines $SIZE];\n\n        for my $slots (@$lines) {\n            my %sum;\n            $sum{$board[$_]}++ for grep {defined $board[$_]} @$slots;\n\n            defined $sum{$_} && $sum{$_} >= $SIZE and return $_ for 0, 1;\n        }\n\n        return -1;\n    }\n}\n\nsub solve($) {\n    my $input = shift;\n\n    my @nums = grep {defined $_} (map {$_ - 1} split //, $input)[0 .. $SIZE ** 2 - 1];\n\n    my $player = 0;\n    my @players = qw/o x/;\n\n    my @board;\n    for my $n (@nums) {\n        return \"Foul : $players[!$player] won.\" if defined $board[$n];\n        $board[$n] = $player;\n\n        my $winner = winner @board;\n        if ($winner >= 0) {\n            return \"$players[$winner] won.\";\n        }\n\n        $player = $player ? 0 : 1;\n    }\n\n    return \"Draw game.\";\n}\n\n1;\n```\n", "tags": ["\u3069\u3046\u66f8\u304f", "Perl", "yhpg"]}