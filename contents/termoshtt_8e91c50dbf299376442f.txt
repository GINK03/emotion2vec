{"tags": ["C++", "boost1.55"], "context": " More than 1 year has passed since last update.\n\nNote for Boost Concept Check Library (BCCL)\n\n\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.55)\n\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.30)\nReference (v1.55)\n\n\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u8981\u7d04\u3057\u305f\u7269\u3067\u3042\u308a\u3001\n\u548c\u8a33\u3092\u76ee\u6307\u3059\u7269\u3067\u306f\u306a\u3044\u3002\n\u307e\u305f\u5185\u5bb9\u3092\u4fdd\u8a3c\u3059\u308b\u3082\u306e\u3067\u3082\u306a\u3044\u3002\nIndex\n- #1 Concept Checking Introduction\n- #2 Using Concept Checks \n- #3 Creating Concept Checking Classes\n- #4 Concept Covering and Archetypes\n\nUsing Concept Checks\n\nBOOST_CONCEPT_ASSERT()\n\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u30de\u30af\u30ed\u3002\ncassert\u306eassert\u306b\u76f8\u5f53\u3059\u308b\u3002\n\nboost_concept_assert.cpp\n#include \"boost/concept_check.hpp\"\n\ntemplate<typename T>\nvoid generic_function(T x){\n    BOOST_CONCEPT_ASSERT((boost::EqualityComparable<T>));\n    // Do something\n}\nclass foo{};\nint main(){\n    int i = 2;\n    double a = 1.0;\n    generic_function(i);\n    generic_function(a);\n\n    foo f;\n    generic_function(f);\n    return 0;\n}\n\n\ng++ (GCC) 4.8.2 20131212 (Red Hat 4.8.2-7) \u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b:\nIn file included from ./boost_concept_assert.cpp:2:0:\n/usr/include/boost/concept_check.hpp: In instantiation of \u2018boost::EqualityComparable<TT>::~EqualityComparable() [with TT = foo]\u2019:\n/usr/include/boost/concept/detail/general.hpp:39:28:   required from \u2018static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::EqualityComparable<foo>]\u2019\n./boost_concept_assert.cpp:6:5:   required from \u2018void generic_function(T) [with T = foo]\u2019\n./boost_concept_assert.cpp:17:23:   required from here\n/usr/include/boost/concept_check.hpp:237:30: \u30a8\u30e9\u30fc: no match for \u2018operator==\u2019 (operand types are \u2018foo\u2019 and \u2018foo\u2019)\n       require_boolean_expr(a == b);\n                              ^\n/usr/include/boost/concept_check.hpp:238:30: \u30a8\u30e9\u30fc: no match for \u2018operator!=\u2019 (operand types are \u2018foo\u2019 and \u2018foo\u2019)\n       require_boolean_expr(a != b);\n                              ^\n\n\u3053\u306e\u3088\u3046\u306b\u5408\u540c\u3092\u5224\u5b9a\u3059\u308boperator (==, !=)\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n./boost_concept_assert.cpp:17:23:   required from here\n\u306e\u3088\u3046\u306b\u4f55\u51e6\u3067\u554f\u984c\u304c\u751f\u3058\u305f\u304b\u51fa\u529b\u3055\u308c\u308b\u4e0a\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u7121\u3044\u65e8\u304c\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3002\n\u521d\u5fc3\u8005\u306b\u306f\u307e\u3060\u8f9b\u3044\u8868\u793a\u3060\u304c\u3002\n\u3053\u3053\u3067\u62ec\u5f27\u304c2\u91cd\u306b\u5fc5\u8981\u306a\u7406\u7531\u3060\u304c\u3001\u672c\u6587\u3067\u306f\u3001\n\nYou can use this macro at any scope,\nby passing a concept checking template specialization enclosed in parentheses.\nNote: that means invocations of BOOST_CONCEPT_ASSERT will appear to use double parentheses.\n\n\u3068\u3042\u308b\u306e\u307f\u3067\u3042\u308b\u3002\n\u30d8\u30c3\u30c0\u3092\u8aad\u3093\u3060\u611f\u3058\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u76f8\u5f53\u3059\u308b\u4e8b\u3092\u3057\u3066\u3044\u308b\uff1a\n#define DEF(ARG) void(*)ARG\n\ntemplate<class Func>\nclass F{};\n\nint main(){\n    F<DEF((double))> f;\n    return 0;\n}\n\nDEF((double))\u304c\u95a2\u6570\u30dd\u30a4\u30f3\u30bfvoid(*)(double)\u306b\u5c55\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3042\u308b\u3002\nBOOST_CONCEPT_ASSERT\u304cDEF\u306b\u76f8\u5f53\u3057\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u3044\u3066TMP\u3067\u5909\u63db\u53ef\u80fd\u304c\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002\n\u8981\u306f\u578b\u3060\u3051\u3092\u8a18\u8ff0\u3059\u308b\u69cb\u6587\u304c\u8a31\u3055\u308c\u308b\u306e\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u5b9a\u7fa9\u6642\u3060\u3068\u3044\u3046\u4e8b\u3092\u7528\u3044\u3066\u3044\u308b\u3002\n\nBOOST_CONCEPT_REQUIRES\nC++11\u3067\u306f\u63a1\u7528\u3055\u308c\u306a\u304b\u3063\u305f\u304c\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306eclass, typename\u306e\u4ee3\u308a\u306b\nconcept\u3092\u8a18\u8ff0\u3059\u308b\u66f8\u304d\u65b9\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u305f:\nsyntax for declaring concept constrained function templates\n#include <concepts>\ntemplate<std::CopyConstructible T>\nT sum(T array[], int n)\n{\n  T result = 0;\n  for (int i = 0; i < n; ++i)\n    result = result + array[i];\n  return result;\n}\n\n\u3053\u308c\u306b\u76f8\u5f53\u3059\u308b\u4e8b\u3092\u65e2\u5b58\u306e\u8a00\u8a9e\u4ed5\u69d8\u4e0b\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u304cBOOST_CONCEPT_REQUIRES\u3067\u3042\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b:\ntemplate<typename RanIter>\nBOOST_CONCEPT_REQUIRES(\n    ((Mutable_RandomAccessIterator<RanIter>))\n    ((LessThanComparable<typename Mutable_RandomAccessIterator<RanIter>::value_type>)),\n    (void)) // return type\n    stable_sort(RanIter,RanIter);\n\n\u3053\u308c\u3092\u89e3\u8aad\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\nBOOST_CONCEPT_REQUIRES(\n    ((Mutable_RandomAccessIterator<RanIter>))\n    ((LessThanComparable<typename Mutable_RandomAccessIterator<RanIter>::value_type>)),\n    (void))\n\n\u304cRanIter\u304c\u9069\u5207\u306a\u6642\u3001\u578bvoid\u306b\u306a\u308b\u4e8b\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3064\u307e\u308a\ntemplate<typename RanIter>\nvoid stable_sort(RanIter, RanIter);\n\n\u306evoid\u306e\u90e8\u5206\u306b\u3080\u308a\u3084\u308aBOOST_CONCEPT_ASSERT\u306b\u76f8\u5f53\u3059\u308b\u7269\u3092\u57cb\u3081\u8fbc\u3093\u3060\u306e\u3067\u3042\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306e\u4f4d\u7f6e\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002\n\nMulti-Type Concepts\n2\u3064\u4ee5\u4e0a\u306e\u578b\u304c\u95a2\u4fc2\u3059\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3082\u540c\u69d8\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u3002\n\u540c\u3058\u306a\u306e\u3067\u7565\u3002\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u30c1\u30a7\u30c3\u30af\u6a5f\u69cb\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u88c5\u8005\u306e\u305f\u3081\u306e\u7269\u3060\u304c\u3001\nBOOST_CONCEPT_ASSERT((BidirectionalIterator<std::list<int>::iterator>));\n\n\u306e\u3088\u3046\u306b\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u304clist<int>\u304c\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3069\u3046\u304b\u8abf\u3079\u308b\u305f\u3081\u306b\u3082\u4f7f\u3048\u308b\u3002\nNote for Boost Concept Check Library (BCCL)\n===========================================\n\n- [\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.55)](http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm)\n- [\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.30)](http://boost.cppll.jp/BDTJ_1_30/libs/concept_check/concept_check.htm)\n- [Reference (v1.55)](http://www.boost.org/doc/libs/1_55_0/libs/concept_check/reference.htm)\n\n\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u8981\u7d04\u3057\u305f\u7269\u3067\u3042\u308a\u3001\n\u548c\u8a33\u3092\u76ee\u6307\u3059\u7269\u3067\u306f\u306a\u3044\u3002\n\u307e\u305f\u5185\u5bb9\u3092\u4fdd\u8a3c\u3059\u308b\u3082\u306e\u3067\u3082\u306a\u3044\u3002\n\nIndex\n- [#1 Concept Checking Introduction](http://qiita.com/termoshtt/items/47c8e3a7b2b84b3c883c)\n- **#2 Using Concept Checks** \n- #3 Creating Concept Checking Classes\n- #4 Concept Covering and Archetypes\n\nUsing Concept Checks\n--------------------\n\n#### BOOST_CONCEPT_ASSERT()\n\n\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u6e80\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u30de\u30af\u30ed\u3002\ncassert\u306eassert\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n```cpp:boost_concept_assert.cpp\n#include \"boost/concept_check.hpp\"\n\ntemplate<typename T>\nvoid generic_function(T x){\n    BOOST_CONCEPT_ASSERT((boost::EqualityComparable<T>));\n    // Do something\n}\nclass foo{};\nint main(){\n    int i = 2;\n    double a = 1.0;\n    generic_function(i);\n    generic_function(a);\n\n    foo f;\n    generic_function(f);\n    return 0;\n}\n```\n\ng++ (GCC) 4.8.2 20131212 (Red Hat 4.8.2-7) \u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b:\n\n```\nIn file included from ./boost_concept_assert.cpp:2:0:\n/usr/include/boost/concept_check.hpp: In instantiation of \u2018boost::EqualityComparable<TT>::~EqualityComparable() [with TT = foo]\u2019:\n/usr/include/boost/concept/detail/general.hpp:39:28:   required from \u2018static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::EqualityComparable<foo>]\u2019\n./boost_concept_assert.cpp:6:5:   required from \u2018void generic_function(T) [with T = foo]\u2019\n./boost_concept_assert.cpp:17:23:   required from here\n/usr/include/boost/concept_check.hpp:237:30: \u30a8\u30e9\u30fc: no match for \u2018operator==\u2019 (operand types are \u2018foo\u2019 and \u2018foo\u2019)\n       require_boolean_expr(a == b);\n                              ^\n/usr/include/boost/concept_check.hpp:238:30: \u30a8\u30e9\u30fc: no match for \u2018operator!=\u2019 (operand types are \u2018foo\u2019 and \u2018foo\u2019)\n       require_boolean_expr(a != b);\n                              ^\n```\n\n\u3053\u306e\u3088\u3046\u306b\u5408\u540c\u3092\u5224\u5b9a\u3059\u308boperator (==, !=)\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n`./boost_concept_assert.cpp:17:23:   required from here`\n\u306e\u3088\u3046\u306b\u4f55\u51e6\u3067\u554f\u984c\u304c\u751f\u3058\u305f\u304b\u51fa\u529b\u3055\u308c\u308b\u4e0a\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u7121\u3044\u65e8\u304c\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3002\n\u521d\u5fc3\u8005\u306b\u306f\u307e\u3060\u8f9b\u3044\u8868\u793a\u3060\u304c\u3002\n\n\u3053\u3053\u3067\u62ec\u5f27\u304c2\u91cd\u306b\u5fc5\u8981\u306a\u7406\u7531\u3060\u304c\u3001\u672c\u6587\u3067\u306f\u3001\n\n> You can use this macro at any scope,\n> by passing a concept checking template specialization enclosed in parentheses.\n> Note: that means invocations of BOOST_CONCEPT_ASSERT will appear to use double parentheses.\n\n\u3068\u3042\u308b\u306e\u307f\u3067\u3042\u308b\u3002\n\u30d8\u30c3\u30c0\u3092\u8aad\u3093\u3060\u611f\u3058\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u76f8\u5f53\u3059\u308b\u4e8b\u3092\u3057\u3066\u3044\u308b\uff1a\n\n```cpp\n#define DEF(ARG) void(*)ARG\n\ntemplate<class Func>\nclass F{};\n\nint main(){\n    F<DEF((double))> f;\n    return 0;\n}\n```\n\n`DEF((double))`\u304c\u95a2\u6570\u30dd\u30a4\u30f3\u30bf`void(*)(double)`\u306b\u5c55\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3042\u308b\u3002\n`BOOST_CONCEPT_ASSERT`\u304c`DEF`\u306b\u76f8\u5f53\u3057\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u3044\u3066TMP\u3067\u5909\u63db\u53ef\u80fd\u304c\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u3002\n\u8981\u306f\u578b\u3060\u3051\u3092\u8a18\u8ff0\u3059\u308b\u69cb\u6587\u304c\u8a31\u3055\u308c\u308b\u306e\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u5b9a\u7fa9\u6642\u3060\u3068\u3044\u3046\u4e8b\u3092\u7528\u3044\u3066\u3044\u308b\u3002\n\n#### BOOST_CONCEPT_REQUIRES\n\nC++11\u3067\u306f\u63a1\u7528\u3055\u308c\u306a\u304b\u3063\u305f\u304c\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306e`class`, `typename`\u306e\u4ee3\u308a\u306b\nconcept\u3092\u8a18\u8ff0\u3059\u308b\u66f8\u304d\u65b9\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u305f:\n[syntax for declaring concept constrained function templates](http://www.generic-programming.org/languages/conceptcpp/tutorial)\n\n```cpp\n#include <concepts>\ntemplate<std::CopyConstructible T>\nT sum(T array[], int n)\n{\n  T result = 0;\n  for (int i = 0; i < n; ++i)\n    result = result + array[i];\n  return result;\n}\n```\n\n\u3053\u308c\u306b\u76f8\u5f53\u3059\u308b\u4e8b\u3092\u65e2\u5b58\u306e\u8a00\u8a9e\u4ed5\u69d8\u4e0b\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u304c`BOOST_CONCEPT_REQUIRES`\u3067\u3042\u308b\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b:\n\n```cpp\ntemplate<typename RanIter>\nBOOST_CONCEPT_REQUIRES(\n    ((Mutable_RandomAccessIterator<RanIter>))\n    ((LessThanComparable<typename Mutable_RandomAccessIterator<RanIter>::value_type>)),\n    (void)) // return type\n    stable_sort(RanIter,RanIter);\n```\n\n\u3053\u308c\u3092\u89e3\u8aad\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u307e\u305a\n\n```cpp\nBOOST_CONCEPT_REQUIRES(\n    ((Mutable_RandomAccessIterator<RanIter>))\n    ((LessThanComparable<typename Mutable_RandomAccessIterator<RanIter>::value_type>)),\n    (void))\n```\n\n\u304c`RanIter`\u304c\u9069\u5207\u306a\u6642\u3001\u578b`void`\u306b\u306a\u308b\u4e8b\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3064\u307e\u308a\n\n```cpp\ntemplate<typename RanIter>\nvoid stable_sort(RanIter, RanIter);\n```\n\n\u306e`void`\u306e\u90e8\u5206\u306b\u3080\u308a\u3084\u308a`BOOST_CONCEPT_ASSERT`\u306b\u76f8\u5f53\u3059\u308b\u7269\u3092\u57cb\u3081\u8fbc\u3093\u3060\u306e\u3067\u3042\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306e\u4f4d\u7f6e\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002\n\n### Multi-Type Concepts\n\n2\u3064\u4ee5\u4e0a\u306e\u578b\u304c\u95a2\u4fc2\u3059\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3082\u540c\u69d8\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u3002\n\u540c\u3058\u306a\u306e\u3067\u7565\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u30c1\u30a7\u30c3\u30af\u6a5f\u69cb\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u88c5\u8005\u306e\u305f\u3081\u306e\u7269\u3060\u304c\u3001\n\n```cpp\nBOOST_CONCEPT_ASSERT((BidirectionalIterator<std::list<int>::iterator>));\n```\n\n\u306e\u3088\u3046\u306b\u30a8\u30f3\u30c9\u30e6\u30fc\u30b6\u30fc\u304c`list<int>`\u304c\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3069\u3046\u304b\u8abf\u3079\u308b\u305f\u3081\u306b\u3082\u4f7f\u3048\u308b\u3002\n"}