{"context": "\u6700\u8fd1\u3001luigi\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u308b\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5272\u3068\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u3068\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5e03\u6559\u7684\u306b\u6587\u7ae0\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u2026\u65e5\u672c\u8a9e\u306e\u8cc7\u6599\u3001\u5c11\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u2026\nluigi\u305d\u306e\u3082\u306e\u306b\u3064\u3044\u3066\u306f\nhttp://qiita.com/colspan/items/453aeec7f4f420b91241\nhttp://qiita.com/keisuke-nakata/items/0717c0c358658964f81e\n\u306b\u8a73\u3057\u304f\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u7c21\u5358\u306b\u826f\u3055\u3092\u8aac\u660e\u3059\u308b\u3068\u3001luigi\u306fluigi.Task\u3092\u7d99\u627f\u3057\u305f\u5b50\u30af\u30e9\u30b9\uff08\uff1d\u30bf\u30b9\u30af\uff09\u3092\u4e00\u3064\u4e00\u3064\u7d42\u4e86\u3055\u305b\u3066\u3001\u5168\u4f53\u306e\u8a08\u7b97\u7d50\u679c\u3092\u5f97\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u3067\u3001\u9014\u4e2d\u3067\u30d0\u30b0\u304c\u3042\u3063\u305f\u308a\u3001\u8a08\u7b97\u6642\u9593limit\u304c\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u3067\u3082\u3001\u65e2\u306b\u8a08\u7b97\u3055\u308c\u305f\u90e8\u5206\u3092\u6b8b\u3059\u3053\u3068\u304c\u3067\u304d\u3001resume\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u305f\u3076\u3093on-memory\u306e\u53d7\u3051\u6e21\u3057\u306f\u3067\u304d\u306a\u3044\u2026\uff1f\u2192 \u8ffd\u8a18\uff1aluigi.mock\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u305d\u3046\u3067\u3059\uff09\n\n\u6a5f\u68b0\u5b66\u7fd2 with luigi\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u6642\u306bon-memory\u3067\u8a08\u7b97\u3057\u3066\u3044\u3066\u9014\u4e2d\u3067\u843d\u3061\u305f\u308a\u3059\u308b\u3068\u3001\u8a08\u7b97\u5168\u3066\u3084\u308a\u76f4\u3057\u3067\u60b2\u3057\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001luigi\u306e\u826f\u3055\u3092\u3064\u304b\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3044\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttps://github.com/keisuke-yanagisawa/study/blob/20151204/luigi/param_tuning.py\n\u5fc5\u8981\u306a\u3082\u306e\u306f\n\nnumpy\nscikit-learn\nluigi\n\n\u306e3\u3064\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\npython param_tuning.py task_param_tuning --local-scheduler\n\n\u3068\u3084\u308b\u3068\u8d70\u308a\u307e\u3059\u3002\u6839\u3068\u306a\u308b\u30bf\u30b9\u30af\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u3042\u3068luigi\u306fscheduler\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3084\u308b\u306e\u304c\u666e\u901a\u306e\u4f7f\u3044\u65b9\u306a\u306e\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067--local-scheduler\u3067\u5358\u72ec\u5b9f\u884c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u30bf\u30b9\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nclass task_param_eval(luigi.Task):\n    data = luigi.Parameter()\n    C = luigi.FloatParameter()\n    gamma = luigi.FloatParameter()\n\n    def requires(self):\n        return []\n    def output(self):\n        return luigi.LocalTarget(\"temp/%s.txt\" % hash( frozenset([self.C, self.gamma]) ))\n    def run(self):\n        model = svm.SVR(C=self.C, gamma=self.gamma)\n\n        # cross_val_score function returns the \"score\", not \"error\". \n        # So, the result is inverse of error value.\n        results = -cross_validation.cross_val_score(model, data.data, data.target, scoring=\"mean_absolute_error\")\n        with self.output().open(\"w\") as out_file:\n            out_file.write( str(np.mean(results)) ); \n\n\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u3044\u305f\u3063\u3066\u7c21\u5358\u3067\u3059\u306d\u3002SVR\u3092\u4f7f\u3063\u3066\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u8a55\u4fa1\u5024\u3092\u51fa\u3057\u3001\u305d\u308c\u3092\u5e73\u5747\u3057\u305f\u5024\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\nluigi\u306e\u30bf\u30b9\u30af\u306f\u57fa\u672c\u7684\u306b[requires, output, run]\u306e3\u70b9\u30bb\u30c3\u30c8\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3001\u3068\u899a\u3048\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\nrequires ... \u3053\u306e\u30bf\u30b9\u30af\u3092\u884c\u3046\u305f\u3081\u306b\u305d\u3082\u305d\u3082\u5b9f\u884c\u6e08\u307f\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u30bf\u30b9\u30af\noutput   ... \u3053\u306e\u30bf\u30b9\u30af\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\uff08\u8907\u6570\u6307\u5b9a\u53ef\u80fd\uff09\nrun      ... \u30bf\u30b9\u30af\u306e\u4e2d\u8eab\n\n\u3067\u3059\u3002\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306fluigi.LocalTarget()\u3068\u3044\u3046\u304a\u307e\u3058\u306a\u3044\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u5f15\u6570\u306fluigi.Parameter()\u306a\u3069\u3092\u5229\u7528\u3057\u307e\u3059\u3002luigi\u306e\u5185\u90e8\u3067\u306f\u3053\u308c\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u898b\u3066\u3001\u540c\u3058\u30bf\u30b9\u30af\u540d\u3067\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u9055\u3051\u308c\u3070\u5b9f\u884c\u3059\u308b\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30702\u5ea6\u540c\u3058\u3053\u3068\u306f\u5b9f\u884c\u3057\u306a\u3044\u3001\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\uff08\u305d\u306e\u305f\u3081\u3001Parameter\u306fhashable\u3067\u3042\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\uff09\n\u7d9a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30bf\u30b9\u30af\u3092\u8907\u6570\u56de\u547c\u3076\u30bf\u30b9\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nclass task_param_tuning(luigi.Task):\n\n    cost_list = luigi.Parameter(default=\"1,2,5,10\")\n    gamma_list = luigi.Parameter(default=\"1,2,5,10\")\n\n    data = datasets.load_diabetes()\n\n    def requires(self):\n        return flatten_array(\n            map(lambda C:\n                    map(lambda gamma:\n                            task_param_eval(data=frozenset(self.data), # values should be hashable \n                                       C=float(C), gamma=float(gamma)),\n                        self.cost_list.split(\",\")),\n                self.gamma_list.split(\",\")))\n    def output(self):\n        return luigi.LocalTarget(\"results.csv\")\n    def run(self):\n\n        results = {}\n\n        for task in self.requires():\n            with task.output().open() as taskfile:\n                results[(task.C, task.gamma)] = float(taskfile.read())\n\n        best_key = min(results,  key=results.get)\n        with self.output().open(\"w\") as out_file:\n            out_file.write(\"%s,%s,%.4f\\n\" %(best_key[0], best_key[1], results[best_key]))\n\n\n\u81ea\u5206\u306e\u4e0d\u52c9\u5f37\u3067\u3001\u8907\u6570\u500b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\u3068\u304d\u306e\u65b9\u6cd5\u3092\u308d\u304f\u306b\u77e5\u3089\u306a\u3044\u306e\u3067\uff08\u6012\u3089\u308c\u305d\u3046\u3060\uff09\u3068\u308a\u3042\u3048\u305a\u30ab\u30f3\u30de\u533a\u5207\u308a\u3057\u3066\u307e\u3059\u304c\u3001\u307e\u3042\u305d\u308c\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001task_param_eval\u306eC\u3084gamma\u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u51fa\u529b\u3057\u305f\u304b\u3063\u305f\u306e\u3067run\u306e\u4e2d\u3067\u306ffor task in self.requires()\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u7d14\u7c8b\u306brequires\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3081\u308c\u3070OK\u3068\u3044\u3046\u5834\u5408\u306fself.input()\u3068\u3059\u308c\u3070self.requires().output()\u3068\u540c\u3058\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u6700\u8fd1\u3001luigi\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u5236\u5fa1\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u308b\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5272\u3068\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u3068\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5e03\u6559\u7684\u306b\u6587\u7ae0\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u2026\u65e5\u672c\u8a9e\u306e\u8cc7\u6599\u3001\u5c11\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u2026\n\nluigi\u305d\u306e\u3082\u306e\u306b\u3064\u3044\u3066\u306f\nhttp://qiita.com/colspan/items/453aeec7f4f420b91241\nhttp://qiita.com/keisuke-nakata/items/0717c0c358658964f81e\n\u306b\u8a73\u3057\u304f\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u7c21\u5358\u306b\u826f\u3055\u3092\u8aac\u660e\u3059\u308b\u3068\u3001luigi\u306fluigi.Task\u3092\u7d99\u627f\u3057\u305f\u5b50\u30af\u30e9\u30b9\uff08\uff1d\u30bf\u30b9\u30af\uff09\u3092\u4e00\u3064\u4e00\u3064\u7d42\u4e86\u3055\u305b\u3066\u3001\u5168\u4f53\u306e\u8a08\u7b97\u7d50\u679c\u3092\u5f97\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u3067\u3001\u9014\u4e2d\u3067\u30d0\u30b0\u304c\u3042\u3063\u305f\u308a\u3001\u8a08\u7b97\u6642\u9593limit\u304c\u8d85\u3048\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u3067\u3082\u3001\u65e2\u306b\u8a08\u7b97\u3055\u308c\u305f\u90e8\u5206\u3092\u6b8b\u3059\u3053\u3068\u304c\u3067\u304d\u3001resume\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u305f\u3076\u3093on-memory\u306e\u53d7\u3051\u6e21\u3057\u306f\u3067\u304d\u306a\u3044\u2026\uff1f\u2192 \u8ffd\u8a18\uff1a[luigi.mock](http://luigi.readthedocs.io/en/stable/api/luigi.mock.html)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u305d\u3046\u3067\u3059\uff09\n\n\n## \u6a5f\u68b0\u5b66\u7fd2 with luigi\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u6642\u306bon-memory\u3067\u8a08\u7b97\u3057\u3066\u3044\u3066\u9014\u4e2d\u3067\u843d\u3061\u305f\u308a\u3059\u308b\u3068\u3001\u8a08\u7b97\u5168\u3066\u3084\u308a\u76f4\u3057\u3067\u60b2\u3057\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001luigi\u306e\u826f\u3055\u3092\u3064\u304b\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3044\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttps://github.com/keisuke-yanagisawa/study/blob/20151204/luigi/param_tuning.py\n\u5fc5\u8981\u306a\u3082\u306e\u306f\n\n* numpy\n* scikit-learn\n* luigi\n\n\u306e3\u3064\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\n\n```bash\npython param_tuning.py task_param_tuning --local-scheduler\n```\n\n\u3068\u3084\u308b\u3068\u8d70\u308a\u307e\u3059\u3002\u6839\u3068\u306a\u308b\u30bf\u30b9\u30af\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u3042\u3068luigi\u306fscheduler\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3084\u308b\u306e\u304c\u666e\u901a\u306e\u4f7f\u3044\u65b9\u306a\u306e\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067--local-scheduler\u3067\u5358\u72ec\u5b9f\u884c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u3067\u306f\u3001\u30bf\u30b9\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py\nclass task_param_eval(luigi.Task):\n    data = luigi.Parameter()\n    C = luigi.FloatParameter()\n    gamma = luigi.FloatParameter()\n\n    def requires(self):\n        return []\n    def output(self):\n        return luigi.LocalTarget(\"temp/%s.txt\" % hash( frozenset([self.C, self.gamma]) ))\n    def run(self):\n        model = svm.SVR(C=self.C, gamma=self.gamma)\n\n        # cross_val_score function returns the \"score\", not \"error\". \n        # So, the result is inverse of error value.\n        results = -cross_validation.cross_val_score(model, data.data, data.target, scoring=\"mean_absolute_error\")\n        with self.output().open(\"w\") as out_file:\n            out_file.write( str(np.mean(results)) ); \n```\n\n\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u3044\u305f\u3063\u3066\u7c21\u5358\u3067\u3059\u306d\u3002SVR\u3092\u4f7f\u3063\u3066\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u8a55\u4fa1\u5024\u3092\u51fa\u3057\u3001\u305d\u308c\u3092\u5e73\u5747\u3057\u305f\u5024\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\nluigi\u306e\u30bf\u30b9\u30af\u306f\u57fa\u672c\u7684\u306b**[requires, output, run]\u306e3\u70b9\u30bb\u30c3\u30c8\u3092\u4e0a\u66f8\u304d\u3059\u308b**\u3001\u3068\u899a\u3048\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n* requires ... \u3053\u306e\u30bf\u30b9\u30af\u3092\u884c\u3046\u305f\u3081\u306b\u305d\u3082\u305d\u3082\u5b9f\u884c\u6e08\u307f\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u30bf\u30b9\u30af\n* output   ... \u3053\u306e\u30bf\u30b9\u30af\u306e\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\uff08\u8907\u6570\u6307\u5b9a\u53ef\u80fd\uff09\n* run      ... \u30bf\u30b9\u30af\u306e\u4e2d\u8eab\n\n\u3067\u3059\u3002\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306fluigi.LocalTarget()\u3068\u3044\u3046\u304a\u307e\u3058\u306a\u3044\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u5f15\u6570\u306fluigi.Parameter()\u306a\u3069\u3092\u5229\u7528\u3057\u307e\u3059\u3002luigi\u306e\u5185\u90e8\u3067\u306f\u3053\u308c\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u898b\u3066\u3001\u540c\u3058\u30bf\u30b9\u30af\u540d\u3067\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u9055\u3051\u308c\u3070\u5b9f\u884c\u3059\u308b\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u30702\u5ea6\u540c\u3058\u3053\u3068\u306f\u5b9f\u884c\u3057\u306a\u3044\u3001\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\uff08\u305d\u306e\u305f\u3081\u3001Parameter\u306fhashable\u3067\u3042\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\uff09\n\n\u7d9a\u3044\u3066\u3001\u4e0a\u8a18\u306e\u30bf\u30b9\u30af\u3092\u8907\u6570\u56de\u547c\u3076\u30bf\u30b9\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py\nclass task_param_tuning(luigi.Task):\n\n    cost_list = luigi.Parameter(default=\"1,2,5,10\")\n    gamma_list = luigi.Parameter(default=\"1,2,5,10\")\n    \n    data = datasets.load_diabetes()\n\n    def requires(self):\n        return flatten_array(\n            map(lambda C:\n                    map(lambda gamma:\n                            task_param_eval(data=frozenset(self.data), # values should be hashable \n                                       C=float(C), gamma=float(gamma)),\n                        self.cost_list.split(\",\")),\n                self.gamma_list.split(\",\")))\n    def output(self):\n        return luigi.LocalTarget(\"results.csv\")\n    def run(self):\n\n        results = {}\n\n        for task in self.requires():\n            with task.output().open() as taskfile:\n                results[(task.C, task.gamma)] = float(taskfile.read())\n        \n        best_key = min(results,  key=results.get)\n        with self.output().open(\"w\") as out_file:\n            out_file.write(\"%s,%s,%.4f\\n\" %(best_key[0], best_key[1], results[best_key]))\n\n```\n\n\u81ea\u5206\u306e\u4e0d\u52c9\u5f37\u3067\u3001\u8907\u6570\u500b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\u3068\u304d\u306e\u65b9\u6cd5\u3092\u308d\u304f\u306b\u77e5\u3089\u306a\u3044\u306e\u3067\uff08\u6012\u3089\u308c\u305d\u3046\u3060\uff09\u3068\u308a\u3042\u3048\u305a\u30ab\u30f3\u30de\u533a\u5207\u308a\u3057\u3066\u307e\u3059\u304c\u3001\u307e\u3042\u305d\u308c\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001task_param_eval\u306eC\u3084gamma\u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u51fa\u529b\u3057\u305f\u304b\u3063\u305f\u306e\u3067run\u306e\u4e2d\u3067\u306f``for task in self.requires()``\u3068\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u7d14\u7c8b\u306brequires\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3081\u308c\u3070OK\u3068\u3044\u3046\u5834\u5408\u306f``self.input()``\u3068\u3059\u308c\u3070``self.requires().output()``\u3068\u540c\u3058\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n", "tags": ["Python", "Luigi", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}