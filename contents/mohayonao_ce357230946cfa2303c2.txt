{"context": "\n\n2016.09.08 \u8ffd\u8a18\nAudioWorker\u306f\u7de8\u7e82\u4e2d\u306e\u4ed5\u69d8\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002Web Audio API\u5148\u751f\u306e\u6b21\u56de\u4f5cAudioWorklet\u306b\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\uff01\uff01\nhttps://github.com/WebAudio/web-audio-api/issues/956\n\nWeb Audio API \u306b\u306f ScriptProcessorNode \u3068\u3044\u3046\u3001JavaScript \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u90e8\u54c1\u304c\u3042\u308a\u307e\u3059\u3002Web Audio API \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u54c1\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u306f\u3084\u308a\u3088\u3046\u304c\u306a\u3044\u51e6\u7406\u3092\u3057\u305f\u3044\u3068\u304d\u306b\u91cd\u5b9d\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u6700\u65b0\u306e\u30c9\u30e9\u30d5\u30c8\u4ed5\u69d8\u3067\u306f DEPRECATED \u3068\u306a\u3063\u3066\u3044\u3066\u5c06\u6765\u7684\u306b\u306f\u5ec3\u6b62\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u3057\u3066\u5ec3\u6b62\u3055\u308c\u308b ScriptProcessorNode \u306b\u5909\u308f\u3063\u3066\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u306e\u304c AudioWorker \u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3001ScriptProcessorNode \u3068\u306e\u5927\u304d\u306a\u9055\u3044\u3068\u3057\u3066\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3063\u3066\u3044\u305f\u4fe1\u53f7\u51e6\u7406\u3092\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u4efb\u610f\u306e AudioParam \u3092\u8a2d\u5b9a\u3067\u304d\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306a\u3069\u3001\u3088\u308a\u30cd\u30a4\u30c6\u30a3\u30d6\u306a AudioNode \u3068\u8fd1\u3044\u5f62\u5f0f\u3067\u72ec\u81ea\u306e AudioNode \u3092\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089 2016\u5e741\u67081\u65e5 \u306e\u6642\u70b9\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u304c\u306a\u3044\u305f\u3081\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u65e2\u5b58\u306e Web Audio API \u4e0a\u3067 AudioWorker \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u306a\u3089\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nAudioWorkerShim - https://github.com/mohayonao/audio-worker-shim\n\u6ce8\u610f1\uff1a\u4ed5\u69d8\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4eca\u5f8c\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\n\u6ce8\u610f2\uff1aAudioWorkerShim \u306f\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u4ed5\u69d8\u3068\u306f\u4ee5\u4e0b\u306e\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\n\n\u4fe1\u53f7\u51e6\u7406\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046 (\u5185\u90e8\u306f ScriptProcessorNode \u3092\u4f7f\u3063\u3066\u3044\u308b)\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30c7\u30fc\u30bf\u306f\u30b3\u30d4\u30fc\u3067\u306a\u304f\u53c2\u7167\u3067\u6e21\u3055\u308c\u308b\n\u30c1\u30e3\u30cd\u30eb\u30b9\u30d7\u30ea\u30c3\u30c8/\u30de\u30fc\u30b8\u306e\u6a5f\u80fd\u304c\u306a\u3044 (\u5358\u7d14\u306a\u30e2\u30ce or \u30b9\u30c6\u30ec\u30aa\u30df\u30c3\u30af\u30b9\u3057\u304b\u6271\u3048\u306a\u3044)\n\n\nAudioWorkerShim \u3092\u4f7f\u3046\naudio-worker-shim.js \u307e\u305f\u306f audio-worker-shim-light.js \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066HTML\u30d5\u30a1\u30a4\u30eb\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3001AudioWorkerShim.polyfill(); \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u308c\u3067 AudioContext \u3067 createAudioWorker \u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n<script src=\"/path/to/audio-worker-shim.js\"></script>\n<script>AudioWorkerShim.polyfill();</script>\n\n\u88dc\u8db3\uff1aaudio-worker-shim-light.js \u3068\u306f\uff1f\naudio-worker-shim-light.js \u306f AudioWorkerGlobalScope \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570/\u95a2\u6570\u3092\u6697\u9ed9\u7684\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u30b3\u30fc\u30c9\u5185\u3067\u660e\u793a\u7684\u306b self \u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c 1/8 (560kB -> 70kB) \u3068\u8efd\u91cf\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n// audio-worker-shim.js \u3067\u306f\u3053\u3046\u66f8\u3051\u308b\u3051\u3069\nonmessage = function(e) {\n  console.log(sampleRate);\n};\n\n// audio-worker-shim-light.js \u3067\u306f\u3053\u3046\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044 (self\u304c\u5fc5\u8981)\nself.onmessage = function(e) {\n  console.log(self.sampleRate);\n};\n\n\nAudioWorker \u306e\u69cb\u6210\n\n\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u756a\n\n\nmain : AudioWorker \u3092\u751f\u6210\n\nworker : AudioWorkerGlobalScope \u5185\u3067 onaudioprocess \u3084 onnodecreate \u3092\u5b9a\u7fa9\u3059\u308b\n\nmain : AudioWorkerNode \u3092\u751f\u6210\n\nworker : onnodecreate \u5185\u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\n\nworker : onaudioprocess \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3046\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001AudioWorker \u3068 AudioWorkerGlobalScope \u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u7a7a\u9593\u3068\u3057\u3066\u3042\u3063\u3066\u3001AudioWorkerNode \u3068 AudioWorkerNodeProcessor \u304c\u500b\u3005\u306e AudioNode \u3068\u3057\u3066\u632f\u308b\u821e\u3046\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\nAudioWorker\n\nAudioWorker \u306e \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\ninterface AudioWorker : Worker {\n    void            terminate ();\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler                 onmessage;\n                    attribute EventHandler                 onloaded;\n\n    AudioWorkerNode createNode (int numberOfInputs, int numberOfOutputs);\n\n    readonly        attribute AudioWorkerParamDescriptor[] parameters;\n    AudioParam      addParameter (DOMString name, float defaultValue);\n    void            removeParameter (DOMString name);\n};\n\nWorker \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (postMessage \u3084 onmessage) \u306b\u52a0\u3048\u3066\u3001AudioWorkerNode \u3092\u751f\u6210\u3059\u308b createNode() \u3084 AudioParam \u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (parameters, addParameter \u3084 removeParameter) \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u8457\u8005\u6ce8\uff1a addParameter \u306e\u623b\u308a\u5024\u304c AudioParam \u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u4ed5\u69d8\u306e\u9593\u9055\u3044\u306a\u6c17\u304c\u3057\u307e\u3059\n\nAudioWorkerGlobalScope\n\nAudioWorker \u306e \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\ninterface AudioWorkerGlobalScope : DedicatedWorkerGlobalScope {\n    readonly        attribute float                        sampleRate;\n                    attribute EventHandler                 onaudioprocess;\n                    attribute EventHandler                 onnodecreate;\n\n    readonly        attribute AudioWorkerParamDescriptor[] parameters;\n    AudioParam      addParameter (DOMString name, float defaultValue);\n    void            removeParameter (DOMString name);\n};\n\nDedicatedWorkerGlobalScope \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (postMessage \u3084 onmessage) \u306b\u52a0\u3048\u3066\u3001AudioParam \u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (parameters, addParameter \u3084 removeParameter)\u3001 \u4fe1\u53f7\u51e6\u7406\u3092\u66f8\u304f onaudioprocess \u3084\u500b\u3005\u306e\u30ce\u30fc\u30c9\u306e\u521d\u671f\u5316\u306b\u4f7f\u308f\u308c\u308b onnodecreate \u3068\u3044\u3063\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\nAudioWorkerParamDescriptor\n\n\u4e0a\u8a18\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b parameters \u306e\u623b\u308a\u5024\u306b\u306a\u308b\u578b\u3067\u3059\u3002\ninterface AudioWorkerParamDescriptor {\n    readonly        attribute DOMString name;\n    readonly        attribute float     defaultValue;\n};\n\n\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5217\u6319\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\nself.parameters.map((param) => {\n  console.log(param.name, param.defaultValue);\n});\n\n\nAudioWorkerNode\n\nAudioWorker \u304b\u3089\u751f\u6210\u3055\u308c\u308b AudioNode \u306e \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\ninterface AudioWorkerNode : AudioNode {\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler onmessage;\n};\n\n\u901a\u5e38\u306e AudioNode \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (connect \u3084 disconnect) \u306b\u52a0\u3048\u3066\u3001AudioWorkerNodeProcessor \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e postMessage \u3084 onmessage \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nAudioWorkerNodeProcessor\n\nAudioWorker \u304b\u3089\u751f\u6210\u3055\u308c\u308b AudioNode \u306e \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\ninterface AudioWorkerNodeProcessor : EventTarget {\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler onmessage;\n};\n\n\u4e0a\u8a18\u306e AudioWorkerNode \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e postMessage \u3084 onmessage \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nAudioWorkerNodeCreationEvent\n\nAudioWorker \u304c AudioWorkerNode \u3092\u751f\u6210\u3057\u305f\u3068\u304d\u306b\u767a\u706b\u3055\u308c\u308b \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\ninterface AudioWorkerNodeCreationEvent : Event {\n    readonly        attribute AudioWorkerNodeProcessor node;\n    readonly        attribute Array                    inputs;\n    readonly        attribute Array                    outputs;\n};\n\n\u500b\u3005\u306e\u30ce\u30fc\u30c9\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf (\u30d0\u30c3\u30d5\u30a1\u3084\u8a2d\u5b9a\u5024\u306a\u3069) \u3092\u8a2d\u5b9a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\nworker.js\nself.onnodecreate = function(e) {\n  e.node.anyParameter = Math.random();\n  e.node.buffer = new Float32Array(4);\n};\n\n\n\nAudioProcessEvent\n\nAudioWorkerNode \u306e\u4fe1\u53f7\u51e6\u7406\u6642\u306b\u767a\u706b\u3055\u308c\u308b \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074 \u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\ninterface AudioProcessEvent : Event {\n    readonly        attribute double                   playbackTime;\n    readonly        attribute AudioWorkerNodeProcessor node;\n    readonly        attribute Float32Array[][]         inputs;\n    readonly        attribute Float32Array[][]         outputs;\n    readonly        attribute object                   parameters;\n};\n\nnode \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u500b\u3005\u306e\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nworker.js\nself.onaudioprocess = function(e) {\n  e.node.anyParameter; // \u30ce\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u308b\u5024\n  e.node.buffer;       // \u30ce\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u308b\u30d0\u30c3\u30d5\u30a1\n};\n\n\n\n\u3084\u3063\u3066\u307f\u308b\n\u3067\u306f Web Audio API \u306e\u30c9\u30e9\u30d5\u30c8\u4ed5\u69d8\u306e 2.12.7.1 A Bitcrusher Node \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089 AudioWorker \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\nBitcrusher Node \u30c7\u30e2 (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\nmain.js\nvar bitcrusherFactory = null;\n\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(factory) {\n  // cache 'factory' in case you want to create more nodes!\n  bitcrusherFactory = factory;\n\n  var bitcrusherNode = factory.createNode();\n\n  bitcrusherNode.bits.setValueAtTime(8,0);\n  bitcrusherNode.connect(output); \n\n  input.connect(bitcrusherNode);\n});\n\n\n\nbitcrusher_worker.js\n// Custom parameter - number of bits to crush down to - default 8\nthis.addParameter( \"bits\", 8 );\n\n// Custom parameter - frequency reduction, 0-1, default 0.5\nthis.addParameter( \"frequencyReduction\", 0.5 );\n\nonnodecreate = function(e) {\n  e.node.phaser = 0;\n  e.node.lastDataValue = 0;\n};\n\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var bitsArray = e.parameters.bits;\n    var frequencyReductionArray = e.parameters.frequencyReduction;\n\n    for (var i = 0; i < bufferLength; i++) {\n      var bits = bitsArray ? bitsArray[i] : 8;\n      var frequencyReduction = frequencyReductionArray ? frequencyReductionArray[i] : 0.5;\n      var step = Math.pow(1/2, bits);\n\n      e.node.phaser += frequencyReduction;\n      if (e.node.phaser >= 1.0) {\n          e.node.phaser -= 1.0;\n          e.node.lastDataValue = step * Math.floor(inputBuffer[i] / step + 0.5);\n      }\n      outputBuffer[i] = e.node.lastDataValue;\n    }\n  }\n};\n\n\n\n1. AudioWorker \u3092\u751f\u6210\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\nAudioWorker \u306f AudioContext#createAudioWorker \u3067\u751f\u6210\u3057\u307e\u3059\u3002WebWorker \u3068\u306e\u9055\u3044\u3068\u3057\u3066 Promise \u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u4ed6\u306e AudioNode \u306e\u9055\u3044\u3068\u3057\u3066 createAudioWorker \u3067\u5f97\u3089\u308c\u308b\u306e\u306f AudioNode \u3067\u306f\u306a\u304f AudioWorker \u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4ed6\u306e AudioNode \u306b\u63a5\u7d9a\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f bitcrusher_worker.js \u3092\u8aad\u307f\u8fbc\u3093\u3067 bitcrusherFactory \u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002(factory \u304c AudioWorker \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059)\n\nmain.js\nvar bitcrusherFactory = null;\n\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(factory) {\n  // cache 'factory' in case you want to create more nodes!\n  bitcrusherFactory = factory;\n});\n\n\n\n2. AudioWorkerGlobalScope \u5185\u3067 AudioParam \u3092\u5b9a\u7fa9\u3059\u308b\n\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074\naddParameter \u3092\u4f7f\u3063\u3066 AudioParam \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002this \u306e\u304b\u308f\u308a\u306b self \u3068\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u5b9a\u7fa9\u3057\u305f AudioParam \u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u306e AudioWorkerNode \u3067\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nbitcrusher_worker.js\n// Custom parameter - number of bits to crush down to - default 8\nthis.addParameter( \"bits\", 8 );\n\n// Custom parameter - frequency reduction, 0-1, default 0.5\nthis.addParameter( \"frequencyReduction\", 0.5 );\n\nparameters.map((param) => {\n  return [ param.name, param.defaultValue ];\n});\n// \u2192 [ [ \"bits\", 8 ], [ \"frequencyReduction\", 0.5 ] ]\n\n\n\nmain.js\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(worker) {\n  worker.parameters.map((param) => {\n    return [ param.name, param.defaultValue ];\n  });\n  // \u2192 [ [ \"bits\", 8 ], [ \"frequencyReduction\", 0.5 ] ]\n});\n\n\n\n3. AudioWorkerNode \u3092\u751f\u6210\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\nAudioContext#createAudioWorker \u3067\u751f\u6210\u3057\u305f AudioWorker \u306e AudioWorker#createNode \u3092\u547c\u3073\u51fa\u3057\u3066 AudioWorkerNode \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u751f\u6210\u3055\u308c\u308b AudioWorkerNode \u306f\u4ed6\u306e AudioNode \u3068\u540c\u3058\u3088\u3046\u306b connect, disconnect \u306e\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u524d\u6bb5\u3067\u8a2d\u5b9a\u3057\u305f AudioParam \u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nmain.js\nvar node = bitcrusherFactory.createNode(2, 2);\n\nnode.bits.value = 2;\nnode.frequencyReduction.value = 0.25;\n\ninput.connect(node);\nnode.connect(audioContext.destination);\n\n\n\n4. onnodecreate \u5185\u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\n\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3067 createNode \u3092\u3057\u305f\u3068\u304d\u306b \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\nbitcrusher_worker.js\nonnodecreate = function(e) {\n  e.node.phaser = 0;\n  e.node.lastDataValue = 0;\n};\n\n\n\n5. onaudioprocess \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3046\n\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3067 AudioWorkerNode \u3092\u63a5\u7d9a\u3057\u305f\u3042\u3068\u3001\u9023\u7d9a\u7684\u306b\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\ne.inputs[0][channel]: Float32Array \u3067\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u306e\u5165\u529b\u3092\u8aad\u307f\u53d6\u308a\u3001\ne.outputs[0][channel]: Float32Array \u3067\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u306e\u51fa\u529b\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\ne.inputs[0] \u306e 0 \u4ee5\u5916\u306f\u30c1\u30e3\u30cd\u30eb\u30de\u30fc\u30b8\u3084\u7d4c\u8def\u306e\u4ed8\u3051\u66ff\u3048\u306a\u3069\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u57fa\u672c\u7684\u306a\u7528\u9014\u3067\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u524d\u6bb5\u3067 addParameter \u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u305f AudioParam \u306e\u30c7\u30fc\u30bf\u306f e.parameters[name]: Float32Array \u3067\u4fe1\u53f7\u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ne.node[name]: any \u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u8a2d\u5b9a\u5024\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f onaudioprocess \u306f\u3059\u3079\u3066\u306e\u30ce\u30fc\u30c9\u3067\u5171\u901a\u3067\u3001\u6e21\u3055\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5c5e\u6027\u5024\u3067\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u3092\u64cd\u4f5c\u3059\u308b\u3068\u3044\u3046\u70b9\u3067\u3059\u3002(C \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3063\u307d\u3044\u3053\u3068\u3092\u3059\u308b\u3068\u304d\u306e\u611f\u899a\u306b\u4f3c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059)\nbitcrusher_worker \u306e\u4f8b\u3067\u306f e.parameters.bits \u3084 e.parameters.frequencyReduction \u306e\u5024\u3092\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u4fe1\u53f7\u60c5\u5831\u3092\u52a3\u5316\u3055\u305b\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 e.node.phaser \u3084 e.node.lastDataValue \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nbitcrusher_worker.js\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var bitsArray = e.parameters.bits;\n    var frequencyReductionArray = e.parameters.frequencyReduction;\n\n    for (var i = 0; i < bufferLength; i++) {\n      var bits = bitsArray ? bitsArray[i] : 8;\n      var frequencyReduction = frequencyReductionArray ? frequencyReductionArray[i] : 0.5;\n      var step = Math.pow(1/2, bits);\n\n      e.node.phaser += frequencyReduction;\n      if (e.node.phaser >= 1.0) {\n          e.node.phaser -= 1.0;\n          e.node.lastDataValue = step * Math.floor(inputBuffer[i] / step + 0.5);\n      }\n      outputBuffer[i] = e.node.lastDataValue;\n    }\n  }\n};\n\n\n\n6. \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3068\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\n\nAudioWorker <--> AudioWorkerGlobalScope\n\u3053\u308c\u306f Worker \u5168\u4f53\u306e\u8a2d\u5b9a\u3084\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u5168\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u308b\u4f8b\u3067\u3059\u3002\n\n\nMouseNoise Node \u30c7\u30e2 (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n\nmain.js\naudioContext.createAudioWorker(\"mousenoise_worker.js\").then(function(worker) {\n  window.addEventListener(\"mousemove\", function(e) {\n    var x = e.pageX / window.innerWidth;\n    var y = e.pageY / window.innerHeight;\n\n    worker.postMessage({ x: x, y: y }); \n  });\n});\n\n\n\nmousenoise_worker.js\nvar mouseGain = [ 0, 0 ];\n\nonmessage = function(e) {\n  mouseGain[0] = e.data.x;\n  mouseGain[1] = e.data.y;\n};\n\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var gain = mouseGain[channel % 2];\n    var noise;\n\n    for (var i = 0; i < bufferLength; i++) {\n      noise = Math.random();\n\n      if (noise < gain) {\n        outputBuffer[i] = inputBuffer[i];\n      } else if (noise < gain * gain) {\n        outputBuffer[i] = noise - 0.5;\n      } else {\n        outputBuffer[i] = 0;\n      }\n    }\n  }\n};\n\n\n\nAudioWorkerNode <--> AudioWorkerNodeProcessor\n\u3053\u308c\u306f\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u8a2d\u5b9a\u3084\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u4fe1\u53f7\u30c7\u30fc\u30bf\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u9001\u308b\u4f8b\u3067\u3059\u3002\n\u5c11\u3057\u51dd\u3063\u305f\u8a66\u307f\u3068\u3057\u3066 1\u3064\u306e Float32Array \u3092 Transferable Objects \u3068\u3057\u3066\u30b0\u30eb\u30b0\u30eb\u56de\u3059\u3053\u3068\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nCapture Node \u30c7\u30e2 (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n\nmain.js\nfunction preview(buffer) {\n  console.log(buffer[0][0]);\n}\n\naudioContext.createAudioWorker(\"capture_worker.js\").then(function(worker) {\n  var node = worker.createNode(1, 1);\n\n  node.onmessage = function(e) {\n    var buffers = e.data;\n\n    preview(buffers);\n\n    node.postMessage(buffers, [ buffers[0].buffer, buffers[1].buffer ]);\n  };\n\n  inputs.connect(node);\n  node.connect(audioContext.destination);\n});\n\n\n\ncapture_worker.js\nvar bufferLength = 2048;\n\nonnodecreate = function(e) {\n  var node = e.node;\n\n  node.buffers = [ new Float32Array(bufferLength), new Float32Array(bufferLength) ];\n  node.bufferIndex = 0;\n  node.onmessage = function(e) {\n    node.buffers = e.data;\n    node.bufferIndex = 0;\n  };\n};\n\nonaudioprocess = function(e) {\n  var node = e.node;\n\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n\n    e.outputs[0][channel].set(inputBuffer);\n\n    if (node.buffers !== null) {\n      node.buffers[channel].set(inputBuffer, node.bufferIndex);\n    }\n  }\n\n  if (node.buffers !== null) {\n    node.bufferIndex += e.inputs[0][0].length;\n    if (bufferLength <= node.bufferIndex) {\n      node.postMessage(node.buffers, [ node.buffers[0].buffer, node.buffers[1].buffer ]);\n      node.buffers = null;\n    }\n  }\n};\n\n\n\n\u307e\u3068\u3081\n\u3056\u3063\u304f\u308a AudioWorker(Shim) \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u307e\u3060\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u306f\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u78ba\u5b9a\u3057\u305f\u4ed5\u69d8\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u6700\u7d42\u7684\u306b\u306f\u5168\u7136\u9055\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u306a\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u306a\u3093\u3068\u306a\u304f\u306e\u4f7f\u3044\u65b9\u306f\u30a4\u30e1\u30fc\u30b8\u3067\u304d\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u50d5\u304c\u8a66\u3057\u306b\u66f8\u3044\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u3066\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u7d42\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nStutter Node \u30c7\u30e2 (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n# 2016.09.08 \u8ffd\u8a18\n\n**AudioWorker\u306f\u7de8\u7e82\u4e2d\u306e\u4ed5\u69d8\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002Web Audio API\u5148\u751f\u306e\u6b21\u56de\u4f5cAudioWorklet\u306b\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\uff01\uff01**\n\nhttps://github.com/WebAudio/web-audio-api/issues/956\n\n\n- - -\n\n\nWeb Audio API \u306b\u306f ScriptProcessorNode \u3068\u3044\u3046\u3001JavaScript \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u90e8\u54c1\u304c\u3042\u308a\u307e\u3059\u3002Web Audio API \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u90e8\u54c1\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u306f\u3084\u308a\u3088\u3046\u304c\u306a\u3044\u51e6\u7406\u3092\u3057\u305f\u3044\u3068\u304d\u306b\u91cd\u5b9d\u3059\u308b\u306e\u3067\u3059\u304c\u3001[\u6700\u65b0\u306e\u30c9\u30e9\u30d5\u30c8\u4ed5\u69d8](http://webaudio.github.io/web-audio-api)\u3067\u306f DEPRECATED \u3068\u306a\u3063\u3066\u3044\u3066\u5c06\u6765\u7684\u306b\u306f\u5ec3\u6b62\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u305d\u3057\u3066\u5ec3\u6b62\u3055\u308c\u308b ScriptProcessorNode \u306b\u5909\u308f\u3063\u3066\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u306e\u304c AudioWorker \u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3001ScriptProcessorNode \u3068\u306e\u5927\u304d\u306a\u9055\u3044\u3068\u3057\u3066\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3063\u3066\u3044\u305f\u4fe1\u53f7\u51e6\u7406\u3092\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u4efb\u610f\u306e AudioParam \u3092\u8a2d\u5b9a\u3067\u304d\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306a\u3069\u3001\u3088\u308a\u30cd\u30a4\u30c6\u30a3\u30d6\u306a AudioNode \u3068\u8fd1\u3044\u5f62\u5f0f\u3067\u72ec\u81ea\u306e AudioNode \u3092\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b8b\u5ff5\u306a\u304c\u3089 2016\u5e741\u67081\u65e5 \u306e\u6642\u70b9\u3067\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u304c\u306a\u3044\u305f\u3081\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u65e2\u5b58\u306e Web Audio API \u4e0a\u3067 AudioWorker \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u306a\u3089\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nAudioWorkerShim - https://github.com/mohayonao/audio-worker-shim\n\n_\u6ce8\u610f1\uff1a\u4ed5\u69d8\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4eca\u5f8c\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059_\n\n_\u6ce8\u610f2\uff1aAudioWorkerShim \u306f\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u4ed5\u69d8\u3068\u306f\u4ee5\u4e0b\u306e\u70b9\u304c\u7570\u306a\u308a\u307e\u3059_\n\n  - \u4fe1\u53f7\u51e6\u7406\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3046 (\u5185\u90e8\u306f ScriptProcessorNode \u3092\u4f7f\u3063\u3066\u3044\u308b)\n  - \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30c7\u30fc\u30bf\u306f\u30b3\u30d4\u30fc\u3067\u306a\u304f\u53c2\u7167\u3067\u6e21\u3055\u308c\u308b\n  - \u30c1\u30e3\u30cd\u30eb\u30b9\u30d7\u30ea\u30c3\u30c8/\u30de\u30fc\u30b8\u306e\u6a5f\u80fd\u304c\u306a\u3044 (\u5358\u7d14\u306a\u30e2\u30ce or \u30b9\u30c6\u30ec\u30aa\u30df\u30c3\u30af\u30b9\u3057\u304b\u6271\u3048\u306a\u3044)\n\n## AudioWorkerShim \u3092\u4f7f\u3046\n\n[audio-worker-shim.js](https://raw.githubusercontent.com/mohayonao/audio-worker-shim/master/build/audio-worker-shim.js) \u307e\u305f\u306f [audio-worker-shim-light.js](https://raw.githubusercontent.com/mohayonao/audio-worker-shim/master/build/audio-worker-shim-light.js) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066HTML\u30d5\u30a1\u30a4\u30eb\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3001`AudioWorkerShim.polyfill();` \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u308c\u3067 AudioContext \u3067 `createAudioWorker` \u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n```html\n<script src=\"/path/to/audio-worker-shim.js\"></script>\n<script>AudioWorkerShim.polyfill();</script>\n```\n\n_\u88dc\u8db3\uff1aaudio-worker-shim-light.js \u3068\u306f\uff1f_\naudio-worker-shim-light.js \u306f [AudioWorkerGlobalScope](http://webaudio.github.io/web-audio-api/#the-audioworkerglobalscope-interface) \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570/\u95a2\u6570\u3092\u6697\u9ed9\u7684\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u30b3\u30fc\u30c9\u5185\u3067\u660e\u793a\u7684\u306b `self` \u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c 1/8 (560kB -> 70kB) \u3068\u8efd\u91cf\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n\n```js\n// audio-worker-shim.js \u3067\u306f\u3053\u3046\u66f8\u3051\u308b\u3051\u3069\nonmessage = function(e) {\n  console.log(sampleRate);\n};\n\n// audio-worker-shim-light.js \u3067\u306f\u3053\u3046\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044 (self\u304c\u5fc5\u8981)\nself.onmessage = function(e) {\n  console.log(self.sampleRate);\n};\n```\n\n## AudioWorker \u306e\u69cb\u6210\n\n<img width=\"719\" alt=\"audio-worker.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/2568/9b8f129c-b383-bdcd-3410-01c59de26abc.png\">\n\n\u6d41\u308c\u306f\u4ee5\u4e0b\u306e\u9806\u756a\n\n1. _main_ : [AudioWorker](http://webaudio.github.io/web-audio-api/#AudioWorkerNode) \u3092\u751f\u6210\n2. _worker_ : [AudioWorkerGlobalScope](http://webaudio.github.io/web-audio-api/#the-audioworkerglobalscope-interface) \u5185\u3067 `onaudioprocess` \u3084 `onnodecreate` \u3092\u5b9a\u7fa9\u3059\u308b\n3. _main_ : [AudioWorkerNode](http://webaudio.github.io/web-audio-api/#AudioWorkerNode) \u3092\u751f\u6210\n4. _worker_ : `onnodecreate` \u5185\u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\n5. _worker_ : `onaudioprocess` \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3046\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001`AudioWorker` \u3068 `AudioWorkerGlobalScope` \u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u7a7a\u9593\u3068\u3057\u3066\u3042\u3063\u3066\u3001`AudioWorkerNode` \u3068 `AudioWorkerNodeProcessor` \u304c\u500b\u3005\u306e AudioNode \u3068\u3057\u3066\u632f\u308b\u821e\u3046\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n## \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n### [AudioWorker](http://webaudio.github.io/web-audio-api/#AudioWorkerNode)\n\nAudioWorker \u306e **\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```\ninterface AudioWorker : Worker {\n    void            terminate ();\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler                 onmessage;\n                    attribute EventHandler                 onloaded;\n\n    AudioWorkerNode createNode (int numberOfInputs, int numberOfOutputs);\n\n    readonly        attribute AudioWorkerParamDescriptor[] parameters;\n    AudioParam      addParameter (DOMString name, float defaultValue);\n    void            removeParameter (DOMString name);\n};\n```\n\n[Worker](https://developer.mozilla.org/ja/docs/Web/API/Worker) \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (`postMessage` \u3084 `onmessage`) \u306b\u52a0\u3048\u3066\u3001`AudioWorkerNode` \u3092\u751f\u6210\u3059\u308b `createNode()` \u3084 AudioParam \u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (`parameters`, `addParameter` \u3084 `removeParameter`) \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n_\u8457\u8005\u6ce8\uff1a `addParameter` \u306e\u623b\u308a\u5024\u304c `AudioParam` \u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u4ed5\u69d8\u306e\u9593\u9055\u3044\u306a\u6c17\u304c\u3057\u307e\u3059_\n\n### [AudioWorkerGlobalScope](http://webaudio.github.io/web-audio-api/#the-audioworkerglobalscope-interface)\n\nAudioWorker \u306e **\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```\ninterface AudioWorkerGlobalScope : DedicatedWorkerGlobalScope {\n    readonly        attribute float                        sampleRate;\n                    attribute EventHandler                 onaudioprocess;\n                    attribute EventHandler                 onnodecreate;\n\n    readonly        attribute AudioWorkerParamDescriptor[] parameters;\n    AudioParam      addParameter (DOMString name, float defaultValue);\n    void            removeParameter (DOMString name);\n};\n```\n\n[DedicatedWorkerGlobalScope](https://developer.mozilla.org/ja/docs/Web/API/DedicatedWorkerGlobalScope) \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (`postMessage` \u3084 `onmessage`) \u306b\u52a0\u3048\u3066\u3001AudioParam \u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (`parameters`, `addParameter` \u3084 `removeParameter`)\u3001 \u4fe1\u53f7\u51e6\u7406\u3092\u66f8\u304f `onaudioprocess` \u3084\u500b\u3005\u306e\u30ce\u30fc\u30c9\u306e\u521d\u671f\u5316\u306b\u4f7f\u308f\u308c\u308b `onnodecreate` \u3068\u3044\u3063\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\n### [AudioWorkerParamDescriptor](http://webaudio.github.io/web-audio-api/#AudioWorkerParamDescriptor)\n\n\u4e0a\u8a18\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b `parameters` \u306e\u623b\u308a\u5024\u306b\u306a\u308b\u578b\u3067\u3059\u3002\n\n```\ninterface AudioWorkerParamDescriptor {\n    readonly        attribute DOMString name;\n    readonly        attribute float     defaultValue;\n};\n```\n\n\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5217\u6319\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```js\nself.parameters.map((param) => {\n  console.log(param.name, param.defaultValue);\n});\n```  \n\n### [AudioWorkerNode](http://webaudio.github.io/web-audio-api/#AudioWorkerNode)\n\nAudioWorker \u304b\u3089\u751f\u6210\u3055\u308c\u308b AudioNode \u306e **\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```\ninterface AudioWorkerNode : AudioNode {\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler onmessage;\n};\n```\n\n\u901a\u5e38\u306e [AudioNode](http://webaudio.github.io/web-audio-api/#the-audionode-interface) \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (`connect` \u3084 `disconnect`) \u306b\u52a0\u3048\u3066\u3001`AudioWorkerNodeProcessor` \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e `postMessage` \u3084 `onmessage` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n### [AudioWorkerNodeProcessor](http://webaudio.github.io/web-audio-api/#the-audioworkernodeprocessor-interface)\n\nAudioWorker \u304b\u3089\u751f\u6210\u3055\u308c\u308b AudioNode \u306e **\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```\ninterface AudioWorkerNodeProcessor : EventTarget {\n    void            postMessage (any message, optional sequence<Transferable> transfer);\n                    attribute EventHandler onmessage;\n};\n```\n\n\u4e0a\u8a18\u306e `AudioWorkerNode` \u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e `postMessage` \u3084 `onmessage` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n### [AudioWorkerNodeCreationEvent](http://webaudio.github.io/web-audio-api/#the-audioworkernodecreationevent-interface)\n\nAudioWorker \u304c AudioWorkerNode \u3092\u751f\u6210\u3057\u305f\u3068\u304d\u306b\u767a\u706b\u3055\u308c\u308b **\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n```\ninterface AudioWorkerNodeCreationEvent : Event {\n    readonly        attribute AudioWorkerNodeProcessor node;\n    readonly        attribute Array                    inputs;\n    readonly        attribute Array                    outputs;\n};\n```\n\n\u500b\u3005\u306e\u30ce\u30fc\u30c9\u7528\u306e\u30d1\u30e9\u30e1\u30fc\u30bf (\u30d0\u30c3\u30d5\u30a1\u3084\u8a2d\u5b9a\u5024\u306a\u3069) \u3092\u8a2d\u5b9a\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```js:worker.js\nself.onnodecreate = function(e) {\n  e.node.anyParameter = Math.random();\n  e.node.buffer = new Float32Array(4);\n};\n```\n\n### [AudioProcessEvent](http://webaudio.github.io/web-audio-api/#the-audioprocessevent-interface)\n\nAudioWorkerNode \u306e\u4fe1\u53f7\u51e6\u7406\u6642\u306b\u767a\u706b\u3055\u308c\u308b **\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074** \u306e\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002\n\n```\ninterface AudioProcessEvent : Event {\n    readonly        attribute double                   playbackTime;\n    readonly        attribute AudioWorkerNodeProcessor node;\n    readonly        attribute Float32Array[][]         inputs;\n    readonly        attribute Float32Array[][]         outputs;\n    readonly        attribute object                   parameters;\n};\n```\n\n`node` \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u500b\u3005\u306e\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```js:worker.js\nself.onaudioprocess = function(e) {\n  e.node.anyParameter; // \u30ce\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u308b\u5024\n  e.node.buffer;       // \u30ce\u30fc\u30c9\u3054\u3068\u306b\u7570\u306a\u308b\u30d0\u30c3\u30d5\u30a1\n};\n```\n\n## \u3084\u3063\u3066\u307f\u308b\n\n\u3067\u306f Web Audio API \u306e\u30c9\u30e9\u30d5\u30c8\u4ed5\u69d8\u306e [2.12.7.1 A Bitcrusher Node](http://webaudio.github.io/web-audio-api/#a-bitcrusher-node) \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089 AudioWorker \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n[Bitcrusher Node \u30c7\u30e2](http://mohayonao.github.io/audio-worker-shim/examples/bitcrusher.html) (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n```js:main.js\nvar bitcrusherFactory = null;\n\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(factory) {\n  // cache 'factory' in case you want to create more nodes!\n  bitcrusherFactory = factory;\n  \n  var bitcrusherNode = factory.createNode();\n      \n  bitcrusherNode.bits.setValueAtTime(8,0);\n  bitcrusherNode.connect(output); \n  \n  input.connect(bitcrusherNode);\n});\n```\n\n```js:bitcrusher_worker.js\n// Custom parameter - number of bits to crush down to - default 8\nthis.addParameter( \"bits\", 8 );\n\n// Custom parameter - frequency reduction, 0-1, default 0.5\nthis.addParameter( \"frequencyReduction\", 0.5 );\n\nonnodecreate = function(e) {\n  e.node.phaser = 0;\n  e.node.lastDataValue = 0;\n};\n\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var bitsArray = e.parameters.bits;\n    var frequencyReductionArray = e.parameters.frequencyReduction;\n\n    for (var i = 0; i < bufferLength; i++) {\n      var bits = bitsArray ? bitsArray[i] : 8;\n      var frequencyReduction = frequencyReductionArray ? frequencyReductionArray[i] : 0.5;\n      var step = Math.pow(1/2, bits);\n\n      e.node.phaser += frequencyReduction;\n      if (e.node.phaser >= 1.0) {\n          e.node.phaser -= 1.0;\n          e.node.lastDataValue = step * Math.floor(inputBuffer[i] / step + 0.5);\n      }\n      outputBuffer[i] = e.node.lastDataValue;\n    }\n  }\n};\n```\n\n### 1. AudioWorker \u3092\u751f\u6210\n\n**\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074**\n\nAudioWorker \u306f `AudioContext#createAudioWorker` \u3067\u751f\u6210\u3057\u307e\u3059\u3002WebWorker \u3068\u306e\u9055\u3044\u3068\u3057\u3066 Promise \u30d9\u30fc\u30b9\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u4ed6\u306e AudioNode \u306e\u9055\u3044\u3068\u3057\u3066 `createAudioWorker` \u3067\u5f97\u3089\u308c\u308b\u306e\u306f AudioNode \u3067\u306f\u306a\u304f AudioWorker \u306a\u306e\u3067\u3001\u3053\u308c\u3092\u4ed6\u306e AudioNode \u306b\u63a5\u7d9a\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f `bitcrusher_worker.js` \u3092\u8aad\u307f\u8fbc\u3093\u3067 `bitcrusherFactory` \u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002(`factory` \u304c AudioWorker \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059)\n\n```js:main.js\nvar bitcrusherFactory = null;\n\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(factory) {\n  // cache 'factory' in case you want to create more nodes!\n  bitcrusherFactory = factory;\n});\n```\n\n### 2. AudioWorkerGlobalScope \u5185\u3067 AudioParam \u3092\u5b9a\u7fa9\u3059\u308b\n\n**\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074**\n\n`addParameter` \u3092\u4f7f\u3063\u3066 AudioParam \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002`this` \u306e\u304b\u308f\u308a\u306b `self` \u3068\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u5b9a\u7fa9\u3057\u305f AudioParam \u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u306e AudioWorkerNode \u3067\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```js:bitcrusher_worker.js\n// Custom parameter - number of bits to crush down to - default 8\nthis.addParameter( \"bits\", 8 );\n\n// Custom parameter - frequency reduction, 0-1, default 0.5\nthis.addParameter( \"frequencyReduction\", 0.5 );\n\nparameters.map((param) => {\n  return [ param.name, param.defaultValue ];\n});\n// \u2192 [ [ \"bits\", 8 ], [ \"frequencyReduction\", 0.5 ] ]\n```\n\n```js:main.js\naudioContext.createAudioWorker(\"bitcrusher_worker.js\").then(function(worker) {\n  worker.parameters.map((param) => {\n    return [ param.name, param.defaultValue ];\n  });\n  // \u2192 [ [ \"bits\", 8 ], [ \"frequencyReduction\", 0.5 ] ]\n});\n```\n\n### 3. AudioWorkerNode \u3092\u751f\u6210\n\n**\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074**\n\n`AudioContext#createAudioWorker` \u3067\u751f\u6210\u3057\u305f AudioWorker \u306e `AudioWorker#createNode` \u3092\u547c\u3073\u51fa\u3057\u3066 AudioWorkerNode \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u751f\u6210\u3055\u308c\u308b AudioWorkerNode \u306f\u4ed6\u306e AudioNode \u3068\u540c\u3058\u3088\u3046\u306b `connect`, `disconnect` \u306e\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u524d\u6bb5\u3067\u8a2d\u5b9a\u3057\u305f AudioParam \u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```js:main.js\nvar node = bitcrusherFactory.createNode(2, 2);\n\nnode.bits.value = 2;\nnode.frequencyReduction.value = 0.25;\n\ninput.connect(node);\nnode.connect(audioContext.destination);\n```\n\n### 4. `onnodecreate` \u5185\u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\u3059\u308b\n\n**\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074**\n\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3067 `createNode` \u3092\u3057\u305f\u3068\u304d\u306b \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u30ce\u30fc\u30c9\u3054\u3068\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\n```js:bitcrusher_worker.js\nonnodecreate = function(e) {\n  e.node.phaser = 0;\n  e.node.lastDataValue = 0;\n};\n```\n\n### 5. `onaudioprocess` \u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3046\n\n**\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u5074**\n\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3067 AudioWorkerNode \u3092\u63a5\u7d9a\u3057\u305f\u3042\u3068\u3001\u9023\u7d9a\u7684\u306b\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u4fe1\u53f7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n`e.inputs[0][channel]: Float32Array` \u3067\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u306e\u5165\u529b\u3092\u8aad\u307f\u53d6\u308a\u3001\n`e.outputs[0][channel]: Float32Array` \u3067\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u306e\u51fa\u529b\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n`e.inputs[0]` \u306e `0` \u4ee5\u5916\u306f\u30c1\u30e3\u30cd\u30eb\u30de\u30fc\u30b8\u3084\u7d4c\u8def\u306e\u4ed8\u3051\u66ff\u3048\u306a\u3069\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u57fa\u672c\u7684\u306a\u7528\u9014\u3067\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u524d\u6bb5\u3067 `addParameter` \u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u305f AudioParam \u306e\u30c7\u30fc\u30bf\u306f `e.parameters[name]: Float32Array` \u3067\u4fe1\u53f7\u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n`e.node[name]: any` \u3067\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u8a2d\u5b9a\u5024\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f `onaudioprocess` \u306f\u3059\u3079\u3066\u306e\u30ce\u30fc\u30c9\u3067\u5171\u901a\u3067\u3001\u6e21\u3055\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5c5e\u6027\u5024\u3067\u305d\u308c\u305e\u308c\u306e\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u3092\u64cd\u4f5c\u3059\u308b\u3068\u3044\u3046\u70b9\u3067\u3059\u3002(C \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3063\u307d\u3044\u3053\u3068\u3092\u3059\u308b\u3068\u304d\u306e\u611f\u899a\u306b\u4f3c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059)\n\n`bitcrusher_worker` \u306e\u4f8b\u3067\u306f `e.parameters.bits` \u3084 `e.parameters.frequencyReduction` \u306e\u5024\u3092\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u4fe1\u53f7\u60c5\u5831\u3092\u52a3\u5316\u3055\u305b\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 `e.node.phaser` \u3084 `e.node.lastDataValue` \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```js:bitcrusher_worker.js\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var bitsArray = e.parameters.bits;\n    var frequencyReductionArray = e.parameters.frequencyReduction;\n\n    for (var i = 0; i < bufferLength; i++) {\n      var bits = bitsArray ? bitsArray[i] : 8;\n      var frequencyReduction = frequencyReductionArray ? frequencyReductionArray[i] : 0.5;\n      var step = Math.pow(1/2, bits);\n\n      e.node.phaser += frequencyReduction;\n      if (e.node.phaser >= 1.0) {\n          e.node.phaser -= 1.0;\n          e.node.lastDataValue = step * Math.floor(inputBuffer[i] / step + 0.5);\n      }\n      outputBuffer[i] = e.node.lastDataValue;\n    }\n  }\n};\n```\n\n### 6. \u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u5074\u3068\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\n\n#### AudioWorker <--> AudioWorkerGlobalScope\n\n\u3053\u308c\u306f Worker \u5168\u4f53\u306e\u8a2d\u5b9a\u3084\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u4f4d\u7f6e\u306b\u5fdc\u3058\u3066\u5168\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u308b\u4f8b\u3067\u3059\u3002\n\n- [MouseNoise Node \u30c7\u30e2](http://mohayonao.github.io/audio-worker-shim/examples/mousenoise.html) (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n```js:main.js\naudioContext.createAudioWorker(\"mousenoise_worker.js\").then(function(worker) {\n  window.addEventListener(\"mousemove\", function(e) {\n    var x = e.pageX / window.innerWidth;\n    var y = e.pageY / window.innerHeight;\n\n    worker.postMessage({ x: x, y: y }); \n  });\n});\n```\n\n```js:mousenoise_worker.js\nvar mouseGain = [ 0, 0 ];\n\nonmessage = function(e) {\n  mouseGain[0] = e.data.x;\n  mouseGain[1] = e.data.y;\n};\n\nonaudioprocess = function(e) {\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n    var outputBuffer = e.outputs[0][channel];\n    var bufferLength = inputBuffer.length;\n    var gain = mouseGain[channel % 2];\n    var noise;\n\n    for (var i = 0; i < bufferLength; i++) {\n      noise = Math.random();\n\n      if (noise < gain) {\n        outputBuffer[i] = inputBuffer[i];\n      } else if (noise < gain * gain) {\n        outputBuffer[i] = noise - 0.5;\n      } else {\n        outputBuffer[i] = 0;\n      }\n    }\n  }\n};\n```\n\n#### AudioWorkerNode <--> AudioWorkerNodeProcessor\n\n\u3053\u308c\u306f\u5404\u30ce\u30fc\u30c9\u3054\u3068\u306e\u8a2d\u5b9a\u3084\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u4fe1\u53f7\u30c7\u30fc\u30bf\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u9001\u308b\u4f8b\u3067\u3059\u3002\n\u5c11\u3057\u51dd\u3063\u305f\u8a66\u307f\u3068\u3057\u3066 1\u3064\u306e Float32Array \u3092 Transferable Objects \u3068\u3057\u3066\u30b0\u30eb\u30b0\u30eb\u56de\u3059\u3053\u3068\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3057\u3066\u3044\u307e\u3059\u3002\n\n- [Capture Node \u30c7\u30e2](http://mohayonao.github.io/audio-worker-shim/examples/capture.html) (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n\n```js:main.js\nfunction preview(buffer) {\n  console.log(buffer[0][0]);\n}\n\naudioContext.createAudioWorker(\"capture_worker.js\").then(function(worker) {\n  var node = worker.createNode(1, 1);\n\n  node.onmessage = function(e) {\n    var buffers = e.data;\n\n    preview(buffers);\n\n    node.postMessage(buffers, [ buffers[0].buffer, buffers[1].buffer ]);\n  };\n\n  inputs.connect(node);\n  node.connect(audioContext.destination);\n});\n```\n\n```js:capture_worker.js\nvar bufferLength = 2048;\n\nonnodecreate = function(e) {\n  var node = e.node;\n\n  node.buffers = [ new Float32Array(bufferLength), new Float32Array(bufferLength) ];\n  node.bufferIndex = 0;\n  node.onmessage = function(e) {\n    node.buffers = e.data;\n    node.bufferIndex = 0;\n  };\n};\n\nonaudioprocess = function(e) {\n  var node = e.node;\n\n  for (var channel = 0; channel < e.inputs[0].length; channel++) {\n    var inputBuffer = e.inputs[0][channel];\n\n    e.outputs[0][channel].set(inputBuffer);\n\n    if (node.buffers !== null) {\n      node.buffers[channel].set(inputBuffer, node.bufferIndex);\n    }\n  }\n\n  if (node.buffers !== null) {\n    node.bufferIndex += e.inputs[0][0].length;\n    if (bufferLength <= node.bufferIndex) {\n      node.postMessage(node.buffers, [ node.buffers[0].buffer, node.buffers[1].buffer ]);\n      node.buffers = null;\n    }\n  }\n};\n```\n\n## \u307e\u3068\u3081\n\n\u3056\u3063\u304f\u308a AudioWorker(Shim) \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u307e\u3060\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30d6\u30e9\u30a6\u30b6\u306f\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u78ba\u5b9a\u3057\u305f\u4ed5\u69d8\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u6700\u7d42\u7684\u306b\u306f\u5168\u7136\u9055\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306b\u306a\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u306a\u3093\u3068\u306a\u304f\u306e\u4f7f\u3044\u65b9\u306f\u30a4\u30e1\u30fc\u30b8\u3067\u304d\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\u50d5\u304c\u8a66\u3057\u306b\u66f8\u3044\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u7d39\u4ecb\u3057\u3066\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u7d42\u3048\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n- [Stutter Node \u30c7\u30e2](http://mohayonao.github.io/audio-worker-shim/examples/stutter.html) (\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u958b\u59cb\u3057\u307e\u3059)\n", "tags": ["JavaScript", "WebAudioAPI"]}