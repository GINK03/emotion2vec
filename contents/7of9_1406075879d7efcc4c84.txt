{"context": "\n\u52d5\u4f5c\u74b0\u5883\nUbuntu 14.04 LTS desktop amd64\nGeForce GTX 750 Ti\nASRock Z170M Pro4S [Intel Z170chipset]\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v7.5\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\n\n\u524d\u7f6e\u304d\nhttps://www.tensorflow.org/versions/r0.11/tutorials/mnist/beginners/index.html\nMNIST\u3092\u4f7f\u3063\u305f\u8a13\u7df4\u306b\u3064\u3044\u3066mnist_with_summaries.py\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\n\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u53d6\u3063\u3066\u304d\u3066\u8a13\u7df4\u3059\u308b\u3002\n\u81ea\u5206\u304c10\u5e74\u4ee5\u4e0a\u524d\u304b\u3089\u4f7f\u3063\u3066\u3044\u308bQMC\u3092\u4f7f\u3048\u3070\u8a13\u7df4\u306f\u52a0\u901f\u3055\u308c\u308b\u306e\u3067\u306f\u3001\u3068\u601d\u3044\u8a66\u3057\u305f\u3002\n\n\u5909\u66f4\u7b87\u62401. TensorFlow\u306emnist.py\u3092\u5909\u66f4\n\n\u5909\u66f4\u30d5\u30a1\u30a4\u30eb\nTensorFlow\u306emnist.py\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\nhttp://qiita.com/7of9/items/8d0fd50456bd02313941\n\u306b\u8a18\u8f09\u65b9\u6cd5\u3067\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306bmnist.py\u304c\u3042\u3063\u305f\u3002\n/home/yasokada/tensorflow-GPU/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py\n\n\u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u304c\u3042\u308b\u3002\n  def next_batch(self, batch_size, fake_data=False):\n\n\u4e0a\u8a18\u306e\u5b9a\u7fa9\u306e\u4e0b\u306b\u540c\u3058\u30a4\u30f3\u30c7\u30f3\u30c8\u3067\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3059\u308b\u3002\n  # { by 7of9 (2016 Oct. 22) -----------------------------------------------\n  def Halton_sequence(self, i0):\n      xbase = 2\n      ybase = 3\n\n      invxbase = 1.0 / xbase\n      facx = 1.0 / xbase\n\n      invybase = 1.0 / ybase\n      facy = 1.0 / ybase\n\n      inp = i0\n      x0 = 0.0\n      while inp > 0:\n          x0 = x0 + (inp % xbase) * invxbase\n          inp = inp / xbase\n          invxbase = invxbase * facx\n\n      inp = i0\n      y0 = 0.0\n      while inp > 0:\n          y0 = y0 + (inp % ybase) * invybase\n          inp = inp / ybase\n          invybase = invybase * facy\n\n      return x0, y0\n\n  def qmc_getIndex(self, listSize, start, getsize):\n    idx = numpy.array([])\n    for i0 in range(start, start + getsize):\n      res, _ = self.Halton_sequence(i0) # discard 2nd dim\n      # TODO: strange (normally res should not exceed 1.0)\n      if res > 1.0:\n        res = 1.0\n      #\n      idx = numpy.append(idx, res * listSize - 1)\n    return idx\n\n  def qmc_batch(self, batch_size, fake_data=False):\n    \"\"\"Return the next `batch_size` examples from this data set.\"\"\"\n    if fake_data:\n      fake_image = [1] * 784\n      if self.one_hot:\n        fake_label = [1] + [0] * 9\n      else:\n        fake_label = 0\n      return [fake_image for _ in xrange(batch_size)], [\n          fake_label for _ in xrange(batch_size)\n      ]\n    start = self._index_in_epoch\n    self._index_in_epoch += batch_size\n\n    length = self._num_examples\n    #length = 55000 # TODO\n    idx = self.qmc_getIndex(length, start, batch_size)\n\n    if self._index_in_epoch > self._num_examples:\n      # Finished epoch\n      self._epochs_completed += 1\n      # Shuffle the data\n      perm = numpy.arange(self._num_examples)\n      numpy.random.shuffle(perm)\n      self._images = self._images[perm]\n      self._labels = self._labels[perm]\n      # Start next epoch\n      start = 0\n      self._index_in_epoch = batch_size\n      assert batch_size <= self._num_examples\n      end = self._index_in_epoch\n      return self._images[start:end], self._labels[start:end]\n\n    return self._images[idx.astype(int)], self._labels[idx.astype(int)]\n  # } by 7of9 (2016 Oct. 22) -----------------------------------------------\n\n\n\u5909\u66f4\u7b87\u62402. mnist_with_summaries.py\u3092\u5909\u66f4\n\u4eca\u5ea6\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u4f7f\u3063\u3066\u3044\u308bmnist_with_summaries.py\u3092mnist_qmc.py\u3068\u3044\u3046\u540d\u524d\u306b\u30b3\u30d4\u30fc\u3057\u3066\u5909\u66f4\u3057\u305f\u3002\ndef feed_dict(train):\u306b\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002next_batch()\u306e\u4ee3\u308f\u308a\u306bqmc_batch()\u3092\u4f7f\u3046\u3002\n\n\u5909\u66f4\u524d\n  def feed_dict(train):\n    \"\"\"Make a TensorFlow feed_dict: maps data onto Tensor placeholders.\"\"\"\n    if train or FLAGS.fake_data:\n      xs, ys = mnist.train.next_batch(100, fake_data=FLAGS.fake_data)\n\n\n\n\u5909\u66f4\u5f8c\n  def feed_dict(train):\n    \"\"\"Make a TensorFlow feed_dict: maps data onto Tensor placeholders.\"\"\"\n    if train or FLAGS.fake_data:\n#      xs, ys = mnist.train.next_batch(100, fake_data=FLAGS.fake_data)\n      xs, ys = mnist.train.qmc_batch(100, fake_data=FLAGS.fake_data)\n\n\n\n\u7d50\u679c\npython mnist_with_summaries.py\n\u3068\npython mnist_qmc.py\n\u3067\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u305f\u3002\n\nQMC\u306a\u3057 (\u901a\u5e38\u306emnist_with_summaries.py)\npython mnist_with_summaries.py\n\u30aa\u30ec\u30f3\u30b8: test\n\u6c34\u8272: train\n\n\n\n\nName\nSmoothed\nValue\nStep\nRelative\n\n\n\n\ntest\n0.9686\n0.9686\n990.0\n37s\n\n\ntrain\n0.9600\n0.9600\n987.0\n37s\n\n\n\n\nQMC\u3042\u308a (python mnist_qmc.py)\npython mnist_qmc.py\n\n\n\n\nName\nSmoothed\nValue\nStep\nRelative\n\n\n\n\ntest\n0.9658\n0.9658\n990.0\n59s\n\n\ntrain\n0.9800\n0.9800\n999.0\n59s\n\n\n\ntrain\u304c\u82e5\u5e72\u4e0a\u304c\u3063\u305f\u3002\n\u306a\u304a\u3001train\u304c1.000\u3068\u3044\u3046\u7d50\u679c\u3092\u305f\u305f\u304d\u51fa\u3057\u3053\u3068\u3082\u3042\u308b\u3002\n\uff08\u305d\u306e\u6642\u306etest\u306eSmoothed\u306f0.966\u7a0b\u5ea6\u3060\u3063\u305f)\n1.000\u306b\u306a\u3063\u305f\u306e\u306f10\u56de\u4e2d1\u56de\u3060\u3051\u306a\u306e\u3067\u3001\u78ba\u7387\u3068\u3057\u3066\u306f\u9ad8\u304f\u306a\u3044\u3002\u3042\u3068\u306f0.95\u304b\u30890.98\u306e\u5024\u3092\u5909\u52d5\u3059\u308b\u3002\nQMC\u4f7f\u7528\u306e\u5834\u5408\u3001train\u6700\u5f8c\u306e\u7cbe\u5ea6\u304c\u6025\u5909\u3059\u308b\u3002\n\u7406\u7531\u306f\u4e0d\u660e\u3002\n\ntrain\u304c1.000\u306e\u4f8b\u3002\u305f\u3060\u3057\u3001max_step2000\u3067\u8a66\u3057\u305f\u6642\u3002\n\n\n\u6ce8\u610f\u70b9\nQMC\u5b9f\u88c5\u306f\u304d\u3061\u3093\u3068\u4e2d\u8eab\u3092\u898b\u5207\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u307e\u3060\u9593\u9055\u3044\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nres\u306e\u5024\u304c1.0\u3092\u8d85\u3048\u308b\u73fe\u8c61\u304c\u3042\u308a\u3001\u305d\u3053\u304c\u5931\u6557\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nv0.2 (\u9593\u9055\u3044\u4fee\u6b63)\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u9593\u9055\u3063\u3066\u3044\u305f\u3002\nmnist.py\u306b\u5165\u308c\u308b\u4fee\u6b63\u306f\u4ee5\u4e0b\u3002\n  # { by 7of9 (2016 Oct. 22) -----------------------------------------------\n  def Halton_sequence(self, i0):\n      xbase = 2\n      ybase = 3\n\n      invxbase = 1.0 / xbase\n      facx = 1.0 / xbase\n\n      invybase = 1.0 / ybase\n      facy = 1.0 / ybase\n\n      inp = i0\n      x0 = 0.0\n      while inp > 0:\n          x0 = x0 + (inp % xbase) * invxbase\n          inp = inp / xbase\n          invxbase = invxbase * facx\n\n      inp = i0\n      y0 = 0.0\n      while inp > 0:\n          y0 = y0 + (inp % ybase) * invybase\n          inp = inp / ybase\n          invybase = invybase * facy\n\n      return x0, y0\n\n  def qmc_getIndex(self, listSize, start, getsize):\n    idx = numpy.array([])\n    for i0 in range(start, start + getsize):\n      res, _ = self.Halton_sequence(i0) # discard 2nd dim\n      # TODO: strange (normally res should not exceed 1.0)\n      if res > 1.0:\n        res = 1.0\n      #\n      idx = numpy.append(idx, res * listSize - 1)\n    return idx\n\n  def qmc_batch(self, batch_size, fake_data=False):\n    \"\"\"Return the next `batch_size` examples from this data set.\"\"\"\n    if fake_data:\n      fake_image = [1] * 784\n      if self.one_hot:\n        fake_label = [1] + [0] * 9\n      else:\n        fake_label = 0\n      return [fake_image for _ in xrange(batch_size)], [\n          fake_label for _ in xrange(batch_size)\n      ]\n    start = self._index_in_epoch\n    self._index_in_epoch += batch_size\n\n    length = self._num_examples\n    #length = 55000 # TODO\n    idx = self.qmc_getIndex(length, start, batch_size)\n\n#    if self._index_in_epoch > self._num_examples:\n#      # Finished epoch\n#      self._epochs_completed += 1\n#      # Shuffle the data\n#      perm = numpy.arange(self._num_examples)\n#      numpy.random.shuffle(perm)\n#      self._images = self._images[perm]\n#      self._labels = self._labels[perm]\n#      # Start next epoch\n#      start = 0\n#      self._index_in_epoch = batch_size\n#      assert batch_size <= self._num_examples\n#      end = self._index_in_epoch\n#      return self._images[start:end], self._labels[start:end]\n\n    return self._images[idx.astype(int)], self._labels[idx.astype(int)]\n  # } by 7of9 (2016 Oct. 22) -----------------------------------------------\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304cself._num_examples\u3092\u8d85\u3048\u305f\u6642\u306e\u30d7\u30ed\u30c6\u30af\u30c8\u304c\u5165\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u304c\u3001QMC\u3092\u901a\u3059\u3068\u3001\u304b\u306a\u3089\u305a(0, 1.0)\u306e\u5024\u57df\u306b\u5165\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u4e0d\u8981\u3002\n\u3064\u307e\u308a\u306f\u3001\u300c\u52c9\u5f37\u3092\u3057\u3063\u304b\u308a\u3084\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u751f\u5f92\u306b\u5b89\u5fc3\u3057\u3066\u9014\u4e2d\u304b\u3089\u3088\u304f\u898b\u3066\u306a\u304b\u3063\u305f\u3089\u3001\u6f2b\u753b\u8aad\u3093\u3067\u52c9\u5f37\u3055\u307c\u3063\u3066\u3044\u305f\u300d\u72b6\u614b\uff08\u9577\u3044\uff09\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\u3053\u3061\u3089\u304c\u8a02\u6b63\u5f8c\u306e\u7d50\u679c\u3002\u7cbe\u5ea6\u304c\u7d14\u5897\u3057\u3066\u3044\u304f\u306e\u3067\u5927\u304d\u304f\u9593\u9055\u3063\u3066\u3044\u306a\u3044\u304b\u3068\u601d\u3046\u3002\n3\u56de\u9023\u7d9a1.000\u306etrain\u7d50\u679c\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002over-learning\u3060\u308d\u3046\u304b\u3002\n\n\n\nmnist_with_summaries.py\u3067\u3082max_step=2000\u306e\u6642\u306ftrain\u304c0.9900\u306b\u306f\u306a\u3063\u305f\u3002\nQMC\u304c\u3059\u3054\u304f\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u3044\u304b\u3082\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nUbuntu 14.04 LTS desktop amd64\nGeForce GTX 750 Ti\nASRock Z170M Pro4S [Intel Z170chipset]\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v7.5\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\n## \u524d\u7f6e\u304d\n\nhttps://www.tensorflow.org/versions/r0.11/tutorials/mnist/beginners/index.html\n\nMNIST\u3092\u4f7f\u3063\u305f\u8a13\u7df4\u306b\u3064\u3044\u3066`mnist_with_summaries.py`\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\n\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u4f4d\u7f6e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u53d6\u3063\u3066\u304d\u3066\u8a13\u7df4\u3059\u308b\u3002\n\n\u81ea\u5206\u304c10\u5e74\u4ee5\u4e0a\u524d\u304b\u3089\u4f7f\u3063\u3066\u3044\u308bQMC\u3092\u4f7f\u3048\u3070\u8a13\u7df4\u306f\u52a0\u901f\u3055\u308c\u308b\u306e\u3067\u306f\u3001\u3068\u601d\u3044\u8a66\u3057\u305f\u3002\n\n## \u5909\u66f4\u7b87\u62401. TensorFlow\u306emnist.py\u3092\u5909\u66f4\n\n### \u5909\u66f4\u30d5\u30a1\u30a4\u30eb\n\nTensorFlow\u306emnist.py\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\nhttp://qiita.com/7of9/items/8d0fd50456bd02313941\n\u306b\u8a18\u8f09\u65b9\u6cd5\u3067\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u4ee5\u4e0b\u306bmnist.py\u304c\u3042\u3063\u305f\u3002\n\n`/home/yasokada/tensorflow-GPU/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py\n`\n\n\u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u304a\u3044\u3066\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u304c\u3042\u308b\u3002\n\n```\n  def next_batch(self, batch_size, fake_data=False):\n```\n\n\u4e0a\u8a18\u306e\u5b9a\u7fa9\u306e\u4e0b\u306b\u540c\u3058\u30a4\u30f3\u30c7\u30f3\u30c8\u3067\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n```py\n  # { by 7of9 (2016 Oct. 22) -----------------------------------------------\n  def Halton_sequence(self, i0):\n      xbase = 2\n      ybase = 3\n\n      invxbase = 1.0 / xbase\n      facx = 1.0 / xbase\n\n      invybase = 1.0 / ybase\n      facy = 1.0 / ybase\n\n      inp = i0\n      x0 = 0.0\n      while inp > 0:\n          x0 = x0 + (inp % xbase) * invxbase\n          inp = inp / xbase\n          invxbase = invxbase * facx\n\n      inp = i0\n      y0 = 0.0\n      while inp > 0:\n          y0 = y0 + (inp % ybase) * invybase\n          inp = inp / ybase\n          invybase = invybase * facy\n\n      return x0, y0\n\n  def qmc_getIndex(self, listSize, start, getsize):\n    idx = numpy.array([])\n    for i0 in range(start, start + getsize):\n      res, _ = self.Halton_sequence(i0) # discard 2nd dim\n      # TODO: strange (normally res should not exceed 1.0)\n      if res > 1.0:\n        res = 1.0\n      #\n      idx = numpy.append(idx, res * listSize - 1)\n    return idx\n\n  def qmc_batch(self, batch_size, fake_data=False):\n    \"\"\"Return the next `batch_size` examples from this data set.\"\"\"\n    if fake_data:\n      fake_image = [1] * 784\n      if self.one_hot:\n        fake_label = [1] + [0] * 9\n      else:\n        fake_label = 0\n      return [fake_image for _ in xrange(batch_size)], [\n          fake_label for _ in xrange(batch_size)\n      ]\n    start = self._index_in_epoch\n    self._index_in_epoch += batch_size\n\n    length = self._num_examples\n    #length = 55000 # TODO\n    idx = self.qmc_getIndex(length, start, batch_size)\n\n    if self._index_in_epoch > self._num_examples:\n      # Finished epoch\n      self._epochs_completed += 1\n      # Shuffle the data\n      perm = numpy.arange(self._num_examples)\n      numpy.random.shuffle(perm)\n      self._images = self._images[perm]\n      self._labels = self._labels[perm]\n      # Start next epoch\n      start = 0\n      self._index_in_epoch = batch_size\n      assert batch_size <= self._num_examples\n      end = self._index_in_epoch\n      return self._images[start:end], self._labels[start:end]\n\n    return self._images[idx.astype(int)], self._labels[idx.astype(int)]\n  # } by 7of9 (2016 Oct. 22) -----------------------------------------------\n```\n\n## \u5909\u66f4\u7b87\u62402. mnist_with_summaries.py\u3092\u5909\u66f4\n\n\u4eca\u5ea6\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u4f7f\u3063\u3066\u3044\u308b`mnist_with_summaries.py`\u3092`mnist_qmc.py`\u3068\u3044\u3046\u540d\u524d\u306b\u30b3\u30d4\u30fc\u3057\u3066\u5909\u66f4\u3057\u305f\u3002\n\n\n`  def feed_dict(train):`\u306b\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002next_batch()\u306e\u4ee3\u308f\u308a\u306bqmc_batch()\u3092\u4f7f\u3046\u3002\n\n```txt:\u5909\u66f4\u524d\n  def feed_dict(train):\n    \"\"\"Make a TensorFlow feed_dict: maps data onto Tensor placeholders.\"\"\"\n    if train or FLAGS.fake_data:\n      xs, ys = mnist.train.next_batch(100, fake_data=FLAGS.fake_data)\n```\n\n```txt:\u5909\u66f4\u5f8c\n  def feed_dict(train):\n    \"\"\"Make a TensorFlow feed_dict: maps data onto Tensor placeholders.\"\"\"\n    if train or FLAGS.fake_data:\n#      xs, ys = mnist.train.next_batch(100, fake_data=FLAGS.fake_data)\n      xs, ys = mnist.train.qmc_batch(100, fake_data=FLAGS.fake_data)\n```\n\n## \u7d50\u679c\n\npython mnist_with_summaries.py\n\u3068\npython mnist_qmc.py\n\u3067\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u305f\u3002\n\n### QMC\u306a\u3057 (\u901a\u5e38\u306emnist_with_summaries.py)\n\npython mnist_with_summaries.py\n\n\u30aa\u30ec\u30f3\u30b8: test\n\u6c34\u8272: train\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/cf53c3e3-ad9b-353a-1eb0-77059906128c.png)\n\n| Name | Smoothed | Value | Step | Relative |\n|:-:|:-:|:-:|:-:|:-:|\n| test  | 0.9686  | 0.9686  | 990.0  | 37s  |\n| train | 0.9600  | 0.9600  | 987.0  | 37s |\n\n### QMC\u3042\u308a (python mnist_qmc.py)\n\npython mnist_qmc.py\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/a2d4875e-9adb-d89e-2a28-da96c3c525d6.png)\n\n| Name | Smoothed | Value | Step | Relative |\n|:-:|:-:|:-:|:-:|:-:|\n| test | 0.9658 | 0.9658 | 990.0 | 59s |\n| train | 0.9800 | 0.9800 | 999.0 | 59s |\n\ntrain\u304c\u82e5\u5e72\u4e0a\u304c\u3063\u305f\u3002\n\u306a\u304a\u3001train\u304c1.000\u3068\u3044\u3046\u7d50\u679c\u3092\u305f\u305f\u304d\u51fa\u3057\u3053\u3068\u3082\u3042\u308b\u3002\n\uff08\u305d\u306e\u6642\u306etest\u306eSmoothed\u306f0.966\u7a0b\u5ea6\u3060\u3063\u305f)\n1.000\u306b\u306a\u3063\u305f\u306e\u306f10\u56de\u4e2d1\u56de\u3060\u3051\u306a\u306e\u3067\u3001\u78ba\u7387\u3068\u3057\u3066\u306f\u9ad8\u304f\u306a\u3044\u3002\u3042\u3068\u306f0.95\u304b\u30890.98\u306e\u5024\u3092\u5909\u52d5\u3059\u308b\u3002\n\nQMC\u4f7f\u7528\u306e\u5834\u5408\u3001train\u6700\u5f8c\u306e\u7cbe\u5ea6\u304c\u6025\u5909\u3059\u308b\u3002\n\u7406\u7531\u306f\u4e0d\u660e\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/44405406-d5fa-71d2-5438-78dab3eecb53.png)\n\ntrain\u304c1.000\u306e\u4f8b\u3002\u305f\u3060\u3057\u3001max_step2000\u3067\u8a66\u3057\u305f\u6642\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/68005920-b815-12df-e19b-c49490b27491.png)\n\n\n## \u6ce8\u610f\u70b9\n\nQMC\u5b9f\u88c5\u306f\u304d\u3061\u3093\u3068\u4e2d\u8eab\u3092\u898b\u5207\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u307e\u3060\u9593\u9055\u3044\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nres\u306e\u5024\u304c1.0\u3092\u8d85\u3048\u308b\u73fe\u8c61\u304c\u3042\u308a\u3001\u305d\u3053\u304c\u5931\u6557\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n## v0.2 (\u9593\u9055\u3044\u4fee\u6b63)\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u9593\u9055\u3063\u3066\u3044\u305f\u3002\n\nmnist.py\u306b\u5165\u308c\u308b\u4fee\u6b63\u306f\u4ee5\u4e0b\u3002\n\n```py\n  # { by 7of9 (2016 Oct. 22) -----------------------------------------------\n  def Halton_sequence(self, i0):\n      xbase = 2\n      ybase = 3\n\n      invxbase = 1.0 / xbase\n      facx = 1.0 / xbase\n\n      invybase = 1.0 / ybase\n      facy = 1.0 / ybase\n\n      inp = i0\n      x0 = 0.0\n      while inp > 0:\n          x0 = x0 + (inp % xbase) * invxbase\n          inp = inp / xbase\n          invxbase = invxbase * facx\n\n      inp = i0\n      y0 = 0.0\n      while inp > 0:\n          y0 = y0 + (inp % ybase) * invybase\n          inp = inp / ybase\n          invybase = invybase * facy\n\n      return x0, y0\n\n  def qmc_getIndex(self, listSize, start, getsize):\n    idx = numpy.array([])\n    for i0 in range(start, start + getsize):\n      res, _ = self.Halton_sequence(i0) # discard 2nd dim\n      # TODO: strange (normally res should not exceed 1.0)\n      if res > 1.0:\n        res = 1.0\n      #\n      idx = numpy.append(idx, res * listSize - 1)\n    return idx\n\n  def qmc_batch(self, batch_size, fake_data=False):\n    \"\"\"Return the next `batch_size` examples from this data set.\"\"\"\n    if fake_data:\n      fake_image = [1] * 784\n      if self.one_hot:\n        fake_label = [1] + [0] * 9\n      else:\n        fake_label = 0\n      return [fake_image for _ in xrange(batch_size)], [\n          fake_label for _ in xrange(batch_size)\n      ]\n    start = self._index_in_epoch\n    self._index_in_epoch += batch_size\n\n    length = self._num_examples\n    #length = 55000 # TODO\n    idx = self.qmc_getIndex(length, start, batch_size)\n\n#    if self._index_in_epoch > self._num_examples:\n#      # Finished epoch\n#      self._epochs_completed += 1\n#      # Shuffle the data\n#      perm = numpy.arange(self._num_examples)\n#      numpy.random.shuffle(perm)\n#      self._images = self._images[perm]\n#      self._labels = self._labels[perm]\n#      # Start next epoch\n#      start = 0\n#      self._index_in_epoch = batch_size\n#      assert batch_size <= self._num_examples\n#      end = self._index_in_epoch\n#      return self._images[start:end], self._labels[start:end]\n\n    return self._images[idx.astype(int)], self._labels[idx.astype(int)]\n  # } by 7of9 (2016 Oct. 22) -----------------------------------------------\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304cself._num_examples\u3092\u8d85\u3048\u305f\u6642\u306e\u30d7\u30ed\u30c6\u30af\u30c8\u304c\u5165\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u304c\u3001QMC\u3092\u901a\u3059\u3068\u3001\u304b\u306a\u3089\u305a(0, 1.0)\u306e\u5024\u57df\u306b\u5165\u308b\u306e\u3067\u3001\u3053\u308c\u306f\u4e0d\u8981\u3002\n\n\u3064\u307e\u308a\u306f\u3001\u300c\u52c9\u5f37\u3092\u3057\u3063\u304b\u308a\u3084\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u751f\u5f92\u306b\u5b89\u5fc3\u3057\u3066\u9014\u4e2d\u304b\u3089\u3088\u304f\u898b\u3066\u306a\u304b\u3063\u305f\u3089\u3001\u6f2b\u753b\u8aad\u3093\u3067\u52c9\u5f37\u3055\u307c\u3063\u3066\u3044\u305f\u300d\u72b6\u614b\uff08\u9577\u3044\uff09\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\n\u3053\u3061\u3089\u304c\u8a02\u6b63\u5f8c\u306e\u7d50\u679c\u3002\u7cbe\u5ea6\u304c\u7d14\u5897\u3057\u3066\u3044\u304f\u306e\u3067\u5927\u304d\u304f\u9593\u9055\u3063\u3066\u3044\u306a\u3044\u304b\u3068\u601d\u3046\u3002\n3\u56de\u9023\u7d9a1.000\u306etrain\u7d50\u679c\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002over-learning\u3060\u308d\u3046\u304b\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/50ff0fd7-c9bd-799c-7e2a-115824d15dca.png)\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/bf51bc61-a5b1-17a1-2976-fa2e0cdc14f0.png)\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/4a636b80-521b-a517-4d74-1ff8389754aa.png)\n\nmnist_with_summaries.py\u3067\u3082max_step=2000\u306e\u6642\u306ftrain\u304c0.9900\u306b\u306f\u306a\u3063\u305f\u3002\nQMC\u304c\u3059\u3054\u304f\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u3044\u304b\u3082\u3002\n\n", "tags": ["TensorFlow", "QMC", "borgWarp"]}