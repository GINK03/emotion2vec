{"context": "\u524d\u56de\u306b\u5f15\u304d\u7d9a\u304d\u3001Coursera Machine Learning\u306e\u6f14\u7fd2\u3092TensorFlow\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u6f14\u7fd2\u8ab2\u984c\u5185\u5bb9\n\u7dda\u5f62\u56de\u5e30(linear regression)\u306b\u3088\u308a\u3001\u5bb6\u306e\u9762\u7a4d\u3068\u5bdd\u5ba4\u306e\u6570\u304b\u3089\u5bb6\u306e\u4fa1\u683c\u3092\u4e88\u6e2c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u524d\u56de\u3068\u540c\u69d8\u306b\u7dda\u5f62\u56de\u5e30\u3067\u3059\u304c\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6570\u304c\u8907\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5927\u304d\u306a\u9055\u3044\u3068\u306a\u308a\u307e\u3059\u3002\n\nTensorFlow\u3067\u306e\u5b9f\u88c5\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\u307e\u305a\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5bb6\u306e\u9762\u7a4d(\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\u3001\u5bdd\u5ba4\u6570\u3001\u4fa1\u683c\u306e\u5024\u304c\u30ab\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\ndata/ex1/ex1data2.txt\n2104,3,399900\n1600,3,329900\n2400,3,369000\n1416,2,232000\n3000,4,539900\n...\n\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u305f\u3081\u3001\u4e00\u5ea6\u306b\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\nimport numpy as np\n\ndata = np.genfromtxt('data/ex1/ex1data2.txt', delimiter=',')\ninput_X = data[:, 0:2].astype(np.float32)\ninput_y = data[:, 2:3].astype(np.float32)\n\nnp.genfromtxt()\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30b5\u30a4\u30ba\u304c $m \\times 3$ \u306e\u884c\u5217(numpy\u306e2\u6b21\u5143\u914d\u5217)\u3068\u3057\u3066data\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002numpy\u306e\u30b9\u30e9\u30a4\u30b9\u8868\u8a18\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u305f\u7d50\u679c\u3001input_X\u3068input_y\u306e\u30b5\u30a4\u30ba\u306f\u3001$m \\times 2$ \u3068 $m \\times 1$ \u306b\u305d\u308c\u305e\u308c\u306a\u308a\u307e\u3059\u3002\n\n\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6b63\u898f\u5316\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3001\u5bb6\u306e\u9762\u7a4d\u306f\u5bdd\u5ba4\u6570\u306e\u7d041000\u500d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3067\u5024\u304c\u5927\u304d\u304f\u7570\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u6700\u6025\u964d\u4e0b\u6cd5\u3092\u5b9f\u884c\u3057\u3066\u3082\u53ce\u675f\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\n\\frac{X - \\mu}{\\sigma}\n$${\\frac{X - \\mu}{\\sigma}\n}$$\n\n$\\mu$: \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u5e73\u5747\n$\\sigma$: \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6a19\u6e96\u504f\u5dee\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u5927\u4f53\u306e\u30c7\u30fc\u30bf\u304c\u00b12\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b63\u898f\u5316\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b\u306e\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u307f\u306b\u306a\u308b\u305f\u3081\u3001\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u306e\u30b7\u30a7\u30a4\u30d7(\u914d\u5217\u306e\u5404\u6b21\u5143\u306e\u5927\u304d\u3055)\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ntrain_X = tf.placeholder(dtype=input_X.dtype, shape=input_X.shape, name='train_X')\n\n\u3053\u306e\u3042\u3068\u3001tf.nn.moments()\u3092\u4f7f\u3063\u3066train_X\u306b\u5bfe\u3057\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u307e\u3059\u3002train_X\u306e\u30b7\u30a7\u30a4\u30d7\u306f(47, 2)\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e0\u756a\u76ee\u306e\u8ef8(47\u306e\u65b9)\u306b\u5bfe\u3057\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u305f\u3081\u3001axes=[0]\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c2\u3064\u3067\u3042\u308b\u305f\u3081\u3001\u6c42\u3081\u305f\u7d50\u679c\u306f\u30b5\u30a4\u30ba\u304c2\u306e\u30d9\u30af\u30c8\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\nmean, var = tf.nn.moments(train_X, axes=[0])\nprint(train_X.shape, mean.shape, var.shape)\n\n\n\u5b9f\u884c\u7d50\u679c\n(47, 2) (2,) (2,)\n\n\nmean\u3068var(\u306e\u5e73\u65b9\u6839)\u3092\u76f4\u63a5\u4f7f\u3063\u3066\u6b63\u898f\u5316\u3057\u3066\u3082\u52d5\u4f5c\u306f\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068\u5b66\u7fd2\u6642\u3060\u3051\u3067\u306a\u304f\u3001\u5b66\u7fd2\u5f8c\u306b\u4e88\u6e2c\u3059\u308b\u5834\u5408\u3067\u3082input_X\u3092\u4f7f\u3063\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3055\u3059\u304c\u306b\u3053\u308c\u306f\u975e\u52b9\u7387\u3067\u3042\u308b\u305f\u3081\u3001mean\u3068var\u306e\u5e73\u65b9\u6839\u3092\u5909\u6570mu\u3068sigma\u306b\u683c\u7d0d\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nmu = tf.Variable(mean, trainable=False, collections=[], name='mu')\nsigma = tf.Variable(tf.sqrt(var), trainable=False, collections=[], name='sigma')\n\n\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u5b66\u7fd2\u7528\u306e\u5909\u6570\u3067\u306f\u306a\u3044\u305f\u3081\u3001trainable=False\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u4ed6\u306e\u5909\u6570\u3068\u4e00\u7dd2\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001collections=[]\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bmu\u3068sigma\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\nsess = tf.Session()\nsess.run([mu.initializer, sigma.initializer], feed_dict={train_X: input_X})\n\n\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u6b63\u898f\u5316\u3059\u308b\u524d\u306b\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002X\u306b\u3064\u3044\u3066\u306f\u3001\u5b66\u7fd2\u6642\u3060\u3051\u3067\u306a\u304f\u4e88\u6e2c\u3067\u3082\u5229\u7528\u3059\u308b\u305f\u3081\u3001train_X\u3068\u306f\u5225\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nX = tf.placeholder(tf.float32, shape=[None, 2], name='X')\ny = tf.placeholder(tf.float32, shape=[None, 1], name='y')\n\n\u306a\u304a\u3001\u524d\u56de\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u306b\u5bfe\u3057\u3066shape\u306f\u6307\u5b9a\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u884c\u5217\u3092\u4f7f\u3063\u3066\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30b7\u30a7\u30a4\u30d7\u306e0\u756a\u76ee\u306e\u5024\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5834\u5408\u306b\u306f$m$(\u5b9f\u969b\u306b\u306f47)\u3067\u3059\u304c\u3001\u4e88\u6e2c\u306b\u3082\u4f7f\u3046\u305f\u3081\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6570\u306b\u306fNone\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u6b63\u898f\u5316\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001X\u306e\u30b7\u30a7\u30a4\u30d7\u306f(None, 2)(\u5b66\u7fd2\u6642\u306f(47,2))\u306b\u5bfe\u3057\u3066mu\u3068sigma\u306e\u30b7\u30a7\u30a4\u30d7\u306f(2,)\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u3063\u3066\u3046\u307e\u3044\u5177\u5408\u306bTensorFlow\u304c\u30b7\u30a7\u30a4\u30d7\u3092\u63c3\u3048\u3066\u304f\u308c\u307e\u3059\u3002\nnorm_X = (X - mu) / sigma\n\nprint(sess.run(norm_X, feed_dict={X: input_X}))\n\n\n\u5b9f\u884c\u7d50\u679c\n[[  1.31415352e-01  -2.26093307e-01]\n [ -5.09640813e-01  -2.26093307e-01]\n [  5.07908642e-01  -2.26093307e-01]\n ...\n [ -1.46104956e+00  -1.55439162e+00]\n [ -1.89112723e-01   1.10220504e+00]\n [ -1.01459968e+00  -2.26093307e-01]]\n\n\n\n\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306e\u69cb\u7bc9\n\u6b63\u898f\u5316\u3055\u308c\u305fnorm_X\u304c\u5b9a\u7fa9\u3067\u304d\u305f\u305f\u3081\u3001\u4eee\u8aac\u95a2\u6570\u3068\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u8868\u3059weights\u3092$2 \\times 1$\u306e\u884c\u5217(\u5217\u30d9\u30af\u30c8\u30eb)\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u4eee\u8a2d\u95a2\u6570\u3092\u884c\u5217\u306e\u639b\u3051\u7b97\u3068\u3057\u3066\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\nweights = tf.Variable(tf.zeros([2, 1]), dtype=tf.float32, name='weights')\nbias = tf.Variable(tf.zeros([1]), dtype=tf.float32, name='bias')\n\nwith tf.name_scope('hypothesis'):\n    h = tf.matmul(norm_X, weights) + bias\n\nwith tf.name_scope('cost'):\n    square_delta = tf.square(h - y)\n    loss = tf.reduce_mean(square_delta) / 2\n\n\u6700\u6025\u964d\u4e0b\u6cd5\u3092\u5b9f\u884c\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u306f\u3001\u524d\u56de\u3068\u540c\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\nalpha = 0.1\noptimizer = tf.train.GradientDescentOptimizer(alpha)\ntrain = optimizer.minimize(loss)\n\n\n\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306e\u5b9f\u884c\n\u5b9f\u884c\u306b\u95a2\u3057\u3066\u306f\u3001\u524d\u56de\u3068\u540c\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\nsess = tf.Session()\n\ninit = tf.global_variables_initializer()\nsess.run(init)\n\n\u53cd\u5fa9\u3054\u3068\u306e\u30b3\u30b9\u30c8\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306b\u30b5\u30de\u30ea\u30fc\u30d7\u30ed\u30c8\u30b3\u30eb\u30d0\u30c3\u30d5\u30a1\u30fc\u3068\u30e9\u30a4\u30bf\u30fc\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\nimport os\nfrom datetime import datetime\n\ndef subdir(base='logs'):\n    return os.path.join(base, datetime.now().strftime('%Y%m%d-%H%M%S'))\n\ntf.summary.scalar('loss', loss)\nmerged = tf.summary.merge_all()\n\nlogdir = 'logs/ex1_multi'\nwriter = tf.summary.FileWriter(subdir(logdir), sess.graph)\n\n\u5b9f\u969b\u306b\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\nfeed_dict = {X: input_X, y: input_y}\nmax_iterations = 400\nfor i in range(max_iterations):\n    if i % 10 == 0:\n        summary, _ = sess.run([merged, loss], feed_dict=feed_dict)\n        writer.add_summary(summary, i)\n    sess.run(train, feed_dict=feed_dict)\n\n\u5b66\u7fd2\u5f8c\u3001\u5b9f\u969b\u306b\u5bb6\u306e\u4fa1\u683c\u3092\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\ndef predict(x):\n    if not hasattr(x, 'reshape'):\n        x = np.array(x)\n    x = x.reshape(-1, 2)\n    return sess.run(h, feed_dict={X: x})\n\nprice = predict([1650, 3])\nprint('Predicted price of a 1650 sq-ft, 3 br house (using gradient descent):',\n      '\\n $%f\\n' % price)\n\n\n\u5b9f\u884c\u7d50\u679c\nPredicted price of a 1650 sq-ft, 3 br house (using gradient descent): \n $293081.343750\n\n\n\n\u5b66\u7fd2\u7387\u306e\u5909\u66f4\n\u5b66\u7fd2\u7387alpha\u306b\u3064\u3044\u3066\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f0.1\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u69d8\u3005\u306a\u5024\u3092\u8a66\u3057\u306a\u304c\u3089\u9069\u5207\u306a\u5024\u3092\u63a2\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u3068\u5024\u306e\u5909\u66f4\u304c\u9762\u5012\u3067\u3059\u304c\u3001TensorFlow\u3092\u4f7f\u3048\u3070\u3001\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5024\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u4f55\u3092\u6307\u5b9a\u3067\u304d\u308b\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u5b66\u7fd2\u7387alpha\u306b\u52a0\u3048\u3066\u3001\u6700\u5927\u53cd\u5fa9\u6570max_iterations\u3068\u30b5\u30de\u30ea\u30fc\u306e\u51fa\u529b\u5148logdir\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nflags = tf.app.flags\nflags.DEFINE_integer('max_iterations', 400, 'Max iteration number')\nflags.DEFINE_float('alpha', 0.1, 'Learning rate for gradient descent')\nflags.DEFINE_string('logdir', 'logs/ex1_multi/', 'Directory for logs')\nFLAGS = flags.FLAGS\n\n\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u3001FLAGS.alpha\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\noptimizer = tf.train.GradientDescentOptimizer(FLAGS.alpha)\n\n\u3042\u3068\u306f\u3001\u5b9f\u969b\u306e\u30ed\u30b8\u30c3\u30af\u3092main()\u95a2\u6570\u5185\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u95a2\u6570\u3092tf.app.run()\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u6642\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nex1_multi.py\nimport tensorflow as tf\n\n\nflags = tf.app.flags\nflags.DEFINE_integer('max_iterations', 400, 'Max iteration number')\nflags.DEFINE_float('alpha', 0.1, 'Learning rate for gradient descent')\nflags.DEFINE_string('logdir', 'logs/ex1_multi/', 'Directory for logs')\nFLAGS = flags.FLAGS\n\n\ndef main():\n    # \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u69cb\u7bc9\u3084\u5b9f\u884c\u3068\u3044\u3063\u305f\u30ed\u30b8\u30c3\u30af\u3092\u8a18\u8f09\n    ...\n\n\nif __name__ == 'main':\n    tf.app.run()\n\n\n\n\u5b9f\u884c\u7d50\u679c\n$ python ex1_multi.py -h\nusage: ex1_multi.py [-h] [--max_iterations MAX_ITERATIONS] [--alpha ALPHA]\n                    [--logdir LOGDIR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --max_iterations MAX_ITERATIONS\n                        Max iteration number\n  --alpha ALPHA         Learning rate for gradient descent\n  --logdir LOGDIR       Directory for logs\n\n\n\u3053\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u3066\u3001\u5b9f\u969b\u306balpha\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u3001loss\u306e\u53ce\u675f\u5177\u5408\u3092TensorBoard\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n$ python ex1_multi.py --alpha 0.001\n$ python ex1_multi.py --alpha 0.1\n$ python ex1_multi.py --alpha 1.5\n$ tensorboard --logdir logs/ex1_multi\n\nalpha 0.1\u30680.001\u306b\u5bfe\u3059\u308bloss\u306e\u5024\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u30010.1(\u30b7\u30a2\u30f3)\u306b\u6bd4\u3079\u30660.001(\u30aa\u30ec\u30f3\u30b8)\u306e\u65b9\u304c\u7de9\u3084\u304b\u306b\u53ce\u675f\u306b\u5411\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u9006\u306b\u3001alpha\u30921.5\u306e\u5834\u5408\u3001\u53ce\u675f\u305b\u305a\u306b\u767a\u6563\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u3001TensorFlow\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u4e0a\u3067\u3044\u308d\u3044\u308d\u3068\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u4fbf\u5229\uff01\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nJupyter notebook\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c\n\u5358\u4f53\u30b9\u30af\u30ea\u30d7\u30c8\n\n[\u524d\u56de](http://qiita.com/mtakayuki/items/be5216d8df8329462851)\u306b\u5f15\u304d\u7d9a\u304d\u3001Coursera Machine Learning\u306e\u6f14\u7fd2\u3092TensorFlow\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u6f14\u7fd2\u8ab2\u984c\u5185\u5bb9\n\n\u7dda\u5f62\u56de\u5e30(linear regression)\u306b\u3088\u308a\u3001\u5bb6\u306e\u9762\u7a4d\u3068\u5bdd\u5ba4\u306e\u6570\u304b\u3089\u5bb6\u306e\u4fa1\u683c\u3092\u4e88\u6e2c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u524d\u56de\u3068\u540c\u69d8\u306b\u7dda\u5f62\u56de\u5e30\u3067\u3059\u304c\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6570\u304c\u8907\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5927\u304d\u306a\u9055\u3044\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n# TensorFlow\u3067\u306e\u5b9f\u88c5\n\n## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n\u307e\u305a\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5bb6\u306e\u9762\u7a4d(\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8)\u3001\u5bdd\u5ba4\u6570\u3001\u4fa1\u683c\u306e\u5024\u304c\u30ab\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```:data/ex1/ex1data2.txt\n2104,3,399900\n1600,3,329900\n2400,3,369000\n1416,2,232000\n3000,4,539900\n...\n```\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u305f\u3081\u3001\u4e00\u5ea6\u306b\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u4e0a\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n```python\nimport numpy as np\n\ndata = np.genfromtxt('data/ex1/ex1data2.txt', delimiter=',')\ninput_X = data[:, 0:2].astype(np.float32)\ninput_y = data[:, 2:3].astype(np.float32)\n```\n\n`np.genfromtxt()`\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30b5\u30a4\u30ba\u304c $m \\times 3$ \u306e\u884c\u5217(numpy\u306e2\u6b21\u5143\u914d\u5217)\u3068\u3057\u3066`data`\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002numpy\u306e\u30b9\u30e9\u30a4\u30b9\u8868\u8a18\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u305f\u7d50\u679c\u3001`input_X`\u3068`input_y`\u306e\u30b5\u30a4\u30ba\u306f\u3001$m \\times 2$ \u3068 $m \\times 1$ \u306b\u305d\u308c\u305e\u308c\u306a\u308a\u307e\u3059\u3002\n\n## \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6b63\u898f\u5316\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3001\u5bb6\u306e\u9762\u7a4d\u306f\u5bdd\u5ba4\u6570\u306e\u7d041000\u500d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3067\u5024\u304c\u5927\u304d\u304f\u7570\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u6700\u6025\u964d\u4e0b\u6cd5\u3092\u5b9f\u884c\u3057\u3066\u3082\u53ce\u675f\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\n\n```math\n\\frac{X - \\mu}{\\sigma}\n```\n\n* $\\mu$: \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u5e73\u5747\n* $\\sigma$: \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5404\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u306e\u6a19\u6e96\u504f\u5dee\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u5927\u4f53\u306e\u30c7\u30fc\u30bf\u304c\u00b12\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6b63\u898f\u5316\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b\u306e\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u307f\u306b\u306a\u308b\u305f\u3081\u3001\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u306e\u30b7\u30a7\u30a4\u30d7(\u914d\u5217\u306e\u5404\u6b21\u5143\u306e\u5927\u304d\u3055)\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```python\ntrain_X = tf.placeholder(dtype=input_X.dtype, shape=input_X.shape, name='train_X')\n```\n\n\u3053\u306e\u3042\u3068\u3001`tf.nn.moments()`\u3092\u4f7f\u3063\u3066`train_X`\u306b\u5bfe\u3057\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u307e\u3059\u3002`train_X`\u306e\u30b7\u30a7\u30a4\u30d7\u306f`(47, 2)`\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e0\u756a\u76ee\u306e\u8ef8(47\u306e\u65b9)\u306b\u5bfe\u3057\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u305f\u3081\u3001`axes=[0]`\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u304c2\u3064\u3067\u3042\u308b\u305f\u3081\u3001\u6c42\u3081\u305f\u7d50\u679c\u306f\u30b5\u30a4\u30ba\u304c2\u306e\u30d9\u30af\u30c8\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\n```python\nmean, var = tf.nn.moments(train_X, axes=[0])\nprint(train_X.shape, mean.shape, var.shape)\n```\n\n```:\u5b9f\u884c\u7d50\u679c\n(47, 2) (2,) (2,)\n```\n\n`mean`\u3068`var`(\u306e\u5e73\u65b9\u6839)\u3092\u76f4\u63a5\u4f7f\u3063\u3066\u6b63\u898f\u5316\u3057\u3066\u3082\u52d5\u4f5c\u306f\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068\u5b66\u7fd2\u6642\u3060\u3051\u3067\u306a\u304f\u3001\u5b66\u7fd2\u5f8c\u306b\u4e88\u6e2c\u3059\u308b\u5834\u5408\u3067\u3082`input_X`\u3092\u4f7f\u3063\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3055\u3059\u304c\u306b\u3053\u308c\u306f\u975e\u52b9\u7387\u3067\u3042\u308b\u305f\u3081\u3001`mean`\u3068`var`\u306e\u5e73\u65b9\u6839\u3092\u5909\u6570`mu`\u3068`sigma`\u306b\u683c\u7d0d\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```python\nmu = tf.Variable(mean, trainable=False, collections=[], name='mu')\nsigma = tf.Variable(tf.sqrt(var), trainable=False, collections=[], name='sigma')\n```\n\n\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u5b66\u7fd2\u7528\u306e\u5909\u6570\u3067\u306f\u306a\u3044\u305f\u3081\u3001`trainable=False`\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u4ed6\u306e\u5909\u6570\u3068\u4e00\u7dd2\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001`collections=[]`\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`mu`\u3068`sigma`\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n```python\nsess = tf.Session()\nsess.run([mu.initializer, sigma.initializer], feed_dict={train_X: input_X})\n```\n\n\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u6b63\u898f\u5316\u3059\u308b\u524d\u306b\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002`X`\u306b\u3064\u3044\u3066\u306f\u3001\u5b66\u7fd2\u6642\u3060\u3051\u3067\u306a\u304f\u4e88\u6e2c\u3067\u3082\u5229\u7528\u3059\u308b\u305f\u3081\u3001`train_X`\u3068\u306f\u5225\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\nX = tf.placeholder(tf.float32, shape=[None, 2], name='X')\ny = tf.placeholder(tf.float32, shape=[None, 1], name='y')\n```\n\n\u306a\u304a\u3001[\u524d\u56de](http://qiita.com/mtakayuki/items/be5216d8df8329462851)\u306f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u306b\u5bfe\u3057\u3066`shape`\u306f\u6307\u5b9a\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u884c\u5217\u3092\u4f7f\u3063\u3066\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30b7\u30a7\u30a4\u30d7\u306e0\u756a\u76ee\u306e\u5024\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5834\u5408\u306b\u306f$m$(\u5b9f\u969b\u306b\u306f47)\u3067\u3059\u304c\u3001\u4e88\u6e2c\u306b\u3082\u4f7f\u3046\u305f\u3081\u5165\u529b\u30c7\u30fc\u30bf\u306e\u6570\u306b\u306f`None`\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u6b63\u898f\u5316\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001`X`\u306e\u30b7\u30a7\u30a4\u30d7\u306f`(None, 2)`(\u5b66\u7fd2\u6642\u306f`(47,2)`)\u306b\u5bfe\u3057\u3066`mu`\u3068`sigma`\u306e\u30b7\u30a7\u30a4\u30d7\u306f`(2,)`\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001[\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8](https://www.tensorflow.org/versions/master/experimental/xla/broadcasting)\u306b\u3088\u3063\u3066\u3046\u307e\u3044\u5177\u5408\u306bTensorFlow\u304c\u30b7\u30a7\u30a4\u30d7\u3092\u63c3\u3048\u3066\u304f\u308c\u307e\u3059\u3002\n\n```python\nnorm_X = (X - mu) / sigma\n\nprint(sess.run(norm_X, feed_dict={X: input_X}))\n```\n\n```:\u5b9f\u884c\u7d50\u679c\n[[  1.31415352e-01  -2.26093307e-01]\n [ -5.09640813e-01  -2.26093307e-01]\n [  5.07908642e-01  -2.26093307e-01]\n ...\n [ -1.46104956e+00  -1.55439162e+00]\n [ -1.89112723e-01   1.10220504e+00]\n [ -1.01459968e+00  -2.26093307e-01]]\n```\n\n## \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306e\u69cb\u7bc9\n\n\u6b63\u898f\u5316\u3055\u308c\u305f`norm_X`\u304c\u5b9a\u7fa9\u3067\u304d\u305f\u305f\u3081\u3001\u4eee\u8aac\u95a2\u6570\u3068\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u3092\u8868\u3059`weights`\u3092$2 \\times 1$\u306e\u884c\u5217(\u5217\u30d9\u30af\u30c8\u30eb)\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u4eee\u8a2d\u95a2\u6570\u3092\u884c\u5217\u306e\u639b\u3051\u7b97\u3068\u3057\u3066\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n```python\nweights = tf.Variable(tf.zeros([2, 1]), dtype=tf.float32, name='weights')\nbias = tf.Variable(tf.zeros([1]), dtype=tf.float32, name='bias')\n\nwith tf.name_scope('hypothesis'):\n    h = tf.matmul(norm_X, weights) + bias\n\nwith tf.name_scope('cost'):\n    square_delta = tf.square(h - y)\n    loss = tf.reduce_mean(square_delta) / 2\n```\n\n\u6700\u6025\u964d\u4e0b\u6cd5\u3092\u5b9f\u884c\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u306f\u3001\u524d\u56de\u3068\u540c\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\nalpha = 0.1\noptimizer = tf.train.GradientDescentOptimizer(alpha)\ntrain = optimizer.minimize(loss)\n```\n\n## \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30b0\u30e9\u30d5\u306e\u5b9f\u884c\n\n\u5b9f\u884c\u306b\u95a2\u3057\u3066\u306f\u3001[\u524d\u56de](http://qiita.com/mtakayuki/items/be5216d8df8329462851)\u3068\u540c\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n```python\nsess = tf.Session()\n\ninit = tf.global_variables_initializer()\nsess.run(init)\n```\n\n\u53cd\u5fa9\u3054\u3068\u306e\u30b3\u30b9\u30c8\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306b\u30b5\u30de\u30ea\u30fc\u30d7\u30ed\u30c8\u30b3\u30eb\u30d0\u30c3\u30d5\u30a1\u30fc\u3068\u30e9\u30a4\u30bf\u30fc\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\n```python\nimport os\nfrom datetime import datetime\n\ndef subdir(base='logs'):\n    return os.path.join(base, datetime.now().strftime('%Y%m%d-%H%M%S'))\n\ntf.summary.scalar('loss', loss)\nmerged = tf.summary.merge_all()\n\nlogdir = 'logs/ex1_multi'\nwriter = tf.summary.FileWriter(subdir(logdir), sess.graph)\n```\n\n\u5b9f\u969b\u306b\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\n```python\nfeed_dict = {X: input_X, y: input_y}\nmax_iterations = 400\nfor i in range(max_iterations):\n    if i % 10 == 0:\n        summary, _ = sess.run([merged, loss], feed_dict=feed_dict)\n        writer.add_summary(summary, i)\n    sess.run(train, feed_dict=feed_dict)\n```\n\n\u5b66\u7fd2\u5f8c\u3001\u5b9f\u969b\u306b\u5bb6\u306e\u4fa1\u683c\u3092\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```python\ndef predict(x):\n    if not hasattr(x, 'reshape'):\n        x = np.array(x)\n    x = x.reshape(-1, 2)\n    return sess.run(h, feed_dict={X: x})\n\nprice = predict([1650, 3])\nprint('Predicted price of a 1650 sq-ft, 3 br house (using gradient descent):',\n      '\\n $%f\\n' % price)\n```\n\n```:\u5b9f\u884c\u7d50\u679c\nPredicted price of a 1650 sq-ft, 3 br house (using gradient descent): \n $293081.343750\n```\n\n## \u5b66\u7fd2\u7387\u306e\u5909\u66f4\n\n\u5b66\u7fd2\u7387`alpha`\u306b\u3064\u3044\u3066\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f0.1\u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u306f\u69d8\u3005\u306a\u5024\u3092\u8a66\u3057\u306a\u304c\u3089\u9069\u5207\u306a\u5024\u3092\u63a2\u3057\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u306e\u969b\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u3068\u5024\u306e\u5909\u66f4\u304c\u9762\u5012\u3067\u3059\u304c\u3001TensorFlow\u3092\u4f7f\u3048\u3070\u3001\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5024\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u4f55\u3092\u6307\u5b9a\u3067\u304d\u308b\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u5b66\u7fd2\u7387`alpha`\u306b\u52a0\u3048\u3066\u3001\u6700\u5927\u53cd\u5fa9\u6570`max_iterations`\u3068\u30b5\u30de\u30ea\u30fc\u306e\u51fa\u529b\u5148`logdir`\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\nflags = tf.app.flags\nflags.DEFINE_integer('max_iterations', 400, 'Max iteration number')\nflags.DEFINE_float('alpha', 0.1, 'Learning rate for gradient descent')\nflags.DEFINE_string('logdir', 'logs/ex1_multi/', 'Directory for logs')\nFLAGS = flags.FLAGS\n```\n\n\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u3001`FLAGS.alpha`\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```python\noptimizer = tf.train.GradientDescentOptimizer(FLAGS.alpha)\n```\n\n\u3042\u3068\u306f\u3001\u5b9f\u969b\u306e\u30ed\u30b8\u30c3\u30af\u3092`main()`\u95a2\u6570\u5185\u306b\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u306e\u95a2\u6570\u3092`tf.app.run()`\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u6642\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u9020\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```python:ex1_multi.py\nimport tensorflow as tf\n\n\nflags = tf.app.flags\nflags.DEFINE_integer('max_iterations', 400, 'Max iteration number')\nflags.DEFINE_float('alpha', 0.1, 'Learning rate for gradient descent')\nflags.DEFINE_string('logdir', 'logs/ex1_multi/', 'Directory for logs')\nFLAGS = flags.FLAGS\n\n\ndef main():\n    # \u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u69cb\u7bc9\u3084\u5b9f\u884c\u3068\u3044\u3063\u305f\u30ed\u30b8\u30c3\u30af\u3092\u8a18\u8f09\n    ...\n\n\nif __name__ == 'main':\n    tf.app.run()\n```\n\n```:\u5b9f\u884c\u7d50\u679c\n$ python ex1_multi.py -h\nusage: ex1_multi.py [-h] [--max_iterations MAX_ITERATIONS] [--alpha ALPHA]\n                    [--logdir LOGDIR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --max_iterations MAX_ITERATIONS\n                        Max iteration number\n  --alpha ALPHA         Learning rate for gradient descent\n  --logdir LOGDIR       Directory for logs\n```\n\n\u3053\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u3066\u3001\u5b9f\u969b\u306b`alpha`\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u3001`loss`\u306e\u53ce\u675f\u5177\u5408\u3092TensorBoard\u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ python ex1_multi.py --alpha 0.001\n$ python ex1_multi.py --alpha 0.1\n$ python ex1_multi.py --alpha 1.5\n$ tensorboard --logdir logs/ex1_multi\n```\n\n`alpha` 0.1\u30680.001\u306b\u5bfe\u3059\u308b`loss`\u306e\u5024\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u30010.1(\u30b7\u30a2\u30f3)\u306b\u6bd4\u3079\u30660.001(\u30aa\u30ec\u30f3\u30b8)\u306e\u65b9\u304c\u7de9\u3084\u304b\u306b\u53ce\u675f\u306b\u5411\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n![small_alpha.png](https://qiita-image-store.s3.amazonaws.com/0/84248/3a30d504-df9f-cf41-c642-43e73a0bd3d3.png)\n\n\u9006\u306b\u3001`alpha`\u30921.5\u306e\u5834\u5408\u3001\u53ce\u675f\u305b\u305a\u306b\u767a\u6563\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n![large_alpha.png](https://qiita-image-store.s3.amazonaws.com/0/84248/2f98bf48-b712-66ef-9d62-04ab18080501.png)\n\n\u3053\u306e\u3088\u3046\u306b\u3001TensorFlow\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u4e0a\u3067\u3044\u308d\u3044\u308d\u3068\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u4fbf\u5229\uff01\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n* [Jupyter notebook\u306b\u3088\u308b\u5b9f\u884c\u7d50\u679c](https://github.com/mtakayuki/machine-learning-ex-tensorflow/blob/master/ex1_multi.ipynb)\n* [\u5358\u4f53\u30b9\u30af\u30ea\u30d7\u30c8](https://github.com/mtakayuki/machine-learning-ex-tensorflow/blob/master/ex1_multi.py)\n", "tags": ["TensorFlow", "\u6a5f\u68b0\u5b66\u7fd2", "coursera"]}