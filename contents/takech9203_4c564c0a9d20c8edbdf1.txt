{"context": " More than 1 year has passed since last update.\u3042\u307e\u308a\u65b0\u3057\u3044\u30cd\u30bf\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\n\n\u3084\u308b\u3053\u3068\n\n\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc&\u30d9\u30a2\u30e1\u30bf\u30eb\u306e\u4e00\u89a7\u8868\u793a\nSoftLayer CLI\u3067\u306f\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u30d9\u30a2\u30e1\u30bf\u30eb\u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n$ sl vs list      # \u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\n$ sl server list  # \u30d9\u30a2\u30e1\u30bf\u30eb\u30b5\u30fc\u30d0\u30fc\n\nSoftLayer API\u3067\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u30d9\u30a2\u30e1\u30bf\u30eb\u3092\u540c\u3058\u30ea\u30b9\u30c8\u306b\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u5c5e\u6027\u306e\u8ffd\u52a0\n\u305d\u308c\u3060\u3051\u3067\u306f\u3064\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067sl (vs|server) list\u3067\u8868\u793a\u3055\u308c\u308b\u5c5e\u6027\u306b\u52a0\u3048\u3066\u3001\u4ee5\u4e0b\u306e\u5c5e\u6027\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\u30d8\u30c3\u30c0\n\u30d8\u30c3\u30c0\u306e\u610f\u5473\n\n\n\n\nbm?\n\u30d9\u30a2\u30e1\u30bf\u30eb\u304b\u3069\u3046\u304b\n\n\nfcr\nFrontend Customer Router\n\n\nbcr\nBackend Customer Router\n\n\nmfee$\n\u6708\u6b21\u8ab2\u91d1\u306e\u5834\u5408\u306eFee\n\n\nhfee$\n\u6642\u9593\u8ab2\u91d1\u306e\u5834\u5408\u306efee\n\n\nout_bw\n\u4f7f\u7528\u5e2f\u57df\n\n\nvlan\nVLAN\u6570\n\n\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n_maskVirtualGuest = '''\n    id,\n    fullyQualifiedDomainName,\n    primaryIpAddress,\n    primaryBackendIpAddress,\n    datacenter,\n    location.pathString,\n    billingItem.orderItem.order.userRecord.username,\n    frontendRouters.hostname,\n    backendRouters.hostname,\n    billingItem.orderItem.recurringFee,\n    billingItem.orderItem.hourlyRecurringFee,\n    outboundPublicBandwidthUsage,\n    networkVlans,\n    networkVlanCount\n    '''\n\n_maskHardware = '''\n    id,\n    bareMetalInstanceFlag,\n    fullyQualifiedDomainName,\n    primaryIpAddress,\n    primaryBackendIpAddress,\n    datacenter,\n    location.pathString,\n    billingItem.orderItem.order.userRecord.username,\n    frontendRouters.hostname,\n    backendRouters.hostname,\n    billingItem.orderItem.recurringFee,\n    billingItem.orderItem.hourlyRecurringFee,\n    outboundPublicBandwidthUsage,\n    networkVlans,\n    networkVlanCount\n    '''\n\n_tableHeader = [\n    'id',\n    'bm?',\n    'fqdn',\n    'public_ip',\n    'backend_ip',\n    'dc',\n    'location',\n    'owner',\n    'fcr',\n    'bcr',\n    'mfee$',\n    'hfee$',\n    'out_bw',\n    'vlan'\n    ]\n\ndef lookup(dic, key, *keys):\n    \"\"\"A generic dictionary access helper.\n\n    This helps simplify code that uses heavily nested dictionaries. It will\n    return None if any of the keys in *keys do not exist.\n    \"\"\"\n    if keys:\n        return lookup(dic.get(key, {}), *keys)\n    return dic.get(key)\n\n\nclient = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\n\nvirtualGuests = client['Account'].getVirtualGuests(mask=_maskVirtualGuest)\nhardwares = client['Account'].getHardware(mask=_maskHardware)\n\ninstances = hardwares + virtualGuests\n\n# Table definition\ntable = PrettyTable(_tableHeader)\ntable.padding_width = 1\n\n# Get virtualGuests\ncount = 0\nfor inst in instances:\n    table.add_row(\n        [\n            inst['id'],\n            inst.get('bareMetalInstanceFlag','-'),\n            inst['fullyQualifiedDomainName'],\n            inst.get('primaryIpAddress', '--'),\n            inst['primaryBackendIpAddress'],\n            inst['datacenter']['name'],\n            inst['location']['pathString'],\n            lookup(inst, 'billingItem', 'orderItem', 'order', 'userRecord','username') or '--',\n            inst['frontendRouters']['hostname'].split('.')[0] if not isinstance(inst['frontendRouters'],list) else inst['frontendRouters'][0]['hostname'].split('.')[0],\n            inst['backendRouters'][0]['hostname'].split('.')[0],\n            lookup(inst, 'billingItem', 'orderItem', 'recurringFee') or '-',\n            lookup(inst, 'billingItem', 'orderItem', 'hourlyRecurringFee') or '-',\n            round(float(inst['outboundPublicBandwidthUsage']),1),\n            inst['networkVlanCount']\n        ]\n    )\n    count = count + 1\n\nprint(table)\nprint(count, \"instances\")\n\nexit()\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u3042\u307e\u308a\u65b0\u3057\u3044\u30cd\u30bf\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002\n\n\n## \u3084\u308b\u3053\u3068\n\n### \u4eee\u60f3\u30b5\u30fc\u30d0\u30fc&\u30d9\u30a2\u30e1\u30bf\u30eb\u306e\u4e00\u89a7\u8868\u793a\n\nSoftLayer CLI\u3067\u306f\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u30d9\u30a2\u30e1\u30bf\u30eb\u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```bash\n$ sl vs list      # \u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\n$ sl server list  # \u30d9\u30a2\u30e1\u30bf\u30eb\u30b5\u30fc\u30d0\u30fc\n```\n\nSoftLayer API\u3067\u3001\u4eee\u60f3\u30b5\u30fc\u30d0\u30fc\u3068\u30d9\u30a2\u30e1\u30bf\u30eb\u3092\u540c\u3058\u30ea\u30b9\u30c8\u306b\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\n### \u5c5e\u6027\u306e\u8ffd\u52a0\n\n\u305d\u308c\u3060\u3051\u3067\u306f\u3064\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067```sl (vs|server) list```\u3067\u8868\u793a\u3055\u308c\u308b\u5c5e\u6027\u306b\u52a0\u3048\u3066\u3001\u4ee5\u4e0b\u306e\u5c5e\u6027\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n| \u30d8\u30c3\u30c0 | \u30d8\u30c3\u30c0\u306e\u610f\u5473 |\n|-----|-----|\n| bm?| \u30d9\u30a2\u30e1\u30bf\u30eb\u304b\u3069\u3046\u304b |\n| fcr | Frontend Customer Router | \n| bcr | Backend Customer Router|\n| mfee$ | \u6708\u6b21\u8ab2\u91d1\u306e\u5834\u5408\u306eFee |\n| hfee$ | \u6642\u9593\u8ab2\u91d1\u306e\u5834\u5408\u306efee | \n| out_bw | \u4f7f\u7528\u5e2f\u57df |\n| vlan | VLAN\u6570 |\n\n\n## \u30b9\u30af\u30ea\u30d7\u30c8\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom prettytable import PrettyTable\nimport SoftLayer\nimport sluser\n\nSL_USERNAME = sluser.SL_USERNAME\nSL_API_KEY = sluser.SL_API_KEY\n\n_maskVirtualGuest = '''\n    id,\n    fullyQualifiedDomainName,\n    primaryIpAddress,\n    primaryBackendIpAddress,\n    datacenter,\n    location.pathString,\n    billingItem.orderItem.order.userRecord.username,\n    frontendRouters.hostname,\n    backendRouters.hostname,\n    billingItem.orderItem.recurringFee,\n    billingItem.orderItem.hourlyRecurringFee,\n    outboundPublicBandwidthUsage,\n    networkVlans,\n    networkVlanCount\n    '''\n\n_maskHardware = '''\n    id,\n    bareMetalInstanceFlag,\n    fullyQualifiedDomainName,\n    primaryIpAddress,\n    primaryBackendIpAddress,\n    datacenter,\n    location.pathString,\n    billingItem.orderItem.order.userRecord.username,\n    frontendRouters.hostname,\n    backendRouters.hostname,\n    billingItem.orderItem.recurringFee,\n    billingItem.orderItem.hourlyRecurringFee,\n    outboundPublicBandwidthUsage,\n    networkVlans,\n    networkVlanCount\n    '''\n\n_tableHeader = [\n    'id',\n    'bm?',\n    'fqdn',\n    'public_ip',\n    'backend_ip',\n    'dc',\n    'location',\n    'owner',\n    'fcr',\n    'bcr',\n    'mfee$',\n    'hfee$',\n    'out_bw',\n    'vlan'\n    ]\n\ndef lookup(dic, key, *keys):\n    \"\"\"A generic dictionary access helper.\n\n    This helps simplify code that uses heavily nested dictionaries. It will\n    return None if any of the keys in *keys do not exist.\n    \"\"\"\n    if keys:\n        return lookup(dic.get(key, {}), *keys)\n    return dic.get(key)\n\n\nclient = SoftLayer.Client(username=SL_USERNAME, api_key=SL_API_KEY)\n\nvirtualGuests = client['Account'].getVirtualGuests(mask=_maskVirtualGuest)\nhardwares = client['Account'].getHardware(mask=_maskHardware)\n\ninstances = hardwares + virtualGuests\n\n# Table definition\ntable = PrettyTable(_tableHeader)\ntable.padding_width = 1\n\n# Get virtualGuests\ncount = 0\nfor inst in instances:\n    table.add_row(\n        [\n            inst['id'],\n            inst.get('bareMetalInstanceFlag','-'),\n            inst['fullyQualifiedDomainName'],\n            inst.get('primaryIpAddress', '--'),\n            inst['primaryBackendIpAddress'],\n            inst['datacenter']['name'],\n            inst['location']['pathString'],\n            lookup(inst, 'billingItem', 'orderItem', 'order', 'userRecord','username') or '--',\n            inst['frontendRouters']['hostname'].split('.')[0] if not isinstance(inst['frontendRouters'],list) else inst['frontendRouters'][0]['hostname'].split('.')[0],\n            inst['backendRouters'][0]['hostname'].split('.')[0],\n            lookup(inst, 'billingItem', 'orderItem', 'recurringFee') or '-',\n            lookup(inst, 'billingItem', 'orderItem', 'hourlyRecurringFee') or '-',\n            round(float(inst['outboundPublicBandwidthUsage']),1),\n            inst['networkVlanCount']\n        ]\n    )\n    count = count + 1\n\nprint(table)\nprint(count, \"instances\")\n\nexit()\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n\n![sc 2015-01-30 am1.16.27.png](https://qiita-image-store.s3.amazonaws.com/0/65167/d8dddb8a-9b9d-d468-566f-b9a235052885.png)\n\n\n", "tags": ["SoftLayer"]}