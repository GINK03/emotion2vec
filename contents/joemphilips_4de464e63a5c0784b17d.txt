{"context": "\u3053\u306e\u8a18\u4e8b\u306f\nBlue Collar Bioinformatics; Automated retrieval of expression data with Python and R\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\u591a\u5c11\u53e4\u3044\u3067\u3059\u304c\u3001\u81ea\u8eab\u306e\u52c9\u5f37\u3082\u304b\u306d\u3066\u3002\n\u8aa4\u5b57\u3001\u8aa4\u8a33\u306e\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\u3002\n\u4ee5\u4e0b\u7ffb\u8a33\n\u3053\u306e2\u6708\u3001\u30d0\u30a4\u30aa\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u306e\u7d71\u5408\u3092\u4e3b\u984c\u3068\u3057\u305f\u30d0\u30a4\u30aa\u30cf\u30c3\u30ab\u30bd\u30f32010\u306b\u53c2\u52a0\u3059\u308b\u305f\u3081\u65e5\u672c\u306b\u884c\u304d\u307e\u3059\u3002\u3067\u3001\u305d\u306e\u6e96\u5099\u3068\u3057\u3066\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n\u3042\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u683c\u95d8\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u3069\u306e\u3088\u3046\u306a\u8ffd\u52a0\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308c\u3070\u554f\u984c\u306e\u89e3\u6c7a\u306b\u5f79\u7acb\u3064\u3067\u3057\u3087\u3046\u304b\uff1f\u5178\u578b\u7684\u306a\u4f8b\u3068\u3057\u3066\u3001\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u907a\u4f1d\u5b50\u306e\u30ea\u30b9\u30c8\u304c\u624b\u5143\u306b\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u305d\u306e\u767a\u73fe\u91cf\u3092\u77e5\u308a\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3067\u3059\u3002\n\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30afweb\u306e\u5922\u3092\u304b\u306a\u3048\u305f\u4e16\u754c\u3067\u306a\u3089\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aRDF\u30c8\u30ea\u30d7\u30eb\u306e\u30bb\u30c3\u30c8\u306b\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u767a\u73fe\u91cf\u30bb\u30c3\u30c8 -> has \u751f\u7269\u7a2e -> Mus musculus\nMus musculus -> has \u7d30\u80de\u816b -> proB\nproB -> has biological state -> wild type\n\u767a\u73fe\u91cf\u30bb\u30c3\u30c8 -> has \u8b58\u5225\u5b50 -> a RefGene ID\na RefGene ID -> has \u767a\u73fe\u91cf -> 7.65\n\n\u3059\u308b\u3068\u3001\u8208\u5473\u306e\u3042\u308b\u7d30\u80de\u816b(proB)\u306e\u901a\u5e38\u72b6\u614b\u3067\u306e\u767a\u73fe\u91cf\u304c\u624b\u306b\u306f\u3044\u308a\u3001\u6b21\u3044\u3067\u624b\u5143\u306e\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u7406\u60f3\u3068\u3057\u3066\u306f\u767a\u73fe\u91cf\u30bb\u30c3\u30c8\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u3064\u3044\u3066\u3044\u3066\u6b32\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u305d\u3046\u3059\u308c\u30707.65\u3068\u3044\u3046\u6570\u5024\u306e\u610f\u5473\u3059\u308b\u3082\u306e\u304c\u5b9f\u9a13\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u304b\u3089\u306d\u3002\n\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a6\u30a7\u30d6\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304b\u3089\u306f\u3053\u306e\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u304c(\u8a33\u6ce8: 2010\u5e74\u306e\u6642\u70b9\u3067\u751f\u7269\u5b66\u30c7\u30fc\u30bf\u306eRDF\u5316\u304c\u5341\u5206\u3067\u306a\u304b\u3063\u305f\u305f\u3081\u3002\u4eca\u306f\u308f\u304b\u3089\u306a\u3044\u3002)\u3001\u540c\u3058\u3088\u3046\u306a\u554f\u984c\u3092\u81ea\u52d5\u3067\u89e3\u304f\u305f\u3081\u306e\u9053\u5177\u306f\u8c4a\u5bcc\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\nNCBI\u306e Gene Expression Omnibus(GEO)\u306f\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3078\u306e\u30af\u30a8\u30ea\u306fBiopython\u306eEutilsAPI\u3067\u53ef\u80fd\u3067\u3059\u3002\n\u8208\u5473\u306e\u3042\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7279\u5b9a\u3067\u304d\u305f\u306a\u3089\u3070\u3001Bioconductor\u306eGEOQuery\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001UCSC RefGene\u306e\u8b58\u5225\u5b50\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3059\u3079\u3066Rpy2\u3067python\u304b\u3089R\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u9023\u7d50\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u8a33\u6ce8: \u4eca\u306a\u3089\u591a\u5206pipeR\u306e\u65b9\u304c\u826f\u3044\n\n\u307e\u305a\u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u76ee\u6a19\u3092\u5b9a\u3081\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f\u30de\u30a6\u30b9\u306eproB\u7d30\u80de\u306e\u91ce\u751f\u578b\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002\ndef main():\n    organism = \"Mus musculus\"\n    cell_types = [\"proB\", \"ProB\", \"pro-B\"]\n    email = \"chapmanb@50mail.com\"\n    save_dir = os.getcwd()\n    exp_data = get_geo_data(organism, cell_types, email, save_dir)\n\n\ndef _is_wild_type(result):\n    \"\"\"\u30b5\u30f3\u30d7\u30eb\u304c\u91ce\u751f\u578b\u3067\u3042\u308b\u304b\u5426\u304b\u3092\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u5224\u65ad\"\"\"\n    return result.samples[0][0].startswith(\"WT\")\n\n\u6b21\u3044\u3067\u3001\u751f\u7269\u7a2e\u3068\u7d30\u80de\u816b\u306b\u57fa\u3065\u3044\u3066\u3001\u5165\u624b\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092GEO\u306b\u6295\u3052\u307e\u3059\u3002\u5b9f\u969b\u306e\u4ed5\u4e8b\u3067\u306f\u3001\u3042\u306a\u305f\u306e\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306a_is_wild_type\u95a2\u6570\u3092\u3001\u5bfe\u8a71\u7684\u306a\u6a5f\u80fd\u3092\u679c\u305f\u3059\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\u3001\u30e6\u30fc\u30b6\u30fc\u3067\u3042\u308b\u751f\u7269\u79d1\u5b66\u8005\u306b\u5b9f\u9a13\u624b\u6cd5\u306b\u5fdc\u3058\u3066\u9078\u3070\u305b\u308b\u3082\u306e\u3068\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092pickle\u5316\u3057\u3066\u624b\u5143\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3046\u3057\u30661\u5ea6\u3060\u3051\u30af\u30a8\u30ea\u3092\u884c\u3046\u3053\u3068\u3067\u5916\u90e8\u30b5\u30fc\u30d0\u30fc\u306e\u8ca0\u8377\u3092\u8efd\u6e1b\u3057\u3066\u3044\u307e\u3059\u3002\ndef get_geo_data(organism, cell_types, email, save_dir, is_desired_result):\n    save_file = os.path.join(save_dir, \"%s-results.pkl\" % cell_types[0])\n    if not os.path.exists(save_file):\n        results = cell_type_gsms(organism, cell_types, email)\n        for result in results:\n            if is_desired_result(result):\n                with open(save_file, \"w\") as out_handle:\n                    cPickle.dump(result, out_handle)\n                break\n\n    with open(save_file) as save_handle:\n        result = cPickle.load(save_handle)\n\nGEO\u306b\u30af\u30a8\u30ea\u3092\u9001\u4fe1\u3057\u3066\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u96e3\u984c\u306fBiopython\u306eEntrez\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30af\u30a8\u30ea\u3092\u304f\u307f\u4e0a\u3052\u305f\u5f8c\u3001\u7d50\u679c\u306f\u8aac\u660e\u4ed8\u304d\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d1\u30fc\u30b9\u3055\u308c\u3001\u30bf\u30a4\u30c8\u30eb\u3068\u30da\u30a2\u306b\u306a\u3063\u305f\u767a\u73fe\u91cf\u3068\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306eID\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\ndef cell_type_gsms(organism, cell_types, email):\n    \"\"\"Entrez\u3092\u4f7f\u7528\u3057\u3066\u7279\u5b9a\u306e\u751f\u7269\u7a2e\u3068\u7d30\u80de\u816b\u306b\u95a2\u3057\u3066GEO\u3092\u53d6\u5f97\u3059\u308b\u3002\n    \"\"\"\n    Entrez.email = email\n    search_term = \"%s[ORGN] %s\" % (organism, \" OR \".join(cell_types))\n    print \"Searching GEO and retrieving results: %s\" % search_term\n\n    hits = []\n    handle = Entrez.esearch(db=\"gds\", term=search_term)\n    results = Entrez.read(handle)\n    for geo_id in results['IdList']:\n        handle = Entrez.esummary(db=\"gds\", id=geo_id)\n        summary = Entrez.read(handle)\n        samples = []\n        for sample in summary[0]['Samples']:\n            for cell_type in cell_types:\n                 if sample['Title'].find(cell_type) >= 0:\n                     samples.append((sample['Title'], sample['Accession']))\n                     break\n        if len(samples) > 0:\n            hits.append(GEOResult(summary[0]['summary'], samples))\n    return hits\n\n\n\u3053\u308c\u3067\u3001\u5b9f\u9a13\u306e\u7a2e\u985e\u3092\u9078\u3079\u3070\u3001\u7b2c\u4e00\u95a2\u9580\u7a81\u7834\u3067\u3059\u3002\n\u6b21\u306f\u3001\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u308c\u306fRefGene ID\u3092\u767a\u73fe\u91cf\u306b\u30de\u30c3\u30d7\u3057\u305f\u8f9e\u66f8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nWT ProB, biological rep1\n[('NM_177327', [7.7430266269999999, 6.4795213670000003, 8.8766985500000004]),\n('NM_001008785', [7.4671954649999996, 5.4761453329999998]),\n('NM_177325', [7.3312364040000002, 11.831475960000001]),\n('NM_177323', [6.9779868059999997, 6.3926399939999996]),\n('NM_177322', [5.0833683379999997])]\n\n\n\u5b9f\u969b\u306b\u9762\u5012\u306a\u3068\u3053\u308d\u306f\u3001\u767a\u73fe\u91cf\u306e\u53d6\u5f97\u3068\u907a\u4f1d\u5b50ID\u3068\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u3059\u304c\u3001\u3053\u308c\u306fBioconductor\u306eGEOquery\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u907a\u4f1d\u5b50\u3068\u767a\u73fe\u91cf\u306e\u5bfe\u5fdc\u8868\u3001\u304a\u3088\u3073\u3088\u308a\u9ad8\u6b21\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u4e2d\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u524d\u8005\u306fR\u30b9\u30bf\u30a4\u30eb\u306e\u30bf\u30d6\u533a\u5207\u308a\u30c6\u30fc\u30d6\u30eb\u3067\u3001\u5f8c\u8005\u306fJSON\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30ab\u30eb\u306b\u8aad\u307f\u3084\u3059\u3044\u5f62\u3067\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002\ndef write_gsm_map(self, gsm_id, meta_file, table_file):\n    \"\"\"Bioconductor\u3092\u7528\u3044\u3066GEO\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u8868\u306b\u4fdd\u5b58\u3059\u308b\u3002\n    \"\"\"\n    robjects.r.assign(\"gsm.id\", gsm_id)\n    robjects.r.assign(\"table.file\", table_file)\n    robjects.r.assign(\"meta.file\", meta_file)\n    robjects.r('''\n        library(GEOquery)\n        library(rjson)\n        gsm <- getGEO(gsm.id)\n        write.table(Table(gsm), file = table.file, sep = \"\\t\", row.names = FALSE,\n        col.names = TRUE)\n        cat(toJSON(Meta(gsm)), file = meta.file)\n        ''')\n\n\u3053\u306e\u95a2\u6570\u306b\u3088\u3063\u3066\u30d7\u30ed\u30fc\u30d6\u540d\u3068\u767a\u73fe\u91cf\u3068\u306e\u5bfe\u5fdc\u8868\u304c\u3067\u304d\u307e\u3059\u3002\u3088\u308a\u4fbf\u5229\u306a\u3082\u306e\u3068\u3059\u308b\u305f\u3081\u3001expression \u30de\u30a4\u30af\u30ed\u30a2\u30ec\u30a4\u306e\u30d7\u30ed\u30fc\u30d6\u3092\u751f\u7269\u5b66\u7684\u306a\u907a\u4f1d\u5b50\u306eID\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306fGEO\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3082\u3046\u4e00\u5ea6\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306f\u518d\u3073R\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5f62\u3067\u53d6\u5f97\u3057\u3001\u8208\u5473\u306e\u3042\u308b\u8981\u7d20\u306e\u307f\u3001\u30bf\u30d6\u533a\u5207\u308a\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\ndef _write_gpl_map(self, gpl_id, gpl_file):\n    \"\"\"R\u3092\u7528\u3044\u3066GEO\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u8868\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\"\"\"\n    robjects.r.assign(\"gpl.id\", gpl_id)\n    robjects.r.assign(\"gpl.file\", gpl_file)\n    robjects.r('''\n    library(GEOquery)\n    gpl <- getGEO(gpl.id)\n    gpl.map <- subset(Table(gpl), select=c(\"ID\", \"RefSeq.Transcript.ID\"))\n    write.table(gpl.map, file = gpl.file, sep = \"\\t\", row.names = FALSE,\n    col.names = TRUE)\n    ''')\n\n\u6700\u5f8c\u306b\u3001\u4eca\u307e\u3067\u306e\u51e6\u7406\u3092\u307e\u3068\u3081\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5bfe\u5fdc\u8868\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30d1\u30fc\u30b9\u3057\u3001\u767a\u73fe\u91cf -> \u30d7\u30ed\u30fc\u30d6ID -> Transcript ID \u3068\u5bfe\u5fdc\u95a2\u4fc2\u3092\u3064\u306a\u3052\u3066\u3044\u304d\u307e\u3059\u3002\u6700\u7d42\u7684\u306a\u8f9e\u66f8\u306f\u907a\u4f1d\u5b50\u306eID\u3092\u767a\u73fe\u91cf\u306b\u5bfe\u5fdc\u4ed8\u3051\u305f\u3082\u306e\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u8fd4\u3057\u307e\u3059\u3002\ndef get_gsm_tx_values(self, gsm_id, save_dir):\n    \"\"\"\u300c\u8ee2\u5199\u7523\u7269\u300d => \u300cGEO, GSM\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u3057\u305f\u767a\u73fe\u91cf\u300d\u306e\u5bfe\u5fdc\u8868\u3092\u4f5c\u6210\u3059\u308b\n    \"\"\"\n    gsm_meta_file = os.path.join(save_dir, \"%s-meta.txt\" % gsm_id)\n    gsm_table_file = os.path.join(save_dir, \"%s-table.txt\" % gsm_id)\n    if (not os.path.exists(gsm_meta_file) or \\\n        not os.path.exists(gsm_table_file)):\n        self._write_gsm_map(gsm_id, gsm_meta_file, gsm_table_file)\n\n    with open(gsm_meta_file) as in_handle:\n        gsm_meta = json.load(in_handle)\n    id_to_tx = self.get_gpl_map(gsm_meta['platform_id'], save_dir)\n    tx_to_vals = collections.defaultdict(list)\n    with open(gsm_table_file) as in_handle:\n        reader = csv.reader(in_handle, dialect='excel-tab')\n        reader.next() # header\n        for probe_id, probe_val in reader:\n            for tx_id in id_to_tx.get(probe_id, []):\n                tx_to_vals[tx_id].append(float(probe_val))\n    return tx_to_vals\n\n\n\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4eca\u307e\u3067\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3092\u7d71\u5408\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u30af\u30a8\u30ea\u304b\u3089\u306f\u3058\u3081\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u5fc5\u8981\u306a\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\u3068\u306f\u3044\u3048\u3001RDF\u3092\u7528\u3044\u305f\u7406\u60f3\u7684\u306a\u3082\u306e\u306b\u6bd4\u3079\u308b\u3068\u3060\u3044\u3076\u56de\u308a\u9053\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u7591\u554f\u30c9\u30ea\u30d6\u30f3\u306a\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3067\u304d\u308b\u9650\u308a\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u306b\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u306e\u306f\u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u306e\u30c4\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u8005\u304c\u7e70\u308a\u8fd4\u3057\u76f4\u9762\u3059\u308b\u8ab2\u984c\u3067\u3059\u3002\n\n\u8a33\u306f\u3053\u3053\u307e\u3067\n\u30b9\u30af\u30ea\u30d7\u30c8\u81ea\u4f53\u306fhttps://github.com/chapmanb/bcbb/blob/022c50b3132bc3d009ed1d533a3954bd564a9ed3/rest_apis/find_geo_data.py \n\u306b\u3042\u308a\u307e\u3059\u3002\n\u7b46\u8005\u306ebcbb\u3068\u3044\u3046\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306f\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u5f79\u7acb\u3064\u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\n[Blue Collar Bioinformatics; Automated retrieval of expression data with Python and R](http://bcb.io/2010/01/02/automated-retrieval-of-expression-data-with-python-and-r/)\u306e\u7ffb\u8a33\u3067\u3059\u3002\n\u591a\u5c11\u53e4\u3044\u3067\u3059\u304c\u3001\u81ea\u8eab\u306e\u52c9\u5f37\u3082\u304b\u306d\u3066\u3002\n\u8aa4\u5b57\u3001\u8aa4\u8a33\u306e\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\u3002\n\n\n\u4ee5\u4e0b\u7ffb\u8a33\n\n\n\n\n\u3053\u306e2\u6708\u3001\u30d0\u30a4\u30aa\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u306e\u7d71\u5408\u3092\u4e3b\u984c\u3068\u3057\u305f\u30d0\u30a4\u30aa\u30cf\u30c3\u30ab\u30bd\u30f32010\u306b\u53c2\u52a0\u3059\u308b\u305f\u3081\u65e5\u672c\u306b\u884c\u304d\u307e\u3059\u3002\u3067\u3001\u305d\u306e\u6e96\u5099\u3068\u3057\u3066\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u8003\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3042\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u683c\u95d8\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u3069\u306e\u3088\u3046\u306a\u8ffd\u52a0\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308c\u3070\u554f\u984c\u306e\u89e3\u6c7a\u306b\u5f79\u7acb\u3064\u3067\u3057\u3087\u3046\u304b\uff1f\u5178\u578b\u7684\u306a\u4f8b\u3068\u3057\u3066\u3001\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u306e\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u907a\u4f1d\u5b50\u306e\u30ea\u30b9\u30c8\u304c\u624b\u5143\u306b\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u305d\u306e\u767a\u73fe\u91cf\u3092\u77e5\u308a\u305f\u3044\u3068\u3044\u3046\u5834\u5408\u3067\u3059\u3002\n\n\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30afweb\u306e\u5922\u3092\u304b\u306a\u3048\u305f\u4e16\u754c\u3067\u306a\u3089\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aRDF\u30c8\u30ea\u30d7\u30eb\u306e\u30bb\u30c3\u30c8\u306b\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n* \u767a\u73fe\u91cf\u30bb\u30c3\u30c8 -> has \u751f\u7269\u7a2e -> Mus musculus\n* Mus musculus -> has \u7d30\u80de\u816b -> proB\n* proB -> has biological state -> wild type\n* \u767a\u73fe\u91cf\u30bb\u30c3\u30c8 -> has \u8b58\u5225\u5b50 -> a RefGene ID\n* a RefGene ID -> has \u767a\u73fe\u91cf -> 7.65\n\n\u3059\u308b\u3068\u3001\u8208\u5473\u306e\u3042\u308b\u7d30\u80de\u816b(proB)\u306e\u901a\u5e38\u72b6\u614b\u3067\u306e\u767a\u73fe\u91cf\u304c\u624b\u306b\u306f\u3044\u308a\u3001\u6b21\u3044\u3067\u624b\u5143\u306e\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u7406\u60f3\u3068\u3057\u3066\u306f\u767a\u73fe\u91cf\u30bb\u30c3\u30c8\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u3064\u3044\u3066\u3044\u3066\u6b32\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u305d\u3046\u3059\u308c\u30707.65\u3068\u3044\u3046\u6570\u5024\u306e\u610f\u5473\u3059\u308b\u3082\u306e\u304c\u5b9f\u9a13\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u304b\u3089\u306d\u3002\n\n\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a6\u30a7\u30d6\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304b\u3089\u306f\u3053\u306e\u30af\u30a8\u30ea\u3092\u6295\u3052\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u304c(\u8a33\u6ce8: 2010\u5e74\u306e\u6642\u70b9\u3067\u751f\u7269\u5b66\u30c7\u30fc\u30bf\u306eRDF\u5316\u304c\u5341\u5206\u3067\u306a\u304b\u3063\u305f\u305f\u3081\u3002\u4eca\u306f\u308f\u304b\u3089\u306a\u3044\u3002)\u3001\u540c\u3058\u3088\u3046\u306a\u554f\u984c\u3092\u81ea\u52d5\u3067\u89e3\u304f\u305f\u3081\u306e\u9053\u5177\u306f\u8c4a\u5bcc\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\n\nNCBI\u306e Gene Expression Omnibus(GEO)\u306f\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3078\u306e\u30af\u30a8\u30ea\u306f[Biopython](http://biopython.org/)\u306e[Eutils](http://www.ncbi.nlm.nih.gov/books/NBK25501/)API\u3067\u53ef\u80fd\u3067\u3059\u3002\n\u8208\u5473\u306e\u3042\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7279\u5b9a\u3067\u304d\u305f\u306a\u3089\u3070\u3001Bioconductor\u306e[GEOQuery](http://www.bioconductor.org/packages/bioc/html/GEOquery.html)\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001UCSC RefGene\u306e\u8b58\u5225\u5b50\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3059\u3079\u3066[Rpy2](http://rpy.sourceforge.net/rpy2.html)\u3067python\u304b\u3089R\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u9023\u7d50\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n> \u8a33\u6ce8: \u4eca\u306a\u3089\u591a\u5206`pipeR`\u306e\u65b9\u304c\u826f\u3044\n\n\u307e\u305a\u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u76ee\u6a19\u3092\u5b9a\u3081\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f\u30de\u30a6\u30b9\u306eproB\u7d30\u80de\u306e\u91ce\u751f\u578b\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002\n\n\n```py\ndef main():\n    organism = \"Mus musculus\"\n    cell_types = [\"proB\", \"ProB\", \"pro-B\"]\n    email = \"chapmanb@50mail.com\"\n    save_dir = os.getcwd()\n    exp_data = get_geo_data(organism, cell_types, email, save_dir)\n    \n\ndef _is_wild_type(result):\n    \"\"\"\u30b5\u30f3\u30d7\u30eb\u304c\u91ce\u751f\u578b\u3067\u3042\u308b\u304b\u5426\u304b\u3092\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u5224\u65ad\"\"\"\n    return result.samples[0][0].startswith(\"WT\")\n```\n\n\u6b21\u3044\u3067\u3001\u751f\u7269\u7a2e\u3068\u7d30\u80de\u816b\u306b\u57fa\u3065\u3044\u3066\u3001\u5165\u624b\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092GEO\u306b\u6295\u3052\u307e\u3059\u3002\u5b9f\u969b\u306e\u4ed5\u4e8b\u3067\u306f\u3001\u3042\u306a\u305f\u306e\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306a`_is_wild_type`\u95a2\u6570\u3092\u3001\u5bfe\u8a71\u7684\u306a\u6a5f\u80fd\u3092\u679c\u305f\u3059\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\u3001\u30e6\u30fc\u30b6\u30fc\u3067\u3042\u308b\u751f\u7269\u79d1\u5b66\u8005\u306b\u5b9f\u9a13\u624b\u6cd5\u306b\u5fdc\u3058\u3066\u9078\u3070\u305b\u308b\u3082\u306e\u3068\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092[pickle](http://docs.python.org/library/pickle.html)\u5316\u3057\u3066\u624b\u5143\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u3046\u3057\u30661\u5ea6\u3060\u3051\u30af\u30a8\u30ea\u3092\u884c\u3046\u3053\u3068\u3067\u5916\u90e8\u30b5\u30fc\u30d0\u30fc\u306e\u8ca0\u8377\u3092\u8efd\u6e1b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```py\ndef get_geo_data(organism, cell_types, email, save_dir, is_desired_result):\n    save_file = os.path.join(save_dir, \"%s-results.pkl\" % cell_types[0])\n    if not os.path.exists(save_file):\n        results = cell_type_gsms(organism, cell_types, email)\n        for result in results:\n            if is_desired_result(result):\n                with open(save_file, \"w\") as out_handle:\n                    cPickle.dump(result, out_handle)\n                break\n\n    with open(save_file) as save_handle:\n        result = cPickle.load(save_handle)\n```\n\nGEO\u306b\u30af\u30a8\u30ea\u3092\u9001\u4fe1\u3057\u3066\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u96e3\u984c\u306fBiopython\u306eEntrez\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u30af\u30a8\u30ea\u3092\u304f\u307f\u4e0a\u3052\u305f\u5f8c\u3001\u7d50\u679c\u306f\u8aac\u660e\u4ed8\u304d\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30d1\u30fc\u30b9\u3055\u308c\u3001\u30bf\u30a4\u30c8\u30eb\u3068\u30da\u30a2\u306b\u306a\u3063\u305f\u767a\u73fe\u91cf\u3068\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306eID\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n\n```py\ndef cell_type_gsms(organism, cell_types, email):\n    \"\"\"Entrez\u3092\u4f7f\u7528\u3057\u3066\u7279\u5b9a\u306e\u751f\u7269\u7a2e\u3068\u7d30\u80de\u816b\u306b\u95a2\u3057\u3066GEO\u3092\u53d6\u5f97\u3059\u308b\u3002\n    \"\"\"\n    Entrez.email = email\n    search_term = \"%s[ORGN] %s\" % (organism, \" OR \".join(cell_types))\n    print \"Searching GEO and retrieving results: %s\" % search_term\n\n    hits = []\n    handle = Entrez.esearch(db=\"gds\", term=search_term)\n    results = Entrez.read(handle)\n    for geo_id in results['IdList']:\n        handle = Entrez.esummary(db=\"gds\", id=geo_id)\n        summary = Entrez.read(handle)\n        samples = []\n        for sample in summary[0]['Samples']:\n            for cell_type in cell_types:\n                 if sample['Title'].find(cell_type) >= 0:\n                     samples.append((sample['Title'], sample['Accession']))\n                     break\n        if len(samples) > 0:\n            hits.append(GEOResult(summary[0]['summary'], samples))\n    return hits\n\n```\n\n\u3053\u308c\u3067\u3001\u5b9f\u9a13\u306e\u7a2e\u985e\u3092\u9078\u3079\u3070\u3001\u7b2c\u4e00\u95a2\u9580\u7a81\u7834\u3067\u3059\u3002\n\u6b21\u306f\u3001\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u308c\u306fRefGene ID\u3092\u767a\u73fe\u91cf\u306b\u30de\u30c3\u30d7\u3057\u305f\u8f9e\u66f8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\nWT ProB, biological rep1\n[('NM_177327', [7.7430266269999999, 6.4795213670000003, 8.8766985500000004]),\n('NM_001008785', [7.4671954649999996, 5.4761453329999998]),\n('NM_177325', [7.3312364040000002, 11.831475960000001]),\n('NM_177323', [6.9779868059999997, 6.3926399939999996]),\n('NM_177322', [5.0833683379999997])]\n\n```\n\n\u5b9f\u969b\u306b\u9762\u5012\u306a\u3068\u3053\u308d\u306f\u3001\u767a\u73fe\u91cf\u306e\u53d6\u5f97\u3068\u907a\u4f1d\u5b50ID\u3068\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u3059\u304c\u3001\u3053\u308c\u306fBioconductor\u306eGEOquery\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u884c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u907a\u4f1d\u5b50\u3068\u767a\u73fe\u91cf\u306e\u5bfe\u5fdc\u8868\u3001\u304a\u3088\u3073\u3088\u308a\u9ad8\u6b21\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u4e2d\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u524d\u8005\u306fR\u30b9\u30bf\u30a4\u30eb\u306e\u30bf\u30d6\u533a\u5207\u308a\u30c6\u30fc\u30d6\u30eb\u3067\u3001\u5f8c\u8005\u306f[JSON](http://www.json.org/)\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e21\u65b9\u3068\u3082\u30ed\u30fc\u30ab\u30eb\u306b\u8aad\u307f\u3084\u3059\u3044\u5f62\u3067\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002\n\n```py\ndef write_gsm_map(self, gsm_id, meta_file, table_file):\n    \"\"\"Bioconductor\u3092\u7528\u3044\u3066GEO\u306e\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u8868\u306b\u4fdd\u5b58\u3059\u308b\u3002\n    \"\"\"\n    robjects.r.assign(\"gsm.id\", gsm_id)\n    robjects.r.assign(\"table.file\", table_file)\n    robjects.r.assign(\"meta.file\", meta_file)\n    robjects.r('''\n        library(GEOquery)\n        library(rjson)\n        gsm <- getGEO(gsm.id)\n        write.table(Table(gsm), file = table.file, sep = \"\\t\", row.names = FALSE,\n        col.names = TRUE)\n        cat(toJSON(Meta(gsm)), file = meta.file)\n        ''')\n```\n\n\u3053\u306e\u95a2\u6570\u306b\u3088\u3063\u3066\u30d7\u30ed\u30fc\u30d6\u540d\u3068\u767a\u73fe\u91cf\u3068\u306e\u5bfe\u5fdc\u8868\u304c\u3067\u304d\u307e\u3059\u3002\u3088\u308a\u4fbf\u5229\u306a\u3082\u306e\u3068\u3059\u308b\u305f\u3081\u3001expression \u30de\u30a4\u30af\u30ed\u30a2\u30ec\u30a4\u306e\u30d7\u30ed\u30fc\u30d6\u3092\u751f\u7269\u5b66\u7684\u306a\u907a\u4f1d\u5b50\u306eID\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306fGEO\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3082\u3046\u4e00\u5ea6\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306f\u518d\u3073R\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5f62\u3067\u53d6\u5f97\u3057\u3001\u8208\u5473\u306e\u3042\u308b\u8981\u7d20\u306e\u307f\u3001\u30bf\u30d6\u533a\u5207\u308a\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```py\ndef _write_gpl_map(self, gpl_id, gpl_file):\n    \"\"\"R\u3092\u7528\u3044\u3066GEO\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u8868\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\"\"\"\n    robjects.r.assign(\"gpl.id\", gpl_id)\n    robjects.r.assign(\"gpl.file\", gpl_file)\n    robjects.r('''\n    library(GEOquery)\n    gpl <- getGEO(gpl.id)\n    gpl.map <- subset(Table(gpl), select=c(\"ID\", \"RefSeq.Transcript.ID\"))\n    write.table(gpl.map, file = gpl.file, sep = \"\\t\", row.names = FALSE,\n    col.names = TRUE)\n    ''')\n```\n\n\u6700\u5f8c\u306b\u3001\u4eca\u307e\u3067\u306e\u51e6\u7406\u3092\u307e\u3068\u3081\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5bfe\u5fdc\u8868\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30d1\u30fc\u30b9\u3057\u3001\u767a\u73fe\u91cf -> \u30d7\u30ed\u30fc\u30d6ID -> Transcript ID \u3068\u5bfe\u5fdc\u95a2\u4fc2\u3092\u3064\u306a\u3052\u3066\u3044\u304d\u307e\u3059\u3002\u6700\u7d42\u7684\u306a\u8f9e\u66f8\u306f\u907a\u4f1d\u5b50\u306eID\u3092\u767a\u73fe\u91cf\u306b\u5bfe\u5fdc\u4ed8\u3051\u305f\u3082\u306e\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n```py\ndef get_gsm_tx_values(self, gsm_id, save_dir):\n    \"\"\"\u300c\u8ee2\u5199\u7523\u7269\u300d => \u300cGEO, GSM\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u3057\u305f\u767a\u73fe\u91cf\u300d\u306e\u5bfe\u5fdc\u8868\u3092\u4f5c\u6210\u3059\u308b\n    \"\"\"\n    gsm_meta_file = os.path.join(save_dir, \"%s-meta.txt\" % gsm_id)\n    gsm_table_file = os.path.join(save_dir, \"%s-table.txt\" % gsm_id)\n    if (not os.path.exists(gsm_meta_file) or \\\n        not os.path.exists(gsm_table_file)):\n        self._write_gsm_map(gsm_id, gsm_meta_file, gsm_table_file)\n\n    with open(gsm_meta_file) as in_handle:\n        gsm_meta = json.load(in_handle)\n    id_to_tx = self.get_gpl_map(gsm_meta['platform_id'], save_dir)\n    tx_to_vals = collections.defaultdict(list)\n    with open(gsm_table_file) as in_handle:\n        reader = csv.reader(in_handle, dialect='excel-tab')\n        reader.next() # header\n        for probe_id, probe_val in reader:\n            for tx_id in id_to_tx.get(probe_id, []):\n                tx_to_vals[tx_id].append(float(probe_val))\n    return tx_to_vals\n\n```\n\n[\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8](https://github.com/chapmanb/bcbb/blob/022c50b3132bc3d009ed1d533a3954bd564a9ed3/rest_apis/find_geo_data.py )\u306f\u4eca\u307e\u3067\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3092\u7d71\u5408\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u30af\u30a8\u30ea\u304b\u3089\u306f\u3058\u3081\u3066\u3001\u6700\u7d42\u7684\u306b\u306f\u5fc5\u8981\u306a\u767a\u73fe\u91cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n\u3068\u306f\u3044\u3048\u3001RDF\u3092\u7528\u3044\u305f\u7406\u60f3\u7684\u306a\u3082\u306e\u306b\u6bd4\u3079\u308b\u3068\u3060\u3044\u3076\u56de\u308a\u9053\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u7591\u554f\u30c9\u30ea\u30d6\u30f3\u306a\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3067\u304d\u308b\u9650\u308a\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u306b\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u306e\u306f\u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u306e\u30c4\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u8005\u304c\u7e70\u308a\u8fd4\u3057\u76f4\u9762\u3059\u308b\u8ab2\u984c\u3067\u3059\u3002\n\n\n----\n\u8a33\u306f\u3053\u3053\u307e\u3067\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u81ea\u4f53\u306fhttps://github.com/chapmanb/bcbb/blob/022c50b3132bc3d009ed1d533a3954bd564a9ed3/rest_apis/find_geo_data.py \n\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u7b46\u8005\u306e[bcbb](https://github.com/chapmanb/bcbb/tree/master)\u3068\u3044\u3046\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306f\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u5f79\u7acb\u3064\u30d0\u30a4\u30aa\u30a4\u30f3\u30d5\u30a9\u30de\u30c6\u30a3\u30af\u30b9\u7528\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["bioinformatics", "R", "Python", "rdf", "semanticweb"]}