{"context": "\n\n\u6982\u8981\nnim\u306ePEG\u64cd\u4f5c\u95a2\u9023\u51e6\u7406\u3092\u30b3\u30c4\u30b3\u30c4\u3068\u66f8\u3044\u3066\u3044\u304f\u4e88\u5b9a\nnim\u3067\u306f\u3001\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea(re)\u3082\u3042\u308a\u307e\u3059\u304c\u3001PEG(pegs)\u3082\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u306fimpure(OS\u74b0\u5883\u4f9d\u5b58\u3063\u3066\u3053\u3068\uff1f)\u3001PEG\u306fpure\u30e9\u30a4\u30d6\u30e9\u30ea(nim\u3067\u5b9f\u88c5)\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001PEG\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u304b\u306a\u30fc\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u30e1\u30e2\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30c3\u30c1\u30f3\u30b0\nimport strutils,pegs,unicode\nblock:\n  echo \"1\"       =~ peg\"\\d\"\n  echo \"123\"     =~ peg\"\\d+\"\n  echo \"123ABC\"  =~ peg\"\\d+\\w+\"\n  echo \"123_ABC\" =~ peg\"\\d+_\\w+\"\n\n(stdout)\ntrue\ntrue\ntrue\ntrue\n\n\n\u30b9\u30a4\u30c3\u30c1\nimport strutils,pegs,unicode\nblock:\n  # \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u7121\u8996\n  echo \"abc\" =~ peg\"i'ABC'\"\n  # \u30b9\u30bf\u30a4\u30eb\u3092\u7121\u8996(\u4f7f\u3046\u5834\u9762\u3042\u308b\u304b\u306a\uff1f)\n  echo \"Abc_Def\" =~ peg\"y'AbcDef'\"\n\n(stdout)\ntrue\ntrue\n\n\n\u3061\u3087\u3063\u3068\u8907\u96d1\u306a\u30de\u30c3\u30c1\u30f3\u30b0\nimport strutils,pegs,unicode\nblock:\n  # \u8b58\u5225\u5b50\u304c\u7a7a\u767d\u533a\u5207\u308a\u3067\u8907\u6570\u5b58\u5728\u3059\u308b\n  let pegstr = peg(\"\"\"\ngrammar <- ws* rule+\nrule <- {\\ident} ws*\nws <- \\s+\n  \"\"\")\n  echo \"1)\"\n  echo \"\" =~ pegstr\n  echo \"2)\"\n  echo \"abc\" =~ pegstr\n  echo matches.len\n  echo matches[0]\n  echo \"3)\"\n  echo \"abc def\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo \"4)\"\n  echo \"abc def ghi\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo \"5)\"\n  echo \"abc def ghi XYZ\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo matches[3]\n  for x in 0..19:\n    matches[x] = nil\n  echo \"6)\"\n  echo \"\u6539\u884c\u30c6\u30b9\u30c8\"\n  echo \"ABC\\nDEF\\nGHI\\nJKL \" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo matches[3]\n\n(stdout)\n1)\nfalse\n2)\ntrue\n20\nabc\n3)\ntrue\nabc\ndef\n4)\ntrue\nabc\ndef\nghi\n5)\ntrue\nabc\ndef\nghi\nXYZ\n6)\n\u6539\u884c\u30c6\u30b9\u30c8\ntrue\nABC\nDEF\nGHI\nJKL\n\n\n\u4e00\u81f4\u3057\u305f\u6587\u5b57\u6570\u304c\u8fd4\u5374\u3055\u308c\u308b(rawMatch)\nimport strutils,pegs,unicode\nblock:\n  var c : Captures\n  echo \"abcDEF\".rawMatch(peg\"abc\",0, c)\n  echo \"abcDEF\".rawMatch(peg\"DEF\",0, c)\n  # rawMatch\u3068\u5909\u308f\u3089\u306a\u3044\uff1f\n  echo \"abc\".matchLen(peg\"abc\")\n  echo \"abcabc\".matchLen(peg\"(abc)+\")\n\n(stdout)\n3\n-1\n3\n6\n\n\n\u80af\u5b9a\u5148\u8aad\u307f\nimport strutils,pegs,unicode\nblock:\n  echo \"\u30de\u30c3\u30c1\u21d2\",\"ABCDEFGHI\" =~ peg\"{ABC&DEF}\"\n  echo \"\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2\", matches[0]\n  echo \"\u30a2\u30f3\u30de\u30c3\u30c1\u21d2\",\"ABCDGHIEF\" =~ peg\"ABC&DEF\"\n\n(stdout)\n\u30de\u30c3\u30c1\u21d2true\n\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2ABC\n\u30a2\u30f3\u30de\u30c3\u30c1\u21d2false\n\n\n\u5426\u5b9a\u5148\u8aad\u307f\nimport strutils,pegs,unicode\nblock:\n  echo \"\u30de\u30c3\u30c1\u21d2\",\"ABCDGHIEF\" =~ peg\"{ABC!DEF}\"\n  echo \"\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2\", matches[0]\n  echo \"\u30a2\u30f3\u30de\u30c3\u30c1\u21d2\",\"ABCDEFGHI\" =~ peg\"ABC!DEF\"\n\n(stdout)\n\u30de\u30c3\u30c1\u21d2true\n\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2ABC\n\u30a2\u30f3\u30de\u30c3\u30c1\u21d2false\n\n\n\u30de\u30c3\u30c1\u3057\u305f\u304b(match)\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".match(peg\"abc\")\n  echo \"abcDEF\".match(peg\"{\\w+}\")\n  echo \"abcDEF\".matchLen(peg\"{\\w+}\")\n\n(stdout)\ntrue\ntrue\n6\n\n\n\u691c\u7d22\u3059\u308b(find,findBounds)\nimport strutils,pegs,unicode\nblock:\n  echo \"abcXYZ\".find(peg\"XYZ\")\n  echo \"public sub sample()\".find(peg\"sub \\s+ {\\ident} \\s* \\(\")\n  # \u898b\u3064\u3051\u305f\u4f4d\u7f6e\u3092\u8fd4\u5374\n  var m : array[0..19, string]\n  echo \"abcXYZ\".findBounds(peg\"XYZ\",m,0)\n\n(stdout)\n3\n7\n(first: 3, last: 5)\n\n\n\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u90e8\u5206\u3092\u3059\u3079\u3066\u53d6\u308a\u51fa\u3059\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".findAll(peg\"abc\").join(\"/\")\n  echo \"abc def abc\".findAll(peg\"abc\").join(\"/\")\n  echo \"abc \\n abc \\n abc \\n\".findAll(peg\"abc\").join(\"/\")\n\n(stdout)\nabc\nabc/abc\nabc/abc/abc\n\n\n\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u542b\u307e\u308c\u308b\u304b\uff1f\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".contains(peg\"abc\")\n  var m : array[0..19,string]\n  echo \"abc def ghi abc\".contains(peg\"{abc}\",m,6)\n  echo m[0]\n\n(stdout)\ntrue\ntrue\nabc\n\n\n\u90e8\u5206\u4e00\u81f4\nimport strutils,pegs,unicode\nblock:\n  echo \"abcdef\".startsWith(peg\"abc\")\n  echo \"abcdef\".endsWith(peg\"def\")\n\n(stdout)\ntrue\ntrue\n\n\n\u6587\u5b57\u5217\u7f6e\u63db\nimport strutils,pegs,unicode\nblock:\n  # \u7f6e\u63db\n  echo \"abc def ghi def\".replace(peg\"def/ghi\",\"DEF\")\n  # \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4ed8\u304d\u7f6e\u63db\n  echo \"abc def ghi def\".replacef(peg\"{def/ghi}\",\"[$1]\")\n  # \u8907\u6570\u306e\u7f6e\u63db\n  var keyval = @[\n    ( pattern: peg\"abc\" , repl: \"ABC\" ),\n    ( pattern: peg\"def\" , repl: \"DEF\" )\n  ]\n  echo \"abc def ghi\".parallelReplace(keyval)\n\n(stdout)\nabc DEF DEF DEF\nabc [def] [ghi] [def]\nABC DEF ghi\n\n\n\u5206\u5272\nimport strutils,pegs,unicode\nblock:\n  # c / f / i \u3067\u5206\u5272\u3059\u308b\n  for x in \"abcdefghijkl\".split(peg\"c/f/i\") :\n    echo x\n\n(stdout)\nab\nde\ngh\njkl\n\n\n\u95a2\u6570\u5b9a\u7fa9\u30b5\u30f3\u30d7\u30eb\nimport strutils,pegs,unicode\nblock:\n  var pegPattern = peg(\"\"\"\n  funcdef     <- {access} \\s+ {returntype} \\s+ {funcname}\n  access      <- 'public' / 'private' / 'protected'\n  returntype  <- \\ident\n  funcname    <- \\ident\n  \"\"\")\n  echo \"public void sample()\" =~ pegPattern\n  for x in matches:\n    if x != nil : echo x\n\n(stdout)\ntrue\npublic\nvoid\nsample\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u6790\nimport strutils,pegs,unicode\nblock:\n  var pegParameters = peg(\"\"\"\n  parameters    <- lparen ws headParameter restParameter* ws rparen\n  parameter     <- {\\ident} sp {\\ident}\n  headParameter <- parameter\n  restParameter <- ',' ws parameter\n  lparen        <- '('\n  rparen        <- ')'\n  sp            <- \\s+\n  ws            <- \\s*\n  \"\"\")\n  # \u30d1\u30fc\u30b9\uff06\u7d50\u679c\u8868\u793a\n  proc showResults(target: string, pattern: Peg): int {.discardable.} =\n    echo \"[\",target,\"]\"\n    discard target =~ pattern\n    for i,x in matches :\n      if x != nil :\n        if i mod 2 == 0 :\n          echo \"data type = \",x\n        else :\n          echo \"var name  = \",x\n  \"(int a)\".showResults(pegParameters)\n  \"(int a,int b)\".showResults(pegParameters)\n  \"(int a,string b,float c)\".showResults(pegParameters)\n\n(stdout)\n[(int a)]\ndata type = int\nvar name  = a\n[(int a,int b)]\ndata type = int\nvar name  = a\ndata type = int\nvar name  = b\n[(int a,string b,float c)]\ndata type = int\nvar name  = a\ndata type = string\nvar name  = b\ndata type = float\nvar name  = c\n\n# \u6982\u8981\nnim\u306ePEG\u64cd\u4f5c\u95a2\u9023\u51e6\u7406\u3092\u30b3\u30c4\u30b3\u30c4\u3068\u66f8\u3044\u3066\u3044\u304f\u4e88\u5b9a\nnim\u3067\u306f\u3001\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea(re)\u3082\u3042\u308a\u307e\u3059\u304c\u3001PEG(pegs)\u3082\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u30e9\u30a4\u30d6\u30e9\u30ea\u306fimpure(OS\u74b0\u5883\u4f9d\u5b58\u3063\u3066\u3053\u3068\uff1f)\u3001PEG\u306fpure\u30e9\u30a4\u30d6\u30e9\u30ea(nim\u3067\u5b9f\u88c5)\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001PEG\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u304b\u306a\u30fc\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n## \u4ee5\u4e0b\u30e1\u30e2\n### \u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30c3\u30c1\u30f3\u30b0\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"1\"       =~ peg\"\\d\"\n  echo \"123\"     =~ peg\"\\d+\"\n  echo \"123ABC\"  =~ peg\"\\d+\\w+\"\n  echo \"123_ABC\" =~ peg\"\\d+_\\w+\"\n```\n```\n(stdout)\ntrue\ntrue\ntrue\ntrue\n```\n### \u30b9\u30a4\u30c3\u30c1\n```nim\nimport strutils,pegs,unicode\nblock:\n  # \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u7121\u8996\n  echo \"abc\" =~ peg\"i'ABC'\"\n  # \u30b9\u30bf\u30a4\u30eb\u3092\u7121\u8996(\u4f7f\u3046\u5834\u9762\u3042\u308b\u304b\u306a\uff1f)\n  echo \"Abc_Def\" =~ peg\"y'AbcDef'\"\n```\n```\n(stdout)\ntrue\ntrue\n```\n### \u3061\u3087\u3063\u3068\u8907\u96d1\u306a\u30de\u30c3\u30c1\u30f3\u30b0\n```nim\nimport strutils,pegs,unicode\nblock:\n  # \u8b58\u5225\u5b50\u304c\u7a7a\u767d\u533a\u5207\u308a\u3067\u8907\u6570\u5b58\u5728\u3059\u308b\n  let pegstr = peg(\"\"\"\ngrammar <- ws* rule+\nrule <- {\\ident} ws*\nws <- \\s+\n  \"\"\")\n  echo \"1)\"\n  echo \"\" =~ pegstr\n  echo \"2)\"\n  echo \"abc\" =~ pegstr\n  echo matches.len\n  echo matches[0]\n  echo \"3)\"\n  echo \"abc def\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo \"4)\"\n  echo \"abc def ghi\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo \"5)\"\n  echo \"abc def ghi XYZ\" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo matches[3]\n  for x in 0..19:\n    matches[x] = nil\n  echo \"6)\"\n  echo \"\u6539\u884c\u30c6\u30b9\u30c8\"\n  echo \"ABC\\nDEF\\nGHI\\nJKL \" =~ pegstr\n  echo matches[0]\n  echo matches[1]\n  echo matches[2]\n  echo matches[3]\n```\n```\n(stdout)\n1)\nfalse\n2)\ntrue\n20\nabc\n3)\ntrue\nabc\ndef\n4)\ntrue\nabc\ndef\nghi\n5)\ntrue\nabc\ndef\nghi\nXYZ\n6)\n\u6539\u884c\u30c6\u30b9\u30c8\ntrue\nABC\nDEF\nGHI\nJKL\n```\n### \u4e00\u81f4\u3057\u305f\u6587\u5b57\u6570\u304c\u8fd4\u5374\u3055\u308c\u308b(rawMatch)\n```nim\nimport strutils,pegs,unicode\nblock:\n  var c : Captures\n  echo \"abcDEF\".rawMatch(peg\"abc\",0, c)\n  echo \"abcDEF\".rawMatch(peg\"DEF\",0, c)\n  # rawMatch\u3068\u5909\u308f\u3089\u306a\u3044\uff1f\n  echo \"abc\".matchLen(peg\"abc\")\n  echo \"abcabc\".matchLen(peg\"(abc)+\")\n```\n```\n(stdout)\n3\n-1\n3\n6\n```\n### \u80af\u5b9a\u5148\u8aad\u307f\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"\u30de\u30c3\u30c1\u21d2\",\"ABCDEFGHI\" =~ peg\"{ABC&DEF}\"\n  echo \"\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2\", matches[0]\n  echo \"\u30a2\u30f3\u30de\u30c3\u30c1\u21d2\",\"ABCDGHIEF\" =~ peg\"ABC&DEF\"\n```\n```\n(stdout)\n\u30de\u30c3\u30c1\u21d2true\n\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2ABC\n\u30a2\u30f3\u30de\u30c3\u30c1\u21d2false\n```\n### \u5426\u5b9a\u5148\u8aad\u307f\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"\u30de\u30c3\u30c1\u21d2\",\"ABCDGHIEF\" =~ peg\"{ABC!DEF}\"\n  echo \"\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2\", matches[0]\n  echo \"\u30a2\u30f3\u30de\u30c3\u30c1\u21d2\",\"ABCDEFGHI\" =~ peg\"ABC!DEF\"\n```\n```\n(stdout)\n\u30de\u30c3\u30c1\u21d2true\n\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u21d2ABC\n\u30a2\u30f3\u30de\u30c3\u30c1\u21d2false\n```\n### \u30de\u30c3\u30c1\u3057\u305f\u304b(match)\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".match(peg\"abc\")\n  echo \"abcDEF\".match(peg\"{\\w+}\")\n  echo \"abcDEF\".matchLen(peg\"{\\w+}\")\n```\n```\n(stdout)\ntrue\ntrue\n6\n```\n### \u691c\u7d22\u3059\u308b(find,findBounds)\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"abcXYZ\".find(peg\"XYZ\")\n  echo \"public sub sample()\".find(peg\"sub \\s+ {\\ident} \\s* \\(\")\n  # \u898b\u3064\u3051\u305f\u4f4d\u7f6e\u3092\u8fd4\u5374\n  var m : array[0..19, string]\n  echo \"abcXYZ\".findBounds(peg\"XYZ\",m,0)\n```\n```\n(stdout)\n3\n7\n(first: 3, last: 5)\n```\n### \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u90e8\u5206\u3092\u3059\u3079\u3066\u53d6\u308a\u51fa\u3059\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".findAll(peg\"abc\").join(\"/\")\n  echo \"abc def abc\".findAll(peg\"abc\").join(\"/\")\n  echo \"abc \\n abc \\n abc \\n\".findAll(peg\"abc\").join(\"/\")\n```\n```\n(stdout)\nabc\nabc/abc\nabc/abc/abc\n```\n### \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u542b\u307e\u308c\u308b\u304b\uff1f\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"abc\".contains(peg\"abc\")\n  var m : array[0..19,string]\n  echo \"abc def ghi abc\".contains(peg\"{abc}\",m,6)\n  echo m[0]\n```\n```\n(stdout)\ntrue\ntrue\nabc\n```\n### \u90e8\u5206\u4e00\u81f4\n```nim\nimport strutils,pegs,unicode\nblock:\n  echo \"abcdef\".startsWith(peg\"abc\")\n  echo \"abcdef\".endsWith(peg\"def\")\n```\n```\n(stdout)\ntrue\ntrue\n```\n### \u6587\u5b57\u5217\u7f6e\u63db\n```nim\nimport strutils,pegs,unicode\nblock:\n  # \u7f6e\u63db\n  echo \"abc def ghi def\".replace(peg\"def/ghi\",\"DEF\")\n  # \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4ed8\u304d\u7f6e\u63db\n  echo \"abc def ghi def\".replacef(peg\"{def/ghi}\",\"[$1]\")\n  # \u8907\u6570\u306e\u7f6e\u63db\n  var keyval = @[\n    ( pattern: peg\"abc\" , repl: \"ABC\" ),\n    ( pattern: peg\"def\" , repl: \"DEF\" )\n  ]\n  echo \"abc def ghi\".parallelReplace(keyval)\n```\n```\n(stdout)\nabc DEF DEF DEF\nabc [def] [ghi] [def]\nABC DEF ghi\n```\n### \u5206\u5272\n```nim\nimport strutils,pegs,unicode\nblock:\n  # c / f / i \u3067\u5206\u5272\u3059\u308b\n  for x in \"abcdefghijkl\".split(peg\"c/f/i\") :\n    echo x\n```\n```\n(stdout)\nab\nde\ngh\njkl\n```\n### \u95a2\u6570\u5b9a\u7fa9\u30b5\u30f3\u30d7\u30eb\n```nim\nimport strutils,pegs,unicode\nblock:\n  var pegPattern = peg(\"\"\"\n  funcdef     <- {access} \\s+ {returntype} \\s+ {funcname}\n  access      <- 'public' / 'private' / 'protected'\n  returntype  <- \\ident\n  funcname    <- \\ident\n  \"\"\")\n  echo \"public void sample()\" =~ pegPattern\n  for x in matches:\n    if x != nil : echo x\n```\n```\n(stdout)\ntrue\npublic\nvoid\nsample\n```\n### \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u6790\n```nim\nimport strutils,pegs,unicode\nblock:\n  var pegParameters = peg(\"\"\"\n  parameters    <- lparen ws headParameter restParameter* ws rparen\n  parameter     <- {\\ident} sp {\\ident}\n  headParameter <- parameter\n  restParameter <- ',' ws parameter\n  lparen        <- '('\n  rparen        <- ')'\n  sp            <- \\s+\n  ws            <- \\s*\n  \"\"\")\n  # \u30d1\u30fc\u30b9\uff06\u7d50\u679c\u8868\u793a\n  proc showResults(target: string, pattern: Peg): int {.discardable.} =\n    echo \"[\",target,\"]\"\n    discard target =~ pattern\n    for i,x in matches :\n      if x != nil :\n        if i mod 2 == 0 :\n          echo \"data type = \",x\n        else :\n          echo \"var name  = \",x\n  \"(int a)\".showResults(pegParameters)\n  \"(int a,int b)\".showResults(pegParameters)\n  \"(int a,string b,float c)\".showResults(pegParameters)\n```\n```\n(stdout)\n[(int a)]\ndata type = int\nvar name  = a\n[(int a,int b)]\ndata type = int\nvar name  = a\ndata type = int\nvar name  = b\n[(int a,string b,float c)]\ndata type = int\nvar name  = a\ndata type = string\nvar name  = b\ndata type = float\nvar name  = c\n```\n", "tags": ["Nim"]}