{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3000Python\u3067Sentinel-3A/SLSTR\u306eL1B\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001RGB\u5408\u6210\u3057\u3066\u307f\u305f\u306e\u3067\u3001\u5fd8\u5099\u9332\u3092\u6b8b\u3057\u3066\u304a\u304f\u3002RGB\u5408\u6210\u3059\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u5206\u304b\u308a\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3002\u3053\u3053\u3092\u53c2\u7167\u3057\u305f\u3002\n\n\u30c7\u30fc\u30bf\u3068\u65b9\u6cd5\n\u3000L1B\u30c7\u30fc\u30bf\u306f\u3001EUMETSAT\u306eEarth Observation Portal\u30672017\u5e7401\u670823\u65e509\u664243\u5206\u9803\uff08JST\uff09\u306e\u65e5\u672c\u5468\u8fba\u306e\u3082\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\uff08\u8981\u30e6\u30fc\u30b6\u767b\u9332\uff09\u3002\n\u3000\u5148\u305a\u3001\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3002\u4eca\u56de\u306f\u3001Python/Basemap\u3067\u6d77\u5cb8\u7dda\u3092\u5f15\u3044\u3066\u308b\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport netCDF4\nfrom scipy.interpolate import griddata\nfrom mpl_toolkits.basemap import Basemap\n\n\u3000\u6b21\u306b\u3001Python/NetCDF\uff14\u3067\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3001\uff12\uff08\u8d64\uff09\u3001\uff13\uff08\u8fd1\u8d64\u5916\uff09\u306e\u653e\u5c04\u8f1d\u5ea6\u3001\u7def\u5ea6\u3001\u7d4c\u5ea6\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\uff06\u5ff5\u306e\u305f\u3081\u306e\u53ef\u8996\u5316\uff09\u3002\ndname = 'S3A_SL_1_RBT____20170103T004334_20170103T004634_20170103T024744_0179_012_373_2340_MAR_O_NR_002.SEN3'\n\n# Read radiance at band1\nfname = 'S1_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S1_radiance_an'\nS1 = nc.variables[vname]\nplt.imshow(S1[:])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Read radiance at band2\nfname = 'S2_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S2_radiance_an'\nS2 = nc.variables[vname]\nplt.imshow(S2[:])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Read radiance at band3\nfname = 'S3_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S3_radiance_an'\nS3 = nc.variables[vname]\nplt.imshow(S3[:])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n\n# Read latitude & longitude\nfname = 'geodetic_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'latitude_an'\nLAT = nc.variables[vname]\nplt.imshow(LAT[:])\nplt.title(LAT.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(LAT.units)\nplt.show()\n\nvname = 'longitude_an'\nLON = nc.variables[vname]\nplt.imshow(LON[:])\nplt.title(LON.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(LON.units)\nplt.show()\n\n\u3053\u3053\u3067\u3001Basemap\u306e\u6295\u5f71\u6cd5\uff08\u4eca\u56de\u306f\u3001Equidistant Cylindrical Projection\uff09\u3068\u7bc4\u56f2\u3068\u5206\u89e3\u80fd\u3092\u5b9a\u7fa9\u3002\nm = Basemap(projection='cyl',llcrnrlon=LON[:].min(), llcrnrlat=LAT[:].min(),urcrnrlon=LON[:].max(), urcrnrlat=LAT[:].max(),resolution=\"i\")\n\n\u305d\u3057\u3066\u3001\u30d0\u30f3\u30c9\uff11\u3001\uff12\u3001\uff13\u306e\u653e\u5c04\u8f1d\u5ea6\u3092\u5730\u56f3\u6295\u5f71\uff08\uff06\u5ff5\u306e\u305f\u3081\u306e\u53ef\u8996\u5316\uff09\u3002\n# Map projection of radiance at band1\ni = np.isnan(S1[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S1[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns1 = griddata((x, y), z, (xi, yi))\nm.imshow(s1)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Map projection of radiance at band 2\ni = np.isnan(S2[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S2[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns2 = griddata((x, y), z, (xi, yi))\nm.imshow(s2)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Map projection of radiance at band 3\ni = np.isnan(S3[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S3[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns3 = griddata((x, y), z, (xi, yi))\nm.imshow(s3)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n\n\u3000\u7bc4\u56f2\u5916\u3082\u88dc\u9593\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30de\u30b9\u30af\u3092\u4f5c\u6210\u3057\u3066\u3001\u7bc4\u56f2\u5916\u3092\u9664\u5916\u3059\u308b\u3002\n# Make mask\nx = LON[:].flatten()\ny = LAT[:].flatten()\nz = np.ones(S1[:].data.shape)\nz[0, :] = 0\nz[z.shape[0] - 1, :] = 0\nz[:, 0] = 0\nz[:, z.shape[1] - 1] = 0\nz = z.flatten()\n\nmask = griddata((x, y), z, (xi, yi), method = 'nearest')\nm.imshow(mask)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.show()\n\n# Radiance at Band 1\ns1 = s1 * mask\ni = np.where(s1 == 0)\ns1[i] = np.nan\nm.imshow(s1)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Radiance at Band 2\ns2 = s2 * mask\ni = np.where(s2 == 0)\ns2[i] = np.nan\nm.imshow(s2)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Radiance at Band 3\ns3 = s3 * mask\ni = np.where(s3 == 0)\ns3[i] = np.nan\nm.imshow(s3)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n\n\u30d0\u30f3\u30c9\uff11\u3001\uff12\u3001\uff13\u306e\u653e\u5c04\u8f1d\u5ea6\u3092\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u3067\u6b63\u898f\u5316\u3059\u308b\uff08\u529b\u6280\u3001\u6b63\u653b\u6cd5\u306f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\uff09\u3002\n# Normalize radiance by minimum and maximum\n# Band 1\ni = np.isnan(s1)\nn1 = (1 - 0) * (s1 - s1[~i].min()) / (s1[~i].max() - s1[~i].min())\n\n# Band 2\ni = np.isnan(s2)\nn2 = (1 - 0) * (s2 - s2[~i].min()) / (s2[~i].max() - s2[~i].min())\n\n# Band 3\ni = np.isnan(s3)\nn3 = (1 - 0) * (s3 - s3[~i].min()) / (s3[~i].max() - s3[~i].min())\n\nnumpy/dstack\u3092\u5229\u7528\u3057\u3066\u3001\u30d0\u30f3\u30c93\uff08\u8fd1\u8d64\u5916\uff09\u3092R\u3001\u30d0\u30f3\u30c92\uff08\u8d64\uff09\u3092G\u3001\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3092B\u3068\u3057\u3066RGB\u5408\u6210\u3002\nrgb = np.dstack((n3, n2))\nrgb = np.dstack((rgb, n1))\nm.imshow(rgb)\nm.drawcoastlines(color = 'white')\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title('RGB = (Band3, Band2, Band1)')\n#plt.show()\nplt.savefig('rgb.png')\n\n\n\u3000\u3064\u3044\u3067\u306b\u3001\u30d0\u30f3\u30c92\uff08\u8d64\uff09\u3092R\u3001\u30d0\u30f3\u30c93\uff08\u8fd1\u8d64\u5916\uff09\u3092G\u3001\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3092B\u3068\u3057\u3066RGB\u5408\u6210\u3002\nrgb = np.dstack((n2, n3))\nrgb = np.dstack((rgb, n1))\nm.imshow(rgb)\nm.drawcoastlines(color = 'white')\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title('RGB = (Band2, Band3, Band1)')\n#plt.show()\nplt.savefig('rgb.png')\n\n\n\u3000\u529b\u6280\u3067\u3084\u3063\u305f\u305b\u3044\u304b\u6697\u3044\u3002\u6d77\u5cb8\u7dda\u3092\u5f15\u3044\u3066\u3066\u826f\u304b\u3063\u305f\u304b\u3082\u3002\n# \u306f\u3058\u3081\u306b\n\u3000Python\u3067Sentinel-3A/SLSTR\u306eL1B\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001RGB\u5408\u6210\u3057\u3066\u307f\u305f\u306e\u3067\u3001\u5fd8\u5099\u9332\u3092\u6b8b\u3057\u3066\u304a\u304f\u3002RGB\u5408\u6210\u3059\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u5206\u304b\u308a\u3084\u3059\u304f\u306a\u308b\u306e\u3067\u3002[\u3053\u3053](http://qiita.com/nishimuraatsushi/items/5bf9c869813133352c56)\u3092\u53c2\u7167\u3057\u305f\u3002\n\n# \u30c7\u30fc\u30bf\u3068\u65b9\u6cd5\n\u3000L1B\u30c7\u30fc\u30bf\u306f\u3001EUMETSAT\u306e[Earth Observation Portal](https://eoportal.eumetsat.int/userMgmt/login.faces)\u30672017\u5e7401\u670823\u65e509\u664243\u5206\u9803\uff08JST\uff09\u306e\u65e5\u672c\u5468\u8fba\u306e\u3082\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\uff08\u8981\u30e6\u30fc\u30b6\u767b\u9332\uff09\u3002\n\n\u3000\u5148\u305a\u3001\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3002\u4eca\u56de\u306f\u3001Python/[Basemap](http://matplotlib.org/basemap/)\u3067\u6d77\u5cb8\u7dda\u3092\u5f15\u3044\u3066\u308b\u3002\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport netCDF4\nfrom scipy.interpolate import griddata\nfrom mpl_toolkits.basemap import Basemap\n```\n\n\u3000\u6b21\u306b\u3001Python/NetCDF\uff14\u3067\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3001\uff12\uff08\u8d64\uff09\u3001\uff13\uff08\u8fd1\u8d64\u5916\uff09\u306e\u653e\u5c04\u8f1d\u5ea6\u3001\u7def\u5ea6\u3001\u7d4c\u5ea6\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff08\uff06\u5ff5\u306e\u305f\u3081\u306e\u53ef\u8996\u5316\uff09\u3002\n\n```\ndname = 'S3A_SL_1_RBT____20170103T004334_20170103T004634_20170103T024744_0179_012_373_2340_MAR_O_NR_002.SEN3'\n\n# Read radiance at band1\nfname = 'S1_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S1_radiance_an'\nS1 = nc.variables[vname]\nplt.imshow(S1[:])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Read radiance at band2\nfname = 'S2_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S2_radiance_an'\nS2 = nc.variables[vname]\nplt.imshow(S2[:])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Read radiance at band3\nfname = 'S3_radiance_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'S3_radiance_an'\nS3 = nc.variables[vname]\nplt.imshow(S3[:])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n\n# Read latitude & longitude\nfname = 'geodetic_an.nc'\nfpath = '%s/%s' % (dname, fname)\nnc = netCDF4.Dataset(fpath, 'r')\nprint nc.variables\n\nvname = 'latitude_an'\nLAT = nc.variables[vname]\nplt.imshow(LAT[:])\nplt.title(LAT.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(LAT.units)\nplt.show()\n\nvname = 'longitude_an'\nLON = nc.variables[vname]\nplt.imshow(LON[:])\nplt.title(LON.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(LON.units)\nplt.show()\n```\n\n \u3053\u3053\u3067\u3001Basemap\u306e\u6295\u5f71\u6cd5\uff08\u4eca\u56de\u306f\u3001Equidistant Cylindrical Projection\uff09\u3068\u7bc4\u56f2\u3068\u5206\u89e3\u80fd\u3092\u5b9a\u7fa9\u3002\n\n```\nm = Basemap(projection='cyl',llcrnrlon=LON[:].min(), llcrnrlat=LAT[:].min(),urcrnrlon=LON[:].max(), urcrnrlat=LAT[:].max(),resolution=\"i\")\n```\n\n \u305d\u3057\u3066\u3001\u30d0\u30f3\u30c9\uff11\u3001\uff12\u3001\uff13\u306e\u653e\u5c04\u8f1d\u5ea6\u3092\u5730\u56f3\u6295\u5f71\uff08\uff06\u5ff5\u306e\u305f\u3081\u306e\u53ef\u8996\u5316\uff09\u3002\n\n```\n# Map projection of radiance at band1\ni = np.isnan(S1[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S1[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns1 = griddata((x, y), z, (xi, yi))\nm.imshow(s1)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Map projection of radiance at band 2\ni = np.isnan(S2[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S2[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns2 = griddata((x, y), z, (xi, yi))\nm.imshow(s2)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Map projection of radiance at band 3\ni = np.isnan(S3[:].data)\nx = LON[:][~i]\ny = LAT[:][~i]\nz = S3[:].data[~i]\n\nd = (LAT[:].max() - LAT[:].min()) / (LAT[:].shape[0] - 1)\nxi, yi = np.meshgrid(np.arange(LON[:].min(), LON[:].max() + d, d), np.arange(LAT[:].min(), LAT[:].max() + d, d))\n\ns3 = griddata((x, y), z, (xi, yi))\nm.imshow(s3)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n```\n\n\u3000\u7bc4\u56f2\u5916\u3082\u88dc\u9593\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30de\u30b9\u30af\u3092\u4f5c\u6210\u3057\u3066\u3001\u7bc4\u56f2\u5916\u3092\u9664\u5916\u3059\u308b\u3002\n\n```\n# Make mask\nx = LON[:].flatten()\ny = LAT[:].flatten()\nz = np.ones(S1[:].data.shape)\nz[0, :] = 0\nz[z.shape[0] - 1, :] = 0\nz[:, 0] = 0\nz[:, z.shape[1] - 1] = 0\nz = z.flatten()\n\nmask = griddata((x, y), z, (xi, yi), method = 'nearest')\nm.imshow(mask)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.show()\n\n# Radiance at Band 1\ns1 = s1 * mask\ni = np.where(s1 == 0)\ns1[i] = np.nan\nm.imshow(s1)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S1.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S1.units)\nplt.show()\n\n# Radiance at Band 2\ns2 = s2 * mask\ni = np.where(s2 == 0)\ns2[i] = np.nan\nm.imshow(s2)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S2.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S2.units)\nplt.show()\n\n# Radiance at Band 3\ns3 = s3 * mask\ni = np.where(s3 == 0)\ns3[i] = np.nan\nm.imshow(s3)\nm.drawcoastlines()\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title(S3.standard_name)\ncbar = plt.colorbar()\ncbar.set_label(S3.units)\nplt.show()\n```\n\n \u30d0\u30f3\u30c9\uff11\u3001\uff12\u3001\uff13\u306e\u653e\u5c04\u8f1d\u5ea6\u3092\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u3067\u6b63\u898f\u5316\u3059\u308b\uff08\u529b\u6280\u3001\u6b63\u653b\u6cd5\u306f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\uff09\u3002\n\n```\n# Normalize radiance by minimum and maximum\n# Band 1\ni = np.isnan(s1)\nn1 = (1 - 0) * (s1 - s1[~i].min()) / (s1[~i].max() - s1[~i].min())\n\n# Band 2\ni = np.isnan(s2)\nn2 = (1 - 0) * (s2 - s2[~i].min()) / (s2[~i].max() - s2[~i].min())\n\n# Band 3\ni = np.isnan(s3)\nn3 = (1 - 0) * (s3 - s3[~i].min()) / (s3[~i].max() - s3[~i].min())\n```\n\n numpy/dstack\u3092\u5229\u7528\u3057\u3066\u3001\u30d0\u30f3\u30c93\uff08\u8fd1\u8d64\u5916\uff09\u3092R\u3001\u30d0\u30f3\u30c92\uff08\u8d64\uff09\u3092G\u3001\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3092B\u3068\u3057\u3066RGB\u5408\u6210\u3002\n\n```\nrgb = np.dstack((n3, n2))\nrgb = np.dstack((rgb, n1))\nm.imshow(rgb)\nm.drawcoastlines(color = 'white')\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title('RGB = (Band3, Band2, Band1)')\n#plt.show()\nplt.savefig('rgb.png')\n```\n\n![rgb.png](https://qiita-image-store.s3.amazonaws.com/0/143040/a605ee14-e946-381a-953c-61b6d9896379.png)\n\n\u3000\u3064\u3044\u3067\u306b\u3001\u30d0\u30f3\u30c92\uff08\u8d64\uff09\u3092R\u3001\u30d0\u30f3\u30c93\uff08\u8fd1\u8d64\u5916\uff09\u3092G\u3001\u30d0\u30f3\u30c9\uff11\uff08\u7dd1\uff09\u3092B\u3068\u3057\u3066RGB\u5408\u6210\u3002\n\n```\nrgb = np.dstack((n2, n3))\nrgb = np.dstack((rgb, n1))\nm.imshow(rgb)\nm.drawcoastlines(color = 'white')\nm.drawparallels(np.arange(25, 50 + 5, 5),labels=[0,1,1,0])\nm.drawmeridians(np.arange(125, 150 + 5, 5),labels=[1,0,0,1])\nplt.title('RGB = (Band2, Band3, Band1)')\n#plt.show()\nplt.savefig('rgb.png')\n```\n\n![rgb.png](https://qiita-image-store.s3.amazonaws.com/0/143040/add5a6a6-ed12-0f70-870d-a3af8d7789fa.png)\n\n\u3000\u529b\u6280\u3067\u3084\u3063\u305f\u305b\u3044\u304b\u6697\u3044\u3002\u6d77\u5cb8\u7dda\u3092\u5f15\u3044\u3066\u3066\u826f\u304b\u3063\u305f\u304b\u3082\u3002\n", "tags": ["Python", "matplotlib", "NetCDF", "Sentinel-3A", "SLSTR"]}