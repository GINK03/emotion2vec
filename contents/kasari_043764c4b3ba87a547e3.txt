{"context": " More than 1 year has passed since last update.#include <stdio.h>\n#define CODESIZE 1024\n#define MEMSIZE 1024\n\ntypedef struct Code {\n  char code;\n  struct Code *addr;\n} Code;\n\nint debug = 0;\n\nCode codes[CODESIZE];\nchar memory[MEMSIZE];\n\nvoid step(Code *cp, char *mp) {\n  int i;\n  char ch;\n  printf(\"code: %c (%p)\\nmp: %d(%c) (%p)\\n\", cp->code, cp, *mp, *mp,  mp);\n  printf(\"memory: \");\n  for (i=0; i<8; i++) {\n    printf(\"%d(%c) \",memory[i], memory[i]);\n  }\n  scanf(\"%c\", &ch);\n  printf(\"\\n\\n\");\n}\n\nvoid getSource(char *fileName) {\n  char ch;\n  Code *cp = codes;\n  FILE *f = fopen(fileName, \"r\");\n  while ((ch=getc(f)) != EOF) {\n    switch (ch) {\n    case '>':\n    case '<':\n    case '+':\n    case '-':\n    case '.':\n    case ',':\n    case '[': \n    case ']':\n      (cp++)->code = ch;\n    }\n  }\n  fclose(f);\n}\n\nvoid analyze() {\n  int index = 0;\n  Code* stack[20];\n  Code *cp = codes;\n  while ((cp++)->code != 0) {\n    if (cp->code == '[') {\n      stack[index++] = cp;\n    } else if (cp->code == ']') {\n      index--;\n      stack[index]->addr = cp+1;\n      cp->addr = stack[index];\n    }\n  }\n\n  if (debug) {\n    for (cp=codes; cp->code!=0; cp++) {\n      printf(\"%p    code: %c    addr: %p\\n\", cp, cp->code, cp->addr);\n    }\n  }\n}\n\nvoid execute() {\n  Code *cp = codes;\n  char *mp = memory;\n\n  while (cp->code != 0) {\n    if (debug) step(cp, mp);\n\n    switch (cp->code) {\n    case '>': mp++; break;\n    case '<': mp--; break;\n    case '+': (*mp)++; break;\n    case '-': (*mp)--; break;\n    case '.': putchar(*mp); break;\n    case ',': *mp = getchar(); break;\n    case '[': if (*mp == 0) {cp = cp->addr; continue;} else break;\n    case ']': cp = cp->addr; continue;\n    }\n    cp++;\n  }\n}\n\nint main(int argc, char *argv[]) {\n  if (argc == 3) debug = 1;\n  getSource(argv[1]);\n  analyze();\n  execute();\n  return 0;\n}\n\n```c\n#include <stdio.h>\n#define CODESIZE 1024\n#define MEMSIZE 1024\n\ntypedef struct Code {\n  char code;\n  struct Code *addr;\n} Code;\n\nint debug = 0;\n\nCode codes[CODESIZE];\nchar memory[MEMSIZE];\n\nvoid step(Code *cp, char *mp) {\n  int i;\n  char ch;\n  printf(\"code: %c (%p)\\nmp: %d(%c) (%p)\\n\", cp->code, cp, *mp, *mp,  mp);\n  printf(\"memory: \");\n  for (i=0; i<8; i++) {\n    printf(\"%d(%c) \",memory[i], memory[i]);\n  }\n  scanf(\"%c\", &ch);\n  printf(\"\\n\\n\");\n}\n\nvoid getSource(char *fileName) {\n  char ch;\n  Code *cp = codes;\n  FILE *f = fopen(fileName, \"r\");\n  while ((ch=getc(f)) != EOF) {\n    switch (ch) {\n    case '>':\n    case '<':\n    case '+':\n    case '-':\n    case '.':\n    case ',':\n    case '[': \n    case ']':\n      (cp++)->code = ch;\n    }\n  }\n  fclose(f);\n}\n\nvoid analyze() {\n  int index = 0;\n  Code* stack[20];\n  Code *cp = codes;\n  while ((cp++)->code != 0) {\n    if (cp->code == '[') {\n      stack[index++] = cp;\n    } else if (cp->code == ']') {\n      index--;\n      stack[index]->addr = cp+1;\n      cp->addr = stack[index];\n    }\n  }\n\n  if (debug) {\n    for (cp=codes; cp->code!=0; cp++) {\n      printf(\"%p    code: %c    addr: %p\\n\", cp, cp->code, cp->addr);\n    }\n  }\n}\n\nvoid execute() {\n  Code *cp = codes;\n  char *mp = memory;\n  \n  while (cp->code != 0) {\n    if (debug) step(cp, mp);\n    \n    switch (cp->code) {\n    case '>': mp++; break;\n    case '<': mp--; break;\n    case '+': (*mp)++; break;\n    case '-': (*mp)--; break;\n    case '.': putchar(*mp); break;\n    case ',': *mp = getchar(); break;\n    case '[': if (*mp == 0) {cp = cp->addr; continue;} else break;\n    case ']': cp = cp->addr; continue;\n    }\n    cp++;\n  }\n}\n\nint main(int argc, char *argv[]) {\n  if (argc == 3) debug = 1;\n  getSource(argv[1]);\n  analyze();\n  execute();\n  return 0;\n}\n```\n", "tags": ["Brainf*ck", "C"]}