{"context": "Kotlin\u52c9\u5f37\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u3066\u307f\u3066\u3044\u307e\u3059\u3002\u9032\u3081\u308b\n\n\n\n\u5185\u5bb9\nSwift\nKotlin\n\n\n\n\n\u5b9a\u6570\nlet\nval\n\n\n\u5909\u6570\nvar\nvar\n\n\n\u6587\u5b57\u5217\u5185\u306e\u5909\u6570\n\"I have \\(number) apples\"\n\"I have ${number} apples\"\n\n\n\u914d\u5217\nvar arr = [\"A\", \"B\", \"C\"]\nvar arr = array(\"A\", \"B\", \"C\")\n\n\n\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\nvar dic = [\"key\":\"value\"]\nvar dic = hashMapOf(\"key\" to \"value\" )\n\n\nOptional Value\nvar optionString: String? = \"Hello\"  if let str= optionalString {}\nvar optionString: String? = \"Hello\"  if (optionalString != null) {}\n\n\n\u4e09\u9805\u6f14\u7b97\u5b50\nvar max = (a>b)?a:b\nvar max = if(a>b) a else b\n\n\nfor\nfor item in list {}\nfor (item in list) {}\n\n\n\u6761\u4ef6\u5206\u5c90\uff08\u8907\u6570\uff09\nswitch (obj) { case 1: println(\"one\")default:  break }\nwhen(obj) {  1 -> print(\"one\")  else -> ... }\n\n\n\u7bc4\u56f2(range)\nfor i in 0..3  {}\nfor (i in (0..3)) {}\n\n\n\u95a2\u6570\u5ba3\u8a00\nfunc\nfun\n\n\n\u95a2\u6570\u306e\u8fd4\u3059\u30c7\u30fc\u30bf\nfunc()-> DataType\nfunc(): DataType\n\n\n\u95a2\u6570\u5185\u306e\u95a2\u6570\nfunc A() {func B() {}  B() }\nfun A() {fun B() {}  B() }\n\n\n\u95a2\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nfunc A (list: [Int], condition: Int -> Bool) -> Bool {} func B(number: Int) -> Bool {} A(array, B)\nfun hasAny (list: Array, condition: (Int) -> Boolean) : Boolean {}  val B:(Int) -> Boolean{} A(array, B)\n\n\n\u533f\u540d\u306e\u95a2\u6570\nnumbers.map({(number: Int) -> Int in  let result = 3*numberreturn result})\nnumbers.map({ val result = 3*it  result })\n\n\n\u7c21\u5358\u306a\u30af\u30e9\u30b9\nclass A {  func simpleDescription() -> String {  return \"\" } }  var A = A()  A.simpleDescription()\nclass A {  fun simpleDescription() : string {  return \"\" } }  var A = A()  A.simpleDescription()\n\n\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\nclass A {  init(name: String ) {...} }\nclass A (var name: String) {...}\n\n\n\nKotlin\u52c9\u5f37\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u3066\u307f\u3066\u3044\u307e\u3059\u3002\u9032\u3081\u308b\n\n| \u5185\u5bb9 |Swift|Kotlin|\n|---|---|---|\n| \u5b9a\u6570 | let  | val  |\n| \u5909\u6570 | var  | var  |\n| \u6587\u5b57\u5217\u5185\u306e\u5909\u6570 | \"I have \\\\(number) apples\"  | \"I have ${number} apples\"  |\n| \u914d\u5217 | var arr = [\"A\", \"B\", \"C\"] | var arr = array(\"A\", \"B\", \"C\") |\n| \u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea | var dic = [\"key\":\"value\"] |   var dic = hashMapOf(\"key\" to \"value\" ) |\n| Optional Value | var optionString: String? = \"Hello\" <br> if let str= optionalString {} | var optionString: String? = \"Hello\" <br> if (optionalString != null) {}  |\n| \u4e09\u9805\u6f14\u7b97\u5b50 |var max = (a>b)?a:b  | var max = if(a>b) a else b |\n| for | for item in list {} | for (item in list) {}  |\n| \u6761\u4ef6\u5206\u5c90\uff08\u8907\u6570\uff09  |switch (obj) { <br>case 1: println(\"one\")<br>default: <br> break }|  when(obj) { <br> 1 -> print(\"one\") <br> else -> ... }  |\n| \u7bc4\u56f2(range) | for i in 0..3  {} | for (i in (0..3)) {} | \n| \u95a2\u6570\u5ba3\u8a00 | func  | fun  |\n| \u95a2\u6570\u306e\u8fd4\u3059\u30c7\u30fc\u30bf | func()-> DataType | func(): DataType |\n| \u95a2\u6570\u5185\u306e\u95a2\u6570 | func A() {<br>func B() {} <br> B() <br>}  | fun A() {<br>fun B() {} <br> B() <br>} |\n|\u95a2\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8| func A (list: [Int], condition: Int -> Bool) -> Bool {}<br> func B(number: Int) -> Bool {}<br> A(array, B) | fun hasAny (list: Array<Int>, condition: (Int) -> Boolean) : Boolean {} <br> val B:(Int) -> Boolean{}<br> A(array, B)|\n|\u533f\u540d\u306e\u95a2\u6570| numbers.map({<br>(number: Int) -> Int in <br> let result = 3*number<br>return result<br>})| numbers.map({<br> val result = 3*it <br> result <br>})|\n| \u7c21\u5358\u306a\u30af\u30e9\u30b9 | class A { <br> func simpleDescription() -> String { <br> return \"\" } <br>} <br> var A = A() <br> A.simpleDescription() | class A { <br> fun simpleDescription() : string { <br> return \"\" } <br>} <br> var A = A() <br> A.simpleDescription() |\n| \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6 | class A { <br> init(name: String ) {...} <br>} | class A (var name: String) {...} |\n", "tags": ["Swift", "Kotlin"]}