{"tags": ["C++", "C++11"], "context": " More than 1 year has passed since last update.\n\n\u304a\u984c\n\u79c1\u306f\u65e5\u5e38\u7684\u306a\u4f5c\u696d\u306b\u306f Scheme \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3060\u3051\u308c\u3069\u3001 C++ \u306f\u597d\u304d\u306a\u8a00\u8a9e\u306e\u3072\u3068\u3064\u3067 Qiita \u5185\u3067\u3082 C++ \u30bf\u30b0\u304c\u4ed8\u3044\u3066\u3044\u308b\u8a18\u4e8b\u306f\u7d50\u69cb\u898b\u3066\u3044\u308b\u3002 \u305d\u3093\u306a\u3068\u304d\u306b\u3001\u304a\u984c\u3068\u3057\u3066\u3061\u3087\u3046\u3069\u826f\u3044\u3068\u601d\u3046\u8a18\u4e8b\u304c\u3042\u3063\u305f\u3002\nC++ > \u8907\u6570\u56de\u6761\u4ef6\u6210\u7acb\u304b\u3069\u3046\u304b\u306e\u691c\u77e5 > \u5bfe\u8c61\u306f50\u9805\u76ee\n\n\u65b9\u91dd\nSTL \u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3092\u4f7f\u3046\u3064\u3082\u308a\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u79c1\u306f\u3042\u3048\u3066\u9006\u306b\u79c1\u304c\u77e5\u308b\u9650\u308a\u306e C++11 \u306e\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002 \u79c1\u304c C++ \u3092\u305d\u308c\u307b\u3069\u4f7f\u3044\u719f\u305b\u3066\u3044\u308b\u3068\u3082\u601d\u3063\u3066\u306f\u3044\u306a\u3044\u3051\u308c\u3069\u3001 C++11 \u306e\u6a5f\u80fd\u3092\u7a4d\u6975\u7684\u306b\u4f7f\u3046\u3053\u3068\u3067\u52b9\u679c\u7684\u306a\u62bd\u8c61\u5316\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u305f\u3044\u3002\n\u4e00\u65b9\u3067\u3001 C++ \u306e\u8a2d\u8a08\u8005\u3067\u3042\u308b Bjarne Stroustrup \u306f\u8457\u66f8\u300cC++ \u306e\u8a2d\u8a08\u3068\u9032\u5316\u300d\u306e\u4e2d\u3067 C++ \u306f\u6bb5\u968e\u7684\u306a\u5b66\u7fd2\u304c\u53ef\u80fd\u3060\u3068\u8ff0\u3079\u3066\u3044\u308b\u3053\u3068\u3082\u7d39\u4ecb\u3057\u3066\u304a\u304f\u3002 C++ \u306f\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u5b66\u7fd2\u306e\u305f\u3081\u3060\u3051\u306b\u6642\u9593\u3092\u3042\u3066\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4f7f\u3044\u306a\u304c\u3089\u5b66\u7fd2\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u8003\u616e\u3055\u308c\u3066\u3044\u308b\u3002 \u307b\u3069\u307b\u3069\u306b\u77e5\u3063\u3066\u3044\u308c\u3070\u307b\u3069\u307b\u3069\u306a\u308a\u306b\u5b9f\u7528\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3057\u3001\u5c11\u3057\u3070\u304b\u308a\u4fbf\u5229\u306a C (Better C) \u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u5426\u5b9a\u3057\u3066\u3044\u306a\u3044\u3002 C++ \u306e\u6a5f\u80fd\u306b\u306f\u7121\u304f\u3066\u3082\u3088\u3055\u305d\u3046\u306a\u3001\u3057\u304b\u3057\u3042\u308b\u3068\u9593\u9055\u3044\u306a\u304f\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u306f\u78ba\u304b\u306a\u306e\u3067\u3001\u305d\u3046\u3044\u3063\u305f\u6a5f\u80fd\u306e\u7a4d\u307f\u91cd\u306d\u3067\u3069\u308c\u304f\u3089\u3044\u5dee\u304c\u3042\u308b\u306e\u304b\u611f\u3058\u3066\u3082\u3089\u3048\u308c\u3070\u3068\u601d\u3046\u3002\n\n\u5b9f\u88c5\n\ncontinuous.h\n#ifndef CONTINUOUS_HEADER\n#define CONTINUOUS_HEADER\n\n#include <functional>\n#include <deque>\n#include <iostream>\n\ntemplate<class T>\nclass continuous {\nprivate:\n  const int count_limit;\n  int establish_count;\n  std::deque<T> data;\n  std::function<bool(T)> checker;\npublic:\n  using value_type = T;\n  using const_iterator = typename std::deque<T>::const_iterator;\n  continuous(int count_limit, std::function<bool(T)> predicate);\n  void push(T datum);\n  bool is_established(void) const;\n  void clear(void);\n  const_iterator begin(void) const;\n  const_iterator end(void) const;\n};\n\ntemplate<class T>\ncontinuous<T>::continuous(int count_limit, std::function<bool(T)> predicate)\n  : count_limit(count_limit),\n    checker(predicate),\n    establish_count(0) {\n}\n\ntemplate<class T>\nvoid continuous<T>::push(const T datum) {\n  data.push_back(datum);\n  if(data.size() > count_limit) data.pop_front();\n  if(checker(datum)) {\n    establish_count++;\n  } else {\n    establish_count = 0;\n  }\n}\n\ntemplate<class T>\nvoid continuous<T>::clear(void) {\n  establish_count = 0;\n  data.clear();\n}\n\ntemplate<class T>\nbool continuous<T>::is_established(void) const {\n  return establish_count >= count_limit;\n}\n\ntemplate<class T>\ntypename continuous<T>::const_iterator continuous<T>::begin(void) const {\n  return data.cbegin();\n}\n\ntemplate<class T>\ntypename continuous<T>::const_iterator continuous<T>::end(void) const {\n  return data.cend();\n}\n\ntemplate<class T>\nstd::ostream& operator<<(std::ostream& os, const continuous<T>& c) {\n  os << \"{\";\n  if(c.begin() != c.end()) {\n    os << *c.begin();\n    for(auto iter = c.begin()+1, e = c.end(); iter != e; ++iter) {\n      os << \", \" << *iter;\n    }\n  }\n  os << \"}\";\n  return os;\n}\n\n#endif\n\n\n\n\u5143\u8a18\u4e8b\u306e\u65b9\u91dd\u3068\u306e\u5177\u4f53\u7684\u306a\u5dee\n\n\u547d\u540d\u898f\u5247\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u96f0\u56f2\u6c17\u306b\u5408\u308f\u305b\u305f\n\u6210\u7acb\u6761\u4ef6\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u3001\u4ee5\u5f8c\u306f\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u578b\u3054\u3068\u3067\u306f\u306a\u304f\u3072\u3068\u3064\u306e\u5b9a\u7fa9\u3067\u6e08\u307e\u305b\u3066\u3044\u308b\n\u6210\u7acb\u6761\u4ef6\u306e\u6307\u5b9a\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u307e\u305f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf) \u3067\u884c\u306a\u3044\u3001\u3053\u306e\u5834\u5408\u306b\u5c02\u7528\u306e\u6307\u5b9a\u5b50\u3092\u5c0e\u5165\u3057\u306a\u304b\u3063\u305f\n\n\n\u5229\u7528\u4f8b\u517c\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\ntest.cpp\n#include \"continuous.h\"\n#include <iostream>\n#include <cassert>\n\nvoid test_inrange(void) {\n  continuous<double>\n    continuous_inrange(3, [](double x){return x>2.7182 && x<3.1415;});\n\n  for(auto x: {4.0, 3.0, 4.0, 3.0}) continuous_inrange.push(x);\n  assert(continuous_inrange.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_inrange << std::endl;\n\n  for(auto x: {3.0, 3.0, 3.0}) continuous_inrange.push(x);\n  assert(continuous_inrange.is_established() == true);\n  std::cout << \"establish data = \" << continuous_inrange << std::endl;\n}\n\nvoid test_outrange(void) {\n  continuous<double>\n    continuous_outrange(3, [](double x){return !(x>2.7182 && x<3.1415);});\n\n  for(auto x: {2.0, 4.0, 2.0, 3.0}) continuous_outrange.push(x);\n  assert(continuous_outrange.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_outrange << std::endl;\n\n  for(auto x: {2.0, 4.0, 2.0}) continuous_outrange.push(x);\n  assert(continuous_outrange.is_established() == true);\n  std::cout << \"establish data = \" << continuous_outrange << std::endl;\n}\n\nvoid test_even(void) {\n  continuous<int>\n    continuous_even(3, [](int x){return !(x%2);});\n\n  for(auto x: {2, 3, 2, 2}) continuous_even.push(x);\n  assert(continuous_even.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_even << std::endl;\n\n  for(auto x: {2, 3, 5, 4, 2, 8}) continuous_even.push(x);\n  assert(continuous_even.is_established() == true);\n  std::cout << \"establish data = \" << continuous_even << std::endl;\n}\n\nint main(void) {\n  test_inrange();\n  test_outrange();\n  test_even();\n  std::cout << \"Pass all\" << std::endl;\n  return 0;\n}\n\n\n# \u304a\u984c\n\n\u79c1\u306f\u65e5\u5e38\u7684\u306a\u4f5c\u696d\u306b\u306f Scheme \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3060\u3051\u308c\u3069\u3001 C++ \u306f\u597d\u304d\u306a\u8a00\u8a9e\u306e\u3072\u3068\u3064\u3067 Qiita \u5185\u3067\u3082 C++ \u30bf\u30b0\u304c\u4ed8\u3044\u3066\u3044\u308b\u8a18\u4e8b\u306f\u7d50\u69cb\u898b\u3066\u3044\u308b\u3002 \u305d\u3093\u306a\u3068\u304d\u306b\u3001\u304a\u984c\u3068\u3057\u3066\u3061\u3087\u3046\u3069\u826f\u3044\u3068\u601d\u3046\u8a18\u4e8b\u304c\u3042\u3063\u305f\u3002\n\n[C++ > \u8907\u6570\u56de\u6761\u4ef6\u6210\u7acb\u304b\u3069\u3046\u304b\u306e\u691c\u77e5 > \u5bfe\u8c61\u306f50\u9805\u76ee](http://qiita.com/7of9/items/9c9964a7a7fc24d7d384)\n\n# \u65b9\u91dd\n\nSTL \u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3092\u4f7f\u3046\u3064\u3082\u308a\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u79c1\u306f\u3042\u3048\u3066\u9006\u306b\u79c1\u304c\u77e5\u308b\u9650\u308a\u306e C++11 \u306e\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002 \u79c1\u304c C++ \u3092\u305d\u308c\u307b\u3069\u4f7f\u3044\u719f\u305b\u3066\u3044\u308b\u3068\u3082\u601d\u3063\u3066\u306f\u3044\u306a\u3044\u3051\u308c\u3069\u3001 C++11 \u306e\u6a5f\u80fd\u3092\u7a4d\u6975\u7684\u306b\u4f7f\u3046\u3053\u3068\u3067\u52b9\u679c\u7684\u306a\u62bd\u8c61\u5316\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u305f\u3044\u3002\n\n\u4e00\u65b9\u3067\u3001 C++ \u306e\u8a2d\u8a08\u8005\u3067\u3042\u308b Bjarne Stroustrup \u306f\u8457\u66f8\u300cC++ \u306e\u8a2d\u8a08\u3068\u9032\u5316\u300d\u306e\u4e2d\u3067 C++ \u306f\u6bb5\u968e\u7684\u306a\u5b66\u7fd2\u304c\u53ef\u80fd\u3060\u3068\u8ff0\u3079\u3066\u3044\u308b\u3053\u3068\u3082\u7d39\u4ecb\u3057\u3066\u304a\u304f\u3002 C++ \u306f\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u5b66\u7fd2\u306e\u305f\u3081\u3060\u3051\u306b\u6642\u9593\u3092\u3042\u3066\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4f7f\u3044\u306a\u304c\u3089\u5b66\u7fd2\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u8003\u616e\u3055\u308c\u3066\u3044\u308b\u3002 \u307b\u3069\u307b\u3069\u306b\u77e5\u3063\u3066\u3044\u308c\u3070\u307b\u3069\u307b\u3069\u306a\u308a\u306b\u5b9f\u7528\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3057\u3001\u5c11\u3057\u3070\u304b\u308a\u4fbf\u5229\u306a C (Better C) \u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u5426\u5b9a\u3057\u3066\u3044\u306a\u3044\u3002 C++ \u306e\u6a5f\u80fd\u306b\u306f\u7121\u304f\u3066\u3082\u3088\u3055\u305d\u3046\u306a\u3001\u3057\u304b\u3057\u3042\u308b\u3068\u9593\u9055\u3044\u306a\u304f\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u306f\u78ba\u304b\u306a\u306e\u3067\u3001\u305d\u3046\u3044\u3063\u305f\u6a5f\u80fd\u306e\u7a4d\u307f\u91cd\u306d\u3067\u3069\u308c\u304f\u3089\u3044\u5dee\u304c\u3042\u308b\u306e\u304b\u611f\u3058\u3066\u3082\u3089\u3048\u308c\u3070\u3068\u601d\u3046\u3002\n\n# \u5b9f\u88c5\n\n```cpp:continuous.h\n#ifndef CONTINUOUS_HEADER\n#define CONTINUOUS_HEADER\n\n#include <functional>\n#include <deque>\n#include <iostream>\n\ntemplate<class T>\nclass continuous {\nprivate:\n  const int count_limit;\n  int establish_count;\n  std::deque<T> data;\n  std::function<bool(T)> checker;\npublic:\n  using value_type = T;\n  using const_iterator = typename std::deque<T>::const_iterator;\n  continuous(int count_limit, std::function<bool(T)> predicate);\n  void push(T datum);\n  bool is_established(void) const;\n  void clear(void);\n  const_iterator begin(void) const;\n  const_iterator end(void) const;\n};\n\ntemplate<class T>\ncontinuous<T>::continuous(int count_limit, std::function<bool(T)> predicate)\n  : count_limit(count_limit),\n    checker(predicate),\n    establish_count(0) {\n}\n\ntemplate<class T>\nvoid continuous<T>::push(const T datum) {\n  data.push_back(datum);\n  if(data.size() > count_limit) data.pop_front();\n  if(checker(datum)) {\n    establish_count++;\n  } else {\n    establish_count = 0;\n  }\n}\n\ntemplate<class T>\nvoid continuous<T>::clear(void) {\n  establish_count = 0;\n  data.clear();\n}\n\ntemplate<class T>\nbool continuous<T>::is_established(void) const {\n  return establish_count >= count_limit;\n}\n\ntemplate<class T>\ntypename continuous<T>::const_iterator continuous<T>::begin(void) const {\n  return data.cbegin();\n}\n\ntemplate<class T>\ntypename continuous<T>::const_iterator continuous<T>::end(void) const {\n  return data.cend();\n}\n\ntemplate<class T>\nstd::ostream& operator<<(std::ostream& os, const continuous<T>& c) {\n  os << \"{\";\n  if(c.begin() != c.end()) {\n    os << *c.begin();\n    for(auto iter = c.begin()+1, e = c.end(); iter != e; ++iter) {\n      os << \", \" << *iter;\n    }\n  }\n  os << \"}\";\n  return os;\n}\n\n#endif\n```\n\n# \u5143\u8a18\u4e8b\u306e\u65b9\u91dd\u3068\u306e\u5177\u4f53\u7684\u306a\u5dee\n\n- \u547d\u540d\u898f\u5247\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u96f0\u56f2\u6c17\u306b\u5408\u308f\u305b\u305f\n- \u6210\u7acb\u6761\u4ef6\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6307\u5b9a\u3057\u3001\u4ee5\u5f8c\u306f\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\n- \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u578b\u3054\u3068\u3067\u306f\u306a\u304f\u3072\u3068\u3064\u306e\u5b9a\u7fa9\u3067\u6e08\u307e\u305b\u3066\u3044\u308b\n- \u6210\u7acb\u6761\u4ef6\u306e\u6307\u5b9a\u306f\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u307e\u305f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf) \u3067\u884c\u306a\u3044\u3001\u3053\u306e\u5834\u5408\u306b\u5c02\u7528\u306e\u6307\u5b9a\u5b50\u3092\u5c0e\u5165\u3057\u306a\u304b\u3063\u305f\n\n# \u5229\u7528\u4f8b\u517c\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\n```cpp:test.cpp\n#include \"continuous.h\"\n#include <iostream>\n#include <cassert>\n\nvoid test_inrange(void) {\n  continuous<double>\n    continuous_inrange(3, [](double x){return x>2.7182 && x<3.1415;});\n\n  for(auto x: {4.0, 3.0, 4.0, 3.0}) continuous_inrange.push(x);\n  assert(continuous_inrange.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_inrange << std::endl;\n  \n  for(auto x: {3.0, 3.0, 3.0}) continuous_inrange.push(x);\n  assert(continuous_inrange.is_established() == true);\n  std::cout << \"establish data = \" << continuous_inrange << std::endl;\n}\n\nvoid test_outrange(void) {\n  continuous<double>\n    continuous_outrange(3, [](double x){return !(x>2.7182 && x<3.1415);});\n\n  for(auto x: {2.0, 4.0, 2.0, 3.0}) continuous_outrange.push(x);\n  assert(continuous_outrange.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_outrange << std::endl;\n  \n  for(auto x: {2.0, 4.0, 2.0}) continuous_outrange.push(x);\n  assert(continuous_outrange.is_established() == true);\n  std::cout << \"establish data = \" << continuous_outrange << std::endl;\n}\n\nvoid test_even(void) {\n  continuous<int>\n    continuous_even(3, [](int x){return !(x%2);});\n\n  for(auto x: {2, 3, 2, 2}) continuous_even.push(x);\n  assert(continuous_even.is_established() == false);\n  std::cout << \"non-establish data = \" << continuous_even << std::endl;\n  \n  for(auto x: {2, 3, 5, 4, 2, 8}) continuous_even.push(x);\n  assert(continuous_even.is_established() == true);\n  std::cout << \"establish data = \" << continuous_even << std::endl;\n}\n\nint main(void) {\n  test_inrange();\n  test_outrange();\n  test_even();\n  std::cout << \"Pass all\" << std::endl;\n  return 0;\n}\n"}