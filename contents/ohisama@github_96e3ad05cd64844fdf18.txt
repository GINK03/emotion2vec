{"context": "\n\n\u6982\u8981\narduino mega\u3067PID\u4f7f\u3063\u3066\u6e29\u5ea6\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u307f\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u306f\u30b5\u30fc\u30df\u30b9\u30bf\u3001\u71b1\u6e90\u306f\u30c9\u30e9\u30a4\u30e4\u30fc\u3001\u5bfe\u8c61\u306f\u30b9\u30ed\u30c3\u30c8\u30eb\u30dc\u30c7\u30a3\u3002\nc#\u3067sango\u306bmqtt pub\u3057\u3066jsdo\u3067websocket\u3067sub\u3057\u3066\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3057\u305f\u3002\n\n\u5199\u771f\n\n\n\u30b0\u30e9\u30d5\n\n\n\u56de\u8def\u56f3\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n#include <PID_v1.h>\n\nunsigned long time;\nint sampleTime = 1000;\ndouble Setpoint = 0;\ndouble Input = 0;\ndouble Output = 0;\nPID body(&Input, &Output, &Setpoint, 20.0, 5.0, 3.0, DIRECT);\nfloat r1 = 15000.0;\nint i = 0;\n\nfloat temp1(float rr0)\n{\n    float t;\n    t = log(rr0);\n    t = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * t * t)) * t);\n    return t - 273.15;\n}\nvoid setup()\n{\n    Serial.begin(115200);\n    pinMode(10, OUTPUT);\n    digitalWrite(10, HIGH);\n    Setpoint = 25.0;\n    body.SetOutputLimits(-255.0, 255.0);\n    body.SetSampleTime(sampleTime);\n    body.SetMode(AUTOMATIC);\n}\nvoid loop()\n{\n    int d;\n    float r;\n    if (millis() - time >= sampleTime)\n    {\n        time = millis();\n        d += analogRead(A0);\n        r = r1 * d / (1024.0 - d);\n        Input = temp1(r);\n        i++;\n        if (i > 19)\n        {\n            i = 0;\n            Serial.println(Input);\n        }\n        if (body.Compute())\n        {\n            //Serial.println(Output);\n        }\n        else\n        {\n            Serial.println(\"ng!!\");\n        }\n        if (Output > 0)\n        {\n            digitalWrite(10, LOW);\n        }\n        else\n        {\n            digitalWrite(10, HIGH);\n        }\n    }\n}\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO.Ports;\nusing System.Threading;\nusing uPLibrary.Networking.M2Mqtt;\n\nnamespace ConsoleApplication6\n{\n    class Program\n    {\n        private static MqttClient client;\n        static void Main(string[] args)\n        {            \n            client = new MqttClient(\"lite.mqtt.shiguredo.jp\", 1883, false, null);\n            var ret = client.Connect(\"paho\", \"ohisama@github\", \"\");\n            Console.WriteLine(\"Connected with result code {0}\", ret);\n            SerialPort port = new SerialPort(\"COM3\", 115200, Parity.None, 8, StopBits.One);\n            port.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);\n            try\n            {\n                port.Open();\n                port.DtrEnable = true;\n                port.RtsEnable = true;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Unexpected exception : {0}\", e.ToString());\n            }\n            Console.WriteLine(\"port open>\");\n            string comand = null;\n            comand = Console.ReadLine();\n        }\n        private static void port_DataReceived(object sender, SerialDataReceivedEventArgs e)\n        {\n            SerialPort port = (SerialPort)sender;\n            string data = port.ReadExisting();\n            Console.Write(data);\n            pub(data);\n        }\n        private static void pub(string value)\n        {\n            Console.WriteLine(\"pub\");\n            //Console.WriteLine(value);\n            Byte[] dat = System.Text.Encoding.GetEncoding(\"SHIFT-JIS\").GetBytes(value);\n            client.Publish(\"ohisama@github/test0\", dat, 0, false);\n        }\n    }\n}\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nvar myChart;\nwindow.onload = function() {\n    var ctx = document.getElementById(\"chart\").getContext(\"2d\");\n    var data = {\n        labels : [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        datasets : [{\n            label : \"temp\",\n            fillColor : \"rgba(151, 187, 205, 0.2)\",\n            strokeColor : \"rgba(151, 187, 205, 1)\",\n            pointColor : \"rgba(151, 187, 205, 1)\",\n            pointStrokeColor : \"#fff\",\n            pointHighlightFill : \"#fff\",\n            pointHighlightStroke : \"rgba(151, 187, 205, 1)\",\n            data : [20, 20, 20, 20, 20, 20, 20, 20, 20]\n        }]\n    };\n    myChart = new Chart(ctx).Line(data, {\n        scaleOverride : true,\n        scaleSteps : 10,\n        scaleStepWidth : 3.0,\n        scaleStartValue : 10,\n        scaleShowGridLines : false\n    });\n}\nvar client;\nfunction setup() {\n    var userName = 'ohisama@github';\n    var password = '';\n    var websocketUrl = 'ws://lite.mqtt.shiguredo.jp:8080/mqtt';\n    client = new Paho.MQTT.Client(websocketUrl, 'papo');\n    client.connect({\n         userName : userName,\n         password : password,\n         onSuccess : onConnect,\n         onFailure : failConnect\n    });\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n}\nfunction failConnect(e) {\n    alert('failed!');\n}\nfunction onConnect() {\n    alert(\"connect\");\n    client.subscribe('ohisama@github/test0');\n}\nfunction onMessageArrived(message) {\n    var val = message.payloadString;\n    var s = parseFloat(val);\n    myChart.addData([s], \"\");\n    myChart.removeData();\n}\nfunction onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) \n    {\n        alert(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n}\nsetup();\n\n#\u6982\u8981\narduino mega\u3067PID\u4f7f\u3063\u3066\u6e29\u5ea6\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u307f\u305f\u3002\n\u30bb\u30f3\u30b5\u30fc\u306f\u30b5\u30fc\u30df\u30b9\u30bf\u3001\u71b1\u6e90\u306f\u30c9\u30e9\u30a4\u30e4\u30fc\u3001\u5bfe\u8c61\u306f\u30b9\u30ed\u30c3\u30c8\u30eb\u30dc\u30c7\u30a3\u3002\nc#\u3067sango\u306bmqtt pub\u3057\u3066jsdo\u3067websocket\u3067sub\u3057\u3066\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3057\u305f\u3002\n#\u5199\u771f\n![MVC-018S.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/446177f0-edb0-0d8d-353c-55d07de6aed8.jpeg)\n\n#\u30b0\u30e9\u30d5\n![paho6.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/c9d3fdac-4404-ba75-99c2-bc427beab317.jpeg)\n\n#\u56de\u8def\u56f3\n![ondo.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/01658a55-565d-d6ac-2c28-04b3f2320552.jpeg)\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\n#include <PID_v1.h>\n\nunsigned long time;\nint sampleTime = 1000;\ndouble Setpoint = 0;\ndouble Input = 0;\ndouble Output = 0;\nPID body(&Input, &Output, &Setpoint, 20.0, 5.0, 3.0, DIRECT);\nfloat r1 = 15000.0;\nint i = 0;\n\nfloat temp1(float rr0)\n{\n\tfloat t;\n\tt = log(rr0);\n\tt = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * t * t)) * t);\n\treturn t - 273.15;\n}\nvoid setup()\n{\n\tSerial.begin(115200);\n\tpinMode(10, OUTPUT);\n\tdigitalWrite(10, HIGH);\n\tSetpoint = 25.0;\n\tbody.SetOutputLimits(-255.0, 255.0);\n\tbody.SetSampleTime(sampleTime);\n\tbody.SetMode(AUTOMATIC);\n}\nvoid loop()\n{\n\tint d;\n\tfloat r;\n\tif (millis() - time >= sampleTime)\n\t{\n\t\ttime = millis();\n\t\td += analogRead(A0);\n\t\tr = r1 * d / (1024.0 - d);\n\t\tInput = temp1(r);\n\t\ti++;\n\t\tif (i > 19)\n\t\t{\n\t\t\ti = 0;\n\t\t\tSerial.println(Input);\n\t\t}\n\t\tif (body.Compute())\n\t\t{\n\t\t\t//Serial.println(Output);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSerial.println(\"ng!!\");\n\t\t}\n\t\tif (Output > 0)\n\t\t{\n\t\t\tdigitalWrite(10, LOW);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdigitalWrite(10, HIGH);\n\t\t}\n\t}\n}\n```\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO.Ports;\nusing System.Threading;\nusing uPLibrary.Networking.M2Mqtt;\n\nnamespace ConsoleApplication6\n{\n    class Program\n    {\n        private static MqttClient client;\n        static void Main(string[] args)\n        {            \n            client = new MqttClient(\"lite.mqtt.shiguredo.jp\", 1883, false, null);\n            var ret = client.Connect(\"paho\", \"ohisama@github\", \"\");\n            Console.WriteLine(\"Connected with result code {0}\", ret);\n            SerialPort port = new SerialPort(\"COM3\", 115200, Parity.None, 8, StopBits.One);\n            port.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);\n            try\n            {\n                port.Open();\n                port.DtrEnable = true;\n                port.RtsEnable = true;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Unexpected exception : {0}\", e.ToString());\n            }\n            Console.WriteLine(\"port open>\");\n            string comand = null;\n            comand = Console.ReadLine();\n        }\n        private static void port_DataReceived(object sender, SerialDataReceivedEventArgs e)\n        {\n            SerialPort port = (SerialPort)sender;\n            string data = port.ReadExisting();\n            Console.Write(data);\n            pub(data);\n        }\n        private static void pub(string value)\n        {\n            Console.WriteLine(\"pub\");\n            //Console.WriteLine(value);\n            Byte[] dat = System.Text.Encoding.GetEncoding(\"SHIFT-JIS\").GetBytes(value);\n            client.Publish(\"ohisama@github/test0\", dat, 0, false);\n        }\n    }\n}\n```\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\nvar myChart;\nwindow.onload = function() {\n    var ctx = document.getElementById(\"chart\").getContext(\"2d\");\n    var data = {\n        labels : [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        datasets : [{\n            label : \"temp\",\n            fillColor : \"rgba(151, 187, 205, 0.2)\",\n            strokeColor : \"rgba(151, 187, 205, 1)\",\n            pointColor : \"rgba(151, 187, 205, 1)\",\n            pointStrokeColor : \"#fff\",\n            pointHighlightFill : \"#fff\",\n            pointHighlightStroke : \"rgba(151, 187, 205, 1)\",\n            data : [20, 20, 20, 20, 20, 20, 20, 20, 20]\n        }]\n    };\n    myChart = new Chart(ctx).Line(data, {\n        scaleOverride : true,\n        scaleSteps : 10,\n        scaleStepWidth : 3.0,\n        scaleStartValue : 10,\n        scaleShowGridLines : false\n    });\n}\nvar client;\nfunction setup() {\n    var userName = 'ohisama@github';\n    var password = '';\n    var websocketUrl = 'ws://lite.mqtt.shiguredo.jp:8080/mqtt';\n    client = new Paho.MQTT.Client(websocketUrl, 'papo');\n    client.connect({\n         userName : userName,\n         password : password,\n         onSuccess : onConnect,\n         onFailure : failConnect\n    });\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n}\nfunction failConnect(e) {\n    alert('failed!');\n}\nfunction onConnect() {\n    alert(\"connect\");\n    client.subscribe('ohisama@github/test0');\n}\nfunction onMessageArrived(message) {\n    var val = message.payloadString;\n    var s = parseFloat(val);\n    myChart.addData([s], \"\");\n    myChart.removeData();\n}\nfunction onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) \n    {\n        alert(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n}\nsetup();\n```\n", "tags": ["Arduino", "PID", "mqtt", "\u30b5\u30fc\u30df\u30b9\u30bf"]}