{"context": " More than 1 year has passed since last update.\u6700\u521d\u306fMaybe\u30e2\u30ca\u30c9\u3060\u3051\u4f5c\u308d\u3046\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3001fmap\u3082\u6b32\u3057\u3044\u3057\u3001\u305d\u3046\u3059\u308b\u3068Functor\u304b\u306a\u30fc\u3001fmap\u304c\u3042\u308b\u306a\u3089 <$> <*> \u3082\u3042\u3063\u305f\u65b9\u304c\u3044\u3044\u304b\u306a\u30fc\u3001\u305d\u308c\u3060\u3068Functor => Applicative => Monad => Maybe \u306b\u3057\u305f\u65b9\u304c\u3044\u3044\u306a\u30fc\u3001\u3068\u304b\u8003\u3048\u3066\u3053\u3046\u306a\u3063\u305f\u3002\nclass Curry\n{\n    protected $value;\n\n    public function __construct(callable $f)\n    {\n        $this->value = self::curry($f);\n    }\n\n    public static function curry(callable $f)\n    {\n        $ref = new \\ReflectionFunction($f);\n        $count = $ref->getNumberOfParameters();\n\n        if ($count === 0)\n            throw new \\InvalidArgumentException('Cannot curry none arguments function');\n\n        $args = array_fill(0, $count, null);\n        $prev = function($a) use ($f, &$args, $count){\n            $args[$count - 1] = $a;\n            return call_user_func_array($f, $args);\n        };\n        for ($i = $count - 2; $i >= 0; $i--){\n            $prev = new static(function($a) use ($prev, &$args, $i){\n                $args[$i] = $a;\n                return $prev;\n            });\n        }\n        return $prev;\n    }\n\n    public function __invoke($a)\n    {\n        if ($this->value instanceof Curry){\n            $count = 1;\n        }else if (is_callable($this->value)){\n            $ref = new \\ReflectionFunction($this->value);\n            $count = $ref->getNumberOfParameters();\n        }\n\n        $args = func_get_args();\n        $params = [];\n        for ($i = 0; $i < $count; $i ++){\n            $params[] = array_shift($args);\n        }\n        $ret = call_user_func_array($this->value, $params);\n\n        if ($args){\n            return call_user_func_array($ret, $args);\n        }else{\n            if (is_callable($ret) && !($ret instanceof Curry))\n                return new static($ret);\n            else\n                return $ret;\n        }\n    }\n\n    /*\n     * alias of __invoke\n     */\n    public function apply()\n    {\n        return call_user_func_array($this, func_get_args());\n    }\n\n    public function compose(callable $f)\n    {\n        return new static(function ($a) use ($f){\n            return $f(call_user_func_array($this, func_get_args()));\n        });\n    }\n}\n\n\u4e00\u5fdc\u691c\u7d22\u3057\u3066\nhttp://qiita.com/kumazo@github/items/3c337c6d51f023ae59ac\nhttp://qiita.com/yuya_takeyama/items/e14758907ca905386114\n\u3053\u306e\u8fba\u306e\u30ab\u30ea\u30fc\u5316\u306e\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3093\u3060\u3051\u3069\u3082\u3001\u3069\u3046\u3082\u95a2\u6570\u5b9f\u884c\u6642\u306b\u3046\u307e\u3044\u3053\u3068\u5e33\u5c3b\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u611f\u304c\u3042\u308b\u3002\u3053\u308c\u3060\u3068\u305b\u3063\u304b\u304f\u30ab\u30ea\u30fc\u5316\u3057\u3066\u3082\u5408\u6210\u3059\u308b\u3068\u304d\u306b\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u306a\uff1f\u3068\u601d\u3063\u3066\u5f15\u6570\u3072\u3068\u3064\u306e\u95a2\u6570\u306b\u611a\u76f4\u306b\u5206\u89e3\u3057\u305f\u3002\n\u305d\u3057\u3066\u30e2\u30ca\u30c9\u3002\nOOP\u3068\u3057\u3066Maybe\u306e\u5b9f\u88c5\u306f\u8272\u3005\u3042\u308b\u3051\u308c\u3069\u3001\u305f\u3076\u3093\u91cd\u8981\u306a\u306e\u306f\u5f15\u6570\u306e\u9806\u756a\u3068\u90e8\u5206\u9069\u7528\u3002\n$result1 = $maybeValue1->maybe($default, $callback);\n$result2 = $maybeValue2->maybe($default, $callback);\n$result3 = $maybeValue3->maybe($default, $customCallback);\n\n\u3053\u308c\u3067\u3082\u3044\u3044\u3093\u3060\u3051\u3069\n$withDefault = maybe($default);\n$withCallback = $withDefault($callback);\n\n$result1 = $withCallback($maybeValue1);\n$result2 = $withCallback($maybeValue2);\n$result3 = $withDefault($customCallback, $maybeValue3);\n\n\u304c\u672c\u6765\u306e\u4f7f\u3044\u65b9\u3058\u3083\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n\u305d\u3093\u306a\u308f\u3051\u3067\u90e8\u5206\u9069\u7528 \u3084 fmap \u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30ca\u30c9\u3092\u66f8\u3044\u305f\u3002\nhttps://github.com/nishimura/laiz-monad\n\u90e8\u5206\u9069\u7528\u3059\u308b\u5834\u5408\u3001\u578b\u63a8\u8ad6\u304c\u306a\u3044\u306e\u3067\u578b\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304f\u306e\u306f\u5fc5\u9808\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u6700\u521d\u306fMaybe\u30e2\u30ca\u30c9\u3060\u3051\u4f5c\u308d\u3046\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3001fmap\u3082\u6b32\u3057\u3044\u3057\u3001\u305d\u3046\u3059\u308b\u3068Functor\u304b\u306a\u30fc\u3001fmap\u304c\u3042\u308b\u306a\u3089 <$> <*> \u3082\u3042\u3063\u305f\u65b9\u304c\u3044\u3044\u304b\u306a\u30fc\u3001\u305d\u308c\u3060\u3068Functor => Applicative => Monad => Maybe \u306b\u3057\u305f\u65b9\u304c\u3044\u3044\u306a\u30fc\u3001\u3068\u304b\u8003\u3048\u3066\u3053\u3046\u306a\u3063\u305f\u3002\n\n\n\n```php\nclass Curry\n{\n    protected $value;\n\n    public function __construct(callable $f)\n    {\n        $this->value = self::curry($f);\n    }\n\n    public static function curry(callable $f)\n    {\n        $ref = new \\ReflectionFunction($f);\n        $count = $ref->getNumberOfParameters();\n\n        if ($count === 0)\n            throw new \\InvalidArgumentException('Cannot curry none arguments function');\n\n        $args = array_fill(0, $count, null);\n        $prev = function($a) use ($f, &$args, $count){\n            $args[$count - 1] = $a;\n            return call_user_func_array($f, $args);\n        };\n        for ($i = $count - 2; $i >= 0; $i--){\n            $prev = new static(function($a) use ($prev, &$args, $i){\n                $args[$i] = $a;\n                return $prev;\n            });\n        }\n        return $prev;\n    }\n\n    public function __invoke($a)\n    {\n        if ($this->value instanceof Curry){\n            $count = 1;\n        }else if (is_callable($this->value)){\n            $ref = new \\ReflectionFunction($this->value);\n            $count = $ref->getNumberOfParameters();\n        }\n\n        $args = func_get_args();\n        $params = [];\n        for ($i = 0; $i < $count; $i ++){\n            $params[] = array_shift($args);\n        }\n        $ret = call_user_func_array($this->value, $params);\n\n        if ($args){\n            return call_user_func_array($ret, $args);\n        }else{\n            if (is_callable($ret) && !($ret instanceof Curry))\n                return new static($ret);\n            else\n                return $ret;\n        }\n    }\n\n    /*\n     * alias of __invoke\n     */\n    public function apply()\n    {\n        return call_user_func_array($this, func_get_args());\n    }\n\n    public function compose(callable $f)\n    {\n        return new static(function ($a) use ($f){\n            return $f(call_user_func_array($this, func_get_args()));\n        });\n    }\n}\n```\n\n\n\u4e00\u5fdc\u691c\u7d22\u3057\u3066\nhttp://qiita.com/kumazo@github/items/3c337c6d51f023ae59ac\nhttp://qiita.com/yuya_takeyama/items/e14758907ca905386114\n\u3053\u306e\u8fba\u306e\u30ab\u30ea\u30fc\u5316\u306e\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3093\u3060\u3051\u3069\u3082\u3001\u3069\u3046\u3082\u95a2\u6570\u5b9f\u884c\u6642\u306b\u3046\u307e\u3044\u3053\u3068\u5e33\u5c3b\u3092\u5408\u308f\u305b\u3066\u3044\u308b\u611f\u304c\u3042\u308b\u3002\u3053\u308c\u3060\u3068\u305b\u3063\u304b\u304f\u30ab\u30ea\u30fc\u5316\u3057\u3066\u3082\u5408\u6210\u3059\u308b\u3068\u304d\u306b\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u306a\uff1f\u3068\u601d\u3063\u3066\u5f15\u6570\u3072\u3068\u3064\u306e\u95a2\u6570\u306b\u611a\u76f4\u306b\u5206\u89e3\u3057\u305f\u3002\n\n\n\u305d\u3057\u3066\u30e2\u30ca\u30c9\u3002\nOOP\u3068\u3057\u3066Maybe\u306e\u5b9f\u88c5\u306f\u8272\u3005\u3042\u308b\u3051\u308c\u3069\u3001\u305f\u3076\u3093\u91cd\u8981\u306a\u306e\u306f\u5f15\u6570\u306e\u9806\u756a\u3068\u90e8\u5206\u9069\u7528\u3002\n\n```php\n$result1 = $maybeValue1->maybe($default, $callback);\n$result2 = $maybeValue2->maybe($default, $callback);\n$result3 = $maybeValue3->maybe($default, $customCallback);\n```\n\n\u3053\u308c\u3067\u3082\u3044\u3044\u3093\u3060\u3051\u3069\n\n```php\n$withDefault = maybe($default);\n$withCallback = $withDefault($callback);\n\n$result1 = $withCallback($maybeValue1);\n$result2 = $withCallback($maybeValue2);\n$result3 = $withDefault($customCallback, $maybeValue3);\n```\n\n\u304c\u672c\u6765\u306e\u4f7f\u3044\u65b9\u3058\u3083\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n\n\n\n\u305d\u3093\u306a\u308f\u3051\u3067\u90e8\u5206\u9069\u7528 \u3084 fmap \u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30ca\u30c9\u3092\u66f8\u3044\u305f\u3002\nhttps://github.com/nishimura/laiz-monad\n\n\n\u90e8\u5206\u9069\u7528\u3059\u308b\u5834\u5408\u3001\u578b\u63a8\u8ad6\u304c\u306a\u3044\u306e\u3067\u578b\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304f\u306e\u306f\u5fc5\u9808\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n", "tags": ["PHP", "\u30e2\u30ca\u30c9"]}