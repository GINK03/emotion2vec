{"tags": ["Realm", "Swift"], "context": " More than 1 year has passed since last update.\n\nObject\u3092Dictionary\u306b\u3059\u308b\nRealm \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u4e09\u65e5\u76ee\u3067\u3059\u306d\uff0e\n\u3061\u3063\u3061\u3083\u306a\u5b50\u30cd\u30bf\u3092\u3069\u3046\u305e\uff0e\n\u3069\u308c\u304f\u3089\u3044\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\uff0cRealm\u306eObject\u3092Dictionary\u3068\u304b\u306b\u623b\u3057\u305f\u3044\uff0c\u76f8\u4e92\u5909\u63db\u3057\u305f\u3044\u3063\u3066\u601d\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f\n\u79c1\u306f\u3042\u308a\u307e\u3059\uff0e\nimport RealmSwift\nextension Object {\n    func toDictionary() -> Dictionary<String, AnyObject> {\n        let properties = self.objectSchema.properties.map { $0.name }\n        let dictionary = self.dictionaryWithValuesForKeys(properties)\n\n        let mutabledic = NSMutableDictionary()\n        mutabledic.setValuesForKeysWithDictionary(dictionary)\n\n        for prop in self.objectSchema.properties as [Property]! {\n            if let nestedObject = self[prop.name] as? Object {\n                mutabledic.setValue(nestedObject.toDictionary() as NSDictionary, forKey: prop.name)\n            } else if let nestedListObject = self[prop.name] as? ListBase {\n                var objects = [AnyObject]()\n                for index in 0..<nestedListObject._rlmArray.count {\n                    let object = nestedListObject._rlmArray[index] as AnyObject\n                    objects.append(object.toDictionary() as NSDictionary)\n                }\n                mutabledic.setObject(objects, forKey: prop.name)\n            }\n        }\n\n        return mutabledic as NSDictionary as! Dictionary<String, AnyObject>\n    }\n}\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u307f\u308b\u3068\n        let properties = self.objectSchema.properties.map { $0.name }\n        let dictionary = self.dictionaryWithValuesForKeys(properties)\n\n        let mutabledic = NSMutableDictionary()\n        mutabledic.setValuesForKeysWithDictionary(dictionary)\n\n\u3053\u306e\u3042\u305f\u308a\u3067\uff0cRealm\u56fa\u6709\u306e\u578b\u4ee5\u5916\u3092\u3060\u3044\u305f\u3044NSMutableDictionary\u306b\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\nobjectSchema.properties \u3067Object\u306eschema\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\ndictionaryWithValuesForKeys(properties) \u3067Schema\u3092\u30b6\u30b6\u3063\u3068NSDictionary\u306b\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\u3053\u3053\u304b\u3089\u4e0b\u306f\uff0c\u518d\u5e30\u3057\u305f\u308a\u3057\u306a\u304c\u3089ListBase\u3084\uff0cObject\u3092Dictionary\u5316\u3057\u3066\u3044\u304f\u30b3\u30fc\u30c9\u3067\u3059\u306d\uff0e\n\u3064\u3044\u3067\u306b\uff0cCamel Case\u3092Snake Case\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3082\u7528\u610f\u3057\u307e\u3057\u305f\uff0e\nextension String {\n    func snakeCaseString() -> String {\n        var result = \"\"\n        self.characters.forEach( { char in\nlet string = \"\\(char)\" as NSString\nresult += string.isEqualToString(string.capitalizedString) ? \"_\\(string.lowercaseString)\" : \"\\(char)\"\n        })\n        return result\n}\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u8d85\u5358\u7d14\u3067\uff0c\u6587\u5b57\u3092\u4e00\u6587\u5b57\u3065\u3064\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0c\u5927\u6587\u5b57\u3060\u3063\u305f\u3089\"_\u5c0f\u6587\u5b57\"\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3068\u3044\u3046\u3082\u306e\u3067\u3059\uff0e\u3053\u308c\u3067\u3060\u3044\u305f\u3044snake case\u306b\u3067\u304d\u3061\u3083\u3044\u307e\u3059\uff0e\n\u305d\u3057\u3066\uff0c\u3053\u306e\u3042\u305f\u308a\u3092\u7d44\u307f\u5408\u308f\u305b\u3066JSON\u306b\u3059\u308b\u3068\u304b\u3059\u308c\u3070\n\nAPI -> Object -> Dictionary -> JSON -> API\n\n\u307f\u305f\u3044\u306a\u6d41\u308c\u304c\u3059\u3054\u304f\u3084\u308a\u3084\u3059\u304f\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u79c1\u306e\u5834\u5408\u306f\n\nAPIKit \u2192 Himotoki \u2192 Object \u2192 Dictionary \u2192 Himotoki\n\n\u307f\u305f\u3044\u306a\u5909\u63db\u3092\u3061\u3089\u307b\u3089\u3057\u3066\u3044\u307e\u3059\n\u53c2\u8003\uff1ahttp://stackoverflow.com/questions/31150087/can-i-serialize-a-realmobject-to-json-or-to-nsdictionary-in-realm-for-swift\n# Object\u3092Dictionary\u306b\u3059\u308b\nRealm \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u4e09\u65e5\u76ee\u3067\u3059\u306d\uff0e\n\u3061\u3063\u3061\u3083\u306a\u5b50\u30cd\u30bf\u3092\u3069\u3046\u305e\uff0e\n\n\n\n\u3069\u308c\u304f\u3089\u3044\u601d\u3046\u3053\u3068\u304c\u3042\u308b\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\uff0cRealm\u306eObject\u3092Dictionary\u3068\u304b\u306b\u623b\u3057\u305f\u3044\uff0c\u76f8\u4e92\u5909\u63db\u3057\u305f\u3044\u3063\u3066\u601d\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f\n\n\u79c1\u306f\u3042\u308a\u307e\u3059\uff0e\n\n```swift\nimport RealmSwift\nextension Object {\n    func toDictionary() -> Dictionary<String, AnyObject> {\n        let properties = self.objectSchema.properties.map { $0.name }\n        let dictionary = self.dictionaryWithValuesForKeys(properties)\n\n        let mutabledic = NSMutableDictionary()\n        mutabledic.setValuesForKeysWithDictionary(dictionary)\n\n        for prop in self.objectSchema.properties as [Property]! {\n            if let nestedObject = self[prop.name] as? Object {\n                mutabledic.setValue(nestedObject.toDictionary() as NSDictionary, forKey: prop.name)\n            } else if let nestedListObject = self[prop.name] as? ListBase {\n                var objects = [AnyObject]()\n                for index in 0..<nestedListObject._rlmArray.count {\n                    let object = nestedListObject._rlmArray[index] as AnyObject\n                    objects.append(object.toDictionary() as NSDictionary)\n                }\n                mutabledic.setObject(objects, forKey: prop.name)\n            }\n        }\n\n        return mutabledic as NSDictionary as! Dictionary<String, AnyObject>\n    }\n}\n````\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u307f\u308b\u3068\n\n```swift\n        let properties = self.objectSchema.properties.map { $0.name }\n        let dictionary = self.dictionaryWithValuesForKeys(properties)\n\n        let mutabledic = NSMutableDictionary()\n        mutabledic.setValuesForKeysWithDictionary(dictionary)\n```\n\u3053\u306e\u3042\u305f\u308a\u3067\uff0cRealm\u56fa\u6709\u306e\u578b\u4ee5\u5916\u3092\u3060\u3044\u305f\u3044NSMutableDictionary\u306b\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\n\n`objectSchema.properties` \u3067Object\u306eschema\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n`dictionaryWithValuesForKeys(properties)` \u3067Schema\u3092\u30b6\u30b6\u3063\u3068NSDictionary\u306b\u30b3\u30d4\u30fc\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n\u3053\u3053\u304b\u3089\u4e0b\u306f\uff0c\u518d\u5e30\u3057\u305f\u308a\u3057\u306a\u304c\u3089ListBase\u3084\uff0cObject\u3092Dictionary\u5316\u3057\u3066\u3044\u304f\u30b3\u30fc\u30c9\u3067\u3059\u306d\uff0e\n\n\u3064\u3044\u3067\u306b\uff0cCamel Case\u3092Snake Case\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9\u3082\u7528\u610f\u3057\u307e\u3057\u305f\uff0e\n\n```swift\nextension String {\n    func snakeCaseString() -> String {\n        var result = \"\"\n        self.characters.forEach( { char in\nlet string = \"\\(char)\" as NSString\nresult += string.isEqualToString(string.capitalizedString) ? \"_\\(string.lowercaseString)\" : \"\\(char)\"\n        })\n        return result\n}\n```\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u8d85\u5358\u7d14\u3067\uff0c\u6587\u5b57\u3092\u4e00\u6587\u5b57\u3065\u3064\u30c1\u30a7\u30c3\u30af\u3057\u3066\uff0c\u5927\u6587\u5b57\u3060\u3063\u305f\u3089\"_\u5c0f\u6587\u5b57\"\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3068\u3044\u3046\u3082\u306e\u3067\u3059\uff0e\u3053\u308c\u3067\u3060\u3044\u305f\u3044snake case\u306b\u3067\u304d\u3061\u3083\u3044\u307e\u3059\uff0e\n\n\n\u305d\u3057\u3066\uff0c\u3053\u306e\u3042\u305f\u308a\u3092\u7d44\u307f\u5408\u308f\u305b\u3066JSON\u306b\u3059\u308b\u3068\u304b\u3059\u308c\u3070\n````\nAPI -> Object -> Dictionary -> JSON -> API\n````\n\u307f\u305f\u3044\u306a\u6d41\u308c\u304c\u3059\u3054\u304f\u3084\u308a\u3084\u3059\u304f\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\n\u79c1\u306e\u5834\u5408\u306f\n````\nAPIKit \u2192 Himotoki \u2192 Object \u2192 Dictionary \u2192 Himotoki\n````\n\u307f\u305f\u3044\u306a\u5909\u63db\u3092\u3061\u3089\u307b\u3089\u3057\u3066\u3044\u307e\u3059\n\n\n\u53c2\u8003\uff1ahttp://stackoverflow.com/questions/31150087/can-i-serialize-a-realmobject-to-json-or-to-nsdictionary-in-realm-for-swift\n"}