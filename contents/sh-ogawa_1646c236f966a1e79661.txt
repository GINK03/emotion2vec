{"context": " More than 1 year has passed since last update.\u305d\u308d\u305d\u308d\u5fd8\u308c\u305d\u3046\u306a\u306e\u3067\u30e1\u30e2\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u306e\u9023\u643a\u65b9\u6cd5\u3067\u3059\u3002\nApache Shiro\u306e\u4e0a\u306b\u72ec\u81ea\u306eFilter\u3092\u565b\u307e\u3057\u3066MySQL\u4e0a\u306edatabase\u306b\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6/\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8a8d\u8a3c\u3059\u308b\u5099\u5fd8\u9332\u3067\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306bApache Shiro\u306ebean\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n<!-- Apache Shiro\u306e\u8a2d\u5b9a \u203b\u516c\u5f0f\u304b\u3089\u6301\u3063\u3066\u304d\u305f\u3082\u306e\u3092\u30b3\u30d4\u30da\u3057\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u307e\u3059-->\n  <bean id=\"WebApiShiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n      <property name=\"securityManager\" ref=\"securityManager\"/>\n      <!-- override these for application-specific URLs if you like:\n      <property name=\"loginUrl\" value=\"/login.jsp\"/>\n      <property name=\"successUrl\" value=\"/home.jsp\"/>\n      <property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\"/> -->\n      <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->\n      <!-- defined will be automatically acquired and available via its beanName in chain        -->\n      <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->\n      <!-- \n          <util:map>\n              <entry key=\"anAlias\" value-ref=\"someFilter\"/>\n          </util:map>\n      </property> -->\n      <property name=\"filterChainDefinitions\">\n          <value>\n              /program/myapi.xml = anotherFilter\n              /program/myapi.json = anotherFilter\n              /mycontext/** = authc\n          </value>\n      </property>\n  </bean>\n\n<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->\n  <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->\n  <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->\n  <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->\n<!--\n  <bean id=\"someFilter\" class=\"...\"/>\n-->\n  <bean id=\"anotherFilter\" class=\"org.my.auth.filter.MyFilter\">\n  </bean>\n  <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n      <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->\n      <property name=\"realm\" ref=\"myRealm\"/>\n      <!-- By default the servlet container sessions will be used.  Uncomment this line\n           to use shiro's native sessions (see the JavaDoc for more): -->\n      <!--  -->\n  </bean>\n  <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->\n  <!-- security datasource: -->\n  <bean id=\"myRealm\" class=\"org.my.auth.relm.MySqlRealm\">\n      <property name=\"MyService\" ref=\"MyService\" />\n  </bean>\n\n\n\u57fa\u672c\u69cb\u9020\u306f\u4e0a\u8a18\u3092\u30b3\u30d4\u30da\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u72ec\u81ea\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u7b87\u6240\u306f\u4ee5\u4e0b\u3068\u306a\u308a\u307e\u3059\u3002\nproperty name=\"filterChainDefinitions\"\nURL\u3054\u3068\u306b\u565b\u307e\u305b\u305f\u3044\u8a8d\u8a3c\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\napache-shiro\u6a19\u6e96\u306e\u3082\u306e\u3082\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u3068\u672a\u30ed\u30b0\u30a4\u30f3\u306e\u5834\u5408\u306f\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\u306a\u3069\u306e\u8a2d\u5b9a\u3082\u5bb9\u6613\u306b\u884c\u3048\u307e\u3059\u3002\n\u4eca\u56de\u306f\u72ec\u81ea\u5b9f\u88c5\u3057\u305f\u8a8d\u8a3c\u3092\u565b\u307e\u305b\u305f\u3044\u306e\u3067\u3001\"anotherFilter\"\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nbean id=\"anotherFilter\"\nSpring\u306a\u306e\u3067bean\u3067\u6ce8\u5165\u3057\u307e\u3059\u3002\nclass\u306b\u72ec\u81ea\u5b9f\u88c5\u3057\u305fFilter\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nproperty name=\"realm\"\n\u30ec\u30eb\u30e0\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fMySQL\u4e0a\u306edatabase\u306b\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6/\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30ec\u30eb\u30e0\u3092\u4f5c\u308b\u306e\u3067\u3001myRelm\u3092refs\u5c5e\u6027\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\nbean id=\"myRealm\"\nSpring\u306a\u306e\u3067\u3001\u3084\u3063\u3071\u308aDI\u3055\u305b\u307e\u3059\u3002\nMySql\u30ec\u30eb\u30e0\u306a\u306e\u3067\u3001class\u5c5e\u6027\u306b\"org.my.auth.relm.MySqlRealm\"\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nMySql\u30ec\u30eb\u30e0\u306e\u4e2d\u3067\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u3044\u307e\u308f\u3057\u305f\u3044\u306e\u3067\u3001MyService\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067ApplicationContext\u306e\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3059\u3002\n\u25a0org.my.auth.filter.MyFilter\u30af\u30e9\u30b9\n\n\n/**\n * MySQL\u8a8d\u8a3c\u7528\u306b\u4f5c\u6210\u3057\u305f\u72ec\u81ea\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\n */\n@Scope(\"prototype\")\n@Component\npublic class MyFilter extends AccessControlFilter{\n\npublic MyFilter(){\n    super();\n}\n\n/**\n * \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u6642\u306e\u51e6\u7406\n * \u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u7528\u306e\u8a8d\u8a3c\u51e6\u7406\u3067\u3059\u3002\n * @param req \u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\n * @param rsp \u30ec\u30b9\u30dd\u30f3\u30b9\u60c5\u5831\n * @param obj \u4ed8\u52a0\u60c5\u5831\n * @throws Exception \u4f8b\u5916\n * @return boolean true:\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\n */\n@Override\nprotected boolean isAccessAllowed(final ServletRequest req, final ServletResponse rsp\n        , final Object obj) throws Exception {\n\n    //\u30e6\u30fc\u30b6ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u5b9f\u884c\u3059\u308b\u3002\n    String userName = req.getParameter(\"user_name\");\n\n    String password = req.getParameter(\"password\");\n\n    UsernamePasswordToken token = new UsernamePasswordToken(userName, password);\n    final Subject subject = SecurityUtils.getSubject();\n\n    boolean flg = false;\n\n    try{\n\n        subject.login(token);\n\n        return true;\n\n    //login\u30e1\u30bd\u30c3\u30c9\u3067\u8a8d\u8a3c\u5931\u6557\u3059\u308b\u3068\u4f8b\u5916\u304c\u98db\u3093\u3067\u304d\u307e\u3059\n    }catch(AuthenticationException e){\n\n        return false;\n\n    }\n}\n\n/**\n * \u30a2\u30af\u30bb\u30b9\u62d2\u5426\u6642\u306e\u51e6\u7406\n * @param req \u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\n * @param rsp \u30ec\u30b9\u30dd\u30f3\u30b9\u60c5\u5831\n * @throws Exception \u4f8b\u5916\n * @return boolean false:\u30a2\u30af\u30bb\u30b9\u8a31\u62d2\u5426\n */\n@Override\nprotected boolean onAccessDenied(final ServletRequest req, final ServletResponse rsp)\n    throws Exception {\n    //Apache-shiro\u3092\u4ecb\u3057\u305f\u5225\u306e\u8a8d\u8a3c\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u3001\u98db\u3070\u3055\u308c\u307e\u3059\u3002\n    //1\u500b\u3057\u304b\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u3053\u306b\u306f\u98db\u3093\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3001\u5b9f\u88c5\u3057\u307e\u305b\u3093\u3002\n    return false;\n}\n\n\n}\n\nScope\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\"prototype\"\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3001\nSpring\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306a\u306e\u3067\u3001\u540c\u6642\u306b\u7570\u306a\u308b\u30e6\u30fc\u30b6\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u5834\u5408\u306b\u3001\n\u5f8c\u52dd\u3061\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3059\u3002\n\uff08\u5148\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u304c\u3001\u5f8c\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u3068\u3057\u3066\u8a8d\u8a3c\uff2f\uff2b\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\uff09\nprototype\u6307\u5b9a\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u6bce\u56denew\u3055\u308c\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3055\u308c\u307e\u3059\u3002\n\u203bSpring\u306e\u8aac\u660e\u3067\u306f\u306a\u3044\u305f\u3081\u3001Scope\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u5024\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\napache-shiro\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u72ec\u81ea\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f\u3001AccessControlFilter\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\n\u7d99\u627f\u3059\u308b\u3068\u3001isAccessAllowed\u3068onAccessDenied\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u8a00\u308f\u308c\u308b\u306e\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\nisAccessAllowed\u30e1\u30bd\u30c3\u30c9\u306b\u8a8d\u8a3c\u51e6\u7406\u3092\u5165\u308c\u308c\u3070\uff2f\uff2b\u3067\u3059\u3002\n\u30c6\u30b9\u30c8\u7528\u306a\u306e\u3067\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001HTTP GET\u30d1\u30e9\u30e1\u30fc\u30bf\u306buser_name\u3068password\uff08SHA-256\u30cf\u30c3\u30b7\u30e5\u5316\uff09\u3092\u8a70\u3081\u3066\u53d7\u3051\u53d6\u308b\u4f5c\u308a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u53d6\u3063\u305f\u3082\u306e\u306f\u3001UsernamePasswordToken\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u306fSubject\uff08apache-shiro\u306e\u8a8d\u8a3c\u306e\u4ed5\u7d44\u307f\u306b\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308a\u3001\u305d\u306e\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\uff09\u3092\u53d6\u3063\u3066login\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\u30ed\u30b0\u30a4\u30f3\u306b\u6210\u529f\u3059\u308b\u3068void\u306a\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u904e\u3057\u307e\u3059\u3002\n\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u98db\u3093\u3067\u304f\u308b\u306e\u3067\u3001\u4f8b\u5916\u30d6\u30ed\u30c3\u30af\u306b\u8a8d\u8a3c\uff2e\uff27\u6642\u306e\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001MySqlRealm\u30af\u30e9\u30b9\u3092\u901a\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067Exception\u3092\u6295\u3052\u305f\u5834\u5408\u306b\u3064\u3044\u3066\u3082\u3001\nAuthenticateException\u306b\u5168\u3066\u5909\u63db\u3055\u308c\u308b\u306e\u3067\u3001\u72ec\u81ea\u306e\u4f8b\u5916\u306a\u3069\u306f\u6295\u3052\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u25a0org.my.auth.relm.MySqlRealm\u30af\u30e9\u30b9\n\n\n/**\n * MySQL\u8a8d\u8a3c\u7528\u306e\u30ec\u30eb\u30e0\n */\n@Scope(\"prototype\")\n@Component\npublic final class MySqlRealm extends JdbcRealm {\n\n@Autowired\nprivate MyService myService = null;\n\npublic void setMyService(final MyService myService){\n    this.myService = myService;\n}\n\npublic MyService getMyService(){\n    return myService;\n}\n\n/**\n * \u8a8d\u8a3c\u51e6\u7406\n * @param token \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\n * @return AuthenticationInfo\n * @throws AuthenticationException Apache Shiro\u304b\u3089\u306e\u4f8b\u5916\n */\n@Override\nprotected AuthenticationInfo doGetAuthenticationInfo(final AuthenticationToken token)\n    throws AuthenticationException {\n\n    //\u30c8\u30fc\u30af\u30f3\u304b\u3089\u30e6\u30fc\u30b6\u540d\u3092\u53d6\u5f97\u3059\u308b\n    final UsernamePasswordToken upToken = (UsernamePasswordToken) token;\n    final String userName = upToken.getUsername();\n    final String password = String.valueOf(upToken.getPassword());\n\n    //DB\u304b\u3089\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n    UserInfo user = myService.getUserInfo(userName, password);\n\n    Sha256CredentialsMatcher credentialsMatcher = new Sha256CredentialsMatcher();\n    super.setCredentialsMatcher(credentialsMatcher);\n    credentialsMatcher.setHashIterations(1);\n\n    //\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    final Sha256Hash credentials = Sha256Hash.fromBase64String(user.getPassword());\n    credentials.setSalt(ByteSource.Util.bytes(Base64.decode(user.getSalt())));\n\n    final SimpleAuthenticationInfo info \n        = new SimpleAuthenticationInfo(userName, credentials, getName());\n    info.setCredentialsSalt(credentials.getSalt());\n\n    return info;\n}\n\n\n}\n\nMySQL\u3067\u30ec\u30eb\u30e0\u3092\u4f5c\u308b\u3068\u304d\u306f\u3001JdbcRealm\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\n\u203b\u591a\u5206PostgreSQL\u306e\u30ec\u30eb\u30e0\u3092\u4f5c\u3063\u3066\u3082\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308c\u3070\u3044\u3051\u308b\u306f\u305a\u3067\u3059\u3002\nMyService\u30af\u30e9\u30b9\u3092Spring\u306bDI\u3057\u3066\u3082\u3089\u3046\u305f\u3081\u3001AUTOWIRED\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u3001setter\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u76f4\u63a5\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3055\u305b\u308c\u307e\u3059\u304c\u62b5\u6297\u3042\u308b\u306e\u3067\u3001\u79c1\u306f\u6bce\u5ea6\u3053\u3046\u3057\u3066\u3044\u307e\u3059\u3002\nJdbcRelm\u3092\u7d99\u627f\u3059\u308b\u3068\u3001doGetAuthenticationInfo\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u8a00\u308f\u308c\u308b\u306e\u3067\u3001\u5b9f\u88c5\u3057\u307e\u3059\u3002\nMyFilter\u3067\u4f5c\u3063\u305f\u30c8\u30fc\u30af\u30f3\u3092\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3068\u3001MyService\u3092\u4f7f\u3063\u3066\u53d6\u3063\u305f\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\nHTTP GET\u3067\u6e21\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6539\u7ac4\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nDB\u4e0a\u306b\u306f\u3001SHA-256\u5316\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u4fdd\u5b58\u3057\u3066\u304a\u304f\u306e\u3067\u306f\u306a\u304f\u3001\n\u30bd\u30eb\u30c8\u3092\u53d6\u3063\u305f\u4e0a\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001HTTP GET\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3001SHA-256\u6587\u5b57\u5217 + \u30bd\u30eb\u30c8\u3067\u5f53\u3066\u306b\u884c\u304d\u307e\u3059\u3002\n\u6539\u7ac4\u30c1\u30a7\u30c3\u30af\u81ea\u4f53\u306f\u3001SimpleAuthenticationInfo\u30af\u30e9\u30b9\u306b\u6e21\u3057\u3066\u4e0a\u3052\u3001\ndoGetAuthenticationInfo\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u3001\nshiro\u5074\u3067\u3088\u308d\u3057\u304f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u3001\u6539\u7ac4\u3055\u308c\u3066\u3044\u308c\u3070Exception\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u3053\u308c\u3067Spring3\u3068Apache Shiro\u3092\u9023\u643a\u3055\u305b\u3001\u304b\u3064\u72ec\u81eaFilter\u3067\u8a8d\u8a3c\u3055\u305b\u308b\u5b9f\u88c5\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\nApache-Shiro\u306f\u8a8d\u8a3c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\n\u5358\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u306e\u3082\u826f\u3044\u3067\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3092\u5165\u308c\u305fjar\u3082\u3042\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u308d\u305d\u308d\u5fd8\u308c\u305d\u3046\u306a\u306e\u3067\u30e1\u30e2\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u306e\u9023\u643a\u65b9\u6cd5\u3067\u3059\u3002\nApache Shiro\u306e\u4e0a\u306b\u72ec\u81ea\u306eFilter\u3092\u565b\u307e\u3057\u3066MySQL\u4e0a\u306edatabase\u306b\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6/\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8a8d\u8a3c\u3059\u308b\u5099\u5fd8\u9332\u3067\u3059\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306bApache Shiro\u306ebean\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n<pre>\n\n\\<!-- Apache Shiro\u306e\u8a2d\u5b9a \u203b\u516c\u5f0f\u304b\u3089\u6301\u3063\u3066\u304d\u305f\u3082\u306e\u3092\u30b3\u30d4\u30da\u3057\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3066\u307e\u3059-->\n  \\<bean id=\"WebApiShiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n      \\<property name=\"securityManager\" ref=\"securityManager\"/>\n      \\<!-- override these for application-specific URLs if you like:\n      \\<property name=\"loginUrl\" value=\"/login.jsp\"/>\n      \\<property name=\"successUrl\" value=\"/home.jsp\"/>\n      \\<property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\"/> -->\n      \\<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->\n      \\<!-- defined will be automatically acquired and available via its beanName in chain        -->\n      \\<!-- definitions, but you can perform instance overrides or name aliases here if you like: -->\n      \\<!-- <property name=\"filters\">\n          \\<util:map>\n              \\<entry key=\"anAlias\" value-ref=\"someFilter\"/>\n          \\</util:map>\n      \\</property> -->\n      \\<property name=\"filterChainDefinitions\">\n          \\<value>\n              /program/myapi.xml = anotherFilter\n              /program/myapi.json = anotherFilter\n              /mycontext/** = authc\n          \\</value>\n      \\</property>\n  \\</bean>\n\n  \\<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->\n  \\<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->\n  \\<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->\n  \\<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->\n\\<!--\n  \\<bean id=\"someFilter\" class=\"...\"/>\n-->\n  \\<bean id=\"anotherFilter\" class=\"org.my.auth.filter.MyFilter\">\n  \\</bean>\n  \\<bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n      \\<!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->\n      \\<property name=\"realm\" ref=\"myRealm\"/>\n      \\<!-- By default the servlet container sessions will be used.  Uncomment this line\n           to use shiro's native sessions (see the JavaDoc for more): -->\n      \\<!-- <property name=\"sessionMode\" value=\"native\"/> -->\n  \\</bean>\n  \\<bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n  \\<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->\n  \\<!-- security datasource: -->\n  \\<bean id=\"myRealm\" class=\"org.my.auth.relm.MySqlRealm\">\n      \\<property name=\"MyService\" ref=\"MyService\" />\n  \\</bean>\n\n</pre>\n\n\u57fa\u672c\u69cb\u9020\u306f\u4e0a\u8a18\u3092\u30b3\u30d4\u30da\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u72ec\u81ea\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u7b87\u6240\u306f\u4ee5\u4e0b\u3068\u306a\u308a\u307e\u3059\u3002\n\nproperty name=\"filterChainDefinitions\"\n<pre>\nURL\u3054\u3068\u306b\u565b\u307e\u305b\u305f\u3044\u8a8d\u8a3c\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\napache-shiro\u6a19\u6e96\u306e\u3082\u306e\u3082\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u3068\u672a\u30ed\u30b0\u30a4\u30f3\u306e\u5834\u5408\u306f\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3059\u306a\u3069\u306e\u8a2d\u5b9a\u3082\u5bb9\u6613\u306b\u884c\u3048\u307e\u3059\u3002\n\u4eca\u56de\u306f\u72ec\u81ea\u5b9f\u88c5\u3057\u305f\u8a8d\u8a3c\u3092\u565b\u307e\u305b\u305f\u3044\u306e\u3067\u3001\"anotherFilter\"\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n</pre>\n\nbean id=\"anotherFilter\"\n<pre>\nSpring\u306a\u306e\u3067bean\u3067\u6ce8\u5165\u3057\u307e\u3059\u3002\nclass\u306b\u72ec\u81ea\u5b9f\u88c5\u3057\u305fFilter\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n</pre>\n\nproperty name=\"realm\"\n<pre>\n\u30ec\u30eb\u30e0\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fMySQL\u4e0a\u306edatabase\u306b\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6/\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u8a8d\u8a3c\u3059\u308b\u305f\u3081\u306e\u30ec\u30eb\u30e0\u3092\u4f5c\u308b\u306e\u3067\u3001myRelm\u3092refs\u5c5e\u6027\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n</pre>\n\nbean id=\"myRealm\"\n<pre>\nSpring\u306a\u306e\u3067\u3001\u3084\u3063\u3071\u308aDI\u3055\u305b\u307e\u3059\u3002\nMySql\u30ec\u30eb\u30e0\u306a\u306e\u3067\u3001class\u5c5e\u6027\u306b\"org.my.auth.relm.MySqlRealm\"\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nMySql\u30ec\u30eb\u30e0\u306e\u4e2d\u3067\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u3044\u307e\u308f\u3057\u305f\u3044\u306e\u3067\u3001MyService\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n</pre>\n\n\u3053\u308c\u3067ApplicationContext\u306e\u8a2d\u5b9a\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3059\u3002\n\n\u25a0org.my.auth.filter.MyFilter\u30af\u30e9\u30b9\n<pre>\n\n/**\n * MySQL\u8a8d\u8a3c\u7528\u306b\u4f5c\u6210\u3057\u305f\u72ec\u81ea\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u3002\n */\n@Scope(\"prototype\")\n@Component\npublic class MyFilter extends AccessControlFilter{\n\n    public MyFilter(){\n        super();\n    }\n    \n    /**\n     * \u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u6642\u306e\u51e6\u7406\n     * \u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u7528\u306e\u8a8d\u8a3c\u51e6\u7406\u3067\u3059\u3002\n     * @param req \u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\n     * @param rsp \u30ec\u30b9\u30dd\u30f3\u30b9\u60c5\u5831\n     * @param obj \u4ed8\u52a0\u60c5\u5831\n     * @throws Exception \u4f8b\u5916\n     * @return boolean true:\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\n     */\n    @Override\n    protected boolean isAccessAllowed(final ServletRequest req, final ServletResponse rsp\n            , final Object obj) throws Exception {\n        \n        //\u30e6\u30fc\u30b6ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u5b9f\u884c\u3059\u308b\u3002\n        String userName = req.getParameter(\"user_name\");\n        \n        String password = req.getParameter(\"password\");\n        \n        UsernamePasswordToken token = new UsernamePasswordToken(userName, password);\n        final Subject subject = SecurityUtils.getSubject();\n        \n        boolean flg = false;\n        \n        try{\n            \n            subject.login(token);\n            \n            return true;\n            \n        //login\u30e1\u30bd\u30c3\u30c9\u3067\u8a8d\u8a3c\u5931\u6557\u3059\u308b\u3068\u4f8b\u5916\u304c\u98db\u3093\u3067\u304d\u307e\u3059\n        }catch(AuthenticationException e){\n            \n            return false;\n\n        }\n    }\n\n    /**\n     * \u30a2\u30af\u30bb\u30b9\u62d2\u5426\u6642\u306e\u51e6\u7406\n     * @param req \u30ea\u30af\u30a8\u30b9\u30c8\u60c5\u5831\n     * @param rsp \u30ec\u30b9\u30dd\u30f3\u30b9\u60c5\u5831\n     * @throws Exception \u4f8b\u5916\n     * @return boolean false:\u30a2\u30af\u30bb\u30b9\u8a31\u62d2\u5426\n     */\n    @Override\n    protected boolean onAccessDenied(final ServletRequest req, final ServletResponse rsp)\n        throws Exception {\n        //Apache-shiro\u3092\u4ecb\u3057\u305f\u5225\u306e\u8a8d\u8a3c\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u3001\u98db\u3070\u3055\u308c\u307e\u3059\u3002\n        //1\u500b\u3057\u304b\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u3053\u306b\u306f\u98db\u3093\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3001\u5b9f\u88c5\u3057\u307e\u305b\u3093\u3002\n        return false;\n    }\n    \n}\n</pre>\n\nScope\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\"prototype\"\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3001\nSpring\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306a\u306e\u3067\u3001\u540c\u6642\u306b\u7570\u306a\u308b\u30e6\u30fc\u30b6\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u5834\u5408\u306b\u3001\n\u5f8c\u52dd\u3061\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3059\u3002\n\uff08\u5148\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u304c\u3001\u5f8c\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u3068\u3057\u3066\u8a8d\u8a3c\uff2f\uff2b\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\uff09\nprototype\u6307\u5b9a\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u6bce\u56denew\u3055\u308c\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3055\u308c\u307e\u3059\u3002\n\u203bSpring\u306e\u8aac\u660e\u3067\u306f\u306a\u3044\u305f\u3081\u3001Scope\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u5024\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\napache-shiro\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u72ec\u81ea\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f\u3001AccessControlFilter\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\n\u7d99\u627f\u3059\u308b\u3068\u3001isAccessAllowed\u3068onAccessDenied\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u8a00\u308f\u308c\u308b\u306e\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\nisAccessAllowed\u30e1\u30bd\u30c3\u30c9\u306b\u8a8d\u8a3c\u51e6\u7406\u3092\u5165\u308c\u308c\u3070\uff2f\uff2b\u3067\u3059\u3002\n\u30c6\u30b9\u30c8\u7528\u306a\u306e\u3067\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u3001HTTP GET\u30d1\u30e9\u30e1\u30fc\u30bf\u306buser_name\u3068password\uff08SHA-256\u30cf\u30c3\u30b7\u30e5\u5316\uff09\u3092\u8a70\u3081\u3066\u53d7\u3051\u53d6\u308b\u4f5c\u308a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u53d6\u3063\u305f\u3082\u306e\u306f\u3001UsernamePasswordToken\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u306fSubject\uff08apache-shiro\u306e\u8a8d\u8a3c\u306e\u4ed5\u7d44\u307f\u306b\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308a\u3001\u305d\u306e\u30b5\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\uff09\u3092\u53d6\u3063\u3066login\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\u30ed\u30b0\u30a4\u30f3\u306b\u6210\u529f\u3059\u308b\u3068void\u306a\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u904e\u3057\u307e\u3059\u3002\n\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u98db\u3093\u3067\u304f\u308b\u306e\u3067\u3001\u4f8b\u5916\u30d6\u30ed\u30c3\u30af\u306b\u8a8d\u8a3c\uff2e\uff27\u6642\u306e\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001MySqlRealm\u30af\u30e9\u30b9\u3092\u901a\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067Exception\u3092\u6295\u3052\u305f\u5834\u5408\u306b\u3064\u3044\u3066\u3082\u3001\nAuthenticateException\u306b\u5168\u3066\u5909\u63db\u3055\u308c\u308b\u306e\u3067\u3001\u72ec\u81ea\u306e\u4f8b\u5916\u306a\u3069\u306f\u6295\u3052\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u25a0org.my.auth.relm.MySqlRealm\u30af\u30e9\u30b9\n<pre>\n\n/**\n * MySQL\u8a8d\u8a3c\u7528\u306e\u30ec\u30eb\u30e0\n */\n@Scope(\"prototype\")\n@Component\npublic final class MySqlRealm extends JdbcRealm {\n\n    @Autowired\n    private MyService myService = null;\n\n    public void setMyService(final MyService myService){\n        this.myService = myService;\n    }\n    \n    public MyService getMyService(){\n        return myService;\n    }\n    \n    /**\n     * \u8a8d\u8a3c\u51e6\u7406\n     * @param token \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\n     * @return AuthenticationInfo\n     * @throws AuthenticationException Apache Shiro\u304b\u3089\u306e\u4f8b\u5916\n     */\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(final AuthenticationToken token)\n        throws AuthenticationException {\n\n        //\u30c8\u30fc\u30af\u30f3\u304b\u3089\u30e6\u30fc\u30b6\u540d\u3092\u53d6\u5f97\u3059\u308b\n        final UsernamePasswordToken upToken = (UsernamePasswordToken) token;\n        final String userName = upToken.getUsername();\n        final String password = String.valueOf(upToken.getPassword());\n\n        //DB\u304b\u3089\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n        UserInfo user = myService.getUserInfo(userName, password);\n\n        Sha256CredentialsMatcher credentialsMatcher = new Sha256CredentialsMatcher();\n        super.setCredentialsMatcher(credentialsMatcher);\n        credentialsMatcher.setHashIterations(1);\n        \n        //\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\n        final Sha256Hash credentials = Sha256Hash.fromBase64String(user.getPassword());\n        credentials.setSalt(ByteSource.Util.bytes(Base64.decode(user.getSalt())));\n        \n        final SimpleAuthenticationInfo info \n            = new SimpleAuthenticationInfo(userName, credentials, getName());\n        info.setCredentialsSalt(credentials.getSalt());\n        \n        return info;\n    }\n\n}\n</pre>\n\nMySQL\u3067\u30ec\u30eb\u30e0\u3092\u4f5c\u308b\u3068\u304d\u306f\u3001JdbcRealm\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u307e\u3059\u3002\n\u203b\u591a\u5206PostgreSQL\u306e\u30ec\u30eb\u30e0\u3092\u4f5c\u3063\u3066\u3082\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308c\u3070\u3044\u3051\u308b\u306f\u305a\u3067\u3059\u3002\n\nMyService\u30af\u30e9\u30b9\u3092Spring\u306bDI\u3057\u3066\u3082\u3089\u3046\u305f\u3081\u3001AUTOWIRED\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u3001setter\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u76f4\u63a5\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3055\u305b\u308c\u307e\u3059\u304c\u62b5\u6297\u3042\u308b\u306e\u3067\u3001\u79c1\u306f\u6bce\u5ea6\u3053\u3046\u3057\u3066\u3044\u307e\u3059\u3002\n\nJdbcRelm\u3092\u7d99\u627f\u3059\u308b\u3068\u3001doGetAuthenticationInfo\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u8a00\u308f\u308c\u308b\u306e\u3067\u3001\u5b9f\u88c5\u3057\u307e\u3059\u3002\nMyFilter\u3067\u4f5c\u3063\u305f\u30c8\u30fc\u30af\u30f3\u3092\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3068\u3001MyService\u3092\u4f7f\u3063\u3066\u53d6\u3063\u305f\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\nHTTP GET\u3067\u6e21\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6539\u7ac4\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nDB\u4e0a\u306b\u306f\u3001SHA-256\u5316\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u4fdd\u5b58\u3057\u3066\u304a\u304f\u306e\u3067\u306f\u306a\u304f\u3001\n\u30bd\u30eb\u30c8\u3092\u53d6\u3063\u305f\u4e0a\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001HTTP GET\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3001SHA-256\u6587\u5b57\u5217 + \u30bd\u30eb\u30c8\u3067\u5f53\u3066\u306b\u884c\u304d\u307e\u3059\u3002\n\u6539\u7ac4\u30c1\u30a7\u30c3\u30af\u81ea\u4f53\u306f\u3001SimpleAuthenticationInfo\u30af\u30e9\u30b9\u306b\u6e21\u3057\u3066\u4e0a\u3052\u3001\ndoGetAuthenticationInfo\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u3001\nshiro\u5074\u3067\u3088\u308d\u3057\u304f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u3001\u6539\u7ac4\u3055\u308c\u3066\u3044\u308c\u3070Exception\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u3053\u308c\u3067Spring3\u3068Apache Shiro\u3092\u9023\u643a\u3055\u305b\u3001\u304b\u3064\u72ec\u81eaFilter\u3067\u8a8d\u8a3c\u3055\u305b\u308b\u5b9f\u88c5\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\nApache-Shiro\u306f\u8a8d\u8a3c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\n\u5358\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u306e\u3082\u826f\u3044\u3067\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3092\u5165\u308c\u305fjar\u3082\u3042\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["spring3.2.3", "apache-shiro1.2.2"]}