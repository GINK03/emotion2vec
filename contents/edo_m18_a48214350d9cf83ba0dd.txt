{"tags": ["mouseenter", "event", "mouseleave"], "context": " More than 1 year has passed since last update.(function (win, doc, exports) {\n\n    'use strict';\n\n    var el = doc.getElementById('target');\n\n    /**\n     * Emulate mouse enter and leave.\n     * @constructor\n     * @param {Elemenet} el A target element.\n     * @param {string} eventName Watching event name.\n     * @param {Function} callback The callback.\n     */\n    function EmulateLeaveEnter(el, eventName, callback) {\n        this.init.apply(this, arguments);\n    }\n\n    EmulateLeaveEnter.prototype = {\n\n        /**\n         * Initialize\n         * @param {Elemenet} el A target element.\n         * @param {string} eventName Watching event name.\n         * @param {Function} callback The callback.\n         */\n        init: function (el, eventName, callback) {\n\n            this.el_ = el;\n            this.eventName_ = eventName;\n            this.callback_ = callback;\n            this.inFlg_ = false;\n\n            this.setOver_();\n            this.setOut_();\n        },\n        setOver_: function () {\n\n            var self = this,\n                el = this.el_;\n\n            el.addEventListener('mouseover', function (e) {\n                var desendants = [].slice.call(el.querySelectorAll('*'));\n\n                if (self.inFlg_) {\n                    return true;\n                }\n\n                self.onEnter_(e);\n            }, false);\n\n        },\n        setOut_: function () {\n\n            var self = this,\n                el = this.el_;\n\n            el.addEventListener('mouseout', function (e) {\n\n                var desendants = [].slice.call(el.querySelectorAll('*')),\n                    par = el.parentNode;\n\n                while (par) {\n                    if (par === e.relatedTarget) {\n                        self.onLeave_(e);\n                        return true;\n                    }\n                    par = par.parentNode;\n                }\n\n                if (e.relatedTarget !== el && desendants.indexOf(e.relatedTarget) === -1) {\n                    self.onLeave_(e);\n                }\n            }, false);\n        },\n\n        /**\n         * @param {Event} e Event object.\n         */\n        onLeave_: function (e) {\n            this.inFlg_ = false;\n            this.fire_('leave', e);\n        },\n\n        /**\n         * @param {Event} e Event object.\n         */\n        onEnter_: function (e) {\n            this.inFlg_ = true;\n            this.fire_('enter', e);\n        },\n\n        /**\n         * Fire the callback if eventType same this.eventName_.\n         * @param {string} eventType, The event type.\n         * @param {Event} e Event object.\n         */\n        fire_: function (eventType, e) {\n            if (this.checkType_(eventType)) {\n                if (({}).toString.call(this.callback_) === '[object Function]') {\n                    this.callback_(e);\n                }\n            }\n        },\n\n        /**\n         * @param {string} type The type.\n         * @return {boolean} return true if eventName_ is type.\n         */\n        checkType_: function (type) {\n            if (this.eventName_ === type) {\n                return true;\n            }\n\n            return false;\n        }\n    };\n    EmulateLeaveEnter.prototype.constructor = EmulateLeaveEnter;\n\n    var evt = new EmulateLeaveEnter(el, 'enter', function (e) {\n        alert('Enter!');\n    });\n\n    var evt2 = new EmulateLeaveEnter(el, 'leave', function (e) {\n        alert('Leave!');\n    });\n\n}(window, document, window));\n\n\n```javascript\n(function (win, doc, exports) {\n\n    'use strict';\n\n    var el = doc.getElementById('target');\n\n    /**\n     * Emulate mouse enter and leave.\n     * @constructor\n     * @param {Elemenet} el A target element.\n     * @param {string} eventName Watching event name.\n     * @param {Function} callback The callback.\n     */\n    function EmulateLeaveEnter(el, eventName, callback) {\n        this.init.apply(this, arguments);\n    }\n\n    EmulateLeaveEnter.prototype = {\n        \n        /**\n         * Initialize\n         * @param {Elemenet} el A target element.\n         * @param {string} eventName Watching event name.\n         * @param {Function} callback The callback.\n         */\n        init: function (el, eventName, callback) {\n        \n            this.el_ = el;\n            this.eventName_ = eventName;\n            this.callback_ = callback;\n            this.inFlg_ = false;\n\n            this.setOver_();\n            this.setOut_();\n        },\n        setOver_: function () {\n\n            var self = this,\n                el = this.el_;\n\n            el.addEventListener('mouseover', function (e) {\n                var desendants = [].slice.call(el.querySelectorAll('*'));\n\n                if (self.inFlg_) {\n                    return true;\n                }\n\n                self.onEnter_(e);\n            }, false);\n\n        },\n        setOut_: function () {\n\n            var self = this,\n                el = this.el_;\n\n            el.addEventListener('mouseout', function (e) {\n\n                var desendants = [].slice.call(el.querySelectorAll('*')),\n                    par = el.parentNode;\n\n                while (par) {\n                    if (par === e.relatedTarget) {\n                        self.onLeave_(e);\n                        return true;\n                    }\n                    par = par.parentNode;\n                }\n\n                if (e.relatedTarget !== el && desendants.indexOf(e.relatedTarget) === -1) {\n                    self.onLeave_(e);\n                }\n            }, false);\n        },\n\n        /**\n         * @param {Event} e Event object.\n         */\n        onLeave_: function (e) {\n            this.inFlg_ = false;\n            this.fire_('leave', e);\n        },\n\n        /**\n         * @param {Event} e Event object.\n         */\n        onEnter_: function (e) {\n            this.inFlg_ = true;\n            this.fire_('enter', e);\n        },\n\n        /**\n         * Fire the callback if eventType same this.eventName_.\n         * @param {string} eventType, The event type.\n         * @param {Event} e Event object.\n         */\n        fire_: function (eventType, e) {\n            if (this.checkType_(eventType)) {\n                if (({}).toString.call(this.callback_) === '[object Function]') {\n                    this.callback_(e);\n                }\n            }\n        },\n\n        /**\n         * @param {string} type The type.\n         * @return {boolean} return true if eventName_ is type.\n         */\n        checkType_: function (type) {\n            if (this.eventName_ === type) {\n                return true;\n            }\n            \n            return false;\n        }\n    };\n    EmulateLeaveEnter.prototype.constructor = EmulateLeaveEnter;\n\n    var evt = new EmulateLeaveEnter(el, 'enter', function (e) {\n        alert('Enter!');\n    });\n\n    var evt2 = new EmulateLeaveEnter(el, 'leave', function (e) {\n        alert('Leave!');\n    });\n\n}(window, document, window));\n```"}