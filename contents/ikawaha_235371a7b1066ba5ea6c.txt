{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nDoubleArray \u3092\u4f5c\u3063\u305f\u3053\u3068\u3082\u3042\u3063\u3066\uff0c\u3064\u3044\u3067\u306b\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u7acb\u3061 kuromoji \u3092\u53c2\u8003\u306b\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u76ee\u6a19\u3068\u3057\u3066\u306f\uff0cPure Go \u3067 kuromoji \u307f\u305f\u3044\u306a\u611f\u3058\uff08\u8f9e\u66f8\u5185\u5305\uff0c\u691c\u7d22\u30e2\u30fc\u30c9\u3042\u308a\uff0c\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\uff09\u3092\u76ee\u6307\u3057\u307e\u3059\uff0e\n\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\nhttps://github.com/ikawaha/kagome\n\n\u53c2\u8003\n\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\n\nkuromoji\n\u65e5\u672c\u8a9e\u5165\u529b\u3092\u652f\u3048\u308b\u6280\u8853\n\nMecab\n\n\u54c1\u8a5eID\u306e\u5b9a\u7fa9\n\n\n\n\n\u5f62\u614b\u7d20\u89e3\u6790\u306e\u3061\u3087\u30fc\u9069\u5f53\u306a\u8aac\u660e\n\u300c\u5f62\u614b\u7d20\u300d\u304c\u4f55\u3067\u3042\u308b\u304b\u3092\u8b70\u8ad6\u3057\u51fa\u3059\u3068\u9762\u5012\u306a\u3053\u3068\u306b\u5dfb\u304d\u8fbc\u307e\u308c\u305d\u3046\u306a\u306e\u3067\uff0c\u3053\u3053\u3067\u306f MeCab-IPADIC \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\uff0e\u5f62\u614b\u7d20\u89e3\u6790\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u306e\u8cc7\u6599\u306a\u3069\u3092\u3042\u305f\u3063\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u65e5\u672c\u8a9e\u5165\u529b\u3092\u652f\u3048\u308b\u6280\u8853\n\u65e5\u672c\u8a9e\u89e3\u6790\u30c4\u30fc\u30eb MeCab, CaboCha \u306e\u7d39\u4ecb\n\n\n\u7528\u610f\u3059\u308b\u3082\u306e\n\nDoubleArray #\u524d\u306b\u4f5c\u3063\u305f\u3082\u306e\u3092 id \u304c\u8a18\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u3061\u3087\u3063\u3068\u6539\u9020\n\u5b66\u7fd2\u6e08\u307f\u306e\u5f62\u614b\u7d20\u89e3\u6790\u30e2\u30c7\u30eb MeCab-IPADIC\n\n\n\nMeCab-IPADIC \u306e\u4e2d\u8eab\u3092\u306e\u305e\u3044\u3066\u898b\u3066\u307f\u308b\n\u5185\u5bb9\u7269\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f (mecab-ipadic-2.7.0-20070801)\n\nmecab-ipadic-2.7.0-20070801\nAUTHORS            Conjunction.csv    Noun.adjv.csv      Noun.org.csv       Postp.csv          aclocal.m4         dicrc              pos-id.def\nAdj.csv            Filler.csv         Noun.adverbal.csv  Noun.others.csv    Prefix.csv         char.def           feature.def        rewrite.def\nAdnominal.csv      INSTALL            Noun.csv           Noun.place.csv     README             config.guess*      install-sh*        right-id.def\nAdverb.csv         Interjection.csv   Noun.demonst.csv   Noun.proper.csv    RESULT             config.log         left-id.def        unk.def\nAuxil.csv          Makefile.am        Noun.nai.csv       Noun.verbal.csv    Suffix.csv         config.sub*        matrix.def\nCOPYING            Makefile.in        Noun.name.csv      Others.csv         Symbol.csv         configure*         missing*\nChangeLog          NEWS               Noun.number.csv    Postp-col.csv      Verb.csv           configure.in       mkinstalldirs*\n\n\n\u3068\u308a\u3042\u3048\u305a\u5fc5\u8981\u306a\u306e\u306f csv \u30d5\u30a1\u30a4\u30eb\u3068\uff0cmatrix.def \u3067\u3059\uff0e\ncsv \u30d5\u30a1\u30a4\u30eb\u306f\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\uff0cmatrix.def \u306f\u5f62\u614b\u7d20\u306e\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\u3061\u306a\u307f\u306b unk.def \u306f\u3046\u3007\u3053\u3067\u306f\u306a\u304f\uff0cunknown \u3067\u672a\u77e5\u8a9e\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067\u3059\uff0e\n\n\u5f62\u614b\u7d20\u30ea\u30b9\u30c8\ncsv\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u54c1\u8a5e\u3067\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\u203b csv\u30d5\u30a1\u30a4\u30eb\u306f euc-jp \u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u4f55\u6c17\u306a\u304f\u8aad\u307f\u8fbc\u3080\u3068\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\uff0eeuc-jp \u306e csv\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044 \n\u2192 Go\u3067euc-jp\u3084sjis\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u5909\u63db\u7528\u306e\u30ea\u30fc\u30c0\u30fc\u30921\u3064\u304b\u307e\u305b\u308b\u3060\u3051\u3067\u3088\u304b\u3063\u305f\n\nVerb.csv\n\u5f15\u304d\u8fbc\u3080,762,762,7122,\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e94\u6bb5\u30fb\u30de\u884c,\u57fa\u672c\u5f62,\u5f15\u304d\u8fbc\u3080,\u30d2\u30ad\u30b3\u30e0,\u30d2\u30ad\u30b3\u30e0\n\n\n\u5185\u5bb9\u306f\uff0c\u5de6\u304b\u3089\uff0c\n\u8868\u5c64\u5f62,\u5de6\u6587\u8108ID,\u53f3\u6587\u8108ID,\u30b3\u30b9\u30c8,\u54c1\u8a5e,\u54c1\u8a5e\u7d30\u5206\u985e1,\u54c1\u8a5e\u7d30\u5206\u985e2,\u54c1\u8a5e\u7d30\u5206\u985e3,\u6d3b\u7528\u5f62,\u6d3b\u7528\u578b,\u539f\u5f62,\u8aad\u307f,\u767a\u97f3\n\n\u306e\u5f62\u5f0f\uff0e\u30e9\u30c6\u30a3\u30b9\u3092\u4f5c\u308b\u3068\u304d\u306b\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u306e\u306f\uff0c\u4e0a\u306e\n\n\u8868\u5c64\u5f62 \u2026 \u5f62\u614b\u7d20\u306e\u8868\u8a18\n\u5de6\u6587\u8108ID \u2026 \u30e9\u30c6\u30a3\u30b9\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306b\u5bfe\u5fdc\u3059\u308b\u54c1\u8a5eID\n\u53f3\u6587\u8108ID \u2026 \u30e9\u30c6\u30a3\u30b9\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306b\u5bfe\u5fdc\u3059\u308b\u54c1\u8a5eID\n\u30b3\u30b9\u30c8 \u2026 \u5358\u8a9e\u306e\u751f\u8d77\u30b3\u30b9\u30c8\n\n\u3060\u3051\u306a\u306e\u3067\uff0c\u3059\u304f\u306a\u304f\u3068\u3082\u3053\u308c\u3092\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\u8868\u5c64\u5f62\u3092 DoubleArray \u306b\u767b\u9332\u3057\u3066\uff0c\u5165\u529b\u6587\u5b57\u5217\u3092 CommonPrefixSearch \u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u3051\u3070\uff0c\u30e9\u30c6\u30a3\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u305f\u3060\uff0c\u8868\u5c64\u5f62\u304c\u540c\u3058\u5f62\u614b\u7d20\uff08\u54c1\u8a5e\u7570\u306a\u308a\u3068\u304b\uff09\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u9023\u63a5\u30b3\u30b9\u30c8\u8868\nmatrix.def \u306f\u5f62\u614b\u7d20\u306e\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e2d\u8eab\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067 (\u2605\u4ee5\u964d\u306f\u50d5\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u3059) \u884c\u5217\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\uff0e\n\u884c\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u6587\u8108ID\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\u30b3\u30b9\u30c8\u306f short int \u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0cgolang \u306a\u3089 int16 \u3067\u7ba1\u7406\u3059\u308c\u3070\u5341\u5206\u3067\u3059\uff0e\u4e00\u6b21\u5143\u306e\u914d\u5217\u30921316x1316\u3067\u7528\u610f\u3057\u3066\uff0c\u884c\u3068\u5217\u3067\u5f15\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u7ba1\u7406\u3057\u307e\u3059\uff0e\n\nmatrix.def\n1316 1316           \u2605 \u2190 1316x1316 \u306e\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\n0 0 -434            \u2605 \u2190 \u884c\u5217\u306e 0\u884c 0\u5217 \u306e\u9023\u63a5\u30b3\u30b9\u30c8\u304c -434 \u306e\u610f\u5473\n0 1 1\n0 2 -1630\n0 3 -1671\n0 4 24\n0 5 111\n0 6 -2752\n0 7 -589\n0 8 -589\n\u2026snip\n\n\n\n\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3059\u308b\npackage dic\n\ntype connectionTable struct {\n    rowSize, colSize int\n    vec []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            err = e.(error)\n        }\n    }()\n    pos := this.colSize*a_row + a_col\n    return this.vec[pos], nil\n}\n\n\n\n\u8f9e\u66f8\u3092\u3069\u3046\u3059\u308b\u306e\u304b\u554f\u984c\nkuromoji \u306e\u8f9e\u66f8\u3063\u3066\u3069\u3046\u306a\u3063\u3066\u308b\u3093\u3067\u3057\u305f\u3063\u3051\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u8abf\u67fb\uff0e\u62fe\u3063\u3066\u304d\u305f jar \u3092\u89e3\u51cd\u3057\u3066\u4e2d\u898b\u3066\u307f\u308b\uff0e\n\nkuromoji \u306e\u8f9e\u66f8\nkuromoji \u306e\u3088\u3044\u3068\u3053\u308d\u306f\uff0c\u8f9e\u66f8\u3092\u5185\u5305\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3068\u3053\u308d\uff0e\u8f9e\u66f8\u3092\u5185\u5305\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3068\uff0c\u5b9f\u884c\u7cfb\u3068\u8f9e\u66f8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u5408\u308f\u306a\u304f\u3066\u52d5\u304b\u306a\u3044\u3088\u30fc\u3068\u304b\u7121\u304f\u3066\u3044\u3044\u3057\uff0c\u7ba1\u7406\u3082\u697d\uff0e\u5411\u3053\u3046\u306e\u74b0\u5883\u304b\u3089\u6301\u3063\u3066\u304d\u305f\u8f9e\u66f8\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u9055\u3063\u3066\u52d5\u304b\u3093\u3068\u304b\u4e91\u3046\u3053\u3068\u3082\u306a\u3044\uff01\nkuromoji-0.7.7\n\u2502\n\u251c\u2500\u2500 META-INF\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 maven\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 org.atilika.kuromoji\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kuromoji\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 pom.properties\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 pom.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 MANIFEST.MF\n\u251c\u2500\u2500 org\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 atilika\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 kuromoji\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 dict\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CharacterDefinition$CharacterClass.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CharacterDefinition.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConnectionCosts.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dictionaries.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 UnknownDictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 UserDictionary.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 trie\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DoubleArrayTrie.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Trie$Node.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 Trie.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 util\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CSVUtil.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConnectionCostsBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DictionaryBuilder$DictionaryFormat.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DictionaryBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DoubleArrayTrieBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionaryBuilder$1.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionaryBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 UnknownDictionaryBuilder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 viterbi\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Viterbi$1.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Viterbi.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ViterbiFormatter.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ViterbiNode$Type.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 ViterbiNode.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 DebugTokenizer$Builder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 DebugTokenizer.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Token.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer$Builder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer$Mode.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer.class\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 TokenizerRunner.class\n\u251c\u2500\u2500 cc.dat\n\u251c\u2500\u2500 cd.dat\n\u251c\u2500\u2500 dat.dat\n\u251c\u2500\u2500 kuromoji-0.7.7.jar\n\u251c\u2500\u2500 tid.dat\n\u251c\u2500\u2500 tid_map.dat\n\u251c\u2500\u2500 unk.dat\n\u2514\u2500\u2500 unk_map.dat\n\n*.dat \u3068\u3044\u3046\u306e\u304c\u8f9e\u66f8\u95a2\u9023\u30c7\u30fc\u30bf\u3063\u307d\u3044\uff0e\n-rw-r--r--  1 3.3M  1 30  2012 cc.dat\n-rw-r--r--  1 321K  1 30  2012 cd.dat\n-rw-r--r--  1 17M  1 30  2012 dat.dat\n-rw-r--r--  1 28M  1 30  2012 tid.dat\n-rw-r--r--  1 6.3M  1 30  2012 tid_map.dat\n-rw-r--r--  1 1.7K  1 30  2012 unk.dat\n-rw-r--r--  1 325B  1 30  2012 unk_map.dat\n\n\u5168\u90e8\u5408\u308f\u305b\u3066\u8f9e\u66f8\u5bb9\u91cf\u306f55MB\u7a0b\u5ea6\u3068\u3044\u3046\u3068\u3053\u308d\uff0e\u7d50\u69cb\u5927\u304d\u3044\u3067\u3059\u306d\uff0e\n\ngolang \u3067\u3069\u3046\u3059\u308b\u304b\uff1f\ngolang \u3067\u3082\u8f9e\u66f8\u3092\u4e00\u7dd2\u306b\u914d\u5e03\u3057\u305f\u3044\u3093\u3067\u3059\u304c\uff0c\u3069\u3046\u3057\u305f\u3082\u3093\u3067\u3057\u3087\u3046\u304b\uff0egithub \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4e00\u7dd2\u306b\u5165\u308c\u3066\u304a\u3051\u3070\u3044\u3044\u3067\u3057\u3087\u3046\u304b\uff0e\u3067\u3082\uff0c\u305d\u308c\u3060\u3068\u7d50\u5c40\u8f9e\u66f8\u306e\u4f4d\u7f6e\u3092\u7ba1\u7406\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u30d0\u30a4\u30ca\u30ea\u3060\u3051\u3067\u304c\u3093\u3070\u308a\u305f\u3044\u3068\u3053\u308d\u3067\u3059\uff0e\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u82e6\u3057\u7d1b\u308c\u306b\u601d\u3044\u3064\u3044\u305f\u306e\u306f\uff0c \u8f9e\u66f8\u3092 golang \u306e\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4e00\u7dd2\u306b\u69cb\u7bc9\u3057\u3066\u30d0\u30a4\u30ca\u30ea\u306b\u542b\u3081\u3066\u3082\u3089\u304a\u3046\uff01 \u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\uff0e\n\n\u8f9e\u66f8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9a\u6570\u3068\u3057\u3066\u57cb\u3081\u8fbc\u3080\ngolang \u3067 Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3046\uff08\u3068\u3044\u3063\u3066\u3082Web\u30a2\u30d7\u30ea\u3068\u304b\u4f5c\u3063\u305f\u3053\u3068\u306a\u3044\u3051\u3069\uff09 http/template \u306e\u30c6\u30ad\u30b9\u30c8\u7248\uff0ctext/template \u3092\u5229\u7528\u3057\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3057\u3066\u7528\u610f\u3057\u305f\u3072\u306a\u5f62\u306b\u30c7\u30fc\u30bf\u3092\u57cb\u3081\u8fbc\u3080\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0e\u307e\u3055\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u3068\u4e91\u308f\u3093\u3070\u304b\u308a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff01\uff08\u9055\uff09\uff0e\u3053\u308c\u3092\u7528\u3044\u3066\uff0c\u5148\u306e\u9023\u63a5\u8868\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9a\u6570\u3068\u3057\u3066\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3044\u307e\u3059\uff0e\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\uff0esmarty \u307f\u305f\u3044\u306a\u3082\u306e\u304b\u3068\u601d\u3063\u3066\u307e\u3057\u305f\u304c\uff0csmarty \u307b\u3069\u4fbf\u5229\u3067\u306f\u306a\u3044\u306e\u3067\uff0c\u57cb\u3081\u8fbc\u3080\u30c7\u30fc\u30bf\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u6e21\u3059\u524d\u306b\u6587\u5b57\u5217\u3067\u307b\u307c\u307b\u307c\u6574\u5f62\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\nmatrix.def\u3092golang\u306e\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"strconv\"\n    \"strings\"\n    \"text/template\"\n)\n\ntype TemplateData struct {\n    RowSize, ColSize int\n    Matrix           []string\n}\n\nfunc loadMatrixDef(file *os.File) (rowSize, colSize int, matrix [][]int16, err error) {\n    scanner := bufio.NewScanner(file)\n    scanner.Scan()\n    line := scanner.Text()\n    dim := strings.Split(line, \" \")\n    if len(dim) != 2 {\n        err = fmt.Errorf(\"invalid format: %s\", line)\n        return\n    }\n    rowSize, err = strconv.Atoi(dim[0])\n    if err != nil {\n        err = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n        return\n    }\n    colSize, err = strconv.Atoi(dim[1])\n    if err != nil {\n        err = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n        return\n    }\n    // fmt.Printf(\"rowSize %d, ColSize %d\\n\", rowSize, colSize)\n    matrix = make([][]int16, rowSize)\n    for i := 0; i < colSize; i++ {\n        matrix[i] = make([]int16, colSize)\n    }\n    for scanner.Scan() {\n        line := scanner.Text()\n        ary := strings.Split(line, \" \")\n        if len(ary) != 3 {\n            err = fmt.Errorf(\"invalid format: %s\", line)\n            return\n        }\n        row, e := strconv.Atoi(ary[0])\n        if e != nil {\n            err = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n            return\n        }\n        col, e := strconv.Atoi(ary[1])\n        if e != nil {\n            err = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n            return\n        }\n        val, e := strconv.Atoi(ary[2])\n        if e != nil {\n            err = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n            return\n        }\n        matrix[row][col] = int16(val)\n    }\n    if err = scanner.Err(); err != nil {\n        err = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n        return\n    }\n    return\n}\n\nfunc main() {\n    var in *os.File\n    if len(os.Args) < 2 {\n        log.Fatal(\"no input file\")\n    }\n    in, err := os.Open(os.Args[1])\n    if err != nil {\n        log.Fatalf(\"cannot open file: %s\", err)\n    }\n    defer in.Close()\n    row, col, matrix, err := loadMatrixDef(in)\n    if err != nil {\n        log.Fatalf(\"matrix converter: %s\", err)\n    }\n    data := TemplateData{RowSize: row, ColSize: col}\n    data.Matrix = make([]string, row)\n    for i := 0; i < row; i++ {\n        data.Matrix[i] = \"\"\n        for j := 0; j < col; j++ {\n            val := strconv.Itoa(int(matrix[i][j]))\n            data.Matrix[i] += fmt.Sprintf(\"%5s,\", val)\n            if (i*row+j+1)%20 == 0 {\n                data.Matrix[i] += \"\\n\"\n            }\n        }\n    }\n\n    out, err := os.OpenFile(\"../connection.go\", os.O_RDWR|os.O_TRUNC|os.O_CREATE, 0666)\n    if err != nil {\n        log.Fatalf(\"matrix converter: %s\", err)\n    }\n    defer out.Close()\n    tpl := template.Must(template.ParseFiles(\"matrix.tpl\"))\n    tpl.Execute(out, data)\n}\n\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\npackage dic\n\ntype connectionTable struct {\n    rowSize, colSize int\n    vec []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            err = e.(error)\n        }\n    }()\n    pos := this.colSize*a_row + a_col\n    return this.vec[pos], nil\n}\n\nvar Connection *connectionTable = &connectionTable {\n    rowSize: {{.RowSize}},\n    colSize: {{.ColSize}},\n    vec:     []int16{\n{{range $key, $line := .Matrix}}{{$line}}{{end}}     // \u2190 \u3053\u3053\u306b matrix.def \u306e\u5024\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\n             },\n}\n\n\n\u751f\u6210\u3055\u308c\u305f\u9023\u63a5\u30b3\u30b9\u30c8\u8868\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u751f\u6210\u3055\u308c\u305f\u9023\u63a5\u30b3\u30b9\u30c8\u8868\u306e\u30b3\u30fc\u30c9\npackage dic\n\ntype connectionTable struct {\n    rowSize, colSize int\n    vec              []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            err = e.(error)\n        }\n    }()\n    pos := this.colSize*a_row + a_col\n    return this.vec[pos], nil\n}\n\nvar Connection *connectionTable = &connectionTable{\n    rowSize: 1316,\n    colSize: 1316,\n    vec: []int16{\n        -434, 1, -1630, -1671, 24, 111, -2752, -589, -589, -294, -155, 475, 945, -467, -155, -461, -148, -461, -148, -2409,\n        -3230, -558, -246, -510, -198, -461, -148, -462, -150, -461, -149, -114, 197, -590, -278, 27, 1003, -1205, 30, -351,\n        -62, -59, -59, -800, -131, 609, -59, -60, -59, 113, -127, 213, -903, 478, 478, 504, 70, 70, 96, 72,\n        72, 99, 72, 72, 99, -552, -552, -526, 40, 40, 66, 92, 92, 118, 72, 72, 99, 72, 72, 98,\n// \u2026snip\n        66, 66, 66, 66, 124, 124, 124, 124, 61, 61, 61, 61, 87, 87, 87, 87, 61, 61, 61, 61,\n        78, 78, 78, 78, -192, -192, -192, -192, 114, 114, 114, 114, 217, 217, 217, 217, 79, 79, 79, 79,\n        132, 132, 132, 132, 100, 100, 100, 100, 91, 91, 91, 91, -166, -166, -166, -166, 101, 199, 125, 87,\n        -192, 130, -61, -1401, -939, -1154, -911, -1265, -287, -934, -605, -614, -344, 62, 446, 61, -902, 792, 1436, 754,\n        1123, 758, 752, 853, 810, 1147, -775, -843, -911, -889, -3785, -3261, -3209, -4369, -1712, -129,\n    },\n}\n\n\n\n\u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5927\u304d\u3055\n\n\n\n\u7a2e\u985e\n\u5143\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\n\u5909\u63db\u3055\u308c\u305fgolang\u30b3\u30fc\u30c9\n\n\n\n\n\u9023\u63a5\u8868\n22MB\n10MB\n\n\n\u5f62\u614b\u7d20\u30ea\u30b9\u30c8\n33MB\n74MB (DoubleArray\u542b\u3080)\n\n\n\n\u5909\u63db\u3057\u305f\u30b3\u30fc\u30c9\u304c\u7d50\u69cb\u5927\u304d\u304b\u3063\u305f\u306e\u3067\uff0c\u30c9\u30ad\u30c9\u30ad\u3057\u306a\u304c\u3089\u30d3\u30eb\u30c9\u30fb\u30fb\u30fb\u30fb\u30fb \uff08\u8d85\u91cd\u3044\uff0c\u30e1\u30e2\u30ea\u8d85\u55b0\u3046\uff09\u30fb\u30fb\u30fb\u30fb\u901a\u308a\u307e\u3057\u305f\uff0e\n\u9023\u63a5\u8868\u3068\u5f62\u614b\u7d20\u30ea\u30b9\u30c8\u95a2\u9023\u306e\u30b3\u30fc\u30c9\u304c dic \u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u30661\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u3066\uff0c\u305d\u306e\u30b5\u30a4\u30ba\u306f\uff0c\n\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea(.a)\n\u30b5\u30a4\u30ba\n\n\n\n\ndic.a\n232MB\n\n\n\n232MB! \u3067\u304b\u3044 orz\uff0e\u3067\u3082\u307e\u3060\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3057\u306d\u30fb\u30fb\u30fb\uff0e\n\n\u89e3\u6790\u90e8\u5206\u3092\u4f5c\u308b\n\u8f9e\u66f8\u304c\u51fa\u6765\u3066\uff0c\u3053\u3053\u307e\u3067\u6765\u308c\u3070\u307b\u307c\u3067\u304d\u3042\u304c\u3063\u305f\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff0e\n\u30e9\u30c6\u30a3\u30b9\u3092\u69cb\u7bc9\u3057\uff0cViterbi \u3067\u63a2\u7d22\u3057\u307e\u3059\uff0e\u30e9\u30c6\u30a3\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u30e9\u30c6\u30a3\u30b9\u306e\u69cb\u7bc9\u3068Viterbi\u3067\u306e\u691c\u7d22\npackage tokenizer\n\nimport (\n    \"github.com/ikawaha/tokenizer/dic\"\n\n    \"fmt\"\n    \"unicode/utf8\"\n)\n\nconst (\n    _INTMAX = 1<<31-1\n)\n\ntype Lattice struct {\n    input  []rune\n    list   [][]Node\n    output []*Node\n}\n\nfunc (this *Lattice) build(a_input string) {\n    runes := []rune(a_input)\n    this.input = runes\n    this.list = make([][]Node, len(runes)+2)\n\n    this.list[0] = append(this.list[0], Node{id: BOSEOS, class: KNOWN, start: 0})\n    this.list[len(this.list)-1] = append(this.list[len(this.list)-1], Node{id: BOSEOS, class: KNOWN, start: len(this.list) - 2})\n\n    for i, _ := range runes {\n        prefixs, ids := dic.Index.CommonPrefixSearch(string(runes[i:]))\n        for key, substr := range prefixs {\n            id := ids[key]\n            dup := dic.Counts[id]\n            if dup == 0 {\n                dup = 1\n            }\n            for x := 0; x < dup; x++ {\n                cost := dic.Costs[id+x]\n                p := i + utf8.RuneCountInString(substr)\n                surface := this.input[i:p]\n                node := Node{\n                    id:      id + x,\n                    start:   i,\n                    cost:    0,\n                    class:   KNOWN,\n                    left:    int32(cost.Left),\n                    right:   int32(cost.Right),\n                    weight:  int32(cost.Weight),\n                    surface: surface,\n                }\n                this.list[p] = append(this.list[p], node)\n            }\n        }\n    }\n}\n\nfunc (this *Lattice) String() string {\n    str := \"\"\n    for i, nodes := range this.list {\n        str += fmt.Sprintf(\"[%v] :\\n\", i)\n        for _, node := range nodes {\n            str += fmt.Sprintf(\"%v\\n\", node)\n        }\n        str += \"\\n\"\n    }\n    return str\n}\n\nfunc (this *Lattice) forward() (err error) {\n    for i, size := 1, len(this.list); i < size; i++ {\n        currentList := this.list[i]\n        for index, target := range currentList {\n            prevList := this.list[target.start]\n            if len(prevList) == 0 {\n                this.list[i][index].cost = _INTMAX\n                continue\n            }\n            for j, n := range prevList {\n                var c int16\n                c, err = dic.Connection.At(int(n.right), int(target.left))\n                if err != nil {\n                    return\n                }\n                totalCost := int32(c) + int32(target.weight) + n.cost\n                if j == 0 || totalCost < this.list[i][index].cost {\n                    this.list[i][index].cost = totalCost\n                    this.list[i][index].prev = &this.list[target.start][j]\n                }\n            }\n        }\n    }\n    return\n}\n\nfunc (this *Lattice) backward() {\n    size := len(this.list)\n    stack := make([]*Node, 0, size)\n    p := &this.list[size-1][0]\n\n    stack = append(stack, p)\n    for p != nil {\n        stack = append(stack, p)\n        p = p.prev\n    }\n\n    this.output = make([]*Node, 0, len(stack))\n    for i := len(stack) - 1; i > 0; i-- {\n        this.output = append(this.output, stack[i])\n    }\n}\n\n\n\n\u5b9f\u884c\n\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u610f\u3057\u3066\uff0c\u6a19\u6e96\u5165\u529b\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u30921\u6587\u3068\u3057\u3066\u89e3\u6790\u3057\u307e\u3059\uff0e\n\uff03 net/http/pprof \u3092\u5165\u308c\u3066\u304a\u304f\u3068\u30e1\u30e2\u30ea\u306e\u76e3\u8996\u3068\u304b\u51fa\u6765\u3066\u4fbf\u5229\u3067\u3059\uff0e\n\nmain\npackage main\n\nimport (\n    \"github.com/ikawaha/tokenizer\"\n\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    _ \"net/http/pprof\"\n    \"net/http\"\n    \"os\"\n)\n\nfunc main() {\n\n    go func() {\n        log.Println(http.ListenAndServe(\"localhost:6060\", nil)) // \u2605 \u2190 \u3053\u308c\u5165\u308c\u3066\u304a\u304f\u3068\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3068\u304b\u3092\u76e3\u8996\u3067\u304d\u3066\u4fbf\u5229\n    }()\n\n    var fp *os.File\n    if len(os.Args) < 2 {\n        fp = os.Stdin\n    } else {\n        fp, err := os.Open(os.Args[1])\n        if err != nil {\n            panic(err)\n        }\n        defer fp.Close()\n    }\n\n    scanner := bufio.NewScanner(fp)\n    for scanner.Scan() {\n        line := scanner.Text()\n        morphs, err := tokenizer.Tokenize(line)\n        if err != nil {\n            log.Println(err)\n        }\n        for i, m := range morphs {\n            content, e := m.Content()\n            if e != nil {\n                log.Println(e)\n            }\n            fmt.Printf(\"%2d: %v(%v, %v)\\t%v\\n\", i, m.Surface, m.Start, m.End, content)\n        }\n    }\n    if err := scanner.Err(); err != nil {\n        log.Println(err)\n    }\n}\n\n\n\n\u3084\u3063\u305f\u30fc\uff3c(^o^)\uff0f   \u6700\u7d42\u7684\u306a\u30d0\u30a4\u30ca\u30ea\u306e\u30b5\u30a4\u30ba\u306f 105MB\uff0e\u30d0\u30a4\u30ca\u30ea\u304c\u5927\u304d\u304f\u306a\u308a\u304c\u3061\u306a golang \u306b\u3057\u3066\u306f\u4e0a\u51fa\u6765\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b(?!)\n\n\u554f\u984c\u70b9\n\u672a\u77e5\u8a9e\u306e\u51e6\u7406\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u30e9\u30c6\u30a3\u30b9\u304c\u672b\u5c3e\u304b\u3089\u5148\u982d\u307e\u3067\u8fbf\u308c\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u30c8\u30c8\u30ed\u304c\u8f9e\u66f8\u306b\u306a\u3044\u306e\u3067\uff0c\u305d\u3053\u306e\u9023\u7d50\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u3046\u3057\u306a\u3044\u305f\u3081\u306b\u306f\uff0c\u8f9e\u66f8\u5f15\u3051\u306a\u304b\u3063\u305f\u3068\u304d\u306b\uff0c\u3042\u308b\u9069\u5f53\u306a\u7bc4\u56f2\uff08\u305f\u3068\u3048\u3070\u30ab\u30bf\u30ab\u30ca\u9023\u7d9a\u90e8\u5206\u3068\u304b\uff09\u3092\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3068\u3057\u3066\u30e9\u30c6\u30a3\u30b9\u306b\u8ffd\u52a0\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u6b21\u56de\u306f\u672a\u77e5\u8a9e\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u3042\u3068\uff0ckuromoji \u306e\u691c\u7d22\u30e2\u30fc\u30c9\u306e\u5bfe\u5fdc\u3068\u304b\uff0e\uff08\u3064\u3065\u304f\u30fb\u30fb\u30fb\u30fb\u306e\u304b\uff1f\uff09\n\u3064\u3065\u304d\uff1a(\uff12)\u672a\u77e5\u8a9e\u51e6\u7406\u7de8\n\n# \u306f\u3058\u3081\u306b\nDoubleArray \u3092\u4f5c\u3063\u305f\u3053\u3068\u3082\u3042\u3063\u3066\uff0c\u3064\u3044\u3067\u306b\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3082\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u7acb\u3061 [kuromoji](http://www.atilika.org/) \u3092\u53c2\u8003\u306b\u5f62\u614b\u7d20\u89e3\u6790\u5668\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\u76ee\u6a19\u3068\u3057\u3066\u306f\uff0cPure Go \u3067 kuromoji \u307f\u305f\u3044\u306a\u611f\u3058\uff08\u8f9e\u66f8\u5185\u5305\uff0c\u691c\u7d22\u30e2\u30fc\u30c9\u3042\u308a\uff0c\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\uff09\u3092\u76ee\u6307\u3057\u307e\u3059\uff0e\n\n![tokenize_sample.png](https://qiita-image-store.s3.amazonaws.com/0/44487/6a8f5fec-b924-5b80-814a-c21ccfb740fb.png)\n\n# \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\nhttps://github.com/ikawaha/kagome\n\n# \u53c2\u8003\n\n\u4e0b\u8a18\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\n\n* [kuromoji](http://www.atilika.org/)\n* [\u65e5\u672c\u8a9e\u5165\u529b\u3092\u652f\u3048\u308b\u6280\u8853](http://www.amazon.co.jp/gp/product/4774149934/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774149934&linkCode=as2&tag=foxii-22)\n* [Mecab](http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html)\n\t* [\u54c1\u8a5eID\u306e\u5b9a\u7fa9](http://mecab.googlecode.com/svn/trunk/mecab/doc/posid.html)\n\n# \u5f62\u614b\u7d20\u89e3\u6790\u306e\u3061\u3087\u30fc\u9069\u5f53\u306a\u8aac\u660e\n\u300c\u5f62\u614b\u7d20\u300d\u304c\u4f55\u3067\u3042\u308b\u304b\u3092\u8b70\u8ad6\u3057\u51fa\u3059\u3068\u9762\u5012\u306a\u3053\u3068\u306b\u5dfb\u304d\u8fbc\u307e\u308c\u305d\u3046\u306a\u306e\u3067\uff0c\u3053\u3053\u3067\u306f MeCab-IPADIC \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\uff0e\u5f62\u614b\u7d20\u89e3\u6790\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u4e0b\u8a18\u306e\u8cc7\u6599\u306a\u3069\u3092\u3042\u305f\u3063\u3066\u304f\u3060\u3055\u3044\uff0e\n\n* [\u65e5\u672c\u8a9e\u5165\u529b\u3092\u652f\u3048\u308b\u6280\u8853](http://www.amazon.co.jp/gp/product/4774149934/ref=as_li_ss_tl?ie=UTF8&camp=247&creative=7399&creativeASIN=4774149934&linkCode=as2&tag=foxii-22)\n* [\u65e5\u672c\u8a9e\u89e3\u6790\u30c4\u30fc\u30eb MeCab, CaboCha \u306e\u7d39\u4ecb](http://chasen.naist.jp/chaki/t/2009-09-30/doc/mecab-cabocha-nlp-seminar-2009.pdf)\n\n# \u7528\u610f\u3059\u308b\u3082\u306e\n\n* DoubleArray #[\u524d\u306b\u4f5c\u3063\u305f\u3082\u306e](http://qiita.com/ikawaha/items/f9e8b6ad2cae1eb593f7)\u3092 id \u304c\u8a18\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u3061\u3087\u3063\u3068\u6539\u9020\n* \u5b66\u7fd2\u6e08\u307f\u306e\u5f62\u614b\u7d20\u89e3\u6790\u30e2\u30c7\u30eb [MeCab-IPADIC](https://code.google.com/p/mecab/downloads/detail?name=mecab-ipadic-2.7.0-20070801.tar.gz)\n\n# MeCab-IPADIC \u306e\u4e2d\u8eab\u3092\u306e\u305e\u3044\u3066\u898b\u3066\u307f\u308b\n\u5185\u5bb9\u7269\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f (mecab-ipadic-2.7.0-20070801)\n\n```mecab-ipadic-2.7.0-20070801\nAUTHORS            Conjunction.csv    Noun.adjv.csv      Noun.org.csv       Postp.csv          aclocal.m4         dicrc              pos-id.def\nAdj.csv            Filler.csv         Noun.adverbal.csv  Noun.others.csv    Prefix.csv         char.def           feature.def        rewrite.def\nAdnominal.csv      INSTALL            Noun.csv           Noun.place.csv     README             config.guess*      install-sh*        right-id.def\nAdverb.csv         Interjection.csv   Noun.demonst.csv   Noun.proper.csv    RESULT             config.log         left-id.def        unk.def\nAuxil.csv          Makefile.am        Noun.nai.csv       Noun.verbal.csv    Suffix.csv         config.sub*        matrix.def\nCOPYING            Makefile.in        Noun.name.csv      Others.csv         Symbol.csv         configure*         missing*\nChangeLog          NEWS               Noun.number.csv    Postp-col.csv      Verb.csv           configure.in       mkinstalldirs*\n```\n\n\u3068\u308a\u3042\u3048\u305a\u5fc5\u8981\u306a\u306e\u306f csv \u30d5\u30a1\u30a4\u30eb\u3068\uff0cmatrix.def \u3067\u3059\uff0e\ncsv \u30d5\u30a1\u30a4\u30eb\u306f\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\uff0cmatrix.def \u306f\u5f62\u614b\u7d20\u306e\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\u3061\u306a\u307f\u306b unk.def \u306f\u3046\u3007\u3053\u3067\u306f\u306a\u304f\uff0cunknown \u3067\u672a\u77e5\u8a9e\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067\u3059\uff0e\n\n## \u5f62\u614b\u7d20\u30ea\u30b9\u30c8\ncsv\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u54c1\u8a5e\u3067\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n\n\u203b csv\u30d5\u30a1\u30a4\u30eb\u306f **euc-jp** \u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u4f55\u6c17\u306a\u304f\u8aad\u307f\u8fbc\u3080\u3068\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\uff0eeuc-jp \u306e csv\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044 \n\u2192 [Go\u3067euc-jp\u3084sjis\u306ecsv\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u5909\u63db\u7528\u306e\u30ea\u30fc\u30c0\u30fc\u30921\u3064\u304b\u307e\u305b\u308b\u3060\u3051\u3067\u3088\u304b\u3063\u305f](http://qiita.com/ikawaha/items/540c2af34b1c381c37c1)\n\n```Verb.csv\n\u5f15\u304d\u8fbc\u3080,762,762,7122,\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e94\u6bb5\u30fb\u30de\u884c,\u57fa\u672c\u5f62,\u5f15\u304d\u8fbc\u3080,\u30d2\u30ad\u30b3\u30e0,\u30d2\u30ad\u30b3\u30e0\n```\n\n\u5185\u5bb9\u306f\uff0c\u5de6\u304b\u3089\uff0c\n\n```\n\u8868\u5c64\u5f62,\u5de6\u6587\u8108ID,\u53f3\u6587\u8108ID,\u30b3\u30b9\u30c8,\u54c1\u8a5e,\u54c1\u8a5e\u7d30\u5206\u985e1,\u54c1\u8a5e\u7d30\u5206\u985e2,\u54c1\u8a5e\u7d30\u5206\u985e3,\u6d3b\u7528\u5f62,\u6d3b\u7528\u578b,\u539f\u5f62,\u8aad\u307f,\u767a\u97f3\n```\n\n\u306e\u5f62\u5f0f\uff0e\u30e9\u30c6\u30a3\u30b9\u3092\u4f5c\u308b\u3068\u304d\u306b\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u306e\u306f\uff0c\u4e0a\u306e\n\n* \u8868\u5c64\u5f62 \u2026 \u5f62\u614b\u7d20\u306e\u8868\u8a18\n* \u5de6\u6587\u8108ID \u2026 \u30e9\u30c6\u30a3\u30b9\u30ce\u30fc\u30c9\u306e\u5de6\u5074\u306b\u5bfe\u5fdc\u3059\u308b\u54c1\u8a5eID\n* \u53f3\u6587\u8108ID \u2026 \u30e9\u30c6\u30a3\u30b9\u30ce\u30fc\u30c9\u306e\u53f3\u5074\u306b\u5bfe\u5fdc\u3059\u308b\u54c1\u8a5eID\n* \u30b3\u30b9\u30c8 \u2026 \u5358\u8a9e\u306e\u751f\u8d77\u30b3\u30b9\u30c8\n\n\u3060\u3051\u306a\u306e\u3067\uff0c\u3059\u304f\u306a\u304f\u3068\u3082\u3053\u308c\u3092\u7ba1\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\u8868\u5c64\u5f62\u3092 DoubleArray \u306b\u767b\u9332\u3057\u3066\uff0c\u5165\u529b\u6587\u5b57\u5217\u3092 CommonPrefixSearch \u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u3051\u3070\uff0c\u30e9\u30c6\u30a3\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u305f\u3060\uff0c\u8868\u5c64\u5f62\u304c\u540c\u3058\u5f62\u614b\u7d20\uff08\u54c1\u8a5e\u7570\u306a\u308a\u3068\u304b\uff09\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n## \u9023\u63a5\u30b3\u30b9\u30c8\u8868\nmatrix.def \u306f\u5f62\u614b\u7d20\u306e\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4e2d\u8eab\u3092\u898b\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067 (\u2605\u4ee5\u964d\u306f\u50d5\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u3059) \u884c\u5217\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\uff0e\n\u884c\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u6587\u8108ID\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\u30b3\u30b9\u30c8\u306f `short int` \u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0cgolang \u306a\u3089 int16 \u3067\u7ba1\u7406\u3059\u308c\u3070\u5341\u5206\u3067\u3059\uff0e\u4e00\u6b21\u5143\u306e\u914d\u5217\u30921316x1316\u3067\u7528\u610f\u3057\u3066\uff0c\u884c\u3068\u5217\u3067\u5f15\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u7ba1\u7406\u3057\u307e\u3059\uff0e\n\n```matrix.def\n1316 1316           \u2605 \u2190 1316x1316 \u306e\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u5ba3\u8a00\n0 0 -434            \u2605 \u2190 \u884c\u5217\u306e 0\u884c 0\u5217 \u306e\u9023\u63a5\u30b3\u30b9\u30c8\u304c -434 \u306e\u610f\u5473\n0 1 1\n0 2 -1630\n0 3 -1671\n0 4 24\n0 5 111\n0 6 -2752\n0 7 -589\n0 8 -589\n\u2026snip\n```\n```go:\u9023\u63a5\u30b3\u30b9\u30c8\u3092\u7ba1\u7406\u3059\u308b\npackage dic\n\ntype connectionTable struct {\n    rowSize, colSize int\n    vec []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            err = e.(error)\n        }\n    }()\n    pos := this.colSize*a_row + a_col\n    return this.vec[pos], nil\n}\n```\n\n\n# \u8f9e\u66f8\u3092\u3069\u3046\u3059\u308b\u306e\u304b\u554f\u984c\nkuromoji \u306e\u8f9e\u66f8\u3063\u3066\u3069\u3046\u306a\u3063\u3066\u308b\u3093\u3067\u3057\u305f\u3063\u3051\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u8abf\u67fb\uff0e\u62fe\u3063\u3066\u304d\u305f jar \u3092\u89e3\u51cd\u3057\u3066\u4e2d\u898b\u3066\u307f\u308b\uff0e\n\n# kuromoji \u306e\u8f9e\u66f8\n\nkuromoji \u306e\u3088\u3044\u3068\u3053\u308d\u306f\uff0c\u8f9e\u66f8\u3092\u5185\u5305\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3068\u3053\u308d\uff0e\u8f9e\u66f8\u3092\u5185\u5305\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3068\uff0c\u5b9f\u884c\u7cfb\u3068\u8f9e\u66f8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u5408\u308f\u306a\u304f\u3066\u52d5\u304b\u306a\u3044\u3088\u30fc\u3068\u304b\u7121\u304f\u3066\u3044\u3044\u3057\uff0c\u7ba1\u7406\u3082\u697d\uff0e\u5411\u3053\u3046\u306e\u74b0\u5883\u304b\u3089\u6301\u3063\u3066\u304d\u305f\u8f9e\u66f8\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u9055\u3063\u3066\u52d5\u304b\u3093\u3068\u304b\u4e91\u3046\u3053\u3068\u3082\u306a\u3044\uff01\n\n```\nkuromoji-0.7.7\n\u2502\n\u251c\u2500\u2500 META-INF\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 maven\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 org.atilika.kuromoji\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kuromoji\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 pom.properties\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 pom.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 MANIFEST.MF\n\u251c\u2500\u2500 org\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 atilika\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 kuromoji\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 dict\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CharacterDefinition$CharacterClass.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CharacterDefinition.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConnectionCosts.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dictionaries.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 UnknownDictionary.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 UserDictionary.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 trie\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DoubleArrayTrie.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Trie$Node.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 Trie.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 util\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 CSVUtil.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ConnectionCostsBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DictionaryBuilder$DictionaryFormat.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DictionaryBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 DoubleArrayTrieBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionaryBuilder$1.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 TokenInfoDictionaryBuilder.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 UnknownDictionaryBuilder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 viterbi\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Viterbi$1.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 Viterbi.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ViterbiFormatter.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 ViterbiNode$Type.class\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 ViterbiNode.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 DebugTokenizer$Builder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 DebugTokenizer.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Token.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer$Builder.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer$Mode.class\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 Tokenizer.class\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 TokenizerRunner.class\n\u251c\u2500\u2500 cc.dat\n\u251c\u2500\u2500 cd.dat\n\u251c\u2500\u2500 dat.dat\n\u251c\u2500\u2500 kuromoji-0.7.7.jar\n\u251c\u2500\u2500 tid.dat\n\u251c\u2500\u2500 tid_map.dat\n\u251c\u2500\u2500 unk.dat\n\u2514\u2500\u2500 unk_map.dat\n```\n\n*.dat \u3068\u3044\u3046\u306e\u304c\u8f9e\u66f8\u95a2\u9023\u30c7\u30fc\u30bf\u3063\u307d\u3044\uff0e\n\n```\n-rw-r--r--  1 3.3M  1 30  2012 cc.dat\n-rw-r--r--  1 321K  1 30  2012 cd.dat\n-rw-r--r--  1 17M  1 30  2012 dat.dat\n-rw-r--r--  1 28M  1 30  2012 tid.dat\n-rw-r--r--  1 6.3M  1 30  2012 tid_map.dat\n-rw-r--r--  1 1.7K  1 30  2012 unk.dat\n-rw-r--r--  1 325B  1 30  2012 unk_map.dat\n```\n\n\u5168\u90e8\u5408\u308f\u305b\u3066\u8f9e\u66f8\u5bb9\u91cf\u306f55MB\u7a0b\u5ea6\u3068\u3044\u3046\u3068\u3053\u308d\uff0e\u7d50\u69cb\u5927\u304d\u3044\u3067\u3059\u306d\uff0e\n\n# golang \u3067\u3069\u3046\u3059\u308b\u304b\uff1f\n\ngolang \u3067\u3082\u8f9e\u66f8\u3092\u4e00\u7dd2\u306b\u914d\u5e03\u3057\u305f\u3044\u3093\u3067\u3059\u304c\uff0c\u3069\u3046\u3057\u305f\u3082\u3093\u3067\u3057\u3087\u3046\u304b\uff0egithub \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4e00\u7dd2\u306b\u5165\u308c\u3066\u304a\u3051\u3070\u3044\u3044\u3067\u3057\u3087\u3046\u304b\uff0e\u3067\u3082\uff0c\u305d\u308c\u3060\u3068\u7d50\u5c40\u8f9e\u66f8\u306e\u4f4d\u7f6e\u3092\u7ba1\u7406\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u30d0\u30a4\u30ca\u30ea\u3060\u3051\u3067\u304c\u3093\u3070\u308a\u305f\u3044\u3068\u3053\u308d\u3067\u3059\uff0e\n\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u82e6\u3057\u7d1b\u308c\u306b\u601d\u3044\u3064\u3044\u305f\u306e\u306f\uff0c **\u8f9e\u66f8\u3092 golang \u306e\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4e00\u7dd2\u306b\u69cb\u7bc9\u3057\u3066\u30d0\u30a4\u30ca\u30ea\u306b\u542b\u3081\u3066\u3082\u3089\u304a\u3046\uff01** \u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\uff0e\n\n## \u8f9e\u66f8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9a\u6570\u3068\u3057\u3066\u57cb\u3081\u8fbc\u3080\n\ngolang \u3067 Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3046\uff08\u3068\u3044\u3063\u3066\u3082Web\u30a2\u30d7\u30ea\u3068\u304b\u4f5c\u3063\u305f\u3053\u3068\u306a\u3044\u3051\u3069\uff09 `http/template` \u306e\u30c6\u30ad\u30b9\u30c8\u7248\uff0c`text/template` \u3092\u5229\u7528\u3057\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3057\u3066\u7528\u610f\u3057\u305f\u3072\u306a\u5f62\u306b\u30c7\u30fc\u30bf\u3092\u57cb\u3081\u8fbc\u3080\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\uff0e\u307e\u3055\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u3068\u4e91\u308f\u3093\u3070\u304b\u308a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff01\uff08\u9055\uff09\uff0e\u3053\u308c\u3092\u7528\u3044\u3066\uff0c\u5148\u306e\u9023\u63a5\u8868\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9a\u6570\u3068\u3057\u3066\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3044\u307e\u3059\uff0e\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3044\u307e\u3059\uff0esmarty \u307f\u305f\u3044\u306a\u3082\u306e\u304b\u3068\u601d\u3063\u3066\u307e\u3057\u305f\u304c\uff0csmarty \u307b\u3069\u4fbf\u5229\u3067\u306f\u306a\u3044\u306e\u3067\uff0c\u57cb\u3081\u8fbc\u3080\u30c7\u30fc\u30bf\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u6e21\u3059\u524d\u306b\u6587\u5b57\u5217\u3067\u307b\u307c\u307b\u307c\u6574\u5f62\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n```go:matrix.def\u3092golang\u306e\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"text/template\"\n)\n\ntype TemplateData struct {\n\tRowSize, ColSize int\n\tMatrix           []string\n}\n\nfunc loadMatrixDef(file *os.File) (rowSize, colSize int, matrix [][]int16, err error) {\n\tscanner := bufio.NewScanner(file)\n\tscanner.Scan()\n\tline := scanner.Text()\n\tdim := strings.Split(line, \" \")\n\tif len(dim) != 2 {\n\t\terr = fmt.Errorf(\"invalid format: %s\", line)\n\t\treturn\n\t}\n\trowSize, err = strconv.Atoi(dim[0])\n\tif err != nil {\n\t\terr = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n\t\treturn\n\t}\n\tcolSize, err = strconv.Atoi(dim[1])\n\tif err != nil {\n\t\terr = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n\t\treturn\n\t}\n\t// fmt.Printf(\"rowSize %d, ColSize %d\\n\", rowSize, colSize)\n\tmatrix = make([][]int16, rowSize)\n\tfor i := 0; i < colSize; i++ {\n\t\tmatrix[i] = make([]int16, colSize)\n\t}\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tary := strings.Split(line, \" \")\n\t\tif len(ary) != 3 {\n\t\t\terr = fmt.Errorf(\"invalid format: %s\", line)\n\t\t\treturn\n\t\t}\n\t\trow, e := strconv.Atoi(ary[0])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n\t\t\treturn\n\t\t}\n\t\tcol, e := strconv.Atoi(ary[1])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n\t\t\treturn\n\t\t}\n\t\tval, e := strconv.Atoi(ary[2])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"invalid format: %s, %s\", e, line)\n\t\t\treturn\n\t\t}\n\t\tmatrix[row][col] = int16(val)\n\t}\n\tif err = scanner.Err(); err != nil {\n\t\terr = fmt.Errorf(\"invalid format: %s, %s\", err, line)\n\t\treturn\n\t}\n\treturn\n}\n\nfunc main() {\n\tvar in *os.File\n\tif len(os.Args) < 2 {\n\t\tlog.Fatal(\"no input file\")\n\t}\n\tin, err := os.Open(os.Args[1])\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot open file: %s\", err)\n\t}\n\tdefer in.Close()\n\trow, col, matrix, err := loadMatrixDef(in)\n\tif err != nil {\n\t\tlog.Fatalf(\"matrix converter: %s\", err)\n\t}\n\tdata := TemplateData{RowSize: row, ColSize: col}\n\tdata.Matrix = make([]string, row)\n\tfor i := 0; i < row; i++ {\n\t\tdata.Matrix[i] = \"\"\n\t\tfor j := 0; j < col; j++ {\n\t\t\tval := strconv.Itoa(int(matrix[i][j]))\n\t\t\tdata.Matrix[i] += fmt.Sprintf(\"%5s,\", val)\n\t\t\tif (i*row+j+1)%20 == 0 {\n\t\t\t\tdata.Matrix[i] += \"\\n\"\n\t\t\t}\n\t\t}\n\t}\n\n\tout, err := os.OpenFile(\"../connection.go\", os.O_RDWR|os.O_TRUNC|os.O_CREATE, 0666)\n\tif err != nil {\n\t\tlog.Fatalf(\"matrix converter: %s\", err)\n\t}\n\tdefer out.Close()\n\ttpl := template.Must(template.ParseFiles(\"matrix.tpl\"))\n\ttpl.Execute(out, data)\n}\n```\n\n```go:\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\npackage dic\n\ntype connectionTable struct {\n    rowSize, colSize int\n    vec []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n    defer func() {\n        if e := recover(); e != nil {\n            err = e.(error)\n        }\n    }()\n    pos := this.colSize*a_row + a_col\n    return this.vec[pos], nil\n}\n\nvar Connection *connectionTable = &connectionTable {\n    rowSize: {{.RowSize}},\n    colSize: {{.ColSize}},\n    vec:     []int16{\n{{range $key, $line := .Matrix}}{{$line}}{{end}}     // \u2190 \u3053\u3053\u306b matrix.def \u306e\u5024\u3092\u57cb\u3081\u8fbc\u307f\u307e\u3059\n             },\n}\n```\n\n\u751f\u6210\u3055\u308c\u305f\u9023\u63a5\u30b3\u30b9\u30c8\u8868\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```go:\u751f\u6210\u3055\u308c\u305f\u9023\u63a5\u30b3\u30b9\u30c8\u8868\u306e\u30b3\u30fc\u30c9\npackage dic\n\ntype connectionTable struct {\n\trowSize, colSize int\n\tvec              []int16\n}\n\nfunc (this *connectionTable) At(a_row, a_col int) (cost int16, err error) {\n\tdefer func() {\n\t\tif e := recover(); e != nil {\n\t\t\terr = e.(error)\n\t\t}\n\t}()\n\tpos := this.colSize*a_row + a_col\n\treturn this.vec[pos], nil\n}\n\nvar Connection *connectionTable = &connectionTable{\n\trowSize: 1316,\n\tcolSize: 1316,\n\tvec: []int16{\n\t\t-434, 1, -1630, -1671, 24, 111, -2752, -589, -589, -294, -155, 475, 945, -467, -155, -461, -148, -461, -148, -2409,\n\t\t-3230, -558, -246, -510, -198, -461, -148, -462, -150, -461, -149, -114, 197, -590, -278, 27, 1003, -1205, 30, -351,\n\t\t-62, -59, -59, -800, -131, 609, -59, -60, -59, 113, -127, 213, -903, 478, 478, 504, 70, 70, 96, 72,\n\t\t72, 99, 72, 72, 99, -552, -552, -526, 40, 40, 66, 92, 92, 118, 72, 72, 99, 72, 72, 98,\n// \u2026snip\n\t\t66, 66, 66, 66, 124, 124, 124, 124, 61, 61, 61, 61, 87, 87, 87, 87, 61, 61, 61, 61,\n\t\t78, 78, 78, 78, -192, -192, -192, -192, 114, 114, 114, 114, 217, 217, 217, 217, 79, 79, 79, 79,\n\t\t132, 132, 132, 132, 100, 100, 100, 100, 91, 91, 91, 91, -166, -166, -166, -166, 101, 199, 125, 87,\n\t\t-192, 130, -61, -1401, -939, -1154, -911, -1265, -287, -934, -605, -614, -344, 62, 446, 61, -902, 792, 1436, 754,\n\t\t1123, 758, 752, 853, 810, 1147, -775, -843, -911, -889, -3785, -3261, -3209, -4369, -1712, -129,\n\t},\n}\n```\n\n## \u751f\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5927\u304d\u3055\n\n| \u7a2e\u985e     |\u5143\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba|\u5909\u63db\u3055\u308c\u305fgolang\u30b3\u30fc\u30c9|\n|:-------: |:-------------:|:-----------------:|\n| \u9023\u63a5\u8868    | 22MB         |10MB                |\n|\u5f62\u614b\u7d20\u30ea\u30b9\u30c8|33MB          |74MB (DoubleArray\u542b\u3080)|\n\n\u5909\u63db\u3057\u305f\u30b3\u30fc\u30c9\u304c\u7d50\u69cb\u5927\u304d\u304b\u3063\u305f\u306e\u3067\uff0c\u30c9\u30ad\u30c9\u30ad\u3057\u306a\u304c\u3089\u30d3\u30eb\u30c9\u30fb\u30fb\u30fb\u30fb\u30fb \uff08\u8d85\u91cd\u3044\uff0c\u30e1\u30e2\u30ea\u8d85\u55b0\u3046\uff09\u30fb\u30fb\u30fb\u30fb\u901a\u308a\u307e\u3057\u305f\uff0e\n\u9023\u63a5\u8868\u3068\u5f62\u614b\u7d20\u30ea\u30b9\u30c8\u95a2\u9023\u306e\u30b3\u30fc\u30c9\u304c dic \u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u30661\u3064\u306b\u307e\u3068\u3081\u3089\u308c\u3066\uff0c\u305d\u306e\u30b5\u30a4\u30ba\u306f\uff0c\n\n\n|\u30e9\u30a4\u30d6\u30e9\u30ea(.a)|\u30b5\u30a4\u30ba|\n|:----------:|:---:|\n|dic.a       |232MB|\n\n**232MB!** \u3067\u304b\u3044 orz\uff0e\u3067\u3082\u307e\u3060\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3057\u306d\u30fb\u30fb\u30fb\uff0e\n\n# \u89e3\u6790\u90e8\u5206\u3092\u4f5c\u308b\n\n\u8f9e\u66f8\u304c\u51fa\u6765\u3066\uff0c\u3053\u3053\u307e\u3067\u6765\u308c\u3070\u307b\u307c\u3067\u304d\u3042\u304c\u3063\u305f\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff0e\n\u30e9\u30c6\u30a3\u30b9\u3092\u69cb\u7bc9\u3057\uff0cViterbi \u3067\u63a2\u7d22\u3057\u307e\u3059\uff0e\u30e9\u30c6\u30a3\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n```go:\u30e9\u30c6\u30a3\u30b9\u306e\u69cb\u7bc9\u3068Viterbi\u3067\u306e\u691c\u7d22\npackage tokenizer\n\nimport (\n\t\"github.com/ikawaha/tokenizer/dic\"\n\n\t\"fmt\"\n\t\"unicode/utf8\"\n)\n\nconst (\n\t_INTMAX = 1<<31-1\n)\n\ntype Lattice struct {\n\tinput  []rune\n\tlist   [][]Node\n\toutput []*Node\n}\n\nfunc (this *Lattice) build(a_input string) {\n\trunes := []rune(a_input)\n\tthis.input = runes\n\tthis.list = make([][]Node, len(runes)+2)\n\n\tthis.list[0] = append(this.list[0], Node{id: BOSEOS, class: KNOWN, start: 0})\n\tthis.list[len(this.list)-1] = append(this.list[len(this.list)-1], Node{id: BOSEOS, class: KNOWN, start: len(this.list) - 2})\n\n\tfor i, _ := range runes {\n\t\tprefixs, ids := dic.Index.CommonPrefixSearch(string(runes[i:]))\n\t\tfor key, substr := range prefixs {\n\t\t\tid := ids[key]\n\t\t\tdup := dic.Counts[id]\n\t\t\tif dup == 0 {\n\t\t\t\tdup = 1\n\t\t\t}\n\t\t\tfor x := 0; x < dup; x++ {\n\t\t\t\tcost := dic.Costs[id+x]\n\t\t\t\tp := i + utf8.RuneCountInString(substr)\n\t\t\t\tsurface := this.input[i:p]\n\t\t\t\tnode := Node{\n\t\t\t\t\tid:      id + x,\n\t\t\t\t\tstart:   i,\n\t\t\t\t\tcost:    0,\n\t\t\t\t\tclass:   KNOWN,\n\t\t\t\t\tleft:    int32(cost.Left),\n\t\t\t\t\tright:   int32(cost.Right),\n\t\t\t\t\tweight:  int32(cost.Weight),\n\t\t\t\t\tsurface: surface,\n\t\t\t\t}\n\t\t\t\tthis.list[p] = append(this.list[p], node)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (this *Lattice) String() string {\n\tstr := \"\"\n\tfor i, nodes := range this.list {\n\t\tstr += fmt.Sprintf(\"[%v] :\\n\", i)\n\t\tfor _, node := range nodes {\n\t\t\tstr += fmt.Sprintf(\"%v\\n\", node)\n\t\t}\n\t\tstr += \"\\n\"\n\t}\n\treturn str\n}\n\nfunc (this *Lattice) forward() (err error) {\n\tfor i, size := 1, len(this.list); i < size; i++ {\n\t\tcurrentList := this.list[i]\n\t\tfor index, target := range currentList {\n\t\t\tprevList := this.list[target.start]\n\t\t\tif len(prevList) == 0 {\n\t\t\t\tthis.list[i][index].cost = _INTMAX\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor j, n := range prevList {\n\t\t\t\tvar c int16\n\t\t\t\tc, err = dic.Connection.At(int(n.right), int(target.left))\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ttotalCost := int32(c) + int32(target.weight) + n.cost\n\t\t\t\tif j == 0 || totalCost < this.list[i][index].cost {\n\t\t\t\t\tthis.list[i][index].cost = totalCost\n\t\t\t\t\tthis.list[i][index].prev = &this.list[target.start][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}\n\nfunc (this *Lattice) backward() {\n\tsize := len(this.list)\n\tstack := make([]*Node, 0, size)\n\tp := &this.list[size-1][0]\n\n\tstack = append(stack, p)\n\tfor p != nil {\n\t\tstack = append(stack, p)\n\t\tp = p.prev\n\t}\n\n\tthis.output = make([]*Node, 0, len(stack))\n\tfor i := len(stack) - 1; i > 0; i-- {\n\t\tthis.output = append(this.output, stack[i])\n\t}\n}\n```\n\n# \u5b9f\u884c\n\n\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7528\u610f\u3057\u3066\uff0c\u6a19\u6e96\u5165\u529b\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u30921\u6587\u3068\u3057\u3066\u89e3\u6790\u3057\u307e\u3059\uff0e\n\uff03 net/http/pprof \u3092\u5165\u308c\u3066\u304a\u304f\u3068\u30e1\u30e2\u30ea\u306e\u76e3\u8996\u3068\u304b\u51fa\u6765\u3066\u4fbf\u5229\u3067\u3059\uff0e\n\n```go:main\npackage main\n\nimport (\n\t\"github.com/ikawaha/tokenizer\"\n\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t_ \"net/http/pprof\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\n\tgo func() {\n\t\tlog.Println(http.ListenAndServe(\"localhost:6060\", nil)) // \u2605 \u2190 \u3053\u308c\u5165\u308c\u3066\u304a\u304f\u3068\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3068\u304b\u3092\u76e3\u8996\u3067\u304d\u3066\u4fbf\u5229\n\t}()\n\n\tvar fp *os.File\n\tif len(os.Args) < 2 {\n\t\tfp = os.Stdin\n\t} else {\n\t\tfp, err := os.Open(os.Args[1])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer fp.Close()\n\t}\n\n\tscanner := bufio.NewScanner(fp)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tmorphs, err := tokenizer.Tokenize(line)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t\tfor i, m := range morphs {\n\t\t\tcontent, e := m.Content()\n\t\t\tif e != nil {\n\t\t\t\tlog.Println(e)\n\t\t\t}\n\t\t\tfmt.Printf(\"%2d: %v(%v, %v)\\t%v\\n\", i, m.Surface, m.Start, m.End, content)\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tlog.Println(err)\n\t}\n}\n```\n\n![tokenize_sample.png](https://qiita-image-store.s3.amazonaws.com/0/44487/1fd9f6fb-2946-0251-fd01-08f4f36c80ab.png)\n\n\u3084\u3063\u305f\u30fc\uff3c(^o^)\uff0f   \u6700\u7d42\u7684\u306a\u30d0\u30a4\u30ca\u30ea\u306e\u30b5\u30a4\u30ba\u306f **105MB**\uff0e\u30d0\u30a4\u30ca\u30ea\u304c\u5927\u304d\u304f\u306a\u308a\u304c\u3061\u306a golang \u306b\u3057\u3066\u306f\u4e0a\u51fa\u6765\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b(?!)\n\n\n# \u554f\u984c\u70b9\n\n\u672a\u77e5\u8a9e\u306e\u51e6\u7406\u3092\u3057\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u30e9\u30c6\u30a3\u30b9\u304c\u672b\u5c3e\u304b\u3089\u5148\u982d\u307e\u3067\u8fbf\u308c\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\n\n![unk.png](https://qiita-image-store.s3.amazonaws.com/0/44487/fe437bd6-d39f-6f71-66ae-1d7fb9c0dc4c.png)\n\n\n\u30c8\u30c8\u30ed\u304c\u8f9e\u66f8\u306b\u306a\u3044\u306e\u3067\uff0c\u305d\u3053\u306e\u9023\u7d50\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u3046\u3057\u306a\u3044\u305f\u3081\u306b\u306f\uff0c\u8f9e\u66f8\u5f15\u3051\u306a\u304b\u3063\u305f\u3068\u304d\u306b\uff0c\u3042\u308b\u9069\u5f53\u306a\u7bc4\u56f2\uff08\u305f\u3068\u3048\u3070\u30ab\u30bf\u30ab\u30ca\u9023\u7d9a\u90e8\u5206\u3068\u304b\uff09\u3092\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3068\u3057\u3066\u30e9\u30c6\u30a3\u30b9\u306b\u8ffd\u52a0\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u6b21\u56de\u306f\u672a\u77e5\u8a9e\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u3042\u3068\uff0ckuromoji \u306e\u691c\u7d22\u30e2\u30fc\u30c9\u306e\u5bfe\u5fdc\u3068\u304b\uff0e\uff08\u3064\u3065\u304f\u30fb\u30fb\u30fb\u30fb\u306e\u304b\uff1f\uff09\n\n\u3064\u3065\u304d\uff1a[(\uff12)\u672a\u77e5\u8a9e\u51e6\u7406\u7de8](http://qiita.com/ikawaha/items/8a94b728105e03a76468)\n\n\n", "tags": ["\u5f62\u614b\u7d20\u89e3\u6790", "Go", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "mecab", "kuromoji"]}