{"context": " More than 1 year has passed since last update.Learning ECMAScript6 \u304c\u53c2\u8003\u66f8\u7c4d\n\nPromise \u306f\u30e2\u30ca\u30c9\n\u8a08\u7b97\u4e2d\u304b\u3082\u3057\u308c\u306a\u3044\u5024\u3092\u7ba1\u7406\u3059\u308b\u6587\u8108\u3092\u6301\u3064\u30e2\u30ca\u30c9\u3002\n\u975e\u540c\u671f\u64cd\u4f5c\u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u5f93\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3084\u51e6\u7406\u306e\u5206\u96e2\u3092\u306a\u304f\u3057\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3084\u30a4\u30d9\u30f3\u30c8\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u3088\u308a\u3082\u53ef\u8996\u5316\u6027\u3092\u9ad8\u3081\u308b\u3002\n\u30d7\u30ed\u30df\u30b9\u306f\u30e2\u30ca\u30c9\u3067\u3042\u308b\u8a8d\u8b58\u3092\u6301\u3064\u3053\u3068\u306b\u3088\u308a\u3001\u591a\u5c11 Haskell \u306e\u77e5\u8b58\u304c\u3042\u308b\u81ea\u5206\u3068\u3057\u3066\u306f\u3001\u30d7\u30ed\u30df\u30b9\u306e\u5fc5\u8981\u6027\u3084\u4f4d\u7f6e\u4ed8\u3051\u3092\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u3063\u305f\u3002\n\u4ee5\u964d\u306f\u3001\u30d7\u30ed\u30df\u30b9\u306e\u4ed5\u69d8\u3068\u30e1\u30bd\u30c3\u30c9\u306e\u4f8b\u306a\u3069\u3092\u6574\u7406\u3057\u3066\u3044\u308b\u3002\n\nThe Promise Constructor\nPromise \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002 Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u975e\u540c\u671f\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\nPromise \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f executor \u3068\u547c\u3070\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6e21\u3057\u3001\u3053\u306eexecutor \u306b\u306fresolve\u3068reject\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6e21\u3059\u3002\nresolve/reject\u306e\u5b9f\u614b\u306f\u3001\u305d\u306e\u5f8cthen()\u3067\u6e21\u3055\u308c\u308b\u51e6\u7406\u304c\u5408\u6210\u3055\u308c\u305f\u3082\u306e\uff1f\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306b\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u76f4\u63a5\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3002\n\n\u30d7\u30ed\u30df\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n\u30d7\u30ed\u30df\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5206\u985e\u3055\u308c\u308b\u3002\n\n\n\nstatus\ndescription\n\n\n\n\nFulfilled\n\nresolve\u95a2\u6570\u304c\u3001non-promise \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3068\u3082\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\n\n\nRejected\n\nreject\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u308a\u3001executor \u306e\u30b9\u30b3\u30fc\u30d7\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u6642\n\n\nPending\n\nresolve\u3084reject\u304c\u307e\u3060\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\n\n\nSettled\nPending \u3067\u306f\u306a\u3044\u6642(ref)\n\n\n\n\nOnce a Promise is fulfilled or rejected, it cannot be transitioned back. An attempt to transition it will have no effect.\n\u4e00\u5ea6 Fulfilled \u307e\u305f\u306f Rejected \u306b\u306a\u308b\u3068\u3001\u305d\u306e\u72b6\u614b\u3092\u623b\u3059\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u3084\u308d\u3046\u3068\u3057\u3066\u3082\u3001\u4f55\u3082\u8d77\u304d\u306a\u3044\u3002\n\n\u30d7\u30ed\u30df\u30b9\u306e\u7279\u5fb4\u3068\u3057\u3066\u3001resolve\u95a2\u6570\u306b Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6e21\u3063\u305f\u5834\u5408\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u6e21\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n// \u30d7\u30ed\u30df\u30b9\u306b\u30d7\u30ed\u30df\u30b9\u3092\u6e21\u3059\nlet a = new Promise(function (resolve, reject) {\n  let b = new Promise(function (res, rej) {\n    setTimeout(function () {\n      res(100);\n    }, 1000);\n  });\n  resolve(b);\n});\n\na\n  .then(function (value) {\n  console.log('the value fulfilled is ' + value);\n  return value * 3; // return the value multiplied 3\n})\n  .then(function (value) {\n    console.log('the value passed by previous then is :' + value);\n  });\n\n\nThe then(onFulfilled, onRejected) method\n\nThe callbacks passed to the then() method are executed asynchronously.\nthen\u306b\u6e21\u3055\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306f\u975e\u540c\u671f\u51e6\u7406\u3068\u306a\u308b\u3002\nThe then() method always returns a new promise object, which resolves the return value of the calling callback.\nthen\u306f\u5fc5\u305a promise object \u3092\u8fd4\u3057\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6e21\u3055\u308c\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304creturn\u3057\u305f\u5024\u3092resolve\u3059\u308b\u3002\n\n\nThe catch(onRejected) method\nthen(null, onRejected)\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3002\npromise.then(null, function(reason){\n});\n\npromise.catch(function(reason){\n});\n\ncatch\u3082 promise object \u3092\u8fd4\u3057\u3001\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6e21\u3055\u308c\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304creturn\u3057\u305f\u5024\u3092resolve\u3059\u308b\u3002\u3064\u307e\u308a\u3001\u3055\u3089\u306bthen\u3088\u308b\u30c1\u30a7\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nlet a = new Promise(function (resolve, reject) {\n  let b = new Promise(function (res, rej) {\n    setTimeout(function () {\n      rej(100);\n    }, 1000);\n  });\n  resolve(b);\n});\n\na\n  .then(function (value) {\n  console.log('the value fulfilled is ' + value);\n  return value * 3; // return the value multiplied 3\n})\n  .catch(reason => {\n    console.log('error : ' + reason);\n    return reason;\n  })\n  .then(value => { // \u30c1\u30a7\u30fc\u30f3\u53ef\u80fd\u3002onReject\u306e\u8fd4\u308a\u5024\u3092\u5f15\u6570\u306b\u3068\u3063\u3066\u3044\u308b\n    console.log('re:value: ' + value);\n  });\n\n\n\u30e2\u30ca\u30c9\u3063\u307d\u3044\u96f0\u56f2\u6c17\n\u666e\u901a\u306e\u5024\u3092\u3001\u30d7\u30ed\u30df\u30b9\u3068\u3044\u3046\u6587\u8108\u306b\u5305\u3080\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\nThe Promise.resolve(value) method\n\nThe resolve() method is basically used to convert a value to an promise object. It is useful when you find yourself with a value that may or may not be a Promise, but you want to use it as a Promise.For example, the jQuery Promises have different interfaces than the ES6 Promises. Therefore, you can use the resolve() method to convert the jQuery Promises into the ES6 Promises.\n\u3053\u308c\u304b\u3089\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u5024\u304c promise object \u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u6642\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u30d7\u30ed\u30df\u30b9\u3067\u5305\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\nThe Promise.reject(value) method\n\u4e3b\u306b\u30c7\u30d0\u30c3\u30b0\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\u5024\u3092\u30d7\u30ed\u30df\u30b9\u3067\u5305\u3080\u305f\u3081\u3001\u3068\u3044\u3046\u4f7f\u308f\u308c\u65b9\u306f\u3057\u306a\u3044\u3002\n\nThe Promise.all(itearable) method\niterable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306e promise object \u304c\u5168\u3066 fulfill \u3055\u308c\u308b\u3068\u3001\u3053\u306epromise object \u3082 fulfill \u3055\u308c\u308b\u3002\n\nThe Promise.race(iterabe) method\n\nThe the race() method of the Promise object takes an iterable object as the argument and returns a Promise that fulfills or rejects as soon as one of the Promises in the iterable object is fulfilled or rejected, with the fulfillment value or reason from that Promise.\n\niterable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306e promise object \u306e\u3046\u3061\u3001\u6700\u3082\u65e9\u304f settled \u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u8fd4\u308b\u3002\u4ee5\u964d\u3001\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082 race\u306e\u5236\u5fa1\u3068\u306f\u7121\u95a2\u4fc2\u306bresolve \u3055\u308c\u3066\u3044\u304f\u3002\nlet p1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"Fulfillment Value 1\");\n  }, 1000);\n});\n\nlet p2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(\"fulfillment Value 2\");\n  }, 2000);\n});\n\nvar arr = [p1, p2];\n\nPromise.race(arr).then(function(value){\n  console.log('onFulfilled: ' + value); //Output \"onFulfilled: Fulfillment Value 1\"\n}, function(reason){\n  console.log('onRejected: ' + reason);\n});\n\n\n[Learning ECMAScript6](http://www.amazon.co.jp/381/dp/B012O8SE6C/ref=sr_1_fkmr0_1?ie=UTF8&qid=1446124237&sr=8-1-fkmr0&keywords=learning+ecmascript6) \u304c\u53c2\u8003\u66f8\u7c4d\n\n## Promise \u306f\u30e2\u30ca\u30c9\n\u8a08\u7b97\u4e2d\u304b\u3082\u3057\u308c\u306a\u3044\u5024\u3092\u7ba1\u7406\u3059\u308b\u6587\u8108\u3092\u6301\u3064\u30e2\u30ca\u30c9\u3002\n\u975e\u540c\u671f\u64cd\u4f5c\u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u5f93\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5316\u3059\u308b\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3084\u51e6\u7406\u306e\u5206\u96e2\u3092\u306a\u304f\u3057\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3084\u30a4\u30d9\u30f3\u30c8\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u3088\u308a\u3082\u53ef\u8996\u5316\u6027\u3092\u9ad8\u3081\u308b\u3002\n\n\u30d7\u30ed\u30df\u30b9\u306f\u30e2\u30ca\u30c9\u3067\u3042\u308b\u8a8d\u8b58\u3092\u6301\u3064\u3053\u3068\u306b\u3088\u308a\u3001\u591a\u5c11 Haskell \u306e\u77e5\u8b58\u304c\u3042\u308b\u81ea\u5206\u3068\u3057\u3066\u306f\u3001\u30d7\u30ed\u30df\u30b9\u306e\u5fc5\u8981\u6027\u3084\u4f4d\u7f6e\u4ed8\u3051\u3092\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u3063\u305f\u3002\n\n\u4ee5\u964d\u306f\u3001\u30d7\u30ed\u30df\u30b9\u306e\u4ed5\u69d8\u3068\u30e1\u30bd\u30c3\u30c9\u306e\u4f8b\u306a\u3069\u3092\u6574\u7406\u3057\u3066\u3044\u308b\u3002\n### The Promise Constructor\n\nPromise \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u308b\u3002 Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u975e\u540c\u671f\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002\n\nPromise \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f **executor** \u3068\u547c\u3070\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6e21\u3057\u3001\u3053\u306eexecutor \u306b\u306f`resolve`\u3068`reject`\u306e\u4e8c\u3064\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u6e21\u3059\u3002\n\n`resolve`/`reject`\u306e\u5b9f\u614b\u306f\u3001\u305d\u306e\u5f8c`then()`\u3067\u6e21\u3055\u308c\u308b\u51e6\u7406\u304c\u5408\u6210\u3055\u308c\u305f\u3082\u306e\uff1f\u306a\u306e\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u660e\u793a\u7684\u306b\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u76f4\u63a5\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3002\n\n### \u30d7\u30ed\u30df\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n\u30d7\u30ed\u30df\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5206\u985e\u3055\u308c\u308b\u3002\n\n|status|description|\n|---|---|\n|Fulfilled|`resolve`\u95a2\u6570\u304c\u3001non-promise \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3068\u3082\u306b\u547c\u3073\u51fa\u3055\u308c\u305f\u6642|\n|Rejected|`reject`\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u308a\u3001executor \u306e\u30b9\u30b3\u30fc\u30d7\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u6642|\n|Pending|`resolve`\u3084`reject`\u304c\u307e\u3060\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b|\n|Settled|Pending \u3067\u306f\u306a\u3044\u6642([ref](http://www.2ality.com/2014/10/es6-promises-api.html))|\n\n\n> Once a Promise is fulfilled or rejected, it cannot be transitioned back. An attempt to transition it will have no effect.\n\u4e00\u5ea6 **Fulfilled** \u307e\u305f\u306f **Rejected** \u306b\u306a\u308b\u3068\u3001\u305d\u306e\u72b6\u614b\u3092\u623b\u3059\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u3084\u308d\u3046\u3068\u3057\u3066\u3082\u3001\u4f55\u3082\u8d77\u304d\u306a\u3044\u3002\n\n\u30d7\u30ed\u30df\u30b9\u306e\u7279\u5fb4\u3068\u3057\u3066\u3001`resolve`\u95a2\u6570\u306b Promise \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6e21\u3063\u305f\u5834\u5408\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u6e21\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n```javascript\n// \u30d7\u30ed\u30df\u30b9\u306b\u30d7\u30ed\u30df\u30b9\u3092\u6e21\u3059\nlet a = new Promise(function (resolve, reject) {\n  let b = new Promise(function (res, rej) {\n    setTimeout(function () {\n      res(100);\n    }, 1000);\n  });\n  resolve(b);\n});\n\na\n  .then(function (value) {\n  console.log('the value fulfilled is ' + value);\n  return value * 3; // return the value multiplied 3\n})\n  .then(function (value) {\n    console.log('the value passed by previous then is :' + value);\n  });\n```\n\n### The then(onFulfilled, onRejected) method\n\n> The callbacks passed to the then() method are executed asynchronously.\n`then`\u306b\u6e21\u3055\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306f\u975e\u540c\u671f\u51e6\u7406\u3068\u306a\u308b\u3002\n\n> The then() method always returns a new promise object, which resolves the return value of the calling callback.\n`then`\u306f\u5fc5\u305a promise object \u3092\u8fd4\u3057\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6e21\u3055\u308c\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c`return`\u3057\u305f\u5024\u3092`resolve`\u3059\u308b\u3002\n\n### The catch(onRejected) method\n`then(null, onRejected)`\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3002\n\n```javascript\npromise.then(null, function(reason){\n});\n```\n\n```javascript\npromise.catch(function(reason){\n});\n```\n\n`catch`\u3082 promise object \u3092\u8fd4\u3057\u3001\u3001\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6e21\u3055\u308c\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304creturn\u3057\u305f\u5024\u3092`resolve`\u3059\u308b\u3002\u3064\u307e\u308a\u3001\u3055\u3089\u306b`then`\u3088\u308b\u30c1\u30a7\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```javascript\nlet a = new Promise(function (resolve, reject) {\n  let b = new Promise(function (res, rej) {\n    setTimeout(function () {\n      rej(100);\n    }, 1000);\n  });\n  resolve(b);\n});\n\na\n  .then(function (value) {\n  console.log('the value fulfilled is ' + value);\n  return value * 3; // return the value multiplied 3\n})\n  .catch(reason => {\n    console.log('error : ' + reason);\n    return reason;\n  })\n  .then(value => { // \u30c1\u30a7\u30fc\u30f3\u53ef\u80fd\u3002onReject\u306e\u8fd4\u308a\u5024\u3092\u5f15\u6570\u306b\u3068\u3063\u3066\u3044\u308b\n    console.log('re:value: ' + value);\n  });\n```\n\n\n## \u30e2\u30ca\u30c9\u3063\u307d\u3044\u96f0\u56f2\u6c17\n\u666e\u901a\u306e\u5024\u3092\u3001\u30d7\u30ed\u30df\u30b9\u3068\u3044\u3046\u6587\u8108\u306b\u5305\u3080\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n### The Promise.resolve(value) method\n\n> The resolve() method is basically used to convert a value to an promise object. It is useful when you find yourself with a value that may or may not be a Promise, but you want to use it as a Promise.For example, the jQuery Promises have different interfaces than the ES6 Promises. Therefore, you can use the resolve() method to convert the jQuery Promises into the ES6 Promises.\n\u3053\u308c\u304b\u3089\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u5024\u304c promise object \u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u6642\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u30d7\u30ed\u30df\u30b9\u3067\u5305\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### The Promise.reject(value) method\n\u4e3b\u306b\u30c7\u30d0\u30c3\u30b0\u76ee\u7684\u3067\u5229\u7528\u3059\u308b\u3002\u5024\u3092\u30d7\u30ed\u30df\u30b9\u3067\u5305\u3080\u305f\u3081\u3001\u3068\u3044\u3046\u4f7f\u308f\u308c\u65b9\u306f\u3057\u306a\u3044\u3002\n\n### The Promise.all(itearable) method\niterable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306e promise object \u304c\u5168\u3066 fulfill \u3055\u308c\u308b\u3068\u3001\u3053\u306epromise object \u3082 fulfill \u3055\u308c\u308b\u3002\n\n### The Promise.race(iterabe) method\n\n> The the race() method of the Promise object takes an iterable object as the argument and returns a Promise that fulfills or rejects as soon as one of the Promises in the iterable object is fulfilled or rejected, with the fulfillment value or reason from that Promise.\n\niterable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306e promise object \u306e\u3046\u3061\u3001\u6700\u3082\u65e9\u304f **settled** \u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u8fd4\u308b\u3002\u4ee5\u964d\u3001\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082 `race`\u306e\u5236\u5fa1\u3068\u306f\u7121\u95a2\u4fc2\u306b`resolve` \u3055\u308c\u3066\u3044\u304f\u3002\n\n```javascript\nlet p1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"Fulfillment Value 1\");\n  }, 1000);\n});\n\nlet p2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(\"fulfillment Value 2\");\n  }, 2000);\n});\n\nvar arr = [p1, p2];\n\nPromise.race(arr).then(function(value){\n  console.log('onFulfilled: ' + value); //Output \"onFulfilled: Fulfillment Value 1\"\n}, function(reason){\n  console.log('onRejected: ' + reason);\n});\n\n```\n", "tags": ["JavaScript", "ECMAScript6"]}