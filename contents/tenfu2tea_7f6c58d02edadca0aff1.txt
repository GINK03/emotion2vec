{"tags": ["Julia", "JuMP", "\u6700\u9069\u5316", "\u30d1\u30ba\u30eb", "\u7d44\u5408\u305b\u6700\u9069\u5316"], "context": "\u3000Julia \u306e\u6700\u9069\u5316\u30d1\u30c3\u30b1\u30fc\u30b8 JuMP \u3092\u8a66\u3057\u3066\u307f\u308b\u9023\u8f09\u3002\n\u3000Qiita\u8a18\u4e8b \u300c\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u7d44\u5408\u305b\u6700\u9069\u3067\u89e3\u304f\u300d @Tsutomu-KKE@github \u3055\u3093\u306b\u3088\u308b Python - PuLP\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001JuMP \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u6700\u9069\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\n\nusing JuMP\nusing Clp\n\nfunction siritori(kw)\n  n=length(kw)\n  m=Model()\n  @variable(m, x[1:n,1:n], Bin)\n  @variable(m, y[1:n], Bin)\n  @objective(m, Max, sum(x[i,j] for i=1:n, j=1:n)) # (0) \u306a\u308b\u3079\u304f\u7e4b\u3052\u308b\n  @constraint(m, [i=1:n], x[i,i] == 0) # (A)\n  for i=1:n, j=1:n\n    if kw[i][end] != kw[j][1]\n      @constraint(m, x[i,j] == 0)  # (1)\n    end\n  end\n  @expression(m, cou[i=1:n], sum(x[i,j] for j=1:n) )\n  @expression(m, cin[i=1:n], sum(x[j,i] for j=1:n) )\n  @constraint(m, [i=1:n], cou[i] <= 1) # (3) kw_i \u304b\u3089\u51fa\u308b\u6570\u306f1\u4ee5\u4e0b\n  @constraint(m, [i=1:n], cin[i] <= 1) # (4) kw_i \u3078\u5165\u308b\u6570\u306f1\u4ee5\u4e0b\n  @constraint(m, [i=1:n], cou[i] <= cin[i] + y[i] ) # (5) y\u306b\u95a2\u3059\u308b\u5236\u7d04\n  @constraint(m, sum(y[i] for i=1:n) == 1) # (6) \u5148\u982d\u306f1\u3064\u3060\u3051\n  @time status=solve(m)\n  println(status)\n  ys=getvalue(y)\n  xs=getvalue(x)\n  return m, status, ys, xs\nend\n\n\u3000\u95a2\u6570 siritori(kw) \u306f\u3001\u6587\u5b57\u5217(\u5358\u8a9e)\u306e\u914d\u5217 kw \u306b\u5bfe\u3057\u3066\u3001\u6700\u9069\u5316\u3092\u7528\u3044\u3066\u3001\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u3000\u5b9a\u5f0f\u5316\u306f\u53c2\u7167\u8a18\u4e8b \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e (0)-(6) \u306f\u3001\u53c2\u7167\u8a18\u4e8b\u306e\u6761\u4ef6\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u3000\u5b9f\u88c5\u4e0a\u306e\u5927\u304d\u306a\u9055\u3044\u306f\u3001\u5b9a\u7fa9\u3059\u308b\u5909\u6570\u3067\u3059\u3002\u53c2\u7167\u8a18\u4e8b\u3067\u306f\u300c\u3057\u308a\u3068\u308a\u300d\u304c\u53ef\u80fd\u306a\u5358\u8a9e\u9593\u306e\u5411\u304d\u4ed8\u304d\u30ea\u30f3\u30af (i\u2192ji\u2192ji \\rightarrow j ) \u306b\u5bfe\u3057\u3066\u306e\u307f\u5909\u6570 xi,jxi,jx_{i,j} \u3092\u751f\u6210\u3059\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001\u3053\u3053\u3067\u306f\u3001\u5909\u6570 xi,jxi,jx_{i,j} \u3092\u5168\u3066\u751f\u6210\u3057\u305f\u4e0a\u3067\u3001\u300c\u3057\u308a\u3068\u308a\u300d\u304c\u4e0d\u53ef\u80fd\u306a\u30ea\u30f3\u30af\u306b\u5bfe\u3057\u3066\u5236\u7d04\u6761\u4ef6\u3067 xi,j=0xi,j=0x_{i,j} = 0 \u3092\u8ab2\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u66f4\u306b\u3001\u81ea\u5206\u81ea\u8eab\u3078\u306e\u30ea\u30f3\u30af (i\u2192ii\u2192ii \\rightarrow i) \u3092\u3001\u660e\u793a\u7684\u306b\u7981\u6b62\u3057\u307e\u3057\u305f\u3002xi,i=0xi,i=0x_{i,i} = 0\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30e1\u30f3\u30c8: \u5236\u7d04(A)\n\n\u7c21\u5358\u306a\u4f8b\n\u7c21\u5358\u306a\u4f8b\u3067\u5b9f\u9a13\u3057\u307e\u3059\u3002\njulia> kw1 = [ \"cde\", \"txy\", \"abc\", \"rst\", \"rsr\", \"pqr\"  ]\n6-element Array{String,1}:\n \"cde\"\n \"txy\"\n \"abc\"\n \"rst\"\n \"rsr\"\n \"pqr\"\n\njulia> mm1, stat1, yo1, xo1 = siritori(kw1)\n  0.015661 seconds (99 allocations: 24.438 KB)\nOptimal\n(Maximization problem with:\n * 55 linear constraints\n * 42 variables: 42 binary\nSolver is default solver,:Optimal,[0.0,0.0,0.0,0.0,0.0,1.0],\n[0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0; \u2026 ; 0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 1.0 0.0])\n\njulia> getobjectivevalue(mm1)\n3.0\n\njulia> yo1\n6-element Array{Float64,1}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n\njulia> xo1\n6\u00d76 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  1.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0  0.0\n\n\u3000\u691c\u51fa\u3055\u308c\u305f\u300c\u3057\u308a\u3068\u308a\u300d(\u30ea\u30f3\u30af)\u3092\u5370\u5b57\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\nfunction print_links(kw,xs)\n  count=0\n  n=size(xs,1)\n  for is=1:n\n    ie=findfirst(xs[is,:])\n    if (ie > 0)\n      println( \"$(is) $(kw[is]) -> $(ie) $(kw[ie])\" )\n      count += 1\n    end\n  end\n  println(\"count=$(count)\")\nend\n\n\u3000xi,j=1xi,j=1x_{i,j} = 1 \u306a\u3089\u3001i\u2192ji\u2192ji \\rightarrow j \u306e\u300c\u3057\u308a\u3068\u308a\u300d\uff08\u30ea\u30f3\u30af\uff09\u304c\u6210\u7acb\u3057\u3066\u3044\u307e\u3059\u3002\u5404\u884c iii \u306e\u30b9\u30e9\u30a4\u30b9 x[i,:] \u304b\u3089 1 \u304c\u5165\u3063\u3066\u3044\u308b\u5217\u756a\u53f7 jjj \u3092\u63a2\u7d22\u3057\u307e\u3059\u3002\u63a2\u7d22\u306b\u306f\u3001\u95a2\u6570 findfirst(v) \u3092\u7528\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u30010 \u4ee5\u5916\u306e\u6570\u304c\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u914d\u5217\u6dfb\u5b57\u3092\u8fd4\u3057\u307e\u3059\u3002\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u623b\u308a\u5024\u306f 0 \u3067\u3059\u3002\n\u3000(\u5f0f1) || (\u5f0f2) \u306f\u3001\n\nif (not (\u5f0f1))\n  (\u5f0f2)\nend\n\n\u3068\u7b49\u4fa1\u3067\u3059\u3002 (\u5f0f1) || (\u5f0f2) \u306e\u8ad6\u7406\u5f0f\u306e\u771f\u507d\u306f\u3001(\u5f0f1) \u304c\u507d\u306a\u3089\u3001(\u5f0f2) \u3092\u8abf\u3079\u306a\u3044\u3068\u5206\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002 short circuit evaluation \u3068\u3044\u3044\u307e\u3059\u3002\n\u3000\u6587\u5b57\u5217\u4e2d\u306b \"$(\u5f0f)\" \u3068\u66f8\u304f\u3068\u3001\u5f0f\u306e\u8a55\u4fa1\u7d50\u679c\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002(Ruby \u306e \"#{\u5f0f}\"\u3000\u3068\u540c\u3058\u3067\u3059\u306d\u3002)\n\u3000\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\njulia> print_links(kw1,xo1)\n4 rst -> 2 txy\n5 rsr -> 4 rst\n6 pqr -> 5 rsr\ncount=3\n\n\u3000\u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u3092\u5370\u5b57\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\u300c\u3057\u308a\u3068\u308a\u300d\u306e\u6700\u521d\u306e\u5358\u8a9e\u306e\u756a\u53f7\u306f\u3001\u914d\u5217 y \u304c\u975e\u96f6\u3068\u306a\u308b\u6dfb\u5b57\u3067\u3059\u3002\nfunction print_siri(kw,ys,xs)\n  is=findfirst(ys)\n  is > 0 || return\n  print( \"$(is) $(kw[is])\")\n  count=0\n  while true\n    is=findfirst(xs[is,:])\n    is > 0 || break\n    print( \" ->\\n$(is) $(kw[is])\" )\n    count += 1\n  end\n  println(\"\\ncount=$(count)\")\nend\n\n\u3000\u3067\u306f\u5b9f\u884c\u3002\u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u304c\u691c\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\njulia> print_siri(kw1,yo1,xo1)\n6 pqr ->\n5 rsr ->\n4 rst ->\n2 txy\ncount=3\n\n\n\u5c11\u3057\u9577\u3044\u4f8b\u3002\n\u3000\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u3088\u3046\u306b\u3001C++\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 84\u500b\u3067\u300c\u3057\u308a\u3068\u308a\u300d\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u3000\u307e\u305a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002\njulia> cppkw = \"\"\"\n       alignas,alignof,and,and_eq,asm,auto,bitand,bitor,bool,break,case,\n       catch,char,char16_t,char32_t,class,compl,const,constexpr,const_cast,\n       continue,decltype,default,delete,do,double,dynamic_cast,else,enum,\n       explicit,export,extern,false,float,for,friend,goto,if,inline,int,long,\n       mutable,namespace,new,noexcept,not,not_eq,nullptr,operator,or,or_eq,\n       private,protected,public,register,reinterpret_cast,return,short,\n       signed,sizeof,static,static_assert,static_cast,struct,switch,template\n       this,thread_local,throw,true,try,typedef,typeid,typename,union,\n       unsigned,using,virtual,void,volatile,wchar_t,while,xor,xor_eq\"\"\"\n\"alignas,alignof,and,and_eq,asm,auto,bitand,bitor,bool,break,case,\\ncatch,char,char16_t,char32_t,class,compl,const,constexpr,const_cast,\\ncontinue,decltype,default,delete,do,double,dynamic_cast,else,enum,\\nexplicit,export,extern,false,float,for,friend,goto,if,inline,int,long,\\nmutable,namespace,new,noexcept,not,not_eq,nullptr,operator,or,or_eq,\\nprivate,protected,public,register,reinterpret_cast,return,short,\\nsigned,sizeof,static,static_assert,static_cast,struct,switch,template\\nthis,thread_local,throw,true,try,typedef,typeid,typename,union,\\nunsigned,using,virtual,void,volatile,wchar_t,while,xor,xor_eq\"\n\njulia> ckw=split(cppkw, r\"[,\\n]+\")\n84-element Array{SubString{String},1}:\n \"alignas\" \n \"alignof\" \n \"and\"     \n \"and_eq\"  \n \"asm\"     \n \"auto\"    \n \"bitand\"  \n \"bitor\"   \n \"bool\"    \n \"break\"   \n \u22ee         \n \"unsigned\"\n \"using\"   \n \"virtual\" \n \"void\"    \n \"volatile\"\n \"wchar_t\" \n \"while\"   \n \"xor\"     \n \"xor_eq\"  \n\n\u3000\"\"\" \u3067\u59cb\u3081\u308b\u6587\u5b57\u5217\u306f\u6539\u884c\u3067\u304d\u307e\u3059\u3002 \"\"\" \u3067\u7d42\u4e86\u3057\u307e\u3059\u3002\u6539\u884c\u6587\u5b57 \\n\u3000\u304c\u5165\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\u3000 split(s, ch) \u306f\u3001\u6587\u5b57\u5217 s \u3092\u3001\u6587\u5b57\u3084\u6b63\u898f\u8868\u73fe ch \u3067\u533a\u5207\u3063\u3066\u3001\u6587\u5b57\u5217\u914d\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30ab\u30f3\u30de , \u307e\u305f\u306f\u6539\u884c\u6587\u5b57\u3067\u533a\u5207\u308a\u307e\u3057\u305f\u3002\n\u3000\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\njulia> cm, c, cy, cx = siritori(ckw)\n  0.148403 seconds (134 allocations: 3.093 MB)\nOptimal\n(Maximization problem with:\n * 6975 linear constraints\n * 7140 variables: 7140 binary\nSolver is default solver,:Optimal,[1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0  \u2026  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\n[0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0; \u2026 ; 0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0])\n\njulia> print_links(ckw,cx)\n1 alignas -> 59 signed\n16 class -> 60 sizeof\n23 default -> 73 typeid\n25 do -> 50 or\n27 dynamic_cast -> 72 typedef\n28 else -> 30 explicit\n29 enum -> 42 mutable\n30 explicit -> 74 typename\n31 export -> 67 this\n32 extern -> 44 new\n34 float -> 66 template\n36 friend -> 27 dynamic_cast\n37 goto -> 49 operator\n41 long -> 37 goto\n42 mutable -> 28 else\n44 new -> 82 while\n46 not -> 68 thread_local\n49 operator -> 57 return\n50 or -> 55 register\n55 register -> 56 reinterpret_cast\n56 reinterpret_cast -> 69 throw\n57 return -> 46 not\n59 signed -> 23 default\n60 sizeof -> 36 friend\n61 static -> 16 class\n67 this -> 61 static\n68 thread_local -> 41 long\n69 throw -> 81 wchar_t\n70 true -> 31 export\n72 typedef -> 34 float\n73 typeid -> 25 do\n74 typename -> 32 extern\n81 wchar_t -> 70 true\n82 while -> 29 enum\ncount=34\n\njulia> getobjectivevalue(cm)\n34.0\n\n\u300034\u500b\u306e\u30ea\u30f3\u30af\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\u3000\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u5370\u5b57\u3057\u307e\u3057\u3087\u3046\u3002\njulia> print_siri(ckw,cy,cx)\n1 alignas ->\n59 signed ->\n23 default ->\n73 typeid ->\n25 do ->\n50 or ->\n55 register ->\n56 reinterpret_cast ->\n69 throw ->\n81 wchar_t ->\n70 true ->\n31 export ->\n67 this ->\n61 static ->\n16 class ->\n60 sizeof ->\n36 friend ->\n27 dynamic_cast ->\n72 typedef ->\n34 float ->\n66 template\ncount=20\n\n\u3042\u308c\u308c\u300120\u56de\u76ee\u3067\u9014\u5207\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\nprint_links \u306e\u7d50\u679c\u304b\u3089\u3001\u624b\u3067\u300c\u3057\u308a\u3068\u308a\u300d\u3057\u3066\u307f\u307e\u3059\u3002\n1 alignas -> 59 signed\n59 signed -> 23 default\n23 default -> 73 typeid\n73 typeid -> 25 do\n25 do -> 50 or\n50 or -> 55 register\n55 register -> 56 reinterpret_cast\n56 reinterpret_cast -> 69 throw\n69 throw -> 81 wchar_t\n81 wchar_t -> 70 true\n70 true -> 31 export\n31 export -> 67 this\n67 this -> 61 static\n61 static -> 16 class\n16 class -> 60 sizeof\n27 dynamic_cast -> 72 typedef\n28 else -> 30 explicit\n29 enum -> 42 mutable\n30 explicit -> 74 typename\n32 extern -> 44 new\n34 float -> 66 template\n\n41 long -> 37 goto\n37 goto -> 49 operator\n49 operator -> 57 return\n57 return -> 46 not\n46 not -> 68 thread_local\n68 thread_local -> 41 long\n\n44 new -> 82 while\n82 while -> 29 enum\n\n36 friend -> 27 dynamic_cast\n\n42 mutable -> 28 else\n\n60 sizeof -> 36 friend\n\n72 typedef -> 34 float\n\n74 typename -> 32 extern\n\n\u30ea\u30f3\u30af\u306f\u3001\u4ee5\u4e0b\u306b\u5206\u985e\u3055\u308c\u307e\u3057\u305f\u3002\n\n\n1 \u304b\u3089 66 \n\n41 \u304b\u3089\u306e\u5faa\u74b0\u3002\n\n44 \u2192 82 \u2192 29 \n\u7d9a\u304b\u306a\u3044\u300c\u3057\u308a\u3068\u308a\u300d 5\u500b\n\n\u3000\u632f\u308a\u8fd4\u3063\u3066\u307f\u308c\u3070\u3001\u4eca\u56de\u306e\u5b9a\u5f0f\u5316\u306f\u3001\u300c\"\u3057\u308a\u3068\u308a\"\u306e\u7dcf\u6570\u3092\u6700\u5927\u306b\u3059\u308b\u3053\u3068\u300d\u304c\u76ee\u7684\u3067\u3042\u308a\u3001\u300c\u3057\u308a\u3068\u308a\u3092\u306a\u308b\u3079\u304f\u9023\u7d50\u3059\u308b\u300d\u3068\u3044\u3046\u6761\u4ef6\u306f\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3002xi,jxi,jx_{i,j} \u306e\u7d44\u5408\u305b\u306f\u6709\u9650\u3067\u3059\u304b\u3089\u3001\u5168\u3066\u306e\u5834\u5408\u3092\u8a66\u884c\u3059\u308c\u3070 \u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u3092\u898b\u3064\u3051\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u76ee\u7684\u95a2\u6570\u3067\u306f\u9069\u5f53\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u30ea\u30f3\u30af\nJulia \u306e\u6700\u9069\u5316\u30d1\u30c3\u30b1\u30fc\u30b8 JuMP \u306b\u95a2\u3059\u308b\u8a18\u4e8b\u3067\u3059\u3002\n- \u300c\u6700\u9069\u5316\u306b\u304a\u3051\u308b Julia : JuMP\u4e8b\u59cb\u3081\u300d \n- \u300c\u540c: JuMP \u3067 N-Queen \u3092\u89e3\u304f\u300d\n- \u300c\u540c: - JuMP \u3067\u8272\u3005\u89e3\u304f\u300d (\u4eca\u5f8c\u3082\u8ffd\u8a18\u4e88\u5b9a)\n\u3000Julia \u306e\u6700\u9069\u5316\u30d1\u30c3\u30b1\u30fc\u30b8 JuMP \u3092\u8a66\u3057\u3066\u307f\u308b\u9023\u8f09\u3002\n\u3000Qiita\u8a18\u4e8b [\u300c\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u7d44\u5408\u305b\u6700\u9069\u3067\u89e3\u304f\u300d](http://qiita.com/Tsutomu-KKE@github/items/ba2dedb5795cae36f8a1) @Tsutomu-KKE@github \u3055\u3093\u306b\u3088\u308b Python - PuLP\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3001JuMP \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u6700\u9069\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\n```Julia\n\nusing JuMP\nusing Clp\n\nfunction siritori(kw)\n  n=length(kw)\n  m=Model()\n  @variable(m, x[1:n,1:n], Bin)\n  @variable(m, y[1:n], Bin)\n  @objective(m, Max, sum(x[i,j] for i=1:n, j=1:n)) # (0) \u306a\u308b\u3079\u304f\u7e4b\u3052\u308b\n  @constraint(m, [i=1:n], x[i,i] == 0) # (A)\n  for i=1:n, j=1:n\n    if kw[i][end] != kw[j][1]\n      @constraint(m, x[i,j] == 0)  # (1)\n    end\n  end\n  @expression(m, cou[i=1:n], sum(x[i,j] for j=1:n) )\n  @expression(m, cin[i=1:n], sum(x[j,i] for j=1:n) )\n  @constraint(m, [i=1:n], cou[i] <= 1) # (3) kw_i \u304b\u3089\u51fa\u308b\u6570\u306f1\u4ee5\u4e0b\n  @constraint(m, [i=1:n], cin[i] <= 1) # (4) kw_i \u3078\u5165\u308b\u6570\u306f1\u4ee5\u4e0b\n  @constraint(m, [i=1:n], cou[i] <= cin[i] + y[i] ) # (5) y\u306b\u95a2\u3059\u308b\u5236\u7d04\n  @constraint(m, sum(y[i] for i=1:n) == 1) # (6) \u5148\u982d\u306f1\u3064\u3060\u3051\n  @time status=solve(m)\n  println(status)\n  ys=getvalue(y)\n  xs=getvalue(x)\n  return m, status, ys, xs\nend\n```\n\n\u3000\u95a2\u6570 `siritori(kw)` \u306f\u3001\u6587\u5b57\u5217(\u5358\u8a9e)\u306e\u914d\u5217 `kw` \u306b\u5bfe\u3057\u3066\u3001\u6700\u9069\u5316\u3092\u7528\u3044\u3066\u3001\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u6c42\u3081\u3088\u3046\u3068\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u3000\u5b9a\u5f0f\u5316\u306f[\u53c2\u7167\u8a18\u4e8b](http://qiita.com/Tsutomu-KKE@github/items/ba2dedb5795cae36f8a1) \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u306e (0)-(6) \u306f\u3001\u53c2\u7167\u8a18\u4e8b\u306e\u6761\u4ef6\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u3000\u5b9f\u88c5\u4e0a\u306e\u5927\u304d\u306a\u9055\u3044\u306f\u3001\u5b9a\u7fa9\u3059\u308b\u5909\u6570\u3067\u3059\u3002\u53c2\u7167\u8a18\u4e8b\u3067\u306f\u300c\u3057\u308a\u3068\u308a\u300d\u304c\u53ef\u80fd\u306a\u5358\u8a9e\u9593\u306e\u5411\u304d\u4ed8\u304d\u30ea\u30f3\u30af ($i \\rightarrow j$ ) \u306b\u5bfe\u3057\u3066\u306e\u307f\u5909\u6570 $x_{i,j}$ \u3092\u751f\u6210\u3059\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001\u3053\u3053\u3067\u306f\u3001\u5909\u6570 $x_{i,j}$ \u3092\u5168\u3066\u751f\u6210\u3057\u305f\u4e0a\u3067\u3001\u300c\u3057\u308a\u3068\u308a\u300d\u304c\u4e0d\u53ef\u80fd\u306a\u30ea\u30f3\u30af\u306b\u5bfe\u3057\u3066\u5236\u7d04\u6761\u4ef6\u3067 $x_{i,j} = 0$ \u3092\u8ab2\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u66f4\u306b\u3001\u81ea\u5206\u81ea\u8eab\u3078\u306e\u30ea\u30f3\u30af ($i \\rightarrow i$) \u3092\u3001\u660e\u793a\u7684\u306b\u7981\u6b62\u3057\u307e\u3057\u305f\u3002$x_{i,i} = 0$\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u30b3\u30e1\u30f3\u30c8: \u5236\u7d04(A)\n\n# \u7c21\u5358\u306a\u4f8b\n\n \u7c21\u5358\u306a\u4f8b\u3067\u5b9f\u9a13\u3057\u307e\u3059\u3002\n\n```Julia\njulia> kw1 = [ \"cde\", \"txy\", \"abc\", \"rst\", \"rsr\", \"pqr\"  ]\n6-element Array{String,1}:\n \"cde\"\n \"txy\"\n \"abc\"\n \"rst\"\n \"rsr\"\n \"pqr\"\n\njulia> mm1, stat1, yo1, xo1 = siritori(kw1)\n  0.015661 seconds (99 allocations: 24.438 KB)\nOptimal\n(Maximization problem with:\n * 55 linear constraints\n * 42 variables: 42 binary\nSolver is default solver,:Optimal,[0.0,0.0,0.0,0.0,0.0,1.0],\n[0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0; \u2026 ; 0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 1.0 0.0])\n\njulia> getobjectivevalue(mm1)\n3.0\n\njulia> yo1\n6-element Array{Float64,1}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n\njulia> xo1\n6\u00d76 Array{Float64,2}:\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  1.0  0.0  0.0\n 0.0  0.0  0.0  0.0  1.0  0.0\n```\n\n\u3000\u691c\u51fa\u3055\u308c\u305f\u300c\u3057\u308a\u3068\u308a\u300d(\u30ea\u30f3\u30af)\u3092\u5370\u5b57\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n```Julia\nfunction print_links(kw,xs)\n  count=0\n  n=size(xs,1)\n  for is=1:n\n    ie=findfirst(xs[is,:])\n    if (ie > 0)\n      println( \"$(is) $(kw[is]) -> $(ie) $(kw[ie])\" )\n      count += 1\n    end\n  end\n  println(\"count=$(count)\")\nend\n```\n\n\u3000$x_{i,j} = 1$ \u306a\u3089\u3001$i \\rightarrow j$ \u306e\u300c\u3057\u308a\u3068\u308a\u300d\uff08\u30ea\u30f3\u30af\uff09\u304c\u6210\u7acb\u3057\u3066\u3044\u307e\u3059\u3002\u5404\u884c $i$ \u306e\u30b9\u30e9\u30a4\u30b9 `x[i,:]` \u304b\u3089 `1` \u304c\u5165\u3063\u3066\u3044\u308b\u5217\u756a\u53f7 $j$ \u3092\u63a2\u7d22\u3057\u307e\u3059\u3002\u63a2\u7d22\u306b\u306f\u3001\u95a2\u6570 [`findfirst(v)`](http://docs.julialang.org/en/stable/stdlib/arrays/#Base.findfirst) \u3092\u7528\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001`0` \u4ee5\u5916\u306e\u6570\u304c\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u914d\u5217\u6dfb\u5b57\u3092\u8fd4\u3057\u307e\u3059\u3002\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u623b\u308a\u5024\u306f `0` \u3067\u3059\u3002\n\u3000`(\u5f0f1) || (\u5f0f2)` \u306f\u3001\n```\nif (not (\u5f0f1))\n  (\u5f0f2)\nend\n```\n\n\u3068\u7b49\u4fa1\u3067\u3059\u3002 `(\u5f0f1) || (\u5f0f2)` \u306e\u8ad6\u7406\u5f0f\u306e\u771f\u507d\u306f\u3001`(\u5f0f1)` \u304c\u507d\u306a\u3089\u3001`(\u5f0f2)` \u3092\u8abf\u3079\u306a\u3044\u3068\u5206\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002 [short circuit evaluation](http://docs.julialang.org/en/stable/manual/control-flow/#short-circuit-evaluation) \u3068\u3044\u3044\u307e\u3059\u3002\n\u3000\u6587\u5b57\u5217\u4e2d\u306b `\"$(\u5f0f)\"` \u3068\u66f8\u304f\u3068\u3001\u5f0f\u306e\u8a55\u4fa1\u7d50\u679c\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002(Ruby \u306e `\"#{\u5f0f}\"`\u3000\u3068\u540c\u3058\u3067\u3059\u306d\u3002)\n\u3000\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```Julia\njulia> print_links(kw1,xo1)\n4 rst -> 2 txy\n5 rsr -> 4 rst\n6 pqr -> 5 rsr\ncount=3\n```\n\n\u3000\u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u3092\u5370\u5b57\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\u300c\u3057\u308a\u3068\u308a\u300d\u306e\u6700\u521d\u306e\u5358\u8a9e\u306e\u756a\u53f7\u306f\u3001\u914d\u5217 `y` \u304c\u975e\u96f6\u3068\u306a\u308b\u6dfb\u5b57\u3067\u3059\u3002\n\n\n```Julia\nfunction print_siri(kw,ys,xs)\n  is=findfirst(ys)\n  is > 0 || return\n  print( \"$(is) $(kw[is])\")\n  count=0\n  while true\n    is=findfirst(xs[is,:])\n    is > 0 || break\n    print( \" ->\\n$(is) $(kw[is])\" )\n    count += 1\n  end\n  println(\"\\ncount=$(count)\")\nend\n```\n\n\u3000\u3067\u306f\u5b9f\u884c\u3002\u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u304c\u691c\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\n\n```\njulia> print_siri(kw1,yo1,xo1)\n6 pqr ->\n5 rsr ->\n4 rst ->\n2 txy\ncount=3\n```\n\n# \u5c11\u3057\u9577\u3044\u4f8b\u3002\n\n\u3000\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u3088\u3046\u306b\u3001C++\u306e\u30ad\u30fc\u30ef\u30fc\u30c9 84\u500b\u3067\u300c\u3057\u308a\u3068\u308a\u300d\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u3000\u307e\u305a\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```Julia\njulia> cppkw = \"\"\"\n       alignas,alignof,and,and_eq,asm,auto,bitand,bitor,bool,break,case,\n       catch,char,char16_t,char32_t,class,compl,const,constexpr,const_cast,\n       continue,decltype,default,delete,do,double,dynamic_cast,else,enum,\n       explicit,export,extern,false,float,for,friend,goto,if,inline,int,long,\n       mutable,namespace,new,noexcept,not,not_eq,nullptr,operator,or,or_eq,\n       private,protected,public,register,reinterpret_cast,return,short,\n       signed,sizeof,static,static_assert,static_cast,struct,switch,template\n       this,thread_local,throw,true,try,typedef,typeid,typename,union,\n       unsigned,using,virtual,void,volatile,wchar_t,while,xor,xor_eq\"\"\"\n\"alignas,alignof,and,and_eq,asm,auto,bitand,bitor,bool,break,case,\\ncatch,char,char16_t,char32_t,class,compl,const,constexpr,const_cast,\\ncontinue,decltype,default,delete,do,double,dynamic_cast,else,enum,\\nexplicit,export,extern,false,float,for,friend,goto,if,inline,int,long,\\nmutable,namespace,new,noexcept,not,not_eq,nullptr,operator,or,or_eq,\\nprivate,protected,public,register,reinterpret_cast,return,short,\\nsigned,sizeof,static,static_assert,static_cast,struct,switch,template\\nthis,thread_local,throw,true,try,typedef,typeid,typename,union,\\nunsigned,using,virtual,void,volatile,wchar_t,while,xor,xor_eq\"\n\njulia> ckw=split(cppkw, r\"[,\\n]+\")\n84-element Array{SubString{String},1}:\n \"alignas\" \n \"alignof\" \n \"and\"     \n \"and_eq\"  \n \"asm\"     \n \"auto\"    \n \"bitand\"  \n \"bitor\"   \n \"bool\"    \n \"break\"   \n \u22ee         \n \"unsigned\"\n \"using\"   \n \"virtual\" \n \"void\"    \n \"volatile\"\n \"wchar_t\" \n \"while\"   \n \"xor\"     \n \"xor_eq\"  \n```\n\n\u3000`\"\"\"` \u3067\u59cb\u3081\u308b\u6587\u5b57\u5217\u306f\u6539\u884c\u3067\u304d\u307e\u3059\u3002 `\"\"\"` \u3067\u7d42\u4e86\u3057\u307e\u3059\u3002\u6539\u884c\u6587\u5b57 `\\n`\u3000\u304c\u5165\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\u3000 [`split(s, ch)`](http://docs.julialang.org/en/stable/stdlib/strings/#Base.split) \u306f\u3001\u6587\u5b57\u5217 `s` \u3092\u3001\u6587\u5b57\u3084\u6b63\u898f\u8868\u73fe `ch` \u3067\u533a\u5207\u3063\u3066\u3001\u6587\u5b57\u5217\u914d\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30ab\u30f3\u30de `,` \u307e\u305f\u306f\u6539\u884c\u6587\u5b57\u3067\u533a\u5207\u308a\u307e\u3057\u305f\u3002\n\n\u3000\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\njulia> cm, c, cy, cx = siritori(ckw)\n  0.148403 seconds (134 allocations: 3.093 MB)\nOptimal\n(Maximization problem with:\n * 6975 linear constraints\n * 7140 variables: 7140 binary\nSolver is default solver,:Optimal,[1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0  \u2026  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],\n[0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0; \u2026 ; 0.0 0.0 \u2026 0.0 0.0; 0.0 0.0 \u2026 0.0 0.0])\n```\n\n```\njulia> print_links(ckw,cx)\n1 alignas -> 59 signed\n16 class -> 60 sizeof\n23 default -> 73 typeid\n25 do -> 50 or\n27 dynamic_cast -> 72 typedef\n28 else -> 30 explicit\n29 enum -> 42 mutable\n30 explicit -> 74 typename\n31 export -> 67 this\n32 extern -> 44 new\n34 float -> 66 template\n36 friend -> 27 dynamic_cast\n37 goto -> 49 operator\n41 long -> 37 goto\n42 mutable -> 28 else\n44 new -> 82 while\n46 not -> 68 thread_local\n49 operator -> 57 return\n50 or -> 55 register\n55 register -> 56 reinterpret_cast\n56 reinterpret_cast -> 69 throw\n57 return -> 46 not\n59 signed -> 23 default\n60 sizeof -> 36 friend\n61 static -> 16 class\n67 this -> 61 static\n68 thread_local -> 41 long\n69 throw -> 81 wchar_t\n70 true -> 31 export\n72 typedef -> 34 float\n73 typeid -> 25 do\n74 typename -> 32 extern\n81 wchar_t -> 70 true\n82 while -> 29 enum\ncount=34\n\njulia> getobjectivevalue(cm)\n34.0\n```\n\n\u300034\u500b\u306e\u30ea\u30f3\u30af\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\u3000\u6700\u9577\u3057\u308a\u3068\u308a\u3092\u5370\u5b57\u3057\u307e\u3057\u3087\u3046\u3002\n\n```Julia \njulia> print_siri(ckw,cy,cx)\n1 alignas ->\n59 signed ->\n23 default ->\n73 typeid ->\n25 do ->\n50 or ->\n55 register ->\n56 reinterpret_cast ->\n69 throw ->\n81 wchar_t ->\n70 true ->\n31 export ->\n67 this ->\n61 static ->\n16 class ->\n60 sizeof ->\n36 friend ->\n27 dynamic_cast ->\n72 typedef ->\n34 float ->\n66 template\ncount=20\n```\n\n\u3042\u308c\u308c\u300120\u56de\u76ee\u3067\u9014\u5207\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n`print_links` \u306e\u7d50\u679c\u304b\u3089\u3001\u624b\u3067\u300c\u3057\u308a\u3068\u308a\u300d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n1 alignas -> 59 signed\n59 signed -> 23 default\n23 default -> 73 typeid\n73 typeid -> 25 do\n25 do -> 50 or\n50 or -> 55 register\n55 register -> 56 reinterpret_cast\n56 reinterpret_cast -> 69 throw\n69 throw -> 81 wchar_t\n81 wchar_t -> 70 true\n70 true -> 31 export\n31 export -> 67 this\n67 this -> 61 static\n61 static -> 16 class\n16 class -> 60 sizeof\n27 dynamic_cast -> 72 typedef\n28 else -> 30 explicit\n29 enum -> 42 mutable\n30 explicit -> 74 typename\n32 extern -> 44 new\n34 float -> 66 template\n\n41 long -> 37 goto\n37 goto -> 49 operator\n49 operator -> 57 return\n57 return -> 46 not\n46 not -> 68 thread_local\n68 thread_local -> 41 long\n\n44 new -> 82 while\n82 while -> 29 enum\n\n36 friend -> 27 dynamic_cast\n\n42 mutable -> 28 else\n\n60 sizeof -> 36 friend\n\n72 typedef -> 34 float\n\n74 typename -> 32 extern\n```\n\n\u30ea\u30f3\u30af\u306f\u3001\u4ee5\u4e0b\u306b\u5206\u985e\u3055\u308c\u307e\u3057\u305f\u3002\n\n- `1` \u304b\u3089 `66` \n- `41` \u304b\u3089\u306e\u5faa\u74b0\u3002\n- `44` \u2192 `82` \u2192 `29` \n- \u7d9a\u304b\u306a\u3044\u300c\u3057\u308a\u3068\u308a\u300d 5\u500b\n\n\u3000\u632f\u308a\u8fd4\u3063\u3066\u307f\u308c\u3070\u3001\u4eca\u56de\u306e\u5b9a\u5f0f\u5316\u306f\u3001\u300c\"\u3057\u308a\u3068\u308a\"\u306e\u7dcf\u6570\u3092\u6700\u5927\u306b\u3059\u308b\u3053\u3068\u300d\u304c\u76ee\u7684\u3067\u3042\u308a\u3001\u300c\u3057\u308a\u3068\u308a\u3092\u306a\u308b\u3079\u304f\u9023\u7d50\u3059\u308b\u300d\u3068\u3044\u3046\u6761\u4ef6\u306f\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3002$x_{i,j}$ \u306e\u7d44\u5408\u305b\u306f\u6709\u9650\u3067\u3059\u304b\u3089\u3001\u5168\u3066\u306e\u5834\u5408\u3092\u8a66\u884c\u3059\u308c\u3070 \u300c\u6700\u9577\u3057\u308a\u3068\u308a\u300d\u3092\u898b\u3064\u3051\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u4eca\u56de\u306e\u76ee\u7684\u95a2\u6570\u3067\u306f\u9069\u5f53\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n# \u30ea\u30f3\u30af\n\nJulia \u306e\u6700\u9069\u5316\u30d1\u30c3\u30b1\u30fc\u30b8 JuMP \u306b\u95a2\u3059\u308b\u8a18\u4e8b\u3067\u3059\u3002\n- [\u300c\u6700\u9069\u5316\u306b\u304a\u3051\u308b Julia : JuMP\u4e8b\u59cb\u3081\u300d](http://qiita.com/tenfu2tea/items/499ff93897f25a0256c0) \n- [\u300c\u540c: JuMP \u3067 N-Queen \u3092\u89e3\u304f\u300d](http://qiita.com/tenfu2tea/items/b1ad78cc9f0942fdbc93)\n- [\u300c\u540c: - JuMP \u3067\u8272\u3005\u89e3\u304f\u300d](http://qiita.com/tenfu2tea/items/29cb927f1e785047532c) (\u4eca\u5f8c\u3082\u8ffd\u8a18\u4e88\u5b9a)\n \n\n\n"}