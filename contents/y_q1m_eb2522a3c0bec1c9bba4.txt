{"tags": ["Java", "java8"], "context": " More than 1 year has passed since last update.\u5c0f\u30cd\u30bf\u3067\u3059\u3002\n\nCode\nreadDir \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u30d5\u30a9\u30eb\u30c0\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3001\u305d\u3053\u306b\u7f6e\u3044\u3066\u3042\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092 load \u3057\u3066\u3001Optional \u3067 Properties \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30eb\u30c0\u3092\u6e21\u3055\u308c\u305f\u5834\u5408\u306f Optional \u306e empty \u3092\u8fd4\u3057\u307e\u3059\u3002 Java8 \u4ee5\u524d\u306e\u74b0\u5883\u3067\u3042\u308c\u3070\u9069\u5b9c\u7a7a\u306e Properties \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.util.Optional;\nimport java.util.Properties;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.eclipse.collections.impl.block.factory.Procedures;\nimport org.eclipse.collections.impl.factory.Lists;\n\npublic class Props {\n\n    /**\n     * deny make instance.\n     */\n    private Props() {\n        // Noop\n    }\n\n    /**\n     * read all properties from passed directory path.\n     * @param dirPath directory path.\n     * @return properties object.\n     */\n    public static Optional<Properties> readDir(final String dirPath) {\n        if (StringUtils.isBlank(dirPath)) {\n            return Optional.empty();\n        }\n        final File dir = new File(dirPath);\n        if (!dir.exists() || !dir.canRead()) {\n            return Optional.empty();\n        }\n        final Properties prop = new Properties();\n        Lists.immutable.with(dir.listFiles()).each(\n                Procedures.throwing(f -> {\n                    // (\u203b) try-with-resource\n                    try (final BufferedReader reader\n                            = Files.newBufferedReader(f.toPath(), StandardCharsets.UTF_8)) {\n                        prop.load(reader);\n                    }}));\n        return Optional.of(prop);\n    }\n}\n\nFiles.newBufferedReader() \u3092\u4f7f\u3063\u3066 reader \u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\ntry-with-resource \u3067 reader \u3092\u81ea\u52d5\u7684\u306b close() \u3055\u305b\u307e\u3059\u3002\nPowered by Eclipse Collections.\n\nTest code\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Optional;\nimport java.util.Properties;\n\nimport org.junit.Test;\n\npublic class PropsTest {\n\n    /** expected object. */\n    private static final Properties EXPECTED = new Properties();\n    static {\n        EXPECTED.put(\"tomato\", \"120\");\n        EXPECTED.put(\"editorPath\", \"C:/Program Files (x86)/TeraPad/TeraPad.exe\");\n    }\n\n    /**\n     * check behavior readDir method.\n     */\n    @Test\n    public final void testReadDir() {\n        assertEquals(Optional.empty(), Props.readDir(null));\n        assertEquals(Optional.empty(), Props.readDir(\"notExits\"));\n        assertEquals(EXPECTED, Props.readDir(\"src/test/resources/libs/props\").get());\n    }\n\n}\n\n\nsrc/test/resources/libs/props \u306b\u7f6e\u3044\u305fProperties\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\n\nfile 1\neditorPath=C:/Program Files (x86)/TeraPad/TeraPad.exe\n\n\nfile 2\ntomato=120\n\n\n\u6539\u826f\u70b9\n\nPath \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\u62e1\u5f35\u5b50\u3042\u308b\u3044\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\n\n\u8ffd\u8a18\n(\u203b) \u5f53\u521d\u63b2\u8f09\u3057\u3066\u3044\u305f\u4e0b\u8a18\u306e Iteration \u3067\u306f reader \u306e close() \u304c\u5b9f\u65bd\u3055\u308c\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3054\u6307\u6458\u306e\u901a\u308a\u4e0b\u8a18\u3067\u306f close() \u304c\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\u8a18\u4e8b\u4e2d\u306e\u30b3\u30fc\u30c9\u306f\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n        Lists.immutable.with(dir.listFiles()).each(\n                Procedures.throwing(f -> {\n                    prop.load(Files.newBufferedReader(f.toPath(), Charset.defaultCharset()));}));\n\n\u5c0f\u30cd\u30bf\u3067\u3059\u3002\n\n#### Code\nreadDir \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u30d5\u30a9\u30eb\u30c0\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u3001\u305d\u3053\u306b\u7f6e\u3044\u3066\u3042\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092 load \u3057\u3066\u3001Optional \u3067 Properties \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a9\u30eb\u30c0\u3092\u6e21\u3055\u308c\u305f\u5834\u5408\u306f Optional \u306e empty \u3092\u8fd4\u3057\u307e\u3059\u3002 Java8 \u4ee5\u524d\u306e\u74b0\u5883\u3067\u3042\u308c\u3070\u9069\u5b9c\u7a7a\u306e Properties \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```java\nimport java.io.File;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.util.Optional;\nimport java.util.Properties;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.eclipse.collections.impl.block.factory.Procedures;\nimport org.eclipse.collections.impl.factory.Lists;\n\npublic class Props {\n\n    /**\n     * deny make instance.\n     */\n    private Props() {\n        // Noop\n    }\n\n    /**\n     * read all properties from passed directory path.\n     * @param dirPath directory path.\n     * @return properties object.\n     */\n    public static Optional<Properties> readDir(final String dirPath) {\n        if (StringUtils.isBlank(dirPath)) {\n            return Optional.empty();\n        }\n        final File dir = new File(dirPath);\n        if (!dir.exists() || !dir.canRead()) {\n            return Optional.empty();\n        }\n        final Properties prop = new Properties();\n        Lists.immutable.with(dir.listFiles()).each(\n                Procedures.throwing(f -> {\n                    // (\u203b) try-with-resource\n                    try (final BufferedReader reader\n                            = Files.newBufferedReader(f.toPath(), StandardCharsets.UTF_8)) {\n                        prop.load(reader);\n                    }}));\n        return Optional.of(prop);\n    }\n}\n```\nFiles.newBufferedReader() \u3092\u4f7f\u3063\u3066 reader \u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\ntry-with-resource \u3067 reader \u3092\u81ea\u52d5\u7684\u306b close() \u3055\u305b\u307e\u3059\u3002\n\nPowered by Eclipse Collections.\n\n\n#### Test code\n\n```java\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Optional;\nimport java.util.Properties;\n\nimport org.junit.Test;\n\npublic class PropsTest {\n\n    /** expected object. */\n    private static final Properties EXPECTED = new Properties();\n    static {\n        EXPECTED.put(\"tomato\", \"120\");\n        EXPECTED.put(\"editorPath\", \"C:/Program Files (x86)/TeraPad/TeraPad.exe\");\n    }\n\n    /**\n     * check behavior readDir method.\n     */\n    @Test\n    public final void testReadDir() {\n        assertEquals(Optional.empty(), Props.readDir(null));\n        assertEquals(Optional.empty(), Props.readDir(\"notExits\"));\n        assertEquals(EXPECTED, Props.readDir(\"src/test/resources/libs/props\").get());\n    }\n\n}\n```\n\n#### src/test/resources/libs/props \u306b\u7f6e\u3044\u305fProperties\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\n##### file 1\n    editorPath=C:/Program Files (x86)/TeraPad/TeraPad.exe\n\n##### file 2\n    tomato=120\n\n\n### \u6539\u826f\u70b9\n1. Path \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n2. \u62e1\u5f35\u5b50\u3042\u308b\u3044\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n---\n# \u8ffd\u8a18\n(\u203b) \u5f53\u521d\u63b2\u8f09\u3057\u3066\u3044\u305f\u4e0b\u8a18\u306e Iteration \u3067\u306f reader \u306e close() \u304c\u5b9f\u65bd\u3055\u308c\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3054\u6307\u6458\u306e\u901a\u308a\u4e0b\u8a18\u3067\u306f close() \u304c\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\u8a18\u4e8b\u4e2d\u306e\u30b3\u30fc\u30c9\u306f\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n```\n        Lists.immutable.with(dir.listFiles()).each(\n                Procedures.throwing(f -> {\n                    prop.load(Files.newBufferedReader(f.toPath(), Charset.defaultCharset()));}));\n```\n"}