{"context": " More than 1 year has passed since last update.\n\n\u30c7\u30d0\u30c3\u30b0\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\nassert\u6587\n\u5909\u6570test\u304c\u507d\u306a\u3089AssertionError\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u3002\ntest = 0\ndata = \"assertion error\"\n\ntry:\n    assert test,data\nexcept AssertionError:\n    print data\nfinally:\n    print \"the end\"\n\nassert\u6587\u306e\u90e8\u5206\u306e\u307f\u306a\u3089\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u4e8b\u3067\u4ee3\u7528\u3082\u3067\u304d\u308b\u3002\nif __debug__:\n  if not test\n    raise AssertionError, data\n\n\n\u4f8b\u5916\u306e\u5206\u96e2\u51e6\u7406\u3084\u5185\u5bb9\u306e\u8868\u793a\nsomedata = 1\n\n# \u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3044\u4f8b\u5916\u3092\u30bf\u30d7\u30eb\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\nfatal_exceptions = (KeyboardInterrupt, MemoryError)\n\ntry:\n    assert somedata\nexcept fatal_exceptions, inst:  # \u5f15\u6570inst\u3067\u4f8b\u5916\u306e\u5185\u5bb9\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n    print type(inst)    # \u4f8b\u5916\u306e\u578b\u3092\u8868\u793a\n    print inst          # \u4f8b\u5916\u306e\u5185\u5bb9\u3092\u8868\u793a\n    raise\n# \u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u3092\u307e\u3068\u3081\u3066\u30ad\u30e3\u30c3\u30c1\nexcept Exception, inst:\n    print type(inst)    # \u4f8b\u5916\u306e\u578b\u3092\u8868\u793a\n    print inst          # \u4f8b\u5916\u306e\u5185\u5bb9\u3092\u8868\u793a\nfinally:\n    print \"the end\"\n\n\u3000\n\nUnitTest\n\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304b\u3089\u306e\u4f8b\u3092\u5c11\u3057\u4fee\u6b63\u3068\u8ffd\u52a0\u3002\nimport random\nimport unittest\n\nclass TestSequenceFunctions(unittest.TestCase):\n\n    # \u6bce\u56de\u547c\u3070\u308c\u308b\u521d\u671f\u5316\u51e6\u7406\n    # \u3053\u306e\u4ed6\u306b\u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306a\u3069\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\n    def setUp(self):\n        self.seq = range(10)\n\n    # test\u3067\u59cb\u307e\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u8a18\u8ff0\u3059\u308b\u3002\n    def test_shuffle(self):\n        random.shuffle(self.seq)\n        self.seq.sort()\n\n        # \u4e8c\u3064\u306e\u5f15\u6570\u304c\u30a4\u30b3\u30fc\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        # \u7b49\u3057\u304f\u306a\u3044\u3053\u3068\u306e\u30c1\u30a7\u30c3\u30af\u306fassertNotEqual()\u3067\u884c\u3048\u308b\u3002\n        self.assertEqual(self.seq, range(10))\n\n        # \u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3002\n        # assertRaises(exception, callable, *args, **kwds)\n        # \u7b2c\u4e8c\u5f15\u6570\u306e\u95a2\u6570\u306bargs\u3068kwds\u3092\u6e21\u3057\u3066\u3001\u7b2c\u4e00\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        self.assertRaises(TypeError, random.shuffle, (1,2,3))\n\n    def test_choice(self):\n        element = random.choice(self.seq)\n\n        # \u5f15\u6570\u306e\u5024\u304cTrue\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        # bool(element) is True \u3068\u7b49\u4fa1\n        self.assertTrue(element in self.seq)\n\n    def test_sample(self):\n\n        # exception \u5f15\u6570\u306e\u307f\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u304c\u8fd4\u3055\u308c\u308b\u3002\n        # \u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n        with self.assertRaises(ValueError):\n            random.sample(self.seq, 20)\n        for element in random.sample(self.seq, 5):\n            self.assertTrue(element in self.seq)\n\nif __name__ == '__main__':\n\n    # main()\u3067\u5b9f\u884c\u3067\u304d\u308b\u3002\n    unittest.main()\n\n    # \u500b\u5225\u306b\u5b9f\u884c\u3059\u308b\u30c6\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002\n    _test_choice = TestSequenceFunctions('test_choice')\n    _test_sample = TestSequenceFunctions('test_sample')\n\n    # \u30c6\u30b9\u30c8\u30b9\u30a4\u30fc\u30c8\u306b\u767b\u9332\u3057\u3066\u30e9\u30f3\u30ca\u30fc\u3067\u307e\u3068\u3081\u3066\u5b9f\u884c\u3067\u304d\u308b\u3002\n    TestSuite = unittest.TestSuite()\n    TestSuite.addTest(_test_choice)\n    TestSuite.addTest(_test_sample)\n    runner = unittest.TextTestRunner()\n    runner.run(TestSuite)\n\n    # \u30ed\u30fc\u30c0\u30fc\u3067\u307e\u3068\u3081\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n    suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)\n    unittest.TextTestRunner(verbosity=2).run(suite)\n\n\u3000\n\ntraceback\n\u30b9\u30bf\u30c3\u30af\u3068\u306f\u73fe\u5728\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3067\u3042\u308b\u3002\n\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3068\u306f\u3001\u305d\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u72b6\u614b(\u95a2\u6570\u540d\u3001\u547c\u3073\u5143\u95a2\u6570\u540d\u3001\u884c\u3001\u547d\u4ee4\u6587\u3001\u30d5\u30a1\u30a4\u30eb\u540d)\u306a\u3069\u306e\u72b6\u614b\u3092\u8a18\u9332\u3057\u305f\u3082\u306e\u3067\u3042\u308a\u3001Python\u306e\u3088\u3046\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u306f\u3053\u308c\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\u307e\u305a\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u60c5\u5831\u306fsys.exc_info() \u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nexc_type, exc_value, exc_traceback = sys.exc_info()\n\n\u3053\u306e\u4e09\u3064\u306e\u5909\u6570\u3092\u5f15\u6570\u306b\u4f7f\u7528\u3057\u3066\u3001traceback.print_tb()\u3084traceback.print_exception()\u3067\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u3002\n\u3057\u304b\u3057\u3001\u4e0b\u8a18\u306etraceback.print_exc()\u3092\u4f7f\u3046\u3068\u3001sys.exc_info()\u304b\u3089\u306e\u5909\u6570\u53d6\u5f97\u304c\u7701\u7565\u3067\u304d\u3066\u3001\u3057\u304b\u3082\u30bf\u30a4\u30d7\u3084\u5185\u5bb9\u3082\u8868\u793a\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u3002\u57fa\u672c\u7684\u306b\u306f\u3053\u308c\u3092\u4f7f\u7528\u3059\u308c\u3070\u3044\u3044\u3002\nimport sys\nimport traceback\n\ndef somework():\n    try:\n        print a # \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\n    except Exception:\n        print \"error\"\n        traceback.print_exc(file=sys.stdout)\n    finally:\n        print \"the end\"\n\nif __name__ == '__main__':\n    somework()\n\n\u51fa\u529b\u7d50\u679c\n\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3001\u884c\u3001\u95a2\u6570\u540d\u3001\u539f\u56e0\u306e\u547d\u4ee4\u6587\u3001\u539f\u56e0\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\nerror\nTraceback (most recent call last):\n  File \"/Users/test.py\", line 8, in somework\n    print a\nNameError: global name 'a' is not defined\nthe end\n\n\u3053\u3061\u3089\u306ftraceback\u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u51fa\u529b\u3002\n\u4f8b\u5916\u3092\u901a\u904e\u3059\u308b\u3060\u3051\u3067\u4f55\u3082\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\nerror\nthe end\n\n\u6b21\u306b\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u60c5\u5831\u3092\u30bf\u30d7\u30eb\u3092\u542b\u3093\u3060\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3059\u3002\n\u3053\u3061\u3089\u306fsys.exc_info()\u304b\u3089\u5909\u6570\u3092\u53d6\u5f97\u3059\u308b\u4f8b\u3082\u8f09\u305b\u3066\u304a\u304f\u3002(\u305d\u308c\u3092\u5f15\u6570\u306b\u4f7f\u3063\u3066\u3044\u308b\u304b\u3089)\nimport sys\nimport traceback\n\ndef somework():\n    try:\n        print a # \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\n    except Exception:\n        print \"error\"\n        exc_type, exc_value, exc_traceback = sys.exc_info()\n        print traceback.extract_tb(exc_traceback) # \u73fe\u5728\u306e\u60c5\u5831\u3060\u3051\u3092\u53d6\u5f97\n        print traceback.extract_stack() # \u547c\u3073\u51fa\u3057\u5143\u306e\u95a2\u6570\u60c5\u5831\u3092\u542b\u3080\u30bf\u30d7\u30eb\u3092\u53d6\u5f97\n\n        # \u30bf\u30d7\u30eb\u3067\u306f\u306a\u304f\u5358\u306b\u30ea\u30b9\u30c8\u3067\u53d7\u3051\u53d6\u3063\u3066\u8868\u793a\u3057\u3084\u3059\u304f\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u308c\u3092\u547c\u3076\u3002\n        traceback.format_tb(exc_traceback)\n        traceback.format_stack()\n\n        print \"the end\"\n\nif __name__ == '__main__':\n    somework()\n\n\nnosetest\n\u300ePython\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nnose\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install nose\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u5358\u7d14\u306b\u9280\u884c\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u6570\u5b57\u3092\u8db3\u3057\u305f\u308a\u6e1b\u3089\u3057\u305f\u308a\u3059\u308b\u3060\u3051\u3002\n# coding: UTF-8\n\nclass NotEnoughFundsException(Exception):\n    pass\n\nclass BankAccount(object):\n\n    def __init__(self):\n        self._balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount\n\n    def get_balance(self):\n        return self._balance\n\n    def set_balance(self, value):\n        if value < 0:\n            raise NotEnoughFundsException\n\n        self._balance = value\n\n    # \u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u30e9\u30c3\u30d1\u30fc\u3092\u7528\u610f\u3059\u308b\u3002\n    # balance\u306b=\u3084+\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u3053\u308c\u3089\u306e\u95a2\u6570\u304c\u81ea\u52d5\u3067\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n    balance = property(get_balance, set_balance)\n\nnose\u3067\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3002\n\u3053\u3053\u3067100\u30840\u306a\u3069\u306e\u30c6\u30b9\u30c8\u7528\u306e\u56fa\u5b9a\u306e\u5024\u3092\u6e96\u5099\u3059\u308b\u3053\u3068\u3092\u30c7\u30fc\u30bf\u30d5\u30a3\u30af\u30b9\u30c1\u30e3\u3068\u3044\u3046\u3002\n# coding: UTF-8\n\nimport unittest\n\nclass BankAccountTest(unittest.TestCase):\n\n    def _getTarget(self):\n        from bankaccount import BankAccount\n        return BankAccount\n\n    # \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n    def _makeOne(self, *args, **kwargs):\n        return self._getTarget()(*args, **kwargs)\n\n    def test_construct(self):\n        target = self._makeOne()\n        self.assertEqual(target._balance, 0)\n\n    def test_deposit(self):\n        target = self._makeOne()\n        target.deposit(100)\n        self.assertEqual(target._balance, 100)\n\n    def test_withdraw(self):\n        target = self._makeOne()\n        target._balance = 100\n        target.withdraw(20)\n        self.assertEqual(target._balance, 80)\n\n    def test_get_blance(self):\n        target = self._makeOne()\n        target._balance = 500\n        self.assertEqual(target.get_balance(), 500)\n\n    def test_set_balance_not_enough_funds(self):\n        target = self._makeOne()\n        from bankaccount import NotEnoughFundsException\n        try:\n            target.set_balance(-1)\n            self.fail()\n        except NotEnoughFundsException:\n            pass\n\n\u4e0a\u8a18\u4e8c\u3064\u3092\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u3001\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067nose\u3092\u5b9f\u884c\u3059\u308b\u3002\nnosetest\n\n.....\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nOK\n\n\u3000\n\n\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u53d6\u5f97\npip install coverage\n\n# nosetests -v --with-coverage\ntest_construct (test_bankaccount.BankAccountTest) ... ok\ntest_deposit (test_bankaccount.BankAccountTest) ... ok\ntest_get_blance (test_bankaccount.BankAccountTest) ... ok\ntest_set_balance_not_enough_funds (test_bankaccount.BankAccountTest) ... ok\ntest_withdraw (test_bankaccount.BankAccountTest) ... ok\n\nName          Stmts   Miss  Cover   Missing\n-------------------------------------------\nbankaccount      16      0   100%\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nOK\n\n\u898b\u3084\u3059\u3044\u30ab\u30d0\u30ec\u30c3\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u300c--with-xunit\u300d\u30aa\u30d7\u30b7\u30e7\u30f3\u3067XUNIT\u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\u3002\n# nosetests -v -w . --with-coverage --with-xunit\ntest_construct (test_bankaccount.BankAccountTest) ... ok\ntest_deposit (test_bankaccount.BankAccountTest) ... ok\ntest_get_blance (test_bankaccount.BankAccountTest) ... ok\ntest_set_balance_not_enough_funds (test_bankaccount.BankAccountTest) ... ok\ntest_withdraw (test_bankaccount.BankAccountTest) ... ok\n\n----------------------------------------------------------------------\nXML: nosetests.xml\nName          Stmts   Miss  Cover   Missing\n-------------------------------------------\nbankaccount      16      0   100%\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nOK\n\njenkins\u3067\u8aad\u3081\u308b\u3088\u3046\u306bXML\u3067\u51fa\u529b\u3059\u308b\u3002\ncoverage xml\n\n\nmock\n\n\u666e\u901a\u306e\u4f7f\u3044\u65b9\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\ntest\u30e2\u30b8\u30e5\u30fc\u30eb\u306eTest.py\n# coding: UTF-8\n\nclass Widget(object):\n\n    def __init__(self):\n        self.value = 10\n\n    def Additional(self, add):\n        self.value += add\n        return self.value\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nfrom mock import Mock\nfrom test import Test\n\ndef mock_value(value):\n    return 20 + value\n\nif __name__ == '__main__':\n\n    # \u95a2\u6570\u3092\u7f6e\u304d\u63db\u3048\u3066\u3001100\u3092\u56fa\u5b9a\u3067\u8fd4\u3059\u30e2\u30c3\u30af\u306b\u3059\u308b\u3002\n    Test.Widget.Additional = Mock(return_value=100)\n\n    w = Test.Widget()\n    print w.Additional(1)\n\n    # \u56fa\u5b9a\u5024\u3067\u306f\u306a\u304f\u3001\u306a\u3093\u3089\u304b\u306e\u8a08\u7b97\u3092\u3059\u308b\u5834\u5408\u306fside_effect\u3067\u30c0\u30df\u30fc\u95a2\u6570\u3092\u6e21\u3059\u3002\n    Test.Widget.Additional = Mock(side_effect=mock_value)\n    print w.Additional(1)\n\n100\n21\n\n\n\u30af\u30e9\u30b9\u3092\u30e2\u30c3\u30af\u306b\u7f6e\u304d\u63db\u3048\u308b\nfrom mock import Mock\nfrom test import Test\n\ndef mock_value(value):\n    return 20 + value\n\nif __name__ == '__main__':\n\n    # \u30af\u30e9\u30b9\u81ea\u4f53\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\n    Test.Widget = Mock()\n    # \u95a2\u6570\u306e\u8fd4\u3059\u5024\u3092\u56fa\u5b9a\u3057\u3066\u3057\u307e\u3046\u3002\n    Test.Widget.return_value.Additional.return_value = 10\n\n    w = Test.Widget()\n    print w.Additional(1)\n\n    # \u95a2\u6570\u3092\u5165\u308c\u66ff\u3048\u308b\n    Test.Widget.return_value.Additional = mock_value\n    print w.Additional(1)\n\n\npatch\n\u95a2\u6570\u5b9f\u884c\u4e2d\u306emock\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u672c\u7269\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5dee\u3057\u66ff\u3048\u308b\u3002\n# coding: UTF-8\n\nfrom mock import patch\n\n# \u3053\u306e\u95a2\u6570\u5b9f\u884c\u4e2d\u3060\u3051\u7f6e\u304d\u63db\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u623b\u308a\u5024\u3092\u6307\u5b9a\n@patch(\"Test.Widget.Additional\", return_value=10)\ndef test_func(m): \n\n    import Test\n    w = Test.Widget()\n    print w.Additional(1)\n    assert w.Additional(1) == 10\n\n    # \u3061\u306a\u307f\u306b\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305fm\u306f\u30e2\u30c3\u30af\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305fAdditional\u95a2\u6570\n    # \u3060\u304b\u3089\u3053\u3061\u3089\u3082\u7d50\u679c\u306f10\u306b\u306a\u308b\u3002\n    # \u4eca\u56de\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u7f6e\u304d\u63db\u3048\u305f\u304c\u3001\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u30af\u30e9\u30b9\u306b\u306a\u308b\u3002\n    print m()\n\nif __name__ == '__main__':\n    test_func()\n\n\nwith\u3092\u4f7f\u3063\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u5f62\u5f0f\u306e\u5834\u5408\n# coding: UTF-8\n\nfrom mock import patch\n\ndef test_func():\n\n    # \u3053\u306ewith\u30b9\u30b3\u30fc\u30d7\u5b9f\u884c\u4e2d\u3060\u3051\u7f6e\u304d\u63db\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u623b\u308a\u5024\u3092\u6307\u5b9a\n    with patch(\"Test.Widget.Additional\", return_value=10) as m:\n        import Test\n        w = Test.Widget()\n        print w.Additional(1)\n        assert w.Additional(1) == 10\n        print m()\n\nif __name__ == '__main__':\n    test_func()\n\n\u3000\n\n\u30af\u30e9\u30b9\u578b\u6307\u5b9a\nmock = Mock(spec=SomeClass)\nisinstance(mock, SomeClass) #\u3053\u308c\u304c\u6210\u529f\u3059\u308b\n\n\u3000\n\nMock\u306b\u7279\u5b9a\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u6301\u305f\u305b\u308b\n# coding: UTF-8\nfrom mock import Mock, patch\n\nif __name__ == '__main__':\n    # method\u3068\u3044\u3046\u540d\u524d\u30673\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3001\n    # other\u3068\u3044\u3046\u540d\u524d\u3067KeyError\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u30e1\u30bd\u30c3\u30c9\n    attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n\n    # \u5ba3\u8a00\u3068\u540c\u6642\u306b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u8ffd\u52a0\u3082\u3067\u304d\u308b(some_attribute)\u3002\n    mock = Mock(some_attribute='eggs', **attrs)\n\n    print mock.some_attribute\n    print mock.method()\n    print mock.other()\n\n\n\u305d\u306e\u4ed6\u3000\n\u4ed6\u306b\u4fbf\u5229\u305d\u3046\u306a\u306e\u306f\u3001\n@patch('sys.stdout', new_callable=StringIO)\n\n\u3067\u3001\u751f\u6210\u6642\u306bStringIO\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u3002\n\u308f\u3056\u308f\u3056mock\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30c6\u30b9\u30c8\u7528\u306e\u7591\u4f3c\u30af\u30e9\u30b9\u3092\u66f8\u3044\u3066\u300cTest.Widget = \u300d\u3067\u4ee3\u5165\u3057\u3066\u3082\u3044\u3044\u3002mock\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u306e\u306a\u3089\u3001\u305d\u3061\u3089\u306e\u624b\u6bb5\u306e\u65b9\u304c\u306f\u3084\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\ndjango-webtest\u30e2\u30b8\u30e5\u30fc\u30eb\nDjango\u306e\u30c6\u30b9\u30c8\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\npip install webtest\npip install django-webtest\n\nDjango\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nmysite\n|-mysite\n|   |-__init__.py\n|   |-settings.py\n|   |-urls.py\n|   |-wsgi.py\n|-test app\n|   |-__init__.py\n|   |-form.py\n|   |-modes.py\n|   |-views.py\n|   |-tests.py\u3000\u3000\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f|\n|-templates\n|-manage.py\n\ntests.py\u306e\u5185\u5bb9\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\nfrom django_webtest import WebTest\n\nclass TestIndex(WebTest):\n\n    def test_index(self):\n        res = self.app.get(\"/\") #\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\n\n        # \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3084\u30b3\u30f3\u30c6\u30f3\u30c4\u5185\u5bb9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        assert res.status == '200 OK'\n        assert 'html' in res\n\nmanage.py runserver\u3067\u958b\u767a\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304a\u3044\u3066\u304b\u3089\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n# sudo python manage.py test testapp\n\n\u51fa\u529b\u7d50\u679c\nCreating test database for alias 'default'...\n.\n----------------------------------------------------------------------\nRan 1 test in 0.175s\n\nOK\nDestroying test database for alias 'default'...\n\n#\u30c7\u30d0\u30c3\u30b0\u3068\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\n### assert\u6587\n\u5909\u6570test\u304c\u507d\u306a\u3089AssertionError\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u3002\n\n```\ntest = 0\ndata = \"assertion error\"\n\ntry:\n    assert test,data\nexcept AssertionError:\n    print data\nfinally:\n    print \"the end\"\n```\n\nassert\u6587\u306e\u90e8\u5206\u306e\u307f\u306a\u3089\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u4e8b\u3067\u4ee3\u7528\u3082\u3067\u304d\u308b\u3002\n\n```\nif __debug__:\n  if not test\n    raise AssertionError, data\n```\n\n### \u4f8b\u5916\u306e\u5206\u96e2\u51e6\u7406\u3084\u5185\u5bb9\u306e\u8868\u793a\n\n```\nsomedata = 1\n\n# \u30ad\u30e3\u30c3\u30c1\u3057\u305f\u3044\u4f8b\u5916\u3092\u30bf\u30d7\u30eb\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\nfatal_exceptions = (KeyboardInterrupt, MemoryError)\n\ntry:\n    assert somedata\nexcept fatal_exceptions, inst:  # \u5f15\u6570inst\u3067\u4f8b\u5916\u306e\u5185\u5bb9\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n    print type(inst)    # \u4f8b\u5916\u306e\u578b\u3092\u8868\u793a\n    print inst          # \u4f8b\u5916\u306e\u5185\u5bb9\u3092\u8868\u793a\n    raise\n# \u305d\u308c\u4ee5\u5916\u306e\u4f8b\u5916\u3092\u307e\u3068\u3081\u3066\u30ad\u30e3\u30c3\u30c1\nexcept Exception, inst:\n    print type(inst)    # \u4f8b\u5916\u306e\u578b\u3092\u8868\u793a\n    print inst          # \u4f8b\u5916\u306e\u5185\u5bb9\u3092\u8868\u793a\nfinally:\n    print \"the end\"\n```\n\u3000\n### UnitTest\n\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304b\u3089\u306e\u4f8b\u3092\u5c11\u3057\u4fee\u6b63\u3068\u8ffd\u52a0\u3002\n\n```\nimport random\nimport unittest\n\nclass TestSequenceFunctions(unittest.TestCase):\n\n    # \u6bce\u56de\u547c\u3070\u308c\u308b\u521d\u671f\u5316\u51e6\u7406\n    # \u3053\u306e\u4ed6\u306b\u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306a\u3069\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\n    def setUp(self):\n        self.seq = range(10)\n\n    # test\u3067\u59cb\u307e\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u8a18\u8ff0\u3059\u308b\u3002\n    def test_shuffle(self):\n        random.shuffle(self.seq)\n        self.seq.sort()\n\n        # \u4e8c\u3064\u306e\u5f15\u6570\u304c\u30a4\u30b3\u30fc\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        # \u7b49\u3057\u304f\u306a\u3044\u3053\u3068\u306e\u30c1\u30a7\u30c3\u30af\u306fassertNotEqual()\u3067\u884c\u3048\u308b\u3002\n        self.assertEqual(self.seq, range(10))\n\n        # \u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3002\n        # assertRaises(exception, callable, *args, **kwds)\n        # \u7b2c\u4e8c\u5f15\u6570\u306e\u95a2\u6570\u306bargs\u3068kwds\u3092\u6e21\u3057\u3066\u3001\u7b2c\u4e00\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        self.assertRaises(TypeError, random.shuffle, (1,2,3))\n\n    def test_choice(self):\n        element = random.choice(self.seq)\n\n        # \u5f15\u6570\u306e\u5024\u304cTrue\u3067\u3042\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        # bool(element) is True \u3068\u7b49\u4fa1\n        self.assertTrue(element in self.seq)\n\n    def test_sample(self):\n\n        # exception \u5f15\u6570\u306e\u307f\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u304c\u8fd4\u3055\u308c\u308b\u3002\n        # \u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n        with self.assertRaises(ValueError):\n            random.sample(self.seq, 20)\n        for element in random.sample(self.seq, 5):\n            self.assertTrue(element in self.seq)\n\nif __name__ == '__main__':\n    \n    # main()\u3067\u5b9f\u884c\u3067\u304d\u308b\u3002\n    unittest.main()\n\n    # \u500b\u5225\u306b\u5b9f\u884c\u3059\u308b\u30c6\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002\n    _test_choice = TestSequenceFunctions('test_choice')\n    _test_sample = TestSequenceFunctions('test_sample')\n\n    # \u30c6\u30b9\u30c8\u30b9\u30a4\u30fc\u30c8\u306b\u767b\u9332\u3057\u3066\u30e9\u30f3\u30ca\u30fc\u3067\u307e\u3068\u3081\u3066\u5b9f\u884c\u3067\u304d\u308b\u3002\n    TestSuite = unittest.TestSuite()\n    TestSuite.addTest(_test_choice)\n    TestSuite.addTest(_test_sample)\n    runner = unittest.TextTestRunner()\n    runner.run(TestSuite)\n\n    # \u30ed\u30fc\u30c0\u30fc\u3067\u307e\u3068\u3081\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n    suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)\n    unittest.TextTestRunner(verbosity=2).run(suite)\n```\n\n\u3000\n### traceback\n\u30b9\u30bf\u30c3\u30af\u3068\u306f\u73fe\u5728\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3067\u3042\u308b\u3002\n\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3068\u306f\u3001\u305d\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u72b6\u614b(\u95a2\u6570\u540d\u3001\u547c\u3073\u5143\u95a2\u6570\u540d\u3001\u884c\u3001\u547d\u4ee4\u6587\u3001\u30d5\u30a1\u30a4\u30eb\u540d)\u306a\u3069\u306e\u72b6\u614b\u3092\u8a18\u9332\u3057\u305f\u3082\u306e\u3067\u3042\u308a\u3001Python\u306e\u3088\u3046\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u306f\u3053\u308c\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u307e\u305a\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u60c5\u5831\u306fsys.exc_info() \u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```\nexc_type, exc_value, exc_traceback = sys.exc_info()\n```\n\n\u3053\u306e\u4e09\u3064\u306e\u5909\u6570\u3092\u5f15\u6570\u306b\u4f7f\u7528\u3057\u3066\u3001traceback.print_tb()\u3084traceback.print_exception()\u3067\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u3002\n\n\u3057\u304b\u3057\u3001\u4e0b\u8a18\u306etraceback.print_exc()\u3092\u4f7f\u3046\u3068\u3001sys.exc_info()\u304b\u3089\u306e\u5909\u6570\u53d6\u5f97\u304c\u7701\u7565\u3067\u304d\u3066\u3001\u3057\u304b\u3082\u30bf\u30a4\u30d7\u3084\u5185\u5bb9\u3082\u8868\u793a\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u3002\u57fa\u672c\u7684\u306b\u306f\u3053\u308c\u3092\u4f7f\u7528\u3059\u308c\u3070\u3044\u3044\u3002\n\n```\nimport sys\nimport traceback\n\ndef somework():\n    try:\n        print a # \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\n    except Exception:\n        print \"error\"\n        traceback.print_exc(file=sys.stdout)\n    finally:\n        print \"the end\"\n\nif __name__ == '__main__':\n    somework()\n```\n\n\u51fa\u529b\u7d50\u679c\n\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3001\u884c\u3001\u95a2\u6570\u540d\u3001\u539f\u56e0\u306e\u547d\u4ee4\u6587\u3001\u539f\u56e0\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```\nerror\nTraceback (most recent call last):\n  File \"/Users/test.py\", line 8, in somework\n    print a\nNameError: global name 'a' is not defined\nthe end\n```\n\n\u3053\u3061\u3089\u306ftraceback\u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u51fa\u529b\u3002\n\u4f8b\u5916\u3092\u901a\u904e\u3059\u308b\u3060\u3051\u3067\u4f55\u3082\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\n```\nerror\nthe end\n```\n\n\u6b21\u306b\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u60c5\u5831\u3092\u30bf\u30d7\u30eb\u3092\u542b\u3093\u3060\u30ea\u30b9\u30c8\u3067\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3059\u3002\n\u3053\u3061\u3089\u306fsys.exc_info()\u304b\u3089\u5909\u6570\u3092\u53d6\u5f97\u3059\u308b\u4f8b\u3082\u8f09\u305b\u3066\u304a\u304f\u3002(\u305d\u308c\u3092\u5f15\u6570\u306b\u4f7f\u3063\u3066\u3044\u308b\u304b\u3089)\n\n```\nimport sys\nimport traceback\n\ndef somework():\n    try:\n        print a # \u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\n    except Exception:\n        print \"error\"\n        exc_type, exc_value, exc_traceback = sys.exc_info()\n        print traceback.extract_tb(exc_traceback) # \u73fe\u5728\u306e\u60c5\u5831\u3060\u3051\u3092\u53d6\u5f97\n        print traceback.extract_stack() # \u547c\u3073\u51fa\u3057\u5143\u306e\u95a2\u6570\u60c5\u5831\u3092\u542b\u3080\u30bf\u30d7\u30eb\u3092\u53d6\u5f97\n\n        # \u30bf\u30d7\u30eb\u3067\u306f\u306a\u304f\u5358\u306b\u30ea\u30b9\u30c8\u3067\u53d7\u3051\u53d6\u3063\u3066\u8868\u793a\u3057\u3084\u3059\u304f\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u308c\u3092\u547c\u3076\u3002\n        traceback.format_tb(exc_traceback)\n        traceback.format_stack()\n\n        print \"the end\"\n\nif __name__ == '__main__':\n    somework()\n```\n\n\n#nosetest\n\n\u300ePython\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nnose\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\npip install nose\n```\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u5358\u7d14\u306b\u9280\u884c\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u6570\u5b57\u3092\u8db3\u3057\u305f\u308a\u6e1b\u3089\u3057\u305f\u308a\u3059\u308b\u3060\u3051\u3002\n\n```\n# coding: UTF-8\n\nclass NotEnoughFundsException(Exception):\n    pass\n\nclass BankAccount(object):\n\n    def __init__(self):\n        self._balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount\n\n    def get_balance(self):\n        return self._balance\n\n    def set_balance(self, value):\n        if value < 0:\n            raise NotEnoughFundsException\n\n        self._balance = value\n\n    # \u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u30e9\u30c3\u30d1\u30fc\u3092\u7528\u610f\u3059\u308b\u3002\n    # balance\u306b=\u3084+\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u3053\u308c\u3089\u306e\u95a2\u6570\u304c\u81ea\u52d5\u3067\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n    balance = property(get_balance, set_balance)\n```\n\nnose\u3067\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3002\n\u3053\u3053\u3067100\u30840\u306a\u3069\u306e\u30c6\u30b9\u30c8\u7528\u306e\u56fa\u5b9a\u306e\u5024\u3092\u6e96\u5099\u3059\u308b\u3053\u3068\u3092\u30c7\u30fc\u30bf\u30d5\u30a3\u30af\u30b9\u30c1\u30e3\u3068\u3044\u3046\u3002\n\n```\n# coding: UTF-8\n\nimport unittest\n\nclass BankAccountTest(unittest.TestCase):\n\n    def _getTarget(self):\n        from bankaccount import BankAccount\n        return BankAccount\n\n    # \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n    def _makeOne(self, *args, **kwargs):\n        return self._getTarget()(*args, **kwargs)\n\n    def test_construct(self):\n        target = self._makeOne()\n        self.assertEqual(target._balance, 0)\n\n    def test_deposit(self):\n        target = self._makeOne()\n        target.deposit(100)\n        self.assertEqual(target._balance, 100)\n\n    def test_withdraw(self):\n        target = self._makeOne()\n        target._balance = 100\n        target.withdraw(20)\n        self.assertEqual(target._balance, 80)\n\n    def test_get_blance(self):\n        target = self._makeOne()\n        target._balance = 500\n        self.assertEqual(target.get_balance(), 500)\n\n    def test_set_balance_not_enough_funds(self):\n        target = self._makeOne()\n        from bankaccount import NotEnoughFundsException\n        try:\n            target.set_balance(-1)\n            self.fail()\n        except NotEnoughFundsException:\n            pass\n```\n\n\u4e0a\u8a18\u4e8c\u3064\u3092\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3057\u3001\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067nose\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```\nnosetest\n\n.....\n----------------------------------------------------------------------\nRan 5 tests in 0.004s\n\nOK\n```\n\n\u3000\n### \u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u53d6\u5f97\n\n```\npip install coverage\n```\n\n```\n# nosetests -v --with-coverage\ntest_construct (test_bankaccount.BankAccountTest) ... ok\ntest_deposit (test_bankaccount.BankAccountTest) ... ok\ntest_get_blance (test_bankaccount.BankAccountTest) ... ok\ntest_set_balance_not_enough_funds (test_bankaccount.BankAccountTest) ... ok\ntest_withdraw (test_bankaccount.BankAccountTest) ... ok\n\nName          Stmts   Miss  Cover   Missing\n-------------------------------------------\nbankaccount      16      0   100%\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nOK\n```\n\n\u898b\u3084\u3059\u3044\u30ab\u30d0\u30ec\u30c3\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u300c--with-xunit\u300d\u30aa\u30d7\u30b7\u30e7\u30f3\u3067XUNIT\u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\u3002\n\n```\n# nosetests -v -w . --with-coverage --with-xunit\ntest_construct (test_bankaccount.BankAccountTest) ... ok\ntest_deposit (test_bankaccount.BankAccountTest) ... ok\ntest_get_blance (test_bankaccount.BankAccountTest) ... ok\ntest_set_balance_not_enough_funds (test_bankaccount.BankAccountTest) ... ok\ntest_withdraw (test_bankaccount.BankAccountTest) ... ok\n\n----------------------------------------------------------------------\nXML: nosetests.xml\nName          Stmts   Miss  Cover   Missing\n-------------------------------------------\nbankaccount      16      0   100%\n----------------------------------------------------------------------\nRan 5 tests in 0.006s\n\nOK\n```\n\njenkins\u3067\u8aad\u3081\u308b\u3088\u3046\u306bXML\u3067\u51fa\u529b\u3059\u308b\u3002\n\n```\ncoverage xml\n```\n\n\n#mock\n\n### \u666e\u901a\u306e\u4f7f\u3044\u65b9\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30af\u30e9\u30b9\ntest\u30e2\u30b8\u30e5\u30fc\u30eb\u306eTest.py\n\n```\n# coding: UTF-8\n\nclass Widget(object):\n\n    def __init__(self):\n        self.value = 10\n\n    def Additional(self, add):\n        self.value += add\n        return self.value\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```\nfrom mock import Mock\nfrom test import Test\n\ndef mock_value(value):\n    return 20 + value\n\nif __name__ == '__main__':\n\n    # \u95a2\u6570\u3092\u7f6e\u304d\u63db\u3048\u3066\u3001100\u3092\u56fa\u5b9a\u3067\u8fd4\u3059\u30e2\u30c3\u30af\u306b\u3059\u308b\u3002\n    Test.Widget.Additional = Mock(return_value=100)\n\n    w = Test.Widget()\n    print w.Additional(1)\n\n    # \u56fa\u5b9a\u5024\u3067\u306f\u306a\u304f\u3001\u306a\u3093\u3089\u304b\u306e\u8a08\u7b97\u3092\u3059\u308b\u5834\u5408\u306fside_effect\u3067\u30c0\u30df\u30fc\u95a2\u6570\u3092\u6e21\u3059\u3002\n    Test.Widget.Additional = Mock(side_effect=mock_value)\n    print w.Additional(1)\n```\n\n```\n100\n21\n```\n\n\n### \u30af\u30e9\u30b9\u3092\u30e2\u30c3\u30af\u306b\u7f6e\u304d\u63db\u3048\u308b\n\n```\nfrom mock import Mock\nfrom test import Test\n\ndef mock_value(value):\n    return 20 + value\n\nif __name__ == '__main__':\n\n    # \u30af\u30e9\u30b9\u81ea\u4f53\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\n    Test.Widget = Mock()\n    # \u95a2\u6570\u306e\u8fd4\u3059\u5024\u3092\u56fa\u5b9a\u3057\u3066\u3057\u307e\u3046\u3002\n    Test.Widget.return_value.Additional.return_value = 10\n\n    w = Test.Widget()\n    print w.Additional(1)\n\n    # \u95a2\u6570\u3092\u5165\u308c\u66ff\u3048\u308b\n    Test.Widget.return_value.Additional = mock_value\n    print w.Additional(1)\n```\n\n### patch\n\u95a2\u6570\u5b9f\u884c\u4e2d\u306emock\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u672c\u7269\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5dee\u3057\u66ff\u3048\u308b\u3002\n\n```\n# coding: UTF-8\n\nfrom mock import patch\n\n# \u3053\u306e\u95a2\u6570\u5b9f\u884c\u4e2d\u3060\u3051\u7f6e\u304d\u63db\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u623b\u308a\u5024\u3092\u6307\u5b9a\n@patch(\"Test.Widget.Additional\", return_value=10)\ndef test_func(m): \n\n    import Test\n    w = Test.Widget()\n    print w.Additional(1)\n    assert w.Additional(1) == 10\n\n    # \u3061\u306a\u307f\u306b\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305fm\u306f\u30e2\u30c3\u30af\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u305fAdditional\u95a2\u6570\n    # \u3060\u304b\u3089\u3053\u3061\u3089\u3082\u7d50\u679c\u306f10\u306b\u306a\u308b\u3002\n    # \u4eca\u56de\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u7f6e\u304d\u63db\u3048\u305f\u304c\u3001\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u30af\u30e9\u30b9\u306b\u306a\u308b\u3002\n    print m()\n\nif __name__ == '__main__':\n    test_func()\n```\n\n### with\u3092\u4f7f\u3063\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u5f62\u5f0f\u306e\u5834\u5408\n\n```\n# coding: UTF-8\n\nfrom mock import patch\n\ndef test_func():\n\n    # \u3053\u306ewith\u30b9\u30b3\u30fc\u30d7\u5b9f\u884c\u4e2d\u3060\u3051\u7f6e\u304d\u63db\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u623b\u308a\u5024\u3092\u6307\u5b9a\n    with patch(\"Test.Widget.Additional\", return_value=10) as m:\n        import Test\n        w = Test.Widget()\n        print w.Additional(1)\n        assert w.Additional(1) == 10\n        print m()\n\nif __name__ == '__main__':\n    test_func()\n```\n\n\u3000\n### \u30af\u30e9\u30b9\u578b\u6307\u5b9a\n\n```\nmock = Mock(spec=SomeClass)\nisinstance(mock, SomeClass) #\u3053\u308c\u304c\u6210\u529f\u3059\u308b\n```\n\n\u3000\n### Mock\u306b\u7279\u5b9a\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u6301\u305f\u305b\u308b\n\n```\n# coding: UTF-8\nfrom mock import Mock, patch\n\nif __name__ == '__main__':\n    # method\u3068\u3044\u3046\u540d\u524d\u30673\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3001\n    # other\u3068\u3044\u3046\u540d\u524d\u3067KeyError\u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u30e1\u30bd\u30c3\u30c9\n    attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n\n    # \u5ba3\u8a00\u3068\u540c\u6642\u306b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u8ffd\u52a0\u3082\u3067\u304d\u308b(some_attribute)\u3002\n    mock = Mock(some_attribute='eggs', **attrs)\n\n    print mock.some_attribute\n    print mock.method()\n    print mock.other()\n```\n\n### \u305d\u306e\u4ed6\u3000\n\u4ed6\u306b\u4fbf\u5229\u305d\u3046\u306a\u306e\u306f\u3001\n\n```\n@patch('sys.stdout', new_callable=StringIO)\n```\n\n\u3067\u3001\u751f\u6210\u6642\u306bStringIO\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u3002\n\n\u308f\u3056\u308f\u3056mock\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30c6\u30b9\u30c8\u7528\u306e\u7591\u4f3c\u30af\u30e9\u30b9\u3092\u66f8\u3044\u3066\u300cTest.Widget = \u300d\u3067\u4ee3\u5165\u3057\u3066\u3082\u3044\u3044\u3002mock\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u4f7f\u308f\u306a\u3044\u306e\u306a\u3089\u3001\u305d\u3061\u3089\u306e\u624b\u6bb5\u306e\u65b9\u304c\u306f\u3084\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n#django-webtest\u30e2\u30b8\u30e5\u30fc\u30eb\n\nDjango\u306e\u30c6\u30b9\u30c8\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n```\npip install webtest\npip install django-webtest\n```\n\nDjango\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```\nmysite\n|-mysite\n|   |-__init__.py\n|   |-settings.py\n|   |-urls.py\n|   |-wsgi.py\n|-test app\n|   |-__init__.py\n|   |-form.py\n|   |-modes.py\n|   |-views.py\n|   |-tests.py\u3000\u3000\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u304f|\n|-templates\n|-manage.py\n```\n\ntests.py\u306e\u5185\u5bb9\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\n\n```\nfrom django_webtest import WebTest\n\nclass TestIndex(WebTest):\n\n    def test_index(self):\n        res = self.app.get(\"/\") #\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\n\n        # \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3084\u30b3\u30f3\u30c6\u30f3\u30c4\u5185\u5bb9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n        assert res.status == '200 OK'\n        assert 'html' in res\n```\n\nmanage.py runserver\u3067\u958b\u767a\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304a\u3044\u3066\u304b\u3089\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```\n# sudo python manage.py test testapp\n```\n\n\u51fa\u529b\u7d50\u679c\n\n```\nCreating test database for alias 'default'...\n.\n----------------------------------------------------------------------\nRan 1 test in 0.175s\n\nOK\nDestroying test database for alias 'default'...\n```\n\n", "tags": ["Python", "Django"]}