{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\nv0.1 http://qiita.com/7of9/items/b364d897b95476a30754\nhttp://qiita.com/7of9/items/cad6a45704b1d52d350e\n\u306e\u7d9a\u304d\u3002\ntf.placeholder()\u4f7f\u7528\u306e\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u4e2d\u3002\nv0.1\u306e\u30b3\u30fc\u30c9\u306b\u3042\u3063\u305ftf.train.shuffle_batch()\u3092\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\ninputs_rs\u306b\u4e0e\u3048\u308b\u3082\u306e\u3092inputs\u304b\u3089inputs_batch\u306b\u5909\u66f4\noutput_rs\u306b\u4e0e\u3048\u308b\u3082\u306e\u3092outputs\u304b\u3089output_batch\u306b\u5909\u66f4\n\n\nlinreg2_feeddict.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\n\n# \u30d5\u30a1\u30a4\u30eb\u540d\u306e Queue \u3092\u4f5c\u6210\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# CSV \u3092 parse\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n#inputs_rs = tf.reshape(inputs, [-1, 1])\n#output_rs = tf.reshape(output, [-1, 1])\ninputs_rs = tf.reshape(inputs_batch, [-1, 1])\noutput_rs = tf.reshape(output_batch, [-1, 1])\n\n## NN \u306e\u30b0\u30e9\u30d5\u751f\u6210\nhiddens = slim.stack(input_ph, slim.fully_connected, [1,7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ndef feed_dict(train, inputs, output):\n#    if train:\n#\n    return {input_ph: inputs.eval(), output_ph: output.eval()}\n\n#train_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.01))\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      _, t_loss = sess.run([train_op, loss], feed_dict=feed_dict(True, inputs_rs, output_rs))\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n#        print(\"%d,%f,#step, loss\" % (i+1, t_loss))\n  finally:\n    coord.request_stop()\n\n  coord.join(threads)\n\n\n\nv0.1\u3067\u306floss\u304c0.2\u4ed8\u8fd1\u3060\u3063\u305f\u304c\u3001\u4e0a\u306e\u7d50\u679c\u306f0.4\u4ed8\u8fd1\u3002\n\u30b3\u30fc\u30c9\u306b\u307e\u3060\u9593\u9055\u3044\u304c\u3042\u308a\u305d\u3046\u3060\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\nv0.1 http://qiita.com/7of9/items/b364d897b95476a30754\n\nhttp://qiita.com/7of9/items/cad6a45704b1d52d350e\n\u306e\u7d9a\u304d\u3002\n\ntf.placeholder()\u4f7f\u7528\u306e\u30b3\u30fc\u30c9\u306b\u5909\u66f4\u4e2d\u3002\nv0.1\u306e\u30b3\u30fc\u30c9\u306b\u3042\u3063\u305ftf.train.shuffle_batch()\u3092\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\n- inputs_rs\u306b\u4e0e\u3048\u308b\u3082\u306e\u3092inputs\u304b\u3089inputs_batch\u306b\u5909\u66f4\n- output_rs\u306b\u4e0e\u3048\u308b\u3082\u306e\u3092outputs\u304b\u3089output_batch\u306b\u5909\u66f4\n\n```linreg2_feeddict.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\n\n# \u30d5\u30a1\u30a4\u30eb\u540d\u306e Queue \u3092\u4f5c\u6210\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# CSV \u3092 parse\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n#inputs_rs = tf.reshape(inputs, [-1, 1])\n#output_rs = tf.reshape(output, [-1, 1])\ninputs_rs = tf.reshape(inputs_batch, [-1, 1])\noutput_rs = tf.reshape(output_batch, [-1, 1])\n\n## NN \u306e\u30b0\u30e9\u30d5\u751f\u6210\nhiddens = slim.stack(input_ph, slim.fully_connected, [1,7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ndef feed_dict(train, inputs, output):\n#    if train:\n#\n    return {input_ph: inputs.eval(), output_ph: output.eval()}\n\n#train_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.01))\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      _, t_loss = sess.run([train_op, loss], feed_dict=feed_dict(True, inputs_rs, output_rs))\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n#        print(\"%d,%f,#step, loss\" % (i+1, t_loss))\n  finally:\n    coord.request_stop()\n\n  coord.join(threads)\n```\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/81b1091f-957b-91b6-673f-f963fe212fd0.png)\n\nv0.1\u3067\u306floss\u304c0.2\u4ed8\u8fd1\u3060\u3063\u305f\u304c\u3001\u4e0a\u306e\u7d50\u679c\u306f0.4\u4ed8\u8fd1\u3002\n\n\u30b3\u30fc\u30c9\u306b\u307e\u3060\u9593\u9055\u3044\u304c\u3042\u308a\u305d\u3046\u3060\u3002\n\n", "tags": ["borgWarp"]}