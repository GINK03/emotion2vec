{"tags": ["AtCoder"], "context": " More than 1 year has passed since last update.AtCoder Regular Contest 031\nHaskell\u3067AtCoder\u3092\u89e3\u8aac\u3059\u308b\u8a18\u4e8b\u304c\u671b\u307e\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u2026\uff1f\n\nA - \u540d\u524d\n\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3060\u3051\u306e\u554f\u984c\u3002\nHaskell\u3060\u3068 s == reverse s \u3067\u5224\u5b9a\u3067\u304d\u307e\u3059\u306d\u3002\n\na.hs\nmain :: IO ()\nmain = do\n  s <- getLine\n  putStrLn $ if s == reverse s then \"YES\" else \"NO\"\n\n\n\nB - \u57cb\u3081\u7acb\u3066\n10\u00d710\u306e\u30b5\u30a4\u30ba\u306e2\u6b21\u5143\u306e\u5730\u56f3\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u30011\u3064\u9678\u5730\u3092\u8ffd\u52a0\u3057\u3066\u30011\u3064\u306e\u5cf6\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u554f\u984c\u3002\n\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u306e\u3067\u3001\u57cb\u3081\u7acb\u3066\u308b\u5ea7\u6a19\u3092\u5168\u90e8\u8a66\u305b\u3070\u826f\u3044\u3067\u3059\u306d\u30021\u3064\u306e\u5cf6\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u305d\u306e\u57cb\u3081\u7acb\u3066\u305f\u5ea7\u6a19\u304b\u3089\u5857\u308a\u3064\u3076\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u9678\u5730\u306b\u5230\u9054\u3067\u304d\u308c\u3070OK\u3002\n\u307e\u305a\u5165\u529b\u3067\u3059\u304c\u300110\u884c\u3068\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\nbs <- replicateM 10 getLine\n\n\u3068 replicateM \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306710\u500b\u306e\u6587\u5b57\u5217\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\n\u3042\u3068\u306f2\u6b21\u5143\u306e\u914d\u5217\u3092\u5857\u308a\u3064\u3076\u3057\u306a\u304c\u3089\u63a2\u7d22\u3059\u308b\u306e\u3067\u3059\u304c\u3001Haskell\u3067\u306f\u3053\u3046\u3044\u3046mutable\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u66f8\u304f\u306e\u304c\u3068\u3066\u3082\u9762\u5012\u304f\u3055\u3044\uff01AtCoder\u3067\u306fmutable\u306a\u914d\u5217\u3092\u6271\u3046\u6a19\u6e96\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001vector\u3068array\u304c\u4f7f\u3048\u307e\u3059\u304c\u3001vector\u306f2\u6b21\u5143\u914d\u5217\u304c\u3082\u306e\u3059\u3054\u304f\u6271\u3044\u3065\u3089\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u3066\u3001array\u306f\u8868\u73fe\u529b\u306b\u4e4f\u3057\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f2\u6b21\u5143\u914d\u5217\u3092\u6271\u3044\u307e\u3059\u306e\u3067\u3001\u6211\u6162\u3057\u3066array\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\narray\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u306f\u30012\u6b21\u5143\u30ea\u30b9\u30c8\u30922\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\nlistArray ((0, 0), (9, 9)) $ concat bs\n\n\u3053\u3046\u3044\u3046\u30c0\u30b5\u3044\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u5f97\u3089\u308c\u308b\u306e\u306fimmutable\u306a\u914d\u5217\u306a\u306e\u3067\u3001\u3053\u308c\u3092mutable\u306a\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b thaw \u3092\u4f7f\u3044\u307e\u3059\u3002\n(m :: IOUArray (Int, Int) Char)  <-\n          thaw $ listArray ((0, 0), (9, 9)) $ concat bs\n\nmutable\u306a\u914d\u5217\u306fIO\u3068\u304bST\u3068\u304b\u3044\u308d\u3044\u308d\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u578b\u3092\u660e\u793a\u3057\u3066\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u591a\u304f\u3066\u3001\u4eca\u56de\u3082\u305d\u308c\u3067\u6012\u3089\u308c\u305f\u306e\u3067\u3001\u30d0\u30a4\u30f3\u30c9\u306e\u5de6\u5074\u306b\u578b\u3092\u660e\u793a\u7684\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u675f\u7e1b\u306e\u65b9\u306b\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u304f\u5834\u5408\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u304f\u3066\u3001 {-# LANGUAGE ScopedTypeVariables #-} \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\u3053\u306e\u62e1\u5f35\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3001\u53f3\u5074\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u3001\nm <- thaw $ listArray ((0, 0), (9, 9)) $ concat bs :: IO (IOUArray (Int, Int) Char)\n\n\u3053\u3046\u66f8\u3044\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u672c\u6765\u66f8\u304d\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u3044 IO \u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u3069\u3046\u306b\u3082\u5197\u9577\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u3069\u3063\u3061\u306b\u3057\u308d\u30ab\u30c3\u30b3\u60aa\u3044\u3067\u3059\u306d\u3002\n\u3042\u3068\u306f\u518d\u5e30\u3067\u5857\u308a\u3064\u3076\u3057\u95a2\u6570\u3092\u66f8\u3044\u3066\u3001\u7d42\u308f\u308a\u3067\u3059\u3002\nf cx cy m\n  | cx >= 0 && cx < 10 && cy >= 0 && cy < 10 = do\n    b <- readArray m (cx, cy)\n    unless (b == 'x') $ do\n      writeArray m (cx, cy) 'x'\n      f (cx + 1) cy m\n      f (cx - 1) cy m\n      f cx (cy + 1) m\n      f cx (cy - 1) m\n  | otherwise =\n      return ()\n\n\u6700\u521d\u306b\u5883\u754c\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u4e2d\u8eab\u304c 'x' \u3058\u3083\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u3068\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001C++\u3060\u3068\u3053\u3046\u3044\u3046\u5224\u5b9a\u3092\nif (cx >= 0 && cx < 10 && cy >= 0 && cy < 10 && m[cy][cx] != 'x') {\n  ...\n}\n\n\u3068\u307e\u3068\u3081\u3066\u66f8\u3051\u308b\u3068\u3053\u308d\u304c\u3001Haskell\u3060\u3068\u5883\u754c\u30c1\u30a7\u30c3\u30af\u304cPure\u306a\u64cd\u4f5c\u3067\u3001\u914d\u5217\u306e\u4e2d\u8eab\u30c1\u30a7\u30c3\u30af\u304cImpure\u306a\u64cd\u4f5c\u306b\u306a\u308b\u306e\u3067\u30012\u7b87\u6240\u3067\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30de\u30a4\u30c1\u826f\u304f\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u3082\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u3042\u3068\u4e9b\u672b\u306a\u70b9\u3067\u3059\u304c\u3001\u6dfb\u5b57\u3092 (x, y) \u306b\u3057\u305f\u306e\u3067\u3001\u30e1\u30e2\u30ea\u3078\u306e\u683c\u7d0d\u306e\u3055\u308c\u65b9\u304cX\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u9023\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u306e\u3067\u3001\u3042\u307e\u308a\u6c17\u306b\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nb.hs\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport           Control.Applicative\nimport           Control.Monad\nimport           Data.Array\nimport           Data.Array.IO\n\nmain :: IO ()\nmain = do\n  bs <- replicateM 10 getLine\n\n  let check :: Int -> Int -> IO Bool\n      check x y = do\n        (m :: IOUArray (Int, Int) Char)  <-\n          thaw $ listArray ((0, 0), (9, 9)) $ concat bs\n        writeArray m (x, y) 'o'\n        f x y m\n        r <- freeze m\n        return $ all (== 'x') $ elems r\n\n      f cx cy m\n        | cx >= 0 && cx < 10 && cy >= 0 && cy < 10 = do\n          b <- readArray m (cx, cy)\n          unless (b == 'x') $ do\n            writeArray m (cx, cy) 'x'\n            f (cx + 1) cy m\n            f (cx - 1) cy m\n            f cx (cy + 1) m\n            f cx (cy - 1) m\n        | otherwise =\n          return ()\n\n  r <- forM [0..9] $ \\y ->\n    forM [0..9] $ \\x ->\n      check x y\n\n  putStrLn $ if any or r then \"YES\" else \"NO\"\n\n\n\nC - \u7a4d\u307f\u6728\n\u5c0f\u3055\u3044\u8981\u7d20\u304b\u3089\u4e21\u7aef\u306b\u6368\u3066\u3066\u3044\u304f\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\u307e\u305a\u5165\u529b\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u975e\u5e38\u306b\u8981\u7d20\u6570\u304c\u591a\u3044\u306e\u3067\u3001ByteString \u3092\u4f7f\u3063\u3066\u5165\u529b\u3057\u307e\u3059\u3002\nn :: Int <- readLn\nbs :: [Int] <- map (fst . fromJust . B.readInt) . B.words <$> B.getLine\n\nByteString \u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u305d\u308c\u305e\u308c\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002ByteString\u3092\u6574\u6570\u306b\u5909\u63db\u3059\u308b\u306b\u306f readInt \u95a2\u6570\u304c\u4f7f\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5931\u6557\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b Maybe (Int, ByteString) \u3092\u8fd4\u3059\u306e\u3067\u3001 fst . fromJust \u3067\u5931\u6557\u3092\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b\u5165\u529b\u3057\u305f\u30c7\u30fc\u30bf\u306b\u3001\u6dfb\u5b57\u3092\u3064\u3051\u3066\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\nlet ord = sort $ zip bs [0..]\n\n\u3053\u3046\u3044\u3046\u51e6\u7406\u306fHaskell\u3060\u3068\u975e\u5e38\u306b\u697d\u3067\u3059\u306d\u3002\n\u3042\u3068\u306f\u3053\u308c\u306e\u6dfb\u3048\u5b57\u3092\u9806\u306b\u6d88\u3057\u3066\u3044\u304d\u307e\u3059\u3002\ngo ((_, ix): rs) !reft !acc =\n  let (!l, _, !r) = S.splitMember ix reft\n  in go rs (S.delete ix reft) $ acc + min (S.size l) (S.size r)\n\n\u666e\u901a\u306b\u518d\u5e30\u3067\u7e70\u308a\u8fd4\u3057\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u300210^5\u500b\u8981\u7d20\u304c\u3042\u308b\u306e\u3067\u3001!\u304c\u306a\u3044\u3068\u591a\u5206\u30b9\u30bf\u30c3\u30af\u304c\u6ea2\u308c\u307e\u3059\u3002\nData.Set.splitMember \u3092\u4f7f\u3046\u3068\u3001Set\u3092\u3001\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3068\u5c0f\u3055\u3044\u3082\u306e\u306e2\u3064\u306b\u5206\u5272\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u64cd\u4f5c\u306f O(logn) \u3067\u5b8c\u4e86\u3057\u307e\u3059\u3002\u5c0f\u3055\u3044\u3082\u306e\u304c\u3001\u5404\u8981\u7d20\u3088\u308a\u3082\u5de6\u306b\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u3001\u5927\u304d\u3044\u7269\u304c\u53f3\u306b\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306emin\u3092\u3068\u3063\u3066\u8db3\u3057\u4e0a\u3052\u3066\u3044\u3051\u3070\u3001\u6c42\u3081\u308b\u89e3\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u306fHaskell\u5411\u304d\u306a\u554f\u984c\u3067\u3057\u305f\u306d\uff08\u306a\u304aData.Set\u306e\u4ee3\u308f\u308a\u306bData.IntSet\u3092\u4f7f\u3046\u3068TLE\u3059\u308b\u6a21\u69d8\uff09\u3002\n\nc.hs\n{-# LANGUAGE BangPatterns        #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport           Control.Applicative\nimport qualified Data.ByteString.Char8 as B\nimport           Data.List\nimport           Data.Maybe\nimport qualified Data.Set              as S\n\nmain :: IO ()\nmain = do\n  n :: Int <- readLn\n  bs :: [Int] <- map (fst . fromJust . B.readInt) . B.words <$> B.getLine\n\n  let ord = sort $ zip bs [0..]\n\n      go [] _ acc = acc\n      go ((_, ix): rs) !reft !acc =\n        let (!l, _, !r) = S.splitMember ix reft\n        in go rs (S.delete ix reft) $ acc + min (S.size l) (S.size r)\n\n  print $ go ord (S.fromList [0..n-1]) 0\n\n\n\nD - \u8cb7\u3044\u7269\u4e0a\u624b\n\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u90e8\u5206\u70b9\u89e3\u6cd5\u306e\u307f\u3002\n\u90e8\u5206\u70b9\u3092\u53d6\u308b\u306b\u306f\u3069\u306e\u30bb\u30c3\u30c8\u306e\u7d4c\u9a13\u5024\u3092\u30b2\u30c3\u30c8\u3059\u308b\u306e\u304b\u5168\u901a\u308a\u8a66\u305b\u3070OK\u3067\u3059\uff082^10\u901a\u308a\uff09\u3002\ngenerate & test \u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u30ea\u30b9\u30c8\u30e2\u30ca\u30c9\u3092\u4f7f\u3046\u3068\u3068\u3063\u3066\u3082\u7dba\u9e97\u306b\u66f8\u3051\u307e\u3059\u3002\nlet ans = maximum $ do\n      ...\n\n\u3053\u3053\u306b\u89e3\u306e\u5019\u88dc\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u3001\u3069\u306e\u7d4c\u9a13\u5024\u30d1\u30c3\u30af\u3092\u53d6\u5f97\u3059\u308b\u306e\u304b\u3001n\u8981\u7d20\u306eTrue/False\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u901a\u308a\u751f\u6210\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u306f [True, False] \u306e2\u629e\u3092n\u56de\u3084\u308b\u308f\u3051\u306a\u306e\u3067\u3001replicateM \u304c\u4f7f\u3048\u307e\u3059\u3002\nsel <- replicateM n [True, False]\n\n\u6b21\u306b\u3069\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u8cb7\u308f\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304b\u6c42\u3081\u307e\u3059\u3002\nbuy = nub $ concat [ a | (True, a) <- zip sel as ]\n\nzip\u3057\u3066True\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u305d\u308c\u306e\u548c\u96c6\u5408\u3092\u6c42\u3081\u307e\u3059\u3002\u4eca\u56de\u306f\u901f\u5ea6\u3092\u8003\u3048\u306a\u3044\u306e\u3067\u3001concat\u3057\u3066nub\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u5fc5\u8981\u306a\u91d1\u984d\u3092\u6c42\u3081\u3066\u3001\npay = sum $ map (\\i -> ts !! (i-1)) buy\n\n\u5f97\u3089\u308c\u308b\u7d4c\u9a13\u5024\u3092\u6c42\u3081\u3066\u3001\nexp = sum [ s | (True, s) <- zip sel ss ]\n\n\u52b9\u7387\u3092\u6c42\u3081\u3066\u8fd4\u3057\u307e\u3059\u3002\nreturn $ fromIntegral exp / fromIntegral pay\n\nDouble\u306e\u5024\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u3084\u3063\u3071\u308aprintf\u3092\u4f7f\u3046\u3068\u697d\u3067\u3059\u3002\nprintf \"%.12f\\n\" (ans :: Double)\n\n\nd.hs\nimport           Control.Applicative\nimport           Control.Monad\nimport           Data.List\nimport           Text.Printf\n\ngetInts :: IO [Int]\ngetInts = map read . words <$> getLine\n\nmain :: IO ()\nmain = do\n  [n, m] <- getInts\n\n  ss <- getInts\n  ts <- getInts\n\n  as <- replicateM n $ do\n    (_k: a) <- getInts\n    return a\n\n  let ans = maximum $ do\n        sel <- replicateM n [True, False]\n        let buy = nub $ concat [ a | (True, a) <- zip sel as ]\n            pay = sum $ map (\\i -> ts !! (i-1)) buy\n            exp = sum [ s | (True, s) <- zip sel ss ]\n        return $ fromIntegral exp / fromIntegral pay\n\n  printf \"%.12f\\n\" (ans :: Double)\n\n\n[AtCoder Regular Contest 031](http://arc031.contest.atcoder.jp/)\n\nHaskell\u3067AtCoder\u3092\u89e3\u8aac\u3059\u308b\u8a18\u4e8b\u304c\u671b\u307e\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u2026\uff1f\n\n## A - \u540d\u524d\n\n\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3060\u3051\u306e\u554f\u984c\u3002\nHaskell\u3060\u3068 `s == reverse s` \u3067\u5224\u5b9a\u3067\u304d\u307e\u3059\u306d\u3002\n\n\n```hs:a.hs\nmain :: IO ()\nmain = do\n  s <- getLine\n  putStrLn $ if s == reverse s then \"YES\" else \"NO\"\n```\n\n## B - \u57cb\u3081\u7acb\u3066\n\n10\u00d710\u306e\u30b5\u30a4\u30ba\u306e2\u6b21\u5143\u306e\u5730\u56f3\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u30011\u3064\u9678\u5730\u3092\u8ffd\u52a0\u3057\u3066\u30011\u3064\u306e\u5cf6\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u554f\u984c\u3002\n\n\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u306e\u3067\u3001\u57cb\u3081\u7acb\u3066\u308b\u5ea7\u6a19\u3092\u5168\u90e8\u8a66\u305b\u3070\u826f\u3044\u3067\u3059\u306d\u30021\u3064\u306e\u5cf6\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u305d\u306e\u57cb\u3081\u7acb\u3066\u305f\u5ea7\u6a19\u304b\u3089\u5857\u308a\u3064\u3076\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u9678\u5730\u306b\u5230\u9054\u3067\u304d\u308c\u3070OK\u3002\n\n\u307e\u305a\u5165\u529b\u3067\u3059\u304c\u300110\u884c\u3068\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n\n```hs\nbs <- replicateM 10 getLine\n```\n\n\u3068 `replicateM` \u3092\u4f7f\u3046\u306e\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306710\u500b\u306e\u6587\u5b57\u5217\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u3042\u3068\u306f2\u6b21\u5143\u306e\u914d\u5217\u3092\u5857\u308a\u3064\u3076\u3057\u306a\u304c\u3089\u63a2\u7d22\u3059\u308b\u306e\u3067\u3059\u304c\u3001Haskell\u3067\u306f\u3053\u3046\u3044\u3046mutable\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u66f8\u304f\u306e\u304c\u3068\u3066\u3082\u9762\u5012\u304f\u3055\u3044\uff01AtCoder\u3067\u306fmutable\u306a\u914d\u5217\u3092\u6271\u3046\u6a19\u6e96\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u3001`vector`\u3068`array`\u304c\u4f7f\u3048\u307e\u3059\u304c\u3001`vector`\u306f2\u6b21\u5143\u914d\u5217\u304c\u3082\u306e\u3059\u3054\u304f\u6271\u3044\u3065\u3089\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u3066\u3001`array`\u306f\u8868\u73fe\u529b\u306b\u4e4f\u3057\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f2\u6b21\u5143\u914d\u5217\u3092\u6271\u3044\u307e\u3059\u306e\u3067\u3001\u6211\u6162\u3057\u3066`array`\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n`array`\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u306f\u30012\u6b21\u5143\u30ea\u30b9\u30c8\u30922\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\n\n```\nlistArray ((0, 0), (9, 9)) $ concat bs\n```\n\n\u3053\u3046\u3044\u3046\u30c0\u30b5\u3044\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u5f97\u3089\u308c\u308b\u306e\u306fimmutable\u306a\u914d\u5217\u306a\u306e\u3067\u3001\u3053\u308c\u3092mutable\u306a\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b `thaw` \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```hs\n(m :: IOUArray (Int, Int) Char)  <-\n          thaw $ listArray ((0, 0), (9, 9)) $ concat bs\n```\n\nmutable\u306a\u914d\u5217\u306fIO\u3068\u304bST\u3068\u304b\u3044\u308d\u3044\u308d\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u578b\u3092\u660e\u793a\u3057\u3066\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u591a\u304f\u3066\u3001\u4eca\u56de\u3082\u305d\u308c\u3067\u6012\u3089\u308c\u305f\u306e\u3067\u3001\u30d0\u30a4\u30f3\u30c9\u306e\u5de6\u5074\u306b\u578b\u3092\u660e\u793a\u7684\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u675f\u7e1b\u306e\u65b9\u306b\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u66f8\u304f\u5834\u5408\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u304f\u3066\u3001 `{-# LANGUAGE ScopedTypeVariables #-}` \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\u3053\u306e\u62e1\u5f35\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3001\u53f3\u5074\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u3001\n\n```hs\nm <- thaw $ listArray ((0, 0), (9, 9)) $ concat bs :: IO (IOUArray (Int, Int) Char)\n```\n\n\u3053\u3046\u66f8\u3044\u3066\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u672c\u6765\u66f8\u304d\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u3044 `IO` \u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u3069\u3046\u306b\u3082\u5197\u9577\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\u3069\u3063\u3061\u306b\u3057\u308d\u30ab\u30c3\u30b3\u60aa\u3044\u3067\u3059\u306d\u3002\n\n\u3042\u3068\u306f\u518d\u5e30\u3067\u5857\u308a\u3064\u3076\u3057\u95a2\u6570\u3092\u66f8\u3044\u3066\u3001\u7d42\u308f\u308a\u3067\u3059\u3002\n\n```hs\nf cx cy m\n  | cx >= 0 && cx < 10 && cy >= 0 && cy < 10 = do\n    b <- readArray m (cx, cy)\n    unless (b == 'x') $ do\n      writeArray m (cx, cy) 'x'\n      f (cx + 1) cy m\n      f (cx - 1) cy m\n      f cx (cy + 1) m\n      f cx (cy - 1) m\n  | otherwise =\n      return ()\n```\n\n\u6700\u521d\u306b\u5883\u754c\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u4e2d\u8eab\u304c 'x' \u3058\u3083\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u3068\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001C++\u3060\u3068\u3053\u3046\u3044\u3046\u5224\u5b9a\u3092\n\n```cpp\nif (cx >= 0 && cx < 10 && cy >= 0 && cy < 10 && m[cy][cx] != 'x') {\n  ...\n}\n```\n\n\u3068\u307e\u3068\u3081\u3066\u66f8\u3051\u308b\u3068\u3053\u308d\u304c\u3001Haskell\u3060\u3068\u5883\u754c\u30c1\u30a7\u30c3\u30af\u304cPure\u306a\u64cd\u4f5c\u3067\u3001\u914d\u5217\u306e\u4e2d\u8eab\u30c1\u30a7\u30c3\u30af\u304cImpure\u306a\u64cd\u4f5c\u306b\u306a\u308b\u306e\u3067\u30012\u7b87\u6240\u3067\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30de\u30a4\u30c1\u826f\u304f\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u3082\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3042\u3068\u4e9b\u672b\u306a\u70b9\u3067\u3059\u304c\u3001\u6dfb\u5b57\u3092 `(x, y)` \u306b\u3057\u305f\u306e\u3067\u3001\u30e1\u30e2\u30ea\u3078\u306e\u683c\u7d0d\u306e\u3055\u308c\u65b9\u304cX\u5ea7\u6a19\u306b\u5bfe\u3057\u3066\u9023\u7d9a\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u306e\u3067\u3001\u3042\u307e\u308a\u6c17\u306b\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```hs:b.hs\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport           Control.Applicative\nimport           Control.Monad\nimport           Data.Array\nimport           Data.Array.IO\n\nmain :: IO ()\nmain = do\n  bs <- replicateM 10 getLine\n\n  let check :: Int -> Int -> IO Bool\n      check x y = do\n        (m :: IOUArray (Int, Int) Char)  <-\n          thaw $ listArray ((0, 0), (9, 9)) $ concat bs\n        writeArray m (x, y) 'o'\n        f x y m\n        r <- freeze m\n        return $ all (== 'x') $ elems r\n\n      f cx cy m\n        | cx >= 0 && cx < 10 && cy >= 0 && cy < 10 = do\n          b <- readArray m (cx, cy)\n          unless (b == 'x') $ do\n            writeArray m (cx, cy) 'x'\n            f (cx + 1) cy m\n            f (cx - 1) cy m\n            f cx (cy + 1) m\n            f cx (cy - 1) m\n        | otherwise =\n          return ()\n\n  r <- forM [0..9] $ \\y ->\n    forM [0..9] $ \\x ->\n      check x y\n\n  putStrLn $ if any or r then \"YES\" else \"NO\"\n```\n\n## C - \u7a4d\u307f\u6728\n\n\u5c0f\u3055\u3044\u8981\u7d20\u304b\u3089\u4e21\u7aef\u306b\u6368\u3066\u3066\u3044\u304f\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n\u307e\u305a\u5165\u529b\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u975e\u5e38\u306b\u8981\u7d20\u6570\u304c\u591a\u3044\u306e\u3067\u3001`ByteString` \u3092\u4f7f\u3063\u3066\u5165\u529b\u3057\u307e\u3059\u3002\n\n```hs\nn :: Int <- readLn\nbs :: [Int] <- map (fst . fromJust . B.readInt) . B.words <$> B.getLine\n```\n\n`ByteString` \u3092\u5358\u8a9e\u306b\u5206\u89e3\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u305d\u308c\u305e\u308c\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002`ByteString`\u3092\u6574\u6570\u306b\u5909\u63db\u3059\u308b\u306b\u306f `readInt` \u95a2\u6570\u304c\u4f7f\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5931\u6557\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b `Maybe (Int, ByteString)` \u3092\u8fd4\u3059\u306e\u3067\u3001 `fst . fromJust` \u3067\u5931\u6557\u3092\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306b\u5165\u529b\u3057\u305f\u30c7\u30fc\u30bf\u306b\u3001\u6dfb\u5b57\u3092\u3064\u3051\u3066\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n```hs\nlet ord = sort $ zip bs [0..]\n```\n\n\u3053\u3046\u3044\u3046\u51e6\u7406\u306fHaskell\u3060\u3068\u975e\u5e38\u306b\u697d\u3067\u3059\u306d\u3002\n\n\u3042\u3068\u306f\u3053\u308c\u306e\u6dfb\u3048\u5b57\u3092\u9806\u306b\u6d88\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```hs\ngo ((_, ix): rs) !reft !acc =\n  let (!l, _, !r) = S.splitMember ix reft\n  in go rs (S.delete ix reft) $ acc + min (S.size l) (S.size r)\n```\n\n\u666e\u901a\u306b\u518d\u5e30\u3067\u7e70\u308a\u8fd4\u3057\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u300210^5\u500b\u8981\u7d20\u304c\u3042\u308b\u306e\u3067\u3001`!`\u304c\u306a\u3044\u3068\u591a\u5206\u30b9\u30bf\u30c3\u30af\u304c\u6ea2\u308c\u307e\u3059\u3002\n\n`Data.Set.splitMember` \u3092\u4f7f\u3046\u3068\u3001`Set`\u3092\u3001\u6307\u5b9a\u3057\u305f\u5024\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3068\u5c0f\u3055\u3044\u3082\u306e\u306e2\u3064\u306b\u5206\u5272\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u64cd\u4f5c\u306f `O(logn)` \u3067\u5b8c\u4e86\u3057\u307e\u3059\u3002\u5c0f\u3055\u3044\u3082\u306e\u304c\u3001\u5404\u8981\u7d20\u3088\u308a\u3082\u5de6\u306b\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u3001\u5927\u304d\u3044\u7269\u304c\u53f3\u306b\u3042\u308b\u3082\u306e\u306e\u500b\u6570\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306e`min`\u3092\u3068\u3063\u3066\u8db3\u3057\u4e0a\u3052\u3066\u3044\u3051\u3070\u3001\u6c42\u3081\u308b\u89e3\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\u3053\u308c\u306fHaskell\u5411\u304d\u306a\u554f\u984c\u3067\u3057\u305f\u306d\uff08\u306a\u304a`Data.Set`\u306e\u4ee3\u308f\u308a\u306b`Data.IntSet`\u3092\u4f7f\u3046\u3068TLE\u3059\u308b\u6a21\u69d8\uff09\u3002\n\n```hs:c.hs\n{-# LANGUAGE BangPatterns        #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport           Control.Applicative\nimport qualified Data.ByteString.Char8 as B\nimport           Data.List\nimport           Data.Maybe\nimport qualified Data.Set              as S\n\nmain :: IO ()\nmain = do\n  n :: Int <- readLn\n  bs :: [Int] <- map (fst . fromJust . B.readInt) . B.words <$> B.getLine\n\n  let ord = sort $ zip bs [0..]\n\n      go [] _ acc = acc\n      go ((_, ix): rs) !reft !acc =\n        let (!l, _, !r) = S.splitMember ix reft\n        in go rs (S.delete ix reft) $ acc + min (S.size l) (S.size r)\n\n  print $ go ord (S.fromList [0..n-1]) 0\n```\n\n## D - \u8cb7\u3044\u7269\u4e0a\u624b\n\n\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u90e8\u5206\u70b9\u89e3\u6cd5\u306e\u307f\u3002\n\n\u90e8\u5206\u70b9\u3092\u53d6\u308b\u306b\u306f\u3069\u306e\u30bb\u30c3\u30c8\u306e\u7d4c\u9a13\u5024\u3092\u30b2\u30c3\u30c8\u3059\u308b\u306e\u304b\u5168\u901a\u308a\u8a66\u305b\u3070OK\u3067\u3059\uff082^10\u901a\u308a\uff09\u3002\n\ngenerate & test \u3092\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u30ea\u30b9\u30c8\u30e2\u30ca\u30c9\u3092\u4f7f\u3046\u3068\u3068\u3063\u3066\u3082\u7dba\u9e97\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```hs\nlet ans = maximum $ do\n      ...\n```\n\n\u3053\u3053\u306b\u89e3\u306e\u5019\u88dc\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u3001\u3069\u306e\u7d4c\u9a13\u5024\u30d1\u30c3\u30af\u3092\u53d6\u5f97\u3059\u308b\u306e\u304b\u3001n\u8981\u7d20\u306eTrue/False\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u901a\u308a\u751f\u6210\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u306f `[True, False]` \u306e2\u629e\u3092n\u56de\u3084\u308b\u308f\u3051\u306a\u306e\u3067\u3001`replicateM` \u304c\u4f7f\u3048\u307e\u3059\u3002\n\n```hs\nsel <- replicateM n [True, False]\n```\n\n\u6b21\u306b\u3069\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u8cb7\u308f\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304b\u6c42\u3081\u307e\u3059\u3002\n\n```hs\nbuy = nub $ concat [ a | (True, a) <- zip sel as ]\n```\n\nzip\u3057\u3066True\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u305d\u308c\u306e\u548c\u96c6\u5408\u3092\u6c42\u3081\u307e\u3059\u3002\u4eca\u56de\u306f\u901f\u5ea6\u3092\u8003\u3048\u306a\u3044\u306e\u3067\u3001`concat`\u3057\u3066`nub`\u3057\u307e\u3057\u305f\u3002\n\n\u3042\u3068\u306f\u5fc5\u8981\u306a\u91d1\u984d\u3092\u6c42\u3081\u3066\u3001\n\n```hs\npay = sum $ map (\\i -> ts !! (i-1)) buy\n```\n\n\u5f97\u3089\u308c\u308b\u7d4c\u9a13\u5024\u3092\u6c42\u3081\u3066\u3001\n\n```hs\nexp = sum [ s | (True, s) <- zip sel ss ]\n```\n\n\u52b9\u7387\u3092\u6c42\u3081\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n```hs\nreturn $ fromIntegral exp / fromIntegral pay\n```\n\n`Double`\u306e\u5024\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u3084\u3063\u3071\u308a`printf`\u3092\u4f7f\u3046\u3068\u697d\u3067\u3059\u3002\n\n```hs\nprintf \"%.12f\\n\" (ans :: Double)\n```\n\n```hs:d.hs\nimport           Control.Applicative\nimport           Control.Monad\nimport           Data.List\nimport           Text.Printf\n\ngetInts :: IO [Int]\ngetInts = map read . words <$> getLine\n\nmain :: IO ()\nmain = do\n  [n, m] <- getInts\n\n  ss <- getInts\n  ts <- getInts\n\n  as <- replicateM n $ do\n    (_k: a) <- getInts\n    return a\n\n  let ans = maximum $ do\n        sel <- replicateM n [True, False]\n        let buy = nub $ concat [ a | (True, a) <- zip sel as ]\n            pay = sum $ map (\\i -> ts !! (i-1)) buy\n            exp = sum [ s | (True, s) <- zip sel ss ]\n        return $ fromIntegral exp / fromIntegral pay\n\n  printf \"%.12f\\n\" (ans :: Double)\n```\n"}