{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u306e\u3093\u3073\u308a\u5ea7\u308a\u305f\u3044\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f2,30\u5206\u7a0b\u5ea6\u3002\nBench#sit_down\u306e\u5224\u5b9a\u90e8\u5206\u306f\u521d\u3081if\u6587\u3067\u66f8\u3044\u3066\u3044\u305f\u304c\u3001\u7121\u99c4\u306bcase\u306b\u66f8\u304d\u63db\u3048\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u3002\nclass BenchRule\n  def initialize input\n    n, @rule = input.split(\":\")\n    @bench = Bench.new n.to_i\n  end\n\n  def start\n    @rule.each_char{|r|\n      case r\n      when r.upcase   then @bench.sit_down r\n      when r.downcase then @bench.stand_up r.upcase\n      end\n    }\n    @bench.to_s\n  end\nend\n\nclass Bench\n  def initialize n\n    @bench = Array.new(n){nil}\n  end\n\n  def sit_down name\n    i = case @bench.map{|b| b.nil? ? 0 : 1}.join\n        # \u4e21\u65b9\u7a7a\u3044\u3066\u3044\u308b\u5834\u5408\n        when /(^00|000|00$)/     then $~.begin(0) + ($~.begin(0).zero? ? 0 : 1)\n        # \u7247\u65b9\u7a7a\u3044\u3066\u3044\u308b\u5834\u5408\n        when /(^01|10$|100|001)/ then $~.begin(0) + (($~.begin(0).zero? and $1[0] == \"0\") ? 0 : 1)\n        # \u4e21\u5074\u306b\u5ea7\u3063\u3066\u3044\u308b\u5834\u5408\n        when /(0)/               then $~.begin(0)\n        # \u5168\u3066\u57cb\u307e\u3063\u3066\u3044\u308b\u5834\u5408\n        # XXX: \u300c\u7a7a\u5e2d\u304c\u306a\u3044\u72b6\u614b\u3067\u4eba\u304c\u6765\u308b\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u300d\u3068\u3042\u308b\u304c\u5ff5\u306e\u305f\u3081\n        else                          nil\n        end\n    @bench[i] = name unless i.nil?\n  end\n\n  def stand_up name\n    if index = @bench.index(name)\n      @bench[index] = nil\n    end\n  end\n\n  def to_s\n    @bench.map{|b| b.nil? ? \"-\" : b}.join\n  end\nend\n\ntest = <<_TEST\n/*1*/ test( \"6:NABEbBZn\", \"-ZAB-E\" );\n/*2*/ test( \"1:A\", \"A\" );\n/*3*/ test( \"1:Aa\", \"-\" );\n/*4*/ test( \"2:AB\", \"AB\" );\n/*5*/ test( \"2:AaB\", \"B-\" );\n/*6*/ test( \"2:AZa\", \"-Z\" );\n/*7*/ test( \"2:AZz\", \"A-\" );\n/*8*/ test( \"3:ABC\", \"ACB\" );\n/*9*/ test( \"3:ABCa\", \"-CB\" );\n/*10*/ test( \"4:ABCD\", \"ADBC\" );\n/*11*/ test( \"4:ABCbBD\", \"ABDC\" );\n/*12*/ test( \"4:ABCDabcA\", \"-D-A\" );\n/*13*/ test( \"5:NEXUS\", \"NUESX\" );\n/*14*/ test( \"5:ZYQMyqY\", \"ZM-Y-\" );\n/*15*/ test( \"5:ABCDbdXYc\", \"AYX--\" );\n/*16*/ test( \"6:FUTSAL\", \"FAULTS\" );\n/*17*/ test( \"6:ABCDEbcBC\", \"AECB-D\" );\n/*18*/ test( \"7:FMTOWNS\", \"FWMNTSO\" );\n/*19*/ test( \"7:ABCDEFGabcdfXYZ\", \"YE-X-GZ\" );\n/*20*/ test( \"10:ABCDEFGHIJ\", \"AGBHCIDJEF\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Bench' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    rule = BenchRule.new input\n    it input do\n      assert_equal expect, rule.start\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u306e\u3093\u3073\u308a\u5ea7\u308a\u305f\u3044](http://nabetani.sakura.ne.jp/hena/ord7selectchair/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f2,30\u5206\u7a0b\u5ea6\u3002\n\n`Bench#sit_down`\u306e\u5224\u5b9a\u90e8\u5206\u306f\u521d\u3081`if`\u6587\u3067\u66f8\u3044\u3066\u3044\u305f\u304c\u3001\u7121\u99c4\u306b`case`\u306b\u66f8\u304d\u63db\u3048\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u3002\n\n```ruby\nclass BenchRule\n  def initialize input\n    n, @rule = input.split(\":\")\n    @bench = Bench.new n.to_i\n  end\n\n  def start\n    @rule.each_char{|r|\n      case r\n      when r.upcase   then @bench.sit_down r\n      when r.downcase then @bench.stand_up r.upcase\n      end\n    }\n    @bench.to_s\n  end\nend\n\nclass Bench\n  def initialize n\n    @bench = Array.new(n){nil}\n  end\n\n  def sit_down name\n    i = case @bench.map{|b| b.nil? ? 0 : 1}.join\n        # \u4e21\u65b9\u7a7a\u3044\u3066\u3044\u308b\u5834\u5408\n        when /(^00|000|00$)/     then $~.begin(0) + ($~.begin(0).zero? ? 0 : 1)\n        # \u7247\u65b9\u7a7a\u3044\u3066\u3044\u308b\u5834\u5408\n        when /(^01|10$|100|001)/ then $~.begin(0) + (($~.begin(0).zero? and $1[0] == \"0\") ? 0 : 1)\n        # \u4e21\u5074\u306b\u5ea7\u3063\u3066\u3044\u308b\u5834\u5408\n        when /(0)/               then $~.begin(0)\n        # \u5168\u3066\u57cb\u307e\u3063\u3066\u3044\u308b\u5834\u5408\n        # XXX: \u300c\u7a7a\u5e2d\u304c\u306a\u3044\u72b6\u614b\u3067\u4eba\u304c\u6765\u308b\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u300d\u3068\u3042\u308b\u304c\u5ff5\u306e\u305f\u3081\n        else                          nil\n        end\n    @bench[i] = name unless i.nil?\n  end\n\n  def stand_up name\n    if index = @bench.index(name)\n      @bench[index] = nil\n    end\n  end\n\n  def to_s\n    @bench.map{|b| b.nil? ? \"-\" : b}.join\n  end\nend\n\ntest = <<_TEST\n/*1*/ test( \"6:NABEbBZn\", \"-ZAB-E\" );\n/*2*/ test( \"1:A\", \"A\" );\n/*3*/ test( \"1:Aa\", \"-\" );\n/*4*/ test( \"2:AB\", \"AB\" );\n/*5*/ test( \"2:AaB\", \"B-\" );\n/*6*/ test( \"2:AZa\", \"-Z\" );\n/*7*/ test( \"2:AZz\", \"A-\" );\n/*8*/ test( \"3:ABC\", \"ACB\" );\n/*9*/ test( \"3:ABCa\", \"-CB\" );\n/*10*/ test( \"4:ABCD\", \"ADBC\" );\n/*11*/ test( \"4:ABCbBD\", \"ABDC\" );\n/*12*/ test( \"4:ABCDabcA\", \"-D-A\" );\n/*13*/ test( \"5:NEXUS\", \"NUESX\" );\n/*14*/ test( \"5:ZYQMyqY\", \"ZM-Y-\" );\n/*15*/ test( \"5:ABCDbdXYc\", \"AYX--\" );\n/*16*/ test( \"6:FUTSAL\", \"FAULTS\" );\n/*17*/ test( \"6:ABCDEbcBC\", \"AECB-D\" );\n/*18*/ test( \"7:FMTOWNS\", \"FWMNTSO\" );\n/*19*/ test( \"7:ABCDEFGabcdfXYZ\", \"YE-X-GZ\" );\n/*20*/ test( \"10:ABCDEFGHIJ\", \"AGBHCIDJEF\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Bench' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    rule = BenchRule.new input\n    it input do\n      assert_equal expect, rule.start\n    end\n  end\nend\n```\n"}