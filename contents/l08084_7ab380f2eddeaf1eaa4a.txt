{"tags": ["GoogleMapsAPI", "angular", "Angular2"], "context": "\n\n\u306f\u3058\u3081\u306b\nangular2-google-maps\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001Angular\u30a2\u30d7\u30ea\u4e0a\u3067\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u65bd\u3059\u308b\u30c7\u30e2\u30a2\u30d7\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u958b\u767a\u74b0\u5883\n\nAngular@2.4.1\nangular2-google-maps@0.17.0\ntypescript@2.0.10\n\n\n\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0(Geocoding)\u3068\u306f\nGoogle Maps API\u516c\u5f0f\u30b5\u30a4\u30c8\u304b\u3089\u5f15\u7528\u3002\n\n\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u306f\u3001\u4f4f\u6240\uff08\u305f\u3068\u3048\u3070\u300c\u6771\u4eac\u90fd\u6e2f\u533a\u516d\u672c\u6728 6-10-1\u300d\uff09\u3092\u5730\u7406\u7684\u5ea7\u6a19\uff08\u305f\u3068\u3048\u3070\u3001\u7def\u5ea6 35.6604282\u3001\u7d4c\u5ea6 139.7269877\uff09\u306b\u5909\u63db\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002\u5909\u63db\u3057\u305f\u5ea7\u6a19\u306f\u3001\u30de\u30c3\u30d7\u4e0a\u306b\u5834\u6240\u306e\u76ee\u5370\u3092\u4ed8\u3051\u308b\u5834\u5408\u3084\u3001\u4f4d\u7f6e\u6307\u5b9a\u3092\u884c\u3046\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n\n\u30c7\u30e2\u30a2\u30d7\u30ea\u6982\u8981\n\u5165\u529b\u3057\u305f\u5834\u6240\u60c5\u5831(\u4f8b:\u4eac\u90fd\u99c5)\u3092\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u7def\u5ea6\u3068\u7d4c\u5ea6\u306b\u5909\u63db\u5f8c\u3001GoogleMap\u306b\u6e21\u3057\u3066\u30de\u30fc\u30ab\u30fc\u3092\u7f6e\u304f\u3068\u3044\u3046\u51e6\u7406\u3092Angular\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\nGoogleMap\u3067\u8868\u793a\u3057\u305f\u3044\u5834\u6240\u3092\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u3066Enter\u3059\u308b\u3068\u3002\u3002\u3002\n\nGoogleMap\u306e\u4e2d\u5fc3\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u5730\u70b9(\u4eac\u90fd\u99c5)\u306b\u79fb\u52d5\u3057\u3001\u30de\u30fc\u30ab\u30fc\u304c\u7f6e\u304b\u308c\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3002\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30e9\u30a4\u30d6\u30e9\u30eaangular2-google-maps\u306e\u5c0e\u5165\u65b9\u6cd5\u306f\u3001\u516c\u5f0f\u30b5\u30a4\u30c8\u306eGetting Started\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\napp.component.ts\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MapService } from '../services/map.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  lat: number = 35.6329007;\n  lng: number = 139.8782003;\n  zoom: number = 15;\n\n  constructor(\n    public mapService: MapService,\n  ) {}\n\n  public geocoding(f: NgForm) {\n    let self = this;\n\n    this.mapService.geocoding(f.value.address).then(\n      rtn => {\n        let location = rtn[0].geometry.location;\n\n        self.lat = location.lat();\n        self.lng = location.lng();\n      }\n    );\n  }\n}\n\n\n\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u5834\u6240\u60c5\u5831\u3092\u3001MapService\u306b\u6e21\u3057\u305f\u5f8c\u3001MapService\u304b\u3089\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u7d50\u679c\u3068\u3057\u3066\u6e21\u3055\u308c\u305f\u7def\u5ea6\u3068\u7d4c\u5ea6\u3092\u53d7\u3051\u53d6\u308a\u3001HTML\u4e0a\u306eGoogleMap\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\napp.component.html\n<form #f=\"ngForm\" (ngSubmit)=\"geocoding(f)\" novalidate>\n  <input type=\"text\" name=\"address\" placeholder=\"\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044...(\u4f8b:\u54c1\u5ddd\u99c5)\" ngModel>\n</form>\n<sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n  <sebm-google-map-marker [latitude]=\"lat\" [longitude]=\"lng\"></sebm-google-map-marker>\n</sebm-google-map>\n\n\n\nmap.service.ts\nimport { Injectable } from '@angular/core';\n\nimport { MapsAPILoader } from 'angular2-google-maps/core';\n\ndeclare let google: any;\n\n@Injectable()\nexport class MapService {\n    private geocoder: any = null;\n\n    constructor(\n        private mapsAPILoader: MapsAPILoader,\n    ) { }\n\n    public geocoding(address: string): Promise<any> {\n        return this.mapsAPILoader.load().then(() => {\n            this.geocoder = new google.maps.Geocoder();\n\n            return new Promise((resolve, reject) => {\n                this.geocoder.geocode({ 'address': address }, (result: any, status: any) => {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        resolve(result);\n                    } else {\n                        reject(status);\n                    }\n                });\n            });\n        });\n    }\n}\n\n\n\napp.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\n\nimport { AgmCoreModule } from 'angular2-google-maps/core';\n\nimport { MapService } from '../services/map.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    AgmCoreModule.forRoot({\n      apiKey: 'YourAPIKey'\n    })\n  ],\n  providers: [\n    MapService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\ntips\nmapsAPILoader.load()\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u300cgoogle is not undefined\u301c\u300d\u30a8\u30e9\u30fc\u767a\u751f\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\nReverseGeocoding\u7de8\u3001\u4ea4\u901a\u6e0b\u6ede\u60c5\u5831\u8868\u793a\u7de8\u3068\u7d9a\u304d\u307e\u3059\u3002\n\u306a\u304a\u3001\u4f5c\u6210\u3057\u305f\u30c7\u30e2\u30a2\u30d7\u30ea\u306f\u3001Github\u306b\u3042\u3052\u3066\u308b\u306e\u3067\u3001Google maps\u306eAPIKEY\u3092\u53d6\u5f97\u3057\u3066\u8a2d\u5b9a\u3059\u308c\u3070\u52d5\u304b\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/l08084/example-angular2-google-maps-geocoding\n\n\u624b\u9806\n\nGoogleMap\u306eAPIKEY\u3092\u53d6\u5f97\u3057\u3066\u3001src/app/app.module.ts\u306b\u8a2d\u5b9a\nnpm install\u30b3\u30de\u30f3\u30c9\u5b9f\u65bd\nng serve\u30b3\u30de\u30f3\u30c9\u5b9f\u65bd\n\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\u3001http://localhost:4200/ \u3092\u5165\u529b\n\n\n\u53c2\u8003\n\nhttps://github.com/SebastianM/angular2-google-maps/issues/689\nhttp://mae.chab.in/archives/2351\n\n# \u306f\u3058\u3081\u306b\n[angular2-google-maps](https://github.com/SebastianM/angular2-google-maps)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001Angular\u30a2\u30d7\u30ea\u4e0a\u3067\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u65bd\u3059\u308b\u30c7\u30e2\u30a2\u30d7\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n### \u958b\u767a\u74b0\u5883\n\n- Angular@2.4.1\n\n- angular2-google-maps@0.17.0\n\n- typescript@2.0.10\n\n## \u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0(Geocoding)\u3068\u306f\n[Google Maps API\u516c\u5f0f\u30b5\u30a4\u30c8](https://developers.google.com/maps/documentation/geocoding/intro?hl=ja)\u304b\u3089\u5f15\u7528\u3002\n> \u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u306f\u3001\u4f4f\u6240\uff08\u305f\u3068\u3048\u3070\u300c\u6771\u4eac\u90fd\u6e2f\u533a\u516d\u672c\u6728 6-10-1\u300d\uff09\u3092\u5730\u7406\u7684\u5ea7\u6a19\uff08\u305f\u3068\u3048\u3070\u3001\u7def\u5ea6 35.6604282\u3001\u7d4c\u5ea6 139.7269877\uff09\u306b\u5909\u63db\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002\u5909\u63db\u3057\u305f\u5ea7\u6a19\u306f\u3001\u30de\u30c3\u30d7\u4e0a\u306b\u5834\u6240\u306e\u76ee\u5370\u3092\u4ed8\u3051\u308b\u5834\u5408\u3084\u3001\u4f4d\u7f6e\u6307\u5b9a\u3092\u884c\u3046\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n# \u30c7\u30e2\u30a2\u30d7\u30ea\u6982\u8981\n\u5165\u529b\u3057\u305f\u5834\u6240\u60c5\u5831(\u4f8b:\u4eac\u90fd\u99c5)\u3092\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u7def\u5ea6\u3068\u7d4c\u5ea6\u306b\u5909\u63db\u5f8c\u3001GoogleMap\u306b\u6e21\u3057\u3066\u30de\u30fc\u30ab\u30fc\u3092\u7f6e\u304f\u3068\u3044\u3046\u51e6\u7406\u3092Angular\u3092\u4f7f\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\nGoogleMap\u3067\u8868\u793a\u3057\u305f\u3044\u5834\u6240\u3092\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u3066Enter\u3059\u308b\u3068\u3002\u3002\u3002\n![20161229160340.png](https://qiita-image-store.s3.amazonaws.com/0/80252/a9f9fd40-6c69-d3d0-7ee8-f8a873cf44cd.png \"20161229160340.png\")\n\nGoogleMap\u306e\u4e2d\u5fc3\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u5730\u70b9(\u4eac\u90fd\u99c5)\u306b\u79fb\u52d5\u3057\u3001\u30de\u30fc\u30ab\u30fc\u304c\u7f6e\u304b\u308c\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3002\n\n![20161229160450.png](https://qiita-image-store.s3.amazonaws.com/0/80252/6e647489-600b-135b-aba3-4e6dfd4cfec7.png \"20161229160450.png\")\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30e9\u30a4\u30d6\u30e9\u30ea[angular2-google-maps](https://github.com/SebastianM/angular2-google-maps)\u306e\u5c0e\u5165\u65b9\u6cd5\u306f\u3001\u516c\u5f0f\u30b5\u30a4\u30c8\u306e[Getting Started](https://angular-maps.com/docs/getting-started.html)\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n```javascript:app.component.ts\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MapService } from '../services/map.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  lat: number = 35.6329007;\n  lng: number = 139.8782003;\n  zoom: number = 15;\n\n  constructor(\n    public mapService: MapService,\n  ) {}\n\n  public geocoding(f: NgForm) {\n    let self = this;\n\n    this.mapService.geocoding(f.value.address).then(\n      rtn => {\n        let location = rtn[0].geometry.location;\n\n        self.lat = location.lat();\n        self.lng = location.lng();\n      }\n    );\n  }\n}\n```\n\n\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306b\u5165\u529b\u3057\u305f\u5834\u6240\u60c5\u5831\u3092\u3001MapService\u306b\u6e21\u3057\u305f\u5f8c\u3001MapService\u304b\u3089\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u7d50\u679c\u3068\u3057\u3066\u6e21\u3055\u308c\u305f\u7def\u5ea6\u3068\u7d4c\u5ea6\u3092\u53d7\u3051\u53d6\u308a\u3001HTML\u4e0a\u306eGoogleMap\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n```html:app.component.html\n<form #f=\"ngForm\" (ngSubmit)=\"geocoding(f)\" novalidate>\n  <input type=\"text\" name=\"address\" placeholder=\"\u5834\u6240\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044...(\u4f8b:\u54c1\u5ddd\u99c5)\" ngModel>\n</form>\n<sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n  <sebm-google-map-marker [latitude]=\"lat\" [longitude]=\"lng\"></sebm-google-map-marker>\n</sebm-google-map>\n```\n\n```javascript:map.service.ts\nimport { Injectable } from '@angular/core';\n\nimport { MapsAPILoader } from 'angular2-google-maps/core';\n\ndeclare let google: any;\n\n@Injectable()\nexport class MapService {\n    private geocoder: any = null;\n\n    constructor(\n        private mapsAPILoader: MapsAPILoader,\n    ) { }\n\n    public geocoding(address: string): Promise<any> {\n        return this.mapsAPILoader.load().then(() => {\n            this.geocoder = new google.maps.Geocoder();\n\n            return new Promise((resolve, reject) => {\n                this.geocoder.geocode({ 'address': address }, (result: any, status: any) => {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        resolve(result);\n                    } else {\n                        reject(status);\n                    }\n                });\n            });\n        });\n    }\n}\n```\n  \n  \n```javascript:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\n\nimport { AgmCoreModule } from 'angular2-google-maps/core';\n\nimport { MapService } from '../services/map.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    AgmCoreModule.forRoot({\n      apiKey: 'YourAPIKey'\n    })\n  ],\n  providers: [\n    MapService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n## tips\nmapsAPILoader.load()\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u300cgoogle is not undefined\u301c\u300d\u30a8\u30e9\u30fc\u767a\u751f\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# \u6700\u5f8c\u306b\nReverseGeocoding\u7de8\u3001\u4ea4\u901a\u6e0b\u6ede\u60c5\u5831\u8868\u793a\u7de8\u3068\u7d9a\u304d\u307e\u3059\u3002\n\u306a\u304a\u3001\u4f5c\u6210\u3057\u305f\u30c7\u30e2\u30a2\u30d7\u30ea\u306f\u3001Github\u306b\u3042\u3052\u3066\u308b\u306e\u3067\u3001Google maps\u306eAPIKEY\u3092\u53d6\u5f97\u3057\u3066\u8a2d\u5b9a\u3059\u308c\u3070\u52d5\u304b\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nhttps://github.com/l08084/example-angular2-google-maps-geocoding\n### \u624b\u9806\n\n1. GoogleMap\u306eAPIKEY\u3092\u53d6\u5f97\u3057\u3066\u3001src/app/app.module.ts\u306b\u8a2d\u5b9a\n\n2. npm install\u30b3\u30de\u30f3\u30c9\u5b9f\u65bd\n\n3. ng serve\u30b3\u30de\u30f3\u30c9\u5b9f\u65bd\n\n4. \u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\u3001http://localhost:4200/ \u3092\u5165\u529b\n\n# \u53c2\u8003\n- https://github.com/SebastianM/angular2-google-maps/issues/689\n- http://mae.chab.in/archives/2351\n"}