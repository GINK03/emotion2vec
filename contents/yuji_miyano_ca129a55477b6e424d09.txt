{"context": "\n\n1. \u6982\u8981\n\u4eca\u307e\u3067ESP8266\u3068Milkcocoa\u3092\u4f7f\u3063\u3066\u5de5\u4f5c\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001openFrameworks\u3068ESP8266\u3092\u9023\u643a\u3055\u305b\u3088\u3046\u3068\u601d\u3046\u3068Milkcocoa\u3092\u3069\u3046\u4f7f\u3063\u3066\u3044\u3044\u304b\u308f\u304b\u3089\u305a\u3001\u53cb\u4eba\u306b\u805e\u304f\u3068MQTT\u30b5\u30fc\u30d0\u3092\u7acb\u3066\u308c\u3070\u3044\u3044\u3088\u3068\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u5f97\u305f\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u52c9\u5f37\u306e\u899a\u3048\u66f8\u304d\u3067\u3059\u3002\n\n2. \u7528\u610f\u3059\u308b\u3082\u306e\n\nESPr Developer\uff08ESP-WROOM-02\u958b\u767a\u30dc\u30fc\u30c9\uff09 - \u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\n\n\n3. \u4f5c\u696d\u74b0\u5883\n\nMacBook Air (13-inch, Mid 2012) & Mac OS 10.11.4\nArduino IDE 1.6.5\nopenFrameworks 0.9.3\n\n\n4. \u53c2\u8003\u30b5\u30a4\u30c8\n\n\n\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG\n\nESP8266\u5074\u306f\u307b\u3068\u3093\u3069\u3053\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3081\u3063\u3061\u3083\u4e01\u5be7\u3002\n\n\n\nosx \u3067 brew update \u304c error \u306e\u6642\u306b\u3001\u8a66\u3059\u3053\u3068 - Qiita\n\nmosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u9014\u4e2d\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u304d\u306b\u5f79\u7acb\u3063\u305f\n\n\n\nesp8266-mqtt-quicktest/mqtt_esp8266_test.ino at master \u00b7 kiyopikko/esp8266-mqtt-quicktest\n\n1\u3064\u76ee\u306e\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\n\n256dpi/ofxMQTT: MQTT addon for openframeworks based on libmosquitto\n\nopenFrameworks\u7528\u306eMQTT\u30a2\u30c9\u30aa\u30f3 ofxMQTT\n\n\n\nESP8266 | Adafruit IO Basics: Digital Output | Adafruit Learning System\n\nESP8266\u3067Adafruit\u306eMQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u3068\u304d\u306bMQTT\u306epayload\u306eascii\u3092int\u306b\u5909\u3048\u308b\u3068\u3053\u308d\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\n\n\n\n5. MQTT\u30d6\u30ed\u30fc\u30ab\u3092\u7acb\u3066\u308b\n\u53c2\u8003\u30b5\u30a4\u30c8(\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG)\u306b\u3057\u305f\u304c\u3063\u3066\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u306f\u5168\u304f\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u304f\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u65e9\u3044\u3067\u3059\u3002\n\n5.1 Mosquito\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nHomebrew\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408)\n\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\u79c1\u306fHomebrew\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u4e0a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3059\u308b\u3068\u3059\u3067\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\nMiyano-MacBook-Air:~ YujiMiyano$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nIt appears Homebrew is already installed. If your intent is to reinstall you\nshould do the following before running this installer again:\n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\nThe current contents of /usr/local are bin Cellar CODEOFCONDUCT.md CONTRIBUTING.md etc foreman git heroku include lib Library LICENSE.txt opt README.md share SUPPORTERS.md texlive var .git .gitignore\n\n\nMosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n$ brew install mosquitto\n\n\u3057\u3070\u3089\u304f\u7d4c\u3063\u305f\u3042\u3068\u4ee5\u4e0b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u2026\u3002\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/openssl/1.0.2d_1: 464 files, 17M, built in 6.4 minutes\n==> Installing mosquitto dependency: libwebsockets\n==> Downloading http://git.libwebsockets.org/cgi-bin/cgit/libwebsockets/snapshot\n\ncurl: (56) SSLRead() return error -9806\nError: Failed to download resource \"libwebsockets\"\nDownload failed: http://git.libwebsockets.org/cgi-bin/cgit/libwebsockets/snapshot/libwebsockets-1.4-chrome43-firefox-36.tar.gz\nMiyano-MacBook-Air:~ YujiMiyano$ \n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068Qiita\u306e\u8a18\u4e8b\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n - osx \u3067 brew update \u304c error \u306e\u6642\u306b\u3001\u8a66\u3059\u3053\u3068 - Qiita\n\u3053\u3053\u306b\u66f8\u304b\u308c\u305f\u3068\u304a\u308a\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n$ cd /usr/local\n$ git status\n\n$ git reset --hard && git clean -df\n\n$ sudo brew update\n\n\u3053\u306e\u5f8c\u3001\u518d\u3073\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3002\n$ brew install mosquitto\n\n\u4eca\u5ea6\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3002\nError: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nCould not symlink sbin/mosquitto\n/usr/local/sbin is not writable.\n\nYou can try again using:\n  brew link mosquitto\n\n\u305f\u3060\u3057\u3053\u308c\u306f\u53c2\u8003\u30b5\u30a4\u30c8(\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG)\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u305d\u306e\u901a\u308a\u306b\u5bfe\u51e6\u3057\u3066\u307f\u308b\u3002\n$ sudo chown -R $(whoami) /usr/local\n$ brew link mosquitto\n\n\n5.\uff12 Mosquito\u306e\u5b9f\u884c\n\u3044\u3056\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u6b21\u306f\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u3067\u308b\u3002\nMiyano-MacBook-Air:local YujiMiyano$ mosquitto\n-bash: mosquitto: command not found\n\n\u3053\u308c\u3082\u53c2\u8003\u30b5\u30a4\u30c8(\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG)\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u901a\u308a\u5bfe\u51e6\u3057\u3066\u307f\u308b\u3002\n$ sudo vim /etc/paths\n\nvim\u304c\u8d77\u52d5\u3059\u308b\u306e\u3067\u3001i\u3092\u62bc\u3057\u3066\u633f\u5165\u30e2\u30fc\u30c9\u306b\u3057\u305f\u3042\u3068\u3067/usr/local/sbin\u3092\u8ffd\u52a0\u3057\u305f\u3042\u3068esc\u3092\u62bc\u3057\u3066\u30ce\u30fc\u30de\u30eb\u30e2\u30fc\u30c9\u306b\u623b\u3057\u3066:wq\u3067\u4fdd\u5b58\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u518d\u8d77\u52d5\u3057\u3066\u304b\u3089\u518d\u5ea6mosquitto\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\nMiyano-MacBook-Air:~ YujiMiyano$ mosquitto\n1466227860: mosquitto version 1.4.8 (build date 2016-05-27 16:28:37+0100) starting\n1466227860: Using default config.\n1466227860: Opening ipv4 listen socket on port 1883.\n1466227860: Opening ipv6 listen socket on port 1883.\n\n\u3088\u3046\u3084\u304f\u4e0a\u624b\u304f\u3044\u3063\u305f\u3063\u307d\u3044\u3002\n\n\uff16. ESP8266\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3080\n\n6.1 Arduino IDE\u306bESP8266\u3092\u5bfe\u5fdc\u3055\u305b\u308b\n\u4eca\u307e\u3067\u306bArduino IDE\u3067ESP8266\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u98db\u3070\u3057\u3066\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u98db\u3070\u3057\u307e\u3059\u304c\u3001\u307e\u3060\u306a\u4eba\u306f\u53c2\u8003\u30b5\u30a4\u30c8\u306b\u3057\u305f\u304c\u3063\u3066\u3084\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n6.2 Adafruit MQTT Library\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3053\u3061\u3089\u3082\u53c2\u8003\u30b5\u30a4\u30c8(\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG)\u901a\u308a\u306b\u3084\u308c\u3070\u3059\u3050\u306b\u7d42\u308f\u308a\u307e\u3059\u3002\nArduino IDE\u3067Library Manager\u3092\u958b\u3044\u3066\u300cAdafruit MQTT\u300d\u3067\u691c\u7d22\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\n\n\n6.3 \u52d5\u4f5c\u78ba\u8a8d\n\u53c2\u8003\u30b5\u30a4\u30c8\u306b\u8a18\u8f09\u306e\u4ee5\u4e0b\u306eURL\u306b\u3042\u308b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3002WLAN_SSID\u3068WLAN_PASS\u3001\u30d6\u30ed\u30fc\u30ab\u306e\u30db\u30b9\u30c8\u3001Username\u3001Password\u3092\u5165\u529b\u3002\nesp8266-mqtt-quicktest/mqtt_esp8266_test.ino at master \u00b7 kiyopikko/esp8266-mqtt-quicktest\n\u3061\u306a\u307f\u306bifconfig\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u518d\u8d77\u52d5\u3057\u3066\u3001\u518d\u5ea6mosquitto\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u304c\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3057\u305f\u3002\nMiyano-MacBook-Air:~ YujiMiyano$ mosquitto\n1466233989: mosquitto version 1.4.8 (build date 2016-05-27 16:28:37+0100) starting\n1466233989: Using default config.\n1466233989: Opening ipv4 listen socket on port 1883.\n1466233989: Error: Address already in use\n\nESP8266\u3092\u63a5\u7d9a\u3057\u66f8\u304d\u8fbc\u307f\u3001\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n\u66f8\u304d\u8fbc\u307f\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u901a\u308a\u3067\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\n7. openFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\n\n7.1 ofxMQTT\u30a2\u30c9\u30aa\u30f3\u3092\u5165\u624b\nMQTT\u3092\u4f7f\u3046\u305f\u3081\u306e\u30a2\u30c9\u30aa\u30f3\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u308b\u3002\n256dpi/ofxMQTT: MQTT addon for openframeworks based on libmosquitto\n\n7.2 ofxMQTT\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\n\n\u3053\u3061\u3089(ofxMQTT/example-ofxMQTT/src at master \u00b7 256dpi/ofxMQTT)\u306b\u8a18\u8f09\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\nmain.cpp\n#include \"ofApp.h\"\n#include \"ofAppGlutWindow.h\"\n\nint main(){\n  ofAppGlutWindow window;\n  ofSetupOpenGL(&window, 1024, 768, OF_WINDOW);\n  ofRunApp(new ofApp());\n}\n\n\n\nofApp.cpp\n#include \"ofApp.h\"\n\nvoid ofApp::setup(){\n  client.begin(\"broker.shiftr.io\", 1883);\n  client.connect(\"openframeworks\", \"try\", \"try\");\n\n  ofAddListener(client.onOnline, this, &ofApp::onOnline);\n  ofAddListener(client.onOffline, this, &ofApp::onOffline);\n  ofAddListener(client.onMessage, this, &ofApp::onMessage);\n}\n\nvoid ofApp::update() {\n  client.update();\n}\n\nvoid ofApp::exit(){\n  client.disconnect();\n}\n\nvoid ofApp::onOnline(){\n  ofLog() << \"online\";\n\n  client.subscribe(\"hello\");\n}\n\nvoid ofApp::onOffline(){\n  ofLog() << \"offline\";\n}\n\nvoid ofApp::onMessage(ofxMQTTMessage &msg){\n  ofLog() << \"message: \" << msg.topic << \" - \" << msg.payload;\n}\n\nvoid ofApp::keyPressed(int key){\n  client.publish(\"hello\", \"world\");\n}\n\n\n\nofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxMQTT.h\"\n\nclass ofApp : public ofBaseApp {\npublic:\n  ofxMQTT client;\n  void setup();\n  void update();\n  void exit();\n\n  void onOnline();\n  void onOffline();\n  void onMessage(ofxMQTTMessage &msg);\n\n  void keyPressed(int key);\n};\n\n\n\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8shiftr-io/try \u00b7 shiftr.io\u3092\u898b\u306a\u304c\u3089\u5b9f\u884c\u3059\u308b\u3068\u753b\u9762\u4e0a\u306bopenframeworks\u3068\u66f8\u304b\u308c\u305f\u4e38\u304c\u8868\u793a\u3055\u308c\u3001oF\u306e\u5b9f\u884c\u753b\u9762\u3067\u4f55\u304b\u306e\u30ad\u30fc\u3092\u62bc\u3059\u3068hello world\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u5b9f\u884c\u753b\u9762(ofMQTT test - YouTube\u306b\u98db\u3073\u307e\u3059)\n\n\n\n8. ofxMQTT\u3067\u30de\u30a6\u30b9\u306eX\u5ea7\u6a19\u3092ESP8266\u306b\u9001\u4fe1\u3057LED\u306e\u660e\u308b\u3055\u3092\u5236\u5fa1\n\u3053\u308c\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d9\u30fc\u30b9\u306b\u30de\u30a6\u30b9X\u5ea7\u6a19\u3092MQTT\u3067ESP\uff18\uff12\uff16\uff16\u306b\u9001\u4fe1\u3057\u3001LED\u306e\u660e\u308b\u3055\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n8.1 openFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\nofApp.cpp\u3067broker.shiftr.io\u3092localhost\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002(username\u3068password\u3082try\u304b\u3089test\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u304c\u591a\u5206\u3069\u3063\u3061\u3067\u3082\u3044\u3044\u3067\u3059\u3002)\nTopic\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u307e\u307ehello\u306b\u3057\u3066Payload\u3092world\u304b\u3089\u30de\u30a6\u30b9\u306ex\u5ea7\u6a19\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u30ad\u30fc\u3092\u62bc\u3057\u305f\u6642\u306bpublish\u3057\u3066\u3044\u305f\u306e\u3092\u30de\u30a6\u30b9\u304c\u52d5\u3044\u305f\u6642\u306b\u5909\u66f4\u3057\u3001payload\u3082world\u304b\u3089\u30de\u30a6\u30b9\u306ex\u5ea7\u6a19\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\nmain.cpp\n#include \"ofApp.h\"\n#include \"ofAppGlutWindow.h\"\n\nint main(){\n  ofAppGlutWindow window;\n  ofSetupOpenGL(&window, 1024, 768, OF_WINDOW);\n  ofRunApp(new ofApp());\n}\n\n\n\nofApp.cpp\n#include \"ofApp.h\"\n\nvoid ofApp::setup(){\n  client.begin(\"localhost\", 1883);\n  client.connect(\"openframeworks\", \"test\", \"test\"); // bool connect(string clientId, string username, string password);\n\n  ofAddListener(client.onOnline, this, &ofApp::onOnline);\n  ofAddListener(client.onOffline, this, &ofApp::onOffline);\n  ofAddListener(client.onMessage, this, &ofApp::onMessage);\n}\n\nvoid ofApp::update() {\n  client.update();\n}\n\nvoid ofApp::exit(){\n  client.disconnect();\n}\n\nvoid ofApp::onOnline(){\n  ofLog() << \"online\";\n\n  client.subscribe(\"hello\");\n}\n\nvoid ofApp::onOffline(){\n  ofLog() << \"offline\";\n}\n\nvoid ofApp::onMessage(ofxMQTTMessage &msg){\n  ofLog() << \"message: \" << msg.topic << \" - \" << msg.payload;\n}\n\nvoid ofApp::mouseMoved(int x, int y){\n  if(x >= 0 && x <= 1024){\n    client.publish(\"hello\", ofToString(x)); // void publish(string topic, string payload);\n  }\n}\n\n\n\nofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxMQTT.h\"\n\nclass ofApp : public ofBaseApp {\npublic:\n  ofxMQTT client;\n  void setup();\n  void update();\n  void exit();\n\n  void onOnline();\n  void onOffline();\n  void onMessage(ofxMQTTMessage &msg);\n\n  void mouseMoved(int x, int y);\n};\n\n\n\n8.2 ESP8266\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u63a5\u7d9a\n\u56de\u8def\u306b\u3064\u3044\u3066\u306fLED\u3092Pin4\u3068GND\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\nESP8266\nLED\n\n\n\n\nPin4\n\u30a2\u30ce\u30fc\u30c9(\u8db3\u306e\u9577\u3044\u65b9)\n\n\nGND\n\u30ab\u30bd\u30fc\u30c9(\u8db3\u306e\u77ed\u3044\u65b9)\n\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u306f\u3001LED\u306b\u95a2\u3059\u308b\u90e8\u5206\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nopenFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5408\u308f\u305b\u3066topic\u3092test\u304b\u3089hello\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\uff08const char TEST_TOPIC[] PROGMEM = \"hello\";\u306e\u90e8\u5206\u3067\u3059\uff09\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3001payload\u3092Ascii\u304b\u3089int\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\nESP8266 | Adafruit IO Basics: Digital Output | Adafruit Learning System\n\n\nESP8266_MQTT_test.ino\n/***************************************************\n  Adafruit MQTT Library ESP8266 Example\n  Must use ESP8266 Arduino from:\n    https://github.com/esp8266/Arduino\n  Adafruit invests time and resources providing this open source code,\n  please support Adafruit and open-source hardware by purchasing\n  products from Adafruit!\n  Written by Tony DiCola for Adafruit Industries.\n  MIT license, all text above must be included in any redistribution\n ****************************************************/\n#include <ESP8266WiFi.h>\n#include <Adafruit_MQTT.h>\n#include <Adafruit_MQTT_Client.h>\n\n/************************* WiFi Access Point *********************************/\n\n#define WLAN_SSID       \"*****\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n#define WLAN_PASS       \"*****\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n\n/***************************** Your Setup ************************************/\n\n#define YOUR_SERVER      \"***.***.*.**\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n#define YOUR_SERVERPORT  1883\n#define YOUR_USERNAME    \"test\"\n#define YOUR_PASSWORD    \"test\"\n\n/************************* Harware Setup *********************************/\n\n#define LED0 4 // LED\u7528\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3 GPIO 4 -> LED0\n\n/************ Global State (you don't need to change this!) ******************/\n\n// Create an ESP8266 WiFiClient class to connect to the MQTT server.\nWiFiClient client;\n\n// Store the MQTT server, client ID, username, and password in flash memory.\n// This is required for using the Adafruit MQTT library.\nconst char MQTT_SERVER[] PROGMEM    = YOUR_SERVER;\nconst char MQTT_CLIENTID[] PROGMEM  = __TIME__ \"_tes t_client_id\";\nconst char MQTT_USERNAME[] PROGMEM  = YOUR_USERNAME;\nconst char MQTT_PASSWORD[] PROGMEM  = YOUR_PASSWORD;\n\n// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.\nAdafruit_MQTT_Client mqtt(&client, MQTT_SERVER, YOUR_SERVERPORT, MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);\n\n/****************************** Topic ***************************************/\n\n// Setup a pubulisher & subscriber.\n//const char TEST_TOPIC[] PROGMEM = \"test\";\nconst char TEST_TOPIC[] PROGMEM = \"hello\";\nAdafruit_MQTT_Publish testPublisher = Adafruit_MQTT_Publish(&mqtt, TEST_TOPIC);\nAdafruit_MQTT_Subscribe testSubscriber = Adafruit_MQTT_Subscribe(&mqtt, TEST_TOPIC);\n\n/*************************** Sketch Code ************************************/\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  Serial.println(F(\"MQTT demo\"));\n\n  // Connect to WiFi access point.\n  Serial.println(); Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(WLAN_SSID);\n\n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println();\n\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \"); Serial.println(WiFi.localIP());\n\n  // Setup MQTT subscription.\n  mqtt.subscribe(&testSubscriber);\n\n  // GPIO0 as an output\n  pinMode(LED0, OUTPUT);   \n}\n\nuint32_t x=0;\n\nvoid loop() {\n  // Ensure the connection to the MQTT server is alive (this will make the first\n  // connection and automatically reconnect when disconnected).  See the MQTT_connect\n  // function definition further below.\n  MQTT_connect();\n\n  // this is our 'wait for incoming subscription packets' busy subloop\n Adafruit_MQTT_Subscribe *subscription;\n while ((subscription = mqtt.readSubscription(1000))) {\n   if (subscription == &testSubscriber) {\n     char *value = (char *)testSubscriber.lastread;  // convert mqtt ascii payload to int\n     Serial.print(F(\"Got: \"));\n     Serial.println(value);\n\n     int mouseX = atoi(value); \n     analogWrite(LED0, map(mouseX, 0, 1024, 0, 255));  // turn LED on\n   }\n }\n\n  delay(10);\n}\n\n// Function to connect and reconnect as necessary to the MQTT server.\n// Should be called in the loop function and it will take care if connecting.\nvoid MQTT_connect() {\n  int8_t ret;\n\n  // Stop if already connected.\n  if (mqtt.connected()) {\n    return;\n  }\n\n  Serial.print(\"Connecting to MQTT... \");\n\n  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected\n       Serial.println(mqtt.connectErrorString(ret));\n       Serial.println(ret);\n       Serial.println(\"Retrying MQTT connection in 5 seconds...\");\n       mqtt.disconnect();\n       delay(5000);  // wait 5 seconds\n  }\n  Serial.println(\"MQTT Connected!\");\n}\n\n\n\n8.3 \u5b9f\u884c\u7d50\u679c\n\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u5de6\u53f3\u306b\u52d5\u304b\u3059\u3068\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306b\u5ea7\u6a19\u304c\u8868\u793a\u3055\u308c\u3001ESP8266\u306b\u63a5\u7d9a\u3055\u308c\u305fLED\u306e\u660e\u308b\u3055\u304c\u5909\u5316\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u5b9f\u884c\u753b\u9762(20160618 ofMQTT ESP8266 test - YouTube\u306b\u98db\u3073\u307e\u3059)\n\n\n\n## 1. \u6982\u8981\n\u4eca\u307e\u3067ESP8266\u3068Milkcocoa\u3092\u4f7f\u3063\u3066\u5de5\u4f5c\u3092\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001openFrameworks\u3068ESP8266\u3092\u9023\u643a\u3055\u305b\u3088\u3046\u3068\u601d\u3046\u3068Milkcocoa\u3092\u3069\u3046\u4f7f\u3063\u3066\u3044\u3044\u304b\u308f\u304b\u3089\u305a\u3001\u53cb\u4eba\u306b\u805e\u304f\u3068MQTT\u30b5\u30fc\u30d0\u3092\u7acb\u3066\u308c\u3070\u3044\u3044\u3088\u3068\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u5f97\u305f\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u52c9\u5f37\u306e\u899a\u3048\u66f8\u304d\u3067\u3059\u3002\n\n## 2. \u7528\u610f\u3059\u308b\u3082\u306e\n - [ESPr Developer\uff08ESP-WROOM-02\u958b\u767a\u30dc\u30fc\u30c9\uff09 - \u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9](https://www.switch-science.com/catalog/2500/)\n\n## 3. \u4f5c\u696d\u74b0\u5883\n - MacBook Air (13-inch, Mid 2012) & Mac OS 10.11.4\n - Arduino IDE 1.6.5\n - openFrameworks 0.9.3\n\n## 4. \u53c2\u8003\u30b5\u30a4\u30c8\n - [\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG](http://liginc.co.jp/194532)\n    - ESP8266\u5074\u306f\u307b\u3068\u3093\u3069\u3053\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3081\u3063\u3061\u3083\u4e01\u5be7\u3002\n - [osx \u3067 brew update \u304c error \u306e\u6642\u306b\u3001\u8a66\u3059\u3053\u3068 - Qiita](http://qiita.com/hidenorly/items/7c7ac92f90a26dcadb14)\n    - mosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u9014\u4e2d\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u304d\u306b\u5f79\u7acb\u3063\u305f\n - [esp8266-mqtt-quicktest/mqtt_esp8266_test.ino at master \u00b7 kiyopikko/esp8266-mqtt-quicktest](https://github.com/kiyopikko/esp8266-mqtt-quicktest/blob/master/mqtt_esp8266_test.ino)\n    - 1\u3064\u76ee\u306e\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n - [256dpi/ofxMQTT: MQTT addon for openframeworks based on libmosquitto](https://github.com/256dpi/ofxMQTT)\n    - openFrameworks\u7528\u306eMQTT\u30a2\u30c9\u30aa\u30f3 ofxMQTT\n - [ESP8266 | Adafruit IO Basics: Digital Output | Adafruit Learning System](https://learn.adafruit.com/adafruit-io-basics-digital-output/esp8266)\n    - ESP8266\u3067Adafruit\u306eMQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f\u3068\u304d\u306bMQTT\u306epayload\u306eascii\u3092int\u306b\u5909\u3048\u308b\u3068\u3053\u308d\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\n## 5. MQTT\u30d6\u30ed\u30fc\u30ab\u3092\u7acb\u3066\u308b\n\u53c2\u8003\u30b5\u30a4\u30c8([\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG](http://liginc.co.jp/194532))\u306b\u3057\u305f\u304c\u3063\u3066\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u306f\u5168\u304f\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u304f\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u65e9\u3044\u3067\u3059\u3002\n\n### 5.1 Mosquito\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n - Homebrew\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408)\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```  \n\u79c1\u306fHomebrew\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u4e0a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3059\u308b\u3068\u3059\u3067\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\n\n```\nMiyano-MacBook-Air:~ YujiMiyano$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nIt appears Homebrew is already installed. If your intent is to reinstall you\nshould do the following before running this installer again:\n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\nThe current contents of /usr/local are bin Cellar CODEOFCONDUCT.md CONTRIBUTING.md etc foreman git heroku include lib Library LICENSE.txt opt README.md share SUPPORTERS.md texlive var .git .gitignore\n```\n\n - Mosquitto\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb  \n\n```\n$ brew install mosquitto\n```  \n\n\u3057\u3070\u3089\u304f\u7d4c\u3063\u305f\u3042\u3068\u4ee5\u4e0b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u2026\u3002\n\n```\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/openssl/1.0.2d_1: 464 files, 17M, built in 6.4 minutes\n==> Installing mosquitto dependency: libwebsockets\n==> Downloading http://git.libwebsockets.org/cgi-bin/cgit/libwebsockets/snapshot\n\ncurl: (56) SSLRead() return error -9806\nError: Failed to download resource \"libwebsockets\"\nDownload failed: http://git.libwebsockets.org/cgi-bin/cgit/libwebsockets/snapshot/libwebsockets-1.4-chrome43-firefox-36.tar.gz\nMiyano-MacBook-Air:~ YujiMiyano$ \n```\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068Qiita\u306e\u8a18\u4e8b\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n - [osx \u3067 brew update \u304c error \u306e\u6642\u306b\u3001\u8a66\u3059\u3053\u3068 - Qiita](http://qiita.com/hidenorly/items/7c7ac92f90a26dcadb14)\n\n\u3053\u3053\u306b\u66f8\u304b\u308c\u305f\u3068\u304a\u308a\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\n$ cd /usr/local\n$ git status\n```\n\n```\n$ git reset --hard && git clean -df\n```\n\n```\n$ sudo brew update\n```\n\n\u3053\u306e\u5f8c\u3001\u518d\u3073\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3002\n\n```\n$ brew install mosquitto\n```\n\n\u4eca\u5ea6\u306f\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3002\n\n```\nError: The `brew link` step did not complete successfully\nThe formula built, but is not symlinked into /usr/local\nCould not symlink sbin/mosquitto\n/usr/local/sbin is not writable.\n\nYou can try again using:\n  brew link mosquitto\n```\n\u305f\u3060\u3057\u3053\u308c\u306f\u53c2\u8003\u30b5\u30a4\u30c8([\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG](http://liginc.co.jp/194532))\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u305d\u306e\u901a\u308a\u306b\u5bfe\u51e6\u3057\u3066\u307f\u308b\u3002\n\n```\n$ sudo chown -R $(whoami) /usr/local\n$ brew link mosquitto\n```\n\n\n### 5.\uff12 Mosquito\u306e\u5b9f\u884c\n\n\u3044\u3056\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u6b21\u306f\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u3067\u308b\u3002\n\n```\nMiyano-MacBook-Air:local YujiMiyano$ mosquitto\n-bash: mosquitto: command not found\n```\n\n\u3053\u308c\u3082\u53c2\u8003\u30b5\u30a4\u30c8([\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG](http://liginc.co.jp/194532))\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u901a\u308a\u5bfe\u51e6\u3057\u3066\u307f\u308b\u3002\n\n```\n$ sudo vim /etc/paths\n```\n\n\nvim\u304c\u8d77\u52d5\u3059\u308b\u306e\u3067\u3001`i`\u3092\u62bc\u3057\u3066\u633f\u5165\u30e2\u30fc\u30c9\u306b\u3057\u305f\u3042\u3068\u3067`/usr/local/sbin`\u3092\u8ffd\u52a0\u3057\u305f\u3042\u3068`esc`\u3092\u62bc\u3057\u3066\u30ce\u30fc\u30de\u30eb\u30e2\u30fc\u30c9\u306b\u623b\u3057\u3066`:wq`\u3067\u4fdd\u5b58\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u518d\u8d77\u52d5\u3057\u3066\u304b\u3089\u518d\u5ea6`mosquitto`\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n```\nMiyano-MacBook-Air:~ YujiMiyano$ mosquitto\n1466227860: mosquitto version 1.4.8 (build date 2016-05-27 16:28:37+0100) starting\n1466227860: Using default config.\n1466227860: Opening ipv4 listen socket on port 1883.\n1466227860: Opening ipv6 listen socket on port 1883.\n```\n\n\u3088\u3046\u3084\u304f\u4e0a\u624b\u304f\u3044\u3063\u305f\u3063\u307d\u3044\u3002\n\n## \uff16. ESP8266\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3080\n\n### 6.1 Arduino IDE\u306bESP8266\u3092\u5bfe\u5fdc\u3055\u305b\u308b\n\u4eca\u307e\u3067\u306bArduino IDE\u3067ESP8266\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u98db\u3070\u3057\u3066\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u98db\u3070\u3057\u307e\u3059\u304c\u3001\u307e\u3060\u306a\u4eba\u306f\u53c2\u8003\u30b5\u30a4\u30c8\u306b\u3057\u305f\u304c\u3063\u3066\u3084\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n### 6.2 Adafruit MQTT Library\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3053\u3061\u3089\u3082\u53c2\u8003\u30b5\u30a4\u30c8([\u96fb\u5b50\u5de5\u4f5c\u754c\u9688\u3067\u8a71\u984c\u306eWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb\u300cESP8266\u300d\u3067MQTT\u3092\u4f7f\u3046\u65b9\u6cd5 | \u682a\u5f0f\u4f1a\u793eLIG](http://liginc.co.jp/194532))\u901a\u308a\u306b\u3084\u308c\u3070\u3059\u3050\u306b\u7d42\u308f\u308a\u307e\u3059\u3002\n\nArduino IDE\u3067Library Manager\u3092\u958b\u3044\u3066\u300cAdafruit MQTT\u300d\u3067\u691c\u7d22\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-18 15.43.07.png](https://qiita-image-store.s3.amazonaws.com/0/94069/af9b415b-b42a-6f47-ad27-9c8cb4ac0f31.png)\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-18 15.43.32.png](https://qiita-image-store.s3.amazonaws.com/0/94069/d49762bf-9b7f-24cb-1611-0a01acf8fb54.png)\n\n### 6.3 \u52d5\u4f5c\u78ba\u8a8d\n\u53c2\u8003\u30b5\u30a4\u30c8\u306b\u8a18\u8f09\u306e\u4ee5\u4e0b\u306eURL\u306b\u3042\u308b\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3002WLAN_SSID\u3068WLAN_PASS\u3001\u30d6\u30ed\u30fc\u30ab\u306e\u30db\u30b9\u30c8\u3001Username\u3001Password\u3092\u5165\u529b\u3002\n\n[esp8266-mqtt-quicktest/mqtt_esp8266_test.ino at master \u00b7 kiyopikko/esp8266-mqtt-quicktest](https://github.com/kiyopikko/esp8266-mqtt-quicktest/blob/master/mqtt_esp8266_test.ino)\n\n\u3061\u306a\u307f\u306b```ifconfig```\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u518d\u8d77\u52d5\u3057\u3066\u3001\u518d\u5ea6```mosquitto```\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u304c\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3057\u305f\u3002\n\n\n```\nMiyano-MacBook-Air:~ YujiMiyano$ mosquitto\n1466233989: mosquitto version 1.4.8 (build date 2016-05-27 16:28:37+0100) starting\n1466233989: Using default config.\n1466233989: Opening ipv4 listen socket on port 1883.\n1466233989: Error: Address already in use\n```\n\nESP8266\u3092\u63a5\u7d9a\u3057\u66f8\u304d\u8fbc\u307f\u3001\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n\u66f8\u304d\u8fbc\u307f\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u901a\u308a\u3067\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-18 16.22.33.png](https://qiita-image-store.s3.amazonaws.com/0/94069/b17bf8ee-0d9e-2c04-eafc-2f7c073e70df.png)\n\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-18 16.29.54.png](https://qiita-image-store.s3.amazonaws.com/0/94069/9045e351-374c-f2c7-2c2a-85c119b6f1b2.png)\n\n\n## 7. openFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\n\n### 7.1 ofxMQTT\u30a2\u30c9\u30aa\u30f3\u3092\u5165\u624b\n\nMQTT\u3092\u4f7f\u3046\u305f\u3081\u306e\u30a2\u30c9\u30aa\u30f3\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u307f\u308b\u3002\n[256dpi/ofxMQTT: MQTT addon for openframeworks based on libmosquitto](https://github.com/256dpi/ofxMQTT)\n\n\n\n### 7.2 ofxMQTT\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-06-18 17.03.57.png](https://qiita-image-store.s3.amazonaws.com/0/94069/de2965b0-8152-856b-3585-f7c906958495.png)\n\n\u3053\u3061\u3089([ofxMQTT/example-ofxMQTT/src at master \u00b7 256dpi/ofxMQTT](https://github.com/256dpi/ofxMQTT/tree/master/example-ofxMQTT/src))\u306b\u8a18\u8f09\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cpp:main.cpp\n#include \"ofApp.h\"\n#include \"ofAppGlutWindow.h\"\n\nint main(){\n  ofAppGlutWindow window;\n  ofSetupOpenGL(&window, 1024, 768, OF_WINDOW);\n  ofRunApp(new ofApp());\n}\n```\n\n```cpp:ofApp.cpp\n#include \"ofApp.h\"\n\nvoid ofApp::setup(){\n  client.begin(\"broker.shiftr.io\", 1883);\n  client.connect(\"openframeworks\", \"try\", \"try\");\n  \n  ofAddListener(client.onOnline, this, &ofApp::onOnline);\n  ofAddListener(client.onOffline, this, &ofApp::onOffline);\n  ofAddListener(client.onMessage, this, &ofApp::onMessage);\n}\n\nvoid ofApp::update() {\n  client.update();\n}\n\nvoid ofApp::exit(){\n  client.disconnect();\n}\n\nvoid ofApp::onOnline(){\n  ofLog() << \"online\";\n  \n  client.subscribe(\"hello\");\n}\n\nvoid ofApp::onOffline(){\n  ofLog() << \"offline\";\n}\n\nvoid ofApp::onMessage(ofxMQTTMessage &msg){\n  ofLog() << \"message: \" << msg.topic << \" - \" << msg.payload;\n}\n\nvoid ofApp::keyPressed(int key){\n  client.publish(\"hello\", \"world\");\n}\n```\n\n```cpp:ofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxMQTT.h\"\n\nclass ofApp : public ofBaseApp {\npublic:\n  ofxMQTT client;\n  void setup();\n  void update();\n  void exit();\n  \n  void onOnline();\n  void onOffline();\n  void onMessage(ofxMQTTMessage &msg);\n  \n  void keyPressed(int key);\n};\n```\n\n\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8[shiftr-io/try \u00b7 shiftr.io](https://shiftr.io/shiftr-io/try)\u3092\u898b\u306a\u304c\u3089\u5b9f\u884c\u3059\u308b\u3068\u753b\u9762\u4e0a\u306bopenframeworks\u3068\u66f8\u304b\u308c\u305f\u4e38\u304c\u8868\u793a\u3055\u308c\u3001oF\u306e\u5b9f\u884c\u753b\u9762\u3067\u4f55\u304b\u306e\u30ad\u30fc\u3092\u62bc\u3059\u3068`hello world`\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n - \u5b9f\u884c\u753b\u9762([ofMQTT test - YouTube](https://www.youtube.com/watch?v=1y9tp99vmgs)\u306b\u98db\u3073\u307e\u3059)\n\n[![\u30d3\u30c7\u30aa\u304c\u958b\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u8868\u793a\u3055\u308c\u308b\u30c6\u30ad\u30b9\u30c8](http://img.youtube.com/vi/1y9tp99vmgs/0.jpg)](http://www.youtube.com/watch?v=1y9tp99vmgs)\n\n## 8. ofxMQTT\u3067\u30de\u30a6\u30b9\u306eX\u5ea7\u6a19\u3092ESP8266\u306b\u9001\u4fe1\u3057LED\u306e\u660e\u308b\u3055\u3092\u5236\u5fa1\n\n\u3053\u308c\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d9\u30fc\u30b9\u306b\u30de\u30a6\u30b9X\u5ea7\u6a19\u3092MQTT\u3067ESP\uff18\uff12\uff16\uff16\u306b\u9001\u4fe1\u3057\u3001LED\u306e\u660e\u308b\u3055\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n\n### 8.1 openFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\n\nofApp.cpp\u3067`broker.shiftr.io`\u3092`localhost`\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002(username\u3068password\u3082`try`\u304b\u3089`test`\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u304c\u591a\u5206\u3069\u3063\u3061\u3067\u3082\u3044\u3044\u3067\u3059\u3002)\nTopic\u306f\u30b5\u30f3\u30d7\u30eb\u306e\u307e\u307e`hello`\u306b\u3057\u3066Payload\u3092`world`\u304b\u3089\u30de\u30a6\u30b9\u306ex\u5ea7\u6a19\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u30ad\u30fc\u3092\u62bc\u3057\u305f\u6642\u306bpublish\u3057\u3066\u3044\u305f\u306e\u3092\u30de\u30a6\u30b9\u304c\u52d5\u3044\u305f\u6642\u306b\u5909\u66f4\u3057\u3001payload\u3082`world`\u304b\u3089\u30de\u30a6\u30b9\u306ex\u5ea7\u6a19\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp:main.cpp\n#include \"ofApp.h\"\n#include \"ofAppGlutWindow.h\"\n\nint main(){\n  ofAppGlutWindow window;\n  ofSetupOpenGL(&window, 1024, 768, OF_WINDOW);\n  ofRunApp(new ofApp());\n}\n```\n\n```cpp:ofApp.cpp\n#include \"ofApp.h\"\n\nvoid ofApp::setup(){\n  client.begin(\"localhost\", 1883);\n  client.connect(\"openframeworks\", \"test\", \"test\"); // bool connect(string clientId, string username, string password);\n  \n  ofAddListener(client.onOnline, this, &ofApp::onOnline);\n  ofAddListener(client.onOffline, this, &ofApp::onOffline);\n  ofAddListener(client.onMessage, this, &ofApp::onMessage);\n}\n\nvoid ofApp::update() {\n  client.update();\n}\n\nvoid ofApp::exit(){\n  client.disconnect();\n}\n\nvoid ofApp::onOnline(){\n  ofLog() << \"online\";\n  \n  client.subscribe(\"hello\");\n}\n\nvoid ofApp::onOffline(){\n  ofLog() << \"offline\";\n}\n\nvoid ofApp::onMessage(ofxMQTTMessage &msg){\n  ofLog() << \"message: \" << msg.topic << \" - \" << msg.payload;\n}\n\nvoid ofApp::mouseMoved(int x, int y){\n  if(x >= 0 && x <= 1024){\n    client.publish(\"hello\", ofToString(x)); // void publish(string topic, string payload);\n  }\n}\n```\n\n```cpp:ofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxMQTT.h\"\n\nclass ofApp : public ofBaseApp {\npublic:\n  ofxMQTT client;\n  void setup();\n  void update();\n  void exit();\n  \n  void onOnline();\n  void onOffline();\n  void onMessage(ofxMQTTMessage &msg);\n  \n  void mouseMoved(int x, int y);\n};\n```\n\n### 8.2 ESP8266\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u63a5\u7d9a\n\n\u56de\u8def\u306b\u3064\u3044\u3066\u306fLED\u3092Pin4\u3068GND\u306b\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n| ESP8266 | LED                |\n|:--------|:-------------------|\n| Pin4    | \u30a2\u30ce\u30fc\u30c9(\u8db3\u306e\u9577\u3044\u65b9)  |\n| GND     | \u30ab\u30bd\u30fc\u30c9(\u8db3\u306e\u77ed\u3044\u65b9)  |\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3064\u3044\u3066\u306f\u3001LED\u306b\u95a2\u3059\u308b\u90e8\u5206\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nopenFrameworks\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5408\u308f\u305b\u3066topic\u3092`test`\u304b\u3089`hello`\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\uff08`const char TEST_TOPIC[] PROGMEM = \"hello\";`\u306e\u90e8\u5206\u3067\u3059\uff09\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3001payload\u3092Ascii\u304b\u3089int\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n - [ESP8266 | Adafruit IO Basics: Digital Output | Adafruit Learning System](https://learn.adafruit.com/adafruit-io-basics-digital-output/esp8266)\n\n```java:ESP8266_MQTT_test.ino\n/***************************************************\n  Adafruit MQTT Library ESP8266 Example\n  Must use ESP8266 Arduino from:\n    https://github.com/esp8266/Arduino\n  Adafruit invests time and resources providing this open source code,\n  please support Adafruit and open-source hardware by purchasing\n  products from Adafruit!\n  Written by Tony DiCola for Adafruit Industries.\n  MIT license, all text above must be included in any redistribution\n ****************************************************/\n#include <ESP8266WiFi.h>\n#include <Adafruit_MQTT.h>\n#include <Adafruit_MQTT_Client.h>\n\n/************************* WiFi Access Point *********************************/\n\n#define WLAN_SSID       \"*****\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n#define WLAN_PASS       \"*****\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n\n/***************************** Your Setup ************************************/\n\n#define YOUR_SERVER      \"***.***.*.**\"  // \u5404\u81ea\u306e\u74b0\u5883\u306b\u5fdc\u3058\u3066\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\n#define YOUR_SERVERPORT  1883\n#define YOUR_USERNAME    \"test\"\n#define YOUR_PASSWORD    \"test\"\n\n/************************* Harware Setup *********************************/\n\n#define LED0 4 // LED\u7528\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3 GPIO 4 -> LED0\n\n/************ Global State (you don't need to change this!) ******************/\n\n// Create an ESP8266 WiFiClient class to connect to the MQTT server.\nWiFiClient client;\n\n// Store the MQTT server, client ID, username, and password in flash memory.\n// This is required for using the Adafruit MQTT library.\nconst char MQTT_SERVER[] PROGMEM    = YOUR_SERVER;\nconst char MQTT_CLIENTID[] PROGMEM  = __TIME__ \"_tes t_client_id\";\nconst char MQTT_USERNAME[] PROGMEM  = YOUR_USERNAME;\nconst char MQTT_PASSWORD[] PROGMEM  = YOUR_PASSWORD;\n\n// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.\nAdafruit_MQTT_Client mqtt(&client, MQTT_SERVER, YOUR_SERVERPORT, MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);\n\n/****************************** Topic ***************************************/\n\n// Setup a pubulisher & subscriber.\n//const char TEST_TOPIC[] PROGMEM = \"test\";\nconst char TEST_TOPIC[] PROGMEM = \"hello\";\nAdafruit_MQTT_Publish testPublisher = Adafruit_MQTT_Publish(&mqtt, TEST_TOPIC);\nAdafruit_MQTT_Subscribe testSubscriber = Adafruit_MQTT_Subscribe(&mqtt, TEST_TOPIC);\n\n/*************************** Sketch Code ************************************/\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  Serial.println(F(\"MQTT demo\"));\n\n  // Connect to WiFi access point.\n  Serial.println(); Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(WLAN_SSID);\n\n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println();\n\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \"); Serial.println(WiFi.localIP());\n\n  // Setup MQTT subscription.\n  mqtt.subscribe(&testSubscriber);\n\n  // GPIO0 as an output\n  pinMode(LED0, OUTPUT);   \n}\n\nuint32_t x=0;\n\nvoid loop() {\n  // Ensure the connection to the MQTT server is alive (this will make the first\n  // connection and automatically reconnect when disconnected).  See the MQTT_connect\n  // function definition further below.\n  MQTT_connect();\n\n  // this is our 'wait for incoming subscription packets' busy subloop\n Adafruit_MQTT_Subscribe *subscription;\n while ((subscription = mqtt.readSubscription(1000))) {\n   if (subscription == &testSubscriber) {\n     char *value = (char *)testSubscriber.lastread;  // convert mqtt ascii payload to int\n     Serial.print(F(\"Got: \"));\n     Serial.println(value);\n\n     int mouseX = atoi(value); \n     analogWrite(LED0, map(mouseX, 0, 1024, 0, 255));  // turn LED on\n   }\n }\n\n  delay(10);\n}\n\n// Function to connect and reconnect as necessary to the MQTT server.\n// Should be called in the loop function and it will take care if connecting.\nvoid MQTT_connect() {\n  int8_t ret;\n\n  // Stop if already connected.\n  if (mqtt.connected()) {\n    return;\n  }\n\n  Serial.print(\"Connecting to MQTT... \");\n\n  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected\n       Serial.println(mqtt.connectErrorString(ret));\n       Serial.println(ret);\n       Serial.println(\"Retrying MQTT connection in 5 seconds...\");\n       mqtt.disconnect();\n       delay(5000);  // wait 5 seconds\n  }\n  Serial.println(\"MQTT Connected!\");\n}\n```\n\n### 8.3 \u5b9f\u884c\u7d50\u679c\n\n\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3092\u5de6\u53f3\u306b\u52d5\u304b\u3059\u3068\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306b\u5ea7\u6a19\u304c\u8868\u793a\u3055\u308c\u3001ESP8266\u306b\u63a5\u7d9a\u3055\u308c\u305fLED\u306e\u660e\u308b\u3055\u304c\u5909\u5316\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n - \u5b9f\u884c\u753b\u9762([20160618 ofMQTT ESP8266 test - YouTube](https://www.youtube.com/watch?v=itGVbZNqG6Y)\u306b\u98db\u3073\u307e\u3059)\n[![\u30d3\u30c7\u30aa\u304c\u958b\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u8868\u793a\u3055\u308c\u308b\u30c6\u30ad\u30b9\u30c8](http://img.youtube.com/vi/itGVbZNqG6Y/0.jpg)](http://www.youtube.com/watch?v=itGVbZNqG6Y)\n", "tags": ["ESP8266", "mqtt", "openFrameworks", "Arduino", "\u96fb\u5b50\u5de5\u4f5c"]}