{"context": "\n\n\u76ee\u7684\nPython\u306724\u6642\u9593\u8d70\u3089\u305b\u7d9a\u3051\u308b\u30c7\u30fc\u30e2\u30f3\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u7a3c\u50cd\u72b6\u6cc1\u306e\u78ba\u8a8d\u3084\u8a2d\u5b9a\u3092\u52d5\u7684\u306b\u5909\u66f4\u3092\u3059\u308b\u305f\u3081\u306bREST API\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u306b\u5927\u304d\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u306a\u304f\u3001\u6700\u5c0f\u306e\u624b\u9593\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u307e\u3057\u305f\u3002\n\nFlask\u3068Flask-API\nREST API\u3092\u63d0\u4f9b\u3059\u308b\u306b\u306f\u306a\u3093\u3089\u304b\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u304c\u5fc5\u8981\u3067\u3059\u3002\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u306e\u3067Flask\u304c\u540c\u68b1\u3057\u3066\u3044\u308b\u958b\u767a\u7528\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002\u958b\u767a\u7528\u3067\u3059\u304c\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u6642\u30a2\u30af\u30bb\u30b9\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u5341\u5206\u5b9f\u7528\u306b\u8010\u3048\u307e\u3059\u3002\nREST API\u306f\u624b\u8efd\u306b\u5b9f\u88c5\u3067\u304d\u3066\u30c6\u30b9\u30c8\u7528\u306eUI\u307e\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bFlask-API\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u5b9f\u9a13\u3067\u306fFlask-API\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\u30b3\u30d4\u30da\u3057\u3066example.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\nhttp://www.flaskapi.org/#example\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\n\u30c7\u30fc\u30e2\u30f3\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u540c\u6642\u306b\u8d70\u3089\u305b\u308b\u306b\u306f\u3001asyncio\u3092\u4f7f\u3046\u304b\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u304b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002Flask\u306fasyncio\u3067\u4f7f\u3046\u3053\u3068\u306f\u60f3\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u306f\u3069\u3061\u3089\u304c\u4e3b\u5c0e\u6a29\u3092\u63e1\u308b\u3079\u304d\u3067\u3057\u3087\u3046\uff1fREST API\u304c\u4ed8\u3051\u8db3\u3057\u306e\u6a5f\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u30c7\u30fc\u30e2\u30f3\u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3001\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u304c\u6d3e\u751f\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3068\u3059\u308b\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\uff08\u5f8c\u8a18\uff1a\u6839\u62e0\u8584\u3044\u304b\u3082\u3002\u30c7\u30fc\u30e2\u30f3\u3092\u7ba1\u7406\u3059\u308b\u3068\u3044\u3046\u8996\u70b9\u306a\u3089\u30a6\u30a7\u30d6\u304c\u30e1\u30a4\u30f3\u3067\u30c7\u30fc\u30e2\u30f3\u306f\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u65b9\u304c\u81ea\u7136\uff09\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u4e00\u3064\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089Flask\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u307f\u307e\u3059\u3002\uff11\u79d2\u6bce\u306b\u6642\u523b\u3092\u8868\u793a\u3057\u3066\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304c\u30d6\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n$ diff -u example.py example_threaded.py\n--- example.py  2016-12-20 16:19:19.000000000 -0800\n+++ example_threaded.py 2016-12-20 16:23:43.000000000 -0800\n@@ -1,6 +1,13 @@\n+import logging\n+import threading\n+\n from flask import request, url_for\n from flask.ext.api import FlaskAPI, status, exceptions\n\n+FORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\n+logging.basicConfig(format=FORMAT, level=logging.INFO)\n+log = logging.getLogger()\n+\n app = FlaskAPI(__name__)\n\n\n@@ -53,5 +60,14 @@\n\n\n if __name__ == \"__main__\":\n-    app.run(debug=True)\n+\n+    log.info('start')\n+    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(debug=True))\n+    rest_service_thread.start()\n+    log.info('main thread is mine!')\n+    import time\n+    while True:\n+        print(time.ctime())\n+        time.sleep(1)\n+    rest_service_thread.join()\n\n\u5b9f\u884c\u7d50\u679c\nFlask\u5185\u90e8\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3067\u3042\u308bwerkzeug\u304c\u4f55\u3084\u3089\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3044\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306f\u6d3b\u304d\u3066\u3044\u308b\u306e\u3067\u6642\u523b\u306f\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001REST API\u306f\u53cd\u5fdc\u3057\u307e\u305b\u3093\u3002\n2016-12-20 16:30:32,129 root MainThread start\n2016-12-20 16:30:32,130 root MainThread main thread is mine!\nTue Dec 20 16:30:32 2016\n2016-12-20 16:30:32,141 werkzeug reset_service  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nException in thread reset_service:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/threading.py\", line 914, in _bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/threading.py\", line 862, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/flask/app.py\", line 843, in run\n    run_simple(host, port, self, **options)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/werkzeug/serving.py\", line 692, in run_simple\n    reloader_type)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 242, in run_with_reloader\n    signal.signal(signal.SIGTERM, lambda *args: sys.exit(0))\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/signal.py\", line 47, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\nValueError: signal only works in main thread\n\nTue Dec 20 16:30:33 2016\nTue Dec 20 16:30:34 2016\n\n\u3069\u3046\u3082\u30b7\u30b0\u30ca\u30eb\u30cf\u30f3\u30c9\u30e9\u304cMainThread\u3067\u306a\u3044\u3068\u30c0\u30e1\u3060\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\u3002Flask\u306e\u958b\u767a\u4e2d\u306e\u4fbf\u5229\u6a5f\u80fd\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u76e3\u8996\u3068\u30ea\u30ed\u30fc\u30c9\u3092\u884c\u3046\u305f\u3081\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u4e0d\u8981\u3067\u3059\u306e\u3067debug=True\u3092\u524a\u9664\u3057\u3066\u518d\u5ea6\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\u5b9f\u884c\u7d50\u679c2\n\u4eca\u5ea6\u306f\u3046\u307e\u304f\u884c\u304d\u307e\u3057\u305f\u3002REST API\u3092 http://localhost:5000 \u3067\u53e9\u3044\u3066\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u53cd\u5fdc\u3057\u307e\u3059\u3002\n2016-12-20 16:38:54,214 root MainThread start\n2016-12-20 16:38:54,215 root MainThread main thread is mine!\nTue Dec 20 16:38:54 2016\n2016-12-20 16:38:54,224 werkzeug reset_service  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nTue Dec 20 16:38:55 2016\n2016-12-20 16:38:55,840 werkzeug reset_service 127.0.0.1 - - [20/Dec/2016 16:38:55] \"GET / HTTP/1.1\" 200 -\nTue Dec 20 16:38:56 2016\n2016-12-20 16:38:56,827 werkzeug reset_service 127.0.0.1 - - [20/Dec/2016 16:38:56] \"GET / HTTP/1.1\" 200 -\nTue Dec 20 16:38:57 2016\n\n\u3053\u308c\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u30c7\u30fc\u30e2\u30f3\u7528\u306b\u78ba\u4fdd\u3057\u3064\u3064REST API\u3092\u63d0\u4f9b\u3059\u308b\u4e0b\u5730\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u306e\u5354\u8abf\nREST API\u304b\u3089\u30c7\u30fc\u30e2\u30f3\u306b\u30b3\u30de\u30f3\u30c9\u3092\u9001\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u4e00\u756a\u7c21\u5358\u306a\u306e\u306fQueue\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002Python\u306eQueue\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u306e\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u306aQueue\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089put/get\u3057\u3066\u3082\u4e0d\u6574\u5408\u304c\u8d77\u304d\u307e\u305b\u3093\u3002\u3067\u3082\u305d\u308c\u3060\u3051\u3067\u6e08\u3080\u30b1\u30fc\u30b9\u306f\u9650\u3089\u308c\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\nexample_threaded.py\u3092\u3055\u3089\u306b\u6539\u9020\u3057\u3066\u3001notes\u5909\u6570\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u66f4\u65b0\u3059\u308b\u5b9f\u9a13\u3092\u3057\u3066\u307f\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u306fSTDIN\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092notes\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nnotes\u306f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306a\u306e\u3067\u3001\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u3068\u77db\u76fe\u304c\u751f\u3058\u305f\u308a\u3001\u7279\u306bfor\u30eb\u30fc\u30d7\u3067\u30a2\u30af\u30bb\u30b9\u4e2d\u306b\u30ad\u30fc\u306e\u8ffd\u52a0\u524a\u9664\u304c\u8d77\u3053\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067synchronized\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u30ed\u30c3\u30af\u3057\u3001\u30af\u30ea\u30c1\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u8b77\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n$ diff -u example_threaded.py example_threaded2.py\n--- example_threaded.py 2016-12-20 17:17:10.000000000 -0800\n+++ example_threaded2.py    2016-12-20 17:29:06.000000000 -0800\n@@ -23,7 +23,38 @@\n         'text': notes[key]\n     }\n\n+def synchronized(lock):\n+    \"\"\" Synchronization decorator. \"\"\"\n\n+    def wrap(f):\n+        def newFunction(*args, **kw):\n+            lock.acquire()\n+            try:\n+                return f(*args, **kw)\n+            finally:\n+                lock.release()\n+        return newFunction\n+    return wrap\n+\n+glock = threading.Lock()\n+\n+@synchronized(glock)\n+def list_notes():\n+    return [note_repr(idx) for idx in sorted(notes.keys())]\n+\n+@synchronized(glock)\n+def add_note(note):\n+    idx = max(notes.keys()) + 1\n+    notes[idx] = note\n+    return idx\n+@synchronized(glock)\n+def update_note(key, note):\n+    notes[key] = note\n+\n+@synchronized(glock)\n+def delete_note(key):\n+    return notes.pop(key, None)\n+\n @app.route(\"/\", methods=['GET', 'POST'])\n def notes_list():\n     \"\"\"\n@@ -31,12 +62,11 @@\n     \"\"\"\n     if request.method == 'POST':\n         note = str(request.data.get('text', ''))\n-        idx = max(notes.keys()) + 1\n-        notes[idx] = note\n+        idx = add_note(note)\n         return note_repr(idx), status.HTTP_201_CREATED\n\n     # request.method == 'GET'\n-    return [note_repr(idx) for idx in sorted(notes.keys())]\n+    return list_notes()\n\n\n @app.route(\"/<int:key>/\", methods=['GET', 'PUT', 'DELETE'])\n@@ -46,11 +76,11 @@\n     \"\"\"\n     if request.method == 'PUT':\n         note = str(request.data.get('text', ''))\n-        notes[key] = note\n+        update_note(key, note)\n         return note_repr(key)\n\n     elif request.method == 'DELETE':\n-        notes.pop(key, None)\n+        delete_note(key)\n         return '', status.HTTP_204_NO_CONTENT\n\n     # request.method == 'GET'\n@@ -60,14 +90,15 @@\n\n\n if __name__ == \"__main__\":\n-\n+\n     log.info('start')\n-    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(debug=True))\n+    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict())\n     rest_service_thread.start()\n     log.info('main thread is mine!')\n-    import time\n-    while True:\n-        print(time.ctime())\n-        time.sleep(1)\n+    import sys\n+    for line in iter(sys.stdin):\n+        if not line:\n+            break\n+        add_note(line.strip())\n     rest_service_thread.join()\n\n\u5b9f\u884c\u7d50\u679c\n\u8d77\u52d5\u5f8c\u3001\u7aef\u672b\u304b\u3089\u9069\u5f53\u306b\u6587\u5b57\u5217\u3092\u5165\u308c\u3066\u30a8\u30f3\u30bf\u30fc\u3057\u3001REST API\u304b\u3089\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3068\u5165\u529b\u3057\u305f\u6587\u5b57\u5217\u304c\u8ffd\u52a0\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u884c\u5100\u306e\u826f\u3044\u30c7\u30fc\u30e2\u30f3\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30d7\u30ed\u30bb\u30b9\u306e\u3053\u3068\u3092\u3056\u3063\u304f\u308a\u30c7\u30fc\u30e2\u30f3\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u884c\u5100\u306e\u826f\u3044(well behaved)\u30c7\u30fc\u30e2\u30f3\u306f\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\n\numask\u3092\u8a2d\u5b9a\nfork\u3057\u3066\u89aa\u30d7\u30ed\u30bb\u30b9\u3092exit\u3002\u5b50\u306finit\u306b\u990a\u5b50\u306b\u51fa\u3059\u3002\n\u7aef\u672b\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044\u3088\u3046\u306b\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u5225\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3001\u65b0\u305f\u306a\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u3059\u308b\u3002\uff08\u5fc5\u305a\u3057\u3082\u30bb\u30c3\u30b7\u30e7\u30f3\u30ea\u30fc\u30c0\u30fc\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002System-V\u3067\u306f\u5236\u5fa1\u7aef\u672b\u3092\u6301\u3066\u306a\u3044\u975e\u30bb\u30c3\u30b7\u30e7\u30f3\u30ea\u30fc\u30c0\u306b\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002\u5f8c\u8ff0\uff09\n\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092/\u306b\u3059\u308b\n\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u306f\u9589\u3058\u308b\nstdin, stdout, stderr\u3092/dev/null\u306b\u8a2d\u5b9a\u3059\u308b\n\u5b89\u5168\u306aPATH\u3092\u8a2d\u5b9a\u3059\u308b\n\u4e8c\u91cd\u306b\u8d77\u52d5\u3057\u306a\u3044\u3088\u3046\u30ed\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308b\uff08PID\u30d5\u30a1\u30a4\u30eb\uff09\n\u30b7\u30b0\u30ca\u30eb\u3092\u6b63\u3057\u304f\u30cf\u30f3\u30c9\u30eb\u3059\u308b\u304b\u7121\u8996\u3059\u308b\nsyslog\u306a\u3069\u3067\u30ed\u30b0\u3092\u6b8b\u3059\nchroot\u3059\u308b\n\n\u3068\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304cPython\u306a\u3089daemonize\u3084python-daemon\u3067\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306fpython-daemon\u3092\u6700\u5c0f\u9650\u306e\u8a2d\u5b9a\u3067\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002stdin\u306f\u4f7f\u3048\u307e\u305b\u3093\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b\uff13\u79d2\u3054\u3068\u306bnote\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u898b\u307e\u3057\u305f\u3002REST API\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308c\u30703\u79d2\u3054\u3068\u306bnotes\u304c\u5897\u3048\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n--- example_threaded2.py    2016-12-25 16:25:08.000000000 -0800\n+++ example_daemon.py   2016-12-25 16:29:29.000000000 -0800\n@@ -1,8 +1,9 @@\n import logging\n import threading\n+import daemon\n\n from flask import request, url_for\n-from flask.ext.api import FlaskAPI, status, exceptions\n+from flask_api import FlaskAPI, status, exceptions\n\n FORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\n logging.basicConfig(format=FORMAT, level=logging.INFO)\n@@ -89,16 +90,16 @@\n     return note_repr(key)\n\n\n-if __name__ == \"__main__\":\n-\n+def main():\n     log.info('start')\n     rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(threaded=True))\n     rest_service_thread.start()\n     log.info('main thread is mine!')\n-    import sys\n-    for line in iter(sys.stdin):\n-        if not line:\n-            break\n-        add_note(line.strip())\n+    import time\n+    for i in range(10):\n+        add_note(\"note{}\".format(i))\n+        time.sleep(3)\n     rest_service_thread.join()\n\n+with daemon.DaemonContext():\n+    main()\n\n\u5b9f\u884c\u3057\u3066\u898b\u307e\u3059\n$ python example_daemon.py\n$\n\n&\u306a\u3057\u3067\u8d77\u52d5\u3057\u3066\u3082\u4e00\u77ac\u3067\u30b7\u30a7\u30eb\u306b\u623b\u3063\u3066\u304d\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u81ea\u5206\u81ea\u8eab\u3067\u30c7\u30fc\u30e2\u30f3\u5316\u3057\u3066\u3044\u307e\u3059\u3002ps\u3067\u78ba\u8a8d\u3057\u3066\u898b\u307e\u3057\u3087\u3046\u3002ps\u30b3\u30de\u30f3\u30c9\u306fLinux\u306e\u3082\u306e\u3002\n$ ps xao pid,ppid,pgid,sid,comm | grep python\n 2860     1  2859  2859 python\n\n\u89aa\u30d7\u30ed\u30bb\u30b9ID\u306f1\u3067\u990a\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3068\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7ID\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u30ed\u30b0\u30a4\u30f3\u30b7\u30a7\u30eb\u306ebash\u306e\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306f2693\u3067\u3057\u305f\u306e\u3067\u3001\u671f\u5f85\u901a\u308a\u65b0\u898f\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3069\u3046\u3082fork\u3092\uff12\u56de\u3057\u3066\u3044\u308b\u3088\u3046\u3067pid\u3068pgid\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002fork\u30922\u56de\u3059\u308b\u7406\u7531\u306f\u6b21\u306e\u901a\u308a\uff08Advanced Programming in Unix \u7b2c13\u7ae0\u3088\u308a)\n\nUnder System V\u2013based systems, some people recommend calling fork again at this point, terminating the parent, and continuing the daemon in the child. This guarantees that the daemon is not a session leader, which prevents it from acquiring a controlling terminal under the System V rules (Section 9.6). Alternatively, to avoid acquiring a controlling terminal, be sure to specify O_NOCTTY whenever opening a terminal device.\n\nlsof -p 2860\u3067\u30d5\u30a1\u30a4\u30eb\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u3092\u898b\u3066\u898b\u307e\u3059\u3002\nlsof -p 2860\nCOMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF    NODE NAME\npython  2860 root  cwd    DIR   254,1     4096       2 /\npython  2860 root  rtd    DIR   254,1     4096       2 /\npython  2860 root  txt    REG   254,1  3781768  264936 /usr/bin/python2.7\npython  2860 root  mem    REG   254,1    47712 1045078 /lib/x86_64-linux-gnu/libnss_files-2.19.so\npython  2860 root  mem    REG   254,1    54248  391882 /usr/lib/python2.7/lib-dynload/_json.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    18904 1044589 /lib/x86_64-linux-gnu/libuuid.so.1.3.0\npython  2860 root  mem    REG   254,1    31048  265571 /usr/lib/x86_64-linux-gnu/libffi.so.6.0.2\npython  2860 root  mem    REG   254,1   141184  392622 /usr/lib/python2.7/lib-dynload/_ctypes.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    10464  796274 /usr/lib/python2.7/dist-packages/markupsafe/_speedups.so\npython  2860 root  mem    REG   254,1    29464  392892 /usr/lib/python2.7/lib-dynload/_hashlib.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1  2066816  264782 /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\npython  2860 root  mem    REG   254,1   395176  264784 /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0\npython  2860 root  mem    REG   254,1    97872  392612 /usr/lib/python2.7/lib-dynload/_ssl.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    11248  392000 /usr/lib/python2.7/lib-dynload/resource.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1  1607712  269275 /usr/lib/locale/locale-archive\npython  2860 root  mem    REG   254,1  1738176 1045067 /lib/x86_64-linux-gnu/libc-2.19.so\npython  2860 root  mem    REG   254,1  1051056 1045072 /lib/x86_64-linux-gnu/libm-2.19.so\npython  2860 root  mem    REG   254,1   109144 1044580 /lib/x86_64-linux-gnu/libz.so.1.2.8\npython  2860 root  mem    REG   254,1    10680 1045291 /lib/x86_64-linux-gnu/libutil-2.19.so\npython  2860 root  mem    REG   254,1    14664 1045071 /lib/x86_64-linux-gnu/libdl-2.19.so\npython  2860 root  mem    REG   254,1   137440 1044987 /lib/x86_64-linux-gnu/libpthread-2.19.so\npython  2860 root  mem    REG   254,1   140928 1044988 /lib/x86_64-linux-gnu/ld-2.19.so\npython  2860 root    0u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    1u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    2u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    3u  IPv4 3596677      0t0     TCP localhost:5000 (LISTEN)\n\n\u304a\u3049\uff01STDIN(0),STDOUT(1),STDERR(2)\u304c\u898b\u4e8b\u306b/dev/null\u3067\u3059\u3002\u305d\u3057\u3066\u30ab\u30ec\u30f3\u30c8\u30ef\u30fc\u30ad\u30f3\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(cwd)\u306f/\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(rtd)\u3082/\u3067\u3059\u304c\u3001\u3053\u308c\u306fchroot\u3059\u308b\u8a2d\u5b9a\u3092\u5f15\u304d\u6e21\u3059\u3053\u3068\u3067\u5909\u66f4\u53ef\u80fd\u3067\u3059\u3002\u771f\u306b\u6b63\u7d71\u6d3e\u30c7\u30fc\u30e2\u30f3\u3067\u3059\u306d\uff01\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082rc\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u8d77\u52d5\u3057\u3066\u3082\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u3001Flask\u306e\u958b\u767a\u7528\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u6d3e\u751f\u30b9\u30ec\u30c3\u30c9\u3067\u7a3c\u50cd\u3055\u305b\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068REST API\u3067\u5909\u6570\u306e\u5171\u6709\u30fb\u66f4\u65b0\u304c\u53ef\u80fd\u306a\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u884c\u5100\u306e\u826f\u3044\u30c7\u30fc\u30e2\u30f3\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u3060\u8272\u3005\u3068\u5b9f\u9a13\u4e2d\u3067\u3059\u306e\u3067\u3001\u3082\u3063\u3068\u8efd\u91cf\u306a\u65b9\u6cd5\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30ed\u30c3\u30af\u7121\u3057\u3067\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308b\u3088\u3001\u3068\u3044\u3046\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3044\u307e\u3057\u305f\u3089\u662f\u975e\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n\n\u6700\u7d42\u306e\u72b6\u614b\u306e\u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306fPython3\u3067\u3059\u304c\u3001\u6570\u884c\u306e\u4fee\u6b63\u3067Python2\u3067\u3082\u52d5\u304f\u306f\u305a\u3067\u3059\u3002threaded=True\u306f\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u540c\u6642\u306b\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u672c\u8ad6\u306e\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\nimport logging\nimport threading\nimport daemon\n\nfrom flask import request, url_for\nfrom flask_api import FlaskAPI, status, exceptions\n\nFORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\nlogging.basicConfig(format=FORMAT, level=logging.INFO)\nlog = logging.getLogger()\n\napp = FlaskAPI(__name__)\n\n\nnotes = {\n    0: 'do the shopping',\n    1: 'build the codez',\n    2: 'paint the door',\n}\n\ndef note_repr(key):\n    return {\n        'url': request.host_url.rstrip('/') + url_for('notes_detail', key=key),\n        'text': notes[key]\n    }\n\ndef synchronized(lock):\n    \"\"\" Synchronization decorator. \"\"\"\n\n    def wrap(f):\n        def newFunction(*args, **kw):\n            lock.acquire()\n            try:\n                return f(*args, **kw)\n            finally:\n                lock.release()\n        return newFunction\n    return wrap\n\nglock = threading.Lock()\n\n@synchronized(glock)\ndef list_notes():\n    return [note_repr(idx) for idx in sorted(notes.keys())]\n\n@synchronized(glock)\ndef add_note(note):\n    idx = max(notes.keys()) + 1\n    notes[idx] = note\n    return idx\n@synchronized(glock)\ndef update_note(key, note):\n    notes[key] = note\n\n@synchronized(glock)\ndef delete_note(key):\n    return notes.pop(key, None)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef notes_list():\n    \"\"\"\n    List or create notes.\n    \"\"\"\n    if request.method == 'POST':\n        note = str(request.data.get('text', ''))\n        idx = add_note(note)\n        return note_repr(idx), status.HTTP_201_CREATED\n\n    # request.method == 'GET'\n    return list_notes()\n\n\n@app.route(\"/<int:key>/\", methods=['GET', 'PUT', 'DELETE'])\ndef notes_detail(key):\n    \"\"\"\n    Retrieve, update or delete note instances.\n    \"\"\"\n    if request.method == 'PUT':\n        note = str(request.data.get('text', ''))\n        update_note(key, note)\n        return note_repr(key)\n\n    elif request.method == 'DELETE':\n        delete_note(key)\n        return '', status.HTTP_204_NO_CONTENT\n\n    # request.method == 'GET'\n    if key not in notes:\n        raise exceptions.NotFound()\n    return note_repr(key)\n\n\ndef main():\n    log.info('start')\n    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(threaded=True))\n    rest_service_thread.start()\n    log.info('main thread is mine!')\n    import time\n    for i in range(10):\n        add_note(\"note{}\".format(i))\n        time.sleep(3)\n    rest_service_thread.join()\n\nwith daemon.DaemonContext():\n    main()\n\n# \u76ee\u7684\nPython\u306724\u6642\u9593\u8d70\u3089\u305b\u7d9a\u3051\u308b\u30c7\u30fc\u30e2\u30f3\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u7a3c\u50cd\u72b6\u6cc1\u306e\u78ba\u8a8d\u3084\u8a2d\u5b9a\u3092\u52d5\u7684\u306b\u5909\u66f4\u3092\u3059\u308b\u305f\u3081\u306bREST API\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u306b\u5927\u304d\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u306a\u304f\u3001\u6700\u5c0f\u306e\u624b\u9593\u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u307e\u3057\u305f\u3002\n\n# Flask\u3068Flask-API\n\nREST API\u3092\u63d0\u4f9b\u3059\u308b\u306b\u306f\u306a\u3093\u3089\u304b\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u304c\u5fc5\u8981\u3067\u3059\u3002\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u306e\u3067Flask\u304c\u540c\u68b1\u3057\u3066\u3044\u308b\u958b\u767a\u7528\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u4f7f\u3044\u307e\u3059\u3002\u958b\u767a\u7528\u3067\u3059\u304c\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u6642\u30a2\u30af\u30bb\u30b9\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u5341\u5206\u5b9f\u7528\u306b\u8010\u3048\u307e\u3059\u3002\n\nREST API\u306f\u624b\u8efd\u306b\u5b9f\u88c5\u3067\u304d\u3066\u30c6\u30b9\u30c8\u7528\u306eUI\u307e\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b[Flask-API](http://www.flaskapi.org/)\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n![screenshot.png](https://qiita-image-store.s3.amazonaws.com/0/13775/cddc7d17-8332-597e-46fd-522fef259383.png)\n\n\u4ee5\u4e0b\u306e\u5b9f\u9a13\u3067\u306fFlask-API\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\u30b3\u30d4\u30da\u3057\u3066example.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\nhttp://www.flaskapi.org/#example\n\n\n#\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\n\u30c7\u30fc\u30e2\u30f3\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u540c\u6642\u306b\u8d70\u3089\u305b\u308b\u306b\u306f\u3001asyncio\u3092\u4f7f\u3046\u304b\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u304b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002Flask\u306fasyncio\u3067\u4f7f\u3046\u3053\u3068\u306f\u60f3\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u306f\u3069\u3061\u3089\u304c\u4e3b\u5c0e\u6a29\u3092\u63e1\u308b\u3079\u304d\u3067\u3057\u3087\u3046\uff1fREST API\u304c\u4ed8\u3051\u8db3\u3057\u306e\u6a5f\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u30c7\u30fc\u30e2\u30f3\u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3001\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u304c\u6d3e\u751f\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3068\u3059\u308b\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\uff08\u5f8c\u8a18\uff1a\u6839\u62e0\u8584\u3044\u304b\u3082\u3002\u30c7\u30fc\u30e2\u30f3\u3092\u7ba1\u7406\u3059\u308b\u3068\u3044\u3046\u8996\u70b9\u306a\u3089\u30a6\u30a7\u30d6\u304c\u30e1\u30a4\u30f3\u3067\u30c7\u30fc\u30e2\u30f3\u306f\u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u65b9\u304c\u81ea\u7136\uff09\n\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u4e00\u3064\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089Flask\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u307f\u307e\u3059\u3002\uff11\u79d2\u6bce\u306b\u6642\u523b\u3092\u8868\u793a\u3057\u3066\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304c\u30d6\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```diff\n$ diff -u example.py example_threaded.py\n--- example.py\t2016-12-20 16:19:19.000000000 -0800\n+++ example_threaded.py\t2016-12-20 16:23:43.000000000 -0800\n@@ -1,6 +1,13 @@\n+import logging\n+import threading\n+\n from flask import request, url_for\n from flask.ext.api import FlaskAPI, status, exceptions\n\n+FORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\n+logging.basicConfig(format=FORMAT, level=logging.INFO)\n+log = logging.getLogger()\n+\n app = FlaskAPI(__name__)\n\n\n@@ -53,5 +60,14 @@\n\n\n if __name__ == \"__main__\":\n-    app.run(debug=True)\n+\n+    log.info('start')\n+    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(debug=True))\n+    rest_service_thread.start()\n+    log.info('main thread is mine!')\n+    import time\n+    while True:\n+        print(time.ctime())\n+        time.sleep(1)\n+    rest_service_thread.join()\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\nFlask\u5185\u90e8\u306e\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3067\u3042\u308bwerkzeug\u304c\u4f55\u3084\u3089\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3044\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306f\u6d3b\u304d\u3066\u3044\u308b\u306e\u3067\u6642\u523b\u306f\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001REST API\u306f\u53cd\u5fdc\u3057\u307e\u305b\u3093\u3002\n\n```py3tb\n2016-12-20 16:30:32,129 root MainThread start\n2016-12-20 16:30:32,130 root MainThread main thread is mine!\nTue Dec 20 16:30:32 2016\n2016-12-20 16:30:32,141 werkzeug reset_service  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nException in thread reset_service:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/threading.py\", line 914, in _bootstrap_inner\n    self.run()\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/threading.py\", line 862, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/flask/app.py\", line 843, in run\n    run_simple(host, port, self, **options)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/werkzeug/serving.py\", line 692, in run_simple\n    reloader_type)\n  File \"/Users/knoguchi/.virtualenvs/flask3/lib/python3.5/site-packages/werkzeug/_reloader.py\", line 242, in run_with_reloader\n    signal.signal(signal.SIGTERM, lambda *args: sys.exit(0))\n  File \"/usr/local/Cellar/python3/3.5.2_3/Frameworks/Python.framework/Versions/3.5/lib/python3.5/signal.py\", line 47, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\nValueError: signal only works in main thread\n\nTue Dec 20 16:30:33 2016\nTue Dec 20 16:30:34 2016\n```\n\n\u3069\u3046\u3082\u30b7\u30b0\u30ca\u30eb\u30cf\u30f3\u30c9\u30e9\u304cMainThread\u3067\u306a\u3044\u3068\u30c0\u30e1\u3060\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\u3002Flask\u306e\u958b\u767a\u4e2d\u306e\u4fbf\u5229\u6a5f\u80fd\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u76e3\u8996\u3068\u30ea\u30ed\u30fc\u30c9\u3092\u884c\u3046\u305f\u3081\u3089\u3057\u3044\u3067\u3059\u304c\u3001\u4e0d\u8981\u3067\u3059\u306e\u3067`debug=True`\u3092\u524a\u9664\u3057\u3066\u518d\u5ea6\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n**\u5b9f\u884c\u7d50\u679c2**\n\n\u4eca\u5ea6\u306f\u3046\u307e\u304f\u884c\u304d\u307e\u3057\u305f\u3002REST API\u3092 http://localhost:5000 \u3067\u53e9\u3044\u3066\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u53cd\u5fdc\u3057\u307e\u3059\u3002\n\n```\n2016-12-20 16:38:54,214 root MainThread start\n2016-12-20 16:38:54,215 root MainThread main thread is mine!\nTue Dec 20 16:38:54 2016\n2016-12-20 16:38:54,224 werkzeug reset_service  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nTue Dec 20 16:38:55 2016\n2016-12-20 16:38:55,840 werkzeug reset_service 127.0.0.1 - - [20/Dec/2016 16:38:55] \"GET / HTTP/1.1\" 200 -\nTue Dec 20 16:38:56 2016\n2016-12-20 16:38:56,827 werkzeug reset_service 127.0.0.1 - - [20/Dec/2016 16:38:56] \"GET / HTTP/1.1\" 200 -\nTue Dec 20 16:38:57 2016\n```\n\n\u3053\u308c\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u30c7\u30fc\u30e2\u30f3\u7528\u306b\u78ba\u4fdd\u3057\u3064\u3064REST API\u3092\u63d0\u4f9b\u3059\u308b\u4e0b\u5730\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u30b9\u30ec\u30c3\u30c9\u9593\u306e\u5354\u8abf\n\nREST API\u304b\u3089\u30c7\u30fc\u30e2\u30f3\u306b\u30b3\u30de\u30f3\u30c9\u3092\u9001\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u4e00\u756a\u7c21\u5358\u306a\u306e\u306f`Queue`\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002Python\u306eQueue\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u306e\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u306aQueue\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308a\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089put/get\u3057\u3066\u3082\u4e0d\u6574\u5408\u304c\u8d77\u304d\u307e\u305b\u3093\u3002\u3067\u3082\u305d\u308c\u3060\u3051\u3067\u6e08\u3080\u30b1\u30fc\u30b9\u306f\u9650\u3089\u308c\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\nexample_threaded.py\u3092\u3055\u3089\u306b\u6539\u9020\u3057\u3066\u3001notes\u5909\u6570\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3068\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u66f4\u65b0\u3059\u308b\u5b9f\u9a13\u3092\u3057\u3066\u307f\u307e\u3059\u3002\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u306fSTDIN\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092notes\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nnotes\u306f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306a\u306e\u3067\u3001\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u3068\u77db\u76fe\u304c\u751f\u3058\u305f\u308a\u3001\u7279\u306bfor\u30eb\u30fc\u30d7\u3067\u30a2\u30af\u30bb\u30b9\u4e2d\u306b\u30ad\u30fc\u306e\u8ffd\u52a0\u524a\u9664\u304c\u8d77\u3053\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067`synchronized`\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u30ed\u30c3\u30af\u3057\u3001\u30af\u30ea\u30c1\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u8b77\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```diff\n$ diff -u example_threaded.py example_threaded2.py\n--- example_threaded.py\t2016-12-20 17:17:10.000000000 -0800\n+++ example_threaded2.py\t2016-12-20 17:29:06.000000000 -0800\n@@ -23,7 +23,38 @@\n         'text': notes[key]\n     }\n\n+def synchronized(lock):\n+    \"\"\" Synchronization decorator. \"\"\"\n\n+    def wrap(f):\n+        def newFunction(*args, **kw):\n+            lock.acquire()\n+            try:\n+                return f(*args, **kw)\n+            finally:\n+                lock.release()\n+        return newFunction\n+    return wrap\n+\n+glock = threading.Lock()\n+\n+@synchronized(glock)\n+def list_notes():\n+    return [note_repr(idx) for idx in sorted(notes.keys())]\n+\n+@synchronized(glock)\n+def add_note(note):\n+    idx = max(notes.keys()) + 1\n+    notes[idx] = note\n+    return idx\n+@synchronized(glock)\n+def update_note(key, note):\n+    notes[key] = note\n+\n+@synchronized(glock)\n+def delete_note(key):\n+    return notes.pop(key, None)\n+\n @app.route(\"/\", methods=['GET', 'POST'])\n def notes_list():\n     \"\"\"\n@@ -31,12 +62,11 @@\n     \"\"\"\n     if request.method == 'POST':\n         note = str(request.data.get('text', ''))\n-        idx = max(notes.keys()) + 1\n-        notes[idx] = note\n+        idx = add_note(note)\n         return note_repr(idx), status.HTTP_201_CREATED\n\n     # request.method == 'GET'\n-    return [note_repr(idx) for idx in sorted(notes.keys())]\n+    return list_notes()\n\n\n @app.route(\"/<int:key>/\", methods=['GET', 'PUT', 'DELETE'])\n@@ -46,11 +76,11 @@\n     \"\"\"\n     if request.method == 'PUT':\n         note = str(request.data.get('text', ''))\n-        notes[key] = note\n+        update_note(key, note)\n         return note_repr(key)\n\n     elif request.method == 'DELETE':\n-        notes.pop(key, None)\n+        delete_note(key)\n         return '', status.HTTP_204_NO_CONTENT\n\n     # request.method == 'GET'\n@@ -60,14 +90,15 @@\n\n\n if __name__ == \"__main__\":\n-\n+\n     log.info('start')\n-    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(debug=True))\n+    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict())\n     rest_service_thread.start()\n     log.info('main thread is mine!')\n-    import time\n-    while True:\n-        print(time.ctime())\n-        time.sleep(1)\n+    import sys\n+    for line in iter(sys.stdin):\n+        if not line:\n+            break\n+        add_note(line.strip())\n     rest_service_thread.join()\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n\u8d77\u52d5\u5f8c\u3001\u7aef\u672b\u304b\u3089\u9069\u5f53\u306b\u6587\u5b57\u5217\u3092\u5165\u308c\u3066\u30a8\u30f3\u30bf\u30fc\u3057\u3001REST API\u304b\u3089\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3068\u5165\u529b\u3057\u305f\u6587\u5b57\u5217\u304c\u8ffd\u52a0\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u884c\u5100\u306e\u826f\u3044\u30c7\u30fc\u30e2\u30f3\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30d7\u30ed\u30bb\u30b9\u306e\u3053\u3068\u3092\u3056\u3063\u304f\u308a\u30c7\u30fc\u30e2\u30f3\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u884c\u5100\u306e\u826f\u3044(well behaved)\u30c7\u30fc\u30e2\u30f3\u306f\u3084\u3089\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3053\u3068\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\n\n- umask\u3092\u8a2d\u5b9a\n- fork\u3057\u3066\u89aa\u30d7\u30ed\u30bb\u30b9\u3092exit\u3002\u5b50\u306finit\u306b\u990a\u5b50\u306b\u51fa\u3059\u3002\n- \u7aef\u672b\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044\u3088\u3046\u306b\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u5225\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3001\u65b0\u305f\u306a\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u3059\u308b\u3002\uff08\u5fc5\u305a\u3057\u3082\u30bb\u30c3\u30b7\u30e7\u30f3\u30ea\u30fc\u30c0\u30fc\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002System-V\u3067\u306f\u5236\u5fa1\u7aef\u672b\u3092\u6301\u3066\u306a\u3044\u975e\u30bb\u30c3\u30b7\u30e7\u30f3\u30ea\u30fc\u30c0\u306b\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002\u5f8c\u8ff0\uff09\n- \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092/\u306b\u3059\u308b\n- \u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u306f\u9589\u3058\u308b\n- stdin, stdout, stderr\u3092/dev/null\u306b\u8a2d\u5b9a\u3059\u308b\n- \u5b89\u5168\u306aPATH\u3092\u8a2d\u5b9a\u3059\u308b\n- \u4e8c\u91cd\u306b\u8d77\u52d5\u3057\u306a\u3044\u3088\u3046\u30ed\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308b\uff08PID\u30d5\u30a1\u30a4\u30eb\uff09\n- \u30b7\u30b0\u30ca\u30eb\u3092\u6b63\u3057\u304f\u30cf\u30f3\u30c9\u30eb\u3059\u308b\u304b\u7121\u8996\u3059\u308b\n- syslog\u306a\u3069\u3067\u30ed\u30b0\u3092\u6b8b\u3059\n- chroot\u3059\u308b\n\n\u3068\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304cPython\u306a\u3089[daemonize](https://pypi.python.org/pypi/daemonize/2.4.7)\u3084[python-daemon](https://pypi.python.org/pypi/python-daemon)\u3067\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306fpython-daemon\u3092\u6700\u5c0f\u9650\u306e\u8a2d\u5b9a\u3067\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002stdin\u306f\u4f7f\u3048\u307e\u305b\u3093\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b\uff13\u79d2\u3054\u3068\u306bnote\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u898b\u307e\u3057\u305f\u3002REST API\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308c\u30703\u79d2\u3054\u3068\u306bnotes\u304c\u5897\u3048\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```diff\n--- example_threaded2.py\t2016-12-25 16:25:08.000000000 -0800\n+++ example_daemon.py\t2016-12-25 16:29:29.000000000 -0800\n@@ -1,8 +1,9 @@\n import logging\n import threading\n+import daemon\n\n from flask import request, url_for\n-from flask.ext.api import FlaskAPI, status, exceptions\n+from flask_api import FlaskAPI, status, exceptions\n\n FORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\n logging.basicConfig(format=FORMAT, level=logging.INFO)\n@@ -89,16 +90,16 @@\n     return note_repr(key)\n\n\n-if __name__ == \"__main__\":\n-\n+def main():\n     log.info('start')\n     rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(threaded=True))\n     rest_service_thread.start()\n     log.info('main thread is mine!')\n-    import sys\n-    for line in iter(sys.stdin):\n-        if not line:\n-            break\n-        add_note(line.strip())\n+    import time\n+    for i in range(10):\n+        add_note(\"note{}\".format(i))\n+        time.sleep(3)\n     rest_service_thread.join()\n\n+with daemon.DaemonContext():\n+    main()\n```\n\n\u5b9f\u884c\u3057\u3066\u898b\u307e\u3059\n\n```\n$ python example_daemon.py\n$\n```\n&\u306a\u3057\u3067\u8d77\u52d5\u3057\u3066\u3082\u4e00\u77ac\u3067\u30b7\u30a7\u30eb\u306b\u623b\u3063\u3066\u304d\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u81ea\u5206\u81ea\u8eab\u3067\u30c7\u30fc\u30e2\u30f3\u5316\u3057\u3066\u3044\u307e\u3059\u3002ps\u3067\u78ba\u8a8d\u3057\u3066\u898b\u307e\u3057\u3087\u3046\u3002ps\u30b3\u30de\u30f3\u30c9\u306fLinux\u306e\u3082\u306e\u3002\n\n```\n$ ps xao pid,ppid,pgid,sid,comm | grep python\n 2860     1  2859  2859 python\n```\n\u89aa\u30d7\u30ed\u30bb\u30b9ID\u306f1\u3067\u990a\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3068\u30d7\u30ed\u30bb\u30b9\u30b0\u30eb\u30fc\u30d7ID\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u30ed\u30b0\u30a4\u30f3\u30b7\u30a7\u30eb\u306ebash\u306e\u30bb\u30c3\u30b7\u30e7\u30f3ID\u306f2693\u3067\u3057\u305f\u306e\u3067\u3001\u671f\u5f85\u901a\u308a\u65b0\u898f\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3069\u3046\u3082fork\u3092\uff12\u56de\u3057\u3066\u3044\u308b\u3088\u3046\u3067pid\u3068pgid\u304c\u7570\u306a\u3063\u3066\u3044\u307e\u3059\u3002fork\u30922\u56de\u3059\u308b\u7406\u7531\u306f\u6b21\u306e\u901a\u308a\uff08Advanced Programming in Unix \u7b2c13\u7ae0\u3088\u308a)\n\n> Under System V\u2013based systems, some people recommend calling fork again at this point, terminating the parent, and continuing the daemon in the child. This guarantees that the daemon is not a session leader, which prevents it from acquiring a controlling terminal under the System V rules (Section 9.6). Alternatively, to avoid acquiring a controlling terminal, be sure to specify O_NOCTTY whenever opening a terminal device.\n\n\nlsof -p 2860\u3067\u30d5\u30a1\u30a4\u30eb\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\u3092\u898b\u3066\u898b\u307e\u3059\u3002\n\n```\nlsof -p 2860\nCOMMAND  PID USER   FD   TYPE  DEVICE SIZE/OFF    NODE NAME\npython  2860 root  cwd    DIR   254,1     4096       2 /\npython  2860 root  rtd    DIR   254,1     4096       2 /\npython  2860 root  txt    REG   254,1  3781768  264936 /usr/bin/python2.7\npython  2860 root  mem    REG   254,1    47712 1045078 /lib/x86_64-linux-gnu/libnss_files-2.19.so\npython  2860 root  mem    REG   254,1    54248  391882 /usr/lib/python2.7/lib-dynload/_json.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    18904 1044589 /lib/x86_64-linux-gnu/libuuid.so.1.3.0\npython  2860 root  mem    REG   254,1    31048  265571 /usr/lib/x86_64-linux-gnu/libffi.so.6.0.2\npython  2860 root  mem    REG   254,1   141184  392622 /usr/lib/python2.7/lib-dynload/_ctypes.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    10464  796274 /usr/lib/python2.7/dist-packages/markupsafe/_speedups.so\npython  2860 root  mem    REG   254,1    29464  392892 /usr/lib/python2.7/lib-dynload/_hashlib.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1  2066816  264782 /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\npython  2860 root  mem    REG   254,1   395176  264784 /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0\npython  2860 root  mem    REG   254,1    97872  392612 /usr/lib/python2.7/lib-dynload/_ssl.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1    11248  392000 /usr/lib/python2.7/lib-dynload/resource.x86_64-linux-gnu.so\npython  2860 root  mem    REG   254,1  1607712  269275 /usr/lib/locale/locale-archive\npython  2860 root  mem    REG   254,1  1738176 1045067 /lib/x86_64-linux-gnu/libc-2.19.so\npython  2860 root  mem    REG   254,1  1051056 1045072 /lib/x86_64-linux-gnu/libm-2.19.so\npython  2860 root  mem    REG   254,1   109144 1044580 /lib/x86_64-linux-gnu/libz.so.1.2.8\npython  2860 root  mem    REG   254,1    10680 1045291 /lib/x86_64-linux-gnu/libutil-2.19.so\npython  2860 root  mem    REG   254,1    14664 1045071 /lib/x86_64-linux-gnu/libdl-2.19.so\npython  2860 root  mem    REG   254,1   137440 1044987 /lib/x86_64-linux-gnu/libpthread-2.19.so\npython  2860 root  mem    REG   254,1   140928 1044988 /lib/x86_64-linux-gnu/ld-2.19.so\npython  2860 root    0u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    1u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    2u   CHR     1,3      0t0    5593 /dev/null\npython  2860 root    3u  IPv4 3596677      0t0     TCP localhost:5000 (LISTEN)\n```\n\n\u304a\u3049\uff01STDIN(0),STDOUT(1),STDERR(2)\u304c\u898b\u4e8b\u306b/dev/null\u3067\u3059\u3002\u305d\u3057\u3066\u30ab\u30ec\u30f3\u30c8\u30ef\u30fc\u30ad\u30f3\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(cwd)\u306f/\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(rtd)\u3082/\u3067\u3059\u304c\u3001\u3053\u308c\u306fchroot\u3059\u308b\u8a2d\u5b9a\u3092\u5f15\u304d\u6e21\u3059\u3053\u3068\u3067\u5909\u66f4\u53ef\u80fd\u3067\u3059\u3002\u771f\u306b\u6b63\u7d71\u6d3e\u30c7\u30fc\u30e2\u30f3\u3067\u3059\u306d\uff01\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082rc\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u8d77\u52d5\u3057\u3066\u3082\u3061\u3083\u3093\u3068\u52d5\u304d\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\n- \u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3092\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u3001Flask\u306e\u958b\u767a\u7528\u30a6\u30a7\u30d6\u30b5\u30fc\u30d0\u3092\u6d3e\u751f\u30b9\u30ec\u30c3\u30c9\u3067\u7a3c\u50cd\u3055\u305b\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n- \u30e1\u30a4\u30f3\u30eb\u30fc\u30c1\u30f3\u3068REST API\u3067\u5909\u6570\u306e\u5171\u6709\u30fb\u66f4\u65b0\u304c\u53ef\u80fd\u306a\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n- \u884c\u5100\u306e\u826f\u3044\u30c7\u30fc\u30e2\u30f3\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u3060\u8272\u3005\u3068\u5b9f\u9a13\u4e2d\u3067\u3059\u306e\u3067\u3001\u3082\u3063\u3068\u8efd\u91cf\u306a\u65b9\u6cd5\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30ed\u30c3\u30af\u7121\u3057\u3067\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308b\u3088\u3001\u3068\u3044\u3046\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3044\u307e\u3057\u305f\u3089\u662f\u975e\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n\n# \u6700\u7d42\u306e\u72b6\u614b\u306e\u30b3\u30fc\u30c9\n\n\u30b3\u30fc\u30c9\u306fPython3\u3067\u3059\u304c\u3001\u6570\u884c\u306e\u4fee\u6b63\u3067Python2\u3067\u3082\u52d5\u304f\u306f\u305a\u3067\u3059\u3002threaded=True\u306f\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u540c\u6642\u306b\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u672c\u8ad6\u306e\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n\n```py3\nimport logging\nimport threading\nimport daemon\n\nfrom flask import request, url_for\nfrom flask_api import FlaskAPI, status, exceptions\n\nFORMAT = '%(asctime)-15s %(name)s %(threadName)s %(message)s'\nlogging.basicConfig(format=FORMAT, level=logging.INFO)\nlog = logging.getLogger()\n\napp = FlaskAPI(__name__)\n\n\nnotes = {\n    0: 'do the shopping',\n    1: 'build the codez',\n    2: 'paint the door',\n}\n\ndef note_repr(key):\n    return {\n        'url': request.host_url.rstrip('/') + url_for('notes_detail', key=key),\n        'text': notes[key]\n    }\n\ndef synchronized(lock):\n    \"\"\" Synchronization decorator. \"\"\"\n\n    def wrap(f):\n        def newFunction(*args, **kw):\n            lock.acquire()\n            try:\n                return f(*args, **kw)\n            finally:\n                lock.release()\n        return newFunction\n    return wrap\n\nglock = threading.Lock()\n\n@synchronized(glock)\ndef list_notes():\n    return [note_repr(idx) for idx in sorted(notes.keys())]\n\n@synchronized(glock)\ndef add_note(note):\n    idx = max(notes.keys()) + 1\n    notes[idx] = note\n    return idx\n@synchronized(glock)\ndef update_note(key, note):\n    notes[key] = note\n\n@synchronized(glock)\ndef delete_note(key):\n    return notes.pop(key, None)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef notes_list():\n    \"\"\"\n    List or create notes.\n    \"\"\"\n    if request.method == 'POST':\n        note = str(request.data.get('text', ''))\n        idx = add_note(note)\n        return note_repr(idx), status.HTTP_201_CREATED\n\n    # request.method == 'GET'\n    return list_notes()\n\n\n@app.route(\"/<int:key>/\", methods=['GET', 'PUT', 'DELETE'])\ndef notes_detail(key):\n    \"\"\"\n    Retrieve, update or delete note instances.\n    \"\"\"\n    if request.method == 'PUT':\n        note = str(request.data.get('text', ''))\n        update_note(key, note)\n        return note_repr(key)\n\n    elif request.method == 'DELETE':\n        delete_note(key)\n        return '', status.HTTP_204_NO_CONTENT\n\n    # request.method == 'GET'\n    if key not in notes:\n        raise exceptions.NotFound()\n    return note_repr(key)\n\n\ndef main():\n    log.info('start')\n    rest_service_thread = threading.Thread(name='reset_service', target=app.run, kwargs=dict(threaded=True))\n    rest_service_thread.start()\n    log.info('main thread is mine!')\n    import time\n    for i in range(10):\n        add_note(\"note{}\".format(i))\n        time.sleep(3)\n    rest_service_thread.join()\n\nwith daemon.DaemonContext():\n    main()\n```\n", "tags": ["Python", "REST-API", "daemon"]}