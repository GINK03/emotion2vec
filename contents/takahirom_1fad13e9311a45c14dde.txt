{"context": "\n\n\u6982\u8981\nAndroid 7.0 Nougat\u306e\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u3082\u3063\u3068\u7a81\u3063\u8fbc\u3093\u3067\u8abf\u3079\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nAnrdoid 7.0 Nougat\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u3064\u3044\u3066\u3082\u3046\u3061\u3087\u3063\u3068\u3064\u3063\u3053\u3093\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306a\u3069\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3054\u6307\u6458\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n3\u884c\u307e\u3068\u3081\n\u30bf\u30b9\u30af\u3054\u3068\u306b\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306e\u30d5\u30e9\u30b0\u304c\u3042\u308b\ndumpsys\u3067\u78ba\u8a8d\u3067\u304d\u308b\nforce_resizable_activities\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u5168\u30a2\u30d7\u30ea\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u5165\u308c\u308b\n\nActivity\u304c\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\nAndroidManifest\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u307e\u305a\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\nAndroidManifest\u306b\u66f8\u3044\u3066\u3042\u308b\u7d50\u679c\u4ee5\u4e0b\u306e\uff14\u3064\u306b\u5206\u985e\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nRESIZE_MODE_RESIZEABLE\nRESIZE_MODE_RESIZEABLE_AND_PIPABLE\nRESIZE_MODE_UNRESIZEABLE\nRESIZE_MODE_FORCE_RESIZEABLE\n\n\u30d5\u30e9\u30b0\u306e\u5224\u5b9a\u65b9\u6cd5\nhttps://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/core/java/android/content/pm/PackageParser.java#3533\na.info.screenOrientation = sa.getInt(\n        R.styleable.AndroidManifestActivity_screenOrientation,\n        SCREEN_ORIENTATION_UNSPECIFIED);\na.info.resizeMode = RESIZE_MODE_UNRESIZEABLE;\nfinal boolean appDefault = (owner.applicationInfo.privateFlags\n        & PRIVATE_FLAG_RESIZEABLE_ACTIVITIES) != 0;\n// This flag is used to workaround the issue with ignored resizeableActivity param when\n// either targetSdkVersion is not set at all or <uses-sdk> tag is below <application>\n// tag in AndroidManifest. If this param was explicitly set to 'false' we need to set\n// corresponding resizeMode regardless of targetSdkVersion value at this point in time.\nfinal boolean resizeableSetExplicitly\n        = sa.hasValue(R.styleable.AndroidManifestActivity_resizeableActivity);\nfinal boolean resizeable = sa.getBoolean(\n        R.styleable.AndroidManifestActivity_resizeableActivity, appDefault);\nif (resizeable) {\n    if (sa.getBoolean(R.styleable.AndroidManifestActivity_supportsPictureInPicture,\n            false)) {\n        a.info.resizeMode = RESIZE_MODE_RESIZEABLE_AND_PIPABLE;\n    } else {\n        a.info.resizeMode = RESIZE_MODE_RESIZEABLE;\n    }\n} else if (owner.applicationInfo.targetSdkVersion >= Build.VERSION_CODES.N\n        || resizeableSetExplicitly) {\n    a.info.resizeMode = RESIZE_MODE_UNRESIZEABLE;\n} else if (!a.info.isFixedOrientation() && (a.info.flags & FLAG_IMMERSIVE) == 0) {\n    a.info.resizeMode = RESIZE_MODE_FORCE_RESIZEABLE;\n}\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u305d\u306e\u307e\u307e\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5206\u985e\u3055\u308c\u308b\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u306f\u305a\u3001\u3001\n\n\n\ntargetSdk > N\nresizableActivity\u304c\u8a2d\u5b9a\nresizableActivity\u304ctrue\n\u753b\u9762\u56de\u8ee2\u56fa\u5b9a\u307e\u305f\u306fimmersive=true\nsupportsPictureInPicture=true\nRESIZE_MODE\n\n\n\n\n\u25cb\n\u25cb\n\u25cb\n\u25cb\n\u25cb\nRESIZE_MODE_RESIZEABLE_AND_PIPABLE\n\n\n\u25cb\n\u25cb\n\u25cb\n\u25cb\n\u2613\nRESIZE_MODE_RESIZEABLE\n\n\n\u25cb\n\u25cb\n\u25cb\n\u2613\n\u25cb\nRESIZE_MODE_RESIZEABLE_AND_PIPABLE\n\n\n\u25cb\n\u25cb\n\u2613\n\u25cb\n\u25cb\nRESIZE_MODE_UNRESIZEABLE\n\n\n\u25cb\n\u2613\n-\n\u25cb\n\u25cb\nRESIZE_MODE_RESIZEABLE_AND_PIPABLE\n\n\n\u2613\n\u2613\n-\n\u25cb\n\u25cb\nRESIZE_MODE_UNRESIZEABLE\n\n\n\u2613\n\u2613\n-\n\u2613\n\u25cb\nRESIZE_MODE_FORCE_RESIZEABLE\n\n\n\n\u30a2\u30d7\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308bRESIZABLE_MODE\u3092\u898b\u308b\u306b\u306f\nadb shell dumpsys activity activities\n\u307e\u305f\u306f\nadb shell dumpsys activity recents\n\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nmResizeMode\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30dd\u30b1\u30e2\u30f3GO\u306fRESIZE_MODE_UNRESIZEABLE\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n  * Recent #16: TaskRecord{d8f9253 #2030 A=com.nianticlabs.pokemongo U=0 StackId=1 sz=1}\n    userId=0 effectiveUid=u0a88 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.google.android.googlequicksearchbox\n    affinity=com.nianticlabs.pokemongo\n    intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity bnds=[332,693][500,861]}\n    realActivity=com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity\n    autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1\n    rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE\n    Activities=[ActivityRecord{80d2402 u0 com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity t2030}]\n    askedCompatMode=false inRecents=true isAvailable=true\n    lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/2030_task_thumbnail.png\n    stackId=1\n    hasBeenVisible=true mResizeMode=RESIZE_MODE_UNRESIZEABLE isResizeable=false firstActiveTime=1472365271355 lastActiveTime=1472365271355 (inactive for 9015s)\n\n\n\u30d5\u30e9\u30b0\u306e\u305d\u308c\u305e\u308c\u306e\u610f\u5473\n    /**\n     * Activity can not be resized and always occupies the fullscreen area with all windows fully\n     * visible.\n     * @hide\n     */\n    public static final int RESIZE_MODE_UNRESIZEABLE = 0;\n\nRESIZE_MODE_UNRESIZEABLE\u306f\u540d\u524d\u306e\u901a\u308a\u753b\u9762\u5168\u4f53\u3092\u5e38\u306b\u5c02\u6709\u3059\u308b\u6a21\u69d8\n    /**\n     * Activity can not be resized and always occupies the fullscreen area with all windows cropped\n     * to either the task or stack bounds.\n     * @hide\n     */\n    public static final int RESIZE_MODE_CROP_WINDOWS = 1;\n\nRESIZE_MODE_CROP_WINDOWS\u306f\u4eca\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u3063\u307d\u3044\uff1f\u3067\u3059\u3002cropped\u304c\u3069\u3046\u3044\u3046\u72b6\u614b\u3092\u793a\u3059\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n    /**\n     * Activity is resizeable.\n     * @hide\n     */\n    public static final int RESIZE_MODE_RESIZEABLE = 2;\n\nRESIZE_MODE_RESIZEABLE\u306f\u305d\u306e\u307e\u307e\u3067\u3059\u306d\n    /**\n     * Activity is resizeable and supported picture-in-picture mode.\n     * @hide\n     */\n    public static final int RESIZE_MODE_RESIZEABLE_AND_PIPABLE = 3;\n\nPIPABLE\u3067supported picture-in-picture mode\u3068\u3044\u3046\u610f\u5473\u307f\u305f\u3044\u3067\u3059\u306d\n    /**\n     * Activity is does not support resizing, but we are forcing it to be resizeable.\n     * @hide\n     */\n    public static final int RESIZE_MODE_FORCE_RESIZEABLE = 4;\n\n\nRESIZE_MODE_FORCE_RESIZEABLE\u306fActivity\u306fRESIABLE\u3058\u3083\u306a\u3044\u3051\u3069\u3001OS\u304cRESIABLE\u3092\u5f37\u5236\u3057\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\ntargetSdk\u304c23\u4ee5\u524d\u3067\u3001\u753b\u9762\u56de\u8ee2\u975e\u5bfe\u5fdc\u304bimmersive\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u306a\u308b\u3088\u3046\u306a\u3068\u304d\u3067\u3059\u306d\u3002\n\n\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308b\u3068\u3053\u308d\u306e\u5224\u5b9a\u3092\u898b\u3066\u307f\u308b\n\u4ee5\u4e0b\u304c\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u753b\u9762\u306b\u5165\u308b\u3068\u3053\u308d\u3092\u9577\u62bc\u3057\u3057\u305f\u3068\u304d\u306e\u30ea\u30b9\u30ca\u30fc\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u6700\u521d\u306e\u5224\u5b9a\u306f\u7aef\u672b\u5185\u3067\u3042\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u3082\u306e\u3063\u307d\u3044\u306e\u3067\u4e00\u65e6\u7121\u8996\u3057\u307e\u3059\u3002\n    private View.OnLongClickListener mRecentsLongClickListener = new View.OnLongClickListener() {\n\n        @Override\n        public boolean onLongClick(View v) {\n            if (mRecents == null || !ActivityManager.supportsMultiWindow()\n                    || !getComponent(Divider.class).getView().getSnapAlgorithm()\n                            .isSplitScreenFeasible()) {\n                return false;\n            }\n\n            toggleSplitScreenMode(MetricsEvent.ACTION_WINDOW_DOCK_LONGPRESS,\n                    MetricsEvent.ACTION_WINDOW_UNDOCK_LONGPRESS);\n            return true;\n        }\n    };\n\n\ntoggleSplitScreenMode\u3067\u3059\u3002\nWindowManagerProxy.getInstance().getDockSide()\u3067\u3069\u3053\u306bDOCK\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nDOCK\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u3067\u3001\u753b\u9762\u5206\u5272\u3055\u308c\u3066\u3001\u30a2\u30d7\u30ea\u304c\u4e0a\u306b\u753b\u9762\u304c\u3042\u308c\u3070\u3001DOCKED_TOP\u3001\u4e0b\u306b\u3042\u308c\u3070DOCKED_BOTTOM\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u3059\u3002\nDOCKED_INVALID\u3067\u753b\u9762\u5168\u4f53\u306b\u5e83\u304c\u3063\u3066\u3044\u307e\u3059\u3002\n    @Override\n    protected void toggleSplitScreenMode(int metricsDockAction, int metricsUndockAction) {\n        if (mRecents == null) {\n            return;\n        }\n        int dockSide = WindowManagerProxy.getInstance().getDockSide();\n        if (dockSide == WindowManager.DOCKED_INVALID) {\n            // ** \u3053\u3053\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u5165\u308b ** \n            mRecents.dockTopTask(NavigationBarGestureHelper.DRAG_MODE_NONE,\n                    ActivityManager.DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT, null, metricsDockAction);\n        } else {\n            // ** \u3053\u3053\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u89e3\u9664 ** \n            EventBus.getDefault().send(new UndockingTaskEvent());\n            if (metricsUndockAction != -1) {\n                MetricsLogger.action(mContext, metricsUndockAction);\n            }\n        }\n    }\n\n\u6b21\u306f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308bdockTopTask\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u4e00\u90e8\u7701\u7565\u6307\u5b9a\u53ef\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001runningTask.isDockable\u3067\u306a\u3051\u308c\u3070\u3001\"\u30a2\u30d7\u30ea\u3067\u5206\u5272\u753b\u9762\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\"\u3068\u3044\u3046Toast\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n    @Override\n    public boolean dockTopTask(int dragMode, int stackCreateMode, Rect initialBounds,\n            int metricsDockAction) {\n        int currentUser = sSystemServicesProxy.getCurrentUser();\n        SystemServicesProxy ssp = Recents.getSystemServices();\n        ActivityManager.RunningTaskInfo runningTask = ssp.getRunningTask();\n        boolean screenPinningActive = ssp.isScreenPinningActive();\n        boolean isRunningTaskInHomeStack = runningTask != null &&\n                SystemServicesProxy.isHomeStack(runningTask.stackId);\n        if (runningTask != null && !isRunningTaskInHomeStack && !screenPinningActive) {\n            if (runningTask.isDockable) {\n                if (sSystemServicesProxy.isSystemUser(currentUser)) {\n                    mImpl.dockTopTask(runningTask.id, dragMode, stackCreateMode, initialBounds);\n                } else {\n                    if (mSystemToUserCallbacks != null) {\n                        IRecentsNonSystemUserCallbacks callbacks =\n                                mSystemToUserCallbacks.getNonSystemUserRecentsForUser(currentUser);\n                        if (callbacks != null) {\n                            try {\n                                callbacks.dockTopTask(runningTask.id, dragMode, stackCreateMode,\n                                        initialBounds);\n                            } catch (RemoteException e) {\n                                Log.e(TAG, \"Callback failed\", e);\n                            }\n                        } else {\n                            Log.e(TAG, \"No SystemUI callbacks found for user: \" + currentUser);\n                        }\n                    }\n                }\n                mDraggingInRecentsCurrentUser = currentUser;\n                return true;\n            } else {\n                Toast.makeText(mContext, R.string.recents_incompatible_app_message,\n                        Toast.LENGTH_SHORT).show();\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n\u3067\u306frunningTask.isDockable\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3084\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\nActivityStack.getTasksLocked\u304b\u3089\u6700\u7d42\u7684\u306bTask\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n            RunningTaskInfo ci = new RunningTaskInfo();\n            ci.id = task.taskId;\n...\n            ci.numRunning = numRunning;\n            ci.isDockable = task.canGoInDockedStack();\n            ci.resizeMode = task.mResizeMode;\n            list.add(ci);\n\ncanGoInDockedStack\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5224\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nHome\u30a2\u30d7\u30ea\u3067\u306a\u3044\u5834\u5408 && (RESIZE_MODE_CROP_WINDOWS  || RESIZE_MODE_RESIZEABLE || RESIZE_MODE_RESIZEABLE_AND_PIPABLE || RESIZE_MODE_FORCE_RESIZEABLE || ActivityManagerService\u3067mForceResizableActivities\u306b\u306a\u3063\u3066\u3044\u308b)\n    boolean canGoInDockedStack() {\n        return !isHomeActivity()\n                && (isResizeableOrForced() || info.resizeMode == RESIZE_MODE_CROP_WINDOWS);\n    }\n\n    boolean isResizeableOrForced() {\n        return !isHomeActivity() && (isResizeable() || service.mForceResizableActivities);\n    }\n\n    boolean isResizeable() {\n        return !isHomeActivity() && ActivityInfo.isResizeableMode(info.resizeMode);\n    }\n\nActivityInfo.isResizeableMode \n\n    public static boolean isResizeableMode(int mode) {\n        return mode == RESIZE_MODE_RESIZEABLE\n                || mode == RESIZE_MODE_RESIZEABLE_AND_PIPABLE\n                || mode == RESIZE_MODE_FORCE_RESIZEABLE;\n    }\n\n\n\n\u3053\u308c\u3067\u30d5\u30e9\u30b0\u306b\u3088\u3063\u3066\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u304c\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u304a\u307e\u3051\nActivityManagerService\u3067mForceResizableActivities\u3063\u3066\u306a\u3093\u3060\u308d\u3046\u3063\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\ndb shell settings put global force_resizable_activities 1 \n\u3092\u3057\u3066\u518d\u8d77\u52d5\u3059\u308b\u3068\u6709\u52b9\u5316\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3042\u3068\u4ed6\u306e\u30d6\u30ed\u30b0\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068freeform\u30e2\u30fc\u30c9\u306b\u3082\u5165\u308c\u3088\u3046\u3067\u3059\u3002\nadb shell settings put global enable_freeform_support 1\nhttp://blog.fenrir-inc.com/jp/2016/07/android_n_multi_window.html\n\u3064\u307e\u308a\u3001\u4f55\u304c\u3067\u304d\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u5168\u90e8\u306e\u30a2\u30d7\u30ea\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u3067\u30d5\u30ea\u30fc\u30d5\u30a9\u30fc\u30e0\u3067\u304d\u307e\u3059\u306d\n\n# \u6982\u8981\nAndroid 7.0 Nougat\u306e\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u3082\u3063\u3068\u7a81\u3063\u8fbc\u3093\u3067\u8abf\u3079\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nAnrdoid 7.0 Nougat\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u3064\u3044\u3066\u3082\u3046\u3061\u3087\u3063\u3068\u3064\u3063\u3053\u3093\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306a\u3069\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3054\u6307\u6458\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n# 3\u884c\u307e\u3068\u3081\n\u30bf\u30b9\u30af\u3054\u3068\u306b\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306e\u30d5\u30e9\u30b0\u304c\u3042\u308b\ndumpsys\u3067\u78ba\u8a8d\u3067\u304d\u308b\nforce_resizable_activities\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u5168\u30a2\u30d7\u30ea\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u5165\u308c\u308b\n\n\n# Activity\u304c\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\nAndroidManifest\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u307e\u305a\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\nAndroidManifest\u306b\u66f8\u3044\u3066\u3042\u308b\u7d50\u679c\u4ee5\u4e0b\u306e\uff14\u3064\u306b\u5206\u985e\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nRESIZE_MODE_RESIZEABLE\nRESIZE_MODE_RESIZEABLE_AND_PIPABLE\nRESIZE_MODE_UNRESIZEABLE\nRESIZE_MODE_FORCE_RESIZEABLE\n\n## \u30d5\u30e9\u30b0\u306e\u5224\u5b9a\u65b9\u6cd5\n\nhttps://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/core/java/android/content/pm/PackageParser.java#3533\n\n```java\na.info.screenOrientation = sa.getInt(\n        R.styleable.AndroidManifestActivity_screenOrientation,\n        SCREEN_ORIENTATION_UNSPECIFIED);\na.info.resizeMode = RESIZE_MODE_UNRESIZEABLE;\nfinal boolean appDefault = (owner.applicationInfo.privateFlags\n        & PRIVATE_FLAG_RESIZEABLE_ACTIVITIES) != 0;\n// This flag is used to workaround the issue with ignored resizeableActivity param when\n// either targetSdkVersion is not set at all or <uses-sdk> tag is below <application>\n// tag in AndroidManifest. If this param was explicitly set to 'false' we need to set\n// corresponding resizeMode regardless of targetSdkVersion value at this point in time.\nfinal boolean resizeableSetExplicitly\n        = sa.hasValue(R.styleable.AndroidManifestActivity_resizeableActivity);\nfinal boolean resizeable = sa.getBoolean(\n        R.styleable.AndroidManifestActivity_resizeableActivity, appDefault);\nif (resizeable) {\n    if (sa.getBoolean(R.styleable.AndroidManifestActivity_supportsPictureInPicture,\n            false)) {\n        a.info.resizeMode = RESIZE_MODE_RESIZEABLE_AND_PIPABLE;\n    } else {\n        a.info.resizeMode = RESIZE_MODE_RESIZEABLE;\n    }\n} else if (owner.applicationInfo.targetSdkVersion >= Build.VERSION_CODES.N\n        || resizeableSetExplicitly) {\n    a.info.resizeMode = RESIZE_MODE_UNRESIZEABLE;\n} else if (!a.info.isFixedOrientation() && (a.info.flags & FLAG_IMMERSIVE) == 0) {\n    a.info.resizeMode = RESIZE_MODE_FORCE_RESIZEABLE;\n}\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u305d\u306e\u307e\u307e\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5206\u985e\u3055\u308c\u308b\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/27388/a6d74c50-d0f4-2554-e937-78c592ea2158.png)\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u306f\u305a\u3001\u3001\n\n\n| targetSdk > N | resizableActivity\u304c\u8a2d\u5b9a | resizableActivity\u304ctrue | \u753b\u9762\u56de\u8ee2\u56fa\u5b9a\u307e\u305f\u306fimmersive=true | supportsPictureInPicture=true| RESIZE_MODE |\n|---|---|---|---|---|---|\n| \u25cb | \u25cb | \u25cb | \u25cb | \u25cb |  RESIZE_MODE_RESIZEABLE_AND_PIPABLE |\n| \u25cb | \u25cb | \u25cb | \u25cb | \u2613 |  RESIZE_MODE_RESIZEABLE |\n| \u25cb | \u25cb | \u25cb | \u2613 | \u25cb |  RESIZE_MODE_RESIZEABLE_AND_PIPABLE |\n| \u25cb | \u25cb | \u2613 | \u25cb | \u25cb |  **RESIZE_MODE_UNRESIZEABLE** |\n| \u25cb | \u2613 | - | \u25cb | \u25cb |  RESIZE_MODE_RESIZEABLE_AND_PIPABLE |\n| \u2613 | \u2613 | - | \u25cb | \u25cb |  **RESIZE_MODE_UNRESIZEABLE** |\n| \u2613 | \u2613 | - | \u2613 | \u25cb |  **RESIZE_MODE_FORCE_RESIZEABLE** |\n\n\n\u30a2\u30d7\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308bRESIZABLE_MODE\u3092\u898b\u308b\u306b\u306f\nadb shell dumpsys activity activities\n\u307e\u305f\u306f\nadb shell dumpsys activity recents\n\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nmResizeMode\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30dd\u30b1\u30e2\u30f3GO\u306fRESIZE_MODE_UNRESIZEABLE\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\n  * Recent #16: TaskRecord{d8f9253 #2030 A=com.nianticlabs.pokemongo U=0 StackId=1 sz=1}\n    userId=0 effectiveUid=u0a88 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.google.android.googlequicksearchbox\n    affinity=com.nianticlabs.pokemongo\n    intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity bnds=[332,693][500,861]}\n    realActivity=com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity\n    autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1\n    rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE\n    Activities=[ActivityRecord{80d2402 u0 com.nianticlabs.pokemongo/com.unity3d.player.UnityPlayerNativeActivity t2030}]\n    askedCompatMode=false inRecents=true isAvailable=true\n    lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/2030_task_thumbnail.png\n    stackId=1\n    hasBeenVisible=true mResizeMode=RESIZE_MODE_UNRESIZEABLE isResizeable=false firstActiveTime=1472365271355 lastActiveTime=1472365271355 (inactive for 9015s)\n```\n\n## \u30d5\u30e9\u30b0\u306e\u305d\u308c\u305e\u308c\u306e\u610f\u5473\n\n```java\n    /**\n     * Activity can not be resized and always occupies the fullscreen area with all windows fully\n     * visible.\n     * @hide\n     */\n    public static final int RESIZE_MODE_UNRESIZEABLE = 0;\n```\n\nRESIZE_MODE_UNRESIZEABLE\u306f\u540d\u524d\u306e\u901a\u308a\u753b\u9762\u5168\u4f53\u3092\u5e38\u306b\u5c02\u6709\u3059\u308b\u6a21\u69d8\n\n```java\n    /**\n     * Activity can not be resized and always occupies the fullscreen area with all windows cropped\n     * to either the task or stack bounds.\n     * @hide\n     */\n    public static final int RESIZE_MODE_CROP_WINDOWS = 1;\n```\n\nRESIZE_MODE_CROP_WINDOWS\u306f\u4eca\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\u3063\u307d\u3044\uff1f\u3067\u3059\u3002cropped\u304c\u3069\u3046\u3044\u3046\u72b6\u614b\u3092\u793a\u3059\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n```java\n    /**\n     * Activity is resizeable.\n     * @hide\n     */\n    public static final int RESIZE_MODE_RESIZEABLE = 2;\n```\n\nRESIZE_MODE_RESIZEABLE\u306f\u305d\u306e\u307e\u307e\u3067\u3059\u306d\n\n```java\n    /**\n     * Activity is resizeable and supported picture-in-picture mode.\n     * @hide\n     */\n    public static final int RESIZE_MODE_RESIZEABLE_AND_PIPABLE = 3;\n```\n\nPIPABLE\u3067supported picture-in-picture mode\u3068\u3044\u3046\u610f\u5473\u307f\u305f\u3044\u3067\u3059\u306d\n\n```java\n    /**\n     * Activity is does not support resizing, but we are forcing it to be resizeable.\n     * @hide\n     */\n    public static final int RESIZE_MODE_FORCE_RESIZEABLE = 4;\n\n```\n\nRESIZE_MODE_FORCE_RESIZEABLE\u306fActivity\u306fRESIABLE\u3058\u3083\u306a\u3044\u3051\u3069\u3001OS\u304cRESIABLE\u3092\u5f37\u5236\u3057\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\ntargetSdk\u304c23\u4ee5\u524d\u3067\u3001\u753b\u9762\u56de\u8ee2\u975e\u5bfe\u5fdc\u304bimmersive\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3068\u306a\u308b\u3088\u3046\u306a\u3068\u304d\u3067\u3059\u306d\u3002\n\n\n# \u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308b\u3068\u3053\u308d\u306e\u5224\u5b9a\u3092\u898b\u3066\u307f\u308b\n\n\u4ee5\u4e0b\u304c\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u753b\u9762\u306b\u5165\u308b\u3068\u3053\u308d\u3092\u9577\u62bc\u3057\u3057\u305f\u3068\u304d\u306e\u30ea\u30b9\u30ca\u30fc\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u6700\u521d\u306e\u5224\u5b9a\u306f\u7aef\u672b\u5185\u3067\u3042\u307e\u308a\u5909\u308f\u3089\u306a\u3044\u3082\u306e\u3063\u307d\u3044\u306e\u3067\u4e00\u65e6\u7121\u8996\u3057\u307e\u3059\u3002\n\n```java\n    private View.OnLongClickListener mRecentsLongClickListener = new View.OnLongClickListener() {\n\n        @Override\n        public boolean onLongClick(View v) {\n            if (mRecents == null || !ActivityManager.supportsMultiWindow()\n                    || !getComponent(Divider.class).getView().getSnapAlgorithm()\n                            .isSplitScreenFeasible()) {\n                return false;\n            }\n\n            toggleSplitScreenMode(MetricsEvent.ACTION_WINDOW_DOCK_LONGPRESS,\n                    MetricsEvent.ACTION_WINDOW_UNDOCK_LONGPRESS);\n            return true;\n        }\n    };\n\n```\n\ntoggleSplitScreenMode\u3067\u3059\u3002\nWindowManagerProxy.getInstance().getDockSide()\u3067\u3069\u3053\u306bDOCK\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nDOCK\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u3067\u3001\u753b\u9762\u5206\u5272\u3055\u308c\u3066\u3001\u30a2\u30d7\u30ea\u304c\u4e0a\u306b\u753b\u9762\u304c\u3042\u308c\u3070\u3001DOCKED_TOP\u3001\u4e0b\u306b\u3042\u308c\u3070DOCKED_BOTTOM\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u3059\u3002\nDOCKED_INVALID\u3067\u753b\u9762\u5168\u4f53\u306b\u5e83\u304c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```java\n    @Override\n    protected void toggleSplitScreenMode(int metricsDockAction, int metricsUndockAction) {\n        if (mRecents == null) {\n            return;\n        }\n        int dockSide = WindowManagerProxy.getInstance().getDockSide();\n        if (dockSide == WindowManager.DOCKED_INVALID) {\n            // ** \u3053\u3053\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u306b\u5165\u308b ** \n            mRecents.dockTopTask(NavigationBarGestureHelper.DRAG_MODE_NONE,\n                    ActivityManager.DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT, null, metricsDockAction);\n        } else {\n            // ** \u3053\u3053\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u30e2\u30fc\u30c9\u89e3\u9664 ** \n            EventBus.getDefault().send(new UndockingTaskEvent());\n            if (metricsUndockAction != -1) {\n                MetricsLogger.action(mContext, metricsUndockAction);\n            }\n        }\n    }\n```\n\n\u6b21\u306f\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308bdockTopTask\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u4e00\u90e8\u7701\u7565\u6307\u5b9a\u53ef\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001runningTask.isDockable\u3067\u306a\u3051\u308c\u3070\u3001\"\u30a2\u30d7\u30ea\u3067\u5206\u5272\u753b\u9762\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\"\u3068\u3044\u3046Toast\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\n```java\n    @Override\n    public boolean dockTopTask(int dragMode, int stackCreateMode, Rect initialBounds,\n            int metricsDockAction) {\n        int currentUser = sSystemServicesProxy.getCurrentUser();\n        SystemServicesProxy ssp = Recents.getSystemServices();\n        ActivityManager.RunningTaskInfo runningTask = ssp.getRunningTask();\n        boolean screenPinningActive = ssp.isScreenPinningActive();\n        boolean isRunningTaskInHomeStack = runningTask != null &&\n                SystemServicesProxy.isHomeStack(runningTask.stackId);\n        if (runningTask != null && !isRunningTaskInHomeStack && !screenPinningActive) {\n            if (runningTask.isDockable) {\n                if (sSystemServicesProxy.isSystemUser(currentUser)) {\n                    mImpl.dockTopTask(runningTask.id, dragMode, stackCreateMode, initialBounds);\n                } else {\n                    if (mSystemToUserCallbacks != null) {\n                        IRecentsNonSystemUserCallbacks callbacks =\n                                mSystemToUserCallbacks.getNonSystemUserRecentsForUser(currentUser);\n                        if (callbacks != null) {\n                            try {\n                                callbacks.dockTopTask(runningTask.id, dragMode, stackCreateMode,\n                                        initialBounds);\n                            } catch (RemoteException e) {\n                                Log.e(TAG, \"Callback failed\", e);\n                            }\n                        } else {\n                            Log.e(TAG, \"No SystemUI callbacks found for user: \" + currentUser);\n                        }\n                    }\n                }\n                mDraggingInRecentsCurrentUser = currentUser;\n                return true;\n            } else {\n                Toast.makeText(mContext, R.string.recents_incompatible_app_message,\n                        Toast.LENGTH_SHORT).show();\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n```\n\n\u3067\u306frunningTask.isDockable\u3068\u3044\u3046\u306e\u306f\u3069\u3046\u3084\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\nActivityStack.getTasksLocked\u304b\u3089\u6700\u7d42\u7684\u306bTask\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```java\n            RunningTaskInfo ci = new RunningTaskInfo();\n            ci.id = task.taskId;\n...\n            ci.numRunning = numRunning;\n            ci.isDockable = task.canGoInDockedStack();\n            ci.resizeMode = task.mResizeMode;\n            list.add(ci);\n```\n\ncanGoInDockedStack\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5224\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\nHome\u30a2\u30d7\u30ea\u3067\u306a\u3044\u5834\u5408 && (RESIZE_MODE_CROP_WINDOWS  || RESIZE_MODE_RESIZEABLE || RESIZE_MODE_RESIZEABLE_AND_PIPABLE || RESIZE_MODE_FORCE_RESIZEABLE || ActivityManagerService\u3067mForceResizableActivities\u306b\u306a\u3063\u3066\u3044\u308b)\n\n```java\n    boolean canGoInDockedStack() {\n        return !isHomeActivity()\n                && (isResizeableOrForced() || info.resizeMode == RESIZE_MODE_CROP_WINDOWS);\n    }\n\n    boolean isResizeableOrForced() {\n        return !isHomeActivity() && (isResizeable() || service.mForceResizableActivities);\n    }\n\n    boolean isResizeable() {\n        return !isHomeActivity() && ActivityInfo.isResizeableMode(info.resizeMode);\n    }\n\nActivityInfo.isResizeableMode \n\n    public static boolean isResizeableMode(int mode) {\n        return mode == RESIZE_MODE_RESIZEABLE\n                || mode == RESIZE_MODE_RESIZEABLE_AND_PIPABLE\n                || mode == RESIZE_MODE_FORCE_RESIZEABLE;\n    }\n\n\n```\n\n\u3053\u308c\u3067\u30d5\u30e9\u30b0\u306b\u3088\u3063\u3066\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u306b\u5165\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u304c\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n# \u304a\u307e\u3051\n\nActivityManagerService\u3067mForceResizableActivities\u3063\u3066\u306a\u3093\u3060\u308d\u3046\u3063\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\ndb shell settings put global force_resizable_activities 1 \n\u3092\u3057\u3066\u518d\u8d77\u52d5\u3059\u308b\u3068\u6709\u52b9\u5316\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u3042\u3068\u4ed6\u306e\u30d6\u30ed\u30b0\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068freeform\u30e2\u30fc\u30c9\u306b\u3082\u5165\u308c\u3088\u3046\u3067\u3059\u3002\nadb shell settings put global enable_freeform_support 1\nhttp://blog.fenrir-inc.com/jp/2016/07/android_n_multi_window.html\n\n\u3064\u307e\u308a\u3001\u4f55\u304c\u3067\u304d\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u5168\u90e8\u306e\u30a2\u30d7\u30ea\u3067\u30de\u30eb\u30c1\u30a6\u30a4\u30f3\u30c9\u30a6\u3067\u30d5\u30ea\u30fc\u30d5\u30a9\u30fc\u30e0\u3067\u304d\u307e\u3059\u306d\n![Screenshot_20160828-205131.png](https://qiita-image-store.s3.amazonaws.com/0/27388/316b1197-1c0d-bb88-d0ea-9afb08fb718d.png)\n\n\n\n\n", "tags": ["AndroidN", "AndroidNougat", "Android"]}