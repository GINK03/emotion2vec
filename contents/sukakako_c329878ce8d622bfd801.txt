{"tags": ["C++", "C++11", "visualstudio2012"], "context": "\n\n\u74b0\u5883\nMicrosoft Visual Studio Professional 2012\n\n\u53c2\u8003\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3042\u308b\u5168\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3059\u308b\n<filesystem>\n\nfilesystem\n<fstream> \u3088\u308a\u591a\u6a5f\u80fd\u3067\u4f7f\u3044\u3084\u3059\u3044\u3002\nboost::filesystem \u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n#include <filesystem>\n\nvoid copyDirectory(const std::tr2::sys::path& srcDirectory,\n                   const std::tr2::sys::path& destDirectory)\n{\n    // \u5bfe\u8c61\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7121\u3051\u308c\u3070\u4f5c\u6210\n    if (std::tr2::sys::exists(destDirectory) == false)\n    {\n        if (std::tr2::sys::create_directories(destDirectory) == false)\n        {\n            // \u5931\u6557\n            assert(false);\n            return;\n        }\n    }\n\n    // \u30b3\u30d4\u30fc\u5bfe\u8c61\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u78ba\u8a8d\n    for (std::tr2::sys::directory_iterator it(srcDirectory);\n         it != std::tr2::sys::directory_iterator(); ++it)\n    {\n        std::tr2::sys::path target              = *it;\n        target = srcDirectory / target;\n        const std::tr2::sys::path next          = target.filename();\n        const std::tr2::sys::path nextDestFile  = destDirectory / next;\n\n        // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff1f\n        if (std::tr2::sys::is_directory(target))\n        {\n            // \u518d\u5e30\u547c\u3073\u51fa\u3057\n            copyDirectory\n            (\n                srcDirectory / next,\n                nextDestFile\n            );\n        }        \n        // \u30d5\u30a1\u30a4\u30eb\n        else\n        {\n            std::tr2::sys::copy_file\n            (\n                target,\n                nextDestFile,\n                std::tr2::sys::copy_option::overwrite_if_exists\n            );\n        }\n\n    }\n}\n\nint main()\n{\n    try\n    {\n        const std::tr2::sys::path src = \"src\";\n        const std::tr2::sys::path dest = \"dest\";\n        copyDirectory(src, dest);\n    }\n    catch (...)\n    {\n        assert(false);\n    }\n\n    return 0;\n}\n\n# \u74b0\u5883\nMicrosoft Visual Studio Professional 2012\n\n# \u53c2\u8003\n[\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3042\u308b\u5168\u30d5\u30a1\u30a4\u30eb/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3059\u308b](http://qiita.com/episteme/items/0e3c2ee8a8c03780f01e)\n[\\<filesystem\\>](https://msdn.microsoft.com/ja-jp/library/hh874694.aspx)\n\n# filesystem\n\\<fstream> \u3088\u308a\u591a\u6a5f\u80fd\u3067\u4f7f\u3044\u3084\u3059\u3044\u3002\nboost::filesystem \u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```cpp\n#include <filesystem>\n\nvoid copyDirectory(const std::tr2::sys::path& srcDirectory,\n                   const std::tr2::sys::path& destDirectory)\n{\n    // \u5bfe\u8c61\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7121\u3051\u308c\u3070\u4f5c\u6210\n    if (std::tr2::sys::exists(destDirectory) == false)\n    {\n        if (std::tr2::sys::create_directories(destDirectory) == false)\n        {\n            // \u5931\u6557\n            assert(false);\n            return;\n        }\n    }\n\n    // \u30b3\u30d4\u30fc\u5bfe\u8c61\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u78ba\u8a8d\n    for (std::tr2::sys::directory_iterator it(srcDirectory);\n         it != std::tr2::sys::directory_iterator(); ++it)\n    {\n        std::tr2::sys::path target              = *it;\n        target = srcDirectory / target;\n        const std::tr2::sys::path next          = target.filename();\n        const std::tr2::sys::path nextDestFile  = destDirectory / next;\n\n        // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff1f\n        if (std::tr2::sys::is_directory(target))\n        {\n            // \u518d\u5e30\u547c\u3073\u51fa\u3057\n            copyDirectory\n            (\n                srcDirectory / next,\n                nextDestFile\n            );\n        }        \n        // \u30d5\u30a1\u30a4\u30eb\n        else\n        {\n            std::tr2::sys::copy_file\n            (\n                target,\n                nextDestFile,\n                std::tr2::sys::copy_option::overwrite_if_exists\n            );\n        }\n        \n    }\n}\n\nint main()\n{\n    try\n    {\n        const std::tr2::sys::path src = \"src\";\n        const std::tr2::sys::path dest = \"dest\";\n        copyDirectory(src, dest);\n    }\n    catch (...)\n    {\n        assert(false);\n    }\n\n    return 0;\n}\n```\n\n\n"}