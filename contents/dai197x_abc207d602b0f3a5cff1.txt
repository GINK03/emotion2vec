{"context": "\n\n\u52d5\u6a5f\n\u306a\u3093\u304b\u8272\u3005\u3042\u308b\u3051\u3069\u3088\u304f\u5206\u304b\u3089\u3093\u306e\u3067 crates.io \u3092\u30b5\u30fc\u30d9\u30a4\u3002\n\u6700\u65b0\u7248\u306e\u65e5\u4ed8\u3068\u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u6570\u3082\u5408\u308f\u305b\u3066\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3002\necho \u30b5\u30fc\u30d0\u30fc\u4f5c\u308b\u3068\u304d\u306e\u5178\u578b\u7684\u8a2d\u8a08\u3082\u8efd\u304f\u4ed8\u8a18\u3002\necho \u3058\u3083\u306a\u304f\u3066\u3001\u5358\u7d14\u306b\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3002\n\nstd::net\n\nBSD socket API \u540c\u7b49\u3002select \u7cfb\u306f\u7121\u3055\u3052\u3002\n   let mut buf = [0u8; 1024];\n   loop {\n      match conn.read(&mut buf[0..]) {\n         Ok(0) => {\n            println!(\"read: closed\");\n            return Ok(());\n         }\n         Ok(n) => {\n            println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n         }\n         Err(e) => {\n            match e.kind() {\n               std::io::ErrorKind::WouldBlock => (),\n               _ => return Err(format!(\"read: {}\", e)),\n            }\n         }\n      }\n      std::thread::sleep(sleeptime);\n   }\n\n\u53e4\u5178\u7684\u3002\n\nnet2 2016-07-16(0.2.26) 236,294\nstd::net \u306e\u30e9\u30c3\u30d1\u3002\nbind \u3068\u304b reuse_address \u3068\u304b\u3092\u9023\u7d50\u3057\u3066\u66f8\u3051\u308b\u3060\u3051\uff1f\nlisten/connect \u3057\u305f\u5f8c\u306f net \u306e TcpListener \u3084 TcpStream \u306b\u306a\u308b\u3002\n  net2::TcpBuilder::new_v4()\n    .and_then(|t| {t.reuse_address(true)})\n    .and_then(|t| {t.bind(addr)}\n    .and_then(|t| {t.listen(backlog)})\n\nRust \u3060\u3068\u30a8\u30e9\u30fc\u4e0d\u78ba\u5b9a\u72b6\u614b\u306e\u30e2\u30ca\u30c9\u7e4b\u3052\u308b\u3088\u308a\u306f try! \u3067\u4e00\u51e6\u7406\u305a\u3064\u30c1\u30a7\u30c3\u30af\u304b\u3051\u308b\u30b9\u30bf\u30a4\u30eb\u3060\u3057\u3001\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30ad\u30e2\u306f\u63a5\u7d9a\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3067\u3042\u308b\u304b\u3089\u3001bind/listen \u306e\u3068\u3053\u3060\u3051\u30b9\u30bf\u30a4\u30eb\u5909\u3048\u3089\u308c\u3066\u3082\u3069\u3046\u3067\u3082\u3044\u3044\u611f\u3058\u3067\u3042\u308b\u3002\n\nmio 2016-09-02(0.6.0) 131,570\n\u8efd\u91cf\u306e\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nnet2 \u306b\u4f9d\u5b58\u3002\nepoll \u306a\u611f\u3058\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3067\u66f8\u304f\u3002\n   let poller = mio::Poll::new().unwrap();\n   let token_id  = 0;\n   let mut conn: mio::tcp::TcpStream = ...;\n   poller.register(&conn, mio::Token(token_id), mio::Ready::readable(), mio::PollOpt::edge()).unwrap();\n\n   let mut buf = [0u8; 1024];\n   let mut events = mio::Events::with_capacity(1024);\n   loop {\n      poller.poll(&mut events, None).unwrap();\n      for ev in events.iter() {\n         match ev.token() {\n            mio::Token(id) if id == token_id => {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     return Ok(());\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     return Err(format!(\"read: {}\", e));\n                  }\n               }\n            }\n            mio::Token(_) => (),\n         }\n      }\n   }\n\n\u53d7\u4fe1\u30a4\u30d9\u30f3\u30c8\u5224\u5b9a\u306e\u3061\u306b read \u3059\u308b\u304b\u3089\u3001wouldblock \u306f\u8d77\u304d\u306a\u3044\u3001\u3068\u3002\n\u3053\u306e\u66f8\u304d\u65b9\u306e\u30e1\u30ea\u30c3\u30c8\u3084\u9650\u754c\u306f select/epoll \u7cfb\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u306a\u3002\n\u3042\u3068\u5b9f\u969b\u306f listener \u3082 poller \u306b\u7a81\u3063\u8fbc\u3080\u3088\u308d\u3057\u3002\n\nmio \u4f9d\u5b58\n\nrotor 2016-05-21(0.6.3) 18,705\nStateMachine \u3089\u3057\u3044\u304c\u2026\u3069\u3046\u3044\u3046\u69cb\u9020\u306a\u306e\u304b\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u3093\uff57\ndns, redis, http \u306a\u3093\u304b\u306e\u5b9f\u88c5\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306a\u308a\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306f\u306a\u3063\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3051\u3069\u3082\u3002\nrotor-stream \u3063\u3066\u306e\u3067\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u66f8\u3051\u308b\u307f\u305f\u3044\u3002\n\ntokio-core 2016-09-10(0.1.0) 3,214\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3068 future \u306b\u3088\u308b\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30b9\u30bf\u30a4\u30eb\u306e API\nfuture \u306f\u540c\u3058\u4f5c\u8005\u306e future crates \u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u3053\u306e future \u3067 mio \u3092\u76f4\u306b\u4f7f\u3063\u305f HTTP \u30b5\u30fc\u30d0\u30fc\u306f\u304b\u306a\u308a\u826f\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3066\u3044\u308b( https://aturon.github.io/blog/2016/08/11/futures/ )\ntokio \u306f\u3053\u306e future \u3092\u4f7f\u3063\u3066 finagle \u307f\u305f\u3044\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f5c\u308b \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3001tokio-core \u304c mio \u3068 future \u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u90e8\u5206\u306e\u3088\u3046\u3060\u3002\ntokio-service \u306b\u306f finagle \u306e Service \u307d\u3044\u30af\u30e9\u30b9\u304c\u3042\u308b\u3002\npub fn main() -> Result<(), String> {\n   let addr = try!(std::net::SocketAddr::from_str(\"127.0.0.1:10000\").map_err(|e| format!(\"parse: {}\", e)));\n\n   let mut core = tokio_core::reactor::Core::new().unwrap();\n   let handle = core.handle();\n\n   let listener = tokio_core::net::TcpListener::bind(&addr, &handle).unwrap();\n\n   let r = listener.incoming().for_each(move |(conn,_addr)| {\n      let buf  = vec![0u8; 1024]; // tokio_core::io::read requires AsMut\n      let iter = futures::stream::iter(std::iter::repeat(()).map(Ok::<(), std::io::Error>));\n      let f = iter.fold((conn,buf), |(conn,buf), _| { // use iter and fold to move ownership of buf to closure\n         tokio_core::io::read(conn, buf).and_then(|(r,t,size)| {\n            if size == 0 {\n               println!(\"closed\");\n               Err(std::io::Error::new(std::io::ErrorKind::BrokenPipe, \"closed\"))\n            } else {\n               println!(\"recv[{}]: {}\", size, std::str::from_utf8(&t[0..size]).unwrap());\n               Ok((r,t))\n            }\n         })\n      });\n      handle.spawn(f.then(|_| Ok(())));\n      Ok(())\n   });\n   core.run(r).unwrap();\n   Ok(())\n}\n\nread \u30eb\u30fc\u30d7\u304c\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u306e fold \u306b\u306a\u308b\u306e\u304c\u4e00\u5bf8\u6238\u60d1\u3046\u3002\n\u3053\u308c\u3060\u3051\u306a\u3089\u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u304c\u3001\u5225\u306e I/O \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068 future \u306e\u5a01\u529b\u304c\u51fa\u3066\u304d\u305d\u3046\u3060\u3002\n\nmioco 2016-08-22(0.8.1) 3,753\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30b9\u30bf\u30a4\u30eb\u306e API.\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306f coio \u4f5c\u8005\u306e context-rs\npub fn main() -> Result<(), String> {\n   mioco::start(|| -> Result<(), String> {\n      let listener: mioco::tcp::TcpListener = try!(bind());\n\n      loop {\n         let mut conn: mioco::tcp::TcpStream = try!(listener.accept().map_err(|e| format!(\"accept: {}\", e)));\n\n         mioco::spawn(move || -> Result<(), String> {\n            let mut buf = [0u8; 1024];\n            loop {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     return Ok(());\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     return Err(format!(\"read: {}\", e));\n                  }\n               }\n            }\n         });\n      }\n   }).unwrap()\n}\n\nmioco \u4f7f\u3046\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51e6\u7406\u306e\u5168\u4f53\u3092 mioco::start \u3067\u62ec\u308b\u3002\nmioco::spawn \u306f Rust \u306e\u30b9\u30ec\u30c3\u30c9\u3068\u540c\u3058\u66f8\u304d\u65b9\u3060\u304c\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3042\u308d\u3046\u3002\n\u63a5\u7d9a\u6bce\u30b3\u30eb\u30fc\u30c1\u30f3\u306a\u306e\u3067\u898b\u901a\u3057\u304c\u826f\u3044\u3002mio \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u63a5\u7d9a\u4e00\u3064\u3060\u3051\u3060\u3051\u3069\u3001\u3053\u3061\u3089\u306f\u8907\u6570\u5bfe\u5fdc\u3067\u304d\u3066\u3044\u308b\u3002\n\u4e00\u822c\u306b\u63a5\u7d9a\u6bce\u306eOS\u30b9\u30ec\u30c3\u30c9\u65b9\u5f0f\u306f\u3001\n\nPros: \u63a5\u7d9a\u6bce\u306b\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u3001\u30d0\u30c3\u30d5\u30a1\u51e6\u7406\u304c\u697d\nCons: \u63a5\u7d9a\u6570(=\u30b9\u30ec\u30c3\u30c9\u6570)\u5897\u52a0\u306b\u3068\u3082\u306a\u3046\u6027\u80fd\u52a3\u5316\n\n\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u304c\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u3042\u308c\u3070\u6b20\u70b9\u304c\u7121\u304f\u5229\u70b9\u3060\u3051\u4eab\u53d7\u3067\u304d\u308b\u306f\u305a\u3002\n\u8ab0\u304b C10K \u3067\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u8a66\u3057\u3066\u307f\u3066;-)\n\nevent 2015-01-05(0.2.1) 1,384\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3002\n\naio 2015-01-05(0.0.1) 666\n\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O \u3089\u3057\u3044\u3002\n\u540d\u524d\u306f\u975e\u540c\u671fI/O\u307d\u3044\u304c?\n\nasio 2016-05-05(0.1.0) 240\n\u975e\u540c\u671fI/O\n\nfutures-mio 2016-08-01(0.1.0) 112\nfutures \u3068 mio \u7d44\u307f\u5408\u308f\u305b\u305f\u3084\u3064\u3067\u3001tokio \u306b\u767a\u5c55\u7684\u306b\u89e3\u6d88\u3057\u305f\u306e\u3067\u3042\u308d\u3046\u3002\u540c\u3058\u4f5c\u8005\u3060\u3057\u3002\n\ncoio-rs\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30b9\u30bf\u30a4\u30eb\u3002\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306f\u540c\u4f5c\u8005\u306e context-rs\npub fn main() -> Result<(), String> {\n   coio::Scheduler::new().with_workers(4).run(|| {\n      let listener = coio::net::TcpListener::bind(\"127.0.0.1:10000\").unwrap();\n\n      loop {\n         let (mut conn, _addr) = try!(listener.accept().map_err(|e| format!(\"accept: {}\", e)));\n\n         coio::spawn(move || {\n            let mut buf = [0u8; 1024];\n            loop {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     break;\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     println!(\"read: {}\", e);\n                     break;\n                  }\n               }\n            }\n         });\n      }\n   }).unwrap()\n}\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f mioco \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u540c\u3058\u3002\n\n\u307e\u3068\u3081\nstd::net, net2, mio \u306e\u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30d5\u30a1\u30af\u30c8\u307d\u3044\u3002\nmio \u306e\u4e0a\u306b aio/future/coroutine/fsm \u30b9\u30bf\u30a4\u30eb\u306a\u3069\u8272\u3005\u306a crate \u304c\u3042\u308b\u611f\u3058\u304b\u306a\u3002\n# \u52d5\u6a5f\n\u306a\u3093\u304b\u8272\u3005\u3042\u308b\u3051\u3069\u3088\u304f\u5206\u304b\u3089\u3093\u306e\u3067 crates.io \u3092\u30b5\u30fc\u30d9\u30a4\u3002\n\n\u6700\u65b0\u7248\u306e\u65e5\u4ed8\u3068\u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u6570\u3082\u5408\u308f\u305b\u3066\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3002\n~~echo \u30b5\u30fc\u30d0\u30fc\u4f5c\u308b\u3068\u304d\u306e\u5178\u578b\u7684\u8a2d\u8a08\u3082\u8efd\u304f\u4ed8\u8a18\u3002~~\necho \u3058\u3083\u306a\u304f\u3066\u3001\u5358\u7d14\u306b\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u51fa\u529b\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3002\n\n## [std::net](https://doc.rust-lang.org/std/net/)\nBSD socket API \u540c\u7b49\u3002select \u7cfb\u306f\u7121\u3055\u3052\u3002\n\n```\n   let mut buf = [0u8; 1024];\n   loop {\n      match conn.read(&mut buf[0..]) {\n         Ok(0) => {\n            println!(\"read: closed\");\n            return Ok(());\n         }\n         Ok(n) => {\n            println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n         }\n         Err(e) => {\n            match e.kind() {\n               std::io::ErrorKind::WouldBlock => (),\n               _ => return Err(format!(\"read: {}\", e)),\n            }\n         }\n      }\n      std::thread::sleep(sleeptime);\n   }\n```\n\u53e4\u5178\u7684\u3002\n\n## [net2](https://crates.io/crates/net2) 2016-07-16(0.2.26) 236,294\nstd::net \u306e\u30e9\u30c3\u30d1\u3002\n\nbind \u3068\u304b reuse_address \u3068\u304b\u3092\u9023\u7d50\u3057\u3066\u66f8\u3051\u308b\u3060\u3051\uff1f\nlisten/connect \u3057\u305f\u5f8c\u306f net \u306e TcpListener \u3084 TcpStream \u306b\u306a\u308b\u3002\n\n```\n  net2::TcpBuilder::new_v4()\n    .and_then(|t| {t.reuse_address(true)})\n    .and_then(|t| {t.bind(addr)}\n    .and_then(|t| {t.listen(backlog)})\n```\nRust \u3060\u3068\u30a8\u30e9\u30fc\u4e0d\u78ba\u5b9a\u72b6\u614b\u306e\u30e2\u30ca\u30c9\u7e4b\u3052\u308b\u3088\u308a\u306f try! \u3067\u4e00\u51e6\u7406\u305a\u3064\u30c1\u30a7\u30c3\u30af\u304b\u3051\u308b\u30b9\u30bf\u30a4\u30eb\u3060\u3057\u3001\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30ad\u30e2\u306f\u63a5\u7d9a\u3057\u305f\u5f8c\u306e\u51e6\u7406\u3067\u3042\u308b\u304b\u3089\u3001bind/listen \u306e\u3068\u3053\u3060\u3051\u30b9\u30bf\u30a4\u30eb\u5909\u3048\u3089\u308c\u3066\u3082\u3069\u3046\u3067\u3082\u3044\u3044\u611f\u3058\u3067\u3042\u308b\u3002\n\n## [mio](https://crates.io/crates/mio) 2016-09-02(0.6.0) 131,570\n\u8efd\u91cf\u306e\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nnet2 \u306b\u4f9d\u5b58\u3002\nepoll \u306a\u611f\u3058\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3067\u66f8\u304f\u3002\n\n```\n   let poller = mio::Poll::new().unwrap();\n   let token_id  = 0;\n   let mut conn: mio::tcp::TcpStream = ...;\n   poller.register(&conn, mio::Token(token_id), mio::Ready::readable(), mio::PollOpt::edge()).unwrap();\n\n   let mut buf = [0u8; 1024];\n   let mut events = mio::Events::with_capacity(1024);\n   loop {\n      poller.poll(&mut events, None).unwrap();\n      for ev in events.iter() {\n         match ev.token() {\n            mio::Token(id) if id == token_id => {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     return Ok(());\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     return Err(format!(\"read: {}\", e));\n                  }\n               }\n            }\n            mio::Token(_) => (),\n         }\n      }\n   }\n```\n\u53d7\u4fe1\u30a4\u30d9\u30f3\u30c8\u5224\u5b9a\u306e\u3061\u306b read \u3059\u308b\u304b\u3089\u3001wouldblock \u306f\u8d77\u304d\u306a\u3044\u3001\u3068\u3002\n\u3053\u306e\u66f8\u304d\u65b9\u306e\u30e1\u30ea\u30c3\u30c8\u3084\u9650\u754c\u306f select/epoll \u7cfb\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u306a\u3002\n\n\u3042\u3068\u5b9f\u969b\u306f listener \u3082 poller \u306b\u7a81\u3063\u8fbc\u3080\u3088\u308d\u3057\u3002\n\n# mio \u4f9d\u5b58\n## [rotor](https://crates.io/crates/rotor) 2016-05-21(0.6.3) 18,705\nStateMachine \u3089\u3057\u3044\u304c\u2026\u3069\u3046\u3044\u3046\u69cb\u9020\u306a\u306e\u304b\u3055\u3063\u3071\u308a\u5206\u304b\u3089\u3093\uff57\ndns, redis, http \u306a\u3093\u304b\u306e\u5b9f\u88c5\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306a\u308a\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306f\u306a\u3063\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3051\u3069\u3082\u3002\nrotor-stream \u3063\u3066\u306e\u3067\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u66f8\u3051\u308b\u307f\u305f\u3044\u3002\n\n## [tokio-core](https://crates.io/crates/tokio-core) 2016-09-10(0.1.0) 3,214\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3068 future \u306b\u3088\u308b\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30b9\u30bf\u30a4\u30eb\u306e API\nfuture \u306f\u540c\u3058\u4f5c\u8005\u306e [future](https://crates.io/crates/futures) crates \u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u3053\u306e future \u3067 mio \u3092\u76f4\u306b\u4f7f\u3063\u305f HTTP \u30b5\u30fc\u30d0\u30fc\u306f\u304b\u306a\u308a\u826f\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3066\u3044\u308b( https://aturon.github.io/blog/2016/08/11/futures/ )\n\ntokio \u306f\u3053\u306e future \u3092\u4f7f\u3063\u3066 [finagle \u307f\u305f\u3044\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f5c\u308b](https://medium.com/@carllerche/announcing-tokio-df6bb4ddb34#.6t8gcc2ap) \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3001tokio-core \u304c mio \u3068 future \u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u90e8\u5206\u306e\u3088\u3046\u3060\u3002\ntokio-service \u306b\u306f finagle \u306e Service \u307d\u3044\u30af\u30e9\u30b9\u304c\u3042\u308b\u3002\n\n```\npub fn main() -> Result<(), String> {\n   let addr = try!(std::net::SocketAddr::from_str(\"127.0.0.1:10000\").map_err(|e| format!(\"parse: {}\", e)));\n\n   let mut core = tokio_core::reactor::Core::new().unwrap();\n   let handle = core.handle();\n   \n   let listener = tokio_core::net::TcpListener::bind(&addr, &handle).unwrap();\n\n   let r = listener.incoming().for_each(move |(conn,_addr)| {\n      let buf  = vec![0u8; 1024]; // tokio_core::io::read requires AsMut\n      let iter = futures::stream::iter(std::iter::repeat(()).map(Ok::<(), std::io::Error>));\n      let f = iter.fold((conn,buf), |(conn,buf), _| { // use iter and fold to move ownership of buf to closure\n         tokio_core::io::read(conn, buf).and_then(|(r,t,size)| {\n            if size == 0 {\n               println!(\"closed\");\n               Err(std::io::Error::new(std::io::ErrorKind::BrokenPipe, \"closed\"))\n            } else {\n               println!(\"recv[{}]: {}\", size, std::str::from_utf8(&t[0..size]).unwrap());\n               Ok((r,t))\n            }\n         })\n      });\n      handle.spawn(f.then(|_| Ok(())));\n      Ok(())\n   });\n   core.run(r).unwrap();\n   Ok(())\n}\n```\nread \u30eb\u30fc\u30d7\u304c\u7121\u9650\u30a4\u30c6\u30ec\u30fc\u30bf\u306e fold \u306b\u306a\u308b\u306e\u304c\u4e00\u5bf8\u6238\u60d1\u3046\u3002\n\u3053\u308c\u3060\u3051\u306a\u3089\u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u304c\u3001\u5225\u306e I/O \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068 future \u306e\u5a01\u529b\u304c\u51fa\u3066\u304d\u305d\u3046\u3060\u3002\n\n## [mioco](https://crates.io/crates/mioco) 2016-08-22(0.8.1) 3,753\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30b9\u30bf\u30a4\u30eb\u306e API.\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306f coio \u4f5c\u8005\u306e [context-rs](https://github.com/zonyitoo/context-rs)\n\n```\npub fn main() -> Result<(), String> {\n   mioco::start(|| -> Result<(), String> {\n      let listener: mioco::tcp::TcpListener = try!(bind());\n\n      loop {\n         let mut conn: mioco::tcp::TcpStream = try!(listener.accept().map_err(|e| format!(\"accept: {}\", e)));\n\n         mioco::spawn(move || -> Result<(), String> {\n            let mut buf = [0u8; 1024];\n            loop {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     return Ok(());\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     return Err(format!(\"read: {}\", e));\n                  }\n               }\n            }\n         });\n      }\n   }).unwrap()\n}\n```\nmioco \u4f7f\u3046\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u51e6\u7406\u306e\u5168\u4f53\u3092 mioco::start \u3067\u62ec\u308b\u3002\nmioco::spawn \u306f Rust \u306e\u30b9\u30ec\u30c3\u30c9\u3068\u540c\u3058\u66f8\u304d\u65b9\u3060\u304c\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3042\u308d\u3046\u3002\n\u63a5\u7d9a\u6bce\u30b3\u30eb\u30fc\u30c1\u30f3\u306a\u306e\u3067\u898b\u901a\u3057\u304c\u826f\u3044\u3002mio \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u63a5\u7d9a\u4e00\u3064\u3060\u3051\u3060\u3051\u3069\u3001\u3053\u3061\u3089\u306f\u8907\u6570\u5bfe\u5fdc\u3067\u304d\u3066\u3044\u308b\u3002\n\n\u4e00\u822c\u306b\u63a5\u7d9a\u6bce\u306eOS\u30b9\u30ec\u30c3\u30c9\u65b9\u5f0f\u306f\u3001\n\n - Pros: \u63a5\u7d9a\u6bce\u306b\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30af\u30ea\u30a2\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u3001\u30d0\u30c3\u30d5\u30a1\u51e6\u7406\u304c\u697d\n - Cons: \u63a5\u7d9a\u6570(=\u30b9\u30ec\u30c3\u30c9\u6570)\u5897\u52a0\u306b\u3068\u3082\u306a\u3046\u6027\u80fd\u52a3\u5316\n\n\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u304c\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u3042\u308c\u3070\u6b20\u70b9\u304c\u7121\u304f\u5229\u70b9\u3060\u3051\u4eab\u53d7\u3067\u304d\u308b\u306f\u305a\u3002\n\u8ab0\u304b C10K \u3067\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u8a66\u3057\u3066\u307f\u3066;-)\n\n## [event](https://crates.io/crates/event) 2015-01-05(0.2.1) 1,384\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u3002\n\n## [aio](https://crates.io/crates/aio) 2015-01-05(0.0.1) 666\n\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0I/O \u3089\u3057\u3044\u3002\n\u540d\u524d\u306f\u975e\u540c\u671fI/O\u307d\u3044\u304c?\n\n## [asio](https://crates.io/crates/asio) 2016-05-05(0.1.0) 240\n\u975e\u540c\u671fI/O\n\n## [futures-mio](https://crates.io/crates/futures-mio) 2016-08-01(0.1.0) 112\nfutures \u3068 mio \u7d44\u307f\u5408\u308f\u305b\u305f\u3084\u3064\u3067\u3001tokio \u306b\u767a\u5c55\u7684\u306b\u89e3\u6d88\u3057\u305f\u306e\u3067\u3042\u308d\u3046\u3002\u540c\u3058\u4f5c\u8005\u3060\u3057\u3002\n\n## [coio-rs](https://github.com/zonyitoo/coio-rs)\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30b9\u30bf\u30a4\u30eb\u3002\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306f\u540c\u4f5c\u8005\u306e [context-rs](https://github.com/zonyitoo/context-rs)\n\n```\npub fn main() -> Result<(), String> {\n   coio::Scheduler::new().with_workers(4).run(|| {\n      let listener = coio::net::TcpListener::bind(\"127.0.0.1:10000\").unwrap();\n\n      loop {\n         let (mut conn, _addr) = try!(listener.accept().map_err(|e| format!(\"accept: {}\", e)));\n\n         coio::spawn(move || {\n            let mut buf = [0u8; 1024];\n            loop {\n               match conn.read(&mut buf[0..]) {\n                  Ok(0) => {\n                     println!(\"read: closed\");\n                     break;\n                  }\n                  Ok(n) => {\n                     println!(\"recv[{}]: {}\", n, std::str::from_utf8(&buf[0..n]).unwrap());\n                  }\n                  Err(e) => {\n                     println!(\"read: {}\", e);\n                     break;\n                  }\n               }\n            }\n         });\n      }\n   }).unwrap()\n}\n```\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f mioco \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002\n\u30b3\u30eb\u30fc\u30c1\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u540c\u3058\u3002\n\n# \u307e\u3068\u3081\nstd::net, net2, mio \u306e\u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30d5\u30a1\u30af\u30c8\u307d\u3044\u3002\nmio \u306e\u4e0a\u306b aio/future/coroutine/fsm \u30b9\u30bf\u30a4\u30eb\u306a\u3069\u8272\u3005\u306a crate \u304c\u3042\u308b\u611f\u3058\u304b\u306a\u3002\n\n", "tags": ["rust"]}