{"context": "\n\nspacemacs\u306e\u52d5\u4f5c\u3067\u82e6\u52b4\u3057\u306a\u3044\u305f\u3081\u306b\u306f\nemacs\u3092\u6700\u4f4e\u3067\u308224.4\u306b\u3057\u307e\u3059\u300224.3\u3068\u304b\u3060\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002linux\u306e\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3060\u3068emacs\u304c\u53e4\u3044\u5834\u5408\u3001\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5165\u308c\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002\u3064\u3044\u3067\u306b global \uff08helm-gtags\u3067\u4f7f\u3046\uff09\u3068\u304b\u4f7f\u3063\u3066\u308b\u5834\u5408\u3001\u3053\u3044\u3064\u3082\u6700\u65b0\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u5e78\u305b\u306b\u306a\u308c\u307e\u3059\uff085.xx\u7cfb\u306f\u907f\u3051\u308b\uff09\u3002\n\nproxy\u306e\u8a2d\u5b9a\u65b9\u6cd5\n\u3046\u3061\u306e\u4f1a\u793e\u306e\u3088\u3046\u306b\u8150\u308c\u5916\u9053\u306aproxy\u306e\u5834\u5408\u3001.spacemacs\u30d5\u30a1\u30a4\u30eb\u306espacemacs/init()\u306b\u3042\u308b\n\ndotspacemacs-elpa-https t\ndotspacemacs-elpa-timeout 5\n\n\u3092\n\ndotspacemacs-elpa-https nil\ndotspacemacs-elpa-timeout 20\n\n\u3068\u304b\u5024\u3092\u5909\u3048\u3066\u304a\u304d\u307e\u3059\u3002proxy\u8d8a\u3057\u3067\u6bce\u56de\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u78ba\u8a8d\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u3068\u304d\u306f\u3001\n\ndotspacemacs-check-for-update t\n\n\u306e\u5024\u3092 nil \u306b\u5909\u3048\u307e\u3059\u3002emacs\u306e\u8d77\u52d5\u3082\u65e9\u3044\u3057\u3002\n\n\u74b0\u5883\u5909\u6570http_proxy\u306e\u5024\u3092emacs\u306b\u53cd\u6620\u3059\u308b\u65b9\u6cd5\n\u74b0\u5883\u5909\u6570\u3067\u7d71\u4e00\u7684\u306bproxy\u306e\u5024\u3092\u66f8\u304d\u305f\u3044\u306e\u3067\u74b0\u5883\u5909\u6570 http_proxy\u3000\u306e\u5024\u3092emacs\u306e\u8a2d\u5b9a\u306b\u53cd\u6620\u3059\u308b\u305f\u3081\u306eemacs-lisp\u3092\u66f8\u304d\u307e\u3057\u305f\u3002 \u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306bproxy\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u3070\u3089\u307e\u304b\u308c\u3066\u66f8\u304b\u308c\u3066\u308b\u3068\u5909\u66f4\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u53cd\u6620\u306b\u82e6\u52b4\u3057\u307e\u3059\u3002\u4e00\u3064\u3067\u3082\u6e1b\u3089\u3057\u3066\u304a\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\nhttp://user:passwd@proxy_url:port \u306e\u5f62\u5f0f\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3092\u524d\u63d0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5225\u306bspacemacs\u3067\u306a\u304f\u3066\u3082\u666e\u901a\u306eemacs\u306einit.el\u306b\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\ndot.spacemacs\n(defun set-proxy ()\n  (when (getenv \"http_proxy\")\n    (cl-flet (\n           ;; get user:passwd entry from http_proxy environment var and base64-encode it.\n           (get-passwd-encode-string ()\n             (let* ((ev (getenv \"http_proxy\"))\n                    (x (decode-coding-string (url-unhex-string ev) 'utf-8))\n                    )\n               (if (not (equal x \"\"))\n                   (base64-encode-string\n                    (substring x (+ 2 (string-match \"//\" x)) (string-match \"@\" x))\n                    )\n                 nil)))\n           (get-proxy-url-string ()\n             (let* ((ev (getenv \"http_proxy\"))\n                    (x (decode-coding-string (url-unhex-string ev) 'utf-8))\n                    )\n               (if (not (equal x \"\"))\n                   (substring x (+ 1 (string-match \"@\" x)))\n               \"\"))) )\n    ;; proxy service var\n    (setq url-proxy-services `((\"no_proxy\" . \"^\\\\(localhost \\\\| 10.*\\\\)\")\n                               (\"http\"  . ,(get-proxy-url-string))\n                               (\"https\" . ,(get-proxy-url-string))\n                               ))\n\n\n\u3053\u3044\u3064\u3092.spacemacs\u306e\u4e2d\u306b\u66f8\u304d\u52a0\u3048\u3001.spacemacs\u306euser-init\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\ndot.spacemacs\n(defun dotspacemacs/user-init ()\n  \"Initialization function for user code.\nIt is called immediately after `dotspacemacs/init', before layer configuration\nexecutes.\n This function is mostly useful for variables that need to be set\nbefore packages are loaded. If you are unsure, you should try in setting them in\n`dotspacemacs/user-config' first.\"\n\n  (set-proxy)    ;; \u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u8ffd\u52a0\n\n  )\n\n\n# spacemacs\u306e\u52d5\u4f5c\u3067\u82e6\u52b4\u3057\u306a\u3044\u305f\u3081\u306b\u306f\nemacs\u3092\u6700\u4f4e\u3067\u308224.4\u306b\u3057\u307e\u3059\u300224.3\u3068\u304b\u3060\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002linux\u306e\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3060\u3068emacs\u304c\u53e4\u3044\u5834\u5408\u3001\u30bd\u30fc\u30b9\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5165\u308c\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002\u3064\u3044\u3067\u306b global \uff08helm-gtags\u3067\u4f7f\u3046\uff09\u3068\u304b\u4f7f\u3063\u3066\u308b\u5834\u5408\u3001\u3053\u3044\u3064\u3082\u6700\u65b0\u306b\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u5e78\u305b\u306b\u306a\u308c\u307e\u3059\uff085.xx\u7cfb\u306f\u907f\u3051\u308b\uff09\u3002\n\n# proxy\u306e\u8a2d\u5b9a\u65b9\u6cd5\n\u3046\u3061\u306e\u4f1a\u793e\u306e\u3088\u3046\u306b\u8150\u308c\u5916\u9053\u306aproxy\u306e\u5834\u5408\u3001.spacemacs\u30d5\u30a1\u30a4\u30eb\u306espacemacs/init()\u306b\u3042\u308b\n> dotspacemacs-elpa-https t\n> dotspacemacs-elpa-timeout 5\n\n\u3092\n> dotspacemacs-elpa-https nil\n> dotspacemacs-elpa-timeout 20\n\n\u3068\u304b\u5024\u3092\u5909\u3048\u3066\u304a\u304d\u307e\u3059\u3002proxy\u8d8a\u3057\u3067\u6bce\u56de\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u78ba\u8a8d\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u3068\u304d\u306f\u3001\n\n> dotspacemacs-check-for-update t\n\n\u306e\u5024\u3092 nil \u306b\u5909\u3048\u307e\u3059\u3002emacs\u306e\u8d77\u52d5\u3082\u65e9\u3044\u3057\u3002\n\n## \u74b0\u5883\u5909\u6570http_proxy\u306e\u5024\u3092emacs\u306b\u53cd\u6620\u3059\u308b\u65b9\u6cd5\n\n\u74b0\u5883\u5909\u6570\u3067\u7d71\u4e00\u7684\u306bproxy\u306e\u5024\u3092\u66f8\u304d\u305f\u3044\u306e\u3067\u74b0\u5883\u5909\u6570 http_proxy\u3000\u306e\u5024\u3092emacs\u306e\u8a2d\u5b9a\u306b\u53cd\u6620\u3059\u308b\u305f\u3081\u306eemacs-lisp\u3092\u66f8\u304d\u307e\u3057\u305f\u3002 \u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306bproxy\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u3070\u3089\u307e\u304b\u308c\u3066\u66f8\u304b\u308c\u3066\u308b\u3068\u5909\u66f4\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u53cd\u6620\u306b\u82e6\u52b4\u3057\u307e\u3059\u3002\u4e00\u3064\u3067\u3082\u6e1b\u3089\u3057\u3066\u304a\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\nhttp://user:passwd@proxy_url:port \u306e\u5f62\u5f0f\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3092\u524d\u63d0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5225\u306bspacemacs\u3067\u306a\u304f\u3066\u3082\u666e\u901a\u306eemacs\u306einit.el\u306b\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```el:dot.spacemacs\n(defun set-proxy ()\n  (when (getenv \"http_proxy\")\n    (cl-flet (\n           ;; get user:passwd entry from http_proxy environment var and base64-encode it.\n           (get-passwd-encode-string ()\n             (let* ((ev (getenv \"http_proxy\"))\n                    (x (decode-coding-string (url-unhex-string ev) 'utf-8))\n                    )\n               (if (not (equal x \"\"))\n                   (base64-encode-string\n                    (substring x (+ 2 (string-match \"//\" x)) (string-match \"@\" x))\n                    )\n                 nil)))\n           (get-proxy-url-string ()\n             (let* ((ev (getenv \"http_proxy\"))\n                    (x (decode-coding-string (url-unhex-string ev) 'utf-8))\n                    )\n               (if (not (equal x \"\"))\n                   (substring x (+ 1 (string-match \"@\" x)))\n               \"\"))) )\n    ;; proxy service var\n    (setq url-proxy-services `((\"no_proxy\" . \"^\\\\(localhost \\\\| 10.*\\\\)\")\n                               (\"http\"  . ,(get-proxy-url-string))\n                               (\"https\" . ,(get-proxy-url-string))\n                               ))\n```\n\n\u3053\u3044\u3064\u3092.spacemacs\u306e\u4e2d\u306b\u66f8\u304d\u52a0\u3048\u3001.spacemacs\u306euser-init\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```el:dot.spacemacs\n(defun dotspacemacs/user-init ()\n  \"Initialization function for user code.\nIt is called immediately after `dotspacemacs/init', before layer configuration\nexecutes.\n This function is mostly useful for variables that need to be set\nbefore packages are loaded. If you are unsure, you should try in setting them in\n`dotspacemacs/user-config' first.\"\n\n  (set-proxy)    ;; \u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u8ffd\u52a0\n\n  )\n```\n", "tags": ["Spacemacs", "Emacs"]}