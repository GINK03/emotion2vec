{"tags": ["RaspberryPi", "Linux", "kernel", "C\u8a00\u8a9e"], "context": "\n\n\u524d\u56de\ncgroup\u306e\u521d\u671f\u5316\u304b\u3089\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001setup_arch()\u3060\u3051\u3092\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u5bfe\u8c61\u7bc4\u56f2\n\ninit/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n        (\u7701\u7565)\n    setup_arch(&command_line);            //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u3060\u3051\n    mm_init_cpumask(&init_mm);\n    setup_command_line(command_line);\n    (\u7701\u7565)\n}\n\n\n\nsetup_arch\u5185\u306esetup_processor\u307e\u3067\nsetup_arch\u306f\u3001100\u884c\u8fd1\u3044\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\u3001\u5206\u5272\u3057\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\narch/arm/kernel/setup.c\nvoid __init setup_arch(char **cmdline_p)\n{\n    const struct machine_desc *mdesc;\n\n    setup_processor();\n        (\u7701\u7565)\n\n\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306emachine_desc\u69cb\u9020\u4f53\u306farch/arm/include/asm/mach/arch.h\u3067\u5b9a\u7fa9\u3055\u308c\u3001\n\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n\u7d9a\u304f\u51e6\u7406\u3067\u3042\u308bsetup_processor()\u306e\u5b9a\u7fa9\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\narch/arm/kernel/setup.c\nstatic void __init setup_processor(void)\n{\n    struct proc_info_list *list;\n\n    list = lookup_processor_type(read_cpuid_id());\n    if (!list) {\n        pr_err(\"CPU configuration botched (ID %08x), unable to continue.\\n\",\n               read_cpuid_id());\n        while (1);\n    }\n\n    cpu_name = list->cpu_name;\n    __cpu_architecture = __get_cpu_architecture();\n\n#ifdef MULTI_CPU\n    processor = *list->proc;\n#endif\n#ifdef MULTI_TLB\n    cpu_tlb = *list->tlb;\n#endif\n#ifdef MULTI_USER\n    cpu_user = *list->user;\n#endif\n#ifdef MULTI_CACHE\n    cpu_cache = *list->cache;\n#endif\n\n    pr_info(\"CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\\n\",\n        cpu_name, read_cpuid_id(), read_cpuid_id() & 15,\n        proc_arch[cpu_architecture()], get_cr());\n\n    snprintf(init_utsname()->machine, __NEW_UTS_LEN + 1, \"%s%c\",\n         list->arch_name, ENDIANNESS);\n    snprintf(elf_platform, ELF_PLATFORM_SIZE, \"%s%c\",\n         list->elf_name, ENDIANNESS);\n    elf_hwcap = list->elf_hwcap;\n\n    cpuid_init_hwcaps();\n\n#ifndef CONFIG_ARM_THUMB\n    elf_hwcap &= ~(HWCAP_THUMB | HWCAP_IDIVT);\n#endif\n#ifdef CONFIG_MMU\n    init_default_cache_policy(list->__cpu_mm_mmu_flags);\n#endif\n    erratum_a15_798181_init();\n\n    elf_hwcap_fixup();\n\n    cacheid_init();\n    cpu_init();\n}\n\n\nlookup_processor_type\u306f\u3001CPU\u306e\u8b58\u5225\u5b50\u3084CPU\u56fa\u6709\u306e\u95a2\u6570\u7fa4\u3001CPU\u56fa\u6709\u306e\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3092\n\u4fdd\u5b58\u3059\u308b\u69cb\u9020\u4f53(proc_info_list)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059(\u9593\u9055\u3048\u3066\u3044\u308b\u53ef\u80fd\u6027 \u5927)\u3002\nproc_info_list\u69cb\u9020\u4f53\u306f\u3001arch/arm/mm/proc-v7.S\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nif (!list)\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u3001\u6b63\u3057\u3044CPU\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u65e8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\nproc_info_list\u69cb\u9020\u4f53\u304b\u3089CPU\u540d\u3092\u53d6\u5f97\u3057\u3001\n__get_cpu_architecture()\u304b\u3089\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7a2e\u985e(CPU_ARCH_ARMv7)\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306b\u53d6\u5f97\u3059\u308b\u60c5\u5831\u306f\u3001\u4ee5\u4e0b\u306b\u793a\u3059\u95a2\u6570\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\u3000\u30fbCPU\u304c\u30a2\u30dc\u30fc\u30c8\u3057\u305f\u969b\u3084idle\u72b6\u614b\u306b\u79fb\u884c\u3059\u308b\u969b\u306e\u95a2\u6570\u306a\u3069(processor\u69cb\u9020\u4f53)\n\u3000\u30fb\u30e6\u30fc\u30b6\u30fb\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306eTLB\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u95a2\u6570(cpu_tlb_fns\u69cb\u9020\u4f53)\n\u3000\u30fbhigh page\u306e\u30b3\u30d4\u30fc\u30fb\u30af\u30ea\u30a2\u3092\u884c\u3046\u95a2\u6570(cpu_user_fns\u69cb\u9020\u4f53)\n\u3000\u30fbI-cache\u3084D-cache\u3092\u30af\u30ea\u30a2\u3059\u308b\u95a2\u6570\u306a\u3069(cpu_cache_fns\u69cb\u9020\u4f53)\n\u305d\u3057\u3066\u3001CPU\u60c5\u5831\u3092pr_notice()\u3001snprintf\u3067\u51fa\u529b\u3057\u305f\u5f8c\u306b\u3001\nproc_info_list\u69cb\u9020\u4f53\u304b\u3089elf_hwcap(unsigned int\u578b)\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u6b21\u306b\u3001cpuid_init_hwcaps()\u5185\u3067\u3001elf_hwcap\u3001elf_hwcap2\u306e\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eelf_hwcap\u306f\"Hardware Capabilities\"\u306e\u7565\u3067\u3001\u4ee5\u4e0b\u306e\u5f79\u5272\u3092\u6301\u3061\u307e\u3059(\u5ba3\u8a00\u90e8\u30b3\u30e1\u30f3\u30c8\u629c\u7c8b)\u3002\n\narch/arm/include/asm/hwcap.h\n/*\n * This yields a mask that user programs can use to figure out what\n * instruction set this cpu supports.\n */\n\n/*\n * \u3053\u306e\u5909\u6570(elf_hwcaps)\u306f\u3001\u3069\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u304c\u3053\u306eCPU\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\u3001\n * \u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30de\u30b9\u30af\u3068\u3057\u3066\u7528\u3044\u307e\u3059(\u610f\u8a33)\n */\n\n\n\u4e0a\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u88dc\u8db3\u3057\u307e\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30cf\u30fc\u30c9\u56fa\u6709\u306e\u547d\u4ee4\u3092\u6301\u3064\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u56fa\u6709\u306e\u547d\u4ee4\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408(\u30cf\u30fc\u30c9\u74b0\u5883\u304c\u7570\u306a\u308b\u5834\u5408)\u3001\u305d\u306e\u547d\u4ee4\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u597d\u307e\u3057\u304f\u306a\u3044\u6319\u52d5\u3092\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001elf_hwcap\u306e\u5024(\u30d3\u30c3\u30c8)\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u547d\u4ee4\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n(ORACLE\u306e\u8aac\u660e\u3092\u8aad\u3080\u9650\u308a\u3001Sun Studio compilers\u3067\u306f\u30ea\u30f3\u30af\u6bb5\u968e\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059)\n\u7d9a\u304f\u51e6\u7406\u3067\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\ninit_default_cache_policy()\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308bcachepolicy\u69cb\u9020\u4f53\u306f\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\narch/arm/mm/mmu.c\nstruct cachepolicy {\n    const char  policy[16];\n    unsigned int    cr_mask;\n    pmdval_t    pmd;\n    pteval_t    pte;\n    pteval_t    pte_s2;\n};\nstatic struct cachepolicy cache_policies[] __initdata = {\n    {\n        .policy     = \"uncached\",\n        .cr_mask    = CR_W|CR_C,\n        .pmd        = PMD_SECT_UNCACHED,\n        .pte        = L_PTE_MT_UNCACHED,\n        .pte_s2     = s2_policy(L_PTE_S2_MT_UNCACHED),\n    }\n        (\u7701\u7565\u3002\u3053\u306e\u914d\u5217\u3067\u306f\u3001\u5408\u8a08\uff15\u500b\u5206\u306e\u30dd\u30ea\u30b7\u30fc\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b)\n};\nvoid __init init_default_cache_policy(unsigned long pmd)\n{\n    int i;\n\n    initial_pmd_value = pmd;\n\n    pmd &= PMD_SECT_TEX(1) | PMD_SECT_BUFFERABLE | PMD_SECT_CACHEABLE;\n\n    for (i = 0; i < ARRAY_SIZE(cache_policies); i++)\n        if (cache_policies[i].pmd == pmd) {\n            cachepolicy = i;\n            break;\n        }\n\n    if (i == ARRAY_SIZE(cache_policies))\n        pr_err(\"ERROR: could not find cache policy\\n\");\n}\n\n\ninit_default_cache_policy\u3067\u306f\u3001__cpu_mm_mmu_flags(\u5f15\u6570pmd)\u3068\u4e00\u81f4\u3059\u308b\u30dd\u30ea\u30b7\u30fc\u3092\u63a2\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306epmd\u3068\u306fPage Middle Directory\u306e\u7565\u3067\u3001\u30dd\u30ea\u30b7\u30fc\u306f\u4ee5\u4e0b\u306e5\u3064\u3067\u3059\u3002\n(\u7591\u554f\u3068\u3057\u3066\u3001\u300cpmd\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u95a2\u9023\u6027\u300d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5f8c\u65e5\u8abf\u3079\u307e\u3059)\n\u3000\u30fbuncached\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u306a\u3044\n\u3000\u30fbbuffered\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\n\u3000\u30fbwritethrough\uff1a\u30e1\u30e2\u30ea\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u969b\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3082\u540c\u3058\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u3080\n\u3000\u30fbwriteback\uff1a\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u66f8\u304d\u8fbc\u307f\u3001\u7a7a\u304d\u6642\u9593\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u5bb9\u3092\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u8fbc\u3080\n\u3000\u30fbwritealloc\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u30df\u30b9\u30d2\u30c3\u30c8\u3057\u305f\u969b(\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u76ee\u7684\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408)\u3001\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000 \u8a72\u5f53\u3059\u308b\u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u30fb\u53c2\u7167\u3059\u308b\nerratum_a15_798181_init()\u306f\u3001Cortex-a15\u306e\u30a8\u30e9\u30c3\u30bf\u306b\u95a2\u3059\u308b\u51e6\u7406\u3067\u3059\u306e\u3067\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u5165\u793e\u5f8c\u306b\u521d\u3081\u3066\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u8aad\u3093\u3060\u6642\u306b\u3001\u30a8\u30e9\u30c3\u30bf\u306e\u6587\u5b57\u3092\u898b\u3064\u3051\u3066\u3001\n\u300c\u904a\u25ef\u622f\u25ef\u738b\u30ab\u30fc\u30c9\u3058\u3083\u3093\u300d\u3068\u30cb\u30e4\u3064\u304d\u307e\u3057\u305f\u3002\u300c\u30cf\u30fc\u30c9\u3082\u4e0d\u5177\u5408\u3042\u308b\u306e\u304b\uff01\u300d\u3068\u5f53\u305f\u308a\u524d\u306e\u4e8b\u3092\u8003\u3048\u305f\u308a\u3082\u3002\nelf_hwcap_fixup()\u3067\u306f\u3001CPU\u304cLDREX/STREX\u304a\u3088\u3073LDREXB/STREXB\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u3001\n\u30b9\u30ef\u30c3\u30d7\u306e\u4f7f\u7528\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u3001elf_hwcap\u306e\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eLDREX/STREX\u3068\u306f\u3001\u30ed\u30c3\u30af\u306a\u3057\u3067\u30a2\u30c8\u30df\u30c3\u30af\u306a\u30ed\u30fc\u30c9\u30fb\u30b9\u30c8\u30a2\u304c\u53ef\u80fd\u306a\u547d\u4ee4\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u74b0\u5883\u3067\u306f\u30a2\u30c8\u30df\u30c3\u30af\u306a\u64cd\u4f5c\u304c\u4fdd\u8a3c\u51fa\u6765\u306a\u3044\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059(ABA\u554f\u984c\u53c2\u7167)\u3002\ncacheid_init()\u3067\u306f\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3(\u6b63\u3057\u304f\u306f\u547d\u4ee4\u30bb\u30c3\u30c8)\u306b\u5408\u308f\u305b\u3066cacheid\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\narch/arm/kernel/setup.c\nstatic void __init cacheid_init(void)\n{\n    unsigned int arch = cpu_architecture();\n        (\u7701\u7565)\n\n    unsigned int cachetype = read_cpuid_cachetype();\n        if ((cachetype & (7 << 29)) == 4 << 29) {\n            /* ARMv7 register format */\n            arch = CPU_ARCH_ARMv7;\n            cacheid = CACHEID_VIPT_NONALIASING;\n            switch (cachetype & (3 << 14)) {\n            case (1 << 14):\n                cacheid |= CACHEID_ASID_TAGGED;\n                break;\n            case (3 << 14):\n                cacheid |= CACHEID_PIPT;\n                break;\n            }\n        (\u7701\u7565)\n}\n\n\n\u3053\u3053\u3067\u767b\u5834\u3059\u308b\"VIPT\"\u3001\"ASID\"\u3001\"PIPT\"\u306f\u3001\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u969b\u306e\u65b9\u6cd5\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u304f\u306a\u308b\u305f\u3081\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u300c\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7528\u3044\u3066\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u300d\u304c\u8003\u3048\u51fa\u3055\u308c\u305f\u305d\u3046\u3067\u3059\u3002\n\u3000\u30fbVIPT\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5(Virtually Indexed)\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u65b9\u6cd5(Physically Tagged)\n\u3000\u30fbASID\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068address space ID(ASID)\u306e\u65b9\u6cd5\n\u3000\u30fbPIPT\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u5f8c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5(Physically Indexed)\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u65b9\u6cd5\n\u6b21\u306b\u3001\u4ee5\u4e0b\u306b\u793a\u3059cpu_init()\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\narch/arm/kernel/setup.c\nstruct stack {\n    u32 irq[3];\n    u32 abt[3];\n    u32 und[3];\n    u32 fiq[3];\n} ____cacheline_aligned;\n\nvoid notrace cpu_init(void)\n{\n#ifndef CONFIG_CPU_V7M\n    unsigned int cpu = smp_processor_id();\n    struct stack *stk = &stacks[cpu];\n\n        (\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u30b3\u30e1\u30f3\u30c8\u3092\u7701\u7565)\n    set_my_cpu_offset(per_cpu_offset(cpu));\n    cpu_proc_init();\n        (\u30b3\u30e1\u30f3\u30c8\u304a\u3088\u3073THUMB\u547d\u4ee4\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u7701\u7565)\n\n    __asm__ (\n    \"msr    cpsr_c, %1\\n\\t\"\n    \"add    r14, %0, %2\\n\\t\"\n    \"mov    sp, r14\\n\\t\"\n    \"msr    cpsr_c, %3\\n\\t\"\n    \"add    r14, %0, %4\\n\\t\"\n    \"mov    sp, r14\\n\\t\"\n    \"msr    cpsr_c, %5\\n\\t\"\n    \"add    r14, %0, %6\\n\\t\"\n    \"mov    sp, r14\\n\\t\"\n    \"msr    cpsr_c, %7\\n\\t\"\n    \"add    r14, %0, %8\\n\\t\"\n    \"mov    sp, r14\\n\\t\"\n    \"msr    cpsr_c, %9\"\n        :\n        : \"r\" (stk),\n          PLC (PSR_F_BIT | PSR_I_BIT | IRQ_MODE),\n          \"I\" (offsetof(struct stack, irq[0])),\n          PLC (PSR_F_BIT | PSR_I_BIT | ABT_MODE),\n          \"I\" (offsetof(struct stack, abt[0])),\n          PLC (PSR_F_BIT | PSR_I_BIT | UND_MODE),\n          \"I\" (offsetof(struct stack, und[0])),\n          PLC (PSR_F_BIT | PSR_I_BIT | FIQ_MODE),\n          \"I\" (offsetof(struct stack, fiq[0])),\n          PLC (PSR_F_BIT | PSR_I_BIT | SVC_MODE)\n        : \"r14\");\n#endif\n}\n\n\nset_my_cpu_offset()\u3067\u306f\u3001\u7279\u6a29\u5c02\u7528\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b9\u30ec\u30c3\u30c9\u30ec\u30b8\u30b9\u30bf(TPIDRPRW)\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eTPIDRPRW\u3068\u306f\u30b7\u30b9\u30c6\u30e0\u5236\u5fa1\u30ec\u30b8\u30b9\u30bf\u306e\u4e00\u7a2e\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b9\u30ec\u30c3\u30c9ID\u30fb\u30d7\u30ed\u30bb\u30b9ID\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u306fCPU\u6bce\u306e\u56fa\u6709\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u306e\u300cCPU\u5468\u308a\u306e\u64cd\u4f5c\u300d\u304c\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5f8c\u65e5\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u90e8\u5206\u3067\u306f\u3001cpsr(Current Program Status Register)\u306e\u5024\u3092\u5909\u66f4\u3057\u3001\nIRQ(\u5272\u308a\u8fbc\u307f)\u3001ABORT(\u51e6\u7406\u306e\u4e2d\u65ad)\u3001UND(\u672a\u5b9a\u7fa9\u547d\u4ee4\u4f8b\u5916)\u3001FIQ(\u9ad8\u901f\u5272\u308a\u8fbc\u307f)\u306e\u305d\u308c\u305e\u308c\u304c\n\u767a\u751f\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u30b9\u30bf\u30c3\u30af(stack\u69cb\u9020\u4f53)\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\ncpsr_c\u3092\u66f8\u304d\u63db\u3048\u308b\u969b\u306b\u306f\u3001PLC\u306b\u3088\u308b\u30d3\u30c3\u30c8\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059(\u5165\u529b\u30aa\u30da\u30e9\u30f3\u30c9\u3092\"%\u756a\u53f7\"\u3067\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059)\u3002\n\u6700\u5f8c\u306e\"msr  cpsr_c, %9\"\u306b\u3088\u3063\u3066\u3001SVC(SuperVisor Call)\u304c\u4f7f\u7528\u3067\u304d\u308b\u30e2\u30fc\u30c9\u306b\u623b\u308a\u307e\u3059\u3002\n\nsetup_arch\u5185\u306e\u6700\u5f8c\u307e\u3067\n\narch/arm/kernel/setup.c\nvoid __init setup_arch(char **cmdline_p)\n{\n    const struct machine_desc *mdesc;\n\n    setup_processor();\n    mdesc = setup_machine_fdt(__atags_pointer);\n    if (!mdesc)\n        mdesc = setup_machine_tags(__atags_pointer, __machine_arch_type);\n    machine_desc = mdesc;\n    machine_name = mdesc->name;\n    dump_stack_set_arch_desc(\"%s\", mdesc->name);\n\n    if (mdesc->reboot_mode != REBOOT_HARD)\n        reboot_mode = mdesc->reboot_mode;\n\n    init_mm.start_code = (unsigned long) _text;\n    init_mm.end_code   = (unsigned long) _etext;\n    init_mm.end_data   = (unsigned long) _edata;\n    init_mm.brk    = (unsigned long) _end;\n\n    /* populate cmd_line too for later use, preserving boot_command_line */\n    strlcpy(cmd_line, boot_command_line, COMMAND_LINE_SIZE);\n    *cmdline_p = cmd_line;\n\n    parse_early_param();\n\n    early_paging_init(mdesc, lookup_processor_type(read_cpuid_id()));\n    setup_dma_zone(mdesc);\n    sanity_check_meminfo();\n    arm_memblock_init(mdesc);\n\n    paging_init(mdesc);\n    request_standard_resources(mdesc);\n\n    if (mdesc->restart)\n        arm_pm_restart = mdesc->restart;\n\n    unflatten_device_tree();\n\n    arm_dt_init_cpu_maps();\n    psci_init();\n\n    if (!is_smp())\n        hyp_mode_check();\n\n    reserve_crashkernel();\n    (\u4e00\u90e8\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7701\u7565)\n}\n\n\n\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308bmachine_desc\u69cb\u9020\u4f53\u306b\u5bfe\u3059\u308b\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001setup_machine_fdt()\u306b\u3088\u3063\u3066\u3001Device Tree\u304b\u3089\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u53d6\u5f97\u3057\u305f\u60c5\u5831\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570machine_desc\u3001machine_name\u3001reboot_mode\u306b\n\u30b3\u30d4\u30fc\u3057\u307e\u3059(\u7121\u99c4\u306a\u64cd\u4f5c\u306e\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u304c\u3001\u4f55\u304b\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b)\u3002\ninit_mm.start_code\u304b\u3089\u59cb\u307e\u308b\u51e6\u7406\u3067\u3059\u304c\u3001mm_struct\u69cb\u9020\u4f53\u3067\u3042\u308binit_mm\u306fmm/init-mm.c\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\n\u3053\u306e\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u306finclude/linux/mm_types.h\u306b\u8a18\u8f09\u3055\u308c\u3001\u3053\u306e\u5185\u5bb9\u3092\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3068\u306f\u3001\u30d7\u30ed\u30bb\u30b9\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u95a2\u3059\u308b\u5168\u3066\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002\n\u4eca\u56de\u306e\u51e6\u7406\u3067\u306f\u3001\u3053\u306e\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u306binit\u30d7\u30ed\u30bb\u30b9\u7528\u306e\u30e1\u30e2\u30ea\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\u8a73\u7d30\u306a\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u306f\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8(arch/arm/kernel/vmlinux.lds.S)\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u66f8\u304d\u8fbc\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u3000\u30fbstart_code\uff1a\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbend_code\uff1a\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbend_data\uff1a\u521d\u671f\u5024\u3042\u308a\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbbrk\uff1a\u73fe\u6642\u70b9\u3067\u306e\u30d2\u30fc\u30d7\u9818\u57df\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\nstrlcpy()\u3067\u306f\u3001boot_command_line\u306e\u5185\u5bb9\u3092cmd_line\u306b\u30b3\u30d4\u30fc(\u4fdd\u5b58)\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306farch/arm/kernel/setup.c\u3067\u3001static char __initdata cmd_line[COMMAND_LINE_SIZE];\ninit/main.c\u3067\u3001char __initdata boot_command_line[COMMAND_LINE_SIZE];\u3001\narch/arm/include/uapi/asm/setup.c\u3067\u3001#define COMMAND_LINE_SIZE 1024\u3068\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001setup_arch()\u306e\u5f15\u6570\u3067\u3042\u308bcmdline_p\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u307e\u3059(\u30dd\u30a4\u30f3\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u2026\u2026)\u3002\n\u3053\u3053\u3067\u66f8\u304d\u63db\u3048\u305f\u5024\u3092\u7528\u3044\u3066\u3001start_kernel()\u5185\u306esetup_command_line()\u3067\u521d\u671f\u8a2d\u5b9a\u3092\u884c\u3046\u3088\u3046\u3067\u3059\u3002\n(\u66ab\u304f\u5f8c\u306e\u51e6\u7406\u306a\u306e\u3067\u3001\u5225\u306e\u5834\u3067\u8aad\u307f\u89e3\u304d\u307e\u3059)\nparse_early_param()\u3067\u306f\u3001early\u30d5\u30e9\u30b0\u304c\u3064\u3044\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\nearly_paging_init()\u3067\u306f\u3001LPAE(Large Physical Address Extension)\u30674GB\u4ee5\u4e0a\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\n\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308a\u76f4\u3059\u3088\u3046\u3067\u3059(\u8aad\u307f\u304d\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u8a73\u3057\u3044\u8a18\u8ff0\u306f\u5f8c\u65e5\u306b\u8a18\u8f09\u3057\u307e\u3059)\u3002\nrequest_standard_resources()\u3067\u306f\u3001\u5404\u30e1\u30e2\u30ea\u8cc7\u6e90\u306e\u767b\u9332\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059(\u4ee5\u4e0b\u3001\u5b9a\u7fa9)\u3002\n\narch/arm/kernel/setup.c\n/*\n * Standard memory resources\n */\nstatic struct resource mem_res[] = {\n    {\n        .name = \"Video RAM\",\n        .start = 0,\n        .end = 0,\n        .flags = IORESOURCE_MEM\n    },\n    {\n        .name = \"Kernel code\",\n        .start = 0,\n        .end = 0,\n        .flags = IORESOURCE_MEM\n    },\n    {\n        .name = \"Kernel data\",\n        .start = 0,\n        .end = 0,\n        .flags = IORESOURCE_MEM\n    }\n};\n\n#define video_ram   mem_res[0]\n#define kernel_code mem_res[1]\n#define kernel_data mem_res[2]\n\nstatic void __init request_standard_resources(const struct machine_desc *mdesc)\n{\n    struct memblock_region *region;\n    struct resource *res;\n\n    kernel_code.start   = virt_to_phys(_text);\n    kernel_code.end     = virt_to_phys(_etext - 1);\n    kernel_data.start   = virt_to_phys(_sdata);\n    kernel_data.end     = virt_to_phys(_end - 1);\n\n    for_each_memblock(memory, region) {\n        res = memblock_virt_alloc(sizeof(*res), 0);\n        res->name  = \"System RAM\";\n        res->start = __pfn_to_phys(memblock_region_memory_base_pfn(region));\n        res->end = __pfn_to_phys(memblock_region_memory_end_pfn(region)) - 1;\n        res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;\n\n        request_resource(&iomem_resource, res);\n\n        if (kernel_code.start >= res->start &&\n            kernel_code.end <= res->end)\n            request_resource(res, &kernel_code);\n        if (kernel_data.start >= res->start &&\n            kernel_data.end <= res->end)\n            request_resource(res, &kernel_data);\n    }\n\n    if (mdesc->video_start) {\n        video_ram.start = mdesc->video_start;\n        video_ram.end   = mdesc->video_end;\n        request_resource(&iomem_resource, &video_ram);\n    }\n\n    /*\n     * Some machines don't have the possibility of ever\n     * possessing lp0, lp1 or lp2\n     */\n    if (mdesc->reserve_lp0)\n        request_resource(&ioport_resource, &lp0);\n    if (mdesc->reserve_lp1)\n        request_resource(&ioport_resource, &lp1);\n    if (mdesc->reserve_lp2)\n        request_resource(&ioport_resource, &lp2);\n}\n\n\n\u6700\u521d\u306ekernel_code\u3092\u66f8\u304d\u63db\u3048\u308b\u51e6\u7406\u306f\u3001resource\u69cb\u9020\u4f53\u306e\u521d\u671f\u5316\u51e6\u7406\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\nresource\u69cb\u9020\u4f53\u306f\u30c7\u30d0\u30a4\u30b9\u306b\u5272\u308a\u5f53\u3066\u305fI/O\u8cc7\u6e90(\u30dd\u30fc\u30c8)\u3084\u30e1\u30e2\u30ea\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3001\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\ninclude/linux/ioport.h\nstruct resource {\n    resource_size_t start; //\u8cc7\u6e90\u7bc4\u56f2\u306e\u5148\u982d\n    resource_size_t end;   //\u8cc7\u6e90\u7bc4\u56f2\u306e\u672b\u5c3e\n    const char *name;      //\u8cc7\u6e90\u6240\u6709\u8005\u306e\u8aac\u660e\n    unsigned long flags;   //\u5404\u7a2e\u30d5\u30e9\u30b0\n    struct resource *parent, *sibling, *child;  //\u8cc7\u6e90\u30c4\u30ea\u30fc\u4e2d\u306e\u89aa\u3001\u5b50\u3001\u6b21\u306e\u8cc7\u6e90\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n};\n\n\nkernel_code\u306e\u521d\u671f\u5316\u3067\u306f\u3001virt_to_phys\u30de\u30af\u30ed\u306e\u4eee\u60f3-\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u5909\u63db\u3092\u7528\u3044\u3066\u3001\n.text\u3068.data\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3067\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306e\u51e6\u7406\u5168\u3066\u306frequest_resource()\u306b\u3088\u3063\u3066\u3001\u5404\u30e1\u30e2\u30ea\u8cc7\u6e90\u306e\u767b\u9332\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\nunflatten_device_tree()\u3067\u306f\u3001Device Tree\u3092\u7528\u3044\u3066\u3001\ndevice_node\u69cb\u9020\u4f53(\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831)\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\ninclude/linux/of.h\nstruct device_node {\n    const char *name;\n    const char *type;\n    phandle phandle;\n    const char *full_name;\n    struct fwnode_handle fwnode;\n\n    struct  property *properties;\n    struct  property *deadprops;    /* removed properties */\n    struct  device_node *parent;\n    struct  device_node *child;\n    struct  device_node *sibling;\n    struct  kobject kobj;\n    unsigned long _flags;\n    void    *data;\n#if defined(CONFIG_SPARC)\n    const char *path_component_name;\n    unsigned int unique_id;\n    struct of_irq_controller *irq_trans;\n#endif\n};\n\n\n\u300c\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u306a\u306e\u306b\u3001\u30ce\u30fc\u30c9?\u300d\u3068\u4e0d\u601d\u8b70\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u7a2e\u5468\u8fba\u6a5f\u5668\u3068\u4e00\u7dd2\u306b\u3001\n\u30dc\u30fc\u30c9\u81ea\u4f53\u3082\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u8003\u3048\u3066\u307f\u308c\u3070\u3001\u30dc\u30fc\u30c9\u3060\u3051\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u3082\u7121\u3044\u3067\u3059\u306d\u3002\n\u540c\u69d8\u306b\u3001arm_dt_init_cpu_maps()\u3001psci_init()\u3067\u3082\u3001\nCPU\u60c5\u5831\u3068PSCI\u60c5\u5831(Power State Coordination Interface)\u3092Device_node\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u3053\u3067\u306ePSCI\u3068\u306f\u3001\u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3001CPU\u30b3\u30a2\u3092idle\u72b6\u614b\u306b\u3055\u305b\u305f\u308a\u3001\nCPU\u306e\u96fb\u6e90\u3092ON/OFF\u72b6\u614b\u306e\u5207\u308a\u66ff\u3048\u3001\u30b5\u30b9\u30da\u30f3\u30c9\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\u3002\nreserve_crashkernel()\u3067\u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u3001kdump\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30e1\u30e2\u30ea\u306f\u3001kdump\u304cLinux Kernel\u306e\u30af\u30e9\u30c3\u30b7\u30e5\u539f\u56e0\u3092\u793a\u3059\u60c5\u5831(vmcore)\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3001\n\u305d\u306e\u30b5\u30a4\u30ba\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067crashkernel=<size>(\u30c7\u30d5\u30a9\u30eb\u30c8=128MB)\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067\u3001setup_arch()\u306e\u51e6\u7406\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n\u6b21\u56de\n\u672a\u5b9a\nRaspberry Pi Computer Architecture Essentials\u3092\u8cfc\u5165\u3057\u305f\u306e\u3067\u3001\n\u66ab\u304f\u306f\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u8aad\u3080\u6642\u9593\u304c\u53d6\u308c\u307e\u305b\u3093\u3002\n\n\u53c2\u8003\nCPU cache\n##\u524d\u56de\n[cgroup\u306e\u521d\u671f\u5316\u304b\u3089\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067](http://qiita.com/Mogura1215/items/c07dd13346a7f74eb98b)\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001setup_arch()\u3060\u3051\u3092\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n##\u4eca\u56de\u306e\u5bfe\u8c61\u7bc4\u56f2\n```init/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n        (\u7701\u7565)\n\tsetup_arch(&command_line);            //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u3060\u3051\n\tmm_init_cpumask(&init_mm);\n\tsetup_command_line(command_line);\n\t(\u7701\u7565)\n}\n```\n\n##setup_arch\u5185\u306esetup_processor\u307e\u3067\nsetup_arch\u306f\u3001100\u884c\u8fd1\u3044\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\u3001\u5206\u5272\u3057\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n```arch/arm/kernel/setup.c\nvoid __init setup_arch(char **cmdline_p)\n{\n\tconst struct machine_desc *mdesc;\n\n\tsetup_processor();\n        (\u7701\u7565)\n```\n\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306emachine_desc\u69cb\u9020\u4f53\u306f`arch/arm/include/asm/mach/arch.h`\u3067\u5b9a\u7fa9\u3055\u308c\u3001\n\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n\u7d9a\u304f\u51e6\u7406\u3067\u3042\u308bsetup_processor()\u306e\u5b9a\u7fa9\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```arch/arm/kernel/setup.c\nstatic void __init setup_processor(void)\n{\n\tstruct proc_info_list *list;\n\n\tlist = lookup_processor_type(read_cpuid_id());\n\tif (!list) {\n\t\tpr_err(\"CPU configuration botched (ID %08x), unable to continue.\\n\",\n\t\t       read_cpuid_id());\n\t\twhile (1);\n\t}\n\n\tcpu_name = list->cpu_name;\n\t__cpu_architecture = __get_cpu_architecture();\n\n#ifdef MULTI_CPU\n\tprocessor = *list->proc;\n#endif\n#ifdef MULTI_TLB\n\tcpu_tlb = *list->tlb;\n#endif\n#ifdef MULTI_USER\n\tcpu_user = *list->user;\n#endif\n#ifdef MULTI_CACHE\n\tcpu_cache = *list->cache;\n#endif\n\n\tpr_info(\"CPU: %s [%08x] revision %d (ARMv%s), cr=%08lx\\n\",\n\t\tcpu_name, read_cpuid_id(), read_cpuid_id() & 15,\n\t\tproc_arch[cpu_architecture()], get_cr());\n\n\tsnprintf(init_utsname()->machine, __NEW_UTS_LEN + 1, \"%s%c\",\n\t\t list->arch_name, ENDIANNESS);\n\tsnprintf(elf_platform, ELF_PLATFORM_SIZE, \"%s%c\",\n\t\t list->elf_name, ENDIANNESS);\n\telf_hwcap = list->elf_hwcap;\n\n\tcpuid_init_hwcaps();\n\n#ifndef CONFIG_ARM_THUMB\n\telf_hwcap &= ~(HWCAP_THUMB | HWCAP_IDIVT);\n#endif\n#ifdef CONFIG_MMU\n\tinit_default_cache_policy(list->__cpu_mm_mmu_flags);\n#endif\n\terratum_a15_798181_init();\n\n\telf_hwcap_fixup();\n\n\tcacheid_init();\n\tcpu_init();\n}\n```\n\nlookup_processor_type\u306f\u3001CPU\u306e\u8b58\u5225\u5b50\u3084CPU\u56fa\u6709\u306e\u95a2\u6570\u7fa4\u3001CPU\u56fa\u6709\u306e\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3092\n\u4fdd\u5b58\u3059\u308b\u69cb\u9020\u4f53(proc_info_list)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059(\u9593\u9055\u3048\u3066\u3044\u308b\u53ef\u80fd\u6027 \u5927)\u3002\nproc_info_list\u69cb\u9020\u4f53\u306f\u3001`arch/arm/mm/proc-v7.S`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nif (!list)\u306e\u30d6\u30ed\u30c3\u30af\u3067\u306f\u3001\u6b63\u3057\u3044CPU\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u306a\u304b\u3063\u305f\u65e8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\nproc_info_list\u69cb\u9020\u4f53\u304b\u3089CPU\u540d\u3092\u53d6\u5f97\u3057\u3001\n__get_cpu_architecture()\u304b\u3089\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7a2e\u985e([CPU\\_ARCH\\_ARMv7](http://www.wdic.org/w/SCI/ARMv7))\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306b\u53d6\u5f97\u3059\u308b\u60c5\u5831\u306f\u3001\u4ee5\u4e0b\u306b\u793a\u3059\u95a2\u6570\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\u3000\u30fbCPU\u304c[\u30a2\u30dc\u30fc\u30c8](http://www.sophia-it.com/content/%E3%82%A2%E3%83%9C%E3%83%BC%E3%83%88)\u3057\u305f\u969b\u3084[idle](http://www.sophia-it.com/content/%E3%82%A2%E3%82%A4%E3%83%89%E3%83%AB)\u72b6\u614b\u306b\u79fb\u884c\u3059\u308b\u969b\u306e\u95a2\u6570\u306a\u3069(processor\u69cb\u9020\u4f53)\n\u3000\u30fb\u30e6\u30fc\u30b6\u30fb\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306e[TLB](http://www.weblio.jp/content/TLB)\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u95a2\u6570(cpu\\_tlb\\_fns\u69cb\u9020\u4f53)\n\u3000\u30fbhigh page\u306e\u30b3\u30d4\u30fc\u30fb\u30af\u30ea\u30a2\u3092\u884c\u3046\u95a2\u6570(cpu\\_user\\_fns\u69cb\u9020\u4f53)\n\u3000\u30fbI-cache\u3084D-cache\u3092\u30af\u30ea\u30a2\u3059\u308b\u95a2\u6570\u306a\u3069(cpu\\_cache\\_fns\u69cb\u9020\u4f53)\n\n\u305d\u3057\u3066\u3001CPU\u60c5\u5831\u3092pr_notice()\u3001snprintf\u3067\u51fa\u529b\u3057\u305f\u5f8c\u306b\u3001\nproc\\_info\\_list\u69cb\u9020\u4f53\u304b\u3089elf\\_hwcap(unsigned int\u578b)\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u6b21\u306b\u3001cpuid\\_init\\_hwcaps()\u5185\u3067\u3001elf\\_hwcap\u3001elf\\_hwcap2\u306e\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eelf\\_hwcap\u306f\"Hardware Capabilities\"\u306e\u7565\u3067\u3001\u4ee5\u4e0b\u306e\u5f79\u5272\u3092\u6301\u3061\u307e\u3059(\u5ba3\u8a00\u90e8\u30b3\u30e1\u30f3\u30c8\u629c\u7c8b)\u3002\n\n```arch/arm/include/asm/hwcap.h\n/*\n * This yields a mask that user programs can use to figure out what\n * instruction set this cpu supports.\n */\n\n/*\n * \u3053\u306e\u5909\u6570(elf_hwcaps)\u306f\u3001\u3069\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u304c\u3053\u306eCPU\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\u3001\n * \u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30de\u30b9\u30af\u3068\u3057\u3066\u7528\u3044\u307e\u3059(\u610f\u8a33)\n */\n```\n\u4e0a\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u88dc\u8db3\u3057\u307e\u3059\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30cf\u30fc\u30c9\u56fa\u6709\u306e\u547d\u4ee4\u3092\u6301\u3064\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u56fa\u6709\u306e\u547d\u4ee4\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408(\u30cf\u30fc\u30c9\u74b0\u5883\u304c\u7570\u306a\u308b\u5834\u5408)\u3001\u305d\u306e\u547d\u4ee4\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u597d\u307e\u3057\u304f\u306a\u3044\u6319\u52d5\u3092\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001elf\\_hwcap\u306e\u5024(\u30d3\u30c3\u30c8)\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u547d\u4ee4\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n([ORACLE\u306e\u8aac\u660e](http://www.oracle.com/technetwork/server-storage/solaris/hwcap-modification-139536.html)\u3092\u8aad\u3080\u9650\u308a\u3001Sun Studio compilers\u3067\u306f\u30ea\u30f3\u30af\u6bb5\u968e\u3067\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059)\n\n\u7d9a\u304f\u51e6\u7406\u3067\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\ninit_default_cache_policy()\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308bcachepolicy\u69cb\u9020\u4f53\u306f\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```arch/arm/mm/mmu.c\nstruct cachepolicy {\n\tconst char\tpolicy[16];\n\tunsigned int\tcr_mask;\n\tpmdval_t\tpmd;\n\tpteval_t\tpte;\n\tpteval_t\tpte_s2;\n};\nstatic struct cachepolicy cache_policies[] __initdata = {\n\t{\n\t\t.policy\t\t= \"uncached\",\n\t\t.cr_mask\t= CR_W|CR_C,\n\t\t.pmd\t\t= PMD_SECT_UNCACHED,\n\t\t.pte\t\t= L_PTE_MT_UNCACHED,\n\t\t.pte_s2\t\t= s2_policy(L_PTE_S2_MT_UNCACHED),\n\t}\n        (\u7701\u7565\u3002\u3053\u306e\u914d\u5217\u3067\u306f\u3001\u5408\u8a08\uff15\u500b\u5206\u306e\u30dd\u30ea\u30b7\u30fc\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b)\n};\nvoid __init init_default_cache_policy(unsigned long pmd)\n{\n\tint i;\n\n\tinitial_pmd_value = pmd;\n\n\tpmd &= PMD_SECT_TEX(1) | PMD_SECT_BUFFERABLE | PMD_SECT_CACHEABLE;\n\n\tfor (i = 0; i < ARRAY_SIZE(cache_policies); i++)\n\t\tif (cache_policies[i].pmd == pmd) {\n\t\t\tcachepolicy = i;\n\t\t\tbreak;\n\t\t}\n\n\tif (i == ARRAY_SIZE(cache_policies))\n\t\tpr_err(\"ERROR: could not find cache policy\\n\");\n}\n```\ninit_default_cache_policy\u3067\u306f\u3001__cpu_mm_mmu_flags(\u5f15\u6570pmd)\u3068\u4e00\u81f4\u3059\u308b\u30dd\u30ea\u30b7\u30fc\u3092\u63a2\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306epmd\u3068\u306fPage Middle Directory\u306e\u7565\u3067\u3001\u30dd\u30ea\u30b7\u30fc\u306f\u4ee5\u4e0b\u306e5\u3064\u3067\u3059\u3002\n(\u7591\u554f\u3068\u3057\u3066\u3001\u300cpmd\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u95a2\u9023\u6027\u300d\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5f8c\u65e5\u8abf\u3079\u307e\u3059)\n\u3000\u30fbuncached\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u306a\u3044\n\u3000\u30fbbuffered\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\n\u3000\u30fbwritethrough\uff1a\u30e1\u30e2\u30ea\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u969b\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3082\u540c\u3058\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u3080\n\u3000\u30fbwriteback\uff1a\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u66f8\u304d\u8fbc\u307f\u3001\u7a7a\u304d\u6642\u9593\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u5bb9\u3092\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u8fbc\u3080\n\u3000\u30fbwritealloc\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u30df\u30b9\u30d2\u30c3\u30c8\u3057\u305f\u969b(\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u76ee\u7684\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408)\u3001\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000 \u8a72\u5f53\u3059\u308b\u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u30fb\u53c2\u7167\u3059\u308b\n\nerratum_a15_798181_init()\u306f\u3001Cortex-a15\u306e[\u30a8\u30e9\u30c3\u30bf](http://e-words.jp/w/%E3%82%A8%E3%83%A9%E3%83%83%E3%82%BF.html)\u306b\u95a2\u3059\u308b\u51e6\u7406\u3067\u3059\u306e\u3067\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u5165\u793e\u5f8c\u306b\u521d\u3081\u3066\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u8aad\u3093\u3060\u6642\u306b\u3001\u30a8\u30e9\u30c3\u30bf\u306e\u6587\u5b57\u3092\u898b\u3064\u3051\u3066\u3001\n\u300c\u904a\u25ef\u622f\u25ef\u738b\u30ab\u30fc\u30c9\u3058\u3083\u3093\u300d\u3068\u30cb\u30e4\u3064\u304d\u307e\u3057\u305f\u3002\u300c\u30cf\u30fc\u30c9\u3082\u4e0d\u5177\u5408\u3042\u308b\u306e\u304b\uff01\u300d\u3068\u5f53\u305f\u308a\u524d\u306e\u4e8b\u3092\u8003\u3048\u305f\u308a\u3082\u3002\n\nelf_hwcap_fixup()\u3067\u306f\u3001CPU\u304cLDREX/STREX\u304a\u3088\u3073LDREXB/STREXB\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u3001\n[\u30b9\u30ef\u30c3\u30d7](http://e-words.jp/w/%E3%82%B9%E3%83%AF%E3%83%83%E3%83%97.html)\u306e\u4f7f\u7528\u3092\u907f\u3051\u308b\u3088\u3046\u306b\u3001elf_hwcap\u306e\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eLDREX/STREX\u3068\u306f\u3001\u30ed\u30c3\u30af\u306a\u3057\u3067[\u30a2\u30c8\u30df\u30c3\u30af](http://www.wdic.org/w/TECH/%E3%82%A2%E3%83%88%E3%83%9F%E3%83%83%E3%82%AF)\u306a\u30ed\u30fc\u30c9\u30fb\u30b9\u30c8\u30a2\u304c\u53ef\u80fd\u306a\u547d\u4ee4\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u74b0\u5883\u3067\u306f\u30a2\u30c8\u30df\u30c3\u30af\u306a\u64cd\u4f5c\u304c\u4fdd\u8a3c\u51fa\u6765\u306a\u3044\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059([ABA\u554f\u984c](https://ja.wikipedia.org/wiki/ABA%E5%95%8F%E9%A1%8C)\u53c2\u7167)\u3002\n\ncacheid_init()\u3067\u306f\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3(\u6b63\u3057\u304f\u306f\u547d\u4ee4\u30bb\u30c3\u30c8)\u306b\u5408\u308f\u305b\u3066cacheid\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n```arch/arm/kernel/setup.c\nstatic void __init cacheid_init(void)\n{\n\tunsigned int arch = cpu_architecture();\n        (\u7701\u7565)\n\t\n\tunsigned int cachetype = read_cpuid_cachetype();\n\t\tif ((cachetype & (7 << 29)) == 4 << 29) {\n\t\t\t/* ARMv7 register format */\n\t\t\tarch = CPU_ARCH_ARMv7;\n\t\t\tcacheid = CACHEID_VIPT_NONALIASING;\n\t\t\tswitch (cachetype & (3 << 14)) {\n\t\t\tcase (1 << 14):\n\t\t\t\tcacheid |= CACHEID_ASID_TAGGED;\n\t\t\t\tbreak;\n\t\t\tcase (3 << 14):\n\t\t\t\tcacheid |= CACHEID_PIPT;\n\t\t\t\tbreak;\n\t\t\t}\n        (\u7701\u7565)\n}\n```\n\u3053\u3053\u3067\u767b\u5834\u3059\u308b\"VIPT\"\u3001\"ASID\"\u3001\"PIPT\"\u306f\u3001\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u969b\u306e\u65b9\u6cd5\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u5b9f\u884c\u901f\u5ea6\u304c\u9045\u304f\u306a\u308b\u305f\u3081\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u300c\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7528\u3044\u3066\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u300d\u304c\u8003\u3048\u51fa\u3055\u308c\u305f\u305d\u3046\u3067\u3059\u3002\n\n\u3000\u30fbVIPT\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5(Virtually Indexed)\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u65b9\u6cd5(Physically Tagged)\n\u3000\u30fbASID\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068address space ID(ASID)\u306e\u65b9\u6cd5\n\u3000\u30fbPIPT\u306f\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u5f8c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u53c2\u7167\u3059\u308b\u65b9\u6cd5(Physically Indexed)\u3001\n\u3000\u3000\u304b\u3064\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30bf\u30b0\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u304c\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u65b9\u6cd5\n\n\u6b21\u306b\u3001\u4ee5\u4e0b\u306b\u793a\u3059cpu_init()\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n```arch/arm/kernel/setup.c\nstruct stack {\n\tu32 irq[3];\n\tu32 abt[3];\n\tu32 und[3];\n\tu32 fiq[3];\n} ____cacheline_aligned;\n\nvoid notrace cpu_init(void)\n{\n#ifndef CONFIG_CPU_V7M\n\tunsigned int cpu = smp_processor_id();\n\tstruct stack *stk = &stacks[cpu];\n\n        (\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u304a\u3088\u3073\u30b3\u30e1\u30f3\u30c8\u3092\u7701\u7565)\n\tset_my_cpu_offset(per_cpu_offset(cpu));\n\tcpu_proc_init();\n        (\u30b3\u30e1\u30f3\u30c8\u304a\u3088\u3073THUMB\u547d\u4ee4\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u7701\u7565)\n\n\t__asm__ (\n\t\"msr\tcpsr_c, %1\\n\\t\"\n\t\"add\tr14, %0, %2\\n\\t\"\n\t\"mov\tsp, r14\\n\\t\"\n\t\"msr\tcpsr_c, %3\\n\\t\"\n\t\"add\tr14, %0, %4\\n\\t\"\n\t\"mov\tsp, r14\\n\\t\"\n\t\"msr\tcpsr_c, %5\\n\\t\"\n\t\"add\tr14, %0, %6\\n\\t\"\n\t\"mov\tsp, r14\\n\\t\"\n\t\"msr\tcpsr_c, %7\\n\\t\"\n\t\"add\tr14, %0, %8\\n\\t\"\n\t\"mov\tsp, r14\\n\\t\"\n\t\"msr\tcpsr_c, %9\"\n\t    :\n\t    : \"r\" (stk),\n\t      PLC (PSR_F_BIT | PSR_I_BIT | IRQ_MODE),\n\t      \"I\" (offsetof(struct stack, irq[0])),\n\t      PLC (PSR_F_BIT | PSR_I_BIT | ABT_MODE),\n\t      \"I\" (offsetof(struct stack, abt[0])),\n\t      PLC (PSR_F_BIT | PSR_I_BIT | UND_MODE),\n\t      \"I\" (offsetof(struct stack, und[0])),\n\t      PLC (PSR_F_BIT | PSR_I_BIT | FIQ_MODE),\n\t      \"I\" (offsetof(struct stack, fiq[0])),\n\t      PLC (PSR_F_BIT | PSR_I_BIT | SVC_MODE)\n\t    : \"r14\");\n#endif\n}\n```\n\nset_my_cpu_offset()\u3067\u306f\u3001\u7279\u6a29\u5c02\u7528\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b9\u30ec\u30c3\u30c9\u30ec\u30b8\u30b9\u30bf(TPIDRPRW)\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306eTPIDRPRW\u3068\u306f\u30b7\u30b9\u30c6\u30e0\u5236\u5fa1\u30ec\u30b8\u30b9\u30bf\u306e\u4e00\u7a2e\u3067\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b9\u30ec\u30c3\u30c9ID\u30fb\u30d7\u30ed\u30bb\u30b9ID\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u306fCPU\u6bce\u306e\u56fa\u6709\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u969b\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u306e\u300cCPU\u5468\u308a\u306e\u64cd\u4f5c\u300d\u304c\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5f8c\u65e5\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u90e8\u5206\u3067\u306f\u3001cpsr(Current Program Status Register)\u306e\u5024\u3092\u5909\u66f4\u3057\u3001\nIRQ(\u5272\u308a\u8fbc\u307f)\u3001ABORT(\u51e6\u7406\u306e\u4e2d\u65ad)\u3001UND(\u672a\u5b9a\u7fa9\u547d\u4ee4\u4f8b\u5916)\u3001FIQ(\u9ad8\u901f\u5272\u308a\u8fbc\u307f)\u306e\u305d\u308c\u305e\u308c\u304c\n\u767a\u751f\u3057\u305f\u969b\u306b\u4f7f\u7528\u3059\u308b\u30b9\u30bf\u30c3\u30af(stack\u69cb\u9020\u4f53)\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\ncpsr_c\u3092\u66f8\u304d\u63db\u3048\u308b\u969b\u306b\u306f\u3001PLC\u306b\u3088\u308b\u30d3\u30c3\u30c8\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059(\u5165\u529b\u30aa\u30da\u30e9\u30f3\u30c9\u3092\"%\u756a\u53f7\"\u3067\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059)\u3002\n\u6700\u5f8c\u306e`\"msr\tcpsr_c, %9\"`\u306b\u3088\u3063\u3066\u3001[SVC(SuperVisor Call)](http://www.sophia-it.com/content/%E3%82%B9%E3%83%BC%E3%83%91%E3%83%90%E3%82%A4%E3%82%B6%E3%82%B3%E3%83%BC%E3%83%AB)\u304c\u4f7f\u7528\u3067\u304d\u308b\u30e2\u30fc\u30c9\u306b\u623b\u308a\u307e\u3059\u3002\n\n##setup_arch\u5185\u306e\u6700\u5f8c\u307e\u3067\n\n```arch/arm/kernel/setup.c\nvoid __init setup_arch(char **cmdline_p)\n{\n\tconst struct machine_desc *mdesc;\n\n\tsetup_processor();\n\tmdesc = setup_machine_fdt(__atags_pointer);\n\tif (!mdesc)\n\t\tmdesc = setup_machine_tags(__atags_pointer, __machine_arch_type);\n\tmachine_desc = mdesc;\n\tmachine_name = mdesc->name;\n\tdump_stack_set_arch_desc(\"%s\", mdesc->name);\n\n\tif (mdesc->reboot_mode != REBOOT_HARD)\n\t\treboot_mode = mdesc->reboot_mode;\n\n\tinit_mm.start_code = (unsigned long) _text;\n\tinit_mm.end_code   = (unsigned long) _etext;\n\tinit_mm.end_data   = (unsigned long) _edata;\n\tinit_mm.brk\t   = (unsigned long) _end;\n\n\t/* populate cmd_line too for later use, preserving boot_command_line */\n\tstrlcpy(cmd_line, boot_command_line, COMMAND_LINE_SIZE);\n\t*cmdline_p = cmd_line;\n\n\tparse_early_param();\n\n\tearly_paging_init(mdesc, lookup_processor_type(read_cpuid_id()));\n\tsetup_dma_zone(mdesc);\n\tsanity_check_meminfo();\n\tarm_memblock_init(mdesc);\n\n\tpaging_init(mdesc);\n\trequest_standard_resources(mdesc);\n\n\tif (mdesc->restart)\n\t\tarm_pm_restart = mdesc->restart;\n\n\tunflatten_device_tree();\n\n\tarm_dt_init_cpu_maps();\n\tpsci_init();\n\n\tif (!is_smp())\n\t\thyp_mode_check();\n\n\treserve_crashkernel();\n    (\u4e00\u90e8\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u7701\u7565)\n}\n```\n\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308bmachine_desc\u69cb\u9020\u4f53\u306b\u5bfe\u3059\u308b\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001setup_machine_fdt()\u306b\u3088\u3063\u3066\u3001Device Tree\u304b\u3089\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u53d6\u5f97\u3057\u305f\u60c5\u5831\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570machine_desc\u3001machine_name\u3001reboot_mode\u306b\n\u30b3\u30d4\u30fc\u3057\u307e\u3059(\u7121\u99c4\u306a\u64cd\u4f5c\u306e\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u304c\u3001\u4f55\u304b\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b)\u3002\n\ninit_mm.start_code\u304b\u3089\u59cb\u307e\u308b\u51e6\u7406\u3067\u3059\u304c\u3001mm_struct\u69cb\u9020\u4f53\u3067\u3042\u308binit_mm\u306f`mm/init-mm.c`\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\n\u3053\u306e\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u306f`include/linux/mm_types.h`\u306b\u8a18\u8f09\u3055\u308c\u3001\u3053\u306e\u5185\u5bb9\u3092\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3068\u547c\u3073\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3068\u306f\u3001\u30d7\u30ed\u30bb\u30b9\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u95a2\u3059\u308b\u5168\u3066\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u51e6\u7406\u3067\u306f\u3001\u3053\u306e\u30e1\u30e2\u30ea\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u306binit\u30d7\u30ed\u30bb\u30b9\u7528\u306e\u30e1\u30e2\u30ea\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\u8a73\u7d30\u306a\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u306f\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8(`arch/arm/kernel/vmlinux.lds.S`)\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u66f8\u304d\u8fbc\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\u3000\u30fbstart_code\uff1a\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbend_code\uff1a\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbend_data\uff1a\u521d\u671f\u5024\u3042\u308a\u30c7\u30fc\u30bf\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n\u3000\u30fbbrk\uff1a\u73fe\u6642\u70b9\u3067\u306e\u30d2\u30fc\u30d7\u9818\u57df\u306e\u7d42\u7aef\u30a2\u30c9\u30ec\u30b9\n\nstrlcpy()\u3067\u306f\u3001boot_command_line\u306e\u5185\u5bb9\u3092cmd_line\u306b\u30b3\u30d4\u30fc(\u4fdd\u5b58)\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306f`arch/arm/kernel/setup.c`\u3067\u3001`static char __initdata cmd_line[COMMAND_LINE_SIZE];`\n`init/main.c`\u3067\u3001`char __initdata boot_command_line[COMMAND_LINE_SIZE];`\u3001\n`arch/arm/include/uapi/asm/setup.c`\u3067\u3001`#define COMMAND_LINE_SIZE 1024`\u3068\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001setup_arch()\u306e\u5f15\u6570\u3067\u3042\u308bcmdline_p\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u307e\u3059(\u30dd\u30a4\u30f3\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u2026\u2026)\u3002\n\u3053\u3053\u3067\u66f8\u304d\u63db\u3048\u305f\u5024\u3092\u7528\u3044\u3066\u3001start_kernel()\u5185\u306esetup_command_line()\u3067\u521d\u671f\u8a2d\u5b9a\u3092\u884c\u3046\u3088\u3046\u3067\u3059\u3002\n(\u66ab\u304f\u5f8c\u306e\u51e6\u7406\u306a\u306e\u3067\u3001\u5225\u306e\u5834\u3067\u8aad\u307f\u89e3\u304d\u307e\u3059)\n \nparse_early_param()\u3067\u306f\u3001early\u30d5\u30e9\u30b0\u304c\u3064\u3044\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\nearly_paging_init()\u3067\u306f\u3001[LPAE(Large Physical Address Extension)](https://www.arm.com/ja/products/processors/technologies/virtualization-extensions.php)\u30674GB\u4ee5\u4e0a\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\n\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308a\u76f4\u3059\u3088\u3046\u3067\u3059(\u8aad\u307f\u304d\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u8a73\u3057\u3044\u8a18\u8ff0\u306f\u5f8c\u65e5\u306b\u8a18\u8f09\u3057\u307e\u3059)\u3002\n\nrequest_standard_resources()\u3067\u306f\u3001\u5404\u30e1\u30e2\u30ea\u8cc7\u6e90\u306e\u767b\u9332\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059(\u4ee5\u4e0b\u3001\u5b9a\u7fa9)\u3002\n\n```arch/arm/kernel/setup.c\n/*\n * Standard memory resources\n */\nstatic struct resource mem_res[] = {\n\t{\n\t\t.name = \"Video RAM\",\n\t\t.start = 0,\n\t\t.end = 0,\n\t\t.flags = IORESOURCE_MEM\n\t},\n\t{\n\t\t.name = \"Kernel code\",\n\t\t.start = 0,\n\t\t.end = 0,\n\t\t.flags = IORESOURCE_MEM\n\t},\n\t{\n\t\t.name = \"Kernel data\",\n\t\t.start = 0,\n\t\t.end = 0,\n\t\t.flags = IORESOURCE_MEM\n\t}\n};\n\n#define video_ram   mem_res[0]\n#define kernel_code mem_res[1]\n#define kernel_data mem_res[2]\n\nstatic void __init request_standard_resources(const struct machine_desc *mdesc)\n{\n\tstruct memblock_region *region;\n\tstruct resource *res;\n\n\tkernel_code.start   = virt_to_phys(_text);\n\tkernel_code.end     = virt_to_phys(_etext - 1);\n\tkernel_data.start   = virt_to_phys(_sdata);\n\tkernel_data.end     = virt_to_phys(_end - 1);\n\n\tfor_each_memblock(memory, region) {\n\t\tres = memblock_virt_alloc(sizeof(*res), 0);\n\t\tres->name  = \"System RAM\";\n\t\tres->start = __pfn_to_phys(memblock_region_memory_base_pfn(region));\n\t\tres->end = __pfn_to_phys(memblock_region_memory_end_pfn(region)) - 1;\n\t\tres->flags = IORESOURCE_MEM | IORESOURCE_BUSY;\n\n\t\trequest_resource(&iomem_resource, res);\n\n\t\tif (kernel_code.start >= res->start &&\n\t\t    kernel_code.end <= res->end)\n\t\t\trequest_resource(res, &kernel_code);\n\t\tif (kernel_data.start >= res->start &&\n\t\t    kernel_data.end <= res->end)\n\t\t\trequest_resource(res, &kernel_data);\n\t}\n\n\tif (mdesc->video_start) {\n\t\tvideo_ram.start = mdesc->video_start;\n\t\tvideo_ram.end   = mdesc->video_end;\n\t\trequest_resource(&iomem_resource, &video_ram);\n\t}\n\n\t/*\n\t * Some machines don't have the possibility of ever\n\t * possessing lp0, lp1 or lp2\n\t */\n\tif (mdesc->reserve_lp0)\n\t\trequest_resource(&ioport_resource, &lp0);\n\tif (mdesc->reserve_lp1)\n\t\trequest_resource(&ioport_resource, &lp1);\n\tif (mdesc->reserve_lp2)\n\t\trequest_resource(&ioport_resource, &lp2);\n}\n```\n\u6700\u521d\u306ekernel_code\u3092\u66f8\u304d\u63db\u3048\u308b\u51e6\u7406\u306f\u3001resource\u69cb\u9020\u4f53\u306e\u521d\u671f\u5316\u51e6\u7406\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\nresource\u69cb\u9020\u4f53\u306f\u30c7\u30d0\u30a4\u30b9\u306b\u5272\u308a\u5f53\u3066\u305fI/O\u8cc7\u6e90(\u30dd\u30fc\u30c8)\u3084\u30e1\u30e2\u30ea\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3001\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```include/linux/ioport.h\nstruct resource {\n\tresource_size_t start; //\u8cc7\u6e90\u7bc4\u56f2\u306e\u5148\u982d\n\tresource_size_t end;   //\u8cc7\u6e90\u7bc4\u56f2\u306e\u672b\u5c3e\n\tconst char *name;      //\u8cc7\u6e90\u6240\u6709\u8005\u306e\u8aac\u660e\n\tunsigned long flags;   //\u5404\u7a2e\u30d5\u30e9\u30b0\n\tstruct resource *parent, *sibling, *child;  //\u8cc7\u6e90\u30c4\u30ea\u30fc\u4e2d\u306e\u89aa\u3001\u5b50\u3001\u6b21\u306e\u8cc7\u6e90\u3078\u306e\u30dd\u30a4\u30f3\u30bf\n};\n```\nkernel_code\u306e\u521d\u671f\u5316\u3067\u306f\u3001virt_to_phys\u30de\u30af\u30ed\u306e\u4eee\u60f3-\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u5909\u63db\u3092\u7528\u3044\u3066\u3001\n.text\u3068.data\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u3068\u672b\u5c3e\u3092\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3067\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306e\u51e6\u7406\u5168\u3066\u306f`request_resource()`\u306b\u3088\u3063\u3066\u3001\u5404\u30e1\u30e2\u30ea\u8cc7\u6e90\u306e\u767b\u9332\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\n\nunflatten_device_tree()\u3067\u306f\u3001Device Tree\u3092\u7528\u3044\u3066\u3001\ndevice_node\u69cb\u9020\u4f53(\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831)\u306e\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\n```include/linux/of.h\nstruct device_node {\n\tconst char *name;\n\tconst char *type;\n\tphandle phandle;\n\tconst char *full_name;\n\tstruct fwnode_handle fwnode;\n\n\tstruct\tproperty *properties;\n\tstruct\tproperty *deadprops;\t/* removed properties */\n\tstruct\tdevice_node *parent;\n\tstruct\tdevice_node *child;\n\tstruct\tdevice_node *sibling;\n\tstruct\tkobject kobj;\n\tunsigned long _flags;\n\tvoid\t*data;\n#if defined(CONFIG_SPARC)\n\tconst char *path_component_name;\n\tunsigned int unique_id;\n\tstruct of_irq_controller *irq_trans;\n#endif\n};\n```\n\u300c\u30dc\u30fc\u30c9\u56fa\u6709\u306e\u60c5\u5831\u306a\u306e\u306b\u3001\u30ce\u30fc\u30c9?\u300d\u3068\u4e0d\u601d\u8b70\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u5404\u7a2e\u5468\u8fba\u6a5f\u5668\u3068\u4e00\u7dd2\u306b\u3001\n\u30dc\u30fc\u30c9\u81ea\u4f53\u3082\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u8003\u3048\u3066\u307f\u308c\u3070\u3001\u30dc\u30fc\u30c9\u3060\u3051\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u3082\u7121\u3044\u3067\u3059\u306d\u3002\n\n\u540c\u69d8\u306b\u3001arm_dt_init_cpu_maps()\u3001psci_init()\u3067\u3082\u3001\nCPU\u60c5\u5831\u3068[PSCI\u60c5\u5831(Power State Coordination Interface)](http://infocenter.arm.com/help/topic/com.arm.doc.den0022c/DEN0022C_Power_State_Coordination_Interface.pdf)\u3092Device_node\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u3053\u3053\u3067\u306ePSCI\u3068\u306f\u3001\u30d1\u30ef\u30fc\u30de\u30cd\u30fc\u30b8\u30e1\u30f3\u30c8\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3001CPU\u30b3\u30a2\u3092idle\u72b6\u614b\u306b\u3055\u305b\u305f\u308a\u3001\nCPU\u306e\u96fb\u6e90\u3092ON/OFF\u72b6\u614b\u306e\u5207\u308a\u66ff\u3048\u3001\u30b5\u30b9\u30da\u30f3\u30c9\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\u3002\n\nreserve_crashkernel()\u3067\u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u3001[kdump](http://xn--u9j0md1592aqmt715c.net/linux-kdump-howto/)\u7528\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30e1\u30e2\u30ea\u306f\u3001kdump\u304cLinux Kernel\u306e\u30af\u30e9\u30c3\u30b7\u30e5\u539f\u56e0\u3092\u793a\u3059\u60c5\u5831(vmcore)\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3001\n\u305d\u306e\u30b5\u30a4\u30ba\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067`crashkernel=<size>(\u30c7\u30d5\u30a9\u30eb\u30c8=128MB)`\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067\u3001setup_arch()\u306e\u51e6\u7406\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n#\u6b21\u56de\n\u672a\u5b9a\n[Raspberry Pi Computer Architecture Essentials](https://www.packtpub.com/hardware-and-creative/raspberry-pi-computer-architecture-essentials)\u3092\u8cfc\u5165\u3057\u305f\u306e\u3067\u3001\n\u66ab\u304f\u306f\u30ab\u30fc\u30cd\u30eb\u30b3\u30fc\u30c9\u8aad\u3080\u6642\u9593\u304c\u53d6\u308c\u307e\u305b\u3093\u3002\n\n##\u53c2\u8003\n[CPU cache](https://en.wikipedia.org/wiki/CPU_cache)\n\n"}