{"tags": ["Chainer", "DeepLearning"], "context": "\u521d\u6295\u7a3f\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nChainer\u3068\u304bCaffe\u3068\u304b\u3088\u304f\u89e6\u308b\u306e\u3067\u3059\u304c\u3001\u753b\u50cf\u51e6\u7406\u7cfb\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u97f3\u58f0\u51e6\u7406\u7cfb\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3084\u308a\u307e\u3057\u305f\u3002\nChainer\u3092\u4f7f\u3063\u3066\u3001\uff12\u3064\u306e\u66f2\u3092\u5206\u985e\u3059\u308b\u5206\u985e\u5668\u3092\u4f5c\u3063\u3066\u3001PC\u306e\u30de\u30a4\u30af\u306b\u97f3\u697d\u3092\u5165\u529b\u3057\u3066\u5206\u985e\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n\u5206\u985e\u3059\u308b\u66f2\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e2\u3064\u306e\u66f2\u3092\u5206\u985e\u3057\u307e\u3059\u3002\n\u30fb\u300cCrossing Field\u300d (LiSA)\n\u30fb\u300c\u8607\u751f\u300d (Mr.Children)\n(\u6700\u521dLiSA\u306e\u66f2\u3092\uff14\u3064\u304f\u3089\u3044\u9332\u97f3\u3057\u3066\u5b66\u7fd2\u3055\u305b\u305f\u3089\u3001\u5b66\u7fd2\u306f\u3067\u304d\u305f\u3051\u3069\u63a8\u5b9a\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5206\u3051\u3084\u3059\u305d\u3046\u306a\u66f2\u3092\u30c1\u30e7\u30a4\u30b9\u3057\u307e\u3057\u305f)\n\n\u9332\u97f3\u74b0\u5883\n\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u6642\u306b\u30de\u30a4\u30af\u306b\u97f3\u697d\u3092\u304b\u3051\u308b\u306e\u3067\u3001\u305d\u308c\u3068\u540c\u3058\u72b6\u6cc1\u3067\u4e0a\u306e\uff12\u66f2\u3092\uff11\u56de\u305a\u3064\u9332\u97f3\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u9332\u97f3\u306b\u306fPython\u306ePyAudio\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\uff08\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff09\n\naudio-input.py\nimport pyaudio\nimport numpy as np\nimport time\n\nCHUNK = 1024\nRATE = 8000\np = pyaudio.PyAudio()\n\nstream = p.open(format=pyaudio.paInt8,\n                channels=1,\n                rate=RATE,\n                frames_per_buffer=CHUNK,\n                input=True)\n\nwhile stream.is_active():\n    input = stream.read(CHUNK)\n    print list(np.frombuffer(input, dtype='int8'))\n\nstream.stop_stream()\nstream.close()\np.terminate()\n\n\n\u3053\u308c\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6253\u3063\u3066\u30a8\u30f3\u30bf\u30fc\u62bc\u3057\u305f\u5f8c\u306b\u3001\u30de\u30a4\u30af\u306b\u5411\u304b\u3063\u3066\u97f3\u697d\u3092\u304b\u3051\u307e\u3057\u305f\u3002\n\u50d5\u306f\u30b9\u30de\u30db\u306e\u30b9\u30d4\u30fc\u30ab\u30fc\u3092\u8fd1\u3065\u3051\u3066\u9332\u308a\u307e\u3057\u305f\u3002\n$ Python audio-input.py > hogehoge.txt\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u9069\u5f53\u306b\u51e6\u7406\u3057\u3066\u3001python\u3067\u6271\u3044\u3084\u3059\u3044\u5f62\u306b\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092Chainer\u3067\u66f8\u3044\u305f\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6295\u3052\u307e\u3059\u3002\n\n\u5b66\u7fd2\n\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u9010\u6b21\u4e0e\u3048\u3066\u3044\u304f\u306e\u3067\u3001\u3051\u3063\u3053\u3046\u6709\u540d\u3060\u3057LSTM\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3000\u3068\u3044\u3046\u6d45\u3044\u767a\u60f3\u3067\u3068\u308a\u3042\u3048\u305aLSTM\u5165\u308c\u307e\u3057\u305f\u3002\n\nlearn.py\nclass MyRNN(chainer.Chain):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(MyRNN, self).__init__(\n            fc1=L.Linear(input_dim, hidden_dim),\n            lstm2=L.LSTM(hidden_dim, hidden_dim),\n            fc3=L.Linear(hidden_dim, output_dim),\n        )\n\n    def __call__(self, xs, t):\n        self.lstm2.reset_state()\n        for i, x in enumerate(xs):\n            x = x[np.newaxis, :]\n            x = Variable(cuda.to_gpu(x))\n            fc1 = self.fc1(x)\n            lstm2 = self.lstm2(fc1)\n            fc3 = self.fc3(lstm2)\n\n            if i == len(xs) - 1:\n                t = Variable(cuda.to_gpu(t))\n                loss = F.softmax_cross_entropy(fc3, t)\n                accuracy = F.accuracy(fc3, t)\n\n        return loss, accuracy\n\n\ninput_dim\uff08\u5165\u529b\u5c64\u306e\u6b21\u5143\uff09\u306f1024\u3067\u3059\u3002\u3053\u308c\u306faudio-input.py\u306eCHUNK\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\nhidden_dim\uff08\u96a0\u308c\u5c64\u306e\u6b21\u5143\uff09\u306f\u3001\u597d\u304d\u306a\u5024\u3067\u826f\u3044\u306e\u3067\u3059\u304c\u4eca\u56de\u306f1024\u306b\u3057\u307e\u3057\u305f\u3002\noutput_dim\uff08\u51fa\u529b\u5c64\u306e\u6b21\u5143\uff09\u306f\u30012\u3067\u3059\u30022\u66f2\u306e\u5206\u985e\u306a\u306e\u3067\u3002\n\u307e\u3042\u3001\u307b\u3093\u3068\u306f\u30af\u30e9\u30b9\u30923\u3064\u306b\u3057\u3066\u30011\u3064\u306f\u3069\u306e\u66f2\u3082\u304b\u304b\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u3059\u308b\u3079\u304d\u304b\u3082\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u4f5c\u308b\u306e\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u611f\u3058\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3057\u305f\u3002\n\n\u63a8\u8ad6\n\u30de\u30a4\u30af\u306b\u5411\u304b\u3063\u3066\u97f3\u697d\u3092\u6d41\u3057\u3066\u63a8\u8ad6\u3055\u305b\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u305d\u3053\u305d\u3053\u4e0a\u624b\u304f\u3044\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u300c\u8607\u751f\u300d\u3092\u6570\u5341\u79d2\u307b\u3069\u6d41\u3057\u305f\u5f8c\u306b\u300cCrossing Field\u300d\u306b\u5207\u308a\u66ff\u3048\u308b\u3068\u3001\u4e0a\u624b\u304f\u63a8\u5b9a\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3001\u305d\u306e\u9006\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u66f2\u3092\u6d41\u3057\u3066\u304b\u3089\u3001\u63a8\u8ad6\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3055\u305b\u308b\u3068\u3001A\u30e1\u30ed\u3067\u3082B\u30e1\u30ed\u3067\u3082\u30b5\u30d3\u3067\u3082\u95a2\u4fc2\u306a\u304f\u3061\u3083\u3093\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3092github\u306b\u4e0a\u3052\u3066\u306f\u3044\u306a\u3044\u306e\u3067\u3059\u304c\uff08\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u305d\u3093\u306a\u306b\u9577\u304f\u306a\u3044\u3067\u3059\uff09\u3001\u8981\u671b\u304c\u3042\u308c\u3070\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\u521d\u6295\u7a3f\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\nChainer\u3068\u304bCaffe\u3068\u304b\u3088\u304f\u89e6\u308b\u306e\u3067\u3059\u304c\u3001\u753b\u50cf\u51e6\u7406\u7cfb\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u97f3\u58f0\u51e6\u7406\u7cfb\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u3084\u308a\u307e\u3057\u305f\u3002\n\nChainer\u3092\u4f7f\u3063\u3066\u3001\uff12\u3064\u306e\u66f2\u3092\u5206\u985e\u3059\u308b\u5206\u985e\u5668\u3092\u4f5c\u3063\u3066\u3001PC\u306e\u30de\u30a4\u30af\u306b\u97f3\u697d\u3092\u5165\u529b\u3057\u3066\u5206\u985e\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n# \u5206\u985e\u3059\u308b\u66f2\n\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e2\u3064\u306e\u66f2\u3092\u5206\u985e\u3057\u307e\u3059\u3002\n\u30fb\u300cCrossing Field\u300d (LiSA)\n\u30fb\u300c\u8607\u751f\u300d (Mr.Children)\n\n(\u6700\u521dLiSA\u306e\u66f2\u3092\uff14\u3064\u304f\u3089\u3044\u9332\u97f3\u3057\u3066\u5b66\u7fd2\u3055\u305b\u305f\u3089\u3001\u5b66\u7fd2\u306f\u3067\u304d\u305f\u3051\u3069\u63a8\u5b9a\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5206\u3051\u3084\u3059\u305d\u3046\u306a\u66f2\u3092\u30c1\u30e7\u30a4\u30b9\u3057\u307e\u3057\u305f)\n\n# \u9332\u97f3\u74b0\u5883\n\n\u5b9f\u969b\u306b\u30c6\u30b9\u30c8\u6642\u306b\u30de\u30a4\u30af\u306b\u97f3\u697d\u3092\u304b\u3051\u308b\u306e\u3067\u3001\u305d\u308c\u3068\u540c\u3058\u72b6\u6cc1\u3067\u4e0a\u306e\uff12\u66f2\u3092\uff11\u56de\u305a\u3064\u9332\u97f3\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u9332\u97f3\u306b\u306fPython\u306ePyAudio\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\uff08\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff09\n\n```python:audio-input.py\nimport pyaudio\nimport numpy as np\nimport time\n\nCHUNK = 1024\nRATE = 8000\np = pyaudio.PyAudio()\n\nstream = p.open(format=pyaudio.paInt8,\n                channels=1,\n                rate=RATE,\n                frames_per_buffer=CHUNK,\n                input=True)\n\nwhile stream.is_active():\n    input = stream.read(CHUNK)\n    print list(np.frombuffer(input, dtype='int8'))\n\nstream.stop_stream()\nstream.close()\np.terminate()\n```\n\n\u3053\u308c\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6253\u3063\u3066\u30a8\u30f3\u30bf\u30fc\u62bc\u3057\u305f\u5f8c\u306b\u3001\u30de\u30a4\u30af\u306b\u5411\u304b\u3063\u3066\u97f3\u697d\u3092\u304b\u3051\u307e\u3057\u305f\u3002\n\u50d5\u306f\u30b9\u30de\u30db\u306e\u30b9\u30d4\u30fc\u30ab\u30fc\u3092\u8fd1\u3065\u3051\u3066\u9332\u308a\u307e\u3057\u305f\u3002\n\n```\n$ Python audio-input.py > hogehoge.txt\n```\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u9069\u5f53\u306b\u51e6\u7406\u3057\u3066\u3001python\u3067\u6271\u3044\u3084\u3059\u3044\u5f62\u306b\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092Chainer\u3067\u66f8\u3044\u305f\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u6295\u3052\u307e\u3059\u3002\n\n# \u5b66\u7fd2\n\n\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u9010\u6b21\u4e0e\u3048\u3066\u3044\u304f\u306e\u3067\u3001\u3051\u3063\u3053\u3046\u6709\u540d\u3060\u3057LSTM\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3000\u3068\u3044\u3046\u6d45\u3044\u767a\u60f3\u3067\u3068\u308a\u3042\u3048\u305aLSTM\u5165\u308c\u307e\u3057\u305f\u3002\n\n```Python:learn.py\nclass MyRNN(chainer.Chain):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(MyRNN, self).__init__(\n            fc1=L.Linear(input_dim, hidden_dim),\n            lstm2=L.LSTM(hidden_dim, hidden_dim),\n            fc3=L.Linear(hidden_dim, output_dim),\n        )\n\n    def __call__(self, xs, t):\n        self.lstm2.reset_state()\n        for i, x in enumerate(xs):\n            x = x[np.newaxis, :]\n            x = Variable(cuda.to_gpu(x))\n            fc1 = self.fc1(x)\n            lstm2 = self.lstm2(fc1)\n            fc3 = self.fc3(lstm2)\n\n            if i == len(xs) - 1:\n                t = Variable(cuda.to_gpu(t))\n                loss = F.softmax_cross_entropy(fc3, t)\n                accuracy = F.accuracy(fc3, t)\n\n        return loss, accuracy\n```\n\ninput_dim\uff08\u5165\u529b\u5c64\u306e\u6b21\u5143\uff09\u306f1024\u3067\u3059\u3002\u3053\u308c\u306faudio-input.py\u306eCHUNK\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\nhidden_dim\uff08\u96a0\u308c\u5c64\u306e\u6b21\u5143\uff09\u306f\u3001\u597d\u304d\u306a\u5024\u3067\u826f\u3044\u306e\u3067\u3059\u304c\u4eca\u56de\u306f1024\u306b\u3057\u307e\u3057\u305f\u3002\noutput_dim\uff08\u51fa\u529b\u5c64\u306e\u6b21\u5143\uff09\u306f\u30012\u3067\u3059\u30022\u66f2\u306e\u5206\u985e\u306a\u306e\u3067\u3002\n\n\u307e\u3042\u3001\u307b\u3093\u3068\u306f\u30af\u30e9\u30b9\u30923\u3064\u306b\u3057\u3066\u30011\u3064\u306f\u3069\u306e\u66f2\u3082\u304b\u304b\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u3059\u308b\u3079\u304d\u304b\u3082\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u4f5c\u308b\u306e\u304c\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u3093\u306a\u611f\u3058\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3057\u305f\u3002\n\n# \u63a8\u8ad6\n\n\u30de\u30a4\u30af\u306b\u5411\u304b\u3063\u3066\u97f3\u697d\u3092\u6d41\u3057\u3066\u63a8\u8ad6\u3055\u305b\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u305d\u3053\u305d\u3053\u4e0a\u624b\u304f\u3044\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u300c\u8607\u751f\u300d\u3092\u6570\u5341\u79d2\u307b\u3069\u6d41\u3057\u305f\u5f8c\u306b\u300cCrossing Field\u300d\u306b\u5207\u308a\u66ff\u3048\u308b\u3068\u3001\u4e0a\u624b\u304f\u63a8\u5b9a\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3001\u305d\u306e\u9006\u3082\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u66f2\u3092\u6d41\u3057\u3066\u304b\u3089\u3001\u63a8\u8ad6\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3055\u305b\u308b\u3068\u3001A\u30e1\u30ed\u3067\u3082B\u30e1\u30ed\u3067\u3082\u30b5\u30d3\u3067\u3082\u95a2\u4fc2\u306a\u304f\u3061\u3083\u3093\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3092github\u306b\u4e0a\u3052\u3066\u306f\u3044\u306a\u3044\u306e\u3067\u3059\u304c\uff08\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u305d\u3093\u306a\u306b\u9577\u304f\u306a\u3044\u3067\u3059\uff09\u3001\u8981\u671b\u304c\u3042\u308c\u3070\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n"}