{"context": "\n\n\u590f\u4f11\u307f\n\u3044\u304b\u304c\u304a\u904e\u3054\u3057\u3067\u3057\u3087\u3046\u304b\u3002\u30b3\u30df\u30b11\u65e5\u76ee\u306b\u3042\u305f\u308b\u672c\u65e5\u3082\u4ed5\u4e8b\u3067\u3057\u305f\u3002\n\u3055\u3066\u3001\u524d\u56dehal\u306e\u6982\u8981\u306a\u3069\u3092\u898b\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u521d\u671f\u5316\u6642\u306ehal.init()\u3092\u6398\u308a\u4e0b\u3052\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nhal\u306b\u3088\u308b\u521d\u671f\u5316\n\u524d\u56de\u66f8\u3044\u305f\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u304cAP_HAL_MAIN()\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\nAP_HAL_MAIN()\u5b9f\u88c5\u3088\u308a\u629c\u7c8b\n    hal.init(argc, argv);           \\\n        hal.scheduler->system_initialized(); \\\n\n\n\u4eca\u56de\u3001hal.init()\u306e\u5b9f\u88c5\u306b\u8e0f\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\nhal.init()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u306e\u3068\u304a\u308a\u3001scheduler->init()\u547c\u3073\u51fa\u3057\u5f8c\u3001\u5404\u7a2e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u521d\u671f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nardupilot/libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\nvoid HAL_Linux::init(int argc,char* const argv[]) const \n{\n    int opt;\n\n    /* \u8d77\u52d5\u6642\u306b\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u3002\u9577\u3044\u3057\u3001\u672c\u8cea\u7684\u306a\u3068\u3053\u308d\u3067\u306a\u3044\u305f\u3081\u3001\u4eca\u306f\u7701\u7565 */\n\n    scheduler->init(NULL);\n    gpio->init();\n#if CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BEBOP\n    i2c->begin();\n    i2c1->begin();\n    i2c2->begin();\n#else\n    i2c->begin();\n#endif\n    rcout->init(NULL);\n    rcin->init(NULL);\n    uartA->begin(115200);\n    uartE->begin(115200);\n    spi->init(NULL);\n    analogin->init(NULL);\n    utilInstance.init(argc+gopt.optind-1, &argv[gopt.optind-1]);\n}\n\n\n\u3055\u3066\u3001\u3053\u3053\u3067\u306f\u3001scheduler->init()\u306e\u8a73\u7d30\u306b\u8e0f\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\u3002scheduler\u304c\u6307\u3059\u5b9f\u4f53\u306f\u3001\u4ee5\u4e0b\u306eschedulerInstance\u3067\u3059\u3002\n(\u3048\uff1f\u3068\u306a\u3063\u305f\u4eba\u306f\u3001\u524d\u56de\u5f15\u7528\u3057\u305fHAL_Linux\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068HAL.h\u306e\u4e2d\u306b\u3042\u308bAP_HAL::HAL\u306e\u5b9a\u7fa9\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002)\n\nardupilot/libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\nstatic LinuxScheduler schedulerInstance;\n\n\nLinuxScheduler\u306f\u3001\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002public\u306a\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5f15\u7528\u3057\u307e\u3059\u3002\n\nardupilot/libraries/AP_HAL_Linux/Scheduler.h\nclass Linux::LinuxScheduler : public AP_HAL::Scheduler {\n\ntypedef void *(*pthread_startroutine_t)(void *);\n\npublic:\n    LinuxScheduler();\n    void     init(void* machtnichts);\n    void     delay(uint16_t ms);\n    uint32_t millis();\n    uint32_t micros();\n    uint64_t millis64();\n    uint64_t micros64();\n    void     delay_microseconds(uint16_t us);\n    void     register_delay_callback(AP_HAL::Proc,\n                uint16_t min_time_ms);\n\n    void     register_timer_process(AP_HAL::MemberProc);\n    void     register_io_process(AP_HAL::MemberProc);\n    void     suspend_timer_procs();\n    void     resume_timer_procs();\n\n    bool     in_timerprocess();\n\n    void     register_timer_failsafe(AP_HAL::Proc, uint32_t period_us);\n\n    void     begin_atomic();\n    void     end_atomic();\n\n    bool     system_initializing();\n    void     system_initialized();\n\n    void     panic(const prog_char_t *errormsg) NORETURN;\n    void     reboot(bool hold_in_bootloader);\n\n    void     stop_clock(uint64_t time_usec);\n\n\nscheduler\u306b\u3042\u308a\u304c\u3061\u306a\u6642\u9593\u306b\u95a2\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u3067\u306a\u304f\u3001reboot()\u3084panic()\u3001atomic\u306a\u3093\u305f\u3089\u306e\u3088\u3046\u306a\u6392\u4ed6\u3092\u9023\u60f3\u3055\u305b\u308b\u3082\u306e\u307e\u3067\u624b\u5e83\u3044\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nScheduler::init()\u306e\u5b9f\u88c5\nscheduler::init()\u3092\u8aad\u307f\u307e\u3059\u3002\u3053\u308c\u306f\u306a\u304b\u306a\u304b\u91cd\u8981\u305d\u3046\u306a\u306e\u3067\u3001\u8a73\u3057\u304f\u898b\u307e\u3057\u3087\u3046\u3002\n\nardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\nvoid LinuxScheduler::init(void* machtnichts)\n{\n    mlockall(MCL_CURRENT|MCL_FUTURE);\n\n    clock_gettime(CLOCK_MONOTONIC, &_sketch_start_time);\n\n    struct sched_param param = { .sched_priority = APM_LINUX_MAIN_PRIORITY };\n    sched_setscheduler(0, SCHED_FIFO, &param);\n\n    struct {\n        pthread_t *ctx;\n        int rtprio;\n        const char *name;\n        pthread_startroutine_t start_routine;\n    } *iter, table[] = {\n    // \u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3002\u8a18\u8ff0\u304c\u9577\u304f\u304b\u3064\u5f8c\u8ff0\u3059\u308b\u305f\u3081\u3001\u7701\u7565\u3002\n    };\n\n    if (geteuid() != 0) {\n        printf(\"WARNING: running as non-root. Will not use realtime scheduling\\n\");\n    }\n\n    for (iter = table; iter->ctx; iter++)\n        _create_realtime_thread(iter->ctx, iter->rtprio, iter->name,\n                                iter->start_routine);\n}\n\n\n\nmlockall()\u306b\u3064\u3044\u3066\n\nLinuxScheduler\n    mlockall(MCL_CURRENT|MCL_FUTURE);\n\n\nmlockall()\u3068\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5185\u306b\u30de\u30c3\u30d7\u3055\u308c\u305f\u30da\u30fc\u30b8\u5168\u3066\u304c\u30ec\u30b8\u30c7\u30f3\u30c8\u3067\u304b\u3064\u30da\u30fc\u30b8\u30a2\u30a6\u30c8 or \u30b9\u30ef\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306elibc\u95a2\u6570\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u5f15\u6570\u3067MCL_FUTURE\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001mlockall()\u547c\u3073\u51fa\u3057\u4ee5\u5f8c\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30e1\u30e2\u30ea\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059\u3002\n(\u4f8b\u3048\u3070mlockall()\u547c\u3073\u51fa\u3057\u5f8c\u306emalloc()\u306b\u3088\u308b\u52d5\u7684\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002)\n\u306a\u304a\u3001mlock_all()\u306e\u8a73\u7d30\u306f\u3001Linux\u306eman\u30da\u30fc\u30b8\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n\u30ec\u30b8\u30c7\u30f3\u30c8\n\u307e\u305f\u3001\u300c\u30ec\u30b8\u30c7\u30f3\u30c8\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u300c\u3042\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u7269\u7406\u30e1\u30e2\u30ea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u300d\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u7a7a\u9593\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306f\u539f\u5247\u3068\u3057\u3066COW(\u30b3\u30d4\u30fc\u30aa\u30f3\u30e9\u30a4\u30c8)\u3067\u3059\u3002\nCOW\u5c5e\u6027\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5834\u5408\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5272\u5f53\u6642\u3067\u306a\u304f\u3001\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u884c\u308f\u308c\u305f\u3068\u304d\u306b\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u5f53\u304c\u884c\u308f\u308c\u3001\u30ec\u30b8\u30c7\u30f3\u30c8\u306a\u72b6\u614b\u3068\u306a\u308a\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u5177\u4f53\u7684\u306b\u66f8\u304f\u3068\u3001\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u767a\u751f\u6642\u306b\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u767a\u751f\u3057\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u5f53\u3092\u3059\u308b\u4ed5\u7d44\u307f\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u3001\u300c\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u306f\u7269\u7406\u30e1\u30e2\u30ea\u3092\u5272\u308a\u5f53\u3066\u306a\u3044\u306e\u3067\u3001\u7121\u99c4\u306b\u7269\u7406\u30e1\u30e2\u30ea\u3092\u4f7f\u308f\u306a\u3044\u300d\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u305d\u306e\u53cd\u9762\u3001\u300c\u5b9f\u969b\u306e\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6642\u306b\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u52d5\u4f5c\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6642\u306b\u4f59\u5206\u306a\u6642\u9593\u304c\u304b\u304b\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u300d\u3068\u3082\u8a00\u3048\u307e\u3059\u3002\n\nmlock_all()\u547c\u3073\u51fa\u3057\u7406\u7531\u306b\u3064\u3044\u3066\n\u7d44\u307f\u8fbc\u307f\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u300c\u305f\u307e\u306b\u9045\u304f\u306a\u308a\u3001\u51e6\u7406\u6642\u9593\u306b\u4e0d\u78ba\u5b9f\u3055\u304c\u52a0\u308f\u308b\u300d\u3053\u3068\u3092\u3057\u3070\u3057\u3070\u5acc\u3044\u307e\u3059\u3002\nPC\u306b\u8f09\u3063\u3066\u3044\u308bCore i7\u3068\u304b\u3067\u306a\u304f\u3001Cortex-A9\u7a0b\u5ea6(\u203b1)\u306eCPU\u3067\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u5b9f\u884c\u306b\u3082\u305d\u308c\u306a\u308a\u306e\u30b3\u30b9\u30c8\u304c\u3042\u308a\u305d\u3046\u3067\u3059(\u73fe\u5b9f\u306b\u8a08\u6e2c\u3057\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u63a8\u6e2c\u3067\u3059)\u3002\n\u8a2d\u8a08\u8005\u304c\u628a\u63e1\u3067\u304d\u308b\u8d77\u52d5\u30d7\u30ed\u30bb\u30b9(\u30b9\u30ec\u30c3\u30c9)\u6570\u3067\u5927\u4f53\u306eRAM\u6d88\u8cbb\u91cf\u304c\u8a2d\u8a08\u6bb5\u968e\u3067\u5206\u304b\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\u3088\u308a\u3082\u51e6\u7406\u6642\u9593\u306e\u78ba\u5b9f\u3055\u3092\u9078\u629e\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u5224\u65ad\u3059\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u3046\u3057\u305f\u7406\u7531\u304b\u3089\u3001mlockall()\u306b\u3088\u3063\u3066\u3001\u30de\u30c3\u30d7\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u5bfe\u3057\u3066\u7269\u7406\u30e1\u30e2\u30ea\u304c\u30ec\u30b8\u30c7\u30f3\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u203b1.\u3053\u306eWeb\u30b5\u30a4\u30c8\u306b\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30d5\u30e9\u30a4\u30c8\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u898b\u308b\u9650\u308a\u3001Cortex-A9\u30ec\u30d9\u30eb\u306eCPU\u63a1\u7528\u4f8b\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\nclock_gettime()\n\nLinuxScheduler\n    clock_gettime(CLOCK_MONOTONIC, &_sketch_start_time);\n\n\nclock_gettime()\u306b\u3064\u3044\u3066\u306f\u3001\u3084\u306f\u308aLinux man\u304c\u8a73\u3057\u3044\u3002\n\u3053\u308c\u306f\u3001\u30bd\u30d5\u30c8\u8d77\u52d5\u958b\u59cb\u6642\u70b9\u3067\u306e\u6642\u9593\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u958b\u59cb\u6642\u70b9\u3067\u306e\u300c\u30af\u30ed\u30c3\u30af\u5024\u300d\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u8abf\u5897\u52a0\u3059\u308b\u3060\u3051\u3067\u3001\u4f8b\u3048settimeofday()\u3067\u6642\u523b\u3092\u904e\u53bb\u306b\u5909\u66f4\u3057\u3066\u3082\u6e1b\u5c11\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u751f\u6210\n\u6700\u5f8c\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u304b\u3089\u3001\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u306e\u95a2\u6570\u3067\u3042\u308b\u3068\u60f3\u5b9a\u3067\u304d\u307e\u3059\u3002\n\nLinuxScheduler\n    for (iter = table; iter->ctx; iter++)\n        _create_realtime_thread(iter->ctx, iter->rtprio, iter->name,\n                                iter->start_routine);\n\n\n\u7d9a\u304d\u3092\u8aad\u3080\u3068\u3001\u3084\u306f\u308apthread_create()\u3092\u547c\u3073\u51fa\u3057\u3066\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\nardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\nvoid LinuxScheduler::_create_realtime_thread(pthread_t *ctx, int rtprio,\n                                             const char *name,\n                                             pthread_startroutine_t start_routine)\n{\n    struct sched_param param = { .sched_priority = rtprio };\n    pthread_attr_t attr;\n    int r;\n\n    pthread_attr_init(&attr);\n    /*\n      we need to run as root to get realtime scheduling. Allow it to\n      run as non-root for debugging purposes, plus to allow the Replay\n      tool to run\n     */\n    if (geteuid() == 0) {\n        pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);\n        pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n        pthread_attr_setschedparam(&attr, &param);\n    }\n    r = pthread_create(ctx, &attr, start_routine, this);\n    if (r != 0) {\n        hal.console->printf(\"Error creating thread '%s': %s\\n\",\n                            name, strerror(r));\n        panic(PSTR(\"Failed to create thread\"));\n    }\n    pthread_attr_destroy(&attr);\n\n    if (name) {\n        pthread_setname_np(*ctx, name);\n    }\n}\n\n\n\u3053\u3053\u3067\u898b\u308b\u3079\u304d\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u3059\u3002\n\nardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\n    struct sched_param param = { .sched_priority = rtprio };\n    // \u7565\n        pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n        pthread_attr_setschedparam(&attr, &param);\n\n\npthread_attr_setschedpolicy()\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7\u3092SCHED_FIFO\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001POSIX\u3067\u5b9a\u3081\u3089\u308c\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u5411\u3051\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7\u306e1\u3064\u3067\u3001\u30dd\u30ea\u30b7\u306f\u4ee5\u4e0b\u306e3\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\n\n\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7\n\u6982\u8981\n\n\n\n\nSCHED_FIFO\nyield()\u3067\u81ea\u767a\u7684\u306b\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3059\u304b\u3001\u30d6\u30ed\u30c3\u30af\u3059\u308b\u307e\u3067\u512a\u5148\u5ea6\u306e\u9ad8\u3044\u30b9\u30ec\u30c3\u30c9\u304c\u5b9f\u884c\u6a29\u3092\u7372\u5f97\u3057\u52d5\u304d\u7d9a\u3051\u308b\u3002\n\n\nSCHED_RR\nSCHED_FIFO\u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u3060\u304c\u3001\u30bf\u30a4\u30e0\u30b9\u30e9\u30a4\u30b9(\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694)\u3092\u4f7f\u3044\u304d\u3063\u305f\u5834\u5408\u306b\u3082\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3059\n\n\nSCHED_OTHER\n\"\u666e\u901a\u306e\" Unix\u306e\u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306f\u306a\u3044\u3002\n\n\n\n\u8981\u3059\u308b\u306b\u3001Linux\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0OS\u7684\u306b\u6271\u304a\u3046\u3068\u3059\u308b\u5de5\u592b\u3067\u3059\u3002\n\u5c0f\u898f\u6a21\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308c\u3070\u3001\u8a2d\u8a08\u8005\u304c\u30b7\u30b9\u30c6\u30e0\u306e\u5168\u5bb9\u3092\u628a\u63e1\u3067\u304d\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u30b9\u30ec\u30c3\u30c9(or \u30d7\u30ed\u30bb\u30b9 or \u30bf\u30b9\u30af)\u306e\u512a\u5148\u5ea6\u3092\u304b\u3063\u3061\u308a\u3068\u6c7a\u3081\u308b\u3053\u3068\u304c\u591a\u3005\u3042\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001POSIX\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u898f\u683c\u306e\u8a73\u7d30\u306f\u3053\u306e\u8ad6\u6587\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u4e00\u8aad\u3059\u308b\u3068\u9762\u767d\u3044\u3067\u3059\u3088\u3002\u3044\u3064\u3082\u3068\u9055\u3063\u305f\u9854\u3092\u57a3\u9593\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u751f\u6210\u3057\u3088\u3046\u3068\u3059\u308b\u5404\u30b9\u30ec\u30c3\u30c9\u306e\u78ba\u8a8d\nLinuxScheduler::init()\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308btable\u304b\u3089\u8a2d\u5b9a\u5024\u3092\u629c\u304d\u51fa\u3057\u305f\u3082\u306e\u304c\u4ee5\u4e0b\u306e\u8868\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u901a\u308a\u3001\u751f\u6210\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306f5\u3064\u3067\u3059\u3002\n\n\n\n\u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6(rtprio)\n\u30b9\u30ec\u30c3\u30c9\u540d\n\u5b9f\u4f53(start_routine)\n\n\n\n\nAPM_LINUX_TIMER_PRIORITY\nsched-timer\n&Linux::LinuxScheduler::_timer_thread\n\n\nAPM_LINUX_UART_PRIORITY\nsched-uart\n&Linux::LinuxScheduler::_uart_thread\n\n\nAPM_LINUX_RCIN_PRIORITY\nsched-rcin\n&Linux::LinuxScheduler::_rcin_thread\n\n\nAPM_LINUX_TONEALARM_PRIORITY\nsched-tonealarm\n&Linux::LinuxScheduler::_tonealarm_thread\n\n\nAPM_LINUX_IO_PRIORITY\nsched-io\nLinux::LinuxScheduler::_io_thread\n\n\n\n\u307e\u305f\u3001\u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u304a\u3001pthread\u3067\u306f\u512a\u5148\u5ea6\u306e\u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u512a\u5148\u5ea6\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002\n\nardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\n#define APM_LINUX_TIMER_PRIORITY        15\n#define APM_LINUX_UART_PRIORITY         14\n#define APM_LINUX_RCIN_PRIORITY         13\n#define APM_LINUX_MAIN_PRIORITY         12\n#define APM_LINUX_TONEALARM_PRIORITY    11\n#define APM_LINUX_IO_PRIORITY           10\n\n\n\u3084\u306f\u308a\u3001\u30bf\u30a4\u30de\u306b\u7d61\u3080\u51e6\u7406\u304c\u4e00\u756a\u512a\u5148\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u306d\u3002\n\n\u6b21\u56de\n\u4eca\u56de\u898b\u305f\u30b3\u30fc\u30c9\u306f\u304a\u305d\u3089\u304f100\u884c\u7a0b\u5ea6\u3067\u3059\u304c\u3001\u3053\u306e\u77ed\u3044\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u591a\u304f\u306e\u5de5\u592b\u304c\u306a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u6bd4\u8f03\u7684\u5c0f\u898f\u6a21\u306a\u7d44\u307f\u8fbc\u307fLinux\u74b0\u5883\u3067\u3042\u308c\u3070\u3001\u3053\u3046\u3057\u305f\u30ce\u30a6\u30cf\u30a6\u3092\u6d3b\u304b\u305b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u6b21\u56de\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n## \u590f\u4f11\u307f\n\u3044\u304b\u304c\u304a\u904e\u3054\u3057\u3067\u3057\u3087\u3046\u304b\u3002\u30b3\u30df\u30b11\u65e5\u76ee\u306b\u3042\u305f\u308b\u672c\u65e5\u3082\u4ed5\u4e8b\u3067\u3057\u305f\u3002\n\u3055\u3066\u3001\u524d\u56dehal\u306e\u6982\u8981\u306a\u3069\u3092\u898b\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u521d\u671f\u5316\u6642\u306ehal.init()\u3092\u6398\u308a\u4e0b\u3052\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## hal\u306b\u3088\u308b\u521d\u671f\u5316\n\n[\u524d\u56de](http://qiita.com/akachochin/items/865db61d43b28455813e)\u66f8\u3044\u305f\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u304cAP_HAL_MAIN()\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n```c:AP_HAL_MAIN()\u5b9f\u88c5\u3088\u308a\u629c\u7c8b\n    hal.init(argc, argv);           \\\n        hal.scheduler->system_initialized(); \\\n```\n\n\u4eca\u56de\u3001hal.init()\u306e\u5b9f\u88c5\u306b\u8e0f\u307f\u8fbc\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\nhal.init()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u306e\u3068\u304a\u308a\u3001scheduler->init()\u547c\u3073\u51fa\u3057\u5f8c\u3001\u5404\u7a2e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u521d\u671f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c:ardupilot/libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\nvoid HAL_Linux::init(int argc,char* const argv[]) const \n{\n    int opt;\n\n    /* \u8d77\u52d5\u6642\u306b\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u51e6\u7406\u3002\u9577\u3044\u3057\u3001\u672c\u8cea\u7684\u306a\u3068\u3053\u308d\u3067\u306a\u3044\u305f\u3081\u3001\u4eca\u306f\u7701\u7565 */\n\n    scheduler->init(NULL);\n    gpio->init();\n#if CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BEBOP\n    i2c->begin();\n    i2c1->begin();\n    i2c2->begin();\n#else\n    i2c->begin();\n#endif\n    rcout->init(NULL);\n    rcin->init(NULL);\n    uartA->begin(115200);\n    uartE->begin(115200);\n    spi->init(NULL);\n    analogin->init(NULL);\n    utilInstance.init(argc+gopt.optind-1, &argv[gopt.optind-1]);\n}\n```\n\n\u3055\u3066\u3001\u3053\u3053\u3067\u306f\u3001scheduler->init()\u306e\u8a73\u7d30\u306b\u8e0f\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\u3002scheduler\u304c\u6307\u3059\u5b9f\u4f53\u306f\u3001\u4ee5\u4e0b\u306eschedulerInstance\u3067\u3059\u3002\n(\u3048\uff1f\u3068\u306a\u3063\u305f\u4eba\u306f\u3001[\u524d\u56de](http://qiita.com/akachochin/items/865db61d43b28455813e)\u5f15\u7528\u3057\u305fHAL_Linux\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068HAL.h\u306e\u4e2d\u306b\u3042\u308bAP_HAL::HAL\u306e\u5b9a\u7fa9\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002)\n\n```c:ardupilot/libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\nstatic LinuxScheduler schedulerInstance;\n```\n\nLinuxScheduler\u306f\u3001\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002public\u306a\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5f15\u7528\u3057\u307e\u3059\u3002\n\n```c:ardupilot/libraries/AP_HAL_Linux/Scheduler.h\nclass Linux::LinuxScheduler : public AP_HAL::Scheduler {\n\ntypedef void *(*pthread_startroutine_t)(void *);\n\npublic:\n    LinuxScheduler();\n    void     init(void* machtnichts);\n    void     delay(uint16_t ms);\n    uint32_t millis();\n    uint32_t micros();\n    uint64_t millis64();\n    uint64_t micros64();\n    void     delay_microseconds(uint16_t us);\n    void     register_delay_callback(AP_HAL::Proc,\n                uint16_t min_time_ms);\n\n    void     register_timer_process(AP_HAL::MemberProc);\n    void     register_io_process(AP_HAL::MemberProc);\n    void     suspend_timer_procs();\n    void     resume_timer_procs();\n\n    bool     in_timerprocess();\n\n    void     register_timer_failsafe(AP_HAL::Proc, uint32_t period_us);\n\n    void     begin_atomic();\n    void     end_atomic();\n\n    bool     system_initializing();\n    void     system_initialized();\n\n    void     panic(const prog_char_t *errormsg) NORETURN;\n    void     reboot(bool hold_in_bootloader);\n\n    void     stop_clock(uint64_t time_usec);\n```\n\nscheduler\u306b\u3042\u308a\u304c\u3061\u306a\u6642\u9593\u306b\u95a2\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u3067\u306a\u304f\u3001reboot()\u3084panic()\u3001atomic\u306a\u3093\u305f\u3089\u306e\u3088\u3046\u306a\u6392\u4ed6\u3092\u9023\u60f3\u3055\u305b\u308b\u3082\u306e\u307e\u3067\u624b\u5e83\u3044\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n### Scheduler::init()\u306e\u5b9f\u88c5\nscheduler::init()\u3092\u8aad\u307f\u307e\u3059\u3002\u3053\u308c\u306f\u306a\u304b\u306a\u304b\u91cd\u8981\u305d\u3046\u306a\u306e\u3067\u3001\u8a73\u3057\u304f\u898b\u307e\u3057\u3087\u3046\u3002\n\n```cpp:ardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\nvoid LinuxScheduler::init(void* machtnichts)\n{\n    mlockall(MCL_CURRENT|MCL_FUTURE);\n\n    clock_gettime(CLOCK_MONOTONIC, &_sketch_start_time);\n\n    struct sched_param param = { .sched_priority = APM_LINUX_MAIN_PRIORITY };\n    sched_setscheduler(0, SCHED_FIFO, &param);\n\n    struct {\n        pthread_t *ctx;\n        int rtprio;\n        const char *name;\n        pthread_startroutine_t start_routine;\n    } *iter, table[] = {\n    // \u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3002\u8a18\u8ff0\u304c\u9577\u304f\u304b\u3064\u5f8c\u8ff0\u3059\u308b\u305f\u3081\u3001\u7701\u7565\u3002\n    };\n    \n    if (geteuid() != 0) {\n        printf(\"WARNING: running as non-root. Will not use realtime scheduling\\n\");\n    }\n\n    for (iter = table; iter->ctx; iter++)\n        _create_realtime_thread(iter->ctx, iter->rtprio, iter->name,\n                                iter->start_routine);\n}\n```\n\n### mlockall()\u306b\u3064\u3044\u3066\n\n```cpp:LinuxScheduler::init()\u304b\u3089\u306e\u629c\u7c8b\n    mlockall(MCL_CURRENT|MCL_FUTURE);\n```\n\nmlockall()\u3068\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5185\u306b\u30de\u30c3\u30d7\u3055\u308c\u305f\u30da\u30fc\u30b8\u5168\u3066\u304c\u30ec\u30b8\u30c7\u30f3\u30c8\u3067\u304b\u3064\u30da\u30fc\u30b8\u30a2\u30a6\u30c8 or \u30b9\u30ef\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306elibc\u95a2\u6570\u3067\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u5f15\u6570\u3067MCL_FUTURE\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001mlockall()\u547c\u3073\u51fa\u3057\u4ee5\u5f8c\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30e1\u30e2\u30ea\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u3068\u306a\u308a\u307e\u3059\u3002\n(\u4f8b\u3048\u3070mlockall()\u547c\u3073\u51fa\u3057\u5f8c\u306emalloc()\u306b\u3088\u308b\u52d5\u7684\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002)\n\u306a\u304a\u3001mlock_all()\u306e\u8a73\u7d30\u306f\u3001[Linux\u306eman\u30da\u30fc\u30b8](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/mlock.2.html)\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\n##### \u30ec\u30b8\u30c7\u30f3\u30c8\n\u307e\u305f\u3001\u300c\u30ec\u30b8\u30c7\u30f3\u30c8\u300d\u3068\u3044\u3046\u306e\u306f\u3001\u300c\u3042\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u7269\u7406\u30e1\u30e2\u30ea\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u300d\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u7a7a\u9593\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306f\u539f\u5247\u3068\u3057\u3066COW(\u30b3\u30d4\u30fc\u30aa\u30f3\u30e9\u30a4\u30c8)\u3067\u3059\u3002\nCOW\u5c5e\u6027\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5834\u5408\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5272\u5f53\u6642\u3067\u306a\u304f\u3001\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u884c\u308f\u308c\u305f\u3068\u304d\u306b\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u5f53\u304c\u884c\u308f\u308c\u3001\u30ec\u30b8\u30c7\u30f3\u30c8\u306a\u72b6\u614b\u3068\u306a\u308a\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u5177\u4f53\u7684\u306b\u66f8\u304f\u3068\u3001\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u767a\u751f\u6642\u306b\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u304c\u767a\u751f\u3057\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u7269\u7406\u30e1\u30e2\u30ea\u306e\u5272\u5f53\u3092\u3059\u308b\u4ed5\u7d44\u307f\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u3001\u300c\u5b9f\u969b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u306f\u7269\u7406\u30e1\u30e2\u30ea\u3092\u5272\u308a\u5f53\u3066\u306a\u3044\u306e\u3067\u3001\u7121\u99c4\u306b\u7269\u7406\u30e1\u30e2\u30ea\u3092\u4f7f\u308f\u306a\u3044\u300d\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u305d\u306e\u53cd\u9762\u3001\u300c\u5b9f\u969b\u306e\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6642\u306b\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u52d5\u4f5c\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6642\u306b\u4f59\u5206\u306a\u6642\u9593\u304c\u304b\u304b\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u300d\u3068\u3082\u8a00\u3048\u307e\u3059\u3002\n\n##### mlock_all()\u547c\u3073\u51fa\u3057\u7406\u7531\u306b\u3064\u3044\u3066\n\u7d44\u307f\u8fbc\u307f\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u300c\u305f\u307e\u306b\u9045\u304f\u306a\u308a\u3001\u51e6\u7406\u6642\u9593\u306b\u4e0d\u78ba\u5b9f\u3055\u304c\u52a0\u308f\u308b\u300d\u3053\u3068\u3092\u3057\u3070\u3057\u3070\u5acc\u3044\u307e\u3059\u3002\nPC\u306b\u8f09\u3063\u3066\u3044\u308bCore i7\u3068\u304b\u3067\u306a\u304f\u3001Cortex-A9\u7a0b\u5ea6(\u203b1)\u306eCPU\u3067\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u5b9f\u884c\u306b\u3082\u305d\u308c\u306a\u308a\u306e\u30b3\u30b9\u30c8\u304c\u3042\u308a\u305d\u3046\u3067\u3059(\u73fe\u5b9f\u306b\u8a08\u6e2c\u3057\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u63a8\u6e2c\u3067\u3059)\u3002\n\u8a2d\u8a08\u8005\u304c\u628a\u63e1\u3067\u304d\u308b\u8d77\u52d5\u30d7\u30ed\u30bb\u30b9(\u30b9\u30ec\u30c3\u30c9)\u6570\u3067\u5927\u4f53\u306eRAM\u6d88\u8cbb\u91cf\u304c\u8a2d\u8a08\u6bb5\u968e\u3067\u5206\u304b\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\u3088\u308a\u3082\u51e6\u7406\u6642\u9593\u306e\u78ba\u5b9f\u3055\u3092\u9078\u629e\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u3068\u5224\u65ad\u3059\u308b\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u3046\u3057\u305f\u7406\u7531\u304b\u3089\u3001mlockall()\u306b\u3088\u3063\u3066\u3001\u30de\u30c3\u30d7\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u5bfe\u3057\u3066\u7269\u7406\u30e1\u30e2\u30ea\u304c\u30ec\u30b8\u30c7\u30f3\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3068\u63a8\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u203b1.[\u3053\u306eWeb\u30b5\u30a4\u30c8](http://www.drone.jp/news/20151020115330.html)\u306b\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30d5\u30e9\u30a4\u30c8\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u898b\u308b\u9650\u308a\u3001Cortex-A9\u30ec\u30d9\u30eb\u306eCPU\u63a1\u7528\u4f8b\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\n## clock_gettime()\n\n```cpp:LinuxScheduler::init()\u304b\u3089\u306e\u629c\u7c8b\n    clock_gettime(CLOCK_MONOTONIC, &_sketch_start_time);\n```\n\nclock_gettime()\u306b\u3064\u3044\u3066\u306f\u3001\u3084\u306f\u308a[Linux man](https://linuxjm.osdn.jp/html/LDP_man-pages/man2/clock_gettime.2.html)\u304c\u8a73\u3057\u3044\u3002\n\u3053\u308c\u306f\u3001\u30bd\u30d5\u30c8\u8d77\u52d5\u958b\u59cb\u6642\u70b9\u3067\u306e\u6642\u9593\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u958b\u59cb\u6642\u70b9\u3067\u306e\u300c\u30af\u30ed\u30c3\u30af\u5024\u300d\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u8abf\u5897\u52a0\u3059\u308b\u3060\u3051\u3067\u3001\u4f8b\u3048settimeofday()\u3067\u6642\u523b\u3092\u904e\u53bb\u306b\u5909\u66f4\u3057\u3066\u3082\u6e1b\u5c11\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u30b9\u30ec\u30c3\u30c9\u751f\u6210\n\n\u6700\u5f8c\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u304b\u3089\u3001\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u306e\u95a2\u6570\u3067\u3042\u308b\u3068\u60f3\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n```c:LinuxScheduler::init()\u306e\u629c\u7c8b\n    for (iter = table; iter->ctx; iter++)\n        _create_realtime_thread(iter->ctx, iter->rtprio, iter->name,\n                                iter->start_routine);\n```\n\n\u7d9a\u304d\u3092\u8aad\u3080\u3068\u3001\u3084\u306f\u308apthread_create()\u3092\u547c\u3073\u51fa\u3057\u3066\u30b9\u30ec\u30c3\u30c9\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp:ardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\nvoid LinuxScheduler::_create_realtime_thread(pthread_t *ctx, int rtprio,\n                                             const char *name,\n                                             pthread_startroutine_t start_routine)\n{\n    struct sched_param param = { .sched_priority = rtprio };\n    pthread_attr_t attr;\n    int r;\n\n    pthread_attr_init(&attr);\n    /*\n      we need to run as root to get realtime scheduling. Allow it to\n      run as non-root for debugging purposes, plus to allow the Replay\n      tool to run\n     */\n    if (geteuid() == 0) {\n        pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);\n        pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n        pthread_attr_setschedparam(&attr, &param);\n    }\n    r = pthread_create(ctx, &attr, start_routine, this);\n    if (r != 0) {\n        hal.console->printf(\"Error creating thread '%s': %s\\n\",\n                            name, strerror(r));\n        panic(PSTR(\"Failed to create thread\"));\n    }\n    pthread_attr_destroy(&attr);\n\n    if (name) {\n        pthread_setname_np(*ctx, name);\n    }\n}\n```\n\n\u3053\u3053\u3067\u898b\u308b\u3079\u304d\u306f\u4ee5\u4e0b\u306e\u7b87\u6240\u3067\u3059\u3002\n\n```cpp:ardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\n    struct sched_param param = { .sched_priority = rtprio };\n    // \u7565\n        pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n        pthread_attr_setschedparam(&attr, &param);\n```\n\npthread\\_attr\\_setschedpolicy()\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7\u3092SCHED_FIFO\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001POSIX\u3067\u5b9a\u3081\u3089\u308c\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u5411\u3051\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7\u306e1\u3064\u3067\u3001\u30dd\u30ea\u30b7\u306f\u4ee5\u4e0b\u306e3\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\n| \u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u30dd\u30ea\u30b7 | \u6982\u8981 |\n|:---|:---|:---|\n| SCHED_FIFO | yield()\u3067\u81ea\u767a\u7684\u306b\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3059\u304b\u3001\u30d6\u30ed\u30c3\u30af\u3059\u308b\u307e\u3067\u512a\u5148\u5ea6\u306e\u9ad8\u3044\u30b9\u30ec\u30c3\u30c9\u304c\u5b9f\u884c\u6a29\u3092\u7372\u5f97\u3057\u52d5\u304d\u7d9a\u3051\u308b\u3002 |\n| SCHED_RR | SCHED_FIFO\u3068\u57fa\u672c\u7684\u306b\u540c\u3058\u3060\u304c\u3001\u30bf\u30a4\u30e0\u30b9\u30e9\u30a4\u30b9(\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694)\u3092\u4f7f\u3044\u304d\u3063\u305f\u5834\u5408\u306b\u3082\u5b9f\u884c\u6a29\u3092\u624b\u653e\u3059 |\n| SCHED_OTHER | \"\u666e\u901a\u306e\" Unix\u306e\u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6\u3002\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306f\u306a\u3044\u3002|\n\n\u8981\u3059\u308b\u306b\u3001Linux\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0OS\u7684\u306b\u6271\u304a\u3046\u3068\u3059\u308b\u5de5\u592b\u3067\u3059\u3002\n\u5c0f\u898f\u6a21\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308c\u3070\u3001\u8a2d\u8a08\u8005\u304c\u30b7\u30b9\u30c6\u30e0\u306e\u5168\u5bb9\u3092\u628a\u63e1\u3067\u304d\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u30b9\u30ec\u30c3\u30c9(or \u30d7\u30ed\u30bb\u30b9 or \u30bf\u30b9\u30af)\u306e\u512a\u5148\u5ea6\u3092\u304b\u3063\u3061\u308a\u3068\u6c7a\u3081\u308b\u3053\u3068\u304c\u591a\u3005\u3042\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001POSIX\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u898f\u683c\u306e\u8a73\u7d30\u306f[\u3053\u306e\u8ad6\u6587](https://www.cs.unc.edu/~anderson/teach/comp790/papers/posix-rt.pdf)\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u4e00\u8aad\u3059\u308b\u3068\u9762\u767d\u3044\u3067\u3059\u3088\u3002\u3044\u3064\u3082\u3068\u9055\u3063\u305f\u9854\u3092\u57a3\u9593\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n#### \u751f\u6210\u3057\u3088\u3046\u3068\u3059\u308b\u5404\u30b9\u30ec\u30c3\u30c9\u306e\u78ba\u8a8d\nLinuxScheduler::init()\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308btable\u304b\u3089\u8a2d\u5b9a\u5024\u3092\u629c\u304d\u51fa\u3057\u305f\u3082\u306e\u304c\u4ee5\u4e0b\u306e\u8868\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u901a\u308a\u3001\u751f\u6210\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306f5\u3064\u3067\u3059\u3002\n\n| \u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6(rtprio) | \u30b9\u30ec\u30c3\u30c9\u540d | \u5b9f\u4f53(start_routine) |\n|:---|:---|:---|\n| APM_LINUX_TIMER_PRIORITY | sched-timer | &Linux::LinuxScheduler::\\_timer\\_thread |\n| APM_LINUX_UART_PRIORITY | sched-uart | &Linux::LinuxScheduler::\\_uart\\_thread |\n| APM_LINUX_RCIN_PRIORITY | sched-rcin | &Linux::LinuxScheduler::\\_rcin\\_thread |\n| APM_LINUX_TONEALARM_PRIORITY | sched-tonealarm | &Linux::LinuxScheduler::\\_tonealarm\\_thread |\n| APM_LINUX_IO_PRIORITY | sched-io | Linux::LinuxScheduler::\\_io\\_thread |\n\n\u307e\u305f\u3001\u30b9\u30ec\u30c3\u30c9\u512a\u5148\u5ea6\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u304a\u3001pthread\u3067\u306f\u512a\u5148\u5ea6\u306e\u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u512a\u5148\u5ea6\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002\n\n```cpp:ardupilot/libraries/AP_HAL_Linux/Scheduler.cpp\n#define APM_LINUX_TIMER_PRIORITY        15\n#define APM_LINUX_UART_PRIORITY         14\n#define APM_LINUX_RCIN_PRIORITY         13\n#define APM_LINUX_MAIN_PRIORITY         12\n#define APM_LINUX_TONEALARM_PRIORITY    11\n#define APM_LINUX_IO_PRIORITY           10\n```\n\n\u3084\u306f\u308a\u3001\u30bf\u30a4\u30de\u306b\u7d61\u3080\u51e6\u7406\u304c\u4e00\u756a\u512a\u5148\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u306d\u3002\n\n## \u6b21\u56de\n\u4eca\u56de\u898b\u305f\u30b3\u30fc\u30c9\u306f\u304a\u305d\u3089\u304f100\u884c\u7a0b\u5ea6\u3067\u3059\u304c\u3001\u3053\u306e\u77ed\u3044\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u591a\u304f\u306e\u5de5\u592b\u304c\u306a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u6bd4\u8f03\u7684\u5c0f\u898f\u6a21\u306a\u7d44\u307f\u8fbc\u307fLinux\u74b0\u5883\u3067\u3042\u308c\u3070\u3001\u3053\u3046\u3057\u305f\u30ce\u30a6\u30cf\u30a6\u3092\u6d3b\u304b\u305b\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u6b21\u56de\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n", "tags": ["Linux", "drone", "Dronecode", "kernel"]}