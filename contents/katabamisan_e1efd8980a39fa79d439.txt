{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u6295\u7a3f\u3067\u306fWRL\u3068MMDevice API\u3092\u7528\u3044\u3066\u30c7\u30d0\u30a4\u30b9\u3068\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u53d6\u5f97\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u305d\u306e\u30b3\u30fc\u30c9\u3092\u6539\u5909\u3057\u3066\u30c7\u30d0\u30a4\u30b9\u306e\u5217\u6319\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u73fe\u5728\u306f\u88dc\u52a9\u95a2\u6570\u3082\u542b\u3081\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u3046\u3061\u5225\u500b\u306b\u5206\u3051\u3088\u3046\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n#pragma comment(lib, \"propsys.lib\")\n\n#include <memory>\n#include <string>\n#include <sstream>\n#include <vector>\n\n#define STRICT\n#include <Windows.h>\n#include <propvarutil.h>\n\n#include <wrl.h>\n\n#include <mmdeviceapi.h>\n#include <endpointvolume.h>\n#include <functiondiscoverykeys_devpkey.h>\n\nusing namespace std;\nusing namespace Microsoft::WRL;\nusing namespace Microsoft::WRL::Details;\n\n// \u30b9\u30b3\u30fc\u30d7\u7bc4\u56f2\u3067\u306eCOM\u306e\u521d\u671f\u5316\u30fb\u89e3\u653e\u3092\u81ea\u52d5\u5316\u3057\u307e\u3059\u3002\n// ref. http://msdn.microsoft.com/ja-jp/library/jj822931(v=vs.110).aspx\nclass CoInitializeWrapper\n{\nprivate:\n    HRESULT m_hr;\npublic:\n    CoInitializeWrapper(DWORD dwCoInit = 0)\n    {\n        m_hr = CoInitializeEx(nullptr, dwCoInit);\n    }\n\n    ~CoInitializeWrapper()\n    {\n        if (SUCCEEDED(m_hr))\n        {\n            CoUninitialize();\n        }\n    }\n\n    operator HRESULT() const { return m_hr; }\n};\n\ntemplate <typename T> struct CoTaskMem_deleter\n{\n    CoTaskMem_deleter() {}\n    void operator() (T* p) { CoTaskMemFree(p); }\n};\n\nHRESULT PropertyStoreReadStringValueAlloc(\n    IN IPropertyStore* pPropStore,\n    IN const PROPERTYKEY& key,\n    OUT LPWSTR* ppsz);\n\nLPWSTR PropertyStoreReadStringValueAllocAutoException(\n    IN IPropertyStore* pPropStore,\n    IN const PROPERTYKEY& key);\n\nint WINAPI wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int)\n{\n    // COM\u306e\u521d\u671f\u5316\n    CoInitializeWrapper initialize;\n    if (FAILED(initialize)) RaiseException(initialize);\n\n    // MMDeviceEnumerator\u306e\u4f5c\u6210\n    ComPtr<IMMDeviceEnumerator> deviceEnumerator;\n    HRESULT hr = CoCreateInstance(\n        __uuidof(MMDeviceEnumerator),\n        nullptr,\n        CLSCTX_INPROC_SERVER,\n        IID_PPV_ARGS(&deviceEnumerator));\n    if (FAILED(hr)) RaiseException(hr);\n\n    // \u5168\u3066\u306e\u72b6\u614b\u306e\u51fa\u529b\u30aa\u30fc\u30c7\u30a3\u30aa\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5217\u6319\n    ComPtr<IMMDeviceCollection> devices;\n    hr = deviceEnumerator->EnumAudioEndpoints(\n        EDataFlow::eAll,\n        DEVICE_STATE_ACTIVE | DEVICE_STATE_DISABLED | DEVICE_STATE_NOTPRESENT | DEVICE_STATE_UNPLUGGED,\n        &devices);\n    if (FAILED(hr)) RaiseException(hr);\n\n    // \u30c7\u30d0\u30a4\u30b9\u3092\u5217\u6319\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8aac\u660e\u3092\u53d6\u5f97\n    vector<wstring> device_descriptions;\n    UINT uNumDevices;\n    hr = devices->GetCount(&uNumDevices);\n    if (FAILED(hr)) RaiseException(hr);\n    for (UINT i = 0; i < uNumDevices; i++)\n    {\n        ComPtr<IMMDevice> device;\n        hr = devices->Item(i, &device);\n\n        ComPtr<IPropertyStore> propStore;\n        hr = device->OpenPropertyStore(STGM_READ, &propStore);\n        if (FAILED(hr)) RaiseException(hr);\n        unique_ptr<WCHAR, CoTaskMem_deleter<WCHAR>> device_description(\n            PropertyStoreReadStringValueAllocAutoException(propStore.Get(),\n            PKEY_Device_DeviceDesc));\n\n        device_descriptions.push_back(device_description.get());\n    }\n\n    // ','\u3067\u533a\u5207\u3063\u3066\u8868\u793a\n    wostringstream s;\n    copy(device_descriptions.begin(), device_descriptions.end(),\n        ostream_iterator<wstring, WCHAR>(s, L\",\"));\n    MessageBox(HWND_DESKTOP, s.str().c_str(), nullptr, MB_OK);\n\n    return 0;\n}\n\n// IPropertyStore\u304b\u3089\u6587\u5b57\u5217\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n// \u53d6\u5f97\u3057\u305f\u6587\u5b57\u5217\u306fCoTaskMemFree\u3067\u89e3\u653e\u3057\u3066\u4e0b\u3055\u3044\u3002\nHRESULT PropertyStoreReadStringValueAlloc(\n    IN IPropertyStore* pPropStore,\n    IN const PROPERTYKEY& key,\n    OUT LPWSTR* ppsz)\n{\n    PROPVARIANT propvar;\n    PropVariantInit(&propvar);\n    HRESULT hr = pPropStore->GetValue(key, &propvar);\n    if (SUCCEEDED(hr))\n        hr = PropVariantToStringAlloc(propvar, ppsz);\n    PropVariantClear(&propvar);\n    return hr;\n}\n\n// IPropertyStore\u304b\u3089\u6587\u5b57\u5217\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n// \u53d6\u5f97\u3057\u305f\u6587\u5b57\u5217\u306fCoTaskMemFree\u3067\u89e3\u653e\u3057\u3066\u4e0b\u3055\u3044\u3002\n// \u5185\u90e8\u3067\u95a2\u6570\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u5f15\u6570\u306bMicrosoft::WRL::Details::RaiseException\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\nLPWSTR PropertyStoreReadStringValueAllocAutoException(\n    IN IPropertyStore* pPropStore,\n    IN const PROPERTYKEY& key)\n{\n    LPTSTR buffer = nullptr;\n    HRESULT hr = PropertyStoreReadStringValueAlloc(\n        pPropStore, key, &buffer);\n    if (FAILED(hr))\n        RaiseException(hr);\n    return buffer;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30b9\u30d4\u30fc\u30ab\u30fc,\u30de\u30a4\u30af,\u30b9\u30c6\u30ec\u30aa \u30df\u30ad\u30b5\u30fc,\n\nIMMDeviceEnumerator.EnumAudioEndpoints\u30e1\u30bd\u30c3\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3042\u308b\u3088\u3046\u306b\u5f15\u6570\u3068\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e\uff08ERole\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\uff09\u3068\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u7a2e\u985e\u306b\u95a2\u3057\u3066\u306fERole::eRender, ERole::eCapture, ERole::eAll\u306e\u4f55\u308c\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5bfe\u3057\u3066\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u7701\u7565\u3057\u305f\u3064\u3082\u308a\u30670\u3092\u6307\u5b9a\u3059\u308b\u3068\u5931\u6557\u3059\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5217\u6319\u3059\u308b\u306b\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306bDEVICE_STATE_*\u3092\u8ad6\u7406\u548c\u6f14\u7b97|\u3067\u3064\u306a\u304e\u307e\u3059\u3002\n#\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u6295\u7a3f\u3067\u306fWRL\u3068MMDevice API\u3092\u7528\u3044\u3066\u30c7\u30d0\u30a4\u30b9\u3068\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u53d6\u5f97\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u305d\u306e\u30b3\u30fc\u30c9\u3092\u6539\u5909\u3057\u3066\u30c7\u30d0\u30a4\u30b9\u306e\u5217\u6319\u3092\u884c\u3044\u307e\u3059\u3002\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u73fe\u5728\u306f\u88dc\u52a9\u95a2\u6570\u3082\u542b\u3081\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u3046\u3061\u5225\u500b\u306b\u5206\u3051\u3088\u3046\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#pragma comment(lib, \"propsys.lib\")\n\n#include <memory>\n#include <string>\n#include <sstream>\n#include <vector>\n\n#define STRICT\n#include <Windows.h>\n#include <propvarutil.h>\n\n#include <wrl.h>\n\n#include <mmdeviceapi.h>\n#include <endpointvolume.h>\n#include <functiondiscoverykeys_devpkey.h>\n\nusing namespace std;\nusing namespace Microsoft::WRL;\nusing namespace Microsoft::WRL::Details;\n\n// \u30b9\u30b3\u30fc\u30d7\u7bc4\u56f2\u3067\u306eCOM\u306e\u521d\u671f\u5316\u30fb\u89e3\u653e\u3092\u81ea\u52d5\u5316\u3057\u307e\u3059\u3002\n// ref. http://msdn.microsoft.com/ja-jp/library/jj822931(v=vs.110).aspx\nclass CoInitializeWrapper\n{\nprivate:\n\tHRESULT m_hr;\npublic:\n\tCoInitializeWrapper(DWORD dwCoInit = 0)\n\t{\n\t\tm_hr = CoInitializeEx(nullptr, dwCoInit);\n\t}\n\n\t~CoInitializeWrapper()\n\t{\n\t\tif (SUCCEEDED(m_hr))\n\t\t{\n\t\t\tCoUninitialize();\n\t\t}\n\t}\n\n\toperator HRESULT() const { return m_hr; }\n};\n\ntemplate <typename T> struct CoTaskMem_deleter\n{\n\tCoTaskMem_deleter() {}\n\tvoid operator() (T* p) { CoTaskMemFree(p); }\n};\n\nHRESULT PropertyStoreReadStringValueAlloc(\n\tIN IPropertyStore* pPropStore,\n\tIN const PROPERTYKEY& key,\n\tOUT LPWSTR* ppsz);\n\nLPWSTR PropertyStoreReadStringValueAllocAutoException(\n\tIN IPropertyStore* pPropStore,\n\tIN const PROPERTYKEY& key);\n\nint WINAPI wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int)\n{\n\t// COM\u306e\u521d\u671f\u5316\n\tCoInitializeWrapper initialize;\n\tif (FAILED(initialize)) RaiseException(initialize);\n\n\t// MMDeviceEnumerator\u306e\u4f5c\u6210\n\tComPtr<IMMDeviceEnumerator> deviceEnumerator;\n\tHRESULT hr = CoCreateInstance(\n\t\t__uuidof(MMDeviceEnumerator),\n\t\tnullptr,\n\t\tCLSCTX_INPROC_SERVER,\n\t\tIID_PPV_ARGS(&deviceEnumerator));\n\tif (FAILED(hr)) RaiseException(hr);\n\n\t// \u5168\u3066\u306e\u72b6\u614b\u306e\u51fa\u529b\u30aa\u30fc\u30c7\u30a3\u30aa\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5217\u6319\n\tComPtr<IMMDeviceCollection> devices;\n\thr = deviceEnumerator->EnumAudioEndpoints(\n\t\tEDataFlow::eAll,\n\t\tDEVICE_STATE_ACTIVE | DEVICE_STATE_DISABLED | DEVICE_STATE_NOTPRESENT | DEVICE_STATE_UNPLUGGED,\n\t\t&devices);\n\tif (FAILED(hr)) RaiseException(hr);\n\n\t// \u30c7\u30d0\u30a4\u30b9\u3092\u5217\u6319\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8aac\u660e\u3092\u53d6\u5f97\n\tvector<wstring> device_descriptions;\n\tUINT uNumDevices;\n\thr = devices->GetCount(&uNumDevices);\n\tif (FAILED(hr)) RaiseException(hr);\n\tfor (UINT i = 0; i < uNumDevices; i++)\n\t{\n\t\tComPtr<IMMDevice> device;\n\t\thr = devices->Item(i, &device);\n\n\t\tComPtr<IPropertyStore> propStore;\n\t\thr = device->OpenPropertyStore(STGM_READ, &propStore);\n\t\tif (FAILED(hr)) RaiseException(hr);\n\t\tunique_ptr<WCHAR, CoTaskMem_deleter<WCHAR>> device_description(\n\t\t\tPropertyStoreReadStringValueAllocAutoException(propStore.Get(),\n\t\t\tPKEY_Device_DeviceDesc));\n\n\t\tdevice_descriptions.push_back(device_description.get());\n\t}\n\n\t// ','\u3067\u533a\u5207\u3063\u3066\u8868\u793a\n\twostringstream s;\n\tcopy(device_descriptions.begin(), device_descriptions.end(),\n\t\tostream_iterator<wstring, WCHAR>(s, L\",\"));\n\tMessageBox(HWND_DESKTOP, s.str().c_str(), nullptr, MB_OK);\n\n\treturn 0;\n}\n\n// IPropertyStore\u304b\u3089\u6587\u5b57\u5217\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n// \u53d6\u5f97\u3057\u305f\u6587\u5b57\u5217\u306fCoTaskMemFree\u3067\u89e3\u653e\u3057\u3066\u4e0b\u3055\u3044\u3002\nHRESULT PropertyStoreReadStringValueAlloc(\n\tIN IPropertyStore* pPropStore,\n\tIN const PROPERTYKEY& key,\n\tOUT LPWSTR* ppsz)\n{\n\tPROPVARIANT propvar;\n\tPropVariantInit(&propvar);\n\tHRESULT hr = pPropStore->GetValue(key, &propvar);\n\tif (SUCCEEDED(hr))\n\t\thr = PropVariantToStringAlloc(propvar, ppsz);\n\tPropVariantClear(&propvar);\n\treturn hr;\n}\n\n// IPropertyStore\u304b\u3089\u6587\u5b57\u5217\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u8aad\u307f\u8fbc\u3093\u3067\u8fd4\u3057\u307e\u3059\u3002\n// \u53d6\u5f97\u3057\u305f\u6587\u5b57\u5217\u306fCoTaskMemFree\u3067\u89e3\u653e\u3057\u3066\u4e0b\u3055\u3044\u3002\n// \u5185\u90e8\u3067\u95a2\u6570\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u5f15\u6570\u306bMicrosoft::WRL::Details::RaiseException\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\nLPWSTR PropertyStoreReadStringValueAllocAutoException(\n\tIN IPropertyStore* pPropStore,\n\tIN const PROPERTYKEY& key)\n{\n\tLPTSTR buffer = nullptr;\n\tHRESULT hr = PropertyStoreReadStringValueAlloc(\n\t\tpPropStore, key, &buffer);\n\tif (FAILED(hr))\n\t\tRaiseException(hr);\n\treturn buffer;\n}\n```\n\n##\u5b9f\u884c\u7d50\u679c\n\n\u30b9\u30d4\u30fc\u30ab\u30fc,\u30de\u30a4\u30af,\u30b9\u30c6\u30ec\u30aa \u30df\u30ad\u30b5\u30fc,\n\n#IMMDeviceEnumerator.EnumAudioEndpoints\u30e1\u30bd\u30c3\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3042\u308b\u3088\u3046\u306b\u5f15\u6570\u3068\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e\uff08ERole\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\uff09\u3068\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\n\u7a2e\u985e\u306b\u95a2\u3057\u3066\u306fERole::eRender, ERole::eCapture, ERole::eAll\u306e\u4f55\u308c\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5bfe\u3057\u3066\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u7701\u7565\u3057\u305f\u3064\u3082\u308a\u30670\u3092\u6307\u5b9a\u3059\u308b\u3068\u5931\u6557\u3059\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\u5168\u3066\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5217\u6319\u3059\u308b\u306b\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306bDEVICE_STATE_*\u3092\u8ad6\u7406\u548c\u6f14\u7b97```|```\u3067\u3064\u306a\u304e\u307e\u3059\u3002", "tags": ["C++", "C++11", "WRL", "STL"]}