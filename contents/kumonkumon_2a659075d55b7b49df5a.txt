{"context": "(\u76ee\u6b21\u306f\u3053\u3061\u3089)\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u59cb\u3081\u3068\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30672\u30af\u30e9\u30b9\u306e\u5206\u985e\u554f\u984c\u3092\u6271\u3063\u305f\u3002\u4eca\u56de\u306f\u3001\u305d\u308c\u3092\u591a\u30af\u30e9\u30b9\u306b\u62e1\u5f35\u3057\u3066\u307f\u308b\u3002\n\u3053\u308c\u306f\u3001TensorFlow\u306eTutorial\u306eMNIST For ML Beginners\u306b\u76f8\u5f53\u3002\n\n\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff08multinomial logistic regression\uff09\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u591a\u30af\u30e9\u30b9\u3092\u6271\u3046\u969b\u3082\u3001\u300c\u5165\u529b\u3092\u7dda\u5f62\u5909\u63db\u3057\u3066\u6d3b\u6027\u5316\u95a2\u6570\u3092\u304b\u307e\u305b\u3066\u51fa\u529b\u3092\u5f97\u308b\u300d\u3053\u3068\u306b\u5909\u308f\u308a\u306f\u306a\u3044\u3002\u9055\u3044\u306f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u304c\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306b\u7f6e\u304d\u63db\u308f\u308b\u3060\u3051\u3002\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u76ee\u3092\u51dd\u3089\u3057\u3066\u307f\u308b\u3068\u3001Sigmoid\u304cSoftmax\u306b\u7f6e\u304d\u63db\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\n\u30b3\u30fc\u30c9\nmnist_softmax.py\n\nmnist_softmax.py\nfrom helper import *\n\nIMAGE_SIZE = 28 * 28\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_softmax'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('readout'):\n        W = weight_variable([IMAGE_SIZE, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(x, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n        cross_entropy_summary = tf.scalar_summary('cross entropy', cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([cross_entropy_summary, train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n\n\n\n\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n2\u30af\u30e9\u30b9\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u7570\u306a\u308b\u90e8\u5206\u3092\u3002\n\n\u51fa\u529b\u5c64\nsigmoid()\u304csoftmax()\u306b\u3002\n    with tf.name_scope('readout'):\n        W = weight_variable([IMAGE_SIZE, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(x, W) + b)\n\n\n\u6700\u9069\u5316\n\u6d3b\u6027\u5316\u95a2\u6570\u304c\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306b\u306a\u3063\u305f\u95a2\u4fc2\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a8\u5b9a\u306f\u5909\u308f\u3063\u3066\u3001\u5bfe\u6570\u5c24\u5ea6\u6700\u5927\u5316\u304b\u3089\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u6700\u5c0f\u5316\u3068\u3044\u3046\u6700\u9069\u5316\u3068\u306a\u308b\u3002\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n\n\u5b9f\u884c\n2\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u3001\u6559\u5e2b\u30e9\u30d9\u30eb\u3092\u7121\u7406\u77e2\u7406\u5909\u63db\u3057\u3066\u3044\u305f\u304c\u3001\u305d\u308c\u306f\u5143\u306b\u623b\u3057\u3066\u7d20\u76f4\u306b\u4f7f\u3046\u3002\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n\n\u8a55\u4fa1\n2\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u30010.5\u4ee5\u4e0a\u304b\u672a\u6e80\u304b\u3092\u898b\u3066\u3044\u305f\u304c\u3001\u76f4\u63a5\u7684\u306b\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u898b\u3066\u3001\u6b63\u89e3\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3002\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n\n\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300192.4%\u7a0b\u5ea6\u3002\n\n\n\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u3001TensorFlow\u306eTutorial\u306eMNIST For ML Beginners \u307b\u307c\u305d\u306e\u3082\u306e\u3060\u3063\u305f\u306e\u3067\u3001\u6b21\u56de\u306e\u8a18\u4e8b \u3067\u306f\u3001\u3053\u306e\u30e2\u30c7\u30eb\u3092\u3061\u3087\u3063\u3068\u62e1\u5f35\u3057\u3066\u307f\u307e\u3059\u3002\n([\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/kumonkumon/items/6fd05963df92e9eec8c0))\n\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/53e3121e7031b9402205)\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u59cb\u3081\u3068\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30672\u30af\u30e9\u30b9\u306e\u5206\u985e\u554f\u984c\u3092\u6271\u3063\u305f\u3002\u4eca\u56de\u306f\u3001\u305d\u308c\u3092\u591a\u30af\u30e9\u30b9\u306b\u62e1\u5f35\u3057\u3066\u307f\u308b\u3002\n\u3053\u308c\u306f\u3001TensorFlow\u306eTutorial\u306e[MNIST For ML Beginners](https://www.tensorflow.org/versions/r0.7/tutorials/mnist/beginners/index.html)\u306b\u76f8\u5f53\u3002\n\n#\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\uff08multinomial logistic regression\uff09\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u591a\u30af\u30e9\u30b9\u3092\u6271\u3046\u969b\u3082\u3001\u300c\u5165\u529b\u3092\u7dda\u5f62\u5909\u63db\u3057\u3066\u6d3b\u6027\u5316\u95a2\u6570\u3092\u304b\u307e\u305b\u3066\u51fa\u529b\u3092\u5f97\u308b\u300d\u3053\u3068\u306b\u5909\u308f\u308a\u306f\u306a\u3044\u3002\u9055\u3044\u306f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u304c\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306b\u7f6e\u304d\u63db\u308f\u308b\u3060\u3051\u3002\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n![logistic regression](https://qiita-image-store.s3.amazonaws.com/0/127038/2978d228-b216-0334-8460-a72940746117.png)\n\n\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u76ee\u3092\u51dd\u3089\u3057\u3066\u307f\u308b\u3068\u3001`Sigmoid`\u304c`Softmax`\u306b\u7f6e\u304d\u63db\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n![multinomial logistic regression](https://qiita-image-store.s3.amazonaws.com/0/127038/721f869a-3e3f-cc8a-e710-248c8481ad1c.png)\n\n##\u30b3\u30fc\u30c9\n[mnist_softmax.py](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/mnist_softmax.py)\n\n```py:mnist_softmax.py\nfrom helper import *\n\nIMAGE_SIZE = 28 * 28\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_softmax'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('readout'):\n        W = weight_variable([IMAGE_SIZE, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(x, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n        cross_entropy_summary = tf.scalar_summary('cross entropy', cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([cross_entropy_summary, train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n\n```\n\n##\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n2\u30af\u30e9\u30b9\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u7570\u306a\u308b\u90e8\u5206\u3092\u3002\n\n###\u51fa\u529b\u5c64\n`sigmoid()`\u304c`softmax()`\u306b\u3002\n\n```py\n    with tf.name_scope('readout'):\n        W = weight_variable([IMAGE_SIZE, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(x, W) + b)\n```\n\n###\u6700\u9069\u5316\n\u6d3b\u6027\u5316\u95a2\u6570\u304c\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306b\u306a\u3063\u305f\u95a2\u4fc2\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a8\u5b9a\u306f\u5909\u308f\u3063\u3066\u3001\u5bfe\u6570\u5c24\u5ea6\u6700\u5927\u5316\u304b\u3089\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u6700\u5c0f\u5316\u3068\u3044\u3046\u6700\u9069\u5316\u3068\u306a\u308b\u3002\n\n```py\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n```\n\n###\u5b9f\u884c\n2\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u3001\u6559\u5e2b\u30e9\u30d9\u30eb\u3092\u7121\u7406\u77e2\u7406\u5909\u63db\u3057\u3066\u3044\u305f\u304c\u3001\u305d\u308c\u306f\u5143\u306b\u623b\u3057\u3066\u7d20\u76f4\u306b\u4f7f\u3046\u3002\n\n```py\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n```\n\n###\u8a55\u4fa1\n2\u30af\u30e9\u30b9\u306e\u5834\u5408\u306f\u30010.5\u4ee5\u4e0a\u304b\u672a\u6e80\u304b\u3092\u898b\u3066\u3044\u305f\u304c\u3001\u76f4\u63a5\u7684\u306b\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u898b\u3066\u3001\u6b63\u89e3\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3002\n\n```py\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n```\n\n##\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300192.4%\u7a0b\u5ea6\u3002\n![Screen Shot 2016-05-26 at 00.51.16.png](https://qiita-image-store.s3.amazonaws.com/0/127038/bf343791-8ad5-dd4d-f7cf-dd4fed0e8e59.png)\n\n#\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u3001TensorFlow\u306eTutorial\u306e[MNIST For ML Beginners](https://www.tensorflow.org/versions/r0.7/tutorials/mnist/beginners/index.html) \u307b\u307c\u305d\u306e\u3082\u306e\u3060\u3063\u305f\u306e\u3067\u3001[\u6b21\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/15dbdb291f3525a3b95b) \u3067\u306f\u3001\u3053\u306e\u30e2\u30c7\u30eb\u3092\u3061\u3087\u3063\u3068\u62e1\u5f35\u3057\u3066\u307f\u307e\u3059\u3002\n", "tags": ["TensorFlow", "DeepLearning", "CNN", "ConvolutionalNeuralNetworks", "\u6df1\u5c64\u5b66\u7fd2"]}