{"context": " More than 1 year has passed since last update.I think writing controllers examples are pretty tough.\nFor example, when you have to write some update method examples, \n\nfirst we gotta save a data to the DB which we are going to update, \nand prepare params(which is based on the data which we saved in 1.) to send to the update method, \nand finnaly, execute the update method.\n\nand when it goes with the nested object forms, it gets tougher.\nI'll show you how I did it, its kinda messed up, so if you have some better solution, please comment.\n\nFactoryGirl Data(preparation)\nfirst we need to get FactoryGirl ready, so we can get some test data and use those.\nlets say we have an Article table and a ArticleBody table, the relations will be like bellow.\nIt'll be basic nested objects using nested_attributes_for and has_many.\nIf you don't understand those, there's some good tutorial on rails cast which I mentioned here, so look at that.\n\nmodels\nclass Article < ActiveRecord::Base\n  attr_accessible :title\n\n  has_many :article_bodies, :dependent => :delete_all\n  accepts_nested_attributes_for :article_bodies, :allow_destroy => true\nend\n\nclass ArticleBody < ActiveRecord::Base\n  attr_accessible :subtitle, :body\n\n  belongs_to :article\nend\n\n\nthe factory girl data will be like bellow\n\nfactory.rb\nFactoryGirl.define do\n  factory :article, :class => 'Article' do\n    title \"test article title\"\n\n    factory :article_with_bodies, :class => 'Article' do\n      ignore do\n        body_count 3\n      end\n\n      after(:create) do |article, evaluator|\n        FactoryGirl.create_list(:article_body, evaluator.body_count, article: article)\n      end\n    end\n  end\n\n  factory :article_body, :class => 'ArticleBody' do\n    article\n    sequence(:subtitle) { |n| \"subtitle #{n}\"}\n    sequence(:body) { |n| \"body #{n}\"}\n  end\nend\n\n\nI basically read the GETTING_STARTED.md which was in the factory girl repo to get the factory.rb done.\n\ngetting shits done :p\nnow lets look back what we have to do which I mentioned earlier.\n\nfirst we gotta save a data to the DB which we are going to update, \nand prepare params(which is based on the data which we saved in 1.) to send to the update method, \nand finnaly, execute the update method.\n\n\n1. first we gotta save a data to the DB which we are going to update,\nthis is basic, just like bellow.\n@article = FactoryGirl.create(:article_with_bodies)\n\n2. and prepare params(which is based on the data which we saved in 1.) to send to the update method,\nthis is going to be the tricky part, I did it like this.\n\ngetting_params_ready.rb\nparams = @article.attributes.except('created_at', 'updated_at')\nparams['article_bodies_attributes'] = []\n@article.article_bodies.count.times do |i|\n  params['article_bodies_attributes'] << @article.article_bodies[i].attributes.except('created_at', 'updated_at')\nend\n\n\nIf you want to change the values inside the article_bodies, you can do it by writing like this.\nparams['article_bodies_attributes'][0]['subtitle'] = 'bar'\n\n3. and finnaly, execute the update method.\nput :update, {:id => @article.id, :article => params }\nthats it!\nfeel free to comment :)\nI think writing controllers examples are pretty tough.\nFor example, when you have to write some update method examples, \n\n1. first we gotta save a data to the DB which we are going to update, \n2. and prepare params(which is based on the data which we saved in 1.) to send to the update method, \n3. and finnaly, execute the update method.\n\nand when it goes with the nested object forms, it gets tougher.\n\nI'll show you how I did it, its kinda messed up, so if you have some better solution, please comment.\n\n## FactoryGirl Data(preparation)\n\nfirst we need to get FactoryGirl ready, so we can get some test data and use those.\n\nlets say we have an Article table and a ArticleBody table, the relations will be like bellow.\nIt'll be basic nested objects using `nested_attributes_for` and `has_many`.\nIf you don't understand those, there's some good tutorial on rails cast which I mentioned [here](http://takehiro-adachi.github.com/nested-object-forms-with-checkboxes/), so look at that.\n\n```ruby:models\nclass Article < ActiveRecord::Base\n  attr_accessible :title\n\n  has_many :article_bodies, :dependent => :delete_all\n  accepts_nested_attributes_for :article_bodies, :allow_destroy => true\nend\n\nclass ArticleBody < ActiveRecord::Base\n  attr_accessible :subtitle, :body\n  \n  belongs_to :article\nend\n```\n\nthe factory girl data will be like bellow\n\n```ruby:factory.rb\nFactoryGirl.define do\n  factory :article, :class => 'Article' do\n    title \"test article title\"\n\n    factory :article_with_bodies, :class => 'Article' do\n      ignore do\n        body_count 3\n      end\n\n      after(:create) do |article, evaluator|\n        FactoryGirl.create_list(:article_body, evaluator.body_count, article: article)\n      end\n    end\n  end\n\n  factory :article_body, :class => 'ArticleBody' do\n    article\n    sequence(:subtitle) { |n| \"subtitle #{n}\"}\n    sequence(:body) { |n| \"body #{n}\"}\n  end\nend\n```\n\nI basically read the [GETTING_STARTED.md](https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#associations) which was in the factory girl repo to get the factory.rb done.\n\n\n## getting shits done :p\n\nnow lets look back what we have to do which I mentioned earlier.\n\n1. first we gotta save a data to the DB which we are going to update, \n2. and prepare params(which is based on the data which we saved in 1.) to send to the update method, \n3. and finnaly, execute the update method.\n\n\n### 1. first we gotta save a data to the DB which we are going to update,\n\nthis is basic, just like bellow.\n\n`@article = FactoryGirl.create(:article_with_bodies)`\n\n\n### 2. and prepare params(which is based on the data which we saved in 1.) to send to the update method, \n\nthis is going to be the tricky part, I did it like this.\n\n```ruby:getting_params_ready.rb\nparams = @article.attributes.except('created_at', 'updated_at')\nparams['article_bodies_attributes'] = []\n@article.article_bodies.count.times do |i|\n  params['article_bodies_attributes'] << @article.article_bodies[i].attributes.except('created_at', 'updated_at')\nend\n```\nIf you want to change the values inside the article_bodies, you can do it by writing like this.\n\n`params['article_bodies_attributes'][0]['subtitle'] = 'bar'`\n\n### 3. and finnaly, execute the update method.\n\n`put :update, {:id => @article.id, :article => params }`\n\nthats it!\n\nfeel free to comment :)\n", "tags": ["Rails", "Ruby1.9.4", "RSpec2.11.0", "factory_girl_rails4.1.0", "FactoryGirl"]}