{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\n\n\u70ba\u66ff\u78ba\u8a8dAPI\u304b\u3089\u30ec\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u30c9\u30eb\u304b\u3089\u5186\u306b\u5909\u63db\u3059\u308b\n\n$ brew tap kei-sato/usdex\n$ brew install usdex\n$ usdex -p 2.5 -v\n1(USD) => 122.54078(JPY)\n2.5(USD) => 306.35195(JPY)\n\nGist\u306f\u3053\u3061\u3089\u3067\u3059\nhttps://gist.github.com/kei-sato/98675769952ec7538d6a\nbrew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\u65b9\u6cd5\u306f\u3053\u3061\u3089\u3067\u3059\nPython\u3067\u4f5c\u3063\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092brew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u89e3\u8aac\n\u73fe\u5728\u306e\u70ba\u66ff\u60c5\u5831\u3092JSON\u3092\u59cb\u3081\u3068\u3057\u305f\u69d8\u3005\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u516c\u958b\uff08http://api.aoikujira.com/kawase/)\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u30c9\u30eb\u3092\u5186\u306b\u63db\u7b97\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u3001API\u304b\u3089\u8fd4\u3063\u3066\u304f\u308b\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n$ curl -s http://api.aoikujira.com/kawase/json/usd | jq .\n{\n  \"result\": \"ok\",\n  \"basecode\": \"USD\",\n  \"update\": \"2015-07-13 17:41:44\",\n  \"source\": \"*\",\n  \"API_URL\": \"http://api.aoikujira.com/kawase/\",\n  ...(\u4e2d\u7565)\n  \"JPY\": \"123.44644\",\n  \"KRW\": \"1131.46557\",\n  \"HKD\": \"7.75138\",\n  ...(\u4e2d\u7565)\n  \"LBP\": \"1514.20449\"\n}\n\nJPY\u306b1\u30c9\u30eb\u3092\u5186\u63db\u7b97\u3057\u305f\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\uff08\u4ed6\u306b\u3082KRW\uff08\u30a6\u30a9\u30f3\uff09\u3084HKD\uff08\u9999\u6e2f\u30c9\u30eb\uff09\u3082\u3042\u308a\u307e\u3059\u306d\uff09\n\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u306e\u5024\u3092\u629c\u304d\u53d6\u3063\u3066\u3001\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u6570\u5024\u306b\u639b\u3051\u3042\u308f\u305b\u308b\u3060\u3051\u306e\u3001\u7c21\u5358\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\nexchange1.py\n#coding:utf-8\n\nimport sys\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\n\nif __name__ == \"__main__\":\n    price = float(sys.argv[1])\n\n    response = urllib.urlopen(URL)\n    data = json.loads(response.read())\n    rate = float(data[u'JPY'])\n    print \"{0}(USD) => {1}(JPY)\".format(1, rate)\n    print \"{0}(USD) => {1}(JPY)\".format(price, price * rate)\n\n\n$ python exchange1.py 2.5\n1(USD) => 122.568(JPY)\n2.5(USD) => 306.42(JPY)\n\n\u5f15\u6570\u30672.5\uff08\u30c9\u30eb\uff09\u3092\u4e0e\u3048\u308b\u3068\u3001306\u5186\u3068\u3044\u3046\u7b54\u3048\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b1\u30c9\u30eb\u3042\u305f\u308a\u306e\u5186\u3082\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\u76ee\u7684\u9054\u6210\u3067\u3059\u306d\u3002\n\u4ee5\u4e0a\u3001\u7d42\u4e86\u3067\u3059\u3002\n\u3068\u3044\u304d\u305f\u3044\u3068\u3053\u308d\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u516c\u958b\u3057\u305f\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30de\u30b7\u306b\u3057\u307e\u3059\u3002\n\nAPI\u53e9\u304d\u904e\u304e\u9632\u6b62\n\u9023\u7d9a\u3067API\u53e9\u304f\u306e\u3082\u826f\u304f\u306a\u3044\u306e\u3067\u3001API\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f1\u65e51\u56de\u306b\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\nFPATH = \"/tmp/exchange\"\n\n\ndef readCache():\n    with open(FPATH, 'r') as f:\n        body = f.read()\n    return body\n\n\ndef writeCache(body):\n    with open(FPATH, 'w') as f:\n        f.write(body)\n\n\ndef fetchRates():\n    # fetch rate list from remote\n    response = urllib.urlopen(URL)\n    body = response.read()\n\n    writeCache(body)\n\n    return body\n\nfetchRates\u3067API\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3001writeCache\u3067\u5185\u5bb9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nreadCache\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u305f\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\nimport os.path\nfrom datetime import date, datetime\n\nFPATH = \"/tmp/exchange\"\n\n\ndef hasCache():\n    if os.path.isfile(FPATH):\n        d = date.today()\n        today = datetime.combine(d, datetime.min.time())\n        mtime = datetime.fromtimestamp(os.path.getmtime(FPATH))\n        if mtime > today:\n            return True\n    return False\n\n\nhasCache\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3001\u6700\u7d42\u66f4\u65b0\u65e5\u6642\u304c\u4eca\u65e5\u3060\u3063\u305f\u3089\u3001True\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u304b\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u7d42\u66f4\u65b0\u65e5\u6642\u304c\u4eca\u65e5\u3088\u308a\u524d\u3060\u3063\u305f\u3089\u3001False\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5408\u308f\u305b\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\nexchange2.py\n#!/usr/bin/env python\n\nimport sys\nimport os.path\nfrom datetime import date, datetime\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\nFPATH = \"/tmp/exchange\"\n\n\ndef hasCache():\n    if os.path.isfile(FPATH):\n        d = date.today()\n        today = datetime.combine(d, datetime.min.time())\n        mtime = datetime.fromtimestamp(os.path.getmtime(FPATH))\n        if mtime > today:\n            return True\n    return False\n\n\ndef readCache():\n    with open(FPATH, 'r') as f:\n        body = f.read()\n    return body\n\n\ndef writeCache(body):\n    with open(FPATH, 'w') as f:\n        f.write(body)\n\n\ndef fetchRates():\n    # fetch rate list from remote\n    response = urllib.urlopen(URL)\n    body = response.read()\n\n    writeCache(body)\n\n    return body\n\nif __name__ == \"__main__\":\n    price = float(sys.argv[1])\n\n    if hasCache():\n        body = readCache()\n    else:\n        body = fetchRates()\n\n    data = json.loads(body)\n    rate = float(data[u'JPY'])\n    print \"{0}(USD) => {1}(JPY)\".format(1, rate)\n    print \"{0}(USD) => {1}(JPY)\".format(price, price * rate)\n\n\n\nhasCache\u304cTrue\u3092\u8fd4\u3057\u305f\u3089\u3001readCache\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u3001False\u3092\u8fd4\u3057\u305f\u3089\u3001fetchRates\u3067API\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3063\u307d\u304f\u3057\u305f\u3044\nargparse\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\noptions.py\n#coding:utf-8\n\nimport argparse\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='convert usd to any currency.')\n    parser.add_argument('-p', '--price', nargs='?', type=float, help='price', default=1.0)\n    parser.add_argument('-c', '--currency', nargs='?', help='currency', default=u'JPY')\n    parser.add_argument('-r', '--reverse', action='store_true', help='reverse the direction')\n    parser.add_argument('-v', '--verbosity', action='count', help='increase output verbosity')\n\n    args = parser.parse_args()\n    price = args.price\n    currency = args.currency\n    reverse = args.reverse\n    verbosity = args.verbosity\n\n    print \"price:\",     price\n    print \"currency:\",  currency\n    print \"reverse:\",   reverse\n    print \"verbosity:\", verbosity\n\n\n\u4e0a\u8a18\u3092\u4fdd\u5b58\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# \u5f15\u6570\u306a\u3057\n$ python options.py\nprice: 1.0\ncurrency: JPY\nreverse: False\nverbosity: None\n\n# \u5f15\u6570\u3064\u304d\n$ python options.py -p 2.5 -c EUR -r -vvv\nprice: 2.5\ncurrency: EUR\nreverse: True\nverbosity: 3\n\n# \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\n$ python options.py -h\nusage: options.py [-h] [-p [PRICE]] [-c [CURRENCY]] [-r] [-v]\n\nconvert usd to any currency.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p [PRICE], --price [PRICE]\n                        price\n  -c [CURRENCY], --currency [CURRENCY]\n                        currency\n  -r, --reverse         reverse the direction\n  -v, --verbosity       increase output verbosity\n\n\u7c21\u5358\u3067\u3059\u306d!\n\u3053\u3053\u307e\u3067\u306e\u3001\u3059\u3079\u3066\u3092\u5408\u308f\u305b\u305f\u3082\u306e\u304cGist\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\nhttps://gist.github.com/kei-sato/98675769952ec7538d6a\n\n\u307e\u3068\u3081\n\nPython\u3092\u4f7f\u3063\u3066WebAPI\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u306b\u843d\u3068\u3057\u3053\u3080\u6d41\u308c\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\nurllib\u3068json\u3067\u7c21\u5358\u306bAPI\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\u904e\u5ea6\u306bAPI\u3092\u53e9\u304d\u3059\u304e\u306a\u3044\u3088\u3046\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u3064\u3051\u3066\u3042\u3052\u308b\u3068\u89aa\u5207\u3060\u3068\u601d\u3044\u307e\u3059\nargparse\u3067\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u304c\u4f5c\u308c\u307e\u3059\nbrew install\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059 -> Python\u3067\u4f5c\u3063\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092brew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n\n# \u6982\u8981\n1. [\u70ba\u66ff\u78ba\u8a8dAPI](http://api.aoikujira.com/kawase/)\u304b\u3089\u30ec\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n2. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092\u30c9\u30eb\u304b\u3089\u5186\u306b\u5909\u63db\u3059\u308b\n\n```bash\n$ brew tap kei-sato/usdex\n$ brew install usdex\n$ usdex -p 2.5 -v\n1(USD) => 122.54078(JPY)\n2.5(USD) => 306.35195(JPY)\n```\n\nGist\u306f\u3053\u3061\u3089\u3067\u3059\nhttps://gist.github.com/kei-sato/98675769952ec7538d6a\n\nbrew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b\u65b9\u6cd5\u306f\u3053\u3061\u3089\u3067\u3059\n[Python\u3067\u4f5c\u3063\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092brew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b](http://qiita.com/kei-sato/items/276afa8dd8197fc91772)\n\n# \u89e3\u8aac\n\u73fe\u5728\u306e\u70ba\u66ff\u60c5\u5831\u3092JSON\u3092\u59cb\u3081\u3068\u3057\u305f\u69d8\u3005\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u516c\u958b\uff08[http://api.aoikujira.com/kawase/](http://api.aoikujira.com/kawase/))\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u30c9\u30eb\u3092\u5186\u306b\u63db\u7b97\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u3001API\u304b\u3089\u8fd4\u3063\u3066\u304f\u308b\u5024\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```bash\n$ curl -s http://api.aoikujira.com/kawase/json/usd | jq .\n{\n  \"result\": \"ok\",\n  \"basecode\": \"USD\",\n  \"update\": \"2015-07-13 17:41:44\",\n  \"source\": \"*\",\n  \"API_URL\": \"http://api.aoikujira.com/kawase/\",\n  ...(\u4e2d\u7565)\n  \"JPY\": \"123.44644\",\n  \"KRW\": \"1131.46557\",\n  \"HKD\": \"7.75138\",\n  ...(\u4e2d\u7565)\n  \"LBP\": \"1514.20449\"\n}\n```\n\nJPY\u306b1\u30c9\u30eb\u3092\u5186\u63db\u7b97\u3057\u305f\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\uff08\u4ed6\u306b\u3082KRW\uff08\u30a6\u30a9\u30f3\uff09\u3084HKD\uff08\u9999\u6e2f\u30c9\u30eb\uff09\u3082\u3042\u308a\u307e\u3059\u306d\uff09\n\u3068\u308a\u3042\u3048\u305a\u3001\u3053\u306e\u5024\u3092\u629c\u304d\u53d6\u3063\u3066\u3001\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f\u6570\u5024\u306b\u639b\u3051\u3042\u308f\u305b\u308b\u3060\u3051\u306e\u3001\u7c21\u5358\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n```python:exchange1.py\n#coding:utf-8\n\nimport sys\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\n\nif __name__ == \"__main__\":\n    price = float(sys.argv[1])\n\n    response = urllib.urlopen(URL)\n    data = json.loads(response.read())\n    rate = float(data[u'JPY'])\n    print \"{0}(USD) => {1}(JPY)\".format(1, rate)\n    print \"{0}(USD) => {1}(JPY)\".format(price, price * rate)\n```\n\n```bash\n$ python exchange1.py 2.5\n1(USD) => 122.568(JPY)\n2.5(USD) => 306.42(JPY)\n```\n\n\u5f15\u6570\u30672.5\uff08\u30c9\u30eb\uff09\u3092\u4e0e\u3048\u308b\u3068\u3001306\u5186\u3068\u3044\u3046\u7b54\u3048\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b1\u30c9\u30eb\u3042\u305f\u308a\u306e\u5186\u3082\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u76ee\u7684\u9054\u6210\u3067\u3059\u306d\u3002\n\u4ee5\u4e0a\u3001\u7d42\u4e86\u3067\u3059\u3002\n\n\u3068\u3044\u304d\u305f\u3044\u3068\u3053\u308d\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u516c\u958b\u3057\u305f\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30de\u30b7\u306b\u3057\u307e\u3059\u3002\n\n## API\u53e9\u304d\u904e\u304e\u9632\u6b62\n\u9023\u7d9a\u3067API\u53e9\u304f\u306e\u3082\u826f\u304f\u306a\u3044\u306e\u3067\u3001API\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f1\u65e51\u56de\u306b\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```python\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\nFPATH = \"/tmp/exchange\"\n\n\ndef readCache():\n    with open(FPATH, 'r') as f:\n        body = f.read()\n    return body\n\n\ndef writeCache(body):\n    with open(FPATH, 'w') as f:\n        f.write(body)\n\n\ndef fetchRates():\n    # fetch rate list from remote\n    response = urllib.urlopen(URL)\n    body = response.read()\n\n    writeCache(body)\n\n    return body\n```\n\nfetchRates\u3067API\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3001writeCache\u3067\u5185\u5bb9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nreadCache\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u305f\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\n```python\nimport os.path\nfrom datetime import date, datetime\n\nFPATH = \"/tmp/exchange\"\n\n\ndef hasCache():\n    if os.path.isfile(FPATH):\n        d = date.today()\n        today = datetime.combine(d, datetime.min.time())\n        mtime = datetime.fromtimestamp(os.path.getmtime(FPATH))\n        if mtime > today:\n            return True\n    return False\n\n```\n\nhasCache\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3001\u6700\u7d42\u66f4\u65b0\u65e5\u6642\u304c\u4eca\u65e5\u3060\u3063\u305f\u3089\u3001True\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u304b\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u7d42\u66f4\u65b0\u65e5\u6642\u304c\u4eca\u65e5\u3088\u308a\u524d\u3060\u3063\u305f\u3089\u3001False\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u5408\u308f\u305b\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\n```python:exchange2.py\n#!/usr/bin/env python\n\nimport sys\nimport os.path\nfrom datetime import date, datetime\nimport urllib\nimport json\n\nURL = \"http://api.aoikujira.com/kawase/json/usd\"\nFPATH = \"/tmp/exchange\"\n\n\ndef hasCache():\n    if os.path.isfile(FPATH):\n        d = date.today()\n        today = datetime.combine(d, datetime.min.time())\n        mtime = datetime.fromtimestamp(os.path.getmtime(FPATH))\n        if mtime > today:\n            return True\n    return False\n\n\ndef readCache():\n    with open(FPATH, 'r') as f:\n        body = f.read()\n    return body\n\n\ndef writeCache(body):\n    with open(FPATH, 'w') as f:\n        f.write(body)\n\n\ndef fetchRates():\n    # fetch rate list from remote\n    response = urllib.urlopen(URL)\n    body = response.read()\n\n    writeCache(body)\n\n    return body\n\nif __name__ == \"__main__\":\n    price = float(sys.argv[1])\n\n    if hasCache():\n        body = readCache()\n    else:\n        body = fetchRates()\n\n    data = json.loads(body)\n    rate = float(data[u'JPY'])\n    print \"{0}(USD) => {1}(JPY)\".format(1, rate)\n    print \"{0}(USD) => {1}(JPY)\".format(price, price * rate)\n\n```\n\nhasCache\u304cTrue\u3092\u8fd4\u3057\u305f\u3089\u3001readCache\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u3001False\u3092\u8fd4\u3057\u305f\u3089\u3001fetchRates\u3067API\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3063\u307d\u304f\u3057\u305f\u3044\n\nargparse\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n```python:options.py\n#coding:utf-8\n\nimport argparse\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='convert usd to any currency.')\n    parser.add_argument('-p', '--price', nargs='?', type=float, help='price', default=1.0)\n    parser.add_argument('-c', '--currency', nargs='?', help='currency', default=u'JPY')\n    parser.add_argument('-r', '--reverse', action='store_true', help='reverse the direction')\n    parser.add_argument('-v', '--verbosity', action='count', help='increase output verbosity')\n\n    args = parser.parse_args()\n    price = args.price\n    currency = args.currency\n    reverse = args.reverse\n    verbosity = args.verbosity\n\n    print \"price:\",     price\n    print \"currency:\",  currency\n    print \"reverse:\",   reverse\n    print \"verbosity:\", verbosity\n```\n\n\u4e0a\u8a18\u3092\u4fdd\u5b58\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n\n```bash\n# \u5f15\u6570\u306a\u3057\n$ python options.py\nprice: 1.0\ncurrency: JPY\nreverse: False\nverbosity: None\n\n# \u5f15\u6570\u3064\u304d\n$ python options.py -p 2.5 -c EUR -r -vvv\nprice: 2.5\ncurrency: EUR\nreverse: True\nverbosity: 3\n\n# \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u308b\n$ python options.py -h\nusage: options.py [-h] [-p [PRICE]] [-c [CURRENCY]] [-r] [-v]\n\nconvert usd to any currency.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p [PRICE], --price [PRICE]\n                        price\n  -c [CURRENCY], --currency [CURRENCY]\n                        currency\n  -r, --reverse         reverse the direction\n  -v, --verbosity       increase output verbosity\n```\n\n\u7c21\u5358\u3067\u3059\u306d!\n\n\u3053\u3053\u307e\u3067\u306e\u3001\u3059\u3079\u3066\u3092\u5408\u308f\u305b\u305f\u3082\u306e\u304cGist\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\nhttps://gist.github.com/kei-sato/98675769952ec7538d6a\n\n# \u307e\u3068\u3081\n* Python\u3092\u4f7f\u3063\u3066WebAPI\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u306b\u843d\u3068\u3057\u3053\u3080\u6d41\u308c\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n* urllib\u3068json\u3067\u7c21\u5358\u306bAPI\u3092\u53d6\u308a\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n* \u904e\u5ea6\u306bAPI\u3092\u53e9\u304d\u3059\u304e\u306a\u3044\u3088\u3046\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u3064\u3051\u3066\u3042\u3052\u308b\u3068\u89aa\u5207\u3060\u3068\u601d\u3044\u307e\u3059\n* argparse\u3067\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u304c\u4f5c\u308c\u307e\u3059\n* brew install\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059 -> [Python\u3067\u4f5c\u3063\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092brew install\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308b](http://qiita.com/kei-sato/items/276afa8dd8197fc91772)\n", "tags": ["Python", "command", "WebAPI"]}