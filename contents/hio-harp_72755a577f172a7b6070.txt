{"tags": ["SICP"], "context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #23 (2.2.3 (3))\nex-2.40 .. ex-2.43\n\nsec-2.2.3 (c) \u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n\n\u3053\u306e\u5834\u5408\u3001 (list nil) \u3068\u3044\u3046\u3072\u3068\u3064\u306e\u9805\u76ee\u304b\u3089\u306a\u308b\u5217\u3001\u3064\u307e\u308a\u7a7a\u96c6\u5408\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nFor this, we generate (list nil), which is a sequence with one item, namely the set with no elements.\n\n\u300c\u3053\u306e\u5834\u5408\u3001 (list nil) \u3068\u3044\u3046\u3072\u3068\u3064\u306e\u9805\u76ee\u3001\u3059\u306a\u308f\u3061\u7a7a\u96c6\u5408\u3001\u304b\u3089\u306a\u308b\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u300d\u304b\u306a\uff1f^^;\n\nsec-2.2.3 (c) \u5b9f\u88c5\n; [sec-2.2.3-c.scm]\n;\n(define (sec-2.2.3-c)\n    (print \"(gen-pairs 6)\")\n    (print \";==> \" (gen-pairs 6))\n\n    (newline)\n    (print \"(prime-sum-pairs 6)\")\n    (print \";==> \" (prime-sum-pairs 6))\n\n    (newline)\n    (print \"(permutations (list 1 2 3))\")\n    (print \";==> \" (permutations (list 1 2 3)))\n    #t)\n\n\n; {{{ \u6e96\u5099.\n(define accumulate fold-right)\n(define nil ())\n\n(define (enumerate-interval low high)\n    (if\n        (> low high)\n        nil\n        (cons low (enumerate-interval (+ low 1) high))))\n\n(define (prime? n)\n    (define (iter i n)\n        (cond\n            ((> (* i i) n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1) n))))\n    (if\n        (< n 2)\n        #f\n        (iter 2 n)))\n; }}} \u6e96\u5099.\n\n\n(define (gen-pairs n)\n    (accumulate\n        append\n        nil\n        (map\n            (lambda (i)\n                (map\n                    (lambda (j) (list i j))\n                    (enumerate-interval 1 (- i 1))))\n            (enumerate-interval 1 n))))\n\n\n(define (flatmap proc seq)\n    (accumulate append nil (map proc seq)))\n\n\n(define (prime-sum? pair)\n    (prime? (+ (car pair) (cadr pair))))\n\n\n(define (make-pair-sum pair)\n    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))\n\n\n(define (prime-sum-pairs n)\n    (map\n        make-pair-sum ; (Int, Int) -> (Int, Int, Int)\n        (filter\n            prime-sum?\n            (flatmap        ;==> [(i:Int, j:Int)]     ; concatenated.\n                (lambda (i) ; i:Int -> [(i:Int, j:Int)]\n                    (map\n                        (lambda (j) (list i j)) ; j:Int -> (i:Int, j:Int)\n                        (enumerate-interval 1 (- i 1)))) ; [j:Int]\n                (enumerate-interval 1 n))))) ; [Int]\n\n\n(define (permutations s)\n    (if\n        (null? s)  ; \u96c6\u5408\u306f\u7a7a\u304b?\n        (list nil) ; \u7a7a\u306e\u5834\u5408\u306f\u7a7a\u96c6\u5408\u3092\u6301\u3064\u5217\u304c\u5fa9\u5e30\u5024.\n        (flatmap\n            (lambda (x)\n                (map\n                    (lambda (p) (cons x p))\n                    (permutations (remove x s))))\n            s)))\n\n\n(define (remove item sequence)\n    (filter\n        (lambda (x) (not (= x item)))\n        sequence))\n\n\nsec-2.2.3 (c) \u5b9f\u884c\u7d50\u679c\ngosh> (sec-2.2.3-c)\n(gen-pairs 6)\n;==> ((2 1) (3 1) (3 2) (4 1) (4 2) (4 3) (5 1) (5 2) (5 3) (5 4) (6 1) (6 2) (6 3) (6 4) (6 5))\n\n(prime-sum-pairs 6)\n;==> ((2 1 3) (3 2 5) (4 1 5) (4 3 7) (5 2 7) (6 1 7) (6 5 11))\n\n(permutations (list 1 2 3))\n;==> ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))\n\n\nex-2.40. unique-pairs\n1 \u2264 j < i \u2264 n \u306a (i, j) \u306e\u7d44\u306e\u5217.\n\nex-2.40 \u5b9f\u88c5\n; [ex-2.40.scm]]\n;\n(define (ex-2.40)\n    (print \"(unique-pairs 6)\")\n    (print \";==> \" (unique-pairs 6))\n\n    (newline)\n    (print \"(prime-sum-pairs-2.40 6)\")\n    (print \";==> \" (prime-sum-pairs-2.40 6))\n    #t)\n\n\n(load \"./sec-2.2.3-c\") ; flatmap, prime-sum?, enumerate-interval.\n\n\n(define (unique-pairs n)\n    (flatmap\n        (lambda (i)\n            (map\n                (lambda (j)\n                    (list i j))\n                (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))\n\n\n(define (prime-sum-pairs-2.40 n)\n    (map\n        make-pair-sum\n        (filter prime-sum? (unique-pairs n))))\n\n\nex-2.40 \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.40)\n(unique-pairs 6)\n;==> ((2 1) (3 1) (3 2) (4 1) (4 2) (4 3) (5 1) (5 2) (5 3) (5 4) (6 1) (6 2) (6 3) (6 4) (6 5))\n\n(prime-sum-pairs-2.40 6)\n;==> ((2 1 3) (3 2 5) (4 1 5) (4 3 7) (5 2 7) (6 1 7) (6 5 11))\n\n\nex-2.41. \u7279\u5b9a\u306e\u5408\u8a08\u6570\u306b\u306a\u308b3\u3064\u7d44\n\u300c\u5408\u8a08\u3067 s \u306b\u306a\u308b\u300d\u306e\u90e8\u5206\u82e5\u5e72\u308f\u3059\u308c\u3066\u305f\u3063\uff08\uff09\n\nex-2.41 \u5b9f\u88c5\n; [ex-2.41.scm]\n;\n(define (ex-2.41)\n    (print \"(unique-triples 5)\")\n    (print \";==> \" (unique-triples 5))\n    (print \"(const-sum-pairs 10)\")\n    (print \";==> \" (const-sum-pairs 10))\n    #t)\n\n\n(load \"./sec-2.2.3-c\") ; accumulate, flatmap, prime-sum?, enumerate-interval.\n\n\n(define (const-sum-pairs s)\n    (filter\n        (lambda (triple) ; (i,j,k) -> Bool\n            (let\n                (\n                    (sum (+ (list-ref triple 0) (list-ref triple 1) (list-ref triple 2)))\n                )\n                (= sum s)))\n        (unique-triples s))) ; [(i,j,k)]\n\n(define (unique-triples n)\n    (flatmap\n        (lambda (i)\n            (flatmap\n                (lambda (j)\n                    (map\n                        (lambda (k)\n                            (list i j k))\n                        (enumerate-interval 1 (- j 1))))\n                (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))\n\n\nex-2.41 \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.41)\n(unique-triples 5)\n;==> ((3 2 1) (4 2 1) (4 3 1) (4 3 2) (5 2 1) (5 3 1) (5 3 2) (5 4 1) (5 4 2) (5 4 3))\n(const-sum-pairs 10)\n;==> ((5 3 2) (5 4 1) (6 3 1) (7 2 1))\n\n\nex-2.42 8 Queens\n\u3072\u3068\u307e\u305a\u6700\u4f4e\u9650\u52d5\u4f5c\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3092\u5b9f\u88c5.\n\u4eca\u306f\u307e\u3060\u5168\u90e8\u304c safe \u3068\u3057\u3066\u304a\u304f.\n\u3064\u307e\u308a (queen n) \u3092\u5b9f\u884c\u3059\u308b\u3068\u5168\u90e8\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u89e3\u3068\u3057\u3066\u8fd4\u308b.\n(define empty-board nil)\n(define (safe? k positions)\n    #t)\n(define (adjoin-position new-row k rest-of-queens)\n    (cons new-row rest-of-queens))\n\nqueen \u306e\u5229\u304d\u7b4b\u306f\u659c\u3081\u3068\u7e26\u6a2a\u3067, \u305d\u306e\u7dda\u4e0a\u306b\u3044\u308b\u5834\u5408\u306b unsafe \u306b\u306a\u308b.\n\u9006\u306b, \u65b0\u3057\u304f\u7f6e\u3044\u305f queen \u304b\u3089\u898b\u3066, \u659c\u3081\u5de6\u4e0a, \u771f\u4e0a, \u659c\u3081\u53f3\u4e0a\u306e\u3044\u305a\u308c\u304b\u306b\u65e2\u306b queen \u304c\u3044\u308b\u5834\u5408\u306b\u306e\u307f unsafe \u3068\u5224\u65ad\u3067\u304d\u308b.\n\u3053\u306e3\u65b9\u5411\u306e\u5224\u5b9a\u3092\u305d\u308c\u305e\u308c safe-left?, safe-column?, safe-right? \u3068\u304a\u304f.\n(define (safe? k positions)\n    (and\n        (safe-left? k (car positions) (cdr positions))\n        (safe-column? k (car positions) (cdr positions))\n        (safe-right? (+ k 1) (car positions) (cdr positions))))\n\n(define (safe-left? k positions)\n    #t)\n(define (safe-column? k positions)\n    #t)\n(define (safe-right? k positions)\n    #t)\n\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((1 1) (2 1) (1 2) (2 2))\n\n(queens 3)\n;==> ((1 1 1) (2 1 1) (3 1 1) (1 2 1) (2 2 1) (3 2 1) (1 3 1) (2 3 1) (3 3 1)\n(1 1 2) (2 1 2) (3 1 2) (1 2 2) (2 2 2) (3 2 2) (1 3 2) (2 3 2) (3 3 2)\n(1 1 3) (2 1 3) (3 1 3) (1 2 3) (2 2 3) (3 2 3) (1 3 3) (2 3 3) (3 3 3))\n\nsafe-column? \u3092\u5b9f\u88c5\u3059\u308b.\n\u3050\u3050\u3063\u3068 safe \u304c\u6e1b\u5c11.\n(define (safe-column? k p positions)\n    (cond\n        ((null? positions) #t)\n        ((= (car positions) p) #f)\n        (else (safe-column? k p (cdr positions)))))\n\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((2 1) (1 2))\n\n(queens 3)\n;==> ((3 2 1) (2 3 1) (3 1 2) (1 3 2) (2 1 3) (1 2 3))\n#t\n\nsafe-left? \u3092\u5b9f\u88c5.\n\u4e00\u6bb5\u4e0a\u306b\u9061\u308b\u305f\u3073\u306b queen \u3055\u3093\u304c\u3044\u308b\u304b\u306e\u5224\u5b9a\u3059\u308b\u5834\u6240\u30821\u3064\u305a\u308c\u3066\u3044\u304f.\n(define (safe-left? k p positions)\n    (cond\n        ((null? positions) #t)\n        ((= (car positions) (- p 1)) #f)\n        (else (safe-left? k (- p 1) (cdr positions)))))\n\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((1 2))\n\n(queens 3)\n;==> ((2 3 1) (3 1 2) (1 2 3))\n\nsafe-right? \u3082\u5b9f\u88c5:\n(define (safe-right? k p positions)\n    (cond\n        ((null? positions) #t)\n        ((= (car positions) (+ p 1)) #f)\n        (else (safe-right? k (+ p 1) (cdr positions)))))\n\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ()\n\n(queens 3)\n;==> ()\n\nsafe? \u306e\u306a\u304b\u3067 k \u4f7f\u3063\u3066\u306a\u3044\uff3c(^o^)\uff0f\n\u76e4\u9762\u3092\u53f3\u3068\u304b\u5de6\u306b\u7a81\u304d\u629c\u3051\u3061\u3083\u3046\u3051\u3069\u8a08\u7b97\u91cf\u4ee5\u5916\u306f\u554f\u984c\u306a\u3044\u306f\u305a\uff1f^^;\n1 \u304b\u3089 10 \u306e\u89e3\u306e\u6570:\n(for-each (lambda (n) (print (list n (length (queens n))))) (enumerate-interval 1 10))\n;==>\n(1 1)\n(2 0)\n(3 0)\n(4 2)\n(5 10)\n(6 4)\n(7 40)\n(8 92)\n(9 352)\n(10 724)\n\n\nex-2.42 \u5b9f\u88c5\n; [ex-2.42.scm]\n;\n(define (ex-2.42)\n    (print \"(queens 1)\")\n    (print \";==> \" (queens 1))\n\n    (newline)\n    (print \"(queens 2)\")\n    (print \";==> \" (queens 2))\n\n    (newline)\n    (print \"(queens 3)\")\n    (print \";==> \" (queens 3))\n    #t)\n\n\n(load \"./sec-2.2.3-c\")\n\n\n(define (queens board-size)\n    (define (queen-cols k)\n        (if\n            (= k 0)\n            (list empty-board)\n            (filter\n                (lambda (positions) (safe? k positions))\n                (flatmap\n                    (lambda (rest-of-queens)\n                        (map\n                            (lambda (new-row)\n                                (adjoin-position\n                                    new-row\n                                    k\n                                    rest-of-queens))\n                            (enumerate-interval 1 board-size)))\n                    (queen-cols (- k 1))))))\n\n    (define empty-board nil)\n    (define (safe? k positions)\n        (and\n            (safe-left? k (car positions) (cdr positions))\n            (safe-column? k (car positions) (cdr positions))\n            (safe-right? (+ k 1) (car positions) (cdr positions))))\n    (define (safe-left? k p positions)\n        (cond\n            ((null? positions) #t)\n            ((= (car positions) (- p 1)) #f)\n            (else (safe-left? k (- p 1) (cdr positions)))))\n    (define (safe-column? k p positions)\n        (cond\n            ((null? positions) #t)\n            ((= (car positions) p) #f)\n            (else (safe-column? k p (cdr positions)))))\n    (define (safe-right? k p positions)\n        (cond\n            ((null? positions) #t)\n            ((= (car positions) (+ p 1)) #f)\n            (else (safe-right? k (+ p 1) (cdr positions)))))\n    (define (adjoin-position new-row k rest-of-queens)\n        (cons new-row rest-of-queens))\n    (queen-cols board-size))\n\n\nex-2.42 \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.42)\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ()\n\n(queens 3)\n;==> ()\n\n\nex-2.43\n\u672c\u6765\u306f board-size \u56de, \u81ea\u5206\u306b\u5fc5\u8981\u306a\u76e4\u9762\u30921\u56de\u3060\u3051\u547c\u3079\u3070\u3088\u304b\u3063\u305f\u306e\u304c,\nboard-size \u56de, \u3055\u3089\u306b board-size \u56de\u518d\u8a08\u7b97\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081.\nO(n) \u304c O(n^2) \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089,\nT^2 \u306e\u6642\u9593\u304c\u5fc5\u8981\u306b\u306a\u308b\u3068\u898b\u7a4d\u3082\u308c\u308b.\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #23 (2.2.3 (3))](http://ladiespp.connpass.com/event/42175/)\n\nex-2.40 .. ex-2.43\n\n## sec-2.2.3 (c) \u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n\n> \u3053\u306e\u5834\u5408\u3001 `(list nil)` \u3068\u3044\u3046\u3072\u3068\u3064\u306e\u9805\u76ee\u304b\u3089\u306a\u308b\u5217\u3001\u3064\u307e\u308a\u7a7a\u96c6\u5408\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n> For this, we generate `(list nil)`, which is a sequence with one item, namely the set with no elements.\n\n\u300c\u3053\u306e\u5834\u5408\u3001 `(list nil)` \u3068\u3044\u3046\u3072\u3068\u3064\u306e\u9805\u76ee\u3001\u3059\u306a\u308f\u3061\u7a7a\u96c6\u5408\u3001\u304b\u3089\u306a\u308b\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u300d\u304b\u306a\uff1f^^;\n\n## sec-2.2.3 (c) \u5b9f\u88c5\n\n```scm\n; [sec-2.2.3-c.scm]\n;\n(define (sec-2.2.3-c)\n\t(print \"(gen-pairs 6)\")\n\t(print \";==> \" (gen-pairs 6))\n\n\t(newline)\n\t(print \"(prime-sum-pairs 6)\")\n\t(print \";==> \" (prime-sum-pairs 6))\n\n\t(newline)\n\t(print \"(permutations (list 1 2 3))\")\n\t(print \";==> \" (permutations (list 1 2 3)))\n\t#t)\n\n\n; {{{ \u6e96\u5099.\n(define accumulate fold-right)\n(define nil ())\n\n(define (enumerate-interval low high)\n\t(if\n\t\t(> low high)\n\t\tnil\n\t\t(cons low (enumerate-interval (+ low 1) high))))\n\n(define (prime? n)\n\t(define (iter i n)\n\t\t(cond\n\t\t\t((> (* i i) n) #t)\n\t\t\t((= (remainder n i) 0) #f)\n\t\t\t(else (iter (+ i 1) n))))\n\t(if\n\t\t(< n 2)\n\t\t#f\n\t\t(iter 2 n)))\n; }}} \u6e96\u5099.\n\n\n(define (gen-pairs n)\n\t(accumulate\n\t\tappend\n\t\tnil\n\t\t(map\n\t\t\t(lambda (i)\n\t\t\t\t(map\n\t\t\t\t\t(lambda (j) (list i j))\n\t\t\t\t\t(enumerate-interval 1 (- i 1))))\n\t\t\t(enumerate-interval 1 n))))\n\n\n(define (flatmap proc seq)\n\t(accumulate append nil (map proc seq)))\n\n\n(define (prime-sum? pair)\n\t(prime? (+ (car pair) (cadr pair))))\n\n\n(define (make-pair-sum pair)\n\t(list (car pair) (cadr pair) (+ (car pair) (cadr pair))))\n\n\n(define (prime-sum-pairs n)\n\t(map\n\t\tmake-pair-sum ; (Int, Int) -> (Int, Int, Int)\n\t\t(filter\n\t\t\tprime-sum?\n\t\t\t(flatmap        ;==> [(i:Int, j:Int)]     ; concatenated.\n\t\t\t\t(lambda (i) ; i:Int -> [(i:Int, j:Int)]\n\t\t\t\t\t(map\n\t\t\t\t\t\t(lambda (j) (list i j)) ; j:Int -> (i:Int, j:Int)\n\t\t\t\t\t\t(enumerate-interval 1 (- i 1)))) ; [j:Int]\n\t\t\t\t(enumerate-interval 1 n))))) ; [Int]\n\n\n(define (permutations s)\n\t(if\n\t\t(null? s)  ; \u96c6\u5408\u306f\u7a7a\u304b?\n\t\t(list nil) ; \u7a7a\u306e\u5834\u5408\u306f\u7a7a\u96c6\u5408\u3092\u6301\u3064\u5217\u304c\u5fa9\u5e30\u5024.\n\t\t(flatmap\n\t\t\t(lambda (x)\n\t\t\t\t(map\n\t\t\t\t\t(lambda (p) (cons x p))\n\t\t\t\t\t(permutations (remove x s))))\n\t\t\ts)))\n\n\n(define (remove item sequence)\n\t(filter\n\t\t(lambda (x) (not (= x item)))\n\t\tsequence))\n```\n\n## sec-2.2.3 (c) \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (sec-2.2.3-c)\n(gen-pairs 6)\n;==> ((2 1) (3 1) (3 2) (4 1) (4 2) (4 3) (5 1) (5 2) (5 3) (5 4) (6 1) (6 2) (6 3) (6 4) (6 5))\n\n(prime-sum-pairs 6)\n;==> ((2 1 3) (3 2 5) (4 1 5) (4 3 7) (5 2 7) (6 1 7) (6 5 11))\n\n(permutations (list 1 2 3))\n;==> ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))\n```\n\n\n## ex-2.40. unique-pairs\n\n`1 \u2264 j < i \u2264 n` \u306a `(i, j)` \u306e\u7d44\u306e\u5217.\n\n### ex-2.40 \u5b9f\u88c5\n\n```scm\n; [ex-2.40.scm]]\n;\n(define (ex-2.40)\n\t(print \"(unique-pairs 6)\")\n\t(print \";==> \" (unique-pairs 6))\n\n\t(newline)\n\t(print \"(prime-sum-pairs-2.40 6)\")\n\t(print \";==> \" (prime-sum-pairs-2.40 6))\n\t#t)\n\n\n(load \"./sec-2.2.3-c\") ; flatmap, prime-sum?, enumerate-interval.\n\n\n(define (unique-pairs n)\n\t(flatmap\n\t\t(lambda (i)\n\t\t\t(map\n\t\t\t\t(lambda (j)\n\t\t\t\t\t(list i j))\n\t\t\t\t(enumerate-interval 1 (- i 1))))\n\t\t(enumerate-interval 1 n)))\n\n\n(define (prime-sum-pairs-2.40 n)\n\t(map\n\t\tmake-pair-sum\n\t\t(filter prime-sum? (unique-pairs n))))\n```\n\n### ex-2.40 \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.40)\n(unique-pairs 6)\n;==> ((2 1) (3 1) (3 2) (4 1) (4 2) (4 3) (5 1) (5 2) (5 3) (5 4) (6 1) (6 2) (6 3) (6 4) (6 5))\n\n(prime-sum-pairs-2.40 6)\n;==> ((2 1 3) (3 2 5) (4 1 5) (4 3 7) (5 2 7) (6 1 7) (6 5 11))\n```\n\n## ex-2.41. \u7279\u5b9a\u306e\u5408\u8a08\u6570\u306b\u306a\u308b3\u3064\u7d44\n\n\u300c\u5408\u8a08\u3067 s \u306b\u306a\u308b\u300d\u306e\u90e8\u5206\u82e5\u5e72\u308f\u3059\u308c\u3066\u305f\u3063\uff08\uff09\n\n### ex-2.41 \u5b9f\u88c5\n\n```scm\n; [ex-2.41.scm]\n;\n(define (ex-2.41)\n\t(print \"(unique-triples 5)\")\n\t(print \";==> \" (unique-triples 5))\n\t(print \"(const-sum-pairs 10)\")\n\t(print \";==> \" (const-sum-pairs 10))\n\t#t)\n\n\n(load \"./sec-2.2.3-c\") ; accumulate, flatmap, prime-sum?, enumerate-interval.\n\n\n(define (const-sum-pairs s)\n\t(filter\n\t\t(lambda (triple) ; (i,j,k) -> Bool\n\t\t\t(let\n\t\t\t\t(\n\t\t\t\t\t(sum (+ (list-ref triple 0) (list-ref triple 1) (list-ref triple 2)))\n\t\t\t\t)\n\t\t\t\t(= sum s)))\n\t\t(unique-triples s))) ; [(i,j,k)]\n\n(define (unique-triples n)\n\t(flatmap\n\t\t(lambda (i)\n\t\t\t(flatmap\n\t\t\t\t(lambda (j)\n\t\t\t\t\t(map\n\t\t\t\t\t\t(lambda (k)\n\t\t\t\t\t\t\t(list i j k))\n\t\t\t\t\t\t(enumerate-interval 1 (- j 1))))\n\t\t\t\t(enumerate-interval 1 (- i 1))))\n\t\t(enumerate-interval 1 n)))\n```\n\n### ex-2.41 \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.41)\n(unique-triples 5)\n;==> ((3 2 1) (4 2 1) (4 3 1) (4 3 2) (5 2 1) (5 3 1) (5 3 2) (5 4 1) (5 4 2) (5 4 3))\n(const-sum-pairs 10)\n;==> ((5 3 2) (5 4 1) (6 3 1) (7 2 1))\n```\n\n\n## ex-2.42 8 Queens\n\n\u3072\u3068\u307e\u305a\u6700\u4f4e\u9650\u52d5\u4f5c\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3092\u5b9f\u88c5.\n\u4eca\u306f\u307e\u3060\u5168\u90e8\u304c safe \u3068\u3057\u3066\u304a\u304f.\n\u3064\u307e\u308a `(queen n)` \u3092\u5b9f\u884c\u3059\u308b\u3068\u5168\u90e8\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u89e3\u3068\u3057\u3066\u8fd4\u308b.\n\n```scm\n(define empty-board nil)\n(define (safe? k positions)\n\t#t)\n(define (adjoin-position new-row k rest-of-queens)\n\t(cons new-row rest-of-queens))\n```\n\nqueen \u306e\u5229\u304d\u7b4b\u306f\u659c\u3081\u3068\u7e26\u6a2a\u3067, \u305d\u306e\u7dda\u4e0a\u306b\u3044\u308b\u5834\u5408\u306b unsafe \u306b\u306a\u308b.\n\u9006\u306b, \u65b0\u3057\u304f\u7f6e\u3044\u305f queen \u304b\u3089\u898b\u3066, \u659c\u3081\u5de6\u4e0a, \u771f\u4e0a, \u659c\u3081\u53f3\u4e0a\u306e\u3044\u305a\u308c\u304b\u306b\u65e2\u306b queen \u304c\u3044\u308b\u5834\u5408\u306b\u306e\u307f unsafe \u3068\u5224\u65ad\u3067\u304d\u308b.\n\u3053\u306e3\u65b9\u5411\u306e\u5224\u5b9a\u3092\u305d\u308c\u305e\u308c `safe-left?`, `safe-column?`, `safe-right?` \u3068\u304a\u304f.\n\n```scm\n(define (safe? k positions)\n\t(and\n\t\t(safe-left? k (car positions) (cdr positions))\n\t\t(safe-column? k (car positions) (cdr positions))\n\t\t(safe-right? (+ k 1) (car positions) (cdr positions))))\n\n(define (safe-left? k positions)\n\t#t)\n(define (safe-column? k positions)\n\t#t)\n(define (safe-right? k positions)\n\t#t)\n```\n\n```scm\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((1 1) (2 1) (1 2) (2 2))\n\n(queens 3)\n;==> ((1 1 1) (2 1 1) (3 1 1) (1 2 1) (2 2 1) (3 2 1) (1 3 1) (2 3 1) (3 3 1)\n(1 1 2) (2 1 2) (3 1 2) (1 2 2) (2 2 2) (3 2 2) (1 3 2) (2 3 2) (3 3 2)\n(1 1 3) (2 1 3) (3 1 3) (1 2 3) (2 2 3) (3 2 3) (1 3 3) (2 3 3) (3 3 3))\n```\n\n`safe-column?` \u3092\u5b9f\u88c5\u3059\u308b.\n\u3050\u3050\u3063\u3068 safe \u304c\u6e1b\u5c11.\n\n```scm\n(define (safe-column? k p positions)\n\t(cond\n\t\t((null? positions) #t)\n\t\t((= (car positions) p) #f)\n\t\t(else (safe-column? k p (cdr positions)))))\n```\n\n```scm\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((2 1) (1 2))\n\n(queens 3)\n;==> ((3 2 1) (2 3 1) (3 1 2) (1 3 2) (2 1 3) (1 2 3))\n#t\n```\n\n`safe-left?` \u3092\u5b9f\u88c5.\n\u4e00\u6bb5\u4e0a\u306b\u9061\u308b\u305f\u3073\u306b queen \u3055\u3093\u304c\u3044\u308b\u304b\u306e\u5224\u5b9a\u3059\u308b\u5834\u6240\u30821\u3064\u305a\u308c\u3066\u3044\u304f.\n\n```scm\n(define (safe-left? k p positions)\n\t(cond\n\t\t((null? positions) #t)\n\t\t((= (car positions) (- p 1)) #f)\n\t\t(else (safe-left? k (- p 1) (cdr positions)))))\n```\n\n```scm\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ((1 2))\n\n(queens 3)\n;==> ((2 3 1) (3 1 2) (1 2 3))\n```\n\n`safe-right?` \u3082\u5b9f\u88c5:\n\n```scm\n(define (safe-right? k p positions)\n\t(cond\n\t\t((null? positions) #t)\n\t\t((= (car positions) (+ p 1)) #f)\n\t\t(else (safe-right? k (+ p 1) (cdr positions)))))\n```\n\n```scm\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ()\n\n(queens 3)\n;==> ()\n```\n\n`safe?` \u306e\u306a\u304b\u3067 `k` \u4f7f\u3063\u3066\u306a\u3044\uff3c(^o^)\uff0f\n\u76e4\u9762\u3092\u53f3\u3068\u304b\u5de6\u306b\u7a81\u304d\u629c\u3051\u3061\u3083\u3046\u3051\u3069\u8a08\u7b97\u91cf\u4ee5\u5916\u306f\u554f\u984c\u306a\u3044\u306f\u305a\uff1f^^;\n\n1 \u304b\u3089 10 \u306e\u89e3\u306e\u6570:\n\n```scm\n(for-each (lambda (n) (print (list n (length (queens n))))) (enumerate-interval 1 10))\n;==>\n(1 1)\n(2 0)\n(3 0)\n(4 2)\n(5 10)\n(6 4)\n(7 40)\n(8 92)\n(9 352)\n(10 724)\n```\n\n### ex-2.42 \u5b9f\u88c5\n\n```scm\n; [ex-2.42.scm]\n;\n(define (ex-2.42)\n\t(print \"(queens 1)\")\n\t(print \";==> \" (queens 1))\n\n\t(newline)\n\t(print \"(queens 2)\")\n\t(print \";==> \" (queens 2))\n\n\t(newline)\n\t(print \"(queens 3)\")\n\t(print \";==> \" (queens 3))\n\t#t)\n\n\n(load \"./sec-2.2.3-c\")\n\n\n(define (queens board-size)\n\t(define (queen-cols k)\n\t\t(if\n\t\t\t(= k 0)\n\t\t\t(list empty-board)\n\t\t\t(filter\n\t\t\t\t(lambda (positions) (safe? k positions))\n\t\t\t\t(flatmap\n\t\t\t\t\t(lambda (rest-of-queens)\n\t\t\t\t\t\t(map\n\t\t\t\t\t\t\t(lambda (new-row)\n\t\t\t\t\t\t\t\t(adjoin-position\n\t\t\t\t\t\t\t\t\tnew-row\n\t\t\t\t\t\t\t\t\tk\n\t\t\t\t\t\t\t\t\trest-of-queens))\n\t\t\t\t\t\t\t(enumerate-interval 1 board-size)))\n\t\t\t\t\t(queen-cols (- k 1))))))\n\n\t(define empty-board nil)\n\t(define (safe? k positions)\n\t\t(and\n\t\t\t(safe-left? k (car positions) (cdr positions))\n\t\t\t(safe-column? k (car positions) (cdr positions))\n\t\t\t(safe-right? (+ k 1) (car positions) (cdr positions))))\n\t(define (safe-left? k p positions)\n\t\t(cond\n\t\t\t((null? positions) #t)\n\t\t\t((= (car positions) (- p 1)) #f)\n\t\t\t(else (safe-left? k (- p 1) (cdr positions)))))\n\t(define (safe-column? k p positions)\n\t\t(cond\n\t\t\t((null? positions) #t)\n\t\t\t((= (car positions) p) #f)\n\t\t\t(else (safe-column? k p (cdr positions)))))\n\t(define (safe-right? k p positions)\n\t\t(cond\n\t\t\t((null? positions) #t)\n\t\t\t((= (car positions) (+ p 1)) #f)\n\t\t\t(else (safe-right? k (+ p 1) (cdr positions)))))\n\t(define (adjoin-position new-row k rest-of-queens)\n\t\t(cons new-row rest-of-queens))\n\t(queen-cols board-size))\n```\n\n### ex-2.42 \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.42)\n(queens 1)\n;==> ((1))\n\n(queens 2)\n;==> ()\n\n(queens 3)\n;==> ()\n```\n\n## ex-2.43\n\n\u672c\u6765\u306f board-size \u56de, \u81ea\u5206\u306b\u5fc5\u8981\u306a\u76e4\u9762\u30921\u56de\u3060\u3051\u547c\u3079\u3070\u3088\u304b\u3063\u305f\u306e\u304c,\nboard-size \u56de, \u3055\u3089\u306b board-size \u56de\u518d\u8a08\u7b97\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081.\n\nO(n) \u304c O(n^2) \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089,\nT^2 \u306e\u6642\u9593\u304c\u5fc5\u8981\u306b\u306a\u308b\u3068\u898b\u7a4d\u3082\u308c\u308b.\n"}