{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u3000\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3067\u3059\u3002C\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067std::string(\u306b\u8fd1\u3044\u3082\u306e)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001C++\u306e\u69d8\u3005\u306a\u30a8\u30c3\u30bb\u30f3\u30b9\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u4f1d\u308f\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3000\u306a\u304a\u3001\u53c2\u8003\u8cc7\u6599\u3068\u3057\u3066\u3001\u6b21\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\nC++ \u6587\u5b57\u5217\u30af\u30e9\u30b9 std::string \u5165\u9580\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6c7a\u3081\u308b\n\u3000\u4f55\u306b\u305b\u3088\u307e\u305a\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3069\u3046\u3059\u308b\u304b\u3092\u6c7a\u3081\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u4e2d\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u3088\u3046\u3068\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u5206\u306b\u306f\u69cb\u308f\u306a\u3044\u3068\u3044\u3046\u306e\u304c\u30ab\u30d7\u30bb\u30eb\u5316\u306e\u3054\u5229\u76ca\u3067\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3059\u308b\u969b\u306f\u305d\u3046\u3044\u3063\u305f\u751f\u81ed\u3044\u90e8\u5206\u306b\u89e6\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\u4ed5\u69d8\u4e0a\u3001c_str()\u304c\u547c\u3070\u308c\u305f\u969b\u306fchar\u914d\u5217\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u65e7\u6765\u306eC\u8a00\u8a9e\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3068\u306e\u4e92\u63db\u6027\u3092\u6c42\u3081\u3089\u308c\u305f\u3053\u3068\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u304c\u3001\u5225\u5f62\u5f0f\u304b\u3089\u5909\u63db\u3059\u308b\u3088\u308achar\u914d\u5217\u3092\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u305f\u65b9\u304c\u9065\u304b\u306b\u697d\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3068\u3057\u307e\u3057\u305f\u3002\n\nsample1.cpp\nclass String{\n// \u30e1\u30f3\u30d0\u5909\u6570\n    size_t m_capacity;  //\u6700\u5927\u5bb9\u91cf\n    size_t m_size;      //\u6587\u5b57\u6570\n    char *m_data;       //\u6587\u5b57\u5217\n};\n\n\n\u3000\u306a\u304a\u3001m_\u304c\u4ed8\u304f\u5909\u6570\u306f\u5143\u3005m_\u3092\u4ed8\u3051\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068size()\u3084capacity()\u3084data()\u3092\u5b9f\u88c5\u3057\u305f\u969b\u306b\u540d\u524d\u304c\u88ab\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u7cde\u306a\u4e8b\u614b\u304c\u8d77\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9f\u88c5\u3059\u308b\n\u3000\u307e\u305a\u3001std::string\u306e\u5404\u7a2e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\n\u8a18\u6cd5\n\u610f\u5473\n\n\n\n\n\u7701\u7565\n\u7a7a\u6587\u5b57\u5217\n\n\n(n,'x')\n'x'\u304cn\u500b\u4e26\u3093\u3060\u6587\u5b57\u5217\n\n\nchar &c\nchar\u914d\u5217\n\n\nchar &f,char &l\n[f, l)\u306e\u7bc4\u56f2\u306echar\u914d\u5217\n\n\nstd::string\n\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n\n\n\u3000\u305d\u306e\u4e0a\u3067\u3001\u4e0a\u8a18\u30921\u3064\u3065\u3064\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nsample2.cpp\n#include <cstring>  //\u5b9f\u88c5\u7528\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\nString::String(){   //\u7701\u7565\n    m_capacity = m_size = 0;\n    m_data = new char[m_size + 1];\n    m_data[0] = '\\0';\n}\nString::String(const size_t n, const char c){   //(n,'x')\n    m_capacity = m_size = n;\n    m_data = new char[m_size + 1];\n    for(size_t i = 0; i < m_size; ++i)\n        m_data[i] = c;\n    m_data[m_size] = '\\0';\n}\nString::String(const char *c){  //char* c\n    m_capacity = m_size = strlen(c);\n    m_data = new char[m_size + 1];\n    strcpy(m_data, c);\n}\nString::String(const char *f, const char *l){   //char* f,char* l\n    m_capacity = m_size = l - f;\n    m_data = new char[m_size + 1];\n    strncpy(m_data, f, m_size);\n    m_data[m_size] = '\\0';\n}\nString::String(const String &s){    //\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    m_capacity = s.m_capacity;\n    m_size = s.m_size;\n    m_data = new char[m_size + 1];\n    strcpy(m_data, s.m_data);\n}\n\n\n\n\u5404\u7a2e\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\n\u3000std::string\u306e\u5834\u5408\u3001[]\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066char\u578b\u3068\u3057\u30661\u6587\u5b57\u3065\u3064\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u307e\u305f\u3001+\u3084+=\u6f14\u7b97\u5b50\u3067\u6587\u5b57\u5217\u3092\u7d50\u5408\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u3000\u305d\u308c\u3089\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3067\u3059\u304c\u3001C++\u3067\u306f[\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9]\u3092\u4f7f\u3048\u3070\u53ef\u80fd\u3067\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u300cplus(a, b)\u300d\u3092\u300ca + b\u300d\u3068\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002\n\nsample3.cpp\nconst char& String::operator[](const size_t n) const{\n    return m_data[n];\n}\nchar & String::operator [](const size_t n){\n    return m_data[n];\n}\nString String::operator + (const char *c){\n    String retval(*this);\n    retval += c;\n    return retval;\n}\nString String::operator + (const String &str){\n    String retval(*this);\n    retval += str.m_data;\n    return retval;\n}\nString& String::operator += (const char *c){\n    size_t new_size = this->m_size + strlen(c);\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    strcpy(this->m_data + this->m_size, c);\n    this->m_size = new_size;\n    return *this;\n}\nString& String::operator += (const String &str){\n    size_t new_size = this->m_size + str.m_size;\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    strcpy(this->m_data + this->m_size, str.m_data);\n    this->m_size = new_size;\n    return *this;\n}\nvoid String::push_back(const char c){\n    size_t new_size = this->m_size + 1;\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    this->m_data[this->m_size]= c;\n    this->m_data[this->m_size + 1] = '\\0';\n    this->m_size = new_size;\n}\nbool String::operator == (const char *c){\n    return m_size == strlen(c) && (memcmp(this->m_data, c, m_size) == 0);\n}\n\n\n\u3000\u306a\u304a\u3001+=\u6f14\u7b97\u5b50\u3067capacity\u30922\u500d\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001std::vector\u3068\u540c\u3058\u304f\u3001\u4f55\u5ea6\u3082+=\u3059\u308b\u5834\u5408\u306b\u305d\u306e\u65b9\u304c\u52b9\u7387\u304c\u826f\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\n\u3000\u4ee5\u4e0a\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3068\u308a\u3042\u3048\u305a\u305d\u3053\u305d\u3053\u4f7f\u3048\u308b\u6587\u5b57\u5217\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059(\u6a5f\u80fd\u3068\u3057\u3066\u306f\u7d50\u69cb\u7aef\u6298\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f)\u3002\u5f8c\u306f\u3001\u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nsample4.cpp\nbool String::empty() const{\n    return (m_size == 0);\n}\nsize_t String::size() const{\n    return m_size;\n}\nsize_t String::length() const{\n    return m_size;\n}\nsize_t String::capacity() const{\n    return m_capacity;\n}\nconst char& String::front() const{\n    return m_data[0];\n}\nconst char& String::back() const{\n    return m_data[m_size - 1];\n}\nchar& String::front(){\n    return m_data[0];\n}\nchar& String::back(){\n    return m_data[m_size - 1];\n}\nString String::substr(const size_t index, const size_t size) const{\n    String retval(this->m_data + index, this->m_data + index + size);\n    return retval;\n}\nconst char* String::c_str() const{\n    return this->m_data;\n}\nconst char* String::data() const{\n    return this->m_data;\n}\nsize_t String::find(const char *c, const size_t index) const{\n    char *pos = strstr(this->m_data + index, c);\n    if(pos == NULL) return String::npos;\n    return pos - this->m_data;\n}\n\n\n\u3000\u3061\u306a\u307f\u306b\u3001find\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3088\u304f\u898b\u308bstd::string::npos\u306f\u3001std::string\u30af\u30e9\u30b9\u3067static\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u300c-1\u300d\u306a\u306e\u3060\u305d\u3046\u3067\u3002\n\n\u307e\u3068\u3081\n\u3000\u3082\u3061\u308d\u3093\u3001\u5358\u306b\u6587\u5b57\u5217\u3092\u52b9\u7387\u7684\u306b\u6271\u3044\u305f\u3044\u969b\u306f\u7d20\u76f4\u306bSTL\u306estd::string\u3092\u5229\u7528\u3057\u307e\u3057\u3087\u3046\u3002\u305f\u3060\u3001\u3053\u3046\u3057\u3066\u518d\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001\u7d30\u3084\u304b\u306a\u3068\u3053\u308d\u307e\u3067\u6c7a\u3081\u3089\u308c\u308bC++\u306e\u5f37\u307f\u304c\u6539\u3081\u3066\u611f\u3058\u3089\u308c\u307e\u3059\u3002\u6c17\u306b\u306a\u308b\u4eba\u306f\u3001\u672c\u5f53\u306estd::string\u306e\u5b9f\u88c5\u3092\u958b\u767a\u74b0\u5883\u304b\u3089\u8aad\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u304b\u3068(IDE\u3060\u3068\u95a2\u6570\u5b9a\u7fa9\u307e\u3067\u7c21\u5358\u306b\u30b8\u30e3\u30f3\u30d7\u3067\u304d\u308b\u306e\u3067)\u3002\n\n\u304a\u307e\u3051(\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9)\n\nString.cpp\n#include <iostream>\n#include <cstring>  //\u5b9f\u88c5\u7528\nusing namespace std;\n\nclass String{\n// \u30e1\u30f3\u30d0\u5909\u6570\n    size_t m_capacity;  //\u6700\u5927\u5bb9\u91cf\n    size_t m_size;      //\u6587\u5b57\u6570\n    char *m_data;       //\u6587\u5b57\u5217\npublic:\n// \u5b9a\u6570\n    static const size_t npos = -1;\n// \u30e1\u30f3\u30d0\u95a2\u6570\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    String();\n    String(const size_t n, const char);\n    String(const char*);\n    String(const char*, const char*);\n    String(const String&);\n    // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n    ~String(){\n        delete[] m_data;\n    }\n    // \u6f14\u7b97\u5b50\n    char &operator [](const size_t);\n    const char& operator[](const size_t) const;\n    String operator + (const char*);\n    String operator + (const String&);\n    String& operator += (const char*);\n    String& operator += (const String&);\n    void push_back(const char);\n    bool operator==(const char*);\n    // \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\n    bool empty() const;\n    size_t size() const;\n    size_t length() const;\n    size_t capacity() const;\n    const char& front() const;\n    const char& back() const;\n    char& front();\n    char& back();\n    String substr(const size_t, const size_t) const;\n    const char* c_str() const;\n    const char* data() const;\n    size_t find(const char*, const size_t) const;\n\n    void put();\n};\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\nString::String(){   //\u7701\u7565\n    m_capacity = m_size = 0;\n    m_data = new char[m_size + 1];\n    m_data[0] = '\\0';\n}\nString::String(const size_t n, const char c){   //(n,'x')\n    m_capacity = m_size = n;\n    m_data = new char[m_size + 1];\n    for(size_t i = 0; i < m_size; ++i)\n        m_data[i] = c;\n    m_data[m_size] = '\\0';\n}\nString::String(const char *c){  //char* c\n    m_capacity = m_size = strlen(c);\n    m_data = new char[m_size + 1];\n    strcpy(m_data, c);\n}\nString::String(const char *f, const char *l){   //char* f,char* l\n    m_capacity = m_size = l - f;\n    m_data = new char[m_size + 1];\n    strncpy(m_data, f, m_size);\n    m_data[m_size] = '\\0';\n}\nString::String(const String &s){    //\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    m_capacity = s.m_capacity;\n    m_size = s.m_size;\n    m_data = new char[m_size + 1];\n    strcpy(m_data, s.m_data);\n}\n// \u6f14\u7b97\u5b50\nconst char& String::operator[](const size_t n) const{\n    return m_data[n];\n}\nchar & String::operator [](const size_t n){\n    return m_data[n];\n}\nString String::operator + (const char *c){\n    String retval(*this);\n    retval += c;\n    return retval;\n}\nString String::operator + (const String &str){\n    String retval(*this);\n    retval += str.m_data;\n    return retval;\n}\nString& String::operator += (const char *c){\n    size_t new_size = this->m_size + strlen(c);\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    strcpy(this->m_data + this->m_size, c);\n    this->m_size = new_size;\n    return *this;\n}\nString& String::operator += (const String &str){\n    size_t new_size = this->m_size + str.m_size;\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    strcpy(this->m_data + this->m_size, str.m_data);\n    this->m_size = new_size;\n    return *this;\n}\nvoid String::push_back(const char c){\n    size_t new_size = this->m_size + 1;\n    if(this->m_capacity < new_size){\n        while(this->m_capacity < new_size){\n            this->m_capacity *= 2;\n        }\n        char *new_m_data = new char[this->m_capacity + 1];\n        memcpy(new_m_data, this->m_data, this->m_size);\n        this->m_data = new_m_data;\n    }\n    this->m_data[this->m_size]= c;\n    this->m_data[this->m_size + 1] = '\\0';\n    this->m_size = new_size;\n}\nbool String::operator == (const char *c){\n    return m_size == strlen(c) && (memcmp(this->m_data, c, m_size) == 0);\n}\n// \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\nbool String::empty() const{\n    return (m_size == 0);\n}\nsize_t String::size() const{\n    return m_size;\n}\nsize_t String::length() const{\n    return m_size;\n}\nsize_t String::capacity() const{\n    return m_capacity;\n}\nconst char& String::front() const{\n    return m_data[0];\n}\nconst char& String::back() const{\n    return m_data[m_size - 1];\n}\nchar& String::front(){\n    return m_data[0];\n}\nchar& String::back(){\n    return m_data[m_size - 1];\n}\nString String::substr(const size_t index, const size_t size) const{\n    String retval(this->m_data + index, this->m_data + index + size);\n    return retval;\n}\nconst char* String::c_str() const{\n    return this->m_data;\n}\nconst char* String::data() const{\n    return this->m_data;\n}\nsize_t String::find(const char *c, const size_t index) const{\n    char *pos = strstr(this->m_data + index, c);\n    if(pos == NULL) return String::npos;\n    return pos - this->m_data;\n}\n\nvoid String::put(){\n    cout << m_capacity << \"|\" << m_size << \"|\" << m_data << \"|\\n\";\n}\nint main(){\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    String str; str.put();\n    String a10(10, 'a'); a10.put();\n    String labo_men1(\"Okabe\"); labo_men1.put();\n    char assist[] = \"Christina\"; String labo_men2(assist, assist + 5); labo_men2.put();\n    String l1(labo_men1); l1.put();\n    // \u6f14\u7b97\u5b50\n    //[]\n    String code(10, ' ');\n    for(int i = 0; i < 10; ++i)\n        code[i] = static_cast<char>('0' + i);\n    code.put();\n    //+\n    String labo_men3(\"Mayushi\"), ttr(\" TTR\"); String l3 = labo_men3 + ttr; l3.put();\n    String labo_men4(\"Daru\"), sh(\"SuperHacker\"); String l4 = labo_men4 + \" is \" + sh; l4.put();\n    //+=\n    String test(\"t\");\n    test.put();\n    test += \"es\";\n    test.put();\n    test.push_back('t');\n    test.put();\n    if(test == \"test\"){\n        cout << \"test == \\\"test\\\"\" << endl;\n    }\n    // \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\n    cout << str.empty() << endl;\n    cout << labo_men4.size() << endl;\n    labo_men4 += \".\";\n    cout << labo_men4.length() << endl;\n    cout << labo_men4.capacity() << endl;\n    labo_men4.put();\n    cout << labo_men4.front() << \" \" << labo_men4.back() << endl;\n    cout << labo_men4.substr(1, 3).c_str() << endl;\n    cout << labo_men3.find(\"us\", 1) << endl;\n}\n\n\n#\u6982\u8981\n\u3000\u30bf\u30a4\u30c8\u30eb\u306e\u901a\u308a\u3067\u3059\u3002C\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067std::string(\u306b\u8fd1\u3044\u3082\u306e)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001C++\u306e\u69d8\u3005\u306a\u30a8\u30c3\u30bb\u30f3\u30b9\u304c\u308f\u304b\u308a\u3084\u3059\u304f\u4f1d\u308f\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3000\u306a\u304a\u3001\u53c2\u8003\u8cc7\u6599\u3068\u3057\u3066\u3001\u6b21\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\n\n[C++ \u6587\u5b57\u5217\u30af\u30e9\u30b9 std::string \u5165\u9580](http://vivi.dyndns.org/tech/cpp/string.html)\n\n#\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u6c7a\u3081\u308b\n\u3000\u4f55\u306b\u305b\u3088\u307e\u305a\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3069\u3046\u3059\u308b\u304b\u3092\u6c7a\u3081\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002**\u4e2d\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u3088\u3046\u3068\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3046\u5206\u306b\u306f\u69cb\u308f\u306a\u3044**\u3068\u3044\u3046\u306e\u304c\u30ab\u30d7\u30bb\u30eb\u5316\u306e\u3054\u5229\u76ca\u3067\u3059\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3059\u308b\u969b\u306f\u305d\u3046\u3044\u3063\u305f**\u751f\u81ed\u3044\u90e8\u5206**\u306b\u89e6\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3000\u4ed5\u69d8\u4e0a\u3001**c_str()\u304c\u547c\u3070\u308c\u305f\u969b\u306fchar\u914d\u5217\u306e\u5148\u982d\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3059**\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u65e7\u6765\u306eC\u8a00\u8a9e\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3068\u306e\u4e92\u63db\u6027\u3092\u6c42\u3081\u3089\u308c\u305f\u3053\u3068\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u304c\u3001\u5225\u5f62\u5f0f\u304b\u3089\u5909\u63db\u3059\u308b\u3088\u308achar\u914d\u5217\u3092\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u305f\u65b9\u304c**\u9065\u304b\u306b\u697d**\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3068\u3057\u307e\u3057\u305f\u3002\n\n```sample1.cpp\nclass String{\n// \u30e1\u30f3\u30d0\u5909\u6570\n\tsize_t m_capacity;\t//\u6700\u5927\u5bb9\u91cf\n\tsize_t m_size;\t\t//\u6587\u5b57\u6570\n\tchar *m_data;\t\t//\u6587\u5b57\u5217\n};\n```\n\u3000\u306a\u304a\u3001m_\u304c\u4ed8\u304f\u5909\u6570\u306f\u5143\u3005m_\u3092\u4ed8\u3051\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068**size()\u3084capacity()\u3084data()\u3092\u5b9f\u88c5\u3057\u305f\u969b\u306b\u540d\u524d\u304c\u88ab\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044**\u3068\u3044\u3046**\u7cde\u306a\u4e8b\u614b**\u304c\u8d77\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\n\n#\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9f\u88c5\u3059\u308b\n\u3000\u307e\u305a\u3001std::string\u306e\u5404\u7a2e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n|\u8a18\u6cd5|\u610f\u5473|\n|---|----|\n|\u7701\u7565|\u7a7a\u6587\u5b57\u5217|\n|(n,'x')|'x'\u304cn\u500b\u4e26\u3093\u3060\u6587\u5b57\u5217|\n|char &c|char\u914d\u5217|\n|char &f,char &l|[f, l)\u306e\u7bc4\u56f2\u306echar\u914d\u5217|\n|std::string|**\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf**|\n\u3000\u305d\u306e\u4e0a\u3067\u3001\u4e0a\u8a18\u30921\u3064\u3065\u3064\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```sample2.cpp\n#include <cstring>\t//\u5b9f\u88c5\u7528\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\nString::String(){\t//\u7701\u7565\n\tm_capacity = m_size = 0;\n\tm_data = new char[m_size + 1];\n\tm_data[0] = '\\0';\n}\nString::String(const size_t n, const char c){\t//(n,'x')\n\tm_capacity = m_size = n;\n\tm_data = new char[m_size + 1];\n\tfor(size_t i = 0; i < m_size; ++i)\n\t\tm_data[i] = c;\n\tm_data[m_size] = '\\0';\n}\nString::String(const char *c){\t//char* c\n\tm_capacity = m_size = strlen(c);\n\tm_data = new char[m_size + 1];\n\tstrcpy(m_data, c);\n}\nString::String(const char *f, const char *l){\t//char* f,char* l\n\tm_capacity = m_size = l - f;\n\tm_data = new char[m_size + 1];\n\tstrncpy(m_data, f, m_size);\n\tm_data[m_size] = '\\0';\n}\nString::String(const String &s){\t//\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\tm_capacity = s.m_capacity;\n\tm_size = s.m_size;\n\tm_data = new char[m_size + 1];\n\tstrcpy(m_data, s.m_data);\n}\n```\n#\u5404\u7a2e\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\n\u3000std::string\u306e\u5834\u5408\u3001[]\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066char\u578b\u3068\u3057\u30661\u6587\u5b57\u3065\u3064\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u307e\u305f\u3001+\u3084+=\u6f14\u7b97\u5b50\u3067\u6587\u5b57\u5217\u3092\u7d50\u5408\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u3000\u305d\u308c\u3089\u3092\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\u3067\u3059\u304c\u3001C++\u3067\u306f[\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9]\u3092\u4f7f\u3048\u3070\u53ef\u80fd\u3067\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u300cplus(a, b)\u300d\u3092\u300ca + b\u300d\u3068\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n```sample3.cpp\nconst char& String::operator[](const size_t n) const{\n\treturn m_data[n];\n}\nchar & String::operator [](const size_t n){\n\treturn m_data[n];\n}\nString String::operator + (const char *c){\n\tString retval(*this);\n\tretval += c;\n\treturn retval;\n}\nString String::operator + (const String &str){\n\tString retval(*this);\n\tretval += str.m_data;\n\treturn retval;\n}\nString& String::operator += (const char *c){\n\tsize_t new_size = this->m_size + strlen(c);\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tstrcpy(this->m_data + this->m_size, c);\n\tthis->m_size = new_size;\n\treturn *this;\n}\nString& String::operator += (const String &str){\n\tsize_t new_size = this->m_size + str.m_size;\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tstrcpy(this->m_data + this->m_size, str.m_data);\n\tthis->m_size = new_size;\n\treturn *this;\n}\nvoid String::push_back(const char c){\n\tsize_t new_size = this->m_size + 1;\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tthis->m_data[this->m_size]= c;\n\tthis->m_data[this->m_size + 1] = '\\0';\n\tthis->m_size = new_size;\n}\nbool String::operator == (const char *c){\n\treturn m_size == strlen(c) && (memcmp(this->m_data, c, m_size) == 0);\n}\n```\n\u3000\u306a\u304a\u3001+=\u6f14\u7b97\u5b50\u3067capacity\u30922\u500d\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001std::vector\u3068\u540c\u3058\u304f\u3001**[\u4f55\u5ea6\u3082+=\u3059\u308b\u5834\u5408\u306b\u305d\u306e\u65b9\u304c\u52b9\u7387\u304c\u826f\u3044](http://chasen.org/~taku/blog/archives/2007/02/_o1.html)**\u304b\u3089\u3067\u3059\u3002\n#\u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\n\u3000\u4ee5\u4e0a\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3068\u308a\u3042\u3048\u305a\u305d\u3053\u305d\u3053\u4f7f\u3048\u308b\u6587\u5b57\u5217\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059(\u6a5f\u80fd\u3068\u3057\u3066\u306f\u7d50\u69cb\u7aef\u6298\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f)\u3002\u5f8c\u306f\u3001\u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```sample4.cpp\nbool String::empty() const{\n\treturn (m_size == 0);\n}\nsize_t String::size() const{\n\treturn m_size;\n}\nsize_t String::length() const{\n\treturn m_size;\n}\nsize_t String::capacity() const{\n\treturn m_capacity;\n}\nconst char& String::front() const{\n\treturn m_data[0];\n}\nconst char& String::back() const{\n\treturn m_data[m_size - 1];\n}\nchar& String::front(){\n\treturn m_data[0];\n}\nchar& String::back(){\n\treturn m_data[m_size - 1];\n}\nString String::substr(const size_t index, const size_t size) const{\n\tString retval(this->m_data + index, this->m_data + index + size);\n\treturn retval;\n}\nconst char* String::c_str() const{\n\treturn this->m_data;\n}\nconst char* String::data() const{\n\treturn this->m_data;\n}\nsize_t String::find(const char *c, const size_t index) const{\n\tchar *pos = strstr(this->m_data + index, c);\n\tif(pos == NULL) return String::npos;\n\treturn pos - this->m_data;\n}\n```\n\u3000\u3061\u306a\u307f\u306b\u3001find\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u3088\u304f\u898b\u308bstd::string::npos\u306f\u3001std::string\u30af\u30e9\u30b9\u3067static\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u300c-1\u300d\u306a\u306e\u3060\u305d\u3046\u3067\u3002\n\n#\u307e\u3068\u3081\n\u3000\u3082\u3061\u308d\u3093\u3001\u5358\u306b**\u6587\u5b57\u5217\u3092\u52b9\u7387\u7684\u306b\u6271\u3044\u305f\u3044\u969b\u306f\u7d20\u76f4\u306bSTL\u306estd::string\u3092\u5229\u7528\u3057\u307e\u3057\u3087\u3046**\u3002\u305f\u3060\u3001\u3053\u3046\u3057\u3066\u518d\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001\u7d30\u3084\u304b\u306a\u3068\u3053\u308d\u307e\u3067\u6c7a\u3081\u3089\u308c\u308bC++\u306e\u5f37\u307f\u304c\u6539\u3081\u3066\u611f\u3058\u3089\u308c\u307e\u3059\u3002\u6c17\u306b\u306a\u308b\u4eba\u306f\u3001\u672c\u5f53\u306estd::string\u306e\u5b9f\u88c5\u3092\u958b\u767a\u74b0\u5883\u304b\u3089\u8aad\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u304b\u3068(IDE\u3060\u3068\u95a2\u6570\u5b9a\u7fa9\u307e\u3067\u7c21\u5358\u306b\u30b8\u30e3\u30f3\u30d7\u3067\u304d\u308b\u306e\u3067)\u3002\n\n#\u304a\u307e\u3051(\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9)\n```String.cpp\n#include <iostream>\n#include <cstring>\t//\u5b9f\u88c5\u7528\nusing namespace std;\n\nclass String{\n// \u30e1\u30f3\u30d0\u5909\u6570\n\tsize_t m_capacity;\t//\u6700\u5927\u5bb9\u91cf\n\tsize_t m_size;\t\t//\u6587\u5b57\u6570\n\tchar *m_data;\t\t//\u6587\u5b57\u5217\npublic:\n// \u5b9a\u6570\n\tstatic const size_t npos = -1;\n// \u30e1\u30f3\u30d0\u95a2\u6570\n\t// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\tString();\n\tString(const size_t n, const char);\n\tString(const char*);\n\tString(const char*, const char*);\n\tString(const String&);\n\t// \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\n\t~String(){\n\t\tdelete[] m_data;\n\t}\n\t// \u6f14\u7b97\u5b50\n\tchar &operator [](const size_t);\n\tconst char& operator[](const size_t) const;\n\tString operator + (const char*);\n\tString operator + (const String&);\n\tString& operator += (const char*);\n\tString& operator += (const String&);\n\tvoid push_back(const char);\n\tbool operator==(const char*);\n\t// \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\n\tbool empty() const;\n\tsize_t size() const;\n\tsize_t length() const;\n\tsize_t capacity() const;\n\tconst char& front() const;\n\tconst char& back() const;\n\tchar& front();\n\tchar& back();\n\tString substr(const size_t, const size_t) const;\n\tconst char* c_str() const;\n\tconst char* data() const;\n\tsize_t find(const char*, const size_t) const;\n\n\tvoid put();\n};\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\nString::String(){\t//\u7701\u7565\n\tm_capacity = m_size = 0;\n\tm_data = new char[m_size + 1];\n\tm_data[0] = '\\0';\n}\nString::String(const size_t n, const char c){\t//(n,'x')\n\tm_capacity = m_size = n;\n\tm_data = new char[m_size + 1];\n\tfor(size_t i = 0; i < m_size; ++i)\n\t\tm_data[i] = c;\n\tm_data[m_size] = '\\0';\n}\nString::String(const char *c){\t//char* c\n\tm_capacity = m_size = strlen(c);\n\tm_data = new char[m_size + 1];\n\tstrcpy(m_data, c);\n}\nString::String(const char *f, const char *l){\t//char* f,char* l\n\tm_capacity = m_size = l - f;\n\tm_data = new char[m_size + 1];\n\tstrncpy(m_data, f, m_size);\n\tm_data[m_size] = '\\0';\n}\nString::String(const String &s){\t//\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\tm_capacity = s.m_capacity;\n\tm_size = s.m_size;\n\tm_data = new char[m_size + 1];\n\tstrcpy(m_data, s.m_data);\n}\n// \u6f14\u7b97\u5b50\nconst char& String::operator[](const size_t n) const{\n\treturn m_data[n];\n}\nchar & String::operator [](const size_t n){\n\treturn m_data[n];\n}\nString String::operator + (const char *c){\n\tString retval(*this);\n\tretval += c;\n\treturn retval;\n}\nString String::operator + (const String &str){\n\tString retval(*this);\n\tretval += str.m_data;\n\treturn retval;\n}\nString& String::operator += (const char *c){\n\tsize_t new_size = this->m_size + strlen(c);\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tstrcpy(this->m_data + this->m_size, c);\n\tthis->m_size = new_size;\n\treturn *this;\n}\nString& String::operator += (const String &str){\n\tsize_t new_size = this->m_size + str.m_size;\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tstrcpy(this->m_data + this->m_size, str.m_data);\n\tthis->m_size = new_size;\n\treturn *this;\n}\nvoid String::push_back(const char c){\n\tsize_t new_size = this->m_size + 1;\n\tif(this->m_capacity < new_size){\n\t\twhile(this->m_capacity < new_size){\n\t\t\tthis->m_capacity *= 2;\n\t\t}\n\t\tchar *new_m_data = new char[this->m_capacity + 1];\n\t\tmemcpy(new_m_data, this->m_data, this->m_size);\n\t\tthis->m_data = new_m_data;\n\t}\n\tthis->m_data[this->m_size]= c;\n\tthis->m_data[this->m_size + 1] = '\\0';\n\tthis->m_size = new_size;\n}\nbool String::operator == (const char *c){\n\treturn m_size == strlen(c) && (memcmp(this->m_data, c, m_size) == 0);\n}\n// \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\nbool String::empty() const{\n\treturn (m_size == 0);\n}\nsize_t String::size() const{\n\treturn m_size;\n}\nsize_t String::length() const{\n\treturn m_size;\n}\nsize_t String::capacity() const{\n\treturn m_capacity;\n}\nconst char& String::front() const{\n\treturn m_data[0];\n}\nconst char& String::back() const{\n\treturn m_data[m_size - 1];\n}\nchar& String::front(){\n\treturn m_data[0];\n}\nchar& String::back(){\n\treturn m_data[m_size - 1];\n}\nString String::substr(const size_t index, const size_t size) const{\n\tString retval(this->m_data + index, this->m_data + index + size);\n\treturn retval;\n}\nconst char* String::c_str() const{\n\treturn this->m_data;\n}\nconst char* String::data() const{\n\treturn this->m_data;\n}\nsize_t String::find(const char *c, const size_t index) const{\n\tchar *pos = strstr(this->m_data + index, c);\n\tif(pos == NULL) return String::npos;\n\treturn pos - this->m_data;\n}\n\nvoid String::put(){\n\tcout << m_capacity << \"|\" << m_size << \"|\" << m_data << \"|\\n\";\n}\nint main(){\n\t// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\tString str; str.put();\n\tString a10(10, 'a'); a10.put();\n\tString labo_men1(\"Okabe\"); labo_men1.put();\n\tchar assist[] = \"Christina\"; String labo_men2(assist, assist + 5); labo_men2.put();\n\tString l1(labo_men1); l1.put();\n\t// \u6f14\u7b97\u5b50\n\t//[]\n\tString code(10, ' ');\n\tfor(int i = 0; i < 10; ++i)\n\t\tcode[i] = static_cast<char>('0' + i);\n\tcode.put();\n\t//+\n\tString labo_men3(\"Mayushi\"), ttr(\" TTR\"); String l3 = labo_men3 + ttr; l3.put();\n\tString labo_men4(\"Daru\"), sh(\"SuperHacker\"); String l4 = labo_men4 + \" is \" + sh; l4.put();\n\t//+=\n\tString test(\"t\");\n\ttest.put();\n\ttest += \"es\";\n\ttest.put();\n\ttest.push_back('t');\n\ttest.put();\n\tif(test == \"test\"){\n\t\tcout << \"test == \\\"test\\\"\" << endl;\n\t}\n\t// \u5404\u7a2e\u30e1\u30f3\u30d0\u95a2\u6570\n\tcout << str.empty() << endl;\n\tcout << labo_men4.size() << endl;\n\tlabo_men4 += \".\";\n\tcout << labo_men4.length() << endl;\n\tcout << labo_men4.capacity() << endl;\n\tlabo_men4.put();\n\tcout << labo_men4.front() << \" \" << labo_men4.back() << endl;\n\tcout << labo_men4.substr(1, 3).c_str() << endl;\n\tcout << labo_men3.find(\"us\", 1) << endl;\n}\n```\n", "tags": ["C++", "string", "\u8eca\u8f2a\u306e\u518d\u767a\u660e", "STL", "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411"]}