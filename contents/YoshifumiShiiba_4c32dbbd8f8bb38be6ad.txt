{"context": "\u30aa\u30ea\u30a3\u7814\u7a76\u6240\uff08http://orylab.com/\uff09 \u306e \u690e\u8449\u3067\u3059\u3002\n\u6700\u8fd1bleno\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u904a\u3093\u3067\u307f\u307e\u3059\u3002\n\nbleno\nMac\u3001Win\u3001Linux\u306e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067Bluetooth\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\uff08\u30c7\u30d0\u30a4\u30b9\u5074\uff09\u306e\u5b9f\u88c5\u304c\u884c\u3048\u308bNode.js\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nMac\u3067\u306fXCode\u304c\u3001Win\u3067\u306f\u5bfe\u5fdc\u3057\u305fBluetooth\u30a2\u30c0\u30d7\u30bf\u304c\u5fc5\u8981\u3068\u3001\u5b9f\u884c\u3067\u304d\u308b\u74b0\u5883\u304c\u9650\u3089\u308c\u308b\u306e\u3067\u901a\u5e38\u306eElectron\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3093\u304b\u3067\u306f\u3042\u307e\u308a\u5b9f\u7528\u7684\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u3001\u7d44\u307f\u8fbc\u307f\u7528\u9014\u3067\u306f\u3061\u3083\u3093\u3068\u6a5f\u80fd\u3057\u307e\u3059\u3002\n\u624b\u5143\u3067\u52d5\u304b\u3059\u3060\u3051\u3067\u3082\u3001Bluetooth\u3067\u30c7\u30d0\u30a4\u30b9\u3092\u6a2a\u65ad\u3057\u3066\u3044\u308b\u3068\u306a\u3093\u304b\u697d\u3057\u3044\u3067\u3059\u3002\n\u4eca\u56de\u306f1Keyboard(http://www.eyalw.com/1keyboard) \u306e\u3088\u3046\u306b\u3001Mac\u5074\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u52d5\u4f5c\u3059\u308biOS\u306e\u30ab\u30b9\u30bf\u30e0\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nbleno\u5074\u6e96\u5099\n\u4ee5\u4e0b\u3001OS X\u3067\u306e\u307f\u5b9f\u884c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\nNode.js\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u3067\nnpm install bleno --save\n\n\u3057\u307e\u3059\u3002\u3053\u308c\u3067bleno\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\u30d3\u30eb\u30c9\u3082\u6e08\u307f\u307e\u3059\u3002\n\nbleno\u30af\u30e9\u30b9\nlib\u306bbleno.coffee\u3068\u304b\u3092\u4f5c\u3063\u3066bleno\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nlib/bleno.coffee\nbleno = null\nreadline = require 'readline'\n\nclass Bleno\n\n  readLine: null\n  stop: false\n\n  constructor: ()->\n    try\n      # bleno\u306frequire\u304c\u4f8b\u5916\u3092\u5410\u304f\n      bleno = require 'bleno'\n      @init()\n    catch error\n      bleno = null\n\n  init: ()->\n    name = 'BlenoKeyboard'\n    serviceUuids = [ 'fff0' ]\n\n    # Service\u306e\u5b9a\u7fa9\n    primaryService = new bleno.PrimaryService\n      uuid: 'fff0'\n      characteristics: [\n\n        # Characteristic\u306e\u5b9a\u7fa9\n        new bleno.Characteristic\n          uuid: 'fff1'\n          properties: [\n            'notify'\n          ]\n\n          # Notify\u306b\u767b\u9332\u3055\u308c\u305f\u6642\n          onSubscribe: (maxValueSize, updateValueCallback)=>\n            @stop = false\n            @startInput updateValueCallback\n\n          # Notify\u304c\u89e3\u9664\u3055\u308c\u305f\u6642\n          onUnsubscribe: ()=>\n            @stopInput()\n      ]\n\n    # bluetooth\u30c7\u30d0\u30a4\u30b9\u306e\u72b6\u614b\u5909\u5316\u30a4\u30d9\u30f3\u30c8\n    bleno.on 'stateChange', (state) ->\n      console.log 'stateChange: ' + state\n      if state == 'poweredOn'\n        bleno.startAdvertising name, serviceUuids, (error) ->\n          if error\n            console.error error\n          return\n      else\n        # start\u3059\u308b\n        bleno.stopAdvertising()\n      return\n\n    # advertising start\u30a4\u30d9\u30f3\u30c8\n    bleno.on 'advertisingStart', (error) ->\n      if !error\n        console.log 'start advertising...'\n        # Service\u8a2d\u7f6e\n        bleno.setServices [ primaryService ]\n      else\n        console.error error\n      return\n\n  # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u9001\u4fe1\u3059\u308b\n  startInput: (valueCallback)->\n    @readLine = readline.createInterface\n      input: process.stdin\n      output: process.stdout\n\n    @readLine.question \">\", (answer)=>\n      if answer isnt \"\"\n        data = Buffer.from answer, 'utf8'\n        # iOS\u30c7\u30d0\u30a4\u30b9\u3078\u9001\u4fe1\uff01\n        valueCallback data\n      @readLine.close()\n      if @stop then return\n      @startInput valueCallback\n\n  # \u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u9001\u4fe1\u3059\u308b\n  stopInput: ()->\n    @stop = true\n    if @readLine\n      @readLine.close()\n\n\n\u3053\u308c\u3092index.js\u304b\u3089\u5b9f\u884c\u3059\u308c\u3070Node.js\u5074\u306e\u5b9f\u88c5\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\nindex.js\n// \u7121\u3044\u306a\u3089 npm install coffee-script --save\nrequire('coffee-script/register');\n\nBleno = require('./lib/bleno');\nnew Bleno();\n\n\n\n\u8a66\u3059\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\nnode index.js\n\niOS\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\nLightBlue Explorer\uff08 https://itunes.apple.com/us/app/lightblue-explorer-bluetooth/id557428110?mt=8 \uff09\u3092iOS\u30c7\u30d0\u30a4\u30b9\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001Mac\u3084\u5b9f\u884c\u30c7\u30d0\u30a4\u30b9\u3092\u63a2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u898b\u3064\u304b\u3063\u305f\u3089\u63a5\u7d9a\u3057\u3066notifications\u3092\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u3057\u307e\u3059\u3002Node.js\u5074\u3067\u306e\u5165\u529b\u304c\u6bce\u56de\u9001\u4fe1\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u304c\u52d5\u3051\u3070\u3082\u3046\u4e00\u606f\u3002\n\niOS\u5074\u3092Swift\u3067\u5b9f\u88c5\u3059\u308b\nXCode\u3068Swift 3\u306b\u79fb\u52d5\u3057\u3066\u3001iOS\u30a2\u30d7\u30ea\u5074\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u30ab\u30b9\u30bf\u30e0\u30ad\u30fc\u30dc\u30fc\u30c9\u306b\u3001CoreBluetooth\u3092\u7d44\u307f\u8fbc\u3093\u3067Node.js\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u3068\u9023\u643a\u3057\u307e\u3059\u3002\ndeviceName\u306bLightBlue\u3067\u898b\u3064\u304b\u3063\u305f\u30c7\u30d0\u30a4\u30b9\u540d\u3092\u5165\u308c\u307e\u3059\u3002\u81ea\u5206\u306eMac\u306e\u540d\u524d\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\nKeyboardViewController.swift\nimport UIKit\nimport CoreBluetooth\n\nclass KeyboardViewController: UIInputViewController, CBCentralManagerDelegate, CBPeripheralDelegate {\n\n  @IBOutlet var nextKeyboardButton: UIButton!\n\n  let deviceName = \"Enter your Mac name\"\n  var centralManager: CBCentralManager!\n  var peripheral: CBPeripheral!\n  var characteristics = [CBCharacteristic]()\n\n  override func updateViewConstraints() {\n    super.updateViewConstraints()\n\n    // Add custom view sizing constraints here\n  }\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    self.centralManager = CBCentralManager(delegate: self, queue: nil)\n\n    // Perform custom UI setup here\n    self.nextKeyboardButton = UIButton(type: .system)\n\n    self.nextKeyboardButton.setTitle(NSLocalizedString(\"Next Keyboard\", comment: \"Title for 'Next Keyboard' button\"), for: [])\n    self.nextKeyboardButton.sizeToFit()\n    self.nextKeyboardButton.translatesAutoresizingMaskIntoConstraints = false\n\n    self.nextKeyboardButton.addTarget(self, action: #selector(handleInputModeList(from:with:)), for: .allTouchEvents)\n\n    self.view.addSubview(self.nextKeyboardButton)\n\n    self.nextKeyboardButton.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true\n    self.nextKeyboardButton.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true\n  }\n\n  override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    if self.centralManager.state == CBManagerState.poweredOn {\n      self.centralManager.scanForPeripherals(withServices: nil, options: nil)\n    }\n  }\n  override func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let centralManager = self.centralManager {\n      if centralManager.state == CBManagerState.poweredOn {\n        if let peripheral = self.peripheral {\n          if peripheral.state == CBPeripheralState.connected {\n            centralManager.cancelPeripheralConnection(peripheral)\n          }\n        }\n      }\n    }\n  }\n\n  override func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated\n  }\n\n  override func textWillChange(_ textInput: UITextInput?) {\n    // The app is about to change the document's contents. Perform any preparation here.\n  }\n\n  override func textDidChange(_ textInput: UITextInput?) {\n    // The app has just changed the document's contents, the document context has been updated.\n  }\n\n  // MARK: - bluetooth\n\n  func centralManagerDidUpdateState(_ central: CBCentralManager) {\n    print(\"ble state: \\(central.state)\")\n    if central.state == CBManagerState.poweredOn {\n      print(\"ble state is on\")\n      self.centralManager.scanForPeripherals(withServices: nil, options: nil)\n    }\n  }\n\n  func centralManager(_ central: CBCentralManager,\n                      didDiscoverPeripheral peripheral: CBPeripheral,\n                      advertisementData: [String : AnyObject],\n                      RSSI: NSNumber) {\n    print(\"ble peripheral: \\(peripheral)\")\n    if peripheral.name == self.deviceName {\n      if self.centralManager.state == CBManagerState.poweredOn {\n        self.centralManager.stopScan()\n      }\n\n      self.peripheral = peripheral\n      self.centralManager.connect(peripheral, options: nil)\n      print(\"connecting peripheral...\")\n    }\n  }\n\n  func centralManager(_ central: CBCentralManager,\n                      didConnect peripheral: CBPeripheral)\n  {\n    print(\"connected peripheral\")\n    self.peripheral.delegate = self\n    self.peripheral.discoverServices(nil)\n  }\n\n  func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: NSError?) {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n\n    if let services = peripheral.services {\n      if services.count > 0 {\n        for service in services {\n          if service.uuid.uuidString == \"FFF0\" {\n            self.peripheral.discoverCharacteristics(nil, for: service)\n          }\n        }\n      }\n    }\n  }\n  func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsForService service: CBService, error: NSError?) {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n\n    if let characteristics = service.characteristics {\n      print(\"Found \\(characteristics.count) characteristics! : \\(characteristics)\")\n      self.characteristics = characteristics\n      self.startNotice()\n    }\n  }\n\n  func startNotice() {\n    for characteristic in self.characteristics {\n      if characteristic.uuid.uuidString == \"FFF1\" {\n        print(\"start notice\")\n        self.peripheral.setNotifyValue(true, for: characteristic)\n      }\n    }\n  }\n  func stopNotice() {\n    for characteristic in self.characteristics {\n      if characteristic.uuid.uuidString == \"FFF1\" {\n        print(\"stop notice\")\n        self.peripheral.setNotifyValue(false, for: characteristic)\n      }\n    }\n  }\n  func peripheral(_ peripheral: CBPeripheral, didUpdateValueForCharacteristic characteristic: CBCharacteristic, error: NSError?)\n  {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n\n    print(\"get data, characteristic UUID: \\(characteristic.uuid), value: \\(characteristic.value)\")\n    if let data = characteristic.value {\n      let inputText = String(data: data, encoding: .utf8)\n      self.textDocumentProxy.insertText(inputText!)\n    }\n  }\n\n  // MARK: - util\n\n  func showAlertByMessage(message: String) {\n    let alert: UIAlertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)\n    let okAction: UIAlertAction = UIAlertAction(title: \"\u306f\u3044\", style: .default) { action -> Void in\n    }\n    alert.addAction(okAction)\n    self.present(alert, animated: true, completion: nil)\n  }\n\n}\n\n\nKeyboard\u30bf\u30fc\u30b2\u30c3\u30c8\u306einfo.plist\u3067RequestsOpenAccess\u3092YES\u306b\u3057\u305f\u3089\u6e96\u5099\u5b8c\u4e86\u3067\u3059\u3002\n\nbleno\u3068\u3042\u308f\u305b\u3066\u8a66\u3059\nSwift\u88fd\u306e\u30a2\u30d7\u30ea\u3092XCode\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u306b\u5165\u308c\u307e\u3059\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u767b\u9332\u3068\u30d5\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u3061\u3083\u3093\u3068\u52d5\u304f\uff01\n\u9577\u6587\u3068\u304bURL\u3068\u304b\u306e\u5165\u529b\u304c\u306f\u304b\u3069\u308a\u305d\u3046\u3001\u3068\u601d\u3044\u304d\u3084\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u6539\u884c\u3067\u304d\u306a\u3044\u3057BS\u3082\u306a\u3044\u306e\u3067\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u6b21\u56de\u306b\u3067\u3082\u8abf\u6574\u3092\u52a0\u3048\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30aa\u30ea\u30a3\u7814\u7a76\u6240\uff08http://orylab.com/\uff09 \u306e \u690e\u8449\u3067\u3059\u3002\n\u6700\u8fd1bleno\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u904a\u3093\u3067\u307f\u307e\u3059\u3002\n\n# bleno\nMac\u3001Win\u3001Linux\u306e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067Bluetooth\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\uff08\u30c7\u30d0\u30a4\u30b9\u5074\uff09\u306e\u5b9f\u88c5\u304c\u884c\u3048\u308bNode.js\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nMac\u3067\u306fXCode\u304c\u3001Win\u3067\u306f\u5bfe\u5fdc\u3057\u305fBluetooth\u30a2\u30c0\u30d7\u30bf\u304c\u5fc5\u8981\u3068\u3001\u5b9f\u884c\u3067\u304d\u308b\u74b0\u5883\u304c\u9650\u3089\u308c\u308b\u306e\u3067\u901a\u5e38\u306eElectron\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3093\u304b\u3067\u306f\u3042\u307e\u308a\u5b9f\u7528\u7684\u3067\u306f\u306a\u3044\u3082\u306e\u306e\u3001\u7d44\u307f\u8fbc\u307f\u7528\u9014\u3067\u306f\u3061\u3083\u3093\u3068\u6a5f\u80fd\u3057\u307e\u3059\u3002\n\u624b\u5143\u3067\u52d5\u304b\u3059\u3060\u3051\u3067\u3082\u3001Bluetooth\u3067\u30c7\u30d0\u30a4\u30b9\u3092\u6a2a\u65ad\u3057\u3066\u3044\u308b\u3068\u306a\u3093\u304b\u697d\u3057\u3044\u3067\u3059\u3002\n\n\u4eca\u56de\u306f1Keyboard(http://www.eyalw.com/1keyboard) \u306e\u3088\u3046\u306b\u3001Mac\u5074\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u52d5\u4f5c\u3059\u308biOS\u306e\u30ab\u30b9\u30bf\u30e0\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# bleno\u5074\u6e96\u5099\n\u4ee5\u4e0b\u3001OS X\u3067\u306e\u307f\u5b9f\u884c\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\nNode.js\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7528\u610f\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u3067\n\n```bash\nnpm install bleno --save\n```\n\u3057\u307e\u3059\u3002\u3053\u308c\u3067bleno\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\u30d3\u30eb\u30c9\u3082\u6e08\u307f\u307e\u3059\u3002\n\n# bleno\u30af\u30e9\u30b9\nlib\u306bbleno.coffee\u3068\u304b\u3092\u4f5c\u3063\u3066bleno\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```coffeescript:lib/bleno.coffee\nbleno = null\nreadline = require 'readline'\n\nclass Bleno\n\n  readLine: null\n  stop: false\n\n  constructor: ()->\n    try\n      # bleno\u306frequire\u304c\u4f8b\u5916\u3092\u5410\u304f\n      bleno = require 'bleno'\n      @init()\n    catch error\n      bleno = null\n\n  init: ()->\n    name = 'BlenoKeyboard'\n    serviceUuids = [ 'fff0' ]\n\n    # Service\u306e\u5b9a\u7fa9\n    primaryService = new bleno.PrimaryService\n      uuid: 'fff0'\n      characteristics: [\n        \n        # Characteristic\u306e\u5b9a\u7fa9\n        new bleno.Characteristic\n          uuid: 'fff1'\n          properties: [\n            'notify'\n          ]\n          \n          # Notify\u306b\u767b\u9332\u3055\u308c\u305f\u6642\n          onSubscribe: (maxValueSize, updateValueCallback)=>\n            @stop = false\n            @startInput updateValueCallback\n\n          # Notify\u304c\u89e3\u9664\u3055\u308c\u305f\u6642\n          onUnsubscribe: ()=>\n            @stopInput()\n      ]\n\n    # bluetooth\u30c7\u30d0\u30a4\u30b9\u306e\u72b6\u614b\u5909\u5316\u30a4\u30d9\u30f3\u30c8\n    bleno.on 'stateChange', (state) ->\n      console.log 'stateChange: ' + state\n      if state == 'poweredOn'\n        bleno.startAdvertising name, serviceUuids, (error) ->\n          if error\n            console.error error\n          return\n      else\n        # start\u3059\u308b\n        bleno.stopAdvertising()\n      return\n\n    # advertising start\u30a4\u30d9\u30f3\u30c8\n    bleno.on 'advertisingStart', (error) ->\n      if !error\n        console.log 'start advertising...'\n        # Service\u8a2d\u7f6e\n        bleno.setServices [ primaryService ]\n      else\n        console.error error\n      return\n\n  # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u9001\u4fe1\u3059\u308b\n  startInput: (valueCallback)->\n    @readLine = readline.createInterface\n      input: process.stdin\n      output: process.stdout\n\n    @readLine.question \">\", (answer)=>\n      if answer isnt \"\"\n        data = Buffer.from answer, 'utf8'\n        # iOS\u30c7\u30d0\u30a4\u30b9\u3078\u9001\u4fe1\uff01\n        valueCallback data\n      @readLine.close()\n      if @stop then return\n      @startInput valueCallback\n\n  # \u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u9001\u4fe1\u3059\u308b\n  stopInput: ()->\n    @stop = true\n    if @readLine\n      @readLine.close()\n```\n\n\u3053\u308c\u3092index.js\u304b\u3089\u5b9f\u884c\u3059\u308c\u3070Node.js\u5074\u306e\u5b9f\u88c5\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n```js:index.js\n// \u7121\u3044\u306a\u3089 npm install coffee-script --save\nrequire('coffee-script/register');\n\nBleno = require('./lib/bleno');\nnew Bleno();\n```\n\n# \u8a66\u3059\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bash\nnode index.js\n```\n\niOS\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\nLightBlue Explorer\uff08 https://itunes.apple.com/us/app/lightblue-explorer-bluetooth/id557428110?mt=8 \uff09\u3092iOS\u30c7\u30d0\u30a4\u30b9\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001Mac\u3084\u5b9f\u884c\u30c7\u30d0\u30a4\u30b9\u3092\u63a2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u898b\u3064\u304b\u3063\u305f\u3089\u63a5\u7d9a\u3057\u3066notifications\u3092\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\u3057\u307e\u3059\u3002Node.js\u5074\u3067\u306e\u5165\u529b\u304c\u6bce\u56de\u9001\u4fe1\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u3053\u304c\u52d5\u3051\u3070\u3082\u3046\u4e00\u606f\u3002\n\n# iOS\u5074\u3092Swift\u3067\u5b9f\u88c5\u3059\u308b\nXCode\u3068Swift 3\u306b\u79fb\u52d5\u3057\u3066\u3001iOS\u30a2\u30d7\u30ea\u5074\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u30ab\u30b9\u30bf\u30e0\u30ad\u30fc\u30dc\u30fc\u30c9\u306b\u3001CoreBluetooth\u3092\u7d44\u307f\u8fbc\u3093\u3067Node.js\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u3068\u9023\u643a\u3057\u307e\u3059\u3002\ndeviceName\u306bLightBlue\u3067\u898b\u3064\u304b\u3063\u305f\u30c7\u30d0\u30a4\u30b9\u540d\u3092\u5165\u308c\u307e\u3059\u3002\u81ea\u5206\u306eMac\u306e\u540d\u524d\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n```swift:KeyboardViewController.swift\nimport UIKit\nimport CoreBluetooth\n\nclass KeyboardViewController: UIInputViewController, CBCentralManagerDelegate, CBPeripheralDelegate {\n  \n  @IBOutlet var nextKeyboardButton: UIButton!\n  \n  let deviceName = \"Enter your Mac name\"\n  var centralManager: CBCentralManager!\n  var peripheral: CBPeripheral!\n  var characteristics = [CBCharacteristic]()\n  \n  override func updateViewConstraints() {\n    super.updateViewConstraints()\n    \n    // Add custom view sizing constraints here\n  }\n  \n  override func viewDidLoad() {\n    super.viewDidLoad()\n    self.centralManager = CBCentralManager(delegate: self, queue: nil)\n    \n    // Perform custom UI setup here\n    self.nextKeyboardButton = UIButton(type: .system)\n    \n    self.nextKeyboardButton.setTitle(NSLocalizedString(\"Next Keyboard\", comment: \"Title for 'Next Keyboard' button\"), for: [])\n    self.nextKeyboardButton.sizeToFit()\n    self.nextKeyboardButton.translatesAutoresizingMaskIntoConstraints = false\n    \n    self.nextKeyboardButton.addTarget(self, action: #selector(handleInputModeList(from:with:)), for: .allTouchEvents)\n    \n    self.view.addSubview(self.nextKeyboardButton)\n    \n    self.nextKeyboardButton.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true\n    self.nextKeyboardButton.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true\n  }\n  \n  override func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n    if self.centralManager.state == CBManagerState.poweredOn {\n      self.centralManager.scanForPeripherals(withServices: nil, options: nil)\n    }\n  }\n  override func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    if let centralManager = self.centralManager {\n      if centralManager.state == CBManagerState.poweredOn {\n        if let peripheral = self.peripheral {\n          if peripheral.state == CBPeripheralState.connected {\n            centralManager.cancelPeripheralConnection(peripheral)\n          }\n        }\n      }\n    }\n  }\n  \n  override func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated\n  }\n  \n  override func textWillChange(_ textInput: UITextInput?) {\n    // The app is about to change the document's contents. Perform any preparation here.\n  }\n  \n  override func textDidChange(_ textInput: UITextInput?) {\n    // The app has just changed the document's contents, the document context has been updated.\n  }\n\n  // MARK: - bluetooth\n  \n  func centralManagerDidUpdateState(_ central: CBCentralManager) {\n    print(\"ble state: \\(central.state)\")\n    if central.state == CBManagerState.poweredOn {\n      print(\"ble state is on\")\n      self.centralManager.scanForPeripherals(withServices: nil, options: nil)\n    }\n  }\n  \n  func centralManager(_ central: CBCentralManager,\n                      didDiscoverPeripheral peripheral: CBPeripheral,\n                      advertisementData: [String : AnyObject],\n                      RSSI: NSNumber) {\n    print(\"ble peripheral: \\(peripheral)\")\n    if peripheral.name == self.deviceName {\n      if self.centralManager.state == CBManagerState.poweredOn {\n        self.centralManager.stopScan()\n      }\n      \n      self.peripheral = peripheral\n      self.centralManager.connect(peripheral, options: nil)\n      print(\"connecting peripheral...\")\n    }\n  }\n  \n  func centralManager(_ central: CBCentralManager,\n                      didConnect peripheral: CBPeripheral)\n  {\n    print(\"connected peripheral\")\n    self.peripheral.delegate = self\n    self.peripheral.discoverServices(nil)\n  }\n  \n  func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: NSError?) {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n    \n    if let services = peripheral.services {\n      if services.count > 0 {\n        for service in services {\n          if service.uuid.uuidString == \"FFF0\" {\n            self.peripheral.discoverCharacteristics(nil, for: service)\n          }\n        }\n      }\n    }\n  }\n  func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsForService service: CBService, error: NSError?) {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n    \n    if let characteristics = service.characteristics {\n      print(\"Found \\(characteristics.count) characteristics! : \\(characteristics)\")\n      self.characteristics = characteristics\n      self.startNotice()\n    }\n  }\n  \n  func startNotice() {\n    for characteristic in self.characteristics {\n      if characteristic.uuid.uuidString == \"FFF1\" {\n        print(\"start notice\")\n        self.peripheral.setNotifyValue(true, for: characteristic)\n      }\n    }\n  }\n  func stopNotice() {\n    for characteristic in self.characteristics {\n      if characteristic.uuid.uuidString == \"FFF1\" {\n        print(\"stop notice\")\n        self.peripheral.setNotifyValue(false, for: characteristic)\n      }\n    }\n  }\n  func peripheral(_ peripheral: CBPeripheral, didUpdateValueForCharacteristic characteristic: CBCharacteristic, error: NSError?)\n  {\n    if let error = error {\n      print(\"error: \\(error)\")\n      return\n    }\n    \n    print(\"get data, characteristic UUID: \\(characteristic.uuid), value: \\(characteristic.value)\")\n    if let data = characteristic.value {\n      let inputText = String(data: data, encoding: .utf8)\n      self.textDocumentProxy.insertText(inputText!)\n    }\n  }\n  \n  // MARK: - util\n  \n  func showAlertByMessage(message: String) {\n    let alert: UIAlertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)\n    let okAction: UIAlertAction = UIAlertAction(title: \"\u306f\u3044\", style: .default) { action -> Void in\n    }\n    alert.addAction(okAction)\n    self.present(alert, animated: true, completion: nil)\n  }\n\n}\n```\n\nKeyboard\u30bf\u30fc\u30b2\u30c3\u30c8\u306einfo.plist\u3067RequestsOpenAccess\u3092YES\u306b\u3057\u305f\u3089\u6e96\u5099\u5b8c\u4e86\u3067\u3059\u3002\n\n# bleno\u3068\u3042\u308f\u305b\u3066\u8a66\u3059\nSwift\u88fd\u306e\u30a2\u30d7\u30ea\u3092XCode\u304b\u3089\u30c7\u30d0\u30a4\u30b9\u306b\u5165\u308c\u307e\u3059\u3002\n\u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u767b\u9332\u3068\u30d5\u30eb\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\n![IMG_0024.JPG](https://qiita-image-store.s3.amazonaws.com/0/9162/5f94dde0-6c89-2172-72ed-2b1919abfd94.jpeg)\n\n\u3061\u3083\u3093\u3068\u52d5\u304f\uff01\n\u9577\u6587\u3068\u304bURL\u3068\u304b\u306e\u5165\u529b\u304c\u306f\u304b\u3069\u308a\u305d\u3046\u3001\u3068\u601d\u3044\u304d\u3084\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u6539\u884c\u3067\u304d\u306a\u3044\u3057BS\u3082\u306a\u3044\u306e\u3067\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u6b21\u56de\u306b\u3067\u3082\u8abf\u6574\u3092\u52a0\u3048\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["nodejs", "CoreBluetooth", "iOS", "iPhone", "Swift"]}