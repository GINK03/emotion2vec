{"context": " More than 1 year has passed since last update.R\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3057\u3070\u3057\u3070\u3042\u308b\u3002\u305d\u306e\u5ea6\u306b\u3084\u308a\u65b9\u3092\u5fd8\u308c\u3066\u3044\u3066\u3001\u8abf\u3079\u76f4\u3059\u3053\u3068\u304c\u591a\u3044\u3002Google\u5148\u751f\u306b\u5c0b\u306d\u308b\u3068\u3001\u5f53\u7136\u306e\u3054\u3068\u304f\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u6642\u9593\u304c\u7d4c\u3064\u3068\u3001\u3088\u308a\u8a55\u4fa1\u3055\u308c\u30fb\u3088\u308a\u826f\u3044\u5185\u5bb9\u306e\u8a18\u4e8b\u304c\u691c\u7d22\u306e\u30c8\u30c3\u30d7\u306b\u4e26\u3076\u304b\u3089\u3060\u3002\u306a\u306e\u3067\u6bce\u56de\u65b9\u6cd5\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u3002\u81ea\u5206\u306a\u308a\u306e\u624b\u6cd5\u3092\u78ba\u7acb\u3057\u3066\u304a\u304d\u305f\u3044\u3002\n\nR\u3092\u7528\u3044\u305f\u5730\u7406\u60c5\u5831\u30c7\u30fc\u30bf\u3068\u30c7\u30fc\u30bf\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u6d41\u308c\n\u307e\u305a\u306f\u5148\u884c\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u308b\u65e2\u5b58\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u306b\u3001R\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u624b\u9806\u3092\u6574\u7406\u3057\u3066\u307f\u308b\u3002\u5927\u307e\u304b\u306a\u6d41\u308c\u3068\u3057\u3066\u3001\n\n \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\uff08Shapefile\uff09\u3092\u8aad\u307f\u8fbc\u3080\n \u63cf\u753b\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u304f\n \u76ee\u7684\u306b\u5fdc\u3058\u3066\u30c7\u30fc\u30bf\u3092\u5730\u56f3\u306b\u8ffd\u52a0\u3059\u308b\uff08\u30de\u30c3\u30d4\u30f3\u30b0\uff09\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u9806\u3092\u8ffd\u3063\u3066\u624b\u3092\u52d5\u304b\u3057\u3066\u307f\u3088\u3046\u3002\u306a\u304a\u500b\u4eba\u7684\u306b\u3001\u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u969b\u306b\u306f\u3053\u3046\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u9858\u671b\u304c\u3042\u308b\u306e\u3067\u3001\n\n\nShapefile\u306f\u4f7f\u3044\u305f\u304f\u306a\u3044\u3002GeoJSON\u304bTopoJSON\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u305f\u3044\n\n  Shapefile\u306e\u4ed5\u69d8\u304c\u8b0e\u3002\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3057\u3066\u8907\u96d1\n  JSON\u30d9\u30fc\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u8efd\u91cf\u304b\u3064\u8aad\u307f\u3084\u3059\u3044\n\n\n\u30d7\u30ed\u30c3\u30c8\u306b\u306f{ggplot2}\u3092\u4f7f\u7528\u3057\u305f\u3044\n\u8907\u96d1\u3067\u306f\u306a\u304f\u3001\u9650\u308a\u306a\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30fc\u30c9\u306b\u3057\u305f\u3044\n\n\u3053\u308c\u3089\u3092\u3067\u304d\u308b\u3060\u3051\u9054\u6210\u3067\u304d\u308b\u3088\u3046\u9811\u5f35\u308b\u3002\n\n\u5730\u56f3\u63cf\u753b\u306e\u305f\u3081\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3042\u308c\u3053\u308c\n\u9069\u5b9c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nlibrary(magrittr)\nlibrary(sp)\nlibrary(ggplot2)\nlibrary(rgdal)\nlibrary(broom)\nlibrary(ggmap)\nlibrary(viridis)\n\n\n1 \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001R\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\u5e7e\u3064\u304b\u306e\u65b9\u6cd5\u304c\u3042\u308b\u304c\u3001\u3053\u3053\u3067\u306f{rgdal}\u306ereadOGR\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002readOGR\u3067\u306f\u3001\u30d9\u30af\u30bf\u30fc\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002readOGR\u306e\u5f15\u6570\u3092\u307f\u308b\u3068\u3001\nargs(readOGR) %>% as.list() %>%  names()\n\n##  [1] \"dsn\"                       \"layer\"                    \n##  [3] \"verbose\"                   \"p4s\"                      \n##  [5] \"stringsAsFactors\"          \"drop_unsupported_fields\"  \n##  [7] \"input_field_name_encoding\" \"pointDropZ\"               \n##  [9] \"dropNULLGeometries\"        \"useC\"                     \n## [11] \"disambiguateFIDs\"          \"addCommentsToPolygons\"    \n## [13] \"encoding\"                  \"use_iconv\"                \n## [15] \"swapAxisOrder\"             \"require_geomType\"         \n## [17] \"integer64\"                 \"\"\n\n\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u306e\u3046\u3061\u91cd\u8981\u306b\u306a\u3063\u3066\u304f\u308b\u306e\u306f\u3001\u63cf\u753b\u3059\u308b\u30bd\u30fc\u30b9\u3092\u5b9a\u7fa9\u3059\u308bdsn\u3068layer\u3067\u3042\u308b\u3002\u6700\u4f4e\u9650\u3001\u3053\u308c\u3060\u3051\u3092\u6307\u5b9a\u3059\u308c\u3070\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308c\u308b\u3002\u4eca\u56de\u306f{rgdal}\u306b\u5185\u81d3\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30c7\u30e2\u7528\u306eShapefile\u304c\u3042\u308b\u3002\npath <- vector()\nsystem.file(\"vectors\", package = \"rgdal\") %>% {\n  path <<- .\n  print(.)\n}\n\n## [1] \"/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rgdal/vectors\"\n\n\u6b21\u306e\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\uff08\u4e00\u90e8\u306e\u307f\u51fa\u529b\uff09\u3002\nlist.files(path) %>% grep(pattern = \"^trin_inca_pl03\", x = ., value = TRUE)\n\n## [1] \"trin_inca_pl03.dbf\" \"trin_inca_pl03.shp\" \"trin_inca_pl03.shx\"\n\ntrin_inca_pl03.shp\u306b\u4ed8\u5c5e\u3057\u3066\u3001\u5e7e\u3064\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002Shapefile\u3092\u51fa\u529b\u3055\u305b\u308b\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u5fc5\u8981\u306b\u306a\u308b\u3002\u3067\u306f\u3001\u3053\u306etrin_inca_pl03\u30d5\u30a1\u30a4\u30eb\u3092R\u306b\u53d6\u308a\u8fbc\u3093\u3067\u307f\u308b\u3002\nmap <- data.frame()\nreadOGR(dsn = path, layer = \"trin_inca_pl03\") %>% {\n  map <<- .\n  print(class(.))\n  str(., max.level = 2)\n}\n\n## OGR data source with driver: ESRI Shapefile \n## Source: \"/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rgdal/vectors\", layer: \"trin_inca_pl03\"\n## with 3 features\n## It has 12 fields\n## [1] \"SpatialPolygonsDataFrame\"\n## attr(,\"package\")\n## [1] \"sp\"\n## Formal class 'SpatialPolygonsDataFrame' [package \"sp\"] with 5 slots\n##   ..@ data       :'data.frame':  2 obs. of  12 variables:\n##   ..@ polygons   :List of 2\n##   ..@ plotOrder  : int [1:2] 1 2\n##   ..@ bbox       : num [1:2, 1:2] -87.1 5.5 -79 10.1\n##   .. ..- attr(*, \"dimnames\")=List of 2\n##   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\nreadOGR\u3067\u8aad\u307f\u8fbc\u3093\u3060\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f{sp}\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u5b9a\u7fa9\u3055\u308c\u308bSpatialPointsDataFrame\u3068\u3044\u3046\u3082\u306e\u306b\u306a\u308b\u3002S4\u30e1\u30bd\u30c3\u30c9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f@\u30b9\u30ed\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u3002str\u3067\u793a\u3057\u305f\u3088\u3046\u306b\u3001SpatialPointsDataFrame\u306f\uff15\u3064\u306e\u30b9\u30ed\u30c3\u30c8\u3092\u6301\u3064\u3002@data\u306f\u5c5e\u6027\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3042\u308a\u3001@coords\u306f\u4f4d\u7f6e\u5ea7\u6a19\u306e\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\ndplyr::tbl_df(map@data)\n\n## Source: local data frame [2 x 12]\n## \n##           ENGL_NAME      SCI_NAME      AUTHORITY       FAMILY PRESENCE\n##              (fctr)        (fctr)         (fctr)       (fctr)    (int)\n## 1 Wandering Tattler Tringa incana (Gmelin, 1789) Scolopacidae        1\n## 2 Wandering Tattler Tringa incana (Gmelin, 1789) Scolopacidae        1\n## Variables not shown: ORIGIN (int), COMPILER (fctr), SCALE (fctr), TAX_COM\n##   (fctr), DIST_COM (fctr), REFERENCES (fctr), REVIEWERS (fctr)\n\n\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u5834\u5408\u3001\u5143\u306b\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u304c\u3001\u591a\u304f\u306e\u5834\u5408Shapefile\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u3001readOGR\u3067\u306fShapefile\u4ee5\u5916\u306eJSON(GeoJSON, TopoJSON)\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\u3044\u305a\u308c\u306e\u65b9\u6cd5\u3082Shapefile\u306e\u6642\u3068\u540c\u3058\u3067\u3042\u308b\u3002\n# topojson\nmap <- data.frame()\n# \u56fd\u571f\u4ea4\u901a\u7701 \u56fd\u571f\u5730\u7406\u9662 \uff12\uff10\u4e07\u5206\uff11\u5730\u52e2\u56f3\u56f3\u3092\u5143\u306b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\nfile.path <- \"https://gist.github.com/uribo/b09d642351c03dd975aa/raw/6cd2f7e70922b24f89b442c96c001dc3ab794317/japan_one_twenty_map.topojson\"\nreadOGR(dsn              = file.path, \n        layer            = \"OGRGeoJSON\", \n        stringsAsFactors = FALSE) %>% {\n          map <<- .\n          print(class(.))\n          str(., max.level = 2)\n}\n\n## OGR data source with driver: GeoJSON \n## Source: \"https://gist.github.com/uribo/b09d642351c03dd975aa/raw/6cd2f7e70922b24f89b442c96c001dc3ab794317/japan_one_twenty_map.topojson\", layer: \"OGRGeoJSON\"\n## with 130 features\n## It has 2 fields\n## [1] \"SpatialPolygonsDataFrame\"\n## attr(,\"package\")\n## [1] \"sp\"\n## Formal class 'SpatialPolygonsDataFrame' [package \"sp\"] with 5 slots\n##   ..@ data       :'data.frame':  130 obs. of  2 variables:\n##   ..@ polygons   :List of 130\n##   .. .. [list output truncated]\n##   ..@ plotOrder  : int [1:130] 75 78 59 41 79 93 8 11 61 31 ...\n##   ..@ bbox       : num [1:2, 1:2] 123 24 149 46\n##   .. ..- attr(*, \"dimnames\")=List of 2\n##   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\nGeoJSON\u3042\u308b\u3044\u306fTopoJSON\u306e\u5834\u5408\u3001readOGR\u306elayer\u5f15\u6570\u306b\u6e21\u3059\u5024\u304cOGRGeoJSON\u3068\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\nogrListLayers(dsn = file.path)[1]\n\n## [1] \"OGRGeoJSON\"\n\n\u3067\u51fa\u529b\u3055\u308c\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u51fa\u529b\u3057\u305f\u3044layers\u540d\u304c\u4e0d\u660e\u306a\u5834\u5408\u3001\u3053\u3061\u3089\u3067\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3060\u308d\u3046\u3002\n\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u304cGeoJSON\u3042\u308b\u3044\u306fTopoJSON\u5f62\u5f0f\u3067\u3042\u308b\u5834\u5408\u3001{rgdal}\u306e\u4ee3\u308f\u308a\u306b{geojsonio}\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3042\u308b\u3002\ngeojsonio::topojson_read(file.path) %>% {\n  print(class(.))\n  str(., max.level = 2)\n}\n\n\n2 \u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\nreadOGR\u306b\u3088\u308a\u3001SpatialPolygonsDataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3089\u3001\u3072\u3068\u307e\u305a\u5730\u56f3\u304c\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002plot(map)\u306e\u3088\u3046\u306b\u3001plot\u95a2\u6570\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u5730\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b\u3002ggplot\u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\u304c\u3001\u3053\u308c\u306f\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u63cf\u753b\u3057\u3066\u3044\u308b\u305f\u3081\u89e3\u50cf\u5ea6\u304c\u8352\u3044\u3002\n## # ggplot2::ggplot \u306b\u3088\u308b\u63cf\u753b: \u3088\u304f\u306a\u3044\u4f8b\u3002\u8352\u3044\u3002data.frame, SpatialPolygonsDataFrame\u3069\u3061\u3089\u3067\u3082\u304ak\nggplot() +  geom_polygon(data = map, \n                          aes(x = long, y = lat, group = id))\n\n\n{ggplot2}\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3055\u305b\u308b\u5834\u5408\u306f\u3001SpatialPolygonsDataFrame\u3092data.frame\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u969b\u3001{broom} \u306etidy\u3092\u5229\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3042\u308b\uff08\u3053\u308c\u307e\u3067\u306fggplot2::fortify\u304c\u4f7f\u308f\u308c\u3066\u304d\u305f\u304c\u3001fortify \u306f\u5c06\u6765\u5ec3\u6b62\u4e88\u5b9a\u3068\u306e\u3053\u3068\u3067\u3042\u308a\u3001 \u4ee3\u308f\u308a\u306b{broom}\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3053\u3068\u3092Hadley\u306f\u63a8\u5968\u3057\u3066\u3044\u308b\uff09\u3002\nbroom::tidy(map) %>% {\n  map <<- .\n  print(class(.))\n  dplyr::glimpse(.)\n}\n\n## [1] \"data.frame\"\n## Observations: 650\n## Variables: 7\n## $ long  (dbl) 148, 149, 149, 148, 148, 148, 149, 149, 148, 148, 147, 1...\n## $ lat   (dbl) 46.00000, 46.00000, 45.33333, 45.33333, 46.00000, 45.333...\n## $ order (int) 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,...\n## $ hole  (lgl) FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, ...\n## $ piece (fctr) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...\n## $ group (fctr) 1.1, 1.1, 1.1, 1.1, 1.1, 2.1, 2.1, 2.1, 2.1, 2.1, 3.1, ...\n## $ id    (chr) \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"2\", \"2\", \"3\", \"...\n\ntidy\u51e6\u7406\u3092\u65bd\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5171\u901a\u306e\u5217\u540d\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u306a\u308b\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u3044\u3066ggplot\u306e\u4e0a\u306b\u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u304f\u3002\nggplot() + \n  geom_map(data = map, \n           map = map,\n           aes(x = long, y = lat, map_id = id), \n           fill = \"white\", color = \"black\")\n\nggplot\u306edata\u5f15\u6570\u53ca\u3073geom_map\u306emap\u306b\u4e0e\u3048\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306ftidy\u51e6\u7406\u3092\u65bd\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\u5be9\u7f8e\u7684\u5c5e\u6027\u306b\u4e0e\u3048\u308b\u8981\u7d20\u3082\u5171\u901a\u3067\u3042\u308b\u3002\u3053\u308c\u304c\u57fa\u672c\u578b\u3068\u306a\u308b\u304c\u3001\u3053\u308c\u3060\u3068\u5730\u56f3\u304c\u5857\u308a\u3064\u3076\u3057\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u30d7\u30ed\u30c3\u30c8\u304c\u6b63\u65b9\u5f62\u306b\u306a\u3063\u3066\u3044\u305f\u308a\u3068\u3001\u5730\u56f3\u3068\u3057\u3066\u683c\u597d\u304c\u60aa\u3044\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5e7e\u3064\u304b\u306e\u5c5e\u6027\u3092\u4ed8\u52a0\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3002\nggplot() +\n  geom_map(data = map, \n           map = map,\n           aes(x = long, y = lat, map_id = id),\n           color = \"black\", fill = \"white\", # \u5883\u754c\u7dda\u3092\u9ed2\u304f\u3001\u9818\u57df\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059\n           size = 0.5) +\u3000\n  coord_map(projection = \"mercator\") -> plot_map # \u6295\u5f71\u6cd5\u3092\u6307\u5b9a\uff08\u30e1\u30eb\u30ab\u30c8\u30eb\u56f3\u6cd5\uff09\n# ggthemes::theme_map() \u3082\u5730\u56f3\u63cf\u753b\u7528\u306eggplot\u30c6\u30fc\u30de\u306a\u306e\u3067\u3001\u6307\u5b9a\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n# \u80cc\u666f\u304c\u767d\u304f\u306a\u308a\u3001\u8ef8\u306a\u3069\u304c\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308b\n\nplot_map\n\n\nplot_map\u3068\u3057\u3066\u3001\u518d\u5e30\u7684\u306b\u5730\u56f3\u3092\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u3053\u3053\u304b\u3089\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u91cd\u306d\u305f\u308a\u3057\u3066\u3044\u304f\u3002\n\n3 \u30de\u30c3\u30d4\u30f3\u30b0\n\u3044\u3088\u3044\u3088\u672c\u756a\u3002\u81ea\u5206\u306e\u30c7\u30fc\u30bf\u3092\u5730\u56f3\u4e0a\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3002\u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3001\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u9032\u3081\u3066\u3044\u304f\u3002\u5730\u56f3\u4e0a\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u306d\u3066\u3044\u304f\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u624b\u6cd5\u3068\u3057\u3066\u3001\u30e9\u30d9\u30eb\u306e\u51fa\u529b\u3001\u30dd\u30a4\u30f3\u30c8\u306e\u8868\u793a\u3001\u5024\u3084\u6c34\u6e96\u306b\u3088\u308b\u5857\u308a\u5206\u3051\u304c\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u65e5\u672c\u306e\u5730\u56f3\u3092\u4f8b\u3092\u5143\u306b\u3057\u3066\u8aac\u660e\u3059\u308b\u3002\n\n\u30c7\u30fc\u30bf\u306e\u7528\u610f\n\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001\u3069\u306e\u5ea7\u6a19\uff08\u7def\u5ea6\u3068\u7d4c\u5ea6\uff09\u306b\u3069\u306e\u3088\u3046\u306a\u5024\uff08\u6587\u5b57\u3084\u7a2e\u985e\uff09\u3092\u51fa\u529b\u3059\u308b\u304b\u3001\u5857\u308a\u5206\u3051\u306e\u57fa\u6e96\u3068\u306a\u308b\u5024\u3084\u6c34\u6e96\u3068\u3044\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\ndf_jp <- data.frame(address          = c(\"Tokyo, Japan\", \n                                         \"Okayama, Japan\", \n                                         \"Sapporo, Japan\",\n                                         \"Okinawa, Japan\"),\n                    id               = c(56, 90, 26, 125),\n                    population       = c(8945695, 709584, 1913545, 315954),\n                    # https://ja.wikipedia.org/wiki/\u90fd\u9053\u5e9c\u770c\u5e81\u6240\u5728\u5730\u3068\u653f\u4ee4\u6307\u5b9a\u90fd\u5e02\u306e\u4eba\u53e3\u9806\u4f4d \u304b\u3089\u4eba\u53e3\u3092\u5165\u529b\n                    stringsAsFactors = FALSE) %>% \n  mutate_geocode(address) %>% # address\u3092\u5143\u306b\u3001\u7def\u5ea6\u7d4c\u5ea6\u3092\u6c42\u3081\u308b\n  dplyr::mutate(address = gsub(pattern = \"[[:punct:]] Japan$\", replacement = \"\", address))\n\ndplyr::tbl_df(df_jp)\n\n## Source: local data frame [4 x 5]\n## \n##   address    id population      lon      lat\n##     (chr) (dbl)      (dbl)    (dbl)    (dbl)\n## 1   Tokyo    56    8945695 139.6917 35.68950\n## 2 Okayama    90     709584 133.9350 34.66167\n## 3 Sapporo    26    1913545 141.3469 43.06417\n## 4 Okinawa   125     315954 127.8014 26.33583\n\n\n\u30e9\u30d9\u30eb\u53ca\u3073\u30dd\u30a4\u30f3\u30c8\u306e\u8868\u793a\n\u7def\u5ea6\u30fb\u7d4c\u5ea6\u3001\u51fa\u529b\u3059\u308b\u6587\u5b57\u5217\u306f\u305d\u308c\u305e\u308c\u3001df_jp$lat, df_jp$lon, df_jp(address\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u30dd\u30a4\u30f3\u30c8\u306e\u5927\u304d\u3055\u3092\u4eba\u53e3df_jp)population`\u3092\u5143\u306b\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u308b\u3002\nplot_map + \n  # \u30dd\u30a4\u30f3\u30c8\u306e\u51fa\u529b\n  geom_point(data = df_jp, \n             aes(x = lon, y = lat),\n             fill = \"skyblue\",\n             shape = 21, alpha = 0.8, size = 2 * log(df_jp$population) / 10) + \n  geom_text(data = df_jp, \n            aes(label = address, x = lon + 0.2, y = lat + -0.4), \n            size = 3, \n            color = \"tomato\",\n            angle = 20)\n\n\n\n\u5857\u308a\u5206\u3051\u5730\u56f3\uff08\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\uff09\n\u5857\u308a\u5206\u3051\u306f\u5c11\u3057\u8907\u96d1\u306b\u306a\u308b\u3002\u30d9\u30fc\u30b9\u3068\u3057\u3066\u3044\u308b\u5730\u56f3\u3067\u306e\u5857\u308a\u5206\u3051\u306e\u57fa\u6e96\u3068\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u306e\u57fa\u6e96\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u306a\u3044\u3068\u3001\u5857\u308a\u5206\u3051\u3055\u308c\u308b\u7b87\u6240\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u3002\nplot_map + \n  geom_map(data = df_jp, \n           map = map,\n           aes(fill = population, map_id = id, stat = \"identity\")) +\n  scale_fill_viridis()\n\n\n\u3053\u3046\u3057\u305f\u5857\u308a\u5206\u3051\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u5c02\u9580\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u3042\u308b\u3002\nhttps://github.com/trulia/choroplethr\n\n\u304a\u307e\u3051: \u62e1\u5927\u30fb\u7e2e\u5c0f\u3067\u304d\u308b\u5730\u56f3\n\u5b9f\u969b\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\nRPubs - Choropleth Map of Japan with svgPanZoom, viridis and lineworkmaps packges.\nlibrary(svgPanZoom)\nlibrary(SVGAnnotation)\n\nsvgPanZoom((plot_map), \n           controlIconsEnabled = TRUE)\n\n\u6b21\u56de\u306f\u5fdc\u7528\u7de8\u3068\u3055\u307e\u3056\u307e\u306a\u5730\u56f3\u63cf\u753b\u624b\u6cd5\u306e\u7d39\u4ecb\u3067\u3059\n\n\u53c2\u8003\n\n R\u306e\u57fa\u672c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u6a5f\u80fd\u307e\u305f\u306fggplot2\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u304f\u306b\u306f - verum ipsum factum\n\n [R] R\u3067\u5b66\u3076\u90fd\u77e5\u4e8b\u9078\u306e\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u3010\u5730\u7406\u30c7\u30fc\u30bf\u7de8\u3011 - ill-identified diary\n\n choroplethr\u3067\u5927\u962a\u5e02\u306e\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u3092\u63cf\u304f - Technically, technophobic.\n\n plotting polygon shapefiles \u00b7 hadley/ggplot2 Wiki\n\n Overcoming D3 Cartographic Envy With R + ggplot | rud.is\n\n Charting/Mapping the Scottish Vote with R (an rvest/dplyr/tidyr/TopoJSON/ggplot tutorial) | rud.is\n\n Mapping in R using the ggplot2 package | Technical Tidbits From Spatial Analysis & Data Science\n\n Mapping\n\n RPubs - TopoJSON map of Japan\n\n\nR\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3057\u3070\u3057\u3070\u3042\u308b\u3002\u305d\u306e\u5ea6\u306b\u3084\u308a\u65b9\u3092\u5fd8\u308c\u3066\u3044\u3066\u3001\u8abf\u3079\u76f4\u3059\u3053\u3068\u304c\u591a\u3044\u3002Google\u5148\u751f\u306b\u5c0b\u306d\u308b\u3068\u3001\u5f53\u7136\u306e\u3054\u3068\u304f\u7d50\u679c\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u6642\u9593\u304c\u7d4c\u3064\u3068\u3001\u3088\u308a\u8a55\u4fa1\u3055\u308c\u30fb\u3088\u308a\u826f\u3044\u5185\u5bb9\u306e\u8a18\u4e8b\u304c\u691c\u7d22\u306e\u30c8\u30c3\u30d7\u306b\u4e26\u3076\u304b\u3089\u3060\u3002\u306a\u306e\u3067\u6bce\u56de\u65b9\u6cd5\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u3002\u81ea\u5206\u306a\u308a\u306e\u624b\u6cd5\u3092\u78ba\u7acb\u3057\u3066\u304a\u304d\u305f\u3044\u3002\n\nR\u3092\u7528\u3044\u305f\u5730\u7406\u60c5\u5831\u30c7\u30fc\u30bf\u3068\u30c7\u30fc\u30bf\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u6d41\u308c\n-----------------------------------------------\n\n\u307e\u305a\u306f\u5148\u884c\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u308b\u65e2\u5b58\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306a\u3069\u3092\u53c2\u7167\u306b\u3001R\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u624b\u9806\u3092\u6574\u7406\u3057\u3066\u307f\u308b\u3002\u5927\u307e\u304b\u306a\u6d41\u308c\u3068\u3057\u3066\u3001\n\n1.  \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\uff08Shapefile\uff09\u3092\u8aad\u307f\u8fbc\u3080\n2.  \u63cf\u753b\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u304f\n3.  \u76ee\u7684\u306b\u5fdc\u3058\u3066\u30c7\u30fc\u30bf\u3092\u5730\u56f3\u306b\u8ffd\u52a0\u3059\u308b\uff08\u30de\u30c3\u30d4\u30f3\u30b0\uff09\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u9806\u3092\u8ffd\u3063\u3066\u624b\u3092\u52d5\u304b\u3057\u3066\u307f\u3088\u3046\u3002\u306a\u304a\u500b\u4eba\u7684\u306b\u3001\u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u969b\u306b\u306f\u3053\u3046\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u9858\u671b\u304c\u3042\u308b\u306e\u3067\u3001\n\n1.  Shapefile\u306f\u4f7f\u3044\u305f\u304f\u306a\u3044\u3002GeoJSON\u304bTopoJSON\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u305f\u3044\n    -   Shapefile\u306e\u4ed5\u69d8\u304c\u8b0e\u3002\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3057\u3066\u8907\u96d1\n    -   JSON\u30d9\u30fc\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u8efd\u91cf\u304b\u3064\u8aad\u307f\u3084\u3059\u3044\n\n2.  \u30d7\u30ed\u30c3\u30c8\u306b\u306f**`{ggplot2}`**\u3092\u4f7f\u7528\u3057\u305f\u3044\n3.  \u8907\u96d1\u3067\u306f\u306a\u304f\u3001\u9650\u308a\u306a\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30fc\u30c9\u306b\u3057\u305f\u3044\n\n\u3053\u308c\u3089\u3092\u3067\u304d\u308b\u3060\u3051\u9054\u6210\u3067\u304d\u308b\u3088\u3046\u9811\u5f35\u308b\u3002\n\n### \u5730\u56f3\u63cf\u753b\u306e\u305f\u3081\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3042\u308c\u3053\u308c\n\n\u9069\u5b9c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n``` r\nlibrary(magrittr)\nlibrary(sp)\nlibrary(ggplot2)\nlibrary(rgdal)\nlibrary(broom)\nlibrary(ggmap)\nlibrary(viridis)\n```\n\n### 1 \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u3001R\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u5e7e\u3064\u304b\u306e\u65b9\u6cd5\u304c\u3042\u308b\u304c\u3001\u3053\u3053\u3067\u306f**`{rgdal}`**\u306e`readOGR`\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002`readOGR`\u3067\u306f\u3001\u30d9\u30af\u30bf\u30fc\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002`readOGR`\u306e\u5f15\u6570\u3092\u307f\u308b\u3068\u3001\n\n``` r\nargs(readOGR) %>% as.list() %>%  names()\n```\n\n    ##  [1] \"dsn\"                       \"layer\"                    \n    ##  [3] \"verbose\"                   \"p4s\"                      \n    ##  [5] \"stringsAsFactors\"          \"drop_unsupported_fields\"  \n    ##  [7] \"input_field_name_encoding\" \"pointDropZ\"               \n    ##  [9] \"dropNULLGeometries\"        \"useC\"                     \n    ## [11] \"disambiguateFIDs\"          \"addCommentsToPolygons\"    \n    ## [13] \"encoding\"                  \"use_iconv\"                \n    ## [15] \"swapAxisOrder\"             \"require_geomType\"         \n    ## [17] \"integer64\"                 \"\"\n\n\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u306e\u3046\u3061\u91cd\u8981\u306b\u306a\u3063\u3066\u304f\u308b\u306e\u306f\u3001\u63cf\u753b\u3059\u308b\u30bd\u30fc\u30b9\u3092\u5b9a\u7fa9\u3059\u308b*dsn*\u3068*layer*\u3067\u3042\u308b\u3002\u6700\u4f4e\u9650\u3001\u3053\u308c\u3060\u3051\u3092\u6307\u5b9a\u3059\u308c\u3070\u8aad\u307f\u8fbc\u3093\u3067\u304f\u308c\u308b\u3002\u4eca\u56de\u306f**`{rgdal}`**\u306b\u5185\u81d3\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30c7\u30e2\u7528\u306eShapefile\u304c\u3042\u308b\u3002\n\n``` r\npath <- vector()\nsystem.file(\"vectors\", package = \"rgdal\") %>% {\n  path <<- .\n  print(.)\n}\n```\n\n    ## [1] \"/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rgdal/vectors\"\n\n\u6b21\u306e\u3088\u3046\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\uff08\u4e00\u90e8\u306e\u307f\u51fa\u529b\uff09\u3002\n\n``` r\nlist.files(path) %>% grep(pattern = \"^trin_inca_pl03\", x = ., value = TRUE)\n```\n\n    ## [1] \"trin_inca_pl03.dbf\" \"trin_inca_pl03.shp\" \"trin_inca_pl03.shx\"\n\ntrin\\_inca\\_pl03.shp\u306b\u4ed8\u5c5e\u3057\u3066\u3001\u5e7e\u3064\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002Shapefile\u3092\u51fa\u529b\u3055\u305b\u308b\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3082\u5fc5\u8981\u306b\u306a\u308b\u3002\u3067\u306f\u3001\u3053\u306etrin\\_inca\\_pl03\u30d5\u30a1\u30a4\u30eb\u3092R\u306b\u53d6\u308a\u8fbc\u3093\u3067\u307f\u308b\u3002\n\n``` r\nmap <- data.frame()\nreadOGR(dsn = path, layer = \"trin_inca_pl03\") %>% {\n  map <<- .\n  print(class(.))\n  str(., max.level = 2)\n}\n```\n\n    ## OGR data source with driver: ESRI Shapefile \n    ## Source: \"/Library/Frameworks/R.framework/Versions/3.2/Resources/library/rgdal/vectors\", layer: \"trin_inca_pl03\"\n    ## with 3 features\n    ## It has 12 fields\n    ## [1] \"SpatialPolygonsDataFrame\"\n    ## attr(,\"package\")\n    ## [1] \"sp\"\n    ## Formal class 'SpatialPolygonsDataFrame' [package \"sp\"] with 5 slots\n    ##   ..@ data       :'data.frame':  2 obs. of  12 variables:\n    ##   ..@ polygons   :List of 2\n    ##   ..@ plotOrder  : int [1:2] 1 2\n    ##   ..@ bbox       : num [1:2, 1:2] -87.1 5.5 -79 10.1\n    ##   .. ..- attr(*, \"dimnames\")=List of 2\n    ##   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n`readOGR`\u3067\u8aad\u307f\u8fbc\u3093\u3060\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f**`{sp}`**\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u5b9a\u7fa9\u3055\u308c\u308bSpatialPointsDataFrame\u3068\u3044\u3046\u3082\u306e\u306b\u306a\u308b\u3002S4\u30e1\u30bd\u30c3\u30c9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f@\u30b9\u30ed\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u3002`str`\u3067\u793a\u3057\u305f\u3088\u3046\u306b\u3001SpatialPointsDataFrame\u306f\uff15\u3064\u306e\u30b9\u30ed\u30c3\u30c8\u3092\u6301\u3064\u3002@data\u306f\u5c5e\u6027\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3042\u308a\u3001@coords\u306f\u4f4d\u7f6e\u5ea7\u6a19\u306e\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\n``` r\ndplyr::tbl_df(map@data)\n```\n\n    ## Source: local data frame [2 x 12]\n    ## \n    ##           ENGL_NAME      SCI_NAME      AUTHORITY       FAMILY PRESENCE\n    ##              (fctr)        (fctr)         (fctr)       (fctr)    (int)\n    ## 1 Wandering Tattler Tringa incana (Gmelin, 1789) Scolopacidae        1\n    ## 2 Wandering Tattler Tringa incana (Gmelin, 1789) Scolopacidae        1\n    ## Variables not shown: ORIGIN (int), COMPILER (fctr), SCALE (fctr), TAX_COM\n    ##   (fctr), DIST_COM (fctr), REFERENCES (fctr), REVIEWERS (fctr)\n\n\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u5834\u5408\u3001\u5143\u306b\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u306b\u306a\u308b\u304c\u3001\u591a\u304f\u306e\u5834\u5408Shapefile\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u3001`readOGR`\u3067\u306fShapefile\u4ee5\u5916\u306eJSON(GeoJSON, TopoJSON)\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\u3044\u305a\u308c\u306e\u65b9\u6cd5\u3082Shapefile\u306e\u6642\u3068\u540c\u3058\u3067\u3042\u308b\u3002\n\n``` r\n# topojson\nmap <- data.frame()\n# \u56fd\u571f\u4ea4\u901a\u7701 \u56fd\u571f\u5730\u7406\u9662 \uff12\uff10\u4e07\u5206\uff11\u5730\u52e2\u56f3\u56f3\u3092\u5143\u306b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\nfile.path <- \"https://gist.github.com/uribo/b09d642351c03dd975aa/raw/6cd2f7e70922b24f89b442c96c001dc3ab794317/japan_one_twenty_map.topojson\"\nreadOGR(dsn              = file.path, \n        layer            = \"OGRGeoJSON\", \n        stringsAsFactors = FALSE) %>% {\n          map <<- .\n          print(class(.))\n          str(., max.level = 2)\n}\n```\n\n    ## OGR data source with driver: GeoJSON \n    ## Source: \"https://gist.github.com/uribo/b09d642351c03dd975aa/raw/6cd2f7e70922b24f89b442c96c001dc3ab794317/japan_one_twenty_map.topojson\", layer: \"OGRGeoJSON\"\n    ## with 130 features\n    ## It has 2 fields\n    ## [1] \"SpatialPolygonsDataFrame\"\n    ## attr(,\"package\")\n    ## [1] \"sp\"\n    ## Formal class 'SpatialPolygonsDataFrame' [package \"sp\"] with 5 slots\n    ##   ..@ data       :'data.frame':  130 obs. of  2 variables:\n    ##   ..@ polygons   :List of 130\n    ##   .. .. [list output truncated]\n    ##   ..@ plotOrder  : int [1:130] 75 78 59 41 79 93 8 11 61 31 ...\n    ##   ..@ bbox       : num [1:2, 1:2] 123 24 149 46\n    ##   .. ..- attr(*, \"dimnames\")=List of 2\n    ##   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\nGeoJSON\u3042\u308b\u3044\u306fTopoJSON\u306e\u5834\u5408\u3001`readOGR`\u306e*layer*\u5f15\u6570\u306b\u6e21\u3059\u5024\u304cOGRGeoJSON\u3068\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\n\n``` r\nogrListLayers(dsn = file.path)[1]\n```\n\n    ## [1] \"OGRGeoJSON\"\n\n\u3067\u51fa\u529b\u3055\u308c\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u51fa\u529b\u3057\u305f\u3044layers\u540d\u304c\u4e0d\u660e\u306a\u5834\u5408\u3001\u3053\u3061\u3089\u3067\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3060\u308d\u3046\u3002\n\n\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u304cGeoJSON\u3042\u308b\u3044\u306fTopoJSON\u5f62\u5f0f\u3067\u3042\u308b\u5834\u5408\u3001**`{rgdal}`**\u306e\u4ee3\u308f\u308a\u306b**`{geojsonio}`**\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3042\u308b\u3002\n\n``` r\ngeojsonio::topojson_read(file.path) %>% {\n  print(class(.))\n  str(., max.level = 2)\n}\n```\n\n### 2 \u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\n\n`readOGR`\u306b\u3088\u308a\u3001SpatialPolygonsDataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3089\u3001\u3072\u3068\u307e\u305a\u5730\u56f3\u304c\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002`plot(map)`\u306e\u3088\u3046\u306b\u3001`plot`\u95a2\u6570\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u5730\u56f3\u304c\u63cf\u753b\u3055\u308c\u308b\u3002`ggplot`\u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u5b9f\u884c\u3055\u308c\u308b\u304c\u3001\u3053\u308c\u306f\u30dd\u30ea\u30b4\u30f3\u3068\u3057\u3066\u63cf\u753b\u3057\u3066\u3044\u308b\u305f\u3081\u89e3\u50cf\u5ea6\u304c\u8352\u3044\u3002\n\n``` r\n## # ggplot2::ggplot \u306b\u3088\u308b\u63cf\u753b: \u3088\u304f\u306a\u3044\u4f8b\u3002\u8352\u3044\u3002data.frame, SpatialPolygonsDataFrame\u3069\u3061\u3089\u3067\u3082\u304ak\nggplot() +  geom_polygon(data = map, \n                          aes(x = long, y = lat, group = id))\n```\n\n![unnamed-chunk-11-1.png](https://qiita-image-store.s3.amazonaws.com/0/19462/a893ac68-baea-6821-a189-f43cf8faed9e.png)\n\n\n**`{ggplot2}`**\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3055\u305b\u308b\u5834\u5408\u306f\u3001SpatialPolygonsDataFrame\u3092data.frame\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u969b\u3001**`{broom}`** \u306e`tidy`\u3092\u5229\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3042\u308b\uff08\u3053\u308c\u307e\u3067\u306f`ggplot2::fortify`\u304c\u4f7f\u308f\u308c\u3066\u304d\u305f\u304c\u3001**`fortify` \u306f\u5c06\u6765\u5ec3\u6b62\u4e88\u5b9a\u3068\u306e\u3053\u3068\u3067\u3042\u308a\u3001 \u4ee3\u308f\u308a\u306b{broom}\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3053\u3068\u3092Hadley\u306f\u63a8\u5968\u3057\u3066\u3044\u308b**\uff09\u3002\n\n``` r\nbroom::tidy(map) %>% {\n  map <<- .\n  print(class(.))\n  dplyr::glimpse(.)\n}\n```\n\n    ## [1] \"data.frame\"\n    ## Observations: 650\n    ## Variables: 7\n    ## $ long  (dbl) 148, 149, 149, 148, 148, 148, 149, 149, 148, 148, 147, 1...\n    ## $ lat   (dbl) 46.00000, 46.00000, 45.33333, 45.33333, 46.00000, 45.333...\n    ## $ order (int) 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,...\n    ## $ hole  (lgl) FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, ...\n    ## $ piece (fctr) 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1...\n    ## $ group (fctr) 1.1, 1.1, 1.1, 1.1, 1.1, 2.1, 2.1, 2.1, 2.1, 2.1, 3.1, ...\n    ## $ id    (chr) \"1\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\", \"2\", \"2\", \"2\", \"3\", \"...\n\n`tidy`\u51e6\u7406\u3092\u65bd\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5171\u901a\u306e\u5217\u540d\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u306a\u308b\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7528\u3044\u3066ggplot\u306e\u4e0a\u306b\u5730\u56f3\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u304f\u3002\n\n``` r\nggplot() + \n  geom_map(data = map, \n           map = map,\n           aes(x = long, y = lat, map_id = id), \n           fill = \"white\", color = \"black\")\n```\n\n`ggplot`\u306e*data*\u5f15\u6570\u53ca\u3073`geom_map`\u306e*map*\u306b\u4e0e\u3048\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306ftidy\u51e6\u7406\u3092\u65bd\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\u5be9\u7f8e\u7684\u5c5e\u6027\u306b\u4e0e\u3048\u308b\u8981\u7d20\u3082\u5171\u901a\u3067\u3042\u308b\u3002\u3053\u308c\u304c\u57fa\u672c\u578b\u3068\u306a\u308b\u304c\u3001\u3053\u308c\u3060\u3068\u5730\u56f3\u304c\u5857\u308a\u3064\u3076\u3057\u3055\u308c\u3066\u3044\u305f\u308a\u3001\u30d7\u30ed\u30c3\u30c8\u304c\u6b63\u65b9\u5f62\u306b\u306a\u3063\u3066\u3044\u305f\u308a\u3068\u3001\u5730\u56f3\u3068\u3057\u3066\u683c\u597d\u304c\u60aa\u3044\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5e7e\u3064\u304b\u306e\u5c5e\u6027\u3092\u4ed8\u52a0\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3002\n\n``` r\nggplot() +\n  geom_map(data = map, \n           map = map,\n           aes(x = long, y = lat, map_id = id),\n           color = \"black\", fill = \"white\", # \u5883\u754c\u7dda\u3092\u9ed2\u304f\u3001\u9818\u57df\u3092\u767d\u3067\u5857\u308a\u3064\u3076\u3059\n           size = 0.5) +\u3000\n  coord_map(projection = \"mercator\") -> plot_map # \u6295\u5f71\u6cd5\u3092\u6307\u5b9a\uff08\u30e1\u30eb\u30ab\u30c8\u30eb\u56f3\u6cd5\uff09\n# ggthemes::theme_map() \u3082\u5730\u56f3\u63cf\u753b\u7528\u306eggplot\u30c6\u30fc\u30de\u306a\u306e\u3067\u3001\u6307\u5b9a\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n# \u80cc\u666f\u304c\u767d\u304f\u306a\u308a\u3001\u8ef8\u306a\u3069\u304c\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308b\n\nplot_map\n```\n\n![gg_map_basic-1.png](https://qiita-image-store.s3.amazonaws.com/0/19462/684d6c35-0af3-579b-e307-9d406d764ab6.png)\n\n\n`plot_map`\u3068\u3057\u3066\u3001\u518d\u5e30\u7684\u306b\u5730\u56f3\u3092\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u3053\u3053\u304b\u3089\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u91cd\u306d\u305f\u308a\u3057\u3066\u3044\u304f\u3002\n\n### 3 \u30de\u30c3\u30d4\u30f3\u30b0\n\n\u3044\u3088\u3044\u3088\u672c\u756a\u3002\u81ea\u5206\u306e\u30c7\u30fc\u30bf\u3092\u5730\u56f3\u4e0a\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3002\u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3001\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u9032\u3081\u3066\u3044\u304f\u3002\u5730\u56f3\u4e0a\u306b\u30c7\u30fc\u30bf\u3092\u91cd\u306d\u3066\u3044\u304f\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u624b\u6cd5\u3068\u3057\u3066\u3001\u30e9\u30d9\u30eb\u306e\u51fa\u529b\u3001\u30dd\u30a4\u30f3\u30c8\u306e\u8868\u793a\u3001\u5024\u3084\u6c34\u6e96\u306b\u3088\u308b\u5857\u308a\u5206\u3051\u304c\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u65e5\u672c\u306e\u5730\u56f3\u3092\u4f8b\u3092\u5143\u306b\u3057\u3066\u8aac\u660e\u3059\u308b\u3002\n\n#### \u30c7\u30fc\u30bf\u306e\u7528\u610f\n\n\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001\u3069\u306e\u5ea7\u6a19\uff08\u7def\u5ea6\u3068\u7d4c\u5ea6\uff09\u306b\u3069\u306e\u3088\u3046\u306a\u5024\uff08\u6587\u5b57\u3084\u7a2e\u985e\uff09\u3092\u51fa\u529b\u3059\u308b\u304b\u3001\u5857\u308a\u5206\u3051\u306e\u57fa\u6e96\u3068\u306a\u308b\u5024\u3084\u6c34\u6e96\u3068\u3044\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\n\n``` r\ndf_jp <- data.frame(address          = c(\"Tokyo, Japan\", \n                                         \"Okayama, Japan\", \n                                         \"Sapporo, Japan\",\n                                         \"Okinawa, Japan\"),\n                    id               = c(56, 90, 26, 125),\n                    population       = c(8945695, 709584, 1913545, 315954),\n                    # https://ja.wikipedia.org/wiki/\u90fd\u9053\u5e9c\u770c\u5e81\u6240\u5728\u5730\u3068\u653f\u4ee4\u6307\u5b9a\u90fd\u5e02\u306e\u4eba\u53e3\u9806\u4f4d \u304b\u3089\u4eba\u53e3\u3092\u5165\u529b\n                    stringsAsFactors = FALSE) %>% \n  mutate_geocode(address) %>% # address\u3092\u5143\u306b\u3001\u7def\u5ea6\u7d4c\u5ea6\u3092\u6c42\u3081\u308b\n  dplyr::mutate(address = gsub(pattern = \"[[:punct:]] Japan$\", replacement = \"\", address))\n\ndplyr::tbl_df(df_jp)\n```\n\n    ## Source: local data frame [4 x 5]\n    ## \n    ##   address    id population      lon      lat\n    ##     (chr) (dbl)      (dbl)    (dbl)    (dbl)\n    ## 1   Tokyo    56    8945695 139.6917 35.68950\n    ## 2 Okayama    90     709584 133.9350 34.66167\n    ## 3 Sapporo    26    1913545 141.3469 43.06417\n    ## 4 Okinawa   125     315954 127.8014 26.33583\n\n#### \u30e9\u30d9\u30eb\u53ca\u3073\u30dd\u30a4\u30f3\u30c8\u306e\u8868\u793a\n\n\u7def\u5ea6\u30fb\u7d4c\u5ea6\u3001\u51fa\u529b\u3059\u308b\u6587\u5b57\u5217\u306f\u305d\u308c\u305e\u308c\u3001`df_jp$lat`, `df_jp$lon`, df\\_jp\\(address`\u3067\u3042\u308b\u3002\u307e\u305f\u3001\u30dd\u30a4\u30f3\u30c8\u306e\u5927\u304d\u3055\u3092\u4eba\u53e3 `df_jp\\)population\\`\u3092\u5143\u306b\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u308b\u3002\n\n``` r\nplot_map + \n  # \u30dd\u30a4\u30f3\u30c8\u306e\u51fa\u529b\n  geom_point(data = df_jp, \n             aes(x = lon, y = lat),\n             fill = \"skyblue\",\n             shape = 21, alpha = 0.8, size = 2 * log(df_jp$population) / 10) + \n  geom_text(data = df_jp, \n            aes(label = address, x = lon + 0.2, y = lat + -0.4), \n            size = 3, \n            color = \"tomato\",\n            angle = 20)\n```\n\n![unnamed-chunk-15-1.png](https://qiita-image-store.s3.amazonaws.com/0/19462/e838789d-6d1c-886e-7431-baa0914042a4.png)\n\n\n### \u5857\u308a\u5206\u3051\u5730\u56f3\uff08\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\uff09\n\n\u5857\u308a\u5206\u3051\u306f\u5c11\u3057\u8907\u96d1\u306b\u306a\u308b\u3002\u30d9\u30fc\u30b9\u3068\u3057\u3066\u3044\u308b\u5730\u56f3\u3067\u306e\u5857\u308a\u5206\u3051\u306e\u57fa\u6e96\u3068\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u306e\u57fa\u6e96\u3092\u4e00\u81f4\u3055\u305b\u3066\u3044\u306a\u3044\u3068\u3001\u5857\u308a\u5206\u3051\u3055\u308c\u308b\u7b87\u6240\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u3002\n\n``` r\nplot_map + \n  geom_map(data = df_jp, \n           map = map,\n           aes(fill = population, map_id = id, stat = \"identity\")) +\n  scale_fill_viridis()\n```\n\n![unnamed-chunk-16-1.png](https://qiita-image-store.s3.amazonaws.com/0/19462/0f2977e8-cf9c-ed98-db67-f98f6443fd08.png)\n\n\n\u3053\u3046\u3057\u305f\u5857\u308a\u5206\u3051\u5730\u56f3\u3092\u63cf\u753b\u3059\u308b\u5c02\u9580\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u3042\u308b\u3002\n\n<https://github.com/trulia/choroplethr>\n\n\u304a\u307e\u3051: \u62e1\u5927\u30fb\u7e2e\u5c0f\u3067\u304d\u308b\u5730\u56f3\n----------------------------\n\n\u5b9f\u969b\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u306e\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\n\n[RPubs - Choropleth Map of Japan with svgPanZoom, viridis and lineworkmaps packges.](http://rpubs.com/uri-sy/viridis_choropleth)\n\n``` r\nlibrary(svgPanZoom)\nlibrary(SVGAnnotation)\n```\n\n``` r\nsvgPanZoom((plot_map), \n           controlIconsEnabled = TRUE)\n```\n\n**\u6b21\u56de\u306f\u5fdc\u7528\u7de8\u3068\u3055\u307e\u3056\u307e\u306a\u5730\u56f3\u63cf\u753b\u624b\u6cd5\u306e\u7d39\u4ecb\u3067\u3059**\n\n\u53c2\u8003\n----\n\n-   [R\u306e\u57fa\u672c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u6a5f\u80fd\u307e\u305f\u306fggplot2\u3092\u4f7f\u3063\u3066\u5730\u56f3\u3092\u63cf\u304f\u306b\u306f - verum ipsum factum](http://sudillap.hatenablog.com/entry/2013/03/26/210202)\n-   [\\[R\\] R\u3067\u5b66\u3076\u90fd\u77e5\u4e8b\u9078\u306e\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u3010\u5730\u7406\u30c7\u30fc\u30bf\u7de8\u3011 - ill-identified diary](http://ill-identified.hatenablog.com/entry/2014/02/27/211021)\n-   [choroplethr\u3067\u5927\u962a\u5e02\u306e\u30b3\u30ed\u30d7\u30ec\u30b9\u56f3\u3092\u63cf\u304f - Technically, technophobic.](http://notchained.hatenablog.com/entry/2015/05/23/201451)\n-   [plotting polygon shapefiles \u00b7 hadley/ggplot2 Wiki](https://github.com/hadley/ggplot2/wiki/plotting-polygon-shapefiles)\n-   [Overcoming D3 Cartographic Envy With R + ggplot | rud.is](http://rud.is/b/2014/09/26/overcoming-d3-cartographic-envy-with-r-ggplot/)\n-   [Charting/Mapping the Scottish Vote with R (an rvest/dplyr/tidyr/TopoJSON/ggplot tutorial) | rud.is](https://rud.is/b/2014/09/20/chartingmapping-the-scottish-vote-with-r-rvestdplyrtidyrtopojsonggplot/)\n-   [Mapping in R using the ggplot2 package | Technical Tidbits From Spatial Analysis & Data Science](http://zevross.com/blog/2014/07/16/mapping-in-r-using-the-ggplot2-package/)\n-   [Mapping](http://lincolnmullen.com/projects/dh-r/mapping.html)\n-   [RPubs - TopoJSON map of Japan](http://rpubs.com/uri-sy/japan_geojson_map)\n", "tags": ["R", "ggplot2"]}