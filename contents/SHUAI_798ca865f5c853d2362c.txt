{"context": "from RxJS Observables vs Promises\n\u6839\u64da\u4ee5\u4e0a\u5f71\u7247\n\u672c\u6587\u7a0d\u505a\u4fee\u6539\u4f86\u4ecb\u7d39Reactive\u8207Promise\u7684\u5dee\u7570\n\u5148\u770b\u4ee5\u4e0bsample\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve(42);\n  }, 500);\n\n  console.log('promise started');\n});\n\npromise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  setTimeout(() => {\n    observer.onNext(43);\n  }, 400);\n\n  console.log('observable started');\n});\n\nsource.forEach(x => console.log(x));\n\nconsole\n\"promise started\"\n\"observable started\"\n43\n42\n\n\u4f9d\u5e8fpromise.then\u884c\u70ba\u53ca\u8a02\u95b1\u6216\u89c0\u5bdfObservable source.forEach\n\u521d\u59cb\u5316\u5206\u5225\u5370\u51fapromise started\u53caobservable started\n\u7136\u5f8c\u518d\u5370\u51fa43\u4e4b\u5f8c\u624d\u662f42\n\u56e0\u70basource\u7684timeout\u6642\u9593\u8f03promise\u7684\u77ed\n\nLazy\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    console.log('promise timeout hit');\n    resolve(42);\n  }, 500);\n\n  console.log('promise started');\n});\n\n// promise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  setTimeout(() => {\n    observer.onNext(43);\n  }, 400);\n\n  console.log('observable started');\n});\n\n// source.forEach(x => console.log(x));\n\nconsole\n\"promise started\"\n\"promise timeout hit\"\n\n\u7531\u6b64\u53ef\u4ee5\u770b\u5230\n\u7576new Promise\u7269\u4ef6\u5c31\u6703\u57f7\u884c\u521d\u59cb\u5316\u5370\u51fapromise started\n\u4e26\u4e14\u5728500\u6beb\u79d2\u6642\u5370\u51fapromise timeout hit\n\u4f46\u56e0\u70ba\u8a3b\u89e3promise.then\u884c\u70ba\u6240\u4ee5\u4e0d\u6703\u53d6x\u503c\u5370\u51fa42\n\u800c\u53e6\u4e00\u65b9\u9762\u8a3b\u89e3\u8a02\u95b1\u6216\u89c0\u5bdfObservable\n\u5247\u4e0d\u6703\u57f7\u884c\u521d\u59cb\u5316\u7576\u7136\u4e5f\u5c31\u4e0d\u6703\u5370\u51faobservable started\u53ca43\n\nDisposable, Repeatable, Retry\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    console.log('promise timeout hit');\n    resolve(42);\n  }, 1000);\n\n  console.log('promise started');\n});\n\npromise.then(x => console.log(x));\npromise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  var id = setTimeout(() => {\n    console.log('observable timeout hit');\n    observer.onNext(43);\n  }, 800);\n\n  console.log('observable started');\n\n  return () => {\n    console.log('dispose called');\n//     clearTimeout(id);\n  };\n});\n\nvar disposable = source.forEach(x => console.log(x));\n\nsetTimeout(() => {\n  disposable.dispose();\n}, 500);\n\nsource.forEach(x => console.log(x));\n\nconsole\n\"promise started\"\n\"observable started\"\n\"observable started\"\n\"dispose called\"\n\"observable timeout hit\"\n\"observable timeout hit\"\n43\n\"promise timeout hit\"\n42\n42\n\n\u4e00\u958b\u59cb\u8a02\u95b1\u6216\u89c0\u5bdfObservable\n\u6240\u4ee5\u6703\u521d\u59cb\u5316\u5370\u51faobservable started\ndisposable\u7269\u4ef6\u5728500\u6beb\u79d2\u5f8c\u6703\u5148\u547c\u53ebdispose\n\u7136\u5f8c\u5370\u51fadispose called\n\u4e4b\u5f8c800\u6beb\u79d2\u6642\n\u56e0\u70baObservable\u5df2\u7d93\u88abdispose\n\u6240\u4ee5\u53ea\u6703\u5370\u51faobservable timeout hit\n\u800c\u4e0d\u6703\u6709onNext\u884c\u70ba\n\u4f46\u662f\u70ba\u4e86\u9a57\u8b49Observable\u53ef\u4ee5repeatable\u53caretry\n\u6700\u5f8c\u4e00\u884c\u518d\u8a02\u95b1\u6216\u89c0\u5bdfObservable source.forEach\n\u5247\u9019\u6b21\u4e0d\u4f46\u518d\u6b21\u5370\u51faobservable timeout hit\n\u4e5f\u6703\u57f7\u884conNext\u884c\u70ba\u5370\u51fa43\n\u81f3\u65bcpromise\u521d\u59cb\u5316\u5370\u51fapromise started\u5f8c\n1000\u6beb\u79d2\u6642\u5370\u51fapromise timeout hit\n\u5373\u4f7f\u67092\u6b21promise.then\u884c\u70ba\u4ecd\u53ea\u6703\u5f97\u52302\u6b21x\u503c42\n\u4e26\u4e0d\u6703\u518d\u6b21\u5370\u51fapromise timeout hit\n\u9019\u662fPromise\u8207Observable\u5dee\u5225\u6240\u5728\n\nPromise\n\nScala: Future\nJava: CompletableFuture\nC#: Task\n\nPromise\u76f8\u95dc\u7684term\u5728\u4e0d\u540c\u8a9e\u8a00\nfrom [RxJS Observables vs Promises](https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises)\n\n\u6839\u64da\u4ee5\u4e0a\u5f71\u7247\n\u672c\u6587\u7a0d\u505a\u4fee\u6539\u4f86\u4ecb\u7d39Reactive\u8207Promise\u7684\u5dee\u7570\n\n\u5148\u770b\u4ee5\u4e0bsample\n\n```js\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    resolve(42);\n  }, 500);\n\n  console.log('promise started');\n});\n\npromise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  setTimeout(() => {\n    observer.onNext(43);\n  }, 400);\n\n  console.log('observable started');\n});\n\nsource.forEach(x => console.log(x));\n```\n\nconsole\n\n```text\n\"promise started\"\n\"observable started\"\n43\n42\n```\n\n\u4f9d\u5e8fpromise.**then**\u884c\u70ba\u53ca\u8a02\u95b1\u6216\u89c0\u5bdfObservable source.**forEach**\n\u521d\u59cb\u5316\u5206\u5225\u5370\u51fa**promise started**\u53ca**observable started**\n\u7136\u5f8c\u518d\u5370\u51fa**43**\u4e4b\u5f8c\u624d\u662f**42**\n\u56e0\u70basource\u7684timeout\u6642\u9593\u8f03promise\u7684\u77ed\n\n###Lazy\n```js\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    console.log('promise timeout hit');\n    resolve(42);\n  }, 500);\n\n  console.log('promise started');\n});\n\n// promise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  setTimeout(() => {\n    observer.onNext(43);\n  }, 400);\n\n  console.log('observable started');\n});\n\n// source.forEach(x => console.log(x));\n```\n\nconsole\n\n```text\n\"promise started\"\n\"promise timeout hit\"\n```\n\n\u7531\u6b64\u53ef\u4ee5\u770b\u5230\n\u7576**new Promise**\u7269\u4ef6\u5c31\u6703\u57f7\u884c\u521d\u59cb\u5316\u5370\u51fa**promise started**\n\u4e26\u4e14\u5728500\u6beb\u79d2\u6642\u5370\u51fa**promise timeout hit**\n\u4f46\u56e0\u70ba\u8a3b\u89e3promise.then\u884c\u70ba\u6240\u4ee5\u4e0d\u6703\u53d6x\u503c\u5370\u51fa42\n\u800c\u53e6\u4e00\u65b9\u9762\u8a3b\u89e3\u8a02\u95b1\u6216\u89c0\u5bdfObservable\n\u5247\u4e0d\u6703\u57f7\u884c\u521d\u59cb\u5316\u7576\u7136\u4e5f\u5c31\u4e0d\u6703\u5370\u51faobservable started\u53ca43\n\n###Disposable, Repeatable, Retry\n```js\nconsole.clear();\n\nvar promise = new Promise((resolve) => {\n  setTimeout(() => {\n    console.log('promise timeout hit');\n    resolve(42);\n  }, 1000);\n  \n  console.log('promise started');\n});\n\npromise.then(x => console.log(x));\npromise.then(x => console.log(x));\n\nvar source = Rx.Observable.create((observer) => {\n  var id = setTimeout(() => {\n    console.log('observable timeout hit');\n    observer.onNext(43);\n  }, 800);\n  \n  console.log('observable started');\n  \n  return () => {\n    console.log('dispose called');\n//     clearTimeout(id);\n  };\n});\n\nvar disposable = source.forEach(x => console.log(x));\n\nsetTimeout(() => {\n  disposable.dispose();\n}, 500);\n\nsource.forEach(x => console.log(x));\n```\n\nconsole\n\n```text\n\"promise started\"\n\"observable started\"\n\"observable started\"\n\"dispose called\"\n\"observable timeout hit\"\n\"observable timeout hit\"\n43\n\"promise timeout hit\"\n42\n42\n```\n\n\u4e00\u958b\u59cb\u8a02\u95b1\u6216\u89c0\u5bdfObservable\n\u6240\u4ee5\u6703\u521d\u59cb\u5316\u5370\u51fa**observable started**\ndisposable\u7269\u4ef6\u5728500\u6beb\u79d2\u5f8c\u6703\u5148\u547c\u53eb**dispose**\n\u7136\u5f8c\u5370\u51fa**dispose called**\n\u4e4b\u5f8c800\u6beb\u79d2\u6642\n\u56e0\u70baObservable\u5df2\u7d93\u88abdispose\n\u6240\u4ee5\u53ea\u6703\u5370\u51fa**observable timeout hit**\n\u800c\u4e0d\u6703\u6709**onNext**\u884c\u70ba\n\n\u4f46\u662f\u70ba\u4e86\u9a57\u8b49Observable\u53ef\u4ee5repeatable\u53caretry\n\u6700\u5f8c\u4e00\u884c\u518d\u8a02\u95b1\u6216\u89c0\u5bdfObservable source.forEach\n\u5247\u9019\u6b21\u4e0d\u4f46\u518d\u6b21\u5370\u51fa**observable timeout hit**\n\u4e5f\u6703\u57f7\u884c**onNext**\u884c\u70ba\u5370\u51fa**43**\n\n\u81f3\u65bcpromise\u521d\u59cb\u5316\u5370\u51fa**promise started**\u5f8c\n1000\u6beb\u79d2\u6642\u5370\u51fa**promise timeout hit**\n\u5373\u4f7f\u67092\u6b21promise.**then**\u884c\u70ba\u4ecd\u53ea\u6703\u5f97\u52302\u6b21x\u503c**42**\n\u4e26\u4e0d\u6703\u518d\u6b21\u5370\u51fapromise timeout hit\n\u9019\u662fPromise\u8207Observable\u5dee\u5225\u6240\u5728\n\n##Promise\n- Scala: Future\n- Java: CompletableFuture\n- C#: Task\n\nPromise\u76f8\u95dc\u7684term\u5728\u4e0d\u540c\u8a9e\u8a00\n", "tags": ["JavaScript", "RxJS", "promise"]}