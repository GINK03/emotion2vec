{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fC++ Advent Calendar 2015\u306e6\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u8a71\u984c\u306f\u30013\u65e5\u76ee\u306eRiyaaaaa\u3055\u3093\u306e\u8a18\u4e8b\u3092\u898b\u305f\u3068\u3042\u308b\u4eba\u306b\u300c\u304a\u524d\u3082C++AMPer\u306a\u3089C++AMP\u306e\u8a18\u4e8b\u66f8\u3051\u3088\uff01\uff01\u300d\u3063\u3066\u717d\u3089\u308c\u305f\u306e\u3067\u3001\u6025\u907d\u5909\u66f4\u3057\u3066\u3001C++AMP\u306e\u30cd\u30bf\u306b\u3057\u307e\u3059\u3002\n\u5143\u3005\u306e\u4e88\u5b9a\u3060\u3063\u305f\u300eC++11\u306b\u306a\u305cmake_unique\u304c\u306a\u3044\u306e\u304b\u300f\u306b\u3064\u3044\u3066\u306f\u5225\u8a18\u4e8b\u306b\u3001\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3068\u95a2\u4fc2\u306a\u3044\u8a18\u4e8b\u3068\u3057\u3066\u6295\u7a3f\u3057\u305f\u306e\u3067\u3001\u305d\u3063\u3061\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u67d0\u6240\u3067\u65e2\u306b\u767a\u8868\u6e08\u307f\u306e\u5185\u5bb9\u3092\uff08\u307b\u307c\uff09\u305d\u306e\u307e\u307e\u6301\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u8aad\u3093\u3060\u3053\u3068\u3042\u308b\u4eba\u3044\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\n\u304a\u984c\u306f\u3001C++AMP\u3068OpenCL C\u3068SPIR(1.2)\u306e\u4e3b\u306b\u76f8\u4e92\u5909\u63db\u306b\u3064\u3044\u3066\u3067\u3059\uff08\uff0bOpenCL 2.1\u3068SPIR-V\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7d39\u4ecb\uff09\u3002\nC++AMP\u306b\u3064\u3044\u3066\u306f\u3001\u5148\u8ff0\u306eRyaaaa\u3055\u3093\u306e\u8a18\u4e8b\u304b\u3001\u968f\u5206\u524d\u306b\u6295\u7a3f\u3057\u305f\u79c1\u306e\u8a18\u4e8b\u3082\u5408\u308f\u305b\u3066\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002\n\nC++AMP\u2192OpenCL C\nKalmar\u3092\u4f7f\u3046\u3068C++ AMP\u304b\u3089OpenCL C\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\nKalmar\u306e\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u5148\u8ff0\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001Kalmar\u3092\u4f7f\u3046\u3068\u8a00\u3063\u3066\u3082\u666e\u901a\u306b\u4f7f\u3046\u3060\u3051\u3060\u3068OpenCL C\u306e\u30b3\u30fc\u30c9\u306f\u51fa\u3066\u3053\u306a\u3044\u306e\u3067\u3001Kalmar\u3092\u4fee\u6b63\u3057\u3066\u81ea\u529b\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001mcwamp_opencl.cpp\u306e337\u884c\u76ee\u4ed8\u8fd1\u3067\u3001\nstd::cout << source << std::endl;\n\n\u3057\u3066\u3084\u3063\u3066\u304b\u3089\u3001\u30d3\u30eb\u30c9\u3059\u308c\u3070\u3001\u5b9f\u884c\u6642\u306b\uff08\u203bOpenCL C\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u306e\u3067\uff09OpenCL C\u306e\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u306e\u6642\nexport CLAMP_RUNTIME=CL\nexport CLAMP_NOSPIR=1\n\n\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001SPIR (LLVM IR bitcode)\u304c\u5410\u304b\u308c\u308b\u306e\u3067BC\u306a\u3093\u3061\u3083\u3089\u3068\u3044\u3046\u610f\u5473\u4e0d\u660e\u306a\u306e\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nSPIR\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\u3068\u3082\u304b\u304f\u3053\u308c\u3067OpenCL C\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u8a66\u3057\u306b\u5358\u7d14\u306a\u8db3\u3057\u7b97\nconcurrency::parallel_for_each(\n    aa.get_extent(),\n    [aa, bb, &cc] (const concurrency::index<1> idx) restrict(amp)\n    {\n        const int i = idx[0];\n        cc[i] = aa[i] + bb[i];\n    });\n\n\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3068\u3001\u7d50\u679c\u3001\u8272\u3005\u51fa\u3066\u304f\u308b\u3093\u3067\u3059\u304c\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u304c\n__kernel void ZZ4mainEN3_EC__119__cxxamp_trampolineEPiiiiiiiiS0_iiiiiiiS0_iiiiiii( __global unsigned int *llvm_cbe_tmp__1, unsigned int llvm_cbe_tmp__2, unsigned int llvm_cbe_tmp__3, unsigned int llvm_cbe_tmp__4, unsigned int llvm_cbe_tmp__5, unsigned int llvm_cbe_tmp__6, unsigned int llvm_cbe_tmp__7, unsigned int llvm_cbe_tmp__8,  __global unsigned int *llvm_cbe_tmp__9, unsigned int llvm_cbe_tmp__10, unsigned int llvm_cbe_tmp__11, unsigned int llvm_cbe_tmp__12, unsigned int llvm_cbe_tmp__13, unsigned int llvm_cbe_tmp__14, unsigned int llvm_cbe_tmp__15, unsigned int llvm_cbe_tmp__16,  __global unsigned int *llvm_cbe_tmp__17, unsigned int llvm_cbe_tmp__18, unsigned int llvm_cbe_tmp__19, unsigned int llvm_cbe_tmp__20, unsigned int llvm_cbe_tmp__21, unsigned int llvm_cbe_tmp__22, unsigned int llvm_cbe_tmp__23, unsigned int llvm_cbe_tmp__24) {\n  unsigned long llvm_cbe_tmp__25;\n  unsigned long llvm_cbe_tmp__26;\n  unsigned int llvm_cbe_tmp__27;\n  unsigned int llvm_cbe_tmp__28;\n\n  llvm_cbe_tmp__25 =  /*tail*/ amp_get_global_id(0u);\n  llvm_cbe_tmp__26 = ((signed long )(((signed long )(llvm_cbe_tmp__25 << 32ul)) >> ((signed long )32ul)));\n  llvm_cbe_tmp__27 = *((&llvm_cbe_tmp__1[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__8))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__6))))))) + ((unsigned long )llvm_cbe_tmp__26)))))]));\n  llvm_cbe_tmp__28 = *((&llvm_cbe_tmp__9[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__16))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__14))))))) + ((unsigned long )llvm_cbe_tmp__26)))))]));\n  *((&llvm_cbe_tmp__17[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__24))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__22))))))) + ((unsigned long )llvm_cbe_tmp__26)))))])) = (((unsigned int )(((unsigned int )llvm_cbe_tmp__28) + ((unsigned int )llvm_cbe_tmp__27))));\n  return;\n}\n\n\u3068\u3044\u3046\u306e\u304c\u6700\u5f8c\u306e\u65b9\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002\n\u3067\u3082\u3001LLVM\u3063\u307d\u3044\u306e\u306f\u3068\u3082\u304b\u304f\u3001\u306a\u3093\u3060\u3053\u308c\u3063\u3066\u611f\u3058\u3067\u3059\u30fb\u30fb\u30fb\u3002\u5927\u91cf\u306e\u30ad\u30e3\u30b9\u30c8\u30fb\u30fb\u30fb\uff1f\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u30ad\u30e3\u30b9\u30c8\u3092\u6d88\u3057\u305f\u308a\u5909\u6570\u540d\u3092\u5909\u3048\u305f\u308a\u3057\u3066\u307f\u308b\u3068\u3001\u3053\u3093\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n__kernel void func(\n  __global unsigned int *src1, unsigned int unused2,  unsigned int unused3,  unsigned int unused4,  unsigned int unused5,  unsigned int rightOffset1, unsigned int unused7,  unsigned int rightOffset0,\n  __global unsigned int *src2, unsigned int unused10, unsigned int unused11, unsigned int unused12, unsigned int unused13, unsigned int leftOffset1,  unsigned int unused15, unsigned int leftOffset0,\n  __global unsigned int *dst,  unsigned int unused18, unsigned int unused19, unsigned int unused20, unsigned int unused21, unsigned int dstOffset1,   unsigned int unused23, unsigned int dstOffset0)\n{\n  unsigned long index = get_global_id(0);\n  unsigned int right = src1[rightOffset0 + rightOffset1 + index];\n  unsigned int left  = src2[leftOffset0  + leftOffset1  + index];\n  dst[dstOffset0 + dstOffset1 + index] = left + right;\n  return;\n}\n\n\u306a\u3093\u304b\u4f59\u8a08\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u5165\u3063\u3066\u307e\u3059\u306d\u30fb\u30fb\u30fb\u3002\u3042\u3068\u672a\u4f7f\u7528\u5f15\u6570\u591a\u3059\u304e\u3067\u3059\u3002\n\u307e\u3041\u3068\u3082\u304b\u304fOpenCL C\u306b\u5909\u63db\u306f\u3067\u304d\u307e\u3057\u305f\u3002OpenCL C\u66f8\u304b\u306a\u304f\u3066\u3082\u3082\u3063\u3068\u624b\u8efd\u306bOpenCL C\u304c\u624b\u306b\u5165\u308b\u306e\u306f\u4fbf\u5229\uff08\uff1f\uff09\u3002\n\u305f\u3060\u3057\u3001\nstruct Vector4\n{\npublic:\n        alignas(32) double data[4];\n\n        Vector4() restrict(amp)\n        {\n                data[0] = 0;\n                data[1] = 0;\n                data[2] = 0;\n                data[3] = 0;\n        };\n};\n\nconcurrency::parallel_for_each(\n    x.get_extent(),\n    [f, &x, &v, dt, m](const concurrency::index<1> idx) restrict(amp)\n{\n    const int i = idx[0];\n    // a = f/m\n    Vector4 a;\n    for (int j = 0; j < 4; j++)\n    {\n        a.data[j] = f[i].data[j] /m;\n    }\n\n    // x += v*dt + a*dt^2/2\n    for (int j = 0; j < 4; j++)\n    {\n        const double dxv = v[i].data[j] * dt;\n        const double dxa = a.data[j] * dt*dt/2;\n        const double dx = dxv + dxa;\n        x[i].data[j] += dx;\n    }\n\n    // v += a*dt\n    for (int j = 0; j < 4; j++)\n    {\n        const double dv = a.data[j] * dt;\n        v[i].data[j] += dv;\n    }\n});\n\n\u307f\u305f\u3044\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u898b\u3066\u307f\u308b\u3068\ndouble  __attribute__((vector_size(16 ))) llvm_cbe_tmp__31;\nllvm_cbe_tmp__31 = ((double  __attribute__((vector_size(16 ))) )/*UNDEF*/{});\n\n\u3068\u3044\u3046OpenCL C\u3092\u5410\u3044\u3066\u3044\u3066\u3001double2\u306f{}\u3067\u521d\u671f\u5316\u3067\u304d\u306a\u3044\u3088\u3063\u3066\u8a00\u308f\u308c\u3066\u305f\u3002\n\u307e\u3041\u305d\u308a\u3083\u305d\u3046\u3068\u3044\u3046\u611f\u3058\u30fb\u30fb\u30fb\u3067\u3059\u3002{0}\u3063\u3066\u3059\u308c\u3070\u89e3\u6c7a\u3059\u308b\u306e\u306b\u3002\n\u3042\u3068\u3001\u306a\u305cdouble4\u3058\u3083\u306a\u304f\u3066double2\u306a\u3093\u3060\u308d\u3046\u30fb\u30fb\u30fb\uff08preferred vector size\u898b\u3066\u304f\u308c\u305f\u3093\u3067\u3059\u304b\u306d\uff1f\uff09\u3002\n\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u3061\u3087\u3063\u3068\u5fae\u5999\u306a\u7d50\u679c\u3067\u3059\u304c\u3001\u5148\u306b\u66f8\u3044\u305f\u901a\u308a\u6a19\u6e96\u3067\u306fOpenCL C\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\uff08\uff1f\uff09\u306b\u306f\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u4ed5\u65b9\u306a\u3044\u3067\u3059\u3002\n\u65e2\u5b9a\u306e\u52d5\u4f5c\u3067\u3042\u308bSPIR\u3067\u306f\u52d5\u3044\u305f\u306e\u3067\u3001SPIR\u306f\u3069\u3046\u306a\u3063\u3066\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nC++AMP\u2192SPIR(LLVM IR)\nSPIR\uff081.2\u307e\u3067\u3002SPIR-V\u3082\u3042\u308b\u304c\u5225\u7269\u3002\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\uff09\u306f\u3001LLVM\u30d9\u30fc\u30b9\u306e\u4e2d\u9593\u8868\u73fe\u3067\u3001\u305d\u306e\u5b9f\u614b\u306f\u300cOpenCL C\u3092\u3069\u306e\u3088\u3046\u306bLLVM IR\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u304b\u300d\u3092\u6c7a\u3081\u305f\u898f\u683c\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u65b0\u3057\u3044\u8a00\u8a9e\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u306fLLVM IR\u304c\u5206\u304b\u308b\u4eba\u306a\u3089\u308f\u304b\u308a\u307e\u3059\u3002\nC++ Advent Calendar\u52e2\u306a\u3089LLVM IR\u3068\u304b\u82f1\u8a9e\u3088\u308a\u8aad\u3081\u308b\u3068\u805e\u3044\u305f\u306e\u3067\u3001LLVM IR\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001Kalmar\u3067\u306f\u3001\u306a\u306b\u3082\u3057\u306a\u3044\u3068\u3001SPIR\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\uff08\u306a\u305c\u306a\u3089\u305d\u3063\u3061\u306e\u65b9\u304c\u52b9\u7387\u304c\u3044\u3044\u304b\u3089\u3067\u3059\uff09\u3002\n\u5148\u306bOpenCL C\u3067\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u306f\nunset CLAMP_NOSPIR\n\n\u3068\u3059\u308c\u3070SPIR\u3067\u4f5c\u308b\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\n\u77e5\u3063\u3066\u306e\u901a\u308aLLVM IR\u306b\u306f\u30d0\u30a4\u30ca\u30ea\u8868\u73fe(bitcode)\u3068\u3001\u53ef\u8aad\u306a\u6587\u5b57\u5217\u8868\u73fe(human-readable)\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002Kalmar\u306fbitcode\u3092\u5410\u304f\u3089\u3057\u304f\u3001\u5148\u306e\u901a\u308a\u666e\u901a\u306b\nstd::cout << source << std::endl;\n\n\u3068\u3059\u308b\u3068\u3001\u300cBC\u306a\u3093\u3061\u3083\u3089\u304b\u3093\u3061\u3083\u3089\u300d\u3068\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u306eBC\u306a\u3093\u3061\u3083\u3089\u306fLLRM IR bitcode format\u306e\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3067\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066.bc\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5410\u304d\u51fa\u3057\u3066\u304b\u3089\u3001\n{\n    std::ofstream ofs(\"spir.bc\", std::ios::out|std::ios::binary|std::ios::trunc);\n    for(int i = 0; i < size; i++)\n    {\n            ofs << source[i];\n    }\n}\n\nllvm-dis\u3067.ll\u306b\u5909\u63db\u3059\u308b\u3068\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nllvm-dis spir.bc\n# \u3053\u308c\u3067\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306bspir.ll\u304c\u751f\u6210\u3055\u308c\u308b\n\n\u5148\u306e\u30d9\u30af\u30c8\u30eb\u52a0\u7b97\u306eLLVM IR\u306f\n; Function Attrs: nounwind uwtable\ndefine spir_kernel void @ZZ4mainEN3_EC__119__cxxamp_trampolineEPiiiiiiiiS0_iiiiiiiS0_iiiiiii(i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32, i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32, i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32) #5 align 2 {\n  %25 = tail call i64 @amp_get_global_id(i32 0) #6\n  %sext = shl i64 %25, 32\n  %26 = ashr exact i64 %sext, 32\n  %27 = sext i32 %7 to i64\n  %28 = sext i32 %5 to i64\n  %.sum.i.i3.i = add nsw i64 %27, %28\n  %.sum1.i.i4.i = add nsw i64 %.sum.i.i3.i, %26\n  %29 = getelementptr inbounds i32 addrspace(1)* %0, i64 %.sum1.i.i4.i\n  %30 = load i32 addrspace(1)* %29, align 4, !tbaa !8\n  %31 = sext i32 %15 to i64\n  %32 = sext i32 %13 to i64\n  %.sum.i.i1.i = add nsw i64 %31, %32\n  %.sum1.i.i2.i = add nsw i64 %.sum.i.i1.i, %26\n  %33 = getelementptr inbounds i32 addrspace(1)* %8, i64 %.sum1.i.i2.i\n  %34 = load i32 addrspace(1)* %33, align 4, !tbaa !8\n  %35 = add nsw i32 %34, %30\n  %36 = sext i32 %23 to i64\n  %37 = sext i32 %21 to i64\n  %.sum.i.i.i = add nsw i64 %36, %37\n  %.sum1.i.i.i = add nsw i64 %.sum.i.i.i, %26\n  %38 = getelementptr inbounds i32 addrspace(1)* %16, i64 %.sum1.i.i.i\n  store i32 %35, i32 addrspace(1)* %38, align 4, !tbaa !8\n  ret void\n}\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3002\u3084\u3063\u3071\u308a\u3088\u304f\u5206\u304b\u3089\u3093\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u3057\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u30fb\u30fb\u30fb\u3002\n\u3046\u30fc\u3093\uff1f\n\nOpenCL C\u2192SPIR(LLVM IR)\n\u666e\u901a\u306eOpenCL C\u3082\u3001\u3082\u3061\u308d\u3093SPIR\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u3001\u5b9f\u969b\u306b\u666e\u901a\u306eOpenCL\u3060\u3068\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08\u3082\u306f\u3084C++\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\uff09\u3002\nOpenCL C\u3092SPIR\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u7279\u6b8a\u306aclang\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u300cOpenCL C\u306fLLVM\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3061\u3089\u3063\u3068\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3064\u307e\u308a\u306f\u3053\u308c\u3067\u3059\u3002\nclang\u672c\u6d41\u306b\u306f\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u306a\u3044\u3089\u3057\u3044\u3067\u3059\uff08SPIR-V\u306e\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u305f\u3076\u3093\u53d6\u308a\u8fbc\u307e\u308c\u308b\u4e88\u5b9a\u3082\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u306d\uff09\u3002\n\u4f7f\u3044\u65b9\u306fREADME\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\n# LLVM3.2\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwget http://www.llvm.org/releases/3.2/llvm-3.2.src.tar.gz\ntar xf llvm-3.2.src.tar.gz\n\n# SPIR(1.2)\u5411\u3051clang\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\ncd llvm-3.2.src/tools\nwget https://github.com/KhronosGroup/SPIR/archive/spir_12.zip\nunzip spir_12.zip\nmv spir_12 clang\n\n# \u30d3\u30eb\u30c9\ncd ../../\nmkdir build\nmkdir install\ncd build -DCMAKE_INSTALL_PREFIX=/INTALL/PATH\ncmake ..\nmake\nmake install\n\n\u3053\u308c\u3067/INTALL/PATH\u306e\u4e2d\u306b\u4e00\u5f0f\u5165\u308a\u307e\u3059\u3002\u3042\u3068\u306f\nexport PATH=/INTALL/PATH:${PATH}\n\n\u3057\u3066\u3001\u8a66\u3057\u306bclang --version\u306a\u3069\u3057\u3066\u307f\u308b\u3068\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u304c3.2\u306b\u306a\u3063\u3066\u3044\u305f\u3089\u304a\u305d\u3089\u304f\u6210\u529f\u3067\u3059\uff08\u3069\u3046\u305b\u306a\u3089Kalmar\u307f\u305f\u3044\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u540d\u3082\u5909\u3048\u3066\u307b\u3057\u304b\u3063\u305f\u306a\uff09\u3002\n\u3042\u3068\u306f\u3001\nkernel void VectorAdd(\n    global int dst[],\n    global const int left[],\n    global const int right[])\n{\n    const int i = get_global_id(0);\n    dst[i] = left[i] + right[i];\n}\n\n\u307f\u305f\u3044\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306bocl.cl\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u4fdd\u5b58\u3057\u3066\u3001\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\nwget https://raw.githubusercontent.com/KhronosGroup/SPIR-Tools/master/headers/opencl_spir.h\n\n\u3067opencl_spir.h\u3092\u6301\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u3066\nclang -cc1 -emit-llvm-bc -triple spir64-unknown-unknown -cl-spir-compile-options \"\" -include opencl_spir.h ocl.cl\n\n\u3068\u3059\u308b\u3068\u3001LLVM IR bitcode\u3067\u3042\u308bocl.bc\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002bitcode\u306f\u8aad\u3081\u306a\u3044\u306e\u3067\u524d\u3068\u540c\u3058\u3088\u3046\u306b\nllvm-dis ocl.bc\n\n\u3068\u3059\u308c\u3070\u3001\u4eba\u9593\u304c\u8aad\u3081\u308bLLM IR(ocl.ll)\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\uff01\n\u8997\u3044\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\ndefine cc76 void @VectorAdd(i32 addrspace(1)* nocapture %dst, i32 addrspace(1)* nocapture %left, i32 addrspace(1)* nocapture %right) nounwind {\nentry:\n  %call = tail call cc75 i64 @_Z13get_global_idj(i32 0) nounwind readnone\n  %sext = shl i64 %call, 32\n  %idxprom = ashr exact i64 %sext, 32\n  %arrayidx = getelementptr inbounds i32 addrspace(1)* %left, i64 %idxprom\n  %0 = load i32 addrspace(1)* %arrayidx, align 4, !tbaa !9\n  %arrayidx2 = getelementptr inbounds i32 addrspace(1)* %right, i64 %idxprom\n  %1 = load i32 addrspace(1)* %arrayidx2, align 4, !tbaa !9\n  %add = add nsw i32 %1, %0\n  %arrayidx4 = getelementptr inbounds i32 addrspace(1)* %dst, i64 %idxprom\n  store i32 %add, i32 addrspace(1)* %arrayidx4, align 4, !tbaa !9\n  ret void\n}\n\nC++ AMP\u7248\u3068\u6bd4\u3079\u3066\u3001\u5909\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u304b\u5225\u306b\u306a\u3044\u306e\u3067\u7d20\u76f4\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u307e\u3059\u306d\u3002\n\nSPIR(LLVM IR)\u2192OpenCL\u30d0\u30a4\u30ca\u30ea\nOpenCL 1.2\u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3001\u3053\u306eSPIR bitcode\u3092\u4f7f\u3063\u3066OpenCL\u30d3\u30eb\u30c9\u3082\u3067\u304d\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u6b63\u78ba\u306b\u8a00\u3046\u3068\u3001SPIR(LLVM IR)\u3092OpenCL\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f7f\u3044\u65b9\u306f\u3001\n\n\u901a\u5e38\u306fclCreateProgramWithSource\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u3092\u3001*.bc\u3092\u666e\u901a\u306b\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u3080\uff06\u76f8\u5f53\u3059\u308bbitcode\u3092\u4f5c\u3063\u3066\u304b\u3089\u3001clCreateProgramWithBinary\u306b\u5165\u529b\u3059\u308b\u3002\nclBuildProgram\u3067\u306e\u30d3\u30eb\u30c9\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\"\u2013x spir -spir-std=1.2\"\u3092\u8ffd\u52a0\u3059\u308b\n\u4ed6\u306e\u4f7f\u3044\u65b9\u306f\u540c\u3058\n\n\u306a\u306e\u3067\u3001OpenCL C\u3058\u3083\u306a\u3044\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u81ea\u5206\u3067\u4f5c\u308c\u3070\u3001\u305d\u306eSPIR(LLVM IR)\u3092\u305d\u306e\u307e\u307eOpenCL\u306e\u30ab\u30fc\u30cd\u30eb\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\nOpenCL 2.1\u3068SPIR-V\n\u4ee5\u4e0a\u3001\u3053\u3053\u307e\u3067\u306f\u73fe\u884c\u306eOpenCL 2.0\u4e16\u4ee3\u306e\u304a\u8a71\u3067\u3057\u305f\u3002\n\u6700\u5f8c\u306b\u3001OpenCL 2.1\u306e\u8a71\u3092\u66f8\u3044\u3066\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\u5b9f\u306f\u3001\u73fe\u5728\u306f\u65e2\u306b\u6b21\u898f\u683c\u3067\u3042\u308bOpenCL 2.1\u304c\u3001\u3064\u3044\u534a\u5e74\u524d\u306b\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3070\u304b\u308a\u3067\u3059\u3002\u305f\u3060\u3057\u4eca\u65e5\u73fe\u5728\u3067\u306f\u3001\u307e\u3060OpenCL 2.1\u3092\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u7cfb\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u30fb\u30fb\u30fb\u3002\u305f\u3060\u3001AMD\u30fbIntel\u30fbARM\u7b49OpenCL\u306e\u4e3b\u529b\u52e2\uff08\uff1f\uff09\u306f2.1\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u8868\u660e\u3057\u3066\u3044\u308b\u306e\u30672.1\u3082\u5f15\u304d\u7d9a\u304d\u4f7f\u3048\u308b\u3082\u306e\u306b\u306a\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\nOpenCL 2.0\u304b\u30892.1\u306e\u5909\u66f4\u70b9\n\u5927\u304d\u304f\u306f\u6b21\u306e4\u70b9\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f\n\n\u300c\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u300d\u304c\u3067\u304d\u305f\n\n\n\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u3068\u3044\u3046\u306e\u306f\u3001\u30ef\u30fc\u30af\u30a2\u30a4\u30c6\u30e0\u3068\u30ef\u30fc\u30af\u30b0\u30eb\u30fc\u30d7\u306e\u4e2d\u9593\u306b\u3042\u308b\u3088\u3046\u306a\u3082\u306e\u30021\u3064\u306e\u30ef\u30fc\u30af\u30b0\u30eb\u30fc\u30d7\u3092\u66f4\u306b\u5206\u5272\u3057\u305f\u3082\u306e\u3068\u3082\u8a00\u3048\u308b\u3002\n\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u540c\u671f\u3092\u53d6\u3063\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\nOpenCL C\u304b\u3089\u3001OpenCL C++\u306b\u306a\u3063\u305f\n\n\nOpenCL C++\u306f\u3001C++14\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3002\u30db\u30b9\u30c8\u3068\u5171\u901a\u30d8\u30c3\u30c0\u3092\u4f7f\u3048\u305f\u308a\u3001\u968f\u5206\u3068\u66f8\u304d\u3084\u3059\u304f\u306a\u3063\u305f\u3002\nOpenCL C\u3082\u4f7f\u3048\u306a\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\u5f8c\u8ff0\u306eSPIR-V\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306f\u5272\u3068\u4f55\u3067\u3082\u826f\u304f\u306a\u3063\u305f\u304b\u3089C++\u306b\u306a\u3063\u305f\u306e\u3060\u3068\u601d\u3046\u3002\n\n\n\u30c7\u30d0\u30a4\u30b9\uff08\u3068\u30db\u30b9\u30c8\uff09\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n\n\n\u6642\u9593\u8a08\u6e2c\u3068\u304b\u306b\u4f7f\u3048\u308b\u30fb\u30fb\u30fb\u3082\u306e\u3060\u3068\u601d\u3046\u3002\n\n\nSPIR-V\u3068\u3044\u3046\u4e2d\u9593\u8868\u73fe\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\n\n\n\u5148\u8ff0\u306e\u901a\u308a\u65e2\u306bSPIR 1.2\u306e\u6642\u70b9\u3067cl_khr_spir\u3068\u3044\u3046\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u3063\u305f\u304c\u3001\u305d\u308c\u304c\u62e1\u5f35\u6a5f\u80fd\u3067\u306f\u306a\u304f\u306a\u3063\u305f\u3002\nSPIR-V\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308bAPI\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\nSPIR 1.2\u306e\u6642\u306fLLVM IR\u3060\u3063\u305f\u304c\u3001SPIR-V\u306f\u5b8c\u5168\u306bLLVM\u3068\u306f\u7121\u95a2\u4fc2\u306b\u306a\u3063\u305f\u3002\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\u3002\n\n\n\nC++er\u7684\u306b\u306f\u30012.1\u306b\u306a\u308b\u3068OpenCL C\u3067\u306f\u306a\u304fOpenCL C++\u306b\u306a\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u5074\u306e\u30b3\u30fc\u30c9\u306bC++\u304c\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3044\u3046\u5927\u304d\u306a\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\uff01\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30db\u30b9\u30c8\u5074\u3092C++\u3067\u66f8\u3044\u3066\u3044\u308b\u3051\u3069\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u69cb\u9020\u4f53\u5b9a\u7fa9\u3068\u5225\u30d5\u30a1\u30a4\u30eb\u306b\u30fb\u30fb\u30fb\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u306a\u304f\u3066\u3082\u3001\u30db\u30b9\u30c8\u30fb\u30ab\u30fc\u30cd\u30eb\u4e21\u65b9\u304b\u3089\u540c\u3058C++\u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3068\u3044\u3063\u3066\u3082\u3001\u5148\u8ff0\u306e\u901a\u308a\u307e\u3060\u52d5\u304b\u3059\u74b0\u5883\u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u5b09\u3057\u3044\u3053\u3068\u304b\u306f\u3061\u3087\u3063\u3068\u65ad\u8a00\u3067\u304d\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u305d\u306e\u3046\u3061AMD\u3068\u304b\u304c\u5b9f\u88c5\u3092\u51fa\u3057\u305f\u6642\u306b\u306fboost\u52c9\u5f37\u4f1a\u3042\u305f\u308a\u3067\u8a71\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nSPIR-V\nSPIR-V\u306f\u3001SPIR1.2\u306e\u6b21\u306e\u898f\u683c\u3067\u3059\u3002\u5148\u8ff0\u306e\u901a\u308a\u3001SPIR-V\u3067\u306f\u3001LLVM\u306f\u7121\u95a2\u4fc2\u3067\u5b8c\u5168\u306b\u72ec\u81ea\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u73fe\u6642\u70b9\uff08\uff1f\uff09\u3067\u306f\u3001OpenCL C2.1\u3068OpenGL GLSL4.5\u3001\u304a\u3088\u3073Vulkan\u304c\u3001SPIR-V\u3092\u4f7f\u3046\u4e88\u5b9a\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Khronos\u3068\u3057\u3066\u306f\n\n\u9ad8\u30ec\u30a4\u30e4\u30fc\n\n\nOpenCL (OpenCL C)\nOpenGL (GLSL)\nOpenGL ES (ESSL)\n\u3068\u304b\u8272\u3005\n\n\n\u2191\u5168\u90e8\u304c\u3001\u540c\u3058\u4e2d\u9593\u8868\u73fe(SPIR-V)\u3067\u8a18\u8ff0\u3055\u308c\u308b\n\u4e2d\u9593\u30ec\u30a4\u30e4\u30fc\n\n\nVulkan\n\n\n\u4f4e\u30ec\u30a4\u30e4\u30fc\n\n\n\u5404\u30c7\u30d0\u30a4\u30b9\u3054\u3068\u306e\u30c9\u30e9\u30a4\u30d0\uff08Vulkan\u3092\u98db\u3070\u3057\u3066\u3001\u76f4\u63a5SPIR-V\u3092\u98df\u3079\u3066\u3082\u826f\u3044\u3063\u307d\u3044\uff09\n\n\n\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u3057\u305f\u3044\u3063\u307d\u3044\u3067\u3059\uff08\u203bSYCL\u306f\u3069\u3053\u884c\u3063\u305f\uff1f\uff09\u3002\nWhitepaper\u306epp. 5-6\u3042\u305f\u308a\u306b\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\nLLVM IR\u3088\u308a\u3082\u3063\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u5bc4\u308a\u306b\u898b\u3048\u307e\u3059\u3002\u304c\u3001\u6240\u8a6eIR\u306a\u306e\u3067\u305f\u3076\u3093\u5bfe\u5fdc\u4ed8\u3051\u306f\u7c21\u5358\u305d\u3046\u306a\u5370\u8c61\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u3001LLVM IR\u304b\u3089SPIR-V\u3078\u306e\u7ffb\u8a33\u6a5f\u3082\u958b\u767a\u4e2d\u3060\u3068\u5642\u3067\u805e\u304d\u307e\u3057\u305f\uff08\u6b8b\u5ff5\u306a\u304c\u3089\u660e\u78ba\u306a\u30bd\u30fc\u30b9\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u77e5\u3063\u3066\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n\n\u307e\u3068\u3081\n\u500b\u4eba\u7684\u306b\u306f\u3001C++AMP\u3067\u3082CUDA\u3067\u3082OpenCL\u3067\u3082\u3044\u3044\u304b\u3089\u3001\u305d\u308d\u305d\u308d\u3069\u308c\u304b\u306b\u7d71\u4e00\u3057\u3066\u6b32\u3057\u3044\u306e\u3067\u3001\u5c11\u306a\u304f\u3068\u3082\u4e2d\u9593\u8868\u73fe\u304cSPIR-V\u3067\u7d71\u4e00\u3055\u308c\u308b\u672a\u6765\u304c\u304f\u308b\u3068\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u660e\u65e5\u306eC++ Advent Calendar\u306fegtra\u3055\u3093\u306b\u3088\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u306e\u8a71\u3060\u305d\u3046\u3067\u3059\u3002\u697d\u3057\u307f\u3067\u3059\u306d\uff01\n\u3053\u306e\u8a18\u4e8b\u306f[C++ Advent Calendar 2015](http://www.adventar.org/calendars/926)\u306e6\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u8a71\u984c\u306f\u3001[3\u65e5\u76ee\u306eRiyaaaaa\u3055\u3093\u306e\u8a18\u4e8b](http://qiita.com/Riyaaaa_a/items/40054b893e70b54f5a26)\u3092\u898b\u305f\u3068\u3042\u308b\u4eba\u306b\u300c\u304a\u524d\u3082C++AMPer\u306a\u3089C++AMP\u306e\u8a18\u4e8b\u66f8\u3051\u3088\uff01\uff01\u300d\u3063\u3066\u717d\u3089\u308c\u305f\u306e\u3067\u3001\u6025\u907d\u5909\u66f4\u3057\u3066\u3001C++AMP\u306e\u30cd\u30bf\u306b\u3057\u307e\u3059\u3002\n\u5143\u3005\u306e\u4e88\u5b9a\u3060\u3063\u305f\u300eC++11\u306b\u306a\u305cmake_unique\u304c\u306a\u3044\u306e\u304b\u300f\u306b\u3064\u3044\u3066\u306f[\u5225\u8a18\u4e8b](http://qiita.com/aokomoriuta/items/4fde35bba3beb82de51f)\u306b\u3001\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3068\u95a2\u4fc2\u306a\u3044\u8a18\u4e8b\u3068\u3057\u3066\u6295\u7a3f\u3057\u305f\u306e\u3067\u3001\u305d\u3063\u3061\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u67d0\u6240\u3067\u65e2\u306b\u767a\u8868\u6e08\u307f\u306e\u5185\u5bb9\u3092\uff08\u307b\u307c\uff09\u305d\u306e\u307e\u307e\u6301\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u8aad\u3093\u3060\u3053\u3068\u3042\u308b\u4eba\u3044\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\n----\n\n\u304a\u984c\u306f\u3001C++AMP\u3068OpenCL C\u3068SPIR(1.2)\u306e\u4e3b\u306b\u76f8\u4e92\u5909\u63db\u306b\u3064\u3044\u3066\u3067\u3059\uff08\uff0bOpenCL 2.1\u3068SPIR-V\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7d39\u4ecb\uff09\u3002\n\nC++AMP\u306b\u3064\u3044\u3066\u306f\u3001\u5148\u8ff0\u306eRyaaaa\u3055\u3093\u306e\u8a18\u4e8b\u304b\u3001[\u968f\u5206\u524d\u306b\u6295\u7a3f\u3057\u305f\u79c1\u306e\u8a18\u4e8b](http://qiita.com/aokomoriuta/items/6adbcb9372354bc2df77)\u3082\u5408\u308f\u305b\u3066\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002\n\n## C++AMP\u2192OpenCL C\n\n[Kalmar](https://bitbucket.org/multicoreware/cppamp-driver-ng/)\u3092\u4f7f\u3046\u3068C++ AMP\u304b\u3089OpenCL C\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\nKalmar\u306e\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u5148\u8ff0\u306e\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u305f\u3060\u3001Kalmar\u3092\u4f7f\u3046\u3068\u8a00\u3063\u3066\u3082\u666e\u901a\u306b\u4f7f\u3046\u3060\u3051\u3060\u3068OpenCL C\u306e\u30b3\u30fc\u30c9\u306f\u51fa\u3066\u3053\u306a\u3044\u306e\u3067\u3001Kalmar\u3092\u4fee\u6b63\u3057\u3066\u81ea\u529b\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001[mcwamp_opencl.cpp\u306e337\u884c\u76ee\u4ed8\u8fd1](https://bitbucket.org/multicoreware/cppamp-driver-ng/src/master/lib/opencl/mcwamp_opencl.cpp#mcwamp_opencl.cpp-337)\u3067\u3001\n\n```cpp\nstd::cout << source << std::endl;\n```\n\n\u3057\u3066\u3084\u3063\u3066\u304b\u3089\u3001\u30d3\u30eb\u30c9\u3059\u308c\u3070\u3001\u5b9f\u884c\u6642\u306b\uff08\u203bOpenCL C\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u306e\u3067\uff09OpenCL C\u306e\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u6642\n\n```\nexport CLAMP_RUNTIME=CL\nexport CLAMP_NOSPIR=1\n```\n\n\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001SPIR (LLVM IR bitcode)\u304c\u5410\u304b\u308c\u308b\u306e\u3067BC\u306a\u3093\u3061\u3083\u3089\u3068\u3044\u3046\u610f\u5473\u4e0d\u660e\u306a\u306e\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nSPIR\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n\n\u3068\u3082\u304b\u304f\u3053\u308c\u3067OpenCL C\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u8a66\u3057\u306b\u5358\u7d14\u306a\u8db3\u3057\u7b97\n\n```cpp\nconcurrency::parallel_for_each(\n\taa.get_extent(),\n\t[aa, bb, &cc] (const concurrency::index<1> idx) restrict(amp)\n\t{\n\t\tconst int i = idx[0];\n\t\tcc[i] = aa[i] + bb[i];\n\t});\n```\n\n\u3092\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3068\u3001\u7d50\u679c\u3001\u8272\u3005\u51fa\u3066\u304f\u308b\u3093\u3067\u3059\u304c\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u304c\n\n```c\n__kernel void ZZ4mainEN3_EC__119__cxxamp_trampolineEPiiiiiiiiS0_iiiiiiiS0_iiiiiii( __global unsigned int *llvm_cbe_tmp__1, unsigned int llvm_cbe_tmp__2, unsigned int llvm_cbe_tmp__3, unsigned int llvm_cbe_tmp__4, unsigned int llvm_cbe_tmp__5, unsigned int llvm_cbe_tmp__6, unsigned int llvm_cbe_tmp__7, unsigned int llvm_cbe_tmp__8,  __global unsigned int *llvm_cbe_tmp__9, unsigned int llvm_cbe_tmp__10, unsigned int llvm_cbe_tmp__11, unsigned int llvm_cbe_tmp__12, unsigned int llvm_cbe_tmp__13, unsigned int llvm_cbe_tmp__14, unsigned int llvm_cbe_tmp__15, unsigned int llvm_cbe_tmp__16,  __global unsigned int *llvm_cbe_tmp__17, unsigned int llvm_cbe_tmp__18, unsigned int llvm_cbe_tmp__19, unsigned int llvm_cbe_tmp__20, unsigned int llvm_cbe_tmp__21, unsigned int llvm_cbe_tmp__22, unsigned int llvm_cbe_tmp__23, unsigned int llvm_cbe_tmp__24) {\n  unsigned long llvm_cbe_tmp__25;\n  unsigned long llvm_cbe_tmp__26;\n  unsigned int llvm_cbe_tmp__27;\n  unsigned int llvm_cbe_tmp__28;\n\n  llvm_cbe_tmp__25 =  /*tail*/ amp_get_global_id(0u);\n  llvm_cbe_tmp__26 = ((signed long )(((signed long )(llvm_cbe_tmp__25 << 32ul)) >> ((signed long )32ul)));\n  llvm_cbe_tmp__27 = *((&llvm_cbe_tmp__1[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__8))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__6))))))) + ((unsigned long )llvm_cbe_tmp__26)))))]));\n  llvm_cbe_tmp__28 = *((&llvm_cbe_tmp__9[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__16))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__14))))))) + ((unsigned long )llvm_cbe_tmp__26)))))]));\n  *((&llvm_cbe_tmp__17[((signed long )(((unsigned long )(((unsigned long )(((unsigned long )(((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__24))) + ((unsigned long )(((signed long )(signed int )llvm_cbe_tmp__22))))))) + ((unsigned long )llvm_cbe_tmp__26)))))])) = (((unsigned int )(((unsigned int )llvm_cbe_tmp__28) + ((unsigned int )llvm_cbe_tmp__27))));\n  return;\n}\n```\n\n\u3068\u3044\u3046\u306e\u304c\u6700\u5f8c\u306e\u65b9\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3067\u3059\u3002\n\u3067\u3082\u3001LLVM\u3063\u307d\u3044\u306e\u306f\u3068\u3082\u304b\u304f\u3001\u306a\u3093\u3060\u3053\u308c\u3063\u3066\u611f\u3058\u3067\u3059\u30fb\u30fb\u30fb\u3002\u5927\u91cf\u306e\u30ad\u30e3\u30b9\u30c8\u30fb\u30fb\u30fb\uff1f\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u30ad\u30e3\u30b9\u30c8\u3092\u6d88\u3057\u305f\u308a\u5909\u6570\u540d\u3092\u5909\u3048\u305f\u308a\u3057\u3066\u307f\u308b\u3068\u3001\u3053\u3093\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c\n__kernel void func(\n  __global unsigned int *src1, unsigned int unused2,  unsigned int unused3,  unsigned int unused4,  unsigned int unused5,  unsigned int rightOffset1, unsigned int unused7,  unsigned int rightOffset0,\n  __global unsigned int *src2, unsigned int unused10, unsigned int unused11, unsigned int unused12, unsigned int unused13, unsigned int leftOffset1,  unsigned int unused15, unsigned int leftOffset0,\n  __global unsigned int *dst,  unsigned int unused18, unsigned int unused19, unsigned int unused20, unsigned int unused21, unsigned int dstOffset1,   unsigned int unused23, unsigned int dstOffset0)\n{\n  unsigned long index = get_global_id(0);\n  unsigned int right = src1[rightOffset0 + rightOffset1 + index];\n  unsigned int left  = src2[leftOffset0  + leftOffset1  + index];\n  dst[dstOffset0 + dstOffset1 + index] = left + right;\n  return;\n}\n```\n\n\u306a\u3093\u304b\u4f59\u8a08\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u5165\u3063\u3066\u307e\u3059\u306d\u30fb\u30fb\u30fb\u3002\u3042\u3068\u672a\u4f7f\u7528\u5f15\u6570\u591a\u3059\u304e\u3067\u3059\u3002\n\n\u307e\u3041\u3068\u3082\u304b\u304fOpenCL C\u306b\u5909\u63db\u306f\u3067\u304d\u307e\u3057\u305f\u3002OpenCL C\u66f8\u304b\u306a\u304f\u3066\u3082\u3082\u3063\u3068\u624b\u8efd\u306bOpenCL C\u304c\u624b\u306b\u5165\u308b\u306e\u306f\u4fbf\u5229\uff08\uff1f\uff09\u3002\n\n\u305f\u3060\u3057\u3001\n\n```cpp\nstruct Vector4\n{\npublic:\n        alignas(32) double data[4];\n\n        Vector4() restrict(amp)\n        {\n                data[0] = 0;\n                data[1] = 0;\n                data[2] = 0;\n                data[3] = 0;\n        };\n};\n\nconcurrency::parallel_for_each(\n\tx.get_extent(),\n\t[f, &x, &v, dt, m](const concurrency::index<1> idx) restrict(amp)\n{\n\tconst int i = idx[0];\n\t// a = f/m\n\tVector4 a;\n\tfor (int j = 0; j < 4; j++)\n\t{\n\t\ta.data[j] = f[i].data[j] /m;\n\t}\n\n\t// x += v*dt + a*dt^2/2\n\tfor (int j = 0; j < 4; j++)\n\t{\n\t\tconst double dxv = v[i].data[j] * dt;\n\t\tconst double dxa = a.data[j] * dt*dt/2;\n\t\tconst double dx = dxv + dxa;\n\t\tx[i].data[j] += dx;\n\t}\n\n\t// v += a*dt\n\tfor (int j = 0; j < 4; j++)\n\t{\n\t\tconst double dv = a.data[j] * dt;\n\t\tv[i].data[j] += dv;\n\t}\n});\n```\n\n\u307f\u305f\u3044\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u898b\u3066\u307f\u308b\u3068\n\n```c\ndouble  __attribute__((vector_size(16 ))) llvm_cbe_tmp__31;\nllvm_cbe_tmp__31 = ((double  __attribute__((vector_size(16 ))) )/*UNDEF*/{});\n```\n\n\u3068\u3044\u3046OpenCL C\u3092\u5410\u3044\u3066\u3044\u3066\u3001double2\u306f{}\u3067\u521d\u671f\u5316\u3067\u304d\u306a\u3044\u3088\u3063\u3066\u8a00\u308f\u308c\u3066\u305f\u3002\n\u307e\u3041\u305d\u308a\u3083\u305d\u3046\u3068\u3044\u3046\u611f\u3058\u30fb\u30fb\u30fb\u3067\u3059\u3002{0}\u3063\u3066\u3059\u308c\u3070\u89e3\u6c7a\u3059\u308b\u306e\u306b\u3002\n\u3042\u3068\u3001\u306a\u305cdouble4\u3058\u3083\u306a\u304f\u3066double2\u306a\u3093\u3060\u308d\u3046\u30fb\u30fb\u30fb\uff08preferred vector size\u898b\u3066\u304f\u308c\u305f\u3093\u3067\u3059\u304b\u306d\uff1f\uff09\u3002\n\n\u3068\u8a00\u3063\u305f\u611f\u3058\u3067\u3061\u3087\u3063\u3068\u5fae\u5999\u306a\u7d50\u679c\u3067\u3059\u304c\u3001\u5148\u306b\u66f8\u3044\u305f\u901a\u308a\u6a19\u6e96\u3067\u306fOpenCL C\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\uff08\uff1f\uff09\u306b\u306f\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u4ed5\u65b9\u306a\u3044\u3067\u3059\u3002\n\u65e2\u5b9a\u306e\u52d5\u4f5c\u3067\u3042\u308bSPIR\u3067\u306f\u52d5\u3044\u305f\u306e\u3067\u3001SPIR\u306f\u3069\u3046\u306a\u3063\u3066\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## C++AMP\u2192SPIR(LLVM IR)\n\nSPIR\uff081.2\u307e\u3067\u3002SPIR-V\u3082\u3042\u308b\u304c\u5225\u7269\u3002\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\uff09\u306f\u3001LLVM\u30d9\u30fc\u30b9\u306e\u4e2d\u9593\u8868\u73fe\u3067\u3001\u305d\u306e\u5b9f\u614b\u306f\u300cOpenCL C\u3092\u3069\u306e\u3088\u3046\u306bLLVM IR\u3068\u5bfe\u5fdc\u3055\u305b\u308b\u304b\u300d\u3092\u6c7a\u3081\u305f\u898f\u683c\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u65b0\u3057\u3044\u8a00\u8a9e\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u306fLLVM IR\u304c\u5206\u304b\u308b\u4eba\u306a\u3089\u308f\u304b\u308a\u307e\u3059\u3002\nC++ Advent Calendar\u52e2\u306a\u3089LLVM IR\u3068\u304b\u82f1\u8a9e\u3088\u308a\u8aad\u3081\u308b\u3068\u805e\u3044\u305f\u306e\u3067\u3001LLVM IR\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\n\u3055\u3066\u3001Kalmar\u3067\u306f\u3001\u306a\u306b\u3082\u3057\u306a\u3044\u3068\u3001SPIR\u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\uff08\u306a\u305c\u306a\u3089\u305d\u3063\u3061\u306e\u65b9\u304c\u52b9\u7387\u304c\u3044\u3044\u304b\u3089\u3067\u3059\uff09\u3002\n\u5148\u306bOpenCL C\u3067\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u306f\n\n```\nunset CLAMP_NOSPIR\n```\n\n\u3068\u3059\u308c\u3070SPIR\u3067\u4f5c\u308b\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\n\n\u77e5\u3063\u3066\u306e\u901a\u308aLLVM IR\u306b\u306f\u30d0\u30a4\u30ca\u30ea\u8868\u73fe(bitcode)\u3068\u3001\u53ef\u8aad\u306a\u6587\u5b57\u5217\u8868\u73fe(human-readable)\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002Kalmar\u306fbitcode\u3092\u5410\u304f\u3089\u3057\u304f\u3001\u5148\u306e\u901a\u308a\u666e\u901a\u306b\n\n```cpp\nstd::cout << source << std::endl;\n```\n\n\u3068\u3059\u308b\u3068\u3001\u300cBC\u306a\u3093\u3061\u3083\u3089\u304b\u3093\u3061\u3083\u3089\u300d\u3068\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u306eBC\u306a\u3093\u3061\u3083\u3089\u306f[LLRM IR bitcode format\u306e\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc](http://llvm.org/docs/BitCodeFormat.html#magic-numbers)\u3067\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066.bc\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5410\u304d\u51fa\u3057\u3066\u304b\u3089\u3001\n\n```cpp\n{\n    std::ofstream ofs(\"spir.bc\", std::ios::out|std::ios::binary|std::ios::trunc);\n    for(int i = 0; i < size; i++)\n    {\n            ofs << source[i];\n    }\n}\n```\n\nllvm-dis\u3067.ll\u306b\u5909\u63db\u3059\u308b\u3068\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nllvm-dis spir.bc\n# \u3053\u308c\u3067\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306bspir.ll\u304c\u751f\u6210\u3055\u308c\u308b\n```\n\n\u5148\u306e\u30d9\u30af\u30c8\u30eb\u52a0\u7b97\u306eLLVM IR\u306f\n\n```llvm\n; Function Attrs: nounwind uwtable\ndefine spir_kernel void @ZZ4mainEN3_EC__119__cxxamp_trampolineEPiiiiiiiiS0_iiiiiiiS0_iiiiiii(i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32, i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32, i32 addrspace(1)*, i32, i32, i32, i32, i32, i32, i32) #5 align 2 {\n  %25 = tail call i64 @amp_get_global_id(i32 0) #6\n  %sext = shl i64 %25, 32\n  %26 = ashr exact i64 %sext, 32\n  %27 = sext i32 %7 to i64\n  %28 = sext i32 %5 to i64\n  %.sum.i.i3.i = add nsw i64 %27, %28\n  %.sum1.i.i4.i = add nsw i64 %.sum.i.i3.i, %26\n  %29 = getelementptr inbounds i32 addrspace(1)* %0, i64 %.sum1.i.i4.i\n  %30 = load i32 addrspace(1)* %29, align 4, !tbaa !8\n  %31 = sext i32 %15 to i64\n  %32 = sext i32 %13 to i64\n  %.sum.i.i1.i = add nsw i64 %31, %32\n  %.sum1.i.i2.i = add nsw i64 %.sum.i.i1.i, %26\n  %33 = getelementptr inbounds i32 addrspace(1)* %8, i64 %.sum1.i.i2.i\n  %34 = load i32 addrspace(1)* %33, align 4, !tbaa !8\n  %35 = add nsw i32 %34, %30\n  %36 = sext i32 %23 to i64\n  %37 = sext i32 %21 to i64\n  %.sum.i.i.i = add nsw i64 %36, %37\n  %.sum1.i.i.i = add nsw i64 %.sum.i.i.i, %26\n  %38 = getelementptr inbounds i32 addrspace(1)* %16, i64 %.sum1.i.i.i\n  store i32 %35, i32 addrspace(1)* %38, align 4, !tbaa !8\n  ret void\n}\n```\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3002\u3084\u3063\u3071\u308a\u3088\u304f\u5206\u304b\u3089\u3093\u30aa\u30d5\u30bb\u30c3\u30c8\u8a08\u7b97\u3057\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u30fb\u30fb\u30fb\u3002\n\u3046\u30fc\u3093\uff1f\n\n## OpenCL C\u2192SPIR(LLVM IR)\n\n\u666e\u901a\u306eOpenCL C\u3082\u3001\u3082\u3061\u308d\u3093SPIR\u306b\u5909\u63db\u3067\u304d\u308b\u306e\u3067\u3001\u5b9f\u969b\u306b\u666e\u901a\u306eOpenCL\u3060\u3068\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08\u3082\u306f\u3084C++\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\uff09\u3002\n\nOpenCL C\u3092SPIR\u306b\u5909\u63db\u3059\u308b\u306b\u306f[\u7279\u6b8a\u306aclang](https://github.com/KhronosGroup/SPIR)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u300cOpenCL C\u306fLLVM\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3061\u3089\u3063\u3068\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3064\u307e\u308a\u306f\u3053\u308c\u3067\u3059\u3002\nclang\u672c\u6d41\u306b\u306f\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u306a\u3044\u3089\u3057\u3044\u3067\u3059\uff08SPIR-V\u306e\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u305f\u3076\u3093\u53d6\u308a\u8fbc\u307e\u308c\u308b\u4e88\u5b9a\u3082\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u306d\uff09\u3002\n\n\u4f7f\u3044\u65b9\u306fREADME\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\n\n```\n# LLVM3.2\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwget http://www.llvm.org/releases/3.2/llvm-3.2.src.tar.gz\ntar xf llvm-3.2.src.tar.gz\n\n# SPIR(1.2)\u5411\u3051clang\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\ncd llvm-3.2.src/tools\nwget https://github.com/KhronosGroup/SPIR/archive/spir_12.zip\nunzip spir_12.zip\nmv spir_12 clang\n\n# \u30d3\u30eb\u30c9\ncd ../../\nmkdir build\nmkdir install\ncd build -DCMAKE_INSTALL_PREFIX=/INTALL/PATH\ncmake ..\nmake\nmake install\n```\n\n\u3053\u308c\u3067/INTALL/PATH\u306e\u4e2d\u306b\u4e00\u5f0f\u5165\u308a\u307e\u3059\u3002\u3042\u3068\u306f\n\n```\nexport PATH=/INTALL/PATH:${PATH}\n```\n\n\u3057\u3066\u3001\u8a66\u3057\u306bclang --version\u306a\u3069\u3057\u3066\u307f\u308b\u3068\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u304c3.2\u306b\u306a\u3063\u3066\u3044\u305f\u3089\u304a\u305d\u3089\u304f\u6210\u529f\u3067\u3059\uff08\u3069\u3046\u305b\u306a\u3089Kalmar\u307f\u305f\u3044\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u540d\u3082\u5909\u3048\u3066\u307b\u3057\u304b\u3063\u305f\u306a\uff09\u3002\n\n\u3042\u3068\u306f\u3001\n\n```c\nkernel void VectorAdd(\n\tglobal int dst[],\n\tglobal const int left[],\n\tglobal const int right[])\n{\n\tconst int i = get_global_id(0);\n\tdst[i] = left[i] + right[i];\n}\n```\n\n\u307f\u305f\u3044\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5f53\u306bocl.cl\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u4fdd\u5b58\u3057\u3066\u3001\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\n\n```\nwget https://raw.githubusercontent.com/KhronosGroup/SPIR-Tools/master/headers/opencl_spir.h\n```\n\n\u3067opencl_spir.h\u3092\u6301\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u3066\n\n```\nclang -cc1 -emit-llvm-bc -triple spir64-unknown-unknown -cl-spir-compile-options \"\" -include opencl_spir.h ocl.cl\n```\n\n\u3068\u3059\u308b\u3068\u3001LLVM IR bitcode\u3067\u3042\u308bocl.bc\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002bitcode\u306f\u8aad\u3081\u306a\u3044\u306e\u3067\u524d\u3068\u540c\u3058\u3088\u3046\u306b\n\n```\nllvm-dis ocl.bc\n```\n\n\u3068\u3059\u308c\u3070\u3001\u4eba\u9593\u304c\u8aad\u3081\u308bLLM IR(ocl.ll)\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\uff01\n\n\u8997\u3044\u3066\u307f\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```llvm\ndefine cc76 void @VectorAdd(i32 addrspace(1)* nocapture %dst, i32 addrspace(1)* nocapture %left, i32 addrspace(1)* nocapture %right) nounwind {\nentry:\n  %call = tail call cc75 i64 @_Z13get_global_idj(i32 0) nounwind readnone\n  %sext = shl i64 %call, 32\n  %idxprom = ashr exact i64 %sext, 32\n  %arrayidx = getelementptr inbounds i32 addrspace(1)* %left, i64 %idxprom\n  %0 = load i32 addrspace(1)* %arrayidx, align 4, !tbaa !9\n  %arrayidx2 = getelementptr inbounds i32 addrspace(1)* %right, i64 %idxprom\n  %1 = load i32 addrspace(1)* %arrayidx2, align 4, !tbaa !9\n  %add = add nsw i32 %1, %0\n  %arrayidx4 = getelementptr inbounds i32 addrspace(1)* %dst, i64 %idxprom\n  store i32 %add, i32 addrspace(1)* %arrayidx4, align 4, !tbaa !9\n  ret void\n}\n```\n\nC++ AMP\u7248\u3068\u6bd4\u3079\u3066\u3001\u5909\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u304b\u5225\u306b\u306a\u3044\u306e\u3067\u7d20\u76f4\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u307e\u3059\u306d\u3002\n\n## SPIR(LLVM IR)\u2192OpenCL\u30d0\u30a4\u30ca\u30ea\n\nOpenCL 1.2\u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3001\u3053\u306eSPIR bitcode\u3092\u4f7f\u3063\u3066OpenCL\u30d3\u30eb\u30c9\u3082\u3067\u304d\u307e\u3059\u3002\n\u3082\u3046\u5c11\u3057\u6b63\u78ba\u306b\u8a00\u3046\u3068\u3001SPIR(LLVM IR)\u3092OpenCL\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\u306f\u3001\n\n0. \u901a\u5e38\u306fclCreateProgramWithSource\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u3092\u3001*.bc\u3092\u666e\u901a\u306b\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u3080\uff06\u76f8\u5f53\u3059\u308bbitcode\u3092\u4f5c\u3063\u3066\u304b\u3089\u3001clCreateProgramWithBinary\u306b\u5165\u529b\u3059\u308b\u3002\n0. clBuildProgram\u3067\u306e\u30d3\u30eb\u30c9\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\"\u2013x spir -spir-std=1.2\"\u3092\u8ffd\u52a0\u3059\u308b\n0. \u4ed6\u306e\u4f7f\u3044\u65b9\u306f\u540c\u3058\n\n\u306a\u306e\u3067\u3001OpenCL C\u3058\u3083\u306a\u3044\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u81ea\u5206\u3067\u4f5c\u308c\u3070\u3001\u305d\u306eSPIR(LLVM IR)\u3092\u305d\u306e\u307e\u307eOpenCL\u306e\u30ab\u30fc\u30cd\u30eb\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n## OpenCL 2.1\u3068SPIR-V\n\n\u4ee5\u4e0a\u3001\u3053\u3053\u307e\u3067\u306f\u73fe\u884c\u306eOpenCL 2.0\u4e16\u4ee3\u306e\u304a\u8a71\u3067\u3057\u305f\u3002\n\u6700\u5f8c\u306b\u3001OpenCL 2.1\u306e\u8a71\u3092\u66f8\u3044\u3066\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\n\u5b9f\u306f\u3001\u73fe\u5728\u306f\u65e2\u306b\u6b21\u898f\u683c\u3067\u3042\u308bOpenCL 2.1\u304c\u3001[\u3064\u3044\u534a\u5e74\u524d\u306b\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3070\u304b\u308a](https://www.khronos.org/news/press/khronos-releases-opencl-2.1-and-spir-v-1.0-specifications-for-heterogeneous)\u3067\u3059\u3002\u305f\u3060\u3057\u4eca\u65e5\u73fe\u5728\u3067\u306f\u3001\u307e\u3060OpenCL 2.1\u3092\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u7cfb\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u30fb\u30fb\u30fb\u3002\u305f\u3060\u3001AMD\u30fbIntel\u30fbARM\u7b49OpenCL\u306e\u4e3b\u529b\u52e2\uff08\uff1f\uff09\u306f2.1\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u8868\u660e\u3057\u3066\u3044\u308b\u306e\u30672.1\u3082\u5f15\u304d\u7d9a\u304d\u4f7f\u3048\u308b\u3082\u306e\u306b\u306a\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n### OpenCL 2.0\u304b\u30892.1\u306e\u5909\u66f4\u70b9\n\n\u5927\u304d\u304f\u306f\u6b21\u306e4\u70b9\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f\n\n* \u300c\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u300d\u304c\u3067\u304d\u305f\n    * \u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u3068\u3044\u3046\u306e\u306f\u3001\u30ef\u30fc\u30af\u30a2\u30a4\u30c6\u30e0\u3068\u30ef\u30fc\u30af\u30b0\u30eb\u30fc\u30d7\u306e\u4e2d\u9593\u306b\u3042\u308b\u3088\u3046\u306a\u3082\u306e\u30021\u3064\u306e\u30ef\u30fc\u30af\u30b0\u30eb\u30fc\u30d7\u3092\u66f4\u306b\u5206\u5272\u3057\u305f\u3082\u306e\u3068\u3082\u8a00\u3048\u308b\u3002\n    * \u30b5\u30d6\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u540c\u671f\u3092\u53d6\u3063\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n* OpenCL C\u304b\u3089\u3001OpenCL C++\u306b\u306a\u3063\u305f\n    * OpenCL C++\u306f\u3001C++14\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3002\u30db\u30b9\u30c8\u3068\u5171\u901a\u30d8\u30c3\u30c0\u3092\u4f7f\u3048\u305f\u308a\u3001\u968f\u5206\u3068\u66f8\u304d\u3084\u3059\u304f\u306a\u3063\u305f\u3002\n    * OpenCL C\u3082\u4f7f\u3048\u306a\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n    * \u5f8c\u8ff0\u306eSPIR-V\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306f\u5272\u3068\u4f55\u3067\u3082\u826f\u304f\u306a\u3063\u305f\u304b\u3089C++\u306b\u306a\u3063\u305f\u306e\u3060\u3068\u601d\u3046\u3002\n* \u30c7\u30d0\u30a4\u30b9\uff08\u3068\u30db\u30b9\u30c8\uff09\u306e\u30bf\u30a4\u30de\u30fc\u6642\u9593\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n    * \u6642\u9593\u8a08\u6e2c\u3068\u304b\u306b\u4f7f\u3048\u308b\u30fb\u30fb\u30fb\u3082\u306e\u3060\u3068\u601d\u3046\u3002\n* SPIR-V\u3068\u3044\u3046\u4e2d\u9593\u8868\u73fe\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\n    * \u5148\u8ff0\u306e\u901a\u308a\u65e2\u306bSPIR 1.2\u306e\u6642\u70b9\u3067cl_khr_spir\u3068\u3044\u3046\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u3063\u305f\u304c\u3001\u305d\u308c\u304c\u62e1\u5f35\u6a5f\u80fd\u3067\u306f\u306a\u304f\u306a\u3063\u305f\u3002\n    * SPIR-V\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308bAPI\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\n    * SPIR 1.2\u306e\u6642\u306fLLVM IR\u3060\u3063\u305f\u304c\u3001SPIR-V\u306f\u5b8c\u5168\u306bLLVM\u3068\u306f\u7121\u95a2\u4fc2\u306b\u306a\u3063\u305f\u3002\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\u3002\n\nC++er\u7684\u306b\u306f\u30012.1\u306b\u306a\u308b\u3068OpenCL C\u3067\u306f\u306a\u304fOpenCL C++\u306b\u306a\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u5074\u306e\u30b3\u30fc\u30c9\u306bC++\u304c\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3044\u3046\u5927\u304d\u306a\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\uff01\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30db\u30b9\u30c8\u5074\u3092C++\u3067\u66f8\u3044\u3066\u3044\u308b\u3051\u3069\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u69cb\u9020\u4f53\u5b9a\u7fa9\u3068\u5225\u30d5\u30a1\u30a4\u30eb\u306b\u30fb\u30fb\u30fb\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u306a\u304f\u3066\u3082\u3001\u30db\u30b9\u30c8\u30fb\u30ab\u30fc\u30cd\u30eb\u4e21\u65b9\u304b\u3089\u540c\u3058C++\u306e\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u305f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3068\u3044\u3063\u3066\u3082\u3001\u5148\u8ff0\u306e\u901a\u308a\u307e\u3060\u52d5\u304b\u3059\u74b0\u5883\u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u304c\u3069\u308c\u3060\u3051\u5b09\u3057\u3044\u3053\u3068\u304b\u306f\u3061\u3087\u3063\u3068\u65ad\u8a00\u3067\u304d\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u305d\u306e\u3046\u3061AMD\u3068\u304b\u304c\u5b9f\u88c5\u3092\u51fa\u3057\u305f\u6642\u306b\u306fboost\u52c9\u5f37\u4f1a\u3042\u305f\u308a\u3067\u8a71\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n### SPIR-V\n\nSPIR-V\u306f\u3001SPIR1.2\u306e\u6b21\u306e\u898f\u683c\u3067\u3059\u3002\u5148\u8ff0\u306e\u901a\u308a\u3001SPIR-V\u3067\u306f\u3001LLVM\u306f\u7121\u95a2\u4fc2\u3067\u5b8c\u5168\u306b\u72ec\u81ea\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u73fe\u6642\u70b9\uff08\uff1f\uff09\u3067\u306f\u3001OpenCL C2.1\u3068OpenGL GLSL4.5\u3001\u304a\u3088\u3073Vulkan\u304c\u3001SPIR-V\u3092\u4f7f\u3046\u4e88\u5b9a\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Khronos\u3068\u3057\u3066\u306f\n\n* \u9ad8\u30ec\u30a4\u30e4\u30fc\n    * OpenCL (OpenCL C)\n    * OpenGL (GLSL)\n    * OpenGL ES (ESSL)\n    * \u3068\u304b\u8272\u3005\n* \u2191\u5168\u90e8\u304c\u3001\u540c\u3058\u4e2d\u9593\u8868\u73fe(SPIR-V)\u3067\u8a18\u8ff0\u3055\u308c\u308b\n* \u4e2d\u9593\u30ec\u30a4\u30e4\u30fc\n    * Vulkan\n* \u4f4e\u30ec\u30a4\u30e4\u30fc\n    * \u5404\u30c7\u30d0\u30a4\u30b9\u3054\u3068\u306e\u30c9\u30e9\u30a4\u30d0\uff08Vulkan\u3092\u98db\u3070\u3057\u3066\u3001\u76f4\u63a5SPIR-V\u3092\u98df\u3079\u3066\u3082\u826f\u3044\u3063\u307d\u3044\uff09\n\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u306b\u3057\u305f\u3044\u3063\u307d\u3044\u3067\u3059\uff08\u203bSYCL\u306f\u3069\u3053\u884c\u3063\u305f\uff1f\uff09\u3002\n\n[Whitepaper](https://www.khronos.org/registry/spir-v/papers/WhitePaper.pdf)\u306epp. 5-6\u3042\u305f\u308a\u306b\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\nLLVM IR\u3088\u308a\u3082\u3063\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u5bc4\u308a\u306b\u898b\u3048\u307e\u3059\u3002\u304c\u3001\u6240\u8a6eIR\u306a\u306e\u3067\u305f\u3076\u3093\u5bfe\u5fdc\u4ed8\u3051\u306f\u7c21\u5358\u305d\u3046\u306a\u5370\u8c61\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u3001LLVM IR\u304b\u3089SPIR-V\u3078\u306e\u7ffb\u8a33\u6a5f\u3082\u958b\u767a\u4e2d\u3060\u3068\u5642\u3067\u805e\u304d\u307e\u3057\u305f\uff08\u6b8b\u5ff5\u306a\u304c\u3089\u660e\u78ba\u306a\u30bd\u30fc\u30b9\u306f\u898b\u3064\u3051\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u77e5\u3063\u3066\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n\n## \u307e\u3068\u3081\n\n\u500b\u4eba\u7684\u306b\u306f\u3001C++AMP\u3067\u3082CUDA\u3067\u3082OpenCL\u3067\u3082\u3044\u3044\u304b\u3089\u3001\u305d\u308d\u305d\u308d\u3069\u308c\u304b\u306b\u7d71\u4e00\u3057\u3066\u6b32\u3057\u3044\u306e\u3067\u3001\u5c11\u306a\u304f\u3068\u3082\u4e2d\u9593\u8868\u73fe\u304cSPIR-V\u3067\u7d71\u4e00\u3055\u308c\u308b\u672a\u6765\u304c\u304f\u308b\u3068\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\u3002\n\n---\n\u660e\u65e5\u306eC++ Advent Calendar\u306fegtra\u3055\u3093\u306b\u3088\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u306e\u8a71\u3060\u305d\u3046\u3067\u3059\u3002\u697d\u3057\u307f\u3067\u3059\u306d\uff01\n", "tags": ["GPGPU", "C++AMP", "OpenCL", "SPIR"]}