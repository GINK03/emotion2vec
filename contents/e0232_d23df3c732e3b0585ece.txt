{"context": " More than 1 year has passed since last update.\u7b2c\u4e00\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f(http://atnd.org/events/30285)\n\u306e\u554f\u984c\u3092Java\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u554f\u984c\u306eURL(http://nabetani.sakura.ne.jp/hena/1/)\n\u6240\u8981\u6642\u9593\u306f\u3001\u554f\u984c\u3092\u898b\u3066\u304b\u30891\u9031\u9593\u4ee5\u4e0a\u3001\n\u66f8\u304d\u59cb\u3081\u3066\u304b\u30891\u6642\u9593\u307b\u3069\u3067\u3059\u3002\n\nTickTackToe.java\npublic class TickTackToe {\n    private static final String DRAW_MESSAGE = \"Draw game.\";\n    private enum Player {\n        FIRST( \"o won.\", \"Foul : x won.\") {\n            @Override Player next() { return SECOND; }\n        },\n        SECOND( \"x won.\", \"Foul : o won.\" ) {\n            @Override Player next() { return FIRST; }\n        },\n        ;\n        Player( String won, String foul ) {\n            WON_MESSAGE = won;\n            FOUL_MESSAGE = foul;\n        }\n        private final String WON_MESSAGE;\n        private final String FOUL_MESSAGE;\n        abstract Player next();\n        String won() { return WON_MESSAGE; };\n        String foul() { return FOUL_MESSAGE; };\n    }\n\n    private static final int BOXES_MAX = 9;\n    private static final int[][] LINES = {\n        {0, 1, 2},\n        {3, 4, 5},\n        {6, 7, 8},\n        {0, 3, 6},\n        {1, 4, 7},\n        {2, 5, 8},\n        {0, 4, 8},\n        {2, 4, 6},\n    };\n\n    public String match( String process ) {\n        Player[] boxes = new Player[BOXES_MAX];\n        Player move = Player.FIRST;\n        int indexSize = process.length() < BOXES_MAX\n            ? process.length()\n            : BOXES_MAX;\n        for ( int i = 0; i < indexSize; i++ ) {\n            String result = put( process.charAt(i), move, boxes );\n            if ( result != null ) {\n                return result;\n            }\n            move = move.next();\n        }\n        return DRAW_MESSAGE;\n    }\n\n    private String put( char place, Player move, Player[] boxes ) {\n        int boxesIndex = place - '1';\n        if ( boxes[boxesIndex] != null ) {\n            return move.foul();\n        }\n        boxes[boxesIndex] = move;\n        for ( int[] line : LINES ) {\n            if ( isFullLine( move, line, boxes ) ) {\n                return move.won();\n            }\n        }\n        return null;\n    }\n\n    private boolean isFullLine( Player move, int[] line, Player[] boxes ) {\n        for ( int boxIndex : line ) {\n            if ( boxes[boxIndex] != move ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main( String[] args ) {\n    if ( args.length == 0 ) {\n        System.out.println( \"argument error.\" );\n        return;\n    }\n    TickTackToe ttt = new TickTackToe();\n    for ( String process : args ) {\n        System.out.println( ttt.match(process) );\n    }\n    }\n}\n\n\n\u7b2c\u4e00\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f(http://atnd.org/events/30285)\n\u306e\u554f\u984c\u3092Java\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u554f\u984c\u306eURL(http://nabetani.sakura.ne.jp/hena/1/)\n\u6240\u8981\u6642\u9593\u306f\u3001\u554f\u984c\u3092\u898b\u3066\u304b\u30891\u9031\u9593\u4ee5\u4e0a\u3001\n\u66f8\u304d\u59cb\u3081\u3066\u304b\u30891\u6642\u9593\u307b\u3069\u3067\u3059\u3002\n\n``` TickTackToe.java\npublic class TickTackToe {\n    private static final String DRAW_MESSAGE = \"Draw game.\";\n    private enum Player {\n        FIRST( \"o won.\", \"Foul : x won.\") {\n            @Override Player next() { return SECOND; }\n        },\n        SECOND( \"x won.\", \"Foul : o won.\" ) {\n            @Override Player next() { return FIRST; }\n        },\n        ;\n        Player( String won, String foul ) {\n            WON_MESSAGE = won;\n            FOUL_MESSAGE = foul;\n        }\n        private final String WON_MESSAGE;\n        private final String FOUL_MESSAGE;\n        abstract Player next();\n        String won() { return WON_MESSAGE; };\n        String foul() { return FOUL_MESSAGE; };\n    }\n\n    private static final int BOXES_MAX = 9;\n    private static final int[][] LINES = {\n        {0, 1, 2},\n        {3, 4, 5},\n        {6, 7, 8},\n        {0, 3, 6},\n        {1, 4, 7},\n        {2, 5, 8},\n        {0, 4, 8},\n        {2, 4, 6},\n    };\n\n    public String match( String process ) {\n        Player[] boxes = new Player[BOXES_MAX];\n        Player move = Player.FIRST;\n        int indexSize = process.length() < BOXES_MAX\n            ? process.length()\n            : BOXES_MAX;\n        for ( int i = 0; i < indexSize; i++ ) {\n            String result = put( process.charAt(i), move, boxes );\n            if ( result != null ) {\n                return result;\n            }\n            move = move.next();\n        }\n        return DRAW_MESSAGE;\n    }\n\n    private String put( char place, Player move, Player[] boxes ) {\n        int boxesIndex = place - '1';\n        if ( boxes[boxesIndex] != null ) {\n            return move.foul();\n        }\n        boxes[boxesIndex] = move;\n        for ( int[] line : LINES ) {\n            if ( isFullLine( move, line, boxes ) ) {\n                return move.won();\n            }\n        }\n        return null;\n    }\n\n    private boolean isFullLine( Player move, int[] line, Player[] boxes ) {\n        for ( int boxIndex : line ) {\n            if ( boxes[boxIndex] != move ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main( String[] args ) {\n\tif ( args.length == 0 ) {\n\t    System.out.println( \"argument error.\" );\n\t    return;\n\t}\n\tTickTackToe ttt = new TickTackToe();\n\tfor ( String process : args ) {\n\t    System.out.println( ttt.match(process) );\n\t}\n    }\n}\n```\n\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f"]}