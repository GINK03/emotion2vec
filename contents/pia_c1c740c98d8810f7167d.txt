{"context": "\n\n\u74b0\u5883\nAWS\u306eGPU\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7528\u3044\u308b\n\u30fb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7: g2.2xlarge\n\u30fbAMI ID: ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-20160627 (ami-2d39803a)\n\n\u30d9\u30fc\u30b9\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get update\n$ sudo apt-get install build-essential cmake pkg-config\n$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get -y install cmake git libgtk2.0-dev ocl-icd-opencl-dev\n$ python --version\nPython 2.7.6\n$ sudo apt-get install python-dev python-pip\n$ sudo apt-get install unzip\n$ pip install --upgrade pip --user\n$ pip install ipython pyzmq tornado --user\n$ pip install jsonschema --user\n$ pip install numpy matplotlib scipy --user\n\n\ncuda\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb\n$ sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb\n$ sudo apt-get update\n$ sudo apt-get install cuda\n$ echo 'export PATH=/usr/local/cuda-7.5/bin:$PATH' >> ~/.bashrc\n$ echo 'export LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source .bashrc\n$ sudo init 6\n$ cat /proc/driver/nvidia/version\nNVRM version: NVIDIA UNIX x86_64 Kernel Module  367.57  Mon Oct  3 20:37:01 PDT 2016\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) \n$ dpkg -l | grep nvidia\nii  nvidia-352                                367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-367\nii  nvidia-352-dev                            367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-367-dev\nii  nvidia-352-uvm                            352.39-0ubuntu1                                     amd64        Transitional package for nvidia-352\nii  nvidia-367                                367.57-0ubuntu0.14.04.1                             amd64        NVIDIA binary driver - version 367.57\nii  nvidia-367-dev                            367.57-0ubuntu0.14.04.1                             amd64        NVIDIA binary Xorg driver development files\nii  nvidia-modprobe                           352.39-0ubuntu1                                     amd64        Load the NVIDIA kernel driver and create device files\nii  nvidia-opencl-icd-352                     367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-opencl-icd-367\nii  nvidia-opencl-icd-367                     367.57-0ubuntu0.14.04.1                             amd64        NVIDIA OpenCL ICD\nii  nvidia-prime                              0.6.2                                               amd64        Tools to enable NVIDIA's Prime\nii  nvidia-settings                           352.39-0ubuntu1                                     amd64        Tool for configuring the NVIDIA graphics driver\n\n\ncudnn\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\ncuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb \u306e\u5165\u624b\u65b9\u6cd5\nhttps://developer.nvidia.com/cudnn\n\u304b\u3089\u767b\u9332\u3057\u3066\u3001Download\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3002\nDownload cuDNN v4 (Feb 10, 2016), for CUDA 7.0 and later. \u3092\u9078\u629e\u3001\u3055\u3089\u306b cuDNN v4 Library for Linux \u3092\u9078\u629e\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066scp\u3067 /home/ubuntu \u306b\u30d5\u30a1\u30a4\u30eb\u8ee2\u9001\u3057\u3066\u304a\u304f\u3002\n\n$ cd ~\n$ tar -xvzf cudnn-7.0-linux-x64-v4.0-prod.tgz\nlibcudnn.so libcudnn.so.4 libcudnn.so.4.0.7 libcudnn_static.a\u304c\u5165\u3063\u3066\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u7d76\u5bfe\u30d1\u30b9\u3092LD_LIBRARY_PATH\u306b\u8ffd\u52a0\n$ cd cuda/lib64\n$ ls\nlibcudnn.so  libcudnn.so.4  libcudnn.so.4.0.7  libcudnn_static.a\n$ pwd\n/home/ubuntu/cuda/lib64\n$ LD_LIBRARY_PATH=/home/ubuntu/cuda/lib64; export LD_LIBRARY_PATH\n$ cd ~\n$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include\n$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n$ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n$ export PATH=/usr/local/cuda/bin:$PATH\n$ export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n$ source .bashrc\n\n\nJupyter\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get remove --purge ipython\n$ sudo apt-get install libjpeg tk-dev\n$ pip install jupyter --user\n$ pip install wcwidth --user\n$ ~/.local/bin/jupyter notebook --generate-config\n$ vim ~/.jupyter/jupyter_notebook_config.py\n$ python\n>>> from notebook.auth import passwd\n>>> passwd()\nEnter password: \u3010\u306a\u3093\u3089\u304b\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3011\nVerify password: \u3010\u306a\u3093\u3089\u304b\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3011\n'sha1:84acf9ab4e38:5498f3245ea50214fd5bdd3aaa2050b33d5c5f91'\n>>> exit()\n$ vi ~/.jupyter/jupyter_notebook_config.py\n+c.NotebookApp.ip ='*'\n+c.NotebookApp.port = 8888\n+c.NotebookApp.password = u'sha1:84acf9ab4e38:5498f3245ea50214fd5bdd3aaa2050b33d5c5f91'\n$ echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc\n$ source ~/.bashrc\n\n\ncuda\u30d1\u30b9\u95a2\u9023\u4ed8\u3051\n$ echo 'export PATH=/usr/local/cuda-7.5/bin:$PATH' >> ~/.bashrc\n$ echo 'export LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source .bashrc\n\n\ntheano & chainer\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u203b chainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092cudnn\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3088\u308a\u5148\u306b\u3084\u308b\u3068GPU\u51e6\u7406\u304c\u6b63\u5e38\u306b\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u6ce8\u610f\n$ pip install theano --user\n$ pip install chainer --user\n\n\nopencv3.1.0\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ wget --no-check-certificate https://github.com/Itseez/opencv/archive/3.1.0.zip -O opencv-3.1.0.zip\n$ unzip opencv-3.1.0.zip\n$ cd opencv-3.1.0\n$ git clone --depth 1 https://github.com/Itseez/opencv_contrib.git opencv_contrib\n$ cd opencv_contrib\n$ git fetch origin --tags --depth 1\n$ git checkout 3.1.0\n$ sudo apt-get -y -qq install cmake git libgtk2.0-dev ocl-icd-opencl-dev qt5-default\n$ sudo apt-get install libhdf5-dev\n$ pip install h5py --user\n$ cd ..\n$ mkdir build\n$ cd build\n$ cmake -D CMAKE_BUILD_TYPE=RelWithDebugInfo -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON  -D INSTALL_PYTHON_EXAMPLES=ON -D WITH_CUDA=ON -D ENABLE_PRECOMPILED_HEADERS=OFF -D CUDA_ARCH_BIN=\"3.0\" -D CUDA_ARCH_PTX=\"\" -D WITH_OPENGL=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 ..\n$ make -j 4\n$ sudo make install -j 4\n$ sudo ldconfig\n$ echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source ~/.bashrc\n$ pkg-config --modversion opencv\n3.1.0\n\n\nOpenCV\u30c6\u30b9\u30c8\n$ sudo ln /dev/null /dev/raw1394\n$ cd ~\n$ mkdir test\n$ cd test\n$ wget http://www.sonicjapan.co.jp/sample/download/AVI-352x240-2sec.AVI\n$ python\n>>> import numpy as np\n>>> import cv2\n>>> cap = cv2.VideoCapture('./AVI-352x240-2sec.AVI')\n>>> cap.read()\n\n\njupyter notebook\u3067\u306e\u52d5\u753b\u8aad\u8fbc\u78ba\u8a8d\n$ cd ~\n$ jupyter notebook\n\u5148\u307b\u3069\u306etest\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u79fb\u52d5\u3057\u3066notebook\u3092\u4f5c\u308a\u3001\u4e0b\u8a18\u5b9f\u884c\nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture('./AVI-352x240-2sec.AVI')\ncap.read()\n\n\n\ntheano\u306eGPU\u51e6\u7406\u30c6\u30b9\u30c8\n$ cd ~\n$ git clone https://github.com/aidiary/deep-learning-theano\n$ cd ~/deep-learning-theano/scripts\n$ THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python convnet.py\nUsing gpu device 0: GRID K520\n....\nOptimization complete.\nBest validation score of 0.910000 % obtained at iteration 16400, with test performance 0.930000 %\nThe code for file convnet.py ran for 39.85m\n\n\nchainer\u306eGPU\u51e6\u7406\u30c6\u30b9\u30c8\n$ git clone https://github.com/pfnet/chainer.git\n$ python ~/chainer/examples/mnist/train_mnist.py -g 0\n\n# \u74b0\u5883\nAWS\u306eGPU\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7528\u3044\u308b\n\u30fb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30bf\u30a4\u30d7: g2.2xlarge\n\u30fbAMI ID: ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-20160627 (ami-2d39803a)\n\n# \u30d9\u30fc\u30b9\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```\n$ sudo apt-get update\n$ sudo apt-get install build-essential cmake pkg-config\n$ sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev\n$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev\n$ sudo apt-get install libxvidcore-dev libx264-dev\n$ sudo apt-get install libgtk2.0-dev\n$ sudo apt-get install libatlas-base-dev gfortran\n$ sudo apt-get -y install cmake git libgtk2.0-dev ocl-icd-opencl-dev\n$ python --version\nPython 2.7.6\n$ sudo apt-get install python-dev python-pip\n$ sudo apt-get install unzip\n$ pip install --upgrade pip --user\n$ pip install ipython pyzmq tornado --user\n$ pip install jsonschema --user\n$ pip install numpy matplotlib scipy --user\n```\n\n# cuda\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```\n$ wget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb\n$ sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb\n$ sudo apt-get update\n$ sudo apt-get install cuda\n$ echo 'export PATH=/usr/local/cuda-7.5/bin:$PATH' >> ~/.bashrc\n$ echo 'export LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source .bashrc\n$ sudo init 6\n$ cat /proc/driver/nvidia/version\nNVRM version: NVIDIA UNIX x86_64 Kernel Module  367.57  Mon Oct  3 20:37:01 PDT 2016\nGCC version:  gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) \n$ dpkg -l | grep nvidia\nii  nvidia-352                                367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-367\nii  nvidia-352-dev                            367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-367-dev\nii  nvidia-352-uvm                            352.39-0ubuntu1                                     amd64        Transitional package for nvidia-352\nii  nvidia-367                                367.57-0ubuntu0.14.04.1                             amd64        NVIDIA binary driver - version 367.57\nii  nvidia-367-dev                            367.57-0ubuntu0.14.04.1                             amd64        NVIDIA binary Xorg driver development files\nii  nvidia-modprobe                           352.39-0ubuntu1                                     amd64        Load the NVIDIA kernel driver and create device files\nii  nvidia-opencl-icd-352                     367.57-0ubuntu0.14.04.1                             amd64        Transitional package for nvidia-opencl-icd-367\nii  nvidia-opencl-icd-367                     367.57-0ubuntu0.14.04.1                             amd64        NVIDIA OpenCL ICD\nii  nvidia-prime                              0.6.2                                               amd64        Tools to enable NVIDIA's Prime\nii  nvidia-settings                           352.39-0ubuntu1                                     amd64        Tool for configuring the NVIDIA graphics driver\n```\n\n# cudnn\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n- `cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb` \u306e\u5165\u624b\u65b9\u6cd5  \nhttps://developer.nvidia.com/cudnn\n\u304b\u3089\u767b\u9332\u3057\u3066\u3001Download\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3002\n`Download cuDNN v4 (Feb 10, 2016), for CUDA 7.0 and later.` \u3092\u9078\u629e\u3001\u3055\u3089\u306b `cuDNN v4 Library for Linux` \u3092\u9078\u629e\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066scp\u3067 `/home/ubuntu` \u306b\u30d5\u30a1\u30a4\u30eb\u8ee2\u9001\u3057\u3066\u304a\u304f\u3002\n\n```\n$ cd ~\n$ tar -xvzf cudnn-7.0-linux-x64-v4.0-prod.tgz\nlibcudnn.so libcudnn.so.4 libcudnn.so.4.0.7 libcudnn_static.a\u304c\u5165\u3063\u3066\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u7d76\u5bfe\u30d1\u30b9\u3092LD_LIBRARY_PATH\u306b\u8ffd\u52a0\n$ cd cuda/lib64\n$ ls\nlibcudnn.so  libcudnn.so.4  libcudnn.so.4.0.7  libcudnn_static.a\n$ pwd\n/home/ubuntu/cuda/lib64\n$ LD_LIBRARY_PATH=/home/ubuntu/cuda/lib64; export LD_LIBRARY_PATH\n$ cd ~\n$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include\n$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n$ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n$ export PATH=/usr/local/cuda/bin:$PATH\n$ export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH\n$ source .bashrc\n```\n\n# Jupyter\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```\n$ sudo apt-get remove --purge ipython\n$ sudo apt-get install libjpeg tk-dev\n$ pip install jupyter --user\n$ pip install wcwidth --user\n$ ~/.local/bin/jupyter notebook --generate-config\n$ vim ~/.jupyter/jupyter_notebook_config.py\n$ python\n>>> from notebook.auth import passwd\n>>> passwd()\nEnter password: \u3010\u306a\u3093\u3089\u304b\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3011\nVerify password: \u3010\u306a\u3093\u3089\u304b\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3011\n'sha1:84acf9ab4e38:5498f3245ea50214fd5bdd3aaa2050b33d5c5f91'\n>>> exit()\n$ vi ~/.jupyter/jupyter_notebook_config.py\n+c.NotebookApp.ip ='*'\n+c.NotebookApp.port = 8888\n+c.NotebookApp.password = u'sha1:84acf9ab4e38:5498f3245ea50214fd5bdd3aaa2050b33d5c5f91'\n$ echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc\n$ source ~/.bashrc\n```\n\n# cuda\u30d1\u30b9\u95a2\u9023\u4ed8\u3051\n```\n$ echo 'export PATH=/usr/local/cuda-7.5/bin:$PATH' >> ~/.bashrc\n$ echo 'export LD_LIBRARY_PATH=/usr/local/cuda-7.5/lib64:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source .bashrc\n```\n\n# theano & chainer\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u203b chainer\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092cudnn\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3088\u308a\u5148\u306b\u3084\u308b\u3068GPU\u51e6\u7406\u304c\u6b63\u5e38\u306b\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u6ce8\u610f\n\n```\n$ pip install theano --user\n$ pip install chainer --user\n```\n\n# opencv3.1.0\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```\n$ wget --no-check-certificate https://github.com/Itseez/opencv/archive/3.1.0.zip -O opencv-3.1.0.zip\n$ unzip opencv-3.1.0.zip\n$ cd opencv-3.1.0\n$ git clone --depth 1 https://github.com/Itseez/opencv_contrib.git opencv_contrib\n$ cd opencv_contrib\n$ git fetch origin --tags --depth 1\n$ git checkout 3.1.0\n$ sudo apt-get -y -qq install cmake git libgtk2.0-dev ocl-icd-opencl-dev qt5-default\n$ sudo apt-get install libhdf5-dev\n$ pip install h5py --user\n$ cd ..\n$ mkdir build\n$ cd build\n$ cmake -D CMAKE_BUILD_TYPE=RelWithDebugInfo -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON  -D INSTALL_PYTHON_EXAMPLES=ON -D WITH_CUDA=ON -D ENABLE_PRECOMPILED_HEADERS=OFF -D CUDA_ARCH_BIN=\"3.0\" -D CUDA_ARCH_PTX=\"\" -D WITH_OPENGL=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 ..\n$ make -j 4\n$ sudo make install -j 4\n$ sudo ldconfig\n$ echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc\n$ source ~/.bashrc\n$ pkg-config --modversion opencv\n3.1.0\n```\n\n# OpenCV\u30c6\u30b9\u30c8\n```\n$ sudo ln /dev/null /dev/raw1394\n$ cd ~\n$ mkdir test\n$ cd test\n$ wget http://www.sonicjapan.co.jp/sample/download/AVI-352x240-2sec.AVI\n$ python\n>>> import numpy as np\n>>> import cv2\n>>> cap = cv2.VideoCapture('./AVI-352x240-2sec.AVI')\n>>> cap.read()\n```\n\n# jupyter notebook\u3067\u306e\u52d5\u753b\u8aad\u8fbc\u78ba\u8a8d\n```\n$ cd ~\n$ jupyter notebook\n\u5148\u307b\u3069\u306etest\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u79fb\u52d5\u3057\u3066notebook\u3092\u4f5c\u308a\u3001\u4e0b\u8a18\u5b9f\u884c\nimport numpy as np\nimport cv2\ncap = cv2.VideoCapture('./AVI-352x240-2sec.AVI')\ncap.read()\n```\n\n<img width=\"955\" alt=\"jupyter.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/100746/2cd987e8-f272-a421-f1cd-697c0b6b48d8.png\">\n\n# theano\u306eGPU\u51e6\u7406\u30c6\u30b9\u30c8\n```\n$ cd ~\n$ git clone https://github.com/aidiary/deep-learning-theano\n$ cd ~/deep-learning-theano/scripts\n$ THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python convnet.py\nUsing gpu device 0: GRID K520\n....\nOptimization complete.\nBest validation score of 0.910000 % obtained at iteration 16400, with test performance 0.930000 %\nThe code for file convnet.py ran for 39.85m\n```\n\n# chainer\u306eGPU\u51e6\u7406\u30c6\u30b9\u30c8\n```\n$ git clone https://github.com/pfnet/chainer.git\n$ python ~/chainer/examples/mnist/train_mnist.py -g 0\n```\n", "tags": ["opencv3.1", "Ubuntu14.04", "Jupyter", "Theano", "cuDNN"]}