{"context": " More than 1 year has passed since last update.\n\n\u53c2\u8003\nKinesis\u3063\u3066\u306a\u3093\u3058\u3083\uff1f\uff08Java\u5b9f\u88c5\u7de8\uff09\n\n\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\n\u524d\u56de\u306b\u3064\u3065\u3044\u3066\u3001S3\u3078\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3002\n\u540c\u3058\u3088\u3046\u306b\u3001AwsCredentials.properties\u53c8\u306f\u3001EC2\u30ed\u30fc\u30eb\u3067\u3001S3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u6301\u3064\u3082\u306e\u306b\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304f\u3053\u3068\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3068\u308a\u3042\u3048\u305a\u3001PowerUser\u306e\u30ed\u30fc\u30eb\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\nSampleS3putter.java\n\n    private static final Logger LOG = LoggerFactory\n            .getLogger(SampleS3Putter.class);\n\n    public SampleS3Putter() {\n    }\n\n    private AmazonS3Client s3;\n    private static final String BUCKET_NAME = \"<\u30d0\u30b1\u30c3\u30c8\u540d>\";\n    private static final String DIRECTORY_PATH = \"log/\";\n    private static final String EXTENSION = \".txt\";\n    private final CharsetDecoder decoder = Charset.forName(\"UTF-8\")\n            .newDecoder();\n    private static final long CHECKPOINT_INTERVAL_MILLIS = 60000L;\n    private long nextCheckpointTimeInMillis;\n\n    @Override\n    public void initialize(String shardId) {\n        try {\n            credentialsProvider = new InstanceProfileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        } catch (AmazonClientException e) {\n            credentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        }\n        this.s3 = new AmazonS3Client(credentialsProvider);\n    }\n\n    @Override\n    public void processRecords(List<Record> records,\n            IRecordProcessorCheckpointer checkpointer) {\n        process(records);\n        if (System.currentTimeMillis() > nextCheckpointTimeInMillis) {\n        \u3000\u3000\u3000\u3000\u3000try {\n            \u3000\u3000\u3000checkpointer.checkpoint();\n    \u3000\u3000\u3000\u3000\u3000 } catch (ShutdownException se) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 } catch (ThrottlingException e) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 } catch (InvalidStateException e) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 }\n            nextCheckpointTimeInMillis = System.currentTimeMillis()\n                    + CHECKPOINT_INTERVAL_MILLIS;\n        }\n    }\n\n    private void process(List<Record> records) {\n\n        if (records.isEmpty()) {\n            LOG.info(\"record empty.\");\n            return;\n        }\n\n        byte[] dst = new byte[0];\n        for (Record record : records) {\n            LOG.debug(\n                    \"---- Data : {} ,PartitionKey : {} , SequenceNumber : {} ----\",\n                    record.getData(), record.getPartitionKey(),\n                    record.getSequenceNumber());\n\n            try {\n                String data = decoder.decode(record.getData()).toString()\n                        + \"\\n\";\n                byte[] dstBytes = dst;\n                byte[] dataBytes = data.getBytes(\"UTF-8\");\n                dst = new byte[dstBytes.length + dataBytes.length];\n                System.arraycopy(dstBytes, 0, dst, 0, dstBytes.length);\n                System.arraycopy(dataBytes, 0, dst, dstBytes.length,\n                        dataBytes.length);\n            } catch (CharacterCodingException e) {\n                // \u4f55\u304b\u51e6\u7406\n            } catch (UnsupportedEncodingException e) {\n                // \u4f55\u304b\u51e6\u7406\n            }\n\n        }\n\n        // s3\u3078\u306e\u66f8\u304d\u8fbc\u307f\n        ObjectMetadata metadata = new ObjectMetadata();\n        metadata.setContentLength(dst.length);\n        PutObjectResult putObjectResult = s3.putObject(BUCKET_NAME,\n                DIRECTORY_PATH + System.currentTimeMillis()+\"_log\"+ EXTENSION,\n                new ByteArrayInputStream(dst), metadata);\n\n        LOG.debug(putObjectResult.toString());\n    }\n\n    @Override\n    public void shutdown(IRecordProcessorCheckpointer checkpointer,\n            ShutdownReason reason) {\n        if (reason == ShutdownReason.TERMINATE) {\n        \u3000\u3000\u3000\u3000\u3000try {\n            \u3000\u3000\u3000checkpointer.checkpoint();\n    \u3000\u3000\u3000\u3000\u3000 } catch (ShutdownException se) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 } catch (ThrottlingException e) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 } catch (InvalidStateException e) {\n            \u3000\u3000// \u51e6\u7406\n    \u3000\u3000\u3000\u3000\u3000 }\n        }\n    }\n\n\n\n\n\nFactory\u30af\u30e9\u30b9\n\nS3PutterRecordProcessorFactory.java\n\n    public S3PutterRecordProcessorFactory() {\n    }\n\n    /* (\u975e Javadoc)\n     * @see com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorFactory#createProcessor()\n     */\n    @Override\n    public IRecordProcessor createProcessor() {\n        return new SampleS3Putter();\n    }\n\n\n\n\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306b\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3044\u3051\u308b\u306f\u305a\u3002\n\u5b9f\u88c5\u306e\u30dd\u30a4\u30f3\u30c8\n1. AmazonS3Client\u3092\u4f7f\u3046\u3002S3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u6a29\u9650\u3092\u3082\u3063\u305f\u30e6\u30fc\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n2. \u4e00\u5ea6\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf\uff08\u30ec\u30b3\u30fc\u30c9\u6570\uff09\u3092\u8003\u3048\u308b\u3002100\u30ec\u30b3\u30fc\u30c9\u3067\u4e00\u56de\u51fa\u529b\u3059\u308b\u3068\u304b\u3002\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3067\u51fa\u529b\u3059\u308b\u306a\u3069\u3002\n\u307e\u305f\u4f55\u304b\u3042\u3063\u305f\u3089\u8ffd\u8a18\n\u6b21\u304f\u3002\u3002\u3002\n\n# \u53c2\u8003\n[Kinesis\u3063\u3066\u306a\u3093\u3058\u3083\uff1f\uff08Java\u5b9f\u88c5\u7de8\uff09](http://memocra.blogspot.jp/2013/12/kinesisjava.html)\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\n\n\u524d\u56de\u306b\u3064\u3065\u3044\u3066\u3001S3\u3078\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3002\n\u540c\u3058\u3088\u3046\u306b\u3001`AwsCredentials.properties`\u53c8\u306f\u3001EC2\u30ed\u30fc\u30eb\u3067\u3001S3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u6301\u3064\u3082\u306e\u306b\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304f\u3053\u3068\u3002\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3068\u308a\u3042\u3048\u305a\u3001PowerUser\u306e\u30ed\u30fc\u30eb\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```SampleS3putter.java\n\n\tprivate static final Logger LOG = LoggerFactory\n\t\t\t.getLogger(SampleS3Putter.class);\n\n\tpublic SampleS3Putter() {\n\t}\n\n\tprivate AmazonS3Client s3;\n\tprivate static final String BUCKET_NAME = \"<\u30d0\u30b1\u30c3\u30c8\u540d>\";\n\tprivate static final String DIRECTORY_PATH = \"log/\";\n\tprivate static final String EXTENSION = \".txt\";\n\tprivate final CharsetDecoder decoder = Charset.forName(\"UTF-8\")\n\t\t\t.newDecoder();\n\tprivate static final long CHECKPOINT_INTERVAL_MILLIS = 60000L;\n\tprivate long nextCheckpointTimeInMillis;\n\n\t@Override\n\tpublic void initialize(String shardId) {\n        try {\n            credentialsProvider = new InstanceProfileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        } catch (AmazonClientException e) {\n            credentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        }\n\t\tthis.s3 = new AmazonS3Client(credentialsProvider);\n\t}\n\n\t@Override\n\tpublic void processRecords(List<Record> records,\n\t\t\tIRecordProcessorCheckpointer checkpointer) {\n\t\tprocess(records);\n\t\tif (System.currentTimeMillis() > nextCheckpointTimeInMillis) {\n\t\t\u3000\u3000\u3000\u3000\u3000try {\n\t\t\t\u3000\u3000\u3000checkpointer.checkpoint();\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (ShutdownException se) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (ThrottlingException e) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (InvalidStateException e) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t}\n\t\t\tnextCheckpointTimeInMillis = System.currentTimeMillis()\n\t\t\t\t\t+ CHECKPOINT_INTERVAL_MILLIS;\n\t\t}\n\t}\n\n\tprivate void process(List<Record> records) {\n\n\t\tif (records.isEmpty()) {\n\t\t\tLOG.info(\"record empty.\");\n\t\t\treturn;\n\t\t}\n\n\t\tbyte[] dst = new byte[0];\n\t\tfor (Record record : records) {\n\t\t\tLOG.debug(\n\t\t\t\t\t\"---- Data : {} ,PartitionKey : {} , SequenceNumber : {} ----\",\n\t\t\t\t\trecord.getData(), record.getPartitionKey(),\n\t\t\t\t\trecord.getSequenceNumber());\n\n\t\t\ttry {\n\t\t\t\tString data = decoder.decode(record.getData()).toString()\n\t\t\t\t\t\t+ \"\\n\";\n\t\t\t\tbyte[] dstBytes = dst;\n\t\t\t\tbyte[] dataBytes = data.getBytes(\"UTF-8\");\n\t\t\t\tdst = new byte[dstBytes.length + dataBytes.length];\n\t\t\t\tSystem.arraycopy(dstBytes, 0, dst, 0, dstBytes.length);\n\t\t\t\tSystem.arraycopy(dataBytes, 0, dst, dstBytes.length,\n\t\t\t\t\t\tdataBytes.length);\n\t\t\t} catch (CharacterCodingException e) {\n\t\t\t\t// \u4f55\u304b\u51e6\u7406\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\t// \u4f55\u304b\u51e6\u7406\n\t\t\t}\n\n\t\t}\n\n\t\t// s3\u3078\u306e\u66f8\u304d\u8fbc\u307f\n\t\tObjectMetadata metadata = new ObjectMetadata();\n\t\tmetadata.setContentLength(dst.length);\n\t\tPutObjectResult putObjectResult = s3.putObject(BUCKET_NAME,\n\t\t\t\tDIRECTORY_PATH + System.currentTimeMillis()+\"_log\"+ EXTENSION,\n\t\t\t\tnew ByteArrayInputStream(dst), metadata);\n\n\t\tLOG.debug(putObjectResult.toString());\n\t}\n\n\t@Override\n\tpublic void shutdown(IRecordProcessorCheckpointer checkpointer,\n\t\t\tShutdownReason reason) {\n\t\tif (reason == ShutdownReason.TERMINATE) {\n\t\t\u3000\u3000\u3000\u3000\u3000try {\n\t\t\t\u3000\u3000\u3000checkpointer.checkpoint();\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (ShutdownException se) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (ThrottlingException e) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t} catch (InvalidStateException e) {\n\t\t\t\u3000\u3000// \u51e6\u7406\n\t\u3000\u3000\u3000\u3000\u3000\t}\n\t\t}\n\t}\n\n\n\n```\n\nFactory\u30af\u30e9\u30b9\n\n```S3PutterRecordProcessorFactory.java\n\n\tpublic S3PutterRecordProcessorFactory() {\n\t}\n\n\t/* (\u975e Javadoc)\n\t * @see com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessorFactory#createProcessor()\n\t */\n\t@Override\n\tpublic IRecordProcessor createProcessor() {\n\t\treturn new SampleS3Putter();\n\t}\n\n```\n\n\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306b\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3044\u3051\u308b\u306f\u305a\u3002\n\n\u5b9f\u88c5\u306e\u30dd\u30a4\u30f3\u30c8\n1. AmazonS3Client\u3092\u4f7f\u3046\u3002S3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u6a29\u9650\u3092\u3082\u3063\u305f\u30e6\u30fc\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n2. \u4e00\u5ea6\u306b\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf\uff08\u30ec\u30b3\u30fc\u30c9\u6570\uff09\u3092\u8003\u3048\u308b\u3002100\u30ec\u30b3\u30fc\u30c9\u3067\u4e00\u56de\u51fa\u529b\u3059\u308b\u3068\u304b\u3002\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3067\u51fa\u529b\u3059\u308b\u306a\u3069\u3002\n\n\u307e\u305f\u4f55\u304b\u3042\u3063\u305f\u3089\u8ffd\u8a18\n\n\n\u6b21\u304f\u3002\u3002\u3002\n", "tags": ["Kinesis"]}