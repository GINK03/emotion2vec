{"context": " More than 1 year has passed since last update.Clojure\u3067\u30ea\u30b9\u30c8\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5834\u5408\u3001\u72ec\u7279\u306e\u7656\u304c\u3042\u308b\u3002\u305d\u306e\u8fba\u308a\u306b\u3064\u3044\u3066\u306f\u3001\u5b9f\u969b\u306bClojure Cookbook\u306b\u3082\u66f8\u3044\u3066\u3042\u308b:\n;; A list constructed via list satisfies both list? and seq?\n(list? (list 1 2 3))\n;; -> true\n(seq? (list 1 2 3))\n;; -> true\n\n;; cons, however *looks* like a list, but is actually a Cons\n(list? (cons 1 '(2 3)))\n;; -> false\n(type (cons 1 '(2 3)))\n;; -> clojure.lang.Cons\n(seq? (cons 1 '(2 3)))\n;; -> true\n\n;; range's lazy return value is a seq, but not a list\n(list? (range 3))\n;; -> false\n(seq? (range 3))\n;; -> true\n\n\u3053\u306e\u6319\u52d5\u306f\u4e00\u4f53\u306a\u3093\u3060\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3053\u3067\u3001list?\u3068seq?\u306e\u5b9f\u88c5\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u308b\u3002\n\n\u305d\u3082\u305d\u3082list?\u3068seq?\u306f\u4f55\u3092\u6bd4\u8f03\u3057\u3066\u3044\u308b\u306e\u304b\nClojure\u3067\u6319\u52d5\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001(source list?)\u3092\u4f7f\u3046\u3068\u3001\u4e00\u767a\u3067\u30bd\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u308b\u3002\n(defn list?\n  \"Returns true if x implements IPersistentList\"\n  {:added \"1.0\"\n   :static true}\n  [x] (instance? clojure.lang.IPersistentList x))\n\n(def\n ^{:arglists '([x])\n   :doc \"Return true if x implements ISeq\"\n   :added \"1.0\"\n   :static true}\n seq? (fn ^:static seq? [x] (instance? clojure.lang.ISeq x)))\n\n\u57fa\u672c\u7684\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u30af\u30e9\u30b9\u304c\u5909\u308f\u308bClojure\u306e\u7656\n\u3042\u308c\u3001\u3067\u3082cons\u3067\u5225\u306b\u30ea\u30b9\u30c8\u3067\u3057\u3087?\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u6b21\u306e\u6319\u52d5\u3092\u898b\u3066\u3082\u540c\u3058\u3053\u3068\u304c\u8a00\u3048\u308b\u304b\u306a?\nuser> (class '(a b c))\nclojure.lang.PersistentList\nuser> (class (cons 'a '(b c d)))\nclojure.lang.Cons\n\n\u305d\u3046\u3001\u898b\u305f\u76ee\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u306b\u3001\u6025\u306bCons\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u3002\u305d\u3057\u3066\u3001\u3053\u306eCons\u306fPersistentList\u3067\u306f\u306a\u3044\u3002\n\n\u4e8c\u3064\u3092\u5171\u901a\u5316\u3059\u308b\u3082\u306e\n\u3055\u3066\u3001\u305d\u3053\u3067\u6c17\u306b\u306a\u308b\u3053\u3068\u304c\u4e00\u3064\u3042\u308b\u3002\u306a\u3093\u3067\u4e8c\u3064\u306fseq?\u3067\u306f\u30a4\u30b3\u30fc\u30eb\u306b\u306a\u308b\u306e\u304b\u3002\u305d\u308c\u306fASeq\u3068\u3044\u3046\u306e\u3092\u4e21\u8005\u304c\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3089\u3060\u3002\u3053\u306eASeq\u304cISeq\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092implements\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3092Clojure\u304b\u3089\u78ba\u8a8d\u3059\u308b\u306e\u306b\u306f\u3001\u4e0b\u306e\u3088\u3046\u306a\u65b9\u6cd5\u304c\u3042\u308b:\n(filter (fn [n] (= n clojure.lang.ISeq))\n    (supers (class (list :foobar))))\n\n\u57fa\u672c\u7684\u306b\u3001\u3053\u308c\u3089\u306fseq\u3068\u3044\u3046\u95a2\u6570\u3067\u4f5c\u3089\u308c\u308b\u3082\u306e\u306a\u3089\u3070\u3001\u3060\u3044\u305f\u3044Seq\u3068\u306a\u308b\u3002\u4f8b\u3048\u3070\u3001(seq \"foobar\")\u306fStringSeq\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u308b\u3002\u307e\u305f\u3001LazySeq\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306b\u95a2\u3057\u3066\u3082\u3001\u57fa\u672c\u7684\u306b\u306fISeq\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u3002(\u4f8b: cycle\u3001range\u306a\u3069)\n\nconj\u3060\u3068\u30af\u30e9\u30b9\u306f\u5909\u308f\u3089\u306a\u3044\n\u304a\u307e\u3051\u3068\u3057\u3066\u3001conj\u3067\u306f\u30af\u30e9\u30b9\u304c\u5909\u308f\u3089\u306a\u3044\u3002\nuser> (cons 1 '(2 3 4))\n(1 2 3 4)\nuser> (conj '(2 3 4) 1)\n(1 2 3 4)\nuser> (class (conj '(1 2 3) 4))\nclojure.lang.PersistentList\n\n\u306a\u306e\u3067\u3001\u3082\u3057\u3069\u3046\u3057\u3066\u3082list?\u3067\u6bd4\u8f03\u3057\u305f\u3044\u3068\u3044\u3046\u8af8\u4e8b\u60c5\u304c\u3042\u308b\u5834\u5408\u306f\u3001conj\u3092\u4f7f\u3063\u3066\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\u307e\u3068\u3081\n\u7c21\u5358\u306bClojure\u306e\u7656\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u3002\u3053\u308c\u3089\u306b\u95a2\u3057\u3066\u306f\u3001PersistentList\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u4ed5\u65b9\u306a\u3044\u90e8\u5206\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u305d\u306e\u8fba\u308a\u3092\u8abf\u3079\u3066\u307f\u308b\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\u305f\u3060\u3001\u3084\u306f\u308acons\u3067\u30af\u30e9\u30b9\u304c\u5909\u308f\u3063\u3061\u3083\u3046\u306e\u306f\u3001\u3061\u3087\u3063\u3068\u9055\u548c\u611f\u3092\u899a\u3048\u308b\u90e8\u5206\u3067\u306f\u3042\u308b\u3002\n`Clojure`\u3067\u30ea\u30b9\u30c8\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5834\u5408\u3001\u72ec\u7279\u306e\u7656\u304c\u3042\u308b\u3002\u305d\u306e\u8fba\u308a\u306b\u3064\u3044\u3066\u306f\u3001\u5b9f\u969b\u306b[Clojure Cookbook](https://github.com/clojure-cookbook/clojure-cookbook/blob/51a1140e5ee1e0d0be777ceeb3d49d2c18671b73/02_composite-data/2-05_test-for-a-list.asciidoc)\u306b\u3082\u66f8\u3044\u3066\u3042\u308b:\n\n```clj\n;; A list constructed via list satisfies both list? and seq?\n(list? (list 1 2 3))\n;; -> true\n(seq? (list 1 2 3))\n;; -> true\n\n;; cons, however *looks* like a list, but is actually a Cons\n(list? (cons 1 '(2 3)))\n;; -> false\n(type (cons 1 '(2 3)))\n;; -> clojure.lang.Cons\n(seq? (cons 1 '(2 3)))\n;; -> true\n\n;; range's lazy return value is a seq, but not a list\n(list? (range 3))\n;; -> false\n(seq? (range 3))\n;; -> true\n```\n\n\u3053\u306e\u6319\u52d5\u306f\u4e00\u4f53\u306a\u3093\u3060\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3053\u3067\u3001`list?`\u3068`seq?`\u306e\u5b9f\u88c5\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u308b\u3002\n\n# \u305d\u3082\u305d\u3082`list?`\u3068`seq?`\u306f\u4f55\u3092\u6bd4\u8f03\u3057\u3066\u3044\u308b\u306e\u304b\n\n`Clojure`\u3067\u6319\u52d5\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001`(source list?)`\u3092\u4f7f\u3046\u3068\u3001\u4e00\u767a\u3067\u30bd\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u308b\u3002\n\n```clj\n(defn list?\n  \"Returns true if x implements IPersistentList\"\n  {:added \"1.0\"\n   :static true}\n  [x] (instance? clojure.lang.IPersistentList x))\n\n(def\n ^{:arglists '([x])\n   :doc \"Return true if x implements ISeq\"\n   :added \"1.0\"\n   :static true}\n seq? (fn ^:static seq? [x] (instance? clojure.lang.ISeq x)))\n ```\n\n\u57fa\u672c\u7684\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n# \u30af\u30e9\u30b9\u304c\u5909\u308f\u308bClojure\u306e\u7656\n\n\u3042\u308c\u3001\u3067\u3082`cons`\u3067\u5225\u306b\u30ea\u30b9\u30c8\u3067\u3057\u3087?\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u6b21\u306e\u6319\u52d5\u3092\u898b\u3066\u3082\u540c\u3058\u3053\u3068\u304c\u8a00\u3048\u308b\u304b\u306a?\n\n```clj\nuser> (class '(a b c))\nclojure.lang.PersistentList\nuser> (class (cons 'a '(b c d)))\nclojure.lang.Cons\n```\n\n\u305d\u3046\u3001\u898b\u305f\u76ee\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u306b\u3001\u6025\u306b`Cons`\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u3002\u305d\u3057\u3066\u3001**\u3053\u306e`Cons`\u306f`PersistentList`\u3067\u306f\u306a\u3044**\u3002\n\n# \u4e8c\u3064\u3092\u5171\u901a\u5316\u3059\u308b\u3082\u306e\n\n\u3055\u3066\u3001\u305d\u3053\u3067\u6c17\u306b\u306a\u308b\u3053\u3068\u304c\u4e00\u3064\u3042\u308b\u3002\u306a\u3093\u3067\u4e8c\u3064\u306f`seq?`\u3067\u306f\u30a4\u30b3\u30fc\u30eb\u306b\u306a\u308b\u306e\u304b\u3002\u305d\u308c\u306f`ASeq`\u3068\u3044\u3046\u306e\u3092\u4e21\u8005\u304c\u7d99\u627f\u3057\u3066\u3044\u308b\u304b\u3089\u3060\u3002\u3053\u306e`ASeq`\u304c`ISeq`\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092`implements`\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3092Clojure\u304b\u3089\u78ba\u8a8d\u3059\u308b\u306e\u306b\u306f\u3001\u4e0b\u306e\u3088\u3046\u306a\u65b9\u6cd5\u304c\u3042\u308b:\n\n```clj\n(filter (fn [n] (= n clojure.lang.ISeq))\n    (supers (class (list :foobar))))\n```\n\n\u57fa\u672c\u7684\u306b\u3001\u3053\u308c\u3089\u306f`seq`\u3068\u3044\u3046\u95a2\u6570\u3067\u4f5c\u3089\u308c\u308b\u3082\u306e\u306a\u3089\u3070\u3001\u3060\u3044\u305f\u3044Seq\u3068\u306a\u308b\u3002\u4f8b\u3048\u3070\u3001`(seq \"foobar\")`\u306f`StringSeq`\u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u308b\u3002\u307e\u305f\u3001`LazySeq`\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306b\u95a2\u3057\u3066\u3082\u3001\u57fa\u672c\u7684\u306b\u306f`ISeq`\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u3002(\u4f8b: `cycle`\u3001`range`\u306a\u3069)\n\n# `conj`\u3060\u3068\u30af\u30e9\u30b9\u306f\u5909\u308f\u3089\u306a\u3044\n\n\u304a\u307e\u3051\u3068\u3057\u3066\u3001`conj`\u3067\u306f\u30af\u30e9\u30b9\u304c\u5909\u308f\u3089\u306a\u3044\u3002\n\n```clj\nuser> (cons 1 '(2 3 4))\n(1 2 3 4)\nuser> (conj '(2 3 4) 1)\n(1 2 3 4)\nuser> (class (conj '(1 2 3) 4))\nclojure.lang.PersistentList\n```\n\n\u306a\u306e\u3067\u3001\u3082\u3057\u3069\u3046\u3057\u3066\u3082`list?`\u3067\u6bd4\u8f03\u3057\u305f\u3044\u3068\u3044\u3046\u8af8\u4e8b\u60c5\u304c\u3042\u308b\u5834\u5408\u306f\u3001`conj`\u3092\u4f7f\u3063\u3066\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n# \u307e\u3068\u3081\n\n\u7c21\u5358\u306bClojure\u306e\u7656\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307f\u305f\u3002\u3053\u308c\u3089\u306b\u95a2\u3057\u3066\u306f\u3001`PersistentList`\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u4ed5\u65b9\u306a\u3044\u90e8\u5206\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u305d\u306e\u8fba\u308a\u3092\u8abf\u3079\u3066\u307f\u308b\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\u305f\u3060\u3001\u3084\u306f\u308a`cons`\u3067\u30af\u30e9\u30b9\u304c\u5909\u308f\u3063\u3061\u3083\u3046\u306e\u306f\u3001\u3061\u3087\u3063\u3068\u9055\u548c\u611f\u3092\u899a\u3048\u308b\u90e8\u5206\u3067\u306f\u3042\u308b\u3002\n", "tags": ["Clojure"]}