{"tags": ["Arduino", "L3GD20", "SPI"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\narduino uno\u306b\u30b8\u30e3\u30a4\u30ed\u30bb\u30f3\u30b5\u30fc\u3092\u3064\u306a\u3044\u3067\u898b\u307e\u3057\u305f\u3002\nL3GD20\u306f\u3001SPI\u3067\u63a5\u7d9a\u3057\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u30ed\u30b0\n\n\n\u5199\u771f\n\n\n\u56de\u8def\u56f3\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\nhttps://github.com/ohisama/L3GD20\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n#include <SPI.h>\n#include <L3GD20.h>\n\nL3GD20 gyro(10);\nint dc_offsetX = 0;\nint dc_offsetY = 0;\nint dc_offsetZ = 0;\nunsigned long time;\nint rateX;\nint rateY;\nint rateZ;\nint prev_rateX = 0;\nint prev_rateY = 0;\nint prev_rateZ = 0;\ndouble angleX = 0;\ndouble angleY = 0;\ndouble angleZ = 0;\nvoid setup()\n{\n    int sampleNum = 500;\n    short X, Y, Z;\n    float x, y, z;\n    Serial.begin(115200);\n    Serial.print(\"start\\t\");\n    gyro.begin();\n    Serial.println(\" ok!\");\n    for (int n = 0; n < sampleNum; n++)\n    {\n        X = gyro.read(L3GD20_X_H);\n        x = (X << 8) | gyro.read(L3GD20_X_L);\n        dc_offsetX += (int) x;\n        Y = gyro.read(L3GD20_Y_H);\n        y = (Y << 8) | gyro.read(L3GD20_Y_L);\n        dc_offsetY += (int) y;\n        Z = gyro.read(L3GD20_Z_H);\n        z = (Z << 8) | gyro.read(L3GD20_Z_L);\n        dc_offsetZ += (int) z;\n    }\n    dc_offsetX = dc_offsetX / sampleNum;\n    dc_offsetY = dc_offsetY / sampleNum;\n    dc_offsetZ = dc_offsetZ / sampleNum;\n    Serial.print(\" X: \");\n    Serial.print(dc_offsetX);\n    Serial.print(\" Y: \");\n    Serial.print(dc_offsetY);\n    Serial.print(\" Z: \");\n    Serial.println(dc_offsetZ);\n}\nvoid loop()\n{\n    int sampleTime = 10;\n    short X, Y, Z;\n    float x, y, z;\n    if (millis() - time > sampleTime)\n    {\n        time = millis();\n        X = gyro.read(L3GD20_X_H);\n        x = (X << 8) | gyro.read(L3GD20_X_L);\n        Y = gyro.read(L3GD20_Y_H);\n        y = (Y << 8) | gyro.read(L3GD20_Y_L);\n        Z = gyro.read(L3GD20_Z_H);\n        z = (Z << 8) | gyro.read(L3GD20_Z_L);\n        rateX = ((int) x - dc_offsetX) / 100;\n        angleX += ((double) (prev_rateX + rateX) * sampleTime) / 2000;\n        prev_rateX = rateX;\n        if (angleX < 0)\n        {\n            angleX += 360;\n        }\n        else if (angleX >= 360)\n        {\n            angleX -= 360;\n        }\n        rateY = ((int) y - dc_offsetY) / 100;\n        angleY += ((double) (prev_rateY + rateY) * sampleTime) / 2000;\n        prev_rateY = rateY;\n        if (angleY < 0)\n        {\n            angleY += 360;\n        }\n        else if (angleY >= 360)\n        {\n            angleY -= 360;\n        }\n        rateZ = ((int) z - dc_offsetZ) / 100;\n        angleZ += ((double) (prev_rateZ + rateZ) * sampleTime) / 2000;\n        prev_rateZ = rateZ;\n        if (angleZ < 0)\n        {\n            angleZ += 360;\n        }\n        else if (angleZ >= 360)\n        {\n            angleZ -= 360;\n        }\n        Serial.print(\"X: \");\n        Serial.print(angleX);\n        Serial.print(\" rate: \");\n        Serial.print(rateX);\n        Serial.print(\" Y: \");\n        Serial.print(angleY);\n        Serial.print(\" rate: \");\n        Serial.print(rateY);\n        Serial.print(\" Z: \");\n        Serial.print(angleZ);\n        Serial.print(\" rate: \");\n        Serial.println(rateZ);\n    }\n}\n\n#\u6982\u8981\narduino uno\u306b\u30b8\u30e3\u30a4\u30ed\u30bb\u30f3\u30b5\u30fc\u3092\u3064\u306a\u3044\u3067\u898b\u307e\u3057\u305f\u3002\nL3GD20\u306f\u3001SPI\u3067\u63a5\u7d9a\u3057\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u66f8\u304d\u307e\u3057\u305f\u3002\n#\u30ed\u30b0\n![kaku.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/af49eaed-c6ff-3db7-d4e5-d2a6e86e6ad4.jpeg)\n#\u5199\u771f\n![MVC-015S.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/ffc33ba2-910f-7dc0-25cc-ed007a55a8d2.jpeg)\n#\u56de\u8def\u56f3\n![l3gd20.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/2ece7db3-efe6-7d25-727d-c50a88ffdf21.jpeg)\n#\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\nhttps://github.com/ohisama/L3GD20\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\n#include <SPI.h>\n#include <L3GD20.h>\n\nL3GD20 gyro(10);\nint dc_offsetX = 0;\nint dc_offsetY = 0;\nint dc_offsetZ = 0;\nunsigned long time;\nint rateX;\nint rateY;\nint rateZ;\nint prev_rateX = 0;\nint prev_rateY = 0;\nint prev_rateZ = 0;\ndouble angleX = 0;\ndouble angleY = 0;\ndouble angleZ = 0;\nvoid setup()\n{\n\tint sampleNum = 500;\n\tshort X, Y, Z;\n\tfloat x, y, z;\n\tSerial.begin(115200);\n\tSerial.print(\"start\\t\");\n\tgyro.begin();\n\tSerial.println(\" ok!\");\n\tfor (int n = 0; n < sampleNum; n++)\n\t{\n\t\tX = gyro.read(L3GD20_X_H);\n\t\tx = (X << 8) | gyro.read(L3GD20_X_L);\n\t\tdc_offsetX += (int) x;\n\t\tY = gyro.read(L3GD20_Y_H);\n\t\ty = (Y << 8) | gyro.read(L3GD20_Y_L);\n\t\tdc_offsetY += (int) y;\n\t\tZ = gyro.read(L3GD20_Z_H);\n\t\tz = (Z << 8) | gyro.read(L3GD20_Z_L);\n\t\tdc_offsetZ += (int) z;\n\t}\n\tdc_offsetX = dc_offsetX / sampleNum;\n\tdc_offsetY = dc_offsetY / sampleNum;\n\tdc_offsetZ = dc_offsetZ / sampleNum;\n\tSerial.print(\" X: \");\n\tSerial.print(dc_offsetX);\n\tSerial.print(\" Y: \");\n\tSerial.print(dc_offsetY);\n\tSerial.print(\" Z: \");\n\tSerial.println(dc_offsetZ);\n}\nvoid loop()\n{\n\tint sampleTime = 10;\n\tshort X, Y, Z;\n\tfloat x, y, z;\n\tif (millis() - time > sampleTime)\n\t{\n\t\ttime = millis();\n\t\tX = gyro.read(L3GD20_X_H);\n\t\tx = (X << 8) | gyro.read(L3GD20_X_L);\n\t\tY = gyro.read(L3GD20_Y_H);\n\t\ty = (Y << 8) | gyro.read(L3GD20_Y_L);\n\t\tZ = gyro.read(L3GD20_Z_H);\n\t\tz = (Z << 8) | gyro.read(L3GD20_Z_L);\n\t\trateX = ((int) x - dc_offsetX) / 100;\n\t\tangleX += ((double) (prev_rateX + rateX) * sampleTime) / 2000;\n\t\tprev_rateX = rateX;\n\t\tif (angleX < 0)\n\t\t{\n\t\t\tangleX += 360;\n\t\t}\n\t\telse if (angleX >= 360)\n\t\t{\n\t\t\tangleX -= 360;\n\t\t}\n\t\trateY = ((int) y - dc_offsetY) / 100;\n\t\tangleY += ((double) (prev_rateY + rateY) * sampleTime) / 2000;\n\t\tprev_rateY = rateY;\n\t\tif (angleY < 0)\n\t\t{\n\t\t\tangleY += 360;\n\t\t}\n\t\telse if (angleY >= 360)\n\t\t{\n\t\t\tangleY -= 360;\n\t\t}\n\t\trateZ = ((int) z - dc_offsetZ) / 100;\n\t\tangleZ += ((double) (prev_rateZ + rateZ) * sampleTime) / 2000;\n\t\tprev_rateZ = rateZ;\n\t\tif (angleZ < 0)\n\t\t{\n\t\t\tangleZ += 360;\n\t\t}\n\t\telse if (angleZ >= 360)\n\t\t{\n\t\t\tangleZ -= 360;\n\t\t}\n\t\tSerial.print(\"X: \");\n\t\tSerial.print(angleX);\n\t\tSerial.print(\" rate: \");\n\t\tSerial.print(rateX);\n\t\tSerial.print(\" Y: \");\n\t\tSerial.print(angleY);\n\t\tSerial.print(\" rate: \");\n\t\tSerial.print(rateY);\n\t\tSerial.print(\" Z: \");\n\t\tSerial.print(angleZ);\n\t\tSerial.print(\" rate: \");\n\t\tSerial.println(rateZ);\n\t}\n}\n```\n"}