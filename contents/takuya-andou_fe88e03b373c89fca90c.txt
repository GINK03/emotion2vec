{"tags": ["Arduino", "\u96fb\u5b50\u5de5\u4f5c", "\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc", "\u30d5\u30eb\u30ab\u30e9\u30fcLED"], "context": " More than 1 year has passed since last update.\u4ee5\u524damazon\u3067\u8cfc\u5165\u3057\u3066\u3044\u305f\u3053\u3061\u3089\u306e\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u306e\u4f7f\u3044\u9053\u304c\u7121\u3044\u304b\u3092\u8003\u3048\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u307e\u305a\u306f\u52d5\u4f5c\u78ba\u8a8d\u3092\u517c\u306d\u3066\u3001\u30d5\u30eb\u30ab\u30e9\u30fcLED\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u300c\u8ddd\u96e2\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u308f\u308b\u3082\u306e\u300d\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u52d5\u4f5c\n\u5b9f\u969b\u306e\u52d5\u4f5c\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\uff08\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068Vine\u306b\u98db\u3073\u518d\u751f\u3055\u308c\u307e\u3059\uff09\n)\n\n\u4eca\u5f8c\n\u30cd\u30c3\u30c8\u306b\u7e4b\u3044\u3067\u5728\u5e2d\u4e2d\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u884c\u3048\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u3057\u3066\u3044\u304f\u3064\u3082\u308a\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3053\u3061\u3089\u3067\u3082\u516c\u958b\u3057\u3066\u307e\u3059\u3002\nhttps://github.com/takuya-andou/UltraSonic-and-FullColorLED\n\nUltraSonic-and-FullColorLed.ino\nconst int LED_R=9;   //LED \u8d64\nconst int LED_G=11;  //LED \u7dd1\nconst int LED_B=10;  //LED \u9752\nconst int echoPin=8; // Echo Pin\nconst int trigPin=7; // Trigger Pin\n\nint maximumRange = 200; // Maximum range needed\nint minimumRange = 0; // Minimum range needed\nlong duration, distance; // Duration used to calculate distance\n\nvoid setup() {\n Serial.begin (9600);\n pinMode(trigPin, OUTPUT);\n pinMode(echoPin, INPUT);\n pinMode(LED_R, OUTPUT);\n pinMode(LED_G, OUTPUT);\n pinMode(LED_B, OUTPUT);\n}\n\nvoid loop() {\n/* The following trigPin/echoPin cycle is used to determine the\n distance of the nearest object by bouncing soundwaves off of it. */ \n digitalWrite(trigPin, LOW); \n delayMicroseconds(2); \n\n digitalWrite(trigPin, HIGH);\n delayMicroseconds(10); \n\n digitalWrite(trigPin, LOW);\n duration = pulseIn(echoPin, HIGH);\n\n //Calculate the distance (in cm) based on the speed of sound.\n distance = duration/58.2;\n\n if (distance >= maximumRange || distance <= minimumRange){\n /* Send a negative number to computer and Turn LED ON \n to indicate \"out of range\" */\n Serial.println(\"-1\");\n }\n else {\n  if(distance<=10){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 255);\n    analogWrite(LED_B, 255);\n  }\n\n  else if(distance<=30){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n  else{\n    analogWrite(LED_R, 255);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }  \n\n Serial.println(distance);\n }\n\n //Delay 50ms before next reading.\n delay(50);\n}\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n1~9\u884c\u76ee\nconst int LED_R=9;   //LED \u8d64\nconst int LED_G=11;  //LED \u7dd1\nconst int LED_B=10;  //LED \u9752\nconst int echoPin=8; // Echo Pin\nconst int trigPin=7; // Trigger Pin\n\nint maximumRange = 200; // Maximum range needed\nint minimumRange = 0; // Minimum range needed\nlong duration, distance; // Duration used to calculate distance\n\n\u3053\u3053\u306fArduino\u3068\u63a5\u7d9a\u3057\u3066\u3044\u308bPin\u756a\u53f7\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u307e\u305f\u3001\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u306e\u8a08\u6e2c\u8ddd\u96e2\u30920~200cm\u306b\u7d5e\u3063\u3066\u307e\u3059\u3002\n\n11~18\u884c\u76ee\nvoid setup() {\n Serial.begin (9600);\n pinMode(trigPin, OUTPUT);\n pinMode(echoPin, INPUT);\n pinMode(LED_R, OUTPUT);\n pinMode(LED_G, OUTPUT);\n pinMode(LED_B, OUTPUT);\n}\n\n\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3092\u4f7f\u3063\u3066\u8ddd\u96e2\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u90e8\u5206\u3082\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\uff08\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3067\u78ba\u8a8d\u3057\u306a\u3044\u5834\u5408\u306f\u4e0d\u8981\u3067\u3059\uff09\n\u6b8b\u308a\u306f\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u306e\u5165\u51fa\u529b\u3001LED\u306f\u305d\u308c\u305e\u308c\u51fa\u529b\u3068\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n20~39\u884c\u76ee\nvoid loop() {\n/* The following trigPin/echoPin cycle is used to determine the\n distance of the nearest object by bouncing soundwaves off of it. */ \n digitalWrite(trigPin, LOW); \n delayMicroseconds(2); \n\n digitalWrite(trigPin, HIGH);\n delayMicroseconds(10); \n\n digitalWrite(trigPin, LOW);\n duration = pulseIn(echoPin, HIGH);\n\n //Calculate the distance (in cm) based on the speed of sound.\n distance = duration/58.2;\n\n if (distance >= maximumRange || distance <= minimumRange){\n /* Send a negative number to computer and Turn LED ON \n to indicate \"out of range\" */\n Serial.println(\"-1\");\n }\n\n\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u3067\u8ddd\u96e2\u3092\u8a08\u6e2c\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\ntrigPin\u304b\u3089\u8d85\u97f3\u6ce2\u3092\u767a\u751f\u3057\u3066\u304b\u3089\u3001echoPin\u3067\u53d7\u3051\u53d6\u308b\u307e\u3067\u306e\u6642\u9593\u306b\u3088\u3063\u3066\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n40~56\u884c\u76ee\n else {\n  if(distance<=10){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 255);\n    analogWrite(LED_B, 255);\n  }\n\n  if(distance>10 and distance<30){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n  if(distance>30){\n    analogWrite(LED_R, 255);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n\n\u30d5\u30eb\u30ab\u30e9\u30fcLED\u5149\u3089\u305b\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\u4eca\u56de\u306f\n\n10cm\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u8d64\u8272\n10~30cm\u306e\u5834\u5408\u306f\u9ec4\u8272\n30cm\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u7dd1\u8272\n\n\u3068\u3044\u30463\u30d1\u30bf\u30fc\u30f3\u306b\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n\n58~63\u884c\u76ee\nSerial.println(distance);\n }\n\n //Delay 50ms before next reading.\n delay(50);\n}\n\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306b\u8ddd\u96e2\u3092\u8868\u793a\u3057\u3066\u300150\u30df\u30ea\u79d2\u5f85\u6a5f\u3057\u305f\u5f8c\u3001\u6b21\u306e\u8ddd\u96e2\u8a08\u6e2c\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u524damazon\u3067\u8cfc\u5165\u3057\u3066\u3044\u305f[\u3053\u3061\u3089\u306e\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc](http://amzn.to/1SPg9CG)\u306e\u4f7f\u3044\u9053\u304c\u7121\u3044\u304b\u3092\u8003\u3048\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u307e\u305a\u306f\u52d5\u4f5c\u78ba\u8a8d\u3092\u517c\u306d\u3066\u3001\u30d5\u30eb\u30ab\u30e9\u30fcLED\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u300c\u8ddd\u96e2\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u308f\u308b\u3082\u306e\u300d\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n##\u5b9f\u969b\u306e\u52d5\u4f5c\n\u5b9f\u969b\u306e\u52d5\u4f5c\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\uff08\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068Vine\u306b\u98db\u3073\u518d\u751f\u3055\u308c\u307e\u3059\uff09\n[![\u8ddd\u96e2\u306b\u3088\u3063\u3066\u8272\u304c\u5909\u308f\u308b](http://v.cdn.vine.co/r/videos/87AC1E42F61267014444240850944_4311ecffa86.1.1.4283454139876191271.mp4.jpg)](https://vine.co/v/e9aMMhPJAjO))\n\n##\u4eca\u5f8c\n\u30cd\u30c3\u30c8\u306b\u7e4b\u3044\u3067\u5728\u5e2d\u4e2d\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u884c\u3048\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u3057\u3066\u3044\u304f\u3064\u3082\u308a\u3067\u3059\u3002\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3053\u3061\u3089\u3067\u3082\u516c\u958b\u3057\u3066\u307e\u3059\u3002\nhttps://github.com/takuya-andou/UltraSonic-and-FullColorLED\n\n```UltraSonic-and-FullColorLed.ino\nconst int LED_R=9;   //LED \u8d64\nconst int LED_G=11;  //LED \u7dd1\nconst int LED_B=10;  //LED \u9752\nconst int echoPin=8; // Echo Pin\nconst int trigPin=7; // Trigger Pin\n\nint maximumRange = 200; // Maximum range needed\nint minimumRange = 0; // Minimum range needed\nlong duration, distance; // Duration used to calculate distance\n\nvoid setup() {\n Serial.begin (9600);\n pinMode(trigPin, OUTPUT);\n pinMode(echoPin, INPUT);\n pinMode(LED_R, OUTPUT);\n pinMode(LED_G, OUTPUT);\n pinMode(LED_B, OUTPUT);\n}\n\nvoid loop() {\n/* The following trigPin/echoPin cycle is used to determine the\n distance of the nearest object by bouncing soundwaves off of it. */ \n digitalWrite(trigPin, LOW); \n delayMicroseconds(2); \n\n digitalWrite(trigPin, HIGH);\n delayMicroseconds(10); \n \n digitalWrite(trigPin, LOW);\n duration = pulseIn(echoPin, HIGH);\n \n //Calculate the distance (in cm) based on the speed of sound.\n distance = duration/58.2;\n \n if (distance >= maximumRange || distance <= minimumRange){\n /* Send a negative number to computer and Turn LED ON \n to indicate \"out of range\" */\n Serial.println(\"-1\");\n }\n else {\n  if(distance<=10){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 255);\n    analogWrite(LED_B, 255);\n  }\n \n  else if(distance<=30){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n  else{\n    analogWrite(LED_R, 255);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }  \n  \n Serial.println(distance);\n }\n \n //Delay 50ms before next reading.\n delay(50);\n}\n```\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n###1~9\u884c\u76ee\n```\nconst int LED_R=9;   //LED \u8d64\nconst int LED_G=11;  //LED \u7dd1\nconst int LED_B=10;  //LED \u9752\nconst int echoPin=8; // Echo Pin\nconst int trigPin=7; // Trigger Pin\n\nint maximumRange = 200; // Maximum range needed\nint minimumRange = 0; // Minimum range needed\nlong duration, distance; // Duration used to calculate distance\n```\n\u3053\u3053\u306fArduino\u3068\u63a5\u7d9a\u3057\u3066\u3044\u308bPin\u756a\u53f7\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u307e\u305f\u3001\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u306e\u8a08\u6e2c\u8ddd\u96e2\u30920~200cm\u306b\u7d5e\u3063\u3066\u307e\u3059\u3002\n###11~18\u884c\u76ee\n```\nvoid setup() {\n Serial.begin (9600);\n pinMode(trigPin, OUTPUT);\n pinMode(echoPin, INPUT);\n pinMode(LED_R, OUTPUT);\n pinMode(LED_G, OUTPUT);\n pinMode(LED_B, OUTPUT);\n}\n```\n\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3092\u4f7f\u3063\u3066\u8ddd\u96e2\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u306e\u90e8\u5206\u3082\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\uff08\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u3067\u78ba\u8a8d\u3057\u306a\u3044\u5834\u5408\u306f\u4e0d\u8981\u3067\u3059\uff09\n\u6b8b\u308a\u306f\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u306e\u5165\u51fa\u529b\u3001LED\u306f\u305d\u308c\u305e\u308c\u51fa\u529b\u3068\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n###20~39\u884c\u76ee\n```\nvoid loop() {\n/* The following trigPin/echoPin cycle is used to determine the\n distance of the nearest object by bouncing soundwaves off of it. */ \n digitalWrite(trigPin, LOW); \n delayMicroseconds(2); \n\n digitalWrite(trigPin, HIGH);\n delayMicroseconds(10); \n \n digitalWrite(trigPin, LOW);\n duration = pulseIn(echoPin, HIGH);\n \n //Calculate the distance (in cm) based on the speed of sound.\n distance = duration/58.2;\n \n if (distance >= maximumRange || distance <= minimumRange){\n /* Send a negative number to computer and Turn LED ON \n to indicate \"out of range\" */\n Serial.println(\"-1\");\n }\n```\n\u8d85\u97f3\u6ce2\u30bb\u30f3\u30b5\u30fc\u3067\u8ddd\u96e2\u3092\u8a08\u6e2c\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\ntrigPin\u304b\u3089\u8d85\u97f3\u6ce2\u3092\u767a\u751f\u3057\u3066\u304b\u3089\u3001echoPin\u3067\u53d7\u3051\u53d6\u308b\u307e\u3067\u306e\u6642\u9593\u306b\u3088\u3063\u3066\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n###40~56\u884c\u76ee\n```\n else {\n  if(distance<=10){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 255);\n    analogWrite(LED_B, 255);\n  }\n \n  if(distance>10 and distance<30){\n    analogWrite(LED_R, 150);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n  if(distance>30){\n    analogWrite(LED_R, 255);\n    analogWrite(LED_G, 150);\n    analogWrite(LED_B, 255);\n  }\n```\n\u30d5\u30eb\u30ab\u30e9\u30fcLED\u5149\u3089\u305b\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\n\n- 10cm\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u8d64\u8272\n- 10~30cm\u306e\u5834\u5408\u306f\u9ec4\u8272\n- 30cm\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u7dd1\u8272\n\n\u3068\u3044\u30463\u30d1\u30bf\u30fc\u30f3\u306b\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n###58~63\u884c\u76ee\n```\nSerial.println(distance);\n }\n \n //Delay 50ms before next reading.\n delay(50);\n}\n```\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u306b\u8ddd\u96e2\u3092\u8868\u793a\u3057\u3066\u300150\u30df\u30ea\u79d2\u5f85\u6a5f\u3057\u305f\u5f8c\u3001\u6b21\u306e\u8ddd\u96e2\u8a08\u6e2c\u306b\u306a\u308a\u307e\u3059\u3002\n"}