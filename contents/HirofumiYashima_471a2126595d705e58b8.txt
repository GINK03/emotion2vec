{"context": " More than 1 year has passed since last update.\n\n\uff08 \u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u305f\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \uff09\n\n\n1.\u306e\u63b2\u8f09\u30b3\u30fc\u30c9\u306f\u3001\u4e00\u90e8\u3068\u3053\u308d\u3069\u3053\u308d\u306b\u3001\u5909\u6570\u672a\u5b9a\u7fa9 \u3084 try\u53e5\u306e\u8a18\u8ff0\u76db\u308c\u306a\u3069\u304c\u3042\u308b\u305f\u3081\u3001\u9069\u5b9c \u88dc\u3063\u3066\u4f7f\u308f\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n\uff11\uff0eQiita\u8a18\u4e8b \u300c\u682a\u4fa1\u3092Yahoo Finance\u304b\u3089\u53d6\u5f97\u3059\u308b[Python]\u300d\n2. \u72ec\u5b66Linux \u300cPython \u30b9\u30af\u30ea\u30d7\u30c8\u3067Gmail\u7d4c\u7531\u306e\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u300d\n\n\n\uff08\u30b3\u30fc\u30c9\u629c\u3051\u76db\u308c\u7b87\u6240\uff09\n\n1. import_jsm \u306e\u76f4\u5f8c\u306b\u3001q = jsm.Quotes()\u3000\u306e\u8a18\u8ff0\u6f0f\u308c\n2. ccodes\u3000\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u672a\u5b9a\u7fa9\n3. except\u53e5 \u306b\u5bfe\u5fdc\u3059\u308b try\u53e5\u3000\u306e\u8a18\u8ff0\u6f0f\u308c\n4. \u4ee5\u4e0b\u306f\u3001\u8aa4\u308a \n     start_date=start_date,end_date=end_date)\n   \u6b63\u3057\u304f\u306f\u3001\u4ee5\u4e0b\u3002\n     start_date=default_start_date,end_date=default_end_date)\n\n\n\uff08\u3000\u30e2\u30b8\u30e5\u30fc\u30eb\u4ed5\u69d8\u53c2\u8003 \uff09\n\n\nPython Pypi jsm 0.14\n\n\n\n\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 1 \u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u682a\u4fa1\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u307f\u308b\uff08\u624b\u7fd2\u3044\uff09\n\n\n\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3067\u3001 brand_data\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u5404\u8981\u7d20\uff08brand)\u306b\u5bfe\u3057\u3066\u9806\u756a\u306b\u3001brand\u306e\u5404\u5c5e\u6027\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3001list_of_dict_brand\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u8ffd\u8a18\uff08append\uff09\u5b9f\u884c\n\nPython 2.7\nimport jsm\nq = jsm.Quotes()\n\nb = jsm.Brand()\nIDS = b.IDS\n\nfor industry_code in IDS.keys():\n    industry_name = IDS[industry_code]\n    brand_data = q.get_brand(industry_code)\n    [list_of_dict_brand.append({\"ccode\":brand.ccode,\n                \"industry_code\":industry_code,\n                \"industry_name\":industry_name,\n                \"market\":brand.market,\n                \"info\":brand.info\n                }) for brand in brand_data]\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001None \u306e\u5d50\u306b\u306a\u308b\u304c\u3001\u7d42\u4e86\u5f8c\u3001list_of_dict_brand \u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u6570\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\u3061\u3083\u3093\u3068\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n\n\n\uff08\u4ee5\u964d\u3001\u6570\u5206\u3001\u3053\u306eNone\u306e\u8868\u793a\u304c\u7d9a\u304f\uff09\n\n\uff08\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u304b\u3001\u78ba\u8a8d\uff09\n\n\u9298\u67c4\u30b3\u30fc\u30c9\n\n\n\u751f\u6210\u3057\u305f list_of_dict_brand\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306e\u6700\u521d\u306e\uff12\uff11\u8981\u7d20\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5404\u8981\u7d20\u306b\u3001\"ccode\" key\u306b\u7d10\u4ed8\u3051\u3089\u308c\u305f\u5024\uff08value)\u3092\u8868\u793a\u3055\u305b\u308b\u3002\n\nPython 2.7\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"ccode\"])\n\n\n\n\n\n\u696d\u7a2e\u30b3\u30fc\u30c9\n\n\n\u4ee5\u4e0b\u3001\u540c\u69d8\u306b\u3057\u3066\u3001\u5404\u8981\u7d20\uff08\u8f9e\u66f8\u578b\uff09\u306b\u3001\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30ad\u30fc \uff08key\uff09 \u3092\u6307\u5b9a\u3057\u3066\u3001\u7d10\u4ed8\u3051\u3089\u308c\u305f\u5024 \uff08value) \u3092\u8868\u793a\u3002\n\nPython 2.7\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"industry_code\"])\n\n\n\n\n\n\u696d\u7a2e\u540d\n\n\nPython 2.7\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"industry_name\"])\n\n\n\n\n\u305d\u306e\u4ed6\u3001\u548c\u6587\u6587\u5b57\u5217\u8868\u793a\u306e\u9805\u76ee\u3082\u78ba\u8a8d\n\n\n\u6700\u521d\u306e\uff16\u8981\u7d20\u3092\u8868\u793a\n\nPython 2.7\nfor element in list_of_dict_brand[0:5]:\n    print(element[\"industry_name\"])\n    print(element[\"market\"])\n    print(element[\"info\"])\n\n\n\n\nPython 2.7\nfor element in list_of_dict_brand[0:5]:\n    print(\"Info:  \" + element[\"info\"] + \"/  market:  \" + element[\"market\"] + \"/  info:  \" + element[\"market\"] + \"\\n\")\n\n\n\n\nPython 2.7\nfor element in list_of_dict_brand[0:5]:\n    print(\"ccode:  \" + element([\"ccode\"]) + \"  industry_code:  \" + element[\"industry_code\"] + \"\\n\" +\\\n      \"Info:  \" + element[\"info\"] + \"/  market:  \" + element[\"market\"] + \"/  info:  \" + element[\"market\"] + \"\\n\\n\")\n\n\n\n\n( \u8981\u7d20\u306e\u8981\u7d20\u6570\u3092\u78ba\u8a8d \uff09\n\n\nPython 2.7\nccodes = []\n\nfor element in list_of_dict_brand:\n    ccodes.append(element[\"ccode\"])\n\nprint(len(ccodes))\n\nfor ccode in ccodes[0:5]:\n    prin(ccode)\n\n\n\n\n\u7d9a\u3044\u3066\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u8ca1\u52d9\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n\nPython 2.7\nlist_of_dict_finance = []\n\ncnt = 0\n\nfor ccode in ccodes:\n    try:\n        finance_data = q.get_finance(ccode)\n        list_of_dict_finance.append({\"ccode\":ccode,\n                                     \"market_issued\":finance_data.market_cap,\n                     \"shares_issues\":finance_data.shares_issues,\n                     \"dividend_yield\":finance_data.dividend_yield,\n                     \"dividend_one\":finance_data.dividend_one,\n                     \"per\":finance_data.per,\n                     \"pbr\":finance_data.pbr,\n                     \"eps\":finance_data.eps,\n                     \"bps\":finance_data.bps,\n                     \"price_min\":finance_data.price_min,\n                     \"round_lot\":finance_data.round_lot})\n    except:\n        print \"Error in Financial Data \", ccode\n\n\n\uff08Error \u51fa\u529b\u304c\u3064\u3065\u304f\uff09\n\n\uff08\u4e2d\u7565\uff09\n\n\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3068\u3001\u8981\u7d20\u306e\u6570\u306f\u30bc\u30ed\n\nPython 2.7\nprint(len(list_of_dict_finance))\n\n\n0\n\n\nPython 2.7\nfor finance_data in list_of_dict_finance:\n    print(finance_data)\n\n\n\uff08\u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044\uff09\n\n\n\n\u7d9a\u3044\u3066\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u682a\u4fa1\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\n\n2015\u5e741\u67081\u65e5\uff08\u5e02\u5834\u53d6\u5f15\u6240\u5e74\u4f11\u65e5\u3060\u304c\uff09\u301c\u672c\u65e5\u307e\u3067\u306e\u65e5\u4ed8\u3092\u6307\u5b9a\n\n\nPython 2.7\nlist_of_dict_stock = []\n\nimport datetime\n\ndefault_start_date = datetime.date(2015,1,1)\ndefault_end_date = datetime.date.today()\n\nprint(default_end_date)\n\n\n\n\u672c\u65e5\u306e\u65e5\u4ed8\u306f\u30012015\u5e742\u670812\u65e5\n2015-02-12\n\n\n1.   quote_data \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u3001\u3042\u308b\u682a\u5f0f\u30b3\u30fc\u30c9\u756a\u53f7\u306e\uff08\uff11\u9298\u67c4\u306e\uff09\u682a\u4fa1\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49 \u306e\u30c7\u30fc\u30bf\u304c\u3001\u6307\u5b9a\u6a5f\u9996\u65e5\uff5e\u6307\u5b9a\u671f\u672b\u65e5\u307e\u3067\u306e\u65e5\u6570\u5206\u3001\u683c\u7d0d\u3055\u308c\u308b\n2.   \u6b21\u306b\u3001\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3063\u3066\u3001quote_data \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u304b\u3089\u8981\u7d20\uff08\u3042\u308b\uff11\u9298\u67c4\u306e\uff11\u65e5\u5206\u306e\u682a\u4fa1\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49 \u306e\u30c7\u30fc\u30bf\uff09\u3092\u3001quote\u3000\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u3066\u3001quote \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5404\u8981\u7d20\uff08\u59cb\u5024\u3001\u7d42\u5024\u3001\u7b49\uff09\u3092\u3072\u3068\u3064\u3072\u3068\u3064\u53d6\u308a\u51fa\u3057\u3066\u3001list_of_dict_stock \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u3001Key : Value \u66f8\u5f0f\uff08Key\u540d\u79f0\uff1a\u59cb\u5024 \u306b\u5bfe\u3057\u3066\u3001value\u5024\uff1a\u59cb\u5024\u6570\u5024\u306e\u5f62\u5f0f\uff09\u306e\u8f9e\u66f8\u578b\uff08dict\u578b\uff09\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8981\u7d20\u3068\u3057\u3066\u3001\u8ffd\u8a18\uff08append)\u3057\u3066\u3001\u683c\u7d0d\u3057\u3066\u3044\u304f \n\nPython 2.7\nfor ccode in ccodes:\n    quote_data = q.get_historical_prices(ccode, jsm.DAILY, start_date = default_start_date, end_date = default_end_date)\n    if quote_data is None:\n        continue\n    else:\n       try:\n           [list_of_dict_stock.append({\"ccode\":ccode,\n                           \"date\":quote.date,\n                       \"open\":quote.open,\n                       \"high\":quote.high,\n                       \"low\":quote.low,\n                       \"close\":quote.close,\n                       \"volume\":quote.volume}) for quote in quote_data]\n       except:\n            print \"Error in Quote Data \", ccode  \n\n\n\n\uff08None \u51fa\u529b\u304c\u3064\u3065\u304f\uff09\n\n\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3068\u3001\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\n\nPython 2.7\nprint(len(list_of_dict_stock))\n\n\n7739\n\n\nPython 2.7\nfor stock_data in list_of_dict_stock[0:5]:\n    print(stock_data)\n\n\n\n\u9298\u67c4\u30b3\u30fc\u30c9\u756a\u53f7 1909 \u306e\u682a\u5f0f\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49\u306e\u30c7\u30fc\u30bf\u304c\u3001\uff11\u884c\u306b\u3064\u304d\uff11\uff08\u53d6\u5f15\uff09\u65e5\u5206\u3001\u51fa\u529b\u3055\u308c\u308b \uff08list_of_dict_sotck \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u306f\u3001\uff11\u8981\u7d20\uff1d\uff11\uff08\u53d6\u5f15\uff09\u65e5\u5206\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u7b49\u306e\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff09\n\n\n\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n\nPython 2.7\nimport types\n\nprint(type(list_of_dict_stock))\n\n\n<type 'list'>\n\n\nPython 2.7\nfor stock_data in list_of_dict_stock[0:5]:\n    print(type(stock_data))\n\n\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n\n\n\u682a\u4fa1\u30b3\u30fc\u30c9 1909\u3000(\u65e5\u672c\u30c9\u30e9\u30a4\u30b1\u30df\u30ab\u30eb\uff08\u682a\uff09\uff09\u306e\u682a\u4fa1 \u59cb\u5024\u3068\u7d42\u5024\u3092\u8868\u793a\n\n\nPython 2.7\nfor stock_data in list_of_dict_stock:\n    if(stock_data[\"ccode\"] == \"1909\":\n            print(stock_data[\"open\"], \"   \", stock_data[\"close\"])\n\n\n\n\u540c\u69d8\u306b\u3001\u682a\u4fa1\u30b3\u30fc\u30c9 1909 (\u65e5\u672c\u30c9\u30e9\u30a4\u30b1\u30df\u30ab\u30eb\uff08\u682a\uff09\uff09\u306e\u9298\u67c4\u306b\u7d5e\u3063\u3066\u3001\u5404\u53d6\u5f15\u65e5\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u306e\u6570\u5024\u3092\u305d\u308c\u305e\u308c\u30ea\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u8fbc\u3093\u3067\u307f\u308b\n\nPython 2.7\ncode_1909_stock_open_list = []\ncode_1909_stock_close_list = []\ncode_1909_stock_high_list = []\ncode_1909_stock_low_list = []\n\nfor stock_data in list_of_dict_stock:\n    if(stock_data[\"ccode\"] == '1909'):\n        code_1909_stock_open_list.append(stock_data[\"open\"])\n    code_1909_stock_close_list.append(stock_data[\"close\"])\n    code_1909_stock_high_list.append(stock_data[\"high\"])\n    code_1909_stock_low_list.append(stock_data[\"low\"])\n\nprint(len(code_1909_stock_open_list))\n\n\n27\n\n\n\u8981\u7d20\u306e\u6570\u306f\u3001\u306a\u305c\u304b\u3001\u5b89\u5024\u3060\u3051\u6975\u7aef\u306b\u5927\u304d\u3044\n\nPython 2.7\nprint(len(code_1909_stock_open_list) == len(code_1909_stock_close_list) == len(code_1909_stock_high_list) == len(code_1909_stock_low_list))\n\n\nFlase\n\n\nPython 2.7\nprint(len(code_1909_stock_open_list))\n\n\n27\n\n\nPython 2.7\nprint(len(code_1909_stock_close_list))\n\n\n27\n\n\nPython 2.7\nprint(len(code_1909_stock_high_list))\n\n\n27\n\n\nPython 2.7\nprint(len(code_1909_stock_low_list))\n\n\n7739\n\n\n\u8981\u7d20\u306e\u6570\u304c\u305d\u308d\u3063\u3066\u3044\u308b\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u306e\u5909\u52d5\u306e\u69d8\u5b50\u3092\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u8868\u73fe\n\nPython 2.7\nimport matplotlib.pyplot as plt\n\nplt.plot(code_1909_stock_open_list)\nplt.plot(code_1909_stock_close_list)\nplt.plot(code_1909_stock_high_list)\n\nplt.show()\n\n\n\n\n\u30b0\u30e9\u30d5\u3092png\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\n\nPython 2.7\nimport matplotlib.pyplot as plt\n\nplt.plot(code_1909_stock_open_list)\nplt.plot(code_1909_stock_close_list)\nplt.plot(code_1909_stock_high_list)\n\nfilename = \"code 1909 stock_historical_seriese (Jan.1.2015-Feb.12.2015).png\"\nplt.savefig(filename)\n\n\n\n\n\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff12\u306e\u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u3066\u3001\u30b0\u30e9\u30d5\u3092\u30e1\u30fc\u30eb\u306b\u6dfb\u4ed8\u3057\u3066\u3001Gmail \u306b\u914d\u4fe1\u3057\u3066\u307f\u308b\n\nemail_png_attachment.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport smtplib\nfrom email.MIMEText import MIMEText\nfrom email.MIMEImage import MIMEImage\nfrom email.MIMEMultipart import MIMEMultipart\nfrom email.Header import Header\nfrom email.Utils import formatdate\n\ndef create_message(from_addr, to_addr, subject, body, encoding):\n    msg = MIMEMultipart()\n    msg['Subject'] = Header(subject, encoding)\n    msg['From'] = from_addr\n    msg['To'] = to_addr\n    msg['Date'] = formatdate()\n\n    related = MIMEMultipart('related')\n    alt = MIMEMultipart('alternative')\n    related.attach(alt)\n\n    content = MIMEText(body, 'plain', encoding)\n    alt.attach(content)\n\n    for filename in ['code 1909 stock_historical_series (Jan.1.2015-Feb.12.2015).png']:\n# \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f['\u30d5\u30a1\u30a4\u30eb\uff11' , '\u30d5\u30a1\u30a4\u30eb\uff12' , \u2026]\u306e\u5f62\u306b\u3059\u308b\u3002\n        fp = file('%s' % filename, 'rb')\n        img = MIMEImage(fp.read(), 'png', name=filename)\n        related.attach(img)\n\n    msg.attach(related)\n    return msg\n    pass\n\ndef send_via_gmail(from_addr, to_addr, msg):\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.ehlo()\n    s.starttls()\n    s.ehlo()\n    s.login('hirofumi.yashima2012@gmail.com', 'XXXXX')  # XXXXX\u306b\u306fGmail\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u6587\u5b57\u5217\u3092\u8a18\u8ff0\n    s.sendmail(from_addr, [to_addr], msg.as_string())\n    s.close()\n\nif __name__ == '__main__':\n    from_addr = 'hirofumi.yashima2012@gmail.com'\n    to_addr = 'hirofumi.yashima2012@gmail.com'\n    title = '\u682a\u4fa1\u30b3\u30fc\u30c91909 2015\u5e74\u5e74\u59cb\u4ee5\u964d\u306e\u682a\u4fa1\u539f\u7cfb\u5217\u63a8\u79fb\u30b0\u30e9\u30d5'\n    body = '\u30b0\u30e9\u30d5\u3092\u6dfb\u4ed8\u3057\u307e\u3059\u3002'\n    msg = create_message(from_addr, to_addr, title, body, 'utf-8')\n    send_via_gmail(from_addr, to_addr, msg)\n\n\n\n\n\n\u3000Gmail \u53d7\u4fe1\u30dc\u30c3\u30af\u30b9\u306b\u3001\u6dfb\u4ed8\u304c\u4ed8\u3044\u305f\u30e1\u30fc\u30eb\u306e\u7740\u4fe1\u6210\u529f\n\n\n\n\n#### **\uff08 \u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u305f\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \uff09**\n##### 1.\u306e\u63b2\u8f09\u30b3\u30fc\u30c9\u306f\u3001\u4e00\u90e8\u3068\u3053\u308d\u3069\u3053\u308d\u306b\u3001\u5909\u6570\u672a\u5b9a\u7fa9 \u3084 try\u53e5\u306e\u8a18\u8ff0\u76db\u308c\u306a\u3069\u304c\u3042\u308b\u305f\u3081\u3001\u9069\u5b9c \u88dc\u3063\u3066\u4f7f\u308f\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n* [\uff11\uff0e_Qiita\u8a18\u4e8b_ \u300c\u682a\u4fa1\u3092Yahoo Finance\u304b\u3089\u53d6\u5f97\u3059\u308b[Python]\u300d](http://qiita.com/hironishi/items/4829a1b5493136f9e328#comment-6279af893cf9a7db8384)\n* [2. \u72ec\u5b66Linux \u300cPython \u30b9\u30af\u30ea\u30d7\u30c8\u3067Gmail\u7d4c\u7531\u306e\u30e1\u30fc\u30eb\u3092\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u300d](http://blog.livedoor.jp/vine_user/archives/51575120.html)\n\n##### **\uff08\u30b3\u30fc\u30c9\u629c\u3051\u76db\u308c\u7b87\u6240\uff09**\n\n    1. import_jsm \u306e\u76f4\u5f8c\u306b\u3001q = jsm.Quotes()\u3000\u306e\u8a18\u8ff0\u6f0f\u308c\n    2. ccodes\u3000\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u672a\u5b9a\u7fa9\n    3. except\u53e5 \u306b\u5bfe\u5fdc\u3059\u308b try\u53e5\u3000\u306e\u8a18\u8ff0\u6f0f\u308c\n    4. \u4ee5\u4e0b\u306f\u3001\u8aa4\u308a \n         start_date=start_date,end_date=end_date)\n       \u6b63\u3057\u304f\u306f\u3001\u4ee5\u4e0b\u3002\n         start_date=default_start_date,end_date=default_end_date)\n\n#### **\uff08\u3000\u30e2\u30b8\u30e5\u30fc\u30eb\u4ed5\u69d8\u53c2\u8003 \uff09**\n* [_Python Pypi_ jsm 0.14](https://pypi.python.org/pypi/jsm)\n\n___\n\n### **\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 1 \u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u682a\u4fa1\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u307f\u308b\uff08\u624b\u7fd2\u3044\uff09**\n\n##### \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3067\u3001 brand_data\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u5404\u8981\u7d20\uff08brand)\u306b\u5bfe\u3057\u3066\u9806\u756a\u306b\u3001brand\u306e\u5404\u5c5e\u6027\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3001list_of_dict_brand\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u8ffd\u8a18\uff08append\uff09\u5b9f\u884c \n\n```{Python:Python 2.7}\nimport jsm\nq = jsm.Quotes()\n\nb = jsm.Brand()\nIDS = b.IDS\n\nfor industry_code in IDS.keys():\n    industry_name = IDS[industry_code]\n    brand_data = q.get_brand(industry_code)\n    [list_of_dict_brand.append({\"ccode\":brand.ccode,\n\t\t\t\t\"industry_code\":industry_code,\n\t\t\t\t\"industry_name\":industry_name,\n\t\t\t\t\"market\":brand.market,\n\t\t\t\t\"info\":brand.info\n\t\t\t\t}) for brand in brand_data]\n```\n\n**\u5b9f\u884c\u3059\u308b\u3068\u3001_None_ \u306e\u5d50\u306b\u306a\u308b\u304c\u3001\u7d42\u4e86\u5f8c\u3001list_of_dict_brand \u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u6570\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\u3061\u3083\u3093\u3068\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b**\n\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/45331423-ede7-fba7-0985-a53e2658601e.png)\n\n\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/729ba9da-b28c-120a-aca1-cd24211af4c7.png)\n\n**\uff08\u4ee5\u964d\u3001\u6570\u5206\u3001\u3053\u306e_None_\u306e\u8868\u793a\u304c\u7d9a\u304f\uff09**\n\n![pic_2_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/2777f04d-b5db-b73c-154c-68ebe923ecf2.png)\n\n**\uff08\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u304b\u3001\u78ba\u8a8d\uff09**\n\n* \u9298\u67c4\u30b3\u30fc\u30c9\n\n##### \u751f\u6210\u3057\u305f list_of_dict_brand\u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306e\u6700\u521d\u306e\uff12\uff11\u8981\u7d20\uff08\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3060\u3051\u53d6\u308a\u51fa\u3057\u3066\u3001\u8f9e\u66f8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u5404\u8981\u7d20\u306b\u3001\"ccode\" key\u306b\u7d10\u4ed8\u3051\u3089\u308c\u305f\u5024\uff08value)\u3092\u8868\u793a\u3055\u305b\u308b\u3002\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"ccode\"])\n\n```\n\n![pic_3.png](https://qiita-image-store.s3.amazonaws.com/0/43487/71a27832-c250-7c98-2d8f-eb7d6b7bb831.png)\n\n* \u696d\u7a2e\u30b3\u30fc\u30c9\n\n##### \u4ee5\u4e0b\u3001\u540c\u69d8\u306b\u3057\u3066\u3001\u5404\u8981\u7d20\uff08\u8f9e\u66f8\u578b\uff09\u306b\u3001\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30ad\u30fc \uff08key\uff09 \u3092\u6307\u5b9a\u3057\u3066\u3001\u7d10\u4ed8\u3051\u3089\u308c\u305f\u5024 \uff08value) \u3092\u8868\u793a\u3002\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"industry_code\"])\n\n```\n\n![pic_4.png](https://qiita-image-store.s3.amazonaws.com/0/43487/bdcb4e1d-0f3e-6ae3-74c0-51996a985930.png)\n\n* \u696d\u7a2e\u540d\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:20]:\n    print(element[\"industry_name\"])\n```\n\n![pic_5.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f2d1dc48-39ec-aa09-8ae3-fb144f303abe.png)\n\n* \u305d\u306e\u4ed6\u3001\u548c\u6587\u6587\u5b57\u5217\u8868\u793a\u306e\u9805\u76ee\u3082\u78ba\u8a8d\n\n##### \u6700\u521d\u306e\uff16\u8981\u7d20\u3092\u8868\u793a\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:5]:\n    print(element[\"industry_name\"])\n    print(element[\"market\"])\n    print(element[\"info\"])\n```\n\n![pic_6.png](https://qiita-image-store.s3.amazonaws.com/0/43487/25201857-dcf0-ab16-2493-833f25a72ca7.png)\n\n\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:5]:\n    print(\"Info:  \" + element[\"info\"] + \"/  market:  \" + element[\"market\"] + \"/  info:  \" + element[\"market\"] + \"\\n\")\n```\n\n\n![pic_7.png](https://qiita-image-store.s3.amazonaws.com/0/43487/39cc5a31-8e3f-6817-4d74-0c392cc6724e.png)\n\n\n\n```{Python:Python 2.7}\nfor element in list_of_dict_brand[0:5]:\n    print(\"ccode:  \" + element([\"ccode\"]) + \"  industry_code:  \" + element[\"industry_code\"] + \"\\n\" +\\\n\t  \"Info:  \" + element[\"info\"] + \"/  market:  \" + element[\"market\"] + \"/  info:  \" + element[\"market\"] + \"\\n\\n\")\n```\n\n![pic_8.png](https://qiita-image-store.s3.amazonaws.com/0/43487/762a667b-1974-43d2-9ad6-8ee56e3eb49d.png)\n\n##### **( \u8981\u7d20\u306e\u8981\u7d20\u6570\u3092\u78ba\u8a8d \uff09**\n\n```{Python:Python 2.7}\nccodes = []\n\nfor element in list_of_dict_brand:\n    ccodes.append(element[\"ccode\"])\n\nprint(len(ccodes))\n\nfor ccode in ccodes[0:5]:\n    prin(ccode)\n```\n\n\n![pic_9.png](https://qiita-image-store.s3.amazonaws.com/0/43487/7e4b7c2a-4638-6afd-cd82-5defacd6ef15.png)\n\n#### **\u7d9a\u3044\u3066\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u8ca1\u52d9\u30c7\u30fc\u30bf\u3092\u53d6\u5f97**\n\n```{Python:Python 2.7}\nlist_of_dict_finance = []\n\ncnt = 0\n\nfor ccode in ccodes:\n    try:\n        finance_data = q.get_finance(ccode)\n        list_of_dict_finance.append({\"ccode\":ccode,\n                                     \"market_issued\":finance_data.market_cap,\n\t\t\t\t     \"shares_issues\":finance_data.shares_issues,\n\t\t\t\t     \"dividend_yield\":finance_data.dividend_yield,\n\t\t\t\t     \"dividend_one\":finance_data.dividend_one,\n\t\t\t\t     \"per\":finance_data.per,\n\t\t\t\t     \"pbr\":finance_data.pbr,\n\t\t\t\t     \"eps\":finance_data.eps,\n\t\t\t\t     \"bps\":finance_data.bps,\n\t\t\t\t     \"price_min\":finance_data.price_min,\n\t\t\t\t     \"round_lot\":finance_data.round_lot})\n    except:\n        print \"Error in Financial Data \", ccode\n```\n\n\n**\uff08_Error_ \u51fa\u529b\u304c\u3064\u3065\u304f\uff09**\n![pic_10.png](https://qiita-image-store.s3.amazonaws.com/0/43487/19d025a8-816b-56b9-e12a-8bdb7cab1d19.png)\n\n**\uff08\u4e2d\u7565\uff09**\n![pic_11.png](https://qiita-image-store.s3.amazonaws.com/0/43487/09f23eaa-f21d-d6f7-70fe-bc97ef1ecb25.png)\n\n**\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3068\u3001\u8981\u7d20\u306e\u6570\u306f\u30bc\u30ed**\n\n\n```{Python:Python 2.7}\nprint(len(list_of_dict_finance))\n```\n\n\n```\n0\n```\n\n\n```{Python:Python 2.7}\nfor finance_data in list_of_dict_finance:\n    print(finance_data)\n```\n\n```\n\uff08\u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044\uff09\n```\n\n![pic_12.png](https://qiita-image-store.s3.amazonaws.com/0/43487/ba9ea6d3-8240-ef78-b9dc-af044afbeed2.png)\n\n#### **\u7d9a\u3044\u3066\u3001\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u306e\u30b3\u30fc\u30c9\u3092\u501f\u308a\u3066\u3001\u682a\u4fa1\u30c7\u30fc\u30bf\u3092\u53d6\u5f97**\n\n\n##### **2015\u5e741\u67081\u65e5\uff08\u5e02\u5834\u53d6\u5f15\u6240\u5e74\u4f11\u65e5\u3060\u304c\uff09\u301c\u672c\u65e5\u307e\u3067\u306e\u65e5\u4ed8\u3092\u6307\u5b9a**\n\n```{Python:Python 2.7}\nlist_of_dict_stock = []\n\nimport datetime\n\ndefault_start_date = datetime.date(2015,1,1)\ndefault_end_date = datetime.date.today()\n\nprint(default_end_date)\n```\n\n##### \u672c\u65e5\u306e\u65e5\u4ed8\u306f\u30012015\u5e742\u670812\u65e5\n\n```\n2015-02-12\n```\n\n\n![pic_13.png](https://qiita-image-store.s3.amazonaws.com/0/43487/e70d28e6-9d13-3dd7-5a06-89ed358db7d2.png)\n\n\n   **1.   _quote_data_ \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u3001\u3042\u308b\u682a\u5f0f\u30b3\u30fc\u30c9\u756a\u53f7\u306e\uff08\uff11\u9298\u67c4\u306e\uff09\u682a\u4fa1\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49 \u306e\u30c7\u30fc\u30bf\u304c\u3001\u6307\u5b9a\u6a5f\u9996\u65e5\uff5e\u6307\u5b9a\u671f\u672b\u65e5\u307e\u3067\u306e\u65e5\u6570\u5206\u3001\u683c\u7d0d\u3055\u308c\u308b**\n\n   **2.   \u6b21\u306b\u3001\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3063\u3066\u3001_quote_data_ \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u304b\u3089\u8981\u7d20\uff08\u3042\u308b\uff11\u9298\u67c4\u306e\uff11\u65e5\u5206\u306e\u682a\u4fa1\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49 \u306e\u30c7\u30fc\u30bf\uff09\u3092\u3001_quote_\u3000\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u3066\u3001_quote_ \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5404\u8981\u7d20\uff08\u59cb\u5024\u3001\u7d42\u5024\u3001\u7b49\uff09\u3092\u3072\u3068\u3064\u3072\u3068\u3064\u53d6\u308a\u51fa\u3057\u3066\u3001_list_of_dict_stock_ \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u3001_Key_ : _Value_ \u66f8\u5f0f\uff08Key\u540d\u79f0\uff1a\u59cb\u5024 \u306b\u5bfe\u3057\u3066\u3001value\u5024\uff1a\u59cb\u5024\u6570\u5024\u306e\u5f62\u5f0f\uff09\u306e\u8f9e\u66f8\u578b\uff08dict\u578b\uff09\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8981\u7d20\u3068\u3057\u3066\u3001\u8ffd\u8a18\uff08append)\u3057\u3066\u3001\u683c\u7d0d\u3057\u3066\u3044\u304f** \n\n```{Python:Python 2.7}\nfor ccode in ccodes:\n    quote_data = q.get_historical_prices(ccode, jsm.DAILY, start_date = default_start_date, end_date = default_end_date)\n    if quote_data is None:\n        continue\n    else:\n       try:\n           [list_of_dict_stock.append({\"ccode\":ccode,\n        \t\t\t       \"date\":quote.date,\n\t\t\t\t       \"open\":quote.open,\n\t\t\t\t       \"high\":quote.high,\n\t\t\t\t       \"low\":quote.low,\n\t\t\t\t       \"close\":quote.close,\n\t\t\t\t       \"volume\":quote.volume}) for quote in quote_data]\n       except:\n            print \"Error in Quote Data \", ccode  \n```\n\n\n![pic_14.png](https://qiita-image-store.s3.amazonaws.com/0/43487/10b8ebfe-1aa3-c027-83cd-45709a5e7abe.png)\n\n**\uff08_None_ \u51fa\u529b\u304c\u3064\u3065\u304f\uff09**\n\n![pic_15.png](https://qiita-image-store.s3.amazonaws.com/0/43487/1d04f99c-f867-7252-ee8e-50458b7f567a.png)\n\n**\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3068\u3001\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b**\n\n\n```{Python:Python 2.7}\nprint(len(list_of_dict_stock))\n```\n\n\n```\n7739\n```\n\n\n```{Python:Python 2.7}\nfor stock_data in list_of_dict_stock[0:5]:\n    print(stock_data)\n```\n\n##### **\u9298\u67c4\u30b3\u30fc\u30c9\u756a\u53f7 1909 \u306e\u682a\u5f0f\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u7b49\u306e\u30c7\u30fc\u30bf\u304c\u3001\uff11\u884c\u306b\u3064\u304d\uff11\uff08\u53d6\u5f15\uff09\u65e5\u5206\u3001\u51fa\u529b\u3055\u308c\u308b \uff08_list_of_dict_sotck_ \u914d\u5217\uff08\u30ea\u30b9\u30c8\u578b\uff09\u306b\u306f\u3001\uff11\u8981\u7d20\uff1d\uff11\uff08\u53d6\u5f15\uff09\u65e5\u5206\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u7b49\u306e\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff09**\n\n![pic_16.png](https://qiita-image-store.s3.amazonaws.com/0/43487/dc9e829b-7114-10c2-cba9-5104c9af4730.png)\n\n**\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d**\n\n```{Python:Python 2.7}\nimport types\n\nprint(type(list_of_dict_stock))\n```\n\n```\n<type 'list'>\n```\n\n```{Python:Python 2.7}\nfor stock_data in list_of_dict_stock[0:5]:\n    print(type(stock_data))\n```\n\n```\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n<type 'dict'>\n```\n\n##### **\u682a\u4fa1\u30b3\u30fc\u30c9 1909\u3000(\u65e5\u672c\u30c9\u30e9\u30a4\u30b1\u30df\u30ab\u30eb\uff08\u682a\uff09\uff09\u306e\u682a\u4fa1 \u59cb\u5024\u3068\u7d42\u5024\u3092\u8868\u793a**\n\n```{Python:Python 2.7}\nfor stock_data in list_of_dict_stock:\n    if(stock_data[\"ccode\"] == \"1909\":\n            print(stock_data[\"open\"], \"   \", stock_data[\"close\"])\n```\n\n![pic_17.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f35deb3f-67ad-81cb-0337-155a97bce161.png)\n\n**\u540c\u69d8\u306b\u3001\u682a\u4fa1\u30b3\u30fc\u30c9 1909 (\u65e5\u672c\u30c9\u30e9\u30a4\u30b1\u30df\u30ab\u30eb\uff08\u682a\uff09\uff09\u306e\u9298\u67c4\u306b\u7d5e\u3063\u3066\u3001\u5404\u53d6\u5f15\u65e5\u306e\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u3001\u5b89\u5024\u306e\u6570\u5024\u3092\u305d\u308c\u305e\u308c\u30ea\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u8fbc\u3093\u3067\u307f\u308b**\n\n\n```{Python:Python 2.7}\ncode_1909_stock_open_list = []\ncode_1909_stock_close_list = []\ncode_1909_stock_high_list = []\ncode_1909_stock_low_list = []\n\nfor stock_data in list_of_dict_stock:\n    if(stock_data[\"ccode\"] == '1909'):\n        code_1909_stock_open_list.append(stock_data[\"open\"])\n\tcode_1909_stock_close_list.append(stock_data[\"close\"])\n\tcode_1909_stock_high_list.append(stock_data[\"high\"])\n\tcode_1909_stock_low_list.append(stock_data[\"low\"])\n\nprint(len(code_1909_stock_open_list))\n```\n\n```\n27\n```\n\n![pic_18.png](https://qiita-image-store.s3.amazonaws.com/0/43487/bf253332-c3dc-1354-6940-f842d229de69.png)\n\n**\u8981\u7d20\u306e\u6570\u306f\u3001\u306a\u305c\u304b\u3001\u5b89\u5024\u3060\u3051\u6975\u7aef\u306b\u5927\u304d\u3044**\n\n```{Python:Python 2.7}\nprint(len(code_1909_stock_open_list) == len(code_1909_stock_close_list) == len(code_1909_stock_high_list) == len(code_1909_stock_low_list))\n```\n\n```\nFlase\n```\n\n```{Python:Python 2.7}\nprint(len(code_1909_stock_open_list))\n```\n\n```\n27\n```\n\n```{Python:Python 2.7}\nprint(len(code_1909_stock_close_list))\n```\n\n```\n27\n```\n\n```{Python:Python 2.7}\nprint(len(code_1909_stock_high_list))\n```\n\n```\n27\n```\n\n```{Python:Python 2.7}\nprint(len(code_1909_stock_low_list))\n```\n\n```\n7739\n```\n\n\n![pic_19.png](https://qiita-image-store.s3.amazonaws.com/0/43487/93698249-cc46-1766-035b-182ec976880c.png)\n\n**\u8981\u7d20\u306e\u6570\u304c\u305d\u308d\u3063\u3066\u3044\u308b\u59cb\u5024\u3001\u7d42\u5024\u3001\u9ad8\u5024\u306e\u5909\u52d5\u306e\u69d8\u5b50\u3092\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u3067\u8868\u73fe**\n\n\n```{Python:Python 2.7}\nimport matplotlib.pyplot as plt\n\nplt.plot(code_1909_stock_open_list)\nplt.plot(code_1909_stock_close_list)\nplt.plot(code_1909_stock_high_list)\n\nplt.show()\n```\n\n\n![pic_20.png](https://qiita-image-store.s3.amazonaws.com/0/43487/505406a9-e289-8ed0-9329-066113f8a91b.png)\n\n![pic_21.png](https://qiita-image-store.s3.amazonaws.com/0/43487/75f34ad5-92bf-8be1-9882-4b92cf34297d.png)\n\n**\u30b0\u30e9\u30d5\u3092_png_\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58**\n\n\n```{Python:Python 2.7}\nimport matplotlib.pyplot as plt\n\nplt.plot(code_1909_stock_open_list)\nplt.plot(code_1909_stock_close_list)\nplt.plot(code_1909_stock_high_list)\n\nfilename = \"code 1909 stock_historical_seriese (Jan.1.2015-Feb.12.2015).png\"\nplt.savefig(filename)\n```\n\n![pic_22.png](https://qiita-image-store.s3.amazonaws.com/0/43487/092bab58-d681-3dfc-d5e5-0f1afd38da3b.png)\n\n## \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff12\u306e\u30b3\u30fc\u30c9\u3092\u62dd\u501f\u3057\u3066\u3001\u30b0\u30e9\u30d5\u3092\u30e1\u30fc\u30eb\u306b\u6dfb\u4ed8\u3057\u3066\u3001_Gmail_ \u306b\u914d\u4fe1\u3057\u3066\u307f\u308b\n\n```{Python:email_png_attachment.py}\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport smtplib\nfrom email.MIMEText import MIMEText\nfrom email.MIMEImage import MIMEImage\nfrom email.MIMEMultipart import MIMEMultipart\nfrom email.Header import Header\nfrom email.Utils import formatdate\n\ndef create_message(from_addr, to_addr, subject, body, encoding):\n    msg = MIMEMultipart()\n    msg['Subject'] = Header(subject, encoding)\n    msg['From'] = from_addr\n    msg['To'] = to_addr\n    msg['Date'] = formatdate()\n\n    related = MIMEMultipart('related')\n    alt = MIMEMultipart('alternative')\n    related.attach(alt)\n\n    content = MIMEText(body, 'plain', encoding)\n    alt.attach(content)\n\n    for filename in ['code 1909 stock_historical_series (Jan.1.2015-Feb.12.2015).png']:\n# \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306f['\u30d5\u30a1\u30a4\u30eb\uff11' , '\u30d5\u30a1\u30a4\u30eb\uff12' , \u2026]\u306e\u5f62\u306b\u3059\u308b\u3002\n        fp = file('%s' % filename, 'rb')\n        img = MIMEImage(fp.read(), 'png', name=filename)\n        related.attach(img)\n\n    msg.attach(related)\n    return msg\n    pass\n\ndef send_via_gmail(from_addr, to_addr, msg):\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.ehlo()\n    s.starttls()\n    s.ehlo()\n    s.login('hirofumi.yashima2012@gmail.com', 'XXXXX')  # XXXXX\u306b\u306fGmail\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u6587\u5b57\u5217\u3092\u8a18\u8ff0\n    s.sendmail(from_addr, [to_addr], msg.as_string())\n    s.close()\n\nif __name__ == '__main__':\n    from_addr = 'hirofumi.yashima2012@gmail.com'\n    to_addr = 'hirofumi.yashima2012@gmail.com'\n    title = '\u682a\u4fa1\u30b3\u30fc\u30c91909 2015\u5e74\u5e74\u59cb\u4ee5\u964d\u306e\u682a\u4fa1\u539f\u7cfb\u5217\u63a8\u79fb\u30b0\u30e9\u30d5'\n    body = '\u30b0\u30e9\u30d5\u3092\u6dfb\u4ed8\u3057\u307e\u3059\u3002'\n    msg = create_message(from_addr, to_addr, title, body, 'utf-8')\n    send_via_gmail(from_addr, to_addr, msg)\n```\n\n\n![pic_23.png](https://qiita-image-store.s3.amazonaws.com/0/43487/4836f618-de25-8eae-c10a-da609a88fdd7.png)\n\n![pic_25.png](https://qiita-image-store.s3.amazonaws.com/0/43487/bf85e253-77c2-8b54-1617-9deefc83e483.png)\n\n#####\u3000**_Gmail_ \u53d7\u4fe1\u30dc\u30c3\u30af\u30b9\u306b\u3001\u6dfb\u4ed8\u304c\u4ed8\u3044\u305f\u30e1\u30fc\u30eb\u306e\u7740\u4fe1\u6210\u529f**\n\n![pic_26.png](https://qiita-image-store.s3.amazonaws.com/0/43487/18dd2488-9c0a-b989-89e8-a8ef89b73322.png)\n\n![pic_27.png](https://qiita-image-store.s3.amazonaws.com/0/43487/cae82a91-35e2-b45f-837b-b23e90569bf4.png)\n\n\n![pic_28.png](https://qiita-image-store.s3.amazonaws.com/0/43487/25c5cc4b-de76-0723-b9a0-12967fbd02fc.png)\n", "tags": ["Python", "\u682a\u4fa1", "Finance", "\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u5206\u6790", "api"]}