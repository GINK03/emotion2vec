{"context": "\n\u52d5\u4f5c\u78ba\u8a8d\nVivado/XSDK 2015.4\nWindows 8.1 pro\nZybo\n\n\n\n\u5b9f\u65bd\u3059\u308b\u3053\u3068\n\u5272\u8fbc\u307f\u3092\u4f7f\u3046GPIO\u306e\u4f7f\u7528\u3092\u8a66\u3059\u3002\n\u95a2\u9023 http://qiita.com/7of9/items/49a069b9e2ae8430b828\n\nImport Examples\nhttp://qiita.com/7of9/items/373c79ea652db4e69da0\n\u3068\u540c\u69d8\u306b\u4eca\u5ea6\u306f\u5272\u8fbc\u307f\u4f7f\u7528\u306eExample\u3092\u8a66\u3059\u3002\nsystem.mss\u306eps7_gpio_0\u306eImport Examples\u304b\u3089GPIO\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u53d6\u8fbc\u3080\u3002xgpiops_intr_example\u3092\u9078\u629e\u3057\u305f\u3002\nhello_bsp_xgpiops_intr_example_1\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u3044\u3002\n\n\nThe example uses the interrupt capability of the GPIO to detect push button\nevents and set the output LEDs based on the input . The user needs to press\nall the switches SW1-SW5 on the evaluation board to exit from this example.\n\n\n\nGPIO\u306e\u8a2d\u5b9a\n\u30dc\u30bf\u30f3\u306e\u8a2d\u5b9a\u3092\u4ee5\u4e0b\u3067\u3084\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u304c\u3001Zybo\u3067\u52d5\u304f\u306e\u3060\u308d\u3046\u304b\u3002\n/* The following constants define the GPIO banks that are used. */\n#define INPUT_BANK  XGPIOPS_BANK0  /* Bank 0 of the GPIO Device */\n#define OUTPUT_BANK XGPIOPS_BANK1  /* Bank 1 of the GPIO Device */\n\n\u5b9f\u884c\u3057\u3066\u307f\u305f\u304c\u3001Zybo\u3067\u306f\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\u3002\nBANK0,1\u304cMicrozed\u3068Zybo\u3067\u9055\u3046\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nXGpioPs_SetIntrType() / XGpioPs_SetIntrTypePin()\nxgpiops.h\n\u306b\u3066XGpioPs_SetIntrType()\u306e\u5b9a\u7fa9\u3092\u898b\u308b\u3068\nvoid XGpioPs_SetIntrType(XGpioPs *InstancePtr, u8 Bank, u32 IntrType,\n              u32 IntrPolarity, u32 IntrOnAny);\n\n\u4e0a\u8a18\u3088\u308aXGpioPs_SetIntrType()\u3068\u3044\u3046\u306e\u306fBank\u306b\u5bfe\u3057\u3066\u306e\u5272\u8fbc\u307f\u8a2d\u5b9a\u306e\u3088\u3046\u3060\u3002\nxgpiops.h\u306e\u9055\u3044\u5834\u6240\u306b\u4ee5\u4e0b\u304c\u3042\u3063\u305f\u3002\u3053\u3061\u3089\u306f\u500b\u5225\u306e\u30d4\u30f3\u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u3067\u304d\u305d\u3046\u3060\u3002\nvoid XGpioPs_SetIntrTypePin(XGpioPs *InstancePtr, int Pin, u8 IrqType);\n\n\u5f15\u6570\u304c\u7570\u306a\u308b\u306e\u3067\u5225\u9014\u60c5\u5831\u3092\u63a2\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\ncode\n\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u3057\u305f\u304c\u3001\u52d5\u304b\u306a\u3044\u3002\n\u30dd\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u52d5\u4f5c\u3059\u308b\u304c\u3001\u5272\u8fbc\u307f\u3067\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3002\nhttps://www.youtube.com/watch?v=JPVTVNtJ7R4\n\u3092\u53c2\u8003\u306bVivado\u3067\u30c7\u30b6\u30a4\u30f3\u3092\u4f5c\u308a\u306a\u304a\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3057\u304b\u3057\u3001\u30d3\u30c7\u30aa\u3067\u306fPS-PL\u5272\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u4e00\u65b9\u3001\u3053\u3061\u3089\u3067\u306fPS\u306eSW\u5272\u8fbc\u307f\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3067\u3042\u308b\u3002\nGPIO\u7528\u306eIP\u3092\u8db3\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n#include \"xparameters.h\"\n#include \"xgpiops.h\"\n#include \"xscugic.h\"\n#include \"xil_exception.h\"\n#include <xil_printf.h>\n\n#define GPIO_DEVICE_ID      XPAR_XGPIOPS_0_DEVICE_ID\n#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID\n#define GPIO_INTERRUPT_ID   XPAR_XGPIOPS_0_INTR\n\n#define LED_DELAY 10000000\n#define OUTPUT_PIN 7\n#define INPUT_PIN  51\n\n#define printf          xil_printf  /* Smalller foot-print printf */\n\nstatic int GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId,\n               u16 GpioIntrId);\nstatic void IntrHandler(void *CallBackRef, u32 Bank, u32 Status);\nstatic int SetupInterruptSystem(XScuGic *Intc, XGpioPs *Gpio, u16 GpioIntrId);\n\nstatic XGpioPs Gpio;\nstatic XScuGic Intc;\nstatic u32 AllButtonsPressed = FALSE;\n\nint main(void)\n{\n    int Status;\n\n    xil_printf(\"GPIO Interrupt Example Test \\r\\n\");\n\n    Status = GpioIntrExample(&Intc, &Gpio, GPIO_DEVICE_ID,\n                 GPIO_INTERRUPT_ID);\n\n    if (Status != XST_SUCCESS) {\n        xil_printf(\"GPIO Interrupt Example Test Failed\\r\\n\");\n        return XST_FAILURE;\n    }\n\n    xil_printf(\"Successfully ran GPIO Interrupt Example Test\\r\\n\");\n    return XST_SUCCESS;\n}\n\nint GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId, u16 GpioIntrId)\n{\n    XGpioPs_Config *ConfigPtr;\n    int Status;\n\n    ConfigPtr = XGpioPs_LookupConfig(DeviceId);\n    if (ConfigPtr == NULL) {\n        return XST_FAILURE;\n    }\n    XGpioPs_CfgInitialize(Gpio, ConfigPtr, ConfigPtr->BaseAddr);\n\n    Status = XGpioPs_SelfTest(Gpio);\n    if (Status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    XGpioPs_SetDirectionPin(Gpio, INPUT_PIN, 0);\n\n    XGpioPs_SetDirectionPin(Gpio, OUTPUT_PIN, 1);\n    XGpioPs_SetOutputEnablePin(Gpio, OUTPUT_PIN, 1);\n    XGpioPs_WritePin(Gpio, OUTPUT_PIN, 0); // LED OFF\n\n    Status = SetupInterruptSystem(Intc, Gpio, GPIO_INTERRUPT_ID);\n    if (Status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n//  printf(\"\\n\\rPush each of the 5 buttons once to exit\\n\\r\");\n//  AllButtonsPressed = FALSE;\n\n    while(AllButtonsPressed == FALSE);\n\n    printf(\"\\n\\r The GPIO Interrupt example has passed Successfully.\\n\\r\");\n\n    return XST_SUCCESS;\n}\n\nstatic void IntrHandler(void *CallBackRef, u32 Bank, u32 Status)\n{\n    XGpioPs *Gpio = (XGpioPs *)CallBackRef;\n    static u32 ButtonsChanged;\n//  volatile int Delay;\n\n    printf(\"***button pressed***\\n\\r\");\n\n    ButtonsChanged |= Status;\n\n//  XGpioPs_WritePin(Gpio, OUTPUT_PIN, ButtonsChanged);\n    XGpioPs_WritePin(Gpio, OUTPUT_PIN, 1);\n//  for (Delay = 0; Delay < LED_DELAY; Delay++)\n//            ;\n\n}\n\nstatic int SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio,\n                u16 GpioIntrId)\n{\n    int Status;\n    XScuGic_Config *IntcConfig;\n\n    Xil_ExceptionInit();\n\n    IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);\n    if (NULL == IntcConfig) {\n        return XST_FAILURE;\n    }\n\n    Status = XScuGic_CfgInitialize(GicInstancePtr, IntcConfig,\n                    IntcConfig->CpuBaseAddress);\n    if (Status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n                (Xil_ExceptionHandler)XScuGic_InterruptHandler,\n                GicInstancePtr);\n\n    Status = XScuGic_Connect(GicInstancePtr, GpioIntrId,\n                (Xil_ExceptionHandler)XGpioPs_IntrHandler,\n                (void *)Gpio);\n    if (Status != XST_SUCCESS) {\n        return Status;\n    }\n\n//  XGpioPs_SetIntrTypePin(Gpio, INPUT_PIN, XGPIOPS_IRQ_TYPE_EDGE_FALLING);\n    XGpioPs_SetIntrTypePin(Gpio, INPUT_PIN, XGPIOPS_IRQ_TYPE_EDGE_RISING);\n    XGpioPs_SetCallbackHandler(Gpio, (void *)Gpio, IntrHandler);\n    XGpioPs_IntrEnablePin(Gpio, INPUT_PIN);\n    XScuGic_Enable(GicInstancePtr, GpioIntrId);\n    Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);\n\n\n    return XST_SUCCESS;\n}\n\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nVivado/XSDK 2015.4\nWindows 8.1 pro\nZybo\n```\n\n## \u5b9f\u65bd\u3059\u308b\u3053\u3068\n\n\u5272\u8fbc\u307f\u3092\u4f7f\u3046GPIO\u306e\u4f7f\u7528\u3092\u8a66\u3059\u3002\n\n\u95a2\u9023 http://qiita.com/7of9/items/49a069b9e2ae8430b828\n\n\n## Import Examples\n\nhttp://qiita.com/7of9/items/373c79ea652db4e69da0\n\u3068\u540c\u69d8\u306b\u4eca\u5ea6\u306f\u5272\u8fbc\u307f\u4f7f\u7528\u306eExample\u3092\u8a66\u3059\u3002\n\nsystem.mss\u306eps7_gpio_0\u306eImport Examples\u304b\u3089GPIO\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u53d6\u8fbc\u3080\u3002xgpiops_intr_example\u3092\u9078\u629e\u3057\u305f\u3002\nhello_bsp_xgpiops_intr_example_1\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\n\n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u3044\u3002\n\n> * The example uses the interrupt capability of the GPIO to detect push button\n* events and set the output LEDs based on the input . The user needs to press\n* all the switches SW1-SW5 on the evaluation board to exit from this example.\n\n\n## GPIO\u306e\u8a2d\u5b9a\n\n\u30dc\u30bf\u30f3\u306e\u8a2d\u5b9a\u3092\u4ee5\u4e0b\u3067\u3084\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u304c\u3001Zybo\u3067\u52d5\u304f\u306e\u3060\u308d\u3046\u304b\u3002\n\n```\n/* The following constants define the GPIO banks that are used. */\n#define INPUT_BANK\tXGPIOPS_BANK0  /* Bank 0 of the GPIO Device */\n#define OUTPUT_BANK\tXGPIOPS_BANK1  /* Bank 1 of the GPIO Device */\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u305f\u304c\u3001Zybo\u3067\u306f\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3082\u4f55\u3082\u8d77\u3053\u3089\u306a\u3044\u3002\nBANK0,1\u304cMicrozed\u3068Zybo\u3067\u9055\u3046\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n## XGpioPs_SetIntrType() / XGpioPs_SetIntrTypePin()\n\n[xgpiops.h](https://weble.upc.edu/asig/ESDC/XAPP1026/zc702_GigE/SW/fsbl_bsp/ps7_cortexa9_0/include/xgpiops.h)\n\u306b\u3066XGpioPs_SetIntrType()\u306e\u5b9a\u7fa9\u3092\u898b\u308b\u3068\n\n```\nvoid XGpioPs_SetIntrType(XGpioPs *InstancePtr, u8 Bank, u32 IntrType,\n\t\t\t  u32 IntrPolarity, u32 IntrOnAny);\n```\n\n\u4e0a\u8a18\u3088\u308aXGpioPs_SetIntrType()\u3068\u3044\u3046\u306e\u306fBank\u306b\u5bfe\u3057\u3066\u306e\u5272\u8fbc\u307f\u8a2d\u5b9a\u306e\u3088\u3046\u3060\u3002\n\nxgpiops.h\u306e\u9055\u3044\u5834\u6240\u306b\u4ee5\u4e0b\u304c\u3042\u3063\u305f\u3002\u3053\u3061\u3089\u306f\u500b\u5225\u306e\u30d4\u30f3\u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u3067\u304d\u305d\u3046\u3060\u3002\n\n```\nvoid XGpioPs_SetIntrTypePin(XGpioPs *InstancePtr, int Pin, u8 IrqType);\n```\n\n\u5f15\u6570\u304c\u7570\u306a\u308b\u306e\u3067\u5225\u9014\u60c5\u5831\u3092\u63a2\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n## code\n\n\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u3057\u305f\u304c\u3001\u52d5\u304b\u306a\u3044\u3002\n\n\u30dd\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u52d5\u4f5c\u3059\u308b\u304c\u3001\u5272\u8fbc\u307f\u3067\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3002\n\nhttps://www.youtube.com/watch?v=JPVTVNtJ7R4\n\u3092\u53c2\u8003\u306bVivado\u3067\u30c7\u30b6\u30a4\u30f3\u3092\u4f5c\u308a\u306a\u304a\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3057\u304b\u3057\u3001\u30d3\u30c7\u30aa\u3067\u306fPS-PL\u5272\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u4e00\u65b9\u3001\u3053\u3061\u3089\u3067\u306fPS\u306eSW\u5272\u8fbc\u307f\u3092\u4f7f\u3044\u305f\u3044\u3060\u3051\u3067\u3042\u308b\u3002\nGPIO\u7528\u306eIP\u3092\u8db3\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\n```c\n#include \"xparameters.h\"\n#include \"xgpiops.h\"\n#include \"xscugic.h\"\n#include \"xil_exception.h\"\n#include <xil_printf.h>\n\n#define GPIO_DEVICE_ID\t\tXPAR_XGPIOPS_0_DEVICE_ID\n#define INTC_DEVICE_ID\t\tXPAR_SCUGIC_SINGLE_DEVICE_ID\n#define GPIO_INTERRUPT_ID\tXPAR_XGPIOPS_0_INTR\n\n#define LED_DELAY 10000000\n#define OUTPUT_PIN 7\n#define INPUT_PIN  51\n\n#define printf\t\t\txil_printf\t/* Smalller foot-print printf */\n\nstatic int GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId,\n\t\t\t   u16 GpioIntrId);\nstatic void IntrHandler(void *CallBackRef, u32 Bank, u32 Status);\nstatic int SetupInterruptSystem(XScuGic *Intc, XGpioPs *Gpio, u16 GpioIntrId);\n\nstatic XGpioPs Gpio;\nstatic XScuGic Intc;\nstatic u32 AllButtonsPressed = FALSE;\n\nint main(void)\n{\n\tint Status;\n\n\txil_printf(\"GPIO Interrupt Example Test \\r\\n\");\n\n\tStatus = GpioIntrExample(&Intc, &Gpio, GPIO_DEVICE_ID,\n\t\t\t\t GPIO_INTERRUPT_ID);\n\n\tif (Status != XST_SUCCESS) {\n\t\txil_printf(\"GPIO Interrupt Example Test Failed\\r\\n\");\n\t\treturn XST_FAILURE;\n\t}\n\n\txil_printf(\"Successfully ran GPIO Interrupt Example Test\\r\\n\");\n\treturn XST_SUCCESS;\n}\n\nint GpioIntrExample(XScuGic *Intc, XGpioPs *Gpio, u16 DeviceId, u16 GpioIntrId)\n{\n\tXGpioPs_Config *ConfigPtr;\n\tint Status;\n\n\tConfigPtr = XGpioPs_LookupConfig(DeviceId);\n\tif (ConfigPtr == NULL) {\n\t\treturn XST_FAILURE;\n\t}\n\tXGpioPs_CfgInitialize(Gpio, ConfigPtr, ConfigPtr->BaseAddr);\n\n\tStatus = XGpioPs_SelfTest(Gpio);\n\tif (Status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n\tXGpioPs_SetDirectionPin(Gpio, INPUT_PIN, 0);\n\n\tXGpioPs_SetDirectionPin(Gpio, OUTPUT_PIN, 1);\n\tXGpioPs_SetOutputEnablePin(Gpio, OUTPUT_PIN, 1);\n\tXGpioPs_WritePin(Gpio, OUTPUT_PIN, 0); // LED OFF\n\n\tStatus = SetupInterruptSystem(Intc, Gpio, GPIO_INTERRUPT_ID);\n\tif (Status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n//\tprintf(\"\\n\\rPush each of the 5 buttons once to exit\\n\\r\");\n//\tAllButtonsPressed = FALSE;\n\n\twhile(AllButtonsPressed == FALSE);\n\n\tprintf(\"\\n\\r The GPIO Interrupt example has passed Successfully.\\n\\r\");\n\n\treturn XST_SUCCESS;\n}\n\nstatic void IntrHandler(void *CallBackRef, u32 Bank, u32 Status)\n{\n\tXGpioPs *Gpio = (XGpioPs *)CallBackRef;\n\tstatic u32 ButtonsChanged;\n//\tvolatile int Delay;\n\n\tprintf(\"***button pressed***\\n\\r\");\n\n\tButtonsChanged |= Status;\n\n//\tXGpioPs_WritePin(Gpio, OUTPUT_PIN, ButtonsChanged);\n\tXGpioPs_WritePin(Gpio, OUTPUT_PIN, 1);\n//\tfor (Delay = 0; Delay < LED_DELAY; Delay++)\n//            ;\n\n}\n\nstatic int SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio,\n\t\t\t\tu16 GpioIntrId)\n{\n\tint Status;\n\tXScuGic_Config *IntcConfig;\n\n\tXil_ExceptionInit();\n\n\tIntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);\n\tif (NULL == IntcConfig) {\n\t\treturn XST_FAILURE;\n\t}\n\n\tStatus = XScuGic_CfgInitialize(GicInstancePtr, IntcConfig,\n\t\t\t\t\tIntcConfig->CpuBaseAddress);\n\tif (Status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n\tXil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n\t\t\t\t(Xil_ExceptionHandler)XScuGic_InterruptHandler,\n\t\t\t\tGicInstancePtr);\n\n\tStatus = XScuGic_Connect(GicInstancePtr, GpioIntrId,\n\t\t\t\t(Xil_ExceptionHandler)XGpioPs_IntrHandler,\n\t\t\t\t(void *)Gpio);\n\tif (Status != XST_SUCCESS) {\n\t\treturn Status;\n\t}\n\n//\tXGpioPs_SetIntrTypePin(Gpio, INPUT_PIN, XGPIOPS_IRQ_TYPE_EDGE_FALLING);\n\tXGpioPs_SetIntrTypePin(Gpio, INPUT_PIN, XGPIOPS_IRQ_TYPE_EDGE_RISING);\n\tXGpioPs_SetCallbackHandler(Gpio, (void *)Gpio, IntrHandler);\n\tXGpioPs_IntrEnablePin(Gpio, INPUT_PIN);\n\tXScuGic_Enable(GicInstancePtr, GpioIntrId);\n\tXil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);\n\n\n\treturn XST_SUCCESS;\n}\n```\n\n\n\n\n", "tags": ["zybo", "gpio", "interrupt", "todo"]}