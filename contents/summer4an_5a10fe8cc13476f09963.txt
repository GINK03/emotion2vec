{"context": "\n\n\u524d\u7f6e\u304d\n\u4ee5\u4e0b\u3067tensorflow\u3068OpenCV\u3092\u4f7f\u3046\u304c\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u9762\u5012\u3002\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u9854\u5199\u771f\u304b\u3089\u5de8\u4e73\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u3066\u307f\u308b (\u3046\u307e\u304f\u3044\u3063\u305f\u304b\u5fae\u5999)\n\u7279\u306bpython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u306f\u74b0\u5883\u304c\u6df7\u3056\u308a\u3084\u3059\u3044\u3063\u307d\u3044\u3002\nvirtualenv\u3092\u4f7f\u3046\u306e\u304c\u6b63\u653b\u6cd5\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3042\u307e\u308a\u306a\u3058\u307e\u305a\u3002\ndocker\u4e0a\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\u304c\u79c1\u306b\u306f\u8003\u3048\u3084\u3059\u304f\u3066\u3057\u3063\u304f\u308a\u304d\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u3057\u304b\u3082tensorflow\u306b\u306fdocker\u30a4\u30e1\u30fc\u30b8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u697d\u3002\n\u30db\u30b9\u30c8\u306fubuntu16.04\u3002\n\ndocker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068tensorflow\u306edocker\u30b3\u30f3\u30c6\u30ca\u7acb\u3061\u4e0a\u3052\n$ sudo apt-get install docker.io\n\n$ docker pull gcr.io/tensorflow/tensorflow:latest\n$ docker run -it --name tensorflow1 -p 8888:8888 gcr.io/tensorflow/tensorflow /bin/bash\n\n\u3053\u308c\u3067\u3082\u3046tensorflow\u304c\u4f7f\u3048\u308b\u3002\n\u4ee5\u4e0b\u306e\u300cRun TensorFlow from the Command Line\u300d\u306e\u7b87\u6240\u3092\u53c2\u7167\u3057\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\nhttps://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#test-the-tensorflow-installation\n\u4ee5\u4e0b\u306fdocker\u4e0a\u306e\u64cd\u4f5c\u3002\n\nOpenCV\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ apt-get install wget unzip\n$ apt-get install build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev\n\n$ mkdir /opencv\n$ cd /opencv\n\n$ wget https://github.com/Itseez/opencv/archive/3.1.0.zip\n$ unzip 3.1.0.zip\n$ cd opencv-3.1.0\n$ mkdir build\n$ cd build\n\n$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_IPP=ON ..\n\n$ make -j7\n$ make install\n\n\u4ee5\u4e0b\u7b49\u3067\u52d5\u4f5c\u78ba\u8a8d\u3002\n\nface_kirinuki.cpp\n//\u753b\u50cf\u306e\u5207\u308a\u629c\u304d http://reiji1020.hatenablog.com/entry/2014/10/28/225829\n\n//\u5b9f\u884c\u65b9\u6cd5\u306f\u4ee5\u4e0b\u3002\n//  hoge.exe \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u540d \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d cascade\u30d5\u30a1\u30a4\u30eb\u540d\n//\u623b\u308a\u5024\u306f\u30010\u304c\u6b63\u5e38\u7d42\u4e86\u3001100\u3088\u308a\u4e0b\u306f\u5f15\u6570\u4e0d\u8db3\u7b49\u306e\u5b9f\u884c\u6642\u306e\u7570\u5e38\u3001100\u4ee5\u4e0a\u306fOpenCV\u306f\u8d70\u3063\u305f\u304c\u691c\u51fa\u51fa\u6765\u306a\u304b\u3063\u305f\u7b49\n\n#ifdef __GNUC__\n  #include <stdio.h>\n  #include <stdlib.h>\n#else\n  #include <windows.h>\n#endif\n\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace cv;\n\n#define FACE_KAKUDAI_WARIAI 1.2 //\u4f8b\u3048\u3070\u691c\u51fa\u3055\u308c\u305f\u9854\u304c100px\u56db\u65b9\u3060\u3068\u3057\u305f\u3089\u3001100\u00d7FACE_KAKUDAI_WARIAIpx\u306e\u30b5\u30a4\u30ba\u3067\u5207\u308a\u629c\u304f\n\nint main(int argc, char const *argv[]) {\n    if(argc!=4){\n        printf(\"error. too few argument.\\n\");\n        exit(1);\n    }\n    printf(\"target file is %s\\n\", argv[1]);\n\n    Mat image = imread(argv[1]);\n    if(image.data==NULL){\n        printf(\"error. can not read source picture file.\\n\");\n        exit(2);\n    }\n    printf(\"image size width=%d height=%d\\n\", image.size().width, image.size().height);\n\n    string cascade_filename = argv[3];\n    CascadeClassifier cascade;\n    if(cascade.load(cascade_filename)!=true){\n        printf(\"error. can not read cascade file.\\n\");\n        exit(3);\n    }\n\n    vector<Rect> faces;\n    cascade.detectMultiScale(image, faces, 1.1, 3, 0);\n    printf(\"detect %zu faces.\\n\", faces.size());\n\n    if(faces.size()!=1){\n        printf(\"too many faces or no faces detected. exit.\\n\");\n        exit(100);\n    }\n\n    for (unsigned int i = 0; i < faces.size(); i++) {\n        printf(\"face[%d] x=%d y=%d width=%d height=%d\\n\", i, faces[i].x, faces[i].y, faces[i].width, faces[i].height);\n\n        //\u5207\u308a\u629c\u304f\u30b5\u30a4\u30ba\u3092\u5c11\u3057\u5927\u304d\u304f\u3057\u305f\u6642\u306b\u753b\u50cf\u3092\u306f\u307f\u51fa\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3002\n        int kakudai_size = (int)(faces[i].width * (FACE_KAKUDAI_WARIAI-1) / 2); //\u5de6\u53f3\u3067\u62e1\u5927\u3059\u308b\u306e\u30672\u3067\u5272\u3063\u3066\u3044\u308b\u3002\n        int kirinuki_x = faces[i].x-kakudai_size;\n        int kirinuki_y = faces[i].y-kakudai_size;\n        int kirinuki_width  = faces[i].width + kakudai_size*2;\n        int kirinuki_height = faces[i].height+ kakudai_size*2;\n        if( kirinuki_x<0 ||\n            kirinuki_y<0 ||\n            image.size().width  <= kirinuki_x+kirinuki_width ||\n            image.size().height <= kirinuki_y+kirinuki_height ){\n            printf(\"face[%d] located on corner. skip.\\n\", i);\n            exit(101);\n        }\n\n        Mat cut_img(image, Rect(kirinuki_x, kirinuki_y, kirinuki_width, kirinuki_height));\n        imwrite(argv[2], cut_img);\n        printf(\"face[%d] outputed as \\\"%s\\\"\\n\", i, argv[2]);\n\n        rectangle(image, Point(faces[i].x, faces[i].y), Point(faces[i].x + faces[i].width, faces[i].y + faces[i].height), Scalar(0, 200, 0), 1, CV_AA);\n        rectangle(image, Point(kirinuki_x, kirinuki_y), Point(kirinuki_x + kirinuki_width, kirinuki_y + kirinuki_height), Scalar(200, 0, 0), 1, CV_AA);\n    }\n\n    //imshow(\"detect face\", image);\n    //waitKey(0);\n\n    return 0;\n}\n\n\n$ g++ -g `pkg-config --cflags opencv` -o face_kirinuki face_kirinuki.cpp -L/usr/local/share/OpenCV/3rdparty/lib/ `pkg-config --libs opencv`\n\n$ face_kirinuki target.jpg output.jpg haarcascade_frontalface_alt2.xml\n\n\u4ee5\u4e0a\u3067docker\u4e0a\u3067tensorflow\u3068OpenCV\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306f\u305a\u3002\n\n\u53c2\u8003\u30ea\u30f3\u30af\n\ndocker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb http://www.atmarkit.co.jp/ait/articles/1406/10/news031_2.html\n\ntensorflow\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#docker-installation\n\nOpenCV\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb http://docs.opencv.org/3.0-last-rst/doc/tutorials/introduction/linux_install/linux_install.html\n\n\n# \u524d\u7f6e\u304d\n\n\u4ee5\u4e0b\u3067tensorflow\u3068OpenCV\u3092\u4f7f\u3046\u304c\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u9762\u5012\u3002\n[\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u9854\u5199\u771f\u304b\u3089\u5de8\u4e73\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u3066\u307f\u308b (\u3046\u307e\u304f\u3044\u3063\u305f\u304b\u5fae\u5999)](http://qiita.com/summer4an/items/db0124eee8103c1d3b85)\n\n\u7279\u306bpython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u306f\u74b0\u5883\u304c\u6df7\u3056\u308a\u3084\u3059\u3044\u3063\u307d\u3044\u3002\nvirtualenv\u3092\u4f7f\u3046\u306e\u304c\u6b63\u653b\u6cd5\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3042\u307e\u308a\u306a\u3058\u307e\u305a\u3002\n\ndocker\u4e0a\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\u304c\u79c1\u306b\u306f\u8003\u3048\u3084\u3059\u304f\u3066\u3057\u3063\u304f\u308a\u304d\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u3057\u304b\u3082tensorflow\u306b\u306fdocker\u30a4\u30e1\u30fc\u30b8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u697d\u3002\n\n\u30db\u30b9\u30c8\u306fubuntu16.04\u3002\n\n\n# docker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068tensorflow\u306edocker\u30b3\u30f3\u30c6\u30ca\u7acb\u3061\u4e0a\u3052\n\n```bash:\n$ sudo apt-get install docker.io\n\n$ docker pull gcr.io/tensorflow/tensorflow:latest\n$ docker run -it --name tensorflow1 -p 8888:8888 gcr.io/tensorflow/tensorflow /bin/bash\n```\n\n\u3053\u308c\u3067\u3082\u3046tensorflow\u304c\u4f7f\u3048\u308b\u3002\n\u4ee5\u4e0b\u306e\u300cRun TensorFlow from the Command Line\u300d\u306e\u7b87\u6240\u3092\u53c2\u7167\u3057\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u304a\u304f\u3002\nhttps://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#test-the-tensorflow-installation\n\n\u4ee5\u4e0b\u306fdocker\u4e0a\u306e\u64cd\u4f5c\u3002\n\n# OpenCV\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash:\n$ apt-get install wget unzip\n$ apt-get install build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev\n\n$ mkdir /opencv\n$ cd /opencv\n\n$ wget https://github.com/Itseez/opencv/archive/3.1.0.zip\n$ unzip 3.1.0.zip\n$ cd opencv-3.1.0\n$ mkdir build\n$ cd build\n\n$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_IPP=ON ..\n\n$ make -j7\n$ make install\n```\n\n\u4ee5\u4e0b\u7b49\u3067\u52d5\u4f5c\u78ba\u8a8d\u3002\n\n```C++:face_kirinuki.cpp\n//\u753b\u50cf\u306e\u5207\u308a\u629c\u304d http://reiji1020.hatenablog.com/entry/2014/10/28/225829\n\n//\u5b9f\u884c\u65b9\u6cd5\u306f\u4ee5\u4e0b\u3002\n//  hoge.exe \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u540d \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d cascade\u30d5\u30a1\u30a4\u30eb\u540d\n//\u623b\u308a\u5024\u306f\u30010\u304c\u6b63\u5e38\u7d42\u4e86\u3001100\u3088\u308a\u4e0b\u306f\u5f15\u6570\u4e0d\u8db3\u7b49\u306e\u5b9f\u884c\u6642\u306e\u7570\u5e38\u3001100\u4ee5\u4e0a\u306fOpenCV\u306f\u8d70\u3063\u305f\u304c\u691c\u51fa\u51fa\u6765\u306a\u304b\u3063\u305f\u7b49\n\n#ifdef __GNUC__\n  #include <stdio.h>\n  #include <stdlib.h>\n#else\n  #include <windows.h>\n#endif\n\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace cv;\n\n#define FACE_KAKUDAI_WARIAI 1.2 //\u4f8b\u3048\u3070\u691c\u51fa\u3055\u308c\u305f\u9854\u304c100px\u56db\u65b9\u3060\u3068\u3057\u305f\u3089\u3001100\u00d7FACE_KAKUDAI_WARIAIpx\u306e\u30b5\u30a4\u30ba\u3067\u5207\u308a\u629c\u304f\n\nint main(int argc, char const *argv[]) {\n    if(argc!=4){\n        printf(\"error. too few argument.\\n\");\n        exit(1);\n    }\n    printf(\"target file is %s\\n\", argv[1]);\n\n    Mat image = imread(argv[1]);\n    if(image.data==NULL){\n        printf(\"error. can not read source picture file.\\n\");\n        exit(2);\n    }\n    printf(\"image size width=%d height=%d\\n\", image.size().width, image.size().height);\n\n    string cascade_filename = argv[3];\n    CascadeClassifier cascade;\n    if(cascade.load(cascade_filename)!=true){\n        printf(\"error. can not read cascade file.\\n\");\n        exit(3);\n    }\n\n    vector<Rect> faces;\n    cascade.detectMultiScale(image, faces, 1.1, 3, 0);\n    printf(\"detect %zu faces.\\n\", faces.size());\n\n    if(faces.size()!=1){\n        printf(\"too many faces or no faces detected. exit.\\n\");\n        exit(100);\n    }\n\n    for (unsigned int i = 0; i < faces.size(); i++) {\n        printf(\"face[%d] x=%d y=%d width=%d height=%d\\n\", i, faces[i].x, faces[i].y, faces[i].width, faces[i].height);\n\n        //\u5207\u308a\u629c\u304f\u30b5\u30a4\u30ba\u3092\u5c11\u3057\u5927\u304d\u304f\u3057\u305f\u6642\u306b\u753b\u50cf\u3092\u306f\u307f\u51fa\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3002\n        int kakudai_size = (int)(faces[i].width * (FACE_KAKUDAI_WARIAI-1) / 2); //\u5de6\u53f3\u3067\u62e1\u5927\u3059\u308b\u306e\u30672\u3067\u5272\u3063\u3066\u3044\u308b\u3002\n        int kirinuki_x = faces[i].x-kakudai_size;\n        int kirinuki_y = faces[i].y-kakudai_size;\n        int kirinuki_width  = faces[i].width + kakudai_size*2;\n        int kirinuki_height = faces[i].height+ kakudai_size*2;\n        if( kirinuki_x<0 ||\n            kirinuki_y<0 ||\n            image.size().width  <= kirinuki_x+kirinuki_width ||\n            image.size().height <= kirinuki_y+kirinuki_height ){\n            printf(\"face[%d] located on corner. skip.\\n\", i);\n            exit(101);\n        }\n\n        Mat cut_img(image, Rect(kirinuki_x, kirinuki_y, kirinuki_width, kirinuki_height));\n        imwrite(argv[2], cut_img);\n        printf(\"face[%d] outputed as \\\"%s\\\"\\n\", i, argv[2]);\n\n        rectangle(image, Point(faces[i].x, faces[i].y), Point(faces[i].x + faces[i].width, faces[i].y + faces[i].height), Scalar(0, 200, 0), 1, CV_AA);\n        rectangle(image, Point(kirinuki_x, kirinuki_y), Point(kirinuki_x + kirinuki_width, kirinuki_y + kirinuki_height), Scalar(200, 0, 0), 1, CV_AA);\n    }\n\n    //imshow(\"detect face\", image);\n    //waitKey(0);\n\n    return 0;\n}\n```\n\n```bash:\n$ g++ -g `pkg-config --cflags opencv` -o face_kirinuki face_kirinuki.cpp -L/usr/local/share/OpenCV/3rdparty/lib/ `pkg-config --libs opencv`\n\n$ face_kirinuki target.jpg output.jpg haarcascade_frontalface_alt2.xml\n```\n\n\u4ee5\u4e0a\u3067docker\u4e0a\u3067tensorflow\u3068OpenCV\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306f\u305a\u3002\n\n\n# \u53c2\u8003\u30ea\u30f3\u30af\n- docker\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb http://www.atmarkit.co.jp/ait/articles/1406/10/news031_2.html\n- tensorflow\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#docker-installation\n- OpenCV\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb http://docs.opencv.org/3.0-last-rst/doc/tutorials/introduction/linux_install/linux_install.html\n\n", "tags": ["docker", "TensorFlow", "OpenCV"]}