{"context": "\n\n\u76ee\u7684\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067Rust\u3092\u4f7f\u3046\u3068\u304d\u306b\u5165\u529b\u304c\u3068\u3066\u3082\u9762\u5012\u306b\u611f\u3058\u3001Java\u306eScanner\u30fbC++\u306ecin\u306e\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u3092\u4e00\u3064\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u3089\u4fbf\u5229\u3060\u3068\u601d\u3044\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\n\u203b \u6539\u826f\u7248\u3092\u4e0b\u306b\u8ffd\u8a18\u3057\u307e\u3057\u305f (2017/01/06)\nyukicoder No.349 \u5e72\u652f\u306e\u7f6e\u304d\u7269 \u306b\u3066Accept\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\nScanner\u90e8\u5206\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fchokudai\u3055\u3093\u306e\u30b3\u30fc\u30c9(C#)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a sc: Scanner \u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\u4e00\u884c\u76ee\u306b\u6574\u6570 nnn \u304c\u3001\u7d9a\u304f nnn \u884c\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3089\u306a\u308b\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001sc.next()\u3001 sc.wrapped() \u306b\u3088\u3063\u3066\u9806\u756a\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\u50d5\u306f\u3088\u304f\u624b\u5143\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u3072\u3068\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3001./solver < input\u306e\u3088\u3046\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u306e\u3067\u3001while let Ok(n) = sc.wrapped()\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nuse std::collections::*;\n\nfn main(){\n    let mut sc = Scanner::new();\n    while let Ok(n) = sc.wrapped() {\n        let mut cnt = HashMap::new();\n        for _ in 0..n {\n            let s:String = sc.next();\n            match cnt.get(&s).cloned() {\n                Some(k) => cnt.insert(s, k+1),\n                _ => cnt.insert(s, 1),\n            };\n        };\n\n        let mut max = 0;\n        for (_, val) in cnt.iter() {\n            if &max < val {\n                max = val.clone();\n            }\n        }\n        println!(\"{}\", if max <= (n+1)/2 { \"YES\" } else { \"NO\" });\n    }\n}\n\n// Scanner\n\n#[allow(dead_code)]\nstruct Scanner {\n    token_buffer : Vec<String>,\n    index : usize,\n}\n\n#[allow(dead_code)]\nimpl Scanner {\n    fn new() -> Scanner{\n        Scanner { token_buffer: vec![], index: 0 }\n    }\n\n    fn wrapped<T>(& mut self) -> Result<T,&str> where T: std::str::FromStr {\n        let s = try!(self.fetch_token());\n        let t = try!(s.parse::<T>().map_err(|_| \"Parse error\"));\n        Ok(t)\n    }\n    fn next<T>(& mut self) -> T where T: std::str::FromStr {\n        self.wrapped::<T>().unwrap()\n    }\n\n    fn fetch_token(&mut self) -> Result<&String,&str> {\n        while self.index >= self.token_buffer.len() {\n            let mut st = String::new();\n            while st.trim() == \"\" {\n                match std::io::stdin().read_line(&mut st) {\n                    Ok(l) if l > 0 => continue,\n                    Ok(_)  => return Err(\"End of file\"),\n                    Err(_) => return Err(\"Failed to read line\"),\n                }\n            }\n            self.token_buffer = st.split_whitespace()\n                .map(|x| x.to_string())\n                .collect();\n            self.index = 0;\n        }\n\n        self.index += 1;\n        Ok(&self.token_buffer[self.index - 1])\n    }\n}\n\n\nstd::io::stdin().read_line()\u304cEOF\u306b\u5230\u9054\u3057\u3066\u3082Err\u3092\u8fd4\u3055\u305a\u306bOk(0) (OK\u306e\u4e2d\u306f\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u306e\u6570)\u3092\u8fd4\u3059\u4ed5\u69d8\u306b\u5d4c\u308a\u307e\u3057\u305f\u3002\u3069\u3046\u3044\u3046\u610f\u56f3\u304c\u3042\u308b\u3093\u3067\u3057\u3087\u3046\uff1f\nRust\u521d\u5fc3\u8005\u306a\u306e\u3067\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\u3068\u3044\u3046\u6240\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u2026\n\n\u8ffd\u8a18 (2017/02/13)\n\u3069\u3093\u3069\u3093\u66f8\u304d\u76f4\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u306b\u3042\u308b\u6700\u65b0\u7248\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093 -> http://tubo28.me/algorithm/scanner-rs/\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3068\u306e\u5dee\u5206\n\nEOF\u307e\u3067\u8aad\u307f\u8fbc\u3080\u51e6\u7406\u304c\u66f8\u304d\u3065\u3089\u304f\uff0c\u3055\u3089\u306b\u6bce\u56desplit\u3057\u3066\u3044\u308b\u306e\u3067\u82e5\u5e72\u9045\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067get_char\u30d9\u30fc\u30b9\u306b\nstd:: io::File\u306a\u3069\u306e\u4efb\u610f\u306eRead\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3064\u578b\u3092\u53d7\u3051\u5165\u308c\u308b\u3088\u3046\u306b\u3057\u305f\n\n## \u76ee\u7684\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067Rust\u3092\u4f7f\u3046\u3068\u304d\u306b\u5165\u529b\u304c\u3068\u3066\u3082\u9762\u5012\u306b\u611f\u3058\u3001Java\u306e`Scanner`\u30fbC++\u306e`cin`\u306e\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u3092\u4e00\u3064\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u3042\u3063\u305f\u3089\u4fbf\u5229\u3060\u3068\u601d\u3044\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u5b9f\u88c5\n\n\u203b \u6539\u826f\u7248\u3092\u4e0b\u306b\u8ffd\u8a18\u3057\u307e\u3057\u305f (2017/01/06)\n\n[yukicoder No.349 \u5e72\u652f\u306e\u7f6e\u304d\u7269](http://yukicoder.me/problems/924) \u306b\u3066Accept\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\nScanner\u90e8\u5206\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f[chokudai\u3055\u3093\u306e\u30b3\u30fc\u30c9(C#)](http://abc025.contest.atcoder.jp/submissions/434440)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u305a `sc: Scanner` \u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\u4e00\u884c\u76ee\u306b\u6574\u6570 $n$ \u304c\u3001\u7d9a\u304f $n$ \u884c\u306b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3089\u306a\u308b\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001`sc.next()`\u3001 `sc.wrapped()` \u306b\u3088\u3063\u3066\u9806\u756a\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n\u50d5\u306f\u3088\u304f\u624b\u5143\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u3072\u3068\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3001`./solver < input`\u306e\u3088\u3046\u306b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u306e\u3067\u3001`while let Ok(n) = sc.wrapped()`\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rust\nuse std::collections::*;\n\nfn main(){\n    let mut sc = Scanner::new();\n    while let Ok(n) = sc.wrapped() {\n        let mut cnt = HashMap::new();\n        for _ in 0..n {\n            let s:String = sc.next();\n            match cnt.get(&s).cloned() {\n                Some(k) => cnt.insert(s, k+1),\n                _ => cnt.insert(s, 1),\n            };\n        };\n\n        let mut max = 0;\n        for (_, val) in cnt.iter() {\n            if &max < val {\n                max = val.clone();\n            }\n        }\n        println!(\"{}\", if max <= (n+1)/2 { \"YES\" } else { \"NO\" });\n    }\n}\n\n// Scanner\n\n#[allow(dead_code)]\nstruct Scanner {\n    token_buffer : Vec<String>,\n    index : usize,\n}\n\n#[allow(dead_code)]\nimpl Scanner {\n    fn new() -> Scanner{\n        Scanner { token_buffer: vec![], index: 0 }\n    }\n\n    fn wrapped<T>(& mut self) -> Result<T,&str> where T: std::str::FromStr {\n        let s = try!(self.fetch_token());\n        let t = try!(s.parse::<T>().map_err(|_| \"Parse error\"));\n        Ok(t)\n    }\n    fn next<T>(& mut self) -> T where T: std::str::FromStr {\n        self.wrapped::<T>().unwrap()\n    }\n\n    fn fetch_token(&mut self) -> Result<&String,&str> {\n        while self.index >= self.token_buffer.len() {\n            let mut st = String::new();\n            while st.trim() == \"\" {\n                match std::io::stdin().read_line(&mut st) {\n                    Ok(l) if l > 0 => continue,\n                    Ok(_)  => return Err(\"End of file\"),\n                    Err(_) => return Err(\"Failed to read line\"),\n                }\n            }\n            self.token_buffer = st.split_whitespace()\n                .map(|x| x.to_string())\n                .collect();\n            self.index = 0;\n        }\n\n        self.index += 1;\n        Ok(&self.token_buffer[self.index - 1])\n    }\n}\n\n```\n\n`std::io::stdin().read_line()`\u304c`EOF`\u306b\u5230\u9054\u3057\u3066\u3082`Err`\u3092\u8fd4\u3055\u305a\u306b`Ok(0)` (OK\u306e\u4e2d\u306f\u8aad\u307f\u8fbc\u3093\u3060\u6587\u5b57\u306e\u6570)\u3092\u8fd4\u3059\u4ed5\u69d8\u306b\u5d4c\u308a\u307e\u3057\u305f\u3002\u3069\u3046\u3044\u3046\u610f\u56f3\u304c\u3042\u308b\u3093\u3067\u3057\u3087\u3046\uff1f\n\nRust\u521d\u5fc3\u8005\u306a\u306e\u3067\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\u3068\u3044\u3046\u6240\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u2026\n\n## \u8ffd\u8a18 (2017/02/13)\n\n\u3069\u3093\u3069\u3093\u66f8\u304d\u76f4\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3053\u306b\u3042\u308b\u6700\u65b0\u7248\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093 -> http://tubo28.me/algorithm/scanner-rs/\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3068\u306e\u5dee\u5206\n\n- EOF\u307e\u3067\u8aad\u307f\u8fbc\u3080\u51e6\u7406\u304c\u66f8\u304d\u3065\u3089\u304f\uff0c\u3055\u3089\u306b\u6bce\u56desplit\u3057\u3066\u3044\u308b\u306e\u3067\u82e5\u5e72\u9045\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067get_char\u30d9\u30fc\u30b9\u306b\n- std:: io::File\u306a\u3069\u306e\u4efb\u610f\u306eRead\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3064\u578b\u3092\u53d7\u3051\u5165\u308c\u308b\u3088\u3046\u306b\u3057\u305f\n", "tags": ["rust"]}