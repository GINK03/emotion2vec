{"context": " More than 1 year has passed since last update.Erlang\u3067UNIX domain socket\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001Erlang\u306e\u6a19\u6e96\u3067\u306f\u63a5\u7d9a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\u306a\u306e\u3067\u3001\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u6642\u306e\u3053\u3068\u3092\u66f8\u304f\u3002\n\u307e\u305f\u3001\u6642\u9593\u306e\u90fd\u5408\u3082\u3042\u308a\u3001Client\u3068\u3057\u3066UNIX domain socket\u306b\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3092\u4e2d\u5fc3\u306b\u8abf\u3079\u305f\u3002\n\nUNIX domain socket\u304c\u4f7f\u3048\u308bLibrary\n\u307e\u305a\u3001\u30cd\u30c3\u30c8\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001UNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fGitHub\u4e0a\u306b\u3044\u304f\u3089\u304b\u3042\u3063\u305f\u3002\n\nGitHub repository\n\n\nprocket\n\nprocket is an Erlang library for socket creation and manipulation.\n\u69d8\u3005\u306aSocket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\nunixdom_drv\n\nThis is a very incomplete reimplementation of the UNIX domain socket driver that I wrote and added to the www.erlang.org \"User Contributions\" collection.\nUNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n\nbasho/enm\n\nenm is an Erlang port driver that wraps the nanomsg C library, allowing Erlang systems to communicate with other nanomsg endpoints. enm supports idioms and approaches common to standard Erlang networking facilities such as gen_tcp and gen_udp.\nC\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305fnanomsg\u3092wrap\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\n\n\nafunix\n\nafunix is an api to unix domain sockets. The afunix is a \"plugin\" to the inet/gen_tcp. The api is binary compatible with the gen_tcp interface. The afunix is not available on the windows platform, hence the unix part of afunix.\nUNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n1\u756a\u30b7\u30f3\u30d7\u30eb\uff1f\n\n\n\n\n\n\n\u305d\u306e\u4ed6\nnc\u30b3\u30de\u30f3\u30c9\u3067UNIX domain socket\u306b\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\u3067UNIX domain socket\u3068\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\nErlang\u3067UNIX\u30c9\u30e1\u30a4\u30f3\u30bd\u30b1\u30c3\u30c8\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u63a5\u7d9a\u3092\u884c\u306a\u3046\u7c21\u5358\u306a\u65b9\u6cd5 - sile\u306e\u30d6\u30ed\u30b0\n\n\n\u6a19\u6e96Packages\u306bexamples\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b \"uds_dist\"\nErlang OTP\u306buds_dist\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001 ${OTPROOT}/lib/kernel/examples \u306e\u4e2d\u306b\u3042\u308b\uff08GitHub\uff09\u3002\n\u305f\u3060\u3057\u3001 examples \u3068\u3042\u308b\u3088\u3046\u306b\u3001\u6a19\u6e96\u3067\u306fload\u3055\u308c\u3066\u3044\u306a\u3044\u3057\u3001\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u602a\u3057\u3044\u3002C\u306e\u30b3\u30fc\u30c9\u304c\u7d041,000\u884c\u3001Erlang\u306e\u30b3\u30fc\u30c9\u304c\u7d04600\u884c\u306a\u306e\u3067\u3001\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u4f7f\u7528\n\u307e\u305a\u3001src/uds_server.erl\u5185\u306e erlang:info(machine) \u3060\u3051\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001 erlang:system_info(machine) \u306b\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nMakefile\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u3042\u308b\u304c\u3001rebar.config\u3092\u4f5c\u3063\u3066\u3001rebar\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u6765\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u4e3b\u306b\u4e0b\u8a18\u306e2\u8a2d\u5b9a\u3092\u66f8\u3044\u3066\u304a\u3051\u3070\u826f\u3044\u3002\uff08\u4ed6\u306f\u901a\u5e38\u901a\u308a\uff09\n\nrebar.config\n{port_specs,\n  [\n   {\"priv/lib/uds_drv.so\", [\"c_src/*.c\"]}\n  ]}.\n\n{port_env,\n  [\n   {\".*\", \"CFLAGS\", \"$CFLAGS -O3 -g -fPIC -pedantic -Wall -Werror -Ic_src/\"}\n  ]}.\n\n\n\nUNIX domain socket\u3092\uff08\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\uff09\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n$ ./rebar shell\n1> uds_server:start_link().\n{ok,<0.43.0>}\n% \u958b\u304b\u308c\u3066\u3044\u308bUnix domain socket\u306epath\u306f\"/tmp/erlang/unix_domain_socket_path\"\u3068\u3059\u308b\n2> {ok, Port} = uds:connect(\"unix_domain_socket_path\").\n{ok,#Port<0.920>}\n3> uds:send(Port, \"send message\").\n{ok,#Port<0.920>}\n4> uds:close(Port).\nok\n5> \n\n\u203b\u4eca\u56de\u3001uds_dist.erl\u5468\u308a\u306f\u6642\u9593\u306e\u95a2\u4fc2\u4e0a\u7d42\u3048\u3066\u3044\u306a\u3044\n\n\u5236\u9650\n\n\"/tmp/erlang\" \u4ee5\u4e0b\u3057\u304b\u3001\u5f85\u3061\u53d7\u3051/\u63a5\u7d9a\u3067\u304d\u306a\u3044\ndefine\u90e8\u5206 - GitHub\n\nuds_drv.c\n#define SOCKET_PATH \"/tmp/erlang\"\n\n\n\u3053\u306e\u90e8\u5206\u306e\u8a2d\u5b9a\u3088\u308a\u3001 /tmp/erlang/ \u4ee5\u4e0b\u306b\u3057\u304bUNIX domain socket\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u5236\u9650\u3092\u306a\u304f\u3059\u306b\u306f SOCKET_PATH \u3092\u7a7a\u6587\u5b57\u306b\u3059\u308c\u3070\u3088\u3044\u3002\uff08\u305f\u3060\u3057\u3001Erlang\u306e\u547c\u3073\u51fa\u3057\u5074\u3067UNIX domain socket\u306e\u30d1\u30b9\u306e\u6700\u521d\u306e / \u3092\u9664\u304f\u5fc5\u8981\u304c\u3042\u308b\uff08 /tmp/socket \u306b\u63a5\u7d9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001 \"tmp/socket\" \uff09\u3002\u5acc\u3060\u3063\u305f\u3089\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3002\n\n4byte\u306eSize Header\u304c\u4ed8\u304f\ndefine\u90e8\u5206 - GitHub\n\nuds_drv.c\n#define HEADER_LENGTH 4\n\n\nsend\u95a2\u6570\n\nuds_drv.c\nstatic void do_send(UdsData *ud, char *buff, int bufflen) \n{\n    char header[4];\n    int written;\n    SysIOVec iov[2];\n    ErlIOVec eio;\n    ErlDrvBinary *binv[] = {NULL,NULL};\n\n    put_packet_length(header, bufflen);\n    DEBUGF((\"Write packet header %u,%u,%u,%u.\", (Word) header[0],\n       (Word) header[1], (Word) header[2],(Word) header[3]));\n    iov[0].iov_base = (char *) header;\n    iov[0].iov_len = 4;\n    iov[1].iov_base = buff;\n    iov[1].iov_len = bufflen;\n    eio.iov = iov;\n    eio.binv = binv;\n    eio.vsize = 2;\n    eio.size = bufflen + 4;\n    written = 0;\n    if (driver_sizeq(ud->port) == 0) {\n    if ((written = writev(ud->fd, iov, 2)) == eio.size) {\n\n\nrecv\u95a2\u6570\n\nuds_drv.c\nstatic int buffered_read_package(UdsData *ud, char **result)\n{\n    int res;\n    int data_size;\n\n    if (ud->buffer_pos < ud->header_pos + HEADER_LENGTH) {\n    /* The header is not read yet */\n    DEBUGF((\"Header not read yet\"));\n    if ((res = read_at_least(ud, ud->header_pos + HEADER_LENGTH - \n                 ud->buffer_pos)) < 0) {\n        DEBUGF((\"Header read failed\"));\n        return res;\n    }\n    } \n    DEBUGF((\"Header is read\"));\n    /* We have at least the header read */\n    data_size = get_packet_length((char *) ud->buffer + ud->header_pos);\n    DEBUGF((\"Input packet size = %d\", data_size));\n    if (ud->buffer_pos < ud->header_pos + HEADER_LENGTH + data_size) {\n    /* We need to read more */\n    DEBUGF((\"Need to read more (bufferpos %d, want %d)\", ud->buffer_pos,\n        ud->header_pos + HEADER_LENGTH + data_size));\n    if ((res = read_at_least(ud, \n                 ud->header_pos + HEADER_LENGTH + \n                 data_size - ud->buffer_pos)) < 0) {\n        DEBUGF((\"Data read failed\"));\n        return res;\n    }\n    }\n    DEBUGF((\"Data is completely read\"));\n    *result = (char *) ud->buffer + ud->header_pos + HEADER_LENGTH;\n    ud->header_pos += HEADER_LENGTH + data_size;\n    return data_size;\n}\n\n\n\u4e0a\u306b\u9069\u5f53\u306b\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3057\u3066\u304d\u305f\u304c\u3001\u3053\u306e\u3088\u3046\u306b\u3001\u901a\u4fe1\u5185\u5bb9\u306b4byte\u306eSize Header\u3092\u4ed8\u3051\u308b/\u4ed8\u3044\u3066\u3044\u308b\u524d\u63d0\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3082\u3001Size\u3092\u5909\u3048\u308b/Size Header\u3092\u4ed8\u3051\u306a\u3044\u5834\u5408\u3001\u5b9a\u6570\u306e\u5024\u3092\u4fee\u6b63\u3059\u308b\u3060\u3051\u3067\u306f\u52d5\u304b\u306a\u3044\uff08\u4e3b\u306bsend\u5468\u308a\uff09\u3002Erlang\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540c\u58eb\u304c\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066UNIX domain socket\u3067\u901a\u4fe1\u3059\u308b\u5834\u5408\u306f\u554f\u984c\u304c\u306a\u3044\u304c\uff08\u305d\u306e\u3088\u3046\u306a\u72b6\u6cc1\u304c\u3042\u308b\u306e\u304b\u306f\u5225\u3068\u3057\u3066\uff09\u3001\u4ed5\u69d8\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u306f\u3042\u308b\u7a0b\u5ea6\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nPort drivers\n\u6700\u5f8c\u306b\u3001\u30b3\u30fc\u30c9\u3092\u898b\u308b\u30ec\u30d9\u30eb\u3067Port Driver\u304c\u3069\u3046\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u7c21\u5358\u306b\u66f8\u3044\u3066\u304a\u304f\u3002\nErlDrvEntry - GitHub\n\nErlDrvEntry\nErlDrvEntry uds_driver_entry = {\n    NULL,          /* init, N/A */\n    uds_start,             /* start, called when port is opened */\n    uds_stop,              /* stop, called when port is closed */\n    uds_command,           /* output, called when erlang has sent */\n    uds_input,             /* ready_input, called when input descriptor ready */\n    uds_output,            /* ready_output, called when output descriptor ready */\n    \"uds_drv\",             /* char *driver_name, the argument to open_port */\n    uds_finish,            /* finish, called when unloaded */\n    NULL,                  /* void * that is not used (BC) */\n    uds_control,           /* control, port_control callback */\n    NULL,                  /* timeout, called on timeouts */\n    NULL,                  /* outputv, vector output interface */\n    NULL,                  /* ready_async */\n    NULL,                  /* flush */\n    NULL,                  /* call */\n    NULL,                  /* event */\n    ERL_DRV_EXTENDED_MARKER,\n    ERL_DRV_EXTENDED_MAJOR_VERSION,\n    ERL_DRV_EXTENDED_MINOR_VERSION,\n    0,  /* ERL_DRV_FLAGs */\n    NULL,\n    NULL,                  /* process_exit */\n    uds_stop_select\n};\n\n\n\u307e\u305a\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306bErlDrvEntry\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u3001\u3053\u3053\u306b\u3069\u3093\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3089\u3001\u3069\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u304b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\n\nuds_start / uds_stop\n\nport\u304copen/close\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\n\n\n\nuds_command\n\nErlang\u3067 port_command \u304c\u547c\u3070\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\n\n\n\nuds_input / uds_output\n\n\ndriver_select \u3057\u3066\u3044\u308bdiscriptor\u306b\u5165\u51fa\u529b\u304c\u3042\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\n\n\netc...\n\n\u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53c2\u7167\u3068\u3059\u308b\u3002\n\u307e\u305f\u3001\u4e0a\u8a18\u95a2\u6570\u306e\u5f15\u6570\u3068\u3057\u3066\u53d6\u3089\u308c\u3066\u3044\u308b ErlDrvData \u306f\u3001\u3053\u3053\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30dd\u30a4\u30f3\u30bf\u3067\u3042\u308b\u3002\n\nerl_driver.h\ntypedef struct _erl_drv_data* ErlDrvData; /* Data to be used by the driver itself. */\n\n\n\u3053\u3053\u306b\u306f\u9069\u5f53\u306b\u6301\u3061\u56de\u3059\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u3060\u3051\u307f\u305f\u3044\u3060\u3002uds_dist\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nuds_drv.h\ntypedef struct uds_data {\n    int fd;                   /* File descriptor */\n    ErlDrvPort port;          /* The port identifier */\n    int lockfd;               /* The file descriptor for a lock file in case of listen sockets */\n    Byte creation;            /* The creation serial derived from the lockfile */\n    PortType type;            /* Type of port */\n    char *name;               /* Short name of socket for unlink */\n    Word sent;                /* Messages sent */\n    Word received;            /* Messages received */\n    struct uds_data *partner; /* The partner in an accept/listen pair */\n    struct uds_data *next;    /* Next structure in list */\n\n    /* The input buffer and it's data */\n    int buffer_size;          /* The allocated size of the input buffer */\n    int buffer_pos;           /* Current position in input buffer */\n    int header_pos;           /* Where the current header is in the input buffer */\n    Byte *buffer;            /* The actual input buffer */\n} UdsData;\n\n\n\u3053\u306e\u69cb\u9020\u4f53\u304c\u5404\u95a2\u6570\u306e\u5148\u982d\u3067\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\n\u5f8c\u306f\u3001uds_server.erl \u3067 erl_dll:load_driver/2 \u3057\u3066\u3001 erlang:port_command/2 \u7b49\u306e\u5b9f\u884c\u306b\u3088\u308a\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u6700\u5f8c\u306b\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3001\u81ea\u5206\u3067\u4e00\u304b\u3089\uff08examples\u3092\u898b\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u304a\u3044\u3066\u304a\u3044\u3066\uff09Erlang\u3067UNIX domain socket\u5468\u308a\u3092\u5b9f\u88c5\u3059\u308b\u3068\u306a\u308b\u3068\u3001\u7d50\u69cb\u82e6\u52b4\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3002\u307e\u305f\u3001\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Erlang p.178\u300d\u306b\u3082\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u300c\u30ea\u30f3\u30af\u30a4\u30f3\u30c9\u30e9\u30a4\u30d0\u3067\u4f55\u304b\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3068\u3001Erlang\u30b7\u30b9\u30c6\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u3059\u3079\u3066\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5f71\u97ff\u304c\u51fa\u308b\u300d\uff08\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Erlang\u306e\u6587\u7ae0\u3092\u5f15\u7528\uff09\u306e\u3067\u3001\u300c\u3054\u5229\u7528\u306f\u8a08\u753b\u7684\u306b\u300d\u3002\uff08Segmentation Fault\u304c\u51fa\u308b\u3068Erlang VM\u304c\u843d\u3061\u308b\u2026gkbr\uff09\nErlang\u3067UNIX domain socket\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u3001Erlang\u306e\u6a19\u6e96\u3067\u306f\u63a5\u7d9a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\u306a\u306e\u3067\u3001\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u6642\u306e\u3053\u3068\u3092\u66f8\u304f\u3002\n\u307e\u305f\u3001\u6642\u9593\u306e\u90fd\u5408\u3082\u3042\u308a\u3001Client\u3068\u3057\u3066UNIX domain socket\u306b\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3092\u4e2d\u5fc3\u306b\u8abf\u3079\u305f\u3002\n\n# UNIX domain socket\u304c\u4f7f\u3048\u308bLibrary\n\n\u307e\u305a\u3001\u30cd\u30c3\u30c8\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001UNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fGitHub\u4e0a\u306b\u3044\u304f\u3089\u304b\u3042\u3063\u305f\u3002\n\n## GitHub repository\n\n* [procket](https://github.com/msantos/procket)\n    * procket is an Erlang library for socket creation and manipulation.\n    * \u69d8\u3005\u306aSocket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n* [unixdom_drv](https://github.com/mikma/unixdom_drv)\n    * This is a very incomplete reimplementation of the UNIX domain socket driver that I wrote and added to the www.erlang.org \"User Contributions\" collection.\n    * UNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n* [basho/enm](https://github.com/basho/enm)\n    * enm is an Erlang port driver that wraps the nanomsg C library, allowing Erlang systems to communicate with other nanomsg endpoints. enm supports idioms and approaches common to standard Erlang networking facilities such as gen_tcp and gen_udp.\n    * C\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305f[nanomsg](http://nanomsg.org/)\u3092wrap\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n* [afunix](https://github.com/tonyrog/afunix)\n    * afunix is an api to unix domain sockets. The afunix is a \"plugin\" to the inet/gen_tcp. The api is binary compatible with the gen_tcp interface. The afunix is not available on the windows platform, hence the unix part of afunix.\n    * UNIX domain socket\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n        * _1\u756a\u30b7\u30f3\u30d7\u30eb\uff1f_\n\n## \u305d\u306e\u4ed6\n\nnc\u30b3\u30de\u30f3\u30c9\u3067UNIX domain socket\u306b\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\u3067UNIX domain socket\u3068\u63a5\u7d9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\n* [Erlang\u3067UNIX\u30c9\u30e1\u30a4\u30f3\u30bd\u30b1\u30c3\u30c8\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u63a5\u7d9a\u3092\u884c\u306a\u3046\u7c21\u5358\u306a\u65b9\u6cd5 - sile\u306e\u30d6\u30ed\u30b0]\n(http://sile.hatenablog.jp/entry/2014/11/27/042638)\n\n# \u6a19\u6e96Packages\u306bexamples\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b \"uds_dist\"\n\nErlang OTP\u306buds_dist\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u3001 `${OTPROOT}/lib/kernel/examples` \u306e\u4e2d\u306b\u3042\u308b\uff08[GitHub](https://github.com/erlang/otp/tree/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples)\uff09\u3002\n\u305f\u3060\u3057\u3001 **examples** \u3068\u3042\u308b\u3088\u3046\u306b\u3001\u6a19\u6e96\u3067\u306fload\u3055\u308c\u3066\u3044\u306a\u3044\u3057\u3001\u30b3\u30fc\u30c9\u81ea\u4f53\u3082\u602a\u3057\u3044\u3002C\u306e\u30b3\u30fc\u30c9\u304c\u7d041,000\u884c\u3001Erlang\u306e\u30b3\u30fc\u30c9\u304c\u7d04600\u884c\u306a\u306e\u3067\u3001\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n## \u4f7f\u7528\n\n<font color=\"red\">\u307e\u305a\u3001src/uds_server.erl\u5185\u306e `erlang:info(machine)` \u3060\u3051\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001 `erlang:system_info(machine)` \u306b\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002</font>\n\nMakefile\u306e\u30b5\u30f3\u30d7\u30eb\u3082\u3042\u308b\u304c\u3001rebar.config\u3092\u4f5c\u3063\u3066\u3001rebar\u306e\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u6301\u3063\u3066\u6765\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u4e3b\u306b\u4e0b\u8a18\u306e2\u8a2d\u5b9a\u3092\u66f8\u3044\u3066\u304a\u3051\u3070\u826f\u3044\u3002\uff08\u4ed6\u306f\u901a\u5e38\u901a\u308a\uff09\n\n```erlang:rebar.config\n{port_specs,\n  [\n   {\"priv/lib/uds_drv.so\", [\"c_src/*.c\"]}\n  ]}.\n\n{port_env,\n  [\n   {\".*\", \"CFLAGS\", \"$CFLAGS -O3 -g -fPIC -pedantic -Wall -Werror -Ic_src/\"}\n  ]}.\n\n```\n\nUNIX domain socket\u3092\uff08\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\uff09\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```erl\n$ ./rebar shell\n1> uds_server:start_link().\n{ok,<0.43.0>}\n% \u958b\u304b\u308c\u3066\u3044\u308bUnix domain socket\u306epath\u306f\"/tmp/erlang/unix_domain_socket_path\"\u3068\u3059\u308b\n2> {ok, Port} = uds:connect(\"unix_domain_socket_path\").\n{ok,#Port<0.920>}\n3> uds:send(Port, \"send message\").\n{ok,#Port<0.920>}\n4> uds:close(Port).\nok\n5> \n```\n\n\u203b\u4eca\u56de\u3001uds_dist.erl\u5468\u308a\u306f\u6642\u9593\u306e\u95a2\u4fc2\u4e0a\u7d42\u3048\u3066\u3044\u306a\u3044\n\n# \u5236\u9650\n\n## \"/tmp/erlang\" \u4ee5\u4e0b\u3057\u304b\u3001\u5f85\u3061\u53d7\u3051/\u63a5\u7d9a\u3067\u304d\u306a\u3044\n\n[define\u90e8\u5206 - GitHub](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L98)\n\n```c:uds_drv.c\n#define SOCKET_PATH \"/tmp/erlang\"\n```\n\n\u3053\u306e\u90e8\u5206\u306e\u8a2d\u5b9a\u3088\u308a\u3001 `/tmp/erlang/` \u4ee5\u4e0b\u306b\u3057\u304bUNIX domain socket\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u5236\u9650\u3092\u306a\u304f\u3059\u306b\u306f `SOCKET_PATH` \u3092\u7a7a\u6587\u5b57\u306b\u3059\u308c\u3070\u3088\u3044\u3002\uff08\u305f\u3060\u3057\u3001Erlang\u306e\u547c\u3073\u51fa\u3057\u5074\u3067UNIX domain socket\u306e\u30d1\u30b9\u306e\u6700\u521d\u306e `/` \u3092\u9664\u304f\u5fc5\u8981\u304c\u3042\u308b\uff08 `/tmp/socket` \u306b\u63a5\u7d9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001 `\"tmp/socket\"` \uff09\u3002\u5acc\u3060\u3063\u305f\u3089\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3002\n\n## 4byte\u306eSize Header\u304c\u4ed8\u304f\n\n[define\u90e8\u5206 - GitHub](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L109)\n\n```c:uds_drv.c\n#define HEADER_LENGTH 4\n```\n\n[send\u95a2\u6570](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L707)\n\n```c:uds_drv.c\nstatic void do_send(UdsData *ud, char *buff, int bufflen) \n{\n    char header[4];\n    int written;\n    SysIOVec iov[2];\n    ErlIOVec eio;\n    ErlDrvBinary *binv[] = {NULL,NULL};\n\n    put_packet_length(header, bufflen);\n    DEBUGF((\"Write packet header %u,%u,%u,%u.\", (Word) header[0],\n\t   (Word) header[1], (Word) header[2],(Word) header[3]));\n    iov[0].iov_base = (char *) header;\n    iov[0].iov_len = 4;\n    iov[1].iov_base = buff;\n    iov[1].iov_len = bufflen;\n    eio.iov = iov;\n    eio.binv = binv;\n    eio.vsize = 2;\n    eio.size = bufflen + 4;\n    written = 0;\n    if (driver_sizeq(ud->port) == 0) {\n\tif ((written = writev(ud->fd, iov, 2)) == eio.size) {\n```\n\n[recv\u95a2\u6570](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L753)\n\n```c:uds_drv.c\nstatic int buffered_read_package(UdsData *ud, char **result)\n{\n    int res;\n    int data_size;\n\n    if (ud->buffer_pos < ud->header_pos + HEADER_LENGTH) {\n\t/* The header is not read yet */\n\tDEBUGF((\"Header not read yet\"));\n\tif ((res = read_at_least(ud, ud->header_pos + HEADER_LENGTH - \n\t\t\t\t ud->buffer_pos)) < 0) {\n\t    DEBUGF((\"Header read failed\"));\n\t    return res;\n\t}\n    } \n    DEBUGF((\"Header is read\"));\n    /* We have at least the header read */\n    data_size = get_packet_length((char *) ud->buffer + ud->header_pos);\n    DEBUGF((\"Input packet size = %d\", data_size));\n    if (ud->buffer_pos < ud->header_pos + HEADER_LENGTH + data_size) {\n\t/* We need to read more */\n\tDEBUGF((\"Need to read more (bufferpos %d, want %d)\", ud->buffer_pos,\n\t\tud->header_pos + HEADER_LENGTH + data_size));\n\tif ((res = read_at_least(ud, \n\t\t\t\t ud->header_pos + HEADER_LENGTH + \n\t\t\t\t data_size - ud->buffer_pos)) < 0) {\n\t    DEBUGF((\"Data read failed\"));\n\t    return res;\n\t}\n    }\n    DEBUGF((\"Data is completely read\"));\n    *result = (char *) ud->buffer + ud->header_pos + HEADER_LENGTH;\n    ud->header_pos += HEADER_LENGTH + data_size;\n    return data_size;\n}\n```\n\n\u4e0a\u306b\u9069\u5f53\u306b\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3057\u3066\u304d\u305f\u304c\u3001\u3053\u306e\u3088\u3046\u306b\u3001\u901a\u4fe1\u5185\u5bb9\u306b4byte\u306eSize Header\u3092\u4ed8\u3051\u308b/\u4ed8\u3044\u3066\u3044\u308b\u524d\u63d0\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3082\u3001Size\u3092\u5909\u3048\u308b/Size Header\u3092\u4ed8\u3051\u306a\u3044\u5834\u5408\u3001\u5b9a\u6570\u306e\u5024\u3092\u4fee\u6b63\u3059\u308b\u3060\u3051\u3067\u306f\u52d5\u304b\u306a\u3044\uff08\u4e3b\u306bsend\u5468\u308a\uff09\u3002Erlang\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540c\u58eb\u304c\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066UNIX domain socket\u3067\u901a\u4fe1\u3059\u308b\u5834\u5408\u306f\u554f\u984c\u304c\u306a\u3044\u304c\uff08\u305d\u306e\u3088\u3046\u306a\u72b6\u6cc1\u304c\u3042\u308b\u306e\u304b\u306f\u5225\u3068\u3057\u3066\uff09\u3001\u4ed5\u69d8\u3092\u5909\u3048\u305f\u3044\u5834\u5408\u306f\u3042\u308b\u7a0b\u5ea6\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n# Port drivers\n\n\u6700\u5f8c\u306b\u3001\u30b3\u30fc\u30c9\u3092\u898b\u308b\u30ec\u30d9\u30eb\u3067Port Driver\u304c\u3069\u3046\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u7c21\u5358\u306b\u66f8\u3044\u3066\u304a\u304f\u3002\n\n[ErlDrvEntry - GitHub](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L191)\n\n```c:ErlDrvEntry\nErlDrvEntry uds_driver_entry = {\n    NULL,\t\t   /* init, N/A */\n    uds_start,             /* start, called when port is opened */\n    uds_stop,              /* stop, called when port is closed */\n    uds_command,           /* output, called when erlang has sent */\n    uds_input,             /* ready_input, called when input descriptor ready */\n    uds_output,            /* ready_output, called when output descriptor ready */\n    \"uds_drv\",             /* char *driver_name, the argument to open_port */\n    uds_finish,            /* finish, called when unloaded */\n    NULL,                  /* void * that is not used (BC) */\n    uds_control,           /* control, port_control callback */\n    NULL,                  /* timeout, called on timeouts */\n    NULL,                  /* outputv, vector output interface */\n    NULL,                  /* ready_async */\n    NULL,                  /* flush */\n    NULL,                  /* call */\n    NULL,                  /* event */\n    ERL_DRV_EXTENDED_MARKER,\n    ERL_DRV_EXTENDED_MAJOR_VERSION,\n    ERL_DRV_EXTENDED_MINOR_VERSION,\n    0,\t/* ERL_DRV_FLAGs */\n    NULL,\n    NULL,                  /* process_exit */\n    uds_stop_select\n};\n```\n\n\u307e\u305a\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b[`ErlDrvEntry`](http://www.erlang.org/doc/tutorial/c_portdriver.html#id63867)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u3001\u3053\u3053\u306b\u3069\u3093\u306a\u30a4\u30d9\u30f3\u30c8\u304c\u8d77\u304d\u305f\u3089\u3001\u3069\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u304b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\n\n* `uds_start` / `uds_stop` \n    * port\u304copen/close\u3057\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\n* `uds_command`\n    * Erlang\u3067 `port_command` \u304c\u547c\u3070\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\n* `uds_input` / `uds_output`\n    * `driver_select` \u3057\u3066\u3044\u308bdiscriptor\u306b\u5165\u51fa\u529b\u304c\u3042\u3063\u305f\u6642\u306b\u547c\u3070\u308c\u308b\u95a2\u6570\n* etc...\n\n\u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://www.erlang.org/doc/man/driver_entry.html)\u53c2\u7167\u3068\u3059\u308b\u3002\n\n\u307e\u305f\u3001\u4e0a\u8a18\u95a2\u6570\u306e\u5f15\u6570\u3068\u3057\u3066\u53d6\u3089\u308c\u3066\u3044\u308b `ErlDrvData` \u306f\u3001[\u3053\u3053](https://github.com/erlang/otp/blob/743ed31108ee555db18d9833186865e85e34333e/erts/emulator/beam/erl_driver.h#L224)\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30dd\u30a4\u30f3\u30bf\u3067\u3042\u308b\u3002\n\n```c:erl_driver.h\ntypedef struct _erl_drv_data* ErlDrvData; /* Data to be used by the driver itself. */\n```\n\n\u3053\u3053\u306b\u306f\u9069\u5f53\u306b\u6301\u3061\u56de\u3059\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u3060\u3051\u307f\u305f\u3044\u3060\u3002uds_dist\u3067\u306f[\u6b21\u306e\u3088\u3046\u306b](https://github.com/erlang/otp/blob/172e812c491680fbb175f56f7604d4098cdc9de4/lib/kernel/examples/uds_dist/c_src/uds_drv.c#L126)\u306a\u3063\u3066\u3044\u308b\u3002\n\n```c:uds_drv.h\ntypedef struct uds_data {\n    int fd;                   /* File descriptor */\n    ErlDrvPort port;          /* The port identifier */\n    int lockfd;               /* The file descriptor for a lock file in case of listen sockets */\n    Byte creation;            /* The creation serial derived from the lockfile */\n    PortType type;            /* Type of port */\n    char *name;               /* Short name of socket for unlink */\n    Word sent;                /* Messages sent */\n    Word received;            /* Messages received */\n    struct uds_data *partner; /* The partner in an accept/listen pair */\n    struct uds_data *next;    /* Next structure in list */\n\n    /* The input buffer and it's data */\n    int buffer_size;          /* The allocated size of the input buffer */\n    int buffer_pos;           /* Current position in input buffer */\n    int header_pos;           /* Where the current header is in the input buffer */\n    Byte *buffer;            /* The actual input buffer */\n} UdsData;\n```\n\n\u3053\u306e\u69cb\u9020\u4f53\u304c\u5404\u95a2\u6570\u306e\u5148\u982d\u3067\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\n\n\u5f8c\u306f\u3001uds_server.erl \u3067 `erl_dll:load_driver/2` \u3057\u3066\u3001 `erlang:port_command/2` \u7b49\u306e\u5b9f\u884c\u306b\u3088\u308a\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u3002\n\n# \u6700\u5f8c\u306b\n\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3001\u81ea\u5206\u3067\u4e00\u304b\u3089\uff08examples\u3092\u898b\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u304a\u3044\u3066\u304a\u3044\u3066\uff09Erlang\u3067UNIX domain socket\u5468\u308a\u3092\u5b9f\u88c5\u3059\u308b\u3068\u306a\u308b\u3068\u3001\u7d50\u69cb\u82e6\u52b4\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3002\u307e\u305f\u3001[\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Erlang p.178\u300d](http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Erlang-Joe-Armstrong/dp/4274067149)\u306b\u3082\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u300c\u30ea\u30f3\u30af\u30a4\u30f3\u30c9\u30e9\u30a4\u30d0\u3067\u4f55\u304b\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3068\u3001Erlang\u30b7\u30b9\u30c6\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3001\u30b7\u30b9\u30c6\u30e0\u306e\u3059\u3079\u3066\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5f71\u97ff\u304c\u51fa\u308b\u300d\uff08[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Erlang\u306e\u6587\u7ae0\u3092\u5f15\u7528](https://books.google.co.jp/books?id=fErWbQVSM3YC&pg=PA178&lpg=PA178&dq=%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Erlang+%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%A4%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90&source=bl&ots=Id0SpcFPT0&sig=Mf66XhMeIppbmtPjmPkjUD3ADts&hl=ja&sa=X&ei=kIqSVNnVDsvx8gXLrIDoDw&ved=0CB8Q6AEwAA#v=onepage&q&f=false)\uff09\u306e\u3067\u3001\u300c\u3054\u5229\u7528\u306f\u8a08\u753b\u7684\u306b\u300d\u3002\uff08Segmentation Fault\u304c\u51fa\u308b\u3068Erlang VM\u304c\u843d\u3061\u308b\u2026gkbr\uff09\n", "tags": ["Erlang"]}