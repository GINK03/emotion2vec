{"tags": ["Java", "Stream", "\u30c6\u30ad\u30b9\u30c8\u51e6\u7406"], "context": "\n\n\u8981\u3059\u308b\u306b\u3060\nJava 8 Stream \u306f\u5b9f\u884c\u524d\u3082\u5b9f\u884c\u5f8c\u3082\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u306a\u3044\u3002\nStream\u30af\u30e9\u30b9\u81ea\u4f53\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u6d41\u308c\u3066\u304f\u308b\u500b\u3005\u306e\u8981\u7d20\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u6210\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u3002\u5f93\u3063\u3066 Stream \u3092\u901a\u3057\u3066\u52a0\u5de5\u3055\u308c\u305f\u8981\u7d20\u3092\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u305f\u3081\u306b\u306f\u3001\u6700\u7d42\u7684\u306b\u307e\u305f\u4f55\u3089\u304b\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306a\u308a\u5024\u306a\u308a\u306b\u623b\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u305d\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u7fa4\u3092\u300c\u7d42\u7aef\u64cd\u4f5c(Terminal operation\uff09\u300d\u3068\u547c\u3073\u3001\u305d\u306e\u307b\u304b\u306e\u300c\u4e2d\u9593\u64cd\u4f5c(Intermediate operation)\u300d\u3068\u533a\u5225\u3059\u308b\u3002\n\u4e2d\u9593\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u8981\u7d20\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u8ffd\u52a0\u3057\u3001\u65b0\u305f\u306aStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3002\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u6700\u5f8c\u306b\u547c\u3073\u51fa\u3057\u3001Stream \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u51fa\u305f\u8981\u7d20\u3092\u5225\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3084\u96c6\u7d04\u5024\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n\u69d8\u3005\u306a\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304b\u3089 Stream \u3092\u751f\u6210\u3067\u304d\u305f\u3088\u3046\u306b\u3001Stream\u30af\u30e9\u30b9\u306b\u306f\u69d8\u3005\u306a\u7d42\u7aef\u64cd\u4f5c\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u6700\u7d42\u6210\u679c\u7269\u306f\u3069\u306e\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u3092\u9078\u629e\u3059\u308b\u304b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u3002\n\u7d42\u7aef\u64cd\u4f5c\u304c\u547c\u3070\u308c\u3066\u521d\u3081\u3066\u30bd\u30fc\u30b9\u306e\u8d70\u67fb\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\u305d\u3057\u3066Stream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u82b1\u706b\u306e\u3088\u3046\u306b\u4f7f\u3044\u5207\u308b\uff08Consumable\uff09\u3002\u305d\u306e\u610f\u5473\u3067\u3082\u30bf\u30fc\u30df\u30cd\u30fc\u30bf\u3060\u3002\n    Stream<String> stream = Stream.of(\"\u30a2\u30ab\",\"\u30a2\u30aa\",\"\u30ad\",\"\u30e2\u30e2\",\"\u30df\u30c9\");\n\n    stream.forEach(s -> {\n       System.out.println(s);\n    });\n\n    // Stream \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u518d\u5229\u7528\u3067\u304d\u306a\u3044\u3002\n    long c = stream.count(); \n    // java.lang.IllegalStateException: stream has already been operated upon or closed\n\n\u306a\u308b\u307b\u3069\u3002\n\u3061\u3087\u3063\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u304c\u3001\u307e\u3042\u3001\u591a\u304f\u306e\u8b70\u8ad6\u304c\u5c3d\u304f\u3055\u308c\u305f\u4e0a\u3067\u305d\u3046\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u3053\u3068\u306f\u60f3\u50cf\u3067\u304d\u308b\u3002\u4ee5\u4e0b\u306e Stack Overflow \u306e\u56de\u7b54\u3067 Java \u306e\u4e2d\u306e\u4eba(Stuart Marks\u6c0f)\u304c Stream \u306e\u8a2d\u8a08\u306e\u3044\u304d\u3055\u3064\u3092\u8a9e\u3063\u3066\u3044\u3066\u53c2\u8003\u306b\u306a\u308b\u3002\n\n\nWhy are Java Streams once-off? - Stack Overflow\n\n\n\n2. \u7d42\u7aef\u64cd\u4f5c\n\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u591a\u5c90\u306b\u308f\u305f\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u3066\u3061\u3087\u3063\u3068\u6238\u60d1\u3046\u3002\u3053\u3053\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306e\u89b3\u70b9\u304b\u3089\u6574\u7406\u3057\u305f\u3044\u3002\n\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092 Stream \u306b\u6d41\u3057\u3066\u3044\u308d\u3044\u308d\u51fa\u6765\u305f\u3068\u3057\u3066\u3001\u305d\u308c\u3067\u6700\u7d42\u7684\u306b\u3069\u3046\u3057\u305f\u3044\u306e\u304b\u3002\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306b\u6574\u7406\u3067\u304d\u308b\u3002\n\n\u691c\u7d22\u3057\u305f\u3044\n\u96c6\u7d04\u3057\u305f\u3044\n\u5909\u63db\u3057\u305f\u3044\n\u51fa\u529b\u3057\u305f\u3044\n\n\u3053\u308c\u3089\u306e\u8996\u70b9\u3067\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u3092\u4ed5\u5206\u3051\u3057\u3001\u3069\u308c\u304c\u9069\u7528\u3067\u304d\u3066\u305d\u306e\u4f7f\u3044\u52dd\u624b\u306f\u3069\u3046\u306a\u308b\u306e\u304b\u3092\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\u3002\n\n2.1. \u691c\u7d22\u3059\u308b\n\n2.1.1. findFirst()/findAny()\n\u30e1\u30bd\u30c3\u30c9\u540dfindFirst()/findAny()\u306f\u305d\u308c\u81ea\u4f53\u304c\u8981\u7d20\u3092\u691c\u7d22\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u305d\u308c\u306ffilter()\u306a\u3069\u306e\u4e2d\u9593\u51e6\u7406\u306e\u5f79\u5272\u3060\u3002\nfindFirst()\u306f\u59cb\u3081\u306e\u8981\u7d20\u3092Optional\u3067\u8fd4\u3059\u3002\nfindAny()\u306f\u521d\u3081\u306e\u8981\u7d20\u3092Optional\u3067\u8fd4\u3059\u3002\nOptional\u306f\u7a7a\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nfindLast()\u7684\u306a\u6700\u5f8c\u306e\u8981\u7d20\u3092\u5f97\u308b\u7d42\u7aef\u64cd\u4f5c\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\nList.2-1_find\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\n    String[] words = {\"aaaaaa\", \"bbbbbb\", \"cccccc\"};\n\n    List<String> list = Arrays.asList(words);\n    Optional<String> first = list.stream().findFirst();\n    first.ifPresent(s -> {\n        System.out.println(s);  // \"aaaaaa\"\n    });\n\n    Set<String> set = new HashSet<>(list);\n    Optional<String> any = set.stream().findAny();\n    any.ifPresent(s -> {\n        System.out.println(s);  // \"cccccc\"\n    });\n\n\n\nList.2-2_Set\u306e\u8981\u7d20\u3092\uff11\u500b\u3060\u3051\u53d6\u5f97\u3059\u308b\n    // \u306e\u306f\u3051\u3063\u3053\u3046\u3081\u3093\u3069\u304f\u3055\u3044\n    Set<String> set = ...\n\n    // Iterator\u7d4c\u7531\n    final String one = set.isEmpty() ? \"N/A\" : set.iterator().next();\n\n    // Stream\u7d4c\u7531\n    final String any = set.stream().findAny().orElse(\"N/A\");\n\n\n\nList.2-3_HTML\u304b\u3089title\u3092\u62bd\u51fa\u3059\u308b\n        Pattern p = Pattern.compile(\"<title>(.+?)</title>\", Pattern.CASE_INSENSITIVE);\n\n        // \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f\u6700\u521d\u306etitle\u304c\u691c\u51fa\u3055\u308c\u305f\u884c\u3067\u4e2d\u65ad\u3055\u308c\u308b\u3002\n        String title = Files.lines(Paths.get(\"index.html\"))\n                .map(s -> p.matcher(s))\n                .filter(m -> m.find())\n                .map(m -> m.group(1))\n                .findFirst()\n                .orElse(\"*** NO TITLE ***\");\n\n\n\u5358\u306bfindFirst()\u3068findAny()\u3092\u5dee\u3057\u66ff\u3048\u3066\u307f\u3066\u3082\u7d50\u679c\u306f\u540c\u3058\u3060\u3002\u4e21\u8005\u306e\u9055\u3044\u306f Stream \u3092\u4e26\u5217\u5316\u3057\u305f\u6642\u306b\u73fe\u308c\u308b\u3002\n\nList.2-4_\u7d20\u6570\u3092\u898b\u3064\u3051\u308b\n    final int from = 1_000_000;\n    final int to = from + new Random(System.currentTimeMillis()).nextInt(from); // \u63fa\u3055\u3076\u308a\u3002\n\n    int p = IntStream.range(from, to)\n            .parallel()\n            //.sequential() // sequencial \u3067\u306f\u3069\u3061\u3089\u3067\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3002(=1000003)\n            .filter(n -> {\n                return IntStream.range(2, n)\n                        .noneMatch(m -> n % m == 0);\n            })\n            .findAny()     // prallel \u3067\u306f\u3069\u306e\u7d20\u6570\u304c\u5f97\u3089\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\n            //.findFirst() // prallel \u3067\u3082\u6700\u5c0f\u306e\u7d20\u6570\u304c\u5f97\u3089\u308c\u308b(=1000003)\n            .getAsInt();\n\n    System.out.println(p);\n\n\n\u8981\u7d20\u304c\u5f97\u3089\u308c\u305f\u6642\u70b9\u3067\u4ee5\u964d\u306e Stream \u51e6\u7406\u306f\u6253\u3061\u5207\u3089\u308c\u308b(\u77ed\u7d61\u64cd\u4f5c)\u3002\u4e26\u5217\u51e6\u7406\u306b\u3059\u308c\u3070findFirst()\u3088\u308a\u3082findAny()\u306e\u65b9\u304c\u901f\u304f\u7d50\u679c\u3092\u8fd4\u305b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u3067\u306f\u691c\u7d22\u5bfe\u8c61\u305d\u306e\u3082\u306e\u3088\u308a\u3001\u305d\u306e\u524d\u5f8c\u3084\u4f4d\u7f6e\u306e\u65b9\u3092\u77e5\u308a\u305f\u3044\u3053\u3068\u3082\u591a\u3044\u304c\u3001\u526f\u4f5c\u7528\u3084\u72b6\u614b\u3092\u6301\u305f\u306a\u3044 Stream \u3067\u306f\u96e3\u3057\u3044\u3002\n\nList.2-5_\u30ea\u30b9\u30c8\u306b\u8981\u7d20\u306e\u91cd\u8907\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\npublic boolean hasDuplicate(List<String> list) {\n    Set<String> set = new HashSet<>();\n    return list.stream()\n            .filter(e -> !set.add(e))\n            .findFirst()\n            .isPresent();\n}\n\n\n\nList.2-6_\u3042\u3044\u307e\u3044Map\n// Map\u304b\u3089\u30ad\u30fc\u306e\u5927\u5c0f\u6587\u5b57\u306e\u533a\u5225\u306a\u3057\u3067\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\npublic Optional<Map.Entry<String, String>> looseGetEntry(Map<String, String> map, String key) {\n    return map.entrySet().stream()\n            .filter(e -> e.getKey().equalsIgnoreCase(key))\n            .findAny();\n}\n\n    Map<String, String> emails = ...;\n\n    looseGetEntry(emails, \"Suzuki\").ifPresent(e -> {\n        System.out\n                .format(\"%s <%s>\", e.getKey(), e.getValue())\n                .println();\n                // SUZUKI <suzuki@exemple.jp>\n    });\n\n\n\n2.1.2. allMatch() / anyMatch() / noneMatch()\nallMatch()/anyMatch()/noneMatch()\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e\u95a2\u6570(Predicate) \u3092\u6761\u4ef6\u306b Stream \u7d50\u679c\u306e\u8981\u7d20\u3092\u691c\u7d22\u3057\u3001\u30de\u30c3\u30c1\u3059\u308b\u8981\u7d20\u306e\u5b58\u5728\u72b6\u614b\u3092\u5224\u5b9a\u3059\u308b\u3002\n3\u7a2e\u306e\u9055\u3044\u306f\u305d\u306e\u540d\u304c\u8868\u3059\u306e\u901a\u308a\u3060\u304c\u3001\u8ad6\u7406\u5b66\u306e\u3088\u3046\u3067\u3061\u3087\u3063\u3068\u7406\u5c48\u3063\u307d\u3044\u3002\u7279\u306b\u5426\u5b9a\u6761\u4ef6\u306e\u8ff0\u8a9e\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u30d1\u30c3\u3068\u898b\u3067\u5206\u304b\u3089\u305a\uff15\u79d2\u304f\u3089\u3044\u8003\u3048\u3066\u3057\u307e\u3046\u3002\u5b9f\u7528\u4e0a\u306fforall()\u3068\u304bexists()\u3060\u3063\u305f\u65b9\u304c\u76f4\u611f\u7684\u3067\u304c\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\u7d50\u679c\u306f\u771f\u507d\u5024\u3067\u5f97\u3089\u308c\u308b\u3060\u3051\u3067\u5927\u3057\u305f\u82b8\u306f\u306a\u3044\u304c\u3001\u5165\u529b\u5024\u306e\u691c\u8a3c\u306a\u3069\u3067\u306f\u91cd\u5b9d\u3059\u308b\u3060\u308d\u3046\u3002\n\nList.2-7_match\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n    List<String> list = ... ;\n    boolean ok;\n\n    // \u30e9\u30e0\u30c0\u5f0f\n    ok = list.stream()\n            .allMatch(s -> s != null && !s.isEmpty()); // null\u3068\u7a7a\u6587\u5b57\u5217\u3092\u542b\u307e\u306a\u3044      \n    // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    ok = list.stream()\n            .allMatch(Objects::nonNull);    // null \u3092\u542b\u307e\u306a\u3044\n    // \u8ff0\u8a9e\u95a2\u6570\n    ok = list.stream()\n            .noneMatch(Predicate.isEqual(\"\")); // null\u53ef\u3067\u7a7a\u6587\u5b57\u5217\u3092\u542b\u307e\u306a\u3044\n\n\n\nList.2-8_\u5168\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u305d\u308d\u3063\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    boolean ok = fileNames.parallelStream()\n            .map(Paths::get)\n            .allMatch(path -> Files.exists(path, LinkOption.NOFOLLOW_LINKS));\n\n\n\nList.2-9_\u30ea\u30b9\u30c8\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u7b49\u3057\u3044\u4e8b\u3092\u30c1\u30a7\u30c3\u30af\n    String sample = resultList.get(0);\n    assertTrue(\"\u7d50\u679c\u306e\u8981\u7d20\u304c\u3059\u3079\u3066\u7b49\u3057\u3044\", resultList.stream().allMatch(sample::equals));\n\n\nmatch\u7cfb\u306f\u77ed\u7d61\u7d42\u7aef\u64cd\u4f5c\u3060(Short-circuiting)\u3002\n\u53cd\u4f8b\u304c\u898b\u3064\u304b\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u306f\u6253\u3061\u5207\u308b\u3002\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u5168\u3066\u306e\u8981\u7d20\u304c\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\nList.2-10_\u30d8\u30c3\u30c0\u51fa\u529b\n    // \u30d5\u30a1\u30a4\u30eb\u306f\u6700\u521d\u306e\u7a7a\u884c\u307e\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n    Files.lines(path)\n            .peek(s -> {\n                System.out.println(s);\n            })\n            .anyMatch(String::isEmpty);\n\n\n\u5168\u3066\u306e\u8981\u7d20\u3068\u306f\u3001\uff10\u8981\u7d20\u306e\u5834\u5408\u3082\u542b\u3080\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\uff10\u8981\u7d20\u306e\u7a7a Stream \u3067\u306e\u4ee5\u4e0b\u306e\u6319\u52d5\u3092\u610f\u5916\u3060\u3068\u601d\u3046\u306a\u3089\u3001\u3069\u3053\u304b\u306b\u6f5c\u5728\u7684\u306a\u30d0\u30b0\u3092\u4ed5\u8fbc\u3093\u3067\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nList.2-11_\u7a7a\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306ematch\u7cfb\u7d50\u679c\n    Stream.empty().allMatch(e -> true));   // true\n    Stream.empty().allMatch(e -> false));  // true\n    Stream.empty().anyMatch(e -> true));   // false\n    Stream.empty().anyMatch(e -> false));  // false\n    Stream.empty().noneMatch(e -> true));  // true\n    Stream.empty().noneMatch(e -> false)); // true\n\n\n\n2.2. \u96c6\u7d04\u3059\u308b\n\n2.2.1. count() / min() / max()\ncount()\u306f\u6587\u5b57\u901a\u308a Stream \u306e\u8981\u7d20\u6570\u3092\u6570\u3048\u308b\u3002\n\u672c\u5f53\u306b\u6570\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u306a\u308a\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u3002\n\nList.2-12_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u884c\u6570\n    int lc = (int) Files.lines(Paths.get(\"text.txt\")).count();\n\n\n\nList.2-13_\u30c6\u30ad\u30b9\u30c8\u306e\u5358\u8a9e\u6570\n    int wc = (int) Pattern.compile(\"\\\\W+\").splitAsStream(text).count();\n\n\n\nList.2-14_\u6587\u5b57\u306e\u7570\u306a\u308a\u3092\u6570\u3048\u308b\n    int vc = (int) text.codePoints().distinct().count();\n\n\n\nList.2-15_\u30d1\u30bf\u30fc\u30f3\u306e\u751f\u8d77\u56de\u6570\n    String text = \"\u3042\u3093\u305f\u3042\u305f\u3057\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u3046\u3051\u3069\u3042\u305f\u3057\u3082\u3042\u3093\u305f\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u308f\u3078\u3093\u304b\u3089\u3082\u3046\u3042\u3093\u305f\u3082\u3042\u305f\u3057\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u308f\u3093\u3068\u3044\u3066\u3088\u3042\u3093\u305f\";\n    String word = \"\u3042\u3093\u305f\";\n\n    text = text + \"\\0\"; // <- \u672b\u5c3e\u5bfe\u7b56    \n    word = \"(?<=\" + word + \")\";\n    int count = (int) Pattern.compile(word).splitAsStream(text).count() -1;\n\n\n\nList.2-16_\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u6570\u3092\u6570\u3048\u308b\n    Path dir = ... ;\n    int fileCount = 0;\n    try (Stream<Path> files = \n            Files.find(dir, 100, (path, attrs) -> attrs.isRegularFile())\n    ) {\n        fileCount = (int) files.count();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n\ncount()\u306f\u7d42\u7aef\u64cd\u4f5c\u306a\u306e\u3067\u3001\u8981\u7d20\u6570\u304c\u5206\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u3082\u3046\u305d\u306eStream\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f7f\u3048\u306a\u3044\u3002\n\nList.2-17_\u30c6\u30ad\u30b9\u30c8\u884c\u3068\u884c\u6570\u3092\u4e21\u65b9\u51fa\u529b\u3059\u308b\n    List<String> lines = ...\n\n    long c = lines.stream()\n            .filter(line -> line.contains(\"status:404\"))\n            .peek(line -> {\n                System.out.println(line);\n            })\n            .count();\n    System.out\n            .format(\"************ \u691c\u7d22\u7d50\u679c\uff1a %d \u4ef6\u898b\u3064\u304b\u308a\u307e\u3057\u305f *************\", c)\n            .println();\n\n\nmin()/max()\u306b\u306f\u6bd4\u8f03\u95a2\u6570(Comparator)\u3092\u6e21\u3057\u3066\u8981\u7d20\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u3092\u5f97\u308b\u3002\n\u623b\u308a\u5024\u306fOptional<String>\u3067\u3001\u8981\u7d20\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306b empty \u3068\u306a\u308b\u3002\nStream \u306f\u5fc5\u305a\u6700\u5f8c\u307e\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n\nList.2-18_min()/max()\u306e\u57fa\u672c\n    List<String> list = ... ;\n    Optional<String> min;\n\n    // Comparator\n    min = list.stream()\n            .min(Comparator.naturalOrder()); // \u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u6587\u5b57\u5217\n    // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    min = list.stream()\n            .min(String::compareToIgnoreCase); // \u5927\u5c0f\u6587\u5b57\u533a\u5225\u3057\u306a\u3044\n    // \u30e9\u30e0\u30c0\u5f0f\n    min = list.stream()\n            .min((l, r) -> l.length() - r.length()); // \u6700\u77ed\u6587\u5b57\u5217\n    // Comparable\n    min = list.stream()\n            .min(Comparator.comparing(s -> s.toUpperCase())); // \u5927\u5c0f\u6587\u5b57\u533a\u5225\u3057\u306a\u3044\n\n\n\nList.2-19_\u4e00\u756a\u53e4\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\n    // \u65e5\u4ed8\u66f8\u5f0f\u3067\u30ed\u30fc\u30c6\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u6700\u53e4\u304c min \u306b\u306a\u308b\u306f\u305a\u3002\n    // /var/log/error.log-yyyymmdd\n    try (Stream<Path> logs = Files.list(Paths.get(\"/var/log\"))) {\n        Optional<Path> oldest = logs\n            .filter(path -> path.getFileName().toString().startsWith(\"error.log-\"))\n            .min(Path::compareTo);\n        if(oldest.isPresent()) {\n            Files.delete(oldest.get());  \n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n\n\nList.2-20_Map\u306e\u5024\u3067\u6bd4\u8f03\u3059\u308b\n    Map<String, String> report = new TreeMap<String, String>(){{\n        put(\"\u56fd\u8a9e\", \"C\");\n        put(\"\u7b97\u6570\", \"A+\");\n        put(\"\u7406\u79d1\", \"A-\");\n        put(\"\u793e\u4f1a\", \"D\");\n        put(\"\u6a5f\u68b0\u5b66\u7fd2\u7406\u8ad6II\", \"A+++\");\n    }};\n\n    // \u6587\u5b57\u5217\u8a55\u4fa1\u3067\u6700\u5c0f\u306e\u5024\u304c\u6700\u9ad8\u6210\u7e3e\u3092\u8868\u3059\u306f\u305a\n    Map.Entry<String, String> best = report.entrySet().stream()\n            .min(Comparator.comparing(gp -> gp.getValue() + ','))  // '+'<','<'-'\n            .get();\n\n    System.out.println(best); // \"\u6a5f\u68b0\u5b66\u7fd2\u7406\u8ad6II=A+++\"\n\n\n\u6587\u5b57\u5217\u306e\u6700\u5927\u30fb\u6700\u5c0f\u3092\u5f97\u305f\u3068\u3053\u308d\u3067\u5b9f\u7528\u6027\u306f\u9650\u3089\u308c\u305d\u3046\u3060\u304c\u3001\u306a\u306b\u3082\u6587\u5b57\u5217\u6bd4\u8f03\u306b\u9650\u308b\u3053\u3068\u306f\u306a\u3044\u3002\u8981\u306f\u3001\u8981\u7d20\u6587\u5b57\u5217\u306b\u4f55\u3089\u304b\u306e\u8a55\u4fa1\u3092\u3057\u3066\u3001\u6570\u5024\u3084Comparable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5f97\u3089\u308c\u308c\u3070\u3069\u3093\u306a\u95a2\u6570\u3092\u6e21\u3057\u3066\u3082\u3044\u3044\u306e\u3060\u3002\n\nList.2-21_\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u30e6\u30fc\u30b6\u540d\u90e8\u5206\u304c\u6700\u3082\u9577\u3044\u3082\u306e\u3092\u5f97\u308b\n        List<String> mails = Arrays.asList(\n                \"very.vary.long.name@example.jp\",\n                \"jugemu_jugemu.gokounosurikire1234+qiita@example.jp\",\n                ...\n               );\n\n        String longest = mails.stream()\n                .max(Comparator.comparingInt(m -> m.indexOf(\"@\")))\n                .get();\n\n\n\nList.2-22_\u30b5\u30b8\u30a7\u30b9\u30c8(\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306b\u3088\u308b)\n// Apache Commons\nimport org.apache.commons.lang3.StringUtils; \n\n    List<String> names = Arrays.asList(\"\u30a8\u30ec\u30f3\", \"\u30a2\u30eb\u30df\u30f3\", \"\u30d9\u30eb\u30c8\u30eb\u30c8\", \"\u30d9\u30eb\u30d9\u30eb\", \"\u30f4\u30a7\u30eb\u30ca\u30f3\u30c7\u30b9\");\n    final String someone = \"\u30d9\u30eb\u30ca\u30f3\u30c8\u30ab\";\n\n    // \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306b\u3088\u308b\u8a55\u4fa1\u95a2\u6570\n    ToIntFunction<String> dist = s -> StringUtils.getLevenshteinDistance(someone, s);\n\n    String closest = names.stream()\n            .min(Comparator.comparingInt(dist))\n            .orElse(someone);\n\n    if (!closest.equals(someone)) {\n        System.out.println(\"\u3082\u3057\u304b\u3057\u3066 \" + closest); // \"\u3082\u3057\u304b\u3057\u3066 \u30d9\u30eb\u30c8\u30eb\u30c8\"\n    }\n\n\n\nList.2-23_\u548c\u66a6\u306e\u6bd4\u8f03\n    // Java 8 \u3067\u65e5\u6642\u66f8\u5f0f\u30af\u30e9\u30b9\u3082\u8ffd\u52a0\u3055\u308c\u305f\u3002\n    final DateTimeFormatter wareki = DateTimeFormatter.ofPattern(\"Gy\u5e74M\u6708d\u65e5\")\n            .withChronology(JapaneseChronology.INSTANCE);\n\n    List<String> birthdays = Arrays.asList(\n        \"\u5e73\u621012\u5e743\u67084\u65e5\", \"\u662d\u548c12\u5e743\u67084\u65e5\", \"\u5927\u6b6312\u5e743\u67084\u65e5\", \"\u660e\u6cbb12\u5e743\u67084\u65e5\");\n\n    String oldest = birthdays.stream()\n            .min(Comparator.comparing(s -> LocalDate.parse(s, wareki))) // LocalDate \u306f Comparable\n            .get();\n    System.out.println(oldest); // \"\u660e\u6cbb12\u5e743\u67084\u65e5\"\n\n\n\nList.2-24_Stream\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\uff08\u305d\u306e\uff11\uff09\n    String last = lines.stream()\n            .max((l, r) -> -1)\n            .get();\n\n\n\u3061\u306a\u307f\u306b\u3001java.util.Collections\u81ea\u4f53\u304cmin()/max()\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3082\u305f\u307e\u306b\u306f\u601d\u3044\u51fa\u3057\u3066\u3084\u3063\u3066\u307b\u3057\u3044\u3002\u4e2d\u9593\u64cd\u4f5c\u3092\u4f7f\u308f\u306a\u3044\u306e\u306a\u3089\u3053\u3061\u3089\u306e\u65b9\u304c\u8efd\u3044\u3002\n\u8981\u7d20\u6587\u5b57\u5217\u3092\u4f55\u3089\u304b\u306e\u6570\u5024\u3068\u3057\u3066\u8a55\u4fa1\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u306b\u5bfe\u3059\u308b\u7c21\u5358\u306a\u96c6\u8a08\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u3002IntStream \u3084 DoubleStream \u306a\u3069\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u7cfb Stream \u306b\u306f\u3001count()/min()/max()\u3060\u3051\u3067\u306a\u304fsum()\u3084average()\u3068\u3044\u3063\u305f\u7d42\u7aef\u64cd\u4f5c\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u30eb\u30fc\u30d7\u306a\u3057\u3067\u96c6\u8a08\u5024\u3092\u5f97\u3089\u308c\u308b\u306e\u306f\u4fbf\u5229\u3060\u304c\u3001\u3055\u3089\u306b\u305d\u306e\u96c6\u8a08\u5024\u3092\u4f7f\u3063\u305f\u8a08\u7b97\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u4f55\u56de\u3082 Stream \u3092\u8d70\u3089\u305b\u308b\u306f\u3081\u306b\u306a\u3063\u3066\u9006\u306b\u52b9\u7387\u304c\u60aa\u3044\u3002\u305d\u306e\u305f\u3081\u304b\u5404\u96c6\u8a08\u5024\u3092\u4e00\u767a\u3067\u3068\u308c\u308bsummaryStatistics()\u3068\u3044\u3046\u7d42\u7aef\u64cd\u4f5c\u3082\u3042\u308b\u3002\n\u305d\u308c\u3089\u3092\u99c6\u4f7f\u3059\u308c\u3070\u7d71\u8a08\u89e3\u6790\u7684\u306a\u3061\u3087\u3063\u3068\u51dd\u3063\u305f\u8a08\u7b97\u3082\u4e00\u767a\u3067\u4f55\u3068\u304b\u306a\u308a\u305d\u3046\u306a\u6c17\u3082\u3059\u304c\u3001\u3084\u3063\u3066\u307f\u308b\u3068\u305d\u3093\u306a\u306b\u4f7f\u3044\u52dd\u624b\u306e\u3044\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3002\u8a66\u884c\u932f\u8aa4\u3067\u6642\u9593\u3092\u30e0\u30c0\u306b\u3059\u308b\u3088\u308a\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u3067\u51e6\u7406\u3092\u66f8\u3044\u305f\u65b9\u304c\u5e78\u305b\u3060\u308d\u3046\u3002\n\u4e00\u65b9\u3001Stream \u3092\u4f7f\u3063\u305f\u96c6\u8a08\u304c\u7c21\u5358\u306b\u4e26\u5217\u5316\u3067\u304d\u308b\u3068\u3044\u3046\u9b45\u529b\u306f\u6368\u3066\u304c\u305f\u3044\u3002\n\nList.2-25_\u6700\u6df1\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u6570\u3092\u8abf\u3079\u308b\n    int depth = lines.stream()\n            .map(l -> l.replaceFirst(\"(\\\\s*)(.*)\", \"$1\"))\n            .map(idt -> idt.replaceAll(\"(    | {0,3}\\\\t)\", \"1234\")) // TAB -> 4SP \u63db\u7b97\n            .mapToInt(idt -> idt.length() / 4) // IntStream\n            .max().orElse(0);\n\n\n\nList.2-26_\u82f1\u6587\u306e\u8aad\u307f\u3084\u3059\u3055\u3092\u8a55\u4fa1\u3059\u308b(\u30d5\u30ec\u30c3\u30b7\u30e5-\u30ad\u30f3\u30b1\u30a4\u30c9\u5f0f\u306b\u3088\u308b)\n// \u53b3\u5bc6\u306aFKR\u5024\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002(\u97f3\u7bc0\u89e3\u6790\u306f\u65e5\u672c\u4eba\u306e\u624b\u306b\u8ca0\u3048\u306a\u3044)\n// \u3057\u304b\u3057\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u65e2\u5b58\u306e\u5b9f\u88c5\u9593\u3067\u3082\u7d50\u679c\u306b\u304b\u306a\u308a\u306e\u30d0\u30e9\u30c4\u30ad\u304c\u3042\u308b\u3053\u3068\u3092\u307f\u308c\u3070\u3001\n// \u601d\u3044\u306e\u307b\u304b\u8a31\u5bb9\u7bc4\u56f2\u5185\u306b\u306f\u3042\u308b\u3068\u8003\u3048\u308b\u3002\npublic static void approxFleschKincaidReadabilityTests(String text) {\n    final Pattern paragraphBreak = Pattern.compile(\"\\\\n\\\\s+\");\n    final Pattern period = Pattern.compile(\"[.!?](\\\\s+|$)\");\n    final Pattern nonAlphabet = Pattern.compile(\"[^a-z]+\", Pattern.CASE_INSENSITIVE);\n    final Pattern silentE = Pattern.compile(\"(?<!^[^eaiou]{1,2})e$\", Pattern.CASE_INSENSITIVE);\n    final Pattern pastEd = Pattern.compile(\"(?<!(^[^eaiou]{1,2})|([td]))ed$\", Pattern.CASE_INSENSITIVE);\n    final Pattern vowels = Pattern.compile(\"[eaiouy]+\", Pattern.CASE_INSENSITIVE);\n    final Pattern quotes = Pattern.compile(\"((?<=^|\\\\s)['\u2018\\\"\u201c(])|([)'\u2019\\\"\u201d](?=[,;:]?\\\\s))\");\n\n    String[] paragraphs = paragraphBreak.split(text);\n\n    Stream<String> sentences = Stream.of(paragraphs)\n            .parallel()\n            .map(p -> quotes.matcher(p).replaceAll(\"\"))\n            .flatMap(p -> period.splitAsStream(p));\n    IntSummaryStatistics wsStat = sentences\n            .mapToInt(s -> (int)nonAlphabet.splitAsStream(s).count())\n            .summaryStatistics();\n\n    Stream<String> words = Stream.of(paragraphs)\n            .parallel()\n            .flatMap(p -> nonAlphabet.splitAsStream(p));\n    IntSummaryStatistics vwStat = words\n            .map(w -> silentE.matcher(w).replaceFirst(\"\"))\n            .map(w -> pastEd.matcher(w).replaceFirst(\"d\"))\n            .map(w -> String.join(w, \" \", \" \"))\n            .mapToInt(w -> vowels.split(w).length -1)\n            .summaryStatistics();\n\n    System.out\n            .format(\"Sentence count:            %8d\\n\",  wsStat.getCount())\n            .format(\"Word count:                %8d\\n\",  wsStat.getSum())\n            .format(\"Syllable count:            %8d\\n\",  vwStat.getSum())\n            .format(\"Words per sentence:        %8.2f\\n\",  wsStat.getAverage())\n            .format(\"Syllables per word:        %8.2f\\n\",  vwStat.getAverage())\n            .println();\n\n    double fre = 206.835 - wsStat.getAverage() * 1.015 - vwStat.getAverage() * 84.6;\n    double fkgl = 0.39 * wsStat.getAverage() + 11.8 * vwStat.getAverage() -15.59;        \n    System.out\n            .format(\"Flesch Reading Ease:       %8.2f\\n\", fre)\n            .format(\"Flesch\u2013Kincaid Grade Level:%8.2f\\n\", fkgl)\n            .println();\n}\n\n\n\n2.2.2. reduce()\n\u30ab\u30b9\u30bf\u30e0\u306e\u96c6\u7d04\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u3044\u5834\u5408\u306freduce()\u3092\u4f7f\u3046\u3002\u305f\u3068\u3048\u3070 join \u3067\u306f\u5358\u7d14\u306b\u5b9f\u73fe\u3067\u304d\u306a\u3044\u9023\u7d50\u51e6\u7406\u3059\u308b\u306e\u306b\u4f7f\u3048\u308b\u3002\nreduce()\u306b\u306f\u4ee5\u4e0b\u306e\uff13\u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\nOptional<T> reduce(BinaryOperator<T> accumulator)\nT reduce(T identity, BinaryOperator<T> accumulator)\n<U> U reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner)\n\n\u308f\u3051\u304c\u308f\u304b\u3089\u306a\u3044\u3088\u3002\n\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3080\u3002\n\n\u6307\u5b9a\u3055\u308c\u305f\u5358\u4f4d\u5143\u306e\u5024\u3068\u7d50\u5408\u7684\u306a\u7d2f\u7a4d\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3001\u30ea\u30c7\u30e5\u30fc\u30b9\u3055\u308c\u305f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\nhttps://docs.oracle.com/javase/jp/8/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-\n\n\u306b\u3001\u65e5\u672c\u8a9e\u3067\u304ak\n\u518d\u5ea6\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u3001\u8a73\u7d30\u3092\u898b\u3066\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\u4ee5\u964d\u3001\u5f15\u6570\u306e\u6570\u306b\u5f93\u3063\u3066 reduce(1)\u3001reduce(2)\u3001reduce(3) \u3068\u3057\u3088\u3046\u3002\u8981\u7d20\u578b\u304c String \u306e\u5834\u5408\u3001\u305d\u306e\u547c\u3073\u51fa\u3057\u30d1\u30bf\u30fc\u30f3\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u5c55\u958b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\nList.2-27_reduce\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n    Stream<String> stream = Stream.of(\"a\", \"b\", \"c\",\"d\");\n\n    // reduce(1)\n    Optional<String> result = stream.reduce(\n            // accumulator\n            (String joined, String element) -> {\n                return joined + '/' + element;\n            }\n    );\n    // \"a/b/c/d\"\n\n    // reduce(2)\n    String result = stream.reduce(\n            // identity\n            \"\",\n            // accumulator\n            (String joined, String element) -> {\n                return joined + '/' + element;\n            }\n    );\n    // \"/a/b/c/d\"\n\n    // reduce(3) parallel\n    String result = stream.parallel().reduce(\n            // identity\n            \"\",\n            // accumulator\n            (String joined, String element) -> {\n                return joined + \"/\" + element;\n            },\n            // combiner\n            (String left, String right) -> {\n                return left + \"*\" + right;\n            }\n    );\n    //  \"/a*/b*/c*/d\"\n\n    //\u3000reduce(3) sequential\n    StringBuilder result = stream.sequential().reduce(\n            // identity\n            new StringBuilder(),\n            // accumulator\n            (StringBuilder joined, String element) -> {\n                return joined.append(\"/\").append(element);\n            },\n            // combiner\n            // sequential \u3067\u306f\u547c\u3070\u308c\u306a\u3044\n            (StringBuilder left, StringBuilder right) -> {\n                return left.append(\"*\").append(right);\n            }\n    );\n    // \"/a/b/c/d\"\n\n\n\n\u4eee\u5f15\u6570\u306b\u306f\u3000identitiy\u3001accumrator\u3001combiner \u3068\u3044\u3046\u540d\u524d\u304c\u3064\u3044\u3066\u3044\u308b\u3002\nAPI \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001\u3053\u308c\u3089\u5f15\u6570\u306e\u5024\u3068\u95a2\u6570\u306b\u306f\u3001\u4f55\u3084\u3089\u96e3\u3057\u3044\u3042\u308b\u7a2e\u306e\u6570\u5b66\u7684\u306a\u8981\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\u3057\u304b\u3057\u305d\u308c\u306f\u6226\u5834\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u77e5\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3002\u8584\u76ee\u3067\u898b\u308c\u3070reduce()\u306f\u5358\u306a\u308b\u5909\u6570\u4ed8\u304d\u306e\u5185\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u898b\u3048\u306a\u304f\u3082\u306a\u3044\u3002\nidentitiy \u306f\u672c\u6765\u3001\u6570\u5b66\u3067\u3044\u3046\u5358\u4f4d\u5143(identity element)\u306e\u6027\u8cea\u3092\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u9806\u6b21\u51e6\u7406\u3067\u306f\u5358\u306a\u308b\u521d\u671f\u5024\u3068\u3057\u3066\u554f\u984c\u306a\u3044\u3002\naccumrator \u306e\u7b2c\u4e00\u5f15\u6570\u306f\u305d\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u9593\u3067\u6301\u3061\u56de\u3055\u308c\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u306f\u6271\u3044\u304c\u9762\u5012\u306a\u5916\u90e8\u5909\u6570\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3048\u308b\u3002\n\nList.2-28_\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\uff08\u305d\u306e2\uff09\n    Optional<String> last = stream.reduce((l, r) -> r);\n\n\n\nList.2-29_\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306b\u5909\u63db\u3059\u308b\n    String domain = \"hoge.example.co.jp\";\n    // \u8981\u7d20\u9806\u3092\u9006\u9806\u306b\u3059\u308b\n    String pkg = Stream.of(domain.split(\"\\\\.\"))\n            .reduce((l, r) -> r + \".\" + l).get();\n    // jp.co.example.hoge\n\n\n\nList.2-30_\u7c21\u6613\u30ef\u30fc\u30c9\u30e9\u30c3\u30d7\npublic static String wordwrap(String text, int len) {\n    return Pattern.compile(\" \").splitAsStream(text)\n            .reduce((wrapped, word) -> {\n                if (wrapped.length() - wrapped.lastIndexOf('\\n') + word.length() > len)\n                    return wrapped + '\\n' + word;\n                else\n                    return wrapped + ' ' + word;\n            }).get();    \n}\n\n    String text = \"All work and no play makes Jack a dull boy. \"\n                + \"All work and no play makes Jack a dull boy. \";\n    System.out.println(wordwrap(text, 20));\n\n\n12345678901234567890\n\nAll work and no play\nmakes Jack a dull\nboy. All work and no\nplay makes Jack a\ndull boy.\n\n\nList.2-31_\u30bf\u30b0\u3067\u56f2\u3080\n    String text = \"\u8acb\u6c42\u66f8\";\n\n    String emp = Stream.of(\"b\", \"i\", \"em\", \"strong\", \"span\", \"h1\")\n            .reduce(text, \n                   (str, tag) -> String.format(\"<%2$s>%s</%2$s>\", str, tag)\n            );\n    // <h1><span><strong><em><i><b>\u8acb\u6c42\u66f8</b></i></em></strong></span></h1>\n\n\nreduce(3)\u306e\u7b2c\uff13\u5f15\u6570\u306e combiner \u306f\u4e26\u5217\u51e6\u7406\u3067 Stream \u304c\u5206\u5272\u51e6\u7406\u3055\u308c\u305f\u5f8c\u306e\u7d50\u5408\u6642\u306b\u547c\u3070\u308c\u308b\u3002Stream \u306e\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5206\u5272\u3055\u308c\u308b\u304b\u306f\u3001\u30bd\u30fc\u30b9\u306e\u30bf\u30a4\u30d7\u3084CPU\u30b3\u30a2\u6570\u306a\u3069\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3082\u4f9d\u5b58\u3059\u308b\u3060\u308d\u3046\u304b\u3089\u3001\u5f53\u3066\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n\u8272\u3005\u8a66\u3057\u305f\u304c combiner \u304c\u9806\u6b21\u51e6\u7406(squential)\u3067\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u3088\u3046\u3060\u3002\u4f7f\u308f\u306a\u304f\u3066\u3082 null \u3092\u6e21\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u30c0\u30df\u30fc\u3067\u3082\u95a2\u6570\u3092\u6e21\u3057\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u307e\u305f\u3001reduce(3)\u3067\u306f\u3001\u8981\u7d20\u306e\u578b\u3068\u306f\u5225\u306e\u578b\u3092\u8fd4\u305b\u308b\u306e\u304creduce(1)\u3068reduce(2)\u3068\u306f\u9055\u3046\u3002\n\u3057\u304b\u3057\u3001\u4e26\u5217\u51e6\u7406\u3067\u306e\u4f7f\u7528\u306f\u6ce8\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002reduce(3) \u306e indentity \u306b  StringBuiler \u306e\u3088\u3046\u306a mutable \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u9806\u6b21\u51e6\u7406\u306a\u3089\u671f\u5f85\u901a\u308a\u3067\u3082\u3001\u4e26\u5217\u51e6\u7406\u3067\u306f\u3068\u3093\u3067\u3082\u306a\u3044\u7d50\u679c\u306b\u306a\u308b\u3002\u305d\u306e\u5834\u5408 reduce(3) \u3067\u306f\u306a\u304f collect(3) \u3092\u4f7f\u3063\u305f\u65b9\u304c\u3059\u3053\u3057\u306f\u5b89\u5168\u306b\u306a\u308b(supplier)\u3002\n\u9806\u6b21\u51e6\u7406\u306b\u9650\u5b9a\u3059\u308c\u3070 reduce(3) \u3082\u4f55\u304b\u306b\u4f7f\u3044\u9053\u304c\u306a\u3044\u308f\u3051\u3067\u3082\u306a\u3044\u304c\u3001\u3061\u3087\u3063\u3068\u30c8\u30ea\u30c3\u30ad\u30fc\u3067\u30ed\u30b8\u30c3\u30af\u306e\u898b\u901a\u3057\u3082\u60aa\u304f\u306a\u308b\u306e\u3067\u7121\u7406\u3057\u3066\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u3002\u7d20\u76f4\u306b\u81ea\u5206\u3067\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u66f8\u3044\u305f\u65b9\u304c\u5b89\u5168\u3060\u308d\u3046\u3002\n\nList.2-32_\u884c\u756a\u53f7\u4ed8\u304d\u51fa\u529b\n    lines.stream()\n            .reduce( 1, \n                    (i, line) -> {\n                        System.out.format(\"%4d:   %s\\n\", i, line);\n                        return ++i;\n                    },\n                    (l,r) -> null  // dummy\n             );\n\n\n\nList.2-33_\u540d\u524d\u4ed8\u304d\u6587\u5b57\u5217\u7f6e\u63db\n    Map<String, String> params = new HashMap<>();\n    params.put(\":USER\", \"\u4f50\u85e4\");\n    params.put(\":AMOUNT\", \"100\");\n    String template = \"\u3053\u3093\u306b\u3061\u306f:USER\u3055\u3093\u3002\u65e9\u304f:AMOUNT\u5186\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\";\n\n    String message =  params.entrySet().stream()\n            .reduce(template,\n                    (t, e) -> t.replace(e.getKey(), e.getValue()), \n                    (l, r) -> l // dummy\n            );\n    System.out.println(message);\n    // \u3053\u3093\u306b\u3061\u306f\u4f50\u85e4\u3055\u3093\u3002\u65e9\u304f100\u5186\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\nList.2-34_stream\u3092\u9006\u9806\u306b\u3059\u308b\n    // \u307e\u3042\u3001\u30cd\u30bf\u3068\u3044\u3046\u3053\u3068\u3067...\n    Stream<String> reflux = stream\n            .reduce(Stream.empty(),\n                    (stream, e) -> Stream.concat(Stream.of(e), stream),\n                    (l,r) -> null // dummy\n             );\n\n\n\nList.2-35_\u591a\u9805\u5f0f\u8a08\u7b97\u95a2\u6570\u306e\u751f\u6210\uff08\u30db\u30fc\u30ca\u30fc\u6cd5\u306b\u3088\u308b\uff09\n    // \u3048\u3048\u3001\u3082\u3061\u308d\u3093\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u3067\u3059\u304c\u4f55\u304b\uff1f\n    // f(x) = -4.0x^4 + 3.0x^3 + -2.0x^2 + 1.0\n    String coefficients = \"-4.0, 3.0, -2.0, 1.0\";\n\n    DoubleUnaryOperator f = Stream.of(coefficients.split(\",\\\\s*\"))\n            .map(Double::parseDouble)\n            .reduce((double x) -> 0.0, \n                    (l, r) -> (double x) -> x * l.applyAsDouble(x) + r, \n                    (l, r) -> null // dummy\n            );\n\n    DoubleStream.iterate(0.0, x -> x + .01)\n            .limit(101)\n            .peek(x -> System.out.format(\"% 10.2f\", x))\n            .map(f)\n            .forEach(y -> System.out.format(\"% 10.2f\\n\", y));\n\n\n      0.00      1.00\n      0.01      0.98\n      0.02      0.96\n      0.03      0.94\n      0.04      0.92\n      ...       ...\n      0.99     -1.92\n      1.00     -2.00\n\n\n2.3. \u5909\u63db\u3059\u308b\n\n2.3.1. toArray()\ntoArray()\u306f Stream \u3092\u305d\u306e\u8981\u7d20\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3002\n\u5e38\u8b58\u7684\u306b\u8003\u3048\u3066Stream<String>\u304b\u3089\u306f String \u578b\u306e\u914d\u5217\uff08String[]\uff09\u304c\u5f97\u3089\u308c\u308b\u3082\u306e\u3068\u671f\u5f85\u3057\u3066\u5f53\u7136\u306a\u306e\u3060\u304c\u3001\u5b9f\u969b\u306b\u306f Object \u578b\u914d\u5217\uff08Object[]\uff09\u3067\u3057\u308c\u3063\u3068\u8fd4\u3055\u308c\u308b(\u5f15\u6570\u306a\u3057\u306e\u5834\u5408)\u3002\n\u3053\u306e\u8fba\u306e\u4e8b\u60c5\u306b\u306f\u3001 Java \u304c\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u6388\u304b\u3063\u305f\u6642\u306b\u304b\u3051\u3089\u308c\u305f\u30a4\u30ec\u30a4\u30b8\u30e3\u306e\u546a\u3044\u306b\u3088\u308a\u578b\u306e\u8a18\u61b6\u304c\u5931\u308f\u308c\u308b\u3001\u3068\u3044\u3046\u8a2d\u5b9a\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3002\nString \u578b\u306e\u914d\u5217\u3092\u5f97\u308b\u306b\u306f\u3001toArray()\u306e\u5f15\u6570\u306bString[]\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u6e21\u3057\u3066\u3084\u308b\u3002\n\u3053\u3053\u306f stream.toArray(String[]::new) \u306e\u3088\u3046\u306b\u3001\u8981\u7d20\u578b\u914d\u5217\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\u3092\u6e21\u3059\u306e\u304c\u5b9a\u77f3\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u3081\u3093\u3069\u3046\u306a\u3053\u3068\u3060\u304c\u65b0\u3057\u3044\u546a\u6587\u3068\u3057\u3066\u899a\u3048\u3066\u304a\u3053\u3046\u3002\n\nList.2-36_toArray\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\nStream<String> stream = Stream.of(\"a\", \"b\", ...);\n\n// \u5f15\u6570\u306a\u3057\nObject[] arr = stream.toArray();\n\n// \u914d\u5217\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\nString[] arr = stream.toArray(String[]::new);\n\n// \u30e9\u30e0\u30c0\u5f0f\nString[] arr = stream.toArray((size) -> new String[size]);\n\n\n\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u306a\u306b\u304b\u3068\u6c17\u3092\u4f7f\u3046\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a ArrayList \u306a\u3069\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5909\u63db\u3057\u3066\u697d\u3092\u3059\u308b\u3053\u3068\u306f\u3053\u308c\u307e\u3067\u3082\u3088\u304f\u3042\u3063\u305f\u3002Stream \u3082\u914d\u5217\u64cd\u4f5c\u306e\u65b0\u3057\u3044\u304a\u624b\u8efd\u30c4\u30fc\u30eb\u3068\u3057\u3066\u6d41\u7528\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nList.2-37_\u76f8\u4e92\u5909\u63db\n\n    // stream -> \u914d\u5217\n    String[] arr = stream.toArray(String[]::new);\n\n    //\u3000\u914d\u5217 -> Stream\n    Stream<String> stream = Arrays.stream(arr);\n\n    // stream -> List\n    List<String> list = stream.collect(Collectors.toList());\n\n    // List -> Stream\n    Stream<String> stream = list.stream();\n\n    // List -> \u914d\u5217\n    String[] arr = list.toArray(new String[0]);\n\n    // \u914d\u5217 -> List\n    List<String> list = Arrays.asList(arr);\n\n\n\nList.2-38_\u914d\u5217\u306e\u578b\u3092\u5909\u63db\u3059\u308b\n    int[] intArr = {1, 2, 3};\n\n    // int[] -> Integer[]\n    Integer[] boxedArr = Arrays.stream(intArr)\n            .mapToObj(i -> i)         // autoboxing\n            .toArray(Integer[]::new);\n\n    // int[] -> String[]\n    String[] strArr = Arrays.stream(intArr)\n            .mapToObj(String::valueOf)\n            .toArray(String[]::new);\n\n    // String[] -> int[]\n    int[] intarr2 = Arrays.stream(strArr)\n            .mapToInt(Integer::parseInt) // IntStream\n            .toArray();\n\n    // String[] -> CharSequence[] (\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u914d\u5217)\n    CharSequence[] seqArr = Arrays.stream(strArr)\n            .toArray(CharSequence[]::new);\n\n    // Object[] -> String[]\n      Object[] objs = {1, \"Hello\", LocalDate.now()};\n      String[] tostrs = Arrays.stream(objs)\n              .map(Objects::toString)\n              .toArray(String[]::new); // [1, Hello, 2015-01-01]\n\n\n\nList.2-39_\u914d\u5217\u64cd\u4f5c\n    String[] arr1 = {\"A\", \"B\", \"C\"};\n    String[] arr2 = {\"L\", \"M\", \"N\"};\n    String[] arr3 = {\"X\", \"Y\", \"Z\"};\n\n    String[] arr;\n\n    // \u521d\u671f\u5316\n    arr = IntStream.range(0,  10)\n            .mapToObj(i -> \"\")\n            .toArray(String[]::new);    // [, , , , , , , , , ]\n    // \u8907\u88fd\n    arr = Arrays.stream(arr1)\n            .toArray(String[]::new);    // [A, B, C]\n    // \u9023\u7d50\n    arr = Stream.of(arr1, arr2, arr3)\n            .flatMap(Stream::of)\n            .toArray(String[]::new);    // [A, B, C, L, M, N, X, Y, Z]\n    // \u90e8\u5206\u914d\u5217\n    arr = Arrays.stream(arr, 1, 7)\n            .toArray(String[]::new);    // [B, C, L, M, N, X]\n    // \u90e8\u5206\u7f6e\u63db\n\n    // \u90e8\u5206\u524a\u9664\n\n    // \u91cd\u8907\u524a\u9664\n    arr = Arrays.stream(arr)\n             .distinct()\n             .toArray(String[]::new);\n    // \u5148\u982d\u8ffd\u52a0\n    arr = Stream.of(new String[]{\"\u3042\"}, arr)\n            .flatMap(Stream::of)\n            .toArray(String[]::new);\n    // \u5148\u982d\u524a\u9664\n    arr = Arrays.stream(arr)\n            .skip(1)\n            .toArray(String[]::new);\n    // \u672b\u5c3e\u8ffd\u52a0\n    arr = Stream.of(arr1, new String[]{\"\u3042\"})\n            .flatMap(Stream::of)\n            .toArray(String[]::new);\n    // \u672b\u5c3e\u524a\u9664\n    arr = Arrays.stream(arr)\n             .limit(arr.length -1)\n             .toArray(String[]::new);\n\n    // 2\u6b21\u5143\u914d\u5217\u306e\u5217\u3092\u53d6\u5f97\n    String[][] matrix = {arr1, arr2, arr3};\n    int col = 0;\n    arr = Stream.of(matrix)\n            .map(a -> a[col])\n            .toArray(String[]::new);    // [A, L, X]\n\n\n\nList.2-40_CSV\u3092\uff12\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n    List<String> lines = Arrays.asList(\"aaa,bbb,ccc\", \"ddd,eee,fff\");\n    String[][] matrix = lines.stream()\n            .map(l -> l.split(\",\"))\n            .toArray(String[][]::new);\n\n    System.out.println(Arrays.deepToString(matrix));\n    // [[aaa, bbb, ccc], [ddd, eee, fff]]\n\n\n\nList.2-41_\u30d8\u30c6\u30ed\u30af\u30e9\u30b9\u914d\u5217\u306b\u5909\u63db\n    Pattern p = Pattern.compile(\n            \"^((?<d>[-+]?\\\\d+)|(?<f>[-+]?\\\\d*\\\\.\\\\d+([e][-+]?\\\\d+)?)|(?<b>(true|false)))$\",\n            Pattern.CASE_INSENSITIVE);\n\n    String data = \"123, 10000000.0, -.01E-5, FALSE, OK\";\n    Object[] arr = Stream.of(data.split(\",\\\\s*\"))\n            .map(s -> {\n                Matcher m = p.matcher(s);\n                if (m.find()) {\n                    if (m.group(\"d\") != null) return Integer.parseInt(s);\n                    if (m.group(\"f\") != null) return Double.parseDouble(s);\n                    if (m.group(\"b\") != null) return Boolean.parseBoolean(s);\n                } \n                return s;\n            }).toArray();\n\n    for (Object o : arr) {\n        System.out.println(\"\" + o + \"\\t\" + o.getClass());\n    }\n\n\n123     class java.lang.Integer\n1.0E7   class java.lang.Double\n-1.0E-7 class java.lang.Double\nfalse   class java.lang.Boolean\nOK      class java.lang.String\n\n\n2.3.2. collect()\nList<String>\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3089\u7d50\u679c\u306eList<String>\u304c\u3082\u3089\u3048\u308b\u3068\u5f53\u7136\u601d\u3060\u308d\u3046\u304c\u3001Stream \u306b\u305d\u3093\u306a\u6c17\u306f\u5229\u304b\u306a\u3044\u3002\n    List<String> list = list.stream()\n            .filter(s -> s.startWith(\"a\"))\n            .collect(Collectors.toList());\n\n2014\u5e74\u3001\u3053\u308c\u3092\u521d\u3081\u3066\u898b\u305f\u5168\u56fd\u306eJava\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u98f2\u307f\u8fbc\u3093\u3060\u3067\u3042\u308d\u3046\u8a00\u8449\u3092\u3001\u4eca\u306e\u81ea\u5206\u306b\u8a00\u3046\u8cc7\u683c\u306f\u306a\u3044\u3002\u3060\u3063\u3066\u57fc\u7389\u770c\u6c11\u3060\u3082\u306e\u3002\nStream \u306e\u7d50\u679c\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\u7d42\u7aef\u64cd\u4f5c\u306ecollect()\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u305d\u306e\u69cb\u7bc9\u65b9\u6cd5\u3092\u6307\u793a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n<R,A> R collect(Collector<? super T,A,R> collector)\n<R> R collect(Supplier<R> supplier, BiConsumer<R,? super T> accumulator, BiConsumer<R,R> combiner)\n\n\nList.2-42_collect\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\n\n    Stream<String> stream = ... ;\n    List<String> result;\n\n    // collect(1)\n    result = stream.collect(Collectors.toList());\n\n    // collect(3) \u30e9\u30e0\u30c0\u5f0f\u306b\u5c55\u958b\n    result = stream.collect(\n            // supplier\n            () -> {\n                return new ArrayList<>();\n            },\n            // accumulator\n            (List<String> l, String e) -> { \n                l.add(e);\n            },\n            // combiner \n            (List<String> l, List<String> r) -> {  // BiConsumer<R,R>\n                l.addAll(r);\n            }\n    );\n\n    // collect(3) \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    result = stream.collect(\n            ArrayList::new, // supplier\n            List::add,      // accumulator      \n            List::addAll    // combiner \n    );\n\n    // collect(1) + Collector.of()\n    result = stream.collect(\n            Collector.of(\n                    // supplier\n                    () -> new ArrayList<>(),                \n                    // accumulator\n                    (List<String> l, String e) -> l.add(e),\n                    // combiner\n                    (List<String> l, List<String> r) -> {  // BinaryOperator<A>\n                        l.addAll(r); \n                        return l;\n                    },\n                    // finisher\n                    (List<String> l) -> Collections.unmodifiableList(l)\n            )\n    );\n\n    // collect(1) + Collector.of()\u3000\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    String joined = stream.collect(\n            Collector.of(\n                    StringBuilder::new,     // supplier\n                    StringBuilder::append,  // accumulator\n                    StringBuilder::append,  // combiner\n                    StringBuilder::toString // finisher\n            ));\n\n\nreduce\u306b\u52a3\u3089\u305a\u8907\u96d1\u3060\u3002\n\u95a2\u6570\u3092\uff13\u3064\u3082\uff14\u3064\u3082\u6e21\u3059\u306e\u304c\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6d41\u5100\u3067\u666e\u901a\u306a\u306e\u304b\u306f\u77e5\u3089\u306a\u3044\u3002\u305f\u3060\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u304b\u3089\u307f\u308b\u3068\u3001\u672c\u6765\u30af\u30e9\u30b9\u3067\u30ab\u30d7\u30bb\u30eb\u5316\u3059\u308b\u3079\u304d\u30e1\u30bd\u30c3\u30c9\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3068\u521d\u671f\u5316\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u306e\u64cd\u4f5c\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u64cd\u4f5c\uff09\u3092\u5265\u304d\u51fa\u3057\u3067\u30d0\u30e9\u30d0\u30e9\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3001\u3057\u304b\u3082\u305d\u306e\u6574\u5408\u6027\u306e\u8cac\u4efb\u306f\u305d\u306e\u5834\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u62bc\u3057\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3002\n\u3053\u308c\u306f\u3061\u3087\u3046\u3069\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3092\u88cf\u8fd4\u3057\u306b\u3055\u308c\u305f\u3088\u3046\u3067\u3001\u306a\u3093\u3068\u3082\u30b9\u30d7\u30e9\u30c3\u30bf\u30fc\u306a\u611f\u3058\u3060\u3002\nJava \u306a\u3089\u5f53\u7136\u3053\u308c\u3089\u3092\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u305f\u3044\u3002java.util.stream.Collector\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3001\u540d\u524d\u304b\u3089\u3057\u3066\u306a\u306b\u304b\u53ce\u96c6\u3057\u305d\u3046\u3067\u3044\u304b\u306b\u3082\u305d\u308c\u3063\u307d\u3044\u6c17\u304c\u3059\u308b\u304c\u3001\u305d\u308c\u306f\u671f\u5f85\u306f\u305a\u308c\u3060\u3002\nCollector \u306f\u53ce\u96c6\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u30af\u30e9\u30b9\u305f\u3081\u3082\u306e\u3067\u306f\u306a\u304f\u3001collect() \u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u95a2\u6570\u306e\u30db\u30eb\u30c0\u306b\u3059\u304e\u306a\u3044\u3002\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3078\u306e\u5909\u63db\u624b\u9806\u3092\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u306e\u7d44\u3092\u3042\u3089\u304b\u3058\u3081\u30bb\u30c3\u30c8\u3057\u305f Collector \u3092\u3001collect(1)\u306a\u3069\u306eCollectors\u30e1\u30bd\u30c3\u30c9\u306b\u3076\u3061\u3085\u3063\u3068\u306f\u3081\u3066\u3084\u308b\u3068\u3001\u95a2\u6570\u304c\u3058\u3085\u308b\u308b\u3063\u3068\u5f15\u304d\u629c\u304b\u308c\u308b\u4ed5\u7d44\u307f\u3060\u3002\n\u300c\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u300d\u3068\u304b\u300c\u95a2\u6570\u30d5\u30a3\u30fc\u30c0\u300d\u3068\u3067\u3082\u547c\u3079\u305d\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3060\u304c\u3001\u5b9f\u969b\u306b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3067\u4f55\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u304b\u306f\u3001\u77e5\u3089\u306a\u3044\u3002\nStream API \u306b\u306f\u3059\u3067\u306b\u305d\u306e\u3088\u3046\u306aCollector\u306e\u6c4e\u7528\u7684\u306a\u5b9f\u88c5\u304c\u6570\u591a\u304f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057 Collector \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u306f\u5b58\u5728\u305b\u305a\u3001\u305d\u306e\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30af\u30e9\u30b9\u3067\u3042\u308bjava.util.stream.Collectors\u306b\u3001 static \u306a\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3068\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\u3053\u308c\u307e\u3067\u306e Java API \u306e\u8a2d\u8a08\u3060\u3063\u305f\u3089\u6012\u6d9b\u306e\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306a\u3063\u3066\u3044\u305f\u306f\u305a\u3060\u304c\u3001\u305d\u306e\u4ee3\u308f\u308aCollectors\u30af\u30e9\u30b9\u4e00\u3064\u3067\u9375\u8f2a\u306e\u3088\u3046\u306b\u3057\u3066\u5168\u90e8\u3076\u3089\u4e0b\u3052\u3089\u308c\u305f\u3002\u304b\u304e\u3070\u3042\u3055\u3093\u3082\u3073\u3063\u304f\u308a\u3060\u3002\n\nJava Collector\u30e1\u30e2(Hishidama's Java8 Collector Memo)\n\n\u305d\u306e\u9375\u3092\u6574\u7406\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7cfb\n\n\ntoList()\ntoMap() / toConcurrentMap()\ntoSet()\ntoCollection()\n\n\n\u4ed5\u5206\u3051\u7cfb\n\n\ngroupingBy() / groupingByConcurrent()\npartitioningBy()\n\n\n\u5909\u63db\u7cfb\n\n\nmapping() \n\n\n\u96c6\u7d04\u7cfb\n\n\ncounting()\njoinning()\nmaxBy()/minBy()\nsummarizingXxx()\nsummingXxx()\nreducing()\n\n\n\n\u3053\u308c\u3089\u306f\u5168\u3066Collector\u3092\u8fd4\u3057\u3001\u3057\u304b\u3082\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u308b\u3002\n\u3053\u308c\u3089\u3092\u3059\u3079\u3066\u7406\u89e3\u3057\u4f7f\u3044\u3053\u306a\u305b\u308b\u5fc5\u8981\u306f\u5168\u304f\u306a\u3044\u3057\u3001\u3069\u3046\u306b\u304b\u99c6\u4f7f\u3057\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3067\u304b\u3048\u3063\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3060\u3051\u3060\u3002\u307e\u305a\u306f\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u30a4\u30c7\u30aa\u30e0\u3068\u3057\u3066\u62bc\u3055\u3048\u3066\u304a\u3051\u3070\u3044\u3044\u3060\u308d\u3046\u3002\n\nList.2-43_collect\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n// Collectors \u3092 static \u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30e9\u30b9\u540d\u3092\u7701\u7565\u3067\u304d\u308b\u3002\n// IDE\u306e\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u306f\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9(*)\u3092\u4f7f\u308f\u305b\u3066\u304f\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nimport static java.util.stream.Collectors.*;\n\n    Stream<String> stream = ... ;\n\n    // \u6587\u5b57\u5217\u306b\u5909\u63db(\u9023\u7d50)\n    String text = stream.collect(joining());\n\n    // \u6587\u5b57\u5217\u306b\u5909\u63db(\u533a\u5207\u308a\u6587\u5b57\u6307\u5b9a)\n    String csv = src.stream().collect(joining(\", \"));\n\n    // List \u306b\u5909\u63db\n    List<String> list = stream.collect(toList()); // ArrayList\n\n    // \u4efb\u610f\u306e List \u30af\u30e9\u30b9\u306b\u5909\u63db\n    List<String> list = stream\n            .collect(toCollection(LinkedList::new)); // LinkedList\n\n    // Set \u306b\u5909\u63db\n    Set<String> set = stream.collect(toSet());  // HashSet\n\n    // \u4efb\u610f\u306e Set \u30af\u30e9\u30b9\u306b\u5909\u63db\n    SortedSet<String> set = stream\n            .collect(toCollection(TreeSet::new)); // TreeSet \u30bd\u30fc\u30c8\u6e08\u307f\n\n    LinkedHashSet<String> set = stream\n            .collect(toCollection(LinkedHashSet::new)); // LinkedHashSet \u8981\u7d20\u9806\u3092\u7dad\u6301\n\n    // Map \u306b\u5909\u63db\n    // id -> object\n    Map<Integer, User> map = users.stream()\n            .collect(toMap(\n                    e -> e.getId(),  // key \u91cd\u8907\u3059\u308b\u3068\u4f8b\u5916\u306b\u306a\u308b\n                    e -> e           // value\n            )); // HashMap\n\n    // id -> name\n    Map<Integer, User> map = users.stream()\n            .collect(toMap(User::getId, User::getName));\n\n    // \u4efb\u610f\u306e Map \u30af\u30e9\u30b9\u306b\u5909\u63db\u3059\u308b\n    SortedMap<Integer, User> map = users.stream()\n            .collect(toMap(\n                    e -> e.getId(),\n                    e -> e,\n                    (l, r) -> r, // \u30ad\u30fc\u304c\u91cd\u8907\u3057\u305f\u3089\u4e0a\u66f8\u304d\n                    TreeMap::new\n            )); // TreeMap\n\n\n\nList.2-44_\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092CSV\u306b\u5909\u63db\u3059\u308b\n    Item item = ... ;\n    String qcsv = Stream.of(\n                item.getMaker(),   // String\n                item.getName(),    // String\n                item.getPrice(),   // Integer\n                item.getMfgDate()  // LocalDate\n            )\n            .map(Objects::toString)\n            .map(s -> s.replaceAll(\"'\", \"\\\\\\\\'\"))\n            .collect(Collectors.joining(\"', '\", \"'\", \"'\"));\n    // 'Gyahtol\\'s Foods', '\u3042\u306e\u8089(L)', '100', '2015-01-01'\n\n\n\nList.2-45_Map\u3092\u53cd\u8ee2\u3059\u308b\n    // \u91cd\u8907\u304c\u3042\u308c\u3070\u30a8\u30e9\u30fc\n    Map<String, String> flip = map.entrySet().stream()\n            .collect(Collectors.toMap(e -> e.getValue(), e -> e.getKey()));\n\n\n\nList.2-46_\u5358\u8a9e\u306e\u751f\u8d77\u983b\u5ea6\u3092\u96c6\u8a08\u3059\u308b\nimport static java.util.stream.Collectors.*;\n\n    String text = \"Humpty Dumpty sat on a wall, \"\n                + \"Humpty Dumpty had a great fall. \" \n                + \"All the king's horses and all the king's men \"\n                + \"Couldn't put Humpty together again. \";\n\n    String[] words = text.toLowerCase().split(\"[.,]?\\\\s+\");\n\n    // \u5358\u8a9e -> \u56de\u6570\n    Map<String, Long> freqs = Stream.of(words)\n            .collect(groupingBy(w -> w, counting()));\n    System.out.println(freqs);\n    // {all=2, a=2, again=1, sat=1, couldn't=1, had=1, great=1, put=1, humpty=3, the=2,\n    //  dumpty=2, king's=2, fall=1, and=1, men=1, wall=1, together=1, horses=1, on=1}\n\n    // \u56de\u6570\u3000-> \u5358\u8a9e\n    Map<Long, Set<String>> dist = freqs.entrySet().stream()\n            .collect(groupingBy(e -> e.getValue(),\n                    TreeMap::new, // sorted\n                    mapping(e -> e.getKey(), \n                            toCollection(TreeSet::new)))); // sorted\n    System.out.println(dist);\n    // {1=[again, and, couldn't, fall, great, had, horses, men, on, put, sat, together, wall], \n    //  2=[a, all, dumpty, king's, the], \n    //  3=[humpty]}\n\n\n\nList.2-47_\u5358\u8a9e\u306e\u751f\u8d77\u78ba\u7387\nimport static java.util.stream.Collectors.*;\n    List<String> words = ... ;\n\n    Map<String, Double> p = words.stream()\n            .collect(groupingBy(w -> w,\n                    collectingAndThen(counting(), c -> (double)c / words.size())));\n\n\n\nList.2-48_\u5358\u8a9e\u306e\u8a9e\u5f59(\u30e6\u30cb\u30fc\u30af\u5358\u8a9e)\n    SortedSet<String> vocabulary = words.stream()\n            .collect(Collectors.toCollection(TreeSet::new)); \n\n\nCollectors \u30af\u30e9\u30b9\u304c\u63d0\u4f9b\u3059\u308b\u5404\u30e1\u30bd\u30c3\u30c9\u3092\u3046\u307e\u304f\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3001\u304b\u306a\u308a\u8907\u96d1\u306a\u5909\u63db\u51e6\u7406\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u8868\u73fe\u3067\u304d\u308b\u3002\u3057\u304b\u3057\u305d\u308c\u306f\u3044\u3046\u307b\u3069\u7c21\u5358\u306a\u3053\u3068\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3088\u308a\u30d1\u30ba\u30eb\u306e\u624d\u80fd\u304c\u5fc5\u8981\u306a\u9818\u57df\u306b\u306a\u308b\u3002\u4f7f\u3063\u3066\u307f\u308c\u3070\u308f\u304b\u308b\u304c\u3001\u307e\u3042\u3001\u578b\u63a8\u8ad6\u304c\u6ce3\u304d\u51fa\u3059\u306e\u306b\u306f\u624b\u3092\u713c\u304f\u3060\u308d\u3046\u3002\n\u3057\u304b\u3082\u3001Collectors \u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u306e\u81ea\u7531\u5ea6\u306f\u3001 Stream \u672c\u6765\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3068\u306f\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3044\u3002\u305d\u308c\u3053\u305dCollector\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068Collectors\u30af\u30e9\u30b9\u306f\u3001Collector API \u3068\u304b Transform API \u3068\u547c\u3093\u3067\u3082\u3044\u3044\u304f\u3089\u3044\u306e\u72ec\u7acb\u3057\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u8a2d\u8a08\u601d\u60f3\u304b\u3089\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69d8\u76f8\u3092\u5448\u3057\u3066\u3044\u308b\u3002\n\nList.2-49_\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u6700\u5927\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\n// SQL \u3067\u8868\u73fe\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u554f\u984c\u304c\u3042\u308b\u3002\n// \u305f\u3068\u3048\u3070\u300c\u6708\u6b21\u3054\u3068\u306b\u58f2\u308a\u4e0a\u3052\u304c\u6700\u5927\u3068\u306a\u3063\u305f\u65e5\u4ed8\u3068\u5e97\u8217\u3092\u62bd\u51fa\u3059\u308b\u300d\u306a\u3069\u306f\n// \u7c21\u5358\u305d\u3046\u3067\u610f\u5916\u3068\u9762\u5012\u304f\u3055\u3044\u3002\uff08\u7279\u306b MySQL\u3001\u304a\u307e\u3044\u306e\u3053\u3068\u3060\uff09\n// Collector \u306e\u4e2d\u306b\u306f\u305d\u308c\u3092\u88dc\u5b8c\u3067\u304d\u305d\u3046\u306a\u6a5f\u80fd\u3082\u3042\u308b\u3002\n// \u3082\u3061\u308d\u3093\u60c5\u5f37\u306f Excel \u306e\u30d4\u30dc\u30c3\u30c8\u3092\u4f7f\u3046\u3002\n\nimport static java.util.stream.Collectors.*;\nimport static java.util.Comparator.comparing;\n...\n\n    // \u91ce\u7403\u9078\u624b\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\n    List<Players> players = ... ;\n\n    // \u7403\u56e3\u3054\u3068\u306b\u6253\u7387\u306e\u6700\u3082\u9ad8\u3044\u9078\u624b\u3092\u62bd\u51fa\u3059\u308b\u3002\n    Map<String, Player> topHitters = players.stream()\n           .collect(groupingBy(\n                   Player::getTeam,\n                   collectingAndThen(\n                           maxBy(comparing(Player::getBattingAverage)),\n                           Optional::get)));\n\n    // \u6253\u7387\uff13\u5272\u4ee5\u4e0a\u3068\u672a\u6e80\u306e\u9078\u624b\u306b\u5206\u3051\u3001\u30c1\u30fc\u30e0\u3054\u3068\u306e\u4eba\u6570\u3092\u96c6\u8a08\u3059\u308b\n    Map<Boolean, Map<String, Long>> hitterCounts = players.stream()\n            .collect(partitioningBy(\n                    e -> e.getBattingAverage() >= .300,\n                    groupingBy(\n                            Player::getTeam,\n                            counting())));\n\n\nCollectors\u30af\u30e9\u30b9\u306e\u6301\u3064\u6a5f\u80fd\u3060\u3051\u3067\u306f\u8cc4\u3048\u306a\u3044\u7279\u6b8a\u306a\u5909\u63db\u3092\u3057\u305f\u3044\u5834\u5408\u3001collect(3)\u306b\u81ea\u4f5c\u95a2\u6570\u3092\u6e21\u3057\u305f\u308a\u3001\u30ab\u30b9\u30bf\u30e0\u306eCollector\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306e\u8a71\u984c\u304b\u3089\u3060\u3044\u3076\u96e2\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3082\u3046\u3053\u308c\u4ee5\u4e0a\u6df1\u5165\u308a\u3057\u306a\u3044\u3002\n\n\nJava8\u306eCollector\u3092for\u6587\u3068\u6bd4\u8f03\u3057\u306a\u304c\u3089\u4e00\u304b\u3089\u4f5c\u3063\u3066\u7406\u89e3\u3059\u308b - Qiita\n\n\n2.4. \u51fa\u529b\u3059\u308b\n\n2.4.1. forEach() / forEachOrdered()\nforEach()\u3068\u30e9\u30e0\u30c0\u5f0f\u306f Java \u30d7\u30ed\u30b0\u30e9\u30de\u60b2\u9858\u306e\u5185\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u69cb\u6587\u3092\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3060\u3002\nforEach()\u306fJava 8 \u3067Iterable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e default \u30c8\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3001Collection \u7cfb\u30af\u30e9\u30b9\u306eList\u3084Set\u306a\u3069\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4e00\u90e8\u3067\u306f\u3001\u53e4\u304f\u3055\u3044 for \u6587\u3088\u308aforEach()\u306e\u4f7f\u7528\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\u4e00\u65b9 Stream \u306b\u3082\u76f8\u4f3c\u306eforEach()\u30e1\u30bd\u30c3\u30c9\u304c\u7d42\u7aef\u64cd\u4f5c\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057 Stream \u3067\u306fforEach()\u306f\u63a8\u5968\u3055\u308c\u305a\u3001\u9650\u5b9a\u3055\u308c\u305f\u72b6\u6cc1\u3067\u3084\u3080\u3092\u5f97\u305a\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3044\u3046\u4f4d\u7f6e\u4ed8\u3051\u3060\u3002\n\u4e00\u90e8\u3067\u306fforEach()\u3092\u4f7f\u3063\u305f\u3089\u300c\u8ca0\u3051\u300d\u3068\u307e\u3067\u8a00\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\u305d\u306e\u7406\u7531\u306e\u3072\u3068\u3064\u306f\u3001forEach()\u304c\u526f\u4f5c\u7528\u3092\u76ee\u7684\u3068\u3057\u305f\u64cd\u4f5c\u3060\u304b\u3089\u3060\u308d\u3046\u3002\nforEach()\u306b\u6e21\u3057\u305f\u95a2\u6570(action)\u306f\u5024\u3092\u8fd4\u305b\u305a\u3001\u6a19\u6e96\u51fa\u529b\u3084\u5916\u90e8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3059\u308b\u306a\u3069\u3001\u305d\u306e\u5916\u90e8\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u3057\u304b\u306a\u3044\u3002\n\u3053\u308c\u3092\u526f\u4f5c\u7528(Side-effects)\u3068\u547c\u3073\u3001\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u305d\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3092\u7a62\u3059\u5815\u843d\u3057\u305f\u884c\u70ba\u3068\u307f\u306a\u3055\u308c\u308b\u3002\n\u3082\u3061\u308d\u3093\u305d\u308c\u306f\u4e16\u4fd7\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u77e5\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3002\n\u4f7f\u3048\u308b\u7269\u306f\u4f7f\u3046\u3060\u3051\u3060\u3002\n\nList.2-50_forEach()\u306e\u57fa\u672c\n    List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n\n    // Stream \u306e forEach() \u304c\u526f\u4f5c\u7528\u3067\u3042\u308b\u3053\u3068\u3092\n    // \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u3063\u3066\u660e\u793a\u3057\u305f\u3044\n    list.stream()\n            .forEach(s -> {\n                System.out.println(s);\n            });\n\n    // \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3044\u3068\u30d1\u30c3\u3068\u898b\u3044\u304b\u306b\u3082\u5024\u3092\u8fd4\u3057\u3066\u305d\u3046\n    list.stream().forEach(s -> System.out.println(s));\n\n    // forEach() \u304c\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4f7f\u3046\u3068\u306f\u304a\u3053\u304c\u307e\u3057\u3044\n    list.stream().forEach(System.out::println);\n\n    // Iterable \u306e forEach()\n    list.forEach(s -> {\n        System.out.println(s);\n    });\n\n    // \u540c\u7b49\u306e\u62e1\u5f35 for \u69cb\u6587\n    for (String s : list) {\n        System.out.println(s);\n    }\n\n    Map<String, String> map = new HashMap<>();\n\n    // \u5b9f\u306f Map \u306b\u3082\u3042\u308b\n    map.forEach((key, val) -> {\n        System.out.format(\"%s=%s\\n\", key, val);\n    });\n\n    // Map \u3067\u3082 Stream \u3092\u4f7f\u3044\u305f\u3044\n    map.entrySet().stream()\n            .forEach(e -> {\n                System.out.format(\"%s=%s\\n\", e.getKey(), e.getValue());\n            });\n\n\n\u3057\u304b\u3057 forEach() \u3092\u4f7f\u3063\u3066\u307f\u308b\u3068\u30e9\u30e0\u30c0\u5f0f\u306b\u7d61\u3080\u5236\u7d04\u304c\u52b9\u3044\u3066\u3001\u5358\u7d14\u306b for \u6587\u306e\u4ee3\u66ff\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\n\u5916\u90e8\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4ee3\u5165\u3067\u304d\u306a\u3044(final\u6271\u3044)\u3002\n\u51e6\u7406\u3092\u4e2d\u65ad\uff08break\uff09\u3067\u304d\u306a\u3044\u3002\n\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052(throw)\u3089\u308c\u306a\u3044\u3002\n\n\u5f8c\u306e\uff12\u3064\u306f\u3068\u3082\u304b\u304f\u3001\u6700\u521d\u306e\u306f\u5730\u5473\u306b\u75db\u3044\u3002\n\u305f\u3068\u3048\u3070\u3001\u51fa\u529b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u3088\u3046\u3068\u3059\u308b\u3060\u3051\u3067\u3082\u82e6\u52b4\u3059\u308b\u3002\nJava \u306e\u30e9\u30e0\u30c0\u5f0f\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3067\u306f\u306a\u3044\u3068\u3044\u308f\u308c\u308b\u6240\u4ee5\u3060\u3002\n\n\nJava 8 forEach with index - Stack Overflow\n\n\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u3001\u5916\u90e8\u306b\u5024\u3092\u6e21\u3059\u65b9\u6cd5 - Qiita\n\n\nList.2-51_\u884c\u756a\u53f7\u4ed8\u304d\u691c\u7d22\npublic class GrepN {\n    public static void main(String[] args) throws IOException {\n        String keyword = args[0];\n\n        LineNumberReader reader = \n                new LineNumberReader(new InputStreamReader(System.in));\n        reader.lines()\n                .filter(line -> line.contains(keyword))\n                .forEach(line -> {\n                    System.out\n                            .format(\"%d:%s\", reader.getLineNumber(), line)\n                            .println();\n                });\n    }\n}\n\n\n$ java GrepN Buzz < fizzbuzz.txt\n5:Buzz\n10:Buzz\n15:Fizz Buzz\n20:Buzz\n25:Buzz\n30:Fizz Buzz\n35:Buzz\n...\n\n\nList.2-52_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u884c\u3092\u8868\u793a\uff08\u305d\u306e\uff14\uff09\n// count\u7528\u306e\u7a7a\u8aad\u307f\u306a\u3057\u3067\u591a\u3044\u65e5\u3082\u5b89\u5fc3\u30d0\u30fc\u30b8\u30e7\u30f3\npublic class Tail4 {\n public static void main(String[] args) throws IOException {\n     final int nLines = Integer.parseInt(args[0]);\n     final String fileName = args[1];\n\n     // \u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3059\u308b\u30ea\u30b9\u30c8\n     final LinkedList<String> tail = new LinkedList<>(Arrays.asList(new String[nLines]));\n     Files.lines(Paths.get(fileName))\n             .forEach(line -> {\n                 // final \u306a\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u3002\n                 tail.addLast(line);\n                 tail.removeFirst();\n             });\n\n     tail.stream()\n             .filter(Objects::nonNull)\n             .forEach(line -> {\n                 System.out.println(line);\n             });        \n     }\n}\n\n\n\nList.2-53_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u96c6\u8a08\npublic class Wc {\n    final String name;\n    int lineCount, wordCount, charCount; // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\n    static int maxLineLength;            // \u30af\u30e9\u30b9\u5909\u6570\n\n    public Wc(String name) { this.name = name; }\n\n    public Consumer<String> getCounter() {\n        // \u30e9\u30e0\u30c0\u5f0f\u5916\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\n        Pattern space = Pattern.compile(\"\\\\s+\");\n\n        return (line) -> {\n\n            // \u5916\u90e8\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u53c2\u7167\u306f\u3067\u304d\u308b\n            // \u3057\u304b\u3057\u4ee3\u5165\u306f\u3067\u304d\u306a\u3044\uff08final\u6271\u3044\uff09\n            wordCount += (int) space.splitAsStream(line).count();\n\n            // \u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u306f\u666e\u901a\u306b\u518d\u4ee3\u5165\u3067\u304d\u308b\n            line += \"\\n\"; \n            charCount += (int) line.codePoints().count();\n\n            // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n            lineCount ++;\n\n            // \u30af\u30e9\u30b9\u5909\u6570\u3082\u5909\u66f4\u3067\u304d\u308b\n            maxLineLength = Math.max(maxLineLength, line.length());\n        };\n    }\n\n    public Wc add(Wc wc) {\n        this.lineCount += wc.lineCount;\n        this.wordCount += wc.wordCount;\n        this.charCount += wc.charCount;\n        return this;\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        Consumer<Wc> print = wc -> \n                System.out.format(\"%7d %7d %7d %s\\n\", wc.lineCount, wc.wordCount, wc.charCount, wc.name);\n\n        Wc total = Stream.of(args)\n            .map(Wc::new)\n            .map(wc -> {\n                try (Stream<String> lines = Files.lines(Paths.get(wc.name))) {\n                    lines.forEach(wc.getCounter());\n                    return wc;\n                } catch (IOException e) {\n                    System.err.println(wc.name + \": No such file or directory\");\n                    return null;\n                }\n            })\n            .filter(Objects::nonNull)\n            .peek(print)\n            .reduce(new Wc(\"total\"), Wc::add);\n\n        if (args.length > 1) {\n            print.accept(total);\n        }\n    }\n}\n\n\n\u4e26\u5217 Stream \u3067\u306e forEach \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u8981\u7d20\u9806\u306b\u306a\u3089\u305a\u30d0\u30e9\u30d0\u30e9\u306b\u306a\u308b\u3002\n\u3057\u304b\u3082\u540c\u671f\u3055\u308c\u306a\u3044\u306e\u3067\u51fa\u529b\u304c\u58ca\u308c\u308b\u3002\nforEach()\u306e\u4ee3\u308f\u308a\u306bforEachOrdered()\u3092\u4f7f\u3046\u3068\u3001\u4e2d\u9593\u64cd\u4f5c\u3092\u4e26\u5217\u5b9f\u884c\u3057\u3064\u3064\u51fa\u529b\u3067\u306f\u8981\u7d20\u9806\u3092\u7dad\u6301\u3067\u304d\u308b\u3002\n\nList.2-54_forEachOrdered()\u306e\u52b9\u679c\n    IntStream.range(1, 20)\n            .parallel() // \u4e26\u5217\u51e6\u7406\n            .peek(i -> {\n                System.out\n                        .format(\"%02d%\"+ i + \"s%s\", i, \"\", \"\u2605\")\n                        .println();\n            })\n         // .forEach(i -> {\n            .forEachOrdered(i -> {\n                System.out\n                        .format(\"%02d%\"+ i + \"s%s\", i, \"\", \"-=\u2606\")\n                        .println();\n            });\n\n\n\u3082\u3061\u308d\u3093\u5b9f\u884c\u74b0\u5883\u306b\u3088\u3063\u3066\u30d1\u30bf\u30fc\u30f3\u306f\u7570\u306a\u308b\n12            \u260506      \u2605\n03   \u2605\n17                 \u2605\n04    \u2605\n05     \u2605\n\n08        \u2605\n02  \u2605\n19                   \u2605\n01 \u2605\n09         \u2605\n14              \u2605\n07       \u2605\n01 -=\u2606\n18                  \u2605\n02  -=\u2606\n16                \u2605\n13             \u2605\n11           \u2605\n03   -=\u2606\n04    -=\u2606\n15               \u2605\n05     -=\u2606\n10          \u2605\n06      -=\u2606\n07       -=\u2606\n08        -=\u2606\n09         -=\u2606\n10          -=\u2606\n11           -=\u2606\n12            -=\u2606\n13             -=\u2606\n14              -=\u2606\n15               -=\u2606\n16                -=\u2606\n17                 -=\u2606\n18                  -=\u2606\n19                   -=\u2606\n\n\nList.2-55_Web\u30b5\u30fc\u30d0\u306e\u30ec\u30a4\u30c6\u30f3\u30b7\u3092\u8abf\u3079\u308b\n    String[] urls = {\n            \"http://qiita.com/\",\n            \"http://goo.gl/z5AEEC\",\n            \"http://localhost/1.html\",\n            \"http://localhost/2.html\",\n            ...\n            \"http://localhost/10.html\"\n    };\n\n    Stream.of(urls)\n            .parallel()\n            .forEach(url -> {\n                try {\n                    HttpURLConnection client = (HttpURLConnection) new URL(url).openConnection();\n                    client.setRequestMethod(\"HEAD\");\n\n                    long ms = System.currentTimeMillis();\n                    int code = client.getResponseCode();\n                    ms = System.currentTimeMillis() - ms;\n\n                    synchronized (System.out) {\n                        System.out\n                            .format(\"%2d %6d %d %s\", Thread.currentThread().getId(), ms, code, url)\n                            .println();\n                    }\n                } catch (IOException e) {\n                    System.err.println(e.getMessage() + \" : \" + url);\n                }\n            });\n\n\n\u30b9\u30ec\u30c3\u30c9\u6570\u306f\u56fa\u5b9a\u3067\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u308b\u3002\n11     10 404 http://localhost/2.html\n12     10 404 http://localhost/9.html\n 1     10 404 http://localhost/6.html\n12      3 404 http://localhost/10.html\n 1      3 404 http://localhost/7.html\n12      1 404 http://localhost/8.html\n11      6 404 http://localhost/4.html\n 1      3 404 http://localhost/5.html\n12      3 404 http://localhost/3.html\n 1      2 404 http://localhost/1.html\n13    129 301 http://goo.gl/z5AEEC\n11     92 301 http://qiita.com/\n\n\n2.4.2. iterator()\nJava \u306e\u30e9\u30e0\u30c0\u5f0f\u306b\u526f\u4f5c\u7528\u3092\u6c42\u3081\u308b\u304b\u3089\u7121\u7406\u304c\u3067\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u308f\u305a\u306b\u3001Stream \u306e\u5916\u3067\u30eb\u30fc\u30d7\u3092\u56de\u305b\u308c\u3070\u3044\u3044\u3002\n\u4f55\u306e\u60c5\u3051\u304b Stream \u306fiterator()\u3092\u63d0\u4f9b\u3057\u3001\u5916\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4ecb\u3057\u305f\u8981\u7d20\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\nAPI \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u308c\u3092\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30fb\u30cf\u30c3\u30c1\u300d\u3068\u8868\u73fe\u3057\u3066\u3044\u3066\u306a\u3093\u304b\u3061\u3087\u3063\u3068\u5f15\u3063\u304b\u304b\u308b\u3002\n\u307e\u3042\u3044\u3044\u3001\u3053\u308c\u3067\u62e1\u5f35 for \u6587\u3067\u3082 Stream \u304c\u56de\u305b\u308b\u3088\u3046\u306b\u3001\u3001\u3001\n\u30af\u30c3\u3001\u306a\u3089\u306a\u3044\u3063\uff01\n    Stream<String> stream = ... ;\n\n    for (String s : stream) {\n        System.out.println(s);\n    }\n    // java.lang.Error: Unresolved compilation problem: \n    // Can only iterate over an array or an instance of java.lang.Iterable\n\n\u62e1\u5f35 for \u6587\u304c\u53d7\u3051\u5165\u308c\u308b\u306e\u306fjava.lang.Iterable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u306e iterator() \u3060\u3002\nStream \u306fiterator()\u6301\u3064\u304cIterable\u3067\u306f\u306a\u3044\u3002\n\u8a00\u308f\u3070\u30aa\u30ec\u30aa\u30ec iterator \u3060\u3002\n\u4eca\u66f4 iterator \u3092\u5909\u6570\u306b\u53d6\u3063\u3066hasNext()/next()\u3067\u56de\u3059\u30b3\u30fc\u30c9\u3092\u3061\u307e\u3061\u307e\u66f8\u304f\u306e\u304b\u3002\n\u5730\u5473\u306a\u5acc\u304c\u3089\u305b\u306b\u3057\u304b\u601d\u3048\u306a\u3044\u3002\n\u3046\u30fc\u3080...\n\u3088\u304f\u898b\u308c\u3070\u3001Iterable\u306e\u5b9a\u7fa9\u306f\u305f\u307e\u305f\u307e abstract \u306a\u30e1\u30bd\u30c3\u30c9\u3092iterator()\u4e00\u3064\u3057\u304b\u6301\u305f\u306a\u3044\u3002\n@FunctionalInterface\u3053\u305d\u4ed8\u3044\u3066\u3044\u306a\u3044\u304c\u3001\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u8981\u4ef6\u306f\u6e80\u305f\u3057\u3066\u3044\u308b\u3002\nIterable\u3092\u6e21\u3059\u3088\u3046\u306a\u5c40\u9762\u3067\u306f\u4ee3\u308f\u308a\u306b\u30e9\u30e0\u30c0\u5f0f\u3084\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3060\u3002\n\u304a\u308a\u3083\uff01\n\nList.2-56_\u62e1\u5f35for\u6587\u3067Stream\u3092\u4f7f\u3046\n    Stream<String> stream = ... ;\n\n    for (String s : (Iterable<String>) stream::iterator) {\n        System.out.println(s);\n    }\n\n\n\u52dd\u30c3\u305f\u3002(T^T)\n\u305d\u3053\u307e\u3067\u3059\u308b\u610f\u5473\u304c\u3042\u308b\u304b\u306f\u5225\u3068\u3057\u3066\u3001\u30a4\u30c7\u30aa\u30e0\u3068\u3057\u3066\u77e5\u3063\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u3002\n\u305f\u3060\u3057Iterable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5c06\u6765\u306e\u4ed5\u69d8\u5909\u66f4\u306b\u8010\u3048\u308b\u4fdd\u8a3c\u306f\u306a\u3044\u3002\n\nList.2-57_bigram\u306e\u8ee2\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u9752\u7a7a\u6587\u5eab\u7528\uff09\n// \u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u306f\u9577\u3059\u304e\u305f\u306e\u3067\u53d6\u308a\u4e0b\u3052\u30662-58\u306b\u4ee3\u3048\u307e\u3059\u3002\n\n\n\nList.2-58_\u30bd\u30fc\u30b9\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u524a\u9664\n    Path src = Paths.get(file);\n    Path dst = Paths.get(file + \".nocomment\");\n    Path tmp = Files.createTempFile(this.getClass().getName(), \".tmp\");\n\n    try (Stream<String> lines = Files.lines(src);\n        BufferedWriter bw = Files.newBufferedWriter(tmp);\n    ) {\n        Iterator<String> iter = lines\n                .map(l -> l.replaceAll(\"/\\\\*.*?\\\\*/\", \"\")) /* \u884c\u5185\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3092\u9664\u53bb  */\n                .map(l -> l.replaceFirst(\"//.*\", \"\"))      // \u884c\u30b3\u30e1\u30f3\u30c8\u3092\u524a\u9664\n                .flatMap(l -> {\n                    // \u30d7\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u524d\u5f8c\u3067\u30d6\u30ec\u30a4\u30af\u3059\u308b\n                    return Stream.of(l.split(\"(?=/\\\\*)|(?<=\\\\*/)\"));\n                })\n                .filter(l -> !l.matches(\"\\\\s+\"))          // \u7a7a\u767d\u6587\u5b57\u306e\u307f\u306e\u884c\u3082\u524a\u9664\u3057\u3066\u304a\u304f\n                .iterator();\n\n        // \u72b6\u614b\u3092\u6301\u3066\u308b\n        boolean isComment = false;\n        for (String line :  (Iterable<String>) () -> iter) {\n            if (isComment) {\n                if (line.contains(\"*/\")) {\n                    isComment = false;\n                }\n                continue;                       // continue OK\n            } else {\n                if (line.contains(\"/*\")) {\n                    isComment = true;\n                    continue;                   // continue \u3057\u653e\u984c\n                } else if (line.contains(\"*/\")) {\n                    System.err.println(\"\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306e\u4e0d\u6574\u5408\");\n                    break;                      // break \u3084\u308a\u653e\u984c\n                }\n            }\n            // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u6295\u3052\u653e\u984c\n            bw.write(line);\n            bw.newLine();\n            bw.flush();\n        }\n        bw.close();\n        Files.move(tmp, dst);\n    }\n\n\n\n\u3065\u3065...\u304d.\u305f\u3044...\n\u6b21\u306f\u4e2d\u9593\u64cd\u4f5c...\n\n\u53c2\u8003\n\njava.util.stream (Java Platform SE 8 API\u4ed5\u69d8)\nhttp://docs.oracle.com/javase/jp/8/api/index.html?java/util/stream/package-summary.html\n\nJava Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo)\nhttp://www.ne.jp/asahi/hishidama/home/tech/java/stream.html\n\nJava Collector\u30e1\u30e2(Hishidama's Java8 Collector Memo)\nhttp://www.ne.jp/asahi/hishidama/home/tech/java/collector.html\n\nJava Stream\u30b5\u30f3\u30d7\u30eb(Hishidama's Java8 Stream Example)\nhttp://www.ne.jp/asahi/hishidama/home/tech/java/stream_example.html\n\nJava8 Stream API\u306e\u57fa\u672c(6) - \u7d42\u7aef\u64cd\u4f5c\u306e\u6982\u8981 - \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30ae\u30fc\u30af\u30b9 (Enterprise Geeks)\nhttp://enterprisegeeks.hatenablog.com/entry/2014/05/27/183000\n\nJava8 Stream API\u306e\u57fa\u672c(7) - \u7d42\u7aef\u64cd\u4f5c2(Stream#collect) - \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30ae\u30fc\u30af\u30b9 (Enterprise Geeks)\nhttp://enterprisegeeks.hatenablog.com/entry/2014/06/19/093000\n\nReduction (The Java\u2122 Tutorials > Collections > Aggregate Operations)\nhttps://docs.oracle.com/javase/tutorial/collections/streams/reduction.html\n\nJava 8 Friday: 10 Subtle Mistakes When Using the Streams API\nhttp://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/#comments\n\nJava SE 8 Lambda & Stream API Overview from History\nhttp://www.slideshare.net/OracleMiddleJP/java-se-8-overview-from-history\n\nWhy are Java Streams once-off? - Stack Overflow\nhttp://stackoverflow.com/questions/28459498/why-are-java-streams-once-off\n\nJava8\u306elambda\u69cb\u6587\u304c\u3069\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3067\u306f\u306a\u3044\u304b - \u304d\u3057\u3060\u306e\u306f\u3066\u306a\nhttp://d.hatena.ne.jp/nowokay/20130522\n\nforEach\u66f8\u3044\u305f\u3089\u8ca0\u3051\u3001for\u6587\u7981\u6b62 - torutk\u306e\u65e5\u8a18\nhttp://d.hatena.ne.jp/torutk/20140518/p1\n\nJava8 Stream\u3067\u30d0\u30ea\u30d0\u30ea\u3084\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u4eba\u306e\u305f\u3081\u306eFunctional Interface\u307e\u3068\u3081 - mike-neck\u306e\u30d6\u30ed\u30b0\nhttp://mike-neck.hatenadiary.com/entry/2014/08/01/132527\n\nJava8\u3067\u306e\u6587\u5b57\u5217\u9023\u7d50 - Qiita\nhttp://qiita.com/lonerydeveloper/items/9f7c977c039ad4d24d30\n\nJava\u3067\u6587\u5b57\u5217\u306e\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d39\u4ecb - Qiita\nhttp://qiita.com/ssaito/items/aae5522618d4296c5178\n\nFlesch\u2013Kincaid readability tests - Wikipedia\nhttps://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests\n\nReadability-Score.com\nhttps://readability-score.com/\n\n069.\u97f3\u7bc0 - \u82f1\u8a9e\u3067\u60a9\u3080\u3042\u306a\u305f\u306e\u305f\u3081\u306b\nhttp://roundsquaretriangle.web.fc2.com/text/002_6.html\n\n\n# \u8981\u3059\u308b\u306b\u3060\n\nJava 8 Stream \u306f\u5b9f\u884c\u524d\u3082\u5b9f\u884c\u5f8c\u3082\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u306a\u3044\u3002\n\n`Stream`\u30af\u30e9\u30b9\u81ea\u4f53\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u6d41\u308c\u3066\u304f\u308b\u500b\u3005\u306e\u8981\u7d20\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u6210\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u3002\u5f93\u3063\u3066 Stream \u3092\u901a\u3057\u3066\u52a0\u5de5\u3055\u308c\u305f\u8981\u7d20\u3092\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\u305f\u3081\u306b\u306f\u3001\u6700\u7d42\u7684\u306b\u307e\u305f\u4f55\u3089\u304b\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306a\u308a\u5024\u306a\u308a\u306b\u623b\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u305d\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u7fa4\u3092\u300c\u7d42\u7aef\u64cd\u4f5c(Terminal operation\uff09\u300d\u3068\u547c\u3073\u3001\u305d\u306e\u307b\u304b\u306e\u300c\u4e2d\u9593\u64cd\u4f5c(Intermediate operation)\u300d\u3068\u533a\u5225\u3059\u308b\u3002\n\n\u4e2d\u9593\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u8981\u7d20\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u8ffd\u52a0\u3057\u3001\u65b0\u305f\u306a`Stream`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3002\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u6700\u5f8c\u306b\u547c\u3073\u51fa\u3057\u3001Stream \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u51fa\u305f\u8981\u7d20\u3092\u5225\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3084\u96c6\u7d04\u5024\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n\n\u69d8\u3005\u306a\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304b\u3089 Stream \u3092\u751f\u6210\u3067\u304d\u305f\u3088\u3046\u306b\u3001`Stream`\u30af\u30e9\u30b9\u306b\u306f\u69d8\u3005\u306a\u7d42\u7aef\u64cd\u4f5c\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u6700\u7d42\u6210\u679c\u7269\u306f\u3069\u306e\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u3092\u9078\u629e\u3059\u308b\u304b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u3002\n\n\u7d42\u7aef\u64cd\u4f5c\u304c\u547c\u3070\u308c\u3066\u521d\u3081\u3066\u30bd\u30fc\u30b9\u306e\u8d70\u67fb\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\u305d\u3057\u3066`Stream`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u82b1\u706b\u306e\u3088\u3046\u306b\u4f7f\u3044\u5207\u308b\uff08Consumable\uff09\u3002\u305d\u306e\u610f\u5473\u3067\u3082\u30bf\u30fc\u30df\u30cd\u30fc\u30bf\u3060\u3002\n\n```java\n    Stream<String> stream = Stream.of(\"\u30a2\u30ab\",\"\u30a2\u30aa\",\"\u30ad\",\"\u30e2\u30e2\",\"\u30df\u30c9\");\n            \n    stream.forEach(s -> {\n       System.out.println(s);\n    });\n    \n    // Stream \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u518d\u5229\u7528\u3067\u304d\u306a\u3044\u3002\n    long c = stream.count(); \n    // java.lang.IllegalStateException: stream has already been operated upon or closed\n```\n\n\u306a\u308b\u307b\u3069\u3002\n\n\u3061\u3087\u3063\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u304c\u3001\u307e\u3042\u3001\u591a\u304f\u306e\u8b70\u8ad6\u304c\u5c3d\u304f\u3055\u308c\u305f\u4e0a\u3067\u305d\u3046\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u3053\u3068\u306f\u60f3\u50cf\u3067\u304d\u308b\u3002\u4ee5\u4e0b\u306e Stack Overflow \u306e\u56de\u7b54\u3067 Java \u306e\u4e2d\u306e\u4eba(Stuart Marks\u6c0f)\u304c Stream \u306e\u8a2d\u8a08\u306e\u3044\u304d\u3055\u3064\u3092\u8a9e\u3063\u3066\u3044\u3066\u53c2\u8003\u306b\u306a\u308b\u3002\n\n* [Why are Java Streams once-off?](http://stackoverflow.com/questions/28459498/why-are-java-streams-once-off) - Stack Overflow  \n\n# 2. \u7d42\u7aef\u64cd\u4f5c\n\n\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u306f\u591a\u5c90\u306b\u308f\u305f\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u3066\u3061\u3087\u3063\u3068\u6238\u60d1\u3046\u3002\u3053\u3053\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306e\u89b3\u70b9\u304b\u3089\u6574\u7406\u3057\u305f\u3044\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092 Stream \u306b\u6d41\u3057\u3066\u3044\u308d\u3044\u308d\u51fa\u6765\u305f\u3068\u3057\u3066\u3001\u305d\u308c\u3067\u6700\u7d42\u7684\u306b\u3069\u3046\u3057\u305f\u3044\u306e\u304b\u3002\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306b\u6574\u7406\u3067\u304d\u308b\u3002\n\n* \u691c\u7d22\u3057\u305f\u3044\n* \u96c6\u7d04\u3057\u305f\u3044\n* \u5909\u63db\u3057\u305f\u3044\n* \u51fa\u529b\u3057\u305f\u3044\n\n\u3053\u308c\u3089\u306e\u8996\u70b9\u3067\u7d42\u7aef\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9\u3092\u4ed5\u5206\u3051\u3057\u3001\u3069\u308c\u304c\u9069\u7528\u3067\u304d\u3066\u305d\u306e\u4f7f\u3044\u52dd\u624b\u306f\u3069\u3046\u306a\u308b\u306e\u304b\u3092\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\u3002\n\n## 2.1. \u691c\u7d22\u3059\u308b\n\n### 2.1.1. findFirst()/findAny()\n\n\u30e1\u30bd\u30c3\u30c9\u540d`findFirst()`/`findAny()`\u306f\u305d\u308c\u81ea\u4f53\u304c\u8981\u7d20\u3092\u691c\u7d22\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u305d\u308c\u306f`filter()`\u306a\u3069\u306e\u4e2d\u9593\u51e6\u7406\u306e\u5f79\u5272\u3060\u3002\n\n`findFirst()`\u306f\u59cb\u3081\u306e\u8981\u7d20\u3092`Optional`\u3067\u8fd4\u3059\u3002\n`findAny()`\u306f\u521d\u3081\u306e\u8981\u7d20\u3092`Optional`\u3067\u8fd4\u3059\u3002\n`Optional`\u306f\u7a7a\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n`findLast()`\u7684\u306a\u6700\u5f8c\u306e\u8981\u7d20\u3092\u5f97\u308b\u7d42\u7aef\u64cd\u4f5c\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n```java:List.2-1_find\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\n    String[] words = {\"aaaaaa\", \"bbbbbb\", \"cccccc\"};\n\n    List<String> list = Arrays.asList(words);\n    Optional<String> first = list.stream().findFirst();\n    first.ifPresent(s -> {\n        System.out.println(s);  // \"aaaaaa\"\n    });\n\n    Set<String> set = new HashSet<>(list);\n    Optional<String> any = set.stream().findAny();\n    any.ifPresent(s -> {\n        System.out.println(s);  // \"cccccc\"\n    });\n```\n\n```java:List.2-2_Set\u306e\u8981\u7d20\u3092\uff11\u500b\u3060\u3051\u53d6\u5f97\u3059\u308b\n    // \u306e\u306f\u3051\u3063\u3053\u3046\u3081\u3093\u3069\u304f\u3055\u3044\n    Set<String> set = ...\n\n    // Iterator\u7d4c\u7531\n    final String one = set.isEmpty() ? \"N/A\" : set.iterator().next();\n\n    // Stream\u7d4c\u7531\n    final String any = set.stream().findAny().orElse(\"N/A\");\n```\n\n```java:List.2-3_HTML\u304b\u3089title\u3092\u62bd\u51fa\u3059\u308b\n        Pattern p = Pattern.compile(\"<title>(.+?)</title>\", Pattern.CASE_INSENSITIVE);\n\n        // \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f\u6700\u521d\u306etitle\u304c\u691c\u51fa\u3055\u308c\u305f\u884c\u3067\u4e2d\u65ad\u3055\u308c\u308b\u3002\n        String title = Files.lines(Paths.get(\"index.html\"))\n                .map(s -> p.matcher(s))\n                .filter(m -> m.find())\n                .map(m -> m.group(1))\n                .findFirst()\n                .orElse(\"*** NO TITLE ***\");\n```\n\n\u5358\u306b`findFirst()`\u3068`findAny()`\u3092\u5dee\u3057\u66ff\u3048\u3066\u307f\u3066\u3082\u7d50\u679c\u306f\u540c\u3058\u3060\u3002\u4e21\u8005\u306e\u9055\u3044\u306f Stream \u3092\u4e26\u5217\u5316\u3057\u305f\u6642\u306b\u73fe\u308c\u308b\u3002\n\n```java:List.2-4_\u7d20\u6570\u3092\u898b\u3064\u3051\u308b\n    final int from = 1_000_000;\n    final int to = from + new Random(System.currentTimeMillis()).nextInt(from); // \u63fa\u3055\u3076\u308a\u3002\n\n    int p = IntStream.range(from, to)\n            .parallel()\n            //.sequential() // sequencial \u3067\u306f\u3069\u3061\u3089\u3067\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u3002(=1000003)\n            .filter(n -> {\n                return IntStream.range(2, n)\n                        .noneMatch(m -> n % m == 0);\n            })\n            .findAny()     // prallel \u3067\u306f\u3069\u306e\u7d20\u6570\u304c\u5f97\u3089\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\n            //.findFirst() // prallel \u3067\u3082\u6700\u5c0f\u306e\u7d20\u6570\u304c\u5f97\u3089\u308c\u308b(=1000003)\n            .getAsInt();\n\n    System.out.println(p);\n```\n\n\u8981\u7d20\u304c\u5f97\u3089\u308c\u305f\u6642\u70b9\u3067\u4ee5\u964d\u306e Stream \u51e6\u7406\u306f\u6253\u3061\u5207\u3089\u308c\u308b(\u77ed\u7d61\u64cd\u4f5c)\u3002\u4e26\u5217\u51e6\u7406\u306b\u3059\u308c\u3070`findFirst()`\u3088\u308a\u3082`findAny()`\u306e\u65b9\u304c\u901f\u304f\u7d50\u679c\u3092\u8fd4\u305b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u3067\u306f\u691c\u7d22\u5bfe\u8c61\u305d\u306e\u3082\u306e\u3088\u308a\u3001\u305d\u306e\u524d\u5f8c\u3084\u4f4d\u7f6e\u306e\u65b9\u3092\u77e5\u308a\u305f\u3044\u3053\u3068\u3082\u591a\u3044\u304c\u3001\u526f\u4f5c\u7528\u3084\u72b6\u614b\u3092\u6301\u305f\u306a\u3044 Stream \u3067\u306f\u96e3\u3057\u3044\u3002\n\n```java:List.2-5_\u30ea\u30b9\u30c8\u306b\u8981\u7d20\u306e\u91cd\u8907\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\npublic boolean hasDuplicate(List<String> list) {\n    Set<String> set = new HashSet<>();\n    return list.stream()\n            .filter(e -> !set.add(e))\n            .findFirst()\n            .isPresent();\n}\n```\n\n```java:List.2-6_\u3042\u3044\u307e\u3044Map\n// Map\u304b\u3089\u30ad\u30fc\u306e\u5927\u5c0f\u6587\u5b57\u306e\u533a\u5225\u306a\u3057\u3067\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\npublic Optional<Map.Entry<String, String>> looseGetEntry(Map<String, String> map, String key) {\n    return map.entrySet().stream()\n            .filter(e -> e.getKey().equalsIgnoreCase(key))\n            .findAny();\n}\n\n    Map<String, String> emails = ...;\n\n    looseGetEntry(emails, \"Suzuki\").ifPresent(e -> {\n        System.out\n                .format(\"%s <%s>\", e.getKey(), e.getValue())\n                .println();\n                // SUZUKI <suzuki@exemple.jp>\n    });\n```\n\n### 2.1.2. allMatch() / anyMatch() / noneMatch()\n\n`allMatch()`/`anyMatch()`/`noneMatch()`\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e\u95a2\u6570(`Predicate`) \u3092\u6761\u4ef6\u306b Stream \u7d50\u679c\u306e\u8981\u7d20\u3092\u691c\u7d22\u3057\u3001\u30de\u30c3\u30c1\u3059\u308b\u8981\u7d20\u306e\u5b58\u5728\u72b6\u614b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\n3\u7a2e\u306e\u9055\u3044\u306f\u305d\u306e\u540d\u304c\u8868\u3059\u306e\u901a\u308a\u3060\u304c\u3001\u8ad6\u7406\u5b66\u306e\u3088\u3046\u3067\u3061\u3087\u3063\u3068\u7406\u5c48\u3063\u307d\u3044\u3002\u7279\u306b\u5426\u5b9a\u6761\u4ef6\u306e\u8ff0\u8a9e\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u30d1\u30c3\u3068\u898b\u3067\u5206\u304b\u3089\u305a\uff15\u79d2\u304f\u3089\u3044\u8003\u3048\u3066\u3057\u307e\u3046\u3002\u5b9f\u7528\u4e0a\u306f`forall()`\u3068\u304b`exists()`\u3060\u3063\u305f\u65b9\u304c\u76f4\u611f\u7684\u3067\u304c\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3002\n\n\u7d50\u679c\u306f\u771f\u507d\u5024\u3067\u5f97\u3089\u308c\u308b\u3060\u3051\u3067\u5927\u3057\u305f\u82b8\u306f\u306a\u3044\u304c\u3001\u5165\u529b\u5024\u306e\u691c\u8a3c\u306a\u3069\u3067\u306f\u91cd\u5b9d\u3059\u308b\u3060\u308d\u3046\u3002\n\n```java:List.2-7_match\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n    List<String> list = ... ;\n    boolean ok;\n    \n    // \u30e9\u30e0\u30c0\u5f0f\n    ok = list.stream()\n            .allMatch(s -> s != null && !s.isEmpty()); // null\u3068\u7a7a\u6587\u5b57\u5217\u3092\u542b\u307e\u306a\u3044      \n    // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    ok = list.stream()\n            .allMatch(Objects::nonNull);    // null \u3092\u542b\u307e\u306a\u3044\n    // \u8ff0\u8a9e\u95a2\u6570\n    ok = list.stream()\n            .noneMatch(Predicate.isEqual(\"\")); // null\u53ef\u3067\u7a7a\u6587\u5b57\u5217\u3092\u542b\u307e\u306a\u3044\n```\n\n```java:List.2-8_\u5168\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u305d\u308d\u3063\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    boolean ok = fileNames.parallelStream()\n            .map(Paths::get)\n            .allMatch(path -> Files.exists(path, LinkOption.NOFOLLOW_LINKS));\n```\n\n```java:List.2-9_\u30ea\u30b9\u30c8\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u7b49\u3057\u3044\u4e8b\u3092\u30c1\u30a7\u30c3\u30af\n    String sample = resultList.get(0);\n    assertTrue(\"\u7d50\u679c\u306e\u8981\u7d20\u304c\u3059\u3079\u3066\u7b49\u3057\u3044\", resultList.stream().allMatch(sample::equals));\n```\n\nmatch\u7cfb\u306f\u77ed\u7d61\u7d42\u7aef\u64cd\u4f5c\u3060(Short-circuiting)\u3002\n\n\u53cd\u4f8b\u304c\u898b\u3064\u304b\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u306f\u6253\u3061\u5207\u308b\u3002\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u5168\u3066\u306e\u8981\u7d20\u304c\u51e6\u7406\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n```java:List.2-10_\u30d8\u30c3\u30c0\u51fa\u529b\n    // \u30d5\u30a1\u30a4\u30eb\u306f\u6700\u521d\u306e\u7a7a\u884c\u307e\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n    Files.lines(path)\n            .peek(s -> {\n                System.out.println(s);\n            })\n            .anyMatch(String::isEmpty);\n```\n\n\u5168\u3066\u306e\u8981\u7d20\u3068\u306f\u3001\uff10\u8981\u7d20\u306e\u5834\u5408\u3082\u542b\u3080\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\uff10\u8981\u7d20\u306e\u7a7a Stream \u3067\u306e\u4ee5\u4e0b\u306e\u6319\u52d5\u3092\u610f\u5916\u3060\u3068\u601d\u3046\u306a\u3089\u3001\u3069\u3053\u304b\u306b\u6f5c\u5728\u7684\u306a\u30d0\u30b0\u3092\u4ed5\u8fbc\u3093\u3067\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```java:List.2-11_\u7a7a\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306ematch\u7cfb\u7d50\u679c\n    Stream.empty().allMatch(e -> true));   // true\n    Stream.empty().allMatch(e -> false));  // true\n    Stream.empty().anyMatch(e -> true));   // false\n    Stream.empty().anyMatch(e -> false));  // false\n    Stream.empty().noneMatch(e -> true));  // true\n    Stream.empty().noneMatch(e -> false)); // true\n```\n\n## 2.2. \u96c6\u7d04\u3059\u308b\n\n### 2.2.1. count() / min() / max()\n\n`count()`\u306f\u6587\u5b57\u901a\u308a Stream \u306e\u8981\u7d20\u6570\u3092\u6570\u3048\u308b\u3002\n\n\u672c\u5f53\u306b\u6570\u3048\u308b\u306e\u3067\u3001\u305d\u308c\u306a\u308a\u306e\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u3002\n\n```java:List.2-12_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u884c\u6570\n    int lc = (int) Files.lines(Paths.get(\"text.txt\")).count();\n```\n\n```java:List.2-13_\u30c6\u30ad\u30b9\u30c8\u306e\u5358\u8a9e\u6570\n    int wc = (int) Pattern.compile(\"\\\\W+\").splitAsStream(text).count();\n```\n\n```java:List.2-14_\u6587\u5b57\u306e\u7570\u306a\u308a\u3092\u6570\u3048\u308b\n    int vc = (int) text.codePoints().distinct().count();\n```\n\n```java:List.2-15_\u30d1\u30bf\u30fc\u30f3\u306e\u751f\u8d77\u56de\u6570\n    String text = \"\u3042\u3093\u305f\u3042\u305f\u3057\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u3046\u3051\u3069\u3042\u305f\u3057\u3082\u3042\u3093\u305f\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u308f\u3078\u3093\u304b\u3089\u3082\u3046\u3042\u3093\u305f\u3082\u3042\u305f\u3057\u306e\u3053\u3068\u3042\u3093\u305f\u3042\u3093\u305f\u3044\u308f\u3093\u3068\u3044\u3066\u3088\u3042\u3093\u305f\";\n    String word = \"\u3042\u3093\u305f\";\n\n    text = text + \"\\0\"; // <- \u672b\u5c3e\u5bfe\u7b56    \n    word = \"(?<=\" + word + \")\";\n    int count = (int) Pattern.compile(word).splitAsStream(text).count() -1;\n```\n\n```java:List.2-16_\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u6570\u3092\u6570\u3048\u308b\n    Path dir = ... ;\n    int fileCount = 0;\n    try (Stream<Path> files = \n            Files.find(dir, 100, (path, attrs) -> attrs.isRegularFile())\n    ) {\n        fileCount = (int) files.count();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n```\n\n`count()`\u306f\u7d42\u7aef\u64cd\u4f5c\u306a\u306e\u3067\u3001\u8981\u7d20\u6570\u304c\u5206\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u3082\u3046\u305d\u306e`Stream`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f7f\u3048\u306a\u3044\u3002\n\n```java:List.2-17_\u30c6\u30ad\u30b9\u30c8\u884c\u3068\u884c\u6570\u3092\u4e21\u65b9\u51fa\u529b\u3059\u308b\n    List<String> lines = ...\n\n    long c = lines.stream()\n            .filter(line -> line.contains(\"status:404\"))\n            .peek(line -> {\n                System.out.println(line);\n            })\n            .count();\n    System.out\n            .format(\"************ \u691c\u7d22\u7d50\u679c\uff1a %d \u4ef6\u898b\u3064\u304b\u308a\u307e\u3057\u305f *************\", c)\n            .println();\n```\n\n`min()`/`max()`\u306b\u306f\u6bd4\u8f03\u95a2\u6570(`Comparator`)\u3092\u6e21\u3057\u3066\u8981\u7d20\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u3092\u5f97\u308b\u3002\n\u623b\u308a\u5024\u306f`Optional<String>`\u3067\u3001\u8981\u7d20\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306b empty \u3068\u306a\u308b\u3002\nStream \u306f\u5fc5\u305a\u6700\u5f8c\u307e\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\n\n```java:List.2-18_min()/max()\u306e\u57fa\u672c\n    List<String> list = ... ;\n    Optional<String> min;\n    \n    // Comparator\n    min = list.stream()\n            .min(Comparator.naturalOrder()); // \u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u6587\u5b57\u5217\n    // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    min = list.stream()\n            .min(String::compareToIgnoreCase); // \u5927\u5c0f\u6587\u5b57\u533a\u5225\u3057\u306a\u3044\n    // \u30e9\u30e0\u30c0\u5f0f\n    min = list.stream()\n            .min((l, r) -> l.length() - r.length()); // \u6700\u77ed\u6587\u5b57\u5217\n    // Comparable\n    min = list.stream()\n            .min(Comparator.comparing(s -> s.toUpperCase())); // \u5927\u5c0f\u6587\u5b57\u533a\u5225\u3057\u306a\u3044\n```\n\n```java:List.2-19_\u4e00\u756a\u53e4\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\n    // \u65e5\u4ed8\u66f8\u5f0f\u3067\u30ed\u30fc\u30c6\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u6700\u53e4\u304c min \u306b\u306a\u308b\u306f\u305a\u3002\n    // /var/log/error.log-yyyymmdd\n    try (Stream<Path> logs = Files.list(Paths.get(\"/var/log\"))) {\n        Optional<Path> oldest = logs\n            .filter(path -> path.getFileName().toString().startsWith(\"error.log-\"))\n            .min(Path::compareTo);\n        if(oldest.isPresent()) {\n            Files.delete(oldest.get());  \n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n```\n\n```java:List.2-20_Map\u306e\u5024\u3067\u6bd4\u8f03\u3059\u308b\n    Map<String, String> report = new TreeMap<String, String>(){{\n        put(\"\u56fd\u8a9e\", \"C\");\n        put(\"\u7b97\u6570\", \"A+\");\n        put(\"\u7406\u79d1\", \"A-\");\n        put(\"\u793e\u4f1a\", \"D\");\n        put(\"\u6a5f\u68b0\u5b66\u7fd2\u7406\u8ad6II\", \"A+++\");\n    }};\n\n    // \u6587\u5b57\u5217\u8a55\u4fa1\u3067\u6700\u5c0f\u306e\u5024\u304c\u6700\u9ad8\u6210\u7e3e\u3092\u8868\u3059\u306f\u305a\n    Map.Entry<String, String> best = report.entrySet().stream()\n            .min(Comparator.comparing(gp -> gp.getValue() + ','))  // '+'<','<'-'\n            .get();\n\n    System.out.println(best); // \"\u6a5f\u68b0\u5b66\u7fd2\u7406\u8ad6II=A+++\"\n```\n\n\u6587\u5b57\u5217\u306e\u6700\u5927\u30fb\u6700\u5c0f\u3092\u5f97\u305f\u3068\u3053\u308d\u3067\u5b9f\u7528\u6027\u306f\u9650\u3089\u308c\u305d\u3046\u3060\u304c\u3001\u306a\u306b\u3082\u6587\u5b57\u5217\u6bd4\u8f03\u306b\u9650\u308b\u3053\u3068\u306f\u306a\u3044\u3002\u8981\u306f\u3001\u8981\u7d20\u6587\u5b57\u5217\u306b\u4f55\u3089\u304b\u306e\u8a55\u4fa1\u3092\u3057\u3066\u3001\u6570\u5024\u3084`Comparable`\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5f97\u3089\u308c\u308c\u3070\u3069\u3093\u306a\u95a2\u6570\u3092\u6e21\u3057\u3066\u3082\u3044\u3044\u306e\u3060\u3002\n\n```java:List.2-21_\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u30e6\u30fc\u30b6\u540d\u90e8\u5206\u304c\u6700\u3082\u9577\u3044\u3082\u306e\u3092\u5f97\u308b\n        List<String> mails = Arrays.asList(\n                \"very.vary.long.name@example.jp\",\n                \"jugemu_jugemu.gokounosurikire1234+qiita@example.jp\",\n                ...\n               );\n        \n        String longest = mails.stream()\n                .max(Comparator.comparingInt(m -> m.indexOf(\"@\")))\n                .get();\n```\n\n```java:List.2-22_\u30b5\u30b8\u30a7\u30b9\u30c8(\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306b\u3088\u308b)\n// Apache Commons\nimport org.apache.commons.lang3.StringUtils; \n\n    List<String> names = Arrays.asList(\"\u30a8\u30ec\u30f3\", \"\u30a2\u30eb\u30df\u30f3\", \"\u30d9\u30eb\u30c8\u30eb\u30c8\", \"\u30d9\u30eb\u30d9\u30eb\", \"\u30f4\u30a7\u30eb\u30ca\u30f3\u30c7\u30b9\");\n    final String someone = \"\u30d9\u30eb\u30ca\u30f3\u30c8\u30ab\";\n\n    // \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306b\u3088\u308b\u8a55\u4fa1\u95a2\u6570\n    ToIntFunction<String> dist = s -> StringUtils.getLevenshteinDistance(someone, s);\n    \n    String closest = names.stream()\n            .min(Comparator.comparingInt(dist))\n            .orElse(someone);\n\n    if (!closest.equals(someone)) {\n        System.out.println(\"\u3082\u3057\u304b\u3057\u3066 \" + closest); // \"\u3082\u3057\u304b\u3057\u3066 \u30d9\u30eb\u30c8\u30eb\u30c8\"\n    }\n```\n\n```java:List.2-23_\u548c\u66a6\u306e\u6bd4\u8f03\n    // Java 8 \u3067\u65e5\u6642\u66f8\u5f0f\u30af\u30e9\u30b9\u3082\u8ffd\u52a0\u3055\u308c\u305f\u3002\n    final DateTimeFormatter wareki = DateTimeFormatter.ofPattern(\"Gy\u5e74M\u6708d\u65e5\")\n            .withChronology(JapaneseChronology.INSTANCE);\n\n    List<String> birthdays = Arrays.asList(\n        \"\u5e73\u621012\u5e743\u67084\u65e5\", \"\u662d\u548c12\u5e743\u67084\u65e5\", \"\u5927\u6b6312\u5e743\u67084\u65e5\", \"\u660e\u6cbb12\u5e743\u67084\u65e5\");\n\n    String oldest = birthdays.stream()\n            .min(Comparator.comparing(s -> LocalDate.parse(s, wareki))) // LocalDate \u306f Comparable\n            .get();\n    System.out.println(oldest); // \"\u660e\u6cbb12\u5e743\u67084\u65e5\"\n```\n\n```java:List.2-24_Stream\u306e\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\uff08\u305d\u306e\uff11\uff09\n    String last = lines.stream()\n            .max((l, r) -> -1)\n            .get();\n```\n\n\u3061\u306a\u307f\u306b\u3001`java.util.Collections`\u81ea\u4f53\u304c`min()`/`max()`\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3082\u305f\u307e\u306b\u306f\u601d\u3044\u51fa\u3057\u3066\u3084\u3063\u3066\u307b\u3057\u3044\u3002\u4e2d\u9593\u64cd\u4f5c\u3092\u4f7f\u308f\u306a\u3044\u306e\u306a\u3089\u3053\u3061\u3089\u306e\u65b9\u304c\u8efd\u3044\u3002\n\n\u8981\u7d20\u6587\u5b57\u5217\u3092\u4f55\u3089\u304b\u306e\u6570\u5024\u3068\u3057\u3066\u8a55\u4fa1\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u306b\u5bfe\u3059\u308b\u7c21\u5358\u306a\u96c6\u8a08\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u3002IntStream \u3084 DoubleStream \u306a\u3069\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u7cfb Stream \u306b\u306f\u3001`count()`/`min()`/`max()`\u3060\u3051\u3067\u306a\u304f`sum()`\u3084`average()`\u3068\u3044\u3063\u305f\u7d42\u7aef\u64cd\u4f5c\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u30eb\u30fc\u30d7\u306a\u3057\u3067\u96c6\u8a08\u5024\u3092\u5f97\u3089\u308c\u308b\u306e\u306f\u4fbf\u5229\u3060\u304c\u3001\u3055\u3089\u306b\u305d\u306e\u96c6\u8a08\u5024\u3092\u4f7f\u3063\u305f\u8a08\u7b97\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u4f55\u56de\u3082 Stream \u3092\u8d70\u3089\u305b\u308b\u306f\u3081\u306b\u306a\u3063\u3066\u9006\u306b\u52b9\u7387\u304c\u60aa\u3044\u3002\u305d\u306e\u305f\u3081\u304b\u5404\u96c6\u8a08\u5024\u3092\u4e00\u767a\u3067\u3068\u308c\u308b`summaryStatistics()`\u3068\u3044\u3046\u7d42\u7aef\u64cd\u4f5c\u3082\u3042\u308b\u3002\n\n\u305d\u308c\u3089\u3092\u99c6\u4f7f\u3059\u308c\u3070\u7d71\u8a08\u89e3\u6790\u7684\u306a\u3061\u3087\u3063\u3068\u51dd\u3063\u305f\u8a08\u7b97\u3082\u4e00\u767a\u3067\u4f55\u3068\u304b\u306a\u308a\u305d\u3046\u306a\u6c17\u3082\u3059\u304c\u3001\u3084\u3063\u3066\u307f\u308b\u3068\u305d\u3093\u306a\u306b\u4f7f\u3044\u52dd\u624b\u306e\u3044\u3044\u3082\u306e\u3067\u306f\u306a\u3044\u3002\u8a66\u884c\u932f\u8aa4\u3067\u6642\u9593\u3092\u30e0\u30c0\u306b\u3059\u308b\u3088\u308a\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u3067\u51e6\u7406\u3092\u66f8\u3044\u305f\u65b9\u304c\u5e78\u305b\u3060\u308d\u3046\u3002\n\n\u4e00\u65b9\u3001Stream \u3092\u4f7f\u3063\u305f\u96c6\u8a08\u304c\u7c21\u5358\u306b\u4e26\u5217\u5316\u3067\u304d\u308b\u3068\u3044\u3046\u9b45\u529b\u306f\u6368\u3066\u304c\u305f\u3044\u3002\n\n```java:List.2-25_\u6700\u6df1\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u6570\u3092\u8abf\u3079\u308b\n    int depth = lines.stream()\n            .map(l -> l.replaceFirst(\"(\\\\s*)(.*)\", \"$1\"))\n            .map(idt -> idt.replaceAll(\"(    | {0,3}\\\\t)\", \"1234\")) // TAB -> 4SP \u63db\u7b97\n            .mapToInt(idt -> idt.length() / 4) // IntStream\n            .max().orElse(0);\n```\n\n```java:List.2-26_\u82f1\u6587\u306e\u8aad\u307f\u3084\u3059\u3055\u3092\u8a55\u4fa1\u3059\u308b(\u30d5\u30ec\u30c3\u30b7\u30e5-\u30ad\u30f3\u30b1\u30a4\u30c9\u5f0f\u306b\u3088\u308b)\n// \u53b3\u5bc6\u306aFKR\u5024\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002(\u97f3\u7bc0\u89e3\u6790\u306f\u65e5\u672c\u4eba\u306e\u624b\u306b\u8ca0\u3048\u306a\u3044)\n// \u3057\u304b\u3057\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u65e2\u5b58\u306e\u5b9f\u88c5\u9593\u3067\u3082\u7d50\u679c\u306b\u304b\u306a\u308a\u306e\u30d0\u30e9\u30c4\u30ad\u304c\u3042\u308b\u3053\u3068\u3092\u307f\u308c\u3070\u3001\n// \u601d\u3044\u306e\u307b\u304b\u8a31\u5bb9\u7bc4\u56f2\u5185\u306b\u306f\u3042\u308b\u3068\u8003\u3048\u308b\u3002\npublic static void approxFleschKincaidReadabilityTests(String text) {\n    final Pattern paragraphBreak = Pattern.compile(\"\\\\n\\\\s+\");\n    final Pattern period = Pattern.compile(\"[.!?](\\\\s+|$)\");\n    final Pattern nonAlphabet = Pattern.compile(\"[^a-z]+\", Pattern.CASE_INSENSITIVE);\n    final Pattern silentE = Pattern.compile(\"(?<!^[^eaiou]{1,2})e$\", Pattern.CASE_INSENSITIVE);\n    final Pattern pastEd = Pattern.compile(\"(?<!(^[^eaiou]{1,2})|([td]))ed$\", Pattern.CASE_INSENSITIVE);\n    final Pattern vowels = Pattern.compile(\"[eaiouy]+\", Pattern.CASE_INSENSITIVE);\n    final Pattern quotes = Pattern.compile(\"((?<=^|\\\\s)['\u2018\\\"\u201c(])|([)'\u2019\\\"\u201d](?=[,;:]?\\\\s))\");\n    \n    String[] paragraphs = paragraphBreak.split(text);\n    \n    Stream<String> sentences = Stream.of(paragraphs)\n            .parallel()\n            .map(p -> quotes.matcher(p).replaceAll(\"\"))\n            .flatMap(p -> period.splitAsStream(p));\n    IntSummaryStatistics wsStat = sentences\n            .mapToInt(s -> (int)nonAlphabet.splitAsStream(s).count())\n            .summaryStatistics();\n\n    Stream<String> words = Stream.of(paragraphs)\n            .parallel()\n            .flatMap(p -> nonAlphabet.splitAsStream(p));\n    IntSummaryStatistics vwStat = words\n            .map(w -> silentE.matcher(w).replaceFirst(\"\"))\n            .map(w -> pastEd.matcher(w).replaceFirst(\"d\"))\n            .map(w -> String.join(w, \" \", \" \"))\n            .mapToInt(w -> vowels.split(w).length -1)\n            .summaryStatistics();\n\n    System.out\n            .format(\"Sentence count:            %8d\\n\",  wsStat.getCount())\n            .format(\"Word count:                %8d\\n\",  wsStat.getSum())\n            .format(\"Syllable count:            %8d\\n\",  vwStat.getSum())\n            .format(\"Words per sentence:        %8.2f\\n\",  wsStat.getAverage())\n            .format(\"Syllables per word:        %8.2f\\n\",  vwStat.getAverage())\n            .println();\n\n    double fre = 206.835 - wsStat.getAverage() * 1.015 - vwStat.getAverage() * 84.6;\n    double fkgl = 0.39 * wsStat.getAverage() + 11.8 * vwStat.getAverage() -15.59;        \n    System.out\n            .format(\"Flesch Reading Ease:       %8.2f\\n\", fre)\n            .format(\"Flesch\u2013Kincaid Grade Level:%8.2f\\n\", fkgl)\n            .println();\n}\n```\n\n### 2.2.2. reduce()\n\n\u30ab\u30b9\u30bf\u30e0\u306e\u96c6\u7d04\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u3044\u5834\u5408\u306f`reduce()`\u3092\u4f7f\u3046\u3002\u305f\u3068\u3048\u3070 join \u3067\u306f\u5358\u7d14\u306b\u5b9f\u73fe\u3067\u304d\u306a\u3044\u9023\u7d50\u51e6\u7406\u3059\u308b\u306e\u306b\u4f7f\u3048\u308b\u3002\n\n`reduce()`\u306b\u306f\u4ee5\u4e0b\u306e\uff13\u7a2e\u985e\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n* `Optional<T> reduce(BinaryOperator<T> accumulator)`\n* `T reduce(T identity, BinaryOperator<T> accumulator)`\n* `<U> U reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner)`\n\n\u308f\u3051\u304c\u308f\u304b\u3089\u306a\u3044\u3088\u3002\n\n\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3080\u3002\n\n> \u6307\u5b9a\u3055\u308c\u305f\u5358\u4f4d\u5143\u306e\u5024\u3068\u7d50\u5408\u7684\u306a\u7d2f\u7a4d\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3053\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30ea\u30c0\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3001\u30ea\u30c7\u30e5\u30fc\u30b9\u3055\u308c\u305f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\nhttps://docs.oracle.com/javase/jp/8/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-\n\n\u306b\u3001\u65e5\u672c\u8a9e\u3067\u304ak\n\n\u518d\u5ea6\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u3001\u8a73\u7d30\u3092\u898b\u3066\u3044\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u4ee5\u964d\u3001\u5f15\u6570\u306e\u6570\u306b\u5f93\u3063\u3066 reduce(1)\u3001reduce(2)\u3001reduce(3) \u3068\u3057\u3088\u3046\u3002\u8981\u7d20\u578b\u304c String \u306e\u5834\u5408\u3001\u305d\u306e\u547c\u3073\u51fa\u3057\u30d1\u30bf\u30fc\u30f3\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u5c55\u958b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n```java:List.2-27_reduce\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n    Stream<String> stream = Stream.of(\"a\", \"b\", \"c\",\"d\");\n\n    // reduce(1)\n    Optional<String> result = stream.reduce(\n            // accumulator\n            (String joined, String element) -> {\n                return joined + '/' + element;\n            }\n    );\n    // \"a/b/c/d\"\n\n    // reduce(2)\n    String result = stream.reduce(\n            // identity\n            \"\",\n            // accumulator\n            (String joined, String element) -> {\n                return joined + '/' + element;\n            }\n    );\n    // \"/a/b/c/d\"\n\n    // reduce(3) parallel\n    String result = stream.parallel().reduce(\n            // identity\n            \"\",\n            // accumulator\n            (String joined, String element) -> {\n                return joined + \"/\" + element;\n            },\n            // combiner\n            (String left, String right) -> {\n                return left + \"*\" + right;\n            }\n    );\n    //  \"/a*/b*/c*/d\"\n\n    //\u3000reduce(3) sequential\n    StringBuilder result = stream.sequential().reduce(\n            // identity\n            new StringBuilder(),\n            // accumulator\n            (StringBuilder joined, String element) -> {\n                return joined.append(\"/\").append(element);\n            },\n            // combiner\n            // sequential \u3067\u306f\u547c\u3070\u308c\u306a\u3044\n            (StringBuilder left, StringBuilder right) -> {\n                return left.append(\"*\").append(right);\n            }\n    );\n    // \"/a/b/c/d\"\n\n```\n\n\u4eee\u5f15\u6570\u306b\u306f\u3000identitiy\u3001accumrator\u3001combiner \u3068\u3044\u3046\u540d\u524d\u304c\u3064\u3044\u3066\u3044\u308b\u3002\n\nAPI \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001\u3053\u308c\u3089\u5f15\u6570\u306e\u5024\u3068\u95a2\u6570\u306b\u306f\u3001\u4f55\u3084\u3089\u96e3\u3057\u3044\u3042\u308b\u7a2e\u306e\u6570\u5b66\u7684\u306a\u8981\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n\u3057\u304b\u3057\u305d\u308c\u306f\u6226\u5834\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u77e5\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3002\u8584\u76ee\u3067\u898b\u308c\u3070`reduce()`\u306f\u5358\u306a\u308b\u5909\u6570\u4ed8\u304d\u306e\u5185\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u898b\u3048\u306a\u304f\u3082\u306a\u3044\u3002\n\nidentitiy \u306f\u672c\u6765\u3001\u6570\u5b66\u3067\u3044\u3046\u5358\u4f4d\u5143(identity element)\u306e\u6027\u8cea\u3092\u6301\u305f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u9806\u6b21\u51e6\u7406\u3067\u306f\u5358\u306a\u308b\u521d\u671f\u5024\u3068\u3057\u3066\u554f\u984c\u306a\u3044\u3002\n\naccumrator \u306e\u7b2c\u4e00\u5f15\u6570\u306f\u305d\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u9593\u3067\u6301\u3061\u56de\u3055\u308c\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u306f\u6271\u3044\u304c\u9762\u5012\u306a\u5916\u90e8\u5909\u6570\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3048\u308b\u3002\n\n```java:List.2-28_\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\uff08\u305d\u306e2\uff09\n    Optional<String> last = stream.reduce((l, r) -> r);\n```\n\n```java:List.2-29_\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306b\u5909\u63db\u3059\u308b\n    String domain = \"hoge.example.co.jp\";\n    // \u8981\u7d20\u9806\u3092\u9006\u9806\u306b\u3059\u308b\n    String pkg = Stream.of(domain.split(\"\\\\.\"))\n            .reduce((l, r) -> r + \".\" + l).get();\n    // jp.co.example.hoge\n```\n\n```java:List.2-30_\u7c21\u6613\u30ef\u30fc\u30c9\u30e9\u30c3\u30d7\npublic static String wordwrap(String text, int len) {\n    return Pattern.compile(\" \").splitAsStream(text)\n            .reduce((wrapped, word) -> {\n                if (wrapped.length() - wrapped.lastIndexOf('\\n') + word.length() > len)\n                    return wrapped + '\\n' + word;\n                else\n                    return wrapped + ' ' + word;\n            }).get();    \n}\n\n    String text = \"All work and no play makes Jack a dull boy. \"\n                + \"All work and no play makes Jack a dull boy. \";\n    System.out.println(wordwrap(text, 20));\n```\n```\n12345678901234567890\n\nAll work and no play\nmakes Jack a dull\nboy. All work and no\nplay makes Jack a\ndull boy.\n```\n\n```java:List.2-31_\u30bf\u30b0\u3067\u56f2\u3080\n    String text = \"\u8acb\u6c42\u66f8\";\n            \n    String emp = Stream.of(\"b\", \"i\", \"em\", \"strong\", \"span\", \"h1\")\n            .reduce(text, \n                   (str, tag) -> String.format(\"<%2$s>%s</%2$s>\", str, tag)\n            );\n    // <h1><span><strong><em><i><b>\u8acb\u6c42\u66f8</b></i></em></strong></span></h1>\n```\n\n`reduce(3)`\u306e\u7b2c\uff13\u5f15\u6570\u306e combiner \u306f\u4e26\u5217\u51e6\u7406\u3067 Stream \u304c\u5206\u5272\u51e6\u7406\u3055\u308c\u305f\u5f8c\u306e\u7d50\u5408\u6642\u306b\u547c\u3070\u308c\u308b\u3002Stream \u306e\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5206\u5272\u3055\u308c\u308b\u304b\u306f\u3001\u30bd\u30fc\u30b9\u306e\u30bf\u30a4\u30d7\u3084CPU\u30b3\u30a2\u6570\u306a\u3069\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3082\u4f9d\u5b58\u3059\u308b\u3060\u308d\u3046\u304b\u3089\u3001\u5f53\u3066\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u8272\u3005\u8a66\u3057\u305f\u304c combiner \u304c\u9806\u6b21\u51e6\u7406(squential)\u3067\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u3088\u3046\u3060\u3002\u4f7f\u308f\u306a\u304f\u3066\u3082 null \u3092\u6e21\u3059\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3001\u30c0\u30df\u30fc\u3067\u3082\u95a2\u6570\u3092\u6e21\u3057\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u307e\u305f\u3001`reduce(3)`\u3067\u306f\u3001\u8981\u7d20\u306e\u578b\u3068\u306f\u5225\u306e\u578b\u3092\u8fd4\u305b\u308b\u306e\u304c`reduce(1)`\u3068`reduce(2)`\u3068\u306f\u9055\u3046\u3002\n\n\u3057\u304b\u3057\u3001\u4e26\u5217\u51e6\u7406\u3067\u306e\u4f7f\u7528\u306f\u6ce8\u610f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002`reduce(3)` \u306e indentity \u306b  `StringBuiler` \u306e\u3088\u3046\u306a mutable \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u9806\u6b21\u51e6\u7406\u306a\u3089\u671f\u5f85\u901a\u308a\u3067\u3082\u3001\u4e26\u5217\u51e6\u7406\u3067\u306f\u3068\u3093\u3067\u3082\u306a\u3044\u7d50\u679c\u306b\u306a\u308b\u3002\u305d\u306e\u5834\u5408 `reduce(3)` \u3067\u306f\u306a\u304f `collect(3)` \u3092\u4f7f\u3063\u305f\u65b9\u304c\u3059\u3053\u3057\u306f\u5b89\u5168\u306b\u306a\u308b(supplier)\u3002\n\n\u9806\u6b21\u51e6\u7406\u306b\u9650\u5b9a\u3059\u308c\u3070 `reduce(3)` \u3082\u4f55\u304b\u306b\u4f7f\u3044\u9053\u304c\u306a\u3044\u308f\u3051\u3067\u3082\u306a\u3044\u304c\u3001\u3061\u3087\u3063\u3068\u30c8\u30ea\u30c3\u30ad\u30fc\u3067\u30ed\u30b8\u30c3\u30af\u306e\u898b\u901a\u3057\u3082\u60aa\u304f\u306a\u308b\u306e\u3067\u7121\u7406\u3057\u3066\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u3002\u7d20\u76f4\u306b\u81ea\u5206\u3067\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u66f8\u3044\u305f\u65b9\u304c\u5b89\u5168\u3060\u308d\u3046\u3002\n\n```java:List.2-32_\u884c\u756a\u53f7\u4ed8\u304d\u51fa\u529b\n    lines.stream()\n            .reduce( 1, \n                    (i, line) -> {\n                        System.out.format(\"%4d:   %s\\n\", i, line);\n                        return ++i;\n                    },\n                    (l,r) -> null  // dummy\n             );\n```\n\n```java:List.2-33_\u540d\u524d\u4ed8\u304d\u6587\u5b57\u5217\u7f6e\u63db\n    Map<String, String> params = new HashMap<>();\n    params.put(\":USER\", \"\u4f50\u85e4\");\n    params.put(\":AMOUNT\", \"100\");\n    String template = \"\u3053\u3093\u306b\u3061\u306f:USER\u3055\u3093\u3002\u65e9\u304f:AMOUNT\u5186\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\";\n    \n    String message =  params.entrySet().stream()\n            .reduce(template,\n                    (t, e) -> t.replace(e.getKey(), e.getValue()), \n                    (l, r) -> l // dummy\n            );\n    System.out.println(message);\n    // \u3053\u3093\u306b\u3061\u306f\u4f50\u85e4\u3055\u3093\u3002\u65e9\u304f100\u5186\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n```\n\n```java:List.2-34_stream\u3092\u9006\u9806\u306b\u3059\u308b\n    // \u307e\u3042\u3001\u30cd\u30bf\u3068\u3044\u3046\u3053\u3068\u3067...\n    Stream<String> reflux = stream\n            .reduce(Stream.empty(),\n                    (stream, e) -> Stream.concat(Stream.of(e), stream),\n                    (l,r) -> null // dummy\n             );\n```\n\n```java:List.2-35_\u591a\u9805\u5f0f\u8a08\u7b97\u95a2\u6570\u306e\u751f\u6210\uff08\u30db\u30fc\u30ca\u30fc\u6cd5\u306b\u3088\u308b\uff09\n    // \u3048\u3048\u3001\u3082\u3061\u308d\u3093\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u3067\u3059\u304c\u4f55\u304b\uff1f\n    // f(x) = -4.0x^4 + 3.0x^3 + -2.0x^2 + 1.0\n    String coefficients = \"-4.0, 3.0, -2.0, 1.0\";\n\n    DoubleUnaryOperator f = Stream.of(coefficients.split(\",\\\\s*\"))\n            .map(Double::parseDouble)\n            .reduce((double x) -> 0.0, \n                    (l, r) -> (double x) -> x * l.applyAsDouble(x) + r, \n                    (l, r) -> null // dummy\n            );\n\n    DoubleStream.iterate(0.0, x -> x + .01)\n            .limit(101)\n            .peek(x -> System.out.format(\"% 10.2f\", x))\n            .map(f)\n            .forEach(y -> System.out.format(\"% 10.2f\\n\", y));\n```\n```\n      0.00      1.00\n      0.01      0.98\n      0.02      0.96\n      0.03      0.94\n      0.04      0.92\n      ...       ...\n      0.99     -1.92\n      1.00     -2.00\n```\n\n## 2.3. \u5909\u63db\u3059\u308b\n\n### 2.3.1. toArray()\n\n`toArray()`\u306f Stream \u3092\u305d\u306e\u8981\u7d20\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3002\n\n\u5e38\u8b58\u7684\u306b\u8003\u3048\u3066`Stream<String>`\u304b\u3089\u306f String \u578b\u306e\u914d\u5217\uff08`String[]`\uff09\u304c\u5f97\u3089\u308c\u308b\u3082\u306e\u3068\u671f\u5f85\u3057\u3066\u5f53\u7136\u306a\u306e\u3060\u304c\u3001\u5b9f\u969b\u306b\u306f Object \u578b\u914d\u5217\uff08`Object[]`\uff09\u3067\u3057\u308c\u3063\u3068\u8fd4\u3055\u308c\u308b(\u5f15\u6570\u306a\u3057\u306e\u5834\u5408)\u3002\n\n\u3053\u306e\u8fba\u306e\u4e8b\u60c5\u306b\u306f\u3001 Java \u304c\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u6388\u304b\u3063\u305f\u6642\u306b\u304b\u3051\u3089\u308c\u305f\u30a4\u30ec\u30a4\u30b8\u30e3\u306e\u546a\u3044\u306b\u3088\u308a\u578b\u306e\u8a18\u61b6\u304c\u5931\u308f\u308c\u308b\u3001\u3068\u3044\u3046\u8a2d\u5b9a\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\nString \u578b\u306e\u914d\u5217\u3092\u5f97\u308b\u306b\u306f\u3001`toArray()`\u306e\u5f15\u6570\u306b`String[]`\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u6e21\u3057\u3066\u3084\u308b\u3002\n\n\u3053\u3053\u306f `stream.toArray(String[]::new)` \u306e\u3088\u3046\u306b\u3001\u8981\u7d20\u578b\u914d\u5217\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\u3092\u6e21\u3059\u306e\u304c\u5b9a\u77f3\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u3081\u3093\u3069\u3046\u306a\u3053\u3068\u3060\u304c\u65b0\u3057\u3044\u546a\u6587\u3068\u3057\u3066\u899a\u3048\u3066\u304a\u3053\u3046\u3002\n\n```java:List.2-36_toArray\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\nStream<String> stream = Stream.of(\"a\", \"b\", ...);\n\n// \u5f15\u6570\u306a\u3057\nObject[] arr = stream.toArray();\n\n// \u914d\u5217\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\nString[] arr = stream.toArray(String[]::new);\n\n// \u30e9\u30e0\u30c0\u5f0f\nString[] arr = stream.toArray((size) -> new String[size]);\n```\n\n\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u306a\u306b\u304b\u3068\u6c17\u3092\u4f7f\u3046\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a `ArrayList` \u306a\u3069\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5909\u63db\u3057\u3066\u697d\u3092\u3059\u308b\u3053\u3068\u306f\u3053\u308c\u307e\u3067\u3082\u3088\u304f\u3042\u3063\u305f\u3002Stream \u3082\u914d\u5217\u64cd\u4f5c\u306e\u65b0\u3057\u3044\u304a\u624b\u8efd\u30c4\u30fc\u30eb\u3068\u3057\u3066\u6d41\u7528\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```java:List.2-37_\u76f8\u4e92\u5909\u63db\n\n    // stream -> \u914d\u5217\n    String[] arr = stream.toArray(String[]::new);\n    \n    //\u3000\u914d\u5217 -> Stream\n    Stream<String> stream = Arrays.stream(arr);\n    \n    // stream -> List\n    List<String> list = stream.collect(Collectors.toList());\n    \n    // List -> Stream\n    Stream<String> stream = list.stream();\n    \n    // List -> \u914d\u5217\n    String[] arr = list.toArray(new String[0]);\n    \n    // \u914d\u5217 -> List\n    List<String> list = Arrays.asList(arr);\n```\n\n```java:List.2-38_\u914d\u5217\u306e\u578b\u3092\u5909\u63db\u3059\u308b\n    int[] intArr = {1, 2, 3};\n    \n    // int[] -> Integer[]\n    Integer[] boxedArr = Arrays.stream(intArr)\n            .mapToObj(i -> i)         // autoboxing\n            .toArray(Integer[]::new);\n\n    // int[] -> String[]\n    String[] strArr = Arrays.stream(intArr)\n            .mapToObj(String::valueOf)\n            .toArray(String[]::new);\n\n    // String[] -> int[]\n    int[] intarr2 = Arrays.stream(strArr)\n            .mapToInt(Integer::parseInt) // IntStream\n            .toArray();\n\n    // String[] -> CharSequence[] (\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u914d\u5217)\n    CharSequence[] seqArr = Arrays.stream(strArr)\n            .toArray(CharSequence[]::new);\n\n    // Object[] -> String[]\n      Object[] objs = {1, \"Hello\", LocalDate.now()};\n      String[] tostrs = Arrays.stream(objs)\n              .map(Objects::toString)\n              .toArray(String[]::new); // [1, Hello, 2015-01-01]\n```\n\n```java:List.2-39_\u914d\u5217\u64cd\u4f5c\n    String[] arr1 = {\"A\", \"B\", \"C\"};\n    String[] arr2 = {\"L\", \"M\", \"N\"};\n    String[] arr3 = {\"X\", \"Y\", \"Z\"};\n    \n    String[] arr;\n    \n    // \u521d\u671f\u5316\n    arr = IntStream.range(0,  10)\n            .mapToObj(i -> \"\")\n            .toArray(String[]::new);    // [, , , , , , , , , ]\n    // \u8907\u88fd\n    arr = Arrays.stream(arr1)\n            .toArray(String[]::new);    // [A, B, C]\n    // \u9023\u7d50\n    arr = Stream.of(arr1, arr2, arr3)\n            .flatMap(Stream::of)\n            .toArray(String[]::new);    // [A, B, C, L, M, N, X, Y, Z]\n    // \u90e8\u5206\u914d\u5217\n    arr = Arrays.stream(arr, 1, 7)\n            .toArray(String[]::new);    // [B, C, L, M, N, X]\n    // \u90e8\u5206\u7f6e\u63db\n    \n    // \u90e8\u5206\u524a\u9664\n            \n    // \u91cd\u8907\u524a\u9664\n    arr = Arrays.stream(arr)\n             .distinct()\n             .toArray(String[]::new);\n    // \u5148\u982d\u8ffd\u52a0\n    arr = Stream.of(new String[]{\"\u3042\"}, arr)\n            .flatMap(Stream::of)\n            .toArray(String[]::new);\n    // \u5148\u982d\u524a\u9664\n    arr = Arrays.stream(arr)\n            .skip(1)\n            .toArray(String[]::new);\n    // \u672b\u5c3e\u8ffd\u52a0\n    arr = Stream.of(arr1, new String[]{\"\u3042\"})\n            .flatMap(Stream::of)\n            .toArray(String[]::new);\n    // \u672b\u5c3e\u524a\u9664\n    arr = Arrays.stream(arr)\n             .limit(arr.length -1)\n             .toArray(String[]::new);\n\n    // 2\u6b21\u5143\u914d\u5217\u306e\u5217\u3092\u53d6\u5f97\n    String[][] matrix = {arr1, arr2, arr3};\n    int col = 0;\n    arr = Stream.of(matrix)\n            .map(a -> a[col])\n            .toArray(String[]::new);    // [A, L, X]\n```\n\n```java:List.2-40_CSV\u3092\uff12\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n    List<String> lines = Arrays.asList(\"aaa,bbb,ccc\", \"ddd,eee,fff\");\n    String[][] matrix = lines.stream()\n            .map(l -> l.split(\",\"))\n            .toArray(String[][]::new);\n\n    System.out.println(Arrays.deepToString(matrix));\n    // [[aaa, bbb, ccc], [ddd, eee, fff]]\n```\n\n\n```java:List.2-41_\u30d8\u30c6\u30ed\u30af\u30e9\u30b9\u914d\u5217\u306b\u5909\u63db\n    Pattern p = Pattern.compile(\n            \"^((?<d>[-+]?\\\\d+)|(?<f>[-+]?\\\\d*\\\\.\\\\d+([e][-+]?\\\\d+)?)|(?<b>(true|false)))$\",\n            Pattern.CASE_INSENSITIVE);\n    \n    String data = \"123, 10000000.0, -.01E-5, FALSE, OK\";\n    Object[] arr = Stream.of(data.split(\",\\\\s*\"))\n            .map(s -> {\n                Matcher m = p.matcher(s);\n                if (m.find()) {\n                    if (m.group(\"d\") != null) return Integer.parseInt(s);\n                    if (m.group(\"f\") != null) return Double.parseDouble(s);\n                    if (m.group(\"b\") != null) return Boolean.parseBoolean(s);\n                } \n                return s;\n            }).toArray();\n    \n    for (Object o : arr) {\n        System.out.println(\"\" + o + \"\\t\" + o.getClass());\n    }\n```\n```\n123     class java.lang.Integer\n1.0E7   class java.lang.Double\n-1.0E-7 class java.lang.Double\nfalse   class java.lang.Boolean\nOK      class java.lang.String\n```\n\n### 2.3.2. collect()\n\n`List<String>`\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3089\u7d50\u679c\u306e`List<String>`\u304c\u3082\u3089\u3048\u308b\u3068\u5f53\u7136\u601d\u3060\u308d\u3046\u304c\u3001Stream \u306b\u305d\u3093\u306a\u6c17\u306f\u5229\u304b\u306a\u3044\u3002\n\n```\n    List<String> list = list.stream()\n            .filter(s -> s.startWith(\"a\"))\n            .collect(Collectors.toList());\n```\n\n2014\u5e74\u3001\u3053\u308c\u3092\u521d\u3081\u3066\u898b\u305f\u5168\u56fd\u306eJava\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u98f2\u307f\u8fbc\u3093\u3060\u3067\u3042\u308d\u3046\u8a00\u8449\u3092\u3001\u4eca\u306e\u81ea\u5206\u306b\u8a00\u3046\u8cc7\u683c\u306f\u306a\u3044\u3002\u3060\u3063\u3066\u57fc\u7389\u770c\u6c11\u3060\u3082\u306e\u3002\n\nStream \u306e\u7d50\u679c\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\u7d42\u7aef\u64cd\u4f5c\u306e`collect()`\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u305d\u306e\u69cb\u7bc9\u65b9\u6cd5\u3092\u6307\u793a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n* `<R,A> R collect(Collector<? super T,A,R> collector)`\n* `<R> R collect(Supplier<R> supplier, BiConsumer<R,? super T> accumulator, BiConsumer<R,R> combiner)`\n\n```java:List.2-42_collect\u7cfb\u7d42\u7aef\u51e6\u7406\u306e\u57fa\u672c\n\n    Stream<String> stream = ... ;\n    List<String> result;\n    \n    // collect(1)\n    result = stream.collect(Collectors.toList());\n\n    // collect(3) \u30e9\u30e0\u30c0\u5f0f\u306b\u5c55\u958b\n    result = stream.collect(\n            // supplier\n            () -> {\n                return new ArrayList<>();\n            },\n            // accumulator\n            (List<String> l, String e) -> { \n                l.add(e);\n            },\n            // combiner \n            (List<String> l, List<String> r) -> {  // BiConsumer<R,R>\n                l.addAll(r);\n            }\n    );\n        \n    // collect(3) \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    result = stream.collect(\n            ArrayList::new, // supplier\n            List::add,      // accumulator      \n            List::addAll    // combiner \n    );\n        \n    // collect(1) + Collector.of()\n    result = stream.collect(\n            Collector.of(\n                    // supplier\n                    () -> new ArrayList<>(),                \n                    // accumulator\n                    (List<String> l, String e) -> l.add(e),\n                    // combiner\n                    (List<String> l, List<String> r) -> {  // BinaryOperator<A>\n                        l.addAll(r); \n                        return l;\n                    },\n                    // finisher\n                    (List<String> l) -> Collections.unmodifiableList(l)\n            )\n    );\n\n    // collect(1) + Collector.of()\u3000\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n    String joined = stream.collect(\n            Collector.of(\n                    StringBuilder::new,     // supplier\n                    StringBuilder::append,  // accumulator\n                    StringBuilder::append,  // combiner\n                    StringBuilder::toString // finisher\n            ));\n```\n\nreduce\u306b\u52a3\u3089\u305a\u8907\u96d1\u3060\u3002\n\n\u95a2\u6570\u3092\uff13\u3064\u3082\uff14\u3064\u3082\u6e21\u3059\u306e\u304c\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6d41\u5100\u3067\u666e\u901a\u306a\u306e\u304b\u306f\u77e5\u3089\u306a\u3044\u3002\u305f\u3060\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u304b\u3089\u307f\u308b\u3068\u3001\u672c\u6765\u30af\u30e9\u30b9\u3067\u30ab\u30d7\u30bb\u30eb\u5316\u3059\u308b\u3079\u304d\u30e1\u30bd\u30c3\u30c9\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u3068\u521d\u671f\u5316\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u306e\u64cd\u4f5c\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u64cd\u4f5c\uff09\u3092\u5265\u304d\u51fa\u3057\u3067\u30d0\u30e9\u30d0\u30e9\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3001\u3057\u304b\u3082\u305d\u306e\u6574\u5408\u6027\u306e\u8cac\u4efb\u306f\u305d\u306e\u5834\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u62bc\u3057\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3002\n\n\u3053\u308c\u306f\u3061\u3087\u3046\u3069\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3092\u88cf\u8fd4\u3057\u306b\u3055\u308c\u305f\u3088\u3046\u3067\u3001\u306a\u3093\u3068\u3082\u30b9\u30d7\u30e9\u30c3\u30bf\u30fc\u306a\u611f\u3058\u3060\u3002\n\nJava \u306a\u3089\u5f53\u7136\u3053\u308c\u3089\u3092\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u305f\u3044\u3002`java.util.stream.Collector`\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3001\u540d\u524d\u304b\u3089\u3057\u3066\u306a\u306b\u304b\u53ce\u96c6\u3057\u305d\u3046\u3067\u3044\u304b\u306b\u3082\u305d\u308c\u3063\u307d\u3044\u6c17\u304c\u3059\u308b\u304c\u3001\u305d\u308c\u306f\u671f\u5f85\u306f\u305a\u308c\u3060\u3002\n\n`Collector` \u306f\u53ce\u96c6\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u30af\u30e9\u30b9\u305f\u3081\u3082\u306e\u3067\u306f\u306a\u304f\u3001`collect()` \u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u95a2\u6570\u306e\u30db\u30eb\u30c0\u306b\u3059\u304e\u306a\u3044\u3002\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3078\u306e\u5909\u63db\u624b\u9806\u3092\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u306e\u7d44\u3092\u3042\u3089\u304b\u3058\u3081\u30bb\u30c3\u30c8\u3057\u305f Collector \u3092\u3001`collect(1)`\u306a\u3069\u306e`Collectors`\u30e1\u30bd\u30c3\u30c9\u306b\u3076\u3061\u3085\u3063\u3068\u306f\u3081\u3066\u3084\u308b\u3068\u3001\u95a2\u6570\u304c\u3058\u3085\u308b\u308b\u3063\u3068\u5f15\u304d\u629c\u304b\u308c\u308b\u4ed5\u7d44\u307f\u3060\u3002\n\n\u300c\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u300d\u3068\u304b\u300c\u95a2\u6570\u30d5\u30a3\u30fc\u30c0\u300d\u3068\u3067\u3082\u547c\u3079\u305d\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3060\u304c\u3001\u5b9f\u969b\u306b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3067\u4f55\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u304b\u306f\u3001\u77e5\u3089\u306a\u3044\u3002\n\nStream API \u306b\u306f\u3059\u3067\u306b\u305d\u306e\u3088\u3046\u306a`Collector`\u306e\u6c4e\u7528\u7684\u306a\u5b9f\u88c5\u304c\u6570\u591a\u304f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057 Collector \u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u306f\u5b58\u5728\u305b\u305a\u3001\u305d\u306e\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30af\u30e9\u30b9\u3067\u3042\u308b`java.util.stream.Collectors`\u306b\u3001 static \u306a\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3068\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3002\n\n\u3053\u308c\u307e\u3067\u306e Java API \u306e\u8a2d\u8a08\u3060\u3063\u305f\u3089\u6012\u6d9b\u306e\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306a\u3063\u3066\u3044\u305f\u306f\u305a\u3060\u304c\u3001\u305d\u306e\u4ee3\u308f\u308a`Collectors`\u30af\u30e9\u30b9\u4e00\u3064\u3067\u9375\u8f2a\u306e\u3088\u3046\u306b\u3057\u3066\u5168\u90e8\u3076\u3089\u4e0b\u3052\u3089\u308c\u305f\u3002\u304b\u304e\u3070\u3042\u3055\u3093\u3082\u3073\u3063\u304f\u308a\u3060\u3002\n\n* [Java Collector\u30e1\u30e2(Hishidama's Java8 Collector Memo)](http://www.ne.jp/asahi/hishidama/home/tech/java/collector.html)\n\n\u305d\u306e\u9375\u3092\u6574\u7406\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n* \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7cfb\n * toList()\n * toMap() / toConcurrentMap()\n * toSet()\n * toCollection()\n* \u4ed5\u5206\u3051\u7cfb\n * groupingBy() / groupingByConcurrent()\n * partitioningBy()\n* \u5909\u63db\u7cfb\n * mapping() \n* \u96c6\u7d04\u7cfb\n * counting()\n * joinning()\n * maxBy()/minBy()\n * summarizingXxx()\n * summingXxx()\n * reducing()\n\n\u3053\u308c\u3089\u306f\u5168\u3066`Collector`\u3092\u8fd4\u3057\u3001\u3057\u304b\u3082\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u308b\u3002\n\n\u3053\u308c\u3089\u3092\u3059\u3079\u3066\u7406\u89e3\u3057\u4f7f\u3044\u3053\u306a\u305b\u308b\u5fc5\u8981\u306f\u5168\u304f\u306a\u3044\u3057\u3001\u3069\u3046\u306b\u304b\u99c6\u4f7f\u3057\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3067\u304b\u3048\u3063\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3060\u3051\u3060\u3002\u307e\u305a\u306f\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u30a4\u30c7\u30aa\u30e0\u3068\u3057\u3066\u62bc\u3055\u3048\u3066\u304a\u3051\u3070\u3044\u3044\u3060\u308d\u3046\u3002\n\n```java:List.2-43_collect\u7cfb\u7d42\u7aef\u64cd\u4f5c\u306e\u57fa\u672c\n// Collectors \u3092 static \u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u30af\u30e9\u30b9\u540d\u3092\u7701\u7565\u3067\u304d\u308b\u3002\n// IDE\u306e\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u306f\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9(*)\u3092\u4f7f\u308f\u305b\u3066\u304f\u308c\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nimport static java.util.stream.Collectors.*;\n\n    Stream<String> stream = ... ;\n        \n    // \u6587\u5b57\u5217\u306b\u5909\u63db(\u9023\u7d50)\n    String text = stream.collect(joining());\n        \n    // \u6587\u5b57\u5217\u306b\u5909\u63db(\u533a\u5207\u308a\u6587\u5b57\u6307\u5b9a)\n    String csv = src.stream().collect(joining(\", \"));\n        \n    // List \u306b\u5909\u63db\n    List<String> list = stream.collect(toList()); // ArrayList\n\n    // \u4efb\u610f\u306e List \u30af\u30e9\u30b9\u306b\u5909\u63db\n    List<String> list = stream\n            .collect(toCollection(LinkedList::new)); // LinkedList\n\n    // Set \u306b\u5909\u63db\n    Set<String> set = stream.collect(toSet());  // HashSet\n\n    // \u4efb\u610f\u306e Set \u30af\u30e9\u30b9\u306b\u5909\u63db\n    SortedSet<String> set = stream\n            .collect(toCollection(TreeSet::new)); // TreeSet \u30bd\u30fc\u30c8\u6e08\u307f\n\n    LinkedHashSet<String> set = stream\n            .collect(toCollection(LinkedHashSet::new)); // LinkedHashSet \u8981\u7d20\u9806\u3092\u7dad\u6301\n\n    // Map \u306b\u5909\u63db\n    // id -> object\n    Map<Integer, User> map = users.stream()\n            .collect(toMap(\n                    e -> e.getId(),  // key \u91cd\u8907\u3059\u308b\u3068\u4f8b\u5916\u306b\u306a\u308b\n                    e -> e           // value\n            )); // HashMap\n\n    // id -> name\n    Map<Integer, User> map = users.stream()\n            .collect(toMap(User::getId, User::getName));\n    \n    // \u4efb\u610f\u306e Map \u30af\u30e9\u30b9\u306b\u5909\u63db\u3059\u308b\n    SortedMap<Integer, User> map = users.stream()\n            .collect(toMap(\n                    e -> e.getId(),\n                    e -> e,\n                    (l, r) -> r, // \u30ad\u30fc\u304c\u91cd\u8907\u3057\u305f\u3089\u4e0a\u66f8\u304d\n                    TreeMap::new\n            )); // TreeMap\n```\n\n```java:List.2-44_\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092CSV\u306b\u5909\u63db\u3059\u308b\n    Item item = ... ;\n    String qcsv = Stream.of(\n                item.getMaker(),   // String\n                item.getName(),    // String\n                item.getPrice(),   // Integer\n                item.getMfgDate()  // LocalDate\n            )\n            .map(Objects::toString)\n            .map(s -> s.replaceAll(\"'\", \"\\\\\\\\'\"))\n            .collect(Collectors.joining(\"', '\", \"'\", \"'\"));\n    // 'Gyahtol\\'s Foods', '\u3042\u306e\u8089(L)', '100', '2015-01-01'\n```\n```java:List.2-45_Map\u3092\u53cd\u8ee2\u3059\u308b\n    // \u91cd\u8907\u304c\u3042\u308c\u3070\u30a8\u30e9\u30fc\n    Map<String, String> flip = map.entrySet().stream()\n            .collect(Collectors.toMap(e -> e.getValue(), e -> e.getKey()));\n```\n\n\n```java:List.2-46_\u5358\u8a9e\u306e\u751f\u8d77\u983b\u5ea6\u3092\u96c6\u8a08\u3059\u308b\nimport static java.util.stream.Collectors.*;\n\n    String text = \"Humpty Dumpty sat on a wall, \"\n                + \"Humpty Dumpty had a great fall. \" \n                + \"All the king's horses and all the king's men \"\n                + \"Couldn't put Humpty together again. \";\n\n    String[] words = text.toLowerCase().split(\"[.,]?\\\\s+\");\n       \n    // \u5358\u8a9e -> \u56de\u6570\n    Map<String, Long> freqs = Stream.of(words)\n            .collect(groupingBy(w -> w, counting()));\n    System.out.println(freqs);\n    // {all=2, a=2, again=1, sat=1, couldn't=1, had=1, great=1, put=1, humpty=3, the=2,\n    //  dumpty=2, king's=2, fall=1, and=1, men=1, wall=1, together=1, horses=1, on=1}\n\n    // \u56de\u6570\u3000-> \u5358\u8a9e\n    Map<Long, Set<String>> dist = freqs.entrySet().stream()\n            .collect(groupingBy(e -> e.getValue(),\n                    TreeMap::new, // sorted\n                    mapping(e -> e.getKey(), \n                            toCollection(TreeSet::new)))); // sorted\n    System.out.println(dist);\n    // {1=[again, and, couldn't, fall, great, had, horses, men, on, put, sat, together, wall], \n    //  2=[a, all, dumpty, king's, the], \n    //  3=[humpty]}\n```\n\n```java:List.2-47_\u5358\u8a9e\u306e\u751f\u8d77\u78ba\u7387\nimport static java.util.stream.Collectors.*;\n    List<String> words = ... ;\n\n    Map<String, Double> p = words.stream()\n            .collect(groupingBy(w -> w,\n                    collectingAndThen(counting(), c -> (double)c / words.size())));\n```\n\n```java:List.2-48_\u5358\u8a9e\u306e\u8a9e\u5f59(\u30e6\u30cb\u30fc\u30af\u5358\u8a9e)\n    SortedSet<String> vocabulary = words.stream()\n            .collect(Collectors.toCollection(TreeSet::new)); \n```\n\n`Collectors` \u30af\u30e9\u30b9\u304c\u63d0\u4f9b\u3059\u308b\u5404\u30e1\u30bd\u30c3\u30c9\u3092\u3046\u307e\u304f\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3001\u304b\u306a\u308a\u8907\u96d1\u306a\u5909\u63db\u51e6\u7406\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u8868\u73fe\u3067\u304d\u308b\u3002\u3057\u304b\u3057\u305d\u308c\u306f\u3044\u3046\u307b\u3069\u7c21\u5358\u306a\u3053\u3068\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3088\u308a\u30d1\u30ba\u30eb\u306e\u624d\u80fd\u304c\u5fc5\u8981\u306a\u9818\u57df\u306b\u306a\u308b\u3002\u4f7f\u3063\u3066\u307f\u308c\u3070\u308f\u304b\u308b\u304c\u3001\u307e\u3042\u3001\u578b\u63a8\u8ad6\u304c\u6ce3\u304d\u51fa\u3059\u306e\u306b\u306f\u624b\u3092\u713c\u304f\u3060\u308d\u3046\u3002\n\n\u3057\u304b\u3082\u3001Collectors \u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u306e\u81ea\u7531\u5ea6\u306f\u3001 Stream \u672c\u6765\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3068\u306f\u3042\u307e\u308a\u95a2\u4fc2\u304c\u306a\u3044\u3002\u305d\u308c\u3053\u305d`Collector`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068`Collectors`\u30af\u30e9\u30b9\u306f\u3001Collector API \u3068\u304b Transform API \u3068\u547c\u3093\u3067\u3082\u3044\u3044\u304f\u3089\u3044\u306e\u72ec\u7acb\u3057\u305f\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u8a2d\u8a08\u601d\u60f3\u304b\u3089\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u69d8\u76f8\u3092\u5448\u3057\u3066\u3044\u308b\u3002\n\n```java:List.2-49_\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u6700\u5927\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\n// SQL \u3067\u8868\u73fe\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u554f\u984c\u304c\u3042\u308b\u3002\n// \u305f\u3068\u3048\u3070\u300c\u6708\u6b21\u3054\u3068\u306b\u58f2\u308a\u4e0a\u3052\u304c\u6700\u5927\u3068\u306a\u3063\u305f\u65e5\u4ed8\u3068\u5e97\u8217\u3092\u62bd\u51fa\u3059\u308b\u300d\u306a\u3069\u306f\n// \u7c21\u5358\u305d\u3046\u3067\u610f\u5916\u3068\u9762\u5012\u304f\u3055\u3044\u3002\uff08\u7279\u306b MySQL\u3001\u304a\u307e\u3044\u306e\u3053\u3068\u3060\uff09\n// Collector \u306e\u4e2d\u306b\u306f\u305d\u308c\u3092\u88dc\u5b8c\u3067\u304d\u305d\u3046\u306a\u6a5f\u80fd\u3082\u3042\u308b\u3002\n// \u3082\u3061\u308d\u3093\u60c5\u5f37\u306f Excel \u306e\u30d4\u30dc\u30c3\u30c8\u3092\u4f7f\u3046\u3002\n\nimport static java.util.stream.Collectors.*;\nimport static java.util.Comparator.comparing;\n...\n\n    // \u91ce\u7403\u9078\u624b\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\n    List<Players> players = ... ;\n\n    // \u7403\u56e3\u3054\u3068\u306b\u6253\u7387\u306e\u6700\u3082\u9ad8\u3044\u9078\u624b\u3092\u62bd\u51fa\u3059\u308b\u3002\n    Map<String, Player> topHitters = players.stream()\n           .collect(groupingBy(\n                   Player::getTeam,\n                   collectingAndThen(\n                           maxBy(comparing(Player::getBattingAverage)),\n                           Optional::get)));\n    \n    // \u6253\u7387\uff13\u5272\u4ee5\u4e0a\u3068\u672a\u6e80\u306e\u9078\u624b\u306b\u5206\u3051\u3001\u30c1\u30fc\u30e0\u3054\u3068\u306e\u4eba\u6570\u3092\u96c6\u8a08\u3059\u308b\n    Map<Boolean, Map<String, Long>> hitterCounts = players.stream()\n            .collect(partitioningBy(\n                    e -> e.getBattingAverage() >= .300,\n                    groupingBy(\n                            Player::getTeam,\n                            counting())));\n```\n\n`Collectors`\u30af\u30e9\u30b9\u306e\u6301\u3064\u6a5f\u80fd\u3060\u3051\u3067\u306f\u8cc4\u3048\u306a\u3044\u7279\u6b8a\u306a\u5909\u63db\u3092\u3057\u305f\u3044\u5834\u5408\u3001`collect(3)`\u306b\u81ea\u4f5c\u95a2\u6570\u3092\u6e21\u3057\u305f\u308a\u3001\u30ab\u30b9\u30bf\u30e0\u306e`Collector`\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u306e\u8a71\u984c\u304b\u3089\u3060\u3044\u3076\u96e2\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3082\u3046\u3053\u308c\u4ee5\u4e0a\u6df1\u5165\u308a\u3057\u306a\u3044\u3002\n\n* [Java8\u306eCollector\u3092for\u6587\u3068\u6bd4\u8f03\u3057\u306a\u304c\u3089\u4e00\u304b\u3089\u4f5c\u3063\u3066\u7406\u89e3\u3059\u308b](http://qiita.com/civic/items/b5800ab4b620a53a9be1) - Qiita\n\n\n## 2.4. \u51fa\u529b\u3059\u308b\n\n### 2.4.1. forEach() / forEachOrdered()\n\n`forEach()`\u3068\u30e9\u30e0\u30c0\u5f0f\u306f Java \u30d7\u30ed\u30b0\u30e9\u30de\u60b2\u9858\u306e\u5185\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u69cb\u6587\u3092\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3060\u3002\n\n`forEach()`\u306fJava 8 \u3067`Iterable`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e default \u30c8\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3001Collection \u7cfb\u30af\u30e9\u30b9\u306e`List`\u3084`Set`\u306a\u3069\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u4e00\u90e8\u3067\u306f\u3001\u53e4\u304f\u3055\u3044 for \u6587\u3088\u308a`forEach()`\u306e\u4f7f\u7528\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n\u4e00\u65b9 Stream \u306b\u3082\u76f8\u4f3c\u306e`forEach()`\u30e1\u30bd\u30c3\u30c9\u304c\u7d42\u7aef\u64cd\u4f5c\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057 Stream \u3067\u306f`forEach()`\u306f\u63a8\u5968\u3055\u308c\u305a\u3001\u9650\u5b9a\u3055\u308c\u305f\u72b6\u6cc1\u3067\u3084\u3080\u3092\u5f97\u305a\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3044\u3046\u4f4d\u7f6e\u4ed8\u3051\u3060\u3002\n\u4e00\u90e8\u3067\u306f`forEach()`\u3092\u4f7f\u3063\u305f\u3089\u300c\u8ca0\u3051\u300d\u3068\u307e\u3067\u8a00\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\n\u305d\u306e\u7406\u7531\u306e\u3072\u3068\u3064\u306f\u3001`forEach()`\u304c\u526f\u4f5c\u7528\u3092\u76ee\u7684\u3068\u3057\u305f\u64cd\u4f5c\u3060\u304b\u3089\u3060\u308d\u3046\u3002\n\n`forEach()`\u306b\u6e21\u3057\u305f\u95a2\u6570(action)\u306f\u5024\u3092\u8fd4\u305b\u305a\u3001\u6a19\u6e96\u51fa\u529b\u3084\u5916\u90e8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3059\u308b\u306a\u3069\u3001\u305d\u306e\u5916\u90e8\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u3057\u304b\u306a\u3044\u3002\n\u3053\u308c\u3092\u526f\u4f5c\u7528(Side-effects)\u3068\u547c\u3073\u3001\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u305d\u306e\u30d1\u30e9\u30c0\u30a4\u30e0\u3092\u7a62\u3059\u5815\u843d\u3057\u305f\u884c\u70ba\u3068\u307f\u306a\u3055\u308c\u308b\u3002\n\n\u3082\u3061\u308d\u3093\u305d\u308c\u306f\u4e16\u4fd7\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u77e5\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u3002\n\u4f7f\u3048\u308b\u7269\u306f\u4f7f\u3046\u3060\u3051\u3060\u3002\n\n```java:List.2-50_forEach()\u306e\u57fa\u672c\n    List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n\n    // Stream \u306e forEach() \u304c\u526f\u4f5c\u7528\u3067\u3042\u308b\u3053\u3068\u3092\n    // \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u3063\u3066\u660e\u793a\u3057\u305f\u3044\n    list.stream()\n\t    \t.forEach(s -> {\n\t        \tSystem.out.println(s);\n\t    \t});\n\n    // \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3044\u3068\u30d1\u30c3\u3068\u898b\u3044\u304b\u306b\u3082\u5024\u3092\u8fd4\u3057\u3066\u305d\u3046\n    list.stream().forEach(s -> System.out.println(s));\n\n    // forEach() \u304c\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4f7f\u3046\u3068\u306f\u304a\u3053\u304c\u307e\u3057\u3044\n    list.stream().forEach(System.out::println);\n\n    // Iterable \u306e forEach()\n    list.forEach(s -> {\n        System.out.println(s);\n    });\n\n    // \u540c\u7b49\u306e\u62e1\u5f35 for \u69cb\u6587\n    for (String s : list) {\n        System.out.println(s);\n    }\n\n    Map<String, String> map = new HashMap<>();\n\n    // \u5b9f\u306f Map \u306b\u3082\u3042\u308b\n    map.forEach((key, val) -> {\n        System.out.format(\"%s=%s\\n\", key, val);\n    });\n\n    // Map \u3067\u3082 Stream \u3092\u4f7f\u3044\u305f\u3044\n    map.entrySet().stream()\n            .forEach(e -> {\n                System.out.format(\"%s=%s\\n\", e.getKey(), e.getValue());\n            });\n```\n\n\u3057\u304b\u3057 forEach() \u3092\u4f7f\u3063\u3066\u307f\u308b\u3068\u30e9\u30e0\u30c0\u5f0f\u306b\u7d61\u3080\u5236\u7d04\u304c\u52b9\u3044\u3066\u3001\u5358\u7d14\u306b for \u6587\u306e\u4ee3\u66ff\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\n- \u5916\u90e8\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4ee3\u5165\u3067\u304d\u306a\u3044(final\u6271\u3044)\u3002\n- \u51e6\u7406\u3092\u4e2d\u65ad\uff08break\uff09\u3067\u304d\u306a\u3044\u3002\n- \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u6295\u3052(throw)\u3089\u308c\u306a\u3044\u3002\n\n\u5f8c\u306e\uff12\u3064\u306f\u3068\u3082\u304b\u304f\u3001\u6700\u521d\u306e\u306f\u5730\u5473\u306b\u75db\u3044\u3002\n\u305f\u3068\u3048\u3070\u3001\u51fa\u529b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3064\u3051\u3088\u3046\u3068\u3059\u308b\u3060\u3051\u3067\u3082\u82e6\u52b4\u3059\u308b\u3002\nJava \u306e\u30e9\u30e0\u30c0\u5f0f\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3067\u306f\u306a\u3044\u3068\u3044\u308f\u308c\u308b\u6240\u4ee5\u3060\u3002\n\n* [Java 8 forEach with index](http://stackoverflow.com/questions/22793006/java-8-foreach-with-index) - Stack Overflow\n* [\u30e9\u30e0\u30c0\u5f0f\u3084\u7121\u540d\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304b\u3089\u3001\u5916\u90e8\u306b\u5024\u3092\u6e21\u3059\u65b9\u6cd5](http://qiita.com/ApplePedlar/items/8730739179a7c57dbc6f) - Qiita\n\n```java:List.2-51_\u884c\u756a\u53f7\u4ed8\u304d\u691c\u7d22\npublic class GrepN {\n    public static void main(String[] args) throws IOException {\n        String keyword = args[0];\n        \n        LineNumberReader reader = \n                new LineNumberReader(new InputStreamReader(System.in));\n        reader.lines()\n                .filter(line -> line.contains(keyword))\n                .forEach(line -> {\n                    System.out\n                            .format(\"%d:%s\", reader.getLineNumber(), line)\n                            .println();\n                });\n    }\n}\n```\n```bash\n$ java GrepN Buzz < fizzbuzz.txt\n5:Buzz\n10:Buzz\n15:Fizz Buzz\n20:Buzz\n25:Buzz\n30:Fizz Buzz\n35:Buzz\n...\n```\n\n```java:List.2-52_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u884c\u3092\u8868\u793a\uff08\u305d\u306e\uff14\uff09\n// count\u7528\u306e\u7a7a\u8aad\u307f\u306a\u3057\u3067\u591a\u3044\u65e5\u3082\u5b89\u5fc3\u30d0\u30fc\u30b8\u30e7\u30f3\npublic class Tail4 {\n public static void main(String[] args) throws IOException {\n     final int nLines = Integer.parseInt(args[0]);\n     final String fileName = args[1];\n\n     // \u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3059\u308b\u30ea\u30b9\u30c8\n     final LinkedList<String> tail = new LinkedList<>(Arrays.asList(new String[nLines]));\n     Files.lines(Paths.get(fileName))\n             .forEach(line -> {\n                 // final \u306a\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u90e8\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u3002\n                 tail.addLast(line);\n                 tail.removeFirst();\n             });\n\n     tail.stream()\n             .filter(Objects::nonNull)\n             .forEach(line -> {\n                 System.out.println(line);\n             });        \n     }\n}\n```\n\n```java:List.2-53_\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u96c6\u8a08\npublic class Wc {\n    final String name;\n    int lineCount, wordCount, charCount; // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\n    static int maxLineLength;            // \u30af\u30e9\u30b9\u5909\u6570\n    \n    public Wc(String name) { this.name = name; }\n    \n    public Consumer<String> getCounter() {\n        // \u30e9\u30e0\u30c0\u5f0f\u5916\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\n        Pattern space = Pattern.compile(\"\\\\s+\");\n\n        return (line) -> {\n\n            // \u5916\u90e8\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u53c2\u7167\u306f\u3067\u304d\u308b\n            // \u3057\u304b\u3057\u4ee3\u5165\u306f\u3067\u304d\u306a\u3044\uff08final\u6271\u3044\uff09\n            wordCount += (int) space.splitAsStream(line).count();\n           \n            // \u30e9\u30e0\u30c0\u5f0f\u306e\u5f15\u6570\u306f\u666e\u901a\u306b\u518d\u4ee3\u5165\u3067\u304d\u308b\n            line += \"\\n\"; \n            charCount += (int) line.codePoints().count();\n\n            // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n            lineCount ++;\n            \n            // \u30af\u30e9\u30b9\u5909\u6570\u3082\u5909\u66f4\u3067\u304d\u308b\n            maxLineLength = Math.max(maxLineLength, line.length());\n        };\n    }\n        \n    public Wc add(Wc wc) {\n        this.lineCount += wc.lineCount;\n        this.wordCount += wc.wordCount;\n        this.charCount += wc.charCount;\n        return this;\n    }\n    \n    public static void main(String[] args) throws IOException {\n        \n        Consumer<Wc> print = wc -> \n                System.out.format(\"%7d %7d %7d %s\\n\", wc.lineCount, wc.wordCount, wc.charCount, wc.name);\n        \n        Wc total = Stream.of(args)\n            .map(Wc::new)\n            .map(wc -> {\n                try (Stream<String> lines = Files.lines(Paths.get(wc.name))) {\n                    lines.forEach(wc.getCounter());\n                    return wc;\n                } catch (IOException e) {\n                    System.err.println(wc.name + \": No such file or directory\");\n                    return null;\n                }\n            })\n            .filter(Objects::nonNull)\n            .peek(print)\n            .reduce(new Wc(\"total\"), Wc::add);\n        \n        if (args.length > 1) {\n            print.accept(total);\n        }\n    }\n}\n```\n\n\u4e26\u5217 Stream \u3067\u306e forEach \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306f\u8981\u7d20\u9806\u306b\u306a\u3089\u305a\u30d0\u30e9\u30d0\u30e9\u306b\u306a\u308b\u3002\n\u3057\u304b\u3082\u540c\u671f\u3055\u308c\u306a\u3044\u306e\u3067\u51fa\u529b\u304c\u58ca\u308c\u308b\u3002\n\n`forEach()`\u306e\u4ee3\u308f\u308a\u306b`forEachOrdered()`\u3092\u4f7f\u3046\u3068\u3001\u4e2d\u9593\u64cd\u4f5c\u3092\u4e26\u5217\u5b9f\u884c\u3057\u3064\u3064\u51fa\u529b\u3067\u306f\u8981\u7d20\u9806\u3092\u7dad\u6301\u3067\u304d\u308b\u3002\n\n```java:List.2-54_forEachOrdered()\u306e\u52b9\u679c\n    IntStream.range(1, 20)\n            .parallel() // \u4e26\u5217\u51e6\u7406\n            .peek(i -> {\n                System.out\n                        .format(\"%02d%\"+ i + \"s%s\", i, \"\", \"\u2605\")\n                        .println();\n            })\n         // .forEach(i -> {\n            .forEachOrdered(i -> {\n                System.out\n                        .format(\"%02d%\"+ i + \"s%s\", i, \"\", \"-=\u2606\")\n                        .println();\n            });\n```\n```\n\u3082\u3061\u308d\u3093\u5b9f\u884c\u74b0\u5883\u306b\u3088\u3063\u3066\u30d1\u30bf\u30fc\u30f3\u306f\u7570\u306a\u308b\n12            \u260506      \u2605\n03   \u2605\n17                 \u2605\n04    \u2605\n05     \u2605\n\n08        \u2605\n02  \u2605\n19                   \u2605\n01 \u2605\n09         \u2605\n14              \u2605\n07       \u2605\n01 -=\u2606\n18                  \u2605\n02  -=\u2606\n16                \u2605\n13             \u2605\n11           \u2605\n03   -=\u2606\n04    -=\u2606\n15               \u2605\n05     -=\u2606\n10          \u2605\n06      -=\u2606\n07       -=\u2606\n08        -=\u2606\n09         -=\u2606\n10          -=\u2606\n11           -=\u2606\n12            -=\u2606\n13             -=\u2606\n14              -=\u2606\n15               -=\u2606\n16                -=\u2606\n17                 -=\u2606\n18                  -=\u2606\n19                   -=\u2606\n```\n\n```java:List.2-55_Web\u30b5\u30fc\u30d0\u306e\u30ec\u30a4\u30c6\u30f3\u30b7\u3092\u8abf\u3079\u308b\n    String[] urls = {\n            \"http://qiita.com/\",\n            \"http://goo.gl/z5AEEC\",\n            \"http://localhost/1.html\",\n            \"http://localhost/2.html\",\n            ...\n            \"http://localhost/10.html\"\n    };\n    \n    Stream.of(urls)\n            .parallel()\n            .forEach(url -> {\n                try {\n                    HttpURLConnection client = (HttpURLConnection) new URL(url).openConnection();\n                    client.setRequestMethod(\"HEAD\");\n\n                    long ms = System.currentTimeMillis();\n                    int code = client.getResponseCode();\n                    ms = System.currentTimeMillis() - ms;\n\n                    synchronized (System.out) {\n                        System.out\n                            .format(\"%2d %6d %d %s\", Thread.currentThread().getId(), ms, code, url)\n                            .println();\n                    }\n                } catch (IOException e) {\n                    System.err.println(e.getMessage() + \" : \" + url);\n                }\n            });\n```\n```\n\u30b9\u30ec\u30c3\u30c9\u6570\u306f\u56fa\u5b9a\u3067\u4f7f\u3044\u307e\u308f\u3057\u3066\u3044\u308b\u3002\n11     10 404 http://localhost/2.html\n12     10 404 http://localhost/9.html\n 1     10 404 http://localhost/6.html\n12      3 404 http://localhost/10.html\n 1      3 404 http://localhost/7.html\n12      1 404 http://localhost/8.html\n11      6 404 http://localhost/4.html\n 1      3 404 http://localhost/5.html\n12      3 404 http://localhost/3.html\n 1      2 404 http://localhost/1.html\n13    129 301 http://goo.gl/z5AEEC\n11     92 301 http://qiita.com/\n```\n\n### 2.4.2. iterator()\n\nJava \u306e\u30e9\u30e0\u30c0\u5f0f\u306b\u526f\u4f5c\u7528\u3092\u6c42\u3081\u308b\u304b\u3089\u7121\u7406\u304c\u3067\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u308f\u305a\u306b\u3001Stream \u306e\u5916\u3067\u30eb\u30fc\u30d7\u3092\u56de\u305b\u308c\u3070\u3044\u3044\u3002\n\n\u4f55\u306e\u60c5\u3051\u304b Stream \u306f`iterator()`\u3092\u63d0\u4f9b\u3057\u3001\u5916\u90e8\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4ecb\u3057\u305f\u8981\u7d20\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\n\nAPI \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u308c\u3092\u300c\u30a8\u30b9\u30b1\u30fc\u30d7\u30fb\u30cf\u30c3\u30c1\u300d\u3068\u8868\u73fe\u3057\u3066\u3044\u3066\u306a\u3093\u304b\u3061\u3087\u3063\u3068\u5f15\u3063\u304b\u304b\u308b\u3002\n\u307e\u3042\u3044\u3044\u3001\u3053\u308c\u3067\u62e1\u5f35 for \u6587\u3067\u3082 Stream \u304c\u56de\u305b\u308b\u3088\u3046\u306b\u3001\u3001\u3001\n\u30af\u30c3\u3001\u306a\u3089\u306a\u3044\u3063\uff01\n\n```java\n    Stream<String> stream = ... ;\n\n    for (String s : stream) {\n        System.out.println(s);\n    }\n    // java.lang.Error: Unresolved compilation problem: \n    // Can only iterate over an array or an instance of java.lang.Iterable\n```\n\n\u62e1\u5f35 for \u6587\u304c\u53d7\u3051\u5165\u308c\u308b\u306e\u306f`java.lang.Iterable`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u306e iterator() \u3060\u3002\nStream \u306f`iterator()`\u6301\u3064\u304c`Iterable`\u3067\u306f\u306a\u3044\u3002\n\u8a00\u308f\u3070\u30aa\u30ec\u30aa\u30ec iterator \u3060\u3002\n\n\u4eca\u66f4 iterator \u3092\u5909\u6570\u306b\u53d6\u3063\u3066hasNext()/next()\u3067\u56de\u3059\u30b3\u30fc\u30c9\u3092\u3061\u307e\u3061\u307e\u66f8\u304f\u306e\u304b\u3002\n\u5730\u5473\u306a\u5acc\u304c\u3089\u305b\u306b\u3057\u304b\u601d\u3048\u306a\u3044\u3002\n\n\u3046\u30fc\u3080...\n\n\u3088\u304f\u898b\u308c\u3070\u3001`Iterable`\u306e\u5b9a\u7fa9\u306f\u305f\u307e\u305f\u307e abstract \u306a\u30e1\u30bd\u30c3\u30c9\u3092`iterator()`\u4e00\u3064\u3057\u304b\u6301\u305f\u306a\u3044\u3002\n`@FunctionalInterface`\u3053\u305d\u4ed8\u3044\u3066\u3044\u306a\u3044\u304c\u3001\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u8981\u4ef6\u306f\u6e80\u305f\u3057\u3066\u3044\u308b\u3002\n`Iterable`\u3092\u6e21\u3059\u3088\u3046\u306a\u5c40\u9762\u3067\u306f\u4ee3\u308f\u308a\u306b\u30e9\u30e0\u30c0\u5f0f\u3084\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3060\u3002\n\n\u304a\u308a\u3083\uff01\n\n```java:List.2-56_\u62e1\u5f35for\u6587\u3067Stream\u3092\u4f7f\u3046\n    Stream<String> stream = ... ;\n\n    for (String s : (Iterable<String>) stream::iterator) {\n        System.out.println(s);\n    }\n```\n\n\u52dd\u30c3\u305f\u3002(T^T)\n\n\u305d\u3053\u307e\u3067\u3059\u308b\u610f\u5473\u304c\u3042\u308b\u304b\u306f\u5225\u3068\u3057\u3066\u3001\u30a4\u30c7\u30aa\u30e0\u3068\u3057\u3066\u77e5\u3063\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u3002\n\u305f\u3060\u3057`Iterable`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5c06\u6765\u306e\u4ed5\u69d8\u5909\u66f4\u306b\u8010\u3048\u308b\u4fdd\u8a3c\u306f\u306a\u3044\u3002\n\n```java:List.2-57_bigram\u306e\u8ee2\u7f6e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u9752\u7a7a\u6587\u5eab\u7528\uff09\n// \u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u306f\u9577\u3059\u304e\u305f\u306e\u3067\u53d6\u308a\u4e0b\u3052\u30662-58\u306b\u4ee3\u3048\u307e\u3059\u3002\n```\n\n```java:List.2-58_\u30bd\u30fc\u30b9\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u524a\u9664\n    Path src = Paths.get(file);\n    Path dst = Paths.get(file + \".nocomment\");\n    Path tmp = Files.createTempFile(this.getClass().getName(), \".tmp\");\n            \n    try (Stream<String> lines = Files.lines(src);\n        BufferedWriter bw = Files.newBufferedWriter(tmp);\n    ) {\n        Iterator<String> iter = lines\n                .map(l -> l.replaceAll(\"/\\\\*.*?\\\\*/\", \"\")) /* \u884c\u5185\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3092\u9664\u53bb  */\n                .map(l -> l.replaceFirst(\"//.*\", \"\"))      // \u884c\u30b3\u30e1\u30f3\u30c8\u3092\u524a\u9664\n                .flatMap(l -> {\n                    // \u30d7\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u524d\u5f8c\u3067\u30d6\u30ec\u30a4\u30af\u3059\u308b\n                    return Stream.of(l.split(\"(?=/\\\\*)|(?<=\\\\*/)\"));\n                })\n                .filter(l -> !l.matches(\"\\\\s+\"))          // \u7a7a\u767d\u6587\u5b57\u306e\u307f\u306e\u884c\u3082\u524a\u9664\u3057\u3066\u304a\u304f\n                .iterator();\n\n        // \u72b6\u614b\u3092\u6301\u3066\u308b\n        boolean isComment = false;\n        for (String line :  (Iterable<String>) () -> iter) {\n            if (isComment) {\n                if (line.contains(\"*/\")) {\n                    isComment = false;\n                }\n                continue;                       // continue OK\n            } else {\n                if (line.contains(\"/*\")) {\n                    isComment = true;\n                    continue;                   // continue \u3057\u653e\u984c\n                } else if (line.contains(\"*/\")) {\n                    System.err.println(\"\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306e\u4e0d\u6574\u5408\");\n                    break;                      // break \u3084\u308a\u653e\u984c\n                }\n            }\n            // \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u6295\u3052\u653e\u984c\n            bw.write(line);\n            bw.newLine();\n            bw.flush();\n        }\n        bw.close();\n        Files.move(tmp, dst);\n    }\n```\n\n## \u3065\u3065...\u304d.\u305f\u3044...\n\u6b21\u306f\u4e2d\u9593\u64cd\u4f5c...\n\n\n## \u53c2\u8003\n\n* java.util.stream (Java Platform SE 8 API\u4ed5\u69d8)  \nhttp://docs.oracle.com/javase/jp/8/api/index.html?java/util/stream/package-summary.html\n* Java Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo)  \nhttp://www.ne.jp/asahi/hishidama/home/tech/java/stream.html\n* Java Collector\u30e1\u30e2(Hishidama's Java8 Collector Memo)  \nhttp://www.ne.jp/asahi/hishidama/home/tech/java/collector.html\n* Java Stream\u30b5\u30f3\u30d7\u30eb(Hishidama's Java8 Stream Example)  \nhttp://www.ne.jp/asahi/hishidama/home/tech/java/stream_example.html\n* Java8 Stream API\u306e\u57fa\u672c(6) - \u7d42\u7aef\u64cd\u4f5c\u306e\u6982\u8981 - \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30ae\u30fc\u30af\u30b9 (Enterprise Geeks)  \nhttp://enterprisegeeks.hatenablog.com/entry/2014/05/27/183000\n* Java8 Stream API\u306e\u57fa\u672c(7) - \u7d42\u7aef\u64cd\u4f5c2(Stream#collect) - \u30a8\u30f3\u30bf\u30fc\u30d7\u30e9\u30a4\u30ba\u30ae\u30fc\u30af\u30b9 (Enterprise Geeks)  \nhttp://enterprisegeeks.hatenablog.com/entry/2014/06/19/093000\n* Reduction (The Java&trade; Tutorials > Collections > Aggregate Operations)  \nhttps://docs.oracle.com/javase/tutorial/collections/streams/reduction.html\n* Java 8 Friday: 10 Subtle Mistakes When Using the Streams API  \nhttp://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/#comments\n* Java SE 8 Lambda & Stream API Overview from History  \nhttp://www.slideshare.net/OracleMiddleJP/java-se-8-overview-from-history\n* Why are Java Streams once-off? - Stack Overflow  \nhttp://stackoverflow.com/questions/28459498/why-are-java-streams-once-off\n* Java8\u306elambda\u69cb\u6587\u304c\u3069\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3067\u306f\u306a\u3044\u304b - \u304d\u3057\u3060\u306e\u306f\u3066\u306a  \nhttp://d.hatena.ne.jp/nowokay/20130522\n* forEach\u66f8\u3044\u305f\u3089\u8ca0\u3051\u3001for\u6587\u7981\u6b62 - torutk\u306e\u65e5\u8a18  \nhttp://d.hatena.ne.jp/torutk/20140518/p1\n* Java8 Stream\u3067\u30d0\u30ea\u30d0\u30ea\u3084\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u4eba\u306e\u305f\u3081\u306eFunctional Interface\u307e\u3068\u3081 - mike-neck\u306e\u30d6\u30ed\u30b0  \nhttp://mike-neck.hatenadiary.com/entry/2014/08/01/132527\n* Java8\u3067\u306e\u6587\u5b57\u5217\u9023\u7d50 - Qiita  \nhttp://qiita.com/lonerydeveloper/items/9f7c977c039ad4d24d30\n* Java\u3067\u6587\u5b57\u5217\u306e\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d39\u4ecb - Qiita  \nhttp://qiita.com/ssaito/items/aae5522618d4296c5178\n* Flesch\u2013Kincaid readability tests - Wikipedia  \nhttps://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests\n* Readability-Score.com  \nhttps://readability-score.com/\n* 069.\u97f3\u7bc0 - \u82f1\u8a9e\u3067\u60a9\u3080\u3042\u306a\u305f\u306e\u305f\u3081\u306b  \nhttp://roundsquaretriangle.web.fc2.com/text/002_6.html\n"}