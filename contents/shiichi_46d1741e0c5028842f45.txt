{"context": " More than 1 year has passed since last update.RouteNeedsRoleOrPermission.php\u3092\u8aad\u3093\u3067\u307f\u308b\n<?php namespace App\\Http\\Middleware;\n\nuse Closure;\nuse App\\Services\\Access\\Traits\\AccessParams;\n\n/**\n * Class RouteNeedsRole\n * @package App\\Http\\Middleware\n */\nclass RouteNeedsRoleOrPermission {\n\n    //\u2460\u30c8\u30ec\u30a4\u30c8\u3092\u5229\u7528\n    use AccessParams;\n\n    /**\n     * @param $request\n     * @param callable $next\n     * @param null $params\n     * @return bool|\\Illuminate\\Contracts\\Routing\\ResponseFactory|\\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Routing\\Redirector|\\Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function handle($request, Closure $next, $params = null)\n    {\n\u3000\u3000\u3000\u3000 //\u2461AccessParams.php\u306e\u30e1\u30bd\u30c3\u30c9\n        $assets = $this->getAssets($request, $params);\n\n        if ($assets['needsAll']) {\n            if (! access()->hasRoles($assets['roles'], true) || ! access()->canMultiple($assets['permissions'], true)) {\n                return $this->getRedirectMethodAndGo($request, $params);\n            }\n        } else {\n            if (! access()->hasRoles($assets['roles'], false) && ! access()->canMultiple($assets['permissions'], false)) {\n                return $this->getRedirectMethodAndGo($request, $params);\n            }\n        }\n\n        return $next($request);\n    }\n}\n\n\n\u2460\u30c8\u30ec\u30a4\u30c8\u3092\u5229\u7528\u3057\u3066app/Services/Access/TraitsAccessParams.php\u3092\u8aad\u307f\u8fbc\u307f\nphp\u306e\u30c8\u30ec\u30a4\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\nhttp://blog.toshimaru.net/php-trait/\n\n\u2461AccessParams.php\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u308b\n\u3044\u304f\u3064\u304b\u306e\u30e1\u30c3\u30bd\u30c9\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\npublic function getAssets($request, $params) {\n    $assets['roles'] = $this->getRoles($request, $params);\n    $assets['permissions'] = $this->getPermissions($request, $params);\n    $assets['needsAll'] = $this->getNeedsAll($request, $params);\n    return $assets;\n}\n\nprivate function getRoles($request, $params) {\n    return !is_null($params) ? $this->getParamFromController($params, \"role\") : $this->getParamFromRoute($request, \"role\");\n}\n\nprivate function getParamFromRoute($request, $param) {\n    $return = [];\n\n    $route = $request->route();\n    $actions = $route->getAction();\n\n    //Param isn't needed for this request\n    if (! isset($actions[$param])) return false;\n\n    //Flash session message\n    if ($param == \"with\")\n        if (is_array($actions[$param]) && count($actions[$param]) == 2)\n            return ['key' => $actions[$param][0], 'message' => $actions[$param][1]];\n\n    if (is_array($actions[$param]))\n        return array_merge($return, $actions[$param]);\n\n    $return[] = $actions[$param];\n\n    return $return;\n}\n\n$request->route()->getAction();\n\u306e\u7d50\u679c\u306f\narray(11) {\n  [\"middleware\"]=>\n  array(2) {\n    [0]=>\n    string(4) \"auth\"\n    [1]=>\n    string(33) \"access.routeNeedsRoleOrPermission\"\n  }\n  [\"role\"]=>\n  array(1) {\n    [0]=>\n    string(13) \"Administrator\"\n  }\n  [\"permission\"]=>\n  array(1) {\n    [0]=>\n    string(12) \"view_backend\"\n  }\n  [\"redirect\"]=>\n  string(1) \"/\"\n  [\"with\"]=>\n  array(2) {\n    [0]=>\n    string(12) \"flash_danger\"\n    [1]=>\n    string(34) \"You do not have access to do that.\"\n  }\n  [\"as\"]=>\n  string(17) \"backend.dashboard\"\n  [\"uses\"]=>\n  string(54) \"App\\Http\\Controllers\\Backend\\DashboardController@index\"\n  [\"controller\"]=>\n  string(54) \"App\\Http\\Controllers\\Backend\\DashboardController@index\"\n  [\"namespace\"]=>\n  string(28) \"App\\Http\\Controllers\\Backend\"\n  [\"prefix\"]=>\n  string(6) \"/admin\"\n  [\"where\"]=>\n  array(0) {\n  }\n}\n\n[RouteNeedsRoleOrPermission.php](https://github.com/rappasoft/laravel-5-boilerplate/blob/master/app/Http/Middleware/RouteNeedsRoleOrPermission.php)\u3092\u8aad\u3093\u3067\u307f\u308b\n\n```php\n<?php namespace App\\Http\\Middleware;\n\nuse Closure;\nuse App\\Services\\Access\\Traits\\AccessParams;\n\n/**\n * Class RouteNeedsRole\n * @package App\\Http\\Middleware\n */\nclass RouteNeedsRoleOrPermission {\n    \n    //\u2460\u30c8\u30ec\u30a4\u30c8\u3092\u5229\u7528\n\tuse AccessParams;\n\n\t/**\n\t * @param $request\n\t * @param callable $next\n\t * @param null $params\n\t * @return bool|\\Illuminate\\Contracts\\Routing\\ResponseFactory|\\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Routing\\Redirector|\\Symfony\\Component\\HttpFoundation\\Response\n\t */\n\tpublic function handle($request, Closure $next, $params = null)\n\t{\n\u3000\u3000\u3000\u3000 //\u2461AccessParams.php\u306e\u30e1\u30bd\u30c3\u30c9\n\t\t$assets = $this->getAssets($request, $params);\n\n\t\tif ($assets['needsAll']) {\n\t\t\tif (! access()->hasRoles($assets['roles'], true) || ! access()->canMultiple($assets['permissions'], true)) {\n\t\t\t\treturn $this->getRedirectMethodAndGo($request, $params);\n\t\t\t}\n\t\t} else {\n\t\t\tif (! access()->hasRoles($assets['roles'], false) && ! access()->canMultiple($assets['permissions'], false)) {\n\t\t\t\treturn $this->getRedirectMethodAndGo($request, $params);\n\t\t\t}\n\t\t}\n\n\t\treturn $next($request);\n\t}\n}\n```\n\n###\u2460\u30c8\u30ec\u30a4\u30c8\u3092\u5229\u7528\u3057\u3066app/Services/Access/TraitsAccessParams.php\u3092\u8aad\u307f\u8fbc\u307f\nphp\u306e\u30c8\u30ec\u30a4\u30c8\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\nhttp://blog.toshimaru.net/php-trait/\n\n###\u2461AccessParams.php\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u308b\n\u3044\u304f\u3064\u304b\u306e\u30e1\u30c3\u30bd\u30c9\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\n\n```php\npublic function getAssets($request, $params) {\n\t$assets['roles'] = $this->getRoles($request, $params);\n\t$assets['permissions'] = $this->getPermissions($request, $params);\n\t$assets['needsAll'] = $this->getNeedsAll($request, $params);\n\treturn $assets;\n}\n\nprivate function getRoles($request, $params) {\n\treturn !is_null($params) ? $this->getParamFromController($params, \"role\") : $this->getParamFromRoute($request, \"role\");\n}\n\nprivate function getParamFromRoute($request, $param) {\n\t$return = [];\n\n\t$route = $request->route();\n\t$actions = $route->getAction();\n\n\t//Param isn't needed for this request\n\tif (! isset($actions[$param])) return false;\n\n\t//Flash session message\n\tif ($param == \"with\")\n\t\tif (is_array($actions[$param]) && count($actions[$param]) == 2)\n\t\t\treturn ['key' => $actions[$param][0], 'message' => $actions[$param][1]];\n\n\tif (is_array($actions[$param]))\n\t\treturn array_merge($return, $actions[$param]);\n\n\t$return[] = $actions[$param];\n\n\treturn $return;\n}\n```\n\n`$request->route()->getAction();`\n\u306e\u7d50\u679c\u306f\n\n```php\narray(11) {\n  [\"middleware\"]=>\n  array(2) {\n    [0]=>\n    string(4) \"auth\"\n    [1]=>\n    string(33) \"access.routeNeedsRoleOrPermission\"\n  }\n  [\"role\"]=>\n  array(1) {\n    [0]=>\n    string(13) \"Administrator\"\n  }\n  [\"permission\"]=>\n  array(1) {\n    [0]=>\n    string(12) \"view_backend\"\n  }\n  [\"redirect\"]=>\n  string(1) \"/\"\n  [\"with\"]=>\n  array(2) {\n    [0]=>\n    string(12) \"flash_danger\"\n    [1]=>\n    string(34) \"You do not have access to do that.\"\n  }\n  [\"as\"]=>\n  string(17) \"backend.dashboard\"\n  [\"uses\"]=>\n  string(54) \"App\\Http\\Controllers\\Backend\\DashboardController@index\"\n  [\"controller\"]=>\n  string(54) \"App\\Http\\Controllers\\Backend\\DashboardController@index\"\n  [\"namespace\"]=>\n  string(28) \"App\\Http\\Controllers\\Backend\"\n  [\"prefix\"]=>\n  string(6) \"/admin\"\n  [\"where\"]=>\n  array(0) {\n  }\n}\n```\n", "tags": ["PHP", "laravel5", "MySQL"]}