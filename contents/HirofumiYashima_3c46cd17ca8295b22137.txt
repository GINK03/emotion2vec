{"context": "\n\n\u4f8b\u3068\u3057\u3066\u3001\u300e A\u5217 \u00d7 B\u5217 + 2*A\u5217 \u300f\u306e \u8a08\u7b97\u7d50\u679c\u3092\u3001\u300cA * B + 2*A\u300d\u5217 \u306b \u683c\u7d0d\u3059\u308b\u4f5c\u696d\u30b1\u30fc\u30b9\u3092\u3001\u3044\u308d\u3044\u308d\u306a\u65b9\u6cd5\u3067\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\uff08\u65b9\u6cd5\uff11\uff09\n\ndf['A * B + 2*A'] = df['A'] * df['B'] + 2*df['A']\n\n\n\u3067\u884c\u3046\u3084\u308a\u65b9\n\n\npython3\n>>> \n>>> import pandas as pd\n>>> \n>>> data_dict = {'A':[100, 564, 347], 'B':[1200, 853, 139]}\n>>> df = pd.DataFrame(data_dict)\n>>> \n>>> print(type(df))\n<class 'pandas.core.frame.DataFrame'>\n>>> \n>>> print(df)\n     A     B\n0  100  1200\n1  564   853\n2  347   139\n>>> \n>>> print(df['A'])\n0    100\n1    564\n2    347\nName: A, dtype: int64\n>>> \n>>> print(df['B'])\n0    1200\n1     853\n2     139\nName: B, dtype: int64\n>>> \n>>> df['A * B + 2*A'] = df['A'] * df['B'] + 2*df['A']\n\n\n\n\u51fa\u6765\u3066\u308b \n\n\npython3\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n\n\n\n\n\uff08\u65b9\u6cd5\uff12\uff09\n\n\n\u7d9a\u3044\u3066\u3001DataFrame.assign \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n\n\uff08 \u53c2\u8003 \uff09\n\n\nHatena Blog StatsFragments \uff082015/05/16\uff09\u300cpandas 0.16.0/0.16.1 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u300d\n\n\uff08 assign\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u69d8\u4e0a\u306e\u7559\u610f\u70b9 \uff09\n\nassign()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n\u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\npython3\n>>> \n>>> df.assign(D=[10, 11, 12], E=[13, 14, 15])\n     A     B  A * B + 2*A   D   E\n0  100  1200       120200  10  13\n1  564   853       482220  11  14\n2  347   139        48927  12  15\n>>>\n>>> # assign()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n>>> # \u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n>>> df_2 = df.assign(D=[10, 11, 12], E=[13, 14, 15])\n>>> print(df_2)\n     A     B  A * B + 2*A   D   E\n0  100  1200       120200  10  13\n1  564   853       482220  11  14\n2  347   139        48927  12  15\n>>>\n\n\n\nassign \u30e1\u30bd\u30c3\u30c9 \u3067\u306f\u3001\u65b0\u3057\u304f\u65b0\u8a2d\u3059\u308b\u5217\u306e\u5024\u3068\u3057\u3066\u3001\u4ed6\u306e\uff08\u4e00\u3064\u3082\u3057\u304f\u306f\u8907\u6570\u306e\uff09\u5217\u3092\u7528\u3044\u305f\u8a08\u7b97\u5f0f\u306e\u7d50\u679c \u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\npython3\n>>> df.assign(F=df['A']*df['B']+1)\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n>>> # assign \u30e1\u30bd\u30c3\u30c9 \u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n>>> # \u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n>>>\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n\n\n\n\n\uff08\u65b9\u6cd5\uff13\uff09\n\n\nDaraFrame.apply \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\n\n\u4eca\u5ea6\u306f\u3001DataFrame\u30af\u30e9\u30b9 \u306e apply \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\u3067\u3059\u3002\n\u4f5c\u696d\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\napply( ) \u306b\u3001\u65e2\u5b58\u306e\u5217\u3092\u7528\u3044\u305f\u6f14\u7b97\u624b\u7d9a\u304d\u3092\u8a18\u8ff0\u3057\u305f\u30e1\u30bd\u30c3\u30c9 \u3092\u6e21\u3057\u3066\u3001\u5404\u884c\u3054\u3068\u306b\u3001\u65e2\u5b58\u30ab\u30e9\u30e0\u3092\u7528\u3044\u305f\u6f14\u7b97\u3092\u5b9f\u884c\n\u5404\u884c\u3054\u3068\u306b\u3001\u6f14\u7b97\u5b9f\u884c\u3057\u3066\u5f97\u3089\u308c\u305f\u5024\u3092\u3001\u305d\u306e\u884c\uff08\u5404\u884c\uff09\u306e\u65b0\u8a2d\u30ab\u30e9\u30e0\u306b\u683c\u7d0d\u3059\u308b\n\n\n\u305d\u308c\u3067\u306f\u3001apply( ) \u306b\u3001\uff08\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5b9a\u7fa9\u6e08\u307f\u306e\u30ab\u30e9\u30e0\u3092\u6301\u3061\u3044\u305f\u6f14\u7b97\u5f0f \uff1d \uff09\u300c'A'\u5217\uff08\u306e\u5024\uff09 \u00d7'B'\u5217 + 2 \u00d7 'A'\u5217\u300d \u3092\u6e21\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\uff08 apply\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u69d8 \uff09\nDataFrame.appply \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5f15\u6570: axis = 1 \u3067\u3001\u884c\u65b9\u5411\u306b\uff08\u884c\u3054\u3068\u306b\uff09\u6f14\u7b97\u3092\u884c\u3044\u3001axis = 0 \u3067\u3001\u5217\u65b9\u5411\uff08\u5217\u3054\u3068\uff09\u306b\u6f14\u7b97\u3092\u884c\u3046\u4ed5\u69d8\u3002\n\nDataFrame.apply\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u305f\uff08\u65e2\u5b58\u30ab\u30e9\u30e0\u3092\u5143\u306b\u7b97\u51fa\u3057\u305f\u5024\u3092\u683c\u7d0d\u3059\u308b\uff09\u65b0\u8a2d\u30ab\u30e9\u30e0\u306e\u8ffd\u52a0\ndf_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1) # axis = 1 \u3067\u3001\u884c\u65b9\u5411\u306b\uff08\u884c\u3054\u3068\u306b\uff09\u6f14\u7b97\u3092\u884c\u3046\u3002axis = 0 \u3067\u3001\u5217\u65b9\u5411\uff08\u5217\u3054\u3068\uff09\u306b\u6f14\u7b97\u3092\u884c\u3046\u3002\n\n\n\npython3\n>>> \n>>> df_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1)\n0    120200\n1     85500\n2     35250\ndtype: int64\n>>> \n\n>>> # \u5f97\u3089\u308c\u305f\u8a08\u7b97\u7d50\u679c\u3092\u3001df_3[ \u65b0\u8a2d\u30ab\u30e9\u30e0\u540d ] \u306b\u4ee3\u5165\u3057\u3066\u3001\u683c\u7d0d\u3059\u308b\n>>>\n>>> df_3['apply_new_col'] = df_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col\n0  100  1200       120200  120001         120200\n1  100   853       482220  481093          85500\n2  250   139        48927   48234          35250\n>>> \n\n\n\n\uff08 \u4ee5\u4e0b\u3067\u3082\u3067\u304d\u308b \uff09\n\n\npython3\n>>> f = lambda x: x['A'] * x ['B'] + 2*x['A'] \n>>> f = lambda x: x['A'] * x ['B'] + 2*x['A']\n>>> print(f)\n<function <lambda> at 0x103035d90>\n>>> \n>>> import types\n>>> print(type(f))\n<class 'function'>\n>>> \n>>> \n>>> df_3['apply_new_col_2'] = df_3.apply(f, axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2\n0  100  1200       120200  120001         120200           120200\n1  100   853       482220  481093          85500            85500\n2  250   139        48927   48234          35250            35250\n>>> \n>>> \n>>> df_3['apply_new_col'] == df_3['apply_new_col_2']\n0    True\n1    True\n2    True\ndtype: bool\n>>> \n\n\n\n\napply( \u95a2\u6570\u30ea\u30c6\u30e9\u30eb lambda\u5f0f \uff09\u306f\u3001DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u306a\u304b\u304b\u3089\u3001\u7279\u5b9a\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u884c\uff08 row \uff09\u3060\u3051\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u7279\u5b9a\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u884c\uff08 row \uff09\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u307f\u308b\n\n\u4eca\u5ea6\u306f\u3001\u672c\u8a18\u4e8b\u306e\u4e0b\u306e\u65b9\u3067\u5f15\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u300c\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u300d\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3001\n\u3042\u308bDataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u884c\u306e\u3046\u3061\u3001\uff08'A'\u5217 \u00d7 'B\u5217' + 2*'A\u5217'\uff09\u306e\u8a08\u7b97\u7d50\u679c\u304c\u3001 \u300cA * B + 2*A\u300d\u5217 \u306b \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u884c\u3060\u3051 \u3092 \u62bd\u51fa\u3059\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\npython3\n>>> df_3[df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n>>> \n>>> row_filter_boolean = df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']\n\n>>> print(row_filter_boolean)\n0    True\n1    True\n2    True\ndtype: bool\n>>> \n>>> df_3[row_filter_boolean]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n\n\n\n\u4e0a\u8a18\u306e\u5b9f\u884c\u4f8b\u3067\u306f\u3001\u8abf\u3079\u305f DataFrame \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306e\u884c\u304c\u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u3002\n\n\n\u6b21\u306b\u30012\u884c\u76ee\u30683\u884c\u76ee\u304c\u3053\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304f\u306a\u308b\u3088\u3046, 3\u5217\u76ee\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u3066\u304b\u3089\u3001\u884c\u3063\u3066\u307f\u308b\u3002\n\n\npython3\n>>> \n>>> df_3.ix[1:2, 'A'] \n1    564\n2    347\nName: A, dtype: int64\n>>> \n>>> # 2\u884c\u76ee\u3068\uff13\u884c\u76ee\u306eA\u5217\u306e\u5024\u3092\u5909\u66f4\n>>> df_3.ix[1:2, 'A'] = [100, 250]\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  100   853       482220  481093\n2  250   139        48927   48234\n>>> \n\n\n\n\u4eca\u5ea6\u306f\u3001\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\uff11\u884c\u76ee\u3060\u3051\u304c\u62bd\u51fa\u3055\u308c\u305f\u3002\n\n\npython3\n>>> \n>>> df_3[df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n>>>\n\n\n\n\n\u3010 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \uff11 \u3011\n\n\nStatsFragments \uff082014/11/15\uff09 \u300cPython pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u4e2d\u7de8>\u300d \n\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u306f DataFrame \u3060\u3051\u3067\u3002\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'N1': [1, 2, 3, 4, 5, 6],\n                  'N2': [10, 20, 30, 40, 50, 60],\n                  'N3': [6, 5, 4, 3, 2, 1],\n                  'F1': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6],\n                  'F2': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6],\n                  'S1': ['A', 'b', 'C', 'D', 'E', 'F'],\n                  'S2': ['A', 'X', 'X', 'X', 'E', 'F'],\n                  'D1': pd.date_range('2014-11-01', freq='D', periods=6)},\n                 index=pd.date_range('2014-11-01', freq='M', periods=6),\n                 columns=['N1', 'N2', 'N3', 'F1', 'F2', 'S1', 'S2', 'D1'])\n\ndf\n#             N1  N2  N3   F1   F2 S1 S2         D1\n# 2014-11-30   1  10   6  1.1  1.1  A  A 2014-11-01\n# 2014-12-31   2  20   5  2.2  2.2  b  X 2014-11-02\n# 2015-01-31   3  30   4  3.3  3.3  C  X 2014-11-03\n# 2015-02-28   4  40   3  4.4  4.4  D  X 2014-11-04\n# 2015-03-31   5  50   2  5.5  5.5  E  E 2014-11-05\n# 2015-04-30   6  60   1  6.6  6.6  F  F 2014-11-06\n\n\u5404\u884c \u306e\u5024\u306b\u95a2\u6570\u9069\u7528\u3057\u3066\u9078\u629e\u3057\u305f\u3044\u3068\u304d\u306f apply\u3002apply \u306b\u6e21\u3059\u95a2\u6570\u306f \u884c \u3082\u3057\u304f\u306f \u5217\u3092 Series \u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3067\u304d\u308b\u3082\u306e\u3067\u306a\u3044\u3068\u30c0\u30e1\u3002\napply \u3067\u306e\u95a2\u6570\u306e\u9069\u7528\u65b9\u5411\u306f axis \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6c7a\u3081\u308b\u3002\naxis=0 : \u5404\u5217\u3078\u306e\u95a2\u6570\u9069\u7528\naxis=1 : \u5404\u884c\u3078\u306e\u95a2\u6570\u9069\u7528\n\"N1\" \u30ab\u30e9\u30e0\u3068 \"N2\" \u30ab\u30e9\u30e0\u306e\u7a4d\u304c 100 \u3092\u8d85\u3048\u308b\u884c\u3060\u3051\u3092\u30d5\u30a3\u30eb\u30bf\u3059\u308b\u5834\u5408\u3001\n\ndf.apply(lambda x: x['N1'] * x['N2'], axis=1)\ndf.apply(lambda x: x['N1'] * x['N2'], axis=1) > 100\ndf[df.apply(lambda x: x['N1'] * x['N2'], axis=1) > 100]\n\n\n\n\n\n\u3067\u306f\u6b21\u306b\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001Numpy.mean \u30e1\u30bd\u30c3\u30c9\u3092 apply \u306b\u6e21\u3057\u3066\u3001\u884c\u65b9\u5411\u306b\u4e00\u62ec\u9069\u7528\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002\n\n>>> \n>>> df_3\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>>\n>>> \n>>> import numpy\n>>> numpy.mean\n<function mean at 0x1010ee048>\n>>> \n>>> import numpy as np\n>>> df_3.apply(np.mean, axis=1)\n0     80316.833333\n1    189211.000000\n2     28008.333333\ndtype: float64\n>>> \n>>> df_3['mean_apply_calc'] = df_3.apply(np.mean, axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  mean_apply_calc  \n0   80316.833333     80316.833333  \n1  189211.000000    189211.000000  \n2   28008.333333     28008.333333  \n>>> \n\n\n\u4eca\u5ea6\u306f\u3001\u5217\u65b9\u5411\u306b np.mean \u30e1\u30bd\u30c3\u30c9\u3092\u9069\u7528\u3057\u3066\u307f\u308b\uff08apply\u30e1\u30bd\u30c3\u30c9 \u306e axis\u5f15\u6570\u3092 0 \u306b\u8a2d\u5b9a\uff09\n\n\npython3\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  mean_apply_calc  \n0   80316.833333     80316.833333  \n1  189211.000000    189211.000000  \n2   28008.333333     28008.333333  \n>>> \n>>> df_3.apply(np.mean, axis=0)\nA                     150.000000\nB                     730.666667\nA * B + 2*A        217115.666667\nF                  216442.666667\napply_new_col       80316.666667\napply_new_col_2     80316.666667\nmean                99178.722222\nmean_apply_calc     99178.722222\ndtype: float64\n>>> \n\n\n\n\u884c\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u5217\u306b\u683c\u7d0d\u3057\u3066\u307f\u308b\u3002\n\n\nkaiyori 1.1 documentation \u00bb \u307e\u3068\u3081\uff08\u30ab\u30c6\u30b4\u30ea\uff09\u00bb 5. \u3010pandas\u3011\u95a2\u9023\n\n\n\uff08 \u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u300c\u5404\u884c\u306e\u5e73\u5747\u300d\u306e\u90e8\u5206 \uff09\n>>> \n>>> df_3.mean(1)\n0     80316.833333\n1    189211.000000\n2     28008.333333\ndtype: float64\n>>> \n\n>>> \n>>> df_3['mean'] = df_3.mean(1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>> \n>>> \n>>> df_3.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3 entries, 0 to 2\nData columns (total 7 columns):\nA                  3 non-null int64\nB                  3 non-null int64\nA * B + 2*A        3 non-null int64\nF                  3 non-null int64\napply_new_col      3 non-null int64\napply_new_col_2    3 non-null int64\nmean               3 non-null float64\ndtypes: float64(1), int64(6)\nmemory usage: 192.0 bytes\n>>> \n\n\n\u65b0\u3057\u304f\u4f5c\u6210\u3059\u308b\u5217\u306b\u8a08\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u3084\u308a\u65b9\u3068\u3057\u3066\u3001\u8a08\u7b97\u7d50\u679c\u3092\u3001\u72ec\u7acb\u3057\u305f DataFrame.Series\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 or DataFrame.DataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u3066\u3001\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\uff08\u8a08\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3055\u305b\u305f\u3044\uff09DataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u306b\u8ffd\u8a18\uff08append\uff09\u3059\u308b\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\uff08 df_object['new_col_name'] = \u65e2\u5b58\u5217\u3092\u7528\u3044\u305f\u8a08\u7b97\u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9 \uff09\n\uff08 \u53c2\u8003 \uff09\n\n\u305f\u306e\u3057\u3044Python\u300cPandas.DataFrame\u306b\u884c\u3084\u5217\u3092\u8ffd\u52a0\u3059\u308b\u300d\n\n\n\n\u8ffd\u52a0\u3059\u308b\u5217\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\nc = pd.Series([5,6],index=['00','11'],name='22')\n#d\u306e\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\u3066\u304b\u3089\u3001c\u3092\u8ffd\u52a0\u3057\u3066\u3082\u3069\u3059\nd.T.append(c).T\n\n\n\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3001\u3084\u3063\u3066\u307f\u308b\u3002\n\n\npython3\n>>> \n>>> tmp_list = list(df_3.mean(1))\n>>> print(type(tmp_list))\n<class 'list'>\n>>> \n>>> print(tmp_list)\n[80316.833333333343, 189211.0, 28008.333333333336]\n>>> \n>>> tmp_series = pd.Series(tmp_list, index=df_3.index, name='mean_2')\n>>>\n>>> print(type(tmp_series))\n<class 'pandas.core.series.Series'>\n>>> \n>>> print(tmp_series)\n0     80316.833333\n1    189211.000000\n2     28008.333333\nName: mean_2, dtype: float64\n>>> \n>>> df_3.T.append(tmp_series).T\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>> \n\n>>> \n>>> df_4 = df_3.T.append(tmp_series).T\n>>> print(df_4)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n\n\n\n\n\u7d9a\u3051\u3066\u3001\u4eca\u5ea6\u306f \u5217\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u884c\u306b\u683c\u7d0d\u3059\u308b\n\n\uff08 \u53c2\u8003 \uff09\n\n\u305f\u306e\u3057\u3044Python\u300cPandas.DataFrame\u306b\u884c\u3084\u5217\u3092\u8ffd\u52a0\u3059\u308b\u300d\n\n\n\n#\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\nd = pd.DataFrame({'a':[1,2],'b':[3,4]},index=['00','11'])\n\n#\u8ffd\u52a0\u7528\u306e\u884c\u3092\u3001Series\u3067\u4f5c\u6210\ns = pd.Series([2,3],index=['a','b'],name='22')\n>\n>#d\u306b\u8ffd\u52a0\nd.append(d)\n\n\n\n\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3001\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n>>> \n>>> df_3.columns\nIndex(['A', 'B', 'A * B + 2*A', 'F', 'apply_new_col', 'apply_new_col_2',\n       'mean'],\n      dtype='object')\n>>> \n>>> tmp2_list = list(df_3.mean(0))\n\n>>> print(type(tmp2_list))\n<class 'list'>\n>>> \n>>> print(tmp2_list)\n[150.0, 730.66666666666663, 217115.66666666666, 216442.66666666666, 80316.666666666672, 80316.666666666672, 99178.722222222204]\n>>> \n>>> tmp2_series = pd.Series(tmp2_list, index=df_3.columns, name='3') \n>>> \n>>> print(tmp2_series)\nA                     150.000000\nB                     730.666667\nA * B + 2*A        217115.666667\nF                  216442.666667\napply_new_col       80316.666667\napply_new_col_2     80316.666667\nmean                99178.722222\nName: 3, dtype: float64\n>>>\n>>> df_4.append(tmp2_series)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n>>> print(df_4)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n>>> df_5 = df_4.append(tmp2_series)\n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n\n\n\npandas.append\u30e1\u30bd\u30c3\u30c9 \u4ee5\u5916\u306b\u3001pandas.concat\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u6f14\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305fpd.Series\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092\u683c\u7d0d\u5148\u306e DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9023\u7d50\u3059\u308b\u65b9\u6cd5\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\npd.concat \u3092\u4f7f\u3063\u305f\u3084\u308a\u65b9\n\n\n\u884c\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u5217\u306b\u683c\u7d0d\u3059\u308b\n\n\uff08 \u53c2\u8003 \uff09\n\nhik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/03/09\uff09\u300cPython Pandas\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u521d\u6b69\u307e\u3068\u3081 \u2212 \u524d\u534a\uff1a\u30c7\u30fc\u30bf\u4f5c\u6210\uff06\u64cd\u4f5c\u7de8\u300d\n\n\n\n# \u5217\u306e\u8ffd\u52a0\n# Score1\u3001Score2\u306b\u52a0\u3048\u3066\u3001Score3\u306e\u5217\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n# \u8ffd\u52a0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u540c\u58eb\u306e\u7d50\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\n\ndf_addition_col =\\\n   pd.DataFrame([[120,160,100,180,110,80]]).T #df_sample\u3068\u540c\u3058\u884c\u6570\u3092\u6301\u3064DF\u3092\u4f5c\u6210\n\ndf_addition_col.columns =[\"score3\"] #\u5217\u540d\u306f\u7d50\u5408\u5f8c\u306b\u3082\u305d\u306e\u307e\u307e\u4f7f\u308f\u308c\u308b\ndf_addition_col.index   = [11,12,13,14,15,16] \n        #\u6ce8\u610f\uff01\uff01 pandas.concat\u306f\u7d50\u5408\u3059\u308b\u3082\u306e\u540c\u58eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u540c\u3058\u69cb\u9020\u3067\u306a\u3044\u3068\u3001\u601d\u3063\u305f\u3088\u3046\u306a\u4f5c\u7528\u3092\u3057\u307e\u305b\u3093\uff01\uff08\u5f8c\u8ff0)\npd.concat([df_sample,df_addition_col],axis=1) #axis=1\u306f\u6a2a\u65b9\u5411\u306e\u7d50\u5408\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\n\n\u3053\u306e\u65b9\u6cd5\u3067\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\npython3\n>>> new_tmp = list(df_5.mean(1))\n>>> \n>>> print(new_tmp)\n[80316.833333333343, 189211.0, 28008.333333333336, 99178.722222222219]\n>>>\n\n>>> new_tmp_series = pd.Series(new_tmp, index=df_5.index, name='mean_3') # pd.DataFrame(new_tmp, ...) \u3067\u306a\u304f\u3001pd.Series(new_tmp, ...) \u3067OK\n>>> print(type(new_tmp_series))\n<class 'pandas.core.series.Series'>\n>>> \n>>> pd.concat([df_5, new_tmp_series], axis=1)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2         mean_3  \n0    120200.000000   80316.833333   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN   99178.722222  \n>>> \n\n\n\n\u3082\u3068\u306e df_5\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3002\n\n\uff08df_5\u306e\u30b3\u30d4\u30fc\u306b\u5bfe\u3057\u3066\u7d50\u5408\u3057\u305f\u306e\u3067\u3001\u7d50\u679c\u3092 df_6 \u306a\u3069\u306e\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u306a\u3044\u3068\u6d88\u3048\u3066\u3057\u307e\u3046\uff09\n\npython3\n>>> \n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n\n\n\n\uff08 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306b\u5fe0\u5b9f\u306b\u3001pandas.Series \u3067\u306a\u304f\u3001pandas.DataFrame \u3092\u7d50\u5408\u3055\u305b\u3066\u307f\u308b \uff09\n\n\npython3\n>>> \n>>> new_tmp_df = pd.DataFrame(new_tmp, index=df_5.index, columns=[\"mean_3\"])\n>>> print(type(new_tmp_df))\n<class 'pandas.core.frame.DataFrame'>\n>>> \n>>> print(new_tmp_df)\n          mean_3\n0   80316.833333\n1  189211.000000\n2   28008.333333\n3   99178.722222\n>>> \n>>> pd.concat([df_5, new_tmp_df], axis=1)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2         mean_3  \n0    120200.000000   80316.833333   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN   99178.722222  \n>>> \n\n\n\n\u3082\u3068\u306e df_5\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3002\uff08df_5\u306e\u30b3\u30d4\u30fc\u306b\u5bfe\u3057\u3066\u7d50\u5408\u3057\u305f\u306e\u3067\u3001\u7d50\u679c\u3092 df_6 \u306a\u3069\u306e\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u306a\u3044\u3068\u6d88\u3048\u3066\u3057\u307e\u3046\uff09\n\npython3\n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000\n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n\n\n\n\n\u3053\u306e\u3084\u308a\u65b9\u3067\u3001\u6b21\u306f\u3001\u5217\u65b9\u5411\u306b\u6f14\u7b97\u3057\u305f\u5024\u3092\u3001\u8a08\u7b97\u5143\u306e DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u306e\u65b0\u3057\u3044\u884c\u306b\u683c\u7d0d\u3059\u308b\n\n\nhik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/03/09\uff09\u300cPython Pandas\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u521d\u6b69\u307e\u3068\u3081 \u2212 \u524d\u534a\uff1a\u30c7\u30fc\u30bf\u4f5c\u6210\uff06\u64cd\u4f5c\u7de8\u300d\n\n\n\n\u884c\u306e\u8ffd\u52a0\n\n\u8ffd\u52a0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u540c\u58eb\u306e\u7d50\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\ndf_sample\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u300c17\u300d\u3092\u3082\u3064\u30ec\u30b3\u30fc\u30c9\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3092\u60f3\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\ndf_addition_row =\\\n   pd.DataFrame([[\"day1\",\"A\",100,180]])  #df_sample\u3068\u540c\u3058\u5217\u69cb\u9020\u3092\u6301\u3064DF\u3092\u4f5c\u6210\ndf_addition_row.columns =[\"day_no\",\"class\",\"score1\",\"score2\"]  #\u540c\u3058\u5217\u540d\u3092\u4ed8\u3051\u308b\ndf_addition_row.index   =[17] #\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3075\u308b\n\npd.concat([df_sample,df_addition_row],axis=0)  #\u7d50\u5408\u3092\u884c\u3046 =rbind\n       # \u7b2c\u4e00\u5f15\u6570\uff1a\u7d50\u5408\u3059\u308bDF\u3092[]\u8868\u8a18\u3067\u6307\u5b9a\u3059\u308b\u3002\n   \u3000 # \u7b2c\u4e8c\u5f15\u6570\uff1aAxis=0\u3067\u7e26\u65b9\u5411\u306e\u7d50\u5408\u3067\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\n\n\n\n\uff08\u65b9\u6cd5\uff14\uff09\n\n\nDaraFrame.pipe \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\n\n\uff08 \u53c2\u8003 \uff09\n\nLibrabuch\uff082015-07-24\uff09\u300cPandas 0.16.2 \u3067\u8ffd\u52a0\u3055\u308c\u305f pipe() \u306e\u4f7f\u3044\u65b9\u300d\n\n\n\n\u3010 \u305d\u306e\u4ed6\u3001\u53c2\u8003 \u3011\n\n\n\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11 \u306e\u4ee5\u4e0b\u306e\u90e8\u5206\u3082\u3001\u5229\u7528\u5834\u9762\u304c\u591a\u3044\u3068\u611f\u3058\u3066\u3044\u307e\u3059\u3002\n\nStatsFragments \uff082014/11/15\uff09 \u300cPython pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u4e2d\u7de8>\u300d \n\n\u30e9\u30d9\u30eb\u304c\u91cd\u8907\u3057\u305f\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3057\u305f\u3044\n2015/05/06\u4fee\u6b63 v0.16\u5411\u3051\u306e\u5185\u5bb9\u306b\u5909\u66f4\n\u3053\u308c\u306f v0.16 \u4ee5\u964d\u3067\u3042\u308c\u3070\u7c21\u5358\u3002\u4f8b\u793a\u306e\u305f\u3081 index \u306b \"A\" \u304c3\u3064\u91cd\u8907\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3002\n\ndf_dup = pd.DataFrame({'N1': [1, 2, 3, 4],\n                      'N2': [6, 5, 4, 3],\n                      'S1': ['A', 'B', 'C', 'D']},\n                     index=['A', 'A', 'A', 'B'])\ndf_dup\n#    N1  N2 S1\n# A   1   6  A\n# A   2   5  B\n# A   3   4  C\n# B   4   3  D\nIndex.duplicated() \u3067 Index \u306e\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u304c\u308f\u304b\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u5217\u9078\u629e\u3059\u308c\u3070\u3088\u3044\u3002\u91cd\u8907\u3057\u3066\u3044\u308b\u5024\u304c True \u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081 ~ \u3067\u8ad6\u7406\u5426\u5b9a\u3092\u3068\u3063\u3066\u884c\u9078\u629e\u3059\u308b\u3068\u3001\n\ndf_dup.index.duplicated()\n# array([False,  True,  True, False], dtype=bool)\n\ndf_dup[~df_dup.index.duplicated()] \n#    N1  N2 S1\n# A   1   6  A\n# B   4   3  D\n\n\n\u3053\u306e\u3068\u304d\u3001\u5404\u91cd\u8907\u30b0\u30eb\u30fc\u30d7\u306e\u4e00\u756a\u6700\u521d\u306e\u30c7\u30fc\u30bf\u306f\u524a\u9664\u3055\u308c\u306a\u3044\u3002\u3053\u306e\u6319\u52d5\u306f take_last \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5909\u66f4\u3067\u304d\u308b\u3002\ntake_last=False (Default) : \u91cd\u8907\u3057\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092\u6b8b\u3059\ntake_last=True : \u91cd\u8907\u3057\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u6700\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u6b8b\u3059\u3002\ndf_dup[~df_dup.index.duplicated(take_last=True)]\n#    N1  N2 S1\n# A   3   4  C\n# B   4   3  D\n\n\u3044\u3084\u3044\u3084\u91cd\u8907\u30c7\u30fc\u30bf\u306f\u5168\u524a\u9664\u3057\u305f\u3044\u3093\u3067\u3059\u3051\u3069\uff1f\u3068\u3044\u3046\u5834\u5408\u306f Dummy \u5217\u3067 groupby \u3057\u3066 filter\u3002\n\ndf_dup.groupby([\"Dummy\"]).filter(lambda x:x.shape[0] == 1)\n#    N1  N2 S1 Dummy\n# B   4   3  D     B\n\ndf_dup.groupby([\"Dummy\"]).filter(lambda x:x.shape[0] == 1)[['N1', 'N2', 'S1']]\n#    N1  N2 S1\n# B   4   3  D\n\n\n\u88dc\u8db3 \u76f4\u611f\u7684\u3067\u306a\u3044\u306a\u3001\u3068\u601d\u3063\u305f\u65b9\u304c\u591a\u3044\u3068\u601d\u3046\u304c \u958b\u767a\u8005\u3067\u3082\u30bf\u30b9\u30af\u3068\u3057\u3066\u306f\u8a8d\u8b58\u3057\u3066\u3044\u308b \u306e\u3067\u3001\u3001\u3001\u3002\n\u30e9\u30d9\u30eb\u306b\u95a2\u6570\u9069\u7528\u3057\u3066\u9078\u629e\u3057\u305f\u3044\npd.Index.map\u3002\u305f\u3068\u3048\u3070 \u5927\u6587\u5b57\u306e \"N\" \u304b\u3089\u59cb\u307e\u308b\u30e9\u30d9\u30eb\u540d\u306e\u307f\u62bd\u51fa\u3057\u305f\u3044\u306a\u3089\n\ndf.columns.map(lambda x: x.startswith('N'))\n# array([ True,  True,  True, False, False, False, False, False], dtype=bool)\n\ndf.ix[:, df.columns.map(lambda x: x.startswith('N'))]\n#             N1  N2  N3\n# 2014-11-30   1  10   6\n# 2014-12-31   2  20   5\n# 2015-01-31   3  30   4\n# 2015-02-28   4  40   3\n# 2015-03-31   5  50   2\n# 2015-04-30   6  60   1\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067 map \u3092\u4f7f\u3048\u3070 index, columns \u306e\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066\u3042\u3089\u3086\u308b\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u30c7\u30fc\u30bf\u9078\u629e\u3067\u304d\u308b\u3002\n\u3055\u3089\u306b\u3001\u3088\u304f\u4f7f\u3046\u3068\u601d\u308f\u308c\u308b\u30b1\u30fc\u30b9\u3067\u306f\u3088\u308a\u7c21\u4fbf\u306a\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n2015/05/06\u8ffd\u8a18 v0.16.1 \u3067 Index \u306b\u3082 .str \u30a2\u30af\u30bb\u30b5\u304c\u8ffd\u52a0\u3055\u308c\u3001\u6587\u5b57\u5217\u51e6\u7406\u95a2\u6570\u3092\u76f4\u63a5\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u4e0a\u306e\u4f8b\u306f df.ix[:, df.columns.str.startswith('N')] \u3068\u3082\u66f8\u3051\u308b\u3002.str \u30a2\u30af\u30bb\u30b5\u306b\u3064\u3044\u3066\u306f\u4ee5\u964d\u306e\u8a18\u8f09\u3092\u53c2\u7167\u3002\n\u30e9\u30d9\u30eb\u3092\u30bd\u30fc\u30c8\u3057\u3066\u9078\u629e\u3057\u305f\u3044\n\npd.Index.order\u3002columns \u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u66ff\u3048\u3066\u3001\u524d\u304b\u30893\u3064\u3092\u53d6\u5f97\u3057\u305f\u3051\u308c\u3070\u3001\n\ndf.columns.order()\n# Index([u'D1', u'F1', u'F2', u'N1', u'N2', u'N3', u'S1', u'S2'], dtype='object')\n\ndf.columns.order()[:3]\n# Index([u'D1', u'F1', u'F2'], dtype='object')\n\ndf[df.columns.order()[:3]]\n#                    D1   F1   F2\n# 2014-11-30 2014-11-01  1.1  1.1\n# 2014-12-31 2014-11-02  2.2  2.2\n# 2015-01-31 2014-11-03  3.3  3.3\n# 2015-02-28 2014-11-04  4.4  4.4\n# 2015-03-31 2014-11-05  5.5  5.5\n# 2015-04-30 2014-11-06  6.6  6.6\n\n\n\n\n### \u4f8b\u3068\u3057\u3066\u3001\u300e A\u5217 \u00d7 B\u5217 + 2*A\u5217 \u300f\u306e \u8a08\u7b97\u7d50\u679c\u3092\u3001\u300cA * B + 2*A\u300d\u5217 \u306b \u683c\u7d0d\u3059\u308b\u4f5c\u696d\u30b1\u30fc\u30b9\u3092\u3001\u3044\u308d\u3044\u308d\u306a\u65b9\u6cd5\u3067\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n___\n\n###__\uff08\u65b9\u6cd5\uff11\uff09__\n\n```\ndf['A * B + 2*A'] = df['A'] * df['B'] + 2*df['A']\n```\n \n####__\u3067\u884c\u3046\u3084\u308a\u65b9__\n\n\n```{python:python3}\n>>> \n>>> import pandas as pd\n>>> \n>>> data_dict = {'A':[100, 564, 347], 'B':[1200, 853, 139]}\n>>> df = pd.DataFrame(data_dict)\n>>> \n>>> print(type(df))\n<class 'pandas.core.frame.DataFrame'>\n>>> \n>>> print(df)\n     A     B\n0  100  1200\n1  564   853\n2  347   139\n>>> \n>>> print(df['A'])\n0    100\n1    564\n2    347\nName: A, dtype: int64\n>>> \n>>> print(df['B'])\n0    1200\n1     853\n2     139\nName: B, dtype: int64\n>>> \n>>> df['A * B + 2*A'] = df['A'] * df['B'] + 2*df['A']\n```\n\n####__\u51fa\u6765\u3066\u308b :blush:__\n\n```{python:python3}\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n```\n\n___\n\n###__\uff08\u65b9\u6cd5\uff12\uff09__\n####__\u7d9a\u3044\u3066\u3001DataFrame.assign \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\u3092\u898b\u3066\u307f\u307e\u3059\u3002__\n\n####__\uff08 \u53c2\u8003 \uff09__\n\n* [Hatena Blog StatsFragments \uff082015/05/16\uff09\u300cpandas 0.16.0/0.16.1 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u300d](http://sinhrks.hatenablog.com/entry/2015/05/16/124421)\n\n__\uff08 assign\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u69d8\u4e0a\u306e\u7559\u610f\u70b9 \uff09__\n\n* assign()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n* \u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n```{python:python3}\n>>> \n>>> df.assign(D=[10, 11, 12], E=[13, 14, 15])\n     A     B  A * B + 2*A   D   E\n0  100  1200       120200  10  13\n1  564   853       482220  11  14\n2  347   139        48927  12  15\n>>>\n>>> # assign()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n>>> # \u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n>>> df_2 = df.assign(D=[10, 11, 12], E=[13, 14, 15])\n>>> print(df_2)\n     A     B  A * B + 2*A   D   E\n0  100  1200       120200  10  13\n1  564   853       482220  11  14\n2  347   139        48927  12  15\n>>>\n```\n\n#####__assign \u30e1\u30bd\u30c3\u30c9 \u3067\u306f\u3001\u65b0\u3057\u304f\u65b0\u8a2d\u3059\u308b\u5217\u306e\u5024\u3068\u3057\u3066\u3001\u4ed6\u306e\uff08\u4e00\u3064\u3082\u3057\u304f\u306f\u8907\u6570\u306e\uff09\u5217\u3092\u7528\u3044\u305f\u8a08\u7b97\u5f0f\u306e\u7d50\u679c \u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002__\n\n```{python:python3}\n>>> df.assign(F=df['A']*df['B']+1)\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n>>> # assign \u30e1\u30bd\u30c3\u30c9 \u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b df \u3092\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001\u30b3\u30d4\u30fc\u5143\u306e df \u30e1\u30bd\u30c3\u30c9\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u3002\n>>> # \u3053\u306e\u305f\u3081\u3001\u7d50\u679c\u306e\u8fd4\u308a\u5024\u3092\u65b0\u3057\u3044\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u683c\u7d0d\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n>>>\n>>> print(df)\n     A     B  A * B + 2*A\n0  100  1200       120200\n1  564   853       482220\n2  347   139        48927\n>>> \n```\n___\n\n###__\uff08\u65b9\u6cd5\uff13\uff09__\n###__DaraFrame.apply \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9__\n\n\u4eca\u5ea6\u306f\u3001DataFrame\u30af\u30e9\u30b9 \u306e apply \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9\u3067\u3059\u3002\n\n\u4f5c\u696d\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n___\n\n* apply( ) \u306b\u3001\u65e2\u5b58\u306e\u5217\u3092\u7528\u3044\u305f\u6f14\u7b97\u624b\u7d9a\u304d\u3092\u8a18\u8ff0\u3057\u305f\u30e1\u30bd\u30c3\u30c9 \u3092\u6e21\u3057\u3066\u3001\u5404\u884c\u3054\u3068\u306b\u3001\u65e2\u5b58\u30ab\u30e9\u30e0\u3092\u7528\u3044\u305f\u6f14\u7b97\u3092\u5b9f\u884c\n* \u5404\u884c\u3054\u3068\u306b\u3001\u6f14\u7b97\u5b9f\u884c\u3057\u3066\u5f97\u3089\u308c\u305f\u5024\u3092\u3001\u305d\u306e\u884c\uff08\u5404\u884c\uff09\u306e\u65b0\u8a2d\u30ab\u30e9\u30e0\u306b\u683c\u7d0d\u3059\u308b\n\n___\n\n\n\u305d\u308c\u3067\u306f\u3001apply( ) \u306b\u3001\uff08\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5b9a\u7fa9\u6e08\u307f\u306e\u30ab\u30e9\u30e0\u3092\u6301\u3061\u3044\u305f\u6f14\u7b97\u5f0f \uff1d \uff09\u300c'A'\u5217\uff08\u306e\u5024\uff09 \u00d7'B'\u5217 + 2 \u00d7 'A'\u5217\u300d \u3092\u6e21\u3057\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n__\uff08 apply\u30e1\u30bd\u30c3\u30c9\u306e\u4ed5\u69d8 \uff09__\nDataFrame.appply \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5f15\u6570: axis = 1 \u3067\u3001\u884c\u65b9\u5411\u306b\uff08\u884c\u3054\u3068\u306b\uff09\u6f14\u7b97\u3092\u884c\u3044\u3001axis = 0 \u3067\u3001\u5217\u65b9\u5411\uff08\u5217\u3054\u3068\uff09\u306b\u6f14\u7b97\u3092\u884c\u3046\u4ed5\u69d8\u3002\n\n\n```{python:DataFrame.apply\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u305f\uff08\u65e2\u5b58\u30ab\u30e9\u30e0\u3092\u5143\u306b\u7b97\u51fa\u3057\u305f\u5024\u3092\u683c\u7d0d\u3059\u308b\uff09\u65b0\u8a2d\u30ab\u30e9\u30e0\u306e\u8ffd\u52a0}\ndf_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1) # axis = 1 \u3067\u3001\u884c\u65b9\u5411\u306b\uff08\u884c\u3054\u3068\u306b\uff09\u6f14\u7b97\u3092\u884c\u3046\u3002axis = 0 \u3067\u3001\u5217\u65b9\u5411\uff08\u5217\u3054\u3068\uff09\u306b\u6f14\u7b97\u3092\u884c\u3046\u3002\n```\n\n```{python:python3}\n>>> \n>>> df_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1)\n0    120200\n1     85500\n2     35250\ndtype: int64\n>>> \n\n>>> # \u5f97\u3089\u308c\u305f\u8a08\u7b97\u7d50\u679c\u3092\u3001df_3[ \u65b0\u8a2d\u30ab\u30e9\u30e0\u540d ] \u306b\u4ee3\u5165\u3057\u3066\u3001\u683c\u7d0d\u3059\u308b\n>>>\n>>> df_3['apply_new_col'] = df_3.apply(lambda x: x['A'] * x ['B'] + 2*x['A'], axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col\n0  100  1200       120200  120001         120200\n1  100   853       482220  481093          85500\n2  250   139        48927   48234          35250\n>>> \n```\n\n#####__\uff08 \u4ee5\u4e0b\u3067\u3082\u3067\u304d\u308b \uff09__\n\n```{python:python3}\n>>> f = lambda x: x['A'] * x ['B'] + 2*x['A'] \n>>> f = lambda x: x['A'] * x ['B'] + 2*x['A']\n>>> print(f)\n<function <lambda> at 0x103035d90>\n>>> \n>>> import types\n>>> print(type(f))\n<class 'function'>\n>>> \n>>> \n>>> df_3['apply_new_col_2'] = df_3.apply(f, axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2\n0  100  1200       120200  120001         120200           120200\n1  100   853       482220  481093          85500            85500\n2  250   139        48927   48234          35250            35250\n>>> \n>>> \n>>> df_3['apply_new_col'] == df_3['apply_new_col_2']\n0    True\n1    True\n2    True\ndtype: bool\n>>> \n```\n___\n\n###__apply( \u95a2\u6570\u30ea\u30c6\u30e9\u30eb lambda\u5f0f \uff09\u306f\u3001DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u306a\u304b\u304b\u3089\u3001\u7279\u5b9a\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u884c\uff08 row \uff09\u3060\u3051\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002__\n\n####__\u7279\u5b9a\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u884c\uff08 row \uff09\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u307f\u308b__\n\n\u4eca\u5ea6\u306f\u3001\u672c\u8a18\u4e8b\u306e\u4e0b\u306e\u65b9\u3067\u5f15\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u300c\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11\u300d\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3001\n\u3042\u308bDataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u884c\u306e\u3046\u3061\u3001\uff08'A'\u5217 \u00d7 'B\u5217' + 2*'A\u5217'\uff09\u306e\u8a08\u7b97\u7d50\u679c\u304c\u3001 \u300cA * B + 2*A\u300d\u5217 \u306b \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u884c\u3060\u3051 \u3092 \u62bd\u51fa\u3059\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\n```{python:python3}\n>>> df_3[df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n>>> \n>>> row_filter_boolean = df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']\n\n>>> print(row_filter_boolean)\n0    True\n1    True\n2    True\ndtype: bool\n>>> \n>>> df_3[row_filter_boolean]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  564   853       482220  481093\n2  347   139        48927   48234\n>>> \n```\n\n#####__\u4e0a\u8a18\u306e\u5b9f\u884c\u4f8b\u3067\u306f\u3001\u8abf\u3079\u305f DataFrame \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306e\u884c\u304c\u6761\u4ef6\u306b\u5408\u81f4\u3057\u305f\u3002__\n#####__\u6b21\u306b\u30012\u884c\u76ee\u30683\u884c\u76ee\u304c\u3053\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304f\u306a\u308b\u3088\u3046, 3\u5217\u76ee\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u3066\u304b\u3089\u3001\u884c\u3063\u3066\u307f\u308b\u3002__\n\n```{python:python3}\n>>> \n>>> df_3.ix[1:2, 'A'] \n1    564\n2    347\nName: A, dtype: int64\n>>> \n>>> # 2\u884c\u76ee\u3068\uff13\u884c\u76ee\u306eA\u5217\u306e\u5024\u3092\u5909\u66f4\n>>> df_3.ix[1:2, 'A'] = [100, 250]\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n1  100   853       482220  481093\n2  250   139        48927   48234\n>>> \n```\n\n####__\u4eca\u5ea6\u306f\u3001\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\uff11\u884c\u76ee\u3060\u3051\u304c\u62bd\u51fa\u3055\u308c\u305f\u3002__\n\n```{python:python3}\n>>> \n>>> df_3[df_3.apply(lambda x: x['A'] * x['B'] + 2 * x['A'], axis=1) == df_3['A * B + 2*A']]\n     A     B  A * B + 2*A       F\n0  100  1200       120200  120001\n>>>\n```\n___\n\n###__\u3010 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \uff11 \u3011__\n\n* [StatsFragments \uff082014/11/15\uff09 \u300cPython pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u4e2d\u7de8>\u300d ](http://sinhrks.hatenablog.com/entry/2014/11/15/230705)\n\n>\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u306f DataFrame \u3060\u3051\u3067\u3002\n>\n>```\n>import pandas as pd\n>import numpy as np\n>\n>df = pd.DataFrame({'N1': [1, 2, 3, 4, 5, 6],\n>                   'N2': [10, 20, 30, 40, 50, 60],\n>                   'N3': [6, 5, 4, 3, 2, 1],\n>                   'F1': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6],\n>                   'F2': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6],\n>                   'S1': ['A', 'b', 'C', 'D', 'E', 'F'],\n>                   'S2': ['A', 'X', 'X', 'X', 'E', 'F'],\n>                   'D1': pd.date_range('2014-11-01', freq='D', periods=6)},\n>                  index=pd.date_range('2014-11-01', freq='M', periods=6),\n>                  columns=['N1', 'N2', 'N3', 'F1', 'F2', 'S1', 'S2', 'D1'])\n>\n>df\n>#             N1  N2  N3   F1   F2 S1 S2         D1\n># 2014-11-30   1  10   6  1.1  1.1  A  A 2014-11-01\n># 2014-12-31   2  20   5  2.2  2.2  b  X 2014-11-02\n># 2015-01-31   3  30   4  3.3  3.3  C  X 2014-11-03\n># 2015-02-28   4  40   3  4.4  4.4  D  X 2014-11-04\n># 2015-03-31   5  50   2  5.5  5.5  E  E 2014-11-05\n># 2015-04-30   6  60   1  6.6  6.6  F  F 2014-11-06\n>```\n>\n>\u5404\u884c \u306e\u5024\u306b\u95a2\u6570\u9069\u7528\u3057\u3066\u9078\u629e\u3057\u305f\u3044\u3068\u304d\u306f apply\u3002apply \u306b\u6e21\u3059\u95a2\u6570\u306f \u884c \u3082\u3057\u304f\u306f \u5217\u3092 Series \u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3067\u304d\u308b\u3082\u306e\u3067\u306a\u3044\u3068\u30c0\u30e1\u3002\n>apply \u3067\u306e\u95a2\u6570\u306e\u9069\u7528\u65b9\u5411\u306f axis \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6c7a\u3081\u308b\u3002\n>\n>axis=0 : \u5404\u5217\u3078\u306e\u95a2\u6570\u9069\u7528\n>axis=1 : \u5404\u884c\u3078\u306e\u95a2\u6570\u9069\u7528\n>\n>\"N1\" \u30ab\u30e9\u30e0\u3068 \"N2\" \u30ab\u30e9\u30e0\u306e\u7a4d\u304c 100 \u3092\u8d85\u3048\u308b\u884c\u3060\u3051\u3092\u30d5\u30a3\u30eb\u30bf\u3059\u308b\u5834\u5408\u3001\n>\n>>```\n>>df.apply(lambda x: x['N1'] * x['N2'], axis=1)\n>>df.apply(lambda x: x['N1'] * x['N2'], axis=1) > 100\n>>df[df.apply(lambda x: x['N1'] * x['N2'], axis=1) > 100]\n>```\n\n___\n\n###__\u3067\u306f\u6b21\u306b\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u306a\u304f\u3001Numpy.mean \u30e1\u30bd\u30c3\u30c9\u3092 apply \u306b\u6e21\u3057\u3066\u3001\u884c\u65b9\u5411\u306b\u4e00\u62ec\u9069\u7528\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002__\n\n```\n>>> \n>>> df_3\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>>\n>>> \n>>> import numpy\n>>> numpy.mean\n<function mean at 0x1010ee048>\n>>> \n>>> import numpy as np\n>>> df_3.apply(np.mean, axis=1)\n0     80316.833333\n1    189211.000000\n2     28008.333333\ndtype: float64\n>>> \n>>> df_3['mean_apply_calc'] = df_3.apply(np.mean, axis=1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  mean_apply_calc  \n0   80316.833333     80316.833333  \n1  189211.000000    189211.000000  \n2   28008.333333     28008.333333  \n>>> \n```\n\n####__\u4eca\u5ea6\u306f\u3001\u5217\u65b9\u5411\u306b np.mean \u30e1\u30bd\u30c3\u30c9\u3092\u9069\u7528\u3057\u3066\u307f\u308b\uff08apply\u30e1\u30bd\u30c3\u30c9 \u306e axis\u5f15\u6570\u3092 0 \u306b\u8a2d\u5b9a\uff09__\n\n```{python:python3}\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  mean_apply_calc  \n0   80316.833333     80316.833333  \n1  189211.000000    189211.000000  \n2   28008.333333     28008.333333  \n>>> \n>>> df_3.apply(np.mean, axis=0)\nA                     150.000000\nB                     730.666667\nA * B + 2*A        217115.666667\nF                  216442.666667\napply_new_col       80316.666667\napply_new_col_2     80316.666667\nmean                99178.722222\nmean_apply_calc     99178.722222\ndtype: float64\n>>> \n```\n\n###__\u884c\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u5217\u306b\u683c\u7d0d\u3057\u3066\u307f\u308b\u3002__\n\n* [kaiyori 1.1 documentation \u00bb \u307e\u3068\u3081\uff08\u30ab\u30c6\u30b4\u30ea\uff09\u00bb 5. \u3010pandas\u3011\u95a2\u9023](http://oceanmarine.sakura.ne.jp/sphinx/group/group_pandas.html#id28)\n \n#####\uff08 \u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306e\u300c\u5404\u884c\u306e\u5e73\u5747\u300d\u306e\u90e8\u5206 \uff09\n\n```  \n>>> \n>>> df_3.mean(1)\n0     80316.833333\n1    189211.000000\n2     28008.333333\ndtype: float64\n>>> \n\n>>> \n>>> df_3['mean'] = df_3.mean(1)\n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>> \n>>> \n>>> df_3.info()\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 3 entries, 0 to 2\nData columns (total 7 columns):\nA                  3 non-null int64\nB                  3 non-null int64\nA * B + 2*A        3 non-null int64\nF                  3 non-null int64\napply_new_col      3 non-null int64\napply_new_col_2    3 non-null int64\nmean               3 non-null float64\ndtypes: float64(1), int64(6)\nmemory usage: 192.0 bytes\n>>> \n```\n\n####__\u65b0\u3057\u304f\u4f5c\u6210\u3059\u308b\u5217\u306b\u8a08\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u3084\u308a\u65b9\u3068\u3057\u3066\u3001\u8a08\u7b97\u7d50\u679c\u3092\u3001\u72ec\u7acb\u3057\u305f DataFrame.Series\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 or DataFrame.DataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u3066\u3001\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\uff08\u8a08\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3055\u305b\u305f\u3044\uff09DataFrame\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u306b\u8ffd\u8a18\uff08append\uff09\u3059\u308b\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3059\u3002__\n\n\uff08 df_object['new_col_name'] = \u65e2\u5b58\u5217\u3092\u7528\u3044\u305f\u8a08\u7b97\u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9 \uff09\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [\u305f\u306e\u3057\u3044Python\u300cPandas.DataFrame\u306b\u884c\u3084\u5217\u3092\u8ffd\u52a0\u3059\u308b\u300d](http://tanopy.blog79.fc2.com/blog-entry-105.html)\n\n>#\u8ffd\u52a0\u3059\u308b\u5217\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n>\n>```\n>c = pd.Series([5,6],index=['00','11'],name='22')\n>#d\u306e\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\u3066\u304b\u3089\u3001c\u3092\u8ffd\u52a0\u3057\u3066\u3082\u3069\u3059\n>d.T.append(c).T\n>```\n\n####__\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3001\u3084\u3063\u3066\u307f\u308b\u3002__\n\n```{python:python3}\n>>> \n>>> tmp_list = list(df_3.mean(1))\n>>> print(type(tmp_list))\n<class 'list'>\n>>> \n>>> print(tmp_list)\n[80316.833333333343, 189211.0, 28008.333333333336]\n>>> \n>>> tmp_series = pd.Series(tmp_list, index=df_3.index, name='mean_2')\n>>>\n>>> print(type(tmp_series))\n<class 'pandas.core.series.Series'>\n>>> \n>>> print(tmp_series)\n0     80316.833333\n1    189211.000000\n2     28008.333333\nName: mean_2, dtype: float64\n>>> \n>>> df_3.T.append(tmp_series).T\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n\n>>> \n>>> print(df_3)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean  \n0   80316.833333  \n1  189211.000000  \n2   28008.333333  \n>>> \n\n>>> \n>>> df_4 = df_3.T.append(tmp_series).T\n>>> print(df_4)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n```\n___\n\n###__\u7d9a\u3051\u3066\u3001\u4eca\u5ea6\u306f \u5217\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u884c\u306b\u683c\u7d0d\u3059\u308b__\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [\u305f\u306e\u3057\u3044Python\u300cPandas.DataFrame\u306b\u884c\u3084\u5217\u3092\u8ffd\u52a0\u3059\u308b\u300d](http://tanopy.blog79.fc2.com/blog-entry-105.html)\n\n>>````\n>>#\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n>>d = pd.DataFrame({'a':[1,2],'b':[3,4]},index=['00','11'])\n>>\n>>#\u8ffd\u52a0\u7528\u306e\u884c\u3092\u3001Series\u3067\u4f5c\u6210\n>>s = pd.Series([2,3],index=['a','b'],name='22')\n>>>\n>>>#d\u306b\u8ffd\u52a0\n>>d.append(d)\n>>```\n\n###__\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u3001\u3084\u3063\u3066\u307f\u307e\u3059\u3002__\n\n\n```{python\"python3}\n>>> \n>>> df_3.columns\nIndex(['A', 'B', 'A * B + 2*A', 'F', 'apply_new_col', 'apply_new_col_2',\n       'mean'],\n      dtype='object')\n>>> \n>>> tmp2_list = list(df_3.mean(0))\n\n>>> print(type(tmp2_list))\n<class 'list'>\n>>> \n>>> print(tmp2_list)\n[150.0, 730.66666666666663, 217115.66666666666, 216442.66666666666, 80316.666666666672, 80316.666666666672, 99178.722222222204]\n>>> \n>>> tmp2_series = pd.Series(tmp2_list, index=df_3.columns, name='3') \n>>> \n>>> print(tmp2_series)\nA                     150.000000\nB                     730.666667\nA * B + 2*A        217115.666667\nF                  216442.666667\napply_new_col       80316.666667\napply_new_col_2     80316.666667\nmean                99178.722222\nName: 3, dtype: float64\n>>>\n>>> df_4.append(tmp2_series)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n>>> print(df_4)\n     A     B  A * B + 2*A       F  apply_new_col  apply_new_col_2  \\\n0  100  1200       120200  120001         120200           120200   \n1  100   853       482220  481093          85500            85500   \n2  250   139        48927   48234          35250            35250   \n\n            mean         mean_2  \n0   80316.833333   80316.833333  \n1  189211.000000  189211.000000  \n2   28008.333333   28008.333333  \n>>> \n>>> df_5 = df_4.append(tmp2_series)\n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n```\n\n___\n\n###__pandas.append\u30e1\u30bd\u30c3\u30c9 \u4ee5\u5916\u306b\u3001pandas.concat\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u6f14\u7b97\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305fpd.Series\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092\u683c\u7d0d\u5148\u306e DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u9023\u7d50\u3059\u308b\u65b9\u6cd5\u3082\u53ef\u80fd\u3067\u3059\u3002__\n\n###__pd.concat \u3092\u4f7f\u3063\u305f\u3084\u308a\u65b9__\n\n####__\u884c\u65b9\u5411\u306b\u5024\u3092\u6f14\u7b97\u3057\u3066\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u5217\u306b\u683c\u7d0d\u3059\u308b__\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [hik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/03/09\uff09\u300cPython Pandas\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u521d\u6b69\u307e\u3068\u3081 \u2212 \u524d\u534a\uff1a\u30c7\u30fc\u30bf\u4f5c\u6210\uff06\u64cd\u4f5c\u7de8\u300d](http://qiita.com/hik0107/items/d991cc44c2d1778bb82e)\n\n>>```\n>># \u5217\u306e\u8ffd\u52a0\n>># Score1\u3001Score2\u306b\u52a0\u3048\u3066\u3001Score3\u306e\u5217\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n>># \u8ffd\u52a0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u540c\u58eb\u306e\u7d50\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n>>\n>>\n>>df_addition_col =\\\n>>    pd.DataFrame([[120,160,100,180,110,80]]).T #df_sample\u3068\u540c\u3058\u884c\u6570\u3092\u6301\u3064DF\u3092\u4f5c\u6210\n>>\n>>df_addition_col.columns =[\"score3\"] #\u5217\u540d\u306f\u7d50\u5408\u5f8c\u306b\u3082\u305d\u306e\u307e\u307e\u4f7f\u308f\u308c\u308b\n>>df_addition_col.index   = [11,12,13,14,15,16] \n>>         #\u6ce8\u610f\uff01\uff01 pandas.concat\u306f\u7d50\u5408\u3059\u308b\u3082\u306e\u540c\u58eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u540c\u3058\u69cb\u9020\u3067\u306a\u3044\u3068\u3001\u601d\u3063\u305f\u3088\u3046\u306a\u4f5c\u7528\u3092\u3057\u307e\u305b\u3093\uff01\uff08\u5f8c\u8ff0)\n>>pd.concat([df_sample,df_addition_col],axis=1) #axis=1\u306f\u6a2a\u65b9\u5411\u306e\u7d50\u5408\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n>>```\n\n####__\u3053\u306e\u65b9\u6cd5\u3067\u884c\u3063\u3066\u307f\u307e\u3059\u3002__\n\n```{python:python3}\n>>> new_tmp = list(df_5.mean(1))\n>>> \n>>> print(new_tmp)\n[80316.833333333343, 189211.0, 28008.333333333336, 99178.722222222219]\n>>>\n\n>>> new_tmp_series = pd.Series(new_tmp, index=df_5.index, name='mean_3') # pd.DataFrame(new_tmp, ...) \u3067\u306a\u304f\u3001pd.Series(new_tmp, ...) \u3067OK\n>>> print(type(new_tmp_series))\n<class 'pandas.core.series.Series'>\n>>> \n>>> pd.concat([df_5, new_tmp_series], axis=1)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2         mean_3  \n0    120200.000000   80316.833333   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN   99178.722222  \n>>> \n```\n\n####__\u3082\u3068\u306e df_5\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3002__\n\uff08df_5\u306e\u30b3\u30d4\u30fc\u306b\u5bfe\u3057\u3066\u7d50\u5408\u3057\u305f\u306e\u3067\u3001\u7d50\u679c\u3092 df_6 \u306a\u3069\u306e\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u306a\u3044\u3068\u6d88\u3048\u3066\u3057\u307e\u3046\uff09\n\n```{python:python3}\n>>> \n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n```\n\n####__\uff08 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306b\u5fe0\u5b9f\u306b\u3001pandas.Series \u3067\u306a\u304f\u3001pandas.DataFrame \u3092\u7d50\u5408\u3055\u305b\u3066\u307f\u308b \uff09__\n\n```{python:python3}\n>>> \n>>> new_tmp_df = pd.DataFrame(new_tmp, index=df_5.index, columns=[\"mean_3\"])\n>>> print(type(new_tmp_df))\n<class 'pandas.core.frame.DataFrame'>\n>>> \n>>> print(new_tmp_df)\n          mean_3\n0   80316.833333\n1  189211.000000\n2   28008.333333\n3   99178.722222\n>>> \n>>> pd.concat([df_5, new_tmp_df], axis=1)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2         mean_3  \n0    120200.000000   80316.833333   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000  189211.000000  \n2     35250.000000   28008.333333   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN   99178.722222  \n>>> \n```\n\n####\u3082\u3068\u306e df_5\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3002\uff08df_5\u306e\u30b3\u30d4\u30fc\u306b\u5bfe\u3057\u3066\u7d50\u5408\u3057\u305f\u306e\u3067\u3001\u7d50\u679c\u3092 df_6 \u306a\u3069\u306e\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3057\u306a\u3044\u3068\u6d88\u3048\u3066\u3057\u307e\u3046\uff09\n\n```{python:python3}\n>>> print(df_5)\n     A            B    A * B + 2*A              F  apply_new_col  \\\n0  100  1200.000000  120200.000000  120001.000000  120200.000000   \n1  100   853.000000  482220.000000  481093.000000   85500.000000   \n2  250   139.000000   48927.000000   48234.000000   35250.000000   \n3  150   730.666667  217115.666667  216442.666667   80316.666667   \n\n   apply_new_col_2           mean         mean_2  \n0    120200.000000   80316.833333   80316.833333  \n1     85500.000000  189211.000000  189211.000000\n2     35250.000000   28008.333333   28008.333333  \n3     80316.666667   99178.722222            NaN  \n>>> \n```\n\n___\n\n####__\u3053\u306e\u3084\u308a\u65b9\u3067\u3001\u6b21\u306f\u3001\u5217\u65b9\u5411\u306b\u6f14\u7b97\u3057\u305f\u5024\u3092\u3001\u8a08\u7b97\u5143\u306e DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u306e\u65b0\u3057\u3044\u884c\u306b\u683c\u7d0d\u3059\u308b__\n\n* [hik0107\u3055\u3093 Qiita\u8a18\u4e8b\uff082015/03/09\uff09\u300cPython Pandas\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u521d\u6b69\u307e\u3068\u3081 \u2212 \u524d\u534a\uff1a\u30c7\u30fc\u30bf\u4f5c\u6210\uff06\u64cd\u4f5c\u7de8\u300d](http://qiita.com/hik0107/items/d991cc44c2d1778bb82e)\n\n># \u884c\u306e\u8ffd\u52a0\n>#\u8ffd\u52a0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u9069\u5f53\u306b\u4f5c\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u540c\u58eb\u306e\u7d50\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n>#df_sample\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u300c17\u300d\u3092\u3082\u3064\u30ec\u30b3\u30fc\u30c9\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3092\u60f3\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002 \n>\n>>```\n>>df_addition_row =\\\n>>    pd.DataFrame([[\"day1\",\"A\",100,180]])  #df_sample\u3068\u540c\u3058\u5217\u69cb\u9020\u3092\u6301\u3064DF\u3092\u4f5c\u6210\n>>df_addition_row.columns =[\"day_no\",\"class\",\"score1\",\"score2\"]  #\u540c\u3058\u5217\u540d\u3092\u4ed8\u3051\u308b\n>>df_addition_row.index   =[17] #\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u3075\u308b\n>>\n>>pd.concat([df_sample,df_addition_row],axis=0)  #\u7d50\u5408\u3092\u884c\u3046 =rbind\n>>        # \u7b2c\u4e00\u5f15\u6570\uff1a\u7d50\u5408\u3059\u308bDF\u3092[]\u8868\u8a18\u3067\u6307\u5b9a\u3059\u308b\u3002\n>>    \u3000 # \u7b2c\u4e8c\u5f15\u6570\uff1aAxis=0\u3067\u7e26\u65b9\u5411\u306e\u7d50\u5408\u3067\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3059\u308b\u3002\n>>```\n>\n\n___\n\n###__\uff08\u65b9\u6cd5\uff14\uff09__\n###__DaraFrame.pipe \u30e1\u30bd\u30c3\u30c9 \u3092\u4f7f\u3046\u3084\u308a\u65b9__\n\n__\uff08 \u53c2\u8003 \uff09__\n\n* [Librabuch\uff082015-07-24\uff09\u300cPandas 0.16.2 \u3067\u8ffd\u52a0\u3055\u308c\u305f pipe() \u306e\u4f7f\u3044\u65b9\u300d](https://librabuch.jp/2015/07/pandas-0-16-2-pipe/)\n\n\n___\n\n\n##__\u3010 \u305d\u306e\u4ed6\u3001\u53c2\u8003 \u3011__\n\n####__\u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff11 \u306e\u4ee5\u4e0b\u306e\u90e8\u5206\u3082\u3001\u5229\u7528\u5834\u9762\u304c\u591a\u3044\u3068\u611f\u3058\u3066\u3044\u307e\u3059\u3002__\n\n[StatsFragments \uff082014/11/15\uff09 \u300cPython pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u4e2d\u7de8>\u300d ](http://sinhrks.hatenablog.com/entry/2014/11/15/230705)\n\n>\u30e9\u30d9\u30eb\u304c\u91cd\u8907\u3057\u305f\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3057\u305f\u3044\n>\n>2015/05/06\u4fee\u6b63 v0.16\u5411\u3051\u306e\u5185\u5bb9\u306b\u5909\u66f4\n>\n>\u3053\u308c\u306f v0.16 \u4ee5\u964d\u3067\u3042\u308c\u3070\u7c21\u5358\u3002\u4f8b\u793a\u306e\u305f\u3081 index \u306b \"A\" \u304c3\u3064\u91cd\u8907\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3002\n>\n>>```\n>>df_dup = pd.DataFrame({'N1': [1, 2, 3, 4],\n>>                       'N2': [6, 5, 4, 3],\n>>                       'S1': ['A', 'B', 'C', 'D']},\n>>                      index=['A', 'A', 'A', 'B'])\n>>df_dup\n>>#    N1  N2 S1\n>># A   1   6  A\n>># A   2   5  B\n>># A   3   4  C\n>># B   4   3  D\n>>Index.duplicated() \u3067 Index \u306e\u5024\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u304c\u308f\u304b\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u5217\u9078\u629e\u3059\u308c\u3070\u3088\u3044\u3002\u91cd\u8907\u3057\u3066\u3044\u308b\u5024\u304c True \u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081 ~ \u3067\u8ad6\u7406\u5426\u5b9a\u3092\u3068\u3063\u3066\u884c\u9078\u629e\u3059\u308b\u3068\u3001\n>>\n>>df_dup.index.duplicated()\n>># array([False,  True,  True, False], dtype=bool)\n>>\n>>df_dup[~df_dup.index.duplicated()] \n>>#    N1  N2 S1\n>># A   1   6  A\n>># B   4   3  D\n>>```\n>\n>\u3053\u306e\u3068\u304d\u3001\u5404\u91cd\u8907\u30b0\u30eb\u30fc\u30d7\u306e\u4e00\u756a\u6700\u521d\u306e\u30c7\u30fc\u30bf\u306f\u524a\u9664\u3055\u308c\u306a\u3044\u3002\u3053\u306e\u6319\u52d5\u306f take_last \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5909\u66f4\u3067\u304d\u308b\u3002\n>\n>```\n>take_last=False (Default) : \u91cd\u8907\u3057\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092\u6b8b\u3059\n>take_last=True : \u91cd\u8907\u3057\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u6700\u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u6b8b\u3059\u3002\n>df_dup[~df_dup.index.duplicated(take_last=True)]\n>#    N1  N2 S1\n># A   3   4  C\n># B   4   3  D\n>```\n>\n>\u3044\u3084\u3044\u3084\u91cd\u8907\u30c7\u30fc\u30bf\u306f\u5168\u524a\u9664\u3057\u305f\u3044\u3093\u3067\u3059\u3051\u3069\uff1f\u3068\u3044\u3046\u5834\u5408\u306f Dummy \u5217\u3067 groupby \u3057\u3066 filter\u3002\n>\n>>```\n>>df_dup.groupby([\"Dummy\"]).filter(lambda x:x.shape[0] == 1)\n>>#    N1  N2 S1 Dummy\n>># B   4   3  D     B\n>>\n>>df_dup.groupby([\"Dummy\"]).filter(lambda x:x.shape[0] == 1)[['N1', 'N2', 'S1']]\n>>#    N1  N2 S1\n>># B   4   3  D\n>>```\n>\n>\u88dc\u8db3 \u76f4\u611f\u7684\u3067\u306a\u3044\u306a\u3001\u3068\u601d\u3063\u305f\u65b9\u304c\u591a\u3044\u3068\u601d\u3046\u304c \u958b\u767a\u8005\u3067\u3082\u30bf\u30b9\u30af\u3068\u3057\u3066\u306f\u8a8d\u8b58\u3057\u3066\u3044\u308b \u306e\u3067\u3001\u3001\u3001\u3002\n>\n>\u30e9\u30d9\u30eb\u306b\u95a2\u6570\u9069\u7528\u3057\u3066\u9078\u629e\u3057\u305f\u3044\n>\n>pd.Index.map\u3002\u305f\u3068\u3048\u3070 \u5927\u6587\u5b57\u306e \"N\" \u304b\u3089\u59cb\u307e\u308b\u30e9\u30d9\u30eb\u540d\u306e\u307f\u62bd\u51fa\u3057\u305f\u3044\u306a\u3089\n>\n>>```\n>>df.columns.map(lambda x: x.startswith('N'))\n>># array([ True,  True,  True, False, False, False, False, False], dtype=bool)\n>>\n>>df.ix[:, df.columns.map(lambda x: x.startswith('N'))]\n>>#             N1  N2  N3\n>># 2014-11-30   1  10   6\n>># 2014-12-31   2  20   5\n>># 2015-01-31   3  30   4\n>># 2015-02-28   4  40   3\n>># 2015-03-31   5  50   2\n>># 2015-04-30   6  60   1\n>>```\n>\n>\u3068\u3044\u3046\u3053\u3068\u3067 map \u3092\u4f7f\u3048\u3070 index, columns \u306e\u30e9\u30d9\u30eb\u306b\u5bfe\u3057\u3066\u3042\u3089\u3086\u308b\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u30c7\u30fc\u30bf\u9078\u629e\u3067\u304d\u308b\u3002\n>\n>\u3055\u3089\u306b\u3001\u3088\u304f\u4f7f\u3046\u3068\u601d\u308f\u308c\u308b\u30b1\u30fc\u30b9\u3067\u306f\u3088\u308a\u7c21\u4fbf\u306a\u65b9\u6cd5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n>\n>2015/05/06\u8ffd\u8a18 v0.16.1 \u3067 Index \u306b\u3082 .str \u30a2\u30af\u30bb\u30b5\u304c\u8ffd\u52a0\u3055\u308c\u3001\u6587\u5b57\u5217\u51e6\u7406\u95a2\u6570\u3092\u76f4\u63a5\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u4e0a\u306e\u4f8b\u306f df.ix[:, df.columns.str.startswith('N')] \u3068\u3082\u66f8\u3051\u308b\u3002.str \u30a2\u30af\u30bb\u30b5\u306b\u3064\u3044\u3066\u306f\u4ee5\u964d\u306e\u8a18\u8f09\u3092\u53c2\u7167\u3002\n>\n>\u30e9\u30d9\u30eb\u3092\u30bd\u30fc\u30c8\u3057\u3066\u9078\u629e\u3057\u305f\u3044\n>\n>>```\n>>pd.Index.order\u3002columns \u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u66ff\u3048\u3066\u3001\u524d\u304b\u30893\u3064\u3092\u53d6\u5f97\u3057\u305f\u3051\u308c\u3070\u3001\n>>\n>>df.columns.order()\n>># Index([u'D1', u'F1', u'F2', u'N1', u'N2', u'N3', u'S1', u'S2'], dtype='object')\n>>\n>>df.columns.order()[:3]\n>># Index([u'D1', u'F1', u'F2'], dtype='object')\n>>\n>>df[df.columns.order()[:3]]\n>>#                    D1   F1   F2\n>># 2014-11-30 2014-11-01  1.1  1.1\n>># 2014-12-31 2014-11-02  2.2  2.2\n>># 2015-01-31 2014-11-03  3.3  3.3\n>># 2015-02-28 2014-11-04  4.4  4.4\n>># 2015-03-31 2014-11-05  5.5  5.5\n>># 2015-04-30 2014-11-06  6.6  6.6\n>>```\n", "tags": ["Python", "python3", "\u30c7\u30fc\u30bf\u52a0\u5de5", "\u5165\u9580", "pandas"]}