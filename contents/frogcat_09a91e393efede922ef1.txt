{"context": "\u5730\u7406\u9662\u30bf\u30a4\u30eb \u306e \u5730\u7406\u9662\u30bf\u30a4\u30eb\u76ee\u9332 \u3092\u5165\u529b\u3068\u3057\u3066\u5f53\u8a72\u30bf\u30a4\u30eb\u306e\u30ab\u30d0\u30fc\u3059\u308b\u9818\u57df\u304c\u308f\u304b\u308b\u3088\u3046\u306a GeoJSON \u3092\u751f\u6210\u3059\u308b\u624b\u9806\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u3053\u306e\u30dd\u30b9\u30c8\u306f\u30e9\u30b9\u30bf\uff0f\u30d9\u30af\u30bf\u5909\u63db\u30c4\u30fc\u30eb\u3067\u3042\u308b potrace \u306e GeoJSON \u51fa\u529b\u306e\u7d39\u4ecb\u3082\u517c\u306d\u3066\u3044\u307e\u3059\u3002\n\n1. \u30b7\u30ca\u30ea\u30aa\n\u6771\u65e5\u672c\u5927\u9707\u707d\u88ab\u707d\u5730\u9707\u707d\u76f4\u5f8c\u30aa\u30eb\u30bd\u753b\u50cf\uff082011\u5e743\u6708\uff5e2011\u5e744\u6708\u64ae\u5f71\uff09 \u306e\u30bf\u30a4\u30eb\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3092 GeoJSON \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001\u540c\u30bf\u30a4\u30eb\u306e\u76ee\u9332\u306f\u4ee5\u4e0b\u306e URL \u304b\u3089\u5165\u624b\u3067\u304d\u307e\u3059\u3002\n\nhttp://cyberjapandata.gsi.go.jp/xyz/toho1/mokuroku.csv.gz\n\n\n2. \u624b\u9806\npotrace \u3068 nodejs \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\n$ sudo apt-get install potrace\n$ sudo apt-get install nodejs\n\n\u9069\u5f53\u306a\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u3001mokuroku.csv.gz \u3092\u5c55\u958b\u3057\u3066\u304a\u304d\u307e\u3059\n$ mkdir work\n$ cd work\n$ curl http://cyberjapandata.gsi.go.jp/xyz/toho1/mokuroku.csv.gz | zcat > mokuroku.csv\n\n\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e mokuroku2geojson.js \u3092\u4f5c\u6210\u3057\u307e\u3059\n\nmokuroku2geojson.js\n\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst execSync = require(\"child_process\").execSync;\nconst input = process.argv[2];\n\nfunction xy2ll(x, y, z) {\n  var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n  return [\n    x / Math.pow(2, z) * 360 - 180,\n    180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)))\n  ];\n}\n\nfunction Bounds() {\n  this.min = null;\n  this.max = null;\n  this.points = {};\n}\nBounds.prototype.add = function(point) {\n  this.min = this.min ? [\n    Math.min(this.min[0], point[0]),\n    Math.min(this.min[1], point[1])\n  ] : point;\n  this.max = this.max ? [\n    Math.max(this.max[0], point[0]),\n    Math.max(this.max[1], point[1])\n  ] : point;\n  this.points[point.join(\"/\")] = true;\n};\nBounds.prototype.toPBM = function() {\n  var a = \"P1\\n\";\n  a += (this.max[0] - this.min[0] + 1) + \" \";\n  a += (this.max[1] - this.min[1] + 1) + \"\\n\";\n  for (var y = this.min[1]; y <= this.max[1]; y++)\n    for (var x = this.min[0]; x <= this.max[0]; x++) {\n      a += this.points[x + \"/\" + y] ? \"1\" : \"0\";\n      a += (x == this.max[0] ? \"\\n\" : \" \");\n    }\n  return a;\n};\n\nfunction flash(zoom, data) {\n\n  var pbm = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".pbm\");\n  var json = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".json\");\n  var geojson = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".geojson\");\n\n  var bounds = new Bounds();\n  data.forEach(a => {\n    bounds.add([a[1], a[2]]);\n  });\n\n  fs.writeFileSync(pbm, bounds.toPBM(), \"UTF-8\");\n  execSync(\"potrace -b geojson \" + pbm + \" -o \" + json);\n\n  var dig = function(a) {\n    if (a.forEach && !a[0].forEach) {\n      var b = xy2ll(bounds.min[0] + a[0] + 0.5, bounds.max[1] - a[1] + 0.5, zoom);\n      a[0] = Math.round(b[0] * 10e6) / 10e6;\n      a[1] = Math.round(b[1] * 10e6) / 10e6;\n    } else if (a.geometry && a.geometry.coordinates)\n      a.geometry.coordinates.forEach(dig);\n    else if (a.forEach)\n      a.forEach(dig);\n    else if (a.features)\n      a.features.forEach(dig);\n    return a;\n  };\n\n  var j = dig(JSON.parse(fs.readFileSync(json, \"UTF-8\")));\n  fs.writeFileSync(geojson, JSON.stringify(j, null, \"\"), \"UTF-8\");\n}\n\n(function() {\n  var zoom = NaN;\n  var data = [];\n  fs.readFileSync(input, \"utf-8\")\n    .split(\"\\n\")\n    .filter(a => a.match(/^[0-9]+\\/.+$/))\n    .filter(a => !a.endsWith(\"41ad1e3d34ec92311b20acb1a37ccef7\"))\n    .forEach(a => {\n      var b = a.split(/[,\\.\\/]/);\n      if (data.length == 0 || b[0] == zoom) {\n        data.push(b);\n      } else {\n        flash(zoom, data);\n        data = [];\n      }\n      zoom = b[0];\n    });\n  if (data.length > 0)\n    flash(zoom, data);\n})();\n\n\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b mokuroku.csv \u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n$ node mokuroku2geojson.js mokuroku.csv\n\n\u3046\u307e\u304f\u3044\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\n$ ls -1\nmokuroku.15.geojson\nmokuroku.15.json\nmokuroku.15.pbm\nmokuroku.16.geojson\nmokuroku.16.json\nmokuroku.16.pbm\nmokuroku.17.geojson\nmokuroku.17.json\nmokuroku.17.pbm\nmokuroku.csv\nmokuroku2geojson.js\n$\n\n\u30ba\u30fc\u30e0\u30ec\u30d9\u30eb\u3054\u3068\u306b geojson \u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 *.json \u3084 *.pbm \u306f\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u3067\u524a\u9664\u3057\u3066\u3082\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\n\u9069\u5f53\u306a geojson \u3092 \u5730\u7406\u9662\u5730\u56f3 \u306b\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u3001geojson \u306e\u9818\u57df\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u306f mokuroku.17.geojson \u3092\u30c9\u30ed\u30c3\u30d7\u3057\u305f\u4f8b\u3067\u3059\u3002\n\nGist \u306f\u3053\u3061\u3089\u3002\nhttps://gist.github.com/frogcat/2f10d55ff7115c7b5ca743073d195a0f\n\n3. \u89e3\u8aac\n\npotrace\npotrace \u306f\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u6ed1\u3089\u304b\u306a\u30d9\u30af\u30c8\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3067\u3059\u30022001\u5e74\u306b\u767b\u5834\u3057\u305f\u6b74\u53f2\u306e\u3042\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306a\u306e\u3067\u3059\u304c\u30012013\u5e74\u304b\u3089 GeoJSON \u306e\u51fa\u529b\u306b\u5bfe\u5fdc\u3057\u305f\u3068\u306e\u3053\u3068\u3067\u3059\u3002\u901a\u5e38\u306f\u30d9\u30b8\u30a8\u66f2\u7dda\u306e\u4f7f\u3048\u308b SVG \u3084 EPS \u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u51fa\u529b\u5148\u3092 GeoJSON \u306b\u3059\u308b\u3053\u3068\u3067 FeatureCollection > Polygon+ \u306e\u5f62\u5f0f\u3067\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306f BMP \u304b PNM \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30bf\u30a4\u30eb\u306e\u6709\u7121\u3060\u3051\u3092\u8003\u3048\u308b\u306e\u3067\u3042\u308c\u3070 PNM \u306e\u4e8c\u5024\u5f62\u5f0f\u3067\u3042\u308b PBM \u304c\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u524d\u51e6\u7406\u306b\u3088\u3063\u3066 pbm  \u3092\u7528\u610f\u3057\u305f\u4e0a\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3067 GeoJSON \u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n$ potrace -b geojson input.pbm -o output.json\n\n\u3057\u304b\u3057\u3001\u51fa\u529b\u306e GeoJSON \u306f\u30e9\u30b9\u30bf\u753b\u50cf\u306e\u5ea7\u6a19\u7cfb\u306b\u5f93\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5f8c\u51e6\u7406\u3068\u3057\u3066\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u524d\u51e6\u7406\nmokuroku.csv \u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001PBM \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\u96e3\u3057\u3044\u51e6\u7406\u306f\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3002\u306a\u304a\u3001\u5165\u529b\u304c\u900f\u660e\u306a PNG \u3060\u3063\u305f\u5834\u5408\u306b\u306f\u300c\u30bf\u30a4\u30eb\u306a\u3057\u300d\u3068\u5224\u5b9a\u3059\u308b\u3088\u3046\u306a\u7d30\u5de5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4e2d\u9593\u51e6\u7406\nnode.js \u304b\u3089 potrace \u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b execSync \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n\n\u5f8c\u51e6\u7406\n\u5404\u5ea7\u6a19\u306b\u3064\u3044\u3066\u3001pbm \u306e\u5ea7\u6a19\u3092\u30bf\u30a4\u30eb\u306e xy(z) \u5ea7\u6a19\u306b\u623b\u3057\u305f\u4e0a\u3067\u3001\u3055\u3089\u306b xy(z) \u5ea7\u6a19\u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u5ea7\u6a19\u306b\u623b\u3059\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002xy(z) \u5ea7\u6a19\u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u5ea7\u6a19\u3078\u306e\u5909\u63db\u306f xy2ll \u95a2\u6570\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u3092\u3069\u3046\u305e\u3002\n\nhttp://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n\n\n4. \u307e\u3068\u3081\n\npotrace \u3092\u4f7f\u3063\u3066\u30bf\u30a4\u30eb\u306e\u9818\u57df\u3092 GeoJSON \u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u57fa\u672c\u7684\u306a\u624b\u9806\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\npotrace \u306e\u8a73\u7d30\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u826f\u597d\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\n\u5de8\u5927\u306a mokuroku \u304c\u51e6\u7406\u3067\u304d\u308b\u304b\u306f\u4e0d\u660e\u3067\u3059\u3002\u3084\u3063\u3066\u307f\u305f\u65b9\u304c\u3044\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044\u3002\n\n[\u5730\u7406\u9662\u30bf\u30a4\u30eb](http://maps.gsi.go.jp/development/ichiran.html) \u306e [\u5730\u7406\u9662\u30bf\u30a4\u30eb\u76ee\u9332](https://github.com/gsi-cyberjapan/mokuroku-spec) \u3092\u5165\u529b\u3068\u3057\u3066\u5f53\u8a72\u30bf\u30a4\u30eb\u306e\u30ab\u30d0\u30fc\u3059\u308b\u9818\u57df\u304c\u308f\u304b\u308b\u3088\u3046\u306a [GeoJSON](http://geojson.org/) \u3092\u751f\u6210\u3059\u308b\u624b\u9806\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u3053\u306e\u30dd\u30b9\u30c8\u306f\u30e9\u30b9\u30bf\uff0f\u30d9\u30af\u30bf\u5909\u63db\u30c4\u30fc\u30eb\u3067\u3042\u308b [potrace](http://potrace.sourceforge.net/) \u306e GeoJSON \u51fa\u529b\u306e\u7d39\u4ecb\u3082\u517c\u306d\u3066\u3044\u307e\u3059\u3002\n\n# 1. \u30b7\u30ca\u30ea\u30aa\n\n[\u6771\u65e5\u672c\u5927\u9707\u707d\u88ab\u707d\u5730\u9707\u707d\u76f4\u5f8c\u30aa\u30eb\u30bd\u753b\u50cf\uff082011\u5e743\u6708\uff5e2011\u5e744\u6708\u64ae\u5f71\uff09](http://maps.gsi.go.jp/development/ichiran.html#toho1) \u306e\u30bf\u30a4\u30eb\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3092 GeoJSON \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\u306a\u304a\u3001\u540c\u30bf\u30a4\u30eb\u306e\u76ee\u9332\u306f\u4ee5\u4e0b\u306e URL \u304b\u3089\u5165\u624b\u3067\u304d\u307e\u3059\u3002\n\n* <http://cyberjapandata.gsi.go.jp/xyz/toho1/mokuroku.csv.gz>\n\n# 2. \u624b\u9806\n\npotrace \u3068 nodejs \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\n\n```\n$ sudo apt-get install potrace\n$ sudo apt-get install nodejs\n```\n\n\u9069\u5f53\u306a\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u3001mokuroku.csv.gz \u3092\u5c55\u958b\u3057\u3066\u304a\u304d\u307e\u3059\n\n```\n$ mkdir work\n$ cd work\n$ curl http://cyberjapandata.gsi.go.jp/xyz/toho1/mokuroku.csv.gz | zcat > mokuroku.csv\n```\n\n\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e **mokuroku2geojson.js** \u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n```mokuroku2geojson.js\n\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst execSync = require(\"child_process\").execSync;\nconst input = process.argv[2];\n\nfunction xy2ll(x, y, z) {\n  var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n  return [\n    x / Math.pow(2, z) * 360 - 180,\n    180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)))\n  ];\n}\n\nfunction Bounds() {\n  this.min = null;\n  this.max = null;\n  this.points = {};\n}\nBounds.prototype.add = function(point) {\n  this.min = this.min ? [\n    Math.min(this.min[0], point[0]),\n    Math.min(this.min[1], point[1])\n  ] : point;\n  this.max = this.max ? [\n    Math.max(this.max[0], point[0]),\n    Math.max(this.max[1], point[1])\n  ] : point;\n  this.points[point.join(\"/\")] = true;\n};\nBounds.prototype.toPBM = function() {\n  var a = \"P1\\n\";\n  a += (this.max[0] - this.min[0] + 1) + \" \";\n  a += (this.max[1] - this.min[1] + 1) + \"\\n\";\n  for (var y = this.min[1]; y <= this.max[1]; y++)\n    for (var x = this.min[0]; x <= this.max[0]; x++) {\n      a += this.points[x + \"/\" + y] ? \"1\" : \"0\";\n      a += (x == this.max[0] ? \"\\n\" : \" \");\n    }\n  return a;\n};\n\nfunction flash(zoom, data) {\n\n  var pbm = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".pbm\");\n  var json = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".json\");\n  var geojson = input.replace(/\\.[^\\.]+$/, \".\" + zoom + \".geojson\");\n\n  var bounds = new Bounds();\n  data.forEach(a => {\n    bounds.add([a[1], a[2]]);\n  });\n\n  fs.writeFileSync(pbm, bounds.toPBM(), \"UTF-8\");\n  execSync(\"potrace -b geojson \" + pbm + \" -o \" + json);\n\n  var dig = function(a) {\n    if (a.forEach && !a[0].forEach) {\n      var b = xy2ll(bounds.min[0] + a[0] + 0.5, bounds.max[1] - a[1] + 0.5, zoom);\n      a[0] = Math.round(b[0] * 10e6) / 10e6;\n      a[1] = Math.round(b[1] * 10e6) / 10e6;\n    } else if (a.geometry && a.geometry.coordinates)\n      a.geometry.coordinates.forEach(dig);\n    else if (a.forEach)\n      a.forEach(dig);\n    else if (a.features)\n      a.features.forEach(dig);\n    return a;\n  };\n\n  var j = dig(JSON.parse(fs.readFileSync(json, \"UTF-8\")));\n  fs.writeFileSync(geojson, JSON.stringify(j, null, \"\"), \"UTF-8\");\n}\n\n(function() {\n  var zoom = NaN;\n  var data = [];\n  fs.readFileSync(input, \"utf-8\")\n    .split(\"\\n\")\n    .filter(a => a.match(/^[0-9]+\\/.+$/))\n    .filter(a => !a.endsWith(\"41ad1e3d34ec92311b20acb1a37ccef7\"))\n    .forEach(a => {\n      var b = a.split(/[,\\.\\/]/);\n      if (data.length == 0 || b[0] == zoom) {\n        data.push(b);\n      } else {\n        flash(zoom, data);\n        data = [];\n      }\n      zoom = b[0];\n    });\n  if (data.length > 0)\n    flash(zoom, data);\n})();\n\n``` \n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306b mokuroku.csv \u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\n$ node mokuroku2geojson.js mokuroku.csv\n```\n\n\u3046\u307e\u304f\u3044\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5404\u7a2e\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\n\n```\n$ ls -1\nmokuroku.15.geojson\nmokuroku.15.json\nmokuroku.15.pbm\nmokuroku.16.geojson\nmokuroku.16.json\nmokuroku.16.pbm\nmokuroku.17.geojson\nmokuroku.17.json\nmokuroku.17.pbm\nmokuroku.csv\nmokuroku2geojson.js\n$\n```\n\n\u30ba\u30fc\u30e0\u30ec\u30d9\u30eb\u3054\u3068\u306b geojson \u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 *.json \u3084 *.pbm \u306f\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306a\u306e\u3067\u524a\u9664\u3057\u3066\u3082\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u9069\u5f53\u306a geojson \u3092 [\u5730\u7406\u9662\u5730\u56f3](http://maps.gsi.go.jp/) \u306b\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3059\u308b\u3068\u3001geojson \u306e\u9818\u57df\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u306f mokuroku.17.geojson \u3092\u30c9\u30ed\u30c3\u30d7\u3057\u305f\u4f8b\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/82494/5932c95d-4598-fc4e-ec11-0fa46ea06db5.png)\n\nGist \u306f\u3053\u3061\u3089\u3002\n\n<https://gist.github.com/frogcat/2f10d55ff7115c7b5ca743073d195a0f>\n\n# 3. \u89e3\u8aac\n\n## potrace\n\npotrace \u306f\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u6ed1\u3089\u304b\u306a\u30d9\u30af\u30c8\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u30c4\u30fc\u30eb\u3067\u3059\u30022001\u5e74\u306b\u767b\u5834\u3057\u305f\u6b74\u53f2\u306e\u3042\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306a\u306e\u3067\u3059\u304c\u30012013\u5e74\u304b\u3089 GeoJSON \u306e\u51fa\u529b\u306b\u5bfe\u5fdc\u3057\u305f\u3068\u306e\u3053\u3068\u3067\u3059\u3002\u901a\u5e38\u306f\u30d9\u30b8\u30a8\u66f2\u7dda\u306e\u4f7f\u3048\u308b SVG \u3084 EPS \u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u51fa\u529b\u5148\u3092 GeoJSON \u306b\u3059\u308b\u3053\u3068\u3067 FeatureCollection > Polygon+ \u306e\u5f62\u5f0f\u3067\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306f BMP \u304b [PNM](https://ja.wikipedia.org/wiki/PNM_(%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)) \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30bf\u30a4\u30eb\u306e\u6709\u7121\u3060\u3051\u3092\u8003\u3048\u308b\u306e\u3067\u3042\u308c\u3070 PNM \u306e\u4e8c\u5024\u5f62\u5f0f\u3067\u3042\u308b PBM \u304c\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\u524d\u51e6\u7406\u306b\u3088\u3063\u3066 pbm  \u3092\u7528\u610f\u3057\u305f\u4e0a\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3067 GeoJSON \u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```\n$ potrace -b geojson input.pbm -o output.json\n```\n\n\u3057\u304b\u3057\u3001\u51fa\u529b\u306e GeoJSON \u306f\u30e9\u30b9\u30bf\u753b\u50cf\u306e\u5ea7\u6a19\u7cfb\u306b\u5f93\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5f8c\u51e6\u7406\u3068\u3057\u3066\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u524d\u51e6\u7406\n\nmokuroku.csv \u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001PBM \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u51e6\u7406\u3067\u3059\u3002\u96e3\u3057\u3044\u51e6\u7406\u306f\u306a\u3044\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3002\u306a\u304a\u3001\u5165\u529b\u304c\u900f\u660e\u306a PNG \u3060\u3063\u305f\u5834\u5408\u306b\u306f\u300c\u30bf\u30a4\u30eb\u306a\u3057\u300d\u3068\u5224\u5b9a\u3059\u308b\u3088\u3046\u306a\u7d30\u5de5\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u4e2d\u9593\u51e6\u7406\n\nnode.js \u304b\u3089 potrace \u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b **execSync** \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\n\n## \u5f8c\u51e6\u7406\n\n\u5404\u5ea7\u6a19\u306b\u3064\u3044\u3066\u3001pbm \u306e\u5ea7\u6a19\u3092\u30bf\u30a4\u30eb\u306e xy(z) \u5ea7\u6a19\u306b\u623b\u3057\u305f\u4e0a\u3067\u3001\u3055\u3089\u306b xy(z) \u5ea7\u6a19\u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u5ea7\u6a19\u306b\u623b\u3059\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002xy(z) \u5ea7\u6a19\u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u5ea7\u6a19\u3078\u306e\u5909\u63db\u306f **xy2ll** \u95a2\u6570\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u3092\u3069\u3046\u305e\u3002\n\n* <http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames>\n\n# 4. \u307e\u3068\u3081\n\n* potrace \u3092\u4f7f\u3063\u3066\u30bf\u30a4\u30eb\u306e\u9818\u57df\u3092 GeoJSON \u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u57fa\u672c\u7684\u306a\u624b\u9806\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\n* potrace \u306e\u8a73\u7d30\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u826f\u597d\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\n* \u5de8\u5927\u306a mokuroku \u304c\u51e6\u7406\u3067\u304d\u308b\u304b\u306f\u4e0d\u660e\u3067\u3059\u3002\u3084\u3063\u3066\u307f\u305f\u65b9\u304c\u3044\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044\u3002\n\n\n\n", "tags": ["Node.js", "geojson"]}