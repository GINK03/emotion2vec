{"context": "\n\n\u3010 \u6700\u7d42\u7684\u306b\u4f5c\u6210\u3057\u305f\u95a2\u6570 \u3011\n\n\n\n\uff11\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570\n\n\nGHCi\nPrelude Data.List> let first_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_1st_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_1st_order_auto_multiply_list l = zipWith (*) (tail l) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\n\uff12\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570\n\n\nGHCi\nPrelude Data.List> let second_order_auto_correration l = let n = length l\nPrelude Data.List|                                           sum_value = sum(generate_2nd_order_auto_multiply_list l)\nPrelude Data.List|                                       in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\n\uff13\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570\n\n\nGHCi\nPrelude Data.List> let third_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_3rd_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_3rd_order_auto_multiply_list l = zipWith (*) (tail (tail (tail l))) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\n\uff08 \u4ee5\u4e0b\u3001\u5b9f\u88c5\u904e\u7a0b \uff09\n\n\n\u4ee5\u4e0b\u306e\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \u3092 \u53c2\u8003 \u306b\u3001\u4ee5\u4e0b \u306e \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\u306e\u7b97\u51fa\u5f0f \u3092 \u8a08\u7b97\u3059\u308b\u95a2\u6570 \u3092 \u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n\u81ea\u5df1\u76f8\u95a2\u95a2\u6570\n\n\n\n\n\u6a5f\u80fd\u6750\u6599\u5de5\u5b66\u79d1 \u963f\u90e8 \u6d0b\u300c\u97f3\u306e\u6027\u8cea\u3068\u89e3\u6790: \u81ea\u5df1\u76f8\u95a2\u95a2\u6570\u300d\nMemorandum \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\n\n\n\n\uff08 \u53c2\u8003 \uff09\n\n\nbarutanGNE's blog\uff082014-02-17\uff09\u300cHaskell\u3068Python\u3067\u968e\u5dee\u6570\u5217\u300d\n\n\uff08 \u4ee5\u4e0b\u3001\u4e0a\u8a18\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \u3088\u308a \u629c\u7c8b\uff09\n\nHaskell\u7248\nPrelude> let diff ls = zipWith (-) (tail ls) ls\nPrelude> diff [1,2,3,4,5]\n[1,1,1,1]\nPrelude> diff [x^2 + x -1 | x <- [0..10]]\n[2,4,6,8,10,12,14,16,18,20]\n\n\n\uff08 \u95a2\u6570\u306e\u5185\u5bb9 \uff09\n\n(tail ls) \u3067 \u5f97\u3089\u308c\u308b \u30ea\u30b9\u30c8\u306e\u300c\uff12\u756a\u76ee\u4ee5\u964d\u306e\u756a\u5730\u300d\u90e8\u5206\u30ea\u30b9\u30c8\n\u306e \u5404\u8981\u7d20 \u304b\u3089\nls \u5143\u306e\u30ea\u30b9\u30c8\n\u306e \u5404\u8981\u7d20 \u3092\u3001\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u306e\u30da\u30a2 \u3054\u3068 \u306b\u3001\u6e1b\u7523\u6f14\u7b97\u5b50\uff08-\uff09\u3092\u884c\u3046\u3053\u3068\u3067\u3001\n\u96a3\u308a\u5408\u3046\uff12\u8981\u7d20\u540c\u58eb\u3092\u5f15\u304d\u7b97\u3059\u308b\u3002\n\n\n\uff08 \u53c2\u8003 \uff09zipWith\u95a2\u6570\n\n\u7d50\u57ce\u6d69\u306eHaskell\u65e5\u8a18\uff082006/6/3\uff09\u300czipWith\u95a2\u6570\u300d\n\n\n\n\u4e0a\u8a18 \u3092 \u5143\u306b\u3001\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3057\u3066\u307f\u308b\n\n\nGHCi\nPrelude Data.List> let stock_list = [399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List| \nPrelude Data.List>\n\n\n\n\u5f53\u671f\u306e\u30c7\u30fc\u30bf \u3068\u30011\u671f\u524d\u306e\u30c7\u30fc\u30bf \u3069\u3046\u3057 \u3092 \u6642\u9593\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u3001\uff12\u9805\u4e57\u7b97\u5b50 \u306b \u6e21\u3057\u3066 \u4e57\u7b97\u9069\u7528 \u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\n\n\nGHCi\nPrelude Data.List> let generate_1st_order_auto_multiply_list ls = zipWith (*) (tail ls) ls\nPrelude Data.List| \nPrelude Data.List>\n\n\n\n\u65e5\u7d4c\u5e73\u5747\u7d42\u5024\u306e\u65e5\u6b21\u30c7\u30fc\u30bf\uff08\u90e8\u5206\uff09 \u306b \u95a2\u6570 \u3092 \u9069\u7528\u3059\u308b\n\n\nGHCi\nPrelude Data.List> let auto_multiply_list = generate_1st_order_auto_multiply_list stock_list\nPrelude Data.List| \nPrelude Data.List>\nPrelude Data.List> auto_multiply_list \n[1399634522425,-11899771906850,-31962891628080,-90238685974416,-84477211215990,-58081137388430,-7919678985582,1920208777158,-4640510545856,-1159479529376,-839586735190,-12598487714490]\nPrelude Data.List>\n\n\n\n\u5f97\u3089\u308c\u305f\uff08\u5404\u8981\u7d20\u306e\u5024\uff09\u300c\u5f53\u671f\u306e\u30c7\u30fc\u30bf \u3068\u30011\u671f\u524d\u306e\u30c7\u30fc\u30bf\u306e\u4e57\u7b97\u7d50\u679c\u300d\u30ea\u30b9\u30c8 \u3092 \u5408\u8a08\u3059\u308b\n\n\nGHCi\nPrelude Data.List> let sum_value = sum(auto_multiply_list)\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> sum_value \n-300497598324677\nPrelude Data.List>\n\n\n\n\u5408\u8a08\u5024 \u3092 \u30c7\u30fc\u30bf\u306e\u8981\u7d20\u6570 \u3067 \u5272\u308a\u7b97\u3059\u308b\n\n\u5f90\u7b97\uff12\u9805\u6f14\u7b97\u5b50\uff08/\uff09\u3092\u4f7f\u3046\u3068\u3001\u578b\u63a8\u8ad6\u30a8\u30e9\u30fc \u306b \u306a\u308b\u3002\n\uff08 Fractional\u578b\u306e\u306f\u305a\u306a\u306e\u306b\u3001\u305d\u306e\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u306b \u5bfe\u3057\u3066 \u9069\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3001\u3068\u3044\u3046\u30a8\u30e9\u30fc\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8 \uff09\n\nGHCi\nPrelude Data.List> let first_auto_corr_value = sum_value / (length stock_list)\nPrelude Data.List| \n\n<interactive>:320:39:\n    No instance for (Fractional Int) arising from a use of \u2018/\u2019\n    In the expression: sum_value / (length stock_list)\n    In an equation for \u2018first_auto_corr_value\u2019:\n        first_auto_corr_value = sum_value / (length stock_list)\nPrelude Data.List>\n\n\n\nHatnea Blog MEMOcho-\uff082014/03/18\uff09\u300chaskell\u3067\u5272\u308a\u7b97\u3059\u308b\u3068\u304d\u300d\n\n\n\u3088\u3063\u3066/\u306b\u3088\u3063\u3066\u5272\u308a\u7b97\u3059\u308b\u5834\u5408\u306f\uff12\u5f15\u6570\u3068\u3082Fractional\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5fc5\u8981\u304c\u3042\u308b\n\u305d\u3053\u3067\u4f7f\u3046\u306e\u304cfromIntegral\n*Main> :t fromIntegral \nfromIntegral :: (Integral a, Num b) => a -> b\n\n\u3053\u308c\u306b\u3088\u3063\u3066Int\u3092Num\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u306b/\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067haskell\u304c\u578b\u63a8\u8ad6\u306b\u3088\u3063\u3066\nFractional\u3068\u3057\u3066\u6271\u3063\u3066\u304f\u308c\u308b\u3002\u3064\u307e\u308a\u3053\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\nmyceiling :: Int -> Int -> Int\nmyceiling m n = ceiling $ (fromIntegral m) / (fromIntegral n)\n\n\n\u4eca\u5ea6 \u306f \u6210\u529f\n\n\u4ee5\u4e0b \u304c\u3001\u65e5\u7d4c\u5e73\u5747\u7d42\u5024\u306e\u65e5\u6b21\u30c7\u30fc\u30bf\uff08\u90e8\u5206\uff09 \u306e \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\n\n\nGHCi\nPrelude Data.List> let first_auto_corr_value = (fromIntegral sum_value) / (fromIntegral(length stock_list))\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> first_auto_corr_value\n-2.3115199871129e13\nPrelude Data.List> \n\n\n\n\uff08 \u95a2\u6570\u5b9a\u7fa9 \uff09\n\n\n\u4ee5\u4e0a \u3092 \u95a2\u6570 \u306b \u3059\u308b\n\n\uff08 \u95a2\u6570\u5b9a\u7fa9 \uff09\n\nGHCi\nPrelude Data.List> let first_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_1st_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_1st_order_auto_multiply_list l = zipWith (*) (tail l) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\uff08 \u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d \uff09\n\nGHCi\nPrelude Data.List> :t first_order_auto_correration \nfirst_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List>\n\n\n\nGHCi\nPrelude Data.List> let stock_list = [399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> stock_list\n[399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List>\n\n\n_\uff08 \u95a2\u6570 \u3092 \u682a\u4fa1\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u30ea\u30b9\u30c8\uff08[Int]_\u578b\uff09 \u306b \u9069\u7528 \uff09\n\nGHCi\nPrelude Data.List> first_order_auto_correration stock_list\n-2.3115199871129e13\nPrelude Data.List>\n\n\n\n\n\n\uff12\u968e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b\n\n\n\uff08 \u5909\u66f4\u70b9 \uff09\n\n\n\u4ee5\u4e0b\u306e tail \u3092 \uff11\u3064\u5897\u3084\u3057\u3066\u3001\uff12\u56de\u9069\u7528\u3059\u308b\u3088\u3046\u6539\u3081\u308b\n\n\nwhere generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\n\n\nGHCi\nPrelude Data.List> let second_order_auto_correration l = let n = length l\nPrelude Data.List|                                           sum_value = sum(generate_2nd_order_auto_multiply_list l)\nPrelude Data.List|                                       in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\nGHCi\nPrelude Data.List> :t second_order_auto_correration \nsecond_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List> \n\n\n\n\u65e5\u7d4c225\u30c7\u30fc\u30bf \u306b \u5bfe\u3057\u3066 \u9069\u7528\u3057\u305f \u7d50\u679c\n\n\nGHCi\nPrelude Data.List> second_order_auto_correration stock_list\n1.6608058608836309e13\nPrelude Data.List> \n\n\n\n\n\uff13\u968e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b\n\n\n\uff08 \u5909\u66f4\u70b9 \uff09\n\n\n\u4ee5\u4e0b\u306e tail \u3092 \u3055\u3089\u306b\uff11\u3064\u5897\u3084\u3057\u3066\u3001\uff13\u56de\u9069\u7528\u3059\u308b\u3088\u3046\u6539\u3081\u308b\n\n\nwhere generate_2nd_order_auto_multiply_list l = zipWith (*) (tail(tail (tail l))) l\n\n\nGHCi\nPrelude Data.List> let third_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_3rd_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_3rd_order_auto_multiply_list l = zipWith (*) (tail (tail (tail l))) l\nPrelude Data.List| \nPrelude Data.List>\n\n\n\nGHCi\nPrelude Data.List> :t third_order_auto_correration \nthird_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List>\n\n\n\nGHCi\nPrelude Data.List> third_order_auto_correration stock_list \n-9.259793630759e12\nPrelude Data.List> \n\n\n\n##__\u3010 \u6700\u7d42\u7684\u306b\u4f5c\u6210\u3057\u305f\u95a2\u6570 \u3011__\n\n___\n\n* __\uff11\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570__\n\n```{haskell:GHCi}\nPrelude Data.List> let first_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_1st_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_1st_order_auto_multiply_list l = zipWith (*) (tail l) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n* __\uff12\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570__\n\n```{haskell:GHCi} \nPrelude Data.List> let second_order_auto_correration l = let n = length l\nPrelude Data.List|                                           sum_value = sum(generate_2nd_order_auto_multiply_list l)\nPrelude Data.List|                                       in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n* __\uff13\u968e \u81ea\u5df1\u76f8\u95a2\u95a2\u6570__\n\n```{haskell:GHCi} \nPrelude Data.List> let third_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_3rd_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_3rd_order_auto_multiply_list l = zipWith (*) (tail (tail (tail l))) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n###__\uff08 \u4ee5\u4e0b\u3001\u5b9f\u88c5\u904e\u7a0b \uff09__\n\n___\n\n__\u4ee5\u4e0b\u306e\u53c2\u8003\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \u3092 \u53c2\u8003 \u306b\u3001\u4ee5\u4e0b \u306e \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570\u306e\u7b97\u51fa\u5f0f \u3092 \u8a08\u7b97\u3059\u308b\u95a2\u6570 \u3092 \u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002__\n\n* [\u81ea\u5df1\u76f8\u95a2\u95a2\u6570](http://qube.phys.kindai.ac.jp/users/kondo/lectures/ichikawa/Autocorr.pdf)\n\n<img width=\"1264\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 17.06.38.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/aaf40ba4-d52e-a06c-2b49-45f2e222ecc7.png\">\n\n<img width=\"1259\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 17.07.09.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/a5342ac5-caec-30b9-1399-782a7484357e.png\">\n\n* [\u6a5f\u80fd\u6750\u6599\u5de5\u5b66\u79d1 \u963f\u90e8 \u6d0b\u300c\u97f3\u306e\u6027\u8cea\u3068\u89e3\u6790: \u81ea\u5df1\u76f8\u95a2\u95a2\u6570\u300d](http://www.nda.ac.jp/cc/mse/_development/Abe/ACF.pdf)\n\n* [Memorandum \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570](http://kawamurakaeru.lolipop.jp/scw/blog/2016/02/17/\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570/)\n\n<img width=\"750\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 17.09.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e95c4a8f-0a4e-56bc-73ca-1bca040b5324.png\">\n\n\n####__\uff08 \u53c2\u8003 \uff09__\n\n* [barutanGNE's blog\uff082014-02-17\uff09\u300cHaskell\u3068Python\u3067\u968e\u5dee\u6570\u5217\u300d](http://barutangne.hatenablog.com/entry/2014/02/17/110053)\n\n\uff08 \u4ee5\u4e0b\u3001\u4e0a\u8a18\u30a6\u30a7\u30d6\u30da\u30fc\u30b8 \u3088\u308a \u629c\u7c8b\uff09\n\n> __Haskell\u7248__\n>\n>```{haskell:}\n>Prelude> let diff ls = zipWith (-) (tail ls) ls\n>Prelude> diff [1,2,3,4,5]\n>[1,1,1,1]\n>Prelude> diff [x^2 + x -1 | x <- [0..10]]\n>[2,4,6,8,10,12,14,16,18,20]\n>```\n\n\n__\uff08 \u95a2\u6570\u306e\u5185\u5bb9 \uff09__\n\n* (tail ls) \u3067 \u5f97\u3089\u308c\u308b \u30ea\u30b9\u30c8\u306e\u300c\uff12\u756a\u76ee\u4ee5\u964d\u306e\u756a\u5730\u300d\u90e8\u5206\u30ea\u30b9\u30c8\n\u306e \u5404\u8981\u7d20 \u304b\u3089\n* ls \u5143\u306e\u30ea\u30b9\u30c8\n\u306e \u5404\u8981\u7d20 \u3092\u3001\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u306e\u30da\u30a2 \u3054\u3068 \u306b\u3001\u6e1b\u7523\u6f14\u7b97\u5b50\uff08-\uff09\u3092\u884c\u3046\u3053\u3068\u3067\u3001\n\u96a3\u308a\u5408\u3046\uff12\u8981\u7d20\u540c\u58eb\u3092\u5f15\u304d\u7b97\u3059\u308b\u3002\n\n___\n\n\uff08 \u53c2\u8003 \uff09_zipWith_\u95a2\u6570\n\n* [\u7d50\u57ce\u6d69\u306eHaskell\u65e5\u8a18\uff082006/6/3\uff09\u300czipWith\u95a2\u6570\u300d](http://haskell.g.hatena.ne.jp/hyuki/20060603/zipwith)\n\n___\n\n##__\u4e0a\u8a18 \u3092 \u5143\u306b\u3001\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3057\u3066\u307f\u308b__\n\n```{haskell:GHCi}\nPrelude Data.List> let stock_list = [399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List| \nPrelude Data.List>\n```\n\n* \u5f53\u671f\u306e\u30c7\u30fc\u30bf \u3068\u30011\u671f\u524d\u306e\u30c7\u30fc\u30bf \u3069\u3046\u3057 \u3092 \u6642\u9593\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u3001\uff12\u9805\u4e57\u7b97\u5b50 \u306b \u6e21\u3057\u3066 \u4e57\u7b97\u9069\u7528 \u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\n\n```{haskell:GHCi}\nPrelude Data.List> let generate_1st_order_auto_multiply_list ls = zipWith (*) (tail ls) ls\nPrelude Data.List| \nPrelude Data.List>\n```\n\n* \u65e5\u7d4c\u5e73\u5747\u7d42\u5024\u306e\u65e5\u6b21\u30c7\u30fc\u30bf\uff08\u90e8\u5206\uff09 \u306b \u95a2\u6570 \u3092 \u9069\u7528\u3059\u308b\n\n```{haskell:GHCi}\nPrelude Data.List> let auto_multiply_list = generate_1st_order_auto_multiply_list stock_list\nPrelude Data.List| \nPrelude Data.List>\nPrelude Data.List> auto_multiply_list \n[1399634522425,-11899771906850,-31962891628080,-90238685974416,-84477211215990,-58081137388430,-7919678985582,1920208777158,-4640510545856,-1159479529376,-839586735190,-12598487714490]\nPrelude Data.List>\n```\n\n* \u5f97\u3089\u308c\u305f\uff08\u5404\u8981\u7d20\u306e\u5024\uff09\u300c\u5f53\u671f\u306e\u30c7\u30fc\u30bf \u3068\u30011\u671f\u524d\u306e\u30c7\u30fc\u30bf\u306e\u4e57\u7b97\u7d50\u679c\u300d\u30ea\u30b9\u30c8 \u3092 \u5408\u8a08\u3059\u308b\n\n```{haskell:GHCi}\nPrelude Data.List> let sum_value = sum(auto_multiply_list)\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> sum_value \n-300497598324677\nPrelude Data.List>\n```\n\n* \u5408\u8a08\u5024 \u3092 \u30c7\u30fc\u30bf\u306e\u8981\u7d20\u6570 \u3067 \u5272\u308a\u7b97\u3059\u308b\n\n__\u5f90\u7b97\uff12\u9805\u6f14\u7b97\u5b50\uff08/\uff09\u3092\u4f7f\u3046\u3068\u3001\u578b\u63a8\u8ad6\u30a8\u30e9\u30fc \u306b \u306a\u308b\u3002__\n\uff08 _Fractional_\u578b\u306e\u306f\u305a\u306a\u306e\u306b\u3001\u305d\u306e\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 \u306b \u5bfe\u3057\u3066 \u9069\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3001\u3068\u3044\u3046\u30a8\u30e9\u30fc\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8 \uff09\n\n```{haskell:GHCi}\nPrelude Data.List> let first_auto_corr_value = sum_value / (length stock_list)\nPrelude Data.List| \n\n<interactive>:320:39:\n    No instance for (Fractional Int) arising from a use of \u2018/\u2019\n    In the expression: sum_value / (length stock_list)\n    In an equation for \u2018first_auto_corr_value\u2019:\n        first_auto_corr_value = sum_value / (length stock_list)\nPrelude Data.List>\n```\n\n* [Hatnea Blog MEMOcho-\uff082014/03/18\uff09\u300chaskell\u3067\u5272\u308a\u7b97\u3059\u308b\u3068\u304d\u300d](http://jsapachehtml.hatenablog.com/entry/2014/03/18/074526)\n\n> \u3088\u3063\u3066/\u306b\u3088\u3063\u3066\u5272\u308a\u7b97\u3059\u308b\u5834\u5408\u306f\uff12\u5f15\u6570\u3068\u3082Fractional\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5fc5\u8981\u304c\u3042\u308b\n>\u305d\u3053\u3067\u4f7f\u3046\u306e\u304cfromIntegral\n>\n>```{haskell:}\n>*Main> :t fromIntegral \n>fromIntegral :: (Integral a, Num b) => a -> b\n>```\n>\n>\u3053\u308c\u306b\u3088\u3063\u3066Int\u3092Num\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u306b/\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067haskell\u304c\u578b\u63a8\u8ad6\u306b\u3088\u3063\u3066\n>Fractional\u3068\u3057\u3066\u6271\u3063\u3066\u304f\u308c\u308b\u3002\u3064\u307e\u308a\u3053\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\n>\n>```{haskell:}\n>myceiling :: Int -> Int -> Int\n>myceiling m n = ceiling $ (fromIntegral m) / (fromIntegral n)\n>```\n\n__\u4eca\u5ea6 \u306f \u6210\u529f__\n\n###__\u4ee5\u4e0b \u304c\u3001\u65e5\u7d4c\u5e73\u5747\u7d42\u5024\u306e\u65e5\u6b21\u30c7\u30fc\u30bf\uff08\u90e8\u5206\uff09 \u306e \u81ea\u5df1\u76f8\u95a2\u4fc2\u6570__\n\n```{haskell:GHCi}\nPrelude Data.List> let first_auto_corr_value = (fromIntegral sum_value) / (fromIntegral(length stock_list))\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> first_auto_corr_value\n-2.3115199871129e13\nPrelude Data.List> \n```\n\n##__\uff08 \u95a2\u6570\u5b9a\u7fa9 \uff09__\n\n###__\u4ee5\u4e0a \u3092 \u95a2\u6570 \u306b \u3059\u308b__\n\n__\uff08 \u95a2\u6570\u5b9a\u7fa9 \uff09__\n\n```{haskell:GHCi}\nPrelude Data.List> let first_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_1st_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_1st_order_auto_multiply_list l = zipWith (*) (tail l) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n__\uff08 \u95a2\u6570\u306e\u578b \u3092 \u78ba\u8a8d \uff09__\n\n```{haskell:GHCi}\nPrelude Data.List> :t first_order_auto_correration \nfirst_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List>\n```\n\n```{haskell:GHCi} \nPrelude Data.List> let stock_list = [399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List| \nPrelude Data.List> \nPrelude Data.List> stock_list\n[399935,3499655,-3400270,9400104,-9599754,8799935,-6600178,1199919,1600282,-2899808,399847,-2099770,5999937]\nPrelude Data.List>\n```\n\n__\uff08 \u95a2\u6570 \u3092 \u682a\u4fa1\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u30ea\u30b9\u30c8\uff08_[Int]_\u578b\uff09 \u306b \u9069\u7528 \uff09\n\n```{haskell:GHCi} \nPrelude Data.List> first_order_auto_correration stock_list\n-2.3115199871129e13\nPrelude Data.List>\n```\n\n<img width=\"1212\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 18.07.46.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/77a71862-f9bb-bc82-aa4f-e2d53be106e5.png\">\n\n<img width=\"1214\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 18.08.26.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/f3efaa1e-b379-92f0-5787-9edcb9fce610.png\">\n\n##__\uff12\u968e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b__\n\n####__\uff08 \u5909\u66f4\u70b9 \uff09__ \n\n* __\u4ee5\u4e0b\u306e tail \u3092 \uff11\u3064\u5897\u3084\u3057\u3066\u3001\uff12\u56de\u9069\u7528\u3059\u308b\u3088\u3046\u6539\u3081\u308b__\n\n> where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\n\n```{haskell:GHCi} \nPrelude Data.List> let second_order_auto_correration l = let n = length l\nPrelude Data.List|                                           sum_value = sum(generate_2nd_order_auto_multiply_list l)\nPrelude Data.List|                                       in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail (tail l)) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n```{haskell:GHCi} \nPrelude Data.List> :t second_order_auto_correration \nsecond_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List> \n```\n\n####__\u65e5\u7d4c225\u30c7\u30fc\u30bf \u306b \u5bfe\u3057\u3066 \u9069\u7528\u3057\u305f \u7d50\u679c__\n\n```{haskell:GHCi}\nPrelude Data.List> second_order_auto_correration stock_list\n1.6608058608836309e13\nPrelude Data.List> \n```\n\n<img width=\"1201\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 18.20.35.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/ed866544-2baf-ce69-c96e-f6505a81550d.png\">\n\n\n##__\uff13\u968e\u81ea\u5df1\u76f8\u95a2\u4fc2\u6570 \u3092 \u7b97\u51fa\u3059\u308b \u95a2\u6570 \u3092 \u5b9a\u7fa9\u3059\u308b__\n\n####__\uff08 \u5909\u66f4\u70b9 \uff09__ \n\n* __\u4ee5\u4e0b\u306e tail \u3092 \u3055\u3089\u306b\uff11\u3064\u5897\u3084\u3057\u3066\u3001\uff13\u56de\u9069\u7528\u3059\u308b\u3088\u3046\u6539\u3081\u308b__\n\n> where generate_2nd_order_auto_multiply_list l = zipWith (*) (tail(tail (tail l))) l\n\n```{haskell:GHCi} \nPrelude Data.List> let third_order_auto_correration l = let n = length l\nPrelude Data.List|                                          sum_value = sum(generate_3rd_order_auto_multiply_list l)\nPrelude Data.List|                                      in (fromIntegral sum_value) / (fromIntegral n)\nPrelude Data.List|                                        where generate_3rd_order_auto_multiply_list l = zipWith (*) (tail (tail (tail l))) l\nPrelude Data.List| \nPrelude Data.List>\n```\n\n```{haskell:GHCi} \nPrelude Data.List> :t third_order_auto_correration \nthird_order_auto_correration\n  :: (Fractional a1, Integral a) => [a] -> a1\nPrelude Data.List>\n```\n\n```{haskell:GHCi} \nPrelude Data.List> third_order_auto_correration stock_list \n-9.259793630759e12\nPrelude Data.List> \n```\n\n<img width=\"1196\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-28 18.21.07.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/71f1676e-1af9-f970-d98c-3ebd0be2ed0b.png\">\n", "tags": ["Haskell", "\u6642\u7cfb\u5217\u89e3\u6790", "statistics", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "\u95a2\u6570\u578b\u8a00\u8a9e"]}