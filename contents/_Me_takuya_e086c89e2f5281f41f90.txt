{"context": "pcl\u304c\u4f7f\u3048\u308b\u30bb\u30f3\u30b5\u30fc\u306fKinect v2\u306a\u3069\u591a\u6570\u5b58\u5728\u3059\u308b\u3002\nPCL\u306e\u5927\u307e\u304b\u306a\u4f7f\u3044\u65b9\u306fDERiVE \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30d6\u30ed\u30b0\u300cPCL\u3092\u89e6\u3063\u3066\u307f\u3088\u3046\u300d(\u516817\u56de)\u304c\u8a73\u3057\u3044\u3002\n\u4eca\u56de\u306f\u305f\u307e\u305f\u307e VLP \u3068\u547c\u3070\u308c\u308b\u30bb\u30f3\u30b5\u30fc\u3092\u6271\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u8981\u70b9\u3092\u30e1\u30e2\u3002\n\nPCL\u306e\u578b\u306b\u3064\u3044\u3066\n\n\u70b9\u7fa4\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3068\u304d\u306b\u306f\u3001\n\n\npcl::PointCloudpcl::PointXYZRGB::Ptr cloud (new pcl::PointCloudpcl::PointXYZRGB);\n pcl::PointCloudpcl::PointXYZ::Ptr cloud (new pcl::PointCloudpcl::PointXYZ);\n pcl::PointCloudpcl::PointXYZI::Ptr cloud (new pcl::PointCloudpcl::PointXYZI);\n\n\n\u306a\u3069\u306e\u5ba3\u8a00\u65b9\u6cd5\u304c\u3042\u308b\u3002\npcl::PointXYZRGB\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\uff0b\u8272\u60c5\u5831RGB\u3002\npcl::PointXYZ\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\u3002\npcl::PointXYZI\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\uff0b\u8f1d\u5ea6\u5024\u3002\n\u3053\u308c\u3089\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3042\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3088\u3063\u3066\u306f(\u7279\u306b\u5c11\u3057\u524d\u306e)\u3001pcl::PointXYZ\u578b\u304c\u3084\u305f\u3089\u3068\u591a\u3044\u306e\u3067\u3001\u3082\u3057\u8272\u60c5\u5831\u3082viewer\u306b\u8868\u793a\u3055\u305b\u305f\u3044\u3068\u304d\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u9055\u3046\u578b\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u3044\u3068\u304d\u306f\u3001pcl::copyPointCloud \u3092\u4f7f\u3046\u3002\u305f\u3060\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u3068\u3057\u3066\u3082\u3001pcl::PointXYZ \u304b\u3089 pcl::PointXYZRGB\u306e\u5909\u63db\u3067\u306f\u3001\u8272\u60c5\u5831\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\nPCL\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\n\nPCL\u306f\u3001\u5e73\u9762\u9664\u53bb\u3084\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u69d8\u3005\u306a\u5b9f\u88c5\u304c\u65e2\u306b\u3055\u308c\u3066\u304a\u308a\u3001\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044( \u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb ) \u3002\n\nPassThrough Filter\n\n\u3053\u308c\u306f\u3001\u63a2\u7d22\u7bc4\u56f2\u3092\u9650\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001XYZ\u306e\u5404\u8ef8\u3054\u3068\u306b\u8a2d\u5b9a\u304c\u3067\u304d\u308b\n\u4f8b\u3048\u3070\u3001X\u8ef8\u306e\u307f\u3092\u63a2\u7d22\u3059\u308b\u5834\u5408\n        pcl::PassThrough<pcl::PointXYZI> pass;\n        pass.setInputCloud (cloud);\n        pass.setFilterFieldName (\"x\");\n        pass.setFilterLimits (\u6700\u5c0f\u5024,\u6700\u5927\u5024);\n\n\u3068\u8a2d\u5b9a\u3059\u308b\u3002\u30bb\u30f3\u30b5\u30fc\u306e\u5206\u89e3\u80fd\u306b\u3082\u3088\u308b\u304c\u3053\u306e\u969b\u3001\u3042\u307e\u308a\u5c0f\u3055\u306a\u7bc4\u56f2\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u304b\u3051\u3066\u3057\u307e\u3046\u3068\u70b9\u7fa4\u304c\u5f97\u3089\u308c\u306a\u3044\u3002XYZ\u3059\u3079\u3066\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u304b\u3051\u305f\u3044\u5834\u5408\u306f\u3001X\u2192Y\u2192Z\u306e\u9806\u756a\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u5e73\u9762\u9664\u53bb(Surface segmentation)\n\n        pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new    pcl::PointCloud<pcl::PointXYZRGB>);\n        pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);\n        pcl::PointIndices::Ptr inliers (new pcl::PointIndices);\n\n        pcl::SACSegmentation<pcl::PointXYZRGB> seg;\n\n        seg.setOptimizeCoefficients (true);\n        // Mandatory\n        seg.setModelType (pcl::SACMODEL_PLANE);//\u691c\u51fa\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\n        seg.setMethodType (pcl::SAC_RANSAC);//\u691c\u51fa\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u6307\u5b9a\n        seg.setDistanceThreshold (0.1);//RANSAC\u306e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u8a31\u5bb9\u8aa4\u5dee\u7bc4\u56f2\n        seg.setMaxIterations(100);\n        seg.setProbability(0.95);\n\n\n        pcl::ExtractIndices<pcl::PointXYZRGB> extract;\n        pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_output (new pcl::PointCloud<pcl::PointXYZRGB>);//\u70b9\u7fa4\u3092\u4fdd\u5b58\n        extract.setInputCloud(cloud);\n        extract.setIndices(inliers);\n        extract.setNegative(true);//true\u306e\u5834\u5408\u51fa\u529b\u306f\u691c\u51fa\u3055\u308c\u305f\u5e73\u9762\u4ee5\u5916\u306e\u30c7\u30fc\u30bf false\u306e\u5834\u5408\u306f\u5e73\u9762\u306e\u30c7\u30fc\u30bf\n        extract.filter(*cloud_output);\n\n\u3053\u3053\u3067\u306fRANSAC\u3092\u7528\u3044\u3066\u5e73\u9762\u306e\u691c\u51fa\u3092\u884c\u3063\u3066\u3044\u308b\u3002setDistanceThreshold\u306e\u95be\u5024\u3092\u9ad8\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u5e73\u9762\u306e\u691c\u51fa\u306f\u30b7\u30d3\u30a2\u306b\u306a\u308b\u3002\n\u9664\u53bb\u3055\u308c\u308b\u5e73\u9762\u306f\u3001\u691c\u51fa\u3055\u308c\u305f\u5e73\u9762\u306e\u306a\u304b\u3067\u4e00\u756a\u9762\u7a4d\u304c\u5927\u304d\u3044\u5e73\u9762\u3067\u3042\u308b\u3002\u540c\u3058\u51e6\u7406\u3092\u304a\u3053\u306a\u3048\u3070\u3001\u5e73\u9762\u3092\u4e8c\u56de\u9664\u53bb\u3067\u304d\u308b\u3002\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\nPCL\u306a\u3069\u3092\u6271\u3046\u969b\u306b\u306f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u304c\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u3001Min-cut based Algorithm\u306a\u3069\u306f\u4e2d\u3005\u4f7f\u3044\u306b\u304f\u3044\u3002kdtree\u3084octree\u3092\u4f7f\u3046\u306e\u304c\u9069\u5207\u3067\u3042\u308b\u3002\n        pcl::search::KdTree<pcl::PointXYZ>::Ptr tree (new \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000pcl::search::KdTree<pcl::PointXYZ>);\n        tree->setInputCloud (cloud);\n        std::vector<pcl::PointIndices> cluster_indices;\n        pcl::EuclideanClusterExtraction<pcl::PointXYZ> ec;\n        ec.setClusterTolerance (0.1); // 0.02\u306a\u30892cm\u3000VLP\u306f\u5206\u89e3\u80fd\u306f\u4f4e\u3081\u306a\u306e\u3067\u8a31\u5bb9\u7bc4\u56f2\u306f\u5e83\u304f\n        ec.setMinClusterSize (100);//\u70b9\u7fa4\u306e\u6700\u5c0f\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\n        ec.setMaxClusterSize (2500);//\u70b9\u7fa4\u306e\u6700\u5927\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\n        ec.setSearchMethod (tree);\n        ec.setInputCloud (cloud);\n        ec.extract (cluster_indices);\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3001kdtree\u3092\u7528\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u3053\u306e\u30af\u30e9\u30b9\u30bf\u4e00\u3064\u4e00\u3064\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u306b\u306f\u3001for\u6587\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nfor (std::vectorpcl::PointIndices::const_iterator it = cluster_indices.begin (); it != cluster_indices.end (); ++it)\n\n\u3068\u3044\u3046\u98a8\u306b\u66f8\u304f\u3002\n\u6b21\u56de\u3082\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u969b\u306b\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8a18\u8f09\u3059\u308b\u3064\u3082\u308a\u3067\u3059\uff3c(_ _\u3002\uff09\u3002\npcl\u304c\u4f7f\u3048\u308b\u30bb\u30f3\u30b5\u30fc\u306fKinect v2\u306a\u3069\u591a\u6570\u5b58\u5728\u3059\u308b\u3002\nPCL\u306e\u5927\u307e\u304b\u306a\u4f7f\u3044\u65b9\u306fDERiVE \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30d6\u30ed\u30b0[\u300cPCL\u3092\u89e6\u3063\u3066\u307f\u3088\u3046\u300d](http://derivecv.tumblr.com/tagged/PCL%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%EF%BC%81)(\u516817\u56de)\u304c\u8a73\u3057\u3044\u3002\n\n\u4eca\u56de\u306f\u305f\u307e\u305f\u307e VLP \u3068\u547c\u3070\u308c\u308b\u30bb\u30f3\u30b5\u30fc\u3092\u6271\u3046\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u8981\u70b9\u3092\u30e1\u30e2\u3002\n### **PCL\u306e\u578b\u306b\u3064\u3044\u3066**\n\u70b9\u7fa4\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3068\u304d\u306b\u306f\u3001\n> - pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZRGB>);\n-  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);\n-  pcl::PointCloud<pcl::PointXYZI>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZI>);\n\n\u306a\u3069\u306e\u5ba3\u8a00\u65b9\u6cd5\u304c\u3042\u308b\u3002\npcl::PointXYZRGB\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\uff0b\u8272\u60c5\u5831RGB\u3002\npcl::PointXYZ\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\u3002\npcl::PointXYZI\u578b\u306f\u3001\u70b9\u7fa4\u306e\u4f4d\u7f6e\u60c5\u5831\uff0b\u8f1d\u5ea6\u5024\u3002\n\n\u3053\u308c\u3089\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3042\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u3088\u3063\u3066\u306f(\u7279\u306b\u5c11\u3057\u524d\u306e)\u3001pcl::PointXYZ\u578b\u304c\u3084\u305f\u3089\u3068\u591a\u3044\u306e\u3067\u3001\u3082\u3057\u8272\u60c5\u5831\u3082viewer\u306b\u8868\u793a\u3055\u305b\u305f\u3044\u3068\u304d\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3042\u308b\u3002\n\u9055\u3046\u578b\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u3044\u3068\u304d\u306f\u3001pcl::copyPointCloud \u3092\u4f7f\u3046\u3002\u305f\u3060\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u3068\u3057\u3066\u3082\u3001pcl::PointXYZ \u304b\u3089 pcl::PointXYZRGB\u306e\u5909\u63db\u3067\u306f\u3001\u8272\u60c5\u5831\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\n### **PCL\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066**\n\nPCL\u306f\u3001\u5e73\u9762\u9664\u53bb\u3084\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u69d8\u3005\u306a\u5b9f\u88c5\u304c\u65e2\u306b\u3055\u308c\u3066\u304a\u308a\u3001\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044( [\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://pointclouds.org/documentation/) ) \u3002\n\n#### **PassThrough Filter**\n\u3053\u308c\u306f\u3001\u63a2\u7d22\u7bc4\u56f2\u3092\u9650\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001XYZ\u306e\u5404\u8ef8\u3054\u3068\u306b\u8a2d\u5b9a\u304c\u3067\u304d\u308b\n\u4f8b\u3048\u3070\u3001X\u8ef8\u306e\u307f\u3092\u63a2\u7d22\u3059\u308b\u5834\u5408\n\n            pcl::PassThrough<pcl::PointXYZI> pass;\n            pass.setInputCloud (cloud);\n            pass.setFilterFieldName (\"x\");\n            pass.setFilterLimits (\u6700\u5c0f\u5024,\u6700\u5927\u5024);\n\n\u3068\u8a2d\u5b9a\u3059\u308b\u3002\u30bb\u30f3\u30b5\u30fc\u306e\u5206\u89e3\u80fd\u306b\u3082\u3088\u308b\u304c\u3053\u306e\u969b\u3001\u3042\u307e\u308a\u5c0f\u3055\u306a\u7bc4\u56f2\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u304b\u3051\u3066\u3057\u307e\u3046\u3068\u70b9\u7fa4\u304c\u5f97\u3089\u308c\u306a\u3044\u3002XYZ\u3059\u3079\u3066\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u304b\u3051\u305f\u3044\u5834\u5408\u306f\u3001X\u2192Y\u2192Z\u306e\u9806\u756a\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n#### **\u5e73\u9762\u9664\u53bb(Surface segmentation)**\n\n            pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new    pcl::PointCloud<pcl::PointXYZRGB>);\n            pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);\n            pcl::PointIndices::Ptr inliers (new pcl::PointIndices);\n            \n            pcl::SACSegmentation<pcl::PointXYZRGB> seg;\n            \n            seg.setOptimizeCoefficients (true);\n            // Mandatory\n            seg.setModelType (pcl::SACMODEL_PLANE);//\u691c\u51fa\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30bf\u30a4\u30d7\u3092\u6307\u5b9a\n            seg.setMethodType (pcl::SAC_RANSAC);//\u691c\u51fa\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u6307\u5b9a\n            seg.setDistanceThreshold (0.1);//RANSAC\u306e\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u8a31\u5bb9\u8aa4\u5dee\u7bc4\u56f2\n            seg.setMaxIterations(100);\n            seg.setProbability(0.95);\n\n\n            pcl::ExtractIndices<pcl::PointXYZRGB> extract;\n            pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_output (new pcl::PointCloud<pcl::PointXYZRGB>);//\u70b9\u7fa4\u3092\u4fdd\u5b58\n            extract.setInputCloud(cloud);\n            extract.setIndices(inliers);\n            extract.setNegative(true);//true\u306e\u5834\u5408\u51fa\u529b\u306f\u691c\u51fa\u3055\u308c\u305f\u5e73\u9762\u4ee5\u5916\u306e\u30c7\u30fc\u30bf false\u306e\u5834\u5408\u306f\u5e73\u9762\u306e\u30c7\u30fc\u30bf\n            extract.filter(*cloud_output);\n\n\u3053\u3053\u3067\u306fRANSAC\u3092\u7528\u3044\u3066\u5e73\u9762\u306e\u691c\u51fa\u3092\u884c\u3063\u3066\u3044\u308b\u3002setDistanceThreshold\u306e\u95be\u5024\u3092\u9ad8\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u5e73\u9762\u306e\u691c\u51fa\u306f\u30b7\u30d3\u30a2\u306b\u306a\u308b\u3002\n\n\u9664\u53bb\u3055\u308c\u308b\u5e73\u9762\u306f\u3001\u691c\u51fa\u3055\u308c\u305f\u5e73\u9762\u306e\u306a\u304b\u3067\u4e00\u756a\u9762\u7a4d\u304c\u5927\u304d\u3044\u5e73\u9762\u3067\u3042\u308b\u3002\u540c\u3058\u51e6\u7406\u3092\u304a\u3053\u306a\u3048\u3070\u3001\u5e73\u9762\u3092\u4e8c\u56de\u9664\u53bb\u3067\u304d\u308b\u3002\n\n#### **\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0**\n\nPCL\u306a\u3069\u3092\u6271\u3046\u969b\u306b\u306f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u304c\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u3001Min-cut based Algorithm\u306a\u3069\u306f\u4e2d\u3005\u4f7f\u3044\u306b\u304f\u3044\u3002kdtree\u3084octree\u3092\u4f7f\u3046\u306e\u304c\u9069\u5207\u3067\u3042\u308b\u3002\n\n            pcl::search::KdTree<pcl::PointXYZ>::Ptr tree (new \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000pcl::search::KdTree<pcl::PointXYZ>);\n            tree->setInputCloud (cloud);\n            std::vector<pcl::PointIndices> cluster_indices;\n            pcl::EuclideanClusterExtraction<pcl::PointXYZ> ec;\n            ec.setClusterTolerance (0.1); // 0.02\u306a\u30892cm\u3000VLP\u306f\u5206\u89e3\u80fd\u306f\u4f4e\u3081\u306a\u306e\u3067\u8a31\u5bb9\u7bc4\u56f2\u306f\u5e83\u304f\n            ec.setMinClusterSize (100);//\u70b9\u7fa4\u306e\u6700\u5c0f\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\n            ec.setMaxClusterSize (2500);//\u70b9\u7fa4\u306e\u6700\u5927\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\n            ec.setSearchMethod (tree);\n            ec.setInputCloud (cloud);\n            ec.extract (cluster_indices);\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3001kdtree\u3092\u7528\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u3053\u306e\u30af\u30e9\u30b9\u30bf\u4e00\u3064\u4e00\u3064\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u306b\u306f\u3001for\u6587\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n>for (std::vector<pcl::PointIndices>::const_iterator it = cluster_indices.begin (); it != cluster_indices.end (); ++it)\n\n\u3068\u3044\u3046\u98a8\u306b\u66f8\u304f\u3002\n\n\u6b21\u56de\u3082\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u969b\u306b\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8a18\u8f09\u3059\u308b\u3064\u3082\u308a\u3067\u3059\uff3c(_ _\u3002\uff09\u3002\n", "tags": ["PCL", "C++"]}