{"context": " More than 1 year has passed since last update.\u7d14\u7c8b\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\uff0cBinomial Heap\u306e\u6b21\u306f\u8d64\u9ed2\u6728\u306e\u7d39\u4ecb\u3067\u3059\uff0e\n\u305f\u3060\uff0c\u6b63\u76f4\u306a\u3068\u3053\u308d\uff0c\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u306a\u8d64\u9ed2\u6728\u306f\u666e\u901a\u306e\u8d64\u9ed2\u6728\u3068\u6bd4\u3079\u3066\u76ee\u65b0\u3057\u3044\u3053\u3068\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u3055\u304f\u3063\u3068\u7d42\u308f\u3089\u305b\u307e\u3059\uff0e\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\uff0c\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u3044\u306a\u3044\u3088\u3046\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff08\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u304c\uff09\uff0c\u3053\u308c\u306b\u3088\u308a\u6728\u306e\u56de\u8ee2\u306e\u3088\u3046\u306a\uff0c\u30dd\u30a4\u30f3\u30bf\u3067\u5b9f\u88c5\u3059\u308b\u3068\u9762\u5012\u306a\u5834\u5408\u5206\u3051\u304c\u5fc5\u8981\u306a\u90e8\u5206\u3092\u697d\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\u8d64\u9ed2\u6728\u306e\u5834\u5408\u306f\uff0c\u6728\u3092\u5e73\u8861\u306b\u3059\u308b\u51e6\u7406\u306e\u5834\u5408\u308f\u3051\u304c\uff0c\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408\u306f8\u30d1\u30bf\u30fc\u30f3\u306b\u5bfe\u5fdc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u306b\u5bfe\u3057\uff0c\u95a2\u6570\u578b\u306e\u5834\u5408\u306f4\u30d1\u30bf\u30fc\u30f3\u306e\u5bfe\u5fdc\u3067\u6e08\u307f\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u308c\u4ee5\u5916\u306f\u3042\u307e\u308a\u5909\u5316\u304c\u306a\u3044\u2026\n\u4ee5\u4e0b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\uff0e PFDS\u3067\u306f\uff0c\u8d64\u9ed2\u6728\u306eSet\u304c\u7d39\u4ecb\u3055\u308c\u3066\u307e\u3059\u304c\uff0c\u4eca\u56de\u306fMap\u7248\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\uff0e\ntype Color = R | B\ntype Tree<'a, 'b when 'a : comparison> = \n    | E\n    | T of \n        Color *\n        Tree<'a, 'b> *\n        key : 'a *\n        elem : 'b *\n        Tree<'a, 'b>\n\nlet rec contains x = function\n    | E -> false\n    | (T(_, left, key, _, right)) ->\n        if x < key then contains x left\n        else if x > key then contains x right\n        else true \n\n// \u4ee5\u4e0b\u306e\u56db\u30d1\u30bf\u30fc\u30f3\u3078\u306e\u5bfe\u5fdc\u3067\u6e08\u3080\nlet balance color left key elem right =\n    match color, left, key, elem, right with\n    | (B, T(R, T(R, a, x, xe, b), y, ye, c), z, ze, d) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, T(R, a, x, xe, T(R, b, y, ye, c)), z, ze, d) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, a, x, xe, T(R, T(R, b, y, ye, c), z, ze, d)) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, a, x, xe, T(R, b, y, ye, T(R, c, z, ze, d))) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | _ -> T(color, left, key, elem, right)\n\nlet insert x e s =\n    let rec ins = function\n        | E -> T(R, E, x, e, E)\n        | T(color, a, y, ye, b) ->\n            if x < y then balance color (ins a) y ye b\n            else if x > y then balance color a y ye (ins b)\n            else T(color, a, x, e, b)\n    let (T(_, a, y, ye, b)) = ins s\n    T(B, a, y, ye, b)\n\nlet empty = E\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30df\u30c3\u30af\u306b\u9762\u767d\u3044\u7279\u5fb4\u304c\u3042\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u306e\u3067\uff0c\u4eca\u56de\u306f\u3053\u308c\u3067\u7d42\u308f\u308a\uff0e\n\nFuture Work\ndelete\u306e\u5b9f\u88c5\uff0e\u4e88\u5b9a\u306f\u672a\u5b9a\uff0e\n\u7d14\u7c8b\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\uff0cBinomial Heap\u306e\u6b21\u306f\u8d64\u9ed2\u6728\u306e\u7d39\u4ecb\u3067\u3059\uff0e\n\n\u305f\u3060\uff0c\u6b63\u76f4\u306a\u3068\u3053\u308d\uff0c\u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020\u306a\u8d64\u9ed2\u6728\u306f\u666e\u901a\u306e\u8d64\u9ed2\u6728\u3068\u6bd4\u3079\u3066\u76ee\u65b0\u3057\u3044\u3053\u3068\u304c\u3042\u307e\u308a\u306a\u3044\u306e\u3067\u3055\u304f\u3063\u3068\u7d42\u308f\u3089\u305b\u307e\u3059\uff0e\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\uff0c\u30dd\u30a4\u30f3\u30bf\u3092\u7528\u3044\u306a\u3044\u3088\u3046\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u306e\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff08\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u304c\uff09\uff0c\u3053\u308c\u306b\u3088\u308a\u6728\u306e\u56de\u8ee2\u306e\u3088\u3046\u306a\uff0c\u30dd\u30a4\u30f3\u30bf\u3067\u5b9f\u88c5\u3059\u308b\u3068\u9762\u5012\u306a\u5834\u5408\u5206\u3051\u304c\u5fc5\u8981\u306a\u90e8\u5206\u3092\u697d\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\n\u8d64\u9ed2\u6728\u306e\u5834\u5408\u306f\uff0c\u6728\u3092\u5e73\u8861\u306b\u3059\u308b\u51e6\u7406\u306e\u5834\u5408\u308f\u3051\u304c\uff0c\u30dd\u30a4\u30f3\u30bf\u306e\u5834\u5408\u306f8\u30d1\u30bf\u30fc\u30f3\u306b\u5bfe\u5fdc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u306b\u5bfe\u3057\uff0c\u95a2\u6570\u578b\u306e\u5834\u5408\u306f4\u30d1\u30bf\u30fc\u30f3\u306e\u5bfe\u5fdc\u3067\u6e08\u307f\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u308c\u4ee5\u5916\u306f\u3042\u307e\u308a\u5909\u5316\u304c\u306a\u3044\u2026\n\n\u4ee5\u4e0b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\uff0e PFDS\u3067\u306f\uff0c\u8d64\u9ed2\u6728\u306eSet\u304c\u7d39\u4ecb\u3055\u308c\u3066\u307e\u3059\u304c\uff0c\u4eca\u56de\u306fMap\u7248\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\uff0e\n\n```fsharp\ntype Color = R | B\ntype Tree<'a, 'b when 'a : comparison> = \n    | E\n    | T of \n        Color *\n        Tree<'a, 'b> *\n        key : 'a *\n        elem : 'b *\n        Tree<'a, 'b>\n\nlet rec contains x = function\n    | E -> false\n    | (T(_, left, key, _, right)) ->\n        if x < key then contains x left\n        else if x > key then contains x right\n        else true \n\n// \u4ee5\u4e0b\u306e\u56db\u30d1\u30bf\u30fc\u30f3\u3078\u306e\u5bfe\u5fdc\u3067\u6e08\u3080\nlet balance color left key elem right =\n    match color, left, key, elem, right with\n    | (B, T(R, T(R, a, x, xe, b), y, ye, c), z, ze, d) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, T(R, a, x, xe, T(R, b, y, ye, c)), z, ze, d) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, a, x, xe, T(R, T(R, b, y, ye, c), z, ze, d)) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | (B, a, x, xe, T(R, b, y, ye, T(R, c, z, ze, d))) -> T(R, T(B, a, x, xe, b), y, ye, T(B, c, z, ze, d))\n    | _ -> T(color, left, key, elem, right)\n\nlet insert x e s =\n    let rec ins = function\n        | E -> T(R, E, x, e, E)\n        | T(color, a, y, ye, b) ->\n            if x < y then balance color (ins a) y ye b\n            else if x > y then balance color a y ye (ins b)\n            else T(color, a, x, e, b)\n    let (T(_, a, y, ye, b)) = ins s\n    T(B, a, y, ye, b)\n\nlet empty = E\n```\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30df\u30c3\u30af\u306b\u9762\u767d\u3044\u7279\u5fb4\u304c\u3042\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u306e\u3067\uff0c\u4eca\u56de\u306f\u3053\u308c\u3067\u7d42\u308f\u308a\uff0e\n\n\n# Future Work\ndelete\u306e\u5b9f\u88c5\uff0e\u4e88\u5b9a\u306f\u672a\u5b9a\uff0e\n\n", "tags": ["\u95a2\u6570\u578b\u8a00\u8a9e", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "F#"]}