{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nhttp://dev.classmethod.jp/cloud/aws/iam-role-accesskey/\nVersion 1\u306e\u5834\u5408\u306e\u8aac\u660e\u306f\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u3066\u307e\u3057\u305f\u304c\u3001Version 2\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u8eab\u304cVersion 1\u3068\u5168\u304f\u9055\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u306e\u5b9f\u884c\u9806\u5e8f\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\ndef resolve\n  providers.each do |method_name, options|\n    provider = send(method_name, options.merge(config: @config))\n    return provider if provider && provider.set?\n  end\n  nil\nend\n\ndef providers\n  [\n    [:static_credentials, {}],\n    [:env_credentials, {}],\n    [:shared_credentials, {}],\n    [:instance_profile_credentials, {\n       retries: 0,\n       http_open_timeout: 1,\n       http_read_timeout: 1,\n    }],\n  ]\nend\n\n\nstatic_credentials\nenv_credentials\nshared_credentials\ninstance_profile_credentials\n\n\u306e\u9806\u306b\u5b9f\u884c\u3055\u308c\u308b\u304c\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u304c\u53d6\u5f97\u3067\u304d\u305f\u3089\u305d\u3053\u3067\u51e6\u7406\u306f\u7d42\u4e86\u3002\n\nstatic_credentials\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\ndef static_credentials(options)\n  config = options[:config]\n  Credentials.new(\n    config.access_key_id,\n    config.secret_access_key,\n    config.session_token)\nend\n\n\u5f15\u6570\u3067\u6e21\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u304c\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n\u4f8b\nAws::EC2::Client.new(\n  access_key_id: 'access key',\n  secret_access_key: 'secret access key'\n)\n\n\nenv_credentials\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\ndef env_credentials(options)\n  key =    %w(AWS_ACCESS_KEY_ID     AMAZON_ACCESS_KEY_ID     AWS_ACCESS_KEY)\n  secret = %w(AWS_SECRET_ACCESS_KEY AMAZON_SECRET_ACCESS_KEY AWS_SECRET_KEY)\n  token =  %w(AWS_SESSION_TOKEN     AMAZON_SESSION_TOKEN)\n  Credentials.new(envar(key), envar(secret), envar(token))\nend\n\n\u74b0\u5883\u5909\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u304c\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\nshared_credentials\naws-sdk-core/lib/aws-sdk-core/shared_credentials.rb\n.aws/credentials\u306b\u66f8\u3044\u305f\u8a2d\u5b9a\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\ninstance_profile_credentials\naws-sdk-core/lib/aws-sdk-core/instance_profile_credentials.rb\ndef refresh\n  # Retry loading credentials up to 3 times is the instance metadata\n  # service is responding but is returning invalid JSON documents\n  # in response to the GET profile credentials call.\n  retry_errors([JSON::ParserError, StandardError], max_retries: 3) do\n    c = JSON.parse(get_credentials.to_s)\n    @credentials = Credentials.new(\n      c['AccessKeyId'],\n      c['SecretAccessKey'],\n      c['Token']\n    )\n    @expiration = c['Expiration'] ? Time.parse(c['Expiration']) : nil\n  end\nend\n\ndef get_credentials\n  # Retry loading credentials a configurable number of times if\n  # the instance metadata service is not responding.\n  begin\n    retry_errors(NETWORK_ERRORS, max_retries: @retries) do\n      open_connection do |conn|\n        path = '/latest/meta-data/iam/security-credentials/'\n        profile_name = http_get(conn, path).lines.first.strip\n        http_get(conn, path + profile_name)\n      end\n    end\n  rescue\n    '{}'\n  end\nend\n\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/\n\u3092\u53d6\u5f97\u3059\u308b\u3068\u30ed\u30fc\u30eb\u540d\u304c\u8fd4\u3063\u3066\u6765\u308b\n\u305d\u306e\u30ed\u30fc\u30eb\u540d\u3092\u5143\u306b\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/\u30ed\u30fc\u30eb\u540d\n\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u60c5\u5831\u5165\u3063\u305fJSON\u304c\u8fd4\u3063\u3066\u6765\u308b\u3002\n\u306a\u306e\u3067IAM Role\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nhttp://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\n\n\u74b0\u5883\u306b\u3088\u308b\u5207\u308a\u5206\u3051\u65b9\n\n\u30ed\u30fc\u30ab\u30eb\u306e\u958b\u767a\u74b0\u5883(IAM Role\u304c\u4f7f\u3048\u306a\u3044)\u5834\u5408\n\u74b0\u5883\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3002\n\n\u672c\u756a\u74b0\u5883\u306e\u5834\u5408\nEC2\u3067IAM Role\u4ed8\u304d\u3067\u52d5\u304b\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u74b0\u5883\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3002\n## \u306f\u3058\u3081\u306b\n\nhttp://dev.classmethod.jp/cloud/aws/iam-role-accesskey/\n\nVersion 1\u306e\u5834\u5408\u306e\u8aac\u660e\u306f\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u3066\u307e\u3057\u305f\u304c\u3001Version 2\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u8eab\u304cVersion 1\u3068\u5168\u304f\u9055\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u306e\u5b9f\u884c\u9806\u5e8f\n\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\n\n```rb\ndef resolve\n  providers.each do |method_name, options|\n    provider = send(method_name, options.merge(config: @config))\n    return provider if provider && provider.set?\n  end\n  nil\nend\n\ndef providers\n  [\n    [:static_credentials, {}],\n    [:env_credentials, {}],\n    [:shared_credentials, {}],\n    [:instance_profile_credentials, {\n       retries: 0,\n       http_open_timeout: 1,\n       http_read_timeout: 1,\n    }],\n  ]\nend\n```\n\n1. static_credentials\n2. env_credentials\n3. shared_credentials\n4. instance_profile_credentials\n\n\u306e\u9806\u306b\u5b9f\u884c\u3055\u308c\u308b\u304c\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u304c\u53d6\u5f97\u3067\u304d\u305f\u3089\u305d\u3053\u3067\u51e6\u7406\u306f\u7d42\u4e86\u3002\n\n## static_credentials\n\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\n\n```rb\ndef static_credentials(options)\n  config = options[:config]\n  Credentials.new(\n    config.access_key_id,\n    config.secret_access_key,\n    config.session_token)\nend\n```\n\n\u5f15\u6570\u3067\u6e21\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u304c\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n### \u4f8b\n\n```rb\nAws::EC2::Client.new(\n  access_key_id: 'access key',\n  secret_access_key: 'secret access key'\n)\n```\n\n## env_credentials\n\naws-sdk-core/lib/aws-sdk-core/credential_provider_chain.rb\n\n```rb\ndef env_credentials(options)\n  key =    %w(AWS_ACCESS_KEY_ID     AMAZON_ACCESS_KEY_ID     AWS_ACCESS_KEY)\n  secret = %w(AWS_SECRET_ACCESS_KEY AMAZON_SECRET_ACCESS_KEY AWS_SECRET_KEY)\n  token =  %w(AWS_SESSION_TOKEN     AMAZON_SESSION_TOKEN)\n  Credentials.new(envar(key), envar(secret), envar(token))\nend\n```\n\n\u74b0\u5883\u5909\u6570\u3067\u8a2d\u5b9a\u3057\u305f\u3082\u306e\u304c\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n## shared_credentials\n\naws-sdk-core/lib/aws-sdk-core/shared_credentials.rb\n\n.aws/credentials\u306b\u66f8\u3044\u305f\u8a2d\u5b9a\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n## instance_profile_credentials\n\naws-sdk-core/lib/aws-sdk-core/instance_profile_credentials.rb\n\n```rb\ndef refresh\n  # Retry loading credentials up to 3 times is the instance metadata\n  # service is responding but is returning invalid JSON documents\n  # in response to the GET profile credentials call.\n  retry_errors([JSON::ParserError, StandardError], max_retries: 3) do\n    c = JSON.parse(get_credentials.to_s)\n    @credentials = Credentials.new(\n      c['AccessKeyId'],\n      c['SecretAccessKey'],\n      c['Token']\n    )\n    @expiration = c['Expiration'] ? Time.parse(c['Expiration']) : nil\n  end\nend\n\ndef get_credentials\n  # Retry loading credentials a configurable number of times if\n  # the instance metadata service is not responding.\n  begin\n    retry_errors(NETWORK_ERRORS, max_retries: @retries) do\n      open_connection do |conn|\n        path = '/latest/meta-data/iam/security-credentials/'\n        profile_name = http_get(conn, path).lines.first.strip\n        http_get(conn, path + profile_name)\n      end\n    end\n  rescue\n    '{}'\n  end\nend\n```\n\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/\n\u3092\u53d6\u5f97\u3059\u308b\u3068\u30ed\u30fc\u30eb\u540d\u304c\u8fd4\u3063\u3066\u6765\u308b\n\n\u305d\u306e\u30ed\u30fc\u30eb\u540d\u3092\u5143\u306b\n\nhttp://169.254.169.254/latest/meta-data/iam/security-credentials/\u30ed\u30fc\u30eb\u540d\n\n\u3067\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u60c5\u5831\u5165\u3063\u305fJSON\u304c\u8fd4\u3063\u3066\u6765\u308b\u3002\n\u306a\u306e\u3067IAM Role\u304b\u3089\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nhttp://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\n\n## \u74b0\u5883\u306b\u3088\u308b\u5207\u308a\u5206\u3051\u65b9\n\n### \u30ed\u30fc\u30ab\u30eb\u306e\u958b\u767a\u74b0\u5883(IAM Role\u304c\u4f7f\u3048\u306a\u3044)\u5834\u5408\n\n\u74b0\u5883\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u52d5\u304b\u3059\u3002\n\n### \u672c\u756a\u74b0\u5883\u306e\u5834\u5408\n\nEC2\u3067IAM Role\u4ed8\u304d\u3067\u52d5\u304b\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u74b0\u5883\u5909\u6570\u306b\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3002\n", "tags": ["AWS", "aws-sdk", "AWS_SDK"]}