{"tags": ["iOS", "Swift", "OpenGL"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nXcode\u3067\u306f\u30013D\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306bMetal\u3092\u4f7f\u3046\u304bOpenGL\u3092\u4f7f\u3046\u304b\u3092\u9078\u3079\u308b\u3002\n\u305f\u3060\u3057\u3001Swift\u3067OpenGL\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u3001\"in progress\"\u306a\u3069\u3068\u66f8\u304b\u308c\u3066\u3044\u3066\u3001\u304d\u3061\u3093\u3068\u52d5\u304b\u306a\u3044\u3002\n\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3088\u3046\u306b\u30bd\u30fc\u30b9\u3092\u66f8\u304d\u63db\u3048\u305f\u30e1\u30e2\u3002\n\nGameViewController.swift\nXcode\u3067\u65b0\u3057\u304fSwift+OpenGL ES\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3068\u3001GameViewController.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u4e2d\u8eab\u306f\u52d5\u304b\u306a\u3044\u3002\n\u306a\u306e\u3067\u52d5\u304f\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u305f\u306e\u304c\u4e0b\u8a18\u3002\n\u5272\u3068\u529b\u6280\u306a\u306e\u3067\u52d5\u4f5c\u4fdd\u8a3c\u306f\u306a\u3057\u3002\n\nGameViewController.swift\n\nimport GLKit\nimport OpenGLES\n\nclass GameViewController: GLKViewController {\n    enum Uniform_index : Int {\n        case UNIFORM_MODELVIEWPROJECTION_MATRIX = 0\n        case UNIFORM_NORMAL_MATRIX = 1\n        case NUM_UNIFORMS = 2\n    }\n\n    var uniforms: [GLint] = [GLint](count: Uniform_index.NUM_UNIFORMS.rawValue, repeatedValue: GLint(0))\n\n    var program: GLuint = 0\n\n    var modelViewProjectionMatrix: GLKMatrix4 = GLKMatrix4Identity\n    var normalMatrix: GLKMatrix3 = GLKMatrix3Identity\n    var rotation: Float = 0.0\n\n    var vertexArray: GLuint = 0\n    var vertexBuffer: GLuint = 0\n\n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n\n    deinit {\n        self.tearDownGL()\n\n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.context = EAGLContext(API: .OpenGLES2)\n\n        if self.context == nil {\n            println(\"Failed to create ES context\")\n        }\n\n        let view = self.view as! GLKView\n        view.context = self.context\n        view.drawableDepthFormat = .Format24\n\n        self.setupGL()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n\n        if self.isViewLoaded() && self.view.window != nil {\n            self.view = nil\n\n            self.tearDownGL()\n\n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n\n    func BUFFER_OFFSET(n: Int) -> UnsafePointer<Void> {\n        let ptr: UnsafePointer<Void> = nil\n        return ptr + n * sizeof(Void)\n    }\n\n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        self.loadShaders()\n\n        self.effect = GLKBaseEffect()\n        self.effect!.light0.enabled = /*GL_TRUE*/1\n        self.effect!.light0.diffuseColor = GLKVector4Make(1.0, 0.4, 0.4, 1.0)\n\n        glEnable(/*GL_DEPTH_TEST*/0x0B71)\n\n        glGenVertexArraysOES(1, &vertexArray)\n        glBindVertexArrayOES(vertexArray)\n\n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(/*GL_ARRAY_BUFFER*/0x8892, vertexBuffer)\n        glBufferData(/*GL_ARRAY_BUFFER*/0x8892, sizeof(CGFloat) * gCubeVertexData.count, gCubeVertexData, /*GL_STATIC_DRAW*/0x88E4)\n\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Position.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), GLint(3), GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(24), BUFFER_OFFSET(0))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Normal.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Normal.rawValue), GLint(3), GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(24), BUFFER_OFFSET(12))\n\n        glBindVertexArrayOES(0);\n    }\n\n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteVertexArraysOES(1, &vertexArray)\n\n        self.effect = nil\n\n        if program != 0 {\n            glDeleteProgram(program)\n            program = 0\n        }\n    }\n\n    // MARK: - GLKView and GLKViewController delegate methods\n\n    func update() {\n        let aspect = fabsf(Float(self.view.bounds.size.width / self.view.bounds.size.height))\n        let projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0), aspect, 0.1, 100.0)\n\n        self.effect!.transform.projectionMatrix = projectionMatrix\n\n        var baseModelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -4.0)\n        baseModelViewMatrix = GLKMatrix4Rotate(baseModelViewMatrix, rotation, 0.0, 1.0, 0.0)\n\n        // Compute the model view matrix for the object rendered with GLKit\n        var modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        self.effect!.transform.modelviewMatrix = modelViewMatrix\n\n        // Compute the model view matrix for the object rendered with ES2\n        modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, 1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        normalMatrix = GLKMatrix3InvertAndTranspose(GLKMatrix4GetMatrix3(modelViewMatrix), nil)\n\n        modelViewProjectionMatrix = GLKMatrix4Multiply(projectionMatrix, modelViewMatrix)\n\n        rotation += Float(self.timeSinceLastUpdate * 0.5)\n    }\n\n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(/*GL_COLOR_BUFFER_BIT*/0x00004000 | /*GL_DEPTH_BUFFER_BIT*/0x00000100)\n\n        glBindVertexArrayOES(vertexArray)\n\n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n\n        glDrawArrays(/*GL_TRIANGLES*/0x0004, 0, 36)\n\n        // Render the object again with ES2\n        glUseProgram(program)\n\n        glUniformMatrix4fv(uniforms[Uniform_index.UNIFORM_MODELVIEWPROJECTION_MATRIX.rawValue], 1, 0, modelViewProjectionMatrix.m)\n        glUniformMatrix3fv(uniforms[Uniform_index.UNIFORM_NORMAL_MATRIX.rawValue], 1, 0, normalMatrix.m)\n\n        glDrawArrays(/*GL_TRIANGLES*/0x0004, 0, 36)\n    }\n\n    // MARK: -  OpenGL ES 2 shader compilation\n\n    func loadShaders() -> Bool {\n        var vertShader: GLuint = 0\n        var fragShader: GLuint = 0\n        var vertShaderPathname: String\n        var fragShaderPathname: String\n\n        // Create shader program.\n        program = glCreateProgram()\n\n        // Create and compile vertex shader.\n        vertShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"vsh\")!\n        if !self.compileShader(&vertShader, type: /*GL_VERTEX_SHADER*/0x8B31, file: vertShaderPathname) {\n            println(\"Failed to compile vertex shader\")\n            return false\n        }\n\n        // Create and compile fragment shader.\n        fragShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"fsh\")!\n        if !self.compileShader(&fragShader, type: /*GL_FRAGMENT_SHADER*/0x8B30, file: fragShaderPathname) {\n            println(\"Failed to compile fragment shader\");\n            return false\n        }\n\n        // Attach vertex shader to program.\n        glAttachShader(program, vertShader)\n\n        // Attach fragment shader to program.\n        glAttachShader(program, fragShader)\n\n        // Bind attribute locations.\n        // This needs to be done prior to linking.\n        glBindAttribLocation(program, GLuint(GLKVertexAttrib.Position.rawValue), \"position\")\n        glBindAttribLocation(program, GLuint(GLKVertexAttrib.Normal.rawValue), \"normal\")\n\n        // Link program.\n        if !self.linkProgram(program) {\n            println(\"Failed to link program: \\(program)\")\n\n            if vertShader != 0 {\n                glDeleteShader(vertShader)\n                vertShader = 0\n            }\n            if fragShader != 0 {\n                glDeleteShader(fragShader)\n                fragShader = 0\n            }\n            if program != 0 {\n                glDeleteProgram(program)\n                program = 0\n            }\n\n            return false\n        }\n\n        // Get uniform locations.\n        uniforms[Uniform_index.UNIFORM_MODELVIEWPROJECTION_MATRIX.rawValue] = glGetUniformLocation(program, \"modelViewProjectionMatrix\")\n        uniforms[Uniform_index.UNIFORM_NORMAL_MATRIX.rawValue] = glGetUniformLocation(program, \"normalMatrix\")\n\n        // Release vertex and fragment shaders.\n        if vertShader != 0 {\n            glDetachShader(program, vertShader)\n            glDeleteShader(vertShader);\n        }\n        if fragShader != 0 {\n            glDetachShader(program, fragShader);\n            glDeleteShader(fragShader);\n        }\n\n        return true\n    }\n\n\n    func compileShader(inout shader: GLuint, type: GLenum, file: String) -> Bool {\n        var status: GLint = 0    // \u521d\u671f\u5316\u3057\u306a\u3044\u3068\u30dd\u30a4\u30f3\u30bf\u3092\u5f15\u6570\u306b\u6301\u3064\u95a2\u6570\u306b\u6e21\u305b\u306a\u3044\u3063\u307d\u3044\uff1f\n        var source: UnsafePointer<GLchar> = NSString(contentsOfFile: file, encoding: NSUTF8StringEncoding, error: nil)!.UTF8String\n        if source == nil {\n            println(\"Failed to load vertex shader\")\n            return false\n        }\n\n        shader = glCreateShader(type)\n        glShaderSource(shader, GLsizei(1), &source, nil)\n        glCompileShader(shader)\n\n        glGetShaderiv(shader, /*GL_COMPILE_STATUS*/0x8B81, &status)\n        if status == 0 {\n            glDeleteShader(shader);\n            return false\n        }\n\n        return true\n    }\n\n    func linkProgram(prog: GLuint) -> Bool {\n        var status: GLint = 0\n        glLinkProgram(prog)\n\n        glGetProgramiv(prog, /*GL_LINK_STATUS*/0x8B82, &status)\n        if status == 0 {\n            return false\n        }\n\n        return true\n    }\n\n    func validateProgram(prog: GLuint) -> Bool {\n        var logLength: GLint = 0\n        var status: GLint = 0\n\n        glValidateProgram(prog)\n        glGetProgramiv(prog, /*GL_INFO_LOG_LENGTH*/0x8B84, &logLength)\n        if logLength > 0 {\n            let log = UnsafeMutablePointer<UInt>.alloc(Int(logLength))\n            glGetProgramInfoLog(prog, GLsizei(logLength), &logLength, UnsafeMutablePointer<GLchar>(log))\n            println(\"Program validate log: \\n\\(log)\")\n            free(log)\n        }\n\n        glGetProgramiv(prog, GLenum(GL_VALIDATE_STATUS), &status)\n        if status == 0 {\n            return false\n        }\n\n        return true\n    }\n\n    let gCubeVertexData: [GLfloat] = [\n        // Data layout for each line below is:\n        // positionX, positionY, positionZ,     normalX, normalY, normalZ,\n        0.5, -0.5, -0.5,        1.0, 0.0, 0.0,\n        0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n        0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n        0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n        0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n        0.5, 0.5, 0.5,          1.0, 0.0, 0.0,\n\n        0.5, 0.5, -0.5,         0.0, 1.0, 0.0,\n        -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n        0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n        0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n        -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n        -0.5, 0.5, 0.5,         0.0, 1.0, 0.0,\n\n        -0.5, 0.5, -0.5,        -1.0, 0.0, 0.0,\n        -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n        -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n        -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n        -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n        -0.5, -0.5, 0.5,        -1.0, 0.0, 0.0,\n\n        -0.5, -0.5, -0.5,      0.0, -1.0, 0.0,\n        0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n        -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n        -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n        0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n        0.5, -0.5, 0.5,         0.0, -1.0, 0.0,\n\n        0.5, 0.5, 0.5,          0.0, 0.0, 1.0,\n        -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n        0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n        0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n        -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n        -0.5, -0.5, 0.5,        0.0, 0.0, 1.0,\n\n        0.5, -0.5, -0.5,        0.0, 0.0, -1.0,\n        -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n        0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n        0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n        -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n        -0.5, 0.5, -0.5,        0.0, 0.0, -1.0\n    ]\n}\n\n\n\n\nGLKMatrix3+Array.swift\nimport GLKit\n\nextension GLKMatrix3 {\n    var m: [Float] {\n        get {\n            let ary: [Float] = [\n                m00,\n                m01,\n                m02,\n                m10,\n                m11,\n                m12,\n                m20,\n                m21,\n                m22,\n            ]\n            return ary\n        }\n    }\n}\n\n\n\nGLKMatrix4+Array.swift\nimport GLKit\n\nextension GLKMatrix4 {\n    var m: [Float] {\n        get {\n            let ary: [Float] = [\n                m00,\n                m01,\n                m02,\n                m03,\n                m10,\n                m11,\n                m12,\n                m13,\n                m20,\n                m21,\n                m22,\n                m23,\n                m30,\n                m31,\n                m32,\n                m33\n            ]\n            return ary\n        }\n    }\n}\n\n\n\n\u3064\u3065\u304f\uff1f\n\u305d\u306e\uff12\u306b\u7d9a\u304f\u304b\u3069\u3046\u304b\u306f\u672a\u5b9a\u3002\n\n## \u306f\u3058\u3081\u306b\n\nXcode\u3067\u306f\u30013D\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u306e\u306bMetal\u3092\u4f7f\u3046\u304bOpenGL\u3092\u4f7f\u3046\u304b\u3092\u9078\u3079\u308b\u3002\n\n\u305f\u3060\u3057\u3001Swift\u3067OpenGL\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u3001\"in progress\"\u306a\u3069\u3068\u66f8\u304b\u308c\u3066\u3044\u3066\u3001\u304d\u3061\u3093\u3068\u52d5\u304b\u306a\u3044\u3002\n\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3088\u3046\u306b\u30bd\u30fc\u30b9\u3092\u66f8\u304d\u63db\u3048\u305f\u30e1\u30e2\u3002\n\n## GameViewController.swift\n\nXcode\u3067\u65b0\u3057\u304fSwift+OpenGL ES\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3068\u3001GameViewController.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u4e2d\u8eab\u306f\u52d5\u304b\u306a\u3044\u3002\n\u306a\u306e\u3067\u52d5\u304f\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u305f\u306e\u304c\u4e0b\u8a18\u3002\n\n\u5272\u3068\u529b\u6280\u306a\u306e\u3067\u52d5\u4f5c\u4fdd\u8a3c\u306f\u306a\u3057\u3002\n\n\n```swift:GameViewController.swift\n\nimport GLKit\nimport OpenGLES\n\nclass GameViewController: GLKViewController {\n    enum Uniform_index : Int {\n        case UNIFORM_MODELVIEWPROJECTION_MATRIX = 0\n        case UNIFORM_NORMAL_MATRIX = 1\n        case NUM_UNIFORMS = 2\n    }\n    \n    var uniforms: [GLint] = [GLint](count: Uniform_index.NUM_UNIFORMS.rawValue, repeatedValue: GLint(0))\n\n    var program: GLuint = 0\n\n    var modelViewProjectionMatrix: GLKMatrix4 = GLKMatrix4Identity\n    var normalMatrix: GLKMatrix3 = GLKMatrix3Identity\n    var rotation: Float = 0.0\n\n    var vertexArray: GLuint = 0\n    var vertexBuffer: GLuint = 0\n\n    var context: EAGLContext? = nil\n    var effect: GLKBaseEffect? = nil\n\n    deinit {\n        self.tearDownGL()\n\n        if EAGLContext.currentContext() === self.context {\n            EAGLContext.setCurrentContext(nil)\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.context = EAGLContext(API: .OpenGLES2)\n\n        if self.context == nil {\n            println(\"Failed to create ES context\")\n        }\n\n        let view = self.view as! GLKView\n        view.context = self.context\n        view.drawableDepthFormat = .Format24\n        \n        self.setupGL()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n\n        if self.isViewLoaded() && self.view.window != nil {\n            self.view = nil\n\n            self.tearDownGL()\n\n            if EAGLContext.currentContext() === self.context {\n                EAGLContext.setCurrentContext(nil)\n            }\n            self.context = nil\n        }\n    }\n    \n    func BUFFER_OFFSET(n: Int) -> UnsafePointer<Void> {\n        let ptr: UnsafePointer<Void> = nil\n        return ptr + n * sizeof(Void)\n    }\n\n    func setupGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        self.loadShaders()\n\n        self.effect = GLKBaseEffect()\n        self.effect!.light0.enabled = /*GL_TRUE*/1\n        self.effect!.light0.diffuseColor = GLKVector4Make(1.0, 0.4, 0.4, 1.0)\n\n        glEnable(/*GL_DEPTH_TEST*/0x0B71)\n\n        glGenVertexArraysOES(1, &vertexArray)\n        glBindVertexArrayOES(vertexArray)\n\n        glGenBuffers(1, &vertexBuffer)\n        glBindBuffer(/*GL_ARRAY_BUFFER*/0x8892, vertexBuffer)\n        glBufferData(/*GL_ARRAY_BUFFER*/0x8892, sizeof(CGFloat) * gCubeVertexData.count, gCubeVertexData, /*GL_STATIC_DRAW*/0x88E4)\n        \n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Position.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Position.rawValue), GLint(3), GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(24), BUFFER_OFFSET(0))\n        glEnableVertexAttribArray(GLuint(GLKVertexAttrib.Normal.rawValue))\n        glVertexAttribPointer(GLuint(GLKVertexAttrib.Normal.rawValue), GLint(3), GLenum(GL_FLOAT), GLboolean(GL_FALSE), GLsizei(24), BUFFER_OFFSET(12))\n        \n        glBindVertexArrayOES(0);\n    }\n\n    func tearDownGL() {\n        EAGLContext.setCurrentContext(self.context)\n\n        glDeleteBuffers(1, &vertexBuffer)\n        glDeleteVertexArraysOES(1, &vertexArray)\n\n        self.effect = nil\n\n        if program != 0 {\n            glDeleteProgram(program)\n            program = 0\n        }\n    }\n\n    // MARK: - GLKView and GLKViewController delegate methods\n\n    func update() {\n        let aspect = fabsf(Float(self.view.bounds.size.width / self.view.bounds.size.height))\n        let projectionMatrix = GLKMatrix4MakePerspective(GLKMathDegreesToRadians(65.0), aspect, 0.1, 100.0)\n\n        self.effect!.transform.projectionMatrix = projectionMatrix\n\n        var baseModelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -4.0)\n        baseModelViewMatrix = GLKMatrix4Rotate(baseModelViewMatrix, rotation, 0.0, 1.0, 0.0)\n\n        // Compute the model view matrix for the object rendered with GLKit\n        var modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, -1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        self.effect!.transform.modelviewMatrix = modelViewMatrix\n\n        // Compute the model view matrix for the object rendered with ES2\n        modelViewMatrix = GLKMatrix4MakeTranslation(0.0, 0.0, 1.5)\n        modelViewMatrix = GLKMatrix4Rotate(modelViewMatrix, rotation, 1.0, 1.0, 1.0)\n        modelViewMatrix = GLKMatrix4Multiply(baseModelViewMatrix, modelViewMatrix)\n\n        normalMatrix = GLKMatrix3InvertAndTranspose(GLKMatrix4GetMatrix3(modelViewMatrix), nil)\n\n        modelViewProjectionMatrix = GLKMatrix4Multiply(projectionMatrix, modelViewMatrix)\n        \n        rotation += Float(self.timeSinceLastUpdate * 0.5)\n    }\n\n    override func glkView(view: GLKView, drawInRect rect: CGRect) {\n        glClearColor(0.65, 0.65, 0.65, 1.0)\n        glClear(/*GL_COLOR_BUFFER_BIT*/0x00004000 | /*GL_DEPTH_BUFFER_BIT*/0x00000100)\n\n        glBindVertexArrayOES(vertexArray)\n\n        // Render the object with GLKit\n        self.effect?.prepareToDraw()\n\n        glDrawArrays(/*GL_TRIANGLES*/0x0004, 0, 36)\n\n        // Render the object again with ES2\n        glUseProgram(program)\n\n        glUniformMatrix4fv(uniforms[Uniform_index.UNIFORM_MODELVIEWPROJECTION_MATRIX.rawValue], 1, 0, modelViewProjectionMatrix.m)\n        glUniformMatrix3fv(uniforms[Uniform_index.UNIFORM_NORMAL_MATRIX.rawValue], 1, 0, normalMatrix.m)\n        \n        glDrawArrays(/*GL_TRIANGLES*/0x0004, 0, 36)\n    }\n\n    // MARK: -  OpenGL ES 2 shader compilation\n\n    func loadShaders() -> Bool {\n        var vertShader: GLuint = 0\n        var fragShader: GLuint = 0\n        var vertShaderPathname: String\n        var fragShaderPathname: String\n\n        // Create shader program.\n        program = glCreateProgram()\n\n        // Create and compile vertex shader.\n        vertShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"vsh\")!\n        if !self.compileShader(&vertShader, type: /*GL_VERTEX_SHADER*/0x8B31, file: vertShaderPathname) {\n            println(\"Failed to compile vertex shader\")\n            return false\n        }\n\n        // Create and compile fragment shader.\n        fragShaderPathname = NSBundle.mainBundle().pathForResource(\"Shader\", ofType: \"fsh\")!\n        if !self.compileShader(&fragShader, type: /*GL_FRAGMENT_SHADER*/0x8B30, file: fragShaderPathname) {\n            println(\"Failed to compile fragment shader\");\n            return false\n        }\n\n        // Attach vertex shader to program.\n        glAttachShader(program, vertShader)\n\n        // Attach fragment shader to program.\n        glAttachShader(program, fragShader)\n\n        // Bind attribute locations.\n        // This needs to be done prior to linking.\n        glBindAttribLocation(program, GLuint(GLKVertexAttrib.Position.rawValue), \"position\")\n        glBindAttribLocation(program, GLuint(GLKVertexAttrib.Normal.rawValue), \"normal\")\n\n        // Link program.\n        if !self.linkProgram(program) {\n            println(\"Failed to link program: \\(program)\")\n\n            if vertShader != 0 {\n                glDeleteShader(vertShader)\n                vertShader = 0\n            }\n            if fragShader != 0 {\n                glDeleteShader(fragShader)\n                fragShader = 0\n            }\n            if program != 0 {\n                glDeleteProgram(program)\n                program = 0\n            }\n            \n            return false\n        }\n\n        // Get uniform locations.\n        uniforms[Uniform_index.UNIFORM_MODELVIEWPROJECTION_MATRIX.rawValue] = glGetUniformLocation(program, \"modelViewProjectionMatrix\")\n        uniforms[Uniform_index.UNIFORM_NORMAL_MATRIX.rawValue] = glGetUniformLocation(program, \"normalMatrix\")\n\n        // Release vertex and fragment shaders.\n        if vertShader != 0 {\n            glDetachShader(program, vertShader)\n            glDeleteShader(vertShader);\n        }\n        if fragShader != 0 {\n            glDetachShader(program, fragShader);\n            glDeleteShader(fragShader);\n        }\n        \n        return true\n    }\n\n\n    func compileShader(inout shader: GLuint, type: GLenum, file: String) -> Bool {\n        var status: GLint = 0    // \u521d\u671f\u5316\u3057\u306a\u3044\u3068\u30dd\u30a4\u30f3\u30bf\u3092\u5f15\u6570\u306b\u6301\u3064\u95a2\u6570\u306b\u6e21\u305b\u306a\u3044\u3063\u307d\u3044\uff1f\n        var source: UnsafePointer<GLchar> = NSString(contentsOfFile: file, encoding: NSUTF8StringEncoding, error: nil)!.UTF8String\n        if source == nil {\n            println(\"Failed to load vertex shader\")\n            return false\n        }\n\n        shader = glCreateShader(type)\n        glShaderSource(shader, GLsizei(1), &source, nil)\n        glCompileShader(shader)\n\n        glGetShaderiv(shader, /*GL_COMPILE_STATUS*/0x8B81, &status)\n        if status == 0 {\n            glDeleteShader(shader);\n            return false\n        }\n\n        return true\n    }\n\n    func linkProgram(prog: GLuint) -> Bool {\n        var status: GLint = 0\n        glLinkProgram(prog)\n\n        glGetProgramiv(prog, /*GL_LINK_STATUS*/0x8B82, &status)\n        if status == 0 {\n            return false\n        }\n        \n        return true\n    }\n\n    func validateProgram(prog: GLuint) -> Bool {\n        var logLength: GLint = 0\n        var status: GLint = 0\n\n        glValidateProgram(prog)\n        glGetProgramiv(prog, /*GL_INFO_LOG_LENGTH*/0x8B84, &logLength)\n        if logLength > 0 {\n            let log = UnsafeMutablePointer<UInt>.alloc(Int(logLength))\n            glGetProgramInfoLog(prog, GLsizei(logLength), &logLength, UnsafeMutablePointer<GLchar>(log))\n            println(\"Program validate log: \\n\\(log)\")\n            free(log)\n        }\n\n        glGetProgramiv(prog, GLenum(GL_VALIDATE_STATUS), &status)\n        if status == 0 {\n            return false\n        }\n\n        return true\n    }\n    \n    let gCubeVertexData: [GLfloat] = [\n        // Data layout for each line below is:\n        // positionX, positionY, positionZ,     normalX, normalY, normalZ,\n        0.5, -0.5, -0.5,        1.0, 0.0, 0.0,\n        0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n        0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n        0.5, -0.5, 0.5,         1.0, 0.0, 0.0,\n        0.5, 0.5, -0.5,         1.0, 0.0, 0.0,\n        0.5, 0.5, 0.5,          1.0, 0.0, 0.0,\n        \n        0.5, 0.5, -0.5,         0.0, 1.0, 0.0,\n        -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n        0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n        0.5, 0.5, 0.5,          0.0, 1.0, 0.0,\n        -0.5, 0.5, -0.5,        0.0, 1.0, 0.0,\n        -0.5, 0.5, 0.5,         0.0, 1.0, 0.0,\n        \n        -0.5, 0.5, -0.5,        -1.0, 0.0, 0.0,\n        -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n        -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n        -0.5, 0.5, 0.5,         -1.0, 0.0, 0.0,\n        -0.5, -0.5, -0.5,      -1.0, 0.0, 0.0,\n        -0.5, -0.5, 0.5,        -1.0, 0.0, 0.0,\n        \n        -0.5, -0.5, -0.5,      0.0, -1.0, 0.0,\n        0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n        -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n        -0.5, -0.5, 0.5,        0.0, -1.0, 0.0,\n        0.5, -0.5, -0.5,        0.0, -1.0, 0.0,\n        0.5, -0.5, 0.5,         0.0, -1.0, 0.0,\n        \n        0.5, 0.5, 0.5,          0.0, 0.0, 1.0,\n        -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n        0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n        0.5, -0.5, 0.5,         0.0, 0.0, 1.0,\n        -0.5, 0.5, 0.5,         0.0, 0.0, 1.0,\n        -0.5, -0.5, 0.5,        0.0, 0.0, 1.0,\n        \n        0.5, -0.5, -0.5,        0.0, 0.0, -1.0,\n        -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n        0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n        0.5, 0.5, -0.5,         0.0, 0.0, -1.0,\n        -0.5, -0.5, -0.5,      0.0, 0.0, -1.0,\n        -0.5, 0.5, -0.5,        0.0, 0.0, -1.0\n    ]\n}\n\n```\n\n```GLKMatrix3+Array.swift\nimport GLKit\n\nextension GLKMatrix3 {\n    var m: [Float] {\n        get {\n            let ary: [Float] = [\n                m00,\n                m01,\n                m02,\n                m10,\n                m11,\n                m12,\n                m20,\n                m21,\n                m22,\n            ]\n            return ary\n        }\n    }\n}\n```\n\n```GLKMatrix4+Array.swift\nimport GLKit\n\nextension GLKMatrix4 {\n    var m: [Float] {\n        get {\n            let ary: [Float] = [\n                m00,\n                m01,\n                m02,\n                m03,\n                m10,\n                m11,\n                m12,\n                m13,\n                m20,\n                m21,\n                m22,\n                m23,\n                m30,\n                m31,\n                m32,\n                m33\n            ]\n            return ary\n        }\n    }\n}\n```\n\n## \u3064\u3065\u304f\uff1f\n\n\u305d\u306e\uff12\u306b\u7d9a\u304f\u304b\u3069\u3046\u304b\u306f\u672a\u5b9a\u3002\n"}