{"context": "twitter\u3067\u66f8\u3051\u3068\u8105\u3055\u308c\u305f\u306e\u3067\u3001\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u65b9\u91dd\u3068\u3057\u3066\u306f\u3001Brainf**k\u306e\u3084\u3064\u3068\u3060\u3044\u305f\u3044\u540c\u3058\u3067\u3059\u3002\n\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u52d5\u304b\u305b\u308b\u306e\u3067\u3001\u5165\u529b\u3092\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305a\u306fHaskell\u3067\u4e0b\u66f8\u304d\u3002\nmain :: IO ()\nmain = interact $ zunDokoKiyoshi [] . mSeries . seed\n\nseed :: String -> [Int]\nseed = pad . toBinary\n\ntoBinary :: String -> [Int]\ntoBinary = concatMap (reverse . take 8 . bits . fromEnum)\n\nbits :: Int -> [Int]\nbits x = mod x 2 : bits (div x 2)\n\npad :: [Int] -> [Int]\npad xs = xs ++ take (32 - length xs) (repeat 1)\n\nmSeries :: [Int] -> [Int]\nmSeries xs = ys\n  where ys = xs ++ zipWith xor (drop 4 ys) (drop 29 ys)\n\nxor :: Int -> Int -> Int\nxor x y = mod (x + y) 2\n\nzunDokoKiyoshi :: [Int] -> [Int] -> String\nzunDokoKiyoshi (1 : 0 : 0 : 0 : 0 : _)  _ = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\"\nzunDokoKiyoshi xs (y : ys) = [\"\u30ba\u30f3 \", \"\u30c9\u30b3 \"] !! y ++ zunDokoKiyoshi (y : xs) ys\n\nHaskell\u3082\u3069\u304d\u306e\u81ea\u5bb6\u88fdDSL\u3092\u4f7f\u3046\u3068\u3001\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3002\nzipWith\u3082concatMap\u3082\u306a\u3044\u306e\u3067\u3001Haskell\u306ePrelude\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u5b9f\u88c5\u3002\nfoldr\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u3001\u8272\u3005\u4f7f\u3048\u3066\u4fbf\u5229\u306a\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\nDSL\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\u6bb4\u308a\u66f8\u304d\u306a\u306e\u3067\u3001\u5f8c\u3067\u6574\u7406\u3059\u308b\u3002\nimport Prelude (($), putStrLn, fromEnum)\nimport qualified Prelude as P (foldr)\nimport LazyK.Prim\nimport LazyK.Util\n\nmain = putStrLn $ showC $\n  b :$ (zunDokoKiyoshi :$ (repeat :$ num 1)) :$ (b :$ mSeries :$\n  (b :$ seed :$ (takeWhile :$ (b :$ not :$ (le :$ num 256)))))\n\nseed = b :$ pad :$ toBinary\n\ntoBinary = concatMap :$ (b :$ reverse :$ (b :$ (take :$ num 8) :$ bits))\n\nbits = (m :$) $ lambda \"r\" $ lambda \"x\" $\n  cons :$ (mod :$ V \"x\" :$ num 2) :$ (m :$ V \"r\" :$ (div :$ V \"x\" :$ num 2))\n\npad = lambda \"x\" $ append :$ V \"x\" :$\n  (take :$ (sub :$ num 32 :$ (length :$ V \"x\")) :$ (repeat :$ num 1))\n\nmSeries = lambda \"x\" $ m :$ (lambda \"r\" $ append :$ V \"x\" :$\n  (zipWith :$ xor :$ (drop :$ num 4 :$ (m :$ V \"r\")) :$ (drop :$ num 29 :$ (m :$ V \"r\"))))\n\nxor = lambda \"x\" $ lambda \"y\" $\n  mod :$ (plus :$ V \"x\" :$ V \"y\") :$ num 2\n\nzunDokoKiyoshi = (m :$) $ lambda \"r\" $ lambda \"x\" $ lambda \"y\" $\n  ands :$ (zipWith :$ eq :$ dzzzz :$ V \"x\") :$ kiyoshi :$\n  (append :$ nthNX (car :$ V \"y\") (cons :$ zun :$ (cons :$ doko :$ nil)) :$\n  (m :$ V \"r\" :$ (cons :$ (car :$ V \"y\") :$ V \"x\") :$ (cdr :$ V \"y\")))\n\ndzzzz   = fromInt [1, 0, 0, 0, 0]\n\n-- UTF-8\nzun     = fromInt [227, 130, 186, 227, 131, 179, 32]\ndoko    = fromInt [227, 131, 137, 227, 130, 179, 32]\nkiyoshi = fromInt [227, 130, 173, 227, 131, 187, 227, 131, 168, 227, 131, 187, 227, 130, 183, 239, 188, 129, 256]\n\n-- Shift_JIS\n-- zun     = fromInt [0x83, 0x59, 0x83, 0x93, 0x20]\n-- doko    = fromInt [0x83, 0x68, 0x83, 0x52, 0x20]\n-- kiyoshi = fromInt [0x83, 0x4C, 0x81, 0x45, 0x83, 0x88, 0x81, 0x45, 0x83, 0x56, 0x81, 0x49, 0x100]\n\nfromInt = P.foldr (\\i a -> cons :$ num i :$ a) nil\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u51fa\u529b\u3055\u308c\u308bLazy K\u306f\u3053\u3061\u3089\u3002\n\u305c\u3093\u305c\u3093\u30b4\u30eb\u30d5\u3057\u3066\u306a\u3044\u306e\u3067\u3001\u307e\u3060\u307e\u3060\u77ed\u304f\u306a\u308b\u306f\u305a\u3002\nS(KS)K(SII(S(K(S(S(KS)(S(KK)(S(S(K(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))(SSK)K))(SII(S(K(S(K(S(S(KS)(S(KK)(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))(K(K(SI(KK))))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(SI(K(SK))))))))))(S(S(KS)(S(K(S(K(SSK))))(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(S(K(S(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)I(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(KK))))))))(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SI(SS(SK)))(SS(SS(SS(S(SSS))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSS(SS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK))))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSS(SS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSSSS(SS(SK)))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SSS)(S(SS(SS(SK)))(SS(SK))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SII(SII(S(S(KS)K)I)))(KK)))))))))))))))))))))(S(K(S(K(S(S(K(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))(S(S(S(SI(KK))(K(SI(K(SK)))))(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(S(SS(SS(SK)))(SS(SK)))S)(SSSSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))))))))))))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))(KK))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(S(SS(SK))(SS(SSSS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SSSSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))(KK))))))(KK)))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(KK)(S(KS)(S(KK)(SII)))))(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))K)))))(K(K(SI(K(SK))))))))(SII(S(K(S(S(KS)(S(K(SI))K))))(S(K(S(KK)))(SII)))I))(S(KS)K(S(K(SII))(S(S(KS)(S(KK)(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))(K(S(S(K(SII(S(K(S(K(S(S(KS)(S(KK)(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))(K(K(SI(KK))))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(SI(K(SK))))))))))(S(S(KS)(S(K(S(K(S(K(S(K(SI(K(SK))))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K)))))(S(KS)(S(K(S(KS)))(S(KK))))))(K(K(S(S(KS)K)I))))))(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK)))))))))))(K(KI)))(SII(S(S(KS)K)I))))(SII)))(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK)))))))))))(K(KI)))(SS(SS(SSI(SS(SS(SK)))))(S(KS)K))))(SII))))))(S(KS)K(S(KS)K(S(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(S(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK))))))))))))(K(K(K(KK)))))))(S(K(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))))(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))(SK))))(K(SII(S(K(S(S(KS)(S(K(SI))K))))(S(K(S(KK)))(SII)))I))))(S(S(K(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))))(S(KS)K(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))(K(KK))(S(KS)K(SII(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(KK)(S(KS)(S(KK)(SII)))))(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))K)))))(K(K(SI(K(SK)))))))(KK))(S(KS)K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK))))))))))))(K(K(K(KK)))))(S(S(S(KS)K))I(S(S(KS)K)I)))(SII(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(S(S(K(S(K(SI(K(SK))))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K))(K(S(S(KS)K)I))))))(S(S(KS)(S(KK)(SII)))(K(S(S(K(S(K(SI(KK)))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K))(K(S(S(KS)K)I)))))))))))(SII(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)(S(S(KS)K)(K(SI(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(KK))))))(S(KS)K(S(S(KS)(S(KK)S))(KK))(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK))))(SII(SII(S(S(KS)K)I))))))))\n\n\u30c7\u30d0\u30c3\u30b0\u306e\u8f9b\u3055\u3068\u304b\u3001\u8a9e\u308a\u305f\u3044\u3053\u3068\u3082\u8272\u3005\u3042\u308b\u306e\u3060\u3051\u3069\u3001\u75b2\u308c\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5bdd\u307e\u3059\u3002\ntwitter\u3067[\u66f8\u3051\u3068\u8105\u3055\u308c\u305f](https://twitter.com/necojackarc/status/708505982620413952)\u306e\u3067\u3001\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u65b9\u91dd\u3068\u3057\u3066\u306f\u3001[Brainf**k\u306e\u3084\u3064](http://qiita.com/angel_p_57/items/35eabfa66b95e5b44e4b)\u3068\u3060\u3044\u305f\u3044\u540c\u3058\u3067\u3059\u3002\n[\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u52d5\u304b\u305b\u308b](http://lazy-k.appspot.com/p/nKhzKS4p8c)\u306e\u3067\u3001\u5165\u529b\u3092\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u307e\u305a\u306fHaskell\u3067\u4e0b\u66f8\u304d\u3002\n\n```hs\nmain :: IO ()\nmain = interact $ zunDokoKiyoshi [] . mSeries . seed\n\nseed :: String -> [Int]\nseed = pad . toBinary\n\ntoBinary :: String -> [Int]\ntoBinary = concatMap (reverse . take 8 . bits . fromEnum)\n\nbits :: Int -> [Int]\nbits x = mod x 2 : bits (div x 2)\n\npad :: [Int] -> [Int]\npad xs = xs ++ take (32 - length xs) (repeat 1)\n\nmSeries :: [Int] -> [Int]\nmSeries xs = ys\n  where ys = xs ++ zipWith xor (drop 4 ys) (drop 29 ys)\n\nxor :: Int -> Int -> Int\nxor x y = mod (x + y) 2\n\nzunDokoKiyoshi :: [Int] -> [Int] -> String\nzunDokoKiyoshi (1 : 0 : 0 : 0 : 0 : _)  _ = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\"\nzunDokoKiyoshi xs (y : ys) = [\"\u30ba\u30f3 \", \"\u30c9\u30b3 \"] !! y ++ zunDokoKiyoshi (y : xs) ys\n```\n\nHaskell\u3082\u3069\u304d\u306e\u81ea\u5bb6\u88fdDSL\u3092\u4f7f\u3046\u3068\u3001\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3002\n`zipWith`\u3082`concatMap`\u3082\u306a\u3044\u306e\u3067\u3001Haskell\u306ePrelude\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u5b9f\u88c5\u3002\n`foldr`\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u3001\u8272\u3005\u4f7f\u3048\u3066\u4fbf\u5229\u306a\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\nDSL\u306e\u30bd\u30fc\u30b9\u306f[\u3053\u3053](https://github.com/rst76/Lazy-K/blob/master/LazyK/Util.hs)\u306b\u3042\u308a\u307e\u3059\u3002\u6bb4\u308a\u66f8\u304d\u306a\u306e\u3067\u3001\u5f8c\u3067\u6574\u7406\u3059\u308b\u3002\n\n```hs\nimport Prelude (($), putStrLn, fromEnum)\nimport qualified Prelude as P (foldr)\nimport LazyK.Prim\nimport LazyK.Util\n\nmain = putStrLn $ showC $\n  b :$ (zunDokoKiyoshi :$ (repeat :$ num 1)) :$ (b :$ mSeries :$\n  (b :$ seed :$ (takeWhile :$ (b :$ not :$ (le :$ num 256)))))\n\nseed = b :$ pad :$ toBinary\n\ntoBinary = concatMap :$ (b :$ reverse :$ (b :$ (take :$ num 8) :$ bits))\n\nbits = (m :$) $ lambda \"r\" $ lambda \"x\" $\n  cons :$ (mod :$ V \"x\" :$ num 2) :$ (m :$ V \"r\" :$ (div :$ V \"x\" :$ num 2))\n\npad = lambda \"x\" $ append :$ V \"x\" :$\n  (take :$ (sub :$ num 32 :$ (length :$ V \"x\")) :$ (repeat :$ num 1))\n\nmSeries = lambda \"x\" $ m :$ (lambda \"r\" $ append :$ V \"x\" :$\n  (zipWith :$ xor :$ (drop :$ num 4 :$ (m :$ V \"r\")) :$ (drop :$ num 29 :$ (m :$ V \"r\"))))\n\nxor = lambda \"x\" $ lambda \"y\" $\n  mod :$ (plus :$ V \"x\" :$ V \"y\") :$ num 2\n\nzunDokoKiyoshi = (m :$) $ lambda \"r\" $ lambda \"x\" $ lambda \"y\" $\n  ands :$ (zipWith :$ eq :$ dzzzz :$ V \"x\") :$ kiyoshi :$\n  (append :$ nthNX (car :$ V \"y\") (cons :$ zun :$ (cons :$ doko :$ nil)) :$\n  (m :$ V \"r\" :$ (cons :$ (car :$ V \"y\") :$ V \"x\") :$ (cdr :$ V \"y\")))\n\ndzzzz   = fromInt [1, 0, 0, 0, 0]\n\n-- UTF-8\nzun     = fromInt [227, 130, 186, 227, 131, 179, 32]\ndoko    = fromInt [227, 131, 137, 227, 130, 179, 32]\nkiyoshi = fromInt [227, 130, 173, 227, 131, 187, 227, 131, 168, 227, 131, 187, 227, 130, 183, 239, 188, 129, 256]\n\n-- Shift_JIS\n-- zun     = fromInt [0x83, 0x59, 0x83, 0x93, 0x20]\n-- doko    = fromInt [0x83, 0x68, 0x83, 0x52, 0x20]\n-- kiyoshi = fromInt [0x83, 0x4C, 0x81, 0x45, 0x83, 0x88, 0x81, 0x45, 0x83, 0x56, 0x81, 0x49, 0x100]\n\nfromInt = P.foldr (\\i a -> cons :$ num i :$ a) nil\n```\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u51fa\u529b\u3055\u308c\u308bLazy K\u306f\u3053\u3061\u3089\u3002\n\u305c\u3093\u305c\u3093\u30b4\u30eb\u30d5\u3057\u3066\u306a\u3044\u306e\u3067\u3001\u307e\u3060\u307e\u3060\u77ed\u304f\u306a\u308b\u306f\u305a\u3002\n\n```\nS(KS)K(SII(S(K(S(S(KS)(S(KK)(S(S(K(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))(SSK)K))(SII(S(K(S(K(S(S(KS)(S(KK)(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))(K(K(SI(KK))))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(SI(K(SK))))))))))(S(S(KS)(S(K(S(K(SSK))))(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(S(K(S(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)I(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SK)(KK))))))))(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SI(SS(SK)))(SS(SS(SS(S(SSS))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSS(SS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK))))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSS(SS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SSSSSS(SS(SK)))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(S(SSS)(S(SS(SS(SK)))(SS(SK))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SII(SII(S(S(KS)K)I)))(KK)))))))))))))))))))))(S(K(S(K(S(S(K(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))(S(S(S(SI(KK))(K(SI(K(SK)))))(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(S(SS(SS(SK)))(SS(SK)))S)(SSSSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))))))))))))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))(KK))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(SS(S(SS(SK))(SS(SSSS(SS(SK))))))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SS(SS(S(SS(S(SSS)(SS(SK))))(SS(SK)))))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(SS(SSSSSS(SS(SK)))(S(KS)K))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))(KK))))))(KK)))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(KK)(S(KS)(S(KK)(SII)))))(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))K)))))(K(K(SI(K(SK))))))))(SII(S(K(S(S(KS)(S(K(SI))K))))(S(K(S(KK)))(SII)))I))(S(KS)K(S(K(SII))(S(S(KS)(S(KK)(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))(K(S(S(K(SII(S(K(S(K(S(S(KS)(S(KK)(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))(K(K(SI(KK))))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(SI(K(SK))))))))))(S(S(KS)(S(K(S(K(S(K(S(K(SI(K(SK))))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K)))))(S(KS)(S(K(S(KS)))(S(KK))))))(K(K(S(S(KS)K)I))))))(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK)))))))))))(K(KI)))(SII(S(S(KS)K)I))))(SII)))(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK)))))))))))(K(KI)))(SS(SS(SSI(SS(SS(SK)))))(S(KS)K))))(SII))))))(S(KS)K(S(KS)K(S(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(S(S(K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK))))))))))))(K(K(K(KK)))))))(S(K(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K(S(SS(SSI(SS(SK))))(SS(SK))(S(KS)K))))(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))(SK))))(K(SII(S(K(S(S(KS)(S(K(SI))K))))(S(K(S(KK)))(SII)))I))))(S(S(K(SII(S(K(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))))(S(K(S(S(KS)(S(KK)(S(KS)(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(K(S(K(S(KK)))))(SII)))))(K(K(K(SI(K(SK)))))))))))(S(KS)K(SII(S(K(S(K(S(S(KS)(SI(K(K(K(SK))))))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(SI(KK)))))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))))(K(KK))(S(KS)K(SII(S(K(S(S(KS)(S(K(S(SI(K(K(K(SK)))))))K))))(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(KK)(S(KS)(S(KK)(SII)))))(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))K)))))(K(K(SI(K(SK)))))))(KK))(S(KS)K(SII(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)K)))(S(K(S(K(S(KK)))))(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI)))))))))(K(K(SI(K(SK))))))))))))(K(K(K(KK)))))(S(S(S(KS)K))I(S(S(KS)K)I)))(SII(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(S(S(K(S(K(SI(K(SK))))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K))(K(S(S(KS)K)I))))))(S(S(KS)(S(KK)(SII)))(K(S(S(K(S(K(SI(KK)))))(S(K(S(S(S(K(SII))(S(S(KS)(S(K(S(KS)))(S(K(S(K(S(KS)))))(S(S(KS)(S(KK)(S(KS)(S(KK)(S(KS)(S(KK)(SI(K(S(K(SI))K)))))))))(S(K(S(K(S(K(S(KK)))))))(S(K(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SII)))(K(S(S(KS)(S(K(S(KS)))(S(KK))))(KI)))))))))(S(KK)(S(KK)(S(K(S(S(K(S(SI(K(S(S(KS)(S(K(S(KS)))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)K)(K(S(K(S(K(SI))))(S(K(S(KK)))(S(K(SI))K))))))))(K(KK)))))(K(K(KI))))))))K)))K)))))))))(K(K(S(K(S(SI(K(S(K(SI))K)))))(S(K(S(KK)))(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK))))))))(K(SK)))))K))(K(S(S(KS)K)I)))))))))))(SII(S(K(S(K(S(S(SI(K(K(K(SK)))))(K(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(S(KS)(S(S(KS)K)(K(SI(KK)))))))(S(K(S(K(S(S(K(S(S(KS)(S(KK)(S(KS)(S(K(SI))K))))(KK)))(SI(KK)))))))(S(S(KS)(S(K(S(KS)))(S(K(S(KK)))(SII))))(K(K(SI(K(SK))))))))))(K(K(K(KK))))))(S(KS)K(S(S(KS)(S(KK)S))(KK))(S(S(KS)(S(KK)(S(KS)(S(K(S(KS)))(S(K(S(KK)))(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK)))))))(K(S(KK)(S(S(KS)(S(KK)(SI(K(S(K(SI))K)))))(KK))))(SII(SII(S(S(KS)K)I))))))))\n```\n\u30c7\u30d0\u30c3\u30b0\u306e\u8f9b\u3055\u3068\u304b\u3001\u8a9e\u308a\u305f\u3044\u3053\u3068\u3082\u8272\u3005\u3042\u308b\u306e\u3060\u3051\u3069\u3001\u75b2\u308c\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5bdd\u307e\u3059\u3002\n", "tags": ["Haskell", "Lazy_K", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}