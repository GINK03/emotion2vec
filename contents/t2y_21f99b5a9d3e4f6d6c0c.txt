{"context": " More than 1 year has passed since last update.\n\n\u80cc\u666f\nPython 3.4 \u304b\u3089 enum \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u30023.4 \u3088\u308a\u4f4e\u3044\u30d0\u30fc\u30b8\u30e7\u30f3 (2.x \u3082\u542b\u3080) \u5411\u3051\u306b\u30d0\u30c3\u30af\u30dd\u30fc\u30c8\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u304c enum34 \u3068\u3057\u3066 PyPI \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nenum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nPython 3.4 \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u308b Enum \u578b\u304c\u4eca\u304b\u3089\u3067\u3082\u4fbf\u5229\n\nCPython \u306e\u30b3\u30a2\u958b\u767a\u8005\u3067\u3042\u308b Nick Coghlan \u6c0f\u306e\u30ce\u30fc\u30c8\u306b enum \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u306e\u80cc\u666f\u3084\u5f53\u6642\u306e\u8b70\u8ad6\u306e\u8981\u7d04\u306a\u3069\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\nPython, Enumerations and \u201cGood Enough\u201d\n\n\u3082\u3068\u3082\u3068\u6a19\u6e96\u306b\u306a\u304b\u3063\u305f\u3082\u306e\u306a\u306e\u3067 Python \u306e enum \u306f Good Enough \u3067\u6e80\u8db3\u3068\u8a00\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u9006\u306b\u8db3\u308a\u306a\u3044\u3082\u306e\u306f\u4f55\u3060\u308d\u3046\uff1fEffective Java \u3068\u3044\u3046\u3001Java \u306e\u4e16\u754c\u306e\u30d0\u30a4\u30d6\u30eb\u306e\u3088\u3046\u306a\u672c\u304c\u3042\u308a\u3001\u305d\u3053\u3067\u306f1\u7ae0\u306b\u6e21\u3063\u3066 enum \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u3064\u3044\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nJava \u306e\u4e16\u754c\u3067 enum \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u578b\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3057\u305f\u308a\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3067\u3042\u3063\u305f\u308a\u3068\u5fdc\u7528\u7bc4\u56f2\u304c\u5e83\u304f\u3001\u4fbf\u5229\u306a\u6a5f\u80fd\u306a\u306e\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067 Effective Java \u3092\u773a\u3081\u306a\u304c\u3089 Python \u306e enum \u306b\u306f\u306a\u3044\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nextenum\n\u6a19\u6e96\u306e enum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u62e1\u5f35\u3059\u308b extenum \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n$ pip install extenum\n\n\n\u7528\u8a9e\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u7528\u8a9e \u306b\u3088\u308b\u3068\u3001\n\n\n3.4\n>> from enum import Enum\n>> class Color(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n...\n\n\n\u6ce8\u91c8 \u7528\u8a9e\n* \u30af\u30e9\u30b9 Color \u306f \u5217\u6319\u578b (\u307e\u305f\u306f Enum) \u3067\u3059\u3002\n* \u5c5e\u6027 Color.red\u3001Color.green\u3001\u305d\u306e\u4ed6\u306f \u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc (\u307e\u305f\u306f Enum \u30e1\u30f3\u30d0\u30fc) \u3067\u3059\u3002\n* \u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u306f \u540d\u524d \u3068 \u5024 \u3092\u6301\u3061\u307e\u3059 (Color.red \u306e\u540d\u524d\u306f red\u3001Color.blue \u306e\u5024\u306f 3 \u306a\u3069)\u3002\n\n\u5217\u6319\u578b\u3067\u5b9a\u7fa9\u3059\u308b\u5b9a\u6570\u3092 \u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc (\u307e\u305f\u306f Enum \u30e1\u30f3\u30d0\u30fc) \u3068\u7528\u8a9e\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u4ed6\u306e\u8a00\u8a9e\u3067\u306f\u3001\u5217\u6319\u5b50\u3084\u5217\u6319\u5b9a\u6570\u3068\u547c\u3070\u308c\u305f\u308a\u3082\u3057\u307e\u3059\u3002\u5b9a\u6570\u3068\u3057\u3066\u306e\u5f79\u5272\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u306e\u3067\u5217\u6319\u5b9a\u6570\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308f\u305b\u3001\u672c\u7a3f\u3067\u306f\u5217\u6319\u578b\u306e\u5b9a\u6570\u3092\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u3068\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\nEffective Java \u306e\u540d\u524d\u304c\u5b9a\u6570\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e \u5b9a\u6570 \u306f\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u6307\u3057\u307e\u3059\u3002\nextenum \u3092\u4f5c\u308d\u3046\u3068\u79c1\u304c\u601d\u3063\u305f\u304d\u3063\u304b\u3051\u304c\u3053\u306e\u4ed5\u7d44\u307f\u304c\u306a\u3044\u3053\u3068\u3067\u3057\u305f\u3002\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u3057\u305f\u3068\u304d\u306b\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u3068\u3057\u3066 asym-enum \u3092\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001\n\n3.4\nfrom asymm_enum.enum import Enum\n\nclass E(Enum):\n    A = 1\n    B = 2\n\n    def get_label(self):\n        ''' instance methods are attached to individual members '''\n        return self.label\n\n    @classmethod\n    def get_b_label(cls):\n        ''' class methods are attached to the enum '''\n        return cls.B.label\n\n\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u683c\u597d\u60aa\u3044\u306a\u3068\u601d\u3063\u3066\u81ea\u5206\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nextenum \u3092\u4f7f\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\nconstant_specific_enum.py\nfrom extenum import ConstantSpecificEnum\n\nclass Operation(ConstantSpecificEnum):\n    PLUS = '+'\n    MINUS = '-'\n    TIMES = '*'\n    DIVIDE = '/'\n\n    @overload(PLUS)\n    def apply(self, x, y):\n        return x + y\n\n    @overload(MINUS)\n    def apply(self, x, y):\n        return x - y\n\n    @overload(TIMES)\n    def apply(self, x, y):\n        return x * y\n\n    @overload(DIVIDE)\n    def apply(self, x, y):\n        return x / y\n\n\n\u304d\u308c\u3044\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\nPython \u306b\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\u304c\u306a\u3044\u306e\u3067 @overload(CONSTANT) \u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3067\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n3.4\n>>> from constant_specific_enum import Operation\n>>> for name, const in Operation.__members__.items():\n...     print(name, ':', const.apply(2, 4))\nPLUS : 6\nMINUS : -2\nTIMES : 8\nDIVIDE : 0.5\n\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306b\u3088\u308a\u610f\u56f3\u3092\u4f1d\u3048\u308b\u306e\u306b\u3082\u6709\u52b9\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u51e6\u7406\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u5217\u6319\u578b\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n3.4\nfrom extenum import ConstantSpecificEnum\n\nclass Status(ConstantSpecificEnum):\n    PREPARING = 1\n    WAITING = 2\n    RUNNING = 3\n\n    @overload(PREPARING)\n    def is_cancelable(self):\n        return False\n\n    @overload(WAITING)\n    def is_cancelable(self):\n        return True\n\n    @overload(RUNNING)\n    def is_cancelable(self):\n        return True\n\n\n\u305d\u308c\u305e\u308c\u306e\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u304c\u30b9\u30c6\u30fc\u30bf\u30b9\u5024\u3092\u6307\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u51e6\u7406\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u884c\u3046\u524d\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u53ef\u80fd\u306a\u30b9\u30c6\u30fc\u30bf\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u5834\u5408\u3001\u3042\u308b\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u304c WAITING \u304b RUNNING \u306e\u3069\u3061\u3089\u304b\u3067\u3042\u308b\u304b\u3092\u8abf\u3079\u3066\u3044\u307e\u3059\u3002\n\n3.4\ndef cancel(status):\n    if status in [Status.WAITING, Status.RUNNING]:\n        # do cancel\n\n\n\u3053\u308c\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u5b9f\u88c5\u8005\u3084\u8aad\u307f\u624b\u304c\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u306e\u5217\u6319\u578b\u306e\u8a73\u7d30\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u3053\u306e\u95a2\u6570\u5185\u306e\u6761\u4ef6\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u524d\u51e6\u7406\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u5224\u5b9a\u306f\u3088\u308a\u81ea\u7136\u306b\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3059\u3002\n\n3.4\ndef cancel(status):\n    if status.is_cancelable():\n        # do cancel\n\n\n\u524d\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3068\u6bd4\u3079\u308b\u3068\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u5b9f\u88c5\u8005\u3084\u8aad\u307f\u624b\u306b\u3082\u5206\u304b\u308a\u3084\u3059\u304f\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u304c\u5897\u3048\u3066\u3082\u5217\u6319\u578b\u306e\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\n\u6226\u7565 enum \u30d1\u30bf\u30fc\u30f3\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\u306e\u5fdc\u7528\u4f8b\u3067\u3059\u3002\u66dc\u65e5\u3068\u5e73\u65e5\u30fb\u4f11\u65e5\u306e\u5c5e\u6027\u3092\u5217\u6319\u578b\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u5b9f\u88c5\u3092\u610f\u56f3\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nstrategy_enum_pattern.py\nfrom extenum import ConstantSpecificEnum\n\nclass PayrollDay(ConstantSpecificEnum):\n\n    class PayType(ConstantSpecificEnum):\n        WEEKDAY = 1\n        WEEKEND = 2\n\n        @overload(WEEKDAY)\n        def overtime_pay(self, hours, pay_rate):\n            return 0 if hours <= 8 else (hours - 8) * pay_rate / 2\n\n        @overload(WEEKEND)\n        def overtime_pay(self, hours, pay_rate):\n            return hours * pay_rate / 2\n\n        def pay(self, hours_worked, pay_rate):\n            base_pay = hours_worked * pay_rate\n            overtime_pay = self.overtime_pay(hours_worked, pay_rate)\n            return base_pay + overtime_pay\n\n    MONDAY = PayType.WEEKDAY\n    TUESDAY = PayType.WEEKDAY\n    WEDNESDAY = PayType.WEEKDAY\n    THURSDAY = PayType.WEEKDAY\n    FRIDAY = PayType.WEEKDAY\n    SATURDAY = PayType.WEEKEND\n    SUNDAY = PayType.WEEKEND\n\n    def pay(self, hours_worked, pay_rate):\n        return self.value.pay(hours_worked, pay_rate)\n\n\nJava \u3060\u3068\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306e1\u3064\u3068\u3057\u3066\u4fbf\u5229\u3067\u3059\u304c\u3001Python \u3060\u3068\u3084\u308a\u904e\u304e\u611f\u304c\u6f02\u3046\u3088\u3046\u306a\u6c17\u3082\u3057\u307e\u3059 (\u4e3b\u89b3)\u3002\u8a66\u3057\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u826f\u3044\u3068\u3082\u60aa\u3044\u3068\u3082\u8a00\u3048\u306a\u3044\u5fae\u5999\u306a\u4f8b\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\u4e00\u5fdc\u3053\u3093\u306a\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3060\u7a0b\u5ea6\u306b\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n3.4\n>>> from strategy_enum_pattern import PayrollDay\n>>> PayrollDay.MONDAY.pay(10, 1000.0)\n11000.0\n>>> PayrollDay.WEDNESDAY.pay(8, 1000.0)\n8000.0\n>>> PayrollDay.SATURDAY.pay(10, 1000.0)\n15000.0\n>>> PayrollDay.SUNDAY.pay(8, 1000.0)\n12000.0\n\n\n\n\u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\n\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u3001\u30af\u30e9\u30b9\u5909\u6570\u306e\u5b9a\u7fa9\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5217\u6319\u578b\u306e\u5b9a\u7fa9\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n3.4\nclass Color(Enum):\n    red, green, blue\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001NameError \u304c\u767a\u751f\u3059\u308b\u3002\n\n3.4\nNameError: name 'red' is not defined\n\n\nenum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f PEP 435 -Not having to specify values for enums- \u306b\u3088\u308b\u3068\u3001\n\nCons: involves much magic in the implementation, which makes even the definition of such enums baffling when first seen. Besides, explicit is better than implicit.\n\n\u6697\u9ed9\u7684\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u3067\u304d\u306a\u3044\u7406\u7531\u3068\u3057\u3066\u3001\u5b9f\u88c5\u304c\u9b54\u8853\u5316\u3059\u308b\u3001\u6700\u521d\u306b\u898b\u305f\u3068\u304d\u306b\u56f0\u60d1\u3059\u308b\u3001\u6697\u9ed9\u3088\u308a\u3082\u660e\u793a\u306e\u7985\u306b\u53cd\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u306f\u3053\u308c\u3067 Python \u306e\u6587\u5316\u3068\u3057\u3066\u306f\u6b63\u3057\u3044\u306e\u3067\u5225\u306b\u69cb\u308f\u306a\u3044\u306e\u3067\u3059\u304c\u3001Nick Coghlan \u6c0f\u306e\u30ce\u30fc\u30c8\u306e Support for alternate declaration syntaxes \u306b\u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nImplicit enums that don\u2019t really support normal code execution in the class body, and allow the above to be simplified further. It\u2019s another variant of the autonumbered example in the test suite, but one that diverges substantially from normal Python semantics: merely mentioning a name will create a new reference to that name. While there are a number of ways to get into trouble when doing this, the basic concept would be to modify __prepare__ on the metaclass to return a namespace that implements __missing__ as returning a custom sentinel value and overrides __getitem__ to treat repeating a name as an error:\n\nPython \u306e \u9ed2\u9b54\u8853 \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u3057\u3066\u304a\u3082\u3057\u308d\u3044\u65b9\u6cd5\u306a\u306e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u306e __prepare__ \u306f Python 3 \u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e\u3067\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u3068\u304d\u306b\u305d\u306e\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u3092\u8fd4\u3059\u51e6\u7406\u3092\u30d5\u30c3\u30af\u3057\u307e\u3059\u3002__missing__ \u306f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3001\u305d\u306e\u30ad\u30fc\u304c\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d KeyError \u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u30d5\u30c3\u30af\u3057\u307e\u3059\u3002\n\u5148\u306e __prepare__ \u3067\u540d\u524d\u7a7a\u9593\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066 __missing__ \u3092\u3082\u3064\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u8fd4\u305b\u3070\u3001\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u30d5\u30c3\u30af\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nprepare_missing.py\nclass MyNameSpace(dict):\n    def __missing__(self, key):\n        self[key] = value = 'x'\n        return value\n\nclass MyMetaclass(type):\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        return MyNameSpace()\n\n    def __new__(metacls, cls, bases, classdict):\n        print('classdict is', classdict.__class__)\n        return super().__new__(metacls, cls, bases, classdict)\n\n\n\u3053\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n3.4\n>>> from prepare_missing import MyMetaclass\n>>> class Color(metaclass=MyMetaclass):\n...     red, green, blue\n... \nclassdict is <class 'status.MyNameSpace'>\n>>> Color.red\n'x'\n>>> Color.blue\n'x'\n\n\n\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b\u30e1\u30bf\u30af\u30e9\u30b9 MyMetaclass \u306e __new__ \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3001\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593 (classdict) \u306b MyNameSpace \u304c\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002MyNameSpace \u306e __missing__ \u3067\u306f\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u3001\u3064\u307e\u308a\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u306b\u5b58\u5728\u3057\u306a\u3044\u540d\u524d\u306b\u5bfe\u3057\u3066\u3001\u6587\u5b57\u5217\u306e x \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5fdc\u7528\u3059\u308b\u3068 ImplicitEnum \u306f\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n3.4\n>>> from extenum import ImplicitEnum\n>>> class Color(ImplicitEnum):\n...     RED\n...     GREEN\n...     BLUE\n...\n>>> for name, const in Color.__members__.items():\n...     print(name, ':', const.value)\n...\nRED : 1\nGREEN : 2\nBLUE : 3\n\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u524d\u7bc0\u306e ConstantSpecificEnum \u306e @overload \u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3082\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u5b9a\u7fa9\u305d\u306e\u3082\u306e\u3092\u96a0\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u81ea\u4f53\u306f\u8cdb\u5426\u4e21\u8ad6\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001@classmethod \u3084 @staticmethod \u306a\u3069\u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3001\u96a0\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u4f7f\u3046\u5074\u304b\u3089\u9055\u548c\u611f\u306f\u306a\u3044\u304b\u306a\u3041\u3068\u8003\u3048\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\nEnumSet\nEnumSet \u306f Enum \u5b9a\u6570\u3092\u542b\u3080\u96c6\u5408 (set) \u3092\u751f\u6210\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002Java \u306e EnumSet \u3092\u773a\u3081\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5206\u304b\u308a\u3084\u3059\u3044\u7528\u9014\u3068\u3057\u3066\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u5b9f\u88c5\u3057\u3066\u3044\u305f\u30d5\u30e9\u30b0\u64cd\u4f5c\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u3001EnumSet \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u3068\u4eba\u306b\u6613\u3057\u3044\u96f0\u56f2\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\n\n3.4\n>>> from enum import Enum\n>>> class Mode(Enum):\n...     READ = 4\n...     WRITE = 2\n...     EXECUTE = 1\n... \n\n\n\u3053\u306e Mode \u306e\u5217\u6319\u578b\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n3.4\n>>> from extenum import EnumSet\n\n>>> EnumSet.all_of(Mode)  # Mode \u306e\u5168\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080 EnumSet \u3092\u751f\u6210\nEnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\n\n>>> EnumSet.none_of(Mode)  # Mode \u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u53d7\u3051\u53d6\u308b\u7a7a\u3063\u307d\u306e EnumSet \u3092\u751f\u6210\nEnumSet()\n\n>>> enumset = EnumSet.of(Mode.READ, Mode.EXECUTE)  # \u4efb\u610f\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080 EnumSet \u3092\u751f\u6210\n>>> enumset\nEnumSet({<Mode.READ: 4>, <Mode.EXECUTE: 1>})\n>>> enumset.update(EnumSet.of(Mode.READ, Mode.WRITE))\n>>> enumset\nEnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\n>>> Mode.WRITE in enumset\nTrue\n>>> 2 in enumset\nFalse\n\n\nEnumSet \u306b\u307e\u3068\u3081\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u30e2\u30fc\u30c9\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u306e\u53d6\u308a\u6271\u3044\u304c\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nJava \u3063\u307d\u3044 enum \u62e1\u5f35\u3068\u3057\u3066 extenum \u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3057\u305f\u3002\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\n\u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\nEnumSet\n\n\u6a19\u6e96\u306e Enum\u3001EnumMeta\u3001_EnumDict \u3092\u7d99\u627f\u3057\u3066\u62e1\u5f35\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u304a\u305d\u3089\u304f\u306f\u901a\u5e38\u306e\u5217\u6319\u578b\u3068\u3057\u3066\u3082\u7d20\u76f4\u306b\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u304a\u3082\u3057\u308d\u305d\u3046\u306a enum \u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u4f7f\u3046\u3088\u308a\u3082\u4f5c\u308b\u65b9\u304c\u76ee\u7684\u3060\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u3002\n## \u80cc\u666f\n\nPython 3.4 \u304b\u3089 [enum](http://docs.python.jp/3/library/enum.html) \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u30023.4 \u3088\u308a\u4f4e\u3044\u30d0\u30fc\u30b8\u30e7\u30f3 (2.x \u3082\u542b\u3080) \u5411\u3051\u306b\u30d0\u30c3\u30af\u30dd\u30fc\u30c8\u3055\u308c\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u304c [enum34](https://pypi.python.org/pypi/enum34) \u3068\u3057\u3066 PyPI \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nenum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n* [Python 3.4 \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u308b Enum \u578b\u304c\u4eca\u304b\u3089\u3067\u3082\u4fbf\u5229](http://qiita.com/methane/items/8612bdefd8fa4238cc44)\n\nCPython \u306e\u30b3\u30a2\u958b\u767a\u8005\u3067\u3042\u308b Nick Coghlan \u6c0f\u306e\u30ce\u30fc\u30c8\u306b enum \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u306e\u80cc\u666f\u3084\u5f53\u6642\u306e\u8b70\u8ad6\u306e\u8981\u7d04\u306a\u3069\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\n* [Python, Enumerations and \u201cGood Enough\u201d](http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html)\n\n\u3082\u3068\u3082\u3068\u6a19\u6e96\u306b\u306a\u304b\u3063\u305f\u3082\u306e\u306a\u306e\u3067 Python \u306e enum \u306f *Good Enough* \u3067\u6e80\u8db3\u3068\u8a00\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u9006\u306b\u8db3\u308a\u306a\u3044\u3082\u306e\u306f\u4f55\u3060\u308d\u3046\uff1f[Effective Java](http://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java) \u3068\u3044\u3046\u3001Java \u306e\u4e16\u754c\u306e\u30d0\u30a4\u30d6\u30eb\u306e\u3088\u3046\u306a\u672c\u304c\u3042\u308a\u3001\u305d\u3053\u3067\u306f1\u7ae0\u306b\u6e21\u3063\u3066 enum \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u3064\u3044\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\nJava \u306e\u4e16\u754c\u3067 enum \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u578b\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3057\u305f\u308a\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3067\u3042\u3063\u305f\u308a\u3068\u5fdc\u7528\u7bc4\u56f2\u304c\u5e83\u304f\u3001\u4fbf\u5229\u306a\u6a5f\u80fd\u306a\u306e\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067 Effective Java \u3092\u773a\u3081\u306a\u304c\u3089 Python \u306e enum \u306b\u306f\u306a\u3044\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n## extenum\n\n\u6a19\u6e96\u306e enum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u62e1\u5f35\u3059\u308b [extenum](https://pypi.python.org/pypi/extenum) \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n```bash\n$ pip install extenum\n```\n\n### \u7528\u8a9e\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u7528\u8a9e](http://docs.python.jp/3/library/enum.html#creating-an-enum) \u306b\u3088\u308b\u3068\u3001\n\n> ```py3:3.4\n>>> from enum import Enum\n>>> class Color(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n...\n```\n> \u6ce8\u91c8 \u7528\u8a9e\n> * \u30af\u30e9\u30b9 `Color` \u306f \u5217\u6319\u578b (\u307e\u305f\u306f Enum) \u3067\u3059\u3002\n> * \u5c5e\u6027 `Color.red`\u3001`Color.green`\u3001\u305d\u306e\u4ed6\u306f \u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc (\u307e\u305f\u306f Enum \u30e1\u30f3\u30d0\u30fc) \u3067\u3059\u3002\n> * \u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u306f \u540d\u524d \u3068 \u5024 \u3092\u6301\u3061\u307e\u3059 (`Color.red` \u306e\u540d\u524d\u306f `red`\u3001`Color.blue` \u306e\u5024\u306f 3 \u306a\u3069)\u3002\n\n\u5217\u6319\u578b\u3067\u5b9a\u7fa9\u3059\u308b\u5b9a\u6570\u3092 ***\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc (\u307e\u305f\u306f Enum \u30e1\u30f3\u30d0\u30fc)*** \u3068\u7528\u8a9e\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u4ed6\u306e\u8a00\u8a9e\u3067\u306f\u3001\u5217\u6319\u5b50\u3084\u5217\u6319\u5b9a\u6570\u3068\u547c\u3070\u308c\u305f\u308a\u3082\u3057\u307e\u3059\u3002\u5b9a\u6570\u3068\u3057\u3066\u306e\u5f79\u5272\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u306e\u3067\u5217\u6319\u5b9a\u6570\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308f\u305b\u3001\u672c\u7a3f\u3067\u306f\u5217\u6319\u578b\u306e\u5b9a\u6570\u3092\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u3068\u547c\u3076\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n### \u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\nEffective Java \u306e\u540d\u524d\u304c\u5b9a\u6570\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e *\u5b9a\u6570* \u306f\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u6307\u3057\u307e\u3059\u3002\n\nextenum \u3092\u4f5c\u308d\u3046\u3068\u79c1\u304c\u601d\u3063\u305f\u304d\u3063\u304b\u3051\u304c\u3053\u306e\u4ed5\u7d44\u307f\u304c\u306a\u3044\u3053\u3068\u3067\u3057\u305f\u3002\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u3057\u305f\u3068\u304d\u306b\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u3068\u3057\u3066 [asym-enum](https://github.com/AsymmetricVentures/asym-enum#methods-and-functions) \u3092\u898b\u3064\u3051\u307e\u3057\u305f\u304c\u3001\n\n```py3:3.4\nfrom asymm_enum.enum import Enum\n\nclass E(Enum):\n    A = 1\n    B = 2\n\n    def get_label(self):\n        ''' instance methods are attached to individual members '''\n        return self.label\n\n    @classmethod\n    def get_b_label(cls):\n        ''' class methods are attached to the enum '''\n        return cls.B.label\n```\n\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u683c\u597d\u60aa\u3044\u306a\u3068\u601d\u3063\u3066\u81ea\u5206\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nextenum \u3092\u4f7f\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```py3:constant_specific_enum.py\nfrom extenum import ConstantSpecificEnum\n\nclass Operation(ConstantSpecificEnum):\n    PLUS = '+'\n    MINUS = '-'\n    TIMES = '*'\n    DIVIDE = '/'\n\n    @overload(PLUS)\n    def apply(self, x, y):\n        return x + y\n\n    @overload(MINUS)\n    def apply(self, x, y):\n        return x - y\n\n    @overload(TIMES)\n    def apply(self, x, y):\n        return x * y\n\n    @overload(DIVIDE)\n    def apply(self, x, y):\n        return x / y\n```\n\n\u304d\u308c\u3044\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\n\nPython \u306b\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\u304c\u306a\u3044\u306e\u3067 *`@overload(CONSTANT)`* \u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3067\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```py3:3.4\n>>> from constant_specific_enum import Operation\n>>> for name, const in Operation.__members__.items():\n...     print(name, ':', const.apply(2, 4))\nPLUS : 6\nMINUS : -2\nTIMES : 8\nDIVIDE : 0.5\n```\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306b\u3088\u308a\u610f\u56f3\u3092\u4f1d\u3048\u308b\u306e\u306b\u3082\u6709\u52b9\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u51e6\u7406\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u5217\u6319\u578b\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:3.4\nfrom extenum import ConstantSpecificEnum\n\nclass Status(ConstantSpecificEnum):\n    PREPARING = 1\n    WAITING = 2\n    RUNNING = 3\n\n    @overload(PREPARING)\n    def is_cancelable(self):\n        return False\n\n    @overload(WAITING)\n    def is_cancelable(self):\n        return True\n\n    @overload(RUNNING)\n    def is_cancelable(self):\n        return True\n```\n\n\u305d\u308c\u305e\u308c\u306e\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u304c\u30b9\u30c6\u30fc\u30bf\u30b9\u5024\u3092\u6307\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u51e6\u7406\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u884c\u3046\u524d\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u53ef\u80fd\u306a\u30b9\u30c6\u30fc\u30bf\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\u5834\u5408\u3001\u3042\u308b\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u304c *WAITING* \u304b *RUNNING* \u306e\u3069\u3061\u3089\u304b\u3067\u3042\u308b\u304b\u3092\u8abf\u3079\u3066\u3044\u307e\u3059\u3002\n\n```py3:3.4\ndef cancel(status):\n    if status in [Status.WAITING, Status.RUNNING]:\n        # do cancel\n```\n\n\u3053\u308c\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u5b9f\u88c5\u8005\u3084\u8aad\u307f\u624b\u304c\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u306e\u5217\u6319\u578b\u306e\u8a73\u7d30\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u3053\u306e\u95a2\u6570\u5185\u306e\u6761\u4ef6\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u524d\u51e6\u7406\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u5224\u5b9a\u306f\u3088\u308a\u81ea\u7136\u306b\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3059\u3002\n\n```py3:3.4\ndef cancel(status):\n    if status.is_cancelable():\n        # do cancel\n```\n\n\u524d\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3068\u6bd4\u3079\u308b\u3068\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u95a2\u6570\u306e\u5b9f\u88c5\u8005\u3084\u8aad\u307f\u624b\u306b\u3082\u5206\u304b\u308a\u3084\u3059\u304f\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u304c\u5897\u3048\u3066\u3082\u5217\u6319\u578b\u306e\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\n#### \u6226\u7565 enum \u30d1\u30bf\u30fc\u30f3\n\n\u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\u306e\u5fdc\u7528\u4f8b\u3067\u3059\u3002\u66dc\u65e5\u3068\u5e73\u65e5\u30fb\u4f11\u65e5\u306e\u5c5e\u6027\u3092\u5217\u6319\u578b\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u5b9f\u88c5\u3092\u610f\u56f3\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n```py3:strategy_enum_pattern.py\nfrom extenum import ConstantSpecificEnum\n\nclass PayrollDay(ConstantSpecificEnum):\n\n    class PayType(ConstantSpecificEnum):\n        WEEKDAY = 1\n        WEEKEND = 2\n\n        @overload(WEEKDAY)\n        def overtime_pay(self, hours, pay_rate):\n            return 0 if hours <= 8 else (hours - 8) * pay_rate / 2\n\n        @overload(WEEKEND)\n        def overtime_pay(self, hours, pay_rate):\n            return hours * pay_rate / 2\n\n        def pay(self, hours_worked, pay_rate):\n            base_pay = hours_worked * pay_rate\n            overtime_pay = self.overtime_pay(hours_worked, pay_rate)\n            return base_pay + overtime_pay\n\n    MONDAY = PayType.WEEKDAY\n    TUESDAY = PayType.WEEKDAY\n    WEDNESDAY = PayType.WEEKDAY\n    THURSDAY = PayType.WEEKDAY\n    FRIDAY = PayType.WEEKDAY\n    SATURDAY = PayType.WEEKEND\n    SUNDAY = PayType.WEEKEND\n\n    def pay(self, hours_worked, pay_rate):\n        return self.value.pay(hours_worked, pay_rate)\n```\n\nJava \u3060\u3068\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306e1\u3064\u3068\u3057\u3066\u4fbf\u5229\u3067\u3059\u304c\u3001Python \u3060\u3068\u3084\u308a\u904e\u304e\u611f\u304c\u6f02\u3046\u3088\u3046\u306a\u6c17\u3082\u3057\u307e\u3059 (\u4e3b\u89b3)\u3002\u8a66\u3057\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u826f\u3044\u3068\u3082\u60aa\u3044\u3068\u3082\u8a00\u3048\u306a\u3044\u5fae\u5999\u306a\u4f8b\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u4e00\u5fdc\u3053\u3093\u306a\u3053\u3068\u3082\u3067\u304d\u308b\u3093\u3060\u7a0b\u5ea6\u306b\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py3:3.4\n>>> from strategy_enum_pattern import PayrollDay\n>>> PayrollDay.MONDAY.pay(10, 1000.0)\n11000.0\n>>> PayrollDay.WEDNESDAY.pay(8, 1000.0)\n8000.0\n>>> PayrollDay.SATURDAY.pay(10, 1000.0)\n15000.0\n>>> PayrollDay.SUNDAY.pay(8, 1000.0)\n12000.0\n```\n\n### \u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\n\n\u5217\u6319\u578b\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u3001\u30af\u30e9\u30b9\u5909\u6570\u306e\u5b9a\u7fa9\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5217\u6319\u578b\u306e\u5b9a\u7fa9\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n```py3:3.4\nclass Color(Enum):\n    red, green, blue\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001*NameError* \u304c\u767a\u751f\u3059\u308b\u3002\n\n```py3:3.4\nNameError: name 'red' is not defined\n```\n\nenum \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f [PEP 435 -Not having to specify values for enums-](https://www.python.org/dev/peps/pep-0435/#not-having-to-specify-values-for-enums) \u306b\u3088\u308b\u3068\u3001\n\n> Cons: involves much magic in the implementation, which makes even the definition of such enums baffling when first seen. Besides, explicit is better than implicit.\n\n\u6697\u9ed9\u7684\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u3067\u304d\u306a\u3044\u7406\u7531\u3068\u3057\u3066\u3001\u5b9f\u88c5\u304c\u9b54\u8853\u5316\u3059\u308b\u3001\u6700\u521d\u306b\u898b\u305f\u3068\u304d\u306b\u56f0\u60d1\u3059\u308b\u3001\u6697\u9ed9\u3088\u308a\u3082\u660e\u793a\u306e\u7985\u306b\u53cd\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u306f\u3053\u308c\u3067 Python \u306e\u6587\u5316\u3068\u3057\u3066\u306f\u6b63\u3057\u3044\u306e\u3067\u5225\u306b\u69cb\u308f\u306a\u3044\u306e\u3067\u3059\u304c\u3001Nick Coghlan \u6c0f\u306e\u30ce\u30fc\u30c8\u306e [Support for alternate declaration syntaxes](http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html#support-for-alternate-declaration-syntaxes) \u306b\u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n> Implicit enums that don\u2019t really support normal code execution in the class body, and allow the above to be simplified further. It\u2019s another variant of the autonumbered example in the test suite, but one that diverges substantially from normal Python semantics: merely mentioning a name will create a new reference to that name. While there are a number of ways to get into trouble when doing this, the basic concept would be to modify `__prepare__` on the metaclass to return a namespace that implements `__missing__` as returning a custom sentinel value and overrides `__getitem__` to treat repeating a name as an error:\n\nPython \u306e ~~\u9ed2\u9b54\u8853~~ \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u3057\u3066\u304a\u3082\u3057\u308d\u3044\u65b9\u6cd5\u306a\u306e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u306e [`__prepare__`](https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace) \u306f Python 3 \u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u3082\u306e\u3067\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u3068\u304d\u306b\u305d\u306e\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u3092\u8fd4\u3059\u51e6\u7406\u3092\u30d5\u30c3\u30af\u3057\u307e\u3059\u3002[`__missing__`](https://docs.python.org/3/reference/datamodel.html#object.__missing__) \u306f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3001\u305d\u306e\u30ad\u30fc\u304c\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d KeyError \u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u30d5\u30c3\u30af\u3057\u307e\u3059\u3002\n\n\u5148\u306e `__prepare__` \u3067\u540d\u524d\u7a7a\u9593\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066 `__missing__` \u3092\u3082\u3064\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u8fd4\u305b\u3070\u3001\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u30d5\u30c3\u30af\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:prepare_missing.py\nclass MyNameSpace(dict):\n    def __missing__(self, key):\n        self[key] = value = 'x'\n        return value\n\nclass MyMetaclass(type):\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        return MyNameSpace()\n\n    def __new__(metacls, cls, bases, classdict):\n        print('classdict is', classdict.__class__)\n        return super().__new__(metacls, cls, bases, classdict)\n```\n\n\u3053\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```py3:3.4\n>>> from prepare_missing import MyMetaclass\n>>> class Color(metaclass=MyMetaclass):\n...     red, green, blue\n... \nclassdict is <class 'status.MyNameSpace'>\n>>> Color.red\n'x'\n>>> Color.blue\n'x'\n```\n\n\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b\u30e1\u30bf\u30af\u30e9\u30b9 *MyMetaclass* \u306e `__new__` \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3001\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593 (*classdict*) \u306b *MyNameSpace* \u304c\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002*MyNameSpace* \u306e `__missing__` \u3067\u306f\u3001\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u3001\u3064\u307e\u308a\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u306b\u5b58\u5728\u3057\u306a\u3044\u540d\u524d\u306b\u5bfe\u3057\u3066\u3001\u6587\u5b57\u5217\u306e *x* \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5fdc\u7528\u3059\u308b\u3068 *ImplicitEnum* \u306f\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```py3:3.4\n>>> from extenum import ImplicitEnum\n>>> class Color(ImplicitEnum):\n...     RED\n...     GREEN\n...     BLUE\n...\n>>> for name, const in Color.__members__.items():\n...     print(name, ':', const.value)\n...\nRED : 1\nGREEN : 2\nBLUE : 3\n```\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u524d\u7bc0\u306e *ConstantSpecificEnum* \u306e *`@overload`* \u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3082\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u5b9a\u7fa9\u305d\u306e\u3082\u306e\u3092\u96a0\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u81ea\u4f53\u306f\u8cdb\u5426\u4e21\u8ad6\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001*`@classmethod`* \u3084 *`@staticmethod`* \u306a\u3069\u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u3001\u96a0\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u4f7f\u3046\u5074\u304b\u3089\u9055\u548c\u611f\u306f\u306a\u3044\u304b\u306a\u3041\u3068\u8003\u3048\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n### EnumSet\nEnumSet \u306f Enum \u5b9a\u6570\u3092\u542b\u3080\u96c6\u5408 (set) \u3092\u751f\u6210\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002Java \u306e [EnumSet](http://docs.oracle.com/javase/jp/8/docs/api/java/util/EnumSet.html) \u3092\u773a\u3081\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5206\u304b\u308a\u3084\u3059\u3044\u7528\u9014\u3068\u3057\u3066\u30d3\u30c3\u30c8\u6f14\u7b97\u3067\u5b9f\u88c5\u3057\u3066\u3044\u305f\u30d5\u30e9\u30b0\u64cd\u4f5c\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u3001EnumSet \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u3068\u4eba\u306b\u6613\u3057\u3044\u96f0\u56f2\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:3.4\n>>> from enum import Enum\n>>> class Mode(Enum):\n...     READ = 4\n...     WRITE = 2\n...     EXECUTE = 1\n... \n```\n\n\u3053\u306e *Mode* \u306e\u5217\u6319\u578b\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:3.4\n>>> from extenum import EnumSet\n\n>>> EnumSet.all_of(Mode)  # Mode \u306e\u5168\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080 EnumSet \u3092\u751f\u6210\nEnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\n\n>>> EnumSet.none_of(Mode)  # Mode \u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u53d7\u3051\u53d6\u308b\u7a7a\u3063\u307d\u306e EnumSet \u3092\u751f\u6210\nEnumSet()\n\n>>> enumset = EnumSet.of(Mode.READ, Mode.EXECUTE)  # \u4efb\u610f\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080 EnumSet \u3092\u751f\u6210\n>>> enumset\nEnumSet({<Mode.READ: 4>, <Mode.EXECUTE: 1>})\n>>> enumset.update(EnumSet.of(Mode.READ, Mode.WRITE))\n>>> enumset\nEnumSet({<Mode.READ: 4>, <Mode.WRITE: 2>, <Mode.EXECUTE: 1>})\n>>> Mode.WRITE in enumset\nTrue\n>>> 2 in enumset\nFalse\n```\n\nEnumSet \u306b\u307e\u3068\u3081\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u30e2\u30fc\u30c9\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u306e\u53d6\u308a\u6271\u3044\u304c\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\nJava \u3063\u307d\u3044 enum \u62e1\u5f35\u3068\u3057\u3066 [extenum](https://pypi.python.org/pypi/extenum) \u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3057\u305f\u3002\n\n* \u5b9a\u6570\u56fa\u5b9a\u30e1\u30bd\u30c3\u30c9\n* \u6697\u9ed9\u306e\u5217\u6319\u578b\u30e1\u30f3\u30d0\u30fc\n* EnumSet\n\n\u6a19\u6e96\u306e *Enum*\u3001*EnumMeta*\u3001*_EnumDict* \u3092\u7d99\u627f\u3057\u3066\u62e1\u5f35\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u304a\u305d\u3089\u304f\u306f\u901a\u5e38\u306e\u5217\u6319\u578b\u3068\u3057\u3066\u3082\u7d20\u76f4\u306b\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u304a\u3082\u3057\u308d\u305d\u3046\u306a enum \u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u4f7f\u3046\u3088\u308a\u3082\u4f5c\u308b\u65b9\u304c\u76ee\u7684\u3060\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u3002\n", "tags": ["Python3.4", "enum"]}