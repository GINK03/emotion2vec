{"context": "\n\n1. \u521d\u3081\u306b\n\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\uff0c\u682a\u4fa1\u306e\u69cb\u9020\u3092\u76f4\u63a5\u76f8\u95a2\u306b\u7740\u76ee\u3057\u3066\u6d6e\u304d\u4e0a\u304c\u3089\u305b\uff0c\u53ef\u8996\u5316\u7684\u306b\u3082\u8a08\u7b97\u7684\u306b\u3082\u53d6\u308a\u6271\u3044\u3084\u3059\u3044\u758e\u306a\u30b0\u30e9\u30d5\u3078\u5909\u63db\u3057\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u5b9a\u306e\u30a8\u30c3\u30b8\u304c\u5f37\u8abf\u3055\u308c\u305f\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3092\u63cf\u5199\u3057\u307e\u3059\uff0e\n\nKaggle\u306e\u8a18\u4e8b\u3067\u3082\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\uff0c\u3053\u306e\u3088\u3046\u306a\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3067\u628a\u63e1\u3059\u308b\u3053\u3068\u306f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e88\u6e2c\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u5909\u6570\u3092\u65b0\u305f\u306b\u4f5c\u6210\u3059\u308b\u305f\u3081\uff0c\u975e\u5e38\u306b\u5f79\u7acb\u3064\u624b\u6bb5\u3068\u306a\u308a\u3048\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u4eca\u56de\u306f\u4e00\u822c\u7684\u306a\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u3067\u306f\u306a\u304f\uff0cGraphLasso\u3092\u7528\u3044\u3066\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3092\u63cf\u5199\u3057\u307e\u3059\uff0e\u901a\u5e38\uff0c\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u306f\u76f4\u63a5\u76f8\u95a2\u3068\u9593\u63a5\u76f8\u95a2\u306e\uff12\u7a2e\u985e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u9593\u63a5\u76f8\u95a2\u3068\u306f\uff0c\u672c\u6765\u3067\u306f\u56e0\u679c\u95a2\u4fc2\u304c\u6210\u7acb\u3057\u306a\u3044\u306f\u305a\u306e\u5909\u6570\u9593\u3067\u7b2c\u4e09\u56e0\u5b50\u306e\u5b58\u5728\u306b\u3088\u308a\u76f8\u95a2\u304c\u767a\u751f\u3059\u308b\uff0c\u898b\u304b\u3051\u4e0a\u306e\u76f8\u95a2\u3092\u610f\u5473\u3057\u307e\u3059\uff0eSklearn\u306eGraphLasso\u306f\uff0c\u5404\u5909\u6570\u306e\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\uff0c\u7cbe\u5ea6\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u3067\uff0c\u3053\u306e\u9593\u63a5\u76f8\u95a2\u3092\u524a\u304e\u843d\u3068\u3057\u305f\u758e\u306a\u884c\u5217\u3068\u3057\u3066\u6c42\u3081\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u8a73\u7d30\u306f\u3053\u3061\u3089\u306e\u66f8\u7c4d\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u6570\u5f0f\u3092\u4e01\u5be7\u306b\u8aac\u660e\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\n\n\n2. \u65b9\u91dd\n\u682a\u5f0f\u5e02\u5834\u306e\u69cb\u9020\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\uff0c\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u4e00\u65e5\u306e\u4fa1\u683c\u5909\u52d5\u91cf\u3067\u3059\uff0e\n\n2.1. \u30b0\u30e9\u30d5\u69cb\u9020\u3092\u89e3\u6790\u3059\u308b\n\u30b9\u30d1\u30fc\u30b9\u306a\u7cbe\u5ea6\u884c\u5217\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\uff0c\u3069\u306e\u682a\u4fa1\u304c\u76f8\u95a2\u3092\u6301\u3064\u304b\u767a\u898b\u3057\u307e\u3059\uff0e\u7279\u306b\uff0c\u758e\u306a\u7cbe\u5ea6\u884c\u5217\u306f\u30b0\u30e9\u30d5\u3068\u3057\u3066\u682a\u4fa1\u9593\u306e\u3064\u306a\u304c\u308a\u3092\u4e0e\u3048\u3066\u304f\u308c\u307e\u3059\uff0e\n\n2.2. \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u6319\u52d5\u304c\u4f3c\u3066\u3044\u308b\u682a\u4fa1\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\uff0esklearn\u3067\u306f\u591a\u304f\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3053\u3067\u306fAffinity Propagation\u3092\u7528\u3044\u307e\u3059\uff0e\u3053\u306e\u624b\u6cd5\u306f\uff0c\u540c\u3058\u30b5\u30a4\u30ba\u306e\u30af\u30e9\u30b9\u30bf\u304c\u5f37\u8abf\u3055\u308c\u308b\u3053\u3068\u306a\u304f\uff0c\u6063\u610f\u7684\u306b\u30af\u30e9\u30b9\u30bf\u6570\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3067\u3059\uff0e\n\u6ce8\u76ee\u3057\u305f\u3044\u306e\u306f\uff0c\u3053\u306e\u624b\u6cd5\u306f\u30b0\u30e9\u30d5\u3068\u306f\u7570\u306a\u308b\u8868\u8a18\u304c\u306a\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u30b0\u30e9\u30d5\u306f\uff11\u5bfe\uff11\u306e\u5909\u6570\u9593\u306e\u6027\u8cea\u3092\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u306f\u5468\u8fba\u7684\u306a\u6027\u8cea\u3092\u53cd\u6620\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306e\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u4f01\u696d\u306f\uff0c\u682a\u5f0f\u5e02\u5834\u5168\u4f53\u3078\u306e\u985e\u4f3c\u3057\u305f\u30ec\u30d9\u30eb\u306e\u5f71\u97ff\u529b\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u8a00\u3048\u307e\u3059\uff0e\n\n2.3. 2D\u30b9\u30d1\u30fc\u30b9\u306a\u5727\u7e2e\n\uff12\u6b21\u5143\u3067\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\uff0c\u4f55\u304b\u3057\u3089\u306e\u63cf\u5199\u65b9\u6cd5\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\uff0c\uff12\u6b21\u5143\u3078\u5727\u7e2e\u3059\u308b\u3053\u3068\u3067\u5404\u5909\u6570\u306e\u30ce\u30fc\u30c9\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff0e\n\u4f7f\u7528\u3057\u3066\u3044\u308b\u5727\u7e2e\u65b9\u6cd5\u306fLLE\u3067\u3059\uff0e\u305d\u306e\u4ed6\u306e\u5727\u7e2e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e\n\n2.4. \u53ef\u8996\u5316\n\u5148\u8ff0\u3057\u305f\uff13\u3064\u306e\u30e2\u30c7\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\uff12\u6b21\u5143\u30b0\u30e9\u30d5\u3078\u63cf\u5199\u3057\u307e\u3059\uff0e\u30ce\u30fc\u30c9\u3068\u30a8\u30c3\u30b8\u306f\u6b21\u306e\uff13\u3064\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30d9\u30eb\u306f\u30ce\u30fc\u30c9\u306e\u8272\u3067\u8868\u73fe\n\u30b9\u30d1\u30fc\u30b9\u306a\u5171\u76f8\u95a2\u30e2\u30c7\u30eb\u306f\u30a8\u30c3\u30b8\u306e\u5f37\u3055\n\u682a\u4fa1\u3092\u5909\u6570\u3054\u3068\u306b\uff12\u6b21\u5143\u3078\u5727\u7e2e\u3057\uff0c\u30ce\u30fc\u30c9\u306e\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3059\u308b\n\n\n3. \u682a\u5f0f\u5e02\u5834\u306e\u69cb\u9020\u5b66\u7fd2\n\n3.1. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nimport datetime\n\nimport numpy as np\nimport matplotlib.pyplot as plt\ntry:\n     from matplotlib.finance import quotes_historical_yahoo_ochl\nexcept ImportError:\n     # quotes_historical_yahoo_ochl was named quotes_historical_yahoo before matplotlib 1.4\n     from matplotlib.finance import quotes_historical_yahoo as quotes_historical_yahoo_ochl\nfrom matplotlib.collections import LineCollection\nfrom sklearn import cluster, covariance, manifold\n\nmatplotlib\u306e\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e\n# Choose a time period reasonably calm (not too long ago so that we get\n# high-tech firms, and before the 2008 crash)\nd1 = datetime.datetime(2003, 1, 1)\nd2 = datetime.datetime(2008, 1, 1)\n\n# kraft symbol has now changed from KFT to MDLZ in yahoo\nsymbol_dict = {\n    'TOT': 'Total',\n    'XOM': 'Exxon',\n    'CVX': 'Chevron',\n    'COP': 'ConocoPhillips',\n    'VLO': 'Valero Energy',\n    'MSFT': 'Microsoft',\n    'IBM': 'IBM',\n    'TWX': 'Time Warner',\n    'CMCSA': 'Comcast',\n    'CVC': 'Cablevision',\n    'YHOO': 'Yahoo',\n    'DELL': 'Dell',\n    'HPQ': 'HP',\n    'AMZN': 'Amazon',\n    'TM': 'Toyota',\n    'CAJ': 'Canon',\n    'MTU': 'Mitsubishi',\n    'SNE': 'Sony',\n    'F': 'Ford',\n    'HMC': 'Honda',\n    'NAV': 'Navistar',\n    'NOC': 'Northrop Grumman',\n    'BA': 'Boeing',\n    'KO': 'Coca Cola',\n    'MMM': '3M',\n    'MCD': 'Mc Donalds',\n    'PEP': 'Pepsi',\n    'MDLZ': 'Kraft Foods',\n    'K': 'Kellogg',\n    'UN': 'Unilever',\n    'MAR': 'Marriott',\n    'PG': 'Procter Gamble',\n    'CL': 'Colgate-Palmolive',\n    'GE': 'General Electrics',\n    'WFC': 'Wells Fargo',\n    'JPM': 'JPMorgan Chase',\n    'AIG': 'AIG',\n    'AXP': 'American express',\n    'BAC': 'Bank of America',\n    'GS': 'Goldman Sachs',\n    'AAPL': 'Apple',\n    'SAP': 'SAP',\n    'CSCO': 'Cisco',\n    'TXN': 'Texas instruments',\n    'XRX': 'Xerox',\n    'LMT': 'Lookheed Martin',\n    'WMT': 'Wal-Mart',\n    'WBA': 'Walgreen',\n    'HD': 'Home Depot',\n    'GSK': 'GlaxoSmithKline',\n    'PFE': 'Pfizer',\n    'SNY': 'Sanofi-Aventis',\n    'NVS': 'Novartis',\n    'KMB': 'Kimberly-Clark',\n    'R': 'Ryder',\n    'GD': 'General Dynamics',\n    'RTN': 'Raytheon',\n    'CVS': 'CVS',\n    'CAT': 'Caterpillar',\n    'DD': 'DuPont de Nemours'}\n\nsymbols, names = np.array(list(symbol_dict.items())).T\n\nquotes = [quotes_historical_yahoo_ochl(symbol, d1, d2, asobject=True)\n          for symbol in symbols]\n\nopen = np.array([q.open for q in quotes]).astype(np.float)\nclose = np.array([q.close for q in quotes]).astype(np.float)\n\n# The daily variations of the quotes are what carry most information\nvariation = close - open\n\n\u4e00\u65e5\u306e\u5909\u52d5\u91cf\u3092variation\u3068\u3057\u3066\u6c42\u3081\u307e\u3059\uff0e\n\u3053\u308c\u304c\u4eca\u56de\u53d6\u308a\u6271\u3046\u5165\u529b\u5024\u3068\u306a\u308a\u307e\u3059\uff0e\n\n3.2. GraphLasso\u3067\u69cb\u9020\u5b66\u7fd2\nSklearn\u3067\u306fGraphLassoCV\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u69cb\u9020\u5b66\u7fd2\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066alpha\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\uff0cCV\u3068\u3044\u3046\u3053\u3068\u3067alpha\u3078\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306falpha=4\u3067\u3059\uff0e\nedge_model = covariance.GraphLassoCV()\n\n# standardize the time series: using correlations rather than covariance\n# is more efficient for structure recovery\nX = variation.copy().T\nX /= X.std(axis=0)\nedge_model.fit(X)\n\nGraphLasso\u3067\u306f\uff0c\u5909\u6570\u306f\u4e8b\u524d\u306b\u6a19\u6e96\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u308b\u305f\u3081\uff0c\u3053\u3053\u3067\u306f\u5206\u6563\u3092\u30bc\u30ed\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306f[\u5171\u76f8\u95a2\u884c\u5217\uff1aedge_model.convariance_, \u7cbe\u5ea6\u884c\u5217\uff1aedge_model.precision_]\u3067\u78ba\u8a8d\u304c\u53ef\u80fd\u3067\u3059\uff0e\u5909\u6570\u306e\u6570\u3092N\u3068\u3059\u308b\u3068NxN\u306e\u4e09\u89d2\u884c\u5217\u3068\u3057\u3066\u5171\u76f8\u95a2\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n_, labels = cluster.affinity_propagation(edge_model.covariance_)\nn_labels = labels.max()\n\nfor i in range(n_labels + 1):\n    print('Cluster %i: %s' % ((i + 1), ', '.join(names[labels == i])))\n\n\n3.3. \u8a08\u7b97\u7d50\u679c\u306e\u51e6\u7406\u3068\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u306e\u63cf\u5199\n\u7b97\u51fa\u3057\u305f\u5171\u76f8\u95a2\u884c\u5217\u3092affinity_propagation\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30af\u30e9\u30b9\u30bf\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\nCluster 1: Pepsi, Coca Cola, Kellogg\nCluster 2: Apple, Amazon, Yahoo\nCluster 3: GlaxoSmithKline, Novartis, Sanofi-Aventis\nCluster 4: Comcast, Time Warner, Cablevision\nCluster 5: ConocoPhillips, Chevron, Total, Valero Energy, Exxon\nCluster 6: CVS, Walgreen\nCluster 7: Navistar, Sony, Marriott, Caterpillar, Canon, Toyota, Honda, Mitsubishi, Xerox, Unilever\nCluster 8: Kimberly-Clark, Colgate-Palmolive, Procter Gamble\nCluster 9: American express, Ryder, Goldman Sachs, Wal-Mart, General Electrics, Pfizer, Wells Fargo, DuPont de Nemours, Bank of America, AIG, Home Depot, Ford, JPMorgan Chase, Mc Donalds\nCluster 10: Microsoft, SAP, 3M, IBM, Texas instruments, HP, Dell, Cisco\nCluster 11: Raytheon, Boeing, Lookheed Martin, General Dynamics, Northrop Grumman\nCluster 12: Kraft Foods\n\n\u3053\u308c\u3067\u5404\u5909\u6570\u306e\u30e9\u30d9\u30ea\u30f3\u30b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\uff0e\n\u6b21\u306b\u5404\u5909\u6570\u306e\u5024\u3092\uff12\u3064\u3078\u5727\u7e2e\u3057\u307e\u3059\uff0e\u5727\u7e2e\u65b9\u6cd5\u306fLLE\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n# We use a dense eigen_solver to achieve reproducibility (arpack is\n# initiated with random vectors that we don't control). In addition, we\n# use a large number of neighbors to capture the large-scale structure.\nnode_position_model = manifold.LocallyLinearEmbedding(\n    n_components=2, eigen_solver='dense', n_neighbors=6)\n\nembedding = node_position_model.fit_transform(X.T).T\n\n\u3053\u308c\u306b\u3088\u308aembedding.shape=(2, 60)\u306e\u5727\u7e2e\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\u305d\u3057\u3066GraphLasso\u3067\u8a08\u7b97\u3057\u305f\u7cbe\u5ea6\u884c\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\nplt.figure(1, facecolor='w', figsize=(10, 8))\nplt.clf()\nax = plt.axes([0., 0., 1., 1.])\nplt.axis('off')\n\n# Display a graph of the partial correlations\npartial_correlations = edge_model.precision_.copy()\nd = 1 / np.sqrt(np.diag(partial_correlations))\npartial_correlations *= d\npartial_correlations *= d[:, np.newaxis]\nnon_zero = (np.abs(np.triu(partial_correlations, k=1)) > 0.02)\n\n\u7cbe\u5ea6\u884c\u5217\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff0e\n\u6b21\u304b\u3089\u7d50\u679c\u3092\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u30ce\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u540c\u3058\u8272\u306e\u30ce\u30fc\u30c9\u304cLLE\u3067\u53d6\u5f97\u3057\u305f\u540c\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n# Plot the nodes using the coordinates of our embedding\nplt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels,\n            cmap=plt.cm.spectral)\n\n\n\u6b21\u306b\u30a8\u30c3\u30b8\u3092\u63cf\u5199\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\nGraphLasso\u3067\u7b97\u51fa\u3057\u305f\u7cbe\u5ea6\u884c\u5217\u3092\u3082\u3068\u306b\uff0cLine\u306e\u8272\u3068\u30b5\u30a4\u30ba\u3092\u5909\u5316\u3055\u305b\u307e\u3059\uff0e\n# Plot the edges\nstart_idx, end_idx = np.where(non_zero)\n#a sequence of (*line0*, *line1*, *line2*), where::\n#            linen = (x0, y0), (x1, y1), ... (xm, ym)\nsegments = [[embedding[:, start], embedding[:, stop]]\n            for start, stop in zip(start_idx, end_idx)]\nvalues = np.abs(partial_correlations[non_zero])\nlc = LineCollection(segments,\n                    zorder=0, cmap=plt.cm.hot_r,\n                    norm=plt.Normalize(0, .7 * values.max()))\nlc.set_array(values)\nlc.set_linewidths(15 * values)\nax.add_collection(lc)\n\n\u6700\u5f8c\u306b\u7d30\u304b\u3044\u30e9\u30d9\u30eb\u3065\u3051\u3092\u3057\u3066\u5b8c\u4e86\u3067\u3059\uff0e\n# Add a label to each node. The challenge here is that we want to\n# position the labels to avoid overlap with other labels\nfor index, (name, label, (x, y)) in enumerate(\n        zip(names, labels, embedding.T)):\n\n    dx = x - embedding[0]\n    dx[index] = 1\n    dy = y - embedding[1]\n    dy[index] = 1\n    this_dx = dx[np.argmin(np.abs(dy))]\n    this_dy = dy[np.argmin(np.abs(dx))]\n    if this_dx > 0:\n        horizontalalignment = 'left'\n        x = x + .002\n    else:\n        horizontalalignment = 'right'\n        x = x - .002\n    if this_dy > 0:\n        verticalalignment = 'bottom'\n        y = y + .002\n    else:\n        verticalalignment = 'top'\n        y = y - .002\n    plt.text(x, y, name, size=10,\n             horizontalalignment=horizontalalignment,\n             verticalalignment=verticalalignment,\n             bbox=dict(facecolor='w',\n                       edgecolor=plt.cm.spectral(label / float(n_labels)),\n                       alpha=.6))\n\nplt.xlim(embedding[0].min() - .15 * embedding[0].ptp(),\n         embedding[0].max() + .10 * embedding[0].ptp(),)\nplt.ylim(embedding[1].min() - .03 * embedding[1].ptp(),\n         embedding[1].max() + .03 * embedding[1].ptp())\n\nplt.show()\n\n\u7d50\u679c\u306f\u6700\u521d\u306b\u793a\u3057\u305f\u901a\u308a\uff0e\n\u30ce\u30fc\u30c9\u306e\u8272\u306f\u682a\u4fa1\u306e\u5909\u52d5\u304b\u3089\u898b\u305f\u985e\u4f3c\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\uff0c\u30a8\u30c3\u30b8\u304c\u6fc3\u304f\u592a\u3044\u307b\u3069\u76f4\u63a5\u76f8\u95a2\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u540c\u696d\u7a2e\u306f\u30ce\u30fc\u30c9\u9593\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u5168\u4f53\u7684\u306b\u4f3c\u901a\u3063\u305f\u6319\u52d5\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\u540c\u69d8\u306e\u30af\u30e9\u30b9\u30bf\u5185\u3067\u306f\uff0c\u7279\u5b9a\u306e\u4f01\u696d\u9593\u3067\u7279\u306b\u5f37\u3044\u76f4\u63a5\u76f8\u95a2\u304c\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u6570\u306f\u5c11\u306a\u3044\u3067\u3059\u304c\uff0c\u90e8\u5206\u7684\u306b\u7570\u306a\u308b\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7279\u5b9a\u4f01\u696d\u9593\u3067\u76f4\u63a5\u76f8\u95a2\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n# 1. \u521d\u3081\u306b\n[\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b](http://scikit-learn.org/stable/auto_examples/applications/plot_stock_market.html#sphx-glr-auto-examples-applications-plot-stock-market-py)\uff0c\u682a\u4fa1\u306e\u69cb\u9020\u3092\u76f4\u63a5\u76f8\u95a2\u306b\u7740\u76ee\u3057\u3066\u6d6e\u304d\u4e0a\u304c\u3089\u305b\uff0c\u53ef\u8996\u5316\u7684\u306b\u3082\u8a08\u7b97\u7684\u306b\u3082\u53d6\u308a\u6271\u3044\u3084\u3059\u3044\u758e\u306a\u30b0\u30e9\u30d5\u3078\u5909\u63db\u3057\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u5b9a\u306e\u30a8\u30c3\u30b8\u304c\u5f37\u8abf\u3055\u308c\u305f\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3092\u63cf\u5199\u3057\u307e\u3059\uff0e\n\n![sphx_glr_plot_stock_market_001.png](https://qiita-image-store.s3.amazonaws.com/0/72093/22e88124-da3f-6104-037e-f134b2d3a6b3.png)\n\n[Kaggle\u306e\u8a18\u4e8b\u3067\u3082\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c](http://qiita.com/TomHortons/items/51aa356455c0b6e8945a)\uff0c\u3053\u306e\u3088\u3046\u306a\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3067\u628a\u63e1\u3059\u308b\u3053\u3068\u306f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e88\u6e2c\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u5909\u6570\u3092\u65b0\u305f\u306b\u4f5c\u6210\u3059\u308b\u305f\u3081\uff0c\u975e\u5e38\u306b\u5f79\u7acb\u3064\u624b\u6bb5\u3068\u306a\u308a\u3048\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u4eca\u56de\u306f\u4e00\u822c\u7684\u306a\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u3067\u306f\u306a\u304f\uff0cGraphLasso\u3092\u7528\u3044\u3066\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3092\u63cf\u5199\u3057\u307e\u3059\uff0e\u901a\u5e38\uff0c\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u306f\u76f4\u63a5\u76f8\u95a2\u3068\u9593\u63a5\u76f8\u95a2\u306e\uff12\u7a2e\u985e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u9593\u63a5\u76f8\u95a2\u3068\u306f\uff0c\u672c\u6765\u3067\u306f\u56e0\u679c\u95a2\u4fc2\u304c\u6210\u7acb\u3057\u306a\u3044\u306f\u305a\u306e\u5909\u6570\u9593\u3067\u7b2c\u4e09\u56e0\u5b50\u306e\u5b58\u5728\u306b\u3088\u308a\u76f8\u95a2\u304c\u767a\u751f\u3059\u308b\uff0c\u898b\u304b\u3051\u4e0a\u306e\u76f8\u95a2\u3092\u610f\u5473\u3057\u307e\u3059\uff0eSklearn\u306eGraphLasso\u306f\uff0c\u5404\u5909\u6570\u306e\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u3068\u3044\u3046\u524d\u63d0\u306e\u3082\u3068\uff0c\u7cbe\u5ea6\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u3067\uff0c\u3053\u306e\u9593\u63a5\u76f8\u95a2\u3092\u524a\u304e\u843d\u3068\u3057\u305f\u758e\u306a\u884c\u5217\u3068\u3057\u3066\u6c42\u3081\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u8a73\u7d30\u306f\u3053\u3061\u3089\u306e\u66f8\u7c4d\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u6570\u5f0f\u3092\u4e01\u5be7\u306b\u8aac\u660e\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/72093/3a530035-df4f-3e7d-a26d-e76e81931792.jpeg\" width=\"150\">\n\n# 2. \u65b9\u91dd\n\u682a\u5f0f\u5e02\u5834\u306e\u69cb\u9020\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\uff0c\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u4e00\u65e5\u306e\u4fa1\u683c\u5909\u52d5\u91cf\u3067\u3059\uff0e\n## 2.1. \u30b0\u30e9\u30d5\u69cb\u9020\u3092\u89e3\u6790\u3059\u308b\n\u30b9\u30d1\u30fc\u30b9\u306a\u7cbe\u5ea6\u884c\u5217\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\uff0c\u3069\u306e\u682a\u4fa1\u304c\u76f8\u95a2\u3092\u6301\u3064\u304b\u767a\u898b\u3057\u307e\u3059\uff0e\u7279\u306b\uff0c\u758e\u306a\u7cbe\u5ea6\u884c\u5217\u306f\u30b0\u30e9\u30d5\u3068\u3057\u3066\u682a\u4fa1\u9593\u306e\u3064\u306a\u304c\u308a\u3092\u4e0e\u3048\u3066\u304f\u308c\u307e\u3059\uff0e\n## 2.2. \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u6319\u52d5\u304c\u4f3c\u3066\u3044\u308b\u682a\u4fa1\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\uff0esklearn\u3067\u306f\u591a\u304f\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3053\u3067\u306fAffinity Propagation\u3092\u7528\u3044\u307e\u3059\uff0e\u3053\u306e\u624b\u6cd5\u306f\uff0c\u540c\u3058\u30b5\u30a4\u30ba\u306e\u30af\u30e9\u30b9\u30bf\u304c\u5f37\u8abf\u3055\u308c\u308b\u3053\u3068\u306a\u304f\uff0c\u6063\u610f\u7684\u306b\u30af\u30e9\u30b9\u30bf\u6570\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3067\u3059\uff0e\n\u6ce8\u76ee\u3057\u305f\u3044\u306e\u306f\uff0c\u3053\u306e\u624b\u6cd5\u306f\u30b0\u30e9\u30d5\u3068\u306f\u7570\u306a\u308b\u8868\u8a18\u304c\u306a\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u30b0\u30e9\u30d5\u306f\uff11\u5bfe\uff11\u306e\u5909\u6570\u9593\u306e\u6027\u8cea\u3092\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u306f\u5468\u8fba\u7684\u306a\u6027\u8cea\u3092\u53cd\u6620\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306e\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u4f01\u696d\u306f\uff0c\u682a\u5f0f\u5e02\u5834\u5168\u4f53\u3078\u306e\u985e\u4f3c\u3057\u305f\u30ec\u30d9\u30eb\u306e\u5f71\u97ff\u529b\u3092\u6301\u3063\u3066\u3044\u308b\u3068\u8a00\u3048\u307e\u3059\uff0e\n## 2.3. 2D\u30b9\u30d1\u30fc\u30b9\u306a\u5727\u7e2e\n\uff12\u6b21\u5143\u3067\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\uff0c\u4f55\u304b\u3057\u3089\u306e\u63cf\u5199\u65b9\u6cd5\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\uff0c\uff12\u6b21\u5143\u3078\u5727\u7e2e\u3059\u308b\u3053\u3068\u3067\u5404\u5909\u6570\u306e\u30ce\u30fc\u30c9\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff0e\n\u4f7f\u7528\u3057\u3066\u3044\u308b\u5727\u7e2e\u65b9\u6cd5\u306fLLE\u3067\u3059\uff0e\u305d\u306e\u4ed6\u306e\u5727\u7e2e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e](http://qiita.com/TomHortons/items/2064870af3f3f7f2b209)\n## 2.4. \u53ef\u8996\u5316\n\u5148\u8ff0\u3057\u305f\uff13\u3064\u306e\u30e2\u30c7\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\uff12\u6b21\u5143\u30b0\u30e9\u30d5\u3078\u63cf\u5199\u3057\u307e\u3059\uff0e\u30ce\u30fc\u30c9\u3068\u30a8\u30c3\u30b8\u306f\u6b21\u306e\uff13\u3064\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\uff0e\n\n* \u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30d9\u30eb\u306f\u30ce\u30fc\u30c9\u306e\u8272\u3067\u8868\u73fe\n* \u30b9\u30d1\u30fc\u30b9\u306a\u5171\u76f8\u95a2\u30e2\u30c7\u30eb\u306f\u30a8\u30c3\u30b8\u306e\u5f37\u3055\n* \u682a\u4fa1\u3092\u5909\u6570\u3054\u3068\u306b\uff12\u6b21\u5143\u3078\u5727\u7e2e\u3057\uff0c\u30ce\u30fc\u30c9\u306e\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3059\u308b\n\n# 3. \u682a\u5f0f\u5e02\u5834\u306e\u69cb\u9020\u5b66\u7fd2\n\n## 3.1. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n\n```\nimport datetime\n\nimport numpy as np\nimport matplotlib.pyplot as plt\ntry:\n     from matplotlib.finance import quotes_historical_yahoo_ochl\nexcept ImportError:\n     # quotes_historical_yahoo_ochl was named quotes_historical_yahoo before matplotlib 1.4\n     from matplotlib.finance import quotes_historical_yahoo as quotes_historical_yahoo_ochl\nfrom matplotlib.collections import LineCollection\nfrom sklearn import cluster, covariance, manifold\n```\n\nmatplotlib\u306e\u30d5\u30a1\u30a4\u30ca\u30f3\u30b9\u30c7\u30fc\u30bf\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e\n\n```\n# Choose a time period reasonably calm (not too long ago so that we get\n# high-tech firms, and before the 2008 crash)\nd1 = datetime.datetime(2003, 1, 1)\nd2 = datetime.datetime(2008, 1, 1)\n\n# kraft symbol has now changed from KFT to MDLZ in yahoo\nsymbol_dict = {\n    'TOT': 'Total',\n    'XOM': 'Exxon',\n    'CVX': 'Chevron',\n    'COP': 'ConocoPhillips',\n    'VLO': 'Valero Energy',\n    'MSFT': 'Microsoft',\n    'IBM': 'IBM',\n    'TWX': 'Time Warner',\n    'CMCSA': 'Comcast',\n    'CVC': 'Cablevision',\n    'YHOO': 'Yahoo',\n    'DELL': 'Dell',\n    'HPQ': 'HP',\n    'AMZN': 'Amazon',\n    'TM': 'Toyota',\n    'CAJ': 'Canon',\n    'MTU': 'Mitsubishi',\n    'SNE': 'Sony',\n    'F': 'Ford',\n    'HMC': 'Honda',\n    'NAV': 'Navistar',\n    'NOC': 'Northrop Grumman',\n    'BA': 'Boeing',\n    'KO': 'Coca Cola',\n    'MMM': '3M',\n    'MCD': 'Mc Donalds',\n    'PEP': 'Pepsi',\n    'MDLZ': 'Kraft Foods',\n    'K': 'Kellogg',\n    'UN': 'Unilever',\n    'MAR': 'Marriott',\n    'PG': 'Procter Gamble',\n    'CL': 'Colgate-Palmolive',\n    'GE': 'General Electrics',\n    'WFC': 'Wells Fargo',\n    'JPM': 'JPMorgan Chase',\n    'AIG': 'AIG',\n    'AXP': 'American express',\n    'BAC': 'Bank of America',\n    'GS': 'Goldman Sachs',\n    'AAPL': 'Apple',\n    'SAP': 'SAP',\n    'CSCO': 'Cisco',\n    'TXN': 'Texas instruments',\n    'XRX': 'Xerox',\n    'LMT': 'Lookheed Martin',\n    'WMT': 'Wal-Mart',\n    'WBA': 'Walgreen',\n    'HD': 'Home Depot',\n    'GSK': 'GlaxoSmithKline',\n    'PFE': 'Pfizer',\n    'SNY': 'Sanofi-Aventis',\n    'NVS': 'Novartis',\n    'KMB': 'Kimberly-Clark',\n    'R': 'Ryder',\n    'GD': 'General Dynamics',\n    'RTN': 'Raytheon',\n    'CVS': 'CVS',\n    'CAT': 'Caterpillar',\n    'DD': 'DuPont de Nemours'}\n\nsymbols, names = np.array(list(symbol_dict.items())).T\n\nquotes = [quotes_historical_yahoo_ochl(symbol, d1, d2, asobject=True)\n          for symbol in symbols]\n\nopen = np.array([q.open for q in quotes]).astype(np.float)\nclose = np.array([q.close for q in quotes]).astype(np.float)\n\n# The daily variations of the quotes are what carry most information\nvariation = close - open\n```\n\n\u4e00\u65e5\u306e\u5909\u52d5\u91cf\u3092variation\u3068\u3057\u3066\u6c42\u3081\u307e\u3059\uff0e\n\u3053\u308c\u304c\u4eca\u56de\u53d6\u308a\u6271\u3046\u5165\u529b\u5024\u3068\u306a\u308a\u307e\u3059\uff0e\n\n## 3.2. GraphLasso\u3067\u69cb\u9020\u5b66\u7fd2\nSklearn\u3067\u306fGraphLassoCV\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u69cb\u9020\u5b66\u7fd2\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066alpha\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\uff0cCV\u3068\u3044\u3046\u3053\u3068\u3067alpha\u3078\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306falpha=4\u3067\u3059\uff0e\n\n```\nedge_model = covariance.GraphLassoCV()\n\n# standardize the time series: using correlations rather than covariance\n# is more efficient for structure recovery\nX = variation.copy().T\nX /= X.std(axis=0)\nedge_model.fit(X)\n```\nGraphLasso\u3067\u306f\uff0c\u5909\u6570\u306f\u4e8b\u524d\u306b\u6a19\u6e96\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3068\u306a\u308b\u305f\u3081\uff0c\u3053\u3053\u3067\u306f\u5206\u6563\u3092\u30bc\u30ed\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306f[\u5171\u76f8\u95a2\u884c\u5217\uff1aedge_model.convariance_, \u7cbe\u5ea6\u884c\u5217\uff1aedge_model.precision_]\u3067\u78ba\u8a8d\u304c\u53ef\u80fd\u3067\u3059\uff0e\u5909\u6570\u306e\u6570\u3092N\u3068\u3059\u308b\u3068NxN\u306e\u4e09\u89d2\u884c\u5217\u3068\u3057\u3066\u5171\u76f8\u95a2\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```\n_, labels = cluster.affinity_propagation(edge_model.covariance_)\nn_labels = labels.max()\n\nfor i in range(n_labels + 1):\n    print('Cluster %i: %s' % ((i + 1), ', '.join(names[labels == i])))\n```\n## 3.3. \u8a08\u7b97\u7d50\u679c\u306e\u51e6\u7406\u3068\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u306e\u63cf\u5199\n\n\u7b97\u51fa\u3057\u305f\u5171\u76f8\u95a2\u884c\u5217\u3092affinity_propagation\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30af\u30e9\u30b9\u30bf\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n```\nCluster 1: Pepsi, Coca Cola, Kellogg\nCluster 2: Apple, Amazon, Yahoo\nCluster 3: GlaxoSmithKline, Novartis, Sanofi-Aventis\nCluster 4: Comcast, Time Warner, Cablevision\nCluster 5: ConocoPhillips, Chevron, Total, Valero Energy, Exxon\nCluster 6: CVS, Walgreen\nCluster 7: Navistar, Sony, Marriott, Caterpillar, Canon, Toyota, Honda, Mitsubishi, Xerox, Unilever\nCluster 8: Kimberly-Clark, Colgate-Palmolive, Procter Gamble\nCluster 9: American express, Ryder, Goldman Sachs, Wal-Mart, General Electrics, Pfizer, Wells Fargo, DuPont de Nemours, Bank of America, AIG, Home Depot, Ford, JPMorgan Chase, Mc Donalds\nCluster 10: Microsoft, SAP, 3M, IBM, Texas instruments, HP, Dell, Cisco\nCluster 11: Raytheon, Boeing, Lookheed Martin, General Dynamics, Northrop Grumman\nCluster 12: Kraft Foods\n```\n\n\u3053\u308c\u3067\u5404\u5909\u6570\u306e\u30e9\u30d9\u30ea\u30f3\u30b0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\uff0e\n\u6b21\u306b\u5404\u5909\u6570\u306e\u5024\u3092\uff12\u3064\u3078\u5727\u7e2e\u3057\u307e\u3059\uff0e[\u5727\u7e2e\u65b9\u6cd5\u306fLLE](http://qiita.com/TomHortons/items/2064870af3f3f7f2b209)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```\n# We use a dense eigen_solver to achieve reproducibility (arpack is\n# initiated with random vectors that we don't control). In addition, we\n# use a large number of neighbors to capture the large-scale structure.\nnode_position_model = manifold.LocallyLinearEmbedding(\n    n_components=2, eigen_solver='dense', n_neighbors=6)\n\nembedding = node_position_model.fit_transform(X.T).T\n```\n\u3053\u308c\u306b\u3088\u308aembedding.shape=(2, 60)\u306e\u5727\u7e2e\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\u305d\u3057\u3066GraphLasso\u3067\u8a08\u7b97\u3057\u305f\u7cbe\u5ea6\u884c\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\n\n```\nplt.figure(1, facecolor='w', figsize=(10, 8))\nplt.clf()\nax = plt.axes([0., 0., 1., 1.])\nplt.axis('off')\n\n# Display a graph of the partial correlations\npartial_correlations = edge_model.precision_.copy()\nd = 1 / np.sqrt(np.diag(partial_correlations))\npartial_correlations *= d\npartial_correlations *= d[:, np.newaxis]\nnon_zero = (np.abs(np.triu(partial_correlations, k=1)) > 0.02)\n```\n\u7cbe\u5ea6\u884c\u5217\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff0e\n\u6b21\u304b\u3089\u7d50\u679c\u3092\u5bfe\u30de\u30eb\u30b3\u30d5\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n\u307e\u305a\u306f\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u30ce\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u540c\u3058\u8272\u306e\u30ce\u30fc\u30c9\u304cLLE\u3067\u53d6\u5f97\u3057\u305f\u540c\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n\n```\n# Plot the nodes using the coordinates of our embedding\nplt.scatter(embedding[0], embedding[1], s=100 * d ** 2, c=labels,\n            cmap=plt.cm.spectral)\n\n```\n\n\u6b21\u306b\u30a8\u30c3\u30b8\u3092\u63cf\u5199\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\nGraphLasso\u3067\u7b97\u51fa\u3057\u305f\u7cbe\u5ea6\u884c\u5217\u3092\u3082\u3068\u306b\uff0cLine\u306e\u8272\u3068\u30b5\u30a4\u30ba\u3092\u5909\u5316\u3055\u305b\u307e\u3059\uff0e\n\n```\n# Plot the edges\nstart_idx, end_idx = np.where(non_zero)\n#a sequence of (*line0*, *line1*, *line2*), where::\n#            linen = (x0, y0), (x1, y1), ... (xm, ym)\nsegments = [[embedding[:, start], embedding[:, stop]]\n            for start, stop in zip(start_idx, end_idx)]\nvalues = np.abs(partial_correlations[non_zero])\nlc = LineCollection(segments,\n                    zorder=0, cmap=plt.cm.hot_r,\n                    norm=plt.Normalize(0, .7 * values.max()))\nlc.set_array(values)\nlc.set_linewidths(15 * values)\nax.add_collection(lc)\n```\n\n\u6700\u5f8c\u306b\u7d30\u304b\u3044\u30e9\u30d9\u30eb\u3065\u3051\u3092\u3057\u3066\u5b8c\u4e86\u3067\u3059\uff0e\n\n```\n# Add a label to each node. The challenge here is that we want to\n# position the labels to avoid overlap with other labels\nfor index, (name, label, (x, y)) in enumerate(\n        zip(names, labels, embedding.T)):\n\n    dx = x - embedding[0]\n    dx[index] = 1\n    dy = y - embedding[1]\n    dy[index] = 1\n    this_dx = dx[np.argmin(np.abs(dy))]\n    this_dy = dy[np.argmin(np.abs(dx))]\n    if this_dx > 0:\n        horizontalalignment = 'left'\n        x = x + .002\n    else:\n        horizontalalignment = 'right'\n        x = x - .002\n    if this_dy > 0:\n        verticalalignment = 'bottom'\n        y = y + .002\n    else:\n        verticalalignment = 'top'\n        y = y - .002\n    plt.text(x, y, name, size=10,\n             horizontalalignment=horizontalalignment,\n             verticalalignment=verticalalignment,\n             bbox=dict(facecolor='w',\n                       edgecolor=plt.cm.spectral(label / float(n_labels)),\n                       alpha=.6))\n\nplt.xlim(embedding[0].min() - .15 * embedding[0].ptp(),\n         embedding[0].max() + .10 * embedding[0].ptp(),)\nplt.ylim(embedding[1].min() - .03 * embedding[1].ptp(),\n         embedding[1].max() + .03 * embedding[1].ptp())\n\nplt.show()\n```\n\n\u7d50\u679c\u306f\u6700\u521d\u306b\u793a\u3057\u305f\u901a\u308a\uff0e\n\u30ce\u30fc\u30c9\u306e\u8272\u306f\u682a\u4fa1\u306e\u5909\u52d5\u304b\u3089\u898b\u305f\u985e\u4f3c\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\uff0c\u30a8\u30c3\u30b8\u304c\u6fc3\u304f\u592a\u3044\u307b\u3069\u76f4\u63a5\u76f8\u95a2\u304c\u5927\u304d\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u540c\u696d\u7a2e\u306f\u30ce\u30fc\u30c9\u9593\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u5168\u4f53\u7684\u306b\u4f3c\u901a\u3063\u305f\u6319\u52d5\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\u540c\u69d8\u306e\u30af\u30e9\u30b9\u30bf\u5185\u3067\u306f\uff0c\u7279\u5b9a\u306e\u4f01\u696d\u9593\u3067\u7279\u306b\u5f37\u3044\u76f4\u63a5\u76f8\u95a2\u304c\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u6570\u306f\u5c11\u306a\u3044\u3067\u3059\u304c\uff0c\u90e8\u5206\u7684\u306b\u7570\u306a\u308b\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7279\u5b9a\u4f01\u696d\u9593\u3067\u76f4\u63a5\u76f8\u95a2\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n![sphx_glr_plot_stock_market_001.png](https://qiita-image-store.s3.amazonaws.com/0/72093/62b7ffd7-970a-926f-20f6-d7e8dd9844d9.png)\n", "tags": ["\u30cd\u30c3\u30c8\u30ef\u30fc\u30af", "analytics", "scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2", "\u53ef\u8996\u5316"]}