{"tags": ["Linux", "SPI"], "context": "Linux\u3067SPI\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a00\u8a9e\u306fC\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u306fspidev\u3092\u4f7f\u3046\u60f3\u5b9a\u3067\u3059\u3002\n\n\u7aef\u5b50\nSPI\u3067\u306f\u901a\u5e384\u672c\u306e\u7aef\u5b50\u3092\u4f7f\u3046\u3002\n\nMOSI : Master Out Slave In\nMISO : Master In  Slave Out\nSCLK : SPI clock\nGND  : GND\n\n\u305d\u306e\u4ed6\u306b\u4ee5\u4e0b\u306e\u7aef\u5b50\u3092\u4f7f\u3046\u5834\u5408\u304c\u3042\u308b\n\nCS   : ChipSelect\nSYNC : \u8ee2\u9001\u5358\u4f4d\u3092\u8868\u3059\u4fe1\u53f7\u3002 8bit\u5358\u4f4d\u300116bit\u5358\u4f4d\u306a\u3069\u304c\u826f\u304f\u4f7f\u308f\u308c\u308b\u3002\n\n\nAPI\n\n\u30c7\u30d0\u30a4\u30b9\u306e\u30aa\u30fc\u30d7\u30f3\n\n\u30c7\u30d0\u30a4\u30b9\u306f /dev/spidev.0.0 \u306a\u3069\u3068\u306a\u308b\u3002\u3000\u6570\u5b57\u306e\u90e8\u5206\u304c\u5909\u308f\u308b\u3002\n\nint fd;\nfd = open(\"/dev/spidev0.0\", O_RDWR);\n\n\nSPI\u30c7\u30fc\u30bf\u8aad\u307f\u66f8\u304d\u7528\u306eAPI\n\nioctl\u3092\u4f7f\u3046\u3002\nSPI_IOC_MESSAGE(N)\u3092\u4f7f\u3046\u3002N\u306f\u4e00\u5ea6\u306b\u8ee2\u9001\u3059\u308bspi_ioc_transfer\u306e\u500b\u6570\u3002\n\u8aad\u307f\u66f8\u304d\u306e\u4f8b\n\n#define HOGE_SPI_SPEED_HZ    1000000\n#define HOGE_SPI_DELAY_USECS 0\n#define HOGE_SPI_BITS        8\n\n\nuint8_t tx[3] = {1, 2, 3};\nuint8_t rx[3] = {0, };\nstruct spi_ioc_transfer tr[1];\n\ntr[0].tx_buf        = (unsigned long)tx;\ntr[0].rx_buf        = (unsigned long)rx;\ntr[0].len           = ARRAY_SIZE(tx);\ntr[0].delay_usecs   = HOGE_SPI_DELAY_USECS;\ntr[0].speed_hz      = HOGE_SPI_SPEED_HZ;\ntr[0].bits_per_word = HOGE_SPI_BITS;\ntr[0].cs_change     = 0;\n\nioctl(fd, SPI_IOC_MESSAGE(1), tr);\n\n\nSPI\u8a2d\u5b9a\u7528\u306eAPI\n\nioctl\u3092\u4f7f\u3046\u3002\n\n#include <linux/spi/spidev.h>\n\n\n\u8a2d\u5b9a\u7528ioctl\u306e\u8aac\u660e\n\n\n\n\nioctl\ndescription\n\n\n\n\nSPI_IOC_WR_MOD\nRead of SPI mode (SPI_MODE_0..SPI_MODE_3)\n\n\nSPI_IOC_WR_MODE\nWrite of SPI mode (SPI_MODE_0..SPI_MODE_3)\n\n\nSPI_IOC_RD_LSB_FIRST\nRead SPI bit justification\n\n\nSPI_IOC_WR_LSB_FIRST\nWrite SPI bit justification\n\n\nSPI_IOC_RD_BITS_PER_WORD\nRead SPI device word length (1..N)\n\n\nSPI_IOC_WR_BITS_PER_WORD\nWrite SPI device word length (1..N)\n\n\nSPI_IOC_RD_MAX_SPEED_HZ\nRead SPI device default max speed hz\n\n\nSPI_IOC_WR_MAX_SPEED_HZ\nWrite SPI device default max speed hz\n\n\n\n\u3042\u3068\u3067\u5b9f\u969b\u306b\u8a66\u3057\u305f\u7d50\u679c\u3092\u8ffd\u8a18\u4e88\u5b9a\u3002\n\n\u53c2\u8003\n\nhttp://manual.atmark-techno.com/armadillo-guide/armadillo-guide-3_ja-2.0.0/ch02.html\nhttps://www.linux.com/learn/how-access-chips-over-spi-beaglebone-black\n\nLinux\u3067SPI\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8a00\u8a9e\u306fC\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u306fspidev\u3092\u4f7f\u3046\u60f3\u5b9a\u3067\u3059\u3002\n\n# \u7aef\u5b50\nSPI\u3067\u306f\u901a\u5e384\u672c\u306e\u7aef\u5b50\u3092\u4f7f\u3046\u3002\n\n* MOSI : Master Out Slave In\n* MISO : Master In  Slave Out\n* SCLK : SPI clock\n* GND  : GND\n\n\u305d\u306e\u4ed6\u306b\u4ee5\u4e0b\u306e\u7aef\u5b50\u3092\u4f7f\u3046\u5834\u5408\u304c\u3042\u308b\n\n* CS   : ChipSelect\n* SYNC : \u8ee2\u9001\u5358\u4f4d\u3092\u8868\u3059\u4fe1\u53f7\u3002 8bit\u5358\u4f4d\u300116bit\u5358\u4f4d\u306a\u3069\u304c\u826f\u304f\u4f7f\u308f\u308c\u308b\u3002\n\n# API \n\n## \u30c7\u30d0\u30a4\u30b9\u306e\u30aa\u30fc\u30d7\u30f3\n\n* \u30c7\u30d0\u30a4\u30b9\u306f /dev/spidev.0.0 \u306a\u3069\u3068\u306a\u308b\u3002\u3000\u6570\u5b57\u306e\u90e8\u5206\u304c\u5909\u308f\u308b\u3002\n\n```c\nint fd;\nfd = open(\"/dev/spidev0.0\", O_RDWR);\n```\n\n## SPI\u30c7\u30fc\u30bf\u8aad\u307f\u66f8\u304d\u7528\u306eAPI\n* ioctl\u3092\u4f7f\u3046\u3002\n* SPI_IOC_MESSAGE(N)\u3092\u4f7f\u3046\u3002N\u306f\u4e00\u5ea6\u306b\u8ee2\u9001\u3059\u308bspi_ioc_transfer\u306e\u500b\u6570\u3002\n* \u8aad\u307f\u66f8\u304d\u306e\u4f8b\n\n```c\n#define HOGE_SPI_SPEED_HZ    1000000\n#define HOGE_SPI_DELAY_USECS 0\n#define HOGE_SPI_BITS        8\n\n\nuint8_t tx[3] = {1, 2, 3};\nuint8_t rx[3] = {0, };\nstruct spi_ioc_transfer tr[1];\n\ntr[0].tx_buf        = (unsigned long)tx;\ntr[0].rx_buf        = (unsigned long)rx;\ntr[0].len           = ARRAY_SIZE(tx);\ntr[0].delay_usecs   = HOGE_SPI_DELAY_USECS;\ntr[0].speed_hz      = HOGE_SPI_SPEED_HZ;\ntr[0].bits_per_word = HOGE_SPI_BITS;\ntr[0].cs_change     = 0;\n\nioctl(fd, SPI_IOC_MESSAGE(1), tr);\n```\n\n## SPI\u8a2d\u5b9a\u7528\u306eAPI\n* ioctl\u3092\u4f7f\u3046\u3002\n\n```c\n#include <linux/spi/spidev.h>\n```\n\n* \u8a2d\u5b9a\u7528ioctl\u306e\u8aac\u660e\n\n| ioctl | description |\n|:-:|:-:|\n|SPI_IOC_WR_MOD   |  Read of SPI mode (SPI_MODE_0..SPI_MODE_3) |\n|SPI_IOC_WR_MODE  | Write of SPI mode (SPI_MODE_0..SPI_MODE_3) |\n|SPI_IOC_RD_LSB_FIRST|Read SPI bit justification|\n|SPI_IOC_WR_LSB_FIRST|Write SPI bit justification|\n|SPI_IOC_RD_BITS_PER_WORD|Read SPI device word length (1..N)|\n|SPI_IOC_WR_BITS_PER_WORD|Write SPI device word length (1..N)|\n|SPI_IOC_RD_MAX_SPEED_HZ|Read SPI device default max speed hz|\n|SPI_IOC_WR_MAX_SPEED_HZ|Write SPI device default max speed hz|\n\n\n\u3042\u3068\u3067\u5b9f\u969b\u306b\u8a66\u3057\u305f\u7d50\u679c\u3092\u8ffd\u8a18\u4e88\u5b9a\u3002\n\n\n# \u53c2\u8003\n\n* http://manual.atmark-techno.com/armadillo-guide/armadillo-guide-3_ja-2.0.0/ch02.html\n* https://www.linux.com/learn/how-access-chips-over-spi-beaglebone-black\n"}