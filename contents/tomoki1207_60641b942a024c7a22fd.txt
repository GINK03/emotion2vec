{"tags": ["C++", "MFC"], "context": "\n\nhttp\n\nhttp\u3067POST\nCInternetSession session;\nCHttpConnection *pConn = NULL;\nCString strServer, strObj, strHeader;\nINTERNET_PORT nPort;\nDWORD dwServiceType;\nCHttpFile *pFile = NULL;\n\n// ShiftJIS -> UTF-8 \u5909\u63db\nCString cstrBody = \"{}\"; // Body\u90e8\nCString cstrUtf8Body = SjistoUTF8(cstrBody);\n\n// URL\u3092\u4f5c\u6210\nCString cstrUrl = \"http://localhost\"\n// URL\u60c5\u5831\u3092\u89e3\u6790\n::AfxParseURL(cstrUrl, dwServiceType, strServer, strObj, nPort);\n// \u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\npConn = session.GetHttpConnection(strServer, nPort);\n // \u30d8\u30c3\u30c0\u90e8\u3092\u7528\u610f\nstrHeader.Append(_T(\"Content-Type: application/json ; charset=\\\"utf-8\\\"\\n\"));\nstrHeader.AppendFormat(_T(\"Content-Length: %d\\n\"), cstrUtf8Body.GetLength());\n\n// \u8981\u6c42\npFile = pConn->OpenRequest(CHttpConnection::HTTP_VERB_POST, strObj);\npFile->SendRequest(strHeader, (LPVOID)((LPCTSTR)cstrUtf8Body), cstrUtf8Body.GetLength());\n\n\n\nhttps\n\nhttps\u3067POST\nCInternetSession session;\nCHttpConnection *pConn = NULL;\nCString strServer, strObj, strHeader;\nINTERNET_PORT nPort;\nDWORD dwServiceType;\nCHttpFile *pFile = NULL;\n\n// ShiftJIS -> UTF-8 \u5909\u63db\nCString cstrBody = \"{}\"; // Body\u90e8\nCString cstrUtf8Body = SjistoUTF8(cstrBody);\n\n// URL\u3092\u4f5c\u6210\nCString cstrUrl = \"https://localhost\"\n// URL\u60c5\u5831\u3092\u89e3\u6790\n::AfxParseURL(cstrUrl, dwServiceType, strServer, strObj, nPort);\n// \u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\npConn = session.GetHttpConnection(strServer, INTERNET_FLAG_SECURE, nPort, NULL, NULL);\n // \u30d8\u30c3\u30c0\u90e8\u3092\u7528\u610f\nstrHeader.Append(_T(\"Content-Type: application/json ; charset=\\\"utf-8\\\"\\n\"));\nstrHeader.AppendFormat(_T(\"Content-Length: %d\\n\"), cstrUtf8Body.GetLength());\n\n// \u8981\u6c42\nDWORD httpsFlags = INTERNET_FLAG_EXISTING_CONNECT | INTERNET_FLAG_SECURE | INTERNET_FLAG_IGNORE_CERT_CN_INVALID | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID; \npFile = pConn->OpenRequest(CHttpConnection::HTTP_VERB_POST, strObj, NULL, 1, NULL, _T(\"HTTP/1.1\"), httpsFlags);\n\n// \u81ea\u5df1\u8a3c\u660e\u66f8\u306e\u8a31\u53ef\nDWORD dwSecFlags;\npFile->QueryOption(INTERNET_OPTION_SECURITY_FLAGS, dwSecFlags);\ndwSecFlags |= SECURITY_FLAG_IGNORE_UNKNOWN_CA;\npFile->SetOption(INTERNET_OPTION_SECURITY_FLAGS, dwSecFlags);\n\npFile->SendRequest(strHeader, (LPVOID)((LPCTSTR)cstrUtf8Body), cstrUtf8Body.GetLength());\n\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3044\u3046\u304b\u9055\u3044\u306f getHttpConnection()\u3068\u3001OpenRequest() \u3067\u9069\u5207\u306a\u30d5\u30e9\u30b0\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u3059\u3002\n\u81ea\u5df1\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001INTERNET_FLAG_IGNORE_CERT_CN_INVALID\u3068INTERNET_FLAG_IGNORE_CERT_DATE_INVALID\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001QueryOption\u3067SECURITY_FLAG\u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070OK\u3067\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u50d5\u306fC++\u5168\u7136\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n\u53c2\u8003\nWinInet API\u306e\u5229\u7528(\u305d\u306e3) HTTPS\nWinInet (MFC) \u306e SSL\u901a\u4fe1 \u3067 \u958b\u767a\u4e2d\u306b\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8(\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8)\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306e\u30b3\u30fc\u30c9\n### http\n\n```cpp:http\u3067POST\nCInternetSession session;\nCHttpConnection *pConn = NULL;\nCString strServer, strObj, strHeader;\nINTERNET_PORT nPort;\nDWORD dwServiceType;\nCHttpFile *pFile = NULL;\n \n// ShiftJIS -> UTF-8 \u5909\u63db\nCString cstrBody = \"{}\"; // Body\u90e8\nCString cstrUtf8Body = SjistoUTF8(cstrBody);\n\n// URL\u3092\u4f5c\u6210\nCString cstrUrl = \"http://localhost\"\n// URL\u60c5\u5831\u3092\u89e3\u6790\n::AfxParseURL(cstrUrl, dwServiceType, strServer, strObj, nPort);\n// \u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\npConn = session.GetHttpConnection(strServer, nPort);\n // \u30d8\u30c3\u30c0\u90e8\u3092\u7528\u610f\nstrHeader.Append(_T(\"Content-Type: application/json ; charset=\\\"utf-8\\\"\\n\"));\nstrHeader.AppendFormat(_T(\"Content-Length: %d\\n\"), cstrUtf8Body.GetLength());\n\n// \u8981\u6c42\npFile = pConn->OpenRequest(CHttpConnection::HTTP_VERB_POST, strObj);\npFile->SendRequest(strHeader, (LPVOID)((LPCTSTR)cstrUtf8Body), cstrUtf8Body.GetLength());\n```\n\n### https\n\n```cpp:https\u3067POST\nCInternetSession session;\nCHttpConnection *pConn = NULL;\nCString strServer, strObj, strHeader;\nINTERNET_PORT nPort;\nDWORD dwServiceType;\nCHttpFile *pFile = NULL;\n \n// ShiftJIS -> UTF-8 \u5909\u63db\nCString cstrBody = \"{}\"; // Body\u90e8\nCString cstrUtf8Body = SjistoUTF8(cstrBody);\n\n// URL\u3092\u4f5c\u6210\nCString cstrUrl = \"https://localhost\"\n// URL\u60c5\u5831\u3092\u89e3\u6790\n::AfxParseURL(cstrUrl, dwServiceType, strServer, strObj, nPort);\n// \u30dd\u30fc\u30c8\u756a\u53f7\u3092\u8a2d\u5b9a\npConn = session.GetHttpConnection(strServer, INTERNET_FLAG_SECURE, nPort, NULL, NULL);\n // \u30d8\u30c3\u30c0\u90e8\u3092\u7528\u610f\nstrHeader.Append(_T(\"Content-Type: application/json ; charset=\\\"utf-8\\\"\\n\"));\nstrHeader.AppendFormat(_T(\"Content-Length: %d\\n\"), cstrUtf8Body.GetLength());\n\n// \u8981\u6c42\nDWORD httpsFlags = INTERNET_FLAG_EXISTING_CONNECT | INTERNET_FLAG_SECURE | INTERNET_FLAG_IGNORE_CERT_CN_INVALID | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID; \npFile = pConn->OpenRequest(CHttpConnection::HTTP_VERB_POST, strObj, NULL, 1, NULL, _T(\"HTTP/1.1\"), httpsFlags);\n\n// \u81ea\u5df1\u8a3c\u660e\u66f8\u306e\u8a31\u53ef\nDWORD dwSecFlags;\npFile->QueryOption(INTERNET_OPTION_SECURITY_FLAGS, dwSecFlags);\ndwSecFlags |= SECURITY_FLAG_IGNORE_UNKNOWN_CA;\npFile->SetOption(INTERNET_OPTION_SECURITY_FLAGS, dwSecFlags);\n\npFile->SendRequest(strHeader, (LPVOID)((LPCTSTR)cstrUtf8Body), cstrUtf8Body.GetLength());\n```\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3044\u3046\u304b\u9055\u3044\u306f `getHttpConnection()`\u3068\u3001`OpenRequest()` \u3067\u9069\u5207\u306a\u30d5\u30e9\u30b0\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u81ea\u5df1\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001`INTERNET_FLAG_IGNORE_CERT_CN_INVALID`\u3068`INTERNET_FLAG_IGNORE_CERT_DATE_INVALID`\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001`QueryOption`\u3067SECURITY_FLAG\u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070OK\u3067\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u50d5\u306fC++\u5168\u7136\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n## \u53c2\u8003\n[WinInet API\u306e\u5229\u7528(\u305d\u306e3) HTTPS](http://www.independence-sys.com/weblog/item/22)\n[WinInet (MFC) \u306e SSL\u901a\u4fe1 \u3067 \u958b\u767a\u4e2d\u306b\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8(\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8)\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306e\u30b3\u30fc\u30c9](https://techwing.wordpress.com/2010/01/24/wininet-mfc-%E3%81%AE-ssl%E9%80%9A%E4%BF%A1-%E3%81%A7-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AB%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/)\n"}