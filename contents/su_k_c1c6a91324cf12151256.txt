{"context": "\n\n\u6982\u8981\n\u4ee5\u524d\u306b\u3001 enum\u306e\u5217\u6319\u5b50\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u306e\u3092protocol\u3067\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3001Enum\u3067\u5ba3\u8a00\u3057\u305fcase\u3092\u914d\u5217\u3067\u8fd4\u3059protocol\u3092\u7d39\u4ecb\u3057\u305f\u306e\u3067\u3059\u304c\u3001\nXcode 8 beta\u3068Swift3.0 preview-1\u304c\u51fa\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001swift3.0\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306a\u305c\u4f5c\u3063\u305f\u304b\nenum \u306b\u5ba3\u8a00\u3057\u305f\u5168\u3066\u306ecase\u304c\u914d\u5217\u3067\u307b\u3057\u3044\u6642\u306b\u3001\nenum SomeType {\n    case A, B, C, D\n\n    var cases: [SomeTypes] {\n        return [.A, .B, .C, .D]\n    }\n}\n\n\u3068\u3057\u3066\u3057\u307e\u3046\u306e\u306f\u3001\u5f8c\u306bcase\u304c\u5897\u3048\u305f\u6642\u306b \u6f0f\u308c\u308b\u53ef\u80fd\u6027 \u3082\u3042\u308b\u3057\u3001\u4ed6\u306eEnum\u306b\u5bfe\u3057\u3066\u3082\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u601d\u3063\u305f\u6642\u306b\u66f8\u304d\u65b9\u304c \u5197\u9577\u7684 \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\nprotocol\u3068extension\u3092\u6d3b\u7528\u3057\u3066\u3001\nenum SomeType: EnumEnumerable {\n   // ...\n}\n\nlet allCases: [SomeType] = SomeType.cases // => [A, B, C, D]\n\n\u3068\u3059\u308b\u3060\u3051\u3067\u3001case\u306e\u914d\u5217\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306f\u3058\u3081\u306b\n2016/06/20\u73fe\u5728\u3001Xcode 8 beta\u3001Swift3.0 preview-1\u3092\u3082\u3068\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4eca\u5f8c\u5b9f\u88c5\u65b9\u6cd5\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u5834\u5408\u306f\u9069\u5b9c\u8a18\u4e8b\u3092\u7de8\u96c6\u3057\u3066\u6700\u65b0\u306e\u3082\u306e\u306b\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\nGist\n\n\nswift3.0\u3067\u306eEnumEnumerable\npublic protocol EnumEnumerable {\n    associatedtype Case = Self\n}\n\npublic extension EnumEnumerable where Case: Hashable {\n    private static var iterator: AnyIterator<Case> {\n        var n = 0\n        return AnyIterator {\n            defer { n += 1 }\n\n            let next = withUnsafePointer(to: &n) {\n                UnsafeRawPointer($0).assumingMemoryBound(to: Case.self).pointee\n            }\n            return next.hashValue == n ? next : nil\n        }\n    }\n\n    public static func enumerate() -> EnumeratedSequence<AnySequence<Case>> {\n        return AnySequence(self.iterator).enumerated()\n    }\n\n    public static var cases: [Case] {\n        return Array(self.iterator)\n    }\n\n    public static var count: Int {\n        return self.cases.count\n    }\n}\n\n\n\n\u4f7f\u3044\u65b9\nXcode 8 beta\u3067\u958b\u3044\u305fPlayground\u306b\u30b3\u30d4\u30da\u3057\u3066\u30b5\u30c3\u3068\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4efb\u610f\u306eEnum\u306b\u5bfe\u3057\u3066\u3001 EnumEnumerable \u3092\u9069\u5408\u3055\u305b\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u4f7f\u3044\u65b9\nenum Fruit: Int, EnumEnumerable {\n    case apple\n    case banana\n    case orange\n}\n\n_ = Fruit.cases // => [apple, banana, orange]\nFruit.cases.count // => 3\n\n\n\u305f\u3060\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bAssociated Value\u3092\u3082\u3064Enum\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\nNG\n// \u3053\u308c\u306fNG\nenum OtherType: EnumEnumerable {\n    case hoge(String)\n    case fuga(Int)\n}\n\n\n\nSwift2.x\u307e\u3067\u3068\u306e\u9055\u3044\n\u3061\u306a\u307f\u306b\u3001Swift2.x\u307e\u3067\u306e\u66f8\u304d\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nSwift2.3\u307e\u3067\u306eEnumEnumerable\npublic protocol EnumEnumerable {\n    associatedtype Case = Self\n}\n\npublic extension EnumEnumerable where Case: Hashable {\n    private static var generator: AnyGenerator<Case> {\n        var n = 0\n        return AnyGenerator {\n            defer { n += 1 }\n            let next = withUnsafePointer(&n) { UnsafePointer<Case>($0).memory }\n            return next.hashValue == n ? next : nil\n        }\n    }\n\n    @warn_unused_result\n    public static func enumerate() -> EnumerateSequence<AnySequence<Case>> {\n        return AnySequence(generator).enumerate()\n    }\n\n    public static var cases: [Case] {\n        return Array(generator)\n    }\n\n    public static var count: Int {\n        return cases.count\n    }\n}\n\n\n\u5909\u66f4\u70b9\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nAnyGenerator \u2192 AnyIterator\n\nUnsafePointer.memory \u2192 UnsafePointer. pointee\n\nEnumerateSequence \u2192 EnumeratedSequence\n\nAnySequence.enumerate() \u2192 AnySequence.enumerated()\n\n\n\u3044\u305a\u308c\u3082\u3001Swift3.0\u3067\u627f\u8a8d\u3055\u308c\u305fAPI Guideline\u306b\u5247\u3063\u305f\u5f62\u3067Standard Library\u306b\u5909\u66f4\u304c\u9069\u5fdc\u3055\u308c\u305f\u3053\u3068\u306b\u3088\u308b\u5f71\u97ff\u3067\u3001\u30ea\u30cd\u30fc\u30e0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nSE-0006\u3042\u305f\u308a\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306fSwift3.0\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3068\u304b\n\nenum\u306e\u5217\u6319\u5b50\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u306e\u3092protocol\u3067\nAnyGenerator\u306e\u4eca\u5f8c\n\n## \u6982\u8981\n\u4ee5\u524d\u306b\u3001 [enum\u306e\u5217\u6319\u5b50\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u306e\u3092protocol\u3067](http://qiita.com/su_k/items/1781259463290e909092)\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3001Enum\u3067\u5ba3\u8a00\u3057\u305fcase\u3092\u914d\u5217\u3067\u8fd4\u3059protocol\u3092\u7d39\u4ecb\u3057\u305f\u306e\u3067\u3059\u304c\u3001\n`Xcode 8 beta`\u3068`Swift3.0 preview-1`\u304c\u51fa\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001swift3.0\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n### \u306a\u305c\u4f5c\u3063\u305f\u304b\nenum \u306b\u5ba3\u8a00\u3057\u305f\u5168\u3066\u306ecase\u304c\u914d\u5217\u3067\u307b\u3057\u3044\u6642\u306b\u3001\n\n```swift\nenum SomeType {\n    case A, B, C, D\n\n    var cases: [SomeTypes] {\n        return [.A, .B, .C, .D]\n    }\n}\n```\n\n\u3068\u3057\u3066\u3057\u307e\u3046\u306e\u306f\u3001\u5f8c\u306bcase\u304c\u5897\u3048\u305f\u6642\u306b **\u6f0f\u308c\u308b\u53ef\u80fd\u6027** \u3082\u3042\u308b\u3057\u3001\u4ed6\u306eEnum\u306b\u5bfe\u3057\u3066\u3082\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u601d\u3063\u305f\u6642\u306b\u66f8\u304d\u65b9\u304c **\u5197\u9577\u7684** \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\nprotocol\u3068extension\u3092\u6d3b\u7528\u3057\u3066\u3001\n\n```swift\nenum SomeType: EnumEnumerable {\n   // ...\n}\n\nlet allCases: [SomeType] = SomeType.cases // => [A, B, C, D]\n```\n\n\u3068\u3059\u308b\u3060\u3051\u3067\u3001case\u306e\u914d\u5217\u304c\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u306f\u3058\u3081\u306b\n2016/06/20\u73fe\u5728\u3001Xcode 8 beta\u3001Swift3.0 preview-1\u3092\u3082\u3068\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4eca\u5f8c\u5b9f\u88c5\u65b9\u6cd5\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u5834\u5408\u306f\u9069\u5b9c\u8a18\u4e8b\u3092\u7de8\u96c6\u3057\u3066\u6700\u65b0\u306e\u3082\u306e\u306b\u3057\u307e\u3059\u3002\n\n## \u5b9f\u88c5\n\n- [Gist](https://gist.github.com/sgr-ksmt/5a0753676b7a851877b57ab2b94b56e4)\n\n```swift:swift3.0\u3067\u306eEnumEnumerable\npublic protocol EnumEnumerable {\n    associatedtype Case = Self\n}\n\npublic extension EnumEnumerable where Case: Hashable {\n    private static var iterator: AnyIterator<Case> {\n        var n = 0\n        return AnyIterator {\n            defer { n += 1 }\n  \n            let next = withUnsafePointer(to: &n) {\n                UnsafeRawPointer($0).assumingMemoryBound(to: Case.self).pointee\n            }\n            return next.hashValue == n ? next : nil\n        }\n    }\n    \n    public static func enumerate() -> EnumeratedSequence<AnySequence<Case>> {\n        return AnySequence(self.iterator).enumerated()\n    }\n    \n    public static var cases: [Case] {\n        return Array(self.iterator)\n    }\n    \n    public static var count: Int {\n        return self.cases.count\n    }\n}\n```\n\n\n### \u4f7f\u3044\u65b9\nXcode 8 beta\u3067\u958b\u3044\u305fPlayground\u306b\u30b3\u30d4\u30da\u3057\u3066\u30b5\u30c3\u3068\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4efb\u610f\u306eEnum\u306b\u5bfe\u3057\u3066\u3001 ***EnumEnumerable*** \u3092\u9069\u5408\u3055\u305b\u308b\u3060\u3051\u3067\u3059\u3002\n\n```swift:\u4f7f\u3044\u65b9\nenum Fruit: Int, EnumEnumerable {\n    case apple\n    case banana\n    case orange\n}\n\n_ = Fruit.cases // => [apple, banana, orange]\nFruit.cases.count // => 3\n```\n\n\u305f\u3060\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bAssociated Value\u3092\u3082\u3064Enum\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\n```swift:NG\n// \u3053\u308c\u306fNG\nenum OtherType: EnumEnumerable {\n    case hoge(String)\n    case fuga(Int)\n}\n```\n\n## Swift2.x\u307e\u3067\u3068\u306e\u9055\u3044\n\n\u3061\u306a\u307f\u306b\u3001Swift2.x\u307e\u3067\u306e\u66f8\u304d\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```swift:Swift2.3\u307e\u3067\u306eEnumEnumerable\npublic protocol EnumEnumerable {\n    associatedtype Case = Self\n}\n\npublic extension EnumEnumerable where Case: Hashable {\n    private static var generator: AnyGenerator<Case> {\n        var n = 0\n        return AnyGenerator {\n            defer { n += 1 }\n            let next = withUnsafePointer(&n) { UnsafePointer<Case>($0).memory }\n            return next.hashValue == n ? next : nil\n        }\n    }\n\n    @warn_unused_result\n    public static func enumerate() -> EnumerateSequence<AnySequence<Case>> {\n        return AnySequence(generator).enumerate()\n    }\n\n    public static var cases: [Case] {\n        return Array(generator)\n    }\n\n    public static var count: Int {\n        return cases.count\n    }\n}\n```\n\n\u5909\u66f4\u70b9\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n- AnyGenerator \u2192 **`AnyIterator`**\n- UnsafePointer.memory \u2192 UnsafePointer. **`pointee`**\n- EnumerateSequence \u2192 **`EnumeratedSequence`**\n- AnySequence.enumerate() \u2192 **`AnySequence.enumerated()`**\n\n\u3044\u305a\u308c\u3082\u3001Swift3.0\u3067\u627f\u8a8d\u3055\u308c\u305fAPI Guideline\u306b\u5247\u3063\u305f\u5f62\u3067Standard Library\u306b\u5909\u66f4\u304c\u9069\u5fdc\u3055\u308c\u305f\u3053\u3068\u306b\u3088\u308b\u5f71\u97ff\u3067\u3001\u30ea\u30cd\u30fc\u30e0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n[SE-0006](https://github.com/apple/swift-evolution/blob/master/proposals/0006-apply-api-guidelines-to-the-standard-library.md)\u3042\u305f\u308a\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u4ee5\u5916\u306fSwift3.0\u3067\u3082\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3068\u304b\n- [enum\u306e\u5217\u6319\u5b50\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u306e\u3092protocol\u3067](http://qiita.com/su_k/items/1781259463290e909092)\n- [AnyGenerator\u306e\u4eca\u5f8c](http://blog.sgr-ksmt.org/2016/03/22/any_generator_future/)\n", "tags": ["Swift", "iOS", "Swift3.0", "Xcode"]}