{"context": "Siv3D Advent Calendar 2016 1 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nSiv3D August 2016 v2 \u3067\u4f7f\u3048\u308b 3D \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092 3 \u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n1. \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\n\u30b2\u30fc\u30e0\u30ef\u30fc\u30eb\u30c9\u3067\u30ea\u30a2\u30ea\u30c6\u30a3\u306e\u3042\u308b\u7a7a\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u3001Equirectangular \u5f62\u5f0f\u306e 360\u00b0 \u5929\u7403\u753b\u50cf\u3092 Sphere \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3059\u3002\n\n\uff08\u25b2 Equirectangular \u5f62\u5f0f\u306e\u5929\u7403\u753b\u50cf\u306e\u4f8b\u3002\u914d\u5e03\u5143: http://freepanorama.blogspot.com/ \uff09\n\u3053\u306e\u3088\u3046\u306a\u753b\u50cf\u306f RICOH THETA \u3067\u64ae\u5f71\u3057\u3066\u81ea\u4f5c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u30d5\u30ea\u30fc\u306e\u753b\u50cf\u3082\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u306f\u30b7\u30fc\u30f3\u306e\u30e9\u30a4\u30c8\u306e\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u3088\u3046\u306b\u3001\u500b\u5225\u306b\u5149\u6e90\u3092\u8a2d\u5b9a\u3067\u304d\u308b Forward Rendering \u3067\u63cf\u753b\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n    Window::Resize(1280, 720);\n\n    // \u7a7a\u3068\u5730\u9762\u306e\u5883\u754c\u3092\u307c\u304b\u3059\u305f\u3081\u306b\u30d5\u30a9\u30b0\u3092\u8a2d\u5b9a\uff08\u7a7a\u306e\u8272\u3092\u4f7f\u3046\u3068\u826f\u3044\uff09\n    Graphics3D::SetFog(Fog::SquaredExponential(ColorF(0.97), 0.005));\n    Graphics3D::SetAmbientLight(ColorF(0.77));\n\n    // \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u7528\u306e\u7403\u72b6\u306e Mesh\n    // \u88cf\u5074\u304b\u3089\u7403\u3092\u8997\u304f\u306e\u3067\u3001\u30ab\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3088\u3046\u306b flipNormals \u3092 true \u306b\u3059\u308b\u3002\n    const Mesh skyMesh(MeshData::Sphere(480, 24, true));\n\n    // \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u7528\u306e Equirectangular \u5929\u7403\u753b\u50cf\n    const Texture skyTexture(L\"sky.jpg\", TextureDesc::For3D);\n\n    // \u5730\u9762\u306e Mesh \u3068 Texture\n    const Texture terrainTexture(L\"Example/Ground.jpg\", TextureDesc::For3D);\n    const Mesh terrainMesh(MeshData::Plane(1000, { 1600, 1600 }));\n\n    while (System::Update())\n    {\n        Graphics3D::FreeCamera(0.02);\n\n        terrainMesh.draw(terrainTexture);\n\n        // \u7a7a\u306e\u753b\u50cf\u3092\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u8272\u3067\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u5149\u6e90\u3092\u30aa\u30d5\u3002\u74b0\u5883\u5149\u3092 100% \u306b\n        Graphics3D::SetLightForward(0, Light::None());\n        Graphics3D::SetAmbientLightForward(ColorF(1.0));\n        {\n            // \u7a7a\u306e\u7aef\u306b\u5230\u9054\u3057\u306a\u3044\u3088\u3046\u3001\u5e38\u306b\u30b9\u30d5\u30a3\u30a2\u306e\u4e2d\u5fc3\u306b\u3044\u308b\u3088\u3046\u306b\u3059\u308b\n            const Vec3 pos = Graphics3D::GetCamera().pos;\n\n            // \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u3092\u63cf\u304f\n            skyMesh.translated(pos.x, 0, pos.z).drawForward(skyTexture);\n        }\n        Graphics3D::SetLightForward(0, Light::Default());\n        Graphics3D::SetAmbientLightForward(ColorF(0.77));\n    }\n}\n\n3D \u30e2\u30c7\u30eb\u3084\u30b7\u30e3\u30c9\u30a6\u3092\u914d\u7f6e\u3059\u308b\u3068\u30ea\u30a2\u30ea\u30c6\u30a3\u304c\u5897\u3057\u307e\u3059\u3002\n\n\n2. \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u9078\u629e\u3057\u3066\u3044\u308b 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8abf\u3079\u308b\n3D \u7a7a\u9593\u3067\u7269\u4f53\u3092\u9078\u629e\u3059\u308b\u3059\u308b\u306b\u306f\u3001\u30de\u30a6\u30b9\u306e Ray \u3068 Box, Sphere, Plane, Disc, Triangle3D \u7b49\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4ea4\u5dee\u3059\u308b\u7269\u4f53\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u6700\u3082\u4ea4\u70b9\u304c\u8fd1\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n    Window::Resize(1280, 720);\n    Graphics::SetBackground(ColorF(0.4, 0.5, 0.6));\n    Graphics3D::SetAmbientLight(ColorF(0.8));\n    Graphics3D::SetAmbientLightForward(ColorF(1.0));\n    Graphics3D::SetLightForward(0, Light::None());\n\n    Array<Sphere> spheres;\n\n    for (size_t i = 0; i < 80; ++i)\n    {\n        spheres.push_back(Sphere(RandomVec3({ -8, 8 }, { 0.5, 0.5 }, { -8, 8 }), 0.5));\n    }\n\n    while (System::Update())\n    {\n        Graphics3D::FreeCamera();\n\n        Optional<size_t> selected;\n        double nearestDistance = Largest<double>();\n        const Ray mouseRay = Mouse::Ray();\n        const Vec3 cameraPos = Graphics3D::GetCamera().pos;\n\n        for (size_t i = 0; i < spheres.size(); ++i)\n        {\n            if (const auto pos = mouseRay.intersectsAt(spheres[i]))\n            {\n                const double d = pos->distanceFromSq(cameraPos);\n\n                if (d < nearestDistance)\n                {\n                    selected = i;\n                    nearestDistance = d;\n                }\n            }\n        }\n\n        Plane(24).draw();\n\n        for (size_t i = 0; i < spheres.size(); ++i)\n        {\n            if (i == selected)\n            {\n                spheres[i].draw(Palette::Red).drawShadow();\n            }\n            else\n            {\n                spheres[i].draw(HSV(i * 3, 0.4, 0.8)).drawShadow();\n            }       \n        }\n\n        Cursor::SetStyle(selected ? CursorStyle::Hand : CursorStyle::Default);\n    }\n}\n\n\n3. \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f 3D \u5f62\u72b6\u3092 Mesh \u3068\u3057\u3066\u63cf\u753b\u3059\u308b\n\u8907\u96d1\u306a 3D \u5f62\u72b6\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3059\u308b\u5834\u5408\u3084\u3001.obj \u5f62\u5f0f\u4ee5\u5916\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u524d\u3067\u8aad\u307f\u8fbc\u3080\u5834\u5408\u306f\u3001\u9802\u70b9\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u914d\u5217\u3092 MeshData \u306b\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u3001Mesh \u3068\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\n\u9802\u70b9\u914d\u5217 Array<MeshVertex> \u306f\u5404\u9802\u70b9\u306e \u5ea7\u6a19 (Float3) \u3068 \u30c6\u30af\u30b9\u30c1\u30e3 UV (Float2) \u3068 \u6cd5\u7dda (Float3) \u306e\u914d\u5217\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217 Array<uint32> \u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u300c\u4f55\u756a\u76ee\u300d\u3068\u300c\u4f55\u756a\u76ee\u300d\u3068\u300c\u4f55\u756a\u76ee\u300d\u306e\u9802\u70b9\u3067\u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u304b\u3092\u8868\u3059\u914d\u5217\u3067\u3001\u30b5\u30a4\u30ba\u306f\u5fc5\u305a 3 \u306e\u500d\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u6cd5\u7dda\u3092\u8a08\u7b97\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306b\u306f\u3001\u81ea\u52d5\u3067\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b Mesh::computeNormals() \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n# include <Siv3D.hpp>\n\nMeshData CreateMeshData()\n{\n    const int32 N = 400;\n\n    Array<MeshVertex> vertices;\n\n    for (int32 i : step(N))\n    {\n        MeshVertex v;\n        v.texcoord.set(0, 0);\n        v.normal.set(0, 1, 0);\n\n        v.position = Vec3(Cylindrical(i * 0.01, i * 0.05, i * 0.01));\n        vertices.push_back(v);\n\n        v.position = Vec3(Cylindrical(i * 0.01, i * 0.05, 0.4 + i * 0.01));\n        vertices.push_back(v);\n    }\n\n    // \u88cf\u9762\u7528\u306e\u9802\u70b9\n    for (int32 i : step(N))\n    {\n        vertices.push_back(vertices[i * 2 + 0]);\n        vertices.push_back(vertices[i * 2 + 1]);\n    }\n\n    Array<uint32> indices;\n\n    for (int32 i : step(N - 1))\n    {\n        indices.push_back(2 * i + 0);\n        indices.push_back(2 * i + 2);\n        indices.push_back(2 * i + 1);\n\n        indices.push_back(2 * i + 1);\n        indices.push_back(2 * i + 2);\n        indices.push_back(2 * i + 3);\n    }\n\n    const uint32 offset = N * 2;\n\n    // \u88cf\u9762\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    for (int32 i : step(N - 1))\n    {\n        indices.push_back(offset + 2 * i + 0);\n        indices.push_back(offset + 2 * i + 1);\n        indices.push_back(offset + 2 * i + 2);\n\n        indices.push_back(offset + 2 * i + 1);\n        indices.push_back(offset + 2 * i + 3);\n        indices.push_back(offset + 2 * i + 2);\n    }\n\n    MeshData meshData(vertices, indices);\n\n    meshData.computeNormals();\n\n    return meshData;\n}\n\nvoid Main()\n{\n    Window::Resize(1280, 720);\n\n    Graphics::SetBackground(ColorF(0.5, 0.7, 0.9));\n\n    Graphics3D::SetAmbientLight(ColorF(0.4));\n\n    const Texture textureTerrain(L\"Example/Grass.jpg\", TextureDesc::For3D);\n\n    const Mesh mesh(CreateMeshData());\n\n    while (System::Update())\n    {\n        Graphics3D::FreeCamera();\n\n        Plane(20).draw(textureTerrain);\n\n        mesh.translated(0, 0, -4).draw().drawShadow();\n    }\n}\n\n\u660e\u65e5\u306e Siv3D Advent Calendar \u306e\u8a18\u4e8b\u306f @Mitsugoro32 \u3055\u3093\u3067\u3059\u3002\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n[Siv3D Advent Calendar 2016](http://qiita.com/advent-calendar/2016/siv3d) 1 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nSiv3D August 2016 v2 \u3067\u4f7f\u3048\u308b 3D \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092 3 \u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n#1. \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\n\u30b2\u30fc\u30e0\u30ef\u30fc\u30eb\u30c9\u3067\u30ea\u30a2\u30ea\u30c6\u30a3\u306e\u3042\u308b\u7a7a\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u3001Equirectangular \u5f62\u5f0f\u306e 360\u00b0 \u5929\u7403\u753b\u50cf\u3092 Sphere \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u63cf\u753b\u3059\u308b\u306e\u304c\u7c21\u5358\u3067\u3059\u3002\n\n![sky.jpg](https://qiita-image-store.s3.amazonaws.com/0/30255/37c52f4c-e96a-0867-05e2-203abc09338a.jpeg)\n\n\uff08\u25b2 Equirectangular \u5f62\u5f0f\u306e\u5929\u7403\u753b\u50cf\u306e\u4f8b\u3002\u914d\u5e03\u5143: http://freepanorama.blogspot.com/ \uff09\n\u3053\u306e\u3088\u3046\u306a\u753b\u50cf\u306f RICOH THETA \u3067\u64ae\u5f71\u3057\u3066\u81ea\u4f5c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\u30d5\u30ea\u30fc\u306e\u753b\u50cf\u3082\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\n\u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u306f\u30b7\u30fc\u30f3\u306e\u30e9\u30a4\u30c8\u306e\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u3088\u3046\u306b\u3001\u500b\u5225\u306b\u5149\u6e90\u3092\u8a2d\u5b9a\u3067\u304d\u308b Forward Rendering \u3067\u63cf\u753b\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```cpp\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n\tWindow::Resize(1280, 720);\n\n\t// \u7a7a\u3068\u5730\u9762\u306e\u5883\u754c\u3092\u307c\u304b\u3059\u305f\u3081\u306b\u30d5\u30a9\u30b0\u3092\u8a2d\u5b9a\uff08\u7a7a\u306e\u8272\u3092\u4f7f\u3046\u3068\u826f\u3044\uff09\n\tGraphics3D::SetFog(Fog::SquaredExponential(ColorF(0.97), 0.005));\n\tGraphics3D::SetAmbientLight(ColorF(0.77));\n\n\t// \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u7528\u306e\u7403\u72b6\u306e Mesh\n\t// \u88cf\u5074\u304b\u3089\u7403\u3092\u8997\u304f\u306e\u3067\u3001\u30ab\u30ea\u30f3\u30b0\u3055\u308c\u306a\u3044\u3088\u3046\u306b flipNormals \u3092 true \u306b\u3059\u308b\u3002\n\tconst Mesh skyMesh(MeshData::Sphere(480, 24, true));\n\n\t// \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u7528\u306e Equirectangular \u5929\u7403\u753b\u50cf\n\tconst Texture skyTexture(L\"sky.jpg\", TextureDesc::For3D);\n\n\t// \u5730\u9762\u306e Mesh \u3068 Texture\n\tconst Texture terrainTexture(L\"Example/Ground.jpg\", TextureDesc::For3D);\n\tconst Mesh terrainMesh(MeshData::Plane(1000, { 1600, 1600 }));\n\n\twhile (System::Update())\n\t{\n\t\tGraphics3D::FreeCamera(0.02);\n\n\t\tterrainMesh.draw(terrainTexture);\n\n\t\t// \u7a7a\u306e\u753b\u50cf\u3092\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u8272\u3067\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u5149\u6e90\u3092\u30aa\u30d5\u3002\u74b0\u5883\u5149\u3092 100% \u306b\n\t\tGraphics3D::SetLightForward(0, Light::None());\n\t\tGraphics3D::SetAmbientLightForward(ColorF(1.0));\n\t\t{\n\t\t\t// \u7a7a\u306e\u7aef\u306b\u5230\u9054\u3057\u306a\u3044\u3088\u3046\u3001\u5e38\u306b\u30b9\u30d5\u30a3\u30a2\u306e\u4e2d\u5fc3\u306b\u3044\u308b\u3088\u3046\u306b\u3059\u308b\n\t\t\tconst Vec3 pos = Graphics3D::GetCamera().pos;\n\n\t\t\t// \u30b9\u30ab\u30a4\u30b9\u30d5\u30a3\u30a2\u3092\u63cf\u304f\n\t\t\tskyMesh.translated(pos.x, 0, pos.z).drawForward(skyTexture);\n\t\t}\n\t\tGraphics3D::SetLightForward(0, Light::Default());\n\t\tGraphics3D::SetAmbientLightForward(ColorF(0.77));\n\t}\n}\n```\n\n3D \u30e2\u30c7\u30eb\u3084\u30b7\u30e3\u30c9\u30a6\u3092\u914d\u7f6e\u3059\u308b\u3068\u30ea\u30a2\u30ea\u30c6\u30a3\u304c\u5897\u3057\u307e\u3059\u3002\n![ss.gif](https://qiita-image-store.s3.amazonaws.com/0/30255/4ceedf14-301e-acda-e26c-3e65aeae4c77.gif)\n\n#2. \u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u3067\u9078\u629e\u3057\u3066\u3044\u308b 3D \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8abf\u3079\u308b\n\n3D \u7a7a\u9593\u3067\u7269\u4f53\u3092\u9078\u629e\u3059\u308b\u3059\u308b\u306b\u306f\u3001\u30de\u30a6\u30b9\u306e Ray \u3068 Box, Sphere, Plane, Disc, Triangle3D \u7b49\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4ea4\u5dee\u3059\u308b\u7269\u4f53\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u6700\u3082\u4ea4\u70b9\u304c\u8fd1\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n![ss2.gif](https://qiita-image-store.s3.amazonaws.com/0/30255/e004fa9a-8602-aee6-9215-e1aee6e9e7db.gif)\n\n\n```cpp\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n\tWindow::Resize(1280, 720);\n\tGraphics::SetBackground(ColorF(0.4, 0.5, 0.6));\n\tGraphics3D::SetAmbientLight(ColorF(0.8));\n\tGraphics3D::SetAmbientLightForward(ColorF(1.0));\n\tGraphics3D::SetLightForward(0, Light::None());\n\t\n\tArray<Sphere> spheres;\n\n\tfor (size_t i = 0; i < 80; ++i)\n\t{\n\t\tspheres.push_back(Sphere(RandomVec3({ -8, 8 }, { 0.5, 0.5 }, { -8, 8 }), 0.5));\n\t}\n\n\twhile (System::Update())\n\t{\n\t\tGraphics3D::FreeCamera();\n\n\t\tOptional<size_t> selected;\n\t\tdouble nearestDistance = Largest<double>();\n\t\tconst Ray mouseRay = Mouse::Ray();\n\t\tconst Vec3 cameraPos = Graphics3D::GetCamera().pos;\n\n\t\tfor (size_t i = 0; i < spheres.size(); ++i)\n\t\t{\n\t\t\tif (const auto pos = mouseRay.intersectsAt(spheres[i]))\n\t\t\t{\n\t\t\t\tconst double d = pos->distanceFromSq(cameraPos);\n\n\t\t\t\tif (d < nearestDistance)\n\t\t\t\t{\n\t\t\t\t\tselected = i;\n\t\t\t\t\tnearestDistance = d;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tPlane(24).draw();\n\n\t\tfor (size_t i = 0; i < spheres.size(); ++i)\n\t\t{\n\t\t\tif (i == selected)\n\t\t\t{\n\t\t\t\tspheres[i].draw(Palette::Red).drawShadow();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tspheres[i].draw(HSV(i * 3, 0.4, 0.8)).drawShadow();\n\t\t\t}\t\t\n\t\t}\n\n\t\tCursor::SetStyle(selected ? CursorStyle::Hand : CursorStyle::Default);\n\t}\n}\n```\n\n#3. \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f 3D \u5f62\u72b6\u3092 Mesh \u3068\u3057\u3066\u63cf\u753b\u3059\u308b\n\n\u8907\u96d1\u306a 3D \u5f62\u72b6\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u6210\u3059\u308b\u5834\u5408\u3084\u3001.obj \u5f62\u5f0f\u4ee5\u5916\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u524d\u3067\u8aad\u307f\u8fbc\u3080\u5834\u5408\u306f\u3001\u9802\u70b9\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u914d\u5217\u3092 MeshData \u306b\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u3001Mesh \u3068\u3057\u3066\u63cf\u753b\u3067\u304d\u307e\u3059\u3002\n\n\u9802\u70b9\u914d\u5217 `Array<MeshVertex>` \u306f\u5404\u9802\u70b9\u306e \u5ea7\u6a19 (Float3) \u3068 \u30c6\u30af\u30b9\u30c1\u30e3 UV (Float2) \u3068 \u6cd5\u7dda (Float3) \u306e\u914d\u5217\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u914d\u5217 `Array<uint32>` \u306f\u3001\u9802\u70b9\u914d\u5217\u306e\u300c\u4f55\u756a\u76ee\u300d\u3068\u300c\u4f55\u756a\u76ee\u300d\u3068\u300c\u4f55\u756a\u76ee\u300d\u306e\u9802\u70b9\u3067\u4e09\u89d2\u5f62\u3092\u69cb\u6210\u3059\u308b\u304b\u3092\u8868\u3059\u914d\u5217\u3067\u3001\u30b5\u30a4\u30ba\u306f\u5fc5\u305a 3 \u306e\u500d\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6cd5\u7dda\u3092\u8a08\u7b97\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u5834\u5408\u306b\u306f\u3001\u81ea\u52d5\u3067\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b `Mesh::computeNormals()` \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n![ss3a.png](https://qiita-image-store.s3.amazonaws.com/0/30255/ec5e141b-81f4-0dcb-495c-e6fb894f3c47.png)\n\n```cpp\n# include <Siv3D.hpp>\n\nMeshData CreateMeshData()\n{\n\tconst int32 N = 400;\n\n\tArray<MeshVertex> vertices;\n\n\tfor (int32 i : step(N))\n\t{\n\t\tMeshVertex v;\n\t\tv.texcoord.set(0, 0);\n\t\tv.normal.set(0, 1, 0);\n\n\t\tv.position = Vec3(Cylindrical(i * 0.01, i * 0.05, i * 0.01));\n\t\tvertices.push_back(v);\n\n\t\tv.position = Vec3(Cylindrical(i * 0.01, i * 0.05, 0.4 + i * 0.01));\n\t\tvertices.push_back(v);\n\t}\n\n\t// \u88cf\u9762\u7528\u306e\u9802\u70b9\n\tfor (int32 i : step(N))\n\t{\n\t\tvertices.push_back(vertices[i * 2 + 0]);\n\t\tvertices.push_back(vertices[i * 2 + 1]);\n\t}\n\n\tArray<uint32> indices;\n\n\tfor (int32 i : step(N - 1))\n\t{\n\t\tindices.push_back(2 * i + 0);\n\t\tindices.push_back(2 * i + 2);\n\t\tindices.push_back(2 * i + 1);\n\n\t\tindices.push_back(2 * i + 1);\n\t\tindices.push_back(2 * i + 2);\n\t\tindices.push_back(2 * i + 3);\n\t}\n\n\tconst uint32 offset = N * 2;\n\n\t// \u88cf\u9762\u7528\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\tfor (int32 i : step(N - 1))\n\t{\n\t\tindices.push_back(offset + 2 * i + 0);\n\t\tindices.push_back(offset + 2 * i + 1);\n\t\tindices.push_back(offset + 2 * i + 2);\n\n\t\tindices.push_back(offset + 2 * i + 1);\n\t\tindices.push_back(offset + 2 * i + 3);\n\t\tindices.push_back(offset + 2 * i + 2);\n\t}\n\n\tMeshData meshData(vertices, indices);\n\n\tmeshData.computeNormals();\n\n\treturn meshData;\n}\n\nvoid Main()\n{\n\tWindow::Resize(1280, 720);\n\t\n\tGraphics::SetBackground(ColorF(0.5, 0.7, 0.9));\n\n\tGraphics3D::SetAmbientLight(ColorF(0.4));\n\n\tconst Texture textureTerrain(L\"Example/Grass.jpg\", TextureDesc::For3D);\n\n\tconst Mesh mesh(CreateMeshData());\n\n\twhile (System::Update())\n\t{\n\t\tGraphics3D::FreeCamera();\n\n\t\tPlane(20).draw(textureTerrain);\n\n\t\tmesh.translated(0, 0, -4).draw().drawShadow();\n\t}\n}\n```\n\n\u660e\u65e5\u306e Siv3D Advent Calendar \u306e\u8a18\u4e8b\u306f @Mitsugoro32 \u3055\u3093\u3067\u3059\u3002\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["Siv3D"]}