{"context": "\n\n\u3061\u3087\u3063\u3068\u899a\u3048\u66f8\u304d\n\nJava\u3068VBA(Access)\u304b\u3089\u540c\u3058\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u5b9f\u88c5\u3059\u308b(Salt+Stretched+Hash{sha256})\n\n\u65e7\u8cc7\u7523\u306eAccess\u304b\u3089\u65b0\u8cc7\u7523\u306eJava\u3068\u540c\u3058\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c6\u30fc\u30d6\u30eb\u3092\u5229\u7528\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u305f\u3044\u3068\u3044\u3046\u30e6\u30fc\u30b6\u8981\u671b\u306b\u5fdc\u3048\u308b\u305f\u3081\u306b\u5b9f\u88c5\nJava\u306fMessageDigest\u3092\u5229\u7528\nVBA(Access)\u306fadvapi32.dll\u3092\u5229\u7528\n\n\n\u307e\u305a\u306fJava\n\nJava\u6697\u53f7\u5316\u30af\u30e9\u30b9\n\nEncryptPassword.java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class EncryptPassword {\n    private static int STRETCH_COUNT = 1000;\n\n    /*\n     * salt + \u30b9\u30c8\u30ec\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d6\u5f97\n     */\n    public static String getStretchedPassword(String password, String saltString) throws Throwable {\n        String salt = getSha256(saltString);\n        String hash = \"\";\n\n        for (int i = 0; i < STRETCH_COUNT; i++) {\n            hash = getSha256(hash + salt + password);\n        }\n\n        return hash;\n    }\n\n    /*\n     * \u6587\u5b57\u5217\u304b\u3089 SHA256 \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u53d6\u5f97\n     */\n    private static String getSha256(String target) throws Throwable {\n\n        MessageDigest md = null;\n        StringBuffer buf = new StringBuffer();\n\n        try {\n            md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(target.getBytes());\n            byte[] digest = md.digest();\n\n            for (int i = 0; i < digest.length; i++) {\n                buf.append(String.format(\"%02x\", digest[i]));\n            }\n\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            throw e;\n        }\n\n        return buf.toString();\n    }\n}\n\n\n\nJava\u30c9\u30e9\u30a4\u30d0\u30af\u30e9\u30b9\n\nTestMain.java\npublic class TestMain {\n\n    public static void main(String[] args) throws Throwable {\n\n        System.out.println(EncryptPassword.getStretchedPassword(\"test\", \"testsalt\"));\n\n    }\n\n}\n\n\n\n\u6b21\u306bVBA\n\nVBA\u6697\u53f7\u5316\u30e2\u30b8\u30e5\u30fc\u30eb\n\nmodEncrypt.bas\nOption Explicit\n\nPrivate Declare Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" (ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptReleaseContext Lib \"advapi32.dll\" (ByVal hProv As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptCreateHash Lib \"advapi32.dll\" (ByVal hProv As Long, ByVal Algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, ByRef phHash As Long) As Long\nPrivate Declare Function CryptDestroyHash Lib \"advapi32.dll\" (ByVal hHash As Long) As Long\nPrivate Declare Function CryptHashData Lib \"advapi32.dll\" (ByVal hHash As Long, pbData As Any, ByVal cbData As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptGetHashParam Lib \"advapi32.dll\" (ByVal hHash As Long, ByVal dwParam As Long, pbData As Any, ByRef pcbData As Long, ByVal dwFlags As Long) As Long\n\nPrivate Const PROV_RSA_FULL   As Long = 1\nPrivate Const PROV_RSA_AES    As Long = 24\nPrivate Const CRYPT_VERIFYCONTEXT As Long = &HF0000000\n\nPrivate Const HP_HASHVAL      As Long = 2\n\nPrivate Const ALG_TYPE_ANY    As Long = 0\nPrivate Const ALG_CLASS_HASH  As Long = 32768\n\nPrivate Const ALG_SID_SHA_256 As Long = 12\n\nPrivate Const CALG_SHA_256    As Long = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA_256)\n\nPrivate Const STRETCH_COUNT As Integer = 1000\n\n' Create Hash\nPrivate Function CreateHash(byteData() As Byte, ByVal lngAlgID As Long) As String\n    Dim hProv, hHash As Long\n    Dim byteHash(0 To 63) As Byte\n    Dim lngLength As Long\n    Dim lngResult As Long\n    Dim strHash As String\n    Dim i As Long\n    strHash = \"\"\n    If CryptAcquireContext(hProv, vbNullString, vbNullString, IIf(lngAlgID >= CALG_SHA_256, PROV_RSA_AES, PROV_RSA_FULL), CRYPT_VERIFYCONTEXT) <> 0& Then\n        If CryptCreateHash(hProv, lngAlgID, 0&, 0&, hHash) <> 0& Then\n            lngLength = UBound(byteData()) - LBound(byteData()) + 1\n            If lngLength > 0 Then lngResult = CryptHashData(hHash, byteData(LBound(byteData())), lngLength, 0&) Else: lngResult = CryptHashData(hHash, ByVal 0&, 0&, 0&)\n            If lngResult <> 0& Then\n                lngLength = UBound(byteHash()) - LBound(byteHash()) + 1\n                If CryptGetHashParam(hHash, HP_HASHVAL, byteHash(LBound(byteHash())), lngLength, 0&) <> 0& Then\n                    For i = 0 To lngLength - 1\n                        strHash = strHash & Right$(\"0\" & Hex$(byteHash(LBound(byteHash()) + i)), 2)\n                    Next\n                End If\n            End If\n            CryptDestroyHash hHash\n        End If\n        CryptReleaseContext hProv, 0&\n    End If\n    CreateHash = LCase$(strHash)\nEnd Function\n\n' Create Hash From String(Shift_JIS)\nPrivate Function CreateHashString(ByVal strData As String, ByVal lngAlgID As Long) As String\n    CreateHashString = CreateHash(StrConv(strData, vbFromUnicode), lngAlgID)\nEnd Function\n\n' SHA-256\nPublic Function CreateSHA256HashString(ByVal strData As String) As String\n    CreateSHA256HashString = CreateHashString(strData, CALG_SHA_256)\nEnd Function\n\nPublic Function getSHA256HashPassword(password As String, saltString As String)\n\n    Dim salt, hash As String\n    Dim i As Integer\n\n    salt = CreateSHA256HashString(saltString)\n    hash = \"\"\n    For i = 1 To STRETCH_COUNT\n        DoEvents\n\n        hash = CreateSHA256HashString(hash & salt & password)\n    Next i\n\n    getSHA256HashPassword = hash\nEnd Function\n\n\n\nVBA\u30c9\u30e9\u30a4\u30d0\u30e2\u30b8\u30e5\u30fc\u30eb\n\nmodMain.bas\nPrivate Sub Main()\n\n    Debug.Print getSHA256HashPassword(\"test\", \"testsalt\")\n\nEnd Sub\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\nJava\n\n\nVBA\n\n\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f(\u00b4\u03c9\uff40)\n# \u3061\u3087\u3063\u3068\u899a\u3048\u66f8\u304d\n## Java\u3068VBA(Access)\u304b\u3089\u540c\u3058\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u5b9f\u88c5\u3059\u308b(Salt+Stretched+Hash{sha256})\n\n- \u65e7\u8cc7\u7523\u306eAccess\u304b\u3089\u65b0\u8cc7\u7523\u306eJava\u3068\u540c\u3058\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c6\u30fc\u30d6\u30eb\u3092\u5229\u7528\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u305f\u3044\u3068\u3044\u3046\u30e6\u30fc\u30b6\u8981\u671b\u306b\u5fdc\u3048\u308b\u305f\u3081\u306b\u5b9f\u88c5\n- Java\u306fMessageDigest\u3092\u5229\u7528\n- VBA(Access)\u306fadvapi32.dll\u3092\u5229\u7528\n\n### \u307e\u305a\u306fJava\n\n#### Java\u6697\u53f7\u5316\u30af\u30e9\u30b9\n\n```java:EncryptPassword.java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n \npublic class EncryptPassword {\n\tprivate static int STRETCH_COUNT = 1000;\n\n\t/*\n\t * salt + \u30b9\u30c8\u30ec\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d6\u5f97\n\t */\n\tpublic static String getStretchedPassword(String password, String saltString) throws Throwable {\n\t\tString salt = getSha256(saltString);\n\t\tString hash = \"\";\n\n\t\tfor (int i = 0; i < STRETCH_COUNT; i++) {\n\t\t\thash = getSha256(hash + salt + password);\n\t\t}\n\n\t\treturn hash;\n\t}\n \n\t/*\n\t * \u6587\u5b57\u5217\u304b\u3089 SHA256 \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u53d6\u5f97\n\t */\n\tprivate static String getSha256(String target) throws Throwable {\n\n\t\tMessageDigest md = null;\n\t\tStringBuffer buf = new StringBuffer();\n\n\t\ttry {\n\t\t\tmd = MessageDigest.getInstance(\"SHA-256\");\n\t\t\tmd.update(target.getBytes());\n\t\t\tbyte[] digest = md.digest();\n\n\t\t\tfor (int i = 0; i < digest.length; i++) {\n\t\t\t\tbuf.append(String.format(\"%02x\", digest[i]));\n\t\t\t}\n\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow e;\n\t\t}\n\n\t\treturn buf.toString();\n\t}\n}\n```\n\n#### Java\u30c9\u30e9\u30a4\u30d0\u30af\u30e9\u30b9\n\n```java:TestMain.java\npublic class TestMain {\n\n\tpublic static void main(String[] args) throws Throwable {\n\n\t\tSystem.out.println(EncryptPassword.getStretchedPassword(\"test\", \"testsalt\"));\n\n\t}\n\n}\n```\n\n###\u6b21\u306bVBA\n\n#### VBA\u6697\u53f7\u5316\u30e2\u30b8\u30e5\u30fc\u30eb\n\n```vba:modEncrypt.bas\nOption Explicit\n\nPrivate Declare Function CryptAcquireContext Lib \"advapi32.dll\" Alias \"CryptAcquireContextA\" (ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptReleaseContext Lib \"advapi32.dll\" (ByVal hProv As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptCreateHash Lib \"advapi32.dll\" (ByVal hProv As Long, ByVal Algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, ByRef phHash As Long) As Long\nPrivate Declare Function CryptDestroyHash Lib \"advapi32.dll\" (ByVal hHash As Long) As Long\nPrivate Declare Function CryptHashData Lib \"advapi32.dll\" (ByVal hHash As Long, pbData As Any, ByVal cbData As Long, ByVal dwFlags As Long) As Long\nPrivate Declare Function CryptGetHashParam Lib \"advapi32.dll\" (ByVal hHash As Long, ByVal dwParam As Long, pbData As Any, ByRef pcbData As Long, ByVal dwFlags As Long) As Long\n\nPrivate Const PROV_RSA_FULL   As Long = 1\nPrivate Const PROV_RSA_AES    As Long = 24\nPrivate Const CRYPT_VERIFYCONTEXT As Long = &HF0000000\n\nPrivate Const HP_HASHVAL      As Long = 2\n\nPrivate Const ALG_TYPE_ANY    As Long = 0\nPrivate Const ALG_CLASS_HASH  As Long = 32768\n\nPrivate Const ALG_SID_SHA_256 As Long = 12\n\nPrivate Const CALG_SHA_256    As Long = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA_256)\n\nPrivate Const STRETCH_COUNT As Integer = 1000\n\n' Create Hash\nPrivate Function CreateHash(byteData() As Byte, ByVal lngAlgID As Long) As String\n    Dim hProv, hHash As Long\n    Dim byteHash(0 To 63) As Byte\n    Dim lngLength As Long\n    Dim lngResult As Long\n    Dim strHash As String\n    Dim i As Long\n    strHash = \"\"\n    If CryptAcquireContext(hProv, vbNullString, vbNullString, IIf(lngAlgID >= CALG_SHA_256, PROV_RSA_AES, PROV_RSA_FULL), CRYPT_VERIFYCONTEXT) <> 0& Then\n        If CryptCreateHash(hProv, lngAlgID, 0&, 0&, hHash) <> 0& Then\n            lngLength = UBound(byteData()) - LBound(byteData()) + 1\n            If lngLength > 0 Then lngResult = CryptHashData(hHash, byteData(LBound(byteData())), lngLength, 0&) Else: lngResult = CryptHashData(hHash, ByVal 0&, 0&, 0&)\n            If lngResult <> 0& Then\n                lngLength = UBound(byteHash()) - LBound(byteHash()) + 1\n                If CryptGetHashParam(hHash, HP_HASHVAL, byteHash(LBound(byteHash())), lngLength, 0&) <> 0& Then\n                    For i = 0 To lngLength - 1\n                        strHash = strHash & Right$(\"0\" & Hex$(byteHash(LBound(byteHash()) + i)), 2)\n                    Next\n                End If\n            End If\n            CryptDestroyHash hHash\n        End If\n        CryptReleaseContext hProv, 0&\n    End If\n    CreateHash = LCase$(strHash)\nEnd Function\n\n' Create Hash From String(Shift_JIS)\nPrivate Function CreateHashString(ByVal strData As String, ByVal lngAlgID As Long) As String\n    CreateHashString = CreateHash(StrConv(strData, vbFromUnicode), lngAlgID)\nEnd Function\n\n' SHA-256\nPublic Function CreateSHA256HashString(ByVal strData As String) As String\n    CreateSHA256HashString = CreateHashString(strData, CALG_SHA_256)\nEnd Function\n\nPublic Function getSHA256HashPassword(password As String, saltString As String)\n\n    Dim salt, hash As String\n    Dim i As Integer\n\n    salt = CreateSHA256HashString(saltString)\n    hash = \"\"\n    For i = 1 To STRETCH_COUNT\n        DoEvents\n        \n        hash = CreateSHA256HashString(hash & salt & password)\n    Next i\n\n    getSHA256HashPassword = hash\nEnd Function\n```\n\n#### VBA\u30c9\u30e9\u30a4\u30d0\u30e2\u30b8\u30e5\u30fc\u30eb\n\n```vba:modMain.bas\nPrivate Sub Main()\n\n    Debug.Print getSHA256HashPassword(\"test\", \"testsalt\")\n\nEnd Sub\n```\n\n### \u5b9f\u884c\u7d50\u679c\n#### Java\n![result_java.png](https://qiita-image-store.s3.amazonaws.com/0/98458/626b844d-ad9c-c0c5-a0ae-84d0b1761986.png)\n\n#### VBA\n![result_vba.png](https://qiita-image-store.s3.amazonaws.com/0/98458/9a341c94-bf80-b31a-6b35-0bff32666344.png)\n\n\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f(*\u00b4\u03c9\uff40*)\n", "tags": ["salt", "hash", "SHA-256", "Java", "VBA"]}