{"tags": ["Chainer"], "context": "\u3059\u3067\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304b\u3089W\u3084b\u306a\u3069\u306e\u91cd\u307f\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u65e9\u304f\u5b66\u7fd2\u3092\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b (fine-tuning)\u3002\n\u30e2\u30c7\u30eb\u81ea\u4f53\u304c\u5b8c\u5168\u306b\u540c\u3058\u5834\u5408\u306b\u306f\u5f53\u7136\u4f7f\u3048\u308b\u3057\u3001\u30e2\u30c7\u30eb\u306e\u4e00\u90e8\u3092\u4fee\u6b63\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u3082\u3001\u5909\u66f4\u306e\u5fc5\u8981\u304c\u306a\u3044\u5c64\u306b\u95a2\u3057\u3066\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u304b\u3089\u91cd\u307f\u3092\u501f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u3002\u4f8b\u3048\u3070\u3001\u5206\u985e\u5148\u306e\u753b\u50cf\u7a2e\u985e\u304c1000\u7a2e\u985e\u304b\u308910\u7a2e\u985e\u306b\u5207\u308a\u66ff\u3048\u308b\u5834\u5408\u306a\u3069\u306f\u3001\u6700\u7d42\u306e\u5168\u7d50\u5408\u5c64\u306e\u307f\u5207\u308a\u66ff\u3048\u308b\u5fc5\u8981\u306f\u3042\u308b\u304c\u3001\u305d\u308c\u4ee5\u524d\u306e\u7573\u307f\u8fbc\u307f\u5c64\u306a\u3069\u306f\u5909\u66f4\u306e\u5fc5\u8981\u6027\u306f\u5c11\u306a\u304f\u3001\u305d\u306e\u90e8\u5206\u306e\u91cd\u307f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306b\u7d50\u3073\u3064\u304f\u80cc\u666f\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\uff1a\n - \u3042\u3089\u304b\u3058\u3081\u5927\u91cf\u306e\u8a08\u7b97\u8cc7\u6e90\u3092\u4f7f\u7528\u3057\u3066\u53ce\u675f\u3057\u305f\u6642\u70b9\u306e\u7d50\u679c\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u307e\u3067\u306e\u8a08\u7b97\u6642\u9593\u3092\u7701\u7565\u53ef\u80fd\u3002\u7279\u306b\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u7b2c\u4e00\u5c64\u306f\u30ac\u30dc\u30fc\u30eb\u30d5\u30a3\u30eb\u30bf\u306b\u8fd1\u4f3c\u3059\u308b\u3068\u3044\u3046\u7814\u7a76\u3082\u591a\u304f\u3001\u3042\u3048\u3066\u305d\u3053\u3092\u65b0\u898f\u3067\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u6027\u306f\u3042\u307e\u308a\u611f\u3058\u3089\u308c\u306a\u3044\n - \u307e\u305f\u3001\u5404\u5c64\u306e\u5e73\u5747\u51fa\u529b\u304c\u5b66\u7fd2\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u5f90\u3005\u306b\u5909\u5316\u3057\u3066\u3044\u304f\u300c\u5171\u5909\u91cf\u30b7\u30d5\u30c8\u300d\u304c\u6291\u3048\u3089\u308c\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u91cd\u307f\u66f4\u65b0\u304c\u3001\u5171\u5909\u91cf\u30b7\u30d5\u30c8\u306e\u8ffd\u5f93\u306b\u8cbb\u3084\u3055\u308c\u306a\u304f\u306a\u308a\u3001\u3088\u308a\u7cbe\u7d30\u306a\u4fc2\u6570\u306e\u8a2d\u5b9a\u304c\u9032\u3080\n\n\u30e2\u30c7\u30eb\u306e\u69cb\u9020\u3068\u3001\u521d\u671f\u5024\u306e\u8a2d\u5b9a\u306e\u884c\u3044\u65b9\nChainer\u306b\u304a\u3051\u308b\u5404\u91cd\u307f\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u6240\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3002\n# Opt\u306f\u3001\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305fOptimizer\nTarget = Opt.target # Target\u306f\u3001(y=\u4e88\u6e2c\u7d50\u679c,t=\u6b63\u89e3)\u306e\u6bd4\u8f03\u3092\u7b54\u3048\u3068\u3057\u3066\u6301\u3064Classifier\u30af\u30e9\u30b9\nModel = Target.predictor # Model\u306f\u3001x=\u5165\u529b\u304b\u3089\u3001y=\u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059Link\u30af\u30e9\u30b9\n\nconv1_W = Model.conv1.W.data # .data\u306b\u3088\u308a\u3001Variable\u30af\u30e9\u30b9\u304b\u3089array\u3092\u53d6\u308a\u51fa\u3059\nconv1_b = Model.conv1.b.data\n\n\u306a\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3042\u3068\u306b\u4e0a\u8a18\u306e\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u91cd\u307f\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u30fb\u30fb\u30fb\u3068\u4e00\u77ac\u8003\u3048\u3066\u3057\u307e\u3046\u306e\u3060\u304c\u3001Chainer\u3067\u306f1st iteration\u306e\u4e2d\u3067\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u7b49\u3092\u53c2\u8003\u306bW,b\u306a\u3069\u304c\u4f5c\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u4ee5\u524d\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u30a8\u30e9\u30fc\u3092\u51fa\u3059\u3002\n\u305d\u3053\u3067\u3001Model\u5b9a\u7fa9\u306e\u4e2d\u3067\u6307\u5b9a\u3067\u304d\u308binitialW, initial_bias\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n\nclass AlexNet(chainer.Chain):\n    def __init__(self, class_labels=100,net=None):\n        super(AlexNet, self).__init__(\n        conv1 = L.Convolution2D(None, 96, 11,stride=4, initialW=net.conv1.W if net else None ,initial_bias=net.conv1.b if net else None),\n        ...\n        )\n        return\n\n\n\n\n\n\u91cd\u307f\u306e\u56fa\u5b9a\n\u91cd\u307f\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5c64\u306b\u95a2\u3057\u3066\u3001\u7279\u306b\u5b66\u7fd2\u306e\u521d\u671f\u306b\u306f\u66f4\u65b0\u304c\u884c\u308f\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u65b9\u304c\u3001\u4ed6\u306e\u5c64\u306e\u5b66\u7fd2\u304c\u52b9\u7387\u7684\u306b\u9032\u3080\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001optimizer\u306ehook\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3001\u91cd\u307f\u66f4\u65b0\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\u3002\nfrom chainer import cuda\nclass DelGradient(object):\n    name = 'DelGradient'\n    def __init__(self, delTgt):\n        self.delTgt = delTgt\n\n    def __call__(self, opt):\n        for name,param in opt.target.namedparams():\n            for d in self.delTgt:\n                if d in name:\n                    grad = param.grad\n                    with cuda.get_device(grad):\n                        grad = 0\n\n# Main\u306e\u4e2d\n...                \noptimizer = chainer.optimizers.Adam()\noptimizer.setup(model)\noptimizer.add_hook(DelGradient([\"conv2\",\"conv3\",\"conv4\",\"conv5\",\"fc6\"]))\n...\n\n\nCaffe\u30e2\u30c7\u30eb\u304b\u3089\u306e\u91cd\u307f\u306e\u8aad\u307f\u8fbc\u307f\nCaffe\u30e2\u30c7\u30eb\u304b\u3089\u91cd\u307f\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u306b\u306f\u3001Chainer\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3001Caffe\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u304c\u3042\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306f\u4ee5\u4e0b\u306e\u901a\u308a:\n- Chainer\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f: \u30b3\u30fc\u30c9\u306f\u7c21\u6f54\u3002\u307e\u305fprototxt\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3082\u4e0d\u8981\u3002convolution2D\u306a\u3069\u306b\u4f7f\u308f\u308c\u308b\u5f15\u6570\u306e\u3046\u3061\u3001Caffe\u306b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u3082\u306e (\"group\"\u306a\u3069)\u306b\u95a2\u3057\u3066\u3082\u3001\u3067\u304d\u308b\u3060\u3051\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u306a\u304c\u3089\u5fc5\u305a\u3057\u3082\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5931\u6557\u3059\u308b\u5834\u5408\u3082\u3042\u308b\u3002\u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u304c\u975e\u5e38\u306b\u9045\u3044\n- Caffe\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f: prototxt\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u82e5\u5e72\u30b3\u30fc\u30c9\u306f\u6c5a\u304f\u306a\u308b\u3002\u4e00\u65b9\u3067\u3001\u8aad\u307f\u8fbc\u307f\u306f\u65e9\u304f\u3001\u3069\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3082\u539f\u7406\u7684\u306b\u306f\u8aad\u307f\u8fbc\u3081\u308b\u3002\u305d\u306e\u4e00\u65b9\u3067\u3001\u4e0a\u8a18group\u5f15\u6570\u306a\u3069\u306b\u3088\u3063\u3066\u751f\u3058\u308bCaffe\u3068Chainer\u306e\u4fc2\u6570\u306e\u76f8\u9055\u306a\u3069\u306f\u3001\u624b\u52d5\u3067\u5bfe\u5fdc\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n\nChainer\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f:\n\u4e0b\u8a18\u3067\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5f8c\u3001\u305d\u306e\u4fc2\u6570\u3092\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306einitialize\u5f15\u6570\u306b\u6307\u5b9a\u3059\u308b\u3002net\u304cpre-trained\u306amodel\u3068\u306a\u308b\u3002\nfrom chainer.links.caffe import CaffeFunction\nnet = CaffeFunction(\"caffe_alexnet_train_iter_85484.caffemodel\")\n#\u91cd\u307f\u3078\u306e\u30a2\u30af\u30bb\u30b9\nnet.conv1.W.data # W\nnet.conv1.b.data # b\n\n\nCaffe\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066Caffe\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002net\u304cpre-trained\u306amodel\u3068\u306a\u308b\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001Classifier\u306e\u7b2c\u4e00\u5f15\u6570\u306f\u3001caffe\u306etest\u306b\u4f7f\u7528\u3059\u308bdeploy.prototxt\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\u305d\u308c\u4ee5\u5916\u3060\u3068\u3001\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3002\nimport caffe\nnet = caffe.Classifier('deploy.prototxt','caffe_alexnet_train_iter_85484.caffemodel', image_dims = (277, 277))\n# \u91cd\u307f\u3078\u306e\u30a2\u30af\u30bb\u30b9\nnet.params['conv1'][0].data # W\nnet.params['conv1'][1].data # b\n\n\u3059\u3067\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304b\u3089W\u3084b\u306a\u3069\u306e\u91cd\u307f\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u65e9\u304f\u5b66\u7fd2\u3092\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b (fine-tuning)\u3002\n\u30e2\u30c7\u30eb\u81ea\u4f53\u304c\u5b8c\u5168\u306b\u540c\u3058\u5834\u5408\u306b\u306f\u5f53\u7136\u4f7f\u3048\u308b\u3057\u3001\u30e2\u30c7\u30eb\u306e\u4e00\u90e8\u3092\u4fee\u6b63\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u3082\u3001\u5909\u66f4\u306e\u5fc5\u8981\u304c\u306a\u3044\u5c64\u306b\u95a2\u3057\u3066\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u304b\u3089\u91cd\u307f\u3092\u501f\u7528\u3059\u308b\u306e\u304c\u826f\u3044\u3002\u4f8b\u3048\u3070\u3001\u5206\u985e\u5148\u306e\u753b\u50cf\u7a2e\u985e\u304c1000\u7a2e\u985e\u304b\u308910\u7a2e\u985e\u306b\u5207\u308a\u66ff\u3048\u308b\u5834\u5408\u306a\u3069\u306f\u3001\u6700\u7d42\u306e\u5168\u7d50\u5408\u5c64\u306e\u307f\u5207\u308a\u66ff\u3048\u308b\u5fc5\u8981\u306f\u3042\u308b\u304c\u3001\u305d\u308c\u4ee5\u524d\u306e\u7573\u307f\u8fbc\u307f\u5c64\u306a\u3069\u306f\u5909\u66f4\u306e\u5fc5\u8981\u6027\u306f\u5c11\u306a\u304f\u3001\u305d\u306e\u90e8\u5206\u306e\u91cd\u307f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306b\u7d50\u3073\u3064\u304f\u80cc\u666f\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\uff1a\n - \u3042\u3089\u304b\u3058\u3081\u5927\u91cf\u306e\u8a08\u7b97\u8cc7\u6e90\u3092\u4f7f\u7528\u3057\u3066\u53ce\u675f\u3057\u305f\u6642\u70b9\u306e\u7d50\u679c\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u307e\u3067\u306e\u8a08\u7b97\u6642\u9593\u3092\u7701\u7565\u53ef\u80fd\u3002\u7279\u306b\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u7b2c\u4e00\u5c64\u306f\u30ac\u30dc\u30fc\u30eb\u30d5\u30a3\u30eb\u30bf\u306b\u8fd1\u4f3c\u3059\u308b\u3068\u3044\u3046\u7814\u7a76\u3082\u591a\u304f\u3001\u3042\u3048\u3066\u305d\u3053\u3092\u65b0\u898f\u3067\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u6027\u306f\u3042\u307e\u308a\u611f\u3058\u3089\u308c\u306a\u3044\n - \u307e\u305f\u3001\u5404\u5c64\u306e\u5e73\u5747\u51fa\u529b\u304c\u5b66\u7fd2\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u5f90\u3005\u306b\u5909\u5316\u3057\u3066\u3044\u304f\u300c\u5171\u5909\u91cf\u30b7\u30d5\u30c8\u300d\u304c\u6291\u3048\u3089\u308c\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u91cd\u307f\u66f4\u65b0\u304c\u3001\u5171\u5909\u91cf\u30b7\u30d5\u30c8\u306e\u8ffd\u5f93\u306b\u8cbb\u3084\u3055\u308c\u306a\u304f\u306a\u308a\u3001\u3088\u308a\u7cbe\u7d30\u306a\u4fc2\u6570\u306e\u8a2d\u5b9a\u304c\u9032\u3080\n\n# \u30e2\u30c7\u30eb\u306e\u69cb\u9020\u3068\u3001\u521d\u671f\u5024\u306e\u8a2d\u5b9a\u306e\u884c\u3044\u65b9\nChainer\u306b\u304a\u3051\u308b\u5404\u91cd\u307f\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u6240\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3002\n\n``` Python\n# Opt\u306f\u3001\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305fOptimizer\nTarget = Opt.target # Target\u306f\u3001(y=\u4e88\u6e2c\u7d50\u679c,t=\u6b63\u89e3)\u306e\u6bd4\u8f03\u3092\u7b54\u3048\u3068\u3057\u3066\u6301\u3064Classifier\u30af\u30e9\u30b9\nModel = Target.predictor # Model\u306f\u3001x=\u5165\u529b\u304b\u3089\u3001y=\u4e88\u6e2c\u7d50\u679c\u3092\u8fd4\u3059Link\u30af\u30e9\u30b9\n\nconv1_W = Model.conv1.W.data # .data\u306b\u3088\u308a\u3001Variable\u30af\u30e9\u30b9\u304b\u3089array\u3092\u53d6\u308a\u51fa\u3059\nconv1_b = Model.conv1.b.data\n```\n\n\u306a\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3042\u3068\u306b\u4e0a\u8a18\u306e\u5909\u6570\u3092\u66f8\u304d\u63db\u3048\u3066\u91cd\u307f\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u30fb\u30fb\u30fb\u3068\u4e00\u77ac\u8003\u3048\u3066\u3057\u307e\u3046\u306e\u3060\u304c\u3001Chainer\u3067\u306f1st iteration\u306e\u4e2d\u3067\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u753b\u50cf\u30b5\u30a4\u30ba\u7b49\u3092\u53c2\u8003\u306bW,b\u306a\u3069\u304c\u4f5c\u6210\u3055\u308c\u308b\u305f\u3081\u3001\u305d\u308c\u4ee5\u524d\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u30a8\u30e9\u30fc\u3092\u51fa\u3059\u3002\n\n\u305d\u3053\u3067\u3001Model\u5b9a\u7fa9\u306e\u4e2d\u3067\u6307\u5b9a\u3067\u304d\u308b`initialW`, `initial_bias`\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n\n``` Python\n\nclass AlexNet(chainer.Chain):\n    def __init__(self, class_labels=100,net=None):\n\t\tsuper(AlexNet, self).__init__(\n\t\tconv1 = L.Convolution2D(None, 96, 11,stride=4, initialW=net.conv1.W if net else None ,initial_bias=net.conv1.b if net else None),\n\t\t...\n        )\n        return\n\n\n\n```\n\n# \u91cd\u307f\u306e\u56fa\u5b9a\n\u91cd\u307f\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5c64\u306b\u95a2\u3057\u3066\u3001\u7279\u306b\u5b66\u7fd2\u306e\u521d\u671f\u306b\u306f\u66f4\u65b0\u304c\u884c\u308f\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u65b9\u304c\u3001\u4ed6\u306e\u5c64\u306e\u5b66\u7fd2\u304c\u52b9\u7387\u7684\u306b\u9032\u3080\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001optimizer\u306ehook\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3001\u91cd\u307f\u66f4\u65b0\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\u3002\n\n``` Python\nfrom chainer import cuda\nclass DelGradient(object):\n    name = 'DelGradient'\n    def __init__(self, delTgt):\n        self.delTgt = delTgt\n\n    def __call__(self, opt):\n        for name,param in opt.target.namedparams():\n            for d in self.delTgt:\n                if d in name:\n                    grad = param.grad\n                    with cuda.get_device(grad):\n                        grad = 0\n\n# Main\u306e\u4e2d\n...                \noptimizer = chainer.optimizers.Adam()\noptimizer.setup(model)\noptimizer.add_hook(DelGradient([\"conv2\",\"conv3\",\"conv4\",\"conv5\",\"fc6\"]))\n...\n```\n\n# Caffe\u30e2\u30c7\u30eb\u304b\u3089\u306e\u91cd\u307f\u306e\u8aad\u307f\u8fbc\u307f\nCaffe\u30e2\u30c7\u30eb\u304b\u3089\u91cd\u307f\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u306b\u306f\u3001Chainer\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3001Caffe\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u304c\u3042\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306f\u4ee5\u4e0b\u306e\u901a\u308a:\n- **Chainer\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f**: \u30b3\u30fc\u30c9\u306f\u7c21\u6f54\u3002\u307e\u305fprototxt\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3082\u4e0d\u8981\u3002convolution2D\u306a\u3069\u306b\u4f7f\u308f\u308c\u308b\u5f15\u6570\u306e\u3046\u3061\u3001Caffe\u306b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u3082\u306e (\"group\"\u306a\u3069)\u306b\u95a2\u3057\u3066\u3082\u3001\u3067\u304d\u308b\u3060\u3051\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u306a\u304c\u3089\u5fc5\u305a\u3057\u3082\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5931\u6557\u3059\u308b\u5834\u5408\u3082\u3042\u308b\u3002\u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u304c\u975e\u5e38\u306b\u9045\u3044\n- **Caffe\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f**: prototxt\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u304c\u5fc5\u8981\u306a\u305f\u3081\u3001\u82e5\u5e72\u30b3\u30fc\u30c9\u306f\u6c5a\u304f\u306a\u308b\u3002\u4e00\u65b9\u3067\u3001\u8aad\u307f\u8fbc\u307f\u306f\u65e9\u304f\u3001\u3069\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3082\u539f\u7406\u7684\u306b\u306f\u8aad\u307f\u8fbc\u3081\u308b\u3002\u305d\u306e\u4e00\u65b9\u3067\u3001\u4e0a\u8a18group\u5f15\u6570\u306a\u3069\u306b\u3088\u3063\u3066\u751f\u3058\u308bCaffe\u3068Chainer\u306e\u4fc2\u6570\u306e\u76f8\u9055\u306a\u3069\u306f\u3001\u624b\u52d5\u3067\u5bfe\u5fdc\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n\n\n## Chainer\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f:\n\u4e0b\u8a18\u3067\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5f8c\u3001\u305d\u306e\u4fc2\u6570\u3092\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u306einitialize\u5f15\u6570\u306b\u6307\u5b9a\u3059\u308b\u3002`net`\u304cpre-trained\u306amodel\u3068\u306a\u308b\u3002\n\n``` Python\nfrom chainer.links.caffe import CaffeFunction\nnet = CaffeFunction(\"caffe_alexnet_train_iter_85484.caffemodel\")\n#\u91cd\u307f\u3078\u306e\u30a2\u30af\u30bb\u30b9\nnet.conv1.W.data # W\nnet.conv1.b.data # b\n```\n\n## Caffe\u306e\u95a2\u6570\u306b\u3088\u308b\u8aad\u307f\u8fbc\u307f\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066Caffe\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3002`net`\u304cpre-trained\u306amodel\u3068\u306a\u308b\u3002\n\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001Classifier\u306e\u7b2c\u4e00\u5f15\u6570\u306f\u3001caffe\u306etest\u306b\u4f7f\u7528\u3059\u308bdeploy.prototxt\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\u305d\u308c\u4ee5\u5916\u3060\u3068\u3001\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3002\n\n``` Python\nimport caffe\nnet = caffe.Classifier('deploy.prototxt','caffe_alexnet_train_iter_85484.caffemodel', image_dims = (277, 277))\n# \u91cd\u307f\u3078\u306e\u30a2\u30af\u30bb\u30b9\nnet.params['conv1'][0].data # W\nnet.params['conv1'][1].data # b\n```\n"}