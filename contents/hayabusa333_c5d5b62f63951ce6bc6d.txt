{"tags": ["Elixir", "cowboy"], "context": "\n\n\u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001Preset\u3067Response\u3092\u5c11\u3057\u305a\u3064\u8a2d\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u3092\u5224\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\nCowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\nCowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n1.0.4\n\n\n\n\ncowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n2.0.0-pre4\n\n\n\n\nHeader\u60c5\u5831\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u3092\u53d6\u5f97\n\u4eca\u56de\u306f\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u306e\u5224\u5b9a\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u81ea\u4f53\u306fUser-Agent\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001User-Agent\u3092\u53d6\u5f97\u3057\u3066\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/browser\", ElixirCowboyExample.BrowserCheckHandler, []},\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n\n\n\nlib/elixir_cowboy_example/browser_check_handler.ex\ndefmodule ElixirCowboyExample.BrowserCheckHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n\n    # Header\u304b\u3089user-agent\u306e\u60c5\u5831\u3092\u629c\u304d\u51fa\u3059\n    {user_agent_val, req} = :cowboy_req.header(<<\"user-agent\">>, req)\n\n    headers = [{\"content-type\", \"text/html\"}]\n\n    # user-agent\u306e\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\n    # body\u306bHTML\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    # \u4eca\u56de\u306fchrome\u3068safari\u306e\u307f\u5bfe\u5fdc\n    body = cond do\n      String.contains?(user_agent_val, \"Chrome\") \n        -> \"<html><head>Chrome Hello world!</head>\"\n      String.contains?(user_agent_val, \"Safari\") \n        -> \"<html><head>Safari Hello world!</head>\"\n      true \n        -> \"<html><head>Hello world!</head>\"\n    end\n\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n    {:ok, req, state}\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\ncowboy 2.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/browser\", ElixirCowboyExample.BrowserCheckHandler, []},\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n\n\n\nlib/elixir_cowboy_example/browser_check_handler.ex\ndefmodule ElixirCowboyExample.BrowserCheckHandler do\n  def init(req, opts) do\n\n    # Header\u304b\u3089user-agent\u306e\u60c5\u5831\u3092\u629c\u304d\u51fa\u3059\n    user_agent_val = :cowboy_req.header(<<\"user-agent\">>, req)\n\n    headers = %{\"content-type\" => \"text/html\"}\n\n    # user-agent\u306e\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\n    # body\u306bHTML\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    # \u4eca\u56de\u306fchrome\u3068safari\u306e\u307f\u5bfe\u5fdc\n    body = cond do\n      String.contains?(user_agent_val, \"Chrome\") \n        -> \"<html><head>Chrome Hello world!</head>\"\n      String.contains?(user_agent_val, \"Safari\") \n        -> \"<html><head>Safari Hello world!</head>\"\n      true \n        -> \"<html><head>Hello world!</head>\"\n    end\n\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n\n    {:ok, req, opts}\n  end\nend\n\n\n\n\u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a iex -S mix \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001http://localhost:4000/browser\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nChrome\u3068Safari\u3067\u5225\u306eHTML\u5185\u5bb9\u304c\u51fa\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nChrome\u306e\u5834\u5408\n\nSafari\u306e\u5834\u5408\n\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u306fHeader\u60c5\u5831\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u3092\u5224\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5224\u5b9a\u65b9\u6cd5\u306fElixir\u3067\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u5c11\u3057\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nCowboy User Guide\nCowboy User Guide\n# \u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n[\u524d\u56de](http://qiita.com/hayabusa333/items/f661924467d29068f363)\u306e\u8a18\u4e8b\u3067\u306f\u3001Preset\u3067Response\u3092\u5c11\u3057\u305a\u3064\u8a2d\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u3092\u5224\u5b9a\u3057\u3066\u307f\u307e\u3059\u3002\n\n[Cowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/browser_check_cowboy)\n\n[Cowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/browser_check_cowboy_cowboy_two_pre4)\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 1.0.4 |\n\n## cowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 2.0.0-pre4 |\n\n# Header\u60c5\u5831\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u3092\u53d6\u5f97\n\n\u4eca\u56de\u306f\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u306e\u5224\u5b9a\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u30d6\u30e9\u30a6\u30b6\u60c5\u5831\u81ea\u4f53\u306f`User-Agent`\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001`User-Agent`\u3092\u53d6\u5f97\u3057\u3066\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/browser\", ElixirCowboyExample.BrowserCheckHandler, []},\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n```\n\n``` elixir:lib/elixir_cowboy_example/browser_check_handler.ex\ndefmodule ElixirCowboyExample.BrowserCheckHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n\n    # Header\u304b\u3089user-agent\u306e\u60c5\u5831\u3092\u629c\u304d\u51fa\u3059\n    {user_agent_val, req} = :cowboy_req.header(<<\"user-agent\">>, req)\n\n    headers = [{\"content-type\", \"text/html\"}]\n\n    # user-agent\u306e\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\n    # body\u306bHTML\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    # \u4eca\u56de\u306fchrome\u3068safari\u306e\u307f\u5bfe\u5fdc\n    body = cond do\n      String.contains?(user_agent_val, \"Chrome\") \n        -> \"<html><head>Chrome Hello world!</head>\"\n      String.contains?(user_agent_val, \"Safari\") \n        -> \"<html><head>Safari Hello world!</head>\"\n      true \n        -> \"<html><head>Hello world!</head>\"\n    end\n\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n    {:ok, req, state}\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n## cowboy 2.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example.ex\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      # Add it.\n      {\"/browser\", ElixirCowboyExample.BrowserCheckHandler, []},\n      {\"/preset\", ElixirCowboyExample.PresetResponseHandler, []},\n      {\"/stream\", ElixirCowboyExample.StreamHandler, []},\n      {\"/sendfile\", ElixirCowboyExample.SendFileHandler, []},\n      {\"/cookie\", ElixirCowboyExample.CookieHandler, []},\n      {\"/upload\", ElixirCowboyExample.UploadHandler, []},\n      {\"/dynamic\", ElixirCowboyExample.DynamicPageHandler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []},\n      {\"/priv/static/js/:javascript\", ElixirCowboyExample.JavascriptHandler, []},\n      {\"/priv/static/css/:css\", ElixirCowboyExample.CssHandler, []},\n      {\"/priv/static/image/[...]\", :cowboy_static, {:priv_dir, :elixir_cowboy_example, \"static/image\"}}\n    ]\n```\n\n``` elixir:lib/elixir_cowboy_example/browser_check_handler.ex\ndefmodule ElixirCowboyExample.BrowserCheckHandler do\n  def init(req, opts) do\n\n    # Header\u304b\u3089user-agent\u306e\u60c5\u5831\u3092\u629c\u304d\u51fa\u3059\n    user_agent_val = :cowboy_req.header(<<\"user-agent\">>, req)\n\n    headers = %{\"content-type\" => \"text/html\"}\n\n    # user-agent\u306e\u60c5\u5831\u304b\u3089\u3001\u3069\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\n    # body\u306bHTML\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    # \u4eca\u56de\u306fchrome\u3068safari\u306e\u307f\u5bfe\u5fdc\n    body = cond do\n      String.contains?(user_agent_val, \"Chrome\") \n        -> \"<html><head>Chrome Hello world!</head>\"\n      String.contains?(user_agent_val, \"Safari\") \n        -> \"<html><head>Safari Hello world!</head>\"\n      true \n        -> \"<html><head>Hello world!</head>\"\n    end\n\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n\n    {:ok, req, opts}\n  end\nend\n```\n\n\n# \u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a `iex -S mix` \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u3001`http://localhost:4000/browser`\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nChrome\u3068Safari\u3067\u5225\u306eHTML\u5185\u5bb9\u304c\u51fa\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\nChrome\u306e\u5834\u5408\n<img width=\"1176\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-18 14.39.16.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/3014/49158fc1-c310-ecbe-2055-c30ffb52a94b.png\">\n\nSafari\u306e\u5834\u5408\n<img width=\"1066\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-18 14.39.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/3014/991f5b80-95b0-1ce8-50da-84a9f62b8fe9.png\">\n\n# \u6700\u5f8c\u306b\n\n\u4eca\u56de\u306fHeader\u60c5\u5831\u304b\u3089\u30d6\u30e9\u30a6\u30b6\u3092\u5224\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5224\u5b9a\u65b9\u6cd5\u306fElixir\u3067\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u5c11\u3057\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/1.0/guide/)\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/2.0/guide/)\n"}