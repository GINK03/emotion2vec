{"tags": ["SpringBoot", "STS", "Java", "MongoDB", "spring-boot"], "context": " More than 1 year has passed since last update.SpringBoot\u3067MongoDB\u4f7f\u3048\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3061\u3083\u3044\u307e\u3059\n\u30b9\u30ad\u30fc\u30de\u30ec\u30b9\u3067\u8d85\u7c21\u5358\u306bDB\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u4f5c\u308c\u307e\u3059\u3002\n@ResponseBody\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\n\u3082\u306e\u306e\u6570\u6642\u9593\u3067DB\u64cd\u4f5c\u7cfb\u306eIF\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\u8a2d\u5b9a\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n1.AbstractMongoConfiguration\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n2.@Configuration\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u3084\u3063\u3066\u304a\u304f\u3068\u8d77\u52d5\u6642\u306b\u52dd\u624b\u306b\u3088\u307f\u3053\u3093\u3067\u63a5\u7d9a\u3059\u308b\u6e96\u5099\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n3.\u4eca\u56de\u306f\u3001@Value\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066property\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8a2d\u5b9a\u3092\u53d6\u5f97\u3057\u3066\u307e\u3059\u3002\n@Value(\"${spring.profiles.active}\")\n\u64cd\u4f5c\n\u64cd\u4f5c\u30af\u30e9\u30b9\nMongorepository\u3068\u304b\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u4f7f\u3044\u3084\u3059\u3044\u306e\u3067MongoOperation\u3092\u4f7f\u3044\u307e\u3059\nDAO\n1.\u4fdd\u5b58\u306fDAO\u306e\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u3066MondoOperation\u306b\u6e21\u3057\u3066save\u3059\u308b\u3060\u3051\nUser user = new User(username,passwd);\nthis.mongoOperation.save(user);\n\n2.\u691c\u7d22\u306f\u30af\u30a8\u30ea\u4f5c\u3063\u3066\u6295\u3052\u308b\u3060\u3051\nQuery searchUserQuery = new Query().skip(pos).limit(limit);\nSystem.out.println(searchUserQuery.toString());\nList<User> users = mongoOperation.find(searchUserQuery,User.class);\n        return users;\n3.@Service\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\n\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\u306a\u306e\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3057\u3057\u307e\u3059\u3002\n@Service\u3092\u4ed8\u3051\u306a\u3044\u3068@Controller\u3092\u3064\u3051\u305f\u30af\u30e9\u30b9\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u305d\u3053\u306f\u8981\u6ce8\u610f\uff01\n1.SpringMongoConfig\n\nSpringMongoConfig.java\n\n@Configuration\n@EnableMongoRepositories(\"demo.mongo.model\")\npublic class SpringMongoConfig extends AbstractMongoConfiguration {\n    @Value(\"${spring.profiles.active}\")\n    private String profileActive;\n\n    @Value(\"${spring.application.name}\")\n    private String proAppName;\n\n    @Value(\"${spring.data.mongodb.host}\")\n    private String mongoHost;\n\n    @Value(\"${spring.data.mongodb.port}\")\n    private String mongoPort;\n\n    @Value(\"${spring.data.mongodb.database}\")\n    private String mongoDB;\n\n    @Override\n    public MongoMappingContext mongoMappingContext()\n            throws ClassNotFoundException {\n        // TODO Auto-generated method stub\n        return super.mongoMappingContext();\n    }\n\n    @Override\n    @Bean\n    public Mongo mongo() throws Exception {\n        System.out.println(\"start \" + profileActive + \"environment, \" + proAppName + \"started\");\n        System.out.println(\"mongo host: \"+ mongoHost);\n        System.out.println(\"mongo db: \"+ mongoDB);\n        return new MongoClient(mongoHost + \":\" + mongoPort);\n    }\n\n    @Override\n    protected String getDatabaseName() {\n        // TODO Auto-generated method stub\n        return mongoDB;\n    }\n}\n\n\n2.User DAO\n\nUser.java\n@Getter\n@Setter\n@Document(collection = \"users\")\npublic class User {\n\n    @Id\n    private String id;\n\n    String username;\n\n    String password;\n\n    public User(String username, String password) {\n        super();\n        this.username = username;\n        this.password = password;\n    }\n\n\n    @Override\n    public String toString() {\n        return String.format(\n                \"User[id=%s, username='%s', password='%s']\",\n                id, username, password);\n    }\n    }\n\n\n3.Service DAO\n\nUserService.java\n\n@Service\npublic class UserService extends ServiceBase{\n\n\n    public UserService() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public String AddNewUser(String username,String passwd) throws Exception {\n        Query searchUserQuery = new Query(Criteria.where(\"username\").is(username));\n        Long lres = this.mongoOperation.count(searchUserQuery,User.class);\n        if(lres > 0){\n            throw new Exception(\"This user already exists\");\n        }\n\n        User user = new User(username,passwd);\n        this.mongoOperation.save(user);\n        return user.getId();\n    }\n\n    public boolean IsExists(String username,String passwd){\n        Query searchUserQuery = this.GetSaerchQuery(username, passwd);\n        Long lres = this.mongoOperation.count(searchUserQuery,User.class);\n        if(lres > 0){\n            return true;\n        }\n        return false;\n    }\n\n    public User GetUserInfo(String username,String passwd){\n        Query searchUserQuery = this.GetSaerchQuery(username, passwd);\n        User savedUser = mongoOperation.findOne(searchUserQuery, User.class);\n        return savedUser;\n    }\n\n    private Query GetSaerchQuery(String username,String passwd){\n        Query searchUserQuery = new Query(Criteria.where(\"username\").is(username).andOperator(Criteria.where(\"password\").is(passwd)));\n        System.out.println(searchUserQuery.toString());;\n        return searchUserQuery;\n\n    }\n\n    public List<User> FindAll(int pos,int limit){\n        Query searchUserQuery = new Query().skip(pos).limit(limit);\n        System.out.println(searchUserQuery.toString());\n\n        List<User> users = mongoOperation.find(searchUserQuery,User.class);\n        return users;\n\n    }\n}\n\n\n\nSpringBoot\u3067MongoDB\u4f7f\u3048\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3061\u3083\u3044\u307e\u3059\n\n\u30b9\u30ad\u30fc\u30de\u30ec\u30b9\u3067\u8d85\u7c21\u5358\u306bDB\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u4f5c\u308c\u307e\u3059\u3002\n@ResponseBody\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\n\u3082\u306e\u306e\u6570\u6642\u9593\u3067DB\u64cd\u4f5c\u7cfb\u306eIF\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n**\u8a2d\u5b9a**\n[\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9](https://github.com/MariMurotani/SpringDemo/blob/4_develop/src/main/java/demo/mongo/config/SpringMongoConfig.java\n)\n1.AbstractMongoConfiguration\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n2.@Configuration\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u3084\u3063\u3066\u304a\u304f\u3068\u8d77\u52d5\u6642\u306b\u52dd\u624b\u306b\u3088\u307f\u3053\u3093\u3067\u63a5\u7d9a\u3059\u308b\u6e96\u5099\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n3.\u4eca\u56de\u306f\u3001@Value\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066property\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8a2d\u5b9a\u3092\u53d6\u5f97\u3057\u3066\u307e\u3059\u3002\n`@Value(\"${spring.profiles.active}\")`\n\n**\u64cd\u4f5c**\n[\u64cd\u4f5c\u30af\u30e9\u30b9](https://github.com/MariMurotani/SpringDemo/blob/4_develop/src/main/java/demo/mongo/service/UserService.java)\nMongorepository\u3068\u304b\u3042\u308b\u3093\u3067\u3059\u304c\u3001\u4f7f\u3044\u3084\u3059\u3044\u306e\u3067MongoOperation\u3092\u4f7f\u3044\u307e\u3059\n[DAO](https://github.com/MariMurotani/SpringDemo/blob/4_develop/src/main/java/demo/mongo/model/User.java)\n1.\u4fdd\u5b58\u306fDAO\u306e\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u3066MondoOperation\u306b\u6e21\u3057\u3066save\u3059\u308b\u3060\u3051\n```User user = new User(username,passwd);\nthis.mongoOperation.save(user);\n```\n\n2.\u691c\u7d22\u306f\u30af\u30a8\u30ea\u4f5c\u3063\u3066\u6295\u3052\u308b\u3060\u3051\n`Query searchUserQuery = new Query().skip(pos).limit(limit);`\n`System.out.println(searchUserQuery.toString());`\n`List<User> users = mongoOperation.find(searchUserQuery,User.class);\n\t\treturn users;`\n\n3.@Service\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\n\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\u306a\u306e\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3057\u3057\u307e\u3059\u3002\n@Service\u3092\u4ed8\u3051\u306a\u3044\u3068@Controller\u3092\u3064\u3051\u305f\u30af\u30e9\u30b9\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u305d\u3053\u306f\u8981\u6ce8\u610f\uff01\n\n\n1.SpringMongoConfig\n\n```java:SpringMongoConfig.java\n\n@Configuration\n@EnableMongoRepositories(\"demo.mongo.model\")\npublic class SpringMongoConfig extends AbstractMongoConfiguration {\n\t@Value(\"${spring.profiles.active}\")\n\tprivate String profileActive;\n\n\t@Value(\"${spring.application.name}\")\n\tprivate String proAppName;\n\n\t@Value(\"${spring.data.mongodb.host}\")\n\tprivate String mongoHost;\n\t\n\t@Value(\"${spring.data.mongodb.port}\")\n\tprivate String mongoPort;\n\t\n\t@Value(\"${spring.data.mongodb.database}\")\n\tprivate String mongoDB;\n\t\n\t@Override\n\tpublic MongoMappingContext mongoMappingContext()\n\t\t\tthrows ClassNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\treturn super.mongoMappingContext();\n\t}\n\n\t@Override\n\t@Bean\n\tpublic Mongo mongo() throws Exception {\n\t\tSystem.out.println(\"start \" + profileActive + \"environment, \" + proAppName + \"started\");\n\t\tSystem.out.println(\"mongo host: \"+ mongoHost);\n\t\tSystem.out.println(\"mongo db: \"+ mongoDB);\n\t\treturn new MongoClient(mongoHost + \":\" + mongoPort);\n\t}\n\n\t@Override\n\tprotected String getDatabaseName() {\n\t\t// TODO Auto-generated method stub\n\t\treturn mongoDB;\n\t}\n}\n```\n\t\n2.User DAO\n\n```java:User.java\n@Getter\n@Setter\n@Document(collection = \"users\")\npublic class User {\n\n\t@Id\n\tprivate String id;\n\n\tString username;\n\n\tString password;\n\n\tpublic User(String username, String password) {\n\t\tsuper();\n\t\tthis.username = username;\n\t\tthis.password = password;\n\t}\n\n\t\n    @Override\n    public String toString() {\n        return String.format(\n                \"User[id=%s, username='%s', password='%s']\",\n                id, username, password);\n    }\n    }\n```\n\n3.Service DAO\n\n```java:UserService.java\n\n@Service\npublic class UserService extends ServiceBase{\n\n\n\tpublic UserService() {\n\t\tsuper();\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\tpublic String AddNewUser(String username,String passwd) throws Exception {\n\t\tQuery searchUserQuery = new Query(Criteria.where(\"username\").is(username));\n\t\tLong lres = this.mongoOperation.count(searchUserQuery,User.class);\n\t\tif(lres > 0){\n\t\t\tthrow new Exception(\"This user already exists\");\n\t\t}\n\n\t\tUser user = new User(username,passwd);\n\t\tthis.mongoOperation.save(user);\n\t\treturn user.getId();\n\t}\n\t\n\tpublic boolean IsExists(String username,String passwd){\n\t\tQuery searchUserQuery = this.GetSaerchQuery(username, passwd);\n\t\tLong lres = this.mongoOperation.count(searchUserQuery,User.class);\n\t\tif(lres > 0){\n\t\t\treturn true;\n\t\t}\n    \treturn false;\n    }\n    \n    public User GetUserInfo(String username,String passwd){\n\t\tQuery searchUserQuery = this.GetSaerchQuery(username, passwd);\n\t\tUser savedUser = mongoOperation.findOne(searchUserQuery, User.class);\n\t\treturn savedUser;\n    }\n    \n    private Query GetSaerchQuery(String username,String passwd){\n\t\tQuery searchUserQuery = new Query(Criteria.where(\"username\").is(username).andOperator(Criteria.where(\"password\").is(passwd)));\n\t\tSystem.out.println(searchUserQuery.toString());;\n\t\treturn searchUserQuery;\n    \t\n    }\n    \n    public List<User> FindAll(int pos,int limit){\n\t\tQuery searchUserQuery = new Query().skip(pos).limit(limit);\n\t\tSystem.out.println(searchUserQuery.toString());\n\t\t\n    \tList<User> users = mongoOperation.find(searchUserQuery,User.class);\n\t\treturn users;\n    \t\n    }\n}\n\n"}