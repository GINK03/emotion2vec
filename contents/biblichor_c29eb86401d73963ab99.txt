{"tags": ["Java", "spring-security3", "jersey2"], "context": " More than 1 year has passed since last update.Dropwizard\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u6c17\u5206\u304c\u304b\u308f\u308aJersey2\u306b\u3064\u3044\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nStackOverFlow\u3084\u6280\u8853\u7cfb\u30d6\u30ed\u30b0\u306bJersey\u3068SpringSecurity\u3092\u7d71\u5408\u3059\u308b\u8a18\u4e8b\u306f\u305f\u304f\u3055\u3093\u51fa\u3066\u308b\u3093\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u9055\u3044\u306e\u8a18\u4e8b\u304c\u591a\u304f\u3066\u6df7\u4e71\u3057\u305f\u306e\u3067\u305d\u306e\u3042\u305f\u308a\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n1. web.xml\u306e\u8a2d\u5b9a\u304c\u3001Jersey1\u7cfb\u3068Jersey2\u7cfb\u3067\u5927\u304d\u304f\u5909\u308f\u308b\n\u30cf\u30de\u308a\u5ea6\uff1a\u6885\n\u300cweb.xml\u4e0a\u3067ServletContainer\u3092\u8a18\u8ff0\u3059\u308b\u300d\u3068\u306e\u7d39\u4ecb\u304c\u591a\u3044\u3067\u3059\u304c\u3001Jersey2\u3067\u306f\u52d5\u304b\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\nJersey2\u3067\u306f\u3053\u3046\u66f8\u304d\u307e\u3059\u3002\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>\n      classpath:/applicationContext.xml\n    </param-value>\n  </context-param>\n\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <servlet>\n    <servlet-name>RestService</servlet-name>\n    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\n    <init-param>\n      <param-name>jersey.config.server.provider.packages</param-name>\n      <param-value>io.flabo.hello</param-value>\n    </init-param>\n    <init-param>\n      <param-name>jersey.config.server.provider.classnames</param-name>\n      <param-value>org.glassfish.jersey.media.multipart.MultiPartFeature</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>RestService</servlet-name>\n    <url-pattern>/api/v1.0/*</url-pattern>\n  </servlet-mapping>\n\n  <filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <url-pattern>/api/*</url-pattern>\n    <dispatcher>REQUEST</dispatcher>\n    <dispatcher>ERROR</dispatcher>\n  </filter-mapping>\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f/api/v1.0/\u4ee5\u964d\u306bREST\u306aResource\u7fa4\u3092\u7528\u610f\u3059\u308b\u4e00\u65b9\u3001/api/\u4ee5\u4e0b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u306fSpringSecurity\u306e\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u5236\u9650\u3092\u8a2d\u3051\u308b\u8a2d\u5b9a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\n\nSpring Security for a REST API\n\nbiblichor / angular-rest-springsecurity - XML\u306e\u4f8b\n\n\n2. XML\u4e0a\u3067\u8a2d\u5b9a\u3057\u305fintercept-url\u306e\u8a2d\u5b9a\u3092JerseyTest\u3059\u308b\u306e\u304c\u5927\u5909\n\u30cf\u30de\u308a\u5ea6\uff1a\u7af9\napplicationContext.xml\u306e\u8a2d\u5b9a\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n<security:http\n    realm=\"Protected API\"\n    use-expressions=\"true\"\n    auto-config=\"false\"\n    create-session=\"stateless\"\n    entry-point-ref=\"unauthorizedEntryPoint\"\n    authentication-manager-ref=\"authenticationManager\">\n  <security:custom-filter ref=\"userAuthenticationFilter\" position=\"FORM_LOGIN_FILTER\" />\n  <security:intercept-url pattern=\"/secure/super/**\" access=\"ROLE_WE_DONT_HAVE\"/>\n  <security:intercept-url pattern=\"/secure/**\" access=\"ROLE_SUPERVISOR,ROLE_TELLER\"/></security:http>\n\n\uff08\u4ee5\u4e0b\u7565\uff09\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u969b\u306b\u3001/secure/super/\u4ee5\u4e0b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30bb\u30b9\u5236\u9650\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u5834\u5408\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n@Test\npublic void getSecureSuper() throws Exception {\n    Response response = target(\"/secure/super/\").request().get();\n    assertEquals(Response.Status.OK, response.getStatus());\n}\n\n\u3057\u304b\u3057\u3053\u308c\u3060\u3068\u3001web.xml\u5074\u3067url-pattern\u3092\u300c/api\u300d\u306a\u3069\u3068\u6307\u5b9a\u3057\u305f\u3068\u304d\u3001JerseyTest2\u5074\u3067\u306f/secure/super\u3092\u898b\u306b\u884c\u304f\u306e\u306b\u5bfe\u3057\u3001SpringSecurity\u5074\u306e\u8a2d\u5b9a\u306f/api/v1.0/secure/super\u306b\u5bfe\u3057\u3066\u5236\u9650\u3092\u304b\u3051\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u306f\u3001GrizzlyTestWebContainerFactory\u3092\u5229\u7528\u3057\u3066contextPath\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067JerseyTest\u306e\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n@Override\nprotected TestContainerFactory getTestContainerFactory() {\n    return new GrizzlyWebTestContainerFactory();\n}\n\n@Override\nprotected DeploymentContext configureDeployment() {\n    return ServletDeploymentContext.builder(configure()).servletPath(\"rest/v1.0\").build();\n}\n\nJersey\u306e\u30d0\u30fc\u30b8\u30e7\u30f32.8\u304b\u3089\u306f\u3001ServletDeploymentContext\u306e\u8a2d\u5b9a\u304c\u53ef\u80fd\u3068\u306a\u3063\u3066\u304a\u308a\u3001GrizzlyWebTestContainerFactory\u3092\u5229\u7528\u3059\u308c\u3070path\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u308c\u3067\u3082\u3001JerseyTest\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u3001GrizzlyWebTestContainerFactory\u3067\u306a\u304fInmemoryTestContainerFactory\u3092\u30e1\u30a4\u30f3\u3067\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u3001\u500b\u4eba\u7684\u306b\u306f\u305d\u3082\u305d\u3082SpringSecurity\u306eintercept-url\u306epattern\u8a2d\u5b9a\u306fXML\u4e0a\u306b\u66f8\u304f\u306e\u3067\u306a\u304f\u3001Java\u306e\u30af\u30e9\u30b9\u4e0a\u306bannotation\u3092\u4ed8\u4e0e\u3059\u308b\u307b\u3046\u304c\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5f62\u3067\u3059\u3002\n@PreAuthorize(\"hasRole('ROLE_WE_DONT_HAVE')\")\n@GET\n@Path(\"/secure/super/user/list\")\n@Produces(MediaType.APPLICATION_JSON)\npublic List<User> list() throws JsonGenerationException, JsonMappingException, IOException\n{\n    return getUserList();\n}\n\n\u3053\u308c\u3067\u3042\u308c\u3070web.xml\u306epattern\u306b\u5236\u7d04\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001SpringSecurity\u306e\u30a2\u30af\u30bb\u30b9\u5236\u9650\u306e\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u53c2\u8003\n\njersey - Filters in JerseyTest 2.x - Stack Overflow\nResolved JERSEY-2259: major test framework revamp.\n\n\n3. AccessControl\u306f\u65e2\u5b58\u306eExpression\u3088\u308a\u3082\u81ea\u4f5c\u306e\u307b\u3046\u304c\u697d\n\u30cf\u30de\u308a\u5ea6\uff1a\u677e\nSpringSecurity\u306b\u306f\u4e0b\u8a18\u306e\u4fbf\u5229\u306aExpression\u304c\u3042\u308a\u3001\u3046\u307e\u304f\u5f53\u3066\u306f\u3081\u3089\u308c\u308c\u3070\u52b9\u7387\u826f\u304f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\u7279\u306brole\u306b\u3064\u3044\u3066\u306f\u81ea\u7531\u306b\u6a29\u9650\u8ffd\u52a0\u3084\u6a29\u9650\u306e\u9806\u4f4d\u5909\u66f4\u304c\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\nhasRole([role])\nhasAnyRole([role1,role2])\nprincipal\nauthentication\npermitAll\ndenyAll\nisAnonymous()\nisRememberMe()\nisAuthenticated()\nisFullyAuthenticated()\n\n\u3057\u304b\u3057\u65e2\u5b58\u306e\u904b\u7528\u30eb\u30fc\u30eb\u304c\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u5834\u5408\u306b\u306f\u4e0a\u8a18\u306b\u30e0\u30ea\u30e4\u30ea\u5f53\u3066\u306f\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u30e0\u30ea\u304c\u3042\u308b\u5834\u5408\u3082\u591a\u3044\u306e\u3067\u3001Evaluator\u3092\u81ea\u4f5c\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306b\u3042\u3068\u304b\u3089\u6c17\u4ed8\u3044\u3066\u66f8\u304d\u306a\u304a\u3059\u7fbd\u76ee\u306b\u306a\u308a\u307e\u3057\u305f\u2026\u3002\n\n\u4f8b\uff1aURL\u4e0a\u306eID\u3068\u306e\u9069\u5408\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\nAPI\u306eURL\uff1a/api/v1.0/user/1/item/2\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305fAPI\u306eURL\u4e0a\u306euser\u306eId\u304c\u30a2\u30af\u30bb\u30b9\u3057\u305fuser\u306eId\u3068\u9069\u5408\u3057\u3066\u3044\u308b\u304b\n\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305fAPI\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95b2\u89a7\u6a29\u9650\u304c\u3042\u308b\u304b\n\n\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\u5834\u5408\u3002\n\nResource\u5074\u306eclass\n\n@PreAuthorize(\"hasPermission(#userId, 'user', 'OWNER') and hasPermission(#accountId, 'item', 'READ')\")\n@Path(\"/user/{userId}/item/{itemId}\")\n@GET\n@Produces(MediaType.APPLICATION_JSON)\npublic Item get(\n        @PathParam(\"userId\") int userId,\n        @PathParam(\"ItemId\") int itemId\n        ) throws JsonGenerationException, JsonMappingException, IOException\n{\n    return getItem(itemId);\n}\n\n\n\u81ea\u4f5cEvaluator\n\n@Override\npublic boolean hasPermission(Authentication authentication,\n        Serializable targetId, String targetType, Object permission) {\n    boolean result = false;\n    Object principal = authentication.getPrincipal();\n    if (principal instanceof String && StringUtils.equals((String) authentication.getPrincipal(), \"anonymousUser\")) return false;\n    User user = (User) authentication.getPrincipal();\n    switch (targetType) {\n    case \"user\":\n        switch ((String) permission) {\n        case \"owner\":\n            result = (int)targetId == user.getNum(\"getId\");\n            break;\n        }\n        break;\n    case \"item\":\n        switch ((String) permission) {\n            case \"READ\":\n                (targetId != null && user.getListReadableItem().contains((int)targetId));\n                break;\n            default:\n                (targetId != null && user.getListWritableItem().contains((int)targetId));\n                break;\n        }\n        break;\n    }\n    logger.debug(\"targetType: \" + targetType + \", targetId: \" + targetId + \", permission: \" + permission + \", result: \" + result);\n    return result;\n}\n\n\nSpringSecurity\u306eXML\u306b\u4e0b\u8a18\u3092\u8ffd\u52a0\n\n<security:global-method-security pre-post-annotations=\"enabled\">\n  <security:expression-handler ref=\"expressionHandler\"/>\n</security:global-method-security>\n\n<bean id=\"expressionHandler\"\n    class=\"org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler\">\n      <property name=\"permissionEvaluator\" ref=\"customPermissionEvaluator\"/>\n</bean>\n\n<bean class=\"(\u81ea\u4f5cEvaluator\u3092\u6307\u5b9a)\" id=\"customPermissionEvaluator\"/>\n\n\n\u53c2\u8003\n\nWriting Your Spring Security Expression Language Annotation | Javalobby\n\n\n\u307e\u3068\u3081\nJersey2\u3068SpringSecurity\u3092\u697d\u3057\u304f\u7d71\u5408\u3057\u3066\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u9ad8\u3044REST\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u30fc\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\nDropwizard\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u6c17\u5206\u304c\u304b\u308f\u308aJersey2\u306b\u3064\u3044\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nStackOverFlow\u3084\u6280\u8853\u7cfb\u30d6\u30ed\u30b0\u306bJersey\u3068SpringSecurity\u3092\u7d71\u5408\u3059\u308b\u8a18\u4e8b\u306f\u305f\u304f\u3055\u3093\u51fa\u3066\u308b\u3093\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u9055\u3044\u306e\u8a18\u4e8b\u304c\u591a\u304f\u3066\u6df7\u4e71\u3057\u305f\u306e\u3067\u305d\u306e\u3042\u305f\u308a\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n## 1. web.xml\u306e\u8a2d\u5b9a\u304c\u3001Jersey1\u7cfb\u3068Jersey2\u7cfb\u3067\u5927\u304d\u304f\u5909\u308f\u308b\n\n\u30cf\u30de\u308a\u5ea6\uff1a\u6885\n\n\u300cweb.xml\u4e0a\u3067ServletContainer\u3092\u8a18\u8ff0\u3059\u308b\u300d\u3068\u306e\u7d39\u4ecb\u304c\u591a\u3044\u3067\u3059\u304c\u3001Jersey2\u3067\u306f\u52d5\u304b\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\nJersey2\u3067\u306f\u3053\u3046\u66f8\u304d\u307e\u3059\u3002\n\n```xml\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>\n      classpath:/applicationContext.xml\n    </param-value>\n  </context-param>\n\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <servlet>\n    <servlet-name>RestService</servlet-name>\n    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>\n    <init-param>\n      <param-name>jersey.config.server.provider.packages</param-name>\n      <param-value>io.flabo.hello</param-value>\n    </init-param>\n    <init-param>\n      <param-name>jersey.config.server.provider.classnames</param-name>\n      <param-value>org.glassfish.jersey.media.multipart.MultiPartFeature</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>RestService</servlet-name>\n    <url-pattern>/api/v1.0/*</url-pattern>\n  </servlet-mapping>\n\n  <filter>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>springSecurityFilterChain</filter-name>\n    <url-pattern>/api/*</url-pattern>\n    <dispatcher>REQUEST</dispatcher>\n    <dispatcher>ERROR</dispatcher>\n  </filter-mapping>\n```\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f/api/v1.0/\u4ee5\u964d\u306bREST\u306aResource\u7fa4\u3092\u7528\u610f\u3059\u308b\u4e00\u65b9\u3001/api/\u4ee5\u4e0b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u306fSpringSecurity\u306e\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u5236\u9650\u3092\u8a2d\u3051\u308b\u8a2d\u5b9a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u53c2\u8003\n* [Spring Security for a REST API](http://www.baeldung.com/2011/10/31/securing-a-restful-web-service-with-spring-security-3-1-part-3/)\n* [biblichor / angular-rest-springsecurity](https://github.com/biblichor/angular-rest-springsecurity/blob/master/src/main/webapp/WEB-INF/web.xml) - XML\u306e\u4f8b\n\n## 2. XML\u4e0a\u3067\u8a2d\u5b9a\u3057\u305fintercept-url\u306e\u8a2d\u5b9a\u3092JerseyTest\u3059\u308b\u306e\u304c\u5927\u5909\n\n\u30cf\u30de\u308a\u5ea6\uff1a\u7af9\n\napplicationContext.xml\u306e\u8a2d\u5b9a\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\n<security:http\n    realm=\"Protected API\"\n    use-expressions=\"true\"\n    auto-config=\"false\"\n    create-session=\"stateless\"\n    entry-point-ref=\"unauthorizedEntryPoint\"\n    authentication-manager-ref=\"authenticationManager\">\n  <security:custom-filter ref=\"userAuthenticationFilter\" position=\"FORM_LOGIN_FILTER\" />\n  <security:intercept-url pattern=\"/secure/super/**\" access=\"ROLE_WE_DONT_HAVE\"/>\n  <security:intercept-url pattern=\"/secure/**\" access=\"ROLE_SUPERVISOR,ROLE_TELLER\"/></security:http>\n\n\uff08\u4ee5\u4e0b\u7565\uff09\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u969b\u306b\u3001/secure/super/\u4ee5\u4e0b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30bb\u30b9\u5236\u9650\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u5834\u5408\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\n@Test\npublic void getSecureSuper() throws Exception {\n\tResponse response = target(\"/secure/super/\").request().get();\n\tassertEquals(Response.Status.OK, response.getStatus());\n}\n```\n\n\u3057\u304b\u3057\u3053\u308c\u3060\u3068\u3001web.xml\u5074\u3067url-pattern\u3092\u300c/api\u300d\u306a\u3069\u3068\u6307\u5b9a\u3057\u305f\u3068\u304d\u3001JerseyTest2\u5074\u3067\u306f/secure/super\u3092\u898b\u306b\u884c\u304f\u306e\u306b\u5bfe\u3057\u3001SpringSecurity\u5074\u306e\u8a2d\u5b9a\u306f/api/v1.0/secure/super\u306b\u5bfe\u3057\u3066\u5236\u9650\u3092\u304b\u3051\u308b\u306e\u3067\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u306f\u3001GrizzlyTestWebContainerFactory\u3092\u5229\u7528\u3057\u3066contextPath\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067JerseyTest\u306e\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\n```java\n@Override\nprotected TestContainerFactory getTestContainerFactory() {\n\treturn new GrizzlyWebTestContainerFactory();\n}\n\n@Override\nprotected DeploymentContext configureDeployment() {\n\treturn ServletDeploymentContext.builder(configure()).servletPath(\"rest/v1.0\").build();\n}\n```\n\nJersey\u306e\u30d0\u30fc\u30b8\u30e7\u30f32.8\u304b\u3089\u306f\u3001ServletDeploymentContext\u306e\u8a2d\u5b9a\u304c\u53ef\u80fd\u3068\u306a\u3063\u3066\u304a\u308a\u3001GrizzlyWebTestContainerFactory\u3092\u5229\u7528\u3059\u308c\u3070path\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u308c\u3067\u3082\u3001JerseyTest\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u3001GrizzlyWebTestContainerFactory\u3067\u306a\u304fInmemoryTestContainerFactory\u3092\u30e1\u30a4\u30f3\u3067\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u3001\u500b\u4eba\u7684\u306b\u306f\u305d\u3082\u305d\u3082SpringSecurity\u306eintercept-url\u306epattern\u8a2d\u5b9a\u306fXML\u4e0a\u306b\u66f8\u304f\u306e\u3067\u306a\u304f\u3001Java\u306e\u30af\u30e9\u30b9\u4e0a\u306bannotation\u3092\u4ed8\u4e0e\u3059\u308b\u307b\u3046\u304c\u4fbf\u5229\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5f62\u3067\u3059\u3002\n\n```java\n@PreAuthorize(\"hasRole('ROLE_WE_DONT_HAVE')\")\n@GET\n@Path(\"/secure/super/user/list\")\n@Produces(MediaType.APPLICATION_JSON)\npublic List<User> list() throws JsonGenerationException, JsonMappingException, IOException\n{\n\treturn getUserList();\n}\n```\n\n\u3053\u308c\u3067\u3042\u308c\u3070web.xml\u306epattern\u306b\u5236\u7d04\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001SpringSecurity\u306e\u30a2\u30af\u30bb\u30b9\u5236\u9650\u306e\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u3059\u3002\n\n### \u53c2\u8003\n* [jersey - Filters in JerseyTest 2.x - Stack Overflow](http://stackoverflow.com/questions/20744996/filters-in-jerseytest-2-x)\n* [Resolved JERSEY-2259: major test framework revamp.](https://github.com/jersey/jersey/commit/1b9b0772e15fe2378c1b68705dd6146f75e5d6b3)\n\n\n## 3. AccessControl\u306f\u65e2\u5b58\u306eExpression\u3088\u308a\u3082\u81ea\u4f5c\u306e\u307b\u3046\u304c\u697d\n\n\u30cf\u30de\u308a\u5ea6\uff1a\u677e\n\nSpringSecurity\u306b\u306f\u4e0b\u8a18\u306e\u4fbf\u5229\u306aExpression\u304c\u3042\u308a\u3001\u3046\u307e\u304f\u5f53\u3066\u306f\u3081\u3089\u308c\u308c\u3070\u52b9\u7387\u826f\u304f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\u7279\u306brole\u306b\u3064\u3044\u3066\u306f\u81ea\u7531\u306b\u6a29\u9650\u8ffd\u52a0\u3084\u6a29\u9650\u306e\u9806\u4f4d\u5909\u66f4\u304c\u3067\u304d\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\n* hasRole([role])\n* hasAnyRole([role1,role2])\n* principal\n* authentication\n* permitAll\n* denyAll\n* isAnonymous()\n* isRememberMe()\n* isAuthenticated()\n* isFullyAuthenticated()\n\n\u3057\u304b\u3057\u65e2\u5b58\u306e\u904b\u7528\u30eb\u30fc\u30eb\u304c\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u5834\u5408\u306b\u306f\u4e0a\u8a18\u306b\u30e0\u30ea\u30e4\u30ea\u5f53\u3066\u306f\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u30e0\u30ea\u304c\u3042\u308b\u5834\u5408\u3082\u591a\u3044\u306e\u3067\u3001Evaluator\u3092\u81ea\u4f5c\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\u3053\u308c\u306b\u3042\u3068\u304b\u3089\u6c17\u4ed8\u3044\u3066\u66f8\u304d\u306a\u304a\u3059\u7fbd\u76ee\u306b\u306a\u308a\u307e\u3057\u305f\u2026\u3002\n\n### \u4f8b\uff1aURL\u4e0a\u306eID\u3068\u306e\u9069\u5408\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\n\nAPI\u306eURL\uff1a/api/v1.0/user/1/item/2\n\n* \u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305fAPI\u306eURL\u4e0a\u306euser\u306eId\u304c\u30a2\u30af\u30bb\u30b9\u3057\u305fuser\u306eId\u3068\u9069\u5408\u3057\u3066\u3044\u308b\u304b\n* \u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305fAPI\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95b2\u89a7\u6a29\u9650\u304c\u3042\u308b\u304b\n\n\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044\u5834\u5408\u3002\n\n* Resource\u5074\u306eclass\n\n```java\n@PreAuthorize(\"hasPermission(#userId, 'user', 'OWNER') and hasPermission(#accountId, 'item', 'READ')\")\n@Path(\"/user/{userId}/item/{itemId}\")\n@GET\n@Produces(MediaType.APPLICATION_JSON)\npublic Item get(\n\t\t@PathParam(\"userId\") int userId,\n\t\t@PathParam(\"ItemId\") int itemId\n\t\t) throws JsonGenerationException, JsonMappingException, IOException\n{\n\treturn getItem(itemId);\n}\n```\n\n* \u81ea\u4f5cEvaluator\n\n```java\n@Override\npublic boolean hasPermission(Authentication authentication,\n\t\tSerializable targetId, String targetType, Object permission) {\n\tboolean result = false;\n\tObject principal = authentication.getPrincipal();\n\tif (principal instanceof String && StringUtils.equals((String) authentication.getPrincipal(), \"anonymousUser\")) return false;\n\tUser user = (User) authentication.getPrincipal();\n\tswitch (targetType) {\n\tcase \"user\":\n\t\tswitch ((String) permission) {\n\t\tcase \"owner\":\n\t\t\tresult = (int)targetId == user.getNum(\"getId\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase \"item\":\n\t\tswitch ((String) permission) {\n\t\t\tcase \"READ\":\n\t\t\t\t(targetId != null && user.getListReadableItem().contains((int)targetId));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t(targetId != null && user.getListWritableItem().contains((int)targetId));\n\t\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\t}\n\tlogger.debug(\"targetType: \" + targetType + \", targetId: \" + targetId + \", permission: \" + permission + \", result: \" + result);\n\treturn result;\n}\n```\n\n* SpringSecurity\u306eXML\u306b\u4e0b\u8a18\u3092\u8ffd\u52a0\n\n```xml\n<security:global-method-security pre-post-annotations=\"enabled\">\n  <security:expression-handler ref=\"expressionHandler\"/>\n</security:global-method-security>\n\n<bean id=\"expressionHandler\"\n    class=\"org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler\">\n      <property name=\"permissionEvaluator\" ref=\"customPermissionEvaluator\"/>\n</bean>\n\n<bean class=\"(\u81ea\u4f5cEvaluator\u3092\u6307\u5b9a)\" id=\"customPermissionEvaluator\"/>\n```\n\n### \u53c2\u8003\n* [Writing Your Spring Security Expression Language Annotation | Javalobby](http://java.dzone.com/articles/writing-your-spring-security)\n\n## \u307e\u3068\u3081\n\nJersey2\u3068SpringSecurity\u3092\u697d\u3057\u304f\u7d71\u5408\u3057\u3066\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u9ad8\u3044REST\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u30fc\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n"}