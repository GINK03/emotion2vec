{"context": " More than 1 year has passed since last update.Emacs\u4e0a\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u65b9\u6cd5\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001Emacs Lisp\u306e\u95a2\u6570\u304b\u3089\u4f7f\u3046\u3053\u3068\u306b\u7126\u70b9\u3092\u3042\u3066\u307e\u3059\u3002\n\n\u57fa\u672c\u30d1\u30bf\u30fc\u30f3\n\n\u4e00\u756a\u5358\u7d14\u306a\u4f7f\u3044\u65b9\npwd\u3092\u5b9f\u884c\u3057\u3066\u7d50\u679c\u3092\u6587\u5b57\u5217\u3067\u5f97\u307e\u3059\u3002\n(defun my-pwd ()\n  (interactive)\n  (shell-command-to-string \"pwd\"))\n;; (my-pwd) ; => \"/Users/username\\n\"\n\nM-x my-pwd\u3082\u3057\u304f\u306fM-: (my-pwd)\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n(pwd: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059\u30b3\u30de\u30f3\u30c9)\n\n\u975e\u540c\u671f\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\nMac OSX\u306esay\u30b3\u30de\u30f3\u30c9\u3067Alex\u306b\u558b\u3063\u3066\u3082\u3089\u3044\u307e\u3059\u3002shell-command-to-string\u3067\u540c\u671f\u5b9f\u884c\u3057\u305f\u5834\u5408\u306fAlex\u304c\u558b\u3063\u3066\u3044\u308b\u9593\u306bEmacs\u3092\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u975e\u540c\u671f\u5b9f\u884c\u306easync-shell-command\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u4e2d\u3082Emacs\u3092\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n(defun my-say-hello ()\n  (interactive)\n  (async-shell-command \"say -v Alex Hello! I am Emacs, at your service.\"))\n\n\n\u9078\u629e\u7bc4\u56f2\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\u9078\u629e\u7bc4\u56f2\u306ea\u3092b\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002perl\u30b3\u30de\u30f3\u30c9\u306e\u6b63\u898f\u8868\u73fe\u3067\u7f6e\u63db\n(defun my-replace-a-b ()\n  (interactive)\n  (when (region-active-p) ;; \u9078\u629e\u7bc4\u56f2\u304c\u3042\u308b\u3068\u304d\n    (shell-command-on-region (region-beginning) (region-end) \"perl -0 -p -w -e \\'s/a/b/g\\'\" nil t)))\n\n\nDired\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb/\u30d5\u30a9\u30eb\u30c0\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3082\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002\n(defun my-dired-display-file-info ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (dired-do-shell-command \"file *\" nil files)))\n\n\n\u305d\u306e\u4ed6\n\n\u30b3\u30de\u30f3\u30c9\u306e\u30c1\u30a7\u30c3\u30af\n\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u3066\u4f7f\u7528\u53ef\u80fd\u306a\u3089\u30b3\u30de\u30f3\u30c9\u306e\u30d1\u30b9\u304c\u8fd4\u308a\u307e\u3059\u3002\n(executable-find \"cmigemo\") ; => \"/usr/local/bin/cmigemo\"\n\n\nEmacs\u7528\u306b\u30b3\u30de\u30f3\u30c9\u3078\u306e\u30d1\u30b9\u3092\u901a\u3059\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\n PATH \u306e\u8a2d\u5b9a\n\n\u5b9f\u8df5\u30b5\u30f3\u30d7\u30eb\nMac OS X\u5411\u3051\u306e\u30b3\u30de\u30f3\u30c9\u304c\u591a\u3081\u3067\u3059\u3002\n\n\u9078\u629e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u305f\u30bf\u30b0\u3067\u56f2\u3080\n\u9078\u629e\u7bc4\u56f2\u3092\u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3057\u305f\u30bf\u30b0\u540d\u3067\u56f2\u307f\u307e\u3059\u3002\n(defun my-wrap-lines-with-html-tag (tag)\n  (interactive \"sTag: \")\n  (if (region-active-p)\n      (shell-command-on-region\n       (region-beginning) (region-end)\n       (concat \"perl -0 -p -w -e \\'\"\n               \"s/^([^\\\\S\\\\r\\\\n]*)(\\\\S.*?)[^\\\\S\\\\r\\\\n]*$/$1<\"\n               tag \">$2<\\\\/\" tag \">/gm\\'\")\n       nil t)))\n\n\n\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u7279\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\n\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e.DS_Store\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n(defun my-delete-DS_Store-under-current-directory-recursively ()\n  (interactive)\n  (shell-command \"find . -name '*.DS_Store' -type f -delete\")\n  ;; Dired\u3092\u958b\u3044\u3066\u3044\u305f\u3089\u30d0\u30c3\u30d5\u30a1\u3092\u66f4\u65b0\n  (if (eq major-mode 'dired-mode)\n      (revert-buffer)))\n\n\nDired\u304b\u3089sqlite\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u95b2\u89a7\n(defun my-dired-sqlite ()\n  (interactive)\n  (let ((file (dired-get-filename))\n        (buffer (format \"SQLite-%s\" (random 100000))))\n    (async-shell-command (format \"sqlite3 '%s'\" file) buffer)\n    (switch-to-buffer buffer)\n    (insert \".header on\")\n    (execute-kbd-macro (kbd \"RET\")) ;; return\u30ad\u30fc\u5b9f\u884c\n    (insert \".mode column\")\n    (execute-kbd-macro (kbd \"RET\"))\n    (insert \".tables\")\n    (execute-kbd-macro (kbd \"RET\"))))\n\n\nDired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7279\u6b8a\u5c5e\u6027\u3092\u9664\u53bb\n(defun my-dired-delete-mac-atmark-permission ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            ;; \u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u5b9f\u884c\n            (dired-do-shell-command \"xattr -c *\" nil (list file)))\n          files)\n    (dired-unmark-all-marks) ;; \u30de\u30fc\u30af\u89e3\u9664\n    (revert-buffer) ;; \u30d0\u30c3\u30d5\u30a1\u66f4\u65b0\n    ))\n\n\nDired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5225\u30a2\u30d7\u30ea\u306b\u9001\u308b\nImage Optim\u30a2\u30d7\u30ea\u3078\u9001\u308a\u3001\u753b\u50cf\u306e\u5bb9\u91cf\u3092\u843d\u3068\u3057\u307e\u3059\u3002\n(defun my-dired-image-optim ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            (cond ((string-match \".*\\\\.\\\\(png\\\\|jpe?g\\\\|gif\\\\)$\" file)\n                   ;; \u6307\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\n                   (dired-do-shell-command \"open -a ImageOptim.app *\" nil (list file)))))\n          files)\n    (dired-unmark-all-marks)\n    (revert-buffer)))\n\n\nDired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u5024\u3092\u4f7f\u3063\u3066\u51e6\u7406\n\u5b9f\u884c\u5f8c\u306b\u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u5024\u3092\u5165\u529b\u3057\u307e\u3059\u3002\u305d\u306e\u5024\u3067\u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\u3092\u884c\u3044\u307e\u3059\u3002\n(sips: \u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b Mac OS X \u6a19\u6e96\u30b3\u30de\u30f3\u30c9)\n(defun my-dired-image-width-resize-with-sips (width)\n  (interactive \"sWidth: \")\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            (cond ((string-match \".*\\\\.\\\\(png\\\\|jpe?g\\\\|gif\\\\)$\" file)\n                   (dired-do-shell-command\n                    (concat \"sips --resampleWidth \" width \" *\")\n                    nil (list file)))))\n          files)\n    (dired-unmark-all-marks)\n    (revert-buffer)))\n\n\n\u9078\u629e\u7bc4\u56f2\u3092\u4efb\u610f\u306e\u6b63\u898f\u8868\u73fe\u3067\u7f6e\u63db\n\u79c1\u306e\u304a\u6c17\u306b\u5165\u308a\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\nM-x my-perl-replace-command\u306e\u3042\u3068\u306b\u4f8b\u3048\u3070s/[\\n\\r]//g\u3068\u3059\u308b\u3068\u3001\u9078\u629e\u7bc4\u56f2\u306e\u6539\u884c\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u4ed6\u306b\u3088\u304f\u4f7f\u3046\u306e\u304c\u3001s/\\t/  /g\u3067\u30bf\u30d6\u6587\u5b57\u3092\u7a7a\u767d\u6587\u5b572\u3064\u306b\u7f6e\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u6a19\u6e96\u306e\u5909\u63db\u95a2\u6570\u3088\u308a\u9ad8\u901f\u3067\u3059\u3002\n;; \u5c65\u6b74\u7528\n(defvar my-perl-replace-history nil\n  \"History for the `my-perl-replace-command'.\")\n(defun my-perl-replace-command (command)\n  \"Utilize Perl regular expression to replace string in the current buffer.\"\n  (interactive (list (read-shell-command \"s[perl regexp] : \"\n                                         \"\"\n                                         'my-perl-replace-history)))\n  (when (string-match \"'\" command)\n    (setq command (replace-regexp-in-string \"'\" \"\\\\\\\\x27\" command)))\n  (if (region-active-p)\n      (shell-command-on-region\n       (region-beginning) (region-end) (concat \"perl -0 -p -w -e \\'\" command \"\\'\") nil t)\n    (let ((po (point))\n          (win (window-start)))\n      (mark-whole-buffer)\n      (shell-command-on-region\n       (region-beginning) (region-end)\n       (concat \"perl -0 -p -w -e \\'\" command \"\\'\") nil t)\n      (goto-char po)\n      (set-window-start (selected-window) win))))\n\nEmacs\u4e0a\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u65b9\u6cd5\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001Emacs Lisp\u306e\u95a2\u6570\u304b\u3089\u4f7f\u3046\u3053\u3068\u306b\u7126\u70b9\u3092\u3042\u3066\u307e\u3059\u3002\n\n\n# \u57fa\u672c\u30d1\u30bf\u30fc\u30f3\n\n## \u4e00\u756a\u5358\u7d14\u306a\u4f7f\u3044\u65b9\n`pwd`\u3092\u5b9f\u884c\u3057\u3066\u7d50\u679c\u3092\u6587\u5b57\u5217\u3067\u5f97\u307e\u3059\u3002\n\n```el\n(defun my-pwd ()\n  (interactive)\n  (shell-command-to-string \"pwd\"))\n;; (my-pwd) ; => \"/Users/username\\n\"\n```\n\n`M-x my-pwd`\u3082\u3057\u304f\u306f`M-: (my-pwd)`\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n(`pwd`: \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059\u30b3\u30de\u30f3\u30c9)\n\n\n\n## \u975e\u540c\u671f\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\nMac OSX\u306esay\u30b3\u30de\u30f3\u30c9\u3067Alex\u306b\u558b\u3063\u3066\u3082\u3089\u3044\u307e\u3059\u3002`shell-command-to-string`\u3067\u540c\u671f\u5b9f\u884c\u3057\u305f\u5834\u5408\u306fAlex\u304c\u558b\u3063\u3066\u3044\u308b\u9593\u306bEmacs\u3092\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u975e\u540c\u671f\u5b9f\u884c\u306e`async-shell-command`\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u4e2d\u3082Emacs\u3092\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```el\n(defun my-say-hello ()\n  (interactive)\n  (async-shell-command \"say -v Alex Hello! I am Emacs, at your service.\"))\n```\n\n\n\n## \u9078\u629e\u7bc4\u56f2\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\n\u9078\u629e\u7bc4\u56f2\u306ea\u3092b\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002perl\u30b3\u30de\u30f3\u30c9\u306e\u6b63\u898f\u8868\u73fe\u3067\u7f6e\u63db\n\n```el\n(defun my-replace-a-b ()\n  (interactive)\n  (when (region-active-p) ;; \u9078\u629e\u7bc4\u56f2\u304c\u3042\u308b\u3068\u304d\n    (shell-command-on-region (region-beginning) (region-end) \"perl -0 -p -w -e \\'s/a/b/g\\'\" nil t)))\n```\n\n\n\n## Dired\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb/\u30d5\u30a9\u30eb\u30c0\u306b\u5bfe\u3057\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\n\u30ab\u30fc\u30bd\u30eb\u4f4d\u7f6e\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3082\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002\n\n```el\n(defun my-dired-display-file-info ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (dired-do-shell-command \"file *\" nil files)))\n```\n\n\n## \u305d\u306e\u4ed6\n\n### \u30b3\u30de\u30f3\u30c9\u306e\u30c1\u30a7\u30c3\u30af\n\n\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u3066\u4f7f\u7528\u53ef\u80fd\u306a\u3089\u30b3\u30de\u30f3\u30c9\u306e\u30d1\u30b9\u304c\u8fd4\u308a\u307e\u3059\u3002\n\n```el\n(executable-find \"cmigemo\") ; => \"/usr/local/bin/cmigemo\"\n```\n\n### Emacs\u7528\u306b\u30b3\u30de\u30f3\u30c9\u3078\u306e\u30d1\u30b9\u3092\u901a\u3059\n\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\n:link: [PATH \u306e\u8a2d\u5b9a](http://sakito.jp/emacs/emacsshell.html#path)\n\n\n\n\n# \u5b9f\u8df5\u30b5\u30f3\u30d7\u30eb\n\nMac OS X\u5411\u3051\u306e\u30b3\u30de\u30f3\u30c9\u304c\u591a\u3081\u3067\u3059\u3002\n\n\n\n## \u9078\u629e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u305f\u30bf\u30b0\u3067\u56f2\u3080\n\n\u9078\u629e\u7bc4\u56f2\u3092\u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3057\u305f\u30bf\u30b0\u540d\u3067\u56f2\u307f\u307e\u3059\u3002\n\n```el\n(defun my-wrap-lines-with-html-tag (tag)\n  (interactive \"sTag: \")\n  (if (region-active-p)\n      (shell-command-on-region\n       (region-beginning) (region-end)\n       (concat \"perl -0 -p -w -e \\'\"\n               \"s/^([^\\\\S\\\\r\\\\n]*)(\\\\S.*?)[^\\\\S\\\\r\\\\n]*$/$1<\"\n               tag \">$2<\\\\/\" tag \">/gm\\'\")\n       nil t)))\n```\n\n\n## \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u7279\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\n\n\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e.DS_Store\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\n```el\n(defun my-delete-DS_Store-under-current-directory-recursively ()\n  (interactive)\n  (shell-command \"find . -name '*.DS_Store' -type f -delete\")\n  ;; Dired\u3092\u958b\u3044\u3066\u3044\u305f\u3089\u30d0\u30c3\u30d5\u30a1\u3092\u66f4\u65b0\n  (if (eq major-mode 'dired-mode)\n      (revert-buffer)))\n```\n\n\n## Dired\u304b\u3089sqlite\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u95b2\u89a7\n\n```el\n(defun my-dired-sqlite ()\n  (interactive)\n  (let ((file (dired-get-filename))\n        (buffer (format \"SQLite-%s\" (random 100000))))\n    (async-shell-command (format \"sqlite3 '%s'\" file) buffer)\n    (switch-to-buffer buffer)\n    (insert \".header on\")\n    (execute-kbd-macro (kbd \"RET\")) ;; return\u30ad\u30fc\u5b9f\u884c\n    (insert \".mode column\")\n    (execute-kbd-macro (kbd \"RET\"))\n    (insert \".tables\")\n    (execute-kbd-macro (kbd \"RET\"))))\n```\n\n\n## Dired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7279\u6b8a\u5c5e\u6027\u3092\u9664\u53bb\n\n```el\n(defun my-dired-delete-mac-atmark-permission ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            ;; \u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u5b9f\u884c\n            (dired-do-shell-command \"xattr -c *\" nil (list file)))\n          files)\n    (dired-unmark-all-marks) ;; \u30de\u30fc\u30af\u89e3\u9664\n    (revert-buffer) ;; \u30d0\u30c3\u30d5\u30a1\u66f4\u65b0\n    ))\n```\n\n\n## Dired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5225\u30a2\u30d7\u30ea\u306b\u9001\u308b\n\n[Image Optim](https://imageoptim.com/)\u30a2\u30d7\u30ea\u3078\u9001\u308a\u3001\u753b\u50cf\u306e\u5bb9\u91cf\u3092\u843d\u3068\u3057\u307e\u3059\u3002\n\n```el\n(defun my-dired-image-optim ()\n  (interactive)\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            (cond ((string-match \".*\\\\.\\\\(png\\\\|jpe?g\\\\|gif\\\\)$\" file)\n                   ;; \u6307\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\n                   (dired-do-shell-command \"open -a ImageOptim.app *\" nil (list file)))))\n          files)\n    (dired-unmark-all-marks)\n    (revert-buffer)))\n```\n\n\n## Dired\u3067\u30de\u30fc\u30af\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u5024\u3092\u4f7f\u3063\u3066\u51e6\u7406\n\n\u5b9f\u884c\u5f8c\u306b\u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u5024\u3092\u5165\u529b\u3057\u307e\u3059\u3002\u305d\u306e\u5024\u3067\u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\u3092\u884c\u3044\u307e\u3059\u3002\n(sips: \u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b Mac OS X \u6a19\u6e96\u30b3\u30de\u30f3\u30c9)\n\n```el\n(defun my-dired-image-width-resize-with-sips (width)\n  (interactive \"sWidth: \")\n  (let ((files (dired-get-marked-files t current-prefix-arg)))\n    (mapc (lambda (file)\n            (cond ((string-match \".*\\\\.\\\\(png\\\\|jpe?g\\\\|gif\\\\)$\" file)\n                   (dired-do-shell-command\n                    (concat \"sips --resampleWidth \" width \" *\")\n                    nil (list file)))))\n          files)\n    (dired-unmark-all-marks)\n    (revert-buffer)))\n```\n\n\n## \u9078\u629e\u7bc4\u56f2\u3092\u4efb\u610f\u306e\u6b63\u898f\u8868\u73fe\u3067\u7f6e\u63db\n\n\u79c1\u306e\u304a\u6c17\u306b\u5165\u308a\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n`M-x my-perl-replace-command`\u306e\u3042\u3068\u306b\u4f8b\u3048\u3070`s/[\\n\\r]//g`\u3068\u3059\u308b\u3068\u3001\u9078\u629e\u7bc4\u56f2\u306e\u6539\u884c\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u4ed6\u306b\u3088\u304f\u4f7f\u3046\u306e\u304c\u3001`s/\\t/  /g`\u3067\u30bf\u30d6\u6587\u5b57\u3092\u7a7a\u767d\u6587\u5b572\u3064\u306b\u7f6e\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u6a19\u6e96\u306e\u5909\u63db\u95a2\u6570\u3088\u308a\u9ad8\u901f\u3067\u3059\u3002\n\n\n```el\n;; \u5c65\u6b74\u7528\n(defvar my-perl-replace-history nil\n  \"History for the `my-perl-replace-command'.\")\n(defun my-perl-replace-command (command)\n  \"Utilize Perl regular expression to replace string in the current buffer.\"\n  (interactive (list (read-shell-command \"s[perl regexp] : \"\n                                         \"\"\n                                         'my-perl-replace-history)))\n  (when (string-match \"'\" command)\n    (setq command (replace-regexp-in-string \"'\" \"\\\\\\\\x27\" command)))\n  (if (region-active-p)\n      (shell-command-on-region\n       (region-beginning) (region-end) (concat \"perl -0 -p -w -e \\'\" command \"\\'\") nil t)\n    (let ((po (point))\n          (win (window-start)))\n      (mark-whole-buffer)\n      (shell-command-on-region\n       (region-beginning) (region-end)\n       (concat \"perl -0 -p -w -e \\'\" command \"\\'\") nil t)\n      (goto-char po)\n      (set-window-start (selected-window) win))))\n```\n\n\n", "tags": ["Emacs", "emacs-lisp", "ShellScript"]}