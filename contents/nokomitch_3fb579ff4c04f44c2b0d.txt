{"context": " More than 1 year has passed since last update.Coursera\u306eMachine Learning\u30af\u30e9\u30b9\uff08Andrew Ng\u5148\u751f\uff09\u306eMatlab/Octave\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u3092Python\u3067\u5b9f\u88c5\u3059\u308b\u30b7\u30ea\u30fc\u30ba\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u5909\u308f\u3089\u305a\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\uff1a\n\n\u8ab2\u984c\u306e\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e\u518d\u73fe\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001scikit-learn\u306a\u3069\u306ePython\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3067\u304d\u308b\u3060\u3051\u52b9\u7387\u7684\u306b\u5b9f\u88c5\u3059\u308b\n\n\u4eca\u9031(Week6)\u306f\"Advice For Applying Machine Learning\"\u3068\u3044\u3046\u984c\u3067\u3001\u65b0\u3057\u3044\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u5b66\u3076\u306e\u3067\u306f\u306a\u304f\u3001\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u65b9\u6cd5\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306e\u691c\u8a3c\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u3053\u306e\u30c6\u30fc\u30de\u306b1\u9031\u5272\u308a\u5f53\u3066\u308b\u3042\u305f\u308a\u306b\u3001\u3053\u306e\u30b3\u30fc\u30b9\u306e\u300c\u7406\u8ad6\u504f\u91cd\u3067\u306f\u306a\u304f\u5b9f\u8df5\u7684\u300d\u3068\u3044\u3046\u7279\u9577\u304c\u73fe\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30e2\u30c7\u30eb\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306e\u3001\u3056\u304f\u3063\u3068\u3057\u305f\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u4ea4\u5dee\u691c\u5b9a(Cross-validation)\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u3002Andrew\u5148\u751f\u306e\u63a8\u5968\u306f\u30016:2:2\u306e\u5272\u5408\u3002\n\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u7570\u306a\u308b\u30e2\u30c7\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b66\u7fd2\u3059\u308b\u3002\n\u4ea4\u5dee\u691c\u5b9a\u3092\u3057\u3066\u3069\u306e\u30e2\u30c7\u30eb\u30fb\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3044\u3044\u304b\u6c7a\u5b9a\u3002\u305d\u306e\u969b\u3001Learning Curve\u3092\u63cf\u3044\u3066\u6c7a\u5b9a\u3059\u308b\u3002\n\u6700\u5f8c\u306b\u6c7a\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u6e2c\u5b9a\u3059\u308b\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u3082\u3053\u306e\u624b\u9806\u3067\u3059\u3059\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nscipy\u306escio.loadmat()\u3067matlab\u306e.mat\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import linear_model, preprocessing\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex5data1.mat')\nX = data['X']\nXval = data['Xval']\nXtest = data['Xtest']\ny = data['y']\nyval = data['yval']\nytest = data['ytest']\n\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f X=\u30c0\u30e0\u306e\u6c34\u4f4d\u30ec\u30d9\u30eb \u3092\u7528\u3044\u3066\u3001y=\u30c0\u30e0\u304b\u3089\u6d41\u51fa\u3059\u308b\u6c34\u91cf \u3092\u4e88\u6e2c\u3059\u308b\u3082\u306e\u3060\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u305a\u7dda\u5f62\u56de\u5e30\u3057\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u7dda\u5f62\u56de\u5e30\u3057\u3066\u3001\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\nmodel = linear_model.Ridge(alpha=0.0)\nmodel.fit(X,y)\n\npx = np.array(np.linspace(np.min(X),np.max(X),100)).reshape(-1,1)\npy = model.predict(px)\nplt.plot(px, py)\nplt.scatter(X,y)\nplt.show()\n\n\u3044\u3064\u3082\u4f7f\u3063\u3066\u3044\u308blinear_model.LinearRegression()\u30e2\u30c7\u30eb\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u306e\u3061\u306e\u3061\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u308b\u306e\u3067Ridge()\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306ealpha\u3067\u6b63\u5247\u5316\u306e\u5f37\u3055\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001alpha=0.0\u306b\u3059\u308b\u3068\u6b63\u5247\u5316\u306a\u3057\u306b\u306a\u308a\u3001LinearRegression()\u30e2\u30c7\u30eb\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n\u898b\u3066\u306e\u901a\u308a\u3001\u76f4\u7dda\u3067\u306f\u3046\u307e\u304f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\u305d\u308c\u3067\u3082\u7dda\u5f62\u56de\u5e30\u3067Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\n\u76f4\u7dda\u3067\u306f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u3053\u3068\u306f\u77e5\u308a\u3064\u3064\u3082\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u6570\u3092\u5909\u3048\u3066\u5b66\u7fd2\u66f2\u7dda\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\u8a13\u7df4\u30c7\u30fc\u30bf\u30921\u304b\u308912\u500b\u307e\u3067\u5909\u3048\u3066\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3044\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30a8\u30e9\u30fc\u3068\u4ea4\u5dee\u691c\u5b9a(Cross Validation)\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30a8\u30e9\u30fc\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\u300c\u30a8\u30e9\u30fc\u300d\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8a08\u7b97\u3067\u304d\u308b\uff12\u4e57\u8aa4\u5dee\u3067\u3059\u3002\n12m\u2211(h\u03b8(x(i))\u2212y(i))2 \\frac{1}{2m} \\sum (h_\\theta(x^{(i)}) - y^{(i)})^2 \n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n# \u7dda\u5f62\u56de\u5e30\u3067Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\nerror_train = np.zeros(11)\nerror_val = np.zeros(11)\nmodel = linear_model.Ridge(alpha=0.0)\nfor i in range(1,12):\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b5\u30d6\u30bb\u30c3\u30c8i\u500b\u306e\u307f\u3067\u56de\u5e30\u3092\u5b9f\u65bd\n    model.fit( X[0:i], y[0:i] )\n    # \u305d\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b5\u30d6\u30bb\u30c3\u30c8i\u500b\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\n    error_train[i-1] = sum( (y[0:i] - model.predict(X[0:i]))**2 ) / (2*i)\n    # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\n    error_val[i-1] = sum( (yval - model.predict(Xval) )**2 ) / (2*yval.size)\n\npx = np.arange(1,12)\nplt.plot(px, error_train, label=\"Train\")\nplt.plot(px, error_val, label=\"Cross Validation\")\nplt.xlabel(\"Number of training examples\")\nplt.ylabel(\"Error\")\nplt.legend()\nplt.show()\n\n\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u309212\uff08\u5168\u90e8\uff09\u307e\u3067\u5897\u3084\u3057\u3066\u3082\u3001Train\u30c7\u30fc\u30bf\u3001Cross Validation\u30c7\u30fc\u30bf\u3068\u3082\u306b\u8aa4\u5dee\u304c\u4e0b\u304c\u308a\u307e\u305b\u3093\u3002\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u5f53\u3066\u306f\u307e\u308a\u304c\u60aa\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306f\u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u8a66\u3057\u307e\u3059\u3002\n\n\u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n\u4e0a\u3067\u5b9f\u65bd\u3057\u305f\u7dda\u5f62\u56de\u5e30\u306e\u4eee\u8aac\u306f\nh\u03b8(x)=\u03b80+\u03b81x h_\\theta(x) = \\theta_0 + \\theta_1x\n\u3067\u3057\u305f\u304c\u3001\u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\u3053\u3053\u306bxx\u306e\u968e\u4e57\u306e\u9805\u3092\u52a0\u3048\u3066\u3044\u304d\u307e\u3059\u3002\nh\u03b8(x)=\u03b80+\u03b81x+\u03b82x2+\u03b83x3+...+\u03b8pxp h_\\theta(x) = \\theta_0 + \\theta_1x + \\theta_2x^2 + \\theta_3x^3 + ... + \\theta_px^p\n\u306e\u3088\u3046\u306a\u5f0f\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u7279\u5fb4\u91cfxx\u306e\u968e\u4e57\u306e\u6570\u5024\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3001\u3053\u308c\u3092x1,x2,x3...x_1, x_2, x_3 ...\u3068\u3044\u3046\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3068\u3057\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\nh\u03b8(x)=\u03b80+\u03b81x1+\u03b82x2+\u03b83x3+...+\u03b8pxp h_\\theta(x) = \\theta_0 + \\theta_1x_1 + \\theta_2x_2 + \\theta_3x_3 + ... + \\theta_px_p\n\u3067\u8868\u73fe\u3055\u308c\u308b\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3057\u307e\u3059\u3002\nscikit-learn\u3067\u306f\u3001sklearn.preprocessing.PolynomialFeatures\u3068\u3044\u3046\u3001\u3053\u306e\u591a\u9805\u5f0f\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u30fb\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n# X\u306e\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u7279\u5fb4\u91cf X_poly \u3068\u3059\u308b\n# X\u306f m x 1\u884c\u5217\u3001X_poly\u306f m x 8 \u884c\u5217\npoly = preprocessing.PolynomialFeatures(degree=8, include_bias=False)\nX_poly = poly.fit_transform(X)\n\n# X_poly\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u56de\u5e30\nmodel = linear_model.Ridge(alpha=0.0)\nmodel.fit(X_poly,y)\n\n# \u30d7\u30ed\u30c3\u30c8\npx = np.array(np.linspace(np.min(X)-10,np.max(X)+10,100)).reshape(-1,1)\n# \u4eca\u56de\u306e\u30e2\u30c7\u30eb\u306fx_poly\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u308b\u306e\u3067\u3001\u30d7\u30ed\u30c3\u30c8\u7528\u306ex\u3082\u968e\u4e57\u306e\u5f62\u306b\u5c55\u958b\npx_poly = poly.fit_transform(px)\npy = model.predict(px_poly)\nplt.plot(px, py)\nplt.scatter(X, y)\nplt.show()\n\n\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n8\u6b21\u591a\u9805\u5f0f\u3067\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3059\u3079\u3066\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u3002\u304c\u3001\u3053\u308c\u306f\u904e\u5b66\u7fd2\u3067\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u306f\u3046\u307e\u304f\u4e88\u6e2c\u3067\u304d\u306a\u3044\u30e2\u30c7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u5ea6\u306f\u3053\u306e\u30e2\u30c7\u30eb\u3092\u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u3064\u3064\u3001\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u3066\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u7dda\u5f62\u56de\u5e30\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u306f\nJ=12mm\u2211i=1(h\u03b8(x(i))\u2212y(i))2+\u03bb2mn\u2211j=1\u03b82j J = \\frac{1}{2m} \\sum_{i=1}^m (h_\\theta(x^{(i)}) - y^{(i)})^2 + \\frac{\\lambda}{2m} \\sum_{j=1}^n \\theta_j^2 \u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u7b2c\uff12\u9805\u304c\u6b63\u5247\u5316\u9805\u3067\u30010\u304b\u3089\u5916\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306b\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u4e0e\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u904e\u5b66\u7fd2\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5f62\u306e\u6b63\u5247\u5316\u3092L2\u6b63\u5247\u5316\u3001Ridge\u56de\u5e30\u3001\u306a\u3069\u3068\u547c\u3073\u307e\u3059\u3002\n\u7b2c\uff12\u9805\u306e\u5206\u5b50\u306b\u3042\u308b\u03bb\\lambda\u304c\u6b63\u5247\u5316\u306e\u5f37\u3055\u3092\u8abf\u6574\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\u4e0a\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u3053\u308c\u306flinear_model.Ridge()\u3067\u306falpha\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002Coursera\u3068\u540c\u3058\u304f\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10 \u3068\u5909\u3048\u3066learning curve\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3001\u3069\u306e\u03bb\\lambda\u304c\u3044\u3044\u304b\u691c\u8a0e\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n# X\u306e\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u7279\u5fb4\u91cf X_poly \u3068\u3059\u308b\n# X\u306f m x 1\u884c\u5217\u3001X_poly\u306f m x 8 \u884c\u5217\npoly = preprocessing.PolynomialFeatures(degree=8, include_bias=False)\nX_poly = poly.fit_transform(X) # \u8a13\u7df4\u30c7\u30fc\u30bf\nXval_poly = poly.fit_transform(Xval) # Cross Validation\u30c7\u30fc\u30bf\n\n# \u03bb\u3092\u5909\u3048\u3066Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\nerror_train = np.zeros(9)\nerror_val = np.zeros(9)\nlambda_values = np.array([0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1.0, 3.0, 10.0])\nfor i in range(0,9):\n    # X_poly\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u56de\u5e30\n    model = linear_model.Ridge(alpha=lambda_values[i]/10, normalize=True ) # \u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bfalpha\u3092\u5909\u3048\u308b\n    model.fit(X_poly,y)\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\uff08\u6b63\u5247\u5316\u9805\u3064\u304d\uff09\n    error_train[i] = sum( (y - model.predict(X_poly))**2 ) / (2*y.size) + sum(sum( model.coef_**2 )) * lambda_values[i]/(2*y.size)\n    # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\uff08\u6b63\u5247\u5316\u9805\u3064\u304d\uff09\n    error_val[i] = sum( (yval - model.predict(Xval_poly) )**2 ) / (2*yval.size) + sum(sum( model.coef_**2 ))* lambda_values[i]/(2*yval.size)\n\npx = lambda_values\nplt.plot(px, error_train, label=\"Train\")\nplt.plot(px, error_val, label=\"Cross Validation\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Error\")\nplt.legend()\nplt.show()\n\n\u30d7\u30ed\u30c3\u30c8\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u4ea4\u5dee\u691c\u5b9a\u3067\u306e\u30a8\u30e9\u30fc\u5024\u304c\u6700\u5c0f\u3068\u306a\u3063\u3066\u3044\u308b\u03bb=3\\lambda=3\u3042\u305f\u308a\u304c\u3088\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\u304a\u308f\u308a\u306b\nsklearn.linear_model.Ridge()\u306b\u306f\u4ea4\u5dee\u691c\u5b9a\u7528\u306esklearn.linear_model.RidgeCV()\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3082\u3042\u308a\u3001\u5b66\u7fd2\u3055\u305b\u308b\u3068\u6700\u9069\u306aalpha\u306e\u6570\u5b57\u3092\u3044\u3063\u3057\u3087\u306b\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u53c2\u8003\u6587\u732e\n\nscikit-learn\u306e\u89e3\u8aac\n\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308bL1\u6b63\u5247\u5316\u3068L2\u6b63\u5247\u5316\u306e\u52b9\u679c\n\nCoursera\u306eMachine Learning\u30af\u30e9\u30b9\uff08Andrew Ng\u5148\u751f\uff09\u306eMatlab/Octave\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u3092Python\u3067\u5b9f\u88c5\u3059\u308b\u30b7\u30ea\u30fc\u30ba\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u5909\u308f\u3089\u305a\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\uff1a\n\n- \u8ab2\u984c\u306e\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e\u518d\u73fe\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001scikit-learn\u306a\u3069\u306ePython\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3067\u304d\u308b\u3060\u3051\u52b9\u7387\u7684\u306b\u5b9f\u88c5\u3059\u308b\n\n\u4eca\u9031(Week6)\u306f\"Advice For Applying Machine Learning\"\u3068\u3044\u3046\u984c\u3067\u3001\u65b0\u3057\u3044\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u5b66\u3076\u306e\u3067\u306f\u306a\u304f\u3001\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u65b9\u6cd5\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306e\u691c\u8a3c\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u3053\u306e\u30c6\u30fc\u30de\u306b1\u9031\u5272\u308a\u5f53\u3066\u308b\u3042\u305f\u308a\u306b\u3001\u3053\u306e\u30b3\u30fc\u30b9\u306e**\u300c\u7406\u8ad6\u504f\u91cd\u3067\u306f\u306a\u304f\u5b9f\u8df5\u7684\u300d**\u3068\u3044\u3046\u7279\u9577\u304c\u73fe\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306e\u3001\u3056\u304f\u3063\u3068\u3057\u305f\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n- \u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u4ea4\u5dee\u691c\u5b9a(Cross-validation)\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u3002Andrew\u5148\u751f\u306e\u63a8\u5968\u306f\u30016:2:2\u306e\u5272\u5408\u3002\n- \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u7570\u306a\u308b\u30e2\u30c7\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b66\u7fd2\u3059\u308b\u3002\n- \u4ea4\u5dee\u691c\u5b9a\u3092\u3057\u3066\u3069\u306e\u30e2\u30c7\u30eb\u30fb\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3044\u3044\u304b\u6c7a\u5b9a\u3002\u305d\u306e\u969b\u3001Learning Curve\u3092\u63cf\u3044\u3066\u6c7a\u5b9a\u3059\u308b\u3002\n- \u6700\u5f8c\u306b\u6c7a\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u6e2c\u5b9a\u3059\u308b\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u3082\u3053\u306e\u624b\u9806\u3067\u3059\u3059\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n#### \u307e\u305a\u3001\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\nscipy\u306escio.loadmat()\u3067matlab\u306e.mat\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import linear_model, preprocessing\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex5data1.mat')\nX = data['X']\nXval = data['Xval']\nXtest = data['Xtest']\ny = data['y']\nyval = data['yval']\nytest = data['ytest']\n```\n\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f X=\u30c0\u30e0\u306e\u6c34\u4f4d\u30ec\u30d9\u30eb \u3092\u7528\u3044\u3066\u3001y=\u30c0\u30e0\u304b\u3089\u6d41\u51fa\u3059\u308b\u6c34\u91cf \u3092\u4e88\u6e2c\u3059\u308b\u3082\u306e\u3060\u305d\u3046\u3067\u3059\u3002\n\n#### \u307e\u305a\u7dda\u5f62\u56de\u5e30\u3057\u3066\u307f\u308b\n\n\u3068\u308a\u3042\u3048\u305a\u7dda\u5f62\u56de\u5e30\u3057\u3066\u3001\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py\nmodel = linear_model.Ridge(alpha=0.0)\nmodel.fit(X,y)\n\npx = np.array(np.linspace(np.min(X),np.max(X),100)).reshape(-1,1)\npy = model.predict(px)\nplt.plot(px, py)\nplt.scatter(X,y)\nplt.show()\n```\n\n\u3044\u3064\u3082\u4f7f\u3063\u3066\u3044\u308b`linear_model.LinearRegression()`\u30e2\u30c7\u30eb\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u306e\u3061\u306e\u3061\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u308b\u306e\u3067`Ridge()`\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30e2\u30c7\u30eb\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e`alpha`\u3067\u6b63\u5247\u5316\u306e\u5f37\u3055\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001`alpha=0.0`\u306b\u3059\u308b\u3068\u6b63\u5247\u5316\u306a\u3057\u306b\u306a\u308a\u3001`LinearRegression()`\u30e2\u30c7\u30eb\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n<img width=\"551\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-07 09.49.10.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/96897/eebe313b-445b-db1e-ba4e-7e1700c53941.png\">\n\n\u898b\u3066\u306e\u901a\u308a\u3001\u76f4\u7dda\u3067\u306f\u3046\u307e\u304f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n#### \u305d\u308c\u3067\u3082\u7dda\u5f62\u56de\u5e30\u3067Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\n\n\u76f4\u7dda\u3067\u306f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u3053\u3068\u306f\u77e5\u308a\u3064\u3064\u3082\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u6570\u3092\u5909\u3048\u3066\u5b66\u7fd2\u66f2\u7dda\u3092\u63cf\u3044\u3066\u307f\u307e\u3059\u3002\u8a13\u7df4\u30c7\u30fc\u30bf\u30921\u304b\u308912\u500b\u307e\u3067\u5909\u3048\u3066\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3044\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30a8\u30e9\u30fc\u3068\u4ea4\u5dee\u691c\u5b9a(Cross Validation)\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u30a8\u30e9\u30fc\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\u300c\u30a8\u30e9\u30fc\u300d\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8a08\u7b97\u3067\u304d\u308b\uff12\u4e57\u8aa4\u5dee\u3067\u3059\u3002\n$$ \\frac{1}{2m} \\sum (h_\\theta(x^{(i)}) - y^{(i)})^2 $$\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\n```py\n# \u7dda\u5f62\u56de\u5e30\u3067Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\nerror_train = np.zeros(11)\nerror_val = np.zeros(11)\nmodel = linear_model.Ridge(alpha=0.0)\nfor i in range(1,12):\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b5\u30d6\u30bb\u30c3\u30c8i\u500b\u306e\u307f\u3067\u56de\u5e30\u3092\u5b9f\u65bd\n    model.fit( X[0:i], y[0:i] )\n    # \u305d\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b5\u30d6\u30bb\u30c3\u30c8i\u500b\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\n    error_train[i-1] = sum( (y[0:i] - model.predict(X[0:i]))**2 ) / (2*i)\n    # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\n    error_val[i-1] = sum( (yval - model.predict(Xval) )**2 ) / (2*yval.size)\n    \npx = np.arange(1,12)\nplt.plot(px, error_train, label=\"Train\")\nplt.plot(px, error_val, label=\"Cross Validation\")\nplt.xlabel(\"Number of training examples\")\nplt.ylabel(\"Error\")\nplt.legend()\nplt.show()\n```\n\n\u7d50\u679c\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n<img width=\"581\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-07 17.56.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/96897/4562b72e-1bb3-31fa-23b7-9d2c6841570d.png\">\n\n\u8a13\u7df4\u30c7\u30fc\u30bf\u309212\uff08\u5168\u90e8\uff09\u307e\u3067\u5897\u3084\u3057\u3066\u3082\u3001Train\u30c7\u30fc\u30bf\u3001Cross Validation\u30c7\u30fc\u30bf\u3068\u3082\u306b\u8aa4\u5dee\u304c\u4e0b\u304c\u308a\u307e\u305b\u3093\u3002\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u5f53\u3066\u306f\u307e\u308a\u304c\u60aa\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306f\u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u8a66\u3057\u307e\u3059\u3002\n\n#### \u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\n\n\u4e0a\u3067\u5b9f\u65bd\u3057\u305f\u7dda\u5f62\u56de\u5e30\u306e\u4eee\u8aac\u306f\n$$ h_\\theta(x) = \\theta_0 + \\theta_1x$$\n\u3067\u3057\u305f\u304c\u3001\u591a\u9805\u5f0f\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306f\u3053\u3053\u306b$x$\u306e\u968e\u4e57\u306e\u9805\u3092\u52a0\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n$$ h_\\theta(x) = \\theta_0 + \\theta_1x + \\theta_2x^2 + \\theta_3x^3 + ... + \\theta_px^p$$\n\u306e\u3088\u3046\u306a\u5f0f\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u7279\u5fb4\u91cf$x$\u306e\u968e\u4e57\u306e\u6570\u5024\u3092\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3001\u3053\u308c\u3092$x_1, x_2, x_3 ...$\u3068\u3044\u3046\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3068\u3057\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\n$$ h_\\theta(x) = \\theta_0 + \\theta_1x_1 + \\theta_2x_2 + \\theta_3x_3 + ... + \\theta_px_p$$\n\u3067\u8868\u73fe\u3055\u308c\u308b\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3057\u307e\u3059\u3002\n\nscikit-learn\u3067\u306f\u3001`sklearn.preprocessing.PolynomialFeatures`\u3068\u3044\u3046\u3001\u3053\u306e\u591a\u9805\u5f0f\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u30fb\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\n```py\n# X\u306e\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u7279\u5fb4\u91cf X_poly \u3068\u3059\u308b\n# X\u306f m x 1\u884c\u5217\u3001X_poly\u306f m x 8 \u884c\u5217\npoly = preprocessing.PolynomialFeatures(degree=8, include_bias=False)\nX_poly = poly.fit_transform(X)\n\n# X_poly\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u56de\u5e30\nmodel = linear_model.Ridge(alpha=0.0)\nmodel.fit(X_poly,y)\n\n# \u30d7\u30ed\u30c3\u30c8\npx = np.array(np.linspace(np.min(X)-10,np.max(X)+10,100)).reshape(-1,1)\n# \u4eca\u56de\u306e\u30e2\u30c7\u30eb\u306fx_poly\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u53d7\u3051\u4ed8\u3051\u308b\u306e\u3067\u3001\u30d7\u30ed\u30c3\u30c8\u7528\u306ex\u3082\u968e\u4e57\u306e\u5f62\u306b\u5c55\u958b\npx_poly = poly.fit_transform(px)\npy = model.predict(px_poly)\nplt.plot(px, py)\nplt.scatter(X, y)\nplt.show()\n```\n\n\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n<img width=\"561\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-07 21.25.37.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/96897/b87c8bc6-bb26-7d1d-491a-be1fbea854cc.png\">\n\n8\u6b21\u591a\u9805\u5f0f\u3067\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3068\u3059\u3079\u3066\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u3002\u304c\u3001\u3053\u308c\u306f\u904e\u5b66\u7fd2\u3067\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u306f\u3046\u307e\u304f\u4e88\u6e2c\u3067\u304d\u306a\u3044\u30e2\u30c7\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u5ea6\u306f\u3053\u306e\u30e2\u30c7\u30eb\u3092\u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u3064\u3064\u3001\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u3066\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n#### \u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\n\u6b63\u5247\u5316\u9805\u3092\u5165\u308c\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u7dda\u5f62\u56de\u5e30\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u306f\n$$ J = \\frac{1}{2m} \\sum_{i=1}^m (h_\\theta(x^{(i)}) - y^{(i)})^2 + \\frac{\\lambda}{2m} \\sum_{j=1}^n \\theta_j^2$$ \u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u7b2c\uff12\u9805\u304c\u6b63\u5247\u5316\u9805\u3067\u30010\u304b\u3089\u5916\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306b\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u4e0e\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u904e\u5b66\u7fd2\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5f62\u306e\u6b63\u5247\u5316\u3092L2\u6b63\u5247\u5316\u3001Ridge\u56de\u5e30\u3001\u306a\u3069\u3068\u547c\u3073\u307e\u3059\u3002\n\n\u7b2c\uff12\u9805\u306e\u5206\u5b50\u306b\u3042\u308b$\\lambda$\u304c\u6b63\u5247\u5316\u306e\u5f37\u3055\u3092\u8abf\u6574\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002\u4e0a\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u3053\u308c\u306f`linear_model.Ridge()`\u3067\u306f`alpha`\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002Coursera\u3068\u540c\u3058\u304f\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10 \u3068\u5909\u3048\u3066learning curve\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3001\u3069\u306e$\\lambda$\u304c\u3044\u3044\u304b\u691c\u8a0e\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\n```py\n# X\u306e\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u7279\u5fb4\u91cf X_poly \u3068\u3059\u308b\n# X\u306f m x 1\u884c\u5217\u3001X_poly\u306f m x 8 \u884c\u5217\npoly = preprocessing.PolynomialFeatures(degree=8, include_bias=False)\nX_poly = poly.fit_transform(X) # \u8a13\u7df4\u30c7\u30fc\u30bf\nXval_poly = poly.fit_transform(Xval) # Cross Validation\u30c7\u30fc\u30bf\n\n# \u03bb\u3092\u5909\u3048\u3066Learning Curve\u3092\u63cf\u3044\u3066\u307f\u308b\nerror_train = np.zeros(9)\nerror_val = np.zeros(9)\nlambda_values = np.array([0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1.0, 3.0, 10.0])\nfor i in range(0,9):\n    # X_poly\u3092\u4f7f\u3063\u3066\u7dda\u5f62\u56de\u5e30\n    model = linear_model.Ridge(alpha=lambda_values[i]/10, normalize=True ) # \u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bfalpha\u3092\u5909\u3048\u308b\n    model.fit(X_poly,y)\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\uff08\u6b63\u5247\u5316\u9805\u3064\u304d\uff09\n    error_train[i] = sum( (y - model.predict(X_poly))**2 ) / (2*y.size) + sum(sum( model.coef_**2 )) * lambda_values[i]/(2*y.size)\n    # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30a8\u30e9\u30fc\u3092\u8a08\u7b97\uff08\u6b63\u5247\u5316\u9805\u3064\u304d\uff09\n    error_val[i] = sum( (yval - model.predict(Xval_poly) )**2 ) / (2*yval.size) + sum(sum( model.coef_**2 ))* lambda_values[i]/(2*yval.size)\n\npx = lambda_values\nplt.plot(px, error_train, label=\"Train\")\nplt.plot(px, error_val, label=\"Cross Validation\")\nplt.xlabel(\"Lambda\")\nplt.ylabel(\"Error\")\nplt.legend()\nplt.show()\n```\n\n\u30d7\u30ed\u30c3\u30c8\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u4ea4\u5dee\u691c\u5b9a\u3067\u306e\u30a8\u30e9\u30fc\u5024\u304c\u6700\u5c0f\u3068\u306a\u3063\u3066\u3044\u308b$\\lambda=3$\u3042\u305f\u308a\u304c\u3088\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![ex5.PNG](https://qiita-image-store.s3.amazonaws.com/0/96897/11705875-61e5-0494-0ceb-89c2c437c518.png)\n\n\n#### \u304a\u308f\u308a\u306b\n\n`sklearn.linear_model.Ridge()`\u306b\u306f\u4ea4\u5dee\u691c\u5b9a\u7528\u306e`sklearn.linear_model.RidgeCV()`\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3082\u3042\u308a\u3001\u5b66\u7fd2\u3055\u305b\u308b\u3068\u6700\u9069\u306a`alpha`\u306e\u6570\u5b57\u3092\u3044\u3063\u3057\u3087\u306b\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\n\n- [scikit-learn\u306e\u89e3\u8aac](http://scikit-learn.org/stable/modules/linear_model.html#ridge-regression)\n- [\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308bL1\u6b63\u5247\u5316\u3068L2\u6b63\u5247\u5316\u306e\u52b9\u679c](http://breakbee.hatenablog.jp/entry/2015/03/08/041411)\n", "tags": ["coursera", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "\u7dda\u5f62\u56de\u5e30"]}