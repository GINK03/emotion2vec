{"context": " More than 1 year has passed since last update.java.io.Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u306a\u306e\u304b\u3092\u8003\u3048\u308b\u30b7\u30ea\u30fc\u30ba\u306e2\u56de\u76ee\u3067\u3059\u3002\n\u524d\u56de\u306e\u300eSerializable\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u300f \uff0d \u300c\u30b1\u30fc\u30b9\uff11\uff1a\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\u300d\u3067\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306a\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u3092\u884c\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u300c\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b\u300d\u3068\u984c\u3057\u3066\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30d0\u30a4\u30c8\u914d\u5217\u304c\u4e0d\u6b63\u306b\u6539\u7ac4\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u5099\u3048\u305f\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8003\u3048\u305f\u3044\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u3055\u3089\u3044\uff1a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f62\u5f0f\n\u3055\u3066\u3001\u6b21\u306e Odd \u30af\u30e9\u30b9\u306f\u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u305f int \u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n\nOdd.java\uff08\u6ce8\u610f\uff01\u30d0\u30b0\u3092\u542b\u3080\u305f\u3081\u3001\u5947\u6570\u4ee5\u5916\u3082\u53d7\u3051\u4ed8\u3051\u3066\u3057\u307e\u3046\uff09\npackage mypkg;\n\nimport java.io.Serializable;\n\n/**\n * \u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b int \u306e\u4e0d\u5909\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n */\npublic final class Odd implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private final int n;\n\n    public Odd(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd.\");\n        }\n        this.n = n;\n    }\n\n    public int get() {\n        return n;\n    }\n}\n\n\n\u307e\u305a\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nnew Odd(7); \u3067\u751f\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3068\u3001\u6b21\u306e\u30d0\u30a4\u30c8\u914d\u5217\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u3053\u308c\u306f OddDemo#demo1 \u3092\u52d5\u304b\u3057\u3066\u5f97\u305f\u3082\u306e\u3067\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\uff09\nac ed 00 05 73 72 00 09 6d 79 70 6b 67 2e 4f 64 64 00 00 00 00 00 00 00 01 02 00 01 49 00 01 6e 78 70 00 00 00 07\n\u3053\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u8aad\u307f\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\n\n\n\u6841\n\u30d0\u30a4\u30c8\u914d\u5217\n\u5185\u5bb9\n\n\n\n\n01-04\nac ed 00 05\n\u56fa\u5b9a\u306e\u5b9a\u6570\u5024\u3067\u3059\u3002\n\n\n05-06\n73 72\n\u3053\u308c\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u304c\u7d9a\u304f\u3053\u3068\u3092\u8868\u3059\u5b9a\u6570\u5024\u3067\u3059\u3002\n\n\n07-17\n00 09 6d 79 70 6b 67 2e 4f 64 64\n9 \u6587\u5b57\u306e\u30af\u30e9\u30b9\u540d \"mypkg.Odd\" \u3092\u8868\u3057\u307e\u3059\u3002\n\n\n18-25\n00 00 00 00 00 00 00 01\nserialVersionUID==1L \u3092\u8868\u3057\u307e\u3059\u3002\n\n\n26\n02\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306b\u3088\u308a\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u756a\u53f7\u3067\u3059\u3002\n\n\n27\n00\n\u30af\u30e9\u30b9\u306e\u6027\u8cea\u3092\u8868\u3059\u30d5\u30e9\u30b0\u5024\u3067\u3059\u3002\n\n\n28\n01\n\uff11\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\n\n\n29\n49\nint \u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\n\n\n30-32\n00 01 6e\n1 \u6587\u5b57\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d \"n\" \u3092\u8868\u3057\u307e\u3059\u3002\n\n\n33\n78\n\u30af\u30e9\u30b9\u5b9a\u7fa9\u60c5\u5831\u306e\u7d42\u308f\u308a\u3092\u8868\u3059\u5b9a\u6570\u5024\u3067\u3059\u3002\n\n\n34\n70\n\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u7531\u6765\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u7121\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\n\n\n35-38\n00 00 00 07\n\u30d5\u30a3\u30fc\u30eb\u30c9 n \u306e\u5024 7 \u3092\u8868\u3057\u307e\u3059\u3002\n\n\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f62\u5f0f\u306e\u8a73\u7d30\u306f\u3001Oracle: Java\u958b\u767a\u8005\u30ac\u30a4\u30c9 \u306e\u4e2d\u306e \u3053\u3061\u3089\u306e\u30da\u30fc\u30b8 \u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4eba\u9593\u304c\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u8aad\u3081\u308b\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u3053\u3068\u3092\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u305f\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u6545\u306b\u3001\u30d0\u30a4\u30c8\u914d\u5217\u306e\u6539\u7ac4\u3082\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\n\u5b9f\u6f14\uff1a\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u9593\u9055\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\n\u3067\u306f\u5b9f\u969b\u306b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u3001\u8aa4\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u5f97\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nOddDemo.java\uff08\u30bd\u30fc\u30b9\u5168\u4f53\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\uff09\npublic class OddDemo {\n\n    // \u30fb\u30fb\u30fb\n\n    @Test\n    public void demo2() throws IOException, ClassNotFoundException {\n        Odd odd = new Odd(7);\n\n        byte[] bytes = TestUtil.serialize(odd);\n        bytes[37] = 0x02;       // \u2605\u2605\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\uff01\u2605\u2605\n        odd = (Odd) TestUtil.deserialize(bytes);\n\n        System.out.println(\"odd.get() == \" + odd.get());\n    }\n}    \n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001odd.get() == 2 \u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u5947\u6570\u3060\u3051\u3057\u304b\u6301\u3061\u3048\u306a\u3044\u306f\u305a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3001\u5076\u6570\u5024\u3092\u6301\u3063\u3066\u3057\u307e\u3063\u305f\u308f\u3051\u3067\u3059\u3002\nOdd \u30af\u30e9\u30b9\u304c\u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3001\u305d\u308c\u3092 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u8b33\u3063\u3066\u3044\u308b\u4ee5\u4e0a\u3001\u3053\u306e\u3088\u3046\u306a\u4e8b\u614b\u3092\u9632\u3050\u306e\u306f Odd \u30af\u30e9\u30b9\u306e\u8cac\u4efb\u3067\u3059\u3002\u9632\u5fa1\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u3001Odd \u30af\u30e9\u30b9\u306b readObject(ObjectInputStream) \u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\nOdd.java\uff08\u6539\uff09\npublic final class Odd implements Serializable {\n\n    // \uff08\u7565\uff09\n\n    private void readObject(ObjectInputStream stream)\n            throws ClassNotFoundException, IOException {\n\n        stream.defaultReadObject();\n\n        if (n < 1 || n % 2 == 0) {\n            throw new InvalidObjectException(\"illegal value. n == \" + n);\n        }\n    }\n}\n\n\nreadObject \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u904e\u7a0b\u3067\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5185\u90e8\u3067\u306f\u3001\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u5fa9\u5143\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9 n \u306e\u5024\u3092\u691c\u67fb\u3057\u3001\u4e0d\u6b63\u306a\u5024\u306e\u5834\u5408\u306f\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u518d\u3073 demo2 \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u3066\u5931\u6557\u3057\u307e\u3059\u3002\u4e0d\u6b63\u306a\u5185\u5bb9\u306e Odd \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4e16\u306b\u51fa\u56de\u308b\u3053\u3068\u306f\u3082\u306f\u3084\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u305f\u3081\u306b\u5b9f\u88c5\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u30bd\u30fc\u30b9\u306e\u673a\u4e0a\u78ba\u8a8d\u3060\u3051\u3067\u62c5\u4fdd\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u3084\u306f\u308a\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\u8ffd\u52a0\u3057\u305f readObject \u304c\u610f\u56f3\u3057\u305f\u901a\u308a\u306b\u52d5\u304f\u304b\u3092\u3001\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u305f\u30d0\u30a4\u30c8\u914d\u5217\u3092\u5b9f\u969b\u306b\u4e0e\u3048\u308b\u3053\u3068\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\nOddTest.java\npublic class OddTest {\n\n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        // \u6539\u7ac4\u3092\u884c\u308f\u306a\u3044\u6b63\u5e38\u30b1\u30fc\u30b9\uff087 -> 7\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n\n        assertThat(odd.get(), is(7));\n    }\n\n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        // \u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff087 -> 1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x01;\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n\n        assertThat(odd.get(), is(1));\n    }\n\n    @Test\n    public void test3() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u5076\u6570\u5024\uff087 -> 2\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x02;\n\n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == 2\"));\n    }\n\n    @Test\n    public void test4() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u30de\u30a4\u30ca\u30b9\u5024\uff087 -> -1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[34] = (byte) 0xff;\n        bytes[35] = (byte) 0xff;\n        bytes[36] = (byte) 0xff;\n        bytes[37] = (byte) 0xff;\n\n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == -1\"));\n    }\n}\n\n\n\u4e0a\u8a18\u306e\u30c6\u30b9\u30c8\u306f\u3044\u305a\u308c\u3082\u6210\u529f\u3057\u307e\u3059\u3002\nOdd#readObject(ObjectInputStream) \u304c\u72d9\u3044\u901a\u308a\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u203b \u306a\u304a\u3001test3 \u3068 test4 \u3067\u884c\u3063\u3066\u3044\u308b\u4f8b\u5916\u767a\u751f\u691c\u8a3c\u3067\u306f\u3001\u4ee5\u524d\u306e\u6295\u7a3f\u300eJUnit4\u3067\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\u3092\u697d\u30c1\u30f3\u306b\u3059\u308b\uff01\u300f\u3067\u7d39\u4ecb\u3057\u305f GitHub: \u30e9\u30a4\u30d6\u30e9\u30ea \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u8aad\u307f\u89e3\u3044\u3066\u6539\u7ac4\u3059\u308b\u3053\u3068\u306f\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u3067\u3059\u3002\npublic \u306a\u30e1\u30bd\u30c3\u30c9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u691c\u67fb\u3092\u884c\u3046\u3053\u3068\u306b\u3088\u308a\u4e0d\u6b63\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u304b\u3089\u8eab\u3092\u5b88\u308b\u306e\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3088\u3046\u306b\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306b\u4e0d\u6b63\u306b\u6539\u7ac4\u3055\u308c\u305f\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u8eab\u3092\u5b88\u308b\u306e\u306f\u3001Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u81ea\u8eab\u306e\u8cac\u4efb\u3067\u3059\u3002\n\nOracle: Java\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u76f4\u5217\u5316\u4ed5\u69d8 \u3067\u306f\u3001\u5404\u30af\u30e9\u30b9\u3067\u9632\u5fa1\u6a5f\u69cb\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e readObject \u306a\u3069\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u88c5\u3092\u884c\u3063\u305f\u4ee5\u4e0a\u3001\u5b9f\u969b\u306b\u52d5\u304b\u3059\u3053\u3068\u306b\u3088\u308a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u672c\u7a3f\u3067\u4f8b\u793a\u3057\u305f\u3088\u3046\u306b\u3001\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u5b9f\u969b\u306b\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u3092\u884c\u3046\u306e\u304c\u826f\u3044\u3068\u8003\u3048\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3084\u3084\u30de\u30cb\u30a2\u30c3\u30af\u306a\u5185\u5bb9\u3060\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6b21\u7a3f\u3067\u306f\u57fa\u672c\u306b\u7acb\u3061\u8fd4\u308a\u3001\u300c\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u300d\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\n\n\u304a\u307e\u3051\uff1a\u30d0\u30a4\u30c8\u914d\u5217\u306e\u6539\u7ac4\u306b\u5099\u3048\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4f8b\nOdd \u30af\u30e9\u30b9\u3088\u308a\u3082\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u524d\u306e\u6295\u7a3f\u300e\u30ea\u30d0\u30fc\u30b7\u3067\u904a\u3093\u3067\u899a\u3048\u308b Java 8.\u300f\u3067\u7d39\u4ecb\u3057\u305f GitHub: \u30bd\u30fc\u30b9 \u306e\u4e2d\u304b\u3089\u30012\u3064\u306e\u30af\u30e9\u30b9\u3092\u53d6\u308a\u4e0a\u3052\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n\nMove\u30af\u30e9\u30b9 \uff1a \u3053\u306e\u30af\u30e9\u30b9\u306f\u30aa\u30bb\u30ed\u306e\u624b\u3092\u8868\u3057\u3001(Color, Point) \u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b\u4e0d\u5909\u30af\u30e9\u30b9\u3067\u3059\u3002\u6c7a\u3057\u3066 Color == null \u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001Odd \u3068\u540c\u69d8\u306b readObject \u3092\u5229\u7528\u3057\u3066\u9632\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\n\nStrictBoard\u30af\u30e9\u30b9 \uff1a \u3053\u306e\u30af\u30e9\u30b9\u306f\u30eb\u30fc\u30eb\u3092\u5fe0\u5b9f\u306b\u5b88\u308b\u30aa\u30bb\u30ed\u76e4\u3067\u3059\u3002\u30eb\u30fc\u30eb\u306b\u53cd\u3059\u308b\u72b6\u614b\u3092\u6c7a\u3057\u3066\u3068\u3089\u306a\u3044\u3088\u3046\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30d7\u30ed\u30ad\u30b7\u30d1\u30bf\u30fc\u30f3\u3092\u5229\u7528\u3057\u3066\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u8eab\u3092\u5b88\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306f\u3053\u308c\u304b\u3089\u3084\u308b\u4e88\u5b9a\u3067\u3059\u3002\u3002\u3002\n\n\u53c2\u8003\n\u6700\u5f8c\u306b\u3001\u672c\u7a3f\u3067\u7528\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\njava \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f java 8 \u3067\u3059\u3002\n\nOdd.java\uff08\u6539\uff09\npackage mypkg;\n\nimport java.io.IOException;\nimport java.io.InvalidObjectException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\n\npublic final class Odd implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private final int n;\n\n    public Odd(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd.\");\n        }\n        this.n = n;\n    }\n\n    public int get() {\n        return n;\n    }\n\n    private void readObject(ObjectInputStream stream)\n            throws ClassNotFoundException, IOException {\n\n        stream.defaultReadObject();\n\n        if (n < 1 || n % 2 == 0) {\n            throw new InvalidObjectException(\"illegal value. n == \" + n);\n        }\n    }\n}\n\n\n\nOddDemo.java\npackage mypkg;\n\nimport java.io.IOException;\nimport org.junit.Test;\n\npublic class OddDemo {\n\n    @Test\n    public void demo1() throws IOException {\n        Odd odd = new Odd(7);\n        byte[] bytes = TestUtil.serialize(odd);\n        System.out.println(TestUtil.toHexString(bytes));\n    }\n\n    @Test\n    public void demo2() throws IOException, ClassNotFoundException {\n        Odd odd = new Odd(7);\n\n        byte[] bytes = TestUtil.serialize(odd);\n        bytes[37] = 0x02;       // \u2605\u2605\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\uff01\u2605\u2605\n        odd = (Odd) TestUtil.deserialize(bytes);\n\n        System.out.println(\"odd.get() == \" + odd.get());\n    }\n}\n\n\n\nOddTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\nimport static xyz.hotchpotch.jutaime.throwable.RaiseMatchers.*;\nimport static xyz.hotchpotch.jutaime.throwable.Testee.*;\n\nimport java.io.IOException;\nimport java.io.InvalidObjectException;\nimport org.junit.Test;\n\npublic class OddTest {\n\n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        // \u6539\u7ac4\u3092\u884c\u308f\u306a\u3044\u6b63\u5e38\u30b1\u30fc\u30b9\uff087 -> 7\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n\n        assertThat(odd.get(), is(7));\n    }\n\n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        // \u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff087 -> 1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x01;\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n\n        assertThat(odd.get(), is(1));\n    }\n\n    @Test\n    public void test3() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u5076\u6570\u5024\uff087 -> 2\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x02;\n\n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == 2\"));\n    }\n\n    @Test\n    public void test4() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u30de\u30a4\u30ca\u30b9\u5024\uff087 -> -1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[34] = (byte) 0xff;\n        bytes[35] = (byte) 0xff;\n        bytes[36] = (byte) 0xff;\n        bytes[37] = (byte) 0xff;\n\n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == -1\"));\n    }\n}\n\n\n\nTestUtil.java\npackage mypkg;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Objects;\n\npublic class TestUtil {\n\n    public static byte[] serialize(Object obj) throws IOException {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n\n            oos.writeObject(obj);\n            return bos.toByteArray();\n        }\n    }\n\n    public static Object deserialize(byte[] bytes)\n            throws ClassNotFoundException, IOException {\n\n        Objects.requireNonNull(bytes);\n\n        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n                ObjectInputStream ois = new ObjectInputStream(bis)) {\n\n            return ois.readObject();\n        }\n    }\n\n    public static String toHexString(byte[] bytes) {\n        Objects.requireNonNull(bytes);\n\n        StringBuilder str = new StringBuilder();\n        for (byte b : bytes) {\n            str.append(String.format(\"%02x \", b));\n        }\n        return str.toString();\n    }\n\n    private TestUtil() {\n    }\n}\n\n\n\u203bxyz.hotchpotch.jutaime.throwable \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f \u3053\u3061\u3089\uff08GitHub\uff09 \u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\njava.io.Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u306a\u306e\u304b\u3092\u8003\u3048\u308b\u30b7\u30ea\u30fc\u30ba\u306e2\u56de\u76ee\u3067\u3059\u3002\n\n\u524d\u56de\u306e[\u300eSerializable\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8003\u3048\u308b\u300f \uff0d \u300c\u30b1\u30fc\u30b9\uff11\uff1a\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\u300d](http://qiita.com/nmby/items/1e240eecc3d2bdedc413)\u3067\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306a\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u3092\u884c\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f\u300c\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b\u300d\u3068\u984c\u3057\u3066\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30d0\u30a4\u30c8\u914d\u5217\u304c\u4e0d\u6b63\u306b\u6539\u7ac4\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u5099\u3048\u305f\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8003\u3048\u305f\u3044\u601d\u3044\u307e\u3059\u3002\n\n#\u304a\u3055\u3089\u3044\uff1a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f62\u5f0f\n\u3055\u3066\u3001\u6b21\u306e Odd \u30af\u30e9\u30b9\u306f\u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u305f int \u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n\n```java:Odd.java\uff08\u6ce8\u610f\uff01\u30d0\u30b0\u3092\u542b\u3080\u305f\u3081\u3001\u5947\u6570\u4ee5\u5916\u3082\u53d7\u3051\u4ed8\u3051\u3066\u3057\u307e\u3046\uff09\npackage mypkg;\n\nimport java.io.Serializable;\n\n/**\n * \u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b int \u306e\u4e0d\u5909\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n */\npublic final class Odd implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n    private final int n;\n    \n    public Odd(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd.\");\n        }\n        this.n = n;\n    }\n    \n    public int get() {\n        return n;\n    }\n}\n```\n\n\u307e\u305a\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n`new Odd(7);` \u3067\u751f\u6210\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3068\u3001\u6b21\u306e\u30d0\u30a4\u30c8\u914d\u5217\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u3053\u308c\u306f OddDemo#demo1 \u3092\u52d5\u304b\u3057\u3066\u5f97\u305f\u3082\u306e\u3067\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\uff09\n\n`ac ed 00 05 73 72 00 09 6d 79 70 6b 67 2e 4f 64 64 00 00 00 00 00 00 00 01 02 00 01 49 00 01 6e 78 70 00 00 00 07 `\n\n\u3053\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u8aad\u307f\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\n|\u6841|\u30d0\u30a4\u30c8\u914d\u5217|\u5185\u5bb9|\n|:--|:--|:--|\n|01-04|`ac ed 00 05`|\u56fa\u5b9a\u306e\u5b9a\u6570\u5024\u3067\u3059\u3002|\n|05-06|`73 72`|\u3053\u308c\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u304c\u7d9a\u304f\u3053\u3068\u3092\u8868\u3059\u5b9a\u6570\u5024\u3067\u3059\u3002|\n|07-17|`00 09 6d 79 70 6b 67 2e 4f 64 64`|9 \u6587\u5b57\u306e\u30af\u30e9\u30b9\u540d \"mypkg.Odd\" \u3092\u8868\u3057\u307e\u3059\u3002|\n|18-25|`00 00 00 00 00 00 00 01`|serialVersionUID==1L \u3092\u8868\u3057\u307e\u3059\u3002|\n|26|`02`|\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306b\u3088\u308a\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u756a\u53f7\u3067\u3059\u3002|\n|27|`00`|\u30af\u30e9\u30b9\u306e\u6027\u8cea\u3092\u8868\u3059\u30d5\u30e9\u30b0\u5024\u3067\u3059\u3002|\n|28|`01`|\uff11\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002|\n|29|`49`|int \u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002|\n|30-32|`00 01 6e`|1 \u6587\u5b57\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d \"n\" \u3092\u8868\u3057\u307e\u3059\u3002|\n|33|`78`|\u30af\u30e9\u30b9\u5b9a\u7fa9\u60c5\u5831\u306e\u7d42\u308f\u308a\u3092\u8868\u3059\u5b9a\u6570\u5024\u3067\u3059\u3002|\n|34|`70`|\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u7531\u6765\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u7121\u3044\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002|\n|35-38|`00 00 00 07`|\u30d5\u30a3\u30fc\u30eb\u30c9 n \u306e\u5024 7 \u3092\u8868\u3057\u307e\u3059\u3002|\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f62\u5f0f\u306e\u8a73\u7d30\u306f\u3001[Oracle: Java\u958b\u767a\u8005\u30ac\u30a4\u30c9](http://docs.oracle.com/javase/jp/8/docs/index.html) \u306e\u4e2d\u306e [\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8](http://docs.oracle.com/javase/jp/8/docs/platform/serialization/spec/protocol.html) \u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4eba\u9593\u304c\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u8aad\u3081\u308b\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u3053\u3068\u3092\u3054\u7406\u89e3\u3044\u305f\u3060\u3051\u305f\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u308c\u6545\u306b\u3001\u30d0\u30a4\u30c8\u914d\u5217\u306e\u6539\u7ac4\u3082\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\n#\u5b9f\u6f14\uff1a\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u9593\u9055\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\n\u3067\u306f\u5b9f\u969b\u306b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u3001\u8aa4\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u5f97\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java:OddDemo.java\uff08\u30bd\u30fc\u30b9\u5168\u4f53\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\uff09\npublic class OddDemo {\n    \n    // \u30fb\u30fb\u30fb\n    \n    @Test\n    public void demo2() throws IOException, ClassNotFoundException {\n        Odd odd = new Odd(7);\n        \n        byte[] bytes = TestUtil.serialize(odd);\n        bytes[37] = 0x02;       // \u2605\u2605\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\uff01\u2605\u2605\n        odd = (Odd) TestUtil.deserialize(bytes);\n        \n        System.out.println(\"odd.get() == \" + odd.get());\n    }\n}    \n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001`odd.get() == 2` \u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u5947\u6570\u3060\u3051\u3057\u304b\u6301\u3061\u3048\u306a\u3044\u306f\u305a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3001\u5076\u6570\u5024\u3092\u6301\u3063\u3066\u3057\u307e\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\nOdd \u30af\u30e9\u30b9\u304c\u5947\u6570\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3001\u305d\u308c\u3092 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u8b33\u3063\u3066\u3044\u308b\u4ee5\u4e0a\u3001\u3053\u306e\u3088\u3046\u306a\u4e8b\u614b\u3092\u9632\u3050\u306e\u306f Odd \u30af\u30e9\u30b9\u306e\u8cac\u4efb\u3067\u3059\u3002\u9632\u5fa1\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u306f\u3001Odd \u30af\u30e9\u30b9\u306b readObject(ObjectInputStream) \u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n```java:Odd.java\uff08\u6539\uff09\npublic final class Odd implements Serializable {\n    \n    // \uff08\u7565\uff09\n    \n    private void readObject(ObjectInputStream stream)\n            throws ClassNotFoundException, IOException {\n            \n        stream.defaultReadObject();\n        \n        if (n < 1 || n % 2 == 0) {\n            throw new InvalidObjectException(\"illegal value. n == \" + n);\n        }\n    }\n}\n```\n\nreadObject \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u904e\u7a0b\u3067\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5185\u90e8\u3067\u306f\u3001\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u5fa9\u5143\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9 n \u306e\u5024\u3092\u691c\u67fb\u3057\u3001\u4e0d\u6b63\u306a\u5024\u306e\u5834\u5408\u306f\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u518d\u3073 demo2 \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u3066\u5931\u6557\u3057\u307e\u3059\u3002\u4e0d\u6b63\u306a\u5185\u5bb9\u306e Odd \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4e16\u306b\u51fa\u56de\u308b\u3053\u3068\u306f\u3082\u306f\u3084\u3042\u308a\u307e\u305b\u3093\u3002\n\n#\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u305f\u3081\u306b\u5b9f\u88c5\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u30bd\u30fc\u30b9\u306e\u673a\u4e0a\u78ba\u8a8d\u3060\u3051\u3067\u62c5\u4fdd\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u3044\u3067\u3059\u3002\u3084\u306f\u308a\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\u8ffd\u52a0\u3057\u305f readObject \u304c\u610f\u56f3\u3057\u305f\u901a\u308a\u306b\u52d5\u304f\u304b\u3092\u3001\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u305f\u30d0\u30a4\u30c8\u914d\u5217\u3092\u5b9f\u969b\u306b\u4e0e\u3048\u308b\u3053\u3068\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java:OddTest.java\npublic class OddTest {\n    \n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        // \u6539\u7ac4\u3092\u884c\u308f\u306a\u3044\u6b63\u5e38\u30b1\u30fc\u30b9\uff087 -> 7\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n        \n        assertThat(odd.get(), is(7));\n    }\n    \n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        // \u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff087 -> 1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x01;\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n        \n        assertThat(odd.get(), is(1));\n    }\n    \n    @Test\n    public void test3() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u5076\u6570\u5024\uff087 -> 2\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x02;\n        \n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == 2\"));\n    }\n    \n    @Test\n    public void test4() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u30de\u30a4\u30ca\u30b9\u5024\uff087 -> -1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[34] = (byte) 0xff;\n        bytes[35] = (byte) 0xff;\n        bytes[36] = (byte) 0xff;\n        bytes[37] = (byte) 0xff;\n        \n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == -1\"));\n    }\n}\n```\n\n\u4e0a\u8a18\u306e\u30c6\u30b9\u30c8\u306f\u3044\u305a\u308c\u3082\u6210\u529f\u3057\u307e\u3059\u3002\nOdd#readObject(ObjectInputStream) \u304c\u72d9\u3044\u901a\u308a\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u203b \u306a\u304a\u3001test3 \u3068 test4 \u3067\u884c\u3063\u3066\u3044\u308b\u4f8b\u5916\u767a\u751f\u691c\u8a3c\u3067\u306f\u3001[\u4ee5\u524d\u306e\u6295\u7a3f\u300eJUnit4\u3067\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\u3092\u697d\u30c1\u30f3\u306b\u3059\u308b\uff01\u300f](http://qiita.com/nmby/items/4911e8c36088139aa0ba)\u3067\u7d39\u4ecb\u3057\u305f [GitHub: \u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/nmby/jUtaime) \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u307e\u3068\u3081\n\n* \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d0\u30a4\u30c8\u914d\u5217\u3092\u8aad\u307f\u89e3\u3044\u3066\u6539\u7ac4\u3059\u308b\u3053\u3068\u306f\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u3067\u3059\u3002\n* public \u306a\u30e1\u30bd\u30c3\u30c9\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u691c\u67fb\u3092\u884c\u3046\u3053\u3068\u306b\u3088\u308a\u4e0d\u6b63\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u304b\u3089\u8eab\u3092\u5b88\u308b\u306e\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3088\u3046\u306b\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306b\u4e0d\u6b63\u306b\u6539\u7ac4\u3055\u308c\u305f\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u8eab\u3092\u5b88\u308b\u306e\u306f\u3001Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u81ea\u8eab\u306e\u8cac\u4efb\u3067\u3059\u3002\n* [Oracle: Java\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u76f4\u5217\u5316\u4ed5\u69d8](http://docs.oracle.com/javase/jp/8/docs/platform/serialization/spec/serialTOC.html) \u3067\u306f\u3001\u5404\u30af\u30e9\u30b9\u3067\u9632\u5fa1\u6a5f\u69cb\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e readObject \u306a\u3069\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n* \u5b9f\u88c5\u3092\u884c\u3063\u305f\u4ee5\u4e0a\u3001\u5b9f\u969b\u306b\u52d5\u304b\u3059\u3053\u3068\u306b\u3088\u308a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u672c\u7a3f\u3067\u4f8b\u793a\u3057\u305f\u3088\u3046\u306b\u3001\u4e0d\u6b63\u306b\u6539\u7ac4\u3057\u305f\u30d0\u30a4\u30c8\u5217\u3092\u5b9f\u969b\u306b\u4e0e\u3048\u308b\u30c6\u30b9\u30c8\u3092\u884c\u3046\u306e\u304c\u826f\u3044\u3068\u8003\u3048\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3084\u3084\u30de\u30cb\u30a2\u30c3\u30af\u306a\u5185\u5bb9\u3060\u3063\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6b21\u7a3f\u3067\u306f\u57fa\u672c\u306b\u7acb\u3061\u8fd4\u308a\u3001[\u300c\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u300d](http://qiita.com/nmby/items/b6e858791b254d67efe2)\u306b\u3064\u3044\u3066\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\n\n#\u304a\u307e\u3051\uff1a\u30d0\u30a4\u30c8\u914d\u5217\u306e\u6539\u7ac4\u306b\u5099\u3048\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u4f8b\nOdd \u30af\u30e9\u30b9\u3088\u308a\u3082\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u4f8b\u3068\u3057\u3066\u3001[\u4ee5\u524d\u306e\u6295\u7a3f\u300e\u30ea\u30d0\u30fc\u30b7\u3067\u904a\u3093\u3067\u899a\u3048\u308b Java 8.\u300f](http://qiita.com/nmby/items/bd44e28d937108fa3eb0)\u3067\u7d39\u4ecb\u3057\u305f [GitHub: \u30bd\u30fc\u30b9](https://github.com/nmby/reversi) \u306e\u4e2d\u304b\u3089\u30012\u3064\u306e\u30af\u30e9\u30b9\u3092\u53d6\u308a\u4e0a\u3052\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n* __[Move\u30af\u30e9\u30b9](https://github.com/nmby/reversi/blob/master/project/src/main/java/xyz/hotchpotch/game/reversi/core/Move.java)__ \uff1a \u3053\u306e\u30af\u30e9\u30b9\u306f\u30aa\u30bb\u30ed\u306e\u624b\u3092\u8868\u3057\u3001(Color, Point) \u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b\u4e0d\u5909\u30af\u30e9\u30b9\u3067\u3059\u3002\u6c7a\u3057\u3066 Color == null \u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001Odd \u3068\u540c\u69d8\u306b readObject \u3092\u5229\u7528\u3057\u3066\u9632\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\n* __[StrictBoard\u30af\u30e9\u30b9](https://github.com/nmby/reversi/blob/master/project/src/main/java/xyz/hotchpotch/game/reversi/core/StrictBoard.java)__ \uff1a \u3053\u306e\u30af\u30e9\u30b9\u306f\u30eb\u30fc\u30eb\u3092\u5fe0\u5b9f\u306b\u5b88\u308b\u30aa\u30bb\u30ed\u76e4\u3067\u3059\u3002\u30eb\u30fc\u30eb\u306b\u53cd\u3059\u308b\u72b6\u614b\u3092\u6c7a\u3057\u3066\u3068\u3089\u306a\u3044\u3088\u3046\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30d7\u30ed\u30ad\u30b7\u30d1\u30bf\u30fc\u30f3\u3092\u5229\u7528\u3057\u3066\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u8eab\u3092\u5b88\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u306f\u3053\u308c\u304b\u3089\u3084\u308b\u4e88\u5b9a\u3067\u3059\u3002\u3002\u3002\n\n#\u53c2\u8003\n\u6700\u5f8c\u306b\u3001\u672c\u7a3f\u3067\u7528\u3044\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\njava \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f java 8 \u3067\u3059\u3002\n\n```java:Odd.java\uff08\u6539\uff09\npackage mypkg;\n\nimport java.io.IOException;\nimport java.io.InvalidObjectException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\n\npublic final class Odd implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n    private final int n;\n    \n    public Odd(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd.\");\n        }\n        this.n = n;\n    }\n    \n    public int get() {\n        return n;\n    }\n    \n    private void readObject(ObjectInputStream stream)\n            throws ClassNotFoundException, IOException {\n            \n        stream.defaultReadObject();\n        \n        if (n < 1 || n % 2 == 0) {\n            throw new InvalidObjectException(\"illegal value. n == \" + n);\n        }\n    }\n}\n```\n\n```java:OddDemo.java\npackage mypkg;\n\nimport java.io.IOException;\nimport org.junit.Test;\n\npublic class OddDemo {\n    \n    @Test\n    public void demo1() throws IOException {\n        Odd odd = new Odd(7);\n        byte[] bytes = TestUtil.serialize(odd);\n        System.out.println(TestUtil.toHexString(bytes));\n    }\n    \n    @Test\n    public void demo2() throws IOException, ClassNotFoundException {\n        Odd odd = new Odd(7);\n        \n        byte[] bytes = TestUtil.serialize(odd);\n        bytes[37] = 0x02;       // \u2605\u2605\u30d0\u30a4\u30c8\u914d\u5217\u3092\u4e0d\u6b63\u306b\u6539\u7ac4\u3059\u308b\uff01\u2605\u2605\n        odd = (Odd) TestUtil.deserialize(bytes);\n        \n        System.out.println(\"odd.get() == \" + odd.get());\n    }\n}\n```\n\n```java:OddTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\nimport static xyz.hotchpotch.jutaime.throwable.RaiseMatchers.*;\nimport static xyz.hotchpotch.jutaime.throwable.Testee.*;\n\nimport java.io.IOException;\nimport java.io.InvalidObjectException;\nimport org.junit.Test;\n\npublic class OddTest {\n    \n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        // \u6539\u7ac4\u3092\u884c\u308f\u306a\u3044\u6b63\u5e38\u30b1\u30fc\u30b9\uff087 -> 7\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n        \n        assertThat(odd.get(), is(7));\n    }\n    \n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        // \u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff087 -> 1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x01;\n        Odd odd = (Odd) TestUtil.deserialize(bytes);\n        \n        assertThat(odd.get(), is(1));\n    }\n    \n    @Test\n    public void test3() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u5076\u6570\u5024\uff087 -> 2\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[37] = 0x02;\n        \n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == 2\"));\n    }\n    \n    @Test\n    public void test4() throws IOException, ClassNotFoundException {\n        // \u4e0d\u6b63\u306a\u5185\u5bb9\u306b\u6539\u7ac4\u3092\u52a0\u3048\u305f\u30b1\u30fc\u30b9\uff1a\u30de\u30a4\u30ca\u30b9\u5024\uff087 -> -1\uff09\n        byte[] bytes = TestUtil.serialize(new Odd(7));\n        bytes[34] = (byte) 0xff;\n        bytes[35] = (byte) 0xff;\n        bytes[36] = (byte) 0xff;\n        bytes[37] = (byte) 0xff;\n        \n        assertThat(of(() -> TestUtil.deserialize(bytes)),\n                raise(InvalidObjectException.class, \"illegal value. n == -1\"));\n    }\n}\n```\n\n```java:TestUtil.java\npackage mypkg;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Objects;\n\npublic class TestUtil {\n    \n    public static byte[] serialize(Object obj) throws IOException {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n                \n            oos.writeObject(obj);\n            return bos.toByteArray();\n        }\n    }\n    \n    public static Object deserialize(byte[] bytes)\n            throws ClassNotFoundException, IOException {\n            \n        Objects.requireNonNull(bytes);\n        \n        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n                ObjectInputStream ois = new ObjectInputStream(bis)) {\n                \n            return ois.readObject();\n        }\n    }\n    \n    public static String toHexString(byte[] bytes) {\n        Objects.requireNonNull(bytes);\n        \n        StringBuilder str = new StringBuilder();\n        for (byte b : bytes) {\n            str.append(String.format(\"%02x \", b));\n        }\n        return str.toString();\n    }\n    \n    private TestUtil() {\n    }\n}\n```\n\n\u203b`xyz.hotchpotch.jutaime.throwable` \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u306f [\u3053\u3061\u3089\uff08GitHub\uff09](https://github.com/nmby/jUtaime) \u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Java", "test", "\u30c6\u30b9\u30c8", "JUnit", "serialize"]}