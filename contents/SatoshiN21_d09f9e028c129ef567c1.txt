{"context": "\u305d\u308d\u305d\u308dSwift\u3092\u793e\u5185\u306e\u6848\u4ef6\u306b\u5c0e\u5165\u3057\u3088\u3046\u304b\u691c\u8a0e\u4e2d\u3067\u3059\u3002\n\u53d7\u8a17\u6848\u4ef6\u3067\u306f\u307b\u307c\u5fc5\u9808\u6a5f\u80fd\u3068\u8a00\u3048\u308b\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d4c\u7531\u3067JSON\u53d6\u5f97\nJSON\u3092\u30d1\u30fc\u30b9\u3057\u3066DB\u306binsert\nDB\u306e\u5024\u3092TableView\u306b\u8868\u793a\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\n\u305b\u3063\u304b\u304f\u30ca\u30a6\u306a\u8a00\u8a9e\u3067\u3042\u308bSwift\u306a\u3093\u3060\u304b\u3089\u3001\u30a4\u30b1\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30ad\u30e1\u30ad\u30e1\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u305f\u3044\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Swift\u3084\u65b0\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8abf\u67fb\u304c\u3066\u3089\u3001\u3056\u3063\u304f\u308a\u3068\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u30b5\u30f3\u30d7\u30eb\u3092\u3053\u3061\u3089\u306b\u3042\u3052\u3066\u307f\u307e\u3057\u305f\nGithub - SatoshiN21/RealmSample\n\u203b\u3056\u3063\u304f\u308a\u3068Swift3\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u306f\u3066\u30d6\u306eIT\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u30fcRSS\u3092JSON\u5f62\u5f0f\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ca\u30a6\u306aMaterial Design\u306eCardView\u3063\u307d\u3044\u898b\u305f\u76ee\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n1. JSON\u53d6\u5f97\nAlamofire\u3067\u306f\u3066\u30d6\u306e\u30d5\u30a3\u30fc\u30c9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u30fc\u306fRSS\u5f62\u5f0f\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001google\u306eAPI\u3092\u7528\u3044\u3066JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u307e\u3057\u305f\u3002\nimport Alamofire\nimport SwiftyJSON\n\n//  google JSON api + hatena bookmark hotentry\nlet hotEntryUrl = \"https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&q=http://b.hatena.ne.jp/hotentry/it.rss&num=100\"\n\n// Alamofire\u3092\u7528\u3044\u3066GET\u30ea\u30af\u30a8\u30b9\u30c8\nAlamofire.request(hotEntryUrl).responseJSON { (response) in\n\n    guard response.result.isSuccess, let value = response.result.value else {\n\n        // FIXME:\u4fbf\u5b9c\u4e0a\u3053\u3061\u3089\u7121\u8996\u3057\u3066\u307e\u3059\u304c\u3001\u5b9f\u88c5\u6642\u306f\u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n        return\n    }\n\n    // SwiftyJSON\u65b9\u5f0f\n    let json = JSON(value)\n\uff5d\n\n\u53d6\u5f97\u3057\u305fJSON\u3092SwiftyJSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u6301\u3061\u76f4\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\uff01\n\n2. JSON\u3092\u30d1\u30fc\u30b9\u3057\u3066DB\u306binsert\nSwiftyJSON\u5f62\u5f0f\u306b\u3059\u308b\u3068\u3001\u30d1\u30fc\u30b9\u4f5c\u696d\u304c\u6357\u308a\u307e\u3059\u306d\uff01\u30c1\u30a7\u30fc\u30f3\u72b6\u306b\u76ee\u7684\u306e\u30a8\u30ec\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30a8\u30f3\u30c8\u30ea\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nlet json = JSON(responseObject!)\nlet entries = json[\"responseData\"][\"feed\"][\"entries\"]\n\nObjectMapper\u3092\u7528\u3044\u3066Entry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\nObjectMapper\u3068Realm\u3092\u5171\u5b58\u3055\u305b\u308b\u65b9\u6cd5\u306fgologo13\u3055\u3093\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\nimport ObjectMapper\n\nrealm.beginWrite()\n\n// JSON\u3092Entry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\nfor (_, subJson) in entries {\n    if let entry = Mapper<Entry>().map(JSONObject: subJson.dictionaryObject) {\n        realm.add(entry, update: true)\n    }\n}\n\nrealm.commitWrite()\n\nRealmSwift.Object\u3092\u7d99\u627f\u3057\u305fEntry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e\u4ed5\u69d8\u306f\u307b\u307c\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u3044\u305f\u8a18\u4e8b\u3068\u540c\u69d8\u3067\u3059\u304c\u3001\n\u516c\u958b\u65e5\u306e\u65e5\u4ed8\u3092\u72ec\u81ea\u5b9a\u7fa9\u3057\u305fDateTransform\u3067Date\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\nextension Entry : Mappable {\n\n    func mapping(map: Map) {\n        content         <- map[\"content\"]\n        link            <- map[\"link\"]\n        publishedDate   <- (map[\"publishedDate\"] , EntryDateTransform())\n        title           <- map[\"title\"]\n        contentSnippet  <- map[\"contentSnippet\"]\n    }\n}\n\n// \u72ec\u81ea\u5b9a\u7fa9\u3057\u305fDateTransform\n// \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068NSLocale\u3092\u6307\u5b9a\u3057\u3066String\u3092NSDate\u306b\u5909\u63db\nclass EntryDateTransform : DateTransform {\n    override func transformFromJSON(_ value: Any?) -> Date? {\n        if let dateStr = value as? String {\n            return Date.dateWithString(\n                dateStr,\n                format: \"E, dd MMM yyyy HH:mm:ss zzzz\" ,\n                locale : Locale(identifier: \"en_US\"))\n        }\n        return nil\n    }\n}\n\nextension Date {\n    public static func dateWithString(_ dateStr : String? , format : String, locale : Locale) ->Date? {\n\n        guard let dateStr = dateStr else {\n            return nil\n        }\n        let df : DateFormatter = DateFormatter()\n        df.locale = Locale(identifier: \"en_US\")\n        df.timeZone = TimeZone.current\n        df.dateFormat = format\n        return df.date(from: dateStr)\n    }\n}\n\n\n3. DB\u306e\u5024\u3092TableView\u306b\u8868\u793a\nRealm\u306e\u66f4\u65b0\u304c\u767a\u751f\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067UITableView#reloadData()\u3092\u5b9f\u884c\u3057\u3001UITableView\u306e\u8868\u793a\u3092\u66f4\u65b0\u3002\nRealmSwift.Object\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067objects(type: Object.Type)\u3092\u547c\u3073\u51fa\u3059\u3068\u3001DB\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u5024\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n    func updateTableView() {\n\n        do {\n            self.entries = try Realm().objects(Entry.self).sorted(by: { (entry1, entry2) -> Bool in\n            let res = entry1.publishedDate.compare(entry2.publishedDate)\n            return (res == .orderedAscending || res == .orderedSame)\n            })\n        }catch {}\n\n        tableView.reloadData()\n    }\n\n    // MARK:- UITableView DataSource / Delegate\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        if let entries = entries {\n            return entries.count\n        }\n        return 0\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n\n        let cell  = tableView.dequeueReusableCell(withIdentifier: \"CellIdentifier\") as! EntryTableViewCell\n\n        // if entries have been nil,\"cellForRowAtIndexPath:indexPath:\" isn't called.\n        let entry = entries![indexPath.row]\n\n        // date format.\n        let df = DateFormatter()\n        df.locale = Locale(identifier: \"ja_JP\")\n        df.timeZone = TimeZone.current\n        df.dateFormat = \"MM/dd\"\n        let dateStr = df.string(from: entry.publishedDate as Date)\n\n        cell.titleLabel.text = [dateStr,entry.title].joined(separator: \" \")\n        cell.descriptionLabel.text = entry.contentSnippet\n\n        return cell\n    }\n\n\n\u4ee5\u4e0a\n\u304b\u306a\u308a\u3056\u3063\u304f\u308a\u3068\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001JSON\u3092\u53d6\u5f97\u3057\u3001\u5185\u90e8DB\u306b\u4fdd\u5b58/\u8868\u793a\u306e\u65b9\u5411\u6027\u306f\u898b\u3048\u305f\u304b\u306a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\nObjective-C\u306e\u6642\u306fCoreData\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30c7\u30fc\u30bf\u304c\u80a5\u5927\u5316\u3059\u308b\u307b\u3069\u307f\u308b\u307f\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u843d\u3061\u3066\u3044\u304f\u69d8\u306b\u5446\u7136\u3068\u3057\u3066\u3044\u305f\u8a18\u61b6\u304c\u3042\u308a\u307e\u3059\u3002\nRealm\u3092\u4f7f\u3063\u3066\u3069\u308c\u307b\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5dee\u304c\u51fa\u308b\u306e\u304b\u3001\u3044\u307e\u304b\u3089\u697d\u3057\u307f\u3067\u3059\u3002\n\n\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u3044\u305f\u8a18\u4e8b\n[Swift]ObjectMapper\u3092\u4f7f\u3063\u305fRealm\u30e2\u30c7\u30eb\u3078\u306eJSON\u30de\u30c3\u30d4\u30f3\u30b0 - Qiita\n\u60c5\u5f31\u304cSwift\u7528\u306eObjectMapper\u8aad\u3093\u3067\u307f\u305f - Qiita\n\u305d\u308d\u305d\u308dSwift\u3092\u793e\u5185\u306e\u6848\u4ef6\u306b\u5c0e\u5165\u3057\u3088\u3046\u304b\u691c\u8a0e\u4e2d\u3067\u3059\u3002\n\u53d7\u8a17\u6848\u4ef6\u3067\u306f\u307b\u307c\u5fc5\u9808\u6a5f\u80fd\u3068\u8a00\u3048\u308b\n\n1. \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d4c\u7531\u3067JSON\u53d6\u5f97\n2. JSON\u3092\u30d1\u30fc\u30b9\u3057\u3066DB\u306binsert\n3. DB\u306e\u5024\u3092TableView\u306b\u8868\u793a\n\n\u3068\u3044\u3046\u6d41\u308c\u3002\n\u305b\u3063\u304b\u304f\u30ca\u30a6\u306a\u8a00\u8a9e\u3067\u3042\u308bSwift\u306a\u3093\u3060\u304b\u3089\u3001\u30a4\u30b1\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30ad\u30e1\u30ad\u30e1\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u305f\u3044\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Swift\u3084\u65b0\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8abf\u67fb\u304c\u3066\u3089\u3001\u3056\u3063\u304f\u308a\u3068\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\n\u30b5\u30f3\u30d7\u30eb\u3092\u3053\u3061\u3089\u306b\u3042\u3052\u3066\u307f\u307e\u3057\u305f\n[Github - SatoshiN21/RealmSample](https://github.com/SatoshiN21/RealmSample)\n\u203b\u3056\u3063\u304f\u308a\u3068Swift3\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u306f\u3066\u30d6\u306eIT\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u30fcRSS\u3092JSON\u5f62\u5f0f\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ca\u30a6\u306a[Material Design\u306eCardView](http://www.google.com/design/spec/components/cards.html)\u3063\u307d\u3044\u898b\u305f\u76ee\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n![iOS Simulator Screen Shot 2015.05.14 19.13.05.png](https://qiita-image-store.s3.amazonaws.com/0/33817/ea41e84f-4026-4669-7a4b-191b97dacdc9.png \"iOS Simulator Screen Shot 2015.05.14 19.13.05.png\")\n\n\n## 1. JSON\u53d6\u5f97\nAlamofire\u3067\u306f\u3066\u30d6\u306e\u30d5\u30a3\u30fc\u30c9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u30fc\u306fRSS\u5f62\u5f0f\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001[google\u306eAPI](https://developers.google.com/feed/v1/jsondevguide#loadContext)\u3092\u7528\u3044\u3066JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u307e\u3057\u305f\u3002\n\n```swift\nimport Alamofire\nimport SwiftyJSON\n\n//  google JSON api + hatena bookmark hotentry\nlet hotEntryUrl = \"https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&q=http://b.hatena.ne.jp/hotentry/it.rss&num=100\"\n\n// Alamofire\u3092\u7528\u3044\u3066GET\u30ea\u30af\u30a8\u30b9\u30c8\nAlamofire.request(hotEntryUrl).responseJSON { (response) in\n            \n    guard response.result.isSuccess, let value = response.result.value else {\n                \n        // FIXME:\u4fbf\u5b9c\u4e0a\u3053\u3061\u3089\u7121\u8996\u3057\u3066\u307e\u3059\u304c\u3001\u5b9f\u88c5\u6642\u306f\u30a8\u30e9\u30fc\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n        return\n    }\n            \n    // SwiftyJSON\u65b9\u5f0f\n    let json = JSON(value)\n\uff5d\n```\n\u53d6\u5f97\u3057\u305fJSON\u3092SwiftyJSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u6301\u3061\u76f4\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u306f\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\uff01\n\n## 2. JSON\u3092\u30d1\u30fc\u30b9\u3057\u3066DB\u306binsert\nSwiftyJSON\u5f62\u5f0f\u306b\u3059\u308b\u3068\u3001\u30d1\u30fc\u30b9\u4f5c\u696d\u304c\u6357\u308a\u307e\u3059\u306d\uff01\u30c1\u30a7\u30fc\u30f3\u72b6\u306b\u76ee\u7684\u306e\u30a8\u30ec\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30a8\u30f3\u30c8\u30ea\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```swift\nlet json = JSON(responseObject!)\nlet entries = json[\"responseData\"][\"feed\"][\"entries\"]\n```\n\n\nObjectMapper\u3092\u7528\u3044\u3066Entry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\nObjectMapper\u3068Realm\u3092\u5171\u5b58\u3055\u305b\u308b\u65b9\u6cd5\u306f[gologo13\u3055\u3093\u306e\u6295\u7a3f](http://qiita.com/gologo13/items/713e3ffccaf77cc79dd4)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n\n```swift\nimport ObjectMapper\n\nrealm.beginWrite()\n\n// JSON\u3092Entry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\nfor (_, subJson) in entries {\n    if let entry = Mapper<Entry>().map(JSONObject: subJson.dictionaryObject) {\n        realm.add(entry, update: true)\n    }\n}\n\nrealm.commitWrite()\n```\n\nRealmSwift.Object\u3092\u7d99\u627f\u3057\u305fEntry\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e\u4ed5\u69d8\u306f\u307b\u307c\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u3044\u305f\u8a18\u4e8b\u3068\u540c\u69d8\u3067\u3059\u304c\u3001\n\u516c\u958b\u65e5\u306e\u65e5\u4ed8\u3092\u72ec\u81ea\u5b9a\u7fa9\u3057\u305fDateTransform\u3067Date\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```swift\nextension Entry : Mappable {\n    \n    func mapping(map: Map) {\n        content         <- map[\"content\"]\n        link            <- map[\"link\"]\n        publishedDate   <- (map[\"publishedDate\"] , EntryDateTransform())\n        title           <- map[\"title\"]\n        contentSnippet  <- map[\"contentSnippet\"]\n    }\n}\n\n// \u72ec\u81ea\u5b9a\u7fa9\u3057\u305fDateTransform\n// \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068NSLocale\u3092\u6307\u5b9a\u3057\u3066String\u3092NSDate\u306b\u5909\u63db\nclass EntryDateTransform : DateTransform {\n    override func transformFromJSON(_ value: Any?) -> Date? {\n        if let dateStr = value as? String {\n            return Date.dateWithString(\n                dateStr,\n                format: \"E, dd MMM yyyy HH:mm:ss zzzz\" ,\n                locale : Locale(identifier: \"en_US\"))\n        }\n        return nil\n    }\n}\n\nextension Date {\n    public static func dateWithString(_ dateStr : String? , format : String, locale : Locale) ->Date? {\n        \n        guard let dateStr = dateStr else {\n            return nil\n        }\n        let df : DateFormatter = DateFormatter()\n        df.locale = Locale(identifier: \"en_US\")\n        df.timeZone = TimeZone.current\n        df.dateFormat = format\n        return df.date(from: dateStr)\n    }\n}\n```\n\n## 3. DB\u306e\u5024\u3092TableView\u306b\u8868\u793a\nRealm\u306e\u66f4\u65b0\u304c\u767a\u751f\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067UITableView#reloadData()\u3092\u5b9f\u884c\u3057\u3001UITableView\u306e\u8868\u793a\u3092\u66f4\u65b0\u3002\nRealmSwift.Object\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067objects(type: Object.Type)\u3092\u547c\u3073\u51fa\u3059\u3068\u3001DB\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u5024\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```swift\n    func updateTableView() {\n\n        do {\n            self.entries = try Realm().objects(Entry.self).sorted(by: { (entry1, entry2) -> Bool in\n            let res = entry1.publishedDate.compare(entry2.publishedDate)\n            return (res == .orderedAscending || res == .orderedSame)\n            })\n        }catch {}\n        \n        tableView.reloadData()\n    }\n    \n    // MARK:- UITableView DataSource / Delegate\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        if let entries = entries {\n            return entries.count\n        }\n        return 0\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        \n        let cell  = tableView.dequeueReusableCell(withIdentifier: \"CellIdentifier\") as! EntryTableViewCell\n        \n        // if entries have been nil,\"cellForRowAtIndexPath:indexPath:\" isn't called.\n        let entry = entries![indexPath.row]\n        \n        // date format.\n        let df = DateFormatter()\n        df.locale = Locale(identifier: \"ja_JP\")\n        df.timeZone = TimeZone.current\n        df.dateFormat = \"MM/dd\"\n        let dateStr = df.string(from: entry.publishedDate as Date)\n        \n        cell.titleLabel.text = [dateStr,entry.title].joined(separator: \" \")\n        cell.descriptionLabel.text = entry.contentSnippet\n        \n        return cell\n    }\n```\n\n## \u4ee5\u4e0a\n\u304b\u306a\u308a\u3056\u3063\u304f\u308a\u3068\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001JSON\u3092\u53d6\u5f97\u3057\u3001\u5185\u90e8DB\u306b\u4fdd\u5b58/\u8868\u793a\u306e\u65b9\u5411\u6027\u306f\u898b\u3048\u305f\u304b\u306a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\nObjective-C\u306e\u6642\u306fCoreData\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30c7\u30fc\u30bf\u304c\u80a5\u5927\u5316\u3059\u308b\u307b\u3069\u307f\u308b\u307f\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u843d\u3061\u3066\u3044\u304f\u69d8\u306b\u5446\u7136\u3068\u3057\u3066\u3044\u305f\u8a18\u61b6\u304c\u3042\u308a\u307e\u3059\u3002\nRealm\u3092\u4f7f\u3063\u3066\u3069\u308c\u307b\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5dee\u304c\u51fa\u308b\u306e\u304b\u3001\u3044\u307e\u304b\u3089\u697d\u3057\u307f\u3067\u3059\u3002\n\n## \u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u3044\u305f\u8a18\u4e8b\n[[Swift]ObjectMapper\u3092\u4f7f\u3063\u305fRealm\u30e2\u30c7\u30eb\u3078\u306eJSON\u30de\u30c3\u30d4\u30f3\u30b0 - Qiita](http://qiita.com/gologo13/items/713e3ffccaf77cc79dd4)\n[\u60c5\u5f31\u304cSwift\u7528\u306eObjectMapper\u8aad\u3093\u3067\u307f\u305f - Qiita](http://qiita.com/stenpel/items/66350f6a23daf2cf894c)\n", "tags": ["Swift", "Realm"]}