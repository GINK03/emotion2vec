{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/40389\n\u306e\u3001\u5f53\u65e5\u306e\u554f\u984c(\u30b5\u30a4\u30b3\u30ed\u3092\u8ee2\u304c\u3059)\nhttp://nabetani.sakura.ne.jp/hena/ord12rotdice/\n\u306e\u5b9f\u88c5\u4f8b\u3002\nruby\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/f3cca410428f90333e28\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\u3067\u3002\nrequire 'matrix'\n\ndef topof(s)\n  s.each{ |e,a|\n    break e if a[0,2]==1\n    break 7-e if a[0,2]==-1\n  }.to_s\nend\n\ndef mx(c)\n  case c\n    when 'S'; mx('N').inv\n    when 'E'; mx('W').inv\n    when 'N'; Matrix[ [1,0,0], [0,0,-1], [0,1,0]]\n    when 'W'; Matrix[ [0,0,-1], [0,1,0], [1,0,0]]\n    else; raise \"??\"\n  end\nend\n\ndef solve( src )\n  s=[ [1, Matrix[[0,0,1]]],\n      [2, Matrix[[0,1,0]]],\n      [3, Matrix[[1,0,0]]]]\n  src.chars.each_with_object( topof(s) ){ |c, r|\n    m=mx(c)\n    s=s.map{ |e,a| [e,a*m] }\n    r.concat( topof(s) )\n  }\nend\n\nraise( \"FAIL\" ) unless DATA.inject(1){ |r,line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  ok = expected == actual\n  puts \"#{num} #{ok ? 'ok' : '***NG***' } : #{src} -> #{actual} ( #{expected})\"\n  $stdout.flush\n  r && ok\n}\n__END__\n0 NNESWWS 15635624\n1 EEEE  13641\n2 WWWW  14631\n3 SSSS  12651\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u30b5\u30a4\u30b3\u30ed\u3092\u8ee2\u304c\u3059\u3093\u3060\u304b\u3089\u4e09\u6b21\u5143\u3002\u5e73\u884c\u79fb\u52d5\u304c\u306a\u3044\u306e\u3067 3\u27153 \u306e\u884c\u5217\u3067\u3044\u3044\u3088\u306d\u3002\n\u3068\u3044\u3046\u5b9f\u88c5\u3002\n\u51fa\u984c\u8005\u3068\u3057\u3066\u306f\u8ab0\u304b\u304c\u3053\u3046\u3044\u3046\u306e\u3092\u66f8\u304f\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u305f\u3093\u3060\u3051\u3069\u3001\u8ab0\u3082\u66f8\u304b\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u66f8\u3044\u305f\u3002\n\u9006\u884c\u5217\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u4fbf\u5229\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u884c\u5217\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u74b0\u5883\u3060\u3068\u3061\u3087\u3063\u3068\u3084\u308b\u6c17\u306b\u306a\u3089\u306a\u3044\u3051\u3069\u3001ruby \u3084 python \u3060\u3068\u73fe\u5b9f\u7684\u3060\u3068\u601d\u3046\u3002\nconcat \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001each_with_object \u3060\u304b\u3089\u3002+= \u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\u3061\u306a\u307f\u306b\u30012.0.0 \u3068 1.9.3 \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3002\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/40389\n\u306e\u3001\u5f53\u65e5\u306e\u554f\u984c(\u30b5\u30a4\u30b3\u30ed\u3092\u8ee2\u304c\u3059)\nhttp://nabetani.sakura.ne.jp/hena/ord12rotdice/\n\u306e\u5b9f\u88c5\u4f8b\u3002\n\nruby\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/f3cca410428f90333e28\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n\u3067\u3002\n\n```ruby\nrequire 'matrix'\n\ndef topof(s)\n  s.each{ |e,a|\n    break e if a[0,2]==1\n    break 7-e if a[0,2]==-1\n  }.to_s\nend\n\ndef mx(c)\n  case c\n    when 'S'; mx('N').inv\n    when 'E'; mx('W').inv\n    when 'N'; Matrix[ [1,0,0], [0,0,-1], [0,1,0]]\n    when 'W'; Matrix[ [0,0,-1], [0,1,0], [1,0,0]]\n    else; raise \"??\"\n  end\nend\n\ndef solve( src )\n  s=[ [1, Matrix[[0,0,1]]],\n      [2, Matrix[[0,1,0]]],\n      [3, Matrix[[1,0,0]]]]\n  src.chars.each_with_object( topof(s) ){ |c, r|\n    m=mx(c)\n    s=s.map{ |e,a| [e,a*m] }\n    r.concat( topof(s) )\n  }\nend\n\nraise( \"FAIL\" ) unless DATA.inject(1){ |r,line|\n  num, src, expected = line.split(/\\s+/)\n  actual = solve( src )\n  ok = expected == actual\n  puts \"#{num} #{ok ? 'ok' : '***NG***' } : #{src} -> #{actual} ( #{expected})\"\n  $stdout.flush\n  r && ok\n}\n__END__\n0 NNESWWS 15635624\n1 EEEE  13641\n2 WWWW  14631\n3 SSSS  12651\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u30b5\u30a4\u30b3\u30ed\u3092\u8ee2\u304c\u3059\u3093\u3060\u304b\u3089\u4e09\u6b21\u5143\u3002\u5e73\u884c\u79fb\u52d5\u304c\u306a\u3044\u306e\u3067 3\u27153 \u306e\u884c\u5217\u3067\u3044\u3044\u3088\u306d\u3002\n\u3068\u3044\u3046\u5b9f\u88c5\u3002\n\n\u51fa\u984c\u8005\u3068\u3057\u3066\u306f\u8ab0\u304b\u304c\u3053\u3046\u3044\u3046\u306e\u3092\u66f8\u304f\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u305f\u3093\u3060\u3051\u3069\u3001\u8ab0\u3082\u66f8\u304b\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u66f8\u3044\u305f\u3002\n\u9006\u884c\u5217\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u4fbf\u5229\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u884c\u5217\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u74b0\u5883\u3060\u3068\u3061\u3087\u3063\u3068\u3084\u308b\u6c17\u306b\u306a\u3089\u306a\u3044\u3051\u3069\u3001ruby \u3084 python \u3060\u3068\u73fe\u5b9f\u7684\u3060\u3068\u601d\u3046\u3002\n\n`concat` \u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001`each_with_object` \u3060\u304b\u3089\u3002`+=` \u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\n\u3061\u306a\u307f\u306b\u30012.0.0 \u3068 1.9.3 \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3002", "tags": ["yhpg", "Ruby", "\u3069\u3046\u66f8\u304f"]}