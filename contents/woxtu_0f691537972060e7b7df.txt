{"context": " More than 1 year has passed since last update.\u3000\u3084\u3063\u306f\u308d\u30fc\u3002\u3082\u3046\u65e5\u4ed8\u306f\u904e\u304e\u3066\u3044\u307e\u3059\u3051\u3069\u3001\u98db\u3073\u5165\u308a\u3067\u53c2\u52a0\u3057\u307e\u3059\u300221\u65e5\u76ee\u3068\u5fae\u5999\u306b\u30cd\u30bf\u304c\u88ab\u3063\u3066\u307e\u3059\uff01 \u3059\u307f\u307e\u305b\u3093\uff01\n\u3000D\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u3067\u3082\u5f71\u306e\u8584\u3044 std.variant\u3001\u306e\u4e2d\u3067\u3082\u5f71\u306e\u8584\u3044 Algebraic \u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306e\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u307e\u3059\u3002\nimport std.variant;\n\nvoid main() {\n    struct Foo {}\n    alias Bar = Algebraic!(int, string, Foo);\n\n    auto bar = Bar(42);\n    assert(bar.type == typeid(int));\n    assert(bar.get!int == 42);\n\n    bar = Bar(\"answer\");\n    assert(bar.type == typeid(string));\n    assert(bar.get!string == \"answer\");\n\n    bar = Bar(Foo());\n    assert(bar.type == typeid(Foo));\n    assert(bar.get!Foo == Foo());\n}\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u306f\u3001\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u304c\u3067\u304d\u306a\u3044\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u306f This \u3092\u4f7f\u3046\u3053\u3068\u3067\u81ea\u8eab\u306e\u914d\u5217\u3068\u9023\u60f3\u914d\u5217\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport std.stdio;\nimport std.variant;\n\nvoid main() {\n    alias Spam = Algebraic!(string, This[], This[string]);\n\n    auto spam = Spam([Spam(\"spam\"), Spam(\"spam\"), Spam(\"spam\")]);\n    writeln(spam); // [spam, spam, spam]\n\n    spam = Spam([\"egg\": Spam(\"spam\"), \"bacon\": Spam([Spam(\"egg\"), Spam(\"spam\")])]);\n    writeln(spam); // [\"egg\":spam, \"bacon\":[egg, spam]]\n}\n\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u9023\u7d50\u30ea\u30b9\u30c8\u3084\u4e8c\u5206\u6728\u3001JSON \u3068\u304b\u3082\u5b9a\u7fa9\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u3001Algebraic \u3068 Pegged \u3092\u4f7f\u3063\u3066\u30aa\u30ec\u30aa\u30ec JSON \u30d1\u30fc\u30b5\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Pegged \u306f\u3001D\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u30bf\u30a4\u30e0\u30d1\u30fc\u30b5\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u3059\u3002\u4ed6\u306b\u3001@youxkei \u3055\u3093\u306e ctpg \u306a\u3069\u304c\u6709\u540d\u3067\u3059\u306d\u3002\nimport pegged.grammar;\nimport std.algorithm, std.array, std.conv, std.string, std.typecons, std.variant;\n\nalias JSON = Algebraic!(This[string], This[], string, double, int, bool, typeof(null));\n\nmixin(grammar(`\nJSONParser:\n    Value < Object / Array / String / Float / Integer / True / False / Null\n    Pair < String \":\" Value\n    Object < :\"{\" (Pair (:\",\" Pair)*)* :\"}\"\n    Array < :\"[\" (Value (:\",\" Value)*)* \"]\"\n    String < :doublequote (!doublequote .)* :doublequote\n    Float <- Integer \".\" [0-9]+\n    Integer <- (\"+\" / \"-\")? (\"0\" / [1-9] [0-9]*)\n    True <- \"true\"\n    False <- \"false\"\n    Null <- \"null\"\n`));\n\nJSON convert(ParseTree tree) {\n    switch (tree.name) {\n        case \"JSONParser\":\n            return convert(tree.children.front);\n\n        case \"JSONParser.Value\":\n            return convert(tree.children.front);\n\n        case \"JSONParser.Object\":\n            JSON[string] object = null;\n            foreach (pair; tree.children) {\n                object[pair.children[0].matches.join] = convert(pair.children[1]);\n            }\n            return JSON(object);\n\n        case \"JSONParser.Array\":\n            return JSON(tree.children.map!convert.array);\n\n        case \"JSONParser.String\":\n            return JSON(tree.matches.join); \n\n        case \"JSONParser.Integer\":\n            return JSON(tree.matches.join.to!int);\n\n        case \"JSONParser.Float\":\n            return JSON(tree.matches.join.to!double);\n\n        case \"JSONParser.True\":\n            return JSON(true);\n\n        case \"JSONParser.False\":\n            return JSON(false);\n\n        case \"JSONParser.Null\":\n            return JSON(null);\n\n        default:\n            throw new Exception(tree.name ~ \" is not implemented yet\");\n    }\n}\n\n\u9069\u5f53\u306b\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\nimport std.stdio;\n\nvoid main() {\n    enum tree = JSONParser(`[{\"foo\": 42}, [\"bar\", -42, true], 4.2, false, null]`);\n    writeln(tree);\n\n    auto result = convert(tree);\n    writeln(result);\n}\n\nJSONParser [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n +-JSONParser.Value [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n    +-JSONParser.Array [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n       +-JSONParser.Value [1, 12][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |  +-JSONParser.Object [1, 12][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |     +-JSONParser.Pair [2, 11][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |        +-JSONParser.String [2, 7][\"f\", \"o\", \"o\"]\n       |        +-JSONParser.Value [9, 11][\"4\", \"2\"]\n       |           +-JSONParser.Integer [9, 11][\"4\", \"2\"]\n       +-JSONParser.Value [14, 32][\"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\"]\n       |  +-JSONParser.Array [14, 32][\"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\"]\n       |     +-JSONParser.Value [15, 20][\"b\", \"a\", \"r\"]\n       |     |  +-JSONParser.String [15, 20][\"b\", \"a\", \"r\"]\n       |     +-JSONParser.Value [22, 25][\"-\", \"4\", \"2\"]\n       |     |  +-JSONParser.Integer [22, 25][\"-\", \"4\", \"2\"]\n       |     +-JSONParser.Value [27, 31][\"true\"]\n       |        +-JSONParser.True [27, 31][\"true\"]\n       +-JSONParser.Value [34, 37][\"4\", \".\", \"2\"]\n       |  +-JSONParser.Float [34, 37][\"4\", \".\", \"2\"]\n       |     +-JSONParser.Integer [34, 35][\"4\"]\n       +-JSONParser.Value [39, 44][\"false\"]\n       |  +-JSONParser.False [39, 44][\"false\"]\n       +-JSONParser.Value [46, 50][\"null\"]\n          +-JSONParser.Null [46, 50][\"null\"]\n\n[[\"foo\":42], [bar, -42, true], 4.2, false, null]\n\n\u30d1\u30fc\u30b5\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3064\u3088\u3044\u3002\u304a\u7c97\u672b\u3055\u307e\u3067\u3057\u305f\u3002\n\nstd.variant - D Programming Language\nPhilippeSigaud/Pegged - GitHub\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3082\u52d5\u304fJSON \u30d1\u30fc\u30b5\u3092\u30b5\u30af\u3063\u3068\u4f5c\u3063\u3066\u307f\u308b - Qiita\nPEG \u57fa\u790e\u6587\u6cd5\u6700\u901f\u30de\u30b9\u30bf\u30fc - @kmizu \u306e\u65e5\u8a18\n\n\u3000\u3084\u3063\u306f\u308d\u30fc\u3002\u3082\u3046\u65e5\u4ed8\u306f\u904e\u304e\u3066\u3044\u307e\u3059\u3051\u3069\u3001\u98db\u3073\u5165\u308a\u3067\u53c2\u52a0\u3057\u307e\u3059\u3002[21\u65e5\u76ee](http://qiita.com/k3_kaimu/items/05f220ae0c93697e1941)\u3068\u5fae\u5999\u306b\u30cd\u30bf\u304c\u88ab\u3063\u3066\u307e\u3059\uff01 \u3059\u307f\u307e\u305b\u3093\uff01\n\n\u3000D\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u3067\u3082\u5f71\u306e\u8584\u3044 `std.variant`\u3001\u306e\u4e2d\u3067\u3082\u5f71\u306e\u8584\u3044 `Algebraic` \u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306e\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u307e\u3059\u3002\n\n```d\nimport std.variant;\n\nvoid main() {\n    struct Foo {}\n    alias Bar = Algebraic!(int, string, Foo);\n\n    auto bar = Bar(42);\n    assert(bar.type == typeid(int));\n    assert(bar.get!int == 42);\n    \n    bar = Bar(\"answer\");\n    assert(bar.type == typeid(string));\n    assert(bar.get!string == \"answer\");\n    \n    bar = Bar(Foo());\n    assert(bar.type == typeid(Foo));\n    assert(bar.get!Foo == Foo());\n}\n```\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u306f\u3001\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u304c\u3067\u304d\u306a\u3044\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u306f `This` \u3092\u4f7f\u3046\u3053\u3068\u3067\u81ea\u8eab\u306e\u914d\u5217\u3068\u9023\u60f3\u914d\u5217\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```d\nimport std.stdio;\nimport std.variant;\n\nvoid main() {\n    alias Spam = Algebraic!(string, This[], This[string]);\n    \n    auto spam = Spam([Spam(\"spam\"), Spam(\"spam\"), Spam(\"spam\")]);\n    writeln(spam); // [spam, spam, spam]\n    \n    spam = Spam([\"egg\": Spam(\"spam\"), \"bacon\": Spam([Spam(\"egg\"), Spam(\"spam\")])]);\n    writeln(spam); // [\"egg\":spam, \"bacon\":[egg, spam]]\n}\n```\n\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u9023\u7d50\u30ea\u30b9\u30c8\u3084\u4e8c\u5206\u6728\u3001JSON \u3068\u304b\u3082\u5b9a\u7fa9\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u3001`Algebraic` \u3068 Pegged \u3092\u4f7f\u3063\u3066\u30aa\u30ec\u30aa\u30ec JSON \u30d1\u30fc\u30b5\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Pegged \u306f\u3001D\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u30bf\u30a4\u30e0\u30d1\u30fc\u30b5\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u3059\u3002\u4ed6\u306b\u3001@youxkei \u3055\u3093\u306e [ctpg](https://github.com/youkei/ctpg) \u306a\u3069\u304c\u6709\u540d\u3067\u3059\u306d\u3002\n\n```d\nimport pegged.grammar;\nimport std.algorithm, std.array, std.conv, std.string, std.typecons, std.variant;\n\nalias JSON = Algebraic!(This[string], This[], string, double, int, bool, typeof(null));\n\nmixin(grammar(`\nJSONParser:\n    Value < Object / Array / String / Float / Integer / True / False / Null\n    Pair < String \":\" Value\n    Object < :\"{\" (Pair (:\",\" Pair)*)* :\"}\"\n    Array < :\"[\" (Value (:\",\" Value)*)* \"]\"\n    String < :doublequote (!doublequote .)* :doublequote\n    Float <- Integer \".\" [0-9]+\n    Integer <- (\"+\" / \"-\")? (\"0\" / [1-9] [0-9]*)\n    True <- \"true\"\n    False <- \"false\"\n    Null <- \"null\"\n`));\n\nJSON convert(ParseTree tree) {\n    switch (tree.name) {\n        case \"JSONParser\":\n            return convert(tree.children.front);\n\n        case \"JSONParser.Value\":\n            return convert(tree.children.front);\n\n        case \"JSONParser.Object\":\n            JSON[string] object = null;\n            foreach (pair; tree.children) {\n                object[pair.children[0].matches.join] = convert(pair.children[1]);\n            }\n            return JSON(object);\n\n        case \"JSONParser.Array\":\n            return JSON(tree.children.map!convert.array);\n\n        case \"JSONParser.String\":\n            return JSON(tree.matches.join); \n\n        case \"JSONParser.Integer\":\n            return JSON(tree.matches.join.to!int);\n\n        case \"JSONParser.Float\":\n            return JSON(tree.matches.join.to!double);\n\n        case \"JSONParser.True\":\n            return JSON(true);\n\n        case \"JSONParser.False\":\n            return JSON(false);\n\n        case \"JSONParser.Null\":\n            return JSON(null);\n\n        default:\n            throw new Exception(tree.name ~ \" is not implemented yet\");\n    }\n}\n```\n\n\u9069\u5f53\u306b\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```d\nimport std.stdio;\n\nvoid main() {\n    enum tree = JSONParser(`[{\"foo\": 42}, [\"bar\", -42, true], 4.2, false, null]`);\n    writeln(tree);\n\n    auto result = convert(tree);\n    writeln(result);\n}\n```\n\n```d\nJSONParser [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n +-JSONParser.Value [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n    +-JSONParser.Array [0, 51][\"f\", \"o\", \"o\", \":\", \"4\", \"2\", \"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\", \"4\", \".\", \"2\", \"false\", \"null\", \"]\"]\n       +-JSONParser.Value [1, 12][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |  +-JSONParser.Object [1, 12][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |     +-JSONParser.Pair [2, 11][\"f\", \"o\", \"o\", \":\", \"4\", \"2\"]\n       |        +-JSONParser.String [2, 7][\"f\", \"o\", \"o\"]\n       |        +-JSONParser.Value [9, 11][\"4\", \"2\"]\n       |           +-JSONParser.Integer [9, 11][\"4\", \"2\"]\n       +-JSONParser.Value [14, 32][\"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\"]\n       |  +-JSONParser.Array [14, 32][\"b\", \"a\", \"r\", \"-\", \"4\", \"2\", \"true\", \"]\"]\n       |     +-JSONParser.Value [15, 20][\"b\", \"a\", \"r\"]\n       |     |  +-JSONParser.String [15, 20][\"b\", \"a\", \"r\"]\n       |     +-JSONParser.Value [22, 25][\"-\", \"4\", \"2\"]\n       |     |  +-JSONParser.Integer [22, 25][\"-\", \"4\", \"2\"]\n       |     +-JSONParser.Value [27, 31][\"true\"]\n       |        +-JSONParser.True [27, 31][\"true\"]\n       +-JSONParser.Value [34, 37][\"4\", \".\", \"2\"]\n       |  +-JSONParser.Float [34, 37][\"4\", \".\", \"2\"]\n       |     +-JSONParser.Integer [34, 35][\"4\"]\n       +-JSONParser.Value [39, 44][\"false\"]\n       |  +-JSONParser.False [39, 44][\"false\"]\n       +-JSONParser.Value [46, 50][\"null\"]\n          +-JSONParser.Null [46, 50][\"null\"]\n\n[[\"foo\":42], [bar, -42, true], 4.2, false, null]\n```\n\n\u30d1\u30fc\u30b5\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3064\u3088\u3044\u3002\u304a\u7c97\u672b\u3055\u307e\u3067\u3057\u305f\u3002\n\n> [std.variant - D Programming Language](http://dlang.org/phobos/std_variant.html)\n\n> [PhilippeSigaud/Pegged - GitHub](https://github.com/PhilippeSigaud/Pegged)\n\n> [\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3082\u52d5\u304fJSON \u30d1\u30fc\u30b5\u3092\u30b5\u30af\u3063\u3068\u4f5c\u3063\u3066\u307f\u308b - Qiita](http://qiita.com/youxkei/items/001ff5ac3640017859ce)\n\n> [PEG \u57fa\u790e\u6587\u6cd5\u6700\u901f\u30de\u30b9\u30bf\u30fc - @kmizu \u306e\u65e5\u8a18](http://kmizu.hatenablog.com/entry/20100203/1265183754)", "tags": ["dlang"]}