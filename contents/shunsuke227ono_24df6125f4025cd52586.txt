{"context": " More than 1 year has passed since last update.\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u305f\u308b\u3082\u306e\u30c7\u30fc\u30bf\u3092RDB\u306b\u30bb\u30c3\u30c8\u3059\u308b\u306e\u306f\u305d\u308a\u3083\u5fc5\u9808\u3067\u3057\u3087\u3046\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3002\n\n\u3061\u306a\u307f\u306b\u524d\u8a18\u4e8b\n\n\u3010python\u521d\u5fc3\u8005\u304c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3057\u3066\u307f\u305f\u3011API\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\u3010day1\u3011\n\n\u3010\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3011python\u3067RSS\u304b\u3089\u30c7\u30fc\u30bf\u53ce\u96c6\n\n\u4e00\u5fdc\u30b7\u30ea\u30fc\u30ba\u7d9a\u304d\u3002\u4eca\u5f8c\u3082\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u89e3\u6790\u3068\u304b\u3082\u7d9a\u3051\u3066\u66f8\u3044\u3066\u3044\u304f\u4e88\u5b9a\u3002(\u4e88\u5b9a)\n\n\u4eca\u56de\u306fcsv\u4e0a\u306e\u30c7\u30fc\u30bf\u3092mysql\u306etable\u306b\u5165\u308c\u308b\u307e\u3067\u3092\u3084\u308a\u307e\u3059\u3002\ncsv\u304b\u3089db\u306b\u5165\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u6d41\u308c\u306f\u3088\u304f\u3042\u308b\n- db\u30bb\u30c3\u30c8\u3059\u308b\n- csv\u3092parse\u3057\u3066\n- mysql\u306b\u3064\u306a\u3044\u3067\n- csv\u306erow\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066sql\u305f\u305f\u304f\n\u3066\u3044\u3046\u611f\u3058\u3002\npython\u521d\u5fc3\u8005\u304b\u3064\u666e\u6bb5rails\u3067\u30af\u30a8\u30ea\u697d\u3057\u3066\u308b\u50d5\u304c\u305d\u308c\u305e\u308c\u8abf\u3079\u3064\u3064\u3084\u3063\u3066\u307f\u305f\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\nmysql\u306b\u4eca\u56de\u4f7f\u3046user\u3068\u304bdb\u3068\u304b\u30bb\u30c3\u30c8\n\u666e\u901a\u306b\u57fa\u672c\u7684\u306amysql\u3067\u3059\u306d\u3002\n- create user\n- create db\n- create table\n\u3067\u4eca\u56decsv\u5165\u308c\u308btabe\u3092\u4f5c\u308b\u3002\u3053\u306e\u3078\u3093\u308f\u304b\u3089\u306a\u3044\u4eba\u306f\u3053\u306e\u8a18\u4e8b\u53c2\u8003(mysql \u521d\u3081\u304b\u3089table\u4f5c\u6210\u307e\u3067\u4e00\u9023\u306e\u30b3\u30de\u30f3\u30c9\u5099\u5fd8\u9332)\n\ncsv\u3092parse\nimport csv\n\n\u3067csv module\u3044\u308c\u3066\u3001\nwith open('path/to/csvfile.csv') as csvfile:\n  reader = csv.reader(csvfile)\n\n\u3067csvfile\u306b<open file 'path/to/csvfile.csv', mode 'r' at 0x1098da030>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u3001reader\u306bcsvfile\u306e\u305d\u308c\u305e\u308c\u306eline\u3092\u7e70\u308a\u8fd4\u3059(iterate\u3059\u308b)\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308b\u3002\n\nReturn a reader object which will iterate over lines in the given csvfile. csvfile can be any object which supports the iterator protocol and returns a string each time its next() method is called \u2014 file objects and list objects are both suitable. \n\n\u3053\u3061\u3089\u3088\u308a\n\nheader\u3092skip\ncsvfile\u306eheader\u3092\u542b\u307f\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001header\u306fskip\u3057\u305f\u3002\n  next(reader, None)\n\nnext()\u306e\u8aac\u660e\u306f\u3053\u3053\u3002\n\nnext(iterarot[, default])\nRetrieve the next item from the iterator by calling its next() method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.\n\n\n\u4e00\u884c\u305a\u3064\u9806\u756a\u306b\u898b\u3066\u3044\u304f\n  for row in reader:\n        # \u4e00\u884c\u305a\u3064db\u306b\u5165\u308c\u308b\n\n\nmysql\u306b\u3064\u306a\u3050\nimport mysql.connector\n\n\u3067module\u3044\u308c\u3066\u3001\ndbcon = mysql.connector.connect(\n  database=inifile.get(\"database\", \"db\"),\n  user=inifile.get(\"database\", \"user\"),\n  password=inifile.get(\"database\", \"password\"),\n  host=inifile.get(\"database\", \"host\")\n)\ndbcur = dbcon.cursor()\ndbcur.execute('INSERT INTO table\u540d (col\u540d, col\u540d) VALUES(%s, \"%s\")' % ('v1', 'v2'))\ndbcon.commit()\n\n\u3067\u5165\u308b\u3002\u7a7a\u6c17\u8aad\u3081\u3070\u3060\u3044\u305f\u3044\u308f\u304b\u308b(\u3059\u307f\u307e\u305b\u3093\u305d\u308c\u305e\u308c\u306emodule\u306emethod\u306e\u52d5\u304d\u3057\u3063\u304b\u308a\u8abf\u3079\u308b\u306e\u306f\u9762\u5012\u306b\u306a\u308a\u307e\u3057\u305f)\u3002commit\u3067\u5b9f\u969b\u306bsql\u5b9f\u884c\u3055\u308c\u3066\u308b\u611f\u3058\u3068\u304b\u3002\u7406\u7531\u306e\u4e00\u3064\u3068\u3057\u3066\u306f\u3001\u591a\u5206sql\u8907\u6570\u3042\u308b\u6642\u3068\u304b\u4f55\u56de\u3082mysql\u7e4b\u3044\u3067\u5207\u3063\u3066\u3001\u3092\u7e70\u308a\u8fd4\u3059\u3088\u308a\u4e00\u56de\u7e4b\u3044\u3060\u6642\u306b\u4e00\u6c17\u306bsql\u53e9\u3044\u305f\u65b9\u304c\u52b9\u7387\u826f\u3044\u304b\u3089\u307e\u3068\u3081\u3066\u3093\u306e\u304b\u306a\u3002(\u61b6\u6e2c)\n\n\u4ee5\u4e0a\u307e\u3068\u3081\u3066\n\u3053\u3093\u306a\u611f\u3058\u3002(table\u540d\u3068\u304bconfig\u306f\u4eca\u56de\u306e\u50d5\u306e\u74b0\u5883\u306e\u3082\u306e\u306a\u306e\u3067\u9069\u5f53\u306b\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002)\nimport mysql.connector\nimport csv\nimport ConfigParser\n\ninifile = ConfigParser.ConfigParser()\ninifile.read(\"config/database.ini\")\ndbcon = mysql.connector.connect(\n  database=inifile.get(\"database\", \"db\"),\n  user=inifile.get(\"database\", \"user\"),\n  password=inifile.get(\"database\", \"password\"),\n  host=inifile.get(\"database\", \"host\")\n)\ndbcur = dbcon.cursor()\nwith open('RCdata/chefmozaccepts.csv') as csvfile:\n  reader = csv.reader(csvfile)\n  next(reader, None)\n  for row in reader:\n    dbcur.execute('INSERT INTO restaurants_payments_methods (restaurant_id, payment_method) VALUES(%s, \"%s\")' % tuple(row))\ndbcon.commit()\n\n\n\n\u88dc\u8db3\n\u305d\u306e\u307b\u304bpython\u77e5\u3089\u306a\u304b\u3063\u305f\u50d5\u304c\u8abf\u3079\u305f\u3053\u3068\u3002\n\npython\u306b\u306f()\u3067\u56f2\u307e\u308c\u308b\u30bf\u30d7\u30eb\u306a\u308b\u7d44\u307f\u8fbc\u307f\u578b\u304c\u3042\u308b\u3002\n\u3053\u3061\u3089\u3088\u308a\u30bf\u30d7\u30eb\u3068\u30ea\u30b9\u30c8\u306e\u9055\u3044\n\njust like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.\n\n\u30bf\u30d7\u30eb\u77e5\u3089\u306a\u304b\u3063\u305f\u30fc\u3002\n\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u305f\u308b\u3082\u306e\u30c7\u30fc\u30bf\u3092RDB\u306b\u30bb\u30c3\u30c8\u3059\u308b\u306e\u306f\u305d\u308a\u3083\u5fc5\u9808\u3067\u3057\u3087\u3046\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3002\n\n# \u3061\u306a\u307f\u306b\u524d\u8a18\u4e8b\n\n- [\u3010python\u521d\u5fc3\u8005\u304c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3057\u3066\u307f\u305f\u3011API\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\u3010day1\u3011\n](http://qiita.com/shunsuke227ono/items/c8f6f13a064d0ad584d2)\n- [\u3010\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u57fa\u790e\u3011python\u3067RSS\u304b\u3089\u30c7\u30fc\u30bf\u53ce\u96c6](http://qiita.com/shunsuke227ono/items/da52a290f78924c1f485)\n\n\u4e00\u5fdc\u30b7\u30ea\u30fc\u30ba\u7d9a\u304d\u3002\u4eca\u5f8c\u3082\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u89e3\u6790\u3068\u304b\u3082\u7d9a\u3051\u3066\u66f8\u3044\u3066\u3044\u304f\u4e88\u5b9a\u3002(\u4e88\u5b9a)\n\n# \u4eca\u56de\u306fcsv\u4e0a\u306e\u30c7\u30fc\u30bf\u3092mysql\u306etable\u306b\u5165\u308c\u308b\u307e\u3067\u3092\u3084\u308a\u307e\u3059\u3002\ncsv\u304b\u3089db\u306b\u5165\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u6d41\u308c\u306f\u3088\u304f\u3042\u308b\n- db\u30bb\u30c3\u30c8\u3059\u308b\n- csv\u3092parse\u3057\u3066\n- mysql\u306b\u3064\u306a\u3044\u3067\n- csv\u306erow\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066sql\u305f\u305f\u304f\n\u3066\u3044\u3046\u611f\u3058\u3002\npython\u521d\u5fc3\u8005\u304b\u3064\u666e\u6bb5rails\u3067\u30af\u30a8\u30ea\u697d\u3057\u3066\u308b\u50d5\u304c\u305d\u308c\u305e\u308c\u8abf\u3079\u3064\u3064\u3084\u3063\u3066\u307f\u305f\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\n\n## mysql\u306b\u4eca\u56de\u4f7f\u3046user\u3068\u304bdb\u3068\u304b\u30bb\u30c3\u30c8\n\u666e\u901a\u306b\u57fa\u672c\u7684\u306amysql\u3067\u3059\u306d\u3002\n- create user\n- create db\n- create table\n\u3067\u4eca\u56decsv\u5165\u308c\u308btabe\u3092\u4f5c\u308b\u3002\u3053\u306e\u3078\u3093\u308f\u304b\u3089\u306a\u3044\u4eba\u306f\u3053\u306e\u8a18\u4e8b\u53c2\u8003([mysql \u521d\u3081\u304b\u3089table\u4f5c\u6210\u307e\u3067\u4e00\u9023\u306e\u30b3\u30de\u30f3\u30c9\u5099\u5fd8\u9332](http://qiita.com/shunsuke227ono/items/3a30b45a78d3978ceee8))\n\n## csv\u3092parse\n\n```\nimport csv\n```\n\n\u3067csv module\u3044\u308c\u3066\u3001\n\n```\nwith open('path/to/csvfile.csv') as csvfile:\n  reader = csv.reader(csvfile)\n```\n\n\u3067```csvfile```\u306b```<open file 'path/to/csvfile.csv', mode 'r' at 0x1098da030>```\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u3001reader\u306b```csvfile```\u306e\u305d\u308c\u305e\u308c\u306eline\u3092\u7e70\u308a\u8fd4\u3059(iterate\u3059\u308b)\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308b\u3002\n\n>Return a reader object which will iterate over lines in the given csvfile. csvfile can be any object which supports the iterator protocol and returns a string each time its next() method is called \u2014 file objects and list objects are both suitable. \n\n[\u3053\u3061\u3089](https://docs.python.org/2/library/csv.html)\u3088\u308a\n\n### header\u3092skip\ncsvfile\u306eheader\u3092\u542b\u307f\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001header\u306fskip\u3057\u305f\u3002\n\n```\n  next(reader, None)\n```\nnext()\u306e\u8aac\u660e\u306f[\u3053\u3053](https://docs.python.org/2/library/functions.html#next)\u3002\n>next(iterarot[, default])\n>Retrieve the next item from the iterator by calling its next() method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.\n\n\n### \u4e00\u884c\u305a\u3064\u9806\u756a\u306b\u898b\u3066\u3044\u304f\n\n```\n  for row in reader:\n\t\t# \u4e00\u884c\u305a\u3064db\u306b\u5165\u308c\u308b\n```\n\n## mysql\u306b\u3064\u306a\u3050\n\n```\nimport mysql.connector\n```\n\u3067module\u3044\u308c\u3066\u3001\n\n```\ndbcon = mysql.connector.connect(\n  database=inifile.get(\"database\", \"db\"),\n  user=inifile.get(\"database\", \"user\"),\n  password=inifile.get(\"database\", \"password\"),\n  host=inifile.get(\"database\", \"host\")\n)\ndbcur = dbcon.cursor()\ndbcur.execute('INSERT INTO table\u540d (col\u540d, col\u540d) VALUES(%s, \"%s\")' % ('v1', 'v2'))\ndbcon.commit()\n```\n\u3067\u5165\u308b\u3002\u7a7a\u6c17\u8aad\u3081\u3070\u3060\u3044\u305f\u3044\u308f\u304b\u308b(\u3059\u307f\u307e\u305b\u3093\u305d\u308c\u305e\u308c\u306emodule\u306emethod\u306e\u52d5\u304d\u3057\u3063\u304b\u308a\u8abf\u3079\u308b\u306e\u306f\u9762\u5012\u306b\u306a\u308a\u307e\u3057\u305f)\u3002commit\u3067\u5b9f\u969b\u306bsql\u5b9f\u884c\u3055\u308c\u3066\u308b\u611f\u3058\u3068\u304b\u3002\u7406\u7531\u306e\u4e00\u3064\u3068\u3057\u3066\u306f\u3001\u591a\u5206sql\u8907\u6570\u3042\u308b\u6642\u3068\u304b\u4f55\u56de\u3082mysql\u7e4b\u3044\u3067\b\u5207\u3063\u3066\u3001\u3092\u7e70\u308a\u8fd4\u3059\u3088\u308a\u4e00\u56de\u7e4b\u3044\u3060\u6642\u306b\u4e00\u6c17\u306bsql\u53e9\u3044\u305f\u65b9\u304c\u52b9\u7387\u826f\u3044\u304b\u3089\u307e\u3068\u3081\u3066\u3093\u306e\u304b\u306a\u3002(\u61b6\u6e2c)\n\n## \u4ee5\u4e0a\u307e\u3068\u3081\u3066\n\n\u3053\u3093\u306a\u611f\u3058\u3002(table\u540d\u3068\u304bconfig\u306f\u4eca\u56de\u306e\u50d5\u306e\u74b0\u5883\u306e\u3082\u306e\u306a\u306e\u3067\u9069\u5f53\u306b\u5909\u3048\u3066\u304f\u3060\u3055\u3044\u3002)\n\n```\nimport mysql.connector\nimport csv\nimport ConfigParser\n\ninifile = ConfigParser.ConfigParser()\ninifile.read(\"config/database.ini\")\ndbcon = mysql.connector.connect(\n  database=inifile.get(\"database\", \"db\"),\n  user=inifile.get(\"database\", \"user\"),\n  password=inifile.get(\"database\", \"password\"),\n  host=inifile.get(\"database\", \"host\")\n)\ndbcur = dbcon.cursor()\nwith open('RCdata/chefmozaccepts.csv') as csvfile:\n  reader = csv.reader(csvfile)\n  next(reader, None)\n  for row in reader:\n    dbcur.execute('INSERT INTO restaurants_payments_methods (restaurant_id, payment_method) VALUES(%s, \"%s\")' % tuple(row))\ndbcon.commit()\n\n```\n\n\n## \u88dc\u8db3\n\n\u305d\u306e\u307b\u304bpython\u77e5\u3089\u306a\u304b\u3063\u305f\u50d5\u304c\u8abf\u3079\u305f\u3053\u3068\u3002\n\n### python\u306b\u306f()\u3067\u56f2\u307e\u308c\u308b\u30bf\u30d7\u30eb\u306a\u308b\u7d44\u307f\u8fbc\u307f\u578b\u304c\u3042\u308b\u3002\n[\u3053\u3061\u3089](http://www.tutorialspoint.com/python/python_tuples.htm)\u3088\u308a\u30bf\u30d7\u30eb\u3068\u30ea\u30b9\u30c8\u306e\u9055\u3044\n>just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.\u0010\n\n\u30bf\u30d7\u30eb\u77e5\u3089\u306a\u304b\u3063\u305f\u30fc\u3002\n", "tags": ["CSV", "Python", "MySQL"]}