{"context": "\n\nXML\u7f72\u540d\u691c\u8a3c\u30d7\u30ed\u30bb\u30b9\u306e\u30a4\u30e1\u30fc\u30b8\n\nXML\u7f72\u540d\u4ed8\u4e0e\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u3002\n\n\u7f72\u540d\u691c\u8a3c\u306e\u624b\u9806\n\uff11\uff0e\u7f72\u540d\u8981\u7d20\u3068\u7f72\u540d\u5bfe\u8c61\u8981\u7d20\u306e\u7279\u5b9a\n// \u7f72\u540d\u8981\u7d20\uff08Signature\uff09\u306e\u7279\u5b9a\nElement sigNode = (Element) doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\").item(0);\n// \u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u8981\u7d20\uff08Product\uff09\u306e\u53d6\u5f97\nElement targetNode = (Element)doc.getElementsByTagName(\"Product\").item(0);\n\n\uff12\uff0eKeySelector\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\nKeySelector \u306f\u3001XMLSignature \u306e\u691c\u8a3c\u306b\u5fc5\u8981\u306a\u9375\u3092KeyInfo\u8981\u7d20\u304b\u3089\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3002\n\u203b\u691c\u8a3c\u5bfe\u8c61XML\u306bKeyInfo\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306b\u3001\u5225\u9014\u3067\u9375\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u203b\u4e0b\u8a18\u306e\u4f8b\u306b\u306f\u3001KeyInfo\u304b\u3089\u53d6\u5f97\u3057\u305f\u9375\u304c\u4fe1\u983c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306f\u5b9f\u65bd\u3057\u3066\u3044\u306a\u3044\u3002\n/**\n * KeySelector\u306e\u5b9f\u88c5\n */\npublic class KeySelectorImp extends KeySelector {\n\n    /**\n     * \u9375\u306e\u53d6\u5f97\n     */\n    @Override\n    public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose,\n            AlgorithmMethod method, XMLCryptoContext context)\n            throws KeySelectorException {\n\n        if (keyInfo == null) {\n            throw new KeySelectorException(\"KeyInfo is null\");\n        }\n\n        // KeyInfo\u914d\u4e0b\u306b\u691c\u7d22\u3057\u3001X509\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3059\u308b\n        // \u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304b\u3089\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001KeySelectorResult\u3092\u8fd4\u5374\u3059\u308b\n        for (Object keyInfoContent : keyInfo.getContent()) {\n            if (keyInfoContent instanceof X509Data) {\n                for (Object x509Content : ((X509Data)keyInfoContent).getContent()) {\n                    X509Certificate cert = (X509Certificate)x509Content;\n                    return new KeySelectorResultImp(cert.getPublicKey());\n                }\n            }\n        }\n\n        throw new KeySelectorException(\"Can't get KeySelectorResult from keyInfo\");\n    }\n\n    /**\n     * KeySelectorResult\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n     */\n    private class KeySelectorResultImp implements KeySelectorResult {\n\n        private Key key;\n\n        public KeySelectorResultImp(Key key) {\n            this.key = key;\n        }\n\n        @Override\n        public Key getKey() {\n            return this.key;\n        }\n    }\n}\n\n\uff13\uff0e\u691c\u8a3c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306eXMLValidateContext\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\nDOMValidateContext validateContext = new DOMValidateContext(new KeySelectorImp(), sigNode);\nvalidateContext.setIdAttributeNS(targetNode, null, \"id\");\n\n\uff14\uff0eXML \u7f72\u540d\u306e\u975e\u6574\u5217\u5316\uff08XML\u6587\u66f8\u21d2\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\nXMLSignatureFactory \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eunmarshalXMLSignature\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u7f72\u540d\u8981\u7d20\u3092XMLSignature\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\nXMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\nXMLSignature signature = signatureFactory.unmarshalXMLSignature(validateContext);\n\n\uff15\uff0e\u7f72\u540d\u691c\u8a3c\nXMLSignature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067 validate \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u7f72\u540d\u691c\u8a3c\u3059\u308b\u3002\nboolean result = signature.validate(validateContext);\n\n\n\u4e0a\u8a18\u624b\u9806\u306e\u307e\u3068\u3081\n/**\n * XML\u7f72\u540d\u691c\u8a3c\n * \n * @param doc\n * @return\n * @throws MarshalException\n * @throws XMLSignatureException\n */\npublic boolean validate(Document doc) throws MarshalException, XMLSignatureException {\n\n    // \u7f72\u540d\u8981\u7d20\uff08Signature\uff09\u306e\u53d6\u5f97\n    Element sigNode = (Element) doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\").item(0);\n    // \u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u8981\u7d20\uff08Product\uff09\u306e\u53d6\u5f97\n    Element targetNode = (Element)doc.getElementsByTagName(\"Product\").item(0);\n\n    // \u691c\u8a3c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    DOMValidateContext validateContext = new DOMValidateContext(new KeySelectorImp(), sigNode);\n    validateContext.setIdAttributeNS(targetNode, null, \"id\");\n\n    // \u7f72\u540d\u8981\u7d20\u306e\u975e\u6574\u5217\u5316 \n    XMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\n    XMLSignature signature = signatureFactory.unmarshalXMLSignature(validateContext);\n\n    // \u7f72\u540d\u691c\u8a3c\n    boolean result = signature.validate(validateContext);\n\n    return result;\n}\n\n/**\n * KeySelector\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n */\nprivate class KeySelectorImp extends KeySelector {\n\n    /**\n     * \u9375\u306e\u53d6\u5f97\n     */\n    @Override\n    public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose,\n            AlgorithmMethod method, XMLCryptoContext context)\n            throws KeySelectorException {\n\n        if (keyInfo == null) {\n            throw new KeySelectorException(\"KeyInfo is null\");\n        }\n\n        // KeyInfo\u914d\u4e0b\u306b\u691c\u7d22\u3057\u3001X509\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3059\u308b\n        // \u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304b\u3089\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001KeySelectorResult\u3092\u8fd4\u5374\u3059\u308b\n        for (Object keyInfoContent : keyInfo.getContent()) {\n            if (keyInfoContent instanceof X509Data) {\n                for (Object x509Content : ((X509Data)keyInfoContent).getContent()) {\n                    X509Certificate cert = (X509Certificate)x509Content;\n                    return new KeySelectorResultImp(cert.getPublicKey());\n                }\n            }\n        }\n\n        throw new KeySelectorException(\"Can't get key from keyInfo\");\n    }\n\n    /**\n     * KeySelectorResult\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n     */\n    private class KeySelectorResultImp implements KeySelectorResult {\n\n        private Key key;\n\n        public KeySelectorResultImp(Key key) {\n            this.key = key;\n        }\n\n        @Override\n        public Key getKey() {\n            return this.key;\n        }\n    }\n}\n\n##XML\u7f72\u540d\u691c\u8a3c\u30d7\u30ed\u30bb\u30b9\u306e\u30a4\u30e1\u30fc\u30b8\n![2016-09-20_173605.png](https://qiita-image-store.s3.amazonaws.com/0/123138/38c590f4-112d-6974-aa9a-9ab4a2bc4b70.png)\n\n\nXML\u7f72\u540d\u4ed8\u4e0e\u306f\u3001[\u3053\u3061\u3089](http://qiita.com/KevinFQ/items/4e2484a659b618530e72)\u3092\u53c2\u7167\u3059\u308b\u3002\n\n##\u7f72\u540d\u691c\u8a3c\u306e\u624b\u9806\n\uff11\uff0e\u7f72\u540d\u8981\u7d20\u3068\u7f72\u540d\u5bfe\u8c61\u8981\u7d20\u306e\u7279\u5b9a\n\n```java\n// \u7f72\u540d\u8981\u7d20\uff08Signature\uff09\u306e\u7279\u5b9a\nElement sigNode = (Element) doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\").item(0);\n// \u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u8981\u7d20\uff08Product\uff09\u306e\u53d6\u5f97\nElement targetNode = (Element)doc.getElementsByTagName(\"Product\").item(0);\n```\n\n\uff12\uff0eKeySelector\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\nKeySelector \u306f\u3001XMLSignature \u306e\u691c\u8a3c\u306b\u5fc5\u8981\u306a\u9375\u3092KeyInfo\u8981\u7d20\u304b\u3089\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3002\n\u203b\u691c\u8a3c\u5bfe\u8c61XML\u306bKeyInfo\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306b\u3001\u5225\u9014\u3067\u9375\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u203b\u4e0b\u8a18\u306e\u4f8b\u306b\u306f\u3001KeyInfo\u304b\u3089\u53d6\u5f97\u3057\u305f\u9375\u304c\u4fe1\u983c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306f\u5b9f\u65bd\u3057\u3066\u3044\u306a\u3044\u3002\n\n```java\n/**\n * KeySelector\u306e\u5b9f\u88c5\n */\npublic class KeySelectorImp extends KeySelector {\n\n\t/**\n\t * \u9375\u306e\u53d6\u5f97\n\t */\n\t@Override\n\tpublic KeySelectorResult select(KeyInfo keyInfo, Purpose purpose,\n\t\t\tAlgorithmMethod method, XMLCryptoContext context)\n\t\t\tthrows KeySelectorException {\n\t\t\n\t\tif (keyInfo == null) {\n\t\t\tthrow new KeySelectorException(\"KeyInfo is null\");\n\t\t}\n\t\t\n\t\t// KeyInfo\u914d\u4e0b\u306b\u691c\u7d22\u3057\u3001X509\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3059\u308b\n\t\t// \u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304b\u3089\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001KeySelectorResult\u3092\u8fd4\u5374\u3059\u308b\n\t\tfor (Object keyInfoContent : keyInfo.getContent()) {\n\t\t\tif (keyInfoContent instanceof X509Data) {\n\t\t\t\tfor (Object x509Content : ((X509Data)keyInfoContent).getContent()) {\n\t\t\t\t\tX509Certificate cert = (X509Certificate)x509Content;\n\t\t\t\t\treturn new KeySelectorResultImp(cert.getPublicKey());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthrow new KeySelectorException(\"Can't get KeySelectorResult from keyInfo\");\n\t}\n\t\n\t/**\n\t * KeySelectorResult\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n\t */\n\tprivate class KeySelectorResultImp implements KeySelectorResult {\n\t\t\n\t\tprivate Key key;\n\t\t\n\t\tpublic KeySelectorResultImp(Key key) {\n\t\t\tthis.key = key;\n\t\t}\n\n\t\t@Override\n\t\tpublic Key getKey() {\n\t\t\treturn this.key;\n\t\t}\n\t}\n}\n```\n\n\uff13\uff0e\u691c\u8a3c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306eXMLValidateContext\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```java\nDOMValidateContext validateContext = new DOMValidateContext(new KeySelectorImp(), sigNode);\nvalidateContext.setIdAttributeNS(targetNode, null, \"id\");\n```\n\n\uff14\uff0eXML \u7f72\u540d\u306e\u975e\u6574\u5217\u5316\uff08XML\u6587\u66f8\u21d2\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\nXMLSignatureFactory \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eunmarshalXMLSignature\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u7f72\u540d\u8981\u7d20\u3092XMLSignature\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\n\n```java\nXMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\nXMLSignature signature = signatureFactory.unmarshalXMLSignature(validateContext);\n```\n\n\uff15\uff0e\u7f72\u540d\u691c\u8a3c\nXMLSignature \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067 validate \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u7f72\u540d\u691c\u8a3c\u3059\u308b\u3002\n\n```java\nboolean result = signature.validate(validateContext);\n```\n\n##\u4e0a\u8a18\u624b\u9806\u306e\u307e\u3068\u3081\n\n```java\n/**\n * XML\u7f72\u540d\u691c\u8a3c\n * \n * @param doc\n * @return\n * @throws MarshalException\n * @throws XMLSignatureException\n */\npublic boolean validate(Document doc) throws MarshalException, XMLSignatureException {\n\t\n\t// \u7f72\u540d\u8981\u7d20\uff08Signature\uff09\u306e\u53d6\u5f97\n\tElement sigNode = (Element) doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\").item(0);\n\t// \u7f72\u540d\u691c\u8a3c\u5bfe\u8c61\u8981\u7d20\uff08Product\uff09\u306e\u53d6\u5f97\n\tElement targetNode = (Element)doc.getElementsByTagName(\"Product\").item(0);\n\n\t// \u691c\u8a3c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n\tDOMValidateContext validateContext = new DOMValidateContext(new KeySelectorImp(), sigNode);\n\tvalidateContext.setIdAttributeNS(targetNode, null, \"id\");\n\t\n\t// \u7f72\u540d\u8981\u7d20\u306e\u975e\u6574\u5217\u5316 \n\tXMLSignatureFactory signatureFactory = XMLSignatureFactory.getInstance(\"DOM\");\n\tXMLSignature signature = signatureFactory.unmarshalXMLSignature(validateContext);\n\n\t// \u7f72\u540d\u691c\u8a3c\n\tboolean result = signature.validate(validateContext);\n\t\t\n\treturn result;\n}\n\n/**\n * KeySelector\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n */\nprivate class KeySelectorImp extends KeySelector {\n\n\t/**\n\t * \u9375\u306e\u53d6\u5f97\n\t */\n\t@Override\n\tpublic KeySelectorResult select(KeyInfo keyInfo, Purpose purpose,\n\t\t\tAlgorithmMethod method, XMLCryptoContext context)\n\t\t\tthrows KeySelectorException {\n\t\t\n\t\tif (keyInfo == null) {\n\t\t\tthrow new KeySelectorException(\"KeyInfo is null\");\n\t\t}\n\t\t\n\t\t// KeyInfo\u914d\u4e0b\u306b\u691c\u7d22\u3057\u3001X509\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3059\u308b\n\t\t// \u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304b\u3089\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001KeySelectorResult\u3092\u8fd4\u5374\u3059\u308b\n\t\tfor (Object keyInfoContent : keyInfo.getContent()) {\n\t\t\tif (keyInfoContent instanceof X509Data) {\n\t\t\t\tfor (Object x509Content : ((X509Data)keyInfoContent).getContent()) {\n\t\t\t\t\tX509Certificate cert = (X509Certificate)x509Content;\n\t\t\t\t\treturn new KeySelectorResultImp(cert.getPublicKey());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthrow new KeySelectorException(\"Can't get key from keyInfo\");\n\t}\n\t\n\t/**\n\t * KeySelectorResult\u306e\u5b9f\u88c5\uff08\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\uff09\n\t */\n\tprivate class KeySelectorResultImp implements KeySelectorResult {\n\t\t\n\t\tprivate Key key;\n\t\t\n\t\tpublic KeySelectorResultImp(Key key) {\n\t\t\tthis.key = key;\n\t\t}\n\n\t\t@Override\n\t\tpublic Key getKey() {\n\t\t\treturn this.key;\n\t\t}\n\t}\n}\n```\n", "tags": ["Java", "XML"]}