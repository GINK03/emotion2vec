{"context": "\n\n\u6982\u8981\nDocker \u307e\u3068\u3081 Chaos \u3067502\u30a8\u30e9\u30fc\u304c\u983b\u767a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u8a18\u4e8b\u3092\u5206\u3051\u307e\u3057\u305f\u3002docker\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u73fe\u5728\u9069\u5b9c\u30c8\u30d4\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u3066\u304a\u308a\u3001\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u7cbe\u67fb\u306f\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u30ab\u30aa\u30b9\u3067\u3059\u3002\n\nKubernetes\n\u30b3\u30f3\u30c6\u30ca\u578b\u4eee\u60f3\u5316\u306eDocker\u3092\u7ba1\u7406\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n\u7528\u8a9e\n\nPod\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u96c6\u307e\u308a\n\u8907\u6570\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nPod\u5185\u306e\u30b3\u30f3\u30c6\u30ca\u306f\u5fc5\u305a\u540c\u3058\u30db\u30b9\u30c8\n\n\nLabel\n\n\nPod\u306b\u3064\u3051\u308b\u30e9\u30d9\u30eb\n\u4f8b) Production\u3001Development\u3001Staging\u3001Frontend\u3001Backend\u306a\u3069\n\u8907\u6570\u30e9\u30d9\u30eb\u304c\u4ed8\u3051\u3089\u308c\u308b\n\n\nReplication Controller\n\n\nPod\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30ec\u30d7\u30ea\u30ab\u3092\u4f5c\u6210\u3057\u3066\u7dad\u6301\u3059\u308b\u4ed5\u7d44\u307f\n\u8d77\u52d5\u4e2d\u306ePod\u306e\u76e3\u8996\u3092\u3057\u3066\u3044\u3066\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067Pod\u304c\u6e1b\u3063\u305f\u308a\u5897\u3048\u305f\u308a\u3057\u305f\u3089\u3001\u5143\u306e\u6570\u306b\u623b\u3059\n\n\nService\n\n\nL3\u306e\u30d7\u30ed\u30ad\u30b7\u307f\u305f\u3044\u306a\u5f79\u5272\n\u8a2d\u5b9a\u3057\u305fPod\u306b\u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3092\u5206\u914d\u3059\u308b\n\n\n\n\n\u69cb\u7bc9\n\nKubernetes \u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u3066 Docker \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30b3\u30f3\u30c6\u30ca\u30fc\u30a4\u30e1\u30fc\u30b8\u3092\u5b9f\u884c\u3059\u308b\nkubernetes\u306b\u3088\u308bDocker\u30b3\u30f3\u30c6\u30ca\u7ba1\u7406\u5165\u9580\n\n\n\u5468\u8fba\u6280\u8853\n\netcd\n\n\netcd\u6982\u8981\n\n\u8a2d\u5b9a\u60c5\u5831\u306e\u5171\u6709\u3068\u30b5\u30fc\u30d3\u30b9\u691c\u51fa\u306e\u305f\u3081\u306e\u5206\u6563KVS\n\n\n\n\nflannel\n\n\nCoreOS + flannel \u3067\u8907\u6570\u30db\u30b9\u30c8\u9593\u30b3\u30f3\u30c6\u30ca\u901a\u4fe1\u3092\u3059\u308b\n\n\u30db\u30b9\u30c8\u9593\u901a\u4fe1\u6a5f\u80fd\n\u8907\u6570\u306e\u30de\u30b7\u30f3\u3092\u8de8\u3044\u3067 Docker \u30b3\u30f3\u30c6\u30ca\u540c\u58eb\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n\n\npod\u306e\u4f5c\u6210\n### httpd\u30b3\u30f3\u30c6\u30ca\u4f5c\u6210\u7528\u306eYAML\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n$ vi pod-httpd.yml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  name: httpd\n  labels:\n    app: httpd\nspec:\n  containers:\n  - name: httpd\n    image: httpd\n    ports:\n    - containerPort: 8080\n================================================\n\n### Pod\u3092\u4f5c\u6210\n$ kubectl create -f pod-httpd.yml\n\n### Pod\u306e\u78ba\u8a8d\n$ kubectl get pod\n================================================\nNAME      READY     STATUS    RESTARTS   AGE\nhttpd     1/1       Running   0          18m\n================================================\n\n$ kubectl get pod httpd -o yaml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: 2016-12-23T06:42:17Z\n  labels:\n    app: httpd\n  name: httpd\n  namespace: default\n  resourceVersion: \"31099\"\n  selfLink: /api/v1/namespaces/default/pods/httpd\n  uid: f27323ac-c8da-11e6-8745-0050568f6b90\nspec:\n  containers:\n  - image: httpd\n    imagePullPolicy: Always\n    name: httpd\n    ports:\n    - containerPort: 8080\n      protocol: TCP\n    resources: {}\n    terminationMessagePath: /dev/termination-log\n    volumeMounts:\n    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n      name: default-token-j83r0\n      readOnly: true\n  dnsPolicy: ClusterFirst\n  host: 100.127.108.153\n  nodeName: 100.127.108.153\n  restartPolicy: Always\n  securityContext: {}\n  serviceAccount: default\n  serviceAccountName: default\n  terminationGracePeriodSeconds: 30\n  volumes:\n  - name: default-token-j83r0\n    secret:\n      secretName: default-token-j83r0\nstatus:\n  conditions:\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:42:17Z\n    status: \"True\"\n    type: Initialized\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:43:43Z\n    status: \"True\"\n    type: Ready\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:42:17Z\n    status: \"True\"\n    type: PodScheduled\n  containerStatuses:\n  - containerID: docker://b2b5e4dc3923a37ab554e...d08\n    image: httpd\n    imageID: docker-pullable://docker.io/httpd@sha256:0d817a924bed...9cebfe1382d024287154c99\n    lastState: {}\n    name: httpd\n    ready: true\n    restartCount: 0\n    state:\n      running:\n        startedAt: 2016-12-23T06:43:42Z\n  hostIP: 100.127.108.153    ### \u30b3\u30f3\u30c6\u30ca\u304c\u52d5\u3044\u3066\u3044\u308bnode\u306eIP\n  phase: Running\n  podIP: 172.17.67.2   ### \u30b3\u30f3\u30c6\u30ca\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305fIP\n  startTime: 2016-12-23T06:42:17Z\n================================================\n\n### node\u3067\u30b3\u30f3\u30c6\u30ca\u306e\u78ba\u8a8d\n[node2(100.127.108.153)]\n$ sudo docker ps -a\n================================================\nCONTAINER ID        IMAGE                                                        COMMAND              CREATED             STATUS              PORTS               NAMES\nb2b5e4dc3923        httpd                                                        \"httpd-foreground\"   9 minutes ago       Up 9 minutes                            k8s_httpd.569c2eeb_httpd_default_f27323ac-c8da-11e6-8745-0050568f6b90_f33566a0\nd4a90d399dfc        registry.access.redhat.com/rhel7/pod-infrastructure:latest   \"/pod\"               10 minutes ago      Up 10 minutes                           k8s_POD.24f70ba9_httpd_default_f27323ac-c8da-11e6-8745-0050568f6b90_5314642b\n================================================\n\n### master\u304b\u3089curl\u3067Apache\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n[master(100.127.108.151)]\n$ curl -I http://172.17.67.2\n================================================\nHTTP/1.1 200 OK\nDate: Fri, 23 Dec 2016 07:06:21 GMT\nServer: Apache/2.4.25 (Unix)\nLast-Modified: Mon, 11 Jun 2007 18:53:14 GMT\nETag: \"2d-432a5e4a73a80\"\nAccept-Ranges: bytes\nContent-Length: 45\nContent-Type: text/html\n================================================\n\n### Pod\u306e\u524a\u9664\n$ kubectl delete pod httpd\n================================================\npod \"httpd\" deleted\n================================================\n\n\nPod\u306b\u7279\u5b9a\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\n### Service\u7528\u306eYAML\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n$ vi demo-service.yml\n================================================\napiVersion: v1\nkind: Service\nmetadata:\n  name: demo\nspec:\n  ports:\n    - port: 80\n  selector:\n    app: httpd\n================================================\n\n### Service\u306e\u4f5c\u6210\n$ kubectl create -f demo-service.yml\n================================================\nservice \"demo\" created\n================================================\n\n### Service\u306e\u78ba\u8a8d\n$ kubectl get service\n================================================\nNAME         CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\ndemo         10.254.199.250   <none>        8080/TCP   2m\nkubernetes   10.254.0.1       <none>        443/TCP    1d\n================================================\n\n$ kubectl get service -o yaml\n================================================\napiVersion: v1\nitems:\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-23T07:24:36Z\n    name: demo\n    namespace: default\n    resourceVersion: \"31605\"\n    selfLink: /api/v1/namespaces/default/services/demo\n    uid: dbb7baa5-c8e0-11e6-8745-0050568f6b90\n  spec:\n    clusterIP: 10.254.199.250\n    portalIP: 10.254.199.250\n    ports:\n    - port: 8080\n      protocol: TCP\n      targetPort: 8080\n    selector:\n      app: httpd\n    sessionAffinity: None\n    type: ClusterIP\n  status:\n    loadBalancer: {}\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-21T11:15:00Z\n    labels:\n      component: apiserver\n      provider: kubernetes\n    name: kubernetes\n    namespace: default\n    resourceVersion: \"10\"\n    selfLink: /api/v1/namespaces/default/services/kubernetes\n    uid: b6dc779f-c76e-11e6-9fd6-0050568f6b90\n  spec:\n    clusterIP: 10.254.0.1\n    portalIP: 10.254.0.1\n    ports:\n    - name: https\n      port: 443\n      protocol: TCP\n      targetPort: 443\n    sessionAffinity: ClientIP\n    type: ClusterIP\n  status:\n    loadBalancer: {}\nkind: List\nmetadata: {}\n================================================\n\n### curl\u3067CulusterIP\u7d4c\u7531\u3067\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n$ curl -I http://10.254.199.250\n================================================\nHTTP/1.1 200 OK\nDate: Fri, 23 Dec 2016 07:06:21 GMT\nServer: Apache/2.4.25 (Unix)\nLast-Modified: Mon, 11 Jun 2007 18:53:14 GMT\nETag: \"2d-432a5e4a73a80\"\nAccept-Ranges: bytes\nContent-Length: 45\nContent-Type: text/html\n================================================\n\n### Service\u306e\u524a\u9664\n$ kubectl delete service demo\n================================================\nservice \"demo\" deleted\n================================================\n\n\n\u8a2d\u5b9a\u5024\u307e\u3068\u3081\n\nPod\n### Pod\n$ vi demo-pod-nginx.yaml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  name: metadata-name-pod              ### Pod\u306e\u30b3\u30f3\u30c6\u30ca\u306eNAMES\u306b\u3053\u306e\u6587\u5b57\u5217\u304c\u4ed8\u4e0e\u3055\u308c\u308b\u540d\u524d \n  labels:\n    app: metadata-labels-app-nginx     ### \u30e9\u30d9\u30eb\u306e\u6307\u5b9a\u3002\u4ed6\u306e\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u53c2\u7167\u3059\u308b\u3068\u304d\u306e\u8b58\u5225\u5b50\u3002\n  namespace: default                   ### \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u6307\u5b9a\u3002\u7570\u306a\u308b\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306b\u5c5e\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u306f\u304a\u4e92\u3044\u306b\u53c2\u7167\u3067\u304d\u306a\u3044\u3002\nspec:\n  containers:\n  - image: nginx\n    imagePullPolicy: IfNotPresent      ### \u306a\u3051\u308c\u3070pull\u3059\u308b\n    #imagePullPolicy: Always           ### \u6bce\u56depull\u3059\u308b\n    #imagePullPolicy: Never            ### pull\u3057\u306a\u3044\n    name: spec-containers-name-pod     ### \u30b3\u30f3\u30c6\u30ca\u306eNAMES\u306b\u3053\u306e\u6587\u5b57\u5217\u304c\u4ed8\u4e0e\u3055\u308c\u308b\n    ports:\n      - containerPort: 80   ### \u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306eport\n        protocol: TCP\n  dnsPolicy: ClusterFirst\n  host: 100.127.108.159     ### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308bnode\u3092\u6307\u5b9a\u3002\u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u9069\u5f53\u306anode\u306b\u306a\u308b\u3002\n  restartPolicy: Always     ### \u30b3\u30f3\u30c6\u30ca\u306b\u969c\u5bb3\u304c\u767a\u751f\u3057\u305f\u3089\u3044\u3064\u3082restart\u3059\u308b (LivenessProbe\u306e\u8a2d\u5b9a\u306a\u3069\u3067\u5229\u7528)\n  #restartPolicy: OnFailure\n  #restartPolicy: Never\n================================================\n$ kubectl create -f demo-pod-nginx.yaml\n\n### pods\u306e\u78ba\u8a8d\n$ kubectl get pods\n================================================\nNAME                READY     STATUS    RESTARTS   AGE\nmetadata-name-pod   1/1       Running   0          2m\n================================================\n\n$ kubectl get pods -o yaml | grep IP\n================================================\n    hostIP: 100.127.108.159    ### host\u3067\u6307\u5b9a\u3057\u305fPod\u304c\u8d77\u52d5\u3057\u3066\u3044\u308bnode\u306eIP\u30a2\u30c9\u30ec\u30b9\n    podIP: 172.17.83.3         ### Pod\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305fIP\u30a2\u30c9\u30ec\u30b9\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u304c\u8d77\u52d5\u3057\u3066\u3044\u308bnode\u3067\u78ba\u8a8d\n$ sudo docker ps -a\n================================================\n807d446ae5ae        nginx                                                        \"nginx -g 'daemon off\"   8 minutes ago       Up 8 minutes                            k8s_spec-containers-name-pod.b04037fb_metadata-name-pod_default_bc86cd07-cb3b-11e6-9dda-0050568f6b90_ea048fcd   ### nginx\u306e\u30b3\u30f3\u30c6\u30ca\nb7912a28b8fb        registry.access.redhat.com/rhel7/pod-infrastructure:latest   \"/pod\"                   8 minutes ago       Up 8 minutes                            k8s_POD.a8590b41_metadata-name-pod_default_bc86cd07-cb3b-11e6-9dda-0050568f6b90_e1f2fbfa ### Pod\u306e\u30b3\u30f3\u30c6\u30ca\n================================================\n\n\nService\n### Service\n$ vi demo-service-nginx.yaml\n================================================\napiVersion: v1\nkind: Service\nmetadata:\n  name: sv-metadata-name-nginx           ### service\u306e\u540d\u524d\n  labels:\n    app: metadata-labels-app-nginx     ### Pod\u3068\u540c\u3058\u30e9\u30d9\u30eb\u540d\u3092\u6307\u5b9a\n  namespace: default   ### Pod\u3068\u540c\u3058\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u6307\u5b9a\nspec:\n    ports:\n    - nodePort: 30287   ### \u30db\u30b9\u30c8\u3092\u7d4c\u7531\u3057\u3066\u5916\u90e8\u304b\u3089Pod\u3078\u306e\u63a5\u7d9a\u7528\u30dd\u30fc\u30c8  curl -I http://100.127.108.153:30287\n      port: 8080          ### \u30ed\u30fc\u30ab\u30eb(kubernetes\u306e\u5916)\u304b\u3089Pod\u3078\u63a5\u7d9a\u7528\u30dd\u30fc\u30c8\n      protocol: TCP\n      targetPort: 80    ### \u30b3\u30f3\u30c6\u30ca\uff08Pod\uff09\u5185\u306e\u898f\u5b9a\u30dd\u30fc\u30c8\n      name: http\n    selector:\n      app: metadata-labels-app-nginx  ### Pod\u3068\u540c\u3058\u30e9\u30d9\u30eb\u540d\u3092\u6307\u5b9a\n    type: NodePort        ### \u30db\u30b9\u30c8\u306eIP(local/global)\u3068\u3001kubernetes\u306e\u30b3\u30f3\u30c6\u30ca\u306eIP\u3068\u306e\u7d10\u4ed8\u3051\u304c\u3055\u308c\u308b\n    # type: LoadBalancer  ### \u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\n    externalIPs:\n    - 100.127.108.141     ### \u5916\u90e8\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u4efb\u610f\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a2d\u5b9a\n================================================\n\n$ kubectl create -f demo-service-nginx.yaml\n================================================\nYou have exposed your service on an external port on all nodes in your\ncluster.  If you want to expose this service to the external internet, you may\nneed to set up firewall rules for the service port(s) (tcp:30287) to serve traffic.\n\nSee http://releases.k8s.io/release-1.3/docs/user-guide/services-firewalls.md for more details.\nservice \"sv-metadata-name-service\" created\n================================================\n\n### services\u306e\u78ba\u8a8d\n$ kubectl get services\n================================================\nNAME                       CLUSTER-IP       EXTERNAL-IP       PORT(S)    AGE\nkubernetes                 10.254.0.1       <none>            443/TCP    4d\nsv-metadata-name-service   10.254.219.218   100.127.108.141   8080/TCP   11m\n================================================\n\n$ kubectl get services sv-metadata-name-service -o yaml\n================================================\n...\nspec:\n  clusterIP: 10.254.219.218  ### \u30af\u30e9\u30b9\u30bf\u306eIP\n  deprecatedPublicIPs:\n  - 100.127.108.141\n  externalIPs:\n  - 100.127.108.141          ### \u5916\u90e8\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308bIP\u3002VIP\u306e\u3088\u3046\u306b\u4efb\u610f\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a2d\u5b9a\u3002\n  portalIP: 10.254.219.218\n  ports:\n  - nodePort: 30287\n    port: 8080\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: metadata-labels-app-nginx\n  sessionAffinity: None\n  type: NodePort\nstatus:\n  loadBalancer: {}\n================================================\n\n### kubernetes\u3068\u95a2\u9023\u306e\u7121\u3044\u30b5\u30fc\u30d0\u304b\u3089\u306f\u63a5\u7d9a\n### curl -I http://<Pod\u306ehostIP(node\u306eIP)>:<Service\u306enodePort>\n$ curl -I http://100.127.108.159:30287\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n...\n================================================\n\n### master\u3084\u3069\u306enode\u306eIP\u3067\u3082\u63a5\u7d9a\u3067\u304d\u308b\n$ curl -I http://100.127.108.151:30287\n$ curl -I http://100.127.108.152:30287\n$ curl -I http://100.127.108.153:30287\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n...\n================================================\n\n### kubernetes\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5185\u304b\u3089\u76f4\u63a5\u30b3\u30f3\u30c6\u30ca\u306b\u63a5\u7d9a\n$ curl -I http://172.17.83.3\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n================================================\n\n\n\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\n\nkubelet does not have ClusterDNS IP configured and cannot create Pod using \"ClusterFirst\" policy. Falling back to DNSDefault policy.\n\nKubelet displays MissingClusterDNS despite cluster-dns and cluster-domain options are given\n\n$ sudo vi /etc/kubernetes/kubelet\n================================================\nKUBELET_ARGS=\"--cluster-dns=192.168.33.11 --cluster-domain=cluster.local\"\n================================================\n\n\n\u53c2\u8003\n\nDocker\u3092\u7ba1\u7406\u3059\u308bKubernetes\u306e\u57fa\u672c\u7684\u306a\u52d5\u4f5c\u3084\u4ed5\u7d44\u307f\u3068\u306f\uff1f Kubernetes\u3092\u89e6\u3063\u3066\u307f\u305f\u3002\u7b2c20\u56de PaaS\u52c9\u5f37\u4f1a\nkubernetes\u306b\u3088\u308bDocker\u30b3\u30f3\u30c6\u30ca\u7ba1\u7406\u5165\u9580\nKubernetes\u306b\u307e\u3064\u308f\u308b\u30a8\u30c8\u30bb\u30c8\u30e9\uff08\u4e3b\u306b\u82e6\u52b4\u8a71\uff09\n\n\nRancher\n\n\nKubernetes on Rancher\u30cf\u30f3\u30ba\u30aa\u30f3\n\n48\u30da\u30fc\u30b8\u304b\u3089\n\n\n\n\n\u3081\u3082\nkubectl run my-nginx --image=nginx --port=80\nkubectl expose deployment my-nginx --port=80 --type=LoadBalancer\n\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-26T06:28:41Z\n    labels:\n      run: my-nginx\n    name: my-nginx\n    namespace: default\n    resourceVersion: \"4674\"\n    selfLink: /api/v1/namespaces/default/services/my-nginx\n    uid: 8b34d5ba-cb34-11e6-9dda-0050568f6b90\n  spec:\n    clusterIP: 10.254.108.202\n    portalIP: 10.254.108.202\n    ports:\n    - nodePort: 30946\n      port: 80\n      protocol: TCP\n      targetPort: 80\n    selector:\n      run: my-nginx\n    sessionAffinity: None\n    type: LoadBalancer\n  status:\n    loadBalancer: {}\nkind: List\nmetadata: {}\n\n\n\n\n\n- apiVersion: v1\n  kind: Pod\n  metadata:\n    annotations:\n      kubernetes.io/created-by: |\n        {\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"default\",\"name\":\"my-nginx-2494149703\",\"uid\":\"7b8de09d-cb34-11e6-9dda-0050568f6b90\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"4646\"}}\n    creationTimestamp: 2016-12-26T06:28:15Z\n    generateName: my-nginx-2494149703-\n    labels:\n      pod-template-hash: \"2494149703\"\n      run: my-nginx\n    name: my-nginx-2494149703-npb5j\n    namespace: default\n    resourceVersion: \"4665\"\n    selfLink: /api/v1/namespaces/default/pods/my-nginx-2494149703-npb5j\n    uid: 7b8ed1d3-cb34-11e6-9dda-0050568f6b90\n  spec:\n    containers:\n    - image: nginx\n      imagePullPolicy: Always\n      name: my-nginx\n      ports:\n      - containerPort: 80\n        protocol: TCP\n      resources: {}\n      terminationMessagePath: /dev/termination-log\n      volumeMounts:\n      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n        name: default-token-j83r0\n        readOnly: true\n    dnsPolicy: ClusterFirst\n    host: 100.127.108.159\n    nodeName: 100.127.108.159\n    restartPolicy: Always\n    securityContext: {}\n    serviceAccount: default\n    serviceAccountName: default\n    terminationGracePeriodSeconds: 30\n    volumes:\n    - name: default-token-j83r0\n      secret:\n        secretName: default-token-j83r0\n  status:\n    conditions:\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:15Z\n      status: \"True\"\n      type: Initialized\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:24Z\n      status: \"True\"\n      type: Ready\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:15Z\n      status: \"True\"\n      type: PodScheduled\n    containerStatuses:\n    - containerID: docker://b185d13eddf67e7e08457355b5900a5244f04722b1198f2cd6e06e7b40070463\n      image: nginx\n      imageID: docker-pullable://docker.io/nginx@sha256:2a07a07e5bbf62e7b583cbb5257357c7e0ba1a8e9650e8fa76d999a60968530f\n      lastState: {}\n      name: my-nginx\n      ready: true\n      restartCount: 0\n      state:\n        running:\n          startedAt: 2016-12-26T06:28:23Z\n    hostIP: 100.127.108.159\n    phase: Running\n    podIP: 172.17.83.3\n    startTime: 2016-12-26T06:28:15Z\nkind: List\nmetadata: {}\n\n\n\n\n\n- apiVersion: extensions/v1beta1\n  kind: Deployment\n  metadata:\n    annotations:\n      deployment.kubernetes.io/revision: \"1\"\n    creationTimestamp: 2016-12-26T06:28:15Z\n    generation: 2\n    labels:\n      run: my-nginx\n    name: my-nginx\n    namespace: default\n    resourceVersion: \"4666\"\n    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/my-nginx\n    uid: 7b853f84-cb34-11e6-9dda-0050568f6b90\n  spec:\n    replicas: 1\n    selector:\n      matchLabels:\n        run: my-nginx\n    strategy:\n      rollingUpdate:\n        maxSurge: 1\n        maxUnavailable: 1\n      type: RollingUpdate\n    template:\n      metadata:\n        creationTimestamp: null\n        labels:\n          run: my-nginx\n      spec:\n        containers:\n        - image: nginx\n          imagePullPolicy: Always\n          name: my-nginx\n          ports:\n          - containerPort: 80\n            protocol: TCP\n          resources: {}\n          terminationMessagePath: /dev/termination-log\n        dnsPolicy: ClusterFirst\n        restartPolicy: Always\n        securityContext: {}\n        terminationGracePeriodSeconds: 30\n  status:\n    availableReplicas: 1\n    observedGeneration: 2\n    replicas: 1\n    updatedReplicas: 1\n\n\nAnsible\u3068docker\u9023\u643a\nAnsible\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2.0\u4ee5\u964d\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\nansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7701\u7565\n\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n### $ sudo pip install docker-py\n\n\ndocker\u30db\u30b9\u30c8\u63a5\u7d9a\u30c6\u30b9\u30c8\nansible\u3092\u5b9f\u884c\u3059\u308b\u81ea\u5206\u81ea\u8eab(127.0.0.1)\u304cDocker\u30db\u30b9\u30c8\u306e\u5834\u5408\n### Ansible\u306e\u8a2d\u5b9a\n$ vi hosts\n================================================\n[docker_hosts]\n127.0.0.1\n\n[containers]\nwebserver01\n================================================\n\n$ vi ansible.conf\n================================================\n[defaults]\nhost_key_checking = False\n\n[ssh_connection]\nssh_args = -o ForwardAgent=yes\n================================================\n\n### ansible\u5b9f\u884c\u30c6\u30b9\u30c8\n$ ansible -i hosts 127.0.0.1 -k -c paramiko -m ping\n================================================\nSSH password:\n127.0.0.1 | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n================================================\n\n\ndocker\u30b3\u30f3\u30c6\u30ca\u3092Ansible\u3067\u4f5c\u6210\n\n\ndocker run\u306e-i\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3042\u305f\u308b\u3082\u306e\u304c\u7121\u3044\u306e\u3067docker attach\u3067\u304d\u306a\u3044\n\ndocker exec\u3067\u30ed\u30b0\u30a4\u30f3\u306f\u3067\u304d\u308b\u304b\u3089\u5225\u306b\u3044\u3044\u304b\u3082\n\u624b\u5143\u3067\u306fmodule\u3092\u4f7f\u308f\u305a\u306b\u5358\u7d14\u306bdocker run\u3092\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u53e9\u3044\u3066\u51e6\u7406\u3057\u3066\u3044\u308b\n\n\n\nDocker API Error: client is newer than server (client API version: 1.22, server API version: 1.21)\" \u306e\u5bfe\u5fdc\n\nplaybook\u306e\u6700\u5f8c\u306e\u300cdocker_api_version\u300d\u306b\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3044\u308bserver API version\u306e\u5024(\u3053\u3053\u3067\u306f1.21)\u3092\u8a2d\u5b9a\u3059\u308b\n\n\n\n### playbook\u306e\u4f5c\u6210\n$ vi create_container.yml\n================================================\n- hosts: docker_hosts\n  become: yes\n  tasks:\n    - name: deploy centos container\n      docker: image=centos:centos6 name=webserver01 ports=8081:80 expose=80 tty=yes docker_api_version=1.21\n================================================\n\n### playbook\u306e\u5b9f\u884c\n### (docker\u30db\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u30e6\u30fc\u30b6(vagrant)\u3092\u6307\u5b9a)\n$ ansible-playbook -i hosts create_container.yml -u vagrant -k -K -c paramiko\n\n### \u30b3\u30f3\u30c6\u30ca\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306e\u78ba\u8a8d\n$ sudo docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES\n4fafe9df90d6        centos:centos6            \"/bin/bash\"         About a minute ago   Up About a minute   0.0.0.0:8081->80/tcp   webserver01\n================================================\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\n### playbook\u306e\u4f5c\u6210\n$ vi provisioning.yml\n================================================\n- hosts: containers\n  become: yes\n  connection: docker\n  tasks:\n    - name: Apache\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n      yum: name=httpd state=installed\n\n    - name: Apache\u3092\u8d77\u52d5\u3059\u308b\n      service: name=httpd enabled=yes state=started\n================================================\n\n### playbook\u306e\u5b9f\u884c\n### (\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u4f5c\u696d\u3059\u308b\u30e6\u30fc\u30b6(root)\u3092\u6307\u5b9a)\n$ sudo ansible-playbook -i hosts provisioning.yml -u root -c paramiko\n================================================\nPLAY [containers] **************************************************************\n\nTASK [setup] *******************************************************************\nok: [webserver01]\n\nTASK [Apache\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb] ***********************************************************\nchanged: [webserver01]\n\nTASK [Apache\u3092\u8d77\u52d5\u3059\u308b] *************************************************************\nchanged: [webserver01]\n\nPLAY RECAP *********************************************************************\nwebserver01                : ok=3    changed=2    unreachable=0    failed=0\n================================================\n\n### docker\u30db\u30b9\u30c8\u306e\u5916\u306e\u30db\u30b9\u30c8\u304b\u3089curl\u3092\u5b9f\u884c\n$ curl http://192.168.56.180:8081 | head\n================================================\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n101  4961  101  4961    0     0  1188k      0 --:--:-- --:--:-- --:--:-- 4844k\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n        <head>\n                <title>Apache HTTP Server Test Page powered by CentOS</title>\n                <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n                <style type=\"text/css\">\n                        body {\n                                background-color: #fff;\n                                color: #000;\n                                font-size: 0.9em;\n                                font-family: sans-serif,helvetica;\n================================================\n\n\nansible-container (\u691c\u8a3c\u4e2d)\n\n\nansible-container(github)\n\ndocker container\u306e\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\u3068\u5b9f\u884c\ninventory\u306f\u81ea\u52d5\u4f5c\u6210\n\u63a5\u7d9a\u306fssh\u3067\u306f\u306a\u304fdocker connection\u3092\u4f7f\u3046\n\n\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ git clone https://github.com/ansible/ansible-container.git\n$ cd ansible-container\n$ sudo python setup.py install\n\n### \u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\n$ cd samaple\n$ sudo ansible-container build\n================================================\nNo DOCKER_HOST environment variable found. Assuming UNIX socket at /var/run/docker.sock\n(Re)building the Ansible Container image.\nBuilding Docker Engine context...\nStarting Docker build of Ansible Container image (please be patient)...  ### \u3053\u3053\u3067\u3057\u3070\u3089\u304f\u6642\u9593\u304c\u304b\u304b\u308b\n\n================================================\n\n\ndocker-machine\n\nCentOS7\u306bVirtualBox\u3092\u5165\u308c\u3066\u4f7f\u3046(\u4f7f\u3048\u306a\u3044)\n\nVirtualBox\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum -y install kernel-devel kernel-headers dkms\n$ sudo yum -y groupinstall \"Development Tools\"\n$ sudo yum update\n\n### Oracle\u306e\u30d1\u30d6\u30ea\u30c3\u30af\u30ad\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n$ wget http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc\n$ sudo rpm --import oracle_vbox.asc\n\n### \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u8ffd\u52a0\n$ sudo wget http://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo -O /etc/yum.repos.d/virtualbox.repo\n\n### VirtualBox\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum install VirtualBox-5.0\n\n### VirtualBox\u306e\u8d77\u52d5\n$ sudo systemctl enable vboxdrv.service\n$ sudo systemctl restart vboxdrv.service\n\n\n$ docker-machine create --driver virtualbox default\n================================================\nCreating CA: /home/jsd/.docker/machine/certs/ca.pem\nCreating client certificate: /home/jsd/.docker/machine/certs/cert.pem\nRunning pre-create checks...\nError with pre-create check: \"This computer doesn't have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory\"\n================================================\n\n\nCentOS 7\u306bVirtual Box\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n\nVMware ESXi \u4e0a\u3067docker\u30db\u30b9\u30c8\u3092\u7528\u610f (\u7528\u610f\u3067\u304d\u3066\u306a\u3044)\n\n\u9375\u306e\u3068\u3053\u308d\u304c\u3046\u307e\u304f\u4f5c\u308c\u3066\u306a\u3044\u306e\u3067ssh\u3067\u5165\u308c\u306a\u3044\n\n\n### \u6700\u4f4e\u9650\u5fc5\u8981\uff1f\n$ sudo docker-machine create --driver vmwarevsphere \\\n       --vmwarevsphere-vcenter 192.168.56.190 \\\n       --vmwarevsphere-username root \\\n       --vmwarevsphere-password hoge \\\n       --vmwarevsphere-network 'VM Network' \\\n       --vmwarevsphere-datastore 'datastore1' \\\n       test-docker-host001\n\n### \u8272\u3005\u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a\n$ sudo docker-machine create --driver vmwarevsphere \\\n       --vmwarevsphere-vcenter 192.168.56.190 \\\n       --vmwarevsphere-username root \\\n       --vmwarevsphere-password hogehoge \\\n       --vmwarevsphere-network 'VM Network' \\\n       --vmwarevsphere-datastore 'datastore1' \\\n       --vmwarevsphere-cpu-count 2 \\\n       --vmwarevsphere-memory-size 2048 \\\n       --vmwarevsphere-disk-size 40960 \\\n       --vmwarevsphere-datacenter ha-datacenter \\\n       test-docker-host002\n\n\n\nVMware vSphere\n\n\ndocker swarm\n\ndocker-compose (v1)\n### yml\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n$ cat docker-compose.yml\n================================================\nsample:\n image: centos:centos6\n tty: true\n container_name: sample\n command: /bin/bash --login\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\n$ docker-compose up -d\n================================================\nCreating sample\n================================================\n\n### \u78ba\u8a8d\n$ docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES\na46905e75bba        centos:centos6                                         \"/bin/bash --login\"      18 seconds ago      Up 17 seconds                                   sample\n================================================\n\n\n[\u4fdd\u7559]docker-compose (v2)\n\nv2\u306f\u8272\u3005\u6319\u52d5\u304c\u5909\u308f\u3063\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u306e\u3067\u4fdd\u7559\u4e2d\n\n\n\u4ee5\u4e0b\u306f\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u65b9\u6cd5\n\n\n\n### yml\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n$ cat docker-compose.yml\n================================================\nversion: '2'\nservices:\n  web:\n   image: ubuntu\n   container_name: web_server\n   tty: true\n   command: /bin/bash --login\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\n$ docker-compose up -d\n================================================\nCreating web_server\n================================================\n\n### \u78ba\u8a8d\n$ docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES\n8999bf4e8af2        ubuntu              \"/bin/bash --login\"   25 seconds ago      Up 23 seconds                           web_server\n================================================\n\n\nversion2\u306e\u554f\u984c\nlinks\u304c\u52d5\u304b\u306a\u3044\n\n\nLinks between containers doesn't work with version 2\n\n\u56de\u907f\u7b56\n\n\n\n\ndocker\u6280\u8853\n\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc(\u4f5c\u6210\u4e2d)\n\nDocker\u3067\u30db\u30b9\u30c8\u3092\u4e57\u3063\u53d6\u3089\u308c\u305f\n\u6a29\u9650\n\n\nprivileged\u306b\u3064\u3044\u3066\n\n\n\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(\u4f5c\u6210\u4e2d)\n\nDocker\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u57fa\u790e\nDocker\u30b3\u30f3\u30c6\u30ca\u63a5\u7d9a\u30d1\u30bf\u30fc\u30f3 (2014\u5e74\u51ac)\n\n\nData Volume\n\nDocker \u306e Data Volume \u307e\u308f\u308a\u3092\u6574\u7406\u3059\u308b\nNFS\u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\n\n\n\u30b5\u30fc\u30d3\u30b9\u7528\u30b3\u30f3\u30c6\u30ca\u69cb\u7bc9\n### docker\u30db\u30b9\u30c8\u3067work/docker/containers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n$ mkdir -p /home/${HOME}/work/docker/containers\n\n\n\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\n\u516c\u5f0f\u306eCentOS7\u30a4\u30e1\u30fc\u30b8\u304b\u3089\u624b\u4f5c\u696d\u3067\u4f5c\u308b\n\n\u30a4\u30e1\u30fc\u30b8\u3092\u8d77\u52d5\n\n### --login\u3067\u30b3\u30f3\u30c6\u30ca\u30ed\u30b0\u30a4\u30f3\u6642\u306bprofile\u306a\u3069\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f\u304c\u6709\u52b9\u306b\u306a\u308b\n$ sudo docker run -it --name operation centos:centos7 bin/bash --login\n\n\nlocale\u306e\u8a2d\u5b9a\n\n\nja_JP.UTF-8\u306b\u3059\u308b\n\n\n\n### glibc-common\u306e\u5165\u308c\u76f4\u3057\n# yum reinstall -y glibc-common\n\n### locale\u306e\u8ffd\u52a0\n# localedef -v -c -i ja_JP -f UTF-8 ja_JP.UTF-8; echo \"\";\n\n### \u30ed\u30b0\u30a4\u30f3\u6642\u306b\u74b0\u5883\u5909\u6570LANG\u3092\u8a2d\u5b9a\n# vi /etc/profile\n================================================\n...\nexport LANG=ja_JP.UTF-8\n================================================\n\n### \u30ed\u30b0\u30a4\u30f3\u3057\u306a\u304a\u3057\u3066\u78ba\u8a8d\n\n\nTimeZone\u306e\u8a2d\u5b9a\n\n\nJST\u306b\u3059\u308b\n\n\n\n### /etc/localtime\u3092\u524a\u9664\n# rm /etc/localtime \n\n### /etc/localtime\u304b\u3089/usr/share/zoneinfo/Asia/Tokyo\u3078symlink\u3092\u306f\u308b\n# ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n\n### \u78ba\u8a8d\n# date\n================================================\n2016\u5e74  6\u6708 29\u65e5 \u6c34\u66dc\u65e5 18:28:56 JST\n================================================\n\n\n\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n### yum update\n# yum update\n\n### yum install\n# yum install epel-release\n# yum install make gcc-c++ wget git openssh-clients telnet traceroute perl patch tcpdump screen bind-utils strace sysstat lsof mailx zip bzip2 sudo pv which\n\n\noperation \u30e6\u30fc\u30b6\u306e\u4f5c\u6210\n\n# user=ftakao2007\n# useradd -u 1000 -G wheel -m ${user}\n# passwd ${user}\n\n(\u4ee5\u4e0b\u4f5c\u6210\u3057\u305foperation\u30e6\u30fc\u30b6\u3067\u4f5c\u696d)\n\nansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum install python-devel python-yaml libffi-devel openssl-devel\n$ sudo sh -c \"curl -kL https://bootstrap.pypa.io/get-pip.py | python\"\n\n### setuptools\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\n$ sudo pip install --upgrade setuptools\n\n### ansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo pip install ansible\n\n\nansible\u304c\u5b9f\u884c\u3055\u308c\u308bdocker\u30db\u30b9\u30c8\u306esudo\u8a2d\u5b9a\n\n$ sudo visudo\n================================================\n### Wheel\u3092nopasswd\u306b\u3059\u308b\n#%wheel ALL=(ALL)       ALL\n%wheel  ALL=(ALL)       NOPASSWD: ALL\n\n### Defaults    requiretty\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# Defaults    requiretty\n================================================\n\n\nruby\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\nrbenv\u3067\u6700\u65b0\u3092\u5165\u308c\u308b\n\n\n\n(\u3044\u305a\u308c\u66f8\u304f)\n\n### sudo\u8a2d\u5b9a\n$ sudo visudo\n================================================\n### secure_path\u306e\u8a2d\u5b9a\nDefaults    secure_path = /usr/local/bin:/usr/local/rbenv/shims:/usr/local/rbenv/bin:/sbin:/bin:/usr/sbin:/usr/bin\n================================================\n\n\nJenkins\u30b3\u30f3\u30c6\u30ca\n\njenkins\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/jenkins_home\u306b\u5168\u3066\u3042\u308b\n\n### docker\u30db\u30b9\u30c8\u306bjenkins_home\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/jenkins_home\n$ chown 1000:1000 ${HOME}/work/docker/containers/jenkins_home\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm -e JAVA_OPTS=\"-Duser.timezone=Asia/Tokyo -Djava.awt.headless=true -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Tokyo\" -v ${HOME}/work/docker/containers/jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --name jenkins jenkins:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it jenkins /bin/bash --login\n\n\nOFFICIAL REPOSITORY\ndocker \u306b\u3042\u308b\u516c\u5f0f\u306ejenkins\u3092\u624b\u5143\u3067\u52d5\u304b\u3059\u3002\n\n\nJenkins\u8a2d\u5b9a\n\n\u5165\u308c\u305fPlugins\n\n\nGit plugin\nGit client plugin\n\n\ngit\u3092\u4f7f\u3046\u305f\u3081\n\n\nSSH plugin\n\n\n\u30ea\u30e2\u30fc\u30c8\u30db\u30b9\u30c8\u306bssh\u3067\u63a5\u7d9a\u3057\u3066\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3059\u308b\u305f\u3081\n\n\nDisk Usage Plugin\n\n\n\u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u3092\u76e3\u8996\n\n\nDiscard Old Build plugin\n\n\n\u30d3\u30eb\u30c9\u5c65\u6b74\u306e\u524a\u9664\n\n\n\u30ed\u30b0\u304c\u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u3092\u304a\u3073\u3084\u304b\u3059\u306e\u3067\n\n\n\n\n\n\nJenkins\u307e\u3068\u3081\u4ee5\u964d\u306f\u4ee5\u4e0b\u3067\n\n\njenkins\u3067\u30b5\u30fc\u30d0\u69cb\u7bc9\u30c4\u30fc\u30eb\u4f5c\u6210\n\n\n\n\nregistry\u30b3\u30f3\u30c6\u30ca\n\nregistry\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/registry\u306b\u5168\u3066\u3042\u308b\n\n### docker\u30db\u30b9\u30c8\u306bregistry\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/registry\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm \\\n                -p 5001:5000 \\\n                -v /home/${USER}/work/docker/containers/registry:/var/lib/registry \\\n                --name registry \\\n                registry:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it registry /bin/bash\n\n\nredmine\u30b3\u30f3\u30c6\u30ca\n\nredmine\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/redmine\u306b\u5168\u3066\u3042\u308b\n\n### docker\u30db\u30b9\u30c8\u306bredmine\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/redmine/plugins\n$ mkdir -p ${HOME}/work/docker/containers/redmine/files\n$ mkdir -p ${HOME}/work/docker/containers/redmine/sqlite\n$ sudo chown 999:999 -R ${HOME}/work/docker/containers/redmine\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm  \\\n                -v ${HOME}/work/docker/containers/redmine/plugins:/usr/src/redmine/plugins \\\n                -v ${HOME}/work/docker/containers/redmine/files:/usr/src/redmine/files \\\n                -v ${HOME}/work/docker/containers/redmine/sqlite:/usr/src/redmine/sqlite \\\n                -p 8081:3000 \\\n                --name redmine \\\n                redmine:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it redmine /bin/bash --login\n\n\nredmine\u8a2d\u5b9a\n\nredmine\u307e\u3068\u3081\u4ee5\u964d\u306f\u4ee5\u4e0b\u3067\n\n\n\u8272\u3005\u899a\u3048\u66f8\u304d\n\n\n\n# \u6982\u8981\n\n[Docker \u307e\u3068\u3081 Chaos](http://qiita.com/ftakao2007/items/be9f188164f349bb46c7) \u3067502\u30a8\u30e9\u30fc\u304c\u983b\u767a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u8a18\u4e8b\u3092\u5206\u3051\u307e\u3057\u305f\u3002docker\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u73fe\u5728\u9069\u5b9c\u30c8\u30d4\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u3066\u304a\u308a\u3001\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u7cbe\u67fb\u306f\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u30ab\u30aa\u30b9\u3067\u3059\u3002\n\n# Kubernetes\n\n\u30b3\u30f3\u30c6\u30ca\u578b\u4eee\u60f3\u5316\u306eDocker\u3092\u7ba1\u7406\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n## \u7528\u8a9e\n\n* Pod\n    * \u30b3\u30f3\u30c6\u30ca\u306e\u96c6\u307e\u308a\n    * \u8907\u6570\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n    * Pod\u5185\u306e\u30b3\u30f3\u30c6\u30ca\u306f\u5fc5\u305a\u540c\u3058\u30db\u30b9\u30c8\n* Label\n    * Pod\u306b\u3064\u3051\u308b\u30e9\u30d9\u30eb\n    * \u4f8b) Production\u3001Development\u3001Staging\u3001Frontend\u3001Backend\u306a\u3069\n    * \u8907\u6570\u30e9\u30d9\u30eb\u304c\u4ed8\u3051\u3089\u308c\u308b\n* Replication Controller\n    * Pod\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30ec\u30d7\u30ea\u30ab\u3092\u4f5c\u6210\u3057\u3066\u7dad\u6301\u3059\u308b\u4ed5\u7d44\u307f\n    * \u8d77\u52d5\u4e2d\u306ePod\u306e\u76e3\u8996\u3092\u3057\u3066\u3044\u3066\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067Pod\u304c\u6e1b\u3063\u305f\u308a\u5897\u3048\u305f\u308a\u3057\u305f\u3089\u3001\u5143\u306e\u6570\u306b\u623b\u3059\n* Service\n    * L3\u306e\u30d7\u30ed\u30ad\u30b7\u307f\u305f\u3044\u306a\u5f79\u5272\n    * \u8a2d\u5b9a\u3057\u305fPod\u306b\u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3092\u5206\u914d\u3059\u308b\n\n## \u69cb\u7bc9\n\n* [Kubernetes \u30af\u30e9\u30b9\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u3066 Docker \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30b3\u30f3\u30c6\u30ca\u30fc\u30a4\u30e1\u30fc\u30b8\u3092\u5b9f\u884c\u3059\u308b](https://access.redhat.com/ja/node/1459983)\n* [kubernetes\u306b\u3088\u308bDocker\u30b3\u30f3\u30c6\u30ca\u7ba1\u7406\u5165\u9580](http://knowledge.sakura.ad.jp/tech/3681/)\n\n## \u5468\u8fba\u6280\u8853\n\n### etcd\n\n* [etcd\u6982\u8981](http://qiita.com/pocket8137/items/ef44ca68ffc0f4e70995)\n    * \u8a2d\u5b9a\u60c5\u5831\u306e\u5171\u6709\u3068\u30b5\u30fc\u30d3\u30b9\u691c\u51fa\u306e\u305f\u3081\u306e\u5206\u6563KVS\n\n### flannel\n\n* [CoreOS + flannel \u3067\u8907\u6570\u30db\u30b9\u30c8\u9593\u30b3\u30f3\u30c6\u30ca\u901a\u4fe1\u3092\u3059\u308b](http://qiita.com/dtan4/items/8f9cf40aabd2e6c9a494)\n    * \u30db\u30b9\u30c8\u9593\u901a\u4fe1\u6a5f\u80fd\n    * \u8907\u6570\u306e\u30de\u30b7\u30f3\u3092\u8de8\u3044\u3067 Docker \u30b3\u30f3\u30c6\u30ca\u540c\u58eb\u901a\u4fe1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n## pod\u306e\u4f5c\u6210\n\n``` shell\n### httpd\u30b3\u30f3\u30c6\u30ca\u4f5c\u6210\u7528\u306eYAML\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n$ vi pod-httpd.yml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  name: httpd\n  labels:\n    app: httpd\nspec:\n  containers:\n  - name: httpd\n    image: httpd\n    ports:\n    - containerPort: 8080\n================================================\n\n### Pod\u3092\u4f5c\u6210\n$ kubectl create -f pod-httpd.yml\n\n### Pod\u306e\u78ba\u8a8d\n$ kubectl get pod\n================================================\nNAME      READY     STATUS    RESTARTS   AGE\nhttpd     1/1       Running   0          18m\n================================================\n\n$ kubectl get pod httpd -o yaml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: 2016-12-23T06:42:17Z\n  labels:\n    app: httpd\n  name: httpd\n  namespace: default\n  resourceVersion: \"31099\"\n  selfLink: /api/v1/namespaces/default/pods/httpd\n  uid: f27323ac-c8da-11e6-8745-0050568f6b90\nspec:\n  containers:\n  - image: httpd\n    imagePullPolicy: Always\n    name: httpd\n    ports:\n    - containerPort: 8080\n      protocol: TCP\n    resources: {}\n    terminationMessagePath: /dev/termination-log\n    volumeMounts:\n    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n      name: default-token-j83r0\n      readOnly: true\n  dnsPolicy: ClusterFirst\n  host: 100.127.108.153\n  nodeName: 100.127.108.153\n  restartPolicy: Always\n  securityContext: {}\n  serviceAccount: default\n  serviceAccountName: default\n  terminationGracePeriodSeconds: 30\n  volumes:\n  - name: default-token-j83r0\n    secret:\n      secretName: default-token-j83r0\nstatus:\n  conditions:\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:42:17Z\n    status: \"True\"\n    type: Initialized\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:43:43Z\n    status: \"True\"\n    type: Ready\n  - lastProbeTime: null\n    lastTransitionTime: 2016-12-23T06:42:17Z\n    status: \"True\"\n    type: PodScheduled\n  containerStatuses:\n  - containerID: docker://b2b5e4dc3923a37ab554e...d08\n    image: httpd\n    imageID: docker-pullable://docker.io/httpd@sha256:0d817a924bed...9cebfe1382d024287154c99\n    lastState: {}\n    name: httpd\n    ready: true\n    restartCount: 0\n    state:\n      running:\n        startedAt: 2016-12-23T06:43:42Z\n  hostIP: 100.127.108.153    ### \u30b3\u30f3\u30c6\u30ca\u304c\u52d5\u3044\u3066\u3044\u308bnode\u306eIP\n  phase: Running\n  podIP: 172.17.67.2   ### \u30b3\u30f3\u30c6\u30ca\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305fIP\n  startTime: 2016-12-23T06:42:17Z\n================================================\n\n### node\u3067\u30b3\u30f3\u30c6\u30ca\u306e\u78ba\u8a8d\n[node2(100.127.108.153)]\n$ sudo docker ps -a\n================================================\nCONTAINER ID        IMAGE                                                        COMMAND              CREATED             STATUS              PORTS               NAMES\nb2b5e4dc3923        httpd                                                        \"httpd-foreground\"   9 minutes ago       Up 9 minutes                            k8s_httpd.569c2eeb_httpd_default_f27323ac-c8da-11e6-8745-0050568f6b90_f33566a0\nd4a90d399dfc        registry.access.redhat.com/rhel7/pod-infrastructure:latest   \"/pod\"               10 minutes ago      Up 10 minutes                           k8s_POD.24f70ba9_httpd_default_f27323ac-c8da-11e6-8745-0050568f6b90_5314642b\n================================================\n\n### master\u304b\u3089curl\u3067Apache\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n[master(100.127.108.151)]\n$ curl -I http://172.17.67.2\n================================================\nHTTP/1.1 200 OK\nDate: Fri, 23 Dec 2016 07:06:21 GMT\nServer: Apache/2.4.25 (Unix)\nLast-Modified: Mon, 11 Jun 2007 18:53:14 GMT\nETag: \"2d-432a5e4a73a80\"\nAccept-Ranges: bytes\nContent-Length: 45\nContent-Type: text/html\n================================================\n\n### Pod\u306e\u524a\u9664\n$ kubectl delete pod httpd\n================================================\npod \"httpd\" deleted\n================================================\n```\n\n## Pod\u306b\u7279\u5b9a\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u5272\u308a\u5f53\u3066\u308b\n\n``` shell\n### Service\u7528\u306eYAML\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n$ vi demo-service.yml\n================================================\napiVersion: v1\nkind: Service\nmetadata:\n  name: demo\nspec:\n  ports:\n    - port: 80\n  selector:\n    app: httpd\n================================================\n\n### Service\u306e\u4f5c\u6210\n$ kubectl create -f demo-service.yml\n================================================\nservice \"demo\" created\n================================================\n\n### Service\u306e\u78ba\u8a8d\n$ kubectl get service\n================================================\nNAME         CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\ndemo         10.254.199.250   <none>        8080/TCP   2m\nkubernetes   10.254.0.1       <none>        443/TCP    1d\n================================================\n\n$ kubectl get service -o yaml\n================================================\napiVersion: v1\nitems:\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-23T07:24:36Z\n    name: demo\n    namespace: default\n    resourceVersion: \"31605\"\n    selfLink: /api/v1/namespaces/default/services/demo\n    uid: dbb7baa5-c8e0-11e6-8745-0050568f6b90\n  spec:\n    clusterIP: 10.254.199.250\n    portalIP: 10.254.199.250\n    ports:\n    - port: 8080\n      protocol: TCP\n      targetPort: 8080\n    selector:\n      app: httpd\n    sessionAffinity: None\n    type: ClusterIP\n  status:\n    loadBalancer: {}\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-21T11:15:00Z\n    labels:\n      component: apiserver\n      provider: kubernetes\n    name: kubernetes\n    namespace: default\n    resourceVersion: \"10\"\n    selfLink: /api/v1/namespaces/default/services/kubernetes\n    uid: b6dc779f-c76e-11e6-9fd6-0050568f6b90\n  spec:\n    clusterIP: 10.254.0.1\n    portalIP: 10.254.0.1\n    ports:\n    - name: https\n      port: 443\n      protocol: TCP\n      targetPort: 443\n    sessionAffinity: ClientIP\n    type: ClusterIP\n  status:\n    loadBalancer: {}\nkind: List\nmetadata: {}\n================================================\n\n### curl\u3067CulusterIP\u7d4c\u7531\u3067\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n$ curl -I http://10.254.199.250\n================================================\nHTTP/1.1 200 OK\nDate: Fri, 23 Dec 2016 07:06:21 GMT\nServer: Apache/2.4.25 (Unix)\nLast-Modified: Mon, 11 Jun 2007 18:53:14 GMT\nETag: \"2d-432a5e4a73a80\"\nAccept-Ranges: bytes\nContent-Length: 45\nContent-Type: text/html\n================================================\n\n### Service\u306e\u524a\u9664\n$ kubectl delete service demo\n================================================\nservice \"demo\" deleted\n================================================\n```\n\n## \u8a2d\u5b9a\u5024\u307e\u3068\u3081\n\n### Pod\n\n``` shell\n### Pod\n$ vi demo-pod-nginx.yaml\n================================================\napiVersion: v1\nkind: Pod\nmetadata:\n  name: metadata-name-pod              ### Pod\u306e\u30b3\u30f3\u30c6\u30ca\u306eNAMES\u306b\u3053\u306e\u6587\u5b57\u5217\u304c\u4ed8\u4e0e\u3055\u308c\u308b\u540d\u524d \n  labels:\n    app: metadata-labels-app-nginx     ### \u30e9\u30d9\u30eb\u306e\u6307\u5b9a\u3002\u4ed6\u306e\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u53c2\u7167\u3059\u308b\u3068\u304d\u306e\u8b58\u5225\u5b50\u3002\n  namespace: default                   ### \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u6307\u5b9a\u3002\u7570\u306a\u308b\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306b\u5c5e\u3059\u308b\u30ea\u30bd\u30fc\u30b9\u306f\u304a\u4e92\u3044\u306b\u53c2\u7167\u3067\u304d\u306a\u3044\u3002\nspec:\n  containers:\n  - image: nginx\n    imagePullPolicy: IfNotPresent      ### \u306a\u3051\u308c\u3070pull\u3059\u308b\n    #imagePullPolicy: Always           ### \u6bce\u56depull\u3059\u308b\n    #imagePullPolicy: Never            ### pull\u3057\u306a\u3044\n    name: spec-containers-name-pod     ### \u30b3\u30f3\u30c6\u30ca\u306eNAMES\u306b\u3053\u306e\u6587\u5b57\u5217\u304c\u4ed8\u4e0e\u3055\u308c\u308b\n    ports:\n      - containerPort: 80   ### \u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306eport\n        protocol: TCP\n  dnsPolicy: ClusterFirst\n  host: 100.127.108.159     ### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308bnode\u3092\u6307\u5b9a\u3002\u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u9069\u5f53\u306anode\u306b\u306a\u308b\u3002\n  restartPolicy: Always     ### \u30b3\u30f3\u30c6\u30ca\u306b\u969c\u5bb3\u304c\u767a\u751f\u3057\u305f\u3089\u3044\u3064\u3082restart\u3059\u308b (LivenessProbe\u306e\u8a2d\u5b9a\u306a\u3069\u3067\u5229\u7528)\n  #restartPolicy: OnFailure\n  #restartPolicy: Never\n================================================\n$ kubectl create -f demo-pod-nginx.yaml\n\n### pods\u306e\u78ba\u8a8d\n$ kubectl get pods\n================================================\nNAME                READY     STATUS    RESTARTS   AGE\nmetadata-name-pod   1/1       Running   0          2m\n================================================\n\n$ kubectl get pods -o yaml | grep IP\n================================================\n    hostIP: 100.127.108.159    ### host\u3067\u6307\u5b9a\u3057\u305fPod\u304c\u8d77\u52d5\u3057\u3066\u3044\u308bnode\u306eIP\u30a2\u30c9\u30ec\u30b9\n    podIP: 172.17.83.3         ### Pod\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305fIP\u30a2\u30c9\u30ec\u30b9\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u304c\u8d77\u52d5\u3057\u3066\u3044\u308bnode\u3067\u78ba\u8a8d\n$ sudo docker ps -a\n================================================\n807d446ae5ae        nginx                                                        \"nginx -g 'daemon off\"   8 minutes ago       Up 8 minutes                            k8s_spec-containers-name-pod.b04037fb_metadata-name-pod_default_bc86cd07-cb3b-11e6-9dda-0050568f6b90_ea048fcd   ### nginx\u306e\u30b3\u30f3\u30c6\u30ca\nb7912a28b8fb        registry.access.redhat.com/rhel7/pod-infrastructure:latest   \"/pod\"                   8 minutes ago       Up 8 minutes                            k8s_POD.a8590b41_metadata-name-pod_default_bc86cd07-cb3b-11e6-9dda-0050568f6b90_e1f2fbfa ### Pod\u306e\u30b3\u30f3\u30c6\u30ca\n================================================\n```\n### Service\n\n``` shell\n### Service\n$ vi demo-service-nginx.yaml\n================================================\napiVersion: v1\nkind: Service\nmetadata:\n  name: sv-metadata-name-nginx           ### service\u306e\u540d\u524d\n  labels:\n    app: metadata-labels-app-nginx     ### Pod\u3068\u540c\u3058\u30e9\u30d9\u30eb\u540d\u3092\u6307\u5b9a\n  namespace: default   ### Pod\u3068\u540c\u3058\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u6307\u5b9a\nspec:\n    ports:\n    - nodePort: 30287   ### \u30db\u30b9\u30c8\u3092\u7d4c\u7531\u3057\u3066\u5916\u90e8\u304b\u3089Pod\u3078\u306e\u63a5\u7d9a\u7528\u30dd\u30fc\u30c8  curl -I http://100.127.108.153:30287\n      port: 8080          ### \u30ed\u30fc\u30ab\u30eb(kubernetes\u306e\u5916)\u304b\u3089Pod\u3078\u63a5\u7d9a\u7528\u30dd\u30fc\u30c8\n      protocol: TCP\n      targetPort: 80    ### \u30b3\u30f3\u30c6\u30ca\uff08Pod\uff09\u5185\u306e\u898f\u5b9a\u30dd\u30fc\u30c8\n      name: http\n    selector:\n      app: metadata-labels-app-nginx  ### Pod\u3068\u540c\u3058\u30e9\u30d9\u30eb\u540d\u3092\u6307\u5b9a\n    type: NodePort        ### \u30db\u30b9\u30c8\u306eIP(local/global)\u3068\u3001kubernetes\u306e\u30b3\u30f3\u30c6\u30ca\u306eIP\u3068\u306e\u7d10\u4ed8\u3051\u304c\u3055\u308c\u308b\n    # type: LoadBalancer  ### \u30ed\u30fc\u30c9\u30d0\u30e9\u30f3\u30b5\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\n    externalIPs:\n    - 100.127.108.141     ### \u5916\u90e8\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u4efb\u610f\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a2d\u5b9a\n================================================\n\n$ kubectl create -f demo-service-nginx.yaml\n================================================\nYou have exposed your service on an external port on all nodes in your\ncluster.  If you want to expose this service to the external internet, you may\nneed to set up firewall rules for the service port(s) (tcp:30287) to serve traffic.\n\nSee http://releases.k8s.io/release-1.3/docs/user-guide/services-firewalls.md for more details.\nservice \"sv-metadata-name-service\" created\n================================================\n\n### services\u306e\u78ba\u8a8d\n$ kubectl get services\n================================================\nNAME                       CLUSTER-IP       EXTERNAL-IP       PORT(S)    AGE\nkubernetes                 10.254.0.1       <none>            443/TCP    4d\nsv-metadata-name-service   10.254.219.218   100.127.108.141   8080/TCP   11m\n================================================\n\n$ kubectl get services sv-metadata-name-service -o yaml\n================================================\n...\nspec:\n  clusterIP: 10.254.219.218  ### \u30af\u30e9\u30b9\u30bf\u306eIP\n  deprecatedPublicIPs:\n  - 100.127.108.141\n  externalIPs:\n  - 100.127.108.141          ### \u5916\u90e8\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308bIP\u3002VIP\u306e\u3088\u3046\u306b\u4efb\u610f\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a2d\u5b9a\u3002\n  portalIP: 10.254.219.218\n  ports:\n  - nodePort: 30287\n    port: 8080\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: metadata-labels-app-nginx\n  sessionAffinity: None\n  type: NodePort\nstatus:\n  loadBalancer: {}\n================================================\n\n### kubernetes\u3068\u95a2\u9023\u306e\u7121\u3044\u30b5\u30fc\u30d0\u304b\u3089\u306f\u63a5\u7d9a\n### curl -I http://<Pod\u306ehostIP(node\u306eIP)>:<Service\u306enodePort>\n$ curl -I http://100.127.108.159:30287\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n...\n================================================\n\n### master\u3084\u3069\u306enode\u306eIP\u3067\u3082\u63a5\u7d9a\u3067\u304d\u308b\n$ curl -I http://100.127.108.151:30287\n$ curl -I http://100.127.108.152:30287\n$ curl -I http://100.127.108.153:30287\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n...\n================================================\n\n### kubernetes\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5185\u304b\u3089\u76f4\u63a5\u30b3\u30f3\u30c6\u30ca\u306b\u63a5\u7d9a\n$ curl -I http://172.17.83.3\n================================================\nHTTP/1.1 200 OK\nServer: nginx/1.11.7\n================================================\n```\n\n## \u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\n\n### kubelet does not have ClusterDNS IP configured and cannot create Pod using \"ClusterFirst\" policy. Falling back to DNSDefault policy.\n\n* [Kubelet displays MissingClusterDNS despite cluster-dns and cluster-domain options are given](https://github.com/kubernetes/kubernetes/issues/27722)\n\n``` shell\n$ sudo vi /etc/kubernetes/kubelet\n================================================\nKUBELET_ARGS=\"--cluster-dns=192.168.33.11 --cluster-domain=cluster.local\"\n================================================\n```\n\n## \u53c2\u8003\n\n* [Docker\u3092\u7ba1\u7406\u3059\u308bKubernetes\u306e\u57fa\u672c\u7684\u306a\u52d5\u4f5c\u3084\u4ed5\u7d44\u307f\u3068\u306f\uff1f Kubernetes\u3092\u89e6\u3063\u3066\u307f\u305f\u3002\u7b2c20\u56de PaaS\u52c9\u5f37\u4f1a](http://www.publickey1.jp/blog/14/dockerkubernetes_kubernetes20_paas_1.html)\n* [kubernetes\u306b\u3088\u308bDocker\u30b3\u30f3\u30c6\u30ca\u7ba1\u7406\u5165\u9580](http://knowledge.sakura.ad.jp/tech/3681/)\n* [Kubernetes\u306b\u307e\u3064\u308f\u308b\u30a8\u30c8\u30bb\u30c8\u30e9\uff08\u4e3b\u306b\u82e6\u52b4\u8a71\uff09](http://www.slideshare.net/WorksApplications/kubernetes-65070472)\n\n# Rancher\n\n* [Kubernetes on Rancher\u30cf\u30f3\u30ba\u30aa\u30f3](http://www.slideshare.net/zembutsu/rancher-kubernetes-hands-on-sakura-container-evening)\n    * 48\u30da\u30fc\u30b8\u304b\u3089\n\n## \u3081\u3082\n\n``` shell\nkubectl run my-nginx --image=nginx --port=80\nkubectl expose deployment my-nginx --port=80 --type=LoadBalancer\n\n- apiVersion: v1\n  kind: Service\n  metadata:\n    creationTimestamp: 2016-12-26T06:28:41Z\n    labels:\n      run: my-nginx\n    name: my-nginx\n    namespace: default\n    resourceVersion: \"4674\"\n    selfLink: /api/v1/namespaces/default/services/my-nginx\n    uid: 8b34d5ba-cb34-11e6-9dda-0050568f6b90\n  spec:\n    clusterIP: 10.254.108.202\n    portalIP: 10.254.108.202\n    ports:\n    - nodePort: 30946\n      port: 80\n      protocol: TCP\n      targetPort: 80\n    selector:\n      run: my-nginx\n    sessionAffinity: None\n    type: LoadBalancer\n  status:\n    loadBalancer: {}\nkind: List\nmetadata: {}\n\n\n\n\n\n- apiVersion: v1\n  kind: Pod\n  metadata:\n    annotations:\n      kubernetes.io/created-by: |\n        {\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"default\",\"name\":\"my-nginx-2494149703\",\"uid\":\"7b8de09d-cb34-11e6-9dda-0050568f6b90\",\"apiVersion\":\"extensions\",\"resourceVersion\":\"4646\"}}\n    creationTimestamp: 2016-12-26T06:28:15Z\n    generateName: my-nginx-2494149703-\n    labels:\n      pod-template-hash: \"2494149703\"\n      run: my-nginx\n    name: my-nginx-2494149703-npb5j\n    namespace: default\n    resourceVersion: \"4665\"\n    selfLink: /api/v1/namespaces/default/pods/my-nginx-2494149703-npb5j\n    uid: 7b8ed1d3-cb34-11e6-9dda-0050568f6b90\n  spec:\n    containers:\n    - image: nginx\n      imagePullPolicy: Always\n      name: my-nginx\n      ports:\n      - containerPort: 80\n        protocol: TCP\n      resources: {}\n      terminationMessagePath: /dev/termination-log\n      volumeMounts:\n      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n        name: default-token-j83r0\n        readOnly: true\n    dnsPolicy: ClusterFirst\n    host: 100.127.108.159\n    nodeName: 100.127.108.159\n    restartPolicy: Always\n    securityContext: {}\n    serviceAccount: default\n    serviceAccountName: default\n    terminationGracePeriodSeconds: 30\n    volumes:\n    - name: default-token-j83r0\n      secret:\n        secretName: default-token-j83r0\n  status:\n    conditions:\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:15Z\n      status: \"True\"\n      type: Initialized\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:24Z\n      status: \"True\"\n      type: Ready\n    - lastProbeTime: null\n      lastTransitionTime: 2016-12-26T06:28:15Z\n      status: \"True\"\n      type: PodScheduled\n    containerStatuses:\n    - containerID: docker://b185d13eddf67e7e08457355b5900a5244f04722b1198f2cd6e06e7b40070463\n      image: nginx\n      imageID: docker-pullable://docker.io/nginx@sha256:2a07a07e5bbf62e7b583cbb5257357c7e0ba1a8e9650e8fa76d999a60968530f\n      lastState: {}\n      name: my-nginx\n      ready: true\n      restartCount: 0\n      state:\n        running:\n          startedAt: 2016-12-26T06:28:23Z\n    hostIP: 100.127.108.159\n    phase: Running\n    podIP: 172.17.83.3\n    startTime: 2016-12-26T06:28:15Z\nkind: List\nmetadata: {}\n\n\n\n\n\n- apiVersion: extensions/v1beta1\n  kind: Deployment\n  metadata:\n    annotations:\n      deployment.kubernetes.io/revision: \"1\"\n    creationTimestamp: 2016-12-26T06:28:15Z\n    generation: 2\n    labels:\n      run: my-nginx\n    name: my-nginx\n    namespace: default\n    resourceVersion: \"4666\"\n    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/my-nginx\n    uid: 7b853f84-cb34-11e6-9dda-0050568f6b90\n  spec:\n    replicas: 1\n    selector:\n      matchLabels:\n        run: my-nginx\n    strategy:\n      rollingUpdate:\n        maxSurge: 1\n        maxUnavailable: 1\n      type: RollingUpdate\n    template:\n      metadata:\n        creationTimestamp: null\n        labels:\n          run: my-nginx\n      spec:\n        containers:\n        - image: nginx\n          imagePullPolicy: Always\n          name: my-nginx\n          ports:\n          - containerPort: 80\n            protocol: TCP\n          resources: {}\n          terminationMessagePath: /dev/termination-log\n        dnsPolicy: ClusterFirst\n        restartPolicy: Always\n        securityContext: {}\n        terminationGracePeriodSeconds: 30\n  status:\n    availableReplicas: 1\n    observedGeneration: 2\n    replicas: 1\n    updatedReplicas: 1\n```\n\n# Ansible\u3068docker\u9023\u643a\n\nAnsible\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2.0\u4ee5\u964d\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u4e8b\u524d\u6e96\u5099\n\n* ansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7701\u7565\n\n``` shell\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n### $ sudo pip install docker-py\n```\n\n## docker\u30db\u30b9\u30c8\u63a5\u7d9a\u30c6\u30b9\u30c8\n\nansible\u3092\u5b9f\u884c\u3059\u308b\u81ea\u5206\u81ea\u8eab(127.0.0.1)\u304cDocker\u30db\u30b9\u30c8\u306e\u5834\u5408\n\n``` shell\n### Ansible\u306e\u8a2d\u5b9a\n$ vi hosts\n================================================\n[docker_hosts]\n127.0.0.1\n\n[containers]\nwebserver01\n================================================\n\n$ vi ansible.conf\n================================================\n[defaults]\nhost_key_checking = False\n\n[ssh_connection]\nssh_args = -o ForwardAgent=yes\n================================================\n\n### ansible\u5b9f\u884c\u30c6\u30b9\u30c8\n$ ansible -i hosts 127.0.0.1 -k -c paramiko -m ping\n================================================\nSSH password:\n127.0.0.1 | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n================================================\n```\n\n## docker\u30b3\u30f3\u30c6\u30ca\u3092Ansible\u3067\u4f5c\u6210\n\n* docker run\u306e-i\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3042\u305f\u308b\u3082\u306e\u304c\u7121\u3044\u306e\u3067docker attach\u3067\u304d\u306a\u3044\n    * docker exec\u3067\u30ed\u30b0\u30a4\u30f3\u306f\u3067\u304d\u308b\u304b\u3089\u5225\u306b\u3044\u3044\u304b\u3082\n    * \u624b\u5143\u3067\u306fmodule\u3092\u4f7f\u308f\u305a\u306b\u5358\u7d14\u306bdocker run\u3092\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u53e9\u3044\u3066\u51e6\u7406\u3057\u3066\u3044\u308b\n\n* `Docker API Error: client is newer than server (client API version: 1.22, server API version: 1.21)\"` \u306e\u5bfe\u5fdc\n    * playbook\u306e\u6700\u5f8c\u306e\u300cdocker_api_version\u300d\u306b\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3044\u308bserver API version\u306e\u5024(\u3053\u3053\u3067\u306f1.21)\u3092\u8a2d\u5b9a\u3059\u308b\n\n``` shell\n### playbook\u306e\u4f5c\u6210\n$ vi create_container.yml\n================================================\n- hosts: docker_hosts\n  become: yes\n  tasks:\n    - name: deploy centos container\n      docker: image=centos:centos6 name=webserver01 ports=8081:80 expose=80 tty=yes docker_api_version=1.21\n================================================\n\n### playbook\u306e\u5b9f\u884c\n### (docker\u30db\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u30e6\u30fc\u30b6(vagrant)\u3092\u6307\u5b9a)\n$ ansible-playbook -i hosts create_container.yml -u vagrant -k -K -c paramiko\n\n### \u30b3\u30f3\u30c6\u30ca\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306e\u78ba\u8a8d\n$ sudo docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES\n4fafe9df90d6        centos:centos6            \"/bin/bash\"         About a minute ago   Up About a minute   0.0.0.0:8081->80/tcp   webserver01\n================================================\n```\n\n## \u30b3\u30f3\u30c6\u30ca\u306e\u30d7\u30ed\u30d3\u30b8\u30e7\u30cb\u30f3\u30b0\n\n``` shell\n### playbook\u306e\u4f5c\u6210\n$ vi provisioning.yml\n================================================\n- hosts: containers\n  become: yes\n  connection: docker\n  tasks:\n    - name: Apache\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n      yum: name=httpd state=installed\n\n    - name: Apache\u3092\u8d77\u52d5\u3059\u308b\n      service: name=httpd enabled=yes state=started\n================================================\n\n### playbook\u306e\u5b9f\u884c\n### (\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u4f5c\u696d\u3059\u308b\u30e6\u30fc\u30b6(root)\u3092\u6307\u5b9a)\n$ sudo ansible-playbook -i hosts provisioning.yml -u root -c paramiko\n================================================\nPLAY [containers] **************************************************************\n\nTASK [setup] *******************************************************************\nok: [webserver01]\n\nTASK [Apache\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb] ***********************************************************\nchanged: [webserver01]\n\nTASK [Apache\u3092\u8d77\u52d5\u3059\u308b] *************************************************************\nchanged: [webserver01]\n\nPLAY RECAP *********************************************************************\nwebserver01                : ok=3    changed=2    unreachable=0    failed=0\n================================================\n\n### docker\u30db\u30b9\u30c8\u306e\u5916\u306e\u30db\u30b9\u30c8\u304b\u3089curl\u3092\u5b9f\u884c\n$ curl http://192.168.56.180:8081 | head\n================================================\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n101  4961  101  4961    0     0  1188k      0 --:--:-- --:--:-- --:--:-- 4844k\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n        <head>\n                <title>Apache HTTP Server Test Page powered by CentOS</title>\n                <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n                <style type=\"text/css\">\n                        body {\n                                background-color: #fff;\n                                color: #000;\n                                font-size: 0.9em;\n                                font-family: sans-serif,helvetica;\n================================================\n```\n\n## ansible-container (\u691c\u8a3c\u4e2d)\n\n* [ansible-container(github)](https://github.com/ansible/ansible-container)\n    * docker container\u306e\u30a4\u30e1\u30fc\u30b8\u4f5c\u6210\u3068\u5b9f\u884c\n    * inventory\u306f\u81ea\u52d5\u4f5c\u6210\n    * \u63a5\u7d9a\u306fssh\u3067\u306f\u306a\u304fdocker connection\u3092\u4f7f\u3046\n\n``` shell\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ git clone https://github.com/ansible/ansible-container.git\n$ cd ansible-container\n$ sudo python setup.py install\n\n### \u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\n$ cd samaple\n$ sudo ansible-container build\n================================================\nNo DOCKER_HOST environment variable found. Assuming UNIX socket at /var/run/docker.sock\n(Re)building the Ansible Container image.\nBuilding Docker Engine context...\nStarting Docker build of Ansible Container image (please be patient)...  ### \u3053\u3053\u3067\u3057\u3070\u3089\u304f\u6642\u9593\u304c\u304b\u304b\u308b\n\n================================================\n```\n\n# docker-machine\n\n## CentOS7\u306bVirtualBox\u3092\u5165\u308c\u3066\u4f7f\u3046(\u4f7f\u3048\u306a\u3044)\n\n### VirtualBox\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n``` shell\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum -y install kernel-devel kernel-headers dkms\n$ sudo yum -y groupinstall \"Development Tools\"\n$ sudo yum update\n\n### Oracle\u306e\u30d1\u30d6\u30ea\u30c3\u30af\u30ad\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n$ wget http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc\n$ sudo rpm --import oracle_vbox.asc\n\n### \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u8ffd\u52a0\n$ sudo wget http://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo -O /etc/yum.repos.d/virtualbox.repo\n\n### VirtualBox\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum install VirtualBox-5.0\n\n### VirtualBox\u306e\u8d77\u52d5\n$ sudo systemctl enable vboxdrv.service\n$ sudo systemctl restart vboxdrv.service\n\n\n$ docker-machine create --driver virtualbox default\n================================================\nCreating CA: /home/jsd/.docker/machine/certs/ca.pem\nCreating client certificate: /home/jsd/.docker/machine/certs/cert.pem\nRunning pre-create checks...\nError with pre-create check: \"This computer doesn't have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory\"\n================================================\n```\n\n\n\n* [CentOS 7\u306bVirtual Box\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b](http://orebibou.com/2014/12/centos-7%E3%81%ABvirtual-box%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/)\n\n\n## VMware ESXi \u4e0a\u3067docker\u30db\u30b9\u30c8\u3092\u7528\u610f (\u7528\u610f\u3067\u304d\u3066\u306a\u3044)\n\n* \u9375\u306e\u3068\u3053\u308d\u304c\u3046\u307e\u304f\u4f5c\u308c\u3066\u306a\u3044\u306e\u3067ssh\u3067\u5165\u308c\u306a\u3044\n\n``` shell\n\n### \u6700\u4f4e\u9650\u5fc5\u8981\uff1f\n$ sudo docker-machine create --driver vmwarevsphere \\\n       --vmwarevsphere-vcenter 192.168.56.190 \\\n       --vmwarevsphere-username root \\\n       --vmwarevsphere-password hoge \\\n       --vmwarevsphere-network 'VM Network' \\\n       --vmwarevsphere-datastore 'datastore1' \\\n       test-docker-host001\n\n### \u8272\u3005\u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a\n$ sudo docker-machine create --driver vmwarevsphere \\\n       --vmwarevsphere-vcenter 192.168.56.190 \\\n       --vmwarevsphere-username root \\\n       --vmwarevsphere-password hogehoge \\\n       --vmwarevsphere-network 'VM Network' \\\n       --vmwarevsphere-datastore 'datastore1' \\\n       --vmwarevsphere-cpu-count 2 \\\n       --vmwarevsphere-memory-size 2048 \\\n       --vmwarevsphere-disk-size 40960 \\\n       --vmwarevsphere-datacenter ha-datacenter \\\n       test-docker-host002\n\n```\n\n* [VMware vSphere](https://docs.docker.com/machine/drivers/vsphere/)\n\n\n# docker swarm\n\n# docker-compose (v1)\n\n``` shell\n### yml\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n$ cat docker-compose.yml\n================================================\nsample:\n image: centos:centos6\n tty: true\n container_name: sample\n command: /bin/bash --login\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\n$ docker-compose up -d\n================================================\nCreating sample\n================================================\n\n### \u78ba\u8a8d\n$ docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES\na46905e75bba        centos:centos6                                         \"/bin/bash --login\"      18 seconds ago      Up 17 seconds                                   sample\n================================================\n```\n\n# [\u4fdd\u7559]docker-compose (v2) \n\n* v2\u306f\u8272\u3005\u6319\u52d5\u304c\u5909\u308f\u3063\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u3044\u306e\u3067\u4fdd\u7559\u4e2d\n    * \u4ee5\u4e0b\u306f\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u65b9\u6cd5\n\n``` shell\n### yml\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n$ cat docker-compose.yml\n================================================\nversion: '2'\nservices:\n  web:\n   image: ubuntu\n   container_name: web_server\n   tty: true\n   command: /bin/bash --login\n================================================\n\n### \u30b3\u30f3\u30c6\u30ca\u8d77\u52d5\n$ docker-compose up -d\n================================================\nCreating web_server\n================================================\n\n### \u78ba\u8a8d\n$ docker ps\n================================================\nCONTAINER ID        IMAGE               COMMAND               CREATED             STATUS              PORTS               NAMES\n8999bf4e8af2        ubuntu              \"/bin/bash --login\"   25 seconds ago      Up 23 seconds                           web_server\n================================================\n```\n\n## version2\u306e\u554f\u984c\n\n links\u304c\u52d5\u304b\u306a\u3044\n\n* [Links between containers doesn't work with version 2](https://github.com/docker/compose/issues/2841)\n    * \u56de\u907f\u7b56\n\n# docker\u6280\u8853\n\n## \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc(\u4f5c\u6210\u4e2d)\n\n* [Docker\u3067\u30db\u30b9\u30c8\u3092\u4e57\u3063\u53d6\u3089\u308c\u305f](http://qiita.com/titilat/items/f4f94a0cee9049125156)\n* \u6a29\u9650\n    * privileged\u306b\u3064\u3044\u3066\n\n## \u30cd\u30c3\u30c8\u30ef\u30fc\u30af(\u4f5c\u6210\u4e2d)\n\n* [Docker\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u57fa\u790e](http://deeeet.com/writing/2014/05/11/docker-network/)\n* [Docker\u30b3\u30f3\u30c6\u30ca\u63a5\u7d9a\u30d1\u30bf\u30fc\u30f3 (2014\u5e74\u51ac)](http://deeeet.com/writing/2014/12/01/docker-link-pattern/)\n\n## Data Volume\n\n* [Docker \u306e Data Volume \u307e\u308f\u308a\u3092\u6574\u7406\u3059\u308b](http://qiita.com/lciel/items/e21a4ede3bac7fb3ec5a)\n* NFS\u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\n\n# \u30b5\u30fc\u30d3\u30b9\u7528\u30b3\u30f3\u30c6\u30ca\u69cb\u7bc9\n\n``` shell\n### docker\u30db\u30b9\u30c8\u3067work/docker/containers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n$ mkdir -p /home/${HOME}/work/docker/containers\n```\n\n## \u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\n\n\u516c\u5f0f\u306eCentOS7\u30a4\u30e1\u30fc\u30b8\u304b\u3089\u624b\u4f5c\u696d\u3067\u4f5c\u308b\n\n* \u30a4\u30e1\u30fc\u30b8\u3092\u8d77\u52d5\n\n``` shell\n### --login\u3067\u30b3\u30f3\u30c6\u30ca\u30ed\u30b0\u30a4\u30f3\u6642\u306bprofile\u306a\u3069\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f\u304c\u6709\u52b9\u306b\u306a\u308b\n$ sudo docker run -it --name operation centos:centos7 bin/bash --login\n```\n\n* locale\u306e\u8a2d\u5b9a\n    * ja_JP.UTF-8\u306b\u3059\u308b\n\n``` shell\n### glibc-common\u306e\u5165\u308c\u76f4\u3057\n# yum reinstall -y glibc-common\n\n### locale\u306e\u8ffd\u52a0\n# localedef -v -c -i ja_JP -f UTF-8 ja_JP.UTF-8; echo \"\";\n\n### \u30ed\u30b0\u30a4\u30f3\u6642\u306b\u74b0\u5883\u5909\u6570LANG\u3092\u8a2d\u5b9a\n# vi /etc/profile\n================================================\n...\nexport LANG=ja_JP.UTF-8\n================================================\n\n### \u30ed\u30b0\u30a4\u30f3\u3057\u306a\u304a\u3057\u3066\u78ba\u8a8d\n```\n\n* TimeZone\u306e\u8a2d\u5b9a\n    * JST\u306b\u3059\u308b\n\n``` shell\n### /etc/localtime\u3092\u524a\u9664\n# rm /etc/localtime \n\n### /etc/localtime\u304b\u3089/usr/share/zoneinfo/Asia/Tokyo\u3078symlink\u3092\u306f\u308b\n# ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime\n\n### \u78ba\u8a8d\n# date\n================================================\n2016\u5e74  6\u6708 29\u65e5 \u6c34\u66dc\u65e5 18:28:56 JST\n================================================\n```\n\n* \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n``` shell\n### yum update\n# yum update\n\n### yum install\n# yum install epel-release\n# yum install make gcc-c++ wget git openssh-clients telnet traceroute perl patch tcpdump screen bind-utils strace sysstat lsof mailx zip bzip2 sudo pv which\n```\n\n* operation \u30e6\u30fc\u30b6\u306e\u4f5c\u6210\n\n``` shell\n# user=ftakao2007\n# useradd -u 1000 -G wheel -m ${user}\n# passwd ${user}\n```\n\n(\u4ee5\u4e0b\u4f5c\u6210\u3057\u305foperation\u30e6\u30fc\u30b6\u3067\u4f5c\u696d)\n\n* ansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n``` shell\n### \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo yum install python-devel python-yaml libffi-devel openssl-devel\n$ sudo sh -c \"curl -kL https://bootstrap.pypa.io/get-pip.py | python\"\n\n### setuptools\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\n$ sudo pip install --upgrade setuptools\n\n### ansible\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo pip install ansible\n```\n\n* ansible\u304c\u5b9f\u884c\u3055\u308c\u308bdocker\u30db\u30b9\u30c8\u306esudo\u8a2d\u5b9a\n\n``` shell\n$ sudo visudo\n================================================\n### Wheel\u3092nopasswd\u306b\u3059\u308b\n#%wheel ALL=(ALL)       ALL\n%wheel  ALL=(ALL)       NOPASSWD: ALL\n\n### Defaults    requiretty\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# Defaults    requiretty\n================================================\n```\n\n* ruby\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n    * rbenv\u3067\u6700\u65b0\u3092\u5165\u308c\u308b\n\n``` shell\n(\u3044\u305a\u308c\u66f8\u304f)\n\n### sudo\u8a2d\u5b9a\n$ sudo visudo\n================================================\n### secure_path\u306e\u8a2d\u5b9a\nDefaults    secure_path = /usr/local/bin:/usr/local/rbenv/shims:/usr/local/rbenv/bin:/sbin:/bin:/usr/sbin:/usr/bin\n================================================\n```\n\n## Jenkins\u30b3\u30f3\u30c6\u30ca\n\n* jenkins\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/jenkins_home\u306b\u5168\u3066\u3042\u308b\n\n``` shell\n### docker\u30db\u30b9\u30c8\u306bjenkins_home\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/jenkins_home\n$ chown 1000:1000 ${HOME}/work/docker/containers/jenkins_home\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm -e JAVA_OPTS=\"-Duser.timezone=Asia/Tokyo -Djava.awt.headless=true -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Tokyo\" -v ${HOME}/work/docker/containers/jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --name jenkins jenkins:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it jenkins /bin/bash --login\n```\n\n* [OFFICIAL REPOSITORY](https://hub.docker.com/_/jenkins/)\n* [docker \u306b\u3042\u308b\u516c\u5f0f\u306ejenkins\u3092\u624b\u5143\u3067\u52d5\u304b\u3059\u3002](http://qiita.com/manabuishiirb/items/47deb467f619dd6c4ba2)\n\n### Jenkins\u8a2d\u5b9a\n\n* \u5165\u308c\u305fPlugins\n    * Git plugin\n    * Git client plugin\n        * git\u3092\u4f7f\u3046\u305f\u3081\n    * SSH plugin\n        * \u30ea\u30e2\u30fc\u30c8\u30db\u30b9\u30c8\u306bssh\u3067\u63a5\u7d9a\u3057\u3066\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3059\u308b\u305f\u3081\n    * Disk Usage Plugin\n        * \u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u3092\u76e3\u8996\n    * Discard Old Build plugin\n        * \u30d3\u30eb\u30c9\u5c65\u6b74\u306e\u524a\u9664\n            * \u30ed\u30b0\u304c\u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u3092\u304a\u3073\u3084\u304b\u3059\u306e\u3067\n* Jenkins\u307e\u3068\u3081\u4ee5\u964d\u306f\u4ee5\u4e0b\u3067\n    * [jenkins\u3067\u30b5\u30fc\u30d0\u69cb\u7bc9\u30c4\u30fc\u30eb\u4f5c\u6210](http://qiita.com/ftakao2007/items/cd29bbf734a757ba3daa)\n\n\n## registry\u30b3\u30f3\u30c6\u30ca\n\n* registry\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/registry\u306b\u5168\u3066\u3042\u308b\n\n``` shell\n### docker\u30db\u30b9\u30c8\u306bregistry\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/registry\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm \\\n                -p 5001:5000 \\\n                -v /home/${USER}/work/docker/containers/registry:/var/lib/registry \\\n                --name registry \\\n                registry:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it registry /bin/bash\n```\n\n## redmine\u30b3\u30f3\u30c6\u30ca\n\n* redmine\u3092\u505c\u6b62\u3059\u308b\u3068\u30b3\u30f3\u30c6\u30ca\u3054\u3068\u6d88\u3048\u308b\u304c\u3001\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306fdocker\u30db\u30b9\u30c8\u306e${HOME}/work/containers/redmine\u306b\u5168\u3066\u3042\u308b\n\n``` shell\n### docker\u30db\u30b9\u30c8\u306bredmine\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n$ mkdir -p ${HOME}/work/docker/containers/redmine/plugins\n$ mkdir -p ${HOME}/work/docker/containers/redmine/files\n$ mkdir -p ${HOME}/work/docker/containers/redmine/sqlite\n$ sudo chown 999:999 -R ${HOME}/work/docker/containers/redmine\n\n### \u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\n$ sudo docker run --rm  \\\n                -v ${HOME}/work/docker/containers/redmine/plugins:/usr/src/redmine/plugins \\\n                -v ${HOME}/work/docker/containers/redmine/files:/usr/src/redmine/files \\\n                -v ${HOME}/work/docker/containers/redmine/sqlite:/usr/src/redmine/sqlite \\\n                -p 8081:3000 \\\n                --name redmine \\\n                redmine:latest\n\n### \u30b3\u30f3\u30c6\u30ca\u306b\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u304d\u306f\u5225\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4ee5\u4e0b\u5b9f\u884c\n$ sudo docker exec -it redmine /bin/bash --login\n```\n\n### redmine\u8a2d\u5b9a\n\n* redmine\u307e\u3068\u3081\u4ee5\u964d\u306f\u4ee5\u4e0b\u3067\n    * [\u8272\u3005\u899a\u3048\u66f8\u304d](http://qiita.com/ftakao2007/items/e3ea7e3eb0cebd8d6c43#redmine)\n", "tags": ["centos7", "docker", "Ansible", "CentOS6", "ubuntu16.04"]}