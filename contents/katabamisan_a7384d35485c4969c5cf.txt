{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u30a2\u30bb\u30f3\u30d6\u30ea\u304b\u3089CPUID\u3068\u3044\u3046\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067CPU\u306e\u57fa\u672c\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Microsoft Visual C++\u3067\u306f\u4ee5\u524d\u304b\u3089__asm\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u304c\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u3084CPUID\u3067\u4f7f\u3046\u3053\u3068\u306e\u3067\u304d\u308b\u5177\u4f53\u7684\u306a\u547d\u4ee4\u306f\u5404\u7a2e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3084Intel\u7b49\u306e\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3067\u3059\u304c\u3001\u3053\u306e\u6295\u7a3f\u3067\u306f\u305d\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u8a18\u8ff0\uff08\u899a\u66f8\uff09\u3057\u307e\u3059\u3002\n\nCPUID\u306b\u3064\u3044\u3066\n\n\u547c\u3073\u51fa\u3057\u65b9\nCPUID\u306f\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u547d\u4ee4\u30b3\u30fc\u30c9\uff08OP\u30b3\u30fc\u30c9\uff09\u3067\u3001Microsoft Visual C++\u304b\u3089\u306f\u6b21\u306e\u69d8\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n__asm {\n    mov eax, 0\n    cpuid\n}\n\n__asm {...}\u306f{...}\u5185\u90e8\u304c\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u4e00\u884c\u76ee\u3067\u3042\u308bmov eax, 0\u306feax\u3068\u3044\u3046\u540d\u524d\u306e\u30ec\u30b8\u30b9\u30bf\uff08\u6709\u308a\u4f53\u306b\u8a00\u3048\u3070\u5909\u6570\uff09\u306b0\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4e8c\u884c\u76ee\u306ecpuid\u306fCPU\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308bCPUID\u3068\u3044\u3046\u547d\u4ee4\u3092\u547c\u3073\u51fa\u3059\u6307\u793a\u3067\u3059\u3002\n\u4e00\u898b\u3001cpuid\u306f\u5f15\u6570\u3082\u623b\u308a\u5024\u3082\u53d6\u3089\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u547c\u3073\u51fa\u3057\u524d\u306b\u8a2d\u5b9a\u3055\u308c\u305feax\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5909\u3048\u3001\u7d50\u679c\u3092eax\u3001ebx\u3001ecx\u3001edx\u306e\uff14\u3064\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u610f\u5473\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nCPUID\u306e\u57fa\u672c\u7684\u306a\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n#include <iostream>\n#include <iomanip>\n\nvoid main()\n{\n    int op = 0x00000000;\n    int a, b, c, d;\n    __asm {\n        mov eax, op\n        cpuid\n        mov a, eax\n        mov b, ebx\n        mov c, ecx\n        mov d, edx\n    }\n\n    std::cout << \"CPUID\" << std::endl;\n    std::cout << \"op.: 0x\" << std::setfill('0') << std::setw(8) << std::hex << op << std::endl;\n    std::cout << \"eax: 0x\" << std::setfill('0') << std::setw(8) << std::hex << a << std::endl;\n    std::cout << \"ebx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << b << std::endl;\n    std::cout << \"ecx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << c << std::endl;\n    std::cout << \"edx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << d << std::endl;\n\n    std::cout << \"<PRESS ANY KEY>\" << std::endl;\n    std::cin.get();\n}\n\n\n\u51fa\u529b\u7d50\u679c\nCPUID\nop.: 0x00000000\neax: 0x0000000d\nebx: 0x756e6547\necx: 0x6c65746e\nedx: 0x49656e69\n<PRESS ANY KEY>\n\n\n\n\u547c\u3073\u51fa\u305b\u308b\u6a5f\u80fd\u306e\u6570\n\u4e0a\u306e\u3088\u3046\u306bCPUID\u3067\u306f\u547c\u3073\u51fa\u3057\u524d\u306eeax\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u623b\u308a\u5024\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001eax\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306b\u306f\u4e00\u822c\u7684\u306a\u5024\uff080x00000000\uff5e\u30010x80000000\uff09\u3068\u305d\u308c\u4ee5\u5916\uff080x10000000\u3001\u2026\u2026\uff09\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306a\u5024\u3067\u306f0x00000000\u3067\u5b9f\u884c\u5f8c\u306eeax\u306b0x00000000\u304b\u3089\u59cb\u307e\u308b\u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u30010x80000000\u30670x80000000\u304b\u3089\u59cb\u307e\u308b\u62e1\u5f35\u6a5f\u80fd\u306e\u6700\u5927\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u7d50\u679c\n#include <iostream>\n#include <iomanip>\n\nvoid main()\n{\n    int op = 0x00000000;\n    int number_of_basic_functions;\n    int number_of_extended_functions;\n    __asm {\n        // \u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u306e\u53d6\u5f97\n        mov eax, 0x00000000\n        cpuid\n        mov number_of_basic_functions, eax\n        // \u62e1\u5f35\u6a5f\u80fd\u306e\u6700\u5927\u5024\u306e\u53d6\u5f97\n        mov eax, 0x80000000\n        cpuid\n        mov number_of_extended_functions, eax\n    }\n\n    std::cout << \"CPUID\u306e\u6a5f\u80fd\u7bc4\u56f2\" << std::endl;\n    std::cout << \"\u57fa\u672c\u6a5f\u80fd: 0x00000000-0x\" << std::setw(8) << std::setfill('0')\n        << std::hex << number_of_basic_functions << std::endl;\n    std::cout << \"\u62e1\u5f35\u6a5f\u80fd: 0x80000000-0x\" << std::setw(8) << std::setfill('0')\n        << std::hex<< number_of_extended_functions << std::endl;\n    std::cout << \"<PRESS ANY KEY>\" << std::endl;\n    std::cin.get();\n}\n\n\u203b\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u5185\u90e8\u3067\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u300c;\u300d\u3067\u5341\u5206\u3067\u3059\u304c\u3001Qiita\u304c\u672a\u5bfe\u5fdc\u307f\u305f\u3044\u306a\u306e\u3067\u300c//\u300d\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u529b\u7d50\u679c\nCPUID\u306e\u6a5f\u80fd\u7bc4\u56f2\n\u57fa\u672c\u6a5f\u80fd: 0x00000000-0x0000000d\n\u62e1\u5f35\u6a5f\u80fd: 0x80000000-0x80000008\n<PRESS ANY KEY>\n\n\n\n\u547c\u3073\u51fa\u305b\u308b\u6a5f\u80fd\u3092\u307e\u3068\u3081\u3066\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\nCPUID\u306f\u5f15\u6570\u3068\u3057\u3066eax\u3001\u623b\u308a\u5024\u3068\u3057\u3066eax\uff5eedx\u306e4\u3064\u306e\u30ec\u30b8\u30b9\u30bf\u3057\u304b\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u547c\u3073\u51fa\u3057\u524d\u306eeax\u306e\u5024\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3057\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5168\u3066\u306e\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u623b\u308a\u5024\u306e\u8a73\u7d30\u306f\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3059\u30b3\u30fc\u30c9\u3068\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nvoid cpuid(int cpu_info[4], int info_type)\n{\n    __asm\n    {\n        mov eax, info_type\n            cpuid\n            push eax\n            mov eax, cpu_info\n            mov[eax + 3 * type cpu_info], edx\n            mov[eax + 2 * type cpu_info], ecx\n            mov[eax + 1 * type cpu_info], ebx\n            mov ebx, eax\n            pop eax\n            mov[ebx + 0 * type cpu_info], eax\n    }\n}\n\ninline void cpuid_0x00000000(unsigned int& number_of_basic_functions, std::string& brand_name)\n{\n    int cpu_info[4];\n    cpuid(cpu_info, 0x00000000);\n\n    number_of_basic_functions = cpu_info[0];\n    brand_name.resize(4 * 3 + 1);\n    auto it = std::copy_n((const char*)(cpu_info + 1), 4, brand_name.begin());\n    it = std::copy_n((const char*)(cpu_info + 3), 4, it);\n    it = std::copy_n((const char*)(cpu_info + 2), 4, it);\n    brand_name[12] = '\\0';\n}\n\nvoid output_cpuid_range(unsigned int begin, unsigned int end)\n{\n    int cpu_info[4];\n    for (unsigned int i = begin; i < end; i++)\n    {\n        cpuid(cpu_info, i);\n        std::cout\n            << \"op. \" << std::setw(8) << std::setfill('0') << std::hex << i << \", \"\n            << \"eax: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[0] << \", \"\n            << \"ebx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[1] << \", \"\n            << \"ecx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[2] << \", \"\n            << \"edx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[3] << std::endl;\n    }\n}\n\nvoid main()\n{\n    // CPU\u306e\u540d\u524d\u3092\u53d6\u5f97\n    unsigned int number_of_basic_functions;\n    std::string brand_name;\n    cpuid_0x00000000(number_of_basic_functions, brand_name);\n    std::cout << \"CPUID for \" << brand_name.c_str() << std::endl;\n\n    // \u57fa\u672c\u547d\u4ee4\u306e\u5217\u6319\n    int cpu_info[4];\n    cpuid(cpu_info, 0x00000000);\n    output_cpuid_range(0x00000000, cpu_info[0]);\n\n    // \u62e1\u5f35\u547d\u4ee4\u306e\u5217\u6319\n    cpuid(cpu_info, 0x80000000);\n    output_cpuid_range(0x80000000, cpu_info[1]);\n\n    std::cout << \"PRESS ANY KEY\" << std::endl;\n    std::cin.get();\n}\n\n\n\u51fa\u529b\u7d50\u679c\nCPUID for GenuineIntel\nop. 00000000, eax: 0000000d, ebx: 756e6547, ecx: 6c65746e, edx: 49656e69\nop. 00000001, eax: 000206a7, ebx: 00100800, ecx: 0dbae3bf, edx: bfebfbff\nop. 00000002, eax: 76035a01, ebx: 00f0b0ff, ecx: 00000000, edx: 00ca0000\nop. 00000003, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000004, eax: 1c004121, ebx: 01c0003f, ecx: 0000003f, edx: 00000000\nop. 00000005, eax: 00000040, ebx: 00000040, ecx: 00000003, edx: 00000120\nop. 00000006, eax: 00000075, ebx: 00000002, ecx: 00000009, edx: 00000000\nop. 00000007, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000008, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000009, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 0000000a, eax: 07300803, ebx: 00000000, ecx: 00000000, edx: 00000603\nop. 0000000b, eax: 00000001, ebx: 00000001, ecx: 00000100, edx: 00000000\nop. 0000000c, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nPRESS ANY KEY\n\n\n\n\u88dc\u8db3\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3082\u7528\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u4f8b\u3048\u3070eax = 0x00000000\u3067CPUID\u3092\u547c\u3073\u51fa\u305b\u3070eax\u306b\u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u304c\u6307\u5b9a\u3055\u308c\u308b\u4ed6\u3001ebx\uff5eedx\u306b\u306fCPU\u306e\u30d6\u30e9\u30f3\u30c9\u6587\u5b57\u5217\u304c\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306b\u95a2\u3057\u3066\u306fCPU\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u5404\u30e1\u30fc\u30ab\u30fc\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\u3002\n#\u306f\u3058\u3081\u306b\n\u30a2\u30bb\u30f3\u30d6\u30ea\u304b\u3089CPUID\u3068\u3044\u3046\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067CPU\u306e\u57fa\u672c\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Microsoft Visual C++\u3067\u306f\u4ee5\u524d\u304b\u3089```__asm```\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u304c\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u5177\u4f53\u7684\u306a\u4f7f\u3044\u65b9\u3084CPUID\u3067\u4f7f\u3046\u3053\u3068\u306e\u3067\u304d\u308b\u5177\u4f53\u7684\u306a\u547d\u4ee4\u306f\u5404\u7a2e\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u3084Intel\u7b49\u306e\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3067\u3059\u304c\u3001\u3053\u306e\u6295\u7a3f\u3067\u306f\u305d\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u8a18\u8ff0\uff08\u899a\u66f8\uff09\u3057\u307e\u3059\u3002\n\n#CPUID\u306b\u3064\u3044\u3066\n##\u547c\u3073\u51fa\u3057\u65b9\nCPUID\u306f\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u547d\u4ee4\u30b3\u30fc\u30c9\uff08OP\u30b3\u30fc\u30c9\uff09\u3067\u3001Microsoft Visual C++\u304b\u3089\u306f\u6b21\u306e\u69d8\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```cpp\n__asm {\n\tmov eax, 0\n\tcpuid\n}\n```\n\n```__asm {...}```\u306f{...}\u5185\u90e8\u304c\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u4e00\u884c\u76ee\u3067\u3042\u308b```mov eax, 0```\u306feax\u3068\u3044\u3046\u540d\u524d\u306e\u30ec\u30b8\u30b9\u30bf\uff08\u6709\u308a\u4f53\u306b\u8a00\u3048\u3070\u5909\u6570\uff09\u306b0\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4e8c\u884c\u76ee\u306e```cpuid```\u306fCPU\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308bCPUID\u3068\u3044\u3046\u547d\u4ee4\u3092\u547c\u3073\u51fa\u3059\u6307\u793a\u3067\u3059\u3002\n\n\u4e00\u898b\u3001```cpuid```\u306f\u5f15\u6570\u3082\u623b\u308a\u5024\u3082\u53d6\u3089\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u547c\u3073\u51fa\u3057\u524d\u306b\u8a2d\u5b9a\u3055\u308c\u305feax\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5909\u3048\u3001\u7d50\u679c\u3092eax\u3001ebx\u3001ecx\u3001edx\u306e\uff14\u3064\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u610f\u5473\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n###CPUID\u306e\u57fa\u672c\u7684\u306a\u547c\u3073\u51fa\u3057\u30b5\u30f3\u30d7\u30eb\n\n```cpp\n#include <iostream>\n#include <iomanip>\n\nvoid main()\n{\n\tint op = 0x00000000;\n\tint a, b, c, d;\n\t__asm {\n\t\tmov eax, op\n\t\tcpuid\n\t\tmov a, eax\n\t\tmov b, ebx\n\t\tmov c, ecx\n\t\tmov d, edx\n\t}\n\n\tstd::cout << \"CPUID\" << std::endl;\n\tstd::cout << \"op.: 0x\" << std::setfill('0') << std::setw(8) << std::hex << op << std::endl;\n\tstd::cout << \"eax: 0x\" << std::setfill('0') << std::setw(8) << std::hex << a << std::endl;\n\tstd::cout << \"ebx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << b << std::endl;\n\tstd::cout << \"ecx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << c << std::endl;\n\tstd::cout << \"edx: 0x\" << std::setfill('0') << std::setw(8) << std::hex << d << std::endl;\n\n\tstd::cout << \"<PRESS ANY KEY>\" << std::endl;\n\tstd::cin.get();\n}\n```\n\n```bat:\u51fa\u529b\u7d50\u679c\nCPUID\nop.: 0x00000000\neax: 0x0000000d\nebx: 0x756e6547\necx: 0x6c65746e\nedx: 0x49656e69\n<PRESS ANY KEY>\n```\n\n##\u547c\u3073\u51fa\u305b\u308b\u6a5f\u80fd\u306e\u6570\n\u4e0a\u306e\u3088\u3046\u306bCPUID\u3067\u306f\u547c\u3073\u51fa\u3057\u524d\u306eeax\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u623b\u308a\u5024\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001eax\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306b\u306f\u4e00\u822c\u7684\u306a\u5024\uff080x00000000\uff5e\u30010x80000000\uff09\u3068\u305d\u308c\u4ee5\u5916\uff080x10000000\u3001\u2026\u2026\uff09\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\n\u4e00\u822c\u7684\u306a\u5024\u3067\u306f0x00000000\u3067\u5b9f\u884c\u5f8c\u306eeax\u306b0x00000000\u304b\u3089\u59cb\u307e\u308b\u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u30010x80000000\u30670x80000000\u304b\u3089\u59cb\u307e\u308b\u62e1\u5f35\u6a5f\u80fd\u306e\u6700\u5927\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n##\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u5b9f\u884c\u7d50\u679c\n\n```cpp\n#include <iostream>\n#include <iomanip>\n\nvoid main()\n{\n\tint op = 0x00000000;\n\tint number_of_basic_functions;\n\tint number_of_extended_functions;\n\t__asm {\n\t\t// \u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u306e\u53d6\u5f97\n\t\tmov eax, 0x00000000\n\t\tcpuid\n\t\tmov number_of_basic_functions, eax\n\t\t// \u62e1\u5f35\u6a5f\u80fd\u306e\u6700\u5927\u5024\u306e\u53d6\u5f97\n\t\tmov eax, 0x80000000\n\t\tcpuid\n\t\tmov number_of_extended_functions, eax\n\t}\n\n\tstd::cout << \"CPUID\u306e\u6a5f\u80fd\u7bc4\u56f2\" << std::endl;\n\tstd::cout << \"\u57fa\u672c\u6a5f\u80fd: 0x00000000-0x\" << std::setw(8) << std::setfill('0')\n\t\t<< std::hex << number_of_basic_functions << std::endl;\n\tstd::cout << \"\u62e1\u5f35\u6a5f\u80fd: 0x80000000-0x\" << std::setw(8) << std::setfill('0')\n\t\t<< std::hex<< number_of_extended_functions << std::endl;\n\tstd::cout << \"<PRESS ANY KEY>\" << std::endl;\n\tstd::cin.get();\n}\n```\n\u203b\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u5185\u90e8\u3067\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u300c;\u300d\u3067\u5341\u5206\u3067\u3059\u304c\u3001Qiita\u304c\u672a\u5bfe\u5fdc\u307f\u305f\u3044\u306a\u306e\u3067\u300c//\u300d\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\n```bat:\u51fa\u529b\u7d50\u679c\nCPUID\u306e\u6a5f\u80fd\u7bc4\u56f2\n\u57fa\u672c\u6a5f\u80fd: 0x00000000-0x0000000d\n\u62e1\u5f35\u6a5f\u80fd: 0x80000000-0x80000008\n<PRESS ANY KEY>\n```\n\n##\u547c\u3073\u51fa\u305b\u308b\u6a5f\u80fd\u3092\u307e\u3068\u3081\u3066\u547c\u3073\u51fa\u3057\u3066\u307f\u308b\nCPUID\u306f\u5f15\u6570\u3068\u3057\u3066eax\u3001\u623b\u308a\u5024\u3068\u3057\u3066eax\uff5eedx\u306e4\u3064\u306e\u30ec\u30b8\u30b9\u30bf\u3057\u304b\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u547c\u3073\u51fa\u3057\u524d\u306eeax\u306e\u5024\u3092\u5909\u3048\u3066\u7e70\u308a\u8fd4\u3057\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5168\u3066\u306e\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u623b\u308a\u5024\u306e\u8a73\u7d30\u306f\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306b\u547c\u3073\u51fa\u3059\u30b3\u30fc\u30c9\u3068\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <iomanip>\n#include <algorithm>\n\nvoid cpuid(int cpu_info[4], int info_type)\n{\n\t__asm\n\t{\n\t\tmov eax, info_type\n\t\t\tcpuid\n\t\t\tpush eax\n\t\t\tmov eax, cpu_info\n\t\t\tmov[eax + 3 * type cpu_info], edx\n\t\t\tmov[eax + 2 * type cpu_info], ecx\n\t\t\tmov[eax + 1 * type cpu_info], ebx\n\t\t\tmov ebx, eax\n\t\t\tpop eax\n\t\t\tmov[ebx + 0 * type cpu_info], eax\n\t}\n}\n\ninline void cpuid_0x00000000(unsigned int& number_of_basic_functions, std::string& brand_name)\n{\n\tint cpu_info[4];\n\tcpuid(cpu_info, 0x00000000);\n\n\tnumber_of_basic_functions = cpu_info[0];\n\tbrand_name.resize(4 * 3 + 1);\n\tauto it = std::copy_n((const char*)(cpu_info + 1), 4, brand_name.begin());\n\tit = std::copy_n((const char*)(cpu_info + 3), 4, it);\n\tit = std::copy_n((const char*)(cpu_info + 2), 4, it);\n\tbrand_name[12] = '\\0';\n}\n\nvoid output_cpuid_range(unsigned int begin, unsigned int end)\n{\n\tint cpu_info[4];\n\tfor (unsigned int i = begin; i < end; i++)\n\t{\n\t\tcpuid(cpu_info, i);\n\t\tstd::cout\n\t\t\t<< \"op. \" << std::setw(8) << std::setfill('0') << std::hex << i << \", \"\n\t\t\t<< \"eax: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[0] << \", \"\n\t\t\t<< \"ebx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[1] << \", \"\n\t\t\t<< \"ecx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[2] << \", \"\n\t\t\t<< \"edx: \" << std::setw(8) << std::setfill('0') << std::hex << cpu_info[3] << std::endl;\n\t}\n}\n\nvoid main()\n{\n\t// CPU\u306e\u540d\u524d\u3092\u53d6\u5f97\n\tunsigned int number_of_basic_functions;\n\tstd::string brand_name;\n\tcpuid_0x00000000(number_of_basic_functions, brand_name);\n\tstd::cout << \"CPUID for \" << brand_name.c_str() << std::endl;\n\n\t// \u57fa\u672c\u547d\u4ee4\u306e\u5217\u6319\n\tint cpu_info[4];\n\tcpuid(cpu_info, 0x00000000);\n\toutput_cpuid_range(0x00000000, cpu_info[0]);\n\n\t// \u62e1\u5f35\u547d\u4ee4\u306e\u5217\u6319\n\tcpuid(cpu_info, 0x80000000);\n\toutput_cpuid_range(0x80000000, cpu_info[1]);\n\n\tstd::cout << \"PRESS ANY KEY\" << std::endl;\n\tstd::cin.get();\n}\n```\n\n```bat:\u51fa\u529b\u7d50\u679c\nCPUID for GenuineIntel\nop. 00000000, eax: 0000000d, ebx: 756e6547, ecx: 6c65746e, edx: 49656e69\nop. 00000001, eax: 000206a7, ebx: 00100800, ecx: 0dbae3bf, edx: bfebfbff\nop. 00000002, eax: 76035a01, ebx: 00f0b0ff, ecx: 00000000, edx: 00ca0000\nop. 00000003, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000004, eax: 1c004121, ebx: 01c0003f, ecx: 0000003f, edx: 00000000\nop. 00000005, eax: 00000040, ebx: 00000040, ecx: 00000003, edx: 00000120\nop. 00000006, eax: 00000075, ebx: 00000002, ecx: 00000009, edx: 00000000\nop. 00000007, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000008, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 00000009, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nop. 0000000a, eax: 07300803, ebx: 00000000, ecx: 00000000, edx: 00000603\nop. 0000000b, eax: 00000001, ebx: 00000001, ecx: 00000100, edx: 00000000\nop. 0000000c, eax: 00000000, ebx: 00000000, ecx: 00000000, edx: 00000000\nPRESS ANY KEY\n```\n\n##\u88dc\u8db3\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3082\u7528\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u4f8b\u3048\u3070eax = 0x00000000\u3067CPUID\u3092\u547c\u3073\u51fa\u305b\u3070eax\u306b\u57fa\u672c\u6a5f\u80fd\u306e\u6700\u5927\u5024\u304c\u6307\u5b9a\u3055\u308c\u308b\u4ed6\u3001ebx\uff5eedx\u306b\u306fCPU\u306e\u30d6\u30e9\u30f3\u30c9\u6587\u5b57\u5217\u304c\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306b\u95a2\u3057\u3066\u306fCPU\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u5404\u30e1\u30fc\u30ab\u30fc\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u3092\u53c2\u7167\u3057\u3066\u4e0b\u3055\u3044\u3002\n", "tags": ["C++11", "C++", "assembly"]}