{"context": " More than 1 year has passed since last update.PCRE \u95a2\u6570\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u3046\u3061\u3001\\h (\u6c34\u5e73\u65b9\u5411\u306e\u7a7a\u767d\u6587\u5b57)\u3001\\s (\u7a7a\u767d\u6587\u5b57)\u3001\\v (\u5782\u76f4\u65b9\u5411\u306e\u7a7a\u767d\u6587\u5b57) \u3092\u4f7f\u3046\u5834\u5408\u3001UTF-8 \u306e\u30aa\u30d7\u30b7\u30e7\u30f3 (u)\u3092\u3064\u3051\u306a\u3044\u3068\u3001preg_replace \u306a\u3069\u3067\u4e0d\u8981\u306a\u6587\u5b57\u3092\u524a\u9664\u3059\u308b\u969b\u306b\u60f3\u5b9a\u3057\u306a\u3044\u6587\u5b57\u3092\u7834\u58ca\u3059\u308b\u304a\u305d\u308c\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3072\u3089\u304c\u306a\u306e\u300c\u3060\u300d(U+3060) \u304c\u7834\u58ca\u3055\u308c\u308b\u69d8\u5b50\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u300c\u3060\u300d\u306e3\u756a\u76ee\u306e\u30d0\u30a4\u30c8 (0xA0) \u304c\u30ce\u30fc\u30d6\u30ec\u30fc\u30af\u30b9\u30da\u30fc\u30b9 (U+00A0) \u3068\u8aa4\u691c\u51fa\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n<?php\n\n$str = \"\u3060\";\n\nvar_dump(\n  \"\\xE3\\x81\\xA0\" === $str,\n  \"\\xE3\\x81\" === preg_replace(\"/\\h/\", \"\", $str),\n  \"e381\" === bin2hex(preg_replace(\"/\\h/\", \"\", $str)),\n  $str === preg_replace(\"/\\h/u\", \"\", $str)\n);\n\nUnicode \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57 (U+0000 \u304b\u3089 U+10FFFF) \u306b\u5bfe\u3057\u3066\u3053\u308c\u3089\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u8a66\u3059\u3068\u3001\u81a8\u5927\u306a\u6570\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002u \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u5834\u5408\u3067\u3082\u3001\u8907\u6570\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3057\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3089\u306e1\u30641\u3064\u304c\u672c\u5f53\u306b\u60f3\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u6587\u5b57\u3067\u3042\u308b\u306e\u304b\u3069\u3046\u304b\u3092\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002u \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u3068\u3001\u6b21\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3057\u307e\u3059\u3002\nU+0009 U+0020 U+00A0 U+1680 U+180E U+2000\nU+2001 U+2002 U+2003 U+2004 U+2005 U+2006\nU+2007 U+2008 U+2009 U+200A U+202F U+205F\nU+3000 \n\n<?php\n\nprint_matched_chars(function($char) {\n    return preg_match('/\\h/', $char);\n});\n\nfunction print_matched_chars(callable $callable) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = utf8_chr($i);\n        $hex = strtoupper(dechex($i));\n\n        if ($callable($char)) {\n            echo 'U+',\n            $i < 0x1000 ? str_repeat('0', 4 - strlen($hex)) : '',\n            $hex, ': ' , $char, PHP_EOL;\n        }\n\n    }\n}\n\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0x10FFFF], 'UTF-8');\n}\n\nPCRE \u95a2\u6570\u306e[\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9](http://php.net/manual/ja/regexp.reference.escape.php)\u306e\u3046\u3061\u3001`\\h` (\u6c34\u5e73\u65b9\u5411\u306e\u7a7a\u767d\u6587\u5b57)\u3001`\\s` (\u7a7a\u767d\u6587\u5b57)\u3001`\\v` (\u5782\u76f4\u65b9\u5411\u306e\u7a7a\u767d\u6587\u5b57) \u3092\u4f7f\u3046\u5834\u5408\u3001UTF-8 \u306e\u30aa\u30d7\u30b7\u30e7\u30f3 (u)\u3092\u3064\u3051\u306a\u3044\u3068\u3001preg_replace \u306a\u3069\u3067\u4e0d\u8981\u306a\u6587\u5b57\u3092\u524a\u9664\u3059\u308b\u969b\u306b\u60f3\u5b9a\u3057\u306a\u3044\u6587\u5b57\u3092\u7834\u58ca\u3059\u308b\u304a\u305d\u308c\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3072\u3089\u304c\u306a\u306e\u300c\u3060\u300d(U+3060) \u304c\u7834\u58ca\u3055\u308c\u308b\u69d8\u5b50\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u300c\u3060\u300d\u306e3\u756a\u76ee\u306e\u30d0\u30a4\u30c8 (0xA0) \u304c\u30ce\u30fc\u30d6\u30ec\u30fc\u30af\u30b9\u30da\u30fc\u30b9 (U+00A0) \u3068\u8aa4\u691c\u51fa\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```php\n<?php\n\n$str = \"\u3060\";\n\nvar_dump(\n  \"\\xE3\\x81\\xA0\" === $str,\n  \"\\xE3\\x81\" === preg_replace(\"/\\h/\", \"\", $str),\n  \"e381\" === bin2hex(preg_replace(\"/\\h/\", \"\", $str)),\n  $str === preg_replace(\"/\\h/u\", \"\", $str)\n);\n```\n\nUnicode \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57 (U+0000 \u304b\u3089 U+10FFFF) \u306b\u5bfe\u3057\u3066\u3053\u308c\u3089\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u8a66\u3059\u3068\u3001\u81a8\u5927\u306a\u6570\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002u \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u5834\u5408\u3067\u3082\u3001\u8907\u6570\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3057\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3089\u306e1\u30641\u3064\u304c\u672c\u5f53\u306b\u60f3\u5b9a\u3057\u305f\u7a2e\u985e\u306e\u6587\u5b57\u3067\u3042\u308b\u306e\u304b\u3069\u3046\u304b\u3092\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002u \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u3068\u3001\u6b21\u306e\u6587\u5b57\u304c\u30de\u30c3\u30c1\u3057\u307e\u3059\u3002\n\n```\nU+0009 U+0020 U+00A0 U+1680 U+180E U+2000\nU+2001 U+2002 U+2003 U+2004 U+2005 U+2006\nU+2007 U+2008 U+2009 U+200A U+202F U+205F\nU+3000 \n```\n\n```php\n<?php\n\nprint_matched_chars(function($char) {\n    return preg_match('/\\h/', $char);\n});\n\nfunction print_matched_chars(callable $callable) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = utf8_chr($i);\n        $hex = strtoupper(dechex($i));\n\n        if ($callable($char)) {\n            echo 'U+',\n            $i < 0x1000 ? str_repeat('0', 4 - strlen($hex)) : '',\n            $hex, ': ' , $char, PHP_EOL;\n        }\n\n    }\n}\n\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0x10FFFF], 'UTF-8');\n}\n```\n", "tags": ["PHP", "unicode"]}