{"context": " More than 1 year has passed since last update.JUnit\u3067private methods\u306enull\u30c6\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u8a70\u307e\u3063\u305f\u306e\u3067\u3001\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001\u305d\u308c\u307e\u3067\u306e\u904e\u7a0b\u3092\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u3067\u884c\u3044\u307e\u3059\u3002\n\nJUnit\u3067\u306eprivate method\u306e\u30c6\u30b9\u30c8\n\u3053\u308c\u306f\u6709\u540d\u3067\u3059\u306d\u3002\n\nprivateTest.java\npublic class PrivateTest {\n    @Test\n    public void test() {\n        // Method\u3092\u53d6\u5f97\u3057\u307e\u3059\n        // getMethod\u3067\u306f\u306a\u304f, getDeclaredMethod\n        Method method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n        // private method\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n        method.setAccessible(true);\n        Sample sample = new Sample();\n        // \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u30c6\u30b9\u30c8\u3059\u308b\u3002\n        assertEquals(Integer.valueOf(1), (Integer)method.invoke(sample, \"A\"));\n    }\n}\n\n\n\nJUnit\u3067\u306eprivate method\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\n\u8abf\u3079\u305f\u3089\u51fa\u3066\u304d\u307e\u3059\u3002\n\nprivateTest.java\npublic class PrivateTest {\n    @Test(expected = IllegalArgumentException.class)\n    public void test() {\n        Method method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n        method.setAccessible(true);\n        Sample sample = new Sample();\n        // \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u4f8b\u5916\u3092\u691c\u77e5\u3059\u308b\u3002\n        try {\n            method.invoke(sample, \"\"));\n            // invoke\u3067\u4f8b\u5916\u304c\u51fa\u305f\u3089InvocationTargetException\u3092\u306a\u3052\u308b\u3002\n        } catch (final InvocationTargetException e) {\n            // \u6295\u3052\u3089\u308c\u305f\u672c\u6765\u306e\u4f8b\u5916\u3092\u53d6\u5f97\u3059\u308b\u3002\n            final Throwable throwable = e.getCause();\n            // \u4ed6\u306e\u4f8b\u5916\u3067\u306f\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n            if (throwable instanceof IllegalArgumentException) {\n                // \u30ad\u30e3\u30b9\u30c8\u3092\u3057\u3066\u3001\u306a\u3052\u308b\u3002\n                throw (IllegalArgumentException) throwable;\n            } else {\n                Assert.fail();\n            }\n        }\n        Assert.fail();\n    }\n}\n\n\n\nJUnit\u3067\u306eprivate method\u3078\u306e\u5f15\u6570null\u30c6\u30b9\u30c8\n\u672c\u984c\u3067\u3059\u3002\n\nprivateTest.java\npublic class PrivateTest {\n    @Test(expected = NullPointerException.class)\n    public void test() {\n        Method method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n        method.setAccessible(true);\n        Sample sample = new Sample();\n        try {\n            // invoke(Object, Object...)\n            // \u30e1\u30bd\u30c3\u30c9\u3078\u6e21\u3059\u5f15\u6570\u304c\u3001Object...\u306a\u306e\u3067\n            // new Object[]{null}\u3068\u3057\u3066\u6e21\u3059\u3002\n            method.invoke(sample, new Object[]{ null }));\n        } catch (final InvocationTargetException e) {\n            final Throwable throwable = e.getCause();\n            if (throwable instanceof NullPointerException) {\n                throw (NullPointerException) throwable;\n            } else {\n                Assert.fail();\n            }\n        }\n        Assert.fail();\n    }\n}\n\n\nJUnit\u3067private methods\u306enull\u30c6\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u8a70\u307e\u3063\u305f\u306e\u3067\u3001\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001\u305d\u308c\u307e\u3067\u306e\u904e\u7a0b\u3092\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u3067\u884c\u3044\u307e\u3059\u3002\n\n## JUnit\u3067\u306eprivate method\u306e\u30c6\u30b9\u30c8\n\n\u3053\u308c\u306f\u6709\u540d\u3067\u3059\u306d\u3002\n\n```java:privateTest.java\npublic class PrivateTest {\n\t@Test\n\tpublic void test() {\n\t\t// Method\u3092\u53d6\u5f97\u3057\u307e\u3059\n\t\t// getMethod\u3067\u306f\u306a\u304f, getDeclaredMethod\n\t\tMethod method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n\t\t// private method\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\t\tmethod.setAccessible(true);\n\t\tSample sample = new Sample();\n\t\t// \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u30c6\u30b9\u30c8\u3059\u308b\u3002\n\t\tassertEquals(Integer.valueOf(1), (Integer)method.invoke(sample, \"A\"));\n\t}\n}\n```\n\n## JUnit\u3067\u306eprivate method\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\n\n\u8abf\u3079\u305f\u3089\u51fa\u3066\u304d\u307e\u3059\u3002\n\n```java:privateTest.java\npublic class PrivateTest {\n\t@Test(expected = IllegalArgumentException.class)\n\tpublic void test() {\n\t\tMethod method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n\t\tmethod.setAccessible(true);\n\t\tSample sample = new Sample();\n\t\t// \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u4f8b\u5916\u3092\u691c\u77e5\u3059\u308b\u3002\n\t\ttry {\n\t\t\tmethod.invoke(sample, \"\"));\n\t\t\t// invoke\u3067\u4f8b\u5916\u304c\u51fa\u305f\u3089InvocationTargetException\u3092\u306a\u3052\u308b\u3002\n\t\t} catch (final InvocationTargetException e) {\n\t\t\t// \u6295\u3052\u3089\u308c\u305f\u672c\u6765\u306e\u4f8b\u5916\u3092\u53d6\u5f97\u3059\u308b\u3002\n\t\t\tfinal Throwable throwable = e.getCause();\n\t\t\t// \u4ed6\u306e\u4f8b\u5916\u3067\u306f\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\n\t\t\tif (throwable instanceof IllegalArgumentException) {\n\t\t\t\t// \u30ad\u30e3\u30b9\u30c8\u3092\u3057\u3066\u3001\u306a\u3052\u308b\u3002\n\t\t\t\tthrow (IllegalArgumentException) throwable;\n\t\t\t} else {\n\t\t\t\tAssert.fail();\n\t\t\t}\n\t\t}\n\t\tAssert.fail();\n\t}\n}\n```\n\n## JUnit\u3067\u306eprivate method\u3078\u306e\u5f15\u6570null\u30c6\u30b9\u30c8\n\n\u672c\u984c\u3067\u3059\u3002\n\n```java:privateTest.java\npublic class PrivateTest {\n\t@Test(expected = NullPointerException.class)\n\tpublic void test() {\n\t\tMethod method = Sample.class.getDeclaredMethod(\"privateMethod\", String.class);\n\t\tmethod.setAccessible(true);\n\t\tSample sample = new Sample();\n\t\ttry {\n\t\t\t// invoke(Object, Object...)\n\t\t\t// \u30e1\u30bd\u30c3\u30c9\u3078\u6e21\u3059\u5f15\u6570\u304c\u3001Object...\u306a\u306e\u3067\n\t\t\t// new Object[]{null}\u3068\u3057\u3066\u6e21\u3059\u3002\n\t\t\tmethod.invoke(sample, new Object[]{ null }));\n\t\t} catch (final InvocationTargetException e) {\n\t\t\tfinal Throwable throwable = e.getCause();\n\t\t\tif (throwable instanceof NullPointerException) {\n\t\t\t\tthrow (NullPointerException) throwable;\n\t\t\t} else {\n\t\t\t\tAssert.fail();\n\t\t\t}\n\t\t}\n\t\tAssert.fail();\n\t}\n}\n```\n", "tags": ["JUnit", "private", "test", "NULL", "Java"]}