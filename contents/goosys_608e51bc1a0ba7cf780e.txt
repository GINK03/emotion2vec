{"tags": ["Rails", "carrierwave", "gzip"], "context": "\u72ec\u81ea\u306eProcess\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u304c\u77e5\u308a\u305f\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30dd\u30a4\u30f3\u30c8\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\n\n\n/tmp \u30d5\u30a9\u30eb\u30c0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\uff08current_path\uff09\u3092\u52a0\u5de5\u3057\u3066\u4e0a\u66f8\u304d\u3059\u308b\n\u30d5\u30a1\u30a4\u30eb\u540d\u306ffull_filename\u30e1\u30bd\u30c3\u30c9\u3092\u4e0a\u66f8\u304d\u3057\u3066\u5909\u66f4\u3059\u308b\nProcess\u3067\u306f/tmp\u5185\u3078\u306e\u4fdd\u5b58\u307e\u3067\u3067\u3088\u304f\u3001\u30e2\u30c7\u30eb\u304csave\u3055\u308c\u308b\u3068store!\uff08/uploads\u3084S3\u3078\u8ee2\u9001\uff09\u3055\u308c\u308b\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u305f\u3002\n\n\u6ce8\u610f\u70b9\nstore\u3055\u308c\u308b\u6642\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u7279\u5b9a\u3067\u304d\u306a\u3044\u3068\u8ee2\u9001\u3055\u308c\u306a\u3044\u306e\u3067\u3001Process\u306e\u4e2d\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u305f\u308a\u3068\u304b\u306fNG\u306a\u611f\u3058\u3067\u3059\u3002\u304b\u3063\u3053\u60aa\u3044\u3051\u3069\u90fd\u5ea6full_filename\u306b\u5b9a\u7fa9\u3057\u305f\u65b9\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u307e\u3042\u3001Process\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u308b\u3068\u4ed6\u306eProcess\u3068\u5171\u5b58\u3057\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u3044\u3044\u306e\u304b\u3082\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 / Gist\n\nconfig/initializers/extensions/carrierwave/processings/gzip.rb\nmodule CarrierWave\n  module Gzip\n    extend ActiveSupport::Concern\n\n    module ClassMethods\n      def gzip_compress\n        process :gzip\n      end\n    end\n\n    def gzip_compress\n      # move upload to local cache\n      cache_stored_file! if !cached?\n\n      directory = File.dirname( current_path )\n\n      # move upload to tmp file - encoding result will be saved to\n      # original file name\n      tmp_path   = File.join( directory, \"tmpfile\" )\n      File.rename current_path, tmp_path\n\n      # compress\n      content = File.read(tmp_path)\n      gzip_content = ActiveSupport::Gzip.compress(content)\n      File.open(current_path, \"wb\") do |f|\n        f.write(gzip_content)\n      end\n\n      # delete tmp file\n      File.delete tmp_path\n    end\n\n    private\n      def prepare!\n        cache_stored_file! if !cached?\n      end\n  end\nend\n\n\n\n\u4f7f\u3044\u65b9\n\napp/uploaders/image_uploader.rb\nclass ImageUploader < CarrierWave::Uploader::Base\n\n  include CarrierWave::RMagick\n  include CarrierWave::Gzip\n\n  storage :file\n\n  # Gzip version\n  version :gz do\n    process :gzip_compress\n    def full_filename(for_file)\n      for_file + \".gz\"\n    end\n  end\n\n  # \u65e2\u5b58\u306eprocess\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3082\u53ef\u80fd\n  # Thumbnail & Gzip version\n  version :thumb do\n    process :resize_to_fit => [100, 100]\n    process :gzip_compress\n    def full_filename(for_file)\n      super(for_file) + \".gz\"\n    end\n  end\n\n  # gz\u7248\u304c\u3042\u308c\u3070gz\u306eURL\u3092\u3001\u306a\u3051\u308c\u3070original\u306eURL\u3092\u8fd4\u3059\n  def gzurl\n    if self.gz.present?\n      self.gz.url\n    else\n      self.url\n    end\n  end\nend\n\n\n\u3053\u306e\u8a2d\u5b9a\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3068\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30d5\u30a9\u30eb\u30c0\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\noriginal.png\noriginal.png.gz\nthumb_original.png.gz\n\n\u3042\u3068\u306fWEB\u30b5\u30fc\u30d0\u30fc\u3067\u3001\nContent-Encoding: gzip\u51fa\u3057\u3066\u3042\u3052\u305f\u308a\u3001gz\u306a\u3057\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3082Accept-Encoding:gzip\u304c\u3042\u308c\u3070gz\u3042\u308a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3057\u3066\u3042\u3052\u305f\u308a\u3057\u3066\u3042\u308c\u3070\u3088\u3055\u3052\u3067\u3059\u3002\n\n\u3064\u3044\u3067\u306b\n\u672c\u756a\u3067\u306f\u306a\u304b\u306a\u304bRails\u304b\u3089\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u4fe1\u3057\u305f\u308a\u3057\u306a\u3044\u3067\u3059\u304c\u3001\u958b\u767a\u74b0\u5883\u3060\u3068rails s\u3057\u3066\u3059\u3050\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u3082\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001Rails\u304b\u3089\u3082\u3061\u3083\u3093\u3068Content-Encoding: gzip\u3092\u51fa\u3057\u3066\u304a\u3051\u308c\u3070\u3044\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u30d8\u30c3\u30c0\u30fc\u3092\u5dee\u3057\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\n\n\u3084\u3063\u3066\u307f\u308b\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 / Gist\n\nconfig/initializers/middlewares/gzip_header.rb\nmodule Rack\n  class GzipHeader\n\n    def initialize(app, options = {})\n      @app = app\n      @start_with = options[:start_with] || '/'\n      @end_with   = options[:end_with]   || '.gz'\n    end\n\n    def call(env)\n      status, headers, body = result = @app.call(env)\n\n      case status\n      when 200  # OK\n        path = URI.unescape(env['PATH_INFO'])\n        if path.start_with?(@start_with) && path.end_with?(@end_with)\n          enc = env['HTTP_ACCEPT_ENCODING']\n          if enc && enc.include?('gzip')\n            result[1]['Content-Encoding'] = 'gzip'\n          end\n        end\n      end\n      result\n    end\n\n  end\nend\n\n\n\n\u4f7f\u3063\u3066\u307f\u308b\n\nconfig/application.rb\nmodule App\n  class Application < Rails::Application\n    config.middleware.insert_before ActionDispatch::Static, \n      \"Rack::GzipHeader\", {\n        start_with: \"/uploads/\", \n        end_with:   \".gz\"\n      }\n\n\n\n\u3053\u308c\u3067\u3001\u300c/uploads/\u4ee5\u4e0b\u306e.gz\u30d5\u30a1\u30a4\u30eb\u304cAccept-Encoding:gzip\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u305f\u3089Content-Encoding: gzip\u3092\u30d8\u30c3\u30c0\u30fc\u306b\u8ffd\u52a0\u3059\u308b\u300d\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u72ec\u81ea\u306eProcess\u3092\u8ffd\u52a0\u3059\u308b\u65b9\u6cd5\u304c\u77e5\u308a\u305f\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30dd\u30a4\u30f3\u30c8\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001\n\n1. `/tmp` \u30d5\u30a9\u30eb\u30c0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\uff08`current_path`\uff09\u3092\u52a0\u5de5\u3057\u3066\u4e0a\u66f8\u304d\u3059\u308b\n2. \u30d5\u30a1\u30a4\u30eb\u540d\u306f`full_filename`\u30e1\u30bd\u30c3\u30c9\u3092\u4e0a\u66f8\u304d\u3057\u3066\u5909\u66f4\u3059\u308b\n3. Process\u3067\u306f`/tmp`\u5185\u3078\u306e\u4fdd\u5b58\u307e\u3067\u3067\u3088\u304f\u3001\u30e2\u30c7\u30eb\u304csave\u3055\u308c\u308b\u3068`store!`\uff08`/uploads`\u3084`S3`\u3078\u8ee2\u9001\uff09\u3055\u308c\u308b\n\n\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u305f\u3002\n\n## \u6ce8\u610f\u70b9\n`store`\u3055\u308c\u308b\u6642\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u7279\u5b9a\u3067\u304d\u306a\u3044\u3068\u8ee2\u9001\u3055\u308c\u306a\u3044\u306e\u3067\u3001Process\u306e\u4e2d\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u305f\u308a\u3068\u304b\u306fNG\u306a\u611f\u3058\u3067\u3059\u3002\u304b\u3063\u3053\u60aa\u3044\u3051\u3069\u90fd\u5ea6`full_filename`\u306b\u5b9a\u7fa9\u3057\u305f\u65b9\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u307e\u3042\u3001Process\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u308b\u3068\u4ed6\u306eProcess\u3068\u5171\u5b58\u3057\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u3044\u3044\u306e\u304b\u3082\u3067\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\n[\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 / Gist](https://gist.github.com/goosys/864fba5dcc8a765e1f313f6a48250835)\n\n```ruby:config/initializers/extensions/carrierwave/processings/gzip.rb\nmodule CarrierWave\n  module Gzip\n    extend ActiveSupport::Concern\n\n    module ClassMethods\n      def gzip_compress\n        process :gzip\n      end\n    end\n\n    def gzip_compress\n      # move upload to local cache\n      cache_stored_file! if !cached?\n\n      directory = File.dirname( current_path )\n\n      # move upload to tmp file - encoding result will be saved to\n      # original file name\n      tmp_path   = File.join( directory, \"tmpfile\" )\n      File.rename current_path, tmp_path\n\n      # compress\n      content = File.read(tmp_path)\n      gzip_content = ActiveSupport::Gzip.compress(content)\n      File.open(current_path, \"wb\") do |f|\n        f.write(gzip_content)\n      end\n\n      # delete tmp file\n      File.delete tmp_path\n    end\n\n    private\n      def prepare!\n        cache_stored_file! if !cached?\n      end\n  end\nend\n```\n\n# \u4f7f\u3044\u65b9\n\n```ruby:app/uploaders/image_uploader.rb\nclass ImageUploader < CarrierWave::Uploader::Base\n\n  include CarrierWave::RMagick\n  include CarrierWave::Gzip\n\n  storage :file\n\n  # Gzip version\n  version :gz do\n    process :gzip_compress\n    def full_filename(for_file)\n      for_file + \".gz\"\n    end\n  end\n\n  # \u65e2\u5b58\u306eprocess\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3082\u53ef\u80fd\n  # Thumbnail & Gzip version\n  version :thumb do\n    process :resize_to_fit => [100, 100]\n    process :gzip_compress\n    def full_filename(for_file)\n      super(for_file) + \".gz\"\n    end\n  end\n\n  # gz\u7248\u304c\u3042\u308c\u3070gz\u306eURL\u3092\u3001\u306a\u3051\u308c\u3070original\u306eURL\u3092\u8fd4\u3059\n  def gzurl\n    if self.gz.present?\n      self.gz.url\n    else\n      self.url\n    end\n  end\nend\n```\n\n\u3053\u306e\u8a2d\u5b9a\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3068\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u30d5\u30a9\u30eb\u30c0\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\noriginal.png\noriginal.png.gz\nthumb_original.png.gz\n```\n\n\u3042\u3068\u306fWEB\u30b5\u30fc\u30d0\u30fc\u3067\u3001\n`Content-Encoding: gzip`\u51fa\u3057\u3066\u3042\u3052\u305f\u308a\u3001gz\u306a\u3057\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3082`Accept-Encoding:gzip`\u304c\u3042\u308c\u3070gz\u3042\u308a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3057\u3066\u3042\u3052\u305f\u308a\u3057\u3066\u3042\u308c\u3070\u3088\u3055\u3052\u3067\u3059\u3002\n\n# \u3064\u3044\u3067\u306b\n\n\u672c\u756a\u3067\u306f\u306a\u304b\u306a\u304bRails\u304b\u3089\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u4fe1\u3057\u305f\u308a\u3057\u306a\u3044\u3067\u3059\u304c\u3001\u958b\u767a\u74b0\u5883\u3060\u3068`rails s`\u3057\u3066\u3059\u3050\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u3082\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001Rails\u304b\u3089\u3082\u3061\u3083\u3093\u3068`Content-Encoding: gzip`\u3092\u51fa\u3057\u3066\u304a\u3051\u308c\u3070\u3044\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u30d8\u30c3\u30c0\u30fc\u3092\u5dee\u3057\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\n\n## \u3084\u3063\u3066\u307f\u308b\n\n[\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 / Gist](https://gist.github.com/goosys/622a64b4bc399c666592f07479cb1975)\n\n```ruby:config/initializers/middlewares/gzip_header.rb\nmodule Rack\n  class GzipHeader\n\n    def initialize(app, options = {})\n      @app = app\n      @start_with = options[:start_with] || '/'\n      @end_with   = options[:end_with]   || '.gz'\n    end\n\n    def call(env)\n      status, headers, body = result = @app.call(env)\n\n      case status\n      when 200  # OK\n        path = URI.unescape(env['PATH_INFO'])\n        if path.start_with?(@start_with) && path.end_with?(@end_with)\n          enc = env['HTTP_ACCEPT_ENCODING']\n          if enc && enc.include?('gzip')\n            result[1]['Content-Encoding'] = 'gzip'\n          end\n        end\n      end\n      result\n    end\n\n  end\nend\n```\n\n## \u4f7f\u3063\u3066\u307f\u308b\n\n```ruby:config/application.rb\nmodule App\n  class Application < Rails::Application\n    config.middleware.insert_before ActionDispatch::Static, \n      \"Rack::GzipHeader\", {\n        start_with: \"/uploads/\", \n        end_with:   \".gz\"\n      }\n\n```\n\n\u3053\u308c\u3067\u3001\u300c`/uploads/`\u4ee5\u4e0b\u306e`.gz`\u30d5\u30a1\u30a4\u30eb\u304c`Accept-Encoding:gzip`\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u3066\u3044\u305f\u3089`Content-Encoding: gzip`\u3092\u30d8\u30c3\u30c0\u30fc\u306b\u8ffd\u52a0\u3059\u308b\u300d\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n"}