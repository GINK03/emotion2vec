{"context": " More than 1 year has passed since last update.Cowoby \u306e SPDY \u5b9f\u88c5\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ranch_ssl \u3092\u547c\u3076\u305f\u3081\u3001TLS (NPN) \u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u751f\u306e SPDY \u3092\u4f7f\u3046\u306b\u306f start_spdy \u3092\u518d\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3064\u3044\u3067\u306b supervisor \u306b\u3076\u3089\u4e0b\u3052\u308b child_spec/0 \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u8272\u3005\u7701\u7565\u3057\u3066\u307e\u3059\u3001\u30dd\u30a4\u30f3\u30bf\u3060\u3051\u3002\n%% supervisor \u306b\u3076\u3089\u4e0b\u3052\u308b ChildSpec \u3092\u8fd4\u3059\nchild_spec() ->\n    Dispatch = cowboy_router:compile([\n                   {'_', [\n                           {\"/\", index_handler, []}\n                   ]}\n               ]),\n    {cowboy_spdy,\n     {?MODULE, start_spdy, [spdy, 100,\n                           [{port, 8080}],\n                           [{env, [{dispatch, Dispatch}]}]]},\n     permanent, 5000, worker, [cowboy_spdy]}.\n\n%% ranch_tcp \u306b\u3057\u3066\u3055\u3089\u306b NPN \u5468\u308a\u3092\u524a\u9664\nstart_spdy(Ref, NbAcceptors, TransOpts, ProtoOpts)\n        when is_integer(NbAcceptors), NbAcceptors > 0 ->\n    TransOpts2 = [{connection_type, supervisor}|TransOpts],\n    ranch:start_listener(Ref, NbAcceptors, ranch_tcp, TransOpts2, cowboy_spdy, ProtoOpts).\n\nrebar.config \u306b ranch \u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n{ranch, \".*\", {git, \"git://github.com/extend/ranch.git\", \"0.9.0\"}\n\nsupervisor \u306b\u3076\u3089\u4e0b\u3052\u3066\u307f\u307e\u3059\u3002\n1> supervisor:which_children(app_sup).\n[{cowboy_spdy,<0.67.0>,worker,[cowboy_spdy]}]\n\nHello world \u3092\u8fd4\u3059\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\n-module(index_handler).\n\n-export([init/3]).\n-export([handle/2]).\n-export([terminate/3]).\n\n-include_lib(\"eunit/include/eunit.hrl\").\n\ninit(_Transport, Req, []) ->\n    {ok, Req, undefined}.\n\nhandle(Req, State) ->\n    {Method, Req2} = cowboy_req:method(Req),\n    ?debugVal(Method),\n    {ok, Req3} = cowboy_req:reply(200, [{<<\"content-type\">>, <<\"text/plain; charset=utf-8\">>}],\n                                  <<\"Hello world.\">>, Req2).\n    {ok, Req3, State}.\n\nterminate(_Reason, _Req, _State) ->\n    ok.\n\n\u3082\u3061\u308d\u3093 spdylay \u306e spdycat \u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\n$ ./spdycat --no-tls -3 -v --color http://127.0.0.1:8080/\n[  0.000] Handshake complete\n[  0.000] send SYN_STREAM frame <version=3, flags=1, length=220>\n          (stream_id=1, assoc_stream_id=0, pri=3)\n          :host: 127.0.0.1:8080\n          :method: GET\n          :path: /\n          :scheme: http\n          :version: HTTP/1.1\n          accept: */*\n          accept-encoding: gzip, deflate\n          user-agent: spdylay/1.2.4-DEV\n[  0.018] recv SYN_REPLY frame <version=3, flags=0, length=81>\n          (stream_id=1)\n          :status: 200 OK\n          :version: HTTP/1.1\n          content-length: 12\n          content-type: text/plain; charset=utf-8\n          date: Mon, 14 Apr 2014 17:15:47 GMT\n          server: Cowboy\nHello world.[  0.018] recv DATA frame (stream_id=1, flags=1, length=12)\n[  0.018] send GOAWAY frame <version=3, flags=0, length=8>\n          (last_good_stream_id=0)\n\n\u305f\u3060\u3057\u3001-m \u3067\u8907\u6570\u306e SYN_STREAM \u3092\u6295\u3052\u308b\u3068 2014-04-19 \u6642\u70b9\u3067\u306e Cowboy \u306e SPDY \u5b9f\u88c5\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\ncowboy_spdy.erl \u306b\u4ee5\u4e0b\u306e\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u308b\u3068\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\ndiff --git a/src/cowboy_spdy.erl b/src/cowboy_spdy.erl\nindex e5aeb21..5db3718 100644\n--- a/src/cowboy_spdy.erl\n+++ b/src/cowboy_spdy.erl\n@@ -104,20 +104,30 @@ init(Parent, Ref, Socket, Transport, Opts) ->\n        middlewares=Middlewares, env=Env, onrequest=OnRequest,\n        onresponse=OnResponse, peer=Peer, zdef=Zdef, zinf=Zinf}).\n\n+\n+loop2(#state{zinf=Zinf} = State, Data) ->\n+    case cow_spdy:split(Data) of\n+        {true, Frame, Rest} ->\n+            P = cow_spdy:parse(Frame, Zinf),\n+            NewState = handle_frame(State#state{buffer = Rest}, P),\n+            loop2(NewState, Rest);\n+        false ->\n+            loop(State#state{buffer=Data})\n+    end.\n+\n+\n loop(State=#state{parent=Parent, socket=Socket, transport=Transport,\n-       buffer=Buffer, zinf=Zinf, children=Children}) ->\n+       buffer=Buffer, zinf=_Zinf, children=Children}) ->\n    {OK, Closed, Error} = Transport:messages(),\n    Transport:setopts(Socket, [{active, once}]),\n    receive\n        {OK, Socket, Data} ->\n            Data2 = << Buffer/binary, Data/binary >>,\n-           case cow_spdy:split(Data2) of\n-               {true, Frame, Rest} ->\n-                   P = cow_spdy:parse(Frame, Zinf),\n-                   handle_frame(State#state{buffer=Rest}, P);\n-               false ->\n-                   loop(State#state{buffer=Data2})\n-           end;\n+                        loop2(State, Data2);\n        {Closed, Socket} ->\n            terminate(State);\n        {Error, Socket, _Reason} ->\n@@ -221,12 +231,12 @@ system_code_change(Misc, _, _, _) ->\n handle_frame(State, {syn_stream, StreamID, _, _, true,\n        _, _, _, _, _, _, _}) ->\n    rst_stream(State, StreamID, protocol_error),\n-   loop(State);\n+   State;\n %% We do not support Associated-To-Stream-ID.\n handle_frame(State, {syn_stream, StreamID, AssocToStreamID,\n        _, _, _, _, _, _, _, _, _}) when AssocToStreamID =/= 0 ->\n    rst_stream(State, StreamID, internal_error),\n-   loop(State);\n+   State;\n %% SYN_STREAM.\n %%\n %% Erlang does not allow us to control the priority of processes\n@@ -239,22 +249,22 @@ handle_frame(State=#state{middlewares=Middlewares, env=Env,\n        {self(), StreamID}, Peer, OnRequest, OnResponse,\n        Env, Middlewares, Method, Host, Path, Version, Headers\n    ]),\n-   loop(new_child(State, StreamID, Pid, IsFin));\n+   new_child(State, StreamID, Pid, IsFin);\n %% RST_STREAM.\n handle_frame(State, {rst_stream, StreamID, Status}) ->\n    error_logger:error_msg(\"Received RST_STREAM frame ~p ~p\",\n        [StreamID, Status]),\n    %% @todo Stop StreamID.\n-   loop(State);\n+   State;\n %% PING initiated by the server; ignore, we don't send any.\n handle_frame(State, {ping, PingID}) when PingID rem 2 =:= 0 ->\n    error_logger:error_msg(\"Ignored PING control frame: ~p~n\", [PingID]),\n-   loop(State);\n+   State;\n %% PING initiated by the client; send it back.\n handle_frame(State=#state{socket=Socket, transport=Transport},\n        {ping, PingID}) ->\n    Transport:send(Socket, cow_spdy:ping(PingID)),\n-   loop(State);\n+   State;\n %% Data received for a stream.\n handle_frame(State, {data, StreamID, IsFin, Data}) ->\n    Child = #child{input=nofin, in_buffer=Buffer, is_recv=IsRecv}\n@@ -275,7 +285,7 @@ handle_frame(State, {data, StreamID, IsFin, Data}) ->\n        _ ->\n            Child#child{input=IsFin2, in_buffer=Data2}\n    end,\n-   loop(replace_child(Child2, State));\n+   replace_child(Child2, State);\n %% General error, can't recover.\n handle_frame(State, {error, badprotocol}) ->\n    goaway(State, protocol_error),\n@@ -283,7 +293,7 @@ handle_frame(State, {error, badprotocol}) ->\n %% Ignore all other frames for now.\n handle_frame(State, Frame) ->\n    error_logger:error_msg(\"Ignored frame ~p\", [Frame]),\n-   loop(State).\n+   State.\n\n cancel_recv_timeout(StreamID, TRef) ->\n    _ = erlang:cancel_timer(TRef),\n\n\nCowoby \u306e SPDY \u5b9f\u88c5\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ranch_ssl \u3092\u547c\u3076\u305f\u3081\u3001TLS (NPN) \u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u751f\u306e SPDY \u3092\u4f7f\u3046\u306b\u306f start_spdy \u3092\u518d\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3064\u3044\u3067\u306b supervisor \u306b\u3076\u3089\u4e0b\u3052\u308b child_spec/0 \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8272\u3005\u7701\u7565\u3057\u3066\u307e\u3059\u3001\u30dd\u30a4\u30f3\u30bf\u3060\u3051\u3002\n\n```erlang\n%% supervisor \u306b\u3076\u3089\u4e0b\u3052\u308b ChildSpec \u3092\u8fd4\u3059\nchild_spec() ->\n    Dispatch = cowboy_router:compile([\n                   {'_', [\n                           {\"/\", index_handler, []}\n                   ]}\n               ]),\n    {cowboy_spdy,\n     {?MODULE, start_spdy, [spdy, 100,\n                           [{port, 8080}],\n                           [{env, [{dispatch, Dispatch}]}]]},\n     permanent, 5000, worker, [cowboy_spdy]}.\n\n%% ranch_tcp \u306b\u3057\u3066\u3055\u3089\u306b NPN \u5468\u308a\u3092\u524a\u9664\nstart_spdy(Ref, NbAcceptors, TransOpts, ProtoOpts)\n\t\twhen is_integer(NbAcceptors), NbAcceptors > 0 ->\n\tTransOpts2 = [{connection_type, supervisor}|TransOpts],\n\tranch:start_listener(Ref, NbAcceptors, ranch_tcp, TransOpts2, cowboy_spdy, ProtoOpts).\n```\n\nrebar.config \u306b ranch \u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\n{ranch, \".*\", {git, \"git://github.com/extend/ranch.git\", \"0.9.0\"}\n```\n\nsupervisor \u306b\u3076\u3089\u4e0b\u3052\u3066\u307f\u307e\u3059\u3002\n\n```erlang\n1> supervisor:which_children(app_sup).\n[{cowboy_spdy,<0.67.0>,worker,[cowboy_spdy]}]\n```\n\nHello world \u3092\u8fd4\u3059\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\n```erlang\n-module(index_handler).\n\n-export([init/3]).\n-export([handle/2]).\n-export([terminate/3]).\n\n-include_lib(\"eunit/include/eunit.hrl\").\n\ninit(_Transport, Req, []) ->\n    {ok, Req, undefined}.\n\nhandle(Req, State) ->\n    {Method, Req2} = cowboy_req:method(Req),\n    ?debugVal(Method),\n    {ok, Req3} = cowboy_req:reply(200, [{<<\"content-type\">>, <<\"text/plain; charset=utf-8\">>}],\n                                  <<\"Hello world.\">>, Req2).\n    {ok, Req3, State}.\n\nterminate(_Reason, _Req, _State) ->\n    ok.\n```\n\n\u3082\u3061\u308d\u3093 spdylay \u306e spdycat \u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\n\n\n```\n$ ./spdycat --no-tls -3 -v --color http://127.0.0.1:8080/\n[  0.000] Handshake complete\n[  0.000] send SYN_STREAM frame <version=3, flags=1, length=220>\n          (stream_id=1, assoc_stream_id=0, pri=3)\n          :host: 127.0.0.1:8080\n          :method: GET\n          :path: /\n          :scheme: http\n          :version: HTTP/1.1\n          accept: */*\n          accept-encoding: gzip, deflate\n          user-agent: spdylay/1.2.4-DEV\n[  0.018] recv SYN_REPLY frame <version=3, flags=0, length=81>\n          (stream_id=1)\n          :status: 200 OK\n          :version: HTTP/1.1\n          content-length: 12\n          content-type: text/plain; charset=utf-8\n          date: Mon, 14 Apr 2014 17:15:47 GMT\n          server: Cowboy\nHello world.[  0.018] recv DATA frame (stream_id=1, flags=1, length=12)\n[  0.018] send GOAWAY frame <version=3, flags=0, length=8>\n          (last_good_stream_id=0)\n```\n\n\u305f\u3060\u3057\u3001-m \u3067\u8907\u6570\u306e SYN_STREAM \u3092\u6295\u3052\u308b\u3068 2014-04-19 \u6642\u70b9\u3067\u306e Cowboy \u306e SPDY \u5b9f\u88c5\u306f\u53d7\u3051\u53d6\u308c\u307e\u305b\u3093\u3002\n\ncowboy_spdy.erl \u306b\u4ee5\u4e0b\u306e\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u308b\u3068\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```diff\ndiff --git a/src/cowboy_spdy.erl b/src/cowboy_spdy.erl\nindex e5aeb21..5db3718 100644\n--- a/src/cowboy_spdy.erl\n+++ b/src/cowboy_spdy.erl\n@@ -104,20 +104,30 @@ init(Parent, Ref, Socket, Transport, Opts) ->\n \t\tmiddlewares=Middlewares, env=Env, onrequest=OnRequest,\n \t\tonresponse=OnResponse, peer=Peer, zdef=Zdef, zinf=Zinf}).\n \n+\n+loop2(#state{zinf=Zinf} = State, Data) ->\n+    case cow_spdy:split(Data) of\n+        {true, Frame, Rest} ->\n+            P = cow_spdy:parse(Frame, Zinf),\n+            NewState = handle_frame(State#state{buffer = Rest}, P),\n+            loop2(NewState, Rest);\n+        false ->\n+            loop(State#state{buffer=Data})\n+    end.\n+\n+\n loop(State=#state{parent=Parent, socket=Socket, transport=Transport,\n-\t\tbuffer=Buffer, zinf=Zinf, children=Children}) ->\n+\t\tbuffer=Buffer, zinf=_Zinf, children=Children}) ->\n \t{OK, Closed, Error} = Transport:messages(),\n \tTransport:setopts(Socket, [{active, once}]),\n \treceive\n \t\t{OK, Socket, Data} ->\n \t\t\tData2 = << Buffer/binary, Data/binary >>,\n-\t\t\tcase cow_spdy:split(Data2) of\n-\t\t\t\t{true, Frame, Rest} ->\n-\t\t\t\t\tP = cow_spdy:parse(Frame, Zinf),\n-\t\t\t\t\thandle_frame(State#state{buffer=Rest}, P);\n-\t\t\t\tfalse ->\n-\t\t\t\t\tloop(State#state{buffer=Data2})\n-\t\t\tend;\n+                        loop2(State, Data2);\n \t\t{Closed, Socket} ->\n \t\t\tterminate(State);\n \t\t{Error, Socket, _Reason} ->\n@@ -221,12 +231,12 @@ system_code_change(Misc, _, _, _) ->\n handle_frame(State, {syn_stream, StreamID, _, _, true,\n \t\t_, _, _, _, _, _, _}) ->\n \trst_stream(State, StreamID, protocol_error),\n-\tloop(State);\n+\tState;\n %% We do not support Associated-To-Stream-ID.\n handle_frame(State, {syn_stream, StreamID, AssocToStreamID,\n \t\t_, _, _, _, _, _, _, _, _}) when AssocToStreamID =/= 0 ->\n \trst_stream(State, StreamID, internal_error),\n-\tloop(State);\n+\tState;\n %% SYN_STREAM.\n %%\n %% Erlang does not allow us to control the priority of processes\n@@ -239,22 +249,22 @@ handle_frame(State=#state{middlewares=Middlewares, env=Env,\n \t\t{self(), StreamID}, Peer, OnRequest, OnResponse,\n \t\tEnv, Middlewares, Method, Host, Path, Version, Headers\n \t]),\n-\tloop(new_child(State, StreamID, Pid, IsFin));\n+\tnew_child(State, StreamID, Pid, IsFin);\n %% RST_STREAM.\n handle_frame(State, {rst_stream, StreamID, Status}) ->\n \terror_logger:error_msg(\"Received RST_STREAM frame ~p ~p\",\n \t\t[StreamID, Status]),\n \t%% @todo Stop StreamID.\n-\tloop(State);\n+\tState;\n %% PING initiated by the server; ignore, we don't send any.\n handle_frame(State, {ping, PingID}) when PingID rem 2 =:= 0 ->\n \terror_logger:error_msg(\"Ignored PING control frame: ~p~n\", [PingID]),\n-\tloop(State);\n+\tState;\n %% PING initiated by the client; send it back.\n handle_frame(State=#state{socket=Socket, transport=Transport},\n \t\t{ping, PingID}) ->\n \tTransport:send(Socket, cow_spdy:ping(PingID)),\n-\tloop(State);\n+\tState;\n %% Data received for a stream.\n handle_frame(State, {data, StreamID, IsFin, Data}) ->\n \tChild = #child{input=nofin, in_buffer=Buffer, is_recv=IsRecv}\n@@ -275,7 +285,7 @@ handle_frame(State, {data, StreamID, IsFin, Data}) ->\n \t\t_ ->\n \t\t\tChild#child{input=IsFin2, in_buffer=Data2}\n \tend,\n-\tloop(replace_child(Child2, State));\n+\treplace_child(Child2, State);\n %% General error, can't recover.\n handle_frame(State, {error, badprotocol}) ->\n \tgoaway(State, protocol_error),\n@@ -283,7 +293,7 @@ handle_frame(State, {error, badprotocol}) ->\n %% Ignore all other frames for now.\n handle_frame(State, Frame) ->\n \terror_logger:error_msg(\"Ignored frame ~p\", [Frame]),\n-\tloop(State).\n+\tState.\n \n cancel_recv_timeout(StreamID, TRef) ->\n \t_ = erlang:cancel_timer(TRef),\n```", "tags": ["SPDY", "Erlang", "cowboy"]}