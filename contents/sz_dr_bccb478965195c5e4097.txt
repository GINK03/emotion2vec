{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5(PSO, Particle Swarm Optimization)\u3068\u306f, \u52d5\u7269\u306e\u7fa4\u308c\u306e\u884c\u52d5\u3092\u30d2\u30f3\u30c8\u3068\u3057\u305f\u7fa4\u77e5\u80fd\u306e\u4e00\u7a2e\u3067\u3059.\n\u3053\u306e\u8a18\u4e8b\u3067\u306f, \u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u306e\u7c21\u5358\u306a\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059.\n\n\u653e\u7269\u9762\u306e\u5f0f\n\u653e\u7269\u9762\u306e\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059.\n\\begin{aligned}\nz = x^2+y^2\n\\end{aligned}\nz=x2+y2{\\begin{aligned}\nz = x^2+y^2\n\\end{aligned}\n}\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c, \u6700\u5c0f\u5024\u306f(x,y)=(0,0)(x, y)=(0, 0)\u306e\u3068\u304d\u306bz=0z=0\u3068\u306a\u308a\u307e\u3059.\n\u3053\u308c\u3092\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u3092\u7528\u3044\u3066\u6c42\u3081\u307e\u3059.\n\n\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u306e\u89e3\u8aac\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044.(\u00a72\u306e\u6dfb\u5b57\u304c\u4e00\u90e8\u9593\u9055\u3063\u3066\u3044\u308b?)\n\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u3068\u975e\u7dda\u5f62\u30b7\u30b9\u30c6\u30e0\n\u3053\u306e\u8a18\u4e8b\u306e\u00a72\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059.\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nmain.py\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport random\n\n#\u8a55\u4fa1\u95a2\u6570: z = x^2 + y^2\ndef criterion(x, y):\n    z = x * x + y * y\n    return z\n\n#\u7c92\u5b50\u306e\u4f4d\u7f6e\u306e\u66f4\u65b0\u3092\u884c\u3046\u95a2\u6570\ndef update_position(x, y, vx, vy):\n    new_x = x + vx\n    new_y = y + vy\n    return new_x, new_y\n\n#\u7c92\u5b50\u306e\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\u95a2\u6570\ndef update_velocity(x, y, vx, vy, p, g, w=0.5, ro_max=0.14):\n    #\u30d1\u30e9\u30e1\u30fc\u30bf\u30fcro\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e0e\u3048\u308b\n    ro1 = random.uniform(0, ro_max)\n    ro2 = random.uniform(0, ro_max)\n    #\u7c92\u5b50\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\n    new_vx = w * vx + ro1 * (p[\"x\"] - x) + ro2 * (g[\"x\"] - x)\n    new_vy = w * vy + ro1 * (p[\"y\"] - y) + ro2 * (g[\"y\"] - y)\n    return new_vx, new_vy\n\n\ndef main():\n    N = 100  #\u7c92\u5b50\u306e\u6570\n    x_min, x_max = -5, 5\n    y_min, y_max = -5, 5\n    #\u7c92\u5b50\u4f4d\u7f6e, \u901f\u5ea6, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8, \u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u521d\u671f\u5316\u3092\u884c\u3046\n    ps = [{\"x\": random.uniform(x_min, x_max), \n        \"y\": random.uniform(y_min, y_max)} for i in range(N)]\n    vs = [{\"x\": 0.0, \"y\": 0.0} for i in range(N)]\n    personal_best_positions = list(ps)\n    personal_best_scores = [criterion(p[\"x\"], p[\"y\"]) for p in ps]\n    best_particle = np.argmin(personal_best_scores)\n    global_best_position = personal_best_positions[best_particle]\n\n    T = 30  #\u5236\u9650\u6642\u9593(\u30eb\u30fc\u30d7\u306e\u56de\u6570)\n    for t in range(T):\n        for n in range(N):\n            x, y = ps[n][\"x\"], ps[n][\"y\"]\n            vx, vy = vs[n][\"x\"], vs[n][\"y\"]\n            p = personal_best_positions[n]\n            #\u7c92\u5b50\u306e\u4f4d\u7f6e\u306e\u66f4\u65b0\u3092\u884c\u3046\n            new_x, new_y = update_position(x, y, vx, vy)\n            ps[n] = {\"x\": new_x, \"y\": new_y}\n            #\u7c92\u5b50\u306e\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\n            new_vx, new_vy = update_velocity(\n                new_x, new_y, vx, vy, p, global_best_position)\n            vs[n] = {\"x\": new_vx, \"y\": new_vy}\n            #\u8a55\u4fa1\u5024\u3092\u6c42\u3081, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3092\u884c\u3046\n            score = criterion(new_x, new_y)\n            if score < personal_best_scores[n]:\n                personal_best_scores[n] = score\n                personal_best_positions[n] = {\"x\": new_x, \"y\": new_y}\n        #\u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3092\u884c\u3046\n        best_particle = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[best_particle]\n    #\u6700\u9069\u89e3\n    print(global_best_position)\n    print(min(personal_best_scores))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\u7d50\u679c\n\n\u7d50\u679c\n{'y': 0.00390598718159734, 'x': -0.0018420875049243782}\n1.86500222386e-05\n\n\n\n\u53ef\u8996\u5316\nN(=100)N(=100)\u500b\u306e\u7c92\u5b50\u304c(x,y)=(0,0)(x, y)=(0, 0)\u306b\u96c6\u4e2d\u3057\u3066\u3044\u304f\u69d8\u5b50\u3067\u3059.\n\n\n\u305d\u306e\u4ed6\n\u7c92\u5b50\u306e\u6570\u306a\u3069\u306e\u3044\u304f\u3064\u304b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u3081\u308b\u3093\u3067\u3059\u304b\u306d.(Trial and Error?)\n\n\u6587\u732e\u306b\u3088\u3063\u3066\u4f4d\u7f6e\u306e\u66f4\u65b0, \u901f\u5ea6\u306e\u66f4\u65b0, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8, \u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u9806\u5e8f\u304c\u30d0\u30e9\u30d0\u30e9\u2026\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u4f4d\u7f6e\u306e\u66f4\u65b0\u21d2\u901f\u5ea6\u306e\u66f4\u65b0\u21d2\u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u21d2\u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3067\u884c\u3063\u3066\u3044\u307e\u3059.\n\n\u7de8\u96c6\u5c65\u6b74\n\n(2014/11/18)\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\n\n#\u6982\u8981\n\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5(PSO, Particle Swarm Optimization)\u3068\u306f, \u52d5\u7269\u306e\u7fa4\u308c\u306e\u884c\u52d5\u3092\u30d2\u30f3\u30c8\u3068\u3057\u305f\u7fa4\u77e5\u80fd\u306e\u4e00\u7a2e\u3067\u3059.\n\u3053\u306e\u8a18\u4e8b\u3067\u306f, \u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u306e\u7c21\u5358\u306a\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059.\n\n#\u653e\u7269\u9762\u306e\u5f0f\n\u653e\u7269\u9762\u306e\u5f0f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059.\n\n```math\n\\begin{aligned}\nz = x^2+y^2\n\\end{aligned}\n```\n\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c, \u6700\u5c0f\u5024\u306f$(x, y)=(0, 0)$\u306e\u3068\u304d\u306b$z=0$\u3068\u306a\u308a\u307e\u3059.\n\u3053\u308c\u3092\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u3092\u7528\u3044\u3066\u6c42\u3081\u307e\u3059.\n\n#\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u6cd5\u306e\u89e3\u8aac\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044.(\u00a72\u306e\u6dfb\u5b57\u304c\u4e00\u90e8\u9593\u9055\u3063\u3066\u3044\u308b?)\n[\u7c92\u5b50\u7fa4\u6700\u9069\u5316\u3068\u975e\u7dda\u5f62\u30b7\u30b9\u30c6\u30e0](https://www.jstage.jst.go.jp/article/essfr/5/2/5_2_155/_pdf)\n\n\u3053\u306e\u8a18\u4e8b\u306e\u00a72\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059.\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n```py:main.py\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport random\n\n#\u8a55\u4fa1\u95a2\u6570: z = x^2 + y^2\ndef criterion(x, y):\n    z = x * x + y * y\n    return z\n\n#\u7c92\u5b50\u306e\u4f4d\u7f6e\u306e\u66f4\u65b0\u3092\u884c\u3046\u95a2\u6570\ndef update_position(x, y, vx, vy):\n    new_x = x + vx\n    new_y = y + vy\n    return new_x, new_y\n\n#\u7c92\u5b50\u306e\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\u95a2\u6570\ndef update_velocity(x, y, vx, vy, p, g, w=0.5, ro_max=0.14):\n    #\u30d1\u30e9\u30e1\u30fc\u30bf\u30fcro\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e0e\u3048\u308b\n    ro1 = random.uniform(0, ro_max)\n    ro2 = random.uniform(0, ro_max)\n    #\u7c92\u5b50\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\n    new_vx = w * vx + ro1 * (p[\"x\"] - x) + ro2 * (g[\"x\"] - x)\n    new_vy = w * vy + ro1 * (p[\"y\"] - y) + ro2 * (g[\"y\"] - y)\n    return new_vx, new_vy\n\n\ndef main():\n    N = 100  #\u7c92\u5b50\u306e\u6570\n    x_min, x_max = -5, 5\n    y_min, y_max = -5, 5\n    #\u7c92\u5b50\u4f4d\u7f6e, \u901f\u5ea6, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8, \u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u521d\u671f\u5316\u3092\u884c\u3046\n    ps = [{\"x\": random.uniform(x_min, x_max), \n        \"y\": random.uniform(y_min, y_max)} for i in range(N)]\n    vs = [{\"x\": 0.0, \"y\": 0.0} for i in range(N)]\n    personal_best_positions = list(ps)\n    personal_best_scores = [criterion(p[\"x\"], p[\"y\"]) for p in ps]\n    best_particle = np.argmin(personal_best_scores)\n    global_best_position = personal_best_positions[best_particle]\n    \n    T = 30  #\u5236\u9650\u6642\u9593(\u30eb\u30fc\u30d7\u306e\u56de\u6570)\n    for t in range(T):\n        for n in range(N):\n            x, y = ps[n][\"x\"], ps[n][\"y\"]\n            vx, vy = vs[n][\"x\"], vs[n][\"y\"]\n            p = personal_best_positions[n]\n            #\u7c92\u5b50\u306e\u4f4d\u7f6e\u306e\u66f4\u65b0\u3092\u884c\u3046\n            new_x, new_y = update_position(x, y, vx, vy)\n            ps[n] = {\"x\": new_x, \"y\": new_y}\n            #\u7c92\u5b50\u306e\u901f\u5ea6\u306e\u66f4\u65b0\u3092\u884c\u3046\n            new_vx, new_vy = update_velocity(\n                new_x, new_y, vx, vy, p, global_best_position)\n            vs[n] = {\"x\": new_vx, \"y\": new_vy}\n            #\u8a55\u4fa1\u5024\u3092\u6c42\u3081, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3092\u884c\u3046\n            score = criterion(new_x, new_y)\n            if score < personal_best_scores[n]:\n                personal_best_scores[n] = score\n                personal_best_positions[n] = {\"x\": new_x, \"y\": new_y}\n        #\u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3092\u884c\u3046\n        best_particle = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[best_particle]\n    #\u6700\u9069\u89e3\n    print(global_best_position)\n    print(min(personal_best_scores))\n\nif __name__ == '__main__':\n    main()\n```\n\n#\u7d50\u679c\n```bash:\u7d50\u679c\n{'y': 0.00390598718159734, 'x': -0.0018420875049243782}\n1.86500222386e-05\n```\n\n##\u53ef\u8996\u5316\n$N(=100)$\u500b\u306e\u7c92\u5b50\u304c$(x, y)=(0, 0)$\u306b\u96c6\u4e2d\u3057\u3066\u3044\u304f\u69d8\u5b50\u3067\u3059.\n![B2psHNqCMAAIXcf.png](https://qiita-image-store.s3.amazonaws.com/0/58543/a221b3b3-0461-68db-4bff-06353b56482b.png)\n\n#\u305d\u306e\u4ed6\n\u7c92\u5b50\u306e\u6570\u306a\u3069\u306e\u3044\u304f\u3064\u304b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u3081\u308b\u3093\u3067\u3059\u304b\u306d.(Trial and Error?)\n***\n\u6587\u732e\u306b\u3088\u3063\u3066\u4f4d\u7f6e\u306e\u66f4\u65b0, \u901f\u5ea6\u306e\u66f4\u65b0, \u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8, \u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u9806\u5e8f\u304c\u30d0\u30e9\u30d0\u30e9\u2026\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u4f4d\u7f6e\u306e\u66f4\u65b0\u21d2\u901f\u5ea6\u306e\u66f4\u65b0\u21d2\u30d1\u30fc\u30bd\u30ca\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u21d2\u30b0\u30ed\u30fc\u30d0\u30eb\u30d9\u30b9\u30c8\u306e\u66f4\u65b0\u3067\u884c\u3063\u3066\u3044\u307e\u3059.\n\n#\u7de8\u96c6\u5c65\u6b74\n* (2014/11/18)\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\n", "tags": ["Python2.7", "\u7fa4\u77e5\u80fd", "\u30e1\u30bf\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af", "\u6700\u9069\u5316"]}