{"context": "Metal\u306f\u3001iOS8\u3067\u5c0e\u5165\u3055\u308c\u305f\u753b\u50cf\u51e6\u7406\u3084\u4e26\u5217\u6f14\u7b97\u306a\u3069\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u3046\u3061\u753b\u50cf\u51e6\u7406\u306e\u65b9\u3067\u306f\u306a\u304fCPU/GPU\u306e\u9023\u643a\u306b\u3088\u308b\u4e26\u5217\u6f14\u7b97\u306e\u65b9\u3092\u6271\u3044\u307e\u3059\u3002\nGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0(GPGPU)\u306f\u3001\u4e00\u822c\u306b\u6a5f\u68b0\u5b66\u7fd2\u3084\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u753b\u50cf\u89e3\u6790\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u306a\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308a\u3001\u306a\u304a\u304b\u3064\u4e26\u5217\u6f14\u7b97\u304c\u6709\u52b9\u3067\u3042\u308b\u5834\u9762\u3067\u591a\u304f\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u304c\u3001Metal\u306e\u767b\u5834\u306b\u3088\u308aiOS\u3067\u3082\u624b\u8efd\u306bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u3069\u3093\u306a\u30a2\u30d7\u30ea\u306b\u5fdc\u7528\u3067\u304d\u308b\u306e\u304b\u3068\u3066\u3082\u30ef\u30af\u30ef\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001Metal\u3092\u7528\u3044\u305f\u958b\u767a\u306f\u5c11\u3005\u6577\u5c45\u304c\u9ad8\u304f\u3001\u307e\u305f\u901a\u5e38\u306eCPU\u306b\u3088\u308b\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306a\u6f14\u7b97\u3068\u306f\u7279\u6027\u304c\u7570\u306a\u308a\u307e\u3059\u3002\nMetal\u3092\u3082\u3063\u3068\u8eab\u8fd1\u306a\u3082\u306e\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4eca\u56de\u306f\u307e\u305a\u53ef\u80fd\u306a\u9650\u308a\u7c21\u5358\u306a\u5b9f\u88c5\u3092\u7528\u3044\u3066Metal\u306b\u3088\u308bGPU\u6f14\u7b97\u3092\u884c\u3044\u3001\u305d\u306e\u5f8cCPU\u306b\u3088\u308b\u6f14\u7b97\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u7279\u6027\u306e\u6bd4\u8f03\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001Metal\u6f14\u7b97\u306e\u767b\u5834\u4eba\u7269\u7d39\u4ecb\u3067\u3059\u3002\nMTLDevice:\n\u5358\u4e00\u306eGPU\u3092\u62bd\u8c61\u5316\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002GPU\u3078\u9001\u308b\u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u4f5c\u3063\u305f\u308a\u3001\u30b3\u30de\u30f3\u30c9\u306e\u30ad\u30e5\u30fc\u3092\u4f5c\u3063\u305f\u308a\u3057\u307e\u3059\u3002\nMTLCommandBuffer:\n\u7279\u5b9a\u306eGPU\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\nMTLCommandQueue:\nMTLCommandBuffer\u306e\u30ad\u30e5\u30fc\u3067\u3059\u3002\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u9806\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nMTLFunction:\nMetal\u30b7\u30a7\u30fc\u30c7\u30a3\u30f3\u30b0\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305f\u6f14\u7b97\u51e6\u7406\u3067\u3059\u3002\nMTLLibrary:\nMTLFunction\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\u3002\nMTLComputePipelineState:\nMTLFunction\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u307e\u3059\u3002\nMTLComputeCommandEncoder:\n\u30c7\u30fc\u30bf\u4e26\u5217\u6f14\u7b97\u51e6\u7406\u7528\u306e\u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3067\u3059\u3002\n\u6b21\u306b\u30b3\u30fc\u30c9\u3067\u3059\u3002\u307e\u305aViewController\u306e\u65b9\u304b\u3089\u3002\n\nViewController.swift\nimport UIKit\nimport Metal\n\nclass ViewController: UIViewController {\n\n    let inputDataCount = 100\n\n    var device: MTLDevice!\n    var defaultLibrary: MTLLibrary!\n    var commandQueue: MTLCommandQueue!\n    var computePipelineState: MTLComputePipelineState!\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        //\u521d\u671f\u5316\n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"addOne\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n    }\n\n    @IBAction func calculate(sender: AnyObject)\n    {\n        //\u5165\u529b\u30c7\u30fc\u30bf\n        var inputData:[Float] = []\n        for _ in 0...inputDataCount-1 {\n            inputData.append(Float(arc4random_uniform(UInt32(inputDataCount))))\n        }\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3068\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n\n        //\u5165\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let inputDataBuffer = device.makeBuffer(bytes: inputData, length: inputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(inputDataBuffer, offset: 0, at: 0)\n\n        //\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let outputData = [Float](repeating: 0, count: inputData.count)\n        let outputDataBuffer = device.makeBuffer(bytes: outputData, length: outputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(outputDataBuffer, offset: 0, at: 1)\n\n        //\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u3001\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u8a2d\u5b9a\u3002\u3053\u308c\u306b\u3088\u308a\u4e26\u5217\u3067\u5b9f\u884c\u3055\u308c\u308b\u6f14\u7b97\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\n        let width = 64\n        let threadsPerGroup = MTLSize(width: width, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inputData.count + width - 1) / width, height: 1, depth: 1)\n        computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n\n        //\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7d42\u4e86\n        computeCommandEncoder.endEncoding()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u884c\u3057\u3001\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u6a5f\n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n\n        //\u7d50\u679c\u3092resultData\u306b\u683c\u7d0d\n        let data = Data(bytesNoCopy: outputDataBuffer.contents(), count: outputData.byteLength, deallocator: .none)\n        var resultData = [Float](repeating: 1, count: outputData.count)\n        resultData = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Float>(start: $0, count: data.count/MemoryLayout<Float>.size))\n        }\n\n        //\u7d50\u679c\u306e\u8868\u793a\n        print(\"[Input data]: \\(inputData)\")\n        print(\"[Result data]: \\(resultData)\")\n    }\n\n}\n\n//\u914d\u5217\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3092\u53d6\u5f97\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n\n\n\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u304c100\u500b\u683c\u7d0d\u3055\u308c\u305f\u306e\u914d\u5217\u306e\u30c7\u30fc\u30bf\u3092GPU\u5074\u306b\u6e21\u3057\u3001addOne\u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3067\u6f14\u7b97\u3092\u884c\u306a\u3063\u305f\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001Metal\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u30ac\u30a4\u30c9\u306b\u5f93\u3044\u3001\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u5ba3\u8a00\u3057\u3066\u4fdd\u6301\u3059\u3079\u304d\u5024\u3068\u3001\u5b9f\u884c\u3054\u3068\u306b\u5ba3\u8a00\u3059\u308b\u5024\u3092\u533a\u5225\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306f\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\u3002\u30b7\u30a7\u30fc\u30c0\u30fc\u306fGPU\u5074\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3059\u304c\u3001C++\u30d9\u30fc\u30b9\u306eMetal Shading Language\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nShaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nkernel void addOne(const device float *inputData [[ buffer(0) ]],\n                         device float *outputData [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float result = inputData[id];\n    result += 1.0f;\n    outputData[id] = result;\n}\n\n\n\u3053\u3053\u3067\u306f\u5358\u306b\u3001\u5165\u529b\u306b1\u3092\u8db3\u3057\u3066\u51fa\u529b\u3068\u3057\u3066\u3044\u307e\u3059\u3002id\u306f\u30b9\u30ec\u30c3\u30c9\u306e\u4f4d\u7f6e\u3067\u3059\u3002\n\u306a\u304a\u3001Metal\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306f\u3001\nNew -> File -> iOS -> Meta File\n\u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u51fa\u529b\u7d50\u679c\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n[Input data]: [26.0, 18.0, 19.0, 38.0, 44.0, 72.0, 51.0, 72.0, 56.0, 15.0, 16.0, 61.0, 46.0, 18.0, 54.0, 68.0, 18.0, 73.0, 44.0, 25.0, 29.0, 81.0, 63.0, 21.0, 77.0, 19.0, 59.0, 28.0, 73.0, 79.0, 94.0, 43.0, 82.0, 88.0, 10.0, 0.0, 88.0, 60.0, 17.0, 1.0, 77.0, 8.0, 44.0, 97.0, 51.0, 91.0, 5.0, 33.0, 24.0, 89.0, 63.0, 90.0, 60.0, 93.0, 77.0, 97.0, 36.0, 27.0, 84.0, 12.0, 35.0, 33.0, 38.0, 13.0, 34.0, 99.0, 58.0, 90.0, 3.0, 35.0, 40.0, 6.0, 66.0, 27.0, 29.0, 44.0, 26.0, 72.0, 7.0, 51.0, 30.0, 25.0, 75.0, 37.0, 27.0, 33.0, 52.0, 18.0, 3.0, 90.0, 55.0, 13.0, 64.0, 69.0, 95.0, 18.0, 16.0, 76.0, 56.0, 38.0]\n[Result data]: [27.0, 19.0, 20.0, 39.0, 45.0, 73.0, 52.0, 73.0, 57.0, 16.0, 17.0, 62.0, 47.0, 19.0, 55.0, 69.0, 19.0, 74.0, 45.0, 26.0, 30.0, 82.0, 64.0, 22.0, 78.0, 20.0, 60.0, 29.0, 74.0, 80.0, 95.0, 44.0, 83.0, 89.0, 11.0, 1.0, 89.0, 61.0, 18.0, 2.0, 78.0, 9.0, 45.0, 98.0, 52.0, 92.0, 6.0, 34.0, 25.0, 90.0, 64.0, 91.0, 61.0, 94.0, 78.0, 98.0, 37.0, 28.0, 85.0, 13.0, 36.0, 34.0, 39.0, 14.0, 35.0, 100.0, 59.0, 91.0, 4.0, 36.0, 41.0, 7.0, 67.0, 28.0, 30.0, 45.0, 27.0, 73.0, 8.0, 52.0, 31.0, 26.0, 76.0, 38.0, 28.0, 34.0, 53.0, 19.0, 4.0, 91.0, 56.0, 14.0, 65.0, 70.0, 96.0, 19.0, 17.0, 77.0, 57.0, 39.0]\n\n\u7d50\u679c\u306f\u5165\u529b\u306b1\u3092\u52a0\u3048\u305f\u3082\u306e\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u6b63\u3057\u304f\u6f14\u7b97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001CPU\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6bd4\u8f03\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\nMetal\u5074\u3001CPU\u5074\u3067\u305d\u308c\u305e\u308c\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u306a\u3044\u3001\u6240\u8981\u6642\u9593\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001Metal\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nViewController.swift\nimport UIKit\nimport Metal\n\nclass ViewController: UIViewController {\n\n    let inputDataCount = 10000\n\n    var device: MTLDevice!\n    var defaultLibrary: MTLLibrary!\n    var commandQueue: MTLCommandQueue!\n    var computePipelineState: MTLComputePipelineState!\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        //\u521d\u671f\u5316\n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"addAndSubtract\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n    }\n\n    @IBAction func calculate(sender: AnyObject)\n    {\n        //\u5165\u529b\u30c7\u30fc\u30bf\n        var inputData:[Float] = []\n        for _ in 0...inputDataCount-1 {\n            inputData.append(Float(arc4random_uniform(UInt32(inputDataCount))))\n        }\n\n        //\u6240\u8981\u6642\u9593\u306e\u6e2c\u5b9a\u958b\u59cb\n        let startingDate = Date()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3068\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n\n        //\u5165\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let inputDataBuffer = device.makeBuffer(bytes: inputData, length: inputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(inputDataBuffer, offset: 0, at: 0)\n\n        //\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let outputData = [Float](repeating: 0, count: inputData.count)\n        let outputDataBuffer = device.makeBuffer(bytes: outputData, length: outputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(outputDataBuffer, offset: 0, at: 1)\n\n        //\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u3001\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u8a2d\u5b9a\u3002\u3053\u308c\u306b\u3088\u308a\u4e26\u5217\u3067\u5b9f\u884c\u3055\u308c\u308b\u6f14\u7b97\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\n        let width = 64\n        let threadsPerGroup = MTLSize(width: width, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inputData.count + width - 1) / width, height: 1, depth: 1)\n        computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n\n        //\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7d42\u4e86\n        computeCommandEncoder.endEncoding()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u884c\u3057\u3001\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u6a5f\n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n\n        //\u7d50\u679c\u3092resultData\u306b\u683c\u7d0d\n        let data = Data(bytesNoCopy: outputDataBuffer.contents(), count: outputData.byteLength, deallocator: .none)\n        var resultData = [Float](repeating: 1, count: outputData.count)\n        resultData = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Float>(start: $0, count: data.count/MemoryLayout<Float>.size))\n        }\n\n        //\u7d50\u679c\u306e\u8868\u793a\n        print(\"[Time] \\(Date().timeIntervalSince(startingDate))\")\n        print(\"[Input data] Count: \\(inputData.count), First value: \\(inputData.first!), Last value: \\(inputData.last!)\")\n        print(\"[Result data] Count: \\(resultData.count), First value: \\(resultData.first!), Last value: \\(resultData.last!)\")\n    }\n\n}\n\n//\u914d\u5217\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3092\u53d6\u5f97\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n\n\n\u5148\u7a0b\u306e\u30b3\u30fc\u30c9\u3068\u306e\u9055\u3044\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c10000\u306b\u5897\u3048\u305f\u70b9\u3068\u3001\u6240\u8981\u6642\u9593\u6e2c\u5b9a\u306e\u30b3\u30fc\u30c9\u304c\u66f8\u304b\u308c\u305f\u70b9\u3067\u3059\u3002\n\u6240\u8981\u6642\u9593\u306e\u6e2c\u5b9a\u306b\u306fXcode\u6a19\u6e96\u306e\u30c6\u30b9\u30c8\u6a5f\u80fd\u3092\u7528\u3044\u3066\u3082\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6975\u529b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067Date()\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u65b9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\nShaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nconstant int repeatCount = 100000;\n\nkernel void addAndSubtract(const device float *inputData [[ buffer(0) ]],\n                         device float *outputData [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float result = inputData[id];\n    for (uint i=0; i<repeatCount; i++){\n        result += 1.0f;\n        result -= 1.0f;\n    }\n    outputData[id] = result;\n}\n\n\n1\u3092\u8db3\u3057\u3066\u5f15\u304f\u3068\u3044\u3046\u610f\u5473\u306e\u306a\u3044\u51e6\u7406\u3092repeatCount\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306erepeatCount\u3092\u5909\u3048\u3066\u3001\u6240\u8981\u6642\u9593\u306e\u5909\u9077\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\u6b21\u306b\u3001CPU\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    let dataCount = 10000\n    let repeatCount = 1000000\n\n    @IBAction func calculateWithFor()\n    {\n        var inputData:[Float] = []\n        for _ in 0..<dataCount {\n            inputData.append(Float(arc4random_uniform(UInt32(dataCount))))\n        }\n\n        let startingDate = Date()\n\n        var resultData = [Float](repeating: 0, count: inputData.count)\n        for i in 0..<dataCount\n        {\n            var result = inputData[i]\n            for _ in 0..<repeatCount\n            {\n                result += 1\n                result -= 1\n            }\n            resultData[i] =  result\n        }\n\n        print(\"[Time] \\(Date().timeIntervalSince(startingDate))\")\n        print(\"[Input data] Count: \\(inputData.count), First value: \\(inputData.first!), Last value: \\(inputData.last!)\")\n        print(\"[Result data] Count: \\(resultData.count), First value: \\(resultData.first!), Last value: \\(resultData.last!)\")\n    }    \n}\n\n\n\u30eb\u30fc\u30d7\u3092\u7528\u3044\u3066Metal\u5074\u306e\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3082\u540c\u69d8\u306b\u3001repeatCount\u3092\u5909\u3048\u3066\u6240\u8981\u6642\u9593\u306e\u5909\u9077\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\u306a\u304a\u6e2c\u5b9a\u3059\u308b\u969b\u306b\u306fEdit Scheme\u3067\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u3001Metal\u5074\u3001CPU\u5074\u3068\u3082\u306b\u672c\u6765\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u767a\u63ee\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nBuild configuration\u3092Release\u306b\u3002\n\nGPU Frame Capture\u3068Metal API Validation\u3092Disabled\u306b\u3002\n\n\u691c\u8a3c\u6a5f\u306b\u306f\u306fiPhone 6 Plus\u3001iOS10\u3092\u7528\u3044\u307e\u3057\u305f\u3002\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u30c1\u30c3\u30d7\u306fApple A8\u3067\u3059\u3002\n\u6e2c\u5b9a\u7d50\u679c\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30ea\u30d4\u30fc\u30c8\u6570\u304c\u5927\u304d\u3044\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b50-60\u500d\u3082\u306e\u6975\u7aef\u306b\u5927\u304d\u306a\u5dee\u304c\u51fa\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u540c\u3058\u30c7\u30fc\u30bf\u3092\u5bfe\u6570\u8868\u793a\u306b\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30ea\u30d4\u30fc\u30c8\u6570\u304c\u5c0f\u3055\u3044\u5834\u5408\u306fCPU\u306e\u65b9\u304cMetal\u3088\u308a\u3082\u6240\u8981\u6642\u9593\u304c\u77ed\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u51e6\u7406\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u5834\u5408\u306f\u3001\u51e6\u7406\u305d\u306e\u3082\u306e\u3088\u308a\u3082GPU\u5074\u3078\u306e\u30c7\u30fc\u30bf\u306e\u8ee2\u9001\u3084\u8a2d\u5b9a\u304c\u6240\u8981\u6642\u9593\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u3060\u3068\u8003\u3048\u308c\u308c\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001GPU\u6f14\u7b97\u3067\u306fGPU\u3078\u306e\u30c9\u30ed\u30fc\u30b3\u30fc\u30eb\u3092\u6700\u4f4e\u9650\u306b\u3059\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u3068\u5168\u51e6\u7406\u4e2d\u306b\u5360\u3081\u308b\u30c9\u30ed\u30fc\u30b3\u30fc\u30eb\u306e\u5272\u5408\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nMeatl\u306e\u6027\u80fd\u3092\u5341\u5206\u306b\u767a\u63ee\u3059\u308b\u306b\u306f\u3001CPU/GPU\u9593\u306e\u3084\u308a\u3068\u308a\u3092\u6700\u5c0f\u9650\u306b\u3057\u3001kernel\u95a2\u6570\u3067\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u306a\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u5927\u4e8b\u306a\u3088\u3046\u3067\u3059\u3002\nGPU\u30e1\u30fc\u30ab\u30fc\u3001NVIDIA\u306e\u30b8\u30a7\u30f3\u30b9\u30f3\u30fb\u30d5\u30a1\u30f3CEO\u304cGTC Japan\u3067\u300c\u8133\u306fGPU\u300d\u3068\u8ff0\u3079\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3072\u3087\u3063\u3068\u3057\u305f\u3089Metal\u306e\u767b\u5834\u306b\u3088\u308a\u500b\u3005\u306e\u30a2\u30d7\u30ea\u306b\u77e5\u6027\u304c\u5bbf\u308b\u6642\u4ee3\u304c\u8fd1\u3065\u3044\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nMetal\u306e\u80fd\u529b\u3092\u30d5\u30eb\u306b\u5f15\u304d\u51fa\u3059\u305f\u3081\u306b\u306f\u3001\u305d\u306e\u52d5\u4f5c\u539f\u7406\u3092\u7406\u89e3\u3057\u3001\u7279\u6027\u3092\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u5927\u4e8b\u306a\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u6975\u529b\u30b7\u30f3\u30d7\u30eb\u306aMetal\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u5b9f\u969b\u306b\u6f14\u7b97\u3092\u884c\u3044\u3001\u305d\u306e\u7279\u6027\u3092\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306f\u3001Metal\u306e\u5fdc\u7528\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u53c2\u8003:\nMetal for Developers\nMetal\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u30ac\u30a4\u30c9\nMetal Shading Language Guide\n\u30bc\u30ed\u304b\u3089\u306f\u3058\u3081\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\n\u6b74\u4ee3iOS\u30c7\u30d0\u30a4\u30b9\u306eGPU\u307e\u3068\u3081\niOS Metal\u3067\u6d41\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff01\nWikipedia PowerVR\nData-Parallel Programming with Metal and Swift for iPhone/iPad GPU\nMetalKit\u3067GPU\u3092\u4f7f\u3044\u3053\u306a\u3059\nwaifu2x\u3092Metal\u3067\u66f8\u3044\u3066\u307f\u305f\n\u304b\u3064\u3066SF\u3067\u63cf\u304b\u308c\u305f\u4e16\u754c\u306f\u3082\u306f\u3084\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u3044\nMetal\u306f\u3001iOS8\u3067\u5c0e\u5165\u3055\u308c\u305f\u753b\u50cf\u51e6\u7406\u3084\u4e26\u5217\u6f14\u7b97\u306a\u3069\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001\u305d\u306e\u3046\u3061\u753b\u50cf\u51e6\u7406\u306e\u65b9\u3067\u306f\u306a\u304fCPU/GPU\u306e\u9023\u643a\u306b\u3088\u308b\u4e26\u5217\u6f14\u7b97\u306e\u65b9\u3092\u6271\u3044\u307e\u3059\u3002\nGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0(GPGPU)\u306f\u3001\u4e00\u822c\u306b\u6a5f\u68b0\u5b66\u7fd2\u3084\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u753b\u50cf\u89e3\u6790\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u306a\u3069\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308a\u3001\u306a\u304a\u304b\u3064\u4e26\u5217\u6f14\u7b97\u304c\u6709\u52b9\u3067\u3042\u308b\u5834\u9762\u3067\u591a\u304f\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u304c\u3001Metal\u306e\u767b\u5834\u306b\u3088\u308aiOS\u3067\u3082\u624b\u8efd\u306bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u3069\u3093\u306a\u30a2\u30d7\u30ea\u306b\u5fdc\u7528\u3067\u304d\u308b\u306e\u304b\u3068\u3066\u3082\u30ef\u30af\u30ef\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001Metal\u3092\u7528\u3044\u305f\u958b\u767a\u306f\u5c11\u3005\u6577\u5c45\u304c\u9ad8\u304f\u3001\u307e\u305f\u901a\u5e38\u306eCPU\u306b\u3088\u308b\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306a\u6f14\u7b97\u3068\u306f\u7279\u6027\u304c\u7570\u306a\u308a\u307e\u3059\u3002\nMetal\u3092\u3082\u3063\u3068\u8eab\u8fd1\u306a\u3082\u306e\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4eca\u56de\u306f\u307e\u305a\u53ef\u80fd\u306a\u9650\u308a\u7c21\u5358\u306a\u5b9f\u88c5\u3092\u7528\u3044\u3066Metal\u306b\u3088\u308bGPU\u6f14\u7b97\u3092\u884c\u3044\u3001\u305d\u306e\u5f8cCPU\u306b\u3088\u308b\u6f14\u7b97\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u7279\u6027\u306e\u6bd4\u8f03\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u3001Metal\u6f14\u7b97\u306e\u767b\u5834\u4eba\u7269\u7d39\u4ecb\u3067\u3059\u3002\n\n**MTLDevice**:\n\u5358\u4e00\u306eGPU\u3092\u62bd\u8c61\u5316\u3057\u305f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002GPU\u3078\u9001\u308b\u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30d5\u30a1\u3092\u4f5c\u3063\u305f\u308a\u3001\u30b3\u30de\u30f3\u30c9\u306e\u30ad\u30e5\u30fc\u3092\u4f5c\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n**MTLCommandBuffer**:\n\u7279\u5b9a\u306eGPU\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n**MTLCommandQueue**:\nMTLCommandBuffer\u306e\u30ad\u30e5\u30fc\u3067\u3059\u3002\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u9806\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n**MTLFunction**:\nMetal\u30b7\u30a7\u30fc\u30c7\u30a3\u30f3\u30b0\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305f\u6f14\u7b97\u51e6\u7406\u3067\u3059\u3002\n**MTLLibrary**:\nMTLFunction\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\u3002\n**MTLComputePipelineState**:\nMTLFunction\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n**MTLComputeCommandEncoder**:\n\u30c7\u30fc\u30bf\u4e26\u5217\u6f14\u7b97\u51e6\u7406\u7528\u306e\u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3067\u3059\u3002\n\n\u6b21\u306b\u30b3\u30fc\u30c9\u3067\u3059\u3002\u307e\u305aViewController\u306e\u65b9\u304b\u3089\u3002\n\n```Swift:ViewController.swift\nimport UIKit\nimport Metal\n\nclass ViewController: UIViewController {\n\n    let inputDataCount = 100\n    \n    var device: MTLDevice!\n    var defaultLibrary: MTLLibrary!\n    var commandQueue: MTLCommandQueue!\n    var computePipelineState: MTLComputePipelineState!\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        //\u521d\u671f\u5316\n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"addOne\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n    }\n    \n    @IBAction func calculate(sender: AnyObject)\n    {\n        //\u5165\u529b\u30c7\u30fc\u30bf\n        var inputData:[Float] = []\n        for _ in 0...inputDataCount-1 {\n            inputData.append(Float(arc4random_uniform(UInt32(inputDataCount))))\n        }\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3068\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n        \n        //\u5165\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let inputDataBuffer = device.makeBuffer(bytes: inputData, length: inputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(inputDataBuffer, offset: 0, at: 0)\n\n        //\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let outputData = [Float](repeating: 0, count: inputData.count)\n        let outputDataBuffer = device.makeBuffer(bytes: outputData, length: outputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(outputDataBuffer, offset: 0, at: 1)\n        \n        //\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u3001\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u8a2d\u5b9a\u3002\u3053\u308c\u306b\u3088\u308a\u4e26\u5217\u3067\u5b9f\u884c\u3055\u308c\u308b\u6f14\u7b97\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\n        let width = 64\n        let threadsPerGroup = MTLSize(width: width, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inputData.count + width - 1) / width, height: 1, depth: 1)\n        computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n        \n        //\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7d42\u4e86\n        computeCommandEncoder.endEncoding()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u884c\u3057\u3001\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u6a5f\n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n        \n        //\u7d50\u679c\u3092resultData\u306b\u683c\u7d0d\n        let data = Data(bytesNoCopy: outputDataBuffer.contents(), count: outputData.byteLength, deallocator: .none)\n        var resultData = [Float](repeating: 1, count: outputData.count)\n        resultData = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Float>(start: $0, count: data.count/MemoryLayout<Float>.size))\n        }\n \n        //\u7d50\u679c\u306e\u8868\u793a\n        print(\"[Input data]: \\(inputData)\")\n        print(\"[Result data]: \\(resultData)\")\n    }\n\n}\n\n//\u914d\u5217\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3092\u53d6\u5f97\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n```\n\n\u30e9\u30f3\u30c0\u30e0\u306a\u6570\u304c100\u500b\u683c\u7d0d\u3055\u308c\u305f\u306e\u914d\u5217\u306e\u30c7\u30fc\u30bf\u3092GPU\u5074\u306b\u6e21\u3057\u3001addOne\u3068\u3044\u3046\u540d\u524d\u306e\u95a2\u6570\u3067\u6f14\u7b97\u3092\u884c\u306a\u3063\u305f\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001[Metal\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u30ac\u30a4\u30c9](https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html)\u306b\u5f93\u3044\u3001\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u5ba3\u8a00\u3057\u3066\u4fdd\u6301\u3059\u3079\u304d\u5024\u3068\u3001\u5b9f\u884c\u3054\u3068\u306b\u5ba3\u8a00\u3059\u308b\u5024\u3092\u533a\u5225\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306f\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\u3002\u30b7\u30a7\u30fc\u30c0\u30fc\u306fGPU\u5074\u3067\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3059\u304c\u3001C++\u30d9\u30fc\u30b9\u306eMetal Shading Language\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```cpp:Shaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nkernel void addOne(const device float *inputData [[ buffer(0) ]],\n                         device float *outputData [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float result = inputData[id];\n    result += 1.0f;\n    outputData[id] = result;\n}\n```\n\n\u3053\u3053\u3067\u306f\u5358\u306b\u3001\u5165\u529b\u306b1\u3092\u8db3\u3057\u3066\u51fa\u529b\u3068\u3057\u3066\u3044\u307e\u3059\u3002id\u306f\u30b9\u30ec\u30c3\u30c9\u306e\u4f4d\u7f6e\u3067\u3059\u3002\n\u306a\u304a\u3001Metal\u7528\u306e\u30b7\u30a7\u30fc\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u306f\u3001\nNew -> File -> iOS -> Meta File\n\u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u51fa\u529b\u7d50\u679c\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n[Input data]: [26.0, 18.0, 19.0, 38.0, 44.0, 72.0, 51.0, 72.0, 56.0, 15.0, 16.0, 61.0, 46.0, 18.0, 54.0, 68.0, 18.0, 73.0, 44.0, 25.0, 29.0, 81.0, 63.0, 21.0, 77.0, 19.0, 59.0, 28.0, 73.0, 79.0, 94.0, 43.0, 82.0, 88.0, 10.0, 0.0, 88.0, 60.0, 17.0, 1.0, 77.0, 8.0, 44.0, 97.0, 51.0, 91.0, 5.0, 33.0, 24.0, 89.0, 63.0, 90.0, 60.0, 93.0, 77.0, 97.0, 36.0, 27.0, 84.0, 12.0, 35.0, 33.0, 38.0, 13.0, 34.0, 99.0, 58.0, 90.0, 3.0, 35.0, 40.0, 6.0, 66.0, 27.0, 29.0, 44.0, 26.0, 72.0, 7.0, 51.0, 30.0, 25.0, 75.0, 37.0, 27.0, 33.0, 52.0, 18.0, 3.0, 90.0, 55.0, 13.0, 64.0, 69.0, 95.0, 18.0, 16.0, 76.0, 56.0, 38.0]\n[Result data]: [27.0, 19.0, 20.0, 39.0, 45.0, 73.0, 52.0, 73.0, 57.0, 16.0, 17.0, 62.0, 47.0, 19.0, 55.0, 69.0, 19.0, 74.0, 45.0, 26.0, 30.0, 82.0, 64.0, 22.0, 78.0, 20.0, 60.0, 29.0, 74.0, 80.0, 95.0, 44.0, 83.0, 89.0, 11.0, 1.0, 89.0, 61.0, 18.0, 2.0, 78.0, 9.0, 45.0, 98.0, 52.0, 92.0, 6.0, 34.0, 25.0, 90.0, 64.0, 91.0, 61.0, 94.0, 78.0, 98.0, 37.0, 28.0, 85.0, 13.0, 36.0, 34.0, 39.0, 14.0, 35.0, 100.0, 59.0, 91.0, 4.0, 36.0, 41.0, 7.0, 67.0, 28.0, 30.0, 45.0, 27.0, 73.0, 8.0, 52.0, 31.0, 26.0, 76.0, 38.0, 28.0, 34.0, 53.0, 19.0, 4.0, 91.0, 56.0, 14.0, 65.0, 70.0, 96.0, 19.0, 17.0, 77.0, 57.0, 39.0]\n```\n\n\u7d50\u679c\u306f\u5165\u529b\u306b1\u3092\u52a0\u3048\u305f\u3082\u306e\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u6b63\u3057\u304f\u6f14\u7b97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u6b21\u306b\u3001CPU\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6bd4\u8f03\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\nMetal\u5074\u3001CPU\u5074\u3067\u305d\u308c\u305e\u308c\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u306a\u3044\u3001\u6240\u8981\u6642\u9593\u3092\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001Metal\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```Swift:ViewController.swift\nimport UIKit\nimport Metal\n\nclass ViewController: UIViewController {\n\n    let inputDataCount = 10000\n    \n    var device: MTLDevice!\n    var defaultLibrary: MTLLibrary!\n    var commandQueue: MTLCommandQueue!\n    var computePipelineState: MTLComputePipelineState!\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        //\u521d\u671f\u5316\n        device = MTLCreateSystemDefaultDevice()\n        defaultLibrary = device.newDefaultLibrary()\n        commandQueue = device.makeCommandQueue()\n        let ml2Func = defaultLibrary.makeFunction(name: \"addAndSubtract\")!\n        computePipelineState = try! device.makeComputePipelineState(function: ml2Func)\n    }\n    \n    @IBAction func calculate(sender: AnyObject)\n    {\n        //\u5165\u529b\u30c7\u30fc\u30bf\n        var inputData:[Float] = []\n        for _ in 0...inputDataCount-1 {\n            inputData.append(Float(arc4random_uniform(UInt32(inputDataCount))))\n        }\n        \n        //\u6240\u8981\u6642\u9593\u306e\u6e2c\u5b9a\u958b\u59cb\n        let startingDate = Date()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3068\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let commandBuffer = commandQueue.makeCommandBuffer()\n        let computeCommandEncoder = commandBuffer.makeComputeCommandEncoder()\n        computeCommandEncoder.setComputePipelineState(computePipelineState)\n        \n        //\u5165\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let inputDataBuffer = device.makeBuffer(bytes: inputData, length: inputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(inputDataBuffer, offset: 0, at: 0)\n\n        //\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\n        let outputData = [Float](repeating: 0, count: inputData.count)\n        let outputDataBuffer = device.makeBuffer(bytes: outputData, length: outputData.byteLength, options: [])\n        computeCommandEncoder.setBuffer(outputDataBuffer, offset: 0, at: 1)\n        \n        //\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u3001\u30b9\u30ec\u30c3\u30c9\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u3092\u8a2d\u5b9a\u3002\u3053\u308c\u306b\u3088\u308a\u4e26\u5217\u3067\u5b9f\u884c\u3055\u308c\u308b\u6f14\u7b97\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\n        let width = 64\n        let threadsPerGroup = MTLSize(width: width, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inputData.count + width - 1) / width, height: 1, depth: 1)\n        computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n        \n        //\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u304b\u3089\u306e\u30b3\u30de\u30f3\u30c9\u306f\u7d42\u4e86\n        computeCommandEncoder.endEncoding()\n\n        //\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u884c\u3057\u3001\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5f85\u6a5f\n        commandBuffer.commit()\n        commandBuffer.waitUntilCompleted()\n        \n        //\u7d50\u679c\u3092resultData\u306b\u683c\u7d0d\n        let data = Data(bytesNoCopy: outputDataBuffer.contents(), count: outputData.byteLength, deallocator: .none)\n        var resultData = [Float](repeating: 1, count: outputData.count)\n        resultData = data.withUnsafeBytes {\n            Array(UnsafeBufferPointer<Float>(start: $0, count: data.count/MemoryLayout<Float>.size))\n        }\n \n        //\u7d50\u679c\u306e\u8868\u793a\n        print(\"[Time] \\(Date().timeIntervalSince(startingDate))\")\n        print(\"[Input data] Count: \\(inputData.count), First value: \\(inputData.first!), Last value: \\(inputData.last!)\")\n        print(\"[Result data] Count: \\(resultData.count), First value: \\(resultData.first!), Last value: \\(resultData.last!)\")\n    }\n\n}\n\n//\u914d\u5217\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u3092\u53d6\u5f97\nprivate extension Array {\n    var byteLength: Int {\n        return self.count * MemoryLayout.size(ofValue: self[0])\n    }\n}\n```\n\n\u5148\u7a0b\u306e\u30b3\u30fc\u30c9\u3068\u306e\u9055\u3044\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u6570\u304c10000\u306b\u5897\u3048\u305f\u70b9\u3068\u3001\u6240\u8981\u6642\u9593\u6e2c\u5b9a\u306e\u30b3\u30fc\u30c9\u304c\u66f8\u304b\u308c\u305f\u70b9\u3067\u3059\u3002\n\u6240\u8981\u6642\u9593\u306e\u6e2c\u5b9a\u306b\u306fXcode\u6a19\u6e96\u306e\u30c6\u30b9\u30c8\u6a5f\u80fd\u3092\u7528\u3044\u3066\u3082\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6975\u529b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067Date()\u3092\u7528\u3044\u307e\u3057\u305f\u3002\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u65b9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n```cpp:Shaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nconstant int repeatCount = 100000;\n\nkernel void addAndSubtract(const device float *inputData [[ buffer(0) ]],\n                         device float *outputData [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float result = inputData[id];\n    for (uint i=0; i<repeatCount; i++){\n        result += 1.0f;\n        result -= 1.0f;\n    }\n    outputData[id] = result;\n}\n```\n\n1\u3092\u8db3\u3057\u3066\u5f15\u304f\u3068\u3044\u3046\u610f\u5473\u306e\u306a\u3044\u51e6\u7406\u3092repeatCount\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306erepeatCount\u3092\u5909\u3048\u3066\u3001\u6240\u8981\u6642\u9593\u306e\u5909\u9077\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\n\u6b21\u306b\u3001CPU\u5074\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```Swift:ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    let dataCount = 10000\n    let repeatCount = 1000000\n\n    @IBAction func calculateWithFor()\n    {\n        var inputData:[Float] = []\n        for _ in 0..<dataCount {\n            inputData.append(Float(arc4random_uniform(UInt32(dataCount))))\n        }\n        \n        let startingDate = Date()\n        \n        var resultData = [Float](repeating: 0, count: inputData.count)\n        for i in 0..<dataCount\n        {\n            var result = inputData[i]\n            for _ in 0..<repeatCount\n            {\n                result += 1\n                result -= 1\n            }\n            resultData[i] =  result\n        }\n        \n        print(\"[Time] \\(Date().timeIntervalSince(startingDate))\")\n        print(\"[Input data] Count: \\(inputData.count), First value: \\(inputData.first!), Last value: \\(inputData.last!)\")\n        print(\"[Result data] Count: \\(resultData.count), First value: \\(resultData.first!), Last value: \\(resultData.last!)\")\n    }    \n}\n```\n\n\u30eb\u30fc\u30d7\u3092\u7528\u3044\u3066Metal\u5074\u306e\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3082\u540c\u69d8\u306b\u3001repeatCount\u3092\u5909\u3048\u3066\u6240\u8981\u6642\u9593\u306e\u5909\u9077\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u6e2c\u5b9a\u3059\u308b\u969b\u306b\u306fEdit Scheme\u3067\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u3001Metal\u5074\u3001CPU\u5074\u3068\u3082\u306b\u672c\u6765\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u767a\u63ee\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nBuild configuration\u3092Release\u306b\u3002\n<img width=\"390\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-11 1.25.43.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/35297/8857839a-7ae2-bee5-9011-78ef542fb0ad.png\">\n\nGPU Frame Capture\u3068Metal API Validation\u3092Disabled\u306b\u3002\n<img width=\"501\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-11 1.26.37.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/35297/cbaf1ffe-172c-2413-d451-cfeffc7e0ecb.png\">\n\n\u691c\u8a3c\u6a5f\u306b\u306f\u306fiPhone 6 Plus\u3001iOS10\u3092\u7528\u3044\u307e\u3057\u305f\u3002\u5185\u8535\u3055\u308c\u3066\u3044\u308b\u30c1\u30c3\u30d7\u306fApple A8\u3067\u3059\u3002\n\u6e2c\u5b9a\u7d50\u679c\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n![metalResult.png](https://qiita-image-store.s3.amazonaws.com/0/35297/2eb61e54-2107-03aa-5384-06d9ae4ffde9.png)\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u30b0\u30e9\u30d5\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n![metalLiner.png](https://qiita-image-store.s3.amazonaws.com/0/35297/186c0a86-0300-6c50-00c4-61c14b47b543.png)\n\u30ea\u30d4\u30fc\u30c8\u6570\u304c\u5927\u304d\u3044\u3068\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b50-60\u500d\u3082\u306e\u6975\u7aef\u306b\u5927\u304d\u306a\u5dee\u304c\u51fa\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u540c\u3058\u30c7\u30fc\u30bf\u3092\u5bfe\u6570\u8868\u793a\u306b\u3059\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n![metalLogarithm.png](https://qiita-image-store.s3.amazonaws.com/0/35297/88519990-9a1e-b40a-1e19-034003ec8b0f.png)\n\u30ea\u30d4\u30fc\u30c8\u6570\u304c\u5c0f\u3055\u3044\u5834\u5408\u306fCPU\u306e\u65b9\u304cMetal\u3088\u308a\u3082\u6240\u8981\u6642\u9593\u304c\u77ed\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u51e6\u7406\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u5834\u5408\u306f\u3001\u51e6\u7406\u305d\u306e\u3082\u306e\u3088\u308a\u3082GPU\u5074\u3078\u306e\u30c7\u30fc\u30bf\u306e\u8ee2\u9001\u3084\u8a2d\u5b9a\u304c\u6240\u8981\u6642\u9593\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u3060\u3068\u8003\u3048\u308c\u308c\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001GPU\u6f14\u7b97\u3067\u306fGPU\u3078\u306e\u30c9\u30ed\u30fc\u30b3\u30fc\u30eb\u3092\u6700\u4f4e\u9650\u306b\u3059\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u3068\u5168\u51e6\u7406\u4e2d\u306b\u5360\u3081\u308b\u30c9\u30ed\u30fc\u30b3\u30fc\u30eb\u306e\u5272\u5408\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nMeatl\u306e\u6027\u80fd\u3092\u5341\u5206\u306b\u767a\u63ee\u3059\u308b\u306b\u306f\u3001CPU/GPU\u9593\u306e\u3084\u308a\u3068\u308a\u3092\u6700\u5c0f\u9650\u306b\u3057\u3001kernel\u95a2\u6570\u3067\u3042\u308b\u7a0b\u5ea6\u5927\u304d\u306a\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u5927\u4e8b\u306a\u3088\u3046\u3067\u3059\u3002\n\nGPU\u30e1\u30fc\u30ab\u30fc\u3001NVIDIA\u306e\u30b8\u30a7\u30f3\u30b9\u30f3\u30fb\u30d5\u30a1\u30f3CEO\u304cGTC Japan\u3067\u300c\u8133\u306fGPU\u300d\u3068\u8ff0\u3079\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3072\u3087\u3063\u3068\u3057\u305f\u3089Metal\u306e\u767b\u5834\u306b\u3088\u308a\u500b\u3005\u306e\u30a2\u30d7\u30ea\u306b\u77e5\u6027\u304c\u5bbf\u308b\u6642\u4ee3\u304c\u8fd1\u3065\u3044\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nMetal\u306e\u80fd\u529b\u3092\u30d5\u30eb\u306b\u5f15\u304d\u51fa\u3059\u305f\u3081\u306b\u306f\u3001\u305d\u306e\u52d5\u4f5c\u539f\u7406\u3092\u7406\u89e3\u3057\u3001\u7279\u6027\u3092\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u5927\u4e8b\u306a\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u6975\u529b\u30b7\u30f3\u30d7\u30eb\u306aMetal\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u5b9f\u969b\u306b\u6f14\u7b97\u3092\u884c\u3044\u3001\u305d\u306e\u7279\u6027\u3092\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306f\u3001Metal\u306e\u5fdc\u7528\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\n\u53c2\u8003:\n[Metal for Developers](https://developer.apple.com/metal/)\n[Metal\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u30ac\u30a4\u30c9](https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/index.html)\n[Metal Shading Language Guide](https://developer.apple.com/library/content/documentation/Metal/Reference/MetalShadingLanguageGuide/Introduction/Introduction.html)\n[\u30bc\u30ed\u304b\u3089\u306f\u3058\u3081\u308bGPU\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0](http://www.gdep.jp/page/view/248)\n[\u6b74\u4ee3iOS\u30c7\u30d0\u30a4\u30b9\u306eGPU\u307e\u3068\u3081](http://qiita.com/shu223/items/8027201e50c68288f0be)\n[iOS Metal\u3067\u6d41\u4f53\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff01](http://qiita.com/Ushio@github/items/3c206dd1e26195b7627f)\n[Wikipedia PowerVR](https://ja.wikipedia.org/wiki/PowerVR)\n[Data-Parallel Programming with Metal and Swift for iPhone/iPad GPU](http://memkite.com/blog/2014/12/15/data-parallel-programming-with-metal-and-swift-for-iphoneipad-gpu/)\n[MetalKit\u3067GPU\u3092\u4f7f\u3044\u3053\u306a\u3059](https://www.gaprot.jp/pickup/tips/metalkit)\n[waifu2x\u3092Metal\u3067\u66f8\u3044\u3066\u307f\u305f](https://speakerdeck.com/matuyuji/waifu2xwometaldeshu-itemita)\n[\u304b\u3064\u3066SF\u3067\u63cf\u304b\u308c\u305f\u4e16\u754c\u306f\u3082\u306f\u3084\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u3044](http://pc.watch.impress.co.jp/docs/news/1023498.html)\n", "tags": ["iOS", "Xcode", "Swift", "Metal", "GPU"]}