{"context": " More than 1 year has passed since last update.\u5165\u529b\u3055\u308c\u305f\u6ce8\u6587(Order)\u306e\u6570(units)\u3060\u3051\u5e2f\u540c\u8005(Companion)\u306e\u5b50\u30d5\u30a9\u30fc\u30e0\u306e\u6570\u3092\u5909\u66f4\u3055\u305b\u308b\u3002\n\u3084\u308a\u65b9\u304c\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u5f37\u5f15\u306b\u3084\u3063\u3066\u307f\u308b\u3002:\n    if request.method == \"POST\":\n\n          form = OrderForm(user=request.user,\n                           ticket=ticket, data=request.POST)\n          #: Order(\u6ce8\u6587)\n          is_form_valid = form.is_valid()\n\n          #: Companion (\u5e2f\u540c\u8005)\n          formset = create_companion_formset(\n              request, order=form.instance)            \n          is_formset_valid = formset.is_valid()\n\n          number = int(form.cleaned_data.get('units', 1)) \n          if number != len(formset.forms):\n\n              #: \u6570\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u306e\u3067\u3001....\n              is_formset_valid = False\n              old = formset\n\n              #: formset \u3092\u65b0\u3057\u3044\u6570\u3067\u4f5c\u308a\u306a\u304a\u3059\n              formset = create_companion_formset(None, extra=number)\n\n              #: \u30b3\u30d4\u30fc\u3059\u308b\n              for i in range(min(number, len(old.forms))):\n                  formset.forms[i] = old.forms[i]\n\n         if is_form_valid and is_forset_valid:\n             form.save()\n             formset.save()\n\n         #:.....\n\n\u8ffd\u52a0\u3055\u308c\u305f\u5b50\u30d5\u30a9\u30fc\u30e0\u306e\u5165\u529b\u3092\u5fc5\u9808\u3068\u3059\u308b:\n    class OrderCompanionFormset(BaseInlineFormSet):\n\n        def clean(self):\n            for i in range(self.total_form_count()):\n                if not self.forms[i].has_changed():\n                    _errs = self.forms[i].error_class(\n                        [_(\"Form must be filled.\")])\n                    self.forms[i].errors['__all__'] = _errs \n\n\u30d5\u30a9\u30fc\u30e0\u30bb\u30c3\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea:\n    def create_companion_formset(request, order=None, extra=1, *args, **kwargs):\n        ''' Companion \u306e\u30d5\u30a9\u30fc\u30e0\u30bb\u30c3\u30c8\u3092\u4f5c\u308b '''\n        kwargs['form'] = CompanionForm\n        kwargs['can_delete'] = False\n        kwargs['formset'] = OrderCompanionFormset\n\n        #: \u901a\u5e38\n        if request and request.method == \"POST\":\n            formset = inlineformset_factory(\n                Order, Companion,\n                *args, **kwargs)(request.POST, instance=order)\n\n        else:\n            formset = inlineformset_factory(\n                Order, Companion, extra=extra,\n                *args, **kwargs)(instance=order)\n\n        return formset                    \n\nerrs \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f nonform_erros\u306b\u3067\u307e\u3059:\n    {% for form in formset %}\n    <h4> \u5e2f\u540c\u8005 </h4>\n    {% if form.non_form_errors %}\n    <div class=\"alert alert-error\">{{ from.non_form_error.as_text }}</div>\n    {% endif %}\n    ....\n    {% endfor %}                                                                  \n\n\n\n\u5165\u529b\u3055\u308c\u305f\u6ce8\u6587(Order)\u306e\u6570(units)\u3060\u3051\u5e2f\u540c\u8005(Companion)\u306e\u5b50\u30d5\u30a9\u30fc\u30e0\u306e\u6570\u3092\u5909\u66f4\u3055\u305b\u308b\u3002\n\n\n\u3084\u308a\u65b9\u304c\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u5f37\u5f15\u306b\u3084\u3063\u3066\u307f\u308b\u3002:\n\n```py\n    if request.method == \"POST\":\n\n          form = OrderForm(user=request.user,\n                           ticket=ticket, data=request.POST)\n          #: Order(\u6ce8\u6587)\n          is_form_valid = form.is_valid()\n  \n          #: Companion (\u5e2f\u540c\u8005)\n          formset = create_companion_formset(\n              request, order=form.instance)            \n          is_formset_valid = formset.is_valid()\n\n          number = int(form.cleaned_data.get('units', 1)) \n          if number != len(formset.forms):\n          \n              #: \u6570\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u306e\u3067\u3001....\n              is_formset_valid = False\n              old = formset\n              \n              #: formset \u3092\u65b0\u3057\u3044\u6570\u3067\u4f5c\u308a\u306a\u304a\u3059\n              formset = create_companion_formset(None, extra=number)\n              \n              #: \u30b3\u30d4\u30fc\u3059\u308b\n              for i in range(min(number, len(old.forms))):\n                  formset.forms[i] = old.forms[i]\n          \n         if is_form_valid and is_forset_valid:\n             form.save()\n             formset.save()\n             \n         #:.....\n```\n\n\u8ffd\u52a0\u3055\u308c\u305f\u5b50\u30d5\u30a9\u30fc\u30e0\u306e\u5165\u529b\u3092\u5fc5\u9808\u3068\u3059\u308b:\n\n```py\n    class OrderCompanionFormset(BaseInlineFormSet):\n\n        def clean(self):\n            for i in range(self.total_form_count()):\n                if not self.forms[i].has_changed():\n                    _errs = self.forms[i].error_class(\n                        [_(\"Form must be filled.\")])\n                    self.forms[i].errors['__all__'] = _errs \n```\n\n\u30d5\u30a9\u30fc\u30e0\u30bb\u30c3\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea:\n\n```py\n    def create_companion_formset(request, order=None, extra=1, *args, **kwargs):\n        ''' Companion \u306e\u30d5\u30a9\u30fc\u30e0\u30bb\u30c3\u30c8\u3092\u4f5c\u308b '''\n        kwargs['form'] = CompanionForm\n        kwargs['can_delete'] = False\n        kwargs['formset'] = OrderCompanionFormset\n    \n        #: \u901a\u5e38\n        if request and request.method == \"POST\":\n            formset = inlineformset_factory(\n                Order, Companion,\n                *args, **kwargs)(request.POST, instance=order)\n    \n        else:\n            formset = inlineformset_factory(\n                Order, Companion, extra=extra,\n                *args, **kwargs)(instance=order)\n    \n        return formset                    \n```\n                    \n_errs \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306f non_form_erros\u306b\u3067\u307e\u3059:\n\n```html\n    {% for form in formset %}\n    <h4> \u5e2f\u540c\u8005 </h4>\n    {% if form.non_form_errors %}\n    <div class=\"alert alert-error\">{{ from.non_form_error.as_text }}</div>\n    {% endif %}\n\t....\n    {% endfor %}                                                                  \n```", "tags": ["Django", "UI", "Python"]}