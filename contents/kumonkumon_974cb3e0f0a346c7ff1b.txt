{"context": "(\u76ee\u6b21\u306f\u3053\u3061\u3089)\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u5358\u7d14\u306a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3001\u3061\u3087\u3063\u3068\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3063\u307d\u304f\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u308c\u3092\u307e\u305f\u3055\u3089\u306b\u5c11\u3057\u62e1\u5f35\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\n\n\u62e1\u5f35\uff1a\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08pooling layer\uff09\u306e\u8ffd\u52a0\n\u4eba\u9593\u3063\u3066\u3001\u305f\u3068\u3048\u6587\u5b57\u304c\u56de\u8ee2\u3057\u3066\u3044\u3066\u3082\u3001\u591a\u5c11\u6b6a\u3093\u3067\u3044\u3066\u3082\u3001\u305d\u308c\u3092\u4f55\u3082\u610f\u8b58\u305b\u305a\u306b\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u305d\u308c\u3092\u8a08\u7b97\u6a5f\u3067\u5b9f\u73fe\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5272\u308a\u3068\u5927\u5909\u3002\n\u3053\u308c\u307e\u3067\u306b\u66f8\u3044\u305f\u5185\u5bb9\u3067\u306f\u3001\u5b66\u7fd2\u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30a6\u30a7\u30a4\u30c8\uff09\u306f\u7279\u5b9a\u306e\u4f4d\u7f6e\u5c02\u7528\u306e\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u3066\u3001\u30c7\u30fc\u30bf\u304c\u5c11\u3057\u79fb\u52d5\u3057\u3066\u3057\u307e\u3046\u3060\u3051\u3067\u3001\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002MNIST\u306f\u6bd4\u8f03\u7684\u304d\u308c\u3044\u306a\u30c7\u30fc\u30bf\u306a\u306e\u3067\u3001\u307e\u3041\u305d\u3053\u307e\u3067\u8b58\u5225\u7387\u304c\u4e0b\u304c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3051\u3069\u3002\n\u3067\u3001\u3053\u306e\u4f4d\u7f6e\u306e\u5909\u5316\u306b\u3064\u3044\u3066\u30ed\u30d0\u30b9\u30c8\u306b\u3057\u3066\u304f\u308c\u308b\u5c64\u304c\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3002\u3053\u306e\u547c\u3073\u65b9\u306e\u7531\u6765\u306f\u3001\u4e00\u65e6\u3001\u7279\u5fb4\u306a\u308a\u3092\u30d7\u30fc\u30eb\uff08pool\uff09\u3057\u3066\u304a\u3044\u3066\u3001\u305d\u3053\u304b\u3089\u4ee3\u8868\u7684\u306a\u3082\u306e\u3092\u9078\u629eor\u7b97\u51fa\u3059\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\uff08pooling\uff09\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\u3053\u306e\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u4f55\u3092\u3084\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3002\u4ee5\u4e0a\u3002\n\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3060\u3068\u3001\u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b\u3068\u3044\u3046\u4f5c\u696d\u3002\u306a\u306e\u3067\u3001\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u51e6\u7406\u3002\n\u8ffd\u52a0\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\n\u6b21\u5143\u304c\u300128 x 28 x 2\u304b\u308914 x 14 x 2\u306b\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\u5b9f\u969b\u306e\u51e6\u7406\u306f\u3001MaxPool\u3063\u3066\u3084\u3064\u3067\u30012 x 2\u306e\u9818\u57df\u304b\u3089\u3001\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u4ee3\u8868\u5024\u3068\u3057\u3066\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u3002\u306a\u306e\u3067\u3001\u60c5\u5831\u91cf\u3068\u3044\u3046\u304b\u6b21\u5143\u304c1/4\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u6700\u5927\u5024\u306e\u4ed6\u306b\u3082\u3001\u5e73\u5747\u306b\u3057\u305f\u308a\u3001\u3061\u3087\u3063\u3068\u8907\u96d1\u306b\u3057\u3066\u307f\u305f\u308a\u3068\u3044\u308d\u3044\u308d\u3042\u308b\u3002\n\u306a\u305c\u3001\u3053\u3093\u306a\u51e6\u7406\u3067\u3046\u307e\u304f\u3044\u304f\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u753b\u50cf\u306f\u5c0f\u3055\u3044\u307b\u3046\u304c\u79fb\u52d5\u304c\u76ee\u7acb\u305f\u306a\u3044\u304b\u3089\u3068\u3044\u3046\u5358\u7d14\u306a\u7406\u7531\u3002\n\u30d7\u30fc\u30ea\u30f3\u30b0\u306f\u5358\u7d14\u3060\u3051\u3069\u3001\u3053\u308c\u3060\u3051\u3067\u8ad6\u6587\u306b\u306a\u308b\u307b\u3069\u5965\u304c\u6df1\u3044\u3002\nhttp://cs.nyu.edu/~ylan/files/publi/boureau-icml-10.pdf\nY-Lan Boureau, Jean Ponce, and Yann LeCun, \nA theoretical analysis of feature pooling in vision algorithms,\nProc. International Conference on Machine learning (ICML'10), 2010\n\n\n\u30b3\u30fc\u30c9\nmnist_fixed_cnn_pl.py\n\nmnist_fixed_cnn_pl.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 100\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn_pl'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n\n\n\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u304c\u5165\u3063\u305f\u90e8\u5206\u3092\u3002\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n\n\n\u5168\u7d50\u5408\u5c64\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u51fa\u529b\u3092\u5165\u529b\u306b\u3059\u308b\u5909\u66f4\u3002\u305d\u308c\u306b\u4f34\u3063\u3066\u5165\u529b\u306e\u6b21\u5143\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u306e\u5909\u66f4\u3002\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n\n\u3068\u306a\u3063\u3066\u3001\u5909\u66f4\u91cf\u306f\u975e\u5e38\u306b\u5c11\u306a\u3044\u3002\n\n\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300198.1%\u7a0b\u5ea6\u3002\n\u3088\u3046\u3084\u304f\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u306e\u7d50\u679c(97.8%)\u3092\u8d85\u3048\u3066\u304d\u305f\u3002\n\n\n\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u308c\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3066\u307f\u307e\u3059\u3002\n([\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/kumonkumon/items/6fd05963df92e9eec8c0))\n\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/82743a2da36ce8f86487)\u3067\u306f\u3001\u5358\u7d14\u306a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3001\u3061\u3087\u3063\u3068\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3063\u307d\u304f\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u308c\u3092\u307e\u305f\u3055\u3089\u306b\u5c11\u3057\u62e1\u5f35\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\n\n#\u62e1\u5f35\uff1a\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08pooling layer\uff09\u306e\u8ffd\u52a0\n\u4eba\u9593\u3063\u3066\u3001\u305f\u3068\u3048\u6587\u5b57\u304c\u56de\u8ee2\u3057\u3066\u3044\u3066\u3082\u3001\u591a\u5c11\u6b6a\u3093\u3067\u3044\u3066\u3082\u3001\u305d\u308c\u3092\u4f55\u3082\u610f\u8b58\u305b\u305a\u306b\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u305d\u308c\u3092\u8a08\u7b97\u6a5f\u3067\u5b9f\u73fe\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5272\u308a\u3068\u5927\u5909\u3002\n\u3053\u308c\u307e\u3067\u306b\u66f8\u3044\u305f\u5185\u5bb9\u3067\u306f\u3001\u5b66\u7fd2\u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u30a6\u30a7\u30a4\u30c8\uff09\u306f\u7279\u5b9a\u306e\u4f4d\u7f6e\u5c02\u7528\u306e\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u3066\u3001\u30c7\u30fc\u30bf\u304c\u5c11\u3057\u79fb\u52d5\u3057\u3066\u3057\u307e\u3046\u3060\u3051\u3067\u3001\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002MNIST\u306f\u6bd4\u8f03\u7684\u304d\u308c\u3044\u306a\u30c7\u30fc\u30bf\u306a\u306e\u3067\u3001\u307e\u3041\u305d\u3053\u307e\u3067\u8b58\u5225\u7387\u304c\u4e0b\u304c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3051\u3069\u3002\n\n\u3067\u3001\u3053\u306e\u4f4d\u7f6e\u306e\u5909\u5316\u306b\u3064\u3044\u3066\u30ed\u30d0\u30b9\u30c8\u306b\u3057\u3066\u304f\u308c\u308b\u5c64\u304c\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3002\u3053\u306e\u547c\u3073\u65b9\u306e\u7531\u6765\u306f\u3001\u4e00\u65e6\u3001\u7279\u5fb4\u306a\u308a\u3092\u30d7\u30fc\u30eb\uff08pool\uff09\u3057\u3066\u304a\u3044\u3066\u3001\u305d\u3053\u304b\u3089\u4ee3\u8868\u7684\u306a\u3082\u306e\u3092\u9078\u629eor\u7b97\u51fa\u3059\u308b\u306e\u3067\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\uff08pooling\uff09\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3002\n\n\u3053\u306e\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u4f55\u3092\u3084\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u30c7\u30fc\u30bf\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3002\u4ee5\u4e0a\u3002\n\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3060\u3068\u3001\u753b\u50cf\u3092\u7e2e\u5c0f\u3059\u308b\u3068\u3044\u3046\u4f5c\u696d\u3002\u306a\u306e\u3067\u3001\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u51e6\u7406\u3002\n\n\u8ffd\u52a0\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n![mnist_fixed_cnn_pl](https://qiita-image-store.s3.amazonaws.com/0/127038/550af65a-afc8-09e0-6fe0-c7bcd2644a61.png)\n\n\u6b21\u5143\u304c\u3001`28 x 28 x 2`\u304b\u3089`14 x 14 x 2`\u306b\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\u5b9f\u969b\u306e\u51e6\u7406\u306f\u3001`MaxPool`\u3063\u3066\u3084\u3064\u3067\u3001`2 x 2`\u306e\u9818\u57df\u304b\u3089\u3001\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u4ee3\u8868\u5024\u3068\u3057\u3066\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u3002\u306a\u306e\u3067\u3001\u60c5\u5831\u91cf\u3068\u3044\u3046\u304b\u6b21\u5143\u304c1/4\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u6700\u5927\u5024\u306e\u4ed6\u306b\u3082\u3001\u5e73\u5747\u306b\u3057\u305f\u308a\u3001\u3061\u3087\u3063\u3068\u8907\u96d1\u306b\u3057\u3066\u307f\u305f\u308a\u3068\u3044\u308d\u3044\u308d\u3042\u308b\u3002\n\n\u306a\u305c\u3001\u3053\u3093\u306a\u51e6\u7406\u3067\u3046\u307e\u304f\u3044\u304f\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u753b\u50cf\u306f\u5c0f\u3055\u3044\u307b\u3046\u304c\u79fb\u52d5\u304c\u76ee\u7acb\u305f\u306a\u3044\u304b\u3089\u3068\u3044\u3046\u5358\u7d14\u306a\u7406\u7531\u3002\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u306f\u5358\u7d14\u3060\u3051\u3069\u3001\u3053\u308c\u3060\u3051\u3067\u8ad6\u6587\u306b\u306a\u308b\u307b\u3069\u5965\u304c\u6df1\u3044\u3002\nhttp://cs.nyu.edu/~ylan/files/publi/boureau-icml-10.pdf\n\n```\nY-Lan Boureau, Jean Ponce, and Yann LeCun, \nA theoretical analysis of feature pooling in vision algorithms,\nProc. International Conference on Machine learning (ICML'10), 2010\n```\n\n##\u30b3\u30fc\u30c9\n[mnist_fixed_cnn_pl.py](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/mnist_fixed_cnn_pl.py)\n\n```py:mnist_fixed_cnn_pl.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 100\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn_pl'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n```\n\n##\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u304c\u5165\u3063\u305f\u90e8\u5206\u3092\u3002\n\n###\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002\n\n```py\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n```\n\n###\u5168\u7d50\u5408\u5c64\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u51fa\u529b\u3092\u5165\u529b\u306b\u3059\u308b\u5909\u66f4\u3002\u305d\u308c\u306b\u4f34\u3063\u3066\u5165\u529b\u306e\u6b21\u5143\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u306e\u5909\u66f4\u3002\n\n```py\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n```\n\n\u3068\u306a\u3063\u3066\u3001\u5909\u66f4\u91cf\u306f\u975e\u5e38\u306b\u5c11\u306a\u3044\u3002\n\n##\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300198.1%\u7a0b\u5ea6\u3002\n\u3088\u3046\u3084\u304f\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u306e\u7d50\u679c(97.8%)\u3092\u8d85\u3048\u3066\u304d\u305f\u3002\n![result mnist_fixed_cnn_pl](https://qiita-image-store.s3.amazonaws.com/0/127038/2ed2adf1-d4bf-7ff8-9b79-772abf771f89.png)\n\n#\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/82743a2da36ce8f86487)\u3067\u7d39\u4ecb\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002[\u6b21\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/6fab067bf06da9feaa9f)\u3067\u306f\u3001\u3053\u308c\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3066\u307f\u307e\u3059\u3002\n", "tags": ["TensorFlow", "DeepLearning", "CNN", "ConvolutionalNeuralNetworks", "\u6df1\u5c64\u5b66\u7fd2"]}