{"context": " More than 1 year has passed since last update.Wikipedia\u3092\u691c\u7d22\u3059\u308b\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u691c\u7d22\u6587\u5b57\u5217\u3068\u5404\u8a18\u4e8b\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u3001\u985e\u4f3c\u5ea6\u9806\u306b\u691c\u7d22\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067\u5168\u6587\u691c\u7d22\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\u9ad8\u901f\u306b\u691c\u7d22\u3059\u308b\u305f\u3081\u306b\u7d22\u5f15\u3068\u9006\u7d22\u5f15\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4ee5\u524d\u66f8\u3044\u305f\u3010\u30ec\u30b3\u30e1\u30f3\u30c9\u3011\u5185\u5bb9\u30d9\u30fc\u30b9\u3068\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u9577\u6240\u3068\u77ed\u6240\u30fb\u5b9f\u88c5\u65b9\u6cd5\u307e\u3068\u3081\u306e\u7d9a\u304d\u8a18\u4e8b\u3067\u3059\u3002\u5168\u6587\u691c\u7d22\u3092\u691c\u7d22\u6587\u5b57\u5217\u306b\u985e\u4f3c\u3059\u308b\u8a18\u4e8b\u3092\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u6a5f\u80fd\u3068\u8003\u3048\u308b\u3068\u3001\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306f\u5185\u5bb9\u30d9\u30fc\u30b9\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30ec\u30b3\u30e1\u30f3\u30c9\u30a8\u30f3\u30b8\u30f3\u3067\u3042\u308b\u3068\u8aad\u307f\u66ff\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u7279\u6027\n\u5168\u6587\u691c\u7d22\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308a\u307e\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u3068N-Gram\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n\n\n\n\u5f62\u614b\u7d20\u89e3\u6790\nN-gram\n\n\n\n\n\u30a4\u30f3\u30c7\u30af\u30b7\u30f3\u30b0\u901f\u5ea6\n\u9045\u3044\n\u901f\u3044\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30b5\u30a4\u30ba\n\u5c0f\u3055\u3044\n\u5927\u304d\u3044\n\n\n\u691c\u7d22\u30ce\u30a4\u30ba\n\u5c0f\u3055\u3044\n\u591a\u3044\n\n\n\u691c\u7d22\u6f0f\u308c\n\u591a\u3044\n\u5c11\u306a\u3044\n\n\n\u691c\u7d22\u901f\u5ea6\n\u901f\u3044\n\u9045\u3044\n\n\n\u8a00\u8a9e\u4f9d\u5b58\n\u8f9e\u66f8\u304c\u5fc5\u8981\n\u8f9e\u66f8\u304c\u4e0d\u8981\n\n\n\n\u203bWikipedia:\u5168\u6587\u691c\u7d22\u304b\u3089\u5f15\u7528\n\u5224\u308a\u306b\u304f\u3044\u7b87\u6240\u306e\u307f\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u691c\u7d22\u6f0f\u308c\u3068\u8a00\u8a9e\u4f9d\u5b58\u3067\u8f9e\u66f8\u304c\u5fc5\u8981\u306a\u70b9\u306b\u3064\u3044\u3066\u3067\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u306f\u8f9e\u66f8\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u300e\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u300f\u304c\u8f9e\u66f8\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u5f62\u614b\u7d20\u89e3\u6790\u3060\u3068\u300e\u6771\u4eac\u300f\u300e\u30b9\u30ab\u30a4\u300f\u300e\u30c4\u30ea\u30fc\u300f\u306e\u3088\u3046\u306b\u5206\u5272\u3057\u3066\u8a8d\u8b58\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7d50\u679c\u3068\u3057\u3066\u6771\u4eac\u306e\u30af\u30ea\u30b9\u30de\u30b9\u30c4\u30ea\u30fc\u3068\u3044\u3063\u305f\u610f\u56f3\u3057\u306a\u3044\u691c\u7d22\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u524d\u5f8c\u306e\u6587\u8108\u3092\u8a8d\u8b58\u3067\u304d\u306a\u3044\u70b9\u304c\u5f62\u614b\u7d20\u89e3\u6790\u578b\u5168\u6587\u691c\u7d22\u306e\u5f31\u70b9\u3067\u3059\u3002\n\n\u5b8c\u6210\u54c1\u306e\u691c\u7d22\u7d50\u679c\n\u25a0 input1 \u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\noutput1 : \n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.00787401574803\n- 2-\u30a2\u30c0\u30de\u30f3\u30bf\u30ce\u30f3\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.00654878847413\n- (R)-1-\u30a4\u30bd\u30c1\u30aa\u30b7\u30a2\u30ca\u30c8-4-(\u30e1\u30c1\u30eb\u30b9\u30eb\u30d5\u30a3\u30cb\u30eb)\u30d6\u30bf\u30f3\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00507614213198\n- 2-\u30e8\u30fc\u30c9\u30ad\u30b7\u5b89\u606f\u9999\u9178\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00465313028765\n- \u30c8\u30ea\u30d6\u30c1\u30eb\u30b9\u30ba\u30aa\u30ad\u30b7\u30c9\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.00440917107584\n- \u30a2\u30ce\u30ad\u30bd\u30de\u30fc\n\n\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u4ed5\u69d8\n\u65e5\u672c\u8a9e\u7248Wikipedia\u306e\u5168\u3066\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u89e3\u6790\u3059\u308b\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\u3068\u691c\u7d22\u6a5f\u80fd\u3092\u958b\u767a\u3057\u307e\u3059\u3002\n\u25a0 Wikipedia\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\u306e\u52d5\u4f5c\u30d5\u30ed\u30fc\n1. Wikipedia\u306e\u5168\u30bf\u30a4\u30c8\u30eb\u3092\u683c\u7d0d\u3057\u305f\u30d5\u30a1\u30a4\u30eb-jawiki-latest-all-titles-in-ns0.gz\u304b\u3089\u8a18\u4e8b\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u53d6\u5f97\n2. \u30bf\u30a4\u30c8\u30eb\u304b\u3089Wikipedia\u306eURL\u3092\u751f\u6210\u3059\u308b\u3002\n3. URL\u306bHTTP GET\u3092\u5b9f\u65bd\u3057\u3066body\u90e8\u5206\u3092\u30e1\u30e2\u30ea\u4e0a\u306b\u5c55\u958b\u3059\u308b\u3002\n4. HTTP body\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bTF-IDF\u3092\u8a08\u7b97\u3059\u308b\u3002(TF-IDF\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3002)\n5. \u8a18\u4e8b\u6bce\u306e\u7d22\u5f15\u3068\u3001\u7279\u5fb4\u8a9e\u6bce\u306e\u7d22\u5f15\u3092Redis\u306b\u751f\u6210\u3059\u308b\u3002\n6. 1\u3078\u623b\u308b\u3002\n\u25a0 \u691c\u7d22\u6a5f\u80fd\u306e\u52d5\u4f5c\u30d5\u30ed\u30fc\n1. \u691c\u7d22\u6587\u5b57\u5217\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bTF-IDF\u3092\u8a08\u7b97\u3059\u308b\u3002\n2. \u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u69cb\u6210\u3059\u308b\u7279\u5fb4\u8a9e\u6bce\u306b\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\n3. \u7d22\u5f15\u30c7\u30fc\u30bf\u304b\u3089\u8a18\u4e8b\u6bce\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u7d50\u679c\u8868\u793a\u3059\u308b\u3002\n\u25a0 \u691c\u7d22\u6587\u5b57\u5217\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306e\u51fa\u529b\u4f8b\ninput1 : \u7d05\u767d\u6b4c\u5408\u6226\noutput1 : [[u'\u7d05\u767d', 0.5], [u'\u6b4c\u5408\u6226', 0.5]]\ninput2 : \u30cb\u30e5\u30fc\u30c8\u30ea\u30ce\u3092\u9664\u304f\u8cea\u91cf\u306e\u3042\u308b\u7c92\u5b50\u306e\u4e2d\u3067\u6700\u3082\u8efd\u3044\u7d20\u7c92\u5b50\noutput2 : [[u'\u30cb\u30e5\u30fc', 0.16666666666666666], [u'\u30c8\u30ea\u30ce', 0.16666666666666666], [u'\u7c92\u5b50', 0.16666666666666666], [u'\u7d20\u7c92\u5b50', 0.16666666666666666], [u'\u8cea\u91cf', 0.16666666666666666]]\n\u25a0 \u7d22\u5f15\u30c7\u30fc\u30bf\u304b\u3089\u985e\u4f3c\u5ea6\u8a08\u7b97\u4f8b\n\u691c\u7d22\u6587\u5b57\u5217\u300e\u7d05\u767d\u6b4c\u5408\u6226\u300f\u3068\u5404\u8a18\u4e8b\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002(search.py\u306e\u5b9f\u88c5\u8aad\u3093\u3060\u65b9\u304c\u901f\u3044\u304b\u3082)\nindex-data: \u300e\u7d05\u767d\u300f\u3067\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\n\n\n\ntitle\nvalue\n\n\n\n\n\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226\n0.0226161369193\n\n\nMAESTRO-T\n0.00769230769231\n\n\n\u30a8\u30ec\u30ad\u30b3\u30df\u30c3\u30af\u3068\u6298\u539f\u307f\u304b\u306e\u30ac\u30c4\u30ac\u30c4\u30db\u30fc\u30e0\u30e9\u30f3\n0.00740740740741\n\n\n\nindex-data: \u300e\u6b4c\u5408\u6226\u300f\u3067\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\n\n\n\ntitle\nvalue\n\n\n\n\n1996\u5e74\u306e\u30c6\u30ec\u30d3_(\u65e5\u672c)\n0.005555555555555556\n\n\n\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226\n0.00105263157895\n\n\n2003\u5e74\u306e\u30c6\u30ec\u30d3_(\u65e5\u672c)\n0.00100840336134\n\n\n\n\u3053\u306e\u5834\u5408\u306e\u300e\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226\u300f\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\u5f0f\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n0.5 * 0.0226161369193 + 0.5 * 0.00105263157895 = 0.011834384249125\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ngithub - text_serarch_prototype\n\n\ninstall\n\ninstall\neasy_install lxml\npip install beautifulsoup4\npip install janome\npip install nltk\npip install redis\n\n\n\n\nWikipedia\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\n\ndata_import.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport ssl\nimport time\nfrom tx.storage import Storage\nimport requests\nfrom tx.tfidf import TFIDF\n\n# wikipedia \u5168\u30bf\u30a4\u30c8\u30eb\u30ea\u30b9\u30c8\nDATA_PATH = './data/jawiki-latest-all-titles-in-ns0'\n\n\ndef create_index(title):\n    \"\"\"\n    Wikipedia\u306e\u30da\u30fc\u30b8\u306bHTTP\u30a2\u30af\u30bb\u30b9\u3057\u3066\n    \u6587\u7ae0\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\u3057\u3066\u3001\u691c\u7d22\u7528\u306e\u7d22\u5f15\u3092\u751f\u6210\u3059\u308b\n    \"\"\"\n    url = Storage.get_wikipedia_url(str(title))\n    print title, url\n\n    # Wikipedia\u306e\u30da\u30fc\u30b8\u306bHTTP\u30a2\u30af\u30bb\u30b9\u3057\u3066\u6587\u7ae0\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\n    tfidf = TFIDF.gen_web(url)\n\n    # \u691c\u7d22\u7528\u306e\u7d22\u5f15\u3092\u751f\u6210\u3059\u308b\n    s.save_tfidf(title, tfidf)\n    return\n\n\nprint 'start'\n\n# wikipedia\u5168\u30bf\u30a4\u30c8\u30eb\u30ea\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089URL\u3092\u751f\u6210\ns = Storage()\nf = open(DATA_PATH, 'r')\nct = 0\nfor title in f:\n    ct += 1\n    if ct < 0:\n        continue\n    try:\n        create_index(title)\n    except UnicodeDecodeError:\n        print \"ERROR\", title\n    except requests.exceptions.ConnectionError:\n        time.sleep(2)\n    except requests.exceptions.Timeout:\n        time.sleep(2)\n    except ssl.SSLError:\n        time.sleep(2)\n\n\n\n\nstorage.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport redis\nimport urllib\n\nPREFIX = 'tx'\nKEY_TITLE = '%s:TITLE:{}' % PREFIX\nKEY_INDEX_TITLE = '%s:INDEX:{}' % PREFIX\nKEY_R_INDEX_WORD = '%s:R_INDEX:{}' % PREFIX\n\n\nclass KeyMixin(object):\n    @classmethod\n    def get_key_title(cls, title):\n        title = urllib.quote_plus(title)\n        return KEY_TITLE.format(title)\n\n    @classmethod\n    def get_key_index(cls, title):\n        title = urllib.quote_plus(title)\n        return KEY_INDEX_TITLE.format(title)\n\n    @classmethod\n    def get_key_r_index(cls, word):\n        return KEY_R_INDEX_WORD.format(word)\n\n\nclass Storage(KeyMixin):\n    \"\"\"\n    \u30bf\u30a4\u30c8\u30eb\u6bce\u306eindex\u3068\u7279\u5fb4\u8a9e\u6bce\u306eindex\u3092redis\u306b\u4fdd\u5b58\u3059\u308b\n\n    title ... Wikipedia\u306e\u30bf\u30a4\u30c8\u30eb\n    word ... \u7279\u5fb4\u8a9e\n    \"\"\"\n\n    _cli = None\n    timeout = 60 * 60 * 24 * 30\n\n    @classmethod\n    def get_wikipedia_url(cls, title):\n        \"\"\"\n        title\u304b\u3089wikipedia\u306eURL\u3092\u751f\u6210\n        \"\"\"\n        _base_url = \"https://ja.wikipedia.org/wiki/{}\"\n        url = _base_url.format(urllib.quote_plus(title))\n        return url[:-3]\n\n    @property\n    def client(self):\n        \"\"\"\n        :rtype : Redis\n        \"\"\"\n        if Storage._cli is None:\n            Storage._cli = redis.Redis(host='localhost', port=6379, db=2)\n        return Storage._cli\n\n    def save_tfidf(self, title, tfidf):\n        self.set_index(title, tfidf)\n        self.set_r_index(title, tfidf)\n\n    def set_index(self, title, tfidf):\n        \"\"\"\n        title\u6bce\u306etfidf\n        title\u3092key\u3068\u3059\u308bZSET\u306btfidf\u5024\u3092\u4e0a\u66f8\u304d\n        \"\"\"\n        key = Storage.get_key_index(title)\n        self.client.delete(key)\n        for word, score in tfidf:\n            self.client.zadd(key, word, score)\n\n    def set_r_index(self, title, tfidf):\n        \"\"\"\n        \u6587\u5b57\u6bce\u306e\u9006\u7d22\u5f15\n        \u7279\u5fb4\u6587\u5b57\u5217(word)\u304b\u3089title\u3092\u9006\u5f15\u304d\u3067\u304d\u308b\u3002\n        \"\"\"\n        for word, score in tfidf:\n            key = Storage.get_key_r_index(word)\n            self.client.zadd(key, title, score)\n\n    def get_r_index(self, word):\n        \"\"\"\n        \u7279\u5fb4\u8a9e\u304b\u3089\u8a18\u4e8b\u3092\u9006\u5f15\u304d\u3059\u308b\u3002\n        \"\"\"\n        key = Storage.get_key_r_index(word)\n        return self.client.zrevrange(key, 0, 1000, withscores=True)\n\n\n\ntfidf.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom collections import defaultdict\nfrom math import sqrt\nimport re\nimport requests\nfrom bs4 import BeautifulSoup\nfrom janome.tokenizer import Tokenizer\nimport nltk\n\n\nclass TFIDF(object):\n    _t = None\n\n    @classmethod\n    def gen(cls, text, enable_one_char=False):\n        \"\"\"\n        Get TF-IDF\n        :param text: str\n        :rtype :list[list[str, float]]\n        \"\"\"\n        _text = cls.filter(text)\n        return cls.analysis(_text, enable_one_char=enable_one_char)\n\n    @classmethod\n    def gen_web(cls, url, enable_one_char=False):\n        \"\"\"\n        Get TF-IDF from url\n        :param url: str\n        :rtype: list[list[str, float]]\n        \"\"\"\n        # HTTP GET\n        response = requests.get(url, timeout=2)\n\n        # filter HTTP Tag\n        soup = BeautifulSoup(response.text, \"lxml\")\n        text = soup.title.name + soup.get_text()\n        return cls.gen(text, enable_one_char=enable_one_char)\n\n    @classmethod\n    def similarity(cls, tfidf1, tfidf2):\n        \"\"\"\n        Get TF-IDF and Cosine Similarity\n        cos\u03b8 = A\u30fbB/|A||B|\n        :param tfidf1: list[list[str, float]]\n        :param tfidf2: list[list[str, float]]\n        :rtype : float\n        \"\"\"\n        tfidf2_dict = {key: value for key, value in tfidf2}\n\n        ab = 0  # A\u30fbB\n        for key, value in tfidf1:\n            value2 = tfidf2_dict.get(key)\n            if value2:\n                ab += float(value * value2)\n\n        # |A| and |B|\n        a = sqrt(sum([v ** 2 for k, v in tfidf1]))\n        b = sqrt(sum([v ** 2 for k, v in tfidf2]))\n\n        return float(ab / (a * b))\n\n    @classmethod\n    def some_similarity(cls, base_url, data):\n        \"\"\"\n        :param base_url: str\n        :param data: list[lost[str, str]]\n        :rtype : list[lost[str, str, float]]\n        \"\"\"\n        base_tfidf = cls.gen_web(base_url)\n        return [[title, url, cls.similarity(base_tfidf, cls.gen_web(url))] for title, url in data]\n\n    @classmethod\n    def analysis(cls, text, enable_one_char):\n        \"\"\"\n        Calc TF-IDF\n        text\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u540d\u8a5e\u306e\u6570\u3092\u8fd4\u5374(Morphological Analysis)\n        :param text: str\n        :rtype : dict{str: int}\n        \"\"\"\n        result = defaultdict(int)\n        result2 = {}\n        count = 0\n        t = cls._get_tokenizer()\n\n        # \u5f62\u614b\u7d20\u89e3\u6790\n        # f_in = lambda x, y: x.encode('utf-8') in y.encode('utf-8')\n        # f_in = lambda x, y: x.decode('shift-jis') in y.decode('shift-jis')\n        f_in = lambda x, y: x in y\n\n        for token in t.tokenize(text):\n            if not f_in('\u540d\u8a5e', token.part_of_speech):\n                continue\n            count += 1\n\n            if f_in('\u975e\u81ea\u7acb', token.part_of_speech):\n                continue\n\n            if f_in('\u63a5\u5c3e', token.part_of_speech):\n                continue\n\n            if f_in('\u6570', token.part_of_speech):\n                continue\n\n            if not enable_one_char:\n                if len(token.surface) == 1:\n                    continue\n\n            result[token.surface] += 1\n            result2[token.surface] = token\n\n        # TF-IDF\u8a08\u7b97\n        result3 = []\n        for key in result:\n            result3.append([key, result[key]])\n\n        result3.sort(key=lambda x: x[1], reverse=True)\n        result4 = []\n        for r in result3[:100]:\n            # print r[0], float(float(r[1])/float(count)), result2[r[0]]\n            result4.append([r[0], float(float(r[1])/float(count))])\n        return result4\n\n    @classmethod\n    def filter(cls, text):\n        \"\"\"\n        text\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u3066\u30ce\u30a4\u30ba\u3092\u6392\u9664\u3059\u308b\n        :param text: str\n        :rtype : str\n        \"\"\"\n        # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u534a\u89d2\u82f1\u6570\u3068\u6539\u884c\u3068\u30bf\u30d6\u3092\u6392\u9664\n        text = re.sub(r'[a-zA-Z0-9\u00a5\"\u00a5.\u00a5,\u00a5@]+', '', text)\n        text = re.sub(r'[!\"\u201c#$%&()\\*\\+\\-\\.,\\/:;<=>?@\\[\\\\\\]^_`{|}~]', '', text)\n        text = re.sub(r'[\\n|\\r|\\t|\u5e74|\u6708|\u65e5]', '', text)\n\n        # \u65e5\u672c\u8a9e\u4ee5\u5916\u306e\u6587\u5b57\u3092\u6392\u9664(\u97d3\u56fd\u8a9e\u3068\u304b\u4e2d\u56fd\u8a9e\u3068\u304b\u30d8\u30d6\u30e9\u30a4\u8a9e\u3068\u304b)\n        jp_chartype_tokenizer = nltk.RegexpTokenizer(u'([\u3041-\u3093\u30fc]+|[\u30a1-\u30f3\u30fc]+|[\\u4e00-\\u9FFF]+|[\u3041-\u3093\u30a1-\u30f3\u30fc\\u4e00-\\u9FFF]+)')\n        text = \"\".join(jp_chartype_tokenizer.tokenize(text))\n        return text\n\n    @classmethod\n    def _get_tokenizer(cls):\n        if TFIDF._t is not None:\n            return TFIDF._t\n        TFIDF._t = Tokenizer()\n        return TFIDF._t\n\n\n\u25a0 data_import.py\u306e\u5b9f\u884c\u7d50\u679c\n\n\n\u691c\u7d22\u6a5f\u80fd\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nsearch.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom collections import defaultdict\nfrom tx.storage import Storage\nfrom tx.tfidf import TFIDF\n\n\nclass Search(object):\n    @classmethod\n    def search(cls, v, count=5):\n        \"\"\"\n        v\u306b\u95a2\u9023\u3059\u308bwikipedia\u30da\u30fc\u30b8\u3092\u691c\u7d22\u3059\u308b\n        \"\"\"\n        # v\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\n        tfidf = TFIDF.gen(v)\n        s = Storage()\n        result = defaultdict(float)\n        for search_word, search_score in tfidf:\n            # \u9006\u7d22\u5f15\u306b\u554f\u3044\u5408\u308f\u305b\u5b9f\u65bd\n            title_score_map = s.get_r_index(search_word)\n\n            for _title, _score in title_score_map:\n                # \u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u96c6\u8a08\n                result[_title] += search_score * _score\n\n        # \u985e\u4f3c\u5ea6score\u3067\u964d\u9806\u30bd\u30fc\u30c8\n        search_result = [(k, result[k]) for k in result]\n        search_result = sorted(search_result, key=lambda x: x[1], reverse=True)\n\n        if len(search_result) >= count:\n            return search_result[:count]\n        return search_result\n\n\ndef printer(l, keyword):\n    print \"++++++++++++++++++++++\"\n    print \"\u691c\u7d22\u7d50\u679c:{}\".format(keyword)\n    print \"++++++++++++++++++++++\"\n    count = 1\n    for title, score in l:\n        print \"- {}\u4f4d:\u985e\u4f3c\u5ea6:{}\".format(str(count).encode(\"utf-8\"), score)\n        print \"-\", title, Storage.get_wikipedia_url(title)\n\n        count += 1\n\n\ndef main():\n    v = \"\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\"\n    printer(Search.search(v), v)\n\n    v = \"\u5730\u57df\u578bJP\u30c9\u30e1\u30a4\u30f3\u540d\"\n    printer(Search.search(v), v)\n\n    v = \"\u30a2\u30d5\u30ea\u30ab\u4eba \u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3 \u7af6\u4e89\u7684\u8cc7\u672c\u4e3b\u7fa9\u4f53\u5236 \u968e\u7d1a\u95d8\u4e89\"\n    printer(Search.search(v), v)\n\nmain()\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n>>> python search.py\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.00787401574803\n- 2-\u30a2\u30c0\u30de\u30f3\u30bf\u30ce\u30f3\nhttps://ja.wikipedia.org/wiki/2-%E3%82%A2%E3%83%80%E3%83%9E%E3%83%B3%E3%82%BF%E3%83%8E%E3%83%B3\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.00654878847413\n- (R)-1-\u30a4\u30bd\u30c1\u30aa\u30b7\u30a2\u30ca\u30c8-4-(\u30e1\u30c1\u30eb\u30b9\u30eb\u30d5\u30a3\u30cb\u30eb)\u30d6\u30bf\u30f3\nhttps://ja.wikipedia.org/wiki/%28R%29-1-%E3%82%A4%E3%82%BD%E3%83%81%E3%82%AA%E3%82%B7%E3%82%A2%E3%83%8A%E3%83%88-4-%28%E3%83%A1%E3%83%81%E3%83%AB%E3%82%B9%E3%83%AB%E3%83%95%E3%82%A3%E3%83%8B%E3%83%AB%29%E3%83%96%E3%82%BF%E3%83%B3\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00507614213198\n- 2-\u30e8\u30fc\u30c9\u30ad\u30b7\u5b89\u606f\u9999\u9178\nhttps://ja.wikipedia.org/wiki/2-%E3%83%A8%E3%83%BC%E3%83%89%E3%82%AD%E3%82%B7%E5%AE%89%E6%81%AF%E9%A6%99%E9%85%B8\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00465313028765\n- \u30c8\u30ea\u30d6\u30c1\u30eb\u30b9\u30ba\u30aa\u30ad\u30b7\u30c9\nhttps://ja.wikipedia.org/wiki/%E3%83%88%E3%83%AA%E3%83%96%E3%83%81%E3%83%AB%E3%82%B9%E3%82%BA%E3%82%AA%E3%82%AD%E3%82%B7%E3%83%89\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.00440917107584\n- \u30a2\u30ce\u30ad\u30bd\u30de\u30fc\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%82%AD%E3%82%BD%E3%83%9E%E3%83%BC\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u5730\u57df\u578bJP\u30c9\u30e1\u30a4\u30f3\u540d\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.0217041800643\n- \u30a2\u30d3\u30c6\u30a3\u30d3\u30fb\u30c6\u30df\u30b9\u30ab\u30de\u30f3\u30b0\u5730\u57df\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%93%E3%83%86%E3%82%A3%E3%83%93%E3%83%BB%E3%83%86%E3%83%9F%E3%82%B9%E3%82%AB%E3%83%9E%E3%83%B3%E3%82%B0%E5%9C%B0%E5%9F%9F\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.0203389830508\n- .jp\nhttps://ja.wikipedia.org/wiki/.jp\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .shimane.jp\nhttps://ja.wikipedia.org/wiki/.shimane.jp\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .okinawa.jp\nhttps://ja.wikipedia.org/wiki/.okinawa.jp\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .chiba.jp\nhttps://ja.wikipedia.org/wiki/.chiba.jp\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u30a2\u30d5\u30ea\u30ab\u4eba \u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3 \u7af6\u4e89\u7684\u8cc7\u672c\u4e3b\u7fa9\u4f53\u5236 \u968e\u7d1a\u95d8\u4e89\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.017993795243\n- \u30a2\u30d5\u30ea\u30ab\u793e\u4f1a\u4e3b\u7fa9\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E7%A4%BE%E4%BC%9A%E4%B8%BB%E7%BE%A9\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.0109634551495\n- \u30a2\u30d5\u30ea\u30ab\u81ea\u7531\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E8%87%AA%E7%94%B1%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00844594594595\n- \u30a2\u30d5\u30ea\u30ab\u958b\u767a\u306e\u305f\u3081\u306e\u65b0\u30d1\u30fc\u30c8\u30ca\u30fc\u30b7\u30c3\u30d7\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%96%B0%E3%83%91%E3%83%BC%E3%83%88%E3%83%8A%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00833333333333\n- \u30a2\u30d5\u30ea\u30ab\u9023\u5408\u306e\u65d7\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E9%80%A3%E5%90%88%E3%81%AE%E6%97%97\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.008203125\n- \u30a2\u30d5\u30ea\u30ab\u4e2d\u592e\u9280\u884c\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E4%B8%AD%E5%A4%AE%E9%8A%80%E8%A1%8C\n\n\nRedis\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7dba\u9e97\u306b\u66f8\u3051\u308b\u3068\u6c17\u6301\u3061\u3044\u3044\u3002Wikipedia\u304b\u3089\u306e\u60c5\u5831\u53d6\u5f97\u306f\u3001DBPedia\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\nWikipedia\u3092\u691c\u7d22\u3059\u308b\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u691c\u7d22\u6587\u5b57\u5217\u3068\u5404\u8a18\u4e8b\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u3001\u985e\u4f3c\u5ea6\u9806\u306b\u691c\u7d22\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3067\u5168\u6587\u691c\u7d22\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\u9ad8\u901f\u306b\u691c\u7d22\u3059\u308b\u305f\u3081\u306b\u7d22\u5f15\u3068\u9006\u7d22\u5f15\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4ee5\u524d\u66f8\u3044\u305f[\u3010\u30ec\u30b3\u30e1\u30f3\u30c9\u3011\u5185\u5bb9\u30d9\u30fc\u30b9\u3068\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u9577\u6240\u3068\u77ed\u6240\u30fb\u5b9f\u88c5\u65b9\u6cd5\u307e\u3068\u3081](http://qiita.com/haminiku/items/f5008a57a870e0188f63)\u306e\u7d9a\u304d\u8a18\u4e8b\u3067\u3059\u3002\u5168\u6587\u691c\u7d22\u3092\u691c\u7d22\u6587\u5b57\u5217\u306b\u985e\u4f3c\u3059\u308b\u8a18\u4e8b\u3092\u30ec\u30b3\u30e1\u30f3\u30c9\u3059\u308b\u6a5f\u80fd\u3068\u8003\u3048\u308b\u3068\u3001\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306f\u5185\u5bb9\u30d9\u30fc\u30b9\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30ec\u30b3\u30e1\u30f3\u30c9\u30a8\u30f3\u30b8\u30f3\u3067\u3042\u308b\u3068\u8aad\u307f\u66ff\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u7279\u6027\n\u5168\u6587\u691c\u7d22\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308a\u307e\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u3068N-Gram\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n| |\u5f62\u614b\u7d20\u89e3\u6790  |N-gram  |\n|---|---|---|\n|\u30a4\u30f3\u30c7\u30af\u30b7\u30f3\u30b0\u901f\u5ea6  |\u9045\u3044  |\u901f\u3044  |\n|\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30b5\u30a4\u30ba  |\u5c0f\u3055\u3044  |\u5927\u304d\u3044  |\n|\u691c\u7d22\u30ce\u30a4\u30ba  |\u5c0f\u3055\u3044  |\u591a\u3044  |\n|\u691c\u7d22\u6f0f\u308c  |\u591a\u3044  |\u5c11\u306a\u3044  |\n|\u691c\u7d22\u901f\u5ea6  |\u901f\u3044  |\u9045\u3044  |\n|\u8a00\u8a9e\u4f9d\u5b58  |\u8f9e\u66f8\u304c\u5fc5\u8981  |\u8f9e\u66f8\u304c\u4e0d\u8981  |\n\u203b[Wikipedia:\u5168\u6587\u691c\u7d22](https://ja.wikipedia.org/wiki/%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2)\u304b\u3089\u5f15\u7528\n\n\u5224\u308a\u306b\u304f\u3044\u7b87\u6240\u306e\u307f\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u691c\u7d22\u6f0f\u308c\u3068\u8a00\u8a9e\u4f9d\u5b58\u3067\u8f9e\u66f8\u304c\u5fc5\u8981\u306a\u70b9\u306b\u3064\u3044\u3066\u3067\u3059\u3002\u5f62\u614b\u7d20\u89e3\u6790\u578b\u306e\u5168\u6587\u691c\u7d22\u306f\u8f9e\u66f8\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u300e\u6771\u4eac\u30b9\u30ab\u30a4\u30c4\u30ea\u30fc\u300f\u304c\u8f9e\u66f8\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u5f62\u614b\u7d20\u89e3\u6790\u3060\u3068\u300e\u6771\u4eac\u300f\u300e\u30b9\u30ab\u30a4\u300f\u300e\u30c4\u30ea\u30fc\u300f\u306e\u3088\u3046\u306b\u5206\u5272\u3057\u3066\u8a8d\u8b58\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7d50\u679c\u3068\u3057\u3066\u6771\u4eac\u306e\u30af\u30ea\u30b9\u30de\u30b9\u30c4\u30ea\u30fc\u3068\u3044\u3063\u305f\u610f\u56f3\u3057\u306a\u3044\u691c\u7d22\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u524d\u5f8c\u306e\u6587\u8108\u3092\u8a8d\u8b58\u3067\u304d\u306a\u3044\u70b9\u304c\u5f62\u614b\u7d20\u89e3\u6790\u578b\u5168\u6587\u691c\u7d22\u306e\u5f31\u70b9\u3067\u3059\u3002\n\n# \u5b8c\u6210\u54c1\u306e\u691c\u7d22\u7d50\u679c\n\n\u25a0 input1 \u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\noutput1 : \n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.00787401574803\n- [2-\u30a2\u30c0\u30de\u30f3\u30bf\u30ce\u30f3](https://ja.wikipedia.org/wiki/2-%E3%82%A2%E3%83%80%E3%83%9E%E3%83%B3%E3%82%BF%E3%83%8E%E3%83%B3)\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.00654878847413\n- [(R)-1-\u30a4\u30bd\u30c1\u30aa\u30b7\u30a2\u30ca\u30c8-4-(\u30e1\u30c1\u30eb\u30b9\u30eb\u30d5\u30a3\u30cb\u30eb)\u30d6\u30bf\u30f3](https://ja.wikipedia.org/wiki/%28R%29-1-%E3%82%A4%E3%82%BD%E3%83%81%E3%82%AA%E3%82%B7%E3%82%A2%E3%83%8A%E3%83%88-4-%28%E3%83%A1%E3%83%81%E3%83%AB%E3%82%B9%E3%83%AB%E3%83%95%E3%82%A3%E3%83%8B%E3%83%AB%29%E3%83%96%E3%82%BF%E3%83%B3)\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00507614213198\n- [2-\u30e8\u30fc\u30c9\u30ad\u30b7\u5b89\u606f\u9999\u9178](https://ja.wikipedia.org/wiki/2-%E3%83%A8%E3%83%BC%E3%83%89%E3%82%AD%E3%82%B7%E5%AE%89%E6%81%AF%E9%A6%99%E9%85%B8)\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00465313028765\n- [\u30c8\u30ea\u30d6\u30c1\u30eb\u30b9\u30ba\u30aa\u30ad\u30b7\u30c9](https://ja.wikipedia.org/wiki/%E3%83%88%E3%83%AA%E3%83%96%E3%83%81%E3%83%AB%E3%82%B9%E3%82%BA%E3%82%AA%E3%82%AD%E3%82%B7%E3%83%89)\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.00440917107584\n- [\u30a2\u30ce\u30ad\u30bd\u30de\u30fc](https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%82%AD%E3%82%BD%E3%83%9E%E3%83%BC)\n\n\n\n\n\n# \u5168\u6587\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u4ed5\u69d8\n\u65e5\u672c\u8a9e\u7248Wikipedia\u306e\u5168\u3066\u306e\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u89e3\u6790\u3059\u308b\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\u3068\u691c\u7d22\u6a5f\u80fd\u3092\u958b\u767a\u3057\u307e\u3059\u3002\n\n\u25a0 Wikipedia\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\u306e\u52d5\u4f5c\u30d5\u30ed\u30fc\n1. [Wikipedia\u306e\u5168\u30bf\u30a4\u30c8\u30eb\u3092\u683c\u7d0d\u3057\u305f\u30d5\u30a1\u30a4\u30eb-jawiki-latest-all-titles-in-ns0.gz](https://dumps.wikimedia.org/jawiki/latest/)\u304b\u3089\u8a18\u4e8b\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u53d6\u5f97\n2. \u30bf\u30a4\u30c8\u30eb\u304b\u3089Wikipedia\u306eURL\u3092\u751f\u6210\u3059\u308b\u3002\n3. URL\u306bHTTP GET\u3092\u5b9f\u65bd\u3057\u3066body\u90e8\u5206\u3092\u30e1\u30e2\u30ea\u4e0a\u306b\u5c55\u958b\u3059\u308b\u3002\n4. HTTP body\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bTF-IDF\u3092\u8a08\u7b97\u3059\u308b\u3002(TF-IDF\u306b\u3064\u3044\u3066\u306f[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/haminiku/items/f5008a57a870e0188f63)\u3092\u53c2\u7167\u3002)\n5. \u8a18\u4e8b\u6bce\u306e\u7d22\u5f15\u3068\u3001\u7279\u5fb4\u8a9e\u6bce\u306e\u7d22\u5f15\u3092Redis\u306b\u751f\u6210\u3059\u308b\u3002\n6. 1\u3078\u623b\u308b\u3002\n\n\u25a0 \u691c\u7d22\u6a5f\u80fd\u306e\u52d5\u4f5c\u30d5\u30ed\u30fc\n1. \u691c\u7d22\u6587\u5b57\u5217\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bTF-IDF\u3092\u8a08\u7b97\u3059\u308b\u3002\n2. \u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u69cb\u6210\u3059\u308b\u7279\u5fb4\u8a9e\u6bce\u306b\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\n3. \u7d22\u5f15\u30c7\u30fc\u30bf\u304b\u3089\u8a18\u4e8b\u6bce\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u7d50\u679c\u8868\u793a\u3059\u308b\u3002\n\n\n\u25a0 \u691c\u7d22\u6587\u5b57\u5217\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306e\u51fa\u529b\u4f8b\ninput1 : \u7d05\u767d\u6b4c\u5408\u6226\noutput1 : [[u'\u7d05\u767d', 0.5], [u'\u6b4c\u5408\u6226', 0.5]]\n\ninput2 : \u30cb\u30e5\u30fc\u30c8\u30ea\u30ce\u3092\u9664\u304f\u8cea\u91cf\u306e\u3042\u308b\u7c92\u5b50\u306e\u4e2d\u3067\u6700\u3082\u8efd\u3044\u7d20\u7c92\u5b50\noutput2 : [[u'\u30cb\u30e5\u30fc', 0.16666666666666666], [u'\u30c8\u30ea\u30ce', 0.16666666666666666], [u'\u7c92\u5b50', 0.16666666666666666], [u'\u7d20\u7c92\u5b50', 0.16666666666666666], [u'\u8cea\u91cf', 0.16666666666666666]]\n\n\n\u25a0 \u7d22\u5f15\u30c7\u30fc\u30bf\u304b\u3089\u985e\u4f3c\u5ea6\u8a08\u7b97\u4f8b\n\u691c\u7d22\u6587\u5b57\u5217\u300e\u7d05\u767d\u6b4c\u5408\u6226\u300f\u3068\u5404\u8a18\u4e8b\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002(`search.py`\u306e\u5b9f\u88c5\u8aad\u3093\u3060\u65b9\u304c\u901f\u3044\u304b\u3082)\n\nindex-data: \u300e\u7d05\u767d\u300f\u3067\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\n\n|title |value  |\n|---|---|\n|\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226|0.0226161369193|\n|MAESTRO-T|0.00769230769231|\n|\u30a8\u30ec\u30ad\u30b3\u30df\u30c3\u30af\u3068\u6298\u539f\u307f\u304b\u306e\u30ac\u30c4\u30ac\u30c4\u30db\u30fc\u30e0\u30e9\u30f3|0.00740740740741|\n\nindex-data: \u300e\u6b4c\u5408\u6226\u300f\u3067\u7279\u5fb4\u8a9e\u7d22\u5f15\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\n\n|title |value  |\n|---|---|\n|1996\u5e74\u306e\u30c6\u30ec\u30d3_(\u65e5\u672c)| 0.005555555555555556|\n|\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226|0.00105263157895|\n|2003\u5e74\u306e\u30c6\u30ec\u30d3_(\u65e5\u672c)|0.00100840336134|\n\n\u3053\u306e\u5834\u5408\u306e\u300e\u30a2\u30cb\u30e1\u7d05\u767d\u6b4c\u5408\u6226\u300f\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\u5f0f\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n0.5 * 0.0226161369193 + 0.5 * 0.00105263157895 = 0.011834384249125\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n[github - text_serarch_prototype](https://github.com/subc/text_serarch_prototype)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-22 23.29.20.png](https://qiita-image-store.s3.amazonaws.com/0/65312/2ee0a3af-24bc-04e0-68c5-a9a62c9469b4.png)\n\n\n## install\n\n```shell-session:install\neasy_install lxml\npip install beautifulsoup4\npip install janome\npip install nltk\npip install redis\n\n```\n\n\n## Wikipedia\u30c7\u30fc\u30bf\u53d6\u5f97\u30d0\u30c3\u30c1\n\n```py:data_import.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport ssl\nimport time\nfrom tx.storage import Storage\nimport requests\nfrom tx.tfidf import TFIDF\n\n# wikipedia \u5168\u30bf\u30a4\u30c8\u30eb\u30ea\u30b9\u30c8\nDATA_PATH = './data/jawiki-latest-all-titles-in-ns0'\n\n\ndef create_index(title):\n    \"\"\"\n    Wikipedia\u306e\u30da\u30fc\u30b8\u306bHTTP\u30a2\u30af\u30bb\u30b9\u3057\u3066\n    \u6587\u7ae0\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\u3057\u3066\u3001\u691c\u7d22\u7528\u306e\u7d22\u5f15\u3092\u751f\u6210\u3059\u308b\n    \"\"\"\n    url = Storage.get_wikipedia_url(str(title))\n    print title, url\n\n    # Wikipedia\u306e\u30da\u30fc\u30b8\u306bHTTP\u30a2\u30af\u30bb\u30b9\u3057\u3066\u6587\u7ae0\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\n    tfidf = TFIDF.gen_web(url)\n\n    # \u691c\u7d22\u7528\u306e\u7d22\u5f15\u3092\u751f\u6210\u3059\u308b\n    s.save_tfidf(title, tfidf)\n    return\n\n\nprint 'start'\n\n# wikipedia\u5168\u30bf\u30a4\u30c8\u30eb\u30ea\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089URL\u3092\u751f\u6210\ns = Storage()\nf = open(DATA_PATH, 'r')\nct = 0\nfor title in f:\n    ct += 1\n    if ct < 0:\n        continue\n    try:\n        create_index(title)\n    except UnicodeDecodeError:\n        print \"ERROR\", title\n    except requests.exceptions.ConnectionError:\n        time.sleep(2)\n    except requests.exceptions.Timeout:\n        time.sleep(2)\n    except ssl.SSLError:\n        time.sleep(2)\n\n```\n\n```py:storage.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport redis\nimport urllib\n\nPREFIX = 'tx'\nKEY_TITLE = '%s:TITLE:{}' % PREFIX\nKEY_INDEX_TITLE = '%s:INDEX:{}' % PREFIX\nKEY_R_INDEX_WORD = '%s:R_INDEX:{}' % PREFIX\n\n\nclass KeyMixin(object):\n    @classmethod\n    def get_key_title(cls, title):\n        title = urllib.quote_plus(title)\n        return KEY_TITLE.format(title)\n\n    @classmethod\n    def get_key_index(cls, title):\n        title = urllib.quote_plus(title)\n        return KEY_INDEX_TITLE.format(title)\n\n    @classmethod\n    def get_key_r_index(cls, word):\n        return KEY_R_INDEX_WORD.format(word)\n\n\nclass Storage(KeyMixin):\n    \"\"\"\n    \u30bf\u30a4\u30c8\u30eb\u6bce\u306eindex\u3068\u7279\u5fb4\u8a9e\u6bce\u306eindex\u3092redis\u306b\u4fdd\u5b58\u3059\u308b\n\n    title ... Wikipedia\u306e\u30bf\u30a4\u30c8\u30eb\n    word ... \u7279\u5fb4\u8a9e\n    \"\"\"\n\n    _cli = None\n    timeout = 60 * 60 * 24 * 30\n\n    @classmethod\n    def get_wikipedia_url(cls, title):\n        \"\"\"\n        title\u304b\u3089wikipedia\u306eURL\u3092\u751f\u6210\n        \"\"\"\n        _base_url = \"https://ja.wikipedia.org/wiki/{}\"\n        url = _base_url.format(urllib.quote_plus(title))\n        return url[:-3]\n\n    @property\n    def client(self):\n        \"\"\"\n        :rtype : Redis\n        \"\"\"\n        if Storage._cli is None:\n            Storage._cli = redis.Redis(host='localhost', port=6379, db=2)\n        return Storage._cli\n\n    def save_tfidf(self, title, tfidf):\n        self.set_index(title, tfidf)\n        self.set_r_index(title, tfidf)\n\n    def set_index(self, title, tfidf):\n        \"\"\"\n        title\u6bce\u306etfidf\n        title\u3092key\u3068\u3059\u308bZSET\u306btfidf\u5024\u3092\u4e0a\u66f8\u304d\n        \"\"\"\n        key = Storage.get_key_index(title)\n        self.client.delete(key)\n        for word, score in tfidf:\n            self.client.zadd(key, word, score)\n\n    def set_r_index(self, title, tfidf):\n        \"\"\"\n        \u6587\u5b57\u6bce\u306e\u9006\u7d22\u5f15\n        \u7279\u5fb4\u6587\u5b57\u5217(word)\u304b\u3089title\u3092\u9006\u5f15\u304d\u3067\u304d\u308b\u3002\n        \"\"\"\n        for word, score in tfidf:\n            key = Storage.get_key_r_index(word)\n            self.client.zadd(key, title, score)\n\n    def get_r_index(self, word):\n        \"\"\"\n        \u7279\u5fb4\u8a9e\u304b\u3089\u8a18\u4e8b\u3092\u9006\u5f15\u304d\u3059\u308b\u3002\n        \"\"\"\n        key = Storage.get_key_r_index(word)\n        return self.client.zrevrange(key, 0, 1000, withscores=True)\n```\n\n\n```py:tfidf.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom collections import defaultdict\nfrom math import sqrt\nimport re\nimport requests\nfrom bs4 import BeautifulSoup\nfrom janome.tokenizer import Tokenizer\nimport nltk\n\n\nclass TFIDF(object):\n    _t = None\n\n    @classmethod\n    def gen(cls, text, enable_one_char=False):\n        \"\"\"\n        Get TF-IDF\n        :param text: str\n        :rtype :list[list[str, float]]\n        \"\"\"\n        _text = cls.filter(text)\n        return cls.analysis(_text, enable_one_char=enable_one_char)\n\n    @classmethod\n    def gen_web(cls, url, enable_one_char=False):\n        \"\"\"\n        Get TF-IDF from url\n        :param url: str\n        :rtype: list[list[str, float]]\n        \"\"\"\n        # HTTP GET\n        response = requests.get(url, timeout=2)\n\n        # filter HTTP Tag\n        soup = BeautifulSoup(response.text, \"lxml\")\n        text = soup.title.name + soup.get_text()\n        return cls.gen(text, enable_one_char=enable_one_char)\n\n    @classmethod\n    def similarity(cls, tfidf1, tfidf2):\n        \"\"\"\n        Get TF-IDF and Cosine Similarity\n        cos\u03b8 = A\u30fbB/|A||B|\n        :param tfidf1: list[list[str, float]]\n        :param tfidf2: list[list[str, float]]\n        :rtype : float\n        \"\"\"\n        tfidf2_dict = {key: value for key, value in tfidf2}\n\n        ab = 0  # A\u30fbB\n        for key, value in tfidf1:\n            value2 = tfidf2_dict.get(key)\n            if value2:\n                ab += float(value * value2)\n\n        # |A| and |B|\n        a = sqrt(sum([v ** 2 for k, v in tfidf1]))\n        b = sqrt(sum([v ** 2 for k, v in tfidf2]))\n\n        return float(ab / (a * b))\n\n    @classmethod\n    def some_similarity(cls, base_url, data):\n        \"\"\"\n        :param base_url: str\n        :param data: list[lost[str, str]]\n        :rtype : list[lost[str, str, float]]\n        \"\"\"\n        base_tfidf = cls.gen_web(base_url)\n        return [[title, url, cls.similarity(base_tfidf, cls.gen_web(url))] for title, url in data]\n\n    @classmethod\n    def analysis(cls, text, enable_one_char):\n        \"\"\"\n        Calc TF-IDF\n        text\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u540d\u8a5e\u306e\u6570\u3092\u8fd4\u5374(Morphological Analysis)\n        :param text: str\n        :rtype : dict{str: int}\n        \"\"\"\n        result = defaultdict(int)\n        result2 = {}\n        count = 0\n        t = cls._get_tokenizer()\n\n        # \u5f62\u614b\u7d20\u89e3\u6790\n        # f_in = lambda x, y: x.encode('utf-8') in y.encode('utf-8')\n        # f_in = lambda x, y: x.decode('shift-jis') in y.decode('shift-jis')\n        f_in = lambda x, y: x in y\n\n        for token in t.tokenize(text):\n            if not f_in('\u540d\u8a5e', token.part_of_speech):\n                continue\n            count += 1\n\n            if f_in('\u975e\u81ea\u7acb', token.part_of_speech):\n                continue\n\n            if f_in('\u63a5\u5c3e', token.part_of_speech):\n                continue\n\n            if f_in('\u6570', token.part_of_speech):\n                continue\n\n            if not enable_one_char:\n                if len(token.surface) == 1:\n                    continue\n\n            result[token.surface] += 1\n            result2[token.surface] = token\n\n        # TF-IDF\u8a08\u7b97\n        result3 = []\n        for key in result:\n            result3.append([key, result[key]])\n\n        result3.sort(key=lambda x: x[1], reverse=True)\n        result4 = []\n        for r in result3[:100]:\n            # print r[0], float(float(r[1])/float(count)), result2[r[0]]\n            result4.append([r[0], float(float(r[1])/float(count))])\n        return result4\n\n    @classmethod\n    def filter(cls, text):\n        \"\"\"\n        text\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u3066\u30ce\u30a4\u30ba\u3092\u6392\u9664\u3059\u308b\n        :param text: str\n        :rtype : str\n        \"\"\"\n        # \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3068\u534a\u89d2\u82f1\u6570\u3068\u6539\u884c\u3068\u30bf\u30d6\u3092\u6392\u9664\n        text = re.sub(r'[a-zA-Z0-9\u00a5\"\u00a5.\u00a5,\u00a5@]+', '', text)\n        text = re.sub(r'[!\"\u201c#$%&()\\*\\+\\-\\.,\\/:;<=>?@\\[\\\\\\]^_`{|}~]', '', text)\n        text = re.sub(r'[\\n|\\r|\\t|\u5e74|\u6708|\u65e5]', '', text)\n\n        # \u65e5\u672c\u8a9e\u4ee5\u5916\u306e\u6587\u5b57\u3092\u6392\u9664(\u97d3\u56fd\u8a9e\u3068\u304b\u4e2d\u56fd\u8a9e\u3068\u304b\u30d8\u30d6\u30e9\u30a4\u8a9e\u3068\u304b)\n        jp_chartype_tokenizer = nltk.RegexpTokenizer(u'([\u3041-\u3093\u30fc]+|[\u30a1-\u30f3\u30fc]+|[\\u4e00-\\u9FFF]+|[\u3041-\u3093\u30a1-\u30f3\u30fc\\u4e00-\\u9FFF]+)')\n        text = \"\".join(jp_chartype_tokenizer.tokenize(text))\n        return text\n\n    @classmethod\n    def _get_tokenizer(cls):\n        if TFIDF._t is not None:\n            return TFIDF._t\n        TFIDF._t = Tokenizer()\n        return TFIDF._t\n```\n\n\u25a0 data_import.py\u306e\u5b9f\u884c\u7d50\u679c\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-22 23.32.15.png](https://qiita-image-store.s3.amazonaws.com/0/65312/475ef82f-6f94-c6c8-8515-037adc651d02.png)\n\n\n\n# \u691c\u7d22\u6a5f\u80fd\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```py:search.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom collections import defaultdict\nfrom tx.storage import Storage\nfrom tx.tfidf import TFIDF\n\n\nclass Search(object):\n    @classmethod\n    def search(cls, v, count=5):\n        \"\"\"\n        v\u306b\u95a2\u9023\u3059\u308bwikipedia\u30da\u30fc\u30b8\u3092\u691c\u7d22\u3059\u308b\n        \"\"\"\n        # v\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\n        tfidf = TFIDF.gen(v)\n        s = Storage()\n        result = defaultdict(float)\n        for search_word, search_score in tfidf:\n            # \u9006\u7d22\u5f15\u306b\u554f\u3044\u5408\u308f\u305b\u5b9f\u65bd\n            title_score_map = s.get_r_index(search_word)\n\n            for _title, _score in title_score_map:\n                # \u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u96c6\u8a08\n                result[_title] += search_score * _score\n\n        # \u985e\u4f3c\u5ea6score\u3067\u964d\u9806\u30bd\u30fc\u30c8\n        search_result = [(k, result[k]) for k in result]\n        search_result = sorted(search_result, key=lambda x: x[1], reverse=True)\n\n        if len(search_result) >= count:\n            return search_result[:count]\n        return search_result\n\n\ndef printer(l, keyword):\n    print \"++++++++++++++++++++++\"\n    print \"\u691c\u7d22\u7d50\u679c:{}\".format(keyword)\n    print \"++++++++++++++++++++++\"\n    count = 1\n    for title, score in l:\n        print \"- {}\u4f4d:\u985e\u4f3c\u5ea6:{}\".format(str(count).encode(\"utf-8\"), score)\n        print \"-\", title, Storage.get_wikipedia_url(title)\n\n        count += 1\n\n\ndef main():\n    v = \"\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\"\n    printer(Search.search(v), v)\n\n    v = \"\u5730\u57df\u578bJP\u30c9\u30e1\u30a4\u30f3\u540d\"\n    printer(Search.search(v), v)\n\n    v = \"\u30a2\u30d5\u30ea\u30ab\u4eba \u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3 \u7af6\u4e89\u7684\u8cc7\u672c\u4e3b\u7fa9\u4f53\u5236 \u968e\u7d1a\u95d8\u4e89\"\n    printer(Search.search(v), v)\n\nmain()\n\n```\n\n```py:\u5b9f\u884c\u7d50\u679c\n>>> python search.py\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u4f53\u306e\u6297\u9178\u5316\u529b\u3084\u89e3\u6bd2\u529b\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.00787401574803\n- 2-\u30a2\u30c0\u30de\u30f3\u30bf\u30ce\u30f3\nhttps://ja.wikipedia.org/wiki/2-%E3%82%A2%E3%83%80%E3%83%9E%E3%83%B3%E3%82%BF%E3%83%8E%E3%83%B3\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.00654878847413\n- (R)-1-\u30a4\u30bd\u30c1\u30aa\u30b7\u30a2\u30ca\u30c8-4-(\u30e1\u30c1\u30eb\u30b9\u30eb\u30d5\u30a3\u30cb\u30eb)\u30d6\u30bf\u30f3\nhttps://ja.wikipedia.org/wiki/%28R%29-1-%E3%82%A4%E3%82%BD%E3%83%81%E3%82%AA%E3%82%B7%E3%82%A2%E3%83%8A%E3%83%88-4-%28%E3%83%A1%E3%83%81%E3%83%AB%E3%82%B9%E3%83%AB%E3%83%95%E3%82%A3%E3%83%8B%E3%83%AB%29%E3%83%96%E3%82%BF%E3%83%B3\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00507614213198\n- 2-\u30e8\u30fc\u30c9\u30ad\u30b7\u5b89\u606f\u9999\u9178\nhttps://ja.wikipedia.org/wiki/2-%E3%83%A8%E3%83%BC%E3%83%89%E3%82%AD%E3%82%B7%E5%AE%89%E6%81%AF%E9%A6%99%E9%85%B8\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00465313028765\n- \u30c8\u30ea\u30d6\u30c1\u30eb\u30b9\u30ba\u30aa\u30ad\u30b7\u30c9\nhttps://ja.wikipedia.org/wiki/%E3%83%88%E3%83%AA%E3%83%96%E3%83%81%E3%83%AB%E3%82%B9%E3%82%BA%E3%82%AA%E3%82%AD%E3%82%B7%E3%83%89\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.00440917107584\n- \u30a2\u30ce\u30ad\u30bd\u30de\u30fc\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%82%AD%E3%82%BD%E3%83%9E%E3%83%BC\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u5730\u57df\u578bJP\u30c9\u30e1\u30a4\u30f3\u540d\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.0217041800643\n- \u30a2\u30d3\u30c6\u30a3\u30d3\u30fb\u30c6\u30df\u30b9\u30ab\u30de\u30f3\u30b0\u5730\u57df\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%93%E3%83%86%E3%82%A3%E3%83%93%E3%83%BB%E3%83%86%E3%83%9F%E3%82%B9%E3%82%AB%E3%83%9E%E3%83%B3%E3%82%B0%E5%9C%B0%E5%9F%9F\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.0203389830508\n- .jp\nhttps://ja.wikipedia.org/wiki/.jp\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .shimane.jp\nhttps://ja.wikipedia.org/wiki/.shimane.jp\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .okinawa.jp\nhttps://ja.wikipedia.org/wiki/.okinawa.jp\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.0203217612193\n- .chiba.jp\nhttps://ja.wikipedia.org/wiki/.chiba.jp\n++++++++++++++++++++++\n\u691c\u7d22\u7d50\u679c:\u30a2\u30d5\u30ea\u30ab\u4eba \u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3 \u7af6\u4e89\u7684\u8cc7\u672c\u4e3b\u7fa9\u4f53\u5236 \u968e\u7d1a\u95d8\u4e89\n++++++++++++++++++++++\n- 1\u4f4d:\u985e\u4f3c\u5ea6:0.017993795243\n- \u30a2\u30d5\u30ea\u30ab\u793e\u4f1a\u4e3b\u7fa9\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E7%A4%BE%E4%BC%9A%E4%B8%BB%E7%BE%A9\n- 2\u4f4d:\u985e\u4f3c\u5ea6:0.0109634551495\n- \u30a2\u30d5\u30ea\u30ab\u81ea\u7531\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E8%87%AA%E7%94%B1%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF\n- 3\u4f4d:\u985e\u4f3c\u5ea6:0.00844594594595\n- \u30a2\u30d5\u30ea\u30ab\u958b\u767a\u306e\u305f\u3081\u306e\u65b0\u30d1\u30fc\u30c8\u30ca\u30fc\u30b7\u30c3\u30d7\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%96%B0%E3%83%91%E3%83%BC%E3%83%88%E3%83%8A%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97\n- 4\u4f4d:\u985e\u4f3c\u5ea6:0.00833333333333\n- \u30a2\u30d5\u30ea\u30ab\u9023\u5408\u306e\u65d7\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E9%80%A3%E5%90%88%E3%81%AE%E6%97%97\n- 5\u4f4d:\u985e\u4f3c\u5ea6:0.008203125\n- \u30a2\u30d5\u30ea\u30ab\u4e2d\u592e\u9280\u884c\nhttps://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%95%E3%83%AA%E3%82%AB%E4%B8%AD%E5%A4%AE%E9%8A%80%E8%A1%8C\n```\n\nRedis\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7dba\u9e97\u306b\u66f8\u3051\u308b\u3068\u6c17\u6301\u3061\u3044\u3044\u3002Wikipedia\u304b\u3089\u306e\u60c5\u5831\u53d6\u5f97\u306f\u3001[DBPedia\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5](http://qiita.com/pika_shi/items/eb56fc205e2d670062ae)\u3082\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n", "tags": ["Python", "\u30ec\u30b3\u30e1\u30f3\u30c9", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u6a5f\u68b0\u5b66\u7fd2", "\u691c\u7d22"]}