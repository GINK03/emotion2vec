{"context": "\n\n\u767a\u7aef\n\uff1f\uff1f\uff1f\u300ccompsoer\u3063\u3066\u65e2\u306b334\u56de\u306f\u6253\u3063\u305f\u3057\u3044\u3044\u52a0\u6e1b\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u3057\u3066\u3084\u308b\u300d\n\uff1f\uff1f\uff1f\u300c\u3069\u3046\u305b\u306a\u3089\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u4f7f\u3063\u3066\u4f3c\u305f\u3082\u306e\u5168\u90e8\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u3057\u3088\u3046\u305c\uff1f\u300d\n\n\u4efb\u610f\u306e\u6587\u5b57\u96c6\u5408\u304b\u3089\u6210\u308bM\u6841\u306eN\u9032\u6570\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u751f\u6210\u3059\u308b - Qiita\n[\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc] \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u3092\u6c42\u3081\u308b - Qiita\n\n\u904e\u53bb\u306b\u3053\u3093\u306a\u306e\u66f8\u3044\u305f\u3051\u3069\uff0c\u3053\u3044\u3064\u3089\u306f\u6587\u5b57\u306e\u5165\u308c\u66ff\u308f\u308a\u5bfe\u5fdc\u3068\u304b\u6587\u5b57\u7a2e\u3054\u3068\u306e\u91cd\u307f\u4ed8\u304d\u3068\u304b\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u56f0\u3063\u3066\u3044\u305f\u3002\u305d\u306e\u5f8c\uff0c\u3053\u3093\u306a\u6539\u826f\u7248\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308b\u3002\n\nDamerau\u2013Levenshtein distance - Wikipedia\n\n\n\u4f5c\u62261: composer\u3063\u307d\u3044\u3082\u306e\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4f5c\u308b\nPHP\u3060\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u304b\u3063\u305f\u3051\u3069Python\u3060\u3063\u305f\u3089\u3042\u3063\u305f\u3002\u3057\u304b\u3057Python 2\u3002\u59a5\u5354\u3002\n\ninfoscout/weighted-levenshtein: Weighted Levenshtein library\n\n\u4f55\u56de\u304b\u8a66\u3057\u3066\u3044\u3044\u7d50\u679c\u304c\u51fa\u308b\u3088\u3046\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\nPython 2.7\nimport numpy as np\nfrom weighted_levenshtein import dam_lev\nfrom itertools import permutations\n\ninsert_costs = np.ones(128, dtype=np.float64)\ninsert_costs[ord('c')] = 334\ninsert_costs[ord('r')] = 334\n\ndelete_costs = np.ones(128, dtype=np.float64)\ndelete_costs[ord('c')] = 334\ndelete_costs[ord('r')] = 334\n\nsubstitute_costs = np.ones((128, 128), dtype=np.float64)\nsubstitute_costs[ord('c'), :] = 334\nsubstitute_costs[:, ord('r')] = 334\n\ntranspose_costs = np.ones((128, 128), dtype=np.float64) * 0.75\ntranspose_costs[ord('c'), :] = 334\ntranspose_costs[:, ord('c')] = 334\n\nresults = []\nfor i in xrange(7, 9):\n    for chars in permutations('composer', i):\n        cmd = ''.join(chars)\n        if dam_lev(cmd, 'composer',\n            insert_costs=insert_costs,\n            delete_costs=delete_costs,\n            substitute_costs=substitute_costs,\n            transpose_costs=transpose_costs\n        ) < 2 and cmd != 'composer':\n            results.append(cmd)\n\nfor result in results:\n    print \"alias %s=composer\" % result\n\n\n\n\u7d50\u679c (~/.zshrc \u306b\u8ffd\u8a18)\nalias composr=composer\nalias compoer=composer\nalias compors=composer\nalias compore=composer\nalias compsor=composer\nalias compser=composer\nalias compsre=composer\nalias compeor=composer\nalias compesr=composer\nalias comopsr=composer\nalias comoper=composer\nalias comoser=composer\nalias comosre=composer\nalias comoesr=composer\nalias comsper=composer\nalias comsoer=composer\nalias copmosr=composer\nalias copmoer=composer\nalias copmser=composer\nalias coposer=composer\nalias coposre=composer\nalias copoesr=composer\nalias copsoer=composer\nalias coomser=composer\nalias coopser=composer\nalias cmoposr=composer\nalias cmopoer=composer\nalias cmopser=composer\nalias cmooser=composer\nalias cmposer=composer\nalias cmposre=composer\nalias cmpoesr=composer\nalias cmposer=composer\nalias cmposre=composer\nalias cmpoesr=composer\nalias cmpsoer=composer\nalias cmpsoer=composer\nalias cmooser=composer\nalias cmoposr=composer\nalias cmopoer=composer\nalias cmopser=composer\nalias cpooser=composer\nalias cpmoser=composer\nalias cpmoser=composer\nalias cpooser=composer\nalias coomser=composer\nalias coopser=composer\nalias comopsr=composer\nalias comoper=composer\nalias comoser=composer\nalias comosre=composer\nalias comoesr=composer\nalias composr=composer\nalias compoer=composer\nalias compors=composer\nalias compore=composer\nalias compsor=composer\nalias compser=composer\nalias compsre=composer\nalias compeor=composer\nalias compesr=composer\nalias comsoer=composer\nalias comsper=composer\nalias coposer=composer\nalias coposre=composer\nalias copoesr=composer\nalias copmosr=composer\nalias copmoer=composer\nalias copmser=composer\nalias copsoer=composer\nalias composre=composer\nalias compoesr=composer\nalias compsoer=composer\nalias compsore=composer\nalias comopser=composer\nalias comopsre=composer\nalias comopesr=composer\nalias copmoser=composer\nalias copmosre=composer\nalias copmoesr=composer\nalias copmsoer=composer\nalias cmoposer=composer\nalias cmoposre=composer\nalias cmopoesr=composer\nalias cmopsoer=composer\nalias cmoopser=composer\nalias cmoopser=composer\nalias cmoposer=composer\nalias cmoposre=composer\nalias cmopoesr=composer\nalias cmopsoer=composer\nalias comopser=composer\nalias comopsre=composer\nalias comopesr=composer\nalias composre=composer\nalias compoesr=composer\nalias compsoer=composer\nalias compsore=composer\nalias copmoser=composer\nalias copmosre=composer\nalias copmoesr=composer\nalias copmsoer=composer\n\n\n\u3053\u308c\u3067\u5b89\u5fc3\u3060\u30be\u30a6\ud83d\udc18\n\n\u4f5c\u62262: Python + command_not_found_handler\n\n(\u4f5c\u62261\u3092\u6295\u4e0b\u3057\u3066\u6570\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u3053\u308d\u2026)\n\n\n\n\u77e5\u3000\u3063\u3000\u3066\u3000\u305f\n\u2193\n\u3069\u3046\u305b\u306a\u3089\u6c4e\u7528\u5316\u3057\u3066\u3084\u308b\uff01\uff01\uff01\n\u2193\nzsh \u3067 method_missing \u3063\u307d\u3044\u3053\u3068\u3092\u3059\u308b\u306b\u306f command_not_found_handler - mollifier delta blog \u3092\u767a\u898b\n\u2193\n\u81ea\u524d\u3067\u5b9f\u88c5\n\nZsh (pyenv\u304a\u3088\u3073\u5404\u7a2e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u524d\u63d0\uff0c~/.zshrc \u306b\u8ffd\u8a18)\ncommand_not_found_handler() {\n\n    local code='\nimport sys\nimport commands\nimport numpy as np\nfrom weighted_levenshtein import dam_lev\n\ninsert_costs = np.ones(128, dtype=np.float64)\ndelete_costs = np.ones(128, dtype=np.float64)\nsubstitute_costs = np.ones((128, 128), dtype=np.float64)\ntranspose_costs = np.ones((128, 128), dtype=np.float64) * 0.75\nmin_length = 5\nmin_similarity = 0.6\n\nactual = sys.argv[1]\nresults = {}\n\nif actual.startswith(\"_\"):\n    sys.exit(1)\n\nfor expected in sys.stdin:\n    if len(expected) < min_length or expected.startswith(\"_\"):\n        continue\n    result = 1.0 - dam_lev(actual, expected,\n        insert_costs=insert_costs,\n        delete_costs=delete_costs,\n        substitute_costs=substitute_costs,\n        transpose_costs=transpose_costs\n    ) / max(len(actual), len(expected))\n    if (result >= min_similarity):\n        results[result] = expected\n\nif not results:\n    sys.exit(1)\n\nprint results[max(results)]\n'\n\n    local ___result\n    ___result=$(\n        print -l ${(ok)functions} ${(ok)aliases} ${(ok)commands} ${(ok)builtins} |\n        python2.7 -c $code $0\n    )\n\n    if [[ $? == 0 ]]; then\n        printf %s \"Do you mean '$___result' ? [y/n]: \"\n        local answer\n        read answer\n        if [[ $answer == y || $answer == Y ]]; then\n            als=$(alias $___result)\n            if [[ $? == 0 ]]; then\n                eval local $als\n            fi\n            shift\n            eval $___result ${(q)@}\n            return \n        fi\n    fi\n\n    return 127\n\n}\n\n\n\u4e00\u5fdc\u52d5\u304f\u3093\u3067\u3059\u304c\uff0c\u82e5\u5e72\u9045\u3081\u306a\u306e\u304c\u96e3\u70b9\u3002\n\n\u4f5c\u62263: Zsh\u306e\u81ea\u52d5\u88dc\u6b63\u6a5f\u80fd\u3092\u4f7f\u3046\n\u3053\u3093\u306a\u30a2\u30db\u306a\u3053\u3068\u3057\u306a\u304f\u3066\u3082\uff0czsh\u306b\u306f\u81ea\u52d5\u88dc\u6b63\u6a5f\u80fd\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\nmpyw@localhost:~$ setopt correct\nmpyw@localhost:~$ compseor -V\nzsh: correct 'compseor' to 'composer' [nyae]? y\nComposer version 1.2.1 2016-09-12 11:27:19\nmpyw@localhost:~$ \n\n\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u3082\u309b\u3063\u309b\u3068\u309b\u65e9\u309b\u304f\u309b\u77e5\u309b\u308a\u309b\u305f\u309b\u304b\u309b\u3063\u309b\u305f\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\n(generated by \u963f\u9f3b\u53eb\u559a\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc)\n\n\u4f5c\u62264: C + command_not_found_handler\n\n\u610f\u5916\u306b\u3082\u4f5c\u62263\u306e\u7cbe\u5ea6\u304c\u30a4\u30de\u30a4\u30c1\u3060\u3063\u305f\u306e\u3068\uff0c\u4f5c\u62262\u306e\u52d5\u4f5c\u901f\u5ea6\u304c\u9045\u3044\u3053\u3068\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\uff0c\u3053\u308c\u3092\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3002\n\nc > link > Damerau\u2013Levenshtein distance > 4\u3064\u306e\u64cd\u4f5c\u306bcost\u306e\u7de9\u6025\u3092\u3064\u3051\u308b (sWap, Substitution, insertion, Deletion) - Qiita\n\n\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3057\u3066\u3044\u305f\u3060\u3044\u305f\u3082\u306e\u3092\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3057\u307e\u3057\u305f\u3002\u5b9f\u7528\u7684\u306b\u306a\u3063\u305f\u306e\u3067GitHub\u306b\u3082\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\nmpyw/most-similar: Search most similar word from stdin.\n\n\nC (/usr/local/bin/most-similar \u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u7f6e\u3044\u3066\u304a\u304f)\n#define BUFSIZE 512\n\n#include <stdio.h>\n#include <strings.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n/*\n * This implementation allows the costs to be weighted:\n *\n * - w (as in \"sWap\")\n * - s (as in \"Substitution\")\n * - a (for insertion, AKA \"Add\")\n * - d (as in \"Deletion\")\n *\n */\ndouble calc_similarity(const char *string1, const char *string2)\n{\n    int len1 = strlen(string1),\n        len2 = strlen(string2);\n    double w = 0.75, s = 1, a = 1, d = 1,\n           *row0 = (double *)&(double[BUFSIZE]){},\n           *row1 = (double *)&(double[BUFSIZE]){},\n           *row2 = (double *)&(double[BUFSIZE]){};\n\n    for (int j = 0; j <= len2; ++j) {\n        row1[j] = j * a;\n    }\n\n    for (int i = 0; i < len1; ++i) {\n        row2[0] = (i + 1) * d;\n        for (int j = 0; j < len2; ++j) {\n            /* substitution */\n            row2[j + 1] = row1[j] + s * (string1[i] != string2[j]);\n            /* swap */\n            if (i > 0 && j > 0 &&\n                    string1[i - 1] == string2[j] &&\n                    string1[i] == string2[j - 1] &&\n                    row2[j + 1] > row0[j - 1] + w) {\n                row2[j + 1] = row0[j - 1] + w;\n            }\n            /* deletion */\n            if (row2[j + 1] > row1[j + 1] + d) {\n                row2[j + 1] = row1[j + 1] + d;\n            }\n            /* insertion */\n            if (row2[j + 1] > row2[j] + a) {\n                row2[j + 1] = row2[j] + a;\n            }\n        }\n        double *dummy = row0;\n        row0 = row1;\n        row1 = row2;\n        row2 = dummy;\n    }\n\n    return 1.0 - row1[len2] / (len1 > len2 ? len1 : len2);\n}\n\nint readline(char *buffer)\n{\n    int length;\n    fgets(buffer, BUFSIZE, stdin);\n    if (ferror(stdin) || feof(stdin)) {\n        return -1;\n    }\n    length = strlen(buffer);\n    if (length && buffer[length - 1] == '\\n') {\n        buffer[--length] = '\\0';\n    }\n    return length;\n}\n\nint main(int argc, char *argv[])\n{\n    int opt, min_length = 1, length = 0;\n    double min_similarlity = 0.0, similarlity = 0.0;\n    char input[BUFSIZE] = {'\\0'}, comparison[BUFSIZE] = {'\\0'}, similitude[BUFSIZE] = {'\\0'};\n\n    while ((opt = getopt(argc, argv, \"i:l:s:h\")) != -1) {\n        switch (opt) {\n            case 'i':\n                strncpy(input, optarg, BUFSIZE - 1);\n                break;\n            case 'l':\n                min_length = atoi(optarg);\n                break;\n            case 's':\n                min_similarlity = atof(optarg);\n                break;\n            case 'h':\n            default:\n                fprintf(stderr, \"Usage: %s -i input < comparisons (Splitted by \\\"\\\\n\\\")\\n\", argv[0]);\n                fprintf(stderr, \"  [-l min_length=1] [-s min_similarlity=0.0]\\n\");\n                return opt != 'h';\n        }\n    }\n\n    if (!*input) {\n        fputs(\"No input specified\\n\", stderr);\n        return 1;\n    }\n    if (*input == '_') {\n        return 1;\n    }\n\n    similarlity = min_similarlity;\n\n    while ((length = readline(comparison)) > -1) {\n        if (length < min_length || length < 1 || *comparison == '_') {\n            continue;\n        }\n        double s = calc_similarity(input, comparison);\n        if (s < similarlity) {\n            continue;\n        }\n        similarlity = s;\n        strncpy(similitude, comparison, BUFSIZE - 1);\n        if (s == 1.0) {\n            break;\n        }\n    }\n\n    if (*similitude == '\\0') {\n        return 1;\n    }\n\n    puts(similitude);\n    return 0;\n}\n\n\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03\n\u4f5c\u62262\uff0c\u4f5c\u62263\uff0c\u4f5c\u62264\u306e\u9806\u756a\u3067\u3059\u3002\n\n\n\n0.15\u79d2\u30680.23\u79d2\u306e\u9055\u3044\u306f\u308f\u308a\u3068\u3067\u304b\u3044\u30be\n# \u767a\u7aef\n\n\uff1f\uff1f\uff1f\u300c`compsoer`\u3063\u3066\u65e2\u306b334\u56de\u306f\u6253\u3063\u305f\u3057\u3044\u3044\u52a0\u6e1b\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u3057\u3066\u3084\u308b:anger:\u300d\n\uff1f\uff1f\uff1f\u300c\u3069\u3046\u305b\u306a\u3089\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u4f7f\u3063\u3066\u4f3c\u305f\u3082\u306e\u5168\u90e8\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u3057\u3088\u3046\u305c\uff1f\u300d\n\n- [\u4efb\u610f\u306e\u6587\u5b57\u96c6\u5408\u304b\u3089\u6210\u308bM\u6841\u306eN\u9032\u6570\u3092\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u751f\u6210\u3059\u308b - Qiita](http://qiita.com/mpyw/items/2acb85f59076e0298f58)\n- [[\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u5bfe\u5fdc] \u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u3092\u6c42\u3081\u308b - Qiita](http://qiita.com/mpyw/items/2b636827730e06c71e3d)\n\n\u904e\u53bb\u306b\u3053\u3093\u306a\u306e\u66f8\u3044\u305f\u3051\u3069\uff0c\u3053\u3044\u3064\u3089\u306f**\u6587\u5b57\u306e\u5165\u308c\u66ff\u308f\u308a\u5bfe\u5fdc**\u3068\u304b**\u6587\u5b57\u7a2e\u3054\u3068\u306e\u91cd\u307f\u4ed8\u304d**\u3068\u304b\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u56f0\u3063\u3066\u3044\u305f\u3002\u305d\u306e\u5f8c\uff0c\u3053\u3093\u306a\u6539\u826f\u7248\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308b\u3002\n\n- [Damerau\u2013Levenshtein distance - Wikipedia](https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)\n\n# \u4f5c\u62261: `composer`\u3063\u307d\u3044\u3082\u306e\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4f5c\u308b\n\nPHP\u3060\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7121\u304b\u3063\u305f\u3051\u3069Python\u3060\u3063\u305f\u3089\u3042\u3063\u305f\u3002\u3057\u304b\u3057Python 2\u3002\u59a5\u5354\u3002\n\n- [infoscout/weighted-levenshtein: Weighted Levenshtein library](https://github.com/infoscout/weighted-levenshtein)\n\n\u4f55\u56de\u304b\u8a66\u3057\u3066\u3044\u3044\u7d50\u679c\u304c\u51fa\u308b\u3088\u3046\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\n```py:Python&#32;2.7\nimport numpy as np\nfrom weighted_levenshtein import dam_lev\nfrom itertools import permutations\n\ninsert_costs = np.ones(128, dtype=np.float64)\ninsert_costs[ord('c')] = 334\ninsert_costs[ord('r')] = 334\n\ndelete_costs = np.ones(128, dtype=np.float64)\ndelete_costs[ord('c')] = 334\ndelete_costs[ord('r')] = 334\n\nsubstitute_costs = np.ones((128, 128), dtype=np.float64)\nsubstitute_costs[ord('c'), :] = 334\nsubstitute_costs[:, ord('r')] = 334\n\ntranspose_costs = np.ones((128, 128), dtype=np.float64) * 0.75\ntranspose_costs[ord('c'), :] = 334\ntranspose_costs[:, ord('c')] = 334\n\nresults = []\nfor i in xrange(7, 9):\n    for chars in permutations('composer', i):\n        cmd = ''.join(chars)\n        if dam_lev(cmd, 'composer',\n            insert_costs=insert_costs,\n            delete_costs=delete_costs,\n            substitute_costs=substitute_costs,\n            transpose_costs=transpose_costs\n        ) < 2 and cmd != 'composer':\n            results.append(cmd)\n\nfor result in results:\n    print \"alias %s=composer\" % result\n```\n\n```bash:\u7d50\u679c&#32;(~/.zshrc&#32;\u306b\u8ffd\u8a18)\nalias composr=composer\nalias compoer=composer\nalias compors=composer\nalias compore=composer\nalias compsor=composer\nalias compser=composer\nalias compsre=composer\nalias compeor=composer\nalias compesr=composer\nalias comopsr=composer\nalias comoper=composer\nalias comoser=composer\nalias comosre=composer\nalias comoesr=composer\nalias comsper=composer\nalias comsoer=composer\nalias copmosr=composer\nalias copmoer=composer\nalias copmser=composer\nalias coposer=composer\nalias coposre=composer\nalias copoesr=composer\nalias copsoer=composer\nalias coomser=composer\nalias coopser=composer\nalias cmoposr=composer\nalias cmopoer=composer\nalias cmopser=composer\nalias cmooser=composer\nalias cmposer=composer\nalias cmposre=composer\nalias cmpoesr=composer\nalias cmposer=composer\nalias cmposre=composer\nalias cmpoesr=composer\nalias cmpsoer=composer\nalias cmpsoer=composer\nalias cmooser=composer\nalias cmoposr=composer\nalias cmopoer=composer\nalias cmopser=composer\nalias cpooser=composer\nalias cpmoser=composer\nalias cpmoser=composer\nalias cpooser=composer\nalias coomser=composer\nalias coopser=composer\nalias comopsr=composer\nalias comoper=composer\nalias comoser=composer\nalias comosre=composer\nalias comoesr=composer\nalias composr=composer\nalias compoer=composer\nalias compors=composer\nalias compore=composer\nalias compsor=composer\nalias compser=composer\nalias compsre=composer\nalias compeor=composer\nalias compesr=composer\nalias comsoer=composer\nalias comsper=composer\nalias coposer=composer\nalias coposre=composer\nalias copoesr=composer\nalias copmosr=composer\nalias copmoer=composer\nalias copmser=composer\nalias copsoer=composer\nalias composre=composer\nalias compoesr=composer\nalias compsoer=composer\nalias compsore=composer\nalias comopser=composer\nalias comopsre=composer\nalias comopesr=composer\nalias copmoser=composer\nalias copmosre=composer\nalias copmoesr=composer\nalias copmsoer=composer\nalias cmoposer=composer\nalias cmoposre=composer\nalias cmopoesr=composer\nalias cmopsoer=composer\nalias cmoopser=composer\nalias cmoopser=composer\nalias cmoposer=composer\nalias cmoposre=composer\nalias cmopoesr=composer\nalias cmopsoer=composer\nalias comopser=composer\nalias comopsre=composer\nalias comopesr=composer\nalias composre=composer\nalias compoesr=composer\nalias compsoer=composer\nalias compsore=composer\nalias copmoser=composer\nalias copmosre=composer\nalias copmoesr=composer\nalias copmsoer=composer\n```\n\n\u3053\u308c\u3067\u5b89\u5fc3\u3060\u30be\u30a6\ud83d\udc18\n\n# \u4f5c\u62262: Python + `command_not_found_handler`\n\n(\u4f5c\u62261\u3092\u6295\u4e0b\u3057\u3066\u6570\u6642\u9593\u304c\u7d4c\u904e\u3057\u305f\u3053\u308d\u2026)\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">&quot;composer&quot; \u306e\u30bf\u30a4\u30d7\u30df\u30b9\u591a\u3059\u304e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b by <a href=\"https://twitter.com/mpyw\">@mpyw</a> on <a href=\"https://twitter.com/Qiita\">@Qiita</a> \u982d\u304a\u304b\u3057\u3044\u2026(\ua4aa\u03c9\ua4aa) <a href=\"https://t.co/Zp0Cswb8Nz\">https://t.co/Zp0Cswb8Nz</a></p>&mdash; \u306c\u3070\u305f (@nubata) <a href=\"https://twitter.com/nubata/status/788480798814896128\">2016\u5e7410\u670818\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u30b9\u30de\u30fc\u30c8\u306a\u89e3\u6c7a\u6cd5\u304b\u3068\u601d\u3063\u305f\u3089\u305c\u3093\u305c\u3093\u30b9\u30de\u30fc\u30c8\u3058\u3083\u306a\u304b\u3063\u305f</p>&mdash; \u3048\u3042\u3044 (@eai04191) <a href=\"https://twitter.com/eai04191/status/788575029671759873\">2016\u5e7410\u670819\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u30e4\u30af\u30b6\u89e3\u6c7a\u6cd5\u304b\u3088</p>&mdash; \u30db\u30a6\u30e9\u30a4 (@Fai_ri_4A) <a href=\"https://twitter.com/Fai_ri_4A/status/788575306101567488\">2016\u5e7410\u670819\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u77e5\u3000\u3063\u3000\u3066\u3000\u305f\n\n\u2193\n\n\u3069\u3046\u305b\u306a\u3089\u6c4e\u7528\u5316\u3057\u3066\u3084\u308b\uff01\uff01\uff01\n\n\u2193\n\n[zsh \u3067 method_missing \u3063\u307d\u3044\u3053\u3068\u3092\u3059\u308b\u306b\u306f command_not_found_handler - mollifier delta blog](http://mollifier.hatenablog.com/entry/20091207/p1) \u3092\u767a\u898b\n\n\u2193\n\n\u81ea\u524d\u3067\u5b9f\u88c5\n\n```zsh:Zsh&#32;(pyenv\u304a\u3088\u3073\u5404\u7a2e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u524d\u63d0\uff0c~/.zshrc&#32;\u306b\u8ffd\u8a18)\ncommand_not_found_handler() {\n    \n    local code='\nimport sys\nimport commands\nimport numpy as np\nfrom weighted_levenshtein import dam_lev\n\ninsert_costs = np.ones(128, dtype=np.float64)\ndelete_costs = np.ones(128, dtype=np.float64)\nsubstitute_costs = np.ones((128, 128), dtype=np.float64)\ntranspose_costs = np.ones((128, 128), dtype=np.float64) * 0.75\nmin_length = 5\nmin_similarity = 0.6\n\nactual = sys.argv[1]\nresults = {}\n\nif actual.startswith(\"_\"):\n    sys.exit(1)\n    \nfor expected in sys.stdin:\n    if len(expected) < min_length or expected.startswith(\"_\"):\n        continue\n    result = 1.0 - dam_lev(actual, expected,\n        insert_costs=insert_costs,\n        delete_costs=delete_costs,\n        substitute_costs=substitute_costs,\n        transpose_costs=transpose_costs\n    ) / max(len(actual), len(expected))\n    if (result >= min_similarity):\n        results[result] = expected\n\nif not results:\n    sys.exit(1)\n    \nprint results[max(results)]\n'\n    \n    local ___result\n    ___result=$(\n        print -l ${(ok)functions} ${(ok)aliases} ${(ok)commands} ${(ok)builtins} |\n        python2.7 -c $code $0\n    )\n        \n    if [[ $? == 0 ]]; then\n        printf %s \"Do you mean '$___result' ? [y/n]: \"\n        local answer\n        read answer\n        if [[ $answer == y || $answer == Y ]]; then\n            als=$(alias $___result)\n            if [[ $? == 0 ]]; then\n                eval local $als\n            fi\n            shift\n            eval $___result ${(q)@}\n            return \n        fi\n    fi\n    \n    return 127\n    \n}\n```\n\n\u4e00\u5fdc\u52d5\u304f\u3093\u3067\u3059\u304c\uff0c\u82e5\u5e72\u9045\u3081\u306a\u306e\u304c\u96e3\u70b9\u3002\n\n\n\n# \u4f5c\u62263: Zsh\u306e\u81ea\u52d5\u88dc\u6b63\u6a5f\u80fd\u3092\u4f7f\u3046\n\n\u3053\u3093\u306a\u30a2\u30db\u306a\u3053\u3068\u3057\u306a\u304f\u3066\u3082\uff0czsh\u306b\u306f\u81ea\u52d5\u88dc\u6b63\u6a5f\u80fd\u304c\u3042\u308b\u305d\u3046\u3067\u3059\u3002\n\n```shell-session\nmpyw@localhost:~$ setopt correct\nmpyw@localhost:~$ compseor -V\nzsh: correct 'compseor' to 'composer' [nyae]? y\nComposer version 1.2.1 2016-09-12 11:27:19\nmpyw@localhost:~$ \n```\n\n\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u3082\u309b\u3063\u309b\u3068\u309b\u65e9\u309b\u304f\u309b\u77e5\u309b\u308a\u309b\u305f\u309b\u304b\u309b\u3063\u309b\u305f\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\u30a2\u309b\n(generated by [\u963f\u9f3b\u53eb\u559a\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc](http://azunyan.sitemix.jp/shout/shout.php))\n\n# \u4f5c\u62264: C + `command_not_found_handler`\n\n\u610f\u5916\u306b\u3082\u4f5c\u62263\u306e\u7cbe\u5ea6\u304c\u30a4\u30de\u30a4\u30c1\u3060\u3063\u305f\u306e\u3068\uff0c\u4f5c\u62262\u306e\u52d5\u4f5c\u901f\u5ea6\u304c\u9045\u3044\u3053\u3068\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\uff0c\u3053\u308c\u3092\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3002\n\n- [c > link > Damerau\u2013Levenshtein distance > 4\u3064\u306e\u64cd\u4f5c\u306bcost\u306e\u7de9\u6025\u3092\u3064\u3051\u308b (sWap, Substitution, insertion, Deletion) - Qiita](http://qiita.com/7of9/items/f2513d05e65eb3b201c2)\n\n\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3057\u3066\u3044\u305f\u3060\u3044\u305f\u3082\u306e\u3092\u5c11\u3057\u30a2\u30ec\u30f3\u30b8\u3057\u307e\u3057\u305f\u3002\u5b9f\u7528\u7684\u306b\u306a\u3063\u305f\u306e\u3067GitHub\u306b\u3082\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\n- [mpyw/most-similar: Search most similar word from stdin.](https://github.com/mpyw/most-similar)\n\n```c:C&#32;(/usr/local/bin/most-similar&#32;\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u7f6e\u3044\u3066\u304a\u304f)\n#define BUFSIZE 512\n\n#include <stdio.h>\n#include <strings.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n/*\n * This implementation allows the costs to be weighted:\n *\n * - w (as in \"sWap\")\n * - s (as in \"Substitution\")\n * - a (for insertion, AKA \"Add\")\n * - d (as in \"Deletion\")\n *\n */\ndouble calc_similarity(const char *string1, const char *string2)\n{\n    int len1 = strlen(string1),\n        len2 = strlen(string2);\n    double w = 0.75, s = 1, a = 1, d = 1,\n           *row0 = (double *)&(double[BUFSIZE]){},\n           *row1 = (double *)&(double[BUFSIZE]){},\n           *row2 = (double *)&(double[BUFSIZE]){};\n\n    for (int j = 0; j <= len2; ++j) {\n        row1[j] = j * a;\n    }\n\n    for (int i = 0; i < len1; ++i) {\n        row2[0] = (i + 1) * d;\n        for (int j = 0; j < len2; ++j) {\n            /* substitution */\n            row2[j + 1] = row1[j] + s * (string1[i] != string2[j]);\n            /* swap */\n            if (i > 0 && j > 0 &&\n                    string1[i - 1] == string2[j] &&\n                    string1[i] == string2[j - 1] &&\n                    row2[j + 1] > row0[j - 1] + w) {\n                row2[j + 1] = row0[j - 1] + w;\n            }\n            /* deletion */\n            if (row2[j + 1] > row1[j + 1] + d) {\n                row2[j + 1] = row1[j + 1] + d;\n            }\n            /* insertion */\n            if (row2[j + 1] > row2[j] + a) {\n                row2[j + 1] = row2[j] + a;\n            }\n        }\n        double *dummy = row0;\n        row0 = row1;\n        row1 = row2;\n        row2 = dummy;\n    }\n\n    return 1.0 - row1[len2] / (len1 > len2 ? len1 : len2);\n}\n\nint readline(char *buffer)\n{\n    int length;\n    fgets(buffer, BUFSIZE, stdin);\n    if (ferror(stdin) || feof(stdin)) {\n        return -1;\n    }\n    length = strlen(buffer);\n    if (length && buffer[length - 1] == '\\n') {\n        buffer[--length] = '\\0';\n    }\n    return length;\n}\n\nint main(int argc, char *argv[])\n{\n    int opt, min_length = 1, length = 0;\n    double min_similarlity = 0.0, similarlity = 0.0;\n    char input[BUFSIZE] = {'\\0'}, comparison[BUFSIZE] = {'\\0'}, similitude[BUFSIZE] = {'\\0'};\n\n    while ((opt = getopt(argc, argv, \"i:l:s:h\")) != -1) {\n        switch (opt) {\n            case 'i':\n                strncpy(input, optarg, BUFSIZE - 1);\n                break;\n            case 'l':\n                min_length = atoi(optarg);\n                break;\n            case 's':\n                min_similarlity = atof(optarg);\n                break;\n            case 'h':\n            default:\n                fprintf(stderr, \"Usage: %s -i input < comparisons (Splitted by \\\"\\\\n\\\")\\n\", argv[0]);\n                fprintf(stderr, \"  [-l min_length=1] [-s min_similarlity=0.0]\\n\");\n                return opt != 'h';\n        }\n    }\n\n    if (!*input) {\n        fputs(\"No input specified\\n\", stderr);\n        return 1;\n    }\n    if (*input == '_') {\n        return 1;\n    }\n\n    similarlity = min_similarlity;\n\n    while ((length = readline(comparison)) > -1) {\n        if (length < min_length || length < 1 || *comparison == '_') {\n            continue;\n        }\n        double s = calc_similarity(input, comparison);\n        if (s < similarlity) {\n            continue;\n        }\n        similarlity = s;\n        strncpy(similitude, comparison, BUFSIZE - 1);\n        if (s == 1.0) {\n            break;\n        }\n    }\n\n    if (*similitude == '\\0') {\n        return 1;\n    }\n\n    puts(similitude);\n    return 0;\n}\n```\n\n# \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03\n\n\u4f5c\u62262\uff0c\u4f5c\u62263\uff0c\u4f5c\u62264\u306e\u9806\u756a\u3067\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-21 20.14.12.png](https://qiita-image-store.s3.amazonaws.com/0/25060/eed3a3ee-b77d-ffe7-49ef-a4f9e6f98085.png)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-21 20.15.06.png](https://qiita-image-store.s3.amazonaws.com/0/25060/4a320055-0673-d34c-5cf5-509df8bba2f8.png)\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-21 20.16.49.png](https://qiita-image-store.s3.amazonaws.com/0/25060/e5ad0737-db21-6e37-208d-7293ace955d2.png)\n\n0.15\u79d2\u30680.23\u79d2\u306e\u9055\u3044\u306f\u308f\u308a\u3068\u3067\u304b\u3044\u30be\n", "tags": ["PHP", "Python2", "\u30dd\u30a8\u30e0", "algorithm", "C99"]}