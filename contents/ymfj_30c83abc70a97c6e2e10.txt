{"context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b \u3067\u306f\uff0cmulti layer perceptron(MLP)\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3057\u305f\uff0e\u4eca\u56de\u306f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3067\u3059\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u524d\u56de\u3068\u540c\u3058\u304fMNIST\u306e\u624b\u66f8\u304d\u6587\u5b57\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059(28\u00d72828\u00d72828 \\times 28\u306e\u753b\u50cf)\uff0e\nCNN\u306e\u8aac\u660e\u53ca\u3073\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306b\u3064\u3044\u3066\u6b21\u306e\u56f3\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\n\n\u7573\u307f\u8fbc\u307f\u5c64\n\u7573\u307f\u8fbc\u307f\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u306f5\u00d755\u00d755 \\times 5\u3067\uff0c\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u51fa\u529b\u753b\u50cf\u306f\u5165\u529b\u753b\u50cf\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u306e\u64cd\u4f5c\uff0c\u3044\u307e\u3044\u3061\u4f55\u306e\u305f\u3081\u306b\u3084\u3063\u3066\u3044\u308b\u304b(\u3084\u3063\u3066\u3044\u3044\u306e\u304b)\u304c\u8aac\u660e\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\n\n\u30b5\u30a4\u30ba\u304c\u9014\u4e2d\u3067\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u6b21\u5143\u306e\u8a08\u7b97\u304c\u7c21\u5358\u306b\u306a\u308b?\n\u753b\u50cf\u7aef\u306e\u90e8\u5206\u306e\u7279\u5fb4\u91cf\u62bd\u51fa\u304c\u3067\u304d\u308b?\n\n\n\u3068\u3044\u3046\u611f\u3058\u306a\u306e\u3067\u3057\u3087\u3046\u304b?\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u306f\u30de\u30c3\u30af\u30b9\u30fb\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\u30d7\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\uff0c\u7269\u4f53(\u6587\u5b57)\u306e\u4f4d\u7f6e\u305a\u308c\u306b\u5f37\u3044\u7279\u5fb4\u91cf\u62bd\u51fa\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a18\u8ff0\n\nchianer\n\nchainer.py\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\n\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                                  conv1=L.Convolution2D(1, 32, 5, pad=2),\n                                  conv2=L.Convolution2D(32, 64, 5, pad=2),\n                                  l3=L.Linear(7 * 7 * 64, 1024),\n                                  l4=L.Linear(1024, 10),\n                                  )\n\n    def __call__(self, x):\n        h_conv1 = F.relu(self.conv1(x)) # x\u306f[1,28,28]\n        h_pool1 = F.max_pooling_2d(h_conv1, 2)\n\n        h_conv2 = F.relu(self.conv2(h_pool1))\n        h_pool2 = F.max_pooling_2d(h_conv2, 2)\n\n        h_l3 = F.relu(self.l3(h_pool2))\n\n        y = F.relu(self.l4(h_l3))\n\n        return y\n\n\n\ntensorFLow\n\ntensorFlow.py\nimport tensorFlow as tf\n\n# input\n    x = tf.placeholder(tf.float32, [None, 784])                     \n    x_image = tf.reshape(x, [-1, 28, 28, 1]) #\u30d5\u30e9\u30c3\u30c8\u306a\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u3044\u308b\u306e\u30672\u6b21\u5143\u306e\u753b\u50cf\u306b\u623b\u3057\u307e\u3059\n\n# conv1\n    w_conv1 = tf.Variable(tf.random_normal([5, 5, 1, 32], mean=0.0, stddev=0.05))\n    b_conv1 = tf.Variable(tf.zeros([32]))            \n\n    h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, w_conv1, strides=[1, 1, 1, 1], padding='SAME') + b_conv1)\n# pool1\n    h_pool1 = tf.nn.max_pool(h_conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n\n# conv2\n    w_conv2 = tf.Variable(tf.random_normal([5, 5, 32, 64], mean=0.0, stddev=0.05))\n    b_conv2 = tf.Variable(tf.zeros([64]))            \n\n    h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, w_conv2, strides=[1, 1, 1, 1], padding='SAME') + b_conv2)\n# pool2\n    h_pool2 = tf.nn.max_pool(h_conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')            \n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n\n# FC3\n    W3 = tf.Variable(tf.random_normal([(28 / 2 / 2) ** 2 * 64, 1024], mean=0.0, stddev=0.05))\n    b3 = tf.Variable(tf.zeros([1024]))\n\n    h3 = tf.nn.relu(tf.matmul(h_pool2_flat, W3) + b3)        \n\n# FC4\n    W4 = tf.Variable(tf.random_normal([1024, 10], mean=0.0, stddev=0.05))\n    b4 = tf.Variable(tf.zeros([10]))            \n\n    y = tf.nn.softmax(tf.matmul(h3, W4) + b4)\n\n# label\n    y_ = tf.placeholder(tf.float32, [None, 10])\n\n\n\n\u672c\u6765\u306f\u7573\u307f\u8fbc\u307f\u5c64\u306a\u3069\u306f\u30e1\u30bd\u30c3\u30c9\u5316\u3059\u308b\u3068\u3088\u3044\u3067\u3059\uff0e\u4eca\u56de\u306f\u30b9\u30e9\u30a4\u30c9\u306b\u306e\u305b\u308b\u305f\u3081\u306b\u66f8\u304d\u4e0b\u3057\u307e\u3057\u305f\uff0e\n\n\u304a\u308f\u308a\u306b\n\u7dcf\u3058\u3066tensorFlow\u306b\u6bd4\u3079\u3066chainer\u306e\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u308b\u304b\u306a\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u306d\uff0e\"\u30ec\u30a4\u30e4\u30fc\u578b\"\u306e\u8a18\u8ff0\u3060\u304b\u3089\u3067\u3057\u3087\u3046\u304b\uff0e\u3057\u304b\u3057\uff0c\u307e\u3060\u79c1\u304c\u5b9f\u88c5\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3067\u3042\u308b\u305f\u3081\u307e\u3060\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u9055\u3044\u3092\u5b9f\u611f\u3059\u308b\u30ec\u30d9\u30eb\u306b\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u300cchainer\u306fRNN\u3092\u7c21\u5358\u306b\u304b\u3051\u308b\u300d\u3068\u3044\u3046\u8a71\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u306e\u3067RNN\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u3053\u308d\u3067\u3059\uff0e\n\u305d\u3046\u8a00\u3063\u3066\u304a\u304d\u306a\u304c\u3089\u3042\u308c\u3067\u3059\u304c\uff0c\u500b\u4eba\u7684\u306b\u306ftensorFlow\u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\u7406\u7531\u3068\u3057\u3066\u306f\n\ntensorBoard\u3084distributed tensorflow\u306a\u3069\u306e\u62e1\u5f35\u6a5f\u80fd\ngoogle\u3063\u3066\u3053\u3068\u3067\u767a\u5c55\u6027\u304c\u3042\u308a\u305d\u3046\uff1f\n\n\u307f\u305f\u3044\u306a\u3068\u3053\u308d\u3067\u3059\uff0e\ntensorBoard\u306f\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u7b49\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u306f\u4fbf\u5229\u305d\u3046\u3067\u3059\uff0e\u305d\u3057\u3066\u809d\u306f\u5206\u6563\u51e6\u7406\u3092\u7c21\u5358\u306b(?)\u884c\u3048\u308bdistributed tensorflow\u3067\u3059\uff0e\u307e\u3060\u8a66\u3057\u3066\u307f\u307e\u305b\u3093\u304c\uff0cTITAN4\u679a\u523a\u3057\u306e\u30b5\u30fc\u30d0\u8907\u6570\u53f0\u306e\u74b0\u5883\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b(\u304b\u3082\u3057\u308c\u306a\u3044)\u306e\u3067\u662f\u975e\u8a66\u3057\u3066\u307f\u305f\u3044\u3082\u306e\u3067\u3059\uff0e\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/ymfj/items/b2b72e4fda2d4eb9d980) \u3067\u306f\uff0cmulti layer perceptron(MLP)\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u3066\u307f\u307e\u3057\u305f\uff0e\u4eca\u56de\u306f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u3067\u3059\uff0e\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n##\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u524d\u56de\u3068\u540c\u3058\u304fMNIST\u306e\u624b\u66f8\u304d\u6587\u5b57\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059($28 \\times 28$\u306e\u753b\u50cf)\uff0e\n\nCNN\u306e\u8aac\u660e\u53ca\u3073\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306b\u3064\u3044\u3066\u6b21\u306e\u56f3\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n![CNN.png](https://qiita-image-store.s3.amazonaws.com/0/106352/b097fbe9-5fc6-7e35-dafa-a86c392f762e.png)\n\n\n### \u7573\u307f\u8fbc\u307f\u5c64\n\u7573\u307f\u8fbc\u307f\u306e\u30d5\u30a3\u30eb\u30bf\u30b5\u30a4\u30ba\u306f$5 \\times 5$\u3067\uff0c\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u51fa\u529b\u753b\u50cf\u306f\u5165\u529b\u753b\u50cf\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u306e\u64cd\u4f5c\uff0c\u3044\u307e\u3044\u3061\u4f55\u306e\u305f\u3081\u306b\u3084\u3063\u3066\u3044\u308b\u304b(\u3084\u3063\u3066\u3044\u3044\u306e\u304b)\u304c\u8aac\u660e\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\n\n* \u30b5\u30a4\u30ba\u304c\u9014\u4e2d\u3067\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u6b21\u5143\u306e\u8a08\u7b97\u304c\u7c21\u5358\u306b\u306a\u308b?\n* \u753b\u50cf\u7aef\u306e\u90e8\u5206\u306e\u7279\u5fb4\u91cf\u62bd\u51fa\u304c\u3067\u304d\u308b?  \n\n\u3068\u3044\u3046\u611f\u3058\u306a\u306e\u3067\u3057\u3087\u3046\u304b?\n\n\n### \u30d7\u30fc\u30ea\u30f3\u30b0\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u306f\u30de\u30c3\u30af\u30b9\u30fb\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\u30d7\u30fc\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\uff0c\u7269\u4f53(\u6587\u5b57)\u306e\u4f4d\u7f6e\u305a\u308c\u306b\u5f37\u3044\u7279\u5fb4\u91cf\u62bd\u51fa\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n## \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a18\u8ff0\n### chianer\n```chainer.py\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\n\nclass CNN(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                                  conv1=L.Convolution2D(1, 32, 5, pad=2),\n                                  conv2=L.Convolution2D(32, 64, 5, pad=2),\n                                  l3=L.Linear(7 * 7 * 64, 1024),\n                                  l4=L.Linear(1024, 10),\n                                  )\n            \n    def __call__(self, x):\n        h_conv1 = F.relu(self.conv1(x)) # x\u306f[1,28,28]\n        h_pool1 = F.max_pooling_2d(h_conv1, 2)\n        \n        h_conv2 = F.relu(self.conv2(h_pool1))\n        h_pool2 = F.max_pooling_2d(h_conv2, 2)\n        \n        h_l3 = F.relu(self.l3(h_pool2))\n       \n        y = F.relu(self.l4(h_l3))\n        \n        return y\n```\n\n\n### tensorFLow\n\n```tensorFlow.py\nimport tensorFlow as tf\n\n# input\n    x = tf.placeholder(tf.float32, [None, 784])                     \n    x_image = tf.reshape(x, [-1, 28, 28, 1]) #\u30d5\u30e9\u30c3\u30c8\u306a\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u3044\u308b\u306e\u30672\u6b21\u5143\u306e\u753b\u50cf\u306b\u623b\u3057\u307e\u3059\n    \n# conv1\n    w_conv1 = tf.Variable(tf.random_normal([5, 5, 1, 32], mean=0.0, stddev=0.05))\n    b_conv1 = tf.Variable(tf.zeros([32]))            \n    \n    h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, w_conv1, strides=[1, 1, 1, 1], padding='SAME') + b_conv1)\n# pool1\n    h_pool1 = tf.nn.max_pool(h_conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    \n# conv2\n    w_conv2 = tf.Variable(tf.random_normal([5, 5, 32, 64], mean=0.0, stddev=0.05))\n    b_conv2 = tf.Variable(tf.zeros([64]))            \n    \n    h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, w_conv2, strides=[1, 1, 1, 1], padding='SAME') + b_conv2)\n# pool2\n    h_pool2 = tf.nn.max_pool(h_conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')            \n    h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])\n    \n# FC3\n    W3 = tf.Variable(tf.random_normal([(28 / 2 / 2) ** 2 * 64, 1024], mean=0.0, stddev=0.05))\n    b3 = tf.Variable(tf.zeros([1024]))\n    \n    h3 = tf.nn.relu(tf.matmul(h_pool2_flat, W3) + b3)        \n\n# FC4\n    W4 = tf.Variable(tf.random_normal([1024, 10], mean=0.0, stddev=0.05))\n    b4 = tf.Variable(tf.zeros([10]))            \n                          \n    y = tf.nn.softmax(tf.matmul(h3, W4) + b4)\n    \n# label\n    y_ = tf.placeholder(tf.float32, [None, 10])\n\n```\n\u672c\u6765\u306f\u7573\u307f\u8fbc\u307f\u5c64\u306a\u3069\u306f\u30e1\u30bd\u30c3\u30c9\u5316\u3059\u308b\u3068\u3088\u3044\u3067\u3059\uff0e\u4eca\u56de\u306f\u30b9\u30e9\u30a4\u30c9\u306b\u306e\u305b\u308b\u305f\u3081\u306b\u66f8\u304d\u4e0b\u3057\u307e\u3057\u305f\uff0e\n\n#\u304a\u308f\u308a\u306b\n\u7dcf\u3058\u3066tensorFlow\u306b\u6bd4\u3079\u3066chainer\u306e\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u308b\u304b\u306a\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u306d\uff0e\"\u30ec\u30a4\u30e4\u30fc\u578b\"\u306e\u8a18\u8ff0\u3060\u304b\u3089\u3067\u3057\u3087\u3046\u304b\uff0e\u3057\u304b\u3057\uff0c\u307e\u3060\u79c1\u304c\u5b9f\u88c5\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3067\u3042\u308b\u305f\u3081\u307e\u3060\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u9055\u3044\u3092\u5b9f\u611f\u3059\u308b\u30ec\u30d9\u30eb\u306b\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u300cchainer\u306fRNN\u3092\u7c21\u5358\u306b\u304b\u3051\u308b\u300d\u3068\u3044\u3046\u8a71\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u306e\u3067RNN\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u3053\u308d\u3067\u3059\uff0e\n\n\u305d\u3046\u8a00\u3063\u3066\u304a\u304d\u306a\u304c\u3089\u3042\u308c\u3067\u3059\u304c\uff0c\u500b\u4eba\u7684\u306b\u306ftensorFlow\u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\u7406\u7531\u3068\u3057\u3066\u306f\n\n* tensorBoard\u3084distributed tensorflow\u306a\u3069\u306e\u62e1\u5f35\u6a5f\u80fd\n* google\u3063\u3066\u3053\u3068\u3067\u767a\u5c55\u6027\u304c\u3042\u308a\u305d\u3046\uff1f\n\n\u307f\u305f\u3044\u306a\u3068\u3053\u308d\u3067\u3059\uff0e\ntensorBoard\u306f\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u7b49\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u306f\u4fbf\u5229\u305d\u3046\u3067\u3059\uff0e\u305d\u3057\u3066\u809d\u306f\u5206\u6563\u51e6\u7406\u3092\u7c21\u5358\u306b(?)\u884c\u3048\u308bdistributed tensorflow\u3067\u3059\uff0e\u307e\u3060\u8a66\u3057\u3066\u307f\u307e\u305b\u3093\u304c\uff0cTITAN4\u679a\u523a\u3057\u306e\u30b5\u30fc\u30d0\u8907\u6570\u53f0\u306e\u74b0\u5883\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b(\u304b\u3082\u3057\u308c\u306a\u3044)\u306e\u3067\u662f\u975e\u8a66\u3057\u3066\u307f\u305f\u3044\u3082\u306e\u3067\u3059\uff0e\n", "tags": ["Chainer", "TensorFlow"]}