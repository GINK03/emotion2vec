{"context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #11 (1.3.4)\n1.3.4 (\u7df4\u7fd2\u554f\u984c1.40~1.46)\n\nsec-1.3.4. \u8fd4\u308a\u5024\u3068\u3057\u3066\u306e\u624b\u7d9a\u304d (a) \u5e73\u5747\u7de9\u548c\u6cd5\u3092\u4f7f\u3063\u305f\u5e73\u65b9\u6839\u3068\u4e09\u4e57\u6839\n; [sec-1.3.4-a]\n\n\n(define (sec-1.3.4-a)\n    (print \"(average-damp square) 10))\")\n    (print \";==> \" ((average-damp square) 10))\n    (print \"(sqrt-1.3.4-a 5)\")\n    (print \";==> \" (sqrt-1.3.4-a 5))\n    (print \"(cube-root-1.3.4-a 125)\")\n    (print \";==> \" (cube-root-1.3.4-a 125))\n    #t) \n\n\n(define (average-damp f)\n    (lambda (x) (average x (f x))))\n\n(define (average a b)\n    (/ (+ a b) 2))\n\n\n(define (sqrt-1.3.4-a x)\n    (fixed-point (average-damp (lambda (y) (/ x y))) 1.0))\n\n\n(define (cube-root-1.3.4-a x)\n    (fixed-point (average-damp (lambda (y) (/ x (square y)))) 1.0))\n\n\n; from sec-1.3.3.\n(define (fixed-point f first-guess)\n    (define tolerance 0.00001)\n    (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) tolerance))\n    (define (try guess)\n        (let ((next (f guess)))\n            (if (close-enough? guess next)\n                next\n                (try next))))\n    (try first-guess))\n\ngosh> (sec-1.3.4-a)\n(average-damp square) 10))\n;==> 55\n(sqrt-1.3.4-a 5)\n;==> 2.236067977499978\n(cube-root-1.3.4-a 125)\n;==> 4.999997738179904\n#t\n\n\nsec-1.3.4. (b) \u5fae\u5206\u306e\u8fd1\u4f3c\u3068\u4e0d\u52d5\u70b9\u63a2\u7d22\u306b\u3088\u308b\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\n; [sec-1.3.4-b]\n\n\n(define (sec-1.3.4-b)\n    (print \"((derive cube) 5)  ; exact value = 75\")\n    (print \";==> \" ((derive cube) 5))\n    (print \"(sqrt-1.3.4-b 5)\")\n    (print \";==> \" (sqrt-1.3.4-b 5))\n    #t)\n\n\n(load \"./sec-1.3.4-a\")\n\n\n(define (derive g)\n    (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))\n\n(define dx 0.00001)\n\n\n(define (cube x) (* x x x))\n\n\n(define (newton-transform g)\n    (lambda (x) (- x (/ (g x) ((derive g) x)))))\n\n(define (newtons-method g guess)\n    (fixed-point (newton-transform g) guess))\n\n(define (sqrt-1.3.4-b x)\n    (newtons-method\n        (lambda (y) (- (square y) x))\n        1.0))\n\n((derive cube) 5)  ; exact value = 75\n;==> 75.00014999664018\n(sqrt-1.3.4-b 5)\n;==> 2.2360679775020436\n#t\n\n\nsec-1.3.4. (c) \u62bd\u8c61\u5316\u3068\u30d5\u30a1\u30fc\u30b9\u30c8\u30af\u30e9\u30b9\u624b\u7d9a\u304d\n; [sec-1.3.4-c.scm]\n\n\n(define (sec-1.3.4-c)\n    (print \"(sqrt-1.3.4-c-ad 25)\")\n    (print \";==> \" (sqrt-1.3.4-c-ad 25))\n    (print \"(sqrt-1.3.4-c-nt 25)\")\n    (print \";==> \" (sqrt-1.3.4-c-nt 25))\n    #t)\n\n\n(load \"./sec-1.3.4-b\")\n\n(define (fixed-point-of-transform g transform guess)\n    (fixed-point (transform g) guess))\n\n\n(define (sqrt-1.3.4-c-ad x)\n    (fixed-point-of-transform\n        (lambda (y) (/ x y))\n        average-damp\n        1.0))\n\n\n(define (sqrt-1.3.4-c-nt x)\n    (fixed-point-of-transform\n        (lambda (y) (- (square y) x))\n        newton-transform\n        1.0))\n\ngosh> (sec-1.3.4-c)\n(sqrt-1.3.4-c-ad 25)\n;==> 5.0\n(sqrt-1.3.4-c-nt 25)\n;==> 5.0\n#t\n\n\nex-1.40. \u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u3088\u308b x^3 + ax^2 + bx + c = 0 \u306e\u96f6\u70b9\u306e\u8fd1\u4f3c\u5024\n; [ex-1.40.scm]\n\n\n(define (ex-1.40)\n    (print \"(newtons-method (cubic 5 4 3) 1.0)\")\n    (print \";==> \" (newtons-method (cubic 5 4 3) 1.0))\n    (print \"((cubic 5 4 3) -4.220692819987309)\")\n    (print \";==> \" ((cubic 5 4 3) -4.220692819987309))\n    #t)\n\n\n(load \"./sec-1.3.4-b\")\n\n\n; x^3 + ax^2 + bx +c.\n(define (cubic a b c)\n    (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))\n\ngosh> (ex-1.40)\n(newtons-method (cubic 5 4 3) 1.0)\n;==> -4.220692819987309\n((cubic 5 4 3) -4.220692819987309)\n;==> 2.4513724383723456e-13\n#t\n\n\nex-1.41. (((double (doube double)) inc) 5)\n; [ex-1.41.scm]\n\n(define (ex-1.41)\n    (print \"((double inc) 0)\")\n    (print \";==> \" ((double inc) 0))\n    (print \"(((double (double double)) inc) 5)\")\n    (print \";==> \" (((double (double double)) inc) 5))\n    (newline)\n    (print \"((double inc) 0)\")\n    (print \";==> \" ((double inc) 0))\n    (print \"(((double double) inc) 0)\")\n    (print \";==> \" (((double double) inc) 0))\n    (print \"(((double (double double)) inc) 0)\")\n    (print \";==> \" (((double (double double)) inc) 0))\n    #t)\n\n\n; f :: a -> a\n; double :: (a -> a) -> (a -> a)\n(define (double f)\n    (lambda (x) (f (f x))))\n\n\n(define (inc x) (+ x 1))\n\ngosh> (ex-1.41)\n((double inc) 0)\n;==> 2\n(((double (double double)) inc) 5)\n;==> 21\n\n((double inc) 0)\n;==> 2\n(((double double) inc) 0)\n;==> 4\n(((double (double double)) inc) 0)\n;==> 16\n#t\n\n3\u3064\u3081\u304c 8 \u304b\u3068\u601d\u3063\u305f\u3089 16 \u3060\u3063\u305f\u30fb\u03c9\u30fb\uff1b\n\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u3067\u5c55\u958b\u3057\u3066\u307f\u305f\u2026\nlambda \u304c\u304b\u3063\u3053\u3060\u3089\u3051\u3067\u308f\u3051\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u8a18\u6cd5\u3092\u3067\u3063\u3061\u3042\u3052\u3064\u3064(\u2190\n[1]\ndouble = [\\f -> [\\x -> (f (f x))]]\n\n[2]\n(double double)\n> (double-a double-b)\n>> double-a = [\\g -> [\\x -> (g (g x))]]\n>> double-b = [\\h -> [\\y -> (h (h y))]]\n(double-a double-b)\n([\\g -> [\\x -> (g (g x))]] double-b)\n[\\x -> (double-b (double-b x))]\n.\n[\\x -> (double-b ([\\h -> [\\y -> (h (h y))]] x))]\n[\\x -> (double-b [\\y -> (x (x y))])]\n[\\x -> ([\\h -> [\\y -> (h (h y))]] [\\y -> (x (x y))])]\n[\\x -> ([\\h -> [\\z -> (h (h z))]] [\\y -> (x (x y))])]\n[\\x -> [\\z -> ([\\y -> (x (x y))] ([\\y -> (x (x y))] z))]]\n[\\x -> [\\z -> ([\\y -> (x (x y))] (x (x z)))]]\n[\\x -> [\\z -> (x (x (x (x z))))]]\n[\\f -> [\\z -> (f (f (f (f z))))]]\n\n[3]\n(double (double double))\n(double-a (double-b double-c))\n>> double-a = [\\f -> [\\x -> (f (f x))]]\n>> (double-b double-c) = [\\g -> [\\y -> (g (g (g (g y))))]]\n(double-a [\\g -> [\\y -> (g (g (g (g y))))]])\n([\\f -> [\\x -> (f (f x))]] [\\g -> [\\y -> (g (g (g (g y))))]])\n[\\x -> ([\\g -> [\\y -> (g (g (g (g y))))]] ([\\g -> [\\y -> (g (g (g (g y))))]] x))]\n[\\x -> ([\\g -> [\\y -> (g (g (g (g y))))]] [\\y -> (x (x (x (x y))))])]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] y) )))]]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] (x (x (x (x (x (x (x (x y)))) ))))  ))]]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] (x (x (x (x (x (x (x (x (x (x (x (x y)))) )))) ))))  )]]\n[\\x -> [\\y -> (x (x (x (x (x (x (x (x (x (x (x (x (x (x (x (x y)))) )))) )))) ))))]]\n\n\u306a\u308b\u307b\u3069\u2026\uff1f\uff1d\u30ee\uff1d\uff1b\n\u3081\u304c\u3057\u3071\u3057\u3071\uff1d\u03c9\uff1d\uff1b\n\nex-1.42. ((compose square inc) 6)\n; [ex-1.42.scm]\n\n\n(define (ex-1.42)\n    (print \"((compose square inc) 6)\") ; 49.\n    (print \"#==> \" ((compose square inc) 6))\n    #t)\n\n\n(define (inc x) (+ x 1))\n\n\n(define (compose f g)\n    (lambda (x) (f (g x))))\n\ngosh> (ex-1.42)\n((compose square inc) 6)\n#==> 49\n#t\n\n\nex-1.43. n \u56de\u9069\u7528\n; [ex-1.43.scm]\n\n\n(define (ex-1.43)\n    (print \"((repeated square 2) 5)\") ; 625.\n    (print \"#==> \" ((repeated square 2) 5))\n    #t)\n\n\n(load \"./ex-1.42\")\n\n\n(define (repeated f n)\n    (cond\n        ((<= n 1)\n            f)\n        ((= (remainder n 2) 1)\n            (compose f (repeated f (- n 1))))\n        (else\n            (let ((ff (repeated f (/ n 2))))\n                (compose ff ff)))))\n\n\n; (define (repeated f n)\n;   (define (iter i val)\n;       (if (>= i n)\n;           val\n;           (iter (+ i 1) (f val))))\n;   (lambda (x) (iter 0 x)))\n\ngosh> (ex-1.43)\n((repeated square 2) 5)\n#==> 625\n#t\n\n\nex-1.44. n \u91cd\u5e73\u6ed1\u5316\n; [ex-1.44.scm]\n\n\n(define (ex-1.44)\n    (print \"((smooth square) 100)\")\n    (print \";==> \" ((smooth square) 100))\n    (print \"((n-fold-smooth square 4) 100)\")\n    (print \";==> \" ((n-fold-smooth square 4) 100))\n    #t)\n\n\n(load \"./ex-1.43\")\n\n\n; smooth :: (a -> a) -> (a -> a)\n(define (smooth f)\n    (define dx 0.00001)\n    (lambda (x)\n        (/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))\n\n\n(define (n-fold-smooth f n)\n    (repeated (smooth f) n))\n\ngosh> (ex-1.44)\n((smooth square) 100)\n;==> 10000.000000000067\n((n-fold-smooth square 4) 100)\n;==> 1.0000000000000545e32\n#t\n\n\u30b5\u30f3\u30d7\u30eb\u304c\u306a\u3044\u306e\u3067\u3042\u3063\u3066\u308b\u306e\u304b\u308f\u304b\u3093\u306a\u3044\u30fb\u03c9\u30fb`\n\nex-1.45.\n\u3077\u3057\u3085\u30fc\u2026o__)o\n\nex-1.46.\no__)o\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #11 (1.3.4)](http://ladiespp.connpass.com/event/31179/)\n\n1.3.4 (\u7df4\u7fd2\u554f\u984c1.40~1.46)\n\n## sec-1.3.4. \u8fd4\u308a\u5024\u3068\u3057\u3066\u306e\u624b\u7d9a\u304d (a) \u5e73\u5747\u7de9\u548c\u6cd5\u3092\u4f7f\u3063\u305f\u5e73\u65b9\u6839\u3068\u4e09\u4e57\u6839\n\n```scm\n; [sec-1.3.4-a]\n\n\n(define (sec-1.3.4-a)\n\t(print \"(average-damp square) 10))\")\n\t(print \";==> \" ((average-damp square) 10))\n\t(print \"(sqrt-1.3.4-a 5)\")\n\t(print \";==> \" (sqrt-1.3.4-a 5))\n\t(print \"(cube-root-1.3.4-a 125)\")\n\t(print \";==> \" (cube-root-1.3.4-a 125))\n\t#t)\t\n\n\n(define (average-damp f)\n\t(lambda (x) (average x (f x))))\n\n(define (average a b)\n\t(/ (+ a b) 2))\n\n\n(define (sqrt-1.3.4-a x)\n\t(fixed-point (average-damp (lambda (y) (/ x y))) 1.0))\n\n\n(define (cube-root-1.3.4-a x)\n\t(fixed-point (average-damp (lambda (y) (/ x (square y)))) 1.0))\n\n\n; from sec-1.3.3.\n(define (fixed-point f first-guess)\n\t(define tolerance 0.00001)\n\t(define (close-enough? v1 v2)\n\t\t(< (abs (- v1 v2)) tolerance))\n\t(define (try guess)\n\t\t(let ((next (f guess)))\n\t\t\t(if (close-enough? guess next)\n\t\t\t\tnext\n\t\t\t\t(try next))))\n\t(try first-guess))\n```\n\n```scm\ngosh> (sec-1.3.4-a)\n(average-damp square) 10))\n;==> 55\n(sqrt-1.3.4-a 5)\n;==> 2.236067977499978\n(cube-root-1.3.4-a 125)\n;==> 4.999997738179904\n#t\n```\n\n\n## sec-1.3.4. (b) \u5fae\u5206\u306e\u8fd1\u4f3c\u3068\u4e0d\u52d5\u70b9\u63a2\u7d22\u306b\u3088\u308b\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\n\n```scm\n; [sec-1.3.4-b]\n\n\n(define (sec-1.3.4-b)\n\t(print \"((derive cube) 5)  ; exact value = 75\")\n\t(print \";==> \" ((derive cube) 5))\n\t(print \"(sqrt-1.3.4-b 5)\")\n\t(print \";==> \" (sqrt-1.3.4-b 5))\n\t#t)\n\n\n(load \"./sec-1.3.4-a\")\n\n\n(define (derive g)\n\t(lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))\n\n(define dx 0.00001)\n\n\n(define (cube x) (* x x x))\n\n\n(define (newton-transform g)\n\t(lambda (x) (- x (/ (g x) ((derive g) x)))))\n\n(define (newtons-method g guess)\n\t(fixed-point (newton-transform g) guess))\n\n(define (sqrt-1.3.4-b x)\n\t(newtons-method\n\t\t(lambda (y) (- (square y) x))\n\t\t1.0))\n```\n\n```scm\n((derive cube) 5)  ; exact value = 75\n;==> 75.00014999664018\n(sqrt-1.3.4-b 5)\n;==> 2.2360679775020436\n#t\n```\n\n## sec-1.3.4. (c) \u62bd\u8c61\u5316\u3068\u30d5\u30a1\u30fc\u30b9\u30c8\u30af\u30e9\u30b9\u624b\u7d9a\u304d\n\n```scm\n; [sec-1.3.4-c.scm]\n\n\n(define (sec-1.3.4-c)\n\t(print \"(sqrt-1.3.4-c-ad 25)\")\n\t(print \";==> \" (sqrt-1.3.4-c-ad 25))\n\t(print \"(sqrt-1.3.4-c-nt 25)\")\n\t(print \";==> \" (sqrt-1.3.4-c-nt 25))\n\t#t)\n\n\n(load \"./sec-1.3.4-b\")\n\n(define (fixed-point-of-transform g transform guess)\n\t(fixed-point (transform g) guess))\n\n\n(define (sqrt-1.3.4-c-ad x)\n\t(fixed-point-of-transform\n\t\t(lambda (y) (/ x y))\n\t\taverage-damp\n\t\t1.0))\n\n\n(define (sqrt-1.3.4-c-nt x)\n\t(fixed-point-of-transform\n\t\t(lambda (y) (- (square y) x))\n\t\tnewton-transform\n\t\t1.0))\n```\n\n```scm\ngosh> (sec-1.3.4-c)\n(sqrt-1.3.4-c-ad 25)\n;==> 5.0\n(sqrt-1.3.4-c-nt 25)\n;==> 5.0\n#t\n```\n\n\n## ex-1.40. \u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u3088\u308b x^3 + ax^2 + bx + c = 0 \u306e\u96f6\u70b9\u306e\u8fd1\u4f3c\u5024\n\n```scm\n; [ex-1.40.scm]\n\n\n(define (ex-1.40)\n\t(print \"(newtons-method (cubic 5 4 3) 1.0)\")\n\t(print \";==> \" (newtons-method (cubic 5 4 3) 1.0))\n\t(print \"((cubic 5 4 3) -4.220692819987309)\")\n\t(print \";==> \" ((cubic 5 4 3) -4.220692819987309))\n\t#t)\n\n\n(load \"./sec-1.3.4-b\")\n\n\n; x^3 + ax^2 + bx +c.\n(define (cubic a b c)\n\t(lambda (x) (+ (* x x x) (* a x x) (* b x) c)))\n```\n\n```scm\ngosh> (ex-1.40)\n(newtons-method (cubic 5 4 3) 1.0)\n;==> -4.220692819987309\n((cubic 5 4 3) -4.220692819987309)\n;==> 2.4513724383723456e-13\n#t\n```\n\n\n## ex-1.41. (((double (doube double)) inc) 5)\n\n```scm\n; [ex-1.41.scm]\n\n(define (ex-1.41)\n\t(print \"((double inc) 0)\")\n\t(print \";==> \" ((double inc) 0))\n\t(print \"(((double (double double)) inc) 5)\")\n\t(print \";==> \" (((double (double double)) inc) 5))\n\t(newline)\n\t(print \"((double inc) 0)\")\n\t(print \";==> \" ((double inc) 0))\n\t(print \"(((double double) inc) 0)\")\n\t(print \";==> \" (((double double) inc) 0))\n\t(print \"(((double (double double)) inc) 0)\")\n\t(print \";==> \" (((double (double double)) inc) 0))\n\t#t)\n\n\n; f :: a -> a\n; double :: (a -> a) -> (a -> a)\n(define (double f)\n\t(lambda (x) (f (f x))))\n\n\n(define (inc x) (+ x 1))\n```\n\n```scm\ngosh> (ex-1.41)\n((double inc) 0)\n;==> 2\n(((double (double double)) inc) 5)\n;==> 21\n\n((double inc) 0)\n;==> 2\n(((double double) inc) 0)\n;==> 4\n(((double (double double)) inc) 0)\n;==> 16\n#t\n```\n\n3\u3064\u3081\u304c 8 \u304b\u3068\u601d\u3063\u305f\u3089 16 \u3060\u3063\u305f\u30fb\u03c9\u30fb\uff1b\n\u306e\u3067\u3061\u3087\u3063\u3068\u624b\u3067\u5c55\u958b\u3057\u3066\u307f\u305f\u2026\nlambda \u304c\u304b\u3063\u3053\u3060\u3089\u3051\u3067\u308f\u3051\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u8a18\u6cd5\u3092\u3067\u3063\u3061\u3042\u3052\u3064\u3064(\u2190\n\n```\n[1]\ndouble = [\\f -> [\\x -> (f (f x))]]\n\n[2]\n(double double)\n> (double-a double-b)\n>> double-a = [\\g -> [\\x -> (g (g x))]]\n>> double-b = [\\h -> [\\y -> (h (h y))]]\n(double-a double-b)\n([\\g -> [\\x -> (g (g x))]] double-b)\n[\\x -> (double-b (double-b x))]\n.\n[\\x -> (double-b ([\\h -> [\\y -> (h (h y))]] x))]\n[\\x -> (double-b [\\y -> (x (x y))])]\n[\\x -> ([\\h -> [\\y -> (h (h y))]] [\\y -> (x (x y))])]\n[\\x -> ([\\h -> [\\z -> (h (h z))]] [\\y -> (x (x y))])]\n[\\x -> [\\z -> ([\\y -> (x (x y))] ([\\y -> (x (x y))] z))]]\n[\\x -> [\\z -> ([\\y -> (x (x y))] (x (x z)))]]\n[\\x -> [\\z -> (x (x (x (x z))))]]\n[\\f -> [\\z -> (f (f (f (f z))))]]\n\n[3]\n(double (double double))\n(double-a (double-b double-c))\n>> double-a = [\\f -> [\\x -> (f (f x))]]\n>> (double-b double-c) = [\\g -> [\\y -> (g (g (g (g y))))]]\n(double-a [\\g -> [\\y -> (g (g (g (g y))))]])\n([\\f -> [\\x -> (f (f x))]] [\\g -> [\\y -> (g (g (g (g y))))]])\n[\\x -> ([\\g -> [\\y -> (g (g (g (g y))))]] ([\\g -> [\\y -> (g (g (g (g y))))]] x))]\n[\\x -> ([\\g -> [\\y -> (g (g (g (g y))))]] [\\y -> (x (x (x (x y))))])]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] y) )))]]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] ([\\y -> (x (x (x (x y))))] (x (x (x (x (x (x (x (x y)))) ))))  ))]]\n[\\x -> [\\y -> ([\\y -> (x (x (x (x y))))] (x (x (x (x (x (x (x (x (x (x (x (x y)))) )))) ))))  )]]\n[\\x -> [\\y -> (x (x (x (x (x (x (x (x (x (x (x (x (x (x (x (x y)))) )))) )))) ))))]]\n```\n\n\u306a\u308b\u307b\u3069\u2026\uff1f\uff1d\u30ee\uff1d\uff1b\n\u3081\u304c\u3057\u3071\u3057\u3071\uff1d\u03c9\uff1d\uff1b\n\n## ex-1.42. ((compose square inc) 6)\n\n```scm\n; [ex-1.42.scm]\n\n\n(define (ex-1.42)\n\t(print \"((compose square inc) 6)\") ; 49.\n\t(print \"#==> \" ((compose square inc) 6))\n\t#t)\n\n\n(define (inc x) (+ x 1))\n\n\n(define (compose f g)\n\t(lambda (x) (f (g x))))\n```\n\n```scm\ngosh> (ex-1.42)\n((compose square inc) 6)\n#==> 49\n#t\n```\n\n\n## ex-1.43. n \u56de\u9069\u7528\n\n```scm\n; [ex-1.43.scm]\n\n\n(define (ex-1.43)\n\t(print \"((repeated square 2) 5)\") ; 625.\n\t(print \"#==> \" ((repeated square 2) 5))\n\t#t)\n\n\n(load \"./ex-1.42\")\n\n\n(define (repeated f n)\n\t(cond\n\t\t((<= n 1)\n\t\t\tf)\n\t\t((= (remainder n 2) 1)\n\t\t\t(compose f (repeated f (- n 1))))\n\t\t(else\n\t\t\t(let ((ff (repeated f (/ n 2))))\n\t\t\t\t(compose ff ff)))))\n\n\n; (define (repeated f n)\n; \t(define (iter i val)\n; \t\t(if (>= i n)\n; \t\t\tval\n; \t\t\t(iter (+ i 1) (f val))))\n; \t(lambda (x) (iter 0 x)))\n```\n\n```scm\ngosh> (ex-1.43)\n((repeated square 2) 5)\n#==> 625\n#t\n```\n\n\n## ex-1.44. n \u91cd\u5e73\u6ed1\u5316\n\n```scm\n; [ex-1.44.scm]\n\n\n(define (ex-1.44)\n\t(print \"((smooth square) 100)\")\n\t(print \";==> \" ((smooth square) 100))\n\t(print \"((n-fold-smooth square 4) 100)\")\n\t(print \";==> \" ((n-fold-smooth square 4) 100))\n\t#t)\n\n\n(load \"./ex-1.43\")\n\n\n; smooth :: (a -> a) -> (a -> a)\n(define (smooth f)\n\t(define dx 0.00001)\n\t(lambda (x)\n\t\t(/ (+ (f (- x dx)) (f x) (f (+ x dx))) 3)))\n\n\n(define (n-fold-smooth f n)\n\t(repeated (smooth f) n))\n```\n\n```scm\ngosh> (ex-1.44)\n((smooth square) 100)\n;==> 10000.000000000067\n((n-fold-smooth square 4) 100)\n;==> 1.0000000000000545e32\n#t\n```\n\n\u30b5\u30f3\u30d7\u30eb\u304c\u306a\u3044\u306e\u3067\u3042\u3063\u3066\u308b\u306e\u304b\u308f\u304b\u3093\u306a\u3044\u30fb\u03c9\u30fb`\n\n## ex-1.45.\n\n\u3077\u3057\u3085\u30fc\u2026o__)o\n\n## ex-1.46.  \n\no__)o\n", "tags": ["SICP"]}