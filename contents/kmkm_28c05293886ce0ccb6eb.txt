{"context": "\n\n\u203b\u968f\u6642\u66f4\u65b0\n\n\u524d\u63d0\n- React\n- Redux\n- react-redux\n- redux-saga\n- redux-actions\n- Immutable.js\n\n\u30e1\u30e2\n\nredux-saga\u3067forEach\u3092\u4f7f\u3046\u3088\u3046\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\nimport Range as range from 'immutable';\n\n// \u3053\u308c\u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u30cd\u30b9\u30c8\u3092\u6df1\u304f\u3057\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3068callback\u306f\u30a2\u30ed\u30fc\u95a2\u6570\u3067\u7d71\u4e00\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\nfunction *foreachSaga() {\n  range(1, max).forEach(function* (num) {\n       yield call(generatoFunc, num); \n    }\n  );\n}\n\n\u2193\n// map\u3092\u4f7f\u3044yield\u306b\u914d\u5217\u3067\u308f\u305f\u3059\nfunction *mapSagaCall() {\n  yield range(1, num)\n    .map((num) => call(generatoFunc, num, body))\n    .toArray();\n}\n\n// yield*\u3092\u4f7f\u3046\u30d1\u30bf\u30fc\u30f3\nfunction *mapSagaAsterisk() {\n  yield* range(1, num)\n    .map((num) => generatoFunc\uff08num, body))\n    .toArray();\n}\n\n\nImmutable.js\u3067\u5bfe\u8c61\u304cimmutable\u306a\u30c7\u30fc\u30bf\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\nconst { Iterable, Map } = 'immutable';\n\nIterable.isIterable({}); // false\nIterable.isIterable('hoge'); // false\nIterable.isIterable(Map({})); // true\nIterable.isIterable(Map({xxx: 'xxx'})); // true\n\n\nRedux\u306ebindActionCreators\u3067dispatch\u306b\u95a2\u9023\u4ed8\u3051\u3066connect\u3067mapDispatchToProps\u3057\u305faction\u3092\u305d\u306e\u307e\u307eonClick\u7b49\u306b\u6307\u5b9a\u3057\u305f\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3057\u305f\n\u30af\u30ea\u30c3\u30af\u3057\u3066\u304b\u3089\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067\u3082\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u307e\u3057\u305f\nWarning: This synthetic event is reused for performance reasons. \nIf you\\'re seeing this, you\\'re %s `%s` on a released/nullified synthetic event. \n%s. If you must keep the original synthetic event around, use event.persist(). \nSee https://fb.me/react-event-pooling for more information.\nor\nThis synthetic event is reused for performance reasons. \nIf you\\'re seeing this, you\\'re adding a new property in the synthetic event object. \nThe property is never released. See https://fb.me/react-event-pooling for more information.\n\n// App.jsx\nclass App extends Component {\n  render() {\n    return <Content {...this.ptops} />;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    xxx: state.hoge,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(Action, dispatch),\n  };\n}\n\nconnect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n\n// Content.jsx\nfunction Content({ action }) {\n  return (\n    <div>\n      <button onClick={action.update}></button>\n    </div>\n  );\n}\n\n\u2193\n\u4f55\u6545\u6cbb\u3063\u305f\u306e\u304b\u6839\u672c\u7684\u3068\u3053\u308d\u3067\u306f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u95a2\u6570\u3092\u4f5c\u3063\u3066\u4e2d\u3067\u5b9f\u884c\u3057\u305f\u3089Warning\u3082\u51fa\u306a\u304f\u306a\u308a\u901f\u5ea6\u3082\u6539\u5584\u3055\u308c\u307e\u3057\u305f\u3002action\u306e\u5f15\u6570\u306bevent\u304c\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4f59\u308a\u826f\u304f\u306a\u304b\u3063\u305f\u3093\u3060\u308d\u3046\u3050\u3089\u3044\u306e\u8a8d\u8b58\u3067\u3059\nfunction Content({ action }) {\n  return (\n    <div>\n      <button onClick={() => { action.update(); }}></button>\n    </div>\n  );\n}\n\n/* or */\n\nfunction Content({ action }) {\n  const handleClick = () => { action.update(); }\n  return (\n    <div>\n      <button onClick={handleClick}></button>\n    </div>\n  );\n}\n\n\n\u89aaComponent\u304b\u3089\u8907\u6570\u306e\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u6e21\u3055\u308c\u305ffunction\u306e\u6319\u52d5\n\u660e\u65e5\u66f8\u304f\n\n\u53c2\u8003\n- How to yield inside a forEach \u00b7 Issue #306 \u00b7 yelouafi/redux-saga\n- Is there any way to check if data is immutable? \u00b7 Issue #450 \u00b7 facebook/immutable-js\n- Event System | React\n- react/SyntheticEvent.js at master \u00b7 facebook/react\n###### \b\b\u203b\u968f\u6642\u66f4\u65b0\n\n# \u524d\u63d0\n\b\b- React\n- Redux\n- react-redux\n- redux-saga\n- redux-actions\n- Immutable.js\n\n\n# \u30e1\u30e2\n## redux-saga\u3067forEach\u3092\u4f7f\u3046\u3088\u3046\u306a\u51e6\u7406\u3092\u3057\u305f\u3044\u5834\u5408\n\n```js\nimport Range as range from 'immutable';\n```\n\n```js\n// \b\u3053\u308c\u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u30cd\u30b9\u30c8\u3092\u6df1\u304f\u3057\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3068\bcall\bback\u306f\u30a2\u30ed\u30fc\u95a2\u6570\u3067\u7d71\u4e00\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\nfunction *foreachSaga() {\n  range(1, max).forEach(function* (num) {\n       yield call(generatoFunc, num); \n    }\n  );\n}\n```\n\n\u2193\n\n```js\n\b// map\u3092\u4f7f\u3044yield\u306b\u914d\u5217\u3067\u308f\u305f\u3059\b\nfunction *mapSagaCall() {\n  yield range(1, num)\n    .map((num) => call(generatoFunc, num, body))\n    .toArray();\n}\n\n// yield*\u3092\u4f7f\u3046\u30d1\u30bf\u30fc\u30f3\nfunction *mapSaga\bAsterisk() {\n  yield\b* range(1, num)\n    .map((num) => generatoFunc\uff08num, body))\n    .toArray();\n}\n```\n\n\n## Immutable.js\u3067\u5bfe\u8c61\u304c\bimmutable\u306a\u30c7\u30fc\u30bf\u304b\u3069\u3046\u304b\b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n```js\nconst { Iterable, Map } = 'immutable';\n\nIterable.isIterable({}); // false\nIterable.isIterable('hoge'); // false\nIterable.isIterable(Map({})); // true\nIterable.isIterable(Map({xxx: 'xxx'})); // true\n```\n\n\n## \bRedux\u306ebindActionCreators\u3067dispatch\u306b\b\u95a2\u9023\u4ed8\u3051\u3066connect\b\u3067mapDispatchToProps\u3057\u305f\baction\u3092\u305d\u306e\u307e\u307eonClick\u7b49\u306b\u6307\u5b9a\u3057\u305f\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\b\u307e\u3057\u305f\n\n\u30af\u30ea\u30c3\u30af\u3057\u3066\u304b\u3089\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067\u3082\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u307e\u3057\u305f\n\n```\nWarning: This synthetic event is reused for performance reasons. \nIf you\\'re seeing this, you\\'re %s `%s` on a released/nullified synthetic event. \n%s. If you must keep the original synthetic event around, use event.persist(). \nSee https://fb.me/react-event-pooling for more information.\nor\nThis synthetic event is reused for performance reasons. \nIf you\\'re seeing this, you\\'re adding a new property in the synthetic event object. \nThe property is never released. See https://fb.me/react-event-pooling for more information.\n```\n\n```js\n// App.jsx\nclass App extends Component {\n  render() {\n    return <Content {...this.ptops} />;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    xxx: state.hoge,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    action: bindActionCreators(Action, dispatch),\n  };\n}\n\nconnect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n```\n\n```js\n// Content.jsx\nfunction Content({ action }) {\n  return (\n    <div>\n      <button onClick={action.update}></button>\n    </div>\n  );\n}\n```\n\n\u2193\n\n\u4f55\u6545\u6cbb\u3063\u305f\u306e\u304b\u6839\u672c\u7684\u3068\u3053\u308d\u3067\u306f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\b\u95a2\u6570\u3092\b\u4f5c\u3063\u3066\u4e2d\u3067\u5b9f\u884c\u3057\u305f\u3089Warning\u3082\u51fa\u306a\u304f\u306a\u308a\u901f\u5ea6\u3082\u6539\u5584\u3055\u308c\u307e\u3057\u305f\u3002\b\b\baction\u306e\u5f15\u6570\u306bevent\u304c\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4f59\u308a\u826f\u304f\u306a\u304b\u3063\u305f\u3093\u3060\u308d\u3046\u3050\u3089\u3044\u306e\u8a8d\u8b58\u3067\u3059\b\n\n```js\nfunction Content({ action }) {\n  return (\n    <div>\n      <button onClick={() => { action.update(); }}></button>\n    </div>\n  );\n}\n\n/* or */\n\nfunction Content({ action }) {\n  const handleClick = () => { action.update(); }\n  return (\n    <div>\n      <button onClick={handleClick}></button>\n    </div>\n  );\n}\n```\n\n## \u89aaComponent\u304b\u3089\u8907\u6570\u306e\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u6e21\u3055\u308c\u305ffunction\u306e\b\u6319\u52d5\n\n\b*\b\u660e\u65e5\u66f8\u304f*\n\n\n# \u53c2\u8003\n\b\b- [How to yield inside a forEach \u00b7 Issue #306 \u00b7 yelouafi/redux-saga](https://github.com/yelouafi/redux-saga/issues/306)\n- [Is there any way to check if data is immutable? \u00b7 Issue \\#450 \u00b7 facebook/immutable\\-js](https://github.com/facebook/immutable-js/issues/450)\n- [Event System \\| React](https://facebook.github.io/react/docs/events.html#event-pooling)\n- [react/SyntheticEvent\\.js at master \u00b7 facebook/react](https://github.com/facebook/react/blob/master/src/renderers/shared/stack/event/SyntheticEvent.js)\n", "tags": ["redux", "redux-saga", "reactjs", "immutable-js", "JavaScript"]}