{"context": "\u901a\u4fe1\u51e6\u7406\u306e\u30c6\u30b9\u30c8\u3092\u30e2\u30c3\u30af\u306b\u3059\u308b\u6642\u306b\u3001Mockingjay\u3068\u3044\u3046OSS\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3092\u3088\u304f\u898b\u307e\u3059\u3002\n\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304b\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u65e2\u5b58\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5165\u308c\u66ff\u3048 (Method Swizzling)\u3092\u884c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u610f\u5916\u3068\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u6700\u5c0f\u9650\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u3001URLSession\u3084Alamofire\u306e\u901a\u4fe1\u3092\u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u4f7f\u3048\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f8b\n\u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\u308b\u901a\u4fe1\u306e\u4f8b\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nAPI\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066 JSON Test \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n// URLSession\u306e\u5834\u5408\nlet url = URL(string: \"http://echo.jsontest.com/key/value/one/two\")!\nURLSession.shared.dataTask(with: url) { data, response, error in\n    let json = try! JSONSerialization.jsonObject(with: data!, options: .allowFragments)\n    print(json)\n}.resume()\n\n// Alamofire\u306e\u5834\u5408\nAlamofire.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n// \u5225\u306e\u66f8\u304d\u65b9\u3067\u3082OK\nSessionManager.default.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\n{\n    key = value;\n    one = two;\n}\n\n\nMethod Swizzling\u306b\u3088\u308bURLSessionConfiguration.default\u306e\u5165\u308c\u66ff\u3048\n\u4eca\u56de\u306fURLSessionConfiguration.default\u3092\u30e2\u30c3\u30af\u7528\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\nAlamofire.request\u3084SessionManager.default\u3082\u5185\u90e8\u3067\u3001URLSessionConfiguration.default\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nURLSessionConfiguration\u306bextension\u3067\u5165\u308c\u66ff\u3048\u6e96\u5099\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u5165\u308c\u66ff\u3048\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\npublic extension URLSessionConfiguration {\n\n    // .default\u3092\u30e2\u30c3\u30af\u7528\u3068\u5165\u308c\u66ff\u3048\u308b\u30e1\u30bd\u30c3\u30c9\n    public class func setupMockDefaultSessionConfiguration() {\n        let defaultSessionConfiguration = class_getClassMethod(URLSessionConfiguration.self, #selector(getter: URLSessionConfiguration.default))\n        let swizzledDefaultSessionConfiguration = class_getClassMethod(URLSessionConfiguration.self, #selector(getter: URLSessionConfiguration.mock))\n        method_exchangeImplementations(defaultSessionConfiguration, swizzledDefaultSessionConfiguration)\n    }\n\n    // .default\u3068\u5165\u308c\u66ff\u3048\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u5909\u6570\n    private dynamic class var mock: URLSessionConfiguration {\n        let configuration = self.mock\n        configuration.protocolClasses?.insert(MockURLProtocol.self, at: 0)\n        URLProtocol.registerClass(MockURLProtocol.self)\n        return configuration\n    }\n}\n\nmethod_exchangeImplementations\u3068\u3044\u3046API\u3092\u4f7f\u7528\u3057\u3066.default\u3068.mock\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\nURLSessionConfiguration\u306eprotocolClasses\u306b\u72ec\u81ea\u306eURLProtocol\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u901a\u4fe1\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nMockURLProtocol\u306f\u3053\u306e\u6b21\u306b\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\nURLProtocol.registerClass\u306f\u72ec\u81ea\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u8a8d\u8b58\u3055\u305b\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n(.mock\u306bdynamic\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306fprivate\u306a\u30e1\u30bd\u30c3\u30c9\u3092Selector\u578b\u3068\u3057\u3066\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002)\n\n\u30e2\u30c3\u30af\u7528\u306eURLProtocol\u306e\u5b9a\u7fa9\n\u5b9f\u88c5\u306e\u5165\u308c\u66ff\u3048\u306f\u4e0a\u8a18\u3067\u5b8c\u6210\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u5165\u308c\u66ff\u3048\u308b\u4e2d\u8eab\u3092\u4f5c\u308a\u307e\u3059\u3002\npublic class MockURLProtocol: URLProtocol {\n\n    // \u5f15\u6570\u306eURLRequest\u3092\u51e6\u7406\u3067\u304d\u308b\u5834\u5408\u306ftrue\n    override open class func canInit(with request:URLRequest) -> Bool {\n        return true\n    }\n\n    // URLRequest\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n    override open class func canonicalRequest(for request: URLRequest) -> URLRequest {\n        return request\n    }\n\n    // \u901a\u4fe1\u958b\u59cb\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u3053\u3053\u306b\u901a\u4fe1\u306e\u30e2\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n    override open func startLoading() {\n        let delay: Double = 1.0 // \u901a\u4fe1\u306b1\u79d2\u304b\u304b\u308b\u30e2\u30c3\u30af\n        DispatchQueue.global().asyncAfter(deadline: .now() + delay) {\n            self.client?.urlProtocol(self, didLoad: response!) // \u7d50\u679c\u3092\u8fd4\u3059\n            self.client?.urlProtocolDidFinishLoading(self)     // \u901a\u4fe1\u304c\u7d42\u4e86\u3057\u305f\u3053\u3068\u3092\u4f1d\u3048\u308b\n\n            // \u30a8\u30e9\u30fc\u6642\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3082\u3053\u3061\u3089\u3067\u53ef\u80fd\u3067\u3059\u3002\n            // self.client?.urlProtocol(self, didFailWithError: error)\n        }\n    }\n\n    // \u901a\u4fe1\u505c\u6b62\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\n    override open func stopLoading() {\n    }\n\n    private var response: Data? {\n        // URL\u306a\u3069\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u308b\n        // self.request.url\n        let json = \"{\\\"mock\\\": \\\"data\\\"}\"  // \u30e2\u30c3\u30af\u7528\u306eJSON\u30c7\u30fc\u30bf\n        return json.data(using: .utf8)\n    }\n}\n\noverride\u304c\u4ed8\u3044\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u88c5\u304c\u5fc5\u9808\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u7279\u306b\u91cd\u8981\u306a\u306e\u306fstartLoading\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u3053\u306e\u4e2d\u3067\u3001\nclient?.urlProtocol(self, didLoad: \u8fd4\u5374\u3059\u308bData)\nclient?.urlProtocolDidFinishLoading(self)\n\n\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u72ec\u81ea\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n(client\u306fURLProtocol\u304c\u6301\u3063\u3066\u3044\u308bURLProtocolClient\u3068\u3044\u3046\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059)\n\u3053\u306e\u4f8b\u3067\u306f\u6c7a\u3081\u6253\u3061\u306eJSON\u30c7\u30fc\u30bf\u3067\u3059\u304c\u3001URLProtocol\u306fURLRequest(self.request)\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067URL\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8003\u616e\u3057\u3066\u3001JSON\u3092\u51fa\u3057\u5206\u3051\u308b\u3053\u3068\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\n\n\u5b8c\u6210\n\u4ee5\u4e0a\u3067\u5b8c\u6210\u3067\u3059\u3002\n\u6700\u521d\u306e\u4f8b\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\n// \u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\nURLSessionConfiguration. setupMockDefaultSessionConfiguration()\n\n// Alamofire\u306e\u5834\u5408\nAlamofire.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n\n\u2193\n{\n    mock = data;\n}\n\n\u3053\u306e\u3088\u3046\u306b\u30e2\u30c3\u30af\u30c7\u30fc\u30bf\u306b\u5dee\u3057\u66ff\u3048\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3044\u3084\u3059\u304f\u3057\u305f\u3082\u306e\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6c17\u306b\u306a\u3063\u305f\u65b9\u306f\u305c\u3072\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\nhttps://github.com/tattn/Replacer\n\n\u95a2\u9023\nUsing NSURLProtocol for Testing\nhttps://yahooeng.tumblr.com/post/141143817861/using-nsurlprotocol-for-testing\n\u901a\u4fe1\u51e6\u7406\u306e\u30c6\u30b9\u30c8\u3092\u30e2\u30c3\u30af\u306b\u3059\u308b\u6642\u306b\u3001[Mockingjay](https://github.com/kylef/Mockingjay)\u3068\u3044\u3046OSS\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3092\u3088\u304f\u898b\u307e\u3059\u3002\n\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304b\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u65e2\u5b58\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5165\u308c\u66ff\u3048 (Method Swizzling)\u3092\u884c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u610f\u5916\u3068\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u6700\u5c0f\u9650\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u3001URLSession\u3084Alamofire\u306e\u901a\u4fe1\u3092\u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u4f7f\u3048\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u4f8b\n\n\u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\u308b\u901a\u4fe1\u306e\u4f8b\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nAPI\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066 [JSON Test](http://www.jsontest.com/) \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```swift\n// URLSession\u306e\u5834\u5408\nlet url = URL(string: \"http://echo.jsontest.com/key/value/one/two\")!\nURLSession.shared.dataTask(with: url) { data, response, error in\n    let json = try! JSONSerialization.jsonObject(with: data!, options: .allowFragments)\n    print(json)\n}.resume()\n\n// Alamofire\u306e\u5834\u5408\nAlamofire.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n// \u5225\u306e\u66f8\u304d\u65b9\u3067\u3082OK\nSessionManager.default.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n{\n    key = value;\n    one = two;\n}\n```\n\n# Method Swizzling\u306b\u3088\u308b`URLSessionConfiguration.default`\u306e\u5165\u308c\u66ff\u3048\n\n\u4eca\u56de\u306f`URLSessionConfiguration.default`\u3092\u30e2\u30c3\u30af\u7528\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n`Alamofire.request`\u3084`SessionManager.default`\u3082\u5185\u90e8\u3067\u3001`URLSessionConfiguration.default`\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nURLSessionConfiguration\u306bextension\u3067\u5165\u308c\u66ff\u3048\u6e96\u5099\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u5165\u308c\u66ff\u3048\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```swift\npublic extension URLSessionConfiguration {\n\n    // .default\u3092\u30e2\u30c3\u30af\u7528\u3068\u5165\u308c\u66ff\u3048\u308b\u30e1\u30bd\u30c3\u30c9\n    public class func setupMockDefaultSessionConfiguration() {\n        let defaultSessionConfiguration = class_getClassMethod(URLSessionConfiguration.self, #selector(getter: URLSessionConfiguration.default))\n        let swizzledDefaultSessionConfiguration = class_getClassMethod(URLSessionConfiguration.self, #selector(getter: URLSessionConfiguration.mock))\n        method_exchangeImplementations(defaultSessionConfiguration, swizzledDefaultSessionConfiguration)\n    }\n\n    // .default\u3068\u5165\u308c\u66ff\u3048\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u5909\u6570\n    private dynamic class var mock: URLSessionConfiguration {\n        let configuration = self.mock\n        configuration.protocolClasses?.insert(MockURLProtocol.self, at: 0)\n        URLProtocol.registerClass(MockURLProtocol.self)\n        return configuration\n    }\n}\n```\n\n`method_exchangeImplementations`\u3068\u3044\u3046API\u3092\u4f7f\u7528\u3057\u3066`.default`\u3068`.mock`\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\n\n`URLSessionConfiguration`\u306e`protocolClasses`\u306b\u72ec\u81ea\u306eURLProtocol\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u901a\u4fe1\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nMockURLProtocol\u306f\u3053\u306e\u6b21\u306b\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\n`URLProtocol.registerClass`\u306f\u72ec\u81ea\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u8a8d\u8b58\u3055\u305b\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n(`.mock`\u306b`dynamic`\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306fprivate\u306a\u30e1\u30bd\u30c3\u30c9\u3092Selector\u578b\u3068\u3057\u3066\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3067\u3059\u3002)\n\n# \u30e2\u30c3\u30af\u7528\u306eURLProtocol\u306e\u5b9a\u7fa9\n\n\u5b9f\u88c5\u306e\u5165\u308c\u66ff\u3048\u306f\u4e0a\u8a18\u3067\u5b8c\u6210\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u5165\u308c\u66ff\u3048\u308b\u4e2d\u8eab\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```swift\npublic class MockURLProtocol: URLProtocol {\n\n    // \u5f15\u6570\u306eURLRequest\u3092\u51e6\u7406\u3067\u304d\u308b\u5834\u5408\u306ftrue\n    override open class func canInit(with request:URLRequest) -> Bool {\n        return true\n    }\n\n    // URLRequest\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n    override open class func canonicalRequest(for request: URLRequest) -> URLRequest {\n        return request\n    }\n\n    // \u901a\u4fe1\u958b\u59cb\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3001\u3053\u3053\u306b\u901a\u4fe1\u306e\u30e2\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n    override open func startLoading() {\n        let delay: Double = 1.0 // \u901a\u4fe1\u306b1\u79d2\u304b\u304b\u308b\u30e2\u30c3\u30af\n        DispatchQueue.global().asyncAfter(deadline: .now() + delay) {\n            self.client?.urlProtocol(self, didLoad: response!) // \u7d50\u679c\u3092\u8fd4\u3059\n            self.client?.urlProtocolDidFinishLoading(self)     // \u901a\u4fe1\u304c\u7d42\u4e86\u3057\u305f\u3053\u3068\u3092\u4f1d\u3048\u308b\n\n            // \u30a8\u30e9\u30fc\u6642\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3082\u3053\u3061\u3089\u3067\u53ef\u80fd\u3067\u3059\u3002\n            // self.client?.urlProtocol(self, didFailWithError: error)\n        }\n    }\n\n    // \u901a\u4fe1\u505c\u6b62\u6642\u306b\u547c\u3070\u308c\u308b\u30e1\u30bd\u30c3\u30c9\n    override open func stopLoading() {\n    }\n\n    private var response: Data? {\n        // URL\u306a\u3069\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u7d50\u679c\u3092\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u308b\n        // self.request.url\n        let json = \"{\\\"mock\\\": \\\"data\\\"}\"  // \u30e2\u30c3\u30af\u7528\u306eJSON\u30c7\u30fc\u30bf\n        return json.data(using: .utf8)\n    }\n}\n```\n\n`override`\u304c\u4ed8\u3044\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u88c5\u304c\u5fc5\u9808\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n\u7279\u306b\u91cd\u8981\u306a\u306e\u306f`startLoading`\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u3053\u306e\u4e2d\u3067\u3001\n\n```swift\nclient?.urlProtocol(self, didLoad: \u8fd4\u5374\u3059\u308bData)\nclient?.urlProtocolDidFinishLoading(self)\n```\n\n\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u72ec\u81ea\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n(client\u306fURLProtocol\u304c\u6301\u3063\u3066\u3044\u308bURLProtocolClient\u3068\u3044\u3046\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059)\n\n\n\u3053\u306e\u4f8b\u3067\u306f\u6c7a\u3081\u6253\u3061\u306eJSON\u30c7\u30fc\u30bf\u3067\u3059\u304c\u3001URLProtocol\u306fURLRequest(`self.request`)\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067URL\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8003\u616e\u3057\u3066\u3001JSON\u3092\u51fa\u3057\u5206\u3051\u308b\u3053\u3068\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\n\n\n# \u5b8c\u6210\n\n\u4ee5\u4e0a\u3067\u5b8c\u6210\u3067\u3059\u3002\n\n\u6700\u521d\u306e\u4f8b\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\n\n```swift\n// \u30b9\u30bf\u30d6\u306b\u7f6e\u304d\u63db\u3048\nURLSessionConfiguration. setupMockDefaultSessionConfiguration()\n\n// Alamofire\u306e\u5834\u5408\nAlamofire.request(\"http://echo.jsontest.com/key/value/one/two\").responseJSON { response in\n    print(response.result.value!)\n}\n```\n\n\u2193\n\n```\n{\n    mock = data;\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u30e2\u30c3\u30af\u30c7\u30fc\u30bf\u306b\u5dee\u3057\u66ff\u3048\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n# \u6700\u5f8c\u306b\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3044\u3084\u3059\u304f\u3057\u305f\u3082\u306e\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6c17\u306b\u306a\u3063\u305f\u65b9\u306f\u305c\u3072\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\nhttps://github.com/tattn/Replacer\n\n# \u95a2\u9023\n\nUsing NSURLProtocol for Testing\nhttps://yahooeng.tumblr.com/post/141143817861/using-nsurlprotocol-for-testing\n", "tags": ["iOS", "Swift", "Alamofire", "\u9ed2\u9b54\u8853"]}