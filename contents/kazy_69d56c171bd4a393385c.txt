{"context": "RxJava AdventCalendar\u306e\u521d\u65e5\u306f\u3001lift\u306b\u3064\u3044\u3066\u3001\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u521d\u5b66\u8005\u306a\u306e\u3067\u9593\u9055\u3063\u305f\u7406\u89e3\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u3054\u6307\u6458\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u4e00\u90e8\u8aac\u660e\u306e\u7aef\u6298\u308b\u90e8\u5206\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7c21\u7565\u5316\u306e\u305f\u3081\u306a\u306e\u3067\u3054\u4e86\u627f\u4e0b\u3055\u3044\n\nlift\u3068\u306f\u306a\u306b\u304b\nRxjava\u306f\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u51e6\u7406\u3092\u7e4b\u3052\u3066\u66f8\u304f\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304clift\u3067\u3059\u3002\n\u666e\u6bb5\u306e\u958b\u767a\u3067lift\u3092\u898b\u304b\u3051\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001map\u3084filter\u306a\u3069\u6b86\u3069\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u306e\u4e2d\u8eab\u306flift\u3068Operator<R, T> \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002lift\u3092\u7406\u89e3\u3059\u308b\u3068\u3001\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30e0\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3082\u4f5c\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002 Implementing Your Own Operators \nlift\u306ejavadoc\u306b\u3088\u308b\u8aac\u660e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u3067\u3059\u3002javadoc\nLifts a function to the current Observable and returns a new Observable that when subscribed to will pass the values of the current Observable through the Operator function.\nIn other words, this allows chaining Observers together on an Observable for acting on the values within the Observable.\n\nobservable.map(...).filter(...).take(5).lift(new OperatorA()).lift(new OperatorB(...)).subscribe()\n\nIf the operator you are creating is designed to act on the individual items emitted by a source Observable, use lift. If your operator is designed to transform the source Observable as a whole (for instance, by applying a particular set of existing RxJava operators to it) use Observable.compose(rx.Observable.Transformer<? super T, ? extends R>).\n\n(javadoc\u306e\u4e2d\u3067\u767b\u5834\u3059\u308bcompose\u306b\u3064\u3044\u3066\u306f\u300112/5\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n\nlift\u306e\u4ed5\u7d44\u307f\nmap\u3092\u4f8b\u306b\u3068\u3063\u3066lift\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\nmap\u3068\u306f\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u52a0\u5de5\u3057\u3066\u8fd4\u3059\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u306f\u3001\u6e21\u3063\u3066\u304d\u305f\u6587\u5b57\u5217\u3092int\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n.map(text -> {\n   return Integer.valueOf(text);\n})\n\n\u3067\u306fmap\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002map\u3068\u306f \u300cT\u3092\u53d7\u3051\u53d6\u3063\u3066R\u3092\u8fd4\u3059Func1\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001Observable<R>\u3092\u8fd4\u3059\u300d\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\npublic final <R> Observable<R> map(Func1<? super T, ? extends R> func) {\n   return lift(new OperatorMap<T, R>(func));\n}\n\nmap\u306e\u5b9f\u88c5\u3067\u767b\u5834\u3059\u308b OperatorMap\u3068\u306f\u5148\u307b\u3069\u51fa\u3066\u304d\u305f\u3001Operator<R, T>\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\u3002\u3067\u306fOperatorMap\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u3044\u307f\u307e\u3057\u3087\u3046\u3002\npublic final class OperatorMap<T, R> implements Observable.Operator<R, T> {\n\n    private final Func1<? super T, ? extends R> transformer;\n\n    public OperatorMap(Func1<? super T, ? extends R> transformer) {\n        this.transformer = transformer;\n    }\n\n    @Override\n    public Subscriber<? super T> call(final Subscriber<? super R> o) {\n        return new Subscriber<T>(o) {\n\n            @Override\n            public void onCompleted() {\n                o.onCompleted();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                o.onError(e);\n            }\n\n            @Override\n            public void onNext(T t) {\n                try {\n                    o.onNext(transformer.call(t));\n                } catch (Throwable e) {\n                    Exceptions.throwOrReport(e, this, t);\n                }\n            }\n\n        };\n    }\n}\n\n\u601d\u3063\u305f\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u306d\u3002Subscriber<? super R>\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001Subscriber<? super T>\u3092\u8fd4\u3059call\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3060\u3051\u3067\u3059\u3002\nOperatorMap\u306e\u5834\u5408\u306f\u3001\u300cmap\u304c\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305fFunc\u300d\u3092onNext\u306e\u5f15\u6570\u306b\u9069\u5fdc\u3057\u3001\u300cOperatorMap#call\u306e\u5f15\u6570\u306eo(Subscriber)#onNext\u300d\u306b\u305d\u306e\u5024\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308aOperator\u3068\u306f\u300c\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066->\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3057\u3066->\u307e\u305f\u767a\u4fe1\u3059\u308b\u300d\u5f79\u5272\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002 OperatorMap\u4ee5\u5916\u306eOperator\u3082\u51e6\u7406\u306e\u8907\u96d1\u3055\u306f\u69d8\u3005\u3067\u3059\u304c\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001Operator\u3068\u306f\u300cSubscriber\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001Subscriber\u3092\u8fd4\u3059Func1\u300d\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u3067\u306f\u3001OperatorMap#call\u3067\u6e21\u3055\u308c\u308bSubscriber\u306f\u3069\u3053\u304b\u3089\u6765\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u305d\u3053\u3067\u3001lift\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u307e\u3059\u3002\npublic final <R> Observable<R> lift(final Operator<? extends R, ? super T> operator) {\n    return new Observable<R>(new OnSubscribe<R>() {\n        @Override\n        public void call(Subscriber<? super R> o) {\n            try {\n                Subscriber<? super T> st = hook.onLift(operator).call(o);\n                try {\n                    st.onStart();\n                    onSubscribe.call(st);\n                } catch (Throwable e) {\n                    Exceptions.throwIfFatal(e);\n                    st.onError(e);\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                o.onError(e);\n            }\n        }\n    });\n}\n\nlift\u306e\u4e2d\u3067\u306f\u3001\u65b0\u3057\u3044Observable\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u3066\u3057\u3066\u3044\u307e\u3059\u3002\u5148\u307b\u3069\u306eSubscriber\u306f\u65b0\u3057\u304f\u4f5c\u3089\u308c\u305fObservable\u306e\u5f15\u6570\u306eOnSubscribe\u304b\u3089\u6e21\u3063\u3066\u304d\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u3002lift\u306e\u5b9f\u88c5\u3067\u91cd\u8981\u306a\u306e\u306f\u4ee5\u4e0b\u306e\uff13\u884c\u3067\u3059\u3002\nSubscriber<? super T> st = hook.onLift(operator).call(o);\nst.onStart();\nonSubscribe.call(st);\n\n\u4eca\u56de\u306fhook.onLift(operator)\u306e\u90e8\u5206\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001operator.call(o)\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002Subscriber#onStart\u3082\u5b9f\u8cea\u4f55\u3082\u3057\u306a\u3044\u306e\u3068\u8003\u3048\u3066\u826f\u3044\u306e\u3067\u3001\u3088\u308a\u7c21\u5358\u306b\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\nSubscriber<? super T> st = operator.call(o);\nonSubscribe.call(st);\n\no\u3068\u3044\u3046\u306e\u306fmap\u3088\u308a\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u5f8c\u308d\u3067\u63a5\u7d9a\u3055\u308c\u308c\u308bSubscriber\u3060\u3068\u8003\u3048\u3066\u308b\u3068\u3001\u69cb\u9020\u304c\u5927\u4f53\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u306d\u3002\no\u304c\u6e21\u3055\u308c\u308b\u3068\u3001o\u3092\u3082\u3068\u306b\u300coperator\u304c\u9069\u5fdc\u3055\u308c\u305fSubscriber\u300d\u304cOperator<R, T>#call\u306b\u3088\u3063\u3066\u4f5c\u3089\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u300coperator\u304c\u9069\u5fdc\u3055\u308c\u305fSubscriber\u300d\u3092\u4f7f\u3044\u3001\u89aa\u306eObservable(lift\u5185\u90e8\u3067new\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u65b9)\u306e\u51e6\u7406\u3092call\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u672b\u7aef\u304b\u3089\u59cb\u307e\u308a(\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4e0b\u304b\u3089\u4e0a)\u306b\u5411\u3051\u3066\u3001OnSubscribe#call\u304c\u4f1d\u64ad\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u304c\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\nRxjava\u3092\u5b66\u3076\u3068\u4e00\u756a\u521d\u3081\u306b\u8e93\u304f\u306e\u304clift\u3060\u3068\u601d\u3044\u307e\u3059\u3002lift\u304c\u7406\u89e3\u3067\u304d\u308b\u3068\u3001\u4eca\u307e\u3067\u9b54\u6cd5\u306e\u3088\u3046\u306b\u601d\u3063\u3066\u3044\u305fsubscribeOn\u3084observeOn\u3082lift\u3068Opertor<R,T>\u306e\u7d44\u308f\u305b\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067(\u3082\u306e\u3059\u3054\u304f\u96e3\u3057\u3044\u3067\u3059\u304c)\u8aad\u307f\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002Rxjava\u306f\u81ea\u5206\u3067\u7406\u89e3\u3067\u304d\u3066\u3082\u4ed6\u4eba\u306b\u8aac\u660e\u3059\u308b\u306e\u304c\u3082\u306e\u3059\u3054\u304f\u96e3\u3057\u3044\u3068\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3057\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u304c\u3069\u306a\u305f\u304b\u306e\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308c\u305f\u3089\u3001\u5e78\u3044\u3067\u3059\u3002\nRxJava AdventCalendar\u306e\u521d\u65e5\u306f\u3001`lift`\u306b\u3064\u3044\u3066\u3001\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u521d\u5b66\u8005\u306a\u306e\u3067\u9593\u9055\u3063\u305f\u7406\u89e3\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u3054\u6307\u6458\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u4e00\u90e8\u8aac\u660e\u306e\u7aef\u6298\u308b\u90e8\u5206\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u7c21\u7565\u5316\u306e\u305f\u3081\u306a\u306e\u3067\u3054\u4e86\u627f\u4e0b\u3055\u3044\n\n### lift\u3068\u306f\u306a\u306b\u304b\n\nRxjava\u306f\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u51e6\u7406\u3092\u7e4b\u3052\u3066\u66f8\u304f\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u306e\u304c`lift`\u3067\u3059\u3002\n\u666e\u6bb5\u306e\u958b\u767a\u3067`lift`\u3092\u898b\u304b\u3051\u308b\u3053\u3068\u306f\u5c11\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001`map`\u3084`filter`\u306a\u3069\u6b86\u3069\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u306e\u4e2d\u8eab\u306f`lift`\u3068`Operator<R, T>` \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\u3002`lift`\u3092\u7406\u89e3\u3059\u308b\u3068\u3001\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30e0\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3082\u4f5c\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002 [Implementing Your Own Operators](https://github.com/\nReactiveX/RxJava/wiki/Implementing-Your-Own-Operators) \n\nlift\u306ejavadoc\u306b\u3088\u308b\u8aac\u660e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u3067\u3059\u3002[javadoc](http://reactivex.io/RxJava/javadoc/rx/Observable.html#lift(rx.Observable.Operator))\n\n```\nLifts a function to the current Observable and returns a new Observable that when subscribed to will pass the values of the current Observable through the Operator function.\nIn other words, this allows chaining Observers together on an Observable for acting on the values within the Observable.\n\nobservable.map(...).filter(...).take(5).lift(new OperatorA()).lift(new OperatorB(...)).subscribe()\n\nIf the operator you are creating is designed to act on the individual items emitted by a source Observable, use lift. If your operator is designed to transform the source Observable as a whole (for instance, by applying a particular set of existing RxJava operators to it) use Observable.compose(rx.Observable.Transformer<? super T, ? extends R>).\n```\n\n(javadoc\u306e\u4e2d\u3067\u767b\u5834\u3059\u308b`compose`\u306b\u3064\u3044\u3066\u306f\u300112/5\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n\n\n### lift\u306e\u4ed5\u7d44\u307f\n\n`map`\u3092\u4f8b\u306b\u3068\u3063\u3066`lift`\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n`map`\u3068\u306f\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u52a0\u5de5\u3057\u3066\u8fd4\u3059\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u306f\u3001\u6e21\u3063\u3066\u304d\u305f\u6587\u5b57\u5217\u3092int\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java\n.map(text -> {\n   return Integer.valueOf(text);\n})\n```\n\n\u3067\u306fmap\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002`map`\u3068\u306f \u300cT\u3092\u53d7\u3051\u53d6\u3063\u3066R\u3092\u8fd4\u3059`Func1`\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001`Observable<R>`\u3092\u8fd4\u3059\u300d\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\n\n```java\npublic final <R> Observable<R> map(Func1<? super T, ? extends R> func) {\n   return lift(new OperatorMap<T, R>(func));\n}\n```\n\n`map`\u306e\u5b9f\u88c5\u3067\u767b\u5834\u3059\u308b `OperatorMap`\u3068\u306f\u5148\u307b\u3069\u51fa\u3066\u304d\u305f\u3001`Operator<R, T>`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\u3002\u3067\u306f`OperatorMap`\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u3044\u307f\u307e\u3057\u3087\u3046\u3002\n \n ```java\npublic final class OperatorMap<T, R> implements Observable.Operator<R, T> {\n\n    private final Func1<? super T, ? extends R> transformer;\n\n    public OperatorMap(Func1<? super T, ? extends R> transformer) {\n        this.transformer = transformer;\n    }\n\n    @Override\n    public Subscriber<? super T> call(final Subscriber<? super R> o) {\n        return new Subscriber<T>(o) {\n\n            @Override\n            public void onCompleted() {\n                o.onCompleted();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                o.onError(e);\n            }\n\n            @Override\n            public void onNext(T t) {\n                try {\n                    o.onNext(transformer.call(t));\n                } catch (Throwable e) {\n                    Exceptions.throwOrReport(e, this, t);\n                }\n            }\n\n        };\n    }\n}\n ```\n\n\u601d\u3063\u305f\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u306d\u3002`Subscriber<? super R>`\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001`Subscriber<? super T>`\u3092\u8fd4\u3059`call`\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3060\u3051\u3067\u3059\u3002\n\n`OperatorMap`\u306e\u5834\u5408\u306f\u3001\u300c`map`\u304c\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f`Func`\u300d\u3092`onNext`\u306e\u5f15\u6570\u306b\u9069\u5fdc\u3057\u3001\u300c`OperatorMap#call`\u306e\u5f15\u6570\u306e`o(Subscriber)#onNext`\u300d\u306b\u305d\u306e\u5024\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a`Operator`\u3068\u306f\u300c\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066->\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u3057\u3066->\u307e\u305f\u767a\u4fe1\u3059\u308b\u300d\u5f79\u5272\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002 OperatorMap\u4ee5\u5916\u306e`Operator`\u3082\u51e6\u7406\u306e\u8907\u96d1\u3055\u306f\u69d8\u3005\u3067\u3059\u304c\u4f3c\u305f\u3088\u3046\u306a\u3053\u3068\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u307e\u3067\u3067\u3001`Operator`\u3068\u306f\u300c`Subscriber`\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001`Subscriber`\u3092\u8fd4\u3059`Func1`\u300d\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u3067\u306f\u3001`OperatorMap#call`\u3067\u6e21\u3055\u308c\u308b`Subscriber`\u306f\u3069\u3053\u304b\u3089\u6765\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u305d\u3053\u3067\u3001`lift`\u306e\u5b9f\u88c5\u3092\u8997\u3044\u3066\u307f\u307e\u3059\u3002\n\n```java\npublic final <R> Observable<R> lift(final Operator<? extends R, ? super T> operator) {\n    return new Observable<R>(new OnSubscribe<R>() {\n        @Override\n        public void call(Subscriber<? super R> o) {\n            try {\n                Subscriber<? super T> st = hook.onLift(operator).call(o);\n                try {\n                    st.onStart();\n                    onSubscribe.call(st);\n                } catch (Throwable e) {\n                    Exceptions.throwIfFatal(e);\n                    st.onError(e);\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                o.onError(e);\n            }\n        }\n    });\n}\n```\n\n`lift`\u306e\u4e2d\u3067\u306f\u3001\u65b0\u3057\u3044Observable\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u3066\u3057\u3066\u3044\u307e\u3059\u3002\u5148\u307b\u3069\u306e`Subscriber`\u306f\u65b0\u3057\u304f\u4f5c\u3089\u308c\u305fObservable\u306e\u5f15\u6570\u306eOnSubscribe\u304b\u3089\u6e21\u3063\u3066\u304d\u3066\u3044\u305f\u3093\u3067\u3059\u306d\u3002`lift `\u306e\u5b9f\u88c5\u3067\u91cd\u8981\u306a\u306e\u306f\u4ee5\u4e0b\u306e\uff13\u884c\u3067\u3059\u3002\n\n```java\nSubscriber<? super T> st = hook.onLift(operator).call(o);\nst.onStart();\nonSubscribe.call(st);\n```\n\n\u4eca\u56de\u306f`hook.onLift(operator)`\u306e\u90e8\u5206\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001`operator.call(o)`\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002`Subscriber#onStart`\u3082\u5b9f\u8cea\u4f55\u3082\u3057\u306a\u3044\u306e\u3068\u8003\u3048\u3066\u826f\u3044\u306e\u3067\u3001\u3088\u308a\u7c21\u5358\u306b\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```java\nSubscriber<? super T> st = operator.call(o);\nonSubscribe.call(st);\n```\n\n`o`\u3068\u3044\u3046\u306e\u306f`map`\u3088\u308a\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u5f8c\u308d\u3067\u63a5\u7d9a\u3055\u308c\u308c\u308b`Subscriber`\u3060\u3068\u8003\u3048\u3066\u308b\u3068\u3001\u69cb\u9020\u304c\u5927\u4f53\u308f\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u306d\u3002\n`o`\u304c\u6e21\u3055\u308c\u308b\u3068\u3001`o`\u3092\u3082\u3068\u306b\u300c`operator`\u304c\u9069\u5fdc\u3055\u308c\u305f`Subscriber`\u300d\u304c`Operator<R, T>#call`\u306b\u3088\u3063\u3066\u4f5c\u3089\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u300c`operator`\u304c\u9069\u5fdc\u3055\u308c\u305f`Subscriber`\u300d\u3092\u4f7f\u3044\u3001\u89aa\u306eObservable(lift\u5185\u90e8\u3067new\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u65b9)\u306e\u51e6\u7406\u3092call\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u672b\u7aef\u304b\u3089\u59cb\u307e\u308a(\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u4e0b\u304b\u3089\u4e0a)\u306b\u5411\u3051\u3066\u3001`OnSubscribe#call`\u304c\u4f1d\u64ad\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u304c\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002\n\n### \u307e\u3068\u3081\n\nRxjava\u3092\u5b66\u3076\u3068\u4e00\u756a\u521d\u3081\u306b\u8e93\u304f\u306e\u304c`lift`\u3060\u3068\u601d\u3044\u307e\u3059\u3002`lift`\u304c\u7406\u89e3\u3067\u304d\u308b\u3068\u3001\u4eca\u307e\u3067\u9b54\u6cd5\u306e\u3088\u3046\u306b\u601d\u3063\u3066\u3044\u305f`subscribeOn`\u3084`observeOn`\u3082`lift`\u3068`Opertor<R,T>`\u306e\u7d44\u308f\u305b\u3067\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067(\u3082\u306e\u3059\u3054\u304f\u96e3\u3057\u3044\u3067\u3059\u304c)\u8aad\u307f\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002Rxjava\u306f\u81ea\u5206\u3067\u7406\u89e3\u3067\u304d\u3066\u3082\u4ed6\u4eba\u306b\u8aac\u660e\u3059\u308b\u306e\u304c\u3082\u306e\u3059\u3054\u304f\u96e3\u3057\u3044\u3068\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3057\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u304c\u3069\u306a\u305f\u304b\u306e\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308c\u305f\u3089\u3001\u5e78\u3044\u3067\u3059\u3002\n", "tags": ["Android", "RxJava"]}