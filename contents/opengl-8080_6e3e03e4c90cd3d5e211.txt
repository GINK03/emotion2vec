{"tags": ["Java", "jpa", "glassfish", "JavaEE", "EclipseLink"], "context": " More than 1 year has passed since last update.\u74b0\u5883\u69cb\u7bc9\nJPA \u306e\u57fa\u672c\u7684\u306a\u8a71\n\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u8a71\nJPQL \u306e\u8a71\n\u30b3\u30fc\u30c9\n\n\u30af\u30e9\u30a4\u30c6\u30ea\u30a2API \u3068\u306f\nJPQL \u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u52d5\u7684\u306b\u751f\u6210\u3059\u308b\u305f\u3081\u306e API\u3002\n\u6587\u5b57\u5217\u9023\u7d50\u3067 JPQL \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u3001\u69cb\u6587\u30df\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u30ec\u30d9\u30eb\u3067\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\n\u30af\u30e9\u30a4\u30c6\u30ea\u30a2 API \u3092\u4f7f\u3048\u3070 Java \u30d7\u30ed\u30b0\u30e9\u30e0\u3067 JPQL \u306e\u69cb\u7bc9\u304c\u3067\u304d\u308b\u306e\u3067\u3001 JPQL \u306e\u69cb\u6587\u30df\u30b9\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n\n\u57fa\u672c\n\n\u5b9f\u88c5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nKisume.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Kisume {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"Kisume{\" + \"id=\" + id + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\npackage sample.javaee.jpa.ejb;\n\nimport javax.ejb.Stateless;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport sample.javaee.jpa.entity.criteria.Kisume;\n\n@Stateless\npublic class CriteriaEjb {\n\n    @PersistenceContext(unitName = \"SampleUnit\")\n    private EntityManager em;\n\n    public void hello() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<Kisume> query = builder.createQuery(Kisume.class);\n\n        Root<Kisume> root = query.from(Kisume.class);\n        query.select(root)\n             .where(builder.lessThan(root.get(\"id\"), 3L));\n\n        TypedQuery<Kisume> q = this.em.createQuery(query);\n        System.out.println(q.getResultList());\n    }\n}\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [Kisume{id=1}, Kisume{id=2}]\n\n\n\n\u8aac\u660e\n\nCriteriaEjb.java\uff08\u4e00\u90e8\uff09\nCriteriaBuilder builder = this.em.getCriteriaBuilder();\nCriteriaQuery<Kisume> query = builder.createQuery(Kisume.class);\n\nRoot<Kisume> root = query.from(Kisume.class);\nquery.select(root)\n     .where(builder.lessThan(root.get(\"id\"), 3L));\n\nTypedQuery<Kisume> q = this.em.createQuery(query);\nSystem.out.println(q.getResultList());\n\n\n\u3053\u306e\u5b9f\u88c5\u306f\u3001\u6b21\u306e JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\nSELECT k\n  FROM Kisume k\n WHERE k.id < 3\n\n\u30af\u30e9\u30a4\u30c6\u30ea\u30a2 API \u3092\u4f7f\u3046\u3068\u304d\u306e\u304a\u304a\u307e\u304b\u306a\u624b\u9806\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\nEntityManager#getCriteriaBuilder() \u3067 CriteriaBuilder \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nCriteriaBuilder#createQuery() \u3067 CriteriaQuery \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\n\u3053\u306e\u3068\u304d\u3001 createQuery() \u306e\u5f15\u6570\u306b\u306f\u3001\u6700\u7d42\u7684\u306b\u53d6\u5f97\u3059\u308b\u691c\u7d22\u7d50\u679c\u306e\u578b\uff08Class\uff09\u3092\u6e21\u3059\u3002\n\n\n\nCriteriaQuery#from() \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u6307\u5b9a\u3059\u308b\u3002\n\nCriteriaQuery#select() \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u53d6\u5f97\u3059\u308b\u9805\u76ee\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\u3092\u6307\u5b9a\u3059\u308b\u3002\n\nCriteriaQuery#where() \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u7d30\u304b\u3044\u691c\u7d22\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u30af\u30a8\u30ea\u306e\u69cb\u7bc9\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001 EntityManager#createQuery(CriteriaQuery) \u3067 Query \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u5f8c\u306f\u3001\u540d\u524d\u4ed8\u304d\u30af\u30a8\u30ea\u3092\u4f7f\u7528\u3057\u305f\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b Query#getResultList() \u306a\u3069\u3067\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\n\u30e1\u30bf\u30e2\u30c7\u30eb\uff08Metamodel\uff09\n\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306a\u3069\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3068\u304b\u3092\u5909\u66f4\u3057\u305f\u3068\u304d\u306b\u4fee\u6b63\u6f0f\u308c\u304c\u767a\u751f\u3059\u308b\u304a\u305d\u308c\u304c\u3042\u308b\u3002\nJPA 2.0 \u3067\u8ffd\u52a0\u3055\u308c\u305f\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u305d\u306e\u3078\u3093\u306e\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u57fa\u672c\n\n\u5b9f\u88c5\n\n\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\n|-build.gradle\n`-src/main/\n   |-resources/META-INF/\n   |  `-persistence.xml\n   `-java/sample/jpa/\n      |-entity/\n      |  `-TestTable.java\n      `-web/\n         |-HelloEjb.java\n         `-HelloServlet.java\n\n\n\nbuild.gradle\napply plugin: 'war'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    providedCompile 'javax:javaee-api:7.0'\n    providedCompile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.5.0'\n}\n\nsourceCompatibility = '1.8'\ntargetCompatibility = '1.8'\n\ncompileJava {\n    def path = new File(project.projectDir, 'src/main/resources/META-INF/persistence.xml').absolutePath\n    options.compilerArgs.addAll '-Aeclipselink.persistencexml=' + path\n}\n\nwar.baseName = 'jpa-mdetamodel'\n\n\n\npersistence.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\"\n  xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n  http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n\n  <persistence-unit name=\"SampleUnit\">\n    <jta-data-source>jdbc/Local_MySQL_test</jta-data-source>\n  </persistence-unit>\n</persistence>\n\n\n\nTestTable.java\npackage sample.jpa.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"test_table\")\npublic class TestTable {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"TestTable [id=\" + id + \", value=\" + value + \"]\";\n    }\n}\n\n\n\nHelloEjb.java\npackage sample.jpa.web;\n\nimport javax.ejb.Stateless;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\n\nimport sample.jpa.entity.TestTable;\nimport sample.jpa.entity.TestTable_;\n\n@Stateless\npublic class HelloEjb {\n\n    @PersistenceContext(unitName=\"SampleUnit\")\n    private EntityManager em;\n\n    public void metamodel() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<TestTable> query = builder.createQuery(TestTable.class);\n\n        Root<TestTable> root = query.from(TestTable.class);\n        query.select(root);\n\n        Predicate idEqual2 = builder.equal(root.get(TestTable_.id), 2L);\n        query.where(idEqual2);\n\n        this.em.createQuery(query).getResultList().forEach(System.out::println);\n    }\n}\n\n\n\nHelloServlet.java\npackage sample.jpa.web;\n\nimport java.io.IOException;\n\nimport javax.ejb.EJB;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n\n    @EJB\n    private HelloEjb ejb;\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        this.ejb.hello();\n    }\n}\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\n\u30d3\u30eb\u30c9\n> gradle war\n\n\nbuild/libs/jpa-metamodel.war \u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001 GlassFish \u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3002\nhttp://localhost:8080/jpa-metamodel/metamodel \u306b GET \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3002\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n[2015-05-26T22:42:42.861+0900] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1432647762861] [levelValue: 800] [[TestTable [id=2, value=buzz]]]\n\n\n\n\u8aac\u660e\n\n\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\n\nHelloEjb.java\nimport sample.jpa.entity.TestTable;\nimport sample.jpa.entity.TestTable_;\n\n...\n\n    public void metamodel() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<TestTable> query = builder.createQuery(TestTable.class);\n\n        Root<TestTable> root = query.from(TestTable.class);\n        query.select(root);\n\n        Predicate idEqual2 = builder.equal(root.get(TestTable_.id), 2L);\n        query.where(idEqual2);\n\n        this.em.createQuery(query).getResultList().forEach(System.out::println);\n    }\n\n\n\n\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u751f\u6210\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\u306e\u540d\u524d\u306e\u672b\u5c3e\u306b\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc (_) \u304c\u4ed8\u3044\u305f\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u3002\n\n\n\u4e0a\u8a18\u4f8b\u306e\u5834\u5408\u3001 TestTable_ \u30af\u30e9\u30b9\u304c TestTable \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30e1\u30bf\u30e2\u30c7\u30eb\u306b\u306a\u308b\u3002\n\n\n\u30e1\u30bf\u30e2\u30c7\u30eb\u306b\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u6301\u3064\u3082\u306e\u3068\u540c\u3058\u540d\u524d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u691c\u7d22\u6761\u4ef6\u306e\u69cb\u7bc9\u306a\u3069\u3092\u9759\u7684\u306b\u3001\u304b\u3064\u578b\u5b89\u5168\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f TestTable_ \u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nTestTable_.java\npackage sample.jpa.entity;\n\nimport javax.annotation.Generated;\nimport javax.persistence.metamodel.SingularAttribute;\nimport javax.persistence.metamodel.StaticMetamodel;\n\n@Generated(value=\"EclipseLink-2.5.0.v20130507-rNA\", date=\"2015-05-26T22:35:16\")\n@StaticMetamodel(TestTable.class)\npublic class TestTable_ { \n\n    public static volatile SingularAttribute<TestTable, Long> id;\n    public static volatile SingularAttribute<TestTable, String> value;\n\n}\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3055\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n\nbuild.gradle\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    providedCompile 'javax:javaee-api:7.0'\n    providedCompile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.5.0'\n}\n\ncompileJava {\n    def path = new File(project.projectDir, 'src/main/resources/META-INF/persistence.xml').absolutePath\n    options.compilerArgs.addAll '-Aeclipselink.persistencexml=' + path\n}\n\n\n\n\u30e1\u30bf\u30e2\u30c7\u30eb\u306f\u3001\u6ce8\u91c8\u51e6\u7406\u3067\u81ea\u52d5\u751f\u6210\u3055\u305b\u308b\u3002\nGlassFish 4.1 \u306e\u5834\u5408\u3001 JPA \u306e\u5b9f\u88c5\u306f EclipseLink 2.5.0 \u306a\u306e\u3067\u3001 EclipseLink \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30e1\u30bf\u30e2\u30c7\u30eb\u751f\u6210\u7528\u306e jar \u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3059\u308b\uff08org.eclipse.persistence.jpa.modelgen.processor\uff09\u3002\nEclipseLink \u3067\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u751f\u6210\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b -Aeclipselink.persistencexml \u30aa\u30d7\u30b7\u30e7\u30f3\u306b persistence.xml \u3078\u306e\u30d1\u30b9\u3092\u6e21\u3059\u3002\n\n\nEclipse \u3067\u958b\u767a\u3059\u308b\u5834\u5408\nEclipse \u306a\u3069\u306e IDE \u3067\u958b\u767a\u3059\u308b\u5834\u5408\u3001\u6ce8\u91c8\u51e6\u7406\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u81ea\u52d5\u3067\u8d70\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30d5\u30a1\u30bb\u30c3\u30c8\u300d\u3092\u6709\u52b9\u306b\u3057\u3066\u3001 [JPA] \u306e\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b [JPA] \u304c\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u9078\u629e\u3002\n\u300c\u6b63\u898f\u30e1\u30bf\u30e2\u30c7\u30eb\uff08JPA 2.0\uff09\u300d\u306e\u300c\u30bd\u30fc\u30b9\u30fb\u30d5\u30a9\u30eb\u30c0\u30fc\u300d\u3067\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u542b\u3080\u30bd\u30fc\u30b9\u30d5\u30a9\u30eb\u30c0\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\u3053\u308c\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30bd\u30fc\u30b9\u3068\u540c\u3058\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u30bd\u30fc\u30b9\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\u691c\u7d22\u6761\u4ef6\u3092\u69cb\u7bc9\u3059\u308b\n\n\u57fa\u672c\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nKurodaniYmame.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kurodani_yamame\")\npublic class KurodaniYmame {\n    @Id\n    private Long id;\n    private String string;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"KurodaniYmame{\" + \"id=\" + id + \", string=\" + string + \", number=\" + number + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KurodaniYmame> query = builder.createQuery(KurodaniYmame.class);\n\n    Root<KurodaniYmame> root = query.from(KurodaniYmame.class);\n\n    query.select(root)\n         .where(\n             builder.greaterThanOrEqualTo(root.get(KurodaniYmame_.number), 200),\n             builder.like(root.get(KurodaniYmame_.string), \"%o%\")\n         );\n\n    TypedQuery<KurodaniYmame> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [KurodaniYmame{id=2, string=two, number=200}, KurodaniYmame{id=4, string=four, number=400}]\n\n\n\u3053\u308c\u306f\u3001\u6b21\u306e JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\nSELECT k\n  FROM KurodaniYamame k\n WHERE 200 <= k.number\n   AND k.string LIKE '%o%'\n\n\n\nCriteriaQuery#where() \u3067\u3001\u691c\u7d22\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u5f15\u6570\u306b\u6e21\u3059\u6761\u4ef6\u5f0f\uff08Expression\uff09\u306f\u3001 CriteriaBuilder \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3059\u308b\u3002\n\n\nJPQL \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6761\u4ef6\u5f0f\u3068\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u304b\u3089\u3060\u3044\u305f\u3044\u7528\u9014\u3092\u60f3\u50cf\u3067\u304d\u308b\u3002 CriteriaBuilder \u306e Javadoc\n\n\n\n\nCriteriaBuilder \u306b\u5b9a\u7fa9\u3055\u308c\u305f\u6761\u4ef6\u5f0f\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u57fa\u672c\u7684\u306b\u6b21\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u3002\n\n\n\u7b2c\u4e00\u5f15\u6570\u306b\u6bd4\u8f03\u3057\u305f\u3044\u9805\u76ee\u3002\n\u7b2c\u4e8c\u5f15\u6570\u306b\u6bd4\u8f03\u5024\u3002\n\n\n\u6bd4\u8f03\u3057\u305f\u3044\u9805\u76ee\u306f\u3001 Root#get() \u30e1\u30bd\u30c3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u3002\n\nwhere() \u30e1\u30bd\u30c3\u30c9\u306f\u6761\u4ef6\u5f0f\u3092\u53ef\u5909\u9577\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u8907\u6570\u306e\u6761\u4ef6\u5f0f\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u3089\u306f AND \u3067\u7d50\u5408\u3055\u308c\u308b\u3002\n\n\n\n\nOR \u6761\u4ef6\u3092\u4f7f\u7528\u3059\u308b\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nMizuhashiParsee.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"mizuhashi_parsee\")\npublic class MizuhashiParsee {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"MizuhashiParsee{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<MizuhashiParsee> query = builder.createQuery(MizuhashiParsee.class);\n\n    Root<MizuhashiParsee> root = query.from(MizuhashiParsee.class);\n\n    query.select(root)\n         .where(\n             builder.or(\n                 builder.equal(root.get(MizuhashiParsee_.id), 1L),\n                 builder.equal(root.get(MizuhashiParsee_.id), 3L)\n             )\n         );\n\n    TypedQuery<MizuhashiParsee> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [MizuhashiParsee{id=1, value=hoge}, MizuhashiParsee{id=3, value=piyo}]\n\n\nJPQL \u306f\u6b21\u3068\u540c\u3058\u306b\u306a\u308b\u3002\nSELECT m\n  FROM MizuhashiParsee m\n WHERE m.id = 1\n    OR m.id = 3\n\n\n\nCriteriaBuilder#or() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001 OR \u6761\u4ef6\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3002\n\u5f15\u6570\u306f\u53ef\u5909\u9577\u5f15\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8907\u6570\u306e\u6761\u4ef6\u3092\u9023\u7d50\u3067\u304d\u308b\u3002\n\nCriteriaBuilder#and() \u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308b\u306e\u3067\u3001 AND \u6761\u4ef6\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\nIN \u3084 IS NULL\nIN \u3084 IS NULL \u306f CriteriaBuilder \u304b\u3089\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\u3001 Root#get() \u3067\u53d6\u5f97\u3057\u305f Path \u304b\u3089\u4f5c\u308b\u3002\nRoot<MizuhashiParsee> root = query.from(MizuhashiParsee.class);\n\nquery.select(root)\n     .where(root.get(MizuhashiParsee_.id).isNotNull())\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u5b9f\u88c5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nHoshigumaYugi.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hoshiguma_yugi\")\npublic class HoshigumaYugi {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"HoshigumaYugi{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<HoshigumaYugi> query = builder.createQuery(HoshigumaYugi.class);\n\n    Root<HoshigumaYugi> root = query.from(HoshigumaYugi.class);\n\n    ParameterExpression<Long> id = builder.parameter(Long.class);\n    ParameterExpression<String> value = builder.parameter(String.class);\n\n    query.select(root)\n         .where(\n             builder.or(\n                 builder.equal(root.get(HoshigumaYugi_.id), id),\n                 builder.equal(root.get(HoshigumaYugi_.value), value)\n             )\n         );\n\n    TypedQuery<HoshigumaYugi> q = this.em.createQuery(query);\n    q.setParameter(id, 2L);\n    q.setParameter(value, \"piyo\");\n\n    System.out.println(q.getResultList());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [HoshigumaYugi{id=2, value=fuga}, HoshigumaYugi{id=3, value=piyo}]\n\n\n\n\u8aac\u660e\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\nParameterExpression<Long> id = builder.parameter(Long.class);\nParameterExpression<String> value = builder.parameter(String.class);\n\n\nCriteriaBuilder#parameter(Class) \u3067\u3001 ParameterExpression \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30af\u30a8\u30ea\u306b\u57cb\u3081\u8fbc\u3080\nquery.select(root)\n     .where(\n         builder.or(\n             builder.equal(root.get(HoshigumaYugi_.id), id),\n             builder.equal(root.get(HoshigumaYugi_.value), value)\n         )\n     );\n\n\n\u6b21\u306b\u3001 CriteriaBuilder#equal() \u306a\u3069\u3067\u6761\u4ef6\u5f0f\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306b\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f ParameterExpression \u3092\u6bd4\u8f03\u5024\u3068\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u3002\n\nQuery\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\nTypedQuery<HoshigumaYugi> q = this.em.createQuery(query);\nq.setParameter(id, 2L);\nq.setParameter(value, \"piyo\");\n\n\n\u6700\u5f8c\u306b\u3001 Query#<T>setParameter(Parameter<T>, T) \u3067\u30af\u30a8\u30ea\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3002\n\u7b2c\u4e00\u5f15\u6570\u306e Parameter<T> \u306b\u306f\u3001\u6700\u521d\u306b\u4f5c\u6210\u3057\u305f ParameterExpression<T> \u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff08ParameterExpression \u306f Parameter \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\uff09\u3002\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u95a2\u9023\u3092\u8fbf\u308b\n\n\u5b9f\u88c5\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nKomeijiSatori.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"komeiji_satori\")\npublic class KomeijiSatori {\n    @Id\n    private Long id;\n    @JoinColumn(name=\"komeiji_koishi_id\")\n    private KomeijiKoishi komeijiKoishi;\n\n    @Override\n    public String toString() {\n        return \"KomeijiSatori{\" + \"id=\" + id + \", komeijiKoishi=\" + komeijiKoishi + '}';\n    }\n}\n\n\n\nKomeijiKoishi.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"komeiji_koishi\")\npublic class KomeijiKoishi {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"KomeijiKoishi{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KomeijiSatori> query = builder.createQuery(KomeijiSatori.class);\n\n    Root<KomeijiSatori> root = query.from(KomeijiSatori.class);\n\n    query.select(root)\n         .where(\n             builder.equal(\n                 root.get(KomeijiSatori_.komeijiKoishi)\n                     .get(KomeijiKoishi_.value),\n                 \"fuga\"\n             )\n         );\n\n    TypedQuery<KomeijiSatori> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [KomeijiSatori{id=2, komeijiKoishi=KomeijiKoishi{id=2, value=fuga}}]\n\n\n\n\u8aac\u660e\n\u4e0a\u8a18\u5b9f\u88c5\u306f\u3001\u4e0b\u8a18 JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\nSELECT k\n  FROM KomeijiSaori k\n WHERE k.komeijiKoishi.value = 'fuga'\n\nquery.select(root)\n     .where(\n         builder.equal(\n             root.get(KomeijiSatori_.komeijiKoishi)\n                 .get(KomeijiKoishi_.value),\n             \"fuga\"\n         )\n     );\n\n\n\nRoot#get() \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u3001\u3055\u3089\u306b get() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u95a2\u9023\u3092\u8fbf\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u4efb\u610f\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 SELECT \u3059\u308b\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nKaenbyoRin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kaenbyo_rin\")\npublic class KaenbyoRin {\n    @Id\n    private Long id;\n    private int number;\n    private String string;\n\n    @Override\n    public String toString() {\n        return \"KaenbyoRin{\" + \"id=\" + id + \", number=\" + number + \", string=\" + string + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\n\u57fa\u672c\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<String> query = builder.createQuery(String.class);\n\n    Root<KaenbyoRin> root = query.from(KaenbyoRin.class);\n    query.select(root.get(KaenbyoRin_.string));\n\n    TypedQuery<String> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [hoge, fuga, piyo]\n\n\nJPQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308b\u3002\nSELECT k.string\n  FROM KaenbyoRin k\n\n\n\nCriteriaQuery.select() \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u3001 Root#get() \u3067\u53d6\u5f97\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e Selection \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u3051\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\nTuple \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3059\u308b\n\nCriteriaEjb.java\nimport javax.persistence.criteria.Path;\nimport javax.persistence.Tuple;\n\n...\n\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createTupleQuery();\n\n    Root<KaenbyoRin> root = query.from(KaenbyoRin.class);\n    Path<Integer> number = root.get(KaenbyoRin_.number)\n    Path<String> string = root.get(KaenbyoRin_.string);\n\n    query.select(builder.tuple(number, string));\n\n    TypedQuery<Tuple> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .stream()\n     .map(tuple -> \"{\" + tuple.get(number) + \", \" + tuple.get(string) + \"}\")\n     .forEach(System.out::println);\n\n\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   {111, hoge}\n\u60c5\u5831:   {222, fuga}\n\u60c5\u5831:   {333, piyo}\n\n\nJPQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308b\u3002\nSELECT k.number\n      ,k.string\n  FROM KaenbyoRin k\n\n\n\u691c\u7d22\u7d50\u679c\u3092 Tuple \u578b\u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n\nTuple \u3068\u306f\u3001\u8907\u6570\u306e\u5024\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u3092\u8868\u3057\u3066\u3044\u308b\uff08\uff12\u3064\u4ee5\u4e0a\u3082\u53ef\uff09\u3002\n\nCriteriaQuery<Tuple> \u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u30e1\u30bd\u30c3\u30c9\uff08createTupleQuery()\uff09\u304c CriteriaBuilder \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff08createQuery(Tuple.class) \u3068\u610f\u5473\u306f\u540c\u3058\uff09\u3002\n\n\n\nCriteriaQuery#select() \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u306f\u3001 CriteriaBuilder#tuple() \u3067\u4f5c\u6210\u3057\u305f CompoundSelection \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3059\u3002\n\u691c\u7d22\u7d50\u679c\u306e Tuple \u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306f\u3001 Root#get() \u30e1\u30bd\u30c3\u30c9\u3067\u4e88\u3081\u53d6\u5f97\u3057\u3066\u304a\u3044\u305f Path \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u3068\u5b89\u5168\u3002\n\n\n\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u3092 SELECT \u3059\u308b\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nReiujiUtsubo.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"reiuji_utsubo\")\npublic class ReiujiUtsubo {\n    @Id\n    private Long id;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"ReiujiUtsubo{\" + \"id=\" + id + \", number=\" + number + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Integer> query = builder.createQuery(Integer.class);\n\n    Root<ReiujiUtsubo> root = query.from(ReiujiUtsubo.class);\n    query.select(builder.sum(root.get(ReiujiUtsubo_.number)));\n\n    TypedQuery<Integer> q = this.em.createQuery(query);\n    System.out.println(q.getSingleResult());\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   600\n\n\n\n\nCriteriaBuilder \u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f0f\u3092 CriteriaQuery.select() \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3002\n\n\nORDER BY\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nNazrin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Nazrin {\n    @Id\n    private Long id;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"Nazrin{\" + \"id=\" + id + \", number=\" + number + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Nazrin> query = builder.createQuery(Nazrin.class);\n\n    Root<Nazrin> root = query.from(Nazrin.class);\n    query.select(root)\n         .orderBy(builder.desc(root.get(Nazrin_.number)));\n\n    TypedQuery<Nazrin> q = this.em.createQuery(query);\n    q.getResultList().forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   Nazrin{id=2, number=300}\n\u60c5\u5831:   Nazrin{id=1, number=200}\n\u60c5\u5831:   Nazrin{id=3, number=100}\n\n\nJPQL \u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n  SELECT n\n    FROM Nazrin n\nORDER BY n.number DESC\n\n\n\nCriteriaBuilder#asc(Expression) \u307e\u305f\u306f CriteriaBuilder#desc(Expression) \u3067\u3001 Order \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n\u751f\u6210\u3057\u305f Order \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001 CriteriaQuery#orderBy(Order...) \u306b\u6e21\u3059\u3002\n\n\nGROUP BY \u3068 HAVING\n\nGROUP BY\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nTataraKogasa.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"tatara_kogasa\")\npublic class TataraKogasa {\n    @Id\n    private Long id;\n    private String string;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"TataraKogasa{\" + \"id=\" + id + \", string=\" + string + \", number=\" + number + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\nimport javax.persistence.criteria.Expression;\n\n...\n\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createQuery(Tuple.class);\n\n    Root<TataraKogasa> root = query.from(TataraKogasa.class);\n    Path<String> string = root.get(TataraKogasa_.string);\n    Expression<Integer> sum = builder.sum(root.get(TataraKogasa_.number));\n\n    query.select(builder.tuple(string, sum))\n         .groupBy(string);\n\n    TypedQuery<Tuple> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .stream()\n     .map(tuple -> tuple.get(string) + \" -> \" + tuple.get(sum))\n     .forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   fuga -> 150\n\u60c5\u5831:   hoge -> 80\n\u60c5\u5831:   piyo -> 130\n\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n  SELECT t.string\n        ,SUM(t.number)\n    FROM TataraKogasa t\nGROUP BY t.string\n\n\n\nCriteriaQuery#groupBy(Expression<?>...) \u3067\u3001\u96c6\u7d04\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u691c\u7d22\u7d50\u679c\u306f Tuple \u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u5947\u9e97\u306b\u5024\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\nHAVING\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createQuery(Tuple.class);\n\n    Root<TataraKogasa> root = query.from(TataraKogasa.class);\n    Path<String> string = root.get(TataraKogasa_.string);\n    Expression<Integer> sum = builder.sum(root.get(TataraKogasa_.number));\n\n    query.select(builder.tuple(string, sum))\n-        .groupBy(string);\n+        .groupBy(string)\n+        .having(builder.greaterThan(sum, 100));\n\n    TypedQuery<Tuple> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .stream()\n     .map(tuple -> tuple.get(string) + \" -> \" + tuple.get(sum))\n     .forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   fuga -> 150\n\u60c5\u5831:   piyo -> 130\n\n\nJPQL \u306b\u3059\u308b\u3068\u4ee5\u4e0b\u3002\n  SELECT t.string\n        ,SUM(t.number)\n    FROM TataraKogasa t\nGROUP BY t.string\n  HAVING 100 < SUM(t.number)\n\n\n\nCriteriaQuery#having(Expression<Boolean>) \u3067\u3001 HAVING \u53e5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\nJOIN\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nKumoiIchirin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kumoi_ichirin\")\npublic class KumoiIchirin {\n    @Id\n    private Long id;\n    @OneToMany(fetch = FetchType.EAGER)\n    @JoinColumn(name=\"ichirin_id\")\n    private List<KumoiUnzan> unzanList;\n\n    @Override\n    public String toString() {\n        return \"KumoiIchirin{\" + \"id=\" + id + \", unzanList=\" + unzanList + '}';\n    }\n}\n\n\n\nKumoiUnzan.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kumoi_unzan\")\npublic class KumoiUnzan {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"KumoiUnzan{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KumoiIchirin> query = builder.createQuery(KumoiIchirin.class);\n\n    Root<KumoiIchirin> root = query.from(KumoiIchirin.class);\n    Join<KumoiIchirin, KumoiUnzan> join = root.join(KumoiIchirin_.unzanList);\n\n    query.select(root)\n         .distinct(true)\n         .where(builder.like(join.get(KumoiUnzan_.value), \"%e%\"));\n\n    TypedQuery<KumoiIchirin> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n  SELECT \nDISTINCT ki\n    FROM KumoiIchirin ki\n    JOIN ki.unzanList ul\n   WHERE ul.value LIKE '%e%'\n\n\n\nRoot#join() \u30e1\u30bd\u30c3\u30c9\u3067\u3001 JPQL \u306e JOIN \u3092\u5b9f\u884c\u3067\u304d\u308b\u3002\n\n\nFETCH JOIN\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KumoiIchirin> query = builder.createQuery(KumoiIchirin.class);\n\n    Root<KumoiIchirin> root = query.from(KumoiIchirin.class);\n    root.fetch(KumoiIchirin_.unzanList);\n\n    query.select(root)\n         .distinct(true);\n\n    TypedQuery<KumoiIchirin> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u666e\u901a:   SELECT DISTINCT t1.ID, t0.ID, t0.VALUE FROM kumoi_unzan t0, kumoi_ichirin t1 WHERE (t0.ichirin_id = t1.ID)\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n\u60c5\u5831:   KumoiIchirin{id=3, unzanList=[KumoiUnzan{id=6, value=six}]}\n\n\n\n\u30ea\u30b9\u30c8\u9805\u76ee\uff08unzanList\uff09\u306e\u53d6\u5f97\u304c\u30011 \u3064\u306e SQL \u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3002\n\nRoot#fetch() \u3067\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 FETCH JOIN \u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u3001 FETCH JOIN \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u666e\u901a:   SELECT DISTINCT ID FROM kumoi_ichirin\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n    bind => [1]\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n    bind => [2]\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n    bind => [3]\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n\u60c5\u5831:   KumoiIchirin{id=3, unzanList=[KumoiUnzan{id=6, value=six}]}\n\n\n\n\u30b5\u30d6\u30af\u30a8\u30ea\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"murasa_minamitsu\")\npublic class MurasaMinamitsu {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"MurasaMinamitsu{\" + \"id=\" + id + '}';\n    }\n}\n\n\nToramaruShou.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"toramaru_shou\")\npublic class ToramaruShou {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"ToramaruShou{\" + \"id=\" + id + '}';\n    }\n}\n\n\n\u30c7\u30fc\u30bf\n\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<MurasaMinamitsu> query = builder.createQuery(MurasaMinamitsu.class);\n\n    Subquery<Long> subquery = query.subquery(Long.class);\n    Root<ToramaruShou> toramaru = subquery.from(ToramaruShou.class);\n    subquery.select(toramaru.get(ToramaruShou_.id));\n\n    Root<MurasaMinamitsu> murasa = query.from(MurasaMinamitsu.class);\n    query.select(murasa)\n         .where(murasa.get(MurasaMinamitsu_.id).in(subquery));\n\n    TypedQuery<MurasaMinamitsu> q = this.em.createQuery(query);\n\n    q.getResultList()\n     .forEach(System.out::println);\n\n\n\u5b9f\u884c\u7d50\u679c\n\nGlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   MurasaMinamitsu{id=1}\n\u60c5\u5831:   MurasaMinamitsu{id=3}\n\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nSELECT m\n  FROM MurasaMinamitsu m\n WHERE m.id IN (\n       SELECT t.id\n         FROM ToramaruShou t\n     )\n\n\n\nCriteriaQuery#subquery(Class) \u3067\u3001\u30b5\u30d6\u30af\u30a8\u30ea\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e Subquery \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\n\u5f15\u6570\u306e Class \u306f\u3001\u6700\u7d42\u7684\u306b\u30b5\u30d6\u30af\u30a8\u30ea\u304c\u8fd4\u3059\u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\n\u30b5\u30d6\u30af\u30a8\u30ea\u306e\u69cb\u7bc9\u306f\u3001 CriteriaQuery \u306e\u5834\u5408\u3068\u540c\u3058\u8981\u9818\u3067\u884c\u3046\u3002\n\u6700\u5f8c\u306b\u3001\u3067\u304d\u4e0a\u304c\u3063\u305f Subquery \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30e1\u30a4\u30f3\u306e CriteriaQuery \u306e\u6761\u4ef6\u5f0f\u306b\u6e21\u3057\u3066\u5229\u7528\u3059\u308b\u3002\n\n\nUPDATE, DELETE\n\nUPDATE\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nHijiriByakuren.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hijiri_byakuren\")\npublic class HijiriByakuren {\n    @Id\n    private Long id;\n    private String value;\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaUpdate<HijiriByakuren> update = builder.createCriteriaUpdate(HijiriByakuren.class);\n\n    Root<HijiriByakuren> root = update.from(HijiriByakuren.class);\n\n    update.set(root.get(HijiriByakuren_.value), \"update!!\")\n          .where(root.get(HijiriByakuren_.id).in(1, 3));\n\n    Query q = this.em.createQuery(update);\n    q.executeUpdate();\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\n\nUPDATE \u6587\u3092\u767a\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u307e\u305a CriteriaBuilder#createCriteriaUpdate(Class) \u3067 CriteriaUpdate \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\n\u5f15\u6570\u306e Class \u306b\u306f\u3001\u66f4\u65b0\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e Class \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3002\n\n\n\nCriteriaUpdate#set() \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u66f4\u65b0\u3057\u305f\u3044\u9805\u76ee\u3068\u3001\u66f4\u65b0\u5f8c\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\nCriteriaUpdate \u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u3089\u3001 EntityManager#createQuery(CriteriaUpdate) \u3092\u4f7f\u3063\u3066 Query \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n\u53d6\u5f97\u3057\u305f Query \u306e executeUpdate() \u3067\u66f4\u65b0\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u6761\u4ef6\u306e\u8a2d\u5b9a\u306f CriteriaQuery \u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u540c\u69d8\u3002\n\n\nDELETE\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb\n\n\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\n\nHojuNue.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hojo_nue\")\npublic class HojuNue {\n    @Id\n    private Long id;\n}\n\n\n\u30c7\u30fc\u30bf\n\n\u5b9f\u88c5\n\nCriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaDelete<HojuNue> delete = builder.createCriteriaDelete(HojuNue.class);\n\n    Root<HojuNue> root = delete.from(HojuNue.class);\n\n    delete.where(builder.equal(root.get(HojuNue_.id), 2L));\n\n    Query q = this.em.createQuery(delete);\n    q.executeUpdate();\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\n\nDELETE \u6587\u3092\u767a\u884c\u3059\u308b\u5834\u5408\u306f\u3001 EntityManager#createQueryDelete(Class) \u3067 CriteriaDelete \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u3042\u3068\u306f\u3001 UPDATE \u306e\u5834\u5408\u3068\u540c\u3058\u3002\n\n\n\u53c2\u8003\n\nJava Persistence API (JPA) \u5b9f\u8df5\u5165\u9580 - \u3072\u3060\u307e\u308a\u30bd\u30b1\u30c3\u30c8\u306f\u58ca\u308c\u306a\u3044\nUserGuide/JPA/Using the Canonical Model Generator (ELUG) - Eclipsepedia\nJava\u6280\u8853\u6700\u524d\u7dda - \u300cJava SE 6\u5b8c\u5168\u653b\u7565\u300d\u7b2c97\u56de \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u51e6\u7406\u3059\u308b \u305d\u306e4\uff1aITpro\neclipse\u3067JPA\u306e\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u8a2d\u5b9a - \u3058\u3083\u3070\u3089\u306e\u624b\u8a18\nJSR-000338 Java Persistence 2.1 Final Release for Evaluation\nhibernate - JPA CriteriaBuilder - How to use \"IN\" comparison operator - Stack Overflow\n\u6771\u65b9Project\u306e\u767b\u5834\u4eba\u7269 - Wikipedia\n\n[\u74b0\u5883\u69cb\u7bc9](http://qiita.com/opengl-8080/items/aeda0d8bad42af3113bd)\n[JPA \u306e\u57fa\u672c\u7684\u306a\u8a71](http://qiita.com/opengl-8080/items/e4840aa3e33b42ae0d6b)\n[\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u8a71](http://qiita.com/opengl-8080/items/265f9f66a65e966678cb)\n[JPQL \u306e\u8a71](http://qiita.com/opengl-8080/items/e074330b5f4862d9995f)\n\n[\u30b3\u30fc\u30c9](https://github.com/opengl8080-javaee-samples/jpa)\n\n#\u30af\u30e9\u30a4\u30c6\u30ea\u30a2API \u3068\u306f\nJPQL \u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u52d5\u7684\u306b\u751f\u6210\u3059\u308b\u305f\u3081\u306e API\u3002\n\n\u6587\u5b57\u5217\u9023\u7d50\u3067 JPQL \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u3001\u69cb\u6587\u30df\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u30ec\u30d9\u30eb\u3067\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\n\u30af\u30e9\u30a4\u30c6\u30ea\u30a2 API \u3092\u4f7f\u3048\u3070 Java \u30d7\u30ed\u30b0\u30e9\u30e0\u3067 JPQL \u306e\u69cb\u7bc9\u304c\u3067\u304d\u308b\u306e\u3067\u3001 JPQL \u306e\u69cb\u6587\u30df\u30b9\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n\n#\u57fa\u672c\n##\u5b9f\u88c5\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/43075d41-d19f-5d1b-0e6d-d464a3c9bec7.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:Kisume.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Kisume {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"Kisume{\" + \"id=\" + id + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/897acaa7-f99e-a3a8-d04d-72baf726d1e1.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\npackage sample.javaee.jpa.ejb;\n\nimport javax.ejb.Stateless;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport sample.javaee.jpa.entity.criteria.Kisume;\n\n@Stateless\npublic class CriteriaEjb {\n\n    @PersistenceContext(unitName = \"SampleUnit\")\n    private EntityManager em;\n    \n    public void hello() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<Kisume> query = builder.createQuery(Kisume.class);\n        \n        Root<Kisume> root = query.from(Kisume.class);\n        query.select(root)\n             .where(builder.lessThan(root.get(\"id\"), 3L));\n        \n        TypedQuery<Kisume> q = this.em.createQuery(query);\n        System.out.println(q.getResultList());\n    }\n}\n```\n\n**\u52d5\u4f5c\u78ba\u8a8d**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [Kisume{id=1}, Kisume{id=2}]\n```\n\n##\u8aac\u660e\n```java:CriteriaEjb.java\uff08\u4e00\u90e8\uff09\nCriteriaBuilder builder = this.em.getCriteriaBuilder();\nCriteriaQuery<Kisume> query = builder.createQuery(Kisume.class);\n\nRoot<Kisume> root = query.from(Kisume.class);\nquery.select(root)\n     .where(builder.lessThan(root.get(\"id\"), 3L));\n\nTypedQuery<Kisume> q = this.em.createQuery(query);\nSystem.out.println(q.getResultList());\n```\n\n\u3053\u306e\u5b9f\u88c5\u306f\u3001\u6b21\u306e JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n```sql:\nSELECT k\n  FROM Kisume k\n WHERE k.id < 3\n```\n\n\u30af\u30e9\u30a4\u30c6\u30ea\u30a2 API \u3092\u4f7f\u3046\u3068\u304d\u306e\u304a\u304a\u307e\u304b\u306a\u624b\u9806\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n- `EntityManager#getCriteriaBuilder()` \u3067 `CriteriaBuilder` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n- `CriteriaBuilder#createQuery()` \u3067 `CriteriaQuery` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n    - \u3053\u306e\u3068\u304d\u3001 `createQuery()` \u306e\u5f15\u6570\u306b\u306f\u3001\u6700\u7d42\u7684\u306b\u53d6\u5f97\u3059\u308b\u691c\u7d22\u7d50\u679c\u306e\u578b\uff08`Class`\uff09\u3092\u6e21\u3059\u3002\n- `CriteriaQuery#from()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u6307\u5b9a\u3059\u308b\u3002\n- `CriteriaQuery#select()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u53d6\u5f97\u3059\u308b\u9805\u76ee\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09\u3092\u6307\u5b9a\u3059\u308b\u3002\n- `CriteriaQuery#where()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u7d30\u304b\u3044\u691c\u7d22\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u3002\n- \u30af\u30a8\u30ea\u306e\u69cb\u7bc9\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001 `EntityManager#createQuery(CriteriaQuery)` \u3067 `Query` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u5f8c\u306f\u3001\u540d\u524d\u4ed8\u304d\u30af\u30a8\u30ea\u3092\u4f7f\u7528\u3057\u305f\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b `Query#getResultList()` \u306a\u3069\u3067\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\n#\u30e1\u30bf\u30e2\u30c7\u30eb\uff08Metamodel\uff09\n\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306a\u3069\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u3066\u3044\u308b\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3068\u304b\u3092\u5909\u66f4\u3057\u305f\u3068\u304d\u306b\u4fee\u6b63\u6f0f\u308c\u304c\u767a\u751f\u3059\u308b\u304a\u305d\u308c\u304c\u3042\u308b\u3002\n\nJPA 2.0 \u3067\u8ffd\u52a0\u3055\u308c\u305f\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u305d\u306e\u3078\u3093\u306e\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n##\u57fa\u672c\n###\u5b9f\u88c5\n```text:\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\n|-build.gradle\n`-src/main/\n   |-resources/META-INF/\n   |  `-persistence.xml\n   `-java/sample/jpa/\n      |-entity/\n      |  `-TestTable.java\n      `-web/\n         |-HelloEjb.java\n         `-HelloServlet.java\n```\n\n```groovy:build.gradle\napply plugin: 'war'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    providedCompile 'javax:javaee-api:7.0'\n    providedCompile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.5.0'\n}\n\nsourceCompatibility = '1.8'\ntargetCompatibility = '1.8'\n\ncompileJava {\n    def path = new File(project.projectDir, 'src/main/resources/META-INF/persistence.xml').absolutePath\n    options.compilerArgs.addAll '-Aeclipselink.persistencexml=' + path\n}\n\nwar.baseName = 'jpa-mdetamodel'\n```\n\n```xml:persistence.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"2.1\"\n  xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n  http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n\n  <persistence-unit name=\"SampleUnit\">\n    <jta-data-source>jdbc/Local_MySQL_test</jta-data-source>\n  </persistence-unit>\n</persistence>\n```\n\n```java:TestTable.java\npackage sample.jpa.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"test_table\")\npublic class TestTable {\n    @Id\n    private Long id;\n    private String value;\n    \n    @Override\n    public String toString() {\n        return \"TestTable [id=\" + id + \", value=\" + value + \"]\";\n    }\n}\n```\n\n```java:HelloEjb.java\npackage sample.jpa.web;\n\nimport javax.ejb.Stateless;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\n\nimport sample.jpa.entity.TestTable;\nimport sample.jpa.entity.TestTable_;\n\n@Stateless\npublic class HelloEjb {\n    \n    @PersistenceContext(unitName=\"SampleUnit\")\n    private EntityManager em;\n    \n    public void metamodel() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<TestTable> query = builder.createQuery(TestTable.class);\n        \n        Root<TestTable> root = query.from(TestTable.class);\n        query.select(root);\n        \n        Predicate idEqual2 = builder.equal(root.get(TestTable_.id), 2L);\n        query.where(idEqual2);\n        \n        this.em.createQuery(query).getResultList().forEach(System.out::println);\n    }\n}\n```\n\n```java:HelloServlet.java\npackage sample.jpa.web;\n\nimport java.io.IOException;\n\nimport javax.ejb.EJB;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n    \n    @EJB\n    private HelloEjb ejb;\n    \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        this.ejb.hello();\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/880f0ee9-9e77-2c5a-224e-58f0551a842a.jpeg)\n\n###\u52d5\u4f5c\u78ba\u8a8d\n```text:\u30d3\u30eb\u30c9\n> gradle war\n```\n\n`build/libs/jpa-metamodel.war` \u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001 GlassFish \u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3002\n\n`http://localhost:8080/jpa-metamodel/metamodel` \u306b GET \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3002\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n[2015-05-26T22:42:42.861+0900] [glassfish 4.1] [INFO] [] [] [tid: _ThreadID=32 _ThreadName=Thread-8] [timeMillis: 1432647762861] [levelValue: 800] [[TestTable [id=2, value=buzz]]]\n```\n\n###\u8aac\u660e\n####\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\n```java:HelloEjb.java\nimport sample.jpa.entity.TestTable;\nimport sample.jpa.entity.TestTable_;\n\n...\n\n    public void metamodel() {\n        CriteriaBuilder builder = this.em.getCriteriaBuilder();\n        CriteriaQuery<TestTable> query = builder.createQuery(TestTable.class);\n        \n        Root<TestTable> root = query.from(TestTable.class);\n        query.select(root);\n        \n        Predicate idEqual2 = builder.equal(root.get(TestTable_.id), 2L);\n        query.where(idEqual2);\n        \n        this.em.createQuery(query).getResultList().forEach(System.out::println);\n    }\n```\n\n- \u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u751f\u6210\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\u306e\u540d\u524d\u306e\u672b\u5c3e\u306b\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc (`_`) \u304c\u4ed8\u3044\u305f\u30af\u30e9\u30b9\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u3002\n    - \u4e0a\u8a18\u4f8b\u306e\u5834\u5408\u3001 `TestTable_` \u30af\u30e9\u30b9\u304c `TestTable` \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30e1\u30bf\u30e2\u30c7\u30eb\u306b\u306a\u308b\u3002\n- \u30e1\u30bf\u30e2\u30c7\u30eb\u306b\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u6301\u3064\u3082\u306e\u3068\u540c\u3058\u540d\u524d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n- \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u691c\u7d22\u6761\u4ef6\u306e\u69cb\u7bc9\u306a\u3069\u3092\u9759\u7684\u306b\u3001\u304b\u3064\u578b\u5b89\u5168\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f `TestTable_` \u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```java:TestTable_.java\npackage sample.jpa.entity;\n\nimport javax.annotation.Generated;\nimport javax.persistence.metamodel.SingularAttribute;\nimport javax.persistence.metamodel.StaticMetamodel;\n\n@Generated(value=\"EclipseLink-2.5.0.v20130507-rNA\", date=\"2015-05-26T22:35:16\")\n@StaticMetamodel(TestTable.class)\npublic class TestTable_ { \n\n    public static volatile SingularAttribute<TestTable, Long> id;\n    public static volatile SingularAttribute<TestTable, String> value;\n\n}\n```\n\n####\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3055\u305b\u308b\u3088\u3046\u306b\u3059\u308b\n```groovy:build.gradle\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    providedCompile 'javax:javaee-api:7.0'\n    providedCompile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.5.0'\n}\n\ncompileJava {\n    def path = new File(project.projectDir, 'src/main/resources/META-INF/persistence.xml').absolutePath\n    options.compilerArgs.addAll '-Aeclipselink.persistencexml=' + path\n}\n```\n\n- \u30e1\u30bf\u30e2\u30c7\u30eb\u306f\u3001[\u6ce8\u91c8\u51e6\u7406](http://qiita.com/opengl-8080/items/beda51fe4f23750c33e9)\u3067\u81ea\u52d5\u751f\u6210\u3055\u305b\u308b\u3002\n- GlassFish 4.1 \u306e\u5834\u5408\u3001 JPA \u306e\u5b9f\u88c5\u306f EclipseLink 2.5.0 \u306a\u306e\u3067\u3001 EclipseLink \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30e1\u30bf\u30e2\u30c7\u30eb\u751f\u6210\u7528\u306e jar \u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3059\u308b\uff08`org.eclipse.persistence.jpa.modelgen.processor`\uff09\u3002\n- EclipseLink \u3067\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u751f\u6210\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b `-Aeclipselink.persistencexml` \u30aa\u30d7\u30b7\u30e7\u30f3\u306b `persistence.xml` \u3078\u306e\u30d1\u30b9\u3092\u6e21\u3059\u3002\n\n##Eclipse \u3067\u958b\u767a\u3059\u308b\u5834\u5408\nEclipse \u306a\u3069\u306e IDE \u3067\u958b\u767a\u3059\u308b\u5834\u5408\u3001\u6ce8\u91c8\u51e6\u7406\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u81ea\u52d5\u3067\u8d70\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u7279\u306b\u610f\u8b58\u3059\u308b\u3053\u3068\u306a\u304f\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30d5\u30a1\u30bb\u30c3\u30c8\u300d\u3092\u6709\u52b9\u306b\u3057\u3066\u3001 [JPA] \u306e\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3002\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/6cca34ca-2b9a-c2f7-e65e-edd10be9a3b0.jpeg)\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b [JPA] \u304c\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u9078\u629e\u3002\n\u300c\u6b63\u898f\u30e1\u30bf\u30e2\u30c7\u30eb\uff08JPA 2.0\uff09\u300d\u306e\u300c\u30bd\u30fc\u30b9\u30fb\u30d5\u30a9\u30eb\u30c0\u30fc\u300d\u3067\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u542b\u3080\u30bd\u30fc\u30b9\u30d5\u30a9\u30eb\u30c0\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/68c640d0-dd6b-70fb-c770-eceac441fff8.jpeg)\n\n\u3053\u308c\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30bd\u30fc\u30b9\u3068\u540c\u3058\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u30e1\u30bf\u30e2\u30c7\u30eb\u306e\u30bd\u30fc\u30b9\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/feb5260f-c03f-d26f-1ac6-c33a0a100eb4.jpeg)\n\n#\u691c\u7d22\u6761\u4ef6\u3092\u69cb\u7bc9\u3059\u308b\n##\u57fa\u672c\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/22caf82b-9c2d-c633-c238-80b3ffeb20c8.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:KurodaniYmame.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kurodani_yamame\")\npublic class KurodaniYmame {\n    @Id\n    private Long id;\n    private String string;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"KurodaniYmame{\" + \"id=\" + id + \", string=\" + string + \", number=\" + number + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/2cf96777-6304-4d73-4a7e-6cdf9cd32ac9.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KurodaniYmame> query = builder.createQuery(KurodaniYmame.class);\n    \n    Root<KurodaniYmame> root = query.from(KurodaniYmame.class);\n    \n    query.select(root)\n         .where(\n             builder.greaterThanOrEqualTo(root.get(KurodaniYmame_.number), 200),\n             builder.like(root.get(KurodaniYmame_.string), \"%o%\")\n         );\n    \n    TypedQuery<KurodaniYmame> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [KurodaniYmame{id=2, string=two, number=200}, KurodaniYmame{id=4, string=four, number=400}]\n```\n\n\u3053\u308c\u306f\u3001\u6b21\u306e JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n```sql:\nSELECT k\n  FROM KurodaniYamame k\n WHERE 200 <= k.number\n   AND k.string LIKE '%o%'\n```\n\n- `CriteriaQuery#where()` \u3067\u3001\u691c\u7d22\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n- \u5f15\u6570\u306b\u6e21\u3059\u6761\u4ef6\u5f0f\uff08`Expression`\uff09\u306f\u3001 `CriteriaBuilder` \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3059\u308b\u3002\n    - JPQL \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6761\u4ef6\u5f0f\u3068\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30e1\u30bd\u30c3\u30c9\u540d\u304b\u3089\u3060\u3044\u305f\u3044\u7528\u9014\u3092\u60f3\u50cf\u3067\u304d\u308b\u3002 [CriteriaBuilder \u306e Javadoc][1]\n- `CriteriaBuilder` \u306b\u5b9a\u7fa9\u3055\u308c\u305f\u6761\u4ef6\u5f0f\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u57fa\u672c\u7684\u306b\u6b21\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u3002\n    - \u7b2c\u4e00\u5f15\u6570\u306b\u6bd4\u8f03\u3057\u305f\u3044\u9805\u76ee\u3002\n    - \u7b2c\u4e8c\u5f15\u6570\u306b\u6bd4\u8f03\u5024\u3002\n- \u6bd4\u8f03\u3057\u305f\u3044\u9805\u76ee\u306f\u3001 `Root#get()` \u30e1\u30bd\u30c3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u3002\n- `where()` \u30e1\u30bd\u30c3\u30c9\u306f\u6761\u4ef6\u5f0f\u3092\u53ef\u5909\u9577\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n    - \u8907\u6570\u306e\u6761\u4ef6\u5f0f\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u3089\u306f `AND` \u3067\u7d50\u5408\u3055\u308c\u308b\u3002\n\n##OR \u6761\u4ef6\u3092\u4f7f\u7528\u3059\u308b\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/cf97eab2-1903-ceca-d20c-a65c1864d4b6.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:MizuhashiParsee.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"mizuhashi_parsee\")\npublic class MizuhashiParsee {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"MizuhashiParsee{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/a8180275-eaaf-f790-ffd5-ceba64e92191.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<MizuhashiParsee> query = builder.createQuery(MizuhashiParsee.class);\n    \n    Root<MizuhashiParsee> root = query.from(MizuhashiParsee.class);\n    \n    query.select(root)\n         .where(\n             builder.or(\n                 builder.equal(root.get(MizuhashiParsee_.id), 1L),\n                 builder.equal(root.get(MizuhashiParsee_.id), 3L)\n             )\n         );\n    \n    TypedQuery<MizuhashiParsee> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [MizuhashiParsee{id=1, value=hoge}, MizuhashiParsee{id=3, value=piyo}]\n```\n\nJPQL \u306f\u6b21\u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n```sql:\nSELECT m\n  FROM MizuhashiParsee m\n WHERE m.id = 1\n    OR m.id = 3\n```\n\n- `CriteriaBuilder#or()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001 `OR` \u6761\u4ef6\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3002\n- \u5f15\u6570\u306f\u53ef\u5909\u9577\u5f15\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8907\u6570\u306e\u6761\u4ef6\u3092\u9023\u7d50\u3067\u304d\u308b\u3002\n- `CriteriaBuilder#and()` \u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308b\u306e\u3067\u3001 `AND` \u6761\u4ef6\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n##IN \u3084 IS NULL\n`IN` \u3084 `IS NULL` \u306f `CriteriaBuilder` \u304b\u3089\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\u3001 `Root#get()` \u3067\u53d6\u5f97\u3057\u305f `Path` \u304b\u3089\u4f5c\u308b\u3002\n\n```java:\nRoot<MizuhashiParsee> root = query.from(MizuhashiParsee.class);\n\nquery.select(root)\n     .where(root.get(MizuhashiParsee_.id).isNotNull())\n```\n\n#\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\n##\u5b9f\u88c5\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/7aa929fe-a9c7-ee14-930a-8696aa89aae8.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:HoshigumaYugi.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hoshiguma_yugi\")\npublic class HoshigumaYugi {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"HoshigumaYugi{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/2ebac26f-c66e-90a5-8899-2fc1a06dc6c5.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<HoshigumaYugi> query = builder.createQuery(HoshigumaYugi.class);\n    \n    Root<HoshigumaYugi> root = query.from(HoshigumaYugi.class);\n    \n    ParameterExpression<Long> id = builder.parameter(Long.class);\n    ParameterExpression<String> value = builder.parameter(String.class);\n    \n    query.select(root)\n         .where(\n             builder.or(\n                 builder.equal(root.get(HoshigumaYugi_.id), id),\n                 builder.equal(root.get(HoshigumaYugi_.value), value)\n             )\n         );\n    \n    TypedQuery<HoshigumaYugi> q = this.em.createQuery(query);\n    q.setParameter(id, 2L);\n    q.setParameter(value, \"piyo\");\n    \n    System.out.println(q.getResultList());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [HoshigumaYugi{id=2, value=fuga}, HoshigumaYugi{id=3, value=piyo}]\n```\n\n##\u8aac\u660e\n```java:\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\nParameterExpression<Long> id = builder.parameter(Long.class);\nParameterExpression<String> value = builder.parameter(String.class);\n```\n\n`CriteriaBuilder#parameter(Class)` \u3067\u3001 `ParameterExpression` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n\n```java:\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30af\u30a8\u30ea\u306b\u57cb\u3081\u8fbc\u3080\nquery.select(root)\n     .where(\n         builder.or(\n             builder.equal(root.get(HoshigumaYugi_.id), id),\n             builder.equal(root.get(HoshigumaYugi_.value), value)\n         )\n     );\n```\n\n\u6b21\u306b\u3001 `CriteriaBuilder#equal()` \u306a\u3069\u3067\u6761\u4ef6\u5f0f\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306b\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f `ParameterExpression` \u3092\u6bd4\u8f03\u5024\u3068\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u3002\n\n```java:Query\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\nTypedQuery<HoshigumaYugi> q = this.em.createQuery(query);\nq.setParameter(id, 2L);\nq.setParameter(value, \"piyo\");\n```\n\n\u6700\u5f8c\u306b\u3001 `Query#<T>setParameter(Parameter<T>, T)` \u3067\u30af\u30a8\u30ea\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3002\n\n\u7b2c\u4e00\u5f15\u6570\u306e `Parameter<T>` \u306b\u306f\u3001\u6700\u521d\u306b\u4f5c\u6210\u3057\u305f `ParameterExpression<T>` \u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\uff08`ParameterExpression` \u306f `Parameter` \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\uff09\u3002\n\n#\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u95a2\u9023\u3092\u8fbf\u308b\n##\u5b9f\u88c5\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/9937b6ba-a863-de07-d5b3-2f419f69870b.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:KomeijiSatori.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"komeiji_satori\")\npublic class KomeijiSatori {\n    @Id\n    private Long id;\n    @JoinColumn(name=\"komeiji_koishi_id\")\n    private KomeijiKoishi komeijiKoishi;\n\n    @Override\n    public String toString() {\n        return \"KomeijiSatori{\" + \"id=\" + id + \", komeijiKoishi=\" + komeijiKoishi + '}';\n    }\n}\n```\n\n```java:KomeijiKoishi.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"komeiji_koishi\")\npublic class KomeijiKoishi {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"KomeijiKoishi{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/83d5fa9f-9c6d-da3b-e06b-7ec7c003f377.jpeg)\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/d18fedb4-00e8-ff10-d5de-c8709339d9ec.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KomeijiSatori> query = builder.createQuery(KomeijiSatori.class);\n    \n    Root<KomeijiSatori> root = query.from(KomeijiSatori.class);\n    \n    query.select(root)\n         .where(\n             builder.equal(\n                 root.get(KomeijiSatori_.komeijiKoishi)\n                     .get(KomeijiKoishi_.value),\n                 \"fuga\"\n             )\n         );\n    \n    TypedQuery<KomeijiSatori> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [KomeijiSatori{id=2, komeijiKoishi=KomeijiKoishi{id=2, value=fuga}}]\n```\n\n##\u8aac\u660e\n\u4e0a\u8a18\u5b9f\u88c5\u306f\u3001\u4e0b\u8a18 JPQL \u3068\u540c\u3058\u306b\u306a\u308b\u3002\n\n```sql:\nSELECT k\n  FROM KomeijiSaori k\n WHERE k.komeijiKoishi.value = 'fuga'\n```\n\n```java:\nquery.select(root)\n     .where(\n         builder.equal(\n             root.get(KomeijiSatori_.komeijiKoishi)\n                 .get(KomeijiKoishi_.value),\n             \"fuga\"\n         )\n     );\n```\n\n- `Root#get()` \u306e\u623b\u308a\u5024\u306b\u5bfe\u3057\u3066\u3001\u3055\u3089\u306b `get()` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u95a2\u9023\u3092\u8fbf\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n#\u4efb\u610f\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 SELECT \u3059\u308b\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/8f2adeb4-6a7f-f3b0-be1a-96a4290e1637.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:KaenbyoRin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kaenbyo_rin\")\npublic class KaenbyoRin {\n    @Id\n    private Long id;\n    private int number;\n    private String string;\n\n    @Override\n    public String toString() {\n        return \"KaenbyoRin{\" + \"id=\" + id + \", number=\" + number + \", string=\" + string + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/60bf2820-21e6-9e66-e205-4ae6d95d57c4.jpeg)\n\n\n##\u57fa\u672c\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<String> query = builder.createQuery(String.class);\n    \n    Root<KaenbyoRin> root = query.from(KaenbyoRin.class);\n    query.select(root.get(KaenbyoRin_.string));\n    \n    TypedQuery<String> q = this.em.createQuery(query);\n    System.out.println(q.getResultList());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   [hoge, fuga, piyo]\n```\n\nJPQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308b\u3002\n\n```sql\nSELECT k.string\n  FROM KaenbyoRin k\n```\n\n- `CriteriaQuery.select()` \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u3001 `Root#get()` \u3067\u53d6\u5f97\u3057\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e `Selection` \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u3051\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n##Tuple \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3059\u308b\n```java:CriteriaEjb.java\nimport javax.persistence.criteria.Path;\nimport javax.persistence.Tuple;\n\n...\n\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createTupleQuery();\n    \n    Root<KaenbyoRin> root = query.from(KaenbyoRin.class);\n    Path<Integer> number = root.get(KaenbyoRin_.number)\n    Path<String> string = root.get(KaenbyoRin_.string);\n    \n    query.select(builder.tuple(number, string));\n    \n    TypedQuery<Tuple> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .stream()\n     .map(tuple -> \"{\" + tuple.get(number) + \", \" + tuple.get(string) + \"}\")\n     .forEach(System.out::println);\n```\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   {111, hoge}\n\u60c5\u5831:   {222, fuga}\n\u60c5\u5831:   {333, piyo}\n```\n\nJPQL \u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u4ee5\u4e0b\u306b\u306a\u308b\u3002\n\n```sql\nSELECT k.number\n      ,k.string\n  FROM KaenbyoRin k\n```\n\n\n- \u691c\u7d22\u7d50\u679c\u3092 `Tuple` \u578b\u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n    - `Tuple` \u3068\u306f\u3001\u8907\u6570\u306e\u5024\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u3092\u8868\u3057\u3066\u3044\u308b\uff08\uff12\u3064\u4ee5\u4e0a\u3082\u53ef\uff09\u3002\n    - `CriteriaQuery<Tuple>` \u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u30e1\u30bd\u30c3\u30c9\uff08`createTupleQuery()`\uff09\u304c `CriteriaBuilder` \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\uff08`createQuery(Tuple.class)` \u3068\u610f\u5473\u306f\u540c\u3058\uff09\u3002\n- `CriteriaQuery#select()` \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u306f\u3001 `CriteriaBuilder#tuple()` \u3067\u4f5c\u6210\u3057\u305f `CompoundSelection` \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3059\u3002\n- \u691c\u7d22\u7d50\u679c\u306e `Tuple` \u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306f\u3001 `Root#get()` \u30e1\u30bd\u30c3\u30c9\u3067\u4e88\u3081\u53d6\u5f97\u3057\u3066\u304a\u3044\u305f `Path` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u3068\u5b89\u5168\u3002\n\n#\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u3092 SELECT \u3059\u308b\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/7a3b7fb5-422a-ef46-8c56-998bf6abc4f3.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:ReiujiUtsubo.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"reiuji_utsubo\")\npublic class ReiujiUtsubo {\n    @Id\n    private Long id;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"ReiujiUtsubo{\" + \"id=\" + id + \", number=\" + number + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/c3df90cf-757d-f91a-7292-6bb39716f784.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Integer> query = builder.createQuery(Integer.class);\n    \n    Root<ReiujiUtsubo> root = query.from(ReiujiUtsubo.class);\n    query.select(builder.sum(root.get(ReiujiUtsubo_.number)));\n    \n    TypedQuery<Integer> q = this.em.createQuery(query);\n    System.out.println(q.getSingleResult());\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   600\n```\n\n- `CriteriaBuilder` \u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f0f\u3092 `CriteriaQuery.select()` \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3002\n\n#ORDER BY\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/788877df-e237-6907-4f48-f10689735dc8.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:Nazrin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\n\n@Entity\npublic class Nazrin {\n    @Id\n    private Long id;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"Nazrin{\" + \"id=\" + id + \", number=\" + number + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/455daeb5-8a4f-658d-a7d9-63bdaaac101b.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Nazrin> query = builder.createQuery(Nazrin.class);\n    \n    Root<Nazrin> root = query.from(Nazrin.class);\n    query.select(root)\n         .orderBy(builder.desc(root.get(Nazrin_.number)));\n    \n    TypedQuery<Nazrin> q = this.em.createQuery(query);\n    q.getResultList().forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   Nazrin{id=2, number=300}\n\u60c5\u5831:   Nazrin{id=1, number=200}\n\u60c5\u5831:   Nazrin{id=3, number=100}\n```\n\nJPQL \u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```sql\n  SELECT n\n    FROM Nazrin n\nORDER BY n.number DESC\n```\n\n- `CriteriaBuilder#asc(Expression)` \u307e\u305f\u306f `CriteriaBuilder#desc(Expression)` \u3067\u3001 `Order` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n- \u751f\u6210\u3057\u305f `Order` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001 `CriteriaQuery#orderBy(Order...)` \u306b\u6e21\u3059\u3002\n\n#GROUP BY \u3068 HAVING\n##GROUP BY\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/7b88e9c9-fe8f-26de-5f4a-cef133791974.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:TataraKogasa.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"tatara_kogasa\")\npublic class TataraKogasa {\n    @Id\n    private Long id;\n    private String string;\n    private int number;\n\n    @Override\n    public String toString() {\n        return \"TataraKogasa{\" + \"id=\" + id + \", string=\" + string + \", number=\" + number + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/99190df8-6c4e-499a-53b1-a62f4c6178f5.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\nimport javax.persistence.criteria.Expression;\n\n...\n\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createQuery(Tuple.class);\n    \n    Root<TataraKogasa> root = query.from(TataraKogasa.class);\n    Path<String> string = root.get(TataraKogasa_.string);\n    Expression<Integer> sum = builder.sum(root.get(TataraKogasa_.number));\n    \n    query.select(builder.tuple(string, sum))\n         .groupBy(string);\n    \n    TypedQuery<Tuple> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .stream()\n     .map(tuple -> tuple.get(string) + \" -> \" + tuple.get(sum))\n     .forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   fuga -> 150\n\u60c5\u5831:   hoge -> 80\n\u60c5\u5831:   piyo -> 130\n```\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```sql\n  SELECT t.string\n        ,SUM(t.number)\n    FROM TataraKogasa t\nGROUP BY t.string\n```\n\n- `CriteriaQuery#groupBy(Expression<?>...)` \u3067\u3001\u96c6\u7d04\u6761\u4ef6\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n- \u691c\u7d22\u7d50\u679c\u306f `Tuple` \u3067\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u5947\u9e97\u306b\u5024\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n##HAVING\n**\u5b9f\u88c5**\n\n```diff:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<Tuple> query = builder.createQuery(Tuple.class);\n    \n    Root<TataraKogasa> root = query.from(TataraKogasa.class);\n    Path<String> string = root.get(TataraKogasa_.string);\n    Expression<Integer> sum = builder.sum(root.get(TataraKogasa_.number));\n    \n    query.select(builder.tuple(string, sum))\n-        .groupBy(string);\n+        .groupBy(string)\n+        .having(builder.greaterThan(sum, 100));\n    \n    TypedQuery<Tuple> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .stream()\n     .map(tuple -> tuple.get(string) + \" -> \" + tuple.get(sum))\n     .forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   fuga -> 150\n\u60c5\u5831:   piyo -> 130\n```\n\nJPQL \u306b\u3059\u308b\u3068\u4ee5\u4e0b\u3002\n\n```sql:\n  SELECT t.string\n        ,SUM(t.number)\n    FROM TataraKogasa t\nGROUP BY t.string\n  HAVING 100 < SUM(t.number)\n```\n\n- `CriteriaQuery#having(Expression<Boolean>)` \u3067\u3001 `HAVING` \u53e5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n#JOIN\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/abd7d390-6b60-061c-0555-b4d944ea2a6c.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:KumoiIchirin.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kumoi_ichirin\")\npublic class KumoiIchirin {\n    @Id\n    private Long id;\n    @OneToMany(fetch = FetchType.EAGER)\n    @JoinColumn(name=\"ichirin_id\")\n    private List<KumoiUnzan> unzanList;\n\n    @Override\n    public String toString() {\n        return \"KumoiIchirin{\" + \"id=\" + id + \", unzanList=\" + unzanList + '}';\n    }\n}\n```\n\n```java:KumoiUnzan.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"kumoi_unzan\")\npublic class KumoiUnzan {\n    @Id\n    private Long id;\n    private String value;\n\n    @Override\n    public String toString() {\n        return \"KumoiUnzan{\" + \"id=\" + id + \", value=\" + value + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/6fe99b7a-dfe7-a54b-08fa-da41fa3e31a1.jpeg)\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/6cda1bb0-6d42-c16d-79d2-65a27beedf2d.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KumoiIchirin> query = builder.createQuery(KumoiIchirin.class);\n    \n    Root<KumoiIchirin> root = query.from(KumoiIchirin.class);\n    Join<KumoiIchirin, KumoiUnzan> join = root.join(KumoiIchirin_.unzanList);\n\n    query.select(root)\n         .distinct(true)\n         .where(builder.like(join.get(KumoiUnzan_.value), \"%e%\"));\n    \n    TypedQuery<KumoiIchirin> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n```\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```sql\n  SELECT \nDISTINCT ki\n    FROM KumoiIchirin ki\n    JOIN ki.unzanList ul\n   WHERE ul.value LIKE '%e%'\n```\n\n- `Root#join()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001 JPQL \u306e JOIN \u3092\u5b9f\u884c\u3067\u304d\u308b\u3002\n\n#FETCH JOIN\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<KumoiIchirin> query = builder.createQuery(KumoiIchirin.class);\n    \n    Root<KumoiIchirin> root = query.from(KumoiIchirin.class);\n    root.fetch(KumoiIchirin_.unzanList);\n\n    query.select(root)\n         .distinct(true);\n    \n    TypedQuery<KumoiIchirin> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u666e\u901a:   SELECT DISTINCT t1.ID, t0.ID, t0.VALUE FROM kumoi_unzan t0, kumoi_ichirin t1 WHERE (t0.ichirin_id = t1.ID)\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n\u60c5\u5831:   KumoiIchirin{id=3, unzanList=[KumoiUnzan{id=6, value=six}]}\n```\n\n- \u30ea\u30b9\u30c8\u9805\u76ee\uff08`unzanList`\uff09\u306e\u53d6\u5f97\u304c\u30011 \u3064\u306e SQL \u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3002\n- `Root#fetch()` \u3067\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 `FETCH JOIN` \u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u3001 `FETCH JOIN` \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u666e\u901a:   SELECT DISTINCT ID FROM kumoi_ichirin\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n\tbind => [1]\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n\tbind => [2]\n\u666e\u901a:   SELECT ID, VALUE FROM kumoi_unzan WHERE (ichirin_id = ?)\n\tbind => [3]\n\u60c5\u5831:   KumoiIchirin{id=1, unzanList=[KumoiUnzan{id=1, value=one}, KumoiUnzan{id=2, value=two}, KumoiUnzan{id=3, value=three}]}\n\u60c5\u5831:   KumoiIchirin{id=2, unzanList=[KumoiUnzan{id=4, value=four}, KumoiUnzan{id=5, value=five}]}\n\u60c5\u5831:   KumoiIchirin{id=3, unzanList=[KumoiUnzan{id=6, value=six}]}\n```\n\n#\u30b5\u30d6\u30af\u30a8\u30ea\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/a1aa20e4-93c5-73dc-ba40-77ee4e5518ce.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"murasa_minamitsu\")\npublic class MurasaMinamitsu {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"MurasaMinamitsu{\" + \"id=\" + id + '}';\n    }\n}\n```\n\n```java:ToramaruShou.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"toramaru_shou\")\npublic class ToramaruShou {\n    @Id\n    private Long id;\n\n    @Override\n    public String toString() {\n        return \"ToramaruShou{\" + \"id=\" + id + '}';\n    }\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/024c04d3-4e67-3752-2bdc-ba2e556ff248.jpeg)\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/fc925f1c-c657-88b5-a9c0-73c6de8c8547.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaQuery<MurasaMinamitsu> query = builder.createQuery(MurasaMinamitsu.class);\n    \n    Subquery<Long> subquery = query.subquery(Long.class);\n    Root<ToramaruShou> toramaru = subquery.from(ToramaruShou.class);\n    subquery.select(toramaru.get(ToramaruShou_.id));\n    \n    Root<MurasaMinamitsu> murasa = query.from(MurasaMinamitsu.class);\n    query.select(murasa)\n         .where(murasa.get(MurasaMinamitsu_.id).in(subquery));\n    \n    TypedQuery<MurasaMinamitsu> q = this.em.createQuery(query);\n    \n    q.getResultList()\n     .forEach(System.out::println);\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n```text:GlassFish\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u60c5\u5831:   MurasaMinamitsu{id=1}\n\u60c5\u5831:   MurasaMinamitsu{id=3}\n```\n\nJPQL \u306b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```sql\nSELECT m\n  FROM MurasaMinamitsu m\n WHERE m.id IN (\n       SELECT t.id\n         FROM ToramaruShou t\n     )\n```\n\n- `CriteriaQuery#subquery(Class)` \u3067\u3001\u30b5\u30d6\u30af\u30a8\u30ea\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e `Subquery` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n    - \u5f15\u6570\u306e `Class` \u306f\u3001\u6700\u7d42\u7684\u306b\u30b5\u30d6\u30af\u30a8\u30ea\u304c\u8fd4\u3059\u5024\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\n- \u30b5\u30d6\u30af\u30a8\u30ea\u306e\u69cb\u7bc9\u306f\u3001 `CriteriaQuery` \u306e\u5834\u5408\u3068\u540c\u3058\u8981\u9818\u3067\u884c\u3046\u3002\n- \u6700\u5f8c\u306b\u3001\u3067\u304d\u4e0a\u304c\u3063\u305f `Subquery` \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30e1\u30a4\u30f3\u306e `CriteriaQuery` \u306e\u6761\u4ef6\u5f0f\u306b\u6e21\u3057\u3066\u5229\u7528\u3059\u308b\u3002\n\n#UPDATE, DELETE\n##UPDATE\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/8d714ad8-4445-2e30-0440-c2bd7aae25ae.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:HijiriByakuren.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hijiri_byakuren\")\npublic class HijiriByakuren {\n    @Id\n    private Long id;\n    private String value;\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/f30a3b3a-ba16-d260-53ab-40c50d3b4f27.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaUpdate<HijiriByakuren> update = builder.createCriteriaUpdate(HijiriByakuren.class);\n    \n    Root<HijiriByakuren> root = update.from(HijiriByakuren.class);\n    \n    update.set(root.get(HijiriByakuren_.value), \"update!!\")\n          .where(root.get(HijiriByakuren_.id).in(1, 3));\n    \n    Query q = this.em.createQuery(update);\n    q.executeUpdate();\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/cd614045-6a25-22ea-ba3d-19b37682ff41.jpeg)\n\n- `UPDATE ` \u6587\u3092\u767a\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u307e\u305a `CriteriaBuilder#createCriteriaUpdate(Class)` \u3067 `CriteriaUpdate` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n    - \u5f15\u6570\u306e `Class` \u306b\u306f\u3001\u66f4\u65b0\u5bfe\u8c61\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e `Class` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3002\n- `CriteriaUpdate#set()` \u30e1\u30bd\u30c3\u30c9\u3067\u3001\u66f4\u65b0\u3057\u305f\u3044\u9805\u76ee\u3068\u3001\u66f4\u65b0\u5f8c\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n- `CriteriaUpdate` \u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u3089\u3001 `EntityManager#createQuery(CriteriaUpdate)` \u3092\u4f7f\u3063\u3066 `Query` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n- \u53d6\u5f97\u3057\u305f `Query` \u306e `executeUpdate()` \u3067\u66f4\u65b0\u3092\u5b9f\u884c\u3059\u308b\u3002\n- \u6761\u4ef6\u306e\u8a2d\u5b9a\u306f `CriteriaQuery` \u3092\u4f7f\u3063\u305f\u5834\u5408\u3068\u540c\u69d8\u3002\n\n##DELETE\n**\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30e2\u30c7\u30eb**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/41edbf62-8177-edba-d8e2-70fb404bbc05.jpeg)\n\n**\u5b9f\u88c5\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff09**\n\n```java:HojuNue.java\npackage sample.javaee.jpa.entity.criteria;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name=\"hojo_nue\")\npublic class HojuNue {\n    @Id\n    private Long id;\n}\n```\n\n**\u30c7\u30fc\u30bf**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/52dad199-1cb9-1fc5-d982-dc1256e48ba8.jpeg)\n\n**\u5b9f\u88c5**\n\n```java:CriteriaEjb.java\n    CriteriaBuilder builder = this.em.getCriteriaBuilder();\n    CriteriaDelete<HojuNue> delete = builder.createCriteriaDelete(HojuNue.class);\n    \n    Root<HojuNue> root = delete.from(HojuNue.class);\n    \n    delete.where(builder.equal(root.get(HojuNue_.id), 2L));\n    \n    Query q = this.em.createQuery(delete);\n    q.executeUpdate();\n```\n\n**\u5b9f\u884c\u7d50\u679c**\n\n![jpa.JPG](https://qiita-image-store.s3.amazonaws.com/0/28302/c8144660-70e8-e7a7-3bdc-bd238b5e0ca6.jpeg)\n\n- `DELETE` \u6587\u3092\u767a\u884c\u3059\u308b\u5834\u5408\u306f\u3001 `EntityManager#createQueryDelete(Class)` \u3067 `CriteriaDelete` \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u3042\u3068\u306f\u3001 `UPDATE` \u306e\u5834\u5408\u3068\u540c\u3058\u3002\n\n#\u53c2\u8003\n- [Java Persistence API (JPA) \u5b9f\u8df5\u5165\u9580 - \u3072\u3060\u307e\u308a\u30bd\u30b1\u30c3\u30c8\u306f\u58ca\u308c\u306a\u3044](http://vividcode.hatenablog.com/entry/java/jpa-introduction)\n- [UserGuide/JPA/Using the Canonical Model Generator (ELUG) - Eclipsepedia](http://wiki.eclipse.org/UserGuide/JPA/Using_the_Canonical_Model_Generator_%28ELUG%29)\n- [Java\u6280\u8853\u6700\u524d\u7dda - \u300cJava SE 6\u5b8c\u5168\u653b\u7565\u300d\u7b2c97\u56de \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u51e6\u7406\u3059\u308b \u305d\u306e4\uff1aITpro](http://itpro.nikkeibp.co.jp/article/COLUMN/20090129/323775/)\n- [eclipse\u3067JPA\u306e\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u8a2d\u5b9a - \u3058\u3083\u3070\u3089\u306e\u624b\u8a18](http://d.hatena.ne.jp/jabaraster/20110605/1307278919)\n- [JSR-000338 Java Persistence 2.1 Final Release for Evaluation](http://download.oracle.com/otndocs/jcp/persistence-2_1-fr-eval-spec/index.html)\n- [hibernate - JPA CriteriaBuilder - How to use \"IN\" comparison operator - Stack Overflow](http://stackoverflow.com/questions/9321916/jpa-criteriabuilder-how-to-use-in-comparison-operator)\n- [\u6771\u65b9Project\u306e\u767b\u5834\u4eba\u7269 - Wikipedia](http://ja.wikipedia.org/wiki/%E6%9D%B1%E6%96%B9Project%E3%81%AE%E7%99%BB%E5%A0%B4%E4%BA%BA%E7%89%A9)\n\n\n[1]: http://docs.oracle.com/javaee/7/api/javax/persistence/criteria/CriteriaBuilder.html\n"}