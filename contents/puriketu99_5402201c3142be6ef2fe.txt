{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\n\"\u5168\u89d2\"\u3092\u542b\u3080\u6587\u5b57\u5217\u9593\u306e\u8ddd\u96e2\u3092\u8868\u3059\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u826f\u3044\u95a2\u6570\u3092\u66f8\u3051\n\u305f\u3060\u3057\u3001\u8ffd\u52a0,\u524a\u9664,\u7f6e\u63db\u306e\u30b3\u30b9\u30c8\u3092\u3059\u3079\u30661\u3068\u3059\u308b\u3002\n\n\u30ea\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u306e\u7de8\u96c6\u8ddd\u96e2\u3068\u306f\uff1f\n\n\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\uff08\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u304d\u3087\u308a\uff09\u3042\u308b\u3044\u306f\u7de8\u96c6\u8ddd\u96e2\uff08\u3078\u3093\u3057\u3085\u3046\u304d\u3087\u308a\uff09\u306f\u3001\u60c5\u5831\u7406\u8ad6\u306b\u304a\u3044\u3066\u3001\u4e8c\u3064\u306e\u6587\u5b57\u5217\u304c\u3069\u306e\u7a0b\u5ea6\u7570\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u6570\u5024\u3067\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u6587\u5b57\u306e\u633f\u5165\u3084\u524a\u9664\u3001\u7f6e\u63db\u306b\u3088\u3063\u3066\u3001\u4e00\u3064\u306e\u6587\u5b57\u5217\u3092\u5225\u306e\u6587\u5b57\u5217\u306b\u5909\u5f62\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u624b\u9806\u306e\u6700\u5c0f\u56de\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u308b\u3002\n\u5b9f\u969b\u7684\u306a\u8ddd\u96e2\u306e\u6c42\u3081\u65b9\u3092\u4f8b\u793a\u3059\u308c\u3070\u3001\u201ckitten\u201d\u3092\u201csitting\u201d\u306b\u5909\u5f62\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u4ee5\u4e0b\u306b\u793a\u3059\u3088\u3046\u306b\u6700\u4f4e\u3067\u3082 3 \u56de\u306e\u624b\u9806\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u306e\u3067\u30012\u5358\u8a9e\u9593\u306e\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306f 3 \u3068\u306a\u308b\u3002\nkitten\nsitten \uff08\u201ck\u201d\u3092\u201cs\u201d\u306b\u7f6e\u63db\uff09\nsittin \uff08\u201ce\u201d\u3092\u201ci\u201d\u306b\u7f6e\u63db\uff09\nsitting \uff08\u201cg\u201d\u3092\u633f\u5165\u3057\u3066\u7d42\u4e86\uff09\n(wikipedia\u3088\u308a)\n\n\n\u30d2\u30f3\u30c8(\u534a\u89d2\u6587\u5b57\u5217\u306e\u5834\u5408\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u95a2\u6570)\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n\n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]\n\n\u4e0b\u8a18\u3088\u308a\u5f15\u7528\nhttp://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Python\n\n\n##\u554f\u984c\n\"\u5168\u89d2\"\u3092\u542b\u3080\u6587\u5b57\u5217\u9593\u306e\u8ddd\u96e2\u3092\u8868\u3059\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u826f\u3044\u95a2\u6570\u3092\u66f8\u3051\n\n\u305f\u3060\u3057\u3001\u8ffd\u52a0,\u524a\u9664,\u7f6e\u63db\u306e\u30b3\u30b9\u30c8\u3092\u3059\u3079\u30661\u3068\u3059\u308b\u3002\n\n##\u30ea\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u306e\u7de8\u96c6\u8ddd\u96e2\u3068\u306f\uff1f\n>\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\uff08\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u304d\u3087\u308a\uff09\u3042\u308b\u3044\u306f\u7de8\u96c6\u8ddd\u96e2\uff08\u3078\u3093\u3057\u3085\u3046\u304d\u3087\u308a\uff09\u306f\u3001\u60c5\u5831\u7406\u8ad6\u306b\u304a\u3044\u3066\u3001\u4e8c\u3064\u306e\u6587\u5b57\u5217\u304c\u3069\u306e\u7a0b\u5ea6\u7570\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u6570\u5024\u3067\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u6587\u5b57\u306e\u633f\u5165\u3084\u524a\u9664\u3001\u7f6e\u63db\u306b\u3088\u3063\u3066\u3001\u4e00\u3064\u306e\u6587\u5b57\u5217\u3092\u5225\u306e\u6587\u5b57\u5217\u306b\u5909\u5f62\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u624b\u9806\u306e\u6700\u5c0f\u56de\u6570\u3068\u3057\u3066\u4e0e\u3048\u3089\u308c\u308b\u3002\n\u5b9f\u969b\u7684\u306a\u8ddd\u96e2\u306e\u6c42\u3081\u65b9\u3092\u4f8b\u793a\u3059\u308c\u3070\u3001\u201ckitten\u201d\u3092\u201csitting\u201d\u306b\u5909\u5f62\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u4ee5\u4e0b\u306b\u793a\u3059\u3088\u3046\u306b\u6700\u4f4e\u3067\u3082 3 \u56de\u306e\u624b\u9806\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u306e\u3067\u30012\u5358\u8a9e\u9593\u306e\u30ec\u30fc\u30d9\u30f3\u30b7\u30e5\u30bf\u30a4\u30f3\u8ddd\u96e2\u306f 3 \u3068\u306a\u308b\u3002\nkitten\nsitten \uff08\u201ck\u201d\u3092\u201cs\u201d\u306b\u7f6e\u63db\uff09\nsittin \uff08\u201ce\u201d\u3092\u201ci\u201d\u306b\u7f6e\u63db\uff09\nsitting \uff08\u201cg\u201d\u3092\u633f\u5165\u3057\u3066\u7d42\u4e86\uff09\n(wikipedia\u3088\u308a)\n\n##\u30d2\u30f3\u30c8(\u534a\u89d2\u6587\u5b57\u5217\u306e\u5834\u5408\u306e\u7de8\u96c6\u8ddd\u96e2\u3092\u6c42\u3081\u308b\u95a2\u6570)\n\n```python\ndef levenshtein(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein(s2, s1)\n \n    # len(s1) >= len(s2)\n    if len(s2) == 0:\n        return len(s1)\n \n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer\n            deletions = current_row[j] + 1       # than s2\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n \n    return previous_row[-1]\n```\n\n\u4e0b\u8a18\u3088\u308a\u5f15\u7528\nhttp://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Python\n", "tags": ["Python", "\u30af\u30a4\u30ba", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]}