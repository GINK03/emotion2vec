{"context": "\n\n\u30e1\u30bf\u95a2\u6570\u306e\u307e\u3068\u3081\n\n\u30e1\u30bf\u95a2\u6570\u3068\u306f\uff1f\n\u30e1\u30bf\u95a2\u6570\u3068\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u578b\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u95a2\u6570\u306e\u3088\u3046\u306a\u3082\u306e\n\u5b9f\u969b\u306b\u306f\u3001\u95a2\u6570\u306e\u5f62\u3092\u53d6\u3089\u305a\u3001\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u3060\u304c\n\u95a2\u6570\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u4f8b\u3048\u3070\u578bT\u3068\u578bU\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\u306f\nstd::is_same<T,U>::value\n\n\u3068\u3059\u308c\u3070\nis_same\u306fT,U\u304c\u540c\u3058\u578b\u306a\u3089\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30e1\u30f3\u30d0\u5909\u6570value\u306ftrue\nT,U\u304c\u9055\u3046\u578b\u306a\u3089false\u3092\u8fd4\u3059\n\u4ed6\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304b\uff1f\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u898b\u3066\u3044\u3053\u3046\uff01\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea<type_traits>\n\u30e1\u30bf\u95a2\u6570\u306fC++11\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea<type_traits>\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\nC++14\u3067\u306fis_nullptr \u3068is_final\u304c\u4ef2\u9593\u5165\u308a\u3057\u305f\nC++17\u304b\u3089\u306fis_literal_type\u3001\u304c\u975e\u63a8\u5968\u306b\u306a\u308b\n\u307e\u305f\u3001\nhas_unique_object_representations\u3001\nis_swappable_with\u3001is_swappable\u3001is_nothrow_swappable_with\u3001is_nothrow_swappable\u3001\nis_callable\u3001is_nothrow_callable\u3001\nconjunction\u3001disjunction\u3001negation\u3001\nbool_constant\u3001void_t\u304c\u4ef2\u9593\u5165\u308a\u3059\u308b\n\n\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\n\n\ninteger_constant\n\u6574\u6570\u306e\u5b9a\u6570\u3092\u8868\u3059\u578b\ntrue_type\ntrue\u3092\u8868\u3059\u578b\uff08typedef\uff09\nfalse_type\n\nfalse\u3092\u8868\u3059\u578b\uff08typedef\uff09\n\n\n\u57fa\u672c\u7684\u306a\u578b\n\n\nis_void\n\u578b\u304c void \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_nullptr(since C++14)\n\u578b\u304c nullptr_t \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_integral\n\u578b\u304c\u6574\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_floating_point\n\u578b\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059/\n\nis_array\n\u578b\u304c\u914d\u5217\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_pointer\n\u578b\u304c\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_lvalue_reference\n\u578b\u304c lvalue \u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_rvalue_reference\n\u578b\u304c rvalue \u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_member_function_pointer\n\u578b\u304c\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_member_object_pointer\n\u578b\u304c\u30e1\u30f3\u30d0\u30fc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_enum\n\u578b\u304c\u5217\u6319\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_union\n\u578b\u304c\u5171\u7528\u4f53\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_class\n\u578b\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_function\n\u578b\u304c\u95a2\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\n\n\n\u8907\u5408\u578b\n\n\nis_scalar\n\u578b\u304c\u30b9\u30ab\u30e9\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_arithmetic\n\u578b\u304c\u6f14\u7b97\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_reference\n\u578b\u304c\u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_fundamental\n\u578b\u304c void \u307e\u305f\u306f\u6f14\u7b97\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_member_pointer\n\u578b\u304c\u30e1\u30f3\u30d0\u30fc\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_object\n\u578b\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_compound\n\u578b\u304c\u975e\u30b9\u30ab\u30e9\u30fc\uff08\u8907\u5408\u578b\uff09\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\n\n\n\u578b\u306e\u7279\u6027\n\n\nis_abstract\n\u578b\u304c\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_const\n\u578b\u304c\u5b9a\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_empty\n\u578b\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_final(since C++14)\n\u578b\u306bfinal\u304c\u4ed8\u3044\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_pod\n\u578b\u304c POD \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_literal_type(deprecated in C++17)\n\u578b\u304c\u30ea\u30c6\u30e9\u30eb\u578b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_polymorphic\n\u578b\u306b\u4eee\u60f3\u95a2\u6570\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_signed\n\u578b\u304c\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_standard_layout\n\u578b\u304c\u6a19\u6e96\u30ec\u30a4\u30a2\u30a6\u30c8\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_unsigned\n\u578b\u304c\u7b26\u53f7\u306a\u3057\u6574\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_volatile\n\u578b\u304c volatile \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\n\n\n\u578b\u306e\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\n\n\u578b\u304c\u7279\u5b9a\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u7279\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3001\u30b3\u30d4\u30fc\u3001\u30e0\u30fc\u30d6\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30c8\u306e4\u7a2e\u985e\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\n\u901a\u5e38\u7248\n\u30c8\u30ea\u30d3\u30a2\u30eb\u7248\n\u7121\u4f8b\u5916\u4fdd\u8a3c\u7248\n\u306e3\u7a2e\u985e\u304c\u3042\u308b\n\nis_constructible\nis_trivially_constructible\nis_nothrow_constructible\n\u6307\u5b9a\u3055\u308c\u305f\u521d\u671f\u5316\u5b50\u578b\u30ea\u30b9\u30c8\u304b\u3089\u578b\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_default_constructible\nis_trivially_default_constructible\nis_nothrow_default_constructible\n\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_copy_constructible\nis_trivially_copy_constructible\nis_nothrow_copy_constructible\n\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_move_constructible\nis_trivially_move_constructible\nis_nothrow_move_constructible\n\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_assignable\nis_trivially_assignable\nis_nothrow_assignable\n\u6307\u5b9a\u3055\u308c\u305f\u578b\u304c\u4ee3\u5165\u6f14\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_copy_assignable\nis_trivially_copy_assignable\nis_nothrow_copy_assignable\n\u3042\u308b\u304c\u578b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nis_destructible\nis_trivially_destructible\nis_nothrow_destructible\n\u660e\u793a\u7684\u306bdeleted\u5ba3\u8a00\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3082\u3064\u304b\u30c6\u30b9\u30c8\u3059\u308b\nhas_virtual_destructor\nvirtual\u306a\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u304b\u30c6\u30b9\u30c8\u3059\u308b\nis_swappable_with(since C++17)\n\u578b\u304c\u4ed6\u306e\u578b\u3068\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_swappable(since C++17)\n\u578b\u304c\u540c\u3058\u578b\u3068\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_nothrow_swappable_with(since C++17)\n\u578b\u304c\u4ed6\u306e\u578b\u3068\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_nothrow_swappable(since C++17)\n\u578b\u304c\u540c\u3058\u578b\u3068\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nhas_unique_object_representations\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u81ea\u52d5\u7684\u306b\u30cf\u30c3\u30b7\u30e5\u3092\u8a08\u7b97\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\uff08C++17\u3067\u306f\u81ea\u52d5\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u304c\u3001\u305d\u306e\u524d\u6bb5\u968e\u3068\u3057\u3066\u5165\u3063\u305f\u6a5f\u80fd\u3067\u3059\uff09\n\n\n\u578b\u306e\u7279\u6027\u306b\u3064\u3044\u3066\u306e\u554f\u3044\u5408\u308f\u305b\n\n\nalignment_of\n\u578b\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\nrank\n\u914d\u5217\u306e\u6b21\u5143\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\nextent\n\u914d\u5217\u306e\u6b21\u5143\u3092\u53d6\u5f97\u3057\u307e\u3059\n\n\n\u578b\u306e\u95a2\u4fc2\n\n\nis_same\n2 \u3064\u306e\u578b\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_base_of\n\u4e00\u65b9\u306e\u578b\u304c\u3082\u3046\u4e00\u65b9\u306e\u578b\u306e\u57fa\u672c\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_convertible\n\u4e00\u65b9\u306e\u578b\u3092\u3082\u3046\u4e00\u65b9\u306e\u578b\u306b\u5909\u63db\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_callable\n\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\nis_nothrow_callable\n\u95a2\u6570\u304c\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u547c\u3073\u51fa\u305b\u308b\u304b\u3069\u3046\u304b\u30c6\u30b9\u30c8\u3057\u307e\u3059\n\n\nconst/volatile\u306e\u5909\u66f4\n\n\nadd_const\n\u578b\u304b\u3089 const \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nadd_volatile\n\u578b\u304b\u3089 volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nadd_cv\n\u578b\u304b\u3089 const volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_const\n\u578b\u304b\u3089\u975e const \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_volatile\n\u578b\u304b\u3089\u975e volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_cv\n\u578b\u304b\u3089\u975e const volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\nreference\u306e\u5909\u66f4\n\n\nadd_lvalue_reference\n\u578b\u304b\u3089\u578b\u3078\u306e\u5de6\u8fba\u5024\u53c2\u7167\u3092\u4f5c\u6210\u3057\u307e\u3059\nadd_rvalue_reference\n\u578b\u304b\u3089\u578b\u3078\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_reference\n\u578b\u304b\u3089\u975e\u53c2\u7167\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n\u914d\u5217\u306e\u5909\u66f4\n\n\nremove_extent\n\u914d\u5217\u578b\u304b\u3089\u6b21\u5143\u3092\u53d6\u308a\u9664\u304d\u8981\u7d20\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_all_extents\n\u914d\u5217\u578b\u304b\u3089\u3059\u3079\u3066\u306e\u6b21\u5143\u3092\u53d6\u308a\u9664\u304d\u975e\u914d\u5217\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n\u30dd\u30a4\u30f3\u30bf\u306e\u5909\u66f4\n\n\nadd_pointer\n\u578b\u304b\u3089\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\nremove_pointer\n\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u304b\u3089\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n\u7b26\u53f7\u306e\u5909\u66f4\n\n\nmake_signed\n\u30b5\u30a4\u30ba\u304c\u578b\u4ee5\u4e0a\u306e\u578b\u307e\u305f\u306f\u6700\u5c0f\u306e\u7b26\u53f7\u4ed8\u304d\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nmake_unsigned\n\u30b5\u30a4\u30ba\u304c\u578b\u4ee5\u4e0a\u306e\u578b\u307e\u305f\u306f\u6700\u5c0f\u306e\u7b26\u53f7\u306a\u3057\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n\u305d\u306e\u4ed6\u306e\u5909\u66f4\n\n\naligned_storage\n\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u8abf\u6574\u3055\u308c\u305f\u9818\u57df\u3092\u4f5c\u6210\u3057\u307e\u3059\naligned_union\n\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u8abf\u6574\u3055\u308c\u305f\u5171\u7528\u4f53\u9818\u57df\u3092\u4f5c\u6210\u3057\u307e\u3059\ncommon_type\n2 \u3064\u306e\u578b\u306e\u578b\u5909\u63db\u53ef\u80fd\u306a\u5171\u901a\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\nconditional\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u5f0f\ndecay\n\u975e\u53c2\u7167\u3001\u975e\u5b9a\u6570\u3001\u975e\u63ee\u767a\u306e\u578b\u3001\u307e\u305f\u306f\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059\uff08\u914d\u5217\u3068\u95a2\u6570\u3092\u901a\u5e38\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u3068\u540c\u69d8\u306b\u63a8\u8ad6\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\uff09\nenable_if\n\u6761\u4ef6\u304c\u771f\u306e\u5834\u5408\u6709\u52b9\u306a\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nunderlying_type\nenum\u306e\u57fa\u5e95\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nresult_of\n\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059\nvoid_t(since C++17)\nvoid\u306e\u53ef\u5909\u9577\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u8ad6\u7406\u6f14\u7b97(since C++17)\n\n\nconjunction(since C++17)\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u53ef\u5909\u9577AND\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059\ndisjunction(since C++17)\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u53ef\u5909\u9577OR\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059\nnegation(since C++17)\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306eNOT\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059\n\n\n\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u578b\u304b\u3089\u578b\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u306f\ntypename add_const<T>::type\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u30cd\u30b9\u30c8\u3055\u308c\u305f\u578b\u3092\u53d6\u308a\u51fa\u3059\u304c\n\u9762\u5012\u306a\u306e\u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\ntemplate < typename T >\nusing add_const_t = typename add_const<T>::type ;\n\ntypename \u3068 ::type \u304c\u4e21\u65b9\u3068\u3082\u7701\u3051\u308b\uff01\nadd_const_t<T>\u306a\u3069\u3068\u66f8\u3051\u308b\n\u3084\u3063\u305f\u305c\uff01\n\n\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\nconstexpr \u3068 Variable template \u5c0e\u5165\u306b\u3088\u3063\u3066\u306f\u578b\u60c5\u5831\u3092bool\u5024\u3067\u8fd4\u3059\n\u30e1\u30bf\u95a2\u6570\u3092\ntemplate < typename T, typename U >\nconstexpr bool is_same_v = is_same<T,U>::value ;\n\n\u3068\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n\u3053\u308c\u3067\nis_same_v<T,U>\u306a\u3069\u3068\u66f8\u3051\u308b\n\u3061\u3087\u3044\u4fbf\u5229\u3067\u3059\u3002\n\u3053\u306e\u6a5f\u80fd\u306fC++17\u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\n\n\u81ea\u5206\u3067\u30e1\u30bf\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\nC++11\u4ee5\u524d\u3067\u306fsizeof\u3092\u60aa\u7528\u3057\u305f\u4e00\u898b\u610f\u5473\u306e\u5206\u304b\u3089\u306a\u3044\u30b3\u30fc\u30c9\u3067\n\u30e1\u30bf\u95a2\u6570\u3092\u8a18\u8ff0\u3057\u3066\u3044\u305f\n\u3057\u304b\u3057\u3001C++11\u304b\u3089decltype\u304c\u5165\u308a\ndeclval\u304c\u5165\u308a\n\u3068\u306b\u304b\u304f\u7c21\u5358\u306b\u304b\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n\nC++11\u4ee5\u524d\u306e\u30e1\u30bf\u95a2\u6570\nboost::is_convertible\u306e\u5b9f\u88c5\u3067\u3042\u308b\n\u57fa\u672c\u7684\u306bsizeof\u3068\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u9806\u5e8f\u3092\u4f7f\u3046\ntemplate <typename From, typename To>\nstruct is_convertible_basic_impl\n{\n    // 2 \u3064\u306e\u540c\u540d\u95a2\u6570\u3092\u4f5c\u3063\u3066\n    static no_type _m_check(...);\n    static yes_type _m_check(To);\n\n    // \u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u898b\u308b\uff08\u3069\u3063\u3061\u306e\u95a2\u6570\u304c\u4f7f\u308f\u308c\u308b\u304b\u3092\u898b\u308b\uff09\n    static bool value = sizeof( _m_check(From) ) == sizeof(yes_type);\n};\n\n\nC++11\u4ee5\u964d\u306e\u30e1\u30bf\u95a2\u6570\nSFINAE \u3068\u3044\u3046\u5f37\u529b\u306a\u6b66\u5668\u3092\u5f97\u305f\n\u3053\u308c\u306f\u3001Substitution Failure Is Not A Error\u306e\u7565\u8a9e\u3067\u3042\u308b\n\uff08\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\uff09\u5b9f\u4f53\u5316\u306e\u5931\u6557\u306f\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b\n\u3068\u8a00\u3063\u3066\u3082\u308f\u304b\u3089\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u3001\u4f8b\u3092\u51fa\u3057\u3066\u8aac\u660e\u3059\u308b\ntemplate < typename T >\ntypename T::value_type func(T);\n\n\u4e0a\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u306btypename T::value_type\u3068\u3044\u3046\u578b\u304c\u7528\u3044\u3089\u308c\u3066\u3044\u308b\n\u5f15\u6570\u306fT\u3067\u3042\u308b\u304b\u3089\u3001\u3042\u3089\u3086\u308b\u578b\u3092\u63a8\u8ad6\u3067\u304d\u308b\u304cvalue_type\u3068\u3044\u3046\u30e1\u30f3\u30d0\u578b\u540d\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u306f\u3069\u3046\u306a\u308b\u306e\u3060\u308d\u3046\uff1f\n\u3053\u3053\u3067 SFINAE \u304c\u767a\u52d5\u3059\u308b\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9f\u4f53\u5316\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u5373\u5ea7\u306b\u30a8\u30e9\u30fc\u306b\u305b\u305a\u3001\u4ed6\u306e\u95a2\u6570\u304c\u4e00\u81f4\u3057\u306a\u3044\u304b\u3092\u63a2\u3059\u306e\u3067\u3042\u308b\n\u3053\u306eSFIANE\u306fdecltype\u306e\u6587\u8108\u3067\u3082\u9069\u7528\u3055\u308c\u308b\ntemplate < typename L, typename R >\nauto plus(L&& l, R&& r) -> decltype(l+r)\n{\n  return l + r;\n}\n\n\u623b\u308a\u5024\u306e\u5f8c\u7f6e\u5ba3\u8a00\u3092\u7528\u3044\u3066\u3001decltype(\u4efb\u610f\u306e\u5f0f)\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u5f0f\u304c\u6709\u52b9\u306a\u5834\u5408\u306b\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3057\u3001\u7121\u52b9\u306e\u5834\u5408\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3059\u308b\u3068\u3044\u3046\u95a2\u6570\u306b\u306a\u308b\n\u305f\u3060\u3057\u91cd\u8981\u306a\u3053\u3068\u306f\u3001\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3059\u308b\u95a2\u6570\u304c\u540c\u6642\u306b\u8907\u6570\u3042\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u89e3\u6c7a\u306b\u5931\u6557\u3059\u308b\u305f\u3081\u3001\u9069\u5207\u306b\u5b9f\u4f53\u5316\u3092\u5931\u6557\u3055\u305b\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u3069\u3046\u8003\u3048\u3066\u3082\u7384\u4eba\u3057\u304b\u4f7f\u3048\u306a\u3044\u3068\u3044\u3046\u70b9\u3067\u3042\u308b\u3002\nC++11\u4ee5\u964d\u306e\u30e1\u30bf\u95a2\u6570\u3067\u306f\u3053\u308c\u3089\u3092\u99c6\u4f7f\u3059\u308b\u3002\n\n\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n\u30af\u30e9\u30b9\u306e\u5b8c\u5168\u306a\u7279\u6b8a\u5316\u3092\u7528\u3044\u308b\ntemplate < typename T >\nstruct is_int {\n    static constexpr bool value = false ;\n}\ntemplate < >\nstruct is_int<int> {\n    static constexpr bool value = true ;\n}\n\n\n\u8907\u5408\u578b\u306e\u5224\u5b9a\uff08\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5224\u5b9a\u306a\u3069\uff09\n\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5224\u5b9a\u3092\u3057\u305f\u3044\u3068\u304d\u306f\u30af\u30e9\u30b9\u306e\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u5229\u7528\u3059\u308b\ntemplate < typename T >\nstruct is_pointer {\n    static constexpr bool value = false ;\n}\ntemplate < typename T >\nstruct is_int<T*> {\n    static constexpr bool value = true ;\n}\n\n\u3053\u308c\u3060\u3051\u306a\u3089std::is_pointer<T>\u3092\u4f7f\u3048\u3070\u3044\u3044\n\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u4f7f\u3046\u5834\u5408\u306f\u5224\u5b9a\u3057\u305f\u3044\u30af\u30e9\u30b9\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u304d\u3060\nstd::vector<T>\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u66f8\u304d\u305f\u3044\u3068\u3059\u308b\n\u3053\u306e\u3068\u304dT\u306f\u306a\u3093\u3067\u3082\u304b\u307e\u308f\u306a\u3044\u306e\u3067\u90e8\u5206\u7684\u7279\u6b8a\u5316\u304c\u4f7f\u3048\u308b\ntemplate < typename T >\nstruct is_vector : std::false_type{};\n\ntemplate < typename T >\nstruct is_vector<std::vector<T>> : std::true_type {};\n\ntemplate < typename T >\nconstexpr bool is_vector_v = is_vector<T>::value;\n\n\u307e\u305f\u3001std::tuple\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u5834\u5408\u306ftuple\u304c\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3001\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u7528\u3044\u308b\ntemplate < typename T >\nstruct is_tuple : std::false_type{};\n\ntemplate < typename ...Types >\nstruct is_tuple<std::tuple<Types...>> : std::true_type {};\n\ntemplate < typename T >\nconstexpr bool is_tuple_v = is_tuple<T>::value;\n\n\n\u30e1\u30f3\u30d0\u578b\u540d\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u5224\u5b9a\u3059\u308b\n\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\uff08SFINAE\uff09\u3092\u5229\u7528\u3059\u308b\n\u30af\u30e9\u30b9\u304citerator\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\ntemplate <class T>\nclass has_iterator {\n  template <class U>\n  static constexpr bool check(typename U::iterator*)\n  { return true; }\n\n  template <class U>\n  static constexpr bool check(...)\n  { return false; }\npublic:\n  static constexpr bool value = check<T>(nullptr);\n};\n\n\u4e0a\u306e\u95a2\u6570\u3067\u306fSFINAE\u306e\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u3063\u3066\u3044\u308b\nU\u304citerator\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\n\u5b9f\u4f53\u5316\u306b\u5931\u6557\u3057\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u5019\u88dc\u304b\u3089\u5916\u3055\u308c\u3066\n\u4e0b\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u306a\u308b\n\u95a2\u6570\u306b\u5b9a\u7fa9\u306f\u3082\u306f\u3084\u5fc5\u8981\u3067\u306f\u306a\u3044\n\u308f\u308c\u308f\u308c\u306b\u306fdecltype\u304c\u3042\u308b\n\u305d\u3057\u3066\u3001\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u306e\nstd::true_type\u3068std::false_type\u304c\u3042\u308b\ntemplate <class T>\nclass has_iterator {\n  template <class U>\n  static constexpr std::true_type check(typename U::iterator*);\n\n  template <class U>\n  static constexpr std::false_type check(...);\n\npublic:\n  static constexpr bool value = decltype(check<T>(nullptr))::value;\n};\n\n\u3061\u306a\u307f\u306b\u3053\u306eSFINAE\u306e\u30c8\u30ea\u30c3\u30af\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u512a\u5148\u3055\u308c\u308c\u3070\u5f15\u6570\u306f\u306a\u3093\u3067\u3082\u826f\u3044\u306e\u3067\n\u4f8b\u3048\u3070int\u3068long\u3067\u3082\u3088\u3044\ntemplate <class T>\nclass has_iterator {\n  template <class U, typename O = typename U::iterator>\n  static constexpr std::true_type check(int);\n\n  template <class U>\n  static constexpr std::false_type check(long);\n\npublic:\n  static constexpr bool value = decltype(check<T>(0))::value;\n};\n\n\n\n\u3061\u3087\u3063\u3068\u4e00\u637b\u308a\u3057\u3066\u7d99\u627f\u3092\u4f7f\u3046\n\nstruct has_iterator_impl {\n  template <class T>\n  static std::true_type check(typename T::iterator*);\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_iterator :\n  public decltype(has_iterator_impl::check<T>(nullptr)) {};\n\n\n\n\u578b\u540d\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\n\u578b\u540d\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3068\u306f\n\u5909\u6570\u3068\u95a2\u6570\u3067\u3042\u308b\n\n\u30e1\u30f3\u30d0\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\nstruct has_value_impl {\n  template <class T>\n  static std::true_type check(decltype(T::value)*);\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_value :\n  public decltype(has_value_impl::check<T>(nullptr)) {};\n\n\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570f()\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\nstruct has_f_impl {\n  template <class T>\n  static auto check(T&& x)->decltype(x.f(),std::true_type{});\n\n  template <class T>\n  static auto check(...)->std::false_type;\n};\n\ntemplate <class T>\nclass has_f :\n  public decltype(has_f_impl::check<T>(std::declval<T>())) {};\n\n\n\u3053\u308c\u306fdecltype\u3068\u30ab\u30f3\u30de\u6f14\u7b97\u5b50operator,\u3092\u5229\u7528\u3057\u305fSFINAE\u30c8\u30ea\u30c3\u30af\u3067\u3042\u308b\ndecltype\u304c\u5f15\u6570\u30922\u3064\u3068\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff01\ndecltype\u306e\u4e2d\u306e\u5f0f\u306f\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u306b\u3088\u3063\u3066\u5de6\u304b\u3089\u53f3\u306b\u9806\u6b21\u8a55\u4fa1\u3055\u308c\n\u8fd4\u308b\u5024\u306f\u4e00\u756a\u53f3\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\n\u3064\u307e\u308a\nx.f()\u306e\u547c\u3073\u51fa\u3057\u306b\u5931\u6557\u3059\u308c\u3070\nSFINAE\u306b\u3088\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u5019\u88dc\u304b\u3089\u5916\u3055\u308c\n\u6210\u529f\u3059\u308c\u3070\nstd::true_type{}\u3092\u8a55\u4fa1\u3057decltype\u306e\u8868\u3059\u578b\u306fstd::true_type\u306b\u306a\u308a\u307e\u3059\n\n\n\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\n\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u7d50\u5408\u898f\u5247\u306f\u3001\u5de6\u304b\u3089\u53f3\u65b9\u5411\u3067\u3059\u3002\u30b3\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u305f 2 \u3064\u306e\u5f0f\u306f\u5de6\u304b\u3089\u53f3\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002\u5de6\u30aa\u30da\u30e9\u30f3\u30c9\u306f\u5e38\u306b\u8a55\u4fa1\u3055\u308c\u3001\u53f3\u30aa\u30da\u30e9\u30f3\u30c9\u304c\u8a55\u4fa1\u3055\u308c\u308b\u524d\u306b\u3059\u3079\u3066\u306e\u526f\u4f5c\u7528\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\u30b3\u30f3\u30de\u306f\u3001\u95a2\u6570\u306e\u5f15\u6570\u30ea\u30b9\u30c8\u306a\u3069\u306e\u4e00\u90e8\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u3001\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u306e\u30b3\u30f3\u30de\u306e\u4f7f\u7528\u3068\u6f14\u7b97\u5b50\u3068\u3057\u3066\u306e\u4f7f\u7528\u3092\u6df7\u540c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u306e 2 \u3064\u306e\u7528\u9014\u306f\u3001\u307e\u3063\u305f\u304f\u5225\u306e\u3082\u306e\u3067\u3059\u3002\n\u6b21\u306e\u5f0f\u3092\u8003\u3048\u307e\u3059\u3002\ne1 , e2\n\u3053\u306e\u5f0f\u306e\u578b\u3068\u5024\u306f\u3001e2 \u306e\u578b\u3068\u5024\u3067\u3059\u3002e1 \u3092\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u306f\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\u7d50\u679c\u306f\u3001\u53f3\u30aa\u30da\u30e9\u30f3\u30c9\u304c\u5de6\u8fba\u5024\u306e\u5834\u5408\u306f\u5de6\u8fba\u5024\u3067\u3059\u3002\n\u901a\u5e38\u3001\u30b3\u30f3\u30de\u304c\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u5834\u6240 (\u305f\u3068\u3048\u3070\u3001\u95a2\u6570\u306e\u5b9f\u5f15\u6570\u3084\u96c6\u7d04\u306e\u521d\u671f\u5316\u5b50) \u3067\u306f\u3001\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u305d\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u304b\u3063\u3053\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\nfunc_1( x, y + 2, z );\nfunc_2( (x--, y + 2), z );\n\n\u4e0a\u306e func_1 \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3067\u306f\u3001x\u3001y + 2\u3001z \u3068\u3044\u3046 3 \u3064\u306e\u5f15\u6570\u304c\u30b3\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u3066\u6e21\u3055\u308c\u307e\u3059\u3002 func_2 \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3067\u306f\u3001\u304b\u3063\u3053\u306b\u3088\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u9806\u6b21\u8a55\u4fa1\u6f14\u7b97\u5b50\u3068\u3057\u3066\u6700\u521d\u306e\u30b3\u30f3\u30de\u3092\u89e3\u91c8\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306f\u3001func_2 \u306b 2 \u3064\u306e\u5f15\u6570\u3092\u6e21\u3057\u307e\u3059\u3002\u6700\u521d\u306e\u5f15\u6570\u306f\u3001\u9806\u6b21\u8a55\u4fa1\u6f14\u7b97 (x--, y + 2) \u306e\u7d50\u679c\u3067\u3059\u3002\u3053\u306e\u6f14\u7b97\u306f\u3001\u5f0f y + 2 \u306e\u5024\u3068\u578b\u3092\u6301\u3061\u3001\u7b2c 2 \u306e\u5f15\u6570\u306f z \u3067\u3059\u3002\n\n\n\u95a2\u6570value()\u3068\u5909\u6570value\u306e\u3069\u3061\u3089\u304b\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\n\u30af\u30e9\u30b9\u304c\u6301\u3064\u30e1\u30f3\u30d0\u306f\u578b\u3001\u95a2\u6570\u3001\u5909\u6570\u3067\u3042\u308b\n\u3053\u306e\u5185\u3067\u578b\u306b\u306f\u306a\u304f\u3001\u95a2\u6570\u3068\u5909\u6570\u306b\u5171\u901a\u3057\u3066\u3082\u3064\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\n\u3059\u306a\u308f\u3061\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\nstruct has_value_impl {\n  template <class T>\n  static std::true_type check(decltype(&T::value));\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_value :\n  public decltype(has_value_impl::check<T>(nullptr)) {};\n\n\n\n\u578b\u306e\u7279\u6027\nT\u304c\u4ee3\u5165\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\nstruct is_assignable_impl {\n  template <class T>\n  static auto check(T&& x, T const& y) -> decltype(x=y,std::true_type{});\n\n  static auto check(...) -> std::false_type;\n};\n\ntemplate <class T>\nstruct is_assignable\n  : decltype(is_assignable_impl::check(std::declval<T>(),std::declval<T>())) {};\n\n\ndeclval\n\u3053\u3053\u3067std::declval<T>()\u306a\u308b\u3082\u306e\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\n\u5f0f\u304c\u6709\u52b9\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u306fdecltype\u306a\u4e2d\u306b\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\nSFINAE\u30c8\u30ea\u30c3\u30af\u3092\u7528\u3044\u308c\u3070\u826f\u3044\u306e\u3067\u3057\u305f\n\u305f\u3060\u3001\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u306b\u306f\u5909\u6570\u304c\u5fc5\u8981\u3067\u3059\n\u578b\u306e\u7279\u6027\u3092\u8abf\u3079\u308b\u306e\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306a\u306e\u3067\u5909\u6570\u3092\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\n\u3057\u304b\u3057\u3001decltype\u306e\u306a\u304b\u3067\u306f\u672c\u5f53\u306e\u5909\u6570\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3059\ntemplate < typename T >\nstd::add_rvalue_reference<T> value() ;\n\n\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u4f5c\u308c\u3070\u8fd4\u308a\u5024\u3092decltype\u306e\u4e2d\u3067\u5909\u6570\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u3053\u308c\u3053\u305ddeclval\u306e\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\ndeclval\u306fdecltype\u306e\u4e2d\u3067\u306e\u307f\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5909\u6570\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\n\nC++1z\u6642\u4ee3\u306e\u30e1\u30bf\u95a2\u6570 [ \u8ffd\u8a18\uff082016-9-17\uff09]\nC++\u3082\u9806\u8abf\u306b\u9032\u5316\u3057\u3066\u3001\u30e1\u30bf\u95a2\u6570\u306e\u66f8\u304d\u65b9\u3082\u5909\u9077\u3057\u3066\u3044\u308b\u3002\nC++1z\u306b\u63a1\u629e\u3055\u308c\u305fvoid_t\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3059\u308b\u3002\n\n\u59cb\u307e\u308a\u306f\u3053\u3053\u304b\u3089\uff08\u9069\u5f53\ntemplate<typename T, typename = void>\nstruct is_equality_comparable : std::false_type\n{};\n\ntemplate<typename T>\nstruct is_equality_comparable<T,\n    typename std::enable_if<\n        true, \n        decltype(std::declval<T&>() == std::declval<T&>(), (void)0)\n        >::type\n    > : std::true_type\n{};\n\n\u578bT\u304coperator==\u3067\u6bd4\u8f03\u3067\u304d\u308b\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3042\u308b\u3002\n\u7279\u6b8a\u5316\u3055\u308c\u305f\u4e0b\u306e\u30af\u30e9\u30b9\u306fstd::enable_if\u306e\u6761\u4ef6\u3092\u5e38\u306b\u771f\u306b\u3057\u3066decltype\u306e\u4e2d\u3067\u6761\u4ef6\u3092\u8a18\u8ff0\u3059\u308b\u3002\u305d\u3046\u3044\u3066\u304a\u3044\u3066\u3001\u6761\u4ef6\u304c\u6059\u7121\u304f\u8a55\u4fa1\u3067\u304d\u308c\u3070\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u3067void\u306b\u63a8\u8ad6\u3055\u305b\u3066\u3044\u308b\u3002\n\u660e\u3089\u304b\u306bstd::enable_if\u306e\u4f7f\u3044\u65b9\u3092\u9593\u9055\u3063\u3066\u3044\u308b\u3002\n\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3057\u305f\u3089\u5e38\u306bvoid\u306b\u306a\u308b\u578b\u304c\u30a2\u30ec\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\n\u305d\u3046\u3001\u305d\u3053\u3067void_t\u306e\u7206\u8a95\u3067\u3042\u308b\u3002\ntemplate < typename ... >\nusing void_t = void;\n\nvoid_t\u306b\u3069\u306e\u3088\u3046\u306a\u4eee\u5f15\u6570\u3092\u6e21\u3057\u3066\u3082void\u306b\u5b9f\u4f53\u5316\u3059\u308b\u3002\n\u3053\u308c\u3092\u7528\u3044\u3066\u3001\u5148\u306eis_equality_comparable\u3092\u66f8\u304d\u76f4\u305d\u3046\u3002\ntemplate< class, class=void >\nstruct is_equality_comparable : std::false_type\n{};\n\ntemplate< class T >\nstruct is_equality_comparable<T,\n  void_t<decltype(std::declval<T&>() == std::declval<T&>() )>\n  > : std::true_type\n{};\n\n\n\u57fa\u5e95\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u306f\ntemplate <class,class=void>\n\n\u3068\u3057\u3001std::false_type\u3092\u7d99\u627f\u3059\u308b\u3002\n\u6b21\u306b\u7279\u6b8a\u5316\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u3092\ntemplate <class T>\n\n\u3068\u3059\u308b\u3002\n\u3053\u3053\u3067void_t\u306e\u51fa\u756a\u3067\u3042\u308b\u3002\n\u7279\u6b8a\u5316\u306e\u5f15\u6570\u306e1\u3064\u3081\u306fT\u306b\u3057\u3066\u304a\u304d\u30012\u3064\u3081\u3092void_t\u306b\u3059\u308b\u3002\nvoid_t\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306bdecltype\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u4e2d\u306b\u78ba\u304b\u3081\u305f\u3044\u3053\u3068\u3092\u66f8\u304f\u3002\nstruct is_equality_comparable<T,\n  void_t<decltype(std::declval<T&>() == std::declval<T&>() )>\n\n\u4eca\u56de\u306foperator==\u3067\u6bd4\u8f03\u3067\u304d\u308b\u304b\u3092\u66f8\u3044\u305f\u304c\u3001\u3053\u306e\u624b\u6cd5\u3067\u7279\u5b9a\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3084\u3001\u7279\u5b9a\u306e\u64cd\u4f5c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nDetection Idiom\u3068\u547c\u3070\u308c\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3002\n\u3082\u3063\u3068\u8a73\u3057\u304f\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u306a\u3089\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u826f\u3044\u3060\u308d\u3046\u3002\nFaith and Brave\nyohhoy\u306e\u65e5\u8a18\nN3911 TransformationTrait Alias void_t\n\u4ee5\u4e0b\u306fC++1z\u306b\u306f\u63a1\u629e\u3055\u308c\u306a\u304b\u3063\u305fvoid_t\u3092\u7528\u3044\u305f\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8\u306e\u63d0\u6848\u3067\u3042\u308b\u3002\n\u306a\u304b\u306a\u304b\u4fbf\u5229\u306a\u306e\u3060\u304c\u3001\u3084\u308a\u904e\u304e\u611f\u304c\u6f02\u3063\u3066\u3044\u308b\u3002\nN4502 Proposing Standard Library Support for the C++ Detection Idiom, v2\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6761\u4ef6\u6f14\u7b97\n\nbool_constant\n\u30fb\u6761\u4ef6A\u304b\u6761\u4ef6B\u3092\u6e80\u305f\u3059\u5834\u5408\u306b\u771f\u3068\u306a\u308b\u30e1\u30bf\u95a2\u6570\nstd::integral_constant<bool,value>\u3092\u7d99\u627f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002std::integral_constant<bool,value>\u306e\u30a8\u30a4\u30ea\u30a2\u30b9std::bool_constant<value>\u304c\u3064\u304b\u3048\u307e\u3059\uff08since C++17\uff09\u3002\n\u4f8b\u3048\u3070\u3001Range\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u96d1\u306b\u5224\u5b9a\u3059\u308b\u3068\u3057\u3066\u3001T\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8a\u306b\u5bfe\u3057\u3066\n\u6761\u4ef6A\nstd::begin(a), std::end(a)\n\n\u304c\u53ef\u80fd\n\u3082\u3057\u304f\u306f\n\u6761\u4ef6B\nbegin(a), end(a)\n\n\u304c\u53ef\u80fd\u3067\u3042\u308c\u3070\u826f\u3044\u3002\n\u305d\u3053\u3067\u3001\u3053\u306e\u7247\u65b9\u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u66f8\u304f\u3002\n\u6700\u5f8c\u306b\ntemplate < typename T >\nstruct is_range : std::bool_constant<\n  A<T>::value || B<T>::value\n>{};\n\n\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3002\n\u4ee5\u4e0b\u3001\u5b9f\u88c5\u4f8b\u3002\n#include <type_traits>\n#include <utility>\n\nnamespace cranberries_magic{\n\n  template < class, class=void >\n  struct enable_std_begin_end : std::false_type {};\n\n  template < typename T >\n  struct enable_std_begin_end<T,\n      std::void_t<decltype( std::begin(std::declval<const T&>()),std::end(std::declval<const T&>()) )>>\n  : std::true_type {};\n\n  template < class, class=void >\n  struct enable_adl_begin_end : std::false_type {};\n\n  template < typename T >\n  struct enable_adl_begin_end<T,\n      std::void_t<decltype( begin(std::declval<const T&>()),end(std::declval<const T&>()) )>>\n  : std::true_type {};\n\n\n} // ! namespace cranberries_magic\n\n  template < typename T >\n  struct is_range\n    : std::bool_constant<\n       cranberries_magic::enable_std_begin_end<T>::value\n    || cranberries_magic::enable_adl_begin_end<T>::value>\n  {};\n\n  template < typename T >\n  constexpr bool is_range_v = is_range<T>::value;\n\n\nenable_if_t\u3092\u4f7f\u3063\u305f\u5834\u5408\nis_iterator\u3092\u66f8\u3044\u3066\u307f\u305f\u4f8b\u3002\niterator_tag\u3068\u3057\u3066input_iterator_tag\u3082\u3057\u304f\u306f\u3001output_iterator_tag\u3092\u7d99\u627f\u3057\u3066\u3044\u308c\u3070iterator\u3067\u3042\u308b\u306f\u305a\u3068\u3044\u3046\u3001\u96d1\u306a\u5224\u5b9a\u3067\u3042\u308b\u3002\nbool_constant\u3068\u306e\u9055\u3044\u306f\u30af\u30e9\u30b9\u304c\uff12\u3064\u306b\u5225\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3060\u3002\n  template < class, class=void >\n  struct is_iterator : std::false_type {};\n\n  template < typename T >\n  struct is_iterator<T,\n    std::enable_if_t<\n      std::is_base_of<std::input_iterator_tag, typename std::iterator_traits<T>::iterator_category>::value\n   || std::is_base_of<std::output_iterator_tag, typename std::iterator_traits<T>::iterator_category>::value\n    >\n  > : std::true_type\n  {};\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u8ad6\u7406\u6f14\u7b97 [ \u8ffd\u8a18\uff082017-2-23\uff09]\nC++17\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\uff08\u30e1\u30bf\u95a2\u6570\u306e\u771f\u507d\uff09\u3092\u6f14\u7b97\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bf\u95a2\u6570\u304c\u767b\u5834\uff01\nAND\u6f14\u7b97\u3059\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 conjunction\nOR\u6f14\u7b97\u3059\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 disjunction\nNOT\u6f14\u7b97\u3059\u308b negation \n\u306e3\u7a2e\u985e\u304c\u3042\u308b\n\u30ca\u30f3\u30c7\u3053\u3093\u306a\u306b\u3084\u3084\u3053\u3057\u3044\u540d\u524d\u306a\u306e\u304b\u3068\u601d\u308f\u308c\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\nC++\u3067\u306fand, or, not\u306f\u4e88\u7d04\u8a9e\u3067\u3042\u308a\u3001\u4f7f\u3048\u306a\u3044\u306e\u3060\n\u3082\u3068\u3082\u3068boost MPL\u306b\u3042\u308band_, or_, not_\u3068\u540c\u3058\u540d\u524d\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u3053\u3046\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3060\nconjunction, disjunction \u306f\u6e21\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306evalue\u3092AND\uff08OR\uff09\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\nnegation \u306f\u6e21\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306evalue\u3092\u5426\u5b9a\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n// \u5168\u3066\u306e\u6761\u4ef6\u304ctrue\u306a\u3089\u7d50\u679c\u304ctrue\u3068\u306a\u308b\nconstexpr bool result1 = std::conjunction_v<\n    std::true_type,\n    std::is_void<void>,\n    std::is_same<int,int>\n>;\n\n// \u6761\u4ef6\u3092\u5426\u5b9a\u3059\u308b\nconstexpr bool result2 = std::negation_v<std::true_type>; // false\n\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u4e0a\u4f8b\u306eis_range\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\n\u76f4\u63a5disjunction\u3092\u7d99\u627f\u3057\u3066\u3001\u6761\u4ef6\u3092\u7f85\u5217\u3059\u308c\u3070\u826f\u3044\n\u304b\u306a\u308a\u697d\u306b\u306a\u3063\u3066\u304d\u305f\u611f\u3058\ntemplate < typename T >\nstruct is_range\n  : std::disjunction<\n     detail::enable_std_begin_end<T>,\n     detail::enable_adl_begin_end<T>>\n{};\n\nis_iterator \u3082\u66f8\u304d\u63db\u3048\u3066\u307f\u3088\u3046\ntemplate < typename T >\nstruct is_iterator : std::disjunction<\n      std::is_base_of<std::input_iterator_tag, typename std::iterator_traits<T>::iterator_category>,\n      std::is_base_of<std::output_iterator_tag, typename std::iterator_traits<T>::iterator_category>>\n{};\n\n\u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u304b\u3089\u65b0\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u3092\u3064\u304f\u308b\u306a\u3089\u3053\u308c\u3060\u306a\u3063\u3066\u611f\u3058\u3067\u3059\u306d\n\n\u8dcb\u6587\n\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30e1\u30bf\u95a2\u6570\u3067\u6709\u610f\u7fa9\u306aTMP\u30e9\u30a4\u30d5\u3092\u6e80\u55ab\u3057\u307e\u3057\u3087\u3046\uff01\n\u9593\u9055\u3044\u3084\u8cea\u554f\u3001\u3054\u610f\u898b\u7b49\u306f\n\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u304f\u304b\n\u3044\u306a\u3080\u5148\u751f | Twitter\n\u307e\u3067\u3054\u4e00\u5831\u304f\u3060\u3055\u3044\n\u3067\u304d\u308b\u3060\u3051\u3059\u307f\u3084\u304b\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\n\nAll text is available under the CC0 1.0 Universal license.\n#\u30e1\u30bf\u95a2\u6570\u306e\u307e\u3068\u3081\n\n##\u30e1\u30bf\u95a2\u6570\u3068\u306f\uff1f\n\u30e1\u30bf\u95a2\u6570\u3068\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u578b\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u95a2\u6570\u306e\u3088\u3046\u306a\u3082\u306e\n\u5b9f\u969b\u306b\u306f\u3001\u95a2\u6570\u306e\u5f62\u3092\u53d6\u3089\u305a\u3001\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u3060\u304c\n\u95a2\u6570\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n\u4f8b\u3048\u3070\u578b`T`\u3068\u578b`U`\u304c\u540c\u4e00\u304b\u3069\u3046\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\u306f\n\n```cpp\nstd::is_same<T,U>::value\n```\n\n\u3068\u3059\u308c\u3070\nis_same\u306fT,U\u304c\u540c\u3058\u578b\u306a\u3089\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30e1\u30f3\u30d0\u5909\u6570value\u306ftrue\nT,U\u304c\u9055\u3046\u578b\u306a\u3089false\u3092\u8fd4\u3059\n\n\u4ed6\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304b\uff1f\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u898b\u3066\u3044\u3053\u3046\uff01\n\n\n##\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\\<type_traits\\>\n\u30e1\u30bf\u95a2\u6570\u306fC++11\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\\<type_traits\\>\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\nC++14\u3067\u306f`is_nullptr` \u3068`is_final`\u304c\u4ef2\u9593\u5165\u308a\u3057\u305f\n\nC++17\u304b\u3089\u306f`is_literal_type`\u3001\u304c\u975e\u63a8\u5968\u306b\u306a\u308b\n\u307e\u305f\u3001\n`has_unique_object_representations`\u3001\n`is_swappable_with`\u3001`is_swappable`\u3001`is_nothrow_swappable_with`\u3001`is_nothrow_swappable`\u3001\n`is_callable`\u3001`is_nothrow_callable`\u3001\n`conjunction`\u3001`disjunction`\u3001`negation`\u3001\n`bool_constant`\u3001`void_t`\u304c\u4ef2\u9593\u5165\u308a\u3059\u308b\n\n\n\n###\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\n---\n<dl>\n<dt>integer_constant</dt>\n<dd>\u6574\u6570\u306e\u5b9a\u6570\u3092\u8868\u3059\u578b</dd>\n<dt>true_type</dt>\n<dd>true\u3092\u8868\u3059\u578b\uff08typedef\uff09</dd>\n<dt>false_type<dt>\n<dd>false\u3092\u8868\u3059\u578b\uff08typedef\uff09</dd>\n</dl>\n\n###\u57fa\u672c\u7684\u306a\u578b\n---\n\n<dl>\n<dt>is_void</dt>\n<dd>\u578b\u304c void \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_nullptr(since C++14)</dt>\n<dd>\u578b\u304c nullptr_t \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_integral</dt>\n<dd>\u578b\u304c\u6574\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_floating_point</dt>\n<dd>\u578b\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059/<dd>\n<dt>is_array</dt>\n<dd>\u578b\u304c\u914d\u5217\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_pointer</dt>\n<dd>\u578b\u304c\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_lvalue_reference</dt>\n<dd>\u578b\u304c lvalue \u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_rvalue_reference</dt>\n<dd>\u578b\u304c rvalue \u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_member_function_pointer</dt>\n<dd>\u578b\u304c\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_member_object_pointer</dt>\n<dd>\u578b\u304c\u30e1\u30f3\u30d0\u30fc \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_enum</dt>\n<dd>\u578b\u304c\u5217\u6319\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_union</dt>\n<dd>\u578b\u304c\u5171\u7528\u4f53\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_class</dt>\n<dd>\u578b\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_function</dt>\n<dd>\u578b\u304c\u95a2\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n</dl>\n\n###\u8907\u5408\u578b\n---\n<dl>\n<dt>is_scalar</dt>\n<dd>\u578b\u304c\u30b9\u30ab\u30e9\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_arithmetic</dt>\n<dd>\u578b\u304c\u6f14\u7b97\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_reference</dt>\n<dd>\u578b\u304c\u53c2\u7167\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_fundamental</dt>\n<dd>\u578b\u304c void \u307e\u305f\u306f\u6f14\u7b97\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_member_pointer</dt>\n<dd>\u578b\u304c\u30e1\u30f3\u30d0\u30fc\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_object</dt>\n<dd>\u578b\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_compound</dt>\n<dd>\u578b\u304c\u975e\u30b9\u30ab\u30e9\u30fc\uff08\u8907\u5408\u578b\uff09\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n</dl>\n\n###\u578b\u306e\u7279\u6027\n---\n\n<dl>\n<dt>is_abstract</dt>\n<dd>\u578b\u304c\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_const</dt>\n<dd>\u578b\u304c\u5b9a\u6570\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_empty</dt>\n<dd>\u578b\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_final(since C++14)</dt>\n<dd>\u578b\u306bfinal\u304c\u4ed8\u3044\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_pod</dt>\n<dd>\u578b\u304c POD \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_literal_type(deprecated in C++17)</dt>\n<dd>\u578b\u304c\u30ea\u30c6\u30e9\u30eb\u578b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_polymorphic</dt>\n<dd>\u578b\u306b\u4eee\u60f3\u95a2\u6570\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_signed</dt>\n<dd>\u578b\u304c\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_standard_layout</dt>\n<dd>\u578b\u304c\u6a19\u6e96\u30ec\u30a4\u30a2\u30a6\u30c8\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_unsigned</dt>\n<dd>\u578b\u304c\u7b26\u53f7\u306a\u3057\u6574\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_volatile</dt>\n<dd>\u578b\u304c volatile \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n</dl>\n\n\n###\u578b\u306e\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\n---\n\n\u578b\u304c\u7279\u5b9a\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u7279\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3001\u30b3\u30d4\u30fc\u3001\u30e0\u30fc\u30d6\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30c8\u306e4\u7a2e\u985e\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\n\n\u901a\u5e38\u7248\n\u30c8\u30ea\u30d3\u30a2\u30eb\u7248\n\u7121\u4f8b\u5916\u4fdd\u8a3c\u7248\n\n\u306e3\u7a2e\u985e\u304c\u3042\u308b\n\n<dl>\n<dt>is_constructible</dt>\n<dt>is_trivially_constructible</dt>\n<dt>is_nothrow_constructible</dt>\n<dd>\u6307\u5b9a\u3055\u308c\u305f\u521d\u671f\u5316\u5b50\u578b\u30ea\u30b9\u30c8\u304b\u3089\u578b\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_default_constructible</dt>\n<dt>is_trivially_default_constructible</dt>\n<dt>is_nothrow_default_constructible</dt>\n<dd>\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_copy_constructible</dt>\n<dt>is_trivially_copy_constructible</dt>\n<dt>is_nothrow_copy_constructible</dt>\n<dd>\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_move_constructible</dt>\n<dt>is_trivially_move_constructible</dt>\n<dt>is_nothrow_move_constructible</dt>\n<dd>\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_assignable</dt>\n<dt>is_trivially_assignable</dt>\n<dt>is_nothrow_assignable</dt>\n<dd>\u6307\u5b9a\u3055\u308c\u305f\u578b\u304c\u4ee3\u5165\u6f14\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_copy_assignable</dt>\n<dt>is_trivially_copy_assignable</dt>\n<dt>is_nothrow_copy_assignable</dt>\n<dd>\u3042\u308b\u304c\u578b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_destructible</dt>\n<dt>is_trivially_destructible</dt>\n<dt>is_nothrow_destructible</dt>\n<dd>\u660e\u793a\u7684\u306bdeleted\u5ba3\u8a00\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3082\u3064\u304b\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>has_virtual_destructor</dt>\n<dd>virtual\u306a\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u304b\u30c6\u30b9\u30c8\u3059\u308b</dd>\n<dt>is_swappable_with(since C++17)</dt>\n<dd>\u578b\u304c\u4ed6\u306e\u578b\u3068\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_swappable(since C++17)</dt>\n<dd>\u578b\u304c\u540c\u3058\u578b\u3068\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_nothrow_swappable_with(since C++17)</dt>\n<dd>\u578b\u304c\u4ed6\u306e\u578b\u3068\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_nothrow_swappable(since C++17)</dt>\n<dd>\u578b\u304c\u540c\u3058\u578b\u3068\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u30b9\u30ef\u30c3\u30d7\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>has_unique_object_representations</dt>\n<dd>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u81ea\u52d5\u7684\u306b\u30cf\u30c3\u30b7\u30e5\u3092\u8a08\u7b97\u3067\u304d\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\uff08C++17\u3067\u306f\u81ea\u52d5\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u304c\u3001\u305d\u306e\u524d\u6bb5\u968e\u3068\u3057\u3066\u5165\u3063\u305f\u6a5f\u80fd\u3067\u3059\uff09</dd>\n</dl>\n\n###\u578b\u306e\u7279\u6027\u306b\u3064\u3044\u3066\u306e\u554f\u3044\u5408\u308f\u305b\n---\n<dl>\n<dt>alignment_of</dt>\n<dd>\u578b\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059</dd>\n<dt>rank</dt>\n<dd>\u914d\u5217\u306e\u6b21\u5143\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059</dd>\n<dt>extent</dt>\n<dd>\u914d\u5217\u306e\u6b21\u5143\u3092\u53d6\u5f97\u3057\u307e\u3059</dd>\n</dl>\n\n###\u578b\u306e\u95a2\u4fc2\n---\n<dl>\n<dt>is_same</dt>\n<dd>2 \u3064\u306e\u578b\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_base_of</dt>\n<dd>\u4e00\u65b9\u306e\u578b\u304c\u3082\u3046\u4e00\u65b9\u306e\u578b\u306e\u57fa\u672c\u30af\u30e9\u30b9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd><dt>is_convertible</dt>\n<dd>\u4e00\u65b9\u306e\u578b\u3092\u3082\u3046\u4e00\u65b9\u306e\u578b\u306b\u5909\u63db\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_callable</dt>\n<dd>\u95a2\u6570\u304c\u547c\u3073\u51fa\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n<dt>is_nothrow_callable</dt>\n<dd>\u95a2\u6570\u304c\u7121\u4f8b\u5916\u4fdd\u8a3c\u4ed8\u304d\u3067\u547c\u3073\u51fa\u305b\u308b\u304b\u3069\u3046\u304b\u30c6\u30b9\u30c8\u3057\u307e\u3059</dd>\n</dl>\n\n###const/volatile\u306e\u5909\u66f4\n---\n<dl>\n<dt>add_const</dt>\n<dd>\u578b\u304b\u3089 const \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>add_volatile</dt>\n<dd>\u578b\u304b\u3089 volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>add_cv</dt>\n<dd>\u578b\u304b\u3089 const volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_const</dt>\n<dd>\u578b\u304b\u3089\u975e const \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_volatile</dt>\n<dd>\u578b\u304b\u3089\u975e volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_cv</dt>\n<dd>\u578b\u304b\u3089\u975e const volatile \u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n</dl>\n\n###reference\u306e\u5909\u66f4\n---\n<dl>\n<dt>add_lvalue_reference</dt>\n<dd>\u578b\u304b\u3089\u578b\u3078\u306e\u5de6\u8fba\u5024\u53c2\u7167\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>add_rvalue_reference</dt>\n<dd>\u578b\u304b\u3089\u578b\u3078\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_reference</dt>\n<dd>\u578b\u304b\u3089\u975e\u53c2\u7167\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n</dl>\n\n###\u914d\u5217\u306e\u5909\u66f4\n---\n<dl>\n<dt>remove_extent</dt>\n<dd>\u914d\u5217\u578b\u304b\u3089\u6b21\u5143\u3092\u53d6\u308a\u9664\u304d\u8981\u7d20\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_all_extents</dt>\n<dd>\u914d\u5217\u578b\u304b\u3089\u3059\u3079\u3066\u306e\u6b21\u5143\u3092\u53d6\u308a\u9664\u304d\u975e\u914d\u5217\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n</dl>\n\n###\u30dd\u30a4\u30f3\u30bf\u306e\u5909\u66f4\n---\n<dl>\n<dt>add_pointer</dt>\n<dd>\u578b\u304b\u3089\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>remove_pointer</dt>\n<dd>\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u304b\u3089\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n</dl>\n\n###\u7b26\u53f7\u306e\u5909\u66f4\n---\n<dl>\n<dt>make_signed</dt>\n<dd>\u30b5\u30a4\u30ba\u304c\u578b\u4ee5\u4e0a\u306e\u578b\u307e\u305f\u306f\u6700\u5c0f\u306e\u7b26\u53f7\u4ed8\u304d\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>make_unsigned</dt>\n<dd>\u30b5\u30a4\u30ba\u304c\u578b\u4ee5\u4e0a\u306e\u578b\u307e\u305f\u306f\u6700\u5c0f\u306e\u7b26\u53f7\u306a\u3057\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n</dl>\n\n###\u305d\u306e\u4ed6\u306e\u5909\u66f4\n---\n<dl>\n<dt>aligned_storage</dt>\n<dd>\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u8abf\u6574\u3055\u308c\u305f\u9818\u57df\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>aligned_union</dt>\n<dd>\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u8abf\u6574\u3055\u308c\u305f\u5171\u7528\u4f53\u9818\u57df\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>common_type</dt>\n<dd>2 \u3064\u306e\u578b\u306e\u578b\u5909\u63db\u53ef\u80fd\u306a\u5171\u901a\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>conditional</dt>\n<dd>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u5f0f</dd>\n<dt>decay</dt>\n<dd>\u975e\u53c2\u7167\u3001\u975e\u5b9a\u6570\u3001\u975e\u63ee\u767a\u306e\u578b\u3001\u307e\u305f\u306f\u578b\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3059<br>\uff08\u914d\u5217\u3068\u95a2\u6570\u3092\u901a\u5e38\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u578b\u63a8\u8ad6\u3068\u540c\u69d8\u306b\u63a8\u8ad6\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\uff09</dd>\n<dt>enable_if</dt>\n<dd>\u6761\u4ef6\u304c\u771f\u306e\u5834\u5408\u6709\u52b9\u306a\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>underlying_type</dt>\n<dd>enum\u306e\u57fa\u5e95\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>result_of</dt>\n<dd>\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u4f5c\u6210\u3057\u307e\u3059</dd>\n<dt>void_t(since C++17)</dt>\n<dd>void\u306e\u53ef\u5909\u9577\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3059</dd>\n</dl>\n\n###\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u8ad6\u7406\u6f14\u7b97(since C++17)\n---\n<dl>\n<dt>conjunction(since C++17)</dt>\n<dd>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u53ef\u5909\u9577AND\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059</dd>\n<dt>disjunction(since C++17)</dt>\n<dd>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u53ef\u5909\u9577OR\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059</dd>\n<dt>negation(since C++17)</dt>\n<dd>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306eNOT\u6f14\u7b97\u3092\u884c\u3044\u307e\u3059</dd>\n</dl>\n##\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u578b\u304b\u3089\u578b\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u306f\n\n```cpp\ntypename add_const<T>::type\n```\n\u306e\u3088\u3046\u306b\u3057\u3066\u30cd\u30b9\u30c8\u3055\u308c\u305f\u578b\u3092\u53d6\u308a\u51fa\u3059\u304c\n\u9762\u5012\u306a\u306e\u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\n\n```cpp\ntemplate < typename T >\nusing add_const_t = typename add_const<T>::type ;\n```\n\n`typename` \u3068 `::type` \u304c\u4e21\u65b9\u3068\u3082\u7701\u3051\u308b\uff01\n`add_const_t<T>`\u306a\u3069\u3068\u66f8\u3051\u308b\n\u3084\u3063\u305f\u305c\uff01\n\n##\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n`constexpr` \u3068 `Variable template` \u5c0e\u5165\u306b\u3088\u3063\u3066\u306f\u578b\u60c5\u5831\u3092bool\u5024\u3067\u8fd4\u3059\n\u30e1\u30bf\u95a2\u6570\u3092\n\n```cpp\ntemplate < typename T, typename U >\nconstexpr bool is_same_v = is_same<T,U>::value ;\n```\n\n\u3068\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n\n\u3053\u308c\u3067\n`is_same_v<T,U>`\u306a\u3069\u3068\u66f8\u3051\u308b\n\u3061\u3087\u3044\u4fbf\u5229\u3067\u3059\u3002\n\u3053\u306e\u6a5f\u80fd\u306fC++17\u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5165\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\n\n\n#\u81ea\u5206\u3067\u30e1\u30bf\u95a2\u6570\u3092\u8a18\u8ff0\u3059\u308b\nC++11\u4ee5\u524d\u3067\u306f`sizeof`\u3092\u60aa\u7528\u3057\u305f\u4e00\u898b\u610f\u5473\u306e\u5206\u304b\u3089\u306a\u3044\u30b3\u30fc\u30c9\u3067\n\u30e1\u30bf\u95a2\u6570\u3092\u8a18\u8ff0\u3057\u3066\u3044\u305f\n\u3057\u304b\u3057\u3001C++11\u304b\u3089`decltype`\u304c\u5165\u308a\n`declval`\u304c\u5165\u308a\n\u3068\u306b\u304b\u304f\u7c21\u5358\u306b\u304b\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n\n##C++11\u4ee5\u524d\u306e\u30e1\u30bf\u95a2\u6570\nboost::is_convertible\u306e\u5b9f\u88c5\u3067\u3042\u308b\n\u57fa\u672c\u7684\u306bsizeof\u3068\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u9806\u5e8f\u3092\u4f7f\u3046\n\n```cpp\ntemplate <typename From, typename To>\nstruct is_convertible_basic_impl\n{\n    // 2 \u3064\u306e\u540c\u540d\u95a2\u6570\u3092\u4f5c\u3063\u3066\n    static no_type _m_check(...);\n    static yes_type _m_check(To);\n\n    // \u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u898b\u308b\uff08\u3069\u3063\u3061\u306e\u95a2\u6570\u304c\u4f7f\u308f\u308c\u308b\u304b\u3092\u898b\u308b\uff09\n    static bool value = sizeof( _m_check(From) ) == sizeof(yes_type);\n};\n```\n\n##C++11\u4ee5\u964d\u306e\u30e1\u30bf\u95a2\u6570\n\n**SFINAE** \u3068\u3044\u3046\u5f37\u529b\u306a\u6b66\u5668\u3092\u5f97\u305f\n\u3053\u308c\u306f\u3001Substitution Failure Is Not A Error\u306e\u7565\u8a9e\u3067\u3042\u308b\n\uff08\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\uff09\u5b9f\u4f53\u5316\u306e\u5931\u6557\u306f\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b\n\u3068\u8a00\u3063\u3066\u3082\u308f\u304b\u3089\u306a\u3044\u3060\u308d\u3046\u304b\u3089\u3001\u4f8b\u3092\u51fa\u3057\u3066\u8aac\u660e\u3059\u308b\n\n```cpp\ntemplate < typename T >\ntypename T::value_type func(T);\n```\n\n\u4e0a\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u306b`typename T::value_type`\u3068\u3044\u3046\u578b\u304c\u7528\u3044\u3089\u308c\u3066\u3044\u308b\n\u5f15\u6570\u306f`T`\u3067\u3042\u308b\u304b\u3089\u3001\u3042\u3089\u3086\u308b\u578b\u3092\u63a8\u8ad6\u3067\u304d\u308b\u304c`value_type`\u3068\u3044\u3046\u30e1\u30f3\u30d0\u578b\u540d\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u306f\u3069\u3046\u306a\u308b\u306e\u3060\u308d\u3046\uff1f\n\u3053\u3053\u3067 **SFINAE** \u304c\u767a\u52d5\u3059\u308b\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9f\u4f53\u5316\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u5373\u5ea7\u306b\u30a8\u30e9\u30fc\u306b\u305b\u305a\u3001\u4ed6\u306e\u95a2\u6570\u304c\u4e00\u81f4\u3057\u306a\u3044\u304b\u3092\u63a2\u3059\u306e\u3067\u3042\u308b\n\n\u3053\u306eSFIANE\u306fdecltype\u306e\u6587\u8108\u3067\u3082\u9069\u7528\u3055\u308c\u308b\n\n```cpp\ntemplate < typename L, typename R >\nauto plus(L&& l, R&& r) -> decltype(l+r)\n{\n  return l + r;\n}\n```\n\n\u623b\u308a\u5024\u306e\u5f8c\u7f6e\u5ba3\u8a00\u3092\u7528\u3044\u3066\u3001`decltype(\u4efb\u610f\u306e\u5f0f)`\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u5f0f\u304c\u6709\u52b9\u306a\u5834\u5408\u306b\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3057\u3001\u7121\u52b9\u306e\u5834\u5408\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3059\u308b\u3068\u3044\u3046\u95a2\u6570\u306b\u306a\u308b\n\n\u305f\u3060\u3057\u91cd\u8981\u306a\u3053\u3068\u306f\u3001\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3059\u308b\u95a2\u6570\u304c\u540c\u6642\u306b\u8907\u6570\u3042\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u89e3\u6c7a\u306b\u5931\u6557\u3059\u308b\u305f\u3081\u3001\u9069\u5207\u306b\u5b9f\u4f53\u5316\u3092\u5931\u6557\u3055\u305b\u308b\u30c6\u30af\u30cb\u30c3\u30af\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u3069\u3046\u8003\u3048\u3066\u3082\u7384\u4eba\u3057\u304b\u4f7f\u3048\u306a\u3044\u3068\u3044\u3046\u70b9\u3067\u3042\u308b\u3002\n\nC++11\u4ee5\u964d\u306e\u30e1\u30bf\u95a2\u6570\u3067\u306f\u3053\u308c\u3089\u3092\u99c6\u4f7f\u3059\u308b\u3002\n\n##\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n\u30af\u30e9\u30b9\u306e\u5b8c\u5168\u306a\u7279\u6b8a\u5316\u3092\u7528\u3044\u308b\n\n```cpp\ntemplate < typename T >\nstruct is_int {\n    static constexpr bool value = false ;\n}\ntemplate < >\nstruct is_int<int> {\n    static constexpr bool value = true ;\n}\n```\n\n##\u8907\u5408\u578b\u306e\u5224\u5b9a\uff08\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5224\u5b9a\u306a\u3069\uff09\n\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5224\u5b9a\u3092\u3057\u305f\u3044\u3068\u304d\u306f\u30af\u30e9\u30b9\u306e\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u5229\u7528\u3059\u308b\n\n```cpp\ntemplate < typename T >\nstruct is_pointer {\n    static constexpr bool value = false ;\n}\ntemplate < typename T >\nstruct is_int<T*> {\n    static constexpr bool value = true ;\n}\n```\n\n\u3053\u308c\u3060\u3051\u306a\u3089`std::is_pointer<T>`\u3092\u4f7f\u3048\u3070\u3044\u3044\n\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u4f7f\u3046\u5834\u5408\u306f\u5224\u5b9a\u3057\u305f\u3044\u30af\u30e9\u30b9\u304c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u304d\u3060\n\n`std::vector<T>`\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u66f8\u304d\u305f\u3044\u3068\u3059\u308b\n\u3053\u306e\u3068\u304d**T**\u306f\u306a\u3093\u3067\u3082\u304b\u307e\u308f\u306a\u3044\u306e\u3067\u90e8\u5206\u7684\u7279\u6b8a\u5316\u304c\u4f7f\u3048\u308b\n\n```cpp\ntemplate < typename T >\nstruct is_vector : std::false_type{};\n\ntemplate < typename T >\nstruct is_vector<std::vector<T>> : std::true_type {};\n\ntemplate < typename T >\nconstexpr bool is_vector_v = is_vector<T>::value;\n```\n\n\u307e\u305f\u3001`std::tuple`\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u5834\u5408\u306ftuple\u304c\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u306e\u3067\u3001\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u90e8\u5206\u7684\u7279\u6b8a\u5316\u3092\u7528\u3044\u308b\n\n```cpp\ntemplate < typename T >\nstruct is_tuple : std::false_type{};\n\ntemplate < typename ...Types >\nstruct is_tuple<std::tuple<Types...>> : std::true_type {};\n\ntemplate < typename T >\nconstexpr bool is_tuple_v = is_tuple<T>::value;\n```\n\n\n##\u30e1\u30f3\u30d0\u578b\u540d\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u5224\u5b9a\u3059\u308b\n\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\uff08SFINAE\uff09\u3092\u5229\u7528\u3059\u308b\n\u30af\u30e9\u30b9\u304c`iterator`\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\n\n\n```cpp\ntemplate <class T>\nclass has_iterator {\n  template <class U>\n  static constexpr bool check(typename U::iterator*)\n  { return true; }\n\n  template <class U>\n  static constexpr bool check(...)\n  { return false; }\npublic:\n  static constexpr bool value = check<T>(nullptr);\n};\n```\n\u4e0a\u306e\u95a2\u6570\u3067\u306fSFINAE\u306e\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u3063\u3066\u3044\u308b\n`U`\u304c`iterator`\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\n\u5b9f\u4f53\u5316\u306b\u5931\u6557\u3057\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u5019\u88dc\u304b\u3089\u5916\u3055\u308c\u3066\n\u4e0b\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u306a\u308b\n\n\n\n\u95a2\u6570\u306b\u5b9a\u7fa9\u306f\u3082\u306f\u3084\u5fc5\u8981\u3067\u306f\u306a\u3044\n\u308f\u308c\u308f\u308c\u306b\u306f`decltype`\u304c\u3042\u308b\n\u305d\u3057\u3066\u3001\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u306e\n`std::true_type`\u3068`std::false_type`\u304c\u3042\u308b\n\n```cpp\ntemplate <class T>\nclass has_iterator {\n  template <class U>\n  static constexpr std::true_type check(typename U::iterator*);\n\n  template <class U>\n  static constexpr std::false_type check(...);\n\npublic:\n  static constexpr bool value = decltype(check<T>(nullptr))::value;\n};\n```\n\n\u3061\u306a\u307f\u306b\u3053\u306eSFINAE\u306e\u30c8\u30ea\u30c3\u30af\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u512a\u5148\u3055\u308c\u308c\u3070\u5f15\u6570\u306f\u306a\u3093\u3067\u3082\u826f\u3044\u306e\u3067\n\u4f8b\u3048\u3070`int`\u3068`long`\u3067\u3082\u3088\u3044\n\n```cpp\ntemplate <class T>\nclass has_iterator {\n  template <class U, typename O = typename U::iterator>\n  static constexpr std::true_type check(int);\n\n  template <class U>\n  static constexpr std::false_type check(long);\n\npublic:\n  static constexpr bool value = decltype(check<T>(0))::value;\n};\n```\n---\n\n\n###\u3061\u3087\u3063\u3068\u4e00\u637b\u308a\u3057\u3066\u7d99\u627f\u3092\u4f7f\u3046\n\n```cpp\n\nstruct has_iterator_impl {\n  template <class T>\n  static std::true_type check(typename T::iterator*);\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_iterator :\n  public decltype(has_iterator_impl::check<T>(nullptr)) {};\n\n```\n\n\n##\u578b\u540d\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\n\u578b\u540d\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3068\u306f\n\u5909\u6570\u3068\u95a2\u6570\u3067\u3042\u308b\n\n###\u30e1\u30f3\u30d0\u5909\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\n\n```cpp\nstruct has_value_impl {\n  template <class T>\n  static std::true_type check(decltype(T::value)*);\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_value :\n  public decltype(has_value_impl::check<T>(nullptr)) {};\n\n```\n---\n\n###\u30e1\u30f3\u30d0\u95a2\u6570`f()`\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\n\n```cpp\nstruct has_f_impl {\n  template <class T>\n  static auto check(T&& x)->decltype(x.f(),std::true_type{});\n\n  template <class T>\n  static auto check(...)->std::false_type;\n};\n\ntemplate <class T>\nclass has_f :\n  public decltype(has_f_impl::check<T>(std::declval<T>())) {};\n\n```\n\u3053\u308c\u306f`decltype`\u3068\u30ab\u30f3\u30de\u6f14\u7b97\u5b50`operator,`\u3092\u5229\u7528\u3057\u305fSFINAE\u30c8\u30ea\u30c3\u30af\u3067\u3042\u308b\n__`decltype`\u304c\u5f15\u6570\u30922\u3064\u3068\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff01__\n\n`decltype`\u306e\u4e2d\u306e\u5f0f\u306f\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u306b\u3088\u3063\u3066\u5de6\u304b\u3089\u53f3\u306b\u9806\u6b21\u8a55\u4fa1\u3055\u308c\n\u8fd4\u308b\u5024\u306f\u4e00\u756a\u53f3\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\n\u3064\u307e\u308a\n`x.f()`\u306e\u547c\u3073\u51fa\u3057\u306b\u5931\u6557\u3059\u308c\u3070\nSFINAE\u306b\u3088\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u306e\u5019\u88dc\u304b\u3089\u5916\u3055\u308c\n\u6210\u529f\u3059\u308c\u3070\n`std::true_type{}`\u3092\u8a55\u4fa1\u3057`decltype`\u306e\u8868\u3059\u578b\u306f`std::true_type`\u306b\u306a\u308a\u307e\u3059\n\n\n---\n###\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\n\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u7d50\u5408\u898f\u5247\u306f\u3001\u5de6\u304b\u3089\u53f3\u65b9\u5411\u3067\u3059\u3002\u30b3\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u305f 2 \u3064\u306e\u5f0f\u306f\u5de6\u304b\u3089\u53f3\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002\u5de6\u30aa\u30da\u30e9\u30f3\u30c9\u306f\u5e38\u306b\u8a55\u4fa1\u3055\u308c\u3001\u53f3\u30aa\u30da\u30e9\u30f3\u30c9\u304c\u8a55\u4fa1\u3055\u308c\u308b\u524d\u306b\u3059\u3079\u3066\u306e\u526f\u4f5c\u7528\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n\u30b3\u30f3\u30de\u306f\u3001\u95a2\u6570\u306e\u5f15\u6570\u30ea\u30b9\u30c8\u306a\u3069\u306e\u4e00\u90e8\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u3001\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u306e\u30b3\u30f3\u30de\u306e\u4f7f\u7528\u3068\u6f14\u7b97\u5b50\u3068\u3057\u3066\u306e\u4f7f\u7528\u3092\u6df7\u540c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u306e 2 \u3064\u306e\u7528\u9014\u306f\u3001\u307e\u3063\u305f\u304f\u5225\u306e\u3082\u306e\u3067\u3059\u3002\n\n\u6b21\u306e\u5f0f\u3092\u8003\u3048\u307e\u3059\u3002\n\n`e1 , e2`\n\n\u3053\u306e\u5f0f\u306e\u578b\u3068\u5024\u306f\u3001e2 \u306e\u578b\u3068\u5024\u3067\u3059\u3002e1 \u3092\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u306f\u7834\u68c4\u3055\u308c\u307e\u3059\u3002\u7d50\u679c\u306f\u3001\u53f3\u30aa\u30da\u30e9\u30f3\u30c9\u304c\u5de6\u8fba\u5024\u306e\u5834\u5408\u306f\u5de6\u8fba\u5024\u3067\u3059\u3002\n\n\u901a\u5e38\u3001\u30b3\u30f3\u30de\u304c\u533a\u5207\u308a\u8a18\u53f7\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u5834\u6240 (\u305f\u3068\u3048\u3070\u3001\u95a2\u6570\u306e\u5b9f\u5f15\u6570\u3084\u96c6\u7d04\u306e\u521d\u671f\u5316\u5b50) \u3067\u306f\u3001\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u305d\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u304b\u3063\u3053\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\n\n```cpp\nfunc_1( x, y + 2, z );\nfunc_2( (x--, y + 2), z );\n```\n\n\u4e0a\u306e func_1 \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3067\u306f\u3001x\u3001y + 2\u3001z \u3068\u3044\u3046 3 \u3064\u306e\u5f15\u6570\u304c\u30b3\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u3066\u6e21\u3055\u308c\u307e\u3059\u3002 func_2 \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3067\u306f\u3001\u304b\u3063\u3053\u306b\u3088\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u9806\u6b21\u8a55\u4fa1\u6f14\u7b97\u5b50\u3068\u3057\u3066\u6700\u521d\u306e\u30b3\u30f3\u30de\u3092\u89e3\u91c8\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306f\u3001func_2 \u306b 2 \u3064\u306e\u5f15\u6570\u3092\u6e21\u3057\u307e\u3059\u3002\u6700\u521d\u306e\u5f15\u6570\u306f\u3001\u9806\u6b21\u8a55\u4fa1\u6f14\u7b97 (x--, y + 2) \u306e\u7d50\u679c\u3067\u3059\u3002\u3053\u306e\u6f14\u7b97\u306f\u3001\u5f0f y + 2 \u306e\u5024\u3068\u578b\u3092\u6301\u3061\u3001\u7b2c 2 \u306e\u5f15\u6570\u306f z \u3067\u3059\u3002\n\n---\n\n###\u95a2\u6570`value()`\u3068\u5909\u6570`value`\u306e\u3069\u3061\u3089\u304b\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\n\n\u30af\u30e9\u30b9\u304c\u6301\u3064\u30e1\u30f3\u30d0\u306f\u578b\u3001\u95a2\u6570\u3001\u5909\u6570\u3067\u3042\u308b\n\u3053\u306e\u5185\u3067\u578b\u306b\u306f\u306a\u304f\u3001\u95a2\u6570\u3068\u5909\u6570\u306b\u5171\u901a\u3057\u3066\u3082\u3064\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\n\u3059\u306a\u308f\u3061\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3064\u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\n\n```cpp\nstruct has_value_impl {\n  template <class T>\n  static std::true_type check(decltype(&T::value));\n\n  template <class T>\n  static std::false_type check(...);\n};\n\ntemplate <class T>\nclass has_value :\n  public decltype(has_value_impl::check<T>(nullptr)) {};\n\n```\n\n\n\n##\u578b\u306e\u7279\u6027\n`T`\u304c\u4ee3\u5165\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u78ba\u304b\u3081\u305f\u3044\u5834\u5408\n\n\n```cpp\nstruct is_assignable_impl {\n  template <class T>\n  static auto check(T&& x, T const& y) -> decltype(x=y,std::true_type{});\n\n  static auto check(...) -> std::false_type;\n};\n\ntemplate <class T>\nstruct is_assignable\n  : decltype(is_assignable_impl::check(std::declval<T>(),std::declval<T>())) {};\n```\n\n###declval\n\u3053\u3053\u3067`std::declval<T>()`\u306a\u308b\u3082\u306e\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\n\u5f0f\u304c\u6709\u52b9\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u306f`decltype`\u306a\u4e2d\u306b\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\nSFINAE\u30c8\u30ea\u30c3\u30af\u3092\u7528\u3044\u308c\u3070\u826f\u3044\u306e\u3067\u3057\u305f\n\u305f\u3060\u3001\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u306b\u306f\u5909\u6570\u304c\u5fc5\u8981\u3067\u3059\n\u578b\u306e\u7279\u6027\u3092\u8abf\u3079\u308b\u306e\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306a\u306e\u3067\u5909\u6570\u3092\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\n\u3057\u304b\u3057\u3001`decltype`\u306e\u306a\u304b\u3067\u306f\u672c\u5f53\u306e\u5909\u6570\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3059\n\n```cpp\ntemplate < typename T >\nstd::add_rvalue_reference<T> value() ;\n```\n\n\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u4f5c\u308c\u3070\u8fd4\u308a\u5024\u3092`decltype`\u306e\u4e2d\u3067\u5909\u6570\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u3053\u308c\u3053\u305d`declval`\u306e\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\n`declval`\u306f`decltype`\u306e\u4e2d\u3067\u306e\u307f\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5909\u6570\u3092\u4f5c\u308b\u95a2\u6570\u3067\u3059\n\n##C++1z\u6642\u4ee3\u306e\u30e1\u30bf\u95a2\u6570 [ \u8ffd\u8a18\uff082016-9-17\uff09]\n\nC++\u3082\u9806\u8abf\u306b\u9032\u5316\u3057\u3066\u3001\u30e1\u30bf\u95a2\u6570\u306e\u66f8\u304d\u65b9\u3082\u5909\u9077\u3057\u3066\u3044\u308b\u3002\nC++1z\u306b\u63a1\u629e\u3055\u308c\u305f`void_t`\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3059\u308b\u3002\n\n###\u59cb\u307e\u308a\u306f\u3053\u3053\u304b\u3089\uff08\u9069\u5f53\n\n```cpp\ntemplate<typename T, typename = void>\nstruct is_equality_comparable : std::false_type\n{};\n\ntemplate<typename T>\nstruct is_equality_comparable<T,\n    typename std::enable_if<\n        true, \n        decltype(std::declval<T&>() == std::declval<T&>(), (void)0)\n        >::type\n    > : std::true_type\n{};\n```\n\n\u578b`T`\u304c`operator==`\u3067\u6bd4\u8f03\u3067\u304d\u308b\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bf\u95a2\u6570\u3067\u3042\u308b\u3002\n\u7279\u6b8a\u5316\u3055\u308c\u305f\u4e0b\u306e\u30af\u30e9\u30b9\u306f`std::enable_if`\u306e\u6761\u4ef6\u3092\u5e38\u306b\u771f\u306b\u3057\u3066`decltype`\u306e\u4e2d\u3067\u6761\u4ef6\u3092\u8a18\u8ff0\u3059\u308b\u3002\u305d\u3046\u3044\u3066\u304a\u3044\u3066\u3001\u6761\u4ef6\u304c\u6059\u7121\u304f\u8a55\u4fa1\u3067\u304d\u308c\u3070\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\u3067`void`\u306b\u63a8\u8ad6\u3055\u305b\u3066\u3044\u308b\u3002\n\n\u660e\u3089\u304b\u306b`std::enable_if`\u306e\u4f7f\u3044\u65b9\u3092\u9593\u9055\u3063\u3066\u3044\u308b\u3002\n\u5b9f\u4f53\u5316\u306b\u6210\u529f\u3057\u305f\u3089\u5e38\u306b`void`\u306b\u306a\u308b\u578b\u304c\u30a2\u30ec\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\n\n\u305d\u3046\u3001\u305d\u3053\u3067`void_t`\u306e\u7206\u8a95\u3067\u3042\u308b\u3002\n\n```cpp\ntemplate < typename ... >\nusing void_t = void;\n```\n`void_t`\u306b\u3069\u306e\u3088\u3046\u306a\u4eee\u5f15\u6570\u3092\u6e21\u3057\u3066\u3082`void`\u306b\u5b9f\u4f53\u5316\u3059\u308b\u3002\n\u3053\u308c\u3092\u7528\u3044\u3066\u3001\u5148\u306e`is_equality_comparable`\u3092\u66f8\u304d\u76f4\u305d\u3046\u3002\n\n```cpp\ntemplate< class, class=void >\nstruct is_equality_comparable : std::false_type\n{};\n\ntemplate< class T >\nstruct is_equality_comparable<T,\n  void_t<decltype(std::declval<T&>() == std::declval<T&>() )>\n  > : std::true_type\n{};\n\n```\n\n\u57fa\u5e95\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u306f\n\n```cpp\ntemplate <class,class=void>\n```\n\n\u3068\u3057\u3001`std::false_type`\u3092\u7d99\u627f\u3059\u308b\u3002\n\n\u6b21\u306b\u7279\u6b8a\u5316\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u3092\n\n```cpp\ntemplate <class T>\n```\n\n\u3068\u3059\u308b\u3002\n\u3053\u3053\u3067`void_t`\u306e\u51fa\u756a\u3067\u3042\u308b\u3002\n\n\u7279\u6b8a\u5316\u306e\u5f15\u6570\u306e1\u3064\u3081\u306f`T`\u306b\u3057\u3066\u304a\u304d\u30012\u3064\u3081\u3092`void_t`\u306b\u3059\u308b\u3002\n`void_t`\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b`decltype`\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u4e2d\u306b\u78ba\u304b\u3081\u305f\u3044\u3053\u3068\u3092\u66f8\u304f\u3002\n\n\n\n```cpp\nstruct is_equality_comparable<T,\n  void_t<decltype(std::declval<T&>() == std::declval<T&>() )>\n```\n\n\u4eca\u56de\u306f`operator==`\u3067\u6bd4\u8f03\u3067\u304d\u308b\u304b\u3092\u66f8\u3044\u305f\u304c\u3001\u3053\u306e\u624b\u6cd5\u3067\u7279\u5b9a\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3084\u3001\u7279\u5b9a\u306e\u64cd\u4f5c\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n**Detection Idiom**\u3068\u547c\u3070\u308c\u308b\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3002\n\n\u3082\u3063\u3068\u8a73\u3057\u304f\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u306a\u3089\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u826f\u3044\u3060\u308d\u3046\u3002\n[Faith and Brave](http://faithandbrave.hateblo.jp/entry/2016/09/05/170810)\n[yohhoy\u306e\u65e5\u8a18](http://d.hatena.ne.jp/yohhoy/20151103/p1)\n[N3911 TransformationTrait Alias void_t](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3911.pdf)\n\n\u4ee5\u4e0b\u306fC++1z\u306b\u306f\u63a1\u629e\u3055\u308c\u306a\u304b\u3063\u305f`void_t`\u3092\u7528\u3044\u305f\u30c4\u30fc\u30eb\u30ad\u30c3\u30c8\u306e\u63d0\u6848\u3067\u3042\u308b\u3002\n\u306a\u304b\u306a\u304b\u4fbf\u5229\u306a\u306e\u3060\u304c\u3001\u3084\u308a\u904e\u304e\u611f\u304c\u6f02\u3063\u3066\u3044\u308b\u3002\n[N4502 Proposing Standard Library Support for the C++ Detection Idiom, v2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4502.pdf)\n\n\n##\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u6761\u4ef6\u6f14\u7b97\n\n###bool_constant\n\n\u30fb\u6761\u4ef6A\u304b\u6761\u4ef6B\u3092\u6e80\u305f\u3059\u5834\u5408\u306b\u771f\u3068\u306a\u308b\u30e1\u30bf\u95a2\u6570\n`std::integral_constant<bool,value>`\u3092\u7d99\u627f\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002`std::integral_constant<bool,value>`\u306e\u30a8\u30a4\u30ea\u30a2\u30b9`std::bool_constant<value>`\u304c\u3064\u304b\u3048\u307e\u3059\uff08since C++17\uff09\u3002\n\u4f8b\u3048\u3070\u3001**Range**\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u96d1\u306b\u5224\u5b9a\u3059\u308b\u3068\u3057\u3066\u3001`T`\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8`a`\u306b\u5bfe\u3057\u3066\n\n**\u6761\u4ef6A**\n\n```cpp\nstd::begin(a), std::end(a)\n```\n\n\u304c\u53ef\u80fd\n\u3082\u3057\u304f\u306f\n\n**\u6761\u4ef6B**\n\n```cpp\nbegin(a), end(a)\n```\n\n\u304c\u53ef\u80fd\u3067\u3042\u308c\u3070\u826f\u3044\u3002\n\u305d\u3053\u3067\u3001\u3053\u306e\u7247\u65b9\u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u66f8\u304f\u3002\n\n\u6700\u5f8c\u306b\n\n```cpp\ntemplate < typename T >\nstruct is_range : std::bool_constant<\n  A<T>::value || B<T>::value\n>{};\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3002\n\u4ee5\u4e0b\u3001\u5b9f\u88c5\u4f8b\u3002\n\n\n```cpp\n#include <type_traits>\n#include <utility>\n\nnamespace cranberries_magic{\n\n  template < class, class=void >\n  struct enable_std_begin_end : std::false_type {};\n  \n  template < typename T >\n  struct enable_std_begin_end<T,\n      std::void_t<decltype( std::begin(std::declval<const T&>()),std::end(std::declval<const T&>()) )>>\n  : std::true_type {};\n\n  template < class, class=void >\n  struct enable_adl_begin_end : std::false_type {};\n  \n  template < typename T >\n  struct enable_adl_begin_end<T,\n      std::void_t<decltype( begin(std::declval<const T&>()),end(std::declval<const T&>()) )>>\n  : std::true_type {};\n\n\n} // ! namespace cranberries_magic\n\n  template < typename T >\n  struct is_range\n    : std::bool_constant<\n       cranberries_magic::enable_std_begin_end<T>::value\n    || cranberries_magic::enable_adl_begin_end<T>::value>\n  {};\n\n  template < typename T >\n  constexpr bool is_range_v = is_range<T>::value;\n```\n\n###enable_if_t\u3092\u4f7f\u3063\u305f\u5834\u5408\n\n`is_iterator`\u3092\u66f8\u3044\u3066\u307f\u305f\u4f8b\u3002\n`iterator_tag`\u3068\u3057\u3066`input_iterator_tag`\u3082\u3057\u304f\u306f\u3001`output_iterator_tag`\u3092\u7d99\u627f\u3057\u3066\u3044\u308c\u3070`iterator`\u3067\u3042\u308b\u306f\u305a\u3068\u3044\u3046\u3001\u96d1\u306a\u5224\u5b9a\u3067\u3042\u308b\u3002\n`bool_constant`\u3068\u306e\u9055\u3044\u306f\u30af\u30e9\u30b9\u304c\uff12\u3064\u306b\u5225\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3060\u3002\n\n\n```cpp\n  template < class, class=void >\n  struct is_iterator : std::false_type {};\n\n  template < typename T >\n  struct is_iterator<T,\n    std::enable_if_t<\n      std::is_base_of<std::input_iterator_tag, typename std::iterator_traits<T>::iterator_category>::value\n   || std::is_base_of<std::output_iterator_tag, typename std::iterator_traits<T>::iterator_category>::value\n    >\n  > : std::true_type\n  {};\n\n```\n\n###\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u306e\u8ad6\u7406\u6f14\u7b97 [ \u8ffd\u8a18\uff082017-2-23\uff09]\n\nC++17\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\uff08\u30e1\u30bf\u95a2\u6570\u306e\u771f\u507d\uff09\u3092\u6f14\u7b97\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bf\u95a2\u6570\u304c\u767b\u5834\uff01\nAND\u6f14\u7b97\u3059\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 **conjunction**\nOR\u6f14\u7b97\u3059\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 **disjunction**\nNOT\u6f14\u7b97\u3059\u308b **negation** \n\u306e3\u7a2e\u985e\u304c\u3042\u308b\n\n\u30ca\u30f3\u30c7\u3053\u3093\u306a\u306b\u3084\u3084\u3053\u3057\u3044\u540d\u524d\u306a\u306e\u304b\u3068\u601d\u308f\u308c\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\nC++\u3067\u306f`and`, `or`, `not`\u306f\u4e88\u7d04\u8a9e\u3067\u3042\u308a\u3001\u4f7f\u3048\u306a\u3044\u306e\u3060\n\u3082\u3068\u3082\u3068boost MPL\u306b\u3042\u308band_, or_, not_\u3068\u540c\u3058\u540d\u524d\u3067\u63d0\u6848\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u3053\u3046\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3060\n\nconjunction, disjunction \u306f\u6e21\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306e`value`\u3092AND\uff08OR\uff09\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u53ef\u5909\u9577\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\n\nnegation \u306f\u6e21\u3057\u305f\u30e1\u30bf\u95a2\u6570\u306e`value`\u3092\u5426\u5b9a\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n\n```cpp\n// \u5168\u3066\u306e\u6761\u4ef6\u304ctrue\u306a\u3089\u7d50\u679c\u304ctrue\u3068\u306a\u308b\nconstexpr bool result1 = std::conjunction_v<\n    std::true_type,\n    std::is_void<void>,\n    std::is_same<int,int>\n>;\n\n// \u6761\u4ef6\u3092\u5426\u5b9a\u3059\u308b\nconstexpr bool result2 = std::negation_v<std::true_type>; // false\n```\n\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u4e0a\u4f8b\u306e`is_range`\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\n\u76f4\u63a5`disjunction`\u3092\u7d99\u627f\u3057\u3066\u3001\u6761\u4ef6\u3092\u7f85\u5217\u3059\u308c\u3070\u826f\u3044\n\u304b\u306a\u308a\u697d\u306b\u306a\u3063\u3066\u304d\u305f\u611f\u3058\n\n```cpp\ntemplate < typename T >\nstruct is_range\n  : std::disjunction<\n     detail::enable_std_begin_end<T>,\n     detail::enable_adl_begin_end<T>>\n{};\n```\n\nis_iterator \u3082\u66f8\u304d\u63db\u3048\u3066\u307f\u3088\u3046\n\n```cpp\ntemplate < typename T >\nstruct is_iterator : std::disjunction<\n      std::is_base_of<std::input_iterator_tag, typename std::iterator_traits<T>::iterator_category>,\n      std::is_base_of<std::output_iterator_tag, typename std::iterator_traits<T>::iterator_category>>\n{};\n```\n\n\u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u304b\u3089\u65b0\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6761\u4ef6\u3092\u3064\u304f\u308b\u306a\u3089\u3053\u308c\u3060\u306a\u3063\u3066\u611f\u3058\u3067\u3059\u306d\n\n\n##\u8dcb\u6587\n\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30e1\u30bf\u95a2\u6570\u3067\u6709\u610f\u7fa9\u306aTMP\u30e9\u30a4\u30d5\u3092\u6e80\u55ab\u3057\u307e\u3057\u3087\u3046\uff01\n\u9593\u9055\u3044\u3084\u8cea\u554f\u3001\u3054\u610f\u898b\u7b49\u306f\n\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u304f\u304b\n[\u3044\u306a\u3080\u5148\u751f | Twitter](https://twitter.com/_EnumHack)\n\u307e\u3067\u3054\u4e00\u5831\u304f\u3060\u3055\u3044\n\u3067\u304d\u308b\u3060\u3051\u3059\u307f\u3084\u304b\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\n\n---\n__All text is available under the CC0 1.0 Universal license.__\n", "tags": ["C++", "C++11", "C++14", "SFINAE", "C++17"]}