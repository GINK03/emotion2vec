{"tags": ["java8", "Java"], "context": " More than 1 year has passed since last update.\n\n\u524d\u63d0\nJava SE 8 \u306b\u7126\u70b9\u3092\u3042\u3066\u305f\u6280\u8853\u66f8\u3068\u3057\u3066Java\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306a\u3089\u7fd2\u5f97\u3057\u3066\u304a\u304d\u305f\u3044 Java SE 8 \u5b9f\u8df5\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u3044\u3046\u672c\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u305d\u3053\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u7df4\u7fd2\u554f\u984c\u304c\u306a\u304b\u306a\u304b\u52c9\u5f37\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u8aad\u66f8\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u5c1a\u3001\u7df4\u7fd2\u554f\u984c\u306f\u3053\u3053\u306b\u306f\u5168\u6587\u306f\u5f15\u7528\u3057\u306a\u3044\u3002\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\u306a\u304b\u306a\u304b\u306e\u826f\u66f8\u306a\u306e\u3067\u8cfc\u5165\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u6b32\u3057\u3044\u3002\n\n\u7b2c 1 \u7ae0 \u30e9\u30e0\u30c0\u5f0f\u3068\u306f\n\n1. Lambda \u5f0f\u306e\u30b9\u30ec\u30c3\u30c9\n\n\u8003\u5bdf\n\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u540d\u306f Thread.currentThread().getName() \u3067\u53d6\u308c\u308b\u306e\u3067\u3001\u5bfe\u8c61\u7b87\u6240\u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304b\u3069\u3046\u304b\u306f\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u78ba\u8a8d\u3067\u304d\u308b:\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        printThreadName();\n        new Thread(Java::printThreadName).start();\n    }\n\n    private static void printThreadName() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n\nmain\nThread-0\n\n\u3053\u3053\u3067 Arrays.sort \u306b\u5bfe\u3059\u308b\u30b3\u30f3\u30d1\u30ec\u30fc\u30bf\u306e\u30b3\u30fc\u30c9\u3092\u7121\u540d\u30af\u30e9\u30b9\u3068\u30e9\u30e0\u30c0\u5f0f\u306e\u53cc\u65b9\u3067\u5b9f\u88c5\u3057\u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u3092\u78ba\u8a8d\u3059\u308b:\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        printThreadName();\n\n        final String[] src = {\"this\", \"is\", \"a\", \"pencil\"};\n        Arrays.sort(src, new Comparator<String>() {\n            @Override\n            public int compare(final String x, final String y) {\n                printThreadName();\n                return Integer.compare(x.length(), y.length());\n            }\n        });\n        Arrays.sort(src, (x, y) -> {\n            printThreadName();\n            return Integer.compare(x.length(), y.length());\n        });\n    }\n\n    private static void printThreadName() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n\nmain\nmain\nmain\nmain\nmain\nmain\nmain\nmain\nmain\n\n\n\u89e3\u7b54\nsort \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n2. \u3059\u3079\u3066\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u63a2\u7d22\njava.io.File \u30af\u30e9\u30b9\u306e listFiles(FileFilter) \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3068\u3042\u308b\u304c\u518d\u5e30\u7684\u306b\u306f\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u3002\u81ea\u5206\u3067\u518d\u5e30\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u30e9\u30e0\u30c0\u5f0f\u3068\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u306e\u53cc\u65b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5b9f\u88c5\u3002\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final File file = new File(\"aaa\");  // aaa \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u3092\u63a2\u7d22\u5bfe\u8c61\u3068\u3059\u308b\n        final List<File> files = getSubDirectories(file);\n        files.stream().forEach(f -> System.out.println(f.getPath()));\n    }\n\n    /**\n     * \u6307\u5b9a File \u7fa4\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059.\n     *\n     * @param src \u63a2\u7d22\u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     * @return \u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     */\n    private static List<File> getSubDirectories(final File... src) {\n        final List<File> dest = new ArrayList<>();\n        Arrays.stream(src).forEach(file -> {\n            final File[] directories = file.listFiles(File::isDirectory);  // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u7248\n            // final File[] directories = file.listFiles(f -> file.isDirectory());  \u30e9\u30e0\u30c0\u5f0f\u7248\n            dest.addAll(getSubDirectories(directories));\n            dest.addAll(Arrays.asList(directories));\n        });\n        return dest;\n    }\n}\n\n\n3. \u6307\u5b9a\u62e1\u5f35\u5b50\u306e\u30d5\u30a1\u30a4\u30eb\u63a2\u7d22\njava.io.File \u30af\u30e9\u30b9\u306e list(FilenameFilter) \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3068\u3042\u308b\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u304c\u6587\u5b57\u5217\u3060\u3057 FilenameFilter \u306e\u5f15\u6570\u3082\u6587\u5b57\u5217 (\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3068\u30d5\u30a1\u30a4\u30eb\u540d) \u306a\u306e\u3067\u53b3\u5bc6\u306b\u306f\u3053\u308c\u3060\u3051\u3060\u3068\u5b9f\u88c5\u3067\u304d\u306a\u3044\u3002\u4f55\u6545\u306a\u3089\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u306b\u3082\u30d4\u30ea\u30aa\u30c9\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u540d\u524d\u3060\u3051\u3060\u3068\u62e1\u5f35\u5b50\u306a\u306e\u304b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u306e\u4e00\u90e8\u306a\u306e\u304b\u304c\u5224\u5b9a\u3067\u304d\u306a\u3044\u304b\u3089\u3060\u30021\n\u3068\u3082\u304b\u304f\u4eca\u56de\u306f\u53b3\u5bc6\u306a\u89b3\u70b9\u306f\u7121\u8996\u3057\u3066\u5b9f\u88c5\u3002\nimport java.io.File;\nimport java.util.Arrays;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final File directory = new File(\"aaa\");\n        final String[] files = getFiles(directory, \"txt\");\n        Arrays.stream(files).forEach(System.out::println);\n    }\n\n    /**\n     * \u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306e\u6307\u5b9a\u3055\u308c\u305f\u62e1\u5f35\u5b50\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3059.\n     *\n     * @param directory \u6307\u5b9a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     * @param ext \u62e1\u5f35\u5b50\n     * @return \u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n     */\n    private static String[] getFiles(final File directory, final String ext) {\n        return directory.list((dir, name) -> name.endsWith(\".\" + ext));\n    }\n}\n\n\u3059\u3070\u3089\u3057\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3002\n\n\u89e3\u7b54\n\u30a8\u30f3\u30af\u30ed\u30fc\u30b8\u30f3\u30b0\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u30ad\u30e3\u30d7\u30c1\u30e3\u3055\u308c\u308b\u5909\u6570\u306f\u4e0a\u8a18\u30b3\u30fc\u30c9\u4f8b\u3060\u3068 ext \u3067\u3042\u308b\u3002\n\n4. \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u540d\u30bd\u30fc\u30c8\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6b21\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u6765\u308b\u3088\u3046\u306b\u3057\u3001\u4e14\u3064\u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u6607\u9806\u30bd\u30fc\u30c8\u3092\u884c\u3046\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u5b9f\u88c5\u3057\u305f\u304c\u3001\u5b58\u5728\u3057\u306a\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3084\u30d5\u30a1\u30a4\u30eb\u3092 new File() \u3057\u3066\u3082\u4f8b\u5916\u30b9\u30ed\u30fc\u3057\u305f\u308a\u3057\u306a\u3044\u306e\u3067\u3001\n\u305d\u306e\u5834\u5408 isDirectory() \u3084 isFile() \u304c\u6a5f\u80fd\u3057\u306a\u3044\u306e\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u3044\u3002\nfilter(File::exists) \u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u5b58\u5728\u3057\u306a\u3044\u3082\u306e\u306f\u524a\u304e\u843d\u3068\u3057\u3066\u3044\u308b\u3002\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final String[] paths = {\"aaa/bbb\", \"aaa/bbb/bbb.txt\", \"aaa/ddd\", \"aaa/aaa.txt\", \"aaa/bbb/ccc\", \"dummy\"};\n        final File[] files = Stream.of(paths).map(File::new).filter(File::exists).toArray(File[]::new);\n        Arrays.sort(files, (File x, File y) -> {\n            if ((x.isDirectory() && y.isDirectory()) || (x.isFile() && y.isFile())) {\n                return x.getPath().compareTo(y.getPath());\n            }\n            return x.isDirectory() ? -1 : 1;\n        });\n        Arrays.stream(files).forEach(file -> System.out.println(file.getPath()));\n    }\n}\n\naaa/bbb\naaa/bbb/ccc\naaa/ddd\naaa/aaa.txt\naaa/bbb/bbb.txt\n\n\n5. \u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u30e9\u30e0\u30c0\u5f0f\u4f7f\u3063\u3066\u307f\u3088\nAndroid \u30a2\u30d7\u30ea\u3067\u3055\u3093\u3056\u3093 RetroLambda \u3067\u6d3b\u7528\u3057\u3066\u3044\u308b\u304b\u3089\u4eca\u66f4\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\u3060\u308d\u3046\u3002\n\n\u89e3\u7b54\n3, 4 \u884c\u307b\u3069\u77ed\u304f\u306a\u3063\u305f\u3002\u8aad\u307f\u3084\u3059\u304f\u306a\u3063\u305f\u3002\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u305f\u3002\n\n6. \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        new Thread(uncheck(() -> {\n            System.out.println(\"Zzz\");\n            Thread.sleep(1000);\n        })).start();\n    }\n\n    /**\n     * \u4e0e\u3048\u3089\u308c\u305f\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u30b9\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u6642\u4f8b\u5916\u306b\u5909\u66f4\u3059\u308b.\n     *\n     * @param runnable \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u30b9\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\n     * @return \u5b9f\u884c\u6642\u4f8b\u5916\u306b\u5909\u66f4\u3055\u308c\u305f\u30b3\u30fc\u30c9\n     */\n    public static Runnable uncheck(RunnableEx runnable) {\n        return () -> {\n            try {\n                runnable.run();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        };\n    }\n\n    interface RunnableEx {\n        void run() throws Exception;\n    }\n}\n\n\n\u4f55\u6545 RunnableEx \u306e\u4ee3\u308f\u308a\u306b Callable \u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u304b\n\u623b\u308a\u5024\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3001\u3067\u5408\u3063\u3066\u308b? return null; \u3092\u5165\u308c\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u304f\u306a\u308b\u3002\n\u4f7f\u7528\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u601d\u3046\u304c\u3002\n\n7. \u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable \u751f\u6210\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        andThen(() -> System.out.println(\"first\"), () -> System.out.println(\"second\")).run();\n    }\n\n    /**\n     * 2 \u3064\u306e Runnable \u3092\u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable \u3092\u8fd4\u3059.\n     *\n     * @param first 1 \u756a\u76ee\u306e\u51e6\u7406\n     * @param second 2 \u756a\u76ee\u306e\u51e6\u7406\n     * @return \u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable\n     */\n    private static Runnable andThen(final Runnable first, final Runnable second) {\n        return () -> {\n            first.run();\n            second.run();\n        };\n    }\n}\n\n\n8. \u30e9\u30e0\u30c0\u5f0f\u304c\u62e1\u5f35 for \u6587\u306e\u5024\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u5834\u5408\n\u3053\u308c\u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001\u5b9f\u969b\u3084\u3063\u3066\u307f\u305f\u3002\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        List<Runnable> runners = new ArrayList<>();\n        for (String name : names) {\n            runners.add(() -> System.out.println(name));\n        }\n        runners.stream().forEach(Runnable::run);\n    }\n}\n\nPeter\nPaul\nMary\n\n\u9593\u9055\u3063\u3066\u3082\u3059\u3079\u3066 Mary \u306b\u306a\u3063\u305f\u308a\u306f\u3057\u306a\u3044\u3002\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3044\u308b\u306e\u306f name \u3067\u3042\u3063\u3066\u6dfb\u5b57\u3067\u306f\u306a\u3044\u3002String \u306f\u4e0d\u5909\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067\u5024\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\u308a\u306f\u3057\u306a\u3044\u3002\u3053\u308c\u3092\u5f93\u6765\u306e for \u306b\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u3002\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        List<Runnable> runners = new ArrayList<>();\n        for (int i = 0; i < names.length; i++) {\n            int j = i;  // \u4e8b\u5b9f\u4e0a\u306e final \u3067\u3042\u308c\u3070 final \u306f\u4ed8\u3051\u306a\u304f\u3066\u3082\u53c2\u7167\u53ef\u80fd\n            runners.add(() -> System.out.println(names[j]));  // i \u3060\u3068\u4e8b\u5b9f\u4e0a final \u3067\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\n        }\n        runners.stream().forEach(Runnable::run);\n    }\n}\n\nPeter\nPaul\nMary\n\n\u5927\u4e08\u592b\u3002j \u306f for \u30d6\u30ed\u30c3\u30af\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306a\u306e\u3067\u4f7f\u3044\u307e\u308f\u3055\u308c\u306a\u3044\u3002\u3053\u308c\u304c\u3082\u3057 i \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3089\u5168\u90e8 Mary \u306b\u306a\u3063\u305f\u3053\u3068\u3060\u308d\u3046\u3002\u5618\u3002\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u524d\u306b i++ \u304c\u8d70\u308b\u306e\u3067\u5b9f\u884c\u6642\u306b IndexOutOfBoundsException \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n9. \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9 forEachIf() \u5b9f\u88c5\n\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5:\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        class ArrayList2<T> extends ArrayList<T> implements Collection2<T> {\n            // do nothing\n        }\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        Collection2<String> list = new ArrayList2<>();\n        Collections.addAll(list, names);\n        list.forEachIf(System.out::println, s -> s.length() == 4);  // Paul Mary\n    }\n\n    interface Collection2<T> extends Collection<T> {\n        default void forEachIf(Consumer<T> action, Predicate<T> filter) {\n            stream().forEach(item -> {\n                if (filter.test(item)) {\n                    action.accept(item);\n                }\n            });\n        }\n    }\n}\n\nStream API \u3067 filter() \u3057\u305f\u5f8c\u306b forEach() \u82e5\u3057\u304f\u306f peek() \u3059\u308b\u3068 Stream \u306e\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u305d\u3046\u3044\u3063\u305f\u6642\u306b\u4f7f\u3048\u308b\u2026\u2026\u3067\u3044\u3044\u306e\u304b?\n\n10. Collections \u306e\u662f\u975e\njava.util.Collections \u306f Collection \u306b\u5bfe\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u5bc4\u305b\u96c6\u3081\u305f\u30af\u30e9\u30b9\u3067\u78ba\u304b\u306b\u3088\u304f\u4f7f\u3046\u304c\u8a2d\u8a08\u4e0a\u30a8\u30ec\u30ac\u30f3\u30c8\u3068\u306f\u8a00\u3044\u304c\u305f\u3044\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5fd7\u5411\u3067\u306a\u304f\u547d\u4ee4\u578b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\u307e\u3041\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u51fa\u6765\u305f\u306e\u3067\u672c\u5f53\u306f java.util.Collection<T> \u306b\u5165\u308c\u308b\u306e\u304c\u3044\u3044\u306e\u3060\u308d\u3046\u3002\u591a\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u306f\u305a\u3002\u524d\u65b9\u4e92\u63db\u6027\u3092\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3053\u306e\u3078\u3093\u304c Java \u306e\u8f9b\u3044\u3068\u3053\u308d\u3060\u306a\u3002\n\n11. \u540c\u4e00\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306e\u6319\u52d5\n\u4ee5\u4e0b\u8abf\u67fb\u3057\u305f\u3002\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u306f\u666e\u901a\u306b 1 \u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u3002\u3053\u308c\u306f Java7 \u4ee5\u524d\u3068\u540c\u69d8\u3002\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u304c default \u5b9f\u88c5\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n    static class My implements I, J {\n        @Override\n        public void f() {\n            J.super.f();  // \u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3092\u3059\u308b\n        }\n    }\n\n    interface I {\n        void f();\n    }\n\n    interface J {\n        default void f() {\n\n        };\n    }\n\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068 static \u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3088\u3044\u3002static \u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u304c\u512a\u5148\u3055\u308c\u308b\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u3068\u540c\u3058\u3002\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u304c default \u5b9f\u88c5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3068 static \u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3088\u3044\u3002\u53cc\u65b9\u5171\u5b58\u3067\u304d\u308b\u3002\n\nstatic \u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\u554f\u984c\u306a\u3044\u3002\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e static \u30e1\u30bd\u30c3\u30c9\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u547c\u3076\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u533a\u5225\u3055\u308c\u308b\u3002\n\n\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u540c\u4e00\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u3069\u3046\u304b\n\u62bd\u8c61\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3001static \u30e1\u30bd\u30c3\u30c9\u3044\u305a\u308c\u3082\u554f\u984c\u306a\u3044\u3002\n\n12. \u306a\u3093\u304b\u6982\u5ff5\u7684\u306a\u8a71\n\u3061\u3087\u3063\u3068\u3053\u306e\u3042\u305f\u308a\u304c\u81ea\u4fe1\u304c\u306a\u3044\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u304c\u826f\u304f\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u305f\u306e\u306f\u300c\u5171\u901a\u7684\u306b\u4f7f\u308f\u308c\u308b\u51e6\u7406\u300d\u3084\u300c\u5b9f\u884c\u524d\u3084\u5b9f\u884c\u5f8c\u306b\u307e\u3068\u3081\u3066\u884c\u3046\u51e6\u7406\u300d\u3068\u3044\u3063\u305f\u3082\u306e\u3092\u89aa\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u5168\u90e8\u305d\u308c\u3067\u3044\u304f\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u3063\u3066\u3001\u5b9f\u88c5\u5f8c\u306b\u300c\u3068\u3042\u308b\u30af\u30e9\u30b9\u3067\u306f\u4f8b\u5916\u7684\u306b\u3053\u3046\u3044\u3046\u306e\u306f\u3057\u305f\u304f\u306a\u3044\u300d\u3068\u304b\u300c\u3068\u3042\u308b\u30af\u30e9\u30b9\u3067\u306f\u3053\u3046\u3044\u3046\u51e6\u7406\u3092\u3057\u305f\u3044\u300d\u307f\u305f\u3044\u306a\u6b32\u6c42\u304c\u51fa\u3066\u304d\u305f\u6642\u306b\u305d\u308c\u3092\u89aa\u30af\u30e9\u30b9\u306e\u65b9\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u3066\u65e2\u306b\u5171\u901a\u51e6\u7406\u3058\u3083\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3063\u305f\u554f\u984c\u304c\u3088\u304f\u3042\u3063\u305f\u304b\u3089\u3060\u3068\u601d\u3046\u3002\u3064\u307e\u308a\u89aa\u306e\u306f\u305a\u304c\u3044\u3064\u306e\u9593\u306b\u304b\u5b50\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8a2d\u8a08\u306b\u306a\u308a\u304c\u3061\u3068\u3044\u3046\u3053\u3068\u3002\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u306b\u3082\u540c\u3058\u5371\u967a\u304c\u3042\u308b\u304c\u3001\u305d\u308c\u3092\u8a00\u3063\u305f\u3089\u4e0a\u8ff0\u306e\u62bd\u8c61\u30af\u30e9\u30b9\u3082\u305d\u3046\u306a\u308f\u3051\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u307f\u5b9f\u88c5\u3092\u7981\u6b62\u3059\u308b\u660e\u78ba\u306a\u7406\u7531\u304c\u8584\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\u305d\u3057\u3066\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u304c\u3067\u304d\u306a\u3044\u305b\u3044\u3067 Java \u306f\u540c\u3058\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u305b\u3056\u308b\u3092\u5f97\u306a\u3044\u3001\u82e5\u3057\u304f\u306f\u4f55\u3068\u304b\u79fb\u8b72\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u9811\u5f35\u3063\u3066\u66f8\u304f\u3088\u3046\u306a\u3053\u3068\u306b\u306a\u308a\u304c\u3061\u3060\u3063\u305f\u3002\n\u306a\u306e\u3067\u300c\u3069\u308c\u3060\u3051\u5b89\u5168\u306a\u306e\u304b\u300d\u3068\u805e\u304b\u308c\u308b\u3068\u6b63\u76f4\u300c\u5b9f\u88c5\u8005\u306e\u8a2d\u8a08\u306b\u4f9d\u308b\u306e\u3067\u4eca\u3082\u6614\u3082\u305d\u3093\u306a\u306b\u5909\u308f\u3089\u306a\u3044\u300d\u3068\u601d\u3046\u3002\nCollection \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u72ec\u81ea\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u305d\u306e\u30b3\u30fc\u30c9\u304c stream \u30e1\u30bd\u30c3\u30c9\u3092\u5171\u5b58\u3067\u304d\u306a\u3044\u30b7\u30b0\u30cd\u30c1\u30e3\u3067\u5b9f\u88c5\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u3044\u3002\u30d0\u30a4\u30ca\u30ea\u4e92\u63db\u6027\u306e\u8a71\u306f\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002JAR \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u53e4\u3044\u30b3\u30fc\u30c9\u306f\u57fa\u672c\u7684\u306b\u306f\u52d5\u4f5c\u3059\u308b\u304c\u4f8b\u5916\u306f\u3042\u308b\u3002\n\n\u7b2c 2 \u7ae0 \u30b9\u30c8\u30ea\u30fc\u30e0 API \u306e\u4f7f\u3044\u65b9\n\n1. parallelStream() \u306e\u3088\u3046\u306a\u4e26\u5217\u51e6\u7406\u3092 for \u6587\u3092\u7528\u3044\u3066\u884c\u3048\n\u66f8\u3044\u3066\u898b\u308b\u3068\u304b\u306a\u308a\u9762\u5012\u3060\u3057\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3059\u3054\u305d\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u3002\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final String contents;\n        try {\n            contents = new String(Files.readAllBytes(Paths.get(\"alice.txt\")), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        final List<String> words = Arrays.asList(contents.split(\"[\\\\P{L}]+\"));\n\n        // \u901a\u5e38\u306e for \u30eb\u30fc\u30d7\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n        /*\n        int count = 0;\n        for (String w : words) {\n            if (w.length() > 12) {\n                System.out.println(w);\n                count++;\n            }\n        }\n        System.out.println(count);\n        */\n\n        // \u30ea\u30b9\u30c8\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3054\u3068\u306b\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\n        final My my = new My();\n        for (String w : words) {\n            new Thread(() -> {\n                if (w.length() > 12) {\n                    my.count++;\n                }\n                final int done;\n                synchronized (My.class) {\n                    done = ++my.done;\n                }\n                if (done == words.size()) {\n                    System.out.println(my.count);\n                }\n            }).start();\n        }\n    }\n\n    static class My {\n        int count = 0;\n        int done = 0;\n    }\n}\n\n\n\u307f\u306a\u3055\u3093\u306f\u3001\u5358\u4e00\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u305f\u304f\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u306a\u305c\u3067\u3059\u304b\u3002\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3002\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u306e\u306f\u3044\u3044\u304c\u3001\u4e26\u5217\u51e6\u7406\u304c\u5168\u3066\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d50\u679c\u306e\u51fa\u529b\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u4e26\u5217\u51e6\u7406\u304c\u5168\u3066\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5224\u5b9a\u3059\u308b\u306e\u306f\u30a2\u30c8\u30df\u30c3\u30af\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n2. \u5fc5\u8981\u306a\u56de\u6570\u3060\u3051 filter \u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3053\u3068\u306e\u691c\u8a3c\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        Stream.of(\"aaa\", \"bbbb\", \"ccccc\", \"dddddd\", \"eeeeeee\", \"ffffffff\", \"ggggggggg\")\n                .filter(s -> {\n                    System.out.println(String.format(\"%s is filtered.\", s));\n                    return s.length() > 3;\n                }).limit(5)\n                .forEach(System.out::println);\n    }\n}\n\naaa is filtered.\nbbbb is filtered.\nbbbb\nccccc is filtered.\nccccc\ndddddd is filtered.\ndddddd\neeeeeee is filtered.\neeeeeee\nffffffff is filtered.\nffffffff\n\n\u65e2\u306b 5 \u4ef6\u898b\u3064\u304b\u3063\u305f\u306e\u3067 ggggggggg \u304c\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n3. parallelStream \u3067\u306e\u901f\u5ea6\u306e\u691c\u8a3c\n\u82f1\u8a9e\u306e\u7d20\u6750\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u7701\u7565\u3067\u3002Qiita \u4e0a\u3067\u3084\u3063\u3066\u304a\u3089\u308c\u308b\u65b9\u304c\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3002\n\n4. Stream.of() \u306b\u914d\u5217\u3092\u6e21\u3057\u305f\u5834\u5408\nStream.of() \u306e\u53d7\u3051\u4ed8\u3051\u308b\u5f15\u6570\u304c\u7dcf\u79f0\u578b\u5f15\u6570 T \u82e5\u3057\u304f\u306f\u7dcf\u79f0\u578b\u53ef\u5909\u5f15\u6570 T... \u306a\u306e\u3067 int[] \u578b\u306e\u5909\u6570\u3092\u305d\u306e\u307e\u307e\u6e21\u3059\u3068 T = int[] \u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u6211\u3005\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f T... = int[] \u306a\u306e\u3060\u304c\u3002\nScala \u3084 Python \u306a\u3069\u306e\u8a00\u8a9e\u3067\u3042\u308c\u3070\u5f15\u6570\u306b\u5c55\u958b\u3057\u305f\u72b6\u614b\u3067\u6e21\u3059\u69cb\u6587\u304c\u3042\u308b\u306e\u3060\u304c Java \u306b\u306f\u305d\u3093\u306a\u3082\u306e\u306f\u306a\u3044\u3002\n\u5e78\u3044 Arrays.stream() \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\n\n5. \u7dda\u5f62\u5408\u540c\u751f\u6210\u6a5f\u3092\u5b9f\u88c5\u305b\u3088\nMath.random \u3067\u306a\u304f\u7dda\u5f62\u5408\u540c\u751f\u6210\u6a5f\u3068\u3084\u3089\u3092\u76f4\u63a5\u5b9f\u88c5\u305b\u3088\u3068\u306e\u3053\u3068\u3002\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u5f0f\u304c\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u305d\u306e\u901a\u308a\u306b\u8a08\u7b97\u3059\u308b\u3002\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final long a = 25214903917L;\n        final int c = 11;\n        final long m = (long) Math.pow(2, 48);\n        final Stream<Long> stream = Stream.iterate(System.currentTimeMillis(), x -> ((a * x + c) % m)).skip(1);\n        stream.limit(10).forEach(System.out::println);\n    }\n}\n\n-1411176680831\n96560841484024\n187724558509987\n89180819509874\n-38511100393835\n217416516840316\n75995036052439\n-231277494299498\n175177363425257\n273390213248064\n\nseed \u306f System.currentTimeMillis \u3092\u4f7f\u7528\u3002skip(1) \u3067 seed \u3092\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u7701\u3044\u3066\u3044\u308b\u3002\n\n6. \u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066 1 \u884c\u3067\u5b9f\u88c5\u305b\u3088\nString.toCharArray() \u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3046\u3068\u4e00\u767a\u306a\u306e\u3060\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u6307\u793a\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b:\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        characterStream(\"Hello\").forEach(System.out::println);\n    }\n\n    /**\n     * \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3092 1 \u6587\u5b57\u305a\u3064 char \u306b\u3057\u305f Stream \u306b\u5909\u63db\u3059\u308b.\n     *\n     * @param str \u5bfe\u8c61\u6587\u5b57\u5217\n     * @return Stream\n     */\n    public static Stream<Character> characterStream(String str) {\n        return IntStream.range(0, str.length()).mapToObj(str::charAt);\n    }\n}\n\n\n7. Stream \u304c\u6709\u9650\u304b\u7121\u9650\u304b\u3092\u5224\u5b9a\u3059\u308b\u306e\u306f\u30a2\u30ea\u306a\u306e\u304b\nisFinite(Stream<T> stream) \u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u304c\u305d\u308c\u306f\u30a2\u30ea\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u554f\u984c\u3002\nfinite \u3068\u306f\u300c\u6709\u9650\u306e\u300d\u3068\u3044\u3046\u610f\u5473\u306a\u306e\u3067\u300c\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u6709\u9650\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u300d\u306e\u3060\u308d\u3046\u3002\n\u6b63\u76f4\u81ea\u4fe1\u304c\u306a\u3044\u3002\u4ee5\u4e0b\u8003\u5bdf\u3002\n\u307e\u305a Stream<T> \u306b\u306f\u6709\u9650\u304b\u7121\u9650\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u3044\u3002\n\u4f7f\u3048\u305d\u3046\u306a\u306e\u306f count() \u3042\u305f\u308a\u3060\u308d\u3046\u304c\u672b\u7aef\u51e6\u7406\u306a\u306e\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3066\u3057\u307e\u3046\u3002\n\u3057\u304b\u3082\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5b9f\u884c\u3059\u308b\u3068\u6c38\u9060\u306b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\n\u6f14\u7b97\u3057\u306a\u3044\u3068\u6c42\u3081\u3089\u308c\u306a\u3044\u95a2\u4fc2\u4e0a\u300c\u826f\u304f\u306a\u3044\u8003\u3048\u300d\u306e\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n8. \u30b9\u30c8\u30ea\u30fc\u30e0\u306e zip() \u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\n\u4e00\u65e6\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u884c\u3046\u3053\u3068\u306b\u3057\u305f\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u307e\u307e\u4f5c\u308c\u308b\u306e\u304b\u306f\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\u540c\u6642\u306b Stream.forEach() \u3067\u304d\u308b\u306e\u304b?\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final Stream<String> first = Stream.of(\"a\", \"b\", \"c\");\n        final Stream<String> second = Stream.of(\"A\", \"B\", \"C\", \"D\", \"E\");\n        zip(first, second).forEach(System.out::println);\n    }\n\n    /**\n     * 2 \u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u8981\u7d20\u3092\u4ea4\u4e92\u306b\u5165\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8fd4\u3059.\n     * \u3069\u3061\u3089\u304b\u304c\u7d42\u7aef\u306b\u9054\u3057\u305f\u3089\u305d\u3053\u3067\u7d42\u4e86\u3068\u3059\u308b.\n     * \u6709\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u4e14\u3064\u8981\u7d20\u6570\u306f Integer.MAX_VALUE - 1 \u307e\u3067\u306e\u7bc4\u56f2\u3068\u3059\u308b.\n     *\n     * @param first \u30b9\u30c8\u30ea\u30fc\u30e0\n     * @param second \u30b9\u30c8\u30ea\u30fc\u30e0\n     * @param <T> \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\n     * @return \u4ea4\u4e92\u306b\u5165\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\n     */\n    public static <T> Stream<T> zip(Stream<T> first, Stream<T> second) {\n        final List<T> firstList = first.collect(Collectors.toList());\n        final List<T> secondList = second.collect(Collectors.toList());\n        final int limit = Math.min(firstList.size(), secondList.size());\n        final Stream.Builder<T> builder = Stream.builder();\n        for (int i = 0; i < limit; i++) {\n            builder.add(firstList.get(i));\n            builder.add(secondList.get(i));\n        }\n        return builder.build();\n    }\n}\n\n\n9. 3 \u3064\u306e reduce\n3 \u3064\u306e\u5f62\u5f0f\u306e reduce() \u3092\u8a66\u305b\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u305d\u3046\u3057\u305f\u3002\u610f\u5473\u306f\u7121\u3044\u3002\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final ArrayList<String> list1 = new ArrayList<>();\n        Collections.addAll(list1, \"a\", \"b\", \"c\");\n        final ArrayList<String> list2 = new ArrayList<>();\n        Collections.addAll(list2, \"d\", \"e\", \"f\");\n        final ArrayList<String> list3 = new ArrayList<>();\n        Collections.addAll(list3, \"g\", \"h\", \"i\");\n\n        reduce1(Stream.of(list1, list2, list3)).forEach(System.out::println);\n        reduce2(Stream.of(list1, list2, list3)).forEach(System.out::println);\n        reduce3(Stream.of(list1, list2, list3)).forEach(System.out::println);\n    }\n\n    public static <T> ArrayList<T> reduce1(Stream<ArrayList<T>> stream) {\n        return stream.reduce(new ArrayList<>(), (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        });\n    }\n\n    public static <T> ArrayList<T> reduce2(Stream<ArrayList<T>> stream) {\n        return stream.reduce((ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        }).get();\n    }\n\n    public static <T> ArrayList<T> reduce3(Stream<ArrayList<T>> stream) {\n        final ArrayList<T> list = new ArrayList<>();\n        return stream.reduce(list, (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        }, (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        });\n    }\n}\n\n\n10. Stream \u306e\u5e73\u5747\u3092 reduce() \u3067\u8a08\u7b97\u305b\u3088\nDoubleStream \u306a\u3089\u30e1\u30bd\u30c3\u30c9\u4e00\u767a\u306a\u306e\u3067\u3053\u3093\u306a\u72ec\u81ea\u5b9f\u88c5\u306f\u8f9b\u3044\u304c\u3001\u9811\u5f35\u3063\u3066\u307f\u305f\u3002\n\u307e\u305a\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306e\u500b\u6570\u3092\u9806\u3005\u306b\u5897\u3084\u3057\u3066\u3044\u304d\u3001\u524d\u306e\u5024\u304b\u3089\u3069\u3046\u3044\u3046\u3075\u3046\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308c\u3070\u3088\u3044\u304b\u3092\u307f\u308b\u3002\na0, a1, ..., an \u306e\u6570\u5217\u304c\u3042\u308a, \u524d\u306e\u5e73\u5747\u5024\u3092 S \u3067\u4eca\u56de\u306e\u5024\u3092 x \u3068\u3059\u308b\u3068:\na0: (0 / 1) * S + (1 / 1) * a0\na0, a1: (a0 + a1) / 2 = (1 / 2) * S + (1 / 2) * a1\na0, a1, a2: (a0 + a1 + a2) / 3 = (2 / 3) * S + (1 / 3) * a2\na0, a1, a2, a3: (a0 + a1 + a2 + a3) / 4 = (3 / 4) * S + (1 / 4) * a3\n...\na0, ..., an: (a0 + ... + an) / n = ((n - 1) / n) * S + (1 / n) * an\n\n\u3068\u306a\u308b\u3053\u3068\u306b\u7740\u76ee\u3059\u308b\u3002\u3053\u306e\u4e00\u756a\u4e0b\u306e\u5f0f (\u4e00\u822c\u9805) \u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u304b\u3051\u3070\u3088\u3044\u3002\nimport java.util.stream.DoubleStream;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n\n        // \u6b63\u898f\u306e\u65b9\u6cd5\n        System.out.println(DoubleStream.of(1.2f, 2.8f, 3.3f).average().getAsDouble());\n\n        // reduce \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\n        My result = Stream.of(1.2f, 2.8f, 3.3f).reduce(new My(), (my, x) -> {\n            my.average = (my.index / (double) (my.index + 1)) * my.average + (1 / (double) (my.index + 1)) * x;\n            my.index++;\n            return my;\n        }, (my, my2) -> {\n            my.average = (my.index / (double) (my.index + 1)) * my.average + (1 / (double) (my.index + 1)) * my2.average;\n            my.index++;\n            return my;\n        });\n        System.out.println(result.average);\n    }\n\n    static class My {\n        int index = 0;\n        double average = 0;\n    }\n}\n\n\n\u5358\u7d14\u306b\u5408\u8a08\u3092\u8a08\u7b97\u3057\u3066 count() \u3067\u5272\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\u3067\u3059\u304b\u3002\n\nreduce() \u304c\u7d42\u7aef\u51e6\u7406\u306a\u306e\u3067 count() \u304c\u8a08\u7b97\u51fa\u6765\u306a\u3044\u3002\n\n11. \u5358\u4e00\u306e ArrayList \u4e91\u3005\n\u3061\u3087\u3063\u3068\u4f55\u8a00\u3063\u3066\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u7121\u56de\u7b54\u3067\u2026\u2026\u3002\n\n12. \u4e26\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u64cd\u4f5c\nAtomicInteger \u3092\u4f7f\u3048\u3068\u3044\u3046\u8a71\u3002\nimport java.util.Arrays;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final AtomicInteger[] shortWords = new AtomicInteger[12];\n        Arrays.setAll(shortWords, value -> new AtomicInteger(0));\n        Stream.of(\"aaa\", \"bb\", \"c\", \"dddd\", \"eeeee\", \"fffffff\").parallel().forEach(s -> {\n            if (s.length() < 12) {\n                shortWords[s.length()].getAndIncrement();\n            }\n        });\n        System.out.println(Arrays.toString(shortWords));\n    }\n}\n\n\n13. collect \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u305b\u3088\n\n\u306e\u7d9a\u304d\u3002\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        Map<Integer, Long> result = Stream.of(\"aaa\", \"bb\", \"c\", \"dddd\", \"eeeee\", \"fffffff\")\n                .parallel().filter(s -> s.length() < 12)\n                .collect(Collectors.groupingBy(String::length, Collectors.counting()));\n        for (final Map.Entry entry : result.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n\n\n\u7b2c 3 \u7ae0 \u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n1. \u6761\u4ef6\u3082\u8a55\u4fa1\u3057\u306a\u3044\u30ed\u30ae\u30f3\u30b0\n\u307e\u3041\u4ee5\u4e0b\u306e\u69d8\u306a\u3082\u306e\u304c\u60f3\u5b9a\u3055\u308c\u308b\u306e\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3063\u3066\u307f\u305f:\nimport java.util.function.BooleanSupplier;\nimport java.util.function.Supplier;\n\npublic final class Java {\n\n    private static boolean IS_PRODUCTION = true;\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        int i = 10;\n        logIf(Level.FINEST, () -> {\n            System.out.println(\"\u5224\u5b9a\u3055\u308c\u305f\");\n            return i == 10;\n        }, () -> {\n            System.out.println(\"\u30ed\u30b0\u5b9f\u884c\");\n            return \"\u30ed\u30b0\u306f\u304b\u308c\u305f\";\n        });\n    }\n\n    enum Level {\n        FINEST,\n\n        WARNING,\n\n        CRITICAL;\n    }\n\n    public static void logIf(Level level, BooleanSupplier condition, Supplier<String> log) {\n        if (IS_PRODUCTION && level == Level.FINEST) {\n            return;\n        }\n        if (!condition.getAsBoolean()) {\n            return;\n        }\n        final String logMessage = log.get();\n        System.out.println(logMessage);\n    }\n}\n\n\u300c\u5224\u5b9a\u3055\u308c\u305f\u300d\u300c\u30ed\u30b0\u5b9f\u884c\u300d\u300c\u30ed\u30b0\u306f\u304b\u308c\u305f\u300d\u3044\u305a\u308c\u3082\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\n2. \u30ed\u30c3\u30af\u3068\u30a2\u30f3\u30ed\u30c3\u30af\u3092\u30e9\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\n\u554f\u984c\u306e\u96e3\u6613\u5ea6\u306e\u843d\u5dee\u304c\u3059\u3054\u3044\u3002\u52ff\u8ad6\u3053\u308c\u306f\u7c21\u5358\u306a\u65b9\u3060\u3002\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        ReentrantLock lock = new ReentrantLock();\n        withLock(lock, () -> System.out.println(\"\u30ed\u30c3\u30af\u4e2d\u306e\u51e6\u7406\"));\n    }\n\n    /**\n     * \u672c\u51e6\u7406\u524d\u306b\u30ed\u30c3\u30af\u5b9f\u884c\u3057, \u672c\u51e6\u7406\u5b9f\u884c\u5f8c\u306e\u30ed\u30c3\u30af\u89e3\u9664\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9.\n     *\n     * @param lock \u30ed\u30c3\u30af\n     * @param runnable \u672c\u51e6\u7406\n     */\n    public static void withLock(ReentrantLock lock, Runnable runnable) {\n        lock.lock();\n        try {\n            runnable.run();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n\n3. \u306a\u305c\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u304b\nJava 1.4 \u6642\u70b9\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u304c\u306a\u304f\u3001\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306e\u9045\u5ef6\u5b9f\u884c\u304c\u306a\u304b\u3063\u305f\u305b\u3044\u3067\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u305d\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3002Java 8 \u306a\u3089\u3070\u30e9\u30e0\u30c0\u5f0f\u304c\u3042\u308b\u306e\u3067\u3067\u304d\u308b\u3002\n\n4. Filter \u3092\u542b\u3080\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c Java API \u306b\u3044\u304f\u3064\u3042\u308b\u304b\n\u6570\u3048\u308b\u306e\u304b? ... \u9762\u5012\u306a\u306e\u3067\u7701\u7565\u3067\u3002\n\n\n\n\njava.io.File \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u308c\u3070 isDirectory() \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304b\u3089\u5224\u5b9a\u53ef\u80fd\u00a0\u21a9\n\n\n\n# \u524d\u63d0\n\nJava SE 8 \u306b\u7126\u70b9\u3092\u3042\u3066\u305f\u6280\u8853\u66f8\u3068\u3057\u3066[Java\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306a\u3089\u7fd2\u5f97\u3057\u3066\u304a\u304d\u305f\u3044 Java SE 8 \u5b9f\u8df5\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://www.amazon.co.jp/Java-Java-SE-8-ebook/dp/B00VM0FMIW/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=&sr=)\u3068\u3044\u3046\u672c\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u305d\u3053\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u7df4\u7fd2\u554f\u984c\u304c\u306a\u304b\u306a\u304b\u52c9\u5f37\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u8aad\u66f8\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u5c1a\u3001\u7df4\u7fd2\u554f\u984c\u306f\u3053\u3053\u306b\u306f\u5168\u6587\u306f\u5f15\u7528\u3057\u306a\u3044\u3002\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\u306a\u304b\u306a\u304b\u306e\u826f\u66f8\u306a\u306e\u3067\u8cfc\u5165\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u6b32\u3057\u3044\u3002\n\n# \u7b2c 1 \u7ae0 \u30e9\u30e0\u30c0\u5f0f\u3068\u306f\n\n## 1. Lambda \u5f0f\u306e\u30b9\u30ec\u30c3\u30c9\n\n### \u8003\u5bdf\n\n\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u540d\u306f `Thread.currentThread().getName()` \u3067\u53d6\u308c\u308b\u306e\u3067\u3001\u5bfe\u8c61\u7b87\u6240\u304c\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304b\u3069\u3046\u304b\u306f\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u78ba\u8a8d\u3067\u304d\u308b:\n\n```java\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        printThreadName();\n        new Thread(Java::printThreadName).start();\n    }\n\n    private static void printThreadName() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n```\n\n```\nmain\nThread-0\n```\n\n\u3053\u3053\u3067 Arrays.sort \u306b\u5bfe\u3059\u308b\u30b3\u30f3\u30d1\u30ec\u30fc\u30bf\u306e\u30b3\u30fc\u30c9\u3092\u7121\u540d\u30af\u30e9\u30b9\u3068\u30e9\u30e0\u30c0\u5f0f\u306e\u53cc\u65b9\u3067\u5b9f\u88c5\u3057\u5b9f\u884c\u30b9\u30ec\u30c3\u30c9\u3092\u78ba\u8a8d\u3059\u308b:\n\n```java\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        printThreadName();\n\n        final String[] src = {\"this\", \"is\", \"a\", \"pencil\"};\n        Arrays.sort(src, new Comparator<String>() {\n            @Override\n            public int compare(final String x, final String y) {\n                printThreadName();\n                return Integer.compare(x.length(), y.length());\n            }\n        });\n        Arrays.sort(src, (x, y) -> {\n            printThreadName();\n            return Integer.compare(x.length(), y.length());\n        });\n    }\n\n    private static void printThreadName() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n```\n\n```\nmain\nmain\nmain\nmain\nmain\nmain\nmain\nmain\nmain\n```\n\n### \u89e3\u7b54\n\nsort \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n## 2. \u3059\u3079\u3066\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u63a2\u7d22\n\n`java.io.File` \u30af\u30e9\u30b9\u306e `listFiles(FileFilter)` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3068\u3042\u308b\u304c\u518d\u5e30\u7684\u306b\u306f\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u3002\u81ea\u5206\u3067\u518d\u5e30\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u30e9\u30e0\u30c0\u5f0f\u3068\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u306e\u53cc\u65b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u5b9f\u88c5\u3002\n\n```java\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final File file = new File(\"aaa\");  // aaa \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u3092\u63a2\u7d22\u5bfe\u8c61\u3068\u3059\u308b\n        final List<File> files = getSubDirectories(file);\n        files.stream().forEach(f -> System.out.println(f.getPath()));\n    }\n\n    /**\n     * \u6307\u5b9a File \u7fa4\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059.\n     *\n     * @param src \u63a2\u7d22\u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     * @return \u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     */\n    private static List<File> getSubDirectories(final File... src) {\n        final List<File> dest = new ArrayList<>();\n        Arrays.stream(src).forEach(file -> {\n            final File[] directories = file.listFiles(File::isDirectory);  // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u7248\n            // final File[] directories = file.listFiles(f -> file.isDirectory());  \u30e9\u30e0\u30c0\u5f0f\u7248\n            dest.addAll(getSubDirectories(directories));\n            dest.addAll(Arrays.asList(directories));\n        });\n        return dest;\n    }\n}\n```\n\n## 3. \u6307\u5b9a\u62e1\u5f35\u5b50\u306e\u30d5\u30a1\u30a4\u30eb\u63a2\u7d22\n\n`java.io.File` \u30af\u30e9\u30b9\u306e `list(FilenameFilter)` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u3068\u3042\u308b\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u304c\u6587\u5b57\u5217\u3060\u3057 `FilenameFilter` \u306e\u5f15\u6570\u3082\u6587\u5b57\u5217 (\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3068\u30d5\u30a1\u30a4\u30eb\u540d) \u306a\u306e\u3067\u53b3\u5bc6\u306b\u306f\u3053\u308c\u3060\u3051\u3060\u3068\u5b9f\u88c5\u3067\u304d\u306a\u3044\u3002\u4f55\u6545\u306a\u3089\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u306b\u3082\u30d4\u30ea\u30aa\u30c9\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u540d\u524d\u3060\u3051\u3060\u3068\u62e1\u5f35\u5b50\u306a\u306e\u304b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u306e\u4e00\u90e8\u306a\u306e\u304b\u304c\u5224\u5b9a\u3067\u304d\u306a\u3044\u304b\u3089\u3060\u3002[^1]\n\n\u3068\u3082\u304b\u304f\u4eca\u56de\u306f\u53b3\u5bc6\u306a\u89b3\u70b9\u306f\u7121\u8996\u3057\u3066\u5b9f\u88c5\u3002\n\n```java\nimport java.io.File;\nimport java.util.Arrays;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final File directory = new File(\"aaa\");\n        final String[] files = getFiles(directory, \"txt\");\n        Arrays.stream(files).forEach(System.out::println);\n    }\n\n    /**\n     * \u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u76f4\u4e0b\u306e\u6307\u5b9a\u3055\u308c\u305f\u62e1\u5f35\u5b50\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3059.\n     *\n     * @param directory \u6307\u5b9a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n     * @param ext \u62e1\u5f35\u5b50\n     * @return \u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u540d\n     */\n    private static String[] getFiles(final File directory, final String ext) {\n        return directory.list((dir, name) -> name.endsWith(\".\" + ext));\n    }\n}\n```\n\n\u3059\u3070\u3089\u3057\u304f\u30b7\u30f3\u30d7\u30eb\u3067\u3044\u3044\u3002\n\n### \u89e3\u7b54\n\n\u30a8\u30f3\u30af\u30ed\u30fc\u30b8\u30f3\u30b0\u30b9\u30b3\u30fc\u30d7\u304b\u3089\u30ad\u30e3\u30d7\u30c1\u30e3\u3055\u308c\u308b\u5909\u6570\u306f\u4e0a\u8a18\u30b3\u30fc\u30c9\u4f8b\u3060\u3068 `ext` \u3067\u3042\u308b\u3002\n\n[^1]: java.io.File \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u308c\u3070 `isDirectory()` \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304b\u3089\u5224\u5b9a\u53ef\u80fd\n\n## 4. \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u540d\u30bd\u30fc\u30c8\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6b21\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u6765\u308b\u3088\u3046\u306b\u3057\u3001\u4e14\u3064\u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u6607\u9806\u30bd\u30fc\u30c8\u3092\u884c\u3046\u3002\n\u4ee5\u4e0b\u30b3\u30fc\u30c9\u5b9f\u88c5\u3057\u305f\u304c\u3001\u5b58\u5728\u3057\u306a\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3084\u30d5\u30a1\u30a4\u30eb\u3092 `new File()` \u3057\u3066\u3082\u4f8b\u5916\u30b9\u30ed\u30fc\u3057\u305f\u308a\u3057\u306a\u3044\u306e\u3067\u3001\n\u305d\u306e\u5834\u5408 `isDirectory()` \u3084 `isFile()` \u304c\u6a5f\u80fd\u3057\u306a\u3044\u306e\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u3044\u3002\n`filter(File::exists)` \u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u5b58\u5728\u3057\u306a\u3044\u3082\u306e\u306f\u524a\u304e\u843d\u3068\u3057\u3066\u3044\u308b\u3002\n\n```java\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final String[] paths = {\"aaa/bbb\", \"aaa/bbb/bbb.txt\", \"aaa/ddd\", \"aaa/aaa.txt\", \"aaa/bbb/ccc\", \"dummy\"};\n        final File[] files = Stream.of(paths).map(File::new).filter(File::exists).toArray(File[]::new);\n        Arrays.sort(files, (File x, File y) -> {\n            if ((x.isDirectory() && y.isDirectory()) || (x.isFile() && y.isFile())) {\n                return x.getPath().compareTo(y.getPath());\n            }\n            return x.isDirectory() ? -1 : 1;\n        });\n        Arrays.stream(files).forEach(file -> System.out.println(file.getPath()));\n    }\n}\n```\n\n```\naaa/bbb\naaa/bbb/ccc\naaa/ddd\naaa/aaa.txt\naaa/bbb/bbb.txt\n```\n\n## 5. \u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u30e9\u30e0\u30c0\u5f0f\u4f7f\u3063\u3066\u307f\u3088\n\nAndroid \u30a2\u30d7\u30ea\u3067\u3055\u3093\u3056\u3093 RetroLambda \u3067\u6d3b\u7528\u3057\u3066\u3044\u308b\u304b\u3089\u4eca\u66f4\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\u3060\u308d\u3046\u3002\n\n### \u89e3\u7b54\n\n3, 4 \u884c\u307b\u3069\u77ed\u304f\u306a\u3063\u305f\u3002\u8aad\u307f\u3084\u3059\u304f\u306a\u3063\u305f\u3002\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u305f\u3002\n\n## 6. \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\n```java\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        new Thread(uncheck(() -> {\n            System.out.println(\"Zzz\");\n            Thread.sleep(1000);\n        })).start();\n    }\n\n    /**\n     * \u4e0e\u3048\u3089\u308c\u305f\u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u30b9\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u6642\u4f8b\u5916\u306b\u5909\u66f4\u3059\u308b.\n     *\n     * @param runnable \u30c1\u30a7\u30c3\u30af\u4f8b\u5916\u30b9\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\n     * @return \u5b9f\u884c\u6642\u4f8b\u5916\u306b\u5909\u66f4\u3055\u308c\u305f\u30b3\u30fc\u30c9\n     */\n    public static Runnable uncheck(RunnableEx runnable) {\n        return () -> {\n            try {\n                runnable.run();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        };\n    }\n\n    interface RunnableEx {\n        void run() throws Exception;\n    }\n}\n```\n\n### \u4f55\u6545 RunnableEx \u306e\u4ee3\u308f\u308a\u306b Callable<Void> \u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u306e\u304b\n\n\u623b\u308a\u5024\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3001\u3067\u5408\u3063\u3066\u308b? `return null;` \u3092\u5165\u308c\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u304f\u306a\u308b\u3002\n\u4f7f\u7528\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u601d\u3046\u304c\u3002\n\n## 7. \u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable \u751f\u6210\n\n```java\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        andThen(() -> System.out.println(\"first\"), () -> System.out.println(\"second\")).run();\n    }\n\n    /**\n     * 2 \u3064\u306e Runnable \u3092\u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable \u3092\u8fd4\u3059.\n     *\n     * @param first 1 \u756a\u76ee\u306e\u51e6\u7406\n     * @param second 2 \u756a\u76ee\u306e\u51e6\u7406\n     * @return \u9023\u7d9a\u5b9f\u884c\u3059\u308b Runnable\n     */\n    private static Runnable andThen(final Runnable first, final Runnable second) {\n        return () -> {\n            first.run();\n            second.run();\n        };\n    }\n}\n```\n\n## 8. \u30e9\u30e0\u30c0\u5f0f\u304c\u62e1\u5f35 for \u6587\u306e\u5024\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u5834\u5408\n\n\u3053\u308c\u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001\u5b9f\u969b\u3084\u3063\u3066\u307f\u305f\u3002\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        List<Runnable> runners = new ArrayList<>();\n        for (String name : names) {\n            runners.add(() -> System.out.println(name));\n        }\n        runners.stream().forEach(Runnable::run);\n    }\n}\n```\n\n```\nPeter\nPaul\nMary\n```\n\n\u9593\u9055\u3063\u3066\u3082\u3059\u3079\u3066 Mary \u306b\u306a\u3063\u305f\u308a\u306f\u3057\u306a\u3044\u3002\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3044\u308b\u306e\u306f `name` \u3067\u3042\u3063\u3066\u6dfb\u5b57\u3067\u306f\u306a\u3044\u3002String \u306f\u4e0d\u5909\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067\u5024\u304c\u66f8\u304d\u63db\u308f\u3063\u305f\u308a\u306f\u3057\u306a\u3044\u3002\u3053\u308c\u3092\u5f93\u6765\u306e for \u306b\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u3002\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        List<Runnable> runners = new ArrayList<>();\n        for (int i = 0; i < names.length; i++) {\n            int j = i;  // \u4e8b\u5b9f\u4e0a\u306e final \u3067\u3042\u308c\u3070 final \u306f\u4ed8\u3051\u306a\u304f\u3066\u3082\u53c2\u7167\u53ef\u80fd\n            runners.add(() -> System.out.println(names[j]));  // i \u3060\u3068\u4e8b\u5b9f\u4e0a final \u3067\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\n        }\n        runners.stream().forEach(Runnable::run);\n    }\n}\n```\n\n```\nPeter\nPaul\nMary\n```\n\n\u5927\u4e08\u592b\u3002j \u306f for \u30d6\u30ed\u30c3\u30af\u5185\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306a\u306e\u3067\u4f7f\u3044\u307e\u308f\u3055\u308c\u306a\u3044\u3002\u3053\u308c\u304c\u3082\u3057 **i \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3089**~~\u5168\u90e8 Mary \u306b\u306a\u3063\u305f\u3053\u3068\u3060\u308d\u3046\u3002~~\u5618\u3002\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\u524d\u306b `i++` \u304c\u8d70\u308b\u306e\u3067\u5b9f\u884c\u6642\u306b `IndexOutOfBoundsException` \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n## 9. \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9 forEachIf() \u5b9f\u88c5\n\n\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        class ArrayList2<T> extends ArrayList<T> implements Collection2<T> {\n            // do nothing\n        }\n        String[] names = {\"Peter\", \"Paul\", \"Mary\"};\n        Collection2<String> list = new ArrayList2<>();\n        Collections.addAll(list, names);\n        list.forEachIf(System.out::println, s -> s.length() == 4);  // Paul Mary\n    }\n\n    interface Collection2<T> extends Collection<T> {\n        default void forEachIf(Consumer<T> action, Predicate<T> filter) {\n            stream().forEach(item -> {\n                if (filter.test(item)) {\n                    action.accept(item);\n                }\n            });\n        }\n    }\n}\n```\n\nStream API \u3067 `filter()` \u3057\u305f\u5f8c\u306b `forEach()` \u82e5\u3057\u304f\u306f `peek()` \u3059\u308b\u3068 Stream \u306e\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u305d\u3046\u3044\u3063\u305f\u6642\u306b\u4f7f\u3048\u308b\u2026\u2026\u3067\u3044\u3044\u306e\u304b?\n\n## 10. Collections \u306e\u662f\u975e\n\n`java.util.Collections` \u306f Collection \u306b\u5bfe\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u3092\u5bc4\u305b\u96c6\u3081\u305f\u30af\u30e9\u30b9\u3067\u78ba\u304b\u306b\u3088\u304f\u4f7f\u3046\u304c\u8a2d\u8a08\u4e0a\u30a8\u30ec\u30ac\u30f3\u30c8\u3068\u306f\u8a00\u3044\u304c\u305f\u3044\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5fd7\u5411\u3067\u306a\u304f\u547d\u4ee4\u578b\u306e\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u307e\u3041\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u51fa\u6765\u305f\u306e\u3067\u672c\u5f53\u306f `java.util.Collection<T>` \u306b\u5165\u308c\u308b\u306e\u304c\u3044\u3044\u306e\u3060\u308d\u3046\u3002\u591a\u304f\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308b\u306f\u305a\u3002\u524d\u65b9\u4e92\u63db\u6027\u3092\u8003\u616e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3053\u306e\u3078\u3093\u304c Java \u306e\u8f9b\u3044\u3068\u3053\u308d\u3060\u306a\u3002\n\n## 11. \u540c\u4e00\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u6642\u306e\u6319\u52d5\n\n\u4ee5\u4e0b\u8abf\u67fb\u3057\u305f\u3002\n\n### \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\n\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u306f\u666e\u901a\u306b 1 \u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u3002\u3053\u308c\u306f Java7 \u4ee5\u524d\u3068\u540c\u69d8\u3002\n\n### \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\n\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u306f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u304c default \u5b9f\u88c5\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```java\n    static class My implements I, J {\n        @Override\n        public void f() {\n            J.super.f();  // \u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3092\u3059\u308b\n        }\n    }\n\n    interface I {\n        void f();\n    }\n\n    interface J {\n        default void f() {\n\n        };\n    }\n```\n\n### \u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068 static \u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\n\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3088\u3044\u3002static \u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u304c\u512a\u5148\u3055\u308c\u308b\u3002\n\n### \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\n\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u3068\u540c\u3058\u3002\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u308b\u304c default \u5b9f\u88c5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n### \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3068 static \u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\n\n\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3088\u3044\u3002\u53cc\u65b9\u5171\u5b58\u3067\u304d\u308b\u3002\n\n### static \u30e1\u30bd\u30c3\u30c9\u540c\u58eb\u306e\u5834\u5408\n\n\u554f\u984c\u306a\u3044\u3002\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e static \u30e1\u30bd\u30c3\u30c9\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u547c\u3076\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u533a\u5225\u3055\u308c\u308b\u3002\n\n### \u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u540c\u4e00\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u3069\u3046\u304b\n\n\u62bd\u8c61\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3001static \u30e1\u30bd\u30c3\u30c9\u3044\u305a\u308c\u3082\u554f\u984c\u306a\u3044\u3002\n\n## 12. \u306a\u3093\u304b\u6982\u5ff5\u7684\u306a\u8a71\n\n\u3061\u3087\u3063\u3068\u3053\u306e\u3042\u305f\u308a\u304c\u81ea\u4fe1\u304c\u306a\u3044\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u304c\u826f\u304f\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u305f\u306e\u306f\u300c\u5171\u901a\u7684\u306b\u4f7f\u308f\u308c\u308b\u51e6\u7406\u300d\u3084\u300c\u5b9f\u884c\u524d\u3084\u5b9f\u884c\u5f8c\u306b\u307e\u3068\u3081\u3066\u884c\u3046\u51e6\u7406\u300d\u3068\u3044\u3063\u305f\u3082\u306e\u3092\u89aa\u30af\u30e9\u30b9\u306b\u66f8\u3044\u3066\u5168\u90e8\u305d\u308c\u3067\u3044\u304f\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u3063\u3066\u3001\u5b9f\u88c5\u5f8c\u306b\u300c\u3068\u3042\u308b\u30af\u30e9\u30b9\u3067\u306f\u4f8b\u5916\u7684\u306b\u3053\u3046\u3044\u3046\u306e\u306f\u3057\u305f\u304f\u306a\u3044\u300d\u3068\u304b\u300c\u3068\u3042\u308b\u30af\u30e9\u30b9\u3067\u306f\u3053\u3046\u3044\u3046\u51e6\u7406\u3092\u3057\u305f\u3044\u300d\u307f\u305f\u3044\u306a\u6b32\u6c42\u304c\u51fa\u3066\u304d\u305f\u6642\u306b\u305d\u308c\u3092\u89aa\u30af\u30e9\u30b9\u306e\u65b9\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u3066**\u65e2\u306b\u5171\u901a\u51e6\u7406\u3058\u3083\u306a\u304f\u306a\u3063\u3066\u3044\u308b**\u3068\u3044\u3063\u305f\u554f\u984c\u304c\u3088\u304f\u3042\u3063\u305f\u304b\u3089\u3060\u3068\u601d\u3046\u3002\u3064\u307e\u308a\u89aa\u306e\u306f\u305a\u304c\u3044\u3064\u306e\u9593\u306b\u304b\u5b50\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u8a2d\u8a08\u306b\u306a\u308a\u304c\u3061\u3068\u3044\u3046\u3053\u3068\u3002\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u306b\u3082\u540c\u3058\u5371\u967a\u304c\u3042\u308b\u304c\u3001\u305d\u308c\u3092\u8a00\u3063\u305f\u3089\u4e0a\u8ff0\u306e\u62bd\u8c61\u30af\u30e9\u30b9\u3082\u305d\u3046\u306a\u308f\u3051\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u307f\u5b9f\u88c5\u3092\u7981\u6b62\u3059\u308b\u660e\u78ba\u306a\u7406\u7531\u304c\u8584\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\u305d\u3057\u3066\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u304c\u3067\u304d\u306a\u3044\u305b\u3044\u3067 Java \u306f\u540c\u3058\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u305b\u3056\u308b\u3092\u5f97\u306a\u3044\u3001\u82e5\u3057\u304f\u306f\u4f55\u3068\u304b\u79fb\u8b72\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u9811\u5f35\u3063\u3066\u66f8\u304f\u3088\u3046\u306a\u3053\u3068\u306b\u306a\u308a\u304c\u3061\u3060\u3063\u305f\u3002\n\n\u306a\u306e\u3067\u300c\u3069\u308c\u3060\u3051\u5b89\u5168\u306a\u306e\u304b\u300d\u3068\u805e\u304b\u308c\u308b\u3068\u6b63\u76f4\u300c\u5b9f\u88c5\u8005\u306e\u8a2d\u8a08\u306b\u4f9d\u308b\u306e\u3067\u4eca\u3082\u6614\u3082\u305d\u3093\u306a\u306b\u5909\u308f\u3089\u306a\u3044\u300d\u3068\u601d\u3046\u3002\n\nCollection \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u72ec\u81ea\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u305d\u306e\u30b3\u30fc\u30c9\u304c stream \u30e1\u30bd\u30c3\u30c9\u3092\u5171\u5b58\u3067\u304d\u306a\u3044\u30b7\u30b0\u30cd\u30c1\u30e3\u3067\u5b9f\u88c5\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u3044\u3002\u30d0\u30a4\u30ca\u30ea\u4e92\u63db\u6027\u306e\u8a71\u306f\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002JAR \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u53e4\u3044\u30b3\u30fc\u30c9\u306f\u57fa\u672c\u7684\u306b\u306f\u52d5\u4f5c\u3059\u308b\u304c\u4f8b\u5916\u306f\u3042\u308b\u3002\n\n# \u7b2c 2 \u7ae0 \u30b9\u30c8\u30ea\u30fc\u30e0 API \u306e\u4f7f\u3044\u65b9\n\n## 1. parallelStream() \u306e\u3088\u3046\u306a\u4e26\u5217\u51e6\u7406\u3092 for \u6587\u3092\u7528\u3044\u3066\u884c\u3048\n\n\u66f8\u3044\u3066\u898b\u308b\u3068\u304b\u306a\u308a\u9762\u5012\u3060\u3057\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3059\u3054\u305d\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u3063\u305f\u3002\n\n```java\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.*;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final String contents;\n        try {\n            contents = new String(Files.readAllBytes(Paths.get(\"alice.txt\")), StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        final List<String> words = Arrays.asList(contents.split(\"[\\\\P{L}]+\"));\n\n        // \u901a\u5e38\u306e for \u30eb\u30fc\u30d7\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n        /*\n        int count = 0;\n        for (String w : words) {\n            if (w.length() > 12) {\n                System.out.println(w);\n                count++;\n            }\n        }\n        System.out.println(count);\n        */\n\n        // \u30ea\u30b9\u30c8\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3054\u3068\u306b\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u30d0\u30fc\u30b8\u30e7\u30f3\n        final My my = new My();\n        for (String w : words) {\n            new Thread(() -> {\n                if (w.length() > 12) {\n                    my.count++;\n                }\n                final int done;\n                synchronized (My.class) {\n                    done = ++my.done;\n                }\n                if (done == words.size()) {\n                    System.out.println(my.count);\n                }\n            }).start();\n        }\n    }\n\n    static class My {\n        int count = 0;\n        int done = 0;\n    }\n}\n```\n\n> \u307f\u306a\u3055\u3093\u306f\u3001\u5358\u4e00\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u305f\u304f\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u306a\u305c\u3067\u3059\u304b\u3002\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3002\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u306e\u306f\u3044\u3044\u304c\u3001\u4e26\u5217\u51e6\u7406\u304c\u5168\u3066\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u7d50\u679c\u306e\u51fa\u529b\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u4e26\u5217\u51e6\u7406\u304c\u5168\u3066\u7d42\u308f\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5224\u5b9a\u3059\u308b\u306e\u306f\u30a2\u30c8\u30df\u30c3\u30af\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n## 2. \u5fc5\u8981\u306a\u56de\u6570\u3060\u3051 filter \u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3053\u3068\u306e\u691c\u8a3c\n\n```java\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        Stream.of(\"aaa\", \"bbbb\", \"ccccc\", \"dddddd\", \"eeeeeee\", \"ffffffff\", \"ggggggggg\")\n                .filter(s -> {\n                    System.out.println(String.format(\"%s is filtered.\", s));\n                    return s.length() > 3;\n                }).limit(5)\n                .forEach(System.out::println);\n    }\n}\n```\n\n```\naaa is filtered.\nbbbb is filtered.\nbbbb\nccccc is filtered.\nccccc\ndddddd is filtered.\ndddddd\neeeeeee is filtered.\neeeeeee\nffffffff is filtered.\nffffffff\n```\n\n\u65e2\u306b 5 \u4ef6\u898b\u3064\u304b\u3063\u305f\u306e\u3067 `ggggggggg` \u304c\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n## 3. parallelStream \u3067\u306e\u901f\u5ea6\u306e\u691c\u8a3c\n\n\u82f1\u8a9e\u306e\u7d20\u6750\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u7701\u7565\u3067\u3002[Qiita \u4e0a\u3067\u3084\u3063\u3066\u304a\u3089\u308c\u308b\u65b9](http://qiita.com/clomie/items/07bac6b31314486f1591)\u304c\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3002\n\n## 4. Stream.of() \u306b\u914d\u5217\u3092\u6e21\u3057\u305f\u5834\u5408\n\n`Stream.of()` \u306e\u53d7\u3051\u4ed8\u3051\u308b\u5f15\u6570\u304c\u7dcf\u79f0\u578b\u5f15\u6570 `T` \u82e5\u3057\u304f\u306f\u7dcf\u79f0\u578b\u53ef\u5909\u5f15\u6570 `T...` \u306a\u306e\u3067 `int[]` \u578b\u306e\u5909\u6570\u3092\u305d\u306e\u307e\u307e\u6e21\u3059\u3068 `T = int[]` \u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u6211\u3005\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f `T... = int[]` \u306a\u306e\u3060\u304c\u3002\n\nScala \u3084 Python \u306a\u3069\u306e\u8a00\u8a9e\u3067\u3042\u308c\u3070\u5f15\u6570\u306b\u5c55\u958b\u3057\u305f\u72b6\u614b\u3067\u6e21\u3059\u69cb\u6587\u304c\u3042\u308b\u306e\u3060\u304c Java \u306b\u306f\u305d\u3093\u306a\u3082\u306e\u306f\u306a\u3044\u3002\n\u5e78\u3044 `Arrays.stream()` \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\n\n## 5. \u7dda\u5f62\u5408\u540c\u751f\u6210\u6a5f\u3092\u5b9f\u88c5\u305b\u3088\n\n`Math.random` \u3067\u306a\u304f**\u7dda\u5f62\u5408\u540c\u751f\u6210\u6a5f**\u3068\u3084\u3089\u3092\u76f4\u63a5\u5b9f\u88c5\u305b\u3088\u3068\u306e\u3053\u3068\u3002\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u5f0f\u304c\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u305d\u306e\u901a\u308a\u306b\u8a08\u7b97\u3059\u308b\u3002\n\n```java\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final long a = 25214903917L;\n        final int c = 11;\n        final long m = (long) Math.pow(2, 48);\n        final Stream<Long> stream = Stream.iterate(System.currentTimeMillis(), x -> ((a * x + c) % m)).skip(1);\n        stream.limit(10).forEach(System.out::println);\n    }\n}\n```\n\n```\n-1411176680831\n96560841484024\n187724558509987\n89180819509874\n-38511100393835\n217416516840316\n75995036052439\n-231277494299498\n175177363425257\n273390213248064\n```\n\nseed \u306f `System.currentTimeMillis` \u3092\u4f7f\u7528\u3002`skip(1)` \u3067 seed \u3092\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u7701\u3044\u3066\u3044\u308b\u3002\n\n## 6. \u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066 1 \u884c\u3067\u5b9f\u88c5\u305b\u3088\n\n`String.toCharArray()` \u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3046\u3068\u4e00\u767a\u306a\u306e\u3060\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u6307\u793a\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b:\n\n```java\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        characterStream(\"Hello\").forEach(System.out::println);\n    }\n\n    /**\n     * \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3092 1 \u6587\u5b57\u305a\u3064 char \u306b\u3057\u305f Stream \u306b\u5909\u63db\u3059\u308b.\n     *\n     * @param str \u5bfe\u8c61\u6587\u5b57\u5217\n     * @return Stream\n     */\n    public static Stream<Character> characterStream(String str) {\n        return IntStream.range(0, str.length()).mapToObj(str::charAt);\n    }\n}\n```\n\n## 7. Stream \u304c\u6709\u9650\u304b\u7121\u9650\u304b\u3092\u5224\u5b9a\u3059\u308b\u306e\u306f\u30a2\u30ea\u306a\u306e\u304b\n\n`isFinite(Stream<T> stream)` \u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u3066\u3044\u308b\u304c\u305d\u308c\u306f\u30a2\u30ea\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u554f\u984c\u3002\nfinite \u3068\u306f\u300c\u6709\u9650\u306e\u300d\u3068\u3044\u3046\u610f\u5473\u306a\u306e\u3067\u300c\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u6709\u9650\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u300d\u306e\u3060\u308d\u3046\u3002\n\u6b63\u76f4\u81ea\u4fe1\u304c\u306a\u3044\u3002\u4ee5\u4e0b\u8003\u5bdf\u3002\n\n\u307e\u305a `Stream<T>` \u306b\u306f\u6709\u9650\u304b\u7121\u9650\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u3044\u3002\n\u4f7f\u3048\u305d\u3046\u306a\u306e\u306f `count()` \u3042\u305f\u308a\u3060\u308d\u3046\u304c\u672b\u7aef\u51e6\u7406\u306a\u306e\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3066\u3057\u307e\u3046\u3002\n\u3057\u304b\u3082\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u5b9f\u884c\u3059\u308b\u3068\u6c38\u9060\u306b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\n\n\u6f14\u7b97\u3057\u306a\u3044\u3068\u6c42\u3081\u3089\u308c\u306a\u3044\u95a2\u4fc2\u4e0a\u300c\u826f\u304f\u306a\u3044\u8003\u3048\u300d\u306e\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n## 8. \u30b9\u30c8\u30ea\u30fc\u30e0\u306e zip() \u30e1\u30bd\u30c3\u30c9\u4f5c\u6210\n\n\u4e00\u65e6\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u884c\u3046\u3053\u3068\u306b\u3057\u305f\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u307e\u307e\u4f5c\u308c\u308b\u306e\u304b\u306f\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\u540c\u6642\u306b `Stream.forEach()` \u3067\u304d\u308b\u306e\u304b?\n\n```java\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final Stream<String> first = Stream.of(\"a\", \"b\", \"c\");\n        final Stream<String> second = Stream.of(\"A\", \"B\", \"C\", \"D\", \"E\");\n        zip(first, second).forEach(System.out::println);\n    }\n\n    /**\n     * 2 \u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u8981\u7d20\u3092\u4ea4\u4e92\u306b\u5165\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8fd4\u3059.\n     * \u3069\u3061\u3089\u304b\u304c\u7d42\u7aef\u306b\u9054\u3057\u305f\u3089\u305d\u3053\u3067\u7d42\u4e86\u3068\u3059\u308b.\n     * \u6709\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u4e14\u3064\u8981\u7d20\u6570\u306f Integer.MAX_VALUE - 1 \u307e\u3067\u306e\u7bc4\u56f2\u3068\u3059\u308b.\n     *\n     * @param first \u30b9\u30c8\u30ea\u30fc\u30e0\n     * @param second \u30b9\u30c8\u30ea\u30fc\u30e0\n     * @param <T> \u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\n     * @return \u4ea4\u4e92\u306b\u5165\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\n     */\n    public static <T> Stream<T> zip(Stream<T> first, Stream<T> second) {\n        final List<T> firstList = first.collect(Collectors.toList());\n        final List<T> secondList = second.collect(Collectors.toList());\n        final int limit = Math.min(firstList.size(), secondList.size());\n        final Stream.Builder<T> builder = Stream.builder();\n        for (int i = 0; i < limit; i++) {\n            builder.add(firstList.get(i));\n            builder.add(secondList.get(i));\n        }\n        return builder.build();\n    }\n}\n```\n\n## 9. 3 \u3064\u306e reduce\n\n3 \u3064\u306e\u5f62\u5f0f\u306e `reduce()` \u3092\u8a66\u305b\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u305d\u3046\u3057\u305f\u3002\u610f\u5473\u306f\u7121\u3044\u3002\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final ArrayList<String> list1 = new ArrayList<>();\n        Collections.addAll(list1, \"a\", \"b\", \"c\");\n        final ArrayList<String> list2 = new ArrayList<>();\n        Collections.addAll(list2, \"d\", \"e\", \"f\");\n        final ArrayList<String> list3 = new ArrayList<>();\n        Collections.addAll(list3, \"g\", \"h\", \"i\");\n\n        reduce1(Stream.of(list1, list2, list3)).forEach(System.out::println);\n        reduce2(Stream.of(list1, list2, list3)).forEach(System.out::println);\n        reduce3(Stream.of(list1, list2, list3)).forEach(System.out::println);\n    }\n\n    public static <T> ArrayList<T> reduce1(Stream<ArrayList<T>> stream) {\n        return stream.reduce(new ArrayList<>(), (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        });\n    }\n\n    public static <T> ArrayList<T> reduce2(Stream<ArrayList<T>> stream) {\n        return stream.reduce((ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        }).get();\n    }\n\n    public static <T> ArrayList<T> reduce3(Stream<ArrayList<T>> stream) {\n        final ArrayList<T> list = new ArrayList<>();\n        return stream.reduce(list, (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        }, (ts, ts2) -> {\n            ts.addAll(ts2);\n            return ts;\n        });\n    }\n}\n```\n\n## 10. Stream<Double> \u306e\u5e73\u5747\u3092 reduce() \u3067\u8a08\u7b97\u305b\u3088\n\n`DoubleStream` \u306a\u3089\u30e1\u30bd\u30c3\u30c9\u4e00\u767a\u306a\u306e\u3067\u3053\u3093\u306a\u72ec\u81ea\u5b9f\u88c5\u306f\u8f9b\u3044\u304c\u3001\u9811\u5f35\u3063\u3066\u307f\u305f\u3002\n\n\u307e\u305a\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306e\u500b\u6570\u3092\u9806\u3005\u306b\u5897\u3084\u3057\u3066\u3044\u304d\u3001\u524d\u306e\u5024\u304b\u3089\u3069\u3046\u3044\u3046\u3075\u3046\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308c\u3070\u3088\u3044\u304b\u3092\u307f\u308b\u3002\na0, a1, ..., an \u306e\u6570\u5217\u304c\u3042\u308a, \u524d\u306e\u5e73\u5747\u5024\u3092 S \u3067\u4eca\u56de\u306e\u5024\u3092 x \u3068\u3059\u308b\u3068:\n\n```\na0: (0 / 1) * S + (1 / 1) * a0\na0, a1: (a0 + a1) / 2 = (1 / 2) * S + (1 / 2) * a1\na0, a1, a2: (a0 + a1 + a2) / 3 = (2 / 3) * S + (1 / 3) * a2\na0, a1, a2, a3: (a0 + a1 + a2 + a3) / 4 = (3 / 4) * S + (1 / 4) * a3\n...\na0, ..., an: (a0 + ... + an) / n = ((n - 1) / n) * S + (1 / n) * an\n```\n\n\u3068\u306a\u308b\u3053\u3068\u306b\u7740\u76ee\u3059\u308b\u3002\u3053\u306e\u4e00\u756a\u4e0b\u306e\u5f0f (\u4e00\u822c\u9805) \u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u304b\u3051\u3070\u3088\u3044\u3002\n\n```java\nimport java.util.stream.DoubleStream;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n\n        // \u6b63\u898f\u306e\u65b9\u6cd5\n        System.out.println(DoubleStream.of(1.2f, 2.8f, 3.3f).average().getAsDouble());\n\n        // reduce \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\n        My result = Stream.of(1.2f, 2.8f, 3.3f).reduce(new My(), (my, x) -> {\n            my.average = (my.index / (double) (my.index + 1)) * my.average + (1 / (double) (my.index + 1)) * x;\n            my.index++;\n            return my;\n        }, (my, my2) -> {\n            my.average = (my.index / (double) (my.index + 1)) * my.average + (1 / (double) (my.index + 1)) * my2.average;\n            my.index++;\n            return my;\n        });\n        System.out.println(result.average);\n    }\n\n    static class My {\n        int index = 0;\n        double average = 0;\n    }\n}\n```\n\n> \u5358\u7d14\u306b\u5408\u8a08\u3092\u8a08\u7b97\u3057\u3066 `count()` \u3067\u5272\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\u3067\u3059\u304b\u3002\n\n`reduce()` \u304c\u7d42\u7aef\u51e6\u7406\u306a\u306e\u3067 `count()` \u304c\u8a08\u7b97\u51fa\u6765\u306a\u3044\u3002\n\n## 11. \u5358\u4e00\u306e ArrayList \u4e91\u3005\n\n\u3061\u3087\u3063\u3068\u4f55\u8a00\u3063\u3066\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u7121\u56de\u7b54\u3067\u2026\u2026\u3002\n\n## 12. \u4e26\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u64cd\u4f5c\n\n`AtomicInteger` \u3092\u4f7f\u3048\u3068\u3044\u3046\u8a71\u3002\n\n```java\nimport java.util.Arrays;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        final AtomicInteger[] shortWords = new AtomicInteger[12];\n        Arrays.setAll(shortWords, value -> new AtomicInteger(0));\n        Stream.of(\"aaa\", \"bb\", \"c\", \"dddd\", \"eeeee\", \"fffffff\").parallel().forEach(s -> {\n            if (s.length() < 12) {\n                shortWords[s.length()].getAndIncrement();\n            }\n        });\n        System.out.println(Arrays.toString(shortWords));\n    }\n}\n```\n\n## 13. collect \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u305b\u3088\n\n12. \u306e\u7d9a\u304d\u3002\n\n```java\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        Map<Integer, Long> result = Stream.of(\"aaa\", \"bb\", \"c\", \"dddd\", \"eeeee\", \"fffffff\")\n                .parallel().filter(s -> s.length() < 12)\n                .collect(Collectors.groupingBy(String::length, Collectors.counting()));\n        for (final Map.Entry entry : result.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n```\n\n# \u7b2c 3 \u7ae0 \u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n## 1. \u6761\u4ef6\u3082\u8a55\u4fa1\u3057\u306a\u3044\u30ed\u30ae\u30f3\u30b0\n\n\u307e\u3041\u4ee5\u4e0b\u306e\u69d8\u306a\u3082\u306e\u304c\u60f3\u5b9a\u3055\u308c\u308b\u306e\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3063\u3066\u307f\u305f:\n\n```java\nimport java.util.function.BooleanSupplier;\nimport java.util.function.Supplier;\n\npublic final class Java {\n\n    private static boolean IS_PRODUCTION = true;\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        int i = 10;\n        logIf(Level.FINEST, () -> {\n            System.out.println(\"\u5224\u5b9a\u3055\u308c\u305f\");\n            return i == 10;\n        }, () -> {\n            System.out.println(\"\u30ed\u30b0\u5b9f\u884c\");\n            return \"\u30ed\u30b0\u306f\u304b\u308c\u305f\";\n        });\n    }\n\n    enum Level {\n        FINEST,\n\n        WARNING,\n\n        CRITICAL;\n    }\n\n    public static void logIf(Level level, BooleanSupplier condition, Supplier<String> log) {\n        if (IS_PRODUCTION && level == Level.FINEST) {\n            return;\n        }\n        if (!condition.getAsBoolean()) {\n            return;\n        }\n        final String logMessage = log.get();\n        System.out.println(logMessage);\n    }\n}\n```\n\n\u300c\u5224\u5b9a\u3055\u308c\u305f\u300d\u300c\u30ed\u30b0\u5b9f\u884c\u300d\u300c\u30ed\u30b0\u306f\u304b\u308c\u305f\u300d\u3044\u305a\u308c\u3082\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\n## 2. \u30ed\u30c3\u30af\u3068\u30a2\u30f3\u30ed\u30c3\u30af\u3092\u30e9\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\n\n\u554f\u984c\u306e\u96e3\u6613\u5ea6\u306e\u843d\u5dee\u304c\u3059\u3054\u3044\u3002\u52ff\u8ad6\u3053\u308c\u306f\u7c21\u5358\u306a\u65b9\u3060\u3002\n\n```java\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic final class Java {\n\n    /**\n     * \u30e1\u30a4\u30f3\u95a2\u6570.\n     *\n     * @param args \u5f15\u6570\n     */\n    public static void main(final String... args) {\n        ReentrantLock lock = new ReentrantLock();\n        withLock(lock, () -> System.out.println(\"\u30ed\u30c3\u30af\u4e2d\u306e\u51e6\u7406\"));\n    }\n\n    /**\n     * \u672c\u51e6\u7406\u524d\u306b\u30ed\u30c3\u30af\u5b9f\u884c\u3057, \u672c\u51e6\u7406\u5b9f\u884c\u5f8c\u306e\u30ed\u30c3\u30af\u89e3\u9664\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9.\n     *\n     * @param lock \u30ed\u30c3\u30af\n     * @param runnable \u672c\u51e6\u7406\n     */\n    public static void withLock(ReentrantLock lock, Runnable runnable) {\n        lock.lock();\n        try {\n            runnable.run();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n```\n\n## 3. \u306a\u305c\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u304b\n\nJava 1.4 \u6642\u70b9\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u304c\u306a\u304f\u3001\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306e\u9045\u5ef6\u5b9f\u884c\u304c\u306a\u304b\u3063\u305f\u305b\u3044\u3067\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u305d\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3002Java 8 \u306a\u3089\u3070\u30e9\u30e0\u30c0\u5f0f\u304c\u3042\u308b\u306e\u3067\u3067\u304d\u308b\u3002\n\n## 4. Filter \u3092\u542b\u3080\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c Java API \u306b\u3044\u304f\u3064\u3042\u308b\u304b\n\n\u6570\u3048\u308b\u306e\u304b? ... \u9762\u5012\u306a\u306e\u3067\u7701\u7565\u3067\u3002\n"}