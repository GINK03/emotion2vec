{"context": "\u3068\u308a\u3042\u3048\u305a\u3001\u3044\u308d\u3044\u308d\u8aad\u3093\u3067\u3082\u826f\u304f\u89e3\u3089\u306a\u3044\u306e\u3067 keras + tensorflow \u3067\u30b7\u30f3\u30d7\u30eb\u306b\u3084\u3063\u3066\u307f\u305f\u3002\u3053\u308c\u304c\u3046\u307e\u304f\u3044\u3063\u305f\u3089\u3088\u308a\u8907\u96d1\u306a\u554f\u984c\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3088\u3046\u3002\n\u753b\u50cf\u306fpython\u306eImage.open\u3067\u8aad\u307f\u8fbc\u3093\u3060\u3089\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u30921\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u305f\u3089\u3001\u3042\u3068\u306fKeras\u306b\u3088\u308b\u3001\u3082\u306e\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u6df1\u5c64\u5b66\u7fd2\u306e\u4f8b\u3068\u540c\u3058\u3088\u3046\u306b\u5b66\u7fd2\u3001\u7d50\u679c\u3092\u691c\u8a3c\u3059\u308b\u3002\n\u4e0b\u8a18\u306e fruit.py \u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3002\n./data/train/apple/(\u5b66\u7fd2\u7528\u308a\u3093\u3054\u753b\u50cf)\n            /orange/(\u5b66\u7fd2\u7528\u30aa\u30ec\u30f3\u30b8\u753b\u50cf)\n\n       test/apple/(\u30c6\u30b9\u30c8\u7528\u308a\u3093\u3054\u753b\u50cf)\n           /orange/(\u30c6\u30b9\u30c8\u7528\u30aa\u30ec\u30f3\u30b8\u753b\u50cf)\n\n\n\u753b\u50cf\u306f\u9811\u5f35\u3063\u3066\u30b0\u30fc\u30b0\u30eb\u753b\u50cf\u691c\u7d22\u304b\u3089\u843d\u3068\u3057\u305f\u3002\u5b66\u7fd2\u7528\u753b\u50cf\u306f\u305d\u308c\u305e\u308c20\u679a\u304f\u3089\u3044\u3001\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u306f5\u679a\u3065\u3064\u9069\u5f53\u306b\u9078\u3093\u3067\u4e0a\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3002\u6c17\u3092\u3064\u3051\u308b\u306e\u306f\u3001\u5b66\u7fd2\u7528\u306e\u753b\u50cf\u3068\u30c6\u30b9\u30c8\u7528\u306e\u753b\u50cf\u306f\u5225\u3067\u306a\u3051\u308c\u3070\u30c6\u30b9\u30c8\u306b\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u5b66\u7fd2\u7528\u753b\u50cf\u3068\u306f\u5225\u306e\u3082\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n\u308a\u3093\u3054\u753b\u50cf\n\u30aa\u30ec\u30f3\u30b8\u753b\u50cf\n\n\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3002\u8003\u3048\u65b9\u306f\u5358\u7d14\u3067\u3001\u5b66\u7fd2\u7528\u308a\u3093\u3054\u753b\u50cf\u3068\u30aa\u30ec\u30f3\u30b8\u753b\u50cf\u304c\u5165\u3063\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u753b\u50cf\u3092\u4e00\u3064\u4e00\u3064\u8aad\u307f\u8fbc\u3080\u3002\u3088\u307f\u3053\u3093\u3060\u753b\u50cf\u306f[R,G,B]\u3092\u4e00\u8981\u7d20\u3068\u3059\u308b25x25\u306e\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4e71\u66b4\u3060\u3051\u3069\uff11\u6b21\u5143\u753b\u50cf\u306b\u5909\u63db\u3001\u3042\u3068\u306f\u5165\u529b\u5024\u3092 255. \u3067\u5272\u3063\u30660~1\u306e\u5024\u306b\u3057\u3066\u5b66\u7fd2\u7528\u30e2\u30c7\u30eb\u306b\u55b0\u308f\u305b\u308b\u3002\n\u3061\u306a\u307f\u306b\u6b63\u89e3\u30e9\u30d9\u30eb\u306f\u30e9\u30d9\u30eb\u306e\u5024\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u30010\u30681\u304b\u3089\u306a\u308b\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u55b0\u308f\u305b\u308b\u3002\n\u305f\u3068\u3048\u3070  0 \u306f [1,0] \u30011 \u306f [0,1] \u3088\u3046\u3059\u308b\u306b1\u304c\u7acb\u3063\u3066\u3044\u308b\u4f4d\u7f6e\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30e9\u30d9\u30eb\u306e\u5024\u306b\u306a\u308b\u3088\u3046\u306a\u914d\u5217\u3002\n\nfruit.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout\nfrom keras.utils.np_utils import to_categorical\nfrom keras.optimizers import Adagrad\nfrom keras.optimizers import Adam\nimport numpy as np\nfrom PIL import Image\nimport os\n\n# \u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308b.\nimage_list = []\nlabel_list = []\n\n# ./data/train \u4ee5\u4e0b\u306eorange,apple\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u3002\nfor dir in os.listdir(\"data/train\"):\n    if dir == \".DS_Store\":\n        continue\n\n    dir1 = \"data/train/\" + dir \n    label = 0\n\n    if dir == \"apple\":    # apple\u306f\u30e9\u30d9\u30eb0\n        label = 0\n    elif dir == \"orange\": # orange\u306f\u30e9\u30d9\u30eb1\n        label = 1\n\n    for file in os.listdir(dir1):\n        if file != \".DS_Store\":\n            # \u914d\u5217label_list\u306b\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u8ffd\u52a0(\u308a\u3093\u3054:0 \u30aa\u30ec\u30f3\u30b8:1)\n            label_list.append(label)\n            filepath = dir1 + \"/\" + file\n            # \u753b\u50cf\u309225x25pixel\u306b\u5909\u63db\u3057\u30011\u8981\u7d20\u304c[R,G,B]3\u8981\u7d20\u3092\u542b\u3080\u914d\u5217\u306e25x25\u306e\uff12\u6b21\u5143\u914d\u5217\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3002\n            # [R,G,B]\u306f\u305d\u308c\u305e\u308c\u304c0-255\u306e\u914d\u5217\u3002\n            image = np.array(Image.open(filepath).resize((25, 25)))\n            print(filepath)\n            # \u914d\u5217\u3092\u5909\u63db\u3057\u3001[[Red\u306e\u914d\u5217],[Green\u306e\u914d\u5217],[Blue\u306e\u914d\u5217]] \u306e\u3088\u3046\u306a\u5f62\u306b\u3059\u308b\u3002\n            image = image.transpose(2, 0, 1)\n            # \u3055\u3089\u306b\u30d5\u30e9\u30c3\u30c8\u306a1\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3002\u6700\u521d\u306e1/3\u306fRed\u3001\u6b21\u304cGreen\u306e\u3001\u6700\u5f8c\u304cBlue\u306e\u8981\u7d20\u304c\u30d5\u30e9\u30c3\u30c8\u306b\u4e26\u3076\u3002\n            image = image.reshape(1, image.shape[0] * image.shape[1] * image.shape[2]).astype(\"float32\")[0]\n            # \u51fa\u6765\u4e0a\u304c\u3063\u305f\u914d\u5217\u3092image_list\u306b\u8ffd\u52a0\u3002\n            image_list.append(image / 255.)\n\n# keras\u306b\u6e21\u3059\u305f\u3081\u306bnumpy\u914d\u5217\u306b\u5909\u63db\u3002\nimage_list = np.array(image_list)\n\n# \u30e9\u30d9\u30eb\u306e\u914d\u5217\u30921\u30680\u304b\u3089\u306a\u308b\u30e9\u30d9\u30eb\u914d\u5217\u306b\u5909\u66f4\n# 0 -> [1,0], 1 -> [0,1] \u3068\u3044\u3046\u611f\u3058\u3002\nY = to_categorical(label_list)\n\n# \u30e2\u30c7\u30eb\u3092\u751f\u6210\u3057\u3066\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u69cb\u7bc9\nmodel = Sequential()\nmodel.add(Dense(200, input_dim=1875))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(200))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(2))\nmodel.add(Activation(\"softmax\"))\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306bAdam\u3092\u4f7f\u7528\nopt = Adam(lr=0.001)\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\u300210%\u306f\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3002\nmodel.fit(image_list, Y, nb_epoch=1500, batch_size=100, validation_split=0.1)\n\n# \u30c6\u30b9\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(./data/train/)\u306e\u753b\u50cf\u3067\u30c1\u30a7\u30c3\u30af\u3002\u6b63\u89e3\u7387\u3092\u8868\u793a\u3059\u308b\u3002\ntotal = 0.\nok_count = 0.\n\nfor dir in os.listdir(\"data/train\"):\n    if dir == \".DS_Store\":\n        continue\n\n    dir1 = \"data/test/\" + dir \n    label = 0\n\n    if dir == \"apple\":\n        label = 0\n    elif dir == \"orange\":\n        label = 1\n\n    for file in os.listdir(dir1):\n        if file != \".DS_Store\":\n            label_list.append(label)\n            filepath = dir1 + \"/\" + file\n            image = np.array(Image.open(filepath).resize((25, 25)))\n            print(filepath)\n            image = image.transpose(2, 0, 1)\n            image = image.reshape(1, image.shape[0] * image.shape[1] * image.shape[2]).astype(\"float32\")[0]\n            result = model.predict_classes(np.array([image / 255.]))\n            print(\"label:\", label, \"result:\", result[0])\n\n            total += 1.\n\n            if label == result[0]:\n                ok_count += 1.\n\nprint(\"seikai: \", ok_count / total * 100, \"%\")\n\n\n\u4e0a\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306f\u4ee5\u4e0b\n(\u5b66\u7fd2\u904e\u7a0b\u306e\u51fa\u529b)....\n36/36 [==============================] - 0s - loss: 1.9686e-06 - acc: 1.0000 - val_loss: 0.0016 - val_acc: 1.0000\n\n(\u4ee5\u4e0b\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u5206\u985e\u3092\u5b9f\u884c)\ndata/test/apple/090527innhuruennza1.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/20140924pre01.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/e964c5a13ae8f444a06563838efd745a_s.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/img_1795.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/top-rinngo.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/orange/32e44d81-acbc-48fc-98e6-77d09f07197a.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/menu_155_3.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/nable1.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/Nhwj8QQm.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/orange.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\nseikai:  100.0 %\n\n\u6bce\u5ea6100%\u3067\u306f\u306a\u304f\u3066\u3001\u305f\u307e\u306b90%\u3068\u304b\u306b\u306a\u308b\u3002\n\n\u611f\u60f3\n\u3068\u308a\u3042\u3048\u305a\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u4e71\u66b4\u306b\uff11\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u3084\u3063\u3066\u307f\u305f\u3089\u3001\u307e\u3042\u305d\u308c\u306a\u308a\u306b\u5224\u5225\u3067\u304d\u305f\u3002\u305f\u3060\u3001\u3053\u308c\u3060\u3068\u9854\u306e\u5224\u5225\u3068\u304b\u306f\u96e3\u3057\u305d\u3046\u3060\u3002\u3088\u308a\u5fae\u5999\u306a\u9055\u3044\u3092\u5224\u5225\u3059\u308b\u65b9\u6cd5\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u3044\u308d\u3044\u308d\u8aad\u3093\u3067\u3082\u826f\u304f\u89e3\u3089\u306a\u3044\u306e\u3067 `keras` + `tensorflow` \u3067\u30b7\u30f3\u30d7\u30eb\u306b\u3084\u3063\u3066\u307f\u305f\u3002\u3053\u308c\u304c\u3046\u307e\u304f\u3044\u3063\u305f\u3089\u3088\u308a\u8907\u96d1\u306a\u554f\u984c\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3088\u3046\u3002\n\n\u753b\u50cf\u306fpython\u306eImage.open\u3067\u8aad\u307f\u8fbc\u3093\u3060\u3089\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u30921\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u305f\u3089\u3001\u3042\u3068\u306f[Keras\u306b\u3088\u308b\u3001\u3082\u306e\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u6df1\u5c64\u5b66\u7fd2\u306e\u4f8b](http://qiita.com/hiroeorz@github/items/33b85529be0829f34973)\u3068\u540c\u3058\u3088\u3046\u306b\u5b66\u7fd2\u3001\u7d50\u679c\u3092\u691c\u8a3c\u3059\u308b\u3002\n\n\u4e0b\u8a18\u306e `fruit.py` \u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3002\n\n```\n./data/train/apple/(\u5b66\u7fd2\u7528\u308a\u3093\u3054\u753b\u50cf)\n            /orange/(\u5b66\u7fd2\u7528\u30aa\u30ec\u30f3\u30b8\u753b\u50cf)\n\n       test/apple/(\u30c6\u30b9\u30c8\u7528\u308a\u3093\u3054\u753b\u50cf)\n           /orange/(\u30c6\u30b9\u30c8\u7528\u30aa\u30ec\u30f3\u30b8\u753b\u50cf)\n\n```\n\n\u753b\u50cf\u306f\u9811\u5f35\u3063\u3066\u30b0\u30fc\u30b0\u30eb\u753b\u50cf\u691c\u7d22\u304b\u3089\u843d\u3068\u3057\u305f\u3002\u5b66\u7fd2\u7528\u753b\u50cf\u306f\u305d\u308c\u305e\u308c20\u679a\u304f\u3089\u3044\u3001\u30c6\u30b9\u30c8\u7528\u753b\u50cf\u306f5\u679a\u3065\u3064\u9069\u5f53\u306b\u9078\u3093\u3067\u4e0a\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3002\u6c17\u3092\u3064\u3051\u308b\u306e\u306f\u3001\u5b66\u7fd2\u7528\u306e\u753b\u50cf\u3068\u30c6\u30b9\u30c8\u7528\u306e\u753b\u50cf\u306f\u5225\u3067\u306a\u3051\u308c\u3070\u30c6\u30b9\u30c8\u306b\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u5b66\u7fd2\u7528\u753b\u50cf\u3068\u306f\u5225\u306e\u3082\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n* [\u308a\u3093\u3054\u753b\u50cf](https://www.google.co.jp/search?q=%E3%82%8A%E3%82%93%E3%81%94&safe=off&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjz857EqZLSAhVFk5QKHcp2DPMQ_AUICCgB&biw=1280&bih=703)\n* [\u30aa\u30ec\u30f3\u30b8\u753b\u50cf](https://www.google.co.jp/search?q=%E3%82%AA%E3%83%AC%E3%83%B3%E3%82%B8&safe=off&source=lnms&tbm=isch&sa=X&ved=0ahUKEwi20bzQqZLSAhVBtJQKHdq-BfgQ_AUICSgC&biw=1280&bih=703)\n\n\n\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3002\u8003\u3048\u65b9\u306f\u5358\u7d14\u3067\u3001\u5b66\u7fd2\u7528\u308a\u3093\u3054\u753b\u50cf\u3068\u30aa\u30ec\u30f3\u30b8\u753b\u50cf\u304c\u5165\u3063\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u753b\u50cf\u3092\u4e00\u3064\u4e00\u3064\u8aad\u307f\u8fbc\u3080\u3002\u3088\u307f\u3053\u3093\u3060\u753b\u50cf\u306f[R,G,B]\u3092\u4e00\u8981\u7d20\u3068\u3059\u308b25x25\u306e\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4e71\u66b4\u3060\u3051\u3069\uff11\u6b21\u5143\u753b\u50cf\u306b\u5909\u63db\u3001\u3042\u3068\u306f\u5165\u529b\u5024\u3092 `255.` \u3067\u5272\u3063\u30660~1\u306e\u5024\u306b\u3057\u3066\u5b66\u7fd2\u7528\u30e2\u30c7\u30eb\u306b\u55b0\u308f\u305b\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u6b63\u89e3\u30e9\u30d9\u30eb\u306f\u30e9\u30d9\u30eb\u306e\u5024\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u30010\u30681\u304b\u3089\u306a\u308b\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u55b0\u308f\u305b\u308b\u3002\n\u305f\u3068\u3048\u3070  `0` \u306f `[1,0]` \u3001`1` \u306f `[0,1]` \u3088\u3046\u3059\u308b\u306b1\u304c\u7acb\u3063\u3066\u3044\u308b\u4f4d\u7f6e\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30e9\u30d9\u30eb\u306e\u5024\u306b\u306a\u308b\u3088\u3046\u306a\u914d\u5217\u3002\n\n\n```python:fruit.py\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout\nfrom keras.utils.np_utils import to_categorical\nfrom keras.optimizers import Adagrad\nfrom keras.optimizers import Adam\nimport numpy as np\nfrom PIL import Image\nimport os\n\n# \u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308b.\nimage_list = []\nlabel_list = []\n\n# ./data/train \u4ee5\u4e0b\u306eorange,apple\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u3002\nfor dir in os.listdir(\"data/train\"):\n    if dir == \".DS_Store\":\n        continue\n\n    dir1 = \"data/train/\" + dir \n    label = 0\n\n    if dir == \"apple\":    # apple\u306f\u30e9\u30d9\u30eb0\n        label = 0\n    elif dir == \"orange\": # orange\u306f\u30e9\u30d9\u30eb1\n        label = 1\n        \n    for file in os.listdir(dir1):\n        if file != \".DS_Store\":\n            # \u914d\u5217label_list\u306b\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u8ffd\u52a0(\u308a\u3093\u3054:0 \u30aa\u30ec\u30f3\u30b8:1)\n            label_list.append(label)\n            filepath = dir1 + \"/\" + file\n            # \u753b\u50cf\u309225x25pixel\u306b\u5909\u63db\u3057\u30011\u8981\u7d20\u304c[R,G,B]3\u8981\u7d20\u3092\u542b\u3080\u914d\u5217\u306e25x25\u306e\uff12\u6b21\u5143\u914d\u5217\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3002\n            # [R,G,B]\u306f\u305d\u308c\u305e\u308c\u304c0-255\u306e\u914d\u5217\u3002\n            image = np.array(Image.open(filepath).resize((25, 25)))\n            print(filepath)\n            # \u914d\u5217\u3092\u5909\u63db\u3057\u3001[[Red\u306e\u914d\u5217],[Green\u306e\u914d\u5217],[Blue\u306e\u914d\u5217]] \u306e\u3088\u3046\u306a\u5f62\u306b\u3059\u308b\u3002\n            image = image.transpose(2, 0, 1)\n            # \u3055\u3089\u306b\u30d5\u30e9\u30c3\u30c8\u306a1\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3002\u6700\u521d\u306e1/3\u306fRed\u3001\u6b21\u304cGreen\u306e\u3001\u6700\u5f8c\u304cBlue\u306e\u8981\u7d20\u304c\u30d5\u30e9\u30c3\u30c8\u306b\u4e26\u3076\u3002\n            image = image.reshape(1, image.shape[0] * image.shape[1] * image.shape[2]).astype(\"float32\")[0]\n            # \u51fa\u6765\u4e0a\u304c\u3063\u305f\u914d\u5217\u3092image_list\u306b\u8ffd\u52a0\u3002\n            image_list.append(image / 255.)\n\n# keras\u306b\u6e21\u3059\u305f\u3081\u306bnumpy\u914d\u5217\u306b\u5909\u63db\u3002\nimage_list = np.array(image_list)\n\n# \u30e9\u30d9\u30eb\u306e\u914d\u5217\u30921\u30680\u304b\u3089\u306a\u308b\u30e9\u30d9\u30eb\u914d\u5217\u306b\u5909\u66f4\n# 0 -> [1,0], 1 -> [0,1] \u3068\u3044\u3046\u611f\u3058\u3002\nY = to_categorical(label_list)\n\n# \u30e2\u30c7\u30eb\u3092\u751f\u6210\u3057\u3066\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u69cb\u7bc9\nmodel = Sequential()\nmodel.add(Dense(200, input_dim=1875))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(200))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(2))\nmodel.add(Activation(\"softmax\"))\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306bAdam\u3092\u4f7f\u7528\nopt = Adam(lr=0.001)\n# \u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n# \u5b66\u7fd2\u3092\u5b9f\u884c\u300210%\u306f\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3002\nmodel.fit(image_list, Y, nb_epoch=1500, batch_size=100, validation_split=0.1)\n\n# \u30c6\u30b9\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(./data/train/)\u306e\u753b\u50cf\u3067\u30c1\u30a7\u30c3\u30af\u3002\u6b63\u89e3\u7387\u3092\u8868\u793a\u3059\u308b\u3002\ntotal = 0.\nok_count = 0.\n\nfor dir in os.listdir(\"data/train\"):\n    if dir == \".DS_Store\":\n        continue\n\n    dir1 = \"data/test/\" + dir \n    label = 0\n\n    if dir == \"apple\":\n        label = 0\n    elif dir == \"orange\":\n        label = 1\n        \n    for file in os.listdir(dir1):\n        if file != \".DS_Store\":\n            label_list.append(label)\n            filepath = dir1 + \"/\" + file\n            image = np.array(Image.open(filepath).resize((25, 25)))\n            print(filepath)\n            image = image.transpose(2, 0, 1)\n            image = image.reshape(1, image.shape[0] * image.shape[1] * image.shape[2]).astype(\"float32\")[0]\n            result = model.predict_classes(np.array([image / 255.]))\n            print(\"label:\", label, \"result:\", result[0])\n            \n            total += 1.\n            \n            if label == result[0]:\n                ok_count += 1.\n\nprint(\"seikai: \", ok_count / total * 100, \"%\")\n```\n\n\u4e0a\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u306f\u4ee5\u4e0b\n\n```\n(\u5b66\u7fd2\u904e\u7a0b\u306e\u51fa\u529b)....\n36/36 [==============================] - 0s - loss: 1.9686e-06 - acc: 1.0000 - val_loss: 0.0016 - val_acc: 1.0000\n\n(\u4ee5\u4e0b\u3001\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3067\u5206\u985e\u3092\u5b9f\u884c)\ndata/test/apple/090527innhuruennza1.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/20140924pre01.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/e964c5a13ae8f444a06563838efd745a_s.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/img_1795.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/apple/top-rinngo.jpg\n1/1 [==============================] - 0s\nlabel: 0 result: 0\ndata/test/orange/32e44d81-acbc-48fc-98e6-77d09f07197a.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/menu_155_3.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/nable1.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/Nhwj8QQm.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\ndata/test/orange/orange.jpg\n1/1 [==============================] - 0s\nlabel: 1 result: 1\nseikai:  100.0 %\n```\n\n\u6bce\u5ea6100%\u3067\u306f\u306a\u304f\u3066\u3001\u305f\u307e\u306b90%\u3068\u304b\u306b\u306a\u308b\u3002\n\n## \u611f\u60f3\n\n\u3068\u308a\u3042\u3048\u305a\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u4e71\u66b4\u306b\uff11\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u3084\u3063\u3066\u307f\u305f\u3089\u3001\u307e\u3042\u305d\u308c\u306a\u308a\u306b\u5224\u5225\u3067\u304d\u305f\u3002\u305f\u3060\u3001\u3053\u308c\u3060\u3068\u9854\u306e\u5224\u5225\u3068\u304b\u306f\u96e3\u3057\u305d\u3046\u3060\u3002\u3088\u308a\u5fae\u5999\u306a\u9055\u3044\u3092\u5224\u5225\u3059\u308b\u65b9\u6cd5\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n", "tags": ["\u6df1\u5c64\u5b66\u7fd2", "Keras"]}