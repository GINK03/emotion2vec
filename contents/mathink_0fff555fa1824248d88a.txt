{"context": " More than 1 year has passed since last update.\n\n\u307e\u3068\u3081\n\nCoq \u3067 Setoid \u30d9\u30fc\u30b9\u306e\u74b0\u3092\u5b9a\u7fa9\u3057\u305f\u3002\nZ \u304c\u74b0\u3060\u3088\u3063\u3066\u8a00\u3063\u305f\u3002\n\nring \u3068\u304b\u306e\u8a71\u3067\u306f\u306a\u3044\u3002\n\u4f55\u304b tactic \u5b9a\u7fa9\u3057\u305f\u308a\u3068\u304b\u3082\u3057\u3066\u306a\u3044\u3002\n\u8a3c\u660e\u4ed8\u304d\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3053\u3053\u3002\n\n\n\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\n\u74b0\u306f\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u4ee3\u6570\u7cfb\u3067\u3059\u3002\n\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u9806\u756a\u3067\u5fc5\u8981\u306a\u9053\u5177\u3092\u69cb\u6210\u3057\u3066\u3044\u304d\u3001\u6700\u5f8c\u306b\u74b0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\nSetoid \u3068\u305d\u306e\u9593\u306e\u5c04 Map\n\n\u4e8c\u9805\u6f14\u7b97 Binop\n\n\u30e2\u30ce\u30a4\u30c9\n\u7fa4\n\u74b0\n\n\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u6027\u8cea\u306f\u3001\u305d\u308c\u3092\u5fc5\u8981\u3068\u3059\u308b\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u76f4\u524d\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nGeneralizable All Variables.\n\nRequire Export Basics Tactics Coq.Setoids.Setoid Morphisms.\n\n\u307e\u305f\u3001\u4ee5\u964d\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u304a\u3051\u308b\n\nExisting Instance\nCoercion\n\nClass \u306e\u4e2d\u306e :>\n\n\n\u306f\u3001\u66f8\u304b\u306a\u3044\u3068\u8d85\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u5fd8\u308c\u305a\u306b\u8a18\u8ff0\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\nSetoid & Map\n\nSetoid \u3068 Map \u306e\u5b9a\u7fa9\u306f\u3001\u57fa\u672c\u7684\u306b\u3053\u308c\u307e\u3067\u79c1\u304c\u66f8\u3044\u3066\u304d\u305f\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u56de\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a18\u4e8b\u3092\u66f8\u304f\u6642\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u3044\u306a\u3044\u306e\u306f\u3001\u3053\u3046\u3044\u3046\u6642\u306f\u4e38\u3054\u3068\u66f8\u3044\u3066\u3042\u308b\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3001\u3068\u8003\u3048\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\nSetoid \u306f\u3001\u540c\u5024\u95a2\u4fc2\u3092\u7b49\u4fa1\u6027\u3068\u898b\u505a\u3057\u305f\u578b\u3002\nStructure Setoid :=\n  {\n    carrier:> Type;\n    equal: relation carrier;\n\n    prf_Setoid:> Equivalence equal\n  }.\nExisting Instance prf_Setoid.\nNotation Setoid_of eq := (@Build_Setoid _ eq _).\n\nNotation \"(== :> S )\" := (equal (s:=S)).\nNotation \"(==)\" := (== :> _).\nNotation \"x == y\" := (equal x y) (at level 70, no associativity).\nNotation \"x == y :> S\" := (equal (s:=S) x y)\n  (at level 70, y at next level, no associativity).\n\nMap \u306f\u3001Setoid \u306e\u9593\u306e\u30e2\u30eb\u30d5\u30a3\u30ba\u30e0\u3067\u3059\u3002\n\u7b49\u4fa1\u6027\u3092\u4fdd\u5b58\u3059\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3061\u307e\u3059\u3002\nClass isMap (X Y: Setoid)(f: X -> Y) :=\n  map_subst:> Proper ((==) ==> (==)) f.\n\nStructure Map (X Y: Setoid) :=\n  {\n    map_body:> X -> Y;\n\n    prf_Map:> isMap map_body\n  }.\nExisting Instance prf_Map.\nNotation makeMap f := (@Build_Map _ _ f _).\nNotation \"[ x .. y :-> p ]\" := \n  (makeMap (fun x => .. (makeMap (fun y => p)) ..))\n    (at level 200, x binder, y binder, right associativity,\n     format \"'[' [ x .. y :-> '/ ' p ] ']'\").\n\nProper \u306f\u3001\u95a2\u4fc2\u3092\u4fdd\u5b58\u3059\u308b\u6f14\u7b97\u306a\u3069\u306b\u4f7f\u3046\u65e2\u6210\u306e\u578b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u8a3c\u660e\u3067 rewrite \u304c\u4f7f\u3048\u308b\u306e\u3067\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f A Gentle Introduction to Type Classes and Relations in Coq. \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n\u4e8c\u9805\u6f14\u7b97\n\u6b21\u306b\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e8c\u9805\u6f14\u7b97\u3067\u3059\u3002\u30e2\u30ce\u30a4\u30c9\u3082\u7fa4\u3082\u74b0\u3082\u3001\u5168\u3066\u30de\u30b0\u30de\u3067\u3059\u304b\u3089\u3001\u4e8c\u9805\u6f14\u7b97\u304c\u306a\u3051\u308c\u3070\u8a71\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\nMap \u3092\u4f7f\u3063\u3066\u4e8c\u9805\u6f14\u7b97\u3092\u69cb\u6210\u3067\u304d\u306a\u304f\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u898b\u305f\u76ee\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u65b0\u305f\u306b Binop \u578b\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\nMap \u3068\u540c\u69d8\u306b\u3001\u7b49\u4fa1\u6027\u3001\u3059\u306a\u308f\u3061\u540c\u5024\u95a2\u4fc2\u3092\u4fdd\u5b58\u3059\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3061\u307e\u3059\u3002\nClass isBinop (X: Setoid)(op: X -> X -> X) :=\n  binop_subst:> Proper ((==) ==> (==) ==> (==)) op.\n\nStructure Binop (X: Setoid) :=\n  {\n    binop:> X -> X -> X;\n    prf_Binop:> isBinop binop\n  }.\nExisting Instance prf_Binop.\n\n\u3053\u3053\u3067\u3082 Proper \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30d3\u30ce\u30c3\u30d7\u3002\n\n\u30e2\u30ce\u30a4\u30c9\n\u30e2\u30ce\u30a4\u30c9\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6301\u3064 Setoid \u3067\u3001\u305d\u306e\u4e8c\u9805\u6f14\u7b97\u304c\n\n\u7d50\u5408\u5f8b\u3092\u6e80\u305f\u3059\n\u5358\u4f4d\u5143\u3092\u6301\u3064\n\n\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u3067\u3059\u3002\n\u3053\u308c\u3089\u306e\u6027\u8cea\u3092\u8868\u3059\u547d\u984c\u306f\u3001\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u578b\u30af\u30e9\u30b9\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\nClass Associative `(op: Binop X): Prop :=\n  associative:>\n    forall (x y z: X), op x (op y z) == op (op x y) z.\n\nClass LIdentical `(op: Binop X)(e: X): Prop :=\n  left_identical:> forall x: X, op e x == x.\n\nClass RIdentical `(op: Binop X)(e: X): Prop :=\n  right_identical:> forall x: X, op x e == x.\n\nClass Identical `(op: Binop X)(e: X): Prop :=\n  {\n    identical_l:> LIdentical op e;\n    identical_r:> RIdentical op e\n  }.\nExisting Instance identical_l.\nExisting Instance identical_r.\nCoercion identical_l: Identical >-> LIdentical.\nCoercion identical_r: Identical >-> RIdentical.\n\n\u305d\u3057\u3066\u3001\u30e2\u30ce\u30a4\u30c9\u306e\u898f\u5247\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u3057\u3066 Monoid \u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nClass \u3068 Structure \u3068 Module \u306e\u4f7f\u3044\u65b9\u306f\u3001\u8aad\u3081\u3070\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3059(\u4e00\u65e5\u3076\u308a\u4e8c\u5ea6\u76ee)\u3002\nModule Monoid.\n  Class spec (M: Setoid)(op: Binop M)(e: M) :=\n    proof {\n        associative:> Associative op;\n        identical:> Identical op e\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n\n        prf: spec op e\n      }.\n\n  Module Ex.\n    Existing Instance associative.\n    Existing Instance identical.\n    Existing Instance prf.\n\n    Notation isMonoid := spec.\n    Notation Monoid := type.\n\n    Coercion associative: isMonoid >-> Associative.\n    Coercion identical: isMonoid >-> Identical.\n    Coercion carrier: Monoid >-> Setoid.\n    Coercion prf: Monoid >-> isMonoid.\n\n    Delimit Scope monoid_scope with monoid.\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): monoid_scope.\n    Notation \"'1'\" := (e _): monoid_scope.\n  End Ex.\n\nEnd Monoid.\nExport Monoid.Ex.\n\n\u6ce8\u610f\u3059\u3079\u304d\u306f Module Ex. \u5185\u306b\u304a\u3051\u308b\u4e8c\u9805\u6f14\u7b97\u306e\u305f\u3081\u306b\u5b9a\u7fa9\u3057\u305f\u8a18\u6cd5\u3067\u3059\u3002\n\u30e2\u30ce\u30a4\u30c9\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u305d\u308c\u3092\u3069\u3046\u8868\u8a18\u3059\u308b\u304b\u306f\u5834\u5408\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\n\u4e00\u7a2e\u985e\u306e\u30e2\u30ce\u30a4\u30c9\u306e\u307f\u3092\u8003\u3048\u3066\u3044\u308b\u3068\u304d\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4f8b\u3048\u3070\u534a\u74b0\u3092\u8003\u3048\u308b\u3068\u304d\u306f\u4e8c\u7a2e\u985e\u306e\u30e2\u30ce\u30a4\u30c9(\u52a0\u6cd5\u3068\u4e57\u6cd5)\u3092\u540c\u6642\u306b\u8003\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u4e00\u3064\u306e\u8a18\u6cd5\u3067\u306f\u307e\u304b\u306a\u3044\u304d\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3046\u3044\u3063\u305f\u4e8b\u614b\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3001monoid_scope \u306b\u65bc\u3044\u3066\u306e\u307f\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u964d\u3001\u7fa4\u3084\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u3082\u540c\u69d8\u306e\u898f\u7d04\u306b\u5247\u308a\u307e\u3059\u3001\n\n\u7fa4\n\u7fa4\u306f\u3001\u4efb\u610f\u306e\u5143\u304c\u9006\u5143\u3092\u6301\u3064\u30e2\u30ce\u30a4\u30c9\u3067\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u3001\u307e\u305a\u306f\u300c\u9006\u5143\u3092\u6301\u3064\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u578b\u30af\u30e9\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u300c\u9006\u5143\u3092\u6301\u3064\u300d\u3068\u3044\u3046\u8a00\u660e\u3092\u300c\u9006\u5143\u3092\u4e0e\u3048\u308b Map \u304c\u5b58\u5728\u3059\u308b\u300d\u306b\u8aad\u307f\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\nClass LInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  left_invertible:>\n    forall (x: X), op (inv x) x == e.\n\nClass RInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  right_invertible:>\n    forall (x: X), op x (inv x) == e.\n\nClass Invertible `{Identical X op e}(inv: Map X X): Prop :=\n  {\n    invertible_l:> LInvertible inv;\n    invertible_r:> RInvertible inv\n  }.\nCoercion invertible_l: Invertible >-> LInvertible.\nCoercion invertible_r: Invertible >-> RInvertible.\n\n\u9006\u5143\u306b\u306f\u5de6\u9006\u5143\u3068\u53f3\u9006\u5143\u304c\u5b58\u5728\u3057\u3001\u305d\u308c\u3089\u304c\u4e00\u81f4\u3059\u308b\u3068\u304d\u306b\u306e\u307f\u300c\u9006\u5143\u300d\u3068\u7701\u7565\u3057\u3066\u547c\u3076\u306e\u3067\u3057\u305f\u3002\n\u4e0a\u8ff0\u306e\u5b9a\u7fa9\u3082\u305d\u306e\u5f62\u5f0f\u306b\u5023\u3063\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u3068\u3081\u3066\u5b9a\u7fa9\u3057\u3066\u3082\u3001\u5de6\u3068\u53f3\u306e\u533a\u5225\u3092\u3059\u308b\u4e88\u5b9a\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u597d\u307f\u306e\u554f\u984c\u3067\u3059\u3002\n\u3055\u3066\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u4f7f\u3044\u7fa4\u306e\u578b Group \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u6d41\u308c\u306f Monoid \u306e\u6642\u3068\u540c\u3058\u3067\u3059\u3002\nModule Group.\n  Class spec (G: Setoid)(op: Binop G)(e: G)(inv: Map G G) :=\n    proof {\n        is_monoid:> isMonoid op e;\n        invertible: Invertible inv\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n        inv: Map carrier carrier;\n\n        prf: spec op e inv\n      }.\n\n  Module Ex.\n    Existing Instance is_monoid.\n    Existing Instance invertible.\n    Existing Instance prf.\n\n    Notation isGroup := spec.\n    Notation Group := type.\n\n    Coercion is_monoid: isGroup >-> isMonoid.\n    Coercion invertible: isGroup >-> Invertible.\n    Coercion carrier: Group >-> Setoid.\n    Coercion prf: Group >-> isGroup.\n\n    Delimit Scope group_scope with group.\n\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): group_scope.\n    Notation \"'1'\" := (e _): group_scope.\n    Notation \"x ^-1\" := (inv _ x) (at level 20, left associativity): group_scope.\n  End Ex.\nExport Group.Ex.\n\n\u3053\u308c\u3067\u7fa4\u306e\u5b9a\u7fa9\u307e\u3067\u7d42\u308f\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u74b0\u306e\u5b9a\u7fa9\u306b\u81e8\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u74b0\n\u74b0\u306f\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\u3067\u3042\u308a\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u4ee3\u6570\u7cfb\u3067\u3059\u3002\n\u66f4\u306b\u3001\u52a0\u6cd5\u3068\u4e57\u6cd5\u306e\u9593\u306b\u306f\u5206\u914d\u5f8b\u304c\u6210\u7acb\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u53ef\u63db\u5f8b\u3068\u5206\u914d\u5f8b\u3092\u8868\u3059\u578b\u30af\u30e9\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\nClass Commute `(op: Binop X): Prop :=\n  commute:>\n    forall a b, op a b == op b a.\n\nClass Distributive (X: Setoid)(add mul: Binop X) :=\n  {\n    distributive_l:>\n      forall a b c, mul a (add b c) = add (mul a b) (mul a c);\n\n    distributive_r:>\n      forall a b c, mul (add a b) c = add (mul a c) (mul b c)\n  }.\n\n\u5206\u914d\u5f8b\u306f\u3001\u4e8c\u3064\u306e\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u6027\u8cea\u3060\u3068\u3044\u3046\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u3053\u3053\u3067\u306f\u9006\u5143\u306e\u6642\u3068\u9055\u3044\u3001\u4e8c\u3064\u306e\u6027\u8cea\u3092\u4e00\u3064\u306e\u578b\u30af\u30e9\u30b9\u306b\u53ce\u3081\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3082\u5206\u3051\u3066\u66f8\u3044\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u8a3c\u660e\u6642\u306e\u30b5\u30d6\u30b4\u30fc\u30eb\u306e\u751f\u6210\u306e\u3055\u308c\u65b9\u304c\u5c11\u3057\u5909\u308f\u308b\u3060\u3051\u3067\u3059\u3002\n\u6027\u8cea\u306e\u8a18\u8ff0\u304c\u6e08\u3093\u3060\u306e\u3067\u3001\u74b0\u306e\u578b Ring \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nModule Ring.\n  Class spec (R: Setoid)(add: Binop R)(z: R)(inv: Map R R)(mul: Binop R)(e: R) :=\n    proof {\n        add_group: isGroup add z inv;\n        add_commute: Commute add;\n        mul_monoid: isMonoid mul e;\n\n        distributive: Distributive add mul\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n\n        add: Binop carrier;\n        z: carrier;\n        inv: Map carrier carrier;\n\n        mul: Binop carrier;\n        e: carrier;\n\n        prf: spec add z inv mul e\n      }.\n\n  Module Ex.\n    Existing Instance add_group.\n    Existing Instance add_commute.\n    Existing Instance mul_monoid.\n    Existing Instance distributive.\n    Existing Instance prf.\n\n    Notation isRing := spec.\n    Notation Ring := type.\n\n    Coercion add_group: isRing >-> isGroup.\n    Coercion add_commute: isRing >-> Commute.\n    Coercion mul_monoid: isRing >-> isMonoid.\n    Coercion distributive: isRing >-> Distributive.\n    Coercion carrier: Ring >-> Setoid.\n    Coercion prf: Ring >-> isRing.\n\n    Delimit Scope ring_scope with rng.\n\n    Notation \"x + y\" := (add _ x y): ring_scope.\n    Notation \"x * y\" := (mul _ x y): ring_scope.\n    Notation \"'0'\" := (z _): ring_scope.\n    Notation \"x ^-1\" := (inv _ x) (at level 20, left associativity): ring_scope.\n    Notation \"'1'\" := (e _): ring_scope.\n  End Ex.\n  Import Ex.\n\n  Definition add_id_l {R: Ring}(x: R) := (@left_identical R (add R) (z R) (add_group (spec:=R)) x).\n  Definition add_id_r {R: Ring}(x: R) := (@right_identical R (add R) (z R) (add_group (spec:=R)) x).\n  Definition add_inv_l {R: Ring}(x: R) := (@left_invertible R (add R) (z R) (add_group (spec:=R)) (inv R) (add_group (spec:=R)) x).\n  Definition add_inv_r {R: Ring}(x: R) := (@right_invertible R (add R) (z R) (add_group (spec:=R)) (inv R) (add_group (spec:=R)) x).\n  Definition mul_id_l {R: Ring}(x: R) := (@left_identical R (mul R) (e R) (mul_monoid (spec:=R)) x).\n  Definition mul_id_r {R: Ring}(x: R) := (@right_identical R (mul R) (e R) (mul_monoid (spec:=R)) x).\nEnd Ring.\nExport Ring.Ex.\nCoercion Ring.group: Ring >-> Group.\nCoercion Ring.monoid: Ring >-> Monoid.\n\n\u3055\u3066\u3001\u5148\u7a0b\u307e\u3067\u306e\u4f8b\u3068\u9055\u3046\u306e\u306f Module Ex. \u306e\u5f8c\u306b\u3001\u5e7e\u3064\u304b\u306e\u5b9a\u7fa9\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u308c\u3089\u306f\u3001\u6f14\u7b97\u306e\u5358\u4f4d\u5143\u306a\u3069\u306b\u95a2\u3059\u308b\u6027\u8cea\u306b\u3064\u3044\u3066\u306e\u66d6\u6627\u6027\u3092\u9664\u53bb\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u52a0\u6cd5\u3068\u4e57\u6cd5\u306e\u3069\u3061\u3089\u3082\u30e2\u30ce\u30a4\u30c9\u3067\u3059\u304b\u3089\u3001\u4e21\u8005\u5171\u306b\u5358\u4f4d\u5143\u3092\u6301\u3061\u3001\u5358\u4f4d\u5143\u306b\u3064\u3044\u3066\u306e\u6027\u8cea\u3001\u4f8b\u3048\u3070 e\u2217x==xe\u2217x==xe * x == x \u304c\u6210\u308a\u7acb\u3061\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u4f55\u3082\u305b\u305a\u306b\u8a3c\u660e\u306b\u304a\u3044\u3066\u3053\u306e\u6027\u8cea\u3092\u5229\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u5358\u4f4d\u5143\u5f8b\u304c\u3069\u3061\u3089\u306e\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u306e\u3082\u306e\u306a\u306e\u304b Coq \u306b\u306f\u5224\u65ad\u304c\u4ed8\u304b\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u751f\u3058\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b Module Ring. \u306e\u4e2d\u3067\u3042\u3089\u304b\u3058\u3081\u305d\u308c\u305e\u308c\u306e\u6027\u8cea\u306b\u500b\u5225\u306e\u540d\u524d\u3092\u5272\u308a\u5f53\u3066\u3066\u304a\u304d\u3001\u5f8c\u3005\u5229\u7528\u3059\u308b\u969b\u306b Ring.add_id_l \u3068\u3044\u3046\u66d6\u6627\u3055\u306e\u306a\u3044\u5f62\u5f0f\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u74b0\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6b8b\u308a\u306f Coq \u3067\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b Z \u304c\u3053\u3053\u3067\u306e Ring \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u7d42\u308f\u308a\u3068\u3057\u307e\u3059\u3002\n\nZ \u306f\u74b0\n\n\u4e0b\u6e96\u5099\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea ZArith \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066 Z_scope \u3092\u958b\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068\u6570\u5b57\u5217\u3092 Z \u578b\u306e\u6570\u3068\u8a8d\u8b58\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\nRequire Import ZArith.\nOpen Scope Z_scope.\n\n\u307e\u305f\u3001Coq \u306e Z \u306f positive \u578b\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u305f\u3002\nPrint Z.\n(* Inductive Z : Set :=  Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z *)\n\n(* For Zpos: Argument scope is [positive_scope] *)\n(* For Zneg: Argument scope is [positive_scope] *)\n\n\u305d\u306e\u305f\u3081\u3001\u4ee5\u964d\u3067\u306f\u5c11\u3057\u3060\u3051 positive \u304c\u9854\u3092\u8997\u304b\u305b\u307e\u3059\u3002\n\u306a\u304a\u3001\u305d\u308c\u306b\u9650\u3089\u305a\u5168\u3066\u306e\u8a3c\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u306e URL \u306f\u4e0a\u8ff0\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f positive \u3068 Z \u3092 eq \u306b\u3088\u308b Setoid \u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nCanonical Structure positive_setoid := Setoid_of (@eq positive).\nCanonical Structure Z_setoid := Setoid_of (@eq Z).\n\n\u6b21\u306b\u884c\u3046\u306e\u306f\u3001 Z \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3042\u308b Zneg \u3068 Zpos \u304c\u4e0a\u8a18\u306e\u4e8c\u3064\u306e Setoid \u9593\u306e\u7b49\u4fa1\u6027\u3092\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u306e\u4fdd\u8a3c\u3067\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068 Zneg p \u306e p \u306b\u95a2\u3059\u308b rewrite \u306b\u3088\u308b\u4ee3\u5165\u306a\u3069\u304c\u51fa\u6765\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nInstance Zneg_Proper : Proper ((==:>positive_setoid) ==> ((==:>Z_setoid))) Zneg.\n\nInstance Zpos_Proper : Proper ((==:>positive_setoid) ==> ((==:>Z_setoid))) Zpos.\n\nMap \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u3000Proper \u3067\u3055\u3048\u3042\u308c\u3070\u4ee3\u5165\u306b\u652f\u969c\u306f\u306a\u3044\u306e\u3067\u3001\u7c21\u5358\u306e\u305f\u3081\u3001\u3053\u308c\u3060\u3051\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\n\u6b21\u306b\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u7fa4\u3068\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u53ef\u63db\u6027\u306b\u3064\u3044\u3066\u3082\u3053\u3053\u3067\u793a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u624b\u9806\u306f\n\n\nZplus \u304c Binop \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nZplus \u3068 0 \u304c Monoid \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nZopp \u304c Z_setoid \u304b\u3089 Z_setoid \u3078\u306e Map \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nZplus,Zopp,0 \u304c\u7fa4\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nZplus \u306e\u53ef\u63db\u6027\u3092\u793a\u3059\u3002\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n(* Group of '+' *)\nProgram Instance Zplus_is_binop: isBinop (X:=Z_setoid) Zplus.\nCanonical Structure Zplus_binop := Build_Binop Zplus_is_binop.\n\nProgram Instance Zplus_is_monoid: isMonoid Zplus_binop 0.\nCanonical Structure Zplus_monoid := Monoid.make Zplus_is_monoid.\n\nProgram Instance Zinv_is_map: isMap (X:=Z_setoid) Zopp.\nCanonical Structure Zinv_map: Map Z_setoid Z_setoid := Build_Map Zinv_is_map.\n\nProgram Instance Zplus_is_group: isGroup Zplus_binop 0 Zinv_map.\nCanonical Structure Zgroup_monoid := Group.make Zplus_is_group.\n\nProgram Instance Zplus_commute: Commute Zplus_binop.\n\n\n\u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\n\u52a0\u6cd5\u3068\u540c\u69d8\u306b\u4e57\u6cd5\u306b\u3064\u3044\u3066\u3082\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u5148\u7a0b\u3088\u308a\u306f\u5927\u5206\u5358\u7d14\u3067\u3059\u3002\n\n\nZmult \u304c Binop \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\nZmult \u3068 1 \u304c Monoid \u3092\u69cb\u6210\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\n\u3068\u3044\u3046\u9806\u756a\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n(* Monoid of '*' *)\nInstance Zmult_is_binop: isBinop (X:=Z_setoid) Zmult.\nCanonical Structure Zmult_binop := Build_Binop Zmult_is_binop.\n\nProgram Instance Zmult_is_monoid: isMonoid Zmult_binop 1.\nCanonical Structure Zmult_monoid := Monoid.make Zmult_is_monoid.\n\n\nZ \u306f\u74b0\u306b\u306a\u308b\n\u6700\u5f8c\u306b\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u4f7f\u3063\u3066 Z \u304c Ring \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u53ef\u63db\u6027\u306f\u8a3c\u660e\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u6b8b\u308a\u306f\u5206\u914d\u5f8b\u306e\u8a3c\u660e\u3060\u3051\u3068\u306a\u308a\u307e\u3059(\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c)\u3002\n(* Ring of '+' & '*' *)\nProgram Instance Z_is_ring: isRing Zplus_binop 0 Zinv_map Zmult_binop 1.\nCanonical Structure Z_ring := Ring.make Z_is_ring.\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u5f8c\u306f\u304b\u306a\u308a\u5358\u7d14\u306a\u4f5c\u696d\u3067\u3057\u305f\u304c\u3001\u70ba\u3059\u3079\u304d\u306f\u70ba\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u3001\u5c11\u3057\u3060\u3051\u8a08\u7b97\u306e\u4f8b\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u8a66\u3059\n\u3068\u3044\u3046\u3053\u3068\u3067 Z \u304c\u74b0\u3060\u3068\u793a\u305b\u307e\u3057\u305f\u304b\u3089\u3001\u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306f Z_ring \u306b\u306a\u3063\u3066\nCompute (1 * 2 + 3).\n     (* = 5 *)\n     (* : Z *)\n\n\u307e\u305b\u3093\u306d\u3002\n\u3069\u3046\u3057\u3066\u3067\u3057\u3087\u3046\u3002\n\u7b54\u3048\u306f\u7c21\u5358\u3001+ \u3068\u304b * \u306f\u5143\u304b\u3089 Z \u306e\u305f\u3081\u306e\u8a18\u6cd5\u3068\u3057\u3066\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u305d\u3063\u3061\u304c\u4f7f\u308f\u308c\u3061\u3083\u3063\u305f\u3093\u3060\uff01\u307e\u3044\u3063\u305f\u306d\uff01\n\u3068\u304b\u8a00\u3063\u3066\u3082\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3061\u3083\u3093\u3068\u3084\u308a\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f ring_scope \u3092\u958b\u304d\u307e\u3059\u3002\u305d\u3082\u305d\u3082 Ring \u7528\u306e\u8a18\u6cd5\u306f\u3053\u3053\u3067\u3057\u304b\u901a\u7528\u3057\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u958b\u3044\u3066\u306a\u3044\u72b6\u614b\u3058\u3083\u4e0a\u624b\u304f\u3044\u304f\u306f\u305a\u3082\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nOpen Scope ring_scope.\n\n\u3055\u3066\u3001\u6e96\u5099\u306f\u7d42\u308f\u3063\u305f\u306e\u3067\u540c\u3058\u898b\u305f\u76ee\u306e\u8a08\u7b97\u3092\u3057\u3066\u307f\u308b\u3068\u3001\nCompute (1 * 2 + 3).\n     (* = 5 *)\n     (* : Z_ring *)\n\n\u306f\u3044\u3001\u6b63\u3057\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8fd4\u308a\u5024\u304c Z_ring \u3068\u3044\u3046\u3053\u3068\u306f\u3001\u4eca\u56de\u5b9a\u7fa9\u3057\u305f\u74b0\u3001 Ring \u306e\u4e0a\u3067\u306e\u8a08\u7b97\u3068\u3057\u3066\u6271\u308f\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3088\u304b\u3063\u305f\u3088\u304b\u3063\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001 Unset Printing Notations. \u3057\u305f\u4e0a\u3067\u305d\u308c\u305e\u308c\u306e\u5f0f\u3092 Check \u3059\u308b\u3068\ncoq:\nCheck (1 * 2 + 3).\n(* Z.add (Z.mul (Zpos xH) (Zpos (xO xH))) (Zpos (xI xH)) *)\n(*      : Z *)\n\n\u3068\nCheck (1 * 2 + 3).\n(* (Ring.add Z_ring) ((Ring.mul Z_ring) (Ring.e Z_ring) (Zpos (xO xH))) *)\n(*   (Zpos (xI xH)) *)\n(*      : Z_ring *)\n\n\u306b\u306a\u308a\u3001\u5b9f\u969b\u306b\u9805\u306e\u5f62\u3067\u4ee5\u3066\u305d\u306e\u4e8b\u5b9f\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5192\u982d\u306e\u30ea\u30f3\u30af\u304b\u3089\u8a3c\u660e\u4ed8\u304d\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f\u305d\u308c\u3092\u30b3\u30d4\u30da\u3057\u3066\u8272\u3005\u8a08\u7b97\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n# \u307e\u3068\u3081\n\n* Coq \u3067 Setoid \u30d9\u30fc\u30b9\u306e\u74b0\u3092\u5b9a\u7fa9\u3057\u305f\u3002\n* Z \u304c\u74b0\u3060\u3088\u3063\u3066\u8a00\u3063\u305f\u3002\n* `ring` \u3068\u304b\u306e\u8a71\u3067\u306f\u306a\u3044\u3002\n* \u4f55\u304b tactic \u5b9a\u7fa9\u3057\u305f\u308a\u3068\u304b\u3082\u3057\u3066\u306a\u3044\u3002\n* \u8a3c\u660e\u4ed8\u304d\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f[\u3053\u3053](https://gist.github.com/mathink/0ea25146eb113d6942e2)\u3002\n\n\n# \u74b0\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u74b0\u306f\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u4ee3\u6570\u7cfb\u3067\u3059\u3002\n\n\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u9806\u756a\u3067\u5fc5\u8981\u306a\u9053\u5177\u3092\u69cb\u6210\u3057\u3066\u3044\u304d\u3001\u6700\u5f8c\u306b\u74b0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n* `Setoid` \u3068\u305d\u306e\u9593\u306e\u5c04 `Map`\n* \u4e8c\u9805\u6f14\u7b97 `Binop`\n* \u30e2\u30ce\u30a4\u30c9\n* \u7fa4\n* \u74b0\n\n\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u6027\u8cea\u306f\u3001\u305d\u308c\u3092\u5fc5\u8981\u3068\u3059\u308b\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u76f4\u524d\u3067\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nGeneralizable All Variables.\n\nRequire Export Basics Tactics Coq.Setoids.Setoid Morphisms.\n```\n\n\u307e\u305f\u3001\u4ee5\u964d\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u304a\u3051\u308b\n\n* `Existing Instance`\n* `Coercion`\n* `Class` \u306e\u4e2d\u306e `:>`\n\n\u306f\u3001\u66f8\u304b\u306a\u3044\u3068\u8d85\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u5fd8\u308c\u305a\u306b\u8a18\u8ff0\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n## `Setoid` & `Map`\n\nSetoid \u3068 Map \u306e\u5b9a\u7fa9\u306f\u3001\u57fa\u672c\u7684\u306b\u3053\u308c\u307e\u3067\u79c1\u304c\u66f8\u3044\u3066\u304d\u305f\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u56de\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a18\u4e8b\u3092\u66f8\u304f\u6642\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u3044\u306a\u3044\u306e\u306f\u3001\u3053\u3046\u3044\u3046\u6642\u306f\u4e38\u3054\u3068\u66f8\u3044\u3066\u3042\u308b\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3001\u3068\u8003\u3048\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n`Setoid` \u306f\u3001\u540c\u5024\u95a2\u4fc2\u3092\u7b49\u4fa1\u6027\u3068\u898b\u505a\u3057\u305f\u578b\u3002\n\n```coq:\nStructure Setoid :=\n  {\n    carrier:> Type;\n    equal: relation carrier;\n\n    prf_Setoid:> Equivalence equal\n  }.\nExisting Instance prf_Setoid.\nNotation Setoid_of eq := (@Build_Setoid _ eq _).\n\nNotation \"(== :> S )\" := (equal (s:=S)).\nNotation \"(==)\" := (== :> _).\nNotation \"x == y\" := (equal x y) (at level 70, no associativity).\nNotation \"x == y :> S\" := (equal (s:=S) x y)\n  (at level 70, y at next level, no associativity).\n```\n\nMap \u306f\u3001Setoid \u306e\u9593\u306e\u30e2\u30eb\u30d5\u30a3\u30ba\u30e0\u3067\u3059\u3002\n\u7b49\u4fa1\u6027\u3092\u4fdd\u5b58\u3059\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3061\u307e\u3059\u3002\n\n```coq:\nClass isMap (X Y: Setoid)(f: X -> Y) :=\n  map_subst:> Proper ((==) ==> (==)) f.\n\nStructure Map (X Y: Setoid) :=\n  {\n    map_body:> X -> Y;\n\n    prf_Map:> isMap map_body\n  }.\nExisting Instance prf_Map.\nNotation makeMap f := (@Build_Map _ _ f _).\nNotation \"[ x .. y :-> p ]\" := \n  (makeMap (fun x => .. (makeMap (fun y => p)) ..))\n    (at level 200, x binder, y binder, right associativity,\n     format \"'[' [ x .. y :-> '/ ' p ] ']'\").\n```\n\n`Proper` \u306f\u3001\u95a2\u4fc2\u3092\u4fdd\u5b58\u3059\u308b\u6f14\u7b97\u306a\u3069\u306b\u4f7f\u3046\u65e2\u6210\u306e\u578b\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u8a3c\u660e\u3067 `rewrite` \u304c\u4f7f\u3048\u308b\u306e\u3067\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f [A Gentle Introduction to Type Classes and Relations in Coq.](http://www.labri.fr/perso/casteran/CoqArt/TypeClassesTut/typeclassestut.pdf) \u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n## \u4e8c\u9805\u6f14\u7b97\n\n\u6b21\u306b\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e8c\u9805\u6f14\u7b97\u3067\u3059\u3002\u30e2\u30ce\u30a4\u30c9\u3082\u7fa4\u3082\u74b0\u3082\u3001\u5168\u3066\u30de\u30b0\u30de\u3067\u3059\u304b\u3089\u3001\u4e8c\u9805\u6f14\u7b97\u304c\u306a\u3051\u308c\u3070\u8a71\u304c\u59cb\u307e\u308a\u307e\u305b\u3093\u3002\n`Map` \u3092\u4f7f\u3063\u3066\u4e8c\u9805\u6f14\u7b97\u3092\u69cb\u6210\u3067\u304d\u306a\u304f\u3082\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u898b\u305f\u76ee\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u65b0\u305f\u306b `Binop` \u578b\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\n\n`Map` \u3068\u540c\u69d8\u306b\u3001\u7b49\u4fa1\u6027\u3001\u3059\u306a\u308f\u3061\u540c\u5024\u95a2\u4fc2\u3092\u4fdd\u5b58\u3059\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3061\u307e\u3059\u3002\n\n```coq:\nClass isBinop (X: Setoid)(op: X -> X -> X) :=\n  binop_subst:> Proper ((==) ==> (==) ==> (==)) op.\n\nStructure Binop (X: Setoid) :=\n  {\n    binop:> X -> X -> X;\n    prf_Binop:> isBinop binop\n  }.\nExisting Instance prf_Binop.\n```\n\n\u3053\u3053\u3067\u3082 `Proper` \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30d3\u30ce\u30c3\u30d7\u3002\n\n## \u30e2\u30ce\u30a4\u30c9\n\n\u30e2\u30ce\u30a4\u30c9\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6301\u3064 Setoid \u3067\u3001\u305d\u306e\u4e8c\u9805\u6f14\u7b97\u304c\n\n* \u7d50\u5408\u5f8b\u3092\u6e80\u305f\u3059\n* \u5358\u4f4d\u5143\u3092\u6301\u3064\n\n\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u3067\u3059\u3002\n\u3053\u308c\u3089\u306e\u6027\u8cea\u3092\u8868\u3059\u547d\u984c\u306f\u3001\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u578b\u30af\u30e9\u30b9\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```coq:\nClass Associative `(op: Binop X): Prop :=\n  associative:>\n    forall (x y z: X), op x (op y z) == op (op x y) z.\n\nClass LIdentical `(op: Binop X)(e: X): Prop :=\n  left_identical:> forall x: X, op e x == x.\n\nClass RIdentical `(op: Binop X)(e: X): Prop :=\n  right_identical:> forall x: X, op x e == x.\n\nClass Identical `(op: Binop X)(e: X): Prop :=\n  {\n    identical_l:> LIdentical op e;\n    identical_r:> RIdentical op e\n  }.\nExisting Instance identical_l.\nExisting Instance identical_r.\nCoercion identical_l: Identical >-> LIdentical.\nCoercion identical_r: Identical >-> RIdentical.\n```\n\n\u305d\u3057\u3066\u3001\u30e2\u30ce\u30a4\u30c9\u306e\u898f\u5247\u3092\u305d\u306e\u307e\u307e\u66f8\u304d\u4e0b\u3057\u3066 `Monoid` \u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`Class` \u3068 `Structure` \u3068 `Module` \u306e\u4f7f\u3044\u65b9\u306f\u3001\u8aad\u3081\u3070\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3059(\u4e00\u65e5\u3076\u308a\u4e8c\u5ea6\u76ee)\u3002\n\n```coq:\nModule Monoid.\n  Class spec (M: Setoid)(op: Binop M)(e: M) :=\n    proof {\n        associative:> Associative op;\n        identical:> Identical op e\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n\n        prf: spec op e\n      }.\n\n  Module Ex.\n    Existing Instance associative.\n    Existing Instance identical.\n    Existing Instance prf.\n\n    Notation isMonoid := spec.\n    Notation Monoid := type.\n\n    Coercion associative: isMonoid >-> Associative.\n    Coercion identical: isMonoid >-> Identical.\n    Coercion carrier: Monoid >-> Setoid.\n    Coercion prf: Monoid >-> isMonoid.\n\n    Delimit Scope monoid_scope with monoid.\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): monoid_scope.\n    Notation \"'1'\" := (e _): monoid_scope.\n  End Ex.\n\nEnd Monoid.\nExport Monoid.Ex.\n```\n\n\u6ce8\u610f\u3059\u3079\u304d\u306f `Module Ex.` \u5185\u306b\u304a\u3051\u308b\u4e8c\u9805\u6f14\u7b97\u306e\u305f\u3081\u306b\u5b9a\u7fa9\u3057\u305f\u8a18\u6cd5\u3067\u3059\u3002\n\u30e2\u30ce\u30a4\u30c9\u306f\u4e8c\u9805\u6f14\u7b97\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u305d\u308c\u3092\u3069\u3046\u8868\u8a18\u3059\u308b\u304b\u306f\u5834\u5408\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u3002\n\u4e00\u7a2e\u985e\u306e\u30e2\u30ce\u30a4\u30c9\u306e\u307f\u3092\u8003\u3048\u3066\u3044\u308b\u3068\u304d\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4f8b\u3048\u3070\u534a\u74b0\u3092\u8003\u3048\u308b\u3068\u304d\u306f\u4e8c\u7a2e\u985e\u306e\u30e2\u30ce\u30a4\u30c9(\u52a0\u6cd5\u3068\u4e57\u6cd5)\u3092\u540c\u6642\u306b\u8003\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u4e00\u3064\u306e\u8a18\u6cd5\u3067\u306f\u307e\u304b\u306a\u3044\u304d\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u3046\u3044\u3063\u305f\u4e8b\u614b\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3001`monoid_scope` \u306b\u65bc\u3044\u3066\u306e\u307f\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u964d\u3001\u7fa4\u3084\u74b0\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u3082\u540c\u69d8\u306e\u898f\u7d04\u306b\u5247\u308a\u307e\u3059\u3001\n\n## \u7fa4\n\n\u7fa4\u306f\u3001\u4efb\u610f\u306e\u5143\u304c\u9006\u5143\u3092\u6301\u3064\u30e2\u30ce\u30a4\u30c9\u3067\u3057\u305f\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u307e\u305a\u306f\u300c\u9006\u5143\u3092\u6301\u3064\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3059\u578b\u30af\u30e9\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u300c\u9006\u5143\u3092\u6301\u3064\u300d\u3068\u3044\u3046\u8a00\u660e\u3092\u300c\u9006\u5143\u3092\u4e0e\u3048\u308b Map \u304c\u5b58\u5728\u3059\u308b\u300d\u306b\u8aad\u307f\u66ff\u3048\u3066\u3044\u307e\u3059\u3002\n\n```coq:\nClass LInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  left_invertible:>\n    forall (x: X), op (inv x) x == e.\n\nClass RInvertible `{Identical X op e}(inv: Map X X): Prop :=\n  right_invertible:>\n    forall (x: X), op x (inv x) == e.\n\nClass Invertible `{Identical X op e}(inv: Map X X): Prop :=\n  {\n    invertible_l:> LInvertible inv;\n    invertible_r:> RInvertible inv\n  }.\nCoercion invertible_l: Invertible >-> LInvertible.\nCoercion invertible_r: Invertible >-> RInvertible.\n```\n\n\u9006\u5143\u306b\u306f\u5de6\u9006\u5143\u3068\u53f3\u9006\u5143\u304c\u5b58\u5728\u3057\u3001\u305d\u308c\u3089\u304c\u4e00\u81f4\u3059\u308b\u3068\u304d\u306b\u306e\u307f\u300c\u9006\u5143\u300d\u3068\u7701\u7565\u3057\u3066\u547c\u3076\u306e\u3067\u3057\u305f\u3002\n\u4e0a\u8ff0\u306e\u5b9a\u7fa9\u3082\u305d\u306e\u5f62\u5f0f\u306b\u5023\u3063\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u3068\u3081\u3066\u5b9a\u7fa9\u3057\u3066\u3082\u3001\u5de6\u3068\u53f3\u306e\u533a\u5225\u3092\u3059\u308b\u4e88\u5b9a\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u597d\u307f\u306e\u554f\u984c\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u4f7f\u3044\u7fa4\u306e\u578b `Group` \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u6d41\u308c\u306f `Monoid` \u306e\u6642\u3068\u540c\u3058\u3067\u3059\u3002\n\n```coq:\nModule Group.\n  Class spec (G: Setoid)(op: Binop G)(e: G)(inv: Map G G) :=\n    proof {\n        is_monoid:> isMonoid op e;\n        invertible: Invertible inv\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n        op: Binop carrier;\n        e: carrier;\n        inv: Map carrier carrier;\n        \n        prf: spec op e inv\n      }.\n\n  Module Ex.\n    Existing Instance is_monoid.\n    Existing Instance invertible.\n    Existing Instance prf.\n\n    Notation isGroup := spec.\n    Notation Group := type.\n\n    Coercion is_monoid: isGroup >-> isMonoid.\n    Coercion invertible: isGroup >-> Invertible.\n    Coercion carrier: Group >-> Setoid.\n    Coercion prf: Group >-> isGroup.\n\n    Delimit Scope group_scope with group.\n\n    Notation \"x * y\" := (op _ x y) (at level 40, left associativity): group_scope.\n    Notation \"'1'\" := (e _): group_scope.\n    Notation \"x ^-1\" := (inv _ x) (at level 20, left associativity): group_scope.\n  End Ex.\nExport Group.Ex.\n```\n\n\u3053\u308c\u3067\u7fa4\u306e\u5b9a\u7fa9\u307e\u3067\u7d42\u308f\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u74b0\u306e\u5b9a\u7fa9\u306b\u81e8\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n## \u74b0\n\n\u74b0\u306f\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\u3067\u3042\u308a\u3001\u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u4ee3\u6570\u7cfb\u3067\u3059\u3002\n\u66f4\u306b\u3001\u52a0\u6cd5\u3068\u4e57\u6cd5\u306e\u9593\u306b\u306f\u5206\u914d\u5f8b\u304c\u6210\u7acb\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u53ef\u63db\u5f8b\u3068\u5206\u914d\u5f8b\u3092\u8868\u3059\u578b\u30af\u30e9\u30b9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```coq:\nClass Commute `(op: Binop X): Prop :=\n  commute:>\n    forall a b, op a b == op b a.\n\nClass Distributive (X: Setoid)(add mul: Binop X) :=\n  {\n    distributive_l:>\n      forall a b c, mul a (add b c) = add (mul a b) (mul a c);\n\n    distributive_r:>\n      forall a b c, mul (add a b) c = add (mul a c) (mul b c)\n  }.\n```\n\n\u5206\u914d\u5f8b\u306f\u3001\u4e8c\u3064\u306e\u4e8c\u9805\u6f14\u7b97\u306b\u95a2\u3059\u308b\u6027\u8cea\u3060\u3068\u3044\u3046\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u3053\u3053\u3067\u306f\u9006\u5143\u306e\u6642\u3068\u9055\u3044\u3001\u4e8c\u3064\u306e\u6027\u8cea\u3092\u4e00\u3064\u306e\u578b\u30af\u30e9\u30b9\u306b\u53ce\u3081\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3082\u5206\u3051\u3066\u66f8\u3044\u3066\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u8a3c\u660e\u6642\u306e\u30b5\u30d6\u30b4\u30fc\u30eb\u306e\u751f\u6210\u306e\u3055\u308c\u65b9\u304c\u5c11\u3057\u5909\u308f\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u6027\u8cea\u306e\u8a18\u8ff0\u304c\u6e08\u3093\u3060\u306e\u3067\u3001\u74b0\u306e\u578b `Ring` \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```coq:\nModule Ring.\n  Class spec (R: Setoid)(add: Binop R)(z: R)(inv: Map R R)(mul: Binop R)(e: R) :=\n    proof {\n        add_group: isGroup add z inv;\n        add_commute: Commute add;\n        mul_monoid: isMonoid mul e;\n\n        distributive: Distributive add mul\n      }.\n\n  Structure type :=\n    make {\n        carrier: Setoid;\n\n        add: Binop carrier;\n        z: carrier;\n        inv: Map carrier carrier;\n\n        mul: Binop carrier;\n        e: carrier;\n\n        prf: spec add z inv mul e\n      }.\n\n  Module Ex.\n    Existing Instance add_group.\n    Existing Instance add_commute.\n    Existing Instance mul_monoid.\n    Existing Instance distributive.\n    Existing Instance prf.\n\n    Notation isRing := spec.\n    Notation Ring := type.\n\n    Coercion add_group: isRing >-> isGroup.\n    Coercion add_commute: isRing >-> Commute.\n    Coercion mul_monoid: isRing >-> isMonoid.\n    Coercion distributive: isRing >-> Distributive.\n    Coercion carrier: Ring >-> Setoid.\n    Coercion prf: Ring >-> isRing.\n\n    Delimit Scope ring_scope with rng.\n\n    Notation \"x + y\" := (add _ x y): ring_scope.\n    Notation \"x * y\" := (mul _ x y): ring_scope.\n    Notation \"'0'\" := (z _): ring_scope.\n    Notation \"x ^-1\" := (inv _ x) (at level 20, left associativity): ring_scope.\n    Notation \"'1'\" := (e _): ring_scope.\n  End Ex.\n  Import Ex.\n\n  Definition add_id_l {R: Ring}(x: R) := (@left_identical R (add R) (z R) (add_group (spec:=R)) x).\n  Definition add_id_r {R: Ring}(x: R) := (@right_identical R (add R) (z R) (add_group (spec:=R)) x).\n  Definition add_inv_l {R: Ring}(x: R) := (@left_invertible R (add R) (z R) (add_group (spec:=R)) (inv R) (add_group (spec:=R)) x).\n  Definition add_inv_r {R: Ring}(x: R) := (@right_invertible R (add R) (z R) (add_group (spec:=R)) (inv R) (add_group (spec:=R)) x).\n  Definition mul_id_l {R: Ring}(x: R) := (@left_identical R (mul R) (e R) (mul_monoid (spec:=R)) x).\n  Definition mul_id_r {R: Ring}(x: R) := (@right_identical R (mul R) (e R) (mul_monoid (spec:=R)) x).\nEnd Ring.\nExport Ring.Ex.\nCoercion Ring.group: Ring >-> Group.\nCoercion Ring.monoid: Ring >-> Monoid.\n```\n\n\u3055\u3066\u3001\u5148\u7a0b\u307e\u3067\u306e\u4f8b\u3068\u9055\u3046\u306e\u306f `Module Ex.` \u306e\u5f8c\u306b\u3001\u5e7e\u3064\u304b\u306e\u5b9a\u7fa9\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u3053\u308c\u3089\u306f\u3001\u6f14\u7b97\u306e\u5358\u4f4d\u5143\u306a\u3069\u306b\u95a2\u3059\u308b\u6027\u8cea\u306b\u3064\u3044\u3066\u306e\u66d6\u6627\u6027\u3092\u9664\u53bb\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u52a0\u6cd5\u3068\u4e57\u6cd5\u306e\u3069\u3061\u3089\u3082\u30e2\u30ce\u30a4\u30c9\u3067\u3059\u304b\u3089\u3001\u4e21\u8005\u5171\u306b\u5358\u4f4d\u5143\u3092\u6301\u3061\u3001\u5358\u4f4d\u5143\u306b\u3064\u3044\u3066\u306e\u6027\u8cea\u3001\u4f8b\u3048\u3070 $e * x == x$ \u304c\u6210\u308a\u7acb\u3061\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u4f55\u3082\u305b\u305a\u306b\u8a3c\u660e\u306b\u304a\u3044\u3066\u3053\u306e\u6027\u8cea\u3092\u5229\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u5358\u4f4d\u5143\u5f8b\u304c\u3069\u3061\u3089\u306e\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u306e\u3082\u306e\u306a\u306e\u304b Coq \u306b\u306f\u5224\u65ad\u304c\u4ed8\u304b\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u751f\u3058\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b `Module Ring.` \u306e\u4e2d\u3067\u3042\u3089\u304b\u3058\u3081\u305d\u308c\u305e\u308c\u306e\u6027\u8cea\u306b\u500b\u5225\u306e\u540d\u524d\u3092\u5272\u308a\u5f53\u3066\u3066\u304a\u304d\u3001\u5f8c\u3005\u5229\u7528\u3059\u308b\u969b\u306b `Ring.add_id_l` \u3068\u3044\u3046\u66d6\u6627\u3055\u306e\u306a\u3044\u5f62\u5f0f\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u74b0\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6b8b\u308a\u306f `Coq` \u3067\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b `Z` \u304c\u3053\u3053\u3067\u306e `Ring` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u7d42\u308f\u308a\u3068\u3057\u307e\u3059\u3002\n\n\n# Z \u306f\u74b0\n\n## \u4e0b\u6e96\u5099\n\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea `ZArith` \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066 `Z_scope` \u3092\u958b\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068\u6570\u5b57\u5217\u3092 `Z` \u578b\u306e\u6570\u3068\u8a8d\u8b58\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\n```coq:\nRequire Import ZArith.\nOpen Scope Z_scope.\n```\n\n\u307e\u305f\u3001Coq \u306e `Z` \u306f `positive` \u578b\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u305f\u3002\n\n```coq:\nPrint Z.\n(* Inductive Z : Set :=  Z0 : Z | Zpos : positive -> Z | Zneg : positive -> Z *)\n\n(* For Zpos: Argument scope is [positive_scope] *)\n(* For Zneg: Argument scope is [positive_scope] *)\n```\n\n\u305d\u306e\u305f\u3081\u3001\u4ee5\u964d\u3067\u306f\u5c11\u3057\u3060\u3051 `positive` \u304c\u9854\u3092\u8997\u304b\u305b\u307e\u3059\u3002\n\u306a\u304a\u3001\u305d\u308c\u306b\u9650\u3089\u305a\u5168\u3066\u306e\u8a3c\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u306e URL \u306f\u4e0a\u8ff0\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f `positive` \u3068 `Z` \u3092 `eq` \u306b\u3088\u308b `Setoid` \u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nCanonical Structure positive_setoid := Setoid_of (@eq positive).\nCanonical Structure Z_setoid := Setoid_of (@eq Z).\n```\n\n\u6b21\u306b\u884c\u3046\u306e\u306f\u3001 `Z` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3042\u308b `Zneg` \u3068 `Zpos` \u304c\u4e0a\u8a18\u306e\u4e8c\u3064\u306e `Setoid` \u9593\u306e\u7b49\u4fa1\u6027\u3092\u4fdd\u5b58\u3057\u3066\u3044\u308b\u3053\u3068\u306e\u4fdd\u8a3c\u3067\u3059\u3002\n\u305d\u3046\u3057\u306a\u3044\u3068 `Zneg p` \u306e `p` \u306b\u95a2\u3059\u308b `rewrite` \u306b\u3088\u308b\u4ee3\u5165\u306a\u3069\u304c\u51fa\u6765\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\n```coq:\nInstance Zneg_Proper : Proper ((==:>positive_setoid) ==> ((==:>Z_setoid))) Zneg.\n\nInstance Zpos_Proper : Proper ((==:>positive_setoid) ==> ((==:>Z_setoid))) Zpos.\n```\n\n`Map` \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u3000`Proper` \u3067\u3055\u3048\u3042\u308c\u3070\u4ee3\u5165\u306b\u652f\u969c\u306f\u306a\u3044\u306e\u3067\u3001\u7c21\u5358\u306e\u305f\u3081\u3001\u3053\u308c\u3060\u3051\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n## \u52a0\u6cd5\u306b\u3064\u3044\u3066\u53ef\u63db\u306a\u7fa4\n\n\u6b21\u306b\u3001\u52a0\u6cd5\u306b\u3064\u3044\u3066\u7fa4\u3068\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u53ef\u63db\u6027\u306b\u3064\u3044\u3066\u3082\u3053\u3053\u3067\u793a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u624b\u9806\u306f\n\n1. `Zplus` \u304c `Binop` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n2. `Zplus` \u3068 `0` \u304c `Monoid` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n3. `Zopp` \u304c `Z_setoid` \u304b\u3089 `Z_setoid` \u3078\u306e `Map` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n4. `Zplus`,`Zopp`,`0` \u304c\u7fa4\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n5. `Zplus` \u306e\u53ef\u63db\u6027\u3092\u793a\u3059\u3002\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```coq:\n(* Group of '+' *)\nProgram Instance Zplus_is_binop: isBinop (X:=Z_setoid) Zplus.\nCanonical Structure Zplus_binop := Build_Binop Zplus_is_binop.\n\nProgram Instance Zplus_is_monoid: isMonoid Zplus_binop 0.\nCanonical Structure Zplus_monoid := Monoid.make Zplus_is_monoid.\n\nProgram Instance Zinv_is_map: isMap (X:=Z_setoid) Zopp.\nCanonical Structure Zinv_map: Map Z_setoid Z_setoid := Build_Map Zinv_is_map.\n\nProgram Instance Zplus_is_group: isGroup Zplus_binop 0 Zinv_map.\nCanonical Structure Zgroup_monoid := Group.make Zplus_is_group.\n\nProgram Instance Zplus_commute: Commute Zplus_binop.\n```\n\n## \u4e57\u6cd5\u306b\u3064\u3044\u3066\u30e2\u30ce\u30a4\u30c9\n\n\u52a0\u6cd5\u3068\u540c\u69d8\u306b\u4e57\u6cd5\u306b\u3064\u3044\u3066\u3082\u30e2\u30ce\u30a4\u30c9\u3068\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u5148\u7a0b\u3088\u308a\u306f\u5927\u5206\u5358\u7d14\u3067\u3059\u3002\n\n1. `Zmult` \u304c `Binop` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n2. `Zmult` \u3068 `1` \u304c `Monoid` \u3092\u69cb\u6210\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u3002\n\n\u3068\u3044\u3046\u9806\u756a\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```coq:\n(* Monoid of '*' *)\nInstance Zmult_is_binop: isBinop (X:=Z_setoid) Zmult.\nCanonical Structure Zmult_binop := Build_Binop Zmult_is_binop.\n\nProgram Instance Zmult_is_monoid: isMonoid Zmult_binop 1.\nCanonical Structure Zmult_monoid := Monoid.make Zmult_is_monoid.\n```\n\n## `Z` \u306f\u74b0\u306b\u306a\u308b\n\n\u6700\u5f8c\u306b\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u3092\u4f7f\u3063\u3066 `Z` \u304c `Ring` \u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u53ef\u63db\u6027\u306f\u8a3c\u660e\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u6b8b\u308a\u306f\u5206\u914d\u5f8b\u306e\u8a3c\u660e\u3060\u3051\u3068\u306a\u308a\u307e\u3059(\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u304c)\u3002\n\n```coq:\n(* Ring of '+' & '*' *)\nProgram Instance Z_is_ring: isRing Zplus_binop 0 Zinv_map Zmult_binop 1.\nCanonical Structure Z_ring := Ring.make Z_is_ring.\n```\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u5f8c\u306f\u304b\u306a\u308a\u5358\u7d14\u306a\u4f5c\u696d\u3067\u3057\u305f\u304c\u3001\u70ba\u3059\u3079\u304d\u306f\u70ba\u3057\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u3001\u5c11\u3057\u3060\u3051\u8a08\u7b97\u306e\u4f8b\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## \u8a66\u3059\n\n\u3068\u3044\u3046\u3053\u3068\u3067 Z \u304c\u74b0\u3060\u3068\u793a\u305b\u307e\u3057\u305f\u304b\u3089\u3001\u5b9f\u969b\u306b\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u8a08\u7b97\u3057\u305f\u7d50\u679c\u306f `Z_ring` \u306b\u306a\u3063\u3066\n\n```coq:\nCompute (1 * 2 + 3).\n     (* = 5 *)\n     (* : Z *)\n```\n\n\u307e\u305b\u3093\u306d\u3002\n\n\u3069\u3046\u3057\u3066\u3067\u3057\u3087\u3046\u3002\n\n\u7b54\u3048\u306f\u7c21\u5358\u3001`+` \u3068\u304b `*` \u306f\u5143\u304b\u3089 `Z` \u306e\u305f\u3081\u306e\u8a18\u6cd5\u3068\u3057\u3066\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u305d\u3063\u3061\u304c\u4f7f\u308f\u308c\u3061\u3083\u3063\u305f\u3093\u3060\uff01\u307e\u3044\u3063\u305f\u306d\uff01\n\n\u3068\u304b\u8a00\u3063\u3066\u3082\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3061\u3083\u3093\u3068\u3084\u308a\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f `ring_scope` \u3092\u958b\u304d\u307e\u3059\u3002\u305d\u3082\u305d\u3082 `Ring` \u7528\u306e\u8a18\u6cd5\u306f\u3053\u3053\u3067\u3057\u304b\u901a\u7528\u3057\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u958b\u3044\u3066\u306a\u3044\u72b6\u614b\u3058\u3083\u4e0a\u624b\u304f\u3044\u304f\u306f\u305a\u3082\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n```coq:\nOpen Scope ring_scope.\n```\n\n\u3055\u3066\u3001\u6e96\u5099\u306f\u7d42\u308f\u3063\u305f\u306e\u3067\u540c\u3058\u898b\u305f\u76ee\u306e\u8a08\u7b97\u3092\u3057\u3066\u307f\u308b\u3068\u3001\n\n```coq:\nCompute (1 * 2 + 3).\n     (* = 5 *)\n     (* : Z_ring *)\n```\n\n\u306f\u3044\u3001\u6b63\u3057\u3044\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8fd4\u308a\u5024\u304c `Z_ring` \u3068\u3044\u3046\u3053\u3068\u306f\u3001\u4eca\u56de\u5b9a\u7fa9\u3057\u305f\u74b0\u3001 `Ring` \u306e\u4e0a\u3067\u306e\u8a08\u7b97\u3068\u3057\u3066\u6271\u308f\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u3088\u304b\u3063\u305f\u3088\u304b\u3063\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001 `Unset Printing Notations.` \u3057\u305f\u4e0a\u3067\u305d\u308c\u305e\u308c\u306e\u5f0f\u3092 `Check` \u3059\u308b\u3068\n```coq:\nCheck (1 * 2 + 3).\n(* Z.add (Z.mul (Zpos xH) (Zpos (xO xH))) (Zpos (xI xH)) *)\n(*      : Z *)\n```\n\n\u3068\n\n```coq:\nCheck (1 * 2 + 3).\n(* (Ring.add Z_ring) ((Ring.mul Z_ring) (Ring.e Z_ring) (Zpos (xO xH))) *)\n(*   (Zpos (xI xH)) *)\n(*      : Z_ring *)\n```\n\n\u306b\u306a\u308a\u3001\u5b9f\u969b\u306b\u9805\u306e\u5f62\u3067\u4ee5\u3066\u305d\u306e\u4e8b\u5b9f\u3092\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5192\u982d\u306e\u30ea\u30f3\u30af\u304b\u3089\u8a3c\u660e\u4ed8\u304d\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f\u305d\u308c\u3092\u30b3\u30d4\u30da\u3057\u3066\u8272\u3005\u8a08\u7b97\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Coq"]}