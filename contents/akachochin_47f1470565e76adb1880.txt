{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nPCL(Point Cloud Library)\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u3063\u305f\u304c\u3001\u70b9\u7fa4\u3068\u304b\u6271\u3046\u306e\u306f\u521d\u3081\u3066\u3067\u307b\u3068\u3093\u3069\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3002\n\u3088\u3063\u3066\u3001Web\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u8aad\u89e3\u3092\u901a\u3057\u3066\u3001\u5c11\u3057\u305a\u3064PCL\u3092\u5b66\u3093\u3067\u3044\u3051\u308c\u3070\u826f\u3044\u3068\u8003\u3048\u3001\u8a18\u9332\u306b\u6b8b\u3059\u3002\n\u306a\u304a\u3001PCL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fV1.7.1\u3068\u3059\u308b\u3002\n\n\u4eca\u56de\u8aad\u3080\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3053\u306e\u30da\u30fc\u30b8\u306b\u3042\u308b\u5e73\u9762\u63a8\u5b9a\u306e\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304f\u3002\nOTL\u3055\u3093\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\nPointCloud\n\u3069\u3046\u3084\u3089\u70b9\u7fa4\u7a7a\u9593(?\u3068\u8a00\u3063\u3066\u3044\u3044\u306e\u304b?)\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u306e\u5b9a\u7fa9\u3088\u308a\u3082\u3001\u8aac\u660e\u30b3\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u91cd\u8981\u3002\n\u7279\u306b\u70b9\u30c7\u30fc\u30bf\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3059\u308b\u5834\u5408\u306f\u3001push_back()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308c\u3070\u307e\u305a\u306f\u826f\u3055\u305d\u3046\u3002\n\ncommon/include/pcl/point_cloud.h\n  /** \\brief PointCloud represents the base class in PCL for storing collections of 3D points.\n    *\n    * The class is templated, which means you need to specify the type of data\n    * that it should contain. For example, to create a point cloud that holds 4\n    * random XYZ data points, use:\n    *\n    * \\code\n    * pcl::PointCloud<pcl::PointXYZ> cloud;\n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * \\endcode\n    *\n    * The PointCloud class contains the following elements:\n    *   - \\b width - specifies the width of the point cloud dataset in the number of points. WIDTH has two meanings:\n    *     - it can specify the total number of points in the cloud (equal with POINTS see below) for unorganized datasets;\n    *     - it can specify the width (total number of points in a row) of an organized point cloud dataset.\n    *   \\a Mandatory.\n    *   - \\b height - specifies the height of the point cloud dataset in the number of points. HEIGHT has two meanings:\n    *     - it can specify the height (total number of rows) of an organized point cloud dataset;\n    *     - it is set to 1 for unorganized datasets (thus used to check whether a dataset is organized or not).\n    *   \\a Mandatory.\n    *   - \\b points - the data array where all points of type <b>PointT</b> are stored. \\a Mandatory.\n    *\n    *   - \\b is_dense - specifies if all the data in <b>points</b> is finite (true), or whether it might contain Inf/NaN values\n    * (false). \\a Mandatory.\n    *\n    *   - \\b sensor_origin_ - specifies the sensor acquisition pose (origin/translation). \\a Optional.\n    *   - \\b sensor_orientation_ - specifies the sensor acquisition pose (rotation). \\a Optional.\n    *\n    * \\author Patrick Mihelich, Radu B. Rusu\n    */\n\ntemplate <typename PointT>\nclass PCL_EXPORTS PointCloud\n{\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);  \n\n\n\n\nModelCoefficients\n\u3053\u308c\u306f\u3001\u300c\u30d8\u30c3\u30c0\u300d\u3068float\u578b\u306evector\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3002\n\u300c\u30d8\u30c3\u30c0\u300d\u306fPCLHeader\u3002PCLHeader\u306f\u6587\u5b57\u901a\u308a\u30d8\u30c3\u30c0\u7684\u306a\u3082\u306e\u3067\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u756a\u53f7\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3001\u30d5\u30ec\u30fc\u30e0ID\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\n\u203b\u30d5\u30ec\u30fc\u30e0ID\u306e\u5177\u4f53\u7684\u306a\u7528\u9014\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u300c\u305d\u3046\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u300d\u3068\u5272\u308a\u5207\u308b\u3002\n\ncommon/include/pcl/PCLHeader.h\nnamespace pcl \n{\n  struct PCLHeader\n  {\n// \u7565\n    /** \\brief Sequence number */\n    pcl::uint32_t seq;\n    /** \\brief A timestamp associated with the time when the data was acquired\n      *\n      * The value represents microseconds since 1970-01-01 00:00:00 (the UNIX epoch).\n      */\n    pcl::uint64_t stamp;\n    /** \\brief Coordinate frame ID */\n    std::string frame_id;\n\n    typedef boost::shared_ptr<PCLHeader> Ptr;\n    typedef boost::shared_ptr<PCLHeader const> ConstPtr;\n\n\n\nPointIndices\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  pcl::PointIndices::Ptr inliers (new pcl::PointIndices);\n\n\nPointIndices\u306f\u3001ModelCoefficients\u3068\u69cb\u9020\u304c\u4f3c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3001ModelCoefficients\u3068\u6bd4\u3079\u308b\u3068\u3001vector\u304c\u3067\u306a\u304f\u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\u578b\u306e\u540d\u524d\u304b\u3089\u4f55\u304b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u601d\u308f\u308c\u308b\u3002\n\ncommon/include/pcl/PointIndices.h\n  struct PointIndices\n  {\n    PointIndices () : header (), indices ()\n    {}  \n\n    ::pcl::PCLHeader header;\n\n    std::vector<int> indices;\n\n    public:\n      typedef boost::shared_ptr< ::pcl::PointIndices> Ptr;\n      typedef boost::shared_ptr< ::pcl::PointIndices const> ConstPtr;\n  }; // struct PointIndices\n\n\n\nSACSegmentation\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  // Create the segmentation object  \n  pcl::SACSegmentation<pcl::PointXYZRGB> seg;\n\n\nSAC\u3001segmentation\u3068\u3044\u3046\u306e\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\u30af\u30e9\u30b9\u306e\u578b\u3092\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\nsegmentation/include/pcl/segmentation/sac_segmentation.h\n  /** \\brief @b SACSegmentation represents the Nodelet segmentation class for\n    * Sample Consensus methods and models, in the sense that it just creates a\n    * Nodelet wrapper for generic-purpose SAC-based segmentation.\n    * \\author Radu Bogdan Rusu\n    * \\ingroup segmentation\n    */\n  template <typename PointT>\n  class SACSegmentation : public PCLBase<PointT>\n  {\n\n\nSAC\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u306e\u8ad6\u6587\u304c\u53c2\u8003\u306b\u306a\u308a\u305d\u3046\u3002\n\u7d30\u304b\u306a\u3068\u3053\u308d\u306f\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u304c\u3001\u7279\u5fb4\u70b9\u3092\u4f7f\u3063\u3066\u3056\u3063\u304f\u308a\u3068\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u624b\u6cd5\u3089\u3057\u3044\u3002\u8907\u6570\u306e\u753b\u50cf\u304b\u3089\u69cb\u6210\u3057\u305f\u8907\u6570\u306e\u70b9\u7fa4\u3092\u7d71\u5408\u3059\u308b\u3002\u5f53\u7136\u305d\u308c\u3089\u70b9\u7fa4\u306f\u300c\u305a\u308c\u3066\u300d\u3044\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u3002\n\n\u8ad6\u6587\u3088\u308a\u629c\u7c8b\n\u7acb\u4f53\u7269\u306e\u5b8c\u5168\u306a3\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u8907\u6570\u306e\u8996\u70b9\u304b\u3089\u53d6\u5f97\u3057\u305f3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u306b\u7d71\u5408\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u8907\u6570\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u3001\u304a\u4e92\u3044\u306b\u72ec\u7acb\u3057\u3066\u53d6\u5f97\u3057\u305f\u5834\u5408\u3001\u305d\u308c\u3089\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u4e8b\u524d\u306b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3068\u304d\u3001\u307e\u305a\u3001\u8907\u6570\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u7c97\u304f\u4f4d\u7f6e\u5408\u308f\u305b\u3057\u3001\u305d\u306e\u5f8c\u3001ICP\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u9ad8\u7cbe\u5ea6\u306b\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u3002ICP\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u7e70\u308a\u8fd4\u3057\u7684\u306a\u51e6\u7406\u3067\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u9ad8\u7cbe\u5ea6\u5316\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001\u521d\u671f\u72b6\u614b\u306b\u304a\u3044\u30662\u3064\u306e3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4f4d\u7f6e\u304c\u5927\u4f53\u3042\u3063\u3066\u3044\u306a\u3044\u3068\u6709\u52b9\u306b\u50cd\u304b\u306a\u3044\u3002\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u305f\u3081\u306b\u3001SAC-IA(Sample Consensus Initial Alignment)\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\n\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u305f\u3081\u306b\u3001SAC-IA(Sample Consensus Initial Alignment)\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\nSAC-IA\u306f\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u306e\u305f\u3081\u306bRANSAC\uff08Randum  Sample Consensus\uff09\u3092\u7528\u3044\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u30462\u3064\u306e3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u304b\u3089\u3001\u305d\u308c\u305e\u308c\u8907\u6570\u306e\u7279\u5fb4\u70b9\u3092\u62bd\u51fa\u3059\u308b\u3002\u3053\u3053\u3067\u3001\u70b9\u7fa4\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u7279\u5fb4\u70b9\u3068\u306f\uff13\u6b21\u5143\u5f62\u72b6\u306e\u7279\u5fb4\uff08\u30b3\u30fc\u30ca\u30fc\u306a\u3069\uff09\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306e\u3053\u3068\u3067\u3042\u308b\u30022\u3064\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4e00\u65b9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u3001\u4ed6\u65b9\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3001\u7279\u5fb4\u70b9\u9593\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u3002\u5bfe\u5fdc\u4ed8\u3051\u305f\u7279\u5fb4\u70b9\u9593\u304c\u6700\u3082\u8fd1\u3065\u304f\u3088\u3046\u306b\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u3002\u305d\u306e\u3068\u304d\u306b\u751f\u3058\u308b\u4f4d\u7f6e\u306e\u5dee\u3092\u3001\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u3068\u3059\u308b\u3002\u3053\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u4e00\u5b9a\u56de\u6570\u884c\u3044\u3001\u6700\u30822\u3064\u306e\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u304c\u4f4e\u304f\u306a\u3063\u305f\u5834\u5408\u3092\u5ea7\u6a19\u5909\u63db\u3068\u3057\u3066\u63a1\u7528\u3059\u308b\u3002\u305d\u3057\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u30a4\u30f3\u30d7\u30c3\u30c8\u3092\u56de\u8ee2\u3001\u62e1\u5927\u7e2e\u5c0f\u3001\u5e73\u884c\u79fb\u52d5\u3092\u304a\u3053\u306a\u3044\u3001\u518d\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u3001\u5927\u307e\u304b\u306a\u4f4d\u7f6e\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u4e0a\u8a18\u8ad6\u6587\u3067\u306f\u3001RANSAC\u306b\u3064\u3044\u3066\u300c2\u3064\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4e00\u65b9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u3001\u4ed6\u65b9\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3001\u7279\u5fb4\u70b9\u9593\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u3002\u5bfe\u5fdc\u4ed8\u3051\u305f\u7279\u5fb4\u70b9\u9593\u304c\u6700\u3082\u8fd1\u3065\u304f\u3088\u3046\u306b\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u3002\u305d\u306e\u3068\u304d\u306b\u751f\u3058\u308b\u4f4d\u7f6e\u306e\u5dee\u3092\u3001\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u3068\u3059\u308b\u3002\u300d\u3068\u66f8\u3044\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u70b9\u304c\u7406\u89e3\u3057\u304d\u308c\u3066\u3044\u306a\u3044\u3002\n\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u3053\u306e\u6587\u66f8\u3092\u898b\u3064\u3051\u305f\u3002\n\u3053\u306e\u30da\u30fc\u30b8\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u9650\u308a\u3001RANSAC\u3068\u3044\u3046\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3068\u7406\u89e3\u3057\u305f\u3002\n\n\u96c6\u3081\u305f\u30c7\u30fc\u30bf\u304b\u3089N\u500b\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306a\u3069\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u3066\u5f0f\u3092\u4f5c\u308b\u3002\n1\u3067\u4f5c\u3063\u305f\u5f0f\u3092\u6b8b\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u9069\u7528\u3057\u3066\u3001\u8aa4\u5dee\u306e\u5bb9\u8a8d\u7bc4\u56f2\u5185\u306b\u306a\u3063\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6c42\u3081\u308b\u3002(\u30ea\u30f3\u30af\u5148\u6587\u66f8\u3067\u300c\u6295\u7968\u300d\u3068\u8a00\u3063\u3066\u3044\u308b\u306e\u306f\u305d\u308c)\n1,2\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3001\u5bb9\u8a8d\u7bc4\u56f2\u5185\u30c7\u30fc\u30bf\u306e\u6570\u304c\u6700\u3082\u591a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a1\u7528\u3059\u308b\u3002\n\u5bb9\u8a8d\u7bc4\u56f2\u5916\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u9664\u3044\u305f\u4e0a\u3067\u3001\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3002\u3053\u308c\u304c\u6700\u7d42\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306a\u308b\u3002\n\n\u3053\u3053\u307e\u3067\u306e\u3053\u3068\u3092\u5ff5\u982d\u306b\u7f6e\u3044\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5148\u306b\u8aad\u307f\u9032\u3081\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  // Optional  \n  seg.setOptimizeCoefficients (true);  \n  // Mandatory  \n  seg.setModelType (pcl::SACMODEL_PLANE);  \n  seg.setMethodType (pcl::SAC_RANSAC);  \n  seg.setDistanceThreshold (0.1);  \n\n  seg.setInputCloud (cloud.makeShared ());  \n  seg.segment (*inliers, *coefficients);\n\n\n\u304a\u305d\u3089\u304f\u3001setDistanceThreshold()\u306f\u300c\u5bb9\u8a8d\u3059\u308b\u8aa4\u5dee\u7bc4\u56f2\u300d\u3092\u6307\u5b9a\u3059\u308b\u306e\u3060\u308d\u3046\u3002\n\u3042\u3068\u3001segment()\u306b\u3064\u3044\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8f09\u304c\u3042\u308b\u3002\n\u307e\u3055\u306b\u300c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u3066\u3001\u7bc4\u56f2\u5916\u306e\u4e0d\u9069\u5207\u306a\u70b9\u3092\u53d6\u308a\u9664\u3044\u305f\u70b9\u306e\u96c6\u5408\u3092\u53d6\u5f97\u3059\u308b\u300d\u306e\u3067\u3042\u308d\u3046\u3002\n\nsegmentation/include/pcl/segmentation/sac_segmentation.h\n      /** \\brief Base method for segmentation of a model in a PointCloud given by <setInputCloud (), setIndices ()>\n        * \\param[in] inliers the resultant point indices that support the model found (inliers)        * \\param[out] model_coefficients the resultant model coefficients\n        */\n      virtual void\n      segment (PointIndices &inliers, ModelCoefficients &model_coefficients);\n\n\n\u6700\u5f8c\u306b\u3001\u62bd\u51fa\u3057\u305f\u30bb\u30b0\u30e1\u30f3\u30c8\u5185\u306e\u70b9\u3092\u8d64\u304f\u3057\u3066\u3001\u305d\u308c\u3092Visualizer\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u306e\u629c\u7c8b\n  for (size_t i = 0; i < inliers->indices.size (); ++i) {  \n// \u7565\n    cloud.points[inliers->indices[i]].r = 255;  \n    cloud.points[inliers->indices[i]].g = 0;  \n    cloud.points[inliers->indices[i]].b = 0;  \n  }  \n  pcl::visualization::CloudViewer viewer(\"Cloud Viewer\");  \n\n\n\u4ee5\u4e0a\n## \u306f\u3058\u3081\u306b\nPCL(Point Cloud Library)\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u3063\u305f\u304c\u3001\u70b9\u7fa4\u3068\u304b\u6271\u3046\u306e\u306f\u521d\u3081\u3066\u3067\u307b\u3068\u3093\u3069\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3002\n\u3088\u3063\u3066\u3001Web\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u8aad\u89e3\u3092\u901a\u3057\u3066\u3001\u5c11\u3057\u305a\u3064PCL\u3092\u5b66\u3093\u3067\u3044\u3051\u308c\u3070\u826f\u3044\u3068\u8003\u3048\u3001\u8a18\u9332\u306b\u6b8b\u3059\u3002\n\n\u306a\u304a\u3001PCL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fV1.7.1\u3068\u3059\u308b\u3002\n\n## \u4eca\u56de\u8aad\u3080\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n[\u3053\u306e\u30da\u30fc\u30b8](http://ros-robot.blogspot.jp/2011/08/pclapi-point-cloud-library-pcl-pcl-api.html)\u306b\u3042\u308b\u5e73\u9762\u63a8\u5b9a\u306e\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f7f\u308f\u305b\u3066\u3044\u305f\u3060\u304f\u3002\nOTL\u3055\u3093\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n### PointCloud\n\u3069\u3046\u3084\u3089\u70b9\u7fa4\u7a7a\u9593(?\u3068\u8a00\u3063\u3066\u3044\u3044\u306e\u304b?)\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3002\n\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u306e\u5b9a\u7fa9\u3088\u308a\u3082\u3001\u8aac\u660e\u30b3\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u91cd\u8981\u3002\n\u7279\u306b\u70b9\u30c7\u30fc\u30bf\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3059\u308b\u5834\u5408\u306f\u3001push_back()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308c\u3070\u307e\u305a\u306f\u826f\u3055\u305d\u3046\u3002\n\n```cpp:common/include/pcl/point_cloud.h\n  /** \\brief PointCloud represents the base class in PCL for storing collections of 3D points.\n    *\n    * The class is templated, which means you need to specify the type of data\n    * that it should contain. For example, to create a point cloud that holds 4\n    * random XYZ data points, use:\n    *\n    * \\code\n    * pcl::PointCloud<pcl::PointXYZ> cloud;\n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * cloud.push_back (pcl::PointXYZ (rand (), rand (), rand ())); \n    * \\endcode\n    *\n    * The PointCloud class contains the following elements:\n    *   - \\b width - specifies the width of the point cloud dataset in the number of points. WIDTH has two meanings:\n    *     - it can specify the total number of points in the cloud (equal with POINTS see below) for unorganized datasets;\n    *     - it can specify the width (total number of points in a row) of an organized point cloud dataset.\n    *   \\a Mandatory.\n    *   - \\b height - specifies the height of the point cloud dataset in the number of points. HEIGHT has two meanings:\n    *     - it can specify the height (total number of rows) of an organized point cloud dataset;\n    *     - it is set to 1 for unorganized datasets (thus used to check whether a dataset is organized or not).\n    *   \\a Mandatory.\n    *   - \\b points - the data array where all points of type <b>PointT</b> are stored. \\a Mandatory.\n    *\n    *   - \\b is_dense - specifies if all the data in <b>points</b> is finite (true), or whether it might contain Inf/NaN values\n    * (false). \\a Mandatory.\n    *\n    *   - \\b sensor_origin_ - specifies the sensor acquisition pose (origin/translation). \\a Optional.\n    *   - \\b sensor_orientation_ - specifies the sensor acquisition pose (rotation). \\a Optional.\n    *\n    * \\author Patrick Mihelich, Radu B. Rusu\n    */\n\ntemplate <typename PointT>\nclass PCL_EXPORTS PointCloud\n{\n```\n\n```cpp:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  pcl::ModelCoefficients::Ptr coefficients (new pcl::ModelCoefficients);  \n\n```\n\n### ModelCoefficients\n\n\u3053\u308c\u306f\u3001\u300c\u30d8\u30c3\u30c0\u300d\u3068float\u578b\u306evector\u304b\u3089\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3002\n\u300c\u30d8\u30c3\u30c0\u300d\u306fPCLHeader\u3002PCLHeader\u306f\u6587\u5b57\u901a\u308a\u30d8\u30c3\u30c0\u7684\u306a\u3082\u306e\u3067\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u756a\u53f7\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3001\u30d5\u30ec\u30fc\u30e0ID\u3067\u69cb\u6210\u3055\u308c\u308b\u3002\n\u203b\u30d5\u30ec\u30fc\u30e0ID\u306e\u5177\u4f53\u7684\u306a\u7528\u9014\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u300c\u305d\u3046\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u300d\u3068\u5272\u308a\u5207\u308b\u3002\n\n```cpp:common/include/pcl/PCLHeader.h\nnamespace pcl \n{\n  struct PCLHeader\n  {\n// \u7565\n    /** \\brief Sequence number */\n    pcl::uint32_t seq;\n    /** \\brief A timestamp associated with the time when the data was acquired\n      *\n      * The value represents microseconds since 1970-01-01 00:00:00 (the UNIX epoch).\n      */\n    pcl::uint64_t stamp;\n    /** \\brief Coordinate frame ID */\n    std::string frame_id;\n\n    typedef boost::shared_ptr<PCLHeader> Ptr;\n    typedef boost::shared_ptr<PCLHeader const> ConstPtr;\n```\n\n### PointIndices\n\n```cpp:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  pcl::PointIndices::Ptr inliers (new pcl::PointIndices);\n```\n\nPointIndices\u306f\u3001ModelCoefficients\u3068\u69cb\u9020\u304c\u4f3c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3001ModelCoefficients\u3068\u6bd4\u3079\u308b\u3068\u3001vector\u304c<float>\u3067\u306a\u304f<int>\u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\u578b\u306e\u540d\u524d\u304b\u3089\u4f55\u304b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u601d\u308f\u308c\u308b\u3002\n\n```cpp:common/include/pcl/PointIndices.h\n  struct PointIndices\n  {\n    PointIndices () : header (), indices ()\n    {}  \n\n    ::pcl::PCLHeader header;\n\n    std::vector<int> indices;\n\n    public:\n      typedef boost::shared_ptr< ::pcl::PointIndices> Ptr;\n      typedef boost::shared_ptr< ::pcl::PointIndices const> ConstPtr;\n  }; // struct PointIndices\n```\n\n### SACSegmentation\n\n```cpp:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  // Create the segmentation object  \n  pcl::SACSegmentation<pcl::PointXYZRGB> seg;\n```\n\nSAC\u3001segmentation\u3068\u3044\u3046\u306e\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002\u30af\u30e9\u30b9\u306e\u578b\u3092\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```cpp:segmentation/include/pcl/segmentation/sac_segmentation.h\n  /** \\brief @b SACSegmentation represents the Nodelet segmentation class for\n    * Sample Consensus methods and models, in the sense that it just creates a\n    * Nodelet wrapper for generic-purpose SAC-based segmentation.\n    * \\author Radu Bogdan Rusu\n    * \\ingroup segmentation\n    */\n  template <typename PointT>\n  class SACSegmentation : public PCLBase<PointT>\n  {\n```\n\nSAC\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u306e\u8ad6\u6587](http://www.cc.kyoto-su.ac.jp/~kano/pdf/study/student/NaokiPaper.pdf)\u304c\u53c2\u8003\u306b\u306a\u308a\u305d\u3046\u3002\n\u7d30\u304b\u306a\u3068\u3053\u308d\u306f\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u304c\u3001\u7279\u5fb4\u70b9\u3092\u4f7f\u3063\u3066\u3056\u3063\u304f\u308a\u3068\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u624b\u6cd5\u3089\u3057\u3044\u3002\u8907\u6570\u306e\u753b\u50cf\u304b\u3089\u69cb\u6210\u3057\u305f\u8907\u6570\u306e\u70b9\u7fa4\u3092\u7d71\u5408\u3059\u308b\u3002\u5f53\u7136\u305d\u308c\u3089\u70b9\u7fa4\u306f\u300c\u305a\u308c\u3066\u300d\u3044\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u3002\n\n```text:\u8ad6\u6587\u3088\u308a\u629c\u7c8b\n\u7acb\u4f53\u7269\u306e\u5b8c\u5168\u306a3\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u8907\u6570\u306e\u8996\u70b9\u304b\u3089\u53d6\u5f97\u3057\u305f3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u306b\u7d71\u5408\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u8907\u6570\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u3001\u304a\u4e92\u3044\u306b\u72ec\u7acb\u3057\u3066\u53d6\u5f97\u3057\u305f\u5834\u5408\u3001\u305d\u308c\u3089\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u4e8b\u524d\u306b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3068\u304d\u3001\u307e\u305a\u3001\u8907\u6570\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u3092\u7c97\u304f\u4f4d\u7f6e\u5408\u308f\u305b\u3057\u3001\u305d\u306e\u5f8c\u3001ICP\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u9ad8\u7cbe\u5ea6\u306b\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u3002ICP\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u7e70\u308a\u8fd4\u3057\u7684\u306a\u51e6\u7406\u3067\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u9ad8\u7cbe\u5ea6\u5316\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001\u521d\u671f\u72b6\u614b\u306b\u304a\u3044\u30662\u3064\u306e3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4f4d\u7f6e\u304c\u5927\u4f53\u3042\u3063\u3066\u3044\u306a\u3044\u3068\u6709\u52b9\u306b\u50cd\u304b\u306a\u3044\u3002\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u305f\u3081\u306b\u3001SAC-IA(Sample Consensus Initial Alignment)\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\n\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u3046\u305f\u3081\u306b\u3001SAC-IA(Sample Consensus Initial Alignment)\u95a2\u6570\u3092\u7528\u3044\u308b\u3002\nSAC-IA\u306f\u521d\u671f\u4f4d\u7f6e\u5408\u308f\u305b\u306e\u305f\u3081\u306bRANSAC\uff08Randum  Sample Consensus\uff09\u3092\u7528\u3044\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u4f4d\u7f6e\u5408\u308f\u305b\u3092\u884c\u30462\u3064\u306e3\u6b21\u5143\u70b9\u7fa4\u30c7\u30fc\u30bf\u304b\u3089\u3001\u305d\u308c\u305e\u308c\u8907\u6570\u306e\u7279\u5fb4\u70b9\u3092\u62bd\u51fa\u3059\u308b\u3002\u3053\u3053\u3067\u3001\u70b9\u7fa4\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u7279\u5fb4\u70b9\u3068\u306f\uff13\u6b21\u5143\u5f62\u72b6\u306e\u7279\u5fb4\uff08\u30b3\u30fc\u30ca\u30fc\u306a\u3069\uff09\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306e\u3053\u3068\u3067\u3042\u308b\u30022\u3064\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4e00\u65b9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u3001\u4ed6\u65b9\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3001\u7279\u5fb4\u70b9\u9593\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u3002\u5bfe\u5fdc\u4ed8\u3051\u305f\u7279\u5fb4\u70b9\u9593\u304c\u6700\u3082\u8fd1\u3065\u304f\u3088\u3046\u306b\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u3002\u305d\u306e\u3068\u304d\u306b\u751f\u3058\u308b\u4f4d\u7f6e\u306e\u5dee\u3092\u3001\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u3068\u3059\u308b\u3002\u3053\u306e\u5bfe\u5fdc\u4ed8\u3051\u3092\u4e00\u5b9a\u56de\u6570\u884c\u3044\u3001\u6700\u30822\u3064\u306e\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u304c\u4f4e\u304f\u306a\u3063\u305f\u5834\u5408\u3092\u5ea7\u6a19\u5909\u63db\u3068\u3057\u3066\u63a1\u7528\u3059\u308b\u3002\u305d\u3057\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u30a4\u30f3\u30d7\u30c3\u30c8\u3092\u56de\u8ee2\u3001\u62e1\u5927\u7e2e\u5c0f\u3001\u5e73\u884c\u79fb\u52d5\u3092\u304a\u3053\u306a\u3044\u3001\u518d\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u3001\u5927\u307e\u304b\u306a\u4f4d\u7f6e\u3092\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n```\n\n\u4e0a\u8a18\u8ad6\u6587\u3067\u306f\u3001RANSAC\u306b\u3064\u3044\u3066\u300c2\u3064\u306e\u70b9\u7fa4\u30c7\u30fc\u30bf\u306e\u4e00\u65b9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u3001\u4ed6\u65b9\u3092\u30a4\u30f3\u30d7\u30c3\u30c8\u3068\u3057\u3066\u3001\u7279\u5fb4\u70b9\u9593\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5bfe\u5fdc\u4ed8\u3051\u3092\u3059\u308b\u3002\u5bfe\u5fdc\u4ed8\u3051\u305f\u7279\u5fb4\u70b9\u9593\u304c\u6700\u3082\u8fd1\u3065\u304f\u3088\u3046\u306b\u5ea7\u6a19\u5909\u63db\u3092\u884c\u3046\u3002\u305d\u306e\u3068\u304d\u306b\u751f\u3058\u308b\u4f4d\u7f6e\u306e\u5dee\u3092\u3001\u7279\u5fb4\u70b9\u306e\u8aa4\u5dee\u3068\u3059\u308b\u3002\u300d\u3068\u66f8\u3044\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u70b9\u304c\u7406\u89e3\u3057\u304d\u308c\u3066\u3044\u306a\u3044\u3002\n\n\u8abf\u3079\u3066\u307f\u308b\u3068\u3001[\u3053\u306e\u6587\u66f8](http://playwithopencv.blogspot.jp/2010/07/ransac.html)\u3092\u898b\u3064\u3051\u305f\u3002\n\u3053\u306e\u30da\u30fc\u30b8\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u9650\u308a\u3001RANSAC\u3068\u3044\u3046\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3068\u7406\u89e3\u3057\u305f\u3002\n\n1. \u96c6\u3081\u305f\u30c7\u30fc\u30bf\u304b\u3089N\u500b\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3067\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306a\u3069\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u3066\u5f0f\u3092\u4f5c\u308b\u3002\n2. 1\u3067\u4f5c\u3063\u305f\u5f0f\u3092\u6b8b\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u9069\u7528\u3057\u3066\u3001\u8aa4\u5dee\u306e\u5bb9\u8a8d\u7bc4\u56f2\u5185\u306b\u306a\u3063\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6c42\u3081\u308b\u3002(\u30ea\u30f3\u30af\u5148\u6587\u66f8\u3067\u300c\u6295\u7968\u300d\u3068\u8a00\u3063\u3066\u3044\u308b\u306e\u306f\u305d\u308c)\n3. 1,2\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3001\u5bb9\u8a8d\u7bc4\u56f2\u5185\u30c7\u30fc\u30bf\u306e\u6570\u304c\u6700\u3082\u591a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a1\u7528\u3059\u308b\u3002\n4. \u5bb9\u8a8d\u7bc4\u56f2\u5916\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u9664\u3044\u305f\u4e0a\u3067\u3001\u6b8b\u308a\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3002\u3053\u308c\u304c\u6700\u7d42\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306a\u308b\u3002\n\n\u3053\u3053\u307e\u3067\u306e\u3053\u3068\u3092\u5ff5\u982d\u306b\u7f6e\u3044\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5148\u306b\u8aad\u307f\u9032\u3081\u308b\u3002\n\n```cpp:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3088\u308a\u629c\u7c8b\n  // Optional  \n  seg.setOptimizeCoefficients (true);  \n  // Mandatory  \n  seg.setModelType (pcl::SACMODEL_PLANE);  \n  seg.setMethodType (pcl::SAC_RANSAC);  \n  seg.setDistanceThreshold (0.1);  \n  \n  seg.setInputCloud (cloud.makeShared ());  \n  seg.segment (*inliers, *coefficients);\n```\n\n\u304a\u305d\u3089\u304f\u3001setDistanceThreshold()\u306f\u300c\u5bb9\u8a8d\u3059\u308b\u8aa4\u5dee\u7bc4\u56f2\u300d\u3092\u6307\u5b9a\u3059\u308b\u306e\u3060\u308d\u3046\u3002\n\u3042\u3068\u3001segment()\u306b\u3064\u3044\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8f09\u304c\u3042\u308b\u3002\n\u307e\u3055\u306b\u300c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u3066\u3001\u7bc4\u56f2\u5916\u306e\u4e0d\u9069\u5207\u306a\u70b9\u3092\u53d6\u308a\u9664\u3044\u305f\u70b9\u306e\u96c6\u5408\u3092\u53d6\u5f97\u3059\u308b\u300d\u306e\u3067\u3042\u308d\u3046\u3002\n\n```cpp:segmentation/include/pcl/segmentation/sac_segmentation.h\n      /** \\brief Base method for segmentation of a model in a PointCloud given by <setInputCloud (), setIndices ()>\n        * \\param[in] inliers the resultant point indices that support the model found (inliers)        * \\param[out] model_coefficients the resultant model coefficients\n        */\n      virtual void\n      segment (PointIndices &inliers, ModelCoefficients &model_coefficients);\n```\n\n\u6700\u5f8c\u306b\u3001\u62bd\u51fa\u3057\u305f\u30bb\u30b0\u30e1\u30f3\u30c8\u5185\u306e\u70b9\u3092\u8d64\u304f\u3057\u3066\u3001\u305d\u308c\u3092Visualizer\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n```cpp:\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u306e\u629c\u7c8b\n  for (size_t i = 0; i < inliers->indices.size (); ++i) {  \n// \u7565\n    cloud.points[inliers->indices[i]].r = 255;  \n    cloud.points[inliers->indices[i]].g = 0;  \n    cloud.points[inliers->indices[i]].b = 0;  \n  }  \n  pcl::visualization::CloudViewer viewer(\"Cloud Viewer\");  \n```\n\n\u4ee5\u4e0a\n", "tags": ["PCL", "Robot", "ROS"]}