{"context": "\ncreate_xml.py\nimport xml.etree.ElementTree as ET\n\n# http://docs.python.jp/3.3/library/xml.etree.elementtree.html\n\n# from string\nroot = ET.fromstring(\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<outer><inner>inner text</inner></outer>\n\"\"\")\n\nprint(type(root))\n# <class 'xml.etree.ElementTree.Element'>\n\nprint(ET.tostring(root))\n# b'<outer><inner>inner text</inner></outer>'\n\n# create element\ndata = ET.Element(\"tag\")\nET.dump(data)\n# <tag />\n\n# append a element to a element\ndata.append(ET.Element(\"append\"))\nET.dump(data)\n# <tag><append /></tag>\n\n# append elements to a element\ndata.extend([\n        ET.Element(\"extend\"),\n        ET.Element(\"extend\"),\n    ])\nET.dump(data)\n# <tag><append /><extend /><extend /></tag>\n\nimport inspect\nprint(inspect.getmro(ET.Element))\n# (<class 'xml.etree.ElementTree.Element'>, <class 'object'>)\n\nimport io\nimport random\n\ndocument = ET.Element('outer')\nnode = ET.SubElement(document, 'inner')\nnode.text = \"inner text\"\net = ET.ElementTree(document)\n\nf = random.choice([\"element_tree.xml\", io.BytesIO()])\net.write(f, encoding='utf-8', xml_declaration=True) \nif not type(f) == str:\n    print(f.getvalue().decode())\n\n# if BytesIO\n# <?xml version='1.0' encoding='utf-8'?>\n# <outer><inner>inner text</inner></outer>\n\n\n```py3:create_xml.py\nimport xml.etree.ElementTree as ET\n\n# http://docs.python.jp/3.3/library/xml.etree.elementtree.html\n\n# from string\nroot = ET.fromstring(\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<outer><inner>inner text</inner></outer>\n\"\"\")\n\nprint(type(root))\n# <class 'xml.etree.ElementTree.Element'>\n\nprint(ET.tostring(root))\n# b'<outer><inner>inner text</inner></outer>'\n\n# create element\ndata = ET.Element(\"tag\")\nET.dump(data)\n# <tag />\n\n# append a element to a element\ndata.append(ET.Element(\"append\"))\nET.dump(data)\n# <tag><append /></tag>\n\n# append elements to a element\ndata.extend([\n        ET.Element(\"extend\"),\n        ET.Element(\"extend\"),\n    ])\nET.dump(data)\n# <tag><append /><extend /><extend /></tag>\n\nimport inspect\nprint(inspect.getmro(ET.Element))\n# (<class 'xml.etree.ElementTree.Element'>, <class 'object'>)\n\nimport io\nimport random\n\ndocument = ET.Element('outer')\nnode = ET.SubElement(document, 'inner')\nnode.text = \"inner text\"\net = ET.ElementTree(document)\n\nf = random.choice([\"element_tree.xml\", io.BytesIO()])\net.write(f, encoding='utf-8', xml_declaration=True) \nif not type(f) == str:\n    print(f.getvalue().decode())\n\n# if BytesIO\n# <?xml version='1.0' encoding='utf-8'?>\n# <outer><inner>inner text</inner></outer>\n```\n", "tags": ["memo"]}