{"tags": ["Haskell", "CPU"], "context": "\u3055\u3042\u3001\u524d\u56de\u307e\u3067\u3067\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u51fa\u63c3\u3063\u305f\u3002\u4eca\u56de\u306f\u305d\u308c\u3089\u3092\u7d44\u307f\u7acb\u3066\u3066\u52d5\u304fCPU\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046! \u4e00\u6c17\u306b\u6700\u7d42\u5f62\u306f\u3057\u3093\u3069\u3044\u306e\u3067\u5c11\u3057\u305a\u3064\u30d4\u30fc\u30b9\u3092\u57cb\u3081\u3066\u3044\u304f\u611f\u3058\u3067\u9032\u3081\u3066\u3044\u304d\u305f\u3044\u3002\n\u306a\u304a\u3001\u3057\u3064\u3053\u3044\u3088\u3046\u3060\u304c\u3053\u3053\u3067\u4f5c\u3063\u3066\u3044\u308bCPU\u306f\u4ee5\u4e0b\u306e\u672c\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308bTD4\u3068\u3044\u3046\u540d\u524d\u306e\u30aa\u30ea\u30b8\u30ca\u30eb4bit CPU\u3060\u3002\u8aac\u660e\u4e2d\u306btd4\u3068\u51fa\u3066\u304f\u308b\u306e\u306f\u305d\u306e\u540d\u524d\u3067\u3042\u308b\u3002\n\u300cCPU\u306e\u5275\u308a\u304b\u305f\u300d\uff08\u6e21\u6ce2 \u90c1\u8457\u3001\u6bce\u65e5\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30ba\uff09\n\n\u30b9\u30c6\u30c3\u30d7 0: \u96fb\u6e90\u3001\u30af\u30ed\u30c3\u30af\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\uff08\u306b\u76f8\u5f53\u3059\u308b\u3068\u3053\u308d\uff09\n\u3053\u308c\u307e\u3067\u8ad6\u7406\u56de\u8def\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u3084CPU\u5185\u306e\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3053\u3068\u3070\u304b\u308a\u3084\u3063\u3066\u304d\u3066\u3001\u5b9f\u884c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b\u90e8\u5206\u306b\u306f\u76ee\u3092\u7791\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u3055\u3059\u304c\u306b\u4eca\u56de\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u3092\u52d5\u304b\u3057\u305f\u3044\u306e\u3067\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u3002\n\u305d\u3053\u3067\u30b9\u30c6\u30c3\u30d70\u3068\u3057\u3066\u5b8c\u52d5\u3055\u305b\u308b\u305f\u3081\u306e\u5468\u8fba\u90e8\u5206\u3092\u4f5c\u3063\u3066\u3044\u3053\u3046\u3002\u96fb\u5b50\u5de5\u4f5c\u3067\u306f\u96fb\u6e90\u30e2\u30b8\u30e5\u30fc\u30eb\u3060\u3068\u304b\u30af\u30ed\u30c3\u30af\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u304b\u305d\u306e\u4ed6\u306e\u30a2\u30ca\u30ed\u30b0\u56de\u8def\u90e8\u5206\u306b\u76f8\u5f53\u3059\u308b\u3060\u308d\u3046\u304b\u3002\n\u307e\u305a\u4ed5\u69d8\u3092\u5217\u6319\u3057\u3088\u3046\u3002\n\n\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f\u6a19\u6e96\u5165\u529b\u304b\u3089\u6295\u5165\u3059\u308b\u3002\n\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f'0'\u3068'1'\u306e\u9023\u7d9a\u3057\u305f\u6587\u5b57\u5217\u3068\u3059\u308b\u3002\u307e\u305f\u9593\u306b\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u304c\u3044\u304f\u3064\u5165\u3063\u3066\u3082\u3088\u3044\u3002\n\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306b\u304a\u3051\u308b\u30d3\u30c3\u30c8\u4e26\u3073\u306f(\u6163\u308c\u3066\u3044\u308b\u306e\u3067) MSB...LSB \u306e\u9806\u3068\u3059\u308b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u304c4 bit \u306a\u306e\u3067\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f16 bytes = 128\u6587\u5b57\u3002\u305f\u3060\u3057\u305d\u308c\u3088\u308a\u5c11\u306a\u3044\u5834\u5408\u306f'0'\u3067\u88dc\u586b\u3059\u308b\u3002\u591a\u3044\u5834\u5408\u306f\u5207\u308a\u6368\u3066\u308b\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u9806\u306b\"\u30af\u30ed\u30c3\u30af\u9593\u9694\"\u3068\"\u5165\u529b\u30dd\u30fc\u30c8\"\u306e2\u3064\u3002\u7701\u7565\u53ef\u80fd\u3060\u304c\u3001\u30af\u30ed\u30c3\u30af\u9593\u9694\u3060\u3051\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u30af\u30ed\u30c3\u30af\u9593\u9694\u306e\u5358\u4f4d\u306f\u79d2\u3001\u5c0f\u6570\u3082\u4f7f\u3048\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f1.0\u79d2\u3002\u5165\u529b\u30dd\u30fc\u30c8\u306f4\u6841\u306e\u4e8c\u9032\u6570\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\"0000\"\u3002\n\n\n\u4f8b) td4 0.5 0101 < program\n\n\n\n\n\u3067\u306f\u3053\u306e\u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u4f5c\u3063\u3066\u3044\u3053\u3046\u3002\nmain :: IO ()\nmain = do\n  pg <- getContents\n  opts <- getArgs\n  let (clock, iport) = parseOpts opts\n  putStrLn (\"clock \" ++ (show clock) ++ \" sec; I/P \" ++ toStr iport)\n  -- CLR(1),CF(1),A(4),B(4),OP(4),PC(4)\n  let stat = toBits \"011000010011000010\"\n  loop 0 clock lc_td4 stat iport (createRom pg)\n\ngetContents\u3067\u6a19\u6e96\u5165\u529b\u3092\u8aad\u307f\u3001getArgs\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d6\u308a\u8fbc\u3080\u3002\u3069\u3061\u3089\u3082\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3060\u3002parseOpts\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u89e3\u6790\u3057\u3066\u3044\u308b\u3002\nparseOpts\u306f\u6b21\u306e\u901a\u308a\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u6570\u306b\u5fdc\u3058\u3066\u305d\u306e\u5024\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u3063\u305f\u308a\u3057\u3066\u3044\u308b\u3002\ndefClock :: Double\ndefClock = 1.0              -- default clock time = 1 sec\ndefInput :: [Bin]\ndefInput  = toBits \"0000\"   -- default value of Input port\n\nparseOpts :: [String] -> (Double, [Bin])\nparseOpts [] = (defClock, defInput)\nparseOpts (x:[]) = ((read :: String -> Double) x, defInput)\nparseOpts (x:y:_) = ((read :: String -> Double) x, toBits y)\n\n\u6b21\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306e\u6574\u5f62\u306b\u3064\u3044\u3066\u3060\u3002\u4e0a\u8a18\u4ed5\u69d8\u3067\u306f\u30d3\u30c3\u30c8\u306e\u4e26\u3073\u306fMSB...LSB\u3060\u304c\u3001\u3053\u308c\u307e\u3067\u4f5c\u3063\u3066\u304d\u305f\u8ad6\u7406\u56de\u8def\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001\u5165\u529b(Bin\u306e\u914d\u5217)\u304c\u5168\u3066LSB...MSB\u306e\u9806\u3060\u3002\u305d\u3053\u3067\u524d\u3082\u3063\u3066\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3066\u304a\u3053\u3046\u3002\u305d\u308c\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u304ccreateRom\u3002\ncreateRom :: String -> [Bin]\ncreateRom rs = concat $ map reverse $ split8 rs'\n  where\n    rs' = take 128 (toBits rs ++ repeat sLO)   -- 128 bits = 16 bytes\n\n\u305d\u306e\u307e\u3093\u307e\u3060\u304c\u3002\u3002\u3002\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092toBits\u3067Bin\u306e\u914d\u5217\u306b\u3057\u3001\u8db3\u308a\u306a\u3051\u308c\u3070sLO(=0)\u3092\u4ed8\u3051\u52a0\u3048\u3066\u3001\u5148\u982d\u304b\u308916 bytes\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u5927\u96d1\u628a\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u306a\u306e\u306fHaskell\u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u304a\u304b\u3052\u3060\u306a\u3041\u3002\u3061\u306a\u307f\u306btoBits\u306f0\u30681\u4ee5\u5916\u306e\u6587\u5b57\u306f\u7121\u8996\u3059\u308b\u306e\u3067\u3001\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3084\u6539\u884c\u304c\u3042\u3063\u3066\u3082\u554f\u984c\u306a\u3044\u3002\u3042\u3068\u306f8 bits\u5358\u4f4d\u306b\u5207\u308a\u51fa\u3057\u3066\u305d\u308c\u305e\u308c\u3092\u9006\u9806\u306b\u4e26\u3079\u66ff\u3048\u308c\u3070\u5b8c\u6210\u3060\u3002\n\u3055\u3042\u3001\u3044\u3088\u3044\u3088CPU\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u99c6\u52d5\u3059\u308b(\u547c\u3073\u51fa\u3059)\u3068\u3053\u308d\u3060\u3002\u3053\u308c\u306f\u300c\u30af\u30ed\u30c3\u30af\u306e\u7acb\u3061\u4e0a\u304c\u308a\u300d\u306e\u305f\u3073\u306b\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u7121\u9650\u30eb\u30fc\u30d7\u3067\u3042\u308b\u3002\u524d\u56de\u307e\u3067\u306b\u89e3\u8aac\u3057\u305f\u3088\u3046\u306b\u72b6\u614b\u306fCPU\u306e\u5916\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u306e\u3067\u3001\u5165\u529b\u306fCPU\u306e\u72b6\u614b+ROM\u306e\u5185\u5bb9\u3001\u51fa\u529b\u306fCPU\u306e\u6700\u65b0\u72b6\u614b\u3060\u3002\u305d\u308c\u3092\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3060\u3002\u51fa\u529b\u5024\u3092\u6b21\u306e\u5165\u529b\u5024(\u306e\u4e00\u90e8)\u306b\u4f7f\u3046\u306e\u3067\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u826f\u3055\u305d\u3046\u3060\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306aloop\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\nloop :: Int -> Double -> LogicCircuit -> [Bin] -> [Bin] -> [Bin] -> IO ()\nloop s w lc st ip pg = do\n  let os = lc (st ++ ip ++ pg)\n  putStatus s os\n  threadDelay $ floor (w * 1000 * 1000)\n  -- set CLR to HI and take status from output\n  let st' = [sHI] ++ (take 17 os)\n  loop (s+1) w lc st' ip pg\n\n\u30af\u30ed\u30c3\u30af\u306e\u5ea6\u306b\u72b6\u614b\u3092\u753b\u9762\u306b\u51fa\u529b\u3057\u305f\u3044\u306e\u3067\u3001\u30eb\u30fc\u30d7\u306e\u6570(=\u30b9\u30c6\u30c3\u30d7\u6570s)\u3092\u5f15\u6570\u306e\u6700\u521d\u306b\u5165\u308c\u3066\u3044\u308b\u3002\u6b21\u306f\u30af\u30ed\u30c3\u30af\u9593\u9694w\u30013\u756a\u76ee(lc)\u304cCPU\u3092\u8868\u3059\u95a2\u6570(\u4ee5\u5f8c\u3001CPU\u95a2\u6570\u3068\u547c\u307c\u3046)\u3060\u3002CPU\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u300c\u72b6\u614b\u300d\u300c\u5165\u529b\u30dd\u30fc\u30c8\u5024\u300d\u300cROM\u300d\u306e3\u3064\u3002\n\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u5f97\u305f\u51fa\u529b\u3092\u753b\u9762\u306b\u8868\u793a(putStatus)\u3057\u3001\u30af\u30ed\u30c3\u30af\u9593\u9694\u3060\u3051\u5f85\u3061(threadDelay)\u3001\u72b6\u614b\u3092\u66f4\u65b0\u3057\u3066\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u547c\u3073\u51fa\u3059\u3002\u3053\u306e\u7e70\u308a\u8fd4\u3057\u3002\n\u6b21\u56de\u306e\u5165\u529b\u5024\u3092\u4f5c\u3063\u3066\u3044\u308b\u5c11\u3005\u5947\u5999\u306a\u90e8\u5206\u306b\u3064\u3044\u3066\u3002\n  let st' = [sHI] ++ (take 17 os)\n\n\u5165\u529b\u306e\u6700\u521d\u306e\u5024\u304c\u300c\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u300d\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u304cLO\u3060\u3068\u30ea\u30bb\u30c3\u30c8\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3060\u304b\u3089\u4e00\u756a\u6700\u521d\u306e\u547c\u3073\u51fa\u3057\u4ee5\u5916\u306fHI\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u3042\u3068\u3001\u51fa\u529b\u5024\u304b\u3089\u5148\u982d\u306e17\u500b\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u304c\u3053\u308c\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\ncarry\u30d5\u30e9\u30b0(1 bit)\nA\u30ec\u30b8\u30b9\u30bf(4 bit)\nB\u30ec\u30b8\u30b9\u30bf(4 bit)\n\u51fa\u529b\u30dd\u30fc\u30c8\u5024(4 bit)\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf(4 bit)\n\n\u3053\u308c\u3067\"\u8a55\u4fa1\u30dc\u30fc\u30c9\"(?)\u304c\u3067\u304d\u305f\u3002\u65e9\u901f\u30c0\u30df\u30fc\u306eCPU\u95a2\u6570\u3067\u52d5\u304b\u3057\u3066\u307f\u3088\u3046\u3002\u4e2d\u8eab\u306f\u4f55\u3082\u305b\u305a\u5165\u529b\u3092\u51fa\u529b\u306b\u56de\u3059\u3060\u3051\u3002\nlc_td4_st0 :: LogicCircuit\nlc_td4_st0 xs = concat [cf, a, b, op, pc]\n  where\n    [_, cf, a, b, op, pc, _, _] = splitInput xs\n\nsplitInput :: [Bin] -> [[Bin]]\nsplitInput xs = [cl, cf, a, b, op, pc, ip, rom]\n  where\n    (cl, xs0) = splitAt 1 xs\n    (cf, xs1) = splitAt 1 xs0\n    (a , xs2) = splitAt 4 xs1\n    (b , xs3) = splitAt 4 xs2\n    (op, xs4) = splitAt 4 xs3\n    (pc, xs5) = splitAt 4 xs4\n    (ip, rom) = splitAt 4 xs5\n\nsplitInput\u3067\u5206\u5272\u3057\u3066\u5fc5\u8981\u306a\u3082\u306e\u3092\u53d6\u308a\u51fa\u3057\u3066\u4e26\u3079\u3066\u3044\u308b\u3060\u3051\u3002\u3055\u3042\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n$ cabal configure\nResolving dependencies...\nConfiguring mkcpu-0.1.0.0...\n\n$ cabal build\nBuilding mkcpu-0.1.0.0...\nPreprocessing executable 'td4' for mkcpu-0.1.0.0...\n[7 of 7] Compiling Main             ( src/Main-td4.hs, dist/build/td4/td4-tmp/Main.o )\nLinking dist/build/td4/td4 ...\n\n$ echo \"0000\" | dist/build/td4/td4 \nclock 1.0 sec; I/P 0000\nstep 0; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 1; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 2; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 3; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 4; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 5; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\n^C\n\n\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306e\u72b6\u614b\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3002\u3061\u306a\u307f\u306b\u305d\u306e\u9069\u5f53\u306a\u5024\u306f\u3001\u5b9f\u306fmain\u306e\u4e2d\u3067\u6307\u5b9a\u3057\u3066\u3042\u308b\u3002\n  -- CLR(1),CF(1),A(4),B(4),OP(4),PC(4)\n  let stat = toBits \"011000010011000010\"\n  loop 0 clock lc_td4_st0 stat iport (createRom pg)\n\n\u3053\u306estat\u3060\u3002A\u3001B\u3001OP\u3001PC\u306e\u5024\u306f\u305d\u308c\u305e\u308c1\u30012\u30013\u30014\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u308b\u306e\u3060\u3002\u5148\u8ff0\u306e\u901a\u308a\u4e00\u756a\u6700\u521d\u306e\u30d3\u30c3\u30c8\u306f\u30ea\u30bb\u30c3\u30c8(CLR)\u3067\u3042\u308a\u3001\u6700\u521d\u3060\u3051\u306f'0'\u306b\u3057\u3066\u3042\u308b\u3002\u304c\u3001\u3053\u306e\u4f55\u3082\u3057\u306a\u3044\u30c0\u30df\u30fcCPU\u3067\u306f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u304c\u4f7f\u308f\u308c\u306a\u3044\u306e\u3067A\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306f\u521d\u671f\u5024\u304c\u5165\u3063\u305f\u307e\u307e(\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u306e)\u3060\u3002\n\u514e\u306b\u3082\u89d2\u306b\u3082\u3001\u307e\u305a\u306fCPU\u3092\u99c6\u52d5\u3059\u308b\u5468\u8fba\u56de\u8def\u306b\u76f8\u5f53\u3059\u308b\u90e8\u5206\u306f\u4e00\u5fdc\u52d5\u3044\u305f\u3088\u3046\u3060\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066CPU\u3092\u6700\u7d42\u5f62\u307e\u3067\u7d44\u307f\u7acb\u3066\u3066\u3044\u3053\u3046\u3002\n\n\u30b9\u30c6\u30c3\u30d7 1: \u30ec\u30b8\u30b9\u30bf\u306e\u4f7f\u7528\nCPU\u306f\u672c\u6765\u72b6\u614b\u3092\u4fdd\u6301\u3057\u305f\u308a\u66f4\u65b0\u3057\u305f\u308a\u3057\u3066\u51e6\u7406\u3092\u9032\u3081\u3066\u3044\u304f\u3082\u306e\u3060\u3002\u72b6\u614b\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u4ee5\u524d\u306e\u56de\u3067\u66f8\u3044\u305f\u3088\u3046\u306b\u3001CPU\u306e1\u30b5\u30a4\u30af\u30eb\u306e\u6700\u7d42\u6bb5\u968e\u3067\u30ec\u30b8\u30b9\u30bf\u3092\u66f4\u65b0(\u3082\u3057\u304f\u306f\u4fdd\u6301)\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u90e8\u5206\u3060\u3051\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002\u524d\u56de\u793a\u3057\u305f\u30d6\u30ed\u30c3\u30af\u56f3\u3067\u306f\u4e00\u756a\u53f3\u7aef\u306b\u3042\u308b\u90e8\u5206\u3060\u3002\n\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3002\nlc_td4_st1 :: LogicCircuit\nlc_td4_st1 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, cf, a, b, op, pc, _, _] = splitInput xs\n    v0  = toBits \"0000\"\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ cf)\n    a'  = lc_register4 (cl ++ [sHI] ++ a  ++ v0)\n    b'  = lc_register4 (cl ++ [sHI] ++ b  ++ v0)\n    op' = lc_register4 (cl ++ [sHI] ++ op ++ v0)\n    pc' = lc_counter4  (cl ++ [sHI] ++ pc ++ v0)\n\n\u5165\u529b\u3092\u5207\u308a\u51fa\u3059\u90e8\u5206\u306f\u540c\u3058\u3002v0\u306f\u30c0\u30df\u30fc\u5024\u3060\u3002\u30d5\u30e9\u30b0\u3084\u30ec\u30b8\u30b9\u30bf\u306e\u5165\u529b\u5024\u3092\u305d\u308c\u305e\u308c\u30ec\u30b8\u30b9\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u30ab\u30a6\u30f3\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u5165\u308c\u3066\u3044\u308b\u3060\u3051\u3060\u3002\u307e\u305f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7(cl)\u3082\u305d\u308c\u305e\u308c\u306b\u5165\u308c\u3066\u3044\u308b\u3002\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n$ echo \"0000\" | dist/build/td4/td4 \nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0000][B:0000][OP:0000][PC:0001]\nstep 2; [CF:0][A:0000][B:0000][OP:0000][PC:0010]\nstep 3; [CF:0][A:0000][B:0000][OP:0000][PC:0011]\nstep 4; [CF:0][A:0000][B:0000][OP:0000][PC:0100]\nstep 5; [CF:0][A:0000][B:0000][OP:0000][PC:0101]\n^C\n\n\u30b9\u30c6\u30c3\u30d70\u306e\u7d50\u679c\u3068\u306f\u3060\u3044\u3076\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u307e\u305a\u3001\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u304c\u5165\u3063\u305f\u305f\u3081\u3001A\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306e\u521d\u671f\u5165\u529b\u5024\u306f\u4e00\u65e6\u30af\u30ea\u30a2\u3055\u308c\u30660\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\u3055\u3089\u306b\u3001\u30b9\u30c6\u30c3\u30d7\u304c\u9032\u3080\u6bce\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf(PC)\u304c\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b!\u30ab\u30a6\u30f3\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u524d\u306b\u4f5c\u3063\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u304b\u3089\u5f53\u7136\u3053\u3046\u306a\u308b\u306e\u3060\u304c\u3001\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u3053\u306e\u51fa\u529b\u306b\u306a\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u5b09\u3057\u3044! (CPU\u304c\u52d5\u3044\u3066\u3044\u308b\u305e\u3001\u3068\u3044\u3046\u611f\u3058\u304c\u3059\u308b)\n\n\u30b9\u30c6\u30c3\u30d7 2: \u52a0\u7b97\u5668\u306e\u8ffd\u52a0\n\u6b21\u306b\u52a0\u7b97\u5668\u3092\u53d6\u308a\u4ed8\u3051\u3088\u3046\u3002\u52a0\u7b97\u5668\u306b\u306f\u5165\u529b\u304c2\u3064\u5fc5\u8981\u3060\u304c\u3001\u72b6\u614b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306bA\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u4f7f\u3046\u3002\u3082\u3046\u4e00\u65b9\u306e\u5024\u306fROM\u304b\u3089\u7121\u7406\u3084\u308a\u53d6\u308a\u51fa\u305d\u3046\u3002ROM\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u3092\u3064\u306a\u3044\u30670\u756a\u5730\u304b\u3089\u9806\u306b\u5024\u3092\u53d6\u308a\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u53d6\u308a\u51fa\u3057\u305f8bit\u304b\u3089\u4e0b4bit\u3092\u4f7f\u3063\u3066A\u30ec\u30b8\u30b9\u30bf\u306b\u8db3\u3057\u3001\u7d50\u679c\u304cA\u30ec\u30b8\u30b9\u30bf\u5165\u308b\u3088\u3046\u306b\u914d\u7dda\u3059\u308b\u3002\u3082\u3061\u308d\u3093carry\u30d5\u30e9\u30b0\u3082\u66f4\u65b0\u3059\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3046\u3060\u3002\nlc_td4_st2 :: LogicCircuit\nlc_td4_st2 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, _, a, b, op, pc, _, rom] = splitInput xs\n    rdata = lc_rom16 (pc ++ rom) -- get data addressed by PC\n    v0  = toBits \"0000\"\n    im  = take 4 rdata\n    (s0, c0) = splitAt 4 $ lc_adder (a ++ im)\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ c0)\n    a'  = lc_register4 (cl ++ [sLO] ++ a  ++ s0)\n    b'  = lc_register4 (cl ++ [sHI] ++ b  ++ v0)\n    op' = lc_register4 (cl ++ [sHI] ++ op ++ v0)\n    pc' = lc_counter4  (cl ++ [sHI] ++ pc ++ v0)\n\n4\u884c\u76ee\u3067ROM\u306e\u73fe\u5728\u756a\u5730\u306e\u5024\u304b\u3089\u4e0b4bit\u3092\u53d6\u308a\u51fa\u3057\u30015\u884c\u76ee(lc_adder\u306e\u3042\u308b\u884c)\u3067A\u30ec\u30b8\u30b9\u30bf\u3068\u8db3\u3057\u3042\u308f\u305b\u3066\u3044\u308b\u3002\u305d\u308c\u3092s0, c0\u306b\u3057\u3066\u305d\u308c\u305e\u308cA\u30ec\u30b8\u30b9\u30bf\u3068carry\u30d5\u30e9\u30b0\u3078\u5165\u308c\u3066\u3044\u308b\u3002A\u30ec\u30b8\u30b9\u30bf\u306e\u65b9\u306f\u5f15\u6570\u306e2\u3064\u76ee(\u30ec\u30b8\u30b9\u30bf\u306eLD\u5165\u529b)\u3092HI\u3067\u306f\u306a\u304fLO\u306b\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3067\u306f\u306a\u304f\u5916\u304b\u3089\u5165\u3063\u305f\u5024(s0)\u3092\u30bb\u30c3\u30c8\u3059\u308b\u305f\u3081\u3060\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0(\u3068\u306f\u8a00\u3048\u306a\u3044\u304c)\u306f\u4e0b4\u6841\u306b\u52a0\u7b97\u3057\u305f\u3044\u6570\u5b57\u3092\u8a18\u8f09\u3057\u3066\u3044\u308b\u3002\u4e0a\u304b\u3089\u30011,2,3,4,5,1\u3067\u3042\u308b\u3002\n$ cat program\n00000001\n00000010\n00000011\n00000100\n00000101\n00000001\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n$ dist/build/td4/td4 < program\nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0001][B:0000][OP:0000][PC:0001]\nstep 2; [CF:0][A:0011][B:0000][OP:0000][PC:0010]\nstep 3; [CF:0][A:0110][B:0000][OP:0000][PC:0011]\nstep 4; [CF:0][A:1010][B:0000][OP:0000][PC:0100]\nstep 5; [CF:0][A:1111][B:0000][OP:0000][PC:0101]\nstep 6; [CF:1][A:0000][B:0000][OP:0000][PC:0110]\n^C\n\n1\u304b\u30895\u307e\u3067\u8db3\u3059\u3068A\u30ec\u30b8\u30b9\u30bf\u304c\u6700\u5927\u5024\u306e15\u306b\u306a\u308a\u3001\u305d\u3053\u306b1\u3092\u8db3\u305b\u3070carry\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066A\u304c0\u306b\u306a\u308b\u3068\u3044\u3046\u5bf8\u6cd5\u3060\u304c\u3001CPU\u306e\u51fa\u529b\u3082\u78ba\u304b\u306b\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u307e\u3067\u30b9\u30e9\u30b9\u30e9\u9032\u3093\u3067\u3044\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u5165\u529b\u5024\u306e\u533a\u5207\u308a\u4f4d\u7f6e\u3092\u9593\u9055\u3063\u3066\u3044\u305f\u308a\u3001\u5165\u529b\u3068\u51fa\u529b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u5e8f\u3092\u9593\u9055\u3063\u3066\u3044\u305f\u308a\u3057\u3066\u3001\u4f55\u5ea6\u3082\u51fa\u529b\u304c\u4e88\u60f3\u5916\u306b\u306a\u3063\u3066\u30d0\u30b0\u53d6\u308a\u304c\u5927\u5909\u3060\u3063\u305f\u3002\u5b9f\u969b\u306e\u96fb\u5b50\u5de5\u4f5c\u3067\u306f\u300c\u914d\u7dda\u9593\u9055\u3044\u300d\u306b\u76f8\u5f53\u3059\u308b\u306e\u3060\u308d\u3046\u304b\u3002\u3002\u3002\n\n\u30b9\u30c6\u30c3\u30d73\u306e\u524d\u306b(\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u9078\u629e)\n\u3044\u3088\u3044\u3088\u5168\u4f53\u3092\u7d44\u307f\u4e0a\u3052\u308b\u308f\u3051\u3060\u304c\u3001\u305d\u306e\u524d\u306b\u52a0\u7b97\u5668\u3078\u306e\u5165\u529b(\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u5de6\u5074\u306b\u4e26\u3076A,B\u30ec\u30b8\u30b9\u30bf\u3068\u5165\u529b\u30dd\u30fc\u30c8\u5024\u3001\u304a\u3088\u30730)\u3092\u5207\u308a\u66ff\u3048\u308b\u90e8\u5206\u3092\u8003\u3048\u3088\u3046\u3002\u3053\u308c\u306b\u306f\u4ee5\u524d\u4f5c\u3063\u305fmultiplexer\u304c\u4f7f\u3048\u308b\u3002\u5165\u529b\u5024\u306f4bit\u306a\u306e\u3067\u3001multiplexer\u30924\u3064\u3001\u5165\u529b\u5024\u306e\u5404\u6841\u7528\u306b\u4e26\u3079\u308c\u3070\u3088\u3044\u3002\nselectInput :: [Bin] -> [Bin] -> [Bin] -> [Bin] -> [Bin] -> [Bin]\nselectInput s a b ip z = concat $ map (\\x -> lc_multiplexer4ch (s ++ x)) mi\n  where\n    mi = buildMultiplexerInput [a, b, ip, z]\n\n    buildMultiplexerInput :: [[Bin]] -> [[Bin]]\n    buildMultiplexerInput xs = map (\\i -> pickBit i xs) [0..3]\n\n    pickBit :: Int -> [[Bin]] -> [Bin]\n    pickBit i xs = map (!!i) xs\n\n\u6700\u521d\u306e\u5f15\u6570s\u3067\u3069\u306e\u5165\u529b\u5024\u3092\u4f7f\u3046\u304b\u3092\u6307\u5b9a\u3059\u308b\u3002\u3042\u3068\u306f\u5165\u529b\u5024\u306e\u5404\u6841\u3092\u96c6\u3081\u3066\u304d\u3066multiplexer\u3078\u5165\u308c\u3066\u3084\u308c\u3070\u3001s\u304c\u9078\u629e\u3059\u308b\u5165\u529b\u5024\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3002\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u3002\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n>>> let a  = toBits \"1000\"\n>>> let b  = toBits \"0110\"\n>>> let ip = toBits \"0001\"\n>>> toStr $ selectInput [sLO, sLO] a b ip zero\n\"1000\"\n>>> toStr $ selectInput [sHI, sLO] a b ip zero\n\"0110\"\n>>> toStr $ selectInput [sLO, sHI] a b ip zero\n\"0001\"\n>>> toStr $ selectInput [sHI, sHI] a b ip zero\n\"0000\"\n\n\u3044\u3088\u3044\u3088\u6700\u5f8c\u306e\u7d44\u307f\u7acb\u3066\u3092\u6b8b\u3059\u306e\u307f\u3002\n\n\u30b9\u30c6\u30c3\u30d7 3: CPU\u306e\u7d44\u307f\u7acb\u3066\n\u3055\u3042\u3001\u6700\u7d42\u6bb5\u968e\u306b\u304d\u305f\u3002ROM\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u547d\u4ee4\u3092\u547d\u4ee4\u30c7\u30b3\u30fc\u30c0\u3078\u5165\u308c\u3001\u5165\u529b\u5024\u3092\u9078\u629e\u3057\u3001\u52a0\u7b97\u5668\u3092\u901a\u3057\u3066\u7d50\u679c\u3092\u3069\u3053\u306b\u66f8\u304d\u51fa\u3059\u304b\u3092\u547d\u4ee4\u30c7\u30b3\u30fc\u30c0\u306b\u6307\u793a\u3055\u305b\u308c\u3070\u3088\u3044\u306e\u3060\u3002\u4ee5\u4e0b\u304c\u6700\u7d42\u306eCPU\u306e\u30b3\u30fc\u30c9\u3060\u3002\nlc_td4 :: LogicCircuit\nlc_td4 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, cf, a, b, op, pc, ip, rom] = splitInput xs\n    rdata = lc_rom16 (pc ++ rom)\n    (im, inst) = splitAt 4 rdata\n    [sa, sb, ld0, ld1, ld2, ld3] = lc_inst_decorder (inst ++ cf)\n    (s0, c0) = splitAt 4 $ lc_adder ((selectInput [sa, sb] a b ip zero) ++ im)\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ c0)\n    a'  = lc_register4 (cl ++ [ld0] ++ a  ++ s0)\n    b'  = lc_register4 (cl ++ [ld1] ++ b  ++ s0)\n    op' = lc_register4 (cl ++ [ld2] ++ op ++ s0)\n    pc' = lc_counter4  (cl ++ [ld3] ++ pc ++ s0)\n\nROM\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u547d\u4ee4\u3092\u30c7\u30b3\u30fc\u30c0\u306b\u5165\u308c\u3001\u305d\u306e\u7d50\u679c\u3092\u52a0\u7b97\u5668\u3068\u5404\u30ec\u30b8\u30b9\u30bf\u3078\u3064\u306a\u3044\u3067\u3044\u308b\u3002\u30b9\u30c6\u30c3\u30d72\u3068\u306e\u5dee\u306f\u305d\u308c\u3050\u3089\u3044\u3060\u304c\u3001\u3053\u308c\u3067\u5b8c\u6210\u3060\u3002\u610f\u5916\u3068\u3042\u3063\u3051\u306a\u304f\u51fa\u6765\u4e0a\u304c\u3063\u305f\u3002\n\u3055\u3059\u304c\u306b\u5404\u547d\u4ee4\u306e\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\u4ee5\u4e0b\u304c\u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u3060(ADD A,Im \u3068 MOV A,B)\u3002\u5177\u4f53\u7684\u306a\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u4e0e\u3048\u7d50\u679c\u3092\u60f3\u5b9a\u3068\u6bd4\u8f03\u3059\u308b\u3001\u3053\u308c\u307e\u3067\u4f5c\u3063\u3066\u304d\u305f\u8ad6\u7406\u56de\u8def\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u540c\u3058\u3060\u3002\n>>> let rom0 = take ((16-1) * 8) $ repeat '0'\n\n>>> -- ADD A,Im (A=1, Im=4 -> A=5, CF=0)\n>>> toStr $ lc_td4 $ toBits (\"10 1000 0000 0000 0000 0000 00100000\" ++ rom0)\n\"01010000000001000\"\n\n>>> -- ADD A,Im (A=13, Im=4 -> A=1, CF=1)\n>>> toStr $ lc_td4 $ toBits (\"10 1011 0000 0000 0000 0000 00100000\" ++ rom0)\n\"11000000000001000\"\n\n>>> -- MOV A,B (A=13, B=3 -> A=3)\n>>> toStr $ lc_td4 $ toBits (\"10 1011 1100 0000 0000 0000 00001000\" ++ rom0)\n\"01100110000001000\"\n\n\u3055\u3042\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u3066\u307f\u3088\u3046! \u672c\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u30e9\u30fc\u30e1\u30f3\u30bf\u30a4\u30de\u30fc\u3092\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\u3046\u307e\u304f\u3044\u3051\u3070\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u529b\u30dd\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u306f\u305a\u3060\u3002\n[0111] -> [0110] -> [0100](\u70b9\u6ec5) -> [1000]\n\n\u672c\u306b\u306f\"\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\"\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u30cf\u30f3\u30c9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u305f\u7d50\u679c\u304c\u3053\u308c\u3002\n10110111\n00000001\n11100001\n00000001\n11100011\n10110110\n00000001\n11100110\n00000001\n11101000\n10110000\n10110100\n00000001\n11101010\n10111000\n11111111\n\n\u3053\u308c\u3092\u30d5\u30a1\u30a4\u30eb(program.ramen)\u306b\u66f8\u3044\u3066td4\u306b\u98df\u308f\u305b\u308c\u3070\u3088\u3044\u3002\n$ dist/build/td4/td4 < program.ramen\nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0000][B:0000][OP:0111][PC:0001]\nstep 2; [CF:0][A:0001][B:0000][OP:0111][PC:0010]\n  :\nstep 31; [CF:0][A:1111][B:0000][OP:0111][PC:0001]\nstep 32; [CF:1][A:0000][B:0000][OP:0111][PC:0010]\nstep 33; [CF:0][A:0000][B:0000][OP:0111][PC:0011]\n  :\nstep 63; [CF:0][A:1111][B:0000][OP:0111][PC:0011]\nstep 64; [CF:1][A:0000][B:0000][OP:0111][PC:0100]\nstep 65; [CF:0][A:0000][B:0000][OP:0111][PC:0101]\nstep 66; [CF:0][A:0000][B:0000][OP:0110][PC:0110]\n  :\nstep 96; [CF:0][A:1111][B:0000][OP:0110][PC:0110]\nstep 97; [CF:1][A:0000][B:0000][OP:0110][PC:0111]\nstep 98; [CF:0][A:0000][B:0000][OP:0110][PC:1000]\n  :\nstep 128; [CF:0][A:1111][B:0000][OP:0110][PC:1000]\nstep 129; [CF:1][A:0000][B:0000][OP:0110][PC:1001]\nstep 130; [CF:0][A:0000][B:0000][OP:0110][PC:1010]\nstep 131; [CF:0][A:0000][B:0000][OP:0000][PC:1011]\nstep 132; [CF:0][A:0000][B:0000][OP:0100][PC:1100]\n  :\nstep 192; [CF:0][A:1111][B:0000][OP:0100][PC:1100]\nstep 193; [CF:1][A:0000][B:0000][OP:0100][PC:1101]\nstep 194; [CF:0][A:0000][B:0000][OP:0100][PC:1110]\nstep 195; [CF:0][A:0000][B:0000][OP:1000][PC:1111]\n  :\n\n\u547d\u4ee4\u7a2e\u3084\u30d3\u30c3\u30c8\u6570\u306b\u5236\u9650\u304c\u3042\u308a\u6b63\u78ba\u306b3\u5206\u3068\u306f\u3044\u304b\u306a\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u60f3\u5b9a\u3057\u305f\u3068\u304a\u308a\u306e\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u610f\u5916\u306b\u3046\u308c\u3057\u3044\u3082\u306e\u3060!\n\n\u307e\u3068\u3081\n\u3084\u3063\u3068CPU\u304c\u5b8c\u6210\u3057\u305f!\u6a5f\u80fd\u7684\u306b\u306f\u304b\u306a\u308a\u4f4e\u30ec\u30d9\u30eb\u3067\u306f\u3042\u308b\u304c\u3001\u672c\u5f53\u306b\u8ad6\u7406\u56de\u8def\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3051\u3067CPU\u3068\u3044\u3046\u8907\u96d1\u306a\u4ed5\u7d44\u307f\u304c\u6210\u308a\u7acb\u3063\u3066\u3044\u3066\u52d5\u304f\u306e\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3002\u6700\u521d\u306b\u8003\u3048\u51fa\u3057\u305f\u4eba\u306f\u672c\u5f53\u306b\u3059\u3054\u3044!\n\u3068\u3053\u308d\u3067\u3001\u4eca\u56de\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u300cHaskell\u306a\u3089\u3067\u306f\u300d\u3068\u3044\u3046\u306e\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u306a\u3042\u3068\u601d\u3046\u3002\u8ad6\u7406\u7684\u306a\u51e6\u7406\u306f\u8ad6\u7406\u30b2\u30fc\u30c8\u3068\u305d\u306e\u914d\u7dda\u3067\u6c7a\u307e\u308b\u306e\u3067\u3001Haskell\u3089\u3057\u3055\u306f\u300c\u914d\u7dda\u300d\u306b\u76f8\u5f53\u3059\u308b\u51e6\u7406\u3050\u3089\u3044\u3060(\u8907\u6570\u306e\u914d\u7dda\u3092map\u3067\u4e00\u62ec\u51e6\u7406\u3059\u308b\u3068\u304b)\u3002\u305d\u308c\u3082\u3042\u3063\u3066\u304b\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7684\u306b\u306f\u6de1\u3005\u3068\u4e26\u3079\u305f\u3060\u3051\u306b\u7d42\u308f\u3063\u305f\u6c17\u3082\u3059\u308b\u3002Haskell\u306e\u3082\u3063\u3068\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u4eca\u3088\u308a\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u8a18\u8ff0\u304c\u3067\u304d\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u305d\u308c\u306f\u3082\u3063\u3068\"\u4f7f\u3048\u308b\"\u3088\u3046\u306b\u306a\u3063\u3066\u304b\u3089\u8003\u3048\u3088\u3046\u3002\n\u3055\u3066\u3053\u306e\u5148\u3060\u304c\u3001\n\n8bit\u5316: \u30ec\u30b8\u30b9\u30bf\u3084\u52a0\u7b97\u5668\u30671bit\u306e\u90e8\u54c1\u30924\u500b\u304b\u30898\u500b\u306b\u5897\u3084\u305b\u3070\u3088\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u306f\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5897\u3084\u3059\u3060\u3051\u306a\u306e\u3067\u304b\u306a\u308a\u7c21\u5358\u306a\u306f\u305a\u3002\n\u52a0\u7b97\u4ee5\u5916\u306e\u547d\u4ee4: \u672c\u306b\u3082\u8a18\u8f09\u304c\u3042\u308b\u304c\u672c\u683c\u7684\u306aALU\u3092\u7528\u610f\u3059\u308c\u3070\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u3067\u304d\u308b\u3053\u3068\u304c\u5897\u3048\u308b\u3002\ni4004\u306e\u88fd\u4f5c: \u56de\u8def\u56f3\u304c\u308f\u304b\u308c\u3070\u4eca\u56de\u3068\u540c\u69d8\u306b\u306a\u3093\u3067\u3082\u88fd\u4f5c\u3067\u304d\u305d\u3046\u3060(\u5c71\u306e\u3088\u3046\u306b\u6642\u9593\u304c\u3042\u308c\u3070)\u3002\u306a\u3089\u3070\u5b9f\u5728\u3059\u308b\u6709\u540d\u3069\u3053\u308d\u3092\u4f5c\u3063\u3066\u307f\u308b\u306e\u3082\u697d\u3057\u305d\u3046\u3002\n\n\u306a\u3069\u306f\u624b\u304c\u3064\u3051\u3089\u308c\u305d\u3046\u3060\u3002\u3053\u3046\u3044\u3063\u305f\u62e1\u5f35\u306f\u982d\u3067\u8003\u3048\u308b\u3060\u3051\u3067\u3082\u697d\u3057\u3044\u3082\u306e\u3060\u3002\n\u6b21\u56de\u3060\u304c\u3001\u3053\u306e\u30cd\u30bf\u306e\u304a\u307e\u3051\u3067\u4f55\u304bCPU\u95a2\u4fc2\u306b\u3059\u308b\u304b\u3001\u65b0\u3057\u3044\u30cd\u30bf\u306b\u3059\u308b\u304b\u3001\u3001\u3001\u3002\n(\u3053\u3053\u307e\u3067\u306e\u30bd\u30fc\u30b9)\n\u3055\u3042\u3001\u524d\u56de\u307e\u3067\u3067\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u51fa\u63c3\u3063\u305f\u3002\u4eca\u56de\u306f\u305d\u308c\u3089\u3092\u7d44\u307f\u7acb\u3066\u3066\u52d5\u304fCPU\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046! \u4e00\u6c17\u306b\u6700\u7d42\u5f62\u306f\u3057\u3093\u3069\u3044\u306e\u3067\u5c11\u3057\u305a\u3064\u30d4\u30fc\u30b9\u3092\u57cb\u3081\u3066\u3044\u304f\u611f\u3058\u3067\u9032\u3081\u3066\u3044\u304d\u305f\u3044\u3002\n\n\u306a\u304a\u3001\u3057\u3064\u3053\u3044\u3088\u3046\u3060\u304c\u3053\u3053\u3067\u4f5c\u3063\u3066\u3044\u308bCPU\u306f\u4ee5\u4e0b\u306e\u672c\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308bTD4\u3068\u3044\u3046\u540d\u524d\u306e\u30aa\u30ea\u30b8\u30ca\u30eb4bit CPU\u3060\u3002\u8aac\u660e\u4e2d\u306b`td4`\u3068\u51fa\u3066\u304f\u308b\u306e\u306f\u305d\u306e\u540d\u524d\u3067\u3042\u308b\u3002\n\n\u300cCPU\u306e\u5275\u308a\u304b\u305f\u300d\uff08\u6e21\u6ce2 \u90c1\u8457\u3001\u6bce\u65e5\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30ba\uff09\n\n## \u30b9\u30c6\u30c3\u30d7 0: \u96fb\u6e90\u3001\u30af\u30ed\u30c3\u30af\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\uff08\u306b\u76f8\u5f53\u3059\u308b\u3068\u3053\u308d\uff09\n\n\u3053\u308c\u307e\u3067\u8ad6\u7406\u56de\u8def\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u3084CPU\u5185\u306e\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\u3053\u3068\u3070\u304b\u308a\u3084\u3063\u3066\u304d\u3066\u3001\u5b9f\u884c\u3067\u304d\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3059\u308b\u90e8\u5206\u306b\u306f\u76ee\u3092\u7791\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u3055\u3059\u304c\u306b\u4eca\u56de\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u3092\u52d5\u304b\u3057\u305f\u3044\u306e\u3067\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u3002\n\n\u305d\u3053\u3067\u30b9\u30c6\u30c3\u30d70\u3068\u3057\u3066\u5b8c\u52d5\u3055\u305b\u308b\u305f\u3081\u306e\u5468\u8fba\u90e8\u5206\u3092\u4f5c\u3063\u3066\u3044\u3053\u3046\u3002\u96fb\u5b50\u5de5\u4f5c\u3067\u306f\u96fb\u6e90\u30e2\u30b8\u30e5\u30fc\u30eb\u3060\u3068\u304b\u30af\u30ed\u30c3\u30af\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3068\u304b\u305d\u306e\u4ed6\u306e\u30a2\u30ca\u30ed\u30b0\u56de\u8def\u90e8\u5206\u306b\u76f8\u5f53\u3059\u308b\u3060\u308d\u3046\u304b\u3002\n\n\u307e\u305a\u4ed5\u69d8\u3092\u5217\u6319\u3057\u3088\u3046\u3002\n\n* \u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f\u6a19\u6e96\u5165\u529b\u304b\u3089\u6295\u5165\u3059\u308b\u3002\n* \u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f'0'\u3068'1'\u306e\u9023\u7d9a\u3057\u305f\u6587\u5b57\u5217\u3068\u3059\u308b\u3002\u307e\u305f\u9593\u306b\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u304c\u3044\u304f\u3064\u5165\u3063\u3066\u3082\u3088\u3044\u3002\n* \u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306b\u304a\u3051\u308b\u30d3\u30c3\u30c8\u4e26\u3073\u306f(\u6163\u308c\u3066\u3044\u308b\u306e\u3067) MSB...LSB \u306e\u9806\u3068\u3059\u308b\u3002\n* \u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u304c4 bit \u306a\u306e\u3067\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306f16 bytes = 128\u6587\u5b57\u3002\u305f\u3060\u3057\u305d\u308c\u3088\u308a\u5c11\u306a\u3044\u5834\u5408\u306f'0'\u3067\u88dc\u586b\u3059\u308b\u3002\u591a\u3044\u5834\u5408\u306f\u5207\u308a\u6368\u3066\u308b\u3002\n* \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u9806\u306b\"\u30af\u30ed\u30c3\u30af\u9593\u9694\"\u3068\"\u5165\u529b\u30dd\u30fc\u30c8\"\u306e2\u3064\u3002\u7701\u7565\u53ef\u80fd\u3060\u304c\u3001\u30af\u30ed\u30c3\u30af\u9593\u9694\u3060\u3051\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n* \u30af\u30ed\u30c3\u30af\u9593\u9694\u306e\u5358\u4f4d\u306f\u79d2\u3001\u5c0f\u6570\u3082\u4f7f\u3048\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f1.0\u79d2\u3002\u5165\u529b\u30dd\u30fc\u30c8\u306f4\u6841\u306e\u4e8c\u9032\u6570\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\"0000\"\u3002\n    - \u4f8b) `td4 0.5 0101 < program`\n\n\u3067\u306f\u3053\u306e\u4ed5\u69d8\u306b\u57fa\u3065\u3044\u3066\u4f5c\u3063\u3066\u3044\u3053\u3046\u3002\n\n```haskell\nmain :: IO ()\nmain = do\n  pg <- getContents\n  opts <- getArgs\n  let (clock, iport) = parseOpts opts\n  putStrLn (\"clock \" ++ (show clock) ++ \" sec; I/P \" ++ toStr iport)\n  -- CLR(1),CF(1),A(4),B(4),OP(4),PC(4)\n  let stat = toBits \"011000010011000010\"\n  loop 0 clock lc_td4 stat iport (createRom pg)\n```\n\n`getContents`\u3067\u6a19\u6e96\u5165\u529b\u3092\u8aad\u307f\u3001`getArgs`\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d6\u308a\u8fbc\u3080\u3002\u3069\u3061\u3089\u3082\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3060\u3002`parseOpts`\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u89e3\u6790\u3057\u3066\u3044\u308b\u3002\n\n`parseOpts`\u306f\u6b21\u306e\u901a\u308a\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u6570\u306b\u5fdc\u3058\u3066\u305d\u306e\u5024\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u3063\u305f\u308a\u3057\u3066\u3044\u308b\u3002\n\n```haskell\ndefClock :: Double\ndefClock = 1.0              -- default clock time = 1 sec\ndefInput :: [Bin]\ndefInput  = toBits \"0000\"   -- default value of Input port\n\nparseOpts :: [String] -> (Double, [Bin])\nparseOpts [] = (defClock, defInput)\nparseOpts (x:[]) = ((read :: String -> Double) x, defInput)\nparseOpts (x:y:_) = ((read :: String -> Double) x, toBits y)\n```\n\n\u6b21\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306e\u6574\u5f62\u306b\u3064\u3044\u3066\u3060\u3002\u4e0a\u8a18\u4ed5\u69d8\u3067\u306f\u30d3\u30c3\u30c8\u306e\u4e26\u3073\u306fMSB...LSB\u3060\u304c\u3001\u3053\u308c\u307e\u3067\u4f5c\u3063\u3066\u304d\u305f\u8ad6\u7406\u56de\u8def\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001\u5165\u529b(Bin\u306e\u914d\u5217)\u304c\u5168\u3066LSB...MSB\u306e\u9806\u3060\u3002\u305d\u3053\u3067\u524d\u3082\u3063\u3066\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3066\u304a\u3053\u3046\u3002\u305d\u308c\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u304c`createRom`\u3002\n\n```haskell\ncreateRom :: String -> [Bin]\ncreateRom rs = concat $ map reverse $ split8 rs'\n  where\n    rs' = take 128 (toBits rs ++ repeat sLO)   -- 128 bits = 16 bytes\n```\n\n\u305d\u306e\u307e\u3093\u307e\u3060\u304c\u3002\u3002\u3002\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092`toBits`\u3067`Bin`\u306e\u914d\u5217\u306b\u3057\u3001\u8db3\u308a\u306a\u3051\u308c\u3070`sLO`(=0)\u3092\u4ed8\u3051\u52a0\u3048\u3066\u3001\u5148\u982d\u304b\u308916 bytes\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u5927\u96d1\u628a\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u306a\u306e\u306fHaskell\u306e\u9045\u5ef6\u8a55\u4fa1\u306e\u304a\u304b\u3052\u3060\u306a\u3041\u3002\u3061\u306a\u307f\u306b`toBits`\u306f0\u30681\u4ee5\u5916\u306e\u6587\u5b57\u306f\u7121\u8996\u3059\u308b\u306e\u3067\u3001\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3084\u6539\u884c\u304c\u3042\u3063\u3066\u3082\u554f\u984c\u306a\u3044\u3002\u3042\u3068\u306f8 bits\u5358\u4f4d\u306b\u5207\u308a\u51fa\u3057\u3066\u305d\u308c\u305e\u308c\u3092\u9006\u9806\u306b\u4e26\u3079\u66ff\u3048\u308c\u3070\u5b8c\u6210\u3060\u3002\n\n\u3055\u3042\u3001\u3044\u3088\u3044\u3088CPU\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u99c6\u52d5\u3059\u308b(\u547c\u3073\u51fa\u3059)\u3068\u3053\u308d\u3060\u3002\u3053\u308c\u306f\u300c\u30af\u30ed\u30c3\u30af\u306e\u7acb\u3061\u4e0a\u304c\u308a\u300d\u306e\u305f\u3073\u306b\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u7121\u9650\u30eb\u30fc\u30d7\u3067\u3042\u308b\u3002\u524d\u56de\u307e\u3067\u306b\u89e3\u8aac\u3057\u305f\u3088\u3046\u306b\u72b6\u614b\u306fCPU\u306e\u5916\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u306e\u3067\u3001\u5165\u529b\u306fCPU\u306e\u72b6\u614b+ROM\u306e\u5185\u5bb9\u3001\u51fa\u529b\u306fCPU\u306e\u6700\u65b0\u72b6\u614b\u3060\u3002\u305d\u308c\u3092\u30eb\u30fc\u30d7\u306b\u3057\u305f\u3044\u306e\u3060\u3002\u51fa\u529b\u5024\u3092\u6b21\u306e\u5165\u529b\u5024(\u306e\u4e00\u90e8)\u306b\u4f7f\u3046\u306e\u3067\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u826f\u3055\u305d\u3046\u3060\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a`loop`\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n```haskell\nloop :: Int -> Double -> LogicCircuit -> [Bin] -> [Bin] -> [Bin] -> IO ()\nloop s w lc st ip pg = do\n  let os = lc (st ++ ip ++ pg)\n  putStatus s os\n  threadDelay $ floor (w * 1000 * 1000)\n  -- set CLR to HI and take status from output\n  let st' = [sHI] ++ (take 17 os)\n  loop (s+1) w lc st' ip pg\n```\n\n\u30af\u30ed\u30c3\u30af\u306e\u5ea6\u306b\u72b6\u614b\u3092\u753b\u9762\u306b\u51fa\u529b\u3057\u305f\u3044\u306e\u3067\u3001\u30eb\u30fc\u30d7\u306e\u6570(=\u30b9\u30c6\u30c3\u30d7\u6570`s`)\u3092\u5f15\u6570\u306e\u6700\u521d\u306b\u5165\u308c\u3066\u3044\u308b\u3002\u6b21\u306f\u30af\u30ed\u30c3\u30af\u9593\u9694`w`\u30013\u756a\u76ee(`lc`)\u304cCPU\u3092\u8868\u3059\u95a2\u6570(\u4ee5\u5f8c\u3001CPU\u95a2\u6570\u3068\u547c\u307c\u3046)\u3060\u3002CPU\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u300c\u72b6\u614b\u300d\u300c\u5165\u529b\u30dd\u30fc\u30c8\u5024\u300d\u300cROM\u300d\u306e3\u3064\u3002\n\n\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u5f97\u305f\u51fa\u529b\u3092\u753b\u9762\u306b\u8868\u793a(`putStatus`)\u3057\u3001\u30af\u30ed\u30c3\u30af\u9593\u9694\u3060\u3051\u5f85\u3061(`threadDelay`)\u3001\u72b6\u614b\u3092\u66f4\u65b0\u3057\u3066\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u547c\u3073\u51fa\u3059\u3002\u3053\u306e\u7e70\u308a\u8fd4\u3057\u3002\n\n\u6b21\u56de\u306e\u5165\u529b\u5024\u3092\u4f5c\u3063\u3066\u3044\u308b\u5c11\u3005\u5947\u5999\u306a\u90e8\u5206\u306b\u3064\u3044\u3066\u3002\n\n```haskell\n  let st' = [sHI] ++ (take 17 os)\n```\n\n\u5165\u529b\u306e\u6700\u521d\u306e\u5024\u304c\u300c\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u300d\u3092\u8868\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u304cLO\u3060\u3068\u30ea\u30bb\u30c3\u30c8\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3060\u304b\u3089\u4e00\u756a\u6700\u521d\u306e\u547c\u3073\u51fa\u3057\u4ee5\u5916\u306fHI\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u3042\u3068\u3001\u51fa\u529b\u5024\u304b\u3089\u5148\u982d\u306e17\u500b\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u304c\u3053\u308c\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\n* carry\u30d5\u30e9\u30b0(1 bit)\n* A\u30ec\u30b8\u30b9\u30bf(4 bit)\n* B\u30ec\u30b8\u30b9\u30bf(4 bit)\n* \u51fa\u529b\u30dd\u30fc\u30c8\u5024(4 bit)\n* \u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf(4 bit)\n\n\u3053\u308c\u3067\"\u8a55\u4fa1\u30dc\u30fc\u30c9\"(?)\u304c\u3067\u304d\u305f\u3002\u65e9\u901f\u30c0\u30df\u30fc\u306eCPU\u95a2\u6570\u3067\u52d5\u304b\u3057\u3066\u307f\u3088\u3046\u3002\u4e2d\u8eab\u306f\u4f55\u3082\u305b\u305a\u5165\u529b\u3092\u51fa\u529b\u306b\u56de\u3059\u3060\u3051\u3002\n\n```haskell\nlc_td4_st0 :: LogicCircuit\nlc_td4_st0 xs = concat [cf, a, b, op, pc]\n  where\n    [_, cf, a, b, op, pc, _, _] = splitInput xs\n\nsplitInput :: [Bin] -> [[Bin]]\nsplitInput xs = [cl, cf, a, b, op, pc, ip, rom]\n  where\n    (cl, xs0) = splitAt 1 xs\n    (cf, xs1) = splitAt 1 xs0\n    (a , xs2) = splitAt 4 xs1\n    (b , xs3) = splitAt 4 xs2\n    (op, xs4) = splitAt 4 xs3\n    (pc, xs5) = splitAt 4 xs4\n    (ip, rom) = splitAt 4 xs5\n```\n\n`splitInput`\u3067\u5206\u5272\u3057\u3066\u5fc5\u8981\u306a\u3082\u306e\u3092\u53d6\u308a\u51fa\u3057\u3066\u4e26\u3079\u3066\u3044\u308b\u3060\u3051\u3002\u3055\u3042\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```haskell\n$ cabal configure\nResolving dependencies...\nConfiguring mkcpu-0.1.0.0...\n\n$ cabal build\nBuilding mkcpu-0.1.0.0...\nPreprocessing executable 'td4' for mkcpu-0.1.0.0...\n[7 of 7] Compiling Main             ( src/Main-td4.hs, dist/build/td4/td4-tmp/Main.o )\nLinking dist/build/td4/td4 ...\n\n$ echo \"0000\" | dist/build/td4/td4 \nclock 1.0 sec; I/P 0000\nstep 0; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 1; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 2; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 3; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 4; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\nstep 5; [CF:1][A:0001][B:0010][OP:0011][PC:0100]\n^C\n```\n\n\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306e\u72b6\u614b\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3002\u3061\u306a\u307f\u306b\u305d\u306e\u9069\u5f53\u306a\u5024\u306f\u3001\u5b9f\u306f`main`\u306e\u4e2d\u3067\u6307\u5b9a\u3057\u3066\u3042\u308b\u3002\n\n```haskell\n  -- CLR(1),CF(1),A(4),B(4),OP(4),PC(4)\n  let stat = toBits \"011000010011000010\"\n  loop 0 clock lc_td4_st0 stat iport (createRom pg)\n```\n\n\u3053\u306e`stat`\u3060\u3002A\u3001B\u3001OP\u3001PC\u306e\u5024\u306f\u305d\u308c\u305e\u308c1\u30012\u30013\u30014\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u308b\u306e\u3060\u3002\u5148\u8ff0\u306e\u901a\u308a\u4e00\u756a\u6700\u521d\u306e\u30d3\u30c3\u30c8\u306f\u30ea\u30bb\u30c3\u30c8(CLR)\u3067\u3042\u308a\u3001\u6700\u521d\u3060\u3051\u306f'0'\u306b\u3057\u3066\u3042\u308b\u3002\u304c\u3001\u3053\u306e\u4f55\u3082\u3057\u306a\u3044\u30c0\u30df\u30fcCPU\u3067\u306f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u304c\u4f7f\u308f\u308c\u306a\u3044\u306e\u3067A\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306f\u521d\u671f\u5024\u304c\u5165\u3063\u305f\u307e\u307e(\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u306e)\u3060\u3002\n\n\u514e\u306b\u3082\u89d2\u306b\u3082\u3001\u307e\u305a\u306fCPU\u3092\u99c6\u52d5\u3059\u308b\u5468\u8fba\u56de\u8def\u306b\u76f8\u5f53\u3059\u308b\u90e8\u5206\u306f\u4e00\u5fdc\u52d5\u3044\u305f\u3088\u3046\u3060\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066CPU\u3092\u6700\u7d42\u5f62\u307e\u3067\u7d44\u307f\u7acb\u3066\u3066\u3044\u3053\u3046\u3002\n\n## \u30b9\u30c6\u30c3\u30d7 1: \u30ec\u30b8\u30b9\u30bf\u306e\u4f7f\u7528\n\nCPU\u306f\u672c\u6765\u72b6\u614b\u3092\u4fdd\u6301\u3057\u305f\u308a\u66f4\u65b0\u3057\u305f\u308a\u3057\u3066\u51e6\u7406\u3092\u9032\u3081\u3066\u3044\u304f\u3082\u306e\u3060\u3002\u72b6\u614b\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u4ee5\u524d\u306e\u56de\u3067\u66f8\u3044\u305f\u3088\u3046\u306b\u3001CPU\u306e1\u30b5\u30a4\u30af\u30eb\u306e\u6700\u7d42\u6bb5\u968e\u3067\u30ec\u30b8\u30b9\u30bf\u3092\u66f4\u65b0(\u3082\u3057\u304f\u306f\u4fdd\u6301)\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u90e8\u5206\u3060\u3051\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002\u524d\u56de\u793a\u3057\u305f\u30d6\u30ed\u30c3\u30af\u56f3\u3067\u306f\u4e00\u756a\u53f3\u7aef\u306b\u3042\u308b\u90e8\u5206\u3060\u3002\n\n![cpu01.png](https://qiita-image-store.s3.amazonaws.com/0/69542/4aee8a9d-10b3-1b85-f2a2-f0859888420b.png)\n\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3002\n\n```haskell\nlc_td4_st1 :: LogicCircuit\nlc_td4_st1 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, cf, a, b, op, pc, _, _] = splitInput xs\n    v0  = toBits \"0000\"\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ cf)\n    a'  = lc_register4 (cl ++ [sHI] ++ a  ++ v0)\n    b'  = lc_register4 (cl ++ [sHI] ++ b  ++ v0)\n    op' = lc_register4 (cl ++ [sHI] ++ op ++ v0)\n    pc' = lc_counter4  (cl ++ [sHI] ++ pc ++ v0)\n```\n\n\u5165\u529b\u3092\u5207\u308a\u51fa\u3059\u90e8\u5206\u306f\u540c\u3058\u3002`v0`\u306f\u30c0\u30df\u30fc\u5024\u3060\u3002\u30d5\u30e9\u30b0\u3084\u30ec\u30b8\u30b9\u30bf\u306e\u5165\u529b\u5024\u3092\u305d\u308c\u305e\u308c\u30ec\u30b8\u30b9\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u30ab\u30a6\u30f3\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u5165\u308c\u3066\u3044\u308b\u3060\u3051\u3060\u3002\u307e\u305f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7(`cl`)\u3082\u305d\u308c\u305e\u308c\u306b\u5165\u308c\u3066\u3044\u308b\u3002\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```haskell\n$ echo \"0000\" | dist/build/td4/td4 \nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0000][B:0000][OP:0000][PC:0001]\nstep 2; [CF:0][A:0000][B:0000][OP:0000][PC:0010]\nstep 3; [CF:0][A:0000][B:0000][OP:0000][PC:0011]\nstep 4; [CF:0][A:0000][B:0000][OP:0000][PC:0100]\nstep 5; [CF:0][A:0000][B:0000][OP:0000][PC:0101]\n^C\n```\n\n\u30b9\u30c6\u30c3\u30d70\u306e\u7d50\u679c\u3068\u306f\u3060\u3044\u3076\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u307e\u305a\u3001\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u304c\u5165\u3063\u305f\u305f\u3081\u3001A\u30ec\u30b8\u30b9\u30bf\u306a\u3069\u306e\u521d\u671f\u5165\u529b\u5024\u306f\u4e00\u65e6\u30af\u30ea\u30a2\u3055\u308c\u30660\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\u3055\u3089\u306b\u3001\u30b9\u30c6\u30c3\u30d7\u304c\u9032\u3080\u6bce\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf(PC)\u304c\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u308b!\u30ab\u30a6\u30f3\u30bf\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u524d\u306b\u4f5c\u3063\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u304b\u3089\u5f53\u7136\u3053\u3046\u306a\u308b\u306e\u3060\u304c\u3001\u5b9f\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u3053\u306e\u51fa\u529b\u306b\u306a\u308b\u306e\u306f\u3061\u3087\u3063\u3068\u5b09\u3057\u3044! (CPU\u304c\u52d5\u3044\u3066\u3044\u308b\u305e\u3001\u3068\u3044\u3046\u611f\u3058\u304c\u3059\u308b)\n\n## \u30b9\u30c6\u30c3\u30d7 2: \u52a0\u7b97\u5668\u306e\u8ffd\u52a0\n\n\u6b21\u306b\u52a0\u7b97\u5668\u3092\u53d6\u308a\u4ed8\u3051\u3088\u3046\u3002\u52a0\u7b97\u5668\u306b\u306f\u5165\u529b\u304c2\u3064\u5fc5\u8981\u3060\u304c\u3001\u72b6\u614b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306bA\u30ec\u30b8\u30b9\u30bf\u306e\u5024\u3092\u4f7f\u3046\u3002\u3082\u3046\u4e00\u65b9\u306e\u5024\u306fROM\u304b\u3089\u7121\u7406\u3084\u308a\u53d6\u308a\u51fa\u305d\u3046\u3002ROM\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u30ab\u30a6\u30f3\u30bf\u3092\u3064\u306a\u3044\u30670\u756a\u5730\u304b\u3089\u9806\u306b\u5024\u3092\u53d6\u308a\u51fa\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u53d6\u308a\u51fa\u3057\u305f8bit\u304b\u3089\u4e0b4bit\u3092\u4f7f\u3063\u3066A\u30ec\u30b8\u30b9\u30bf\u306b\u8db3\u3057\u3001\u7d50\u679c\u304cA\u30ec\u30b8\u30b9\u30bf\u5165\u308b\u3088\u3046\u306b\u914d\u7dda\u3059\u308b\u3002\u3082\u3061\u308d\u3093carry\u30d5\u30e9\u30b0\u3082\u66f4\u65b0\u3059\u308b\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3046\u3060\u3002\n\n```haskell\nlc_td4_st2 :: LogicCircuit\nlc_td4_st2 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, _, a, b, op, pc, _, rom] = splitInput xs\n    rdata = lc_rom16 (pc ++ rom) -- get data addressed by PC\n    v0  = toBits \"0000\"\n    im  = take 4 rdata\n    (s0, c0) = splitAt 4 $ lc_adder (a ++ im)\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ c0)\n    a'  = lc_register4 (cl ++ [sLO] ++ a  ++ s0)\n    b'  = lc_register4 (cl ++ [sHI] ++ b  ++ v0)\n    op' = lc_register4 (cl ++ [sHI] ++ op ++ v0)\n    pc' = lc_counter4  (cl ++ [sHI] ++ pc ++ v0)\n```\n\n4\u884c\u76ee\u3067ROM\u306e\u73fe\u5728\u756a\u5730\u306e\u5024\u304b\u3089\u4e0b4bit\u3092\u53d6\u308a\u51fa\u3057\u30015\u884c\u76ee(`lc_adder`\u306e\u3042\u308b\u884c)\u3067A\u30ec\u30b8\u30b9\u30bf\u3068\u8db3\u3057\u3042\u308f\u305b\u3066\u3044\u308b\u3002\u305d\u308c\u3092s0, c0\u306b\u3057\u3066\u305d\u308c\u305e\u308cA\u30ec\u30b8\u30b9\u30bf\u3068carry\u30d5\u30e9\u30b0\u3078\u5165\u308c\u3066\u3044\u308b\u3002A\u30ec\u30b8\u30b9\u30bf\u306e\u65b9\u306f\u5f15\u6570\u306e2\u3064\u76ee(\u30ec\u30b8\u30b9\u30bf\u306eLD\u5165\u529b)\u3092HI\u3067\u306f\u306a\u304fLO\u306b\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3067\u306f\u306a\u304f\u5916\u304b\u3089\u5165\u3063\u305f\u5024(s0)\u3092\u30bb\u30c3\u30c8\u3059\u308b\u305f\u3081\u3060\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0(\u3068\u306f\u8a00\u3048\u306a\u3044\u304c)\u306f\u4e0b4\u6841\u306b\u52a0\u7b97\u3057\u305f\u3044\u6570\u5b57\u3092\u8a18\u8f09\u3057\u3066\u3044\u308b\u3002\u4e0a\u304b\u3089\u30011,2,3,4,5,1\u3067\u3042\u308b\u3002\n\n```haskell\n$ cat program\n00000001\n00000010\n00000011\n00000100\n00000101\n00000001\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```haskell\n$ dist/build/td4/td4 < program\nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0001][B:0000][OP:0000][PC:0001]\nstep 2; [CF:0][A:0011][B:0000][OP:0000][PC:0010]\nstep 3; [CF:0][A:0110][B:0000][OP:0000][PC:0011]\nstep 4; [CF:0][A:1010][B:0000][OP:0000][PC:0100]\nstep 5; [CF:0][A:1111][B:0000][OP:0000][PC:0101]\nstep 6; [CF:1][A:0000][B:0000][OP:0000][PC:0110]\n^C\n```\n\n1\u304b\u30895\u307e\u3067\u8db3\u3059\u3068A\u30ec\u30b8\u30b9\u30bf\u304c\u6700\u5927\u5024\u306e15\u306b\u306a\u308a\u3001\u305d\u3053\u306b1\u3092\u8db3\u305b\u3070carry\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066A\u304c0\u306b\u306a\u308b\u3068\u3044\u3046\u5bf8\u6cd5\u3060\u304c\u3001CPU\u306e\u51fa\u529b\u3082\u78ba\u304b\u306b\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u3053\u307e\u3067\u30b9\u30e9\u30b9\u30e9\u9032\u3093\u3067\u3044\u308b\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u304c\u3001\u5b9f\u969b\u306f\u5165\u529b\u5024\u306e\u533a\u5207\u308a\u4f4d\u7f6e\u3092\u9593\u9055\u3063\u3066\u3044\u305f\u308a\u3001\u5165\u529b\u3068\u51fa\u529b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9806\u5e8f\u3092\u9593\u9055\u3063\u3066\u3044\u305f\u308a\u3057\u3066\u3001\u4f55\u5ea6\u3082\u51fa\u529b\u304c\u4e88\u60f3\u5916\u306b\u306a\u3063\u3066\u30d0\u30b0\u53d6\u308a\u304c\u5927\u5909\u3060\u3063\u305f\u3002\u5b9f\u969b\u306e\u96fb\u5b50\u5de5\u4f5c\u3067\u306f\u300c\u914d\u7dda\u9593\u9055\u3044\u300d\u306b\u76f8\u5f53\u3059\u308b\u306e\u3060\u308d\u3046\u304b\u3002\u3002\u3002\n\n## \u30b9\u30c6\u30c3\u30d73\u306e\u524d\u306b(\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u9078\u629e)\n\n\u3044\u3088\u3044\u3088\u5168\u4f53\u3092\u7d44\u307f\u4e0a\u3052\u308b\u308f\u3051\u3060\u304c\u3001\u305d\u306e\u524d\u306b\u52a0\u7b97\u5668\u3078\u306e\u5165\u529b(\u30d6\u30ed\u30c3\u30af\u56f3\u306e\u5de6\u5074\u306b\u4e26\u3076A,B\u30ec\u30b8\u30b9\u30bf\u3068\u5165\u529b\u30dd\u30fc\u30c8\u5024\u3001\u304a\u3088\u30730)\u3092\u5207\u308a\u66ff\u3048\u308b\u90e8\u5206\u3092\u8003\u3048\u3088\u3046\u3002\u3053\u308c\u306b\u306f\u4ee5\u524d\u4f5c\u3063\u305fmultiplexer\u304c\u4f7f\u3048\u308b\u3002\u5165\u529b\u5024\u306f4bit\u306a\u306e\u3067\u3001multiplexer\u30924\u3064\u3001\u5165\u529b\u5024\u306e\u5404\u6841\u7528\u306b\u4e26\u3079\u308c\u3070\u3088\u3044\u3002\n\n```haskell\nselectInput :: [Bin] -> [Bin] -> [Bin] -> [Bin] -> [Bin] -> [Bin]\nselectInput s a b ip z = concat $ map (\\x -> lc_multiplexer4ch (s ++ x)) mi\n  where\n    mi = buildMultiplexerInput [a, b, ip, z]\n\n    buildMultiplexerInput :: [[Bin]] -> [[Bin]]\n    buildMultiplexerInput xs = map (\\i -> pickBit i xs) [0..3]\n\n    pickBit :: Int -> [[Bin]] -> [Bin]\n    pickBit i xs = map (!!i) xs\n```\n\n\u6700\u521d\u306e\u5f15\u6570s\u3067\u3069\u306e\u5165\u529b\u5024\u3092\u4f7f\u3046\u304b\u3092\u6307\u5b9a\u3059\u308b\u3002\u3042\u3068\u306f\u5165\u529b\u5024\u306e\u5404\u6841\u3092\u96c6\u3081\u3066\u304d\u3066multiplexer\u3078\u5165\u308c\u3066\u3084\u308c\u3070\u3001s\u304c\u9078\u629e\u3059\u308b\u5165\u529b\u5024\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3002\u30c6\u30b9\u30c8\u306f\u4ee5\u4e0b\u3002\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n```haskell\n>>> let a  = toBits \"1000\"\n>>> let b  = toBits \"0110\"\n>>> let ip = toBits \"0001\"\n>>> toStr $ selectInput [sLO, sLO] a b ip zero\n\"1000\"\n>>> toStr $ selectInput [sHI, sLO] a b ip zero\n\"0110\"\n>>> toStr $ selectInput [sLO, sHI] a b ip zero\n\"0001\"\n>>> toStr $ selectInput [sHI, sHI] a b ip zero\n\"0000\"\n```\n\n\u3044\u3088\u3044\u3088\u6700\u5f8c\u306e\u7d44\u307f\u7acb\u3066\u3092\u6b8b\u3059\u306e\u307f\u3002\n\n## \u30b9\u30c6\u30c3\u30d7 3: CPU\u306e\u7d44\u307f\u7acb\u3066\n\n\u3055\u3042\u3001\u6700\u7d42\u6bb5\u968e\u306b\u304d\u305f\u3002ROM\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u547d\u4ee4\u3092\u547d\u4ee4\u30c7\u30b3\u30fc\u30c0\u3078\u5165\u308c\u3001\u5165\u529b\u5024\u3092\u9078\u629e\u3057\u3001\u52a0\u7b97\u5668\u3092\u901a\u3057\u3066\u7d50\u679c\u3092\u3069\u3053\u306b\u66f8\u304d\u51fa\u3059\u304b\u3092\u547d\u4ee4\u30c7\u30b3\u30fc\u30c0\u306b\u6307\u793a\u3055\u305b\u308c\u3070\u3088\u3044\u306e\u3060\u3002\u4ee5\u4e0b\u304c\u6700\u7d42\u306eCPU\u306e\u30b3\u30fc\u30c9\u3060\u3002\n\n```haskell\nlc_td4 :: LogicCircuit\nlc_td4 xs = concat [cf', a', b', op', pc']\n  where\n    [cl, cf, a, b, op, pc, ip, rom] = splitInput xs\n    rdata = lc_rom16 (pc ++ rom)\n    (im, inst) = splitAt 4 rdata\n    [sa, sb, ld0, ld1, ld2, ld3] = lc_inst_decorder (inst ++ cf)\n    (s0, c0) = splitAt 4 $ lc_adder ((selectInput [sa, sb] a b ip zero) ++ im)\n    cf' = take 1 $ lc_dff_cp (cl ++ [sHI] ++ c0)\n    a'  = lc_register4 (cl ++ [ld0] ++ a  ++ s0)\n    b'  = lc_register4 (cl ++ [ld1] ++ b  ++ s0)\n    op' = lc_register4 (cl ++ [ld2] ++ op ++ s0)\n    pc' = lc_counter4  (cl ++ [ld3] ++ pc ++ s0)\n```\n\nROM\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u547d\u4ee4\u3092\u30c7\u30b3\u30fc\u30c0\u306b\u5165\u308c\u3001\u305d\u306e\u7d50\u679c\u3092\u52a0\u7b97\u5668\u3068\u5404\u30ec\u30b8\u30b9\u30bf\u3078\u3064\u306a\u3044\u3067\u3044\u308b\u3002\u30b9\u30c6\u30c3\u30d72\u3068\u306e\u5dee\u306f\u305d\u308c\u3050\u3089\u3044\u3060\u304c\u3001\u3053\u308c\u3067\u5b8c\u6210\u3060\u3002\u610f\u5916\u3068\u3042\u3063\u3051\u306a\u304f\u51fa\u6765\u4e0a\u304c\u3063\u305f\u3002\n\n\u3055\u3059\u304c\u306b\u5404\u547d\u4ee4\u306e\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\u4ee5\u4e0b\u304c\u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u3060(ADD A,Im \u3068 MOV A,B)\u3002\u5177\u4f53\u7684\u306a\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u4e0e\u3048\u7d50\u679c\u3092\u60f3\u5b9a\u3068\u6bd4\u8f03\u3059\u308b\u3001\u3053\u308c\u307e\u3067\u4f5c\u3063\u3066\u304d\u305f\u8ad6\u7406\u56de\u8def\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u540c\u3058\u3060\u3002\n\n```haskell\n>>> let rom0 = take ((16-1) * 8) $ repeat '0'\n\n>>> -- ADD A,Im (A=1, Im=4 -> A=5, CF=0)\n>>> toStr $ lc_td4 $ toBits (\"10 1000 0000 0000 0000 0000 00100000\" ++ rom0)\n\"01010000000001000\"\n\n>>> -- ADD A,Im (A=13, Im=4 -> A=1, CF=1)\n>>> toStr $ lc_td4 $ toBits (\"10 1011 0000 0000 0000 0000 00100000\" ++ rom0)\n\"11000000000001000\"\n\n>>> -- MOV A,B (A=13, B=3 -> A=3)\n>>> toStr $ lc_td4 $ toBits (\"10 1011 1100 0000 0000 0000 00001000\" ++ rom0)\n\"01100110000001000\"\n```\n\n\u3055\u3042\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u3066\u307f\u3088\u3046! \u672c\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u30e9\u30fc\u30e1\u30f3\u30bf\u30a4\u30de\u30fc\u3092\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\u3046\u307e\u304f\u3044\u3051\u3070\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51fa\u529b\u30dd\u30fc\u30c8\u304c\u5909\u5316\u3059\u308b\u306f\u305a\u3060\u3002\n\n```\n[0111] -> [0110] -> [0100](\u70b9\u6ec5) -> [1000]\n```\n\n\u672c\u306b\u306f\"\u30cb\u30fc\u30e2\u30cb\u30c3\u30af\"\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u30cf\u30f3\u30c9\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u305f\u7d50\u679c\u304c\u3053\u308c\u3002\n\n```haskell\n10110111\n00000001\n11100001\n00000001\n11100011\n10110110\n00000001\n11100110\n00000001\n11101000\n10110000\n10110100\n00000001\n11101010\n10111000\n11111111\n```\n\n\u3053\u308c\u3092\u30d5\u30a1\u30a4\u30eb(program.ramen)\u306b\u66f8\u3044\u3066td4\u306b\u98df\u308f\u305b\u308c\u3070\u3088\u3044\u3002\n\n```haskell\n$ dist/build/td4/td4 < program.ramen\nclock 1.0 sec; I/P 0000\nstep 0; [CF:0][A:0000][B:0000][OP:0000][PC:0000]\nstep 1; [CF:0][A:0000][B:0000][OP:0111][PC:0001]\nstep 2; [CF:0][A:0001][B:0000][OP:0111][PC:0010]\n  :\nstep 31; [CF:0][A:1111][B:0000][OP:0111][PC:0001]\nstep 32; [CF:1][A:0000][B:0000][OP:0111][PC:0010]\nstep 33; [CF:0][A:0000][B:0000][OP:0111][PC:0011]\n  :\nstep 63; [CF:0][A:1111][B:0000][OP:0111][PC:0011]\nstep 64; [CF:1][A:0000][B:0000][OP:0111][PC:0100]\nstep 65; [CF:0][A:0000][B:0000][OP:0111][PC:0101]\nstep 66; [CF:0][A:0000][B:0000][OP:0110][PC:0110]\n  :\nstep 96; [CF:0][A:1111][B:0000][OP:0110][PC:0110]\nstep 97; [CF:1][A:0000][B:0000][OP:0110][PC:0111]\nstep 98; [CF:0][A:0000][B:0000][OP:0110][PC:1000]\n  :\nstep 128; [CF:0][A:1111][B:0000][OP:0110][PC:1000]\nstep 129; [CF:1][A:0000][B:0000][OP:0110][PC:1001]\nstep 130; [CF:0][A:0000][B:0000][OP:0110][PC:1010]\nstep 131; [CF:0][A:0000][B:0000][OP:0000][PC:1011]\nstep 132; [CF:0][A:0000][B:0000][OP:0100][PC:1100]\n  :\nstep 192; [CF:0][A:1111][B:0000][OP:0100][PC:1100]\nstep 193; [CF:1][A:0000][B:0000][OP:0100][PC:1101]\nstep 194; [CF:0][A:0000][B:0000][OP:0100][PC:1110]\nstep 195; [CF:0][A:0000][B:0000][OP:1000][PC:1111]\n  :\n```\n\n\u547d\u4ee4\u7a2e\u3084\u30d3\u30c3\u30c8\u6570\u306b\u5236\u9650\u304c\u3042\u308a\u6b63\u78ba\u306b3\u5206\u3068\u306f\u3044\u304b\u306a\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u60f3\u5b9a\u3057\u305f\u3068\u304a\u308a\u306e\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u610f\u5916\u306b\u3046\u308c\u3057\u3044\u3082\u306e\u3060!\n\n## \u307e\u3068\u3081\n\n\u3084\u3063\u3068CPU\u304c\u5b8c\u6210\u3057\u305f!\u6a5f\u80fd\u7684\u306b\u306f\u304b\u306a\u308a\u4f4e\u30ec\u30d9\u30eb\u3067\u306f\u3042\u308b\u304c\u3001\u672c\u5f53\u306b\u8ad6\u7406\u56de\u8def\u306e\u7d44\u307f\u5408\u308f\u305b\u3060\u3051\u3067CPU\u3068\u3044\u3046\u8907\u96d1\u306a\u4ed5\u7d44\u307f\u304c\u6210\u308a\u7acb\u3063\u3066\u3044\u3066\u52d5\u304f\u306e\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3002\u6700\u521d\u306b\u8003\u3048\u51fa\u3057\u305f\u4eba\u306f\u672c\u5f53\u306b\u3059\u3054\u3044!\n\n\u3068\u3053\u308d\u3067\u3001\u4eca\u56de\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u300cHaskell\u306a\u3089\u3067\u306f\u300d\u3068\u3044\u3046\u306e\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u306a\u3042\u3068\u601d\u3046\u3002\u8ad6\u7406\u7684\u306a\u51e6\u7406\u306f\u8ad6\u7406\u30b2\u30fc\u30c8\u3068\u305d\u306e\u914d\u7dda\u3067\u6c7a\u307e\u308b\u306e\u3067\u3001Haskell\u3089\u3057\u3055\u306f\u300c\u914d\u7dda\u300d\u306b\u76f8\u5f53\u3059\u308b\u51e6\u7406\u3050\u3089\u3044\u3060(\u8907\u6570\u306e\u914d\u7dda\u3092`map`\u3067\u4e00\u62ec\u51e6\u7406\u3059\u308b\u3068\u304b)\u3002\u305d\u308c\u3082\u3042\u3063\u3066\u304b\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7684\u306b\u306f\u6de1\u3005\u3068\u4e26\u3079\u305f\u3060\u3051\u306b\u7d42\u308f\u3063\u305f\u6c17\u3082\u3059\u308b\u3002Haskell\u306e\u3082\u3063\u3068\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u4eca\u3088\u308a\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u8a18\u8ff0\u304c\u3067\u304d\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u305d\u308c\u306f\u3082\u3063\u3068\"\u4f7f\u3048\u308b\"\u3088\u3046\u306b\u306a\u3063\u3066\u304b\u3089\u8003\u3048\u3088\u3046\u3002\n\n\u3055\u3066\u3053\u306e\u5148\u3060\u304c\u3001\n\n* 8bit\u5316: \u30ec\u30b8\u30b9\u30bf\u3084\u52a0\u7b97\u5668\u30671bit\u306e\u90e8\u54c1\u30924\u500b\u304b\u30898\u500b\u306b\u5897\u3084\u305b\u3070\u3088\u3044\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u306f\u7e70\u308a\u8fd4\u3057\u56de\u6570\u3092\u5897\u3084\u3059\u3060\u3051\u306a\u306e\u3067\u304b\u306a\u308a\u7c21\u5358\u306a\u306f\u305a\u3002\n* \u52a0\u7b97\u4ee5\u5916\u306e\u547d\u4ee4: \u672c\u306b\u3082\u8a18\u8f09\u304c\u3042\u308b\u304c\u672c\u683c\u7684\u306aALU\u3092\u7528\u610f\u3059\u308c\u3070\u3082\u3063\u3068\u3044\u308d\u3044\u308d\u3067\u304d\u308b\u3053\u3068\u304c\u5897\u3048\u308b\u3002\n* i4004\u306e\u88fd\u4f5c: \u56de\u8def\u56f3\u304c\u308f\u304b\u308c\u3070\u4eca\u56de\u3068\u540c\u69d8\u306b\u306a\u3093\u3067\u3082\u88fd\u4f5c\u3067\u304d\u305d\u3046\u3060(\u5c71\u306e\u3088\u3046\u306b\u6642\u9593\u304c\u3042\u308c\u3070)\u3002\u306a\u3089\u3070\u5b9f\u5728\u3059\u308b\u6709\u540d\u3069\u3053\u308d\u3092\u4f5c\u3063\u3066\u307f\u308b\u306e\u3082\u697d\u3057\u305d\u3046\u3002\n\n\u306a\u3069\u306f\u624b\u304c\u3064\u3051\u3089\u308c\u305d\u3046\u3060\u3002\u3053\u3046\u3044\u3063\u305f\u62e1\u5f35\u306f\u982d\u3067\u8003\u3048\u308b\u3060\u3051\u3067\u3082\u697d\u3057\u3044\u3082\u306e\u3060\u3002\n\n\u6b21\u56de\u3060\u304c\u3001\u3053\u306e\u30cd\u30bf\u306e\u304a\u307e\u3051\u3067\u4f55\u304bCPU\u95a2\u4fc2\u306b\u3059\u308b\u304b\u3001\u65b0\u3057\u3044\u30cd\u30bf\u306b\u3059\u308b\u304b\u3001\u3001\u3001\u3002\n\n(\u3053\u3053\u307e\u3067\u306e[\u30bd\u30fc\u30b9](https://github.com/eijian/mkcpu))\n"}