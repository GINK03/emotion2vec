{"tags": ["Ruby", "Rails", "RubyMine", "RSpec", "FactoryGirl"], "context": " More than 1 year has passed since last update.\u524d\u306e\u8a18\u4e8b\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059\n\n\n\nComponent\nversion\n\n\n\n\nRubyMine\n5.0(Windows)\n\n\nRails\n3.2.12\n\n\nRspec\n2.13.0\n\n\nFactoryGirl\n4.2.0\n\n\nFaker\n1.1.2\n\n\nDatabaseCleaner\n0.9.1\n\n\n\n\n1st Red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contact_spec.rb\n it \"has a valid factory\" do\n    expect(FactoryGirl.build(:contact)).to be_valid\n  end\n\n\n\nRun > Run > spec\n\n\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\nToggle auto-test\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nspec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname \"Tatsuro\"\n    lastname \"Ueda\"\n    sequence(:email) { |n| \"weed#{n}@yahoo.co.jp\"}\n  end\nend\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\u30c6\u30b9\u30c8\u3092FactoryGirl\u4ed5\u69d8\u306b\u4fee\u6b63\u3059\u308b\n\n\nspec/models/contacts_spec.rb\n  it \"is valid with a firstname and lastname\" do\n    contact = FactoryGirl.build(\n        firstname: 'Tatsuro',\n        lastname: 'Tatsuro',\n        email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    #expect(Contact.new(firstname: nil)).to have(1).errors_on(:firstname)\n    contact = FactoryGirl.build(:contact, firstname: nil)\n    expect(contact).to have(1).errors_on(:firstname)\n  end\n\n  it \"is invalid without a lastname\" do\n    #expect(Contact.new(lastname: nil)).to have(1).errors_on(:lastname)\n    contact = FactoryGirl.build(:contact, lastname: nil)\n    expect(contact).to have(1).errors_on(:lastname)\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    FactoryGirl.create(:contact, email: 'weed_7777@yahoo.co.jp')\n    contact = FactoryGirl.build(:contact, email: 'weed_7777@yahoo.co.jp')\n    expect(contact).to have(1).errors_on(:email)\n  end\n\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = FactoryGirl.build(:contact,\n          firstname: \"Tatsuro\", lastname: \"Ueda\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\u300cFactoryGirl\u300d\u3092\u7701\u7565\u53ef\u80fd\u306b\u3059\u308b\n\n\nspec/spec_helper.rb\n  config.include FactoryGirl::Syntax::Methods\n\n\n\n\u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u3059\u308b\n\u30c6\u30b9\u30c8\u3092FactoryGirl\u4ed5\u69d8\u306b\u4fee\u6b63\u3059\u308b\n\n\nspec/models/contacts_spec.rb\n  it \"has a valid factory\" do\n    expect(build(:contact)).to be_valid\n  end\n\n  it \"is valid with a firstname and lastname\" do\n    contact = build(:contact,\n                    firstname: 'Tatsuro',\n                    lastname: 'Tatsuro',\n                    email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    contact = build(:contact, firstname: nil)\n    expect(contact).to have(1).errors_on(:firstname)\n  end\n\n  it \"is invalid without a lastname\" do\n    contact = build(:contact, lastname: nil)\n    expect(contact).to have(1).errors_on(:lastname)\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    create(:contact, email: 'weed_7777@yahoo.co.jp')\n    contact = build(:contact, email: 'weed_7777@yahoo.co.jp')\n    expect(contact).to have(1).errors_on(:email)\n  end\n\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = build(:contact,\n                      firstname: \"Tatsuro\", lastname: \"Ueda\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n2nd Red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/phones_spec.rb\n  it \"allows two contacts to share a phone number\" do\n    #contact = Contact.create(\n    #    firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    #)\n    #contact.phones.create(\n    #    phone_type: 'home',\n    #    phone: '01-2345-6789'\n    #)\n    #other_contact = Contact.new\n    #other_phone = other_contact.phones.build(\n    #    phone_type: 'home',\n    #    phone: '01-2345-6789'\n    #)\n    create(:phone, phone: \"01-2345-6789\")\n    other_phone = build(:phone, phone: \"01-2345-6789\")\n    expect(other_phone).to be_valid\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nspec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone_type \"home\"\n    phone \"01-2345-6789\"\n  end\nend\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n3rd Red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/phones_spec.rb\n    create(:home_phone, phone: \"01-2345-6789\")\n    other_phone = build(:home_phone, phone: \"01-2345-6789\")\n    expect(other_phone).to be_valid\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nspec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone \"01-2345-6789\"\n\n    factory :home_phone do\n      phone_type \"home\"\n    end\n\n    factory :work_phone do\n      phone_type \"work\"\n    end\n\n    factory :mobile_phone do\n      phone_type \"mobile\"\n    end\n\n  end\nend\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\nFaker\u5c0e\u5165\n\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nspec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname { Faker::Name.first_name }\n    lastname { Faker::Name.last_name }\n    email { Faker::Internet.email }\n  end\nend\n\n\n\nspec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone { Faker::PhoneNumber.phone_number }\n\n...\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n4th Red\n\n\u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n\nspec/models/contacts_spec.rb\n  it \"has three phone numbers\" do\n    expect(create(:contact).phones.count).to eq 3\n  end\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n\nspec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname { Faker::Name.first_name }\n    lastname { Faker::Name.last_name }\n    email { Faker::Internet.email }\n\n    after(:build) do |contact|\n      [:home_phone, :work_phone, :mobile_phone].each do |phone|\n        contact.phones << FactoryGirl.build(:phone,\n            phone_type: phone, contact: contact)\n      end\n    end\n  end\nend\n\n\n\n\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n\n\u30d6\u30ed\u30b0\u3084\u3063\u3066\u307e\u3059\uff1aPAPA-tronix !\n[\u524d\u306e\u8a18\u4e8b\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059](http://qiita.com/items/772fb58296beb747e1bd)\n\n| Component       | version      |\n|:----------------|-------------:|\n| RubyMine        | 5.0(Windows) |\n| Rails           | 3.2.12       |\n| Rspec           | 2.13.0       |\n| FactoryGirl     | 4.2.0        |\n| Faker           | 1.1.2        |\n| DatabaseCleaner | 0.9.1        |\n\n## 1st Red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contact_spec.rb\n it \"has a valid factory\" do\n    expect(FactoryGirl.build(:contact)).to be_valid\n  end\n```\n\n2. Run > Run > spec\n\n\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5931\u6557\u3059\u308b\n\n3. Toggle auto-test\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:spec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname \"Tatsuro\"\n    lastname \"Ueda\"\n    sequence(:email) { |n| \"weed#{n}@yahoo.co.jp\"}\n  end\nend\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n1. \u30c6\u30b9\u30c8\u3092FactoryGirl\u4ed5\u69d8\u306b\u4fee\u6b63\u3059\u308b\n\n```ruby:spec/models/contacts_spec.rb\n  it \"is valid with a firstname and lastname\" do\n    contact = FactoryGirl.build(\n        firstname: 'Tatsuro',\n        lastname: 'Tatsuro',\n        email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    #expect(Contact.new(firstname: nil)).to have(1).errors_on(:firstname)\n    contact = FactoryGirl.build(:contact, firstname: nil)\n    expect(contact).to have(1).errors_on(:firstname)\n  end\n\n  it \"is invalid without a lastname\" do\n    #expect(Contact.new(lastname: nil)).to have(1).errors_on(:lastname)\n    contact = FactoryGirl.build(:contact, lastname: nil)\n    expect(contact).to have(1).errors_on(:lastname)\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    FactoryGirl.create(:contact, email: 'weed_7777@yahoo.co.jp')\n    contact = FactoryGirl.build(:contact, email: 'weed_7777@yahoo.co.jp')\n    expect(contact).to have(1).errors_on(:email)\n  end\n\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = FactoryGirl.build(:contact,\n          firstname: \"Tatsuro\", lastname: \"Ueda\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n1. \u300cFactoryGirl\u300d\u3092\u7701\u7565\u53ef\u80fd\u306b\u3059\u308b\n\n```ruby:spec/spec_helper.rb\n  config.include FactoryGirl::Syntax::Methods\n```\n\n1. \u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u3059\u308b\n\n1. \u30c6\u30b9\u30c8\u3092FactoryGirl\u4ed5\u69d8\u306b\u4fee\u6b63\u3059\u308b\n\n```ruby:spec/models/contacts_spec.rb\n  it \"has a valid factory\" do\n    expect(build(:contact)).to be_valid\n  end\n\n  it \"is valid with a firstname and lastname\" do\n    contact = build(:contact,\n                    firstname: 'Tatsuro',\n                    lastname: 'Tatsuro',\n                    email: 'weed_7777@yahoo.co.jp'\n    )\n    expect(contact).to be_valid\n  end\n\n  it \"is invalid without a firstname\" do\n    contact = build(:contact, firstname: nil)\n    expect(contact).to have(1).errors_on(:firstname)\n  end\n\n  it \"is invalid without a lastname\" do\n    contact = build(:contact, lastname: nil)\n    expect(contact).to have(1).errors_on(:lastname)\n  end\n\n  it \"is invalid with a duplicate email address\" do\n    create(:contact, email: 'weed_7777@yahoo.co.jp')\n    contact = build(:contact, email: 'weed_7777@yahoo.co.jp')\n    expect(contact).to have(1).errors_on(:email)\n  end\n\n  describe \"#name\" do\n    it \"returns a contact's full name as a string\" do\n      contact = build(:contact,\n                      firstname: \"Tatsuro\", lastname: \"Ueda\"\n      )\n      expect(contact.name).to eq 'Tatsuro Ueda'\n    end\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 2nd Red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/phones_spec.rb\n  it \"allows two contacts to share a phone number\" do\n    #contact = Contact.create(\n    #    firstname: 'Tatsuro', lastname: 'Ueda', email: 'weed_7777@yahoo.co.jp'\n    #)\n    #contact.phones.create(\n    #    phone_type: 'home',\n    #    phone: '01-2345-6789'\n    #)\n    #other_contact = Contact.new\n    #other_phone = other_contact.phones.build(\n    #    phone_type: 'home',\n    #    phone: '01-2345-6789'\n    #)\n    create(:phone, phone: \"01-2345-6789\")\n    other_phone = build(:phone, phone: \"01-2345-6789\")\n    expect(other_phone).to be_valid\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:spec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone_type \"home\"\n    phone \"01-2345-6789\"\n  end\nend\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 3rd Red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/phones_spec.rb\n    create(:home_phone, phone: \"01-2345-6789\")\n    other_phone = build(:home_phone, phone: \"01-2345-6789\")\n    expect(other_phone).to be_valid\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:spec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone \"01-2345-6789\"\n\n    factory :home_phone do\n      phone_type \"home\"\n    end\n\n    factory :work_phone do\n      phone_type \"work\"\n    end\n\n    factory :mobile_phone do\n      phone_type \"mobile\"\n    end\n    \n  end\nend\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## Faker\u5c0e\u5165\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:spec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname { Faker::Name.first_name }\n    lastname { Faker::Name.last_name }\n    email { Faker::Internet.email }\n  end\nend\n```\n\n```ruby:spec/factories/phones.rb\nFactoryGirl.define do\n  factory :phone do\n    association :contact\n    phone { Faker::PhoneNumber.phone_number }\n\n...\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n## 4th Red\n\n1. \u30c6\u30b9\u30c8\u3092\u66f8\u304f\n\n```ruby:spec/models/contacts_spec.rb\n  it \"has three phone numbers\" do\n    expect(create(:contact).phones.count).to eq 3\n  end\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u30b3\u30b1\u308b\n\n1. \u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```ruby:spec/factories/contacts.rb\nFactoryGirl.define do\n  factory :contact do\n    firstname { Faker::Name.first_name }\n    lastname { Faker::Name.last_name }\n    email { Faker::Internet.email }\n\n    after(:build) do |contact|\n      [:home_phone, :work_phone, :mobile_phone].each do |phone|\n        contact.phones << FactoryGirl.build(:phone,\n            phone_type: phone, contact: contact)\n      end\n    end\n  end\nend\n```\n\n1. \u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u304c\u8d70\u308a\u3001\u5408\u683c\u3059\u308b\n\n-----\n\u30d6\u30ed\u30b0\u3084\u3063\u3066\u307e\u3059\uff1a[PAPA-tronix !](http://weed.cocolog-nifty.com/wzero3es/)"}