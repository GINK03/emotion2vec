{"context": " More than 1 year has passed since last update.\u81ea\u5206\u306e\u4f5c\u3063\u305f\u30a2\u30d7\u30ea\u3067\u548c\u66a6\u3092\u4f7f\u3063\u3066\u3044\u306a\u304f\u3066\u3082\u3001\u30e6\u30fc\u30b6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u304c\u548c\u66a6\u3060\u3063\u305f\u308a\u3059\u308b\u3068\n\u65e5\u4ed8\u8868\u793a\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u3092\u548c\u66a6\u306b\u5909\u66f4\u3057\u3066\u5b9f\u6a5f\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d\u3092\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u3064\u3082\u305d\u308c\u3092\u6c17\u306b\u3057\u3066\u78ba\u8a8d\u306a\u3069\u306f\u3057\u306a\u3044\u3067\u3059\u3057\u5fd8\u308c\u304c\u3061\u3067\u3059\u3002\n\u305d\u308c\u306b\u3001\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u6319\u52d5\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u65e5\u4ed8\u306b\u95a2\u3059\u308b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3082\u610f\u5473\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u4e8b\u524d\u8abf\u67fb\niPhone\u306e\u8a2d\u5b9a\u3067\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001\u9069\u5f53\u306a\u30a2\u30d7\u30ea\u306bNSLog(@\"%@\", [[NSUserDefaults standardUserDefaults] objectForKey:@\"AppleLocale\"]);\n\u3067\u8a18\u8ff0\u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30ed\u30b1\u30fc\u30eb\u304c\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\n\nOCMock\u3092\u4f7f\u3063\u3066\u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059Mock\u3092\u4f5c\u6210\nOCMock\u3092\u4f7f\u3044\u3001\u5148\u307b\u3069\u53d6\u5f97\u3057\u305f\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u4f7f\u3044\u56de\u305b\u308b\u3088\u3046\u306b\u3001\u4e0b\u306e\u3088\u3046\u306bSenTestCase\u3092\u7d99\u627f\u3057\u305f\u30d9\u30fc\u30b9\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u3001\n\u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u306eMock\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nXXXTestCase.h\n#import <SenTestingKit/SenTestingKit.h>\n\n#import <OCMock/OCMock.h>\n\n@interface XXXTestCase : SenTestCase\n\n#pragma mark - NSLocale(ja_JP@calendar=japanese)\n\n/*!\n    @method createJPLocaleWithJapaneseCalendarMock\n    @abstract iPhone\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u3092\u548c\u66a6\u306b\u66f8\u304d\u63db\u3048\u305fMock\u3092\u4f5c\u6210\n    @discussion\n        iPhone\u306e[\u8a2d\u5b9a]-[\u4e00\u822c]-[\u8a00\u8a9e\u74b0\u5883]-[\u30ab\u30ec\u30f3\u30c0\u30fc] = \u548c\u66a6\n */\n- (id)createJPLocaleWithJapaneseCalendarMock;\n\n@end\n\n\n\nXXXTestCase.m\n@interface XXXTestCase ()\n\n@property (nonatomic) NSMutableArray *mocksToVerify;\n\n@end\n\n@implementation XXXTestCase\n\n- (void)tearDown\n{\n    for (id mock in self.mocksToVerify) {\n        [mock verify];\n    }\n    self.mocksToVerify = nil;\n\n    // [...]\n\n    [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:XXXTestDomainName];\n\n    [super tearDown];\n}\n\n#pragma mark - NSLocale(ja_JP@calendar=japanese)\n\n- (id)createJPLocaleWithJapaneseCalendarMock\n{\n    NSLocale *locale = [NSLocale localeWithLocaleIdentifier:[NSString stringWithFormat:@\"ja_JP@calendar=%@\",\n                                                             NSJapaneseCalendar]];\n    id localeMock = [self autoVerifiedMockForClass:[NSLocale class]];\n    [[[[localeMock stub] classMethod] andReturn:locale] systemLocale];\n    [[[[localeMock stub] classMethod] andReturn:locale] currentLocale];\n    [[[[localeMock stub] classMethod] andReturn:locale] autoupdatingCurrentLocale];\n\n    return localeMock;\n}\n\n#pragma mark - Setup and verify mock: http://www.objc.io/issue-1/testing-view-controllers.html\n\n- (void)verifyDuringTearDown:(id)mock\n{\n    if (!self.mocksToVerify) {\n        self.mocksToVerify = @[].mutableCopy;\n    }\n    [self.mocksToVerify addObject:mock];\n}\n\n- (id)autoVerifiedMockForClass:(Class)aClass\n{\n    id mock = [OCMockObject mockForClass:aClass];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n- (id)autoVerifiedPartialMockForObject:(id)object\n{\n    id mock = [OCMockObject partialMockForObject:object];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n- (id)autoVerifiedNickMockForClass:(Class)aClass\n{\n    id mock = [OCMockObject niceMockForClass:aClass];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n@end\n\n\n\n\u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059Mock\u3092\u5229\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\nyyyyMM\u306e\u65e5\u4ed8\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u5e74\u3068\u6708\u306b\u5206\u5272\u3057\u305f\u5f8c\u3001\n'April, 2014'\u306e\u3088\u3046\u306aMMMM, yyy\u66f8\u5f0f\u306e\u6587\u5b57\u5217\u3092\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u3001\n\u30ab\u30ec\u30f3\u30c0\u30fc\u304c\u548c\u66a6\u8a2d\u5b9a\u3060\u3068\u3001\u306a\u305c\u304b'April, 4002'\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u30d0\u30b0\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\u305d\u308c\u3092\u78ba\u304b\u3081\u308b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n#import \"XXXTestCase.h\"\n\n#import <OCMock.h>\n\n@interface XXXDateConvertTests : XXXTestCase\n\n@property (nonatomic) NSString *dateString;\n\n@end\n\n@implementation XXXDateConvertTests\n\n- (void)setUp\n{\n    [super setUp];\n    self.dateString = @\"20140408\";\n}\n\n- (void)tearDown\n{\n    // Put teardown code here. This method is called after the invocation of each test method in the class.\n    [super tearDown];\n}\n\n// MARK: \u65e5\u4ed8\u5909\u63db\u51e6\u7406\u3060\u3051\u629c\u304d\u51fa\u3057\u305f\n- (NSString *)postedAtWithDateFormatter:(NSDateFormatter *)dateFormatter\n{\n    NSInteger year = [self.dateString substringWithRange:NSMakeRange(0, 4)].integerValue;\n    NSInteger month = [self.dateString substringWithRange:NSMakeRange(4, 2)].integerValue;\n\n    [dateFormatter setDateFormat:@\"yyyy-MM-dd\"];\n\n    // MARK: \u548c\u66a6\u8a2d\u5b9a\u306e\u5834\u5408\u3001\u5e74\u3092\u6b63\u5e38\u306b\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u306e\u3067\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u30b0\u30ec\u30b4\u30ea\u30aa\u66a6\u306b\u5909\u66f4\n//    dateFormatter.calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];\n\n    NSDate *date = [dateFormatter dateFromString:[NSString stringWithFormat:@\"%i-%i-1\", year, month]];\n\n    [dateFormatter setLocale:[[NSLocale alloc]initWithLocaleIdentifier:@\"en_US\"]];\n    [dateFormatter setDateFormat:@\"MMMM, yyyy\"];\n\n    return [dateFormatter stringFromDate:date];\n}\n\n- (void)testPostedAt\n{\n    STAssertFalse([[[NSCalendar currentCalendar] calendarIdentifier] isEqualToString:NSJapaneseCalendar], @\"\");\n\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    NSString *resultString = [self postedAtWithDateFormatter:[[NSDateFormatter alloc] init]];\n\n    STAssertEqualObjects(resultString, @\"April, 2014\", @\"\");\n\n    [self createJPLocaleWithJapaneseCalendarMock];  // \u548c\u66a6\u8a2d\u5b9a\u306b\u5909\u66f4\n\n    NSLog(@\"%@\", dateFormatter.locale.localeIdentifier);\n\n    dateFormatter = [[NSDateFormatter alloc] init];\n    resultString = [self postedAtWithDateFormatter:dateFormatter];\n    STAssertFalse([resultString isEqualToString:@\"April, 2014\"], @\"\");  // April, 4002\u306b\u306a\u3063\u3066\u3057\u307e\u3046\n}\n\n@end\n\n\n\u53c2\u8003\n\n\u73fe\u5728\u306e\u8a00\u8a9e\u3068\u30ed\u30b1\u30fc\u30eb\u3092\u53d6\u5f97\u3059\u308b\n\n\n\u81ea\u5206\u306e\u4f5c\u3063\u305f\u30a2\u30d7\u30ea\u3067\u548c\u66a6\u3092\u4f7f\u3063\u3066\u3044\u306a\u304f\u3066\u3082\u3001\u30e6\u30fc\u30b6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u304c\u548c\u66a6\u3060\u3063\u305f\u308a\u3059\u308b\u3068\n\u65e5\u4ed8\u8868\u793a\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u3092\u548c\u66a6\u306b\u5909\u66f4\u3057\u3066\u5b9f\u6a5f\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d\u3092\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u3064\u3082\u305d\u308c\u3092\u6c17\u306b\u3057\u3066\u78ba\u8a8d\u306a\u3069\u306f\u3057\u306a\u3044\u3067\u3059\u3057\u5fd8\u308c\u304c\u3061\u3067\u3059\u3002\n\n\u305d\u308c\u306b\u3001\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u6319\u52d5\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3042\u308c\u3070\u3001\u65e5\u4ed8\u306b\u95a2\u3059\u308b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3082\u610f\u5473\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n## \u4e8b\u524d\u8abf\u67fb\n\niPhone\u306e\u8a2d\u5b9a\u3067\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001\u9069\u5f53\u306a\u30a2\u30d7\u30ea\u306b`NSLog(@\"%@\", [[NSUserDefaults standardUserDefaults] objectForKey:@\"AppleLocale\"]);`\n\u3067\u8a18\u8ff0\u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u73fe\u5728\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u30ed\u30b1\u30fc\u30eb\u304c\u53d6\u5f97\u51fa\u6765\u307e\u3059\u3002\n\n## OCMock\u3092\u4f7f\u3063\u3066\u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059Mock\u3092\u4f5c\u6210\n\nOCMock\u3092\u4f7f\u3044\u3001\u5148\u307b\u3069\u53d6\u5f97\u3057\u305f\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u4f7f\u3044\u56de\u305b\u308b\u3088\u3046\u306b\u3001\u4e0b\u306e\u3088\u3046\u306b`SenTestCase`\u3092\u7d99\u627f\u3057\u305f\u30d9\u30fc\u30b9\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u3001\n\u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u306eMock\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```objectivec:XXXTestCase.h\n#import <SenTestingKit/SenTestingKit.h>\n\n#import <OCMock/OCMock.h>\n\n@interface XXXTestCase : SenTestCase\n\n#pragma mark - NSLocale(ja_JP@calendar=japanese)\n\n/*!\n    @method createJPLocaleWithJapaneseCalendarMock\n    @abstract iPhone\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u8a2d\u5b9a\u3092\u548c\u66a6\u306b\u66f8\u304d\u63db\u3048\u305fMock\u3092\u4f5c\u6210\n    @discussion\n        iPhone\u306e[\u8a2d\u5b9a]-[\u4e00\u822c]-[\u8a00\u8a9e\u74b0\u5883]-[\u30ab\u30ec\u30f3\u30c0\u30fc] = \u548c\u66a6\n */\n- (id)createJPLocaleWithJapaneseCalendarMock;\n\n@end\n```\n\n```objectivec:XXXTestCase.m\n@interface XXXTestCase ()\n\n@property (nonatomic) NSMutableArray *mocksToVerify;\n\n@end\n\n@implementation XXXTestCase\n\n- (void)tearDown\n{\n    for (id mock in self.mocksToVerify) {\n        [mock verify];\n    }\n    self.mocksToVerify = nil;\n\n    // [...]\n\n    [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:XXXTestDomainName];\n\n    [super tearDown];\n}\n\n#pragma mark - NSLocale(ja_JP@calendar=japanese)\n\n- (id)createJPLocaleWithJapaneseCalendarMock\n{\n    NSLocale *locale = [NSLocale localeWithLocaleIdentifier:[NSString stringWithFormat:@\"ja_JP@calendar=%@\",\n                                                             NSJapaneseCalendar]];\n    id localeMock = [self autoVerifiedMockForClass:[NSLocale class]];\n    [[[[localeMock stub] classMethod] andReturn:locale] systemLocale];\n    [[[[localeMock stub] classMethod] andReturn:locale] currentLocale];\n    [[[[localeMock stub] classMethod] andReturn:locale] autoupdatingCurrentLocale];\n\n    return localeMock;\n}\n\n#pragma mark - Setup and verify mock: http://www.objc.io/issue-1/testing-view-controllers.html\n\n- (void)verifyDuringTearDown:(id)mock\n{\n    if (!self.mocksToVerify) {\n        self.mocksToVerify = @[].mutableCopy;\n    }\n    [self.mocksToVerify addObject:mock];\n}\n\n- (id)autoVerifiedMockForClass:(Class)aClass\n{\n    id mock = [OCMockObject mockForClass:aClass];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n- (id)autoVerifiedPartialMockForObject:(id)object\n{\n    id mock = [OCMockObject partialMockForObject:object];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n- (id)autoVerifiedNickMockForClass:(Class)aClass\n{\n    id mock = [OCMockObject niceMockForClass:aClass];\n    [self verifyDuringTearDown:mock];\n    return mock;\n}\n\n@end\n```\n\n## \u548c\u66a6\u8a2d\u5b9a\u6642\u306e\u30ed\u30b1\u30fc\u30eb\u3092\u8fd4\u3059Mock\u3092\u5229\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\n`yyyyMM`\u306e\u65e5\u4ed8\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u5e74\u3068\u6708\u306b\u5206\u5272\u3057\u305f\u5f8c\u3001\n'April, 2014'\u306e\u3088\u3046\u306a`MMMM, yyy`\u66f8\u5f0f\u306e\u6587\u5b57\u5217\u3092\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3042\u308a\u3001\n\u30ab\u30ec\u30f3\u30c0\u30fc\u304c\u548c\u66a6\u8a2d\u5b9a\u3060\u3068\u3001\u306a\u305c\u304b'April, 4002'\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u30d0\u30b0\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n\u305d\u308c\u3092\u78ba\u304b\u3081\u308b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```objectivec\n#import \"XXXTestCase.h\"\n\n#import <OCMock.h>\n\n@interface XXXDateConvertTests : XXXTestCase\n\n@property (nonatomic) NSString *dateString;\n\n@end\n\n@implementation XXXDateConvertTests\n\n- (void)setUp\n{\n    [super setUp];\n    self.dateString = @\"20140408\";\n}\n\n- (void)tearDown\n{\n    // Put teardown code here. This method is called after the invocation of each test method in the class.\n    [super tearDown];\n}\n\n// MARK: \u65e5\u4ed8\u5909\u63db\u51e6\u7406\u3060\u3051\u629c\u304d\u51fa\u3057\u305f\n- (NSString *)postedAtWithDateFormatter:(NSDateFormatter *)dateFormatter\n{\n    NSInteger year = [self.dateString substringWithRange:NSMakeRange(0, 4)].integerValue;\n    NSInteger month = [self.dateString substringWithRange:NSMakeRange(4, 2)].integerValue;\n\n    [dateFormatter setDateFormat:@\"yyyy-MM-dd\"];\n\n    // MARK: \u548c\u66a6\u8a2d\u5b9a\u306e\u5834\u5408\u3001\u5e74\u3092\u6b63\u5e38\u306b\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u306e\u3067\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u30b0\u30ec\u30b4\u30ea\u30aa\u66a6\u306b\u5909\u66f4\n//    dateFormatter.calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];\n\n    NSDate *date = [dateFormatter dateFromString:[NSString stringWithFormat:@\"%i-%i-1\", year, month]];\n\n    [dateFormatter setLocale:[[NSLocale alloc]initWithLocaleIdentifier:@\"en_US\"]];\n    [dateFormatter setDateFormat:@\"MMMM, yyyy\"];\n\n    return [dateFormatter stringFromDate:date];\n}\n\n- (void)testPostedAt\n{\n    STAssertFalse([[[NSCalendar currentCalendar] calendarIdentifier] isEqualToString:NSJapaneseCalendar], @\"\");\n\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    NSString *resultString = [self postedAtWithDateFormatter:[[NSDateFormatter alloc] init]];\n\n    STAssertEqualObjects(resultString, @\"April, 2014\", @\"\");\n\n    [self createJPLocaleWithJapaneseCalendarMock];  // \u548c\u66a6\u8a2d\u5b9a\u306b\u5909\u66f4\n\n    NSLog(@\"%@\", dateFormatter.locale.localeIdentifier);\n\n    dateFormatter = [[NSDateFormatter alloc] init];\n    resultString = [self postedAtWithDateFormatter:dateFormatter];\n    STAssertFalse([resultString isEqualToString:@\"April, 2014\"], @\"\");  // April, 4002\u306b\u306a\u3063\u3066\u3057\u307e\u3046\n}\n\n@end\n```\n\n## \u53c2\u8003\n\n* [\u73fe\u5728\u306e\u8a00\u8a9e\u3068\u30ed\u30b1\u30fc\u30eb\u3092\u53d6\u5f97\u3059\u308b](http://potting.syuriken.jp/potting_conv/BPInternational_J/chapter6.html)\n", "tags": ["Xcode5.1", "TDD", "iOS7.1", "unittest"]}