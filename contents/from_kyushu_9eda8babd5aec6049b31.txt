{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u30d3\u30c3\u30c8\u30dc\u30f3\u30d0\u30fc\u30de\u30f3\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f100\u5206\u7a0b\u5ea6\u3068\u5927\u5e45\u30aa\u30fc\u30d0\u30fc\u3002\n\u300c\u30d3\u30c3\u30c8\u30dc\u30f3\u30d0\u30fc\u30de\u30f3\u300d\u3068\u8a00\u3046\u304b\u3089\u306b\u306f\u304d\u3063\u3068\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u308b\u306e\u3060\u308d\u3046...\u3068\u601d\u3063\u305f\u306e\u3060\u304c\u3001\u3044\u307e\u3044\u3061\u89e3\u6cd5\u304c\u601d\u3044\u3064\u304b\u305a\u529b\u6280\u3067\u89e3\u6c7a\u3057\u3066\u3057\u307e\u3063\u305f\u3002\n\u7206\u5f3e\u306e\u4f4d\u7f6e\u3092\u57fa\u70b9\u3068\u3057\u3066\u7e26\u8ef8\u3001\u6a2a\u8ef8\u305d\u308c\u305e\u308c\u306e\u6700\u3082\u8fd1\u3044\u58c1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u63a2\u3057\u3001\u7206\u98a8\u304c\u5c4a\u304f\u7bc4\u56f2\u3092\u6c42\u3081\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\nclass Field\n  def initialize x, y, input\n    @x, @y = x, y\n    @wall, @bomb = input.split(\"/\").map{|str|\n      (\"%032b\" % str.to_i(16)).chars.map &:to_i\n    }\n    @field = Array.new(32){0}\n  end\n\n  def fire\n    @field.size.times{|i| bomb i}\n  end\n\n  def to_s\n    \"%08x\" % @field.map(&:to_s).join.to_i(2)\n  end\n\n  private\n\n  def bomb index\n    if @bomb[index] === 1\n      bomb_line index, @y.times.map{|i| @x * i + (index % @x)}\n      bomb_line index, @x.times.map{|i| i + ((index / @x) * @x)}\n    end\n  end\n\n  def bomb_line index, line\n    wall = line.each_with_object([]){|i, r| r << i if @wall[i] == 1}\n    min = (line.index(wall.reverse.find{|i| i < index}) || -1) + 1\n    max = (line.index(wall.find{|i| i > index}) || line.size) - 1\n    (min..max).each{|i| @field[line[i]] = 1}\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"802b1200/01400c20\", \"53c40cfc\" );\n/*1*/ test( \"28301068/84080504\", \"d64fef94\" );\n/*2*/ test( \"100a4010/80010004\", \"e241850c\" );\n/*3*/ test( \"81020400/000000fc\", \"0e3cfbfc\" );\n/*4*/ test( \"80225020/7e082080\", \"7fdd24d0\" );\n/*5*/ test( \"01201200/40102008\", \"fe1861fc\" );\n/*6*/ test( \"00201000/01000200\", \"43c48f08\" );\n/*7*/ test( \"00891220/81020408\", \"ff060c1c\" );\n/*8*/ test( \"410033c0/0c300000\", \"3cf0c000\" );\n/*9*/ test( \"00000000/01400a00\", \"7bf7bf78\" );\n/*10*/ test( \"00000000/20000a00\", \"fca2bf28\" );\n/*11*/ test( \"00000000/00000000\", \"00000000\" );\n/*12*/ test( \"00cafe00/00000000\", \"00000000\" );\n/*13*/ test( \"aaabaaaa/50000000\", \"51441040\" );\n/*14*/ test( \"a95a95a8/56a56a54\", \"56a56a54\" );\n/*15*/ test( \"104fc820/80201010\", \"ea30345c\" );\n/*16*/ test( \"4a940214/05000008\", \"05000008\" );\n/*17*/ test( \"00908000/05000200\", \"ff043f48\" );\n/*18*/ test( \"00c48c00/fe1861fc\", \"ff3873fc\" );\n/*19*/ test( \"00000004/81020400\", \"fffffff0\" );\n/*20*/ test( \"111028b0/40021100\", \"e08fd744\" );\n/*21*/ test( \"6808490c/01959000\", \"17f7b650\" );\n/*22*/ test( \"30821004/81014040\", \"c75de5f8\" );\n/*23*/ test( \"0004c810/10003100\", \"fe4937c4\" );\n/*24*/ test( \"12022020/88200000\", \"edf08208\" );\n/*25*/ test( \"2aa92098/01160000\", \"45165964\" );\n/*26*/ test( \"00242940/10010004\", \"fc43c43c\" );\n/*27*/ test( \"483c2120/11004c00\", \"33c3de10\" );\n/*28*/ test( \"10140140/44004a04\", \"eda3fe3c\" );\n/*29*/ test( \"0c901d38/72602200\", \"f36da280\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BitBomberman' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    field = Field.new 6, 5, input\n    field.fire\n    it input do\n      assert_equal expect, field.to_s\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u30d3\u30c3\u30c8\u30dc\u30f3\u30d0\u30fc\u30de\u30f3](http://nabetani.sakura.ne.jp/hena/ord8biboma/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f100\u5206\u7a0b\u5ea6\u3068\u5927\u5e45\u30aa\u30fc\u30d0\u30fc\u3002\n\n\u300c\u30d3\u30c3\u30c8\u30dc\u30f3\u30d0\u30fc\u30de\u30f3\u300d\u3068\u8a00\u3046\u304b\u3089\u306b\u306f\u304d\u3063\u3068\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u308b\u306e\u3060\u308d\u3046...\u3068\u601d\u3063\u305f\u306e\u3060\u304c\u3001\u3044\u307e\u3044\u3061\u89e3\u6cd5\u304c\u601d\u3044\u3064\u304b\u305a\u529b\u6280\u3067\u89e3\u6c7a\u3057\u3066\u3057\u307e\u3063\u305f\u3002\n\u7206\u5f3e\u306e\u4f4d\u7f6e\u3092\u57fa\u70b9\u3068\u3057\u3066\u7e26\u8ef8\u3001\u6a2a\u8ef8\u305d\u308c\u305e\u308c\u306e\u6700\u3082\u8fd1\u3044\u58c1\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u63a2\u3057\u3001\u7206\u98a8\u304c\u5c4a\u304f\u7bc4\u56f2\u3092\u6c42\u3081\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n```ruby\nclass Field\n  def initialize x, y, input\n    @x, @y = x, y\n    @wall, @bomb = input.split(\"/\").map{|str|\n      (\"%032b\" % str.to_i(16)).chars.map &:to_i\n    }\n    @field = Array.new(32){0}\n  end\n\n  def fire\n    @field.size.times{|i| bomb i}\n  end\n\n  def to_s\n    \"%08x\" % @field.map(&:to_s).join.to_i(2)\n  end\n\n  private\n\n  def bomb index\n    if @bomb[index] === 1\n      bomb_line index, @y.times.map{|i| @x * i + (index % @x)}\n      bomb_line index, @x.times.map{|i| i + ((index / @x) * @x)}\n    end\n  end\n\n  def bomb_line index, line\n    wall = line.each_with_object([]){|i, r| r << i if @wall[i] == 1}\n    min = (line.index(wall.reverse.find{|i| i < index}) || -1) + 1\n    max = (line.index(wall.find{|i| i > index}) || line.size) - 1\n    (min..max).each{|i| @field[line[i]] = 1}\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"802b1200/01400c20\", \"53c40cfc\" );\n/*1*/ test( \"28301068/84080504\", \"d64fef94\" );\n/*2*/ test( \"100a4010/80010004\", \"e241850c\" );\n/*3*/ test( \"81020400/000000fc\", \"0e3cfbfc\" );\n/*4*/ test( \"80225020/7e082080\", \"7fdd24d0\" );\n/*5*/ test( \"01201200/40102008\", \"fe1861fc\" );\n/*6*/ test( \"00201000/01000200\", \"43c48f08\" );\n/*7*/ test( \"00891220/81020408\", \"ff060c1c\" );\n/*8*/ test( \"410033c0/0c300000\", \"3cf0c000\" );\n/*9*/ test( \"00000000/01400a00\", \"7bf7bf78\" );\n/*10*/ test( \"00000000/20000a00\", \"fca2bf28\" );\n/*11*/ test( \"00000000/00000000\", \"00000000\" );\n/*12*/ test( \"00cafe00/00000000\", \"00000000\" );\n/*13*/ test( \"aaabaaaa/50000000\", \"51441040\" );\n/*14*/ test( \"a95a95a8/56a56a54\", \"56a56a54\" );\n/*15*/ test( \"104fc820/80201010\", \"ea30345c\" );\n/*16*/ test( \"4a940214/05000008\", \"05000008\" );\n/*17*/ test( \"00908000/05000200\", \"ff043f48\" );\n/*18*/ test( \"00c48c00/fe1861fc\", \"ff3873fc\" );\n/*19*/ test( \"00000004/81020400\", \"fffffff0\" );\n/*20*/ test( \"111028b0/40021100\", \"e08fd744\" );\n/*21*/ test( \"6808490c/01959000\", \"17f7b650\" );\n/*22*/ test( \"30821004/81014040\", \"c75de5f8\" );\n/*23*/ test( \"0004c810/10003100\", \"fe4937c4\" );\n/*24*/ test( \"12022020/88200000\", \"edf08208\" );\n/*25*/ test( \"2aa92098/01160000\", \"45165964\" );\n/*26*/ test( \"00242940/10010004\", \"fc43c43c\" );\n/*27*/ test( \"483c2120/11004c00\", \"33c3de10\" );\n/*28*/ test( \"10140140/44004a04\", \"eda3fe3c\" );\n/*29*/ test( \"0c901d38/72602200\", \"f36da280\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BitBomberman' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    field = Field.new 6, 5, input\n    field.fire\n    it input do\n      assert_equal expect, field.to_s\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}