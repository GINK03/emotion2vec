{"context": "\u30a4\u30de\u30a4\u30c1\u7406\u89e3\u3057\u304d\u308c\u3066\u3044\u306a\u304b\u3063\u305fDI\u306b\u95a2\u3057\u3066\u8abf\u3079\u3066\u3044\u3068\u3053\u308d\u3001Google Guice\u306e\u89e3\u8aac\u304c\u3059\u3054\u304f\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u3001\u548c\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n \uff08\u3068\u3053\u308d\u3069\u3053\u308d\u610f\u8a33\u6c17\u5473\u3067\u3059\u3002\u660e\u3089\u304b\u306b\u89e3\u91c8\u306e\u8aa4\u3063\u305f\u8a33\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u304f\u3060\u3055\u3044\uff09\n\u3061\u306a\u307f\u306bGoogle Guice\u3068\u3044\u3046\u306e\u306f\u3001Google\u304c\u958b\u767a\u3057\u305fDI\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306fJava\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Scala\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\u6700\u8fd1Play Framework\u3067\u3082\u63a1\u7528\u3055\u308c\u305f\u306e\u3067\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u7528\u8a9e\u306e\u5b9a\u7fa9\n\u672c\u6587\u3092\u8aad\u3080\u524d\u306b\u76ee\u3092\u901a\u3059\u3053\u3068\u3067\u3001\u5185\u5bb9\u3092\u30b9\u30e0\u30fc\u30ba\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u7528\u8a9e\n\u610f\u5473\n\u672c\u6587\u4e2d\u306e\u4f8b\n\n\n\n\n\u30b5\u30fc\u30d3\u30b9\n\u4f55\u3089\u304b\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\u3002 \u4f9d\u5b58\u3055\u308c\u308b\u5074\n\nCreditCardProcessor\u3001TransactionLog\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\u3002 \u4f9d\u5b58\u3059\u308b\u5074\n\nRealBillingService\n\n\n\u4f9d\u5b58\u6027\u89e3\u6c7a\n\u30b5\u30fc\u30d3\u30b9\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u30b3\u30fc\u30c9\u4e0a\u3067\u660e\u8a18\u3059\u308b\u3053\u3068\nnew\u6f14\u7b97\u5b50\u3001Factory\u30af\u30e9\u30b9\u3001DI\n\n\n\u30e2\u30c3\u30af\n\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u304a\u3044\u3066\u3001\u5b9f\u969b\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u4ee3\u308f\u308a\u306b\u7528\u610f\u3059\u308b\u507d\u306e\u30af\u30e9\u30b9\u3002\u672c\u7269\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3059\u308b\nInMemoryTransactionLog\u3001FakeCreditCardProcessor\n\n\n\n\n\u672c\u6587\n\nDI\u3092\u884c\u3046\u52d5\u6a5f\n\u95a2\u4fc2\u3059\u308b\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\u306e\u306f\u3001\u30a2\u30d7\u30ea\u958b\u767a\u306e\u4e2d\u3067\u3082\u9000\u5c48\u306a\u4f5c\u696d\u3067\u3059\u3002\u30b5\u30fc\u30d3\u30b9\u3001\u30c7\u30fc\u30bf\u3001\u305d\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7d50\u5408\u3059\u308b\u65b9\u6cd5\u306b\u306f\u8272\u3005\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u65b9\u6cd5\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306b\u3001\u30d4\u30b6\u306e\u30cd\u30c3\u30c8\u6ce8\u6587\u306e\u4ee3\u91d1\u3092\u8acb\u6c42\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n public interface BillingService {\n\n  /**\n   * \u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306b\u6ce8\u6587\u4ee3\u306e\u8ab2\u91d1\u3092\u8a66\u307f\u308b\u3002\n   * \u6210\u529f\u3057\u3066\u3082\u5931\u6557\u3057\u3066\u3082\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306f\u8a18\u9332\u3055\u308c\u308b\u3002\n   * @ return \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u9818\u53ce\u66f8\uff08Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u8fd4\u3059\u3002\u8ab2\u91d1\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6b63\u5e38\u306a\u5024\u3092\u6301\u3064\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u3001Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u8ab2\u91d1\u304c\u5931\u6557\u3057\u305f\u7406\u7531\u3092\u4fdd\u6301\u3059\u308b\u3002 \n   */\n  Receipt chargeOrder(PizzaOrder order, CreditCard creditCard);\n}\n\n\u3000\u5b9f\u88c5\u306b\u969b\u3057\u3066\u306f\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u3067\u306f\u3001\u672c\u7269\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306b\u8ab2\u91d1\u3057\u3066\u3057\u307e\u308f\u306a\u3044\u3088\u3046\u3001\u507d\u306e\u30ab\u30fc\u30c9\u8ab2\u91d1\u3092\u8868\u3059FakeCreditCardProcessor\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\n\u3000\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30ab\u30fc\u30c9\u8ab2\u91d1\u3092\u884c\u3046\u30af\u30e9\u30b9\uff08CreditCardProcessor\u30af\u30e9\u30b9\uff09\u3068\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b\u30af\u30e9\u30b9\uff08TransactionLog\u30af\u30e9\u30b9\uff09\u3092\u3001\u611a\u76f4\u306bnew\u6f14\u7b97\u5b50\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u5834\u5408\u3067\u3059\u3002\npublic class RealBillingService implements BillingService {\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    CreditCardProcessor processor = new PaypalCreditCardProcessor();\n    TransactionLog transactionLog = new DatabaseTransactionLog();\n\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n\n\u3000\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3068\u30c6\u30b9\u30c8\u6027\u306b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u672c\u7269\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u8ab2\u91d1\u3092\u884c\u3046\u30af\u30e9\u30b9\uff08CreditCardProcessor\u30af\u30e9\u30b9\uff09\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u70b9\u3067\u76f4\u63a5\u4f9d\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3068\u30ab\u30fc\u30c9\u306b\u8ab2\u91d1\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff01 \u307e\u305f\u3001\u8ab2\u91d1\u304c\u5931\u6557\u3057\u305f\u6642\u3084\u30af\u30ec\u30b8\u30c3\u30c8\u30b5\u30fc\u30d3\u30b9\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u306e\u6319\u52d5\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306e\u306b\u3082\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\u3000\u3000\n\nFactory\u30af\u30e9\u30b9\nFactory\u30af\u30e9\u30b9\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d3\u30b9\u306e\u5b9f\u88c5\u3068\u3092\u5206\u96e2\u3057\u307e\u3059\u3002\u5358\u7d14\u306aFactory\u30af\u30e9\u30b9\u3067\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30c3\u30af\u3092getter\u3084setter\u3067\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\npublic class CreditCardProcessorFactory {\n\n  private static CreditCardProcessor instance;\n\n  public static void setInstance(CreditCardProcessor processor) {\n    instance = processor;\n  }\n\n  public static CreditCardProcessor getInstance() {\n    if (instance == null) {\n      return new SquareCreditCardProcessor();\n    }\n\n    return instance;\n  }\n}\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u884c\u3046\u3053\u3068\u306f\u3001new\u547c\u3073\u51fa\u3057\u3092Factory\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002\npublic class RealBillingService implements BillingService {\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    CreditCardProcessor processor = CreditCardProcessorFactory.getInstance();\n    TransactionLog transactionLog = TransactionLogFactory.getInstance();\n\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n\nFactory\u3092\u4f7f\u3046\u3068\u3001\u6a19\u6e96\u7684\u306a\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\npublic class RealBillingServiceTest extends TestCase {\n\n  private final PizzaOrder order = new PizzaOrder(100);\n  private final CreditCard creditCard = new CreditCard(\"1234\", 11, 2010);\n\n  private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();\n  private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();\n\n  @Override public void setUp() {\n    TransactionLogFactory.setInstance(transactionLog);\n    CreditCardProcessorFactory.setInstance(processor);\n  }\n\n  @Override public void tearDown() {\n    TransactionLogFactory.setInstance(null);\n    CreditCardProcessorFactory.setInstance(null);\n  }\n\n  public void testSuccessfulCharge() {\n    RealBillingService billingService = new RealBillingService();\n    Receipt receipt = billingService.chargeOrder(order, creditCard);\n\n    assertTrue(receipt.hasSuccessfulCharge());\n    assertEquals(100, receipt.getAmountOfCharge());\n    assertEquals(creditCard, processor.getCardOfOnlyCharge());\n    assertEquals(100, processor.getAmountOfOnlyCharge());\n    assertTrue(transactionLog.wasSuccessLogged());\n  }\n}\n\n\u3000\u3053\u306e\u30b3\u30fc\u30c9\u3082\u30b9\u30de\u30fc\u30c8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304c\u30e2\u30c3\u30af\u5b9f\u88c5\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30e2\u30c3\u30af\u306e\u7528\u610f\u3068\u7834\u68c4\u306b\u306f\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u8981\u3057\u307e\u3059\u3002tearDown\u30e1\u30bd\u30c3\u30c9\u304c\u5931\u6557\u3059\u308b\u3068\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306f\u30c6\u30b9\u30c8\u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u7d9a\u3051\u307e\u3059\u3002\u3053\u3046\u306a\u308b\u3068\u5225\u306e\u30c6\u30b9\u30c8\u306b\u5f71\u97ff\u304c\u51fa\u304b\u306d\u307e\u305b\u3093\u3057\u3001\u8907\u6570\u306e\u30c6\u30b9\u30c8\u3092\u4e26\u884c\u3057\u3066\u9032\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u305b\u3093\u3002\n\u3000\u3057\u304b\u3057\u6700\u5927\u306e\u554f\u984c\u306f\u3001\u4f9d\u5b58\u6027\u304c\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u96a0\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u3082\u3057\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306e\u306a\u308a\u3059\u307e\u3057\u3092\u8ffd\u8de1\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001RealBillingService\u304c\u305d\u306e\u30af\u30e9\u30b9\u306b\u3082\u4f9d\u5b58\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u6642\u3001\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3069\u306e\u30af\u30e9\u30b9\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u304b\u3092\u77e5\u308b\u306b\u306f\u3001\u30c6\u30b9\u30c8\u3092\u3082\u3046\u4e00\u56de\u5b9f\u884c\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3082\u3057Factory\u3092\u521d\u671f\u5316\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3082\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067\u6c17\u3065\u3051\u307e\u305b\u3093\u3002\u30a2\u30d7\u30ea\u304c\u80a5\u5927\u5316\u3059\u308b\u306b\u3064\u308c\u3001\u4f9d\u5b58\u6027\u306e\u9762\u5012\u3092\u898b\u3066\u3044\u308bFactory\u306f\u3001\u751f\u7523\u6027\u3092\u843d\u3068\u3059\u539f\u56e0\u306b\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3000\n\u3000\u54c1\u8cea\u554f\u984c\u306f\u3001\u54c1\u8cea\u4fdd\u8a3c\u90e8\u3084\u53d7\u3051\u5165\u308c\u30c6\u30b9\u30c8\u3067\u88dc\u8db3\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u308c\u3067\u5341\u5206\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3063\u3068\u3046\u307e\u304f\u3084\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f9d\u5b58\u6027\u6ce8\u5165(DI)\n\u3000Factory\u306e\u3088\u3046\u306b\u3001DI\u3082\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\u305d\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u306f\u3001 \u632f\u308b\u307e\u3044\u3068\u4f9d\u5b58\u6027\u89e3\u6c7a\u3092\u5206\u96e2\u3059\u308b \u3053\u3068\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3001RealBillingService\u306f\u3001TransactionLog\u3068CreditCardProcessor\u3092\u898b\u3064\u3051\u3066\u304f\u308b\u8cac\u4efb\u3092\u8ca0\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u305d\u308c\u3089\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u307e\u3059\u3002\npublic class RealBillingService implements BillingService {\n  private final CreditCardProcessor processor;\n  private final TransactionLog transactionLog;\n\n  public RealBillingService(CreditCardProcessor processor, \n      TransactionLog transactionLog) {\n    this.processor = processor;\n    this.transactionLog = transactionLog;\n  }\n\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n\n\u3082\u306f\u3084Factory\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u4e0a\u3001\u6c7a\u307e\u308a\u6587\u53e5\u3068\u5316\u3057\u305fsetUp\u3068tearDown\u3092\u53d6\u308a\u9664\u3044\u305f\u304a\u304b\u3052\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u7c21\u6f54\u306b\u306a\u308a\u307e\u3057\u305f\u3002\npublic class RealBillingServiceTest extends TestCase {\n\n  private final PizzaOrder order = new PizzaOrder(100);\n  private final CreditCard creditCard = new CreditCard(\"1234\", 11, 2010);\n\n  private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();\n  private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();\n\n  public void testSuccessfulCharge() {\n    RealBillingService billingService\n        = new RealBillingService(processor, transactionLog);\n    Receipt receipt = billingService.chargeOrder(order, creditCard);\n\n    assertTrue(receipt.hasSuccessfulCharge());\n    assertEquals(100, receipt.getAmountOfCharge());\n    assertEquals(creditCard, processor.getCardOfOnlyCharge());\n    assertEquals(100, processor.getAmountOfOnlyCharge());\n    assertTrue(transactionLog.wasSuccessLogged());\n  }\n}\n\n\u3000\u3053\u3046\u306a\u308c\u3070\u3001\u3044\u3064\u4f9d\u5b58\u6027\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3068\u524a\u9664\u3057\u3088\u3046\u3068\u3001\u3069\u306e\u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u3057\u305f\u3089\u826f\u3044\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002\u4f9d\u5b58\u6027\u306f\u3001API\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3068\u3057\u3066\u5916\u51fa\u3057\u3055\u308c\u305f\u306e\u3067\u3059\u3002\n\u3000\u305f\u3060\u6b8b\u5ff5\u306a\u304c\u3089\u3001BillingService\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001\u4f9d\u5b58\u6027\u3092\u81ea\u5206\u3067\u898b\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002BillingService\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067BillingService\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u518d\u5ea6DI\u30d1\u30bf\u30fc\u30f3\u3092\u9069\u7528\u3059\u308c\u3070\u3001\u5927\u65b9\u554f\u984c\u306f\u89e3\u6c7a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u6700\u4e0a\u4f4d\u306e\u30af\u30e9\u30b9\u306b\u3068\u3063\u3066\u306f\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u3063\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3057\u3087\u3046\u3002\u3055\u3082\u306a\u3044\u3068\u3001\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u7528\u3059\u308b\u306e\u306b\u518d\u5e30\u7684\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u69cb\u7bc9\u3059\u308b\u306f\u3081\u306b\u306a\u308a\u307e\u3059\u3002\n  public static void main(String[] args) {\n    CreditCardProcessor processor = new PaypalCreditCardProcessor();\n    TransactionLog transactionLog = new DatabaseTransactionLog();\n    BillingService billingService\n        = new RealBillingService(processor, transactionLog);\n    ...\n  }\n\n\nGuice\u306b\u3088\u308b\u4f9d\u5b58\u6027\u6ce8\u5165\n\u3000DI\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u3063\u3066\u30b3\u30fc\u30c9\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3068\u30c6\u30b9\u30c8\u6027\u3092\u4e0a\u3052\u3089\u308c\u307e\u3059\u304c\u3001Guice\u3092\u4f7f\u3048\u3070\u540c\u3058\u3053\u3068\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Guice\u3092\u30ab\u30fc\u30c9\u8acb\u6c42\u306e\u4f8b\u306b\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u5b9f\u88c5\u306e\u95a2\u4fc2\u3092Guice\u306b\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f\u3001Module\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305fJava\u30af\u30e9\u30b9\uff08Guice Module\u30af\u30e9\u30b9\uff09\u3067\u884c\u308f\u308c\u307e\u3059\u3002\npublic class BillingModule extends AbstractModule {\n  @Override \n  protected void configure() {\n    bind(TransactionLog.class).to(DatabaseTransactionLog.class);\n    bind(CreditCardProcessor.class).to(PaypalCreditCardProcessor.class);\n    bind(BillingService.class).to(RealBillingService.class);\n  }\n}\n\n\u3000\u3053\u306e\u8a2d\u5b9a\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001@Inject\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092RealBillingService\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4ed8\u4e0e\u3057\u307e\u3059\u3002\u3059\u308b\u3068Guice\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u3064\u3044\u305f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8abf\u3079\u3001\u5f15\u6570\u306e\u5024\u3092\u898b\u3064\u3051\u3066\u304d\u3066\u304f\u308c\u307e\u3059\u3002\npublic class RealBillingService implements BillingService {\n  private final CreditCardProcessor processor;\n  private final TransactionLog transactionLog;\n\n  @Inject\n  public RealBillingService(CreditCardProcessor processor,\n      TransactionLog transactionLog) {\n    this.processor = processor;\n    this.transactionLog = transactionLog;\n  }\n\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n\n\u3000\u3053\u3046\u3057\u3066\u3001\u5168\u90e8\u306e\u30af\u30e9\u30b9\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002Injector\u306f\u7d50\u5408\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n  public static void main(String[] args) {\n    Injector injector = Guice.createInjector(new BillingModule());\n    BillingService billingService = injector.getInstance(BillingService.class);\n    ...\n  }\n\n\nGetting Started\u306b\u3001\u3069\u306e\u3088\u3046\u306b\u3053\u306e\u30b3\u30fc\u30c9\u304c\u52d5\u304f\u306e\u304b\u306e\u8aac\u660e\u304c\u3042\u308a\u307e\u3059\u3002\n \n \u30a4\u30de\u30a4\u30c1\u7406\u89e3\u3057\u304d\u308c\u3066\u3044\u306a\u304b\u3063\u305fDI\u306b\u95a2\u3057\u3066\u8abf\u3079\u3066\u3044\u3068\u3053\u308d\u3001[Google Guice](https://github.com/google/guice/wiki/Motivation)\u306e\u89e3\u8aac\u304c\u3059\u3054\u304f\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u306e\u3067\u3001\u548c\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n \uff08\u3068\u3053\u308d\u3069\u3053\u308d\u610f\u8a33\u6c17\u5473\u3067\u3059\u3002\u660e\u3089\u304b\u306b\u89e3\u91c8\u306e\u8aa4\u3063\u305f\u8a33\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u304f\u3060\u3055\u3044\uff09\n \n \u3061\u306a\u307f\u306bGoogle Guice\u3068\u3044\u3046\u306e\u306f\u3001Google\u304c\u958b\u767a\u3057\u305fDI\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306fJava\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Scala\u3067\u3082\u4f7f\u7528\u53ef\u80fd\u3067\u3059\u3002\u6700\u8fd1Play Framework\u3067\u3082\u63a1\u7528\u3055\u308c\u305f\u306e\u3067\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n \n##\u7528\u8a9e\u306e\u5b9a\u7fa9\n\n\u672c\u6587\u3092\u8aad\u3080\u524d\u306b\u76ee\u3092\u901a\u3059\u3053\u3068\u3067\u3001\u5185\u5bb9\u3092\u30b9\u30e0\u30fc\u30ba\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n  \n|\u7528\u8a9e|\u610f\u5473|\u672c\u6587\u4e2d\u306e\u4f8b|\n|:-:|:-:|:-:|\n|\u30b5\u30fc\u30d3\u30b9|\u4f55\u3089\u304b\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\u3002 **\u4f9d\u5b58\u3055\u308c\u308b\u5074** |CreditCardProcessor\u3001TransactionLog|\n|\u30af\u30e9\u30a4\u30a2\u30f3\u30c8|\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\u3002 **\u4f9d\u5b58\u3059\u308b\u5074** | RealBillingService |\n|\u4f9d\u5b58\u6027\u89e3\u6c7a|\u30b5\u30fc\u30d3\u30b9\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u30b3\u30fc\u30c9\u4e0a\u3067\u660e\u8a18\u3059\u308b\u3053\u3068|new\u6f14\u7b97\u5b50\u3001Factory\u30af\u30e9\u30b9\u3001DI|\n|\u30e2\u30c3\u30af|\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u304a\u3044\u3066\u3001\u5b9f\u969b\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u4ee3\u308f\u308a\u306b\u7528\u610f\u3059\u308b\u507d\u306e\u30af\u30e9\u30b9\u3002\u672c\u7269\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3059\u308b|InMemoryTransactionLog\u3001FakeCreditCardProcessor|\n\n \n##\u672c\u6587\n\n### DI\u3092\u884c\u3046\u52d5\u6a5f\n \n \u95a2\u4fc2\u3059\u308b\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\u306e\u306f\u3001\u30a2\u30d7\u30ea\u958b\u767a\u306e\u4e2d\u3067\u3082\u9000\u5c48\u306a\u4f5c\u696d\u3067\u3059\u3002\u30b5\u30fc\u30d3\u30b9\u3001\u30c7\u30fc\u30bf\u3001\u305d\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7d50\u5408\u3059\u308b\u65b9\u6cd5\u306b\u306f\u8272\u3005\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u65b9\u6cd5\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306b\u3001\u30d4\u30b6\u306e\u30cd\u30c3\u30c8\u6ce8\u6587\u306e\u4ee3\u91d1\u3092\u8acb\u6c42\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```Java:\n public interface BillingService {\n\n  /**\n   * \u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306b\u6ce8\u6587\u4ee3\u306e\u8ab2\u91d1\u3092\u8a66\u307f\u308b\u3002\n   * \u6210\u529f\u3057\u3066\u3082\u5931\u6557\u3057\u3066\u3082\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306f\u8a18\u9332\u3055\u308c\u308b\u3002\n   * @ return \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u9818\u53ce\u66f8\uff08Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u8fd4\u3059\u3002\u8ab2\u91d1\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u6b63\u5e38\u306a\u5024\u3092\u6301\u3064\u3002\u5931\u6557\u3057\u305f\u5834\u5408\u3001Recipt\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u8ab2\u91d1\u304c\u5931\u6557\u3057\u305f\u7406\u7531\u3092\u4fdd\u6301\u3059\u308b\u3002 \n   */\n  Receipt chargeOrder(PizzaOrder order, CreditCard creditCard);\n}\n```\n\n\u3000\u5b9f\u88c5\u306b\u969b\u3057\u3066\u306f\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u3067\u306f\u3001\u672c\u7269\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306b\u8ab2\u91d1\u3057\u3066\u3057\u307e\u308f\u306a\u3044\u3088\u3046\u3001\u507d\u306e\u30ab\u30fc\u30c9\u8ab2\u91d1\u3092\u8868\u3059```FakeCreditCardProcessor```\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\n\n\u3000\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30ab\u30fc\u30c9\u8ab2\u91d1\u3092\u884c\u3046\u30af\u30e9\u30b9\uff08```CreditCardProcessor```\u30af\u30e9\u30b9\uff09\u3068\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b\u30af\u30e9\u30b9\uff08```TransactionLog```\u30af\u30e9\u30b9\uff09\u3092\u3001\u611a\u76f4\u306bnew\u6f14\u7b97\u5b50\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u5834\u5408\u3067\u3059\u3002\n\n```Java:\npublic class RealBillingService implements BillingService {\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    CreditCardProcessor processor = new PaypalCreditCardProcessor();\n    TransactionLog transactionLog = new DatabaseTransactionLog();\n\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n```\n\n\u3000\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3068\u30c6\u30b9\u30c8\u6027\u306b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u672c\u7269\u306e\u30af\u30ec\u30b8\u30c3\u30c8\u8ab2\u91d1\u3092\u884c\u3046\u30af\u30e9\u30b9\uff08```CreditCardProcessor```\u30af\u30e9\u30b9\uff09\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u70b9\u3067\u76f4\u63a5\u4f9d\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u3092\u3059\u308b\u3068\u30ab\u30fc\u30c9\u306b\u8ab2\u91d1\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff01 \u307e\u305f\u3001\u8ab2\u91d1\u304c\u5931\u6557\u3057\u305f\u6642\u3084\u30af\u30ec\u30b8\u30c3\u30c8\u30b5\u30fc\u30d3\u30b9\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u6642\u306e\u6319\u52d5\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306e\u306b\u3082\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\u3000\u3000\n###Factory\u30af\u30e9\u30b9\n\nFactory\u30af\u30e9\u30b9\u306f\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d3\u30b9\u306e\u5b9f\u88c5\u3068\u3092\u5206\u96e2\u3057\u307e\u3059\u3002\u5358\u7d14\u306aFactory\u30af\u30e9\u30b9\u3067\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30e2\u30c3\u30af\u3092getter\u3084setter\u3067\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\n\n```Java:\npublic class CreditCardProcessorFactory {\n\n  private static CreditCardProcessor instance;\n\n  public static void setInstance(CreditCardProcessor processor) {\n    instance = processor;\n  }\n\n  public static CreditCardProcessor getInstance() {\n    if (instance == null) {\n      return new SquareCreditCardProcessor();\n    }\n\n    return instance;\n  }\n}\n```\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u884c\u3046\u3053\u3068\u306f\u3001new\u547c\u3073\u51fa\u3057\u3092Factory\u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```Java:\npublic class RealBillingService implements BillingService {\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    CreditCardProcessor processor = CreditCardProcessorFactory.getInstance();\n    TransactionLog transactionLog = TransactionLogFactory.getInstance();\n\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n```\n\n Factory\u3092\u4f7f\u3046\u3068\u3001\u6a19\u6e96\u7684\u306a\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```Java:\npublic class RealBillingServiceTest extends TestCase {\n\n  private final PizzaOrder order = new PizzaOrder(100);\n  private final CreditCard creditCard = new CreditCard(\"1234\", 11, 2010);\n\n  private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();\n  private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();\n\n  @Override public void setUp() {\n    TransactionLogFactory.setInstance(transactionLog);\n    CreditCardProcessorFactory.setInstance(processor);\n  }\n\n  @Override public void tearDown() {\n    TransactionLogFactory.setInstance(null);\n    CreditCardProcessorFactory.setInstance(null);\n  }\n\n  public void testSuccessfulCharge() {\n    RealBillingService billingService = new RealBillingService();\n    Receipt receipt = billingService.chargeOrder(order, creditCard);\n\n    assertTrue(receipt.hasSuccessfulCharge());\n    assertEquals(100, receipt.getAmountOfCharge());\n    assertEquals(creditCard, processor.getCardOfOnlyCharge());\n    assertEquals(100, processor.getAmountOfOnlyCharge());\n    assertTrue(transactionLog.wasSuccessLogged());\n  }\n}\n```\n\n\u3000\u3053\u306e\u30b3\u30fc\u30c9\u3082\u30b9\u30de\u30fc\u30c8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304c\u30e2\u30c3\u30af\u5b9f\u88c5\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30e2\u30c3\u30af\u306e\u7528\u610f\u3068\u7834\u68c4\u306b\u306f\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u8981\u3057\u307e\u3059\u3002tearDown\u30e1\u30bd\u30c3\u30c9\u304c\u5931\u6557\u3059\u308b\u3068\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306f\u30c6\u30b9\u30c8\u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53c2\u7167\u3057\u7d9a\u3051\u307e\u3059\u3002\u3053\u3046\u306a\u308b\u3068\u5225\u306e\u30c6\u30b9\u30c8\u306b\u5f71\u97ff\u304c\u51fa\u304b\u306d\u307e\u305b\u3093\u3057\u3001\u8907\u6570\u306e\u30c6\u30b9\u30c8\u3092\u4e26\u884c\u3057\u3066\u9032\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u3000\u3057\u304b\u3057\u6700\u5927\u306e\u554f\u984c\u306f\u3001\u4f9d\u5b58\u6027\u304c\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u96a0\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u3082\u3057\u3001\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306e\u306a\u308a\u3059\u307e\u3057\u3092\u8ffd\u8de1\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001```RealBillingService```\u304c\u305d\u306e\u30af\u30e9\u30b9\u306b\u3082\u4f9d\u5b58\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u6642\u3001\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3069\u306e\u30af\u30e9\u30b9\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u304b\u3092\u77e5\u308b\u306b\u306f\u3001\u30c6\u30b9\u30c8\u3092\u3082\u3046\u4e00\u56de\u5b9f\u884c\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3082\u3057Factory\u3092\u521d\u671f\u5316\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3082\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067\u6c17\u3065\u3051\u307e\u305b\u3093\u3002\u30a2\u30d7\u30ea\u304c\u80a5\u5927\u5316\u3059\u308b\u306b\u3064\u308c\u3001\u4f9d\u5b58\u6027\u306e\u9762\u5012\u3092\u898b\u3066\u3044\u308bFactory\u306f\u3001\u751f\u7523\u6027\u3092\u843d\u3068\u3059\u539f\u56e0\u306b\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u3000\n\u3000\u54c1\u8cea\u554f\u984c\u306f\u3001\u54c1\u8cea\u4fdd\u8a3c\u90e8\u3084\u53d7\u3051\u5165\u308c\u30c6\u30b9\u30c8\u3067\u88dc\u8db3\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u3002\u305d\u308c\u3067\u5341\u5206\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3063\u3068\u3046\u307e\u304f\u3084\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n###\u4f9d\u5b58\u6027\u6ce8\u5165(DI)\n\n\u3000Factory\u306e\u3088\u3046\u306b\u3001DI\u3082\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\u305d\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u306f\u3001 **\u632f\u308b\u307e\u3044\u3068\u4f9d\u5b58\u6027\u89e3\u6c7a\u3092\u5206\u96e2\u3059\u308b** \u3053\u3068\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3001```RealBillingService```\u306f\u3001```TransactionLog```\u3068```CreditCardProcessor```\u3092\u898b\u3064\u3051\u3066\u304f\u308b\u8cac\u4efb\u3092\u8ca0\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u305d\u308c\u3089\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u307e\u3059\u3002\n\n```Java:\npublic class RealBillingService implements BillingService {\n  private final CreditCardProcessor processor;\n  private final TransactionLog transactionLog;\n\n  public RealBillingService(CreditCardProcessor processor, \n      TransactionLog transactionLog) {\n    this.processor = processor;\n    this.transactionLog = transactionLog;\n  }\n\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n```\n\n\u3082\u306f\u3084Factory\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u4e0a\u3001\u6c7a\u307e\u308a\u6587\u53e5\u3068\u5316\u3057\u305f```setUp```\u3068```tearDown```\u3092\u53d6\u308a\u9664\u3044\u305f\u304a\u304b\u3052\u3067\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u7c21\u6f54\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```Java:\npublic class RealBillingServiceTest extends TestCase {\n\n  private final PizzaOrder order = new PizzaOrder(100);\n  private final CreditCard creditCard = new CreditCard(\"1234\", 11, 2010);\n\n  private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();\n  private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();\n\n  public void testSuccessfulCharge() {\n    RealBillingService billingService\n        = new RealBillingService(processor, transactionLog);\n    Receipt receipt = billingService.chargeOrder(order, creditCard);\n\n    assertTrue(receipt.hasSuccessfulCharge());\n    assertEquals(100, receipt.getAmountOfCharge());\n    assertEquals(creditCard, processor.getCardOfOnlyCharge());\n    assertEquals(100, processor.getAmountOfOnlyCharge());\n    assertTrue(transactionLog.wasSuccessLogged());\n  }\n}\n```\n\n\u3000\u3053\u3046\u306a\u308c\u3070\u3001\u3044\u3064\u4f9d\u5b58\u6027\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3068\u524a\u9664\u3057\u3088\u3046\u3068\u3001\u3069\u306e\u30c6\u30b9\u30c8\u3092\u4fee\u6b63\u3057\u305f\u3089\u826f\u3044\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002\u4f9d\u5b58\u6027\u306f\u3001API\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3068\u3057\u3066\u5916\u51fa\u3057\u3055\u308c\u305f\u306e\u3067\u3059\u3002\n\n\u3000\u305f\u3060\u6b8b\u5ff5\u306a\u304c\u3089\u3001```BillingService```\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001\u4f9d\u5b58\u6027\u3092\u81ea\u5206\u3067\u898b\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002```BillingService```\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067```BillingService```\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u518d\u5ea6DI\u30d1\u30bf\u30fc\u30f3\u3092\u9069\u7528\u3059\u308c\u3070\u3001\u5927\u65b9\u554f\u984c\u306f\u89e3\u6c7a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u6700\u4e0a\u4f4d\u306e\u30af\u30e9\u30b9\u306b\u3068\u3063\u3066\u306f\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u3063\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3057\u3087\u3046\u3002\u3055\u3082\u306a\u3044\u3068\u3001\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u7528\u3059\u308b\u306e\u306b\u518d\u5e30\u7684\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u69cb\u7bc9\u3059\u308b\u306f\u3081\u306b\u306a\u308a\u307e\u3059\u3002\n\n```Java:\n  public static void main(String[] args) {\n    CreditCardProcessor processor = new PaypalCreditCardProcessor();\n    TransactionLog transactionLog = new DatabaseTransactionLog();\n    BillingService billingService\n        = new RealBillingService(processor, transactionLog);\n    ...\n  }\n```\n\n###Guice\u306b\u3088\u308b\u4f9d\u5b58\u6027\u6ce8\u5165\n\n\u3000DI\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u3063\u3066\u30b3\u30fc\u30c9\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\u3068\u30c6\u30b9\u30c8\u6027\u3092\u4e0a\u3052\u3089\u308c\u307e\u3059\u304c\u3001Guice\u3092\u4f7f\u3048\u3070\u540c\u3058\u3053\u3068\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Guice\u3092\u30ab\u30fc\u30c9\u8acb\u6c42\u306e\u4f8b\u306b\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u5b9f\u88c5\u306e\u95a2\u4fc2\u3092Guice\u306b\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f\u3001```Module```\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u305fJava\u30af\u30e9\u30b9\uff08Guice Module\u30af\u30e9\u30b9\uff09\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n```Java:\npublic class BillingModule extends AbstractModule {\n  @Override \n  protected void configure() {\n    bind(TransactionLog.class).to(DatabaseTransactionLog.class);\n    bind(CreditCardProcessor.class).to(PaypalCreditCardProcessor.class);\n    bind(BillingService.class).to(RealBillingService.class);\n  }\n}\n```\n\n\u3000\u3053\u306e\u8a2d\u5b9a\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001```@Inject```\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092```RealBillingService```\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4ed8\u4e0e\u3057\u307e\u3059\u3002\u3059\u308b\u3068Guice\u306f\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u3064\u3044\u305f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8abf\u3079\u3001\u5f15\u6570\u306e\u5024\u3092\u898b\u3064\u3051\u3066\u304d\u3066\u304f\u308c\u307e\u3059\u3002\n\n```Java:\npublic class RealBillingService implements BillingService {\n  private final CreditCardProcessor processor;\n  private final TransactionLog transactionLog;\n\n  @Inject\n  public RealBillingService(CreditCardProcessor processor,\n      TransactionLog transactionLog) {\n    this.processor = processor;\n    this.transactionLog = transactionLog;\n  }\n\n  public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {\n    try {\n      ChargeResult result = processor.charge(creditCard, order.getAmount());\n      transactionLog.logChargeResult(result);\n\n      return result.wasSuccessful()\n          ? Receipt.forSuccessfulCharge(order.getAmount())\n          : Receipt.forDeclinedCharge(result.getDeclineMessage());\n     } catch (UnreachableException e) {\n      transactionLog.logConnectException(e);\n      return Receipt.forSystemFailure(e.getMessage());\n    }\n  }\n}\n```\n\n\u3000\u3053\u3046\u3057\u3066\u3001\u5168\u90e8\u306e\u30af\u30e9\u30b9\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002```Injector```\u306f\u7d50\u5408\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```Java:\n  public static void main(String[] args) {\n    Injector injector = Guice.createInjector(new BillingModule());\n    BillingService billingService = injector.getInstance(BillingService.class);\n    ...\n  }\n\n```\n\n[Getting Started](https://github.com/google/guice/wiki/GettingStarted)\u306b\u3001\u3069\u306e\u3088\u3046\u306b\u3053\u306e\u30b3\u30fc\u30c9\u304c\u52d5\u304f\u306e\u304b\u306e\u8aac\u660e\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["Java", "Scala", "DI", "DependencyInjection"]}