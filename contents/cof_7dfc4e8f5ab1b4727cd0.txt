{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\n197\u306f\u5de1\u56de\u7d20\u6570\u3068\u547c\u3070\u308c\u308b. \u6841\u3092\u56de\u8ee2\u3055\u305b\u305f\u3068\u304d\u306b\u5f97\u3089\u308c\u308b\u6570 197, 971, 719 \u304c\u5168\u3066\u7d20\u6570\u3060\u304b\u3089\u3067\u3042\u308b.\n100\u672a\u6e80\u306b\u306f\u5de1\u56de\u7d20\u6570\u304c13\u500b\u3042\u308b: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, \u304a\u3088\u307397\u3067\u3042\u308b.\n100\u4e07\u672a\u6e80\u306e\u5de1\u56de\u7d20\u6570\u306f\u3044\u304f\u3064\u3042\u308b\u304b?\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2035\n\n\u56de\u7b54\n0,2,4,5,6,8\u306f2\u6841\u4ee5\u4e0a\u306e\u5de1\u56de\u7d20\u6570\u306e\u6841\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\u3053\u308c\u3089\u306e\u6570\u5b57\u304c1\u6841\u76ee\u306b\u306a\u308b\u3068\u5fc5\u305a2\u304b5\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u3089\u3067\u3042\u308b\u3002\n\u3057\u305f\u304c\u3063\u3066\u30012,5\u4ee5\u5916\u306b\u8003\u5bdf\u3059\u3079\u304d\u306f1,3,7,9\u3060\u3051\u3092\u542b\u3080\u6570\u3067\u3042\u308b\u3002\n\u3053\u306e\u6570\u3060\u3051\u306e\u96c6\u5408\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001mapall\u306a\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\nmapall\u306f\u3001\u3042\u308b\u96c6\u5408iter1\u306e\u5404\u8981\u7d20e1,e2\u3092\u9069\u5f53\u306a\u7d50\u5408\u5247f\u3067\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570num\u3060\u3051\u7d50\u5408\u3055\u305b\u3001\u7d50\u679c\u3092set\u578b\u3067\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n\u307e\u305a['',1,3,7,9]\u3092iter1\u3068\u3057\u3066\u3001\u6700\u5927\u3068\u8003\u3048\u3089\u308c\u308b6\u6841\u306e\u6570\u5b57\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002''\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u7d50\u5408\u3057\u305f\u3068\u304d\u306b\u5143\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d50\u5408\u5f8c\u306e\u30ea\u30b9\u30c8\u306b\u3082\u6b8b\u308b\u3088\u3046\u306b\u3067\u3042\u308b\u3002\u305f\u3068\u3048\u3070''+'3'\u306f'3'\u3068\u306a\u308a\u3001\u5143\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d50\u5408\u5f8c\u306e\u30ea\u30b9\u30c8\u306b\u3082\u6b8b\u308b\u3053\u3068\u3068\u306a\u308b\u3002\nimport mymath\ndef circle(num):\n  s = str(num)\n  for c in range(len(s)):\n    s = s[1:]+s[0]\n    yield int(s)\n\ndef mapall(f, iter1, num=1):\n  ret = iter1\n  for i in range(num):\n    ret = set([f(e1,e2) for e1 in ret for e2 in iter1])\n  return ret\n\ndef connect_num(e1,e2):\n  return str(e1)+str(e2)\n\ndef main():\n  pri = mymath.get_primes(10**6)\n  n_list = ['',1,3,7,9]\n  pn5 = mapall(connect_num, n_list,5)\n  pn5.remove('')\n  ans = {}\n  for pn in pn5:\n    if pn in ans:\n      continue\n    flag = True\n    for n in circle(pn):\n      if not pri['bool'][n]:\n        flag = False\n        break\n    if flag:\n      for n in circle(pn):\n        ans[n] = True\n  print len(ans)+2\nmain()\n\n\u554f\u984c\n---\n197\u306f\u5de1\u56de\u7d20\u6570\u3068\u547c\u3070\u308c\u308b. \u6841\u3092\u56de\u8ee2\u3055\u305b\u305f\u3068\u304d\u306b\u5f97\u3089\u308c\u308b\u6570 197, 971, 719 \u304c\u5168\u3066\u7d20\u6570\u3060\u304b\u3089\u3067\u3042\u308b.\n\n100\u672a\u6e80\u306b\u306f\u5de1\u56de\u7d20\u6570\u304c13\u500b\u3042\u308b: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, \u304a\u3088\u307397\u3067\u3042\u308b.\n\n100\u4e07\u672a\u6e80\u306e\u5de1\u56de\u7d20\u6570\u306f\u3044\u304f\u3064\u3042\u308b\u304b?\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2035\n\n\u56de\u7b54\n---\n0,2,4,5,6,8\u306f2\u6841\u4ee5\u4e0a\u306e\u5de1\u56de\u7d20\u6570\u306e\u6841\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\u3053\u308c\u3089\u306e\u6570\u5b57\u304c1\u6841\u76ee\u306b\u306a\u308b\u3068\u5fc5\u305a2\u304b5\u3067\u5272\u308a\u5207\u308c\u308b\u304b\u3089\u3067\u3042\u308b\u3002\n\u3057\u305f\u304c\u3063\u3066\u30012,5\u4ee5\u5916\u306b\u8003\u5bdf\u3059\u3079\u304d\u306f1,3,7,9\u3060\u3051\u3092\u542b\u3080\u6570\u3067\u3042\u308b\u3002\n\u3053\u306e\u6570\u3060\u3051\u306e\u96c6\u5408\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001mapall\u306a\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\nmapall\u306f\u3001\u3042\u308b\u96c6\u5408iter1\u306e\u5404\u8981\u7d20e1,e2\u3092\u9069\u5f53\u306a\u7d50\u5408\u5247f\u3067\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570num\u3060\u3051\u7d50\u5408\u3055\u305b\u3001\u7d50\u679c\u3092set\u578b\u3067\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n\u307e\u305a['',1,3,7,9]\u3092iter1\u3068\u3057\u3066\u3001\u6700\u5927\u3068\u8003\u3048\u3089\u308c\u308b6\u6841\u306e\u6570\u5b57\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002''\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u7d50\u5408\u3057\u305f\u3068\u304d\u306b\u5143\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d50\u5408\u5f8c\u306e\u30ea\u30b9\u30c8\u306b\u3082\u6b8b\u308b\u3088\u3046\u306b\u3067\u3042\u308b\u3002\u305f\u3068\u3048\u3070''+'3'\u306f'3'\u3068\u306a\u308a\u3001\u5143\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u7d50\u5408\u5f8c\u306e\u30ea\u30b9\u30c8\u306b\u3082\u6b8b\u308b\u3053\u3068\u3068\u306a\u308b\u3002\n\n\n```py\nimport mymath\ndef circle(num):\n  s = str(num)\n  for c in range(len(s)):\n    s = s[1:]+s[0]\n    yield int(s)\n\ndef mapall(f, iter1, num=1):\n  ret = iter1\n  for i in range(num):\n    ret = set([f(e1,e2) for e1 in ret for e2 in iter1])\n  return ret\n  \ndef connect_num(e1,e2):\n  return str(e1)+str(e2)\n\ndef main():\n  pri = mymath.get_primes(10**6)\n  n_list = ['',1,3,7,9]\n  pn5 = mapall(connect_num, n_list,5)\n  pn5.remove('')\n  ans = {}\n  for pn in pn5:\n    if pn in ans:\n      continue\n    flag = True\n    for n in circle(pn):\n      if not pri['bool'][n]:\n        flag = False\n        break\n    if flag:\n      for n in circle(pn):\n        ans[n] = True\n  print len(ans)+2\nmain()\n```\n", "tags": ["Python", "ProjectEuler"]}