{"context": " More than 1 year has passed since last update.\ninit.el\n\n(setq skk-cursor-hiragana-color \"yellow\")\n(blink-cursor-mode -1)\n(global-hl-line-mode 1)\n\n\n(savehist-mode 1)\n(show-paren-mode 1)\n(display-time)\n(line-number-mode 1)\n(column-number-mode 1)\n(transient-mark-mode 1)\n(setq message-log-max 10000)\n(setq enable-recursive-minibuffers t)\n(setq use-dialog-box nil)\n(defalias 'message-box 'message)\n(setq history-length 1000)\n(setq echo-keystrokes 0.1)\n(defalias 'yes-or-no-p 'y-or-n-p)\n\n(add-hook 'twittering-mode-hook\n      '(lambda ()\n         (define-key twittering-mode-map (kbd \"f\") 'twittering-favorite)))\n\n(add-hook 'dired-mode-hook\n      '(lambda ()\n         (define-key dired-mode-map (kbd \"C-t\") 'dired-previous-line)))\n\n(add-hook 'ibuffer-mode-hook\n      '(lambda ()\n         (define-key ibuffer-mode-map (kbd \"C-t\") 'previous-line)\n         (define-key ibuffer-mode-map (kbd \"<f2>\") 'my-buffer-menu2)\n         (define-key ibuffer-mode-map (kbd \"M-o\") 'find-file)))\n;;;      (define-key ibuffer-mode-map (kbd \"\") 'previous-line)\n;;;      (global-set-key [f2] 'my-buffer-menu2)\n;;;      (global-unset-key (kbd \"o\"))))\n\n\n\n(setq skk-large-jisyo \"~/ldic_kyuji.dic\")\n(setq skk-jisyo \"~/udic_kyuji.dic\")\n(setq skk-backup-jisyo \"~/udic_kyuji.dic.BAK\")\n(setq skk-auto-start-henkan-keyword-list nil)\n\n\n(defun kyu-shin (x) (replace-regexp-in-string \"kyu\" \"shin\" x))\n(defun shin-kyu (x) (replace-regexp-in-string \"shin\" \"kyu\" x))\n\n(defun shinji-to-kyuji nil\n  (interactive)\n  (progn \n    (skk-mode -1)\n    (skk-save-jisyo)\n    (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n    (setq newlub (mapcar (function shin-kyu) lub))\n    (setq skk-large-jisyo (nth 0 newlub))\n    (setq skk-jisyo (nth 1 newlub))\n    (setq skk-backup-jisyo (nth 2 newlub))\n\n;;;    (setq skk-large-jisyo \"~/ldic_kyuji.dic\")\n;;;    (setq skk-jisyo \"~/udic_kyuji.dic\")\n;;;    (setq skk-backup-jisyo \"~/udic_kyuji.dic.BAK\")\n    (skk-mode 1)))\n\n\n(defun kyuji-to-shinji nil\n  (interactive)\n  (progn \n    (skk-mode -1)\n    (skk-save-jisyo)\n    (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n    (setq newlub (mapcar (function kyu-shin) lub))\n    (setq skk-large-jisyo (nth 0 newlub))\n    (setq skk-jisyo (nth 1 newlub))\n    (setq skk-backup-jisyo (nth 2 newlub))\n\n;;;    (setq skk-large-jisyo \"~/ldic_shinji.dic\")\n;;;    (setq skk-jisyo \"~/udic_shinji.dic\")\n;;;    (setq skk-backup-jisyo \"~/udic_shinji.dic.BAK\")\n    (skk-mode 1)))\n\n(defun toggle-jitai nil\n  (interactive)\n  (cond \n   ((and \n    (equal skk-large-jisyo \"~/ldic_shinji.dic\")\n    (equal skk-jisyo \"~/udic_shinji.dic\")\n    (equal skk-backup-jisyo \"~/udic_shinji.dic.BAK\"))\n   (shinji-to-kyuji))\n\n   ((and \n    (equal skk-large-jisyo \"~/ldic_kyuji.dic\")\n    (equal skk-jisyo \"~/udic_kyuji.dic\")\n    (equal skk-backup-jisyo \"~/udic_kyuji.dic.BAK\"))\n   (kyuji-to-shinji))\n   ((t nil))))\n\n(defun show-lub nil\n  (interactive)\n  (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n  (princ lub))\n\n\n(defun open-init-el nil\n  (interactive)\n  (find-file \"~/.emacs.d/init.el\"))\n\n(defun skk-hiragana-set nil\n  (interactive)\n  (cond (skk-katakana\n     (skk-toggle-kana nil))\n    (t\n     (skk-kakutei))))\n\n(defun skk-katakana-set nil\n  (interactive)\n  (cond (skk-katakana\n     (lambda))\n    (skk-j-mode\n     (skk-toggle-kana nil))\n    (skk-latin-mode\n     (dolist (skk-kakutei (skk-toggle-kana nil))))))\n\n\n(global-unset-key (kbd \"C-o\"))\n\n(global-set-key (kbd \"C-o o\") 'skk-hiragana-set)\n(global-set-key (kbd \"C-o e\") 'skk-katakana-set)\n(global-set-key (kbd \"C-o u\") 'skk-latin-mode)\n\n(global-set-key [backtab] 'execute-extended-command)\n(global-set-key (kbd \"C-a\") 'beginning-of-line)\n(global-set-key (kbd \"C-<\") 'beginning-of-buffer)\n(global-set-key (kbd \"C->\") 'end-of-buffer)\n(global-set-key \"\\C-x\\C-h\" 'skk-mode)\n(global-set-key (kbd \"C-S-u\") 'skk-mode)\n(global-set-key (kbd \"C-x j\") 'open-junk-file)\n(global-unset-key [tab])\n(global-unset-key (kbd \"M-c\"))\n(global-unset-key (kbd \"C-x C-f\"))\n(global-unset-key [f10])\n(global-set-key (kbd \"C-b\") 'delete-backward-char)\n(global-set-key \"\\C-z\" nil)\n\n(global-set-key [f1] 'delete-other-windows)\n;;;(global-set-key [f2] 'my-buffer-menu)\n(global-set-key [f2] 'my-buffer-menu2)\n(global-set-key [f3] 'other-window)\n(global-set-key [f4] 'open-init-el)\n(global-set-key [f5] 'lispxmp)\n(global-set-key [f6] 'shell)\n(global-set-key [f7] 'eshell)\n(global-set-key [f8] 'toggle-jitai)\n(global-set-key (kbd \"C-<f8>\") 'show-lub)\n\n(global-set-key [f9] 'save-buffer)\n;;;(global-set-key [f10] 'delete-window)\n(global-set-key (kbd \"S-<muhenkan>\") 'delete-window)\n(global-set-key [tab] 'execute-extended-command)\n(global-set-key [left] 'backward-char)\n(global-set-key [right] 'forward-char)\n(global-set-key (kbd \"S-<left>\") 'backward-kill-word)\n(global-set-key [up] 'previous-line)\n(global-set-key [down] 'next-line)\n\n\n(global-set-key (kbd \"C-r\") 'delete-char)\n(global-set-key (kbd \"C-S-r\") 'kill-word)\n(global-set-key (kbd \"C-S-k\")  'kill-sentence)\n(global-set-key (kbd \"C-d\") 'backward-char)\n(global-set-key (kbd \"C-S-d\") 'backward-word)\n(global-set-key (kbd \"C-h\") 'next-line)\n(global-set-key (kbd \"C-t\") 'previous-line)\n(global-set-key (kbd \"C-n\") 'forward-char)\n(global-set-key (kbd \"M-o\") 'find-file)\n(global-set-key (kbd \"C-S-d\") 'backward-word)\n(global-set-key (kbd \"C-S-n\") 'forward-word)\n(global-unset-key (kbd \"C-S-h\"))\n(global-unset-key (kbd \"C-S-t\"))\n(global-set-key (kbd \"M-o\") 'find-file)\n;;(global-set-key (kbd \"C-N\") 'forward-word)\n(global-set-key (kbd \"C-S-w\") 'save-buffers-kill-terminal)\n(global-unset-key (kbd \"C-x C-c\"))\n(global-unset-key (kbd \"C-_\"))\n(global-unset-key (kbd \"C-p\"))\n(global-unset-key (kbd \"C-f\"))\n\n\n;;;(add-to-list 'load-path (expand-file-name \"~/.emacs.d/auto-install/\"))\n(add-to-list 'load-path \"~/.emacs.d/\")\n(add-to-list 'load-path \"~/.emacs.d/auto-install\")\n(require 'auto-install)\n(auto-install-update-emacswiki-package-name t)\n(auto-install-compatibility-setup)\n\n(setq-default skk-kutouten-type 'en)\n(setq skk-egg-like-newline t)\n(setq skk-henkan-show-candidates-keys '(?a ?o ?e ?u ?h ?t ?n))\n(setq skk-rom-kana-rule-list '(\n    (\"ca\" nil (\"\u30ab\" . \"\u304b\"))\n    (\"ci\" nil (\"\u30ad\" . \"\u304d\"))\n    (\"cu\" nil (\"\u30af\" . \"\u304f\"))\n    (\"ce\" nil (\"\u30b1\" . \"\u3051\"))\n    (\"co\" nil (\"\u30b3\" . \"\u3053\"))\n    (\"cya\" nil (\"\u30ad\u30e3\" . \"\u304d\u3083\"))\n    (\"cyu\" nil (\"\u30ad\u30e5\" . \"\u304d\u3085\"))\n    (\"cye\" nil (\"\u30ad\u30a7\" . \"\u304d\u3047\"))\n    (\"cyo\" nil (\"\u30ad\u30e7\" . \"\u304d\u3087\"))\n    (\"wi\" nil (\"\u30f0\" . \"\u3090\"))\n    (\"we\" nil (\"\u30f1\" . \"\u3091\"))\n))\n\n\n\n(require 'cl)\n\n;;;(powerline-default-theme)\n\n\n;(add-to-list 'load-path \"~/.emacs.d/site-lisp/\")\n(add-to-list 'load-path \"~/.emacs.d/twittering-mode-3.0.0\")\n(setq twittering-status-format \"%p %S (%s), %C (%@):\\n%t\\nvia %f\\t %L %f \\n%d\\n---%'\")\n;; %s - screen_name\n;; %S - name\n;; %i - profile_image\n;; %d - description\n;; %l - location\n;; %L - \" [location]\"\n;; %u - url\n;; %j - user.id\n;; %p - protected?\n;; %c - created_at (raw UTC string)\n;; %C{time-format-str} - created_at (formatted with time-format-str)\n;; %@ - X seconds ago\n;; %t - text\n;; %' - truncated\n;; %f - source\n;; %# - id\n\n;(require 'lispxmp)\n\n\n;(setq org-export-latex-coding-system 'shift_jis)\n(setq org-export-latex-date-format \"%Y-%m-%d\")\n(setq org-export-latex-classes nil)\n(add-to-list 'org-export-latex-classes\n  '(\"jsarticle\"\n    \"\\\\documentclass[a4j]{jsarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(add-to-list 'org-export-latex-classes\n  '(\"jarticle\"\n    \"\\\\documentclass[a4j]{jarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(add-to-list 'org-export-latex-classes\n  '(\"mine\"\n    \"\\\\documentclass[a4j]{jarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(setq org-export-latex-packages-alist\n  '((\"AUTO\" \"inputenc\"  t)\n    (\"T1\"   \"fontenc\"   t)\n    ))\n\n(setq org-latex-to-pdf-process\n      '(\"/usr/texbin/platex %f\" \"/usr/texbin/dvipdfmx %b\"))\n\n;;; Mew \u3092\u4f7f\u3046\u70ba\u306e\u8a2d\u5b9a\n;(autoload 'mew \"mew\" nil t)\n;(autoload 'mew-send \"mew\" nil t)\n\n;;; Mew \u306e\u8d77\u52d5\u6642\u306b\u306f\u30e1\u30fc\u30eb\u3092\u53d6\u5f97\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\n(setq mew-auto-get nil)\n\n;;; \u30e1\u30fc\u30eb\u306e\u53d6\u5f97\u5f8c\u3001POP\u30b5\u30fc\u30d0\u306b\u3042\u308b\u30e1\u30fc\u30eb\u3092\u6b8b\u3059\u8a2d\u5b9a\n(setq mew-pop-delete nil)\n\n(setq mew-prog-ssl \"/usr/local/bin/stunnel3\")\n;;; \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8868\u793a\u3055\u305b\u306a\u3044\u305f\u3081\u306e\u8a2d\u5b9a\n(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)\n\n\n\n;(require 'package)\n;(setq package-user-dir \"~/.emacs.d/elisp/elpa/\")\n;(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)\n;(package-initialize)\n\n;(require 'init-loader)\n;(init-loader-load \"~/.emacs.d/mine\")\n\n;(require 'open-junk-file)\n(require 'twittering-mode)\n(require 'alpaca)\n(setq twittering-use-master-password t)\n(setq twittering-timer-interval 300)\n\n(setq twittering-use-ssl t)\n\n\n(setq eshell-cmpl-ignore-case t)\n\n(tool-bar-mode -1)\n(menu-bar-mode -1)\n(scroll-bar-mode -1)\n\n(when (eq window-system 'x)\n;;;  (load-theme 'deeper-blue t)\n;;; (load-theme 'tango t)\n;;;(load-theme 'misterioso t)\n;;;(load-theme 'wheatgrass t)\n(load-theme 'manoj-dark t)\n\n;;;  (load-theme 'light-blue t)\n(set-face-attribute 'default nil\n;;;         :family \"Liberation Mono\"\n;;;         :family \"Courier 10 Pitch\"\n            :family \"inconsolata\"\n;;;         :family \"Dejavu Sans Mono\"\n;;;         :family \"Nimbus Mono L\"\n            :height 150))\n;; \u65e5\u672c\u8a9e\u3092\n;;;  (set-fontset-font \"fontset-default\"\n;;;         'japanese-jisx0208\n;;;         '(\"IPAMincho\"))\n\n  (set-fontset-font \"fontset-default\"\n            'japanese-jisx0208\n'(\"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\"))\n\n(when (eq window-system 'ns)\n\n;;;(load-theme 'wombat t)\n  (load-theme 'molokai t)\n;;;  (enable-theme 'molokai)\n\n;;  Monaco 12pt \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u3059\u308b\n  (set-face-attribute 'default nil\n              :family \"Andale mono\"\n              :height 150)\n;;\u65e5\u672c\u8a9e\u3092\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4ProN\u306b\u3059\u308b\n  (set-fontset-font \"fontset-default\"           'japanese-jisx0208\n            '(\"Hiragino Mincho ProN\"))\n;;\u534a\u89d2\u30ab\u30ca\u3092\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4ProN\u306b\u3059\u308b\n  (set-fontset-font \"fontset-default\"\n            'katakana-jisx0201\n            '(\"Hiragino Maru Gothic ProN\"))\n  ;;for Japanese\n  (set-language-environment 'Japanese)\n  (set-default-coding-systems 'utf-8-unix)\n  (set-terminal-coding-system 'utf-8-unix)\n  (set-keyboard-coding-system 'sjis-mac)\n  (set-clipboard-coding-system 'sjis-mac)\n  (setq-default buffer-file-coding-system 'utf-8)\n  (prefer-coding-system 'utf-8)\n  (add-to-list 'default-frame-alist '(font . \"fontset-default\"))\n\n)\n\n\n\n\n;;;(require 'anything-startup)\n;;;(require 'auto-install)\n;;;(require 'twit)\n;;(setq auto-install-directory \"~/.emacs.d/auto-install/\")\n;;(auto-install-update-emacswiki-package-name t)\n;;(auto-install-compatibility-setup)             ; \u4e92\u63db\u6027\u78ba\u4fdd\n\n(setq open-junk-file-format \"~/program/junk/%Y/%m/%Y-%m-%d-%H%M%S.\")\n\n\n\n\n\n\n(define-key minibuffer-local-map (kbd \"C-t\") 'previous-history-element)\n(define-key minibuffer-local-map (kbd \"C-h\") 'next-history-element)\n\n\n(add-hook 'shell-mode-hook\n      '(lambda ()\n         (define-key shell-mode-map (kbd \"C-S-t\") 'comint-previous-input)\n         (define-key shell-mode-map (kbd \"C-S-h\") 'comint-next-input)\n         (define-key shell-mode-map (kbd \"C-d\") 'backward-char)))\n\n;;;(add-hook 'eshell-mode-hook\n;;;   '(lambda ()\n;;;      (define-key eshell-mode-map (kbd \"C-t\") 'eshell-previous-matching-input-from-input)\n;;;      (define-key shell-mode-map (kbd \"C-S-h\") 'comint-next-input)\n;;;      (define-key shell-mode-map (kbd \"C-d\") 'backward-char))\n;;;)\n\n\n\n(defalias 'dk 'describe-key)\n(defalias 'dkb 'describe-key-briefly)\n(defalias 'db 'describe-bindings)\n(defalias 'df 'describe-function)\n(defalias 'dv 'describe-variable)\n(defalias 'dm 'describe-mode)\n(defalias 'ir 'indent-region)\n(defalias 'ap 'apropos)\n(defalias 'ff 'find-function)\n\n\n\n;;;(aset keyboard-translate-table ?\\<tab> ?\\M-x)\n;;;(if window-system\n;;;  )\n\n(setq scroll-step 1)\n(setq inhibit-startup-message t)\n\n;;\n;; YaTeX\n;;\n\n(add-to-list 'load-path \"~/.emacs.d/site-lisp/yatex\")\n(autoload 'yatex-mode \"yatex\" \"Yet Another LaTeX mode\" t)\n(setq auto-mode-alist\n      (append '((\"\\\\.tex$\" . yatex-mode)\n        (\"\\\\.ltx$\" . yatex-mode)\n        (\"\\\\.cls$\" . yatex-mode)\n        (\"\\\\.sty$\" . yatex-mode)\n        (\"\\\\.clo$\" . yatex-mode)\n        (\"\\\\.bbl$\" . yatex-mode)) auto-mode-alist))\n(setq YaTeX-inhibit-prefix-letter t)\n(setq YaTeX-kanji-code nil)\n(setq YaTeX-use-LaTeX2e t)\n(setq YaTeX-use-AMS-LaTeX t)\n                    ;(setq YaTeX-dvi2-command-ext-alist nil)\n;;(setq YaTeX-dvi2-command-ext-alist\n;;      '((\"Preview\\\\|TeXShop\\\\|TeXworks\\\\|Skim\\\\|mupdf\\\\|xpdf\\\\|Firefox\\\\|Adobe\" . \".pdf\")))\n;;(setq YaTeX-dvi2-command-ext-alist nil)\n(setq tex-command \"/usr/texbin/platex -synctex=1\")\n(setq dviprint-command-format \"dvpd.sh %s\")\n;;(setq dviprint-command-format \"dvipdfmx -p b4 -l %s\")\n(setq dvi2-command \"open -a Preview\")\n                    ;(setq tex-command \"/usr/texbin/ptex2pdf -l -ot '-synctex=1'\")\n                    ;(setq tex-command \"/usr/texbin/ptex2pdf -l -u -ot '-synctex=1'\")\n                    ;(setq tex-command \"/usr/texbin/pdflatex -synctex=1\")\n                    ;(setq tex-command \"/usr/texbin/lualatex -synctex=1\")\n                    ;(setq tex-command \"/usr/texbin/luajitlatex -synctex=1\")\n                    ;(setq tex-command \"/usr/texbin/xelatex -synctex=1\")\n                    ;(setq tex-command \"/usr/texbin/latexmk\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -g > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/pdflatex %O -synctex=1 %S/' -e '$bibtex=q/bibtex %O %B/' -e '$makeindex=q/makeindex %O -o %D %S/' -norc -gg -pdf\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/lualatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/luajitlatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex\")\n                    ;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/xelatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -xelatex\")\n(setq bibtex-command (cond ((string-match \"uplatex\\\\|-u\" tex-command) \"/usr/texbin/upbibtex\")\n               ((string-match \"platex\" tex-command) \"/usr/texbin/pbibtex\")\n               ((string-match \"lualatex\\\\|luajitlatex\\\\|xelatex\" tex-command) \"/usr/texbin/bibtexu\")\n               ((string-match \"pdflatex\\\\|latex\" tex-command) \"/usr/texbin/bibtex\")\n               (t \"/usr/texbin/pbibtex\")))\n(setq makeindex-command (cond ((string-match \"uplatex\\\\|-u\" tex-command) \"/usr/texbin/mendex\")\n                  ((string-match \"platex\" tex-command) \"/usr/texbin/mendex\")\n                  ((string-match \"lualatex\\\\|luajitlatex\\\\|xelatex\" tex-command) \"/usr/texbin/texindy\")\n                  ((string-match \"pdflatex\\\\|latex\" tex-command) \"/usr/texbin/makeindex\")\n                  (t \"/usr/texbin/mendex\")))\n(setq dvi2-command \"/usr/bin/open -a Preview\")\n                    ;(setq dvi2-command \"/usr/bin/open -a Skim\")\n                    ;(setq dvi2-command \"/usr/bin/open -a TeXShop\")\n                    ;(setq dvi2-command \"/usr/bin/open -a TeXworks\")\n                    ;(setq dvi2-command \"/usr/bin/open -a Firefox\")\n                    ;(setq dviprint-command-format \"/usr/bin/open -a \\\"Adobe Reader\\\" `echo %s | sed -e \\\"s/\\\\.[^.]*$/\\\\.pdf/\\\"`\")\n\n(defun skim-forward-search ()\n  (interactive)\n  (progn\n    (process-kill-without-query\n     (start-process  \n      \"displayline\"\n      nil\n      \"/Applications/Skim.app/Contents/SharedSupport/displayline\"\n      (number-to-string (save-restriction\n              (widen)\n              (count-lines (point-min) (point))))\n      (expand-file-name\n       (concat (file-name-sans-extension (or YaTeX-parent-file\n                         (save-excursion\n                           (YaTeX-visit-main t)\n                           buffer-file-name)))\n           \".pdf\"))\n      buffer-file-name))))\n\n(add-hook 'yatex-mode-hook\n      '(lambda ()\n         (define-key YaTeX-mode-map (kbd \"C-c s\") 'skim-forward-search)))\n\n(add-hook 'yatex-mode-hook\n      '(lambda ()\n         (auto-fill-mode -1)))\n\n;;\n;; RefTeX with YaTeX\n;;\n                    ;(add-hook 'yatex-mode-hook 'turn-on-reftex)\n(add-hook 'yatex-mode-hook\n      '(lambda ()\n         (reftex-mode 1)\n         (define-key reftex-mode-map (concat YaTeX-prefix \">\") 'YaTeX-comment-region)\n         (define-key reftex-mode-map (concat YaTeX-prefix \"<\") 'YaTeX-uncomment-region)))\n\n\n\n(defun my-buffer-menu nil\n  (interactive)\n  (buffer-menu-other-window)\n  (other-window 0))\n\n(defun my-buffer-menu2 nil\n  (interactive)\n  (ibuffer-other-window)\n  (other-window 0))\n\n\n(add-to-list 'load-path \"~/.emacs.d/elisp/\")\n\n(autoload 'ruby-mode \"ruby-mode\" \"Mode for editing ruby source files\" t)\n(setq auto-mode-alist (append '((\"\\\\.rb$\" . ruby-mode)) auto-mode-alist))\n(setq interpreter-mode-alist (append '((\"ruby\" . ruby-mode)) interpreter-mode-alist))\n(autoload 'run-ruby \"inf-ruby\" \"Run an inferior Ruby process\")\n(autoload 'inf-ruby-keys \"inf-ruby\" \"Set local key defs for inf-ruby in ruby-mode\")\n(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys)))\n(global-font-lock-mode 1)\n(setq default-frame-alist (append '(\n                    ;  (foreground-color . \"gray\")  ;\n                    ;  (background-color . \"black\") ;\n                    ;  (cursor-color     . \"blue\")  ;\n                    )\n                  default-frame-alist))\n\n;; ruby-electric\n;;;(require 'ruby-electric)\n(add-hook 'ruby-mode-hook '(lambda ()\n;;;              (ruby-electric-mode t)\n                 (define-key ruby-mode-map (kbd \"C-c c\") 'smart-compile)\n                 (define-key ruby-mode-map (kbd \"C-c C-c\") (kbd \"C-c c C-m\"))\n))\n\n;; rubydb\n(autoload 'rubydb \"rubydb3x\"\n  \"run rubydb on program file in buffer *gud-file*.\nthe directory containing file becomes the initial working directory\nand source-file directory for your debugger.\" t)\n\n\n;; ruby-block\n;(require 'ruby-block)\n;(ruby-block-mode t)\n\n;; \u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u8868\u793a\u3057, \u304b\u3064, \u30aa\u30fc\u30d0\u30ec\u30a4\u3059\u308b.\n(setq ruby-block-highlight-toggle t)\n\n(setq ruby-indent-level 2)\n(setq ruby-indent-tabs-mode nil)\n\n(require 'smart-compile)\n\n(require 'linum)\n(global-linum-mode)\n\n;(exec-path-from-shell-initialize)\n\n\n;;; This was installed by package-install.el.\n;;; This provides support for the package system and\n;;; interfacing with ELPA, the package archive.\n;;; Move this code earlier if you want to reference\n;;; packages in your .emacs.\n(when\n    (load\n     (expand-file-name \"~/.emacs.d/elpa/package.el\"))\n  (package-initialize))\n\n\n(require 'powerline-init)\n(set-face-background 'hl-line \"cyan4\")\n\n\n```el:init.el\n\n(setq skk-cursor-hiragana-color \"yellow\")\n(blink-cursor-mode -1)\n(global-hl-line-mode 1)\n\n\n(savehist-mode 1)\n(show-paren-mode 1)\n(display-time)\n(line-number-mode 1)\n(column-number-mode 1)\n(transient-mark-mode 1)\n(setq message-log-max 10000)\n(setq enable-recursive-minibuffers t)\n(setq use-dialog-box nil)\n(defalias 'message-box 'message)\n(setq history-length 1000)\n(setq echo-keystrokes 0.1)\n(defalias 'yes-or-no-p 'y-or-n-p)\n\n(add-hook 'twittering-mode-hook\n\t  '(lambda ()\n\t     (define-key twittering-mode-map (kbd \"f\") 'twittering-favorite)))\n\n(add-hook 'dired-mode-hook\n\t  '(lambda ()\n\t     (define-key dired-mode-map (kbd \"C-t\") 'dired-previous-line)))\n\n(add-hook 'ibuffer-mode-hook\n\t  '(lambda ()\n\t     (define-key ibuffer-mode-map (kbd \"C-t\") 'previous-line)\n\t     (define-key ibuffer-mode-map (kbd \"<f2>\") 'my-buffer-menu2)\n\t     (define-key ibuffer-mode-map (kbd \"M-o\") 'find-file)))\n;;;\t     (define-key ibuffer-mode-map (kbd \"\") 'previous-line)\n;;;\t     (global-set-key [f2] 'my-buffer-menu2)\n;;;\t     (global-unset-key (kbd \"o\"))))\n\n\n\n(setq skk-large-jisyo \"~/ldic_kyuji.dic\")\n(setq skk-jisyo \"~/udic_kyuji.dic\")\n(setq skk-backup-jisyo \"~/udic_kyuji.dic.BAK\")\n(setq skk-auto-start-henkan-keyword-list nil)\n\n\n(defun kyu-shin (x) (replace-regexp-in-string \"kyu\" \"shin\" x))\n(defun shin-kyu (x) (replace-regexp-in-string \"shin\" \"kyu\" x))\n\n(defun shinji-to-kyuji nil\n  (interactive)\n  (progn \n    (skk-mode -1)\n    (skk-save-jisyo)\n    (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n    (setq newlub (mapcar (function shin-kyu) lub))\n    (setq skk-large-jisyo (nth 0 newlub))\n    (setq skk-jisyo (nth 1 newlub))\n    (setq skk-backup-jisyo (nth 2 newlub))\n\n;;;    (setq skk-large-jisyo \"~/ldic_kyuji.dic\")\n;;;    (setq skk-jisyo \"~/udic_kyuji.dic\")\n;;;    (setq skk-backup-jisyo \"~/udic_kyuji.dic.BAK\")\n    (skk-mode 1)))\n\n\n(defun kyuji-to-shinji nil\n  (interactive)\n  (progn \n    (skk-mode -1)\n    (skk-save-jisyo)\n    (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n    (setq newlub (mapcar (function kyu-shin) lub))\n    (setq skk-large-jisyo (nth 0 newlub))\n    (setq skk-jisyo (nth 1 newlub))\n    (setq skk-backup-jisyo (nth 2 newlub))\n\n;;;    (setq skk-large-jisyo \"~/ldic_shinji.dic\")\n;;;    (setq skk-jisyo \"~/udic_shinji.dic\")\n;;;    (setq skk-backup-jisyo \"~/udic_shinji.dic.BAK\")\n    (skk-mode 1)))\n\n(defun toggle-jitai nil\n  (interactive)\n  (cond \n   ((and \n    (equal skk-large-jisyo \"~/ldic_shinji.dic\")\n    (equal skk-jisyo \"~/udic_shinji.dic\")\n    (equal skk-backup-jisyo \"~/udic_shinji.dic.BAK\"))\n   (shinji-to-kyuji))\n\n   ((and \n    (equal skk-large-jisyo \"~/ldic_kyuji.dic\")\n    (equal skk-jisyo \"~/udic_kyuji.dic\")\n    (equal skk-backup-jisyo \"~/udic_kyuji.dic.BAK\"))\n   (kyuji-to-shinji))\n   ((t nil))))\n\n(defun show-lub nil\n  (interactive)\n  (setq lub (list skk-large-jisyo skk-jisyo skk-backup-jisyo))\n  (princ lub))\n\n\n(defun open-init-el nil\n  (interactive)\n  (find-file \"~/.emacs.d/init.el\"))\n\n(defun skk-hiragana-set nil\n  (interactive)\n  (cond (skk-katakana\n\t (skk-toggle-kana nil))\n\t(t\n\t (skk-kakutei))))\n\n(defun skk-katakana-set nil\n  (interactive)\n  (cond (skk-katakana\n\t (lambda))\n\t(skk-j-mode\n\t (skk-toggle-kana nil))\n\t(skk-latin-mode\n\t (dolist (skk-kakutei (skk-toggle-kana nil))))))\n\n\n(global-unset-key (kbd \"C-o\"))\n\n(global-set-key (kbd \"C-o o\") 'skk-hiragana-set)\n(global-set-key (kbd \"C-o e\") 'skk-katakana-set)\n(global-set-key (kbd \"C-o u\") 'skk-latin-mode)\n\n(global-set-key [backtab] 'execute-extended-command)\n(global-set-key (kbd \"C-a\") 'beginning-of-line)\n(global-set-key (kbd \"C-<\") 'beginning-of-buffer)\n(global-set-key (kbd \"C->\") 'end-of-buffer)\n(global-set-key \"\\C-x\\C-h\" 'skk-mode)\n(global-set-key (kbd \"C-S-u\") 'skk-mode)\n(global-set-key (kbd \"C-x j\") 'open-junk-file)\n(global-unset-key [tab])\n(global-unset-key (kbd \"M-c\"))\n(global-unset-key (kbd \"C-x C-f\"))\n(global-unset-key [f10])\n(global-set-key (kbd \"C-b\") 'delete-backward-char)\n(global-set-key \"\\C-z\" nil)\n\n(global-set-key [f1] 'delete-other-windows)\n;;;(global-set-key [f2] 'my-buffer-menu)\n(global-set-key [f2] 'my-buffer-menu2)\n(global-set-key [f3] 'other-window)\n(global-set-key [f4] 'open-init-el)\n(global-set-key [f5] 'lispxmp)\n(global-set-key [f6] 'shell)\n(global-set-key [f7] 'eshell)\n(global-set-key [f8] 'toggle-jitai)\n(global-set-key (kbd \"C-<f8>\") 'show-lub)\n\n(global-set-key [f9] 'save-buffer)\n;;;(global-set-key [f10] 'delete-window)\n(global-set-key (kbd \"S-<muhenkan>\") 'delete-window)\n(global-set-key [tab] 'execute-extended-command)\n(global-set-key [left] 'backward-char)\n(global-set-key [right] 'forward-char)\n(global-set-key (kbd \"S-<left>\") 'backward-kill-word)\n(global-set-key [up] 'previous-line)\n(global-set-key [down] 'next-line)\n\n\n(global-set-key (kbd \"C-r\") 'delete-char)\n(global-set-key (kbd \"C-S-r\") 'kill-word)\n(global-set-key (kbd \"C-S-k\")  'kill-sentence)\n(global-set-key (kbd \"C-d\") 'backward-char)\n(global-set-key (kbd \"C-S-d\") 'backward-word)\n(global-set-key (kbd \"C-h\") 'next-line)\n(global-set-key (kbd \"C-t\") 'previous-line)\n(global-set-key (kbd \"C-n\") 'forward-char)\n(global-set-key (kbd \"M-o\") 'find-file)\n(global-set-key (kbd \"C-S-d\") 'backward-word)\n(global-set-key (kbd \"C-S-n\") 'forward-word)\n(global-unset-key (kbd \"C-S-h\"))\n(global-unset-key (kbd \"C-S-t\"))\n(global-set-key (kbd \"M-o\") 'find-file)\n;;(global-set-key (kbd \"C-N\") 'forward-word)\n(global-set-key (kbd \"C-S-w\") 'save-buffers-kill-terminal)\n(global-unset-key (kbd \"C-x C-c\"))\n(global-unset-key (kbd \"C-_\"))\n(global-unset-key (kbd \"C-p\"))\n(global-unset-key (kbd \"C-f\"))\n\n\n;;;(add-to-list 'load-path (expand-file-name \"~/.emacs.d/auto-install/\"))\n(add-to-list 'load-path \"~/.emacs.d/\")\n(add-to-list 'load-path \"~/.emacs.d/auto-install\")\n(require 'auto-install)\n(auto-install-update-emacswiki-package-name t)\n(auto-install-compatibility-setup)\n\n(setq-default skk-kutouten-type 'en)\n(setq skk-egg-like-newline t)\n(setq skk-henkan-show-candidates-keys '(?a ?o ?e ?u ?h ?t ?n))\n(setq skk-rom-kana-rule-list '(\n\t(\"ca\" nil (\"\u30ab\" . \"\u304b\"))\n\t(\"ci\" nil (\"\u30ad\" . \"\u304d\"))\n\t(\"cu\" nil (\"\u30af\" . \"\u304f\"))\n\t(\"ce\" nil (\"\u30b1\" . \"\u3051\"))\n\t(\"co\" nil (\"\u30b3\" . \"\u3053\"))\n\t(\"cya\" nil (\"\u30ad\u30e3\" . \"\u304d\u3083\"))\n\t(\"cyu\" nil (\"\u30ad\u30e5\" . \"\u304d\u3085\"))\n\t(\"cye\" nil (\"\u30ad\u30a7\" . \"\u304d\u3047\"))\n\t(\"cyo\" nil (\"\u30ad\u30e7\" . \"\u304d\u3087\"))\n\t(\"wi\" nil (\"\u30f0\" . \"\u3090\"))\n\t(\"we\" nil (\"\u30f1\" . \"\u3091\"))\n))\n\n\n\n(require 'cl)\n\n;;;(powerline-default-theme)\n\n\n;(add-to-list 'load-path \"~/.emacs.d/site-lisp/\")\n(add-to-list 'load-path \"~/.emacs.d/twittering-mode-3.0.0\")\n(setq twittering-status-format \"%p %S (%s), %C (%@):\\n%t\\nvia %f\\t %L %f \\n%d\\n---%'\")\n;; %s - screen_name\n;; %S - name\n;; %i - profile_image\n;; %d - description\n;; %l - location\n;; %L - \" [location]\"\n;; %u - url\n;; %j - user.id\n;; %p - protected?\n;; %c - created_at (raw UTC string)\n;; %C{time-format-str} - created_at (formatted with time-format-str)\n;; %@ - X seconds ago\n;; %t - text\n;; %' - truncated\n;; %f - source\n;; %# - id\n\n;(require 'lispxmp)\n\n\n;(setq org-export-latex-coding-system 'shift_jis)\n(setq org-export-latex-date-format \"%Y-%m-%d\")\n(setq org-export-latex-classes nil)\n(add-to-list 'org-export-latex-classes\n  '(\"jsarticle\"\n    \"\\\\documentclass[a4j]{jsarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(add-to-list 'org-export-latex-classes\n  '(\"jarticle\"\n    \"\\\\documentclass[a4j]{jarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(add-to-list 'org-export-latex-classes\n  '(\"mine\"\n    \"\\\\documentclass[a4j]{jarticle}\"\n    (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\n    (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\n    (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\n    (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\n    (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")\n))\n\n(setq org-export-latex-packages-alist\n  '((\"AUTO\" \"inputenc\"  t)\n    (\"T1\"   \"fontenc\"   t)\n    ))\n\n(setq org-latex-to-pdf-process\n      '(\"/usr/texbin/platex %f\" \"/usr/texbin/dvipdfmx %b\"))\n\n;;; Mew \u3092\u4f7f\u3046\u70ba\u306e\u8a2d\u5b9a\n;(autoload 'mew \"mew\" nil t)\n;(autoload 'mew-send \"mew\" nil t)\n\n;;; Mew \u306e\u8d77\u52d5\u6642\u306b\u306f\u30e1\u30fc\u30eb\u3092\u53d6\u5f97\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u8a2d\u5b9a\n(setq mew-auto-get nil)\n\n;;; \u30e1\u30fc\u30eb\u306e\u53d6\u5f97\u5f8c\u3001POP\u30b5\u30fc\u30d0\u306b\u3042\u308b\u30e1\u30fc\u30eb\u3092\u6b8b\u3059\u8a2d\u5b9a\n(setq mew-pop-delete nil)\n\n(setq mew-prog-ssl \"/usr/local/bin/stunnel3\")\n;;; \u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8868\u793a\u3055\u305b\u306a\u3044\u305f\u3081\u306e\u8a2d\u5b9a\n(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)\n\n\n\n;(require 'package)\n;(setq package-user-dir \"~/.emacs.d/elisp/elpa/\")\n;(add-to-list 'package-archives '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)\n;(package-initialize)\n\n;(require 'init-loader)\n;(init-loader-load \"~/.emacs.d/mine\")\n\n;(require 'open-junk-file)\n(require 'twittering-mode)\n(require 'alpaca)\n(setq twittering-use-master-password t)\n(setq twittering-timer-interval 300)\n\n(setq twittering-use-ssl t)\n\n\n(setq eshell-cmpl-ignore-case t)\n\n(tool-bar-mode -1)\n(menu-bar-mode -1)\n(scroll-bar-mode -1)\n\n(when (eq window-system 'x)\n;;;  (load-theme 'deeper-blue t)\n;;; (load-theme 'tango t)\n;;;(load-theme 'misterioso t)\n;;;(load-theme 'wheatgrass t)\n(load-theme 'manoj-dark t)\n\n;;;  (load-theme 'light-blue t)\n(set-face-attribute 'default nil\n;;;\t\t    :family \"Liberation Mono\"\n;;;\t\t    :family \"Courier 10 Pitch\"\n\t\t    :family \"inconsolata\"\n;;;\t\t    :family \"Dejavu Sans Mono\"\n;;;\t\t    :family \"Nimbus Mono L\"\n\t\t    :height 150))\n;; \u65e5\u672c\u8a9e\u3092\n;;;  (set-fontset-font \"fontset-default\"\n;;;\t\t    'japanese-jisx0208\n;;;\t\t    '(\"IPAMincho\"))\n\n  (set-fontset-font \"fontset-default\"\n\t\t    'japanese-jisx0208\n'(\"\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4 ProN W3\"))\n\n(when (eq window-system 'ns)\n\n;;;(load-theme 'wombat t)\n  (load-theme 'molokai t)\n;;;  (enable-theme 'molokai)\n  \n;;  Monaco 12pt \u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u3059\u308b\n  (set-face-attribute 'default nil\n\t\t      :family \"Andale mono\"\n\t\t      :height 150)\n;;\u65e5\u672c\u8a9e\u3092\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4ProN\u306b\u3059\u308b\n  (set-fontset-font \"fontset-default\"\t\t    'japanese-jisx0208\n\t\t    '(\"Hiragino Mincho ProN\"))\n;;\u534a\u89d2\u30ab\u30ca\u3092\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4ProN\u306b\u3059\u308b\n  (set-fontset-font \"fontset-default\"\n\t\t    'katakana-jisx0201\n\t\t    '(\"Hiragino Maru Gothic ProN\"))\n  ;;for Japanese\n  (set-language-environment 'Japanese)\n  (set-default-coding-systems 'utf-8-unix)\n  (set-terminal-coding-system 'utf-8-unix)\n  (set-keyboard-coding-system 'sjis-mac)\n  (set-clipboard-coding-system 'sjis-mac)\n  (setq-default buffer-file-coding-system 'utf-8)\n  (prefer-coding-system 'utf-8)\n  (add-to-list 'default-frame-alist '(font . \"fontset-default\"))\n\n)\n\n\n\n\n;;;(require 'anything-startup)\n;;;(require 'auto-install)\n;;;(require 'twit)\n;;(setq auto-install-directory \"~/.emacs.d/auto-install/\")\n;;(auto-install-update-emacswiki-package-name t)\n;;(auto-install-compatibility-setup)             ; \u4e92\u63db\u6027\u78ba\u4fdd\n\n(setq open-junk-file-format \"~/program/junk/%Y/%m/%Y-%m-%d-%H%M%S.\")\n\n\n\n\n\n\n(define-key minibuffer-local-map (kbd \"C-t\") 'previous-history-element)\n(define-key minibuffer-local-map (kbd \"C-h\") 'next-history-element)\n\n\n(add-hook 'shell-mode-hook\n\t  '(lambda ()\n\t     (define-key shell-mode-map (kbd \"C-S-t\") 'comint-previous-input)\n\t     (define-key shell-mode-map (kbd \"C-S-h\") 'comint-next-input)\n\t     (define-key shell-mode-map (kbd \"C-d\") 'backward-char)))\n\n;;;(add-hook 'eshell-mode-hook\n;;;\t  '(lambda ()\n;;;\t     (define-key eshell-mode-map (kbd \"C-t\") 'eshell-previous-matching-input-from-input)\n;;;\t     (define-key shell-mode-map (kbd \"C-S-h\") 'comint-next-input)\n;;;\t     (define-key shell-mode-map (kbd \"C-d\") 'backward-char))\n;;;)\n\n\n\n(defalias 'dk 'describe-key)\n(defalias 'dkb 'describe-key-briefly)\n(defalias 'db 'describe-bindings)\n(defalias 'df 'describe-function)\n(defalias 'dv 'describe-variable)\n(defalias 'dm 'describe-mode)\n(defalias 'ir 'indent-region)\n(defalias 'ap 'apropos)\n(defalias 'ff 'find-function)\n\n\n\n;;;(aset keyboard-translate-table ?\\<tab> ?\\M-x)\n;;;(if window-system\n;;;  )\n\n(setq scroll-step 1)\n(setq inhibit-startup-message t)\n \n;;\n;; YaTeX\n;;\n\n(add-to-list 'load-path \"~/.emacs.d/site-lisp/yatex\")\n(autoload 'yatex-mode \"yatex\" \"Yet Another LaTeX mode\" t)\n(setq auto-mode-alist\n      (append '((\"\\\\.tex$\" . yatex-mode)\n\t\t(\"\\\\.ltx$\" . yatex-mode)\n\t\t(\"\\\\.cls$\" . yatex-mode)\n\t\t(\"\\\\.sty$\" . yatex-mode)\n\t\t(\"\\\\.clo$\" . yatex-mode)\n\t\t(\"\\\\.bbl$\" . yatex-mode)) auto-mode-alist))\n(setq YaTeX-inhibit-prefix-letter t)\n(setq YaTeX-kanji-code nil)\n(setq YaTeX-use-LaTeX2e t)\n(setq YaTeX-use-AMS-LaTeX t)\n\t\t\t\t\t;(setq YaTeX-dvi2-command-ext-alist nil)\n;;(setq YaTeX-dvi2-command-ext-alist\n;;      '((\"Preview\\\\|TeXShop\\\\|TeXworks\\\\|Skim\\\\|mupdf\\\\|xpdf\\\\|Firefox\\\\|Adobe\" . \".pdf\")))\n;;(setq YaTeX-dvi2-command-ext-alist nil)\n(setq tex-command \"/usr/texbin/platex -synctex=1\")\n(setq dviprint-command-format \"dvpd.sh %s\")\n;;(setq dviprint-command-format \"dvipdfmx -p b4 -l %s\")\n(setq dvi2-command \"open -a Preview\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/ptex2pdf -l -ot '-synctex=1'\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/ptex2pdf -l -u -ot '-synctex=1'\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/pdflatex -synctex=1\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/lualatex -synctex=1\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/luajitlatex -synctex=1\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/xelatex -synctex=1\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -g > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/pdflatex %O -synctex=1 %S/' -e '$bibtex=q/bibtex %O %B/' -e '$makeindex=q/makeindex %O -o %D %S/' -norc -gg -pdf\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/lualatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/luajitlatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex\")\n\t\t\t\t\t;(setq tex-command \"/usr/texbin/latexmk -e '$pdflatex=q/xelatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -xelatex\")\n(setq bibtex-command (cond ((string-match \"uplatex\\\\|-u\" tex-command) \"/usr/texbin/upbibtex\")\n\t\t\t   ((string-match \"platex\" tex-command) \"/usr/texbin/pbibtex\")\n\t\t\t   ((string-match \"lualatex\\\\|luajitlatex\\\\|xelatex\" tex-command) \"/usr/texbin/bibtexu\")\n\t\t\t   ((string-match \"pdflatex\\\\|latex\" tex-command) \"/usr/texbin/bibtex\")\n\t\t\t   (t \"/usr/texbin/pbibtex\")))\n(setq makeindex-command (cond ((string-match \"uplatex\\\\|-u\" tex-command) \"/usr/texbin/mendex\")\n\t\t\t      ((string-match \"platex\" tex-command) \"/usr/texbin/mendex\")\n\t\t\t      ((string-match \"lualatex\\\\|luajitlatex\\\\|xelatex\" tex-command) \"/usr/texbin/texindy\")\n\t\t\t      ((string-match \"pdflatex\\\\|latex\" tex-command) \"/usr/texbin/makeindex\")\n\t\t\t      (t \"/usr/texbin/mendex\")))\n(setq dvi2-command \"/usr/bin/open -a Preview\")\n\t\t\t\t\t;(setq dvi2-command \"/usr/bin/open -a Skim\")\n\t\t\t\t\t;(setq dvi2-command \"/usr/bin/open -a TeXShop\")\n\t\t\t\t\t;(setq dvi2-command \"/usr/bin/open -a TeXworks\")\n\t\t\t\t\t;(setq dvi2-command \"/usr/bin/open -a Firefox\")\n\t\t\t\t\t;(setq dviprint-command-format \"/usr/bin/open -a \\\"Adobe Reader\\\" `echo %s | sed -e \\\"s/\\\\.[^.]*$/\\\\.pdf/\\\"`\")\n\n(defun skim-forward-search ()\n  (interactive)\n  (progn\n    (process-kill-without-query\n     (start-process  \n      \"displayline\"\n      nil\n      \"/Applications/Skim.app/Contents/SharedSupport/displayline\"\n      (number-to-string (save-restriction\n\t\t\t  (widen)\n\t\t\t  (count-lines (point-min) (point))))\n      (expand-file-name\n       (concat (file-name-sans-extension (or YaTeX-parent-file\n\t\t\t\t\t     (save-excursion\n\t\t\t\t\t       (YaTeX-visit-main t)\n\t\t\t\t\t       buffer-file-name)))\n\t       \".pdf\"))\n      buffer-file-name))))\n\n(add-hook 'yatex-mode-hook\n\t  '(lambda ()\n\t     (define-key YaTeX-mode-map (kbd \"C-c s\") 'skim-forward-search)))\n\n(add-hook 'yatex-mode-hook\n\t  '(lambda ()\n\t     (auto-fill-mode -1)))\n\n;;\n;; RefTeX with YaTeX\n;;\n\t\t\t\t\t;(add-hook 'yatex-mode-hook 'turn-on-reftex)\n(add-hook 'yatex-mode-hook\n\t  '(lambda ()\n\t     (reftex-mode 1)\n\t     (define-key reftex-mode-map (concat YaTeX-prefix \">\") 'YaTeX-comment-region)\n\t     (define-key reftex-mode-map (concat YaTeX-prefix \"<\") 'YaTeX-uncomment-region)))\n\n\n\n(defun my-buffer-menu nil\n  (interactive)\n  (buffer-menu-other-window)\n  (other-window 0))\n\n(defun my-buffer-menu2 nil\n  (interactive)\n  (ibuffer-other-window)\n  (other-window 0))\n\n\n(add-to-list 'load-path \"~/.emacs.d/elisp/\")\n\n(autoload 'ruby-mode \"ruby-mode\" \"Mode for editing ruby source files\" t)\n(setq auto-mode-alist (append '((\"\\\\.rb$\" . ruby-mode)) auto-mode-alist))\n(setq interpreter-mode-alist (append '((\"ruby\" . ruby-mode)) interpreter-mode-alist))\n(autoload 'run-ruby \"inf-ruby\" \"Run an inferior Ruby process\")\n(autoload 'inf-ruby-keys \"inf-ruby\" \"Set local key defs for inf-ruby in ruby-mode\")\n(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys)))\n(global-font-lock-mode 1)\n(setq default-frame-alist (append '(\n\t\t\t\t\t;  (foreground-color . \"gray\")  ;\n\t\t\t\t\t;  (background-color . \"black\") ;\n\t\t\t\t\t;  (cursor-color     . \"blue\")  ;\n\t\t\t\t    )\n\t\t\t\t  default-frame-alist))\n\n;; ruby-electric\n;;;(require 'ruby-electric)\n(add-hook 'ruby-mode-hook '(lambda ()\n;;;\t\t\t     (ruby-electric-mode t)\n\t\t\t     (define-key ruby-mode-map (kbd \"C-c c\") 'smart-compile)\n\t\t\t     (define-key ruby-mode-map (kbd \"C-c C-c\") (kbd \"C-c c C-m\"))\n))\n\n;; rubydb\n(autoload 'rubydb \"rubydb3x\"\n  \"run rubydb on program file in buffer *gud-file*.\nthe directory containing file becomes the initial working directory\nand source-file directory for your debugger.\" t)\n\n\n;; ruby-block\n;(require 'ruby-block)\n;(ruby-block-mode t)\n\n;; \u30df\u30cb\u30d0\u30c3\u30d5\u30a1\u306b\u8868\u793a\u3057, \u304b\u3064, \u30aa\u30fc\u30d0\u30ec\u30a4\u3059\u308b.\n(setq ruby-block-highlight-toggle t)\n\n(setq ruby-indent-level 2)\n(setq ruby-indent-tabs-mode nil)\n\n(require 'smart-compile)\n\n(require 'linum)\n(global-linum-mode)\n\n;(exec-path-from-shell-initialize)\n\n\n;;; This was installed by package-install.el.\n;;; This provides support for the package system and\n;;; interfacing with ELPA, the package archive.\n;;; Move this code earlier if you want to reference\n;;; packages in your .emacs.\n(when\n    (load\n     (expand-file-name \"~/.emacs.d/elpa/package.el\"))\n  (package-initialize))\n\n\n(require 'powerline-init)\n(set-face-background 'hl-line \"cyan4\")\n```\n", "tags": ["Emacs", "emacs-lisp"]}