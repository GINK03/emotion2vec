{"context": "11.15 \u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u7b49\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char c;\n    char sentence[8000];\n    char buf[100];\n    int i = 0;\n    int a;\n    FILE *readPtr;\n    FILE *writePtr;\n\n    printf(\"1 \u6a19\u6e96\u5165\u529b\u304b\u3089\u3088\u3093\u3067\u6a19\u6e96\u51fa\u529b\u306b\u66f8\u304f\\n\");\n    printf(\"2 \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3088\u3093\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\\n\");\n    scanf(\"%d\", &a);\n    fflush(stdin);\n\n    if (a == 1)\n    {\n        puts(\"\u30c6\u30ad\u30b9\u30c8\u30921\u884c\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044:\");\n\n        while ((c = getchar()) != '\\n')\n        {\n              sentence[i] = c;\n              i++;\n        }\n        sentence[i] = '\\0';\n        puts(\"\\n\u5165\u529b\u3057\u305f\u884c\u306f:\");\n        puts(sentence);\n    }\n    else if (a == 2)\n    {\n        printf(\"\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n        gets(buf);\n\n        if ((readPtr = fopen(buf, \"r\")) == NULL)\n        {\n             fprintf(stderr, \"read error\\n\");\n             return -1;\n        } \n\n        printf(\"\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n        gets(buf);\n\n        if ((writePtr = fopen(buf, \"w\")) == NULL)\n        {\n             fprintf(stderr, \"write error\\n\");\n             return -1;\n        }\n\n        while ((c = fgetc(readPtr)) != EOF) \n        {\n             printf(\"%c\", c);\n             sentence[i] = c;\n             i++;\n        }\n        fputs(\"\\n\u5165\u529b\u3057\u305f\u884c\u306f:\", writePtr);\n        fputs(sentence, writePtr);\n    }\n\n    getch();\n    return 0;\n}\n\n11.16 \u69cb\u9020\u4f53\u3092\u6271\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\ntypedef struct type{\n   char name[40];\n   int  size;\n}Type;\n\nvoid setType(Type []);\n\nvoid getTypeSize(Type *, char []);\n\nint writeData(Type [], int);\n\nint main()\n{\n    int i;\n\n    Type data[11];\n\n    setType(data);\n\n    for (i = 0; i < 11; i++)\n    {\n       getTypeSize(&data[i], data[i].name);\n    }\n\n    if (writeData(data, 11) == -1)\n    {\n        fprintf(stderr, \"write Error\\n\");\n        return -1;\n    }\n    getch();\n    return 0;\n}\n\nvoid setType(Type d[])\n{   \n    strcpy(d[0].name, \"char\");\n    strcpy(d[1].name, \"unsigned char\");\n    strcpy(d[2].name, \"short int\");\n    strcpy(d[3].name, \"unsigned short int\");\n    strcpy(d[4].name, \"int\");\n    strcpy(d[5].name, \"unsigned int\");\n    strcpy(d[6].name, \"long int\");\n    strcpy(d[7].name, \"unsigned long int\");\n    strcpy(d[8].name, \"float\");\n    strcpy(d[9].name, \"double\");\n    strcpy(d[10].name, \"long double\");\n}\n\nvoid getTypeSize(Type *d, char n[])\n{\n    strcpy(d -> name, n);\n\n    if (strcmp(\"char\", n) == 0)\n    {\n        d -> size = sizeof(char);\n    }\n    else if (strcmp(\"unsigned char\", n) == 0)\n    {\n        d -> size = sizeof(unsigned char);\n    }\n    else if (strcmp(\"short int\", n) == 0)\n    {\n        d -> size = sizeof(short int);\n    }\n    else if (strcmp(\"unsigned short int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned short int);\n    }\n    else if (strcmp(\"int\", n) == 0)\n    {\n        d -> size = sizeof(int);\n    }\n    else if (strcmp(\"unsigned int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned int);\n    }\n    else if (strcmp(\"long int\", n) == 0)\n    {\n        d -> size = sizeof(long int);\n    }\n    else if (strcmp(\"unsigned long int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned long int);\n    }\n    else if (strcmp(\"float\", n) == 0)\n    {\n        d -> size = sizeof(float);\n    }\n    else if (strcmp(\"double\", n) == 0)\n    {\n        d -> size = sizeof(double);\n    }\n    else if (strcmp(\"long double\", n) == 0)\n    {\n        d -> size = sizeof(long double);\n    }\n}\n\nint writeData(Type d[], int size)\n{\n    int i;\n    FILE *writePtr;\n\n    if ((writePtr = fopen(\"datasize.dat\", \"w\")) == NULL)\n    {\n         return -1;\n    }\n\n    fprintf(writePtr, \"%-20s %-4s\\n\", \"\u30c7\u30fc\u30bf\u578b\", \"\u30b5\u30a4\u30ba\");\n\n    for (i = 0; i < size; i++)\n    {\n        fprintf(writePtr, \"%-20s %-4d\\n\", d[i].name, d[i].size);\n    }\n    fclose(writePtr);\n\n    return 0;\n}\n\n11.17 \u4eee\u60f3\u30de\u30b7\u30f3\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\n#define DEBUG(name) { printf(\"\\nDEBUG (\" #name \") %d\\n\\n\", name); }\n\n// \u5165\u51fa\u529b\u547d\u4ee4\n#define READ  10 // \u7aef\u672b\u304b\u3089\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b1\u30ef\u30fc\u30c9\u66f8\u304d\u8fbc\u3080\n#define WRITE 11 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u304b\u3089\u7aef\u672b\u306b1\u30ef\u30fc\u30c9\u66f8\u304d\u8fbc\u3080\n\n// \u30ed\u30fc\u30c9/\u30b9\u30c8\u30a2\u547d\u4ee4\n#define LOAD  20 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u304b\u3089\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b1\u30ef\u30fc\u30c9\u30ed\u30fc\u30c9\u3059\u308b\n#define STORE 21 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304b\u3089\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b1\u30ef\u30fc\u30c9\u30b9\u30c8\u30a2\u3059\u308b\n\n// \u7b97\u8853\u6f14\u7b97\u547d\u4ee4\n#define ADD         30 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u8db3\u3059(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define SUBTRACT    31 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u5f15\u304f(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define DIVIDE      32 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3067\u5272\u308b(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define MULTIPLY    33 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u639b\u3051\u308b(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n\n// \u5206\u5c90\u547d\u4ee4\n#define BRANCH     40 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u7121\u6761\u4ef6\u5206\u5c90\u3059\u308b\n#define BRANCHENG  41 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306e\u3068\u304d\u3001\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u5206\u5c90\u3059\u308b\n#define BRANCHZERO 42 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c0\u306e\u3068\u304d\u3001\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u5206\u5c90\u3059\u308b\n#define HALT       43 // \u505c\u6b62\u3059\u308b\u3000\u3064\u307e\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3092\u7d42\u4e86\u3059\u308b\n\n#define MEMORY_SIZE 100 // \u30e1\u30e2\u30ea\u306e\u5927\u304d\u3055\n\n// \u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid printDamp(int, int, int, int, int, int []);\n\n// \u30d5\u30a1\u30a4\u30eb\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid writeDamp(int, int, int, int, int, int []);\n\nint main(int argc, char *argv[])\n{ \n    static int memory[MEMORY_SIZE];                  // \u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\n    int accumulator = 0;                             // \u30ec\u30b8\u30b9\u30bf\n    int instructionCounter = 0;                      // \u6b21\u306b\u5b9f\u884c\u3059\u308b\u547d\u4ee4\u304c\u683c\u7d0d\u3055\u308c\u305f\u30e1\u30e2\u30ea\u756a\u5730\u3092\u683c\u7d0d\n    int instructionRegister;                         // \u6b21\u306b\u5b9f\u884c\u3059\u308b\u547d\u4ee4\n    int operationCode;                               // \u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\n    int operand = 0;                                 // \u73fe\u5728\u306e\u547d\u4ee4\u304c\u4f5c\u7528\u3059\u308b\u30e1\u30e2\u30ea\u756a\u5730\n    int endFlag = 0;          \n    FILE *readPtr;\n\n\n    // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\n    if ((readPtr = fopen(argv[1], \"r\")) == NULL)\n    {\n         fprintf(stderr, \"instruction error\\n\");\n         return -1;\n    }\n\n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u9593\n    while (0 == endFlag)\n    {\n        // \u547d\u4ee4\u3092\u5165\u529b\n        fscanf(readPtr, \"%02d %d\\n\", &operand, &memory[operand]);\n\n        if (memory[operand] == -9999)\n        {\n            endFlag = 1;\n            memory[operand] = 0;\n        }\n        else if (-9999 <= memory[operand] && memory[operand] <= 9999)\n        {\n            operand++;\n            fflush(stdin);\n        }\n        else\n        {\n            printf(\"\\n\u4e0d\u6b63\u306a\u5024\u3067\u3059 -9999 - 9999 \u307e\u3067\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\\n\");\n        }\n    }\n\n    if (operand <= 0)\n    {\n        printf(\"\u547d\u4ee4\u306f\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        endFlag = 1;\n    }\n    else\n    {\n        printf(\"*** \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f ***\\n\");\n        printf(\"*** \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u3092\u958b\u59cb\u3057\u307e\u3059     ***\\n\");\n        endFlag = 0;\n    }\n\n    while (endFlag == 0)\n    {\n        // \u547d\u4ee4\u3092\u53d6\u308a\u51fa\u3059\n        instructionRegister = memory[instructionCounter];\n        DEBUG(instructionRegister)\n\n        // \u6b21\u306e\u547d\u4ee4\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u66f4\u65b0\n        instructionCounter++;\n\n        // \u547d\u4ee4\u30ec\u30b8\u30b9\u30bf\u304b\u3089\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        operationCode = instructionRegister / 100;\n\n        // \u547d\u4ee4\u30ec\u30b8\u30b9\u30bf\u304b\u3089\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        operand = instructionRegister % 100;\n\n       // \u547d\u4ee4\u5224\u5225\n       switch (operationCode)\n       {\n          // \u5165\u529b\u547d\u4ee4\n          case READ:\n            printf(\"\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n            scanf(\"%d\", &memory[operand]);\n            break;\n\n          // \u51fa\u529b\u547d\u4ee4\n          case WRITE:\n            printf(\"%+5d\\n\", memory[operand]); \n            break;\n\n          // \u30ed\u30fc\u30c9\u547d\u4ee4\n          case LOAD:\n             accumulator = memory[operand];\n             break;\n\n          // \u30b9\u30c8\u30a2\u547d\u4ee4\n          case STORE:\n             memory[operand] = accumulator;\n             break;\n\n          // \u52a0\u7b97\u547d\u4ee4\n          case ADD:\n             accumulator += memory[operand];\n\n             if (accumulator < -9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                  \n                 return -1;\n             }\n             else if (accumulator > 9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n                 return -1;\n             }\n             break;\n\n          // \u5f15\u304d\u7b97\u547d\u4ee4\n          case SUBTRACT:\n             accumulator -= memory[operand];\n\n             if (accumulator < -9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);   \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);               \n                 return -1;\n             }\n             else if (accumulator > 9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                \n                 return -1;\n             }\n             break;\n\n          // \u5272\u308a\u7b97\u547d\u4ee4\n          case DIVIDE:\n\n             // 0\u306b\u3088\u308b\u9664\u7b97\u306a\u3089\u3070\n             if (memory[operand] == 0)\n             {\n                 fprintf(stderr, \"*** \u30bc\u30ed\u3067\u5272\u308d\u3046\u3068\u3057\u305f ***\\n\"\n                                 \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n                 return -1;\n             }\n             accumulator /= memory[operand];\n             break;\n\n          // \u639b\u3051\u7b97\u547d\u4ee4\n          case MULTIPLY:\n             accumulator *= memory[operand];\n             break;\n\n          // \u7121\u6761\u4ef6\u5206\u5c90\u547d\u4ee4\n          case BRANCH:\n\n             // \u7121\u6761\u4ef6\u306b\u30b8\u30e3\u30f3\u30d7\n             instructionCounter = operand;\n             break;\n\n          // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306e\u3068\u304d\u5206\u5c90\u3059\u308b\u547d\u4ee4\n          case BRANCHENG:\n\n             // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306a\u3089\n             if (accumulator < 0)\n             {\n                 // \u30b8\u30e3\u30f3\u30d7\u5148\u3092\u683c\u7d0d\n                 instructionCounter = operand;\n             }\n\n          // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c0\u306e\u3068\u304d\u5206\u5c90\u3059\u308b\u547d\u4ee4\n          case BRANCHZERO:\n             if (accumulator == 0)\n             {\n                 instructionCounter = operand;\n             }\n\n          // \u505c\u6b62\u547d\u4ee4\n          case HALT:\n             endFlag = 1;\n             printf(\"*** Simpletron\u306f\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\"); \n             printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n             writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);           \n             break;\n\n          // \u4e0d\u6b63\u306a\u547d\u4ee4\n          default:\n             fprintf(stderr, \"*** \u4e0d\u6b63\u306a\u547d\u4ee4\u30b3\u30fc\u30c9 ***\\n\"\n                     \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n             printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n\n             writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n             return -1;         \n        }\n    }\n    getch();\n\n    return 0;\n}\n\n// \u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid printDamp(int accu, int instructionC, int instructionR, int operation, int operand, int m[])\n{\n     int i, j;\n\n\n     printf(\"\u30ec\u30b8\u30b9\u30bf:                  \\n\");\n     printf(\"\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf %+05d          \\n\", accu);\n     printf(\"\u547d\u4ee4\u30ab\u30a6\u30f3\u30bf      %02d          \\n\", instructionC);\n     printf(\"\u547d\u4ee4\u30ec\u30b8\u30b9\u30bf   %+5d          \\n\", instructionR);\n     printf(\"\u547d\u4ee4\u30b3\u30fc\u30c9        %02d          \\n\", operation);\n     printf(\"\u30aa\u30da\u30e9\u30f3\u30c9        %02d          \\n\\n\\n\", operand);\n     printf(\"\u30e1\u30e2\u30ea:                      \\n\");\n     printf(\"   \");\n\n     for (i = 0; i < 10; i++)\n     {\n         printf(\"%5d \", i);  \n     }\n     printf(\"\\n\");\n\n     for (i = 0; i < 100; i += 10)\n     {\n         printf(\"%2d \", i);\n\n         for (j = i; j < i + 10; j++)\n         {\n             printf(\"%+05d \", m[j]);\n         }\n         printf(\"\\n\");\n     }\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid writeDamp(int accu, int instructionC, int instructionR, int operation, int operand, int m[])\n{\n     int i, j;\n     FILE *writePtr;\n\n\n     if ((writePtr = fopen(\"dmap\", \"w\")) == NULL)\n     {\n          fprintf(stderr, \"writeDampError\\n\");\n          exit(-1);\n     }\n\n     fprintf(writePtr, \"\u30ec\u30b8\u30b9\u30bf:                  \\n\");\n     fprintf(writePtr, \"\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf %+05d          \\n\", accu);\n     fprintf(writePtr, \"\u547d\u4ee4\u30ab\u30a6\u30f3\u30bf      %02d          \\n\", instructionC);\n     fprintf(writePtr, \"\u547d\u4ee4\u30ec\u30b8\u30b9\u30bf   %+5d          \\n\", instructionR);\n     fprintf(writePtr, \"\u547d\u4ee4\u30b3\u30fc\u30c9        %02d          \\n\", operation);\n     fprintf(writePtr, \"\u30aa\u30da\u30e9\u30f3\u30c9        %02d          \\n\\n\\n\", operand);\n     fprintf(writePtr, \"\u30e1\u30e2\u30ea:                      \\n\");\n     fprintf(writePtr, \"   \");\n\n     for (i = 0; i < 10; i++)\n     {\n         fprintf(writePtr, \"%5d \", i);  \n     }\n     fprintf(writePtr, \"\\n\");\n\n     for (i = 0; i < 100; i += 10)\n     {\n         fprintf(writePtr, \"%2d \", i);\n\n         for (j = i; j < i + 10; j++)\n         {\n             fprintf(writePtr, \"%+05d \", m[j]);\n         }\n         fprintf(writePtr, \"\\n\");\n     }\n}\n\n\n\n\u30dd\u30fc\u30bf\u30eb\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\nhttp://qiita.com/ynakamura/items/84efeab3c6267ce7ac67\n11.15 \u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u7b49\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\nint main()\n{\n    char c;\n    char sentence[8000];\n    char buf[100];\n    int i = 0;\n    int a;\n    FILE *readPtr;\n    FILE *writePtr;\n\n    printf(\"1 \u6a19\u6e96\u5165\u529b\u304b\u3089\u3088\u3093\u3067\u6a19\u6e96\u51fa\u529b\u306b\u66f8\u304f\\n\");\n    printf(\"2 \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u3088\u3093\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\\n\");\n    scanf(\"%d\", &a);\n    fflush(stdin);\n\n    if (a == 1)\n    {\n        puts(\"\u30c6\u30ad\u30b9\u30c8\u30921\u884c\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044:\");\n\n        while ((c = getchar()) != '\\n')\n        {\n              sentence[i] = c;\n              i++;\n        }\n        sentence[i] = '\\0';\n        puts(\"\\n\u5165\u529b\u3057\u305f\u884c\u306f:\");\n        puts(sentence);\n    }\n    else if (a == 2)\n    {\n        printf(\"\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n        gets(buf);\n\n        if ((readPtr = fopen(buf, \"r\")) == NULL)\n        {\n             fprintf(stderr, \"read error\\n\");\n             return -1;\n        } \n \n        printf(\"\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n        gets(buf);\n\n        if ((writePtr = fopen(buf, \"w\")) == NULL)\n        {\n             fprintf(stderr, \"write error\\n\");\n             return -1;\n        }\n\n        while ((c = fgetc(readPtr)) != EOF) \n        {\n             printf(\"%c\", c);\n             sentence[i] = c;\n             i++;\n        }\n        fputs(\"\\n\u5165\u529b\u3057\u305f\u884c\u306f:\", writePtr);\n        fputs(sentence, writePtr);\n    }\n\n    getch();\n    return 0;\n}\n```\n\n11.16 \u69cb\u9020\u4f53\u3092\u6271\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\ntypedef struct type{\n   char name[40];\n   int  size;\n}Type;\n\nvoid setType(Type []);\n\nvoid getTypeSize(Type *, char []);\n\nint writeData(Type [], int);\n\nint main()\n{\n    int i;\n\n    Type data[11];\n\n    setType(data);\n\n    for (i = 0; i < 11; i++)\n    {\n       getTypeSize(&data[i], data[i].name);\n    }\n    \n    if (writeData(data, 11) == -1)\n    {\n        fprintf(stderr, \"write Error\\n\");\n        return -1;\n    }\n    getch();\n    return 0;\n}\n\nvoid setType(Type d[])\n{   \n    strcpy(d[0].name, \"char\");\n    strcpy(d[1].name, \"unsigned char\");\n    strcpy(d[2].name, \"short int\");\n    strcpy(d[3].name, \"unsigned short int\");\n    strcpy(d[4].name, \"int\");\n    strcpy(d[5].name, \"unsigned int\");\n    strcpy(d[6].name, \"long int\");\n    strcpy(d[7].name, \"unsigned long int\");\n    strcpy(d[8].name, \"float\");\n    strcpy(d[9].name, \"double\");\n    strcpy(d[10].name, \"long double\");\n}\n\nvoid getTypeSize(Type *d, char n[])\n{\n    strcpy(d -> name, n);\n  \n    if (strcmp(\"char\", n) == 0)\n    {\n        d -> size = sizeof(char);\n    }\n    else if (strcmp(\"unsigned char\", n) == 0)\n    {\n        d -> size = sizeof(unsigned char);\n    }\n    else if (strcmp(\"short int\", n) == 0)\n    {\n        d -> size = sizeof(short int);\n    }\n    else if (strcmp(\"unsigned short int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned short int);\n    }\n    else if (strcmp(\"int\", n) == 0)\n    {\n        d -> size = sizeof(int);\n    }\n    else if (strcmp(\"unsigned int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned int);\n    }\n    else if (strcmp(\"long int\", n) == 0)\n    {\n        d -> size = sizeof(long int);\n    }\n    else if (strcmp(\"unsigned long int\", n) == 0)\n    {\n        d -> size = sizeof(unsigned long int);\n    }\n    else if (strcmp(\"float\", n) == 0)\n    {\n        d -> size = sizeof(float);\n    }\n    else if (strcmp(\"double\", n) == 0)\n    {\n        d -> size = sizeof(double);\n    }\n    else if (strcmp(\"long double\", n) == 0)\n    {\n        d -> size = sizeof(long double);\n    }\n}\n\nint writeData(Type d[], int size)\n{\n    int i;\n    FILE *writePtr;\n\n    if ((writePtr = fopen(\"datasize.dat\", \"w\")) == NULL)\n    {\n         return -1;\n    }\n\n    fprintf(writePtr, \"%-20s %-4s\\n\", \"\u30c7\u30fc\u30bf\u578b\", \"\u30b5\u30a4\u30ba\");\n\n    for (i = 0; i < size; i++)\n    {\n        fprintf(writePtr, \"%-20s %-4d\\n\", d[i].name, d[i].size);\n    }\n    fclose(writePtr);\n\n    return 0;\n}\n```\n\n\n11.17 \u4eee\u60f3\u30de\u30b7\u30f3\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n#include <string.h>\n#include <ctype.h>\n\n#define DEBUG(name) { printf(\"\\nDEBUG (\" #name \") %d\\n\\n\", name); }\n\n// \u5165\u51fa\u529b\u547d\u4ee4\n#define READ  10 // \u7aef\u672b\u304b\u3089\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b1\u30ef\u30fc\u30c9\u66f8\u304d\u8fbc\u3080\n#define WRITE 11 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u304b\u3089\u7aef\u672b\u306b1\u30ef\u30fc\u30c9\u66f8\u304d\u8fbc\u3080\n\n// \u30ed\u30fc\u30c9/\u30b9\u30c8\u30a2\u547d\u4ee4\n#define LOAD  20 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u304b\u3089\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b1\u30ef\u30fc\u30c9\u30ed\u30fc\u30c9\u3059\u308b\n#define STORE 21 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304b\u3089\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b1\u30ef\u30fc\u30c9\u30b9\u30c8\u30a2\u3059\u308b\n\n// \u7b97\u8853\u6f14\u7b97\u547d\u4ee4\n#define ADD         30 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u8db3\u3059(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define SUBTRACT    31 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u5f15\u304f(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define DIVIDE      32 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3067\u5272\u308b(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n#define MULTIPLY    33 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u306b\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u3042\u308b1\u30ef\u30fc\u30c9\u3092\u639b\u3051\u308b(\u7d50\u679c\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u5185\u306b\u6b8b\u308b)\n\n// \u5206\u5c90\u547d\u4ee4\n#define BRANCH     40 // \u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u7121\u6761\u4ef6\u5206\u5c90\u3059\u308b\n#define BRANCHENG  41 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306e\u3068\u304d\u3001\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u5206\u5c90\u3059\u308b\n#define BRANCHZERO 42 // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c0\u306e\u3068\u304d\u3001\u30e1\u30e2\u30ea\u5185\u306e\u6307\u5b9a\u3057\u305f\u756a\u5730\u306b\u5206\u5c90\u3059\u308b\n#define HALT       43 // \u505c\u6b62\u3059\u308b\u3000\u3064\u307e\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b9f\u884c\u3092\u7d42\u4e86\u3059\u308b\n \n#define MEMORY_SIZE 100 // \u30e1\u30e2\u30ea\u306e\u5927\u304d\u3055\n\n// \u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid printDamp(int, int, int, int, int, int []);\n\n// \u30d5\u30a1\u30a4\u30eb\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid writeDamp(int, int, int, int, int, int []);\n\nint main(int argc, char *argv[])\n{ \n    static int memory[MEMORY_SIZE];                  // \u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\n    int accumulator = 0;                             // \u30ec\u30b8\u30b9\u30bf\n    int instructionCounter = 0;                      // \u6b21\u306b\u5b9f\u884c\u3059\u308b\u547d\u4ee4\u304c\u683c\u7d0d\u3055\u308c\u305f\u30e1\u30e2\u30ea\u756a\u5730\u3092\u683c\u7d0d\n    int instructionRegister;                         // \u6b21\u306b\u5b9f\u884c\u3059\u308b\u547d\u4ee4\n    int operationCode;                               // \u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\n    int operand = 0;                                 // \u73fe\u5728\u306e\u547d\u4ee4\u304c\u4f5c\u7528\u3059\u308b\u30e1\u30e2\u30ea\u756a\u5730\n    int endFlag = 0;          \n    FILE *readPtr;\n\n    \n    // \u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\n    if ((readPtr = fopen(argv[1], \"r\")) == NULL)\n    {\n         fprintf(stderr, \"instruction error\\n\");\n         return -1;\n    }\n   \n\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u9593\n    while (0 == endFlag)\n    {\n        // \u547d\u4ee4\u3092\u5165\u529b\n        fscanf(readPtr, \"%02d %d\\n\", &operand, &memory[operand]);\n\n        if (memory[operand] == -9999)\n        {\n            endFlag = 1;\n            memory[operand] = 0;\n        }\n        else if (-9999 <= memory[operand] && memory[operand] <= 9999)\n        {\n            operand++;\n            fflush(stdin);\n        }\n        else\n        {\n            printf(\"\\n\u4e0d\u6b63\u306a\u5024\u3067\u3059 -9999 - 9999 \u307e\u3067\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\\n\");\n        }\n    }\n   \n    if (operand <= 0)\n    {\n        printf(\"\u547d\u4ee4\u306f\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        endFlag = 1;\n    }\n    else\n    {\n        printf(\"*** \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f ***\\n\");\n        printf(\"*** \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u3092\u958b\u59cb\u3057\u307e\u3059     ***\\n\");\n        endFlag = 0;\n    }\n\n    while (endFlag == 0)\n    {\n        // \u547d\u4ee4\u3092\u53d6\u308a\u51fa\u3059\n        instructionRegister = memory[instructionCounter];\n        DEBUG(instructionRegister)\n\n        // \u6b21\u306e\u547d\u4ee4\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u66f4\u65b0\n        instructionCounter++;\n\n        // \u547d\u4ee4\u30ec\u30b8\u30b9\u30bf\u304b\u3089\u547d\u4ee4\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        operationCode = instructionRegister / 100;\n\n        // \u547d\u4ee4\u30ec\u30b8\u30b9\u30bf\u304b\u3089\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u53d6\u308a\u51fa\u3059\n        operand = instructionRegister % 100;\n\n       // \u547d\u4ee4\u5224\u5225\n       switch (operationCode)\n       {\n          // \u5165\u529b\u547d\u4ee4\n          case READ:\n            printf(\"\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n            scanf(\"%d\", &memory[operand]);\n            break;\n\n          // \u51fa\u529b\u547d\u4ee4\n          case WRITE:\n            printf(\"%+5d\\n\", memory[operand]); \n            break;\n\n          // \u30ed\u30fc\u30c9\u547d\u4ee4\n          case LOAD:\n             accumulator = memory[operand];\n             break;\n\n          // \u30b9\u30c8\u30a2\u547d\u4ee4\n          case STORE:\n             memory[operand] = accumulator;\n             break;\n\n          // \u52a0\u7b97\u547d\u4ee4\n          case ADD:\n             accumulator += memory[operand];\n\n             if (accumulator < -9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                  \n                 return -1;\n             }\n             else if (accumulator > 9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n                 return -1;\n             }\n             break;\n\n          // \u5f15\u304d\u7b97\u547d\u4ee4\n          case SUBTRACT:\n             accumulator -= memory[operand];\n\n             if (accumulator < -9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);   \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);               \n                 return -1;\n             }\n             else if (accumulator > 9999)\n             {\n                 fprintf(stderr, \"*** \u6f14\u7b97\u7d50\u679c\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc ***\\n\"\n                               \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                \n                 return -1;\n             }\n             break;\n\n          // \u5272\u308a\u7b97\u547d\u4ee4\n          case DIVIDE:\n\n             // 0\u306b\u3088\u308b\u9664\u7b97\u306a\u3089\u3070\n             if (memory[operand] == 0)\n             {\n                 fprintf(stderr, \"*** \u30bc\u30ed\u3067\u5272\u308d\u3046\u3068\u3057\u305f ***\\n\"\n                                 \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n                 printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n                 writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n                 return -1;\n             }\n             accumulator /= memory[operand];\n             break;\n\n          // \u639b\u3051\u7b97\u547d\u4ee4\n          case MULTIPLY:\n             accumulator *= memory[operand];\n             break;\n\n          // \u7121\u6761\u4ef6\u5206\u5c90\u547d\u4ee4\n          case BRANCH:\n\n             // \u7121\u6761\u4ef6\u306b\u30b8\u30e3\u30f3\u30d7\n             instructionCounter = operand;\n             break;\n\n          // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306e\u3068\u304d\u5206\u5c90\u3059\u308b\u547d\u4ee4\n          case BRANCHENG:\n          \n             // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c\u8ca0\u306a\u3089\n             if (accumulator < 0)\n             {\n                 // \u30b8\u30e3\u30f3\u30d7\u5148\u3092\u683c\u7d0d\n                 instructionCounter = operand;\n             }\n\n          // \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u304c0\u306e\u3068\u304d\u5206\u5c90\u3059\u308b\u547d\u4ee4\n          case BRANCHZERO:\n             if (accumulator == 0)\n             {\n                 instructionCounter = operand;\n             }\n\n          // \u505c\u6b62\u547d\u4ee4\n          case HALT:\n             endFlag = 1;\n             printf(\"*** Simpletron\u306f\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\"); \n             printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory); \n             writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);           \n             break;\n \n          // \u4e0d\u6b63\u306a\u547d\u4ee4\n          default:\n             fprintf(stderr, \"*** \u4e0d\u6b63\u306a\u547d\u4ee4\u30b3\u30fc\u30c9 ***\\n\"\n                     \"*** Simpletron\u306f\u4ee5\u4e0a\u7d42\u4e86\u3057\u307e\u3057\u305f ***\\n\\n\");\n             printDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);\n             \n             writeDamp(accumulator, instructionCounter, instructionRegister, operationCode, operand, memory);                 \n             return -1;         \n        }\n    }\n    getch();\n\n    return 0;\n}\n\n// \u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid printDamp(int accu, int instructionC, int instructionR, int operation, int operand, int m[])\n{\n     int i, j;\n\n\n     printf(\"\u30ec\u30b8\u30b9\u30bf:                  \\n\");\n     printf(\"\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf %+05d          \\n\", accu);\n     printf(\"\u547d\u4ee4\u30ab\u30a6\u30f3\u30bf      %02d          \\n\", instructionC);\n     printf(\"\u547d\u4ee4\u30ec\u30b8\u30b9\u30bf   %+5d          \\n\", instructionR);\n     printf(\"\u547d\u4ee4\u30b3\u30fc\u30c9        %02d          \\n\", operation);\n     printf(\"\u30aa\u30da\u30e9\u30f3\u30c9        %02d          \\n\\n\\n\", operand);\n     printf(\"\u30e1\u30e2\u30ea:                      \\n\");\n     printf(\"   \");\n  \n     for (i = 0; i < 10; i++)\n     {\n         printf(\"%5d \", i);  \n     }\n     printf(\"\\n\");\n\n     for (i = 0; i < 100; i += 10)\n     {\n         printf(\"%2d \", i);\n   \n         for (j = i; j < i + 10; j++)\n         {\n             printf(\"%+05d \", m[j]);\n         }\n         printf(\"\\n\");\n     }\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3068\u30e1\u30e2\u30ea\u306e\u5185\u5bb9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u95a2\u6570\nvoid writeDamp(int accu, int instructionC, int instructionR, int operation, int operand, int m[])\n{\n     int i, j;\n     FILE *writePtr;\n\n\n     if ((writePtr = fopen(\"dmap\", \"w\")) == NULL)\n     {\n          fprintf(stderr, \"writeDampError\\n\");\n          exit(-1);\n     }\n\n     fprintf(writePtr, \"\u30ec\u30b8\u30b9\u30bf:                  \\n\");\n     fprintf(writePtr, \"\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf %+05d          \\n\", accu);\n     fprintf(writePtr, \"\u547d\u4ee4\u30ab\u30a6\u30f3\u30bf      %02d          \\n\", instructionC);\n     fprintf(writePtr, \"\u547d\u4ee4\u30ec\u30b8\u30b9\u30bf   %+5d          \\n\", instructionR);\n     fprintf(writePtr, \"\u547d\u4ee4\u30b3\u30fc\u30c9        %02d          \\n\", operation);\n     fprintf(writePtr, \"\u30aa\u30da\u30e9\u30f3\u30c9        %02d          \\n\\n\\n\", operand);\n     fprintf(writePtr, \"\u30e1\u30e2\u30ea:                      \\n\");\n     fprintf(writePtr, \"   \");\n  \n     for (i = 0; i < 10; i++)\n     {\n         fprintf(writePtr, \"%5d \", i);  \n     }\n     fprintf(writePtr, \"\\n\");\n\n     for (i = 0; i < 100; i += 10)\n     {\n         fprintf(writePtr, \"%2d \", i);\n   \n         for (j = i; j < i + 10; j++)\n         {\n             fprintf(writePtr, \"%+05d \", m[j]);\n         }\n         fprintf(writePtr, \"\\n\");\n     }\n}\n\n\n```\n\n\u30dd\u30fc\u30bf\u30eb\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\nhttp://qiita.com/ynakamura/items/84efeab3c6267ce7ac67\n\n", "tags": ["C\u8a00\u8a9e", "\u30c0\u30a4\u30c6\u30ebC", "\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c", "\u4eee\u60f3\u30de\u30b7\u30f3"]}