{"context": "Kotlin\u3092\u52c9\u5f37\u3057\u305f\u3064\u3044\u3067\u306b\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u63cf\u753b\u3059\u308b\u306b\u3042\u305f\u3063\u3066Processing\u3092\u7528\u3044\u307e\u3057\u305f\u30021\n\n\u5143\u30cd\u30bf\n\n[Proccessing]\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\n\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\u300d\u4e00\u89a7\n\n\u6642\u4ee3\u9045\u308c\u3067\u3059\u304c\u3001Kotlin\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3002\u3002\u3002\n\u5185\u90e8\u7684\u306b\u306fProcessing\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u8a31\u3057\u3066\u304f\u3060\u3055\u3044><\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nshida.kt\nimport processing.core.PApplet\n\ndata class vec2(val x: Float, val y: Float)\n\nclass ShidaApp: PApplet() {\n    private val N = 20\n    private val scale = 600f\n\n    override fun settings() {\n        size(600, 600, P2D)\n    }\n\n    override fun setup() {\n        background(255)\n        stroke(0f, 128f, 0f)\n        rec(N, vec2(0f, 0f))\n    }\n\n    fun f1(v: vec2): vec2 = vec2(0.836f * v.x + 0.044f * v.y, -0.044f * v.x + 0.836f * v.y + 0.169f)\n    fun f2(v: vec2): vec2 = vec2(-0.141f * v.x + 0.302f * v.y, 0.302f * v.x + 0.141f * v.y + 0.127f)\n    fun f3(v: vec2): vec2 = vec2(0.141f * v.x - 0.302f * v.y, 0.302f * v.x + 0.141f * v.y + 0.169f)\n    fun f4(v: vec2): vec2 = vec2(0f, 0.175337f * v.y)\n\n    fun rec(i: Int, v: vec2) {\n        if (i > 0) {\n            rec(i - 1, f1(v))\n            if (random(3f) < 1f) rec(i - 1, f2(v))\n            if (random(3f) < 1f) rec(i - 1, f3(v))\n            if (random(3f) < 1f) rec(i - 1, f4(v))\n        } else {\n            point(width / 2f + v.x * scale, height - v.y * scale)\n        }\n    }\n\n    fun run(args: Array<String>) = main(\"ShidaApp\")\n}\n\nfun main(args : Array<String>) = ShidaApp().run(args)\n\n\n\n\u753b\u50cf\n\n\n\n\n\n\u53c2\u8003\u8a18\u4e8b: Processing\u3092IntelliJ IDEA+Kotlin\u3067\u66f8\u304f\u00a0\u21a9\n\n\n\nKotlin\u3092\u52c9\u5f37\u3057\u305f\u3064\u3044\u3067\u306b\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u63cf\u753b\u3059\u308b\u306b\u3042\u305f\u3063\u3066Processing\u3092\u7528\u3044\u307e\u3057\u305f\u3002[^1]\n[^1]: \u53c2\u8003\u8a18\u4e8b: [Processing\u3092IntelliJ IDEA+Kotlin\u3067\u66f8\u304f](http://qiita.com/nonsako/items/c193b2eddd9f38bd7844)\n\n# \u5143\u30cd\u30bf\n- [[Proccessing]\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b](http://qiita.com/qt-luigi/items/b22204c7ef73260324bd)\n- [\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3059\u308b\u300d\u4e00\u89a7](http://qiita.com/qt-luigi/items/b22204c7ef73260324bd)\n\n\u6642\u4ee3\u9045\u308c\u3067\u3059\u304c\u3001Kotlin\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3002\u3002\u3002\n\u5185\u90e8\u7684\u306b\u306fProcessing\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u8a31\u3057\u3066\u304f\u3060\u3055\u3044><\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```Kotlin:shida.kt\nimport processing.core.PApplet\n\ndata class vec2(val x: Float, val y: Float)\n\nclass ShidaApp: PApplet() {\n    private val N = 20\n    private val scale = 600f\n\n    override fun settings() {\n        size(600, 600, P2D)\n    }\n\n    override fun setup() {\n        background(255)\n        stroke(0f, 128f, 0f)\n        rec(N, vec2(0f, 0f))\n    }\n\n    fun f1(v: vec2): vec2 = vec2(0.836f * v.x + 0.044f * v.y, -0.044f * v.x + 0.836f * v.y + 0.169f)\n    fun f2(v: vec2): vec2 = vec2(-0.141f * v.x + 0.302f * v.y, 0.302f * v.x + 0.141f * v.y + 0.127f)\n    fun f3(v: vec2): vec2 = vec2(0.141f * v.x - 0.302f * v.y, 0.302f * v.x + 0.141f * v.y + 0.169f)\n    fun f4(v: vec2): vec2 = vec2(0f, 0.175337f * v.y)\n\n    fun rec(i: Int, v: vec2) {\n        if (i > 0) {\n            rec(i - 1, f1(v))\n            if (random(3f) < 1f) rec(i - 1, f2(v))\n            if (random(3f) < 1f) rec(i - 1, f3(v))\n            if (random(3f) < 1f) rec(i - 1, f4(v))\n        } else {\n            point(width / 2f + v.x * scale, height - v.y * scale)\n        }\n    }\n\n    fun run(args: Array<String>) = main(\"ShidaApp\")\n}\n\nfun main(args : Array<String>) = ShidaApp().run(args)\n```\n\n# \u753b\u50cf\n![shida.png](https://qiita-image-store.s3.amazonaws.com/0/90635/aacf0adb-5e33-391f-0475-9eec2b68b7c5.png)\n", "tags": ["Kotlin", "processing", "\u30b7\u30c0"]}