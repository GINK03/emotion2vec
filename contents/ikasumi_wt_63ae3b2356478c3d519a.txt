{"context": " More than 1 year has passed since last update.underscore\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u52c9\u5f37\u534a\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3002\n\n\u5229\u7528\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\nunderscore.js(v1.8.3)\n\n\u3068\u306f\n\nunderscorejs.org\u306ememoize\n\n\u3053\u3093\u306a\u8aac\u660e\u3002\n\n\n_.memoize(function, [hashFunction])\nMemoizes a given function by caching the computed result. \nUseful for speeding up slow-running computations. \nIf passed an optional hashFunction, it will be used to compute the hash key for storing the result, based on the arguments to the original function.\nThe default hashFunction just uses the first argument to the memoized function as the key.\nThe cache of memoized values is available as the cache property on the returned function.\n\n\nvar fibonacci = _.memoize(function(n) {\n  return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2);\n});\n\n\n\nmemoize\u306f\u8a08\u7b97\u3057\u305f\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u5b9f\u884c\u901f\u5ea6\u306e\u9045\u3044\u95a2\u6570\u3092\u9ad8\u901f\u5316\u3059\u308b\u306e\u306b\u4f7f\u3048\u307e\u3059\u3002\nhash key\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3001hashFunction\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6e21\u3059\u3068\u3001\u5143\u306e\u95a2\u6570\u306e\u5f15\u6570\u306b\u57fa\u3065\u3044\u3066\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ehashFunction\u306f\u30e1\u30e2\u5316\u3055\u308c\u305f\u95a2\u6570\u306ekey\u3068\u3057\u3066\u3001\u6700\u521d\u306e\u5f15\u6570\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u30e1\u30e2\u3055\u308c\u305f\u5024\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306f\u3001\u8fd4\u3055\u308c\u308b\u95a2\u6570\u306ecache property\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nunderscore.memoize\n\n\u30b3\u30fc\u30c9\u7684\u306b\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\nfunc\u3068hasher\u3092\u5f15\u6570\u306b\u3068\u308b\u3002\nmemoize\u3092\u5f15\u6570key\u306e\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\nmemoize.cache\u3092cache\u306b\u683c\u7d0d\u3059\u308b\u3002\naddress\u306bstring\u3068\u3057\u3066 hasher\u304c\u5b58\u5728\u3057\u305f\u3089hasher\u306bthis\u3068arguments\u3092\u3082\u3068\u306bapply\u3059\u308b\u3002\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306fkey\u3092\u683c\u7d0d\u3059\u308b\nchache\u304caddress\u3092\u6301\u3063\u3066\u3044\u305f\u5834\u5408\u3001cache[address]\u306bfunc.apply\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u3002\u305d\u306e\u5f8c\u3001cache[address]\uff4d\u3092\u8fd4\u5374\u3059\u308b\u3002\nunderscore\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u52c9\u5f37\u534a\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3002\n\n\n\n##\u5229\u7528\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n[underscore.js(v1.8.3)](https://github.com/jashkenas/underscore/tree/1.8.3)\n\n\n##\u3068\u306f\n\n\n###[underscorejs.org\u306ememoize](http://underscorejs.org/#memoize)\n\n\u3053\u3093\u306a\u8aac\u660e\u3002\n>####_.memoize(function, [hashFunction]) \n>Memoizes a given function by caching the computed result. \n>Useful for speeding up slow-running computations. \n>If passed an optional hashFunction, it will be used to compute the hash key for storing the result, based on the arguments to the original function.\n>The default hashFunction just uses the first argument to the memoized function as the key.\n>The cache of memoized values is available as the cache property on the returned function.\n\n```javascript\n\nvar fibonacci = _.memoize(function(n) {\n  return n < 2 ? n: fibonacci(n - 1) + fibonacci(n - 2);\n});\n\n```\n------------- \nmemoize\u306f\u8a08\u7b97\u3057\u305f\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u5b9f\u884c\u901f\u5ea6\u306e\u9045\u3044\u95a2\u6570\u3092\u9ad8\u901f\u5316\u3059\u308b\u306e\u306b\u4f7f\u3048\u307e\u3059\u3002\nhash key\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3001hashFunction\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6e21\u3059\u3068\u3001\u5143\u306e\u95a2\u6570\u306e\u5f15\u6570\u306b\u57fa\u3065\u3044\u3066\u5229\u7528\u3055\u308c\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ehashFunction\u306f\u30e1\u30e2\u5316\u3055\u308c\u305f\u95a2\u6570\u306ekey\u3068\u3057\u3066\u3001\u6700\u521d\u306e\u5f15\u6570\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u30e1\u30e2\u3055\u308c\u305f\u5024\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u306f\u3001\u8fd4\u3055\u308c\u308b\u95a2\u6570\u306ecache property\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\n###[underscore.memoize](https://github.com/jashkenas/underscore/blob/1.8.3/underscore.js#L751)\n\u30b3\u30fc\u30c9\u7684\u306b\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n\n```javascript\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n```\n\nfunc\u3068hasher\u3092\u5f15\u6570\u306b\u3068\u308b\u3002\nmemoize\u3092\u5f15\u6570key\u306e\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\nmemoize.cache\u3092cache\u306b\u683c\u7d0d\u3059\u308b\u3002\naddress\u306bstring\u3068\u3057\u3066 hasher\u304c\u5b58\u5728\u3057\u305f\u3089hasher\u306bthis\u3068arguments\u3092\u3082\u3068\u306bapply\u3059\u308b\u3002\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306fkey\u3092\u683c\u7d0d\u3059\u308b\nchache\u304caddress\u3092\u6301\u3063\u3066\u3044\u305f\u5834\u5408\u3001cache[address]\u306bfunc.apply\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u3002\u305d\u306e\u5f8c\u3001cache[address]\uff4d\u3092\u8fd4\u5374\u3059\u308b\u3002\n", "tags": ["JavaScript", "Underscore.js"]}