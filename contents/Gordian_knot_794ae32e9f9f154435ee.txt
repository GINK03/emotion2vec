{"context": "\u4eca\u56de\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\uff08MCMC\uff09\u306e\u4ee3\u8868\u4f8b\u3067\u3042\u308b\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30ac\u30a6\u30b9\u5206\u5e03\u3084\u4e00\u69d8\u5206\u5e03\u306a\u3069\u306e\u6709\u540d\u306a\u78ba\u7387\u5206\u5e03\u3060\u3051\u3067\u306a\u304f\u3001\u3082\u3063\u3068\u5f62\u304c\u8907\u96d1\u306a\u5206\u5e03\u304b\u3089\u3082\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u3067\u3059\u3002\n\n\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u3042\u308b\u78ba\u7387\u5206\u5e03$p(x)={1\\over Z_p}\\tilde{p}(x)$\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u898f\u683c\u5316\u5b9a\u6570$Z_p$\u306f\u5206\u304b\u3089\u306a\u304f\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3068\u304b\u3067\u78ba\u7387\u5206\u5e03\u3092\u6c42\u3081\u308b\u3068\u304d\u306b\u898f\u683c\u5316\u5b9a\u6570\u304c\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u5206\u304b\u3063\u3066\u3044\u308b\u306e\u306f\u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570$\\tilde{p}(\\cdot)$\u3060\u3051\u306a\u306e\u3067\u3053\u3053\u304b\u3089\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u63d0\u6848\u5206\u5e03\u3068\u547c\u3070\u308c\u308b\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u308b\u5225\u306e\u78ba\u7387\u5206\u5e03\uff08\u4f8b\u3048\u3070\u3001\u30ac\u30a6\u30b9\u5206\u5e03\uff09\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u63d0\u6848\u5206\u5e03\u306f\u5bfe\u79f0\u306a\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u306e\u6d41\u308c\n1. \u521d\u671f\u5024$x_1$\u3092\u8a2d\u5b9a\n2. $x_i$\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u63d0\u6848\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u5019\u88dc\u4e00\u3064\uff08$x^*$\uff09\u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b\n3. $\\min(1, {\\tilde{p}(x^*)\\over\\tilde{p}(x_i)})$\u306e\u78ba\u7387\u3067$x_{i+1}=x^*$\u3068\u3057\u3001\u53d7\u7406\u3055\u308c\u306a\u304b\u3063\u305f\u3089$x_{i+1}=x_i$\u3068\u3059\u308b\n4. \u30b9\u30c6\u30c3\u30d7\uff12\u3001\uff13\u3092\u7e70\u308a\u8fd4\u3057\u3066\u5f97\u3089\u308c\u305f\u7cfb\u5217$\\{x_n\\}_{n=1}^N$\u3092\u78ba\u7387\u5206\u5e03$p(x)$\u304b\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3059\u308b\n\u3068\u3044\u3046\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u624b\u6cd5\u3067\u3059\u3002\n\u3053\u306e\u624b\u9806\u3067\u5f97\u3089\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u7cfb\u5217\u306f\u305d\u306e\u524d\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u975e\u5e38\u306b\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u72ec\u7acb\u306a\u30b5\u30f3\u30d7\u30eb\u304c\u6b32\u3057\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u7cfb\u5217\u306e\u3046\u3061M\u500b\u3054\u3068\u306e\u30b5\u30f3\u30d7\u30eb\u3060\u3051\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u3067\u76f8\u95a2\u304c\u5f31\u307e\u308a\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\nmatplotlib\u3068numpy\u3092\u4f7f\u7528\u3057\u307e\u3059\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\nclass Metropolis(object):\n\n    def __init__(self, func, ndim, proposal_std=1., sample_rate=1):\n\n        # \u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\n        self.func = func\n\n        # \u30c7\u30fc\u30bf\u306e\u6b21\u5143\n        self.ndim = ndim\n\n        # \u63d0\u6848\u5206\u5e03(\u30ac\u30a6\u30b9\u5206\u5e03)\u306e\u6a19\u6e96\u504f\u5dee\n        self.proposal_std = proposal_std\n\n        # \u30b5\u30f3\u30d7\u30eb\u3092\u9593\u5f15\u304f\n        self.sample_rate = sample_rate\n\n    # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n    def __call__(self, sample_size):\n        # \u521d\u671f\u5024\u306e\u8a2d\u5b9a\n        x = np.zeros(self.ndim)\n\n        # \u30b5\u30f3\u30d7\u30eb\u3092\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\n        samples = []\n\n        for i in xrange(sample_size * self.sample_rate):\n            # \u63d0\u6848\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n            x_new = np.random.normal(scale=self.proposal_std, size=self.ndim)\n            x_new += x\n\n            # PRML\u5f0f(11.33) \u30b5\u30f3\u30d7\u30eb\u5019\u88dc\u304c\u53d7\u7406\u3055\u308c\u308b\u78ba\u7387\u3092\u8a08\u7b97\n            accept_prob = self.func(x_new) / self.func(x)\n            if accept_prob > np.random.uniform():\n                x = x_new\n\n            # \u30b5\u30f3\u30d7\u30eb\u3092\u4fdd\u6301\n            if i % self.sample_rate == 0:\n                samples.append(x)\n\n        return np.array(samples)\n\n\n\u30e1\u30a4\u30f3\u95a2\u6570\ndef main():\n\n    # \u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\n    def func(x):\n        return np.exp(-0.5 * np.sum(x ** 2, axis=-1) / 5.)\n\n    # \u307e\u305a\u4e00\u6b21\u5143\u7a7a\u9593\u3067\u8a66\u3059\n    print \"one dimensional\"\n\n    # \u63d0\u6848\u5206\u5e03\u306e\u6a19\u6e96\u504f\u5dee\u30922\u3001\u30b5\u30f3\u30d7\u30eb\u3092\uff11\uff10\u500b\u3054\u3068\u306b\u9593\u5f15\u304f\n    sampler = Metropolis(func, ndim=1, proposal_std=2., sample_rate=10)\n    # \u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u3092\u4f7f\u3063\u3066\uff11\uff10\uff10\u500b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n    samples = sampler(sample_size=100)\n\n    # \u30b5\u30f3\u30d7\u30eb\u5e73\u5747\u3068\u5206\u6563\u3092\u78ba\u8a8d\n    print \"mean\", np.mean(samples)\n    print \"var\", np.var(samples, ddof=1)\n\n    # \u30b5\u30f3\u30d7\u30eb\u7d50\u679c\u3092\u56f3\u793a\n    x = np.linspace(-10, 10, 100)[:, None]\n    y = func(x) / np.sqrt(2 * np.pi * 5.)\n    plt.plot(x, y, label=\"probability density function\")\n    plt.hist(samples, normed=True, alpha=0.5, label=\"normalized sample histogram\")\n    plt.scatter(samples, np.random.normal(scale=0.001, size=len(samples)), label=\"samples\")\n    plt.xlim(-10, 10)\n    plt.show()\n\n    # \u6b21\u306f\u4e8c\u6b21\u5143\u7a7a\u9593\u3067\u8a66\u3059\n    print \"\\ntwo dimensional\"\n\n    sampler = Metropolis(func, 2, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\\n\", np.mean(samples, axis=0)\n    print \"covariance\\n\", np.cov(samples, rowvar=False)\n\n    x, y = np.meshgrid(\n        np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n    z = func(np.array([x, y]).reshape(2, -1).T).reshape(100, 100)\n    plt.contour(x, y, z)\n    plt.scatter(samples[:, 0], samples[:, 1])\n    plt.xlim(-10, 10)\n    plt.ylim(-10, 10)\n    plt.show()\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\n\nmcmc.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass Metropolis(object):\n\n    def __init__(self, func, ndim, proposal_std=1., sample_rate=1):\n        self.func = func\n        self.ndim = ndim\n        self.proposal_std = proposal_std\n        self.sample_rate = sample_rate\n\n    def __call__(self, sample_size):\n        x = np.zeros(self.ndim)\n        samples = []\n        for i in xrange(sample_size * self.sample_rate):\n            x_new = np.random.normal(scale=self.proposal_std, size=self.ndim)\n            x_new += x\n            accept_prob = self.func(x_new) / self.func(x)\n            if accept_prob > np.random.uniform():\n                x = x_new\n            if i % self.sample_rate == 0:\n                samples.append(x)\n        assert len(samples) == sample_size\n        return np.array(samples)\n\n\ndef main():\n\n    def func(x):\n        return np.exp(-0.5 * np.sum(x ** 2, axis=-1) / 5.)\n\n    print \"one dimensional\"\n\n    sampler = Metropolis(func, ndim=1, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\", np.mean(samples)\n    print \"var\", np.var(samples, ddof=1)\n\n    x = np.linspace(-10, 10, 100)[:, None]\n    y = func(x) / np.sqrt(2 * np.pi * 5.)\n    plt.plot(x, y, label=\"probability density function\")\n    plt.hist(samples, normed=True, alpha=0.5, label=\"normalized sample histogram\")\n    plt.scatter(samples, np.random.normal(scale=0.001, size=len(samples)), label=\"samples\")\n    plt.xlim(-10, 10)\n    plt.show()\n\n    print \"\\ntwo dimensional\"\n\n    sampler = Metropolis(func, 2, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\\n\", np.mean(samples, axis=0)\n    print \"covariance\\n\", np.cov(samples, rowvar=False)\n\n    x, y = np.meshgrid(\n        np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n    z = func(np.array([x, y]).reshape(2, -1).T).reshape(100, 100)\n    plt.contour(x, y, z)\n    plt.scatter(samples[:, 0], samples[:, 1])\n    plt.xlim(-10, 10)\n    plt.ylim(-10, 10)\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\u7d50\u679c\n\u4e0b\u306e\u56f3\u306f\u305d\u308c\u305e\u308c\u4e00\u6b21\u5143\u3001\u4e8c\u6b21\u5143\u7a7a\u9593\u3067\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u7d50\u679c\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u7b49\u9ad8\u7dda\u306f\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u306e\u3082\u306e\u3067\u3059\u3002\n\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u51fa\u529b\u7d50\u679c\n\nterminal\none dimensional\nmean 0.427558835137\nvar 5.48086205252\n\ntwo dimensional\nmean\n[-0.04893427 -0.04494551]\ncovariance\n[[ 5.02950816 -0.02217824]\n [-0.02217824  5.43658538]]\n[Finished in 1.8s]\n\n\n\u30b5\u30f3\u30d7\u30eb\u5e73\u5747\u3068\u5206\u6563\u304c\u3069\u3061\u3089\u306e\u5834\u5408\u3082\u305d\u308c\u305e\u308c\u6bcd\u5e73\u5747\u3068\u6bcd\u5206\u6563\u306b\u8fd1\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u7d42\u308f\u308a\u306b\n\u4ed6\u306b\u3082\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u306a\u3069\u306e\u624b\u6cd5\u3082\u3042\u308b\u306e\u3067\u3001\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u305d\u308c\u3089\u3082\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\uff08MCMC\uff09\u306e\u4ee3\u8868\u4f8b\u3067\u3042\u308b\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30ac\u30a6\u30b9\u5206\u5e03\u3084\u4e00\u69d8\u5206\u5e03\u306a\u3069\u306e\u6709\u540d\u306a\u78ba\u7387\u5206\u5e03\u3060\u3051\u3067\u306a\u304f\u3001\u3082\u3063\u3068\u5f62\u304c\u8907\u96d1\u306a\u5206\u5e03\u304b\u3089\u3082\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u3067\u3059\u3002\n\n# \u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u3042\u308b\u78ba\u7387\u5206\u5e03$p(x)={1\\over Z_p}\\tilde{p}(x)$\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u898f\u683c\u5316\u5b9a\u6570$Z_p$\u306f\u5206\u304b\u3089\u306a\u304f\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3068\u304b\u3067\u78ba\u7387\u5206\u5e03\u3092\u6c42\u3081\u308b\u3068\u304d\u306b\u898f\u683c\u5316\u5b9a\u6570\u304c\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\n\u5206\u304b\u3063\u3066\u3044\u308b\u306e\u306f\u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570$\\tilde{p}(\\cdot)$\u3060\u3051\u306a\u306e\u3067\u3053\u3053\u304b\u3089\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u63d0\u6848\u5206\u5e03\u3068\u547c\u3070\u308c\u308b\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u308b\u5225\u306e\u78ba\u7387\u5206\u5e03\uff08\u4f8b\u3048\u3070\u3001\u30ac\u30a6\u30b9\u5206\u5e03\uff09\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u63d0\u6848\u5206\u5e03\u306f\u5bfe\u79f0\u306a\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n\u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u306e\u6d41\u308c\n1. \u521d\u671f\u5024$x_1$\u3092\u8a2d\u5b9a\n2. $x_i$\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u63d0\u6848\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u5019\u88dc\u4e00\u3064\uff08$x^\\*$\uff09\u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b\n3. $\\min(1, {\\tilde{p}(x^*)\\over\\tilde{p}(x_i)})$\u306e\u78ba\u7387\u3067$x_{i+1}=x^\\*$\u3068\u3057\u3001\u53d7\u7406\u3055\u308c\u306a\u304b\u3063\u305f\u3089$x_{i+1}=x_i$\u3068\u3059\u308b\n4. \u30b9\u30c6\u30c3\u30d7\uff12\u3001\uff13\u3092\u7e70\u308a\u8fd4\u3057\u3066\u5f97\u3089\u308c\u305f\u7cfb\u5217$\\\\{x_n\\\\}_{n=1}^N$\u3092\u78ba\u7387\u5206\u5e03$p(x)$\u304b\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3059\u308b\n\u3068\u3044\u3046\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u624b\u6cd5\u3067\u3059\u3002\n\n\u3053\u306e\u624b\u9806\u3067\u5f97\u3089\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u7cfb\u5217\u306f\u305d\u306e\u524d\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u975e\u5e38\u306b\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u72ec\u7acb\u306a\u30b5\u30f3\u30d7\u30eb\u304c\u6b32\u3057\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u7cfb\u5217\u306e\u3046\u3061M\u500b\u3054\u3068\u306e\u30b5\u30f3\u30d7\u30eb\u3060\u3051\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u3067\u76f8\u95a2\u304c\u5f31\u307e\u308a\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\nmatplotlib\u3068numpy\u3092\u4f7f\u7528\u3057\u307e\u3059\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n\n## \u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\n\n```python\nclass Metropolis(object):\n\n    def __init__(self, func, ndim, proposal_std=1., sample_rate=1):\n\n        # \u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\n        self.func = func\n\n        # \u30c7\u30fc\u30bf\u306e\u6b21\u5143\n        self.ndim = ndim\n\n        # \u63d0\u6848\u5206\u5e03(\u30ac\u30a6\u30b9\u5206\u5e03)\u306e\u6a19\u6e96\u504f\u5dee\n        self.proposal_std = proposal_std\n\n        # \u30b5\u30f3\u30d7\u30eb\u3092\u9593\u5f15\u304f\n        self.sample_rate = sample_rate\n\n    # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n    def __call__(self, sample_size):\n        # \u521d\u671f\u5024\u306e\u8a2d\u5b9a\n        x = np.zeros(self.ndim)\n\n        # \u30b5\u30f3\u30d7\u30eb\u3092\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\n        samples = []\n\n        for i in xrange(sample_size * self.sample_rate):\n            # \u63d0\u6848\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n            x_new = np.random.normal(scale=self.proposal_std, size=self.ndim)\n            x_new += x\n\n            # PRML\u5f0f(11.33) \u30b5\u30f3\u30d7\u30eb\u5019\u88dc\u304c\u53d7\u7406\u3055\u308c\u308b\u78ba\u7387\u3092\u8a08\u7b97\n            accept_prob = self.func(x_new) / self.func(x)\n            if accept_prob > np.random.uniform():\n                x = x_new\n\n            # \u30b5\u30f3\u30d7\u30eb\u3092\u4fdd\u6301\n            if i % self.sample_rate == 0:\n                samples.append(x)\n\n        return np.array(samples)\n```\n\n## \u30e1\u30a4\u30f3\u95a2\u6570\n\n```python\ndef main():\n\n    # \u898f\u683c\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\n    def func(x):\n        return np.exp(-0.5 * np.sum(x ** 2, axis=-1) / 5.)\n\n    # \u307e\u305a\u4e00\u6b21\u5143\u7a7a\u9593\u3067\u8a66\u3059\n    print \"one dimensional\"\n\n    # \u63d0\u6848\u5206\u5e03\u306e\u6a19\u6e96\u504f\u5dee\u30922\u3001\u30b5\u30f3\u30d7\u30eb\u3092\uff11\uff10\u500b\u3054\u3068\u306b\u9593\u5f15\u304f\n    sampler = Metropolis(func, ndim=1, proposal_std=2., sample_rate=10)\n    # \u30e1\u30c8\u30ed\u30dd\u30ea\u30b9\u6cd5\u3092\u4f7f\u3063\u3066\uff11\uff10\uff10\u500b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n    samples = sampler(sample_size=100)\n\n    # \u30b5\u30f3\u30d7\u30eb\u5e73\u5747\u3068\u5206\u6563\u3092\u78ba\u8a8d\n    print \"mean\", np.mean(samples)\n    print \"var\", np.var(samples, ddof=1)\n\n    # \u30b5\u30f3\u30d7\u30eb\u7d50\u679c\u3092\u56f3\u793a\n    x = np.linspace(-10, 10, 100)[:, None]\n    y = func(x) / np.sqrt(2 * np.pi * 5.)\n    plt.plot(x, y, label=\"probability density function\")\n    plt.hist(samples, normed=True, alpha=0.5, label=\"normalized sample histogram\")\n    plt.scatter(samples, np.random.normal(scale=0.001, size=len(samples)), label=\"samples\")\n    plt.xlim(-10, 10)\n    plt.show()\n\n    # \u6b21\u306f\u4e8c\u6b21\u5143\u7a7a\u9593\u3067\u8a66\u3059\n    print \"\\ntwo dimensional\"\n\n    sampler = Metropolis(func, 2, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\\n\", np.mean(samples, axis=0)\n    print \"covariance\\n\", np.cov(samples, rowvar=False)\n\n    x, y = np.meshgrid(\n        np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n    z = func(np.array([x, y]).reshape(2, -1).T).reshape(100, 100)\n    plt.contour(x, y, z)\n    plt.scatter(samples[:, 0], samples[:, 1])\n    plt.xlim(-10, 10)\n    plt.ylim(-10, 10)\n    plt.show()\n```\n\n## \u30b3\u30fc\u30c9\u5168\u4f53\n\n```python:mcmc.py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass Metropolis(object):\n\n    def __init__(self, func, ndim, proposal_std=1., sample_rate=1):\n        self.func = func\n        self.ndim = ndim\n        self.proposal_std = proposal_std\n        self.sample_rate = sample_rate\n\n    def __call__(self, sample_size):\n        x = np.zeros(self.ndim)\n        samples = []\n        for i in xrange(sample_size * self.sample_rate):\n            x_new = np.random.normal(scale=self.proposal_std, size=self.ndim)\n            x_new += x\n            accept_prob = self.func(x_new) / self.func(x)\n            if accept_prob > np.random.uniform():\n                x = x_new\n            if i % self.sample_rate == 0:\n                samples.append(x)\n        assert len(samples) == sample_size\n        return np.array(samples)\n\n\ndef main():\n\n    def func(x):\n        return np.exp(-0.5 * np.sum(x ** 2, axis=-1) / 5.)\n\n    print \"one dimensional\"\n\n    sampler = Metropolis(func, ndim=1, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\", np.mean(samples)\n    print \"var\", np.var(samples, ddof=1)\n\n    x = np.linspace(-10, 10, 100)[:, None]\n    y = func(x) / np.sqrt(2 * np.pi * 5.)\n    plt.plot(x, y, label=\"probability density function\")\n    plt.hist(samples, normed=True, alpha=0.5, label=\"normalized sample histogram\")\n    plt.scatter(samples, np.random.normal(scale=0.001, size=len(samples)), label=\"samples\")\n    plt.xlim(-10, 10)\n    plt.show()\n\n    print \"\\ntwo dimensional\"\n\n    sampler = Metropolis(func, 2, proposal_std=2., sample_rate=10)\n    samples = sampler(sample_size=100)\n\n    print \"mean\\n\", np.mean(samples, axis=0)\n    print \"covariance\\n\", np.cov(samples, rowvar=False)\n\n    x, y = np.meshgrid(\n        np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n    z = func(np.array([x, y]).reshape(2, -1).T).reshape(100, 100)\n    plt.contour(x, y, z)\n    plt.scatter(samples[:, 0], samples[:, 1])\n    plt.xlim(-10, 10)\n    plt.ylim(-10, 10)\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# \u7d50\u679c\n\u4e0b\u306e\u56f3\u306f\u305d\u308c\u305e\u308c\u4e00\u6b21\u5143\u3001\u4e8c\u6b21\u5143\u7a7a\u9593\u3067\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u7d50\u679c\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n![result1d.png](https://qiita-image-store.s3.amazonaws.com/0/148017/a629d3e1-1f2f-dabf-ad20-00638849c236.png)\n![result2d.png](https://qiita-image-store.s3.amazonaws.com/0/148017/c08f60fd-593b-7cc8-b4e0-b9bdb9b4bdec.png)\n\u7b49\u9ad8\u7dda\u306f\u78ba\u7387\u5bc6\u5ea6\u95a2\u6570\u306e\u3082\u306e\u3067\u3059\u3002\n\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u51fa\u529b\u7d50\u679c\n\n```:terminal\none dimensional\nmean 0.427558835137\nvar 5.48086205252\n\ntwo dimensional\nmean\n[-0.04893427 -0.04494551]\ncovariance\n[[ 5.02950816 -0.02217824]\n [-0.02217824  5.43658538]]\n[Finished in 1.8s]\n```\n\u30b5\u30f3\u30d7\u30eb\u5e73\u5747\u3068\u5206\u6563\u304c\u3069\u3061\u3089\u306e\u5834\u5408\u3082\u305d\u308c\u305e\u308c\u6bcd\u5e73\u5747\u3068\u6bcd\u5206\u6563\u306b\u8fd1\u3044\u5024\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u7d42\u308f\u308a\u306b\n\u4ed6\u306b\u3082\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u306a\u3069\u306e\u624b\u6cd5\u3082\u3042\u308b\u306e\u3067\u3001\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u305d\u308c\u3089\u3082\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n", "tags": ["PRML", "\u6a5f\u68b0\u5b66\u7fd2", "Python"]}