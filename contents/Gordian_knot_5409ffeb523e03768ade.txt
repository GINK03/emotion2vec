{"context": "\u4eca\u56de\u306f\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u3088\u308a\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u9811\u5065\u306a\u6027\u8cea\u3092\u6301\u3064\u5206\u5e03\u3068\u3057\u3066\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3088\u304f\u3088\u304f\u601d\u3044\u51fa\u305b\u3070\u3053\u306e\u5206\u5e03\u3092\u7528\u3044\u305f\u3053\u3068\u304c\u5168\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u826f\u3044\u6a5f\u4f1a\u3067\u3059\u3057\u305d\u306e\u9811\u5065\u6027\u3092\u5b9f\u969b\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\u4e00\u56de\u76ee\u306ePRML\u5b9f\u88c5\u306e\u3068\u304d\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u4ee5\u5916\u306f\u6975\u529bnumpy\u3060\u3051\u3068\u3044\u3046\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u3068\u3044\u3046\u3042\u307e\u308a\u99b4\u67d3\u307f\u306e\u306a\u3044\u95a2\u6570\u304c\u51fa\u3066\u304d\u305f\u305f\u3081scipy\u3082\u4f7f\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u4f01\u753b\uff12\u56de\u76ee\u306b\u3057\u3066\u65e9\u3005\u306bnumpy\u4ee5\u5916\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3068\u306a\u308a\u3001\u5148\u304c\u601d\u3044\u3084\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u3001\u30ac\u30a6\u30b9\u5206\u5e03N(x|\u03bc,\u03c4\u22121)\\mathcal{N}(x|\\mu,\\tau^{-1})\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u03c4\\tau\u306e\u5171\u5f79\u4e8b\u524d\u5206\u5e03\u3068\u3057\u3066\u30ac\u30f3\u30de\u5206\u5e03Gam(\u03c4|a,b){\\rm Gam}(\\tau|a,b)\u3092\u7528\u3044\u3001\u7cbe\u5ea6\u3092\u7a4d\u5206\u6d88\u53bb\u3057\u3066\u5f97\u3089\u308c\u308b\u5206\u5e03\u3067\u3059\u3002\u3053\u306e\u3053\u3068\u304b\u3089\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u3001\u5e73\u5747\u306f\u540c\u3058\u3060\u304c\u5206\u6563\u306e\u7570\u306a\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7121\u9650\u500b\u8db3\u3057\u5408\u308f\u305b\u305f\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3060\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\u3002\np(x|\u03bc,a,b)=\u222b\u221e0N(x|\u03bc,\u03c4\u22121)Gam(\u03c4|a,b)d\u03c4p(x|\\mu,a,b)=\\int^{\\infty}_0 \\mathcal{N}(x|\\mu,\\tau^{-1}){\\rm Gam}(\\tau|a,b){\\rm d}\\tau\u3053\u306e\u5f8c\u3001\u03bd=2a,\u03bb=a/b\\nu=2a,\\lambda=a/b\u3068\u3059\u308b\u3068\u898b\u308b\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\nSt(x|\u03bc,\u03bb,\u03bd)=\u0393(\u03bd/2+1/2)\u0393(\u03bd/2)(\u03bb\u03c0\u03bd)1/2[1+\u03bb(x\u2212\u03bc)2\u03bd]\u2212\u03bd/2\u22121/2{\\rm St}(x|\\mu,\\lambda,\\nu)={\\Gamma(\\nu/2+1/2)\\over\\Gamma(\\nu/2)}\\left({\\lambda\\over\\pi\\nu}\\right)^{1/2}\\left[1+{\\lambda(x-\\mu)^2\\over\\nu}\\right]^{-\\nu/2-1/2}\u5e7e\u3064\u304b\u306e\u70b9x\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u6700\u5c24\u63a8\u5b9a\u3092\u3057\u3066\u03bc,a,b\\mu,a,b(\u3082\u3057\u304f\u306f\u03bc,\u03bb,\u03bd\\mu,\\lambda,\\nu)\u3092\u63a8\u5b9a\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u306e\u6700\u5c24\u63a8\u5b9a\u306e\u5834\u5408\u3068\u306f\u9055\u3063\u3066\u9589\u5f62\u5f0f\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u4e0a\u306eSt(x|\u03bc,\u03bb,\u03bd){\\rm St}(x|\\mu,\\lambda,\\nu)\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u5fae\u5206\u3057\u3066\u3082\u5168\u7136\u7dba\u9e97\u306a\u5f62\u306b\u306f\u306a\u3063\u3066\u304f\u308c\u306a\u3055\u305d\u3046\u3067\u3059\u3002PRML\u3067\u306f\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u306b\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(PRML\u6f14\u7fd2\u554f\u984c12.24)\u3092\u4f7f\u3046\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306f\u89b3\u6e2c\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u6cc1\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\u3059\u308b\u306e\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u3067\u3042\u308a\u3001PRML\u306e\u7b2c\uff19\u7ae0\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u03c4\\tau\u3092\u6f5c\u5728\u5909\u6570\u3068\u3057\u3066EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u9069\u7528\u3057\u305f\u3068\u304d\u306e\u8a08\u7b97\u5f0f\u304cPRML\u306b\u306f\u8f09\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5c11\u3057\u8a08\u7b97\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u9593\u9055\u3044\u306a\u3069\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\nE\u30b9\u30c6\u30c3\u30d7\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eE(Expectation)\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf(\u03bc,a,b\\mu,a,b)\u3092\u56fa\u5b9a\u3057\u3066\u3001\u5404\u30b5\u30f3\u30d7\u30eb\u70b9xix_i\u304c\u3069\u3093\u306a\u5206\u6563\uff08\u3082\u3057\u304f\u306f\u7cbe\u5ea6\u03c4\\tau\uff09\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\np(\u03c4i|xi,\u03bc,a,b)=N(xi|\u03bc,\u03c4\u22121)Gam(\u03c4i|a,b)/const. \np(\\tau_i|x_i,\\mu,a,b) = \\mathcal{N}(x_i|\\mu,\\tau^{-1}){\\rm Gam}(\\tau_i|a,b)/const. \n\u4e8b\u524d\u5206\u5e03\u306b\u306f\u30ac\u30f3\u30de\u5206\u5e03\u3001\u5c24\u5ea6\u95a2\u6570\u306b\u306f\u30ac\u30a6\u30b9\u95a2\u6570\u3092\u7528\u3044\u305f\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u8a08\u7b97\u3059\u308b\u3068\u30ac\u30f3\u30de\u5206\u5e03Gam(\u03c4i|a+12,b+12(xi\u2212\u03bc)2){\\rm Gam}(\\tau_i|a+{1\\over2},b+{1\\over2}(x_i-\\mu)^2)\u304c\u4e8b\u5f8c\u5206\u5e03\u3068\u3057\u3066\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u306e\u4e8b\u5f8c\u5206\u5e03\u306e\u671f\u5f85\u5024\u3088\u308a\u03c4i=a+12b+12(xi\u2212\u03bc)2\\tau_i={a+{1\\over2}\\over b+{1\\over2}(x_i-\\mu)^2}\u3068\u3057\u3066\u5404\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u3064\u3044\u3066\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\nM\u30b9\u30c6\u30c3\u30d7\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eM(Maximization)\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u5b8c\u5168\u30c7\u30fc\u30bf{xi,\u03c4i}\\{x_i,\\tau_i\\}\u306b\u5bfe\u3057\u3066\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3092\u8a08\u7b97\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u03bc,a,b\\mu,a,b\u306b\u3064\u3044\u3066\u6700\u5927\u5316\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u03c4i\\tau_i\u306b\u306fE\u30b9\u30c6\u30c3\u30d7\u3067\u6c42\u307e\u3063\u305f\u3082\u306e\u3092\u7528\u3044\u307e\u3059\u3002\nN\u2211i=1lnp(xi,\u03c4i|\u03bc,a,b)=N\u2211i=1ln{N(xi|\u03bc,\u03c4\u22121i)Gam(\u03c4i|a,b)}\\sum_{i=1}^N\\ln p(x_i,\\tau_i|\\mu,a,b) = \\sum_{i=1}^N\\ln\\{\\mathcal{N}(x_i|\\mu,\\tau_i^{-1}){\\rm Gam}(\\tau_i|a,b)\\}\u3053\u308c\u3092\u8a08\u7b97\u3057\u3066\uff08\u81ea\u4fe1\u306a\u3044\uff09\u3001\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u629c\u304d\u51fa\u3057\u3066\u304f\u308b\u3068\u3001\n\u221212\u2211i\u03c4i(xi\u2212\u03bc)2+aNlnb\u2212Nln\u0393(a)+a\u2211iln\u03c4i\u2212b\u2211i\u03c4i-{1\\over2}\\sum_i\\tau_i(x_i-\\mu)^2 + aN\\ln b -N\\ln\\Gamma(a)+a\\sum_i\\ln\\tau_i - b\\sum_i\\tau_i\n\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5fae\u5206\u3057\u3066\u30a4\u30b3\u30fc\u30eb0\u3068\u304a\u3044\u3066\u65b9\u7a0b\u5f0f\u3092\u89e3\u304d\u307e\u3059\u3002\n\u03bc=\u2211i\u03c4ixi\u2211i\u03c4i\\mu = {\\sum_i\\tau_ix_i\\over\\sum_i\\tau_i}a=\u03c8\u22121(lnb+1N\u2211iln\u03c4i)a = \\psi^{-1}(\\ln b + {1\\over N}\\sum_i\\ln\\tau_i)b=aN\u2211i\u03c4ib = {aN\\over\\sum_i\\tau_i}a\u3067\u5fae\u5206\u3059\u308b\u3068\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u03c8(x)\\psi(x)\u304c\u3067\u3066\u304d\u307e\u3057\u305f\u3002\u3082\u3057\u305d\u306e\u95a2\u6570\u306e\u9006\u95a2\u6570\u304c\u3061\u3083\u3093\u3068\u5b9f\u5728\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u89e3\u3051\u307e\u3057\u305f\u304c\u3001numpy\u3068\u304bscipy\u306b\u306f\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u306e\u9006\u95a2\u6570\u306a\u3093\u3066\u306a\u3044\uff08\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u306fscipy\u306b\u3042\u308b\uff09\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u30d1\u30e9\u30e1\u30fc\u30bfa\u306b\u3064\u3044\u3066\u306f\u52fe\u914d\u6cd5\u3067\u5c11\u3057\u66f4\u65b0\u3059\u308b\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\u305d\u3082\u305d\u3082a,ba,b\u306e\u89e3\u3092\u898b\u308b\u3068\u304a\u4e92\u3044\u306b\u6df7\u3058\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e0a\u306e3\u3064\u306e\u5f0f\u3067\u306f\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u304a\u305d\u3089\u304f\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u304c\u5b8c\u5168\u306b\u306f\u306a\u3055\u308c\u306a\u3044\u5834\u5408\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4e00\u822c\u5316EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3076\u305d\u3046\u3067\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3046\u3068\u304d\u306b\u305f\u3044\u3066\u3044\u81ea\u7531\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u03bd(=2a)\\nu(=2a)\u3092\u4f55\u3089\u304b\u306e\u5024\u3067\u56fa\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3001M\u30b9\u30c6\u30c3\u30d7\u3092\u304d\u3063\u3061\u308a\u884c\u3046\u305f\u3081\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u81ea\u7531\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u56fa\u5b9a\u3059\u308c\u3070\u3001\u6b8b\u308b\u63a8\u5b9a\u5bfe\u8c61\u306f\u03bc,\u03bb\\mu,\\lambda\u3068\u306a\u3063\u3066\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u3082\u3068\u306b\u5c11\u3057\u8a02\u6b63\u3001\u88dc\u8db3\u3092\u3057\u307e\u3059\u3002\u672c\u6765\u306eE\u30b9\u30c6\u30c3\u30d7\u3067\u3042\u308c\u3070\u3001\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf \u03c4i\\tau_i\u306e\u4e8b\u5f8c\u5206\u5e03p(\u03c4i|xi,\u03bc,a,b)=Gam(\u03c4i|a+12,b+12(xi\u2212\u03bc)2)p(\\tau_i|x_i,\\mu,a,b) = {\\rm Gam}(\\tau_i|a+{1\\over2},b+{1\\over2}(x_i-\\mu)^2)\u3092\u8a08\u7b97\u3057\u305f\u90e8\u5206\u3067\u7d42\u308f\u308a\u3001\u305d\u306e\u3042\u3068\u306eM\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u5b8c\u5168\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570lnp(xi,\u03c4i|\u03bc,a,b)\\ln p(x_i,\\tau_i|\\mu,a,b)\u306e\u305d\u306e\u4e8b\u5f8c\u5206\u5e03\u306b\u3064\u3044\u3066\u306e\u671f\u5f85\u5024E[\u2211ilnp(xi,\u03c4i|\u03bc,a,b)]\\mathbb{E}[\\sum_i\\ln p(x_i,\\tau_i|\\mu,a,b)]\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u305d\u306e\u8a08\u7b97\u7d50\u679c\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3060\u3051\u629c\u304d\u51fa\u3059\u3068\u3001\u221212\u2211iE[\u03c4i](xi\u2212\u03bc)2+a\u2211iE[ln\u03c4i]+aNlnb\u2212b\u2211iE[\u03c4i]\u2212Nln\u0393(a)-{1\\over2}\\sum_i\\mathbb{E}[\\tau_i](x_i - \\mu)^2 + a\\sum_i\\mathbb{E}[\\ln\\tau_i] + aN\\ln b - b\\sum_i\\mathbb{E}[\\tau_i] - N\\ln\\Gamma(a)\u3001\u3068\u306a\u308a\u6700\u5927\u5316\u3059\u3079\u304d\u95a2\u6570\u306e\u5f62\u304c\u4e00\u90e8\u9055\u3063\u3066\u3044\u307e\u3059\u3002\u5143\u306e\u8a18\u4e8b\u306e\u65b9\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u671f\u5f85\u5024\u8a08\u7b97\u306b\u30b5\u30f3\u30d7\u30eb\u8fd1\u4f3cE[\u2211ilnp(xi,\u03c4i|\u03bc,a,b)]=\u2211ilnp(xi,\u03c4(sample)i|\u03bc,a,b)\\mathbb{E}[\\sum_i\\ln p(x_i,\\tau_i|\\mu,a,b)]=\\sum_i\\ln p(x_i,\\tau_i^{(sample)}|\\mu,a,b)\u3001\u305f\u3060\u3057\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c1\u3064\u3060\u3051\u3067\u5e38\u306b\u03c4(sample)i=E[\u03c4i]\\tau_i^{(sample)}=\\mathbb{E}[\\tau_i]\u304c\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u308b\u3001\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\u4e0b\u306e\u56f3\u3067\u306f\u3042\u308b\u7a0b\u5ea6\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3001\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u8fd1\u4f3c\u3067\u3082\u305d\u308c\u307b\u3069\u7cbe\u5ea6\u306b\u5f71\u97ff\u304c\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff08\u672c\u5f53\u306b\u305d\u3046\u306a\u3089\u3046\u308c\u3057\u3044\u306a\u301c\uff09\u3002\n\n\n\u6700\u5c24\u63a8\u5b9a\u306e\u6d41\u308c\n\u3053\u3053\u307e\u3067\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3068\u3001\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u03bc,a,b\\mu,a,b\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\nE\u30b9\u30c6\u30c3\u30d7\u3067\u5168\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u5bfe\u3057\u3066\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u03c4\\tau\u3092\u8a08\u7b97\nM\u30b9\u30c6\u30c3\u30d7\u3067\u5b8c\u5168\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u03bc,a,b\\mu,a,b\u3092\u66f4\u65b0\n\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u53ce\u675f\u3057\u3066\u3044\u308c\u3070\u7d42\u4e86\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070E\u30b9\u30c6\u30c3\u30d7\u306b\u623b\u308b\n\n\u3053\u306e\u3088\u3046\u306a\u4e00\u822c\u5316EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\nimport\n\u7d50\u679c\u306e\u56f3\u793a\u3092\u3059\u308b\u305f\u3081\u306ematplotlib\u3068numpy\u3001\u305d\u3057\u3066\u305d\u308c\u3089\u306b\u52a0\u3048\u3066scipy\u304b\u3089\u30ac\u30f3\u30de\u95a2\u6570\u3068\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u3092import\u3057\u307e\u3059\u3002\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.special import gamma, digamma\n\n\n\u30ac\u30a6\u30b9\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3068\u306e\u6bd4\u8f03\u3092\u3059\u308b\u305f\u3081\u3060\u3051\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3088\u308b\u6700\u5c24\u63a8\u5b9a\nclass Gaussian(object):\n\n    def fit(self, x):\n        self.mean = np.mean(x)\n        self.var = np.var(x)\n\n    def predict_proba(self, x):\n        return (np.exp(-0.5 * (x - self.mean) ** 2 / self.var)\n                / np.sqrt(2 * np.pi * self.var))\n\n\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u3088\u308b\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3059\u3002fit\u30e1\u30bd\u30c3\u30c9\u3067\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e2d\u3067E\u30b9\u30c6\u30c3\u30d7\u3068M\u30b9\u30c6\u30c3\u30d7\u3092\u7e70\u308a\u8fd4\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u66f4\u65b0\u3055\u308c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u4e86\u3057\u307e\u3059\u3002\nclass StudentsT(object):\n\n    def __init__(self, mean=0, a=1, b=1, learning_rate=0.01):\n        self.mean = mean\n        self.a = a\n        self.b = b\n        self.learning_rate = learning_rate\n\n    def fit(self, x):\n        while True:\n            params = [self.mean, self.a, self.b]\n            self._expectation(x)\n            self._maximization(x)\n            if np.allclose(params, [self.mean, self.a, self.b]):\n                break\n\n    def _expectation(self, x):\n        self.precisions = (self.a + 0.5) / (self.b + 0.5 * (x - self.mean) ** 2)\n\n    def _maximization(self, x):\n        self.mean = np.sum(self.precisions * x) / np.sum(self.precisions)\n        a = self.a\n        b = self.b\n        self.a = a + self.learning_rate * (\n            len(x) * np.log(b)\n            + np.log(np.prod(self.precisions))\n            - len(x) * digamma(a))\n        self.b = a * len(x) / np.sum(self.precisions)\n\n    def predict_proba(self, x):\n        return ((1 + (x - self.mean) ** 2/(2 * self.b)) ** (-self.a - 0.5)\n                * gamma(self.a + 0.5)\n                / (gamma(self.a) * np.sqrt(2 * np.pi * self.b)))\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\n\nstudents_t_mle.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.special import gamma, digamma\n\n\nclass Gaussian(object):\n\n    def fit(self, x):\n        self.mean = np.mean(x)\n        self.var = np.var(x)\n\n    def predict_proba(self, x):\n        return (np.exp(-0.5 * (x - self.mean) ** 2 / self.var)\n                / np.sqrt(2 * np.pi * self.var))\n\n\nclass StudentsT(object):\n\n    def __init__(self, mean=0, a=1, b=1, learning_rate=0.01):\n        self.mean = mean\n        self.a = a\n        self.b = b\n        self.learning_rate = learning_rate\n\n    def fit(self, x):\n        while True:\n            params = [self.mean, self.a, self.b]\n            self._expectation(x)\n            self._maximization(x)\n            if np.allclose(params, [self.mean, self.a, self.b]):\n                break\n\n    def _expectation(self, x):\n        self.precisions = (self.a + 0.5) / (self.b + 0.5 * (x - self.mean) ** 2)\n\n    def _maximization(self, x):\n        self.mean = np.sum(self.precisions * x) / np.sum(self.precisions)\n        a = self.a\n        b = self.b\n        self.a = a + self.learning_rate * (\n            len(x) * np.log(b)\n            + np.log(np.prod(self.precisions))\n            - len(x) * digamma(a))\n        self.b = a * len(x) / np.sum(self.precisions)\n\n    def predict_proba(self, x):\n        return ((1 + (x - self.mean) ** 2/(2 * self.b)) ** (-self.a - 0.5)\n                * gamma(self.a + 0.5)\n                / (gamma(self.a) * np.sqrt(2 * np.pi * self.b)))\n\n\ndef main():\n\n    # create toy data including outliers and plot histogram\n    x = np.random.normal(size=20)\n    x = np.concatenate([x, np.random.normal(loc=20., size=3)])\n    plt.hist(x, bins=50, normed=1., label=\"samples\")\n\n    # prepare model\n    students_t = StudentsT()\n    gaussian = Gaussian()\n\n    # maximum likelihood estimate\n    students_t.fit(x)\n    gaussian.fit(x)\n\n    # plot results\n    x = np.linspace(-5, 25, 1000)\n    plt.plot(x, students_t.predict_proba(x), label=\"student's t\", linewidth=2)\n    plt.plot(x, gaussian.predict_proba(x), label=\"gaussian\", linewidth=2)\n    plt.legend()\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\u7d50\u679c\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u308b\u3068\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002PRML\u306e\u56f32.16\u306e\u3088\u3046\u306b\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u3088\u308b\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3060\u3068\u78ba\u304b\u306b\u5916\u308c\u5024\u304c\u3042\u308b\u5834\u5408\u3067\u3082\u9811\u5065\u3067\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u5e73\u5747\u306f0\u3042\u305f\u308a\u3067\u3059\u304c\u3001\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5e73\u5747\u306f\u5916\u308c\u5024\u306b\u5f15\u3063\u5f35\u3089\u308c\u30662.5\u3042\u305f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\u7d42\u308f\u308a\u306b\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3067\u306e\u6700\u5c24\u63a8\u5b9a\u306e\u307b\u3046\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u30e2\u30c7\u30eb\u306b\u3057\u305f\u5834\u5408\u3088\u308a\u9811\u5065\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3092\u4f7f\u3063\u305f\u66f2\u7dda\u306e\u56de\u5e30\u554f\u984c\u3082\u89e3\u3044\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u30ac\u30a6\u30b9\u5206\u5e03\u3088\u308a\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u9811\u5065\u306a\u6027\u8cea\u3092\u6301\u3064\u5206\u5e03\u3068\u3057\u3066\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3088\u304f\u3088\u304f\u601d\u3044\u51fa\u305b\u3070\u3053\u306e\u5206\u5e03\u3092\u7528\u3044\u305f\u3053\u3068\u304c\u5168\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u826f\u3044\u6a5f\u4f1a\u3067\u3059\u3057\u305d\u306e\u9811\u5065\u6027\u3092\u5b9f\u969b\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002[\u4e00\u56de\u76ee\u306ePRML\u5b9f\u88c5](http://qiita.com/cutting_the_Gordian_knot/items/555802600638f41b40c5)\u306e\u3068\u304d\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u4ee5\u5916\u306f\u6975\u529bnumpy\u3060\u3051\u3068\u3044\u3046\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u3068\u3044\u3046\u3042\u307e\u308a\u99b4\u67d3\u307f\u306e\u306a\u3044\u95a2\u6570\u304c\u51fa\u3066\u304d\u305f\u305f\u3081scipy\u3082\u4f7f\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u4f01\u753b\uff12\u56de\u76ee\u306b\u3057\u3066\u65e9\u3005\u306bnumpy\u4ee5\u5916\u306e\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3068\u306a\u308a\u3001\u5148\u304c\u601d\u3044\u3084\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n# \u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u3001\u30ac\u30a6\u30b9\u5206\u5e03$\\mathcal{N}(x|\\mu,\\tau^{-1})$\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf$\\tau$\u306e\u5171\u5f79\u4e8b\u524d\u5206\u5e03\u3068\u3057\u3066\u30ac\u30f3\u30de\u5206\u5e03${\\rm Gam}(\\tau|a,b)$\u3092\u7528\u3044\u3001\u7cbe\u5ea6\u3092\u7a4d\u5206\u6d88\u53bb\u3057\u3066\u5f97\u3089\u308c\u308b\u5206\u5e03\u3067\u3059\u3002\u3053\u306e\u3053\u3068\u304b\u3089\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306f\u3001\u5e73\u5747\u306f\u540c\u3058\u3060\u304c\u5206\u6563\u306e\u7570\u306a\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7121\u9650\u500b\u8db3\u3057\u5408\u308f\u305b\u305f\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3060\u3068\u89e3\u91c8\u3067\u304d\u307e\u3059\u3002\n$$p(x|\\mu,a,b)=\\int^{\\infty}_0 \\mathcal{N}(x|\\mu,\\tau^{-1}){\\rm Gam}(\\tau|a,b){\\rm d}\\tau$$\u3053\u306e\u5f8c\u3001$\\nu=2a,\\lambda=a/b$\u3068\u3059\u308b\u3068\u898b\u308b\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n$${\\rm St}(x|\\mu,\\lambda,\\nu)={\\Gamma(\\nu/2+1/2)\\over\\Gamma(\\nu/2)}\\left({\\lambda\\over\\pi\\nu}\\right)^{1/2}\\left[1+{\\lambda(x-\\mu)^2\\over\\nu}\\right]^{-\\nu/2-1/2}$$\u5e7e\u3064\u304b\u306e\u70b9x\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u6700\u5c24\u63a8\u5b9a\u3092\u3057\u3066$\\mu,a,b$(\u3082\u3057\u304f\u306f$\\mu,\\lambda,\\nu$)\u3092\u63a8\u5b9a\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u306e\u6700\u5c24\u63a8\u5b9a\u306e\u5834\u5408\u3068\u306f\u9055\u3063\u3066\u9589\u5f62\u5f0f\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u4e0a\u306e${\\rm St}(x|\\mu,\\lambda,\\nu)$\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u5fae\u5206\u3057\u3066\u3082\u5168\u7136\u7dba\u9e97\u306a\u5f62\u306b\u306f\u306a\u3063\u3066\u304f\u308c\u306a\u3055\u305d\u3046\u3067\u3059\u3002PRML\u3067\u306f\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u306b\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(PRML\u6f14\u7fd2\u554f\u984c12.24)\u3092\u4f7f\u3046\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306f\u89b3\u6e2c\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u6cc1\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\u3059\u308b\u306e\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u624b\u6cd5\u3067\u3042\u308a\u3001PRML\u306e\u7b2c\uff19\u7ae0\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf$\\tau$\u3092\u6f5c\u5728\u5909\u6570\u3068\u3057\u3066EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u9069\u7528\u3057\u305f\u3068\u304d\u306e\u8a08\u7b97\u5f0f\u304cPRML\u306b\u306f\u8f09\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5c11\u3057\u8a08\u7b97\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u9593\u9055\u3044\u306a\u3069\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n## E\u30b9\u30c6\u30c3\u30d7\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eE(Expectation)\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf($\\mu,a,b$)\u3092\u56fa\u5b9a\u3057\u3066\u3001\u5404\u30b5\u30f3\u30d7\u30eb\u70b9$x_i$\u304c\u3069\u3093\u306a\u5206\u6563\uff08\u3082\u3057\u304f\u306f\u7cbe\u5ea6$\\tau$\uff09\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n$$\np(\\tau_i|x_i,\\mu,a,b) = \\mathcal{N}(x_i|\\mu,\\tau^{-1}){\\rm Gam}(\\tau_i|a,b)/const.\n$$\u4e8b\u524d\u5206\u5e03\u306b\u306f\u30ac\u30f3\u30de\u5206\u5e03\u3001\u5c24\u5ea6\u95a2\u6570\u306b\u306f\u30ac\u30a6\u30b9\u95a2\u6570\u3092\u7528\u3044\u305f\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u8a08\u7b97\u3059\u308b\u3068\u30ac\u30f3\u30de\u5206\u5e03$${\\rm Gam}(\\tau_i|a+{1\\over2},b+{1\\over2}(x_i-\\mu)^2)$$\u304c\u4e8b\u5f8c\u5206\u5e03\u3068\u3057\u3066\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u306e\u4e8b\u5f8c\u5206\u5e03\u306e\u671f\u5f85\u5024\u3088\u308a$$\\tau_i={a+{1\\over2}\\over b+{1\\over2}(x_i-\\mu)^2}$$\u3068\u3057\u3066\u5404\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u3064\u3044\u3066\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n## M\u30b9\u30c6\u30c3\u30d7\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eM(Maximization)\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u5b8c\u5168\u30c7\u30fc\u30bf$\\\\{x_i,\\tau_i\\\\}$\u306b\u5bfe\u3057\u3066\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3092\u8a08\u7b97\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf$\\mu,a,b$\u306b\u3064\u3044\u3066\u6700\u5927\u5316\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u306e\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf$\\tau_i$\u306b\u306fE\u30b9\u30c6\u30c3\u30d7\u3067\u6c42\u307e\u3063\u305f\u3082\u306e\u3092\u7528\u3044\u307e\u3059\u3002\n$$\\sum_{i=1}^N\\ln p(x_i,\\tau_i|\\mu,a,b) = \\sum_{i=1}^N\\ln\\\\{\\mathcal{N}(x_i|\\mu,\\tau_i^{-1}){\\rm Gam}(\\tau_i|a,b)\\\\}$$\u3053\u308c\u3092\u8a08\u7b97\u3057\u3066\uff08\u81ea\u4fe1\u306a\u3044\uff09\u3001\u63a8\u5b9a\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u629c\u304d\u51fa\u3057\u3066\u304f\u308b\u3068\u3001\n$$-{1\\over2}\\sum_i\\tau_i(x_i-\\mu)^2 + aN\\ln b -N\\ln\\Gamma(a)+a\\sum_i\\ln\\tau_i - b\\sum_i\\tau_i$$\n\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5fae\u5206\u3057\u3066\u30a4\u30b3\u30fc\u30eb0\u3068\u304a\u3044\u3066\u65b9\u7a0b\u5f0f\u3092\u89e3\u304d\u307e\u3059\u3002\n$$\\mu = {\\sum_i\\tau_ix_i\\over\\sum_i\\tau_i}$$$$a = \\psi^{-1}(\\ln b + {1\\over N}\\sum_i\\ln\\tau_i)$$$$b = {aN\\over\\sum_i\\tau_i}$$a\u3067\u5fae\u5206\u3059\u308b\u3068\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570$\\psi(x)$\u304c\u3067\u3066\u304d\u307e\u3057\u305f\u3002\u3082\u3057\u305d\u306e\u95a2\u6570\u306e\u9006\u95a2\u6570\u304c\u3061\u3083\u3093\u3068\u5b9f\u5728\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u89e3\u3051\u307e\u3057\u305f\u304c\u3001numpy\u3068\u304bscipy\u306b\u306f\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u306e\u9006\u95a2\u6570\u306a\u3093\u3066\u306a\u3044\uff08\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u306fscipy\u306b\u3042\u308b\uff09\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u30d1\u30e9\u30e1\u30fc\u30bfa\u306b\u3064\u3044\u3066\u306f\u52fe\u914d\u6cd5\u3067\u5c11\u3057\u66f4\u65b0\u3059\u308b\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\n\u305d\u3082\u305d\u3082$a,b$\u306e\u89e3\u3092\u898b\u308b\u3068\u304a\u4e92\u3044\u306b\u6df7\u3058\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e0a\u306e3\u3064\u306e\u5f0f\u3067\u306f\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u304a\u305d\u3089\u304f\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u304c\u5b8c\u5168\u306b\u306f\u306a\u3055\u308c\u306a\u3044\u5834\u5408\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4e00\u822c\u5316EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3076\u305d\u3046\u3067\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3046\u3068\u304d\u306b\u305f\u3044\u3066\u3044\u81ea\u7531\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf$\\nu(=2a)$\u3092\u4f55\u3089\u304b\u306e\u5024\u3067\u56fa\u5b9a\u3057\u3066\u3044\u308b\u306e\u306f\u3001M\u30b9\u30c6\u30c3\u30d7\u3092\u304d\u3063\u3061\u308a\u884c\u3046\u305f\u3081\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u81ea\u7531\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u56fa\u5b9a\u3059\u308c\u3070\u3001\u6b8b\u308b\u63a8\u5b9a\u5bfe\u8c61\u306f$\\mu,\\lambda$\u3068\u306a\u3063\u3066\u3001\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n>\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u3082\u3068\u306b\u5c11\u3057\u8a02\u6b63\u3001\u88dc\u8db3\u3092\u3057\u307e\u3059\u3002\u672c\u6765\u306eE\u30b9\u30c6\u30c3\u30d7\u3067\u3042\u308c\u3070\u3001\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf $\\tau_i$\u306e\u4e8b\u5f8c\u5206\u5e03$p(\\tau_i|x_i,\\mu,a,b) = {\\rm Gam}(\\tau_i|a+{1\\over2},b+{1\\over2}(x_i-\\mu)^2)$\u3092\u8a08\u7b97\u3057\u305f\u90e8\u5206\u3067\u7d42\u308f\u308a\u3001\u305d\u306e\u3042\u3068\u306eM\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u5b8c\u5168\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570$\\ln p(x_i,\\tau_i|\\mu,a,b)$\u306e\u305d\u306e\u4e8b\u5f8c\u5206\u5e03\u306b\u3064\u3044\u3066\u306e\u671f\u5f85\u5024$\\mathbb{E}[\\sum_i\\ln p(x_i,\\tau_i|\\mu,a,b)]$\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u305d\u306e\u8a08\u7b97\u7d50\u679c\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u95a2\u308f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3060\u3051\u629c\u304d\u51fa\u3059\u3068\u3001$-{1\\over2}\\sum_i\\mathbb{E}\\[\\tau_i\\](x_i - \\mu)^2 + a\\sum_i\\mathbb{E}\\[\\ln\\tau_i\\] + aN\\ln b - b\\sum_i\\mathbb{E}[\\tau_i] - N\\ln\\Gamma(a)$\u3001\u3068\u306a\u308a\u6700\u5927\u5316\u3059\u3079\u304d\u95a2\u6570\u306e\u5f62\u304c\u4e00\u90e8\u9055\u3063\u3066\u3044\u307e\u3059\u3002\u5143\u306e\u8a18\u4e8b\u306e\u65b9\u306eEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u671f\u5f85\u5024\u8a08\u7b97\u306b\u30b5\u30f3\u30d7\u30eb\u8fd1\u4f3c$\\mathbb{E}[\\sum_i\\ln p(x_i,\\tau_i|\\mu,a,b)]=\\sum_i\\ln p(x_i,\\tau_i^{(sample)}|\\mu,a,b)$\u3001\u305f\u3060\u3057\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c1\u3064\u3060\u3051\u3067\u5e38\u306b$\\tau_i^{(sample)}=\\mathbb{E}[\\tau_i]$\u304c\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u308b\u3001\u3092\u7528\u3044\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\u4e0b\u306e\u56f3\u3067\u306f\u3042\u308b\u7a0b\u5ea6\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3001\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u8fd1\u4f3c\u3067\u3082\u305d\u308c\u307b\u3069\u7cbe\u5ea6\u306b\u5f71\u97ff\u304c\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff08\u672c\u5f53\u306b\u305d\u3046\u306a\u3089\u3046\u308c\u3057\u3044\u306a\u301c\uff09\u3002\n\n## \u6700\u5c24\u63a8\u5b9a\u306e\u6d41\u308c\n\u3053\u3053\u307e\u3067\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3068\u3001\n\n1. \u30d1\u30e9\u30e1\u30fc\u30bf$\\mu,a,b$\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\n2. E\u30b9\u30c6\u30c3\u30d7\u3067\u5168\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u70b9\u306b\u5bfe\u3057\u3066\u7cbe\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf$\\tau$\u3092\u8a08\u7b97\n3. M\u30b9\u30c6\u30c3\u30d7\u3067\u5b8c\u5168\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf$\\mu,a,b$\u3092\u66f4\u65b0\n4. \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u53ce\u675f\u3057\u3066\u3044\u308c\u3070\u7d42\u4e86\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070E\u30b9\u30c6\u30c3\u30d7\u306b\u623b\u308b\n\n\u3053\u306e\u3088\u3046\u306a\u4e00\u822c\u5316EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n## import\n\u7d50\u679c\u306e\u56f3\u793a\u3092\u3059\u308b\u305f\u3081\u306ematplotlib\u3068numpy\u3001\u305d\u3057\u3066\u305d\u308c\u3089\u306b\u52a0\u3048\u3066scipy\u304b\u3089\u30ac\u30f3\u30de\u95a2\u6570\u3068\u30c7\u30a3\u30ac\u30f3\u30de\u95a2\u6570\u3092import\u3057\u307e\u3059\u3002\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.special import gamma, digamma\n```\n\n## \u30ac\u30a6\u30b9\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3068\u306e\u6bd4\u8f03\u3092\u3059\u308b\u305f\u3081\u3060\u3051\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3088\u308b\u6700\u5c24\u63a8\u5b9a\n\n```python\nclass Gaussian(object):\n\n    def fit(self, x):\n        self.mean = np.mean(x)\n        self.var = np.var(x)\n\n    def predict_proba(self, x):\n        return (np.exp(-0.5 * (x - self.mean) ** 2 / self.var)\n                / np.sqrt(2 * np.pi * self.var))\n```\n\n## \u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u3088\u308b\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3046\u30b3\u30fc\u30c9\u3067\u3059\u3002fit\u30e1\u30bd\u30c3\u30c9\u3067\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e2d\u3067E\u30b9\u30c6\u30c3\u30d7\u3068M\u30b9\u30c6\u30c3\u30d7\u3092\u7e70\u308a\u8fd4\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u66f4\u65b0\u3055\u308c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n```python\nclass StudentsT(object):\n\n    def __init__(self, mean=0, a=1, b=1, learning_rate=0.01):\n        self.mean = mean\n        self.a = a\n        self.b = b\n        self.learning_rate = learning_rate\n\n    def fit(self, x):\n        while True:\n            params = [self.mean, self.a, self.b]\n            self._expectation(x)\n            self._maximization(x)\n            if np.allclose(params, [self.mean, self.a, self.b]):\n                break\n\n    def _expectation(self, x):\n        self.precisions = (self.a + 0.5) / (self.b + 0.5 * (x - self.mean) ** 2)\n\n    def _maximization(self, x):\n        self.mean = np.sum(self.precisions * x) / np.sum(self.precisions)\n        a = self.a\n        b = self.b\n        self.a = a + self.learning_rate * (\n            len(x) * np.log(b)\n            + np.log(np.prod(self.precisions))\n            - len(x) * digamma(a))\n        self.b = a * len(x) / np.sum(self.precisions)\n\n    def predict_proba(self, x):\n        return ((1 + (x - self.mean) ** 2/(2 * self.b)) ** (-self.a - 0.5)\n                * gamma(self.a + 0.5)\n                / (gamma(self.a) * np.sqrt(2 * np.pi * self.b)))\n```\n\n## \u30b3\u30fc\u30c9\u5168\u4f53\n\n```python:students_t_mle.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.special import gamma, digamma\n\n\nclass Gaussian(object):\n\n    def fit(self, x):\n        self.mean = np.mean(x)\n        self.var = np.var(x)\n\n    def predict_proba(self, x):\n        return (np.exp(-0.5 * (x - self.mean) ** 2 / self.var)\n                / np.sqrt(2 * np.pi * self.var))\n\n\nclass StudentsT(object):\n\n    def __init__(self, mean=0, a=1, b=1, learning_rate=0.01):\n        self.mean = mean\n        self.a = a\n        self.b = b\n        self.learning_rate = learning_rate\n\n    def fit(self, x):\n        while True:\n            params = [self.mean, self.a, self.b]\n            self._expectation(x)\n            self._maximization(x)\n            if np.allclose(params, [self.mean, self.a, self.b]):\n                break\n\n    def _expectation(self, x):\n        self.precisions = (self.a + 0.5) / (self.b + 0.5 * (x - self.mean) ** 2)\n\n    def _maximization(self, x):\n        self.mean = np.sum(self.precisions * x) / np.sum(self.precisions)\n        a = self.a\n        b = self.b\n        self.a = a + self.learning_rate * (\n            len(x) * np.log(b)\n            + np.log(np.prod(self.precisions))\n            - len(x) * digamma(a))\n        self.b = a * len(x) / np.sum(self.precisions)\n\n    def predict_proba(self, x):\n        return ((1 + (x - self.mean) ** 2/(2 * self.b)) ** (-self.a - 0.5)\n                * gamma(self.a + 0.5)\n                / (gamma(self.a) * np.sqrt(2 * np.pi * self.b)))\n\n\ndef main():\n\n    # create toy data including outliers and plot histogram\n    x = np.random.normal(size=20)\n    x = np.concatenate([x, np.random.normal(loc=20., size=3)])\n    plt.hist(x, bins=50, normed=1., label=\"samples\")\n\n    # prepare model\n    students_t = StudentsT()\n    gaussian = Gaussian()\n\n    # maximum likelihood estimate\n    students_t.fit(x)\n    gaussian.fit(x)\n\n    # plot results\n    x = np.linspace(-5, 25, 1000)\n    plt.plot(x, students_t.predict_proba(x), label=\"student's t\", linewidth=2)\n    plt.plot(x, gaussian.predict_proba(x), label=\"gaussian\", linewidth=2)\n    plt.legend()\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# \u7d50\u679c\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u8d70\u3089\u305b\u308b\u3068\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002PRML\u306e\u56f32.16\u306e\u3088\u3046\u306b\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306b\u3088\u308b\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3060\u3068\u78ba\u304b\u306b\u5916\u308c\u5024\u304c\u3042\u308b\u5834\u5408\u3067\u3082\u9811\u5065\u3067\u3059\u3002\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u306e\u5e73\u5747\u306f0\u3042\u305f\u308a\u3067\u3059\u304c\u3001\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5e73\u5747\u306f\u5916\u308c\u5024\u306b\u5f15\u3063\u5f35\u3089\u308c\u30662.5\u3042\u305f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n![fitting.png](https://qiita-image-store.s3.amazonaws.com/0/148017/6bd38350-d214-aef6-72f2-df510c0b947a.png)\n\n# \u7d42\u308f\u308a\u306b\n\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3067\u306e\u6700\u5c24\u63a8\u5b9a\u306e\u307b\u3046\u304c\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u30e2\u30c7\u30eb\u306b\u3057\u305f\u5834\u5408\u3088\u308a\u9811\u5065\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u30b9\u30c1\u30e5\u30fc\u30c7\u30f3\u30c8\u306et\u5206\u5e03\u3092\u4f7f\u3063\u305f\u66f2\u7dda\u306e\u56de\u5e30\u554f\u984c\u3082\u89e3\u3044\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["PRML", "Python", "\u6a5f\u68b0\u5b66\u7fd2"]}