{"tags": ["redux", "TypeScript", "reactjs"], "context": "\n\n\u306f\u3058\u3081\u306b\nRedux + TypeScript\u306a\u74b0\u5883\u3067Action type\u306b\u578b\u3092\u5b9a\u7fa9\u3057\u3001Reducer\u3092\u578b\u5b89\u5168\u306b\u66f8\u304f\u65b9\u6cd5\u3092TypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 1.8 / 2.0 / 2.1 \u5225\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\u306a\u304a\u3001\u8a66\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f GitHub \u306b\u3042\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u901a\u308aTypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5225\u306b\u30d6\u30e9\u30f3\u30c1\u3067\u5206\u3051\u3066\u3042\u308a\u307e\u3059\u3002\n\nTypeScript 1.8\u7248\nTypeScript 2.0\u7248\nTypeScript 2.1\u7248\n\n\u307e\u305f\u3001TypeScript 2.0\u30012.1\u306f\u307e\u3060\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u30018/12\u6642\u70b9\u306e\u7269\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u308b(2.0\u306fnpm i typescript@beta\u3067\u30012.1\u306fnpm i typescript@next\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb)\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u5185\u5bb9\n\n\n\n+\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30ab\u30a6\u30f3\u30bf\u30921\u3064\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n\n-\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30ab\u30a6\u30f3\u30bf\u30921\u3064\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u3053\u3068\u3067\u4efb\u610f\u306e\u5024\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u8a2d\u5b9a\n\n\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3002Redux\u306eAction\u306f\u4e0b\u8a18\u306e3\u3064\u3092\u4f7f\u3046\u3002\u30d7\u30ec\u30fc\u30f3\u306aJavaScript\u306eObject\u3067\u5b9a\u7fa9\u3059\u308b\u3002\n\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n\n{\n    type: 'INCREMENT'\n}\n\n\n\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n\n{\n    type: 'DECREMENT'\n}\n\n\n\u4efb\u610f\u306e\u5024\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\n\n{\n    type: 'SET_COUNT',\n    payload: {\n        count: 100\n    }\n}\n\n\u4ee5\u4e0b\u3001TypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5225\u306bAction\u3001Reducer\u306e\u30b3\u30fc\u30c9\u3092\u89e3\u8aac\u3002\n\n1.8\u306e\u5834\u5408\n1.8\u3060\u30682.0\u304b\u3089\u5c0e\u5165\u3055\u308c\u308bTagged union types \u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001User-defined type guard functions\u3092\u5b9a\u7fa9\u3057\u3066\u9811\u5f35\u308b\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\nAction\n\nAction type\u306fstring\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306btype ActionType<T> = string & _ActionType<T>\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u305fActionType<T>\u578b\u3067\u6271\u3046\u3002T\u578b\u306b\u306f\u5404Action\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\n\nisType\u306e\u3088\u3046\u306bUser-defined type guard functions\u3068\u3057\u3066\u578b\u3092\u7d5e\u308b\u305f\u3081\u306e\u5171\u901a\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u95a2\u6570\u3067\u3001\u5148\u306eActionType<T>\u306eT\u578b\u3001\u3064\u307e\u308a\u5404Action\u306e\u578b\u306b\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\nAction\nexport interface _ActionType<T> { }\nexport type ActionType<T> = string & _ActionType<T>\n\nexport interface Action {\n    type: String;\n    payload?: any;\n}\n\nexport function isType<T extends Action>(action: Action, type: _ActionType<T>): action is T {\n    return action.type === type;\n}\n\nexport const INCREMENT: ActionType<IncrementAction> = 'INCREMENT';\nexport const DECREMENT: ActionType<DecrementAction> = 'DECREMENT';\nexport const SET_COUNT: ActionType<SetCounterAction> = 'SET_COUNT';\n\nexport interface IncrementAction extends Action {\n}\nexport function increment(): IncrementAction {\n    return {\n        type: INCREMENT\n    };\n}\n\nexport interface DecrementAction extends Action {\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: DECREMENT\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: SET_COUNT,\n        payload: {\n            count: num\n        }\n    };\n}\n\n\n\nReducer\n\nAction\u3067\u5b9a\u7fa9\u3057\u305fisType\u95a2\u6570\u3092\u4f7f\u3063\u3066action\u5909\u6570\u306e\u578b\u3092\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nRedux\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u826f\u304f\u3042\u308b\u3088\u3046\u306aswitch case\u3092\u4f7f\u3063\u305f\u5f62\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n\n\nReducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Action) => {\n    if (Actions.isType(action, Actions.INCREMENT)) {\n        return Object.assign({}, state, {\n            count: state.count + 1\n        });\n    }\n\n    if (Actions.isType(action, Actions.DECREMENT)) {\n        return Object.assign({}, state, {\n            count: state.count - 1\n        });\n    }\n\n    if (Actions.isType(action, Actions.SET_COUNT)) {\n        return Object.assign({}, state, {\n            count: action.payload.count\n        });\n    }\n\n    return state;\n};\n\n\nUser-defined type guard functions\u306b\u3088\u308a\u578b\u304c\u7d5e\u3089\u308c\u308b\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3061\u3083\u3093\u3068action\u5909\u6570\u306e\u578b\u3092\u8a8d\u8b58\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3002\u5b58\u5728\u3057\u306a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308c\u3070\u3082\u3061\u308d\u3093\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u3084\u308a\u65b9\u306fRedux\u306eIssue: Support for typed actions (Typescript) #992 \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u4ed6\u306b\u3082Class\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3082\u3053\u3053\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u304c\u3001Action\u3054\u3068\u306bClass\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3084\u308a\u904e\u304e\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3053\u306e\u3084\u308a\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u308b\u3002\n\n2.0\u306e\u5834\u5408\n2.0\u3060\u3068Tagged union types\u3068\u3044\u3046\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001String Literal\u3067\u578b\u5b9a\u7fa9\u3057\u305ftype\u3067Action\u306e\u578b\u3092\u5224\u5225\u3057\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u4e00\u90e8\u5fae\u5999\u306a\u66f8\u304d\u65b9\n\u66f8\u304d\u65b9\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u826f\u3044\u306e\u3060\u304c\u578b\u5b89\u5168\u3067\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u66f8\u304d\u65b9\u3092\u307e\u305a\u7d39\u4ecb\u3002\n\nAction\n\n1.8\u306e\u9803\u3068\u9055\u3044\u3001\u7d20\u76f4\u306bString Literal\u3067type\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3068\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3002\n\n\nAction\nimport { Action } from 'redux';\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport interface IncrementAction extends Action {\n    type: 'INCREMENT';\n}\nexport function increment(): IncrementAction {\n    return {\n        type: 'INCREMENT'\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: 'DECREMENT';\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: 'DECREMENT'\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: 'SET_COUNT';\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: 'SET_COUNT',\n        payload: {\n            count: num\n        }\n    };\n}\n\n\n\nReducer\n\n\u7d20\u76f4\u306bString Literal\u3067switch case\u3092\u66f8\u304f\u3002\u3053\u3061\u3089\u3082\u30b7\u30f3\u30d7\u30eb\u3002\n\n\nReducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case 'INCREMENT':\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case 'DECREMENT':\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case 'SET_COUNT':\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n\n\n\u3053\u308c\u3067\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u306f\u884c\u308f\u308c\u308b\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001case 'SET_COUNT': \u5185\u3067\u306f\u3061\u3083\u3093\u3068action\u5909\u6570\u306e\u578b\u304c\u7d5e\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n\u3057\u304b\u3057\u6b8b\u5ff5\u306a\u70b9\u3082\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001case 'DECREMENT': -> case 'AAAAA': \u306e\u3088\u3046\u306b\u5b58\u5728\u3057\u306a\u3044Action type\u3092\u66f8\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3057\u3066\u304f\u308c\u305a\u578b\u5b89\u5168\u3067\u306f\u306a\u3044\u3002\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u51fa\u3055\u305b\u308b\u305f\u3081\u306b\u3061\u3087\u3063\u3068\u5de5\u592b\u3057\u305f\u3084\u308a\u65b9\n\u30a2\u30a4\u30c7\u30a2\u3068\u3057\u3066\u306f\u3001String Literal\u3092\u76f4\u63a5\u66f8\u304b\u305a\u306b\u5909\u6570\u3067case\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3055\u308c\u308b\u3002\n\nAction\n\n\u76f4\u63a5String Literal\u3067type\u3092\u5b9a\u7fa9\u306f\u305b\u305a\u3001const INCREMENT: 'INCREMENT' = 'INCREMENT'; \u306e\u3088\u3046\u306bString Literal\u306e\u5b9a\u6570\u3092\u5ba3\u8a00\u3057\u3066\u304a\u304f\u3002\n\u305d\u306e\u5b9a\u6570\u3092 type: typeof INCREMENT; \u306e\u3088\u3046\u306b\u4f7f\u3044\u3001type\u306e\u578b\u3092String Literal\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\n\n\nAction\nimport { Action } from 'redux'\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport const INCREMENT: 'INCREMENT' = 'INCREMENT';\nexport const DECREMENT: 'DECREMENT' = 'DECREMENT';\nexport const SET_COUNT: 'SET_COUNT' = 'SET_COUNT';\n\nexport interface IncrementAction extends Action {\n    type: typeof INCREMENT;\n}\nexport function increment(): IncrementAction {\n    return {\n        type: INCREMENT\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: typeof DECREMENT;\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: DECREMENT\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: typeof SET_COUNT;\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: SET_COUNT,\n        payload: {\n            count: num\n        }\n    };\n}\n\n\n\nReducer\n\nAction\u3067\u5b9a\u7fa9\u3057\u305f\u5b9a\u6570\u3092\u4f7f\u3063\u3066case\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u76f4\u63a5String Literal\u3092\u5165\u529b\u3057\u306a\u3044\u306e\u3067\u3001\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u305f\u5834\u5408\u3082\u3053\u308c\u306a\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3067\u304d\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u3082\u884c\u308f\u308c\u308b\u3002\n\n\nReducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case Actions.INCREMENT:\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case Actions.DECREMENT:\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case Actions.SET_COUNT:\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n\n\n\n2.1\u306e\u5834\u5408\n2.1\u3060\u3068Tagged union types\u304c\u3055\u3089\u306b\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u30012.0\u306e\u6642\u306e\u3088\u3046\u306a\u5fae\u5999\u306a\u5de5\u592b\u3082\u5fc5\u8981\u306a\u304f\u306a\u308b\u3002\u3064\u307e\u308a\u30012.0\u3067\u7d39\u4ecb\u3057\u305f\u4e00\u90e8\u99c4\u76ee\u306a\u3084\u308a\u65b9\u3067\u3082\u578b\u5b89\u5168\u3068\u306a\u308b\u3002\u5168\u304f\u540c\u3058\u30b3\u30fc\u30c9\u3060\u304c\u518d\u63b2\u3059\u308b\u3002\n\nAction\n\n\u7d20\u76f4\u306bString Literal\u3067type\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\nAction\nimport { Action } from 'redux';\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport interface IncrementAction extends Action {\n    type: 'INCREMENT';\n}\nexport function increment(): IncrementAction {\n    return {\n        type: 'INCREMENT'\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: 'DECREMENT';\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: 'DECREMENT'\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: 'SET_COUNT';\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: 'SET_COUNT',\n        payload: {\n            count: num\n        }\n    };\n}\n\n\n\nReducer\n\n\u7d20\u76f4\u306bString Literal\u3067switch case\u3092\u66f8\u304f\u3002\n\n\nReducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case 'INCREMENT':\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case 'DECREMENT':\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case 'SET_COUNT':\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n\n\n2.0\u3068\u7570\u306a\u308a\u3001action.type\u306b\u5b58\u5728\u3057\u306a\u3044String Literal\u3092switch case\u306b\u66f8\u304f\u3068\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u308b\u3002\u4fbf\u5229\u3002\n\n\n\u307e\u3068\u3081\n\nTypeScript\u3092\u4f7f\u3046\u3068Redux\u306eReducer\u3092\u578b\u5b89\u5168\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3044\u3044\u3088\u30021.8\u3067\u3082\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u304c\u3067\u304d\u306a\u304f\u306f\u306a\u3044\u3002\nTypeScript 2 \u306eTagged union types\u3067\u306f\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u3088\u3002\n\u305f\u3060\u30572.0\u3060\u3068\u4e0d\u5341\u5206\u3067\u3001\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u306f\u3057\u3066\u304f\u308c\u308b\u304cString Literal\u306eAction type\u3092\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u691c\u77e5\u3057\u3066\u304f\u308c\u305a\u3002\u691c\u77e5\u3055\u305b\u308b\u306b\u306f\u5225\u9014\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3061\u3087\u3063\u3068\u9762\u5012\u3002\nTypeScript 2.1\u306a\u3089\u3053\u3053\u306f\u6539\u5584\u3055\u308c\u3066\u3044\u3066\u3001String Literal\u306e\u307e\u307e\u3067\u3044\u3051\u3066\u826f\u3044\u611f\u3058\uff01\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3084\u304f2.1\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u6b32\u3057\u3044...\n# \u306f\u3058\u3081\u306b\nRedux + TypeScript\u306a\u74b0\u5883\u3067Action type\u306b\u578b\u3092\u5b9a\u7fa9\u3057\u3001Reducer\u3092\u578b\u5b89\u5168\u306b\u66f8\u304f\u65b9\u6cd5\u3092TypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 1.8 / 2.0 / 2.1 \u5225\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n\u306a\u304a\u3001\u8a66\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f [GitHub](https://github.com/wadahiro/react-redux-typescript-boilerplate) \u306b\u3042\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306e\u901a\u308aTypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5225\u306b\u30d6\u30e9\u30f3\u30c1\u3067\u5206\u3051\u3066\u3042\u308a\u307e\u3059\u3002\n\n* [TypeScript 1.8\u7248](https://github.com/wadahiro/react-redux-typescript-boilerplate/tree/typescript-1.8)\n* [TypeScript 2.0\u7248](https://github.com/wadahiro/react-redux-typescript-boilerplate/tree/typescript-2.0)\n* [TypeScript 2.1\u7248](https://github.com/wadahiro/react-redux-typescript-boilerplate/tree/typescript-2.1)\n\n\u307e\u305f\u3001TypeScript 2.0\u30012.1\u306f\u307e\u3060\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u30018/12\u6642\u70b9\u306e\u7269\u3092\u4f7f\u3063\u3066\u78ba\u8a8d\u3057\u3066\u3044\u308b(2.0\u306f`npm i typescript@beta`\u3067\u30012.1\u306f`npm i typescript@next`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb)\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u306e\u5185\u5bb9\n\n![sampleApp.png](https://qiita-image-store.s3.amazonaws.com/0/35233/c5bfae07-cf53-b866-5746-375832dbf4a6.png)\n\n\n* `+`\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30ab\u30a6\u30f3\u30bf\u30921\u3064\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n* `-`\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30ab\u30a6\u30f3\u30bf\u30921\u3064\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n* \u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u3053\u3068\u3067\u4efb\u610f\u306e\u5024\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u8a2d\u5b9a\n\n\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3002Redux\u306eAction\u306f\u4e0b\u8a18\u306e3\u3064\u3092\u4f7f\u3046\u3002\u30d7\u30ec\u30fc\u30f3\u306aJavaScript\u306eObject\u3067\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n* \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n\n```js\n{\n    type: 'INCREMENT'\n}\n```\n* \u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3\n\n```js\n{\n    type: 'DECREMENT'\n}\n```\n* \u4efb\u610f\u306e\u5024\u306b\u30ab\u30a6\u30f3\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\n\n```js\n{\n    type: 'SET_COUNT',\n    payload: {\n        count: 100\n    }\n}\n```\n\n\u4ee5\u4e0b\u3001TypeScript\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u5225\u306bAction\u3001Reducer\u306e\u30b3\u30fc\u30c9\u3092\u89e3\u8aac\u3002\n\n# 1.8\u306e\u5834\u5408\n\n1.8\u3060\u30682.0\u304b\u3089\u5c0e\u5165\u3055\u308c\u308b[Tagged union types](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#tagged-union-types) \u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001[User-defined type guard functions](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#user-defined-type-guard-functions)\u3092\u5b9a\u7fa9\u3057\u3066\u9811\u5f35\u308b\u65b9\u6cd5\u304c\u3042\u308b\u3002\n\n## Action\n* Action type\u306fstring\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b`type ActionType<T> = string & _ActionType<T>`\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u305f`ActionType<T>`\u578b\u3067\u6271\u3046\u3002`T`\u578b\u306b\u306f\u5404Action\u306e\u578b\u3092\u6307\u5b9a\u3059\u308b\u3002\n* `isType`\u306e\u3088\u3046\u306b[User-defined type guard functions](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#user-defined-type-guard-functions)\u3068\u3057\u3066\u578b\u3092\u7d5e\u308b\u305f\u3081\u306e\u5171\u901a\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3002\u3053\u306e\u95a2\u6570\u3067\u3001\u5148\u306e`ActionType<T>`\u306e`T`\u578b\u3001\u3064\u307e\u308a\u5404Action\u306e\u578b\u306b\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n```ts:Action\nexport interface _ActionType<T> { }\nexport type ActionType<T> = string & _ActionType<T>\n\nexport interface Action {\n    type: String;\n    payload?: any;\n}\n\nexport function isType<T extends Action>(action: Action, type: _ActionType<T>): action is T {\n    return action.type === type;\n}\n\nexport const INCREMENT: ActionType<IncrementAction> = 'INCREMENT';\nexport const DECREMENT: ActionType<DecrementAction> = 'DECREMENT';\nexport const SET_COUNT: ActionType<SetCounterAction> = 'SET_COUNT';\n\nexport interface IncrementAction extends Action {\n}\nexport function increment(): IncrementAction {\n    return {\n        type: INCREMENT\n    };\n}\n\nexport interface DecrementAction extends Action {\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: DECREMENT\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: SET_COUNT,\n        payload: {\n            count: num\n        }\n    };\n}\n```\n\n## Reducer\n* Action\u3067\u5b9a\u7fa9\u3057\u305f`isType`\u95a2\u6570\u3092\u4f7f\u3063\u3066`action`\u5909\u6570\u306e\u578b\u3092\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n* Redux\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u826f\u304f\u3042\u308b\u3088\u3046\u306a`switch case`\u3092\u4f7f\u3063\u305f\u5f62\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n\n```ts:Reducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Action) => {\n    if (Actions.isType(action, Actions.INCREMENT)) {\n        return Object.assign({}, state, {\n            count: state.count + 1\n        });\n    }\n\n    if (Actions.isType(action, Actions.DECREMENT)) {\n        return Object.assign({}, state, {\n            count: state.count - 1\n        });\n    }\n\n    if (Actions.isType(action, Actions.SET_COUNT)) {\n        return Object.assign({}, state, {\n            count: action.payload.count\n        });\n    }\n\n    return state;\n};\n```\n\n[User-defined type guard functions](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#user-defined-type-guard-functions)\u306b\u3088\u308a\u578b\u304c\u7d5e\u3089\u308c\u308b\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3061\u3083\u3093\u3068`action`\u5909\u6570\u306e\u578b\u3092\u8a8d\u8b58\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u3002\u5b58\u5728\u3057\u306a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308c\u3070\u3082\u3061\u308d\u3093\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n![ts180.png](https://qiita-image-store.s3.amazonaws.com/0/35233/effb9f0c-4465-3b0f-ac5d-d98283626f19.png)\n\n\n\u306a\u304a\u3001\u3053\u306e\u3084\u308a\u65b9\u306fRedux\u306eIssue: [Support for typed actions (Typescript) #992](https://github.com/reactjs/redux/issues/992) \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u4ed6\u306b\u3082Class\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u3082\u3053\u3053\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u304c\u3001Action\u3054\u3068\u306bClass\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3084\u308a\u904e\u304e\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3053\u306e\u3084\u308a\u65b9\u304c\u30b7\u30f3\u30d7\u30eb\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u308b\u3002\n\n\n# 2.0\u306e\u5834\u5408\n\n2.0\u3060\u3068[Tagged union types](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#tagged-union-types)\u3068\u3044\u3046\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u3066\u304a\u308a\u3001[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067\u578b\u5b9a\u7fa9\u3057\u305f`type`\u3067Action\u306e\u578b\u3092\u5224\u5225\u3057\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n## \u4e00\u90e8\u5fae\u5999\u306a\u66f8\u304d\u65b9\n\u66f8\u304d\u65b9\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u826f\u3044\u306e\u3060\u304c\u578b\u5b89\u5168\u3067\u306a\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u66f8\u304d\u65b9\u3092\u307e\u305a\u7d39\u4ecb\u3002\n\n### Action\n* 1.8\u306e\u9803\u3068\u9055\u3044\u3001\u7d20\u76f4\u306b[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067`type`\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3068\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3002\n\n```ts:Action\nimport { Action } from 'redux';\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport interface IncrementAction extends Action {\n    type: 'INCREMENT';\n}\nexport function increment(): IncrementAction {\n    return {\n        type: 'INCREMENT'\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: 'DECREMENT';\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: 'DECREMENT'\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: 'SET_COUNT';\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: 'SET_COUNT',\n        payload: {\n            count: num\n        }\n    };\n}\n```\n\n### Reducer\n* \u7d20\u76f4\u306b[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067`switch case`\u3092\u66f8\u304f\u3002\u3053\u3061\u3089\u3082\u30b7\u30f3\u30d7\u30eb\u3002\n\n```ts:Reducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case 'INCREMENT':\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case 'DECREMENT':\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case 'SET_COUNT':\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n```\n\n\u3053\u308c\u3067\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u306f\u884c\u308f\u308c\u308b\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001`case 'SET_COUNT':` \u5185\u3067\u306f\u3061\u3083\u3093\u3068`action`\u5909\u6570\u306e\u578b\u304c\u7d5e\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n![ts200-narrow.png](https://qiita-image-store.s3.amazonaws.com/0/35233/9ee276c4-634c-618f-c295-e74b7d1ad164.png)\n\n\n\u3057\u304b\u3057\u6b8b\u5ff5\u306a\u70b9\u3082\u3042\u308b\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001`case 'DECREMENT':` -> `case 'AAAAA':` \u306e\u3088\u3046\u306b\u5b58\u5728\u3057\u306a\u3044Action type\u3092\u66f8\u3044\u305f\u3068\u3057\u3066\u3082\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3057\u3066\u304f\u308c\u305a\u578b\u5b89\u5168\u3067\u306f\u306a\u3044\u3002\n\n![ts200.png](https://qiita-image-store.s3.amazonaws.com/0/35233/15c34092-5722-cce9-8086-ecedf5199be8.png)\n\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u51fa\u3055\u305b\u308b\u305f\u3081\u306b\u3061\u3087\u3063\u3068\u5de5\u592b\u3057\u305f\u3084\u308a\u65b9\n\u30a2\u30a4\u30c7\u30a2\u3068\u3057\u3066\u306f\u3001[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3092\u76f4\u63a5\u66f8\u304b\u305a\u306b\u5909\u6570\u3067`case`\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3055\u308c\u308b\u3002\n\n### Action\n* \u76f4\u63a5[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067`type`\u3092\u5b9a\u7fa9\u306f\u305b\u305a\u3001`const INCREMENT: 'INCREMENT' = 'INCREMENT';` \u306e\u3088\u3046\u306b[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u306e\u5b9a\u6570\u3092\u5ba3\u8a00\u3057\u3066\u304a\u304f\u3002\n* \u305d\u306e\u5b9a\u6570\u3092 `type: typeof INCREMENT;` \u306e\u3088\u3046\u306b\u4f7f\u3044\u3001`type`\u306e\u578b\u3092[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\n\n```ts:Action\nimport { Action } from 'redux'\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport const INCREMENT: 'INCREMENT' = 'INCREMENT';\nexport const DECREMENT: 'DECREMENT' = 'DECREMENT';\nexport const SET_COUNT: 'SET_COUNT' = 'SET_COUNT';\n\nexport interface IncrementAction extends Action {\n    type: typeof INCREMENT;\n}\nexport function increment(): IncrementAction {\n    return {\n        type: INCREMENT\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: typeof DECREMENT;\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: DECREMENT\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: typeof SET_COUNT;\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: SET_COUNT,\n        payload: {\n            count: num\n        }\n    };\n}\n```\n\n### Reducer\n* Action\u3067\u5b9a\u7fa9\u3057\u305f\u5b9a\u6570\u3092\u4f7f\u3063\u3066`case`\u3092\u6307\u5b9a\u3059\u308b\u3002\n* \u76f4\u63a5[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3092\u5165\u529b\u3057\u306a\u3044\u306e\u3067\u3001\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u305f\u5834\u5408\u3082\u3053\u308c\u306a\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u77e5\u3067\u304d\u308b\u3002\n* \u3082\u3061\u308d\u3093\u3001\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u3082\u884c\u308f\u308c\u308b\u3002\n\n```ts:Reducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case Actions.INCREMENT:\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case Actions.DECREMENT:\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case Actions.SET_COUNT:\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n```\n\n# 2.1\u306e\u5834\u5408\n2.1\u3060\u3068[Tagged union types](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#tagged-union-types)\u304c\u3055\u3089\u306b\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u30012.0\u306e\u6642\u306e\u3088\u3046\u306a\u5fae\u5999\u306a\u5de5\u592b\u3082\u5fc5\u8981\u306a\u304f\u306a\u308b\u3002\u3064\u307e\u308a\u30012.0\u3067\u7d39\u4ecb\u3057\u305f\u4e00\u90e8\u99c4\u76ee\u306a\u3084\u308a\u65b9\u3067\u3082\u578b\u5b89\u5168\u3068\u306a\u308b\u3002\u5168\u304f\u540c\u3058\u30b3\u30fc\u30c9\u3060\u304c\u518d\u63b2\u3059\u308b\u3002\n\n## Action\n* \u7d20\u76f4\u306b[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067`type`\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```ts:Action\nimport { Action } from 'redux';\n\nexport type Actions = IncrementAction | DecrementAction | SetCounterAction;\n\nexport interface IncrementAction extends Action {\n    type: 'INCREMENT';\n}\nexport function increment(): IncrementAction {\n    return {\n        type: 'INCREMENT'\n    };\n}\n\nexport interface DecrementAction extends Action {\n    type: 'DECREMENT';\n}\nexport function decrement(): DecrementAction {\n    return {\n        type: 'DECREMENT'\n    };\n}\n\nexport interface SetCounterAction extends Action {\n    type: 'SET_COUNT';\n    payload: {\n        count: number;\n    }\n}\nexport function setCount(num: number): SetCounterAction {\n    return {\n        type: 'SET_COUNT',\n        payload: {\n            count: num\n        }\n    };\n}\n```\n\n## Reducer\n* \u7d20\u76f4\u306b[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3067`switch case`\u3092\u66f8\u304f\u3002\n\n```ts:Reducer\nexport const appStateReducer = (state: AppState = init(), action: Actions.Actions) => {\n    switch (action.type) {\n\n        case 'INCREMENT':\n            return Object.assign({}, state, {\n                count: state.count + 1\n            });\n\n        case 'DECREMENT':\n            return Object.assign({}, state, {\n                count: state.count + -1\n            });\n\n        case 'SET_COUNT':\n            return Object.assign({}, state, {\n                count: action.payload.count\n            });\n    }\n\n    return state;\n};\n```\n\n2.0\u3068\u7570\u306a\u308a\u3001`action.type`\u306b\u5b58\u5728\u3057\u306a\u3044[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u3092`switch case`\u306b\u66f8\u304f\u3068\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u308b\u3002\u4fbf\u5229\u3002\n\n![ts210.png](https://qiita-image-store.s3.amazonaws.com/0/35233/134f292d-4a02-fbbc-8269-3590473525cf.png)\n\n# \u307e\u3068\u3081\n* TypeScript\u3092\u4f7f\u3046\u3068Redux\u306eReducer\u3092\u578b\u5b89\u5168\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3044\u3044\u3088\u30021.8\u3067\u3082\u3061\u3087\u3063\u3068\u9762\u5012\u3060\u304c\u3067\u304d\u306a\u304f\u306f\u306a\u3044\u3002\n* TypeScript 2 \u306e[Tagged union types](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#tagged-union-types)\u3067\u306f\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u3088\u3002\n* \u305f\u3060\u30572.0\u3060\u3068\u4e0d\u5341\u5206\u3067\u3001\u578b\u306e\u7d5e\u308a\u8fbc\u307f\u306f\u3057\u3066\u304f\u308c\u308b\u304c[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u306eAction type\u3092\u30bf\u30a4\u30d7\u30df\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u691c\u77e5\u3057\u3066\u304f\u308c\u305a\u3002\u691c\u77e5\u3055\u305b\u308b\u306b\u306f\u5225\u9014\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3061\u3087\u3063\u3068\u9762\u5012\u3002\n* TypeScript 2.1\u306a\u3089\u3053\u3053\u306f\u6539\u5584\u3055\u308c\u3066\u3044\u3066\u3001[String Literal](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#string-literal-types)\u306e\u307e\u307e\u3067\u3044\u3051\u3066\u826f\u3044\u611f\u3058\uff01\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3084\u304f2.1\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u6b32\u3057\u3044...\n"}