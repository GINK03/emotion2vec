{"context": "\u306f\u3044\u3069\u3046\u3082\u3002\u306a\u3093\u304b20\u65e5\u306e\u67a0\u304c\u7a7a\u3044\u3066\u305f\u306e\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f...(D\u8a00\u8a9eAdvent Calendar\u3092\u57cb\u3081\u305f\u304b\u3063\u305f\u306e\u3067)\n\u305d\u308c\u3067\u3001\u30cd\u30bf\u3068\u3057\u3066\u6700\u8fd1\u3061\u3087\u308d\u3063\u3068\u66f8\u3044\u305fMac\u306eiTunes\u5411\u3051\u306eNow Playing\u30c4\u30fc\u30eb\u3092kqueue\u3092\u4f7f\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u305d\u308c\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u4eca\u56de\u4f5c\u308b\u30c4\u30fc\u30eb\u3001nply\u306fGitHub\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059: GitHub - alphaKAI/nply\n\nkqueue\u3068\u306f\u3002\nkqueue\u3068\u306fFreeBSD\u306bFreeBSD 4.1-RELEASE\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3067\u3059\u3002\nOS X\u306fBSD\u7cfb\u306a\u306e\u3067\u3001\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\nD\u8a00\u8a9e\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u672c\u6765core.sys.darwin.sys.event\u3092import\u3059\u308b\u3060\u3051\u3067\u4f7f\u3048\u308b\u306f\u305a\u306a\u306e\u306b\u306a\u3093\u304b\u30ea\u30f3\u30af\u306b\u5931\u6557\u3059\u308b\u306e\u3067\u5168\u304f\u540c\u3058\u5185\u5bb9\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5225\u9014\u4f5c\u3063\u3066\u305d\u308c\u3092import\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059...\u305f\u3076\u3093\u306a\u3093\u304bcore.sys.darwin.sys.event\u304c\u30d3\u30eb\u30c9\u6642\u306b\u306a\u3093\u304bdmd\u304b\u3089\u8aad\u307e\u308c\u306a\u3044\u3063\u307d\u3044\u3067\u3059\u306d(\u305d\u308c\u306f\u305d\u3046)\n\u3068\u308a\u3042\u3048\u305a\u3001\u4f7f\u3046D\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092kqueuez.d\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067core.sys.darwin.sys.event\u306e\u4e2d\u8eab\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\nkqueuez.d\n/**\n * D header file for Darwin.\n *\n * Copyright: Copyright Martin Nowak 2012. Etienne Cimon 2015.\n * License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n * Authors:   Martin Nowak\n */\n\n/*          Copyright Martin Nowak 2012. Etienne Cimon 2015.\n * Distributed under the Boost Software License, Version 1.0.\n *    (See accompanying file LICENSE or copy at\n *          http://www.boost.org/LICENSE_1_0.txt)\n */\n\nversion (OSX)\n    version = Darwin;\nelse version (iOS)\n    version = Darwin;\nelse version (TVOS)\n    version = Darwin;\nelse version (WatchOS)\n    version = Darwin;\n\nversion (Darwin):\nextern (C):\nnothrow:\n@nogc:\n\nimport core.stdc.stdint;    // intptr_t, uintptr_t\nimport core.sys.posix.time; // timespec\n\nenum : short\n{\n    EVFILT_READ     =  -1,\n    EVFILT_WRITE    =  -2,\n    EVFILT_AIO      =  -3, /* attached to aio requests */\n    EVFILT_VNODE    =  -4, /* attached to vnodes */\n    EVFILT_PROC     =  -5, /* attached to struct proc */\n    EVFILT_SIGNAL   =  -6, /* attached to struct proc */\n    EVFILT_TIMER    =  -7, /* timers */\n    EVFILT_MACHPORT =  -8, /* Mach portsets */\n    EVFILT_FS       =  -9, /* filesystem events */\n    EVFILT_USER     = -10, /* User events */\n    EVFILT_VM       = -12, /* virtual memory events */\n    EVFILT_SYSCOUNT =  11\n}\n\nextern(D) void EV_SET(kevent_t* kevp, typeof(kevent_t.tupleof) args)\n{\n    *kevp = kevent_t(args);\n}\n\nstruct kevent_t\n{\n    uintptr_t    ident; /* identifier for this event */\n    short       filter; /* filter for event */\n    ushort       flags;\n    uint        fflags;\n    intptr_t      data;\n    void        *udata; /* opaque user data identifier */\n}\n\nenum\n{\n    /* actions */\n    EV_ADD      = 0x0001, /* add event to kq (implies enable) */\n    EV_DELETE   = 0x0002, /* delete event from kq */\n    EV_ENABLE   = 0x0004, /* enable event */\n    EV_DISABLE  = 0x0008, /* disable event (not reported) */\n\n    /* flags */\n    EV_ONESHOT  = 0x0010, /* only report one occurrence */\n    EV_CLEAR    = 0x0020, /* clear event state after reporting */\n    EV_RECEIPT  = 0x0040, /* force EV_ERROR on success, data=0 */\n    EV_DISPATCH = 0x0080, /* disable event after reporting */\n\n    EV_SYSFLAGS = 0xF000, /* reserved by system */\n    EV_FLAG1    = 0x2000, /* filter-specific flag */\n\n    /* returned values */\n    EV_EOF      = 0x8000, /* EOF detected */\n    EV_ERROR    = 0x4000, /* error, data contains errno */\n}\n\nenum\n{\n    /*\n     * data/hint flags/masks for EVFILT_USER, shared with userspace\n     *\n     * On input, the top two bits of fflags specifies how the lower twenty four\n     * bits should be applied to the stored value of fflags.\n     *\n     * On output, the top two bits will always be set to NOTE_FFNOP and the\n     * remaining twenty four bits will contain the stored fflags value.\n     */\n    NOTE_FFNOP      = 0x00000000, /* ignore input fflags */\n    NOTE_FFAND      = 0x40000000, /* AND fflags */\n    NOTE_FFOR       = 0x80000000, /* OR fflags */\n    NOTE_FFCOPY     = 0xc0000000, /* copy fflags */\n    NOTE_FFCTRLMASK = 0xc0000000, /* masks for operations */\n    NOTE_FFLAGSMASK = 0x00ffffff,\n\n    NOTE_TRIGGER    = 0x01000000, /* Cause the event to be\n                                  triggered for output. */\n\n    /*\n     * data/hint flags for EVFILT_{READ|WRITE}, shared with userspace\n     */\n    NOTE_LOWAT      = 0x0001, /* low water mark */\n\n    /*\n     * data/hint flags for EVFILT_VNODE, shared with userspace\n     */\n    NOTE_DELETE     = 0x0001, /* vnode was removed */\n    NOTE_WRITE      = 0x0002, /* data contents changed */\n    NOTE_EXTEND     = 0x0004, /* size increased */\n    NOTE_ATTRIB     = 0x0008, /* attributes changed */\n    NOTE_LINK       = 0x0010, /* link count changed */\n    NOTE_RENAME     = 0x0020, /* vnode was renamed */\n    NOTE_REVOKE     = 0x0040, /* vnode access was revoked */\n\n    /*\n     * data/hint flags for EVFILT_PROC, shared with userspace\n     */\n    NOTE_EXIT       = 0x80000000, /* process exited */\n    NOTE_FORK       = 0x40000000, /* process forked */\n    NOTE_EXEC       = 0x20000000, /* process exec'd */\n    NOTE_PCTRLMASK  = 0xf0000000, /* mask for hint bits */\n    NOTE_PDATAMASK  = 0x000fffff, /* mask for pid */\n\n    /* additional flags for EVFILT_PROC */\n    NOTE_TRACK      = 0x00000001, /* follow across forks */\n    NOTE_TRACKERR   = 0x00000002, /* could not track child */\n    NOTE_CHILD      = 0x00000004, /* am a child process */\n}\n\nint kqueue();\nint kevent(int kq, const kevent_t *changelist, int nchanges,\n           kevent_t *eventlist, int nevents,\n           const timespec *timeout);\n\n\n\nkqueue\u306e\u4f8b\nD\u8a00\u8a9e\u3067kqueue\u3092\u4f7f\u3063\u3066\u898b\u308b\u4f8b\u3092\u3001NetBSD Wiki\u306b\u3042\u308bC\u8a00\u8a9e\u306b\u3088\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(kqueue turorial)\u3092\u53c2\u8003\u306b\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4eca\u56de\u306e\u306eNow Playing\u30c4\u30fc\u30eb\u3067\u3082\u4f7f\u3046timer\u306e\u4f8b\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\nC\u8a00\u8a9e\u3067\u306e\u4f8b\u306f\u5148\u306eWiki\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\nktimer.d\nimport kqueuez,\n       core.sys.posix.sys.time,\n       core.sys.posix.unistd;\nimport core.thread;\nimport core.stdc.stdlib,\n       core.stdc.string;\nimport std.process,\n       std.string,\n       std.stdio;\n\nvoid main() {\n  kevent_t change,\n           event;\n  int kq,\n      nev;\n\n  if ((kq = kqueue()) == -1) {\n    throw new Error(\"kqueue()\");\n  }\n\n  // Set timer: 5000msec(5sec)\n  EV_SET(&change, 1, EVFILT_TIMER, EV_ADD | EV_ENABLE, 0, 5000, null);\n\n  // Event Loop\n  for (;;) {\n    nev = kevent(kq, &change, 1, &event, 1, null);\n\n    if (nev < 0) {\n      throw new Error(\"kevent()\");\n    } else if (nev > 0) {\n      if (event.flags & EV_ERROR) {\n        throw new Error(\"EV_ERROR: \" ~ strerror(cast(int)event.data).fromStringz);\n      }\n\n      new Thread({\n        spawnProcess(\"date\");\n      }).start;\n    }\n  }\n\n  close(kq);\n}\n\n\n\u3053\u308c\u30675\u79d2\u304a\u304d\u306bdate\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3053\u308c\u3092\u3082\u3068\u306b\u3057\u307e\u3059\u3002\n\nD\u8a00\u8a9e\u3067iTunes\u3067\u73fe\u5728\u518d\u751f\u4e2d\u306e\u66f2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u5f97\u308b\u3002\n\u3053\u308c\u306f\u4ee5\u524d\u306b\u5225\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u66f8\u3044\u305f\u3053\u3068\u3092\u62e1\u5f35\u3059\u308b\u611f\u3058\u3067\u3059\u306e\u3067\u57fa\u672c\u7684\u306b\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\nOSX\u3067Objective-C\u3092\u7528\u3044\u3066iTunes\u304c\u73fe\u5728\u518d\u751f\u3057\u3066\u3044\u308b\u697d\u66f2\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5(& D\u8a00\u8a9e\u3067Now Playing\u3092\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u65b9\u6cd5)\n\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001D\u8a00\u8a9e\u3067\u76f4\u63a5iTunes\u306e\u60c5\u5831\u3092\u5f97\u308b\u306e\u306f\u7121\u7406\u306a\u306e\u3067Objective-C\u3092\u4f7f\u3044\u307e\u3059\u3002Objective-C\u3067Scripting Binding\u3092\u4f7f\u3063\u3066\u60c5\u5831\u3092\u5f97\u3066\u305d\u308c\u3092D\u8a00\u8a9e\u304c\u308f\u304b\u3089\u53d7\u3051\u53d6\u308b\u3001\u305d\u3046\u3044\u3046\u611f\u3058\u3067\u60c5\u5831\u3092\u5f97\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306eNow Playing\u30c4\u30fc\u30eb\u306f\u524d\u56de\u306e\u8a18\u4e8b\u304b\u3089\u3061\u3083\u3093\u3068\u30d1\u30ef\u30fc\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001\u30a2\u30fc\u30c8\u30ef\u30fc\u30af\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u305d\u306e\u30a2\u30fc\u30c8\u30ef\u30fc\u30af\u3092\u53d6\u5f97\u3057\u753b\u50cf\u4ed8\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001Objective-C\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3059\u3002\n\u4e8b\u524d\u306bXcode\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001sdef\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\n$ sdef /Applications/iTunes.app | sdp -fh --basename iTunes\n\u30b3\u30de\u30f3\u30c9\u3067iTunes.h\u3092\u751f\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\niTunes.mm\n#include <stdlib.h>\n#include <stdbool.h>\n#import \"iTunes.h\"\n\nvoid* xmalloc(size_t size) {\n  void* ret = malloc(size);\n\n  if (ret == NULL) {\n    fprintf(stderr, \"FATAL ERROR - malloc failed to allocate the memory.\\n\");\n\n    exit(EXIT_FAILURE);\n  }\n\n  return ret;\n}\n\nextern \"C\" {\n  struct Artwork {\n    unsigned char* data;\n    size_t         length;\n  };\n\n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  };\n\n  bool checkiTunesIsRunning() { return [[SBApplication applicationWithBundleIdentifier:@\"com.apple.iTunes\"] isRunning]; }\n\n  struct Music* getCurrentiTunesPlay() {\n    iTunesApplication* iTunes  = NULL;\n    iTunesTrack*       current = NULL;\n    struct Music*      music   = NULL;\n\n    if (!checkiTunesIsRunning()) {\n      return music;\n    }\n\n    music   = (Music*)xmalloc(sizeof(Music));\n    iTunes  = [SBApplication applicationWithBundleIdentifier:@\"com.apple.iTunes\"];\n    current = [iTunes currentTrack];\n\n    music->name   = [[current name]   UTF8String];\n    music->album  = [[current album]  UTF8String];\n    music->artist = [[current artist] UTF8String];\n\n    SBElementArray<iTunesArtwork*>* artworks = [current artworks];\n    Artwork*                        artwork  = NULL;\n\n    for (iTunesArtwork* _artwork in artworks) {\n      artwork         = (Artwork*)xmalloc(sizeof(Artwork));\n      artwork->length = [[_artwork rawData] length];\n\n      if (artwork->length) {\n        artwork->data = (unsigned char*)xmalloc(artwork->length);\n\n        memcpy(artwork->data, [[_artwork rawData] bytes], artwork->length);\n      } else {\n        artwork->data = NULL;\n      }\n    }\n\n    music->artwork = artwork;\n\n    return music;\n  }\n\n  void freeMusic(Music* music) {\n    if (music->artwork != NULL && music->artwork->length) {\n      free(music->artwork->data);\n      music->artwork->data = NULL;\n    }\n    free(music->artwork);\n    music->artwork = NULL;\n    free(music);\n    music = NULL;\n  }\n}\n\n\n\u3053\u308c\u3092D\u8a00\u8a9e\u5074\u304b\u3089\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u547c\u3073\u51fa\u3059\u306e\u306f\u7c21\u5358\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u3002\n\ntest.d\nimport std.string,\n       std.stdio;\n\nextern(C) {\n  struct Artwork {\n    ubyte* data;\n    size_t length;\n  };\n\n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  }\n\n  Music* getCurrentiTunesPlay();\n  void freeMusic(Music* music);\n}\n\nvoid main() {\n  Music* music = checkTrackChange;\n\n  string name   = cast(string)fromStringz(music.name),\n         album  = cast(string)fromStringz(music.album),\n         artist = cast(string)fromStringz(music.artist);\n\n  writeln(\"NowPlaying:\");\n  writeln(\"name   : \", name);\n  writeln(\"album  : \", album);\n  writeln(\"artist : \", artist);\n\n  freeMusic(music);\n}\n\n\n\u3053\u308c\u3067\n$ gcc -c iTunes.mm\n$ dmd test iTunes.o -L-framework -LFoundation -L-framework -LiTunesLibrary -L-framework -LScriptingBridge\n\n\u3068\u3059\u308b\u3068\u30ea\u30f3\u30af\u51fa\u6765\u307e\u3059\u3002\n\n\u753b\u50cf\u3064\u304d\u3067\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3002\n\u4eca\u56de\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u62d9\u4f5c\u306eTwitter4D\u306bcustomUrlRequest\u3068\u3044\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306fhttps://api.twitter.com/1.1/\u4ee5\u5916\u306e\u30d9\u30fc\u30b9url\u306eAPI\u3092\u30b3\u30fc\u30eb\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\nTwitter\u3067(\u516c\u5f0f\u306eAPI\u306e\u307f\u3092\u7528\u3044\u3066)\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u306b\u306fhttps://upload.twitter.com/1.1/\u306emedia/upload.json\u306b\u753b\u50cf\u3092base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066media_data\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066POST\u3057\u3066\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9&media_id\u3092\u53d6\u5f97\u3057\n\u30c4\u30a4\u30fc\u30c8\u3092\u884c\u3046statuses/update.json\u306bmedia_ids\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u53d6\u5f97\u3057\u3066\u304d\u305fmedia_id\u3092(\u8907\u6570\u679a\u306e\u3068\u304d\u306f\u305d\u308c\u305e\u308cmedia_id\u3092\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u7d50\u5408\u3057\u3066)\u6e21\u3059\u3068\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u304c\u51fa\u6765\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\nimport std.base64,\n       std.json;\nimport twitter4d;\n\nvoid main() {\n  Twitter4D t4d = new Twitter4D([\n            \"consumerKey\"       : \"\",\n            \"consumerSecret\"    : \"\",\n            \"accessToken\"       : \"\",\n            \"accessTokenSecret\" : \"\"]);\n  ubyte[] buf;//\u3053\u3053\u306b\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u3092\u3044\u308c\u308b\n\n  /* \u4e2d\u7565(\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b) */\n\n  string encoded = Base64.encode(buf);\n\n  // upload a image and fetch a media_id\n  auto parsed =   parseJSON((t4d.customUrlRequest(\"https://upload.twitter.com/1.1/\", \"POST\", \"media/upload.json\", [\"media_data\": encoded])));\n  string media_id = parsed.object[\"media_id_string\"].str;\n\n  // Tweet with a image!\n  t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : \"Tweet with a image!\", \"media_ids\" : media_id]);\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3092\u3057\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u6750\u6599\u306f\u63c3\u3044\u307e\u3057\u305f\u3002\n\u4eca\u304b\u3089\u3053\u308c\u3089\u3092\u304f\u3063\u3064\u3051\u3066\u3048\u3044\u3084\u3063\u3068\u3057\u3066\u3001Now Playing\u30c4\u30fc\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u4f5c\u308b\u3002\n\u4ed5\u69d8\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u8d77\u52d5\u6642\u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304b\u3089ConsumerKey\u3068\u304b\u3092\u8aad\u307f\u8fbc\u307f\u3001Twitter4D\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b(\u521d\u671f\u5316)\n5\u79d2\u304a\u304d\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bkqueue\u3067\u30bf\u30a4\u30de\u30fc\u30a4\u30d9\u30f3\u30c8\u3092\u4f5c\u308b\u3002\n\u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u30675\u79d2\u304a\u304d\u306b\u30eb\u30fc\u30d7\u304c\u56de\u308b\u3002\u3053\u3053\u3067\u3001\u73fe\u5728\u518d\u751f\u4e2d\u306e\u697d\u66f2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\u518d\u751f\u4e2d\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u524d\u56de\u53d6\u5f97\u6642\u3068\u5909\u5316\u304c\u306a\u3044\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u305b\u305a\u3001\u518d\u751f\u4e2d\u304b\u3064\u3001\u524d\u56de\u53d6\u5f97\u6642\u3068\u9055\u3046\u697d\u66f2\u304c\u518d\u751f\u4e2d\u306b\u306e\u307f\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066nply\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nnply.d\nimport kqueuez,\n       core.sys.posix.sys.time,\n       core.sys.posix.unistd;\nimport core.thread;\nimport core.stdc.stdlib,\n       core.stdc.string;\nimport std.algorithm,\n       std.base64,\n       std.string,\n       std.range,\n       std.ascii,\n       std.stdio,\n       std.json,\n       std.conv;\nimport twitter4d;\n\nextern(C) {\n  struct Artwork {\n    ubyte* data;\n    size_t length;\n  };\n\n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  }\n\n  Music* getCurrentiTunesPlay();\n  void freeMusic(Music* music);\n}\n\nstruct Env {\n  Twitter4D t4d;\n  Music*    music;\n  string currentMusic,\n         previousMusic;\n}\n\nstatic Env E;\n\nprivate static string getJsonData(JSONValue parsedJson, string key) {\n  return parsedJson.object[key].str;\n}\n\nprivate static string readFile(string filePath) {\n  auto file = File(filePath, \"r\");\n  string buf;\n\n  foreach(line; file.byLine) {\n    buf = buf ~ cast(string)line;\n  }\n\n  return buf;\n}\n\nprivate static string[string] buildAuthHash(JSONValue parsed) {\n  return [\n            \"consumerKey\"       : getJsonData(parsed, \"consumerKey\"),\n            \"consumerSecret\"    : getJsonData(parsed, \"consumerSecret\"),\n            \"accessToken\"       : getJsonData(parsed, \"accessToken\"),\n            \"accessTokenSecret\" : getJsonData(parsed, \"accessTokenSecret\")\n  ];\n}\n\nprivate static void init() {\n  auto keys = parseJSON(readFile(\"settings.json\")).buildAuthHash;\n\n  E.t4d = new Twitter4D(keys);\n}\n\nprivate static Music* checkTrackChange() {\n  with (E) {\n    music = getCurrentiTunesPlay;\n\n    if (music is null) {\n      writeln(\"iTunes is playing music.\");\n\n      return null;\n    }\n\n    currentMusic = cast(string)fromStringz(music.name).idup;\n\n    if (currentMusic == \"\") {\n      freeMusic(music);\n\n      return null;\n    }\n\n    if (currentMusic != previousMusic) {\n      return music;\n    } else {\n      freeMusic(music);\n\n      return null;\n    }\n  }\n}\n\nprivate static void tweet() {\n  with (E) {\n    music = checkTrackChange;\n\n    if (music is null) {\n      return;\n    }\n\n    string name   = cast(string)fromStringz(music.name),\n           album  = cast(string)fromStringz(music.album),\n           artist = cast(string)fromStringz(music.artist);\n    string nowPlayingString = \"Now Playing: \" ~ name ~ \" from \" ~ album ~ \" (\" ~ artist ~ \") #NowPlaying\";\n\n    currentMusic  = name.idup;\n    previousMusic = name.idup;\n\n    writeln(\"NowPlaying:\");\n    writefln(\"name   : %s\", name);\n    writefln(\"album  : %s\", album);\n    writefln(\"artist : %s\", artist);\n    writeln;\n\n    writeln(\"[Tweet] - \", nowPlayingString);\n\n    Artwork* artwork = music.artwork;\n\n    if (artwork !is null) {\n      ubyte[] buf;\n      buf.length = artwork.length;\n      memcpy(buf.ptr, artwork.data, buf.length);\n\n      string encoded = Base64.encode(buf);\n\n      auto parsed = parseJSON((t4d.customUrlRequest(\"https://upload.twitter.com/1.1/\", \"POST\", \"media/upload.json\", [\"media_data\": encoded])));\n\n      if (\"media_id_string\" in parsed.object) {\n        string media_id = parsed.object[\"media_id_string\"].str;\n\n        t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString, \"media_ids\" : media_id]);\n      } else {\n        t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString]);\n      }\n\n    } else {\n      t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString]);\n    }\n\n    freeMusic(music);\n  }\n}\n\nvoid diep(string msg) {\n  stderr.writeln(\"[ERROR] \", msg);\n  exit(EXIT_FAILURE);\n}\n\nvoid main() {\n  init;\n\n  kevent_t change,\n           event;\n  int kq, nev;\n\n  if ((kq = kqueue()) == -1) {\n    diep(\"kqueue()\");\n  }\n\n  EV_SET(&change, 1, EVFILT_TIMER, EV_ADD | EV_ENABLE, 0, 5000, null);\n\n  for (;;) {\n    nev = kevent(kq, &change, 1, &event, 1, null);\n\n    if (nev < 0) {\n      diep(\"kevent()\");\n    } else if (nev > 0) {\n      if (event.flags & EV_ERROR) {\n        stderr.writefln(\"EV_ERROR: %s\", strerror(cast(int)event.data).fromStringz);\n        exit(EXIT_FAILURE);\n      }\n\n      tweet;\n    }\n  }\n\n  close(kq);\n  exit(EXIT_SUCCESS);\n}\n\n\n\u3053\u3053\u307e\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u305f\u5f8c\u306b(\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306btwitter4d.d, nply.d, kqueuez.d, iTunes.mm, iTunes.h\u304c\u5b58\u5728\u3059\u308b\u72b6\u614b\u3067)\n$ gcc -c iTunes.mm\n$ dmd nply.d twitter4d.d kqueuez.d iTunes.o -L-framework -LFoundation -L-framework -LiTunesLibrary -L-framework -LScriptingBridge\n\n\u3053\u308c\u3067nply\u3068\u3044\u3046\u30d0\u30a4\u30ca\u30ea\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u4f7f\u3046\u524d\u306bsettings.json\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308aConsumerKey\u3068\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002(\u3053\u308c\u306f\u81ea\u5206\u3067\u53d6\u5f97\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\u307e\u305f\u3001AccessToken\u7b49\u306f\u62d9\u4f5c\u306eaccessTokenGetter\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059(\u3082\u3063\u3068\u3082\u3001ConsumerKey\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u3001\u53d6\u5f97\u3057\u305f\u30a2\u30ab\u30a6\u30f3\u30c8\u5411\u3051\u306eAccessToken\u306f\u305d\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u304c...)\n\u5b9f\u969b\u306b\u52d5\u4f5c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u30c4\u30a4\u30fc\u30c8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\nNow Playing: \u30af\u30ea\u30b9\u30de\u30b9\u30bd\u30f3\u30b0 from \u30a2\u30f3\u30b3\u30fc\u30eb (back number) #NowPlaying pic.twitter.com/Lf1GV31zcV\u2014 \u03b1\u6539 (@alpha_kai_NET) December 20, 2016\n\n\n\u304a\u308f\u308a\u306b\n\u79c1\u306f\u3053\u308c\u307e\u3067\u306a\u306b\u304b\u3092\u5f85\u3064\u3068\u3044\u3046\u3068\u304d\u306b\u6240\u8b02busy wait\u3092\u3057\u3066\u3044\u307e\u3057\u305f...(while(true) {}\u3067\u4e2d\u3067if\u3067\u6761\u4ef6\u304ctrue\u306b\u306a\u308b\u307e\u3067\u5f85\u3064\u307f\u305f\u3044\u306a\u3084\u3064\u3067\u3059)\n\u3060\u3051\u3069\u3001\u305d\u308c\u3067\u306f\u7121\u9650\u306bCPU\u30ea\u30bd\u30fc\u30b9\u3092\u98df\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306fkqueue\u3092\u4f7f\u3063\u3066\u3044\u3044\u611f\u3058\u306b\u66f2\u304c\u5909\u308f\u308b\u306e\u3092\u5f85\u3064\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u79c1\u306fTwitter\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u901a\u77e5\u30c4\u30fc\u30eb(twitnotify)\u3068\u4eca\u56de\u306enply\u306a\u3069Twitter\u306b\u95a2\u3059\u308b\u30c4\u30fc\u30eb\u3092D\u8a00\u8a9e\u3067\u6574\u3048\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u4eca\u56de\u306eAdvent Calender\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bfdilo\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eChickenClisp\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3057\u3001\u4eca\u56de\u7d39\u4ecb\u306f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u79c1\u306f(\u3059\u3054\u304f\u3086\u3063\u304f\u308a\u3067\u3059\u3057\u6a5f\u80fd\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c)\u30b7\u30a7\u30eb(\u3082\u3069\u304d)dsh\u3082D\u8a00\u8a9e\u3067\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u79c1\u306f\u3053\u308c\u3089\u3092\u81ea\u5206\u306e\u751f\u6d3b\u74b0\u5883\u3068\u3044\u3046\u3088\u3046\u306b\u547c\u3093\u3067\u3044\u3066\u3001\u81ea\u5206\u3067\u751f\u6d3b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u306f\u3068\u3066\u3082\u697d\u3057\u3044\u3067\u3059\u7b11\n\u5b9f\u969b\u306b\u6e21\u3057\u304c\u666e\u6bb5\u4f7f\u3063\u3066\u308b\u8a00\u8a9e\u306fD, \u30a8\u30c7\u30a3\u30bf\u306fVim(MacVim), \u30b7\u30a7\u30eb\u306fzsh\u3067\u3042\u3063\u3066\u3001\u81ea\u5206\u3067\u4f5c\u3063\u305f\u3082\u306e\u3092\u5b9f\u969b\u306b\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u958b\u767a\u3059\u308b\u3053\u3068\u3067\u666e\u6bb5\u4f7f\u3063\u3066\u3044\u308b\u74b0\u5883\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u81ea\u5206\u3067\u4f5c\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3068\u3066\u3082\u697d\u3057\u3044\u3067\u3059\u3002\n\u307f\u306a\u3055\u3093\u3082\u3001D\u8a00\u8a9e\u3067(\u3082\u3057\u304f\u306f\u4ed6\u306e\u8cb4\u65b9\u306e\u597d\u304d\u306a\u8a00\u8a9e\u3067)\u751f\u6d3b\u74b0\u5883\u3092\u6574\u3048\u3066\u307f\u307e\u305b\u3093\u304b?\u7b11\n\u3067\u306f\u3067\u306f\u3001\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\n\u306f\u3044\u3069\u3046\u3082\u3002\u306a\u3093\u304b20\u65e5\u306e\u67a0\u304c\u7a7a\u3044\u3066\u305f\u306e\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f...(D\u8a00\u8a9eAdvent Calendar\u3092\u57cb\u3081\u305f\u304b\u3063\u305f\u306e\u3067)\n\u305d\u308c\u3067\u3001\u30cd\u30bf\u3068\u3057\u3066\u6700\u8fd1\u3061\u3087\u308d\u3063\u3068\u66f8\u3044\u305fMac\u306eiTunes\u5411\u3051\u306eNow Playing\u30c4\u30fc\u30eb\u3092kqueue\u3092\u4f7f\u3063\u3066\u4f5c\u3063\u305f\u306e\u3067\u305d\u308c\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u4eca\u56de\u4f5c\u308b\u30c4\u30fc\u30eb\u3001nply\u306fGitHub\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059: [GitHub - alphaKAI/nply](https://github.com/alphaKAI/nply/)\n\n#kqueue\u3068\u306f\u3002\nkqueue\u3068\u306fFreeBSD\u306bFreeBSD 4.1-RELEASE\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3067\u3059\u3002\nOS X\u306fBSD\u7cfb\u306a\u306e\u3067\u3001\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\nD\u8a00\u8a9e\u3067\u4f7f\u3046\u5834\u5408\u306f\u3001\u672c\u6765`core.sys.darwin.sys.event`\u3092import\u3059\u308b\u3060\u3051\u3067\u4f7f\u3048\u308b\u306f\u305a\u306a\u306e\u306b\u306a\u3093\u304b\u30ea\u30f3\u30af\u306b\u5931\u6557\u3059\u308b\u306e\u3067\u5168\u304f\u540c\u3058\u5185\u5bb9\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5225\u9014\u4f5c\u3063\u3066\u305d\u308c\u3092import\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059...\u305f\u3076\u3093\u306a\u3093\u304b`core.sys.darwin.sys.event`\u304c\u30d3\u30eb\u30c9\u6642\u306b\u306a\u3093\u304bdmd\u304b\u3089\u8aad\u307e\u308c\u306a\u3044\u3063\u307d\u3044\u3067\u3059\u306d(\u305d\u308c\u306f\u305d\u3046)\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4f7f\u3046D\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092`kqueuez.d`\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067`core.sys.darwin.sys.event`\u306e\u4e2d\u8eab\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```D:kqueuez.d\n/**\n * D header file for Darwin.\n *\n * Copyright: Copyright Martin Nowak 2012. Etienne Cimon 2015.\n * License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n * Authors:   Martin Nowak\n */\n\n/*          Copyright Martin Nowak 2012. Etienne Cimon 2015.\n * Distributed under the Boost Software License, Version 1.0.\n *    (See accompanying file LICENSE or copy at\n *          http://www.boost.org/LICENSE_1_0.txt)\n */\n\nversion (OSX)\n    version = Darwin;\nelse version (iOS)\n    version = Darwin;\nelse version (TVOS)\n    version = Darwin;\nelse version (WatchOS)\n    version = Darwin;\n\nversion (Darwin):\nextern (C):\nnothrow:\n@nogc:\n\nimport core.stdc.stdint;    // intptr_t, uintptr_t\nimport core.sys.posix.time; // timespec\n\nenum : short\n{\n    EVFILT_READ     =  -1,\n    EVFILT_WRITE    =  -2,\n    EVFILT_AIO      =  -3, /* attached to aio requests */\n    EVFILT_VNODE    =  -4, /* attached to vnodes */\n    EVFILT_PROC     =  -5, /* attached to struct proc */\n    EVFILT_SIGNAL   =  -6, /* attached to struct proc */\n    EVFILT_TIMER    =  -7, /* timers */\n    EVFILT_MACHPORT =  -8, /* Mach portsets */\n    EVFILT_FS       =  -9, /* filesystem events */\n    EVFILT_USER     = -10, /* User events */\n    EVFILT_VM       = -12, /* virtual memory events */\n    EVFILT_SYSCOUNT =  11\n}\n\nextern(D) void EV_SET(kevent_t* kevp, typeof(kevent_t.tupleof) args)\n{\n    *kevp = kevent_t(args);\n}\n\nstruct kevent_t\n{\n    uintptr_t    ident; /* identifier for this event */\n    short       filter; /* filter for event */\n    ushort       flags;\n    uint        fflags;\n    intptr_t      data;\n    void        *udata; /* opaque user data identifier */\n}\n\nenum\n{\n    /* actions */\n    EV_ADD      = 0x0001, /* add event to kq (implies enable) */\n    EV_DELETE   = 0x0002, /* delete event from kq */\n    EV_ENABLE   = 0x0004, /* enable event */\n    EV_DISABLE  = 0x0008, /* disable event (not reported) */\n\n    /* flags */\n    EV_ONESHOT  = 0x0010, /* only report one occurrence */\n    EV_CLEAR    = 0x0020, /* clear event state after reporting */\n    EV_RECEIPT  = 0x0040, /* force EV_ERROR on success, data=0 */\n    EV_DISPATCH = 0x0080, /* disable event after reporting */\n\n    EV_SYSFLAGS = 0xF000, /* reserved by system */\n    EV_FLAG1    = 0x2000, /* filter-specific flag */\n\n    /* returned values */\n    EV_EOF      = 0x8000, /* EOF detected */\n    EV_ERROR    = 0x4000, /* error, data contains errno */\n}\n\nenum\n{\n    /*\n     * data/hint flags/masks for EVFILT_USER, shared with userspace\n     *\n     * On input, the top two bits of fflags specifies how the lower twenty four\n     * bits should be applied to the stored value of fflags.\n     *\n     * On output, the top two bits will always be set to NOTE_FFNOP and the\n     * remaining twenty four bits will contain the stored fflags value.\n     */\n    NOTE_FFNOP      = 0x00000000, /* ignore input fflags */\n    NOTE_FFAND      = 0x40000000, /* AND fflags */\n    NOTE_FFOR       = 0x80000000, /* OR fflags */\n    NOTE_FFCOPY     = 0xc0000000, /* copy fflags */\n    NOTE_FFCTRLMASK = 0xc0000000, /* masks for operations */\n    NOTE_FFLAGSMASK = 0x00ffffff,\n\n    NOTE_TRIGGER    = 0x01000000, /* Cause the event to be\n                                  triggered for output. */\n\n    /*\n     * data/hint flags for EVFILT_{READ|WRITE}, shared with userspace\n     */\n    NOTE_LOWAT      = 0x0001, /* low water mark */\n\n    /*\n     * data/hint flags for EVFILT_VNODE, shared with userspace\n     */\n    NOTE_DELETE     = 0x0001, /* vnode was removed */\n    NOTE_WRITE      = 0x0002, /* data contents changed */\n    NOTE_EXTEND     = 0x0004, /* size increased */\n    NOTE_ATTRIB     = 0x0008, /* attributes changed */\n    NOTE_LINK       = 0x0010, /* link count changed */\n    NOTE_RENAME     = 0x0020, /* vnode was renamed */\n    NOTE_REVOKE     = 0x0040, /* vnode access was revoked */\n\n    /*\n     * data/hint flags for EVFILT_PROC, shared with userspace\n     */\n    NOTE_EXIT       = 0x80000000, /* process exited */\n    NOTE_FORK       = 0x40000000, /* process forked */\n    NOTE_EXEC       = 0x20000000, /* process exec'd */\n    NOTE_PCTRLMASK  = 0xf0000000, /* mask for hint bits */\n    NOTE_PDATAMASK  = 0x000fffff, /* mask for pid */\n\n    /* additional flags for EVFILT_PROC */\n    NOTE_TRACK      = 0x00000001, /* follow across forks */\n    NOTE_TRACKERR   = 0x00000002, /* could not track child */\n    NOTE_CHILD      = 0x00000004, /* am a child process */\n}\n\nint kqueue();\nint kevent(int kq, const kevent_t *changelist, int nchanges,\n           kevent_t *eventlist, int nevents,\n           const timespec *timeout);\n```\n\n##kqueue\u306e\u4f8b\nD\u8a00\u8a9e\u3067kqueue\u3092\u4f7f\u3063\u3066\u898b\u308b\u4f8b\u3092\u3001NetBSD Wiki\u306b\u3042\u308bC\u8a00\u8a9e\u306b\u3088\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb([kqueue turorial](https://wiki.netbsd.org/tutorials/kqueue_tutorial/))\u3092\u53c2\u8003\u306b\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4eca\u56de\u306e\u306eNow Playing\u30c4\u30fc\u30eb\u3067\u3082\u4f7f\u3046timer\u306e\u4f8b\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\nC\u8a00\u8a9e\u3067\u306e\u4f8b\u306f\u5148\u306eWiki\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n```D:ktimer.d\nimport kqueuez,\n       core.sys.posix.sys.time,\n       core.sys.posix.unistd;\nimport core.thread;\nimport core.stdc.stdlib,\n       core.stdc.string;\nimport std.process,\n       std.string,\n       std.stdio;\n\nvoid main() {\n  kevent_t change,\n           event;\n  int kq,\n      nev;\n\n  if ((kq = kqueue()) == -1) {\n    throw new Error(\"kqueue()\");\n  }\n\n  // Set timer: 5000msec(5sec)\n  EV_SET(&change, 1, EVFILT_TIMER, EV_ADD | EV_ENABLE, 0, 5000, null);\n\n  // Event Loop\n  for (;;) {\n    nev = kevent(kq, &change, 1, &event, 1, null);\n\n    if (nev < 0) {\n      throw new Error(\"kevent()\");\n    } else if (nev > 0) {\n      if (event.flags & EV_ERROR) {\n        throw new Error(\"EV_ERROR: \" ~ strerror(cast(int)event.data).fromStringz);\n      }\n\n      new Thread({\n        spawnProcess(\"date\");\n      }).start;\n    }\n  }\n\n  close(kq);\n}\n```\n\n\u3053\u308c\u30675\u79d2\u304a\u304d\u306b`date`\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3053\u308c\u3092\u3082\u3068\u306b\u3057\u307e\u3059\u3002\n\n#D\u8a00\u8a9e\u3067iTunes\u3067\u73fe\u5728\u518d\u751f\u4e2d\u306e\u66f2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u5f97\u308b\u3002\n\u3053\u308c\u306f\u4ee5\u524d\u306b\u5225\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u66f8\u3044\u305f\u3053\u3068\u3092\u62e1\u5f35\u3059\u308b\u611f\u3058\u3067\u3059\u306e\u3067\u57fa\u672c\u7684\u306b\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n[OSX\u3067Objective-C\u3092\u7528\u3044\u3066iTunes\u304c\u73fe\u5728\u518d\u751f\u3057\u3066\u3044\u308b\u697d\u66f2\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5(& D\u8a00\u8a9e\u3067Now Playing\u3092\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u65b9\u6cd5)](http://qiita.com/alpha_kai_NET/items/9a19c9a7ba1455b2153c)\n\n\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001D\u8a00\u8a9e\u3067\u76f4\u63a5iTunes\u306e\u60c5\u5831\u3092\u5f97\u308b\u306e\u306f\u7121\u7406\u306a\u306e\u3067Objective-C\u3092\u4f7f\u3044\u307e\u3059\u3002Objective-C\u3067Scripting Binding\u3092\u4f7f\u3063\u3066\u60c5\u5831\u3092\u5f97\u3066\u305d\u308c\u3092D\u8a00\u8a9e\u304c\u308f\u304b\u3089\u53d7\u3051\u53d6\u308b\u3001\u305d\u3046\u3044\u3046\u611f\u3058\u3067\u60c5\u5831\u3092\u5f97\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306eNow Playing\u30c4\u30fc\u30eb\u306f\u524d\u56de\u306e\u8a18\u4e8b\u304b\u3089\u3061\u3083\u3093\u3068\u30d1\u30ef\u30fc\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\u3068\u3044\u3046\u306e\u3082\u3001\u30a2\u30fc\u30c8\u30ef\u30fc\u30af\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u305d\u306e\u30a2\u30fc\u30c8\u30ef\u30fc\u30af\u3092\u53d6\u5f97\u3057\u753b\u50cf\u4ed8\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001Objective-C\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u307e\u3059\u3002\n\n\u4e8b\u524d\u306bXcode\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001sdef\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\n`$ sdef /Applications/iTunes.app | sdp -fh --basename iTunes`\n\u30b3\u30de\u30f3\u30c9\u3067`iTunes.h`\u3092\u751f\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```Objc:iTunes.mm\n#include <stdlib.h>\n#include <stdbool.h>\n#import \"iTunes.h\"\n\nvoid* xmalloc(size_t size) {\n  void* ret = malloc(size);\n\n  if (ret == NULL) {\n    fprintf(stderr, \"FATAL ERROR - malloc failed to allocate the memory.\\n\");\n\n    exit(EXIT_FAILURE);\n  }\n\n  return ret;\n}\n\nextern \"C\" {\n  struct Artwork {\n    unsigned char* data;\n    size_t         length;\n  };\n\n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  };\n\n  bool checkiTunesIsRunning() { return [[SBApplication applicationWithBundleIdentifier:@\"com.apple.iTunes\"] isRunning]; }\n\n  struct Music* getCurrentiTunesPlay() {\n    iTunesApplication* iTunes  = NULL;\n    iTunesTrack*       current = NULL;\n    struct Music*      music   = NULL;\n\n    if (!checkiTunesIsRunning()) {\n      return music;\n    }\n\n    music   = (Music*)xmalloc(sizeof(Music));\n    iTunes  = [SBApplication applicationWithBundleIdentifier:@\"com.apple.iTunes\"];\n    current = [iTunes currentTrack];\n\n    music->name   = [[current name]   UTF8String];\n    music->album  = [[current album]  UTF8String];\n    music->artist = [[current artist] UTF8String];\n\n    SBElementArray<iTunesArtwork*>* artworks = [current artworks];\n    Artwork*                        artwork  = NULL;\n\n    for (iTunesArtwork* _artwork in artworks) {\n      artwork         = (Artwork*)xmalloc(sizeof(Artwork));\n      artwork->length = [[_artwork rawData] length];\n\n      if (artwork->length) {\n        artwork->data = (unsigned char*)xmalloc(artwork->length);\n\n        memcpy(artwork->data, [[_artwork rawData] bytes], artwork->length);\n      } else {\n        artwork->data = NULL;\n      }\n    }\n\n    music->artwork = artwork;\n\n    return music;\n  }\n\n  void freeMusic(Music* music) {\n    if (music->artwork != NULL && music->artwork->length) {\n      free(music->artwork->data);\n      music->artwork->data = NULL;\n    }\n    free(music->artwork);\n    music->artwork = NULL;\n    free(music);\n    music = NULL;\n  }\n}\n```\n\n\u3053\u308c\u3092D\u8a00\u8a9e\u5074\u304b\u3089\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u547c\u3073\u51fa\u3059\u306e\u306f\u7c21\u5358\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u3002\n\n```D:test.d\nimport std.string,\n       std.stdio;\n\nextern(C) {\n  struct Artwork {\n    ubyte* data;\n    size_t length;\n  };\n  \n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  }\n\n  Music* getCurrentiTunesPlay();\n  void freeMusic(Music* music);\n}\n\nvoid main() {\n  Music* music = checkTrackChange;\n\n  string name   = cast(string)fromStringz(music.name),\n         album  = cast(string)fromStringz(music.album),\n         artist = cast(string)fromStringz(music.artist);\n\n  writeln(\"NowPlaying:\");\n  writeln(\"name   : \", name);\n  writeln(\"album  : \", album);\n  writeln(\"artist : \", artist);\n\n  freeMusic(music);\n}\n```\n\n\u3053\u308c\u3067\n\n```zsh\n$ gcc -c iTunes.mm\n$ dmd test iTunes.o -L-framework -LFoundation -L-framework -LiTunesLibrary -L-framework -LScriptingBridge\n```\n\n\u3068\u3059\u308b\u3068\u30ea\u30f3\u30af\u51fa\u6765\u307e\u3059\u3002\n\n\n##\u753b\u50cf\u3064\u304d\u3067\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3002\n\u4eca\u56de\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u62d9\u4f5c\u306eTwitter4D\u306bcustomUrlRequest\u3068\u3044\u3046\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f`https://api.twitter.com/1.1/`\u4ee5\u5916\u306e\u30d9\u30fc\u30b9url\u306eAPI\u3092\u30b3\u30fc\u30eb\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\nTwitter\u3067(\u516c\u5f0f\u306eAPI\u306e\u307f\u3092\u7528\u3044\u3066)\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u306b\u306f`https://upload.twitter.com/1.1/`\u306e`media/upload.json`\u306b\u753b\u50cf\u3092base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066media_data\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066POST\u3057\u3066\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9&media_id\u3092\u53d6\u5f97\u3057\n\u30c4\u30a4\u30fc\u30c8\u3092\u884c\u3046`statuses/update.json`\u306b`media_ids`\u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u53d6\u5f97\u3057\u3066\u304d\u305fmedia_id\u3092(\u8907\u6570\u679a\u306e\u3068\u304d\u306f\u305d\u308c\u305e\u308cmedia_id\u3092\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u7d50\u5408\u3057\u3066)\u6e21\u3059\u3068\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u304c\u51fa\u6765\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n```D\nimport std.base64,\n       std.json;\nimport twitter4d;\n\nvoid main() {\n  Twitter4D t4d = new Twitter4D([\n            \"consumerKey\"       : \"\",\n            \"consumerSecret\"    : \"\",\n            \"accessToken\"       : \"\",\n            \"accessTokenSecret\" : \"\"]);\n  ubyte[] buf;//\u3053\u3053\u306b\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u3092\u3044\u308c\u308b\n\n  /* \u4e2d\u7565(\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b) */\n\n  string encoded = Base64.encode(buf);\n\n  // upload a image and fetch a media_id\n  auto parsed =   parseJSON((t4d.customUrlRequest(\"https://upload.twitter.com/1.1/\", \"POST\", \"media/upload.json\", [\"media_data\": encoded])));\n  string media_id = parsed.object[\"media_id_string\"].str;\n\n  // Tweet with a image!\n  t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : \"Tweet with a image!\", \"media_ids\" : media_id]);\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u753b\u50cf\u3064\u304d\u30c4\u30a4\u30fc\u30c8\u3092\u3057\u307e\u3059\u3002\n\n\n\u3053\u3053\u307e\u3067\u3067\u6750\u6599\u306f\u63c3\u3044\u307e\u3057\u305f\u3002\n\u4eca\u304b\u3089\u3053\u308c\u3089\u3092\u304f\u3063\u3064\u3051\u3066\u3048\u3044\u3084\u3063\u3068\u3057\u3066\u3001Now Playing\u30c4\u30fc\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\n#\u5b9f\u969b\u306b\u4f5c\u308b\u3002\n\u4ed5\u69d8\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n1. \u8d77\u52d5\u6642\u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304b\u3089ConsumerKey\u3068\u304b\u3092\u8aad\u307f\u8fbc\u307f\u3001Twitter4D\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b(\u521d\u671f\u5316)\n2. 5\u79d2\u304a\u304d\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bkqueue\u3067\u30bf\u30a4\u30de\u30fc\u30a4\u30d9\u30f3\u30c8\u3092\u4f5c\u308b\u3002\n3. \u30a4\u30d9\u30f3\u30c8\u30eb\u30fc\u30d7\u30675\u79d2\u304a\u304d\u306b\u30eb\u30fc\u30d7\u304c\u56de\u308b\u3002\u3053\u3053\u3067\u3001\u73fe\u5728\u518d\u751f\u4e2d\u306e\u697d\u66f2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\u518d\u751f\u4e2d\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u524d\u56de\u53d6\u5f97\u6642\u3068\u5909\u5316\u304c\u306a\u3044\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u305b\u305a\u3001\u518d\u751f\u4e2d\u304b\u3064\u3001\u524d\u56de\u53d6\u5f97\u6642\u3068\u9055\u3046\u697d\u66f2\u304c\u518d\u751f\u4e2d\u306b\u306e\u307f\u30c4\u30a4\u30fc\u30c8\u3092\u3059\u308b\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066`nply`\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```D:nply.d\nimport kqueuez,\n       core.sys.posix.sys.time,\n       core.sys.posix.unistd;\nimport core.thread;\nimport core.stdc.stdlib,\n       core.stdc.string;\nimport std.algorithm,\n       std.base64,\n       std.string,\n       std.range,\n       std.ascii,\n       std.stdio,\n       std.json,\n       std.conv;\nimport twitter4d;\n\nextern(C) {\n  struct Artwork {\n    ubyte* data;\n    size_t length;\n  };\n  \n  struct Music {\n    const char* name;\n    const char* album;\n    const char* artist;\n    Artwork*    artwork;\n  }\n\n  Music* getCurrentiTunesPlay();\n  void freeMusic(Music* music);\n}\n\nstruct Env {\n  Twitter4D t4d;\n  Music*    music;\n  string currentMusic,\n         previousMusic;\n}\n\nstatic Env E;\n\nprivate static string getJsonData(JSONValue parsedJson, string key) {\n  return parsedJson.object[key].str;\n}\n\nprivate static string readFile(string filePath) {\n  auto file = File(filePath, \"r\");\n  string buf;\n\n  foreach(line; file.byLine) {\n    buf = buf ~ cast(string)line;\n  }\n\n  return buf;\n}\n\nprivate static string[string] buildAuthHash(JSONValue parsed) {\n  return [\n            \"consumerKey\"       : getJsonData(parsed, \"consumerKey\"),\n            \"consumerSecret\"    : getJsonData(parsed, \"consumerSecret\"),\n            \"accessToken\"       : getJsonData(parsed, \"accessToken\"),\n            \"accessTokenSecret\" : getJsonData(parsed, \"accessTokenSecret\")\n  ];\n}\n\nprivate static void init() {\n  auto keys = parseJSON(readFile(\"settings.json\")).buildAuthHash;\n\n  E.t4d = new Twitter4D(keys);\n}\n\nprivate static Music* checkTrackChange() {\n  with (E) {\n    music = getCurrentiTunesPlay;\n\n    if (music is null) {\n      writeln(\"iTunes is playing music.\");\n\n      return null;\n    }\n\n    currentMusic = cast(string)fromStringz(music.name).idup;\n\n    if (currentMusic == \"\") {\n      freeMusic(music);\n\n      return null;\n    }\n\n    if (currentMusic != previousMusic) {\n      return music;\n    } else {\n      freeMusic(music);\n\n      return null;\n    }\n  }\n}\n\nprivate static void tweet() {\n  with (E) {\n    music = checkTrackChange;\n\n    if (music is null) {\n      return;\n    }\n\n    string name   = cast(string)fromStringz(music.name),\n           album  = cast(string)fromStringz(music.album),\n           artist = cast(string)fromStringz(music.artist);\n    string nowPlayingString = \"Now Playing: \" ~ name ~ \" from \" ~ album ~ \" (\" ~ artist ~ \") #NowPlaying\";\n\n    currentMusic  = name.idup;\n    previousMusic = name.idup;\n\n    writeln(\"NowPlaying:\");\n    writefln(\"name   : %s\", name);\n    writefln(\"album  : %s\", album);\n    writefln(\"artist : %s\", artist);\n    writeln;\n\n    writeln(\"[Tweet] - \", nowPlayingString);\n\n    Artwork* artwork = music.artwork;\n\n    if (artwork !is null) {\n      ubyte[] buf;\n      buf.length = artwork.length;\n      memcpy(buf.ptr, artwork.data, buf.length);\n\n      string encoded = Base64.encode(buf);\n\n      auto parsed = parseJSON((t4d.customUrlRequest(\"https://upload.twitter.com/1.1/\", \"POST\", \"media/upload.json\", [\"media_data\": encoded])));\n\n      if (\"media_id_string\" in parsed.object) {\n        string media_id = parsed.object[\"media_id_string\"].str;\n\n        t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString, \"media_ids\" : media_id]);\n      } else {\n        t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString]);\n      }\n      \n    } else {\n      t4d.request(\"POST\", \"statuses/update.json\", [\"status\" : nowPlayingString]);\n    }\n\n    freeMusic(music);\n  }\n}\n\nvoid diep(string msg) {\n  stderr.writeln(\"[ERROR] \", msg);\n  exit(EXIT_FAILURE);\n}\n\nvoid main() {\n  init;\n\n  kevent_t change,\n           event;\n  int kq, nev;\n\n  if ((kq = kqueue()) == -1) {\n    diep(\"kqueue()\");\n  }\n\n  EV_SET(&change, 1, EVFILT_TIMER, EV_ADD | EV_ENABLE, 0, 5000, null);\n\n  for (;;) {\n    nev = kevent(kq, &change, 1, &event, 1, null);\n\n    if (nev < 0) {\n      diep(\"kevent()\");\n    } else if (nev > 0) {\n      if (event.flags & EV_ERROR) {\n        stderr.writefln(\"EV_ERROR: %s\", strerror(cast(int)event.data).fromStringz);\n        exit(EXIT_FAILURE);\n      }\n\n      tweet;\n    }\n  }\n\n  close(kq);\n  exit(EXIT_SUCCESS);\n}\n```\n\n\u3053\u3053\u307e\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u305f\u5f8c\u306b(\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b`twitter4d.d`, `nply.d`, `kqueuez.d`, `iTunes.mm`, `iTunes.h`\u304c\u5b58\u5728\u3059\u308b\u72b6\u614b\u3067)\n\n```zsh\n$ gcc -c iTunes.mm\n$ dmd nply.d twitter4d.d kqueuez.d iTunes.o -L-framework -LFoundation -L-framework -LiTunesLibrary -L-framework -LScriptingBridge\n```\n\n\u3053\u308c\u3067`nply`\u3068\u3044\u3046\u30d0\u30a4\u30ca\u30ea\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\u4f7f\u3046\u524d\u306b`settings.json`\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308aConsumerKey\u3068\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002(\u3053\u308c\u306f\u81ea\u5206\u3067\u53d6\u5f97\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\u307e\u305f\u3001AccessToken\u7b49\u306f\u62d9\u4f5c\u306e[accessTokenGetter](https://github.com/alphaKAI/accessTokenGetter)\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059(\u3082\u3063\u3068\u3082\u3001ConsumerKey\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u3001\u53d6\u5f97\u3057\u305f\u30a2\u30ab\u30a6\u30f3\u30c8\u5411\u3051\u306eAccessToken\u306f\u305d\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u304c...)\n\n\u5b9f\u969b\u306b\u52d5\u4f5c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306e\u30c4\u30a4\u30fc\u30c8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"ja\" dir=\"ltr\">Now Playing: \u30af\u30ea\u30b9\u30de\u30b9\u30bd\u30f3\u30b0 from \u30a2\u30f3\u30b3\u30fc\u30eb (back number) <a href=\"https://twitter.com/hashtag/NowPlaying?src=hash\">#NowPlaying</a> <a href=\"https://t.co/Lf1GV31zcV\">pic.twitter.com/Lf1GV31zcV</a></p>&mdash; \u03b1\u6539 (@alpha_kai_NET) <a href=\"https://twitter.com/alpha_kai_NET/status/811152013262061568\">December 20, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n#\u304a\u308f\u308a\u306b\n\u79c1\u306f\u3053\u308c\u307e\u3067\u306a\u306b\u304b\u3092`\u5f85\u3064`\u3068\u3044\u3046\u3068\u304d\u306b\u6240\u8b02busy wait\u3092\u3057\u3066\u3044\u307e\u3057\u305f...(while(true) {}\u3067\u4e2d\u3067if\u3067\u6761\u4ef6\u304ctrue\u306b\u306a\u308b\u307e\u3067\u5f85\u3064\u307f\u305f\u3044\u306a\u3084\u3064\u3067\u3059)\n\u3060\u3051\u3069\u3001\u305d\u308c\u3067\u306f\u7121\u9650\u306bCPU\u30ea\u30bd\u30fc\u30b9\u3092\u98df\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306fkqueue\u3092\u4f7f\u3063\u3066\u3044\u3044\u611f\u3058\u306b\u66f2\u304c\u5909\u308f\u308b\u306e\u3092`\u5f85\u3064`\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u79c1\u306fTwitter\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u901a\u77e5\u30c4\u30fc\u30eb([twitnotify](https://github.com/alphaKAI/twitnotify))\u3068\u4eca\u56de\u306enply\u306a\u3069Twitter\u306b\u95a2\u3059\u308b\u30c4\u30fc\u30eb\u3092D\u8a00\u8a9e\u3067\u6574\u3048\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u4eca\u56de\u306eAdvent Calender\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf[dilo](https://github.com/alphaKAI/dilo)\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e[ChickenClisp](https://github.com/alphaKAI/ChickenClisp)\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3057\u3001\u4eca\u56de\u7d39\u4ecb\u306f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u79c1\u306f(\u3059\u3054\u304f\u3086\u3063\u304f\u308a\u3067\u3059\u3057\u6a5f\u80fd\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c)\u30b7\u30a7\u30eb(\u3082\u3069\u304d)[dsh](https://github.com/alphaKAI/dsh)\u3082D\u8a00\u8a9e\u3067\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\u79c1\u306f\u3053\u308c\u3089\u3092\u81ea\u5206\u306e\u751f\u6d3b\u74b0\u5883\u3068\u3044\u3046\u3088\u3046\u306b\u547c\u3093\u3067\u3044\u3066\u3001\u81ea\u5206\u3067\u751f\u6d3b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u306f\u3068\u3066\u3082\u697d\u3057\u3044\u3067\u3059\u7b11\n\u5b9f\u969b\u306b\u6e21\u3057\u304c\u666e\u6bb5\u4f7f\u3063\u3066\u308b\u8a00\u8a9e\u306fD, \u30a8\u30c7\u30a3\u30bf\u306fVim(MacVim), \u30b7\u30a7\u30eb\u306fzsh\u3067\u3042\u3063\u3066\u3001\u81ea\u5206\u3067\u4f5c\u3063\u305f\u3082\u306e\u3092\u5b9f\u969b\u306b\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u958b\u767a\u3059\u308b\u3053\u3068\u3067\u666e\u6bb5\u4f7f\u3063\u3066\u3044\u308b\u74b0\u5883\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u81ea\u5206\u3067\u4f5c\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3068\u3066\u3082\u697d\u3057\u3044\u3067\u3059\u3002\n\u307f\u306a\u3055\u3093\u3082\u3001D\u8a00\u8a9e\u3067(\u3082\u3057\u304f\u306f\u4ed6\u306e\u8cb4\u65b9\u306e\u597d\u304d\u306a\u8a00\u8a9e\u3067)\u751f\u6d3b\u74b0\u5883\u3092\u6574\u3048\u3066\u307f\u307e\u305b\u3093\u304b?\u7b11\n\n\u3067\u306f\u3067\u306f\u3001\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\n", "tags": ["dlang", "Mac", "kqueue"]}