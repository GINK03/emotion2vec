{"tags": ["iOS", "Swift3.0"], "context": "\n\nDocument:Apple Swift Document\n\n\nRelease Notes:Official release notes\n\nimport UIKit\n\nclass ViewController: UIViewController\n{\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n\n        // \u4fee\u65391\uff1atraditional C-style for loop is deprecated\n        for i in 0..<3\n        {\n            print(i)\n        }\n\n        // ps. for var i = 3; i > 0; i-- {} can be write like blow:\n        for i in (0..<3).reverse()\n        {\n            print(i)\n        }\n\n        // ps. for var i = 0; i < 10; i+=2 {} can be write like blow:\n        for i in 0.stride(to: 10, by: 2)\n        {\n            print(i)\n        }\n\n        // \u4fee\u65392: selector will be checked in compile-time\n        let tap = UITapGestureRecognizer(target: self, action: #selector(selectorFunc))\n        view.addGestureRecognizer(tap)\n\n        // \u4fee\u65393: Swift version-check will be in compile-time\n        #if swift(>=2.2)\n            print(\"Swift 2.2+\")\n        #else\n             This code will never be checked!!!!!!!!\n            print(\"Swift 2.2-\")\n        #endif\n\n        // \u4fee\u65394\uff1a\n        testFunc(\"kuang\", age: 25)\n\n        // \u4fee\u65395\uff1acan compare two tuples\n        let tupleOne = (firstName:\"asahi\", age:25)\n        let tupleTwo = (first:\"asahi\", a:25)\n        if tupleOne == tupleTwo {\n            print(\"equal\")\n        }\n        else {\n            print(\"not equal\")\n        }\n\n        // \u4fee\u65396: tuple splate syntax is deprecated.\n        /*\n        let parameterTuple = (\"asahi\", age:25)\n        testFunc(parameterTuple)\n         */\n\n        // \u4fee\u65397\uff1avar parameters is deprecated\n        var name = \"Tylor Swift\"\n        parametersFunc(name)\n        parameterFuncNew(&name)\n\n        // \u4fee\u65398\uff1adebug identifiers are renamed\n        debugFunc()\n    }\n\n    func selectorFunc()\n    {\n        print(\"selector function\")\n    }\n\n    func testFunc(name: String, let age: NSInteger)\n    {\n        print(name+\"\\n\",age)\n    }\n    /**\n     *  @brief 'var' parameters are deprecated and will be removed in Swift 3.0\n     */\n    func parametersFunc(var name: String)\n    {\n        name = name.uppercaseString\n        print(name)\n    }\n\n    func parameterFuncNew(inout name: String)\n    {\n        name = name.uppercaseString\n        print(name)\n    }\n\n    func debugFunc()\n    {\n        // old version\n        /*\n        print(__FUNCTION__, __LINE__, __FILE__, __COLUMN__)\n        */\n\n        // new version\n        print(#function, #line, #file, #column)\n    }\n\n    override func didReceiveMemoryWarning()\n    {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n\n}\n\n\n#####Document:[Apple Swift Document](https://swift.org/blog/swift-2-2-new-features/)\n\n#####Release Notes:[Official release notes](https://swift.org/blog/swift-2-2-released/)\n\n```\nimport UIKit\n\nclass ViewController: UIViewController\n{\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        \n        // \u4fee\u65391\uff1atraditional C-style for loop is deprecated\n        for i in 0..<3\n        {\n            print(i)\n        }\n        \n        // ps. for var i = 3; i > 0; i-- {} can be write like blow:\n        for i in (0..<3).reverse()\n        {\n            print(i)\n        }\n        \n        // ps. for var i = 0; i < 10; i+=2 {} can be write like blow:\n        for i in 0.stride(to: 10, by: 2)\n        {\n            print(i)\n        }\n        \n        // \u4fee\u65392: selector will be checked in compile-time\n        let tap = UITapGestureRecognizer(target: self, action: #selector(selectorFunc))\n        view.addGestureRecognizer(tap)\n        \n        // \u4fee\u65393: Swift version-check will be in compile-time\n        #if swift(>=2.2)\n            print(\"Swift 2.2+\")\n        #else\n        \t This code will never be checked!!!!!!!!\n            print(\"Swift 2.2-\")\n        #endif\n        \n        // \u4fee\u65394\uff1a\n        testFunc(\"kuang\", age: 25)\n        \n        // \u4fee\u65395\uff1acan compare two tuples\n        let tupleOne = (firstName:\"asahi\", age:25)\n        let tupleTwo = (first:\"asahi\", a:25)\n        if tupleOne == tupleTwo {\n            print(\"equal\")\n        }\n        else {\n            print(\"not equal\")\n        }\n        \n        // \u4fee\u65396: tuple splate syntax is deprecated.\n        /*\n        let parameterTuple = (\"asahi\", age:25)\n        testFunc(parameterTuple)\n         */\n        \n        // \u4fee\u65397\uff1avar parameters is deprecated\n        var name = \"Tylor Swift\"\n        parametersFunc(name)\n        parameterFuncNew(&name)\n        \n        // \u4fee\u65398\uff1adebug identifiers are renamed\n        debugFunc()\n    }\n    \n    func selectorFunc()\n    {\n        print(\"selector function\")\n    }\n    \n    func testFunc(name: String, let age: NSInteger)\n    {\n        print(name+\"\\n\",age)\n    }\n    /**\n     *  @brief 'var' parameters are deprecated and will be removed in Swift 3.0\n     */\n    func parametersFunc(var name: String)\n    {\n        name = name.uppercaseString\n        print(name)\n    }\n\n    func parameterFuncNew(inout name: String)\n    {\n        name = name.uppercaseString\n        print(name)\n    }\n    \n    func debugFunc()\n    {\n        // old version\n        /*\n        print(__FUNCTION__, __LINE__, __FILE__, __COLUMN__)\n        */\n        \n        // new version\n        print(#function, #line, #file, #column)\n    }\n    \n    override func didReceiveMemoryWarning()\n    {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n\n}\n```\n"}