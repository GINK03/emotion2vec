{"context": "\u306f\u3058\u3081\u307e\u3057\u3066\u3002\n\u6587\u7ae0\u529b\u3092\u4ed8\u3051\u308b\u70ba\u3001Qiita\u3092\u59cb\u3081\u3066\u307f\u308b\u4e8b\u306b\u3057\u307e\u3057\u305f\u3002\n\u5b9c\u3057\u304f\u304a\u9858\u3044\u81f4\u3057\u307e\u3059\u3002\n\nZip\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u5c55\u958b\n\u3042\u308b\u7a0b\u5ea6\u3001\u898f\u6a21\u306e\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u3001\n\u30d0\u30f3\u30c9\u30eb\u306b\u542b\u307f\u304d\u308c\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\n\u304a\u305d\u3089\u304fzip\u5f62\u5f0f\u306b\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\u3053\u306e\u6642\u306b\u3084\u3063\u3066\u3057\u307e\u3046\u3068\u52ff\u4f53\u7121\u3044\u4e8b\u304c\u3001\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fzip\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u3001\u4e00\u5ea6HDD\u3078\u4fdd\u5b58\u3057\u3066\u3057\u307e\u3046\u4e8b\n\u3067\u3059\u3002\n\u4e00\u822c\u7684\u306bHDD\u3078\u306e\u8aad\u307f\u66f8\u304d\u306f\u30e1\u30e2\u30ea\u3078\u306e\u305d\u308c\u3088\u308a\u3082\u5727\u5012\u7684\u306b\u9045\u3044\u306e\u3067\u3001\n\u30e1\u30e2\u30ea\u4e0a\u306b\u3042\u308bzip\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u5c55\u958b\u3059\u308b\u65b9\u304c\n\u901f\u5ea6\u7684\u306b\u6709\u5229\u3067\u3059\u3002\ncocos2d \u3067\u306f\u3001cocos2d::ZipFile::createWithBuffer\n\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002\n\u3068\u3001\u305d\u306e\u524d\u306b\u5fc5\u8981\u306azip\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u767a\u884c\nvoid Class::downloadZip(const std::string& url){\n    network::HttpRequest* req = new network::HttpRequest();\n    req->setRequestType( network::HttpRequest::Type::GET );\n    req->setUrl( url.c_str() );\n    req->setResponseCallback( CC_CALLBACK_2(Class::httpRequestCallback, this) );\n\n    network::HttpClient::getInstance()->send( req );\n}\n\n\n\nGET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nvoid Class::httpRequestCallback(network::HttpClient* client, network::HttpResponse* response)\n{\n    if( response->getResponseCode() == 200 ){\n        // \u30d5\u30a1\u30a4\u30eb\u3078\u4fdd\u5b58\u305b\u305a\u306b\u3001\u305d\u306e\u307e\u307e\u5c55\u958b\u3059\u308b\n        unzip(&response->getResponseData()->at(0), response->getResponseData()->size());\n    }else{\n        CCLOG(\"%s\", response->getHttpRequest()->getUrl());\n        CC_ASSERT(0);\n    }\n}\n\n\ncocos2d::ZipFile::createWithBuffer\u3092\u4f7f\u3063\u3066zip\u3092\u5c55\u958b\u3057\u307e\u3059\u3002\n\nZip\u5c55\u958b\u51e6\u7406\nvoid Class::unzip(const void* data, ssize_t datasize){\n\n    // \u51fa\u529b\u5148\u306e\u30eb\u30fc\u30c8\u30d1\u30b9\u3092\u53d6\u5f97\n    const std::string writablePath( cocos2d::FileUtils::getInstance()->getWritablePath() );\n\n    // zip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n    cocos2d::ZipFile* zipfile = cocos2d::ZipFile::createWithBuffer( data, datasize );\n    for( std::string filename = zipfile->getFirstFilename(); !filename.empty(); filename = zipfile->getNextFilename() ){\n        if( *filename.rbegin() == '/' ){\n\n            // It's a directory.\n            cocos2d::FileUtils::getInstance()->createDirectory( writablePath + filename );\n\n        }else{\n\n            // It's a file.\n            ssize_t filesize;\n            unsigned char* filedata = zipfile->getFileData( filename, &filesize );\n            {\n                const std::string fullPath( writablePath + filename );\n                FILE* file = fopen( fullPath.c_str(), \"wb\" );\n                fwrite( filedata, filesize, 1, file );\n                fclose( file );\n            }\n            free( filedata );\n\n        }\n    }\n    delete zipfile;\n}    \n\n\ncocos2d::ZipFile::createWithBuffer\u3068\u306f\u307e\u305f\u4fbf\u5229\u3067\u3059\u306d\u3002\nzip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3060\u3051zipfile->getFileData\u306e\u969b\u306b\n\u6587\u5b57\u5217\u691c\u7d22\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u4e8b\u304c\u6b8b\u5ff5\u3067\u3059\u304c\u3002\n\u305f\u3060\u3001\u52b9\u7387\u5316\u306e\u9762\u3067\u8a00\u3048\u3070\u307e\u3060\u5168\u7136\u8db3\u3089\u306a\u304f\u3066\u3001\n\u3053\u306e\u307e\u307e\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u753b\u9762\u3068\u304b\u3067\nUI\u304c\u30ab\u30c1\u30ab\u30c1\u56fa\u307e\u3063\u3066\u3057\u307e\u3046\u73fe\u8c61\u304c\u8d77\u304d\u3084\u3059\u3044\u3067\u3059\u3002\n\u203bzip\u306e\u5c55\u958b\u51e6\u7406\u3067UI\u30b9\u30ec\u30c3\u30c9\u304c\u6b62\u3081\u3089\u308c\u3066\u3057\u307e\u3046\u70ba\nzip\u3092\u5c55\u958b\u3059\u308b\u51e6\u7406\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3078\u9003\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\n\u3044\u305a\u308c\u307e\u305f\u3002\n\nUI\u30b9\u30ec\u30c3\u30c9\u3092\u6b62\u307e\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\u203b \"cocos zip\"\u3067\u691c\u7d22\u3059\u308b\u3068\u4e0a\u4f4d\u306b\u73fe\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3001\n  cocos\u81ea\u4f53\u5bc2\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u8ffd\u8a18\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\n\u6642\u304c\u7d4c\u3061\u307e\u3057\u305f\u306e\u3067\u3001C++11\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u51e6\u7406\u3092\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3059\u3002\n#include \"network/HttpClient.h\"\nusing onFinishedDownloadZip = std::function<void(bool succeeded)>;\n\nstatic void downloadZip(const std::string& url, const std::string& outdir, onFinishedDownloadZip onFinished){\n    auto req = new (std::nothrow) cocos2d::network::HttpRequest();\n    req->setRequestType( cocos2d::network::HttpRequest::Type::GET );\n    req->setUrl( url );\n    req->setResponseCallback([onFinished, outdir](cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response){\n        if( response->isSucceed() ){\n            // \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u30b9\u30ec\u30c3\u30c9\u3078\u9001\u308b\n            pushToUnzip(onFinished, outdir, response);\n        }else{\n            onFinished(false);\n        }\n    });\n    cocos2d::network::HttpClient::getInstance()->send( req );\n    req->release();\n}\n\nZip\u306e\u5c55\u958b\u51e6\u7406\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3044\u307e\u3059\u3002\n\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u969b\u3001cocos\u306bAsyncTaskPool\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nstatic void pushToUnzip(onFinishedDownloadZip onFinished, const std::string& outdir, cocos2d::network::HttpResponse* response){\n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto task = [onFinished, outdir, response](){\n\n        // zip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n        cocos2d::ZipFile* zipfile = cocos2d::ZipFile::createWithBuffer(response->getResponseData()->data(),\n                                                                       response->getResponseData()->size());\n        for( std::string filename = zipfile->getFirstFilename(); !filename.empty(); filename = zipfile->getNextFilename() ){\n            if( *filename.rbegin() == '/' ){\n\n                // It's a directory.\n                cocos2d::FileUtils::getInstance()->createDirectory( outdir + filename );\n\n            }else{\n\n                // It's a file.\n                ssize_t filesize;\n                unsigned char* filedata = zipfile->getFileData( filename, &filesize );\n                // \u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u3001\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u30b9\u30ec\u30c3\u30c9\u3078\u9001\u308b\n                pushToWriteFile(nullptr, outdir + filename, filedata, filesize);\n\n            }\n        }\n        delete zipfile;\n\n        // \u7d42\u4e86\u5224\u5b9a\u7528\u306b\u7a7a\u30c7\u30fc\u30bf\u3092\u9001\u308b\n        pushToWriteFile(onFinished, \"\", nullptr, 0);\n    };\n    // \u6700\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto finished = [response](void*){\n        response->release();\n    };\n    // unzip\u30bf\u30b9\u30af\u5b9f\u884c\u4e2d\u306b\u7834\u68c4\u3055\u308c\u306a\u3044\u3088\u3046\u4fdd\u8b77\u3059\u308b\n    response->retain();\n    // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u958b\u59cb (TASK_OTHER\u306e\u30b9\u30ec\u30c3\u30c9\u30ad\u30e5\u30fc\u3078\u7a4d\u307e\u308c\u308b)\n    cocos2d::AsyncTaskPool::getInstance()->enqueue(cocos2d::AsyncTaskPool::TaskType::TASK_OTHER, finished, nullptr, task);\n}\n\nAsyncTaskPool\u306f\u3001\u5404\u30bf\u30b9\u30af\u3092\u30ad\u30e5\u30fc\u3068\u3057\u3066\u6271\u3046\u306e\u3067\u767b\u9332\u3055\u308c\u305f\u9806\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u767b\u9332\u3055\u308c\u305f\u30bf\u30b9\u30af\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3001\u5b8c\u4e86\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u7d42\u4e86\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u547c\u3070\u308c\u307e\u3059\u3002\nAsyncTaskPool\u306f\u3044\u304f\u3064\u304b\u30b9\u30ec\u30c3\u30c9\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u304c\u3001\ncocos2d::AsyncTaskPool::TaskType\u3067\u767b\u9332\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\ncocos2d::ZipFile\u3067\u306f\u3001\u4fdd\u6301\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u305a\u3064\u53d6\u5f97\u3057\u3066\u3044\u304d\u307e\u3059\u304c\u3001\n\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97(getFileData) \u3068 \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f(writeFile) \u306f\n\u95a2\u9023\u3059\u308b\u30cf\u30fc\u30c9\u304c\u7570\u306a\u308b\u306e\u3067\u975e\u540c\u671f\u3067\u884c\u3046\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\nstatic void pushToWriteFile(onFinishedDownloadZip onFinished, const std::string& path, unsigned char* data, ssize_t size){\n    CCLOG(\"pushToWriteFile: %s\", path.c_str());\n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto task = [path, data, size](){\n        if( data ){\n            FILE* file = fopen( path.c_str(), \"wb\" );\n            fwrite( data, size, 1, file );\n            fclose( file );\n            CCLOG(\"endOfWriteFile: %s\", path.c_str());\n\n            // zipfile->getFileData \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\n            free( data );\n        }\n    };\n    // \u6700\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto finished = [onFinished](void*){\n        if(onFinished){ onFinished(true); }\n    };\n    // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u958b\u59cb (TASK_IO\u306e\u30b9\u30ec\u30c3\u30c9\u30ad\u30e5\u30fc\u3078\u7a4d\u307e\u308c\u308b)\n    cocos2d::AsyncTaskPool::getInstance()->enqueue(cocos2d::AsyncTaskPool::TaskType::TASK_IO, finished, nullptr, task);\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nexsample\ndownloadZip(\"http://127.0.0.1/test.zip\",\n            cocos2d::FileUtils::getInstance()->getWritablePath(),\n            [](bool successed){\n                CCLOG(\"*result %d\", successed);\n            });\n\n\n\u306f\u3058\u3081\u307e\u3057\u3066\u3002\n\u6587\u7ae0\u529b\u3092\u4ed8\u3051\u308b\u70ba\u3001Qiita\u3092\u59cb\u3081\u3066\u307f\u308b\u4e8b\u306b\u3057\u307e\u3057\u305f\u3002\n\u5b9c\u3057\u304f\u304a\u9858\u3044\u81f4\u3057\u307e\u3059\u3002\n\n\n# Zip\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068\u5c55\u958b\n\n\u3042\u308b\u7a0b\u5ea6\u3001\u898f\u6a21\u306e\u5927\u304d\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306a\u3063\u3066\u304f\u308b\u3068\u3001\n\u30d0\u30f3\u30c9\u30eb\u306b\u542b\u307f\u304d\u308c\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\n\u304a\u305d\u3089\u304fzip\u5f62\u5f0f\u306b\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n\u3053\u306e\u6642\u306b\u3084\u3063\u3066\u3057\u307e\u3046\u3068\u52ff\u4f53\u7121\u3044\u4e8b\u304c\u3001\n**\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fzip\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u3001\u4e00\u5ea6HDD\u3078\u4fdd\u5b58\u3057\u3066\u3057\u307e\u3046\u4e8b**\n\u3067\u3059\u3002\n\n\u4e00\u822c\u7684\u306bHDD\u3078\u306e\u8aad\u307f\u66f8\u304d\u306f\u30e1\u30e2\u30ea\u3078\u306e\u305d\u308c\u3088\u308a\u3082\u5727\u5012\u7684\u306b\u9045\u3044\u306e\u3067\u3001\n\u30e1\u30e2\u30ea\u4e0a\u306b\u3042\u308bzip\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u5c55\u958b\u3059\u308b\u65b9\u304c\n\u901f\u5ea6\u7684\u306b\u6709\u5229\u3067\u3059\u3002\n\ncocos2d \u3067\u306f\u3001cocos2d::ZipFile::createWithBuffer\n\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002\n\n\n\u3068\u3001\u305d\u306e\u524d\u306b\u5fc5\u8981\u306azip\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n```cpp:GET\u30ea\u30af\u30a8\u30b9\u30c8\u767a\u884c\nvoid Class::downloadZip(const std::string& url){\n    network::HttpRequest* req = new network::HttpRequest();\n    req->setRequestType( network::HttpRequest::Type::GET );\n    req->setUrl( url.c_str() );\n    req->setResponseCallback( CC_CALLBACK_2(Class::httpRequestCallback, this) );\n\n    network::HttpClient::getInstance()->send( req );\n}\n```\n```cpp:GET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nvoid Class::httpRequestCallback(network::HttpClient* client, network::HttpResponse* response)\n{\n    if( response->getResponseCode() == 200 ){\n        // \u30d5\u30a1\u30a4\u30eb\u3078\u4fdd\u5b58\u305b\u305a\u306b\u3001\u305d\u306e\u307e\u307e\u5c55\u958b\u3059\u308b\n        unzip(&response->getResponseData()->at(0), response->getResponseData()->size());\n    }else{\n        CCLOG(\"%s\", response->getHttpRequest()->getUrl());\n        CC_ASSERT(0);\n    }\n}\n```\n\n**cocos2d::ZipFile::createWithBuffer**\u3092\u4f7f\u3063\u3066zip\u3092\u5c55\u958b\u3057\u307e\u3059\u3002\n\n```cpp:Zip\u5c55\u958b\u51e6\u7406\nvoid Class::unzip(const void* data, ssize_t datasize){\n\n    // \u51fa\u529b\u5148\u306e\u30eb\u30fc\u30c8\u30d1\u30b9\u3092\u53d6\u5f97\n    const std::string writablePath( cocos2d::FileUtils::getInstance()->getWritablePath() );\n    \n    // zip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n    cocos2d::ZipFile* zipfile = cocos2d::ZipFile::createWithBuffer( data, datasize );\n    for( std::string filename = zipfile->getFirstFilename(); !filename.empty(); filename = zipfile->getNextFilename() ){\n        if( *filename.rbegin() == '/' ){\n\n            // It's a directory.\n            cocos2d::FileUtils::getInstance()->createDirectory( writablePath + filename );\n\n        }else{\n\n            // It's a file.\n            ssize_t filesize;\n            unsigned char* filedata = zipfile->getFileData( filename, &filesize );\n            {\n                const std::string fullPath( writablePath + filename );\n                FILE* file = fopen( fullPath.c_str(), \"wb\" );\n                fwrite( filedata, filesize, 1, file );\n                fclose( file );\n            }\n            free( filedata );\n\n        }\n    }\n    delete zipfile;\n}    \n```\n\n**cocos2d::ZipFile::createWithBuffer**\u3068\u306f\u307e\u305f\u4fbf\u5229\u3067\u3059\u306d\u3002\nzip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3060\u3051zipfile->getFileData\u306e\u969b\u306b\n\u6587\u5b57\u5217\u691c\u7d22\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u4e8b\u304c\u6b8b\u5ff5\u3067\u3059\u304c\u3002\n\n\u305f\u3060\u3001\u52b9\u7387\u5316\u306e\u9762\u3067\u8a00\u3048\u3070\u307e\u3060\u5168\u7136\u8db3\u3089\u306a\u304f\u3066\u3001\n\u3053\u306e\u307e\u307e\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u753b\u9762\u3068\u304b\u3067\nUI\u304c\u30ab\u30c1\u30ab\u30c1\u56fa\u307e\u3063\u3066\u3057\u307e\u3046\u73fe\u8c61\u304c\u8d77\u304d\u3084\u3059\u3044\u3067\u3059\u3002\n\u203bzip\u306e\u5c55\u958b\u51e6\u7406\u3067UI\u30b9\u30ec\u30c3\u30c9\u304c\u6b62\u3081\u3089\u308c\u3066\u3057\u307e\u3046\u70ba\n\nzip\u3092\u5c55\u958b\u3059\u308b\u51e6\u7406\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3078\u9003\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\n\u3044\u305a\u308c\u307e\u305f\u3002\n\n\n# UI\u30b9\u30ec\u30c3\u30c9\u3092\u6b62\u307e\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\u203b \"cocos zip\"\u3067\u691c\u7d22\u3059\u308b\u3068\u4e0a\u4f4d\u306b\u73fe\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3001\n  cocos\u81ea\u4f53\u5bc2\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u8ffd\u8a18\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\n\n\u6642\u304c\u7d4c\u3061\u307e\u3057\u305f\u306e\u3067\u3001C++11\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u51e6\u7406\u3092\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cpp\n#include \"network/HttpClient.h\"\nusing onFinishedDownloadZip = std::function<void(bool succeeded)>;\n```\n\n```cpp\nstatic void downloadZip(const std::string& url, const std::string& outdir, onFinishedDownloadZip onFinished){\n    auto req = new (std::nothrow) cocos2d::network::HttpRequest();\n    req->setRequestType( cocos2d::network::HttpRequest::Type::GET );\n    req->setUrl( url );\n    req->setResponseCallback([onFinished, outdir](cocos2d::network::HttpClient* client, cocos2d::network::HttpResponse* response){\n        if( response->isSucceed() ){\n            // \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u30b9\u30ec\u30c3\u30c9\u3078\u9001\u308b\n            pushToUnzip(onFinished, outdir, response);\n        }else{\n            onFinished(false);\n        }\n    });\n    cocos2d::network::HttpClient::getInstance()->send( req );\n    req->release();\n}\n```\n\nZip\u306e\u5c55\u958b\u51e6\u7406\u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u884c\u3044\u307e\u3059\u3002\n\n\u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\u3059\u308b\u969b\u3001cocos\u306bAsyncTaskPool\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n```cpp\nstatic void pushToUnzip(onFinishedDownloadZip onFinished, const std::string& outdir, cocos2d::network::HttpResponse* response){\n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto task = [onFinished, outdir, response](){\n        \n        // zip\u306b\u542b\u307e\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n        cocos2d::ZipFile* zipfile = cocos2d::ZipFile::createWithBuffer(response->getResponseData()->data(),\n                                                                       response->getResponseData()->size());\n        for( std::string filename = zipfile->getFirstFilename(); !filename.empty(); filename = zipfile->getNextFilename() ){\n            if( *filename.rbegin() == '/' ){\n                \n                // It's a directory.\n                cocos2d::FileUtils::getInstance()->createDirectory( outdir + filename );\n                \n            }else{\n                \n                // It's a file.\n                ssize_t filesize;\n                unsigned char* filedata = zipfile->getFileData( filename, &filesize );\n                // \u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u3001\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u30b9\u30ec\u30c3\u30c9\u3078\u9001\u308b\n                pushToWriteFile(nullptr, outdir + filename, filedata, filesize);\n                \n            }\n        }\n        delete zipfile;\n        \n        // \u7d42\u4e86\u5224\u5b9a\u7528\u306b\u7a7a\u30c7\u30fc\u30bf\u3092\u9001\u308b\n        pushToWriteFile(onFinished, \"\", nullptr, 0);\n    };\n    // \u6700\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto finished = [response](void*){\n        response->release();\n    };\n    // unzip\u30bf\u30b9\u30af\u5b9f\u884c\u4e2d\u306b\u7834\u68c4\u3055\u308c\u306a\u3044\u3088\u3046\u4fdd\u8b77\u3059\u308b\n    response->retain();\n    // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u958b\u59cb (TASK_OTHER\u306e\u30b9\u30ec\u30c3\u30c9\u30ad\u30e5\u30fc\u3078\u7a4d\u307e\u308c\u308b)\n    cocos2d::AsyncTaskPool::getInstance()->enqueue(cocos2d::AsyncTaskPool::TaskType::TASK_OTHER, finished, nullptr, task);\n}\n```\n\nAsyncTaskPool\u306f\u3001\u5404\u30bf\u30b9\u30af\u3092\u30ad\u30e5\u30fc\u3068\u3057\u3066\u6271\u3046\u306e\u3067\u767b\u9332\u3055\u308c\u305f\u9806\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u767b\u9332\u3055\u308c\u305f\u30bf\u30b9\u30af\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u3001\u5b8c\u4e86\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u7d42\u4e86\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\nAsyncTaskPool\u306f\u3044\u304f\u3064\u304b\u30b9\u30ec\u30c3\u30c9\u3092\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u304c\u3001\ncocos2d::AsyncTaskPool::TaskType\u3067\u767b\u9332\u3055\u308c\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\ncocos2d::ZipFile\u3067\u306f\u3001\u4fdd\u6301\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u305a\u3064\u53d6\u5f97\u3057\u3066\u3044\u304d\u307e\u3059\u304c\u3001\n**\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97(getFileData)** \u3068 **\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f(writeFile)** \u306f\n\u95a2\u9023\u3059\u308b\u30cf\u30fc\u30c9\u304c\u7570\u306a\u308b\u306e\u3067\u975e\u540c\u671f\u3067\u884c\u3046\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```cpp\nstatic void pushToWriteFile(onFinishedDownloadZip onFinished, const std::string& path, unsigned char* data, ssize_t size){\n    CCLOG(\"pushToWriteFile: %s\", path.c_str());\n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto task = [path, data, size](){\n        if( data ){\n            FILE* file = fopen( path.c_str(), \"wb\" );\n            fwrite( data, size, 1, file );\n            fclose( file );\n            CCLOG(\"endOfWriteFile: %s\", path.c_str());\n            \n            // zipfile->getFileData \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\n            free( data );\n        }\n    };\n    // \u6700\u5f8c\u306bUI\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30b9\u30af\n    auto finished = [onFinished](void*){\n        if(onFinished){ onFinished(true); }\n    };\n    // \u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u958b\u59cb (TASK_IO\u306e\u30b9\u30ec\u30c3\u30c9\u30ad\u30e5\u30fc\u3078\u7a4d\u307e\u308c\u308b)\n    cocos2d::AsyncTaskPool::getInstance()->enqueue(cocos2d::AsyncTaskPool::TaskType::TASK_IO, finished, nullptr, task);\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp:exsample\ndownloadZip(\"http://127.0.0.1/test.zip\",\n            cocos2d::FileUtils::getInstance()->getWritablePath(),\n            [](bool successed){\n                CCLOG(\"*result %d\", successed);\n            });\n```\n\n", "tags": ["cocos2d-x3.x"]}