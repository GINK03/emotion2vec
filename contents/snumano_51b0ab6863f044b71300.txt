{"context": " More than 1 year has passed since last update.\u524d\u56de\u3001myThings\u306eIDCF\u30c1\u30e3\u30cd\u30eb\u306e\u74b0\u5883\u3067\u3001ESP-WROOM-02\u3092MQTT subscriber\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u518d\u6311\u6226\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u524d\u56de\u3068\u306f\u9055\u3046MQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u7406\u7531\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001myThings\u3067\u306e\u52d5\u4f5c\u5b9f\u7e3e\u306e\u3042\u308b\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\u4e0b\u8a18\u30d6\u30ed\u30b0\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nESP8266\u3067IDCF Cloud\u306b\u3064\u306a\u3050\n\u4eca\u56de\u3001\u4f7f\u7528\u3057\u305fMQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u306fImroy/pubsubclient\u3067\u3059\u3002ZIP\u3092Download\u3057\u3066\u3001Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[Include Library]-[Add ZIP Library]\u306b\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n(\u3061\u306a\u307f\u306b\u3001\u524d\u56de\u307e\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u306e\u306fknolleary/pubsubclient\u3067\u3059\u3002\u3053\u3061\u3089\u3082\u3001\u5225\u306eMQTT\u74b0\u5883\u3060\u3068\u4f7f\u3048\u3066\u3044\u307e\u3059)\nJson\u306eParse\u306b\u306f\u3001ArduinoJsonParser\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3082\u3001ZIP\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n(Arduibo IDE\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308bArduinoJson\u3092\u5229\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3046\u307e\u304f\u52d5\u4f5c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u304d\u3089\u3081\u307e\u3057\u305f)\nESP-WROOM-02\u306e\u30b9\u30b1\u30c3\u30c1\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\nMQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3001ESP-WROOM-02\u3067\u53d7\u3051\u3066\u3001\u30b7\u30ea\u30a2\u30eb(UART)\u3067Freaduino Uno(Arduino\u4e92\u63db)\u306b\u6e21\u3057\u3066\u3001\u30ed\u30dc\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\n\nrobo_mythings.ino\n#include <MQTT.h>\n#include <PubSubClient.h>\n#include <ESP8266WiFi.h>\n#include <JsonArray.h>\n#include <JsonHashTable.h>\n#include <JsonObjectBase.h>\n#include <JsonParser.h>\n\nJsonParser<32> parser;\n#define BUFFER_SIZE 100\n\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"arduinoClient\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid =  \"<ssid>\";\nconst char *pass =  \"<password>\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char* action_1_uuid = \"<uuid>\";\nconst char* action_1_token = \"<token>\";\nIPAddress server(210, 140, *, *); //  \u4f7f\u7528\u3059\u308bIP\u30a2\u30c9\u30ec\u30b9\n\nvoid callback(const MQTT::Publish& pub) {\n//  Serial.print(pub.topic());\n//  Serial.print(\" => \");\n  if (pub.has_stream()) {\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u7528\u610f\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u5206\u5272\u3057\u3066\u8aad\u307f\u53d6\u308a\n    // \u8aad\u307f\u53d6\u3063\u305f\u5358\u4f4d\u3054\u3068\u306b\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n    uint8_t buf[BUFFER_SIZE];\n    int read;\n    while (read = pub.payload_stream()->read(buf, BUFFER_SIZE)) {\n      Serial.write(buf, read);\n    }\n    pub.payload_stream()->stop();\n    Serial.println();\n  } else {\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u5834\u5408\u306b\u306f\u305d\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n    char buffer[pub.payload_string().length()+1];\n    pub.payload_string().toCharArray(buffer,pub.payload_string().length()+1);\n    JsonHashTable hashTable = parser.parseHashTable(buffer);\n    parseCheck(hashTable);\n\n    char* data = hashTable.getString(\"data\");\n    JsonHashTable hashTable_data = parser.parseHashTable(data);\n    parseCheck(hashTable_data);\n\n    char* payload = hashTable_data.getString(\"payload\");\n    Serial.println(payload);  \n  }\n}\n\nvoid parseCheck(JsonHashTable hashTable){\n  if (!hashTable.success()){\n    Serial.println(\"JsonParser.parseHashTable() failed\");\n    return;\n  }\n}\n\nWiFiClient wclient;\nPubSubClient client(wclient, server);\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n}\n\nvoid loop() {\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, pass);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      return;\n    }\n    Serial.println(\"WiFi connected\");\n  }\n\n  if (!client.connected()) {\n    // \u30a2\u30af\u30b7\u30e7\u30f31\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    MQTT::Connect mqttConnect(mqtt_client_id);\n    mqttConnect.set_auth(action_1_uuid, action_1_token);\n\n    if (client.connect(mqttConnect)) {\n      client.set_callback(callback);\n      client.subscribe(action_1_uuid);\n      Serial.println(\"completed\");\n    }\n  }\n\n  if (client.connected()) {\n    client.loop();\n  }\n}\n\n\n\n\u53c2\u8003\nMeshblu\u3092\u4f7f\u3044MQTT\u3068HTTP\u3092\u30d6\u30ea\u30c3\u30b8\u3057\u3066Raspberry Pi\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u53d7\u4fe1\u3059\u308b\nArduino blink LED with MQTT\n\n[\u524d\u56de](http://qiita.com/snumano/items/0e96bb3b1ed9ffc90eb5)\u3001myThings\u306eIDCF\u30c1\u30e3\u30cd\u30eb\u306e\u74b0\u5883\u3067\u3001ESP-WROOM-02\u3092MQTT subscriber\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u518d\u6311\u6226\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u524d\u56de\u3068\u306f\u9055\u3046MQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u7406\u7531\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001myThings\u3067\u306e\u52d5\u4f5c\u5b9f\u7e3e\u306e\u3042\u308b\u3082\u306e\u306b\u3057\u307e\u3057\u305f\u3002\u4e0b\u8a18\u30d6\u30ed\u30b0\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n[ESP8266\u3067IDCF Cloud\u306b\u3064\u306a\u3050](http://qiita.com/mayfair/items/bb09ad04942104be5578)\n\n\n\u4eca\u56de\u3001\u4f7f\u7528\u3057\u305fMQTT\u30e9\u30a4\u30d6\u30e9\u30ea\u306f[Imroy/pubsubclient](https://github.com/Imroy/pubsubclient)\u3067\u3059\u3002ZIP\u3092Download\u3057\u3066\u3001Arduino IDE\u306e[\u30b9\u30b1\u30c3\u30c1]-[Include Library]-[Add ZIP Library]\u306b\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n(\u3061\u306a\u307f\u306b\u3001\u524d\u56de\u307e\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u306e\u306f[knolleary/pubsubclient](https://github.com/knolleary/pubsubclient)\u3067\u3059\u3002\u3053\u3061\u3089\u3082\u3001\u5225\u306eMQTT\u74b0\u5883\u3060\u3068\u4f7f\u3048\u3066\u3044\u307e\u3059)\n\nJson\u306eParse\u306b\u306f\u3001[ArduinoJsonParser](https://github.com/markert/ArduinoJsonParser)\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3082\u3001ZIP\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n(Arduibo IDE\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b[ArduinoJson](https://github.com/bblanchon/ArduinoJson)\u3092\u5229\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3046\u307e\u304f\u52d5\u4f5c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u304d\u3089\u3081\u307e\u3057\u305f)\n\nESP-WROOM-02\u306e\u30b9\u30b1\u30c3\u30c1\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\nMQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3001ESP-WROOM-02\u3067\u53d7\u3051\u3066\u3001\u30b7\u30ea\u30a2\u30eb(UART)\u3067Freaduino Uno(Arduino\u4e92\u63db)\u306b\u6e21\u3057\u3066\u3001\u30ed\u30dc\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\n\n```robo_mythings.ino\n#include <MQTT.h>\n#include <PubSubClient.h>\n#include <ESP8266WiFi.h>\n#include <JsonArray.h>\n#include <JsonHashTable.h>\n#include <JsonObjectBase.h>\n#include <JsonParser.h>\n\nJsonParser<32> parser;\n#define BUFFER_SIZE 100\n\n// MQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8ID\uff08\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u30b9\u30b1\u30c3\u30c1\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u65e5\u4ed8\u3068\u6642\u523b\u3092\u4f7f\u7528\uff09\nconst char *mqtt_client_id = \"arduinoClient\" __DATE__ __TIME__;\n\n// Wi-Fi\u30a2\u30af\u30bb\u30b9\u30dd\u30a4\u30f3\u30c8\u306eSSID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\nconst char *ssid =  \"<ssid>\";\nconst char *pass =  \"<password>\";\n\n// IDCF Cloud\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\nconst char* action_1_uuid = \"<uuid>\";\nconst char* action_1_token = \"<token>\";\nIPAddress server(210, 140, *, *); //  \u4f7f\u7528\u3059\u308bIP\u30a2\u30c9\u30ec\u30b9\n\nvoid callback(const MQTT::Publish& pub) {\n//  Serial.print(pub.topic());\n//  Serial.print(\" => \");\n  if (pub.has_stream()) {\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u7528\u610f\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u306b\u5206\u5272\u3057\u3066\u8aad\u307f\u53d6\u308a\n    // \u8aad\u307f\u53d6\u3063\u305f\u5358\u4f4d\u3054\u3068\u306b\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n    uint8_t buf[BUFFER_SIZE];\n    int read;\n    while (read = pub.payload_stream()->read(buf, BUFFER_SIZE)) {\n      Serial.write(buf, read);\n    }\n    pub.payload_stream()->stop();\n    Serial.println();\n  } else {\n    // \u30da\u30a4\u30ed\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u5834\u5408\u306b\u306f\u305d\u306e\u307e\u307e\u30b7\u30ea\u30a2\u30eb\u306b\u30d7\u30ea\u30f3\u30c8\n    char buffer[pub.payload_string().length()+1];\n    pub.payload_string().toCharArray(buffer,pub.payload_string().length()+1);\n    JsonHashTable hashTable = parser.parseHashTable(buffer);\n    parseCheck(hashTable);\n\n    char* data = hashTable.getString(\"data\");\n    JsonHashTable hashTable_data = parser.parseHashTable(data);\n    parseCheck(hashTable_data);\n\n    char* payload = hashTable_data.getString(\"payload\");\n    Serial.println(payload);  \n  }\n}\n\nvoid parseCheck(JsonHashTable hashTable){\n  if (!hashTable.success()){\n    Serial.println(\"JsonParser.parseHashTable() failed\");\n    return;\n  }\n}\n\nWiFiClient wclient;\nPubSubClient client(wclient, server);\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n  Serial.println();\n  Serial.println();\n}\n\nvoid loop() {\n  if (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\"Connecting to \");\n    Serial.print(ssid);\n    Serial.println(\"...\");\n    WiFi.begin(ssid, pass);\n\n    if (WiFi.waitForConnectResult() != WL_CONNECTED) {\n      return;\n    }\n    Serial.println(\"WiFi connected\");\n  }\n\n  if (!client.connected()) {\n    // \u30a2\u30af\u30b7\u30e7\u30f31\u306eUUID\u3068\u30c8\u30fc\u30af\u30f3\u3092\u30e6\u30fc\u30b6\u540d\u304a\u3088\u3073\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\n    MQTT::Connect mqttConnect(mqtt_client_id);\n    mqttConnect.set_auth(action_1_uuid, action_1_token);\n\n    if (client.connect(mqttConnect)) {\n      client.set_callback(callback);\n      client.subscribe(action_1_uuid);\n      Serial.println(\"completed\");\n    }\n  }\n\n  if (client.connected()) {\n    client.loop();\n  }\n}\n```\n\n\n# \u53c2\u8003\n[Meshblu\u3092\u4f7f\u3044MQTT\u3068HTTP\u3092\u30d6\u30ea\u30c3\u30b8\u3057\u3066Raspberry Pi\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u53d7\u4fe1\u3059\u308b](http://qiita.com/masato/items/90ca2ae56feaea37eaa8)\n[Arduino blink LED with MQTT](http://docs.gadgetkeeper.com/plugins/servlet/mobile#content/view/11699658)\n\n", "tags": ["\u30d4\u30c3\u30b3\u30ed\u30dc", "myThings", "ESP8266", "IoT", "ESP-WROOM-02"]}