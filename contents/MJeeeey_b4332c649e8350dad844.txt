{"tags": ["avfoundation", "AudioUnit", "CoreAudio", "AVAudioEngine", "Objective-C"], "context": "\u672c\u8a18\u4e8b\u306f\u3001AVAudioUnit\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a73\u7d30\uff08\u57fa\u672c\u7de8\uff09\u306e\u7d9a\u304d\u306b\u306a\u308a\u307e\u3059\u3002\nAVAudioUnit\u3092\u7528\u3044\u305f\u5834\u5408\u3067\u3082Audio Unit\u30ec\u30d9\u30eb\u306e\u8a73\u7d30\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002\u305d\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fAVAudioUnitReverb\u3092\u7528\u3044\u305f\u5834\u5408\u3092\u4f8b\u3068\u3057\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u57fa\u672c\u7de8\u3067\u53d6\u308a\u4e0a\u3052\u305f\u3088\u3046\u306b\u3001AVAudioUnitReverb\u3067\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f1\u3064\u3060\u3051\u3067\u3059\u3002\n\u3053\u308c\u3067\u306f\u7269\u8db3\u308a\u306a\u3044\uff01\u3068\u3044\u3046\u65b9\u306e\u305f\u3081\u306b\uff08\u7b11\uff09\u3001AudioUnit\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\uff08\u4eca\u56de\u53d6\u308a\u4e0a\u3052\u308b\u30b3\u30fc\u30c9\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u6700\u5f8c\u306b\u7d39\u4ecb\u3059\u308bGithub\u306b\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff09\nAVAudioUnit\u306f\u3001AudioUnit\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\nAVAudioUnit.h\n/*! @property audioUnit\n    @abstract Reference to the underlying audio unit.\n    @discussion\n        A reference to the underlying audio unit is provided so that parameters that are not\n        exposed by AVAudioUnit subclasses can be modified using the AudioUnit C API.\n\n        No operations that may conflict with state maintained by the engine should be performed\n        directly on the audio unit. These include changing initialization state, stream formats,\n        channel layouts or connections to other audio units.\n*/\n@property (nonatomic, readonly) AudioUnit audioUnit;\n\n\nAudioUnit\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7d4c\u7531\u3057\u3066\u3001AudioUnitSetParameter\u95a2\u6570\u3067\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3001\u306b\u3064\u3044\u3066\u304c\u4eca\u56de\u306e\u8aac\u660e\u3059\u308b\u5185\u5bb9\u3067\u3059\u3002\n\n\u6e96\u5099\n\u307e\u305a\u306f\u5909\u6570\u306e\u5ba3\u8a00\u3067\u3059\u3002\n@interface AudioEngineIO ()\n{\n    AVAudioEngine *_audioEngine;\n    AVAudioFile *_audioFile;\n    AVAudioPlayerNode *_audioPlayerNode;\n    AVAudioUnitReverb *_audioUnitReverb;\n\n    UInt32 _numOfParams;\n    AudioUnitParameterID _paramId;\n    AudioUnitParameterInfo *_paramInfo;\n}\n@end\n\n\u6700\u521d\u306b\u521d\u671f\u5316\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5f15\u6570\u306f\u30a2\u30d7\u30ea\u5185\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- (OSStatus)initAVAudio:(NSString *)strFilePath\n{\n    OSStatus ret = noErr;\n\n    _audioEngine = [[AVAudioEngine alloc] init];\n    _audioFile = [[AVAudioFile alloc] initForReading:[NSURL fileURLWithPath:strFilePath] error:nil];\n\n    _audioPlayerNode = [[AVAudioPlayerNode alloc] init];\n    [_audioEngine attachNode:_audioPlayerNode];\n\n    _audioUnitReverb = [[AVAudioUnitReverb alloc] init];\n    [_audioEngine attachNode:_audioUnitReverb];\n\n    // Node\u306e\u63a5\u7d9a\n    [_audioEngine connect:_audioPlayerNode to:_audioUnitReverb format:_audioFile.processingFormat];\n    [_audioEngine connect:_audioUnitReverb to:_audioEngine.mainMixerNode format:_audioFile.processingFormat];\n\n    // \u30d1\u30e9\u30e1\u30fc\u30bf\u53d6\u5f97\uff08\u8a73\u7d30\u7de8\uff09\n    [self initAudioUnitParameter:_audioUnitReverb.audioUnit];\n\n    NSError *error = nil;\n    if (![_audioEngine startAndReturnError:&error]) {\n        return -1;\n    }\n\n    return ret;\n}\n\nAudioUnit\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u95a2\u3059\u308b\u90e8\u5206\u3092\u5225\u95a2\u6570\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u4ee3\u5165\u3001\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n- (void)initAudioUnitParameter:(AudioUnit)audioUnit\n{\n    // AudioUnitGetProperty \u3067\u53d6\u5f97\u3059\u308b paramList \u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    UInt32 size = sizeof(UInt32);\n    AudioUnitGetPropertyInfo(audioUnit,\n                             kAudioUnitProperty_ParameterList,\n                             kAudioUnitScope_Global,\n                             0,\n                             &size,\n                             NULL);\n\n    UInt32 numOfParams = size / sizeof(AudioUnitParameterID);\n    NSLog(@\"numOfParams = %d\", numOfParams);\n    _numOfParams = numOfParams;\n\n    // paramList \u306e\u5404ID\u3092\u53d6\u5f97\n    AudioUnitParameterID paramList[numOfParams];\n    AudioUnitGetProperty(audioUnit,\n                         kAudioUnitProperty_ParameterList,\n                         kAudioUnitScope_Global,\n                         0,\n                         paramList,\n                         &size);\n\n    _paramInfo = (AudioUnitParameterInfo *)malloc(numOfParams * sizeof(AudioUnitParameterInfo));\n\n    for (int i = 0; i < numOfParams; i++) {\n        NSLog(@\"paramList[%d] = %d\", i, (unsigned int)paramList[i]);\n        _paramId = paramList[i];\n\n        // \u5404ID\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\n        size = sizeof(_paramInfo[i]);\n        AudioUnitGetProperty(audioUnit,\n                             kAudioUnitProperty_ParameterInfo,\n                             kAudioUnitScope_Global,\n                             paramList[i],\n                             &_paramInfo[i],\n                             &size);\n\n        NSLog(@\"paramInfo.name = %s\", _paramInfo[i].name);\n        NSLog(@\"paramInfo.minValue = %f\", _paramInfo[i].minValue);\n        NSLog(@\"paramInfo.maxValue = %f\", _paramInfo[i].maxValue);\n        NSLog(@\"paramInfo.defaultValue = %f\", _paramInfo[i].defaultValue);\n\n        // init\n        AudioUnitSetParameter(audioUnit,\n                              paramList[i],\n                              kAudioUnitScope_Global,\n                              0,\n                              _paramInfo[i].defaultValue,\n                              0);\n    }\n}\n\nAVAudioUnitReverb\u306e\u5834\u5408\u3001numOfParams = 7 \u3068\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001AudioUnit\u3092\u7d4c\u7531\u3059\u308b\u3053\u3068\u30677\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nUISlider\u3067\u4ee5\u4e0b\u306esetEffectRate\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4e0a\u3067\u53d6\u5f97\u3057\u305f numOfParams \u306e\u6570\u3060\u3051UISlider\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n/*\n iIndex : AudioUnit Parameter ID\n value : \u8a2d\u5b9a\u5024\n*/\n- (void)setEffectRate:(NSInteger)iIndex value:(Float32)value\n{\n    [self setValue:iIndex value:value forParameter:_paramId min:_paramInfo[iIndex].minValue max:_paramInfo[iIndex].maxValue];\n}\n\n// private\n- (void)setValue:(NSInteger)iIndex value:(Float32)value forParameter:(AudioUnitParameterID)parameter min:(Float32)min max:(Float32)max\n{\n    if (value < min || value > max) {\n        NSLog(@\"Invalid value(%f)<%f - %f> for parameter(%d). Ignored.\", value, min, max, (unsigned int)parameter);\n        return;\n    }\n    OSStatus rt = AudioUnitSetParameter(_audioUnitReverb.audioUnit,\n                                        parameter,\n                                        kAudioUnitScope_Global,\n                                        0,\n                                        value,\n                                        0);\n    if (rt != noErr) {\n        NSLog(@\"Error Setting parameter(%d)\", (unsigned int)parameter);\n    }\n}\n\n\u3053\u308c\u3067\u5b8c\u6210\u3057\u305f\u3068\u601d\u3044\u307e\u3059\uff01\n\n\u30ea\u30d0\u30fc\u30d6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u4ee5\u4e0b\u306f\u3001\u4e0a\u306einitAudioUnitParameter\u95a2\u6570\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u3067\u3059\u3002\nnumOfParams = 7\nparamList[0] = 0\nparamInfo.name = dry/wet mix\nparamInfo.minValue = 0.000000\nparamInfo.maxValue = 100.000000\nparamInfo.defaultValue = 50.000000\nparamList[1] = 1\nparamInfo.name = gain\nparamInfo.minValue = -20.000000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 0.000000\nparamList[2] = 2\nparamInfo.name = min delay time\nparamInfo.minValue = 0.000100\nparamInfo.maxValue = 1.000000\nparamInfo.defaultValue = 0.008000\nparamList[3] = 3\nparamInfo.name = max delay time\nparamInfo.minValue = 0.000100\nparamInfo.maxValue = 1.000000\nparamInfo.defaultValue = 0.050000\nparamList[4] = 4\nparamInfo.name = low freq decay time\nparamInfo.minValue = 0.001000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 1.000000\nparamList[5] = 5\nparamInfo.name = high freq decay time\nparamInfo.minValue = 0.001000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 1.000000\nparamList[6] = 6\nparamInfo.name = randomize reflections\nparamInfo.minValue = 1.000000\nparamInfo.maxValue = 1000.000000\nparamInfo.defaultValue = 1.000000\n\n\u300cAudio Unit\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a73\u7d30\uff08Effect\u7de8\uff09\u300d\u306ekAudioUnitSubType_Reverb2\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\nAudio Unit Extensions\uff08\u30aa\u30fc\u30c7\u30a3\u30aa\u30fb\u30d7\u30e9\u30b0\u30a4\u30f3\uff09\niOS 9 \u304b\u3089\u3001AudioUnit\u3092\u30a2\u30d7\u30ea\u9593\u3067\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002Audio Unit Extensions\u3084Audio Unit Version 3\u306a\u3069\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4ee5\u4e0b\u304c\u5bfe\u8c61\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3059\u3002\n\nAVAudioUnit.h\n/*! @property AUAudioUnit\n    @abstract An AUAudioUnit wrapping or underlying the implementation's AudioUnit.\n    @discussion\n        This provides an AUAudioUnit which either wraps or underlies the implementation's\n        AudioUnit, depending on how that audio unit is packaged. Applications can interact with this\n        AUAudioUnit to control custom properties, select presets, change parameters, etc.\n\n        As with the audioUnit property, no operations that may conflict with state maintained by the\n        engine should be performed directly on the audio unit. These include changing initialization\n        state, stream formats, channel layouts or connections to other audio units.\n*/\n@property (nonatomic, readonly) AUAudioUnit *AUAudioUnit NS_AVAILABLE(10_11, 9_0);\n\n\n\u3053\u3061\u3089\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u308c\u3060\u3051\u3067\u8907\u6570\u306e\u8a18\u4e8b\u304c\u66f8\u3051\u308b\u304f\u3089\u3044\u306e\u30dc\u30ea\u30e5\u30fc\u30e0\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u3001\u5225\u306e\u6a5f\u4f1a\u3067\u8a73\u7d30\u306b\u53d6\u308a\u4e0a\u3052\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\u672c\u8a18\u4e8b\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08AudioEngineIO\uff09\nhttps://github.com/JunichiMinamino/AUGraphSample\n\u672c\u8a18\u4e8b\u306f\u3001[AVAudioUnit\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a73\u7d30\uff08\u57fa\u672c\u7de8\uff09](http://qiita.com/MJeeeey/items/e5dc75b20adb59c7d48f)\u306e\u7d9a\u304d\u306b\u306a\u308a\u307e\u3059\u3002\n\nAVAudioUnit\u3092\u7528\u3044\u305f\u5834\u5408\u3067\u3082Audio Unit\u30ec\u30d9\u30eb\u306e\u8a73\u7d30\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002\u305d\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u306f`AVAudioUnitReverb`\u3092\u7528\u3044\u305f\u5834\u5408\u3092\u4f8b\u3068\u3057\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u57fa\u672c\u7de8\u3067\u53d6\u308a\u4e0a\u3052\u305f\u3088\u3046\u306b\u3001AVAudioUnitReverb\u3067\u306f\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f1\u3064\u3060\u3051\u3067\u3059\u3002\n\u3053\u308c\u3067\u306f\u7269\u8db3\u308a\u306a\u3044\uff01\u3068\u3044\u3046\u65b9\u306e\u305f\u3081\u306b\uff08\u7b11\uff09\u3001AudioUnit\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\uff08\u4eca\u56de\u53d6\u308a\u4e0a\u3052\u308b\u30b3\u30fc\u30c9\u3092\u542b\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u6700\u5f8c\u306b\u7d39\u4ecb\u3059\u308bGithub\u306b\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff09\n\nAVAudioUnit\u306f\u3001AudioUnit\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n~~~objectivec:AVAudioUnit.h\n/*! @property audioUnit\n    @abstract Reference to the underlying audio unit.\n    @discussion\n        A reference to the underlying audio unit is provided so that parameters that are not\n        exposed by AVAudioUnit subclasses can be modified using the AudioUnit C API.\n \n        No operations that may conflict with state maintained by the engine should be performed\n        directly on the audio unit. These include changing initialization state, stream formats,\n        channel layouts or connections to other audio units.\n*/\n@property (nonatomic, readonly) AudioUnit audioUnit;\n~~~\n\nAudioUnit\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7d4c\u7531\u3057\u3066\u3001AudioUnitSetParameter\u95a2\u6570\u3067\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3001\u306b\u3064\u3044\u3066\u304c\u4eca\u56de\u306e\u8aac\u660e\u3059\u308b\u5185\u5bb9\u3067\u3059\u3002\n\n# \u6e96\u5099\n\n\u307e\u305a\u306f\u5909\u6570\u306e\u5ba3\u8a00\u3067\u3059\u3002\n\n~~~objectivec\n@interface AudioEngineIO ()\n{\n\tAVAudioEngine *_audioEngine;\n\tAVAudioFile *_audioFile;\n\tAVAudioPlayerNode *_audioPlayerNode;\n\tAVAudioUnitReverb *_audioUnitReverb;\n\t\n\tUInt32 _numOfParams;\n\tAudioUnitParameterID _paramId;\n\tAudioUnitParameterInfo *_paramInfo;\n}\n@end\n~~~\n\n\u6700\u521d\u306b\u521d\u671f\u5316\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u5f15\u6570\u306f\u30a2\u30d7\u30ea\u5185\u306b\u30bb\u30c3\u30c8\u3057\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n~~~objectivec\n- (OSStatus)initAVAudio:(NSString *)strFilePath\n{\n\tOSStatus ret = noErr;\n\t\n\t_audioEngine = [[AVAudioEngine alloc] init];\n\t_audioFile = [[AVAudioFile alloc] initForReading:[NSURL fileURLWithPath:strFilePath] error:nil];\n\t\n\t_audioPlayerNode = [[AVAudioPlayerNode alloc] init];\n\t[_audioEngine attachNode:_audioPlayerNode];\n\t\n\t_audioUnitReverb = [[AVAudioUnitReverb alloc] init];\n\t[_audioEngine attachNode:_audioUnitReverb];\n\t\n\t// Node\u306e\u63a5\u7d9a\n\t[_audioEngine connect:_audioPlayerNode to:_audioUnitReverb format:_audioFile.processingFormat];\n\t[_audioEngine connect:_audioUnitReverb to:_audioEngine.mainMixerNode format:_audioFile.processingFormat];\n\n\t// \u30d1\u30e9\u30e1\u30fc\u30bf\u53d6\u5f97\uff08\u8a73\u7d30\u7de8\uff09\n\t[self initAudioUnitParameter:_audioUnitReverb.audioUnit];\n\n\tNSError *error = nil;\n\tif (![_audioEngine startAndReturnError:&error]) {\n\t\treturn -1;\n\t}\n\t\n\treturn ret;\n}\n~~~\n\nAudioUnit\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u95a2\u3059\u308b\u90e8\u5206\u3092\u5225\u95a2\u6570\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u4ee3\u5165\u3001\u521d\u671f\u5316\u3092\u884c\u3044\u307e\u3059\u3002\n\n~~~objectivec\n- (void)initAudioUnitParameter:(AudioUnit)audioUnit\n{\n\t// AudioUnitGetProperty \u3067\u53d6\u5f97\u3059\u308b paramList \u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n\tUInt32 size = sizeof(UInt32);\n\tAudioUnitGetPropertyInfo(audioUnit,\n\t\t\t\t\t\t\t kAudioUnitProperty_ParameterList,\n\t\t\t\t\t\t\t kAudioUnitScope_Global,\n\t\t\t\t\t\t\t 0,\n\t\t\t\t\t\t\t &size,\n\t\t\t\t\t\t\t NULL);\n\t\n\tUInt32 numOfParams = size / sizeof(AudioUnitParameterID);\n\tNSLog(@\"numOfParams = %d\", numOfParams);\n\t_numOfParams = numOfParams;\n\t\n\t// paramList \u306e\u5404ID\u3092\u53d6\u5f97\n\tAudioUnitParameterID paramList[numOfParams];\n\tAudioUnitGetProperty(audioUnit,\n\t\t\t\t\t\t kAudioUnitProperty_ParameterList,\n\t\t\t\t\t\t kAudioUnitScope_Global,\n\t\t\t\t\t\t 0,\n\t\t\t\t\t\t paramList,\n\t\t\t\t\t\t &size);\n\t\n\t_paramInfo = (AudioUnitParameterInfo *)malloc(numOfParams * sizeof(AudioUnitParameterInfo));\n\t\n\tfor (int i = 0; i < numOfParams; i++) {\n\t\tNSLog(@\"paramList[%d] = %d\", i, (unsigned int)paramList[i]);\n\t\t_paramId = paramList[i];\n\t\t\n\t\t// \u5404ID\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\n\t\tsize = sizeof(_paramInfo[i]);\n\t\tAudioUnitGetProperty(audioUnit,\n\t\t\t\t\t\t\t kAudioUnitProperty_ParameterInfo,\n\t\t\t\t\t\t\t kAudioUnitScope_Global,\n\t\t\t\t\t\t\t paramList[i],\n\t\t\t\t\t\t\t &_paramInfo[i],\n\t\t\t\t\t\t\t &size);\n\t\t\n\t\tNSLog(@\"paramInfo.name = %s\", _paramInfo[i].name);\n\t\tNSLog(@\"paramInfo.minValue = %f\", _paramInfo[i].minValue);\n\t\tNSLog(@\"paramInfo.maxValue = %f\", _paramInfo[i].maxValue);\n\t\tNSLog(@\"paramInfo.defaultValue = %f\", _paramInfo[i].defaultValue);\n\t\t\n\t\t// init\n\t\tAudioUnitSetParameter(audioUnit,\n\t\t\t\t\t\t\t  paramList[i],\n\t\t\t\t\t\t\t  kAudioUnitScope_Global,\n\t\t\t\t\t\t\t  0,\n\t\t\t\t\t\t\t  _paramInfo[i].defaultValue,\n\t\t\t\t\t\t\t  0);\n\t}\n}\n~~~\n\nAVAudioUnitReverb\u306e\u5834\u5408\u3001numOfParams = 7 \u3068\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001AudioUnit\u3092\u7d4c\u7531\u3059\u308b\u3053\u3068\u30677\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n\nUISlider\u3067\u4ee5\u4e0b\u306esetEffectRate\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4e0a\u3067\u53d6\u5f97\u3057\u305f numOfParams \u306e\u6570\u3060\u3051UISlider\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n~~~objectivec\n/*\n iIndex : AudioUnit Parameter ID\n value : \u8a2d\u5b9a\u5024\n*/\n- (void)setEffectRate:(NSInteger)iIndex value:(Float32)value\n{\n\t[self setValue:iIndex value:value forParameter:_paramId min:_paramInfo[iIndex].minValue max:_paramInfo[iIndex].maxValue];\n}\n\n// private\n- (void)setValue:(NSInteger)iIndex value:(Float32)value forParameter:(AudioUnitParameterID)parameter min:(Float32)min max:(Float32)max\n{\n\tif (value < min || value > max) {\n\t\tNSLog(@\"Invalid value(%f)<%f - %f> for parameter(%d). Ignored.\", value, min, max, (unsigned int)parameter);\n\t\treturn;\n\t}\n\tOSStatus rt = AudioUnitSetParameter(_audioUnitReverb.audioUnit,\n\t\t\t\t\t\t\t\t\t\tparameter,\n\t\t\t\t\t\t\t\t\t\tkAudioUnitScope_Global,\n\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\t\t0);\n\tif (rt != noErr) {\n\t\tNSLog(@\"Error Setting parameter(%d)\", (unsigned int)parameter);\n\t}\n}\n~~~\n\n\u3053\u308c\u3067\u5b8c\u6210\u3057\u305f\u3068\u601d\u3044\u307e\u3059\uff01\n\n## \u30ea\u30d0\u30fc\u30d6\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u4ee5\u4e0b\u306f\u3001\u4e0a\u306einitAudioUnitParameter\u95a2\u6570\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u51fa\u529b\u3055\u308c\u308b\u30ed\u30b0\u3067\u3059\u3002\n\n~~~\nnumOfParams = 7\nparamList[0] = 0\nparamInfo.name = dry/wet mix\nparamInfo.minValue = 0.000000\nparamInfo.maxValue = 100.000000\nparamInfo.defaultValue = 50.000000\nparamList[1] = 1\nparamInfo.name = gain\nparamInfo.minValue = -20.000000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 0.000000\nparamList[2] = 2\nparamInfo.name = min delay time\nparamInfo.minValue = 0.000100\nparamInfo.maxValue = 1.000000\nparamInfo.defaultValue = 0.008000\nparamList[3] = 3\nparamInfo.name = max delay time\nparamInfo.minValue = 0.000100\nparamInfo.maxValue = 1.000000\nparamInfo.defaultValue = 0.050000\nparamList[4] = 4\nparamInfo.name = low freq decay time\nparamInfo.minValue = 0.001000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 1.000000\nparamList[5] = 5\nparamInfo.name = high freq decay time\nparamInfo.minValue = 0.001000\nparamInfo.maxValue = 20.000000\nparamInfo.defaultValue = 1.000000\nparamList[6] = 6\nparamInfo.name = randomize reflections\nparamInfo.minValue = 1.000000\nparamInfo.maxValue = 1000.000000\nparamInfo.defaultValue = 1.000000\n~~~\n\n\u300cAudio Unit\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a73\u7d30\uff08Effect\u7de8\uff09\u300d\u306e[kAudioUnitSubType_Reverb2](http://qiita.com/MJeeeey/items/fc9ebf3547fe40244e2c#kaudiounitsubtype_reverb2)\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Audio Unit Extensions\uff08\u30aa\u30fc\u30c7\u30a3\u30aa\u30fb\u30d7\u30e9\u30b0\u30a4\u30f3\uff09\n\niOS 9 \u304b\u3089\u3001AudioUnit\u3092\u30a2\u30d7\u30ea\u9593\u3067\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002`Audio Unit Extensions`\u3084`Audio Unit Version 3`\u306a\u3069\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4ee5\u4e0b\u304c\u5bfe\u8c61\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3059\u3002\n\n~~~objectivec:AVAudioUnit.h\n/*! @property AUAudioUnit\n    @abstract An AUAudioUnit wrapping or underlying the implementation's AudioUnit.\n    @discussion\n        This provides an AUAudioUnit which either wraps or underlies the implementation's\n        AudioUnit, depending on how that audio unit is packaged. Applications can interact with this\n        AUAudioUnit to control custom properties, select presets, change parameters, etc.\n \n        As with the audioUnit property, no operations that may conflict with state maintained by the\n        engine should be performed directly on the audio unit. These include changing initialization\n        state, stream formats, channel layouts or connections to other audio units.\n*/\n@property (nonatomic, readonly) AUAudioUnit *AUAudioUnit NS_AVAILABLE(10_11, 9_0);\n~~~\n\n\u3053\u3061\u3089\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u308c\u3060\u3051\u3067\u8907\u6570\u306e\u8a18\u4e8b\u304c\u66f8\u3051\u308b\u304f\u3089\u3044\u306e\u30dc\u30ea\u30e5\u30fc\u30e0\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u3001\u5225\u306e\u6a5f\u4f1a\u3067\u8a73\u7d30\u306b\u53d6\u308a\u4e0a\u3052\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u30b5\u30f3\u30d7\u30eb\n\n\u672c\u8a18\u4e8b\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff08AudioEngineIO\uff09\nhttps://github.com/JunichiMinamino/AUGraphSample\n"}