{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3042\u308b\u30b3\u30fc\u30c9\u306e\u521d\u671f\u5316\u304c\u9045\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3089\u3001std::stringstream\u304c\u539f\u56e0\u3060\u3063\u305f\u3002\u3055\u3089\u306b\u8abf\u3079\u3066\u307f\u305f\u3089\u3001gcc\u3068clang\u3067\u3060\u3044\u3076\u901f\u5ea6\u304c\u9055\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002100\u500b\u306e0-9\u306e\u4e71\u6570\u3092\u6587\u5b57\u5217\u306b\u3057\u3066\u3001\u305d\u308c\u3092std::string\u3068\u3057\u3066500000\u56devector\u306bpush_back\u3059\u308b\u3002push_back\u3059\u308b\u6587\u5b57\u5217\u306e\u4f5c\u308a\u65b9\u3092\u4ee5\u4e0b\u306e\u4e09\u901a\u308a\u7528\u610f\u3057\u305f\u3002\n\nstd::stringstream\u306b<<\u3057\u3066\u3044\u304f(test_ss)\nstd::string\u306bchar\u3068\u3057\u3066append\u3057\u3066\u3044\u304f(test_str)\n\u4e88\u3081\u7528\u610f\u3057\u305fchar\u306e\u914d\u5217\u306e\u4e2d\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b(test_char)\n\n\nsstest.cc\n//----------------------------------------------------------------------\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <random>\n#include <sys/time.h>\n//----------------------------------------------------------------------\nstd::uniform_int_distribution<> rand9(0, 9);\nconst int TRIAL = 500000;\nconst int LEN = 100;\n//----------------------------------------------------------------------\nvoid\nshow(std::vector<std::string> &sv) {\n  for (int i = 0; i < sv.size(); i++) {\n    std::cout << sv[i] << std::endl;;\n  }\n}\n//----------------------------------------------------------------------\ndouble\nmyclock(void) {\n  struct timeval t;\n  gettimeofday(&t, NULL);\n  return t.tv_sec + t.tv_usec * 1e-6;\n}\n//----------------------------------------------------------------------\nvoid\ntest_ss(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    std::stringstream ss;\n    for (int i = 0; i < LEN; i++) {\n      ss << rand9(g);\n    }\n    sv.push_back(ss.str());\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\ntest_str(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    std::string str;\n    for (int i = 0; i < LEN; i++) {\n      str.append(1, rand9(g) + '0');\n    }\n    sv.push_back(str);\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\ntest_char(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  char str[LEN + 1];\n  str[LEN] = 0;\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    for (int i = 0; i < LEN; i++) {\n      str[i] = rand9(g) + '0';\n    }\n    sv.push_back(str);\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\nmeasure(void(*pfunc)(), const char *name) {\n  double st = myclock();\n  pfunc();\n  double t = myclock() - st;\n  printf(\"%s %f [sec]\\n\", name, t);\n}\n//----------------------------------------------------------------------\nint\nmain(void) {\n  measure(&test_ss, \"stringstream\");\n  measure(&test_str, \"string\");\n  measure(&test_char, \"char\");\n}\n//----------------------------------------------------------------------\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001GCC\u304cg++ (MacPorts gcc49 4.9.3_0) 4.9.3\u3001clang++\u304cApple LLVM version 7.0.0 (clang-700.1.76)\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3069\u3061\u3089\u3082-O3 -std=c++11\u3002\u74b0\u5883\u306fMac OS X (Yosemite, 10.10.5)\u3002\n\n\u7d50\u679c\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u5358\u4f4d\u306f\u79d2\u3002\n\n\n\n\ng++\nclang++\n\n\n\n\nstd::stringstream\n3.966758\n15.250005\n\n\nstd::string::append\n1.826684\n2.800154\n\n\nchar\n0.653535\n2.123492\n\n\n\ng++\u306f\u3055\u307b\u3069\u5909\u306a\u3053\u3068\u306f\u7121\u304f\u3066\u3001\u307e\u3041\u3053\u3093\u306a\u901f\u5ea6\u3060\u308d\u3046\u306a\u3001\u3068\u3044\u3046\u3082\u306e\u3002clang++\u3082\u3001std::string::append\u3068char\u304c\u3001g++\u306b\u6bd4\u3079\u3066\u3061\u3087\u3063\u3068\u9045\u3044\u306a\u3001\u3068\u3044\u3046\u6c17\u306f\u3059\u308b\u3051\u3069\u3001\u307e\u3041\u3053\u3093\u306a\u3082\u306e\u3067\u3057\u3087\u3046\u3002\n\u7279\u7b46\u3059\u3079\u304d\u306fstd::stringstream\u306b<<\u3059\u308b\u5834\u5408\u3002\u3053\u308c\u306fg++\u306e4\u500d\u8fd1\u304f\u9045\u3044\u3002\n\n\u307e\u3068\u3081\nstd::stringstream\u306b\u6574\u6570\u3092<<\u3067\u8ffd\u52a0\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001clang++\u3067\u306f\u3059\u3054\u304f\u9045\u3044\u3002\u539f\u56e0\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001clang\u306e\u6574\u6570\u2192\u6587\u5b57\u5217\u5909\u63db\u304c\u9045\u3044\u306e\u304b\u306a\u3041\uff1f\n\n\u8ffd\u8a18 (2015 11/6 18:00)\n\u30b3\u30e1\u30f3\u30c8\u306b\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u306a\u304f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u554f\u984c\u3068\u306e\u6307\u6458\u3092\u53d7\u3051\u305f\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u305f\u3002\u306a\u305c\u304bclang\u306b-stdlib=libstdc++ -std=c++11\u3092\u98df\u308f\u305b\u305f\u3089\u300crandom\u300d\u30d8\u30c3\u30c0\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3068\u304b\u8a00\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u4e71\u6570\u767a\u751f\u3092stdlib\u306erandom\u306b\u5909\u3048\u305fsstest2.cc\u3092\u4f7f\u3063\u305f\u3002\u9762\u5012\u306a\u306e\u3067\u30b7\u30fc\u30c9\u3082\u5408\u308f\u305b\u3066\u306a\u3044\u3002\n\u4ee5\u4e0b\u306f\u3001\u7d50\u679c\u3002\u5358\u4f4d\u306f\u79d2\u3002\n\n\n\n\ng++\nclang++ -stdlib=libc++\nclang++ -stdlib=libstdc++\n\n\n\n\nstd::stringstream\n4.122507\n11.832311\n3.413724\n\n\nstd::string::append\n1.76911\n1.335249\n1.666287\n\n\nchar\n0.669501\n0.713631\n0.623669\n\n\n\n-stdlib=libstdc++\u3092\u6307\u5b9a\u3057\u305fclang++\u306f\u901f\u5ea6\u304c\u5927\u304d\u304f\u5411\u4e0a\u3001\u3068\u3044\u3046\u304bg++\u3088\u308a\u3082\u65e9\u304f\u306a\u3063\u305f\u3002\u4f55\u5ea6\u304b\u8a66\u3057\u305f\u304c\u3001\u6709\u610f\u306b\u65e9\u3044\u3002\n# \u306f\u3058\u3081\u306b\n\n\u3042\u308b\u30b3\u30fc\u30c9\u306e\u521d\u671f\u5316\u304c\u9045\u304b\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3089\u3001std::stringstream\u304c\u539f\u56e0\u3060\u3063\u305f\u3002\u3055\u3089\u306b\u8abf\u3079\u3066\u307f\u305f\u3089\u3001gcc\u3068clang\u3067\u3060\u3044\u3076\u901f\u5ea6\u304c\u9055\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u307f\u305f\u3002\n\n# \u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002100\u500b\u306e0-9\u306e\u4e71\u6570\u3092\u6587\u5b57\u5217\u306b\u3057\u3066\u3001\u305d\u308c\u3092std::string\u3068\u3057\u3066500000\u56devector\u306bpush_back\u3059\u308b\u3002push_back\u3059\u308b\u6587\u5b57\u5217\u306e\u4f5c\u308a\u65b9\u3092\u4ee5\u4e0b\u306e\u4e09\u901a\u308a\u7528\u610f\u3057\u305f\u3002\n\n1. std::stringstream\u306b<<\u3057\u3066\u3044\u304f(test_ss)\n2. std::string\u306bchar\u3068\u3057\u3066append\u3057\u3066\u3044\u304f(test_str)\n3. \u4e88\u3081\u7528\u610f\u3057\u305fchar\u306e\u914d\u5217\u306e\u4e2d\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b(test_char)\n\n\n```cpp:sstest.cc\n//----------------------------------------------------------------------\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <random>\n#include <sys/time.h>\n//----------------------------------------------------------------------\nstd::uniform_int_distribution<> rand9(0, 9);\nconst int TRIAL = 500000;\nconst int LEN = 100;\n//----------------------------------------------------------------------\nvoid\nshow(std::vector<std::string> &sv) {\n  for (int i = 0; i < sv.size(); i++) {\n    std::cout << sv[i] << std::endl;;\n  }\n}\n//----------------------------------------------------------------------\ndouble\nmyclock(void) {\n  struct timeval t;\n  gettimeofday(&t, NULL);\n  return t.tv_sec + t.tv_usec * 1e-6;\n}\n//----------------------------------------------------------------------\nvoid\ntest_ss(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    std::stringstream ss;\n    for (int i = 0; i < LEN; i++) {\n      ss << rand9(g);\n    }\n    sv.push_back(ss.str());\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\ntest_str(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    std::string str;\n    for (int i = 0; i < LEN; i++) {\n      str.append(1, rand9(g) + '0');\n    }\n    sv.push_back(str);\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\ntest_char(void) {\n  std::mt19937 g((std::random_device())());\n  g.seed(1);\n  char str[LEN + 1];\n  str[LEN] = 0;\n  std::vector<std::string> sv;\n  for (int j = 0; j < TRIAL; j++) {\n    for (int i = 0; i < LEN; i++) {\n      str[i] = rand9(g) + '0';\n    }\n    sv.push_back(str);\n  }\n  //show(sv);\n}\n//----------------------------------------------------------------------\nvoid\nmeasure(void(*pfunc)(), const char *name) {\n  double st = myclock();\n  pfunc();\n  double t = myclock() - st;\n  printf(\"%s %f [sec]\\n\", name, t);\n}\n//----------------------------------------------------------------------\nint\nmain(void) {\n  measure(&test_ss, \"stringstream\");\n  measure(&test_str, \"string\");\n  measure(&test_char, \"char\");\n}\n//----------------------------------------------------------------------\n\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001GCC\u304cg++ (MacPorts gcc49 4.9.3_0) 4.9.3\u3001clang++\u304cApple LLVM version 7.0.0 (clang-700.1.76)\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3069\u3061\u3089\u3082`-O3 -std=c++11`\u3002\u74b0\u5883\u306fMac OS X (Yosemite, 10.10.5)\u3002\n\n# \u7d50\u679c\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u5358\u4f4d\u306f\u79d2\u3002\n\n|            | g++ | clang++ |\n|:-----------|-----| --------|\n| std::stringstream|3.966758  |15.250005|\n| std::string::append|1.826684 |2.800154|\n| char |0.653535| 2.123492| \n\ng++\u306f\u3055\u307b\u3069\u5909\u306a\u3053\u3068\u306f\u7121\u304f\u3066\u3001\u307e\u3041\u3053\u3093\u306a\u901f\u5ea6\u3060\u308d\u3046\u306a\u3001\u3068\u3044\u3046\u3082\u306e\u3002clang++\u3082\u3001std::string::append\u3068char\u304c\u3001g++\u306b\u6bd4\u3079\u3066\u3061\u3087\u3063\u3068\u9045\u3044\u306a\u3001\u3068\u3044\u3046\u6c17\u306f\u3059\u308b\u3051\u3069\u3001\u307e\u3041\u3053\u3093\u306a\u3082\u306e\u3067\u3057\u3087\u3046\u3002\n\n\u7279\u7b46\u3059\u3079\u304d\u306fstd::stringstream\u306b<<\u3059\u308b\u5834\u5408\u3002\u3053\u308c\u306fg++\u306e4\u500d\u8fd1\u304f\u9045\u3044\u3002\n\n# \u307e\u3068\u3081\n\nstd::stringstream\u306b\u6574\u6570\u3092<<\u3067\u8ffd\u52a0\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001clang++\u3067\u306f\u3059\u3054\u304f\u9045\u3044\u3002\u539f\u56e0\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001clang\u306e\u6574\u6570\u2192\u6587\u5b57\u5217\u5909\u63db\u304c\u9045\u3044\u306e\u304b\u306a\u3041\uff1f\n\n# \u8ffd\u8a18 (2015 11/6 18:00)\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u306a\u304f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u554f\u984c\u3068\u306e\u6307\u6458\u3092\u53d7\u3051\u305f\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u305f\u3002\u306a\u305c\u304bclang\u306b`-stdlib=libstdc++ -std=c++11`\u3092\u98df\u308f\u305b\u305f\u3089\u300crandom\u300d\u30d8\u30c3\u30c0\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3068\u304b\u8a00\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u4e71\u6570\u767a\u751f\u3092stdlib\u306erandom\u306b\u5909\u3048\u305f[sstest2.cc](https://gist.github.com/kaityo256/d2e876cf25dea0f83d04)\u3092\u4f7f\u3063\u305f\u3002\u9762\u5012\u306a\u306e\u3067\u30b7\u30fc\u30c9\u3082\u5408\u308f\u305b\u3066\u306a\u3044\u3002\n\n\u4ee5\u4e0b\u306f\u3001\u7d50\u679c\u3002\u5358\u4f4d\u306f\u79d2\u3002\n\n|            | g++ | clang++ -stdlib=libc++ | clang++ -stdlib=libstdc++|\n|:-----------|-----| --------|--------|\n| std::stringstream| 4.122507|  11.832311| 3.413724|\n| std::string::append| 1.76911 |1.335249|1.666287|\n| char | 0.669501|0.713631|0.623669 |\n\n`-stdlib=libstdc++`\u3092\u6307\u5b9a\u3057\u305fclang++\u306f\u901f\u5ea6\u304c\u5927\u304d\u304f\u5411\u4e0a\u3001\u3068\u3044\u3046\u304bg++\u3088\u308a\u3082\u65e9\u304f\u306a\u3063\u305f\u3002\u4f55\u5ea6\u304b\u8a66\u3057\u305f\u304c\u3001\u6709\u610f\u306b\u65e9\u3044\u3002\n", "tags": ["clang", "C++"]}