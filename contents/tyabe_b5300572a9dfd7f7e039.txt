{"context": " More than 1 year has passed since last update.Padrino 0.12.0 \u4ee5\u964d\u3067\u306f protect_from_csrf \u306b except \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\napp/app.rb\nmodule Sample\n  class App < Padrino::Application\n    #...\n    set :protect_from_csrf, except: %r{/__better_errors/\\d+/\\w+\\z}\n\n\n\u4ee5\u964d\u306f\u3001Padrino 0.11.x \u3067\u306e\u304a\u8a71\u3067\u3059\u3002\n\nBetter Errors \u306e\u5c0e\u5165\u81ea\u4f53\u306f\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u306e\u901a\u308a\u3067\u3044\u3044\u306e\u3067\u3059\u304c\u3001protect_from_csrf \u304c\u6709\u52b9\u3068\u306a\u3063\u3066\u3044\u308b\u5834\u5408 ( Padrino 0.11 \u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6709\u52b9 ) \u306b\u306f\u3001Better Errors \u304c\u8868\u793a\u3059\u308b\u30da\u30fc\u30b8\u304b\u3089\u306e HXR \u304c\u901a\u3089\u305a\u30da\u30fc\u30b8\u53f3\u5074\u304c\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\n\u3053\u308c\u3067\u306f Better Errors \u3092\u4f7f\u3063\u3066\u3044\u308b\u610f\u5473\u304c\u307e\u308b\u3063\u304d\u308a\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u4ee5\u4e0b\u306e\u30d1\u30c3\u30c1\u3067\u56de\u907f\u3057\u307e\u3057\u305f\u3002\n1.\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u4fdd\u8b77\u5bfe\u8c61\u5916\u3068\u3059\u308b\u30d1\u30c3\u30c1\u3092 lib \u306e\u4e0b\u306b\u7f6e\u304f\n\nlib/rack_protection.rb\nif Padrino.env == :development\n  module Rack\n    module Protection\n      class AuthenticityToken\n        def accepts_with_allowed_path?(env)\n          if defined?(Padrino::Application.exclude_from_protection)\n            [Padrino::Application.exclude_from_protection].flatten.each do |path|\n              return true if Regexp.new(path).match(env['REQUEST_PATH'])\n            end\n          end\n          accepts_without_allowed_path?(env)\n        end\n        alias_method_chain :accepts?, :allowed_path\n      end\n    end\n  end\nend \n\n\n2.\u4fdd\u8b77\u5bfe\u8c61\u5916\u3068\u3059\u308b\u30d1\u30b9\u3092 Better Errors \u306e\u8a2d\u5b9a\u3068\u4e00\u7dd2\u306b\u6307\u5b9a\u3059\u308b\n\nconfig/boot.rb\nif Padrino.env == :development\n  # Setup better_errors\n  Padrino::Application.use BetterErrors::Middleware\n  BetterErrors.application_root = PADRINO_ROOT\n  BetterErrors::Middleware.allow_ip! ENV['TRUSTED_IP'] if ENV['TRUSTED_IP']\n  Padrino::Application.set :exclude_from_protection, '/__better_errors' # Append this\n  # ...\nend\n\n\nRack:: Protection \u5074\u3092\u3044\u3058\u308b\u306e\u306f\u5acc\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3057\u304b\u601d\u3044\u3064\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u2026\u3002\n\nPadrino 0.12.0 \u4ee5\u964d\u3067\u306f protect_from_csrf \u306b except \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```ruby:app/app.rb\nmodule Sample\n  class App < Padrino::Application\n    #...\n    set :protect_from_csrf, except: %r{/__better_errors/\\d+/\\w+\\z}\n```\n\n\u4ee5\u964d\u306f\u3001Padrino 0.11.x \u3067\u306e\u304a\u8a71\u3067\u3059\u3002\n\n---\n\nBetter Errors \u306e\u5c0e\u5165\u81ea\u4f53\u306f[\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b](http://qiita.com/tyabe/items/1512c5c4aab5d51c811a)\u306e\u901a\u308a\u3067\u3044\u3044\u306e\u3067\u3059\u304c\u3001protect_from_csrf \u304c\u6709\u52b9\u3068\u306a\u3063\u3066\u3044\u308b\u5834\u5408 ( Padrino 0.11 \u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6709\u52b9 ) \u306b\u306f\u3001Better Errors \u304c\u8868\u793a\u3059\u308b\u30da\u30fc\u30b8\u304b\u3089\u306e HXR \u304c\u901a\u3089\u305a\u30da\u30fc\u30b8\u53f3\u5074\u304c\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u3067\u306f Better Errors \u3092\u4f7f\u3063\u3066\u3044\u308b\u610f\u5473\u304c\u307e\u308b\u3063\u304d\u308a\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u4ee5\u4e0b\u306e\u30d1\u30c3\u30c1\u3067\u56de\u907f\u3057\u307e\u3057\u305f\u3002\n\n1.\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u3092\u4fdd\u8b77\u5bfe\u8c61\u5916\u3068\u3059\u308b\u30d1\u30c3\u30c1\u3092 lib \u306e\u4e0b\u306b\u7f6e\u304f\n\n```ruby:lib/rack_protection.rb\nif Padrino.env == :development\n  module Rack\n    module Protection\n      class AuthenticityToken\n        def accepts_with_allowed_path?(env)\n          if defined?(Padrino::Application.exclude_from_protection)\n            [Padrino::Application.exclude_from_protection].flatten.each do |path|\n              return true if Regexp.new(path).match(env['REQUEST_PATH'])\n            end\n          end\n          accepts_without_allowed_path?(env)\n        end\n        alias_method_chain :accepts?, :allowed_path\n      end\n    end\n  end\nend \n```\n\n2.\u4fdd\u8b77\u5bfe\u8c61\u5916\u3068\u3059\u308b\u30d1\u30b9\u3092 Better Errors \u306e\u8a2d\u5b9a\u3068\u4e00\u7dd2\u306b\u6307\u5b9a\u3059\u308b\n\n```ruby:config/boot.rb\nif Padrino.env == :development\n  # Setup better_errors\n  Padrino::Application.use BetterErrors::Middleware\n  BetterErrors.application_root = PADRINO_ROOT\n  BetterErrors::Middleware.allow_ip! ENV['TRUSTED_IP'] if ENV['TRUSTED_IP']\n  Padrino::Application.set :exclude_from_protection, '/__better_errors' # Append this\n  # ...\nend\n```\n\nRack:: Protection \u5074\u3092\u3044\u3058\u308b\u306e\u306f\u5acc\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3057\u304b\u601d\u3044\u3064\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u2026\u3002", "tags": ["Ruby", "Padrino"]}