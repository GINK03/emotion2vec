{"context": " More than 1 year has passed since last update.Daily Coding \u3067Project Euler \u306b\u6311\u6226\u3057\u3066\u3044\u308b\u4eca\u65e5\u3053\u306e\u3054\u308d\u3067\u3059\u304c\uff0cProblem 40 \u307e\u3067\u89e3\u3044\u3066\u305d\u308d\u305d\u308d\u5171\u901a\u9805\u3068\u3044\u3046\u304b\uff0c\u3088\u304f\u4f7f\u3046\u95a2\u6570\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\uff0e\n\u305d\u3053\u3067\uff0c\u5c11\u3057\u305a\u3064\u307e\u3068\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\nhttps://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.scm\n\u5df7\u3067\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u306a\u3093\u3068\u306a\u304f\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8( https://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.test.scm )\u3067\u958b\u767a\u3092\u3059\u3059\u3081\u3066\u307e\u3059\uff0e\n\u306b\u3057\u3066\u3082\u547d\u540d\u3063\u3066\u96e3\u3057\u3044\uff0e\n\u3068\u308a\u3042\u3048\u305a\uff0c\u5909\u63db\u7cfb\u306f->\uff0c\u8a08\u7b97\u7cfb\u306f\u7d50\u679c\u306e\u540d\u8a5e(primes \u306a\u3069)\u3068\u304b\u8272\u3005\u3084\u3063\u3066\u308b\u3051\u3069\uff0e\n\u4f8b\u3048\u3070\uff0c\u4e0e\u3048\u3089\u308c\u305f\u6570\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3068\u304b\u3063\u3066\u3069\u3046\u3044\u3046\u540d\u524d\u306b\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u304b\u306d\uff0e\n\u4e00\u5fdc\u4e0a\u306b\u6319\u3052\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306fprime-predicator (\u7d50\u679c\u306e\u540d\u524d) \u3068\u540d\u3065\u3051\u307e\u3057\u305f\u304c\uff0cmake-prime? \u3068\u304b\u306e\u65b9\u304c\u826f\u3044\u306e\u304b\u3069\u3046\u306a\u306e\u304b\u2026\u2026\n\u3042\u3068\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u305f\u3064\u3044\u3067\u306b\u8272\u3005\u9ad8\u901f\u5316\u3057\u3066\u305f\u308a\u3057\u3066\u307e\u3059(\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u304c\u6545\u306bLisper \u3068\u3057\u3066\u306e\u8a87\u308a\u3068\u304b\u306a\u3093\u3068\u304b\u3092\u653e\u68c4\u3067\u304d\u308b\u306e\u3067\u2026\u2026\uff1f)\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3068\u304b\uff0c\u3084\u306f\u308avector \u4f7f\u3063\u3066\u7834\u58ca\u7684\u64cd\u4f5c\u3059\u308b\u3068\u5168\u7136\u65e9\u3044\u3067\u3059\u306d\uff0e\n(use srfi-43)\n\n(define (primes n)\n  (define (from-index n)\n    (+ (* n 2) 1))\n  (define (to-index n)\n    (quotient n 2))\n\n  (let ((h (make-vector (to-index n) #t)))\n    (vector-set! h 0 #f)\n    (do ((i 3 (+ i 2))) ((> (* i i) n))\n      (when (vector-ref h (to-index i))\n        (do ((j (* i 3) (+ j (* i 2)))) ((>= j n))\n          (vector-set! h (to-index j) #f))))\n\n    (cons 2\n      (vector-fold-right\n        (lambda (n lis elt) (if elt (cons (from-index n) lis) lis))\n        '() h))))\n\n;(time (primes 10000000))\n; real   1.244\n; user   1.230\n; sys    0.010\n\n\u307e\u3041\u305d\u3093\u306a\u3053\u3093\u306a\u3067\uff0c\u6696\u304b\u304f\u898b\u5b88\u3063\u3066\u304f\u3060\u3055\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff1e\u0394\uff1c\nDaily Coding \u3067Project Euler \u306b\u6311\u6226\u3057\u3066\u3044\u308b\u4eca\u65e5\u3053\u306e\u3054\u308d\u3067\u3059\u304c\uff0cProblem 40 \u307e\u3067\u89e3\u3044\u3066\u305d\u308d\u305d\u308d\u5171\u901a\u9805\u3068\u3044\u3046\u304b\uff0c\u3088\u304f\u4f7f\u3046\u95a2\u6570\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\uff0e\n\u305d\u3053\u3067\uff0c\u5c11\u3057\u305a\u3064\u307e\u3068\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff0e\n\nhttps://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.scm\n\n\u5df7\u3067\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u306a\u3093\u3068\u306a\u304f\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8( https://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.test.scm )\u3067\u958b\u767a\u3092\u3059\u3059\u3081\u3066\u307e\u3059\uff0e\n\n\u306b\u3057\u3066\u3082\u547d\u540d\u3063\u3066\u96e3\u3057\u3044\uff0e\n\u3068\u308a\u3042\u3048\u305a\uff0c\u5909\u63db\u7cfb\u306f->\uff0c\u8a08\u7b97\u7cfb\u306f\u7d50\u679c\u306e\u540d\u8a5e(primes \u306a\u3069)\u3068\u304b\u8272\u3005\u3084\u3063\u3066\u308b\u3051\u3069\uff0e\n\u4f8b\u3048\u3070\uff0c\u4e0e\u3048\u3089\u308c\u305f\u6570\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3068\u304b\u3063\u3066\u3069\u3046\u3044\u3046\u540d\u524d\u306b\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u304b\u306d\uff0e\n\u4e00\u5fdc\u4e0a\u306b\u6319\u3052\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306fprime-predicator (\u7d50\u679c\u306e\u540d\u524d) \u3068\u540d\u3065\u3051\u307e\u3057\u305f\u304c\uff0cmake-prime? \u3068\u304b\u306e\u65b9\u304c\u826f\u3044\u306e\u304b\u3069\u3046\u306a\u306e\u304b\u2026\u2026\n\n\u3042\u3068\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u305f\u3064\u3044\u3067\u306b\u8272\u3005\u9ad8\u901f\u5316\u3057\u3066\u305f\u308a\u3057\u3066\u307e\u3059(\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u304c\u6545\u306bLisper \u3068\u3057\u3066\u306e\u8a87\u308a\u3068\u304b\u306a\u3093\u3068\u304b\u3092\u653e\u68c4\u3067\u304d\u308b\u306e\u3067\u2026\u2026\uff1f)\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3068\u304b\uff0c\u3084\u306f\u308avector \u4f7f\u3063\u3066\u7834\u58ca\u7684\u64cd\u4f5c\u3059\u308b\u3068\u5168\u7136\u65e9\u3044\u3067\u3059\u306d\uff0e\n\n```scheme\n(use srfi-43)\n\n(define (primes n)\n  (define (from-index n)\n    (+ (* n 2) 1))\n  (define (to-index n)\n    (quotient n 2))\n\n  (let ((h (make-vector (to-index n) #t)))\n    (vector-set! h 0 #f)\n    (do ((i 3 (+ i 2))) ((> (* i i) n))\n      (when (vector-ref h (to-index i))\n        (do ((j (* i 3) (+ j (* i 2)))) ((>= j n))\n          (vector-set! h (to-index j) #f))))\n\n    (cons 2\n      (vector-fold-right\n        (lambda (n lis elt) (if elt (cons (from-index n) lis) lis))\n        '() h))))\n\n;(time (primes 10000000))\n; real   1.244\n; user   1.230\n; sys    0.010\n```\n\n\u307e\u3041\u305d\u3093\u306a\u3053\u3093\u306a\u3067\uff0c\u6696\u304b\u304f\u898b\u5b88\u3063\u3066\u304f\u3060\u3055\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff1e\u0394\uff1c", "tags": ["Scheme", "Gauche"]}