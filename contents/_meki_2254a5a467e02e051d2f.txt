{"context": " More than 1 year has passed since last update.AIZU ONLINE JUDGE \u3068\u3044\u3046\u4f1a\u6d25\u5927\u5b66\u63d0\u4f9b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u554f\u984c\u63d0\u51fa\uff06\u63a1\u70b9\u30b5\u30a4\u30c8\u3092\u898b\u3064\u3051\u3066\u697d\u3057\u304f\u306a\u3063\u305f\u306e\u3067\u3001\u8272\u3005\u306a\u8a00\u8a9e\u3067\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u8a00\u8a9e\u306f C++, python, php, sqlite3, common lisp \u306e5\u3064\u3092\u9078\u629e\u3002\n\u666e\u6bb5\u4f7f\u3063\u3066\u3044\u308b\u8a00\u8a9e\u306f C++ \u3067\u3001\u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u306f\u30cd\u30c3\u30c8\u306a\u3069\u3067\u8abf\u3079\u306a\u304c\u3089\u66f8\u3044\u305f\u3002\n\u4eca\u56de\u306f 0001 List of Top 3 Hills \u3068\u3044\u3046\u554f\u984c\u3002\n\n\u554f\u984c\n\nList of Top 3 Hills\n\u5c71\u306e\u9ad8\u3055\u3092\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u306e\u6574\u6570\u3067\u8868\u3057\u305f 10 \u500b\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e 10 \u500b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u4e2d\u3067\u3001\u9ad8\u3044\u9806\u304b\u3089\uff13\u3064\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002 \n\nInput\n\n\u5c71\u306e\u9ad8\u3055\uff11\uff08\u6574\u6570\uff09\u3000\n\u5c71\u306e\u9ad8\u3055\uff12\uff08\u6574\u6570\uff09\u3000\n    .\n    .\n\u5c71\u306e\u9ad8\u3055\uff11\uff10\uff08\u6574\u6570\uff09\u3000\n\n\nConstraints\n\n0 \u2264 \u5c71\u306e\u9ad8\u3055 \u2264 10000 \n\n\nOutput\n\n\u6700\u3082\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n\uff12\u756a\u76ee\u306b\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n\uff13\u756a\u76ee\u306b\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n\n\nSample Input\n\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\n\n\nOutput for the Sample Input\n\n3776\n2848\n2840\n\n\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u5165\u529b\u306b\u5bfe\u3057\u3066\u6b63\u3057\u3044\u7b54\u3048\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u304f\u3002\n\u3069\u306e\u8a00\u8a9e\u3067\u3082\u30bd\u30fc\u30c8\u306f\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u81ea\u5206\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u66f8\u304f\u5fc5\u8981\u306f\u7121\u304b\u3063\u305f\u3002\n\n\u56de\u7b54\n\nC++\n\n#include <iostream>\n#include <set>\nusing namespace std;\n\nint main() {\n\n  typedef std::multiset<int> MySet;\n  MySet heightSet;\n\n  for(int i = 0; i < 10; ++i)\n  {\n    int val;\n    cin >> val;\n    // set \u306b\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u3068\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\n    heightSet.insert(val);\n  }\n\n  // \u5927\u304d\u3044\u9806\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b reverse_iterator \u3092\u4f7f\u3046\n  MySet::reverse_iterator rit = heightSet.rbegin();\n  for(int i = 0; i < 3; ++i)\n  {\n    cout << *rit << endl;\n    ++rit;\n  }\n  return 0;\n}\n\n\nSTL \u306e multiset \u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3046\u3068\u8981\u7d20\u633f\u5165\u306e\u969b\u306b\u81ea\u52d5\u30bd\u30fc\u30c8\u3055\u308c\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u30b5\u30dc\u308c\u308b\u3002\n\npython\n\n# \u914d\u5217\u3092\u4f5c\u6210\nn = list()\n\nfor var in range(0, 10):\n  # \u6a19\u6e96\u5165\u529b\u304b\u3089\u4e00\u884c\u8aad\u307f\u8fbc\u307f\n  # int \u306b\u30ad\u30e3\u30b9\u30c8\n  n.append( int(raw_input()) )\n\n# \u914d\u5217\u3092\u964d\u9806\u30bd\u30fc\u30c8\nn.sort(reverse = True)\n\nfor var in range(0, 3):\n  print n[var]\n\n\npython \u3060\u3068\u77ed\u304f\u66f8\u3051\u308b\u306a\u3068\u611f\u52d5\u3002\n\nPHP\n\n<?php\n$hi = fopen('php://stdin', \"r\");\n$ho = fopen('php://stdout', \"w\");\n\n# \u7a7a\u306e\u914d\u5217\u3092\u4f5c\u6210\n$arr = array();\n\n# \u6a19\u6e96\u5165\u529b\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\nfor($i = 0; $i < 10; $i++)\n{\n    fscanf($hi, \"%d\", $arr[]);\n}\n\n# \u964d\u9806\u30bd\u30fc\u30c8\nrsort($arr);\n\n# \u51fa\u529b\nfor($i = 0; $i < 3; $i++)\n{\n    fwrite($ho, sprintf(\"%d\\n\", $arr[$i]));\n}\n\nfclose($ho);\nfclose($hi);\n\n\n\u5909\u6570\u306b $ \u3092\u3064\u3051\u308b\u3068\u3053\u308d\u3092\u9664\u3051\u3070 c \u8a00\u8a9e\u306b\u8fd1\u3044\u611f\u899a\u3002\n\nsqlite3\n\n-- \u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\ncreate table tbl(height integer);\n\n-- \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n.import data.txt tbl\n\n-- 'tbl' \u304b\u3089 'height' \u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u964d\u9806\u30bd\u30fc\u30c8\u3057\u3066 3 \u884c\u8aad\u307f\u8fbc\u3080\nselect * from tbl order by height desc limit 3;\n\n\nsqlite3 \u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u306b\u60c5\u5831\u3092\u5165\u308c\u308b\u65b9\u6cd5\u304c\u5224\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u3093\u3067\u307e\u3059\u3002\n\nCommon Lisp\n\n;; \u6a19\u6e96\u5165\u529b\u304b\u3089 n \u56de\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n(defun input (lst n)\n    (cond\n        ((eq (length lst) n)\n            lst\n        )\n        (t\n            (input (append lst (list (read)) ) n )\n        )\n    )\n)\n\n;; \u30ea\u30b9\u30c8\u306e\u5148\u982d n \u8981\u7d20\u306e\u90e8\u5206\u914d\u5217\u3092\u4f5c\u6210\n(defun gettop (lst n)\n    (if (or (= n 0) (null lst))\n        nil\n        (cons (car lst)\n            (gettop (cdr lst) (- n 1))\n        )\n    )\n)\n\n(mapcar #'(lambda (x) (format t \"~A~%\" x))  ; \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u6539\u884c\u533a\u5207\u308a\u3067\u51fa\u529b\u3059\u308b\n    (gettop\n        (sort (input () 10) #'>)    ; \u6a19\u6e96\u5165\u529b\u304b\u3089\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u964d\u9806\u30bd\u30fc\u30c8\u3059\u308b\n        3                           ; \u5148\u982d3\u3064\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n    )\n)\n\n\nCommonLisp \u306f\u624b\u7d9a\u304d\u578b\u306b\u6163\u308c\u305f\u8eab\u304b\u3089\u3059\u308b\u3068\u7570\u8cea\u904e\u304e\u3066\u51c4\u3044\u624b\u9593\u53d6\u3063\u305f\u3002\n[AIZU ONLINE JUDGE](http://judge.u-aizu.ac.jp/onlinejudge/index.jsp) \u3068\u3044\u3046\u4f1a\u6d25\u5927\u5b66\u63d0\u4f9b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u554f\u984c\u63d0\u51fa\uff06\u63a1\u70b9\u30b5\u30a4\u30c8\u3092\u898b\u3064\u3051\u3066\u697d\u3057\u304f\u306a\u3063\u305f\u306e\u3067\u3001\u8272\u3005\u306a\u8a00\u8a9e\u3067\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u8a00\u8a9e\u306f C++, python, php, sqlite3, common lisp \u306e5\u3064\u3092\u9078\u629e\u3002\n\u666e\u6bb5\u4f7f\u3063\u3066\u3044\u308b\u8a00\u8a9e\u306f C++ \u3067\u3001\u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u306f\u30cd\u30c3\u30c8\u306a\u3069\u3067\u8abf\u3079\u306a\u304c\u3089\u66f8\u3044\u305f\u3002\n\n\u4eca\u56de\u306f 0001 [List of Top 3 Hills](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0001&lang=jp) \u3068\u3044\u3046\u554f\u984c\u3002\n\n## \u554f\u984c\n\n### List of Top 3 Hills\n\n\u5c71\u306e\u9ad8\u3055\u3092\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u306e\u6574\u6570\u3067\u8868\u3057\u305f 10 \u500b\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e 10 \u500b\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u305d\u306e\u4e2d\u3067\u3001\u9ad8\u3044\u9806\u304b\u3089\uff13\u3064\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u4e0b\u3055\u3044\u3002 \n\n### Input\n\n> \u5c71\u306e\u9ad8\u3055\uff11\uff08\u6574\u6570\uff09\u3000\n> \u5c71\u306e\u9ad8\u3055\uff12\uff08\u6574\u6570\uff09\u3000\n>     .\n>     .\n> \u5c71\u306e\u9ad8\u3055\uff11\uff10\uff08\u6574\u6570\uff09\u3000\n\n### Constraints\n\n> 0 \u2264 \u5c71\u306e\u9ad8\u3055 \u2264 10000 \n\n### Output\n\n> \u6700\u3082\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n> \uff12\u756a\u76ee\u306b\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n> \uff13\u756a\u76ee\u306b\u9ad8\u3044\u5c71\u306e\u9ad8\u3055\n\n### Sample Input\n\n> 1819\n> 2003\n> 876\n> 2840\n> 1723\n> 1673\n> 3776\n> 2848\n> 1592\n> 922\n\n### Output for the Sample Input\n\n> 3776\n> 2848\n> 2840\n\n\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u5165\u529b\u306b\u5bfe\u3057\u3066\u6b63\u3057\u3044\u7b54\u3048\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u304f\u3002\n\u3069\u306e\u8a00\u8a9e\u3067\u3082\u30bd\u30fc\u30c8\u306f\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u81ea\u5206\u3067\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u66f8\u304f\u5fc5\u8981\u306f\u7121\u304b\u3063\u305f\u3002\n\n## \u56de\u7b54\n\n### C++\n\n```cpp\n\n#include <iostream>\n#include <set>\nusing namespace std;\n \nint main() {\n \n  typedef std::multiset<int> MySet;\n  MySet heightSet;\n \n  for(int i = 0; i < 10; ++i)\n  {\n    int val;\n    cin >> val;\n    // set \u306b\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u3068\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30c8\u3055\u308c\u308b\n    heightSet.insert(val);\n  }\n \n  // \u5927\u304d\u3044\u9806\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b reverse_iterator \u3092\u4f7f\u3046\n  MySet::reverse_iterator rit = heightSet.rbegin();\n  for(int i = 0; i < 3; ++i)\n  {\n    cout << *rit << endl;\n    ++rit;\n  }\n  return 0;\n}\n\n```\n\nSTL \u306e multiset \u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3046\u3068\u8981\u7d20\u633f\u5165\u306e\u969b\u306b\u81ea\u52d5\u30bd\u30fc\u30c8\u3055\u308c\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u30b5\u30dc\u308c\u308b\u3002\n\n### python\n\n```py\n\n# \u914d\u5217\u3092\u4f5c\u6210\nn = list()\n\nfor var in range(0, 10):\n  # \u6a19\u6e96\u5165\u529b\u304b\u3089\u4e00\u884c\u8aad\u307f\u8fbc\u307f\n  # int \u306b\u30ad\u30e3\u30b9\u30c8\n  n.append( int(raw_input()) )\n  \n# \u914d\u5217\u3092\u964d\u9806\u30bd\u30fc\u30c8\nn.sort(reverse = True)\n  \nfor var in range(0, 3):\n  print n[var]\n\n```\n\npython \u3060\u3068\u77ed\u304f\u66f8\u3051\u308b\u306a\u3068\u611f\u52d5\u3002\n\n\n### PHP\n\n```php\n\n<?php\n$hi = fopen('php://stdin', \"r\");\n$ho = fopen('php://stdout', \"w\");\n\n# \u7a7a\u306e\u914d\u5217\u3092\u4f5c\u6210\n$arr = array();\n\n# \u6a19\u6e96\u5165\u529b\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\nfor($i = 0; $i < 10; $i++)\n{\n\tfscanf($hi, \"%d\", $arr[]);\n}\n\n# \u964d\u9806\u30bd\u30fc\u30c8\nrsort($arr);\n\n# \u51fa\u529b\nfor($i = 0; $i < 3; $i++)\n{\n\tfwrite($ho, sprintf(\"%d\\n\", $arr[$i]));\n}\n\nfclose($ho);\nfclose($hi);\n\n```\n\n\u5909\u6570\u306b $ \u3092\u3064\u3051\u308b\u3068\u3053\u308d\u3092\u9664\u3051\u3070 c \u8a00\u8a9e\u306b\u8fd1\u3044\u611f\u899a\u3002\n\n### sqlite3\n\n```sqlite3\n\n-- \u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\ncreate table tbl(height integer);\n\n-- \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n.import data.txt tbl\n\n-- 'tbl' \u304b\u3089 'height' \u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u964d\u9806\u30bd\u30fc\u30c8\u3057\u3066 3 \u884c\u8aad\u307f\u8fbc\u3080\nselect * from tbl order by height desc limit 3;\n\n```\n\nsqlite3 \u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u306b\u60c5\u5831\u3092\u5165\u308c\u308b\u65b9\u6cd5\u304c\u5224\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u3093\u3067\u307e\u3059\u3002\n\n### Common Lisp\n\n```cl\n\n;; \u6a19\u6e96\u5165\u529b\u304b\u3089 n \u56de\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n(defun input (lst n)\n\t(cond\n\t\t((eq (length lst) n)\n\t\t\tlst\n\t\t)\n\t\t(t\n\t\t\t(input (append lst (list (read)) ) n )\n\t\t)\n\t)\n)\n\n;; \u30ea\u30b9\u30c8\u306e\u5148\u982d n \u8981\u7d20\u306e\u90e8\u5206\u914d\u5217\u3092\u4f5c\u6210\n(defun gettop (lst n)\n\t(if (or (= n 0) (null lst))\n\t\tnil\n\t\t(cons (car lst)\n\t\t\t(gettop (cdr lst) (- n 1))\n\t\t)\n\t)\n)\n\n(mapcar #'(lambda (x) (format t \"~A~%\" x))\t; \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u6539\u884c\u533a\u5207\u308a\u3067\u51fa\u529b\u3059\u308b\n\t(gettop\n\t\t(sort (input () 10) #'>)\t; \u6a19\u6e96\u5165\u529b\u304b\u3089\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u964d\u9806\u30bd\u30fc\u30c8\u3059\u308b\n\t\t3\t\t\t\t\t\t\t; \u5148\u982d3\u3064\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\t)\n)\n\n```\n\nCommonLisp \u306f\u624b\u7d9a\u304d\u578b\u306b\u6163\u308c\u305f\u8eab\u304b\u3089\u3059\u308b\u3068\u7570\u8cea\u904e\u304e\u3066\u51c4\u3044\u624b\u9593\u53d6\u3063\u305f\u3002", "tags": ["C++", "SQLite3", "Python", "CommonLisp", "PHP"]}