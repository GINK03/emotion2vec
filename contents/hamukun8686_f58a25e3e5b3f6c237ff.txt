{"context": " More than 1 year has passed since last update.\n\nMain.cpp\n\n//\u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n    Graphics::SetBackground(Palette::White);\n\n    const Sound sound = Dialog::OpenSound();\n\n    sound.play();\n\n    Circle playButton(Window::Center(), 30);\n\n    Circle sliderToggle(20);\n\n    const Point sliderStartPos{ 100, 100 };\n\n    const Point sliderEndPos{ 540, 100 };\n\n    const Vec2 sliderDelta = sliderEndPos - sliderStartPos;\n\n    bool isDraggingSlider = false;\n\n    while (System::Update())\n    {\n        if (playButton.leftClicked)\n        {\n            if (sound.isPlaying)\n            {\n                sound.pause();\n            }\n            else\n            {\n                sound.play();\n            }\n        }\n\n        if (sliderToggle.leftClicked)\n        {\n            isDraggingSlider = true;\n\n            sound.pause();\n        }\n\n        if (isDraggingSlider)\n        {\n            const double length = sliderEndPos.x - sliderStartPos.x;\n\n            const double offset = Clamp(static_cast<double>(Mouse::Pos().x - sliderStartPos.x),0.0, length);\n\n            const double value = offset / length;\n\n            sound.setPosSec(value * sound.lengthSec);\n        }\n\n        if (Input::MouseL.released)\n        {\n            isDraggingSlider = false;\n\n            sound.play();\n        }\n\n        sliderToggle.setPos((sound.posSec / sound.lengthSec) * sliderDelta + sliderStartPos);\n\n        if (sound.isPlaying)\n        {\n            Waving::FFT(sound);\n        }\n\n\n        const float* p = Waving::FFTBuffer();\n\n        for (int i = 0; i < 320; ++i)\n        {\n            RectF(i * 2, Window::Height(), 2, -Pow(p[i], 0.6f) * 1000).draw(HSV(240 - i));\n        }\n\n\n        playButton.draw(playButton.mouseOver ? Palette::Lightcoral : Palette::Gray);\n\n        Line(sliderStartPos, sliderEndPos).draw(10, Palette::Gray);\n\n        sliderToggle.draw(sliderToggle.mouseOver ? Palette::Lightcoral : Palette::Gray);\n    }\n}\n\n\n\n![20140607-204055-179.png](https://qiita-image-store.s3.amazonaws.com/0/34295/dae4ef77-2597-5791-cb2d-9fe49bfc582c.png)\n\n```Siv3D:Main.cpp\n\n//\u97f3\u697d\u30d7\u30ec\u30a4\u30e4\u30fc\n# include <Siv3D.hpp>\n\nvoid Main()\n{\n\tGraphics::SetBackground(Palette::White);\n\n\tconst Sound sound = Dialog::OpenSound();\n\n\tsound.play();\n\n\tCircle playButton(Window::Center(), 30);\n\n\tCircle sliderToggle(20);\n\n\tconst Point sliderStartPos{ 100, 100 };\n\n\tconst Point sliderEndPos{ 540, 100 };\n\n\tconst Vec2 sliderDelta = sliderEndPos - sliderStartPos;\n\n\tbool isDraggingSlider = false;\n\n\twhile (System::Update())\n\t{\n\t\tif (playButton.leftClicked)\n\t\t{\n\t\t\tif (sound.isPlaying)\n\t\t\t{\n\t\t\t\tsound.pause();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsound.play();\n\t\t\t}\n\t\t}\n\n\t\tif (sliderToggle.leftClicked)\n\t\t{\n\t\t\tisDraggingSlider = true;\n\n\t\t\tsound.pause();\n\t\t}\n\n\t\tif (isDraggingSlider)\n\t\t{\n\t\t\tconst double length = sliderEndPos.x - sliderStartPos.x;\n\n\t\t\tconst double offset = Clamp(static_cast<double>(Mouse::Pos().x - sliderStartPos.x),0.0, length);\n\n\t\t\tconst double value = offset / length;\n\n\t\t\tsound.setPosSec(value * sound.lengthSec);\n\t\t}\n\n\t\tif (Input::MouseL.released)\n\t\t{\n\t\t\tisDraggingSlider = false;\n\n\t\t\tsound.play();\n\t\t}\n\n\t\tsliderToggle.setPos((sound.posSec / sound.lengthSec) * sliderDelta + sliderStartPos);\n\n\t\tif (sound.isPlaying)\n\t\t{\n\t\t\tWaving::FFT(sound);\n\t\t}\n\t\t\n\n\t\tconst float* p = Waving::FFTBuffer();\n\n\t\tfor (int i = 0; i < 320; ++i)\n\t\t{\n\t\t\tRectF(i * 2, Window::Height(), 2, -Pow(p[i], 0.6f) * 1000).draw(HSV(240 - i));\n\t\t}\n\n\t\t\n\t\tplayButton.draw(playButton.mouseOver ? Palette::Lightcoral : Palette::Gray);\n\n\t\tLine(sliderStartPos, sliderEndPos).draw(10, Palette::Gray);\n\n\t\tsliderToggle.draw(sliderToggle.mouseOver ? Palette::Lightcoral : Palette::Gray);\n\t}\n}\n\n```\n", "tags": ["Siv3D"]}