{"context": " More than 1 year has passed since last update.cocos2d-x\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304d\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u3068\u304d\u306f\u3001iOS/Android\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001NativeBridge\u3092\u4f7f\u3063\u3066\n\u4e0b\u8a18\u306e\u69d8\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001NativeBridge\u3068\u3044\u3046\u30af\u30e9\u30b9\uff08\u6a5f\u80fd\u6bce\u306b\u30af\u30e9\u30b9\u5206\u3051\u3057\u3066\u304a\u304f\u3068\u5f8c\u3067\n\u5fc5\u8981\u306a\u6a5f\u80fd\u306e\u307f\u3092\u5225\u30a2\u30d7\u30ea\u306b\u7d44\u307f\u8fbc\u3080\u4e8b\u3082\u53ef\u80fd\u3067\u3059\u306d\uff09\u3092\u4f5c\u6210\u3057\u3066iOS/Android\u306e\n\u30cd\u30a4\u30c6\u30a3\u30d6\u5b9f\u88c5\u3092\u96a0\u853d\u3057\u3001cocos2d-x\u5074\u3067\u306f\u3069\u3061\u3089\u3092\u547c\u3073\u51fa\u3059\u306e\u304b\u610f\u8b58\u3055\u305b\u306a\u3044\u4e8b\u3067\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001BrowserNativeBridge.cpp\u306fXcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u542b\u3081\u306a\u3044\u3067\u4e0b\u3055\u3044\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u30fc\u6a5f\u80fd\u306e\u5b9f\u88c5\u306e\u305f\u3081\u300cBrowserNativeBridge\u300d\u30af\u30e9\u30b9\u3092\n\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\nBrowserNativeBridge\n\nBrowserNativeBridge.h\u3092\u7528\u610f\u3059\u308b\n//  BrowserNativeBridge.h\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#ifndef __testApp__BrowserNativeBridge__\n#define __testApp__BrowserNativeBridge__\n\nclass BrowserNativeBridge {\n\npublic :\n\n    static bool openURL(const char *url);\n\n};\n\n#endif /* defined(__testApp__BrowserNativeBridge__) */\n\n\niOS\u7528\u306bBrowserNativeBridge.mm\u3092\u7528\u610f\u3059\u308b\n//  BrowserNativeBridge.mm\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#import \"BrowserNativeBridge.h\"\n\n// NativeBridge\u3092\u4f7f\u3046\u5834\u5408\u306f\u4e0b\u8a18\u306e\uff11\u884c\u306f\u5fc5\u9808\n#include \"cocoa/CCString.h\"\n\nusing namespace cocos2d;\n\nbool BrowserNativeBridge::openURL(const char *pURL) {\n\n    NSString *urlText = [NSString stringWithCString:pURL\n                                          encoding:NSUTF8StringEncoding];\n\n    NSLog(@\"input URL[%@]\", urlText);\n\n    BOOL result = YES;\n\n    NSURL *url = [NSURL URLWithString:urlText];\n\n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3048\u308b\u69d8\u306b\u300c__block\u4fee\u98fe\u5b50\u300d\u3092\u4ed8\u3051\u3066\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\n    __block BOOL isOpneApp = false;\n\n    // GCD\u3067\u5b9f\u884c\u3059\u308b\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0),^{\n\n        // \u4ee5\u4e0b\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b //////////////////////////////////////////\n        NSLog(@\"Start canOpenURL\");\n        // \u305d\u306eURL\u304c\u4f7f\u3048\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        if ([[UIApplication sharedApplication] canOpenURL:url]) {\n\n            NSLog(@\"End canOpenURL is Done\");\n            NSLog(@\"Start openURL\");\n\n            // \u5b9f\u969b\u306b\u305d\u306eURL\u3092\u4f7f\u3046\n            BOOL ret = [[UIApplication sharedApplication] openURL:url];\n\n            // URL\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n            if (ret == NO) {\n                NSLog(@\"End openURL is Error\");\n                NSLog(@\"URL Opne Error!! [%@]\", url);\n            }\n            // URL\u304c\u4f7f\u3048\u305f\n            else {\n                NSLog(@\"End openURL is Done\");\n                isOpneApp = true;\n            }\n        }\n        // \u4f7f\u3048\u306a\u304b\u3063\u305f\u5834\u5408\n        else {\n            NSLog(@\"End canOpenURL is Error\");\n            NSLog(@\"Can not open the URL using the safari.app... URL[%@]\", url);\n        }\n        /////////////////////////////////////////////////////////////////////\n\n        // \u4ee5\u4e0b\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b ///////////////////////////////////////\n        dispatch_sync(dispatch_get_main_queue(), ^{\n\n            //\n            if (isOpneApp == false) {\n                UIAlertView *alert = [[[UIAlertView alloc]initWithTitle:@\"Error\"\n                                                                message:@\"\u300cMobile Safari\u300d\u30a2\u30d7\u30ea\u304c\\n\u8d77\u52d5\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"\n                                                               delegate:nil\n                                                      cancelButtonTitle:nil\n                                                      otherButtonTitles:@\"OK\", nil]autorelease];\n                [alert show];\n            }\n\n        });\n        /////////////////////////////////////////////////////////////////////\n\n    });\n\n    // C++\u306ebool\u578b\u3068Objective-C\u306eBOOL\u578b\u306f\u5909\u63db\u304c\u5fc5\u8981\u3060\u3088!!\n    if (result == YES) {\n        return true;\n    }\n    return false;\n}\n\n\nAndroid\u7528\u306bBrowserNativeBridge.cpp\u3092\u7528\u610f\u3059\u308b\n//  BrowserNativeBridge.cpp\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#include \"BrowserNativeBridge.h\"\n#include <android/log.h>\n#include <jni.h>\n#include \"cocoa/CCString.h\"\n#include \"platform/android/jni/JniHelper.h\"\n#include \"cocos2d.h\"\n\n// Eclipse\u5074\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3068java\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\n#define kCLASS_NAME \"jp/mycompany/test/testApp\"\n\n// \u547c\u3073\u51fa\u3059Java\u30e1\u30bd\u30c3\u30c9\u540d\nstatic const char* const kMETHOD_NAME01 = \"onOpenURL\";\n\nusing namespace std;\nusing namespace cocos2d;\n\n// \u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\nbool BrowserNativeBridge::openURL(const char *url)\n{\n    JavaVM* jvm = JniHelper::getJavaVM();\n    int status;\n    JNIEnv *env;\n    jmethodID mid;\n\n    bool isAttached = false;\n\n    CCLOG(\"start Static InterfaceJNI::openURL():[%s]\", url);\n\n    // Get Status\uff08JNI\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30c1\u30a7\u30c3\u30af\uff09\n    status = jvm->GetEnv((void **) &env, JNI_VERSION_1_6);\n    if(status < 0)\n    {\n        // JNI \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u30dd\u30a4\u30f3\u30bf (JNIEnv) \u306f\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u306e\u307f\u6709\u52b9\u3067\u3059\n        // \u5225\u306e\u30b9\u30ec\u30c3\u30c9\u304c Java VM \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u308c\u306f\u6700\u521d\u306b AttachCurrentThread() \u3092\u547c\u3073\u51fa\u3057\u3001\n        // \u305d\u308c\u81ea\u4f53\u3092 VM \u306b\u63a5\u7d9a\u3057 JNI \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n        CCLOG(\"callback_handler: failed to get JNI environment, assuming native thread...\");\n        status = jvm->AttachCurrentThread(&env, NULL);\n        CCLOG(\"Status 2: %d\", status);\n        if(status < 0)\n        {\n            CCLOG(\"callback_handler: failed to attach current thread\");\n            return false;\n        }\n        isAttached = true;\n        CCLOG(\"Status isAttached: %d\", isAttached);\n    }\n    //-----------------------------------------------------------\n\n    CCLOG(\"Status: %d\", status);\n\n    // Java\u30af\u30e9\u30b9\u3092\u63a2\u3059\n    jclass mClass = env->FindClass(kCLASS_NAME);\n\n    CCLOG(\"jClass \");\n\n    // \u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u3059\n    mid = env->GetStaticMethodID(mClass, kMETHOD_NAME01, \"(Ljava/lang/String;)V\");\n\n    // \u5f15\u6570\u3092Java\u306eString\u578b\u306b\u5909\u63db\u3059\u308b\n    jstring stringArg = env->NewStringUTF(url);\n\n    CCLOG(\"mID: %d\", mid);\n\n    // \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n    if (mid!=0) {\n        env->CallStaticVoidMethod(mClass, mid, stringArg);\n        CCLOG(\"Call Method Finish\");\n    }\n    else {\n        CCLOG(\"failed:Method could not be found... ClassName[%s] Method[%s]\", kCLASS_NAME, kMETHOD_NAME01);\n    }\n\n    if(isAttached) {\n        // \u30c7\u30bf\u30c3\u30c1\u3059\u308b\uff08\u5f8c\u51e6\u7406\uff09\n        jvm->DetachCurrentThread();\n    }\n\n    return true;\n}\n\n\nCocos2dxActivity\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\uff08Java\uff09\nimport android.net.Uri;\nimport android.util.Log;\n\npublic class testApp extends Cocos2dxActivity{\n\n    private static Cocos2dxActivity myActivity;\n\n    protected void onCreate(Bundle savedInstanceState){\n        super.onCreate(savedInstanceState);\n        // Activity\u3092\u4fdd\u6301\u3059\u308b\n        myActivity = this;\n    }\n\n    // \u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\n    public static void onOpenURL(String msg)\n    {\n        Log.i (\"INFO\", \"Start testApp:onOpenURL() URL[\" + msg + \"]\");\n        Uri uri = Uri.parse(msg);\n        Intent i = new Intent(Intent.ACTION_VIEW,uri);\n        myActivity.startActivity(i);\n    }\n}\n\n\ncocos2d-x\u5074\u306bMenu\u7b49\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b\nbool HelloWorld::init() {\n\n    if ( !CCLayer::init() )\n    {\n        return false;\n    }\n\n    CCMenuItemImage *pMenuItem = CCMenuItemImage::create(\n                                        \"Normal.png\",\n                                        \"Selected.png\",\n                                        this,\n                                        menu_selector(HelloWorld::menuCallback) );\n\n    CCSize size = CCDirector::sharedDirector()->getWinSize();\n    pMenuItem->setPosition( ccp(size.width/2, size.height/2) );\n\n    CCMenu* pMenu = CCMenu::create(pMenuItem,\n                                   NULL);\n    pMenu->setPosition( CCPointZero );\n    this->addChild(pMenu, 1);\n\n    return true;\n}\n\nvoid HelloWorld::menuCallback(CCObject* pSender)\n{\n    CCLog(\"HelloWorld::menuCloseCallback2() start!!\");\n\n    bool bResult = BrowserNativeBridge::openURL(\"http://qiita.com/takataka5845\");\n    if (bResult == false) {\n        CCLOG(\"http://qiita.com/takataka5845 is OPEN Error...\");\n    }\n    else {\n        CCLOG(\"http://qiita.com/takataka5845 is OPEN Done!!\");\n    }\n}\n\n\n\u307e\u3068\u3081\n\u4e0a\u8a18\u306e\u69d8\u306b\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u3067\u306e\u5b9f\u88c5\u3092\u96a0\u853d\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066cocos2d-x\u5074\u306e\u5b9f\u88c5\u304c\n\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u305d\u308d\u3048\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u307f\u306a\u3055\u3093\u306e\n\u8155\u306e\u307f\u305b\u3069\u3053\u308d\u3067\u3059\uff08\u7b11\ncocos2d-x\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304d\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3093\u306a\u3068\u304d\u306f\u3001iOS/Android\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u6a5f\u80fd\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001NativeBridge\u3092\u4f7f\u3063\u3066\n\u4e0b\u8a18\u306e\u69d8\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u3001NativeBridge\u3068\u3044\u3046\u30af\u30e9\u30b9\uff08\u6a5f\u80fd\u6bce\u306b\u30af\u30e9\u30b9\u5206\u3051\u3057\u3066\u304a\u304f\u3068\u5f8c\u3067\n\u5fc5\u8981\u306a\u6a5f\u80fd\u306e\u307f\u3092\u5225\u30a2\u30d7\u30ea\u306b\u7d44\u307f\u8fbc\u3080\u4e8b\u3082\u53ef\u80fd\u3067\u3059\u306d\uff09\u3092\u4f5c\u6210\u3057\u3066iOS/Android\u306e\n\u30cd\u30a4\u30c6\u30a3\u30d6\u5b9f\u88c5\u3092\u96a0\u853d\u3057\u3001cocos2d-x\u5074\u3067\u306f\u3069\u3061\u3089\u3092\u547c\u3073\u51fa\u3059\u306e\u304b\u610f\u8b58\u3055\u305b\u306a\u3044\u4e8b\u3067\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001`BrowserNativeBridge.cpp`\u306f`Xcode\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u542b\u3081\u306a\u3044`\u3067\u4e0b\u3055\u3044\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u30fc\u6a5f\u80fd\u306e\u5b9f\u88c5\u306e\u305f\u3081\u300cBrowserNativeBridge\u300d\u30af\u30e9\u30b9\u3092\n\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n#BrowserNativeBridge\n##BrowserNativeBridge.h\u3092\u7528\u610f\u3059\u308b\n```objc//\n//  BrowserNativeBridge.h\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#ifndef __testApp__BrowserNativeBridge__\n#define __testApp__BrowserNativeBridge__\n\nclass BrowserNativeBridge {\n    \npublic :\n    \n    static bool openURL(const char *url);\n    \n};\n\n#endif /* defined(__testApp__BrowserNativeBridge__) */\n```\n\n##iOS\u7528\u306bBrowserNativeBridge.mm\u3092\u7528\u610f\u3059\u308b\n```objc//\n//  BrowserNativeBridge.mm\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#import \"BrowserNativeBridge.h\"\n\n// NativeBridge\u3092\u4f7f\u3046\u5834\u5408\u306f\u4e0b\u8a18\u306e\uff11\u884c\u306f\u5fc5\u9808\n#include \"cocoa/CCString.h\"\n\nusing namespace cocos2d;\n\nbool BrowserNativeBridge::openURL(const char *pURL) {\n    \n    NSString *urlText = [NSString stringWithCString:pURL\n                                          encoding:NSUTF8StringEncoding];\n    \n    NSLog(@\"input URL[%@]\", urlText);\n    \n    BOOL result = YES;\n    \n    NSURL *url = [NSURL URLWithString:urlText];\n    \n    // \u5225\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3048\u308b\u69d8\u306b\u300c__block\u4fee\u98fe\u5b50\u300d\u3092\u4ed8\u3051\u3066\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\n    __block BOOL isOpneApp = false;\n    \n    // GCD\u3067\u5b9f\u884c\u3059\u308b\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0),^{\n        \n        // \u4ee5\u4e0b\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b //////////////////////////////////////////\n        NSLog(@\"Start canOpenURL\");\n        // \u305d\u306eURL\u304c\u4f7f\u3048\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        if ([[UIApplication sharedApplication] canOpenURL:url]) {\n            \n            NSLog(@\"End canOpenURL is Done\");\n            NSLog(@\"Start openURL\");\n            \n            // \u5b9f\u969b\u306b\u305d\u306eURL\u3092\u4f7f\u3046\n            BOOL ret = [[UIApplication sharedApplication] openURL:url];\n            \n            // URL\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\n            if (ret == NO) {\n                NSLog(@\"End openURL is Error\");\n                NSLog(@\"URL Opne Error!! [%@]\", url);\n            }\n            // URL\u304c\u4f7f\u3048\u305f\n            else {\n                NSLog(@\"End openURL is Done\");\n                isOpneApp = true;\n            }\n        }\n        // \u4f7f\u3048\u306a\u304b\u3063\u305f\u5834\u5408\n        else {\n            NSLog(@\"End canOpenURL is Error\");\n            NSLog(@\"Can not open the URL using the safari.app... URL[%@]\", url);\n        }\n        /////////////////////////////////////////////////////////////////////\n        \n        // \u4ee5\u4e0b\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3055\u308c\u308b ///////////////////////////////////////\n        dispatch_sync(dispatch_get_main_queue(), ^{\n            \n            //\n            if (isOpneApp == false) {\n                UIAlertView *alert = [[[UIAlertView alloc]initWithTitle:@\"Error\"\n                                                                message:@\"\u300cMobile Safari\u300d\u30a2\u30d7\u30ea\u304c\\n\u8d77\u52d5\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"\n                                                               delegate:nil\n                                                      cancelButtonTitle:nil\n                                                      otherButtonTitles:@\"OK\", nil]autorelease];\n                [alert show];\n            }\n            \n        });\n        /////////////////////////////////////////////////////////////////////\n        \n    });\n    \n    // C++\u306ebool\u578b\u3068Objective-C\u306eBOOL\u578b\u306f\u5909\u63db\u304c\u5fc5\u8981\u3060\u3088!!\n    if (result == YES) {\n        return true;\n    }\n    return false;\n}\n```\n\n##Android\u7528\u306bBrowserNativeBridge.cpp\u3092\u7528\u610f\u3059\u308b\n```objc//\n//  BrowserNativeBridge.cpp\n//  testApp\n//\n//  Created by takataka5845 on 2014/02/24.\n//\n//\n\n#include \"BrowserNativeBridge.h\"\n#include <android/log.h>\n#include <jni.h>\n#include \"cocoa/CCString.h\"\n#include \"platform/android/jni/JniHelper.h\"\n#include \"cocos2d.h\"\n\n// Eclipse\u5074\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3068java\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\n#define kCLASS_NAME \"jp/mycompany/test/testApp\"\n\n// \u547c\u3073\u51fa\u3059Java\u30e1\u30bd\u30c3\u30c9\u540d\nstatic const char* const kMETHOD_NAME01 = \"onOpenURL\";\n\nusing namespace std;\nusing namespace cocos2d;\n\n// \u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\nbool BrowserNativeBridge::openURL(const char *url)\n{\n    JavaVM* jvm = JniHelper::getJavaVM();\n    int status;\n    JNIEnv *env;\n    jmethodID mid;\n\n    bool isAttached = false;\n\n\tCCLOG(\"start Static InterfaceJNI::openURL():[%s]\", url);\n\n    // Get Status\uff08JNI\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30c1\u30a7\u30c3\u30af\uff09\n    status = jvm->GetEnv((void **) &env, JNI_VERSION_1_6);\n    if(status < 0)\n\t{\n\t\t// JNI \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u30dd\u30a4\u30f3\u30bf (JNIEnv) \u306f\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u306e\u307f\u6709\u52b9\u3067\u3059\n\t\t// \u5225\u306e\u30b9\u30ec\u30c3\u30c9\u304c Java VM \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u308c\u306f\u6700\u521d\u306b AttachCurrentThread() \u3092\u547c\u3073\u51fa\u3057\u3001\n\t\t// \u305d\u308c\u81ea\u4f53\u3092 VM \u306b\u63a5\u7d9a\u3057 JNI \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n        CCLOG(\"callback_handler: failed to get JNI environment, assuming native thread...\");\n        status = jvm->AttachCurrentThread(&env, NULL);\n        CCLOG(\"Status 2: %d\", status);\n        if(status < 0)\n        {\n            CCLOG(\"callback_handler: failed to attach current thread\");\n            return false;\n        }\n        isAttached = true;\n        CCLOG(\"Status isAttached: %d\", isAttached);\n    }\n    //-----------------------------------------------------------\n\n    CCLOG(\"Status: %d\", status);\n\n    // Java\u30af\u30e9\u30b9\u3092\u63a2\u3059\n    jclass mClass = env->FindClass(kCLASS_NAME);\n\n    CCLOG(\"jClass \");\n\n    // \u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u3059\n\tmid = env->GetStaticMethodID(mClass, kMETHOD_NAME01, \"(Ljava/lang/String;)V\");\n\n\t// \u5f15\u6570\u3092Java\u306eString\u578b\u306b\u5909\u63db\u3059\u308b\n\tjstring stringArg = env->NewStringUTF(url);\n\n    CCLOG(\"mID: %d\", mid);\n\n    // \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n    if (mid!=0) {\n\t\tenv->CallStaticVoidMethod(mClass, mid, stringArg);\n\t\tCCLOG(\"Call Method Finish\");\n\t}\n\telse {\n\t\tCCLOG(\"failed:Method could not be found... ClassName[%s] Method[%s]\", kCLASS_NAME, kMETHOD_NAME01);\n\t}\n\n\tif(isAttached) {\n\t\t// \u30c7\u30bf\u30c3\u30c1\u3059\u308b\uff08\u5f8c\u51e6\u7406\uff09\n        jvm->DetachCurrentThread();\n    }\n\n    return true;\n}\n```\n\n##Cocos2dxActivity\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\uff08Java\uff09\n```java\nimport android.net.Uri;\nimport android.util.Log;\n\npublic class testApp extends Cocos2dxActivity{\n\t\n    private static Cocos2dxActivity myActivity;\n\n    protected void onCreate(Bundle savedInstanceState){\n        super.onCreate(savedInstanceState);\n        // Activity\u3092\u4fdd\u6301\u3059\u308b\n        myActivity = this;\n    }\n\t\n    // \u6307\u5b9aURL\u3092Web\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\n    public static void onOpenURL(String msg)\n    {\n        Log.i (\"INFO\", \"Start testApp:onOpenURL() URL[\" + msg + \"]\");\n        Uri uri = Uri.parse(msg);\n        Intent i = new Intent(Intent.ACTION_VIEW,uri);\n        myActivity.startActivity(i);\n    }\n}\n```\n##cocos2d-x\u5074\u306bMenu\u7b49\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b\n```objc\nbool HelloWorld::init() {\n\n    if ( !CCLayer::init() )\n    {\n        return false;\n    }\n\n    CCMenuItemImage *pMenuItem = CCMenuItemImage::create(\n                                        \"Normal.png\",\n                                        \"Selected.png\",\n                                        this,\n                                        menu_selector(HelloWorld::menuCallback) );\n\n    CCSize size = CCDirector::sharedDirector()->getWinSize();\n    pMenuItem->setPosition( ccp(size.width/2, size.height/2) );\n\n    CCMenu* pMenu = CCMenu::create(pMenuItem,\n                                   NULL);\n    pMenu->setPosition( CCPointZero );\n    this->addChild(pMenu, 1);\n\n    return true;\n}\n\nvoid HelloWorld::menuCallback(CCObject* pSender)\n{\n    CCLog(\"HelloWorld::menuCloseCallback2() start!!\");\n\n    bool bResult = BrowserNativeBridge::openURL(\"http://qiita.com/takataka5845\");\n    if (bResult == false) {\n    \tCCLOG(\"http://qiita.com/takataka5845 is OPEN Error...\");\n    }\n    else {\n    \tCCLOG(\"http://qiita.com/takataka5845 is OPEN Done!!\");\n    }\n}\n```\n#\u307e\u3068\u3081\n\u4e0a\u8a18\u306e\u69d8\u306b\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u3067\u306e\u5b9f\u88c5\u3092\u96a0\u853d\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066cocos2d-x\u5074\u306e\u5b9f\u88c5\u304c\n\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u305d\u308d\u3048\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u307f\u306a\u3055\u3093\u306e\n\u8155\u306e\u307f\u305b\u3069\u3053\u308d\u3067\u3059\uff08\u7b11\n", "tags": ["iOS", "Android", "cocos2d-x2.x", "C++"]}