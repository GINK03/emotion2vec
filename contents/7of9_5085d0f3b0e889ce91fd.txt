{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n\n\n\u95a2\u9023 http://qiita.com/7of9/items/872d80d2a1cc36b5a053\n@shiracamus \u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u3066\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305fautopep8\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$sudo apt-get install python-autopep8\n\n\n\u51e6\u7406\u524d\u30b3\u30fc\u30c9\n\u5b9f\u88c5\u9014\u4e2d\u306eTensorFlow\u306e\u30b3\u30fc\u30c9\n\nlearn_in100out100.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\n'''\nv0.1 Feb. 06, 2017\n    - read [test_in.csv],[test_out.csv]\n'''\n\n'''\ncodingrule:PEP8\n'''\n\nfilename_inp = tf.train.string_input_producer([\"test_in.csv\"])\nfilename_out = tf.train.string_input_producer([\"test_out.csv\"])\nNUM_INP_NODE = 100\nNUM_OUT_NODE = 100\n\n# parse csv\n# a. input node\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_inp)\ndeflist = [[0.] for idx in range(NUM_INP_NODE)]\ninput1 = tf.decode_csv(value, record_defaults=deflist)\n# b. output node\nkey, value = reader.read(filename_out)\ndeflist = [[0.] for idx in range(NUM_OUT_NODE)]\noutput1 = tf.decode_csv(value, record_defaults=deflist)\n# c. pack\ninputs = tf.pack([input1])\noutputs = tf.pack([output1])\n\nbatch_size = 1\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None, 1])\noutput_ph = tf.placeholder(\"float\", [None, 1])\n\n# network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7],\n    activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n    try:\n        sess.run(init_op)\n        for idx in range(10):\n            inpbt, outbt = sess.run([inputs_batch, output_batch])\n            _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph:outbt})\n\n            if (idx+1) % 100 == 0:\n                print(\"%d,%f\" % (idx+1, t_loss))\n    finally:\n        coord.request_stop()\n\n\n\n\u51e6\u7406\n\u51e6\u7406\u7d50\u679c\u306f\u6a19\u6e96\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001\u9069\u5f53\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3057\u305f\u3002\n$autopep8 learn_in100out100.py > res.py\n\n\n\u6bd4\u8f03\n$ diff learn_in100out100.py res.py \n38c38,39\n< inputs_batch, output_batch = tf.train.shuffle_batch([inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n---\n> inputs_batch, output_batch = tf.train.shuffle_batch(\n>     [inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n44,46c45,48\n< hiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7],\n<     activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n< prediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\n---\n> hiddens = slim.stack(input_ph, slim.fully_connected, [7, 7, 7],\n>                      activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n> prediction = slim.fully_connected(\n>     hiddens, 1, activation_fn=None, scope=\"output\")\n61c63,64\n<             _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph:outbt})\n---\n>             _, t_loss = sess.run(\n>                 [train_op, loss], feed_dict={input_ph: inpbt, output_ph: outbt})\n63,64c66,67\n<             if (idx+1) % 100 == 0:\n<               print(\"%d,%f\" % (idx+1, t_loss))\n---\n>             if (idx + 1) % 100 == 0:\n>                 print(\"%d,%f\" % (idx + 1, t_loss))\n67d69\n< \n\n\u5f15\u6570\u304c\u30ea\u30b9\u30c8\u306e\u5834\u5408\u306f(\u306e\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u308b\u3068\u3044\u3046\u30eb\u30fc\u30eb\u306f\u9664\u5916\u3055\u308c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n( tf.train.shuffle_batch()\u3068_, t_loss = sess.run()\u306e\u90e8\u5206 )\n\n\u51e6\u7406\u524d\u30fb\u5f8c\u306epep8\n$ pep8 learn_in100out100.py \nlearn_in100out100.py:38:80: E501 line too long (124 > 79 characters)\nlearn_in100out100.py:44:56: E231 missing whitespace after ','\nlearn_in100out100.py:44:58: E231 missing whitespace after ','\nlearn_in100out100.py:45:5: E128 continuation line under-indented for visual indent\nlearn_in100out100.py:46:80: E501 line too long (81 > 79 characters)\nlearn_in100out100.py:61:71: E231 missing whitespace after ':'\nlearn_in100out100.py:61:80: E501 line too long (95 > 79 characters)\nlearn_in100out100.py:61:88: E231 missing whitespace after ':'\nlearn_in100out100.py:64:13: E101 indentation contains mixed spaces and tabs\nlearn_in100out100.py:64:13: W191 indentation contains tabs\nlearn_in100out100.py:67:1: W391 blank line at end of file\n\n$ pep8 res.py \nres.py:64:80: E501 line too long (80 > 79 characters)\n\n\uff11\u3064\u3060\u3051\u6b8b\u3063\u305f\u306e\u306f\u4ee5\u4e0b\u3002\n            _, t_loss = sess.run(\n                [train_op, loss], feed_dict={input_ph: inpbt, output_ph: outbt})\n\nautopep8\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u81ea\u5206\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5411\u4e0a\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u3002\nautopep8\u3092\u901a\u305b\u3070\u3068\u308a\u3042\u3048\u305aOK\u3068\u3044\u3046\u4f7f\u3044\u65b9\u306f\u826f\u304f\u306a\u3044\u3060\u308d\u3046\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n```\n\n\u95a2\u9023 http://qiita.com/7of9/items/872d80d2a1cc36b5a053\n\n@shiracamus \u3055\u3093\u306e[\u30b3\u30e1\u30f3\u30c8](http://qiita.com/7of9/items/872d80d2a1cc36b5a053/#comment-f30eaf90a9471da4455f)\u306b\u3066\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305fautopep8\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$sudo apt-get install python-autopep8\n```\n\n### \u51e6\u7406\u524d\u30b3\u30fc\u30c9\n\n\u5b9f\u88c5\u9014\u4e2d\u306eTensorFlow\u306e\u30b3\u30fc\u30c9\n\n```learn_in100out100.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\n'''\nv0.1 Feb. 06, 2017\n    - read [test_in.csv],[test_out.csv]\n'''\n\n'''\ncodingrule:PEP8\n'''\n\nfilename_inp = tf.train.string_input_producer([\"test_in.csv\"])\nfilename_out = tf.train.string_input_producer([\"test_out.csv\"])\nNUM_INP_NODE = 100\nNUM_OUT_NODE = 100\n\n# parse csv\n# a. input node\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_inp)\ndeflist = [[0.] for idx in range(NUM_INP_NODE)]\ninput1 = tf.decode_csv(value, record_defaults=deflist)\n# b. output node\nkey, value = reader.read(filename_out)\ndeflist = [[0.] for idx in range(NUM_OUT_NODE)]\noutput1 = tf.decode_csv(value, record_defaults=deflist)\n# c. pack\ninputs = tf.pack([input1])\noutputs = tf.pack([output1])\n\nbatch_size = 1\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None, 1])\noutput_ph = tf.placeholder(\"float\", [None, 1])\n\n# network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7],\n    activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n    try:\n        sess.run(init_op)\n        for idx in range(10):\n            inpbt, outbt = sess.run([inputs_batch, output_batch])\n            _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph:outbt})\n\n            if (idx+1) % 100 == 0:\n            \tprint(\"%d,%f\" % (idx+1, t_loss))\n    finally:\n        coord.request_stop()\n```\n\n### \u51e6\u7406\n\n\n\u51e6\u7406\u7d50\u679c\u306f\u6a19\u6e96\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3001\u9069\u5f53\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3057\u305f\u3002\n\n```\n$autopep8 learn_in100out100.py > res.py\n```\n\n### \u6bd4\u8f03\n\n```bash\n$ diff learn_in100out100.py res.py \n38c38,39\n< inputs_batch, output_batch = tf.train.shuffle_batch([inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n---\n> inputs_batch, output_batch = tf.train.shuffle_batch(\n>     [inputs, outputs], batch_size, capacity=1, min_after_dequeue=batch_size)\n44,46c45,48\n< hiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7],\n<     activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n< prediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\n---\n> hiddens = slim.stack(input_ph, slim.fully_connected, [7, 7, 7],\n>                      activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n> prediction = slim.fully_connected(\n>     hiddens, 1, activation_fn=None, scope=\"output\")\n61c63,64\n<             _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph:outbt})\n---\n>             _, t_loss = sess.run(\n>                 [train_op, loss], feed_dict={input_ph: inpbt, output_ph: outbt})\n63,64c66,67\n<             if (idx+1) % 100 == 0:\n<             \tprint(\"%d,%f\" % (idx+1, t_loss))\n---\n>             if (idx + 1) % 100 == 0:\n>                 print(\"%d,%f\" % (idx + 1, t_loss))\n67d69\n< \n```\n\n\u5f15\u6570\u304c\u30ea\u30b9\u30c8\u306e\u5834\u5408\u306f`(`\u306e\u4f4d\u7f6e\u306b\u5408\u308f\u305b\u308b\u3068\u3044\u3046\u30eb\u30fc\u30eb\u306f\u9664\u5916\u3055\u308c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n( `tf.train.shuffle_batch()`\u3068`_, t_loss = sess.run()`\u306e\u90e8\u5206 )\n\n### \u51e6\u7406\u524d\u30fb\u5f8c\u306epep8\n\n```\n$ pep8 learn_in100out100.py \nlearn_in100out100.py:38:80: E501 line too long (124 > 79 characters)\nlearn_in100out100.py:44:56: E231 missing whitespace after ','\nlearn_in100out100.py:44:58: E231 missing whitespace after ','\nlearn_in100out100.py:45:5: E128 continuation line under-indented for visual indent\nlearn_in100out100.py:46:80: E501 line too long (81 > 79 characters)\nlearn_in100out100.py:61:71: E231 missing whitespace after ':'\nlearn_in100out100.py:61:80: E501 line too long (95 > 79 characters)\nlearn_in100out100.py:61:88: E231 missing whitespace after ':'\nlearn_in100out100.py:64:13: E101 indentation contains mixed spaces and tabs\nlearn_in100out100.py:64:13: W191 indentation contains tabs\nlearn_in100out100.py:67:1: W391 blank line at end of file\n```\n\n```\n$ pep8 res.py \nres.py:64:80: E501 line too long (80 > 79 characters)\n```\n\n\uff11\u3064\u3060\u3051\u6b8b\u3063\u305f\u306e\u306f\u4ee5\u4e0b\u3002\n\n```\n            _, t_loss = sess.run(\n                [train_op, loss], feed_dict={input_ph: inpbt, output_ph: outbt})\n```\n\nautopep8\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u81ea\u5206\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5411\u4e0a\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u3002\n\nautopep8\u3092\u901a\u305b\u3070\u3068\u308a\u3042\u3048\u305aOK\u3068\u3044\u3046\u4f7f\u3044\u65b9\u306f\u826f\u304f\u306a\u3044\u3060\u308d\u3046\u3002\n\n\n\n", "tags": ["Python", "borgWarp", "codingRule"]}