{"context": " More than 1 year has passed since last update.Elixir\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u306b\u3002\u3069\u3046\u3044\u3046\u98a8\u306bSupervisor\u3092\u8a2d\u5b9a\u3057\u305f\u3089\u3044\u3044\u304b\u306f\u306f\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u30e1\u30e2\u7a0b\u5ea6\u3067\u8a18\u9332\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3084\u308a\u305f\u3044\u306e\u306fSupervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001Stash\u304c\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001Stash\u304b\u3089Supervisor\u306e\u4e0b\u306bworker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002Worker Supervisor\u3042\u308b\u3044\u306fStash\u3092\u6bba\u3059\u3068\u3001\u4e21\u65b9\u518d\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002worker\u3092\u7121\u8996\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u69cb\u6210\u306flearnyousomeerlang(ppool\u306e\u4f8b)\u3068Elixir in Action\u4e8c\u3064\u306e\u672c\u306b\u4e21\u65b9\u3042\u308a\u307e\u3057\u305f\u3002\u5b9f\u969b\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u518d\u8d77\u52d5\u30dd\u30ea\u30b7\u30fcrestart, one_for_one, one_for_all\u306e\u90e8\u5206\u3067\u30cf\u30de\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n:observer.start\u306f\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n$ mix new supervisor --sup --module SupervisorTest\n\nsupervisortest.ex\n defmodule SupervisorTest do\n   use Application\n   require Logger\n\n   def start(_type, _args) do\n     import Supervisor.Spec, warn: false\n     # \u3053\u3053\u306f:one_for_one\u3060\u3068\uff0c\u3057\u304b\u3082Stash\u304c\u6b7b\u306c\u3068\uff0c\u30a8\u30e9\u30fc\u306b\u306a\u308b\n     opts = [strategy: :one_for_all, name: SupervisorTest.Supervisor]\n     children = [\n       # Stash\u306e\u4e2d\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3057\u305f\u3044\u306e\u3067\u3001\u3053\u3053\u306echildren\u306e\u4e2d\u306bworker supervisor\u3092\u5165\u308c\u306a\u3044\n       worker(SupervisorTest.Stash, [])\n     ]\n     {:ok, sup}=Supervisor.start_link(children, opts)\n     Logger.info \"Supervisor PID = #{inspect sup}\"\n     {:ok, sup}\n   end\n\n   def stop(_app) do\n     :ok\n   end\n end\n\nstash.ex\n defmodule SupervisorTest.Stash do\n   require Logger\n   use GenServer\n\n   def start_link() do\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok, name: __MODULE__)\n     :ok = Logger.info \"Stash PID = #{inspect pid}\"\n     {:ok, pid} # \u623b\u308a\u5024\u5fc5\u8981\n   end\n\n   def init(:ok) do\n     # Stash\u304c\u3059\u3050\u623b\u308a\u5024\u3092\u8fd4\u305b\u308b\u3088\u3046\u306b\n     # {:start_worker_sup}\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u6700\u521d\u306b\u51e6\u7406\u3055\u308c\u308b\n     # \u306a\u305c\u3053\u306e\u66f8\u304d\u65b9\u306flearnyousomeerlang\u306e18\u7ae0\u53c2\u7167\n     send self(), {:start_worker_sup}\n     {:ok, %{}}\n   end\n\n   def handle_info({:start_worker_sup}, state) do\n     import Supervisor.Spec\n     opts = [restart: :temporary]\n     {:ok, worker_sup_pid}= Supervisor.start_child(SupervisorTest.Supervisor, supervisor(SupervisorTest.WorkerSup, [], opts))\n     Process.link(worker_sup_pid)\n     {:noreply, state}\n   end\n\n   def handle_info(message, state) do\n      :ok = Logger.info\"Unknown message #{inspect message}\"\n     {:noreply, state}\n   end\n end\n\nworkersup.ex\n defmodule SupervisorTest.WorkerSup do\n   require Logger\n   use Supervisor\n\n\n   def start_link() do\n     {:ok, pid} = Supervisor.start_link(__MODULE__,  :ok, name: __MODULE__)\n     Logger.info \"Worker Supervisor PID = #{inspect pid}\"\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     import Supervisor.Spec\n     opts = [strategy: :one_for_one, restart: :temporary]\n     supervise([], opts)\n   end\n end\n\n\u3053\u3053\u306b\u4e00\u756a\u91cd\u8981\u306a\u306estash.ex\u30d5\u30a1\u30a4\u30eb\u306bStash\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u304d\u306e\u8a2d\u5b9a\nopts = [restart: :temporary]\n{:ok, worker_sup_pid}= Supervisor.start_child(SupervisorTest.Supervisor, supervisor(SupervisorTest.WorkerSup, [], opts))\nProcess.link(worker_sup_pid)\n\nStash\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u304d\u306brestart\u3092temporary\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001Process.link\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u81ea\u5206\u3068worker supervisor\u3092\u30ea\u30f3\u30af\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001worker supervisor\u304c\u6b7b\u306c\u3068Stash\u3082\u4e00\u7dd2\u306b\u6b7b\u306b\u307e\u3059\u3002worker supervisor\u306erestart\u306ftemporary\u306a\u306e\u3067\u3001Supervisor\u306fwoker supervisor\u3092\u518d\u8d77\u52d5\u3057\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001Stash\u3082worker supervisor\u3068\u4e00\u7dd2\u306b\u6b7b\u3093\u3060\u306e\u3067\u3001Supervisor\u306fStash\u3092\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u307e\u3059\u3002Stash\u304c\u518d\u8d77\u52d5\u3055\u308c\u308b\u3068\u3082\u3046\u4e00\u56dewoker supervisor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5143\u306e\u72b6\u614b\u306b\u623b\u308a\u307e\u3059\u3002\n\u3082\u3057Process.link(worker_sup_pid)\u3092\u5165\u308c\u306a\u3044\u3068\u3001shell\u306e\u4e2d\u3067\u3001worker supervisor\u3092\u6bba\u3059\u30b3\u30de\u30f3\u30c9Process.exit(worker_sup_pid, :kill)\u5b9f\u884c\u3059\u308b\u3068\u3001worker supervisor\u304c\u6b7b\u306c\u3060\u3051\u3067\u3059\u3002\n\n\u3057\u304b\u3057Stash\u3092\u6bba\u3059\u3068Stash\u3068worker supervisor\u304c\u4e21\u65b9\u6b7b\u3093\u3067\u3001Superivosr\u304cStash\u3092\u8d77\u52d5\u3057\u3066\u304f\u308c\u3066\u3001Stash\u304cworker supervisor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u3002\u306a\u305c\uff1fsupervisortest.ex\u30d5\u30a1\u30a4\u30eb\u306eopts = [strategy: :one_for_all, name: SupervisorTest.Supervisor]\u306bone_for_all\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\u3082\u3057\u3053\u3053\u306fone_for_one\u3060\u3063\u305f\u3089\u3001Stash\u3092\u6bba\u3059\u3068\n** (MatchError) no match of right hand side value: {:error, {:already_started, #PID<0.107.0>}}\n\n\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\u306a\u305c\u304b\u3068\u3044\u3046\u3068Stash\u3060\u3051\u304c\u518d\u8d77\u52d5\u3055\u308c\u3001worker supervisor\u306f\u6b7b\u3093\u3067\u306a\u3044\u307e\u307e\u306a\u306e\u3067\u3001Stash\u3092worker supervisor\u3092\u8d77\u52d5\u3057\u3088\u3046\u3068\u3059\u308b\u3051\u3069\u3001\u4e0a\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n\u4e0b\u306fStash\u3092\u6bba\u3057\u3066\uff0cStash\u3068worker supervisor\u4e21\u65b9\u518d\u8d77\u52d5\u3055\u308c\u308b\u4f8b\u3067\u3059\uff0e\n19:05:38.835 [info]  Stash PID = #PID<0.106.0> <----\u3053\u308c\u3092\u6bba\u3059\n19:05:38.835 [info]  Supervisor PID = #PID<0.105.0>\n19:05:38.835 [info]  Worker Supervisor PID = #PID<0.107.0>\n\nInteractive Elixir (1.2.1) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)> :observer.start\n:ok\niex(2)> Process.exit(pid(0,106,0), :kill)\ntrue\n\n19:06:00.048 [info]  Stash PID = #PID<0.138.0>\niex(3)>\n19:06:00.048 [info]  Worker Supervisor PID = #PID<0.139.0>\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u629c\u7c8b\n\nA temporary child process is never restarted (not even when the supervisor restart strategy is rest_for_one or one_for_all and a sibling death causes the temporary process to be terminated).\n\n\u3064\u307e\u308aSupervisor\u306fone_for_all\u8a2d\u5b9a\u3055\u308c\u3066\u3082\uff08\u3059\u3079\u3066\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u518d\u8d77\u52d5\uff09temporary\u3068\u8a2d\u5b9a\u3055\u308c\u305f\n\u5b50\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u3001\u52b9\u679c\u306a\u3057\u3067\u3059\u3002\nElixir\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u306b\u3002\u3069\u3046\u3044\u3046\u98a8\u306bSupervisor\u3092\u8a2d\u5b9a\u3057\u305f\u3089\u3044\u3044\u304b\u306f\u306f\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u30e1\u30e2\u7a0b\u5ea6\u3067\u8a18\u9332\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u3084\u308a\u305f\u3044\u306e\u306fSupervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001Stash\u304c\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002\u305d\u3057\u3066\u3001Stash\u304b\u3089Supervisor\u306e\u4e0b\u306bworker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002Worker Supervisor\u3042\u308b\u3044\u306fStash\u3092\u6bba\u3059\u3068\u3001\u4e21\u65b9\u518d\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002worker\u3092\u7121\u8996\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u69cb\u6210\u306flearnyousomeerlang(ppool\u306e\u4f8b)\u3068Elixir in Action\u4e8c\u3064\u306e\u672c\u306b\u4e21\u65b9\u3042\u308a\u307e\u3057\u305f\u3002\u5b9f\u969b\u306b\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u518d\u8d77\u52d5\u30dd\u30ea\u30b7\u30fc`restart`, `one_for_one`, `one_for_all`\u306e\u90e8\u5206\u3067\u30cf\u30de\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.29.10.png](https://qiita-image-store.s3.amazonaws.com/0/54698/305a9bdd-cc75-6ca6-1f8c-3a6ce7b71972.png)\n\n`:observer.start`\u306f\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n<img width=\"555\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.54.04.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54698/1cd8635f-7920-6d4a-861e-37774c3a645c.png\">\n\n\n```\n$ mix new supervisor --sup --module SupervisorTest\n```\n\n`supervisortest.ex`\n\n```ex\n defmodule SupervisorTest do\n   use Application\n   require Logger\n\n   def start(_type, _args) do\n     import Supervisor.Spec, warn: false\n     # \u3053\u3053\u306f:one_for_one\u3060\u3068\uff0c\u3057\u304b\u3082Stash\u304c\u6b7b\u306c\u3068\uff0c\u30a8\u30e9\u30fc\u306b\u306a\u308b\n     opts = [strategy: :one_for_all, name: SupervisorTest.Supervisor]\n     children = [\n       # Stash\u306e\u4e2d\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3057\u305f\u3044\u306e\u3067\u3001\u3053\u3053\u306echildren\u306e\u4e2d\u306bworker supervisor\u3092\u5165\u308c\u306a\u3044\n       worker(SupervisorTest.Stash, [])\n     ]\n     {:ok, sup}=Supervisor.start_link(children, opts)\n     Logger.info \"Supervisor PID = #{inspect sup}\"\n     {:ok, sup}\n   end\n\n   def stop(_app) do\n     :ok\n   end\n end\n```\n\n`stash.ex`\n\n```ex\n defmodule SupervisorTest.Stash do\n   require Logger\n   use GenServer\n\n   def start_link() do\n     {:ok, pid} = GenServer.start_link(__MODULE__, :ok, name: __MODULE__)\n     :ok = Logger.info \"Stash PID = #{inspect pid}\"\n     {:ok, pid} # \u623b\u308a\u5024\u5fc5\u8981\n   end\n\n   def init(:ok) do\n     # Stash\u304c\u3059\u3050\u623b\u308a\u5024\u3092\u8fd4\u305b\u308b\u3088\u3046\u306b\n     # {:start_worker_sup}\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u6700\u521d\u306b\u51e6\u7406\u3055\u308c\u308b\n     # \u306a\u305c\u3053\u306e\u66f8\u304d\u65b9\u306flearnyousomeerlang\u306e18\u7ae0\u53c2\u7167\n     send self(), {:start_worker_sup}\n     {:ok, %{}}\n   end\n\n   def handle_info({:start_worker_sup}, state) do\n     import Supervisor.Spec\n     opts = [restart: :temporary]\n     {:ok, worker_sup_pid}= Supervisor.start_child(SupervisorTest.Supervisor, supervisor(SupervisorTest.WorkerSup, [], opts))\n     Process.link(worker_sup_pid)\n     {:noreply, state}\n   end\n\n   def handle_info(message, state) do\n      :ok = Logger.info\"Unknown message #{inspect message}\"\n     {:noreply, state}\n   end\n end\n```\n\n`workersup.ex`\n\n```ex\n defmodule SupervisorTest.WorkerSup do\n   require Logger\n   use Supervisor\n\n\n   def start_link() do\n     {:ok, pid} = Supervisor.start_link(__MODULE__,  :ok, name: __MODULE__)\n     Logger.info \"Worker Supervisor PID = #{inspect pid}\"\n     {:ok, pid}\n   end\n\n   def init(:ok) do\n     import Supervisor.Spec\n     opts = [strategy: :one_for_one, restart: :temporary]\n     supervise([], opts)\n   end\n end\n```\n\n\n\u3053\u3053\u306b\u4e00\u756a\u91cd\u8981\u306a\u306e`stash.ex`\u30d5\u30a1\u30a4\u30eb\u306bStash\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u304d\u306e\u8a2d\u5b9a\n\n```\nopts = [restart: :temporary]\n{:ok, worker_sup_pid}= Supervisor.start_child(SupervisorTest.Supervisor, supervisor(SupervisorTest.WorkerSup, [], opts))\nProcess.link(worker_sup_pid)\n```\n\nStash\u304b\u3089worker supervisor\u3092\u8d77\u52d5\u3059\u308b\u3068\u304d\u306b`restart`\u3092`temporary`\u306b\u8a2d\u5b9a\u3057\u305f\u4e0a\u3067\u3001`Process.link`\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u81ea\u5206\u3068worker supervisor\u3092\u30ea\u30f3\u30af\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001worker supervisor\u304c\u6b7b\u306c\u3068Stash\u3082\u4e00\u7dd2\u306b\u6b7b\u306b\u307e\u3059\u3002worker supervisor\u306e`restart`\u306f`temporary`\u306a\u306e\u3067\u3001Supervisor\u306fwoker supervisor\u3092\u518d\u8d77\u52d5\u3057\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001Stash\u3082worker supervisor\u3068\u4e00\u7dd2\u306b\u6b7b\u3093\u3060\u306e\u3067\u3001Supervisor\u306fStash\u3092\u518d\u8d77\u52d5\u3057\u3066\u304f\u308c\u307e\u3059\u3002Stash\u304c\u518d\u8d77\u52d5\u3055\u308c\u308b\u3068\u3082\u3046\u4e00\u56dewoker supervisor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5143\u306e\u72b6\u614b\u306b\u623b\u308a\u307e\u3059\u3002\n\n\n\u3082\u3057`Process.link(worker_sup_pid)`\u3092\u5165\u308c\u306a\u3044\u3068\u3001shell\u306e\u4e2d\u3067\u3001worker supervisor\u3092\u6bba\u3059\u30b3\u30de\u30f3\u30c9`Process.exit(worker_sup_pid, :kill)`\u5b9f\u884c\u3059\u308b\u3068\u3001worker supervisor\u304c\u6b7b\u306c\u3060\u3051\u3067\u3059\u3002\n\n<img width=\"526\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-02-26 18.56.19.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54698/aa4876e2-955c-06cc-3dc8-9f2b1d2f209a.png\">\n\n\u3057\u304b\u3057Stash\u3092\u6bba\u3059\u3068Stash\u3068worker supervisor\u304c\u4e21\u65b9\u6b7b\u3093\u3067\u3001Superivosr\u304cStash\u3092\u8d77\u52d5\u3057\u3066\u304f\u308c\u3066\u3001Stash\u304cworker supervisor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u3002\u306a\u305c\uff1f`supervisortest.ex`\u30d5\u30a1\u30a4\u30eb\u306e`opts = [strategy: :one_for_all, name: SupervisorTest.Supervisor]`\u306b`one_for_all`\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\u3082\u3057\u3053\u3053\u306f`one_for_one`\u3060\u3063\u305f\u3089\u3001Stash\u3092\u6bba\u3059\u3068\n\n```\n** (MatchError) no match of right hand side value: {:error, {:already_started, #PID<0.107.0>}}\n```\n\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\u306a\u305c\u304b\u3068\u3044\u3046\u3068Stash\u3060\u3051\u304c\u518d\u8d77\u52d5\u3055\u308c\u3001worker supervisor\u306f\u6b7b\u3093\u3067\u306a\u3044\u307e\u307e\u306a\u306e\u3067\u3001Stash\u3092worker supervisor\u3092\u8d77\u52d5\u3057\u3088\u3046\u3068\u3059\u308b\u3051\u3069\u3001\u4e0a\u306e\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n\n\u4e0b\u306fStash\u3092\u6bba\u3057\u3066\uff0cStash\u3068worker supervisor\u4e21\u65b9\u518d\u8d77\u52d5\u3055\u308c\u308b\u4f8b\u3067\u3059\uff0e\n\n```iex\n19:05:38.835 [info]  Stash PID = #PID<0.106.0> <----\u3053\u308c\u3092\u6bba\u3059\n19:05:38.835 [info]  Supervisor PID = #PID<0.105.0>\n19:05:38.835 [info]  Worker Supervisor PID = #PID<0.107.0>\n\nInteractive Elixir (1.2.1) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)> :observer.start\n:ok\niex(2)> Process.exit(pid(0,106,0), :kill)\ntrue\n\n19:06:00.048 [info]  Stash PID = #PID<0.138.0>\niex(3)>\n19:06:00.048 [info]  Worker Supervisor PID = #PID<0.139.0>\n```\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u629c\u7c8b\n> A temporary child process is never restarted (not even when the supervisor restart strategy is rest_for_one or one_for_all and a sibling death causes the temporary process to be terminated).\n\n\u3064\u307e\u308aSupervisor\u306f`one_for_all`\u8a2d\u5b9a\u3055\u308c\u3066\u3082\uff08\u3059\u3079\u3066\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u3092\u518d\u8d77\u52d5\uff09`temporary`\u3068\u8a2d\u5b9a\u3055\u308c\u305f\n\u5b50\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u3001\u52b9\u679c\u306a\u3057\u3067\u3059\u3002\n", "tags": ["Elixir", "Erlang", "supervisor"]}