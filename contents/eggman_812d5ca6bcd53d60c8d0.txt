{"tags": ["kernel", "Linux", "RaspberryPi"], "context": "Raspberry Pi 3 \u306edevice tree\u306e\u8a2d\u5b9a\u304c\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u3069\u3053\u3067\u51e6\u7406\u3055\u308c\u308b\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5206\u304b\u3063\u305f\u3068\u3053\u308d\u306e\u5206\u3060\u3051\u3092\u516c\u958b\u3002\n\nRaspberry Pi3 \u306e device tree \u306e\u8a2d\u5b9a\n\n\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e0b\u8a18\u306e\u5834\u6240\u306bdevice tree\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/raspberrypi/linux/blob/rpi-4.4.y/arch/arm/boot/dts/bcm2710-rpi-3-b.dts\n\u8abf\u3079\u305f\u304b\u3063\u305f\u306e\u306f\u3001 Raspberry Pi 3\u306eWi-Fi/BT\u30b3\u30f3\u30dc\u30c1\u30c3\u30d7 \u3068\u306e\u63a5\u7d9a\u90e8\u5206\u306a\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3060\u3051\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\u30d8\u30c3\u30c0\u90e8\u5206\n\n/dts-v1/; \u306fdeviece tree\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u793a\u3059\u3002\nbcm2708.dtsi\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\u3002\u3053\u306e\u884c\u4ee5\u964d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u304b\u3089\u5909\u66f4\u3092\u884c\u3046\u305f\u3081\u306e\u8a18\u8ff0\u3068\u306a\u308b\u3002\n/\u3000{ ... } \u306f\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\n/dts-v1/;\n\n#include \"bcm2710.dtsi\"\n\n/ {\n    compatible = \"brcm,bcm2710\",\"brcm,bcm2709\";\n    model = \"Raspberry Pi 3 Model B\";\n};\n\n\n&gpio\n\n&gpio\u306e\u30ce\u30fc\u30c9\u3067multiplex\u3055\u308c\u305f\u7aef\u5b50\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n&gpio {\n    sdio_pins: sdio_pins {\n        brcm,pins =     <34 35 36 37 38 39>;\n        brcm,function = <7>; // alt3 = SD1\n        brcm,pull =     <0 2 2 2 2 2>;\n    };\n\n    bt_pins: bt_pins {\n        brcm,pins = <43>;\n        brcm,function = <4>; /* alt0:GPCLK2 */\n        brcm,pull = <0>;\n    };\n\n    uart0_pins: uart0_pins {\n        brcm,pins = <32 33>;\n        brcm,function = <7>; /* alt3=UART0 */\n        brcm,pull = <0 2>;\n    };\n\n\n34 35 36 37 38 39\u306e\u756a\u53f7\u306e\u3000\u3092 sdio_pins\u3068\u3057\u3066\u4f7f\u3046\u3002\u300034\u306fpull\u7121\u3057\u300136 37 28 29\u3092pull up\u3068\u3059\u308b\u3002\n\uff14\uff13 \u3092 bt\u7528\u306e\u30af\u30ed\u30c3\u30af\u3068\u3057\u3066\u4f7f\u3046\u3002\u300043\u306fpull\u7121\u3057\u3002\n32 33 \u3092 BT\u7528\u306euart\u3068\u3057\u3066\u4f7f\u3046\u3002 32\u306fpull\u7121\u3057\u300133\u3092pull up\u3068\u3059\u308b\u3002\n\n\n&gpio\u3092\u51e6\u7406\u3059\u308b\u90e8\u5206\n\nbrcm,pins\u3068prcm,functions,\u3068brcm,pull\u306fdrivers/pinctrl/bcm/pinctrl-bcm2835.c \u306e bcm2835_pctl_dt_node_to_map\uff08\uff09\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\npropetry\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf pins \u3068 funcs \u3068 pulls \u3092 of_find_property()\u3067\u53d6\u5f97\n\u8981\u7d20\u6570 num_pins \u3068 num_funcs \u3068 num_pulls\u3092\u53d6\u5f97\npinctrl_map \u69cb\u9020\u4f53\u3092\u30a2\u30ed\u30b1\u30fc\u30c8\n\u5404\u30d4\u30f3\u306b\u5bfe\u3057\u3066\n\n\nof_property_read_u32_index\uff08\uff09\u3067pin\u756a\u53f7\u3092\u53d6\u5f97\nof_property_read_u32_index()\u3067func\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u3001bcm2835_pctl_dt_node_to_map_func\uff08\uff09\u3067pin\u306bfunc\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nof_property_read_u32_index\uff08\uff09\u3067pull \u30d7\u30eb\u30a2\u30c3\u30d7/\u30d7\u30eb\u30c0\u30a6\u30f3\u8a2d\u5b9a\u3092\u53d6\u5f97\u3057\u3066\u3001bcm2835_pctl_dt_node_to_map_pull\uff08\uff09\u3067pin\u306b\u30d7\u30eb\u30a2\u30c3\u30d7/\u30d7\u30eb\u30c0\u30a6\u30f3\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3046\u3002\n\n\n\nstatic int bcm2835_pctl_dt_node_to_map(struct pinctrl_dev *pctldev,\n        struct device_node *np,\n        struct pinctrl_map **map, unsigned *num_maps)\n{\n    struct bcm2835_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);\n    struct property *pins, *funcs, *pulls;\n    int num_pins, num_funcs, num_pulls, maps_per_pin;\n    struct pinctrl_map *maps, *cur_map;\n    int i, err;\n    u32 pin, func, pull;\n\n    pins = of_find_property(np, \"brcm,pins\", NULL);\n    if (!pins) {\n        dev_err(pc->dev, \"%s: missing brcm,pins property\\n\",\n                of_node_full_name(np));\n        return -EINVAL;\n    }\n\n    funcs = of_find_property(np, \"brcm,function\", NULL);\n    pulls = of_find_property(np, \"brcm,pull\", NULL);\n\n    if (!funcs && !pulls) {\n        dev_err(pc->dev,\n            \"%s: neither brcm,function nor brcm,pull specified\\n\",\n            of_node_full_name(np));\n        return -EINVAL;\n    }\n\n    num_pins = pins->length / 4;\n    num_funcs = funcs ? (funcs->length / 4) : 0;\n    num_pulls = pulls ? (pulls->length / 4) : 0;\n\n    if (num_funcs > 1 && num_funcs != num_pins) {\n        dev_err(pc->dev,\n            \"%s: brcm,function must have 1 or %d entries\\n\",\n            of_node_full_name(np), num_pins);\n        return -EINVAL;\n    }\n\n    if (num_pulls > 1 && num_pulls != num_pins) {\n        dev_err(pc->dev,\n            \"%s: brcm,pull must have 1 or %d entries\\n\",\n            of_node_full_name(np), num_pins);\n        return -EINVAL;\n    }\n\n    maps_per_pin = 0;\n    if (num_funcs)\n        maps_per_pin++;\n    if (num_pulls)\n        maps_per_pin++;\n    cur_map = maps = kzalloc(num_pins * maps_per_pin * sizeof(*maps),\n                GFP_KERNEL);\n    if (!maps)\n        return -ENOMEM;\n\n    for (i = 0; i < num_pins; i++) {\n        err = of_property_read_u32_index(np, \"brcm,pins\", i, &pin);\n        if (err)\n            goto out;\n        if (pin >= ARRAY_SIZE(bcm2835_gpio_pins)) {\n            dev_err(pc->dev, \"%s: invalid brcm,pins value %d\\n\",\n                of_node_full_name(np), pin);\n            err = -EINVAL;\n            goto out;\n        }\n\n        if (num_funcs) {\n            err = of_property_read_u32_index(np, \"brcm,function\",\n                    (num_funcs > 1) ? i : 0, &func);\n            if (err)\n                goto out;\n            err = bcm2835_pctl_dt_node_to_map_func(pc, np, pin,\n                            func, &cur_map);\n            if (err)\n                goto out;\n        }\n        if (num_pulls) {\n            err = of_property_read_u32_index(np, \"brcm,pull\",\n                    (num_pulls > 1) ? i : 0, &pull);\n            if (err)\n                goto out;\n            err = bcm2835_pctl_dt_node_to_map_pull(pc, np, pin,\n                            pull, &cur_map);\n            if (err)\n                goto out;\n        }\n    }\n\n    *map = maps;\n    *num_maps = num_pins * maps_per_pin;\n\n    return 0;\n\nout:\n    kfree(maps);\n    return err;\n}\n\n\n&mmc\n\n&mmc\u3067\u306fmmc\u30c9\u30e9\u30a4\u30d0\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\nRaspberry Pi \uff13\u3067\u306f\u3001SD\u30e1\u30e2\u30ea\u30b9\u30ed\u30c3\u30c8\u306e\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30db\u30b9\u30c8\u5074\u3092sdhost\u30c9\u30e9\u30a4\u30d0\u3001Wi-FI/BT\u30c1\u30c3\u30d7\u304c\u7e4b\u304c\u3063\u3066\u3044\u308b\u30db\u30b9\u30c8\u5074\u3092mmc\u30c9\u30e9\u30a4\u30d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n&mmc {\n    pinctrl-names = \"default\";\n    pinctrl-0 = <&sdio_pins>;\n    non-removable;\n    bus-width = <4>;\n    status = \"okay\";\n    brcm,overclock-50 = <0>;\n};\n\n\n\u7aef\u5b50 sdio_poins\n\u53d6\u308a\u5916\u3057\u3057\u306a\u3044\u30c7\u30d0\u30a4\u30b9\u3092\u63a5\u7d9a\n\u30d0\u30b9\u5e45 4bit\nstatus \u306f\u30c7\u30d5\u30a9\u30eb\u30c8(cm2708_common.dtsi)\u3060\u3068disabled\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3092okay\u306b\u3057\u3066\u6709\u52b9\u306b\u3059\u308b\u3002\nSDCLK 50MHZ\u306b\u3059\u308b\u6a5f\u80fd:0  (\u591a\u5206\u7121\u52b9\u3068\u3044\u3046\u610f\u5473\uff1f)\n\n\n&mmc\u3092\u51e6\u7406\u3059\u308b\u90e8\u5206\n\npinctrl-names \u3068 pinctrl-0 \u304c\u3069\u3053\u3067\u51e6\u7406\u3055\u308c\u308b\u304b\u4e0d\u660e\u3002 driver/pinctl\u306e\u3069\u3053\u304b\nnon-removblable \u3068 bus-wide\u306fdrivers/mmc/core/host.c \u306e\u3000mmc_of_parse()\u3067\u51e6\u7406\u3059\u308b\u3002\nstatus \u3069\u3053\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u304b\u4e0d\u660e\nbrcm,overclock-50\u306fdrivers/mmc/host/bcm2835-mmc.c \u306e bcm2835_mmc_probe()\u3067\u51e6\u7406\u3059\u308b\u3002\n\n\n&uart0\n&uart0 {\n    pinctrl-names = \"default\";\n    pinctrl-0 = <&uart0_pins &bt_pins>;\n    status = \"okay\";\n};\n\n\n\nuart0 \u306e\u90e8\u5206\u3067UART0\u306e\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3046\n\u7aef\u5b50 uart0_pins bt_pins\nstatus \u306f\u30c7\u30d5\u30a9\u30eb\u30c8(cm2708_common.dtsi)\u3060\u3068disabled\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3092okay\u306b\u3057\u3066\u6709\u52b9\u306b\u3059\u308b\u3002\n\n\n\u53c2\u8003\n\nhttps://www.raspberrypi.org/documentation/configuration/device-tree.md\nLinux Kernel \u306e Documentation/devicetree \u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\npinctrl-bindings.txt \n\n\n\nRaspberry Pi 3 \u306edevice tree\u306e\u8a2d\u5b9a\u304c\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u3069\u3053\u3067\u51e6\u7406\u3055\u308c\u308b\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5206\u304b\u3063\u305f\u3068\u3053\u308d\u306e\u5206\u3060\u3051\u3092\u516c\u958b\u3002\n\n# Raspberry Pi3 \u306e device tree \u306e\u8a2d\u5b9a\n* \u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e0b\u8a18\u306e\u5834\u6240\u306bdevice tree\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n* https://github.com/raspberrypi/linux/blob/rpi-4.4.y/arch/arm/boot/dts/bcm2710-rpi-3-b.dts\n* \u8abf\u3079\u305f\u304b\u3063\u305f\u306e\u306f\u3001 Raspberry Pi 3\u306eWi-Fi/BT\u30b3\u30f3\u30dc\u30c1\u30c3\u30d7 \u3068\u306e\u63a5\u7d9a\u90e8\u5206\u306a\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3060\u3051\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u30d8\u30c3\u30c0\u90e8\u5206\n* /dts-v1/; \u306fdeviece tree\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u793a\u3059\u3002\n* bcm2708.dtsi\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\u3002\u3053\u306e\u884c\u4ee5\u964d\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u304b\u3089\u5909\u66f4\u3092\u884c\u3046\u305f\u3081\u306e\u8a18\u8ff0\u3068\u306a\u308b\u3002\n* /\u3000{ ... } \u306f\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\n```\n/dts-v1/;\n\n#include \"bcm2710.dtsi\"\n\n/ {\n\tcompatible = \"brcm,bcm2710\",\"brcm,bcm2709\";\n\tmodel = \"Raspberry Pi 3 Model B\";\n};\n```\n\n\n# &gpio\n* &gpio\u306e\u30ce\u30fc\u30c9\u3067multiplex\u3055\u308c\u305f\u7aef\u5b50\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n```\n&gpio {\n\tsdio_pins: sdio_pins {\n\t\tbrcm,pins =     <34 35 36 37 38 39>;\n\t\tbrcm,function = <7>; // alt3 = SD1\n\t\tbrcm,pull =     <0 2 2 2 2 2>;\n\t};\n\n\tbt_pins: bt_pins {\n\t\tbrcm,pins = <43>;\n\t\tbrcm,function = <4>; /* alt0:GPCLK2 */\n\t\tbrcm,pull = <0>;\n\t};\n\n\tuart0_pins: uart0_pins {\n\t\tbrcm,pins = <32 33>;\n\t\tbrcm,function = <7>; /* alt3=UART0 */\n\t\tbrcm,pull = <0 2>;\n\t};\n```\n\n* 34 35 36 37 38 39\u306e\u756a\u53f7\u306e\u3000\u3092 sdio_pins\u3068\u3057\u3066\u4f7f\u3046\u3002\u300034\u306fpull\u7121\u3057\u300136 37 28 29\u3092pull up\u3068\u3059\u308b\u3002\n* \uff14\uff13 \u3092 bt\u7528\u306e\u30af\u30ed\u30c3\u30af\u3068\u3057\u3066\u4f7f\u3046\u3002\u300043\u306fpull\u7121\u3057\u3002\n* 32 33 \u3092 BT\u7528\u306euart\u3068\u3057\u3066\u4f7f\u3046\u3002 32\u306fpull\u7121\u3057\u300133\u3092pull up\u3068\u3059\u308b\u3002\n\n## &gpio\u3092\u51e6\u7406\u3059\u308b\u90e8\u5206\n* brcm,pins\u3068prcm,functions,\u3068brcm,pull\u306fdrivers/pinctrl/bcm/pinctrl-bcm2835.c \u306e bcm2835_pctl_dt_node_to_map\uff08\uff09\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\n* propetry\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf pins \u3068 funcs \u3068 pulls \u3092 of_find_property()\u3067\u53d6\u5f97\n* \u8981\u7d20\u6570 num_pins \u3068 num_funcs \u3068 num_pulls\u3092\u53d6\u5f97\n* pinctrl_map \u69cb\u9020\u4f53\u3092\u30a2\u30ed\u30b1\u30fc\u30c8\n* \u5404\u30d4\u30f3\u306b\u5bfe\u3057\u3066\n * of_property_read_u32_index\uff08\uff09\u3067pin\u756a\u53f7\u3092\u53d6\u5f97\n * of_property_read_u32_index()\u3067func\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u3001bcm2835_pctl_dt_node_to_map_func\uff08\uff09\u3067pin\u306bfunc\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n * of_property_read_u32_index\uff08\uff09\u3067pull \u30d7\u30eb\u30a2\u30c3\u30d7/\u30d7\u30eb\u30c0\u30a6\u30f3\u8a2d\u5b9a\u3092\u53d6\u5f97\u3057\u3066\u3001bcm2835_pctl_dt_node_to_map_pull\uff08\uff09\u3067pin\u306b\u30d7\u30eb\u30a2\u30c3\u30d7/\u30d7\u30eb\u30c0\u30a6\u30f3\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3046\u3002\n\n```\nstatic int bcm2835_pctl_dt_node_to_map(struct pinctrl_dev *pctldev,\n\t\tstruct device_node *np,\n\t\tstruct pinctrl_map **map, unsigned *num_maps)\n{\n\tstruct bcm2835_pinctrl *pc = pinctrl_dev_get_drvdata(pctldev);\n\tstruct property *pins, *funcs, *pulls;\n\tint num_pins, num_funcs, num_pulls, maps_per_pin;\n\tstruct pinctrl_map *maps, *cur_map;\n\tint i, err;\n\tu32 pin, func, pull;\n\n\tpins = of_find_property(np, \"brcm,pins\", NULL);\n\tif (!pins) {\n\t\tdev_err(pc->dev, \"%s: missing brcm,pins property\\n\",\n\t\t\t\tof_node_full_name(np));\n\t\treturn -EINVAL;\n\t}\n\n\tfuncs = of_find_property(np, \"brcm,function\", NULL);\n\tpulls = of_find_property(np, \"brcm,pull\", NULL);\n\n\tif (!funcs && !pulls) {\n\t\tdev_err(pc->dev,\n\t\t\t\"%s: neither brcm,function nor brcm,pull specified\\n\",\n\t\t\tof_node_full_name(np));\n\t\treturn -EINVAL;\n\t}\n\n\tnum_pins = pins->length / 4;\n\tnum_funcs = funcs ? (funcs->length / 4) : 0;\n\tnum_pulls = pulls ? (pulls->length / 4) : 0;\n\n\tif (num_funcs > 1 && num_funcs != num_pins) {\n\t\tdev_err(pc->dev,\n\t\t\t\"%s: brcm,function must have 1 or %d entries\\n\",\n\t\t\tof_node_full_name(np), num_pins);\n\t\treturn -EINVAL;\n\t}\n\n\tif (num_pulls > 1 && num_pulls != num_pins) {\n\t\tdev_err(pc->dev,\n\t\t\t\"%s: brcm,pull must have 1 or %d entries\\n\",\n\t\t\tof_node_full_name(np), num_pins);\n\t\treturn -EINVAL;\n\t}\n\n\tmaps_per_pin = 0;\n\tif (num_funcs)\n\t\tmaps_per_pin++;\n\tif (num_pulls)\n\t\tmaps_per_pin++;\n\tcur_map = maps = kzalloc(num_pins * maps_per_pin * sizeof(*maps),\n\t\t\t\tGFP_KERNEL);\n\tif (!maps)\n\t\treturn -ENOMEM;\n\n\tfor (i = 0; i < num_pins; i++) {\n\t\terr = of_property_read_u32_index(np, \"brcm,pins\", i, &pin);\n\t\tif (err)\n\t\t\tgoto out;\n\t\tif (pin >= ARRAY_SIZE(bcm2835_gpio_pins)) {\n\t\t\tdev_err(pc->dev, \"%s: invalid brcm,pins value %d\\n\",\n\t\t\t\tof_node_full_name(np), pin);\n\t\t\terr = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (num_funcs) {\n\t\t\terr = of_property_read_u32_index(np, \"brcm,function\",\n\t\t\t\t\t(num_funcs > 1) ? i : 0, &func);\n\t\t\tif (err)\n\t\t\t\tgoto out;\n\t\t\terr = bcm2835_pctl_dt_node_to_map_func(pc, np, pin,\n\t\t\t\t\t\t\tfunc, &cur_map);\n\t\t\tif (err)\n\t\t\t\tgoto out;\n\t\t}\n\t\tif (num_pulls) {\n\t\t\terr = of_property_read_u32_index(np, \"brcm,pull\",\n\t\t\t\t\t(num_pulls > 1) ? i : 0, &pull);\n\t\t\tif (err)\n\t\t\t\tgoto out;\n\t\t\terr = bcm2835_pctl_dt_node_to_map_pull(pc, np, pin,\n\t\t\t\t\t\t\tpull, &cur_map);\n\t\t\tif (err)\n\t\t\t\tgoto out;\n\t\t}\n\t}\n\n\t*map = maps;\n\t*num_maps = num_pins * maps_per_pin;\n\n\treturn 0;\n\nout:\n\tkfree(maps);\n\treturn err;\n}\n```\n# &mmc\n* &mmc\u3067\u306fmmc\u30c9\u30e9\u30a4\u30d0\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n* Raspberry Pi \uff13\u3067\u306f\u3001SD\u30e1\u30e2\u30ea\u30b9\u30ed\u30c3\u30c8\u306e\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u30db\u30b9\u30c8\u5074\u3092sdhost\u30c9\u30e9\u30a4\u30d0\u3001Wi-FI/BT\u30c1\u30c3\u30d7\u304c\u7e4b\u304c\u3063\u3066\u3044\u308b\u30db\u30b9\u30c8\u5074\u3092mmc\u30c9\u30e9\u30a4\u30d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n&mmc {\n\tpinctrl-names = \"default\";\n\tpinctrl-0 = <&sdio_pins>;\n\tnon-removable;\n\tbus-width = <4>;\n\tstatus = \"okay\";\n\tbrcm,overclock-50 = <0>;\n};\n```\n* \u7aef\u5b50 sdio_poins\n* \u53d6\u308a\u5916\u3057\u3057\u306a\u3044\u30c7\u30d0\u30a4\u30b9\u3092\u63a5\u7d9a\n* \u30d0\u30b9\u5e45 4bit\n* status \u306f\u30c7\u30d5\u30a9\u30eb\u30c8(cm2708_common.dtsi)\u3060\u3068disabled\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3092okay\u306b\u3057\u3066\u6709\u52b9\u306b\u3059\u308b\u3002\n* SDCLK 50MHZ\u306b\u3059\u308b\u6a5f\u80fd:0  (\u591a\u5206\u7121\u52b9\u3068\u3044\u3046\u610f\u5473\uff1f)\n\n## &mmc\u3092\u51e6\u7406\u3059\u308b\u90e8\u5206\n\n* pinctrl-names \u3068 pinctrl-0 \u304c\u3069\u3053\u3067\u51e6\u7406\u3055\u308c\u308b\u304b\u4e0d\u660e\u3002 driver/pinctl\u306e\u3069\u3053\u304b\n* non-removblable \u3068 bus-wide\u306fdrivers/mmc/core/host.c \u306e\u3000mmc_of_parse()\u3067\u51e6\u7406\u3059\u308b\u3002\n* status \u3069\u3053\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u304b\u4e0d\u660e\n* brcm,overclock-50\u306fdrivers/mmc/host/bcm2835-mmc.c \u306e bcm2835_mmc_probe()\u3067\u51e6\u7406\u3059\u308b\u3002\n\n## &uart0\n```\n&uart0 {\n\tpinctrl-names = \"default\";\n\tpinctrl-0 = <&uart0_pins &bt_pins>;\n\tstatus = \"okay\";\n};\n\n```\n* uart0 \u306e\u90e8\u5206\u3067UART0\u306e\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3046\n* \u7aef\u5b50 uart0_pins bt_pins\n* status \u306f\u30c7\u30d5\u30a9\u30eb\u30c8(cm2708_common.dtsi)\u3060\u3068disabled\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3092okay\u306b\u3057\u3066\u6709\u52b9\u306b\u3059\u308b\u3002\n\n\n# \u53c2\u8003\n* https://www.raspberrypi.org/documentation/configuration/device-tree.md\n* Linux Kernel \u306e Documentation/devicetree \u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n * pinctrl-bindings.txt \n"}