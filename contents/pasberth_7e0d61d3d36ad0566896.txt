{"tags": ["memo"], "context": " More than 1 year has passed since last update.\u591a\u76f8\u30d0\u30ea\u30a2\u30f3\u30c8\u3068\u518d\u5e30\u578b\u304c\u3042\u308c\u3070\uff0c\u9759\u7684\u578b\u4ed8\u304d\u30de\u30af\u30ed\u304c\u5b9f\u88c5\u3067\u304d\u308b\uff0e\u578b\u63a8\u8ad6\u3082\u3067\u304d\u308b\u3057\uff0c\u5f53\u7136AST\u3092\u53d7\u3051\u53d6\u3063\u3066AST\u3092\u8fd4\u3059\u300c\u771f\u306e\u300dLisp\u306e\u30de\u30af\u30ed\u3067\u3042\u308b\ntype ast = [`id of string | `cons of ast * ast | `abs of [`id of string] * ast | `nil ]\nlet let1 : 'a -> ast = function\n  | `cons(pat, `cons(expr_1, `cons(expr_2, `nil))) -> `cons(`abs(pat,expr_2),`cons(expr_1, `nil))\nlet rec letn = function\n  | `cons(`nil, `cons(expr,`nil)) -> expr\n  | `cons(`cons(pat, `cons(expr_1, decls)),`cons(expr_2,`nil)) -> let1 (`cons(pat,`cons(expr_1, `cons((letn (`cons(decls,`cons(expr_2,`nil)))),`nil))))\nlet x = let1 (`cons(`id \"a\", `cons(`id \"b\", `cons(`id \"c\", `nil))))\nlet y = letn (`cons(`cons(`id \"b\", `cons (`id \"c\", `cons (`id \"d\", `cons (`id \"e\", `nil)))), (`cons (`id \"a\", `nil))))\n\nocamlc -i \u3067\u63a8\u8ad6\u3055\u308c\u305f\u578b\ntype ast =\n    [ `abs of [ `id of string ] * ast\n    | `cons of ast * ast\n    | `id of string\n    | `nil ]\nval let1 :\n  [< `cons of\n       [ `id of string ] * [< `cons of ast * [< `cons of ast * [< `nil ] ] ] ] ->\n  ast\nval letn :\n  [ `cons of\n      ([< `cons of [ `id of string ] * [< `cons of ast * 'a ] | `nil ] as 'a) *\n      [ `cons of ast * [ `nil ] ] ] ->\n  ast\nval x : ast\nval y : ast\n\nlet1 \u3084 letn \u306e\u578b\u3092\u6ce8\u610f\u6df1\u304f\u898b\u3066\u6b32\u3057\u3044\uff0e\nlet1 \u306e\u578b\u306f\uff0c (let1 x y z) \u3068\u547c\u3073\u51fa\u3057\u305f\u3068\u3057\u305f\u3089\uff0c x : [`id of string] y : ast z : ast \u3067\u3042\u308b\u5236\u7d04\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\n\u591a\u76f8\u30d0\u30ea\u30a2\u30f3\u30c8\u3068\u518d\u5e30\u578b\u304c\u3042\u308c\u3070\uff0c\u9759\u7684\u578b\u4ed8\u304d\u30de\u30af\u30ed\u304c\u5b9f\u88c5\u3067\u304d\u308b\uff0e\u578b\u63a8\u8ad6\u3082\u3067\u304d\u308b\u3057\uff0c\u5f53\u7136AST\u3092\u53d7\u3051\u53d6\u3063\u3066AST\u3092\u8fd4\u3059\u300c\u771f\u306e\u300dLisp\u306e\u30de\u30af\u30ed\u3067\u3042\u308b\n\n```ocaml\ntype ast = [`id of string | `cons of ast * ast | `abs of [`id of string] * ast | `nil ]\nlet let1 : 'a -> ast = function\n  | `cons(pat, `cons(expr_1, `cons(expr_2, `nil))) -> `cons(`abs(pat,expr_2),`cons(expr_1, `nil))\nlet rec letn = function\n  | `cons(`nil, `cons(expr,`nil)) -> expr\n  | `cons(`cons(pat, `cons(expr_1, decls)),`cons(expr_2,`nil)) -> let1 (`cons(pat,`cons(expr_1, `cons((letn (`cons(decls,`cons(expr_2,`nil)))),`nil))))\nlet x = let1 (`cons(`id \"a\", `cons(`id \"b\", `cons(`id \"c\", `nil))))\nlet y = letn (`cons(`cons(`id \"b\", `cons (`id \"c\", `cons (`id \"d\", `cons (`id \"e\", `nil)))), (`cons (`id \"a\", `nil))))\n```\n\nocamlc -i \u3067\u63a8\u8ad6\u3055\u308c\u305f\u578b\n\n```ocaml\ntype ast =\n    [ `abs of [ `id of string ] * ast\n    | `cons of ast * ast\n    | `id of string\n    | `nil ]\nval let1 :\n  [< `cons of\n       [ `id of string ] * [< `cons of ast * [< `cons of ast * [< `nil ] ] ] ] ->\n  ast\nval letn :\n  [ `cons of\n      ([< `cons of [ `id of string ] * [< `cons of ast * 'a ] | `nil ] as 'a) *\n      [ `cons of ast * [ `nil ] ] ] ->\n  ast\nval x : ast\nval y : ast\n```\n\nlet1 \u3084 letn \u306e\u578b\u3092\u6ce8\u610f\u6df1\u304f\u898b\u3066\u6b32\u3057\u3044\uff0e\nlet1 \u306e\u578b\u306f\uff0c `(let1 x y z)` \u3068\u547c\u3073\u51fa\u3057\u305f\u3068\u3057\u305f\u3089\uff0c ``x : [`id of string]`` ``y : ast`` ``z : ast`` \u3067\u3042\u308b\u5236\u7d04\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\n"}